// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 732 0 2
// PrepareArabian ;
  31: CALL 1425 0 0
// PrepareRussian ;
  35: CALL 3023 0 0
// Action ;
  39: CALL 7582 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 210: LD_ADDR_EXP 14
 214: PUSH
 215: LD_STRING 04_1_RuLabCaptured
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 30
 225: ST_TO_ADDR
// captureCounter := 0 ;
 226: LD_ADDR_EXP 18
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 234: LD_ADDR_EXP 19
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// flamethrowerBuilt := false ;
 242: LD_ADDR_EXP 20
 246: PUSH
 247: LD_INT 0
 249: ST_TO_ADDR
// end ;
 250: LD_VAR 0 1
 254: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 255: LD_EXP 10
 259: NOT
 260: PUSH
 261: LD_EXP 9
 265: NOT
 266: AND
 267: PUSH
 268: LD_EXP 39
 272: NOT
 273: AND
 274: PUSH
 275: LD_EXP 40
 279: NOT
 280: AND
 281: IFFALSE 293
 283: GO 285
 285: DISABLE
// SetAchievement ( ACH_EXT ) ;
 286: LD_STRING ACH_EXT
 288: PPUSH
 289: CALL_OW 543
 293: END
// every 0 0$1 trigger captureCounter >= 6 do
 294: LD_EXP 18
 298: PUSH
 299: LD_INT 6
 301: GREATEREQUAL
 302: IFFALSE 314
 304: GO 306
 306: DISABLE
// SetAchievement ( ACH_KEY ) ;
 307: LD_STRING ACH_KEY
 309: PPUSH
 310: CALL_OW 543
 314: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 315: LD_EXP 19
 319: PUSH
 320: LD_INT 3
 322: GREATEREQUAL
 323: IFFALSE 335
 325: GO 327
 327: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 328: LD_STRING ACH_CHEM
 330: PPUSH
 331: CALL_OW 543
 335: END
// every 0 0$1 trigger debug do var i ;
 336: LD_EXP 1
 340: IFFALSE 424
 342: GO 344
 344: DISABLE
 345: LD_INT 0
 347: PPUSH
// begin enable ;
 348: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 349: LD_ADDR_VAR 0 1
 353: PUSH
 354: LD_INT 22
 356: PUSH
 357: LD_INT 2
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PUSH
 364: LD_INT 3
 366: PUSH
 367: LD_INT 21
 369: PUSH
 370: LD_INT 3
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: PUSH
 381: EMPTY
 382: LIST
 383: LIST
 384: PPUSH
 385: CALL_OW 69
 389: PUSH
 390: FOR_IN
 391: IFFALSE 422
// if GetLives ( i ) < 1000 then
 393: LD_VAR 0 1
 397: PPUSH
 398: CALL_OW 256
 402: PUSH
 403: LD_INT 1000
 405: LESS
 406: IFFALSE 420
// SetLives ( i , 1000 ) ;
 408: LD_VAR 0 1
 412: PPUSH
 413: LD_INT 1000
 415: PPUSH
 416: CALL_OW 234
 420: GO 390
 422: POP
 423: POP
// end ; end_of_file
 424: PPOPN 1
 426: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 427: LD_INT 0
 429: PPUSH
// uc_side := side ;
 430: LD_ADDR_OWVAR 20
 434: PUSH
 435: LD_VAR 0 1
 439: ST_TO_ADDR
// uc_nation := nation ;
 440: LD_ADDR_OWVAR 21
 444: PUSH
 445: LD_VAR 0 2
 449: ST_TO_ADDR
// vc_chassis := chassis ;
 450: LD_ADDR_OWVAR 37
 454: PUSH
 455: LD_VAR 0 3
 459: ST_TO_ADDR
// vc_engine := engine ;
 460: LD_ADDR_OWVAR 39
 464: PUSH
 465: LD_VAR 0 4
 469: ST_TO_ADDR
// vc_control := control ;
 470: LD_ADDR_OWVAR 38
 474: PUSH
 475: LD_VAR 0 5
 479: ST_TO_ADDR
// vc_weapon := weapon ;
 480: LD_ADDR_OWVAR 40
 484: PUSH
 485: LD_VAR 0 6
 489: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 490: LD_ADDR_OWVAR 41
 494: PUSH
 495: LD_VAR 0 7
 499: ST_TO_ADDR
// result := CreateVehicle ;
 500: LD_ADDR_VAR 0 8
 504: PUSH
 505: CALL_OW 45
 509: ST_TO_ADDR
// end ;
 510: LD_VAR 0 8
 514: RET
// export function SayX ( units , ident ) ; var i ; begin
 515: LD_INT 0
 517: PPUSH
 518: PPUSH
// result := false ;
 519: LD_ADDR_VAR 0 3
 523: PUSH
 524: LD_INT 0
 526: ST_TO_ADDR
// if not units then
 527: LD_VAR 0 1
 531: NOT
 532: IFFALSE 536
// exit ;
 534: GO 590
// for i in units do
 536: LD_ADDR_VAR 0 4
 540: PUSH
 541: LD_VAR 0 1
 545: PUSH
 546: FOR_IN
 547: IFFALSE 588
// if IsOk ( i ) then
 549: LD_VAR 0 4
 553: PPUSH
 554: CALL_OW 302
 558: IFFALSE 586
// begin Say ( i , ident ) ;
 560: LD_VAR 0 4
 564: PPUSH
 565: LD_VAR 0 2
 569: PPUSH
 570: CALL_OW 88
// result := i ;
 574: LD_ADDR_VAR 0 3
 578: PUSH
 579: LD_VAR 0 4
 583: ST_TO_ADDR
// break ;
 584: GO 588
// end ;
 586: GO 546
 588: POP
 589: POP
// end ;
 590: LD_VAR 0 3
 594: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 595: LD_INT 0
 597: PPUSH
 598: PPUSH
// InitUc ;
 599: CALL_OW 18
// InitHc ;
 603: CALL_OW 19
// uc_side := 0 ;
 607: LD_ADDR_OWVAR 20
 611: PUSH
 612: LD_INT 0
 614: ST_TO_ADDR
// uc_nation := 0 ;
 615: LD_ADDR_OWVAR 21
 619: PUSH
 620: LD_INT 0
 622: ST_TO_ADDR
// for i = 1 to amount do
 623: LD_ADDR_VAR 0 4
 627: PUSH
 628: DOUBLE
 629: LD_INT 1
 631: DEC
 632: ST_TO_ADDR
 633: LD_VAR 0 2
 637: PUSH
 638: FOR_TO
 639: IFFALSE 721
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 641: LD_ADDR_OWVAR 29
 645: PUSH
 646: LD_INT 9
 648: PPUSH
 649: LD_INT 12
 651: PPUSH
 652: CALL_OW 12
 656: PUSH
 657: LD_INT 9
 659: PPUSH
 660: LD_INT 12
 662: PPUSH
 663: CALL_OW 12
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 672: LD_ADDR_OWVAR 35
 676: PUSH
 677: LD_INT 1
 679: NEG
 680: PPUSH
 681: LD_INT 1
 683: PPUSH
 684: CALL_OW 12
 688: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 689: LD_INT 0
 691: PPUSH
 692: LD_INT 12
 694: PPUSH
 695: LD_INT 1
 697: PPUSH
 698: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 702: CALL_OW 44
 706: PPUSH
 707: LD_VAR 0 1
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 638
 721: POP
 722: POP
// InitHc ;
 723: CALL_OW 19
// end ;
 727: LD_VAR 0 3
 731: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 732: LD_INT 0
 734: PPUSH
 735: PPUSH
// uc_side := 0 ;
 736: LD_ADDR_OWVAR 20
 740: PUSH
 741: LD_INT 0
 743: ST_TO_ADDR
// uc_nation := 0 ;
 744: LD_ADDR_OWVAR 21
 748: PUSH
 749: LD_INT 0
 751: ST_TO_ADDR
// for i := 1 to 3 do
 752: LD_ADDR_VAR 0 4
 756: PUSH
 757: DOUBLE
 758: LD_INT 1
 760: DEC
 761: ST_TO_ADDR
 762: LD_INT 3
 764: PUSH
 765: FOR_TO
 766: IFFALSE 803
// begin hc_class := 21 ;
 768: LD_ADDR_OWVAR 28
 772: PUSH
 773: LD_INT 21
 775: ST_TO_ADDR
// hc_gallery :=  ;
 776: LD_ADDR_OWVAR 33
 780: PUSH
 781: LD_STRING 
 783: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 784: CALL_OW 44
 788: PPUSH
 789: LD_VAR 0 1
 793: PPUSH
 794: LD_INT 0
 796: PPUSH
 797: CALL_OW 49
// end ;
 801: GO 765
 803: POP
 804: POP
// for i := 1 to 3 do
 805: LD_ADDR_VAR 0 4
 809: PUSH
 810: DOUBLE
 811: LD_INT 1
 813: DEC
 814: ST_TO_ADDR
 815: LD_INT 3
 817: PUSH
 818: FOR_TO
 819: IFFALSE 856
// begin hc_class := 18 ;
 821: LD_ADDR_OWVAR 28
 825: PUSH
 826: LD_INT 18
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 837: CALL_OW 44
 841: PPUSH
 842: LD_VAR 0 1
 846: PPUSH
 847: LD_INT 0
 849: PPUSH
 850: CALL_OW 49
// end ;
 854: GO 818
 856: POP
 857: POP
// for i := 1 to 3 do
 858: LD_ADDR_VAR 0 4
 862: PUSH
 863: DOUBLE
 864: LD_INT 1
 866: DEC
 867: ST_TO_ADDR
 868: LD_INT 3
 870: PUSH
 871: FOR_TO
 872: IFFALSE 909
// begin hc_class := 13 ;
 874: LD_ADDR_OWVAR 28
 878: PUSH
 879: LD_INT 13
 881: ST_TO_ADDR
// hc_gallery :=  ;
 882: LD_ADDR_OWVAR 33
 886: PUSH
 887: LD_STRING 
 889: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 890: CALL_OW 44
 894: PPUSH
 895: LD_VAR 0 1
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: CALL_OW 49
// end ;
 907: GO 871
 909: POP
 910: POP
// for i := 1 to 4 do
 911: LD_ADDR_VAR 0 4
 915: PUSH
 916: DOUBLE
 917: LD_INT 1
 919: DEC
 920: ST_TO_ADDR
 921: LD_INT 4
 923: PUSH
 924: FOR_TO
 925: IFFALSE 962
// begin hc_class := class_frog ;
 927: LD_ADDR_OWVAR 28
 931: PUSH
 932: LD_INT 19
 934: ST_TO_ADDR
// hc_gallery :=  ;
 935: LD_ADDR_OWVAR 33
 939: PUSH
 940: LD_STRING 
 942: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 943: CALL_OW 44
 947: PPUSH
 948: LD_VAR 0 2
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: CALL_OW 49
// end ;
 960: GO 924
 962: POP
 963: POP
// end ;
 964: LD_VAR 0 3
 968: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 969: LD_INT 0
 971: PPUSH
 972: PPUSH
 973: PPUSH
// if not observer or not unit then
 974: LD_VAR 0 1
 978: NOT
 979: PUSH
 980: LD_VAR 0 2
 984: NOT
 985: OR
 986: IFFALSE 990
// exit ;
 988: GO 1038
// if not See ( GetSide ( observer ) , unit ) then
 990: LD_VAR 0 1
 994: PPUSH
 995: CALL_OW 255
 999: PPUSH
1000: LD_VAR 0 2
1004: PPUSH
1005: CALL_OW 292
1009: NOT
1010: IFFALSE 1014
// exit ;
1012: GO 1038
// result := GetDistUnits ( observer , unit ) < 12 ;
1014: LD_ADDR_VAR 0 3
1018: PUSH
1019: LD_VAR 0 1
1023: PPUSH
1024: LD_VAR 0 2
1028: PPUSH
1029: CALL_OW 296
1033: PUSH
1034: LD_INT 12
1036: LESS
1037: ST_TO_ADDR
// end ;
1038: LD_VAR 0 3
1042: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1043: LD_INT 0
1045: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1046: LD_VAR 0 2
1050: PUSH
1051: LD_INT 1
1053: ARRAY
1054: PPUSH
1055: LD_VAR 0 2
1059: PUSH
1060: LD_INT 2
1062: ARRAY
1063: PPUSH
1064: CALL_OW 488
1068: PUSH
1069: LD_VAR 0 2
1073: PUSH
1074: LD_INT 1
1076: ARRAY
1077: PPUSH
1078: LD_VAR 0 2
1082: PUSH
1083: LD_INT 2
1085: ARRAY
1086: PPUSH
1087: CALL_OW 428
1091: PUSH
1092: LD_INT 0
1094: EQUAL
1095: AND
1096: IFFALSE 1130
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1098: LD_VAR 0 1
1102: PPUSH
1103: LD_VAR 0 2
1107: PUSH
1108: LD_INT 1
1110: ARRAY
1111: PPUSH
1112: LD_VAR 0 2
1116: PUSH
1117: LD_INT 2
1119: ARRAY
1120: PPUSH
1121: LD_VAR 0 3
1125: PPUSH
1126: CALL_OW 48
// end ;
1130: LD_VAR 0 4
1134: RET
// export function ReverseArray ( array ) ; var i ; begin
1135: LD_INT 0
1137: PPUSH
1138: PPUSH
// if not array then
1139: LD_VAR 0 1
1143: NOT
1144: IFFALSE 1148
// exit ;
1146: GO 1206
// result := [ ] ;
1148: LD_ADDR_VAR 0 2
1152: PUSH
1153: EMPTY
1154: ST_TO_ADDR
// for i := 1 to array do
1155: LD_ADDR_VAR 0 3
1159: PUSH
1160: DOUBLE
1161: LD_INT 1
1163: DEC
1164: ST_TO_ADDR
1165: LD_VAR 0 1
1169: PUSH
1170: FOR_TO
1171: IFFALSE 1204
// result := Insert ( result , 1 , array [ i ] ) ;
1173: LD_ADDR_VAR 0 2
1177: PUSH
1178: LD_VAR 0 2
1182: PPUSH
1183: LD_INT 1
1185: PPUSH
1186: LD_VAR 0 1
1190: PUSH
1191: LD_VAR 0 3
1195: ARRAY
1196: PPUSH
1197: CALL_OW 2
1201: ST_TO_ADDR
1202: GO 1170
1204: POP
1205: POP
// end ;
1206: LD_VAR 0 2
1210: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1211: LD_INT 0
1213: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1214: LD_VAR 0 1
1218: PPUSH
1219: LD_VAR 0 2
1223: PPUSH
1224: LD_VAR 0 3
1228: PPUSH
1229: LD_VAR 0 4
1233: PPUSH
1234: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1238: LD_VAR 0 1
1242: PPUSH
1243: LD_VAR 0 2
1247: PPUSH
1248: LD_VAR 0 3
1252: PPUSH
1253: CALL_OW 331
// end ;
1257: LD_VAR 0 5
1261: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1262: LD_INT 0
1264: PPUSH
// if not units then
1265: LD_VAR 0 1
1269: NOT
1270: IFFALSE 1274
// exit ;
1272: GO 1357
// result := true ;
1274: LD_ADDR_VAR 0 4
1278: PUSH
1279: LD_INT 1
1281: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1282: LD_VAR 0 1
1286: PPUSH
1287: LD_INT 26
1289: PUSH
1290: LD_INT 1
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: PPUSH
1297: CALL_OW 72
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: LD_VAR 0 2
1310: PPUSH
1311: CALL_OW 88
1315: NOT
1316: IFFALSE 1357
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1318: LD_ADDR_VAR 0 4
1322: PUSH
1323: LD_VAR 0 1
1327: PPUSH
1328: LD_INT 26
1330: PUSH
1331: LD_INT 2
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PPUSH
1338: CALL_OW 72
1342: PUSH
1343: LD_INT 1
1345: ARRAY
1346: PPUSH
1347: LD_VAR 0 3
1351: PPUSH
1352: CALL_OW 88
1356: ST_TO_ADDR
// end ;
1357: LD_VAR 0 4
1361: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1362: LD_INT 0
1364: PPUSH
1365: PPUSH
// if not group then
1366: LD_VAR 0 2
1370: NOT
1371: IFFALSE 1375
// exit ;
1373: GO 1420
// for i in group do
1375: LD_ADDR_VAR 0 4
1379: PUSH
1380: LD_VAR 0 2
1384: PUSH
1385: FOR_IN
1386: IFFALSE 1418
// if See ( side , i ) then
1388: LD_VAR 0 1
1392: PPUSH
1393: LD_VAR 0 4
1397: PPUSH
1398: CALL_OW 292
1402: IFFALSE 1416
// begin result := true ;
1404: LD_ADDR_VAR 0 3
1408: PUSH
1409: LD_INT 1
1411: ST_TO_ADDR
// exit ;
1412: POP
1413: POP
1414: GO 1420
// end ;
1416: GO 1385
1418: POP
1419: POP
// end ; end_of_file
1420: LD_VAR 0 3
1424: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1425: LD_INT 0
1427: PPUSH
1428: PPUSH
// uc_side := 2 ;
1429: LD_ADDR_OWVAR 20
1433: PUSH
1434: LD_INT 2
1436: ST_TO_ADDR
// uc_nation := 2 ;
1437: LD_ADDR_OWVAR 21
1441: PUSH
1442: LD_INT 2
1444: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1445: LD_ADDR_EXP 21
1449: PUSH
1450: LD_STRING Heike
1452: PPUSH
1453: LD_EXP 1
1457: NOT
1458: PPUSH
1459: LD_EXP 2
1463: PPUSH
1464: CALL 28239 0 3
1468: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1469: LD_ADDR_EXP 24
1473: PUSH
1474: LD_STRING Ibrahim
1476: PPUSH
1477: LD_EXP 1
1481: NOT
1482: PPUSH
1483: LD_EXP 2
1487: PPUSH
1488: CALL 28239 0 3
1492: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1493: LD_ADDR_EXP 22
1497: PUSH
1498: LD_STRING Givi
1500: PPUSH
1501: LD_EXP 1
1505: NOT
1506: PPUSH
1507: LD_EXP 2
1511: PPUSH
1512: CALL 28239 0 3
1516: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1517: LD_ADDR_EXP 25
1521: PUSH
1522: LD_STRING Kamil
1524: PPUSH
1525: LD_EXP 1
1529: NOT
1530: PPUSH
1531: LD_EXP 2
1535: PPUSH
1536: CALL 28239 0 3
1540: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1541: LD_ADDR_EXP 26
1545: PUSH
1546: LD_STRING Kaia
1548: PPUSH
1549: LD_EXP 1
1553: NOT
1554: PPUSH
1555: LD_EXP 2
1559: PPUSH
1560: CALL 28239 0 3
1564: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1565: LD_ADDR_EXP 27
1569: PUSH
1570: LD_STRING Sophia
1572: PPUSH
1573: LD_EXP 1
1577: NOT
1578: PPUSH
1579: LD_EXP 2
1583: PPUSH
1584: CALL 28239 0 3
1588: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1589: LD_ADDR_EXP 28
1593: PUSH
1594: LD_STRING Markov
1596: PPUSH
1597: LD_EXP 1
1601: NOT
1602: PPUSH
1603: LD_EXP 2
1607: PPUSH
1608: CALL 28239 0 3
1612: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1613: LD_ADDR_EXP 33
1617: PUSH
1618: LD_STRING Aviradze
1620: PPUSH
1621: LD_EXP 1
1625: NOT
1626: PPUSH
1627: LD_EXP 2
1631: PPUSH
1632: CALL 28239 0 3
1636: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1637: LD_ADDR_EXP 32
1641: PUSH
1642: LD_STRING Kurt
1644: PPUSH
1645: LD_EXP 1
1649: NOT
1650: PPUSH
1651: LD_EXP 2
1655: PPUSH
1656: CALL 28239 0 3
1660: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1661: LD_ADDR_EXP 23
1665: PUSH
1666: LD_STRING Mike
1668: PPUSH
1669: LD_EXP 1
1673: NOT
1674: PPUSH
1675: LD_EXP 2
1679: PPUSH
1680: CALL 28239 0 3
1684: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1685: LD_ADDR_EXP 30
1689: PUSH
1690: LD_STRING Olaf
1692: PPUSH
1693: LD_INT 0
1695: PPUSH
1696: LD_STRING 
1698: PPUSH
1699: CALL 28239 0 3
1703: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1704: LD_ADDR_EXP 34
1708: PUSH
1709: LD_STRING 04_2_others
1711: PPUSH
1712: CALL_OW 31
1716: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1717: LD_ADDR_EXP 36
1721: PUSH
1722: LD_STRING 04_2_apes
1724: PPUSH
1725: CALL_OW 31
1729: ST_TO_ADDR
// if hasFlamethrower then
1730: LD_EXP 3
1734: IFFALSE 1965
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1736: LD_INT 70
1738: PPUSH
1739: LD_INT 2
1741: PPUSH
1742: LD_INT 2
1744: PPUSH
1745: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 ] [ Difficulty ] ] ] ] ;
1749: LD_ADDR_EXP 35
1753: PUSH
1754: LD_INT 13
1756: PUSH
1757: LD_INT 1
1759: PUSH
1760: LD_INT 1
1762: PUSH
1763: LD_INT 27
1765: PUSH
1766: LD_INT 2
1768: PUSH
1769: LD_INT 1000
1771: PUSH
1772: LD_INT 0
1774: PUSH
1775: LD_INT 0
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: PUSH
1791: LD_INT 13
1793: PUSH
1794: LD_INT 1
1796: PUSH
1797: LD_INT 1
1799: PUSH
1800: LD_INT 25
1802: PUSH
1803: LD_INT 2
1805: PUSH
1806: LD_INT 1000
1808: PUSH
1809: LD_INT 0
1811: PUSH
1812: LD_INT 0
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: PUSH
1828: LD_INT 13
1830: PUSH
1831: LD_INT 1
1833: PUSH
1834: LD_INT 1
1836: PUSH
1837: LD_INT 26
1839: PUSH
1840: LD_INT 2
1842: PUSH
1843: LD_INT 1000
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: LD_INT 0
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: PUSH
1865: LD_INT 13
1867: PUSH
1868: LD_INT 1
1870: PUSH
1871: LD_INT 1
1873: PUSH
1874: LD_INT 27
1876: PUSH
1877: LD_INT 2
1879: PUSH
1880: LD_INT 1000
1882: PUSH
1883: LD_INT 0
1885: PUSH
1886: LD_INT 0
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: PUSH
1902: LD_INT 13
1904: PUSH
1905: LD_INT 1
1907: PUSH
1908: LD_INT 1
1910: PUSH
1911: LD_INT 32
1913: PUSH
1914: LD_INT 2
1916: PUSH
1917: LD_INT 1000
1919: PUSH
1920: LD_INT 0
1922: PUSH
1923: LD_INT 60
1925: PUSH
1926: LD_INT 40
1928: PUSH
1929: LD_INT 20
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: LIST
1936: PUSH
1937: LD_OWVAR 67
1941: ARRAY
1942: PUSH
1943: EMPTY
1944: LIST
1945: LIST
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: LIST
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: ST_TO_ADDR
// end else
1963: GO 2179
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 ] [ Difficulty ] ] ] ] ;
1965: LD_ADDR_EXP 35
1969: PUSH
1970: LD_INT 13
1972: PUSH
1973: LD_INT 1
1975: PUSH
1976: LD_INT 1
1978: PUSH
1979: LD_INT 25
1981: PUSH
1982: LD_INT 2
1984: PUSH
1985: LD_INT 1000
1987: PUSH
1988: LD_INT 0
1990: PUSH
1991: LD_INT 0
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 13
2009: PUSH
2010: LD_INT 1
2012: PUSH
2013: LD_INT 1
2015: PUSH
2016: LD_INT 27
2018: PUSH
2019: LD_INT 2
2021: PUSH
2022: LD_INT 1000
2024: PUSH
2025: LD_INT 0
2027: PUSH
2028: LD_INT 0
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: PUSH
2044: LD_INT 13
2046: PUSH
2047: LD_INT 1
2049: PUSH
2050: LD_INT 1
2052: PUSH
2053: LD_INT 24
2055: PUSH
2056: LD_INT 2
2058: PUSH
2059: LD_INT 1000
2061: PUSH
2062: LD_INT 0
2064: PUSH
2065: LD_INT 0
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: PUSH
2081: LD_INT 13
2083: PUSH
2084: LD_INT 1
2086: PUSH
2087: LD_INT 1
2089: PUSH
2090: LD_INT 27
2092: PUSH
2093: LD_INT 2
2095: PUSH
2096: LD_INT 1000
2098: PUSH
2099: LD_INT 0
2101: PUSH
2102: LD_INT 0
2104: PUSH
2105: EMPTY
2106: LIST
2107: LIST
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: PUSH
2118: LD_INT 13
2120: PUSH
2121: LD_INT 1
2123: PUSH
2124: LD_INT 1
2126: PUSH
2127: LD_INT 32
2129: PUSH
2130: LD_INT 2
2132: PUSH
2133: LD_INT 1000
2135: PUSH
2136: LD_INT 0
2138: PUSH
2139: LD_INT 50
2141: PUSH
2142: LD_INT 30
2144: PUSH
2145: LD_INT 20
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: LIST
2152: PUSH
2153: LD_OWVAR 67
2157: ARRAY
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: ST_TO_ADDR
// end ; uc_side := 5 ;
2179: LD_ADDR_OWVAR 20
2183: PUSH
2184: LD_INT 5
2186: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2187: LD_ADDR_EXP 29
2191: PUSH
2192: LD_STRING Abdul
2194: PPUSH
2195: LD_INT 0
2197: PPUSH
2198: LD_STRING 
2200: PPUSH
2201: CALL 28239 0 3
2205: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2206: LD_ADDR_EXP 31
2210: PUSH
2211: LD_STRING Omar
2213: PPUSH
2214: LD_INT 0
2216: PPUSH
2217: LD_STRING 
2219: PPUSH
2220: CALL 28239 0 3
2224: ST_TO_ADDR
// end ;
2225: LD_VAR 0 1
2229: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2230: LD_INT 0
2232: PPUSH
2233: PPUSH
2234: PPUSH
2235: PPUSH
2236: PPUSH
// pfx := 04_1_ ;
2237: LD_ADDR_VAR 0 2
2241: PUSH
2242: LD_STRING 04_1_
2244: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2245: LD_INT 35
2247: PPUSH
2248: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
2252: LD_INT 3
2254: PPUSH
2255: LD_INT 2
2257: PPUSH
2258: CALL_OW 428
2262: NOT
2263: IFFALSE 2245
// tmp := [ ] ;
2265: LD_ADDR_VAR 0 4
2269: PUSH
2270: EMPTY
2271: ST_TO_ADDR
// uc_side := 5 ;
2272: LD_ADDR_OWVAR 20
2276: PUSH
2277: LD_INT 5
2279: ST_TO_ADDR
// uc_nation := 2 ;
2280: LD_ADDR_OWVAR 21
2284: PUSH
2285: LD_INT 2
2287: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2288: LD_ADDR_EXP 33
2292: PUSH
2293: LD_STRING Aviradze_L
2295: PPUSH
2296: LD_EXP 1
2300: NOT
2301: PPUSH
2302: LD_VAR 0 2
2306: PPUSH
2307: CALL 28239 0 3
2311: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2312: LD_EXP 33
2316: PPUSH
2317: LD_INT 2
2319: PPUSH
2320: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2324: LD_EXP 33
2328: PPUSH
2329: LD_INT 14
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
2339: LD_EXP 33
2343: PPUSH
2344: LD_INT 8
2346: PPUSH
2347: LD_INT 6
2349: PPUSH
2350: CALL_OW 111
// AddComHold ( Aviradze ) ;
2354: LD_EXP 33
2358: PPUSH
2359: CALL_OW 200
// tmp := [ Aviradze ] ;
2363: LD_ADDR_VAR 0 4
2367: PUSH
2368: LD_EXP 33
2372: PUSH
2373: EMPTY
2374: LIST
2375: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2376: LD_INT 70
2378: PPUSH
2379: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2383: LD_STRING Ibrahim_L
2385: PPUSH
2386: LD_EXP 1
2390: NOT
2391: PPUSH
2392: LD_VAR 0 2
2396: PPUSH
2397: CALL 28239 0 3
2401: IFFALSE 2501
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2403: LD_ADDR_EXP 24
2407: PUSH
2408: LD_STRING Ibrahim_L
2410: PPUSH
2411: LD_EXP 1
2415: NOT
2416: PPUSH
2417: LD_VAR 0 2
2421: PPUSH
2422: CALL 28239 0 3
2426: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2427: LD_EXP 24
2431: PPUSH
2432: LD_INT 2
2434: PPUSH
2435: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2439: LD_EXP 24
2443: PPUSH
2444: LD_INT 14
2446: PPUSH
2447: LD_INT 0
2449: PPUSH
2450: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
2454: LD_EXP 24
2458: PPUSH
2459: LD_INT 8
2461: PPUSH
2462: LD_INT 7
2464: PPUSH
2465: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2469: LD_EXP 24
2473: PPUSH
2474: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2478: LD_ADDR_VAR 0 4
2482: PUSH
2483: LD_VAR 0 4
2487: PUSH
2488: LD_EXP 24
2492: ADD
2493: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2494: LD_INT 70
2496: PPUSH
2497: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2501: LD_STRING Kaia_L
2503: PPUSH
2504: LD_EXP 1
2508: NOT
2509: PPUSH
2510: LD_VAR 0 2
2514: PPUSH
2515: CALL 28239 0 3
2519: IFFALSE 2619
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2521: LD_ADDR_EXP 26
2525: PUSH
2526: LD_STRING Kaia_L
2528: PPUSH
2529: LD_EXP 1
2533: NOT
2534: PPUSH
2535: LD_VAR 0 2
2539: PPUSH
2540: CALL 28239 0 3
2544: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2545: LD_EXP 26
2549: PPUSH
2550: LD_INT 2
2552: PPUSH
2553: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2557: LD_EXP 26
2561: PPUSH
2562: LD_INT 14
2564: PPUSH
2565: LD_INT 0
2567: PPUSH
2568: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
2572: LD_EXP 26
2576: PPUSH
2577: LD_INT 8
2579: PPUSH
2580: LD_INT 7
2582: PPUSH
2583: CALL_OW 111
// AddComHold ( Kaia ) ;
2587: LD_EXP 26
2591: PPUSH
2592: CALL_OW 200
// tmp := tmp ^ Kaia ;
2596: LD_ADDR_VAR 0 4
2600: PUSH
2601: LD_VAR 0 4
2605: PUSH
2606: LD_EXP 26
2610: ADD
2611: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2612: LD_INT 70
2614: PPUSH
2615: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2619: LD_STRING Kamil_L
2621: PPUSH
2622: LD_EXP 1
2626: NOT
2627: PPUSH
2628: LD_VAR 0 2
2632: PPUSH
2633: CALL 28239 0 3
2637: IFFALSE 2737
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2639: LD_ADDR_EXP 25
2643: PUSH
2644: LD_STRING Kamil_L
2646: PPUSH
2647: LD_EXP 1
2651: NOT
2652: PPUSH
2653: LD_VAR 0 2
2657: PPUSH
2658: CALL 28239 0 3
2662: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2663: LD_EXP 25
2667: PPUSH
2668: LD_INT 2
2670: PPUSH
2671: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2675: LD_EXP 25
2679: PPUSH
2680: LD_INT 14
2682: PPUSH
2683: LD_INT 0
2685: PPUSH
2686: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
2690: LD_EXP 25
2694: PPUSH
2695: LD_INT 8
2697: PPUSH
2698: LD_INT 7
2700: PPUSH
2701: CALL_OW 111
// AddComHold ( Kamil ) ;
2705: LD_EXP 25
2709: PPUSH
2710: CALL_OW 200
// tmp := tmp ^ Kamil ;
2714: LD_ADDR_VAR 0 4
2718: PUSH
2719: LD_VAR 0 4
2723: PUSH
2724: LD_EXP 25
2728: ADD
2729: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2730: LD_INT 70
2732: PPUSH
2733: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2737: LD_STRING Sophia_L
2739: PPUSH
2740: LD_EXP 1
2744: NOT
2745: PPUSH
2746: LD_VAR 0 2
2750: PPUSH
2751: CALL 28239 0 3
2755: IFFALSE 2855
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2757: LD_ADDR_EXP 27
2761: PUSH
2762: LD_STRING Sophia_L
2764: PPUSH
2765: LD_EXP 1
2769: NOT
2770: PPUSH
2771: LD_VAR 0 2
2775: PPUSH
2776: CALL 28239 0 3
2780: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2781: LD_EXP 27
2785: PPUSH
2786: LD_INT 2
2788: PPUSH
2789: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2793: LD_EXP 27
2797: PPUSH
2798: LD_INT 14
2800: PPUSH
2801: LD_INT 0
2803: PPUSH
2804: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
2808: LD_EXP 27
2812: PPUSH
2813: LD_INT 9
2815: PPUSH
2816: LD_INT 6
2818: PPUSH
2819: CALL_OW 111
// AddComHold ( Sophia ) ;
2823: LD_EXP 27
2827: PPUSH
2828: CALL_OW 200
// tmp := tmp ^ Sophia ;
2832: LD_ADDR_VAR 0 4
2836: PUSH
2837: LD_VAR 0 4
2841: PUSH
2842: LD_EXP 27
2846: ADD
2847: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2848: LD_INT 70
2850: PPUSH
2851: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2855: LD_ADDR_VAR 0 5
2859: PUSH
2860: LD_STRING 04_1_others_L
2862: PPUSH
2863: CALL_OW 31
2867: ST_TO_ADDR
// if tmp2 then
2868: LD_VAR 0 5
2872: IFFALSE 2969
// for i in tmp2 do
2874: LD_ADDR_VAR 0 3
2878: PUSH
2879: LD_VAR 0 5
2883: PUSH
2884: FOR_IN
2885: IFFALSE 2967
// begin SetDir ( i , 2 ) ;
2887: LD_VAR 0 3
2891: PPUSH
2892: LD_INT 2
2894: PPUSH
2895: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2899: LD_VAR 0 3
2903: PPUSH
2904: LD_INT 14
2906: PPUSH
2907: LD_INT 0
2909: PPUSH
2910: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2914: LD_ADDR_EXP 34
2918: PUSH
2919: LD_EXP 34
2923: PPUSH
2924: LD_EXP 34
2928: PUSH
2929: LD_INT 1
2931: PLUS
2932: PPUSH
2933: LD_VAR 0 3
2937: PPUSH
2938: CALL_OW 1
2942: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2943: LD_VAR 0 3
2947: PPUSH
2948: LD_INT 17
2950: PPUSH
2951: LD_INT 14
2953: PPUSH
2954: CALL_OW 111
// wait ( 0 0$2 ) ;
2958: LD_INT 70
2960: PPUSH
2961: CALL_OW 67
// end ;
2965: GO 2884
2967: POP
2968: POP
// for i in tmp union tmp2 do
2969: LD_ADDR_VAR 0 3
2973: PUSH
2974: LD_VAR 0 4
2978: PUSH
2979: LD_VAR 0 5
2983: UNION
2984: PUSH
2985: FOR_IN
2986: IFFALSE 3016
// begin SetSide ( i , 2 ) ;
2988: LD_VAR 0 3
2992: PPUSH
2993: LD_INT 2
2995: PPUSH
2996: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
3000: LD_VAR 0 3
3004: PPUSH
3005: LD_EXP 21
3009: PPUSH
3010: CALL_OW 112
// end ;
3014: GO 2985
3016: POP
3017: POP
// end ; end_of_file
3018: LD_VAR 0 1
3022: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
3023: LD_INT 0
3025: PPUSH
3026: PPUSH
3027: PPUSH
// uc_side := 3 ;
3028: LD_ADDR_OWVAR 20
3032: PUSH
3033: LD_INT 3
3035: ST_TO_ADDR
// uc_nation := 3 ;
3036: LD_ADDR_OWVAR 21
3040: PUSH
3041: LD_INT 3
3043: ST_TO_ADDR
// crossRoadGuard := [ ] ;
3044: LD_ADDR_EXP 37
3048: PUSH
3049: EMPTY
3050: ST_TO_ADDR
// oilBaseGuard := [ ] ;
3051: LD_ADDR_EXP 38
3055: PUSH
3056: EMPTY
3057: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3058: LD_ADDR_EXP 41
3062: PUSH
3063: EMPTY
3064: ST_TO_ADDR
// for i := 1 to 2 do
3065: LD_ADDR_VAR 0 2
3069: PUSH
3070: DOUBLE
3071: LD_INT 1
3073: DEC
3074: ST_TO_ADDR
3075: LD_INT 2
3077: PUSH
3078: FOR_TO
3079: IFFALSE 3214
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3081: LD_INT 0
3083: PPUSH
3084: LD_INT 1
3086: PPUSH
3087: LD_INT 3
3089: PUSH
3090: LD_INT 4
3092: PUSH
3093: LD_INT 5
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: LIST
3100: PUSH
3101: LD_OWVAR 67
3105: ARRAY
3106: PPUSH
3107: CALL_OW 380
// un := CreateHuman ;
3111: LD_ADDR_VAR 0 3
3115: PUSH
3116: CALL_OW 44
3120: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3121: LD_ADDR_EXP 37
3125: PUSH
3126: LD_EXP 37
3130: PPUSH
3131: LD_EXP 37
3135: PUSH
3136: LD_INT 1
3138: PLUS
3139: PPUSH
3140: LD_VAR 0 3
3144: PPUSH
3145: CALL_OW 1
3149: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3150: LD_VAR 0 3
3154: PPUSH
3155: LD_INT 100
3157: PPUSH
3158: LD_INT 63
3160: PPUSH
3161: LD_INT 3
3163: PPUSH
3164: LD_INT 0
3166: PPUSH
3167: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3171: LD_VAR 0 3
3175: PPUSH
3176: LD_INT 97
3178: PPUSH
3179: LD_INT 64
3181: PPUSH
3182: CALL_OW 428
3186: PUSH
3187: LD_INT 98
3189: PPUSH
3190: LD_INT 58
3192: PPUSH
3193: CALL_OW 428
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: PUSH
3202: LD_VAR 0 2
3206: ARRAY
3207: PPUSH
3208: CALL_OW 120
// end ;
3212: GO 3078
3214: POP
3215: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3216: LD_INT 51
3218: PPUSH
3219: LD_INT 77
3221: PPUSH
3222: CALL_OW 428
3226: PPUSH
3227: CALL_OW 274
3231: PPUSH
3232: LD_INT 1
3234: PPUSH
3235: LD_INT 120
3237: PPUSH
3238: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3242: LD_INT 10
3244: PPUSH
3245: CALL_OW 274
3249: PPUSH
3250: LD_INT 2
3252: PPUSH
3253: LD_INT 300
3255: PPUSH
3256: CALL_OW 277
// for i := 1 to 2 do
3260: LD_ADDR_VAR 0 2
3264: PUSH
3265: DOUBLE
3266: LD_INT 1
3268: DEC
3269: ST_TO_ADDR
3270: LD_INT 2
3272: PUSH
3273: FOR_TO
3274: IFFALSE 3388
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3276: LD_INT 0
3278: PPUSH
3279: LD_INT 1
3281: PPUSH
3282: LD_INT 3
3284: PUSH
3285: LD_INT 4
3287: PUSH
3288: LD_INT 5
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: LIST
3295: PUSH
3296: LD_OWVAR 67
3300: ARRAY
3301: PPUSH
3302: CALL_OW 380
// un := CreateHuman ;
3306: LD_ADDR_VAR 0 3
3310: PUSH
3311: CALL_OW 44
3315: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3316: LD_ADDR_EXP 38
3320: PUSH
3321: LD_EXP 38
3325: PPUSH
3326: LD_EXP 38
3330: PUSH
3331: LD_INT 1
3333: PLUS
3334: PPUSH
3335: LD_VAR 0 3
3339: PPUSH
3340: CALL_OW 1
3344: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3345: LD_VAR 0 3
3349: PPUSH
3350: LD_INT 198
3352: PPUSH
3353: LD_INT 106
3355: PPUSH
3356: CALL_OW 428
3360: PUSH
3361: LD_INT 205
3363: PPUSH
3364: LD_INT 114
3366: PPUSH
3367: CALL_OW 428
3371: PUSH
3372: EMPTY
3373: LIST
3374: LIST
3375: PUSH
3376: LD_VAR 0 2
3380: ARRAY
3381: PPUSH
3382: CALL_OW 52
// end ;
3386: GO 3273
3388: POP
3389: POP
// for i := 1 to 2 do
3390: LD_ADDR_VAR 0 2
3394: PUSH
3395: DOUBLE
3396: LD_INT 1
3398: DEC
3399: ST_TO_ADDR
3400: LD_INT 2
3402: PUSH
3403: FOR_TO
3404: IFFALSE 3481
// begin PrepareHuman ( false , 2 , 3 ) ;
3406: LD_INT 0
3408: PPUSH
3409: LD_INT 2
3411: PPUSH
3412: LD_INT 3
3414: PPUSH
3415: CALL_OW 380
// un := CreateHuman ;
3419: LD_ADDR_VAR 0 3
3423: PUSH
3424: CALL_OW 44
3428: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3429: LD_ADDR_EXP 38
3433: PUSH
3434: LD_EXP 38
3438: PPUSH
3439: LD_EXP 38
3443: PUSH
3444: LD_INT 1
3446: PLUS
3447: PPUSH
3448: LD_VAR 0 3
3452: PPUSH
3453: CALL_OW 1
3457: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3458: LD_VAR 0 3
3462: PPUSH
3463: LD_INT 204
3465: PPUSH
3466: LD_INT 108
3468: PPUSH
3469: LD_INT 2
3471: PPUSH
3472: LD_INT 0
3474: PPUSH
3475: CALL_OW 50
// end ;
3479: GO 3403
3481: POP
3482: POP
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
3483: LD_ADDR_VAR 0 2
3487: PUSH
3488: DOUBLE
3489: LD_INT 1
3491: DEC
3492: ST_TO_ADDR
3493: LD_INT 4
3495: PUSH
3496: LD_INT 5
3498: PUSH
3499: LD_INT 6
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: LIST
3506: PUSH
3507: LD_OWVAR 67
3511: ARRAY
3512: PUSH
3513: FOR_TO
3514: IFFALSE 3635
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3516: LD_INT 0
3518: PPUSH
3519: LD_INT 1
3521: PUSH
3522: LD_INT 1
3524: PUSH
3525: LD_INT 2
3527: PUSH
3528: LD_INT 4
3530: PUSH
3531: LD_INT 1
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: PUSH
3541: LD_INT 1
3543: PPUSH
3544: LD_INT 5
3546: PPUSH
3547: CALL_OW 12
3551: ARRAY
3552: PPUSH
3553: LD_INT 3
3555: PUSH
3556: LD_INT 4
3558: PUSH
3559: LD_INT 5
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: LIST
3566: PUSH
3567: LD_OWVAR 67
3571: ARRAY
3572: PPUSH
3573: CALL_OW 380
// un := CreateHuman ;
3577: LD_ADDR_VAR 0 3
3581: PUSH
3582: CALL_OW 44
3586: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3587: LD_VAR 0 3
3591: PPUSH
3592: LD_INT 11
3594: PPUSH
3595: LD_INT 0
3597: PPUSH
3598: CALL 63023 0 3
3602: IFFALSE 3633
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3604: LD_ADDR_EXP 39
3608: PUSH
3609: LD_EXP 39
3613: PPUSH
3614: LD_EXP 39
3618: PUSH
3619: LD_INT 1
3621: PLUS
3622: PPUSH
3623: LD_VAR 0 3
3627: PPUSH
3628: CALL_OW 1
3632: ST_TO_ADDR
// end ;
3633: GO 3513
3635: POP
3636: POP
// for i := 1 to 3 do
3637: LD_ADDR_VAR 0 2
3641: PUSH
3642: DOUBLE
3643: LD_INT 1
3645: DEC
3646: ST_TO_ADDR
3647: LD_INT 3
3649: PUSH
3650: FOR_TO
3651: IFFALSE 3741
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 ] [ Difficulty ] ) ;
3653: LD_INT 0
3655: PPUSH
3656: LD_INT 1
3658: PPUSH
3659: LD_INT 3
3661: PUSH
3662: LD_INT 4
3664: PUSH
3665: LD_INT 4
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: LIST
3672: PUSH
3673: LD_OWVAR 67
3677: ARRAY
3678: PPUSH
3679: CALL_OW 380
// un := CreateHuman ;
3683: LD_ADDR_VAR 0 3
3687: PUSH
3688: CALL_OW 44
3692: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3693: LD_VAR 0 3
3697: PPUSH
3698: LD_INT 11
3700: PPUSH
3701: LD_INT 0
3703: PPUSH
3704: CALL 63023 0 3
3708: IFFALSE 3739
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3710: LD_ADDR_EXP 39
3714: PUSH
3715: LD_EXP 39
3719: PPUSH
3720: LD_EXP 39
3724: PUSH
3725: LD_INT 1
3727: PLUS
3728: PPUSH
3729: LD_VAR 0 3
3733: PPUSH
3734: CALL_OW 1
3738: ST_TO_ADDR
// end ;
3739: GO 3650
3741: POP
3742: POP
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
3743: LD_ADDR_VAR 0 2
3747: PUSH
3748: DOUBLE
3749: LD_INT 1
3751: DEC
3752: ST_TO_ADDR
3753: LD_INT 5
3755: PUSH
3756: LD_INT 6
3758: PUSH
3759: LD_INT 7
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: LIST
3766: PUSH
3767: LD_OWVAR 67
3771: ARRAY
3772: PUSH
3773: FOR_TO
3774: IFFALSE 3895
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3776: LD_INT 0
3778: PPUSH
3779: LD_INT 1
3781: PUSH
3782: LD_INT 1
3784: PUSH
3785: LD_INT 2
3787: PUSH
3788: LD_INT 4
3790: PUSH
3791: LD_INT 1
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: PUSH
3801: LD_INT 1
3803: PPUSH
3804: LD_INT 5
3806: PPUSH
3807: CALL_OW 12
3811: ARRAY
3812: PPUSH
3813: LD_INT 3
3815: PUSH
3816: LD_INT 4
3818: PUSH
3819: LD_INT 5
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: LIST
3826: PUSH
3827: LD_OWVAR 67
3831: ARRAY
3832: PPUSH
3833: CALL_OW 380
// un := CreateHuman ;
3837: LD_ADDR_VAR 0 3
3841: PUSH
3842: CALL_OW 44
3846: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3847: LD_VAR 0 3
3851: PPUSH
3852: LD_INT 15
3854: PPUSH
3855: LD_INT 0
3857: PPUSH
3858: CALL 63023 0 3
3862: IFFALSE 3893
// ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3864: LD_ADDR_EXP 40
3868: PUSH
3869: LD_EXP 40
3873: PPUSH
3874: LD_EXP 40
3878: PUSH
3879: LD_INT 1
3881: PLUS
3882: PPUSH
3883: LD_VAR 0 3
3887: PPUSH
3888: CALL_OW 1
3892: ST_TO_ADDR
// end ;
3893: GO 3773
3895: POP
3896: POP
// end ;
3897: LD_VAR 0 1
3901: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3902: LD_INT 0
3904: PPUSH
3905: PPUSH
3906: PPUSH
// uc_side := 3 ;
3907: LD_ADDR_OWVAR 20
3911: PUSH
3912: LD_INT 3
3914: ST_TO_ADDR
// uc_nation := 3 ;
3915: LD_ADDR_OWVAR 21
3919: PUSH
3920: LD_INT 3
3922: ST_TO_ADDR
// for i := 1 to 6 do
3923: LD_ADDR_VAR 0 2
3927: PUSH
3928: DOUBLE
3929: LD_INT 1
3931: DEC
3932: ST_TO_ADDR
3933: LD_INT 6
3935: PUSH
3936: FOR_TO
3937: IFFALSE 4016
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
3939: LD_INT 0
3941: PPUSH
3942: LD_INT 1
3944: PUSH
3945: LD_INT 4
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: PUSH
3952: LD_INT 1
3954: PPUSH
3955: LD_INT 2
3957: PPUSH
3958: CALL_OW 12
3962: ARRAY
3963: PPUSH
3964: LD_INT 0
3966: PPUSH
3967: CALL_OW 380
// un := CreateHuman ;
3971: LD_ADDR_VAR 0 3
3975: PUSH
3976: CALL_OW 44
3980: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
3981: LD_VAR 0 3
3985: PPUSH
3986: LD_INT 54
3988: PPUSH
3989: LD_INT 88
3991: PPUSH
3992: LD_INT 12
3994: PPUSH
3995: LD_INT 0
3997: PPUSH
3998: CALL_OW 50
// SetLives ( un , 1 ) ;
4002: LD_VAR 0 3
4006: PPUSH
4007: LD_INT 1
4009: PPUSH
4010: CALL_OW 234
// end ;
4014: GO 3936
4016: POP
4017: POP
// uc_side := 3 ;
4018: LD_ADDR_OWVAR 20
4022: PUSH
4023: LD_INT 3
4025: ST_TO_ADDR
// uc_nation := 0 ;
4026: LD_ADDR_OWVAR 21
4030: PUSH
4031: LD_INT 0
4033: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4034: LD_ADDR_EXP 42
4038: PUSH
4039: EMPTY
4040: ST_TO_ADDR
// apeEngGroup := [ ] ;
4041: LD_ADDR_EXP 43
4045: PUSH
4046: EMPTY
4047: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
4048: LD_ADDR_VAR 0 2
4052: PUSH
4053: DOUBLE
4054: LD_INT 1
4056: DEC
4057: ST_TO_ADDR
4058: LD_INT 4
4060: PUSH
4061: LD_INT 5
4063: PUSH
4064: LD_INT 6
4066: PUSH
4067: EMPTY
4068: LIST
4069: LIST
4070: LIST
4071: PUSH
4072: LD_OWVAR 67
4076: ARRAY
4077: PUSH
4078: FOR_TO
4079: IFFALSE 4193
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4081: LD_INT 0
4083: PPUSH
4084: LD_INT 15
4086: PPUSH
4087: LD_INT 3
4089: PUSH
4090: LD_INT 4
4092: PUSH
4093: LD_INT 5
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: LIST
4100: PUSH
4101: LD_OWVAR 67
4105: ARRAY
4106: PPUSH
4107: CALL_OW 380
// un := CreateHuman ;
4111: LD_ADDR_VAR 0 3
4115: PUSH
4116: CALL_OW 44
4120: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4121: LD_ADDR_EXP 42
4125: PUSH
4126: LD_EXP 42
4130: PPUSH
4131: LD_EXP 42
4135: PUSH
4136: LD_INT 1
4138: PLUS
4139: PPUSH
4140: LD_VAR 0 3
4144: PPUSH
4145: CALL_OW 1
4149: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4150: LD_VAR 0 3
4154: PPUSH
4155: LD_INT 0
4157: PPUSH
4158: LD_INT 5
4160: PPUSH
4161: CALL_OW 12
4165: PPUSH
4166: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4170: LD_VAR 0 3
4174: PPUSH
4175: LD_INT 56
4177: PPUSH
4178: LD_INT 82
4180: PPUSH
4181: LD_INT 6
4183: PPUSH
4184: LD_INT 0
4186: PPUSH
4187: CALL_OW 50
// end ;
4191: GO 4078
4193: POP
4194: POP
// for i := 1 to 2 do
4195: LD_ADDR_VAR 0 2
4199: PUSH
4200: DOUBLE
4201: LD_INT 1
4203: DEC
4204: ST_TO_ADDR
4205: LD_INT 2
4207: PUSH
4208: FOR_TO
4209: IFFALSE 4285
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4211: LD_INT 0
4213: PPUSH
4214: LD_INT 16
4216: PPUSH
4217: LD_INT 4
4219: PPUSH
4220: CALL_OW 380
// un := CreateHuman ;
4224: LD_ADDR_VAR 0 3
4228: PUSH
4229: CALL_OW 44
4233: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4234: LD_ADDR_EXP 43
4238: PUSH
4239: LD_EXP 43
4243: PPUSH
4244: LD_EXP 43
4248: PUSH
4249: LD_INT 1
4251: PLUS
4252: PPUSH
4253: LD_VAR 0 3
4257: PPUSH
4258: CALL_OW 1
4262: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4263: LD_VAR 0 3
4267: PPUSH
4268: LD_INT 51
4270: PPUSH
4271: LD_INT 77
4273: PPUSH
4274: CALL_OW 428
4278: PPUSH
4279: CALL_OW 52
// end ;
4283: GO 4208
4285: POP
4286: POP
// end ;
4287: LD_VAR 0 1
4291: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4292: LD_EXP 42
4296: PPUSH
4297: LD_INT 3
4299: PUSH
4300: LD_INT 24
4302: PUSH
4303: LD_INT 600
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PUSH
4310: EMPTY
4311: LIST
4312: LIST
4313: PUSH
4314: LD_INT 3
4316: PUSH
4317: LD_INT 54
4319: PUSH
4320: EMPTY
4321: LIST
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: PUSH
4327: EMPTY
4328: LIST
4329: LIST
4330: PPUSH
4331: CALL_OW 72
4335: PUSH
4336: LD_INT 66
4338: PPUSH
4339: LD_INT 89
4341: PPUSH
4342: CALL_OW 428
4346: PPUSH
4347: CALL_OW 302
4351: AND
4352: IFFALSE 4437
4354: GO 4356
4356: DISABLE
4357: LD_INT 0
4359: PPUSH
// begin enable ;
4360: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4361: LD_ADDR_VAR 0 1
4365: PUSH
4366: LD_EXP 42
4370: PPUSH
4371: LD_INT 3
4373: PUSH
4374: LD_INT 24
4376: PUSH
4377: LD_INT 600
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: PUSH
4384: EMPTY
4385: LIST
4386: LIST
4387: PUSH
4388: LD_INT 3
4390: PUSH
4391: LD_INT 54
4393: PUSH
4394: EMPTY
4395: LIST
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PPUSH
4405: CALL_OW 72
4409: PUSH
4410: FOR_IN
4411: IFFALSE 4435
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4413: LD_VAR 0 1
4417: PPUSH
4418: LD_INT 66
4420: PPUSH
4421: LD_INT 89
4423: PPUSH
4424: CALL_OW 428
4428: PPUSH
4429: CALL_OW 120
4433: GO 4410
4435: POP
4436: POP
// end ;
4437: PPOPN 1
4439: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4440: LD_INT 22
4442: PUSH
4443: LD_INT 2
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PUSH
4450: LD_INT 92
4452: PUSH
4453: LD_INT 54
4455: PUSH
4456: LD_INT 77
4458: PUSH
4459: LD_INT 8
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: LIST
4466: LIST
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PPUSH
4472: CALL_OW 69
4476: IFFALSE 4540
4478: GO 4480
4480: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4481: LD_EXP 43
4485: PPUSH
4486: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4490: LD_EXP 43
4494: PPUSH
4495: LD_INT 22
4497: PUSH
4498: LD_INT 2
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: LD_INT 92
4507: PUSH
4508: LD_INT 54
4510: PUSH
4511: LD_INT 77
4513: PUSH
4514: LD_INT 8
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PPUSH
4527: CALL_OW 69
4531: PUSH
4532: LD_INT 1
4534: ARRAY
4535: PPUSH
4536: CALL_OW 175
// end ;
4540: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag ; begin
4541: LD_INT 0
4543: PPUSH
4544: PPUSH
4545: PPUSH
4546: PPUSH
4547: PPUSH
4548: PPUSH
4549: PPUSH
4550: PPUSH
4551: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4552: LD_ADDR_VAR 0 3
4556: PUSH
4557: LD_INT 1
4559: PPUSH
4560: LD_INT 3
4562: PPUSH
4563: CALL_OW 12
4567: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4568: LD_ADDR_VAR 0 5
4572: PUSH
4573: LD_INT 16
4575: PUSH
4576: LD_INT 17
4578: PUSH
4579: LD_INT 19
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: LIST
4586: PUSH
4587: LD_VAR 0 3
4591: ARRAY
4592: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4593: LD_ADDR_VAR 0 7
4597: PUSH
4598: LD_INT 159
4600: PUSH
4601: LD_INT 25
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: PUSH
4608: LD_INT 137
4610: PUSH
4611: LD_INT 37
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: PUSH
4618: LD_INT 123
4620: PUSH
4621: LD_INT 55
4623: PUSH
4624: EMPTY
4625: LIST
4626: LIST
4627: PUSH
4628: LD_INT 115
4630: PUSH
4631: LD_INT 71
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: PUSH
4638: LD_INT 106
4640: PUSH
4641: LD_INT 88
4643: PUSH
4644: EMPTY
4645: LIST
4646: LIST
4647: PUSH
4648: LD_INT 97
4650: PUSH
4651: LD_INT 114
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: PUSH
4658: LD_INT 75
4660: PUSH
4661: LD_INT 146
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PUSH
4668: EMPTY
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: PUSH
4677: LD_INT 206
4679: PUSH
4680: LD_INT 135
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: PUSH
4687: LD_INT 184
4689: PUSH
4690: LD_INT 111
4692: PUSH
4693: EMPTY
4694: LIST
4695: LIST
4696: PUSH
4697: LD_INT 154
4699: PUSH
4700: LD_INT 97
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PUSH
4707: LD_INT 122
4709: PUSH
4710: LD_INT 80
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: LD_INT 109
4719: PUSH
4720: LD_INT 78
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: PUSH
4727: LD_INT 97
4729: PUSH
4730: LD_INT 113
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: PUSH
4737: LD_INT 75
4739: PUSH
4740: LD_INT 147
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: PUSH
4756: LD_INT 185
4758: PUSH
4759: LD_INT 72
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PUSH
4766: LD_INT 171
4768: PUSH
4769: LD_INT 83
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: PUSH
4776: LD_INT 161
4778: PUSH
4779: LD_INT 99
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PUSH
4786: LD_INT 125
4788: PUSH
4789: LD_INT 82
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 105
4798: PUSH
4799: LD_INT 90
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PUSH
4806: LD_INT 96
4808: PUSH
4809: LD_INT 116
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 75
4818: PUSH
4819: LD_INT 147
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: LIST
4839: PUSH
4840: LD_VAR 0 3
4844: ARRAY
4845: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4846: LD_ADDR_VAR 0 4
4850: PUSH
4851: LD_INT 4
4853: PUSH
4854: LD_INT 5
4856: PUSH
4857: LD_INT 3
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: LIST
4864: PUSH
4865: LD_VAR 0 3
4869: ARRAY
4870: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4871: LD_ADDR_VAR 0 6
4875: PUSH
4876: LD_INT 22
4878: PUSH
4879: LD_INT 20
4881: PUSH
4882: LD_INT 21
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: LIST
4889: PUSH
4890: LD_VAR 0 3
4894: ARRAY
4895: ST_TO_ADDR
// for i := 1 to 2 do
4896: LD_ADDR_VAR 0 2
4900: PUSH
4901: DOUBLE
4902: LD_INT 1
4904: DEC
4905: ST_TO_ADDR
4906: LD_INT 2
4908: PUSH
4909: FOR_TO
4910: IFFALSE 4928
// EraseResourceArea ( i , outerSpawnArea ) ;
4912: LD_VAR 0 2
4916: PPUSH
4917: LD_VAR 0 6
4921: PPUSH
4922: CALL_OW 286
4926: GO 4909
4928: POP
4929: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
4930: LD_VAR 0 6
4934: PPUSH
4935: LD_INT 2
4937: PUSH
4938: LD_INT 21
4940: PUSH
4941: LD_INT 1
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PUSH
4948: LD_INT 21
4950: PUSH
4951: LD_INT 2
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 21
4960: PUSH
4961: LD_INT 3
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: PPUSH
4974: CALL_OW 70
4978: IFFALSE 5193
// repeat wait ( 0 0$1 ) ;
4980: LD_INT 35
4982: PPUSH
4983: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
4987: LD_VAR 0 6
4991: PPUSH
4992: LD_INT 2
4994: PUSH
4995: LD_INT 21
4997: PUSH
4998: LD_INT 2
5000: PUSH
5001: EMPTY
5002: LIST
5003: LIST
5004: PUSH
5005: LD_INT 21
5007: PUSH
5008: LD_INT 3
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: LIST
5019: PPUSH
5020: CALL_OW 70
5024: IFFALSE 5085
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5026: LD_ADDR_VAR 0 2
5030: PUSH
5031: LD_VAR 0 6
5035: PPUSH
5036: LD_INT 2
5038: PUSH
5039: LD_INT 21
5041: PUSH
5042: LD_INT 2
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: PUSH
5049: LD_INT 21
5051: PUSH
5052: LD_INT 3
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: LIST
5063: PPUSH
5064: CALL_OW 70
5068: PUSH
5069: FOR_IN
5070: IFFALSE 5083
// RemoveUnit ( i ) ;
5072: LD_VAR 0 2
5076: PPUSH
5077: CALL_OW 64
5081: GO 5069
5083: POP
5084: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5085: LD_VAR 0 6
5089: PPUSH
5090: LD_INT 21
5092: PUSH
5093: LD_INT 1
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PPUSH
5100: CALL_OW 70
5104: IFFALSE 5153
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5106: LD_ADDR_VAR 0 2
5110: PUSH
5111: LD_VAR 0 6
5115: PPUSH
5116: LD_INT 21
5118: PUSH
5119: LD_INT 1
5121: PUSH
5122: EMPTY
5123: LIST
5124: LIST
5125: PPUSH
5126: CALL_OW 70
5130: PUSH
5131: FOR_IN
5132: IFFALSE 5151
// ComMoveXY ( i , 113 , 53 ) ;
5134: LD_VAR 0 2
5138: PPUSH
5139: LD_INT 113
5141: PPUSH
5142: LD_INT 53
5144: PPUSH
5145: CALL_OW 111
5149: GO 5131
5151: POP
5152: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5153: LD_VAR 0 6
5157: PPUSH
5158: LD_INT 2
5160: PUSH
5161: LD_INT 21
5163: PUSH
5164: LD_INT 1
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: PUSH
5171: LD_INT 21
5173: PUSH
5174: LD_INT 2
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: LIST
5185: PPUSH
5186: CALL_OW 70
5190: NOT
5191: IFFALSE 4980
// case convoyCounter of 1 .. 3 :
5193: LD_EXP 16
5197: PUSH
5198: LD_INT 1
5200: DOUBLE
5201: GREATEREQUAL
5202: IFFALSE 5210
5204: LD_INT 3
5206: DOUBLE
5207: LESSEQUAL
5208: IFTRUE 5212
5210: GO 5807
5212: POP
// begin uc_side := 3 ;
5213: LD_ADDR_OWVAR 20
5217: PUSH
5218: LD_INT 3
5220: ST_TO_ADDR
// uc_nation := 3 ;
5221: LD_ADDR_OWVAR 21
5225: PUSH
5226: LD_INT 3
5228: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] - convoyCounter do
5229: LD_ADDR_VAR 0 2
5233: PUSH
5234: DOUBLE
5235: LD_INT 1
5237: DEC
5238: ST_TO_ADDR
5239: LD_INT 5
5241: PUSH
5242: LD_INT 6
5244: PUSH
5245: LD_INT 7
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: LIST
5252: PUSH
5253: LD_OWVAR 67
5257: ARRAY
5258: PUSH
5259: LD_EXP 16
5263: MINUS
5264: PUSH
5265: FOR_TO
5266: IFFALSE 5453
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
5268: LD_INT 0
5270: PPUSH
5271: LD_INT 1
5273: PUSH
5274: LD_INT 1
5276: PUSH
5277: LD_INT 1
5279: PUSH
5280: LD_INT 4
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: PUSH
5289: LD_INT 1
5291: PPUSH
5292: LD_INT 4
5294: PPUSH
5295: CALL_OW 12
5299: ARRAY
5300: PPUSH
5301: LD_INT 4
5303: PUSH
5304: LD_INT 5
5306: PUSH
5307: LD_INT 6
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: PUSH
5315: LD_OWVAR 67
5319: ARRAY
5320: PPUSH
5321: CALL_OW 380
// un := CreateHuman ;
5325: LD_ADDR_VAR 0 8
5329: PUSH
5330: CALL_OW 44
5334: ST_TO_ADDR
// SetDir ( un , dir ) ;
5335: LD_VAR 0 8
5339: PPUSH
5340: LD_VAR 0 4
5344: PPUSH
5345: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5349: LD_VAR 0 8
5353: PPUSH
5354: LD_VAR 0 5
5358: PPUSH
5359: LD_INT 0
5361: PPUSH
5362: CALL 63023 0 3
5366: IFFALSE 5451
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5368: LD_ADDR_EXP 41
5372: PUSH
5373: LD_EXP 41
5377: PPUSH
5378: LD_EXP 41
5382: PUSH
5383: LD_INT 1
5385: PLUS
5386: PPUSH
5387: LD_VAR 0 8
5391: PPUSH
5392: CALL_OW 1
5396: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5397: LD_VAR 0 8
5401: PPUSH
5402: LD_INT 1
5404: PPUSH
5405: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5409: LD_VAR 0 8
5413: PPUSH
5414: LD_VAR 0 7
5418: PUSH
5419: LD_INT 1
5421: ARRAY
5422: PUSH
5423: LD_INT 1
5425: ARRAY
5426: PPUSH
5427: LD_VAR 0 7
5431: PUSH
5432: LD_INT 1
5434: ARRAY
5435: PUSH
5436: LD_INT 2
5438: ARRAY
5439: PPUSH
5440: CALL_OW 111
// wait ( 0 0$2 ) ;
5444: LD_INT 70
5446: PPUSH
5447: CALL_OW 67
// end ; end ;
5451: GO 5265
5453: POP
5454: POP
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
5455: LD_ADDR_VAR 0 2
5459: PUSH
5460: DOUBLE
5461: LD_INT 1
5463: DEC
5464: ST_TO_ADDR
5465: LD_INT 3
5467: PUSH
5468: LD_INT 4
5470: PUSH
5471: LD_INT 4
5473: PUSH
5474: EMPTY
5475: LIST
5476: LIST
5477: LIST
5478: PUSH
5479: LD_OWVAR 67
5483: ARRAY
5484: PUSH
5485: FOR_TO
5486: IFFALSE 5803
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5488: LD_INT 3
5490: PPUSH
5491: LD_INT 3
5493: PPUSH
5494: LD_INT 21
5496: PUSH
5497: LD_INT 22
5499: PUSH
5500: LD_INT 23
5502: PUSH
5503: LD_INT 24
5505: PUSH
5506: LD_INT 24
5508: PUSH
5509: EMPTY
5510: LIST
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: PUSH
5516: LD_OWVAR 67
5520: PPUSH
5521: LD_OWVAR 67
5525: PUSH
5526: LD_INT 2
5528: PLUS
5529: PPUSH
5530: CALL_OW 12
5534: ARRAY
5535: PPUSH
5536: LD_INT 1
5538: PPUSH
5539: LD_INT 1
5541: PPUSH
5542: LD_INT 42
5544: PUSH
5545: LD_INT 44
5547: PUSH
5548: LD_INT 43
5550: PUSH
5551: LD_INT 44
5553: PUSH
5554: LD_INT 46
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: PUSH
5564: LD_INT 1
5566: PPUSH
5567: LD_OWVAR 67
5571: PUSH
5572: LD_INT 2
5574: PLUS
5575: PPUSH
5576: CALL_OW 12
5580: ARRAY
5581: PPUSH
5582: LD_INT 90
5584: PPUSH
5585: CALL 427 0 7
// un := CreateVehicle ;
5589: LD_ADDR_VAR 0 8
5593: PUSH
5594: CALL_OW 45
5598: ST_TO_ADDR
// SetDir ( un , dir ) ;
5599: LD_VAR 0 8
5603: PPUSH
5604: LD_VAR 0 4
5608: PPUSH
5609: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5613: LD_VAR 0 8
5617: PPUSH
5618: LD_VAR 0 5
5622: PPUSH
5623: LD_INT 0
5625: PPUSH
5626: CALL 63023 0 3
5630: IFFALSE 5801
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5632: LD_ADDR_EXP 41
5636: PUSH
5637: LD_EXP 41
5641: PPUSH
5642: LD_EXP 41
5646: PUSH
5647: LD_INT 1
5649: PLUS
5650: PPUSH
5651: LD_VAR 0 8
5655: PPUSH
5656: CALL_OW 1
5660: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
5661: LD_INT 0
5663: PPUSH
5664: LD_INT 3
5666: PUSH
5667: LD_INT 4
5669: PUSH
5670: LD_INT 5
5672: PUSH
5673: EMPTY
5674: LIST
5675: LIST
5676: LIST
5677: PUSH
5678: LD_OWVAR 67
5682: ARRAY
5683: PPUSH
5684: CALL_OW 383
// un := CreateHuman ;
5688: LD_ADDR_VAR 0 8
5692: PUSH
5693: CALL_OW 44
5697: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5698: LD_VAR 0 8
5702: PPUSH
5703: LD_EXP 41
5707: PUSH
5708: LD_EXP 41
5712: ARRAY
5713: PPUSH
5714: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5718: LD_ADDR_EXP 41
5722: PUSH
5723: LD_EXP 41
5727: PPUSH
5728: LD_EXP 41
5732: PUSH
5733: LD_INT 1
5735: PLUS
5736: PPUSH
5737: LD_VAR 0 8
5741: PPUSH
5742: CALL_OW 1
5746: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5747: LD_VAR 0 8
5751: PPUSH
5752: LD_INT 1
5754: PPUSH
5755: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5759: LD_VAR 0 8
5763: PPUSH
5764: LD_VAR 0 7
5768: PUSH
5769: LD_INT 1
5771: ARRAY
5772: PUSH
5773: LD_INT 1
5775: ARRAY
5776: PPUSH
5777: LD_VAR 0 7
5781: PUSH
5782: LD_INT 1
5784: ARRAY
5785: PUSH
5786: LD_INT 2
5788: ARRAY
5789: PPUSH
5790: CALL_OW 111
// wait ( 0 0$3 ) ;
5794: LD_INT 105
5796: PPUSH
5797: CALL_OW 67
// end ; end ;
5801: GO 5485
5803: POP
5804: POP
// end ; 4 .. 7 :
5805: GO 6360
5807: LD_INT 4
5809: DOUBLE
5810: GREATEREQUAL
5811: IFFALSE 5819
5813: LD_INT 7
5815: DOUBLE
5816: LESSEQUAL
5817: IFTRUE 5821
5819: GO 6359
5821: POP
// begin uc_side := 3 ;
5822: LD_ADDR_OWVAR 20
5826: PUSH
5827: LD_INT 3
5829: ST_TO_ADDR
// uc_nation := 3 ;
5830: LD_ADDR_OWVAR 21
5834: PUSH
5835: LD_INT 3
5837: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
5838: LD_ADDR_VAR 0 2
5842: PUSH
5843: DOUBLE
5844: LD_INT 1
5846: DEC
5847: ST_TO_ADDR
5848: LD_INT 2
5850: PUSH
5851: LD_INT 3
5853: PUSH
5854: LD_INT 4
5856: PUSH
5857: EMPTY
5858: LIST
5859: LIST
5860: LIST
5861: PUSH
5862: LD_OWVAR 67
5866: ARRAY
5867: PUSH
5868: FOR_TO
5869: IFFALSE 6029
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
5871: LD_INT 0
5873: PPUSH
5874: LD_INT 1
5876: PPUSH
5877: LD_INT 4
5879: PUSH
5880: LD_INT 5
5882: PUSH
5883: LD_INT 6
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: LIST
5890: PUSH
5891: LD_OWVAR 67
5895: ARRAY
5896: PPUSH
5897: CALL_OW 380
// un := CreateHuman ;
5901: LD_ADDR_VAR 0 8
5905: PUSH
5906: CALL_OW 44
5910: ST_TO_ADDR
// SetDir ( un , dir ) ;
5911: LD_VAR 0 8
5915: PPUSH
5916: LD_VAR 0 4
5920: PPUSH
5921: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5925: LD_VAR 0 8
5929: PPUSH
5930: LD_VAR 0 5
5934: PPUSH
5935: LD_INT 0
5937: PPUSH
5938: CALL 63023 0 3
5942: IFFALSE 6027
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5944: LD_ADDR_EXP 41
5948: PUSH
5949: LD_EXP 41
5953: PPUSH
5954: LD_EXP 41
5958: PUSH
5959: LD_INT 1
5961: PLUS
5962: PPUSH
5963: LD_VAR 0 8
5967: PPUSH
5968: CALL_OW 1
5972: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5973: LD_VAR 0 8
5977: PPUSH
5978: LD_INT 1
5980: PPUSH
5981: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5985: LD_VAR 0 8
5989: PPUSH
5990: LD_VAR 0 7
5994: PUSH
5995: LD_INT 1
5997: ARRAY
5998: PUSH
5999: LD_INT 1
6001: ARRAY
6002: PPUSH
6003: LD_VAR 0 7
6007: PUSH
6008: LD_INT 1
6010: ARRAY
6011: PUSH
6012: LD_INT 2
6014: ARRAY
6015: PPUSH
6016: CALL_OW 111
// wait ( 0 0$2 ) ;
6020: LD_INT 70
6022: PPUSH
6023: CALL_OW 67
// end ; end ;
6027: GO 5868
6029: POP
6030: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
6031: LD_ADDR_VAR 0 2
6035: PUSH
6036: DOUBLE
6037: LD_INT 1
6039: DEC
6040: ST_TO_ADDR
6041: LD_INT 2
6043: PUSH
6044: LD_INT 3
6046: PUSH
6047: LD_INT 3
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: LIST
6054: PUSH
6055: LD_OWVAR 67
6059: ARRAY
6060: PUSH
6061: FOR_TO
6062: IFFALSE 6355
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6064: LD_INT 3
6066: PPUSH
6067: LD_INT 3
6069: PPUSH
6070: LD_INT 21
6072: PUSH
6073: LD_INT 22
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: PUSH
6080: LD_INT 1
6082: PPUSH
6083: LD_INT 2
6085: PPUSH
6086: CALL_OW 12
6090: ARRAY
6091: PPUSH
6092: LD_INT 1
6094: PPUSH
6095: LD_INT 1
6097: PPUSH
6098: LD_INT 42
6100: PUSH
6101: LD_INT 44
6103: PUSH
6104: LD_INT 43
6106: PUSH
6107: LD_INT 44
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: PUSH
6116: LD_INT 1
6118: PPUSH
6119: LD_OWVAR 67
6123: PUSH
6124: LD_INT 1
6126: PLUS
6127: PPUSH
6128: CALL_OW 12
6132: ARRAY
6133: PPUSH
6134: LD_INT 90
6136: PPUSH
6137: CALL 427 0 7
// un := CreateVehicle ;
6141: LD_ADDR_VAR 0 8
6145: PUSH
6146: CALL_OW 45
6150: ST_TO_ADDR
// SetDir ( un , dir ) ;
6151: LD_VAR 0 8
6155: PPUSH
6156: LD_VAR 0 4
6160: PPUSH
6161: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6165: LD_VAR 0 8
6169: PPUSH
6170: LD_VAR 0 5
6174: PPUSH
6175: LD_INT 0
6177: PPUSH
6178: CALL 63023 0 3
6182: IFFALSE 6353
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6184: LD_ADDR_EXP 41
6188: PUSH
6189: LD_EXP 41
6193: PPUSH
6194: LD_EXP 41
6198: PUSH
6199: LD_INT 1
6201: PLUS
6202: PPUSH
6203: LD_VAR 0 8
6207: PPUSH
6208: CALL_OW 1
6212: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
6213: LD_INT 0
6215: PPUSH
6216: LD_INT 3
6218: PUSH
6219: LD_INT 4
6221: PUSH
6222: LD_INT 5
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: LIST
6229: PUSH
6230: LD_OWVAR 67
6234: ARRAY
6235: PPUSH
6236: CALL_OW 383
// un := CreateHuman ;
6240: LD_ADDR_VAR 0 8
6244: PUSH
6245: CALL_OW 44
6249: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6250: LD_VAR 0 8
6254: PPUSH
6255: LD_EXP 41
6259: PUSH
6260: LD_EXP 41
6264: ARRAY
6265: PPUSH
6266: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6270: LD_ADDR_EXP 41
6274: PUSH
6275: LD_EXP 41
6279: PPUSH
6280: LD_EXP 41
6284: PUSH
6285: LD_INT 1
6287: PLUS
6288: PPUSH
6289: LD_VAR 0 8
6293: PPUSH
6294: CALL_OW 1
6298: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6299: LD_VAR 0 8
6303: PPUSH
6304: LD_INT 1
6306: PPUSH
6307: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6311: LD_VAR 0 8
6315: PPUSH
6316: LD_VAR 0 7
6320: PUSH
6321: LD_INT 1
6323: ARRAY
6324: PUSH
6325: LD_INT 1
6327: ARRAY
6328: PPUSH
6329: LD_VAR 0 7
6333: PUSH
6334: LD_INT 1
6336: ARRAY
6337: PUSH
6338: LD_INT 2
6340: ARRAY
6341: PPUSH
6342: CALL_OW 111
// wait ( 0 0$2 ) ;
6346: LD_INT 70
6348: PPUSH
6349: CALL_OW 67
// end ; end ;
6353: GO 6061
6355: POP
6356: POP
// end ; end ;
6357: GO 6360
6359: POP
// repeat wait ( 0 0$1 ) ;
6360: LD_INT 35
6362: PPUSH
6363: CALL_OW 67
// for un in ruConvoySquad do
6367: LD_ADDR_VAR 0 8
6371: PUSH
6372: LD_EXP 41
6376: PUSH
6377: FOR_IN
6378: IFFALSE 6873
// begin if IsInArea ( un , westSouthOutArea ) then
6380: LD_VAR 0 8
6384: PPUSH
6385: LD_INT 18
6387: PPUSH
6388: CALL_OW 308
6392: IFFALSE 6471
// begin if GetType ( un ) = unit_vehicle then
6394: LD_VAR 0 8
6398: PPUSH
6399: CALL_OW 247
6403: PUSH
6404: LD_INT 2
6406: EQUAL
6407: IFFALSE 6430
// ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6409: LD_ADDR_EXP 41
6413: PUSH
6414: LD_EXP 41
6418: PUSH
6419: LD_VAR 0 8
6423: PPUSH
6424: CALL_OW 311
6428: DIFF
6429: ST_TO_ADDR
// convoySavedCounter := convoySavedCounter + 1 ;
6430: LD_ADDR_EXP 15
6434: PUSH
6435: LD_EXP 15
6439: PUSH
6440: LD_INT 1
6442: PLUS
6443: ST_TO_ADDR
// RemoveUnit ( un ) ;
6444: LD_VAR 0 8
6448: PPUSH
6449: CALL_OW 64
// ruConvoySquad := ruConvoySquad diff un ;
6453: LD_ADDR_EXP 41
6457: PUSH
6458: LD_EXP 41
6462: PUSH
6463: LD_VAR 0 8
6467: DIFF
6468: ST_TO_ADDR
// break ;
6469: GO 6873
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6471: LD_VAR 0 8
6475: PPUSH
6476: CALL_OW 305
6480: NOT
6481: PUSH
6482: LD_VAR 0 8
6486: PPUSH
6487: CALL_OW 310
6491: NOT
6492: AND
6493: IFFALSE 6511
// ruConvoySquad := ruConvoySquad diff un ;
6495: LD_ADDR_EXP 41
6499: PUSH
6500: LD_EXP 41
6504: PUSH
6505: LD_VAR 0 8
6509: DIFF
6510: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6511: LD_VAR 0 8
6515: PPUSH
6516: CALL_OW 302
6520: PUSH
6521: LD_VAR 0 8
6525: PPUSH
6526: CALL_OW 314
6530: NOT
6531: AND
6532: IFFALSE 6871
// begin tag := GetTag ( un ) ;
6534: LD_ADDR_VAR 0 9
6538: PUSH
6539: LD_VAR 0 8
6543: PPUSH
6544: CALL_OW 110
6548: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6549: LD_VAR 0 8
6553: PPUSH
6554: LD_VAR 0 7
6558: PUSH
6559: LD_VAR 0 9
6563: PUSH
6564: LD_INT 1
6566: PLUS
6567: ARRAY
6568: PUSH
6569: LD_INT 1
6571: ARRAY
6572: PPUSH
6573: LD_VAR 0 7
6577: PUSH
6578: LD_VAR 0 9
6582: PUSH
6583: LD_INT 1
6585: PLUS
6586: ARRAY
6587: PUSH
6588: LD_INT 2
6590: ARRAY
6591: PPUSH
6592: CALL_OW 297
6596: PUSH
6597: LD_INT 6
6599: LESS
6600: IFFALSE 6711
// begin SetTag ( un , tag + 1 ) ;
6602: LD_VAR 0 8
6606: PPUSH
6607: LD_VAR 0 9
6611: PUSH
6612: LD_INT 1
6614: PLUS
6615: PPUSH
6616: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6620: LD_VAR 0 8
6624: PPUSH
6625: CALL_OW 247
6629: PUSH
6630: LD_INT 2
6632: EQUAL
6633: PUSH
6634: LD_VAR 0 8
6638: PPUSH
6639: CALL_OW 257
6643: PUSH
6644: LD_INT 3
6646: EQUAL
6647: OR
6648: IFFALSE 6709
// begin AddComWait ( un , 0 0$4 ) ;
6650: LD_VAR 0 8
6654: PPUSH
6655: LD_INT 140
6657: PPUSH
6658: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6662: LD_VAR 0 8
6666: PPUSH
6667: LD_VAR 0 7
6671: PUSH
6672: LD_VAR 0 9
6676: PUSH
6677: LD_INT 1
6679: PLUS
6680: ARRAY
6681: PUSH
6682: LD_INT 1
6684: ARRAY
6685: PPUSH
6686: LD_VAR 0 7
6690: PUSH
6691: LD_VAR 0 9
6695: PUSH
6696: LD_INT 1
6698: PLUS
6699: ARRAY
6700: PUSH
6701: LD_INT 2
6703: ARRAY
6704: PPUSH
6705: CALL_OW 174
// end ; end else
6709: GO 6871
// begin if GetClass ( un ) = 4 and UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6711: LD_VAR 0 8
6715: PPUSH
6716: CALL_OW 257
6720: PUSH
6721: LD_INT 4
6723: EQUAL
6724: PUSH
6725: LD_EXP 41
6729: PPUSH
6730: LD_INT 21
6732: PUSH
6733: LD_INT 1
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: PUSH
6740: LD_INT 3
6742: PUSH
6743: LD_INT 24
6745: PUSH
6746: LD_INT 1000
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PPUSH
6761: CALL_OW 72
6765: AND
6766: IFFALSE 6824
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
6768: LD_VAR 0 8
6772: PPUSH
6773: LD_EXP 41
6777: PPUSH
6778: LD_INT 21
6780: PUSH
6781: LD_INT 1
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: PUSH
6788: LD_INT 3
6790: PUSH
6791: LD_INT 24
6793: PUSH
6794: LD_INT 1000
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: PPUSH
6809: CALL_OW 72
6813: PUSH
6814: LD_INT 1
6816: ARRAY
6817: PPUSH
6818: CALL_OW 128
6822: GO 6871
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6824: LD_VAR 0 8
6828: PPUSH
6829: LD_VAR 0 7
6833: PUSH
6834: LD_VAR 0 9
6838: PUSH
6839: LD_INT 1
6841: PLUS
6842: ARRAY
6843: PUSH
6844: LD_INT 1
6846: ARRAY
6847: PPUSH
6848: LD_VAR 0 7
6852: PUSH
6853: LD_VAR 0 9
6857: PUSH
6858: LD_INT 1
6860: PLUS
6861: ARRAY
6862: PUSH
6863: LD_INT 2
6865: ARRAY
6866: PPUSH
6867: CALL_OW 114
// end ; end ; end ;
6871: GO 6377
6873: POP
6874: POP
// until not UnitFilter ( ruConvoySquad , [ f_type , unit_human ] ) ;
6875: LD_EXP 41
6879: PPUSH
6880: LD_INT 21
6882: PUSH
6883: LD_INT 1
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: PPUSH
6890: CALL_OW 72
6894: NOT
6895: IFFALSE 6360
// end ;
6897: LD_VAR 0 1
6901: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
6902: LD_EXP 16
6906: PUSH
6907: LD_INT 3
6909: PPUSH
6910: LD_INT 5
6912: PPUSH
6913: CALL_OW 12
6917: LESS
6918: PUSH
6919: LD_EXP 41
6923: NOT
6924: AND
6925: PUSH
6926: LD_OWVAR 67
6930: PUSH
6931: LD_INT 1
6933: GREATER
6934: AND
6935: IFFALSE 7323
6937: GO 6939
6939: DISABLE
6940: LD_INT 0
6942: PPUSH
6943: PPUSH
6944: PPUSH
// begin uc_side := 3 ;
6945: LD_ADDR_OWVAR 20
6949: PUSH
6950: LD_INT 3
6952: ST_TO_ADDR
// uc_nation := 3 ;
6953: LD_ADDR_OWVAR 21
6957: PUSH
6958: LD_INT 3
6960: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6961: LD_ADDR_VAR 0 1
6965: PUSH
6966: DOUBLE
6967: LD_INT 1
6969: DEC
6970: ST_TO_ADDR
6971: LD_INT 2
6973: PUSH
6974: LD_INT 3
6976: PUSH
6977: LD_INT 4
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: LIST
6984: PUSH
6985: LD_OWVAR 67
6989: ARRAY
6990: PUSH
6991: FOR_TO
6992: IFFALSE 7244
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
6994: LD_INT 3
6996: PPUSH
6997: LD_INT 3
6999: PPUSH
7000: LD_INT 21
7002: PUSH
7003: LD_INT 22
7005: PUSH
7006: LD_INT 23
7008: PUSH
7009: LD_INT 24
7011: PUSH
7012: LD_INT 24
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: LD_OWVAR 67
7026: PPUSH
7027: LD_OWVAR 67
7031: PUSH
7032: LD_INT 2
7034: PLUS
7035: PPUSH
7036: CALL_OW 12
7040: ARRAY
7041: PPUSH
7042: LD_INT 1
7044: PPUSH
7045: LD_INT 1
7047: PPUSH
7048: LD_INT 42
7050: PUSH
7051: LD_INT 44
7053: PUSH
7054: LD_INT 43
7056: PUSH
7057: LD_INT 44
7059: PUSH
7060: LD_INT 46
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: PUSH
7070: LD_INT 1
7072: PPUSH
7073: LD_OWVAR 67
7077: PUSH
7078: LD_INT 2
7080: PLUS
7081: PPUSH
7082: CALL_OW 12
7086: ARRAY
7087: PPUSH
7088: LD_INT 90
7090: PPUSH
7091: CALL 427 0 7
// un := CreateVehicle ;
7095: LD_ADDR_VAR 0 3
7099: PUSH
7100: CALL_OW 45
7104: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7105: LD_VAR 0 3
7109: PPUSH
7110: LD_INT 0
7112: PPUSH
7113: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7117: LD_VAR 0 3
7121: PPUSH
7122: LD_INT 23
7124: PPUSH
7125: LD_INT 0
7127: PPUSH
7128: CALL 63023 0 3
7132: IFFALSE 7242
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7134: LD_ADDR_VAR 0 2
7138: PUSH
7139: LD_VAR 0 2
7143: PPUSH
7144: LD_VAR 0 2
7148: PUSH
7149: LD_INT 1
7151: PLUS
7152: PPUSH
7153: LD_VAR 0 3
7157: PPUSH
7158: CALL_OW 1
7162: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
7163: LD_INT 0
7165: PPUSH
7166: LD_INT 3
7168: PUSH
7169: LD_INT 4
7171: PUSH
7172: LD_INT 5
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: LIST
7179: PUSH
7180: LD_OWVAR 67
7184: ARRAY
7185: PPUSH
7186: CALL_OW 383
// un := CreateHuman ;
7190: LD_ADDR_VAR 0 3
7194: PUSH
7195: CALL_OW 44
7199: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7200: LD_VAR 0 3
7204: PPUSH
7205: LD_VAR 0 2
7209: PUSH
7210: LD_VAR 0 2
7214: ARRAY
7215: PPUSH
7216: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7220: LD_VAR 0 3
7224: PPUSH
7225: LD_INT 80
7227: PPUSH
7228: LD_INT 139
7230: PPUSH
7231: CALL_OW 111
// wait ( 0 0$3 ) ;
7235: LD_INT 105
7237: PPUSH
7238: CALL_OW 67
// end ; end ;
7242: GO 6991
7244: POP
7245: POP
// for i in tmp do
7246: LD_ADDR_VAR 0 1
7250: PUSH
7251: LD_VAR 0 2
7255: PUSH
7256: FOR_IN
7257: IFFALSE 7321
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7259: LD_VAR 0 1
7263: PPUSH
7264: LD_INT 101
7266: PPUSH
7267: LD_INT 102
7269: PPUSH
7270: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7274: LD_VAR 0 1
7278: PPUSH
7279: LD_INT 110
7281: PPUSH
7282: LD_INT 78
7284: PPUSH
7285: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7289: LD_VAR 0 1
7293: PPUSH
7294: LD_INT 75
7296: PPUSH
7297: LD_INT 101
7299: PPUSH
7300: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7304: LD_VAR 0 1
7308: PPUSH
7309: LD_INT 57
7311: PPUSH
7312: LD_INT 83
7314: PPUSH
7315: CALL_OW 174
// end ;
7319: GO 7256
7321: POP
7322: POP
// end ; end_of_file
7323: PPOPN 3
7325: END
// on UnitDestroyed ( un ) do begin if un = Heike then
7326: LD_VAR 0 1
7330: PUSH
7331: LD_EXP 21
7335: EQUAL
7336: IFFALSE 7345
// YouLost ( Heike ) ;
7338: LD_STRING Heike
7340: PPUSH
7341: CALL_OW 104
// if un in apeSoldGroup then
7345: LD_VAR 0 1
7349: PUSH
7350: LD_EXP 42
7354: IN
7355: IFFALSE 7373
// apeSoldGroup := apeSoldGroup diff un ;
7357: LD_ADDR_EXP 42
7361: PUSH
7362: LD_EXP 42
7366: PUSH
7367: LD_VAR 0 1
7371: DIFF
7372: ST_TO_ADDR
// if un in apeEngGroup then
7373: LD_VAR 0 1
7377: PUSH
7378: LD_EXP 43
7382: IN
7383: IFFALSE 7401
// apeEngGroup := apeEngGroup diff un ;
7385: LD_ADDR_EXP 43
7389: PUSH
7390: LD_EXP 43
7394: PUSH
7395: LD_VAR 0 1
7399: DIFF
7400: ST_TO_ADDR
// if un in oilBaseGuard then
7401: LD_VAR 0 1
7405: PUSH
7406: LD_EXP 38
7410: IN
7411: IFFALSE 7429
// oilBaseGuard := oilBaseGuard diff un ;
7413: LD_ADDR_EXP 38
7417: PUSH
7418: LD_EXP 38
7422: PUSH
7423: LD_VAR 0 1
7427: DIFF
7428: ST_TO_ADDR
// if un in ruNorthGroup then
7429: LD_VAR 0 1
7433: PUSH
7434: LD_EXP 39
7438: IN
7439: IFFALSE 7457
// ruNorthGroup := ruNorthGroup diff un ;
7441: LD_ADDR_EXP 39
7445: PUSH
7446: LD_EXP 39
7450: PUSH
7451: LD_VAR 0 1
7455: DIFF
7456: ST_TO_ADDR
// if un in ruSouthGroup then
7457: LD_VAR 0 1
7461: PUSH
7462: LD_EXP 40
7466: IN
7467: IFFALSE 7485
// ruSouthGroup := ruSouthGroup diff un ;
7469: LD_ADDR_EXP 40
7473: PUSH
7474: LD_EXP 40
7478: PUSH
7479: LD_VAR 0 1
7483: DIFF
7484: ST_TO_ADDR
// if un in ruConvoySquad then
7485: LD_VAR 0 1
7489: PUSH
7490: LD_EXP 41
7494: IN
7495: IFFALSE 7513
// ruConvoySquad := ruConvoySquad diff un ;
7497: LD_ADDR_EXP 41
7501: PUSH
7502: LD_EXP 41
7506: PUSH
7507: LD_VAR 0 1
7511: DIFF
7512: ST_TO_ADDR
// end ;
7513: PPOPN 1
7515: END
// on VehicleConstructed ( veh , fac ) do begin if GetWeapon ( veh ) = ar_radar then
7516: LD_VAR 0 1
7520: PPUSH
7521: CALL_OW 264
7525: PUSH
7526: LD_INT 30
7528: EQUAL
7529: IFFALSE 7539
// radarConstructed := true ;
7531: LD_ADDR_EXP 13
7535: PUSH
7536: LD_INT 1
7538: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
7539: LD_VAR 0 1
7543: PPUSH
7544: CALL_OW 264
7548: PUSH
7549: LD_INT 26
7551: EQUAL
7552: IFFALSE 7562
// flamethrowerBuilt := true ;
7554: LD_ADDR_EXP 20
7558: PUSH
7559: LD_INT 1
7561: ST_TO_ADDR
// end ;
7562: PPOPN 2
7564: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
7565: LD_ADDR_EXP 18
7569: PUSH
7570: LD_EXP 18
7574: PUSH
7575: LD_INT 1
7577: PLUS
7578: ST_TO_ADDR
// end ; end_of_file
7579: PPOPN 4
7581: END
// export function Action ; var i , un , veh , tmp ; begin
7582: LD_INT 0
7584: PPUSH
7585: PPUSH
7586: PPUSH
7587: PPUSH
7588: PPUSH
// InGameOn ;
7589: CALL_OW 8
// music_nat := 2 ;
7593: LD_ADDR_OWVAR 71
7597: PUSH
7598: LD_INT 2
7600: ST_TO_ADDR
// music_class := 0 ;
7601: LD_ADDR_OWVAR 72
7605: PUSH
7606: LD_INT 0
7608: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
7609: LD_INT 7
7611: PPUSH
7612: LD_INT 6
7614: PPUSH
7615: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 20 ) ;
7619: LD_INT 7
7621: PPUSH
7622: LD_INT 6
7624: PPUSH
7625: LD_INT 2
7627: PPUSH
7628: LD_INT 20
7630: NEG
7631: PPUSH
7632: CALL 1211 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Aviradze ] ;
7636: LD_ADDR_VAR 0 5
7640: PUSH
7641: LD_EXP 21
7645: PUSH
7646: LD_EXP 22
7650: PUSH
7651: LD_EXP 23
7655: PUSH
7656: LD_EXP 24
7660: PUSH
7661: LD_EXP 25
7665: PUSH
7666: LD_EXP 26
7670: PUSH
7671: LD_EXP 27
7675: PUSH
7676: LD_EXP 28
7680: PUSH
7681: LD_EXP 33
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: ST_TO_ADDR
// tmp := tmp diff 0 ;
7697: LD_ADDR_VAR 0 5
7701: PUSH
7702: LD_VAR 0 5
7706: PUSH
7707: LD_INT 0
7709: DIFF
7710: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
7711: LD_ADDR_VAR 0 5
7715: PUSH
7716: LD_VAR 0 5
7720: PPUSH
7721: LD_INT 3
7723: PPUSH
7724: CALL 62734 0 2
7728: ST_TO_ADDR
// for i in heikeVehicles do
7729: LD_ADDR_VAR 0 2
7733: PUSH
7734: LD_EXP 35
7738: PUSH
7739: FOR_IN
7740: IFFALSE 7939
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
7742: LD_INT 5
7744: PPUSH
7745: LD_VAR 0 2
7749: PUSH
7750: LD_INT 5
7752: ARRAY
7753: PPUSH
7754: LD_VAR 0 2
7758: PUSH
7759: LD_INT 1
7761: ARRAY
7762: PPUSH
7763: LD_VAR 0 2
7767: PUSH
7768: LD_INT 2
7770: ARRAY
7771: PPUSH
7772: LD_VAR 0 2
7776: PUSH
7777: LD_INT 3
7779: ARRAY
7780: PPUSH
7781: LD_VAR 0 2
7785: PUSH
7786: LD_INT 4
7788: ARRAY
7789: PPUSH
7790: LD_INT 34
7792: PPUSH
7793: CALL 427 0 7
// veh := CreateVehicle ;
7797: LD_ADDR_VAR 0 4
7801: PUSH
7802: CALL_OW 45
7806: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
7807: LD_VAR 0 2
7811: PUSH
7812: LD_INT 4
7814: ARRAY
7815: PUSH
7816: LD_INT 51
7818: PUSH
7819: LD_INT 32
7821: PUSH
7822: LD_INT 12
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: LIST
7829: IN
7830: IFFALSE 7910
// begin if i [ 7 ] [ 1 ] then
7832: LD_VAR 0 2
7836: PUSH
7837: LD_INT 7
7839: ARRAY
7840: PUSH
7841: LD_INT 1
7843: ARRAY
7844: IFFALSE 7871
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
7846: LD_VAR 0 4
7850: PPUSH
7851: LD_INT 1
7853: PPUSH
7854: LD_VAR 0 2
7858: PUSH
7859: LD_INT 7
7861: ARRAY
7862: PUSH
7863: LD_INT 1
7865: ARRAY
7866: PPUSH
7867: CALL_OW 291
// if i [ 7 ] [ 2 ] then
7871: LD_VAR 0 2
7875: PUSH
7876: LD_INT 7
7878: ARRAY
7879: PUSH
7880: LD_INT 2
7882: ARRAY
7883: IFFALSE 7910
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
7885: LD_VAR 0 4
7889: PPUSH
7890: LD_INT 2
7892: PPUSH
7893: LD_VAR 0 2
7897: PUSH
7898: LD_INT 7
7900: ARRAY
7901: PUSH
7902: LD_INT 2
7904: ARRAY
7905: PPUSH
7906: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
7910: LD_VAR 0 4
7914: PPUSH
7915: LD_INT 2
7917: PPUSH
7918: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
7922: LD_VAR 0 4
7926: PPUSH
7927: LD_INT 4
7929: PPUSH
7930: LD_INT 0
7932: PPUSH
7933: CALL_OW 49
// end ;
7937: GO 7739
7939: POP
7940: POP
// if tmp then
7941: LD_VAR 0 5
7945: IFFALSE 8000
// for i in tmp union heikeApes do
7947: LD_ADDR_VAR 0 2
7951: PUSH
7952: LD_VAR 0 5
7956: PUSH
7957: LD_EXP 36
7961: UNION
7962: PUSH
7963: FOR_IN
7964: IFFALSE 7998
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
7966: LD_VAR 0 2
7970: PPUSH
7971: LD_INT 5
7973: PPUSH
7974: LD_INT 0
7976: PPUSH
7977: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
7981: LD_VAR 0 2
7985: PPUSH
7986: LD_INT 26
7988: PPUSH
7989: LD_INT 9
7991: PPUSH
7992: CALL_OW 118
// end ;
7996: GO 7963
7998: POP
7999: POP
// if heikeSecondSquad then
8000: LD_EXP 34
8004: IFFALSE 8053
// for i in heikeSecondSquad do
8006: LD_ADDR_VAR 0 2
8010: PUSH
8011: LD_EXP 34
8015: PUSH
8016: FOR_IN
8017: IFFALSE 8051
// begin PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8019: LD_VAR 0 2
8023: PPUSH
8024: LD_INT 6
8026: PPUSH
8027: LD_INT 0
8029: PPUSH
8030: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8034: LD_VAR 0 2
8038: PPUSH
8039: LD_INT 26
8041: PPUSH
8042: LD_INT 9
8044: PPUSH
8045: CALL_OW 118
// end ;
8049: GO 8016
8051: POP
8052: POP
// if heikeApes then
8053: LD_EXP 36
8057: IFFALSE 8100
// for i in heikeApes do
8059: LD_ADDR_VAR 0 2
8063: PUSH
8064: LD_EXP 36
8068: PUSH
8069: FOR_IN
8070: IFFALSE 8098
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
8072: LD_VAR 0 2
8076: PPUSH
8077: LD_INT 7
8079: PPUSH
8080: LD_INT 0
8082: PPUSH
8083: CALL_OW 49
// ComHold ( i ) ;
8087: LD_VAR 0 2
8091: PPUSH
8092: CALL_OW 140
// end ;
8096: GO 8069
8098: POP
8099: POP
// if Kurt then
8100: LD_EXP 32
8104: IFFALSE 8136
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
8106: LD_EXP 32
8110: PPUSH
8111: LD_INT 8
8113: PPUSH
8114: LD_INT 0
8116: PPUSH
8117: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
8121: LD_EXP 32
8125: PPUSH
8126: LD_INT 42
8128: PPUSH
8129: LD_INT 32
8131: PPUSH
8132: CALL_OW 118
// end ; Say ( Heike , DH-Start-1 ) ;
8136: LD_EXP 21
8140: PPUSH
8141: LD_STRING DH-Start-1
8143: PPUSH
8144: CALL_OW 88
// if Givi then
8148: LD_EXP 22
8152: IFFALSE 8415
// begin Say ( Givi , DG-Start-2-5 ) ;
8154: LD_EXP 22
8158: PPUSH
8159: LD_STRING DG-Start-2-5
8161: PPUSH
8162: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
8166: LD_EXP 21
8170: PPUSH
8171: LD_STRING DH-Start-3
8173: PPUSH
8174: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8178: LD_EXP 21
8182: PPUSH
8183: LD_STRING DH-Start-4
8185: PPUSH
8186: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
8190: LD_EXP 22
8194: PPUSH
8195: LD_STRING DG-Start-5
8197: PPUSH
8198: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
8202: LD_EXP 21
8206: PPUSH
8207: LD_STRING DH-Start-6
8209: PPUSH
8210: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
8214: LD_EXP 22
8218: PPUSH
8219: LD_STRING DG-Start-7
8221: PPUSH
8222: CALL_OW 88
// if Mike then
8226: LD_EXP 23
8230: IFFALSE 8403
// begin Say ( Mike , DM-Start-8 ) ;
8232: LD_EXP 23
8236: PPUSH
8237: LD_STRING DM-Start-8
8239: PPUSH
8240: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
8244: LD_EXP 23
8248: PPUSH
8249: LD_STRING DM-Start-9
8251: PPUSH
8252: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
8256: LD_EXP 22
8260: PPUSH
8261: LD_STRING DG-Start-10
8263: PPUSH
8264: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
8268: LD_EXP 22
8272: PPUSH
8273: LD_STRING DG-Start-11
8275: PPUSH
8276: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
8280: LD_EXP 21
8284: PPUSH
8285: LD_STRING DH-Start-12
8287: PPUSH
8288: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
8292: LD_EXP 22
8296: PPUSH
8297: LD_STRING DG-Start-13
8299: PPUSH
8300: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
8304: LD_EXP 22
8308: PPUSH
8309: LD_STRING DG-Start-14
8311: PPUSH
8312: CALL_OW 88
// if Kaia then
8316: LD_EXP 26
8320: IFFALSE 8403
// begin Say ( Kaia , DK-Start-15 ) ;
8322: LD_EXP 26
8326: PPUSH
8327: LD_STRING DK-Start-15
8329: PPUSH
8330: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
8334: LD_EXP 26
8338: PPUSH
8339: LD_STRING DK-Start-16
8341: PPUSH
8342: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
8346: LD_EXP 26
8350: PPUSH
8351: LD_STRING DK-Start-17
8353: PPUSH
8354: CALL_OW 88
// wait ( 0 0$0.3 ) ;
8358: LD_INT 10
8360: PPUSH
8361: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
8365: LD_EXP 22
8369: PPUSH
8370: LD_EXP 26
8374: PPUSH
8375: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
8379: LD_EXP 22
8383: PPUSH
8384: LD_STRING DG-Start-18
8386: PPUSH
8387: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
8391: LD_EXP 26
8395: PPUSH
8396: LD_STRING DK-Start-19
8398: PPUSH
8399: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
8403: LD_EXP 21
8407: PPUSH
8408: LD_STRING DH-Start-20
8410: PPUSH
8411: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
8415: LD_INT 70
8417: PPUSH
8418: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
8422: LD_EXP 29
8426: PPUSH
8427: LD_STRING DShar-Start-21
8429: PPUSH
8430: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
8434: LD_EXP 21
8438: PPUSH
8439: LD_STRING DH-Start-22
8441: PPUSH
8442: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
8446: LD_EXP 29
8450: PPUSH
8451: LD_STRING DShar-Start-23
8453: PPUSH
8454: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
8458: LD_EXP 29
8462: PPUSH
8463: LD_STRING DShar-Start-24
8465: PPUSH
8466: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
8470: LD_EXP 29
8474: PPUSH
8475: LD_STRING DShar-Start-25
8477: PPUSH
8478: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
8482: LD_EXP 29
8486: PPUSH
8487: LD_STRING DShar-Start-26
8489: PPUSH
8490: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
8494: LD_EXP 21
8498: PPUSH
8499: LD_STRING DH-Start-27
8501: PPUSH
8502: CALL_OW 88
// if Kaia then
8506: LD_EXP 26
8510: IFFALSE 8552
// begin ComTurnUnit ( Heike , Kaia ) ;
8512: LD_EXP 21
8516: PPUSH
8517: LD_EXP 26
8521: PPUSH
8522: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
8526: LD_EXP 26
8530: PPUSH
8531: LD_STRING DK-Start-28
8533: PPUSH
8534: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
8538: LD_EXP 21
8542: PPUSH
8543: LD_STRING DH-Start-29
8545: PPUSH
8546: CALL_OW 88
// end else
8550: GO 8564
// Say ( Heike , DH-Start-a-28 ) ;
8552: LD_EXP 21
8556: PPUSH
8557: LD_STRING DH-Start-a-28
8559: PPUSH
8560: CALL_OW 88
// if Givi then
8564: LD_EXP 22
8568: IFFALSE 8803
// begin ComTurnUnit ( Heike , Givi ) ;
8570: LD_EXP 21
8574: PPUSH
8575: LD_EXP 22
8579: PPUSH
8580: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
8584: LD_EXP 22
8588: PPUSH
8589: LD_EXP 21
8593: PPUSH
8594: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
8598: LD_EXP 21
8602: PPUSH
8603: LD_STRING DH-Start-30
8605: PPUSH
8606: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
8610: LD_EXP 21
8614: PPUSH
8615: LD_STRING DH-Start-31
8617: PPUSH
8618: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
8622: LD_EXP 22
8626: PPUSH
8627: LD_STRING DG-Start-32
8629: PPUSH
8630: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
8634: LD_EXP 21
8638: PPUSH
8639: LD_STRING DH-Start-33
8641: PPUSH
8642: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
8646: LD_EXP 22
8650: PPUSH
8651: LD_STRING DG-Start-34
8653: PPUSH
8654: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
8658: LD_EXP 22
8662: PPUSH
8663: LD_STRING DG-Start-35
8665: PPUSH
8666: CALL_OW 88
// if Kurt and not dialogue_skipped then
8670: LD_EXP 32
8674: PUSH
8675: LD_OWVAR 59
8679: NOT
8680: AND
8681: IFFALSE 8712
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
8683: LD_EXP 32
8687: PPUSH
8688: LD_INT 28
8690: PPUSH
8691: LD_INT 13
8693: PPUSH
8694: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
8698: LD_EXP 32
8702: PPUSH
8703: LD_EXP 21
8707: PPUSH
8708: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
8712: LD_EXP 22
8716: PPUSH
8717: LD_STRING DG-Start-36
8719: PPUSH
8720: CALL_OW 88
// if Kurt then
8724: LD_EXP 32
8728: IFFALSE 8801
// begin if not Givi then
8730: LD_EXP 22
8734: NOT
8735: IFFALSE 8751
// Say ( Kurt , DKs-Start-37-a ) else
8737: LD_EXP 32
8741: PPUSH
8742: LD_STRING DKs-Start-37-a
8744: PPUSH
8745: CALL_OW 88
8749: GO 8763
// Say ( Kurt , DKs-Start-37 ) ;
8751: LD_EXP 32
8755: PPUSH
8756: LD_STRING DKs-Start-37
8758: PPUSH
8759: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
8763: LD_EXP 32
8767: PPUSH
8768: LD_STRING DKs-Start-38
8770: PPUSH
8771: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
8775: LD_EXP 21
8779: PPUSH
8780: LD_EXP 32
8784: PPUSH
8785: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
8789: LD_EXP 21
8793: PPUSH
8794: LD_STRING DH-Start-39
8796: PPUSH
8797: CALL_OW 88
// end ; end else
8801: GO 8832
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
8803: LD_EXP 34
8807: PPUSH
8808: LD_STRING DArm-Start-a-37
8810: PPUSH
8811: LD_STRING DArf-Start-a-37
8813: PPUSH
8814: CALL 1262 0 3
8818: IFFALSE 8832
// Say ( Heike , DH-Start-39 ) ;
8820: LD_EXP 21
8824: PPUSH
8825: LD_STRING DH-Start-39
8827: PPUSH
8828: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
8832: LD_INT 44
8834: PPUSH
8835: LD_INT 25
8837: PPUSH
8838: CALL_OW 428
8842: IFFALSE 8859
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
8844: LD_INT 44
8846: PPUSH
8847: LD_INT 25
8849: PPUSH
8850: CALL_OW 428
8854: PPUSH
8855: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
8859: LD_EXP 30
8863: PPUSH
8864: LD_INT 5
8866: PPUSH
8867: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
8871: LD_EXP 30
8875: PPUSH
8876: LD_INT 44
8878: PPUSH
8879: LD_INT 25
8881: PPUSH
8882: LD_INT 0
8884: PPUSH
8885: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
8889: LD_EXP 30
8893: PPUSH
8894: LD_INT 29
8896: PPUSH
8897: LD_INT 12
8899: PPUSH
8900: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8904: LD_INT 35
8906: PPUSH
8907: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
8911: LD_OWVAR 59
8915: PUSH
8916: LD_EXP 21
8920: PPUSH
8921: LD_EXP 30
8925: PPUSH
8926: CALL_OW 296
8930: PUSH
8931: LD_INT 8
8933: LESS
8934: OR
8935: PUSH
8936: LD_EXP 30
8940: PPUSH
8941: LD_INT 26
8943: PPUSH
8944: LD_INT 9
8946: PPUSH
8947: CALL_OW 297
8951: PUSH
8952: LD_INT 6
8954: LESS
8955: OR
8956: IFFALSE 8904
// Say ( Olaf , DO-Scout-1 ) ;
8958: LD_EXP 30
8962: PPUSH
8963: LD_STRING DO-Scout-1
8965: PPUSH
8966: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
8970: LD_EXP 30
8974: PPUSH
8975: LD_EXP 21
8979: PPUSH
8980: CALL_OW 119
// for i in tmp union heikeSecondSquad do
8984: LD_ADDR_VAR 0 2
8988: PUSH
8989: LD_VAR 0 5
8993: PUSH
8994: LD_EXP 34
8998: UNION
8999: PUSH
9000: FOR_IN
9001: IFFALSE 9019
// ComTurnUnit ( i , Olaf ) ;
9003: LD_VAR 0 2
9007: PPUSH
9008: LD_EXP 30
9012: PPUSH
9013: CALL_OW 119
9017: GO 9000
9019: POP
9020: POP
// wait ( 0 0$0.3 ) ;
9021: LD_INT 10
9023: PPUSH
9024: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9028: LD_EXP 21
9032: PPUSH
9033: LD_EXP 30
9037: PPUSH
9038: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
9042: LD_EXP 21
9046: PPUSH
9047: LD_EXP 30
9051: PPUSH
9052: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
9056: LD_EXP 21
9060: PPUSH
9061: LD_STRING DH-Scout-2
9063: PPUSH
9064: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
9068: LD_EXP 30
9072: PPUSH
9073: LD_STRING DO-Scout-3
9075: PPUSH
9076: CALL_OW 88
// if Mike and Givi then
9080: LD_EXP 23
9084: PUSH
9085: LD_EXP 22
9089: AND
9090: IFFALSE 9106
// Say ( Olaf , DO-Scout-4 ) else
9092: LD_EXP 30
9096: PPUSH
9097: LD_STRING DO-Scout-4
9099: PPUSH
9100: CALL_OW 88
9104: GO 9206
// begin if Mike then
9106: LD_EXP 23
9110: IFFALSE 9138
// begin Say ( Olaf , DO-Scout-a-4 ) ;
9112: LD_EXP 30
9116: PPUSH
9117: LD_STRING DO-Scout-a-4
9119: PPUSH
9120: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
9124: LD_EXP 21
9128: PPUSH
9129: LD_STRING DH-Scout-a-5
9131: PPUSH
9132: CALL_OW 88
// end else
9136: GO 9206
// if Givi then
9138: LD_EXP 22
9142: IFFALSE 9170
// begin Say ( Olaf , DO-Scout-b-4 ) ;
9144: LD_EXP 30
9148: PPUSH
9149: LD_STRING DO-Scout-b-4
9151: PPUSH
9152: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
9156: LD_EXP 21
9160: PPUSH
9161: LD_STRING DH-Scout-b-5
9163: PPUSH
9164: CALL_OW 88
// end else
9168: GO 9206
// begin Say ( Olaf , DO-Scout-f-4 ) ;
9170: LD_EXP 30
9174: PPUSH
9175: LD_STRING DO-Scout-f-4
9177: PPUSH
9178: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
9182: LD_EXP 21
9186: PPUSH
9187: LD_STRING DH-Scout-f-5
9189: PPUSH
9190: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
9194: LD_EXP 30
9198: PPUSH
9199: LD_STRING DO-Scout-f-6
9201: PPUSH
9202: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
9206: LD_EXP 21
9210: PPUSH
9211: LD_STRING DH-Scout-5
9213: PPUSH
9214: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
9218: LD_EXP 30
9222: PPUSH
9223: LD_STRING DO-Scout-6
9225: PPUSH
9226: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
9230: LD_EXP 30
9234: PPUSH
9235: LD_STRING DO-Scout-7
9237: PPUSH
9238: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
9242: LD_EXP 21
9246: PPUSH
9247: LD_STRING DH-Scout-8
9249: PPUSH
9250: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
9254: LD_EXP 21
9258: PPUSH
9259: LD_STRING DH-Scout-9
9261: PPUSH
9262: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
9266: LD_EXP 30
9270: PPUSH
9271: LD_STRING DO-Scout-10
9273: PPUSH
9274: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
9278: LD_EXP 30
9282: PPUSH
9283: LD_STRING DO-Scout-12
9285: PPUSH
9286: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
9290: LD_EXP 30
9294: PPUSH
9295: LD_STRING DO-Scout-13
9297: PPUSH
9298: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
9302: LD_EXP 30
9306: PPUSH
9307: LD_STRING DO-Scout-14
9309: PPUSH
9310: CALL_OW 88
// if Givi then
9314: LD_EXP 22
9318: IFFALSE 9344
// begin Say ( Givi , DG-Scout-15 ) ;
9320: LD_EXP 22
9324: PPUSH
9325: LD_STRING DG-Scout-15
9327: PPUSH
9328: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
9332: LD_EXP 26
9336: PPUSH
9337: LD_STRING DK-Scout-16
9339: PPUSH
9340: CALL_OW 88
// end ; if not dialogue_skipped then
9344: LD_OWVAR 59
9348: NOT
9349: IFFALSE 9470
// begin async ;
9351: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
9352: LD_EXP 30
9356: PPUSH
9357: LD_STRING DO-Scout-17
9359: PPUSH
9360: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
9364: LD_INT 55
9366: PPUSH
9367: LD_INT 77
9369: PPUSH
9370: LD_INT 2
9372: PPUSH
9373: LD_INT 6
9375: NEG
9376: PPUSH
9377: CALL 1211 0 4
// wait ( 10 ) ;
9381: LD_INT 10
9383: PPUSH
9384: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
9388: LD_INT 55
9390: PPUSH
9391: LD_INT 77
9393: PPUSH
9394: CALL_OW 84
// wait ( 0 0$5 ) ;
9398: LD_INT 175
9400: PPUSH
9401: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
9405: LD_EXP 30
9409: PPUSH
9410: LD_STRING DO-Scout-18
9412: PPUSH
9413: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
9417: LD_INT 204
9419: PPUSH
9420: LD_INT 107
9422: PPUSH
9423: LD_INT 2
9425: PPUSH
9426: LD_INT 12
9428: NEG
9429: PPUSH
9430: CALL 1211 0 4
// wait ( 10 ) ;
9434: LD_INT 10
9436: PPUSH
9437: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
9441: LD_INT 204
9443: PPUSH
9444: LD_INT 107
9446: PPUSH
9447: CALL_OW 84
// wait ( 0 0$5 ) ;
9451: LD_INT 175
9453: PPUSH
9454: CALL_OW 67
// sync ;
9458: SYNC
// CenterNowOnUnits ( Heike ) ;
9459: LD_EXP 21
9463: PPUSH
9464: CALL_OW 87
// end else
9468: GO 9504
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
9470: LD_INT 55
9472: PPUSH
9473: LD_INT 77
9475: PPUSH
9476: LD_INT 2
9478: PPUSH
9479: LD_INT 6
9481: NEG
9482: PPUSH
9483: CALL 1211 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
9487: LD_INT 204
9489: PPUSH
9490: LD_INT 107
9492: PPUSH
9493: LD_INT 2
9495: PPUSH
9496: LD_INT 12
9498: NEG
9499: PPUSH
9500: CALL 1211 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
9504: LD_EXP 30
9508: PPUSH
9509: LD_STRING DO-Scout-19
9511: PPUSH
9512: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
9516: LD_EXP 30
9520: PPUSH
9521: LD_STRING DO-Scout-20
9523: PPUSH
9524: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
9528: LD_EXP 21
9532: PPUSH
9533: LD_STRING DH-Scout-21
9535: PPUSH
9536: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
9540: LD_EXP 21
9544: PPUSH
9545: LD_STRING DH-Scout-22
9547: PPUSH
9548: CALL_OW 88
// InGameOff ;
9552: CALL_OW 9
// if Givi then
9556: LD_EXP 22
9560: IFFALSE 9575
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
9562: LD_INT 13
9564: PPUSH
9565: LD_INT 2
9567: PPUSH
9568: LD_INT 1
9570: PPUSH
9571: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
9575: LD_STRING Road
9577: PPUSH
9578: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
9582: LD_ADDR_VAR 0 2
9586: PUSH
9587: LD_INT 22
9589: PUSH
9590: LD_INT 5
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PUSH
9597: LD_INT 21
9599: PUSH
9600: LD_INT 2
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: PPUSH
9611: CALL_OW 69
9615: PUSH
9616: FOR_IN
9617: IFFALSE 9633
// SetSide ( i , 2 ) ;
9619: LD_VAR 0 2
9623: PPUSH
9624: LD_INT 2
9626: PPUSH
9627: CALL_OW 235
9631: GO 9616
9633: POP
9634: POP
// SaveForQuickRestart ;
9635: CALL_OW 22
// end ;
9639: LD_VAR 0 1
9643: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
9644: LD_INT 2
9646: PPUSH
9647: LD_INT 9
9649: PPUSH
9650: CALL_OW 294
9654: IFFALSE 10021
9656: GO 9658
9658: DISABLE
// begin DialogueOn ;
9659: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
9663: LD_INT 111
9665: PPUSH
9666: LD_INT 72
9668: PPUSH
9669: LD_INT 2
9671: PPUSH
9672: LD_INT 20
9674: NEG
9675: PPUSH
9676: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
9680: LD_INT 111
9682: PPUSH
9683: LD_INT 72
9685: PPUSH
9686: LD_INT 2
9688: PPUSH
9689: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
9693: LD_INT 111
9695: PPUSH
9696: LD_INT 72
9698: PPUSH
9699: CALL_OW 86
// if IsOk ( Kamil ) then
9703: LD_EXP 25
9707: PPUSH
9708: CALL_OW 302
9712: IFFALSE 9829
// begin Say ( Kamil , DKam-Cross-1 ) ;
9714: LD_EXP 25
9718: PPUSH
9719: LD_STRING DKam-Cross-1
9721: PPUSH
9722: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
9726: LD_EXP 25
9730: PPUSH
9731: LD_STRING DKam-Cross-2
9733: PPUSH
9734: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
9738: LD_EXP 25
9742: PPUSH
9743: LD_STRING DKam-Cross-3
9745: PPUSH
9746: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
9750: LD_EXP 25
9754: PPUSH
9755: LD_STRING DKam-Cross-4
9757: PPUSH
9758: CALL_OW 88
// if IsOk ( Ibrahim ) then
9762: LD_EXP 24
9766: PPUSH
9767: CALL_OW 302
9771: IFFALSE 9827
// begin if ibrahimJoinedIn04 then
9773: LD_EXP 4
9777: IFFALSE 9791
// Say ( Ibrahim , DI-Cross-b-5 ) ;
9779: LD_EXP 24
9783: PPUSH
9784: LD_STRING DI-Cross-b-5
9786: PPUSH
9787: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
9791: LD_EXP 24
9795: PPUSH
9796: LD_STRING DI-Cross-b-6
9798: PPUSH
9799: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
9803: LD_EXP 24
9807: PPUSH
9808: LD_STRING DI-Cross-b-7
9810: PPUSH
9811: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
9815: LD_EXP 25
9819: PPUSH
9820: LD_STRING DKam-Cross-8
9822: PPUSH
9823: CALL_OW 88
// end ; end else
9827: GO 9987
// if IsOk ( Sophia ) then
9829: LD_EXP 27
9833: PPUSH
9834: CALL_OW 302
9838: IFFALSE 9955
// begin Say ( Sophia , DS-Cross-1 ) ;
9840: LD_EXP 27
9844: PPUSH
9845: LD_STRING DS-Cross-1
9847: PPUSH
9848: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
9852: LD_EXP 27
9856: PPUSH
9857: LD_STRING DS-Cross-2
9859: PPUSH
9860: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
9864: LD_EXP 27
9868: PPUSH
9869: LD_STRING DS-Cross-3
9871: PPUSH
9872: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
9876: LD_EXP 27
9880: PPUSH
9881: LD_STRING DS-Cross-4
9883: PPUSH
9884: CALL_OW 88
// if IsOk ( Ibrahim ) then
9888: LD_EXP 24
9892: PPUSH
9893: CALL_OW 302
9897: IFFALSE 9953
// begin if ibrahimJoinedIn04 then
9899: LD_EXP 4
9903: IFFALSE 9917
// Say ( Ibrahim , DI-Cross-b-5 ) ;
9905: LD_EXP 24
9909: PPUSH
9910: LD_STRING DI-Cross-b-5
9912: PPUSH
9913: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
9917: LD_EXP 24
9921: PPUSH
9922: LD_STRING DI-Cross-b-6
9924: PPUSH
9925: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
9929: LD_EXP 24
9933: PPUSH
9934: LD_STRING DI-Cross-b-7
9936: PPUSH
9937: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
9941: LD_EXP 27
9945: PPUSH
9946: LD_STRING DS-Cross-8
9948: PPUSH
9949: CALL_OW 88
// end ; end else
9953: GO 9987
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
9955: LD_EXP 34
9959: PPUSH
9960: LD_INT 50
9962: PUSH
9963: EMPTY
9964: LIST
9965: PPUSH
9966: CALL_OW 72
9970: IFFALSE 9987
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
9972: LD_EXP 34
9976: PPUSH
9977: LD_STRING DArm-Cross-c-1
9979: PPUSH
9980: LD_STRING DArf-Cross-c-1
9982: PPUSH
9983: CALL 1262 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
9987: LD_EXP 56
9991: PPUSH
9992: LD_INT 2
9994: PPUSH
9995: LD_INT 1
9997: PPUSH
9998: CALL_OW 322
// DialogueOff ;
10002: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
10006: LD_STRING Crane
10008: PPUSH
10009: CALL_OW 337
// spottedCrossRoad := true ;
10013: LD_ADDR_EXP 8
10017: PUSH
10018: LD_INT 1
10020: ST_TO_ADDR
// end ;
10021: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
10022: LD_INT 22
10024: PUSH
10025: LD_INT 2
10027: PUSH
10028: EMPTY
10029: LIST
10030: LIST
10031: PUSH
10032: LD_INT 2
10034: PUSH
10035: LD_INT 30
10037: PUSH
10038: LD_INT 0
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PUSH
10045: LD_INT 30
10047: PUSH
10048: LD_INT 1
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: LIST
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: PPUSH
10064: CALL_OW 69
10068: PUSH
10069: LD_EXP 26
10073: PPUSH
10074: CALL_OW 302
10078: PUSH
10079: LD_EXP 34
10083: OR
10084: AND
10085: IFFALSE 10297
10087: GO 10089
10089: DISABLE
// begin DialogueOn ;
10090: CALL_OW 6
// if Kaia then
10094: LD_EXP 26
10098: IFFALSE 10111
// CenterNowOnUnits ( Kaia ) else
10100: LD_EXP 26
10104: PPUSH
10105: CALL_OW 87
10109: GO 10120
// CenterNowOnUnits ( Heike ) ;
10111: LD_EXP 21
10115: PPUSH
10116: CALL_OW 87
// if IsOk ( Kaia ) then
10120: LD_EXP 26
10124: PPUSH
10125: CALL_OW 302
10129: IFFALSE 10145
// Say ( Kaia , DK-Cam-1 ) else
10131: LD_EXP 26
10135: PPUSH
10136: LD_STRING DK-Cam-1
10138: PPUSH
10139: CALL_OW 88
10143: GO 10160
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
10145: LD_EXP 34
10149: PPUSH
10150: LD_STRING DArm-Cam-1
10152: PPUSH
10153: LD_STRING DArf-Cam-1
10155: PPUSH
10156: CALL 1262 0 3
// Say ( Heike , DH-Cam-2 ) ;
10160: LD_EXP 21
10164: PPUSH
10165: LD_STRING DH-Cam-2
10167: PPUSH
10168: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
10172: LD_EXP 21
10176: PPUSH
10177: LD_STRING DH-Cam-3
10179: PPUSH
10180: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10184: LD_EXP 21
10188: PPUSH
10189: LD_STRING DH-Cam-4
10191: PPUSH
10192: CALL_OW 88
// if IsOk ( Kaia ) then
10196: LD_EXP 26
10200: PPUSH
10201: CALL_OW 302
10205: IFFALSE 10221
// Say ( Kaia , DK-Cam-5 ) else
10207: LD_EXP 26
10211: PPUSH
10212: LD_STRING DK-Cam-5
10214: PPUSH
10215: CALL_OW 88
10219: GO 10236
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
10221: LD_EXP 34
10225: PPUSH
10226: LD_STRING DArm-Cam-5
10228: PPUSH
10229: LD_STRING DArf-Cam-5
10231: PPUSH
10232: CALL 1262 0 3
// Say ( Olaf , DO-Cam-6 ) ;
10236: LD_EXP 30
10240: PPUSH
10241: LD_STRING DO-Cam-6
10243: PPUSH
10244: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
10248: LD_EXP 30
10252: PPUSH
10253: LD_STRING DO-Cam-7
10255: PPUSH
10256: CALL_OW 88
// DialogueOff ;
10260: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
10264: LD_STRING Radar
10266: PPUSH
10267: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
10271: LD_INT 6
10273: PPUSH
10274: LD_INT 2
10276: PPUSH
10277: LD_INT 1
10279: PPUSH
10280: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
10284: LD_INT 20
10286: PPUSH
10287: LD_INT 2
10289: PPUSH
10290: LD_INT 1
10292: PPUSH
10293: CALL_OW 324
// end ;
10297: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
10298: LD_INT 22
10300: PUSH
10301: LD_INT 2
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: PUSH
10308: LD_INT 2
10310: PUSH
10311: LD_INT 34
10313: PUSH
10314: LD_INT 30
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PUSH
10321: LD_INT 35
10323: PUSH
10324: LD_INT 30
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: LIST
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: PPUSH
10340: CALL_OW 69
10344: IFFALSE 10356
10346: GO 10348
10348: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
10349: LD_STRING RadarDone
10351: PPUSH
10352: CALL_OW 337
10356: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
10357: LD_INT 22
10359: PUSH
10360: LD_INT 2
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: LD_INT 34
10369: PUSH
10370: LD_EXP 50
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PPUSH
10383: CALL_OW 69
10387: IFFALSE 10399
10389: GO 10391
10391: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
10392: LD_STRING CraneDone
10394: PPUSH
10395: CALL_OW 337
10399: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
10400: LD_EXP 30
10404: PPUSH
10405: CALL_OW 302
10409: PUSH
10410: LD_EXP 33
10414: PPUSH
10415: CALL_OW 302
10419: AND
10420: PUSH
10421: LD_INT 6
10423: PPUSH
10424: LD_INT 2
10426: PPUSH
10427: CALL_OW 321
10431: PUSH
10432: LD_INT 2
10434: EQUAL
10435: AND
10436: PUSH
10437: LD_EXP 33
10441: PPUSH
10442: LD_EXP 21
10446: PPUSH
10447: CALL_OW 296
10451: PUSH
10452: LD_INT 10
10454: LESS
10455: PUSH
10456: LD_EXP 33
10460: PPUSH
10461: CALL_OW 310
10465: OR
10466: AND
10467: IFFALSE 10681
10469: GO 10471
10471: DISABLE
// begin DialogueOn ;
10472: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
10476: LD_EXP 33
10480: PPUSH
10481: LD_STRING DA-RC-1
10483: PPUSH
10484: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
10488: LD_EXP 33
10492: PPUSH
10493: LD_STRING DA-RC-2
10495: PPUSH
10496: CALL_OW 88
// if IsOk ( Kaia ) then
10500: LD_EXP 26
10504: PPUSH
10505: CALL_OW 302
10509: IFFALSE 10583
// begin Say ( Kaia , DK-RC-3 ) ;
10511: LD_EXP 26
10515: PPUSH
10516: LD_STRING DK-RC-3
10518: PPUSH
10519: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
10523: LD_EXP 33
10527: PPUSH
10528: LD_STRING DA-RC-4
10530: PPUSH
10531: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
10535: LD_EXP 26
10539: PPUSH
10540: LD_STRING DK-RC-5
10542: PPUSH
10543: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
10547: LD_EXP 33
10551: PPUSH
10552: LD_STRING DA-RC-6
10554: PPUSH
10555: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
10559: LD_EXP 26
10563: PPUSH
10564: LD_STRING DK-RC-7
10566: PPUSH
10567: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
10571: LD_EXP 33
10575: PPUSH
10576: LD_STRING DA-RC-8
10578: PPUSH
10579: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
10583: LD_EXP 21
10587: PPUSH
10588: LD_STRING DH-RC-9
10590: PPUSH
10591: CALL_OW 88
// if IsOk ( Markov ) then
10595: LD_EXP 28
10599: PPUSH
10600: CALL_OW 302
10604: IFFALSE 10632
// begin Say ( Markov , DMar-RC-10 ) ;
10606: LD_EXP 28
10610: PPUSH
10611: LD_STRING DMar-RC-10
10613: PPUSH
10614: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
10618: LD_EXP 28
10622: PPUSH
10623: LD_STRING DMar-RC-11
10625: PPUSH
10626: CALL_OW 88
// end else
10630: GO 10644
// begin Say ( Olaf , DO-RC-a-10 ) ;
10632: LD_EXP 30
10636: PPUSH
10637: LD_STRING DO-RC-a-10
10639: PPUSH
10640: CALL_OW 88
// end ; DialogueOff ;
10644: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
10648: LD_STRING RemoteControl
10650: PPUSH
10651: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
10655: LD_INT 15
10657: PPUSH
10658: LD_INT 2
10660: PPUSH
10661: LD_INT 1
10663: PPUSH
10664: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
10668: LD_INT 22
10670: PPUSH
10671: LD_INT 2
10673: PPUSH
10674: LD_INT 1
10676: PPUSH
10677: CALL_OW 324
// end ;
10681: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
10682: LD_INT 12
10684: PPUSH
10685: LD_INT 22
10687: PUSH
10688: LD_INT 2
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: PPUSH
10695: CALL_OW 70
10699: IFFALSE 11066
10701: GO 10703
10703: DISABLE
10704: LD_INT 0
10706: PPUSH
// begin PrepareWestBase ;
10707: CALL 3902 0 0
// westBaseSpotted := true ;
10711: LD_ADDR_EXP 5
10715: PUSH
10716: LD_INT 1
10718: ST_TO_ADDR
// wait ( 0 0$2 ) ;
10719: LD_INT 70
10721: PPUSH
10722: CALL_OW 67
// InGameOn ;
10726: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
10730: LD_INT 56
10732: PPUSH
10733: LD_INT 77
10735: PPUSH
10736: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
10740: LD_INT 56
10742: PPUSH
10743: LD_INT 77
10745: PPUSH
10746: LD_INT 2
10748: PPUSH
10749: LD_INT 12
10751: NEG
10752: PPUSH
10753: CALL_OW 330
// wait ( 0 0$2 ) ;
10757: LD_INT 70
10759: PPUSH
10760: CALL_OW 67
// DialogueOn ;
10764: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
10768: LD_EXP 21
10772: PPUSH
10773: LD_STRING DH-Rbase-1
10775: PPUSH
10776: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
10780: LD_EXP 26
10784: PPUSH
10785: LD_STRING DK-Rbase-2
10787: PPUSH
10788: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
10792: LD_EXP 26
10796: PPUSH
10797: LD_STRING DK-Rbase-3
10799: PPUSH
10800: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
10804: LD_EXP 26
10808: PPUSH
10809: LD_STRING DK-Rbase-4
10811: PPUSH
10812: CALL_OW 88
// DialogueOff ;
10816: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
10820: LD_INT 56
10822: PPUSH
10823: LD_INT 77
10825: PPUSH
10826: LD_INT 2
10828: PPUSH
10829: CALL_OW 331
// InGameOff ;
10833: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
10837: LD_INT 35
10839: PPUSH
10840: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
10844: LD_EXP 42
10848: NOT
10849: PUSH
10850: LD_EXP 43
10854: NOT
10855: AND
10856: IFFALSE 10837
// wait ( 0 0$2 ) ;
10858: LD_INT 70
10860: PPUSH
10861: CALL_OW 67
// if IsOk ( Kaia ) then
10865: LD_EXP 26
10869: PPUSH
10870: CALL_OW 302
10874: IFFALSE 10989
// begin DialogueOn ;
10876: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
10880: LD_INT 56
10882: PPUSH
10883: LD_INT 81
10885: PPUSH
10886: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
10890: LD_EXP 26
10894: PPUSH
10895: LD_STRING DK-Rbase-5
10897: PPUSH
10898: CALL_OW 88
// if IsOk ( Givi ) then
10902: LD_EXP 22
10906: PPUSH
10907: CALL_OW 302
10911: IFFALSE 10985
// begin Say ( Givi , DG-Rbase-6 ) ;
10913: LD_EXP 22
10917: PPUSH
10918: LD_STRING DG-Rbase-6
10920: PPUSH
10921: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
10925: LD_EXP 22
10929: PPUSH
10930: LD_STRING DG-Rbase-7
10932: PPUSH
10933: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
10937: LD_EXP 26
10941: PPUSH
10942: LD_STRING DK-Rbase-8
10944: PPUSH
10945: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
10949: LD_EXP 22
10953: PPUSH
10954: LD_STRING DG-Rbase-9
10956: PPUSH
10957: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
10961: LD_EXP 22
10965: PPUSH
10966: LD_STRING DG-Rbase-10
10968: PPUSH
10969: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
10973: LD_EXP 26
10977: PPUSH
10978: LD_STRING DK-Rbase-11
10980: PPUSH
10981: CALL_OW 88
// end ; DialogueOff ;
10985: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
10989: LD_ADDR_VAR 0 1
10993: PUSH
10994: LD_INT 12
10996: PPUSH
10997: LD_INT 22
10999: PUSH
11000: LD_INT 3
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: PUSH
11007: LD_INT 21
11009: PUSH
11010: LD_INT 3
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: PPUSH
11021: CALL_OW 70
11025: PUSH
11026: FOR_IN
11027: IFFALSE 11043
// SetSide ( i , 2 ) ;
11029: LD_VAR 0 1
11033: PPUSH
11034: LD_INT 2
11036: PPUSH
11037: CALL_OW 235
11041: GO 11026
11043: POP
11044: POP
// westBaseCaptured := true ;
11045: LD_ADDR_EXP 9
11049: PUSH
11050: LD_INT 1
11052: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
11053: LD_INT 0
11055: PPUSH
11056: LD_INT 2
11058: PPUSH
11059: LD_INT 1
11061: PPUSH
11062: CALL_OW 324
// end ;
11066: PPOPN 1
11068: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
11069: LD_EXP 38
11073: NOT
11074: PUSH
11075: LD_INT 10
11077: PPUSH
11078: CALL_OW 255
11082: PUSH
11083: LD_INT 2
11085: EQUAL
11086: OR
11087: IFFALSE 11224
11089: GO 11091
11091: DISABLE
// begin DialogueOn ;
11092: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
11096: LD_EXP 21
11100: PPUSH
11101: LD_STRING DH-Goal-1
11103: PPUSH
11104: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
11108: LD_EXP 29
11112: PPUSH
11113: LD_STRING DShar-Goal-2
11115: PPUSH
11116: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
11120: LD_EXP 21
11124: PPUSH
11125: LD_STRING DH-Goal-3
11127: PPUSH
11128: CALL_OW 88
// if reinforcementsAllowed then
11132: LD_EXP 14
11136: IFFALSE 11162
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
11138: LD_EXP 29
11142: PPUSH
11143: LD_STRING DShar-Goal-4
11145: PPUSH
11146: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
11150: LD_EXP 21
11154: PPUSH
11155: LD_STRING DH-Goal-5
11157: PPUSH
11158: CALL_OW 88
// end ; DialogueOff ;
11162: CALL_OW 7
// eastBaseCaptured := true ;
11166: LD_ADDR_EXP 10
11170: PUSH
11171: LD_INT 1
11173: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
11174: LD_STRING BaseCaptured
11176: PPUSH
11177: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
11181: LD_INT 10
11183: PPUSH
11184: LD_INT 2
11186: PPUSH
11187: CALL_OW 235
// if not reinforcementsAllowed then
11191: LD_EXP 14
11195: NOT
11196: IFFALSE 11200
// exit ;
11198: GO 11224
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
11200: LD_INT 21000
11202: PUSH
11203: LD_INT 1050
11205: NEG
11206: PPUSH
11207: LD_INT 1050
11209: PPUSH
11210: CALL_OW 12
11214: PLUS
11215: PPUSH
11216: CALL_OW 67
// PrepareReinforcements ;
11220: CALL 2230 0 0
// end ;
11224: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
11225: LD_INT 22
11227: PUSH
11228: LD_INT 2
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: PUSH
11235: LD_INT 30
11237: PUSH
11238: LD_INT 13
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: PPUSH
11249: CALL_OW 69
11253: IFFALSE 11270
11255: GO 11257
11257: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
11258: LD_EXP 22
11262: PPUSH
11263: LD_STRING DG-Lab-1
11265: PPUSH
11266: CALL_OW 88
// end ;
11270: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
11271: LD_INT 5
11273: PPUSH
11274: LD_INT 2
11276: PPUSH
11277: CALL_OW 321
11281: PUSH
11282: LD_INT 2
11284: EQUAL
11285: PUSH
11286: LD_EXP 22
11290: PPUSH
11291: CALL_OW 302
11295: AND
11296: IFFALSE 11357
11298: GO 11300
11300: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
11301: LD_EXP 22
11305: PPUSH
11306: LD_STRING DG-Stim-1
11308: PPUSH
11309: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
11313: LD_EXP 21
11317: PPUSH
11318: LD_STRING DH-Stim-2
11320: PPUSH
11321: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
11325: LD_EXP 22
11329: PPUSH
11330: LD_STRING DG-Stim-3
11332: PPUSH
11333: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
11337: LD_EXP 21
11341: PPUSH
11342: LD_STRING DH-Stim-4
11344: PPUSH
11345: CALL_OW 88
// drugsResearched := true ;
11349: LD_ADDR_EXP 11
11353: PUSH
11354: LD_INT 1
11356: ST_TO_ADDR
// end ;
11357: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
11358: LD_EXP 11
11362: IFFALSE 11674
11364: GO 11366
11366: DISABLE
11367: LD_INT 0
11369: PPUSH
11370: PPUSH
11371: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
11372: LD_ADDR_VAR 0 2
11376: PUSH
11377: LD_EXP 21
11381: PUSH
11382: LD_EXP 22
11386: PUSH
11387: LD_EXP 30
11391: PUSH
11392: LD_EXP 28
11396: PUSH
11397: LD_EXP 26
11401: PUSH
11402: LD_EXP 27
11406: PUSH
11407: LD_EXP 32
11411: PUSH
11412: LD_EXP 25
11416: PUSH
11417: LD_EXP 23
11421: PUSH
11422: LD_EXP 24
11426: PUSH
11427: LD_EXP 33
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
11445: LD_ADDR_VAR 0 3
11449: PUSH
11450: LD_STRING H
11452: PUSH
11453: LD_STRING G
11455: PUSH
11456: LD_STRING O
11458: PUSH
11459: LD_STRING Mar
11461: PUSH
11462: LD_STRING K
11464: PUSH
11465: LD_STRING S
11467: PUSH
11468: LD_STRING Ks
11470: PUSH
11471: LD_STRING Kam
11473: PUSH
11474: LD_STRING M
11476: PUSH
11477: LD_STRING I
11479: PUSH
11480: LD_STRING A
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11496: LD_INT 35
11498: PPUSH
11499: CALL_OW 67
// for i := tmp downto 1 do
11503: LD_ADDR_VAR 0 1
11507: PUSH
11508: DOUBLE
11509: LD_VAR 0 2
11513: INC
11514: ST_TO_ADDR
11515: LD_INT 1
11517: PUSH
11518: FOR_DOWNTO
11519: IFFALSE 11665
// if GetLives ( tmp [ i ] ) < 250 then
11521: LD_VAR 0 2
11525: PUSH
11526: LD_VAR 0 1
11530: ARRAY
11531: PPUSH
11532: CALL_OW 256
11536: PUSH
11537: LD_INT 250
11539: LESS
11540: IFFALSE 11663
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
11542: LD_ADDR_EXP 19
11546: PUSH
11547: LD_EXP 19
11551: PUSH
11552: LD_INT 1
11554: PLUS
11555: ST_TO_ADDR
// DialogueOn ;
11556: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
11560: LD_VAR 0 2
11564: PUSH
11565: LD_VAR 0 1
11569: ARRAY
11570: PPUSH
11571: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
11575: LD_VAR 0 2
11579: PUSH
11580: LD_VAR 0 1
11584: ARRAY
11585: PPUSH
11586: LD_STRING D
11588: PUSH
11589: LD_VAR 0 3
11593: PUSH
11594: LD_VAR 0 1
11598: ARRAY
11599: STR
11600: PUSH
11601: LD_STRING -Stim-a-1
11603: STR
11604: PPUSH
11605: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
11609: LD_ADDR_VAR 0 2
11613: PUSH
11614: LD_VAR 0 2
11618: PPUSH
11619: LD_VAR 0 1
11623: PPUSH
11624: CALL_OW 3
11628: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
11629: LD_ADDR_VAR 0 3
11633: PUSH
11634: LD_VAR 0 3
11638: PPUSH
11639: LD_VAR 0 1
11643: PPUSH
11644: CALL_OW 3
11648: ST_TO_ADDR
// drugsTested := true ;
11649: LD_ADDR_EXP 6
11653: PUSH
11654: LD_INT 1
11656: ST_TO_ADDR
// DialogueOff ;
11657: CALL_OW 7
// break ;
11661: GO 11665
// end ;
11663: GO 11518
11665: POP
11666: POP
// until not tmp ;
11667: LD_VAR 0 2
11671: NOT
11672: IFFALSE 11496
// end ;
11674: PPOPN 3
11676: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
11677: LD_INT 22
11679: PUSH
11680: LD_INT 2
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 34
11689: PUSH
11690: LD_INT 31
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PPUSH
11701: CALL_OW 69
11705: PUSH
11706: LD_INT 22
11708: PUSH
11709: LD_INT 2
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: PUSH
11716: LD_INT 33
11718: PUSH
11719: LD_INT 2
11721: PUSH
11722: EMPTY
11723: LIST
11724: LIST
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PPUSH
11730: CALL_OW 69
11734: AND
11735: IFFALSE 11748
11737: GO 11739
11739: DISABLE
// remoteControlConstructed := true ;
11740: LD_ADDR_EXP 12
11744: PUSH
11745: LD_INT 1
11747: ST_TO_ADDR
11748: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
11749: LD_EXP 12
11753: IFFALSE 12053
11755: GO 11757
11757: DISABLE
11758: LD_INT 0
11760: PPUSH
11761: PPUSH
11762: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
11763: LD_ADDR_VAR 0 2
11767: PUSH
11768: LD_EXP 21
11772: PUSH
11773: LD_EXP 22
11777: PUSH
11778: LD_EXP 30
11782: PUSH
11783: LD_EXP 28
11787: PUSH
11788: LD_EXP 26
11792: PUSH
11793: LD_EXP 27
11797: PUSH
11798: LD_EXP 32
11802: PUSH
11803: LD_EXP 25
11807: PUSH
11808: LD_EXP 23
11812: PUSH
11813: LD_EXP 24
11817: PUSH
11818: LD_EXP 33
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
11836: LD_ADDR_VAR 0 3
11840: PUSH
11841: LD_STRING H
11843: PUSH
11844: LD_STRING G
11846: PUSH
11847: LD_STRING O
11849: PUSH
11850: LD_STRING Mar
11852: PUSH
11853: LD_STRING K
11855: PUSH
11856: LD_STRING S
11858: PUSH
11859: LD_STRING Ks
11861: PUSH
11862: LD_STRING Kam
11864: PUSH
11865: LD_STRING M
11867: PUSH
11868: LD_STRING I
11870: PUSH
11871: LD_STRING A
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11887: LD_INT 35
11889: PPUSH
11890: CALL_OW 67
// for i := tmp downto 1 do
11894: LD_ADDR_VAR 0 1
11898: PUSH
11899: DOUBLE
11900: LD_VAR 0 2
11904: INC
11905: ST_TO_ADDR
11906: LD_INT 1
11908: PUSH
11909: FOR_DOWNTO
11910: IFFALSE 12044
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
11912: LD_VAR 0 2
11916: PUSH
11917: LD_VAR 0 1
11921: ARRAY
11922: PPUSH
11923: CALL_OW 257
11927: PUSH
11928: LD_INT 3
11930: EQUAL
11931: PUSH
11932: LD_VAR 0 2
11936: PUSH
11937: LD_VAR 0 1
11941: ARRAY
11942: PPUSH
11943: CALL_OW 432
11947: AND
11948: IFFALSE 12042
// begin DialogueOn ;
11950: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
11954: LD_VAR 0 2
11958: PUSH
11959: LD_VAR 0 1
11963: ARRAY
11964: PPUSH
11965: LD_STRING D
11967: PUSH
11968: LD_VAR 0 3
11972: PUSH
11973: LD_VAR 0 1
11977: ARRAY
11978: STR
11979: PUSH
11980: LD_STRING -RC-a-1
11982: STR
11983: PPUSH
11984: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
11988: LD_ADDR_VAR 0 2
11992: PUSH
11993: LD_VAR 0 2
11997: PPUSH
11998: LD_VAR 0 1
12002: PPUSH
12003: CALL_OW 3
12007: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12008: LD_ADDR_VAR 0 3
12012: PUSH
12013: LD_VAR 0 3
12017: PPUSH
12018: LD_VAR 0 1
12022: PPUSH
12023: CALL_OW 3
12027: ST_TO_ADDR
// DialogueOff ;
12028: CALL_OW 7
// remoteControlTested := true ;
12032: LD_ADDR_EXP 7
12036: PUSH
12037: LD_INT 1
12039: ST_TO_ADDR
// break ;
12040: GO 12044
// end ;
12042: GO 11909
12044: POP
12045: POP
// until not tmp ;
12046: LD_VAR 0 2
12050: NOT
12051: IFFALSE 11887
// end ;
12053: PPOPN 3
12055: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
12056: LD_EXP 7
12060: PUSH
12061: LD_EXP 28
12065: PPUSH
12066: CALL_OW 302
12070: AND
12071: IFFALSE 12100
12073: GO 12075
12075: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
12076: LD_EXP 28
12080: PPUSH
12081: LD_STRING DMar-RC-a-2
12083: PPUSH
12084: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
12088: LD_EXP 28
12092: PPUSH
12093: LD_STRING DMar-RC-a-3
12095: PPUSH
12096: CALL_OW 88
// end ;
12100: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
12101: LD_EXP 14
12105: PUSH
12106: LD_EXP 21
12110: PPUSH
12111: LD_EXP 33
12115: PPUSH
12116: CALL_OW 296
12120: PUSH
12121: LD_INT 8
12123: LESS
12124: AND
12125: PUSH
12126: LD_INT 2
12128: PPUSH
12129: CALL_OW 463
12133: NOT
12134: AND
12135: PUSH
12136: LD_EXP 33
12140: PPUSH
12141: CALL_OW 302
12145: AND
12146: PUSH
12147: LD_EXP 21
12151: PPUSH
12152: CALL_OW 302
12156: AND
12157: IFFALSE 12335
12159: GO 12161
12161: DISABLE
// begin if not IsInUnit ( Aviradze ) then
12162: LD_EXP 33
12166: PPUSH
12167: CALL_OW 310
12171: NOT
12172: IFFALSE 12188
// ComTurnUnit ( Aviradze , Heike ) ;
12174: LD_EXP 33
12178: PPUSH
12179: LD_EXP 21
12183: PPUSH
12184: CALL_OW 119
// if not IsInUnit ( Heike ) then
12188: LD_EXP 21
12192: PPUSH
12193: CALL_OW 310
12197: NOT
12198: IFFALSE 12214
// ComTurnUnit ( Heike , Aviradze ) ;
12200: LD_EXP 21
12204: PPUSH
12205: LD_EXP 33
12209: PPUSH
12210: CALL_OW 119
// wait ( 0 0$1 ) ;
12214: LD_INT 35
12216: PPUSH
12217: CALL_OW 67
// DialogueOn ;
12221: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
12225: LD_EXP 33
12229: PPUSH
12230: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
12234: LD_EXP 21
12238: PPUSH
12239: LD_STRING DH-Beria-1
12241: PPUSH
12242: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
12246: LD_EXP 33
12250: PPUSH
12251: LD_STRING DA-Beria-2
12253: PPUSH
12254: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
12258: LD_EXP 21
12262: PPUSH
12263: LD_STRING DH-Beria-3
12265: PPUSH
12266: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
12270: LD_EXP 33
12274: PPUSH
12275: LD_STRING DA-Beria-4
12277: PPUSH
12278: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
12282: LD_EXP 33
12286: PPUSH
12287: LD_STRING DA-Beria-5
12289: PPUSH
12290: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
12294: LD_EXP 33
12298: PPUSH
12299: LD_STRING DA-Beria-6
12301: PPUSH
12302: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
12306: LD_EXP 21
12310: PPUSH
12311: LD_STRING DA-Beria-7
12313: PPUSH
12314: CALL_OW 88
// DialogueOff ;
12318: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
12322: LD_INT 52
12324: PPUSH
12325: LD_INT 2
12327: PPUSH
12328: LD_INT 1
12330: PPUSH
12331: CALL_OW 322
// end ;
12335: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
12336: LD_EXP 26
12340: PPUSH
12341: CALL_OW 300
12345: PUSH
12346: LD_EXP 26
12350: PPUSH
12351: CALL_OW 256
12355: PUSH
12356: LD_INT 10
12358: LESS
12359: AND
12360: IFFALSE 12397
12362: GO 12364
12364: DISABLE
// begin DialogueOn ;
12365: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
12369: LD_EXP 26
12373: PPUSH
12374: LD_STRING DK-Kdeath-1
12376: PPUSH
12377: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
12381: LD_EXP 21
12385: PPUSH
12386: LD_STRING DH-Kdeath-2
12388: PPUSH
12389: CALL_OW 88
// DialogueOff ;
12393: CALL_OW 7
// end ;
12397: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
12398: LD_INT 2
12400: PPUSH
12401: LD_EXP 39
12405: PPUSH
12406: CALL 1362 0 2
12410: IFFALSE 12427
12412: GO 12414
12414: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
12415: LD_EXP 21
12419: PPUSH
12420: LD_STRING DH-Obj-1
12422: PPUSH
12423: CALL_OW 88
12427: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
12428: LD_INT 2
12430: PPUSH
12431: LD_EXP 40
12435: PPUSH
12436: CALL 1362 0 2
12440: IFFALSE 12457
12442: GO 12444
12444: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
12445: LD_EXP 21
12449: PPUSH
12450: LD_STRING DH-Obj-a-1
12452: PPUSH
12453: CALL_OW 88
12457: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 7 7$00 , 6 6$30 , 6 6$00 ] [ Difficulty ] do
12458: LD_EXP 10
12462: PUSH
12463: LD_OWVAR 1
12467: PUSH
12468: LD_INT 14700
12470: PUSH
12471: LD_INT 13650
12473: PUSH
12474: LD_INT 12600
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: LIST
12481: PUSH
12482: LD_OWVAR 67
12486: ARRAY
12487: GREATEREQUAL
12488: OR
12489: IFFALSE 12517
12491: GO 12493
12493: DISABLE
// begin wait ( rand ( 2 2$00 , 2 2$30 ) ) ;
12494: LD_INT 4200
12496: PPUSH
12497: LD_INT 5250
12499: PPUSH
12500: CALL_OW 12
12504: PPUSH
12505: CALL_OW 67
// convoyStarted := true ;
12509: LD_ADDR_EXP 17
12513: PUSH
12514: LD_INT 1
12516: ST_TO_ADDR
// end ;
12517: END
// every 0 0$1 trigger convoyStarted do
12518: LD_EXP 17
12522: IFFALSE 12606
12524: GO 12526
12526: DISABLE
// begin DialogueOn ;
12527: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
12531: LD_EXP 29
12535: PPUSH
12536: LD_STRING DShar-Convoy-1
12538: PPUSH
12539: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
12543: LD_EXP 21
12547: PPUSH
12548: LD_STRING DH-Convoy-2
12550: PPUSH
12551: CALL_OW 88
// DialogueOff ;
12555: CALL_OW 7
// PrepareConvoy ;
12559: CALL 4541 0 0
// repeat wait ( rand ( 5 5$30 , 8 8$30 ) ) ;
12563: LD_INT 11550
12565: PPUSH
12566: LD_INT 17850
12568: PPUSH
12569: CALL_OW 12
12573: PPUSH
12574: CALL_OW 67
// PrepareConvoy ;
12578: CALL 4541 0 0
// convoyCounter := convoyCounter - 1 ;
12582: LD_ADDR_EXP 16
12586: PUSH
12587: LD_EXP 16
12591: PUSH
12592: LD_INT 1
12594: MINUS
12595: ST_TO_ADDR
// until convoyCounter <= 0 ;
12596: LD_EXP 16
12600: PUSH
12601: LD_INT 0
12603: LESSEQUAL
12604: IFFALSE 12563
// end ;
12606: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
12607: LD_EXP 15
12611: PUSH
12612: LD_INT 10
12614: GREATEREQUAL
12615: IFFALSE 12632
12617: GO 12619
12619: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
12620: LD_EXP 31
12624: PPUSH
12625: LD_STRING DOm-Fail-1
12627: PPUSH
12628: CALL_OW 94
12632: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
12633: LD_EXP 39
12637: NOT
12638: PUSH
12639: LD_EXP 40
12643: NOT
12644: AND
12645: IFFALSE 12657
12647: GO 12649
12649: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
12650: LD_STRING RaiderDone
12652: PPUSH
12653: CALL_OW 337
12657: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
12658: LD_INT 22
12660: PUSH
12661: LD_INT 2
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: PUSH
12668: LD_INT 33
12670: PUSH
12671: LD_INT 2
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: PPUSH
12682: CALL_OW 69
12686: PUSH
12687: LD_INT 3
12689: GREATEREQUAL
12690: PUSH
12691: LD_INT 22
12693: PUSH
12694: LD_INT 2
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: PUSH
12701: LD_INT 34
12703: PUSH
12704: LD_INT 31
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: PPUSH
12715: CALL_OW 69
12719: PUSH
12720: LD_INT 2
12722: GREATEREQUAL
12723: AND
12724: IFFALSE 12736
12726: GO 12728
12728: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
12729: LD_STRING RemoteControlDone
12731: PPUSH
12732: CALL_OW 337
12736: END
// every 0 0$1 trigger convoyCounter = 0 and not ruConvoySquad do var tmp ;
12737: LD_EXP 16
12741: PUSH
12742: LD_INT 0
12744: EQUAL
12745: PUSH
12746: LD_EXP 41
12750: NOT
12751: AND
12752: IFFALSE 13569
12754: GO 12756
12756: DISABLE
12757: LD_INT 0
12759: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
12760: LD_STRING ReinforcementsDone
12762: PPUSH
12763: CALL_OW 337
// music_class := music_victory ;
12767: LD_ADDR_OWVAR 72
12771: PUSH
12772: LD_INT 4
12774: ST_TO_ADDR
// InGameOn ;
12775: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
12779: LD_EXP 21
12783: PPUSH
12784: LD_STRING DH-end-1
12786: PPUSH
12787: CALL_OW 88
// wait ( 0 0$2 ) ;
12791: LD_INT 70
12793: PPUSH
12794: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
12798: LD_EXP 29
12802: PPUSH
12803: LD_STRING DShar-end-2
12805: PPUSH
12806: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
12810: LD_EXP 39
12814: NOT
12815: PUSH
12816: LD_EXP 40
12820: NOT
12821: AND
12822: IFFALSE 12838
// begin Say ( Heike , DH-end-3 ) ;
12824: LD_EXP 21
12828: PPUSH
12829: LD_STRING DH-end-3
12831: PPUSH
12832: CALL_OW 88
// end else
12836: GO 12935
// begin Say ( Heike , DH-end-a-3 ) ;
12838: LD_EXP 21
12842: PPUSH
12843: LD_STRING DH-end-a-3
12845: PPUSH
12846: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
12850: LD_EXP 29
12854: PPUSH
12855: LD_STRING DShar-end-a-4
12857: PPUSH
12858: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
12862: LD_EXP 21
12866: PPUSH
12867: LD_STRING DH-end-a-5
12869: PPUSH
12870: CALL_OW 88
// InGameOff ;
12874: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
12878: LD_INT 35
12880: PPUSH
12881: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
12885: LD_INT 22
12887: PUSH
12888: LD_INT 3
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PUSH
12895: LD_INT 21
12897: PUSH
12898: LD_INT 1
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: PPUSH
12909: CALL_OW 69
12913: PUSH
12914: LD_INT 0
12916: EQUAL
12917: IFFALSE 12878
// InGameOn ;
12919: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
12923: LD_EXP 21
12927: PPUSH
12928: LD_STRING DH-end-a-6
12930: PPUSH
12931: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
12935: LD_EXP 29
12939: PPUSH
12940: LD_STRING DShar-end-3
12942: PPUSH
12943: CALL_OW 94
// if not flamethrowerBuilt then
12947: LD_EXP 20
12951: NOT
12952: IFFALSE 12961
// SetAchievement ( ACH_FIRE ) ;
12954: LD_STRING ACH_FIRE
12956: PPUSH
12957: CALL_OW 543
// if drugsTested then
12961: LD_EXP 6
12965: IFFALSE 12979
// AddMedal ( med1 , 1 ) else
12967: LD_STRING med1
12969: PPUSH
12970: LD_INT 1
12972: PPUSH
12973: CALL_OW 101
12977: GO 13019
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
12979: LD_INT 5
12981: PPUSH
12982: LD_INT 2
12984: PPUSH
12985: CALL_OW 321
12989: PUSH
12990: LD_INT 2
12992: EQUAL
12993: IFFALSE 13008
// AddMedal ( med1 , - 1 ) else
12995: LD_STRING med1
12997: PPUSH
12998: LD_INT 1
13000: NEG
13001: PPUSH
13002: CALL_OW 101
13006: GO 13019
// AddMedal ( med1 , - 2 ) ;
13008: LD_STRING med1
13010: PPUSH
13011: LD_INT 2
13013: NEG
13014: PPUSH
13015: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 then
13019: LD_INT 22
13021: PUSH
13022: LD_INT 2
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: PUSH
13029: LD_INT 33
13031: PUSH
13032: LD_INT 2
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: PPUSH
13043: CALL_OW 69
13047: PUSH
13048: LD_INT 3
13050: GREATEREQUAL
13051: PUSH
13052: LD_INT 22
13054: PUSH
13055: LD_INT 2
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: PUSH
13062: LD_INT 34
13064: PUSH
13065: LD_INT 31
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: PPUSH
13076: CALL_OW 69
13080: PUSH
13081: LD_INT 2
13083: GREATEREQUAL
13084: AND
13085: IFFALSE 13099
// AddMedal ( med2 , 1 ) else
13087: LD_STRING med2
13089: PPUSH
13090: LD_INT 1
13092: PPUSH
13093: CALL_OW 101
13097: GO 13110
// AddMedal ( med2 , - 1 ) ;
13099: LD_STRING med2
13101: PPUSH
13102: LD_INT 1
13104: NEG
13105: PPUSH
13106: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 ] [ Difficulty ] then
13110: LD_EXP 15
13114: PUSH
13115: LD_INT 10
13117: PUSH
13118: LD_INT 8
13120: PUSH
13121: LD_INT 6
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: LIST
13128: PUSH
13129: LD_OWVAR 67
13133: ARRAY
13134: LESS
13135: IFFALSE 13149
// AddMedal ( med3 , 1 ) else
13137: LD_STRING med3
13139: PPUSH
13140: LD_INT 1
13142: PPUSH
13143: CALL_OW 101
13147: GO 13160
// AddMedal ( med3 , - 1 ) ;
13149: LD_STRING med3
13151: PPUSH
13152: LD_INT 1
13154: NEG
13155: PPUSH
13156: CALL_OW 101
// GiveMedals ( MAIN ) ;
13160: LD_STRING MAIN
13162: PPUSH
13163: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13167: LD_INT 22
13169: PUSH
13170: LD_INT 2
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: PUSH
13177: LD_INT 23
13179: PUSH
13180: LD_INT 2
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PUSH
13187: LD_INT 21
13189: PUSH
13190: LD_INT 1
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: LIST
13201: PPUSH
13202: CALL_OW 69
13206: PPUSH
13207: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
13211: LD_EXP 15
13215: PPUSH
13216: LD_STRING 05_ConvoySavedCounter
13218: PPUSH
13219: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
13223: LD_EXP 13
13227: PPUSH
13228: LD_STRING 05_Radar
13230: PPUSH
13231: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
13235: LD_EXP 6
13239: PPUSH
13240: LD_STRING 05_DrugsTested
13242: PPUSH
13243: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
13247: LD_INT 22
13249: PUSH
13250: LD_INT 2
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: PUSH
13257: LD_INT 33
13259: PUSH
13260: LD_INT 2
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: PPUSH
13271: CALL_OW 69
13275: PUSH
13276: LD_INT 3
13278: GREATEREQUAL
13279: PUSH
13280: LD_INT 22
13282: PUSH
13283: LD_INT 2
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: PUSH
13290: LD_INT 34
13292: PUSH
13293: LD_INT 31
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: PPUSH
13304: CALL_OW 69
13308: PUSH
13309: LD_INT 2
13311: GREATEREQUAL
13312: AND
13313: PPUSH
13314: LD_STRING 05_RemoteControl
13316: PPUSH
13317: CALL_OW 39
// SaveCharacters ( Heike , 05_Heike ) ;
13321: LD_EXP 21
13325: PPUSH
13326: LD_STRING 05_Heike
13328: PPUSH
13329: CALL_OW 38
// if Aviradze then
13333: LD_EXP 33
13337: IFFALSE 13351
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
13339: LD_EXP 33
13343: PPUSH
13344: LD_STRING 05_Aviradze
13346: PPUSH
13347: CALL_OW 38
// if Ibrahim then
13351: LD_EXP 24
13355: IFFALSE 13369
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
13357: LD_EXP 24
13361: PPUSH
13362: LD_STRING 05_Ibrahim
13364: PPUSH
13365: CALL_OW 38
// if Kamil then
13369: LD_EXP 25
13373: IFFALSE 13387
// SaveCharacters ( Kamil , 05_Kamil ) ;
13375: LD_EXP 25
13379: PPUSH
13380: LD_STRING 05_Kamil
13382: PPUSH
13383: CALL_OW 38
// if Sophia then
13387: LD_EXP 27
13391: IFFALSE 13405
// SaveCharacters ( Sophia , 05_Sophia ) ;
13393: LD_EXP 27
13397: PPUSH
13398: LD_STRING 05_Sophia
13400: PPUSH
13401: CALL_OW 38
// if Kaia then
13405: LD_EXP 26
13409: IFFALSE 13423
// SaveCharacters ( Kaia , 05_Kaia ) ;
13411: LD_EXP 26
13415: PPUSH
13416: LD_STRING 05_Kaia
13418: PPUSH
13419: CALL_OW 38
// if Givi then
13423: LD_EXP 22
13427: IFFALSE 13441
// SaveCharacters ( Givi , 05_Givi ) ;
13429: LD_EXP 22
13433: PPUSH
13434: LD_STRING 05_Givi
13436: PPUSH
13437: CALL_OW 38
// if Mike then
13441: LD_EXP 23
13445: IFFALSE 13459
// SaveCharacters ( Mike , 05_Mike ) ;
13447: LD_EXP 23
13451: PPUSH
13452: LD_STRING 05_Mike
13454: PPUSH
13455: CALL_OW 38
// if Markov then
13459: LD_EXP 28
13463: IFFALSE 13477
// SaveCharacters ( Markov , 05_Markov ) ;
13465: LD_EXP 28
13469: PPUSH
13470: LD_STRING 05_Markov
13472: PPUSH
13473: CALL_OW 38
// if Kurt then
13477: LD_EXP 32
13481: IFFALSE 13495
// SaveCharacters ( Kurt , 05_Kurt ) ;
13483: LD_EXP 32
13487: PPUSH
13488: LD_STRING 05_Kurt
13490: PPUSH
13491: CALL_OW 38
// if heikeSecondSquad then
13495: LD_EXP 34
13499: IFFALSE 13513
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
13501: LD_EXP 34
13505: PPUSH
13506: LD_STRING 05_others
13508: PPUSH
13509: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
13513: LD_ADDR_VAR 0 1
13517: PUSH
13518: LD_INT 22
13520: PUSH
13521: LD_INT 2
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PUSH
13528: LD_INT 23
13530: PUSH
13531: LD_INT 0
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: PPUSH
13542: CALL_OW 69
13546: ST_TO_ADDR
// if tmp then
13547: LD_VAR 0 1
13551: IFFALSE 13565
// SaveCharacters ( tmp , 05_apes ) ;
13553: LD_VAR 0 1
13557: PPUSH
13558: LD_STRING 05_apes
13560: PPUSH
13561: CALL_OW 38
// YouWin ;
13565: CALL_OW 103
// end ; end_of_file
13569: PPOPN 1
13571: END
// every 0 0$40 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
13572: LD_EXP 9
13576: PUSH
13577: LD_INT 13
13579: PPUSH
13580: LD_INT 1
13582: PPUSH
13583: CALL_OW 287
13587: PUSH
13588: LD_INT 25
13590: LESS
13591: AND
13592: IFFALSE 13619
13594: GO 13596
13596: DISABLE
// begin enable ;
13597: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
13598: LD_INT 1
13600: PPUSH
13601: LD_INT 5
13603: PPUSH
13604: CALL_OW 12
13608: PPUSH
13609: LD_INT 13
13611: PPUSH
13612: LD_INT 1
13614: PPUSH
13615: CALL_OW 55
// end ; end_of_file
13619: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
13620: LD_INT 0
13622: PPUSH
// ar_crane := 88 ;
13623: LD_ADDR_EXP 50
13627: PUSH
13628: LD_INT 88
13630: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
13631: LD_ADDR_EXP 45
13635: PUSH
13636: LD_INT 89
13638: ST_TO_ADDR
// us_hack := 99 ;
13639: LD_ADDR_EXP 46
13643: PUSH
13644: LD_INT 99
13646: ST_TO_ADDR
// us_artillery := 97 ;
13647: LD_ADDR_EXP 47
13651: PUSH
13652: LD_INT 97
13654: ST_TO_ADDR
// ar_bio_bomb := 91 ;
13655: LD_ADDR_EXP 48
13659: PUSH
13660: LD_INT 91
13662: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
13663: LD_ADDR_EXP 49
13667: PUSH
13668: LD_INT 92
13670: ST_TO_ADDR
// ru_radar := 98 ;
13671: LD_ADDR_EXP 44
13675: PUSH
13676: LD_INT 98
13678: ST_TO_ADDR
// tech_Artillery := 80 ;
13679: LD_ADDR_EXP 51
13683: PUSH
13684: LD_INT 80
13686: ST_TO_ADDR
// tech_RadMat := 81 ;
13687: LD_ADDR_EXP 52
13691: PUSH
13692: LD_INT 81
13694: ST_TO_ADDR
// tech_BasicTools := 82 ;
13695: LD_ADDR_EXP 53
13699: PUSH
13700: LD_INT 82
13702: ST_TO_ADDR
// tech_Cargo := 83 ;
13703: LD_ADDR_EXP 54
13707: PUSH
13708: LD_INT 83
13710: ST_TO_ADDR
// tech_Track := 84 ;
13711: LD_ADDR_EXP 55
13715: PUSH
13716: LD_INT 84
13718: ST_TO_ADDR
// tech_Crane := 85 ;
13719: LD_ADDR_EXP 56
13723: PUSH
13724: LD_INT 85
13726: ST_TO_ADDR
// tech_Bulldozer := 86 ;
13727: LD_ADDR_EXP 57
13731: PUSH
13732: LD_INT 86
13734: ST_TO_ADDR
// tech_Hovercraft := 87 ;
13735: LD_ADDR_EXP 58
13739: PUSH
13740: LD_INT 87
13742: ST_TO_ADDR
// end ;
13743: LD_VAR 0 1
13747: RET
// every 1 do
13748: GO 13750
13750: DISABLE
// InitGlobalVariables ; end_of_file
13751: CALL 13620 0 0
13755: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
13756: LD_INT 0
13758: PPUSH
13759: PPUSH
13760: PPUSH
13761: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
13762: LD_VAR 0 1
13766: PPUSH
13767: CALL_OW 264
13771: PUSH
13772: LD_EXP 48
13776: EQUAL
13777: IFFALSE 13849
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
13779: LD_INT 68
13781: PPUSH
13782: LD_VAR 0 1
13786: PPUSH
13787: CALL_OW 255
13791: PPUSH
13792: CALL_OW 321
13796: PUSH
13797: LD_INT 2
13799: EQUAL
13800: IFFALSE 13812
// eff := 70 else
13802: LD_ADDR_VAR 0 4
13806: PUSH
13807: LD_INT 70
13809: ST_TO_ADDR
13810: GO 13820
// eff := 30 ;
13812: LD_ADDR_VAR 0 4
13816: PUSH
13817: LD_INT 30
13819: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
13820: LD_VAR 0 1
13824: PPUSH
13825: CALL_OW 250
13829: PPUSH
13830: LD_VAR 0 1
13834: PPUSH
13835: CALL_OW 251
13839: PPUSH
13840: LD_VAR 0 4
13844: PPUSH
13845: CALL_OW 495
// end ; end ;
13849: LD_VAR 0 2
13853: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
13854: LD_INT 0
13856: PPUSH
// end ;
13857: LD_VAR 0 4
13861: RET
// export function SOS_Command ( cmd ) ; begin
13862: LD_INT 0
13864: PPUSH
// end ;
13865: LD_VAR 0 2
13869: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
13870: LD_INT 0
13872: PPUSH
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
13873: LD_VAR 0 1
13877: PUSH
13878: LD_INT 254
13880: EQUAL
13881: PUSH
13882: LD_VAR 0 2
13886: PPUSH
13887: CALL_OW 264
13891: PUSH
13892: LD_EXP 46
13896: EQUAL
13897: AND
13898: PUSH
13899: LD_VAR 0 3
13903: PPUSH
13904: CALL_OW 263
13908: PUSH
13909: LD_INT 3
13911: EQUAL
13912: AND
13913: IFFALSE 13929
// HackDestroyVehicle ( unit , selectedUnit ) ;
13915: LD_VAR 0 2
13919: PPUSH
13920: LD_VAR 0 3
13924: PPUSH
13925: CALL 15438 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
13929: LD_VAR 0 1
13933: PUSH
13934: LD_INT 255
13936: EQUAL
13937: PUSH
13938: LD_VAR 0 2
13942: PPUSH
13943: CALL_OW 264
13947: PUSH
13948: LD_INT 14
13950: PUSH
13951: LD_INT 53
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: IN
13958: AND
13959: PUSH
13960: LD_VAR 0 4
13964: PPUSH
13965: LD_VAR 0 5
13969: PPUSH
13970: CALL_OW 488
13974: AND
13975: IFFALSE 13999
// CutTreeXYR ( unit , x , y , 12 ) ;
13977: LD_VAR 0 2
13981: PPUSH
13982: LD_VAR 0 4
13986: PPUSH
13987: LD_VAR 0 5
13991: PPUSH
13992: LD_INT 12
13994: PPUSH
13995: CALL 14004 0 4
// end ;
13999: LD_VAR 0 6
14003: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
14004: LD_INT 0
14006: PPUSH
14007: PPUSH
14008: PPUSH
14009: PPUSH
14010: PPUSH
14011: PPUSH
14012: PPUSH
14013: PPUSH
14014: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
14015: LD_VAR 0 1
14019: NOT
14020: PUSH
14021: LD_VAR 0 2
14025: PPUSH
14026: LD_VAR 0 3
14030: PPUSH
14031: CALL_OW 488
14035: NOT
14036: OR
14037: PUSH
14038: LD_VAR 0 4
14042: NOT
14043: OR
14044: IFFALSE 14048
// exit ;
14046: GO 14388
// list := [ ] ;
14048: LD_ADDR_VAR 0 13
14052: PUSH
14053: EMPTY
14054: ST_TO_ADDR
// if x - r < 0 then
14055: LD_VAR 0 2
14059: PUSH
14060: LD_VAR 0 4
14064: MINUS
14065: PUSH
14066: LD_INT 0
14068: LESS
14069: IFFALSE 14081
// min_x := 0 else
14071: LD_ADDR_VAR 0 7
14075: PUSH
14076: LD_INT 0
14078: ST_TO_ADDR
14079: GO 14097
// min_x := x - r ;
14081: LD_ADDR_VAR 0 7
14085: PUSH
14086: LD_VAR 0 2
14090: PUSH
14091: LD_VAR 0 4
14095: MINUS
14096: ST_TO_ADDR
// if y - r < 0 then
14097: LD_VAR 0 3
14101: PUSH
14102: LD_VAR 0 4
14106: MINUS
14107: PUSH
14108: LD_INT 0
14110: LESS
14111: IFFALSE 14123
// min_y := 0 else
14113: LD_ADDR_VAR 0 8
14117: PUSH
14118: LD_INT 0
14120: ST_TO_ADDR
14121: GO 14139
// min_y := y - r ;
14123: LD_ADDR_VAR 0 8
14127: PUSH
14128: LD_VAR 0 3
14132: PUSH
14133: LD_VAR 0 4
14137: MINUS
14138: ST_TO_ADDR
// max_x := x + r ;
14139: LD_ADDR_VAR 0 9
14143: PUSH
14144: LD_VAR 0 2
14148: PUSH
14149: LD_VAR 0 4
14153: PLUS
14154: ST_TO_ADDR
// max_y := y + r ;
14155: LD_ADDR_VAR 0 10
14159: PUSH
14160: LD_VAR 0 3
14164: PUSH
14165: LD_VAR 0 4
14169: PLUS
14170: ST_TO_ADDR
// for _x = min_x to max_x do
14171: LD_ADDR_VAR 0 11
14175: PUSH
14176: DOUBLE
14177: LD_VAR 0 7
14181: DEC
14182: ST_TO_ADDR
14183: LD_VAR 0 9
14187: PUSH
14188: FOR_TO
14189: IFFALSE 14306
// for _y = min_y to max_y do
14191: LD_ADDR_VAR 0 12
14195: PUSH
14196: DOUBLE
14197: LD_VAR 0 8
14201: DEC
14202: ST_TO_ADDR
14203: LD_VAR 0 10
14207: PUSH
14208: FOR_TO
14209: IFFALSE 14302
// begin if not ValidHex ( _x , _y ) then
14211: LD_VAR 0 11
14215: PPUSH
14216: LD_VAR 0 12
14220: PPUSH
14221: CALL_OW 488
14225: NOT
14226: IFFALSE 14230
// continue ;
14228: GO 14208
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
14230: LD_VAR 0 11
14234: PPUSH
14235: LD_VAR 0 12
14239: PPUSH
14240: CALL_OW 351
14244: PUSH
14245: LD_VAR 0 11
14249: PPUSH
14250: LD_VAR 0 12
14254: PPUSH
14255: CALL_OW 554
14259: AND
14260: IFFALSE 14300
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
14262: LD_ADDR_VAR 0 13
14266: PUSH
14267: LD_VAR 0 13
14271: PPUSH
14272: LD_VAR 0 13
14276: PUSH
14277: LD_INT 1
14279: PLUS
14280: PPUSH
14281: LD_VAR 0 11
14285: PUSH
14286: LD_VAR 0 12
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PPUSH
14295: CALL_OW 2
14299: ST_TO_ADDR
// end ;
14300: GO 14208
14302: POP
14303: POP
14304: GO 14188
14306: POP
14307: POP
// if not list then
14308: LD_VAR 0 13
14312: NOT
14313: IFFALSE 14317
// exit ;
14315: GO 14388
// for i in list do
14317: LD_ADDR_VAR 0 6
14321: PUSH
14322: LD_VAR 0 13
14326: PUSH
14327: FOR_IN
14328: IFFALSE 14386
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
14330: LD_VAR 0 1
14334: PPUSH
14335: LD_STRING M
14337: PUSH
14338: LD_VAR 0 6
14342: PUSH
14343: LD_INT 1
14345: ARRAY
14346: PUSH
14347: LD_VAR 0 6
14351: PUSH
14352: LD_INT 2
14354: ARRAY
14355: PUSH
14356: LD_INT 0
14358: PUSH
14359: LD_INT 0
14361: PUSH
14362: LD_INT 0
14364: PUSH
14365: LD_INT 0
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: PUSH
14377: EMPTY
14378: LIST
14379: PPUSH
14380: CALL_OW 447
14384: GO 14327
14386: POP
14387: POP
// end ;
14388: LD_VAR 0 5
14392: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
14393: LD_EXP 59
14397: NOT
14398: IFFALSE 14448
14400: GO 14402
14402: DISABLE
// begin initHack := true ;
14403: LD_ADDR_EXP 59
14407: PUSH
14408: LD_INT 1
14410: ST_TO_ADDR
// hackTanks := [ ] ;
14411: LD_ADDR_EXP 60
14415: PUSH
14416: EMPTY
14417: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
14418: LD_ADDR_EXP 61
14422: PUSH
14423: EMPTY
14424: ST_TO_ADDR
// hackLimit := 3 ;
14425: LD_ADDR_EXP 62
14429: PUSH
14430: LD_INT 3
14432: ST_TO_ADDR
// hackDist := 12 ;
14433: LD_ADDR_EXP 63
14437: PUSH
14438: LD_INT 12
14440: ST_TO_ADDR
// hackCounter := [ ] ;
14441: LD_ADDR_EXP 64
14445: PUSH
14446: EMPTY
14447: ST_TO_ADDR
// end ;
14448: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
14449: LD_EXP 59
14453: PUSH
14454: LD_INT 34
14456: PUSH
14457: LD_EXP 46
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: PPUSH
14466: CALL_OW 69
14470: AND
14471: IFFALSE 14726
14473: GO 14475
14475: DISABLE
14476: LD_INT 0
14478: PPUSH
14479: PPUSH
// begin enable ;
14480: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
14481: LD_ADDR_VAR 0 1
14485: PUSH
14486: LD_INT 34
14488: PUSH
14489: LD_EXP 46
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PPUSH
14498: CALL_OW 69
14502: PUSH
14503: FOR_IN
14504: IFFALSE 14724
// begin if not i in hackTanks then
14506: LD_VAR 0 1
14510: PUSH
14511: LD_EXP 60
14515: IN
14516: NOT
14517: IFFALSE 14600
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
14519: LD_ADDR_EXP 60
14523: PUSH
14524: LD_EXP 60
14528: PPUSH
14529: LD_EXP 60
14533: PUSH
14534: LD_INT 1
14536: PLUS
14537: PPUSH
14538: LD_VAR 0 1
14542: PPUSH
14543: CALL_OW 1
14547: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
14548: LD_ADDR_EXP 61
14552: PUSH
14553: LD_EXP 61
14557: PPUSH
14558: LD_EXP 61
14562: PUSH
14563: LD_INT 1
14565: PLUS
14566: PPUSH
14567: EMPTY
14568: PPUSH
14569: CALL_OW 1
14573: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
14574: LD_ADDR_EXP 64
14578: PUSH
14579: LD_EXP 64
14583: PPUSH
14584: LD_EXP 64
14588: PUSH
14589: LD_INT 1
14591: PLUS
14592: PPUSH
14593: EMPTY
14594: PPUSH
14595: CALL_OW 1
14599: ST_TO_ADDR
// end ; if not IsOk ( i ) then
14600: LD_VAR 0 1
14604: PPUSH
14605: CALL_OW 302
14609: NOT
14610: IFFALSE 14623
// begin HackUnlinkAll ( i ) ;
14612: LD_VAR 0 1
14616: PPUSH
14617: CALL 14729 0 1
// continue ;
14621: GO 14503
// end ; HackCheckCapturedStatus ( i ) ;
14623: LD_VAR 0 1
14627: PPUSH
14628: CALL 15172 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
14632: LD_ADDR_VAR 0 2
14636: PUSH
14637: LD_INT 81
14639: PUSH
14640: LD_VAR 0 1
14644: PPUSH
14645: CALL_OW 255
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PUSH
14654: LD_INT 33
14656: PUSH
14657: LD_INT 3
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: PUSH
14664: LD_INT 91
14666: PUSH
14667: LD_VAR 0 1
14671: PUSH
14672: LD_EXP 63
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: LIST
14681: PUSH
14682: LD_INT 50
14684: PUSH
14685: EMPTY
14686: LIST
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: PPUSH
14694: CALL_OW 69
14698: ST_TO_ADDR
// if not tmp then
14699: LD_VAR 0 2
14703: NOT
14704: IFFALSE 14708
// continue ;
14706: GO 14503
// HackLink ( i , tmp ) ;
14708: LD_VAR 0 1
14712: PPUSH
14713: LD_VAR 0 2
14717: PPUSH
14718: CALL 14865 0 2
// end ;
14722: GO 14503
14724: POP
14725: POP
// end ;
14726: PPOPN 2
14728: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
14729: LD_INT 0
14731: PPUSH
14732: PPUSH
14733: PPUSH
// if not hack in hackTanks then
14734: LD_VAR 0 1
14738: PUSH
14739: LD_EXP 60
14743: IN
14744: NOT
14745: IFFALSE 14749
// exit ;
14747: GO 14860
// index := GetElementIndex ( hackTanks , hack ) ;
14749: LD_ADDR_VAR 0 4
14753: PUSH
14754: LD_EXP 60
14758: PPUSH
14759: LD_VAR 0 1
14763: PPUSH
14764: CALL 32970 0 2
14768: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
14769: LD_EXP 61
14773: PUSH
14774: LD_VAR 0 4
14778: ARRAY
14779: IFFALSE 14860
// begin for i in hackTanksCaptured [ index ] do
14781: LD_ADDR_VAR 0 3
14785: PUSH
14786: LD_EXP 61
14790: PUSH
14791: LD_VAR 0 4
14795: ARRAY
14796: PUSH
14797: FOR_IN
14798: IFFALSE 14824
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
14800: LD_VAR 0 3
14804: PUSH
14805: LD_INT 1
14807: ARRAY
14808: PPUSH
14809: LD_VAR 0 3
14813: PUSH
14814: LD_INT 2
14816: ARRAY
14817: PPUSH
14818: CALL_OW 235
14822: GO 14797
14824: POP
14825: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
14826: LD_ADDR_EXP 61
14830: PUSH
14831: LD_EXP 61
14835: PPUSH
14836: LD_VAR 0 4
14840: PPUSH
14841: EMPTY
14842: PPUSH
14843: CALL_OW 1
14847: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
14848: LD_VAR 0 1
14852: PPUSH
14853: LD_INT 0
14855: PPUSH
14856: CALL_OW 505
// end ; end ;
14860: LD_VAR 0 2
14864: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
14865: LD_INT 0
14867: PPUSH
14868: PPUSH
14869: PPUSH
// if not hack in hackTanks or not vehicles then
14870: LD_VAR 0 1
14874: PUSH
14875: LD_EXP 60
14879: IN
14880: NOT
14881: PUSH
14882: LD_VAR 0 2
14886: NOT
14887: OR
14888: IFFALSE 14892
// exit ;
14890: GO 15167
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
14892: LD_ADDR_VAR 0 2
14896: PUSH
14897: LD_VAR 0 1
14901: PPUSH
14902: LD_VAR 0 2
14906: PPUSH
14907: LD_INT 1
14909: PPUSH
14910: LD_INT 1
14912: PPUSH
14913: CALL 33620 0 4
14917: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
14918: LD_ADDR_VAR 0 5
14922: PUSH
14923: LD_EXP 60
14927: PPUSH
14928: LD_VAR 0 1
14932: PPUSH
14933: CALL 32970 0 2
14937: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
14938: LD_EXP 61
14942: PUSH
14943: LD_VAR 0 5
14947: ARRAY
14948: PUSH
14949: LD_EXP 62
14953: LESS
14954: IFFALSE 15143
// begin for i := 1 to vehicles do
14956: LD_ADDR_VAR 0 4
14960: PUSH
14961: DOUBLE
14962: LD_INT 1
14964: DEC
14965: ST_TO_ADDR
14966: LD_VAR 0 2
14970: PUSH
14971: FOR_TO
14972: IFFALSE 15141
// begin if hackTanksCaptured [ index ] = hackLimit then
14974: LD_EXP 61
14978: PUSH
14979: LD_VAR 0 5
14983: ARRAY
14984: PUSH
14985: LD_EXP 62
14989: EQUAL
14990: IFFALSE 14994
// break ;
14992: GO 15141
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
14994: LD_ADDR_EXP 64
14998: PUSH
14999: LD_EXP 64
15003: PPUSH
15004: LD_VAR 0 5
15008: PPUSH
15009: LD_EXP 64
15013: PUSH
15014: LD_VAR 0 5
15018: ARRAY
15019: PUSH
15020: LD_INT 1
15022: PLUS
15023: PPUSH
15024: CALL_OW 1
15028: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
15029: LD_ADDR_EXP 61
15033: PUSH
15034: LD_EXP 61
15038: PPUSH
15039: LD_VAR 0 5
15043: PUSH
15044: LD_EXP 61
15048: PUSH
15049: LD_VAR 0 5
15053: ARRAY
15054: PUSH
15055: LD_INT 1
15057: PLUS
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PPUSH
15063: LD_VAR 0 2
15067: PUSH
15068: LD_VAR 0 4
15072: ARRAY
15073: PUSH
15074: LD_VAR 0 2
15078: PUSH
15079: LD_VAR 0 4
15083: ARRAY
15084: PPUSH
15085: CALL_OW 255
15089: PUSH
15090: EMPTY
15091: LIST
15092: LIST
15093: PPUSH
15094: CALL 33185 0 3
15098: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
15099: LD_VAR 0 2
15103: PUSH
15104: LD_VAR 0 4
15108: ARRAY
15109: PPUSH
15110: LD_VAR 0 1
15114: PPUSH
15115: CALL_OW 255
15119: PPUSH
15120: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
15124: LD_VAR 0 2
15128: PUSH
15129: LD_VAR 0 4
15133: ARRAY
15134: PPUSH
15135: CALL_OW 141
// end ;
15139: GO 14971
15141: POP
15142: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
15143: LD_VAR 0 1
15147: PPUSH
15148: LD_EXP 61
15152: PUSH
15153: LD_VAR 0 5
15157: ARRAY
15158: PUSH
15159: LD_INT 0
15161: PLUS
15162: PPUSH
15163: CALL_OW 505
// end ;
15167: LD_VAR 0 3
15171: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
15172: LD_INT 0
15174: PPUSH
15175: PPUSH
15176: PPUSH
15177: PPUSH
// if not hack in hackTanks then
15178: LD_VAR 0 1
15182: PUSH
15183: LD_EXP 60
15187: IN
15188: NOT
15189: IFFALSE 15193
// exit ;
15191: GO 15433
// index := GetElementIndex ( hackTanks , hack ) ;
15193: LD_ADDR_VAR 0 4
15197: PUSH
15198: LD_EXP 60
15202: PPUSH
15203: LD_VAR 0 1
15207: PPUSH
15208: CALL 32970 0 2
15212: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
15213: LD_ADDR_VAR 0 3
15217: PUSH
15218: DOUBLE
15219: LD_EXP 61
15223: PUSH
15224: LD_VAR 0 4
15228: ARRAY
15229: INC
15230: ST_TO_ADDR
15231: LD_INT 1
15233: PUSH
15234: FOR_DOWNTO
15235: IFFALSE 15407
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
15237: LD_ADDR_VAR 0 5
15241: PUSH
15242: LD_EXP 61
15246: PUSH
15247: LD_VAR 0 4
15251: ARRAY
15252: PUSH
15253: LD_VAR 0 3
15257: ARRAY
15258: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
15259: LD_VAR 0 5
15263: PUSH
15264: LD_INT 1
15266: ARRAY
15267: PPUSH
15268: CALL_OW 302
15272: NOT
15273: PUSH
15274: LD_VAR 0 5
15278: PUSH
15279: LD_INT 1
15281: ARRAY
15282: PPUSH
15283: CALL_OW 255
15287: PUSH
15288: LD_VAR 0 1
15292: PPUSH
15293: CALL_OW 255
15297: NONEQUAL
15298: OR
15299: IFFALSE 15405
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
15301: LD_VAR 0 5
15305: PUSH
15306: LD_INT 1
15308: ARRAY
15309: PPUSH
15310: CALL_OW 305
15314: PUSH
15315: LD_VAR 0 5
15319: PUSH
15320: LD_INT 1
15322: ARRAY
15323: PPUSH
15324: CALL_OW 255
15328: PUSH
15329: LD_VAR 0 1
15333: PPUSH
15334: CALL_OW 255
15338: EQUAL
15339: AND
15340: IFFALSE 15364
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
15342: LD_VAR 0 5
15346: PUSH
15347: LD_INT 1
15349: ARRAY
15350: PPUSH
15351: LD_VAR 0 5
15355: PUSH
15356: LD_INT 2
15358: ARRAY
15359: PPUSH
15360: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
15364: LD_ADDR_EXP 61
15368: PUSH
15369: LD_EXP 61
15373: PPUSH
15374: LD_VAR 0 4
15378: PPUSH
15379: LD_EXP 61
15383: PUSH
15384: LD_VAR 0 4
15388: ARRAY
15389: PPUSH
15390: LD_VAR 0 3
15394: PPUSH
15395: CALL_OW 3
15399: PPUSH
15400: CALL_OW 1
15404: ST_TO_ADDR
// end ; end ;
15405: GO 15234
15407: POP
15408: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
15409: LD_VAR 0 1
15413: PPUSH
15414: LD_EXP 61
15418: PUSH
15419: LD_VAR 0 4
15423: ARRAY
15424: PUSH
15425: LD_INT 0
15427: PLUS
15428: PPUSH
15429: CALL_OW 505
// end ;
15433: LD_VAR 0 2
15437: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
15438: LD_INT 0
15440: PPUSH
15441: PPUSH
15442: PPUSH
15443: PPUSH
// if not hack in hackTanks then
15444: LD_VAR 0 1
15448: PUSH
15449: LD_EXP 60
15453: IN
15454: NOT
15455: IFFALSE 15459
// exit ;
15457: GO 15544
// index := GetElementIndex ( hackTanks , hack ) ;
15459: LD_ADDR_VAR 0 5
15463: PUSH
15464: LD_EXP 60
15468: PPUSH
15469: LD_VAR 0 1
15473: PPUSH
15474: CALL 32970 0 2
15478: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
15479: LD_ADDR_VAR 0 4
15483: PUSH
15484: DOUBLE
15485: LD_INT 1
15487: DEC
15488: ST_TO_ADDR
15489: LD_EXP 61
15493: PUSH
15494: LD_VAR 0 5
15498: ARRAY
15499: PUSH
15500: FOR_TO
15501: IFFALSE 15542
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
15503: LD_EXP 61
15507: PUSH
15508: LD_VAR 0 5
15512: ARRAY
15513: PUSH
15514: LD_VAR 0 4
15518: ARRAY
15519: PUSH
15520: LD_INT 1
15522: ARRAY
15523: PUSH
15524: LD_VAR 0 2
15528: EQUAL
15529: IFFALSE 15540
// KillUnit ( vehicle ) ;
15531: LD_VAR 0 2
15535: PPUSH
15536: CALL_OW 66
15540: GO 15500
15542: POP
15543: POP
// end ; end_of_file
15544: LD_VAR 0 3
15548: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ;
15549: LD_VAR 0 1
15553: PPUSH
15554: LD_VAR 0 2
15558: PPUSH
15559: LD_VAR 0 3
15563: PPUSH
15564: LD_VAR 0 4
15568: PPUSH
15569: LD_VAR 0 5
15573: PPUSH
15574: CALL 13870 0 5
// end ;
15578: PPOPN 5
15580: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
15581: LD_VAR 0 2
15585: PUSH
15586: LD_INT 100
15588: EQUAL
15589: IFFALSE 16538
// begin if not StreamModeActive then
15591: LD_EXP 65
15595: NOT
15596: IFFALSE 15606
// StreamModeActive := true ;
15598: LD_ADDR_EXP 65
15602: PUSH
15603: LD_INT 1
15605: ST_TO_ADDR
// if p3 = 0 then
15606: LD_VAR 0 3
15610: PUSH
15611: LD_INT 0
15613: EQUAL
15614: IFFALSE 15620
// InitStreamMode ;
15616: CALL 16771 0 0
// if p3 = 1 then
15620: LD_VAR 0 3
15624: PUSH
15625: LD_INT 1
15627: EQUAL
15628: IFFALSE 15638
// sRocket := true ;
15630: LD_ADDR_EXP 70
15634: PUSH
15635: LD_INT 1
15637: ST_TO_ADDR
// if p3 = 2 then
15638: LD_VAR 0 3
15642: PUSH
15643: LD_INT 2
15645: EQUAL
15646: IFFALSE 15656
// sSpeed := true ;
15648: LD_ADDR_EXP 69
15652: PUSH
15653: LD_INT 1
15655: ST_TO_ADDR
// if p3 = 3 then
15656: LD_VAR 0 3
15660: PUSH
15661: LD_INT 3
15663: EQUAL
15664: IFFALSE 15674
// sEngine := true ;
15666: LD_ADDR_EXP 71
15670: PUSH
15671: LD_INT 1
15673: ST_TO_ADDR
// if p3 = 4 then
15674: LD_VAR 0 3
15678: PUSH
15679: LD_INT 4
15681: EQUAL
15682: IFFALSE 15692
// sSpec := true ;
15684: LD_ADDR_EXP 68
15688: PUSH
15689: LD_INT 1
15691: ST_TO_ADDR
// if p3 = 5 then
15692: LD_VAR 0 3
15696: PUSH
15697: LD_INT 5
15699: EQUAL
15700: IFFALSE 15710
// sLevel := true ;
15702: LD_ADDR_EXP 72
15706: PUSH
15707: LD_INT 1
15709: ST_TO_ADDR
// if p3 = 6 then
15710: LD_VAR 0 3
15714: PUSH
15715: LD_INT 6
15717: EQUAL
15718: IFFALSE 15728
// sArmoury := true ;
15720: LD_ADDR_EXP 73
15724: PUSH
15725: LD_INT 1
15727: ST_TO_ADDR
// if p3 = 7 then
15728: LD_VAR 0 3
15732: PUSH
15733: LD_INT 7
15735: EQUAL
15736: IFFALSE 15746
// sRadar := true ;
15738: LD_ADDR_EXP 74
15742: PUSH
15743: LD_INT 1
15745: ST_TO_ADDR
// if p3 = 8 then
15746: LD_VAR 0 3
15750: PUSH
15751: LD_INT 8
15753: EQUAL
15754: IFFALSE 15764
// sBunker := true ;
15756: LD_ADDR_EXP 75
15760: PUSH
15761: LD_INT 1
15763: ST_TO_ADDR
// if p3 = 9 then
15764: LD_VAR 0 3
15768: PUSH
15769: LD_INT 9
15771: EQUAL
15772: IFFALSE 15782
// sHack := true ;
15774: LD_ADDR_EXP 76
15778: PUSH
15779: LD_INT 1
15781: ST_TO_ADDR
// if p3 = 10 then
15782: LD_VAR 0 3
15786: PUSH
15787: LD_INT 10
15789: EQUAL
15790: IFFALSE 15800
// sFire := true ;
15792: LD_ADDR_EXP 77
15796: PUSH
15797: LD_INT 1
15799: ST_TO_ADDR
// if p3 = 11 then
15800: LD_VAR 0 3
15804: PUSH
15805: LD_INT 11
15807: EQUAL
15808: IFFALSE 15818
// sRefresh := true ;
15810: LD_ADDR_EXP 78
15814: PUSH
15815: LD_INT 1
15817: ST_TO_ADDR
// if p3 = 12 then
15818: LD_VAR 0 3
15822: PUSH
15823: LD_INT 12
15825: EQUAL
15826: IFFALSE 15836
// sExp := true ;
15828: LD_ADDR_EXP 79
15832: PUSH
15833: LD_INT 1
15835: ST_TO_ADDR
// if p3 = 13 then
15836: LD_VAR 0 3
15840: PUSH
15841: LD_INT 13
15843: EQUAL
15844: IFFALSE 15854
// sDepot := true ;
15846: LD_ADDR_EXP 80
15850: PUSH
15851: LD_INT 1
15853: ST_TO_ADDR
// if p3 = 14 then
15854: LD_VAR 0 3
15858: PUSH
15859: LD_INT 14
15861: EQUAL
15862: IFFALSE 15872
// sFlag := true ;
15864: LD_ADDR_EXP 81
15868: PUSH
15869: LD_INT 1
15871: ST_TO_ADDR
// if p3 = 15 then
15872: LD_VAR 0 3
15876: PUSH
15877: LD_INT 15
15879: EQUAL
15880: IFFALSE 15890
// sKamikadze := true ;
15882: LD_ADDR_EXP 89
15886: PUSH
15887: LD_INT 1
15889: ST_TO_ADDR
// if p3 = 16 then
15890: LD_VAR 0 3
15894: PUSH
15895: LD_INT 16
15897: EQUAL
15898: IFFALSE 15908
// sTroll := true ;
15900: LD_ADDR_EXP 90
15904: PUSH
15905: LD_INT 1
15907: ST_TO_ADDR
// if p3 = 17 then
15908: LD_VAR 0 3
15912: PUSH
15913: LD_INT 17
15915: EQUAL
15916: IFFALSE 15926
// sSlow := true ;
15918: LD_ADDR_EXP 91
15922: PUSH
15923: LD_INT 1
15925: ST_TO_ADDR
// if p3 = 18 then
15926: LD_VAR 0 3
15930: PUSH
15931: LD_INT 18
15933: EQUAL
15934: IFFALSE 15944
// sLack := true ;
15936: LD_ADDR_EXP 92
15940: PUSH
15941: LD_INT 1
15943: ST_TO_ADDR
// if p3 = 19 then
15944: LD_VAR 0 3
15948: PUSH
15949: LD_INT 19
15951: EQUAL
15952: IFFALSE 15962
// sTank := true ;
15954: LD_ADDR_EXP 94
15958: PUSH
15959: LD_INT 1
15961: ST_TO_ADDR
// if p3 = 20 then
15962: LD_VAR 0 3
15966: PUSH
15967: LD_INT 20
15969: EQUAL
15970: IFFALSE 15980
// sRemote := true ;
15972: LD_ADDR_EXP 95
15976: PUSH
15977: LD_INT 1
15979: ST_TO_ADDR
// if p3 = 21 then
15980: LD_VAR 0 3
15984: PUSH
15985: LD_INT 21
15987: EQUAL
15988: IFFALSE 15998
// sPowell := true ;
15990: LD_ADDR_EXP 96
15994: PUSH
15995: LD_INT 1
15997: ST_TO_ADDR
// if p3 = 22 then
15998: LD_VAR 0 3
16002: PUSH
16003: LD_INT 22
16005: EQUAL
16006: IFFALSE 16016
// sTeleport := true ;
16008: LD_ADDR_EXP 99
16012: PUSH
16013: LD_INT 1
16015: ST_TO_ADDR
// if p3 = 23 then
16016: LD_VAR 0 3
16020: PUSH
16021: LD_INT 23
16023: EQUAL
16024: IFFALSE 16034
// sOilTower := true ;
16026: LD_ADDR_EXP 101
16030: PUSH
16031: LD_INT 1
16033: ST_TO_ADDR
// if p3 = 24 then
16034: LD_VAR 0 3
16038: PUSH
16039: LD_INT 24
16041: EQUAL
16042: IFFALSE 16052
// sShovel := true ;
16044: LD_ADDR_EXP 102
16048: PUSH
16049: LD_INT 1
16051: ST_TO_ADDR
// if p3 = 25 then
16052: LD_VAR 0 3
16056: PUSH
16057: LD_INT 25
16059: EQUAL
16060: IFFALSE 16070
// sSheik := true ;
16062: LD_ADDR_EXP 103
16066: PUSH
16067: LD_INT 1
16069: ST_TO_ADDR
// if p3 = 26 then
16070: LD_VAR 0 3
16074: PUSH
16075: LD_INT 26
16077: EQUAL
16078: IFFALSE 16088
// sEarthquake := true ;
16080: LD_ADDR_EXP 105
16084: PUSH
16085: LD_INT 1
16087: ST_TO_ADDR
// if p3 = 27 then
16088: LD_VAR 0 3
16092: PUSH
16093: LD_INT 27
16095: EQUAL
16096: IFFALSE 16106
// sAI := true ;
16098: LD_ADDR_EXP 106
16102: PUSH
16103: LD_INT 1
16105: ST_TO_ADDR
// if p3 = 28 then
16106: LD_VAR 0 3
16110: PUSH
16111: LD_INT 28
16113: EQUAL
16114: IFFALSE 16124
// sCargo := true ;
16116: LD_ADDR_EXP 109
16120: PUSH
16121: LD_INT 1
16123: ST_TO_ADDR
// if p3 = 29 then
16124: LD_VAR 0 3
16128: PUSH
16129: LD_INT 29
16131: EQUAL
16132: IFFALSE 16142
// sDLaser := true ;
16134: LD_ADDR_EXP 110
16138: PUSH
16139: LD_INT 1
16141: ST_TO_ADDR
// if p3 = 30 then
16142: LD_VAR 0 3
16146: PUSH
16147: LD_INT 30
16149: EQUAL
16150: IFFALSE 16160
// sExchange := true ;
16152: LD_ADDR_EXP 111
16156: PUSH
16157: LD_INT 1
16159: ST_TO_ADDR
// if p3 = 31 then
16160: LD_VAR 0 3
16164: PUSH
16165: LD_INT 31
16167: EQUAL
16168: IFFALSE 16178
// sFac := true ;
16170: LD_ADDR_EXP 112
16174: PUSH
16175: LD_INT 1
16177: ST_TO_ADDR
// if p3 = 32 then
16178: LD_VAR 0 3
16182: PUSH
16183: LD_INT 32
16185: EQUAL
16186: IFFALSE 16196
// sPower := true ;
16188: LD_ADDR_EXP 113
16192: PUSH
16193: LD_INT 1
16195: ST_TO_ADDR
// if p3 = 33 then
16196: LD_VAR 0 3
16200: PUSH
16201: LD_INT 33
16203: EQUAL
16204: IFFALSE 16214
// sRandom := true ;
16206: LD_ADDR_EXP 114
16210: PUSH
16211: LD_INT 1
16213: ST_TO_ADDR
// if p3 = 34 then
16214: LD_VAR 0 3
16218: PUSH
16219: LD_INT 34
16221: EQUAL
16222: IFFALSE 16232
// sShield := true ;
16224: LD_ADDR_EXP 115
16228: PUSH
16229: LD_INT 1
16231: ST_TO_ADDR
// if p3 = 35 then
16232: LD_VAR 0 3
16236: PUSH
16237: LD_INT 35
16239: EQUAL
16240: IFFALSE 16250
// sTime := true ;
16242: LD_ADDR_EXP 116
16246: PUSH
16247: LD_INT 1
16249: ST_TO_ADDR
// if p3 = 36 then
16250: LD_VAR 0 3
16254: PUSH
16255: LD_INT 36
16257: EQUAL
16258: IFFALSE 16268
// sTools := true ;
16260: LD_ADDR_EXP 117
16264: PUSH
16265: LD_INT 1
16267: ST_TO_ADDR
// if p3 = 101 then
16268: LD_VAR 0 3
16272: PUSH
16273: LD_INT 101
16275: EQUAL
16276: IFFALSE 16286
// sSold := true ;
16278: LD_ADDR_EXP 82
16282: PUSH
16283: LD_INT 1
16285: ST_TO_ADDR
// if p3 = 102 then
16286: LD_VAR 0 3
16290: PUSH
16291: LD_INT 102
16293: EQUAL
16294: IFFALSE 16304
// sDiff := true ;
16296: LD_ADDR_EXP 83
16300: PUSH
16301: LD_INT 1
16303: ST_TO_ADDR
// if p3 = 103 then
16304: LD_VAR 0 3
16308: PUSH
16309: LD_INT 103
16311: EQUAL
16312: IFFALSE 16322
// sFog := true ;
16314: LD_ADDR_EXP 86
16318: PUSH
16319: LD_INT 1
16321: ST_TO_ADDR
// if p3 = 104 then
16322: LD_VAR 0 3
16326: PUSH
16327: LD_INT 104
16329: EQUAL
16330: IFFALSE 16340
// sReset := true ;
16332: LD_ADDR_EXP 87
16336: PUSH
16337: LD_INT 1
16339: ST_TO_ADDR
// if p3 = 105 then
16340: LD_VAR 0 3
16344: PUSH
16345: LD_INT 105
16347: EQUAL
16348: IFFALSE 16358
// sSun := true ;
16350: LD_ADDR_EXP 88
16354: PUSH
16355: LD_INT 1
16357: ST_TO_ADDR
// if p3 = 106 then
16358: LD_VAR 0 3
16362: PUSH
16363: LD_INT 106
16365: EQUAL
16366: IFFALSE 16376
// sTiger := true ;
16368: LD_ADDR_EXP 84
16372: PUSH
16373: LD_INT 1
16375: ST_TO_ADDR
// if p3 = 107 then
16376: LD_VAR 0 3
16380: PUSH
16381: LD_INT 107
16383: EQUAL
16384: IFFALSE 16394
// sBomb := true ;
16386: LD_ADDR_EXP 85
16390: PUSH
16391: LD_INT 1
16393: ST_TO_ADDR
// if p3 = 108 then
16394: LD_VAR 0 3
16398: PUSH
16399: LD_INT 108
16401: EQUAL
16402: IFFALSE 16412
// sWound := true ;
16404: LD_ADDR_EXP 93
16408: PUSH
16409: LD_INT 1
16411: ST_TO_ADDR
// if p3 = 109 then
16412: LD_VAR 0 3
16416: PUSH
16417: LD_INT 109
16419: EQUAL
16420: IFFALSE 16430
// sBetray := true ;
16422: LD_ADDR_EXP 97
16426: PUSH
16427: LD_INT 1
16429: ST_TO_ADDR
// if p3 = 110 then
16430: LD_VAR 0 3
16434: PUSH
16435: LD_INT 110
16437: EQUAL
16438: IFFALSE 16448
// sContamin := true ;
16440: LD_ADDR_EXP 98
16444: PUSH
16445: LD_INT 1
16447: ST_TO_ADDR
// if p3 = 111 then
16448: LD_VAR 0 3
16452: PUSH
16453: LD_INT 111
16455: EQUAL
16456: IFFALSE 16466
// sOil := true ;
16458: LD_ADDR_EXP 100
16462: PUSH
16463: LD_INT 1
16465: ST_TO_ADDR
// if p3 = 112 then
16466: LD_VAR 0 3
16470: PUSH
16471: LD_INT 112
16473: EQUAL
16474: IFFALSE 16484
// sStu := true ;
16476: LD_ADDR_EXP 104
16480: PUSH
16481: LD_INT 1
16483: ST_TO_ADDR
// if p3 = 113 then
16484: LD_VAR 0 3
16488: PUSH
16489: LD_INT 113
16491: EQUAL
16492: IFFALSE 16502
// sBazooka := true ;
16494: LD_ADDR_EXP 107
16498: PUSH
16499: LD_INT 1
16501: ST_TO_ADDR
// if p3 = 114 then
16502: LD_VAR 0 3
16506: PUSH
16507: LD_INT 114
16509: EQUAL
16510: IFFALSE 16520
// sMortar := true ;
16512: LD_ADDR_EXP 108
16516: PUSH
16517: LD_INT 1
16519: ST_TO_ADDR
// if p3 = 115 then
16520: LD_VAR 0 3
16524: PUSH
16525: LD_INT 115
16527: EQUAL
16528: IFFALSE 16538
// sRanger := true ;
16530: LD_ADDR_EXP 118
16534: PUSH
16535: LD_INT 1
16537: ST_TO_ADDR
// end ; if p2 = 101 then
16538: LD_VAR 0 2
16542: PUSH
16543: LD_INT 101
16545: EQUAL
16546: IFFALSE 16749
// begin case p3 of 1 :
16548: LD_VAR 0 3
16552: PUSH
16553: LD_INT 1
16555: DOUBLE
16556: EQUAL
16557: IFTRUE 16561
16559: GO 16568
16561: POP
// hHackUnlimitedResources ; 2 :
16562: CALL 26843 0 0
16566: GO 16749
16568: LD_INT 2
16570: DOUBLE
16571: EQUAL
16572: IFTRUE 16576
16574: GO 16583
16576: POP
// hHackSetLevel10 ; 3 :
16577: CALL 26976 0 0
16581: GO 16749
16583: LD_INT 3
16585: DOUBLE
16586: EQUAL
16587: IFTRUE 16591
16589: GO 16598
16591: POP
// hHackSetLevel10YourUnits ; 4 :
16592: CALL 27061 0 0
16596: GO 16749
16598: LD_INT 4
16600: DOUBLE
16601: EQUAL
16602: IFTRUE 16606
16604: GO 16628
16606: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
16607: LD_VAR 0 4
16611: PPUSH
16612: LD_VAR 0 5
16616: PPUSH
16617: LD_VAR 0 6
16621: PPUSH
16622: CALL 27151 0 3
16626: GO 16749
16628: LD_INT 5
16630: DOUBLE
16631: EQUAL
16632: IFTRUE 16636
16634: GO 16643
16636: POP
// hHackSpawnVehicle ; 6 :
16637: CALL 27212 0 0
16641: GO 16749
16643: LD_INT 6
16645: DOUBLE
16646: EQUAL
16647: IFTRUE 16651
16649: GO 16658
16651: POP
// hHackInvincible ; 7 :
16652: CALL 27758 0 0
16656: GO 16749
16658: LD_INT 7
16660: DOUBLE
16661: EQUAL
16662: IFTRUE 16666
16664: GO 16673
16666: POP
// hHackInvisible ; 8 :
16667: CALL 27869 0 0
16671: GO 16749
16673: LD_INT 8
16675: DOUBLE
16676: EQUAL
16677: IFTRUE 16681
16679: GO 16688
16681: POP
// hHackChangeYourSide ; 9 :
16682: CALL 27926 0 0
16686: GO 16749
16688: LD_INT 9
16690: DOUBLE
16691: EQUAL
16692: IFTRUE 16696
16694: GO 16703
16696: POP
// hHackChangeUnitSide ; 10 :
16697: CALL 27968 0 0
16701: GO 16749
16703: LD_INT 10
16705: DOUBLE
16706: EQUAL
16707: IFTRUE 16711
16709: GO 16718
16711: POP
// hHackFog ; 11 :
16712: CALL 28069 0 0
16716: GO 16749
16718: LD_INT 11
16720: DOUBLE
16721: EQUAL
16722: IFTRUE 16726
16724: GO 16733
16726: POP
// hHackApeman ; 12 :
16727: CALL 28084 0 0
16731: GO 16749
16733: LD_INT 12
16735: DOUBLE
16736: EQUAL
16737: IFTRUE 16741
16739: GO 16748
16741: POP
// hHackBoom ; end ;
16742: CALL 28169 0 0
16746: GO 16749
16748: POP
// end ; end ;
16749: PPOPN 6
16751: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
16752: GO 16754
16754: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16755: LD_STRING initStreamRollete();
16757: PPUSH
16758: CALL_OW 559
// InitStreamMode ;
16762: CALL 16771 0 0
// DefineStreamItems ( ) ;
16766: CALL 17211 0 0
// end ;
16770: END
// function InitStreamMode ; begin
16771: LD_INT 0
16773: PPUSH
// streamModeActive := false ;
16774: LD_ADDR_EXP 65
16778: PUSH
16779: LD_INT 0
16781: ST_TO_ADDR
// normalCounter := 36 ;
16782: LD_ADDR_EXP 66
16786: PUSH
16787: LD_INT 36
16789: ST_TO_ADDR
// hardcoreCounter := 16 ;
16790: LD_ADDR_EXP 67
16794: PUSH
16795: LD_INT 16
16797: ST_TO_ADDR
// sRocket := false ;
16798: LD_ADDR_EXP 70
16802: PUSH
16803: LD_INT 0
16805: ST_TO_ADDR
// sSpeed := false ;
16806: LD_ADDR_EXP 69
16810: PUSH
16811: LD_INT 0
16813: ST_TO_ADDR
// sEngine := false ;
16814: LD_ADDR_EXP 71
16818: PUSH
16819: LD_INT 0
16821: ST_TO_ADDR
// sSpec := false ;
16822: LD_ADDR_EXP 68
16826: PUSH
16827: LD_INT 0
16829: ST_TO_ADDR
// sLevel := false ;
16830: LD_ADDR_EXP 72
16834: PUSH
16835: LD_INT 0
16837: ST_TO_ADDR
// sArmoury := false ;
16838: LD_ADDR_EXP 73
16842: PUSH
16843: LD_INT 0
16845: ST_TO_ADDR
// sRadar := false ;
16846: LD_ADDR_EXP 74
16850: PUSH
16851: LD_INT 0
16853: ST_TO_ADDR
// sBunker := false ;
16854: LD_ADDR_EXP 75
16858: PUSH
16859: LD_INT 0
16861: ST_TO_ADDR
// sHack := false ;
16862: LD_ADDR_EXP 76
16866: PUSH
16867: LD_INT 0
16869: ST_TO_ADDR
// sFire := false ;
16870: LD_ADDR_EXP 77
16874: PUSH
16875: LD_INT 0
16877: ST_TO_ADDR
// sRefresh := false ;
16878: LD_ADDR_EXP 78
16882: PUSH
16883: LD_INT 0
16885: ST_TO_ADDR
// sExp := false ;
16886: LD_ADDR_EXP 79
16890: PUSH
16891: LD_INT 0
16893: ST_TO_ADDR
// sDepot := false ;
16894: LD_ADDR_EXP 80
16898: PUSH
16899: LD_INT 0
16901: ST_TO_ADDR
// sFlag := false ;
16902: LD_ADDR_EXP 81
16906: PUSH
16907: LD_INT 0
16909: ST_TO_ADDR
// sKamikadze := false ;
16910: LD_ADDR_EXP 89
16914: PUSH
16915: LD_INT 0
16917: ST_TO_ADDR
// sTroll := false ;
16918: LD_ADDR_EXP 90
16922: PUSH
16923: LD_INT 0
16925: ST_TO_ADDR
// sSlow := false ;
16926: LD_ADDR_EXP 91
16930: PUSH
16931: LD_INT 0
16933: ST_TO_ADDR
// sLack := false ;
16934: LD_ADDR_EXP 92
16938: PUSH
16939: LD_INT 0
16941: ST_TO_ADDR
// sTank := false ;
16942: LD_ADDR_EXP 94
16946: PUSH
16947: LD_INT 0
16949: ST_TO_ADDR
// sRemote := false ;
16950: LD_ADDR_EXP 95
16954: PUSH
16955: LD_INT 0
16957: ST_TO_ADDR
// sPowell := false ;
16958: LD_ADDR_EXP 96
16962: PUSH
16963: LD_INT 0
16965: ST_TO_ADDR
// sTeleport := false ;
16966: LD_ADDR_EXP 99
16970: PUSH
16971: LD_INT 0
16973: ST_TO_ADDR
// sOilTower := false ;
16974: LD_ADDR_EXP 101
16978: PUSH
16979: LD_INT 0
16981: ST_TO_ADDR
// sShovel := false ;
16982: LD_ADDR_EXP 102
16986: PUSH
16987: LD_INT 0
16989: ST_TO_ADDR
// sSheik := false ;
16990: LD_ADDR_EXP 103
16994: PUSH
16995: LD_INT 0
16997: ST_TO_ADDR
// sEarthquake := false ;
16998: LD_ADDR_EXP 105
17002: PUSH
17003: LD_INT 0
17005: ST_TO_ADDR
// sAI := false ;
17006: LD_ADDR_EXP 106
17010: PUSH
17011: LD_INT 0
17013: ST_TO_ADDR
// sCargo := false ;
17014: LD_ADDR_EXP 109
17018: PUSH
17019: LD_INT 0
17021: ST_TO_ADDR
// sDLaser := false ;
17022: LD_ADDR_EXP 110
17026: PUSH
17027: LD_INT 0
17029: ST_TO_ADDR
// sExchange := false ;
17030: LD_ADDR_EXP 111
17034: PUSH
17035: LD_INT 0
17037: ST_TO_ADDR
// sFac := false ;
17038: LD_ADDR_EXP 112
17042: PUSH
17043: LD_INT 0
17045: ST_TO_ADDR
// sPower := false ;
17046: LD_ADDR_EXP 113
17050: PUSH
17051: LD_INT 0
17053: ST_TO_ADDR
// sRandom := false ;
17054: LD_ADDR_EXP 114
17058: PUSH
17059: LD_INT 0
17061: ST_TO_ADDR
// sShield := false ;
17062: LD_ADDR_EXP 115
17066: PUSH
17067: LD_INT 0
17069: ST_TO_ADDR
// sTime := false ;
17070: LD_ADDR_EXP 116
17074: PUSH
17075: LD_INT 0
17077: ST_TO_ADDR
// sTools := false ;
17078: LD_ADDR_EXP 117
17082: PUSH
17083: LD_INT 0
17085: ST_TO_ADDR
// sSold := false ;
17086: LD_ADDR_EXP 82
17090: PUSH
17091: LD_INT 0
17093: ST_TO_ADDR
// sDiff := false ;
17094: LD_ADDR_EXP 83
17098: PUSH
17099: LD_INT 0
17101: ST_TO_ADDR
// sFog := false ;
17102: LD_ADDR_EXP 86
17106: PUSH
17107: LD_INT 0
17109: ST_TO_ADDR
// sReset := false ;
17110: LD_ADDR_EXP 87
17114: PUSH
17115: LD_INT 0
17117: ST_TO_ADDR
// sSun := false ;
17118: LD_ADDR_EXP 88
17122: PUSH
17123: LD_INT 0
17125: ST_TO_ADDR
// sTiger := false ;
17126: LD_ADDR_EXP 84
17130: PUSH
17131: LD_INT 0
17133: ST_TO_ADDR
// sBomb := false ;
17134: LD_ADDR_EXP 85
17138: PUSH
17139: LD_INT 0
17141: ST_TO_ADDR
// sWound := false ;
17142: LD_ADDR_EXP 93
17146: PUSH
17147: LD_INT 0
17149: ST_TO_ADDR
// sBetray := false ;
17150: LD_ADDR_EXP 97
17154: PUSH
17155: LD_INT 0
17157: ST_TO_ADDR
// sContamin := false ;
17158: LD_ADDR_EXP 98
17162: PUSH
17163: LD_INT 0
17165: ST_TO_ADDR
// sOil := false ;
17166: LD_ADDR_EXP 100
17170: PUSH
17171: LD_INT 0
17173: ST_TO_ADDR
// sStu := false ;
17174: LD_ADDR_EXP 104
17178: PUSH
17179: LD_INT 0
17181: ST_TO_ADDR
// sBazooka := false ;
17182: LD_ADDR_EXP 107
17186: PUSH
17187: LD_INT 0
17189: ST_TO_ADDR
// sMortar := false ;
17190: LD_ADDR_EXP 108
17194: PUSH
17195: LD_INT 0
17197: ST_TO_ADDR
// sRanger := false ;
17198: LD_ADDR_EXP 118
17202: PUSH
17203: LD_INT 0
17205: ST_TO_ADDR
// end ;
17206: LD_VAR 0 1
17210: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
17211: LD_INT 0
17213: PPUSH
17214: PPUSH
17215: PPUSH
17216: PPUSH
17217: PPUSH
// result := [ ] ;
17218: LD_ADDR_VAR 0 1
17222: PUSH
17223: EMPTY
17224: ST_TO_ADDR
// if campaign_id = 1 then
17225: LD_OWVAR 69
17229: PUSH
17230: LD_INT 1
17232: EQUAL
17233: IFFALSE 20171
// begin case mission_number of 1 :
17235: LD_OWVAR 70
17239: PUSH
17240: LD_INT 1
17242: DOUBLE
17243: EQUAL
17244: IFTRUE 17248
17246: GO 17312
17248: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
17249: LD_ADDR_VAR 0 1
17253: PUSH
17254: LD_INT 2
17256: PUSH
17257: LD_INT 4
17259: PUSH
17260: LD_INT 11
17262: PUSH
17263: LD_INT 12
17265: PUSH
17266: LD_INT 15
17268: PUSH
17269: LD_INT 16
17271: PUSH
17272: LD_INT 22
17274: PUSH
17275: LD_INT 23
17277: PUSH
17278: LD_INT 26
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: PUSH
17292: LD_INT 101
17294: PUSH
17295: LD_INT 102
17297: PUSH
17298: LD_INT 106
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: LIST
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: ST_TO_ADDR
17310: GO 20169
17312: LD_INT 2
17314: DOUBLE
17315: EQUAL
17316: IFTRUE 17320
17318: GO 17392
17320: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
17321: LD_ADDR_VAR 0 1
17325: PUSH
17326: LD_INT 2
17328: PUSH
17329: LD_INT 4
17331: PUSH
17332: LD_INT 11
17334: PUSH
17335: LD_INT 12
17337: PUSH
17338: LD_INT 15
17340: PUSH
17341: LD_INT 16
17343: PUSH
17344: LD_INT 22
17346: PUSH
17347: LD_INT 23
17349: PUSH
17350: LD_INT 26
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: LIST
17363: PUSH
17364: LD_INT 101
17366: PUSH
17367: LD_INT 102
17369: PUSH
17370: LD_INT 105
17372: PUSH
17373: LD_INT 106
17375: PUSH
17376: LD_INT 108
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: ST_TO_ADDR
17390: GO 20169
17392: LD_INT 3
17394: DOUBLE
17395: EQUAL
17396: IFTRUE 17400
17398: GO 17476
17400: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
17401: LD_ADDR_VAR 0 1
17405: PUSH
17406: LD_INT 2
17408: PUSH
17409: LD_INT 4
17411: PUSH
17412: LD_INT 5
17414: PUSH
17415: LD_INT 11
17417: PUSH
17418: LD_INT 12
17420: PUSH
17421: LD_INT 15
17423: PUSH
17424: LD_INT 16
17426: PUSH
17427: LD_INT 22
17429: PUSH
17430: LD_INT 26
17432: PUSH
17433: LD_INT 36
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: PUSH
17448: LD_INT 101
17450: PUSH
17451: LD_INT 102
17453: PUSH
17454: LD_INT 105
17456: PUSH
17457: LD_INT 106
17459: PUSH
17460: LD_INT 108
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: ST_TO_ADDR
17474: GO 20169
17476: LD_INT 4
17478: DOUBLE
17479: EQUAL
17480: IFTRUE 17484
17482: GO 17568
17484: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
17485: LD_ADDR_VAR 0 1
17489: PUSH
17490: LD_INT 2
17492: PUSH
17493: LD_INT 4
17495: PUSH
17496: LD_INT 5
17498: PUSH
17499: LD_INT 8
17501: PUSH
17502: LD_INT 11
17504: PUSH
17505: LD_INT 12
17507: PUSH
17508: LD_INT 15
17510: PUSH
17511: LD_INT 16
17513: PUSH
17514: LD_INT 22
17516: PUSH
17517: LD_INT 23
17519: PUSH
17520: LD_INT 26
17522: PUSH
17523: LD_INT 36
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: PUSH
17540: LD_INT 101
17542: PUSH
17543: LD_INT 102
17545: PUSH
17546: LD_INT 105
17548: PUSH
17549: LD_INT 106
17551: PUSH
17552: LD_INT 108
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: ST_TO_ADDR
17566: GO 20169
17568: LD_INT 5
17570: DOUBLE
17571: EQUAL
17572: IFTRUE 17576
17574: GO 17676
17576: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
17577: LD_ADDR_VAR 0 1
17581: PUSH
17582: LD_INT 2
17584: PUSH
17585: LD_INT 4
17587: PUSH
17588: LD_INT 5
17590: PUSH
17591: LD_INT 6
17593: PUSH
17594: LD_INT 8
17596: PUSH
17597: LD_INT 11
17599: PUSH
17600: LD_INT 12
17602: PUSH
17603: LD_INT 15
17605: PUSH
17606: LD_INT 16
17608: PUSH
17609: LD_INT 22
17611: PUSH
17612: LD_INT 23
17614: PUSH
17615: LD_INT 25
17617: PUSH
17618: LD_INT 26
17620: PUSH
17621: LD_INT 36
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: PUSH
17640: LD_INT 101
17642: PUSH
17643: LD_INT 102
17645: PUSH
17646: LD_INT 105
17648: PUSH
17649: LD_INT 106
17651: PUSH
17652: LD_INT 108
17654: PUSH
17655: LD_INT 109
17657: PUSH
17658: LD_INT 112
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: ST_TO_ADDR
17674: GO 20169
17676: LD_INT 6
17678: DOUBLE
17679: EQUAL
17680: IFTRUE 17684
17682: GO 17804
17684: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
17685: LD_ADDR_VAR 0 1
17689: PUSH
17690: LD_INT 2
17692: PUSH
17693: LD_INT 4
17695: PUSH
17696: LD_INT 5
17698: PUSH
17699: LD_INT 6
17701: PUSH
17702: LD_INT 8
17704: PUSH
17705: LD_INT 11
17707: PUSH
17708: LD_INT 12
17710: PUSH
17711: LD_INT 15
17713: PUSH
17714: LD_INT 16
17716: PUSH
17717: LD_INT 20
17719: PUSH
17720: LD_INT 21
17722: PUSH
17723: LD_INT 22
17725: PUSH
17726: LD_INT 23
17728: PUSH
17729: LD_INT 25
17731: PUSH
17732: LD_INT 26
17734: PUSH
17735: LD_INT 30
17737: PUSH
17738: LD_INT 31
17740: PUSH
17741: LD_INT 32
17743: PUSH
17744: LD_INT 36
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: PUSH
17768: LD_INT 101
17770: PUSH
17771: LD_INT 102
17773: PUSH
17774: LD_INT 105
17776: PUSH
17777: LD_INT 106
17779: PUSH
17780: LD_INT 108
17782: PUSH
17783: LD_INT 109
17785: PUSH
17786: LD_INT 112
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: ST_TO_ADDR
17802: GO 20169
17804: LD_INT 7
17806: DOUBLE
17807: EQUAL
17808: IFTRUE 17812
17810: GO 17912
17812: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
17813: LD_ADDR_VAR 0 1
17817: PUSH
17818: LD_INT 2
17820: PUSH
17821: LD_INT 4
17823: PUSH
17824: LD_INT 5
17826: PUSH
17827: LD_INT 7
17829: PUSH
17830: LD_INT 11
17832: PUSH
17833: LD_INT 12
17835: PUSH
17836: LD_INT 15
17838: PUSH
17839: LD_INT 16
17841: PUSH
17842: LD_INT 20
17844: PUSH
17845: LD_INT 21
17847: PUSH
17848: LD_INT 22
17850: PUSH
17851: LD_INT 23
17853: PUSH
17854: LD_INT 25
17856: PUSH
17857: LD_INT 26
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: PUSH
17876: LD_INT 101
17878: PUSH
17879: LD_INT 102
17881: PUSH
17882: LD_INT 103
17884: PUSH
17885: LD_INT 105
17887: PUSH
17888: LD_INT 106
17890: PUSH
17891: LD_INT 108
17893: PUSH
17894: LD_INT 112
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: ST_TO_ADDR
17910: GO 20169
17912: LD_INT 8
17914: DOUBLE
17915: EQUAL
17916: IFTRUE 17920
17918: GO 18048
17920: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
17921: LD_ADDR_VAR 0 1
17925: PUSH
17926: LD_INT 2
17928: PUSH
17929: LD_INT 4
17931: PUSH
17932: LD_INT 5
17934: PUSH
17935: LD_INT 6
17937: PUSH
17938: LD_INT 7
17940: PUSH
17941: LD_INT 8
17943: PUSH
17944: LD_INT 11
17946: PUSH
17947: LD_INT 12
17949: PUSH
17950: LD_INT 15
17952: PUSH
17953: LD_INT 16
17955: PUSH
17956: LD_INT 20
17958: PUSH
17959: LD_INT 21
17961: PUSH
17962: LD_INT 22
17964: PUSH
17965: LD_INT 23
17967: PUSH
17968: LD_INT 25
17970: PUSH
17971: LD_INT 26
17973: PUSH
17974: LD_INT 30
17976: PUSH
17977: LD_INT 31
17979: PUSH
17980: LD_INT 32
17982: PUSH
17983: LD_INT 36
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: PUSH
18008: LD_INT 101
18010: PUSH
18011: LD_INT 102
18013: PUSH
18014: LD_INT 103
18016: PUSH
18017: LD_INT 105
18019: PUSH
18020: LD_INT 106
18022: PUSH
18023: LD_INT 108
18025: PUSH
18026: LD_INT 109
18028: PUSH
18029: LD_INT 112
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: PUSH
18042: EMPTY
18043: LIST
18044: LIST
18045: ST_TO_ADDR
18046: GO 20169
18048: LD_INT 9
18050: DOUBLE
18051: EQUAL
18052: IFTRUE 18056
18054: GO 18192
18056: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
18057: LD_ADDR_VAR 0 1
18061: PUSH
18062: LD_INT 2
18064: PUSH
18065: LD_INT 4
18067: PUSH
18068: LD_INT 5
18070: PUSH
18071: LD_INT 6
18073: PUSH
18074: LD_INT 7
18076: PUSH
18077: LD_INT 8
18079: PUSH
18080: LD_INT 11
18082: PUSH
18083: LD_INT 12
18085: PUSH
18086: LD_INT 15
18088: PUSH
18089: LD_INT 16
18091: PUSH
18092: LD_INT 20
18094: PUSH
18095: LD_INT 21
18097: PUSH
18098: LD_INT 22
18100: PUSH
18101: LD_INT 23
18103: PUSH
18104: LD_INT 25
18106: PUSH
18107: LD_INT 26
18109: PUSH
18110: LD_INT 28
18112: PUSH
18113: LD_INT 30
18115: PUSH
18116: LD_INT 31
18118: PUSH
18119: LD_INT 32
18121: PUSH
18122: LD_INT 36
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: PUSH
18148: LD_INT 101
18150: PUSH
18151: LD_INT 102
18153: PUSH
18154: LD_INT 103
18156: PUSH
18157: LD_INT 105
18159: PUSH
18160: LD_INT 106
18162: PUSH
18163: LD_INT 108
18165: PUSH
18166: LD_INT 109
18168: PUSH
18169: LD_INT 112
18171: PUSH
18172: LD_INT 114
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: ST_TO_ADDR
18190: GO 20169
18192: LD_INT 10
18194: DOUBLE
18195: EQUAL
18196: IFTRUE 18200
18198: GO 18384
18200: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
18201: LD_ADDR_VAR 0 1
18205: PUSH
18206: LD_INT 2
18208: PUSH
18209: LD_INT 4
18211: PUSH
18212: LD_INT 5
18214: PUSH
18215: LD_INT 6
18217: PUSH
18218: LD_INT 7
18220: PUSH
18221: LD_INT 8
18223: PUSH
18224: LD_INT 9
18226: PUSH
18227: LD_INT 10
18229: PUSH
18230: LD_INT 11
18232: PUSH
18233: LD_INT 12
18235: PUSH
18236: LD_INT 13
18238: PUSH
18239: LD_INT 14
18241: PUSH
18242: LD_INT 15
18244: PUSH
18245: LD_INT 16
18247: PUSH
18248: LD_INT 17
18250: PUSH
18251: LD_INT 18
18253: PUSH
18254: LD_INT 19
18256: PUSH
18257: LD_INT 20
18259: PUSH
18260: LD_INT 21
18262: PUSH
18263: LD_INT 22
18265: PUSH
18266: LD_INT 23
18268: PUSH
18269: LD_INT 24
18271: PUSH
18272: LD_INT 25
18274: PUSH
18275: LD_INT 26
18277: PUSH
18278: LD_INT 28
18280: PUSH
18281: LD_INT 30
18283: PUSH
18284: LD_INT 31
18286: PUSH
18287: LD_INT 32
18289: PUSH
18290: LD_INT 36
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: PUSH
18324: LD_INT 101
18326: PUSH
18327: LD_INT 102
18329: PUSH
18330: LD_INT 103
18332: PUSH
18333: LD_INT 104
18335: PUSH
18336: LD_INT 105
18338: PUSH
18339: LD_INT 106
18341: PUSH
18342: LD_INT 107
18344: PUSH
18345: LD_INT 108
18347: PUSH
18348: LD_INT 109
18350: PUSH
18351: LD_INT 110
18353: PUSH
18354: LD_INT 111
18356: PUSH
18357: LD_INT 112
18359: PUSH
18360: LD_INT 114
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: ST_TO_ADDR
18382: GO 20169
18384: LD_INT 11
18386: DOUBLE
18387: EQUAL
18388: IFTRUE 18392
18390: GO 18584
18392: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
18393: LD_ADDR_VAR 0 1
18397: PUSH
18398: LD_INT 2
18400: PUSH
18401: LD_INT 3
18403: PUSH
18404: LD_INT 4
18406: PUSH
18407: LD_INT 5
18409: PUSH
18410: LD_INT 6
18412: PUSH
18413: LD_INT 7
18415: PUSH
18416: LD_INT 8
18418: PUSH
18419: LD_INT 9
18421: PUSH
18422: LD_INT 10
18424: PUSH
18425: LD_INT 11
18427: PUSH
18428: LD_INT 12
18430: PUSH
18431: LD_INT 13
18433: PUSH
18434: LD_INT 14
18436: PUSH
18437: LD_INT 15
18439: PUSH
18440: LD_INT 16
18442: PUSH
18443: LD_INT 17
18445: PUSH
18446: LD_INT 18
18448: PUSH
18449: LD_INT 19
18451: PUSH
18452: LD_INT 20
18454: PUSH
18455: LD_INT 21
18457: PUSH
18458: LD_INT 22
18460: PUSH
18461: LD_INT 23
18463: PUSH
18464: LD_INT 24
18466: PUSH
18467: LD_INT 25
18469: PUSH
18470: LD_INT 26
18472: PUSH
18473: LD_INT 28
18475: PUSH
18476: LD_INT 30
18478: PUSH
18479: LD_INT 31
18481: PUSH
18482: LD_INT 32
18484: PUSH
18485: LD_INT 34
18487: PUSH
18488: LD_INT 36
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: PUSH
18524: LD_INT 101
18526: PUSH
18527: LD_INT 102
18529: PUSH
18530: LD_INT 103
18532: PUSH
18533: LD_INT 104
18535: PUSH
18536: LD_INT 105
18538: PUSH
18539: LD_INT 106
18541: PUSH
18542: LD_INT 107
18544: PUSH
18545: LD_INT 108
18547: PUSH
18548: LD_INT 109
18550: PUSH
18551: LD_INT 110
18553: PUSH
18554: LD_INT 111
18556: PUSH
18557: LD_INT 112
18559: PUSH
18560: LD_INT 114
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: ST_TO_ADDR
18582: GO 20169
18584: LD_INT 12
18586: DOUBLE
18587: EQUAL
18588: IFTRUE 18592
18590: GO 18800
18592: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
18593: LD_ADDR_VAR 0 1
18597: PUSH
18598: LD_INT 1
18600: PUSH
18601: LD_INT 2
18603: PUSH
18604: LD_INT 3
18606: PUSH
18607: LD_INT 4
18609: PUSH
18610: LD_INT 5
18612: PUSH
18613: LD_INT 6
18615: PUSH
18616: LD_INT 7
18618: PUSH
18619: LD_INT 8
18621: PUSH
18622: LD_INT 9
18624: PUSH
18625: LD_INT 10
18627: PUSH
18628: LD_INT 11
18630: PUSH
18631: LD_INT 12
18633: PUSH
18634: LD_INT 13
18636: PUSH
18637: LD_INT 14
18639: PUSH
18640: LD_INT 15
18642: PUSH
18643: LD_INT 16
18645: PUSH
18646: LD_INT 17
18648: PUSH
18649: LD_INT 18
18651: PUSH
18652: LD_INT 19
18654: PUSH
18655: LD_INT 20
18657: PUSH
18658: LD_INT 21
18660: PUSH
18661: LD_INT 22
18663: PUSH
18664: LD_INT 23
18666: PUSH
18667: LD_INT 24
18669: PUSH
18670: LD_INT 25
18672: PUSH
18673: LD_INT 26
18675: PUSH
18676: LD_INT 27
18678: PUSH
18679: LD_INT 28
18681: PUSH
18682: LD_INT 30
18684: PUSH
18685: LD_INT 31
18687: PUSH
18688: LD_INT 32
18690: PUSH
18691: LD_INT 33
18693: PUSH
18694: LD_INT 34
18696: PUSH
18697: LD_INT 36
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: PUSH
18736: LD_INT 101
18738: PUSH
18739: LD_INT 102
18741: PUSH
18742: LD_INT 103
18744: PUSH
18745: LD_INT 104
18747: PUSH
18748: LD_INT 105
18750: PUSH
18751: LD_INT 106
18753: PUSH
18754: LD_INT 107
18756: PUSH
18757: LD_INT 108
18759: PUSH
18760: LD_INT 109
18762: PUSH
18763: LD_INT 110
18765: PUSH
18766: LD_INT 111
18768: PUSH
18769: LD_INT 112
18771: PUSH
18772: LD_INT 113
18774: PUSH
18775: LD_INT 114
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: ST_TO_ADDR
18798: GO 20169
18800: LD_INT 13
18802: DOUBLE
18803: EQUAL
18804: IFTRUE 18808
18806: GO 19004
18808: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
18809: LD_ADDR_VAR 0 1
18813: PUSH
18814: LD_INT 1
18816: PUSH
18817: LD_INT 2
18819: PUSH
18820: LD_INT 3
18822: PUSH
18823: LD_INT 4
18825: PUSH
18826: LD_INT 5
18828: PUSH
18829: LD_INT 8
18831: PUSH
18832: LD_INT 9
18834: PUSH
18835: LD_INT 10
18837: PUSH
18838: LD_INT 11
18840: PUSH
18841: LD_INT 12
18843: PUSH
18844: LD_INT 14
18846: PUSH
18847: LD_INT 15
18849: PUSH
18850: LD_INT 16
18852: PUSH
18853: LD_INT 17
18855: PUSH
18856: LD_INT 18
18858: PUSH
18859: LD_INT 19
18861: PUSH
18862: LD_INT 20
18864: PUSH
18865: LD_INT 21
18867: PUSH
18868: LD_INT 22
18870: PUSH
18871: LD_INT 23
18873: PUSH
18874: LD_INT 24
18876: PUSH
18877: LD_INT 25
18879: PUSH
18880: LD_INT 26
18882: PUSH
18883: LD_INT 27
18885: PUSH
18886: LD_INT 28
18888: PUSH
18889: LD_INT 30
18891: PUSH
18892: LD_INT 31
18894: PUSH
18895: LD_INT 32
18897: PUSH
18898: LD_INT 33
18900: PUSH
18901: LD_INT 34
18903: PUSH
18904: LD_INT 36
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 101
18942: PUSH
18943: LD_INT 102
18945: PUSH
18946: LD_INT 103
18948: PUSH
18949: LD_INT 104
18951: PUSH
18952: LD_INT 105
18954: PUSH
18955: LD_INT 106
18957: PUSH
18958: LD_INT 107
18960: PUSH
18961: LD_INT 108
18963: PUSH
18964: LD_INT 109
18966: PUSH
18967: LD_INT 110
18969: PUSH
18970: LD_INT 111
18972: PUSH
18973: LD_INT 112
18975: PUSH
18976: LD_INT 113
18978: PUSH
18979: LD_INT 114
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: ST_TO_ADDR
19002: GO 20169
19004: LD_INT 14
19006: DOUBLE
19007: EQUAL
19008: IFTRUE 19012
19010: GO 19224
19012: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
19013: LD_ADDR_VAR 0 1
19017: PUSH
19018: LD_INT 1
19020: PUSH
19021: LD_INT 2
19023: PUSH
19024: LD_INT 3
19026: PUSH
19027: LD_INT 4
19029: PUSH
19030: LD_INT 5
19032: PUSH
19033: LD_INT 6
19035: PUSH
19036: LD_INT 7
19038: PUSH
19039: LD_INT 8
19041: PUSH
19042: LD_INT 9
19044: PUSH
19045: LD_INT 10
19047: PUSH
19048: LD_INT 11
19050: PUSH
19051: LD_INT 12
19053: PUSH
19054: LD_INT 13
19056: PUSH
19057: LD_INT 14
19059: PUSH
19060: LD_INT 15
19062: PUSH
19063: LD_INT 16
19065: PUSH
19066: LD_INT 17
19068: PUSH
19069: LD_INT 18
19071: PUSH
19072: LD_INT 19
19074: PUSH
19075: LD_INT 20
19077: PUSH
19078: LD_INT 21
19080: PUSH
19081: LD_INT 22
19083: PUSH
19084: LD_INT 23
19086: PUSH
19087: LD_INT 24
19089: PUSH
19090: LD_INT 25
19092: PUSH
19093: LD_INT 26
19095: PUSH
19096: LD_INT 27
19098: PUSH
19099: LD_INT 28
19101: PUSH
19102: LD_INT 29
19104: PUSH
19105: LD_INT 30
19107: PUSH
19108: LD_INT 31
19110: PUSH
19111: LD_INT 32
19113: PUSH
19114: LD_INT 33
19116: PUSH
19117: LD_INT 34
19119: PUSH
19120: LD_INT 36
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 101
19162: PUSH
19163: LD_INT 102
19165: PUSH
19166: LD_INT 103
19168: PUSH
19169: LD_INT 104
19171: PUSH
19172: LD_INT 105
19174: PUSH
19175: LD_INT 106
19177: PUSH
19178: LD_INT 107
19180: PUSH
19181: LD_INT 108
19183: PUSH
19184: LD_INT 109
19186: PUSH
19187: LD_INT 110
19189: PUSH
19190: LD_INT 111
19192: PUSH
19193: LD_INT 112
19195: PUSH
19196: LD_INT 113
19198: PUSH
19199: LD_INT 114
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: ST_TO_ADDR
19222: GO 20169
19224: LD_INT 15
19226: DOUBLE
19227: EQUAL
19228: IFTRUE 19232
19230: GO 19444
19232: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
19233: LD_ADDR_VAR 0 1
19237: PUSH
19238: LD_INT 1
19240: PUSH
19241: LD_INT 2
19243: PUSH
19244: LD_INT 3
19246: PUSH
19247: LD_INT 4
19249: PUSH
19250: LD_INT 5
19252: PUSH
19253: LD_INT 6
19255: PUSH
19256: LD_INT 7
19258: PUSH
19259: LD_INT 8
19261: PUSH
19262: LD_INT 9
19264: PUSH
19265: LD_INT 10
19267: PUSH
19268: LD_INT 11
19270: PUSH
19271: LD_INT 12
19273: PUSH
19274: LD_INT 13
19276: PUSH
19277: LD_INT 14
19279: PUSH
19280: LD_INT 15
19282: PUSH
19283: LD_INT 16
19285: PUSH
19286: LD_INT 17
19288: PUSH
19289: LD_INT 18
19291: PUSH
19292: LD_INT 19
19294: PUSH
19295: LD_INT 20
19297: PUSH
19298: LD_INT 21
19300: PUSH
19301: LD_INT 22
19303: PUSH
19304: LD_INT 23
19306: PUSH
19307: LD_INT 24
19309: PUSH
19310: LD_INT 25
19312: PUSH
19313: LD_INT 26
19315: PUSH
19316: LD_INT 27
19318: PUSH
19319: LD_INT 28
19321: PUSH
19322: LD_INT 29
19324: PUSH
19325: LD_INT 30
19327: PUSH
19328: LD_INT 31
19330: PUSH
19331: LD_INT 32
19333: PUSH
19334: LD_INT 33
19336: PUSH
19337: LD_INT 34
19339: PUSH
19340: LD_INT 36
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: PUSH
19380: LD_INT 101
19382: PUSH
19383: LD_INT 102
19385: PUSH
19386: LD_INT 103
19388: PUSH
19389: LD_INT 104
19391: PUSH
19392: LD_INT 105
19394: PUSH
19395: LD_INT 106
19397: PUSH
19398: LD_INT 107
19400: PUSH
19401: LD_INT 108
19403: PUSH
19404: LD_INT 109
19406: PUSH
19407: LD_INT 110
19409: PUSH
19410: LD_INT 111
19412: PUSH
19413: LD_INT 112
19415: PUSH
19416: LD_INT 113
19418: PUSH
19419: LD_INT 114
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: ST_TO_ADDR
19442: GO 20169
19444: LD_INT 16
19446: DOUBLE
19447: EQUAL
19448: IFTRUE 19452
19450: GO 19576
19452: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
19453: LD_ADDR_VAR 0 1
19457: PUSH
19458: LD_INT 2
19460: PUSH
19461: LD_INT 4
19463: PUSH
19464: LD_INT 5
19466: PUSH
19467: LD_INT 7
19469: PUSH
19470: LD_INT 11
19472: PUSH
19473: LD_INT 12
19475: PUSH
19476: LD_INT 15
19478: PUSH
19479: LD_INT 16
19481: PUSH
19482: LD_INT 20
19484: PUSH
19485: LD_INT 21
19487: PUSH
19488: LD_INT 22
19490: PUSH
19491: LD_INT 23
19493: PUSH
19494: LD_INT 25
19496: PUSH
19497: LD_INT 26
19499: PUSH
19500: LD_INT 30
19502: PUSH
19503: LD_INT 31
19505: PUSH
19506: LD_INT 32
19508: PUSH
19509: LD_INT 33
19511: PUSH
19512: LD_INT 34
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 101
19538: PUSH
19539: LD_INT 102
19541: PUSH
19542: LD_INT 103
19544: PUSH
19545: LD_INT 106
19547: PUSH
19548: LD_INT 108
19550: PUSH
19551: LD_INT 112
19553: PUSH
19554: LD_INT 113
19556: PUSH
19557: LD_INT 114
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: ST_TO_ADDR
19574: GO 20169
19576: LD_INT 17
19578: DOUBLE
19579: EQUAL
19580: IFTRUE 19584
19582: GO 19796
19584: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
19585: LD_ADDR_VAR 0 1
19589: PUSH
19590: LD_INT 1
19592: PUSH
19593: LD_INT 2
19595: PUSH
19596: LD_INT 3
19598: PUSH
19599: LD_INT 4
19601: PUSH
19602: LD_INT 5
19604: PUSH
19605: LD_INT 6
19607: PUSH
19608: LD_INT 7
19610: PUSH
19611: LD_INT 8
19613: PUSH
19614: LD_INT 9
19616: PUSH
19617: LD_INT 10
19619: PUSH
19620: LD_INT 11
19622: PUSH
19623: LD_INT 12
19625: PUSH
19626: LD_INT 13
19628: PUSH
19629: LD_INT 14
19631: PUSH
19632: LD_INT 15
19634: PUSH
19635: LD_INT 16
19637: PUSH
19638: LD_INT 17
19640: PUSH
19641: LD_INT 18
19643: PUSH
19644: LD_INT 19
19646: PUSH
19647: LD_INT 20
19649: PUSH
19650: LD_INT 21
19652: PUSH
19653: LD_INT 22
19655: PUSH
19656: LD_INT 23
19658: PUSH
19659: LD_INT 24
19661: PUSH
19662: LD_INT 25
19664: PUSH
19665: LD_INT 26
19667: PUSH
19668: LD_INT 27
19670: PUSH
19671: LD_INT 28
19673: PUSH
19674: LD_INT 29
19676: PUSH
19677: LD_INT 30
19679: PUSH
19680: LD_INT 31
19682: PUSH
19683: LD_INT 32
19685: PUSH
19686: LD_INT 33
19688: PUSH
19689: LD_INT 34
19691: PUSH
19692: LD_INT 36
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 101
19734: PUSH
19735: LD_INT 102
19737: PUSH
19738: LD_INT 103
19740: PUSH
19741: LD_INT 104
19743: PUSH
19744: LD_INT 105
19746: PUSH
19747: LD_INT 106
19749: PUSH
19750: LD_INT 107
19752: PUSH
19753: LD_INT 108
19755: PUSH
19756: LD_INT 109
19758: PUSH
19759: LD_INT 110
19761: PUSH
19762: LD_INT 111
19764: PUSH
19765: LD_INT 112
19767: PUSH
19768: LD_INT 113
19770: PUSH
19771: LD_INT 114
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: ST_TO_ADDR
19794: GO 20169
19796: LD_INT 18
19798: DOUBLE
19799: EQUAL
19800: IFTRUE 19804
19802: GO 19940
19804: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
19805: LD_ADDR_VAR 0 1
19809: PUSH
19810: LD_INT 2
19812: PUSH
19813: LD_INT 4
19815: PUSH
19816: LD_INT 5
19818: PUSH
19819: LD_INT 7
19821: PUSH
19822: LD_INT 11
19824: PUSH
19825: LD_INT 12
19827: PUSH
19828: LD_INT 15
19830: PUSH
19831: LD_INT 16
19833: PUSH
19834: LD_INT 20
19836: PUSH
19837: LD_INT 21
19839: PUSH
19840: LD_INT 22
19842: PUSH
19843: LD_INT 23
19845: PUSH
19846: LD_INT 25
19848: PUSH
19849: LD_INT 26
19851: PUSH
19852: LD_INT 30
19854: PUSH
19855: LD_INT 31
19857: PUSH
19858: LD_INT 32
19860: PUSH
19861: LD_INT 33
19863: PUSH
19864: LD_INT 34
19866: PUSH
19867: LD_INT 35
19869: PUSH
19870: LD_INT 36
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 101
19898: PUSH
19899: LD_INT 102
19901: PUSH
19902: LD_INT 103
19904: PUSH
19905: LD_INT 106
19907: PUSH
19908: LD_INT 108
19910: PUSH
19911: LD_INT 112
19913: PUSH
19914: LD_INT 113
19916: PUSH
19917: LD_INT 114
19919: PUSH
19920: LD_INT 115
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: ST_TO_ADDR
19938: GO 20169
19940: LD_INT 19
19942: DOUBLE
19943: EQUAL
19944: IFTRUE 19948
19946: GO 20168
19948: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
19949: LD_ADDR_VAR 0 1
19953: PUSH
19954: LD_INT 1
19956: PUSH
19957: LD_INT 2
19959: PUSH
19960: LD_INT 3
19962: PUSH
19963: LD_INT 4
19965: PUSH
19966: LD_INT 5
19968: PUSH
19969: LD_INT 6
19971: PUSH
19972: LD_INT 7
19974: PUSH
19975: LD_INT 8
19977: PUSH
19978: LD_INT 9
19980: PUSH
19981: LD_INT 10
19983: PUSH
19984: LD_INT 11
19986: PUSH
19987: LD_INT 12
19989: PUSH
19990: LD_INT 13
19992: PUSH
19993: LD_INT 14
19995: PUSH
19996: LD_INT 15
19998: PUSH
19999: LD_INT 16
20001: PUSH
20002: LD_INT 17
20004: PUSH
20005: LD_INT 18
20007: PUSH
20008: LD_INT 19
20010: PUSH
20011: LD_INT 20
20013: PUSH
20014: LD_INT 21
20016: PUSH
20017: LD_INT 22
20019: PUSH
20020: LD_INT 23
20022: PUSH
20023: LD_INT 24
20025: PUSH
20026: LD_INT 25
20028: PUSH
20029: LD_INT 26
20031: PUSH
20032: LD_INT 27
20034: PUSH
20035: LD_INT 28
20037: PUSH
20038: LD_INT 29
20040: PUSH
20041: LD_INT 30
20043: PUSH
20044: LD_INT 31
20046: PUSH
20047: LD_INT 32
20049: PUSH
20050: LD_INT 33
20052: PUSH
20053: LD_INT 34
20055: PUSH
20056: LD_INT 35
20058: PUSH
20059: LD_INT 36
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 101
20102: PUSH
20103: LD_INT 102
20105: PUSH
20106: LD_INT 103
20108: PUSH
20109: LD_INT 104
20111: PUSH
20112: LD_INT 105
20114: PUSH
20115: LD_INT 106
20117: PUSH
20118: LD_INT 107
20120: PUSH
20121: LD_INT 108
20123: PUSH
20124: LD_INT 109
20126: PUSH
20127: LD_INT 110
20129: PUSH
20130: LD_INT 111
20132: PUSH
20133: LD_INT 112
20135: PUSH
20136: LD_INT 113
20138: PUSH
20139: LD_INT 114
20141: PUSH
20142: LD_INT 115
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: ST_TO_ADDR
20166: GO 20169
20168: POP
// end else
20169: GO 20388
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
20171: LD_ADDR_VAR 0 1
20175: PUSH
20176: LD_INT 1
20178: PUSH
20179: LD_INT 2
20181: PUSH
20182: LD_INT 3
20184: PUSH
20185: LD_INT 4
20187: PUSH
20188: LD_INT 5
20190: PUSH
20191: LD_INT 6
20193: PUSH
20194: LD_INT 7
20196: PUSH
20197: LD_INT 8
20199: PUSH
20200: LD_INT 9
20202: PUSH
20203: LD_INT 10
20205: PUSH
20206: LD_INT 11
20208: PUSH
20209: LD_INT 12
20211: PUSH
20212: LD_INT 13
20214: PUSH
20215: LD_INT 14
20217: PUSH
20218: LD_INT 15
20220: PUSH
20221: LD_INT 16
20223: PUSH
20224: LD_INT 17
20226: PUSH
20227: LD_INT 18
20229: PUSH
20230: LD_INT 19
20232: PUSH
20233: LD_INT 20
20235: PUSH
20236: LD_INT 21
20238: PUSH
20239: LD_INT 22
20241: PUSH
20242: LD_INT 23
20244: PUSH
20245: LD_INT 24
20247: PUSH
20248: LD_INT 25
20250: PUSH
20251: LD_INT 26
20253: PUSH
20254: LD_INT 27
20256: PUSH
20257: LD_INT 28
20259: PUSH
20260: LD_INT 29
20262: PUSH
20263: LD_INT 30
20265: PUSH
20266: LD_INT 31
20268: PUSH
20269: LD_INT 32
20271: PUSH
20272: LD_INT 33
20274: PUSH
20275: LD_INT 34
20277: PUSH
20278: LD_INT 35
20280: PUSH
20281: LD_INT 36
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: PUSH
20322: LD_INT 101
20324: PUSH
20325: LD_INT 102
20327: PUSH
20328: LD_INT 103
20330: PUSH
20331: LD_INT 104
20333: PUSH
20334: LD_INT 105
20336: PUSH
20337: LD_INT 106
20339: PUSH
20340: LD_INT 107
20342: PUSH
20343: LD_INT 108
20345: PUSH
20346: LD_INT 109
20348: PUSH
20349: LD_INT 110
20351: PUSH
20352: LD_INT 111
20354: PUSH
20355: LD_INT 112
20357: PUSH
20358: LD_INT 113
20360: PUSH
20361: LD_INT 114
20363: PUSH
20364: LD_INT 115
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: ST_TO_ADDR
// if result then
20388: LD_VAR 0 1
20392: IFFALSE 20681
// begin normal :=  ;
20394: LD_ADDR_VAR 0 3
20398: PUSH
20399: LD_STRING 
20401: ST_TO_ADDR
// hardcore :=  ;
20402: LD_ADDR_VAR 0 4
20406: PUSH
20407: LD_STRING 
20409: ST_TO_ADDR
// for i = 1 to normalCounter do
20410: LD_ADDR_VAR 0 5
20414: PUSH
20415: DOUBLE
20416: LD_INT 1
20418: DEC
20419: ST_TO_ADDR
20420: LD_EXP 66
20424: PUSH
20425: FOR_TO
20426: IFFALSE 20527
// begin tmp := 0 ;
20428: LD_ADDR_VAR 0 2
20432: PUSH
20433: LD_STRING 0
20435: ST_TO_ADDR
// if result [ 1 ] then
20436: LD_VAR 0 1
20440: PUSH
20441: LD_INT 1
20443: ARRAY
20444: IFFALSE 20509
// if result [ 1 ] [ 1 ] = i then
20446: LD_VAR 0 1
20450: PUSH
20451: LD_INT 1
20453: ARRAY
20454: PUSH
20455: LD_INT 1
20457: ARRAY
20458: PUSH
20459: LD_VAR 0 5
20463: EQUAL
20464: IFFALSE 20509
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20466: LD_ADDR_VAR 0 1
20470: PUSH
20471: LD_VAR 0 1
20475: PPUSH
20476: LD_INT 1
20478: PPUSH
20479: LD_VAR 0 1
20483: PUSH
20484: LD_INT 1
20486: ARRAY
20487: PPUSH
20488: LD_INT 1
20490: PPUSH
20491: CALL_OW 3
20495: PPUSH
20496: CALL_OW 1
20500: ST_TO_ADDR
// tmp := 1 ;
20501: LD_ADDR_VAR 0 2
20505: PUSH
20506: LD_STRING 1
20508: ST_TO_ADDR
// end ; normal := normal & tmp ;
20509: LD_ADDR_VAR 0 3
20513: PUSH
20514: LD_VAR 0 3
20518: PUSH
20519: LD_VAR 0 2
20523: STR
20524: ST_TO_ADDR
// end ;
20525: GO 20425
20527: POP
20528: POP
// for i = 1 to hardcoreCounter do
20529: LD_ADDR_VAR 0 5
20533: PUSH
20534: DOUBLE
20535: LD_INT 1
20537: DEC
20538: ST_TO_ADDR
20539: LD_EXP 67
20543: PUSH
20544: FOR_TO
20545: IFFALSE 20650
// begin tmp := 0 ;
20547: LD_ADDR_VAR 0 2
20551: PUSH
20552: LD_STRING 0
20554: ST_TO_ADDR
// if result [ 2 ] then
20555: LD_VAR 0 1
20559: PUSH
20560: LD_INT 2
20562: ARRAY
20563: IFFALSE 20632
// if result [ 2 ] [ 1 ] = 100 + i then
20565: LD_VAR 0 1
20569: PUSH
20570: LD_INT 2
20572: ARRAY
20573: PUSH
20574: LD_INT 1
20576: ARRAY
20577: PUSH
20578: LD_INT 100
20580: PUSH
20581: LD_VAR 0 5
20585: PLUS
20586: EQUAL
20587: IFFALSE 20632
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20589: LD_ADDR_VAR 0 1
20593: PUSH
20594: LD_VAR 0 1
20598: PPUSH
20599: LD_INT 2
20601: PPUSH
20602: LD_VAR 0 1
20606: PUSH
20607: LD_INT 2
20609: ARRAY
20610: PPUSH
20611: LD_INT 1
20613: PPUSH
20614: CALL_OW 3
20618: PPUSH
20619: CALL_OW 1
20623: ST_TO_ADDR
// tmp := 1 ;
20624: LD_ADDR_VAR 0 2
20628: PUSH
20629: LD_STRING 1
20631: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20632: LD_ADDR_VAR 0 4
20636: PUSH
20637: LD_VAR 0 4
20641: PUSH
20642: LD_VAR 0 2
20646: STR
20647: ST_TO_ADDR
// end ;
20648: GO 20544
20650: POP
20651: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
20652: LD_STRING getStreamItemsFromMission("
20654: PUSH
20655: LD_VAR 0 3
20659: STR
20660: PUSH
20661: LD_STRING ","
20663: STR
20664: PUSH
20665: LD_VAR 0 4
20669: STR
20670: PUSH
20671: LD_STRING ")
20673: STR
20674: PPUSH
20675: CALL_OW 559
// end else
20679: GO 20688
// ToLua ( getStreamItemsFromMission("","") ) ;
20681: LD_STRING getStreamItemsFromMission("","")
20683: PPUSH
20684: CALL_OW 559
// end ;
20688: LD_VAR 0 1
20692: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20693: LD_EXP 65
20697: PUSH
20698: LD_EXP 70
20702: AND
20703: IFFALSE 20827
20705: GO 20707
20707: DISABLE
20708: LD_INT 0
20710: PPUSH
20711: PPUSH
// begin enable ;
20712: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20713: LD_ADDR_VAR 0 2
20717: PUSH
20718: LD_INT 22
20720: PUSH
20721: LD_OWVAR 2
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 2
20732: PUSH
20733: LD_INT 34
20735: PUSH
20736: LD_INT 7
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 34
20745: PUSH
20746: LD_INT 45
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: PUSH
20753: LD_INT 34
20755: PUSH
20756: LD_INT 28
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 34
20765: PUSH
20766: LD_INT 47
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: PPUSH
20784: CALL_OW 69
20788: ST_TO_ADDR
// if not tmp then
20789: LD_VAR 0 2
20793: NOT
20794: IFFALSE 20798
// exit ;
20796: GO 20827
// for i in tmp do
20798: LD_ADDR_VAR 0 1
20802: PUSH
20803: LD_VAR 0 2
20807: PUSH
20808: FOR_IN
20809: IFFALSE 20825
// begin SetLives ( i , 0 ) ;
20811: LD_VAR 0 1
20815: PPUSH
20816: LD_INT 0
20818: PPUSH
20819: CALL_OW 234
// end ;
20823: GO 20808
20825: POP
20826: POP
// end ;
20827: PPOPN 2
20829: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20830: LD_EXP 65
20834: PUSH
20835: LD_EXP 71
20839: AND
20840: IFFALSE 20924
20842: GO 20844
20844: DISABLE
20845: LD_INT 0
20847: PPUSH
20848: PPUSH
// begin enable ;
20849: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20850: LD_ADDR_VAR 0 2
20854: PUSH
20855: LD_INT 22
20857: PUSH
20858: LD_OWVAR 2
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PUSH
20867: LD_INT 32
20869: PUSH
20870: LD_INT 3
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PPUSH
20881: CALL_OW 69
20885: ST_TO_ADDR
// if not tmp then
20886: LD_VAR 0 2
20890: NOT
20891: IFFALSE 20895
// exit ;
20893: GO 20924
// for i in tmp do
20895: LD_ADDR_VAR 0 1
20899: PUSH
20900: LD_VAR 0 2
20904: PUSH
20905: FOR_IN
20906: IFFALSE 20922
// begin SetLives ( i , 0 ) ;
20908: LD_VAR 0 1
20912: PPUSH
20913: LD_INT 0
20915: PPUSH
20916: CALL_OW 234
// end ;
20920: GO 20905
20922: POP
20923: POP
// end ;
20924: PPOPN 2
20926: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20927: LD_EXP 65
20931: PUSH
20932: LD_EXP 68
20936: AND
20937: IFFALSE 21030
20939: GO 20941
20941: DISABLE
20942: LD_INT 0
20944: PPUSH
// begin enable ;
20945: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20946: LD_ADDR_VAR 0 1
20950: PUSH
20951: LD_INT 22
20953: PUSH
20954: LD_OWVAR 2
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 2
20965: PUSH
20966: LD_INT 25
20968: PUSH
20969: LD_INT 5
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: LD_INT 25
20978: PUSH
20979: LD_INT 9
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 25
20988: PUSH
20989: LD_INT 8
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PPUSH
21006: CALL_OW 69
21010: PUSH
21011: FOR_IN
21012: IFFALSE 21028
// begin SetClass ( i , 1 ) ;
21014: LD_VAR 0 1
21018: PPUSH
21019: LD_INT 1
21021: PPUSH
21022: CALL_OW 336
// end ;
21026: GO 21011
21028: POP
21029: POP
// end ;
21030: PPOPN 1
21032: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21033: LD_EXP 65
21037: PUSH
21038: LD_EXP 69
21042: AND
21043: PUSH
21044: LD_OWVAR 65
21048: PUSH
21049: LD_INT 7
21051: LESS
21052: AND
21053: IFFALSE 21067
21055: GO 21057
21057: DISABLE
// begin enable ;
21058: ENABLE
// game_speed := 7 ;
21059: LD_ADDR_OWVAR 65
21063: PUSH
21064: LD_INT 7
21066: ST_TO_ADDR
// end ;
21067: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21068: LD_EXP 65
21072: PUSH
21073: LD_EXP 72
21077: AND
21078: IFFALSE 21280
21080: GO 21082
21082: DISABLE
21083: LD_INT 0
21085: PPUSH
21086: PPUSH
21087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21088: LD_ADDR_VAR 0 3
21092: PUSH
21093: LD_INT 81
21095: PUSH
21096: LD_OWVAR 2
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 21
21107: PUSH
21108: LD_INT 1
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PPUSH
21119: CALL_OW 69
21123: ST_TO_ADDR
// if not tmp then
21124: LD_VAR 0 3
21128: NOT
21129: IFFALSE 21133
// exit ;
21131: GO 21280
// if tmp > 5 then
21133: LD_VAR 0 3
21137: PUSH
21138: LD_INT 5
21140: GREATER
21141: IFFALSE 21153
// k := 5 else
21143: LD_ADDR_VAR 0 2
21147: PUSH
21148: LD_INT 5
21150: ST_TO_ADDR
21151: GO 21163
// k := tmp ;
21153: LD_ADDR_VAR 0 2
21157: PUSH
21158: LD_VAR 0 3
21162: ST_TO_ADDR
// for i := 1 to k do
21163: LD_ADDR_VAR 0 1
21167: PUSH
21168: DOUBLE
21169: LD_INT 1
21171: DEC
21172: ST_TO_ADDR
21173: LD_VAR 0 2
21177: PUSH
21178: FOR_TO
21179: IFFALSE 21278
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21181: LD_VAR 0 3
21185: PUSH
21186: LD_VAR 0 1
21190: ARRAY
21191: PPUSH
21192: LD_VAR 0 1
21196: PUSH
21197: LD_INT 4
21199: MOD
21200: PUSH
21201: LD_INT 1
21203: PLUS
21204: PPUSH
21205: CALL_OW 259
21209: PUSH
21210: LD_INT 10
21212: LESS
21213: IFFALSE 21276
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21215: LD_VAR 0 3
21219: PUSH
21220: LD_VAR 0 1
21224: ARRAY
21225: PPUSH
21226: LD_VAR 0 1
21230: PUSH
21231: LD_INT 4
21233: MOD
21234: PUSH
21235: LD_INT 1
21237: PLUS
21238: PPUSH
21239: LD_VAR 0 3
21243: PUSH
21244: LD_VAR 0 1
21248: ARRAY
21249: PPUSH
21250: LD_VAR 0 1
21254: PUSH
21255: LD_INT 4
21257: MOD
21258: PUSH
21259: LD_INT 1
21261: PLUS
21262: PPUSH
21263: CALL_OW 259
21267: PUSH
21268: LD_INT 1
21270: PLUS
21271: PPUSH
21272: CALL_OW 237
21276: GO 21178
21278: POP
21279: POP
// end ;
21280: PPOPN 3
21282: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21283: LD_EXP 65
21287: PUSH
21288: LD_EXP 73
21292: AND
21293: IFFALSE 21313
21295: GO 21297
21297: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21298: LD_INT 4
21300: PPUSH
21301: LD_OWVAR 2
21305: PPUSH
21306: LD_INT 0
21308: PPUSH
21309: CALL_OW 324
21313: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21314: LD_EXP 65
21318: PUSH
21319: LD_EXP 102
21323: AND
21324: IFFALSE 21344
21326: GO 21328
21328: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21329: LD_INT 19
21331: PPUSH
21332: LD_OWVAR 2
21336: PPUSH
21337: LD_INT 0
21339: PPUSH
21340: CALL_OW 324
21344: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21345: LD_EXP 65
21349: PUSH
21350: LD_EXP 74
21354: AND
21355: IFFALSE 21457
21357: GO 21359
21359: DISABLE
21360: LD_INT 0
21362: PPUSH
21363: PPUSH
// begin enable ;
21364: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21365: LD_ADDR_VAR 0 2
21369: PUSH
21370: LD_INT 22
21372: PUSH
21373: LD_OWVAR 2
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PUSH
21382: LD_INT 2
21384: PUSH
21385: LD_INT 34
21387: PUSH
21388: LD_INT 11
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: LD_INT 34
21397: PUSH
21398: LD_INT 30
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: LIST
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PPUSH
21414: CALL_OW 69
21418: ST_TO_ADDR
// if not tmp then
21419: LD_VAR 0 2
21423: NOT
21424: IFFALSE 21428
// exit ;
21426: GO 21457
// for i in tmp do
21428: LD_ADDR_VAR 0 1
21432: PUSH
21433: LD_VAR 0 2
21437: PUSH
21438: FOR_IN
21439: IFFALSE 21455
// begin SetLives ( i , 0 ) ;
21441: LD_VAR 0 1
21445: PPUSH
21446: LD_INT 0
21448: PPUSH
21449: CALL_OW 234
// end ;
21453: GO 21438
21455: POP
21456: POP
// end ;
21457: PPOPN 2
21459: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21460: LD_EXP 65
21464: PUSH
21465: LD_EXP 75
21469: AND
21470: IFFALSE 21490
21472: GO 21474
21474: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21475: LD_INT 32
21477: PPUSH
21478: LD_OWVAR 2
21482: PPUSH
21483: LD_INT 0
21485: PPUSH
21486: CALL_OW 324
21490: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21491: LD_EXP 65
21495: PUSH
21496: LD_EXP 76
21500: AND
21501: IFFALSE 21682
21503: GO 21505
21505: DISABLE
21506: LD_INT 0
21508: PPUSH
21509: PPUSH
21510: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21511: LD_ADDR_VAR 0 2
21515: PUSH
21516: LD_INT 22
21518: PUSH
21519: LD_OWVAR 2
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 33
21530: PUSH
21531: LD_INT 3
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PPUSH
21542: CALL_OW 69
21546: ST_TO_ADDR
// if not tmp then
21547: LD_VAR 0 2
21551: NOT
21552: IFFALSE 21556
// exit ;
21554: GO 21682
// side := 0 ;
21556: LD_ADDR_VAR 0 3
21560: PUSH
21561: LD_INT 0
21563: ST_TO_ADDR
// for i := 1 to 8 do
21564: LD_ADDR_VAR 0 1
21568: PUSH
21569: DOUBLE
21570: LD_INT 1
21572: DEC
21573: ST_TO_ADDR
21574: LD_INT 8
21576: PUSH
21577: FOR_TO
21578: IFFALSE 21626
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21580: LD_OWVAR 2
21584: PUSH
21585: LD_VAR 0 1
21589: NONEQUAL
21590: PUSH
21591: LD_OWVAR 2
21595: PPUSH
21596: LD_VAR 0 1
21600: PPUSH
21601: CALL_OW 81
21605: PUSH
21606: LD_INT 2
21608: EQUAL
21609: AND
21610: IFFALSE 21624
// begin side := i ;
21612: LD_ADDR_VAR 0 3
21616: PUSH
21617: LD_VAR 0 1
21621: ST_TO_ADDR
// break ;
21622: GO 21626
// end ;
21624: GO 21577
21626: POP
21627: POP
// if not side then
21628: LD_VAR 0 3
21632: NOT
21633: IFFALSE 21637
// exit ;
21635: GO 21682
// for i := 1 to tmp do
21637: LD_ADDR_VAR 0 1
21641: PUSH
21642: DOUBLE
21643: LD_INT 1
21645: DEC
21646: ST_TO_ADDR
21647: LD_VAR 0 2
21651: PUSH
21652: FOR_TO
21653: IFFALSE 21680
// if Prob ( 60 ) then
21655: LD_INT 60
21657: PPUSH
21658: CALL_OW 13
21662: IFFALSE 21678
// SetSide ( i , side ) ;
21664: LD_VAR 0 1
21668: PPUSH
21669: LD_VAR 0 3
21673: PPUSH
21674: CALL_OW 235
21678: GO 21652
21680: POP
21681: POP
// end ;
21682: PPOPN 3
21684: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21685: LD_EXP 65
21689: PUSH
21690: LD_EXP 78
21694: AND
21695: IFFALSE 21814
21697: GO 21699
21699: DISABLE
21700: LD_INT 0
21702: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21703: LD_ADDR_VAR 0 1
21707: PUSH
21708: LD_INT 22
21710: PUSH
21711: LD_OWVAR 2
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: PUSH
21720: LD_INT 21
21722: PUSH
21723: LD_INT 1
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PUSH
21730: LD_INT 3
21732: PUSH
21733: LD_INT 23
21735: PUSH
21736: LD_INT 0
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: LIST
21751: PPUSH
21752: CALL_OW 69
21756: PUSH
21757: FOR_IN
21758: IFFALSE 21812
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21760: LD_VAR 0 1
21764: PPUSH
21765: CALL_OW 257
21769: PUSH
21770: LD_INT 1
21772: PUSH
21773: LD_INT 2
21775: PUSH
21776: LD_INT 3
21778: PUSH
21779: LD_INT 4
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: IN
21788: IFFALSE 21810
// SetClass ( un , rand ( 1 , 4 ) ) ;
21790: LD_VAR 0 1
21794: PPUSH
21795: LD_INT 1
21797: PPUSH
21798: LD_INT 4
21800: PPUSH
21801: CALL_OW 12
21805: PPUSH
21806: CALL_OW 336
21810: GO 21757
21812: POP
21813: POP
// end ;
21814: PPOPN 1
21816: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21817: LD_EXP 65
21821: PUSH
21822: LD_EXP 77
21826: AND
21827: IFFALSE 21906
21829: GO 21831
21831: DISABLE
21832: LD_INT 0
21834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21835: LD_ADDR_VAR 0 1
21839: PUSH
21840: LD_INT 22
21842: PUSH
21843: LD_OWVAR 2
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: PUSH
21852: LD_INT 21
21854: PUSH
21855: LD_INT 3
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: PPUSH
21866: CALL_OW 69
21870: ST_TO_ADDR
// if not tmp then
21871: LD_VAR 0 1
21875: NOT
21876: IFFALSE 21880
// exit ;
21878: GO 21906
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21880: LD_VAR 0 1
21884: PUSH
21885: LD_INT 1
21887: PPUSH
21888: LD_VAR 0 1
21892: PPUSH
21893: CALL_OW 12
21897: ARRAY
21898: PPUSH
21899: LD_INT 100
21901: PPUSH
21902: CALL_OW 234
// end ;
21906: PPOPN 1
21908: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21909: LD_EXP 65
21913: PUSH
21914: LD_EXP 79
21918: AND
21919: IFFALSE 22017
21921: GO 21923
21923: DISABLE
21924: LD_INT 0
21926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21927: LD_ADDR_VAR 0 1
21931: PUSH
21932: LD_INT 22
21934: PUSH
21935: LD_OWVAR 2
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 21
21946: PUSH
21947: LD_INT 1
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PPUSH
21958: CALL_OW 69
21962: ST_TO_ADDR
// if not tmp then
21963: LD_VAR 0 1
21967: NOT
21968: IFFALSE 21972
// exit ;
21970: GO 22017
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21972: LD_VAR 0 1
21976: PUSH
21977: LD_INT 1
21979: PPUSH
21980: LD_VAR 0 1
21984: PPUSH
21985: CALL_OW 12
21989: ARRAY
21990: PPUSH
21991: LD_INT 1
21993: PPUSH
21994: LD_INT 4
21996: PPUSH
21997: CALL_OW 12
22001: PPUSH
22002: LD_INT 3000
22004: PPUSH
22005: LD_INT 9000
22007: PPUSH
22008: CALL_OW 12
22012: PPUSH
22013: CALL_OW 492
// end ;
22017: PPOPN 1
22019: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22020: LD_EXP 65
22024: PUSH
22025: LD_EXP 80
22029: AND
22030: IFFALSE 22050
22032: GO 22034
22034: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22035: LD_INT 1
22037: PPUSH
22038: LD_OWVAR 2
22042: PPUSH
22043: LD_INT 0
22045: PPUSH
22046: CALL_OW 324
22050: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22051: LD_EXP 65
22055: PUSH
22056: LD_EXP 81
22060: AND
22061: IFFALSE 22144
22063: GO 22065
22065: DISABLE
22066: LD_INT 0
22068: PPUSH
22069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22070: LD_ADDR_VAR 0 2
22074: PUSH
22075: LD_INT 22
22077: PUSH
22078: LD_OWVAR 2
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 21
22089: PUSH
22090: LD_INT 3
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PPUSH
22101: CALL_OW 69
22105: ST_TO_ADDR
// if not tmp then
22106: LD_VAR 0 2
22110: NOT
22111: IFFALSE 22115
// exit ;
22113: GO 22144
// for i in tmp do
22115: LD_ADDR_VAR 0 1
22119: PUSH
22120: LD_VAR 0 2
22124: PUSH
22125: FOR_IN
22126: IFFALSE 22142
// SetBLevel ( i , 10 ) ;
22128: LD_VAR 0 1
22132: PPUSH
22133: LD_INT 10
22135: PPUSH
22136: CALL_OW 241
22140: GO 22125
22142: POP
22143: POP
// end ;
22144: PPOPN 2
22146: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22147: LD_EXP 65
22151: PUSH
22152: LD_EXP 82
22156: AND
22157: IFFALSE 22268
22159: GO 22161
22161: DISABLE
22162: LD_INT 0
22164: PPUSH
22165: PPUSH
22166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22167: LD_ADDR_VAR 0 3
22171: PUSH
22172: LD_INT 22
22174: PUSH
22175: LD_OWVAR 2
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PUSH
22184: LD_INT 25
22186: PUSH
22187: LD_INT 1
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PPUSH
22198: CALL_OW 69
22202: ST_TO_ADDR
// if not tmp then
22203: LD_VAR 0 3
22207: NOT
22208: IFFALSE 22212
// exit ;
22210: GO 22268
// un := tmp [ rand ( 1 , tmp ) ] ;
22212: LD_ADDR_VAR 0 2
22216: PUSH
22217: LD_VAR 0 3
22221: PUSH
22222: LD_INT 1
22224: PPUSH
22225: LD_VAR 0 3
22229: PPUSH
22230: CALL_OW 12
22234: ARRAY
22235: ST_TO_ADDR
// if Crawls ( un ) then
22236: LD_VAR 0 2
22240: PPUSH
22241: CALL_OW 318
22245: IFFALSE 22256
// ComWalk ( un ) ;
22247: LD_VAR 0 2
22251: PPUSH
22252: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22256: LD_VAR 0 2
22260: PPUSH
22261: LD_INT 5
22263: PPUSH
22264: CALL_OW 336
// end ;
22268: PPOPN 3
22270: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
22271: LD_EXP 65
22275: PUSH
22276: LD_EXP 83
22280: AND
22281: PUSH
22282: LD_OWVAR 67
22286: PUSH
22287: LD_INT 3
22289: LESS
22290: AND
22291: IFFALSE 22310
22293: GO 22295
22295: DISABLE
// Difficulty := Difficulty + 1 ;
22296: LD_ADDR_OWVAR 67
22300: PUSH
22301: LD_OWVAR 67
22305: PUSH
22306: LD_INT 1
22308: PLUS
22309: ST_TO_ADDR
22310: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22311: LD_EXP 65
22315: PUSH
22316: LD_EXP 84
22320: AND
22321: IFFALSE 22424
22323: GO 22325
22325: DISABLE
22326: LD_INT 0
22328: PPUSH
// begin for i := 1 to 5 do
22329: LD_ADDR_VAR 0 1
22333: PUSH
22334: DOUBLE
22335: LD_INT 1
22337: DEC
22338: ST_TO_ADDR
22339: LD_INT 5
22341: PUSH
22342: FOR_TO
22343: IFFALSE 22422
// begin uc_nation := nation_nature ;
22345: LD_ADDR_OWVAR 21
22349: PUSH
22350: LD_INT 0
22352: ST_TO_ADDR
// uc_side := 0 ;
22353: LD_ADDR_OWVAR 20
22357: PUSH
22358: LD_INT 0
22360: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22361: LD_ADDR_OWVAR 29
22365: PUSH
22366: LD_INT 12
22368: PUSH
22369: LD_INT 12
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: ST_TO_ADDR
// hc_agressivity := 20 ;
22376: LD_ADDR_OWVAR 35
22380: PUSH
22381: LD_INT 20
22383: ST_TO_ADDR
// hc_class := class_tiger ;
22384: LD_ADDR_OWVAR 28
22388: PUSH
22389: LD_INT 14
22391: ST_TO_ADDR
// hc_gallery :=  ;
22392: LD_ADDR_OWVAR 33
22396: PUSH
22397: LD_STRING 
22399: ST_TO_ADDR
// hc_name :=  ;
22400: LD_ADDR_OWVAR 26
22404: PUSH
22405: LD_STRING 
22407: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22408: CALL_OW 44
22412: PPUSH
22413: LD_INT 0
22415: PPUSH
22416: CALL_OW 51
// end ;
22420: GO 22342
22422: POP
22423: POP
// end ;
22424: PPOPN 1
22426: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22427: LD_EXP 65
22431: PUSH
22432: LD_EXP 85
22436: AND
22437: IFFALSE 22446
22439: GO 22441
22441: DISABLE
// StreamSibBomb ;
22442: CALL 22447 0 0
22446: END
// export function StreamSibBomb ; var i , x , y ; begin
22447: LD_INT 0
22449: PPUSH
22450: PPUSH
22451: PPUSH
22452: PPUSH
// result := false ;
22453: LD_ADDR_VAR 0 1
22457: PUSH
22458: LD_INT 0
22460: ST_TO_ADDR
// for i := 1 to 16 do
22461: LD_ADDR_VAR 0 2
22465: PUSH
22466: DOUBLE
22467: LD_INT 1
22469: DEC
22470: ST_TO_ADDR
22471: LD_INT 16
22473: PUSH
22474: FOR_TO
22475: IFFALSE 22674
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22477: LD_ADDR_VAR 0 3
22481: PUSH
22482: LD_INT 10
22484: PUSH
22485: LD_INT 20
22487: PUSH
22488: LD_INT 30
22490: PUSH
22491: LD_INT 40
22493: PUSH
22494: LD_INT 50
22496: PUSH
22497: LD_INT 60
22499: PUSH
22500: LD_INT 70
22502: PUSH
22503: LD_INT 80
22505: PUSH
22506: LD_INT 90
22508: PUSH
22509: LD_INT 100
22511: PUSH
22512: LD_INT 110
22514: PUSH
22515: LD_INT 120
22517: PUSH
22518: LD_INT 130
22520: PUSH
22521: LD_INT 140
22523: PUSH
22524: LD_INT 150
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: PUSH
22544: LD_INT 1
22546: PPUSH
22547: LD_INT 15
22549: PPUSH
22550: CALL_OW 12
22554: ARRAY
22555: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22556: LD_ADDR_VAR 0 4
22560: PUSH
22561: LD_INT 10
22563: PUSH
22564: LD_INT 20
22566: PUSH
22567: LD_INT 30
22569: PUSH
22570: LD_INT 40
22572: PUSH
22573: LD_INT 50
22575: PUSH
22576: LD_INT 60
22578: PUSH
22579: LD_INT 70
22581: PUSH
22582: LD_INT 80
22584: PUSH
22585: LD_INT 90
22587: PUSH
22588: LD_INT 100
22590: PUSH
22591: LD_INT 110
22593: PUSH
22594: LD_INT 120
22596: PUSH
22597: LD_INT 130
22599: PUSH
22600: LD_INT 140
22602: PUSH
22603: LD_INT 150
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 1
22625: PPUSH
22626: LD_INT 15
22628: PPUSH
22629: CALL_OW 12
22633: ARRAY
22634: ST_TO_ADDR
// if ValidHex ( x , y ) then
22635: LD_VAR 0 3
22639: PPUSH
22640: LD_VAR 0 4
22644: PPUSH
22645: CALL_OW 488
22649: IFFALSE 22672
// begin result := [ x , y ] ;
22651: LD_ADDR_VAR 0 1
22655: PUSH
22656: LD_VAR 0 3
22660: PUSH
22661: LD_VAR 0 4
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: ST_TO_ADDR
// break ;
22670: GO 22674
// end ; end ;
22672: GO 22474
22674: POP
22675: POP
// if result then
22676: LD_VAR 0 1
22680: IFFALSE 22740
// begin ToLua ( playSibBomb() ) ;
22682: LD_STRING playSibBomb()
22684: PPUSH
22685: CALL_OW 559
// wait ( 0 0$14 ) ;
22689: LD_INT 490
22691: PPUSH
22692: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22696: LD_VAR 0 1
22700: PUSH
22701: LD_INT 1
22703: ARRAY
22704: PPUSH
22705: LD_VAR 0 1
22709: PUSH
22710: LD_INT 2
22712: ARRAY
22713: PPUSH
22714: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22718: LD_VAR 0 1
22722: PUSH
22723: LD_INT 1
22725: ARRAY
22726: PPUSH
22727: LD_VAR 0 1
22731: PUSH
22732: LD_INT 2
22734: ARRAY
22735: PPUSH
22736: CALL_OW 429
// end ; end ;
22740: LD_VAR 0 1
22744: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22745: LD_EXP 65
22749: PUSH
22750: LD_EXP 87
22754: AND
22755: IFFALSE 22767
22757: GO 22759
22759: DISABLE
// YouLost (  ) ;
22760: LD_STRING 
22762: PPUSH
22763: CALL_OW 104
22767: END
// every 0 0$1 trigger StreamModeActive and sFog do
22768: LD_EXP 65
22772: PUSH
22773: LD_EXP 86
22777: AND
22778: IFFALSE 22792
22780: GO 22782
22782: DISABLE
// FogOff ( your_side ) ;
22783: LD_OWVAR 2
22787: PPUSH
22788: CALL_OW 344
22792: END
// every 0 0$1 trigger StreamModeActive and sSun do
22793: LD_EXP 65
22797: PUSH
22798: LD_EXP 88
22802: AND
22803: IFFALSE 22831
22805: GO 22807
22807: DISABLE
// begin solar_recharge_percent := 0 ;
22808: LD_ADDR_OWVAR 79
22812: PUSH
22813: LD_INT 0
22815: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22816: LD_INT 10500
22818: PPUSH
22819: CALL_OW 67
// solar_recharge_percent := 100 ;
22823: LD_ADDR_OWVAR 79
22827: PUSH
22828: LD_INT 100
22830: ST_TO_ADDR
// end ;
22831: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22832: LD_EXP 65
22836: PUSH
22837: LD_EXP 89
22841: AND
22842: IFFALSE 23081
22844: GO 22846
22846: DISABLE
22847: LD_INT 0
22849: PPUSH
22850: PPUSH
22851: PPUSH
// begin tmp := [ ] ;
22852: LD_ADDR_VAR 0 3
22856: PUSH
22857: EMPTY
22858: ST_TO_ADDR
// for i := 1 to 6 do
22859: LD_ADDR_VAR 0 1
22863: PUSH
22864: DOUBLE
22865: LD_INT 1
22867: DEC
22868: ST_TO_ADDR
22869: LD_INT 6
22871: PUSH
22872: FOR_TO
22873: IFFALSE 22978
// begin uc_nation := nation_nature ;
22875: LD_ADDR_OWVAR 21
22879: PUSH
22880: LD_INT 0
22882: ST_TO_ADDR
// uc_side := 0 ;
22883: LD_ADDR_OWVAR 20
22887: PUSH
22888: LD_INT 0
22890: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22891: LD_ADDR_OWVAR 29
22895: PUSH
22896: LD_INT 12
22898: PUSH
22899: LD_INT 12
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: ST_TO_ADDR
// hc_agressivity := 20 ;
22906: LD_ADDR_OWVAR 35
22910: PUSH
22911: LD_INT 20
22913: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22914: LD_ADDR_OWVAR 28
22918: PUSH
22919: LD_INT 17
22921: ST_TO_ADDR
// hc_gallery :=  ;
22922: LD_ADDR_OWVAR 33
22926: PUSH
22927: LD_STRING 
22929: ST_TO_ADDR
// hc_name :=  ;
22930: LD_ADDR_OWVAR 26
22934: PUSH
22935: LD_STRING 
22937: ST_TO_ADDR
// un := CreateHuman ;
22938: LD_ADDR_VAR 0 2
22942: PUSH
22943: CALL_OW 44
22947: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22948: LD_VAR 0 2
22952: PPUSH
22953: LD_INT 1
22955: PPUSH
22956: CALL_OW 51
// tmp := tmp ^ un ;
22960: LD_ADDR_VAR 0 3
22964: PUSH
22965: LD_VAR 0 3
22969: PUSH
22970: LD_VAR 0 2
22974: ADD
22975: ST_TO_ADDR
// end ;
22976: GO 22872
22978: POP
22979: POP
// repeat wait ( 0 0$1 ) ;
22980: LD_INT 35
22982: PPUSH
22983: CALL_OW 67
// for un in tmp do
22987: LD_ADDR_VAR 0 2
22991: PUSH
22992: LD_VAR 0 3
22996: PUSH
22997: FOR_IN
22998: IFFALSE 23072
// begin if IsDead ( un ) then
23000: LD_VAR 0 2
23004: PPUSH
23005: CALL_OW 301
23009: IFFALSE 23029
// begin tmp := tmp diff un ;
23011: LD_ADDR_VAR 0 3
23015: PUSH
23016: LD_VAR 0 3
23020: PUSH
23021: LD_VAR 0 2
23025: DIFF
23026: ST_TO_ADDR
// continue ;
23027: GO 22997
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23029: LD_VAR 0 2
23033: PPUSH
23034: LD_INT 3
23036: PUSH
23037: LD_INT 22
23039: PUSH
23040: LD_INT 0
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: PPUSH
23051: CALL_OW 69
23055: PPUSH
23056: LD_VAR 0 2
23060: PPUSH
23061: CALL_OW 74
23065: PPUSH
23066: CALL_OW 115
// end ;
23070: GO 22997
23072: POP
23073: POP
// until not tmp ;
23074: LD_VAR 0 3
23078: NOT
23079: IFFALSE 22980
// end ;
23081: PPOPN 3
23083: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23084: LD_EXP 65
23088: PUSH
23089: LD_EXP 90
23093: AND
23094: IFFALSE 23148
23096: GO 23098
23098: DISABLE
// begin ToLua ( displayTroll(); ) ;
23099: LD_STRING displayTroll();
23101: PPUSH
23102: CALL_OW 559
// wait ( 3 3$00 ) ;
23106: LD_INT 6300
23108: PPUSH
23109: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23113: LD_STRING hideTroll();
23115: PPUSH
23116: CALL_OW 559
// wait ( 1 1$00 ) ;
23120: LD_INT 2100
23122: PPUSH
23123: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23127: LD_STRING displayTroll();
23129: PPUSH
23130: CALL_OW 559
// wait ( 1 1$00 ) ;
23134: LD_INT 2100
23136: PPUSH
23137: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23141: LD_STRING hideTroll();
23143: PPUSH
23144: CALL_OW 559
// end ;
23148: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23149: LD_EXP 65
23153: PUSH
23154: LD_EXP 91
23158: AND
23159: IFFALSE 23222
23161: GO 23163
23163: DISABLE
23164: LD_INT 0
23166: PPUSH
// begin p := 0 ;
23167: LD_ADDR_VAR 0 1
23171: PUSH
23172: LD_INT 0
23174: ST_TO_ADDR
// repeat game_speed := 1 ;
23175: LD_ADDR_OWVAR 65
23179: PUSH
23180: LD_INT 1
23182: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23183: LD_INT 35
23185: PPUSH
23186: CALL_OW 67
// p := p + 1 ;
23190: LD_ADDR_VAR 0 1
23194: PUSH
23195: LD_VAR 0 1
23199: PUSH
23200: LD_INT 1
23202: PLUS
23203: ST_TO_ADDR
// until p >= 60 ;
23204: LD_VAR 0 1
23208: PUSH
23209: LD_INT 60
23211: GREATEREQUAL
23212: IFFALSE 23175
// game_speed := 4 ;
23214: LD_ADDR_OWVAR 65
23218: PUSH
23219: LD_INT 4
23221: ST_TO_ADDR
// end ;
23222: PPOPN 1
23224: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23225: LD_EXP 65
23229: PUSH
23230: LD_EXP 92
23234: AND
23235: IFFALSE 23381
23237: GO 23239
23239: DISABLE
23240: LD_INT 0
23242: PPUSH
23243: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23244: LD_ADDR_VAR 0 1
23248: PUSH
23249: LD_INT 22
23251: PUSH
23252: LD_OWVAR 2
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 2
23263: PUSH
23264: LD_INT 30
23266: PUSH
23267: LD_INT 0
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 30
23276: PUSH
23277: LD_INT 1
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: LIST
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PPUSH
23293: CALL_OW 69
23297: ST_TO_ADDR
// if not depot then
23298: LD_VAR 0 1
23302: NOT
23303: IFFALSE 23307
// exit ;
23305: GO 23381
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23307: LD_ADDR_VAR 0 2
23311: PUSH
23312: LD_VAR 0 1
23316: PUSH
23317: LD_INT 1
23319: PPUSH
23320: LD_VAR 0 1
23324: PPUSH
23325: CALL_OW 12
23329: ARRAY
23330: PPUSH
23331: CALL_OW 274
23335: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23336: LD_VAR 0 2
23340: PPUSH
23341: LD_INT 1
23343: PPUSH
23344: LD_INT 0
23346: PPUSH
23347: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23351: LD_VAR 0 2
23355: PPUSH
23356: LD_INT 2
23358: PPUSH
23359: LD_INT 0
23361: PPUSH
23362: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23366: LD_VAR 0 2
23370: PPUSH
23371: LD_INT 3
23373: PPUSH
23374: LD_INT 0
23376: PPUSH
23377: CALL_OW 277
// end ;
23381: PPOPN 2
23383: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23384: LD_EXP 65
23388: PUSH
23389: LD_EXP 93
23393: AND
23394: IFFALSE 23491
23396: GO 23398
23398: DISABLE
23399: LD_INT 0
23401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23402: LD_ADDR_VAR 0 1
23406: PUSH
23407: LD_INT 22
23409: PUSH
23410: LD_OWVAR 2
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 21
23421: PUSH
23422: LD_INT 1
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: LD_INT 3
23431: PUSH
23432: LD_INT 23
23434: PUSH
23435: LD_INT 0
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: LIST
23450: PPUSH
23451: CALL_OW 69
23455: ST_TO_ADDR
// if not tmp then
23456: LD_VAR 0 1
23460: NOT
23461: IFFALSE 23465
// exit ;
23463: GO 23491
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23465: LD_VAR 0 1
23469: PUSH
23470: LD_INT 1
23472: PPUSH
23473: LD_VAR 0 1
23477: PPUSH
23478: CALL_OW 12
23482: ARRAY
23483: PPUSH
23484: LD_INT 200
23486: PPUSH
23487: CALL_OW 234
// end ;
23491: PPOPN 1
23493: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23494: LD_EXP 65
23498: PUSH
23499: LD_EXP 94
23503: AND
23504: IFFALSE 23583
23506: GO 23508
23508: DISABLE
23509: LD_INT 0
23511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23512: LD_ADDR_VAR 0 1
23516: PUSH
23517: LD_INT 22
23519: PUSH
23520: LD_OWVAR 2
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PUSH
23529: LD_INT 21
23531: PUSH
23532: LD_INT 2
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PPUSH
23543: CALL_OW 69
23547: ST_TO_ADDR
// if not tmp then
23548: LD_VAR 0 1
23552: NOT
23553: IFFALSE 23557
// exit ;
23555: GO 23583
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23557: LD_VAR 0 1
23561: PUSH
23562: LD_INT 1
23564: PPUSH
23565: LD_VAR 0 1
23569: PPUSH
23570: CALL_OW 12
23574: ARRAY
23575: PPUSH
23576: LD_INT 60
23578: PPUSH
23579: CALL_OW 234
// end ;
23583: PPOPN 1
23585: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23586: LD_EXP 65
23590: PUSH
23591: LD_EXP 95
23595: AND
23596: IFFALSE 23695
23598: GO 23600
23600: DISABLE
23601: LD_INT 0
23603: PPUSH
23604: PPUSH
// begin enable ;
23605: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23606: LD_ADDR_VAR 0 1
23610: PUSH
23611: LD_INT 22
23613: PUSH
23614: LD_OWVAR 2
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 61
23625: PUSH
23626: EMPTY
23627: LIST
23628: PUSH
23629: LD_INT 33
23631: PUSH
23632: LD_INT 2
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: LIST
23643: PPUSH
23644: CALL_OW 69
23648: ST_TO_ADDR
// if not tmp then
23649: LD_VAR 0 1
23653: NOT
23654: IFFALSE 23658
// exit ;
23656: GO 23695
// for i in tmp do
23658: LD_ADDR_VAR 0 2
23662: PUSH
23663: LD_VAR 0 1
23667: PUSH
23668: FOR_IN
23669: IFFALSE 23693
// if IsControledBy ( i ) then
23671: LD_VAR 0 2
23675: PPUSH
23676: CALL_OW 312
23680: IFFALSE 23691
// ComUnlink ( i ) ;
23682: LD_VAR 0 2
23686: PPUSH
23687: CALL_OW 136
23691: GO 23668
23693: POP
23694: POP
// end ;
23695: PPOPN 2
23697: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23698: LD_EXP 65
23702: PUSH
23703: LD_EXP 96
23707: AND
23708: IFFALSE 23848
23710: GO 23712
23712: DISABLE
23713: LD_INT 0
23715: PPUSH
23716: PPUSH
// begin ToLua ( displayPowell(); ) ;
23717: LD_STRING displayPowell();
23719: PPUSH
23720: CALL_OW 559
// uc_side := 0 ;
23724: LD_ADDR_OWVAR 20
23728: PUSH
23729: LD_INT 0
23731: ST_TO_ADDR
// uc_nation := 2 ;
23732: LD_ADDR_OWVAR 21
23736: PUSH
23737: LD_INT 2
23739: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23740: LD_ADDR_OWVAR 37
23744: PUSH
23745: LD_INT 14
23747: ST_TO_ADDR
// vc_engine := engine_siberite ;
23748: LD_ADDR_OWVAR 39
23752: PUSH
23753: LD_INT 3
23755: ST_TO_ADDR
// vc_control := control_apeman ;
23756: LD_ADDR_OWVAR 38
23760: PUSH
23761: LD_INT 5
23763: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23764: LD_ADDR_OWVAR 40
23768: PUSH
23769: LD_INT 29
23771: ST_TO_ADDR
// un := CreateVehicle ;
23772: LD_ADDR_VAR 0 2
23776: PUSH
23777: CALL_OW 45
23781: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23782: LD_VAR 0 2
23786: PPUSH
23787: LD_INT 1
23789: PPUSH
23790: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23794: LD_INT 35
23796: PPUSH
23797: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23801: LD_VAR 0 2
23805: PPUSH
23806: LD_INT 22
23808: PUSH
23809: LD_OWVAR 2
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PPUSH
23818: CALL_OW 69
23822: PPUSH
23823: LD_VAR 0 2
23827: PPUSH
23828: CALL_OW 74
23832: PPUSH
23833: CALL_OW 115
// until IsDead ( un ) ;
23837: LD_VAR 0 2
23841: PPUSH
23842: CALL_OW 301
23846: IFFALSE 23794
// end ;
23848: PPOPN 2
23850: END
// every 0 0$1 trigger StreamModeActive and sStu do
23851: LD_EXP 65
23855: PUSH
23856: LD_EXP 104
23860: AND
23861: IFFALSE 23877
23863: GO 23865
23865: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23866: LD_STRING displayStucuk();
23868: PPUSH
23869: CALL_OW 559
// ResetFog ;
23873: CALL_OW 335
// end ;
23877: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23878: LD_EXP 65
23882: PUSH
23883: LD_EXP 97
23887: AND
23888: IFFALSE 24029
23890: GO 23892
23892: DISABLE
23893: LD_INT 0
23895: PPUSH
23896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23897: LD_ADDR_VAR 0 2
23901: PUSH
23902: LD_INT 22
23904: PUSH
23905: LD_OWVAR 2
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 21
23916: PUSH
23917: LD_INT 1
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PPUSH
23928: CALL_OW 69
23932: ST_TO_ADDR
// if not tmp then
23933: LD_VAR 0 2
23937: NOT
23938: IFFALSE 23942
// exit ;
23940: GO 24029
// un := tmp [ rand ( 1 , tmp ) ] ;
23942: LD_ADDR_VAR 0 1
23946: PUSH
23947: LD_VAR 0 2
23951: PUSH
23952: LD_INT 1
23954: PPUSH
23955: LD_VAR 0 2
23959: PPUSH
23960: CALL_OW 12
23964: ARRAY
23965: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23966: LD_VAR 0 1
23970: PPUSH
23971: LD_INT 0
23973: PPUSH
23974: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23978: LD_VAR 0 1
23982: PPUSH
23983: LD_OWVAR 3
23987: PUSH
23988: LD_VAR 0 1
23992: DIFF
23993: PPUSH
23994: LD_VAR 0 1
23998: PPUSH
23999: CALL_OW 74
24003: PPUSH
24004: CALL_OW 115
// wait ( 0 0$20 ) ;
24008: LD_INT 700
24010: PPUSH
24011: CALL_OW 67
// SetSide ( un , your_side ) ;
24015: LD_VAR 0 1
24019: PPUSH
24020: LD_OWVAR 2
24024: PPUSH
24025: CALL_OW 235
// end ;
24029: PPOPN 2
24031: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24032: LD_EXP 65
24036: PUSH
24037: LD_EXP 98
24041: AND
24042: IFFALSE 24148
24044: GO 24046
24046: DISABLE
24047: LD_INT 0
24049: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24050: LD_ADDR_VAR 0 1
24054: PUSH
24055: LD_INT 22
24057: PUSH
24058: LD_OWVAR 2
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 2
24069: PUSH
24070: LD_INT 30
24072: PUSH
24073: LD_INT 0
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 30
24082: PUSH
24083: LD_INT 1
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: LIST
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PPUSH
24099: CALL_OW 69
24103: ST_TO_ADDR
// if not depot then
24104: LD_VAR 0 1
24108: NOT
24109: IFFALSE 24113
// exit ;
24111: GO 24148
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24113: LD_VAR 0 1
24117: PUSH
24118: LD_INT 1
24120: ARRAY
24121: PPUSH
24122: CALL_OW 250
24126: PPUSH
24127: LD_VAR 0 1
24131: PUSH
24132: LD_INT 1
24134: ARRAY
24135: PPUSH
24136: CALL_OW 251
24140: PPUSH
24141: LD_INT 70
24143: PPUSH
24144: CALL_OW 495
// end ;
24148: PPOPN 1
24150: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24151: LD_EXP 65
24155: PUSH
24156: LD_EXP 99
24160: AND
24161: IFFALSE 24372
24163: GO 24165
24165: DISABLE
24166: LD_INT 0
24168: PPUSH
24169: PPUSH
24170: PPUSH
24171: PPUSH
24172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24173: LD_ADDR_VAR 0 5
24177: PUSH
24178: LD_INT 22
24180: PUSH
24181: LD_OWVAR 2
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 21
24192: PUSH
24193: LD_INT 1
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: PPUSH
24204: CALL_OW 69
24208: ST_TO_ADDR
// if not tmp then
24209: LD_VAR 0 5
24213: NOT
24214: IFFALSE 24218
// exit ;
24216: GO 24372
// for i in tmp do
24218: LD_ADDR_VAR 0 1
24222: PUSH
24223: LD_VAR 0 5
24227: PUSH
24228: FOR_IN
24229: IFFALSE 24370
// begin d := rand ( 0 , 5 ) ;
24231: LD_ADDR_VAR 0 4
24235: PUSH
24236: LD_INT 0
24238: PPUSH
24239: LD_INT 5
24241: PPUSH
24242: CALL_OW 12
24246: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24247: LD_ADDR_VAR 0 2
24251: PUSH
24252: LD_VAR 0 1
24256: PPUSH
24257: CALL_OW 250
24261: PPUSH
24262: LD_VAR 0 4
24266: PPUSH
24267: LD_INT 3
24269: PPUSH
24270: LD_INT 12
24272: PPUSH
24273: CALL_OW 12
24277: PPUSH
24278: CALL_OW 272
24282: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24283: LD_ADDR_VAR 0 3
24287: PUSH
24288: LD_VAR 0 1
24292: PPUSH
24293: CALL_OW 251
24297: PPUSH
24298: LD_VAR 0 4
24302: PPUSH
24303: LD_INT 3
24305: PPUSH
24306: LD_INT 12
24308: PPUSH
24309: CALL_OW 12
24313: PPUSH
24314: CALL_OW 273
24318: ST_TO_ADDR
// if ValidHex ( x , y ) then
24319: LD_VAR 0 2
24323: PPUSH
24324: LD_VAR 0 3
24328: PPUSH
24329: CALL_OW 488
24333: IFFALSE 24368
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24335: LD_VAR 0 1
24339: PPUSH
24340: LD_VAR 0 2
24344: PPUSH
24345: LD_VAR 0 3
24349: PPUSH
24350: LD_INT 3
24352: PPUSH
24353: LD_INT 6
24355: PPUSH
24356: CALL_OW 12
24360: PPUSH
24361: LD_INT 1
24363: PPUSH
24364: CALL_OW 483
// end ;
24368: GO 24228
24370: POP
24371: POP
// end ;
24372: PPOPN 5
24374: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24375: LD_EXP 65
24379: PUSH
24380: LD_EXP 100
24384: AND
24385: IFFALSE 24479
24387: GO 24389
24389: DISABLE
24390: LD_INT 0
24392: PPUSH
24393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24394: LD_ADDR_VAR 0 2
24398: PUSH
24399: LD_INT 22
24401: PUSH
24402: LD_OWVAR 2
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: PUSH
24411: LD_INT 32
24413: PUSH
24414: LD_INT 1
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: PUSH
24421: LD_INT 21
24423: PUSH
24424: LD_INT 2
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: LIST
24435: PPUSH
24436: CALL_OW 69
24440: ST_TO_ADDR
// if not tmp then
24441: LD_VAR 0 2
24445: NOT
24446: IFFALSE 24450
// exit ;
24448: GO 24479
// for i in tmp do
24450: LD_ADDR_VAR 0 1
24454: PUSH
24455: LD_VAR 0 2
24459: PUSH
24460: FOR_IN
24461: IFFALSE 24477
// SetFuel ( i , 0 ) ;
24463: LD_VAR 0 1
24467: PPUSH
24468: LD_INT 0
24470: PPUSH
24471: CALL_OW 240
24475: GO 24460
24477: POP
24478: POP
// end ;
24479: PPOPN 2
24481: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24482: LD_EXP 65
24486: PUSH
24487: LD_EXP 101
24491: AND
24492: IFFALSE 24558
24494: GO 24496
24496: DISABLE
24497: LD_INT 0
24499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24500: LD_ADDR_VAR 0 1
24504: PUSH
24505: LD_INT 22
24507: PUSH
24508: LD_OWVAR 2
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 30
24519: PUSH
24520: LD_INT 29
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PPUSH
24531: CALL_OW 69
24535: ST_TO_ADDR
// if not tmp then
24536: LD_VAR 0 1
24540: NOT
24541: IFFALSE 24545
// exit ;
24543: GO 24558
// DestroyUnit ( tmp [ 1 ] ) ;
24545: LD_VAR 0 1
24549: PUSH
24550: LD_INT 1
24552: ARRAY
24553: PPUSH
24554: CALL_OW 65
// end ;
24558: PPOPN 1
24560: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24561: LD_EXP 65
24565: PUSH
24566: LD_EXP 103
24570: AND
24571: IFFALSE 24700
24573: GO 24575
24575: DISABLE
24576: LD_INT 0
24578: PPUSH
// begin uc_side := 0 ;
24579: LD_ADDR_OWVAR 20
24583: PUSH
24584: LD_INT 0
24586: ST_TO_ADDR
// uc_nation := nation_arabian ;
24587: LD_ADDR_OWVAR 21
24591: PUSH
24592: LD_INT 2
24594: ST_TO_ADDR
// hc_gallery :=  ;
24595: LD_ADDR_OWVAR 33
24599: PUSH
24600: LD_STRING 
24602: ST_TO_ADDR
// hc_name :=  ;
24603: LD_ADDR_OWVAR 26
24607: PUSH
24608: LD_STRING 
24610: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24611: LD_INT 1
24613: PPUSH
24614: LD_INT 11
24616: PPUSH
24617: LD_INT 10
24619: PPUSH
24620: CALL_OW 380
// un := CreateHuman ;
24624: LD_ADDR_VAR 0 1
24628: PUSH
24629: CALL_OW 44
24633: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24634: LD_VAR 0 1
24638: PPUSH
24639: LD_INT 1
24641: PPUSH
24642: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24646: LD_INT 35
24648: PPUSH
24649: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24653: LD_VAR 0 1
24657: PPUSH
24658: LD_INT 22
24660: PUSH
24661: LD_OWVAR 2
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PPUSH
24670: CALL_OW 69
24674: PPUSH
24675: LD_VAR 0 1
24679: PPUSH
24680: CALL_OW 74
24684: PPUSH
24685: CALL_OW 115
// until IsDead ( un ) ;
24689: LD_VAR 0 1
24693: PPUSH
24694: CALL_OW 301
24698: IFFALSE 24646
// end ;
24700: PPOPN 1
24702: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24703: LD_EXP 65
24707: PUSH
24708: LD_EXP 105
24712: AND
24713: IFFALSE 24725
24715: GO 24717
24717: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24718: LD_STRING earthquake(getX(game), 0, 32)
24720: PPUSH
24721: CALL_OW 559
24725: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24726: LD_EXP 65
24730: PUSH
24731: LD_EXP 106
24735: AND
24736: IFFALSE 24827
24738: GO 24740
24740: DISABLE
24741: LD_INT 0
24743: PPUSH
// begin enable ;
24744: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24745: LD_ADDR_VAR 0 1
24749: PUSH
24750: LD_INT 22
24752: PUSH
24753: LD_OWVAR 2
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: LD_INT 21
24764: PUSH
24765: LD_INT 2
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PUSH
24772: LD_INT 33
24774: PUSH
24775: LD_INT 3
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: LIST
24786: PPUSH
24787: CALL_OW 69
24791: ST_TO_ADDR
// if not tmp then
24792: LD_VAR 0 1
24796: NOT
24797: IFFALSE 24801
// exit ;
24799: GO 24827
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24801: LD_VAR 0 1
24805: PUSH
24806: LD_INT 1
24808: PPUSH
24809: LD_VAR 0 1
24813: PPUSH
24814: CALL_OW 12
24818: ARRAY
24819: PPUSH
24820: LD_INT 1
24822: PPUSH
24823: CALL_OW 234
// end ;
24827: PPOPN 1
24829: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24830: LD_EXP 65
24834: PUSH
24835: LD_EXP 107
24839: AND
24840: IFFALSE 24981
24842: GO 24844
24844: DISABLE
24845: LD_INT 0
24847: PPUSH
24848: PPUSH
24849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24850: LD_ADDR_VAR 0 3
24854: PUSH
24855: LD_INT 22
24857: PUSH
24858: LD_OWVAR 2
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 25
24869: PUSH
24870: LD_INT 1
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PPUSH
24881: CALL_OW 69
24885: ST_TO_ADDR
// if not tmp then
24886: LD_VAR 0 3
24890: NOT
24891: IFFALSE 24895
// exit ;
24893: GO 24981
// un := tmp [ rand ( 1 , tmp ) ] ;
24895: LD_ADDR_VAR 0 2
24899: PUSH
24900: LD_VAR 0 3
24904: PUSH
24905: LD_INT 1
24907: PPUSH
24908: LD_VAR 0 3
24912: PPUSH
24913: CALL_OW 12
24917: ARRAY
24918: ST_TO_ADDR
// if Crawls ( un ) then
24919: LD_VAR 0 2
24923: PPUSH
24924: CALL_OW 318
24928: IFFALSE 24939
// ComWalk ( un ) ;
24930: LD_VAR 0 2
24934: PPUSH
24935: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24939: LD_VAR 0 2
24943: PPUSH
24944: LD_INT 9
24946: PPUSH
24947: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24951: LD_INT 28
24953: PPUSH
24954: LD_OWVAR 2
24958: PPUSH
24959: LD_INT 2
24961: PPUSH
24962: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24966: LD_INT 29
24968: PPUSH
24969: LD_OWVAR 2
24973: PPUSH
24974: LD_INT 2
24976: PPUSH
24977: CALL_OW 322
// end ;
24981: PPOPN 3
24983: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24984: LD_EXP 65
24988: PUSH
24989: LD_EXP 108
24993: AND
24994: IFFALSE 25105
24996: GO 24998
24998: DISABLE
24999: LD_INT 0
25001: PPUSH
25002: PPUSH
25003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25004: LD_ADDR_VAR 0 3
25008: PUSH
25009: LD_INT 22
25011: PUSH
25012: LD_OWVAR 2
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 25
25023: PUSH
25024: LD_INT 1
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PPUSH
25035: CALL_OW 69
25039: ST_TO_ADDR
// if not tmp then
25040: LD_VAR 0 3
25044: NOT
25045: IFFALSE 25049
// exit ;
25047: GO 25105
// un := tmp [ rand ( 1 , tmp ) ] ;
25049: LD_ADDR_VAR 0 2
25053: PUSH
25054: LD_VAR 0 3
25058: PUSH
25059: LD_INT 1
25061: PPUSH
25062: LD_VAR 0 3
25066: PPUSH
25067: CALL_OW 12
25071: ARRAY
25072: ST_TO_ADDR
// if Crawls ( un ) then
25073: LD_VAR 0 2
25077: PPUSH
25078: CALL_OW 318
25082: IFFALSE 25093
// ComWalk ( un ) ;
25084: LD_VAR 0 2
25088: PPUSH
25089: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25093: LD_VAR 0 2
25097: PPUSH
25098: LD_INT 8
25100: PPUSH
25101: CALL_OW 336
// end ;
25105: PPOPN 3
25107: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25108: LD_EXP 65
25112: PUSH
25113: LD_EXP 109
25117: AND
25118: IFFALSE 25262
25120: GO 25122
25122: DISABLE
25123: LD_INT 0
25125: PPUSH
25126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25127: LD_ADDR_VAR 0 2
25131: PUSH
25132: LD_INT 22
25134: PUSH
25135: LD_OWVAR 2
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 21
25146: PUSH
25147: LD_INT 2
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: PUSH
25154: LD_INT 2
25156: PUSH
25157: LD_INT 34
25159: PUSH
25160: LD_INT 12
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 34
25169: PUSH
25170: LD_INT 51
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: LD_INT 34
25179: PUSH
25180: LD_INT 32
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: LIST
25197: PPUSH
25198: CALL_OW 69
25202: ST_TO_ADDR
// if not tmp then
25203: LD_VAR 0 2
25207: NOT
25208: IFFALSE 25212
// exit ;
25210: GO 25262
// for i in tmp do
25212: LD_ADDR_VAR 0 1
25216: PUSH
25217: LD_VAR 0 2
25221: PUSH
25222: FOR_IN
25223: IFFALSE 25260
// if GetCargo ( i , mat_artifact ) = 0 then
25225: LD_VAR 0 1
25229: PPUSH
25230: LD_INT 4
25232: PPUSH
25233: CALL_OW 289
25237: PUSH
25238: LD_INT 0
25240: EQUAL
25241: IFFALSE 25258
// SetCargo ( i , mat_siberit , 100 ) ;
25243: LD_VAR 0 1
25247: PPUSH
25248: LD_INT 3
25250: PPUSH
25251: LD_INT 100
25253: PPUSH
25254: CALL_OW 290
25258: GO 25222
25260: POP
25261: POP
// end ;
25262: PPOPN 2
25264: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25265: LD_EXP 65
25269: PUSH
25270: LD_EXP 110
25274: AND
25275: IFFALSE 25458
25277: GO 25279
25279: DISABLE
25280: LD_INT 0
25282: PPUSH
25283: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25284: LD_ADDR_VAR 0 2
25288: PUSH
25289: LD_INT 22
25291: PUSH
25292: LD_OWVAR 2
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PPUSH
25301: CALL_OW 69
25305: ST_TO_ADDR
// if not tmp then
25306: LD_VAR 0 2
25310: NOT
25311: IFFALSE 25315
// exit ;
25313: GO 25458
// for i := 1 to 2 do
25315: LD_ADDR_VAR 0 1
25319: PUSH
25320: DOUBLE
25321: LD_INT 1
25323: DEC
25324: ST_TO_ADDR
25325: LD_INT 2
25327: PUSH
25328: FOR_TO
25329: IFFALSE 25456
// begin uc_side := your_side ;
25331: LD_ADDR_OWVAR 20
25335: PUSH
25336: LD_OWVAR 2
25340: ST_TO_ADDR
// uc_nation := nation_american ;
25341: LD_ADDR_OWVAR 21
25345: PUSH
25346: LD_INT 1
25348: ST_TO_ADDR
// vc_chassis := us_morphling ;
25349: LD_ADDR_OWVAR 37
25353: PUSH
25354: LD_INT 5
25356: ST_TO_ADDR
// vc_engine := engine_siberite ;
25357: LD_ADDR_OWVAR 39
25361: PUSH
25362: LD_INT 3
25364: ST_TO_ADDR
// vc_control := control_computer ;
25365: LD_ADDR_OWVAR 38
25369: PUSH
25370: LD_INT 3
25372: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25373: LD_ADDR_OWVAR 40
25377: PUSH
25378: LD_INT 10
25380: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25381: LD_VAR 0 2
25385: PUSH
25386: LD_INT 1
25388: ARRAY
25389: PPUSH
25390: CALL_OW 310
25394: NOT
25395: IFFALSE 25442
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25397: CALL_OW 45
25401: PPUSH
25402: LD_VAR 0 2
25406: PUSH
25407: LD_INT 1
25409: ARRAY
25410: PPUSH
25411: CALL_OW 250
25415: PPUSH
25416: LD_VAR 0 2
25420: PUSH
25421: LD_INT 1
25423: ARRAY
25424: PPUSH
25425: CALL_OW 251
25429: PPUSH
25430: LD_INT 12
25432: PPUSH
25433: LD_INT 1
25435: PPUSH
25436: CALL_OW 50
25440: GO 25454
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25442: CALL_OW 45
25446: PPUSH
25447: LD_INT 1
25449: PPUSH
25450: CALL_OW 51
// end ;
25454: GO 25328
25456: POP
25457: POP
// end ;
25458: PPOPN 2
25460: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25461: LD_EXP 65
25465: PUSH
25466: LD_EXP 111
25470: AND
25471: IFFALSE 25693
25473: GO 25475
25475: DISABLE
25476: LD_INT 0
25478: PPUSH
25479: PPUSH
25480: PPUSH
25481: PPUSH
25482: PPUSH
25483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25484: LD_ADDR_VAR 0 6
25488: PUSH
25489: LD_INT 22
25491: PUSH
25492: LD_OWVAR 2
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 21
25503: PUSH
25504: LD_INT 1
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 3
25513: PUSH
25514: LD_INT 23
25516: PUSH
25517: LD_INT 0
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: LIST
25532: PPUSH
25533: CALL_OW 69
25537: ST_TO_ADDR
// if not tmp then
25538: LD_VAR 0 6
25542: NOT
25543: IFFALSE 25547
// exit ;
25545: GO 25693
// s1 := rand ( 1 , 4 ) ;
25547: LD_ADDR_VAR 0 2
25551: PUSH
25552: LD_INT 1
25554: PPUSH
25555: LD_INT 4
25557: PPUSH
25558: CALL_OW 12
25562: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25563: LD_ADDR_VAR 0 4
25567: PUSH
25568: LD_VAR 0 6
25572: PUSH
25573: LD_INT 1
25575: ARRAY
25576: PPUSH
25577: LD_VAR 0 2
25581: PPUSH
25582: CALL_OW 259
25586: ST_TO_ADDR
// if s1 = 1 then
25587: LD_VAR 0 2
25591: PUSH
25592: LD_INT 1
25594: EQUAL
25595: IFFALSE 25615
// s2 := rand ( 2 , 4 ) else
25597: LD_ADDR_VAR 0 3
25601: PUSH
25602: LD_INT 2
25604: PPUSH
25605: LD_INT 4
25607: PPUSH
25608: CALL_OW 12
25612: ST_TO_ADDR
25613: GO 25623
// s2 := 1 ;
25615: LD_ADDR_VAR 0 3
25619: PUSH
25620: LD_INT 1
25622: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25623: LD_ADDR_VAR 0 5
25627: PUSH
25628: LD_VAR 0 6
25632: PUSH
25633: LD_INT 1
25635: ARRAY
25636: PPUSH
25637: LD_VAR 0 3
25641: PPUSH
25642: CALL_OW 259
25646: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25647: LD_VAR 0 6
25651: PUSH
25652: LD_INT 1
25654: ARRAY
25655: PPUSH
25656: LD_VAR 0 2
25660: PPUSH
25661: LD_VAR 0 5
25665: PPUSH
25666: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25670: LD_VAR 0 6
25674: PUSH
25675: LD_INT 1
25677: ARRAY
25678: PPUSH
25679: LD_VAR 0 3
25683: PPUSH
25684: LD_VAR 0 4
25688: PPUSH
25689: CALL_OW 237
// end ;
25693: PPOPN 6
25695: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25696: LD_EXP 65
25700: PUSH
25701: LD_EXP 112
25705: AND
25706: IFFALSE 25785
25708: GO 25710
25710: DISABLE
25711: LD_INT 0
25713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25714: LD_ADDR_VAR 0 1
25718: PUSH
25719: LD_INT 22
25721: PUSH
25722: LD_OWVAR 2
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 30
25733: PUSH
25734: LD_INT 3
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PPUSH
25745: CALL_OW 69
25749: ST_TO_ADDR
// if not tmp then
25750: LD_VAR 0 1
25754: NOT
25755: IFFALSE 25759
// exit ;
25757: GO 25785
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25759: LD_VAR 0 1
25763: PUSH
25764: LD_INT 1
25766: PPUSH
25767: LD_VAR 0 1
25771: PPUSH
25772: CALL_OW 12
25776: ARRAY
25777: PPUSH
25778: LD_INT 1
25780: PPUSH
25781: CALL_OW 234
// end ;
25785: PPOPN 1
25787: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25788: LD_EXP 65
25792: PUSH
25793: LD_EXP 113
25797: AND
25798: IFFALSE 25910
25800: GO 25802
25802: DISABLE
25803: LD_INT 0
25805: PPUSH
25806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25807: LD_ADDR_VAR 0 2
25811: PUSH
25812: LD_INT 22
25814: PUSH
25815: LD_OWVAR 2
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 2
25826: PUSH
25827: LD_INT 30
25829: PUSH
25830: LD_INT 27
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: LD_INT 30
25839: PUSH
25840: LD_INT 26
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 30
25849: PUSH
25850: LD_INT 28
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PPUSH
25867: CALL_OW 69
25871: ST_TO_ADDR
// if not tmp then
25872: LD_VAR 0 2
25876: NOT
25877: IFFALSE 25881
// exit ;
25879: GO 25910
// for i in tmp do
25881: LD_ADDR_VAR 0 1
25885: PUSH
25886: LD_VAR 0 2
25890: PUSH
25891: FOR_IN
25892: IFFALSE 25908
// SetLives ( i , 1 ) ;
25894: LD_VAR 0 1
25898: PPUSH
25899: LD_INT 1
25901: PPUSH
25902: CALL_OW 234
25906: GO 25891
25908: POP
25909: POP
// end ;
25910: PPOPN 2
25912: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25913: LD_EXP 65
25917: PUSH
25918: LD_EXP 114
25922: AND
25923: IFFALSE 26197
25925: GO 25927
25927: DISABLE
25928: LD_INT 0
25930: PPUSH
25931: PPUSH
25932: PPUSH
// begin i := rand ( 1 , 7 ) ;
25933: LD_ADDR_VAR 0 1
25937: PUSH
25938: LD_INT 1
25940: PPUSH
25941: LD_INT 7
25943: PPUSH
25944: CALL_OW 12
25948: ST_TO_ADDR
// case i of 1 :
25949: LD_VAR 0 1
25953: PUSH
25954: LD_INT 1
25956: DOUBLE
25957: EQUAL
25958: IFTRUE 25962
25960: GO 25972
25962: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25963: LD_STRING earthquake(getX(game), 0, 32)
25965: PPUSH
25966: CALL_OW 559
25970: GO 26197
25972: LD_INT 2
25974: DOUBLE
25975: EQUAL
25976: IFTRUE 25980
25978: GO 25994
25980: POP
// begin ToLua ( displayStucuk(); ) ;
25981: LD_STRING displayStucuk();
25983: PPUSH
25984: CALL_OW 559
// ResetFog ;
25988: CALL_OW 335
// end ; 3 :
25992: GO 26197
25994: LD_INT 3
25996: DOUBLE
25997: EQUAL
25998: IFTRUE 26002
26000: GO 26106
26002: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26003: LD_ADDR_VAR 0 2
26007: PUSH
26008: LD_INT 22
26010: PUSH
26011: LD_OWVAR 2
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 25
26022: PUSH
26023: LD_INT 1
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PPUSH
26034: CALL_OW 69
26038: ST_TO_ADDR
// if not tmp then
26039: LD_VAR 0 2
26043: NOT
26044: IFFALSE 26048
// exit ;
26046: GO 26197
// un := tmp [ rand ( 1 , tmp ) ] ;
26048: LD_ADDR_VAR 0 3
26052: PUSH
26053: LD_VAR 0 2
26057: PUSH
26058: LD_INT 1
26060: PPUSH
26061: LD_VAR 0 2
26065: PPUSH
26066: CALL_OW 12
26070: ARRAY
26071: ST_TO_ADDR
// if Crawls ( un ) then
26072: LD_VAR 0 3
26076: PPUSH
26077: CALL_OW 318
26081: IFFALSE 26092
// ComWalk ( un ) ;
26083: LD_VAR 0 3
26087: PPUSH
26088: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26092: LD_VAR 0 3
26096: PPUSH
26097: LD_INT 8
26099: PPUSH
26100: CALL_OW 336
// end ; 4 :
26104: GO 26197
26106: LD_INT 4
26108: DOUBLE
26109: EQUAL
26110: IFTRUE 26114
26112: GO 26175
26114: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26115: LD_ADDR_VAR 0 2
26119: PUSH
26120: LD_INT 22
26122: PUSH
26123: LD_OWVAR 2
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 30
26134: PUSH
26135: LD_INT 29
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PPUSH
26146: CALL_OW 69
26150: ST_TO_ADDR
// if not tmp then
26151: LD_VAR 0 2
26155: NOT
26156: IFFALSE 26160
// exit ;
26158: GO 26197
// DestroyUnit ( tmp [ 1 ] ) ;
26160: LD_VAR 0 2
26164: PUSH
26165: LD_INT 1
26167: ARRAY
26168: PPUSH
26169: CALL_OW 65
// end ; 5 .. 7 :
26173: GO 26197
26175: LD_INT 5
26177: DOUBLE
26178: GREATEREQUAL
26179: IFFALSE 26187
26181: LD_INT 7
26183: DOUBLE
26184: LESSEQUAL
26185: IFTRUE 26189
26187: GO 26196
26189: POP
// StreamSibBomb ; end ;
26190: CALL 22447 0 0
26194: GO 26197
26196: POP
// end ;
26197: PPOPN 3
26199: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26200: LD_EXP 65
26204: PUSH
26205: LD_EXP 115
26209: AND
26210: IFFALSE 26366
26212: GO 26214
26214: DISABLE
26215: LD_INT 0
26217: PPUSH
26218: PPUSH
26219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26220: LD_ADDR_VAR 0 2
26224: PUSH
26225: LD_INT 81
26227: PUSH
26228: LD_OWVAR 2
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 2
26239: PUSH
26240: LD_INT 21
26242: PUSH
26243: LD_INT 1
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 21
26252: PUSH
26253: LD_INT 2
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: LIST
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PPUSH
26269: CALL_OW 69
26273: ST_TO_ADDR
// if not tmp then
26274: LD_VAR 0 2
26278: NOT
26279: IFFALSE 26283
// exit ;
26281: GO 26366
// p := 0 ;
26283: LD_ADDR_VAR 0 3
26287: PUSH
26288: LD_INT 0
26290: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26291: LD_INT 35
26293: PPUSH
26294: CALL_OW 67
// p := p + 1 ;
26298: LD_ADDR_VAR 0 3
26302: PUSH
26303: LD_VAR 0 3
26307: PUSH
26308: LD_INT 1
26310: PLUS
26311: ST_TO_ADDR
// for i in tmp do
26312: LD_ADDR_VAR 0 1
26316: PUSH
26317: LD_VAR 0 2
26321: PUSH
26322: FOR_IN
26323: IFFALSE 26354
// if GetLives ( i ) < 1000 then
26325: LD_VAR 0 1
26329: PPUSH
26330: CALL_OW 256
26334: PUSH
26335: LD_INT 1000
26337: LESS
26338: IFFALSE 26352
// SetLives ( i , 1000 ) ;
26340: LD_VAR 0 1
26344: PPUSH
26345: LD_INT 1000
26347: PPUSH
26348: CALL_OW 234
26352: GO 26322
26354: POP
26355: POP
// until p > 20 ;
26356: LD_VAR 0 3
26360: PUSH
26361: LD_INT 20
26363: GREATER
26364: IFFALSE 26291
// end ;
26366: PPOPN 3
26368: END
// every 0 0$1 trigger StreamModeActive and sTime do
26369: LD_EXP 65
26373: PUSH
26374: LD_EXP 116
26378: AND
26379: IFFALSE 26414
26381: GO 26383
26383: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26384: LD_INT 28
26386: PPUSH
26387: LD_OWVAR 2
26391: PPUSH
26392: LD_INT 2
26394: PPUSH
26395: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26399: LD_INT 30
26401: PPUSH
26402: LD_OWVAR 2
26406: PPUSH
26407: LD_INT 2
26409: PPUSH
26410: CALL_OW 322
// end ;
26414: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26415: LD_EXP 65
26419: PUSH
26420: LD_EXP 117
26424: AND
26425: IFFALSE 26546
26427: GO 26429
26429: DISABLE
26430: LD_INT 0
26432: PPUSH
26433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26434: LD_ADDR_VAR 0 2
26438: PUSH
26439: LD_INT 22
26441: PUSH
26442: LD_OWVAR 2
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 21
26453: PUSH
26454: LD_INT 1
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 3
26463: PUSH
26464: LD_INT 23
26466: PUSH
26467: LD_INT 0
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: LIST
26482: PPUSH
26483: CALL_OW 69
26487: ST_TO_ADDR
// if not tmp then
26488: LD_VAR 0 2
26492: NOT
26493: IFFALSE 26497
// exit ;
26495: GO 26546
// for i in tmp do
26497: LD_ADDR_VAR 0 1
26501: PUSH
26502: LD_VAR 0 2
26506: PUSH
26507: FOR_IN
26508: IFFALSE 26544
// begin if Crawls ( i ) then
26510: LD_VAR 0 1
26514: PPUSH
26515: CALL_OW 318
26519: IFFALSE 26530
// ComWalk ( i ) ;
26521: LD_VAR 0 1
26525: PPUSH
26526: CALL_OW 138
// SetClass ( i , 2 ) ;
26530: LD_VAR 0 1
26534: PPUSH
26535: LD_INT 2
26537: PPUSH
26538: CALL_OW 336
// end ;
26542: GO 26507
26544: POP
26545: POP
// end ;
26546: PPOPN 2
26548: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26549: LD_EXP 65
26553: PUSH
26554: LD_EXP 118
26558: AND
26559: IFFALSE 26840
26561: GO 26563
26563: DISABLE
26564: LD_INT 0
26566: PPUSH
26567: PPUSH
26568: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26569: LD_OWVAR 2
26573: PPUSH
26574: LD_INT 9
26576: PPUSH
26577: LD_INT 1
26579: PPUSH
26580: LD_INT 1
26582: PPUSH
26583: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26587: LD_INT 9
26589: PPUSH
26590: LD_OWVAR 2
26594: PPUSH
26595: CALL_OW 343
// uc_side := 9 ;
26599: LD_ADDR_OWVAR 20
26603: PUSH
26604: LD_INT 9
26606: ST_TO_ADDR
// uc_nation := 2 ;
26607: LD_ADDR_OWVAR 21
26611: PUSH
26612: LD_INT 2
26614: ST_TO_ADDR
// hc_name := Dark Warrior ;
26615: LD_ADDR_OWVAR 26
26619: PUSH
26620: LD_STRING Dark Warrior
26622: ST_TO_ADDR
// hc_gallery :=  ;
26623: LD_ADDR_OWVAR 33
26627: PUSH
26628: LD_STRING 
26630: ST_TO_ADDR
// hc_noskilllimit := true ;
26631: LD_ADDR_OWVAR 76
26635: PUSH
26636: LD_INT 1
26638: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26639: LD_ADDR_OWVAR 31
26643: PUSH
26644: LD_INT 30
26646: PUSH
26647: LD_INT 30
26649: PUSH
26650: LD_INT 30
26652: PUSH
26653: LD_INT 30
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: ST_TO_ADDR
// un := CreateHuman ;
26662: LD_ADDR_VAR 0 3
26666: PUSH
26667: CALL_OW 44
26671: ST_TO_ADDR
// hc_noskilllimit := false ;
26672: LD_ADDR_OWVAR 76
26676: PUSH
26677: LD_INT 0
26679: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26680: LD_VAR 0 3
26684: PPUSH
26685: LD_INT 1
26687: PPUSH
26688: CALL_OW 51
// p := 0 ;
26692: LD_ADDR_VAR 0 2
26696: PUSH
26697: LD_INT 0
26699: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26700: LD_INT 35
26702: PPUSH
26703: CALL_OW 67
// p := p + 1 ;
26707: LD_ADDR_VAR 0 2
26711: PUSH
26712: LD_VAR 0 2
26716: PUSH
26717: LD_INT 1
26719: PLUS
26720: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26721: LD_VAR 0 3
26725: PPUSH
26726: CALL_OW 256
26730: PUSH
26731: LD_INT 1000
26733: LESS
26734: IFFALSE 26748
// SetLives ( un , 1000 ) ;
26736: LD_VAR 0 3
26740: PPUSH
26741: LD_INT 1000
26743: PPUSH
26744: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26748: LD_VAR 0 3
26752: PPUSH
26753: LD_INT 81
26755: PUSH
26756: LD_OWVAR 2
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 91
26767: PUSH
26768: LD_VAR 0 3
26772: PUSH
26773: LD_INT 30
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: LIST
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PPUSH
26785: CALL_OW 69
26789: PPUSH
26790: LD_VAR 0 3
26794: PPUSH
26795: CALL_OW 74
26799: PPUSH
26800: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
26804: LD_VAR 0 2
26808: PUSH
26809: LD_INT 60
26811: GREATER
26812: PUSH
26813: LD_VAR 0 3
26817: PPUSH
26818: CALL_OW 301
26822: OR
26823: IFFALSE 26700
// if un then
26825: LD_VAR 0 3
26829: IFFALSE 26840
// RemoveUnit ( un ) ;
26831: LD_VAR 0 3
26835: PPUSH
26836: CALL_OW 64
// end ;
26840: PPOPN 3
26842: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
26843: LD_INT 0
26845: PPUSH
26846: PPUSH
26847: PPUSH
26848: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26849: LD_ADDR_VAR 0 4
26853: PUSH
26854: LD_INT 22
26856: PUSH
26857: LD_OWVAR 2
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 2
26868: PUSH
26869: LD_INT 30
26871: PUSH
26872: LD_INT 0
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 30
26881: PUSH
26882: LD_INT 1
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: LIST
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PPUSH
26898: CALL_OW 69
26902: ST_TO_ADDR
// if not tmp then
26903: LD_VAR 0 4
26907: NOT
26908: IFFALSE 26912
// exit ;
26910: GO 26971
// for i in tmp do
26912: LD_ADDR_VAR 0 2
26916: PUSH
26917: LD_VAR 0 4
26921: PUSH
26922: FOR_IN
26923: IFFALSE 26969
// for j = 1 to 3 do
26925: LD_ADDR_VAR 0 3
26929: PUSH
26930: DOUBLE
26931: LD_INT 1
26933: DEC
26934: ST_TO_ADDR
26935: LD_INT 3
26937: PUSH
26938: FOR_TO
26939: IFFALSE 26965
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
26941: LD_VAR 0 2
26945: PPUSH
26946: CALL_OW 274
26950: PPUSH
26951: LD_VAR 0 3
26955: PPUSH
26956: LD_INT 99999
26958: PPUSH
26959: CALL_OW 277
26963: GO 26938
26965: POP
26966: POP
26967: GO 26922
26969: POP
26970: POP
// end ;
26971: LD_VAR 0 1
26975: RET
// export function hHackSetLevel10 ; var i , j ; begin
26976: LD_INT 0
26978: PPUSH
26979: PPUSH
26980: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26981: LD_ADDR_VAR 0 2
26985: PUSH
26986: LD_INT 21
26988: PUSH
26989: LD_INT 1
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: PPUSH
26996: CALL_OW 69
27000: PUSH
27001: FOR_IN
27002: IFFALSE 27054
// if IsSelected ( i ) then
27004: LD_VAR 0 2
27008: PPUSH
27009: CALL_OW 306
27013: IFFALSE 27052
// begin for j := 1 to 4 do
27015: LD_ADDR_VAR 0 3
27019: PUSH
27020: DOUBLE
27021: LD_INT 1
27023: DEC
27024: ST_TO_ADDR
27025: LD_INT 4
27027: PUSH
27028: FOR_TO
27029: IFFALSE 27050
// SetSkill ( i , j , 10 ) ;
27031: LD_VAR 0 2
27035: PPUSH
27036: LD_VAR 0 3
27040: PPUSH
27041: LD_INT 10
27043: PPUSH
27044: CALL_OW 237
27048: GO 27028
27050: POP
27051: POP
// end ;
27052: GO 27001
27054: POP
27055: POP
// end ;
27056: LD_VAR 0 1
27060: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
27061: LD_INT 0
27063: PPUSH
27064: PPUSH
27065: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
27066: LD_ADDR_VAR 0 2
27070: PUSH
27071: LD_INT 22
27073: PUSH
27074: LD_OWVAR 2
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 21
27085: PUSH
27086: LD_INT 1
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PPUSH
27097: CALL_OW 69
27101: PUSH
27102: FOR_IN
27103: IFFALSE 27144
// begin for j := 1 to 4 do
27105: LD_ADDR_VAR 0 3
27109: PUSH
27110: DOUBLE
27111: LD_INT 1
27113: DEC
27114: ST_TO_ADDR
27115: LD_INT 4
27117: PUSH
27118: FOR_TO
27119: IFFALSE 27140
// SetSkill ( i , j , 10 ) ;
27121: LD_VAR 0 2
27125: PPUSH
27126: LD_VAR 0 3
27130: PPUSH
27131: LD_INT 10
27133: PPUSH
27134: CALL_OW 237
27138: GO 27118
27140: POP
27141: POP
// end ;
27142: GO 27102
27144: POP
27145: POP
// end ;
27146: LD_VAR 0 1
27150: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
27151: LD_INT 0
27153: PPUSH
// uc_side := your_side ;
27154: LD_ADDR_OWVAR 20
27158: PUSH
27159: LD_OWVAR 2
27163: ST_TO_ADDR
// uc_nation := nation ;
27164: LD_ADDR_OWVAR 21
27168: PUSH
27169: LD_VAR 0 1
27173: ST_TO_ADDR
// InitHc ;
27174: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
27178: LD_INT 0
27180: PPUSH
27181: LD_VAR 0 2
27185: PPUSH
27186: LD_VAR 0 3
27190: PPUSH
27191: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
27195: CALL_OW 44
27199: PPUSH
27200: LD_INT 1
27202: PPUSH
27203: CALL_OW 51
// end ;
27207: LD_VAR 0 4
27211: RET
// export function hHackSpawnVehicle ; begin
27212: LD_INT 0
27214: PPUSH
// uc_side := your_side ;
27215: LD_ADDR_OWVAR 20
27219: PUSH
27220: LD_OWVAR 2
27224: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
27225: LD_ADDR_OWVAR 21
27229: PUSH
27230: LD_INT 1
27232: PPUSH
27233: LD_INT 3
27235: PPUSH
27236: CALL_OW 12
27240: ST_TO_ADDR
// InitVc ;
27241: CALL_OW 20
// case uc_nation of 1 :
27245: LD_OWVAR 21
27249: PUSH
27250: LD_INT 1
27252: DOUBLE
27253: EQUAL
27254: IFTRUE 27258
27256: GO 27402
27258: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
27259: LD_ADDR_OWVAR 37
27263: PUSH
27264: LD_INT 1
27266: PUSH
27267: LD_INT 2
27269: PUSH
27270: LD_INT 3
27272: PUSH
27273: LD_INT 4
27275: PUSH
27276: LD_INT 5
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 1
27288: PPUSH
27289: LD_INT 5
27291: PPUSH
27292: CALL_OW 12
27296: ARRAY
27297: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
27298: LD_ADDR_OWVAR 39
27302: PUSH
27303: LD_INT 1
27305: PPUSH
27306: LD_INT 3
27308: PPUSH
27309: CALL_OW 12
27313: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
27314: LD_ADDR_OWVAR 38
27318: PUSH
27319: LD_INT 1
27321: PUSH
27322: LD_INT 2
27324: PUSH
27325: LD_INT 3
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 1
27335: PPUSH
27336: LD_INT 3
27338: PPUSH
27339: CALL_OW 12
27343: ARRAY
27344: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
27345: LD_ADDR_OWVAR 40
27349: PUSH
27350: LD_INT 2
27352: PUSH
27353: LD_INT 4
27355: PUSH
27356: LD_INT 5
27358: PUSH
27359: LD_INT 3
27361: PUSH
27362: LD_INT 7
27364: PUSH
27365: LD_INT 8
27367: PUSH
27368: LD_INT 9
27370: PUSH
27371: LD_INT 10
27373: PUSH
27374: LD_INT 6
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 1
27390: PPUSH
27391: LD_INT 9
27393: PPUSH
27394: CALL_OW 12
27398: ARRAY
27399: ST_TO_ADDR
// end ; 2 :
27400: GO 27667
27402: LD_INT 2
27404: DOUBLE
27405: EQUAL
27406: IFTRUE 27410
27408: GO 27534
27410: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
27411: LD_ADDR_OWVAR 37
27415: PUSH
27416: LD_INT 11
27418: PUSH
27419: LD_INT 12
27421: PUSH
27422: LD_INT 13
27424: PUSH
27425: LD_INT 14
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: PUSH
27434: LD_INT 1
27436: PPUSH
27437: LD_INT 4
27439: PPUSH
27440: CALL_OW 12
27444: ARRAY
27445: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
27446: LD_ADDR_OWVAR 39
27450: PUSH
27451: LD_INT 1
27453: PPUSH
27454: LD_INT 3
27456: PPUSH
27457: CALL_OW 12
27461: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
27462: LD_ADDR_OWVAR 38
27466: PUSH
27467: LD_INT 1
27469: PUSH
27470: LD_INT 2
27472: PUSH
27473: LD_INT 5
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 1
27483: PPUSH
27484: LD_INT 3
27486: PPUSH
27487: CALL_OW 12
27491: ARRAY
27492: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
27493: LD_ADDR_OWVAR 40
27497: PUSH
27498: LD_INT 24
27500: PUSH
27501: LD_INT 26
27503: PUSH
27504: LD_INT 27
27506: PUSH
27507: LD_INT 28
27509: PUSH
27510: LD_INT 29
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 1
27522: PPUSH
27523: LD_INT 5
27525: PPUSH
27526: CALL_OW 12
27530: ARRAY
27531: ST_TO_ADDR
// end ; 3 :
27532: GO 27667
27534: LD_INT 3
27536: DOUBLE
27537: EQUAL
27538: IFTRUE 27542
27540: GO 27666
27542: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
27543: LD_ADDR_OWVAR 37
27547: PUSH
27548: LD_INT 21
27550: PUSH
27551: LD_INT 23
27553: PUSH
27554: LD_INT 22
27556: PUSH
27557: LD_INT 24
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 1
27568: PPUSH
27569: LD_INT 4
27571: PPUSH
27572: CALL_OW 12
27576: ARRAY
27577: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
27578: LD_ADDR_OWVAR 39
27582: PUSH
27583: LD_INT 1
27585: PPUSH
27586: LD_INT 3
27588: PPUSH
27589: CALL_OW 12
27593: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
27594: LD_ADDR_OWVAR 38
27598: PUSH
27599: LD_INT 1
27601: PUSH
27602: LD_INT 3
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 1
27611: PPUSH
27612: LD_INT 2
27614: PPUSH
27615: CALL_OW 12
27619: ARRAY
27620: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
27621: LD_ADDR_OWVAR 40
27625: PUSH
27626: LD_INT 42
27628: PUSH
27629: LD_INT 43
27631: PUSH
27632: LD_INT 44
27634: PUSH
27635: LD_INT 46
27637: PUSH
27638: LD_INT 48
27640: PUSH
27641: LD_INT 47
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: PUSH
27652: LD_INT 1
27654: PPUSH
27655: LD_INT 6
27657: PPUSH
27658: CALL_OW 12
27662: ARRAY
27663: ST_TO_ADDR
// end ; end ;
27664: GO 27667
27666: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27667: CALL_OW 45
27671: PPUSH
27672: LD_INT 1
27674: PPUSH
27675: CALL_OW 51
// end ;
27679: LD_VAR 0 1
27683: RET
// export hInvincible ; every 1 do
27684: GO 27686
27686: DISABLE
// hInvincible := [ ] ;
27687: LD_ADDR_EXP 119
27691: PUSH
27692: EMPTY
27693: ST_TO_ADDR
27694: END
// every 10 do var i ;
27695: GO 27697
27697: DISABLE
27698: LD_INT 0
27700: PPUSH
// begin enable ;
27701: ENABLE
// if not hInvincible then
27702: LD_EXP 119
27706: NOT
27707: IFFALSE 27711
// exit ;
27709: GO 27755
// for i in hInvincible do
27711: LD_ADDR_VAR 0 1
27715: PUSH
27716: LD_EXP 119
27720: PUSH
27721: FOR_IN
27722: IFFALSE 27753
// if GetLives ( i ) < 1000 then
27724: LD_VAR 0 1
27728: PPUSH
27729: CALL_OW 256
27733: PUSH
27734: LD_INT 1000
27736: LESS
27737: IFFALSE 27751
// SetLives ( i , 1000 ) ;
27739: LD_VAR 0 1
27743: PPUSH
27744: LD_INT 1000
27746: PPUSH
27747: CALL_OW 234
27751: GO 27721
27753: POP
27754: POP
// end ;
27755: PPOPN 1
27757: END
// export function hHackInvincible ; var i ; begin
27758: LD_INT 0
27760: PPUSH
27761: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
27762: LD_ADDR_VAR 0 2
27766: PUSH
27767: LD_INT 2
27769: PUSH
27770: LD_INT 21
27772: PUSH
27773: LD_INT 1
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 21
27782: PUSH
27783: LD_INT 2
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: LIST
27794: PPUSH
27795: CALL_OW 69
27799: PUSH
27800: FOR_IN
27801: IFFALSE 27862
// if IsSelected ( i ) then
27803: LD_VAR 0 2
27807: PPUSH
27808: CALL_OW 306
27812: IFFALSE 27860
// begin if i in hInvincible then
27814: LD_VAR 0 2
27818: PUSH
27819: LD_EXP 119
27823: IN
27824: IFFALSE 27844
// hInvincible := hInvincible diff i else
27826: LD_ADDR_EXP 119
27830: PUSH
27831: LD_EXP 119
27835: PUSH
27836: LD_VAR 0 2
27840: DIFF
27841: ST_TO_ADDR
27842: GO 27860
// hInvincible := hInvincible union i ;
27844: LD_ADDR_EXP 119
27848: PUSH
27849: LD_EXP 119
27853: PUSH
27854: LD_VAR 0 2
27858: UNION
27859: ST_TO_ADDR
// end ;
27860: GO 27800
27862: POP
27863: POP
// end ;
27864: LD_VAR 0 1
27868: RET
// export function hHackInvisible ; var i , j ; begin
27869: LD_INT 0
27871: PPUSH
27872: PPUSH
27873: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27874: LD_ADDR_VAR 0 2
27878: PUSH
27879: LD_INT 21
27881: PUSH
27882: LD_INT 1
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PPUSH
27889: CALL_OW 69
27893: PUSH
27894: FOR_IN
27895: IFFALSE 27919
// if IsSelected ( i ) then
27897: LD_VAR 0 2
27901: PPUSH
27902: CALL_OW 306
27906: IFFALSE 27917
// ComForceInvisible ( i ) ;
27908: LD_VAR 0 2
27912: PPUSH
27913: CALL_OW 496
27917: GO 27894
27919: POP
27920: POP
// end ;
27921: LD_VAR 0 1
27925: RET
// export function hHackChangeYourSide ; begin
27926: LD_INT 0
27928: PPUSH
// if your_side = 8 then
27929: LD_OWVAR 2
27933: PUSH
27934: LD_INT 8
27936: EQUAL
27937: IFFALSE 27949
// your_side := 0 else
27939: LD_ADDR_OWVAR 2
27943: PUSH
27944: LD_INT 0
27946: ST_TO_ADDR
27947: GO 27963
// your_side := your_side + 1 ;
27949: LD_ADDR_OWVAR 2
27953: PUSH
27954: LD_OWVAR 2
27958: PUSH
27959: LD_INT 1
27961: PLUS
27962: ST_TO_ADDR
// end ;
27963: LD_VAR 0 1
27967: RET
// export function hHackChangeUnitSide ; var i , j ; begin
27968: LD_INT 0
27970: PPUSH
27971: PPUSH
27972: PPUSH
// for i in all_units do
27973: LD_ADDR_VAR 0 2
27977: PUSH
27978: LD_OWVAR 3
27982: PUSH
27983: FOR_IN
27984: IFFALSE 28062
// if IsSelected ( i ) then
27986: LD_VAR 0 2
27990: PPUSH
27991: CALL_OW 306
27995: IFFALSE 28060
// begin j := GetSide ( i ) ;
27997: LD_ADDR_VAR 0 3
28001: PUSH
28002: LD_VAR 0 2
28006: PPUSH
28007: CALL_OW 255
28011: ST_TO_ADDR
// if j = 8 then
28012: LD_VAR 0 3
28016: PUSH
28017: LD_INT 8
28019: EQUAL
28020: IFFALSE 28032
// j := 0 else
28022: LD_ADDR_VAR 0 3
28026: PUSH
28027: LD_INT 0
28029: ST_TO_ADDR
28030: GO 28046
// j := j + 1 ;
28032: LD_ADDR_VAR 0 3
28036: PUSH
28037: LD_VAR 0 3
28041: PUSH
28042: LD_INT 1
28044: PLUS
28045: ST_TO_ADDR
// SetSide ( i , j ) ;
28046: LD_VAR 0 2
28050: PPUSH
28051: LD_VAR 0 3
28055: PPUSH
28056: CALL_OW 235
// end ;
28060: GO 27983
28062: POP
28063: POP
// end ;
28064: LD_VAR 0 1
28068: RET
// export function hHackFog ; begin
28069: LD_INT 0
28071: PPUSH
// FogOff ( true ) ;
28072: LD_INT 1
28074: PPUSH
28075: CALL_OW 344
// end ;
28079: LD_VAR 0 1
28083: RET
// export function hHackApeman ; begin
28084: LD_INT 0
28086: PPUSH
// uc_side := your_side ;
28087: LD_ADDR_OWVAR 20
28091: PUSH
28092: LD_OWVAR 2
28096: ST_TO_ADDR
// uc_nation := 0 ;
28097: LD_ADDR_OWVAR 21
28101: PUSH
28102: LD_INT 0
28104: ST_TO_ADDR
// hc_name :=  ;
28105: LD_ADDR_OWVAR 26
28109: PUSH
28110: LD_STRING 
28112: ST_TO_ADDR
// hc_gallery :=  ;
28113: LD_ADDR_OWVAR 33
28117: PUSH
28118: LD_STRING 
28120: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
28121: LD_ADDR_OWVAR 31
28125: PUSH
28126: LD_INT 0
28128: PUSH
28129: LD_INT 0
28131: PUSH
28132: LD_INT 0
28134: PUSH
28135: LD_INT 0
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: ST_TO_ADDR
// hc_class := class_apeman ;
28144: LD_ADDR_OWVAR 28
28148: PUSH
28149: LD_INT 12
28151: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
28152: CALL_OW 44
28156: PPUSH
28157: LD_INT 1
28159: PPUSH
28160: CALL_OW 51
// end ;
28164: LD_VAR 0 1
28168: RET
// export function hHackBoom ; begin
28169: LD_INT 0
28171: PPUSH
// uc_side := your_side ;
28172: LD_ADDR_OWVAR 20
28176: PUSH
28177: LD_OWVAR 2
28181: ST_TO_ADDR
// uc_nation := 1 ;
28182: LD_ADDR_OWVAR 21
28186: PUSH
28187: LD_INT 1
28189: ST_TO_ADDR
// vc_chassis := us_morphling ;
28190: LD_ADDR_OWVAR 37
28194: PUSH
28195: LD_INT 5
28197: ST_TO_ADDR
// vc_engine := engine_siberite ;
28198: LD_ADDR_OWVAR 39
28202: PUSH
28203: LD_INT 3
28205: ST_TO_ADDR
// vc_control := control_computer ;
28206: LD_ADDR_OWVAR 38
28210: PUSH
28211: LD_INT 3
28213: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
28214: LD_ADDR_OWVAR 40
28218: PUSH
28219: LD_INT 8
28221: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28222: CALL_OW 45
28226: PPUSH
28227: LD_INT 1
28229: PPUSH
28230: CALL_OW 51
// end ; end_of_file end_of_file
28234: LD_VAR 0 1
28238: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28239: LD_INT 0
28241: PPUSH
28242: PPUSH
// if exist_mode then
28243: LD_VAR 0 2
28247: IFFALSE 28272
// unit := CreateCharacter ( prefix & ident ) else
28249: LD_ADDR_VAR 0 5
28253: PUSH
28254: LD_VAR 0 3
28258: PUSH
28259: LD_VAR 0 1
28263: STR
28264: PPUSH
28265: CALL_OW 34
28269: ST_TO_ADDR
28270: GO 28287
// unit := NewCharacter ( ident ) ;
28272: LD_ADDR_VAR 0 5
28276: PUSH
28277: LD_VAR 0 1
28281: PPUSH
28282: CALL_OW 25
28286: ST_TO_ADDR
// result := unit ;
28287: LD_ADDR_VAR 0 4
28291: PUSH
28292: LD_VAR 0 5
28296: ST_TO_ADDR
// end ;
28297: LD_VAR 0 4
28301: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28302: LD_INT 0
28304: PPUSH
28305: PPUSH
// if not side or not nation then
28306: LD_VAR 0 1
28310: NOT
28311: PUSH
28312: LD_VAR 0 2
28316: NOT
28317: OR
28318: IFFALSE 28322
// exit ;
28320: GO 29086
// case nation of nation_american :
28322: LD_VAR 0 2
28326: PUSH
28327: LD_INT 1
28329: DOUBLE
28330: EQUAL
28331: IFTRUE 28335
28333: GO 28549
28335: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28336: LD_ADDR_VAR 0 4
28340: PUSH
28341: LD_INT 35
28343: PUSH
28344: LD_INT 45
28346: PUSH
28347: LD_INT 46
28349: PUSH
28350: LD_INT 47
28352: PUSH
28353: LD_INT 82
28355: PUSH
28356: LD_INT 83
28358: PUSH
28359: LD_INT 84
28361: PUSH
28362: LD_INT 85
28364: PUSH
28365: LD_INT 86
28367: PUSH
28368: LD_INT 1
28370: PUSH
28371: LD_INT 2
28373: PUSH
28374: LD_INT 6
28376: PUSH
28377: LD_INT 15
28379: PUSH
28380: LD_INT 16
28382: PUSH
28383: LD_INT 7
28385: PUSH
28386: LD_INT 12
28388: PUSH
28389: LD_INT 13
28391: PUSH
28392: LD_INT 10
28394: PUSH
28395: LD_INT 14
28397: PUSH
28398: LD_INT 20
28400: PUSH
28401: LD_INT 21
28403: PUSH
28404: LD_INT 22
28406: PUSH
28407: LD_INT 25
28409: PUSH
28410: LD_INT 32
28412: PUSH
28413: LD_INT 27
28415: PUSH
28416: LD_INT 36
28418: PUSH
28419: LD_INT 69
28421: PUSH
28422: LD_INT 39
28424: PUSH
28425: LD_INT 34
28427: PUSH
28428: LD_INT 40
28430: PUSH
28431: LD_INT 48
28433: PUSH
28434: LD_INT 49
28436: PUSH
28437: LD_INT 50
28439: PUSH
28440: LD_INT 51
28442: PUSH
28443: LD_INT 52
28445: PUSH
28446: LD_INT 53
28448: PUSH
28449: LD_INT 54
28451: PUSH
28452: LD_INT 55
28454: PUSH
28455: LD_INT 56
28457: PUSH
28458: LD_INT 57
28460: PUSH
28461: LD_INT 58
28463: PUSH
28464: LD_INT 59
28466: PUSH
28467: LD_INT 60
28469: PUSH
28470: LD_INT 61
28472: PUSH
28473: LD_INT 62
28475: PUSH
28476: LD_INT 80
28478: PUSH
28479: LD_INT 82
28481: PUSH
28482: LD_INT 83
28484: PUSH
28485: LD_INT 84
28487: PUSH
28488: LD_INT 85
28490: PUSH
28491: LD_INT 86
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: ST_TO_ADDR
28547: GO 29010
28549: LD_INT 2
28551: DOUBLE
28552: EQUAL
28553: IFTRUE 28557
28555: GO 28779
28557: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
28558: LD_ADDR_VAR 0 4
28562: PUSH
28563: LD_INT 35
28565: PUSH
28566: LD_INT 45
28568: PUSH
28569: LD_INT 46
28571: PUSH
28572: LD_INT 47
28574: PUSH
28575: LD_INT 82
28577: PUSH
28578: LD_INT 83
28580: PUSH
28581: LD_INT 84
28583: PUSH
28584: LD_INT 85
28586: PUSH
28587: LD_INT 87
28589: PUSH
28590: LD_INT 70
28592: PUSH
28593: LD_INT 1
28595: PUSH
28596: LD_INT 11
28598: PUSH
28599: LD_INT 3
28601: PUSH
28602: LD_INT 4
28604: PUSH
28605: LD_INT 5
28607: PUSH
28608: LD_INT 6
28610: PUSH
28611: LD_INT 15
28613: PUSH
28614: LD_INT 18
28616: PUSH
28617: LD_INT 7
28619: PUSH
28620: LD_INT 17
28622: PUSH
28623: LD_INT 8
28625: PUSH
28626: LD_INT 20
28628: PUSH
28629: LD_INT 21
28631: PUSH
28632: LD_INT 22
28634: PUSH
28635: LD_INT 72
28637: PUSH
28638: LD_INT 26
28640: PUSH
28641: LD_INT 69
28643: PUSH
28644: LD_INT 39
28646: PUSH
28647: LD_INT 40
28649: PUSH
28650: LD_INT 41
28652: PUSH
28653: LD_INT 42
28655: PUSH
28656: LD_INT 43
28658: PUSH
28659: LD_INT 48
28661: PUSH
28662: LD_INT 49
28664: PUSH
28665: LD_INT 50
28667: PUSH
28668: LD_INT 51
28670: PUSH
28671: LD_INT 52
28673: PUSH
28674: LD_INT 53
28676: PUSH
28677: LD_INT 54
28679: PUSH
28680: LD_INT 55
28682: PUSH
28683: LD_INT 56
28685: PUSH
28686: LD_INT 60
28688: PUSH
28689: LD_INT 61
28691: PUSH
28692: LD_INT 62
28694: PUSH
28695: LD_INT 66
28697: PUSH
28698: LD_INT 67
28700: PUSH
28701: LD_INT 68
28703: PUSH
28704: LD_INT 81
28706: PUSH
28707: LD_INT 82
28709: PUSH
28710: LD_INT 83
28712: PUSH
28713: LD_INT 84
28715: PUSH
28716: LD_INT 85
28718: PUSH
28719: LD_INT 87
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: ST_TO_ADDR
28777: GO 29010
28779: LD_INT 3
28781: DOUBLE
28782: EQUAL
28783: IFTRUE 28787
28785: GO 29009
28787: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28788: LD_ADDR_VAR 0 4
28792: PUSH
28793: LD_INT 46
28795: PUSH
28796: LD_INT 47
28798: PUSH
28799: LD_INT 1
28801: PUSH
28802: LD_INT 2
28804: PUSH
28805: LD_INT 82
28807: PUSH
28808: LD_INT 83
28810: PUSH
28811: LD_INT 84
28813: PUSH
28814: LD_INT 85
28816: PUSH
28817: LD_INT 86
28819: PUSH
28820: LD_INT 11
28822: PUSH
28823: LD_INT 9
28825: PUSH
28826: LD_INT 20
28828: PUSH
28829: LD_INT 19
28831: PUSH
28832: LD_INT 21
28834: PUSH
28835: LD_INT 24
28837: PUSH
28838: LD_INT 22
28840: PUSH
28841: LD_INT 25
28843: PUSH
28844: LD_INT 28
28846: PUSH
28847: LD_INT 29
28849: PUSH
28850: LD_INT 30
28852: PUSH
28853: LD_INT 31
28855: PUSH
28856: LD_INT 37
28858: PUSH
28859: LD_INT 38
28861: PUSH
28862: LD_INT 32
28864: PUSH
28865: LD_INT 27
28867: PUSH
28868: LD_INT 33
28870: PUSH
28871: LD_INT 69
28873: PUSH
28874: LD_INT 39
28876: PUSH
28877: LD_INT 34
28879: PUSH
28880: LD_INT 40
28882: PUSH
28883: LD_INT 71
28885: PUSH
28886: LD_INT 23
28888: PUSH
28889: LD_INT 44
28891: PUSH
28892: LD_INT 48
28894: PUSH
28895: LD_INT 49
28897: PUSH
28898: LD_INT 50
28900: PUSH
28901: LD_INT 51
28903: PUSH
28904: LD_INT 52
28906: PUSH
28907: LD_INT 53
28909: PUSH
28910: LD_INT 54
28912: PUSH
28913: LD_INT 55
28915: PUSH
28916: LD_INT 56
28918: PUSH
28919: LD_INT 57
28921: PUSH
28922: LD_INT 58
28924: PUSH
28925: LD_INT 59
28927: PUSH
28928: LD_INT 63
28930: PUSH
28931: LD_INT 64
28933: PUSH
28934: LD_INT 65
28936: PUSH
28937: LD_INT 82
28939: PUSH
28940: LD_INT 83
28942: PUSH
28943: LD_INT 84
28945: PUSH
28946: LD_INT 85
28948: PUSH
28949: LD_INT 86
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: ST_TO_ADDR
29007: GO 29010
29009: POP
// if state > - 1 and state < 3 then
29010: LD_VAR 0 3
29014: PUSH
29015: LD_INT 1
29017: NEG
29018: GREATER
29019: PUSH
29020: LD_VAR 0 3
29024: PUSH
29025: LD_INT 3
29027: LESS
29028: AND
29029: IFFALSE 29086
// for i in result do
29031: LD_ADDR_VAR 0 5
29035: PUSH
29036: LD_VAR 0 4
29040: PUSH
29041: FOR_IN
29042: IFFALSE 29084
// if GetTech ( i , side ) <> state then
29044: LD_VAR 0 5
29048: PPUSH
29049: LD_VAR 0 1
29053: PPUSH
29054: CALL_OW 321
29058: PUSH
29059: LD_VAR 0 3
29063: NONEQUAL
29064: IFFALSE 29082
// result := result diff i ;
29066: LD_ADDR_VAR 0 4
29070: PUSH
29071: LD_VAR 0 4
29075: PUSH
29076: LD_VAR 0 5
29080: DIFF
29081: ST_TO_ADDR
29082: GO 29041
29084: POP
29085: POP
// end ;
29086: LD_VAR 0 4
29090: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29091: LD_INT 0
29093: PPUSH
29094: PPUSH
29095: PPUSH
// result := true ;
29096: LD_ADDR_VAR 0 3
29100: PUSH
29101: LD_INT 1
29103: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29104: LD_ADDR_VAR 0 5
29108: PUSH
29109: LD_VAR 0 2
29113: PPUSH
29114: CALL_OW 480
29118: ST_TO_ADDR
// if not tmp then
29119: LD_VAR 0 5
29123: NOT
29124: IFFALSE 29128
// exit ;
29126: GO 29177
// for i in tmp do
29128: LD_ADDR_VAR 0 4
29132: PUSH
29133: LD_VAR 0 5
29137: PUSH
29138: FOR_IN
29139: IFFALSE 29175
// if GetTech ( i , side ) <> state_researched then
29141: LD_VAR 0 4
29145: PPUSH
29146: LD_VAR 0 1
29150: PPUSH
29151: CALL_OW 321
29155: PUSH
29156: LD_INT 2
29158: NONEQUAL
29159: IFFALSE 29173
// begin result := false ;
29161: LD_ADDR_VAR 0 3
29165: PUSH
29166: LD_INT 0
29168: ST_TO_ADDR
// exit ;
29169: POP
29170: POP
29171: GO 29177
// end ;
29173: GO 29138
29175: POP
29176: POP
// end ;
29177: LD_VAR 0 3
29181: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29182: LD_INT 0
29184: PPUSH
29185: PPUSH
29186: PPUSH
29187: PPUSH
29188: PPUSH
29189: PPUSH
29190: PPUSH
29191: PPUSH
29192: PPUSH
29193: PPUSH
29194: PPUSH
29195: PPUSH
29196: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29197: LD_VAR 0 1
29201: NOT
29202: PUSH
29203: LD_VAR 0 1
29207: PPUSH
29208: CALL_OW 257
29212: PUSH
29213: LD_INT 9
29215: NONEQUAL
29216: OR
29217: IFFALSE 29221
// exit ;
29219: GO 29794
// side := GetSide ( unit ) ;
29221: LD_ADDR_VAR 0 9
29225: PUSH
29226: LD_VAR 0 1
29230: PPUSH
29231: CALL_OW 255
29235: ST_TO_ADDR
// tech_space := tech_spacanom ;
29236: LD_ADDR_VAR 0 12
29240: PUSH
29241: LD_INT 29
29243: ST_TO_ADDR
// tech_time := tech_taurad ;
29244: LD_ADDR_VAR 0 13
29248: PUSH
29249: LD_INT 28
29251: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29252: LD_ADDR_VAR 0 11
29256: PUSH
29257: LD_VAR 0 1
29261: PPUSH
29262: CALL_OW 310
29266: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29267: LD_VAR 0 11
29271: PPUSH
29272: CALL_OW 247
29276: PUSH
29277: LD_INT 2
29279: EQUAL
29280: IFFALSE 29284
// exit ;
29282: GO 29794
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29284: LD_ADDR_VAR 0 8
29288: PUSH
29289: LD_INT 81
29291: PUSH
29292: LD_VAR 0 9
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 3
29303: PUSH
29304: LD_INT 21
29306: PUSH
29307: LD_INT 3
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PPUSH
29322: CALL_OW 69
29326: ST_TO_ADDR
// if not tmp then
29327: LD_VAR 0 8
29331: NOT
29332: IFFALSE 29336
// exit ;
29334: GO 29794
// if in_unit then
29336: LD_VAR 0 11
29340: IFFALSE 29364
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29342: LD_ADDR_VAR 0 10
29346: PUSH
29347: LD_VAR 0 8
29351: PPUSH
29352: LD_VAR 0 11
29356: PPUSH
29357: CALL_OW 74
29361: ST_TO_ADDR
29362: GO 29384
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29364: LD_ADDR_VAR 0 10
29368: PUSH
29369: LD_VAR 0 8
29373: PPUSH
29374: LD_VAR 0 1
29378: PPUSH
29379: CALL_OW 74
29383: ST_TO_ADDR
// if not enemy then
29384: LD_VAR 0 10
29388: NOT
29389: IFFALSE 29393
// exit ;
29391: GO 29794
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29393: LD_VAR 0 11
29397: PUSH
29398: LD_VAR 0 11
29402: PPUSH
29403: LD_VAR 0 10
29407: PPUSH
29408: CALL_OW 296
29412: PUSH
29413: LD_INT 13
29415: GREATER
29416: AND
29417: PUSH
29418: LD_VAR 0 1
29422: PPUSH
29423: LD_VAR 0 10
29427: PPUSH
29428: CALL_OW 296
29432: PUSH
29433: LD_INT 12
29435: GREATER
29436: OR
29437: IFFALSE 29441
// exit ;
29439: GO 29794
// missile := [ 1 ] ;
29441: LD_ADDR_VAR 0 14
29445: PUSH
29446: LD_INT 1
29448: PUSH
29449: EMPTY
29450: LIST
29451: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29452: LD_VAR 0 9
29456: PPUSH
29457: LD_VAR 0 12
29461: PPUSH
29462: CALL_OW 325
29466: IFFALSE 29495
// missile := Insert ( missile , missile + 1 , 2 ) ;
29468: LD_ADDR_VAR 0 14
29472: PUSH
29473: LD_VAR 0 14
29477: PPUSH
29478: LD_VAR 0 14
29482: PUSH
29483: LD_INT 1
29485: PLUS
29486: PPUSH
29487: LD_INT 2
29489: PPUSH
29490: CALL_OW 2
29494: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29495: LD_VAR 0 9
29499: PPUSH
29500: LD_VAR 0 13
29504: PPUSH
29505: CALL_OW 325
29509: PUSH
29510: LD_VAR 0 10
29514: PPUSH
29515: CALL_OW 255
29519: PPUSH
29520: LD_VAR 0 13
29524: PPUSH
29525: CALL_OW 325
29529: NOT
29530: AND
29531: IFFALSE 29560
// missile := Insert ( missile , missile + 1 , 3 ) ;
29533: LD_ADDR_VAR 0 14
29537: PUSH
29538: LD_VAR 0 14
29542: PPUSH
29543: LD_VAR 0 14
29547: PUSH
29548: LD_INT 1
29550: PLUS
29551: PPUSH
29552: LD_INT 3
29554: PPUSH
29555: CALL_OW 2
29559: ST_TO_ADDR
// if missile < 2 then
29560: LD_VAR 0 14
29564: PUSH
29565: LD_INT 2
29567: LESS
29568: IFFALSE 29572
// exit ;
29570: GO 29794
// x := GetX ( enemy ) ;
29572: LD_ADDR_VAR 0 4
29576: PUSH
29577: LD_VAR 0 10
29581: PPUSH
29582: CALL_OW 250
29586: ST_TO_ADDR
// y := GetY ( enemy ) ;
29587: LD_ADDR_VAR 0 5
29591: PUSH
29592: LD_VAR 0 10
29596: PPUSH
29597: CALL_OW 251
29601: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29602: LD_ADDR_VAR 0 6
29606: PUSH
29607: LD_VAR 0 4
29611: PUSH
29612: LD_INT 1
29614: NEG
29615: PPUSH
29616: LD_INT 1
29618: PPUSH
29619: CALL_OW 12
29623: PLUS
29624: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29625: LD_ADDR_VAR 0 7
29629: PUSH
29630: LD_VAR 0 5
29634: PUSH
29635: LD_INT 1
29637: NEG
29638: PPUSH
29639: LD_INT 1
29641: PPUSH
29642: CALL_OW 12
29646: PLUS
29647: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29648: LD_VAR 0 6
29652: PPUSH
29653: LD_VAR 0 7
29657: PPUSH
29658: CALL_OW 488
29662: NOT
29663: IFFALSE 29685
// begin _x := x ;
29665: LD_ADDR_VAR 0 6
29669: PUSH
29670: LD_VAR 0 4
29674: ST_TO_ADDR
// _y := y ;
29675: LD_ADDR_VAR 0 7
29679: PUSH
29680: LD_VAR 0 5
29684: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29685: LD_ADDR_VAR 0 3
29689: PUSH
29690: LD_INT 1
29692: PPUSH
29693: LD_VAR 0 14
29697: PPUSH
29698: CALL_OW 12
29702: ST_TO_ADDR
// case i of 1 :
29703: LD_VAR 0 3
29707: PUSH
29708: LD_INT 1
29710: DOUBLE
29711: EQUAL
29712: IFTRUE 29716
29714: GO 29733
29716: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29717: LD_VAR 0 1
29721: PPUSH
29722: LD_VAR 0 10
29726: PPUSH
29727: CALL_OW 115
29731: GO 29794
29733: LD_INT 2
29735: DOUBLE
29736: EQUAL
29737: IFTRUE 29741
29739: GO 29763
29741: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29742: LD_VAR 0 1
29746: PPUSH
29747: LD_VAR 0 6
29751: PPUSH
29752: LD_VAR 0 7
29756: PPUSH
29757: CALL_OW 153
29761: GO 29794
29763: LD_INT 3
29765: DOUBLE
29766: EQUAL
29767: IFTRUE 29771
29769: GO 29793
29771: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29772: LD_VAR 0 1
29776: PPUSH
29777: LD_VAR 0 6
29781: PPUSH
29782: LD_VAR 0 7
29786: PPUSH
29787: CALL_OW 154
29791: GO 29794
29793: POP
// end ;
29794: LD_VAR 0 2
29798: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29799: LD_INT 0
29801: PPUSH
29802: PPUSH
29803: PPUSH
29804: PPUSH
29805: PPUSH
29806: PPUSH
// if not unit or not building then
29807: LD_VAR 0 1
29811: NOT
29812: PUSH
29813: LD_VAR 0 2
29817: NOT
29818: OR
29819: IFFALSE 29823
// exit ;
29821: GO 29981
// x := GetX ( building ) ;
29823: LD_ADDR_VAR 0 5
29827: PUSH
29828: LD_VAR 0 2
29832: PPUSH
29833: CALL_OW 250
29837: ST_TO_ADDR
// y := GetY ( building ) ;
29838: LD_ADDR_VAR 0 6
29842: PUSH
29843: LD_VAR 0 2
29847: PPUSH
29848: CALL_OW 251
29852: ST_TO_ADDR
// for i = 0 to 5 do
29853: LD_ADDR_VAR 0 4
29857: PUSH
29858: DOUBLE
29859: LD_INT 0
29861: DEC
29862: ST_TO_ADDR
29863: LD_INT 5
29865: PUSH
29866: FOR_TO
29867: IFFALSE 29979
// begin _x := ShiftX ( x , i , 3 ) ;
29869: LD_ADDR_VAR 0 7
29873: PUSH
29874: LD_VAR 0 5
29878: PPUSH
29879: LD_VAR 0 4
29883: PPUSH
29884: LD_INT 3
29886: PPUSH
29887: CALL_OW 272
29891: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29892: LD_ADDR_VAR 0 8
29896: PUSH
29897: LD_VAR 0 6
29901: PPUSH
29902: LD_VAR 0 4
29906: PPUSH
29907: LD_INT 3
29909: PPUSH
29910: CALL_OW 273
29914: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29915: LD_VAR 0 7
29919: PPUSH
29920: LD_VAR 0 8
29924: PPUSH
29925: CALL_OW 488
29929: NOT
29930: IFFALSE 29934
// continue ;
29932: GO 29866
// if HexInfo ( _x , _y ) = 0 then
29934: LD_VAR 0 7
29938: PPUSH
29939: LD_VAR 0 8
29943: PPUSH
29944: CALL_OW 428
29948: PUSH
29949: LD_INT 0
29951: EQUAL
29952: IFFALSE 29977
// begin ComMoveXY ( unit , _x , _y ) ;
29954: LD_VAR 0 1
29958: PPUSH
29959: LD_VAR 0 7
29963: PPUSH
29964: LD_VAR 0 8
29968: PPUSH
29969: CALL_OW 111
// exit ;
29973: POP
29974: POP
29975: GO 29981
// end ; end ;
29977: GO 29866
29979: POP
29980: POP
// end ;
29981: LD_VAR 0 3
29985: RET
// export function ScanBase ( side , base_area ) ; begin
29986: LD_INT 0
29988: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29989: LD_ADDR_VAR 0 3
29993: PUSH
29994: LD_VAR 0 2
29998: PPUSH
29999: LD_INT 81
30001: PUSH
30002: LD_VAR 0 1
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PPUSH
30011: CALL_OW 70
30015: ST_TO_ADDR
// end ;
30016: LD_VAR 0 3
30020: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30021: LD_INT 0
30023: PPUSH
30024: PPUSH
30025: PPUSH
30026: PPUSH
// result := false ;
30027: LD_ADDR_VAR 0 2
30031: PUSH
30032: LD_INT 0
30034: ST_TO_ADDR
// side := GetSide ( unit ) ;
30035: LD_ADDR_VAR 0 3
30039: PUSH
30040: LD_VAR 0 1
30044: PPUSH
30045: CALL_OW 255
30049: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30050: LD_ADDR_VAR 0 4
30054: PUSH
30055: LD_VAR 0 1
30059: PPUSH
30060: CALL_OW 248
30064: ST_TO_ADDR
// case nat of 1 :
30065: LD_VAR 0 4
30069: PUSH
30070: LD_INT 1
30072: DOUBLE
30073: EQUAL
30074: IFTRUE 30078
30076: GO 30089
30078: POP
// tech := tech_lassight ; 2 :
30079: LD_ADDR_VAR 0 5
30083: PUSH
30084: LD_INT 12
30086: ST_TO_ADDR
30087: GO 30128
30089: LD_INT 2
30091: DOUBLE
30092: EQUAL
30093: IFTRUE 30097
30095: GO 30108
30097: POP
// tech := tech_mortar ; 3 :
30098: LD_ADDR_VAR 0 5
30102: PUSH
30103: LD_INT 41
30105: ST_TO_ADDR
30106: GO 30128
30108: LD_INT 3
30110: DOUBLE
30111: EQUAL
30112: IFTRUE 30116
30114: GO 30127
30116: POP
// tech := tech_bazooka ; end ;
30117: LD_ADDR_VAR 0 5
30121: PUSH
30122: LD_INT 44
30124: ST_TO_ADDR
30125: GO 30128
30127: POP
// if Researched ( side , tech ) then
30128: LD_VAR 0 3
30132: PPUSH
30133: LD_VAR 0 5
30137: PPUSH
30138: CALL_OW 325
30142: IFFALSE 30169
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30144: LD_ADDR_VAR 0 2
30148: PUSH
30149: LD_INT 5
30151: PUSH
30152: LD_INT 8
30154: PUSH
30155: LD_INT 9
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: LIST
30162: PUSH
30163: LD_VAR 0 4
30167: ARRAY
30168: ST_TO_ADDR
// end ;
30169: LD_VAR 0 2
30173: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30174: LD_INT 0
30176: PPUSH
30177: PPUSH
30178: PPUSH
// if not mines then
30179: LD_VAR 0 2
30183: NOT
30184: IFFALSE 30188
// exit ;
30186: GO 30332
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30188: LD_ADDR_VAR 0 5
30192: PUSH
30193: LD_INT 81
30195: PUSH
30196: LD_VAR 0 1
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 3
30207: PUSH
30208: LD_INT 21
30210: PUSH
30211: LD_INT 3
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PPUSH
30226: CALL_OW 69
30230: ST_TO_ADDR
// for i in mines do
30231: LD_ADDR_VAR 0 4
30235: PUSH
30236: LD_VAR 0 2
30240: PUSH
30241: FOR_IN
30242: IFFALSE 30330
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30244: LD_VAR 0 4
30248: PUSH
30249: LD_INT 1
30251: ARRAY
30252: PPUSH
30253: LD_VAR 0 4
30257: PUSH
30258: LD_INT 2
30260: ARRAY
30261: PPUSH
30262: CALL_OW 458
30266: NOT
30267: IFFALSE 30271
// continue ;
30269: GO 30241
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30271: LD_VAR 0 4
30275: PUSH
30276: LD_INT 1
30278: ARRAY
30279: PPUSH
30280: LD_VAR 0 4
30284: PUSH
30285: LD_INT 2
30287: ARRAY
30288: PPUSH
30289: CALL_OW 428
30293: PUSH
30294: LD_VAR 0 5
30298: IN
30299: IFFALSE 30328
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30301: LD_VAR 0 4
30305: PUSH
30306: LD_INT 1
30308: ARRAY
30309: PPUSH
30310: LD_VAR 0 4
30314: PUSH
30315: LD_INT 2
30317: ARRAY
30318: PPUSH
30319: LD_VAR 0 1
30323: PPUSH
30324: CALL_OW 456
// end ;
30328: GO 30241
30330: POP
30331: POP
// end ;
30332: LD_VAR 0 3
30336: RET
// export function Count ( array ) ; var i ; begin
30337: LD_INT 0
30339: PPUSH
30340: PPUSH
// result := 0 ;
30341: LD_ADDR_VAR 0 2
30345: PUSH
30346: LD_INT 0
30348: ST_TO_ADDR
// for i in array do
30349: LD_ADDR_VAR 0 3
30353: PUSH
30354: LD_VAR 0 1
30358: PUSH
30359: FOR_IN
30360: IFFALSE 30384
// if i then
30362: LD_VAR 0 3
30366: IFFALSE 30382
// result := result + 1 ;
30368: LD_ADDR_VAR 0 2
30372: PUSH
30373: LD_VAR 0 2
30377: PUSH
30378: LD_INT 1
30380: PLUS
30381: ST_TO_ADDR
30382: GO 30359
30384: POP
30385: POP
// end ;
30386: LD_VAR 0 2
30390: RET
// export function IsEmpty ( building ) ; begin
30391: LD_INT 0
30393: PPUSH
// if not building then
30394: LD_VAR 0 1
30398: NOT
30399: IFFALSE 30403
// exit ;
30401: GO 30446
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30403: LD_ADDR_VAR 0 2
30407: PUSH
30408: LD_VAR 0 1
30412: PUSH
30413: LD_INT 22
30415: PUSH
30416: LD_VAR 0 1
30420: PPUSH
30421: CALL_OW 255
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 58
30432: PUSH
30433: EMPTY
30434: LIST
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PPUSH
30440: CALL_OW 69
30444: IN
30445: ST_TO_ADDR
// end ;
30446: LD_VAR 0 2
30450: RET
// export function IsNotFull ( building ) ; begin
30451: LD_INT 0
30453: PPUSH
// if not building then
30454: LD_VAR 0 1
30458: NOT
30459: IFFALSE 30463
// exit ;
30461: GO 30482
// result := UnitsInside ( building ) < 6 ;
30463: LD_ADDR_VAR 0 2
30467: PUSH
30468: LD_VAR 0 1
30472: PPUSH
30473: CALL_OW 313
30477: PUSH
30478: LD_INT 6
30480: LESS
30481: ST_TO_ADDR
// end ;
30482: LD_VAR 0 2
30486: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30487: LD_INT 0
30489: PPUSH
30490: PPUSH
30491: PPUSH
30492: PPUSH
// tmp := [ ] ;
30493: LD_ADDR_VAR 0 3
30497: PUSH
30498: EMPTY
30499: ST_TO_ADDR
// list := [ ] ;
30500: LD_ADDR_VAR 0 5
30504: PUSH
30505: EMPTY
30506: ST_TO_ADDR
// for i = 16 to 25 do
30507: LD_ADDR_VAR 0 4
30511: PUSH
30512: DOUBLE
30513: LD_INT 16
30515: DEC
30516: ST_TO_ADDR
30517: LD_INT 25
30519: PUSH
30520: FOR_TO
30521: IFFALSE 30594
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30523: LD_ADDR_VAR 0 3
30527: PUSH
30528: LD_VAR 0 3
30532: PUSH
30533: LD_INT 22
30535: PUSH
30536: LD_VAR 0 1
30540: PPUSH
30541: CALL_OW 255
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 91
30552: PUSH
30553: LD_VAR 0 1
30557: PUSH
30558: LD_INT 6
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 30
30568: PUSH
30569: LD_VAR 0 4
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: LIST
30582: PUSH
30583: EMPTY
30584: LIST
30585: PPUSH
30586: CALL_OW 69
30590: ADD
30591: ST_TO_ADDR
30592: GO 30520
30594: POP
30595: POP
// for i = 1 to tmp do
30596: LD_ADDR_VAR 0 4
30600: PUSH
30601: DOUBLE
30602: LD_INT 1
30604: DEC
30605: ST_TO_ADDR
30606: LD_VAR 0 3
30610: PUSH
30611: FOR_TO
30612: IFFALSE 30700
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30614: LD_ADDR_VAR 0 5
30618: PUSH
30619: LD_VAR 0 5
30623: PUSH
30624: LD_VAR 0 3
30628: PUSH
30629: LD_VAR 0 4
30633: ARRAY
30634: PPUSH
30635: CALL_OW 266
30639: PUSH
30640: LD_VAR 0 3
30644: PUSH
30645: LD_VAR 0 4
30649: ARRAY
30650: PPUSH
30651: CALL_OW 250
30655: PUSH
30656: LD_VAR 0 3
30660: PUSH
30661: LD_VAR 0 4
30665: ARRAY
30666: PPUSH
30667: CALL_OW 251
30671: PUSH
30672: LD_VAR 0 3
30676: PUSH
30677: LD_VAR 0 4
30681: ARRAY
30682: PPUSH
30683: CALL_OW 254
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: PUSH
30694: EMPTY
30695: LIST
30696: ADD
30697: ST_TO_ADDR
30698: GO 30611
30700: POP
30701: POP
// result := list ;
30702: LD_ADDR_VAR 0 2
30706: PUSH
30707: LD_VAR 0 5
30711: ST_TO_ADDR
// end ;
30712: LD_VAR 0 2
30716: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30717: LD_INT 0
30719: PPUSH
30720: PPUSH
30721: PPUSH
30722: PPUSH
30723: PPUSH
30724: PPUSH
30725: PPUSH
// if not factory then
30726: LD_VAR 0 1
30730: NOT
30731: IFFALSE 30735
// exit ;
30733: GO 31328
// if control = control_apeman then
30735: LD_VAR 0 4
30739: PUSH
30740: LD_INT 5
30742: EQUAL
30743: IFFALSE 30852
// begin tmp := UnitsInside ( factory ) ;
30745: LD_ADDR_VAR 0 8
30749: PUSH
30750: LD_VAR 0 1
30754: PPUSH
30755: CALL_OW 313
30759: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30760: LD_VAR 0 8
30764: PPUSH
30765: LD_INT 25
30767: PUSH
30768: LD_INT 12
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PPUSH
30775: CALL_OW 72
30779: NOT
30780: IFFALSE 30790
// control := control_manual ;
30782: LD_ADDR_VAR 0 4
30786: PUSH
30787: LD_INT 1
30789: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30790: LD_ADDR_VAR 0 8
30794: PUSH
30795: LD_VAR 0 1
30799: PPUSH
30800: CALL 30487 0 1
30804: ST_TO_ADDR
// if tmp then
30805: LD_VAR 0 8
30809: IFFALSE 30852
// begin for i in tmp do
30811: LD_ADDR_VAR 0 7
30815: PUSH
30816: LD_VAR 0 8
30820: PUSH
30821: FOR_IN
30822: IFFALSE 30850
// if i [ 1 ] = b_ext_radio then
30824: LD_VAR 0 7
30828: PUSH
30829: LD_INT 1
30831: ARRAY
30832: PUSH
30833: LD_INT 22
30835: EQUAL
30836: IFFALSE 30848
// begin control := control_remote ;
30838: LD_ADDR_VAR 0 4
30842: PUSH
30843: LD_INT 2
30845: ST_TO_ADDR
// break ;
30846: GO 30850
// end ;
30848: GO 30821
30850: POP
30851: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30852: LD_VAR 0 1
30856: PPUSH
30857: LD_VAR 0 2
30861: PPUSH
30862: LD_VAR 0 3
30866: PPUSH
30867: LD_VAR 0 4
30871: PPUSH
30872: LD_VAR 0 5
30876: PPUSH
30877: CALL_OW 448
30881: IFFALSE 30916
// begin result := [ chassis , engine , control , weapon ] ;
30883: LD_ADDR_VAR 0 6
30887: PUSH
30888: LD_VAR 0 2
30892: PUSH
30893: LD_VAR 0 3
30897: PUSH
30898: LD_VAR 0 4
30902: PUSH
30903: LD_VAR 0 5
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: ST_TO_ADDR
// exit ;
30914: GO 31328
// end ; _chassis := AvailableChassisList ( factory ) ;
30916: LD_ADDR_VAR 0 9
30920: PUSH
30921: LD_VAR 0 1
30925: PPUSH
30926: CALL_OW 475
30930: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30931: LD_ADDR_VAR 0 11
30935: PUSH
30936: LD_VAR 0 1
30940: PPUSH
30941: CALL_OW 476
30945: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30946: LD_ADDR_VAR 0 12
30950: PUSH
30951: LD_VAR 0 1
30955: PPUSH
30956: CALL_OW 477
30960: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30961: LD_ADDR_VAR 0 10
30965: PUSH
30966: LD_VAR 0 1
30970: PPUSH
30971: CALL_OW 478
30975: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30976: LD_VAR 0 9
30980: NOT
30981: PUSH
30982: LD_VAR 0 11
30986: NOT
30987: OR
30988: PUSH
30989: LD_VAR 0 12
30993: NOT
30994: OR
30995: PUSH
30996: LD_VAR 0 10
31000: NOT
31001: OR
31002: IFFALSE 31037
// begin result := [ chassis , engine , control , weapon ] ;
31004: LD_ADDR_VAR 0 6
31008: PUSH
31009: LD_VAR 0 2
31013: PUSH
31014: LD_VAR 0 3
31018: PUSH
31019: LD_VAR 0 4
31023: PUSH
31024: LD_VAR 0 5
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: ST_TO_ADDR
// exit ;
31035: GO 31328
// end ; if not chassis in _chassis then
31037: LD_VAR 0 2
31041: PUSH
31042: LD_VAR 0 9
31046: IN
31047: NOT
31048: IFFALSE 31074
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31050: LD_ADDR_VAR 0 2
31054: PUSH
31055: LD_VAR 0 9
31059: PUSH
31060: LD_INT 1
31062: PPUSH
31063: LD_VAR 0 9
31067: PPUSH
31068: CALL_OW 12
31072: ARRAY
31073: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31074: LD_VAR 0 2
31078: PPUSH
31079: LD_VAR 0 3
31083: PPUSH
31084: CALL 31333 0 2
31088: NOT
31089: IFFALSE 31148
// repeat engine := _engine [ 1 ] ;
31091: LD_ADDR_VAR 0 3
31095: PUSH
31096: LD_VAR 0 11
31100: PUSH
31101: LD_INT 1
31103: ARRAY
31104: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31105: LD_ADDR_VAR 0 11
31109: PUSH
31110: LD_VAR 0 11
31114: PPUSH
31115: LD_INT 1
31117: PPUSH
31118: CALL_OW 3
31122: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31123: LD_VAR 0 2
31127: PPUSH
31128: LD_VAR 0 3
31132: PPUSH
31133: CALL 31333 0 2
31137: PUSH
31138: LD_VAR 0 11
31142: PUSH
31143: EMPTY
31144: EQUAL
31145: OR
31146: IFFALSE 31091
// if not control in _control then
31148: LD_VAR 0 4
31152: PUSH
31153: LD_VAR 0 12
31157: IN
31158: NOT
31159: IFFALSE 31185
// control := _control [ rand ( 1 , _control ) ] ;
31161: LD_ADDR_VAR 0 4
31165: PUSH
31166: LD_VAR 0 12
31170: PUSH
31171: LD_INT 1
31173: PPUSH
31174: LD_VAR 0 12
31178: PPUSH
31179: CALL_OW 12
31183: ARRAY
31184: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31185: LD_VAR 0 2
31189: PPUSH
31190: LD_VAR 0 5
31194: PPUSH
31195: CALL 31553 0 2
31199: NOT
31200: IFFALSE 31259
// repeat weapon := _weapon [ 1 ] ;
31202: LD_ADDR_VAR 0 5
31206: PUSH
31207: LD_VAR 0 10
31211: PUSH
31212: LD_INT 1
31214: ARRAY
31215: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31216: LD_ADDR_VAR 0 10
31220: PUSH
31221: LD_VAR 0 10
31225: PPUSH
31226: LD_INT 1
31228: PPUSH
31229: CALL_OW 3
31233: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31234: LD_VAR 0 2
31238: PPUSH
31239: LD_VAR 0 5
31243: PPUSH
31244: CALL 31553 0 2
31248: PUSH
31249: LD_VAR 0 10
31253: PUSH
31254: EMPTY
31255: EQUAL
31256: OR
31257: IFFALSE 31202
// result := [ ] ;
31259: LD_ADDR_VAR 0 6
31263: PUSH
31264: EMPTY
31265: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31266: LD_VAR 0 1
31270: PPUSH
31271: LD_VAR 0 2
31275: PPUSH
31276: LD_VAR 0 3
31280: PPUSH
31281: LD_VAR 0 4
31285: PPUSH
31286: LD_VAR 0 5
31290: PPUSH
31291: CALL_OW 448
31295: IFFALSE 31328
// result := [ chassis , engine , control , weapon ] ;
31297: LD_ADDR_VAR 0 6
31301: PUSH
31302: LD_VAR 0 2
31306: PUSH
31307: LD_VAR 0 3
31311: PUSH
31312: LD_VAR 0 4
31316: PUSH
31317: LD_VAR 0 5
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: ST_TO_ADDR
// end ;
31328: LD_VAR 0 6
31332: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31333: LD_INT 0
31335: PPUSH
// if not chassis or not engine then
31336: LD_VAR 0 1
31340: NOT
31341: PUSH
31342: LD_VAR 0 2
31346: NOT
31347: OR
31348: IFFALSE 31352
// exit ;
31350: GO 31548
// case engine of engine_solar :
31352: LD_VAR 0 2
31356: PUSH
31357: LD_INT 2
31359: DOUBLE
31360: EQUAL
31361: IFTRUE 31365
31363: GO 31403
31365: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31366: LD_ADDR_VAR 0 3
31370: PUSH
31371: LD_INT 11
31373: PUSH
31374: LD_INT 12
31376: PUSH
31377: LD_INT 13
31379: PUSH
31380: LD_INT 14
31382: PUSH
31383: LD_INT 1
31385: PUSH
31386: LD_INT 2
31388: PUSH
31389: LD_INT 3
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: ST_TO_ADDR
31401: GO 31532
31403: LD_INT 1
31405: DOUBLE
31406: EQUAL
31407: IFTRUE 31411
31409: GO 31473
31411: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31412: LD_ADDR_VAR 0 3
31416: PUSH
31417: LD_INT 11
31419: PUSH
31420: LD_INT 12
31422: PUSH
31423: LD_INT 13
31425: PUSH
31426: LD_INT 14
31428: PUSH
31429: LD_INT 1
31431: PUSH
31432: LD_INT 2
31434: PUSH
31435: LD_INT 3
31437: PUSH
31438: LD_INT 4
31440: PUSH
31441: LD_INT 5
31443: PUSH
31444: LD_INT 21
31446: PUSH
31447: LD_INT 23
31449: PUSH
31450: LD_INT 22
31452: PUSH
31453: LD_INT 24
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: ST_TO_ADDR
31471: GO 31532
31473: LD_INT 3
31475: DOUBLE
31476: EQUAL
31477: IFTRUE 31481
31479: GO 31531
31481: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31482: LD_ADDR_VAR 0 3
31486: PUSH
31487: LD_INT 13
31489: PUSH
31490: LD_INT 14
31492: PUSH
31493: LD_INT 2
31495: PUSH
31496: LD_INT 3
31498: PUSH
31499: LD_INT 4
31501: PUSH
31502: LD_INT 5
31504: PUSH
31505: LD_INT 21
31507: PUSH
31508: LD_INT 22
31510: PUSH
31511: LD_INT 23
31513: PUSH
31514: LD_INT 24
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: ST_TO_ADDR
31529: GO 31532
31531: POP
// result := ( chassis in result ) ;
31532: LD_ADDR_VAR 0 3
31536: PUSH
31537: LD_VAR 0 1
31541: PUSH
31542: LD_VAR 0 3
31546: IN
31547: ST_TO_ADDR
// end ;
31548: LD_VAR 0 3
31552: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31553: LD_INT 0
31555: PPUSH
// if not chassis or not weapon then
31556: LD_VAR 0 1
31560: NOT
31561: PUSH
31562: LD_VAR 0 2
31566: NOT
31567: OR
31568: IFFALSE 31572
// exit ;
31570: GO 32598
// case weapon of us_machine_gun :
31572: LD_VAR 0 2
31576: PUSH
31577: LD_INT 2
31579: DOUBLE
31580: EQUAL
31581: IFTRUE 31585
31583: GO 31615
31585: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31586: LD_ADDR_VAR 0 3
31590: PUSH
31591: LD_INT 1
31593: PUSH
31594: LD_INT 2
31596: PUSH
31597: LD_INT 3
31599: PUSH
31600: LD_INT 4
31602: PUSH
31603: LD_INT 5
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: ST_TO_ADDR
31613: GO 32582
31615: LD_INT 3
31617: DOUBLE
31618: EQUAL
31619: IFTRUE 31623
31621: GO 31653
31623: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31624: LD_ADDR_VAR 0 3
31628: PUSH
31629: LD_INT 1
31631: PUSH
31632: LD_INT 2
31634: PUSH
31635: LD_INT 3
31637: PUSH
31638: LD_INT 4
31640: PUSH
31641: LD_INT 5
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: ST_TO_ADDR
31651: GO 32582
31653: LD_INT 11
31655: DOUBLE
31656: EQUAL
31657: IFTRUE 31661
31659: GO 31691
31661: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31662: LD_ADDR_VAR 0 3
31666: PUSH
31667: LD_INT 1
31669: PUSH
31670: LD_INT 2
31672: PUSH
31673: LD_INT 3
31675: PUSH
31676: LD_INT 4
31678: PUSH
31679: LD_INT 5
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: ST_TO_ADDR
31689: GO 32582
31691: LD_INT 4
31693: DOUBLE
31694: EQUAL
31695: IFTRUE 31699
31697: GO 31725
31699: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31700: LD_ADDR_VAR 0 3
31704: PUSH
31705: LD_INT 2
31707: PUSH
31708: LD_INT 3
31710: PUSH
31711: LD_INT 4
31713: PUSH
31714: LD_INT 5
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: ST_TO_ADDR
31723: GO 32582
31725: LD_INT 5
31727: DOUBLE
31728: EQUAL
31729: IFTRUE 31733
31731: GO 31759
31733: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31734: LD_ADDR_VAR 0 3
31738: PUSH
31739: LD_INT 2
31741: PUSH
31742: LD_INT 3
31744: PUSH
31745: LD_INT 4
31747: PUSH
31748: LD_INT 5
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: ST_TO_ADDR
31757: GO 32582
31759: LD_INT 9
31761: DOUBLE
31762: EQUAL
31763: IFTRUE 31767
31765: GO 31793
31767: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31768: LD_ADDR_VAR 0 3
31772: PUSH
31773: LD_INT 2
31775: PUSH
31776: LD_INT 3
31778: PUSH
31779: LD_INT 4
31781: PUSH
31782: LD_INT 5
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: ST_TO_ADDR
31791: GO 32582
31793: LD_INT 7
31795: DOUBLE
31796: EQUAL
31797: IFTRUE 31801
31799: GO 31827
31801: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31802: LD_ADDR_VAR 0 3
31806: PUSH
31807: LD_INT 2
31809: PUSH
31810: LD_INT 3
31812: PUSH
31813: LD_INT 4
31815: PUSH
31816: LD_INT 5
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: ST_TO_ADDR
31825: GO 32582
31827: LD_INT 12
31829: DOUBLE
31830: EQUAL
31831: IFTRUE 31835
31833: GO 31861
31835: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31836: LD_ADDR_VAR 0 3
31840: PUSH
31841: LD_INT 2
31843: PUSH
31844: LD_INT 3
31846: PUSH
31847: LD_INT 4
31849: PUSH
31850: LD_INT 5
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: ST_TO_ADDR
31859: GO 32582
31861: LD_INT 13
31863: DOUBLE
31864: EQUAL
31865: IFTRUE 31869
31867: GO 31895
31869: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31870: LD_ADDR_VAR 0 3
31874: PUSH
31875: LD_INT 2
31877: PUSH
31878: LD_INT 3
31880: PUSH
31881: LD_INT 4
31883: PUSH
31884: LD_INT 5
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: ST_TO_ADDR
31893: GO 32582
31895: LD_INT 14
31897: DOUBLE
31898: EQUAL
31899: IFTRUE 31903
31901: GO 31921
31903: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31904: LD_ADDR_VAR 0 3
31908: PUSH
31909: LD_INT 4
31911: PUSH
31912: LD_INT 5
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: ST_TO_ADDR
31919: GO 32582
31921: LD_INT 6
31923: DOUBLE
31924: EQUAL
31925: IFTRUE 31929
31927: GO 31947
31929: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31930: LD_ADDR_VAR 0 3
31934: PUSH
31935: LD_INT 4
31937: PUSH
31938: LD_INT 5
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: ST_TO_ADDR
31945: GO 32582
31947: LD_INT 10
31949: DOUBLE
31950: EQUAL
31951: IFTRUE 31955
31953: GO 31973
31955: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31956: LD_ADDR_VAR 0 3
31960: PUSH
31961: LD_INT 4
31963: PUSH
31964: LD_INT 5
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: ST_TO_ADDR
31971: GO 32582
31973: LD_INT 22
31975: DOUBLE
31976: EQUAL
31977: IFTRUE 31981
31979: GO 32007
31981: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31982: LD_ADDR_VAR 0 3
31986: PUSH
31987: LD_INT 11
31989: PUSH
31990: LD_INT 12
31992: PUSH
31993: LD_INT 13
31995: PUSH
31996: LD_INT 14
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: ST_TO_ADDR
32005: GO 32582
32007: LD_INT 23
32009: DOUBLE
32010: EQUAL
32011: IFTRUE 32015
32013: GO 32041
32015: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32016: LD_ADDR_VAR 0 3
32020: PUSH
32021: LD_INT 11
32023: PUSH
32024: LD_INT 12
32026: PUSH
32027: LD_INT 13
32029: PUSH
32030: LD_INT 14
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: ST_TO_ADDR
32039: GO 32582
32041: LD_INT 24
32043: DOUBLE
32044: EQUAL
32045: IFTRUE 32049
32047: GO 32075
32049: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32050: LD_ADDR_VAR 0 3
32054: PUSH
32055: LD_INT 11
32057: PUSH
32058: LD_INT 12
32060: PUSH
32061: LD_INT 13
32063: PUSH
32064: LD_INT 14
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: ST_TO_ADDR
32073: GO 32582
32075: LD_INT 30
32077: DOUBLE
32078: EQUAL
32079: IFTRUE 32083
32081: GO 32109
32083: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32084: LD_ADDR_VAR 0 3
32088: PUSH
32089: LD_INT 11
32091: PUSH
32092: LD_INT 12
32094: PUSH
32095: LD_INT 13
32097: PUSH
32098: LD_INT 14
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: ST_TO_ADDR
32107: GO 32582
32109: LD_INT 25
32111: DOUBLE
32112: EQUAL
32113: IFTRUE 32117
32115: GO 32135
32117: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32118: LD_ADDR_VAR 0 3
32122: PUSH
32123: LD_INT 13
32125: PUSH
32126: LD_INT 14
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: ST_TO_ADDR
32133: GO 32582
32135: LD_INT 27
32137: DOUBLE
32138: EQUAL
32139: IFTRUE 32143
32141: GO 32161
32143: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32144: LD_ADDR_VAR 0 3
32148: PUSH
32149: LD_INT 13
32151: PUSH
32152: LD_INT 14
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: ST_TO_ADDR
32159: GO 32582
32161: LD_INT 28
32163: DOUBLE
32164: EQUAL
32165: IFTRUE 32169
32167: GO 32187
32169: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32170: LD_ADDR_VAR 0 3
32174: PUSH
32175: LD_INT 13
32177: PUSH
32178: LD_INT 14
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: ST_TO_ADDR
32185: GO 32582
32187: LD_INT 29
32189: DOUBLE
32190: EQUAL
32191: IFTRUE 32195
32193: GO 32213
32195: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32196: LD_ADDR_VAR 0 3
32200: PUSH
32201: LD_INT 13
32203: PUSH
32204: LD_INT 14
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: ST_TO_ADDR
32211: GO 32582
32213: LD_INT 31
32215: DOUBLE
32216: EQUAL
32217: IFTRUE 32221
32219: GO 32239
32221: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32222: LD_ADDR_VAR 0 3
32226: PUSH
32227: LD_INT 13
32229: PUSH
32230: LD_INT 14
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: ST_TO_ADDR
32237: GO 32582
32239: LD_INT 26
32241: DOUBLE
32242: EQUAL
32243: IFTRUE 32247
32245: GO 32265
32247: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32248: LD_ADDR_VAR 0 3
32252: PUSH
32253: LD_INT 13
32255: PUSH
32256: LD_INT 14
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: ST_TO_ADDR
32263: GO 32582
32265: LD_INT 42
32267: DOUBLE
32268: EQUAL
32269: IFTRUE 32273
32271: GO 32299
32273: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32274: LD_ADDR_VAR 0 3
32278: PUSH
32279: LD_INT 21
32281: PUSH
32282: LD_INT 22
32284: PUSH
32285: LD_INT 23
32287: PUSH
32288: LD_INT 24
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: ST_TO_ADDR
32297: GO 32582
32299: LD_INT 43
32301: DOUBLE
32302: EQUAL
32303: IFTRUE 32307
32305: GO 32333
32307: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32308: LD_ADDR_VAR 0 3
32312: PUSH
32313: LD_INT 21
32315: PUSH
32316: LD_INT 22
32318: PUSH
32319: LD_INT 23
32321: PUSH
32322: LD_INT 24
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: ST_TO_ADDR
32331: GO 32582
32333: LD_INT 44
32335: DOUBLE
32336: EQUAL
32337: IFTRUE 32341
32339: GO 32367
32341: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32342: LD_ADDR_VAR 0 3
32346: PUSH
32347: LD_INT 21
32349: PUSH
32350: LD_INT 22
32352: PUSH
32353: LD_INT 23
32355: PUSH
32356: LD_INT 24
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: ST_TO_ADDR
32365: GO 32582
32367: LD_INT 45
32369: DOUBLE
32370: EQUAL
32371: IFTRUE 32375
32373: GO 32401
32375: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32376: LD_ADDR_VAR 0 3
32380: PUSH
32381: LD_INT 21
32383: PUSH
32384: LD_INT 22
32386: PUSH
32387: LD_INT 23
32389: PUSH
32390: LD_INT 24
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: ST_TO_ADDR
32399: GO 32582
32401: LD_INT 49
32403: DOUBLE
32404: EQUAL
32405: IFTRUE 32409
32407: GO 32435
32409: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32410: LD_ADDR_VAR 0 3
32414: PUSH
32415: LD_INT 21
32417: PUSH
32418: LD_INT 22
32420: PUSH
32421: LD_INT 23
32423: PUSH
32424: LD_INT 24
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: ST_TO_ADDR
32433: GO 32582
32435: LD_INT 51
32437: DOUBLE
32438: EQUAL
32439: IFTRUE 32443
32441: GO 32469
32443: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32444: LD_ADDR_VAR 0 3
32448: PUSH
32449: LD_INT 21
32451: PUSH
32452: LD_INT 22
32454: PUSH
32455: LD_INT 23
32457: PUSH
32458: LD_INT 24
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: ST_TO_ADDR
32467: GO 32582
32469: LD_INT 52
32471: DOUBLE
32472: EQUAL
32473: IFTRUE 32477
32475: GO 32503
32477: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32478: LD_ADDR_VAR 0 3
32482: PUSH
32483: LD_INT 21
32485: PUSH
32486: LD_INT 22
32488: PUSH
32489: LD_INT 23
32491: PUSH
32492: LD_INT 24
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: ST_TO_ADDR
32501: GO 32582
32503: LD_INT 53
32505: DOUBLE
32506: EQUAL
32507: IFTRUE 32511
32509: GO 32529
32511: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32512: LD_ADDR_VAR 0 3
32516: PUSH
32517: LD_INT 23
32519: PUSH
32520: LD_INT 24
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: ST_TO_ADDR
32527: GO 32582
32529: LD_INT 46
32531: DOUBLE
32532: EQUAL
32533: IFTRUE 32537
32535: GO 32555
32537: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32538: LD_ADDR_VAR 0 3
32542: PUSH
32543: LD_INT 23
32545: PUSH
32546: LD_INT 24
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: ST_TO_ADDR
32553: GO 32582
32555: LD_INT 47
32557: DOUBLE
32558: EQUAL
32559: IFTRUE 32563
32561: GO 32581
32563: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32564: LD_ADDR_VAR 0 3
32568: PUSH
32569: LD_INT 23
32571: PUSH
32572: LD_INT 24
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: ST_TO_ADDR
32579: GO 32582
32581: POP
// result := ( chassis in result ) ;
32582: LD_ADDR_VAR 0 3
32586: PUSH
32587: LD_VAR 0 1
32591: PUSH
32592: LD_VAR 0 3
32596: IN
32597: ST_TO_ADDR
// end ;
32598: LD_VAR 0 3
32602: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32603: LD_INT 0
32605: PPUSH
32606: PPUSH
32607: PPUSH
32608: PPUSH
32609: PPUSH
32610: PPUSH
32611: PPUSH
// result := array ;
32612: LD_ADDR_VAR 0 5
32616: PUSH
32617: LD_VAR 0 1
32621: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32622: LD_VAR 0 1
32626: NOT
32627: PUSH
32628: LD_VAR 0 2
32632: NOT
32633: OR
32634: PUSH
32635: LD_VAR 0 3
32639: NOT
32640: OR
32641: PUSH
32642: LD_VAR 0 2
32646: PUSH
32647: LD_VAR 0 1
32651: GREATER
32652: OR
32653: PUSH
32654: LD_VAR 0 3
32658: PUSH
32659: LD_VAR 0 1
32663: GREATER
32664: OR
32665: IFFALSE 32669
// exit ;
32667: GO 32965
// if direction then
32669: LD_VAR 0 4
32673: IFFALSE 32737
// begin d := 1 ;
32675: LD_ADDR_VAR 0 9
32679: PUSH
32680: LD_INT 1
32682: ST_TO_ADDR
// if i_from > i_to then
32683: LD_VAR 0 2
32687: PUSH
32688: LD_VAR 0 3
32692: GREATER
32693: IFFALSE 32719
// length := ( array - i_from ) + i_to else
32695: LD_ADDR_VAR 0 11
32699: PUSH
32700: LD_VAR 0 1
32704: PUSH
32705: LD_VAR 0 2
32709: MINUS
32710: PUSH
32711: LD_VAR 0 3
32715: PLUS
32716: ST_TO_ADDR
32717: GO 32735
// length := i_to - i_from ;
32719: LD_ADDR_VAR 0 11
32723: PUSH
32724: LD_VAR 0 3
32728: PUSH
32729: LD_VAR 0 2
32733: MINUS
32734: ST_TO_ADDR
// end else
32735: GO 32798
// begin d := - 1 ;
32737: LD_ADDR_VAR 0 9
32741: PUSH
32742: LD_INT 1
32744: NEG
32745: ST_TO_ADDR
// if i_from > i_to then
32746: LD_VAR 0 2
32750: PUSH
32751: LD_VAR 0 3
32755: GREATER
32756: IFFALSE 32776
// length := i_from - i_to else
32758: LD_ADDR_VAR 0 11
32762: PUSH
32763: LD_VAR 0 2
32767: PUSH
32768: LD_VAR 0 3
32772: MINUS
32773: ST_TO_ADDR
32774: GO 32798
// length := ( array - i_to ) + i_from ;
32776: LD_ADDR_VAR 0 11
32780: PUSH
32781: LD_VAR 0 1
32785: PUSH
32786: LD_VAR 0 3
32790: MINUS
32791: PUSH
32792: LD_VAR 0 2
32796: PLUS
32797: ST_TO_ADDR
// end ; if not length then
32798: LD_VAR 0 11
32802: NOT
32803: IFFALSE 32807
// exit ;
32805: GO 32965
// tmp := array ;
32807: LD_ADDR_VAR 0 10
32811: PUSH
32812: LD_VAR 0 1
32816: ST_TO_ADDR
// for i = 1 to length do
32817: LD_ADDR_VAR 0 6
32821: PUSH
32822: DOUBLE
32823: LD_INT 1
32825: DEC
32826: ST_TO_ADDR
32827: LD_VAR 0 11
32831: PUSH
32832: FOR_TO
32833: IFFALSE 32953
// begin for j = 1 to array do
32835: LD_ADDR_VAR 0 7
32839: PUSH
32840: DOUBLE
32841: LD_INT 1
32843: DEC
32844: ST_TO_ADDR
32845: LD_VAR 0 1
32849: PUSH
32850: FOR_TO
32851: IFFALSE 32939
// begin k := j + d ;
32853: LD_ADDR_VAR 0 8
32857: PUSH
32858: LD_VAR 0 7
32862: PUSH
32863: LD_VAR 0 9
32867: PLUS
32868: ST_TO_ADDR
// if k > array then
32869: LD_VAR 0 8
32873: PUSH
32874: LD_VAR 0 1
32878: GREATER
32879: IFFALSE 32889
// k := 1 ;
32881: LD_ADDR_VAR 0 8
32885: PUSH
32886: LD_INT 1
32888: ST_TO_ADDR
// if not k then
32889: LD_VAR 0 8
32893: NOT
32894: IFFALSE 32906
// k := array ;
32896: LD_ADDR_VAR 0 8
32900: PUSH
32901: LD_VAR 0 1
32905: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32906: LD_ADDR_VAR 0 10
32910: PUSH
32911: LD_VAR 0 10
32915: PPUSH
32916: LD_VAR 0 8
32920: PPUSH
32921: LD_VAR 0 1
32925: PUSH
32926: LD_VAR 0 7
32930: ARRAY
32931: PPUSH
32932: CALL_OW 1
32936: ST_TO_ADDR
// end ;
32937: GO 32850
32939: POP
32940: POP
// array := tmp ;
32941: LD_ADDR_VAR 0 1
32945: PUSH
32946: LD_VAR 0 10
32950: ST_TO_ADDR
// end ;
32951: GO 32832
32953: POP
32954: POP
// result := array ;
32955: LD_ADDR_VAR 0 5
32959: PUSH
32960: LD_VAR 0 1
32964: ST_TO_ADDR
// end ;
32965: LD_VAR 0 5
32969: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32970: LD_INT 0
32972: PPUSH
32973: PPUSH
// result := 0 ;
32974: LD_ADDR_VAR 0 3
32978: PUSH
32979: LD_INT 0
32981: ST_TO_ADDR
// if not array or not value in array then
32982: LD_VAR 0 1
32986: NOT
32987: PUSH
32988: LD_VAR 0 2
32992: PUSH
32993: LD_VAR 0 1
32997: IN
32998: NOT
32999: OR
33000: IFFALSE 33004
// exit ;
33002: GO 33058
// for i = 1 to array do
33004: LD_ADDR_VAR 0 4
33008: PUSH
33009: DOUBLE
33010: LD_INT 1
33012: DEC
33013: ST_TO_ADDR
33014: LD_VAR 0 1
33018: PUSH
33019: FOR_TO
33020: IFFALSE 33056
// if value = array [ i ] then
33022: LD_VAR 0 2
33026: PUSH
33027: LD_VAR 0 1
33031: PUSH
33032: LD_VAR 0 4
33036: ARRAY
33037: EQUAL
33038: IFFALSE 33054
// begin result := i ;
33040: LD_ADDR_VAR 0 3
33044: PUSH
33045: LD_VAR 0 4
33049: ST_TO_ADDR
// exit ;
33050: POP
33051: POP
33052: GO 33058
// end ;
33054: GO 33019
33056: POP
33057: POP
// end ;
33058: LD_VAR 0 3
33062: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33063: LD_INT 0
33065: PPUSH
// vc_chassis := chassis ;
33066: LD_ADDR_OWVAR 37
33070: PUSH
33071: LD_VAR 0 1
33075: ST_TO_ADDR
// vc_engine := engine ;
33076: LD_ADDR_OWVAR 39
33080: PUSH
33081: LD_VAR 0 2
33085: ST_TO_ADDR
// vc_control := control ;
33086: LD_ADDR_OWVAR 38
33090: PUSH
33091: LD_VAR 0 3
33095: ST_TO_ADDR
// vc_weapon := weapon ;
33096: LD_ADDR_OWVAR 40
33100: PUSH
33101: LD_VAR 0 4
33105: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33106: LD_ADDR_OWVAR 41
33110: PUSH
33111: LD_VAR 0 5
33115: ST_TO_ADDR
// end ;
33116: LD_VAR 0 6
33120: RET
// export function WantPlant ( unit ) ; var task ; begin
33121: LD_INT 0
33123: PPUSH
33124: PPUSH
// result := false ;
33125: LD_ADDR_VAR 0 2
33129: PUSH
33130: LD_INT 0
33132: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33133: LD_ADDR_VAR 0 3
33137: PUSH
33138: LD_VAR 0 1
33142: PPUSH
33143: CALL_OW 437
33147: ST_TO_ADDR
// if task then
33148: LD_VAR 0 3
33152: IFFALSE 33180
// if task [ 1 ] [ 1 ] = p then
33154: LD_VAR 0 3
33158: PUSH
33159: LD_INT 1
33161: ARRAY
33162: PUSH
33163: LD_INT 1
33165: ARRAY
33166: PUSH
33167: LD_STRING p
33169: EQUAL
33170: IFFALSE 33180
// result := true ;
33172: LD_ADDR_VAR 0 2
33176: PUSH
33177: LD_INT 1
33179: ST_TO_ADDR
// end ;
33180: LD_VAR 0 2
33184: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33185: LD_INT 0
33187: PPUSH
33188: PPUSH
33189: PPUSH
33190: PPUSH
// if pos < 1 then
33191: LD_VAR 0 2
33195: PUSH
33196: LD_INT 1
33198: LESS
33199: IFFALSE 33203
// exit ;
33201: GO 33506
// if pos = 1 then
33203: LD_VAR 0 2
33207: PUSH
33208: LD_INT 1
33210: EQUAL
33211: IFFALSE 33244
// result := Replace ( arr , pos [ 1 ] , value ) else
33213: LD_ADDR_VAR 0 4
33217: PUSH
33218: LD_VAR 0 1
33222: PPUSH
33223: LD_VAR 0 2
33227: PUSH
33228: LD_INT 1
33230: ARRAY
33231: PPUSH
33232: LD_VAR 0 3
33236: PPUSH
33237: CALL_OW 1
33241: ST_TO_ADDR
33242: GO 33506
// begin tmp := arr ;
33244: LD_ADDR_VAR 0 6
33248: PUSH
33249: LD_VAR 0 1
33253: ST_TO_ADDR
// s_arr := [ tmp ] ;
33254: LD_ADDR_VAR 0 7
33258: PUSH
33259: LD_VAR 0 6
33263: PUSH
33264: EMPTY
33265: LIST
33266: ST_TO_ADDR
// for i = 1 to pos - 1 do
33267: LD_ADDR_VAR 0 5
33271: PUSH
33272: DOUBLE
33273: LD_INT 1
33275: DEC
33276: ST_TO_ADDR
33277: LD_VAR 0 2
33281: PUSH
33282: LD_INT 1
33284: MINUS
33285: PUSH
33286: FOR_TO
33287: IFFALSE 33332
// begin tmp := tmp [ pos [ i ] ] ;
33289: LD_ADDR_VAR 0 6
33293: PUSH
33294: LD_VAR 0 6
33298: PUSH
33299: LD_VAR 0 2
33303: PUSH
33304: LD_VAR 0 5
33308: ARRAY
33309: ARRAY
33310: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33311: LD_ADDR_VAR 0 7
33315: PUSH
33316: LD_VAR 0 7
33320: PUSH
33321: LD_VAR 0 6
33325: PUSH
33326: EMPTY
33327: LIST
33328: ADD
33329: ST_TO_ADDR
// end ;
33330: GO 33286
33332: POP
33333: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33334: LD_ADDR_VAR 0 6
33338: PUSH
33339: LD_VAR 0 6
33343: PPUSH
33344: LD_VAR 0 2
33348: PUSH
33349: LD_VAR 0 2
33353: ARRAY
33354: PPUSH
33355: LD_VAR 0 3
33359: PPUSH
33360: CALL_OW 1
33364: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33365: LD_ADDR_VAR 0 7
33369: PUSH
33370: LD_VAR 0 7
33374: PPUSH
33375: LD_VAR 0 7
33379: PPUSH
33380: LD_VAR 0 6
33384: PPUSH
33385: CALL_OW 1
33389: ST_TO_ADDR
// for i = s_arr downto 2 do
33390: LD_ADDR_VAR 0 5
33394: PUSH
33395: DOUBLE
33396: LD_VAR 0 7
33400: INC
33401: ST_TO_ADDR
33402: LD_INT 2
33404: PUSH
33405: FOR_DOWNTO
33406: IFFALSE 33490
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33408: LD_ADDR_VAR 0 6
33412: PUSH
33413: LD_VAR 0 7
33417: PUSH
33418: LD_VAR 0 5
33422: PUSH
33423: LD_INT 1
33425: MINUS
33426: ARRAY
33427: PPUSH
33428: LD_VAR 0 2
33432: PUSH
33433: LD_VAR 0 5
33437: PUSH
33438: LD_INT 1
33440: MINUS
33441: ARRAY
33442: PPUSH
33443: LD_VAR 0 7
33447: PUSH
33448: LD_VAR 0 5
33452: ARRAY
33453: PPUSH
33454: CALL_OW 1
33458: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33459: LD_ADDR_VAR 0 7
33463: PUSH
33464: LD_VAR 0 7
33468: PPUSH
33469: LD_VAR 0 5
33473: PUSH
33474: LD_INT 1
33476: MINUS
33477: PPUSH
33478: LD_VAR 0 6
33482: PPUSH
33483: CALL_OW 1
33487: ST_TO_ADDR
// end ;
33488: GO 33405
33490: POP
33491: POP
// result := s_arr [ 1 ] ;
33492: LD_ADDR_VAR 0 4
33496: PUSH
33497: LD_VAR 0 7
33501: PUSH
33502: LD_INT 1
33504: ARRAY
33505: ST_TO_ADDR
// end ; end ;
33506: LD_VAR 0 4
33510: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33511: LD_INT 0
33513: PPUSH
33514: PPUSH
// if not list then
33515: LD_VAR 0 1
33519: NOT
33520: IFFALSE 33524
// exit ;
33522: GO 33615
// i := list [ pos1 ] ;
33524: LD_ADDR_VAR 0 5
33528: PUSH
33529: LD_VAR 0 1
33533: PUSH
33534: LD_VAR 0 2
33538: ARRAY
33539: ST_TO_ADDR
// if not i then
33540: LD_VAR 0 5
33544: NOT
33545: IFFALSE 33549
// exit ;
33547: GO 33615
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33549: LD_ADDR_VAR 0 1
33553: PUSH
33554: LD_VAR 0 1
33558: PPUSH
33559: LD_VAR 0 2
33563: PPUSH
33564: LD_VAR 0 1
33568: PUSH
33569: LD_VAR 0 3
33573: ARRAY
33574: PPUSH
33575: CALL_OW 1
33579: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33580: LD_ADDR_VAR 0 1
33584: PUSH
33585: LD_VAR 0 1
33589: PPUSH
33590: LD_VAR 0 3
33594: PPUSH
33595: LD_VAR 0 5
33599: PPUSH
33600: CALL_OW 1
33604: ST_TO_ADDR
// result := list ;
33605: LD_ADDR_VAR 0 4
33609: PUSH
33610: LD_VAR 0 1
33614: ST_TO_ADDR
// end ;
33615: LD_VAR 0 4
33619: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33620: LD_INT 0
33622: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33623: LD_ADDR_VAR 0 5
33627: PUSH
33628: LD_VAR 0 1
33632: PPUSH
33633: CALL_OW 250
33637: PPUSH
33638: LD_VAR 0 1
33642: PPUSH
33643: CALL_OW 251
33647: PPUSH
33648: LD_VAR 0 2
33652: PPUSH
33653: LD_VAR 0 3
33657: PPUSH
33658: LD_VAR 0 4
33662: PPUSH
33663: CALL 33673 0 5
33667: ST_TO_ADDR
// end ;
33668: LD_VAR 0 5
33672: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33673: LD_INT 0
33675: PPUSH
33676: PPUSH
33677: PPUSH
33678: PPUSH
// if not list then
33679: LD_VAR 0 3
33683: NOT
33684: IFFALSE 33688
// exit ;
33686: GO 34076
// result := [ ] ;
33688: LD_ADDR_VAR 0 6
33692: PUSH
33693: EMPTY
33694: ST_TO_ADDR
// for i in list do
33695: LD_ADDR_VAR 0 7
33699: PUSH
33700: LD_VAR 0 3
33704: PUSH
33705: FOR_IN
33706: IFFALSE 33908
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33708: LD_ADDR_VAR 0 9
33712: PUSH
33713: LD_VAR 0 7
33717: PPUSH
33718: LD_VAR 0 1
33722: PPUSH
33723: LD_VAR 0 2
33727: PPUSH
33728: CALL_OW 297
33732: ST_TO_ADDR
// if not result then
33733: LD_VAR 0 6
33737: NOT
33738: IFFALSE 33764
// result := [ [ i , tmp ] ] else
33740: LD_ADDR_VAR 0 6
33744: PUSH
33745: LD_VAR 0 7
33749: PUSH
33750: LD_VAR 0 9
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: EMPTY
33760: LIST
33761: ST_TO_ADDR
33762: GO 33906
// begin if result [ result ] [ 2 ] < tmp then
33764: LD_VAR 0 6
33768: PUSH
33769: LD_VAR 0 6
33773: ARRAY
33774: PUSH
33775: LD_INT 2
33777: ARRAY
33778: PUSH
33779: LD_VAR 0 9
33783: LESS
33784: IFFALSE 33826
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33786: LD_ADDR_VAR 0 6
33790: PUSH
33791: LD_VAR 0 6
33795: PPUSH
33796: LD_VAR 0 6
33800: PUSH
33801: LD_INT 1
33803: PLUS
33804: PPUSH
33805: LD_VAR 0 7
33809: PUSH
33810: LD_VAR 0 9
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PPUSH
33819: CALL_OW 2
33823: ST_TO_ADDR
33824: GO 33906
// for j = 1 to result do
33826: LD_ADDR_VAR 0 8
33830: PUSH
33831: DOUBLE
33832: LD_INT 1
33834: DEC
33835: ST_TO_ADDR
33836: LD_VAR 0 6
33840: PUSH
33841: FOR_TO
33842: IFFALSE 33904
// begin if tmp < result [ j ] [ 2 ] then
33844: LD_VAR 0 9
33848: PUSH
33849: LD_VAR 0 6
33853: PUSH
33854: LD_VAR 0 8
33858: ARRAY
33859: PUSH
33860: LD_INT 2
33862: ARRAY
33863: LESS
33864: IFFALSE 33902
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33866: LD_ADDR_VAR 0 6
33870: PUSH
33871: LD_VAR 0 6
33875: PPUSH
33876: LD_VAR 0 8
33880: PPUSH
33881: LD_VAR 0 7
33885: PUSH
33886: LD_VAR 0 9
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PPUSH
33895: CALL_OW 2
33899: ST_TO_ADDR
// break ;
33900: GO 33904
// end ; end ;
33902: GO 33841
33904: POP
33905: POP
// end ; end ;
33906: GO 33705
33908: POP
33909: POP
// if result and not asc then
33910: LD_VAR 0 6
33914: PUSH
33915: LD_VAR 0 4
33919: NOT
33920: AND
33921: IFFALSE 33996
// begin tmp := result ;
33923: LD_ADDR_VAR 0 9
33927: PUSH
33928: LD_VAR 0 6
33932: ST_TO_ADDR
// for i = tmp downto 1 do
33933: LD_ADDR_VAR 0 7
33937: PUSH
33938: DOUBLE
33939: LD_VAR 0 9
33943: INC
33944: ST_TO_ADDR
33945: LD_INT 1
33947: PUSH
33948: FOR_DOWNTO
33949: IFFALSE 33994
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33951: LD_ADDR_VAR 0 6
33955: PUSH
33956: LD_VAR 0 6
33960: PPUSH
33961: LD_VAR 0 9
33965: PUSH
33966: LD_VAR 0 7
33970: MINUS
33971: PUSH
33972: LD_INT 1
33974: PLUS
33975: PPUSH
33976: LD_VAR 0 9
33980: PUSH
33981: LD_VAR 0 7
33985: ARRAY
33986: PPUSH
33987: CALL_OW 1
33991: ST_TO_ADDR
33992: GO 33948
33994: POP
33995: POP
// end ; tmp := [ ] ;
33996: LD_ADDR_VAR 0 9
34000: PUSH
34001: EMPTY
34002: ST_TO_ADDR
// if mode then
34003: LD_VAR 0 5
34007: IFFALSE 34076
// begin for i = 1 to result do
34009: LD_ADDR_VAR 0 7
34013: PUSH
34014: DOUBLE
34015: LD_INT 1
34017: DEC
34018: ST_TO_ADDR
34019: LD_VAR 0 6
34023: PUSH
34024: FOR_TO
34025: IFFALSE 34064
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34027: LD_ADDR_VAR 0 9
34031: PUSH
34032: LD_VAR 0 9
34036: PPUSH
34037: LD_VAR 0 7
34041: PPUSH
34042: LD_VAR 0 6
34046: PUSH
34047: LD_VAR 0 7
34051: ARRAY
34052: PUSH
34053: LD_INT 1
34055: ARRAY
34056: PPUSH
34057: CALL_OW 1
34061: ST_TO_ADDR
34062: GO 34024
34064: POP
34065: POP
// result := tmp ;
34066: LD_ADDR_VAR 0 6
34070: PUSH
34071: LD_VAR 0 9
34075: ST_TO_ADDR
// end ; end ;
34076: LD_VAR 0 6
34080: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34081: LD_INT 0
34083: PPUSH
34084: PPUSH
34085: PPUSH
34086: PPUSH
34087: PPUSH
34088: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34089: LD_ADDR_VAR 0 5
34093: PUSH
34094: LD_INT 0
34096: PUSH
34097: LD_INT 0
34099: PUSH
34100: LD_INT 0
34102: PUSH
34103: EMPTY
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: LIST
34109: LIST
34110: ST_TO_ADDR
// if not x or not y then
34111: LD_VAR 0 2
34115: NOT
34116: PUSH
34117: LD_VAR 0 3
34121: NOT
34122: OR
34123: IFFALSE 34127
// exit ;
34125: GO 35773
// if not range then
34127: LD_VAR 0 4
34131: NOT
34132: IFFALSE 34142
// range := 10 ;
34134: LD_ADDR_VAR 0 4
34138: PUSH
34139: LD_INT 10
34141: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34142: LD_ADDR_VAR 0 8
34146: PUSH
34147: LD_INT 81
34149: PUSH
34150: LD_VAR 0 1
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 92
34161: PUSH
34162: LD_VAR 0 2
34166: PUSH
34167: LD_VAR 0 3
34171: PUSH
34172: LD_VAR 0 4
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 3
34185: PUSH
34186: LD_INT 21
34188: PUSH
34189: LD_INT 3
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: LIST
34204: PPUSH
34205: CALL_OW 69
34209: ST_TO_ADDR
// if not tmp then
34210: LD_VAR 0 8
34214: NOT
34215: IFFALSE 34219
// exit ;
34217: GO 35773
// for i in tmp do
34219: LD_ADDR_VAR 0 6
34223: PUSH
34224: LD_VAR 0 8
34228: PUSH
34229: FOR_IN
34230: IFFALSE 35748
// begin points := [ 0 , 0 , 0 ] ;
34232: LD_ADDR_VAR 0 9
34236: PUSH
34237: LD_INT 0
34239: PUSH
34240: LD_INT 0
34242: PUSH
34243: LD_INT 0
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: LIST
34250: ST_TO_ADDR
// bpoints := 1 ;
34251: LD_ADDR_VAR 0 10
34255: PUSH
34256: LD_INT 1
34258: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34259: LD_VAR 0 6
34263: PPUSH
34264: CALL_OW 247
34268: PUSH
34269: LD_INT 1
34271: DOUBLE
34272: EQUAL
34273: IFTRUE 34277
34275: GO 34855
34277: POP
// begin if GetClass ( i ) = 1 then
34278: LD_VAR 0 6
34282: PPUSH
34283: CALL_OW 257
34287: PUSH
34288: LD_INT 1
34290: EQUAL
34291: IFFALSE 34312
// points := [ 10 , 5 , 3 ] ;
34293: LD_ADDR_VAR 0 9
34297: PUSH
34298: LD_INT 10
34300: PUSH
34301: LD_INT 5
34303: PUSH
34304: LD_INT 3
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: LIST
34311: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34312: LD_VAR 0 6
34316: PPUSH
34317: CALL_OW 257
34321: PUSH
34322: LD_INT 2
34324: PUSH
34325: LD_INT 3
34327: PUSH
34328: LD_INT 4
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: LIST
34335: IN
34336: IFFALSE 34357
// points := [ 3 , 2 , 1 ] ;
34338: LD_ADDR_VAR 0 9
34342: PUSH
34343: LD_INT 3
34345: PUSH
34346: LD_INT 2
34348: PUSH
34349: LD_INT 1
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: LIST
34356: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34357: LD_VAR 0 6
34361: PPUSH
34362: CALL_OW 257
34366: PUSH
34367: LD_INT 5
34369: EQUAL
34370: IFFALSE 34391
// points := [ 130 , 5 , 2 ] ;
34372: LD_ADDR_VAR 0 9
34376: PUSH
34377: LD_INT 130
34379: PUSH
34380: LD_INT 5
34382: PUSH
34383: LD_INT 2
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: LIST
34390: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34391: LD_VAR 0 6
34395: PPUSH
34396: CALL_OW 257
34400: PUSH
34401: LD_INT 8
34403: EQUAL
34404: IFFALSE 34425
// points := [ 35 , 35 , 30 ] ;
34406: LD_ADDR_VAR 0 9
34410: PUSH
34411: LD_INT 35
34413: PUSH
34414: LD_INT 35
34416: PUSH
34417: LD_INT 30
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: LIST
34424: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34425: LD_VAR 0 6
34429: PPUSH
34430: CALL_OW 257
34434: PUSH
34435: LD_INT 9
34437: EQUAL
34438: IFFALSE 34459
// points := [ 20 , 55 , 40 ] ;
34440: LD_ADDR_VAR 0 9
34444: PUSH
34445: LD_INT 20
34447: PUSH
34448: LD_INT 55
34450: PUSH
34451: LD_INT 40
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: LIST
34458: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34459: LD_VAR 0 6
34463: PPUSH
34464: CALL_OW 257
34468: PUSH
34469: LD_INT 12
34471: PUSH
34472: LD_INT 16
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: IN
34479: IFFALSE 34500
// points := [ 5 , 3 , 2 ] ;
34481: LD_ADDR_VAR 0 9
34485: PUSH
34486: LD_INT 5
34488: PUSH
34489: LD_INT 3
34491: PUSH
34492: LD_INT 2
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: LIST
34499: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34500: LD_VAR 0 6
34504: PPUSH
34505: CALL_OW 257
34509: PUSH
34510: LD_INT 17
34512: EQUAL
34513: IFFALSE 34534
// points := [ 100 , 50 , 75 ] ;
34515: LD_ADDR_VAR 0 9
34519: PUSH
34520: LD_INT 100
34522: PUSH
34523: LD_INT 50
34525: PUSH
34526: LD_INT 75
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: LIST
34533: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34534: LD_VAR 0 6
34538: PPUSH
34539: CALL_OW 257
34543: PUSH
34544: LD_INT 15
34546: EQUAL
34547: IFFALSE 34568
// points := [ 10 , 5 , 3 ] ;
34549: LD_ADDR_VAR 0 9
34553: PUSH
34554: LD_INT 10
34556: PUSH
34557: LD_INT 5
34559: PUSH
34560: LD_INT 3
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: LIST
34567: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34568: LD_VAR 0 6
34572: PPUSH
34573: CALL_OW 257
34577: PUSH
34578: LD_INT 14
34580: EQUAL
34581: IFFALSE 34602
// points := [ 10 , 0 , 0 ] ;
34583: LD_ADDR_VAR 0 9
34587: PUSH
34588: LD_INT 10
34590: PUSH
34591: LD_INT 0
34593: PUSH
34594: LD_INT 0
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: LIST
34601: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34602: LD_VAR 0 6
34606: PPUSH
34607: CALL_OW 257
34611: PUSH
34612: LD_INT 11
34614: EQUAL
34615: IFFALSE 34636
// points := [ 30 , 10 , 5 ] ;
34617: LD_ADDR_VAR 0 9
34621: PUSH
34622: LD_INT 30
34624: PUSH
34625: LD_INT 10
34627: PUSH
34628: LD_INT 5
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: LIST
34635: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34636: LD_VAR 0 1
34640: PPUSH
34641: LD_INT 5
34643: PPUSH
34644: CALL_OW 321
34648: PUSH
34649: LD_INT 2
34651: EQUAL
34652: IFFALSE 34669
// bpoints := bpoints * 1.8 ;
34654: LD_ADDR_VAR 0 10
34658: PUSH
34659: LD_VAR 0 10
34663: PUSH
34664: LD_REAL  1.80000000000000E+0000
34667: MUL
34668: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34669: LD_VAR 0 6
34673: PPUSH
34674: CALL_OW 257
34678: PUSH
34679: LD_INT 1
34681: PUSH
34682: LD_INT 2
34684: PUSH
34685: LD_INT 3
34687: PUSH
34688: LD_INT 4
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: IN
34697: PUSH
34698: LD_VAR 0 1
34702: PPUSH
34703: LD_INT 51
34705: PPUSH
34706: CALL_OW 321
34710: PUSH
34711: LD_INT 2
34713: EQUAL
34714: AND
34715: IFFALSE 34732
// bpoints := bpoints * 1.2 ;
34717: LD_ADDR_VAR 0 10
34721: PUSH
34722: LD_VAR 0 10
34726: PUSH
34727: LD_REAL  1.20000000000000E+0000
34730: MUL
34731: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34732: LD_VAR 0 6
34736: PPUSH
34737: CALL_OW 257
34741: PUSH
34742: LD_INT 5
34744: PUSH
34745: LD_INT 7
34747: PUSH
34748: LD_INT 9
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: LIST
34755: IN
34756: PUSH
34757: LD_VAR 0 1
34761: PPUSH
34762: LD_INT 52
34764: PPUSH
34765: CALL_OW 321
34769: PUSH
34770: LD_INT 2
34772: EQUAL
34773: AND
34774: IFFALSE 34791
// bpoints := bpoints * 1.5 ;
34776: LD_ADDR_VAR 0 10
34780: PUSH
34781: LD_VAR 0 10
34785: PUSH
34786: LD_REAL  1.50000000000000E+0000
34789: MUL
34790: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34791: LD_VAR 0 1
34795: PPUSH
34796: LD_INT 66
34798: PPUSH
34799: CALL_OW 321
34803: PUSH
34804: LD_INT 2
34806: EQUAL
34807: IFFALSE 34824
// bpoints := bpoints * 1.1 ;
34809: LD_ADDR_VAR 0 10
34813: PUSH
34814: LD_VAR 0 10
34818: PUSH
34819: LD_REAL  1.10000000000000E+0000
34822: MUL
34823: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34824: LD_ADDR_VAR 0 10
34828: PUSH
34829: LD_VAR 0 10
34833: PUSH
34834: LD_VAR 0 6
34838: PPUSH
34839: LD_INT 1
34841: PPUSH
34842: CALL_OW 259
34846: PUSH
34847: LD_REAL  1.15000000000000E+0000
34850: MUL
34851: MUL
34852: ST_TO_ADDR
// end ; unit_vehicle :
34853: GO 35677
34855: LD_INT 2
34857: DOUBLE
34858: EQUAL
34859: IFTRUE 34863
34861: GO 35665
34863: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34864: LD_VAR 0 6
34868: PPUSH
34869: CALL_OW 264
34873: PUSH
34874: LD_INT 2
34876: PUSH
34877: LD_INT 42
34879: PUSH
34880: LD_INT 24
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: LIST
34887: IN
34888: IFFALSE 34909
// points := [ 25 , 5 , 3 ] ;
34890: LD_ADDR_VAR 0 9
34894: PUSH
34895: LD_INT 25
34897: PUSH
34898: LD_INT 5
34900: PUSH
34901: LD_INT 3
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: LIST
34908: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34909: LD_VAR 0 6
34913: PPUSH
34914: CALL_OW 264
34918: PUSH
34919: LD_INT 4
34921: PUSH
34922: LD_INT 43
34924: PUSH
34925: LD_INT 25
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: LIST
34932: IN
34933: IFFALSE 34954
// points := [ 40 , 15 , 5 ] ;
34935: LD_ADDR_VAR 0 9
34939: PUSH
34940: LD_INT 40
34942: PUSH
34943: LD_INT 15
34945: PUSH
34946: LD_INT 5
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: LIST
34953: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34954: LD_VAR 0 6
34958: PPUSH
34959: CALL_OW 264
34963: PUSH
34964: LD_INT 3
34966: PUSH
34967: LD_INT 23
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: IN
34974: IFFALSE 34995
// points := [ 7 , 25 , 8 ] ;
34976: LD_ADDR_VAR 0 9
34980: PUSH
34981: LD_INT 7
34983: PUSH
34984: LD_INT 25
34986: PUSH
34987: LD_INT 8
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: LIST
34994: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34995: LD_VAR 0 6
34999: PPUSH
35000: CALL_OW 264
35004: PUSH
35005: LD_INT 5
35007: PUSH
35008: LD_INT 27
35010: PUSH
35011: LD_INT 44
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: LIST
35018: IN
35019: IFFALSE 35040
// points := [ 14 , 50 , 16 ] ;
35021: LD_ADDR_VAR 0 9
35025: PUSH
35026: LD_INT 14
35028: PUSH
35029: LD_INT 50
35031: PUSH
35032: LD_INT 16
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: LIST
35039: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35040: LD_VAR 0 6
35044: PPUSH
35045: CALL_OW 264
35049: PUSH
35050: LD_INT 6
35052: PUSH
35053: LD_INT 46
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: IN
35060: IFFALSE 35081
// points := [ 32 , 120 , 70 ] ;
35062: LD_ADDR_VAR 0 9
35066: PUSH
35067: LD_INT 32
35069: PUSH
35070: LD_INT 120
35072: PUSH
35073: LD_INT 70
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: LIST
35080: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
35081: LD_VAR 0 6
35085: PPUSH
35086: CALL_OW 264
35090: PUSH
35091: LD_INT 7
35093: PUSH
35094: LD_INT 28
35096: PUSH
35097: LD_INT 45
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: LIST
35104: IN
35105: IFFALSE 35126
// points := [ 35 , 20 , 45 ] ;
35107: LD_ADDR_VAR 0 9
35111: PUSH
35112: LD_INT 35
35114: PUSH
35115: LD_INT 20
35117: PUSH
35118: LD_INT 45
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: LIST
35125: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35126: LD_VAR 0 6
35130: PPUSH
35131: CALL_OW 264
35135: PUSH
35136: LD_INT 47
35138: PUSH
35139: EMPTY
35140: LIST
35141: IN
35142: IFFALSE 35163
// points := [ 67 , 45 , 75 ] ;
35144: LD_ADDR_VAR 0 9
35148: PUSH
35149: LD_INT 67
35151: PUSH
35152: LD_INT 45
35154: PUSH
35155: LD_INT 75
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: LIST
35162: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35163: LD_VAR 0 6
35167: PPUSH
35168: CALL_OW 264
35172: PUSH
35173: LD_INT 26
35175: PUSH
35176: EMPTY
35177: LIST
35178: IN
35179: IFFALSE 35200
// points := [ 120 , 30 , 80 ] ;
35181: LD_ADDR_VAR 0 9
35185: PUSH
35186: LD_INT 120
35188: PUSH
35189: LD_INT 30
35191: PUSH
35192: LD_INT 80
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: LIST
35199: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35200: LD_VAR 0 6
35204: PPUSH
35205: CALL_OW 264
35209: PUSH
35210: LD_INT 22
35212: PUSH
35213: EMPTY
35214: LIST
35215: IN
35216: IFFALSE 35237
// points := [ 40 , 1 , 1 ] ;
35218: LD_ADDR_VAR 0 9
35222: PUSH
35223: LD_INT 40
35225: PUSH
35226: LD_INT 1
35228: PUSH
35229: LD_INT 1
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: LIST
35236: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35237: LD_VAR 0 6
35241: PPUSH
35242: CALL_OW 264
35246: PUSH
35247: LD_INT 29
35249: PUSH
35250: EMPTY
35251: LIST
35252: IN
35253: IFFALSE 35274
// points := [ 70 , 200 , 400 ] ;
35255: LD_ADDR_VAR 0 9
35259: PUSH
35260: LD_INT 70
35262: PUSH
35263: LD_INT 200
35265: PUSH
35266: LD_INT 400
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: LIST
35273: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35274: LD_VAR 0 6
35278: PPUSH
35279: CALL_OW 264
35283: PUSH
35284: LD_INT 14
35286: PUSH
35287: LD_INT 53
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: IN
35294: IFFALSE 35315
// points := [ 40 , 10 , 20 ] ;
35296: LD_ADDR_VAR 0 9
35300: PUSH
35301: LD_INT 40
35303: PUSH
35304: LD_INT 10
35306: PUSH
35307: LD_INT 20
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: LIST
35314: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35315: LD_VAR 0 6
35319: PPUSH
35320: CALL_OW 264
35324: PUSH
35325: LD_INT 9
35327: PUSH
35328: EMPTY
35329: LIST
35330: IN
35331: IFFALSE 35352
// points := [ 5 , 70 , 20 ] ;
35333: LD_ADDR_VAR 0 9
35337: PUSH
35338: LD_INT 5
35340: PUSH
35341: LD_INT 70
35343: PUSH
35344: LD_INT 20
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: LIST
35351: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35352: LD_VAR 0 6
35356: PPUSH
35357: CALL_OW 264
35361: PUSH
35362: LD_INT 10
35364: PUSH
35365: EMPTY
35366: LIST
35367: IN
35368: IFFALSE 35389
// points := [ 35 , 110 , 70 ] ;
35370: LD_ADDR_VAR 0 9
35374: PUSH
35375: LD_INT 35
35377: PUSH
35378: LD_INT 110
35380: PUSH
35381: LD_INT 70
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: LIST
35388: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35389: LD_VAR 0 6
35393: PPUSH
35394: CALL_OW 265
35398: PUSH
35399: LD_INT 25
35401: EQUAL
35402: IFFALSE 35423
// points := [ 80 , 65 , 100 ] ;
35404: LD_ADDR_VAR 0 9
35408: PUSH
35409: LD_INT 80
35411: PUSH
35412: LD_INT 65
35414: PUSH
35415: LD_INT 100
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: LIST
35422: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35423: LD_VAR 0 6
35427: PPUSH
35428: CALL_OW 263
35432: PUSH
35433: LD_INT 1
35435: EQUAL
35436: IFFALSE 35471
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35438: LD_ADDR_VAR 0 10
35442: PUSH
35443: LD_VAR 0 10
35447: PUSH
35448: LD_VAR 0 6
35452: PPUSH
35453: CALL_OW 311
35457: PPUSH
35458: LD_INT 3
35460: PPUSH
35461: CALL_OW 259
35465: PUSH
35466: LD_INT 4
35468: MUL
35469: MUL
35470: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35471: LD_VAR 0 6
35475: PPUSH
35476: CALL_OW 263
35480: PUSH
35481: LD_INT 2
35483: EQUAL
35484: IFFALSE 35535
// begin j := IsControledBy ( i ) ;
35486: LD_ADDR_VAR 0 7
35490: PUSH
35491: LD_VAR 0 6
35495: PPUSH
35496: CALL_OW 312
35500: ST_TO_ADDR
// if j then
35501: LD_VAR 0 7
35505: IFFALSE 35535
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35507: LD_ADDR_VAR 0 10
35511: PUSH
35512: LD_VAR 0 10
35516: PUSH
35517: LD_VAR 0 7
35521: PPUSH
35522: LD_INT 3
35524: PPUSH
35525: CALL_OW 259
35529: PUSH
35530: LD_INT 3
35532: MUL
35533: MUL
35534: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35535: LD_VAR 0 6
35539: PPUSH
35540: CALL_OW 264
35544: PUSH
35545: LD_INT 5
35547: PUSH
35548: LD_INT 6
35550: PUSH
35551: LD_INT 46
35553: PUSH
35554: LD_INT 44
35556: PUSH
35557: LD_INT 47
35559: PUSH
35560: LD_INT 45
35562: PUSH
35563: LD_INT 28
35565: PUSH
35566: LD_INT 7
35568: PUSH
35569: LD_INT 27
35571: PUSH
35572: LD_INT 29
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: IN
35587: PUSH
35588: LD_VAR 0 1
35592: PPUSH
35593: LD_INT 52
35595: PPUSH
35596: CALL_OW 321
35600: PUSH
35601: LD_INT 2
35603: EQUAL
35604: AND
35605: IFFALSE 35622
// bpoints := bpoints * 1.2 ;
35607: LD_ADDR_VAR 0 10
35611: PUSH
35612: LD_VAR 0 10
35616: PUSH
35617: LD_REAL  1.20000000000000E+0000
35620: MUL
35621: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35622: LD_VAR 0 6
35626: PPUSH
35627: CALL_OW 264
35631: PUSH
35632: LD_INT 6
35634: PUSH
35635: LD_INT 46
35637: PUSH
35638: LD_INT 47
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: LIST
35645: IN
35646: IFFALSE 35663
// bpoints := bpoints * 1.2 ;
35648: LD_ADDR_VAR 0 10
35652: PUSH
35653: LD_VAR 0 10
35657: PUSH
35658: LD_REAL  1.20000000000000E+0000
35661: MUL
35662: ST_TO_ADDR
// end ; unit_building :
35663: GO 35677
35665: LD_INT 3
35667: DOUBLE
35668: EQUAL
35669: IFTRUE 35673
35671: GO 35676
35673: POP
// ; end ;
35674: GO 35677
35676: POP
// for j = 1 to 3 do
35677: LD_ADDR_VAR 0 7
35681: PUSH
35682: DOUBLE
35683: LD_INT 1
35685: DEC
35686: ST_TO_ADDR
35687: LD_INT 3
35689: PUSH
35690: FOR_TO
35691: IFFALSE 35744
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35693: LD_ADDR_VAR 0 5
35697: PUSH
35698: LD_VAR 0 5
35702: PPUSH
35703: LD_VAR 0 7
35707: PPUSH
35708: LD_VAR 0 5
35712: PUSH
35713: LD_VAR 0 7
35717: ARRAY
35718: PUSH
35719: LD_VAR 0 9
35723: PUSH
35724: LD_VAR 0 7
35728: ARRAY
35729: PUSH
35730: LD_VAR 0 10
35734: MUL
35735: PLUS
35736: PPUSH
35737: CALL_OW 1
35741: ST_TO_ADDR
35742: GO 35690
35744: POP
35745: POP
// end ;
35746: GO 34229
35748: POP
35749: POP
// result := Replace ( result , 4 , tmp ) ;
35750: LD_ADDR_VAR 0 5
35754: PUSH
35755: LD_VAR 0 5
35759: PPUSH
35760: LD_INT 4
35762: PPUSH
35763: LD_VAR 0 8
35767: PPUSH
35768: CALL_OW 1
35772: ST_TO_ADDR
// end ;
35773: LD_VAR 0 5
35777: RET
// export function DangerAtRange ( unit , range ) ; begin
35778: LD_INT 0
35780: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35781: LD_ADDR_VAR 0 3
35785: PUSH
35786: LD_VAR 0 1
35790: PPUSH
35791: CALL_OW 255
35795: PPUSH
35796: LD_VAR 0 1
35800: PPUSH
35801: CALL_OW 250
35805: PPUSH
35806: LD_VAR 0 1
35810: PPUSH
35811: CALL_OW 251
35815: PPUSH
35816: LD_VAR 0 2
35820: PPUSH
35821: CALL 34081 0 4
35825: ST_TO_ADDR
// end ;
35826: LD_VAR 0 3
35830: RET
// export function DangerInArea ( side , area ) ; begin
35831: LD_INT 0
35833: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35834: LD_ADDR_VAR 0 3
35838: PUSH
35839: LD_VAR 0 2
35843: PPUSH
35844: LD_INT 81
35846: PUSH
35847: LD_VAR 0 1
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PPUSH
35856: CALL_OW 70
35860: ST_TO_ADDR
// end ;
35861: LD_VAR 0 3
35865: RET
// export function IsExtension ( b ) ; begin
35866: LD_INT 0
35868: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35869: LD_ADDR_VAR 0 2
35873: PUSH
35874: LD_VAR 0 1
35878: PUSH
35879: LD_INT 23
35881: PUSH
35882: LD_INT 20
35884: PUSH
35885: LD_INT 22
35887: PUSH
35888: LD_INT 17
35890: PUSH
35891: LD_INT 24
35893: PUSH
35894: LD_INT 21
35896: PUSH
35897: LD_INT 19
35899: PUSH
35900: LD_INT 16
35902: PUSH
35903: LD_INT 25
35905: PUSH
35906: LD_INT 18
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: IN
35921: ST_TO_ADDR
// end ;
35922: LD_VAR 0 2
35926: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
35927: LD_INT 0
35929: PPUSH
35930: PPUSH
35931: PPUSH
// result := [ ] ;
35932: LD_ADDR_VAR 0 3
35936: PUSH
35937: EMPTY
35938: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35939: LD_ADDR_VAR 0 4
35943: PUSH
35944: LD_VAR 0 2
35948: PPUSH
35949: LD_INT 21
35951: PUSH
35952: LD_INT 3
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PPUSH
35959: CALL_OW 70
35963: ST_TO_ADDR
// if not tmp then
35964: LD_VAR 0 4
35968: NOT
35969: IFFALSE 35973
// exit ;
35971: GO 36031
// for i in tmp do
35973: LD_ADDR_VAR 0 5
35977: PUSH
35978: LD_VAR 0 4
35982: PUSH
35983: FOR_IN
35984: IFFALSE 36019
// if GetBase ( i ) <> base then
35986: LD_VAR 0 5
35990: PPUSH
35991: CALL_OW 274
35995: PUSH
35996: LD_VAR 0 1
36000: NONEQUAL
36001: IFFALSE 36017
// ComLinkToBase ( base , i ) ;
36003: LD_VAR 0 1
36007: PPUSH
36008: LD_VAR 0 5
36012: PPUSH
36013: CALL_OW 169
36017: GO 35983
36019: POP
36020: POP
// result := tmp ;
36021: LD_ADDR_VAR 0 3
36025: PUSH
36026: LD_VAR 0 4
36030: ST_TO_ADDR
// end ;
36031: LD_VAR 0 3
36035: RET
// export function ComComplete ( unit , b ) ; var i ; begin
36036: LD_INT 0
36038: PPUSH
36039: PPUSH
// if BuildingStatus ( b ) = bs_build then
36040: LD_VAR 0 2
36044: PPUSH
36045: CALL_OW 461
36049: PUSH
36050: LD_INT 1
36052: EQUAL
36053: IFFALSE 36113
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36055: LD_VAR 0 1
36059: PPUSH
36060: LD_STRING h
36062: PUSH
36063: LD_VAR 0 2
36067: PPUSH
36068: CALL_OW 250
36072: PUSH
36073: LD_VAR 0 2
36077: PPUSH
36078: CALL_OW 251
36082: PUSH
36083: LD_VAR 0 2
36087: PUSH
36088: LD_INT 0
36090: PUSH
36091: LD_INT 0
36093: PUSH
36094: LD_INT 0
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: PUSH
36106: EMPTY
36107: LIST
36108: PPUSH
36109: CALL_OW 446
// end ;
36113: LD_VAR 0 3
36117: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36118: LD_INT 0
36120: PPUSH
36121: PPUSH
36122: PPUSH
36123: PPUSH
36124: PPUSH
36125: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
36126: LD_VAR 0 1
36130: NOT
36131: PUSH
36132: LD_VAR 0 1
36136: PPUSH
36137: CALL_OW 263
36141: PUSH
36142: LD_INT 2
36144: EQUAL
36145: NOT
36146: OR
36147: IFFALSE 36151
// exit ;
36149: GO 36467
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36151: LD_ADDR_VAR 0 6
36155: PUSH
36156: LD_INT 22
36158: PUSH
36159: LD_VAR 0 1
36163: PPUSH
36164: CALL_OW 255
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 2
36175: PUSH
36176: LD_INT 30
36178: PUSH
36179: LD_INT 36
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 34
36188: PUSH
36189: LD_INT 31
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: LIST
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PPUSH
36205: CALL_OW 69
36209: ST_TO_ADDR
// if not tmp then
36210: LD_VAR 0 6
36214: NOT
36215: IFFALSE 36219
// exit ;
36217: GO 36467
// result := [ ] ;
36219: LD_ADDR_VAR 0 2
36223: PUSH
36224: EMPTY
36225: ST_TO_ADDR
// for i in tmp do
36226: LD_ADDR_VAR 0 3
36230: PUSH
36231: LD_VAR 0 6
36235: PUSH
36236: FOR_IN
36237: IFFALSE 36308
// begin t := UnitsInside ( i ) ;
36239: LD_ADDR_VAR 0 4
36243: PUSH
36244: LD_VAR 0 3
36248: PPUSH
36249: CALL_OW 313
36253: ST_TO_ADDR
// if t then
36254: LD_VAR 0 4
36258: IFFALSE 36306
// for j in t do
36260: LD_ADDR_VAR 0 7
36264: PUSH
36265: LD_VAR 0 4
36269: PUSH
36270: FOR_IN
36271: IFFALSE 36304
// result := Insert ( result , result + 1 , j ) ;
36273: LD_ADDR_VAR 0 2
36277: PUSH
36278: LD_VAR 0 2
36282: PPUSH
36283: LD_VAR 0 2
36287: PUSH
36288: LD_INT 1
36290: PLUS
36291: PPUSH
36292: LD_VAR 0 7
36296: PPUSH
36297: CALL_OW 2
36301: ST_TO_ADDR
36302: GO 36270
36304: POP
36305: POP
// end ;
36306: GO 36236
36308: POP
36309: POP
// if not result then
36310: LD_VAR 0 2
36314: NOT
36315: IFFALSE 36319
// exit ;
36317: GO 36467
// mech := result [ 1 ] ;
36319: LD_ADDR_VAR 0 5
36323: PUSH
36324: LD_VAR 0 2
36328: PUSH
36329: LD_INT 1
36331: ARRAY
36332: ST_TO_ADDR
// if result > 1 then
36333: LD_VAR 0 2
36337: PUSH
36338: LD_INT 1
36340: GREATER
36341: IFFALSE 36453
// for i = 2 to result do
36343: LD_ADDR_VAR 0 3
36347: PUSH
36348: DOUBLE
36349: LD_INT 2
36351: DEC
36352: ST_TO_ADDR
36353: LD_VAR 0 2
36357: PUSH
36358: FOR_TO
36359: IFFALSE 36451
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36361: LD_ADDR_VAR 0 4
36365: PUSH
36366: LD_VAR 0 2
36370: PUSH
36371: LD_VAR 0 3
36375: ARRAY
36376: PPUSH
36377: LD_INT 3
36379: PPUSH
36380: CALL_OW 259
36384: PUSH
36385: LD_VAR 0 2
36389: PUSH
36390: LD_VAR 0 3
36394: ARRAY
36395: PPUSH
36396: CALL_OW 432
36400: MINUS
36401: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36402: LD_VAR 0 4
36406: PUSH
36407: LD_VAR 0 5
36411: PPUSH
36412: LD_INT 3
36414: PPUSH
36415: CALL_OW 259
36419: PUSH
36420: LD_VAR 0 5
36424: PPUSH
36425: CALL_OW 432
36429: MINUS
36430: GREATEREQUAL
36431: IFFALSE 36449
// mech := result [ i ] ;
36433: LD_ADDR_VAR 0 5
36437: PUSH
36438: LD_VAR 0 2
36442: PUSH
36443: LD_VAR 0 3
36447: ARRAY
36448: ST_TO_ADDR
// end ;
36449: GO 36358
36451: POP
36452: POP
// ComLinkTo ( vehicle , mech ) ;
36453: LD_VAR 0 1
36457: PPUSH
36458: LD_VAR 0 5
36462: PPUSH
36463: CALL_OW 135
// end ;
36467: LD_VAR 0 2
36471: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36472: LD_INT 0
36474: PPUSH
36475: PPUSH
36476: PPUSH
36477: PPUSH
36478: PPUSH
36479: PPUSH
36480: PPUSH
36481: PPUSH
36482: PPUSH
36483: PPUSH
36484: PPUSH
36485: PPUSH
36486: PPUSH
// result := [ ] ;
36487: LD_ADDR_VAR 0 7
36491: PUSH
36492: EMPTY
36493: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36494: LD_VAR 0 1
36498: PPUSH
36499: CALL_OW 266
36503: PUSH
36504: LD_INT 0
36506: PUSH
36507: LD_INT 1
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: IN
36514: NOT
36515: IFFALSE 36519
// exit ;
36517: GO 38150
// if name then
36519: LD_VAR 0 3
36523: IFFALSE 36539
// SetBName ( base_dep , name ) ;
36525: LD_VAR 0 1
36529: PPUSH
36530: LD_VAR 0 3
36534: PPUSH
36535: CALL_OW 500
// base := GetBase ( base_dep ) ;
36539: LD_ADDR_VAR 0 15
36543: PUSH
36544: LD_VAR 0 1
36548: PPUSH
36549: CALL_OW 274
36553: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36554: LD_ADDR_VAR 0 16
36558: PUSH
36559: LD_VAR 0 1
36563: PPUSH
36564: CALL_OW 255
36568: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36569: LD_ADDR_VAR 0 17
36573: PUSH
36574: LD_VAR 0 1
36578: PPUSH
36579: CALL_OW 248
36583: ST_TO_ADDR
// if sources then
36584: LD_VAR 0 5
36588: IFFALSE 36635
// for i = 1 to 3 do
36590: LD_ADDR_VAR 0 8
36594: PUSH
36595: DOUBLE
36596: LD_INT 1
36598: DEC
36599: ST_TO_ADDR
36600: LD_INT 3
36602: PUSH
36603: FOR_TO
36604: IFFALSE 36633
// AddResourceType ( base , i , sources [ i ] ) ;
36606: LD_VAR 0 15
36610: PPUSH
36611: LD_VAR 0 8
36615: PPUSH
36616: LD_VAR 0 5
36620: PUSH
36621: LD_VAR 0 8
36625: ARRAY
36626: PPUSH
36627: CALL_OW 276
36631: GO 36603
36633: POP
36634: POP
// buildings := GetBaseBuildings ( base , area ) ;
36635: LD_ADDR_VAR 0 18
36639: PUSH
36640: LD_VAR 0 15
36644: PPUSH
36645: LD_VAR 0 2
36649: PPUSH
36650: CALL 35927 0 2
36654: ST_TO_ADDR
// InitHc ;
36655: CALL_OW 19
// InitUc ;
36659: CALL_OW 18
// uc_side := side ;
36663: LD_ADDR_OWVAR 20
36667: PUSH
36668: LD_VAR 0 16
36672: ST_TO_ADDR
// uc_nation := nation ;
36673: LD_ADDR_OWVAR 21
36677: PUSH
36678: LD_VAR 0 17
36682: ST_TO_ADDR
// if buildings then
36683: LD_VAR 0 18
36687: IFFALSE 38009
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36689: LD_ADDR_VAR 0 19
36693: PUSH
36694: LD_VAR 0 18
36698: PPUSH
36699: LD_INT 2
36701: PUSH
36702: LD_INT 30
36704: PUSH
36705: LD_INT 29
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 30
36714: PUSH
36715: LD_INT 30
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: LIST
36726: PPUSH
36727: CALL_OW 72
36731: ST_TO_ADDR
// if tmp then
36732: LD_VAR 0 19
36736: IFFALSE 36784
// for i in tmp do
36738: LD_ADDR_VAR 0 8
36742: PUSH
36743: LD_VAR 0 19
36747: PUSH
36748: FOR_IN
36749: IFFALSE 36782
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36751: LD_VAR 0 8
36755: PPUSH
36756: CALL_OW 250
36760: PPUSH
36761: LD_VAR 0 8
36765: PPUSH
36766: CALL_OW 251
36770: PPUSH
36771: LD_VAR 0 16
36775: PPUSH
36776: CALL_OW 441
36780: GO 36748
36782: POP
36783: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36784: LD_VAR 0 18
36788: PPUSH
36789: LD_INT 2
36791: PUSH
36792: LD_INT 30
36794: PUSH
36795: LD_INT 32
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 30
36804: PUSH
36805: LD_INT 33
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: LIST
36816: PPUSH
36817: CALL_OW 72
36821: IFFALSE 36909
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36823: LD_ADDR_VAR 0 8
36827: PUSH
36828: LD_VAR 0 18
36832: PPUSH
36833: LD_INT 2
36835: PUSH
36836: LD_INT 30
36838: PUSH
36839: LD_INT 32
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 30
36848: PUSH
36849: LD_INT 33
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: LIST
36860: PPUSH
36861: CALL_OW 72
36865: PUSH
36866: FOR_IN
36867: IFFALSE 36907
// begin if not GetBWeapon ( i ) then
36869: LD_VAR 0 8
36873: PPUSH
36874: CALL_OW 269
36878: NOT
36879: IFFALSE 36905
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36881: LD_VAR 0 8
36885: PPUSH
36886: LD_VAR 0 8
36890: PPUSH
36891: LD_VAR 0 2
36895: PPUSH
36896: CALL 38155 0 2
36900: PPUSH
36901: CALL_OW 431
// end ;
36905: GO 36866
36907: POP
36908: POP
// end ; for i = 1 to personel do
36909: LD_ADDR_VAR 0 8
36913: PUSH
36914: DOUBLE
36915: LD_INT 1
36917: DEC
36918: ST_TO_ADDR
36919: LD_VAR 0 6
36923: PUSH
36924: FOR_TO
36925: IFFALSE 37989
// begin if i > 4 then
36927: LD_VAR 0 8
36931: PUSH
36932: LD_INT 4
36934: GREATER
36935: IFFALSE 36939
// break ;
36937: GO 37989
// case i of 1 :
36939: LD_VAR 0 8
36943: PUSH
36944: LD_INT 1
36946: DOUBLE
36947: EQUAL
36948: IFTRUE 36952
36950: GO 37032
36952: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36953: LD_ADDR_VAR 0 12
36957: PUSH
36958: LD_VAR 0 18
36962: PPUSH
36963: LD_INT 22
36965: PUSH
36966: LD_VAR 0 16
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 58
36977: PUSH
36978: EMPTY
36979: LIST
36980: PUSH
36981: LD_INT 2
36983: PUSH
36984: LD_INT 30
36986: PUSH
36987: LD_INT 32
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 30
36996: PUSH
36997: LD_INT 4
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 30
37006: PUSH
37007: LD_INT 5
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: LIST
37024: PPUSH
37025: CALL_OW 72
37029: ST_TO_ADDR
37030: GO 37254
37032: LD_INT 2
37034: DOUBLE
37035: EQUAL
37036: IFTRUE 37040
37038: GO 37102
37040: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37041: LD_ADDR_VAR 0 12
37045: PUSH
37046: LD_VAR 0 18
37050: PPUSH
37051: LD_INT 22
37053: PUSH
37054: LD_VAR 0 16
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 2
37065: PUSH
37066: LD_INT 30
37068: PUSH
37069: LD_INT 0
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 30
37078: PUSH
37079: LD_INT 1
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: LIST
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PPUSH
37095: CALL_OW 72
37099: ST_TO_ADDR
37100: GO 37254
37102: LD_INT 3
37104: DOUBLE
37105: EQUAL
37106: IFTRUE 37110
37108: GO 37172
37110: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37111: LD_ADDR_VAR 0 12
37115: PUSH
37116: LD_VAR 0 18
37120: PPUSH
37121: LD_INT 22
37123: PUSH
37124: LD_VAR 0 16
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 2
37135: PUSH
37136: LD_INT 30
37138: PUSH
37139: LD_INT 2
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 30
37148: PUSH
37149: LD_INT 3
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: LIST
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PPUSH
37165: CALL_OW 72
37169: ST_TO_ADDR
37170: GO 37254
37172: LD_INT 4
37174: DOUBLE
37175: EQUAL
37176: IFTRUE 37180
37178: GO 37253
37180: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37181: LD_ADDR_VAR 0 12
37185: PUSH
37186: LD_VAR 0 18
37190: PPUSH
37191: LD_INT 22
37193: PUSH
37194: LD_VAR 0 16
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 2
37205: PUSH
37206: LD_INT 30
37208: PUSH
37209: LD_INT 6
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: LD_INT 30
37218: PUSH
37219: LD_INT 7
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 30
37228: PUSH
37229: LD_INT 8
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PPUSH
37246: CALL_OW 72
37250: ST_TO_ADDR
37251: GO 37254
37253: POP
// if i = 1 then
37254: LD_VAR 0 8
37258: PUSH
37259: LD_INT 1
37261: EQUAL
37262: IFFALSE 37373
// begin tmp := [ ] ;
37264: LD_ADDR_VAR 0 19
37268: PUSH
37269: EMPTY
37270: ST_TO_ADDR
// for j in f do
37271: LD_ADDR_VAR 0 9
37275: PUSH
37276: LD_VAR 0 12
37280: PUSH
37281: FOR_IN
37282: IFFALSE 37355
// if GetBType ( j ) = b_bunker then
37284: LD_VAR 0 9
37288: PPUSH
37289: CALL_OW 266
37293: PUSH
37294: LD_INT 32
37296: EQUAL
37297: IFFALSE 37324
// tmp := Insert ( tmp , 1 , j ) else
37299: LD_ADDR_VAR 0 19
37303: PUSH
37304: LD_VAR 0 19
37308: PPUSH
37309: LD_INT 1
37311: PPUSH
37312: LD_VAR 0 9
37316: PPUSH
37317: CALL_OW 2
37321: ST_TO_ADDR
37322: GO 37353
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37324: LD_ADDR_VAR 0 19
37328: PUSH
37329: LD_VAR 0 19
37333: PPUSH
37334: LD_VAR 0 19
37338: PUSH
37339: LD_INT 1
37341: PLUS
37342: PPUSH
37343: LD_VAR 0 9
37347: PPUSH
37348: CALL_OW 2
37352: ST_TO_ADDR
37353: GO 37281
37355: POP
37356: POP
// if tmp then
37357: LD_VAR 0 19
37361: IFFALSE 37373
// f := tmp ;
37363: LD_ADDR_VAR 0 12
37367: PUSH
37368: LD_VAR 0 19
37372: ST_TO_ADDR
// end ; x := personel [ i ] ;
37373: LD_ADDR_VAR 0 13
37377: PUSH
37378: LD_VAR 0 6
37382: PUSH
37383: LD_VAR 0 8
37387: ARRAY
37388: ST_TO_ADDR
// if x = - 1 then
37389: LD_VAR 0 13
37393: PUSH
37394: LD_INT 1
37396: NEG
37397: EQUAL
37398: IFFALSE 37607
// begin for j in f do
37400: LD_ADDR_VAR 0 9
37404: PUSH
37405: LD_VAR 0 12
37409: PUSH
37410: FOR_IN
37411: IFFALSE 37603
// repeat InitHc ;
37413: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37417: LD_VAR 0 9
37421: PPUSH
37422: CALL_OW 266
37426: PUSH
37427: LD_INT 5
37429: EQUAL
37430: IFFALSE 37500
// begin if UnitsInside ( j ) < 3 then
37432: LD_VAR 0 9
37436: PPUSH
37437: CALL_OW 313
37441: PUSH
37442: LD_INT 3
37444: LESS
37445: IFFALSE 37481
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37447: LD_INT 0
37449: PPUSH
37450: LD_INT 5
37452: PUSH
37453: LD_INT 8
37455: PUSH
37456: LD_INT 9
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: LIST
37463: PUSH
37464: LD_VAR 0 17
37468: ARRAY
37469: PPUSH
37470: LD_VAR 0 4
37474: PPUSH
37475: CALL_OW 380
37479: GO 37498
// PrepareHuman ( false , i , skill ) ;
37481: LD_INT 0
37483: PPUSH
37484: LD_VAR 0 8
37488: PPUSH
37489: LD_VAR 0 4
37493: PPUSH
37494: CALL_OW 380
// end else
37498: GO 37517
// PrepareHuman ( false , i , skill ) ;
37500: LD_INT 0
37502: PPUSH
37503: LD_VAR 0 8
37507: PPUSH
37508: LD_VAR 0 4
37512: PPUSH
37513: CALL_OW 380
// un := CreateHuman ;
37517: LD_ADDR_VAR 0 14
37521: PUSH
37522: CALL_OW 44
37526: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37527: LD_ADDR_VAR 0 7
37531: PUSH
37532: LD_VAR 0 7
37536: PPUSH
37537: LD_INT 1
37539: PPUSH
37540: LD_VAR 0 14
37544: PPUSH
37545: CALL_OW 2
37549: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37550: LD_VAR 0 14
37554: PPUSH
37555: LD_VAR 0 9
37559: PPUSH
37560: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37564: LD_VAR 0 9
37568: PPUSH
37569: CALL_OW 313
37573: PUSH
37574: LD_INT 6
37576: EQUAL
37577: PUSH
37578: LD_VAR 0 9
37582: PPUSH
37583: CALL_OW 266
37587: PUSH
37588: LD_INT 32
37590: PUSH
37591: LD_INT 31
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: IN
37598: OR
37599: IFFALSE 37413
37601: GO 37410
37603: POP
37604: POP
// end else
37605: GO 37987
// for j = 1 to x do
37607: LD_ADDR_VAR 0 9
37611: PUSH
37612: DOUBLE
37613: LD_INT 1
37615: DEC
37616: ST_TO_ADDR
37617: LD_VAR 0 13
37621: PUSH
37622: FOR_TO
37623: IFFALSE 37985
// begin InitHc ;
37625: CALL_OW 19
// if not f then
37629: LD_VAR 0 12
37633: NOT
37634: IFFALSE 37723
// begin PrepareHuman ( false , i , skill ) ;
37636: LD_INT 0
37638: PPUSH
37639: LD_VAR 0 8
37643: PPUSH
37644: LD_VAR 0 4
37648: PPUSH
37649: CALL_OW 380
// un := CreateHuman ;
37653: LD_ADDR_VAR 0 14
37657: PUSH
37658: CALL_OW 44
37662: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37663: LD_ADDR_VAR 0 7
37667: PUSH
37668: LD_VAR 0 7
37672: PPUSH
37673: LD_INT 1
37675: PPUSH
37676: LD_VAR 0 14
37680: PPUSH
37681: CALL_OW 2
37685: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37686: LD_VAR 0 14
37690: PPUSH
37691: LD_VAR 0 1
37695: PPUSH
37696: CALL_OW 250
37700: PPUSH
37701: LD_VAR 0 1
37705: PPUSH
37706: CALL_OW 251
37710: PPUSH
37711: LD_INT 10
37713: PPUSH
37714: LD_INT 0
37716: PPUSH
37717: CALL_OW 50
// continue ;
37721: GO 37622
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37723: LD_VAR 0 12
37727: PUSH
37728: LD_INT 1
37730: ARRAY
37731: PPUSH
37732: CALL_OW 313
37736: PUSH
37737: LD_VAR 0 12
37741: PUSH
37742: LD_INT 1
37744: ARRAY
37745: PPUSH
37746: CALL_OW 266
37750: PUSH
37751: LD_INT 32
37753: PUSH
37754: LD_INT 31
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: IN
37761: AND
37762: PUSH
37763: LD_VAR 0 12
37767: PUSH
37768: LD_INT 1
37770: ARRAY
37771: PPUSH
37772: CALL_OW 313
37776: PUSH
37777: LD_INT 6
37779: EQUAL
37780: OR
37781: IFFALSE 37801
// f := Delete ( f , 1 ) ;
37783: LD_ADDR_VAR 0 12
37787: PUSH
37788: LD_VAR 0 12
37792: PPUSH
37793: LD_INT 1
37795: PPUSH
37796: CALL_OW 3
37800: ST_TO_ADDR
// if not f then
37801: LD_VAR 0 12
37805: NOT
37806: IFFALSE 37824
// begin x := x + 2 ;
37808: LD_ADDR_VAR 0 13
37812: PUSH
37813: LD_VAR 0 13
37817: PUSH
37818: LD_INT 2
37820: PLUS
37821: ST_TO_ADDR
// continue ;
37822: GO 37622
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37824: LD_VAR 0 12
37828: PUSH
37829: LD_INT 1
37831: ARRAY
37832: PPUSH
37833: CALL_OW 266
37837: PUSH
37838: LD_INT 5
37840: EQUAL
37841: IFFALSE 37915
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37843: LD_VAR 0 12
37847: PUSH
37848: LD_INT 1
37850: ARRAY
37851: PPUSH
37852: CALL_OW 313
37856: PUSH
37857: LD_INT 3
37859: LESS
37860: IFFALSE 37896
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37862: LD_INT 0
37864: PPUSH
37865: LD_INT 5
37867: PUSH
37868: LD_INT 8
37870: PUSH
37871: LD_INT 9
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: LIST
37878: PUSH
37879: LD_VAR 0 17
37883: ARRAY
37884: PPUSH
37885: LD_VAR 0 4
37889: PPUSH
37890: CALL_OW 380
37894: GO 37913
// PrepareHuman ( false , i , skill ) ;
37896: LD_INT 0
37898: PPUSH
37899: LD_VAR 0 8
37903: PPUSH
37904: LD_VAR 0 4
37908: PPUSH
37909: CALL_OW 380
// end else
37913: GO 37932
// PrepareHuman ( false , i , skill ) ;
37915: LD_INT 0
37917: PPUSH
37918: LD_VAR 0 8
37922: PPUSH
37923: LD_VAR 0 4
37927: PPUSH
37928: CALL_OW 380
// un := CreateHuman ;
37932: LD_ADDR_VAR 0 14
37936: PUSH
37937: CALL_OW 44
37941: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37942: LD_ADDR_VAR 0 7
37946: PUSH
37947: LD_VAR 0 7
37951: PPUSH
37952: LD_INT 1
37954: PPUSH
37955: LD_VAR 0 14
37959: PPUSH
37960: CALL_OW 2
37964: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37965: LD_VAR 0 14
37969: PPUSH
37970: LD_VAR 0 12
37974: PUSH
37975: LD_INT 1
37977: ARRAY
37978: PPUSH
37979: CALL_OW 52
// end ;
37983: GO 37622
37985: POP
37986: POP
// end ;
37987: GO 36924
37989: POP
37990: POP
// result := result ^ buildings ;
37991: LD_ADDR_VAR 0 7
37995: PUSH
37996: LD_VAR 0 7
38000: PUSH
38001: LD_VAR 0 18
38005: ADD
38006: ST_TO_ADDR
// end else
38007: GO 38150
// begin for i = 1 to personel do
38009: LD_ADDR_VAR 0 8
38013: PUSH
38014: DOUBLE
38015: LD_INT 1
38017: DEC
38018: ST_TO_ADDR
38019: LD_VAR 0 6
38023: PUSH
38024: FOR_TO
38025: IFFALSE 38148
// begin if i > 4 then
38027: LD_VAR 0 8
38031: PUSH
38032: LD_INT 4
38034: GREATER
38035: IFFALSE 38039
// break ;
38037: GO 38148
// x := personel [ i ] ;
38039: LD_ADDR_VAR 0 13
38043: PUSH
38044: LD_VAR 0 6
38048: PUSH
38049: LD_VAR 0 8
38053: ARRAY
38054: ST_TO_ADDR
// if x = - 1 then
38055: LD_VAR 0 13
38059: PUSH
38060: LD_INT 1
38062: NEG
38063: EQUAL
38064: IFFALSE 38068
// continue ;
38066: GO 38024
// PrepareHuman ( false , i , skill ) ;
38068: LD_INT 0
38070: PPUSH
38071: LD_VAR 0 8
38075: PPUSH
38076: LD_VAR 0 4
38080: PPUSH
38081: CALL_OW 380
// un := CreateHuman ;
38085: LD_ADDR_VAR 0 14
38089: PUSH
38090: CALL_OW 44
38094: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38095: LD_VAR 0 14
38099: PPUSH
38100: LD_VAR 0 1
38104: PPUSH
38105: CALL_OW 250
38109: PPUSH
38110: LD_VAR 0 1
38114: PPUSH
38115: CALL_OW 251
38119: PPUSH
38120: LD_INT 10
38122: PPUSH
38123: LD_INT 0
38125: PPUSH
38126: CALL_OW 50
// result := result ^ un ;
38130: LD_ADDR_VAR 0 7
38134: PUSH
38135: LD_VAR 0 7
38139: PUSH
38140: LD_VAR 0 14
38144: ADD
38145: ST_TO_ADDR
// end ;
38146: GO 38024
38148: POP
38149: POP
// end ; end ;
38150: LD_VAR 0 7
38154: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38155: LD_INT 0
38157: PPUSH
38158: PPUSH
38159: PPUSH
38160: PPUSH
38161: PPUSH
38162: PPUSH
38163: PPUSH
38164: PPUSH
38165: PPUSH
38166: PPUSH
38167: PPUSH
38168: PPUSH
38169: PPUSH
38170: PPUSH
38171: PPUSH
38172: PPUSH
// result := false ;
38173: LD_ADDR_VAR 0 3
38177: PUSH
38178: LD_INT 0
38180: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38181: LD_VAR 0 1
38185: NOT
38186: PUSH
38187: LD_VAR 0 1
38191: PPUSH
38192: CALL_OW 266
38196: PUSH
38197: LD_INT 32
38199: PUSH
38200: LD_INT 33
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: IN
38207: NOT
38208: OR
38209: IFFALSE 38213
// exit ;
38211: GO 39349
// nat := GetNation ( tower ) ;
38213: LD_ADDR_VAR 0 12
38217: PUSH
38218: LD_VAR 0 1
38222: PPUSH
38223: CALL_OW 248
38227: ST_TO_ADDR
// side := GetSide ( tower ) ;
38228: LD_ADDR_VAR 0 16
38232: PUSH
38233: LD_VAR 0 1
38237: PPUSH
38238: CALL_OW 255
38242: ST_TO_ADDR
// x := GetX ( tower ) ;
38243: LD_ADDR_VAR 0 10
38247: PUSH
38248: LD_VAR 0 1
38252: PPUSH
38253: CALL_OW 250
38257: ST_TO_ADDR
// y := GetY ( tower ) ;
38258: LD_ADDR_VAR 0 11
38262: PUSH
38263: LD_VAR 0 1
38267: PPUSH
38268: CALL_OW 251
38272: ST_TO_ADDR
// if not x or not y then
38273: LD_VAR 0 10
38277: NOT
38278: PUSH
38279: LD_VAR 0 11
38283: NOT
38284: OR
38285: IFFALSE 38289
// exit ;
38287: GO 39349
// weapon := 0 ;
38289: LD_ADDR_VAR 0 18
38293: PUSH
38294: LD_INT 0
38296: ST_TO_ADDR
// fac_list := [ ] ;
38297: LD_ADDR_VAR 0 17
38301: PUSH
38302: EMPTY
38303: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
38304: LD_ADDR_VAR 0 6
38308: PUSH
38309: LD_VAR 0 1
38313: PPUSH
38314: CALL_OW 274
38318: PPUSH
38319: LD_VAR 0 2
38323: PPUSH
38324: CALL 35927 0 2
38328: PPUSH
38329: LD_INT 30
38331: PUSH
38332: LD_INT 3
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PPUSH
38339: CALL_OW 72
38343: ST_TO_ADDR
// if not factories then
38344: LD_VAR 0 6
38348: NOT
38349: IFFALSE 38353
// exit ;
38351: GO 39349
// for i in factories do
38353: LD_ADDR_VAR 0 8
38357: PUSH
38358: LD_VAR 0 6
38362: PUSH
38363: FOR_IN
38364: IFFALSE 38389
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38366: LD_ADDR_VAR 0 17
38370: PUSH
38371: LD_VAR 0 17
38375: PUSH
38376: LD_VAR 0 8
38380: PPUSH
38381: CALL_OW 478
38385: UNION
38386: ST_TO_ADDR
38387: GO 38363
38389: POP
38390: POP
// if not fac_list then
38391: LD_VAR 0 17
38395: NOT
38396: IFFALSE 38400
// exit ;
38398: GO 39349
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38400: LD_ADDR_VAR 0 5
38404: PUSH
38405: LD_INT 4
38407: PUSH
38408: LD_INT 5
38410: PUSH
38411: LD_INT 9
38413: PUSH
38414: LD_INT 10
38416: PUSH
38417: LD_INT 6
38419: PUSH
38420: LD_INT 7
38422: PUSH
38423: LD_INT 11
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 27
38437: PUSH
38438: LD_INT 28
38440: PUSH
38441: LD_INT 26
38443: PUSH
38444: LD_INT 30
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 43
38455: PUSH
38456: LD_INT 44
38458: PUSH
38459: LD_INT 46
38461: PUSH
38462: LD_INT 45
38464: PUSH
38465: LD_INT 47
38467: PUSH
38468: LD_INT 49
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: LIST
38483: PUSH
38484: LD_VAR 0 12
38488: ARRAY
38489: ST_TO_ADDR
// for i in list do
38490: LD_ADDR_VAR 0 8
38494: PUSH
38495: LD_VAR 0 5
38499: PUSH
38500: FOR_IN
38501: IFFALSE 38534
// if not i in fac_list then
38503: LD_VAR 0 8
38507: PUSH
38508: LD_VAR 0 17
38512: IN
38513: NOT
38514: IFFALSE 38532
// list := list diff i ;
38516: LD_ADDR_VAR 0 5
38520: PUSH
38521: LD_VAR 0 5
38525: PUSH
38526: LD_VAR 0 8
38530: DIFF
38531: ST_TO_ADDR
38532: GO 38500
38534: POP
38535: POP
// if not list then
38536: LD_VAR 0 5
38540: NOT
38541: IFFALSE 38545
// exit ;
38543: GO 39349
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38545: LD_VAR 0 12
38549: PUSH
38550: LD_INT 3
38552: EQUAL
38553: PUSH
38554: LD_INT 49
38556: PUSH
38557: LD_VAR 0 5
38561: IN
38562: AND
38563: PUSH
38564: LD_INT 31
38566: PPUSH
38567: LD_VAR 0 16
38571: PPUSH
38572: CALL_OW 321
38576: PUSH
38577: LD_INT 2
38579: EQUAL
38580: AND
38581: IFFALSE 38641
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38583: LD_INT 22
38585: PUSH
38586: LD_VAR 0 16
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 35
38597: PUSH
38598: LD_INT 49
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 91
38607: PUSH
38608: LD_VAR 0 1
38612: PUSH
38613: LD_INT 10
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: LIST
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: LIST
38625: PPUSH
38626: CALL_OW 69
38630: NOT
38631: IFFALSE 38641
// weapon := ru_time_lapser ;
38633: LD_ADDR_VAR 0 18
38637: PUSH
38638: LD_INT 49
38640: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38641: LD_VAR 0 12
38645: PUSH
38646: LD_INT 1
38648: PUSH
38649: LD_INT 2
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: IN
38656: PUSH
38657: LD_INT 11
38659: PUSH
38660: LD_VAR 0 5
38664: IN
38665: PUSH
38666: LD_INT 30
38668: PUSH
38669: LD_VAR 0 5
38673: IN
38674: OR
38675: AND
38676: PUSH
38677: LD_INT 6
38679: PPUSH
38680: LD_VAR 0 16
38684: PPUSH
38685: CALL_OW 321
38689: PUSH
38690: LD_INT 2
38692: EQUAL
38693: AND
38694: IFFALSE 38859
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38696: LD_INT 22
38698: PUSH
38699: LD_VAR 0 16
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 2
38710: PUSH
38711: LD_INT 35
38713: PUSH
38714: LD_INT 11
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 35
38723: PUSH
38724: LD_INT 30
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 91
38738: PUSH
38739: LD_VAR 0 1
38743: PUSH
38744: LD_INT 18
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: LIST
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: LIST
38756: PPUSH
38757: CALL_OW 69
38761: NOT
38762: PUSH
38763: LD_INT 22
38765: PUSH
38766: LD_VAR 0 16
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 2
38777: PUSH
38778: LD_INT 30
38780: PUSH
38781: LD_INT 32
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 30
38790: PUSH
38791: LD_INT 33
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 91
38805: PUSH
38806: LD_VAR 0 1
38810: PUSH
38811: LD_INT 12
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: LIST
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: LIST
38823: PUSH
38824: EMPTY
38825: LIST
38826: PPUSH
38827: CALL_OW 69
38831: PUSH
38832: LD_INT 2
38834: GREATER
38835: AND
38836: IFFALSE 38859
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38838: LD_ADDR_VAR 0 18
38842: PUSH
38843: LD_INT 11
38845: PUSH
38846: LD_INT 30
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_VAR 0 12
38857: ARRAY
38858: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38859: LD_VAR 0 18
38863: NOT
38864: PUSH
38865: LD_INT 40
38867: PPUSH
38868: LD_VAR 0 16
38872: PPUSH
38873: CALL_OW 321
38877: PUSH
38878: LD_INT 2
38880: EQUAL
38881: AND
38882: PUSH
38883: LD_INT 7
38885: PUSH
38886: LD_VAR 0 5
38890: IN
38891: PUSH
38892: LD_INT 28
38894: PUSH
38895: LD_VAR 0 5
38899: IN
38900: OR
38901: PUSH
38902: LD_INT 45
38904: PUSH
38905: LD_VAR 0 5
38909: IN
38910: OR
38911: AND
38912: IFFALSE 39166
// begin hex := GetHexInfo ( x , y ) ;
38914: LD_ADDR_VAR 0 4
38918: PUSH
38919: LD_VAR 0 10
38923: PPUSH
38924: LD_VAR 0 11
38928: PPUSH
38929: CALL_OW 546
38933: ST_TO_ADDR
// if hex [ 1 ] then
38934: LD_VAR 0 4
38938: PUSH
38939: LD_INT 1
38941: ARRAY
38942: IFFALSE 38946
// exit ;
38944: GO 39349
// height := hex [ 2 ] ;
38946: LD_ADDR_VAR 0 15
38950: PUSH
38951: LD_VAR 0 4
38955: PUSH
38956: LD_INT 2
38958: ARRAY
38959: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38960: LD_ADDR_VAR 0 14
38964: PUSH
38965: LD_INT 0
38967: PUSH
38968: LD_INT 2
38970: PUSH
38971: LD_INT 3
38973: PUSH
38974: LD_INT 5
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: ST_TO_ADDR
// for i in tmp do
38983: LD_ADDR_VAR 0 8
38987: PUSH
38988: LD_VAR 0 14
38992: PUSH
38993: FOR_IN
38994: IFFALSE 39164
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38996: LD_ADDR_VAR 0 9
39000: PUSH
39001: LD_VAR 0 10
39005: PPUSH
39006: LD_VAR 0 8
39010: PPUSH
39011: LD_INT 5
39013: PPUSH
39014: CALL_OW 272
39018: PUSH
39019: LD_VAR 0 11
39023: PPUSH
39024: LD_VAR 0 8
39028: PPUSH
39029: LD_INT 5
39031: PPUSH
39032: CALL_OW 273
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39041: LD_VAR 0 9
39045: PUSH
39046: LD_INT 1
39048: ARRAY
39049: PPUSH
39050: LD_VAR 0 9
39054: PUSH
39055: LD_INT 2
39057: ARRAY
39058: PPUSH
39059: CALL_OW 488
39063: IFFALSE 39162
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39065: LD_ADDR_VAR 0 4
39069: PUSH
39070: LD_VAR 0 9
39074: PUSH
39075: LD_INT 1
39077: ARRAY
39078: PPUSH
39079: LD_VAR 0 9
39083: PUSH
39084: LD_INT 2
39086: ARRAY
39087: PPUSH
39088: CALL_OW 546
39092: ST_TO_ADDR
// if hex [ 1 ] then
39093: LD_VAR 0 4
39097: PUSH
39098: LD_INT 1
39100: ARRAY
39101: IFFALSE 39105
// continue ;
39103: GO 38993
// h := hex [ 2 ] ;
39105: LD_ADDR_VAR 0 13
39109: PUSH
39110: LD_VAR 0 4
39114: PUSH
39115: LD_INT 2
39117: ARRAY
39118: ST_TO_ADDR
// if h + 7 < height then
39119: LD_VAR 0 13
39123: PUSH
39124: LD_INT 7
39126: PLUS
39127: PUSH
39128: LD_VAR 0 15
39132: LESS
39133: IFFALSE 39162
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39135: LD_ADDR_VAR 0 18
39139: PUSH
39140: LD_INT 7
39142: PUSH
39143: LD_INT 28
39145: PUSH
39146: LD_INT 45
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: LIST
39153: PUSH
39154: LD_VAR 0 12
39158: ARRAY
39159: ST_TO_ADDR
// break ;
39160: GO 39164
// end ; end ; end ;
39162: GO 38993
39164: POP
39165: POP
// end ; if not weapon then
39166: LD_VAR 0 18
39170: NOT
39171: IFFALSE 39231
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39173: LD_ADDR_VAR 0 5
39177: PUSH
39178: LD_VAR 0 5
39182: PUSH
39183: LD_INT 11
39185: PUSH
39186: LD_INT 30
39188: PUSH
39189: LD_INT 49
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: LIST
39196: DIFF
39197: ST_TO_ADDR
// if not list then
39198: LD_VAR 0 5
39202: NOT
39203: IFFALSE 39207
// exit ;
39205: GO 39349
// weapon := list [ rand ( 1 , list ) ] ;
39207: LD_ADDR_VAR 0 18
39211: PUSH
39212: LD_VAR 0 5
39216: PUSH
39217: LD_INT 1
39219: PPUSH
39220: LD_VAR 0 5
39224: PPUSH
39225: CALL_OW 12
39229: ARRAY
39230: ST_TO_ADDR
// end ; if weapon then
39231: LD_VAR 0 18
39235: IFFALSE 39349
// begin tmp := CostOfWeapon ( weapon ) ;
39237: LD_ADDR_VAR 0 14
39241: PUSH
39242: LD_VAR 0 18
39246: PPUSH
39247: CALL_OW 451
39251: ST_TO_ADDR
// j := GetBase ( tower ) ;
39252: LD_ADDR_VAR 0 9
39256: PUSH
39257: LD_VAR 0 1
39261: PPUSH
39262: CALL_OW 274
39266: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39267: LD_VAR 0 9
39271: PPUSH
39272: LD_INT 1
39274: PPUSH
39275: CALL_OW 275
39279: PUSH
39280: LD_VAR 0 14
39284: PUSH
39285: LD_INT 1
39287: ARRAY
39288: GREATEREQUAL
39289: PUSH
39290: LD_VAR 0 9
39294: PPUSH
39295: LD_INT 2
39297: PPUSH
39298: CALL_OW 275
39302: PUSH
39303: LD_VAR 0 14
39307: PUSH
39308: LD_INT 2
39310: ARRAY
39311: GREATEREQUAL
39312: AND
39313: PUSH
39314: LD_VAR 0 9
39318: PPUSH
39319: LD_INT 3
39321: PPUSH
39322: CALL_OW 275
39326: PUSH
39327: LD_VAR 0 14
39331: PUSH
39332: LD_INT 3
39334: ARRAY
39335: GREATEREQUAL
39336: AND
39337: IFFALSE 39349
// result := weapon ;
39339: LD_ADDR_VAR 0 3
39343: PUSH
39344: LD_VAR 0 18
39348: ST_TO_ADDR
// end ; end ;
39349: LD_VAR 0 3
39353: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39354: LD_INT 0
39356: PPUSH
39357: PPUSH
// result := true ;
39358: LD_ADDR_VAR 0 3
39362: PUSH
39363: LD_INT 1
39365: ST_TO_ADDR
// if array1 = array2 then
39366: LD_VAR 0 1
39370: PUSH
39371: LD_VAR 0 2
39375: EQUAL
39376: IFFALSE 39436
// begin for i = 1 to array1 do
39378: LD_ADDR_VAR 0 4
39382: PUSH
39383: DOUBLE
39384: LD_INT 1
39386: DEC
39387: ST_TO_ADDR
39388: LD_VAR 0 1
39392: PUSH
39393: FOR_TO
39394: IFFALSE 39432
// if array1 [ i ] <> array2 [ i ] then
39396: LD_VAR 0 1
39400: PUSH
39401: LD_VAR 0 4
39405: ARRAY
39406: PUSH
39407: LD_VAR 0 2
39411: PUSH
39412: LD_VAR 0 4
39416: ARRAY
39417: NONEQUAL
39418: IFFALSE 39430
// begin result := false ;
39420: LD_ADDR_VAR 0 3
39424: PUSH
39425: LD_INT 0
39427: ST_TO_ADDR
// break ;
39428: GO 39432
// end ;
39430: GO 39393
39432: POP
39433: POP
// end else
39434: GO 39444
// result := false ;
39436: LD_ADDR_VAR 0 3
39440: PUSH
39441: LD_INT 0
39443: ST_TO_ADDR
// end ;
39444: LD_VAR 0 3
39448: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39449: LD_INT 0
39451: PPUSH
39452: PPUSH
39453: PPUSH
// pom := GetBase ( fac ) ;
39454: LD_ADDR_VAR 0 5
39458: PUSH
39459: LD_VAR 0 1
39463: PPUSH
39464: CALL_OW 274
39468: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39469: LD_ADDR_VAR 0 4
39473: PUSH
39474: LD_VAR 0 2
39478: PUSH
39479: LD_INT 1
39481: ARRAY
39482: PPUSH
39483: LD_VAR 0 2
39487: PUSH
39488: LD_INT 2
39490: ARRAY
39491: PPUSH
39492: LD_VAR 0 2
39496: PUSH
39497: LD_INT 3
39499: ARRAY
39500: PPUSH
39501: LD_VAR 0 2
39505: PUSH
39506: LD_INT 4
39508: ARRAY
39509: PPUSH
39510: CALL_OW 449
39514: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39515: LD_ADDR_VAR 0 3
39519: PUSH
39520: LD_VAR 0 5
39524: PPUSH
39525: LD_INT 1
39527: PPUSH
39528: CALL_OW 275
39532: PUSH
39533: LD_VAR 0 4
39537: PUSH
39538: LD_INT 1
39540: ARRAY
39541: GREATEREQUAL
39542: PUSH
39543: LD_VAR 0 5
39547: PPUSH
39548: LD_INT 2
39550: PPUSH
39551: CALL_OW 275
39555: PUSH
39556: LD_VAR 0 4
39560: PUSH
39561: LD_INT 2
39563: ARRAY
39564: GREATEREQUAL
39565: AND
39566: PUSH
39567: LD_VAR 0 5
39571: PPUSH
39572: LD_INT 3
39574: PPUSH
39575: CALL_OW 275
39579: PUSH
39580: LD_VAR 0 4
39584: PUSH
39585: LD_INT 3
39587: ARRAY
39588: GREATEREQUAL
39589: AND
39590: ST_TO_ADDR
// end ;
39591: LD_VAR 0 3
39595: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39596: LD_INT 0
39598: PPUSH
39599: PPUSH
39600: PPUSH
39601: PPUSH
// pom := GetBase ( building ) ;
39602: LD_ADDR_VAR 0 3
39606: PUSH
39607: LD_VAR 0 1
39611: PPUSH
39612: CALL_OW 274
39616: ST_TO_ADDR
// if not pom then
39617: LD_VAR 0 3
39621: NOT
39622: IFFALSE 39626
// exit ;
39624: GO 39796
// btype := GetBType ( building ) ;
39626: LD_ADDR_VAR 0 5
39630: PUSH
39631: LD_VAR 0 1
39635: PPUSH
39636: CALL_OW 266
39640: ST_TO_ADDR
// if btype = b_armoury then
39641: LD_VAR 0 5
39645: PUSH
39646: LD_INT 4
39648: EQUAL
39649: IFFALSE 39659
// btype := b_barracks ;
39651: LD_ADDR_VAR 0 5
39655: PUSH
39656: LD_INT 5
39658: ST_TO_ADDR
// if btype = b_depot then
39659: LD_VAR 0 5
39663: PUSH
39664: LD_INT 0
39666: EQUAL
39667: IFFALSE 39677
// btype := b_warehouse ;
39669: LD_ADDR_VAR 0 5
39673: PUSH
39674: LD_INT 1
39676: ST_TO_ADDR
// if btype = b_workshop then
39677: LD_VAR 0 5
39681: PUSH
39682: LD_INT 2
39684: EQUAL
39685: IFFALSE 39695
// btype := b_factory ;
39687: LD_ADDR_VAR 0 5
39691: PUSH
39692: LD_INT 3
39694: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39695: LD_ADDR_VAR 0 4
39699: PUSH
39700: LD_VAR 0 5
39704: PPUSH
39705: LD_VAR 0 1
39709: PPUSH
39710: CALL_OW 248
39714: PPUSH
39715: CALL_OW 450
39719: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39720: LD_ADDR_VAR 0 2
39724: PUSH
39725: LD_VAR 0 3
39729: PPUSH
39730: LD_INT 1
39732: PPUSH
39733: CALL_OW 275
39737: PUSH
39738: LD_VAR 0 4
39742: PUSH
39743: LD_INT 1
39745: ARRAY
39746: GREATEREQUAL
39747: PUSH
39748: LD_VAR 0 3
39752: PPUSH
39753: LD_INT 2
39755: PPUSH
39756: CALL_OW 275
39760: PUSH
39761: LD_VAR 0 4
39765: PUSH
39766: LD_INT 2
39768: ARRAY
39769: GREATEREQUAL
39770: AND
39771: PUSH
39772: LD_VAR 0 3
39776: PPUSH
39777: LD_INT 3
39779: PPUSH
39780: CALL_OW 275
39784: PUSH
39785: LD_VAR 0 4
39789: PUSH
39790: LD_INT 3
39792: ARRAY
39793: GREATEREQUAL
39794: AND
39795: ST_TO_ADDR
// end ;
39796: LD_VAR 0 2
39800: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39801: LD_INT 0
39803: PPUSH
39804: PPUSH
39805: PPUSH
// pom := GetBase ( building ) ;
39806: LD_ADDR_VAR 0 4
39810: PUSH
39811: LD_VAR 0 1
39815: PPUSH
39816: CALL_OW 274
39820: ST_TO_ADDR
// if not pom then
39821: LD_VAR 0 4
39825: NOT
39826: IFFALSE 39830
// exit ;
39828: GO 39931
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39830: LD_ADDR_VAR 0 5
39834: PUSH
39835: LD_VAR 0 2
39839: PPUSH
39840: LD_VAR 0 1
39844: PPUSH
39845: CALL_OW 248
39849: PPUSH
39850: CALL_OW 450
39854: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39855: LD_ADDR_VAR 0 3
39859: PUSH
39860: LD_VAR 0 4
39864: PPUSH
39865: LD_INT 1
39867: PPUSH
39868: CALL_OW 275
39872: PUSH
39873: LD_VAR 0 5
39877: PUSH
39878: LD_INT 1
39880: ARRAY
39881: GREATEREQUAL
39882: PUSH
39883: LD_VAR 0 4
39887: PPUSH
39888: LD_INT 2
39890: PPUSH
39891: CALL_OW 275
39895: PUSH
39896: LD_VAR 0 5
39900: PUSH
39901: LD_INT 2
39903: ARRAY
39904: GREATEREQUAL
39905: AND
39906: PUSH
39907: LD_VAR 0 4
39911: PPUSH
39912: LD_INT 3
39914: PPUSH
39915: CALL_OW 275
39919: PUSH
39920: LD_VAR 0 5
39924: PUSH
39925: LD_INT 3
39927: ARRAY
39928: GREATEREQUAL
39929: AND
39930: ST_TO_ADDR
// end ;
39931: LD_VAR 0 3
39935: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
39936: LD_INT 0
39938: PPUSH
39939: PPUSH
39940: PPUSH
39941: PPUSH
39942: PPUSH
39943: PPUSH
39944: PPUSH
39945: PPUSH
39946: PPUSH
39947: PPUSH
// result := false ;
39948: LD_ADDR_VAR 0 6
39952: PUSH
39953: LD_INT 0
39955: ST_TO_ADDR
// if not base or not btype or not x or not y then
39956: LD_VAR 0 1
39960: NOT
39961: PUSH
39962: LD_VAR 0 2
39966: NOT
39967: OR
39968: PUSH
39969: LD_VAR 0 3
39973: NOT
39974: OR
39975: PUSH
39976: LD_VAR 0 4
39980: NOT
39981: OR
39982: IFFALSE 39986
// exit ;
39984: GO 40595
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
39986: LD_ADDR_VAR 0 12
39990: PUSH
39991: LD_VAR 0 2
39995: PPUSH
39996: LD_VAR 0 3
40000: PPUSH
40001: LD_VAR 0 4
40005: PPUSH
40006: LD_VAR 0 5
40010: PPUSH
40011: LD_VAR 0 1
40015: PUSH
40016: LD_INT 1
40018: ARRAY
40019: PPUSH
40020: CALL_OW 248
40024: PPUSH
40025: LD_INT 0
40027: PPUSH
40028: CALL 41432 0 6
40032: ST_TO_ADDR
// if not hexes then
40033: LD_VAR 0 12
40037: NOT
40038: IFFALSE 40042
// exit ;
40040: GO 40595
// for i = 1 to hexes do
40042: LD_ADDR_VAR 0 7
40046: PUSH
40047: DOUBLE
40048: LD_INT 1
40050: DEC
40051: ST_TO_ADDR
40052: LD_VAR 0 12
40056: PUSH
40057: FOR_TO
40058: IFFALSE 40593
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40060: LD_ADDR_VAR 0 11
40064: PUSH
40065: LD_VAR 0 12
40069: PUSH
40070: LD_VAR 0 7
40074: ARRAY
40075: PUSH
40076: LD_INT 1
40078: ARRAY
40079: PPUSH
40080: LD_VAR 0 12
40084: PUSH
40085: LD_VAR 0 7
40089: ARRAY
40090: PUSH
40091: LD_INT 2
40093: ARRAY
40094: PPUSH
40095: CALL_OW 428
40099: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40100: LD_VAR 0 12
40104: PUSH
40105: LD_VAR 0 7
40109: ARRAY
40110: PUSH
40111: LD_INT 1
40113: ARRAY
40114: PPUSH
40115: LD_VAR 0 12
40119: PUSH
40120: LD_VAR 0 7
40124: ARRAY
40125: PUSH
40126: LD_INT 2
40128: ARRAY
40129: PPUSH
40130: CALL_OW 351
40134: PUSH
40135: LD_VAR 0 12
40139: PUSH
40140: LD_VAR 0 7
40144: ARRAY
40145: PUSH
40146: LD_INT 1
40148: ARRAY
40149: PPUSH
40150: LD_VAR 0 12
40154: PUSH
40155: LD_VAR 0 7
40159: ARRAY
40160: PUSH
40161: LD_INT 2
40163: ARRAY
40164: PPUSH
40165: CALL_OW 488
40169: NOT
40170: OR
40171: PUSH
40172: LD_VAR 0 11
40176: PPUSH
40177: CALL_OW 247
40181: PUSH
40182: LD_INT 3
40184: EQUAL
40185: OR
40186: IFFALSE 40192
// exit ;
40188: POP
40189: POP
40190: GO 40595
// if not tmp or not tmp in base then
40192: LD_VAR 0 11
40196: NOT
40197: PUSH
40198: LD_VAR 0 11
40202: PUSH
40203: LD_VAR 0 1
40207: IN
40208: NOT
40209: OR
40210: IFFALSE 40214
// continue ;
40212: GO 40057
// result := true ;
40214: LD_ADDR_VAR 0 6
40218: PUSH
40219: LD_INT 1
40221: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40222: LD_ADDR_VAR 0 15
40226: PUSH
40227: LD_VAR 0 1
40231: PPUSH
40232: LD_INT 22
40234: PUSH
40235: LD_VAR 0 11
40239: PPUSH
40240: CALL_OW 255
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 2
40251: PUSH
40252: LD_INT 30
40254: PUSH
40255: LD_INT 0
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 30
40264: PUSH
40265: LD_INT 1
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: LIST
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PPUSH
40281: CALL_OW 72
40285: ST_TO_ADDR
// if dep then
40286: LD_VAR 0 15
40290: IFFALSE 40426
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40292: LD_ADDR_VAR 0 14
40296: PUSH
40297: LD_VAR 0 15
40301: PUSH
40302: LD_INT 1
40304: ARRAY
40305: PPUSH
40306: CALL_OW 250
40310: PPUSH
40311: LD_VAR 0 15
40315: PUSH
40316: LD_INT 1
40318: ARRAY
40319: PPUSH
40320: CALL_OW 254
40324: PPUSH
40325: LD_INT 5
40327: PPUSH
40328: CALL_OW 272
40332: PUSH
40333: LD_VAR 0 15
40337: PUSH
40338: LD_INT 1
40340: ARRAY
40341: PPUSH
40342: CALL_OW 251
40346: PPUSH
40347: LD_VAR 0 15
40351: PUSH
40352: LD_INT 1
40354: ARRAY
40355: PPUSH
40356: CALL_OW 254
40360: PPUSH
40361: LD_INT 5
40363: PPUSH
40364: CALL_OW 273
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40373: LD_VAR 0 14
40377: PUSH
40378: LD_INT 1
40380: ARRAY
40381: PPUSH
40382: LD_VAR 0 14
40386: PUSH
40387: LD_INT 2
40389: ARRAY
40390: PPUSH
40391: CALL_OW 488
40395: IFFALSE 40426
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40397: LD_VAR 0 11
40401: PPUSH
40402: LD_VAR 0 14
40406: PUSH
40407: LD_INT 1
40409: ARRAY
40410: PPUSH
40411: LD_VAR 0 14
40415: PUSH
40416: LD_INT 2
40418: ARRAY
40419: PPUSH
40420: CALL_OW 111
// continue ;
40424: GO 40057
// end ; end ; r := GetDir ( tmp ) ;
40426: LD_ADDR_VAR 0 13
40430: PUSH
40431: LD_VAR 0 11
40435: PPUSH
40436: CALL_OW 254
40440: ST_TO_ADDR
// if r = 5 then
40441: LD_VAR 0 13
40445: PUSH
40446: LD_INT 5
40448: EQUAL
40449: IFFALSE 40459
// r := 0 ;
40451: LD_ADDR_VAR 0 13
40455: PUSH
40456: LD_INT 0
40458: ST_TO_ADDR
// for j = r to 5 do
40459: LD_ADDR_VAR 0 8
40463: PUSH
40464: DOUBLE
40465: LD_VAR 0 13
40469: DEC
40470: ST_TO_ADDR
40471: LD_INT 5
40473: PUSH
40474: FOR_TO
40475: IFFALSE 40589
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40477: LD_ADDR_VAR 0 9
40481: PUSH
40482: LD_VAR 0 11
40486: PPUSH
40487: CALL_OW 250
40491: PPUSH
40492: LD_VAR 0 8
40496: PPUSH
40497: LD_INT 2
40499: PPUSH
40500: CALL_OW 272
40504: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40505: LD_ADDR_VAR 0 10
40509: PUSH
40510: LD_VAR 0 11
40514: PPUSH
40515: CALL_OW 251
40519: PPUSH
40520: LD_VAR 0 8
40524: PPUSH
40525: LD_INT 2
40527: PPUSH
40528: CALL_OW 273
40532: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40533: LD_VAR 0 9
40537: PPUSH
40538: LD_VAR 0 10
40542: PPUSH
40543: CALL_OW 488
40547: PUSH
40548: LD_VAR 0 9
40552: PPUSH
40553: LD_VAR 0 10
40557: PPUSH
40558: CALL_OW 428
40562: NOT
40563: AND
40564: IFFALSE 40587
// begin ComMoveXY ( tmp , _x , _y ) ;
40566: LD_VAR 0 11
40570: PPUSH
40571: LD_VAR 0 9
40575: PPUSH
40576: LD_VAR 0 10
40580: PPUSH
40581: CALL_OW 111
// break ;
40585: GO 40589
// end ; end ;
40587: GO 40474
40589: POP
40590: POP
// end ;
40591: GO 40057
40593: POP
40594: POP
// end ;
40595: LD_VAR 0 6
40599: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
40600: LD_INT 0
40602: PPUSH
40603: PPUSH
40604: PPUSH
40605: PPUSH
40606: PPUSH
40607: PPUSH
40608: PPUSH
40609: PPUSH
40610: PPUSH
40611: PPUSH
// result := false ;
40612: LD_ADDR_VAR 0 6
40616: PUSH
40617: LD_INT 0
40619: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40620: LD_VAR 0 1
40624: NOT
40625: PUSH
40626: LD_VAR 0 1
40630: PPUSH
40631: CALL_OW 266
40635: PUSH
40636: LD_INT 0
40638: PUSH
40639: LD_INT 1
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: IN
40646: NOT
40647: OR
40648: PUSH
40649: LD_VAR 0 2
40653: NOT
40654: OR
40655: PUSH
40656: LD_VAR 0 5
40660: PUSH
40661: LD_INT 0
40663: PUSH
40664: LD_INT 1
40666: PUSH
40667: LD_INT 2
40669: PUSH
40670: LD_INT 3
40672: PUSH
40673: LD_INT 4
40675: PUSH
40676: LD_INT 5
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: IN
40687: NOT
40688: OR
40689: PUSH
40690: LD_VAR 0 3
40694: PPUSH
40695: LD_VAR 0 4
40699: PPUSH
40700: CALL_OW 488
40704: NOT
40705: OR
40706: IFFALSE 40710
// exit ;
40708: GO 41427
// pom := GetBase ( depot ) ;
40710: LD_ADDR_VAR 0 10
40714: PUSH
40715: LD_VAR 0 1
40719: PPUSH
40720: CALL_OW 274
40724: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40725: LD_ADDR_VAR 0 11
40729: PUSH
40730: LD_VAR 0 2
40734: PPUSH
40735: LD_VAR 0 1
40739: PPUSH
40740: CALL_OW 248
40744: PPUSH
40745: CALL_OW 450
40749: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40750: LD_VAR 0 10
40754: PPUSH
40755: LD_INT 1
40757: PPUSH
40758: CALL_OW 275
40762: PUSH
40763: LD_VAR 0 11
40767: PUSH
40768: LD_INT 1
40770: ARRAY
40771: GREATEREQUAL
40772: PUSH
40773: LD_VAR 0 10
40777: PPUSH
40778: LD_INT 2
40780: PPUSH
40781: CALL_OW 275
40785: PUSH
40786: LD_VAR 0 11
40790: PUSH
40791: LD_INT 2
40793: ARRAY
40794: GREATEREQUAL
40795: AND
40796: PUSH
40797: LD_VAR 0 10
40801: PPUSH
40802: LD_INT 3
40804: PPUSH
40805: CALL_OW 275
40809: PUSH
40810: LD_VAR 0 11
40814: PUSH
40815: LD_INT 3
40817: ARRAY
40818: GREATEREQUAL
40819: AND
40820: NOT
40821: IFFALSE 40825
// exit ;
40823: GO 41427
// if GetBType ( depot ) = b_depot then
40825: LD_VAR 0 1
40829: PPUSH
40830: CALL_OW 266
40834: PUSH
40835: LD_INT 0
40837: EQUAL
40838: IFFALSE 40850
// dist := 28 else
40840: LD_ADDR_VAR 0 14
40844: PUSH
40845: LD_INT 28
40847: ST_TO_ADDR
40848: GO 40858
// dist := 36 ;
40850: LD_ADDR_VAR 0 14
40854: PUSH
40855: LD_INT 36
40857: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40858: LD_VAR 0 1
40862: PPUSH
40863: LD_VAR 0 3
40867: PPUSH
40868: LD_VAR 0 4
40872: PPUSH
40873: CALL_OW 297
40877: PUSH
40878: LD_VAR 0 14
40882: GREATER
40883: IFFALSE 40887
// exit ;
40885: GO 41427
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40887: LD_ADDR_VAR 0 12
40891: PUSH
40892: LD_VAR 0 2
40896: PPUSH
40897: LD_VAR 0 3
40901: PPUSH
40902: LD_VAR 0 4
40906: PPUSH
40907: LD_VAR 0 5
40911: PPUSH
40912: LD_VAR 0 1
40916: PPUSH
40917: CALL_OW 248
40921: PPUSH
40922: LD_INT 0
40924: PPUSH
40925: CALL 41432 0 6
40929: ST_TO_ADDR
// if not hexes then
40930: LD_VAR 0 12
40934: NOT
40935: IFFALSE 40939
// exit ;
40937: GO 41427
// hex := GetHexInfo ( x , y ) ;
40939: LD_ADDR_VAR 0 15
40943: PUSH
40944: LD_VAR 0 3
40948: PPUSH
40949: LD_VAR 0 4
40953: PPUSH
40954: CALL_OW 546
40958: ST_TO_ADDR
// if hex [ 1 ] then
40959: LD_VAR 0 15
40963: PUSH
40964: LD_INT 1
40966: ARRAY
40967: IFFALSE 40971
// exit ;
40969: GO 41427
// height := hex [ 2 ] ;
40971: LD_ADDR_VAR 0 13
40975: PUSH
40976: LD_VAR 0 15
40980: PUSH
40981: LD_INT 2
40983: ARRAY
40984: ST_TO_ADDR
// for i = 1 to hexes do
40985: LD_ADDR_VAR 0 7
40989: PUSH
40990: DOUBLE
40991: LD_INT 1
40993: DEC
40994: ST_TO_ADDR
40995: LD_VAR 0 12
40999: PUSH
41000: FOR_TO
41001: IFFALSE 41331
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41003: LD_VAR 0 12
41007: PUSH
41008: LD_VAR 0 7
41012: ARRAY
41013: PUSH
41014: LD_INT 1
41016: ARRAY
41017: PPUSH
41018: LD_VAR 0 12
41022: PUSH
41023: LD_VAR 0 7
41027: ARRAY
41028: PUSH
41029: LD_INT 2
41031: ARRAY
41032: PPUSH
41033: CALL_OW 488
41037: NOT
41038: PUSH
41039: LD_VAR 0 12
41043: PUSH
41044: LD_VAR 0 7
41048: ARRAY
41049: PUSH
41050: LD_INT 1
41052: ARRAY
41053: PPUSH
41054: LD_VAR 0 12
41058: PUSH
41059: LD_VAR 0 7
41063: ARRAY
41064: PUSH
41065: LD_INT 2
41067: ARRAY
41068: PPUSH
41069: CALL_OW 428
41073: PUSH
41074: LD_INT 0
41076: GREATER
41077: OR
41078: PUSH
41079: LD_VAR 0 12
41083: PUSH
41084: LD_VAR 0 7
41088: ARRAY
41089: PUSH
41090: LD_INT 1
41092: ARRAY
41093: PPUSH
41094: LD_VAR 0 12
41098: PUSH
41099: LD_VAR 0 7
41103: ARRAY
41104: PUSH
41105: LD_INT 2
41107: ARRAY
41108: PPUSH
41109: CALL_OW 351
41113: OR
41114: IFFALSE 41120
// exit ;
41116: POP
41117: POP
41118: GO 41427
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41120: LD_ADDR_VAR 0 8
41124: PUSH
41125: LD_VAR 0 12
41129: PUSH
41130: LD_VAR 0 7
41134: ARRAY
41135: PUSH
41136: LD_INT 1
41138: ARRAY
41139: PPUSH
41140: LD_VAR 0 12
41144: PUSH
41145: LD_VAR 0 7
41149: ARRAY
41150: PUSH
41151: LD_INT 2
41153: ARRAY
41154: PPUSH
41155: CALL_OW 546
41159: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41160: LD_VAR 0 8
41164: PUSH
41165: LD_INT 1
41167: ARRAY
41168: PUSH
41169: LD_VAR 0 8
41173: PUSH
41174: LD_INT 2
41176: ARRAY
41177: PUSH
41178: LD_VAR 0 13
41182: PUSH
41183: LD_INT 2
41185: PLUS
41186: GREATER
41187: OR
41188: PUSH
41189: LD_VAR 0 8
41193: PUSH
41194: LD_INT 2
41196: ARRAY
41197: PUSH
41198: LD_VAR 0 13
41202: PUSH
41203: LD_INT 2
41205: MINUS
41206: LESS
41207: OR
41208: PUSH
41209: LD_VAR 0 8
41213: PUSH
41214: LD_INT 3
41216: ARRAY
41217: PUSH
41218: LD_INT 0
41220: PUSH
41221: LD_INT 8
41223: PUSH
41224: LD_INT 9
41226: PUSH
41227: LD_INT 10
41229: PUSH
41230: LD_INT 11
41232: PUSH
41233: LD_INT 12
41235: PUSH
41236: LD_INT 13
41238: PUSH
41239: LD_INT 16
41241: PUSH
41242: LD_INT 17
41244: PUSH
41245: LD_INT 18
41247: PUSH
41248: LD_INT 19
41250: PUSH
41251: LD_INT 20
41253: PUSH
41254: LD_INT 21
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: IN
41272: NOT
41273: OR
41274: PUSH
41275: LD_VAR 0 8
41279: PUSH
41280: LD_INT 5
41282: ARRAY
41283: NOT
41284: OR
41285: PUSH
41286: LD_VAR 0 8
41290: PUSH
41291: LD_INT 6
41293: ARRAY
41294: PUSH
41295: LD_INT 1
41297: PUSH
41298: LD_INT 2
41300: PUSH
41301: LD_INT 7
41303: PUSH
41304: LD_INT 9
41306: PUSH
41307: LD_INT 10
41309: PUSH
41310: LD_INT 11
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: IN
41321: NOT
41322: OR
41323: IFFALSE 41329
// exit ;
41325: POP
41326: POP
41327: GO 41427
// end ;
41329: GO 41000
41331: POP
41332: POP
// side := GetSide ( depot ) ;
41333: LD_ADDR_VAR 0 9
41337: PUSH
41338: LD_VAR 0 1
41342: PPUSH
41343: CALL_OW 255
41347: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41348: LD_VAR 0 9
41352: PPUSH
41353: LD_VAR 0 3
41357: PPUSH
41358: LD_VAR 0 4
41362: PPUSH
41363: LD_INT 20
41365: PPUSH
41366: CALL 34081 0 4
41370: PUSH
41371: LD_INT 4
41373: ARRAY
41374: IFFALSE 41378
// exit ;
41376: GO 41427
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41378: LD_VAR 0 2
41382: PUSH
41383: LD_INT 29
41385: PUSH
41386: LD_INT 30
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: IN
41393: PUSH
41394: LD_VAR 0 3
41398: PPUSH
41399: LD_VAR 0 4
41403: PPUSH
41404: LD_VAR 0 9
41408: PPUSH
41409: CALL_OW 440
41413: NOT
41414: AND
41415: IFFALSE 41419
// exit ;
41417: GO 41427
// result := true ;
41419: LD_ADDR_VAR 0 6
41423: PUSH
41424: LD_INT 1
41426: ST_TO_ADDR
// end ;
41427: LD_VAR 0 6
41431: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
41432: LD_INT 0
41434: PPUSH
41435: PPUSH
41436: PPUSH
41437: PPUSH
41438: PPUSH
41439: PPUSH
41440: PPUSH
41441: PPUSH
41442: PPUSH
41443: PPUSH
41444: PPUSH
41445: PPUSH
41446: PPUSH
41447: PPUSH
41448: PPUSH
41449: PPUSH
41450: PPUSH
41451: PPUSH
41452: PPUSH
41453: PPUSH
41454: PPUSH
41455: PPUSH
41456: PPUSH
41457: PPUSH
41458: PPUSH
41459: PPUSH
41460: PPUSH
41461: PPUSH
41462: PPUSH
41463: PPUSH
41464: PPUSH
41465: PPUSH
41466: PPUSH
41467: PPUSH
41468: PPUSH
41469: PPUSH
41470: PPUSH
41471: PPUSH
41472: PPUSH
41473: PPUSH
41474: PPUSH
41475: PPUSH
41476: PPUSH
41477: PPUSH
41478: PPUSH
41479: PPUSH
41480: PPUSH
41481: PPUSH
41482: PPUSH
41483: PPUSH
41484: PPUSH
41485: PPUSH
41486: PPUSH
41487: PPUSH
41488: PPUSH
41489: PPUSH
41490: PPUSH
41491: PPUSH
// result = [ ] ;
41492: LD_ADDR_VAR 0 7
41496: PUSH
41497: EMPTY
41498: ST_TO_ADDR
// temp_list = [ ] ;
41499: LD_ADDR_VAR 0 9
41503: PUSH
41504: EMPTY
41505: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41506: LD_VAR 0 4
41510: PUSH
41511: LD_INT 0
41513: PUSH
41514: LD_INT 1
41516: PUSH
41517: LD_INT 2
41519: PUSH
41520: LD_INT 3
41522: PUSH
41523: LD_INT 4
41525: PUSH
41526: LD_INT 5
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: IN
41537: NOT
41538: PUSH
41539: LD_VAR 0 1
41543: PUSH
41544: LD_INT 0
41546: PUSH
41547: LD_INT 1
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: IN
41554: PUSH
41555: LD_VAR 0 5
41559: PUSH
41560: LD_INT 1
41562: PUSH
41563: LD_INT 2
41565: PUSH
41566: LD_INT 3
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: LIST
41573: IN
41574: NOT
41575: AND
41576: OR
41577: IFFALSE 41581
// exit ;
41579: GO 59972
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41581: LD_VAR 0 1
41585: PUSH
41586: LD_INT 6
41588: PUSH
41589: LD_INT 7
41591: PUSH
41592: LD_INT 8
41594: PUSH
41595: LD_INT 13
41597: PUSH
41598: LD_INT 12
41600: PUSH
41601: LD_INT 15
41603: PUSH
41604: LD_INT 11
41606: PUSH
41607: LD_INT 14
41609: PUSH
41610: LD_INT 10
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: IN
41624: IFFALSE 41634
// btype = b_lab ;
41626: LD_ADDR_VAR 0 1
41630: PUSH
41631: LD_INT 6
41633: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41634: LD_VAR 0 6
41638: PUSH
41639: LD_INT 0
41641: PUSH
41642: LD_INT 1
41644: PUSH
41645: LD_INT 2
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: LIST
41652: IN
41653: NOT
41654: PUSH
41655: LD_VAR 0 1
41659: PUSH
41660: LD_INT 0
41662: PUSH
41663: LD_INT 1
41665: PUSH
41666: LD_INT 2
41668: PUSH
41669: LD_INT 3
41671: PUSH
41672: LD_INT 6
41674: PUSH
41675: LD_INT 36
41677: PUSH
41678: LD_INT 4
41680: PUSH
41681: LD_INT 5
41683: PUSH
41684: LD_INT 31
41686: PUSH
41687: LD_INT 32
41689: PUSH
41690: LD_INT 33
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: IN
41706: NOT
41707: PUSH
41708: LD_VAR 0 6
41712: PUSH
41713: LD_INT 1
41715: EQUAL
41716: AND
41717: OR
41718: PUSH
41719: LD_VAR 0 1
41723: PUSH
41724: LD_INT 2
41726: PUSH
41727: LD_INT 3
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: IN
41734: NOT
41735: PUSH
41736: LD_VAR 0 6
41740: PUSH
41741: LD_INT 2
41743: EQUAL
41744: AND
41745: OR
41746: IFFALSE 41756
// mode = 0 ;
41748: LD_ADDR_VAR 0 6
41752: PUSH
41753: LD_INT 0
41755: ST_TO_ADDR
// case mode of 0 :
41756: LD_VAR 0 6
41760: PUSH
41761: LD_INT 0
41763: DOUBLE
41764: EQUAL
41765: IFTRUE 41769
41767: GO 53222
41769: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41770: LD_ADDR_VAR 0 11
41774: PUSH
41775: LD_INT 0
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 0
41787: PUSH
41788: LD_INT 1
41790: NEG
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 1
41798: PUSH
41799: LD_INT 0
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 1
41808: PUSH
41809: LD_INT 1
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 0
41818: PUSH
41819: LD_INT 1
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 1
41828: NEG
41829: PUSH
41830: LD_INT 0
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 1
41839: NEG
41840: PUSH
41841: LD_INT 1
41843: NEG
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 1
41851: NEG
41852: PUSH
41853: LD_INT 2
41855: NEG
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 0
41863: PUSH
41864: LD_INT 2
41866: NEG
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 1
41874: PUSH
41875: LD_INT 1
41877: NEG
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 1
41885: PUSH
41886: LD_INT 2
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 0
41895: PUSH
41896: LD_INT 2
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 1
41905: NEG
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: PUSH
41917: LD_INT 3
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: LD_INT 3
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 1
41936: NEG
41937: PUSH
41938: LD_INT 2
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41963: LD_ADDR_VAR 0 12
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: LD_INT 0
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 0
41980: PUSH
41981: LD_INT 1
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 1
41991: PUSH
41992: LD_INT 0
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 1
42001: PUSH
42002: LD_INT 1
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 0
42011: PUSH
42012: LD_INT 1
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 1
42021: NEG
42022: PUSH
42023: LD_INT 0
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 1
42032: NEG
42033: PUSH
42034: LD_INT 1
42036: NEG
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 1
42044: PUSH
42045: LD_INT 1
42047: NEG
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 2
42055: PUSH
42056: LD_INT 0
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 2
42065: PUSH
42066: LD_INT 1
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 1
42075: NEG
42076: PUSH
42077: LD_INT 1
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 2
42086: NEG
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 2
42097: NEG
42098: PUSH
42099: LD_INT 1
42101: NEG
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 2
42109: NEG
42110: PUSH
42111: LD_INT 1
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 3
42120: NEG
42121: PUSH
42122: LD_INT 0
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 3
42131: NEG
42132: PUSH
42133: LD_INT 1
42135: NEG
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42159: LD_ADDR_VAR 0 13
42163: PUSH
42164: LD_INT 0
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 0
42176: PUSH
42177: LD_INT 1
42179: NEG
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 1
42187: PUSH
42188: LD_INT 0
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 1
42197: PUSH
42198: LD_INT 1
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 0
42207: PUSH
42208: LD_INT 1
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 1
42217: NEG
42218: PUSH
42219: LD_INT 0
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 1
42228: NEG
42229: PUSH
42230: LD_INT 1
42232: NEG
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 1
42240: NEG
42241: PUSH
42242: LD_INT 2
42244: NEG
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 2
42252: PUSH
42253: LD_INT 1
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 2
42262: PUSH
42263: LD_INT 2
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 1
42272: PUSH
42273: LD_INT 2
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 2
42282: NEG
42283: PUSH
42284: LD_INT 1
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 2
42294: NEG
42295: PUSH
42296: LD_INT 2
42298: NEG
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 2
42306: NEG
42307: PUSH
42308: LD_INT 3
42310: NEG
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 3
42318: NEG
42319: PUSH
42320: LD_INT 2
42322: NEG
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 3
42330: NEG
42331: PUSH
42332: LD_INT 3
42334: NEG
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42358: LD_ADDR_VAR 0 14
42362: PUSH
42363: LD_INT 0
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 0
42375: PUSH
42376: LD_INT 1
42378: NEG
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 1
42396: PUSH
42397: LD_INT 1
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: LD_INT 1
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: LD_INT 0
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 1
42427: NEG
42428: PUSH
42429: LD_INT 1
42431: NEG
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 1
42439: NEG
42440: PUSH
42441: LD_INT 2
42443: NEG
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 0
42451: PUSH
42452: LD_INT 2
42454: NEG
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 1
42462: PUSH
42463: LD_INT 1
42465: NEG
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 1
42473: PUSH
42474: LD_INT 2
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: LD_INT 2
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 1
42493: NEG
42494: PUSH
42495: LD_INT 1
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 1
42504: NEG
42505: PUSH
42506: LD_INT 3
42508: NEG
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 0
42516: PUSH
42517: LD_INT 3
42519: NEG
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 1
42527: PUSH
42528: LD_INT 2
42530: NEG
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42554: LD_ADDR_VAR 0 15
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: LD_INT 0
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 0
42571: PUSH
42572: LD_INT 1
42574: NEG
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 1
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 1
42592: PUSH
42593: LD_INT 1
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: LD_INT 1
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 1
42623: NEG
42624: PUSH
42625: LD_INT 1
42627: NEG
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 1
42635: PUSH
42636: LD_INT 1
42638: NEG
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 2
42646: PUSH
42647: LD_INT 0
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 2
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 1
42666: NEG
42667: PUSH
42668: LD_INT 1
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 2
42677: NEG
42678: PUSH
42679: LD_INT 0
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 2
42688: NEG
42689: PUSH
42690: LD_INT 1
42692: NEG
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 2
42700: PUSH
42701: LD_INT 1
42703: NEG
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 3
42711: PUSH
42712: LD_INT 0
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 3
42721: PUSH
42722: LD_INT 1
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42747: LD_ADDR_VAR 0 16
42751: PUSH
42752: LD_INT 0
42754: PUSH
42755: LD_INT 0
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 0
42764: PUSH
42765: LD_INT 1
42767: NEG
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 1
42775: PUSH
42776: LD_INT 0
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 1
42785: PUSH
42786: LD_INT 1
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: LD_INT 1
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 1
42805: NEG
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 1
42816: NEG
42817: PUSH
42818: LD_INT 1
42820: NEG
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 1
42828: NEG
42829: PUSH
42830: LD_INT 2
42832: NEG
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 2
42840: PUSH
42841: LD_INT 1
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 2
42850: PUSH
42851: LD_INT 2
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 1
42860: PUSH
42861: LD_INT 2
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 2
42870: NEG
42871: PUSH
42872: LD_INT 1
42874: NEG
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 2
42882: NEG
42883: PUSH
42884: LD_INT 2
42886: NEG
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 3
42894: PUSH
42895: LD_INT 2
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 3
42904: PUSH
42905: LD_INT 3
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 2
42914: PUSH
42915: LD_INT 3
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42940: LD_ADDR_VAR 0 17
42944: PUSH
42945: LD_INT 0
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: LD_INT 1
42960: NEG
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 1
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 1
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: LD_INT 1
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 1
42998: NEG
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 1
43009: NEG
43010: PUSH
43011: LD_INT 1
43013: NEG
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 1
43021: NEG
43022: PUSH
43023: LD_INT 2
43025: NEG
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 0
43033: PUSH
43034: LD_INT 2
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 1
43044: PUSH
43045: LD_INT 1
43047: NEG
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 2
43055: PUSH
43056: LD_INT 0
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 2
43065: PUSH
43066: LD_INT 1
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 2
43075: PUSH
43076: LD_INT 2
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 1
43085: PUSH
43086: LD_INT 2
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 0
43095: PUSH
43096: LD_INT 2
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 1
43105: NEG
43106: PUSH
43107: LD_INT 1
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 2
43116: NEG
43117: PUSH
43118: LD_INT 0
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 2
43127: NEG
43128: PUSH
43129: LD_INT 1
43131: NEG
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 2
43139: NEG
43140: PUSH
43141: LD_INT 2
43143: NEG
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43170: LD_ADDR_VAR 0 18
43174: PUSH
43175: LD_INT 0
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 0
43187: PUSH
43188: LD_INT 1
43190: NEG
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 1
43198: PUSH
43199: LD_INT 0
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 1
43208: PUSH
43209: LD_INT 1
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 0
43218: PUSH
43219: LD_INT 1
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 1
43228: NEG
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 1
43239: NEG
43240: PUSH
43241: LD_INT 1
43243: NEG
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 1
43251: NEG
43252: PUSH
43253: LD_INT 2
43255: NEG
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: LD_INT 2
43266: NEG
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 1
43274: PUSH
43275: LD_INT 1
43277: NEG
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 2
43285: PUSH
43286: LD_INT 0
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 2
43295: PUSH
43296: LD_INT 1
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 2
43305: PUSH
43306: LD_INT 2
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 1
43315: PUSH
43316: LD_INT 2
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: LD_INT 2
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 1
43335: NEG
43336: PUSH
43337: LD_INT 1
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 2
43346: NEG
43347: PUSH
43348: LD_INT 0
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 2
43357: NEG
43358: PUSH
43359: LD_INT 1
43361: NEG
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 2
43369: NEG
43370: PUSH
43371: LD_INT 2
43373: NEG
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43400: LD_ADDR_VAR 0 19
43404: PUSH
43405: LD_INT 0
43407: PUSH
43408: LD_INT 0
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 0
43417: PUSH
43418: LD_INT 1
43420: NEG
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 1
43428: PUSH
43429: LD_INT 0
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 1
43438: PUSH
43439: LD_INT 1
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 0
43448: PUSH
43449: LD_INT 1
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 1
43458: NEG
43459: PUSH
43460: LD_INT 0
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 1
43469: NEG
43470: PUSH
43471: LD_INT 1
43473: NEG
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 1
43481: NEG
43482: PUSH
43483: LD_INT 2
43485: NEG
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 0
43493: PUSH
43494: LD_INT 2
43496: NEG
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 1
43504: PUSH
43505: LD_INT 1
43507: NEG
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 2
43515: PUSH
43516: LD_INT 0
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 2
43525: PUSH
43526: LD_INT 1
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 2
43535: PUSH
43536: LD_INT 2
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 1
43545: PUSH
43546: LD_INT 2
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: LD_INT 2
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 1
43565: NEG
43566: PUSH
43567: LD_INT 1
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 2
43576: NEG
43577: PUSH
43578: LD_INT 0
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 2
43587: NEG
43588: PUSH
43589: LD_INT 1
43591: NEG
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 2
43599: NEG
43600: PUSH
43601: LD_INT 2
43603: NEG
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43630: LD_ADDR_VAR 0 20
43634: PUSH
43635: LD_INT 0
43637: PUSH
43638: LD_INT 0
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 0
43647: PUSH
43648: LD_INT 1
43650: NEG
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 1
43658: PUSH
43659: LD_INT 0
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 1
43668: PUSH
43669: LD_INT 1
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: LD_INT 1
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 1
43688: NEG
43689: PUSH
43690: LD_INT 0
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 1
43699: NEG
43700: PUSH
43701: LD_INT 1
43703: NEG
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 1
43711: NEG
43712: PUSH
43713: LD_INT 2
43715: NEG
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: LD_INT 2
43726: NEG
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 1
43734: PUSH
43735: LD_INT 1
43737: NEG
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 2
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 2
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 2
43765: PUSH
43766: LD_INT 2
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: PUSH
43776: LD_INT 2
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 0
43785: PUSH
43786: LD_INT 2
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 1
43795: NEG
43796: PUSH
43797: LD_INT 1
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 2
43806: NEG
43807: PUSH
43808: LD_INT 0
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 2
43817: NEG
43818: PUSH
43819: LD_INT 1
43821: NEG
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 2
43829: NEG
43830: PUSH
43831: LD_INT 2
43833: NEG
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43860: LD_ADDR_VAR 0 21
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 0
43877: PUSH
43878: LD_INT 1
43880: NEG
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 1
43888: PUSH
43889: LD_INT 0
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 1
43898: PUSH
43899: LD_INT 1
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 0
43908: PUSH
43909: LD_INT 1
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: LD_INT 0
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 1
43929: NEG
43930: PUSH
43931: LD_INT 1
43933: NEG
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 1
43941: NEG
43942: PUSH
43943: LD_INT 2
43945: NEG
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 0
43953: PUSH
43954: LD_INT 2
43956: NEG
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 1
43964: PUSH
43965: LD_INT 1
43967: NEG
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 2
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 2
43985: PUSH
43986: LD_INT 1
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 2
43995: PUSH
43996: LD_INT 2
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: LD_INT 2
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: LD_INT 2
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 1
44025: NEG
44026: PUSH
44027: LD_INT 1
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 2
44036: NEG
44037: PUSH
44038: LD_INT 0
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 2
44047: NEG
44048: PUSH
44049: LD_INT 1
44051: NEG
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 2
44059: NEG
44060: PUSH
44061: LD_INT 2
44063: NEG
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44090: LD_ADDR_VAR 0 22
44094: PUSH
44095: LD_INT 0
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 0
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 1
44118: PUSH
44119: LD_INT 0
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 1
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 0
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 1
44148: NEG
44149: PUSH
44150: LD_INT 0
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 1
44159: NEG
44160: PUSH
44161: LD_INT 1
44163: NEG
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 1
44171: NEG
44172: PUSH
44173: LD_INT 2
44175: NEG
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: LD_INT 2
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 1
44194: PUSH
44195: LD_INT 1
44197: NEG
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 2
44205: PUSH
44206: LD_INT 0
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 2
44215: PUSH
44216: LD_INT 1
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 2
44225: PUSH
44226: LD_INT 2
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 1
44235: PUSH
44236: LD_INT 2
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: LD_INT 2
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 1
44255: NEG
44256: PUSH
44257: LD_INT 1
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 2
44266: NEG
44267: PUSH
44268: LD_INT 0
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 2
44277: NEG
44278: PUSH
44279: LD_INT 1
44281: NEG
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 2
44289: NEG
44290: PUSH
44291: LD_INT 2
44293: NEG
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44320: LD_ADDR_VAR 0 23
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: LD_INT 0
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: LD_INT 1
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 1
44358: PUSH
44359: LD_INT 1
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: LD_INT 1
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 1
44378: NEG
44379: PUSH
44380: LD_INT 0
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 1
44389: NEG
44390: PUSH
44391: LD_INT 1
44393: NEG
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 1
44401: NEG
44402: PUSH
44403: LD_INT 2
44405: NEG
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 0
44413: PUSH
44414: LD_INT 2
44416: NEG
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 1
44424: PUSH
44425: LD_INT 1
44427: NEG
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: LD_INT 0
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 2
44445: PUSH
44446: LD_INT 1
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 2
44455: PUSH
44456: LD_INT 2
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: LD_INT 2
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 0
44475: PUSH
44476: LD_INT 2
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 1
44485: NEG
44486: PUSH
44487: LD_INT 1
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 2
44496: NEG
44497: PUSH
44498: LD_INT 0
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 2
44507: NEG
44508: PUSH
44509: LD_INT 1
44511: NEG
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 2
44519: NEG
44520: PUSH
44521: LD_INT 2
44523: NEG
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 2
44531: NEG
44532: PUSH
44533: LD_INT 3
44535: NEG
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 1
44543: NEG
44544: PUSH
44545: LD_INT 3
44547: NEG
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: LD_INT 2
44558: NEG
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 2
44566: PUSH
44567: LD_INT 1
44569: NEG
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44600: LD_ADDR_VAR 0 24
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: LD_INT 0
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 0
44617: PUSH
44618: LD_INT 1
44620: NEG
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 1
44628: PUSH
44629: LD_INT 0
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 1
44638: PUSH
44639: LD_INT 1
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 0
44648: PUSH
44649: LD_INT 1
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 1
44658: NEG
44659: PUSH
44660: LD_INT 0
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 1
44669: NEG
44670: PUSH
44671: LD_INT 1
44673: NEG
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 1
44681: NEG
44682: PUSH
44683: LD_INT 2
44685: NEG
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 0
44693: PUSH
44694: LD_INT 2
44696: NEG
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 1
44704: PUSH
44705: LD_INT 1
44707: NEG
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 2
44715: PUSH
44716: LD_INT 0
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 2
44725: PUSH
44726: LD_INT 1
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 2
44735: PUSH
44736: LD_INT 2
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: LD_INT 2
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 0
44755: PUSH
44756: LD_INT 2
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 1
44765: NEG
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 2
44776: NEG
44777: PUSH
44778: LD_INT 0
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 2
44787: NEG
44788: PUSH
44789: LD_INT 1
44791: NEG
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 2
44799: NEG
44800: PUSH
44801: LD_INT 2
44803: NEG
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: LD_INT 2
44814: NEG
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 2
44822: PUSH
44823: LD_INT 1
44825: NEG
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 3
44833: PUSH
44834: LD_INT 1
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 3
44843: PUSH
44844: LD_INT 2
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44876: LD_ADDR_VAR 0 25
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: LD_INT 0
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: LD_INT 1
44896: NEG
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 1
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: LD_INT 1
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 1
44934: NEG
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: NEG
44946: PUSH
44947: LD_INT 1
44949: NEG
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 1
44957: NEG
44958: PUSH
44959: LD_INT 2
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: LD_INT 2
44972: NEG
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 1
44980: PUSH
44981: LD_INT 1
44983: NEG
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 2
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 2
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 2
45011: PUSH
45012: LD_INT 2
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 1
45021: PUSH
45022: LD_INT 2
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: LD_INT 2
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 1
45041: NEG
45042: PUSH
45043: LD_INT 1
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 2
45052: NEG
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 2
45063: NEG
45064: PUSH
45065: LD_INT 1
45067: NEG
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 2
45075: NEG
45076: PUSH
45077: LD_INT 2
45079: NEG
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 3
45087: PUSH
45088: LD_INT 1
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 3
45097: PUSH
45098: LD_INT 2
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 2
45107: PUSH
45108: LD_INT 3
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 1
45117: PUSH
45118: LD_INT 3
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45150: LD_ADDR_VAR 0 26
45154: PUSH
45155: LD_INT 0
45157: PUSH
45158: LD_INT 0
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: LD_INT 0
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: LD_INT 1
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: LD_INT 1
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: LD_INT 0
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: PUSH
45221: LD_INT 1
45223: NEG
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 1
45231: NEG
45232: PUSH
45233: LD_INT 2
45235: NEG
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 0
45243: PUSH
45244: LD_INT 2
45246: NEG
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 1
45254: PUSH
45255: LD_INT 1
45257: NEG
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 2
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 2
45275: PUSH
45276: LD_INT 1
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 2
45285: PUSH
45286: LD_INT 2
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 1
45295: PUSH
45296: LD_INT 2
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: LD_INT 2
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: LD_INT 1
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 2
45326: NEG
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 2
45337: NEG
45338: PUSH
45339: LD_INT 1
45341: NEG
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 2
45349: NEG
45350: PUSH
45351: LD_INT 2
45353: NEG
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 2
45361: PUSH
45362: LD_INT 3
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 1
45371: PUSH
45372: LD_INT 3
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 1
45381: NEG
45382: PUSH
45383: LD_INT 2
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 2
45392: NEG
45393: PUSH
45394: LD_INT 1
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45426: LD_ADDR_VAR 0 27
45430: PUSH
45431: LD_INT 0
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: LD_INT 1
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 1
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: LD_INT 1
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 1
45484: NEG
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 1
45495: NEG
45496: PUSH
45497: LD_INT 1
45499: NEG
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 1
45507: NEG
45508: PUSH
45509: LD_INT 2
45511: NEG
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: LD_INT 2
45522: NEG
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 1
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 2
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 2
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: LD_INT 2
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: PUSH
45572: LD_INT 2
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: LD_INT 2
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: LD_INT 1
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 2
45602: NEG
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 2
45613: NEG
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 2
45625: NEG
45626: PUSH
45627: LD_INT 2
45629: NEG
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 1
45637: NEG
45638: PUSH
45639: LD_INT 2
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 2
45648: NEG
45649: PUSH
45650: LD_INT 1
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 3
45659: NEG
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 3
45671: NEG
45672: PUSH
45673: LD_INT 2
45675: NEG
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45706: LD_ADDR_VAR 0 28
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: LD_INT 0
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: LD_INT 1
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: LD_INT 0
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 1
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 1
45764: NEG
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 1
45787: NEG
45788: PUSH
45789: LD_INT 2
45791: NEG
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: LD_INT 2
45802: NEG
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 1
45810: PUSH
45811: LD_INT 1
45813: NEG
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 2
45821: PUSH
45822: LD_INT 0
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 2
45831: PUSH
45832: LD_INT 1
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 2
45841: PUSH
45842: LD_INT 2
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: LD_INT 2
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: LD_INT 2
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: LD_INT 1
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 2
45882: NEG
45883: PUSH
45884: LD_INT 0
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 2
45893: NEG
45894: PUSH
45895: LD_INT 1
45897: NEG
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 2
45905: NEG
45906: PUSH
45907: LD_INT 2
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 2
45917: NEG
45918: PUSH
45919: LD_INT 3
45921: NEG
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: LD_INT 3
45933: NEG
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 3
45941: NEG
45942: PUSH
45943: LD_INT 1
45945: NEG
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 3
45953: NEG
45954: PUSH
45955: LD_INT 2
45957: NEG
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45988: LD_ADDR_VAR 0 29
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: LD_INT 0
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: LD_INT 1
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 1
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: LD_INT 1
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: NEG
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 1
46069: NEG
46070: PUSH
46071: LD_INT 2
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: LD_INT 2
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 1
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 2
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 2
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 1
46123: PUSH
46124: LD_INT 2
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: LD_INT 2
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: NEG
46144: PUSH
46145: LD_INT 1
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 2
46154: NEG
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 2
46166: NEG
46167: PUSH
46168: LD_INT 2
46170: NEG
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 2
46178: NEG
46179: PUSH
46180: LD_INT 3
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 2
46190: PUSH
46191: LD_INT 1
46193: NEG
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 3
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: LD_INT 3
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 1
46221: NEG
46222: PUSH
46223: LD_INT 2
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 3
46232: NEG
46233: PUSH
46234: LD_INT 2
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46267: LD_ADDR_VAR 0 30
46271: PUSH
46272: LD_INT 0
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 0
46284: PUSH
46285: LD_INT 1
46287: NEG
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 1
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 1
46305: PUSH
46306: LD_INT 1
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 0
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 1
46325: NEG
46326: PUSH
46327: LD_INT 0
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 1
46336: NEG
46337: PUSH
46338: LD_INT 1
46340: NEG
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 1
46348: NEG
46349: PUSH
46350: LD_INT 2
46352: NEG
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: LD_INT 2
46363: NEG
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 1
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 2
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 2
46392: PUSH
46393: LD_INT 1
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 2
46402: PUSH
46403: LD_INT 2
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 1
46412: PUSH
46413: LD_INT 2
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: LD_INT 1
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 2
46433: NEG
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 2
46444: NEG
46445: PUSH
46446: LD_INT 1
46448: NEG
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 1
46456: NEG
46457: PUSH
46458: LD_INT 3
46460: NEG
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 1
46468: PUSH
46469: LD_INT 2
46471: NEG
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 3
46479: PUSH
46480: LD_INT 2
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 2
46489: PUSH
46490: LD_INT 3
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 2
46499: NEG
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 3
46510: NEG
46511: PUSH
46512: LD_INT 1
46514: NEG
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46545: LD_ADDR_VAR 0 31
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: LD_INT 1
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: NEG
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 1
46626: NEG
46627: PUSH
46628: LD_INT 2
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: LD_INT 1
46641: NEG
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 2
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 2
46659: PUSH
46660: LD_INT 1
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 2
46669: PUSH
46670: LD_INT 2
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 1
46679: PUSH
46680: LD_INT 2
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 0
46689: PUSH
46690: LD_INT 2
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: NEG
46700: PUSH
46701: LD_INT 1
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 2
46710: NEG
46711: PUSH
46712: LD_INT 1
46714: NEG
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 2
46722: NEG
46723: PUSH
46724: LD_INT 2
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 2
46734: NEG
46735: PUSH
46736: LD_INT 3
46738: NEG
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 2
46746: PUSH
46747: LD_INT 1
46749: NEG
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 3
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 1
46767: PUSH
46768: LD_INT 3
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 1
46777: NEG
46778: PUSH
46779: LD_INT 2
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 3
46788: NEG
46789: PUSH
46790: LD_INT 2
46792: NEG
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46823: LD_ADDR_VAR 0 32
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 1
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 1
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 0
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 1
46881: NEG
46882: PUSH
46883: LD_INT 0
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: LD_INT 1
46896: NEG
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 1
46904: NEG
46905: PUSH
46906: LD_INT 2
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 0
46916: PUSH
46917: LD_INT 2
46919: NEG
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 1
46927: PUSH
46928: LD_INT 1
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 2
46938: PUSH
46939: LD_INT 1
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 2
46948: PUSH
46949: LD_INT 2
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: LD_INT 2
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: LD_INT 2
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 1
46978: NEG
46979: PUSH
46980: LD_INT 1
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 2
46989: NEG
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 2
47000: NEG
47001: PUSH
47002: LD_INT 1
47004: NEG
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: LD_INT 3
47016: NEG
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 1
47024: PUSH
47025: LD_INT 2
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 3
47035: PUSH
47036: LD_INT 2
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 2
47045: PUSH
47046: LD_INT 3
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 2
47055: NEG
47056: PUSH
47057: LD_INT 1
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 3
47066: NEG
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47101: LD_ADDR_VAR 0 33
47105: PUSH
47106: LD_INT 0
47108: PUSH
47109: LD_INT 0
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: LD_INT 1
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 1
47139: PUSH
47140: LD_INT 1
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: LD_INT 1
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 1
47159: NEG
47160: PUSH
47161: LD_INT 0
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: NEG
47171: PUSH
47172: LD_INT 1
47174: NEG
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 1
47182: NEG
47183: PUSH
47184: LD_INT 2
47186: NEG
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: LD_INT 1
47197: NEG
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 2
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 2
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 1
47225: PUSH
47226: LD_INT 2
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 0
47235: PUSH
47236: LD_INT 2
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: LD_INT 1
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 2
47256: NEG
47257: PUSH
47258: LD_INT 0
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 2
47267: NEG
47268: PUSH
47269: LD_INT 1
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 2
47279: NEG
47280: PUSH
47281: LD_INT 2
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 2
47291: NEG
47292: PUSH
47293: LD_INT 3
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 2
47303: PUSH
47304: LD_INT 1
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 3
47314: PUSH
47315: LD_INT 1
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: LD_INT 3
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: LD_INT 2
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 3
47345: NEG
47346: PUSH
47347: LD_INT 2
47349: NEG
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47380: LD_ADDR_VAR 0 34
47384: PUSH
47385: LD_INT 0
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: LD_INT 1
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 1
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 1
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: LD_INT 1
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: LD_INT 1
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: LD_INT 2
47465: NEG
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 0
47473: PUSH
47474: LD_INT 2
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 2
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 2
47505: PUSH
47506: LD_INT 2
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 1
47515: PUSH
47516: LD_INT 2
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 1
47525: NEG
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 2
47536: NEG
47537: PUSH
47538: LD_INT 0
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 2
47547: NEG
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 2
47559: NEG
47560: PUSH
47561: LD_INT 2
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: LD_INT 3
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: PUSH
47584: LD_INT 2
47586: NEG
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 3
47594: PUSH
47595: LD_INT 2
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 2
47604: PUSH
47605: LD_INT 3
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 2
47614: NEG
47615: PUSH
47616: LD_INT 1
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 3
47625: NEG
47626: PUSH
47627: LD_INT 1
47629: NEG
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47660: LD_ADDR_VAR 0 35
47664: PUSH
47665: LD_INT 0
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 0
47677: PUSH
47678: LD_INT 1
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: LD_INT 1
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 0
47708: PUSH
47709: LD_INT 1
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 1
47718: NEG
47719: PUSH
47720: LD_INT 0
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 1
47729: NEG
47730: PUSH
47731: LD_INT 1
47733: NEG
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 2
47741: PUSH
47742: LD_INT 1
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 2
47751: NEG
47752: PUSH
47753: LD_INT 1
47755: NEG
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47772: LD_ADDR_VAR 0 36
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: LD_INT 0
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 0
47789: PUSH
47790: LD_INT 1
47792: NEG
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 1
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 0
47820: PUSH
47821: LD_INT 1
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 1
47830: NEG
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 1
47841: NEG
47842: PUSH
47843: LD_INT 1
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 1
47853: NEG
47854: PUSH
47855: LD_INT 2
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 1
47865: PUSH
47866: LD_INT 2
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47884: LD_ADDR_VAR 0 37
47888: PUSH
47889: LD_INT 0
47891: PUSH
47892: LD_INT 0
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 0
47901: PUSH
47902: LD_INT 1
47904: NEG
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 1
47912: PUSH
47913: LD_INT 0
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 1
47922: PUSH
47923: LD_INT 1
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 0
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: NEG
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: NEG
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: PUSH
47966: LD_INT 1
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: NEG
47977: PUSH
47978: LD_INT 1
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47996: LD_ADDR_VAR 0 38
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: LD_INT 0
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: LD_INT 1
48016: NEG
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 1
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 1
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 1
48054: NEG
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 1
48065: NEG
48066: PUSH
48067: LD_INT 1
48069: NEG
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 2
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 2
48087: NEG
48088: PUSH
48089: LD_INT 1
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48108: LD_ADDR_VAR 0 39
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: LD_INT 1
48128: NEG
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 1
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 0
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 1
48177: NEG
48178: PUSH
48179: LD_INT 1
48181: NEG
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: LD_INT 2
48193: NEG
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: LD_INT 2
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48220: LD_ADDR_VAR 0 40
48224: PUSH
48225: LD_INT 0
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: LD_INT 1
48240: NEG
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 1
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 1
48258: PUSH
48259: LD_INT 1
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 0
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: LD_INT 1
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 1
48301: PUSH
48302: LD_INT 1
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: PUSH
48314: LD_INT 1
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48332: LD_ADDR_VAR 0 41
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: LD_INT 0
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: LD_INT 1
48352: NEG
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 1
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 0
48380: PUSH
48381: LD_INT 1
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 1
48390: NEG
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: LD_INT 1
48405: NEG
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 1
48413: NEG
48414: PUSH
48415: LD_INT 2
48417: NEG
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: LD_INT 1
48428: NEG
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 2
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 2
48446: PUSH
48447: LD_INT 1
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 2
48456: PUSH
48457: LD_INT 2
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 1
48466: PUSH
48467: LD_INT 2
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 2
48487: NEG
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 2
48498: NEG
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 2
48510: NEG
48511: PUSH
48512: LD_INT 2
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 2
48522: NEG
48523: PUSH
48524: LD_INT 3
48526: NEG
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 2
48534: PUSH
48535: LD_INT 1
48537: NEG
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 3
48545: PUSH
48546: LD_INT 0
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 3
48555: PUSH
48556: LD_INT 1
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 3
48565: PUSH
48566: LD_INT 2
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 3
48575: PUSH
48576: LD_INT 3
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 2
48585: PUSH
48586: LD_INT 3
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 2
48595: NEG
48596: PUSH
48597: LD_INT 1
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 3
48606: NEG
48607: PUSH
48608: LD_INT 0
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 3
48617: NEG
48618: PUSH
48619: LD_INT 1
48621: NEG
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 3
48629: NEG
48630: PUSH
48631: LD_INT 2
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 3
48641: NEG
48642: PUSH
48643: LD_INT 3
48645: NEG
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48682: LD_ADDR_VAR 0 42
48686: PUSH
48687: LD_INT 0
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 1
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 1
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 1
48740: NEG
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: LD_INT 1
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 1
48763: NEG
48764: PUSH
48765: LD_INT 2
48767: NEG
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: LD_INT 2
48778: NEG
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 1
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 2
48797: PUSH
48798: LD_INT 1
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 2
48807: PUSH
48808: LD_INT 2
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: LD_INT 2
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 0
48827: PUSH
48828: LD_INT 2
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 1
48837: NEG
48838: PUSH
48839: LD_INT 1
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 2
48848: NEG
48849: PUSH
48850: LD_INT 1
48852: NEG
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 2
48860: NEG
48861: PUSH
48862: LD_INT 2
48864: NEG
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 2
48872: NEG
48873: PUSH
48874: LD_INT 3
48876: NEG
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 1
48884: NEG
48885: PUSH
48886: LD_INT 3
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: LD_INT 3
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 1
48907: PUSH
48908: LD_INT 2
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 3
48918: PUSH
48919: LD_INT 2
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 3
48928: PUSH
48929: LD_INT 3
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 2
48938: PUSH
48939: LD_INT 3
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: PUSH
48949: LD_INT 3
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: LD_INT 3
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 1
48968: NEG
48969: PUSH
48970: LD_INT 2
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 3
48979: NEG
48980: PUSH
48981: LD_INT 2
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 3
48991: NEG
48992: PUSH
48993: LD_INT 3
48995: NEG
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49032: LD_ADDR_VAR 0 43
49036: PUSH
49037: LD_INT 0
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 0
49049: PUSH
49050: LD_INT 1
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 1
49060: PUSH
49061: LD_INT 0
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: LD_INT 1
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: LD_INT 1
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 1
49101: NEG
49102: PUSH
49103: LD_INT 1
49105: NEG
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 1
49113: NEG
49114: PUSH
49115: LD_INT 2
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: LD_INT 2
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 1
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 2
49147: PUSH
49148: LD_INT 0
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 2
49157: PUSH
49158: LD_INT 1
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: PUSH
49168: LD_INT 2
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: LD_INT 2
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 1
49187: NEG
49188: PUSH
49189: LD_INT 1
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 2
49198: NEG
49199: PUSH
49200: LD_INT 0
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 2
49209: NEG
49210: PUSH
49211: LD_INT 1
49213: NEG
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 1
49221: NEG
49222: PUSH
49223: LD_INT 3
49225: NEG
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 0
49233: PUSH
49234: LD_INT 3
49236: NEG
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 1
49244: PUSH
49245: LD_INT 2
49247: NEG
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 2
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 3
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 3
49276: PUSH
49277: LD_INT 1
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: LD_INT 3
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: LD_INT 3
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: LD_INT 2
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 2
49317: NEG
49318: PUSH
49319: LD_INT 1
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 3
49328: NEG
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 3
49339: NEG
49340: PUSH
49341: LD_INT 1
49343: NEG
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49380: LD_ADDR_VAR 0 44
49384: PUSH
49385: LD_INT 0
49387: PUSH
49388: LD_INT 0
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 0
49397: PUSH
49398: LD_INT 1
49400: NEG
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 1
49408: PUSH
49409: LD_INT 0
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 1
49418: PUSH
49419: LD_INT 1
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 0
49428: PUSH
49429: LD_INT 1
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 1
49438: NEG
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 1
49449: NEG
49450: PUSH
49451: LD_INT 1
49453: NEG
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 1
49461: NEG
49462: PUSH
49463: LD_INT 2
49465: NEG
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 1
49473: PUSH
49474: LD_INT 1
49476: NEG
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 2
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 2
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 2
49504: PUSH
49505: LD_INT 2
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: LD_INT 2
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 1
49524: NEG
49525: PUSH
49526: LD_INT 1
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 2
49535: NEG
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 2
49546: NEG
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 2
49558: NEG
49559: PUSH
49560: LD_INT 2
49562: NEG
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 2
49570: NEG
49571: PUSH
49572: LD_INT 3
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 2
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 3
49593: PUSH
49594: LD_INT 0
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 3
49603: PUSH
49604: LD_INT 1
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 3
49613: PUSH
49614: LD_INT 2
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 3
49623: PUSH
49624: LD_INT 3
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 2
49633: PUSH
49634: LD_INT 3
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 2
49643: NEG
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 3
49654: NEG
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 3
49665: NEG
49666: PUSH
49667: LD_INT 1
49669: NEG
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 3
49677: NEG
49678: PUSH
49679: LD_INT 2
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 3
49689: NEG
49690: PUSH
49691: LD_INT 3
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49730: LD_ADDR_VAR 0 45
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: LD_INT 1
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: NEG
49789: PUSH
49790: LD_INT 0
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: LD_INT 1
49803: NEG
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 1
49811: NEG
49812: PUSH
49813: LD_INT 2
49815: NEG
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: LD_INT 2
49826: NEG
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: LD_INT 1
49837: NEG
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 2
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 2
49855: PUSH
49856: LD_INT 2
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: PUSH
49866: LD_INT 2
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: LD_INT 2
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 1
49885: NEG
49886: PUSH
49887: LD_INT 1
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PUSH
49898: LD_INT 1
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 2
49908: NEG
49909: PUSH
49910: LD_INT 2
49912: NEG
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 2
49920: NEG
49921: PUSH
49922: LD_INT 3
49924: NEG
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 1
49932: NEG
49933: PUSH
49934: LD_INT 3
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 0
49944: PUSH
49945: LD_INT 3
49947: NEG
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 1
49955: PUSH
49956: LD_INT 2
49958: NEG
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 3
49966: PUSH
49967: LD_INT 2
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 3
49976: PUSH
49977: LD_INT 3
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 2
49986: PUSH
49987: LD_INT 3
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: PUSH
49997: LD_INT 3
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: LD_INT 3
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 1
50016: NEG
50017: PUSH
50018: LD_INT 2
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 3
50027: NEG
50028: PUSH
50029: LD_INT 2
50031: NEG
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 3
50039: NEG
50040: PUSH
50041: LD_INT 3
50043: NEG
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50080: LD_ADDR_VAR 0 46
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: LD_INT 0
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: LD_INT 1
50100: NEG
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 1
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 1
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 1
50138: NEG
50139: PUSH
50140: LD_INT 0
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: NEG
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 1
50161: NEG
50162: PUSH
50163: LD_INT 2
50165: NEG
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: LD_INT 2
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 1
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 2
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 2
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 1
50215: PUSH
50216: LD_INT 2
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: LD_INT 2
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 1
50235: NEG
50236: PUSH
50237: LD_INT 1
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 2
50246: NEG
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 2
50257: NEG
50258: PUSH
50259: LD_INT 1
50261: NEG
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: LD_INT 3
50273: NEG
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 0
50281: PUSH
50282: LD_INT 3
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: LD_INT 2
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 2
50303: PUSH
50304: LD_INT 1
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 3
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 3
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: PUSH
50335: LD_INT 3
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: LD_INT 3
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: LD_INT 2
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 2
50365: NEG
50366: PUSH
50367: LD_INT 1
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 3
50376: NEG
50377: PUSH
50378: LD_INT 0
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 3
50387: NEG
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50428: LD_ADDR_VAR 0 47
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: LD_INT 1
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 1
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 1
50466: PUSH
50467: LD_INT 1
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: NEG
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 1
50497: NEG
50498: PUSH
50499: LD_INT 1
50501: NEG
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: LD_INT 2
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: LD_INT 2
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 1
50532: PUSH
50533: LD_INT 1
50535: NEG
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 2
50543: NEG
50544: PUSH
50545: LD_INT 1
50547: NEG
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 2
50555: NEG
50556: PUSH
50557: LD_INT 2
50559: NEG
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50579: LD_ADDR_VAR 0 48
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: LD_INT 0
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 0
50596: PUSH
50597: LD_INT 1
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: LD_INT 0
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: LD_INT 1
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 1
50648: NEG
50649: PUSH
50650: LD_INT 1
50652: NEG
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 1
50660: NEG
50661: PUSH
50662: LD_INT 2
50664: NEG
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: LD_INT 2
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 1
50683: PUSH
50684: LD_INT 1
50686: NEG
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 2
50694: PUSH
50695: LD_INT 0
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 2
50704: PUSH
50705: LD_INT 1
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50726: LD_ADDR_VAR 0 49
50730: PUSH
50731: LD_INT 0
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: LD_INT 1
50746: NEG
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 1
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: LD_INT 1
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 1
50784: NEG
50785: PUSH
50786: LD_INT 0
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 1
50795: NEG
50796: PUSH
50797: LD_INT 1
50799: NEG
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: LD_INT 1
50810: NEG
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 2
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 2
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 2
50838: PUSH
50839: LD_INT 2
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: PUSH
50849: LD_INT 2
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50870: LD_ADDR_VAR 0 50
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: LD_INT 1
50890: NEG
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: LD_INT 0
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: PUSH
50909: LD_INT 1
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 1
50928: NEG
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 1
50939: NEG
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 2
50951: PUSH
50952: LD_INT 1
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 2
50961: PUSH
50962: LD_INT 2
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 1
50971: PUSH
50972: LD_INT 2
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: LD_INT 2
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 1
50991: NEG
50992: PUSH
50993: LD_INT 1
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51014: LD_ADDR_VAR 0 51
51018: PUSH
51019: LD_INT 0
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: LD_INT 1
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 1
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 1
51052: PUSH
51053: LD_INT 1
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 1
51083: NEG
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 1
51095: PUSH
51096: LD_INT 2
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 0
51105: PUSH
51106: LD_INT 2
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: LD_INT 1
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 2
51126: NEG
51127: PUSH
51128: LD_INT 0
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 2
51137: NEG
51138: PUSH
51139: LD_INT 1
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51161: LD_ADDR_VAR 0 52
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: LD_INT 0
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 1
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 1
51199: PUSH
51200: LD_INT 1
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: LD_INT 1
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: LD_INT 0
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: LD_INT 1
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 1
51242: NEG
51243: PUSH
51244: LD_INT 2
51246: NEG
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 1
51254: NEG
51255: PUSH
51256: LD_INT 1
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 2
51265: NEG
51266: PUSH
51267: LD_INT 0
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 2
51276: NEG
51277: PUSH
51278: LD_INT 1
51280: NEG
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 2
51288: NEG
51289: PUSH
51290: LD_INT 2
51292: NEG
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51312: LD_ADDR_VAR 0 53
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 0
51329: PUSH
51330: LD_INT 1
51332: NEG
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: LD_INT 1
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: LD_INT 0
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: LD_INT 1
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: LD_INT 2
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: LD_INT 2
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 1
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 2
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 2
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 2
51447: PUSH
51448: LD_INT 2
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: LD_INT 2
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: LD_INT 2
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: LD_INT 1
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 2
51488: NEG
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 2
51499: NEG
51500: PUSH
51501: LD_INT 1
51503: NEG
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 2
51511: NEG
51512: PUSH
51513: LD_INT 2
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51542: LD_ADDR_VAR 0 54
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: LD_INT 0
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 0
51559: PUSH
51560: LD_INT 1
51562: NEG
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 1
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 1
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: LD_INT 1
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 1
51600: NEG
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: NEG
51612: PUSH
51613: LD_INT 1
51615: NEG
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: LD_INT 2
51627: NEG
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: LD_INT 2
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 1
51646: PUSH
51647: LD_INT 1
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 2
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 2
51667: PUSH
51668: LD_INT 1
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 2
51677: PUSH
51678: LD_INT 2
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 1
51687: PUSH
51688: LD_INT 2
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: LD_INT 2
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 1
51707: NEG
51708: PUSH
51709: LD_INT 1
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 2
51718: NEG
51719: PUSH
51720: LD_INT 0
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 2
51729: NEG
51730: PUSH
51731: LD_INT 1
51733: NEG
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 2
51741: NEG
51742: PUSH
51743: LD_INT 2
51745: NEG
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51772: LD_ADDR_VAR 0 55
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: LD_INT 1
51792: NEG
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 1
51800: PUSH
51801: LD_INT 0
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: PUSH
51811: LD_INT 1
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: LD_INT 1
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: LD_INT 1
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 1
51853: NEG
51854: PUSH
51855: LD_INT 2
51857: NEG
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 0
51865: PUSH
51866: LD_INT 2
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 1
51876: PUSH
51877: LD_INT 1
51879: NEG
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 2
51887: PUSH
51888: LD_INT 0
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 2
51897: PUSH
51898: LD_INT 1
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 2
51907: PUSH
51908: LD_INT 2
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 1
51917: PUSH
51918: LD_INT 2
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 0
51927: PUSH
51928: LD_INT 2
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 1
51937: NEG
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 2
51948: NEG
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 2
51959: NEG
51960: PUSH
51961: LD_INT 1
51963: NEG
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 2
51971: NEG
51972: PUSH
51973: LD_INT 2
51975: NEG
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52002: LD_ADDR_VAR 0 56
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: LD_INT 0
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 0
52019: PUSH
52020: LD_INT 1
52022: NEG
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 1
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 1
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 0
52050: PUSH
52051: LD_INT 1
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 1
52071: NEG
52072: PUSH
52073: LD_INT 1
52075: NEG
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 1
52083: NEG
52084: PUSH
52085: LD_INT 2
52087: NEG
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: LD_INT 2
52098: NEG
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: LD_INT 1
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 2
52117: PUSH
52118: LD_INT 0
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 2
52127: PUSH
52128: LD_INT 1
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 2
52137: PUSH
52138: LD_INT 2
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: PUSH
52148: LD_INT 2
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 0
52157: PUSH
52158: LD_INT 2
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: LD_INT 1
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 2
52178: NEG
52179: PUSH
52180: LD_INT 0
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 2
52189: NEG
52190: PUSH
52191: LD_INT 1
52193: NEG
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 2
52201: NEG
52202: PUSH
52203: LD_INT 2
52205: NEG
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52232: LD_ADDR_VAR 0 57
52236: PUSH
52237: LD_INT 0
52239: PUSH
52240: LD_INT 0
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 0
52249: PUSH
52250: LD_INT 1
52252: NEG
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 1
52260: PUSH
52261: LD_INT 0
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: LD_INT 1
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: LD_INT 1
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: NEG
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: LD_INT 1
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 1
52313: NEG
52314: PUSH
52315: LD_INT 2
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: LD_INT 2
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 2
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 2
52357: PUSH
52358: LD_INT 1
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 2
52367: PUSH
52368: LD_INT 2
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 1
52377: PUSH
52378: LD_INT 2
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: LD_INT 2
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 1
52397: NEG
52398: PUSH
52399: LD_INT 1
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 2
52408: NEG
52409: PUSH
52410: LD_INT 0
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 2
52419: NEG
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 2
52431: NEG
52432: PUSH
52433: LD_INT 2
52435: NEG
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52462: LD_ADDR_VAR 0 58
52466: PUSH
52467: LD_INT 0
52469: PUSH
52470: LD_INT 0
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 0
52479: PUSH
52480: LD_INT 1
52482: NEG
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 1
52490: PUSH
52491: LD_INT 0
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: PUSH
52501: LD_INT 1
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: LD_INT 1
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 1
52531: NEG
52532: PUSH
52533: LD_INT 1
52535: NEG
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: LD_INT 2
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 0
52555: PUSH
52556: LD_INT 2
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 1
52566: PUSH
52567: LD_INT 1
52569: NEG
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 2
52577: PUSH
52578: LD_INT 0
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 2
52587: PUSH
52588: LD_INT 1
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 2
52597: PUSH
52598: LD_INT 2
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: LD_INT 2
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 0
52617: PUSH
52618: LD_INT 2
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 1
52627: NEG
52628: PUSH
52629: LD_INT 1
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 2
52638: NEG
52639: PUSH
52640: LD_INT 0
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 2
52649: NEG
52650: PUSH
52651: LD_INT 1
52653: NEG
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 2
52661: NEG
52662: PUSH
52663: LD_INT 2
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52692: LD_ADDR_VAR 0 59
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: LD_INT 0
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 0
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 1
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 1
52730: PUSH
52731: LD_INT 1
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: NEG
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 1
52761: NEG
52762: PUSH
52763: LD_INT 1
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52780: LD_ADDR_VAR 0 60
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 0
52797: PUSH
52798: LD_INT 1
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: LD_INT 1
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 1
52849: NEG
52850: PUSH
52851: LD_INT 1
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52868: LD_ADDR_VAR 0 61
52872: PUSH
52873: LD_INT 0
52875: PUSH
52876: LD_INT 0
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 0
52885: PUSH
52886: LD_INT 1
52888: NEG
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 1
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 1
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 0
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: NEG
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 1
52937: NEG
52938: PUSH
52939: LD_INT 1
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52956: LD_ADDR_VAR 0 62
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 0
52973: PUSH
52974: LD_INT 1
52976: NEG
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 1
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 1
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 0
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 1
53025: NEG
53026: PUSH
53027: LD_INT 1
53029: NEG
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53044: LD_ADDR_VAR 0 63
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: LD_INT 1
53064: NEG
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 1
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: LD_INT 1
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: LD_INT 1
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 1
53113: NEG
53114: PUSH
53115: LD_INT 1
53117: NEG
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53132: LD_ADDR_VAR 0 64
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: LD_INT 0
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: LD_INT 1
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: LD_INT 0
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: LD_INT 1
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: LD_INT 1
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 1
53190: NEG
53191: PUSH
53192: LD_INT 0
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 1
53201: NEG
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: ST_TO_ADDR
// end ; 1 :
53220: GO 59117
53222: LD_INT 1
53224: DOUBLE
53225: EQUAL
53226: IFTRUE 53230
53228: GO 55853
53230: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53231: LD_ADDR_VAR 0 11
53235: PUSH
53236: LD_INT 1
53238: NEG
53239: PUSH
53240: LD_INT 3
53242: NEG
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: LD_INT 3
53253: NEG
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 1
53261: PUSH
53262: LD_INT 2
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: LIST
53274: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53275: LD_ADDR_VAR 0 12
53279: PUSH
53280: LD_INT 2
53282: PUSH
53283: LD_INT 1
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 3
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 3
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: LIST
53315: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53316: LD_ADDR_VAR 0 13
53320: PUSH
53321: LD_INT 3
53323: PUSH
53324: LD_INT 2
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 3
53333: PUSH
53334: LD_INT 3
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 2
53343: PUSH
53344: LD_INT 3
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: LIST
53355: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53356: LD_ADDR_VAR 0 14
53360: PUSH
53361: LD_INT 1
53363: PUSH
53364: LD_INT 3
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: LD_INT 3
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 1
53383: NEG
53384: PUSH
53385: LD_INT 2
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: LIST
53396: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53397: LD_ADDR_VAR 0 15
53401: PUSH
53402: LD_INT 2
53404: NEG
53405: PUSH
53406: LD_INT 1
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 3
53415: NEG
53416: PUSH
53417: LD_INT 0
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 3
53426: NEG
53427: PUSH
53428: LD_INT 1
53430: NEG
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: LIST
53440: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53441: LD_ADDR_VAR 0 16
53445: PUSH
53446: LD_INT 2
53448: NEG
53449: PUSH
53450: LD_INT 3
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 3
53460: NEG
53461: PUSH
53462: LD_INT 2
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 3
53472: NEG
53473: PUSH
53474: LD_INT 3
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: LIST
53486: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53487: LD_ADDR_VAR 0 17
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: LD_INT 3
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: LD_INT 3
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: LD_INT 2
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: LIST
53530: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53531: LD_ADDR_VAR 0 18
53535: PUSH
53536: LD_INT 2
53538: PUSH
53539: LD_INT 1
53541: NEG
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 3
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 3
53559: PUSH
53560: LD_INT 1
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: LIST
53571: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53572: LD_ADDR_VAR 0 19
53576: PUSH
53577: LD_INT 3
53579: PUSH
53580: LD_INT 2
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 3
53589: PUSH
53590: LD_INT 3
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 2
53599: PUSH
53600: LD_INT 3
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: LIST
53611: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53612: LD_ADDR_VAR 0 20
53616: PUSH
53617: LD_INT 1
53619: PUSH
53620: LD_INT 3
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 0
53629: PUSH
53630: LD_INT 3
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 1
53639: NEG
53640: PUSH
53641: LD_INT 2
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: LIST
53652: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53653: LD_ADDR_VAR 0 21
53657: PUSH
53658: LD_INT 2
53660: NEG
53661: PUSH
53662: LD_INT 1
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 3
53671: NEG
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 3
53682: NEG
53683: PUSH
53684: LD_INT 1
53686: NEG
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: LIST
53696: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53697: LD_ADDR_VAR 0 22
53701: PUSH
53702: LD_INT 2
53704: NEG
53705: PUSH
53706: LD_INT 3
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 3
53716: NEG
53717: PUSH
53718: LD_INT 2
53720: NEG
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 3
53728: NEG
53729: PUSH
53730: LD_INT 3
53732: NEG
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: LIST
53742: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53743: LD_ADDR_VAR 0 23
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: LD_INT 3
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: LD_INT 4
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: LD_INT 3
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: LIST
53786: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53787: LD_ADDR_VAR 0 24
53791: PUSH
53792: LD_INT 3
53794: PUSH
53795: LD_INT 0
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 3
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 4
53815: PUSH
53816: LD_INT 1
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: LIST
53827: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53828: LD_ADDR_VAR 0 25
53832: PUSH
53833: LD_INT 3
53835: PUSH
53836: LD_INT 3
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 4
53845: PUSH
53846: LD_INT 3
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 3
53855: PUSH
53856: LD_INT 4
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: LIST
53867: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53868: LD_ADDR_VAR 0 26
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: LD_INT 3
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: LD_INT 4
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 1
53895: NEG
53896: PUSH
53897: LD_INT 3
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: LIST
53908: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53909: LD_ADDR_VAR 0 27
53913: PUSH
53914: LD_INT 3
53916: NEG
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 3
53927: NEG
53928: PUSH
53929: LD_INT 1
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 4
53938: NEG
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: LIST
53952: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53953: LD_ADDR_VAR 0 28
53957: PUSH
53958: LD_INT 3
53960: NEG
53961: PUSH
53962: LD_INT 3
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 3
53972: NEG
53973: PUSH
53974: LD_INT 4
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 4
53984: NEG
53985: PUSH
53986: LD_INT 3
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: LIST
53998: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53999: LD_ADDR_VAR 0 29
54003: PUSH
54004: LD_INT 1
54006: NEG
54007: PUSH
54008: LD_INT 3
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: LD_INT 3
54021: NEG
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 1
54029: PUSH
54030: LD_INT 2
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 1
54040: NEG
54041: PUSH
54042: LD_INT 4
54044: NEG
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 0
54052: PUSH
54053: LD_INT 4
54055: NEG
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 1
54063: PUSH
54064: LD_INT 3
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: LD_INT 5
54078: NEG
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 0
54086: PUSH
54087: LD_INT 5
54089: NEG
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: LD_INT 4
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: LD_INT 6
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 0
54120: PUSH
54121: LD_INT 6
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 1
54131: PUSH
54132: LD_INT 5
54134: NEG
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54154: LD_ADDR_VAR 0 30
54158: PUSH
54159: LD_INT 2
54161: PUSH
54162: LD_INT 1
54164: NEG
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 3
54172: PUSH
54173: LD_INT 0
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 3
54182: PUSH
54183: LD_INT 1
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 3
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 4
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 4
54213: PUSH
54214: LD_INT 1
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 4
54223: PUSH
54224: LD_INT 1
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 5
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 5
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 5
54254: PUSH
54255: LD_INT 1
54257: NEG
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 6
54265: PUSH
54266: LD_INT 0
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 6
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54297: LD_ADDR_VAR 0 31
54301: PUSH
54302: LD_INT 3
54304: PUSH
54305: LD_INT 2
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 3
54314: PUSH
54315: LD_INT 3
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 2
54324: PUSH
54325: LD_INT 3
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 4
54334: PUSH
54335: LD_INT 3
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 4
54344: PUSH
54345: LD_INT 4
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 3
54354: PUSH
54355: LD_INT 4
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 5
54364: PUSH
54365: LD_INT 4
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 5
54374: PUSH
54375: LD_INT 5
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 4
54384: PUSH
54385: LD_INT 5
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 6
54394: PUSH
54395: LD_INT 5
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 6
54404: PUSH
54405: LD_INT 6
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 5
54414: PUSH
54415: LD_INT 6
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54436: LD_ADDR_VAR 0 32
54440: PUSH
54441: LD_INT 1
54443: PUSH
54444: LD_INT 3
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: LD_INT 3
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 1
54463: NEG
54464: PUSH
54465: LD_INT 2
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: LD_INT 4
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: LD_INT 4
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 1
54494: NEG
54495: PUSH
54496: LD_INT 3
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: PUSH
54506: LD_INT 5
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: LD_INT 5
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 1
54525: NEG
54526: PUSH
54527: LD_INT 4
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 1
54536: PUSH
54537: LD_INT 6
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 0
54546: PUSH
54547: LD_INT 6
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: NEG
54557: PUSH
54558: LD_INT 5
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54579: LD_ADDR_VAR 0 33
54583: PUSH
54584: LD_INT 2
54586: NEG
54587: PUSH
54588: LD_INT 1
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 3
54597: NEG
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 3
54608: NEG
54609: PUSH
54610: LD_INT 1
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 3
54620: NEG
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 4
54631: NEG
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 4
54642: NEG
54643: PUSH
54644: LD_INT 1
54646: NEG
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 4
54654: NEG
54655: PUSH
54656: LD_INT 1
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 5
54665: NEG
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 5
54676: NEG
54677: PUSH
54678: LD_INT 1
54680: NEG
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 5
54688: NEG
54689: PUSH
54690: LD_INT 1
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 6
54699: NEG
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 6
54710: NEG
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54734: LD_ADDR_VAR 0 34
54738: PUSH
54739: LD_INT 2
54741: NEG
54742: PUSH
54743: LD_INT 3
54745: NEG
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 3
54753: NEG
54754: PUSH
54755: LD_INT 2
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 3
54765: NEG
54766: PUSH
54767: LD_INT 3
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 3
54777: NEG
54778: PUSH
54779: LD_INT 4
54781: NEG
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 4
54789: NEG
54790: PUSH
54791: LD_INT 3
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 4
54801: NEG
54802: PUSH
54803: LD_INT 4
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 4
54813: NEG
54814: PUSH
54815: LD_INT 5
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 5
54825: NEG
54826: PUSH
54827: LD_INT 4
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 5
54837: NEG
54838: PUSH
54839: LD_INT 5
54841: NEG
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 5
54849: NEG
54850: PUSH
54851: LD_INT 6
54853: NEG
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 6
54861: NEG
54862: PUSH
54863: LD_INT 5
54865: NEG
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 6
54873: NEG
54874: PUSH
54875: LD_INT 6
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54897: LD_ADDR_VAR 0 41
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: LD_INT 2
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 1
54915: NEG
54916: PUSH
54917: LD_INT 3
54919: NEG
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 1
54927: PUSH
54928: LD_INT 2
54930: NEG
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: LIST
54940: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54941: LD_ADDR_VAR 0 42
54945: PUSH
54946: LD_INT 2
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 2
54958: PUSH
54959: LD_INT 1
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 3
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: LIST
54981: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54982: LD_ADDR_VAR 0 43
54986: PUSH
54987: LD_INT 2
54989: PUSH
54990: LD_INT 2
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 3
54999: PUSH
55000: LD_INT 2
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 2
55009: PUSH
55010: LD_INT 3
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: LIST
55021: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55022: LD_ADDR_VAR 0 44
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: LD_INT 2
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: LD_INT 3
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 1
55049: NEG
55050: PUSH
55051: LD_INT 2
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: LIST
55062: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55063: LD_ADDR_VAR 0 45
55067: PUSH
55068: LD_INT 2
55070: NEG
55071: PUSH
55072: LD_INT 0
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 2
55081: NEG
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 3
55092: NEG
55093: PUSH
55094: LD_INT 1
55096: NEG
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: LIST
55106: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55107: LD_ADDR_VAR 0 46
55111: PUSH
55112: LD_INT 2
55114: NEG
55115: PUSH
55116: LD_INT 2
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 2
55126: NEG
55127: PUSH
55128: LD_INT 3
55130: NEG
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 3
55138: NEG
55139: PUSH
55140: LD_INT 2
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: LIST
55152: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55153: LD_ADDR_VAR 0 47
55157: PUSH
55158: LD_INT 2
55160: NEG
55161: PUSH
55162: LD_INT 3
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 1
55172: NEG
55173: PUSH
55174: LD_INT 3
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55186: LD_ADDR_VAR 0 48
55190: PUSH
55191: LD_INT 1
55193: PUSH
55194: LD_INT 2
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 2
55204: PUSH
55205: LD_INT 1
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55217: LD_ADDR_VAR 0 49
55221: PUSH
55222: LD_INT 3
55224: PUSH
55225: LD_INT 1
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 3
55234: PUSH
55235: LD_INT 2
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55246: LD_ADDR_VAR 0 50
55250: PUSH
55251: LD_INT 2
55253: PUSH
55254: LD_INT 3
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 1
55263: PUSH
55264: LD_INT 3
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55275: LD_ADDR_VAR 0 51
55279: PUSH
55280: LD_INT 1
55282: NEG
55283: PUSH
55284: LD_INT 2
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 2
55293: NEG
55294: PUSH
55295: LD_INT 1
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55306: LD_ADDR_VAR 0 52
55310: PUSH
55311: LD_INT 3
55313: NEG
55314: PUSH
55315: LD_INT 1
55317: NEG
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 3
55325: NEG
55326: PUSH
55327: LD_INT 2
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55339: LD_ADDR_VAR 0 53
55343: PUSH
55344: LD_INT 1
55346: NEG
55347: PUSH
55348: LD_INT 3
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: LD_INT 3
55361: NEG
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 1
55369: PUSH
55370: LD_INT 2
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: LIST
55382: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55383: LD_ADDR_VAR 0 54
55387: PUSH
55388: LD_INT 2
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 3
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 3
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: LIST
55423: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55424: LD_ADDR_VAR 0 55
55428: PUSH
55429: LD_INT 3
55431: PUSH
55432: LD_INT 2
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 3
55441: PUSH
55442: LD_INT 3
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 2
55451: PUSH
55452: LD_INT 3
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: LIST
55463: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55464: LD_ADDR_VAR 0 56
55468: PUSH
55469: LD_INT 1
55471: PUSH
55472: LD_INT 3
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 0
55481: PUSH
55482: LD_INT 3
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 1
55491: NEG
55492: PUSH
55493: LD_INT 2
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: LIST
55504: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55505: LD_ADDR_VAR 0 57
55509: PUSH
55510: LD_INT 2
55512: NEG
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 3
55523: NEG
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 3
55534: NEG
55535: PUSH
55536: LD_INT 1
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: LIST
55548: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55549: LD_ADDR_VAR 0 58
55553: PUSH
55554: LD_INT 2
55556: NEG
55557: PUSH
55558: LD_INT 3
55560: NEG
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 3
55568: NEG
55569: PUSH
55570: LD_INT 2
55572: NEG
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 3
55580: NEG
55581: PUSH
55582: LD_INT 3
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: LIST
55594: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55595: LD_ADDR_VAR 0 59
55599: PUSH
55600: LD_INT 1
55602: NEG
55603: PUSH
55604: LD_INT 2
55606: NEG
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: LD_INT 2
55617: NEG
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: LIST
55638: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55639: LD_ADDR_VAR 0 60
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 2
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 2
55667: PUSH
55668: LD_INT 1
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: LIST
55679: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55680: LD_ADDR_VAR 0 61
55684: PUSH
55685: LD_INT 2
55687: PUSH
55688: LD_INT 1
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 2
55697: PUSH
55698: LD_INT 2
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 1
55707: PUSH
55708: LD_INT 2
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: LIST
55719: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55720: LD_ADDR_VAR 0 62
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: LD_INT 2
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: LD_INT 2
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: LIST
55760: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55761: LD_ADDR_VAR 0 63
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 2
55779: NEG
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 2
55790: NEG
55791: PUSH
55792: LD_INT 1
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: LIST
55804: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55805: LD_ADDR_VAR 0 64
55809: PUSH
55810: LD_INT 1
55812: NEG
55813: PUSH
55814: LD_INT 2
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 2
55824: NEG
55825: PUSH
55826: LD_INT 1
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 2
55836: NEG
55837: PUSH
55838: LD_INT 2
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: LIST
55850: ST_TO_ADDR
// end ; 2 :
55851: GO 59117
55853: LD_INT 2
55855: DOUBLE
55856: EQUAL
55857: IFTRUE 55861
55859: GO 59116
55861: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55862: LD_ADDR_VAR 0 29
55866: PUSH
55867: LD_INT 4
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 4
55879: PUSH
55880: LD_INT 1
55882: NEG
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 5
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 5
55900: PUSH
55901: LD_INT 1
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 4
55910: PUSH
55911: LD_INT 1
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 3
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 3
55930: PUSH
55931: LD_INT 1
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 3
55941: PUSH
55942: LD_INT 2
55944: NEG
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 5
55952: PUSH
55953: LD_INT 2
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 3
55962: PUSH
55963: LD_INT 3
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 3
55972: PUSH
55973: LD_INT 2
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 4
55982: PUSH
55983: LD_INT 3
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 4
55992: PUSH
55993: LD_INT 4
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 3
56002: PUSH
56003: LD_INT 4
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 2
56012: PUSH
56013: LD_INT 3
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 2
56022: PUSH
56023: LD_INT 2
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 4
56032: PUSH
56033: LD_INT 2
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 2
56042: PUSH
56043: LD_INT 4
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 0
56052: PUSH
56053: LD_INT 4
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: LD_INT 3
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 1
56072: PUSH
56073: LD_INT 4
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 1
56082: PUSH
56083: LD_INT 5
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: LD_INT 5
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 1
56102: NEG
56103: PUSH
56104: LD_INT 4
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: NEG
56114: PUSH
56115: LD_INT 3
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 2
56124: PUSH
56125: LD_INT 5
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 2
56134: NEG
56135: PUSH
56136: LD_INT 3
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 3
56145: NEG
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 3
56156: NEG
56157: PUSH
56158: LD_INT 1
56160: NEG
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 2
56168: NEG
56169: PUSH
56170: LD_INT 0
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 2
56179: NEG
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 3
56190: NEG
56191: PUSH
56192: LD_INT 1
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 4
56201: NEG
56202: PUSH
56203: LD_INT 0
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 4
56212: NEG
56213: PUSH
56214: LD_INT 1
56216: NEG
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 4
56224: NEG
56225: PUSH
56226: LD_INT 2
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 2
56236: NEG
56237: PUSH
56238: LD_INT 2
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 4
56247: NEG
56248: PUSH
56249: LD_INT 4
56251: NEG
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 4
56259: NEG
56260: PUSH
56261: LD_INT 5
56263: NEG
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 3
56271: NEG
56272: PUSH
56273: LD_INT 4
56275: NEG
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 3
56283: NEG
56284: PUSH
56285: LD_INT 3
56287: NEG
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 4
56295: NEG
56296: PUSH
56297: LD_INT 3
56299: NEG
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 5
56307: NEG
56308: PUSH
56309: LD_INT 4
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 5
56319: NEG
56320: PUSH
56321: LD_INT 5
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 3
56331: NEG
56332: PUSH
56333: LD_INT 5
56335: NEG
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 5
56343: NEG
56344: PUSH
56345: LD_INT 3
56347: NEG
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56400: LD_ADDR_VAR 0 30
56404: PUSH
56405: LD_INT 4
56407: PUSH
56408: LD_INT 4
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 4
56417: PUSH
56418: LD_INT 3
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 5
56427: PUSH
56428: LD_INT 4
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 5
56437: PUSH
56438: LD_INT 5
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 4
56447: PUSH
56448: LD_INT 5
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 3
56457: PUSH
56458: LD_INT 4
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 3
56467: PUSH
56468: LD_INT 3
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 5
56477: PUSH
56478: LD_INT 3
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 3
56487: PUSH
56488: LD_INT 5
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 0
56497: PUSH
56498: LD_INT 3
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: LD_INT 2
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 1
56517: PUSH
56518: LD_INT 3
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: LD_INT 4
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 0
56537: PUSH
56538: LD_INT 4
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 1
56547: NEG
56548: PUSH
56549: LD_INT 3
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 1
56558: NEG
56559: PUSH
56560: LD_INT 2
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 2
56569: PUSH
56570: LD_INT 4
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 2
56579: NEG
56580: PUSH
56581: LD_INT 2
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 4
56590: NEG
56591: PUSH
56592: LD_INT 0
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 4
56601: NEG
56602: PUSH
56603: LD_INT 1
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 3
56613: NEG
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 3
56624: NEG
56625: PUSH
56626: LD_INT 1
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 4
56635: NEG
56636: PUSH
56637: LD_INT 1
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 5
56646: NEG
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 5
56657: NEG
56658: PUSH
56659: LD_INT 1
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 5
56669: NEG
56670: PUSH
56671: LD_INT 2
56673: NEG
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 3
56681: NEG
56682: PUSH
56683: LD_INT 2
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 3
56692: NEG
56693: PUSH
56694: LD_INT 3
56696: NEG
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 3
56704: NEG
56705: PUSH
56706: LD_INT 4
56708: NEG
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 2
56716: NEG
56717: PUSH
56718: LD_INT 3
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 2
56728: NEG
56729: PUSH
56730: LD_INT 2
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 3
56740: NEG
56741: PUSH
56742: LD_INT 2
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 4
56752: NEG
56753: PUSH
56754: LD_INT 3
56756: NEG
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 4
56764: NEG
56765: PUSH
56766: LD_INT 4
56768: NEG
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 2
56776: NEG
56777: PUSH
56778: LD_INT 4
56780: NEG
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 4
56788: NEG
56789: PUSH
56790: LD_INT 2
56792: NEG
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: LD_INT 4
56803: NEG
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: LD_INT 5
56814: NEG
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 1
56822: PUSH
56823: LD_INT 4
56825: NEG
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 1
56833: PUSH
56834: LD_INT 3
56836: NEG
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 0
56844: PUSH
56845: LD_INT 3
56847: NEG
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 1
56855: NEG
56856: PUSH
56857: LD_INT 4
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 1
56867: NEG
56868: PUSH
56869: LD_INT 5
56871: NEG
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 2
56879: PUSH
56880: LD_INT 3
56882: NEG
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 2
56890: NEG
56891: PUSH
56892: LD_INT 5
56894: NEG
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56947: LD_ADDR_VAR 0 31
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: LD_INT 4
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: LD_INT 3
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 1
56974: PUSH
56975: LD_INT 4
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 1
56984: PUSH
56985: LD_INT 5
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: LD_INT 5
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 1
57004: NEG
57005: PUSH
57006: LD_INT 4
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 1
57015: NEG
57016: PUSH
57017: LD_INT 3
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 2
57026: PUSH
57027: LD_INT 5
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 2
57036: NEG
57037: PUSH
57038: LD_INT 3
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 3
57047: NEG
57048: PUSH
57049: LD_INT 0
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 3
57058: NEG
57059: PUSH
57060: LD_INT 1
57062: NEG
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 2
57070: NEG
57071: PUSH
57072: LD_INT 0
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 2
57081: NEG
57082: PUSH
57083: LD_INT 1
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 3
57092: NEG
57093: PUSH
57094: LD_INT 1
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 4
57103: NEG
57104: PUSH
57105: LD_INT 0
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 4
57114: NEG
57115: PUSH
57116: LD_INT 1
57118: NEG
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 4
57126: NEG
57127: PUSH
57128: LD_INT 2
57130: NEG
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 2
57138: NEG
57139: PUSH
57140: LD_INT 2
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 4
57149: NEG
57150: PUSH
57151: LD_INT 4
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 4
57161: NEG
57162: PUSH
57163: LD_INT 5
57165: NEG
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 3
57173: NEG
57174: PUSH
57175: LD_INT 4
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 3
57185: NEG
57186: PUSH
57187: LD_INT 3
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 4
57197: NEG
57198: PUSH
57199: LD_INT 3
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 5
57209: NEG
57210: PUSH
57211: LD_INT 4
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 5
57221: NEG
57222: PUSH
57223: LD_INT 5
57225: NEG
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 3
57233: NEG
57234: PUSH
57235: LD_INT 5
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 5
57245: NEG
57246: PUSH
57247: LD_INT 3
57249: NEG
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: LD_INT 3
57260: NEG
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: LD_INT 4
57271: NEG
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 1
57279: PUSH
57280: LD_INT 3
57282: NEG
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 1
57290: PUSH
57291: LD_INT 2
57293: NEG
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 0
57301: PUSH
57302: LD_INT 2
57304: NEG
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 1
57312: NEG
57313: PUSH
57314: LD_INT 3
57316: NEG
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: LD_INT 4
57328: NEG
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 2
57336: PUSH
57337: LD_INT 2
57339: NEG
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 2
57347: NEG
57348: PUSH
57349: LD_INT 4
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 4
57359: PUSH
57360: LD_INT 0
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 4
57369: PUSH
57370: LD_INT 1
57372: NEG
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 5
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 5
57390: PUSH
57391: LD_INT 1
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 4
57400: PUSH
57401: LD_INT 1
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 3
57410: PUSH
57411: LD_INT 0
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 3
57420: PUSH
57421: LD_INT 1
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 3
57431: PUSH
57432: LD_INT 2
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 5
57442: PUSH
57443: LD_INT 2
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57497: LD_ADDR_VAR 0 32
57501: PUSH
57502: LD_INT 4
57504: NEG
57505: PUSH
57506: LD_INT 0
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 4
57515: NEG
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 3
57527: NEG
57528: PUSH
57529: LD_INT 0
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 3
57538: NEG
57539: PUSH
57540: LD_INT 1
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 4
57549: NEG
57550: PUSH
57551: LD_INT 1
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 5
57560: NEG
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 5
57571: NEG
57572: PUSH
57573: LD_INT 1
57575: NEG
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 5
57583: NEG
57584: PUSH
57585: LD_INT 2
57587: NEG
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 3
57595: NEG
57596: PUSH
57597: LD_INT 2
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 3
57606: NEG
57607: PUSH
57608: LD_INT 3
57610: NEG
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 3
57618: NEG
57619: PUSH
57620: LD_INT 4
57622: NEG
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 2
57630: NEG
57631: PUSH
57632: LD_INT 3
57634: NEG
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 2
57642: NEG
57643: PUSH
57644: LD_INT 2
57646: NEG
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 3
57654: NEG
57655: PUSH
57656: LD_INT 2
57658: NEG
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 4
57666: NEG
57667: PUSH
57668: LD_INT 3
57670: NEG
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 4
57678: NEG
57679: PUSH
57680: LD_INT 4
57682: NEG
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 2
57690: NEG
57691: PUSH
57692: LD_INT 4
57694: NEG
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 4
57702: NEG
57703: PUSH
57704: LD_INT 2
57706: NEG
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: LD_INT 4
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: LD_INT 5
57728: NEG
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 1
57736: PUSH
57737: LD_INT 4
57739: NEG
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 1
57747: PUSH
57748: LD_INT 3
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 0
57758: PUSH
57759: LD_INT 3
57761: NEG
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 1
57769: NEG
57770: PUSH
57771: LD_INT 4
57773: NEG
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 1
57781: NEG
57782: PUSH
57783: LD_INT 5
57785: NEG
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 2
57793: PUSH
57794: LD_INT 3
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 2
57804: NEG
57805: PUSH
57806: LD_INT 5
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 3
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 3
57826: PUSH
57827: LD_INT 1
57829: NEG
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 4
57837: PUSH
57838: LD_INT 0
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 4
57847: PUSH
57848: LD_INT 1
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 3
57857: PUSH
57858: LD_INT 1
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 2
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 2
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 2
57888: PUSH
57889: LD_INT 2
57891: NEG
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 4
57899: PUSH
57900: LD_INT 2
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 4
57909: PUSH
57910: LD_INT 4
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 4
57919: PUSH
57920: LD_INT 3
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 5
57929: PUSH
57930: LD_INT 4
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 5
57939: PUSH
57940: LD_INT 5
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 4
57949: PUSH
57950: LD_INT 5
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 3
57959: PUSH
57960: LD_INT 4
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 3
57969: PUSH
57970: LD_INT 3
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 5
57979: PUSH
57980: LD_INT 3
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 3
57989: PUSH
57990: LD_INT 5
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58044: LD_ADDR_VAR 0 33
58048: PUSH
58049: LD_INT 4
58051: NEG
58052: PUSH
58053: LD_INT 4
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 4
58063: NEG
58064: PUSH
58065: LD_INT 5
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 3
58075: NEG
58076: PUSH
58077: LD_INT 4
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 3
58087: NEG
58088: PUSH
58089: LD_INT 3
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 4
58099: NEG
58100: PUSH
58101: LD_INT 3
58103: NEG
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 5
58111: NEG
58112: PUSH
58113: LD_INT 4
58115: NEG
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 5
58123: NEG
58124: PUSH
58125: LD_INT 5
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 3
58135: NEG
58136: PUSH
58137: LD_INT 5
58139: NEG
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 5
58147: NEG
58148: PUSH
58149: LD_INT 3
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 0
58159: PUSH
58160: LD_INT 3
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 0
58170: PUSH
58171: LD_INT 4
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: PUSH
58182: LD_INT 3
58184: NEG
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 1
58192: PUSH
58193: LD_INT 2
58195: NEG
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 0
58203: PUSH
58204: LD_INT 2
58206: NEG
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 1
58214: NEG
58215: PUSH
58216: LD_INT 3
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 1
58226: NEG
58227: PUSH
58228: LD_INT 4
58230: NEG
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 2
58238: PUSH
58239: LD_INT 2
58241: NEG
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 2
58249: NEG
58250: PUSH
58251: LD_INT 4
58253: NEG
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 4
58261: PUSH
58262: LD_INT 0
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 4
58271: PUSH
58272: LD_INT 1
58274: NEG
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 5
58282: PUSH
58283: LD_INT 0
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 5
58292: PUSH
58293: LD_INT 1
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 4
58302: PUSH
58303: LD_INT 1
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 3
58312: PUSH
58313: LD_INT 0
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 3
58322: PUSH
58323: LD_INT 1
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 3
58333: PUSH
58334: LD_INT 2
58336: NEG
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 5
58344: PUSH
58345: LD_INT 2
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 3
58354: PUSH
58355: LD_INT 3
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 3
58364: PUSH
58365: LD_INT 2
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 4
58374: PUSH
58375: LD_INT 3
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 4
58384: PUSH
58385: LD_INT 4
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 3
58394: PUSH
58395: LD_INT 4
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 2
58404: PUSH
58405: LD_INT 3
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 2
58414: PUSH
58415: LD_INT 2
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 4
58424: PUSH
58425: LD_INT 2
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 2
58434: PUSH
58435: LD_INT 4
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 0
58444: PUSH
58445: LD_INT 4
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 0
58454: PUSH
58455: LD_INT 3
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 1
58464: PUSH
58465: LD_INT 4
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: LD_INT 5
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 0
58484: PUSH
58485: LD_INT 5
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 1
58494: NEG
58495: PUSH
58496: LD_INT 4
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 1
58505: NEG
58506: PUSH
58507: LD_INT 3
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 2
58516: PUSH
58517: LD_INT 5
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 2
58526: NEG
58527: PUSH
58528: LD_INT 3
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58582: LD_ADDR_VAR 0 34
58586: PUSH
58587: LD_INT 0
58589: PUSH
58590: LD_INT 4
58592: NEG
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: LD_INT 5
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 1
58611: PUSH
58612: LD_INT 4
58614: NEG
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 1
58622: PUSH
58623: LD_INT 3
58625: NEG
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 0
58633: PUSH
58634: LD_INT 3
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 1
58644: NEG
58645: PUSH
58646: LD_INT 4
58648: NEG
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 1
58656: NEG
58657: PUSH
58658: LD_INT 5
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 2
58668: PUSH
58669: LD_INT 3
58671: NEG
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 2
58679: NEG
58680: PUSH
58681: LD_INT 5
58683: NEG
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 3
58691: PUSH
58692: LD_INT 0
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 3
58701: PUSH
58702: LD_INT 1
58704: NEG
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 4
58712: PUSH
58713: LD_INT 0
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 4
58722: PUSH
58723: LD_INT 1
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 3
58732: PUSH
58733: LD_INT 1
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 2
58742: PUSH
58743: LD_INT 0
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 2
58752: PUSH
58753: LD_INT 1
58755: NEG
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 2
58763: PUSH
58764: LD_INT 2
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 4
58774: PUSH
58775: LD_INT 2
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 4
58784: PUSH
58785: LD_INT 4
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 4
58794: PUSH
58795: LD_INT 3
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 5
58804: PUSH
58805: LD_INT 4
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 5
58814: PUSH
58815: LD_INT 5
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 4
58824: PUSH
58825: LD_INT 5
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 3
58834: PUSH
58835: LD_INT 4
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 3
58844: PUSH
58845: LD_INT 3
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 5
58854: PUSH
58855: LD_INT 3
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 3
58864: PUSH
58865: LD_INT 5
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 0
58874: PUSH
58875: LD_INT 3
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 0
58884: PUSH
58885: LD_INT 2
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 1
58894: PUSH
58895: LD_INT 3
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 1
58904: PUSH
58905: LD_INT 4
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: LD_INT 4
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 1
58924: NEG
58925: PUSH
58926: LD_INT 3
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 1
58935: NEG
58936: PUSH
58937: LD_INT 2
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 2
58946: PUSH
58947: LD_INT 4
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 2
58956: NEG
58957: PUSH
58958: LD_INT 2
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 4
58967: NEG
58968: PUSH
58969: LD_INT 0
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 4
58978: NEG
58979: PUSH
58980: LD_INT 1
58982: NEG
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 3
58990: NEG
58991: PUSH
58992: LD_INT 0
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 3
59001: NEG
59002: PUSH
59003: LD_INT 1
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 4
59012: NEG
59013: PUSH
59014: LD_INT 1
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 5
59023: NEG
59024: PUSH
59025: LD_INT 0
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 5
59034: NEG
59035: PUSH
59036: LD_INT 1
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 5
59046: NEG
59047: PUSH
59048: LD_INT 2
59050: NEG
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 3
59058: NEG
59059: PUSH
59060: LD_INT 2
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: ST_TO_ADDR
// end ; end ;
59114: GO 59117
59116: POP
// case btype of b_depot , b_warehouse :
59117: LD_VAR 0 1
59121: PUSH
59122: LD_INT 0
59124: DOUBLE
59125: EQUAL
59126: IFTRUE 59136
59128: LD_INT 1
59130: DOUBLE
59131: EQUAL
59132: IFTRUE 59136
59134: GO 59337
59136: POP
// case nation of nation_american :
59137: LD_VAR 0 5
59141: PUSH
59142: LD_INT 1
59144: DOUBLE
59145: EQUAL
59146: IFTRUE 59150
59148: GO 59206
59150: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
59151: LD_ADDR_VAR 0 9
59155: PUSH
59156: LD_VAR 0 11
59160: PUSH
59161: LD_VAR 0 12
59165: PUSH
59166: LD_VAR 0 13
59170: PUSH
59171: LD_VAR 0 14
59175: PUSH
59176: LD_VAR 0 15
59180: PUSH
59181: LD_VAR 0 16
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: PUSH
59194: LD_VAR 0 4
59198: PUSH
59199: LD_INT 1
59201: PLUS
59202: ARRAY
59203: ST_TO_ADDR
59204: GO 59335
59206: LD_INT 2
59208: DOUBLE
59209: EQUAL
59210: IFTRUE 59214
59212: GO 59270
59214: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
59215: LD_ADDR_VAR 0 9
59219: PUSH
59220: LD_VAR 0 17
59224: PUSH
59225: LD_VAR 0 18
59229: PUSH
59230: LD_VAR 0 19
59234: PUSH
59235: LD_VAR 0 20
59239: PUSH
59240: LD_VAR 0 21
59244: PUSH
59245: LD_VAR 0 22
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: PUSH
59258: LD_VAR 0 4
59262: PUSH
59263: LD_INT 1
59265: PLUS
59266: ARRAY
59267: ST_TO_ADDR
59268: GO 59335
59270: LD_INT 3
59272: DOUBLE
59273: EQUAL
59274: IFTRUE 59278
59276: GO 59334
59278: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59279: LD_ADDR_VAR 0 9
59283: PUSH
59284: LD_VAR 0 23
59288: PUSH
59289: LD_VAR 0 24
59293: PUSH
59294: LD_VAR 0 25
59298: PUSH
59299: LD_VAR 0 26
59303: PUSH
59304: LD_VAR 0 27
59308: PUSH
59309: LD_VAR 0 28
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: PUSH
59322: LD_VAR 0 4
59326: PUSH
59327: LD_INT 1
59329: PLUS
59330: ARRAY
59331: ST_TO_ADDR
59332: GO 59335
59334: POP
59335: GO 59890
59337: LD_INT 2
59339: DOUBLE
59340: EQUAL
59341: IFTRUE 59351
59343: LD_INT 3
59345: DOUBLE
59346: EQUAL
59347: IFTRUE 59351
59349: GO 59407
59351: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59352: LD_ADDR_VAR 0 9
59356: PUSH
59357: LD_VAR 0 29
59361: PUSH
59362: LD_VAR 0 30
59366: PUSH
59367: LD_VAR 0 31
59371: PUSH
59372: LD_VAR 0 32
59376: PUSH
59377: LD_VAR 0 33
59381: PUSH
59382: LD_VAR 0 34
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: PUSH
59395: LD_VAR 0 4
59399: PUSH
59400: LD_INT 1
59402: PLUS
59403: ARRAY
59404: ST_TO_ADDR
59405: GO 59890
59407: LD_INT 16
59409: DOUBLE
59410: EQUAL
59411: IFTRUE 59469
59413: LD_INT 17
59415: DOUBLE
59416: EQUAL
59417: IFTRUE 59469
59419: LD_INT 18
59421: DOUBLE
59422: EQUAL
59423: IFTRUE 59469
59425: LD_INT 19
59427: DOUBLE
59428: EQUAL
59429: IFTRUE 59469
59431: LD_INT 22
59433: DOUBLE
59434: EQUAL
59435: IFTRUE 59469
59437: LD_INT 20
59439: DOUBLE
59440: EQUAL
59441: IFTRUE 59469
59443: LD_INT 21
59445: DOUBLE
59446: EQUAL
59447: IFTRUE 59469
59449: LD_INT 23
59451: DOUBLE
59452: EQUAL
59453: IFTRUE 59469
59455: LD_INT 24
59457: DOUBLE
59458: EQUAL
59459: IFTRUE 59469
59461: LD_INT 25
59463: DOUBLE
59464: EQUAL
59465: IFTRUE 59469
59467: GO 59525
59469: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59470: LD_ADDR_VAR 0 9
59474: PUSH
59475: LD_VAR 0 35
59479: PUSH
59480: LD_VAR 0 36
59484: PUSH
59485: LD_VAR 0 37
59489: PUSH
59490: LD_VAR 0 38
59494: PUSH
59495: LD_VAR 0 39
59499: PUSH
59500: LD_VAR 0 40
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: PUSH
59513: LD_VAR 0 4
59517: PUSH
59518: LD_INT 1
59520: PLUS
59521: ARRAY
59522: ST_TO_ADDR
59523: GO 59890
59525: LD_INT 6
59527: DOUBLE
59528: EQUAL
59529: IFTRUE 59581
59531: LD_INT 7
59533: DOUBLE
59534: EQUAL
59535: IFTRUE 59581
59537: LD_INT 8
59539: DOUBLE
59540: EQUAL
59541: IFTRUE 59581
59543: LD_INT 13
59545: DOUBLE
59546: EQUAL
59547: IFTRUE 59581
59549: LD_INT 12
59551: DOUBLE
59552: EQUAL
59553: IFTRUE 59581
59555: LD_INT 15
59557: DOUBLE
59558: EQUAL
59559: IFTRUE 59581
59561: LD_INT 11
59563: DOUBLE
59564: EQUAL
59565: IFTRUE 59581
59567: LD_INT 14
59569: DOUBLE
59570: EQUAL
59571: IFTRUE 59581
59573: LD_INT 10
59575: DOUBLE
59576: EQUAL
59577: IFTRUE 59581
59579: GO 59637
59581: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
59582: LD_ADDR_VAR 0 9
59586: PUSH
59587: LD_VAR 0 41
59591: PUSH
59592: LD_VAR 0 42
59596: PUSH
59597: LD_VAR 0 43
59601: PUSH
59602: LD_VAR 0 44
59606: PUSH
59607: LD_VAR 0 45
59611: PUSH
59612: LD_VAR 0 46
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: PUSH
59625: LD_VAR 0 4
59629: PUSH
59630: LD_INT 1
59632: PLUS
59633: ARRAY
59634: ST_TO_ADDR
59635: GO 59890
59637: LD_INT 36
59639: DOUBLE
59640: EQUAL
59641: IFTRUE 59645
59643: GO 59701
59645: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59646: LD_ADDR_VAR 0 9
59650: PUSH
59651: LD_VAR 0 47
59655: PUSH
59656: LD_VAR 0 48
59660: PUSH
59661: LD_VAR 0 49
59665: PUSH
59666: LD_VAR 0 50
59670: PUSH
59671: LD_VAR 0 51
59675: PUSH
59676: LD_VAR 0 52
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: PUSH
59689: LD_VAR 0 4
59693: PUSH
59694: LD_INT 1
59696: PLUS
59697: ARRAY
59698: ST_TO_ADDR
59699: GO 59890
59701: LD_INT 4
59703: DOUBLE
59704: EQUAL
59705: IFTRUE 59727
59707: LD_INT 5
59709: DOUBLE
59710: EQUAL
59711: IFTRUE 59727
59713: LD_INT 34
59715: DOUBLE
59716: EQUAL
59717: IFTRUE 59727
59719: LD_INT 37
59721: DOUBLE
59722: EQUAL
59723: IFTRUE 59727
59725: GO 59783
59727: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59728: LD_ADDR_VAR 0 9
59732: PUSH
59733: LD_VAR 0 53
59737: PUSH
59738: LD_VAR 0 54
59742: PUSH
59743: LD_VAR 0 55
59747: PUSH
59748: LD_VAR 0 56
59752: PUSH
59753: LD_VAR 0 57
59757: PUSH
59758: LD_VAR 0 58
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: PUSH
59771: LD_VAR 0 4
59775: PUSH
59776: LD_INT 1
59778: PLUS
59779: ARRAY
59780: ST_TO_ADDR
59781: GO 59890
59783: LD_INT 31
59785: DOUBLE
59786: EQUAL
59787: IFTRUE 59833
59789: LD_INT 32
59791: DOUBLE
59792: EQUAL
59793: IFTRUE 59833
59795: LD_INT 33
59797: DOUBLE
59798: EQUAL
59799: IFTRUE 59833
59801: LD_INT 27
59803: DOUBLE
59804: EQUAL
59805: IFTRUE 59833
59807: LD_INT 26
59809: DOUBLE
59810: EQUAL
59811: IFTRUE 59833
59813: LD_INT 28
59815: DOUBLE
59816: EQUAL
59817: IFTRUE 59833
59819: LD_INT 29
59821: DOUBLE
59822: EQUAL
59823: IFTRUE 59833
59825: LD_INT 30
59827: DOUBLE
59828: EQUAL
59829: IFTRUE 59833
59831: GO 59889
59833: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
59834: LD_ADDR_VAR 0 9
59838: PUSH
59839: LD_VAR 0 59
59843: PUSH
59844: LD_VAR 0 60
59848: PUSH
59849: LD_VAR 0 61
59853: PUSH
59854: LD_VAR 0 62
59858: PUSH
59859: LD_VAR 0 63
59863: PUSH
59864: LD_VAR 0 64
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: PUSH
59877: LD_VAR 0 4
59881: PUSH
59882: LD_INT 1
59884: PLUS
59885: ARRAY
59886: ST_TO_ADDR
59887: GO 59890
59889: POP
// temp_list2 = [ ] ;
59890: LD_ADDR_VAR 0 10
59894: PUSH
59895: EMPTY
59896: ST_TO_ADDR
// for i in temp_list do
59897: LD_ADDR_VAR 0 8
59901: PUSH
59902: LD_VAR 0 9
59906: PUSH
59907: FOR_IN
59908: IFFALSE 59960
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59910: LD_ADDR_VAR 0 10
59914: PUSH
59915: LD_VAR 0 10
59919: PUSH
59920: LD_VAR 0 8
59924: PUSH
59925: LD_INT 1
59927: ARRAY
59928: PUSH
59929: LD_VAR 0 2
59933: PLUS
59934: PUSH
59935: LD_VAR 0 8
59939: PUSH
59940: LD_INT 2
59942: ARRAY
59943: PUSH
59944: LD_VAR 0 3
59948: PLUS
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: EMPTY
59955: LIST
59956: ADD
59957: ST_TO_ADDR
59958: GO 59907
59960: POP
59961: POP
// result = temp_list2 ;
59962: LD_ADDR_VAR 0 7
59966: PUSH
59967: LD_VAR 0 10
59971: ST_TO_ADDR
// end ;
59972: LD_VAR 0 7
59976: RET
// export function EnemyInRange ( unit , dist ) ; begin
59977: LD_INT 0
59979: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59980: LD_ADDR_VAR 0 3
59984: PUSH
59985: LD_VAR 0 1
59989: PPUSH
59990: CALL_OW 255
59994: PPUSH
59995: LD_VAR 0 1
59999: PPUSH
60000: CALL_OW 250
60004: PPUSH
60005: LD_VAR 0 1
60009: PPUSH
60010: CALL_OW 251
60014: PPUSH
60015: LD_VAR 0 2
60019: PPUSH
60020: CALL 34081 0 4
60024: PUSH
60025: LD_INT 4
60027: ARRAY
60028: ST_TO_ADDR
// end ;
60029: LD_VAR 0 3
60033: RET
// export function PlayerSeeMe ( unit ) ; begin
60034: LD_INT 0
60036: PPUSH
// result := See ( your_side , unit ) ;
60037: LD_ADDR_VAR 0 2
60041: PUSH
60042: LD_OWVAR 2
60046: PPUSH
60047: LD_VAR 0 1
60051: PPUSH
60052: CALL_OW 292
60056: ST_TO_ADDR
// end ;
60057: LD_VAR 0 2
60061: RET
// export function ReverseDir ( unit ) ; begin
60062: LD_INT 0
60064: PPUSH
// if not unit then
60065: LD_VAR 0 1
60069: NOT
60070: IFFALSE 60074
// exit ;
60072: GO 60097
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60074: LD_ADDR_VAR 0 2
60078: PUSH
60079: LD_VAR 0 1
60083: PPUSH
60084: CALL_OW 254
60088: PUSH
60089: LD_INT 3
60091: PLUS
60092: PUSH
60093: LD_INT 6
60095: MOD
60096: ST_TO_ADDR
// end ;
60097: LD_VAR 0 2
60101: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60102: LD_INT 0
60104: PPUSH
60105: PPUSH
60106: PPUSH
60107: PPUSH
60108: PPUSH
// if not hexes then
60109: LD_VAR 0 2
60113: NOT
60114: IFFALSE 60118
// exit ;
60116: GO 60266
// dist := 9999 ;
60118: LD_ADDR_VAR 0 5
60122: PUSH
60123: LD_INT 9999
60125: ST_TO_ADDR
// for i = 1 to hexes do
60126: LD_ADDR_VAR 0 4
60130: PUSH
60131: DOUBLE
60132: LD_INT 1
60134: DEC
60135: ST_TO_ADDR
60136: LD_VAR 0 2
60140: PUSH
60141: FOR_TO
60142: IFFALSE 60254
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60144: LD_VAR 0 1
60148: PPUSH
60149: LD_VAR 0 2
60153: PUSH
60154: LD_VAR 0 4
60158: ARRAY
60159: PUSH
60160: LD_INT 1
60162: ARRAY
60163: PPUSH
60164: LD_VAR 0 2
60168: PUSH
60169: LD_VAR 0 4
60173: ARRAY
60174: PUSH
60175: LD_INT 2
60177: ARRAY
60178: PPUSH
60179: CALL_OW 297
60183: PUSH
60184: LD_VAR 0 5
60188: LESS
60189: IFFALSE 60252
// begin hex := hexes [ i ] ;
60191: LD_ADDR_VAR 0 7
60195: PUSH
60196: LD_VAR 0 2
60200: PUSH
60201: LD_VAR 0 4
60205: ARRAY
60206: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60207: LD_ADDR_VAR 0 5
60211: PUSH
60212: LD_VAR 0 1
60216: PPUSH
60217: LD_VAR 0 2
60221: PUSH
60222: LD_VAR 0 4
60226: ARRAY
60227: PUSH
60228: LD_INT 1
60230: ARRAY
60231: PPUSH
60232: LD_VAR 0 2
60236: PUSH
60237: LD_VAR 0 4
60241: ARRAY
60242: PUSH
60243: LD_INT 2
60245: ARRAY
60246: PPUSH
60247: CALL_OW 297
60251: ST_TO_ADDR
// end ; end ;
60252: GO 60141
60254: POP
60255: POP
// result := hex ;
60256: LD_ADDR_VAR 0 3
60260: PUSH
60261: LD_VAR 0 7
60265: ST_TO_ADDR
// end ;
60266: LD_VAR 0 3
60270: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60271: LD_INT 0
60273: PPUSH
60274: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60275: LD_VAR 0 1
60279: NOT
60280: PUSH
60281: LD_VAR 0 1
60285: PUSH
60286: LD_INT 21
60288: PUSH
60289: LD_INT 2
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 23
60298: PUSH
60299: LD_INT 2
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PPUSH
60310: CALL_OW 69
60314: IN
60315: NOT
60316: OR
60317: IFFALSE 60321
// exit ;
60319: GO 60368
// for i = 1 to 3 do
60321: LD_ADDR_VAR 0 3
60325: PUSH
60326: DOUBLE
60327: LD_INT 1
60329: DEC
60330: ST_TO_ADDR
60331: LD_INT 3
60333: PUSH
60334: FOR_TO
60335: IFFALSE 60366
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60337: LD_VAR 0 1
60341: PPUSH
60342: CALL_OW 250
60346: PPUSH
60347: LD_VAR 0 1
60351: PPUSH
60352: CALL_OW 251
60356: PPUSH
60357: LD_INT 1
60359: PPUSH
60360: CALL_OW 453
60364: GO 60334
60366: POP
60367: POP
// end ;
60368: LD_VAR 0 2
60372: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60373: LD_INT 0
60375: PPUSH
60376: PPUSH
60377: PPUSH
60378: PPUSH
60379: PPUSH
60380: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60381: LD_VAR 0 1
60385: NOT
60386: PUSH
60387: LD_VAR 0 2
60391: NOT
60392: OR
60393: PUSH
60394: LD_VAR 0 1
60398: PPUSH
60399: CALL_OW 314
60403: OR
60404: IFFALSE 60408
// exit ;
60406: GO 60849
// x := GetX ( enemy_unit ) ;
60408: LD_ADDR_VAR 0 7
60412: PUSH
60413: LD_VAR 0 2
60417: PPUSH
60418: CALL_OW 250
60422: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60423: LD_ADDR_VAR 0 8
60427: PUSH
60428: LD_VAR 0 2
60432: PPUSH
60433: CALL_OW 251
60437: ST_TO_ADDR
// if not x or not y then
60438: LD_VAR 0 7
60442: NOT
60443: PUSH
60444: LD_VAR 0 8
60448: NOT
60449: OR
60450: IFFALSE 60454
// exit ;
60452: GO 60849
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60454: LD_ADDR_VAR 0 6
60458: PUSH
60459: LD_VAR 0 7
60463: PPUSH
60464: LD_INT 0
60466: PPUSH
60467: LD_INT 4
60469: PPUSH
60470: CALL_OW 272
60474: PUSH
60475: LD_VAR 0 8
60479: PPUSH
60480: LD_INT 0
60482: PPUSH
60483: LD_INT 4
60485: PPUSH
60486: CALL_OW 273
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_VAR 0 7
60499: PPUSH
60500: LD_INT 1
60502: PPUSH
60503: LD_INT 4
60505: PPUSH
60506: CALL_OW 272
60510: PUSH
60511: LD_VAR 0 8
60515: PPUSH
60516: LD_INT 1
60518: PPUSH
60519: LD_INT 4
60521: PPUSH
60522: CALL_OW 273
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_VAR 0 7
60535: PPUSH
60536: LD_INT 2
60538: PPUSH
60539: LD_INT 4
60541: PPUSH
60542: CALL_OW 272
60546: PUSH
60547: LD_VAR 0 8
60551: PPUSH
60552: LD_INT 2
60554: PPUSH
60555: LD_INT 4
60557: PPUSH
60558: CALL_OW 273
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_VAR 0 7
60571: PPUSH
60572: LD_INT 3
60574: PPUSH
60575: LD_INT 4
60577: PPUSH
60578: CALL_OW 272
60582: PUSH
60583: LD_VAR 0 8
60587: PPUSH
60588: LD_INT 3
60590: PPUSH
60591: LD_INT 4
60593: PPUSH
60594: CALL_OW 273
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_VAR 0 7
60607: PPUSH
60608: LD_INT 4
60610: PPUSH
60611: LD_INT 4
60613: PPUSH
60614: CALL_OW 272
60618: PUSH
60619: LD_VAR 0 8
60623: PPUSH
60624: LD_INT 4
60626: PPUSH
60627: LD_INT 4
60629: PPUSH
60630: CALL_OW 273
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_VAR 0 7
60643: PPUSH
60644: LD_INT 5
60646: PPUSH
60647: LD_INT 4
60649: PPUSH
60650: CALL_OW 272
60654: PUSH
60655: LD_VAR 0 8
60659: PPUSH
60660: LD_INT 5
60662: PPUSH
60663: LD_INT 4
60665: PPUSH
60666: CALL_OW 273
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: ST_TO_ADDR
// for i = tmp downto 1 do
60683: LD_ADDR_VAR 0 4
60687: PUSH
60688: DOUBLE
60689: LD_VAR 0 6
60693: INC
60694: ST_TO_ADDR
60695: LD_INT 1
60697: PUSH
60698: FOR_DOWNTO
60699: IFFALSE 60800
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60701: LD_VAR 0 6
60705: PUSH
60706: LD_VAR 0 4
60710: ARRAY
60711: PUSH
60712: LD_INT 1
60714: ARRAY
60715: PPUSH
60716: LD_VAR 0 6
60720: PUSH
60721: LD_VAR 0 4
60725: ARRAY
60726: PUSH
60727: LD_INT 2
60729: ARRAY
60730: PPUSH
60731: CALL_OW 488
60735: NOT
60736: PUSH
60737: LD_VAR 0 6
60741: PUSH
60742: LD_VAR 0 4
60746: ARRAY
60747: PUSH
60748: LD_INT 1
60750: ARRAY
60751: PPUSH
60752: LD_VAR 0 6
60756: PUSH
60757: LD_VAR 0 4
60761: ARRAY
60762: PUSH
60763: LD_INT 2
60765: ARRAY
60766: PPUSH
60767: CALL_OW 428
60771: PUSH
60772: LD_INT 0
60774: NONEQUAL
60775: OR
60776: IFFALSE 60798
// tmp := Delete ( tmp , i ) ;
60778: LD_ADDR_VAR 0 6
60782: PUSH
60783: LD_VAR 0 6
60787: PPUSH
60788: LD_VAR 0 4
60792: PPUSH
60793: CALL_OW 3
60797: ST_TO_ADDR
60798: GO 60698
60800: POP
60801: POP
// j := GetClosestHex ( unit , tmp ) ;
60802: LD_ADDR_VAR 0 5
60806: PUSH
60807: LD_VAR 0 1
60811: PPUSH
60812: LD_VAR 0 6
60816: PPUSH
60817: CALL 60102 0 2
60821: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60822: LD_VAR 0 1
60826: PPUSH
60827: LD_VAR 0 5
60831: PUSH
60832: LD_INT 1
60834: ARRAY
60835: PPUSH
60836: LD_VAR 0 5
60840: PUSH
60841: LD_INT 2
60843: ARRAY
60844: PPUSH
60845: CALL_OW 111
// end ;
60849: LD_VAR 0 3
60853: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60854: LD_INT 0
60856: PPUSH
60857: PPUSH
60858: PPUSH
// uc_side = 0 ;
60859: LD_ADDR_OWVAR 20
60863: PUSH
60864: LD_INT 0
60866: ST_TO_ADDR
// uc_nation = 0 ;
60867: LD_ADDR_OWVAR 21
60871: PUSH
60872: LD_INT 0
60874: ST_TO_ADDR
// InitHc ;
60875: CALL_OW 19
// InitVc ;
60879: CALL_OW 20
// if mastodonts then
60883: LD_VAR 0 6
60887: IFFALSE 60954
// for i = 1 to mastodonts do
60889: LD_ADDR_VAR 0 11
60893: PUSH
60894: DOUBLE
60895: LD_INT 1
60897: DEC
60898: ST_TO_ADDR
60899: LD_VAR 0 6
60903: PUSH
60904: FOR_TO
60905: IFFALSE 60952
// begin vc_chassis := 31 ;
60907: LD_ADDR_OWVAR 37
60911: PUSH
60912: LD_INT 31
60914: ST_TO_ADDR
// vc_control := control_rider ;
60915: LD_ADDR_OWVAR 38
60919: PUSH
60920: LD_INT 4
60922: ST_TO_ADDR
// animal := CreateVehicle ;
60923: LD_ADDR_VAR 0 12
60927: PUSH
60928: CALL_OW 45
60932: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60933: LD_VAR 0 12
60937: PPUSH
60938: LD_VAR 0 8
60942: PPUSH
60943: LD_INT 0
60945: PPUSH
60946: CALL 63023 0 3
// end ;
60950: GO 60904
60952: POP
60953: POP
// if horses then
60954: LD_VAR 0 5
60958: IFFALSE 61025
// for i = 1 to horses do
60960: LD_ADDR_VAR 0 11
60964: PUSH
60965: DOUBLE
60966: LD_INT 1
60968: DEC
60969: ST_TO_ADDR
60970: LD_VAR 0 5
60974: PUSH
60975: FOR_TO
60976: IFFALSE 61023
// begin hc_class := 21 ;
60978: LD_ADDR_OWVAR 28
60982: PUSH
60983: LD_INT 21
60985: ST_TO_ADDR
// hc_gallery :=  ;
60986: LD_ADDR_OWVAR 33
60990: PUSH
60991: LD_STRING 
60993: ST_TO_ADDR
// animal := CreateHuman ;
60994: LD_ADDR_VAR 0 12
60998: PUSH
60999: CALL_OW 44
61003: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61004: LD_VAR 0 12
61008: PPUSH
61009: LD_VAR 0 8
61013: PPUSH
61014: LD_INT 0
61016: PPUSH
61017: CALL 63023 0 3
// end ;
61021: GO 60975
61023: POP
61024: POP
// if birds then
61025: LD_VAR 0 1
61029: IFFALSE 61096
// for i = 1 to birds do
61031: LD_ADDR_VAR 0 11
61035: PUSH
61036: DOUBLE
61037: LD_INT 1
61039: DEC
61040: ST_TO_ADDR
61041: LD_VAR 0 1
61045: PUSH
61046: FOR_TO
61047: IFFALSE 61094
// begin hc_class = 18 ;
61049: LD_ADDR_OWVAR 28
61053: PUSH
61054: LD_INT 18
61056: ST_TO_ADDR
// hc_gallery =  ;
61057: LD_ADDR_OWVAR 33
61061: PUSH
61062: LD_STRING 
61064: ST_TO_ADDR
// animal := CreateHuman ;
61065: LD_ADDR_VAR 0 12
61069: PUSH
61070: CALL_OW 44
61074: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61075: LD_VAR 0 12
61079: PPUSH
61080: LD_VAR 0 8
61084: PPUSH
61085: LD_INT 0
61087: PPUSH
61088: CALL 63023 0 3
// end ;
61092: GO 61046
61094: POP
61095: POP
// if tigers then
61096: LD_VAR 0 2
61100: IFFALSE 61184
// for i = 1 to tigers do
61102: LD_ADDR_VAR 0 11
61106: PUSH
61107: DOUBLE
61108: LD_INT 1
61110: DEC
61111: ST_TO_ADDR
61112: LD_VAR 0 2
61116: PUSH
61117: FOR_TO
61118: IFFALSE 61182
// begin hc_class = class_tiger ;
61120: LD_ADDR_OWVAR 28
61124: PUSH
61125: LD_INT 14
61127: ST_TO_ADDR
// hc_gallery =  ;
61128: LD_ADDR_OWVAR 33
61132: PUSH
61133: LD_STRING 
61135: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61136: LD_ADDR_OWVAR 35
61140: PUSH
61141: LD_INT 7
61143: NEG
61144: PPUSH
61145: LD_INT 7
61147: PPUSH
61148: CALL_OW 12
61152: ST_TO_ADDR
// animal := CreateHuman ;
61153: LD_ADDR_VAR 0 12
61157: PUSH
61158: CALL_OW 44
61162: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61163: LD_VAR 0 12
61167: PPUSH
61168: LD_VAR 0 8
61172: PPUSH
61173: LD_INT 0
61175: PPUSH
61176: CALL 63023 0 3
// end ;
61180: GO 61117
61182: POP
61183: POP
// if apemans then
61184: LD_VAR 0 3
61188: IFFALSE 61311
// for i = 1 to apemans do
61190: LD_ADDR_VAR 0 11
61194: PUSH
61195: DOUBLE
61196: LD_INT 1
61198: DEC
61199: ST_TO_ADDR
61200: LD_VAR 0 3
61204: PUSH
61205: FOR_TO
61206: IFFALSE 61309
// begin hc_class = class_apeman ;
61208: LD_ADDR_OWVAR 28
61212: PUSH
61213: LD_INT 12
61215: ST_TO_ADDR
// hc_gallery =  ;
61216: LD_ADDR_OWVAR 33
61220: PUSH
61221: LD_STRING 
61223: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
61224: LD_ADDR_OWVAR 35
61228: PUSH
61229: LD_INT 5
61231: NEG
61232: PPUSH
61233: LD_INT 5
61235: PPUSH
61236: CALL_OW 12
61240: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61241: LD_ADDR_OWVAR 31
61245: PUSH
61246: LD_INT 1
61248: PPUSH
61249: LD_INT 3
61251: PPUSH
61252: CALL_OW 12
61256: PUSH
61257: LD_INT 1
61259: PPUSH
61260: LD_INT 3
61262: PPUSH
61263: CALL_OW 12
61267: PUSH
61268: LD_INT 0
61270: PUSH
61271: LD_INT 0
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: ST_TO_ADDR
// animal := CreateHuman ;
61280: LD_ADDR_VAR 0 12
61284: PUSH
61285: CALL_OW 44
61289: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61290: LD_VAR 0 12
61294: PPUSH
61295: LD_VAR 0 8
61299: PPUSH
61300: LD_INT 0
61302: PPUSH
61303: CALL 63023 0 3
// end ;
61307: GO 61205
61309: POP
61310: POP
// if enchidnas then
61311: LD_VAR 0 4
61315: IFFALSE 61382
// for i = 1 to enchidnas do
61317: LD_ADDR_VAR 0 11
61321: PUSH
61322: DOUBLE
61323: LD_INT 1
61325: DEC
61326: ST_TO_ADDR
61327: LD_VAR 0 4
61331: PUSH
61332: FOR_TO
61333: IFFALSE 61380
// begin hc_class = 13 ;
61335: LD_ADDR_OWVAR 28
61339: PUSH
61340: LD_INT 13
61342: ST_TO_ADDR
// hc_gallery =  ;
61343: LD_ADDR_OWVAR 33
61347: PUSH
61348: LD_STRING 
61350: ST_TO_ADDR
// animal := CreateHuman ;
61351: LD_ADDR_VAR 0 12
61355: PUSH
61356: CALL_OW 44
61360: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61361: LD_VAR 0 12
61365: PPUSH
61366: LD_VAR 0 8
61370: PPUSH
61371: LD_INT 0
61373: PPUSH
61374: CALL 63023 0 3
// end ;
61378: GO 61332
61380: POP
61381: POP
// if fishes then
61382: LD_VAR 0 7
61386: IFFALSE 61453
// for i = 1 to fishes do
61388: LD_ADDR_VAR 0 11
61392: PUSH
61393: DOUBLE
61394: LD_INT 1
61396: DEC
61397: ST_TO_ADDR
61398: LD_VAR 0 7
61402: PUSH
61403: FOR_TO
61404: IFFALSE 61451
// begin hc_class = 20 ;
61406: LD_ADDR_OWVAR 28
61410: PUSH
61411: LD_INT 20
61413: ST_TO_ADDR
// hc_gallery =  ;
61414: LD_ADDR_OWVAR 33
61418: PUSH
61419: LD_STRING 
61421: ST_TO_ADDR
// animal := CreateHuman ;
61422: LD_ADDR_VAR 0 12
61426: PUSH
61427: CALL_OW 44
61431: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61432: LD_VAR 0 12
61436: PPUSH
61437: LD_VAR 0 9
61441: PPUSH
61442: LD_INT 0
61444: PPUSH
61445: CALL 63023 0 3
// end ;
61449: GO 61403
61451: POP
61452: POP
// end ;
61453: LD_VAR 0 10
61457: RET
// export function WantHeal ( sci , unit ) ; begin
61458: LD_INT 0
61460: PPUSH
// if GetTaskList ( sci ) > 0 then
61461: LD_VAR 0 1
61465: PPUSH
61466: CALL_OW 437
61470: PUSH
61471: LD_INT 0
61473: GREATER
61474: IFFALSE 61544
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61476: LD_VAR 0 1
61480: PPUSH
61481: CALL_OW 437
61485: PUSH
61486: LD_INT 1
61488: ARRAY
61489: PUSH
61490: LD_INT 1
61492: ARRAY
61493: PUSH
61494: LD_STRING l
61496: EQUAL
61497: PUSH
61498: LD_VAR 0 1
61502: PPUSH
61503: CALL_OW 437
61507: PUSH
61508: LD_INT 1
61510: ARRAY
61511: PUSH
61512: LD_INT 4
61514: ARRAY
61515: PUSH
61516: LD_VAR 0 2
61520: EQUAL
61521: AND
61522: IFFALSE 61534
// result := true else
61524: LD_ADDR_VAR 0 3
61528: PUSH
61529: LD_INT 1
61531: ST_TO_ADDR
61532: GO 61542
// result := false ;
61534: LD_ADDR_VAR 0 3
61538: PUSH
61539: LD_INT 0
61541: ST_TO_ADDR
// end else
61542: GO 61552
// result := false ;
61544: LD_ADDR_VAR 0 3
61548: PUSH
61549: LD_INT 0
61551: ST_TO_ADDR
// end ;
61552: LD_VAR 0 3
61556: RET
// export function HealTarget ( sci ) ; begin
61557: LD_INT 0
61559: PPUSH
// if not sci then
61560: LD_VAR 0 1
61564: NOT
61565: IFFALSE 61569
// exit ;
61567: GO 61634
// result := 0 ;
61569: LD_ADDR_VAR 0 2
61573: PUSH
61574: LD_INT 0
61576: ST_TO_ADDR
// if GetTaskList ( sci ) then
61577: LD_VAR 0 1
61581: PPUSH
61582: CALL_OW 437
61586: IFFALSE 61634
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61588: LD_VAR 0 1
61592: PPUSH
61593: CALL_OW 437
61597: PUSH
61598: LD_INT 1
61600: ARRAY
61601: PUSH
61602: LD_INT 1
61604: ARRAY
61605: PUSH
61606: LD_STRING l
61608: EQUAL
61609: IFFALSE 61634
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61611: LD_ADDR_VAR 0 2
61615: PUSH
61616: LD_VAR 0 1
61620: PPUSH
61621: CALL_OW 437
61625: PUSH
61626: LD_INT 1
61628: ARRAY
61629: PUSH
61630: LD_INT 4
61632: ARRAY
61633: ST_TO_ADDR
// end ;
61634: LD_VAR 0 2
61638: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61639: LD_INT 0
61641: PPUSH
61642: PPUSH
61643: PPUSH
61644: PPUSH
// if not base_units then
61645: LD_VAR 0 1
61649: NOT
61650: IFFALSE 61654
// exit ;
61652: GO 61741
// result := false ;
61654: LD_ADDR_VAR 0 2
61658: PUSH
61659: LD_INT 0
61661: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61662: LD_ADDR_VAR 0 5
61666: PUSH
61667: LD_VAR 0 1
61671: PPUSH
61672: LD_INT 21
61674: PUSH
61675: LD_INT 3
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PPUSH
61682: CALL_OW 72
61686: ST_TO_ADDR
// if not tmp then
61687: LD_VAR 0 5
61691: NOT
61692: IFFALSE 61696
// exit ;
61694: GO 61741
// for i in tmp do
61696: LD_ADDR_VAR 0 3
61700: PUSH
61701: LD_VAR 0 5
61705: PUSH
61706: FOR_IN
61707: IFFALSE 61739
// begin result := EnemyInRange ( i , 22 ) ;
61709: LD_ADDR_VAR 0 2
61713: PUSH
61714: LD_VAR 0 3
61718: PPUSH
61719: LD_INT 22
61721: PPUSH
61722: CALL 59977 0 2
61726: ST_TO_ADDR
// if result then
61727: LD_VAR 0 2
61731: IFFALSE 61737
// exit ;
61733: POP
61734: POP
61735: GO 61741
// end ;
61737: GO 61706
61739: POP
61740: POP
// end ;
61741: LD_VAR 0 2
61745: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
61746: LD_INT 0
61748: PPUSH
61749: PPUSH
// if not units then
61750: LD_VAR 0 1
61754: NOT
61755: IFFALSE 61759
// exit ;
61757: GO 61829
// result := [ ] ;
61759: LD_ADDR_VAR 0 3
61763: PUSH
61764: EMPTY
61765: ST_TO_ADDR
// for i in units do
61766: LD_ADDR_VAR 0 4
61770: PUSH
61771: LD_VAR 0 1
61775: PUSH
61776: FOR_IN
61777: IFFALSE 61827
// if GetTag ( i ) = tag then
61779: LD_VAR 0 4
61783: PPUSH
61784: CALL_OW 110
61788: PUSH
61789: LD_VAR 0 2
61793: EQUAL
61794: IFFALSE 61825
// result := Insert ( result , result + 1 , i ) ;
61796: LD_ADDR_VAR 0 3
61800: PUSH
61801: LD_VAR 0 3
61805: PPUSH
61806: LD_VAR 0 3
61810: PUSH
61811: LD_INT 1
61813: PLUS
61814: PPUSH
61815: LD_VAR 0 4
61819: PPUSH
61820: CALL_OW 2
61824: ST_TO_ADDR
61825: GO 61776
61827: POP
61828: POP
// end ;
61829: LD_VAR 0 3
61833: RET
// export function IsDriver ( un ) ; begin
61834: LD_INT 0
61836: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61837: LD_ADDR_VAR 0 2
61841: PUSH
61842: LD_VAR 0 1
61846: PUSH
61847: LD_INT 55
61849: PUSH
61850: EMPTY
61851: LIST
61852: PPUSH
61853: CALL_OW 69
61857: IN
61858: ST_TO_ADDR
// end ;
61859: LD_VAR 0 2
61863: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61864: LD_INT 0
61866: PPUSH
61867: PPUSH
// list := [ ] ;
61868: LD_ADDR_VAR 0 5
61872: PUSH
61873: EMPTY
61874: ST_TO_ADDR
// case d of 0 :
61875: LD_VAR 0 3
61879: PUSH
61880: LD_INT 0
61882: DOUBLE
61883: EQUAL
61884: IFTRUE 61888
61886: GO 62021
61888: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61889: LD_ADDR_VAR 0 5
61893: PUSH
61894: LD_VAR 0 1
61898: PUSH
61899: LD_INT 4
61901: MINUS
61902: PUSH
61903: LD_VAR 0 2
61907: PUSH
61908: LD_INT 4
61910: MINUS
61911: PUSH
61912: LD_INT 2
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: LIST
61919: PUSH
61920: LD_VAR 0 1
61924: PUSH
61925: LD_INT 3
61927: MINUS
61928: PUSH
61929: LD_VAR 0 2
61933: PUSH
61934: LD_INT 1
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: LIST
61941: PUSH
61942: LD_VAR 0 1
61946: PUSH
61947: LD_INT 4
61949: PLUS
61950: PUSH
61951: LD_VAR 0 2
61955: PUSH
61956: LD_INT 4
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: LIST
61963: PUSH
61964: LD_VAR 0 1
61968: PUSH
61969: LD_INT 3
61971: PLUS
61972: PUSH
61973: LD_VAR 0 2
61977: PUSH
61978: LD_INT 3
61980: PLUS
61981: PUSH
61982: LD_INT 5
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: LIST
61989: PUSH
61990: LD_VAR 0 1
61994: PUSH
61995: LD_VAR 0 2
61999: PUSH
62000: LD_INT 4
62002: PLUS
62003: PUSH
62004: LD_INT 0
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: LIST
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: ST_TO_ADDR
// end ; 1 :
62019: GO 62719
62021: LD_INT 1
62023: DOUBLE
62024: EQUAL
62025: IFTRUE 62029
62027: GO 62162
62029: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62030: LD_ADDR_VAR 0 5
62034: PUSH
62035: LD_VAR 0 1
62039: PUSH
62040: LD_VAR 0 2
62044: PUSH
62045: LD_INT 4
62047: MINUS
62048: PUSH
62049: LD_INT 3
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: LIST
62056: PUSH
62057: LD_VAR 0 1
62061: PUSH
62062: LD_INT 3
62064: MINUS
62065: PUSH
62066: LD_VAR 0 2
62070: PUSH
62071: LD_INT 3
62073: MINUS
62074: PUSH
62075: LD_INT 2
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: LIST
62082: PUSH
62083: LD_VAR 0 1
62087: PUSH
62088: LD_INT 4
62090: MINUS
62091: PUSH
62092: LD_VAR 0 2
62096: PUSH
62097: LD_INT 1
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: LIST
62104: PUSH
62105: LD_VAR 0 1
62109: PUSH
62110: LD_VAR 0 2
62114: PUSH
62115: LD_INT 3
62117: PLUS
62118: PUSH
62119: LD_INT 0
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: LIST
62126: PUSH
62127: LD_VAR 0 1
62131: PUSH
62132: LD_INT 4
62134: PLUS
62135: PUSH
62136: LD_VAR 0 2
62140: PUSH
62141: LD_INT 4
62143: PLUS
62144: PUSH
62145: LD_INT 5
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: LIST
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: ST_TO_ADDR
// end ; 2 :
62160: GO 62719
62162: LD_INT 2
62164: DOUBLE
62165: EQUAL
62166: IFTRUE 62170
62168: GO 62299
62170: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62171: LD_ADDR_VAR 0 5
62175: PUSH
62176: LD_VAR 0 1
62180: PUSH
62181: LD_VAR 0 2
62185: PUSH
62186: LD_INT 3
62188: MINUS
62189: PUSH
62190: LD_INT 3
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: LIST
62197: PUSH
62198: LD_VAR 0 1
62202: PUSH
62203: LD_INT 4
62205: PLUS
62206: PUSH
62207: LD_VAR 0 2
62211: PUSH
62212: LD_INT 4
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: LIST
62219: PUSH
62220: LD_VAR 0 1
62224: PUSH
62225: LD_VAR 0 2
62229: PUSH
62230: LD_INT 4
62232: PLUS
62233: PUSH
62234: LD_INT 0
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: LIST
62241: PUSH
62242: LD_VAR 0 1
62246: PUSH
62247: LD_INT 3
62249: MINUS
62250: PUSH
62251: LD_VAR 0 2
62255: PUSH
62256: LD_INT 1
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: LIST
62263: PUSH
62264: LD_VAR 0 1
62268: PUSH
62269: LD_INT 4
62271: MINUS
62272: PUSH
62273: LD_VAR 0 2
62277: PUSH
62278: LD_INT 4
62280: MINUS
62281: PUSH
62282: LD_INT 2
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: LIST
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: ST_TO_ADDR
// end ; 3 :
62297: GO 62719
62299: LD_INT 3
62301: DOUBLE
62302: EQUAL
62303: IFTRUE 62307
62305: GO 62440
62307: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62308: LD_ADDR_VAR 0 5
62312: PUSH
62313: LD_VAR 0 1
62317: PUSH
62318: LD_INT 3
62320: PLUS
62321: PUSH
62322: LD_VAR 0 2
62326: PUSH
62327: LD_INT 4
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: LIST
62334: PUSH
62335: LD_VAR 0 1
62339: PUSH
62340: LD_INT 4
62342: PLUS
62343: PUSH
62344: LD_VAR 0 2
62348: PUSH
62349: LD_INT 4
62351: PLUS
62352: PUSH
62353: LD_INT 5
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: LIST
62360: PUSH
62361: LD_VAR 0 1
62365: PUSH
62366: LD_INT 4
62368: MINUS
62369: PUSH
62370: LD_VAR 0 2
62374: PUSH
62375: LD_INT 1
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: LIST
62382: PUSH
62383: LD_VAR 0 1
62387: PUSH
62388: LD_VAR 0 2
62392: PUSH
62393: LD_INT 4
62395: MINUS
62396: PUSH
62397: LD_INT 3
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: LIST
62404: PUSH
62405: LD_VAR 0 1
62409: PUSH
62410: LD_INT 3
62412: MINUS
62413: PUSH
62414: LD_VAR 0 2
62418: PUSH
62419: LD_INT 3
62421: MINUS
62422: PUSH
62423: LD_INT 2
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: LIST
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: ST_TO_ADDR
// end ; 4 :
62438: GO 62719
62440: LD_INT 4
62442: DOUBLE
62443: EQUAL
62444: IFTRUE 62448
62446: GO 62581
62448: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62449: LD_ADDR_VAR 0 5
62453: PUSH
62454: LD_VAR 0 1
62458: PUSH
62459: LD_VAR 0 2
62463: PUSH
62464: LD_INT 4
62466: PLUS
62467: PUSH
62468: LD_INT 0
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: LIST
62475: PUSH
62476: LD_VAR 0 1
62480: PUSH
62481: LD_INT 3
62483: PLUS
62484: PUSH
62485: LD_VAR 0 2
62489: PUSH
62490: LD_INT 3
62492: PLUS
62493: PUSH
62494: LD_INT 5
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: LIST
62501: PUSH
62502: LD_VAR 0 1
62506: PUSH
62507: LD_INT 4
62509: PLUS
62510: PUSH
62511: LD_VAR 0 2
62515: PUSH
62516: LD_INT 4
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: LIST
62523: PUSH
62524: LD_VAR 0 1
62528: PUSH
62529: LD_VAR 0 2
62533: PUSH
62534: LD_INT 3
62536: MINUS
62537: PUSH
62538: LD_INT 3
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: LIST
62545: PUSH
62546: LD_VAR 0 1
62550: PUSH
62551: LD_INT 4
62553: MINUS
62554: PUSH
62555: LD_VAR 0 2
62559: PUSH
62560: LD_INT 4
62562: MINUS
62563: PUSH
62564: LD_INT 2
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: LIST
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: ST_TO_ADDR
// end ; 5 :
62579: GO 62719
62581: LD_INT 5
62583: DOUBLE
62584: EQUAL
62585: IFTRUE 62589
62587: GO 62718
62589: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62590: LD_ADDR_VAR 0 5
62594: PUSH
62595: LD_VAR 0 1
62599: PUSH
62600: LD_INT 4
62602: MINUS
62603: PUSH
62604: LD_VAR 0 2
62608: PUSH
62609: LD_INT 1
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: LIST
62616: PUSH
62617: LD_VAR 0 1
62621: PUSH
62622: LD_VAR 0 2
62626: PUSH
62627: LD_INT 4
62629: MINUS
62630: PUSH
62631: LD_INT 3
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: LIST
62638: PUSH
62639: LD_VAR 0 1
62643: PUSH
62644: LD_INT 4
62646: PLUS
62647: PUSH
62648: LD_VAR 0 2
62652: PUSH
62653: LD_INT 4
62655: PLUS
62656: PUSH
62657: LD_INT 5
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: LIST
62664: PUSH
62665: LD_VAR 0 1
62669: PUSH
62670: LD_INT 3
62672: PLUS
62673: PUSH
62674: LD_VAR 0 2
62678: PUSH
62679: LD_INT 4
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: LIST
62686: PUSH
62687: LD_VAR 0 1
62691: PUSH
62692: LD_VAR 0 2
62696: PUSH
62697: LD_INT 3
62699: PLUS
62700: PUSH
62701: LD_INT 0
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: LIST
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: ST_TO_ADDR
// end ; end ;
62716: GO 62719
62718: POP
// result := list ;
62719: LD_ADDR_VAR 0 4
62723: PUSH
62724: LD_VAR 0 5
62728: ST_TO_ADDR
// end ;
62729: LD_VAR 0 4
62733: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62734: LD_INT 0
62736: PPUSH
62737: PPUSH
62738: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62739: LD_VAR 0 1
62743: NOT
62744: PUSH
62745: LD_VAR 0 2
62749: PUSH
62750: LD_INT 1
62752: PUSH
62753: LD_INT 2
62755: PUSH
62756: LD_INT 3
62758: PUSH
62759: LD_INT 4
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: IN
62768: NOT
62769: OR
62770: IFFALSE 62774
// exit ;
62772: GO 62866
// tmp := [ ] ;
62774: LD_ADDR_VAR 0 5
62778: PUSH
62779: EMPTY
62780: ST_TO_ADDR
// for i in units do
62781: LD_ADDR_VAR 0 4
62785: PUSH
62786: LD_VAR 0 1
62790: PUSH
62791: FOR_IN
62792: IFFALSE 62835
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62794: LD_ADDR_VAR 0 5
62798: PUSH
62799: LD_VAR 0 5
62803: PPUSH
62804: LD_VAR 0 5
62808: PUSH
62809: LD_INT 1
62811: PLUS
62812: PPUSH
62813: LD_VAR 0 4
62817: PPUSH
62818: LD_VAR 0 2
62822: PPUSH
62823: CALL_OW 259
62827: PPUSH
62828: CALL_OW 2
62832: ST_TO_ADDR
62833: GO 62791
62835: POP
62836: POP
// if not tmp then
62837: LD_VAR 0 5
62841: NOT
62842: IFFALSE 62846
// exit ;
62844: GO 62866
// result := SortListByListDesc ( units , tmp ) ;
62846: LD_ADDR_VAR 0 3
62850: PUSH
62851: LD_VAR 0 1
62855: PPUSH
62856: LD_VAR 0 5
62860: PPUSH
62861: CALL_OW 77
62865: ST_TO_ADDR
// end ;
62866: LD_VAR 0 3
62870: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62871: LD_INT 0
62873: PPUSH
62874: PPUSH
62875: PPUSH
// x := GetX ( building ) ;
62876: LD_ADDR_VAR 0 4
62880: PUSH
62881: LD_VAR 0 2
62885: PPUSH
62886: CALL_OW 250
62890: ST_TO_ADDR
// y := GetY ( building ) ;
62891: LD_ADDR_VAR 0 5
62895: PUSH
62896: LD_VAR 0 2
62900: PPUSH
62901: CALL_OW 251
62905: ST_TO_ADDR
// if GetTaskList ( unit ) then
62906: LD_VAR 0 1
62910: PPUSH
62911: CALL_OW 437
62915: IFFALSE 63010
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62917: LD_STRING e
62919: PUSH
62920: LD_VAR 0 1
62924: PPUSH
62925: CALL_OW 437
62929: PUSH
62930: LD_INT 1
62932: ARRAY
62933: PUSH
62934: LD_INT 1
62936: ARRAY
62937: EQUAL
62938: PUSH
62939: LD_VAR 0 4
62943: PUSH
62944: LD_VAR 0 1
62948: PPUSH
62949: CALL_OW 437
62953: PUSH
62954: LD_INT 1
62956: ARRAY
62957: PUSH
62958: LD_INT 2
62960: ARRAY
62961: EQUAL
62962: AND
62963: PUSH
62964: LD_VAR 0 5
62968: PUSH
62969: LD_VAR 0 1
62973: PPUSH
62974: CALL_OW 437
62978: PUSH
62979: LD_INT 1
62981: ARRAY
62982: PUSH
62983: LD_INT 3
62985: ARRAY
62986: EQUAL
62987: AND
62988: IFFALSE 63000
// result := true else
62990: LD_ADDR_VAR 0 3
62994: PUSH
62995: LD_INT 1
62997: ST_TO_ADDR
62998: GO 63008
// result := false ;
63000: LD_ADDR_VAR 0 3
63004: PUSH
63005: LD_INT 0
63007: ST_TO_ADDR
// end else
63008: GO 63018
// result := false ;
63010: LD_ADDR_VAR 0 3
63014: PUSH
63015: LD_INT 0
63017: ST_TO_ADDR
// end ;
63018: LD_VAR 0 3
63022: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63023: LD_INT 0
63025: PPUSH
63026: PPUSH
63027: PPUSH
63028: PPUSH
// if not unit or not area then
63029: LD_VAR 0 1
63033: NOT
63034: PUSH
63035: LD_VAR 0 2
63039: NOT
63040: OR
63041: IFFALSE 63045
// exit ;
63043: GO 63209
// tmp := AreaToList ( area , i ) ;
63045: LD_ADDR_VAR 0 6
63049: PUSH
63050: LD_VAR 0 2
63054: PPUSH
63055: LD_VAR 0 5
63059: PPUSH
63060: CALL_OW 517
63064: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63065: LD_ADDR_VAR 0 5
63069: PUSH
63070: DOUBLE
63071: LD_INT 1
63073: DEC
63074: ST_TO_ADDR
63075: LD_VAR 0 6
63079: PUSH
63080: LD_INT 1
63082: ARRAY
63083: PUSH
63084: FOR_TO
63085: IFFALSE 63207
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63087: LD_ADDR_VAR 0 7
63091: PUSH
63092: LD_VAR 0 6
63096: PUSH
63097: LD_INT 1
63099: ARRAY
63100: PUSH
63101: LD_VAR 0 5
63105: ARRAY
63106: PUSH
63107: LD_VAR 0 6
63111: PUSH
63112: LD_INT 2
63114: ARRAY
63115: PUSH
63116: LD_VAR 0 5
63120: ARRAY
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63126: LD_VAR 0 7
63130: PUSH
63131: LD_INT 1
63133: ARRAY
63134: PPUSH
63135: LD_VAR 0 7
63139: PUSH
63140: LD_INT 2
63142: ARRAY
63143: PPUSH
63144: CALL_OW 428
63148: PUSH
63149: LD_INT 0
63151: EQUAL
63152: IFFALSE 63205
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63154: LD_VAR 0 1
63158: PPUSH
63159: LD_VAR 0 7
63163: PUSH
63164: LD_INT 1
63166: ARRAY
63167: PPUSH
63168: LD_VAR 0 7
63172: PUSH
63173: LD_INT 2
63175: ARRAY
63176: PPUSH
63177: LD_VAR 0 3
63181: PPUSH
63182: CALL_OW 48
// result := IsPlaced ( unit ) ;
63186: LD_ADDR_VAR 0 4
63190: PUSH
63191: LD_VAR 0 1
63195: PPUSH
63196: CALL_OW 305
63200: ST_TO_ADDR
// exit ;
63201: POP
63202: POP
63203: GO 63209
// end ; end ;
63205: GO 63084
63207: POP
63208: POP
// end ;
63209: LD_VAR 0 4
63213: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63214: LD_INT 0
63216: PPUSH
63217: PPUSH
63218: PPUSH
// if not side or side > 8 then
63219: LD_VAR 0 1
63223: NOT
63224: PUSH
63225: LD_VAR 0 1
63229: PUSH
63230: LD_INT 8
63232: GREATER
63233: OR
63234: IFFALSE 63238
// exit ;
63236: GO 63425
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63238: LD_ADDR_VAR 0 4
63242: PUSH
63243: LD_INT 22
63245: PUSH
63246: LD_VAR 0 1
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 21
63257: PUSH
63258: LD_INT 3
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PPUSH
63269: CALL_OW 69
63273: ST_TO_ADDR
// if not tmp then
63274: LD_VAR 0 4
63278: NOT
63279: IFFALSE 63283
// exit ;
63281: GO 63425
// enable_addtolog := true ;
63283: LD_ADDR_OWVAR 81
63287: PUSH
63288: LD_INT 1
63290: ST_TO_ADDR
// AddToLog ( [ ) ;
63291: LD_STRING [
63293: PPUSH
63294: CALL_OW 561
// for i in tmp do
63298: LD_ADDR_VAR 0 3
63302: PUSH
63303: LD_VAR 0 4
63307: PUSH
63308: FOR_IN
63309: IFFALSE 63416
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63311: LD_STRING [
63313: PUSH
63314: LD_VAR 0 3
63318: PPUSH
63319: CALL_OW 266
63323: STR
63324: PUSH
63325: LD_STRING , 
63327: STR
63328: PUSH
63329: LD_VAR 0 3
63333: PPUSH
63334: CALL_OW 250
63338: STR
63339: PUSH
63340: LD_STRING , 
63342: STR
63343: PUSH
63344: LD_VAR 0 3
63348: PPUSH
63349: CALL_OW 251
63353: STR
63354: PUSH
63355: LD_STRING , 
63357: STR
63358: PUSH
63359: LD_VAR 0 3
63363: PPUSH
63364: CALL_OW 254
63368: STR
63369: PUSH
63370: LD_STRING , 
63372: STR
63373: PUSH
63374: LD_VAR 0 3
63378: PPUSH
63379: LD_INT 1
63381: PPUSH
63382: CALL_OW 268
63386: STR
63387: PUSH
63388: LD_STRING , 
63390: STR
63391: PUSH
63392: LD_VAR 0 3
63396: PPUSH
63397: LD_INT 2
63399: PPUSH
63400: CALL_OW 268
63404: STR
63405: PUSH
63406: LD_STRING ],
63408: STR
63409: PPUSH
63410: CALL_OW 561
// end ;
63414: GO 63308
63416: POP
63417: POP
// AddToLog ( ]; ) ;
63418: LD_STRING ];
63420: PPUSH
63421: CALL_OW 561
// end ;
63425: LD_VAR 0 2
63429: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63430: LD_INT 0
63432: PPUSH
63433: PPUSH
63434: PPUSH
63435: PPUSH
63436: PPUSH
// if not area or not rate or not max then
63437: LD_VAR 0 1
63441: NOT
63442: PUSH
63443: LD_VAR 0 2
63447: NOT
63448: OR
63449: PUSH
63450: LD_VAR 0 4
63454: NOT
63455: OR
63456: IFFALSE 63460
// exit ;
63458: GO 63652
// while 1 do
63460: LD_INT 1
63462: IFFALSE 63652
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63464: LD_ADDR_VAR 0 9
63468: PUSH
63469: LD_VAR 0 1
63473: PPUSH
63474: LD_INT 1
63476: PPUSH
63477: CALL_OW 287
63481: PUSH
63482: LD_INT 10
63484: MUL
63485: ST_TO_ADDR
// r := rate / 10 ;
63486: LD_ADDR_VAR 0 7
63490: PUSH
63491: LD_VAR 0 2
63495: PUSH
63496: LD_INT 10
63498: DIVREAL
63499: ST_TO_ADDR
// time := 1 1$00 ;
63500: LD_ADDR_VAR 0 8
63504: PUSH
63505: LD_INT 2100
63507: ST_TO_ADDR
// if amount < min then
63508: LD_VAR 0 9
63512: PUSH
63513: LD_VAR 0 3
63517: LESS
63518: IFFALSE 63536
// r := r * 2 else
63520: LD_ADDR_VAR 0 7
63524: PUSH
63525: LD_VAR 0 7
63529: PUSH
63530: LD_INT 2
63532: MUL
63533: ST_TO_ADDR
63534: GO 63562
// if amount > max then
63536: LD_VAR 0 9
63540: PUSH
63541: LD_VAR 0 4
63545: GREATER
63546: IFFALSE 63562
// r := r / 2 ;
63548: LD_ADDR_VAR 0 7
63552: PUSH
63553: LD_VAR 0 7
63557: PUSH
63558: LD_INT 2
63560: DIVREAL
63561: ST_TO_ADDR
// time := time / r ;
63562: LD_ADDR_VAR 0 8
63566: PUSH
63567: LD_VAR 0 8
63571: PUSH
63572: LD_VAR 0 7
63576: DIVREAL
63577: ST_TO_ADDR
// if time < 0 then
63578: LD_VAR 0 8
63582: PUSH
63583: LD_INT 0
63585: LESS
63586: IFFALSE 63603
// time := time * - 1 ;
63588: LD_ADDR_VAR 0 8
63592: PUSH
63593: LD_VAR 0 8
63597: PUSH
63598: LD_INT 1
63600: NEG
63601: MUL
63602: ST_TO_ADDR
// wait ( time ) ;
63603: LD_VAR 0 8
63607: PPUSH
63608: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
63612: LD_INT 35
63614: PPUSH
63615: LD_INT 875
63617: PPUSH
63618: CALL_OW 12
63622: PPUSH
63623: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63627: LD_INT 1
63629: PPUSH
63630: LD_INT 5
63632: PPUSH
63633: CALL_OW 12
63637: PPUSH
63638: LD_VAR 0 1
63642: PPUSH
63643: LD_INT 1
63645: PPUSH
63646: CALL_OW 55
// end ;
63650: GO 63460
// end ;
63652: LD_VAR 0 5
63656: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63657: LD_INT 0
63659: PPUSH
63660: PPUSH
63661: PPUSH
63662: PPUSH
63663: PPUSH
63664: PPUSH
63665: PPUSH
63666: PPUSH
// if not turrets or not factories then
63667: LD_VAR 0 1
63671: NOT
63672: PUSH
63673: LD_VAR 0 2
63677: NOT
63678: OR
63679: IFFALSE 63683
// exit ;
63681: GO 63990
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63683: LD_ADDR_VAR 0 10
63687: PUSH
63688: LD_INT 5
63690: PUSH
63691: LD_INT 6
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 2
63700: PUSH
63701: LD_INT 4
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 3
63710: PUSH
63711: LD_INT 5
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 24
63725: PUSH
63726: LD_INT 25
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 23
63735: PUSH
63736: LD_INT 27
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 42
63749: PUSH
63750: LD_INT 43
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 44
63759: PUSH
63760: LD_INT 46
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 45
63769: PUSH
63770: LD_INT 47
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: LIST
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: LIST
63786: ST_TO_ADDR
// result := [ ] ;
63787: LD_ADDR_VAR 0 3
63791: PUSH
63792: EMPTY
63793: ST_TO_ADDR
// for i in turrets do
63794: LD_ADDR_VAR 0 4
63798: PUSH
63799: LD_VAR 0 1
63803: PUSH
63804: FOR_IN
63805: IFFALSE 63988
// begin nat := GetNation ( i ) ;
63807: LD_ADDR_VAR 0 7
63811: PUSH
63812: LD_VAR 0 4
63816: PPUSH
63817: CALL_OW 248
63821: ST_TO_ADDR
// weapon := 0 ;
63822: LD_ADDR_VAR 0 8
63826: PUSH
63827: LD_INT 0
63829: ST_TO_ADDR
// if not nat then
63830: LD_VAR 0 7
63834: NOT
63835: IFFALSE 63839
// continue ;
63837: GO 63804
// for j in list [ nat ] do
63839: LD_ADDR_VAR 0 5
63843: PUSH
63844: LD_VAR 0 10
63848: PUSH
63849: LD_VAR 0 7
63853: ARRAY
63854: PUSH
63855: FOR_IN
63856: IFFALSE 63897
// if GetBWeapon ( i ) = j [ 1 ] then
63858: LD_VAR 0 4
63862: PPUSH
63863: CALL_OW 269
63867: PUSH
63868: LD_VAR 0 5
63872: PUSH
63873: LD_INT 1
63875: ARRAY
63876: EQUAL
63877: IFFALSE 63895
// begin weapon := j [ 2 ] ;
63879: LD_ADDR_VAR 0 8
63883: PUSH
63884: LD_VAR 0 5
63888: PUSH
63889: LD_INT 2
63891: ARRAY
63892: ST_TO_ADDR
// break ;
63893: GO 63897
// end ;
63895: GO 63855
63897: POP
63898: POP
// if not weapon then
63899: LD_VAR 0 8
63903: NOT
63904: IFFALSE 63908
// continue ;
63906: GO 63804
// for k in factories do
63908: LD_ADDR_VAR 0 6
63912: PUSH
63913: LD_VAR 0 2
63917: PUSH
63918: FOR_IN
63919: IFFALSE 63984
// begin weapons := AvailableWeaponList ( k ) ;
63921: LD_ADDR_VAR 0 9
63925: PUSH
63926: LD_VAR 0 6
63930: PPUSH
63931: CALL_OW 478
63935: ST_TO_ADDR
// if not weapons then
63936: LD_VAR 0 9
63940: NOT
63941: IFFALSE 63945
// continue ;
63943: GO 63918
// if weapon in weapons then
63945: LD_VAR 0 8
63949: PUSH
63950: LD_VAR 0 9
63954: IN
63955: IFFALSE 63982
// begin result := [ i , weapon ] ;
63957: LD_ADDR_VAR 0 3
63961: PUSH
63962: LD_VAR 0 4
63966: PUSH
63967: LD_VAR 0 8
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: ST_TO_ADDR
// exit ;
63976: POP
63977: POP
63978: POP
63979: POP
63980: GO 63990
// end ; end ;
63982: GO 63918
63984: POP
63985: POP
// end ;
63986: GO 63804
63988: POP
63989: POP
// end ;
63990: LD_VAR 0 3
63994: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63995: LD_INT 0
63997: PPUSH
// if not side or side > 8 then
63998: LD_VAR 0 3
64002: NOT
64003: PUSH
64004: LD_VAR 0 3
64008: PUSH
64009: LD_INT 8
64011: GREATER
64012: OR
64013: IFFALSE 64017
// exit ;
64015: GO 64076
// if not range then
64017: LD_VAR 0 4
64021: NOT
64022: IFFALSE 64033
// range := - 12 ;
64024: LD_ADDR_VAR 0 4
64028: PUSH
64029: LD_INT 12
64031: NEG
64032: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64033: LD_VAR 0 1
64037: PPUSH
64038: LD_VAR 0 2
64042: PPUSH
64043: LD_VAR 0 3
64047: PPUSH
64048: LD_VAR 0 4
64052: PPUSH
64053: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64057: LD_VAR 0 1
64061: PPUSH
64062: LD_VAR 0 2
64066: PPUSH
64067: LD_VAR 0 3
64071: PPUSH
64072: CALL_OW 331
// end ;
64076: LD_VAR 0 5
64080: RET
// export function Video ( mode ) ; begin
64081: LD_INT 0
64083: PPUSH
// ingame_video = mode ;
64084: LD_ADDR_OWVAR 52
64088: PUSH
64089: LD_VAR 0 1
64093: ST_TO_ADDR
// interface_hidden = mode ;
64094: LD_ADDR_OWVAR 54
64098: PUSH
64099: LD_VAR 0 1
64103: ST_TO_ADDR
// end ;
64104: LD_VAR 0 2
64108: RET
// export function Join ( array , element ) ; begin
64109: LD_INT 0
64111: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64112: LD_ADDR_VAR 0 3
64116: PUSH
64117: LD_VAR 0 1
64121: PPUSH
64122: LD_VAR 0 1
64126: PUSH
64127: LD_INT 1
64129: PLUS
64130: PPUSH
64131: LD_VAR 0 2
64135: PPUSH
64136: CALL_OW 1
64140: ST_TO_ADDR
// end ;
64141: LD_VAR 0 3
64145: RET
// export function JoinUnion ( array , element ) ; begin
64146: LD_INT 0
64148: PPUSH
// result := array union element ;
64149: LD_ADDR_VAR 0 3
64153: PUSH
64154: LD_VAR 0 1
64158: PUSH
64159: LD_VAR 0 2
64163: UNION
64164: ST_TO_ADDR
// end ;
64165: LD_VAR 0 3
64169: RET
// export function GetBehemoths ( side ) ; begin
64170: LD_INT 0
64172: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64173: LD_ADDR_VAR 0 2
64177: PUSH
64178: LD_INT 22
64180: PUSH
64181: LD_VAR 0 1
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 31
64192: PUSH
64193: LD_INT 25
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PPUSH
64204: CALL_OW 69
64208: ST_TO_ADDR
// end ;
64209: LD_VAR 0 2
64213: RET
// export function Shuffle ( array ) ; var i , index ; begin
64214: LD_INT 0
64216: PPUSH
64217: PPUSH
64218: PPUSH
// result := [ ] ;
64219: LD_ADDR_VAR 0 2
64223: PUSH
64224: EMPTY
64225: ST_TO_ADDR
// if not array then
64226: LD_VAR 0 1
64230: NOT
64231: IFFALSE 64235
// exit ;
64233: GO 64334
// Randomize ;
64235: CALL_OW 10
// for i = array downto 1 do
64239: LD_ADDR_VAR 0 3
64243: PUSH
64244: DOUBLE
64245: LD_VAR 0 1
64249: INC
64250: ST_TO_ADDR
64251: LD_INT 1
64253: PUSH
64254: FOR_DOWNTO
64255: IFFALSE 64332
// begin index := rand ( 1 , array ) ;
64257: LD_ADDR_VAR 0 4
64261: PUSH
64262: LD_INT 1
64264: PPUSH
64265: LD_VAR 0 1
64269: PPUSH
64270: CALL_OW 12
64274: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64275: LD_ADDR_VAR 0 2
64279: PUSH
64280: LD_VAR 0 2
64284: PPUSH
64285: LD_VAR 0 2
64289: PUSH
64290: LD_INT 1
64292: PLUS
64293: PPUSH
64294: LD_VAR 0 1
64298: PUSH
64299: LD_VAR 0 4
64303: ARRAY
64304: PPUSH
64305: CALL_OW 2
64309: ST_TO_ADDR
// array := Delete ( array , index ) ;
64310: LD_ADDR_VAR 0 1
64314: PUSH
64315: LD_VAR 0 1
64319: PPUSH
64320: LD_VAR 0 4
64324: PPUSH
64325: CALL_OW 3
64329: ST_TO_ADDR
// end ;
64330: GO 64254
64332: POP
64333: POP
// end ;
64334: LD_VAR 0 2
64338: RET
// export function GetBaseMaterials ( base ) ; begin
64339: LD_INT 0
64341: PPUSH
// result := [ 0 , 0 , 0 ] ;
64342: LD_ADDR_VAR 0 2
64346: PUSH
64347: LD_INT 0
64349: PUSH
64350: LD_INT 0
64352: PUSH
64353: LD_INT 0
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: LIST
64360: ST_TO_ADDR
// if not base then
64361: LD_VAR 0 1
64365: NOT
64366: IFFALSE 64370
// exit ;
64368: GO 64419
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64370: LD_ADDR_VAR 0 2
64374: PUSH
64375: LD_VAR 0 1
64379: PPUSH
64380: LD_INT 1
64382: PPUSH
64383: CALL_OW 275
64387: PUSH
64388: LD_VAR 0 1
64392: PPUSH
64393: LD_INT 2
64395: PPUSH
64396: CALL_OW 275
64400: PUSH
64401: LD_VAR 0 1
64405: PPUSH
64406: LD_INT 3
64408: PPUSH
64409: CALL_OW 275
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: LIST
64418: ST_TO_ADDR
// end ;
64419: LD_VAR 0 2
64423: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64424: LD_INT 0
64426: PPUSH
64427: PPUSH
// result := array ;
64428: LD_ADDR_VAR 0 3
64432: PUSH
64433: LD_VAR 0 1
64437: ST_TO_ADDR
// if size > 0 then
64438: LD_VAR 0 2
64442: PUSH
64443: LD_INT 0
64445: GREATER
64446: IFFALSE 64492
// for i := array downto size do
64448: LD_ADDR_VAR 0 4
64452: PUSH
64453: DOUBLE
64454: LD_VAR 0 1
64458: INC
64459: ST_TO_ADDR
64460: LD_VAR 0 2
64464: PUSH
64465: FOR_DOWNTO
64466: IFFALSE 64490
// result := Delete ( result , result ) ;
64468: LD_ADDR_VAR 0 3
64472: PUSH
64473: LD_VAR 0 3
64477: PPUSH
64478: LD_VAR 0 3
64482: PPUSH
64483: CALL_OW 3
64487: ST_TO_ADDR
64488: GO 64465
64490: POP
64491: POP
// end ;
64492: LD_VAR 0 3
64496: RET
// export function ComExit ( unit ) ; var tmp ; begin
64497: LD_INT 0
64499: PPUSH
64500: PPUSH
// if not IsInUnit ( unit ) then
64501: LD_VAR 0 1
64505: PPUSH
64506: CALL_OW 310
64510: NOT
64511: IFFALSE 64515
// exit ;
64513: GO 64575
// tmp := IsInUnit ( unit ) ;
64515: LD_ADDR_VAR 0 3
64519: PUSH
64520: LD_VAR 0 1
64524: PPUSH
64525: CALL_OW 310
64529: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64530: LD_VAR 0 3
64534: PPUSH
64535: CALL_OW 247
64539: PUSH
64540: LD_INT 2
64542: EQUAL
64543: IFFALSE 64556
// ComExitVehicle ( unit ) else
64545: LD_VAR 0 1
64549: PPUSH
64550: CALL_OW 121
64554: GO 64565
// ComExitBuilding ( unit ) ;
64556: LD_VAR 0 1
64560: PPUSH
64561: CALL_OW 122
// result := tmp ;
64565: LD_ADDR_VAR 0 2
64569: PUSH
64570: LD_VAR 0 3
64574: ST_TO_ADDR
// end ;
64575: LD_VAR 0 2
64579: RET
// export function ResetHc ; begin
64580: LD_INT 0
64582: PPUSH
// InitHc ;
64583: CALL_OW 19
// hc_importance := 0 ;
64587: LD_ADDR_OWVAR 32
64591: PUSH
64592: LD_INT 0
64594: ST_TO_ADDR
// end ;
64595: LD_VAR 0 1
64599: RET
