// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 744 0 2
// PrepareArabian ;
  31: CALL 1437 0 0
// PrepareRussian ;
  35: CALL 3043 0 0
// Action ;
  39: CALL 8115 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: LD_INT 7
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_STRING 04_1_RuLabCaptured
 221: PPUSH
 222: LD_INT 0
 224: PPUSH
 225: CALL_OW 30
 229: ST_TO_ADDR
// captureCounter := 0 ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// flamethrowerBuilt := false ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 254: LD_ADDR_OWVAR 79
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// end ;
 262: LD_VAR 0 1
 266: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 267: LD_EXP 10
 271: NOT
 272: PUSH
 273: LD_EXP 9
 277: NOT
 278: AND
 279: PUSH
 280: LD_EXP 39
 284: NOT
 285: AND
 286: PUSH
 287: LD_EXP 40
 291: NOT
 292: AND
 293: IFFALSE 305
 295: GO 297
 297: DISABLE
// SetAchievement ( ACH_EXT ) ;
 298: LD_STRING ACH_EXT
 300: PPUSH
 301: CALL_OW 543
 305: END
// every 0 0$1 trigger captureCounter >= 6 do
 306: LD_EXP 18
 310: PUSH
 311: LD_INT 6
 313: GREATEREQUAL
 314: IFFALSE 326
 316: GO 318
 318: DISABLE
// SetAchievement ( ACH_KEY ) ;
 319: LD_STRING ACH_KEY
 321: PPUSH
 322: CALL_OW 543
 326: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 327: LD_EXP 19
 331: PUSH
 332: LD_INT 3
 334: GREATEREQUAL
 335: IFFALSE 347
 337: GO 339
 339: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 340: LD_STRING ACH_CHEM
 342: PPUSH
 343: CALL_OW 543
 347: END
// every 0 0$1 trigger debug do var i ;
 348: LD_EXP 1
 352: IFFALSE 436
 354: GO 356
 356: DISABLE
 357: LD_INT 0
 359: PPUSH
// begin enable ;
 360: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 361: LD_ADDR_VAR 0 1
 365: PUSH
 366: LD_INT 22
 368: PUSH
 369: LD_INT 2
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 3
 378: PUSH
 379: LD_INT 21
 381: PUSH
 382: LD_INT 3
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 434
// if GetLives ( i ) < 1000 then
 405: LD_VAR 0 1
 409: PPUSH
 410: CALL_OW 256
 414: PUSH
 415: LD_INT 1000
 417: LESS
 418: IFFALSE 432
// SetLives ( i , 1000 ) ;
 420: LD_VAR 0 1
 424: PPUSH
 425: LD_INT 1000
 427: PPUSH
 428: CALL_OW 234
 432: GO 402
 434: POP
 435: POP
// end ; end_of_file
 436: PPOPN 1
 438: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 439: LD_INT 0
 441: PPUSH
// uc_side := side ;
 442: LD_ADDR_OWVAR 20
 446: PUSH
 447: LD_VAR 0 1
 451: ST_TO_ADDR
// uc_nation := nation ;
 452: LD_ADDR_OWVAR 21
 456: PUSH
 457: LD_VAR 0 2
 461: ST_TO_ADDR
// vc_chassis := chassis ;
 462: LD_ADDR_OWVAR 37
 466: PUSH
 467: LD_VAR 0 3
 471: ST_TO_ADDR
// vc_engine := engine ;
 472: LD_ADDR_OWVAR 39
 476: PUSH
 477: LD_VAR 0 4
 481: ST_TO_ADDR
// vc_control := control ;
 482: LD_ADDR_OWVAR 38
 486: PUSH
 487: LD_VAR 0 5
 491: ST_TO_ADDR
// vc_weapon := weapon ;
 492: LD_ADDR_OWVAR 40
 496: PUSH
 497: LD_VAR 0 6
 501: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 502: LD_ADDR_OWVAR 41
 506: PUSH
 507: LD_VAR 0 7
 511: ST_TO_ADDR
// result := CreateVehicle ;
 512: LD_ADDR_VAR 0 8
 516: PUSH
 517: CALL_OW 45
 521: ST_TO_ADDR
// end ;
 522: LD_VAR 0 8
 526: RET
// export function SayX ( units , ident ) ; var i ; begin
 527: LD_INT 0
 529: PPUSH
 530: PPUSH
// result := false ;
 531: LD_ADDR_VAR 0 3
 535: PUSH
 536: LD_INT 0
 538: ST_TO_ADDR
// if not units then
 539: LD_VAR 0 1
 543: NOT
 544: IFFALSE 548
// exit ;
 546: GO 602
// for i in units do
 548: LD_ADDR_VAR 0 4
 552: PUSH
 553: LD_VAR 0 1
 557: PUSH
 558: FOR_IN
 559: IFFALSE 600
// if IsOk ( i ) then
 561: LD_VAR 0 4
 565: PPUSH
 566: CALL_OW 302
 570: IFFALSE 598
// begin Say ( i , ident ) ;
 572: LD_VAR 0 4
 576: PPUSH
 577: LD_VAR 0 2
 581: PPUSH
 582: CALL_OW 88
// result := i ;
 586: LD_ADDR_VAR 0 3
 590: PUSH
 591: LD_VAR 0 4
 595: ST_TO_ADDR
// break ;
 596: GO 600
// end ;
 598: GO 558
 600: POP
 601: POP
// end ;
 602: LD_VAR 0 3
 606: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 607: LD_INT 0
 609: PPUSH
 610: PPUSH
// InitUc ;
 611: CALL_OW 18
// InitHc ;
 615: CALL_OW 19
// uc_side := 0 ;
 619: LD_ADDR_OWVAR 20
 623: PUSH
 624: LD_INT 0
 626: ST_TO_ADDR
// uc_nation := 0 ;
 627: LD_ADDR_OWVAR 21
 631: PUSH
 632: LD_INT 0
 634: ST_TO_ADDR
// for i = 1 to amount do
 635: LD_ADDR_VAR 0 4
 639: PUSH
 640: DOUBLE
 641: LD_INT 1
 643: DEC
 644: ST_TO_ADDR
 645: LD_VAR 0 2
 649: PUSH
 650: FOR_TO
 651: IFFALSE 733
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 653: LD_ADDR_OWVAR 29
 657: PUSH
 658: LD_INT 9
 660: PPUSH
 661: LD_INT 12
 663: PPUSH
 664: CALL_OW 12
 668: PUSH
 669: LD_INT 9
 671: PPUSH
 672: LD_INT 12
 674: PPUSH
 675: CALL_OW 12
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 684: LD_ADDR_OWVAR 35
 688: PUSH
 689: LD_INT 1
 691: NEG
 692: PPUSH
 693: LD_INT 1
 695: PPUSH
 696: CALL_OW 12
 700: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 701: LD_INT 0
 703: PPUSH
 704: LD_INT 12
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 714: CALL_OW 44
 718: PPUSH
 719: LD_VAR 0 1
 723: PPUSH
 724: LD_INT 0
 726: PPUSH
 727: CALL_OW 49
// end ;
 731: GO 650
 733: POP
 734: POP
// InitHc ;
 735: CALL_OW 19
// end ;
 739: LD_VAR 0 3
 743: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 744: LD_INT 0
 746: PPUSH
 747: PPUSH
// uc_side := 0 ;
 748: LD_ADDR_OWVAR 20
 752: PUSH
 753: LD_INT 0
 755: ST_TO_ADDR
// uc_nation := 0 ;
 756: LD_ADDR_OWVAR 21
 760: PUSH
 761: LD_INT 0
 763: ST_TO_ADDR
// for i := 1 to 3 do
 764: LD_ADDR_VAR 0 4
 768: PUSH
 769: DOUBLE
 770: LD_INT 1
 772: DEC
 773: ST_TO_ADDR
 774: LD_INT 3
 776: PUSH
 777: FOR_TO
 778: IFFALSE 815
// begin hc_class := 21 ;
 780: LD_ADDR_OWVAR 28
 784: PUSH
 785: LD_INT 21
 787: ST_TO_ADDR
// hc_gallery :=  ;
 788: LD_ADDR_OWVAR 33
 792: PUSH
 793: LD_STRING 
 795: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 796: CALL_OW 44
 800: PPUSH
 801: LD_VAR 0 1
 805: PPUSH
 806: LD_INT 0
 808: PPUSH
 809: CALL_OW 49
// end ;
 813: GO 777
 815: POP
 816: POP
// for i := 1 to 3 do
 817: LD_ADDR_VAR 0 4
 821: PUSH
 822: DOUBLE
 823: LD_INT 1
 825: DEC
 826: ST_TO_ADDR
 827: LD_INT 3
 829: PUSH
 830: FOR_TO
 831: IFFALSE 868
// begin hc_class := 18 ;
 833: LD_ADDR_OWVAR 28
 837: PUSH
 838: LD_INT 18
 840: ST_TO_ADDR
// hc_gallery :=  ;
 841: LD_ADDR_OWVAR 33
 845: PUSH
 846: LD_STRING 
 848: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 849: CALL_OW 44
 853: PPUSH
 854: LD_VAR 0 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// end ;
 866: GO 830
 868: POP
 869: POP
// for i := 1 to 3 do
 870: LD_ADDR_VAR 0 4
 874: PUSH
 875: DOUBLE
 876: LD_INT 1
 878: DEC
 879: ST_TO_ADDR
 880: LD_INT 3
 882: PUSH
 883: FOR_TO
 884: IFFALSE 921
// begin hc_class := 13 ;
 886: LD_ADDR_OWVAR 28
 890: PUSH
 891: LD_INT 13
 893: ST_TO_ADDR
// hc_gallery :=  ;
 894: LD_ADDR_OWVAR 33
 898: PUSH
 899: LD_STRING 
 901: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 902: CALL_OW 44
 906: PPUSH
 907: LD_VAR 0 1
 911: PPUSH
 912: LD_INT 0
 914: PPUSH
 915: CALL_OW 49
// end ;
 919: GO 883
 921: POP
 922: POP
// for i := 1 to 4 do
 923: LD_ADDR_VAR 0 4
 927: PUSH
 928: DOUBLE
 929: LD_INT 1
 931: DEC
 932: ST_TO_ADDR
 933: LD_INT 4
 935: PUSH
 936: FOR_TO
 937: IFFALSE 974
// begin hc_class := class_frog ;
 939: LD_ADDR_OWVAR 28
 943: PUSH
 944: LD_INT 19
 946: ST_TO_ADDR
// hc_gallery :=  ;
 947: LD_ADDR_OWVAR 33
 951: PUSH
 952: LD_STRING 
 954: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 955: CALL_OW 44
 959: PPUSH
 960: LD_VAR 0 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ;
 972: GO 936
 974: POP
 975: POP
// end ;
 976: LD_VAR 0 3
 980: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 981: LD_INT 0
 983: PPUSH
 984: PPUSH
 985: PPUSH
// if not observer or not unit then
 986: LD_VAR 0 1
 990: NOT
 991: PUSH
 992: LD_VAR 0 2
 996: NOT
 997: OR
 998: IFFALSE 1002
// exit ;
1000: GO 1050
// if not See ( GetSide ( observer ) , unit ) then
1002: LD_VAR 0 1
1006: PPUSH
1007: CALL_OW 255
1011: PPUSH
1012: LD_VAR 0 2
1016: PPUSH
1017: CALL_OW 292
1021: NOT
1022: IFFALSE 1026
// exit ;
1024: GO 1050
// result := GetDistUnits ( observer , unit ) < 12 ;
1026: LD_ADDR_VAR 0 3
1030: PUSH
1031: LD_VAR 0 1
1035: PPUSH
1036: LD_VAR 0 2
1040: PPUSH
1041: CALL_OW 296
1045: PUSH
1046: LD_INT 12
1048: LESS
1049: ST_TO_ADDR
// end ;
1050: LD_VAR 0 3
1054: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1055: LD_INT 0
1057: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1058: LD_VAR 0 2
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PPUSH
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 2
1074: ARRAY
1075: PPUSH
1076: CALL_OW 488
1080: PUSH
1081: LD_VAR 0 2
1085: PUSH
1086: LD_INT 1
1088: ARRAY
1089: PPUSH
1090: LD_VAR 0 2
1094: PUSH
1095: LD_INT 2
1097: ARRAY
1098: PPUSH
1099: CALL_OW 428
1103: PUSH
1104: LD_INT 0
1106: EQUAL
1107: AND
1108: IFFALSE 1142
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1110: LD_VAR 0 1
1114: PPUSH
1115: LD_VAR 0 2
1119: PUSH
1120: LD_INT 1
1122: ARRAY
1123: PPUSH
1124: LD_VAR 0 2
1128: PUSH
1129: LD_INT 2
1131: ARRAY
1132: PPUSH
1133: LD_VAR 0 3
1137: PPUSH
1138: CALL_OW 48
// end ;
1142: LD_VAR 0 4
1146: RET
// export function ReverseArray ( array ) ; var i ; begin
1147: LD_INT 0
1149: PPUSH
1150: PPUSH
// if not array then
1151: LD_VAR 0 1
1155: NOT
1156: IFFALSE 1160
// exit ;
1158: GO 1218
// result := [ ] ;
1160: LD_ADDR_VAR 0 2
1164: PUSH
1165: EMPTY
1166: ST_TO_ADDR
// for i := 1 to array do
1167: LD_ADDR_VAR 0 3
1171: PUSH
1172: DOUBLE
1173: LD_INT 1
1175: DEC
1176: ST_TO_ADDR
1177: LD_VAR 0 1
1181: PUSH
1182: FOR_TO
1183: IFFALSE 1216
// result := Insert ( result , 1 , array [ i ] ) ;
1185: LD_ADDR_VAR 0 2
1189: PUSH
1190: LD_VAR 0 2
1194: PPUSH
1195: LD_INT 1
1197: PPUSH
1198: LD_VAR 0 1
1202: PUSH
1203: LD_VAR 0 3
1207: ARRAY
1208: PPUSH
1209: CALL_OW 2
1213: ST_TO_ADDR
1214: GO 1182
1216: POP
1217: POP
// end ;
1218: LD_VAR 0 2
1222: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1223: LD_INT 0
1225: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1226: LD_VAR 0 1
1230: PPUSH
1231: LD_VAR 0 2
1235: PPUSH
1236: LD_VAR 0 3
1240: PPUSH
1241: LD_VAR 0 4
1245: PPUSH
1246: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1250: LD_VAR 0 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: LD_VAR 0 3
1264: PPUSH
1265: CALL_OW 331
// end ;
1269: LD_VAR 0 5
1273: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1274: LD_INT 0
1276: PPUSH
// if not units then
1277: LD_VAR 0 1
1281: NOT
1282: IFFALSE 1286
// exit ;
1284: GO 1369
// result := true ;
1286: LD_ADDR_VAR 0 4
1290: PUSH
1291: LD_INT 1
1293: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1294: LD_VAR 0 1
1298: PPUSH
1299: LD_INT 26
1301: PUSH
1302: LD_INT 1
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: PPUSH
1309: CALL_OW 72
1313: PUSH
1314: LD_INT 1
1316: ARRAY
1317: PPUSH
1318: LD_VAR 0 2
1322: PPUSH
1323: CALL_OW 88
1327: NOT
1328: IFFALSE 1369
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1330: LD_ADDR_VAR 0 4
1334: PUSH
1335: LD_VAR 0 1
1339: PPUSH
1340: LD_INT 26
1342: PUSH
1343: LD_INT 2
1345: PUSH
1346: EMPTY
1347: LIST
1348: LIST
1349: PPUSH
1350: CALL_OW 72
1354: PUSH
1355: LD_INT 1
1357: ARRAY
1358: PPUSH
1359: LD_VAR 0 3
1363: PPUSH
1364: CALL_OW 88
1368: ST_TO_ADDR
// end ;
1369: LD_VAR 0 4
1373: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1374: LD_INT 0
1376: PPUSH
1377: PPUSH
// if not group then
1378: LD_VAR 0 2
1382: NOT
1383: IFFALSE 1387
// exit ;
1385: GO 1432
// for i in group do
1387: LD_ADDR_VAR 0 4
1391: PUSH
1392: LD_VAR 0 2
1396: PUSH
1397: FOR_IN
1398: IFFALSE 1430
// if See ( side , i ) then
1400: LD_VAR 0 1
1404: PPUSH
1405: LD_VAR 0 4
1409: PPUSH
1410: CALL_OW 292
1414: IFFALSE 1428
// begin result := true ;
1416: LD_ADDR_VAR 0 3
1420: PUSH
1421: LD_INT 1
1423: ST_TO_ADDR
// exit ;
1424: POP
1425: POP
1426: GO 1432
// end ;
1428: GO 1397
1430: POP
1431: POP
// end ; end_of_file
1432: LD_VAR 0 3
1436: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1437: LD_INT 0
1439: PPUSH
1440: PPUSH
// uc_side := 2 ;
1441: LD_ADDR_OWVAR 20
1445: PUSH
1446: LD_INT 2
1448: ST_TO_ADDR
// uc_nation := 2 ;
1449: LD_ADDR_OWVAR 21
1453: PUSH
1454: LD_INT 2
1456: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1457: LD_ADDR_EXP 21
1461: PUSH
1462: LD_STRING Heike
1464: PPUSH
1465: LD_EXP 1
1469: NOT
1470: PPUSH
1471: LD_EXP 2
1475: PPUSH
1476: CALL 34472 0 3
1480: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1481: LD_ADDR_EXP 24
1485: PUSH
1486: LD_STRING Ibrahim
1488: PPUSH
1489: LD_EXP 1
1493: NOT
1494: PPUSH
1495: LD_EXP 2
1499: PPUSH
1500: CALL 34472 0 3
1504: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1505: LD_ADDR_EXP 22
1509: PUSH
1510: LD_STRING Givi
1512: PPUSH
1513: LD_EXP 1
1517: NOT
1518: PPUSH
1519: LD_EXP 2
1523: PPUSH
1524: CALL 34472 0 3
1528: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1529: LD_ADDR_EXP 25
1533: PUSH
1534: LD_STRING Kamil
1536: PPUSH
1537: LD_EXP 1
1541: NOT
1542: PPUSH
1543: LD_EXP 2
1547: PPUSH
1548: CALL 34472 0 3
1552: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1553: LD_ADDR_EXP 26
1557: PUSH
1558: LD_STRING Kaia
1560: PPUSH
1561: LD_EXP 1
1565: NOT
1566: PPUSH
1567: LD_EXP 2
1571: PPUSH
1572: CALL 34472 0 3
1576: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1577: LD_ADDR_EXP 27
1581: PUSH
1582: LD_STRING Sophia
1584: PPUSH
1585: LD_EXP 1
1589: NOT
1590: PPUSH
1591: LD_EXP 2
1595: PPUSH
1596: CALL 34472 0 3
1600: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1601: LD_ADDR_EXP 28
1605: PUSH
1606: LD_STRING Markov
1608: PPUSH
1609: LD_EXP 1
1613: NOT
1614: PPUSH
1615: LD_EXP 2
1619: PPUSH
1620: CALL 34472 0 3
1624: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1625: LD_ADDR_EXP 33
1629: PUSH
1630: LD_STRING Aviradze
1632: PPUSH
1633: LD_EXP 1
1637: NOT
1638: PPUSH
1639: LD_EXP 2
1643: PPUSH
1644: CALL 34472 0 3
1648: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1649: LD_ADDR_EXP 32
1653: PUSH
1654: LD_STRING Kurt
1656: PPUSH
1657: LD_EXP 1
1661: NOT
1662: PPUSH
1663: LD_EXP 2
1667: PPUSH
1668: CALL 34472 0 3
1672: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1673: LD_ADDR_EXP 23
1677: PUSH
1678: LD_STRING Mike
1680: PPUSH
1681: LD_EXP 1
1685: NOT
1686: PPUSH
1687: LD_EXP 2
1691: PPUSH
1692: CALL 34472 0 3
1696: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1697: LD_ADDR_EXP 30
1701: PUSH
1702: LD_STRING Olaf
1704: PPUSH
1705: LD_INT 0
1707: PPUSH
1708: LD_STRING 
1710: PPUSH
1711: CALL 34472 0 3
1715: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1716: LD_ADDR_EXP 34
1720: PUSH
1721: LD_STRING 04_2_others
1723: PPUSH
1724: CALL_OW 31
1728: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1729: LD_ADDR_EXP 36
1733: PUSH
1734: LD_STRING 04_2_apes
1736: PPUSH
1737: CALL_OW 31
1741: ST_TO_ADDR
// if hasFlamethrower then
1742: LD_EXP 3
1746: IFFALSE 1981
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1748: LD_INT 70
1750: PPUSH
1751: LD_INT 2
1753: PPUSH
1754: LD_INT 2
1756: PPUSH
1757: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1761: LD_ADDR_EXP 35
1765: PUSH
1766: LD_INT 13
1768: PUSH
1769: LD_INT 1
1771: PUSH
1772: LD_INT 1
1774: PUSH
1775: LD_INT 27
1777: PUSH
1778: LD_INT 2
1780: PUSH
1781: LD_INT 1000
1783: PUSH
1784: LD_INT 0
1786: PUSH
1787: LD_INT 0
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: PUSH
1803: LD_INT 13
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: LD_INT 1
1811: PUSH
1812: LD_INT 25
1814: PUSH
1815: LD_INT 2
1817: PUSH
1818: LD_INT 1000
1820: PUSH
1821: LD_INT 0
1823: PUSH
1824: LD_INT 0
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: PUSH
1840: LD_INT 13
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: LD_INT 1
1848: PUSH
1849: LD_INT 26
1851: PUSH
1852: LD_INT 2
1854: PUSH
1855: LD_INT 1000
1857: PUSH
1858: LD_INT 0
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 13
1879: PUSH
1880: LD_INT 1
1882: PUSH
1883: LD_INT 1
1885: PUSH
1886: LD_INT 27
1888: PUSH
1889: LD_INT 2
1891: PUSH
1892: LD_INT 1000
1894: PUSH
1895: LD_INT 0
1897: PUSH
1898: LD_INT 0
1900: PUSH
1901: EMPTY
1902: LIST
1903: LIST
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 13
1916: PUSH
1917: LD_INT 1
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: LD_INT 32
1925: PUSH
1926: LD_INT 2
1928: PUSH
1929: LD_INT 1000
1931: PUSH
1932: LD_INT 0
1934: PUSH
1935: LD_INT 60
1937: PUSH
1938: LD_INT 40
1940: PUSH
1941: LD_INT 20
1943: PUSH
1944: LD_INT 10
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_OWVAR 67
1957: ARRAY
1958: PUSH
1959: EMPTY
1960: LIST
1961: LIST
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: ST_TO_ADDR
// end else
1979: GO 2199
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1981: LD_ADDR_EXP 35
1985: PUSH
1986: LD_INT 13
1988: PUSH
1989: LD_INT 1
1991: PUSH
1992: LD_INT 1
1994: PUSH
1995: LD_INT 25
1997: PUSH
1998: LD_INT 2
2000: PUSH
2001: LD_INT 1000
2003: PUSH
2004: LD_INT 0
2006: PUSH
2007: LD_INT 0
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: PUSH
2023: LD_INT 13
2025: PUSH
2026: LD_INT 1
2028: PUSH
2029: LD_INT 1
2031: PUSH
2032: LD_INT 27
2034: PUSH
2035: LD_INT 2
2037: PUSH
2038: LD_INT 1000
2040: PUSH
2041: LD_INT 0
2043: PUSH
2044: LD_INT 0
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: LD_INT 13
2062: PUSH
2063: LD_INT 1
2065: PUSH
2066: LD_INT 1
2068: PUSH
2069: LD_INT 24
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: LD_INT 1000
2077: PUSH
2078: LD_INT 0
2080: PUSH
2081: LD_INT 0
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 13
2099: PUSH
2100: LD_INT 1
2102: PUSH
2103: LD_INT 1
2105: PUSH
2106: LD_INT 27
2108: PUSH
2109: LD_INT 2
2111: PUSH
2112: LD_INT 1000
2114: PUSH
2115: LD_INT 0
2117: PUSH
2118: LD_INT 0
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: LIST
2133: PUSH
2134: LD_INT 13
2136: PUSH
2137: LD_INT 1
2139: PUSH
2140: LD_INT 1
2142: PUSH
2143: LD_INT 32
2145: PUSH
2146: LD_INT 2
2148: PUSH
2149: LD_INT 1000
2151: PUSH
2152: LD_INT 0
2154: PUSH
2155: LD_INT 50
2157: PUSH
2158: LD_INT 30
2160: PUSH
2161: LD_INT 20
2163: PUSH
2164: LD_INT 10
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_OWVAR 67
2177: ARRAY
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: ST_TO_ADDR
// end ; uc_side := 5 ;
2199: LD_ADDR_OWVAR 20
2203: PUSH
2204: LD_INT 5
2206: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2207: LD_ADDR_EXP 29
2211: PUSH
2212: LD_STRING Abdul
2214: PPUSH
2215: LD_INT 0
2217: PPUSH
2218: LD_STRING 
2220: PPUSH
2221: CALL 34472 0 3
2225: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2226: LD_ADDR_EXP 31
2230: PUSH
2231: LD_STRING Omar
2233: PPUSH
2234: LD_INT 0
2236: PPUSH
2237: LD_STRING 
2239: PPUSH
2240: CALL 34472 0 3
2244: ST_TO_ADDR
// end ;
2245: LD_VAR 0 1
2249: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2250: LD_INT 0
2252: PPUSH
2253: PPUSH
2254: PPUSH
2255: PPUSH
2256: PPUSH
// pfx := 04_1_ ;
2257: LD_ADDR_VAR 0 2
2261: PUSH
2262: LD_STRING 04_1_
2264: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2265: LD_INT 35
2267: PPUSH
2268: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
2272: LD_INT 3
2274: PPUSH
2275: LD_INT 2
2277: PPUSH
2278: CALL_OW 428
2282: NOT
2283: IFFALSE 2265
// tmp := [ ] ;
2285: LD_ADDR_VAR 0 4
2289: PUSH
2290: EMPTY
2291: ST_TO_ADDR
// uc_side := 5 ;
2292: LD_ADDR_OWVAR 20
2296: PUSH
2297: LD_INT 5
2299: ST_TO_ADDR
// uc_nation := 2 ;
2300: LD_ADDR_OWVAR 21
2304: PUSH
2305: LD_INT 2
2307: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2308: LD_ADDR_EXP 33
2312: PUSH
2313: LD_STRING Aviradze_L
2315: PPUSH
2316: LD_EXP 1
2320: NOT
2321: PPUSH
2322: LD_VAR 0 2
2326: PPUSH
2327: CALL 34472 0 3
2331: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2332: LD_EXP 33
2336: PPUSH
2337: LD_INT 2
2339: PPUSH
2340: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2344: LD_EXP 33
2348: PPUSH
2349: LD_INT 14
2351: PPUSH
2352: LD_INT 0
2354: PPUSH
2355: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
2359: LD_EXP 33
2363: PPUSH
2364: LD_INT 8
2366: PPUSH
2367: LD_INT 6
2369: PPUSH
2370: CALL_OW 111
// AddComHold ( Aviradze ) ;
2374: LD_EXP 33
2378: PPUSH
2379: CALL_OW 200
// tmp := [ Aviradze ] ;
2383: LD_ADDR_VAR 0 4
2387: PUSH
2388: LD_EXP 33
2392: PUSH
2393: EMPTY
2394: LIST
2395: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2396: LD_INT 70
2398: PPUSH
2399: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2403: LD_STRING Ibrahim_L
2405: PPUSH
2406: LD_EXP 1
2410: NOT
2411: PPUSH
2412: LD_VAR 0 2
2416: PPUSH
2417: CALL 34472 0 3
2421: IFFALSE 2521
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2423: LD_ADDR_EXP 24
2427: PUSH
2428: LD_STRING Ibrahim_L
2430: PPUSH
2431: LD_EXP 1
2435: NOT
2436: PPUSH
2437: LD_VAR 0 2
2441: PPUSH
2442: CALL 34472 0 3
2446: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2447: LD_EXP 24
2451: PPUSH
2452: LD_INT 2
2454: PPUSH
2455: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2459: LD_EXP 24
2463: PPUSH
2464: LD_INT 14
2466: PPUSH
2467: LD_INT 0
2469: PPUSH
2470: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
2474: LD_EXP 24
2478: PPUSH
2479: LD_INT 8
2481: PPUSH
2482: LD_INT 7
2484: PPUSH
2485: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2489: LD_EXP 24
2493: PPUSH
2494: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2498: LD_ADDR_VAR 0 4
2502: PUSH
2503: LD_VAR 0 4
2507: PUSH
2508: LD_EXP 24
2512: ADD
2513: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2514: LD_INT 70
2516: PPUSH
2517: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2521: LD_STRING Kaia_L
2523: PPUSH
2524: LD_EXP 1
2528: NOT
2529: PPUSH
2530: LD_VAR 0 2
2534: PPUSH
2535: CALL 34472 0 3
2539: IFFALSE 2639
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2541: LD_ADDR_EXP 26
2545: PUSH
2546: LD_STRING Kaia_L
2548: PPUSH
2549: LD_EXP 1
2553: NOT
2554: PPUSH
2555: LD_VAR 0 2
2559: PPUSH
2560: CALL 34472 0 3
2564: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2565: LD_EXP 26
2569: PPUSH
2570: LD_INT 2
2572: PPUSH
2573: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2577: LD_EXP 26
2581: PPUSH
2582: LD_INT 14
2584: PPUSH
2585: LD_INT 0
2587: PPUSH
2588: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
2592: LD_EXP 26
2596: PPUSH
2597: LD_INT 8
2599: PPUSH
2600: LD_INT 7
2602: PPUSH
2603: CALL_OW 111
// AddComHold ( Kaia ) ;
2607: LD_EXP 26
2611: PPUSH
2612: CALL_OW 200
// tmp := tmp ^ Kaia ;
2616: LD_ADDR_VAR 0 4
2620: PUSH
2621: LD_VAR 0 4
2625: PUSH
2626: LD_EXP 26
2630: ADD
2631: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2632: LD_INT 70
2634: PPUSH
2635: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2639: LD_STRING Kamil_L
2641: PPUSH
2642: LD_EXP 1
2646: NOT
2647: PPUSH
2648: LD_VAR 0 2
2652: PPUSH
2653: CALL 34472 0 3
2657: IFFALSE 2757
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2659: LD_ADDR_EXP 25
2663: PUSH
2664: LD_STRING Kamil_L
2666: PPUSH
2667: LD_EXP 1
2671: NOT
2672: PPUSH
2673: LD_VAR 0 2
2677: PPUSH
2678: CALL 34472 0 3
2682: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2683: LD_EXP 25
2687: PPUSH
2688: LD_INT 2
2690: PPUSH
2691: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2695: LD_EXP 25
2699: PPUSH
2700: LD_INT 14
2702: PPUSH
2703: LD_INT 0
2705: PPUSH
2706: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
2710: LD_EXP 25
2714: PPUSH
2715: LD_INT 8
2717: PPUSH
2718: LD_INT 7
2720: PPUSH
2721: CALL_OW 111
// AddComHold ( Kamil ) ;
2725: LD_EXP 25
2729: PPUSH
2730: CALL_OW 200
// tmp := tmp ^ Kamil ;
2734: LD_ADDR_VAR 0 4
2738: PUSH
2739: LD_VAR 0 4
2743: PUSH
2744: LD_EXP 25
2748: ADD
2749: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2750: LD_INT 70
2752: PPUSH
2753: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2757: LD_STRING Sophia_L
2759: PPUSH
2760: LD_EXP 1
2764: NOT
2765: PPUSH
2766: LD_VAR 0 2
2770: PPUSH
2771: CALL 34472 0 3
2775: IFFALSE 2875
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2777: LD_ADDR_EXP 27
2781: PUSH
2782: LD_STRING Sophia_L
2784: PPUSH
2785: LD_EXP 1
2789: NOT
2790: PPUSH
2791: LD_VAR 0 2
2795: PPUSH
2796: CALL 34472 0 3
2800: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2801: LD_EXP 27
2805: PPUSH
2806: LD_INT 2
2808: PPUSH
2809: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2813: LD_EXP 27
2817: PPUSH
2818: LD_INT 14
2820: PPUSH
2821: LD_INT 0
2823: PPUSH
2824: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
2828: LD_EXP 27
2832: PPUSH
2833: LD_INT 9
2835: PPUSH
2836: LD_INT 6
2838: PPUSH
2839: CALL_OW 111
// AddComHold ( Sophia ) ;
2843: LD_EXP 27
2847: PPUSH
2848: CALL_OW 200
// tmp := tmp ^ Sophia ;
2852: LD_ADDR_VAR 0 4
2856: PUSH
2857: LD_VAR 0 4
2861: PUSH
2862: LD_EXP 27
2866: ADD
2867: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2868: LD_INT 70
2870: PPUSH
2871: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2875: LD_ADDR_VAR 0 5
2879: PUSH
2880: LD_STRING 04_1_others_L
2882: PPUSH
2883: CALL_OW 31
2887: ST_TO_ADDR
// if tmp2 then
2888: LD_VAR 0 5
2892: IFFALSE 2989
// for i in tmp2 do
2894: LD_ADDR_VAR 0 3
2898: PUSH
2899: LD_VAR 0 5
2903: PUSH
2904: FOR_IN
2905: IFFALSE 2987
// begin SetDir ( i , 2 ) ;
2907: LD_VAR 0 3
2911: PPUSH
2912: LD_INT 2
2914: PPUSH
2915: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2919: LD_VAR 0 3
2923: PPUSH
2924: LD_INT 14
2926: PPUSH
2927: LD_INT 0
2929: PPUSH
2930: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2934: LD_ADDR_EXP 34
2938: PUSH
2939: LD_EXP 34
2943: PPUSH
2944: LD_EXP 34
2948: PUSH
2949: LD_INT 1
2951: PLUS
2952: PPUSH
2953: LD_VAR 0 3
2957: PPUSH
2958: CALL_OW 1
2962: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2963: LD_VAR 0 3
2967: PPUSH
2968: LD_INT 17
2970: PPUSH
2971: LD_INT 14
2973: PPUSH
2974: CALL_OW 111
// wait ( 0 0$2 ) ;
2978: LD_INT 70
2980: PPUSH
2981: CALL_OW 67
// end ;
2985: GO 2904
2987: POP
2988: POP
// for i in tmp union tmp2 do
2989: LD_ADDR_VAR 0 3
2993: PUSH
2994: LD_VAR 0 4
2998: PUSH
2999: LD_VAR 0 5
3003: UNION
3004: PUSH
3005: FOR_IN
3006: IFFALSE 3036
// begin SetSide ( i , 2 ) ;
3008: LD_VAR 0 3
3012: PPUSH
3013: LD_INT 2
3015: PPUSH
3016: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
3020: LD_VAR 0 3
3024: PPUSH
3025: LD_EXP 21
3029: PPUSH
3030: CALL_OW 112
// end ;
3034: GO 3005
3036: POP
3037: POP
// end ; end_of_file
3038: LD_VAR 0 1
3042: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
3043: LD_INT 0
3045: PPUSH
3046: PPUSH
3047: PPUSH
// uc_side := 3 ;
3048: LD_ADDR_OWVAR 20
3052: PUSH
3053: LD_INT 3
3055: ST_TO_ADDR
// uc_nation := 3 ;
3056: LD_ADDR_OWVAR 21
3060: PUSH
3061: LD_INT 3
3063: ST_TO_ADDR
// crossRoadGuard := [ ] ;
3064: LD_ADDR_EXP 37
3068: PUSH
3069: EMPTY
3070: ST_TO_ADDR
// oilBaseGuard := [ ] ;
3071: LD_ADDR_EXP 38
3075: PUSH
3076: EMPTY
3077: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3078: LD_ADDR_EXP 41
3082: PUSH
3083: EMPTY
3084: ST_TO_ADDR
// for i := 1 to 2 do
3085: LD_ADDR_VAR 0 2
3089: PUSH
3090: DOUBLE
3091: LD_INT 1
3093: DEC
3094: ST_TO_ADDR
3095: LD_INT 2
3097: PUSH
3098: FOR_TO
3099: IFFALSE 3238
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3101: LD_INT 0
3103: PPUSH
3104: LD_INT 1
3106: PPUSH
3107: LD_INT 3
3109: PUSH
3110: LD_INT 4
3112: PUSH
3113: LD_INT 5
3115: PUSH
3116: LD_INT 6
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: PUSH
3125: LD_OWVAR 67
3129: ARRAY
3130: PPUSH
3131: CALL_OW 380
// un := CreateHuman ;
3135: LD_ADDR_VAR 0 3
3139: PUSH
3140: CALL_OW 44
3144: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3145: LD_ADDR_EXP 37
3149: PUSH
3150: LD_EXP 37
3154: PPUSH
3155: LD_EXP 37
3159: PUSH
3160: LD_INT 1
3162: PLUS
3163: PPUSH
3164: LD_VAR 0 3
3168: PPUSH
3169: CALL_OW 1
3173: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3174: LD_VAR 0 3
3178: PPUSH
3179: LD_INT 100
3181: PPUSH
3182: LD_INT 63
3184: PPUSH
3185: LD_INT 3
3187: PPUSH
3188: LD_INT 0
3190: PPUSH
3191: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3195: LD_VAR 0 3
3199: PPUSH
3200: LD_INT 97
3202: PPUSH
3203: LD_INT 64
3205: PPUSH
3206: CALL_OW 428
3210: PUSH
3211: LD_INT 98
3213: PPUSH
3214: LD_INT 58
3216: PPUSH
3217: CALL_OW 428
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: LD_VAR 0 2
3230: ARRAY
3231: PPUSH
3232: CALL_OW 120
// end ;
3236: GO 3098
3238: POP
3239: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3240: LD_INT 51
3242: PPUSH
3243: LD_INT 77
3245: PPUSH
3246: CALL_OW 428
3250: PPUSH
3251: CALL_OW 274
3255: PPUSH
3256: LD_INT 1
3258: PPUSH
3259: LD_INT 120
3261: PPUSH
3262: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3266: LD_INT 10
3268: PPUSH
3269: CALL_OW 274
3273: PPUSH
3274: LD_INT 2
3276: PPUSH
3277: LD_INT 300
3279: PPUSH
3280: CALL_OW 277
// for i := 1 to 2 do
3284: LD_ADDR_VAR 0 2
3288: PUSH
3289: DOUBLE
3290: LD_INT 1
3292: DEC
3293: ST_TO_ADDR
3294: LD_INT 2
3296: PUSH
3297: FOR_TO
3298: IFFALSE 3416
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3300: LD_INT 0
3302: PPUSH
3303: LD_INT 1
3305: PPUSH
3306: LD_INT 3
3308: PUSH
3309: LD_INT 4
3311: PUSH
3312: LD_INT 5
3314: PUSH
3315: LD_INT 6
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: PUSH
3324: LD_OWVAR 67
3328: ARRAY
3329: PPUSH
3330: CALL_OW 380
// un := CreateHuman ;
3334: LD_ADDR_VAR 0 3
3338: PUSH
3339: CALL_OW 44
3343: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3344: LD_ADDR_EXP 38
3348: PUSH
3349: LD_EXP 38
3353: PPUSH
3354: LD_EXP 38
3358: PUSH
3359: LD_INT 1
3361: PLUS
3362: PPUSH
3363: LD_VAR 0 3
3367: PPUSH
3368: CALL_OW 1
3372: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3373: LD_VAR 0 3
3377: PPUSH
3378: LD_INT 198
3380: PPUSH
3381: LD_INT 106
3383: PPUSH
3384: CALL_OW 428
3388: PUSH
3389: LD_INT 205
3391: PPUSH
3392: LD_INT 114
3394: PPUSH
3395: CALL_OW 428
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: LD_VAR 0 2
3408: ARRAY
3409: PPUSH
3410: CALL_OW 52
// end ;
3414: GO 3297
3416: POP
3417: POP
// for i := 1 to 2 do
3418: LD_ADDR_VAR 0 2
3422: PUSH
3423: DOUBLE
3424: LD_INT 1
3426: DEC
3427: ST_TO_ADDR
3428: LD_INT 2
3430: PUSH
3431: FOR_TO
3432: IFFALSE 3509
// begin PrepareHuman ( false , 2 , 3 ) ;
3434: LD_INT 0
3436: PPUSH
3437: LD_INT 2
3439: PPUSH
3440: LD_INT 3
3442: PPUSH
3443: CALL_OW 380
// un := CreateHuman ;
3447: LD_ADDR_VAR 0 3
3451: PUSH
3452: CALL_OW 44
3456: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3457: LD_ADDR_EXP 38
3461: PUSH
3462: LD_EXP 38
3466: PPUSH
3467: LD_EXP 38
3471: PUSH
3472: LD_INT 1
3474: PLUS
3475: PPUSH
3476: LD_VAR 0 3
3480: PPUSH
3481: CALL_OW 1
3485: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3486: LD_VAR 0 3
3490: PPUSH
3491: LD_INT 204
3493: PPUSH
3494: LD_INT 108
3496: PPUSH
3497: LD_INT 2
3499: PPUSH
3500: LD_INT 0
3502: PPUSH
3503: CALL_OW 50
// end ;
3507: GO 3431
3509: POP
3510: POP
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
3511: LD_ADDR_VAR 0 2
3515: PUSH
3516: DOUBLE
3517: LD_INT 1
3519: DEC
3520: ST_TO_ADDR
3521: LD_INT 4
3523: PUSH
3524: LD_INT 5
3526: PUSH
3527: LD_INT 6
3529: PUSH
3530: LD_INT 7
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: PUSH
3539: LD_OWVAR 67
3543: ARRAY
3544: PUSH
3545: FOR_TO
3546: IFFALSE 3692
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3548: LD_INT 0
3550: PPUSH
3551: LD_INT 1
3553: PUSH
3554: LD_INT 1
3556: PUSH
3557: LD_INT 2
3559: PUSH
3560: LD_INT 4
3562: PUSH
3563: LD_INT 1
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: PUSH
3573: LD_INT 1
3575: PPUSH
3576: LD_INT 5
3578: PPUSH
3579: CALL_OW 12
3583: ARRAY
3584: PPUSH
3585: LD_INT 3
3587: PUSH
3588: LD_INT 4
3590: PUSH
3591: LD_INT 5
3593: PUSH
3594: LD_INT 5
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: PUSH
3603: LD_OWVAR 67
3607: ARRAY
3608: PPUSH
3609: CALL_OW 380
// un := CreateHuman ;
3613: LD_ADDR_VAR 0 3
3617: PUSH
3618: CALL_OW 44
3622: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroupArea , false ) then
3623: LD_VAR 0 3
3627: PPUSH
3628: LD_INT 10
3630: PPUSH
3631: LD_INT 0
3633: PPUSH
3634: CALL 70773 0 3
3638: IFFALSE 3690
// begin ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3640: LD_ADDR_EXP 39
3644: PUSH
3645: LD_EXP 39
3649: PPUSH
3650: LD_EXP 39
3654: PUSH
3655: LD_INT 1
3657: PLUS
3658: PPUSH
3659: LD_VAR 0 3
3663: PPUSH
3664: CALL_OW 1
3668: ST_TO_ADDR
// if Prob ( 50 ) then
3669: LD_INT 50
3671: PPUSH
3672: CALL_OW 13
3676: IFFALSE 3690
// ForceSleep ( un , true ) ;
3678: LD_VAR 0 3
3682: PPUSH
3683: LD_INT 1
3685: PPUSH
3686: CALL_OW 585
// end ; end ;
3690: GO 3545
3692: POP
3693: POP
// for i := 1 to 3 do
3694: LD_ADDR_VAR 0 2
3698: PUSH
3699: DOUBLE
3700: LD_INT 1
3702: DEC
3703: ST_TO_ADDR
3704: LD_INT 3
3706: PUSH
3707: FOR_TO
3708: IFFALSE 3802
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
3710: LD_INT 0
3712: PPUSH
3713: LD_INT 1
3715: PPUSH
3716: LD_INT 3
3718: PUSH
3719: LD_INT 4
3721: PUSH
3722: LD_INT 4
3724: PUSH
3725: LD_INT 5
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: PUSH
3734: LD_OWVAR 67
3738: ARRAY
3739: PPUSH
3740: CALL_OW 380
// un := CreateHuman ;
3744: LD_ADDR_VAR 0 3
3748: PUSH
3749: CALL_OW 44
3753: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3754: LD_VAR 0 3
3758: PPUSH
3759: LD_INT 11
3761: PPUSH
3762: LD_INT 0
3764: PPUSH
3765: CALL 70773 0 3
3769: IFFALSE 3800
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3771: LD_ADDR_EXP 39
3775: PUSH
3776: LD_EXP 39
3780: PPUSH
3781: LD_EXP 39
3785: PUSH
3786: LD_INT 1
3788: PLUS
3789: PPUSH
3790: LD_VAR 0 3
3794: PPUSH
3795: CALL_OW 1
3799: ST_TO_ADDR
// end ;
3800: GO 3707
3802: POP
3803: POP
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3804: LD_ADDR_VAR 0 2
3808: PUSH
3809: DOUBLE
3810: LD_INT 1
3812: DEC
3813: ST_TO_ADDR
3814: LD_INT 5
3816: PUSH
3817: LD_INT 6
3819: PUSH
3820: LD_INT 7
3822: PUSH
3823: LD_INT 8
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: PUSH
3832: LD_OWVAR 67
3836: ARRAY
3837: PUSH
3838: FOR_TO
3839: IFFALSE 3985
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3841: LD_INT 0
3843: PPUSH
3844: LD_INT 1
3846: PUSH
3847: LD_INT 1
3849: PUSH
3850: LD_INT 2
3852: PUSH
3853: LD_INT 4
3855: PUSH
3856: LD_INT 1
3858: PUSH
3859: EMPTY
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: PUSH
3866: LD_INT 1
3868: PPUSH
3869: LD_INT 5
3871: PPUSH
3872: CALL_OW 12
3876: ARRAY
3877: PPUSH
3878: LD_INT 3
3880: PUSH
3881: LD_INT 4
3883: PUSH
3884: LD_INT 5
3886: PUSH
3887: LD_INT 5
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: PUSH
3896: LD_OWVAR 67
3900: ARRAY
3901: PPUSH
3902: CALL_OW 380
// un := CreateHuman ;
3906: LD_ADDR_VAR 0 3
3910: PUSH
3911: CALL_OW 44
3915: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3916: LD_VAR 0 3
3920: PPUSH
3921: LD_INT 15
3923: PPUSH
3924: LD_INT 0
3926: PPUSH
3927: CALL 70773 0 3
3931: IFFALSE 3983
// begin ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3933: LD_ADDR_EXP 40
3937: PUSH
3938: LD_EXP 40
3942: PPUSH
3943: LD_EXP 40
3947: PUSH
3948: LD_INT 1
3950: PLUS
3951: PPUSH
3952: LD_VAR 0 3
3956: PPUSH
3957: CALL_OW 1
3961: ST_TO_ADDR
// if Prob ( 50 ) then
3962: LD_INT 50
3964: PPUSH
3965: CALL_OW 13
3969: IFFALSE 3983
// ForceSleep ( un , true ) ;
3971: LD_VAR 0 3
3975: PPUSH
3976: LD_INT 1
3978: PPUSH
3979: CALL_OW 585
// end ; end ;
3983: GO 3838
3985: POP
3986: POP
// end ;
3987: LD_VAR 0 1
3991: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3992: LD_INT 0
3994: PPUSH
3995: PPUSH
3996: PPUSH
// uc_side := 3 ;
3997: LD_ADDR_OWVAR 20
4001: PUSH
4002: LD_INT 3
4004: ST_TO_ADDR
// uc_nation := 3 ;
4005: LD_ADDR_OWVAR 21
4009: PUSH
4010: LD_INT 3
4012: ST_TO_ADDR
// for i := 1 to 6 do
4013: LD_ADDR_VAR 0 2
4017: PUSH
4018: DOUBLE
4019: LD_INT 1
4021: DEC
4022: ST_TO_ADDR
4023: LD_INT 6
4025: PUSH
4026: FOR_TO
4027: IFFALSE 4106
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
4029: LD_INT 0
4031: PPUSH
4032: LD_INT 1
4034: PUSH
4035: LD_INT 4
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: PUSH
4042: LD_INT 1
4044: PPUSH
4045: LD_INT 2
4047: PPUSH
4048: CALL_OW 12
4052: ARRAY
4053: PPUSH
4054: LD_INT 0
4056: PPUSH
4057: CALL_OW 380
// un := CreateHuman ;
4061: LD_ADDR_VAR 0 3
4065: PUSH
4066: CALL_OW 44
4070: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
4071: LD_VAR 0 3
4075: PPUSH
4076: LD_INT 54
4078: PPUSH
4079: LD_INT 88
4081: PPUSH
4082: LD_INT 12
4084: PPUSH
4085: LD_INT 0
4087: PPUSH
4088: CALL_OW 50
// SetLives ( un , 1 ) ;
4092: LD_VAR 0 3
4096: PPUSH
4097: LD_INT 1
4099: PPUSH
4100: CALL_OW 234
// end ;
4104: GO 4026
4106: POP
4107: POP
// uc_side := 3 ;
4108: LD_ADDR_OWVAR 20
4112: PUSH
4113: LD_INT 3
4115: ST_TO_ADDR
// uc_nation := 0 ;
4116: LD_ADDR_OWVAR 21
4120: PUSH
4121: LD_INT 0
4123: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4124: LD_ADDR_EXP 42
4128: PUSH
4129: EMPTY
4130: ST_TO_ADDR
// apeEngGroup := [ ] ;
4131: LD_ADDR_EXP 43
4135: PUSH
4136: EMPTY
4137: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
4138: LD_ADDR_VAR 0 2
4142: PUSH
4143: DOUBLE
4144: LD_INT 1
4146: DEC
4147: ST_TO_ADDR
4148: LD_INT 4
4150: PUSH
4151: LD_INT 5
4153: PUSH
4154: LD_INT 6
4156: PUSH
4157: LD_INT 7
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: PUSH
4166: LD_OWVAR 67
4170: ARRAY
4171: PUSH
4172: FOR_TO
4173: IFFALSE 4291
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
4175: LD_INT 0
4177: PPUSH
4178: LD_INT 15
4180: PPUSH
4181: LD_INT 3
4183: PUSH
4184: LD_INT 4
4186: PUSH
4187: LD_INT 5
4189: PUSH
4190: LD_INT 6
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: PUSH
4199: LD_OWVAR 67
4203: ARRAY
4204: PPUSH
4205: CALL_OW 380
// un := CreateHuman ;
4209: LD_ADDR_VAR 0 3
4213: PUSH
4214: CALL_OW 44
4218: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4219: LD_ADDR_EXP 42
4223: PUSH
4224: LD_EXP 42
4228: PPUSH
4229: LD_EXP 42
4233: PUSH
4234: LD_INT 1
4236: PLUS
4237: PPUSH
4238: LD_VAR 0 3
4242: PPUSH
4243: CALL_OW 1
4247: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4248: LD_VAR 0 3
4252: PPUSH
4253: LD_INT 0
4255: PPUSH
4256: LD_INT 5
4258: PPUSH
4259: CALL_OW 12
4263: PPUSH
4264: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4268: LD_VAR 0 3
4272: PPUSH
4273: LD_INT 56
4275: PPUSH
4276: LD_INT 82
4278: PPUSH
4279: LD_INT 6
4281: PPUSH
4282: LD_INT 0
4284: PPUSH
4285: CALL_OW 50
// end ;
4289: GO 4172
4291: POP
4292: POP
// for i := 1 to 2 do
4293: LD_ADDR_VAR 0 2
4297: PUSH
4298: DOUBLE
4299: LD_INT 1
4301: DEC
4302: ST_TO_ADDR
4303: LD_INT 2
4305: PUSH
4306: FOR_TO
4307: IFFALSE 4383
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4309: LD_INT 0
4311: PPUSH
4312: LD_INT 16
4314: PPUSH
4315: LD_INT 4
4317: PPUSH
4318: CALL_OW 380
// un := CreateHuman ;
4322: LD_ADDR_VAR 0 3
4326: PUSH
4327: CALL_OW 44
4331: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4332: LD_ADDR_EXP 43
4336: PUSH
4337: LD_EXP 43
4341: PPUSH
4342: LD_EXP 43
4346: PUSH
4347: LD_INT 1
4349: PLUS
4350: PPUSH
4351: LD_VAR 0 3
4355: PPUSH
4356: CALL_OW 1
4360: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4361: LD_VAR 0 3
4365: PPUSH
4366: LD_INT 51
4368: PPUSH
4369: LD_INT 77
4371: PPUSH
4372: CALL_OW 428
4376: PPUSH
4377: CALL_OW 52
// end ;
4381: GO 4306
4383: POP
4384: POP
// end ;
4385: LD_VAR 0 1
4389: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4390: LD_EXP 42
4394: PPUSH
4395: LD_INT 3
4397: PUSH
4398: LD_INT 24
4400: PUSH
4401: LD_INT 600
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: PUSH
4412: LD_INT 3
4414: PUSH
4415: LD_INT 54
4417: PUSH
4418: EMPTY
4419: LIST
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: PPUSH
4429: CALL_OW 72
4433: PUSH
4434: LD_INT 66
4436: PPUSH
4437: LD_INT 89
4439: PPUSH
4440: CALL_OW 428
4444: PPUSH
4445: CALL_OW 302
4449: AND
4450: IFFALSE 4535
4452: GO 4454
4454: DISABLE
4455: LD_INT 0
4457: PPUSH
// begin enable ;
4458: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4459: LD_ADDR_VAR 0 1
4463: PUSH
4464: LD_EXP 42
4468: PPUSH
4469: LD_INT 3
4471: PUSH
4472: LD_INT 24
4474: PUSH
4475: LD_INT 600
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: LD_INT 3
4488: PUSH
4489: LD_INT 54
4491: PUSH
4492: EMPTY
4493: LIST
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PPUSH
4503: CALL_OW 72
4507: PUSH
4508: FOR_IN
4509: IFFALSE 4533
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4511: LD_VAR 0 1
4515: PPUSH
4516: LD_INT 66
4518: PPUSH
4519: LD_INT 89
4521: PPUSH
4522: CALL_OW 428
4526: PPUSH
4527: CALL_OW 120
4531: GO 4508
4533: POP
4534: POP
// end ;
4535: PPOPN 1
4537: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4538: LD_INT 22
4540: PUSH
4541: LD_INT 2
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PUSH
4548: LD_INT 92
4550: PUSH
4551: LD_INT 54
4553: PUSH
4554: LD_INT 77
4556: PUSH
4557: LD_INT 8
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PPUSH
4570: CALL_OW 69
4574: IFFALSE 4638
4576: GO 4578
4578: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4579: LD_EXP 43
4583: PPUSH
4584: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4588: LD_EXP 43
4592: PPUSH
4593: LD_INT 22
4595: PUSH
4596: LD_INT 2
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: PUSH
4603: LD_INT 92
4605: PUSH
4606: LD_INT 54
4608: PUSH
4609: LD_INT 77
4611: PUSH
4612: LD_INT 8
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: PPUSH
4625: CALL_OW 69
4629: PUSH
4630: LD_INT 1
4632: ARRAY
4633: PPUSH
4634: CALL_OW 175
// end ;
4638: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag , enemy ; begin
4639: LD_INT 0
4641: PPUSH
4642: PPUSH
4643: PPUSH
4644: PPUSH
4645: PPUSH
4646: PPUSH
4647: PPUSH
4648: PPUSH
4649: PPUSH
4650: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4651: LD_ADDR_VAR 0 3
4655: PUSH
4656: LD_INT 1
4658: PPUSH
4659: LD_INT 3
4661: PPUSH
4662: CALL_OW 12
4666: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4667: LD_ADDR_VAR 0 5
4671: PUSH
4672: LD_INT 16
4674: PUSH
4675: LD_INT 17
4677: PUSH
4678: LD_INT 19
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: LIST
4685: PUSH
4686: LD_VAR 0 3
4690: ARRAY
4691: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4692: LD_ADDR_VAR 0 7
4696: PUSH
4697: LD_INT 159
4699: PUSH
4700: LD_INT 25
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PUSH
4707: LD_INT 137
4709: PUSH
4710: LD_INT 37
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: LD_INT 123
4719: PUSH
4720: LD_INT 55
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: PUSH
4727: LD_INT 115
4729: PUSH
4730: LD_INT 71
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: PUSH
4737: LD_INT 106
4739: PUSH
4740: LD_INT 88
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: PUSH
4747: LD_INT 97
4749: PUSH
4750: LD_INT 114
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: LD_INT 75
4759: PUSH
4760: LD_INT 146
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: PUSH
4776: LD_INT 206
4778: PUSH
4779: LD_INT 135
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PUSH
4786: LD_INT 184
4788: PUSH
4789: LD_INT 111
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 154
4798: PUSH
4799: LD_INT 97
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PUSH
4806: LD_INT 122
4808: PUSH
4809: LD_INT 80
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 109
4818: PUSH
4819: LD_INT 78
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: LD_INT 97
4828: PUSH
4829: LD_INT 113
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 75
4838: PUSH
4839: LD_INT 147
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 185
4857: PUSH
4858: LD_INT 72
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: LD_INT 171
4867: PUSH
4868: LD_INT 83
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PUSH
4875: LD_INT 161
4877: PUSH
4878: LD_INT 99
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PUSH
4885: LD_INT 125
4887: PUSH
4888: LD_INT 82
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: PUSH
4895: LD_INT 105
4897: PUSH
4898: LD_INT 90
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PUSH
4905: LD_INT 96
4907: PUSH
4908: LD_INT 116
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: LD_INT 75
4917: PUSH
4918: LD_INT 147
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: LIST
4938: PUSH
4939: LD_VAR 0 3
4943: ARRAY
4944: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4945: LD_ADDR_VAR 0 4
4949: PUSH
4950: LD_INT 4
4952: PUSH
4953: LD_INT 5
4955: PUSH
4956: LD_INT 3
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: LIST
4963: PUSH
4964: LD_VAR 0 3
4968: ARRAY
4969: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4970: LD_ADDR_VAR 0 6
4974: PUSH
4975: LD_INT 22
4977: PUSH
4978: LD_INT 20
4980: PUSH
4981: LD_INT 21
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: LIST
4988: PUSH
4989: LD_VAR 0 3
4993: ARRAY
4994: ST_TO_ADDR
// for i := 1 to 2 do
4995: LD_ADDR_VAR 0 2
4999: PUSH
5000: DOUBLE
5001: LD_INT 1
5003: DEC
5004: ST_TO_ADDR
5005: LD_INT 2
5007: PUSH
5008: FOR_TO
5009: IFFALSE 5027
// EraseResourceArea ( i , outerSpawnArea ) ;
5011: LD_VAR 0 2
5015: PPUSH
5016: LD_VAR 0 6
5020: PPUSH
5021: CALL_OW 286
5025: GO 5008
5027: POP
5028: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5029: LD_VAR 0 6
5033: PPUSH
5034: LD_INT 2
5036: PUSH
5037: LD_INT 21
5039: PUSH
5040: LD_INT 1
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: PUSH
5047: LD_INT 21
5049: PUSH
5050: LD_INT 2
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: LD_INT 21
5059: PUSH
5060: LD_INT 3
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: PPUSH
5073: CALL_OW 70
5077: IFFALSE 5292
// repeat wait ( 0 0$1 ) ;
5079: LD_INT 35
5081: PPUSH
5082: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5086: LD_VAR 0 6
5090: PPUSH
5091: LD_INT 2
5093: PUSH
5094: LD_INT 21
5096: PUSH
5097: LD_INT 2
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 21
5106: PUSH
5107: LD_INT 3
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: LIST
5118: PPUSH
5119: CALL_OW 70
5123: IFFALSE 5184
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5125: LD_ADDR_VAR 0 2
5129: PUSH
5130: LD_VAR 0 6
5134: PPUSH
5135: LD_INT 2
5137: PUSH
5138: LD_INT 21
5140: PUSH
5141: LD_INT 2
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PUSH
5148: LD_INT 21
5150: PUSH
5151: LD_INT 3
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: LIST
5162: PPUSH
5163: CALL_OW 70
5167: PUSH
5168: FOR_IN
5169: IFFALSE 5182
// RemoveUnit ( i ) ;
5171: LD_VAR 0 2
5175: PPUSH
5176: CALL_OW 64
5180: GO 5168
5182: POP
5183: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5184: LD_VAR 0 6
5188: PPUSH
5189: LD_INT 21
5191: PUSH
5192: LD_INT 1
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: PPUSH
5199: CALL_OW 70
5203: IFFALSE 5252
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5205: LD_ADDR_VAR 0 2
5209: PUSH
5210: LD_VAR 0 6
5214: PPUSH
5215: LD_INT 21
5217: PUSH
5218: LD_INT 1
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: PPUSH
5225: CALL_OW 70
5229: PUSH
5230: FOR_IN
5231: IFFALSE 5250
// ComMoveXY ( i , 113 , 53 ) ;
5233: LD_VAR 0 2
5237: PPUSH
5238: LD_INT 113
5240: PPUSH
5241: LD_INT 53
5243: PPUSH
5244: CALL_OW 111
5248: GO 5230
5250: POP
5251: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5252: LD_VAR 0 6
5256: PPUSH
5257: LD_INT 2
5259: PUSH
5260: LD_INT 21
5262: PUSH
5263: LD_INT 1
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: LD_INT 21
5272: PUSH
5273: LD_INT 2
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: PUSH
5280: EMPTY
5281: LIST
5282: LIST
5283: LIST
5284: PPUSH
5285: CALL_OW 70
5289: NOT
5290: IFFALSE 5079
// case convoyCounter of 1 .. 3 :
5292: LD_EXP 16
5296: PUSH
5297: LD_INT 1
5299: DOUBLE
5300: GREATEREQUAL
5301: IFFALSE 5309
5303: LD_INT 3
5305: DOUBLE
5306: LESSEQUAL
5307: IFTRUE 5311
5309: GO 5930
5311: POP
// begin uc_side := 3 ;
5312: LD_ADDR_OWVAR 20
5316: PUSH
5317: LD_INT 3
5319: ST_TO_ADDR
// uc_nation := 3 ;
5320: LD_ADDR_OWVAR 21
5324: PUSH
5325: LD_INT 3
5327: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] - convoyCounter do
5328: LD_ADDR_VAR 0 2
5332: PUSH
5333: DOUBLE
5334: LD_INT 1
5336: DEC
5337: ST_TO_ADDR
5338: LD_INT 5
5340: PUSH
5341: LD_INT 6
5343: PUSH
5344: LD_INT 7
5346: PUSH
5347: LD_INT 8
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_OWVAR 67
5360: ARRAY
5361: PUSH
5362: LD_EXP 16
5366: MINUS
5367: PUSH
5368: FOR_TO
5369: IFFALSE 5560
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5371: LD_INT 0
5373: PPUSH
5374: LD_INT 1
5376: PUSH
5377: LD_INT 1
5379: PUSH
5380: LD_INT 1
5382: PUSH
5383: LD_INT 4
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: PUSH
5392: LD_INT 1
5394: PPUSH
5395: LD_INT 4
5397: PPUSH
5398: CALL_OW 12
5402: ARRAY
5403: PPUSH
5404: LD_INT 4
5406: PUSH
5407: LD_INT 5
5409: PUSH
5410: LD_INT 6
5412: PUSH
5413: LD_INT 7
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: PUSH
5422: LD_OWVAR 67
5426: ARRAY
5427: PPUSH
5428: CALL_OW 380
// un := CreateHuman ;
5432: LD_ADDR_VAR 0 8
5436: PUSH
5437: CALL_OW 44
5441: ST_TO_ADDR
// SetDir ( un , dir ) ;
5442: LD_VAR 0 8
5446: PPUSH
5447: LD_VAR 0 4
5451: PPUSH
5452: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5456: LD_VAR 0 8
5460: PPUSH
5461: LD_VAR 0 5
5465: PPUSH
5466: LD_INT 0
5468: PPUSH
5469: CALL 70773 0 3
5473: IFFALSE 5558
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5475: LD_ADDR_EXP 41
5479: PUSH
5480: LD_EXP 41
5484: PPUSH
5485: LD_EXP 41
5489: PUSH
5490: LD_INT 1
5492: PLUS
5493: PPUSH
5494: LD_VAR 0 8
5498: PPUSH
5499: CALL_OW 1
5503: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5504: LD_VAR 0 8
5508: PPUSH
5509: LD_INT 1
5511: PPUSH
5512: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5516: LD_VAR 0 8
5520: PPUSH
5521: LD_VAR 0 7
5525: PUSH
5526: LD_INT 1
5528: ARRAY
5529: PUSH
5530: LD_INT 1
5532: ARRAY
5533: PPUSH
5534: LD_VAR 0 7
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PUSH
5543: LD_INT 2
5545: ARRAY
5546: PPUSH
5547: CALL_OW 111
// wait ( 0 0$2 ) ;
5551: LD_INT 70
5553: PPUSH
5554: CALL_OW 67
// end ; end ;
5558: GO 5368
5560: POP
5561: POP
// for i := 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
5562: LD_ADDR_VAR 0 2
5566: PUSH
5567: DOUBLE
5568: LD_INT 1
5570: DEC
5571: ST_TO_ADDR
5572: LD_INT 3
5574: PUSH
5575: LD_INT 4
5577: PUSH
5578: LD_INT 4
5580: PUSH
5581: LD_INT 4
5583: PUSH
5584: EMPTY
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: PUSH
5590: LD_OWVAR 67
5594: ARRAY
5595: PUSH
5596: FOR_TO
5597: IFFALSE 5926
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5599: LD_INT 3
5601: PPUSH
5602: LD_INT 3
5604: PPUSH
5605: LD_INT 21
5607: PUSH
5608: LD_INT 22
5610: PUSH
5611: LD_INT 23
5613: PUSH
5614: LD_INT 24
5616: PUSH
5617: LD_INT 24
5619: PUSH
5620: LD_INT 24
5622: PUSH
5623: EMPTY
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: PUSH
5631: LD_OWVAR 67
5635: PPUSH
5636: LD_OWVAR 67
5640: PUSH
5641: LD_INT 2
5643: PLUS
5644: PPUSH
5645: CALL_OW 12
5649: ARRAY
5650: PPUSH
5651: LD_INT 1
5653: PPUSH
5654: LD_INT 1
5656: PPUSH
5657: LD_INT 42
5659: PUSH
5660: LD_INT 44
5662: PUSH
5663: LD_INT 43
5665: PUSH
5666: LD_INT 44
5668: PUSH
5669: LD_INT 46
5671: PUSH
5672: LD_INT 46
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: PUSH
5683: LD_INT 1
5685: PPUSH
5686: LD_OWVAR 67
5690: PUSH
5691: LD_INT 2
5693: PLUS
5694: PPUSH
5695: CALL_OW 12
5699: ARRAY
5700: PPUSH
5701: LD_INT 90
5703: PPUSH
5704: CALL 439 0 7
// un := CreateVehicle ;
5708: LD_ADDR_VAR 0 8
5712: PUSH
5713: CALL_OW 45
5717: ST_TO_ADDR
// SetDir ( un , dir ) ;
5718: LD_VAR 0 8
5722: PPUSH
5723: LD_VAR 0 4
5727: PPUSH
5728: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5732: LD_VAR 0 8
5736: PPUSH
5737: LD_VAR 0 5
5741: PPUSH
5742: LD_INT 0
5744: PPUSH
5745: CALL 70773 0 3
5749: IFFALSE 5924
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5751: LD_ADDR_EXP 41
5755: PUSH
5756: LD_EXP 41
5760: PPUSH
5761: LD_EXP 41
5765: PUSH
5766: LD_INT 1
5768: PLUS
5769: PPUSH
5770: LD_VAR 0 8
5774: PPUSH
5775: CALL_OW 1
5779: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
5780: LD_INT 0
5782: PPUSH
5783: LD_INT 3
5785: PUSH
5786: LD_INT 4
5788: PUSH
5789: LD_INT 5
5791: PUSH
5792: LD_INT 6
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: LIST
5799: LIST
5800: PUSH
5801: LD_OWVAR 67
5805: ARRAY
5806: PPUSH
5807: CALL_OW 383
// un := CreateHuman ;
5811: LD_ADDR_VAR 0 8
5815: PUSH
5816: CALL_OW 44
5820: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5821: LD_VAR 0 8
5825: PPUSH
5826: LD_EXP 41
5830: PUSH
5831: LD_EXP 41
5835: ARRAY
5836: PPUSH
5837: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5841: LD_ADDR_EXP 41
5845: PUSH
5846: LD_EXP 41
5850: PPUSH
5851: LD_EXP 41
5855: PUSH
5856: LD_INT 1
5858: PLUS
5859: PPUSH
5860: LD_VAR 0 8
5864: PPUSH
5865: CALL_OW 1
5869: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5870: LD_VAR 0 8
5874: PPUSH
5875: LD_INT 1
5877: PPUSH
5878: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5882: LD_VAR 0 8
5886: PPUSH
5887: LD_VAR 0 7
5891: PUSH
5892: LD_INT 1
5894: ARRAY
5895: PUSH
5896: LD_INT 1
5898: ARRAY
5899: PPUSH
5900: LD_VAR 0 7
5904: PUSH
5905: LD_INT 1
5907: ARRAY
5908: PUSH
5909: LD_INT 2
5911: ARRAY
5912: PPUSH
5913: CALL_OW 111
// wait ( 0 0$3 ) ;
5917: LD_INT 105
5919: PPUSH
5920: CALL_OW 67
// end ; end ;
5924: GO 5596
5926: POP
5927: POP
// end ; 4 .. 7 :
5928: GO 6503
5930: LD_INT 4
5932: DOUBLE
5933: GREATEREQUAL
5934: IFFALSE 5942
5936: LD_INT 7
5938: DOUBLE
5939: LESSEQUAL
5940: IFTRUE 5944
5942: GO 6502
5944: POP
// begin uc_side := 3 ;
5945: LD_ADDR_OWVAR 20
5949: PUSH
5950: LD_INT 3
5952: ST_TO_ADDR
// uc_nation := 3 ;
5953: LD_ADDR_OWVAR 21
5957: PUSH
5958: LD_INT 3
5960: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
5961: LD_ADDR_VAR 0 2
5965: PUSH
5966: DOUBLE
5967: LD_INT 1
5969: DEC
5970: ST_TO_ADDR
5971: LD_INT 2
5973: PUSH
5974: LD_INT 3
5976: PUSH
5977: LD_INT 4
5979: PUSH
5980: LD_INT 4
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: PUSH
5989: LD_OWVAR 67
5993: ARRAY
5994: PUSH
5995: FOR_TO
5996: IFFALSE 6160
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5998: LD_INT 0
6000: PPUSH
6001: LD_INT 1
6003: PPUSH
6004: LD_INT 4
6006: PUSH
6007: LD_INT 5
6009: PUSH
6010: LD_INT 6
6012: PUSH
6013: LD_INT 7
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: PUSH
6022: LD_OWVAR 67
6026: ARRAY
6027: PPUSH
6028: CALL_OW 380
// un := CreateHuman ;
6032: LD_ADDR_VAR 0 8
6036: PUSH
6037: CALL_OW 44
6041: ST_TO_ADDR
// SetDir ( un , dir ) ;
6042: LD_VAR 0 8
6046: PPUSH
6047: LD_VAR 0 4
6051: PPUSH
6052: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6056: LD_VAR 0 8
6060: PPUSH
6061: LD_VAR 0 5
6065: PPUSH
6066: LD_INT 0
6068: PPUSH
6069: CALL 70773 0 3
6073: IFFALSE 6158
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6075: LD_ADDR_EXP 41
6079: PUSH
6080: LD_EXP 41
6084: PPUSH
6085: LD_EXP 41
6089: PUSH
6090: LD_INT 1
6092: PLUS
6093: PPUSH
6094: LD_VAR 0 8
6098: PPUSH
6099: CALL_OW 1
6103: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6104: LD_VAR 0 8
6108: PPUSH
6109: LD_INT 1
6111: PPUSH
6112: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6116: LD_VAR 0 8
6120: PPUSH
6121: LD_VAR 0 7
6125: PUSH
6126: LD_INT 1
6128: ARRAY
6129: PUSH
6130: LD_INT 1
6132: ARRAY
6133: PPUSH
6134: LD_VAR 0 7
6138: PUSH
6139: LD_INT 1
6141: ARRAY
6142: PUSH
6143: LD_INT 2
6145: ARRAY
6146: PPUSH
6147: CALL_OW 111
// wait ( 0 0$2 ) ;
6151: LD_INT 70
6153: PPUSH
6154: CALL_OW 67
// end ; end ;
6158: GO 5995
6160: POP
6161: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
6162: LD_ADDR_VAR 0 2
6166: PUSH
6167: DOUBLE
6168: LD_INT 1
6170: DEC
6171: ST_TO_ADDR
6172: LD_INT 2
6174: PUSH
6175: LD_INT 3
6177: PUSH
6178: LD_INT 3
6180: PUSH
6181: LD_INT 4
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: PUSH
6190: LD_OWVAR 67
6194: ARRAY
6195: PUSH
6196: FOR_TO
6197: IFFALSE 6498
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6199: LD_INT 3
6201: PPUSH
6202: LD_INT 3
6204: PPUSH
6205: LD_INT 21
6207: PUSH
6208: LD_INT 22
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: PUSH
6215: LD_INT 1
6217: PPUSH
6218: LD_INT 2
6220: PPUSH
6221: CALL_OW 12
6225: ARRAY
6226: PPUSH
6227: LD_INT 1
6229: PPUSH
6230: LD_INT 1
6232: PPUSH
6233: LD_INT 42
6235: PUSH
6236: LD_INT 44
6238: PUSH
6239: LD_INT 43
6241: PUSH
6242: LD_INT 44
6244: PUSH
6245: LD_INT 44
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 1
6257: PPUSH
6258: LD_OWVAR 67
6262: PUSH
6263: LD_INT 1
6265: PLUS
6266: PPUSH
6267: CALL_OW 12
6271: ARRAY
6272: PPUSH
6273: LD_INT 90
6275: PPUSH
6276: CALL 439 0 7
// un := CreateVehicle ;
6280: LD_ADDR_VAR 0 8
6284: PUSH
6285: CALL_OW 45
6289: ST_TO_ADDR
// SetDir ( un , dir ) ;
6290: LD_VAR 0 8
6294: PPUSH
6295: LD_VAR 0 4
6299: PPUSH
6300: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6304: LD_VAR 0 8
6308: PPUSH
6309: LD_VAR 0 5
6313: PPUSH
6314: LD_INT 0
6316: PPUSH
6317: CALL 70773 0 3
6321: IFFALSE 6496
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6323: LD_ADDR_EXP 41
6327: PUSH
6328: LD_EXP 41
6332: PPUSH
6333: LD_EXP 41
6337: PUSH
6338: LD_INT 1
6340: PLUS
6341: PPUSH
6342: LD_VAR 0 8
6346: PPUSH
6347: CALL_OW 1
6351: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
6352: LD_INT 0
6354: PPUSH
6355: LD_INT 3
6357: PUSH
6358: LD_INT 4
6360: PUSH
6361: LD_INT 5
6363: PUSH
6364: LD_INT 6
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: PUSH
6373: LD_OWVAR 67
6377: ARRAY
6378: PPUSH
6379: CALL_OW 383
// un := CreateHuman ;
6383: LD_ADDR_VAR 0 8
6387: PUSH
6388: CALL_OW 44
6392: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6393: LD_VAR 0 8
6397: PPUSH
6398: LD_EXP 41
6402: PUSH
6403: LD_EXP 41
6407: ARRAY
6408: PPUSH
6409: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6413: LD_ADDR_EXP 41
6417: PUSH
6418: LD_EXP 41
6422: PPUSH
6423: LD_EXP 41
6427: PUSH
6428: LD_INT 1
6430: PLUS
6431: PPUSH
6432: LD_VAR 0 8
6436: PPUSH
6437: CALL_OW 1
6441: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6442: LD_VAR 0 8
6446: PPUSH
6447: LD_INT 1
6449: PPUSH
6450: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6454: LD_VAR 0 8
6458: PPUSH
6459: LD_VAR 0 7
6463: PUSH
6464: LD_INT 1
6466: ARRAY
6467: PUSH
6468: LD_INT 1
6470: ARRAY
6471: PPUSH
6472: LD_VAR 0 7
6476: PUSH
6477: LD_INT 1
6479: ARRAY
6480: PUSH
6481: LD_INT 2
6483: ARRAY
6484: PPUSH
6485: CALL_OW 111
// wait ( 0 0$2 ) ;
6489: LD_INT 70
6491: PPUSH
6492: CALL_OW 67
// end ; end ;
6496: GO 6196
6498: POP
6499: POP
// end ; end ;
6500: GO 6503
6502: POP
// repeat wait ( 0 0$1 ) ;
6503: LD_INT 35
6505: PPUSH
6506: CALL_OW 67
// for un in ruConvoySquad do
6510: LD_ADDR_VAR 0 8
6514: PUSH
6515: LD_EXP 41
6519: PUSH
6520: FOR_IN
6521: IFFALSE 7145
// begin if IsInArea ( un , westSouthOutArea ) then
6523: LD_VAR 0 8
6527: PPUSH
6528: LD_INT 18
6530: PPUSH
6531: CALL_OW 308
6535: IFFALSE 6623
// begin if GetType ( un ) = unit_vehicle then
6537: LD_VAR 0 8
6541: PPUSH
6542: CALL_OW 247
6546: PUSH
6547: LD_INT 2
6549: EQUAL
6550: IFFALSE 6582
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6552: LD_ADDR_EXP 41
6556: PUSH
6557: LD_EXP 41
6561: PUSH
6562: LD_VAR 0 8
6566: PPUSH
6567: CALL_OW 311
6571: DIFF
6572: ST_TO_ADDR
// RemoveUnit ( un ) ;
6573: LD_VAR 0 8
6577: PPUSH
6578: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6582: LD_ADDR_EXP 15
6586: PUSH
6587: LD_EXP 15
6591: PUSH
6592: LD_INT 1
6594: PLUS
6595: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6596: LD_ADDR_EXP 41
6600: PUSH
6601: LD_EXP 41
6605: PUSH
6606: LD_VAR 0 8
6610: DIFF
6611: ST_TO_ADDR
// RemoveUnit ( un ) ;
6612: LD_VAR 0 8
6616: PPUSH
6617: CALL_OW 64
// break ;
6621: GO 7145
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6623: LD_VAR 0 8
6627: PPUSH
6628: CALL_OW 305
6632: NOT
6633: PUSH
6634: LD_VAR 0 8
6638: PPUSH
6639: CALL_OW 310
6643: NOT
6644: AND
6645: IFFALSE 6663
// ruConvoySquad := ruConvoySquad diff un ;
6647: LD_ADDR_EXP 41
6651: PUSH
6652: LD_EXP 41
6656: PUSH
6657: LD_VAR 0 8
6661: DIFF
6662: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6663: LD_VAR 0 8
6667: PPUSH
6668: CALL_OW 302
6672: PUSH
6673: LD_VAR 0 8
6677: PPUSH
6678: CALL_OW 314
6682: NOT
6683: AND
6684: IFFALSE 7143
// begin tag := GetTag ( un ) ;
6686: LD_ADDR_VAR 0 9
6690: PUSH
6691: LD_VAR 0 8
6695: PPUSH
6696: CALL_OW 110
6700: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6701: LD_VAR 0 8
6705: PPUSH
6706: LD_VAR 0 7
6710: PUSH
6711: LD_VAR 0 9
6715: PUSH
6716: LD_INT 1
6718: PLUS
6719: ARRAY
6720: PUSH
6721: LD_INT 1
6723: ARRAY
6724: PPUSH
6725: LD_VAR 0 7
6729: PUSH
6730: LD_VAR 0 9
6734: PUSH
6735: LD_INT 1
6737: PLUS
6738: ARRAY
6739: PUSH
6740: LD_INT 2
6742: ARRAY
6743: PPUSH
6744: CALL_OW 297
6748: PUSH
6749: LD_INT 6
6751: LESS
6752: IFFALSE 6935
// begin SetTag ( un , tag + 1 ) ;
6754: LD_VAR 0 8
6758: PPUSH
6759: LD_VAR 0 9
6763: PUSH
6764: LD_INT 1
6766: PLUS
6767: PPUSH
6768: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6772: LD_VAR 0 8
6776: PPUSH
6777: CALL_OW 247
6781: PUSH
6782: LD_INT 2
6784: EQUAL
6785: PUSH
6786: LD_VAR 0 8
6790: PPUSH
6791: CALL_OW 257
6795: PUSH
6796: LD_INT 3
6798: EQUAL
6799: OR
6800: IFFALSE 6933
// begin enemy := FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , un , 8 ] ] ) ;
6802: LD_ADDR_VAR 0 10
6806: PUSH
6807: LD_INT 22
6809: PUSH
6810: LD_INT 2
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: PUSH
6817: LD_INT 91
6819: PUSH
6820: LD_VAR 0 8
6824: PUSH
6825: LD_INT 8
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: LIST
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: PPUSH
6837: CALL_OW 69
6841: ST_TO_ADDR
// if enemy then
6842: LD_VAR 0 10
6846: IFFALSE 6874
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) else
6848: LD_VAR 0 8
6852: PPUSH
6853: LD_VAR 0 10
6857: PPUSH
6858: LD_VAR 0 8
6862: PPUSH
6863: CALL_OW 74
6867: PPUSH
6868: CALL_OW 115
6872: GO 6933
// begin AddComWait ( un , 0 0$4 ) ;
6874: LD_VAR 0 8
6878: PPUSH
6879: LD_INT 140
6881: PPUSH
6882: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6886: LD_VAR 0 8
6890: PPUSH
6891: LD_VAR 0 7
6895: PUSH
6896: LD_VAR 0 9
6900: PUSH
6901: LD_INT 1
6903: PLUS
6904: ARRAY
6905: PUSH
6906: LD_INT 1
6908: ARRAY
6909: PPUSH
6910: LD_VAR 0 7
6914: PUSH
6915: LD_VAR 0 9
6919: PUSH
6920: LD_INT 1
6922: PLUS
6923: ARRAY
6924: PUSH
6925: LD_INT 2
6927: ARRAY
6928: PPUSH
6929: CALL_OW 174
// end ; end ; end else
6933: GO 7143
// begin if GetClass ( un ) = 4 then
6935: LD_VAR 0 8
6939: PPUSH
6940: CALL_OW 257
6944: PUSH
6945: LD_INT 4
6947: EQUAL
6948: IFFALSE 7096
// begin if UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6950: LD_EXP 41
6954: PPUSH
6955: LD_INT 21
6957: PUSH
6958: LD_INT 1
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: LD_INT 3
6967: PUSH
6968: LD_INT 24
6970: PUSH
6971: LD_INT 1000
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PPUSH
6986: CALL_OW 72
6990: IFFALSE 7048
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
6992: LD_VAR 0 8
6996: PPUSH
6997: LD_EXP 41
7001: PPUSH
7002: LD_INT 21
7004: PUSH
7005: LD_INT 1
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PUSH
7012: LD_INT 3
7014: PUSH
7015: LD_INT 24
7017: PUSH
7018: LD_INT 1000
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PPUSH
7033: CALL_OW 72
7037: PUSH
7038: LD_INT 1
7040: ARRAY
7041: PPUSH
7042: CALL_OW 128
7046: GO 7094
// ComMoveUnit ( un , NearestUnitToUnit ( UnitFilter ( ruConvoySquad , [ f_not , [ f_class , 4 ] ] ) , un ) ) end else
7048: LD_VAR 0 8
7052: PPUSH
7053: LD_EXP 41
7057: PPUSH
7058: LD_INT 3
7060: PUSH
7061: LD_INT 25
7063: PUSH
7064: LD_INT 4
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PPUSH
7075: CALL_OW 72
7079: PPUSH
7080: LD_VAR 0 8
7084: PPUSH
7085: CALL_OW 74
7089: PPUSH
7090: CALL_OW 112
7094: GO 7143
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7096: LD_VAR 0 8
7100: PPUSH
7101: LD_VAR 0 7
7105: PUSH
7106: LD_VAR 0 9
7110: PUSH
7111: LD_INT 1
7113: PLUS
7114: ARRAY
7115: PUSH
7116: LD_INT 1
7118: ARRAY
7119: PPUSH
7120: LD_VAR 0 7
7124: PUSH
7125: LD_VAR 0 9
7129: PUSH
7130: LD_INT 1
7132: PLUS
7133: ARRAY
7134: PUSH
7135: LD_INT 2
7137: ARRAY
7138: PPUSH
7139: CALL_OW 114
// end ; end ; end ;
7143: GO 6520
7145: POP
7146: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
7147: LD_EXP 41
7151: PPUSH
7152: LD_INT 52
7154: PUSH
7155: EMPTY
7156: LIST
7157: PUSH
7158: LD_INT 21
7160: PUSH
7161: LD_INT 1
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PPUSH
7172: CALL_OW 72
7176: NOT
7177: IFFALSE 6503
// end ;
7179: LD_VAR 0 1
7183: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
7184: LD_EXP 16
7188: PUSH
7189: LD_INT 3
7191: PPUSH
7192: LD_INT 5
7194: PPUSH
7195: CALL_OW 12
7199: LESS
7200: PUSH
7201: LD_EXP 41
7205: NOT
7206: AND
7207: PUSH
7208: LD_OWVAR 67
7212: PUSH
7213: LD_INT 1
7215: GREATER
7216: AND
7217: IFFALSE 7621
7219: GO 7221
7221: DISABLE
7222: LD_INT 0
7224: PPUSH
7225: PPUSH
7226: PPUSH
// begin uc_side := 3 ;
7227: LD_ADDR_OWVAR 20
7231: PUSH
7232: LD_INT 3
7234: ST_TO_ADDR
// uc_nation := 3 ;
7235: LD_ADDR_OWVAR 21
7239: PUSH
7240: LD_INT 3
7242: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
7243: LD_ADDR_VAR 0 1
7247: PUSH
7248: DOUBLE
7249: LD_INT 1
7251: DEC
7252: ST_TO_ADDR
7253: LD_INT 2
7255: PUSH
7256: LD_INT 3
7258: PUSH
7259: LD_INT 4
7261: PUSH
7262: LD_INT 5
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: PUSH
7271: LD_OWVAR 67
7275: ARRAY
7276: PUSH
7277: FOR_TO
7278: IFFALSE 7542
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7280: LD_INT 3
7282: PPUSH
7283: LD_INT 3
7285: PPUSH
7286: LD_INT 21
7288: PUSH
7289: LD_INT 22
7291: PUSH
7292: LD_INT 23
7294: PUSH
7295: LD_INT 24
7297: PUSH
7298: LD_INT 24
7300: PUSH
7301: LD_INT 24
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: PUSH
7312: LD_OWVAR 67
7316: PPUSH
7317: LD_OWVAR 67
7321: PUSH
7322: LD_INT 2
7324: PLUS
7325: PPUSH
7326: CALL_OW 12
7330: ARRAY
7331: PPUSH
7332: LD_INT 1
7334: PPUSH
7335: LD_INT 1
7337: PPUSH
7338: LD_INT 42
7340: PUSH
7341: LD_INT 44
7343: PUSH
7344: LD_INT 43
7346: PUSH
7347: LD_INT 44
7349: PUSH
7350: LD_INT 46
7352: PUSH
7353: LD_INT 46
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: LD_INT 1
7366: PPUSH
7367: LD_OWVAR 67
7371: PUSH
7372: LD_INT 2
7374: PLUS
7375: PPUSH
7376: CALL_OW 12
7380: ARRAY
7381: PPUSH
7382: LD_INT 90
7384: PPUSH
7385: CALL 439 0 7
// un := CreateVehicle ;
7389: LD_ADDR_VAR 0 3
7393: PUSH
7394: CALL_OW 45
7398: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7399: LD_VAR 0 3
7403: PPUSH
7404: LD_INT 0
7406: PPUSH
7407: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7411: LD_VAR 0 3
7415: PPUSH
7416: LD_INT 23
7418: PPUSH
7419: LD_INT 0
7421: PPUSH
7422: CALL 70773 0 3
7426: IFFALSE 7540
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7428: LD_ADDR_VAR 0 2
7432: PUSH
7433: LD_VAR 0 2
7437: PPUSH
7438: LD_VAR 0 2
7442: PUSH
7443: LD_INT 1
7445: PLUS
7446: PPUSH
7447: LD_VAR 0 3
7451: PPUSH
7452: CALL_OW 1
7456: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
7457: LD_INT 0
7459: PPUSH
7460: LD_INT 3
7462: PUSH
7463: LD_INT 4
7465: PUSH
7466: LD_INT 5
7468: PUSH
7469: LD_INT 6
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: PUSH
7478: LD_OWVAR 67
7482: ARRAY
7483: PPUSH
7484: CALL_OW 383
// un := CreateHuman ;
7488: LD_ADDR_VAR 0 3
7492: PUSH
7493: CALL_OW 44
7497: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7498: LD_VAR 0 3
7502: PPUSH
7503: LD_VAR 0 2
7507: PUSH
7508: LD_VAR 0 2
7512: ARRAY
7513: PPUSH
7514: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7518: LD_VAR 0 3
7522: PPUSH
7523: LD_INT 80
7525: PPUSH
7526: LD_INT 139
7528: PPUSH
7529: CALL_OW 111
// wait ( 0 0$3 ) ;
7533: LD_INT 105
7535: PPUSH
7536: CALL_OW 67
// end ; end ;
7540: GO 7277
7542: POP
7543: POP
// for i in tmp do
7544: LD_ADDR_VAR 0 1
7548: PUSH
7549: LD_VAR 0 2
7553: PUSH
7554: FOR_IN
7555: IFFALSE 7619
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7557: LD_VAR 0 1
7561: PPUSH
7562: LD_INT 101
7564: PPUSH
7565: LD_INT 102
7567: PPUSH
7568: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7572: LD_VAR 0 1
7576: PPUSH
7577: LD_INT 110
7579: PPUSH
7580: LD_INT 78
7582: PPUSH
7583: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7587: LD_VAR 0 1
7591: PPUSH
7592: LD_INT 75
7594: PPUSH
7595: LD_INT 101
7597: PPUSH
7598: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7602: LD_VAR 0 1
7606: PPUSH
7607: LD_INT 57
7609: PPUSH
7610: LD_INT 83
7612: PPUSH
7613: CALL_OW 174
// end ;
7617: GO 7554
7619: POP
7620: POP
// end ;
7621: PPOPN 3
7623: END
// every 0 0$1 trigger UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) or UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do var i ;
7624: LD_EXP 39
7628: PPUSH
7629: LD_INT 3
7631: PUSH
7632: LD_INT 24
7634: PUSH
7635: LD_INT 1000
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PPUSH
7646: CALL_OW 72
7650: PUSH
7651: LD_EXP 40
7655: PPUSH
7656: LD_INT 3
7658: PUSH
7659: LD_INT 24
7661: PUSH
7662: LD_INT 1000
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: PPUSH
7673: CALL_OW 72
7677: OR
7678: IFFALSE 7777
7680: GO 7682
7682: DISABLE
7683: LD_INT 0
7685: PPUSH
// begin enable ;
7686: ENABLE
// for i in UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) union UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do
7687: LD_ADDR_VAR 0 1
7691: PUSH
7692: LD_EXP 39
7696: PPUSH
7697: LD_INT 3
7699: PUSH
7700: LD_INT 24
7702: PUSH
7703: LD_INT 1000
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PPUSH
7714: CALL_OW 72
7718: PUSH
7719: LD_EXP 40
7723: PPUSH
7724: LD_INT 3
7726: PUSH
7727: LD_INT 24
7729: PUSH
7730: LD_INT 1000
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PPUSH
7741: CALL_OW 72
7745: UNION
7746: PUSH
7747: FOR_IN
7748: IFFALSE 7775
// if IsSleeping ( i ) then
7750: LD_VAR 0 1
7754: PPUSH
7755: CALL_OW 555
7759: IFFALSE 7773
// ForceSleep ( i , false ) ;
7761: LD_VAR 0 1
7765: PPUSH
7766: LD_INT 0
7768: PPUSH
7769: CALL_OW 585
7773: GO 7747
7775: POP
7776: POP
// end ; end_of_file
7777: PPOPN 1
7779: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7780: LD_VAR 0 1
7784: PPUSH
7785: CALL 14510 0 1
// if un = Heike then
7789: LD_VAR 0 1
7793: PUSH
7794: LD_EXP 21
7798: EQUAL
7799: IFFALSE 7808
// YouLost ( Heike ) ;
7801: LD_STRING Heike
7803: PPUSH
7804: CALL_OW 104
// if un in apeSoldGroup then
7808: LD_VAR 0 1
7812: PUSH
7813: LD_EXP 42
7817: IN
7818: IFFALSE 7836
// apeSoldGroup := apeSoldGroup diff un ;
7820: LD_ADDR_EXP 42
7824: PUSH
7825: LD_EXP 42
7829: PUSH
7830: LD_VAR 0 1
7834: DIFF
7835: ST_TO_ADDR
// if un in apeEngGroup then
7836: LD_VAR 0 1
7840: PUSH
7841: LD_EXP 43
7845: IN
7846: IFFALSE 7864
// apeEngGroup := apeEngGroup diff un ;
7848: LD_ADDR_EXP 43
7852: PUSH
7853: LD_EXP 43
7857: PUSH
7858: LD_VAR 0 1
7862: DIFF
7863: ST_TO_ADDR
// if un in oilBaseGuard then
7864: LD_VAR 0 1
7868: PUSH
7869: LD_EXP 38
7873: IN
7874: IFFALSE 7892
// oilBaseGuard := oilBaseGuard diff un ;
7876: LD_ADDR_EXP 38
7880: PUSH
7881: LD_EXP 38
7885: PUSH
7886: LD_VAR 0 1
7890: DIFF
7891: ST_TO_ADDR
// if un in ruNorthGroup then
7892: LD_VAR 0 1
7896: PUSH
7897: LD_EXP 39
7901: IN
7902: IFFALSE 7920
// ruNorthGroup := ruNorthGroup diff un ;
7904: LD_ADDR_EXP 39
7908: PUSH
7909: LD_EXP 39
7913: PUSH
7914: LD_VAR 0 1
7918: DIFF
7919: ST_TO_ADDR
// if un in ruSouthGroup then
7920: LD_VAR 0 1
7924: PUSH
7925: LD_EXP 40
7929: IN
7930: IFFALSE 7948
// ruSouthGroup := ruSouthGroup diff un ;
7932: LD_ADDR_EXP 40
7936: PUSH
7937: LD_EXP 40
7941: PUSH
7942: LD_VAR 0 1
7946: DIFF
7947: ST_TO_ADDR
// if un in ruConvoySquad then
7948: LD_VAR 0 1
7952: PUSH
7953: LD_EXP 41
7957: IN
7958: IFFALSE 7976
// ruConvoySquad := ruConvoySquad diff un ;
7960: LD_ADDR_EXP 41
7964: PUSH
7965: LD_EXP 41
7969: PUSH
7970: LD_VAR 0 1
7974: DIFF
7975: ST_TO_ADDR
// end ;
7976: PPOPN 1
7978: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
7979: LD_VAR 0 1
7983: PPUSH
7984: LD_VAR 0 2
7988: PPUSH
7989: CALL 14632 0 2
// if GetWeapon ( veh ) = ar_radar then
7993: LD_VAR 0 1
7997: PPUSH
7998: CALL_OW 264
8002: PUSH
8003: LD_INT 30
8005: EQUAL
8006: IFFALSE 8016
// radarConstructed := true ;
8008: LD_ADDR_EXP 13
8012: PUSH
8013: LD_INT 1
8015: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
8016: LD_VAR 0 1
8020: PPUSH
8021: CALL_OW 264
8025: PUSH
8026: LD_INT 26
8028: EQUAL
8029: IFFALSE 8039
// flamethrowerBuilt := true ;
8031: LD_ADDR_EXP 20
8035: PUSH
8036: LD_INT 1
8038: ST_TO_ADDR
// end ;
8039: PPOPN 2
8041: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
8042: LD_ADDR_EXP 18
8046: PUSH
8047: LD_EXP 18
8051: PUSH
8052: LD_INT 1
8054: PLUS
8055: ST_TO_ADDR
// if oldId in ruConvoySquad then
8056: LD_VAR 0 2
8060: PUSH
8061: LD_EXP 41
8065: IN
8066: IFFALSE 8084
// ruConvoySquad := ruConvoySquad diff oldId ;
8068: LD_ADDR_EXP 41
8072: PUSH
8073: LD_EXP 41
8077: PUSH
8078: LD_VAR 0 2
8082: DIFF
8083: ST_TO_ADDR
// if newId in ruConvoySquad then
8084: LD_VAR 0 1
8088: PUSH
8089: LD_EXP 41
8093: IN
8094: IFFALSE 8112
// ruConvoySquad := ruConvoySquad diff newId ;
8096: LD_ADDR_EXP 41
8100: PUSH
8101: LD_EXP 41
8105: PUSH
8106: LD_VAR 0 1
8110: DIFF
8111: ST_TO_ADDR
// end ; end_of_file
8112: PPOPN 4
8114: END
// export function Action ; var i , p , un , veh , tmp ; begin
8115: LD_INT 0
8117: PPUSH
8118: PPUSH
8119: PPUSH
8120: PPUSH
8121: PPUSH
8122: PPUSH
// InGameOn ;
8123: CALL_OW 8
// music_nat := 2 ;
8127: LD_ADDR_OWVAR 71
8131: PUSH
8132: LD_INT 2
8134: ST_TO_ADDR
// music_class := music_recon ;
8135: LD_ADDR_OWVAR 72
8139: PUSH
8140: LD_INT 3
8142: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
8143: LD_INT 7
8145: PPUSH
8146: LD_INT 6
8148: PPUSH
8149: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 30 ) ;
8153: LD_INT 7
8155: PPUSH
8156: LD_INT 6
8158: PPUSH
8159: LD_INT 2
8161: PPUSH
8162: LD_INT 30
8164: NEG
8165: PPUSH
8166: CALL 1223 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Markov , Aviradze , Sophia ] ;
8170: LD_ADDR_VAR 0 6
8174: PUSH
8175: LD_EXP 21
8179: PUSH
8180: LD_EXP 22
8184: PUSH
8185: LD_EXP 23
8189: PUSH
8190: LD_EXP 24
8194: PUSH
8195: LD_EXP 25
8199: PUSH
8200: LD_EXP 26
8204: PUSH
8205: LD_EXP 28
8209: PUSH
8210: LD_EXP 33
8214: PUSH
8215: LD_EXP 27
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: ST_TO_ADDR
// tmp := tmp diff 0 ;
8231: LD_ADDR_VAR 0 6
8235: PUSH
8236: LD_VAR 0 6
8240: PUSH
8241: LD_INT 0
8243: DIFF
8244: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
8245: LD_ADDR_VAR 0 6
8249: PUSH
8250: LD_VAR 0 6
8254: PPUSH
8255: LD_INT 3
8257: PPUSH
8258: CALL 70365 0 2
8262: ST_TO_ADDR
// for i in heikeVehicles do
8263: LD_ADDR_VAR 0 2
8267: PUSH
8268: LD_EXP 35
8272: PUSH
8273: FOR_IN
8274: IFFALSE 8473
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
8276: LD_INT 5
8278: PPUSH
8279: LD_VAR 0 2
8283: PUSH
8284: LD_INT 5
8286: ARRAY
8287: PPUSH
8288: LD_VAR 0 2
8292: PUSH
8293: LD_INT 1
8295: ARRAY
8296: PPUSH
8297: LD_VAR 0 2
8301: PUSH
8302: LD_INT 2
8304: ARRAY
8305: PPUSH
8306: LD_VAR 0 2
8310: PUSH
8311: LD_INT 3
8313: ARRAY
8314: PPUSH
8315: LD_VAR 0 2
8319: PUSH
8320: LD_INT 4
8322: ARRAY
8323: PPUSH
8324: LD_INT 34
8326: PPUSH
8327: CALL 439 0 7
// veh := CreateVehicle ;
8331: LD_ADDR_VAR 0 5
8335: PUSH
8336: CALL_OW 45
8340: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
8341: LD_VAR 0 2
8345: PUSH
8346: LD_INT 4
8348: ARRAY
8349: PUSH
8350: LD_INT 51
8352: PUSH
8353: LD_INT 32
8355: PUSH
8356: LD_INT 12
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: LIST
8363: IN
8364: IFFALSE 8444
// begin if i [ 7 ] [ 1 ] then
8366: LD_VAR 0 2
8370: PUSH
8371: LD_INT 7
8373: ARRAY
8374: PUSH
8375: LD_INT 1
8377: ARRAY
8378: IFFALSE 8405
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
8380: LD_VAR 0 5
8384: PPUSH
8385: LD_INT 1
8387: PPUSH
8388: LD_VAR 0 2
8392: PUSH
8393: LD_INT 7
8395: ARRAY
8396: PUSH
8397: LD_INT 1
8399: ARRAY
8400: PPUSH
8401: CALL_OW 291
// if i [ 7 ] [ 2 ] then
8405: LD_VAR 0 2
8409: PUSH
8410: LD_INT 7
8412: ARRAY
8413: PUSH
8414: LD_INT 2
8416: ARRAY
8417: IFFALSE 8444
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
8419: LD_VAR 0 5
8423: PPUSH
8424: LD_INT 2
8426: PPUSH
8427: LD_VAR 0 2
8431: PUSH
8432: LD_INT 7
8434: ARRAY
8435: PUSH
8436: LD_INT 2
8438: ARRAY
8439: PPUSH
8440: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8444: LD_VAR 0 5
8448: PPUSH
8449: LD_INT 2
8451: PPUSH
8452: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8456: LD_VAR 0 5
8460: PPUSH
8461: LD_INT 4
8463: PPUSH
8464: LD_INT 0
8466: PPUSH
8467: CALL_OW 49
// end ;
8471: GO 8273
8473: POP
8474: POP
// if tmp then
8475: LD_VAR 0 6
8479: IFFALSE 8589
// begin p := 0 ;
8481: LD_ADDR_VAR 0 3
8485: PUSH
8486: LD_INT 0
8488: ST_TO_ADDR
// for i in tmp do
8489: LD_ADDR_VAR 0 2
8493: PUSH
8494: LD_VAR 0 6
8498: PUSH
8499: FOR_IN
8500: IFFALSE 8587
// begin p := p + 1 ;
8502: LD_ADDR_VAR 0 3
8506: PUSH
8507: LD_VAR 0 3
8511: PUSH
8512: LD_INT 1
8514: PLUS
8515: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHumanArea , false ) ;
8516: LD_VAR 0 2
8520: PPUSH
8521: LD_INT 5
8523: PPUSH
8524: LD_INT 0
8526: PPUSH
8527: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8531: LD_VAR 0 2
8535: PPUSH
8536: LD_INT 26
8538: PPUSH
8539: LD_INT 9
8541: PPUSH
8542: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8546: LD_VAR 0 3
8550: PUSH
8551: LD_EXP 35
8555: GREATEREQUAL
8556: PUSH
8557: LD_VAR 0 2
8561: PPUSH
8562: CALL_OW 257
8566: PUSH
8567: LD_INT 3
8569: EQUAL
8570: AND
8571: IFFALSE 8585
// SetClass ( i , 1 ) ;
8573: LD_VAR 0 2
8577: PPUSH
8578: LD_INT 1
8580: PPUSH
8581: CALL_OW 336
// end ;
8585: GO 8499
8587: POP
8588: POP
// end ; if heikeSecondSquad then
8589: LD_EXP 34
8593: IFFALSE 8707
// for i in heikeSecondSquad do
8595: LD_ADDR_VAR 0 2
8599: PUSH
8600: LD_EXP 34
8604: PUSH
8605: FOR_IN
8606: IFFALSE 8705
// begin p := p + 1 ;
8608: LD_ADDR_VAR 0 3
8612: PUSH
8613: LD_VAR 0 3
8617: PUSH
8618: LD_INT 1
8620: PLUS
8621: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8622: LD_VAR 0 2
8626: PPUSH
8627: LD_INT 6
8629: PPUSH
8630: LD_INT 0
8632: PPUSH
8633: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8637: LD_VAR 0 2
8641: PPUSH
8642: LD_INT 26
8644: PPUSH
8645: LD_INT 9
8647: PPUSH
8648: CALL_OW 118
// ForceSleep ( i , true ) ;
8652: LD_VAR 0 2
8656: PPUSH
8657: LD_INT 1
8659: PPUSH
8660: CALL_OW 585
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8664: LD_VAR 0 3
8668: PUSH
8669: LD_EXP 35
8673: GREATEREQUAL
8674: PUSH
8675: LD_VAR 0 2
8679: PPUSH
8680: CALL_OW 257
8684: PUSH
8685: LD_INT 3
8687: EQUAL
8688: AND
8689: IFFALSE 8703
// SetClass ( i , 1 ) ;
8691: LD_VAR 0 2
8695: PPUSH
8696: LD_INT 1
8698: PPUSH
8699: CALL_OW 336
// end ;
8703: GO 8605
8705: POP
8706: POP
// if heikeApes then
8707: LD_EXP 36
8711: IFFALSE 8754
// for i in heikeApes do
8713: LD_ADDR_VAR 0 2
8717: PUSH
8718: LD_EXP 36
8722: PUSH
8723: FOR_IN
8724: IFFALSE 8752
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
8726: LD_VAR 0 2
8730: PPUSH
8731: LD_INT 7
8733: PPUSH
8734: LD_INT 0
8736: PPUSH
8737: CALL_OW 49
// ComHold ( i ) ;
8741: LD_VAR 0 2
8745: PPUSH
8746: CALL_OW 140
// end ;
8750: GO 8723
8752: POP
8753: POP
// if Kurt then
8754: LD_EXP 32
8758: IFFALSE 8790
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
8760: LD_EXP 32
8764: PPUSH
8765: LD_INT 8
8767: PPUSH
8768: LD_INT 0
8770: PPUSH
8771: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
8775: LD_EXP 32
8779: PPUSH
8780: LD_INT 42
8782: PPUSH
8783: LD_INT 32
8785: PPUSH
8786: CALL_OW 118
// end ; wait ( 0 0$2 ) ;
8790: LD_INT 70
8792: PPUSH
8793: CALL_OW 67
// Say ( Heike , DH-Start-1 ) ;
8797: LD_EXP 21
8801: PPUSH
8802: LD_STRING DH-Start-1
8804: PPUSH
8805: CALL_OW 88
// if Givi then
8809: LD_EXP 22
8813: IFFALSE 9076
// begin Say ( Givi , DG-Start-2-5 ) ;
8815: LD_EXP 22
8819: PPUSH
8820: LD_STRING DG-Start-2-5
8822: PPUSH
8823: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
8827: LD_EXP 21
8831: PPUSH
8832: LD_STRING DH-Start-3
8834: PPUSH
8835: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8839: LD_EXP 21
8843: PPUSH
8844: LD_STRING DH-Start-4
8846: PPUSH
8847: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
8851: LD_EXP 22
8855: PPUSH
8856: LD_STRING DG-Start-5
8858: PPUSH
8859: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
8863: LD_EXP 21
8867: PPUSH
8868: LD_STRING DH-Start-6
8870: PPUSH
8871: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
8875: LD_EXP 22
8879: PPUSH
8880: LD_STRING DG-Start-7
8882: PPUSH
8883: CALL_OW 88
// if Mike then
8887: LD_EXP 23
8891: IFFALSE 9064
// begin Say ( Mike , DM-Start-8 ) ;
8893: LD_EXP 23
8897: PPUSH
8898: LD_STRING DM-Start-8
8900: PPUSH
8901: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
8905: LD_EXP 23
8909: PPUSH
8910: LD_STRING DM-Start-9
8912: PPUSH
8913: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
8917: LD_EXP 22
8921: PPUSH
8922: LD_STRING DG-Start-10
8924: PPUSH
8925: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
8929: LD_EXP 22
8933: PPUSH
8934: LD_STRING DG-Start-11
8936: PPUSH
8937: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
8941: LD_EXP 21
8945: PPUSH
8946: LD_STRING DH-Start-12
8948: PPUSH
8949: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
8953: LD_EXP 22
8957: PPUSH
8958: LD_STRING DG-Start-13
8960: PPUSH
8961: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
8965: LD_EXP 22
8969: PPUSH
8970: LD_STRING DG-Start-14
8972: PPUSH
8973: CALL_OW 88
// if Kaia then
8977: LD_EXP 26
8981: IFFALSE 9064
// begin Say ( Kaia , DK-Start-15 ) ;
8983: LD_EXP 26
8987: PPUSH
8988: LD_STRING DK-Start-15
8990: PPUSH
8991: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
8995: LD_EXP 26
8999: PPUSH
9000: LD_STRING DK-Start-16
9002: PPUSH
9003: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
9007: LD_EXP 26
9011: PPUSH
9012: LD_STRING DK-Start-17
9014: PPUSH
9015: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9019: LD_INT 10
9021: PPUSH
9022: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
9026: LD_EXP 22
9030: PPUSH
9031: LD_EXP 26
9035: PPUSH
9036: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
9040: LD_EXP 22
9044: PPUSH
9045: LD_STRING DG-Start-18
9047: PPUSH
9048: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
9052: LD_EXP 26
9056: PPUSH
9057: LD_STRING DK-Start-19
9059: PPUSH
9060: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
9064: LD_EXP 21
9068: PPUSH
9069: LD_STRING DH-Start-20
9071: PPUSH
9072: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
9076: LD_INT 70
9078: PPUSH
9079: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
9083: LD_EXP 29
9087: PPUSH
9088: LD_STRING DShar-Start-21
9090: PPUSH
9091: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
9095: LD_EXP 21
9099: PPUSH
9100: LD_STRING DH-Start-22
9102: PPUSH
9103: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
9107: LD_EXP 29
9111: PPUSH
9112: LD_STRING DShar-Start-23
9114: PPUSH
9115: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
9119: LD_EXP 29
9123: PPUSH
9124: LD_STRING DShar-Start-24
9126: PPUSH
9127: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
9131: LD_EXP 29
9135: PPUSH
9136: LD_STRING DShar-Start-25
9138: PPUSH
9139: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
9143: LD_EXP 29
9147: PPUSH
9148: LD_STRING DShar-Start-26
9150: PPUSH
9151: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
9155: LD_EXP 21
9159: PPUSH
9160: LD_STRING DH-Start-27
9162: PPUSH
9163: CALL_OW 88
// if Kaia then
9167: LD_EXP 26
9171: IFFALSE 9213
// begin ComTurnUnit ( Heike , Kaia ) ;
9173: LD_EXP 21
9177: PPUSH
9178: LD_EXP 26
9182: PPUSH
9183: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
9187: LD_EXP 26
9191: PPUSH
9192: LD_STRING DK-Start-28
9194: PPUSH
9195: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
9199: LD_EXP 21
9203: PPUSH
9204: LD_STRING DH-Start-29
9206: PPUSH
9207: CALL_OW 88
// end else
9211: GO 9225
// Say ( Heike , DH-Start-a-28 ) ;
9213: LD_EXP 21
9217: PPUSH
9218: LD_STRING DH-Start-a-28
9220: PPUSH
9221: CALL_OW 88
// if Givi then
9225: LD_EXP 22
9229: IFFALSE 9464
// begin ComTurnUnit ( Heike , Givi ) ;
9231: LD_EXP 21
9235: PPUSH
9236: LD_EXP 22
9240: PPUSH
9241: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
9245: LD_EXP 22
9249: PPUSH
9250: LD_EXP 21
9254: PPUSH
9255: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
9259: LD_EXP 21
9263: PPUSH
9264: LD_STRING DH-Start-30
9266: PPUSH
9267: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
9271: LD_EXP 21
9275: PPUSH
9276: LD_STRING DH-Start-31
9278: PPUSH
9279: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
9283: LD_EXP 22
9287: PPUSH
9288: LD_STRING DG-Start-32
9290: PPUSH
9291: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
9295: LD_EXP 21
9299: PPUSH
9300: LD_STRING DH-Start-33
9302: PPUSH
9303: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
9307: LD_EXP 22
9311: PPUSH
9312: LD_STRING DG-Start-34
9314: PPUSH
9315: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
9319: LD_EXP 22
9323: PPUSH
9324: LD_STRING DG-Start-35
9326: PPUSH
9327: CALL_OW 88
// if Kurt and not dialogue_skipped then
9331: LD_EXP 32
9335: PUSH
9336: LD_OWVAR 59
9340: NOT
9341: AND
9342: IFFALSE 9373
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
9344: LD_EXP 32
9348: PPUSH
9349: LD_INT 28
9351: PPUSH
9352: LD_INT 13
9354: PPUSH
9355: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
9359: LD_EXP 32
9363: PPUSH
9364: LD_EXP 21
9368: PPUSH
9369: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
9373: LD_EXP 22
9377: PPUSH
9378: LD_STRING DG-Start-36
9380: PPUSH
9381: CALL_OW 88
// if Kurt then
9385: LD_EXP 32
9389: IFFALSE 9462
// begin if not Givi then
9391: LD_EXP 22
9395: NOT
9396: IFFALSE 9412
// Say ( Kurt , DKs-Start-37-a ) else
9398: LD_EXP 32
9402: PPUSH
9403: LD_STRING DKs-Start-37-a
9405: PPUSH
9406: CALL_OW 88
9410: GO 9424
// Say ( Kurt , DKs-Start-37 ) ;
9412: LD_EXP 32
9416: PPUSH
9417: LD_STRING DKs-Start-37
9419: PPUSH
9420: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
9424: LD_EXP 32
9428: PPUSH
9429: LD_STRING DKs-Start-38
9431: PPUSH
9432: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
9436: LD_EXP 21
9440: PPUSH
9441: LD_EXP 32
9445: PPUSH
9446: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
9450: LD_EXP 21
9454: PPUSH
9455: LD_STRING DH-Start-39
9457: PPUSH
9458: CALL_OW 88
// end ; end else
9462: GO 9493
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
9464: LD_EXP 34
9468: PPUSH
9469: LD_STRING DArm-Start-a-37
9471: PPUSH
9472: LD_STRING DArf-Start-a-37
9474: PPUSH
9475: CALL 1274 0 3
9479: IFFALSE 9493
// Say ( Heike , DH-Start-39 ) ;
9481: LD_EXP 21
9485: PPUSH
9486: LD_STRING DH-Start-39
9488: PPUSH
9489: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
9493: LD_INT 44
9495: PPUSH
9496: LD_INT 25
9498: PPUSH
9499: CALL_OW 428
9503: IFFALSE 9520
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
9505: LD_INT 44
9507: PPUSH
9508: LD_INT 25
9510: PPUSH
9511: CALL_OW 428
9515: PPUSH
9516: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
9520: LD_EXP 30
9524: PPUSH
9525: LD_INT 5
9527: PPUSH
9528: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
9532: LD_EXP 30
9536: PPUSH
9537: LD_INT 44
9539: PPUSH
9540: LD_INT 25
9542: PPUSH
9543: LD_INT 0
9545: PPUSH
9546: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
9550: LD_EXP 30
9554: PPUSH
9555: LD_INT 29
9557: PPUSH
9558: LD_INT 12
9560: PPUSH
9561: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9565: LD_INT 35
9567: PPUSH
9568: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9572: LD_OWVAR 59
9576: PUSH
9577: LD_EXP 21
9581: PPUSH
9582: LD_EXP 30
9586: PPUSH
9587: CALL_OW 296
9591: PUSH
9592: LD_INT 8
9594: LESS
9595: OR
9596: PUSH
9597: LD_EXP 30
9601: PPUSH
9602: LD_INT 26
9604: PPUSH
9605: LD_INT 9
9607: PPUSH
9608: CALL_OW 297
9612: PUSH
9613: LD_INT 6
9615: LESS
9616: OR
9617: IFFALSE 9565
// Say ( Olaf , DO-Scout-1 ) ;
9619: LD_EXP 30
9623: PPUSH
9624: LD_STRING DO-Scout-1
9626: PPUSH
9627: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9631: LD_EXP 30
9635: PPUSH
9636: LD_EXP 21
9640: PPUSH
9641: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9645: LD_ADDR_VAR 0 2
9649: PUSH
9650: LD_VAR 0 6
9654: PUSH
9655: LD_EXP 34
9659: UNION
9660: PUSH
9661: FOR_IN
9662: IFFALSE 9680
// ComTurnUnit ( i , Olaf ) ;
9664: LD_VAR 0 2
9668: PPUSH
9669: LD_EXP 30
9673: PPUSH
9674: CALL_OW 119
9678: GO 9661
9680: POP
9681: POP
// wait ( 0 0$0.3 ) ;
9682: LD_INT 10
9684: PPUSH
9685: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9689: LD_EXP 21
9693: PPUSH
9694: LD_EXP 30
9698: PPUSH
9699: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
9703: LD_EXP 21
9707: PPUSH
9708: LD_EXP 30
9712: PPUSH
9713: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
9717: LD_EXP 21
9721: PPUSH
9722: LD_STRING DH-Scout-2
9724: PPUSH
9725: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
9729: LD_EXP 30
9733: PPUSH
9734: LD_STRING DO-Scout-3
9736: PPUSH
9737: CALL_OW 88
// if Mike and Givi then
9741: LD_EXP 23
9745: PUSH
9746: LD_EXP 22
9750: AND
9751: IFFALSE 9767
// Say ( Olaf , DO-Scout-4 ) else
9753: LD_EXP 30
9757: PPUSH
9758: LD_STRING DO-Scout-4
9760: PPUSH
9761: CALL_OW 88
9765: GO 9867
// begin if Mike then
9767: LD_EXP 23
9771: IFFALSE 9799
// begin Say ( Olaf , DO-Scout-a-4 ) ;
9773: LD_EXP 30
9777: PPUSH
9778: LD_STRING DO-Scout-a-4
9780: PPUSH
9781: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
9785: LD_EXP 21
9789: PPUSH
9790: LD_STRING DH-Scout-a-5
9792: PPUSH
9793: CALL_OW 88
// end else
9797: GO 9867
// if Givi then
9799: LD_EXP 22
9803: IFFALSE 9831
// begin Say ( Olaf , DO-Scout-b-4 ) ;
9805: LD_EXP 30
9809: PPUSH
9810: LD_STRING DO-Scout-b-4
9812: PPUSH
9813: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
9817: LD_EXP 21
9821: PPUSH
9822: LD_STRING DH-Scout-b-5
9824: PPUSH
9825: CALL_OW 88
// end else
9829: GO 9867
// begin Say ( Olaf , DO-Scout-f-4 ) ;
9831: LD_EXP 30
9835: PPUSH
9836: LD_STRING DO-Scout-f-4
9838: PPUSH
9839: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
9843: LD_EXP 21
9847: PPUSH
9848: LD_STRING DH-Scout-f-5
9850: PPUSH
9851: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
9855: LD_EXP 30
9859: PPUSH
9860: LD_STRING DO-Scout-f-6
9862: PPUSH
9863: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
9867: LD_EXP 21
9871: PPUSH
9872: LD_STRING DH-Scout-5
9874: PPUSH
9875: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
9879: LD_EXP 30
9883: PPUSH
9884: LD_STRING DO-Scout-6
9886: PPUSH
9887: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
9891: LD_EXP 30
9895: PPUSH
9896: LD_STRING DO-Scout-7
9898: PPUSH
9899: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
9903: LD_EXP 21
9907: PPUSH
9908: LD_STRING DH-Scout-8
9910: PPUSH
9911: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
9915: LD_EXP 21
9919: PPUSH
9920: LD_STRING DH-Scout-9
9922: PPUSH
9923: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
9927: LD_EXP 30
9931: PPUSH
9932: LD_STRING DO-Scout-10
9934: PPUSH
9935: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
9939: LD_EXP 30
9943: PPUSH
9944: LD_STRING DO-Scout-12
9946: PPUSH
9947: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
9951: LD_EXP 30
9955: PPUSH
9956: LD_STRING DO-Scout-13
9958: PPUSH
9959: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
9963: LD_EXP 30
9967: PPUSH
9968: LD_STRING DO-Scout-14
9970: PPUSH
9971: CALL_OW 88
// if Givi then
9975: LD_EXP 22
9979: IFFALSE 10005
// begin Say ( Givi , DG-Scout-15 ) ;
9981: LD_EXP 22
9985: PPUSH
9986: LD_STRING DG-Scout-15
9988: PPUSH
9989: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
9993: LD_EXP 26
9997: PPUSH
9998: LD_STRING DK-Scout-16
10000: PPUSH
10001: CALL_OW 88
// end ; if not dialogue_skipped then
10005: LD_OWVAR 59
10009: NOT
10010: IFFALSE 10131
// begin async ;
10012: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
10013: LD_EXP 30
10017: PPUSH
10018: LD_STRING DO-Scout-17
10020: PPUSH
10021: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10025: LD_INT 55
10027: PPUSH
10028: LD_INT 77
10030: PPUSH
10031: LD_INT 2
10033: PPUSH
10034: LD_INT 6
10036: NEG
10037: PPUSH
10038: CALL 1223 0 4
// wait ( 10 ) ;
10042: LD_INT 10
10044: PPUSH
10045: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
10049: LD_INT 55
10051: PPUSH
10052: LD_INT 77
10054: PPUSH
10055: CALL_OW 84
// wait ( 0 0$10 ) ;
10059: LD_INT 350
10061: PPUSH
10062: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
10066: LD_EXP 30
10070: PPUSH
10071: LD_STRING DO-Scout-18
10073: PPUSH
10074: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10078: LD_INT 204
10080: PPUSH
10081: LD_INT 107
10083: PPUSH
10084: LD_INT 2
10086: PPUSH
10087: LD_INT 12
10089: NEG
10090: PPUSH
10091: CALL 1223 0 4
// wait ( 10 ) ;
10095: LD_INT 10
10097: PPUSH
10098: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
10102: LD_INT 204
10104: PPUSH
10105: LD_INT 107
10107: PPUSH
10108: CALL_OW 84
// wait ( 0 0$10 ) ;
10112: LD_INT 350
10114: PPUSH
10115: CALL_OW 67
// sync ;
10119: SYNC
// CenterNowOnUnits ( Heike ) ;
10120: LD_EXP 21
10124: PPUSH
10125: CALL_OW 87
// end else
10129: GO 10165
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10131: LD_INT 55
10133: PPUSH
10134: LD_INT 77
10136: PPUSH
10137: LD_INT 2
10139: PPUSH
10140: LD_INT 6
10142: NEG
10143: PPUSH
10144: CALL 1223 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10148: LD_INT 204
10150: PPUSH
10151: LD_INT 107
10153: PPUSH
10154: LD_INT 2
10156: PPUSH
10157: LD_INT 12
10159: NEG
10160: PPUSH
10161: CALL 1223 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
10165: LD_EXP 30
10169: PPUSH
10170: LD_STRING DO-Scout-19
10172: PPUSH
10173: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
10177: LD_EXP 30
10181: PPUSH
10182: LD_STRING DO-Scout-20
10184: PPUSH
10185: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
10189: LD_EXP 21
10193: PPUSH
10194: LD_STRING DH-Scout-21
10196: PPUSH
10197: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
10201: LD_EXP 21
10205: PPUSH
10206: LD_STRING DH-Scout-22
10208: PPUSH
10209: CALL_OW 88
// InGameOff ;
10213: CALL_OW 9
// if heikeSecondSquad then
10217: LD_EXP 34
10221: IFFALSE 10235
// ForceSleep ( heikeSecondSquad , false ) ;
10223: LD_EXP 34
10227: PPUSH
10228: LD_INT 0
10230: PPUSH
10231: CALL_OW 585
// if Givi then
10235: LD_EXP 22
10239: IFFALSE 10254
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
10241: LD_INT 13
10243: PPUSH
10244: LD_INT 2
10246: PPUSH
10247: LD_INT 1
10249: PPUSH
10250: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
10254: LD_STRING Road
10256: PPUSH
10257: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
10261: LD_ADDR_VAR 0 2
10265: PUSH
10266: LD_INT 22
10268: PUSH
10269: LD_INT 5
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 21
10278: PUSH
10279: LD_INT 2
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PPUSH
10290: CALL_OW 69
10294: PUSH
10295: FOR_IN
10296: IFFALSE 10312
// SetSide ( i , 2 ) ;
10298: LD_VAR 0 2
10302: PPUSH
10303: LD_INT 2
10305: PPUSH
10306: CALL_OW 235
10310: GO 10295
10312: POP
10313: POP
// SaveForQuickRestart ;
10314: CALL_OW 22
// music_class := music_auto ;
10318: LD_ADDR_OWVAR 72
10322: PUSH
10323: LD_INT 0
10325: ST_TO_ADDR
// end ;
10326: LD_VAR 0 1
10330: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
10331: LD_INT 2
10333: PPUSH
10334: LD_INT 9
10336: PPUSH
10337: CALL_OW 294
10341: IFFALSE 10708
10343: GO 10345
10345: DISABLE
// begin DialogueOn ;
10346: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
10350: LD_INT 111
10352: PPUSH
10353: LD_INT 72
10355: PPUSH
10356: LD_INT 2
10358: PPUSH
10359: LD_INT 20
10361: NEG
10362: PPUSH
10363: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
10367: LD_INT 111
10369: PPUSH
10370: LD_INT 72
10372: PPUSH
10373: LD_INT 2
10375: PPUSH
10376: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
10380: LD_INT 111
10382: PPUSH
10383: LD_INT 72
10385: PPUSH
10386: CALL_OW 86
// if IsOk ( Kamil ) then
10390: LD_EXP 25
10394: PPUSH
10395: CALL_OW 302
10399: IFFALSE 10516
// begin Say ( Kamil , DKam-Cross-1 ) ;
10401: LD_EXP 25
10405: PPUSH
10406: LD_STRING DKam-Cross-1
10408: PPUSH
10409: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
10413: LD_EXP 25
10417: PPUSH
10418: LD_STRING DKam-Cross-2
10420: PPUSH
10421: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
10425: LD_EXP 25
10429: PPUSH
10430: LD_STRING DKam-Cross-3
10432: PPUSH
10433: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
10437: LD_EXP 25
10441: PPUSH
10442: LD_STRING DKam-Cross-4
10444: PPUSH
10445: CALL_OW 88
// if IsOk ( Ibrahim ) then
10449: LD_EXP 24
10453: PPUSH
10454: CALL_OW 302
10458: IFFALSE 10514
// begin if ibrahimJoinedIn04 then
10460: LD_EXP 4
10464: IFFALSE 10478
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10466: LD_EXP 24
10470: PPUSH
10471: LD_STRING DI-Cross-b-5
10473: PPUSH
10474: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10478: LD_EXP 24
10482: PPUSH
10483: LD_STRING DI-Cross-b-6
10485: PPUSH
10486: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10490: LD_EXP 24
10494: PPUSH
10495: LD_STRING DI-Cross-b-7
10497: PPUSH
10498: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
10502: LD_EXP 25
10506: PPUSH
10507: LD_STRING DKam-Cross-8
10509: PPUSH
10510: CALL_OW 88
// end ; end else
10514: GO 10674
// if IsOk ( Sophia ) then
10516: LD_EXP 27
10520: PPUSH
10521: CALL_OW 302
10525: IFFALSE 10642
// begin Say ( Sophia , DS-Cross-1 ) ;
10527: LD_EXP 27
10531: PPUSH
10532: LD_STRING DS-Cross-1
10534: PPUSH
10535: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
10539: LD_EXP 27
10543: PPUSH
10544: LD_STRING DS-Cross-2
10546: PPUSH
10547: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
10551: LD_EXP 27
10555: PPUSH
10556: LD_STRING DS-Cross-3
10558: PPUSH
10559: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
10563: LD_EXP 27
10567: PPUSH
10568: LD_STRING DS-Cross-4
10570: PPUSH
10571: CALL_OW 88
// if IsOk ( Ibrahim ) then
10575: LD_EXP 24
10579: PPUSH
10580: CALL_OW 302
10584: IFFALSE 10640
// begin if ibrahimJoinedIn04 then
10586: LD_EXP 4
10590: IFFALSE 10604
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10592: LD_EXP 24
10596: PPUSH
10597: LD_STRING DI-Cross-b-5
10599: PPUSH
10600: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10604: LD_EXP 24
10608: PPUSH
10609: LD_STRING DI-Cross-b-6
10611: PPUSH
10612: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10616: LD_EXP 24
10620: PPUSH
10621: LD_STRING DI-Cross-b-7
10623: PPUSH
10624: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10628: LD_EXP 27
10632: PPUSH
10633: LD_STRING DS-Cross-8
10635: PPUSH
10636: CALL_OW 88
// end ; end else
10640: GO 10674
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10642: LD_EXP 34
10646: PPUSH
10647: LD_INT 50
10649: PUSH
10650: EMPTY
10651: LIST
10652: PPUSH
10653: CALL_OW 72
10657: IFFALSE 10674
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10659: LD_EXP 34
10663: PPUSH
10664: LD_STRING DArm-Cross-c-1
10666: PPUSH
10667: LD_STRING DArf-Cross-c-1
10669: PPUSH
10670: CALL 1274 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10674: LD_EXP 58
10678: PPUSH
10679: LD_INT 2
10681: PPUSH
10682: LD_INT 1
10684: PPUSH
10685: CALL_OW 322
// DialogueOff ;
10689: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
10693: LD_STRING Crane
10695: PPUSH
10696: CALL_OW 337
// spottedCrossRoad := true ;
10700: LD_ADDR_EXP 8
10704: PUSH
10705: LD_INT 1
10707: ST_TO_ADDR
// end ;
10708: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
10709: LD_INT 22
10711: PUSH
10712: LD_INT 2
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: PUSH
10719: LD_INT 2
10721: PUSH
10722: LD_INT 30
10724: PUSH
10725: LD_INT 0
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: PUSH
10732: LD_INT 30
10734: PUSH
10735: LD_INT 1
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: LIST
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: PPUSH
10751: CALL_OW 69
10755: PUSH
10756: LD_EXP 26
10760: PPUSH
10761: CALL_OW 302
10765: PUSH
10766: LD_EXP 34
10770: OR
10771: AND
10772: IFFALSE 10984
10774: GO 10776
10776: DISABLE
// begin DialogueOn ;
10777: CALL_OW 6
// if Kaia then
10781: LD_EXP 26
10785: IFFALSE 10798
// CenterNowOnUnits ( Kaia ) else
10787: LD_EXP 26
10791: PPUSH
10792: CALL_OW 87
10796: GO 10807
// CenterNowOnUnits ( Heike ) ;
10798: LD_EXP 21
10802: PPUSH
10803: CALL_OW 87
// if IsOk ( Kaia ) then
10807: LD_EXP 26
10811: PPUSH
10812: CALL_OW 302
10816: IFFALSE 10832
// Say ( Kaia , DK-Cam-1 ) else
10818: LD_EXP 26
10822: PPUSH
10823: LD_STRING DK-Cam-1
10825: PPUSH
10826: CALL_OW 88
10830: GO 10847
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
10832: LD_EXP 34
10836: PPUSH
10837: LD_STRING DArm-Cam-1
10839: PPUSH
10840: LD_STRING DArf-Cam-1
10842: PPUSH
10843: CALL 1274 0 3
// Say ( Heike , DH-Cam-2 ) ;
10847: LD_EXP 21
10851: PPUSH
10852: LD_STRING DH-Cam-2
10854: PPUSH
10855: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
10859: LD_EXP 21
10863: PPUSH
10864: LD_STRING DH-Cam-3
10866: PPUSH
10867: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10871: LD_EXP 21
10875: PPUSH
10876: LD_STRING DH-Cam-4
10878: PPUSH
10879: CALL_OW 88
// if IsOk ( Kaia ) then
10883: LD_EXP 26
10887: PPUSH
10888: CALL_OW 302
10892: IFFALSE 10908
// Say ( Kaia , DK-Cam-5 ) else
10894: LD_EXP 26
10898: PPUSH
10899: LD_STRING DK-Cam-5
10901: PPUSH
10902: CALL_OW 88
10906: GO 10923
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
10908: LD_EXP 34
10912: PPUSH
10913: LD_STRING DArm-Cam-5
10915: PPUSH
10916: LD_STRING DArf-Cam-5
10918: PPUSH
10919: CALL 1274 0 3
// Say ( Olaf , DO-Cam-6 ) ;
10923: LD_EXP 30
10927: PPUSH
10928: LD_STRING DO-Cam-6
10930: PPUSH
10931: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
10935: LD_EXP 30
10939: PPUSH
10940: LD_STRING DO-Cam-7
10942: PPUSH
10943: CALL_OW 88
// DialogueOff ;
10947: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
10951: LD_STRING Radar
10953: PPUSH
10954: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
10958: LD_INT 6
10960: PPUSH
10961: LD_INT 2
10963: PPUSH
10964: LD_INT 1
10966: PPUSH
10967: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
10971: LD_INT 20
10973: PPUSH
10974: LD_INT 2
10976: PPUSH
10977: LD_INT 1
10979: PPUSH
10980: CALL_OW 324
// end ;
10984: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
10985: LD_INT 22
10987: PUSH
10988: LD_INT 2
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PUSH
10995: LD_INT 2
10997: PUSH
10998: LD_INT 34
11000: PUSH
11001: LD_INT 30
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: PUSH
11008: LD_INT 35
11010: PUSH
11011: LD_INT 30
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: LIST
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PPUSH
11027: CALL_OW 69
11031: IFFALSE 11043
11033: GO 11035
11035: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
11036: LD_STRING RadarDone
11038: PPUSH
11039: CALL_OW 337
11043: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
11044: LD_INT 22
11046: PUSH
11047: LD_INT 2
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PUSH
11054: LD_INT 34
11056: PUSH
11057: LD_EXP 50
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PPUSH
11070: CALL_OW 69
11074: IFFALSE 11086
11076: GO 11078
11078: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
11079: LD_STRING CraneDone
11081: PPUSH
11082: CALL_OW 337
11086: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
11087: LD_EXP 30
11091: PPUSH
11092: CALL_OW 302
11096: PUSH
11097: LD_EXP 33
11101: PPUSH
11102: CALL_OW 302
11106: AND
11107: PUSH
11108: LD_INT 6
11110: PPUSH
11111: LD_INT 2
11113: PPUSH
11114: CALL_OW 321
11118: PUSH
11119: LD_INT 2
11121: EQUAL
11122: AND
11123: PUSH
11124: LD_EXP 33
11128: PPUSH
11129: LD_EXP 21
11133: PPUSH
11134: CALL_OW 296
11138: PUSH
11139: LD_INT 10
11141: LESS
11142: PUSH
11143: LD_EXP 33
11147: PPUSH
11148: CALL_OW 310
11152: OR
11153: AND
11154: IFFALSE 11368
11156: GO 11158
11158: DISABLE
// begin DialogueOn ;
11159: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
11163: LD_EXP 33
11167: PPUSH
11168: LD_STRING DA-RC-1
11170: PPUSH
11171: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
11175: LD_EXP 33
11179: PPUSH
11180: LD_STRING DA-RC-2
11182: PPUSH
11183: CALL_OW 88
// if IsOk ( Kaia ) then
11187: LD_EXP 26
11191: PPUSH
11192: CALL_OW 302
11196: IFFALSE 11270
// begin Say ( Kaia , DK-RC-3 ) ;
11198: LD_EXP 26
11202: PPUSH
11203: LD_STRING DK-RC-3
11205: PPUSH
11206: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
11210: LD_EXP 33
11214: PPUSH
11215: LD_STRING DA-RC-4
11217: PPUSH
11218: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
11222: LD_EXP 26
11226: PPUSH
11227: LD_STRING DK-RC-5
11229: PPUSH
11230: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
11234: LD_EXP 33
11238: PPUSH
11239: LD_STRING DA-RC-6
11241: PPUSH
11242: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
11246: LD_EXP 26
11250: PPUSH
11251: LD_STRING DK-RC-7
11253: PPUSH
11254: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
11258: LD_EXP 33
11262: PPUSH
11263: LD_STRING DA-RC-8
11265: PPUSH
11266: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
11270: LD_EXP 21
11274: PPUSH
11275: LD_STRING DH-RC-9
11277: PPUSH
11278: CALL_OW 88
// if IsOk ( Markov ) then
11282: LD_EXP 28
11286: PPUSH
11287: CALL_OW 302
11291: IFFALSE 11319
// begin Say ( Markov , DMar-RC-10 ) ;
11293: LD_EXP 28
11297: PPUSH
11298: LD_STRING DMar-RC-10
11300: PPUSH
11301: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
11305: LD_EXP 28
11309: PPUSH
11310: LD_STRING DMar-RC-11
11312: PPUSH
11313: CALL_OW 88
// end else
11317: GO 11331
// begin Say ( Olaf , DO-RC-a-10 ) ;
11319: LD_EXP 30
11323: PPUSH
11324: LD_STRING DO-RC-a-10
11326: PPUSH
11327: CALL_OW 88
// end ; DialogueOff ;
11331: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
11335: LD_STRING RemoteControl
11337: PPUSH
11338: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
11342: LD_INT 15
11344: PPUSH
11345: LD_INT 2
11347: PPUSH
11348: LD_INT 1
11350: PPUSH
11351: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
11355: LD_INT 22
11357: PPUSH
11358: LD_INT 2
11360: PPUSH
11361: LD_INT 1
11363: PPUSH
11364: CALL_OW 324
// end ;
11368: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
11369: LD_INT 12
11371: PPUSH
11372: LD_INT 22
11374: PUSH
11375: LD_INT 2
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: PPUSH
11382: CALL_OW 70
11386: IFFALSE 11753
11388: GO 11390
11390: DISABLE
11391: LD_INT 0
11393: PPUSH
// begin PrepareWestBase ;
11394: CALL 3992 0 0
// westBaseSpotted := true ;
11398: LD_ADDR_EXP 5
11402: PUSH
11403: LD_INT 1
11405: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11406: LD_INT 70
11408: PPUSH
11409: CALL_OW 67
// InGameOn ;
11413: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
11417: LD_INT 56
11419: PPUSH
11420: LD_INT 77
11422: PPUSH
11423: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
11427: LD_INT 56
11429: PPUSH
11430: LD_INT 77
11432: PPUSH
11433: LD_INT 2
11435: PPUSH
11436: LD_INT 12
11438: NEG
11439: PPUSH
11440: CALL_OW 330
// wait ( 0 0$2 ) ;
11444: LD_INT 70
11446: PPUSH
11447: CALL_OW 67
// DialogueOn ;
11451: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
11455: LD_EXP 21
11459: PPUSH
11460: LD_STRING DH-Rbase-1
11462: PPUSH
11463: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
11467: LD_EXP 26
11471: PPUSH
11472: LD_STRING DK-Rbase-2
11474: PPUSH
11475: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
11479: LD_EXP 26
11483: PPUSH
11484: LD_STRING DK-Rbase-3
11486: PPUSH
11487: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
11491: LD_EXP 26
11495: PPUSH
11496: LD_STRING DK-Rbase-4
11498: PPUSH
11499: CALL_OW 88
// DialogueOff ;
11503: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
11507: LD_INT 56
11509: PPUSH
11510: LD_INT 77
11512: PPUSH
11513: LD_INT 2
11515: PPUSH
11516: CALL_OW 331
// InGameOff ;
11520: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
11524: LD_INT 35
11526: PPUSH
11527: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
11531: LD_EXP 42
11535: NOT
11536: PUSH
11537: LD_EXP 43
11541: NOT
11542: AND
11543: IFFALSE 11524
// wait ( 0 0$2 ) ;
11545: LD_INT 70
11547: PPUSH
11548: CALL_OW 67
// if IsOk ( Kaia ) then
11552: LD_EXP 26
11556: PPUSH
11557: CALL_OW 302
11561: IFFALSE 11676
// begin DialogueOn ;
11563: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
11567: LD_INT 56
11569: PPUSH
11570: LD_INT 81
11572: PPUSH
11573: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11577: LD_EXP 26
11581: PPUSH
11582: LD_STRING DK-Rbase-5
11584: PPUSH
11585: CALL_OW 88
// if IsOk ( Givi ) then
11589: LD_EXP 22
11593: PPUSH
11594: CALL_OW 302
11598: IFFALSE 11672
// begin Say ( Givi , DG-Rbase-6 ) ;
11600: LD_EXP 22
11604: PPUSH
11605: LD_STRING DG-Rbase-6
11607: PPUSH
11608: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11612: LD_EXP 22
11616: PPUSH
11617: LD_STRING DG-Rbase-7
11619: PPUSH
11620: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11624: LD_EXP 26
11628: PPUSH
11629: LD_STRING DK-Rbase-8
11631: PPUSH
11632: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11636: LD_EXP 22
11640: PPUSH
11641: LD_STRING DG-Rbase-9
11643: PPUSH
11644: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11648: LD_EXP 22
11652: PPUSH
11653: LD_STRING DG-Rbase-10
11655: PPUSH
11656: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11660: LD_EXP 26
11664: PPUSH
11665: LD_STRING DK-Rbase-11
11667: PPUSH
11668: CALL_OW 88
// end ; DialogueOff ;
11672: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11676: LD_ADDR_VAR 0 1
11680: PUSH
11681: LD_INT 12
11683: PPUSH
11684: LD_INT 22
11686: PUSH
11687: LD_INT 3
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: PUSH
11694: LD_INT 21
11696: PUSH
11697: LD_INT 3
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: PPUSH
11708: CALL_OW 70
11712: PUSH
11713: FOR_IN
11714: IFFALSE 11730
// SetSide ( i , 2 ) ;
11716: LD_VAR 0 1
11720: PPUSH
11721: LD_INT 2
11723: PPUSH
11724: CALL_OW 235
11728: GO 11713
11730: POP
11731: POP
// westBaseCaptured := true ;
11732: LD_ADDR_EXP 9
11736: PUSH
11737: LD_INT 1
11739: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
11740: LD_INT 0
11742: PPUSH
11743: LD_INT 2
11745: PPUSH
11746: LD_INT 1
11748: PPUSH
11749: CALL_OW 324
// end ;
11753: PPOPN 1
11755: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
11756: LD_EXP 38
11760: NOT
11761: PUSH
11762: LD_INT 10
11764: PPUSH
11765: CALL_OW 255
11769: PUSH
11770: LD_INT 2
11772: EQUAL
11773: OR
11774: IFFALSE 11911
11776: GO 11778
11778: DISABLE
// begin DialogueOn ;
11779: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
11783: LD_EXP 21
11787: PPUSH
11788: LD_STRING DH-Goal-1
11790: PPUSH
11791: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
11795: LD_EXP 29
11799: PPUSH
11800: LD_STRING DShar-Goal-2
11802: PPUSH
11803: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
11807: LD_EXP 21
11811: PPUSH
11812: LD_STRING DH-Goal-3
11814: PPUSH
11815: CALL_OW 88
// if reinforcementsAllowed then
11819: LD_EXP 14
11823: IFFALSE 11849
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
11825: LD_EXP 29
11829: PPUSH
11830: LD_STRING DShar-Goal-4
11832: PPUSH
11833: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
11837: LD_EXP 21
11841: PPUSH
11842: LD_STRING DH-Goal-5
11844: PPUSH
11845: CALL_OW 88
// end ; DialogueOff ;
11849: CALL_OW 7
// eastBaseCaptured := true ;
11853: LD_ADDR_EXP 10
11857: PUSH
11858: LD_INT 1
11860: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
11861: LD_STRING BaseCaptured
11863: PPUSH
11864: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
11868: LD_INT 10
11870: PPUSH
11871: LD_INT 2
11873: PPUSH
11874: CALL_OW 235
// if not reinforcementsAllowed then
11878: LD_EXP 14
11882: NOT
11883: IFFALSE 11887
// exit ;
11885: GO 11911
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
11887: LD_INT 21000
11889: PUSH
11890: LD_INT 1050
11892: NEG
11893: PPUSH
11894: LD_INT 1050
11896: PPUSH
11897: CALL_OW 12
11901: PLUS
11902: PPUSH
11903: CALL_OW 67
// PrepareReinforcements ;
11907: CALL 2250 0 0
// end ;
11911: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
11912: LD_INT 22
11914: PUSH
11915: LD_INT 2
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PUSH
11922: LD_INT 30
11924: PUSH
11925: LD_INT 13
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PPUSH
11936: CALL_OW 69
11940: IFFALSE 11957
11942: GO 11944
11944: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
11945: LD_EXP 22
11949: PPUSH
11950: LD_STRING DG-Lab-1
11952: PPUSH
11953: CALL_OW 88
// end ;
11957: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
11958: LD_INT 5
11960: PPUSH
11961: LD_INT 2
11963: PPUSH
11964: CALL_OW 321
11968: PUSH
11969: LD_INT 2
11971: EQUAL
11972: PUSH
11973: LD_EXP 22
11977: PPUSH
11978: CALL_OW 302
11982: AND
11983: IFFALSE 12044
11985: GO 11987
11987: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
11988: LD_EXP 22
11992: PPUSH
11993: LD_STRING DG-Stim-1
11995: PPUSH
11996: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
12000: LD_EXP 21
12004: PPUSH
12005: LD_STRING DH-Stim-2
12007: PPUSH
12008: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
12012: LD_EXP 22
12016: PPUSH
12017: LD_STRING DG-Stim-3
12019: PPUSH
12020: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
12024: LD_EXP 21
12028: PPUSH
12029: LD_STRING DH-Stim-4
12031: PPUSH
12032: CALL_OW 88
// drugsResearched := true ;
12036: LD_ADDR_EXP 11
12040: PUSH
12041: LD_INT 1
12043: ST_TO_ADDR
// end ;
12044: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
12045: LD_EXP 11
12049: IFFALSE 12361
12051: GO 12053
12053: DISABLE
12054: LD_INT 0
12056: PPUSH
12057: PPUSH
12058: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12059: LD_ADDR_VAR 0 2
12063: PUSH
12064: LD_EXP 21
12068: PUSH
12069: LD_EXP 22
12073: PUSH
12074: LD_EXP 30
12078: PUSH
12079: LD_EXP 28
12083: PUSH
12084: LD_EXP 26
12088: PUSH
12089: LD_EXP 27
12093: PUSH
12094: LD_EXP 32
12098: PUSH
12099: LD_EXP 25
12103: PUSH
12104: LD_EXP 23
12108: PUSH
12109: LD_EXP 24
12113: PUSH
12114: LD_EXP 33
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12132: LD_ADDR_VAR 0 3
12136: PUSH
12137: LD_STRING H
12139: PUSH
12140: LD_STRING G
12142: PUSH
12143: LD_STRING O
12145: PUSH
12146: LD_STRING Mar
12148: PUSH
12149: LD_STRING K
12151: PUSH
12152: LD_STRING S
12154: PUSH
12155: LD_STRING Ks
12157: PUSH
12158: LD_STRING Kam
12160: PUSH
12161: LD_STRING M
12163: PUSH
12164: LD_STRING I
12166: PUSH
12167: LD_STRING A
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12183: LD_INT 35
12185: PPUSH
12186: CALL_OW 67
// for i := tmp downto 1 do
12190: LD_ADDR_VAR 0 1
12194: PUSH
12195: DOUBLE
12196: LD_VAR 0 2
12200: INC
12201: ST_TO_ADDR
12202: LD_INT 1
12204: PUSH
12205: FOR_DOWNTO
12206: IFFALSE 12352
// if GetLives ( tmp [ i ] ) < 250 then
12208: LD_VAR 0 2
12212: PUSH
12213: LD_VAR 0 1
12217: ARRAY
12218: PPUSH
12219: CALL_OW 256
12223: PUSH
12224: LD_INT 250
12226: LESS
12227: IFFALSE 12350
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
12229: LD_ADDR_EXP 19
12233: PUSH
12234: LD_EXP 19
12238: PUSH
12239: LD_INT 1
12241: PLUS
12242: ST_TO_ADDR
// DialogueOn ;
12243: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
12247: LD_VAR 0 2
12251: PUSH
12252: LD_VAR 0 1
12256: ARRAY
12257: PPUSH
12258: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
12262: LD_VAR 0 2
12266: PUSH
12267: LD_VAR 0 1
12271: ARRAY
12272: PPUSH
12273: LD_STRING D
12275: PUSH
12276: LD_VAR 0 3
12280: PUSH
12281: LD_VAR 0 1
12285: ARRAY
12286: STR
12287: PUSH
12288: LD_STRING -Stim-a-1
12290: STR
12291: PPUSH
12292: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
12296: LD_ADDR_VAR 0 2
12300: PUSH
12301: LD_VAR 0 2
12305: PPUSH
12306: LD_VAR 0 1
12310: PPUSH
12311: CALL_OW 3
12315: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12316: LD_ADDR_VAR 0 3
12320: PUSH
12321: LD_VAR 0 3
12325: PPUSH
12326: LD_VAR 0 1
12330: PPUSH
12331: CALL_OW 3
12335: ST_TO_ADDR
// drugsTested := true ;
12336: LD_ADDR_EXP 6
12340: PUSH
12341: LD_INT 1
12343: ST_TO_ADDR
// DialogueOff ;
12344: CALL_OW 7
// break ;
12348: GO 12352
// end ;
12350: GO 12205
12352: POP
12353: POP
// until not tmp ;
12354: LD_VAR 0 2
12358: NOT
12359: IFFALSE 12183
// end ;
12361: PPOPN 3
12363: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
12364: LD_INT 22
12366: PUSH
12367: LD_INT 2
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PUSH
12374: LD_INT 34
12376: PUSH
12377: LD_INT 31
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: PPUSH
12388: CALL_OW 69
12392: PUSH
12393: LD_INT 22
12395: PUSH
12396: LD_INT 2
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: LD_INT 33
12405: PUSH
12406: LD_INT 2
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: PPUSH
12417: CALL_OW 69
12421: AND
12422: IFFALSE 12435
12424: GO 12426
12426: DISABLE
// remoteControlConstructed := true ;
12427: LD_ADDR_EXP 12
12431: PUSH
12432: LD_INT 1
12434: ST_TO_ADDR
12435: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
12436: LD_EXP 12
12440: IFFALSE 12740
12442: GO 12444
12444: DISABLE
12445: LD_INT 0
12447: PPUSH
12448: PPUSH
12449: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12450: LD_ADDR_VAR 0 2
12454: PUSH
12455: LD_EXP 21
12459: PUSH
12460: LD_EXP 22
12464: PUSH
12465: LD_EXP 30
12469: PUSH
12470: LD_EXP 28
12474: PUSH
12475: LD_EXP 26
12479: PUSH
12480: LD_EXP 27
12484: PUSH
12485: LD_EXP 32
12489: PUSH
12490: LD_EXP 25
12494: PUSH
12495: LD_EXP 23
12499: PUSH
12500: LD_EXP 24
12504: PUSH
12505: LD_EXP 33
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12523: LD_ADDR_VAR 0 3
12527: PUSH
12528: LD_STRING H
12530: PUSH
12531: LD_STRING G
12533: PUSH
12534: LD_STRING O
12536: PUSH
12537: LD_STRING Mar
12539: PUSH
12540: LD_STRING K
12542: PUSH
12543: LD_STRING S
12545: PUSH
12546: LD_STRING Ks
12548: PUSH
12549: LD_STRING Kam
12551: PUSH
12552: LD_STRING M
12554: PUSH
12555: LD_STRING I
12557: PUSH
12558: LD_STRING A
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12574: LD_INT 35
12576: PPUSH
12577: CALL_OW 67
// for i := tmp downto 1 do
12581: LD_ADDR_VAR 0 1
12585: PUSH
12586: DOUBLE
12587: LD_VAR 0 2
12591: INC
12592: ST_TO_ADDR
12593: LD_INT 1
12595: PUSH
12596: FOR_DOWNTO
12597: IFFALSE 12731
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
12599: LD_VAR 0 2
12603: PUSH
12604: LD_VAR 0 1
12608: ARRAY
12609: PPUSH
12610: CALL_OW 257
12614: PUSH
12615: LD_INT 3
12617: EQUAL
12618: PUSH
12619: LD_VAR 0 2
12623: PUSH
12624: LD_VAR 0 1
12628: ARRAY
12629: PPUSH
12630: CALL_OW 432
12634: AND
12635: IFFALSE 12729
// begin DialogueOn ;
12637: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12641: LD_VAR 0 2
12645: PUSH
12646: LD_VAR 0 1
12650: ARRAY
12651: PPUSH
12652: LD_STRING D
12654: PUSH
12655: LD_VAR 0 3
12659: PUSH
12660: LD_VAR 0 1
12664: ARRAY
12665: STR
12666: PUSH
12667: LD_STRING -RC-a-1
12669: STR
12670: PPUSH
12671: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12675: LD_ADDR_VAR 0 2
12679: PUSH
12680: LD_VAR 0 2
12684: PPUSH
12685: LD_VAR 0 1
12689: PPUSH
12690: CALL_OW 3
12694: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12695: LD_ADDR_VAR 0 3
12699: PUSH
12700: LD_VAR 0 3
12704: PPUSH
12705: LD_VAR 0 1
12709: PPUSH
12710: CALL_OW 3
12714: ST_TO_ADDR
// DialogueOff ;
12715: CALL_OW 7
// remoteControlTested := true ;
12719: LD_ADDR_EXP 7
12723: PUSH
12724: LD_INT 1
12726: ST_TO_ADDR
// break ;
12727: GO 12731
// end ;
12729: GO 12596
12731: POP
12732: POP
// until not tmp ;
12733: LD_VAR 0 2
12737: NOT
12738: IFFALSE 12574
// end ;
12740: PPOPN 3
12742: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
12743: LD_EXP 7
12747: PUSH
12748: LD_EXP 28
12752: PPUSH
12753: CALL_OW 302
12757: AND
12758: IFFALSE 12787
12760: GO 12762
12762: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
12763: LD_EXP 28
12767: PPUSH
12768: LD_STRING DMar-RC-a-2
12770: PPUSH
12771: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
12775: LD_EXP 28
12779: PPUSH
12780: LD_STRING DMar-RC-a-3
12782: PPUSH
12783: CALL_OW 88
// end ;
12787: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
12788: LD_EXP 14
12792: PUSH
12793: LD_EXP 21
12797: PPUSH
12798: LD_EXP 33
12802: PPUSH
12803: CALL_OW 296
12807: PUSH
12808: LD_INT 8
12810: LESS
12811: AND
12812: PUSH
12813: LD_INT 2
12815: PPUSH
12816: CALL_OW 463
12820: NOT
12821: AND
12822: PUSH
12823: LD_EXP 33
12827: PPUSH
12828: CALL_OW 302
12832: AND
12833: PUSH
12834: LD_EXP 21
12838: PPUSH
12839: CALL_OW 302
12843: AND
12844: IFFALSE 13022
12846: GO 12848
12848: DISABLE
// begin if not IsInUnit ( Aviradze ) then
12849: LD_EXP 33
12853: PPUSH
12854: CALL_OW 310
12858: NOT
12859: IFFALSE 12875
// ComTurnUnit ( Aviradze , Heike ) ;
12861: LD_EXP 33
12865: PPUSH
12866: LD_EXP 21
12870: PPUSH
12871: CALL_OW 119
// if not IsInUnit ( Heike ) then
12875: LD_EXP 21
12879: PPUSH
12880: CALL_OW 310
12884: NOT
12885: IFFALSE 12901
// ComTurnUnit ( Heike , Aviradze ) ;
12887: LD_EXP 21
12891: PPUSH
12892: LD_EXP 33
12896: PPUSH
12897: CALL_OW 119
// wait ( 0 0$1 ) ;
12901: LD_INT 35
12903: PPUSH
12904: CALL_OW 67
// DialogueOn ;
12908: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
12912: LD_EXP 33
12916: PPUSH
12917: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
12921: LD_EXP 21
12925: PPUSH
12926: LD_STRING DH-Beria-1
12928: PPUSH
12929: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
12933: LD_EXP 33
12937: PPUSH
12938: LD_STRING DA-Beria-2
12940: PPUSH
12941: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
12945: LD_EXP 21
12949: PPUSH
12950: LD_STRING DH-Beria-3
12952: PPUSH
12953: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
12957: LD_EXP 33
12961: PPUSH
12962: LD_STRING DA-Beria-4
12964: PPUSH
12965: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
12969: LD_EXP 33
12973: PPUSH
12974: LD_STRING DA-Beria-5
12976: PPUSH
12977: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
12981: LD_EXP 33
12985: PPUSH
12986: LD_STRING DA-Beria-6
12988: PPUSH
12989: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
12993: LD_EXP 21
12997: PPUSH
12998: LD_STRING DA-Beria-7
13000: PPUSH
13001: CALL_OW 88
// DialogueOff ;
13005: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
13009: LD_INT 52
13011: PPUSH
13012: LD_INT 2
13014: PPUSH
13015: LD_INT 1
13017: PPUSH
13018: CALL_OW 322
// end ;
13022: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
13023: LD_EXP 26
13027: PPUSH
13028: CALL_OW 300
13032: PUSH
13033: LD_EXP 26
13037: PPUSH
13038: CALL_OW 256
13042: PUSH
13043: LD_INT 10
13045: LESS
13046: AND
13047: IFFALSE 13084
13049: GO 13051
13051: DISABLE
// begin DialogueOn ;
13052: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
13056: LD_EXP 26
13060: PPUSH
13061: LD_STRING DK-Kdeath-1
13063: PPUSH
13064: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
13068: LD_EXP 21
13072: PPUSH
13073: LD_STRING DH-Kdeath-2
13075: PPUSH
13076: CALL_OW 88
// DialogueOff ;
13080: CALL_OW 7
// end ;
13084: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
13085: LD_INT 2
13087: PPUSH
13088: LD_EXP 39
13092: PPUSH
13093: CALL 1374 0 2
13097: IFFALSE 13114
13099: GO 13101
13101: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
13102: LD_EXP 21
13106: PPUSH
13107: LD_STRING DH-Obj-1
13109: PPUSH
13110: CALL_OW 88
13114: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
13115: LD_INT 2
13117: PPUSH
13118: LD_EXP 40
13122: PPUSH
13123: CALL 1374 0 2
13127: IFFALSE 13144
13129: GO 13131
13131: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
13132: LD_EXP 21
13136: PPUSH
13137: LD_STRING DH-Obj-a-1
13139: PPUSH
13140: CALL_OW 88
13144: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 7 7$00 , 6 6$30 , 6 6$00 , 5 5$30 ] [ Difficulty ] do
13145: LD_EXP 10
13149: PUSH
13150: LD_OWVAR 1
13154: PUSH
13155: LD_INT 14700
13157: PUSH
13158: LD_INT 13650
13160: PUSH
13161: LD_INT 12600
13163: PUSH
13164: LD_INT 11550
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: PUSH
13173: LD_OWVAR 67
13177: ARRAY
13178: GREATEREQUAL
13179: OR
13180: IFFALSE 13208
13182: GO 13184
13184: DISABLE
// begin wait ( rand ( 2 2$00 , 2 2$30 ) ) ;
13185: LD_INT 4200
13187: PPUSH
13188: LD_INT 5250
13190: PPUSH
13191: CALL_OW 12
13195: PPUSH
13196: CALL_OW 67
// convoyStarted := true ;
13200: LD_ADDR_EXP 17
13204: PUSH
13205: LD_INT 1
13207: ST_TO_ADDR
// end ;
13208: END
// every 0 0$1 trigger convoyStarted do
13209: LD_EXP 17
13213: IFFALSE 13297
13215: GO 13217
13217: DISABLE
// begin DialogueOn ;
13218: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
13222: LD_EXP 29
13226: PPUSH
13227: LD_STRING DShar-Convoy-1
13229: PPUSH
13230: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
13234: LD_EXP 21
13238: PPUSH
13239: LD_STRING DH-Convoy-2
13241: PPUSH
13242: CALL_OW 88
// DialogueOff ;
13246: CALL_OW 7
// PrepareConvoy ;
13250: CALL 4639 0 0
// repeat wait ( rand ( 2 2$30 , 5 5$30 ) ) ;
13254: LD_INT 5250
13256: PPUSH
13257: LD_INT 11550
13259: PPUSH
13260: CALL_OW 12
13264: PPUSH
13265: CALL_OW 67
// PrepareConvoy ;
13269: CALL 4639 0 0
// convoyCounter := convoyCounter - 1 ;
13273: LD_ADDR_EXP 16
13277: PUSH
13278: LD_EXP 16
13282: PUSH
13283: LD_INT 1
13285: MINUS
13286: ST_TO_ADDR
// until convoyCounter <= 0 ;
13287: LD_EXP 16
13291: PUSH
13292: LD_INT 0
13294: LESSEQUAL
13295: IFFALSE 13254
// end ;
13297: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
13298: LD_EXP 15
13302: PUSH
13303: LD_INT 10
13305: GREATEREQUAL
13306: IFFALSE 13323
13308: GO 13310
13310: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
13311: LD_EXP 31
13315: PPUSH
13316: LD_STRING DOm-Fail-1
13318: PPUSH
13319: CALL_OW 94
13323: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
13324: LD_EXP 39
13328: NOT
13329: PUSH
13330: LD_EXP 40
13334: NOT
13335: AND
13336: IFFALSE 13348
13338: GO 13340
13340: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
13341: LD_STRING RaiderDone
13343: PPUSH
13344: CALL_OW 337
13348: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
13349: LD_INT 22
13351: PUSH
13352: LD_INT 2
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: PUSH
13359: LD_INT 33
13361: PUSH
13362: LD_INT 2
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: PPUSH
13373: CALL_OW 69
13377: PUSH
13378: LD_INT 3
13380: GREATEREQUAL
13381: PUSH
13382: LD_INT 22
13384: PUSH
13385: LD_INT 2
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PUSH
13392: LD_INT 34
13394: PUSH
13395: LD_INT 31
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PPUSH
13406: CALL_OW 69
13410: PUSH
13411: LD_INT 2
13413: GREATEREQUAL
13414: AND
13415: IFFALSE 13427
13417: GO 13419
13419: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
13420: LD_STRING RemoteControlDone
13422: PPUSH
13423: CALL_OW 337
13427: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var tmp ;
13428: LD_EXP 16
13432: PUSH
13433: LD_INT 1
13435: LESS
13436: PUSH
13437: LD_EXP 41
13441: PPUSH
13442: LD_INT 52
13444: PUSH
13445: EMPTY
13446: LIST
13447: PUSH
13448: LD_INT 21
13450: PUSH
13451: LD_INT 1
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PPUSH
13462: CALL_OW 72
13466: NOT
13467: AND
13468: PUSH
13469: LD_OWVAR 1
13473: PUSH
13474: LD_INT 126000
13476: GREATEREQUAL
13477: OR
13478: IFFALSE 14299
13480: GO 13482
13482: DISABLE
13483: LD_INT 0
13485: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
13486: LD_STRING ReinforcementsDone
13488: PPUSH
13489: CALL_OW 337
// music_class := music_victory ;
13493: LD_ADDR_OWVAR 72
13497: PUSH
13498: LD_INT 4
13500: ST_TO_ADDR
// InGameOn ;
13501: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
13505: LD_EXP 21
13509: PPUSH
13510: LD_STRING DH-end-1
13512: PPUSH
13513: CALL_OW 88
// wait ( 0 0$2 ) ;
13517: LD_INT 70
13519: PPUSH
13520: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
13524: LD_EXP 29
13528: PPUSH
13529: LD_STRING DShar-end-2
13531: PPUSH
13532: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
13536: LD_EXP 39
13540: NOT
13541: PUSH
13542: LD_EXP 40
13546: NOT
13547: AND
13548: IFFALSE 13564
// begin Say ( Heike , DH-end-3 ) ;
13550: LD_EXP 21
13554: PPUSH
13555: LD_STRING DH-end-3
13557: PPUSH
13558: CALL_OW 88
// end else
13562: GO 13661
// begin Say ( Heike , DH-end-a-3 ) ;
13564: LD_EXP 21
13568: PPUSH
13569: LD_STRING DH-end-a-3
13571: PPUSH
13572: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
13576: LD_EXP 29
13580: PPUSH
13581: LD_STRING DShar-end-a-4
13583: PPUSH
13584: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
13588: LD_EXP 21
13592: PPUSH
13593: LD_STRING DH-end-a-5
13595: PPUSH
13596: CALL_OW 88
// InGameOff ;
13600: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
13604: LD_INT 35
13606: PPUSH
13607: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
13611: LD_INT 22
13613: PUSH
13614: LD_INT 3
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PUSH
13621: LD_INT 21
13623: PUSH
13624: LD_INT 1
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: PPUSH
13635: CALL_OW 69
13639: PUSH
13640: LD_INT 0
13642: EQUAL
13643: IFFALSE 13604
// InGameOn ;
13645: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
13649: LD_EXP 21
13653: PPUSH
13654: LD_STRING DH-end-a-6
13656: PPUSH
13657: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
13661: LD_EXP 29
13665: PPUSH
13666: LD_STRING DShar-end-3
13668: PPUSH
13669: CALL_OW 94
// if not flamethrowerBuilt then
13673: LD_EXP 20
13677: NOT
13678: IFFALSE 13687
// SetAchievement ( ACH_FIRE ) ;
13680: LD_STRING ACH_FIRE
13682: PPUSH
13683: CALL_OW 543
// if drugsTested then
13687: LD_EXP 6
13691: IFFALSE 13705
// AddMedal ( med1 , 1 ) else
13693: LD_STRING med1
13695: PPUSH
13696: LD_INT 1
13698: PPUSH
13699: CALL_OW 101
13703: GO 13745
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
13705: LD_INT 5
13707: PPUSH
13708: LD_INT 2
13710: PPUSH
13711: CALL_OW 321
13715: PUSH
13716: LD_INT 2
13718: EQUAL
13719: IFFALSE 13734
// AddMedal ( med1 , - 1 ) else
13721: LD_STRING med1
13723: PPUSH
13724: LD_INT 1
13726: NEG
13727: PPUSH
13728: CALL_OW 101
13732: GO 13745
// AddMedal ( med1 , - 2 ) ;
13734: LD_STRING med1
13736: PPUSH
13737: LD_INT 2
13739: NEG
13740: PPUSH
13741: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
13745: LD_INT 22
13747: PUSH
13748: LD_INT 2
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: PUSH
13755: LD_INT 33
13757: PUSH
13758: LD_INT 2
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: PPUSH
13769: CALL_OW 69
13773: PUSH
13774: LD_INT 3
13776: GREATEREQUAL
13777: PUSH
13778: LD_INT 22
13780: PUSH
13781: LD_INT 2
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: PUSH
13788: LD_INT 34
13790: PUSH
13791: LD_INT 31
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: PPUSH
13802: CALL_OW 69
13806: PUSH
13807: LD_INT 1
13809: GREATEREQUAL
13810: AND
13811: IFFALSE 13825
// AddMedal ( med2 , 1 ) else
13813: LD_STRING med2
13815: PPUSH
13816: LD_INT 1
13818: PPUSH
13819: CALL_OW 101
13823: GO 13836
// AddMedal ( med2 , - 1 ) ;
13825: LD_STRING med2
13827: PPUSH
13828: LD_INT 1
13830: NEG
13831: PPUSH
13832: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
13836: LD_EXP 15
13840: PUSH
13841: LD_INT 10
13843: PUSH
13844: LD_INT 8
13846: PUSH
13847: LD_INT 6
13849: PUSH
13850: LD_INT 5
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: PUSH
13859: LD_OWVAR 67
13863: ARRAY
13864: LESS
13865: IFFALSE 13879
// AddMedal ( med3 , 1 ) else
13867: LD_STRING med3
13869: PPUSH
13870: LD_INT 1
13872: PPUSH
13873: CALL_OW 101
13877: GO 13890
// AddMedal ( med3 , - 1 ) ;
13879: LD_STRING med3
13881: PPUSH
13882: LD_INT 1
13884: NEG
13885: PPUSH
13886: CALL_OW 101
// GiveMedals ( MAIN ) ;
13890: LD_STRING MAIN
13892: PPUSH
13893: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13897: LD_INT 22
13899: PUSH
13900: LD_INT 2
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: PUSH
13907: LD_INT 23
13909: PUSH
13910: LD_INT 2
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: PUSH
13917: LD_INT 21
13919: PUSH
13920: LD_INT 1
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: LIST
13931: PPUSH
13932: CALL_OW 69
13936: PPUSH
13937: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
13941: LD_EXP 15
13945: PPUSH
13946: LD_STRING 05_ConvoySavedCounter
13948: PPUSH
13949: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
13953: LD_EXP 13
13957: PPUSH
13958: LD_STRING 05_Radar
13960: PPUSH
13961: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
13965: LD_EXP 6
13969: PPUSH
13970: LD_STRING 05_DrugsTested
13972: PPUSH
13973: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
13977: LD_INT 22
13979: PUSH
13980: LD_INT 2
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: PUSH
13987: LD_INT 33
13989: PUSH
13990: LD_INT 2
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: PPUSH
14001: CALL_OW 69
14005: PUSH
14006: LD_INT 3
14008: GREATEREQUAL
14009: PUSH
14010: LD_INT 22
14012: PUSH
14013: LD_INT 2
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PUSH
14020: LD_INT 34
14022: PUSH
14023: LD_INT 31
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PPUSH
14034: CALL_OW 69
14038: PUSH
14039: LD_INT 2
14041: GREATEREQUAL
14042: AND
14043: PPUSH
14044: LD_STRING 05_RemoteControl
14046: PPUSH
14047: CALL_OW 39
// SaveCharacters ( Heike , 05_Heike ) ;
14051: LD_EXP 21
14055: PPUSH
14056: LD_STRING 05_Heike
14058: PPUSH
14059: CALL_OW 38
// if Aviradze then
14063: LD_EXP 33
14067: IFFALSE 14081
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
14069: LD_EXP 33
14073: PPUSH
14074: LD_STRING 05_Aviradze
14076: PPUSH
14077: CALL_OW 38
// if Ibrahim then
14081: LD_EXP 24
14085: IFFALSE 14099
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
14087: LD_EXP 24
14091: PPUSH
14092: LD_STRING 05_Ibrahim
14094: PPUSH
14095: CALL_OW 38
// if Kamil then
14099: LD_EXP 25
14103: IFFALSE 14117
// SaveCharacters ( Kamil , 05_Kamil ) ;
14105: LD_EXP 25
14109: PPUSH
14110: LD_STRING 05_Kamil
14112: PPUSH
14113: CALL_OW 38
// if Sophia then
14117: LD_EXP 27
14121: IFFALSE 14135
// SaveCharacters ( Sophia , 05_Sophia ) ;
14123: LD_EXP 27
14127: PPUSH
14128: LD_STRING 05_Sophia
14130: PPUSH
14131: CALL_OW 38
// if Kaia then
14135: LD_EXP 26
14139: IFFALSE 14153
// SaveCharacters ( Kaia , 05_Kaia ) ;
14141: LD_EXP 26
14145: PPUSH
14146: LD_STRING 05_Kaia
14148: PPUSH
14149: CALL_OW 38
// if Givi then
14153: LD_EXP 22
14157: IFFALSE 14171
// SaveCharacters ( Givi , 05_Givi ) ;
14159: LD_EXP 22
14163: PPUSH
14164: LD_STRING 05_Givi
14166: PPUSH
14167: CALL_OW 38
// if Mike then
14171: LD_EXP 23
14175: IFFALSE 14189
// SaveCharacters ( Mike , 05_Mike ) ;
14177: LD_EXP 23
14181: PPUSH
14182: LD_STRING 05_Mike
14184: PPUSH
14185: CALL_OW 38
// if Markov then
14189: LD_EXP 28
14193: IFFALSE 14207
// SaveCharacters ( Markov , 05_Markov ) ;
14195: LD_EXP 28
14199: PPUSH
14200: LD_STRING 05_Markov
14202: PPUSH
14203: CALL_OW 38
// if Kurt then
14207: LD_EXP 32
14211: IFFALSE 14225
// SaveCharacters ( Kurt , 05_Kurt ) ;
14213: LD_EXP 32
14217: PPUSH
14218: LD_STRING 05_Kurt
14220: PPUSH
14221: CALL_OW 38
// if heikeSecondSquad then
14225: LD_EXP 34
14229: IFFALSE 14243
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
14231: LD_EXP 34
14235: PPUSH
14236: LD_STRING 05_others
14238: PPUSH
14239: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14243: LD_ADDR_VAR 0 1
14247: PUSH
14248: LD_INT 22
14250: PUSH
14251: LD_INT 2
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 23
14260: PUSH
14261: LD_INT 0
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PPUSH
14272: CALL_OW 69
14276: ST_TO_ADDR
// if tmp then
14277: LD_VAR 0 1
14281: IFFALSE 14295
// SaveCharacters ( tmp , 05_apes ) ;
14283: LD_VAR 0 1
14287: PPUSH
14288: LD_STRING 05_apes
14290: PPUSH
14291: CALL_OW 38
// YouWin ;
14295: CALL_OW 103
// end ; end_of_file
14299: PPOPN 1
14301: END
// every 0 0$40 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
14302: LD_EXP 9
14306: PUSH
14307: LD_INT 13
14309: PPUSH
14310: LD_INT 1
14312: PPUSH
14313: CALL_OW 287
14317: PUSH
14318: LD_INT 25
14320: LESS
14321: AND
14322: IFFALSE 14349
14324: GO 14326
14326: DISABLE
// begin enable ;
14327: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
14328: LD_INT 1
14330: PPUSH
14331: LD_INT 5
14333: PPUSH
14334: CALL_OW 12
14338: PPUSH
14339: LD_INT 13
14341: PPUSH
14342: LD_INT 1
14344: PPUSH
14345: CALL_OW 55
// end ; end_of_file
14349: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
14350: LD_INT 0
14352: PPUSH
// ar_miner := 81 ;
14353: LD_ADDR_EXP 51
14357: PUSH
14358: LD_INT 81
14360: ST_TO_ADDR
// ar_crane := 88 ;
14361: LD_ADDR_EXP 50
14365: PUSH
14366: LD_INT 88
14368: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
14369: LD_ADDR_EXP 45
14373: PUSH
14374: LD_INT 89
14376: ST_TO_ADDR
// us_hack := 99 ;
14377: LD_ADDR_EXP 46
14381: PUSH
14382: LD_INT 99
14384: ST_TO_ADDR
// us_artillery := 97 ;
14385: LD_ADDR_EXP 47
14389: PUSH
14390: LD_INT 97
14392: ST_TO_ADDR
// ar_bio_bomb := 91 ;
14393: LD_ADDR_EXP 48
14397: PUSH
14398: LD_INT 91
14400: ST_TO_ADDR
// ar_mortar := 92 ;
14401: LD_ADDR_EXP 49
14405: PUSH
14406: LD_INT 92
14408: ST_TO_ADDR
// ru_flamethrower := 93 ;
14409: LD_ADDR_EXP 52
14413: PUSH
14414: LD_INT 93
14416: ST_TO_ADDR
// ru_radar := 98 ;
14417: LD_ADDR_EXP 44
14421: PUSH
14422: LD_INT 98
14424: ST_TO_ADDR
// tech_Artillery := 80 ;
14425: LD_ADDR_EXP 53
14429: PUSH
14430: LD_INT 80
14432: ST_TO_ADDR
// tech_RadMat := 81 ;
14433: LD_ADDR_EXP 54
14437: PUSH
14438: LD_INT 81
14440: ST_TO_ADDR
// tech_BasicTools := 82 ;
14441: LD_ADDR_EXP 55
14445: PUSH
14446: LD_INT 82
14448: ST_TO_ADDR
// tech_Cargo := 83 ;
14449: LD_ADDR_EXP 56
14453: PUSH
14454: LD_INT 83
14456: ST_TO_ADDR
// tech_Track := 84 ;
14457: LD_ADDR_EXP 57
14461: PUSH
14462: LD_INT 84
14464: ST_TO_ADDR
// tech_Crane := 85 ;
14465: LD_ADDR_EXP 58
14469: PUSH
14470: LD_INT 85
14472: ST_TO_ADDR
// tech_Bulldozer := 86 ;
14473: LD_ADDR_EXP 59
14477: PUSH
14478: LD_INT 86
14480: ST_TO_ADDR
// tech_Hovercraft := 87 ;
14481: LD_ADDR_EXP 60
14485: PUSH
14486: LD_INT 87
14488: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
14489: LD_ADDR_EXP 61
14493: PUSH
14494: LD_INT 88
14496: ST_TO_ADDR
// end ;
14497: LD_VAR 0 1
14501: RET
// every 1 do
14502: GO 14504
14504: DISABLE
// InitGlobalVariables ; end_of_file
14505: CALL 14350 0 0
14509: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
14510: LD_INT 0
14512: PPUSH
14513: PPUSH
14514: PPUSH
14515: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
14516: LD_VAR 0 1
14520: PPUSH
14521: CALL_OW 264
14525: PUSH
14526: LD_EXP 48
14530: EQUAL
14531: IFFALSE 14603
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
14533: LD_INT 68
14535: PPUSH
14536: LD_VAR 0 1
14540: PPUSH
14541: CALL_OW 255
14545: PPUSH
14546: CALL_OW 321
14550: PUSH
14551: LD_INT 2
14553: EQUAL
14554: IFFALSE 14566
// eff := 70 else
14556: LD_ADDR_VAR 0 4
14560: PUSH
14561: LD_INT 70
14563: ST_TO_ADDR
14564: GO 14574
// eff := 30 ;
14566: LD_ADDR_VAR 0 4
14570: PUSH
14571: LD_INT 30
14573: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
14574: LD_VAR 0 1
14578: PPUSH
14579: CALL_OW 250
14583: PPUSH
14584: LD_VAR 0 1
14588: PPUSH
14589: CALL_OW 251
14593: PPUSH
14594: LD_VAR 0 4
14598: PPUSH
14599: CALL_OW 495
// end ; end ;
14603: LD_VAR 0 2
14607: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
14608: LD_INT 0
14610: PPUSH
// end ;
14611: LD_VAR 0 4
14615: RET
// export function SOS_Command ( cmd ) ; begin
14616: LD_INT 0
14618: PPUSH
// end ;
14619: LD_VAR 0 2
14623: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
14624: LD_INT 0
14626: PPUSH
// end ;
14627: LD_VAR 0 6
14631: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
14632: LD_INT 0
14634: PPUSH
14635: PPUSH
// if not vehicle or not factory then
14636: LD_VAR 0 1
14640: NOT
14641: PUSH
14642: LD_VAR 0 2
14646: NOT
14647: OR
14648: IFFALSE 14652
// exit ;
14650: GO 14883
// if factoryWaypoints >= factory then
14652: LD_EXP 130
14656: PUSH
14657: LD_VAR 0 2
14661: GREATEREQUAL
14662: IFFALSE 14883
// if factoryWaypoints [ factory ] then
14664: LD_EXP 130
14668: PUSH
14669: LD_VAR 0 2
14673: ARRAY
14674: IFFALSE 14883
// begin if GetControl ( vehicle ) = control_manual then
14676: LD_VAR 0 1
14680: PPUSH
14681: CALL_OW 263
14685: PUSH
14686: LD_INT 1
14688: EQUAL
14689: IFFALSE 14770
// begin driver := IsDrivenBy ( vehicle ) ;
14691: LD_ADDR_VAR 0 4
14695: PUSH
14696: LD_VAR 0 1
14700: PPUSH
14701: CALL_OW 311
14705: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14706: LD_VAR 0 4
14710: PPUSH
14711: LD_EXP 130
14715: PUSH
14716: LD_VAR 0 2
14720: ARRAY
14721: PUSH
14722: LD_INT 3
14724: ARRAY
14725: PPUSH
14726: LD_EXP 130
14730: PUSH
14731: LD_VAR 0 2
14735: ARRAY
14736: PUSH
14737: LD_INT 4
14739: ARRAY
14740: PPUSH
14741: CALL_OW 171
// AddComExitVehicle ( driver ) ;
14745: LD_VAR 0 4
14749: PPUSH
14750: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
14754: LD_VAR 0 4
14758: PPUSH
14759: LD_VAR 0 2
14763: PPUSH
14764: CALL_OW 180
// end else
14768: GO 14883
// if GetControl ( vehicle ) = control_remote then
14770: LD_VAR 0 1
14774: PPUSH
14775: CALL_OW 263
14779: PUSH
14780: LD_INT 2
14782: EQUAL
14783: IFFALSE 14844
// begin wait ( 0 0$2 ) ;
14785: LD_INT 70
14787: PPUSH
14788: CALL_OW 67
// if Connect ( vehicle ) then
14792: LD_VAR 0 1
14796: PPUSH
14797: CALL 42582 0 1
14801: IFFALSE 14842
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14803: LD_VAR 0 1
14807: PPUSH
14808: LD_EXP 130
14812: PUSH
14813: LD_VAR 0 2
14817: ARRAY
14818: PUSH
14819: LD_INT 3
14821: ARRAY
14822: PPUSH
14823: LD_EXP 130
14827: PUSH
14828: LD_VAR 0 2
14832: ARRAY
14833: PUSH
14834: LD_INT 4
14836: ARRAY
14837: PPUSH
14838: CALL_OW 171
// end else
14842: GO 14883
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14844: LD_VAR 0 1
14848: PPUSH
14849: LD_EXP 130
14853: PUSH
14854: LD_VAR 0 2
14858: ARRAY
14859: PUSH
14860: LD_INT 3
14862: ARRAY
14863: PPUSH
14864: LD_EXP 130
14868: PUSH
14869: LD_VAR 0 2
14873: ARRAY
14874: PUSH
14875: LD_INT 4
14877: ARRAY
14878: PPUSH
14879: CALL_OW 171
// end ; end ;
14883: LD_VAR 0 3
14887: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
14888: LD_INT 0
14890: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
14891: LD_VAR 0 1
14895: PUSH
14896: LD_INT 250
14898: EQUAL
14899: PUSH
14900: LD_VAR 0 2
14904: PPUSH
14905: CALL_OW 264
14909: PUSH
14910: LD_EXP 51
14914: EQUAL
14915: AND
14916: IFFALSE 14937
// MinerPlaceMine ( unit , x , y ) ;
14918: LD_VAR 0 2
14922: PPUSH
14923: LD_VAR 0 4
14927: PPUSH
14928: LD_VAR 0 5
14932: PPUSH
14933: CALL 17336 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
14937: LD_VAR 0 1
14941: PUSH
14942: LD_INT 251
14944: EQUAL
14945: PUSH
14946: LD_VAR 0 2
14950: PPUSH
14951: CALL_OW 264
14955: PUSH
14956: LD_EXP 51
14960: EQUAL
14961: AND
14962: IFFALSE 14983
// MinerDetonateMine ( unit , x , y ) ;
14964: LD_VAR 0 2
14968: PPUSH
14969: LD_VAR 0 4
14973: PPUSH
14974: LD_VAR 0 5
14978: PPUSH
14979: CALL 17613 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
14983: LD_VAR 0 1
14987: PUSH
14988: LD_INT 252
14990: EQUAL
14991: PUSH
14992: LD_VAR 0 2
14996: PPUSH
14997: CALL_OW 264
15001: PUSH
15002: LD_EXP 51
15006: EQUAL
15007: AND
15008: IFFALSE 15029
// MinerCreateMinefield ( unit , x , y ) ;
15010: LD_VAR 0 2
15014: PPUSH
15015: LD_VAR 0 4
15019: PPUSH
15020: LD_VAR 0 5
15024: PPUSH
15025: CALL 18030 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
15029: LD_VAR 0 1
15033: PUSH
15034: LD_INT 253
15036: EQUAL
15037: PUSH
15038: LD_VAR 0 2
15042: PPUSH
15043: CALL_OW 257
15047: PUSH
15048: LD_INT 5
15050: EQUAL
15051: AND
15052: IFFALSE 15073
// ComBinocular ( unit , x , y ) ;
15054: LD_VAR 0 2
15058: PPUSH
15059: LD_VAR 0 4
15063: PPUSH
15064: LD_VAR 0 5
15068: PPUSH
15069: CALL 18401 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
15073: LD_VAR 0 1
15077: PUSH
15078: LD_INT 254
15080: EQUAL
15081: PUSH
15082: LD_VAR 0 2
15086: PPUSH
15087: CALL_OW 264
15091: PUSH
15092: LD_EXP 46
15096: EQUAL
15097: AND
15098: PUSH
15099: LD_VAR 0 3
15103: PPUSH
15104: CALL_OW 263
15108: PUSH
15109: LD_INT 3
15111: EQUAL
15112: AND
15113: IFFALSE 15129
// HackDestroyVehicle ( unit , selectedUnit ) ;
15115: LD_VAR 0 2
15119: PPUSH
15120: LD_VAR 0 3
15124: PPUSH
15125: CALL 16696 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
15129: LD_VAR 0 1
15133: PUSH
15134: LD_INT 255
15136: EQUAL
15137: PUSH
15138: LD_VAR 0 2
15142: PPUSH
15143: CALL_OW 264
15147: PUSH
15148: LD_INT 14
15150: PUSH
15151: LD_INT 53
15153: PUSH
15154: EMPTY
15155: LIST
15156: LIST
15157: IN
15158: AND
15159: PUSH
15160: LD_VAR 0 4
15164: PPUSH
15165: LD_VAR 0 5
15169: PPUSH
15170: CALL_OW 488
15174: AND
15175: IFFALSE 15199
// CutTreeXYR ( unit , x , y , 12 ) ;
15177: LD_VAR 0 2
15181: PPUSH
15182: LD_VAR 0 4
15186: PPUSH
15187: LD_VAR 0 5
15191: PPUSH
15192: LD_INT 12
15194: PPUSH
15195: CALL 15262 0 4
// if cmd = 256 then
15199: LD_VAR 0 1
15203: PUSH
15204: LD_INT 256
15206: EQUAL
15207: IFFALSE 15228
// SetFactoryWaypoint ( unit , x , y ) ;
15209: LD_VAR 0 2
15213: PPUSH
15214: LD_VAR 0 4
15218: PPUSH
15219: LD_VAR 0 5
15223: PPUSH
15224: CALL 33159 0 3
// if cmd = 257 then
15228: LD_VAR 0 1
15232: PUSH
15233: LD_INT 257
15235: EQUAL
15236: IFFALSE 15257
// SetWarehouseGatheringPoint ( unit , x , y ) ;
15238: LD_VAR 0 2
15242: PPUSH
15243: LD_VAR 0 4
15247: PPUSH
15248: LD_VAR 0 5
15252: PPUSH
15253: CALL 33521 0 3
// end ;
15257: LD_VAR 0 6
15261: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15262: LD_INT 0
15264: PPUSH
15265: PPUSH
15266: PPUSH
15267: PPUSH
15268: PPUSH
15269: PPUSH
15270: PPUSH
15271: PPUSH
15272: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15273: LD_VAR 0 1
15277: NOT
15278: PUSH
15279: LD_VAR 0 2
15283: PPUSH
15284: LD_VAR 0 3
15288: PPUSH
15289: CALL_OW 488
15293: NOT
15294: OR
15295: PUSH
15296: LD_VAR 0 4
15300: NOT
15301: OR
15302: IFFALSE 15306
// exit ;
15304: GO 15646
// list := [ ] ;
15306: LD_ADDR_VAR 0 13
15310: PUSH
15311: EMPTY
15312: ST_TO_ADDR
// if x - r < 0 then
15313: LD_VAR 0 2
15317: PUSH
15318: LD_VAR 0 4
15322: MINUS
15323: PUSH
15324: LD_INT 0
15326: LESS
15327: IFFALSE 15339
// min_x := 0 else
15329: LD_ADDR_VAR 0 7
15333: PUSH
15334: LD_INT 0
15336: ST_TO_ADDR
15337: GO 15355
// min_x := x - r ;
15339: LD_ADDR_VAR 0 7
15343: PUSH
15344: LD_VAR 0 2
15348: PUSH
15349: LD_VAR 0 4
15353: MINUS
15354: ST_TO_ADDR
// if y - r < 0 then
15355: LD_VAR 0 3
15359: PUSH
15360: LD_VAR 0 4
15364: MINUS
15365: PUSH
15366: LD_INT 0
15368: LESS
15369: IFFALSE 15381
// min_y := 0 else
15371: LD_ADDR_VAR 0 8
15375: PUSH
15376: LD_INT 0
15378: ST_TO_ADDR
15379: GO 15397
// min_y := y - r ;
15381: LD_ADDR_VAR 0 8
15385: PUSH
15386: LD_VAR 0 3
15390: PUSH
15391: LD_VAR 0 4
15395: MINUS
15396: ST_TO_ADDR
// max_x := x + r ;
15397: LD_ADDR_VAR 0 9
15401: PUSH
15402: LD_VAR 0 2
15406: PUSH
15407: LD_VAR 0 4
15411: PLUS
15412: ST_TO_ADDR
// max_y := y + r ;
15413: LD_ADDR_VAR 0 10
15417: PUSH
15418: LD_VAR 0 3
15422: PUSH
15423: LD_VAR 0 4
15427: PLUS
15428: ST_TO_ADDR
// for _x = min_x to max_x do
15429: LD_ADDR_VAR 0 11
15433: PUSH
15434: DOUBLE
15435: LD_VAR 0 7
15439: DEC
15440: ST_TO_ADDR
15441: LD_VAR 0 9
15445: PUSH
15446: FOR_TO
15447: IFFALSE 15564
// for _y = min_y to max_y do
15449: LD_ADDR_VAR 0 12
15453: PUSH
15454: DOUBLE
15455: LD_VAR 0 8
15459: DEC
15460: ST_TO_ADDR
15461: LD_VAR 0 10
15465: PUSH
15466: FOR_TO
15467: IFFALSE 15560
// begin if not ValidHex ( _x , _y ) then
15469: LD_VAR 0 11
15473: PPUSH
15474: LD_VAR 0 12
15478: PPUSH
15479: CALL_OW 488
15483: NOT
15484: IFFALSE 15488
// continue ;
15486: GO 15466
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15488: LD_VAR 0 11
15492: PPUSH
15493: LD_VAR 0 12
15497: PPUSH
15498: CALL_OW 351
15502: PUSH
15503: LD_VAR 0 11
15507: PPUSH
15508: LD_VAR 0 12
15512: PPUSH
15513: CALL_OW 554
15517: AND
15518: IFFALSE 15558
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15520: LD_ADDR_VAR 0 13
15524: PUSH
15525: LD_VAR 0 13
15529: PPUSH
15530: LD_VAR 0 13
15534: PUSH
15535: LD_INT 1
15537: PLUS
15538: PPUSH
15539: LD_VAR 0 11
15543: PUSH
15544: LD_VAR 0 12
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: PPUSH
15553: CALL_OW 2
15557: ST_TO_ADDR
// end ;
15558: GO 15466
15560: POP
15561: POP
15562: GO 15446
15564: POP
15565: POP
// if not list then
15566: LD_VAR 0 13
15570: NOT
15571: IFFALSE 15575
// exit ;
15573: GO 15646
// for i in list do
15575: LD_ADDR_VAR 0 6
15579: PUSH
15580: LD_VAR 0 13
15584: PUSH
15585: FOR_IN
15586: IFFALSE 15644
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
15588: LD_VAR 0 1
15592: PPUSH
15593: LD_STRING M
15595: PUSH
15596: LD_VAR 0 6
15600: PUSH
15601: LD_INT 1
15603: ARRAY
15604: PUSH
15605: LD_VAR 0 6
15609: PUSH
15610: LD_INT 2
15612: ARRAY
15613: PUSH
15614: LD_INT 0
15616: PUSH
15617: LD_INT 0
15619: PUSH
15620: LD_INT 0
15622: PUSH
15623: LD_INT 0
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: PUSH
15635: EMPTY
15636: LIST
15637: PPUSH
15638: CALL_OW 447
15642: GO 15585
15644: POP
15645: POP
// end ;
15646: LD_VAR 0 5
15650: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
15651: LD_EXP 62
15655: NOT
15656: IFFALSE 15706
15658: GO 15660
15660: DISABLE
// begin initHack := true ;
15661: LD_ADDR_EXP 62
15665: PUSH
15666: LD_INT 1
15668: ST_TO_ADDR
// hackTanks := [ ] ;
15669: LD_ADDR_EXP 63
15673: PUSH
15674: EMPTY
15675: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
15676: LD_ADDR_EXP 64
15680: PUSH
15681: EMPTY
15682: ST_TO_ADDR
// hackLimit := 3 ;
15683: LD_ADDR_EXP 65
15687: PUSH
15688: LD_INT 3
15690: ST_TO_ADDR
// hackDist := 12 ;
15691: LD_ADDR_EXP 66
15695: PUSH
15696: LD_INT 12
15698: ST_TO_ADDR
// hackCounter := [ ] ;
15699: LD_ADDR_EXP 67
15703: PUSH
15704: EMPTY
15705: ST_TO_ADDR
// end ;
15706: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
15707: LD_EXP 62
15711: PUSH
15712: LD_INT 34
15714: PUSH
15715: LD_EXP 46
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PPUSH
15724: CALL_OW 69
15728: AND
15729: IFFALSE 15984
15731: GO 15733
15733: DISABLE
15734: LD_INT 0
15736: PPUSH
15737: PPUSH
// begin enable ;
15738: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
15739: LD_ADDR_VAR 0 1
15743: PUSH
15744: LD_INT 34
15746: PUSH
15747: LD_EXP 46
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: PPUSH
15756: CALL_OW 69
15760: PUSH
15761: FOR_IN
15762: IFFALSE 15982
// begin if not i in hackTanks then
15764: LD_VAR 0 1
15768: PUSH
15769: LD_EXP 63
15773: IN
15774: NOT
15775: IFFALSE 15858
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
15777: LD_ADDR_EXP 63
15781: PUSH
15782: LD_EXP 63
15786: PPUSH
15787: LD_EXP 63
15791: PUSH
15792: LD_INT 1
15794: PLUS
15795: PPUSH
15796: LD_VAR 0 1
15800: PPUSH
15801: CALL_OW 1
15805: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
15806: LD_ADDR_EXP 64
15810: PUSH
15811: LD_EXP 64
15815: PPUSH
15816: LD_EXP 64
15820: PUSH
15821: LD_INT 1
15823: PLUS
15824: PPUSH
15825: EMPTY
15826: PPUSH
15827: CALL_OW 1
15831: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
15832: LD_ADDR_EXP 67
15836: PUSH
15837: LD_EXP 67
15841: PPUSH
15842: LD_EXP 67
15846: PUSH
15847: LD_INT 1
15849: PLUS
15850: PPUSH
15851: EMPTY
15852: PPUSH
15853: CALL_OW 1
15857: ST_TO_ADDR
// end ; if not IsOk ( i ) then
15858: LD_VAR 0 1
15862: PPUSH
15863: CALL_OW 302
15867: NOT
15868: IFFALSE 15881
// begin HackUnlinkAll ( i ) ;
15870: LD_VAR 0 1
15874: PPUSH
15875: CALL 15987 0 1
// continue ;
15879: GO 15761
// end ; HackCheckCapturedStatus ( i ) ;
15881: LD_VAR 0 1
15885: PPUSH
15886: CALL 16430 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
15890: LD_ADDR_VAR 0 2
15894: PUSH
15895: LD_INT 81
15897: PUSH
15898: LD_VAR 0 1
15902: PPUSH
15903: CALL_OW 255
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: PUSH
15912: LD_INT 33
15914: PUSH
15915: LD_INT 3
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: PUSH
15922: LD_INT 91
15924: PUSH
15925: LD_VAR 0 1
15929: PUSH
15930: LD_EXP 66
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: LIST
15939: PUSH
15940: LD_INT 50
15942: PUSH
15943: EMPTY
15944: LIST
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: PPUSH
15952: CALL_OW 69
15956: ST_TO_ADDR
// if not tmp then
15957: LD_VAR 0 2
15961: NOT
15962: IFFALSE 15966
// continue ;
15964: GO 15761
// HackLink ( i , tmp ) ;
15966: LD_VAR 0 1
15970: PPUSH
15971: LD_VAR 0 2
15975: PPUSH
15976: CALL 16123 0 2
// end ;
15980: GO 15761
15982: POP
15983: POP
// end ;
15984: PPOPN 2
15986: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
15987: LD_INT 0
15989: PPUSH
15990: PPUSH
15991: PPUSH
// if not hack in hackTanks then
15992: LD_VAR 0 1
15996: PUSH
15997: LD_EXP 63
16001: IN
16002: NOT
16003: IFFALSE 16007
// exit ;
16005: GO 16118
// index := GetElementIndex ( hackTanks , hack ) ;
16007: LD_ADDR_VAR 0 4
16011: PUSH
16012: LD_EXP 63
16016: PPUSH
16017: LD_VAR 0 1
16021: PPUSH
16022: CALL 39396 0 2
16026: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
16027: LD_EXP 64
16031: PUSH
16032: LD_VAR 0 4
16036: ARRAY
16037: IFFALSE 16118
// begin for i in hackTanksCaptured [ index ] do
16039: LD_ADDR_VAR 0 3
16043: PUSH
16044: LD_EXP 64
16048: PUSH
16049: LD_VAR 0 4
16053: ARRAY
16054: PUSH
16055: FOR_IN
16056: IFFALSE 16082
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
16058: LD_VAR 0 3
16062: PUSH
16063: LD_INT 1
16065: ARRAY
16066: PPUSH
16067: LD_VAR 0 3
16071: PUSH
16072: LD_INT 2
16074: ARRAY
16075: PPUSH
16076: CALL_OW 235
16080: GO 16055
16082: POP
16083: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
16084: LD_ADDR_EXP 64
16088: PUSH
16089: LD_EXP 64
16093: PPUSH
16094: LD_VAR 0 4
16098: PPUSH
16099: EMPTY
16100: PPUSH
16101: CALL_OW 1
16105: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
16106: LD_VAR 0 1
16110: PPUSH
16111: LD_INT 0
16113: PPUSH
16114: CALL_OW 505
// end ; end ;
16118: LD_VAR 0 2
16122: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
16123: LD_INT 0
16125: PPUSH
16126: PPUSH
16127: PPUSH
// if not hack in hackTanks or not vehicles then
16128: LD_VAR 0 1
16132: PUSH
16133: LD_EXP 63
16137: IN
16138: NOT
16139: PUSH
16140: LD_VAR 0 2
16144: NOT
16145: OR
16146: IFFALSE 16150
// exit ;
16148: GO 16425
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
16150: LD_ADDR_VAR 0 2
16154: PUSH
16155: LD_VAR 0 1
16159: PPUSH
16160: LD_VAR 0 2
16164: PPUSH
16165: LD_INT 1
16167: PPUSH
16168: LD_INT 1
16170: PPUSH
16171: CALL 40046 0 4
16175: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
16176: LD_ADDR_VAR 0 5
16180: PUSH
16181: LD_EXP 63
16185: PPUSH
16186: LD_VAR 0 1
16190: PPUSH
16191: CALL 39396 0 2
16195: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
16196: LD_EXP 64
16200: PUSH
16201: LD_VAR 0 5
16205: ARRAY
16206: PUSH
16207: LD_EXP 65
16211: LESS
16212: IFFALSE 16401
// begin for i := 1 to vehicles do
16214: LD_ADDR_VAR 0 4
16218: PUSH
16219: DOUBLE
16220: LD_INT 1
16222: DEC
16223: ST_TO_ADDR
16224: LD_VAR 0 2
16228: PUSH
16229: FOR_TO
16230: IFFALSE 16399
// begin if hackTanksCaptured [ index ] = hackLimit then
16232: LD_EXP 64
16236: PUSH
16237: LD_VAR 0 5
16241: ARRAY
16242: PUSH
16243: LD_EXP 65
16247: EQUAL
16248: IFFALSE 16252
// break ;
16250: GO 16399
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
16252: LD_ADDR_EXP 67
16256: PUSH
16257: LD_EXP 67
16261: PPUSH
16262: LD_VAR 0 5
16266: PPUSH
16267: LD_EXP 67
16271: PUSH
16272: LD_VAR 0 5
16276: ARRAY
16277: PUSH
16278: LD_INT 1
16280: PLUS
16281: PPUSH
16282: CALL_OW 1
16286: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
16287: LD_ADDR_EXP 64
16291: PUSH
16292: LD_EXP 64
16296: PPUSH
16297: LD_VAR 0 5
16301: PUSH
16302: LD_EXP 64
16306: PUSH
16307: LD_VAR 0 5
16311: ARRAY
16312: PUSH
16313: LD_INT 1
16315: PLUS
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PPUSH
16321: LD_VAR 0 2
16325: PUSH
16326: LD_VAR 0 4
16330: ARRAY
16331: PUSH
16332: LD_VAR 0 2
16336: PUSH
16337: LD_VAR 0 4
16341: ARRAY
16342: PPUSH
16343: CALL_OW 255
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: PPUSH
16352: CALL 39611 0 3
16356: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
16357: LD_VAR 0 2
16361: PUSH
16362: LD_VAR 0 4
16366: ARRAY
16367: PPUSH
16368: LD_VAR 0 1
16372: PPUSH
16373: CALL_OW 255
16377: PPUSH
16378: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
16382: LD_VAR 0 2
16386: PUSH
16387: LD_VAR 0 4
16391: ARRAY
16392: PPUSH
16393: CALL_OW 141
// end ;
16397: GO 16229
16399: POP
16400: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16401: LD_VAR 0 1
16405: PPUSH
16406: LD_EXP 64
16410: PUSH
16411: LD_VAR 0 5
16415: ARRAY
16416: PUSH
16417: LD_INT 0
16419: PLUS
16420: PPUSH
16421: CALL_OW 505
// end ;
16425: LD_VAR 0 3
16429: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
16430: LD_INT 0
16432: PPUSH
16433: PPUSH
16434: PPUSH
16435: PPUSH
// if not hack in hackTanks then
16436: LD_VAR 0 1
16440: PUSH
16441: LD_EXP 63
16445: IN
16446: NOT
16447: IFFALSE 16451
// exit ;
16449: GO 16691
// index := GetElementIndex ( hackTanks , hack ) ;
16451: LD_ADDR_VAR 0 4
16455: PUSH
16456: LD_EXP 63
16460: PPUSH
16461: LD_VAR 0 1
16465: PPUSH
16466: CALL 39396 0 2
16470: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
16471: LD_ADDR_VAR 0 3
16475: PUSH
16476: DOUBLE
16477: LD_EXP 64
16481: PUSH
16482: LD_VAR 0 4
16486: ARRAY
16487: INC
16488: ST_TO_ADDR
16489: LD_INT 1
16491: PUSH
16492: FOR_DOWNTO
16493: IFFALSE 16665
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
16495: LD_ADDR_VAR 0 5
16499: PUSH
16500: LD_EXP 64
16504: PUSH
16505: LD_VAR 0 4
16509: ARRAY
16510: PUSH
16511: LD_VAR 0 3
16515: ARRAY
16516: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
16517: LD_VAR 0 5
16521: PUSH
16522: LD_INT 1
16524: ARRAY
16525: PPUSH
16526: CALL_OW 302
16530: NOT
16531: PUSH
16532: LD_VAR 0 5
16536: PUSH
16537: LD_INT 1
16539: ARRAY
16540: PPUSH
16541: CALL_OW 255
16545: PUSH
16546: LD_VAR 0 1
16550: PPUSH
16551: CALL_OW 255
16555: NONEQUAL
16556: OR
16557: IFFALSE 16663
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
16559: LD_VAR 0 5
16563: PUSH
16564: LD_INT 1
16566: ARRAY
16567: PPUSH
16568: CALL_OW 305
16572: PUSH
16573: LD_VAR 0 5
16577: PUSH
16578: LD_INT 1
16580: ARRAY
16581: PPUSH
16582: CALL_OW 255
16586: PUSH
16587: LD_VAR 0 1
16591: PPUSH
16592: CALL_OW 255
16596: EQUAL
16597: AND
16598: IFFALSE 16622
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
16600: LD_VAR 0 5
16604: PUSH
16605: LD_INT 1
16607: ARRAY
16608: PPUSH
16609: LD_VAR 0 5
16613: PUSH
16614: LD_INT 2
16616: ARRAY
16617: PPUSH
16618: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
16622: LD_ADDR_EXP 64
16626: PUSH
16627: LD_EXP 64
16631: PPUSH
16632: LD_VAR 0 4
16636: PPUSH
16637: LD_EXP 64
16641: PUSH
16642: LD_VAR 0 4
16646: ARRAY
16647: PPUSH
16648: LD_VAR 0 3
16652: PPUSH
16653: CALL_OW 3
16657: PPUSH
16658: CALL_OW 1
16662: ST_TO_ADDR
// end ; end ;
16663: GO 16492
16665: POP
16666: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16667: LD_VAR 0 1
16671: PPUSH
16672: LD_EXP 64
16676: PUSH
16677: LD_VAR 0 4
16681: ARRAY
16682: PUSH
16683: LD_INT 0
16685: PLUS
16686: PPUSH
16687: CALL_OW 505
// end ;
16691: LD_VAR 0 2
16695: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
16696: LD_INT 0
16698: PPUSH
16699: PPUSH
16700: PPUSH
16701: PPUSH
// if not hack in hackTanks then
16702: LD_VAR 0 1
16706: PUSH
16707: LD_EXP 63
16711: IN
16712: NOT
16713: IFFALSE 16717
// exit ;
16715: GO 16802
// index := GetElementIndex ( hackTanks , hack ) ;
16717: LD_ADDR_VAR 0 5
16721: PUSH
16722: LD_EXP 63
16726: PPUSH
16727: LD_VAR 0 1
16731: PPUSH
16732: CALL 39396 0 2
16736: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
16737: LD_ADDR_VAR 0 4
16741: PUSH
16742: DOUBLE
16743: LD_INT 1
16745: DEC
16746: ST_TO_ADDR
16747: LD_EXP 64
16751: PUSH
16752: LD_VAR 0 5
16756: ARRAY
16757: PUSH
16758: FOR_TO
16759: IFFALSE 16800
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
16761: LD_EXP 64
16765: PUSH
16766: LD_VAR 0 5
16770: ARRAY
16771: PUSH
16772: LD_VAR 0 4
16776: ARRAY
16777: PUSH
16778: LD_INT 1
16780: ARRAY
16781: PUSH
16782: LD_VAR 0 2
16786: EQUAL
16787: IFFALSE 16798
// KillUnit ( vehicle ) ;
16789: LD_VAR 0 2
16793: PPUSH
16794: CALL_OW 66
16798: GO 16758
16800: POP
16801: POP
// end ;
16802: LD_VAR 0 3
16806: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
16807: LD_EXP 68
16811: NOT
16812: IFFALSE 16847
16814: GO 16816
16816: DISABLE
// begin initMiner := true ;
16817: LD_ADDR_EXP 68
16821: PUSH
16822: LD_INT 1
16824: ST_TO_ADDR
// minersList := [ ] ;
16825: LD_ADDR_EXP 69
16829: PUSH
16830: EMPTY
16831: ST_TO_ADDR
// minerMinesList := [ ] ;
16832: LD_ADDR_EXP 70
16836: PUSH
16837: EMPTY
16838: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
16839: LD_ADDR_EXP 71
16843: PUSH
16844: LD_INT 5
16846: ST_TO_ADDR
// end ;
16847: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
16848: LD_EXP 68
16852: PUSH
16853: LD_INT 34
16855: PUSH
16856: LD_EXP 51
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: PPUSH
16865: CALL_OW 69
16869: AND
16870: IFFALSE 17333
16872: GO 16874
16874: DISABLE
16875: LD_INT 0
16877: PPUSH
16878: PPUSH
16879: PPUSH
16880: PPUSH
// begin enable ;
16881: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
16882: LD_ADDR_VAR 0 1
16886: PUSH
16887: LD_INT 34
16889: PUSH
16890: LD_EXP 51
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PPUSH
16899: CALL_OW 69
16903: PUSH
16904: FOR_IN
16905: IFFALSE 16977
// begin if not i in minersList then
16907: LD_VAR 0 1
16911: PUSH
16912: LD_EXP 69
16916: IN
16917: NOT
16918: IFFALSE 16975
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
16920: LD_ADDR_EXP 69
16924: PUSH
16925: LD_EXP 69
16929: PPUSH
16930: LD_EXP 69
16934: PUSH
16935: LD_INT 1
16937: PLUS
16938: PPUSH
16939: LD_VAR 0 1
16943: PPUSH
16944: CALL_OW 1
16948: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
16949: LD_ADDR_EXP 70
16953: PUSH
16954: LD_EXP 70
16958: PPUSH
16959: LD_EXP 70
16963: PUSH
16964: LD_INT 1
16966: PLUS
16967: PPUSH
16968: EMPTY
16969: PPUSH
16970: CALL_OW 1
16974: ST_TO_ADDR
// end end ;
16975: GO 16904
16977: POP
16978: POP
// for i := minerMinesList downto 1 do
16979: LD_ADDR_VAR 0 1
16983: PUSH
16984: DOUBLE
16985: LD_EXP 70
16989: INC
16990: ST_TO_ADDR
16991: LD_INT 1
16993: PUSH
16994: FOR_DOWNTO
16995: IFFALSE 17331
// begin if IsLive ( minersList [ i ] ) then
16997: LD_EXP 69
17001: PUSH
17002: LD_VAR 0 1
17006: ARRAY
17007: PPUSH
17008: CALL_OW 300
17012: IFFALSE 17040
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
17014: LD_EXP 69
17018: PUSH
17019: LD_VAR 0 1
17023: ARRAY
17024: PPUSH
17025: LD_EXP 70
17029: PUSH
17030: LD_VAR 0 1
17034: ARRAY
17035: PPUSH
17036: CALL_OW 505
// if not minerMinesList [ i ] then
17040: LD_EXP 70
17044: PUSH
17045: LD_VAR 0 1
17049: ARRAY
17050: NOT
17051: IFFALSE 17055
// continue ;
17053: GO 16994
// for j := minerMinesList [ i ] downto 1 do
17055: LD_ADDR_VAR 0 2
17059: PUSH
17060: DOUBLE
17061: LD_EXP 70
17065: PUSH
17066: LD_VAR 0 1
17070: ARRAY
17071: INC
17072: ST_TO_ADDR
17073: LD_INT 1
17075: PUSH
17076: FOR_DOWNTO
17077: IFFALSE 17327
// begin side := GetSide ( minersList [ i ] ) ;
17079: LD_ADDR_VAR 0 3
17083: PUSH
17084: LD_EXP 69
17088: PUSH
17089: LD_VAR 0 1
17093: ARRAY
17094: PPUSH
17095: CALL_OW 255
17099: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
17100: LD_ADDR_VAR 0 4
17104: PUSH
17105: LD_EXP 70
17109: PUSH
17110: LD_VAR 0 1
17114: ARRAY
17115: PUSH
17116: LD_VAR 0 2
17120: ARRAY
17121: PUSH
17122: LD_INT 1
17124: ARRAY
17125: PPUSH
17126: LD_EXP 70
17130: PUSH
17131: LD_VAR 0 1
17135: ARRAY
17136: PUSH
17137: LD_VAR 0 2
17141: ARRAY
17142: PUSH
17143: LD_INT 2
17145: ARRAY
17146: PPUSH
17147: CALL_OW 428
17151: ST_TO_ADDR
// if not tmp then
17152: LD_VAR 0 4
17156: NOT
17157: IFFALSE 17161
// continue ;
17159: GO 17076
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
17161: LD_VAR 0 4
17165: PUSH
17166: LD_INT 81
17168: PUSH
17169: LD_VAR 0 3
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PPUSH
17178: CALL_OW 69
17182: IN
17183: PUSH
17184: LD_EXP 70
17188: PUSH
17189: LD_VAR 0 1
17193: ARRAY
17194: PUSH
17195: LD_VAR 0 2
17199: ARRAY
17200: PUSH
17201: LD_INT 1
17203: ARRAY
17204: PPUSH
17205: LD_EXP 70
17209: PUSH
17210: LD_VAR 0 1
17214: ARRAY
17215: PUSH
17216: LD_VAR 0 2
17220: ARRAY
17221: PUSH
17222: LD_INT 2
17224: ARRAY
17225: PPUSH
17226: CALL_OW 458
17230: AND
17231: IFFALSE 17325
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
17233: LD_EXP 70
17237: PUSH
17238: LD_VAR 0 1
17242: ARRAY
17243: PUSH
17244: LD_VAR 0 2
17248: ARRAY
17249: PUSH
17250: LD_INT 1
17252: ARRAY
17253: PPUSH
17254: LD_EXP 70
17258: PUSH
17259: LD_VAR 0 1
17263: ARRAY
17264: PUSH
17265: LD_VAR 0 2
17269: ARRAY
17270: PUSH
17271: LD_INT 2
17273: ARRAY
17274: PPUSH
17275: LD_VAR 0 3
17279: PPUSH
17280: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
17284: LD_ADDR_EXP 70
17288: PUSH
17289: LD_EXP 70
17293: PPUSH
17294: LD_VAR 0 1
17298: PPUSH
17299: LD_EXP 70
17303: PUSH
17304: LD_VAR 0 1
17308: ARRAY
17309: PPUSH
17310: LD_VAR 0 2
17314: PPUSH
17315: CALL_OW 3
17319: PPUSH
17320: CALL_OW 1
17324: ST_TO_ADDR
// end ; end ;
17325: GO 17076
17327: POP
17328: POP
// end ;
17329: GO 16994
17331: POP
17332: POP
// end ;
17333: PPOPN 4
17335: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
17336: LD_INT 0
17338: PPUSH
17339: PPUSH
// result := false ;
17340: LD_ADDR_VAR 0 4
17344: PUSH
17345: LD_INT 0
17347: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
17348: LD_VAR 0 1
17352: PPUSH
17353: CALL_OW 264
17357: PUSH
17358: LD_EXP 51
17362: EQUAL
17363: NOT
17364: IFFALSE 17368
// exit ;
17366: GO 17608
// index := GetElementIndex ( minersList , unit ) ;
17368: LD_ADDR_VAR 0 5
17372: PUSH
17373: LD_EXP 69
17377: PPUSH
17378: LD_VAR 0 1
17382: PPUSH
17383: CALL 39396 0 2
17387: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
17388: LD_EXP 70
17392: PUSH
17393: LD_VAR 0 5
17397: ARRAY
17398: PUSH
17399: LD_EXP 71
17403: GREATEREQUAL
17404: IFFALSE 17408
// exit ;
17406: GO 17608
// ComMoveXY ( unit , x , y ) ;
17408: LD_VAR 0 1
17412: PPUSH
17413: LD_VAR 0 2
17417: PPUSH
17418: LD_VAR 0 3
17422: PPUSH
17423: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17427: LD_INT 35
17429: PPUSH
17430: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
17434: LD_VAR 0 1
17438: PPUSH
17439: LD_VAR 0 2
17443: PPUSH
17444: LD_VAR 0 3
17448: PPUSH
17449: CALL 70665 0 3
17453: NOT
17454: PUSH
17455: LD_VAR 0 1
17459: PPUSH
17460: CALL_OW 314
17464: AND
17465: IFFALSE 17469
// exit ;
17467: GO 17608
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
17469: LD_VAR 0 2
17473: PPUSH
17474: LD_VAR 0 3
17478: PPUSH
17479: CALL_OW 428
17483: PUSH
17484: LD_VAR 0 1
17488: EQUAL
17489: PUSH
17490: LD_VAR 0 1
17494: PPUSH
17495: CALL_OW 314
17499: NOT
17500: AND
17501: IFFALSE 17427
// PlaySoundXY ( x , y , PlantMine ) ;
17503: LD_VAR 0 2
17507: PPUSH
17508: LD_VAR 0 3
17512: PPUSH
17513: LD_STRING PlantMine
17515: PPUSH
17516: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
17520: LD_VAR 0 2
17524: PPUSH
17525: LD_VAR 0 3
17529: PPUSH
17530: LD_VAR 0 1
17534: PPUSH
17535: CALL_OW 255
17539: PPUSH
17540: LD_INT 0
17542: PPUSH
17543: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17547: LD_ADDR_EXP 70
17551: PUSH
17552: LD_EXP 70
17556: PPUSH
17557: LD_VAR 0 5
17561: PUSH
17562: LD_EXP 70
17566: PUSH
17567: LD_VAR 0 5
17571: ARRAY
17572: PUSH
17573: LD_INT 1
17575: PLUS
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PPUSH
17581: LD_VAR 0 2
17585: PUSH
17586: LD_VAR 0 3
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PPUSH
17595: CALL 39611 0 3
17599: ST_TO_ADDR
// result := true ;
17600: LD_ADDR_VAR 0 4
17604: PUSH
17605: LD_INT 1
17607: ST_TO_ADDR
// end ;
17608: LD_VAR 0 4
17612: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
17613: LD_INT 0
17615: PPUSH
17616: PPUSH
17617: PPUSH
// if not unit in minersList then
17618: LD_VAR 0 1
17622: PUSH
17623: LD_EXP 69
17627: IN
17628: NOT
17629: IFFALSE 17633
// exit ;
17631: GO 18025
// index := GetElementIndex ( minersList , unit ) ;
17633: LD_ADDR_VAR 0 6
17637: PUSH
17638: LD_EXP 69
17642: PPUSH
17643: LD_VAR 0 1
17647: PPUSH
17648: CALL 39396 0 2
17652: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
17653: LD_ADDR_VAR 0 5
17657: PUSH
17658: DOUBLE
17659: LD_EXP 70
17663: PUSH
17664: LD_VAR 0 6
17668: ARRAY
17669: INC
17670: ST_TO_ADDR
17671: LD_INT 1
17673: PUSH
17674: FOR_DOWNTO
17675: IFFALSE 17836
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
17677: LD_EXP 70
17681: PUSH
17682: LD_VAR 0 6
17686: ARRAY
17687: PUSH
17688: LD_VAR 0 5
17692: ARRAY
17693: PUSH
17694: LD_INT 1
17696: ARRAY
17697: PUSH
17698: LD_VAR 0 2
17702: EQUAL
17703: PUSH
17704: LD_EXP 70
17708: PUSH
17709: LD_VAR 0 6
17713: ARRAY
17714: PUSH
17715: LD_VAR 0 5
17719: ARRAY
17720: PUSH
17721: LD_INT 2
17723: ARRAY
17724: PUSH
17725: LD_VAR 0 3
17729: EQUAL
17730: AND
17731: IFFALSE 17834
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17733: LD_EXP 70
17737: PUSH
17738: LD_VAR 0 6
17742: ARRAY
17743: PUSH
17744: LD_VAR 0 5
17748: ARRAY
17749: PUSH
17750: LD_INT 1
17752: ARRAY
17753: PPUSH
17754: LD_EXP 70
17758: PUSH
17759: LD_VAR 0 6
17763: ARRAY
17764: PUSH
17765: LD_VAR 0 5
17769: ARRAY
17770: PUSH
17771: LD_INT 2
17773: ARRAY
17774: PPUSH
17775: LD_VAR 0 1
17779: PPUSH
17780: CALL_OW 255
17784: PPUSH
17785: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17789: LD_ADDR_EXP 70
17793: PUSH
17794: LD_EXP 70
17798: PPUSH
17799: LD_VAR 0 6
17803: PPUSH
17804: LD_EXP 70
17808: PUSH
17809: LD_VAR 0 6
17813: ARRAY
17814: PPUSH
17815: LD_VAR 0 5
17819: PPUSH
17820: CALL_OW 3
17824: PPUSH
17825: CALL_OW 1
17829: ST_TO_ADDR
// exit ;
17830: POP
17831: POP
17832: GO 18025
// end ; end ;
17834: GO 17674
17836: POP
17837: POP
// for i := minerMinesList [ index ] downto 1 do
17838: LD_ADDR_VAR 0 5
17842: PUSH
17843: DOUBLE
17844: LD_EXP 70
17848: PUSH
17849: LD_VAR 0 6
17853: ARRAY
17854: INC
17855: ST_TO_ADDR
17856: LD_INT 1
17858: PUSH
17859: FOR_DOWNTO
17860: IFFALSE 18023
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
17862: LD_EXP 70
17866: PUSH
17867: LD_VAR 0 6
17871: ARRAY
17872: PUSH
17873: LD_VAR 0 5
17877: ARRAY
17878: PUSH
17879: LD_INT 1
17881: ARRAY
17882: PPUSH
17883: LD_EXP 70
17887: PUSH
17888: LD_VAR 0 6
17892: ARRAY
17893: PUSH
17894: LD_VAR 0 5
17898: ARRAY
17899: PUSH
17900: LD_INT 2
17902: ARRAY
17903: PPUSH
17904: LD_VAR 0 2
17908: PPUSH
17909: LD_VAR 0 3
17913: PPUSH
17914: CALL_OW 298
17918: PUSH
17919: LD_INT 6
17921: LESS
17922: IFFALSE 18021
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17924: LD_EXP 70
17928: PUSH
17929: LD_VAR 0 6
17933: ARRAY
17934: PUSH
17935: LD_VAR 0 5
17939: ARRAY
17940: PUSH
17941: LD_INT 1
17943: ARRAY
17944: PPUSH
17945: LD_EXP 70
17949: PUSH
17950: LD_VAR 0 6
17954: ARRAY
17955: PUSH
17956: LD_VAR 0 5
17960: ARRAY
17961: PUSH
17962: LD_INT 2
17964: ARRAY
17965: PPUSH
17966: LD_VAR 0 1
17970: PPUSH
17971: CALL_OW 255
17975: PPUSH
17976: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17980: LD_ADDR_EXP 70
17984: PUSH
17985: LD_EXP 70
17989: PPUSH
17990: LD_VAR 0 6
17994: PPUSH
17995: LD_EXP 70
17999: PUSH
18000: LD_VAR 0 6
18004: ARRAY
18005: PPUSH
18006: LD_VAR 0 5
18010: PPUSH
18011: CALL_OW 3
18015: PPUSH
18016: CALL_OW 1
18020: ST_TO_ADDR
// end ; end ;
18021: GO 17859
18023: POP
18024: POP
// end ;
18025: LD_VAR 0 4
18029: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
18030: LD_INT 0
18032: PPUSH
18033: PPUSH
18034: PPUSH
18035: PPUSH
18036: PPUSH
18037: PPUSH
18038: PPUSH
18039: PPUSH
18040: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
18041: LD_VAR 0 1
18045: PPUSH
18046: CALL_OW 264
18050: PUSH
18051: LD_EXP 51
18055: EQUAL
18056: NOT
18057: PUSH
18058: LD_VAR 0 1
18062: PUSH
18063: LD_EXP 69
18067: IN
18068: NOT
18069: OR
18070: IFFALSE 18074
// exit ;
18072: GO 18396
// index := GetElementIndex ( minersList , unit ) ;
18074: LD_ADDR_VAR 0 6
18078: PUSH
18079: LD_EXP 69
18083: PPUSH
18084: LD_VAR 0 1
18088: PPUSH
18089: CALL 39396 0 2
18093: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
18094: LD_ADDR_VAR 0 8
18098: PUSH
18099: LD_EXP 71
18103: PUSH
18104: LD_EXP 70
18108: PUSH
18109: LD_VAR 0 6
18113: ARRAY
18114: MINUS
18115: ST_TO_ADDR
// if not minesFreeAmount then
18116: LD_VAR 0 8
18120: NOT
18121: IFFALSE 18125
// exit ;
18123: GO 18396
// tmp := [ ] ;
18125: LD_ADDR_VAR 0 7
18129: PUSH
18130: EMPTY
18131: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
18132: LD_ADDR_VAR 0 5
18136: PUSH
18137: DOUBLE
18138: LD_INT 1
18140: DEC
18141: ST_TO_ADDR
18142: LD_VAR 0 8
18146: PUSH
18147: FOR_TO
18148: IFFALSE 18343
// begin _d := rand ( 0 , 5 ) ;
18150: LD_ADDR_VAR 0 11
18154: PUSH
18155: LD_INT 0
18157: PPUSH
18158: LD_INT 5
18160: PPUSH
18161: CALL_OW 12
18165: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
18166: LD_ADDR_VAR 0 12
18170: PUSH
18171: LD_INT 2
18173: PPUSH
18174: LD_INT 6
18176: PPUSH
18177: CALL_OW 12
18181: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
18182: LD_ADDR_VAR 0 9
18186: PUSH
18187: LD_VAR 0 2
18191: PPUSH
18192: LD_VAR 0 11
18196: PPUSH
18197: LD_VAR 0 12
18201: PPUSH
18202: CALL_OW 272
18206: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
18207: LD_ADDR_VAR 0 10
18211: PUSH
18212: LD_VAR 0 3
18216: PPUSH
18217: LD_VAR 0 11
18221: PPUSH
18222: LD_VAR 0 12
18226: PPUSH
18227: CALL_OW 273
18231: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
18232: LD_VAR 0 9
18236: PPUSH
18237: LD_VAR 0 10
18241: PPUSH
18242: CALL_OW 488
18246: PUSH
18247: LD_VAR 0 9
18251: PUSH
18252: LD_VAR 0 10
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: LD_VAR 0 7
18265: IN
18266: NOT
18267: AND
18268: PUSH
18269: LD_VAR 0 9
18273: PPUSH
18274: LD_VAR 0 10
18278: PPUSH
18279: CALL_OW 458
18283: NOT
18284: AND
18285: IFFALSE 18327
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
18287: LD_ADDR_VAR 0 7
18291: PUSH
18292: LD_VAR 0 7
18296: PPUSH
18297: LD_VAR 0 7
18301: PUSH
18302: LD_INT 1
18304: PLUS
18305: PPUSH
18306: LD_VAR 0 9
18310: PUSH
18311: LD_VAR 0 10
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PPUSH
18320: CALL_OW 1
18324: ST_TO_ADDR
18325: GO 18341
// i := i - 1 ;
18327: LD_ADDR_VAR 0 5
18331: PUSH
18332: LD_VAR 0 5
18336: PUSH
18337: LD_INT 1
18339: MINUS
18340: ST_TO_ADDR
// end ;
18341: GO 18147
18343: POP
18344: POP
// for i in tmp do
18345: LD_ADDR_VAR 0 5
18349: PUSH
18350: LD_VAR 0 7
18354: PUSH
18355: FOR_IN
18356: IFFALSE 18394
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
18358: LD_VAR 0 1
18362: PPUSH
18363: LD_VAR 0 5
18367: PUSH
18368: LD_INT 1
18370: ARRAY
18371: PPUSH
18372: LD_VAR 0 5
18376: PUSH
18377: LD_INT 2
18379: ARRAY
18380: PPUSH
18381: CALL 17336 0 3
18385: NOT
18386: IFFALSE 18392
// exit ;
18388: POP
18389: POP
18390: GO 18396
18392: GO 18355
18394: POP
18395: POP
// end ;
18396: LD_VAR 0 4
18400: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
18401: LD_INT 0
18403: PPUSH
18404: PPUSH
18405: PPUSH
18406: PPUSH
18407: PPUSH
18408: PPUSH
18409: PPUSH
// if not GetClass ( unit ) = class_sniper then
18410: LD_VAR 0 1
18414: PPUSH
18415: CALL_OW 257
18419: PUSH
18420: LD_INT 5
18422: EQUAL
18423: NOT
18424: IFFALSE 18428
// exit ;
18426: GO 18816
// dist := 8 ;
18428: LD_ADDR_VAR 0 5
18432: PUSH
18433: LD_INT 8
18435: ST_TO_ADDR
// viewRange := 12 ;
18436: LD_ADDR_VAR 0 7
18440: PUSH
18441: LD_INT 12
18443: ST_TO_ADDR
// side := GetSide ( unit ) ;
18444: LD_ADDR_VAR 0 6
18448: PUSH
18449: LD_VAR 0 1
18453: PPUSH
18454: CALL_OW 255
18458: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
18459: LD_INT 61
18461: PPUSH
18462: LD_VAR 0 6
18466: PPUSH
18467: CALL_OW 321
18471: PUSH
18472: LD_INT 2
18474: EQUAL
18475: IFFALSE 18485
// viewRange := 16 ;
18477: LD_ADDR_VAR 0 7
18481: PUSH
18482: LD_INT 16
18484: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
18485: LD_VAR 0 1
18489: PPUSH
18490: LD_VAR 0 2
18494: PPUSH
18495: LD_VAR 0 3
18499: PPUSH
18500: CALL_OW 297
18504: PUSH
18505: LD_VAR 0 5
18509: GREATER
18510: IFFALSE 18589
// begin ComMoveXY ( unit , x , y ) ;
18512: LD_VAR 0 1
18516: PPUSH
18517: LD_VAR 0 2
18521: PPUSH
18522: LD_VAR 0 3
18526: PPUSH
18527: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18531: LD_INT 35
18533: PPUSH
18534: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
18538: LD_VAR 0 1
18542: PPUSH
18543: LD_VAR 0 2
18547: PPUSH
18548: LD_VAR 0 3
18552: PPUSH
18553: CALL 70665 0 3
18557: NOT
18558: IFFALSE 18562
// exit ;
18560: GO 18816
// until GetDistUnitXY ( unit , x , y ) < dist ;
18562: LD_VAR 0 1
18566: PPUSH
18567: LD_VAR 0 2
18571: PPUSH
18572: LD_VAR 0 3
18576: PPUSH
18577: CALL_OW 297
18581: PUSH
18582: LD_VAR 0 5
18586: LESS
18587: IFFALSE 18531
// end ; ComTurnXY ( unit , x , y ) ;
18589: LD_VAR 0 1
18593: PPUSH
18594: LD_VAR 0 2
18598: PPUSH
18599: LD_VAR 0 3
18603: PPUSH
18604: CALL_OW 118
// wait ( 5 ) ;
18608: LD_INT 5
18610: PPUSH
18611: CALL_OW 67
// _d := GetDir ( unit ) ;
18615: LD_ADDR_VAR 0 10
18619: PUSH
18620: LD_VAR 0 1
18624: PPUSH
18625: CALL_OW 254
18629: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
18630: LD_ADDR_VAR 0 8
18634: PUSH
18635: LD_VAR 0 1
18639: PPUSH
18640: CALL_OW 250
18644: PPUSH
18645: LD_VAR 0 10
18649: PPUSH
18650: LD_VAR 0 5
18654: PPUSH
18655: CALL_OW 272
18659: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
18660: LD_ADDR_VAR 0 9
18664: PUSH
18665: LD_VAR 0 1
18669: PPUSH
18670: CALL_OW 251
18674: PPUSH
18675: LD_VAR 0 10
18679: PPUSH
18680: LD_VAR 0 5
18684: PPUSH
18685: CALL_OW 273
18689: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18690: LD_VAR 0 8
18694: PPUSH
18695: LD_VAR 0 9
18699: PPUSH
18700: CALL_OW 488
18704: NOT
18705: IFFALSE 18709
// exit ;
18707: GO 18816
// ComAnimCustom ( unit , 1 ) ;
18709: LD_VAR 0 1
18713: PPUSH
18714: LD_INT 1
18716: PPUSH
18717: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
18721: LD_VAR 0 8
18725: PPUSH
18726: LD_VAR 0 9
18730: PPUSH
18731: LD_VAR 0 6
18735: PPUSH
18736: LD_VAR 0 7
18740: PPUSH
18741: CALL_OW 330
// repeat wait ( 1 ) ;
18745: LD_INT 1
18747: PPUSH
18748: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
18752: LD_VAR 0 1
18756: PPUSH
18757: CALL_OW 316
18761: PUSH
18762: LD_VAR 0 1
18766: PPUSH
18767: CALL_OW 314
18771: OR
18772: PUSH
18773: LD_VAR 0 1
18777: PPUSH
18778: CALL_OW 302
18782: NOT
18783: OR
18784: PUSH
18785: LD_VAR 0 1
18789: PPUSH
18790: CALL_OW 301
18794: OR
18795: IFFALSE 18745
// RemoveSeeing ( _x , _y , side ) ;
18797: LD_VAR 0 8
18801: PPUSH
18802: LD_VAR 0 9
18806: PPUSH
18807: LD_VAR 0 6
18811: PPUSH
18812: CALL_OW 331
// end ; end_of_file
18816: LD_VAR 0 4
18820: RET
// every 0 0$1 do
18821: GO 18823
18823: DISABLE
// begin enable ;
18824: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18825: LD_STRING updateTimer(
18827: PUSH
18828: LD_OWVAR 1
18832: STR
18833: PUSH
18834: LD_STRING );
18836: STR
18837: PPUSH
18838: CALL_OW 559
// end ;
18842: END
// export function SOS_MapStart ( ) ; begin
18843: LD_INT 0
18845: PPUSH
// if streamModeActive then
18846: LD_EXP 72
18850: IFFALSE 18859
// DefineStreamItems ( true ) ;
18852: LD_INT 1
18854: PPUSH
18855: CALL 20513 0 1
// UpdateFactoryWaypoints ( ) ;
18859: CALL 33374 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18863: CALL 33631 0 0
// end ;
18867: LD_VAR 0 1
18871: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18872: LD_INT 0
18874: PPUSH
// if p2 = 100 then
18875: LD_VAR 0 2
18879: PUSH
18880: LD_INT 100
18882: EQUAL
18883: IFFALSE 19886
// begin if not StreamModeActive then
18885: LD_EXP 72
18889: NOT
18890: IFFALSE 18900
// StreamModeActive := true ;
18892: LD_ADDR_EXP 72
18896: PUSH
18897: LD_INT 1
18899: ST_TO_ADDR
// if p3 = 0 then
18900: LD_VAR 0 3
18904: PUSH
18905: LD_INT 0
18907: EQUAL
18908: IFFALSE 18914
// InitStreamMode ;
18910: CALL 20049 0 0
// if p3 = 1 then
18914: LD_VAR 0 3
18918: PUSH
18919: LD_INT 1
18921: EQUAL
18922: IFFALSE 18932
// sRocket := true ;
18924: LD_ADDR_EXP 77
18928: PUSH
18929: LD_INT 1
18931: ST_TO_ADDR
// if p3 = 2 then
18932: LD_VAR 0 3
18936: PUSH
18937: LD_INT 2
18939: EQUAL
18940: IFFALSE 18950
// sSpeed := true ;
18942: LD_ADDR_EXP 76
18946: PUSH
18947: LD_INT 1
18949: ST_TO_ADDR
// if p3 = 3 then
18950: LD_VAR 0 3
18954: PUSH
18955: LD_INT 3
18957: EQUAL
18958: IFFALSE 18968
// sEngine := true ;
18960: LD_ADDR_EXP 78
18964: PUSH
18965: LD_INT 1
18967: ST_TO_ADDR
// if p3 = 4 then
18968: LD_VAR 0 3
18972: PUSH
18973: LD_INT 4
18975: EQUAL
18976: IFFALSE 18986
// sSpec := true ;
18978: LD_ADDR_EXP 75
18982: PUSH
18983: LD_INT 1
18985: ST_TO_ADDR
// if p3 = 5 then
18986: LD_VAR 0 3
18990: PUSH
18991: LD_INT 5
18993: EQUAL
18994: IFFALSE 19004
// sLevel := true ;
18996: LD_ADDR_EXP 79
19000: PUSH
19001: LD_INT 1
19003: ST_TO_ADDR
// if p3 = 6 then
19004: LD_VAR 0 3
19008: PUSH
19009: LD_INT 6
19011: EQUAL
19012: IFFALSE 19022
// sArmoury := true ;
19014: LD_ADDR_EXP 80
19018: PUSH
19019: LD_INT 1
19021: ST_TO_ADDR
// if p3 = 7 then
19022: LD_VAR 0 3
19026: PUSH
19027: LD_INT 7
19029: EQUAL
19030: IFFALSE 19040
// sRadar := true ;
19032: LD_ADDR_EXP 81
19036: PUSH
19037: LD_INT 1
19039: ST_TO_ADDR
// if p3 = 8 then
19040: LD_VAR 0 3
19044: PUSH
19045: LD_INT 8
19047: EQUAL
19048: IFFALSE 19058
// sBunker := true ;
19050: LD_ADDR_EXP 82
19054: PUSH
19055: LD_INT 1
19057: ST_TO_ADDR
// if p3 = 9 then
19058: LD_VAR 0 3
19062: PUSH
19063: LD_INT 9
19065: EQUAL
19066: IFFALSE 19076
// sHack := true ;
19068: LD_ADDR_EXP 83
19072: PUSH
19073: LD_INT 1
19075: ST_TO_ADDR
// if p3 = 10 then
19076: LD_VAR 0 3
19080: PUSH
19081: LD_INT 10
19083: EQUAL
19084: IFFALSE 19094
// sFire := true ;
19086: LD_ADDR_EXP 84
19090: PUSH
19091: LD_INT 1
19093: ST_TO_ADDR
// if p3 = 11 then
19094: LD_VAR 0 3
19098: PUSH
19099: LD_INT 11
19101: EQUAL
19102: IFFALSE 19112
// sRefresh := true ;
19104: LD_ADDR_EXP 85
19108: PUSH
19109: LD_INT 1
19111: ST_TO_ADDR
// if p3 = 12 then
19112: LD_VAR 0 3
19116: PUSH
19117: LD_INT 12
19119: EQUAL
19120: IFFALSE 19130
// sExp := true ;
19122: LD_ADDR_EXP 86
19126: PUSH
19127: LD_INT 1
19129: ST_TO_ADDR
// if p3 = 13 then
19130: LD_VAR 0 3
19134: PUSH
19135: LD_INT 13
19137: EQUAL
19138: IFFALSE 19148
// sDepot := true ;
19140: LD_ADDR_EXP 87
19144: PUSH
19145: LD_INT 1
19147: ST_TO_ADDR
// if p3 = 14 then
19148: LD_VAR 0 3
19152: PUSH
19153: LD_INT 14
19155: EQUAL
19156: IFFALSE 19166
// sFlag := true ;
19158: LD_ADDR_EXP 88
19162: PUSH
19163: LD_INT 1
19165: ST_TO_ADDR
// if p3 = 15 then
19166: LD_VAR 0 3
19170: PUSH
19171: LD_INT 15
19173: EQUAL
19174: IFFALSE 19184
// sKamikadze := true ;
19176: LD_ADDR_EXP 96
19180: PUSH
19181: LD_INT 1
19183: ST_TO_ADDR
// if p3 = 16 then
19184: LD_VAR 0 3
19188: PUSH
19189: LD_INT 16
19191: EQUAL
19192: IFFALSE 19202
// sTroll := true ;
19194: LD_ADDR_EXP 97
19198: PUSH
19199: LD_INT 1
19201: ST_TO_ADDR
// if p3 = 17 then
19202: LD_VAR 0 3
19206: PUSH
19207: LD_INT 17
19209: EQUAL
19210: IFFALSE 19220
// sSlow := true ;
19212: LD_ADDR_EXP 98
19216: PUSH
19217: LD_INT 1
19219: ST_TO_ADDR
// if p3 = 18 then
19220: LD_VAR 0 3
19224: PUSH
19225: LD_INT 18
19227: EQUAL
19228: IFFALSE 19238
// sLack := true ;
19230: LD_ADDR_EXP 99
19234: PUSH
19235: LD_INT 1
19237: ST_TO_ADDR
// if p3 = 19 then
19238: LD_VAR 0 3
19242: PUSH
19243: LD_INT 19
19245: EQUAL
19246: IFFALSE 19256
// sTank := true ;
19248: LD_ADDR_EXP 101
19252: PUSH
19253: LD_INT 1
19255: ST_TO_ADDR
// if p3 = 20 then
19256: LD_VAR 0 3
19260: PUSH
19261: LD_INT 20
19263: EQUAL
19264: IFFALSE 19274
// sRemote := true ;
19266: LD_ADDR_EXP 102
19270: PUSH
19271: LD_INT 1
19273: ST_TO_ADDR
// if p3 = 21 then
19274: LD_VAR 0 3
19278: PUSH
19279: LD_INT 21
19281: EQUAL
19282: IFFALSE 19292
// sPowell := true ;
19284: LD_ADDR_EXP 103
19288: PUSH
19289: LD_INT 1
19291: ST_TO_ADDR
// if p3 = 22 then
19292: LD_VAR 0 3
19296: PUSH
19297: LD_INT 22
19299: EQUAL
19300: IFFALSE 19310
// sTeleport := true ;
19302: LD_ADDR_EXP 106
19306: PUSH
19307: LD_INT 1
19309: ST_TO_ADDR
// if p3 = 23 then
19310: LD_VAR 0 3
19314: PUSH
19315: LD_INT 23
19317: EQUAL
19318: IFFALSE 19328
// sOilTower := true ;
19320: LD_ADDR_EXP 108
19324: PUSH
19325: LD_INT 1
19327: ST_TO_ADDR
// if p3 = 24 then
19328: LD_VAR 0 3
19332: PUSH
19333: LD_INT 24
19335: EQUAL
19336: IFFALSE 19346
// sShovel := true ;
19338: LD_ADDR_EXP 109
19342: PUSH
19343: LD_INT 1
19345: ST_TO_ADDR
// if p3 = 25 then
19346: LD_VAR 0 3
19350: PUSH
19351: LD_INT 25
19353: EQUAL
19354: IFFALSE 19364
// sSheik := true ;
19356: LD_ADDR_EXP 110
19360: PUSH
19361: LD_INT 1
19363: ST_TO_ADDR
// if p3 = 26 then
19364: LD_VAR 0 3
19368: PUSH
19369: LD_INT 26
19371: EQUAL
19372: IFFALSE 19382
// sEarthquake := true ;
19374: LD_ADDR_EXP 112
19378: PUSH
19379: LD_INT 1
19381: ST_TO_ADDR
// if p3 = 27 then
19382: LD_VAR 0 3
19386: PUSH
19387: LD_INT 27
19389: EQUAL
19390: IFFALSE 19400
// sAI := true ;
19392: LD_ADDR_EXP 113
19396: PUSH
19397: LD_INT 1
19399: ST_TO_ADDR
// if p3 = 28 then
19400: LD_VAR 0 3
19404: PUSH
19405: LD_INT 28
19407: EQUAL
19408: IFFALSE 19418
// sCargo := true ;
19410: LD_ADDR_EXP 116
19414: PUSH
19415: LD_INT 1
19417: ST_TO_ADDR
// if p3 = 29 then
19418: LD_VAR 0 3
19422: PUSH
19423: LD_INT 29
19425: EQUAL
19426: IFFALSE 19436
// sDLaser := true ;
19428: LD_ADDR_EXP 117
19432: PUSH
19433: LD_INT 1
19435: ST_TO_ADDR
// if p3 = 30 then
19436: LD_VAR 0 3
19440: PUSH
19441: LD_INT 30
19443: EQUAL
19444: IFFALSE 19454
// sExchange := true ;
19446: LD_ADDR_EXP 118
19450: PUSH
19451: LD_INT 1
19453: ST_TO_ADDR
// if p3 = 31 then
19454: LD_VAR 0 3
19458: PUSH
19459: LD_INT 31
19461: EQUAL
19462: IFFALSE 19472
// sFac := true ;
19464: LD_ADDR_EXP 119
19468: PUSH
19469: LD_INT 1
19471: ST_TO_ADDR
// if p3 = 32 then
19472: LD_VAR 0 3
19476: PUSH
19477: LD_INT 32
19479: EQUAL
19480: IFFALSE 19490
// sPower := true ;
19482: LD_ADDR_EXP 120
19486: PUSH
19487: LD_INT 1
19489: ST_TO_ADDR
// if p3 = 33 then
19490: LD_VAR 0 3
19494: PUSH
19495: LD_INT 33
19497: EQUAL
19498: IFFALSE 19508
// sRandom := true ;
19500: LD_ADDR_EXP 121
19504: PUSH
19505: LD_INT 1
19507: ST_TO_ADDR
// if p3 = 34 then
19508: LD_VAR 0 3
19512: PUSH
19513: LD_INT 34
19515: EQUAL
19516: IFFALSE 19526
// sShield := true ;
19518: LD_ADDR_EXP 122
19522: PUSH
19523: LD_INT 1
19525: ST_TO_ADDR
// if p3 = 35 then
19526: LD_VAR 0 3
19530: PUSH
19531: LD_INT 35
19533: EQUAL
19534: IFFALSE 19544
// sTime := true ;
19536: LD_ADDR_EXP 123
19540: PUSH
19541: LD_INT 1
19543: ST_TO_ADDR
// if p3 = 36 then
19544: LD_VAR 0 3
19548: PUSH
19549: LD_INT 36
19551: EQUAL
19552: IFFALSE 19562
// sTools := true ;
19554: LD_ADDR_EXP 124
19558: PUSH
19559: LD_INT 1
19561: ST_TO_ADDR
// if p3 = 101 then
19562: LD_VAR 0 3
19566: PUSH
19567: LD_INT 101
19569: EQUAL
19570: IFFALSE 19580
// sSold := true ;
19572: LD_ADDR_EXP 89
19576: PUSH
19577: LD_INT 1
19579: ST_TO_ADDR
// if p3 = 102 then
19580: LD_VAR 0 3
19584: PUSH
19585: LD_INT 102
19587: EQUAL
19588: IFFALSE 19598
// sDiff := true ;
19590: LD_ADDR_EXP 90
19594: PUSH
19595: LD_INT 1
19597: ST_TO_ADDR
// if p3 = 103 then
19598: LD_VAR 0 3
19602: PUSH
19603: LD_INT 103
19605: EQUAL
19606: IFFALSE 19616
// sFog := true ;
19608: LD_ADDR_EXP 93
19612: PUSH
19613: LD_INT 1
19615: ST_TO_ADDR
// if p3 = 104 then
19616: LD_VAR 0 3
19620: PUSH
19621: LD_INT 104
19623: EQUAL
19624: IFFALSE 19634
// sReset := true ;
19626: LD_ADDR_EXP 94
19630: PUSH
19631: LD_INT 1
19633: ST_TO_ADDR
// if p3 = 105 then
19634: LD_VAR 0 3
19638: PUSH
19639: LD_INT 105
19641: EQUAL
19642: IFFALSE 19652
// sSun := true ;
19644: LD_ADDR_EXP 95
19648: PUSH
19649: LD_INT 1
19651: ST_TO_ADDR
// if p3 = 106 then
19652: LD_VAR 0 3
19656: PUSH
19657: LD_INT 106
19659: EQUAL
19660: IFFALSE 19670
// sTiger := true ;
19662: LD_ADDR_EXP 91
19666: PUSH
19667: LD_INT 1
19669: ST_TO_ADDR
// if p3 = 107 then
19670: LD_VAR 0 3
19674: PUSH
19675: LD_INT 107
19677: EQUAL
19678: IFFALSE 19688
// sBomb := true ;
19680: LD_ADDR_EXP 92
19684: PUSH
19685: LD_INT 1
19687: ST_TO_ADDR
// if p3 = 108 then
19688: LD_VAR 0 3
19692: PUSH
19693: LD_INT 108
19695: EQUAL
19696: IFFALSE 19706
// sWound := true ;
19698: LD_ADDR_EXP 100
19702: PUSH
19703: LD_INT 1
19705: ST_TO_ADDR
// if p3 = 109 then
19706: LD_VAR 0 3
19710: PUSH
19711: LD_INT 109
19713: EQUAL
19714: IFFALSE 19724
// sBetray := true ;
19716: LD_ADDR_EXP 104
19720: PUSH
19721: LD_INT 1
19723: ST_TO_ADDR
// if p3 = 110 then
19724: LD_VAR 0 3
19728: PUSH
19729: LD_INT 110
19731: EQUAL
19732: IFFALSE 19742
// sContamin := true ;
19734: LD_ADDR_EXP 105
19738: PUSH
19739: LD_INT 1
19741: ST_TO_ADDR
// if p3 = 111 then
19742: LD_VAR 0 3
19746: PUSH
19747: LD_INT 111
19749: EQUAL
19750: IFFALSE 19760
// sOil := true ;
19752: LD_ADDR_EXP 107
19756: PUSH
19757: LD_INT 1
19759: ST_TO_ADDR
// if p3 = 112 then
19760: LD_VAR 0 3
19764: PUSH
19765: LD_INT 112
19767: EQUAL
19768: IFFALSE 19778
// sStu := true ;
19770: LD_ADDR_EXP 111
19774: PUSH
19775: LD_INT 1
19777: ST_TO_ADDR
// if p3 = 113 then
19778: LD_VAR 0 3
19782: PUSH
19783: LD_INT 113
19785: EQUAL
19786: IFFALSE 19796
// sBazooka := true ;
19788: LD_ADDR_EXP 114
19792: PUSH
19793: LD_INT 1
19795: ST_TO_ADDR
// if p3 = 114 then
19796: LD_VAR 0 3
19800: PUSH
19801: LD_INT 114
19803: EQUAL
19804: IFFALSE 19814
// sMortar := true ;
19806: LD_ADDR_EXP 115
19810: PUSH
19811: LD_INT 1
19813: ST_TO_ADDR
// if p3 = 115 then
19814: LD_VAR 0 3
19818: PUSH
19819: LD_INT 115
19821: EQUAL
19822: IFFALSE 19832
// sRanger := true ;
19824: LD_ADDR_EXP 125
19828: PUSH
19829: LD_INT 1
19831: ST_TO_ADDR
// if p3 = 116 then
19832: LD_VAR 0 3
19836: PUSH
19837: LD_INT 116
19839: EQUAL
19840: IFFALSE 19850
// sComputer := true ;
19842: LD_ADDR_EXP 126
19846: PUSH
19847: LD_INT 1
19849: ST_TO_ADDR
// if p3 = 117 then
19850: LD_VAR 0 3
19854: PUSH
19855: LD_INT 117
19857: EQUAL
19858: IFFALSE 19868
// s30 := true ;
19860: LD_ADDR_EXP 127
19864: PUSH
19865: LD_INT 1
19867: ST_TO_ADDR
// if p3 = 118 then
19868: LD_VAR 0 3
19872: PUSH
19873: LD_INT 118
19875: EQUAL
19876: IFFALSE 19886
// s60 := true ;
19878: LD_ADDR_EXP 128
19882: PUSH
19883: LD_INT 1
19885: ST_TO_ADDR
// end ; if p2 = 101 then
19886: LD_VAR 0 2
19890: PUSH
19891: LD_INT 101
19893: EQUAL
19894: IFFALSE 20022
// begin case p3 of 1 :
19896: LD_VAR 0 3
19900: PUSH
19901: LD_INT 1
19903: DOUBLE
19904: EQUAL
19905: IFTRUE 19909
19907: GO 19916
19909: POP
// hHackUnlimitedResources ; 2 :
19910: CALL 32120 0 0
19914: GO 20022
19916: LD_INT 2
19918: DOUBLE
19919: EQUAL
19920: IFTRUE 19924
19922: GO 19931
19924: POP
// hHackSetLevel10 ; 3 :
19925: CALL 32253 0 0
19929: GO 20022
19931: LD_INT 3
19933: DOUBLE
19934: EQUAL
19935: IFTRUE 19939
19937: GO 19946
19939: POP
// hHackSetLevel10YourUnits ; 4 :
19940: CALL 32338 0 0
19944: GO 20022
19946: LD_INT 4
19948: DOUBLE
19949: EQUAL
19950: IFTRUE 19954
19952: GO 19961
19954: POP
// hHackInvincible ; 5 :
19955: CALL 32786 0 0
19959: GO 20022
19961: LD_INT 5
19963: DOUBLE
19964: EQUAL
19965: IFTRUE 19969
19967: GO 19976
19969: POP
// hHackInvisible ; 6 :
19970: CALL 32897 0 0
19974: GO 20022
19976: LD_INT 6
19978: DOUBLE
19979: EQUAL
19980: IFTRUE 19984
19982: GO 19991
19984: POP
// hHackChangeYourSide ; 7 :
19985: CALL 32954 0 0
19989: GO 20022
19991: LD_INT 7
19993: DOUBLE
19994: EQUAL
19995: IFTRUE 19999
19997: GO 20006
19999: POP
// hHackChangeUnitSide ; 8 :
20000: CALL 32996 0 0
20004: GO 20022
20006: LD_INT 8
20008: DOUBLE
20009: EQUAL
20010: IFTRUE 20014
20012: GO 20021
20014: POP
// hHackFog ; end ;
20015: CALL 33097 0 0
20019: GO 20022
20021: POP
// end ; end ;
20022: LD_VAR 0 7
20026: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20027: GO 20029
20029: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20030: LD_STRING initStreamRollete();
20032: PPUSH
20033: CALL_OW 559
// InitStreamMode ;
20037: CALL 20049 0 0
// DefineStreamItems ( false ) ;
20041: LD_INT 0
20043: PPUSH
20044: CALL 20513 0 1
// end ;
20048: END
// function InitStreamMode ; begin
20049: LD_INT 0
20051: PPUSH
// streamModeActive := false ;
20052: LD_ADDR_EXP 72
20056: PUSH
20057: LD_INT 0
20059: ST_TO_ADDR
// normalCounter := 36 ;
20060: LD_ADDR_EXP 73
20064: PUSH
20065: LD_INT 36
20067: ST_TO_ADDR
// hardcoreCounter := 18 ;
20068: LD_ADDR_EXP 74
20072: PUSH
20073: LD_INT 18
20075: ST_TO_ADDR
// sRocket := false ;
20076: LD_ADDR_EXP 77
20080: PUSH
20081: LD_INT 0
20083: ST_TO_ADDR
// sSpeed := false ;
20084: LD_ADDR_EXP 76
20088: PUSH
20089: LD_INT 0
20091: ST_TO_ADDR
// sEngine := false ;
20092: LD_ADDR_EXP 78
20096: PUSH
20097: LD_INT 0
20099: ST_TO_ADDR
// sSpec := false ;
20100: LD_ADDR_EXP 75
20104: PUSH
20105: LD_INT 0
20107: ST_TO_ADDR
// sLevel := false ;
20108: LD_ADDR_EXP 79
20112: PUSH
20113: LD_INT 0
20115: ST_TO_ADDR
// sArmoury := false ;
20116: LD_ADDR_EXP 80
20120: PUSH
20121: LD_INT 0
20123: ST_TO_ADDR
// sRadar := false ;
20124: LD_ADDR_EXP 81
20128: PUSH
20129: LD_INT 0
20131: ST_TO_ADDR
// sBunker := false ;
20132: LD_ADDR_EXP 82
20136: PUSH
20137: LD_INT 0
20139: ST_TO_ADDR
// sHack := false ;
20140: LD_ADDR_EXP 83
20144: PUSH
20145: LD_INT 0
20147: ST_TO_ADDR
// sFire := false ;
20148: LD_ADDR_EXP 84
20152: PUSH
20153: LD_INT 0
20155: ST_TO_ADDR
// sRefresh := false ;
20156: LD_ADDR_EXP 85
20160: PUSH
20161: LD_INT 0
20163: ST_TO_ADDR
// sExp := false ;
20164: LD_ADDR_EXP 86
20168: PUSH
20169: LD_INT 0
20171: ST_TO_ADDR
// sDepot := false ;
20172: LD_ADDR_EXP 87
20176: PUSH
20177: LD_INT 0
20179: ST_TO_ADDR
// sFlag := false ;
20180: LD_ADDR_EXP 88
20184: PUSH
20185: LD_INT 0
20187: ST_TO_ADDR
// sKamikadze := false ;
20188: LD_ADDR_EXP 96
20192: PUSH
20193: LD_INT 0
20195: ST_TO_ADDR
// sTroll := false ;
20196: LD_ADDR_EXP 97
20200: PUSH
20201: LD_INT 0
20203: ST_TO_ADDR
// sSlow := false ;
20204: LD_ADDR_EXP 98
20208: PUSH
20209: LD_INT 0
20211: ST_TO_ADDR
// sLack := false ;
20212: LD_ADDR_EXP 99
20216: PUSH
20217: LD_INT 0
20219: ST_TO_ADDR
// sTank := false ;
20220: LD_ADDR_EXP 101
20224: PUSH
20225: LD_INT 0
20227: ST_TO_ADDR
// sRemote := false ;
20228: LD_ADDR_EXP 102
20232: PUSH
20233: LD_INT 0
20235: ST_TO_ADDR
// sPowell := false ;
20236: LD_ADDR_EXP 103
20240: PUSH
20241: LD_INT 0
20243: ST_TO_ADDR
// sTeleport := false ;
20244: LD_ADDR_EXP 106
20248: PUSH
20249: LD_INT 0
20251: ST_TO_ADDR
// sOilTower := false ;
20252: LD_ADDR_EXP 108
20256: PUSH
20257: LD_INT 0
20259: ST_TO_ADDR
// sShovel := false ;
20260: LD_ADDR_EXP 109
20264: PUSH
20265: LD_INT 0
20267: ST_TO_ADDR
// sSheik := false ;
20268: LD_ADDR_EXP 110
20272: PUSH
20273: LD_INT 0
20275: ST_TO_ADDR
// sEarthquake := false ;
20276: LD_ADDR_EXP 112
20280: PUSH
20281: LD_INT 0
20283: ST_TO_ADDR
// sAI := false ;
20284: LD_ADDR_EXP 113
20288: PUSH
20289: LD_INT 0
20291: ST_TO_ADDR
// sCargo := false ;
20292: LD_ADDR_EXP 116
20296: PUSH
20297: LD_INT 0
20299: ST_TO_ADDR
// sDLaser := false ;
20300: LD_ADDR_EXP 117
20304: PUSH
20305: LD_INT 0
20307: ST_TO_ADDR
// sExchange := false ;
20308: LD_ADDR_EXP 118
20312: PUSH
20313: LD_INT 0
20315: ST_TO_ADDR
// sFac := false ;
20316: LD_ADDR_EXP 119
20320: PUSH
20321: LD_INT 0
20323: ST_TO_ADDR
// sPower := false ;
20324: LD_ADDR_EXP 120
20328: PUSH
20329: LD_INT 0
20331: ST_TO_ADDR
// sRandom := false ;
20332: LD_ADDR_EXP 121
20336: PUSH
20337: LD_INT 0
20339: ST_TO_ADDR
// sShield := false ;
20340: LD_ADDR_EXP 122
20344: PUSH
20345: LD_INT 0
20347: ST_TO_ADDR
// sTime := false ;
20348: LD_ADDR_EXP 123
20352: PUSH
20353: LD_INT 0
20355: ST_TO_ADDR
// sTools := false ;
20356: LD_ADDR_EXP 124
20360: PUSH
20361: LD_INT 0
20363: ST_TO_ADDR
// sSold := false ;
20364: LD_ADDR_EXP 89
20368: PUSH
20369: LD_INT 0
20371: ST_TO_ADDR
// sDiff := false ;
20372: LD_ADDR_EXP 90
20376: PUSH
20377: LD_INT 0
20379: ST_TO_ADDR
// sFog := false ;
20380: LD_ADDR_EXP 93
20384: PUSH
20385: LD_INT 0
20387: ST_TO_ADDR
// sReset := false ;
20388: LD_ADDR_EXP 94
20392: PUSH
20393: LD_INT 0
20395: ST_TO_ADDR
// sSun := false ;
20396: LD_ADDR_EXP 95
20400: PUSH
20401: LD_INT 0
20403: ST_TO_ADDR
// sTiger := false ;
20404: LD_ADDR_EXP 91
20408: PUSH
20409: LD_INT 0
20411: ST_TO_ADDR
// sBomb := false ;
20412: LD_ADDR_EXP 92
20416: PUSH
20417: LD_INT 0
20419: ST_TO_ADDR
// sWound := false ;
20420: LD_ADDR_EXP 100
20424: PUSH
20425: LD_INT 0
20427: ST_TO_ADDR
// sBetray := false ;
20428: LD_ADDR_EXP 104
20432: PUSH
20433: LD_INT 0
20435: ST_TO_ADDR
// sContamin := false ;
20436: LD_ADDR_EXP 105
20440: PUSH
20441: LD_INT 0
20443: ST_TO_ADDR
// sOil := false ;
20444: LD_ADDR_EXP 107
20448: PUSH
20449: LD_INT 0
20451: ST_TO_ADDR
// sStu := false ;
20452: LD_ADDR_EXP 111
20456: PUSH
20457: LD_INT 0
20459: ST_TO_ADDR
// sBazooka := false ;
20460: LD_ADDR_EXP 114
20464: PUSH
20465: LD_INT 0
20467: ST_TO_ADDR
// sMortar := false ;
20468: LD_ADDR_EXP 115
20472: PUSH
20473: LD_INT 0
20475: ST_TO_ADDR
// sRanger := false ;
20476: LD_ADDR_EXP 125
20480: PUSH
20481: LD_INT 0
20483: ST_TO_ADDR
// sComputer := false ;
20484: LD_ADDR_EXP 126
20488: PUSH
20489: LD_INT 0
20491: ST_TO_ADDR
// s30 := false ;
20492: LD_ADDR_EXP 127
20496: PUSH
20497: LD_INT 0
20499: ST_TO_ADDR
// s60 := false ;
20500: LD_ADDR_EXP 128
20504: PUSH
20505: LD_INT 0
20507: ST_TO_ADDR
// end ;
20508: LD_VAR 0 1
20512: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20513: LD_INT 0
20515: PPUSH
20516: PPUSH
20517: PPUSH
20518: PPUSH
20519: PPUSH
20520: PPUSH
20521: PPUSH
// result := [ ] ;
20522: LD_ADDR_VAR 0 2
20526: PUSH
20527: EMPTY
20528: ST_TO_ADDR
// if campaign_id = 1 then
20529: LD_OWVAR 69
20533: PUSH
20534: LD_INT 1
20536: EQUAL
20537: IFFALSE 23703
// begin case mission_number of 1 :
20539: LD_OWVAR 70
20543: PUSH
20544: LD_INT 1
20546: DOUBLE
20547: EQUAL
20548: IFTRUE 20552
20550: GO 20628
20552: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20553: LD_ADDR_VAR 0 2
20557: PUSH
20558: LD_INT 2
20560: PUSH
20561: LD_INT 4
20563: PUSH
20564: LD_INT 11
20566: PUSH
20567: LD_INT 12
20569: PUSH
20570: LD_INT 15
20572: PUSH
20573: LD_INT 16
20575: PUSH
20576: LD_INT 22
20578: PUSH
20579: LD_INT 23
20581: PUSH
20582: LD_INT 26
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: PUSH
20596: LD_INT 101
20598: PUSH
20599: LD_INT 102
20601: PUSH
20602: LD_INT 106
20604: PUSH
20605: LD_INT 116
20607: PUSH
20608: LD_INT 117
20610: PUSH
20611: LD_INT 118
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: ST_TO_ADDR
20626: GO 23701
20628: LD_INT 2
20630: DOUBLE
20631: EQUAL
20632: IFTRUE 20636
20634: GO 20720
20636: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20637: LD_ADDR_VAR 0 2
20641: PUSH
20642: LD_INT 2
20644: PUSH
20645: LD_INT 4
20647: PUSH
20648: LD_INT 11
20650: PUSH
20651: LD_INT 12
20653: PUSH
20654: LD_INT 15
20656: PUSH
20657: LD_INT 16
20659: PUSH
20660: LD_INT 22
20662: PUSH
20663: LD_INT 23
20665: PUSH
20666: LD_INT 26
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: PUSH
20680: LD_INT 101
20682: PUSH
20683: LD_INT 102
20685: PUSH
20686: LD_INT 105
20688: PUSH
20689: LD_INT 106
20691: PUSH
20692: LD_INT 108
20694: PUSH
20695: LD_INT 116
20697: PUSH
20698: LD_INT 117
20700: PUSH
20701: LD_INT 118
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: ST_TO_ADDR
20718: GO 23701
20720: LD_INT 3
20722: DOUBLE
20723: EQUAL
20724: IFTRUE 20728
20726: GO 20816
20728: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20729: LD_ADDR_VAR 0 2
20733: PUSH
20734: LD_INT 2
20736: PUSH
20737: LD_INT 4
20739: PUSH
20740: LD_INT 5
20742: PUSH
20743: LD_INT 11
20745: PUSH
20746: LD_INT 12
20748: PUSH
20749: LD_INT 15
20751: PUSH
20752: LD_INT 16
20754: PUSH
20755: LD_INT 22
20757: PUSH
20758: LD_INT 26
20760: PUSH
20761: LD_INT 36
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: PUSH
20776: LD_INT 101
20778: PUSH
20779: LD_INT 102
20781: PUSH
20782: LD_INT 105
20784: PUSH
20785: LD_INT 106
20787: PUSH
20788: LD_INT 108
20790: PUSH
20791: LD_INT 116
20793: PUSH
20794: LD_INT 117
20796: PUSH
20797: LD_INT 118
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: ST_TO_ADDR
20814: GO 23701
20816: LD_INT 4
20818: DOUBLE
20819: EQUAL
20820: IFTRUE 20824
20822: GO 20920
20824: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20825: LD_ADDR_VAR 0 2
20829: PUSH
20830: LD_INT 2
20832: PUSH
20833: LD_INT 4
20835: PUSH
20836: LD_INT 5
20838: PUSH
20839: LD_INT 8
20841: PUSH
20842: LD_INT 11
20844: PUSH
20845: LD_INT 12
20847: PUSH
20848: LD_INT 15
20850: PUSH
20851: LD_INT 16
20853: PUSH
20854: LD_INT 22
20856: PUSH
20857: LD_INT 23
20859: PUSH
20860: LD_INT 26
20862: PUSH
20863: LD_INT 36
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 101
20882: PUSH
20883: LD_INT 102
20885: PUSH
20886: LD_INT 105
20888: PUSH
20889: LD_INT 106
20891: PUSH
20892: LD_INT 108
20894: PUSH
20895: LD_INT 116
20897: PUSH
20898: LD_INT 117
20900: PUSH
20901: LD_INT 118
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: ST_TO_ADDR
20918: GO 23701
20920: LD_INT 5
20922: DOUBLE
20923: EQUAL
20924: IFTRUE 20928
20926: GO 21040
20928: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20929: LD_ADDR_VAR 0 2
20933: PUSH
20934: LD_INT 2
20936: PUSH
20937: LD_INT 4
20939: PUSH
20940: LD_INT 5
20942: PUSH
20943: LD_INT 6
20945: PUSH
20946: LD_INT 8
20948: PUSH
20949: LD_INT 11
20951: PUSH
20952: LD_INT 12
20954: PUSH
20955: LD_INT 15
20957: PUSH
20958: LD_INT 16
20960: PUSH
20961: LD_INT 22
20963: PUSH
20964: LD_INT 23
20966: PUSH
20967: LD_INT 25
20969: PUSH
20970: LD_INT 26
20972: PUSH
20973: LD_INT 36
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 101
20994: PUSH
20995: LD_INT 102
20997: PUSH
20998: LD_INT 105
21000: PUSH
21001: LD_INT 106
21003: PUSH
21004: LD_INT 108
21006: PUSH
21007: LD_INT 109
21009: PUSH
21010: LD_INT 112
21012: PUSH
21013: LD_INT 116
21015: PUSH
21016: LD_INT 117
21018: PUSH
21019: LD_INT 118
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: ST_TO_ADDR
21038: GO 23701
21040: LD_INT 6
21042: DOUBLE
21043: EQUAL
21044: IFTRUE 21048
21046: GO 21180
21048: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21049: LD_ADDR_VAR 0 2
21053: PUSH
21054: LD_INT 2
21056: PUSH
21057: LD_INT 4
21059: PUSH
21060: LD_INT 5
21062: PUSH
21063: LD_INT 6
21065: PUSH
21066: LD_INT 8
21068: PUSH
21069: LD_INT 11
21071: PUSH
21072: LD_INT 12
21074: PUSH
21075: LD_INT 15
21077: PUSH
21078: LD_INT 16
21080: PUSH
21081: LD_INT 20
21083: PUSH
21084: LD_INT 21
21086: PUSH
21087: LD_INT 22
21089: PUSH
21090: LD_INT 23
21092: PUSH
21093: LD_INT 25
21095: PUSH
21096: LD_INT 26
21098: PUSH
21099: LD_INT 30
21101: PUSH
21102: LD_INT 31
21104: PUSH
21105: LD_INT 32
21107: PUSH
21108: LD_INT 36
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 101
21134: PUSH
21135: LD_INT 102
21137: PUSH
21138: LD_INT 105
21140: PUSH
21141: LD_INT 106
21143: PUSH
21144: LD_INT 108
21146: PUSH
21147: LD_INT 109
21149: PUSH
21150: LD_INT 112
21152: PUSH
21153: LD_INT 116
21155: PUSH
21156: LD_INT 117
21158: PUSH
21159: LD_INT 118
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: ST_TO_ADDR
21178: GO 23701
21180: LD_INT 7
21182: DOUBLE
21183: EQUAL
21184: IFTRUE 21188
21186: GO 21300
21188: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21189: LD_ADDR_VAR 0 2
21193: PUSH
21194: LD_INT 2
21196: PUSH
21197: LD_INT 4
21199: PUSH
21200: LD_INT 5
21202: PUSH
21203: LD_INT 7
21205: PUSH
21206: LD_INT 11
21208: PUSH
21209: LD_INT 12
21211: PUSH
21212: LD_INT 15
21214: PUSH
21215: LD_INT 16
21217: PUSH
21218: LD_INT 20
21220: PUSH
21221: LD_INT 21
21223: PUSH
21224: LD_INT 22
21226: PUSH
21227: LD_INT 23
21229: PUSH
21230: LD_INT 25
21232: PUSH
21233: LD_INT 26
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 101
21254: PUSH
21255: LD_INT 102
21257: PUSH
21258: LD_INT 103
21260: PUSH
21261: LD_INT 105
21263: PUSH
21264: LD_INT 106
21266: PUSH
21267: LD_INT 108
21269: PUSH
21270: LD_INT 112
21272: PUSH
21273: LD_INT 116
21275: PUSH
21276: LD_INT 117
21278: PUSH
21279: LD_INT 118
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: ST_TO_ADDR
21298: GO 23701
21300: LD_INT 8
21302: DOUBLE
21303: EQUAL
21304: IFTRUE 21308
21306: GO 21448
21308: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21309: LD_ADDR_VAR 0 2
21313: PUSH
21314: LD_INT 2
21316: PUSH
21317: LD_INT 4
21319: PUSH
21320: LD_INT 5
21322: PUSH
21323: LD_INT 6
21325: PUSH
21326: LD_INT 7
21328: PUSH
21329: LD_INT 8
21331: PUSH
21332: LD_INT 11
21334: PUSH
21335: LD_INT 12
21337: PUSH
21338: LD_INT 15
21340: PUSH
21341: LD_INT 16
21343: PUSH
21344: LD_INT 20
21346: PUSH
21347: LD_INT 21
21349: PUSH
21350: LD_INT 22
21352: PUSH
21353: LD_INT 23
21355: PUSH
21356: LD_INT 25
21358: PUSH
21359: LD_INT 26
21361: PUSH
21362: LD_INT 30
21364: PUSH
21365: LD_INT 31
21367: PUSH
21368: LD_INT 32
21370: PUSH
21371: LD_INT 36
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: PUSH
21396: LD_INT 101
21398: PUSH
21399: LD_INT 102
21401: PUSH
21402: LD_INT 103
21404: PUSH
21405: LD_INT 105
21407: PUSH
21408: LD_INT 106
21410: PUSH
21411: LD_INT 108
21413: PUSH
21414: LD_INT 109
21416: PUSH
21417: LD_INT 112
21419: PUSH
21420: LD_INT 116
21422: PUSH
21423: LD_INT 117
21425: PUSH
21426: LD_INT 118
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: ST_TO_ADDR
21446: GO 23701
21448: LD_INT 9
21450: DOUBLE
21451: EQUAL
21452: IFTRUE 21456
21454: GO 21604
21456: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21457: LD_ADDR_VAR 0 2
21461: PUSH
21462: LD_INT 2
21464: PUSH
21465: LD_INT 4
21467: PUSH
21468: LD_INT 5
21470: PUSH
21471: LD_INT 6
21473: PUSH
21474: LD_INT 7
21476: PUSH
21477: LD_INT 8
21479: PUSH
21480: LD_INT 11
21482: PUSH
21483: LD_INT 12
21485: PUSH
21486: LD_INT 15
21488: PUSH
21489: LD_INT 16
21491: PUSH
21492: LD_INT 20
21494: PUSH
21495: LD_INT 21
21497: PUSH
21498: LD_INT 22
21500: PUSH
21501: LD_INT 23
21503: PUSH
21504: LD_INT 25
21506: PUSH
21507: LD_INT 26
21509: PUSH
21510: LD_INT 28
21512: PUSH
21513: LD_INT 30
21515: PUSH
21516: LD_INT 31
21518: PUSH
21519: LD_INT 32
21521: PUSH
21522: LD_INT 36
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 101
21550: PUSH
21551: LD_INT 102
21553: PUSH
21554: LD_INT 103
21556: PUSH
21557: LD_INT 105
21559: PUSH
21560: LD_INT 106
21562: PUSH
21563: LD_INT 108
21565: PUSH
21566: LD_INT 109
21568: PUSH
21569: LD_INT 112
21571: PUSH
21572: LD_INT 114
21574: PUSH
21575: LD_INT 116
21577: PUSH
21578: LD_INT 117
21580: PUSH
21581: LD_INT 118
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: ST_TO_ADDR
21602: GO 23701
21604: LD_INT 10
21606: DOUBLE
21607: EQUAL
21608: IFTRUE 21612
21610: GO 21808
21612: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21613: LD_ADDR_VAR 0 2
21617: PUSH
21618: LD_INT 2
21620: PUSH
21621: LD_INT 4
21623: PUSH
21624: LD_INT 5
21626: PUSH
21627: LD_INT 6
21629: PUSH
21630: LD_INT 7
21632: PUSH
21633: LD_INT 8
21635: PUSH
21636: LD_INT 9
21638: PUSH
21639: LD_INT 10
21641: PUSH
21642: LD_INT 11
21644: PUSH
21645: LD_INT 12
21647: PUSH
21648: LD_INT 13
21650: PUSH
21651: LD_INT 14
21653: PUSH
21654: LD_INT 15
21656: PUSH
21657: LD_INT 16
21659: PUSH
21660: LD_INT 17
21662: PUSH
21663: LD_INT 18
21665: PUSH
21666: LD_INT 19
21668: PUSH
21669: LD_INT 20
21671: PUSH
21672: LD_INT 21
21674: PUSH
21675: LD_INT 22
21677: PUSH
21678: LD_INT 23
21680: PUSH
21681: LD_INT 24
21683: PUSH
21684: LD_INT 25
21686: PUSH
21687: LD_INT 26
21689: PUSH
21690: LD_INT 28
21692: PUSH
21693: LD_INT 30
21695: PUSH
21696: LD_INT 31
21698: PUSH
21699: LD_INT 32
21701: PUSH
21702: LD_INT 36
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: PUSH
21736: LD_INT 101
21738: PUSH
21739: LD_INT 102
21741: PUSH
21742: LD_INT 103
21744: PUSH
21745: LD_INT 104
21747: PUSH
21748: LD_INT 105
21750: PUSH
21751: LD_INT 106
21753: PUSH
21754: LD_INT 107
21756: PUSH
21757: LD_INT 108
21759: PUSH
21760: LD_INT 109
21762: PUSH
21763: LD_INT 110
21765: PUSH
21766: LD_INT 111
21768: PUSH
21769: LD_INT 112
21771: PUSH
21772: LD_INT 114
21774: PUSH
21775: LD_INT 116
21777: PUSH
21778: LD_INT 117
21780: PUSH
21781: LD_INT 118
21783: PUSH
21784: EMPTY
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: ST_TO_ADDR
21806: GO 23701
21808: LD_INT 11
21810: DOUBLE
21811: EQUAL
21812: IFTRUE 21816
21814: GO 22020
21816: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21817: LD_ADDR_VAR 0 2
21821: PUSH
21822: LD_INT 2
21824: PUSH
21825: LD_INT 3
21827: PUSH
21828: LD_INT 4
21830: PUSH
21831: LD_INT 5
21833: PUSH
21834: LD_INT 6
21836: PUSH
21837: LD_INT 7
21839: PUSH
21840: LD_INT 8
21842: PUSH
21843: LD_INT 9
21845: PUSH
21846: LD_INT 10
21848: PUSH
21849: LD_INT 11
21851: PUSH
21852: LD_INT 12
21854: PUSH
21855: LD_INT 13
21857: PUSH
21858: LD_INT 14
21860: PUSH
21861: LD_INT 15
21863: PUSH
21864: LD_INT 16
21866: PUSH
21867: LD_INT 17
21869: PUSH
21870: LD_INT 18
21872: PUSH
21873: LD_INT 19
21875: PUSH
21876: LD_INT 20
21878: PUSH
21879: LD_INT 21
21881: PUSH
21882: LD_INT 22
21884: PUSH
21885: LD_INT 23
21887: PUSH
21888: LD_INT 24
21890: PUSH
21891: LD_INT 25
21893: PUSH
21894: LD_INT 26
21896: PUSH
21897: LD_INT 28
21899: PUSH
21900: LD_INT 30
21902: PUSH
21903: LD_INT 31
21905: PUSH
21906: LD_INT 32
21908: PUSH
21909: LD_INT 34
21911: PUSH
21912: LD_INT 36
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 101
21950: PUSH
21951: LD_INT 102
21953: PUSH
21954: LD_INT 103
21956: PUSH
21957: LD_INT 104
21959: PUSH
21960: LD_INT 105
21962: PUSH
21963: LD_INT 106
21965: PUSH
21966: LD_INT 107
21968: PUSH
21969: LD_INT 108
21971: PUSH
21972: LD_INT 109
21974: PUSH
21975: LD_INT 110
21977: PUSH
21978: LD_INT 111
21980: PUSH
21981: LD_INT 112
21983: PUSH
21984: LD_INT 114
21986: PUSH
21987: LD_INT 116
21989: PUSH
21990: LD_INT 117
21992: PUSH
21993: LD_INT 118
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: ST_TO_ADDR
22018: GO 23701
22020: LD_INT 12
22022: DOUBLE
22023: EQUAL
22024: IFTRUE 22028
22026: GO 22248
22028: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22029: LD_ADDR_VAR 0 2
22033: PUSH
22034: LD_INT 1
22036: PUSH
22037: LD_INT 2
22039: PUSH
22040: LD_INT 3
22042: PUSH
22043: LD_INT 4
22045: PUSH
22046: LD_INT 5
22048: PUSH
22049: LD_INT 6
22051: PUSH
22052: LD_INT 7
22054: PUSH
22055: LD_INT 8
22057: PUSH
22058: LD_INT 9
22060: PUSH
22061: LD_INT 10
22063: PUSH
22064: LD_INT 11
22066: PUSH
22067: LD_INT 12
22069: PUSH
22070: LD_INT 13
22072: PUSH
22073: LD_INT 14
22075: PUSH
22076: LD_INT 15
22078: PUSH
22079: LD_INT 16
22081: PUSH
22082: LD_INT 17
22084: PUSH
22085: LD_INT 18
22087: PUSH
22088: LD_INT 19
22090: PUSH
22091: LD_INT 20
22093: PUSH
22094: LD_INT 21
22096: PUSH
22097: LD_INT 22
22099: PUSH
22100: LD_INT 23
22102: PUSH
22103: LD_INT 24
22105: PUSH
22106: LD_INT 25
22108: PUSH
22109: LD_INT 26
22111: PUSH
22112: LD_INT 27
22114: PUSH
22115: LD_INT 28
22117: PUSH
22118: LD_INT 30
22120: PUSH
22121: LD_INT 31
22123: PUSH
22124: LD_INT 32
22126: PUSH
22127: LD_INT 33
22129: PUSH
22130: LD_INT 34
22132: PUSH
22133: LD_INT 36
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: PUSH
22172: LD_INT 101
22174: PUSH
22175: LD_INT 102
22177: PUSH
22178: LD_INT 103
22180: PUSH
22181: LD_INT 104
22183: PUSH
22184: LD_INT 105
22186: PUSH
22187: LD_INT 106
22189: PUSH
22190: LD_INT 107
22192: PUSH
22193: LD_INT 108
22195: PUSH
22196: LD_INT 109
22198: PUSH
22199: LD_INT 110
22201: PUSH
22202: LD_INT 111
22204: PUSH
22205: LD_INT 112
22207: PUSH
22208: LD_INT 113
22210: PUSH
22211: LD_INT 114
22213: PUSH
22214: LD_INT 116
22216: PUSH
22217: LD_INT 117
22219: PUSH
22220: LD_INT 118
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: ST_TO_ADDR
22246: GO 23701
22248: LD_INT 13
22250: DOUBLE
22251: EQUAL
22252: IFTRUE 22256
22254: GO 22464
22256: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22257: LD_ADDR_VAR 0 2
22261: PUSH
22262: LD_INT 1
22264: PUSH
22265: LD_INT 2
22267: PUSH
22268: LD_INT 3
22270: PUSH
22271: LD_INT 4
22273: PUSH
22274: LD_INT 5
22276: PUSH
22277: LD_INT 8
22279: PUSH
22280: LD_INT 9
22282: PUSH
22283: LD_INT 10
22285: PUSH
22286: LD_INT 11
22288: PUSH
22289: LD_INT 12
22291: PUSH
22292: LD_INT 14
22294: PUSH
22295: LD_INT 15
22297: PUSH
22298: LD_INT 16
22300: PUSH
22301: LD_INT 17
22303: PUSH
22304: LD_INT 18
22306: PUSH
22307: LD_INT 19
22309: PUSH
22310: LD_INT 20
22312: PUSH
22313: LD_INT 21
22315: PUSH
22316: LD_INT 22
22318: PUSH
22319: LD_INT 23
22321: PUSH
22322: LD_INT 24
22324: PUSH
22325: LD_INT 25
22327: PUSH
22328: LD_INT 26
22330: PUSH
22331: LD_INT 27
22333: PUSH
22334: LD_INT 28
22336: PUSH
22337: LD_INT 30
22339: PUSH
22340: LD_INT 31
22342: PUSH
22343: LD_INT 32
22345: PUSH
22346: LD_INT 33
22348: PUSH
22349: LD_INT 34
22351: PUSH
22352: LD_INT 36
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: PUSH
22388: LD_INT 101
22390: PUSH
22391: LD_INT 102
22393: PUSH
22394: LD_INT 103
22396: PUSH
22397: LD_INT 104
22399: PUSH
22400: LD_INT 105
22402: PUSH
22403: LD_INT 106
22405: PUSH
22406: LD_INT 107
22408: PUSH
22409: LD_INT 108
22411: PUSH
22412: LD_INT 109
22414: PUSH
22415: LD_INT 110
22417: PUSH
22418: LD_INT 111
22420: PUSH
22421: LD_INT 112
22423: PUSH
22424: LD_INT 113
22426: PUSH
22427: LD_INT 114
22429: PUSH
22430: LD_INT 116
22432: PUSH
22433: LD_INT 117
22435: PUSH
22436: LD_INT 118
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: ST_TO_ADDR
22462: GO 23701
22464: LD_INT 14
22466: DOUBLE
22467: EQUAL
22468: IFTRUE 22472
22470: GO 22696
22472: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22473: LD_ADDR_VAR 0 2
22477: PUSH
22478: LD_INT 1
22480: PUSH
22481: LD_INT 2
22483: PUSH
22484: LD_INT 3
22486: PUSH
22487: LD_INT 4
22489: PUSH
22490: LD_INT 5
22492: PUSH
22493: LD_INT 6
22495: PUSH
22496: LD_INT 7
22498: PUSH
22499: LD_INT 8
22501: PUSH
22502: LD_INT 9
22504: PUSH
22505: LD_INT 10
22507: PUSH
22508: LD_INT 11
22510: PUSH
22511: LD_INT 12
22513: PUSH
22514: LD_INT 13
22516: PUSH
22517: LD_INT 14
22519: PUSH
22520: LD_INT 15
22522: PUSH
22523: LD_INT 16
22525: PUSH
22526: LD_INT 17
22528: PUSH
22529: LD_INT 18
22531: PUSH
22532: LD_INT 19
22534: PUSH
22535: LD_INT 20
22537: PUSH
22538: LD_INT 21
22540: PUSH
22541: LD_INT 22
22543: PUSH
22544: LD_INT 23
22546: PUSH
22547: LD_INT 24
22549: PUSH
22550: LD_INT 25
22552: PUSH
22553: LD_INT 26
22555: PUSH
22556: LD_INT 27
22558: PUSH
22559: LD_INT 28
22561: PUSH
22562: LD_INT 29
22564: PUSH
22565: LD_INT 30
22567: PUSH
22568: LD_INT 31
22570: PUSH
22571: LD_INT 32
22573: PUSH
22574: LD_INT 33
22576: PUSH
22577: LD_INT 34
22579: PUSH
22580: LD_INT 36
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 101
22622: PUSH
22623: LD_INT 102
22625: PUSH
22626: LD_INT 103
22628: PUSH
22629: LD_INT 104
22631: PUSH
22632: LD_INT 105
22634: PUSH
22635: LD_INT 106
22637: PUSH
22638: LD_INT 107
22640: PUSH
22641: LD_INT 108
22643: PUSH
22644: LD_INT 109
22646: PUSH
22647: LD_INT 110
22649: PUSH
22650: LD_INT 111
22652: PUSH
22653: LD_INT 112
22655: PUSH
22656: LD_INT 113
22658: PUSH
22659: LD_INT 114
22661: PUSH
22662: LD_INT 116
22664: PUSH
22665: LD_INT 117
22667: PUSH
22668: LD_INT 118
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: ST_TO_ADDR
22694: GO 23701
22696: LD_INT 15
22698: DOUBLE
22699: EQUAL
22700: IFTRUE 22704
22702: GO 22928
22704: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22705: LD_ADDR_VAR 0 2
22709: PUSH
22710: LD_INT 1
22712: PUSH
22713: LD_INT 2
22715: PUSH
22716: LD_INT 3
22718: PUSH
22719: LD_INT 4
22721: PUSH
22722: LD_INT 5
22724: PUSH
22725: LD_INT 6
22727: PUSH
22728: LD_INT 7
22730: PUSH
22731: LD_INT 8
22733: PUSH
22734: LD_INT 9
22736: PUSH
22737: LD_INT 10
22739: PUSH
22740: LD_INT 11
22742: PUSH
22743: LD_INT 12
22745: PUSH
22746: LD_INT 13
22748: PUSH
22749: LD_INT 14
22751: PUSH
22752: LD_INT 15
22754: PUSH
22755: LD_INT 16
22757: PUSH
22758: LD_INT 17
22760: PUSH
22761: LD_INT 18
22763: PUSH
22764: LD_INT 19
22766: PUSH
22767: LD_INT 20
22769: PUSH
22770: LD_INT 21
22772: PUSH
22773: LD_INT 22
22775: PUSH
22776: LD_INT 23
22778: PUSH
22779: LD_INT 24
22781: PUSH
22782: LD_INT 25
22784: PUSH
22785: LD_INT 26
22787: PUSH
22788: LD_INT 27
22790: PUSH
22791: LD_INT 28
22793: PUSH
22794: LD_INT 29
22796: PUSH
22797: LD_INT 30
22799: PUSH
22800: LD_INT 31
22802: PUSH
22803: LD_INT 32
22805: PUSH
22806: LD_INT 33
22808: PUSH
22809: LD_INT 34
22811: PUSH
22812: LD_INT 36
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 101
22854: PUSH
22855: LD_INT 102
22857: PUSH
22858: LD_INT 103
22860: PUSH
22861: LD_INT 104
22863: PUSH
22864: LD_INT 105
22866: PUSH
22867: LD_INT 106
22869: PUSH
22870: LD_INT 107
22872: PUSH
22873: LD_INT 108
22875: PUSH
22876: LD_INT 109
22878: PUSH
22879: LD_INT 110
22881: PUSH
22882: LD_INT 111
22884: PUSH
22885: LD_INT 112
22887: PUSH
22888: LD_INT 113
22890: PUSH
22891: LD_INT 114
22893: PUSH
22894: LD_INT 116
22896: PUSH
22897: LD_INT 117
22899: PUSH
22900: LD_INT 118
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: ST_TO_ADDR
22926: GO 23701
22928: LD_INT 16
22930: DOUBLE
22931: EQUAL
22932: IFTRUE 22936
22934: GO 23072
22936: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22937: LD_ADDR_VAR 0 2
22941: PUSH
22942: LD_INT 2
22944: PUSH
22945: LD_INT 4
22947: PUSH
22948: LD_INT 5
22950: PUSH
22951: LD_INT 7
22953: PUSH
22954: LD_INT 11
22956: PUSH
22957: LD_INT 12
22959: PUSH
22960: LD_INT 15
22962: PUSH
22963: LD_INT 16
22965: PUSH
22966: LD_INT 20
22968: PUSH
22969: LD_INT 21
22971: PUSH
22972: LD_INT 22
22974: PUSH
22975: LD_INT 23
22977: PUSH
22978: LD_INT 25
22980: PUSH
22981: LD_INT 26
22983: PUSH
22984: LD_INT 30
22986: PUSH
22987: LD_INT 31
22989: PUSH
22990: LD_INT 32
22992: PUSH
22993: LD_INT 33
22995: PUSH
22996: LD_INT 34
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 101
23022: PUSH
23023: LD_INT 102
23025: PUSH
23026: LD_INT 103
23028: PUSH
23029: LD_INT 106
23031: PUSH
23032: LD_INT 108
23034: PUSH
23035: LD_INT 112
23037: PUSH
23038: LD_INT 113
23040: PUSH
23041: LD_INT 114
23043: PUSH
23044: LD_INT 116
23046: PUSH
23047: LD_INT 117
23049: PUSH
23050: LD_INT 118
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: ST_TO_ADDR
23070: GO 23701
23072: LD_INT 17
23074: DOUBLE
23075: EQUAL
23076: IFTRUE 23080
23078: GO 23304
23080: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23081: LD_ADDR_VAR 0 2
23085: PUSH
23086: LD_INT 1
23088: PUSH
23089: LD_INT 2
23091: PUSH
23092: LD_INT 3
23094: PUSH
23095: LD_INT 4
23097: PUSH
23098: LD_INT 5
23100: PUSH
23101: LD_INT 6
23103: PUSH
23104: LD_INT 7
23106: PUSH
23107: LD_INT 8
23109: PUSH
23110: LD_INT 9
23112: PUSH
23113: LD_INT 10
23115: PUSH
23116: LD_INT 11
23118: PUSH
23119: LD_INT 12
23121: PUSH
23122: LD_INT 13
23124: PUSH
23125: LD_INT 14
23127: PUSH
23128: LD_INT 15
23130: PUSH
23131: LD_INT 16
23133: PUSH
23134: LD_INT 17
23136: PUSH
23137: LD_INT 18
23139: PUSH
23140: LD_INT 19
23142: PUSH
23143: LD_INT 20
23145: PUSH
23146: LD_INT 21
23148: PUSH
23149: LD_INT 22
23151: PUSH
23152: LD_INT 23
23154: PUSH
23155: LD_INT 24
23157: PUSH
23158: LD_INT 25
23160: PUSH
23161: LD_INT 26
23163: PUSH
23164: LD_INT 27
23166: PUSH
23167: LD_INT 28
23169: PUSH
23170: LD_INT 29
23172: PUSH
23173: LD_INT 30
23175: PUSH
23176: LD_INT 31
23178: PUSH
23179: LD_INT 32
23181: PUSH
23182: LD_INT 33
23184: PUSH
23185: LD_INT 34
23187: PUSH
23188: LD_INT 36
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 101
23230: PUSH
23231: LD_INT 102
23233: PUSH
23234: LD_INT 103
23236: PUSH
23237: LD_INT 104
23239: PUSH
23240: LD_INT 105
23242: PUSH
23243: LD_INT 106
23245: PUSH
23246: LD_INT 107
23248: PUSH
23249: LD_INT 108
23251: PUSH
23252: LD_INT 109
23254: PUSH
23255: LD_INT 110
23257: PUSH
23258: LD_INT 111
23260: PUSH
23261: LD_INT 112
23263: PUSH
23264: LD_INT 113
23266: PUSH
23267: LD_INT 114
23269: PUSH
23270: LD_INT 116
23272: PUSH
23273: LD_INT 117
23275: PUSH
23276: LD_INT 118
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: ST_TO_ADDR
23302: GO 23701
23304: LD_INT 18
23306: DOUBLE
23307: EQUAL
23308: IFTRUE 23312
23310: GO 23460
23312: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23313: LD_ADDR_VAR 0 2
23317: PUSH
23318: LD_INT 2
23320: PUSH
23321: LD_INT 4
23323: PUSH
23324: LD_INT 5
23326: PUSH
23327: LD_INT 7
23329: PUSH
23330: LD_INT 11
23332: PUSH
23333: LD_INT 12
23335: PUSH
23336: LD_INT 15
23338: PUSH
23339: LD_INT 16
23341: PUSH
23342: LD_INT 20
23344: PUSH
23345: LD_INT 21
23347: PUSH
23348: LD_INT 22
23350: PUSH
23351: LD_INT 23
23353: PUSH
23354: LD_INT 25
23356: PUSH
23357: LD_INT 26
23359: PUSH
23360: LD_INT 30
23362: PUSH
23363: LD_INT 31
23365: PUSH
23366: LD_INT 32
23368: PUSH
23369: LD_INT 33
23371: PUSH
23372: LD_INT 34
23374: PUSH
23375: LD_INT 35
23377: PUSH
23378: LD_INT 36
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: PUSH
23404: LD_INT 101
23406: PUSH
23407: LD_INT 102
23409: PUSH
23410: LD_INT 103
23412: PUSH
23413: LD_INT 106
23415: PUSH
23416: LD_INT 108
23418: PUSH
23419: LD_INT 112
23421: PUSH
23422: LD_INT 113
23424: PUSH
23425: LD_INT 114
23427: PUSH
23428: LD_INT 115
23430: PUSH
23431: LD_INT 116
23433: PUSH
23434: LD_INT 117
23436: PUSH
23437: LD_INT 118
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: ST_TO_ADDR
23458: GO 23701
23460: LD_INT 19
23462: DOUBLE
23463: EQUAL
23464: IFTRUE 23468
23466: GO 23700
23468: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23469: LD_ADDR_VAR 0 2
23473: PUSH
23474: LD_INT 1
23476: PUSH
23477: LD_INT 2
23479: PUSH
23480: LD_INT 3
23482: PUSH
23483: LD_INT 4
23485: PUSH
23486: LD_INT 5
23488: PUSH
23489: LD_INT 6
23491: PUSH
23492: LD_INT 7
23494: PUSH
23495: LD_INT 8
23497: PUSH
23498: LD_INT 9
23500: PUSH
23501: LD_INT 10
23503: PUSH
23504: LD_INT 11
23506: PUSH
23507: LD_INT 12
23509: PUSH
23510: LD_INT 13
23512: PUSH
23513: LD_INT 14
23515: PUSH
23516: LD_INT 15
23518: PUSH
23519: LD_INT 16
23521: PUSH
23522: LD_INT 17
23524: PUSH
23525: LD_INT 18
23527: PUSH
23528: LD_INT 19
23530: PUSH
23531: LD_INT 20
23533: PUSH
23534: LD_INT 21
23536: PUSH
23537: LD_INT 22
23539: PUSH
23540: LD_INT 23
23542: PUSH
23543: LD_INT 24
23545: PUSH
23546: LD_INT 25
23548: PUSH
23549: LD_INT 26
23551: PUSH
23552: LD_INT 27
23554: PUSH
23555: LD_INT 28
23557: PUSH
23558: LD_INT 29
23560: PUSH
23561: LD_INT 30
23563: PUSH
23564: LD_INT 31
23566: PUSH
23567: LD_INT 32
23569: PUSH
23570: LD_INT 33
23572: PUSH
23573: LD_INT 34
23575: PUSH
23576: LD_INT 35
23578: PUSH
23579: LD_INT 36
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 101
23622: PUSH
23623: LD_INT 102
23625: PUSH
23626: LD_INT 103
23628: PUSH
23629: LD_INT 104
23631: PUSH
23632: LD_INT 105
23634: PUSH
23635: LD_INT 106
23637: PUSH
23638: LD_INT 107
23640: PUSH
23641: LD_INT 108
23643: PUSH
23644: LD_INT 109
23646: PUSH
23647: LD_INT 110
23649: PUSH
23650: LD_INT 111
23652: PUSH
23653: LD_INT 112
23655: PUSH
23656: LD_INT 113
23658: PUSH
23659: LD_INT 114
23661: PUSH
23662: LD_INT 115
23664: PUSH
23665: LD_INT 116
23667: PUSH
23668: LD_INT 117
23670: PUSH
23671: LD_INT 118
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: ST_TO_ADDR
23698: GO 23701
23700: POP
// end else
23701: GO 23932
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23703: LD_ADDR_VAR 0 2
23707: PUSH
23708: LD_INT 1
23710: PUSH
23711: LD_INT 2
23713: PUSH
23714: LD_INT 3
23716: PUSH
23717: LD_INT 4
23719: PUSH
23720: LD_INT 5
23722: PUSH
23723: LD_INT 6
23725: PUSH
23726: LD_INT 7
23728: PUSH
23729: LD_INT 8
23731: PUSH
23732: LD_INT 9
23734: PUSH
23735: LD_INT 10
23737: PUSH
23738: LD_INT 11
23740: PUSH
23741: LD_INT 12
23743: PUSH
23744: LD_INT 13
23746: PUSH
23747: LD_INT 14
23749: PUSH
23750: LD_INT 15
23752: PUSH
23753: LD_INT 16
23755: PUSH
23756: LD_INT 17
23758: PUSH
23759: LD_INT 18
23761: PUSH
23762: LD_INT 19
23764: PUSH
23765: LD_INT 20
23767: PUSH
23768: LD_INT 21
23770: PUSH
23771: LD_INT 22
23773: PUSH
23774: LD_INT 23
23776: PUSH
23777: LD_INT 24
23779: PUSH
23780: LD_INT 25
23782: PUSH
23783: LD_INT 26
23785: PUSH
23786: LD_INT 27
23788: PUSH
23789: LD_INT 28
23791: PUSH
23792: LD_INT 29
23794: PUSH
23795: LD_INT 30
23797: PUSH
23798: LD_INT 31
23800: PUSH
23801: LD_INT 32
23803: PUSH
23804: LD_INT 33
23806: PUSH
23807: LD_INT 34
23809: PUSH
23810: LD_INT 35
23812: PUSH
23813: LD_INT 36
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 101
23856: PUSH
23857: LD_INT 102
23859: PUSH
23860: LD_INT 103
23862: PUSH
23863: LD_INT 104
23865: PUSH
23866: LD_INT 105
23868: PUSH
23869: LD_INT 106
23871: PUSH
23872: LD_INT 107
23874: PUSH
23875: LD_INT 108
23877: PUSH
23878: LD_INT 109
23880: PUSH
23881: LD_INT 110
23883: PUSH
23884: LD_INT 111
23886: PUSH
23887: LD_INT 112
23889: PUSH
23890: LD_INT 113
23892: PUSH
23893: LD_INT 114
23895: PUSH
23896: LD_INT 115
23898: PUSH
23899: LD_INT 116
23901: PUSH
23902: LD_INT 117
23904: PUSH
23905: LD_INT 118
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: ST_TO_ADDR
// if result then
23932: LD_VAR 0 2
23936: IFFALSE 24722
// begin normal :=  ;
23938: LD_ADDR_VAR 0 5
23942: PUSH
23943: LD_STRING 
23945: ST_TO_ADDR
// hardcore :=  ;
23946: LD_ADDR_VAR 0 6
23950: PUSH
23951: LD_STRING 
23953: ST_TO_ADDR
// active :=  ;
23954: LD_ADDR_VAR 0 7
23958: PUSH
23959: LD_STRING 
23961: ST_TO_ADDR
// for i = 1 to normalCounter do
23962: LD_ADDR_VAR 0 8
23966: PUSH
23967: DOUBLE
23968: LD_INT 1
23970: DEC
23971: ST_TO_ADDR
23972: LD_EXP 73
23976: PUSH
23977: FOR_TO
23978: IFFALSE 24079
// begin tmp := 0 ;
23980: LD_ADDR_VAR 0 3
23984: PUSH
23985: LD_STRING 0
23987: ST_TO_ADDR
// if result [ 1 ] then
23988: LD_VAR 0 2
23992: PUSH
23993: LD_INT 1
23995: ARRAY
23996: IFFALSE 24061
// if result [ 1 ] [ 1 ] = i then
23998: LD_VAR 0 2
24002: PUSH
24003: LD_INT 1
24005: ARRAY
24006: PUSH
24007: LD_INT 1
24009: ARRAY
24010: PUSH
24011: LD_VAR 0 8
24015: EQUAL
24016: IFFALSE 24061
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24018: LD_ADDR_VAR 0 2
24022: PUSH
24023: LD_VAR 0 2
24027: PPUSH
24028: LD_INT 1
24030: PPUSH
24031: LD_VAR 0 2
24035: PUSH
24036: LD_INT 1
24038: ARRAY
24039: PPUSH
24040: LD_INT 1
24042: PPUSH
24043: CALL_OW 3
24047: PPUSH
24048: CALL_OW 1
24052: ST_TO_ADDR
// tmp := 1 ;
24053: LD_ADDR_VAR 0 3
24057: PUSH
24058: LD_STRING 1
24060: ST_TO_ADDR
// end ; normal := normal & tmp ;
24061: LD_ADDR_VAR 0 5
24065: PUSH
24066: LD_VAR 0 5
24070: PUSH
24071: LD_VAR 0 3
24075: STR
24076: ST_TO_ADDR
// end ;
24077: GO 23977
24079: POP
24080: POP
// for i = 1 to hardcoreCounter do
24081: LD_ADDR_VAR 0 8
24085: PUSH
24086: DOUBLE
24087: LD_INT 1
24089: DEC
24090: ST_TO_ADDR
24091: LD_EXP 74
24095: PUSH
24096: FOR_TO
24097: IFFALSE 24202
// begin tmp := 0 ;
24099: LD_ADDR_VAR 0 3
24103: PUSH
24104: LD_STRING 0
24106: ST_TO_ADDR
// if result [ 2 ] then
24107: LD_VAR 0 2
24111: PUSH
24112: LD_INT 2
24114: ARRAY
24115: IFFALSE 24184
// if result [ 2 ] [ 1 ] = 100 + i then
24117: LD_VAR 0 2
24121: PUSH
24122: LD_INT 2
24124: ARRAY
24125: PUSH
24126: LD_INT 1
24128: ARRAY
24129: PUSH
24130: LD_INT 100
24132: PUSH
24133: LD_VAR 0 8
24137: PLUS
24138: EQUAL
24139: IFFALSE 24184
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24141: LD_ADDR_VAR 0 2
24145: PUSH
24146: LD_VAR 0 2
24150: PPUSH
24151: LD_INT 2
24153: PPUSH
24154: LD_VAR 0 2
24158: PUSH
24159: LD_INT 2
24161: ARRAY
24162: PPUSH
24163: LD_INT 1
24165: PPUSH
24166: CALL_OW 3
24170: PPUSH
24171: CALL_OW 1
24175: ST_TO_ADDR
// tmp := 1 ;
24176: LD_ADDR_VAR 0 3
24180: PUSH
24181: LD_STRING 1
24183: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24184: LD_ADDR_VAR 0 6
24188: PUSH
24189: LD_VAR 0 6
24193: PUSH
24194: LD_VAR 0 3
24198: STR
24199: ST_TO_ADDR
// end ;
24200: GO 24096
24202: POP
24203: POP
// if isGameLoad then
24204: LD_VAR 0 1
24208: IFFALSE 24683
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24210: LD_ADDR_VAR 0 4
24214: PUSH
24215: LD_EXP 77
24219: PUSH
24220: LD_EXP 76
24224: PUSH
24225: LD_EXP 78
24229: PUSH
24230: LD_EXP 75
24234: PUSH
24235: LD_EXP 79
24239: PUSH
24240: LD_EXP 80
24244: PUSH
24245: LD_EXP 81
24249: PUSH
24250: LD_EXP 82
24254: PUSH
24255: LD_EXP 83
24259: PUSH
24260: LD_EXP 84
24264: PUSH
24265: LD_EXP 85
24269: PUSH
24270: LD_EXP 86
24274: PUSH
24275: LD_EXP 87
24279: PUSH
24280: LD_EXP 88
24284: PUSH
24285: LD_EXP 96
24289: PUSH
24290: LD_EXP 97
24294: PUSH
24295: LD_EXP 98
24299: PUSH
24300: LD_EXP 99
24304: PUSH
24305: LD_EXP 101
24309: PUSH
24310: LD_EXP 102
24314: PUSH
24315: LD_EXP 103
24319: PUSH
24320: LD_EXP 106
24324: PUSH
24325: LD_EXP 108
24329: PUSH
24330: LD_EXP 109
24334: PUSH
24335: LD_EXP 110
24339: PUSH
24340: LD_EXP 112
24344: PUSH
24345: LD_EXP 113
24349: PUSH
24350: LD_EXP 116
24354: PUSH
24355: LD_EXP 117
24359: PUSH
24360: LD_EXP 118
24364: PUSH
24365: LD_EXP 119
24369: PUSH
24370: LD_EXP 120
24374: PUSH
24375: LD_EXP 121
24379: PUSH
24380: LD_EXP 122
24384: PUSH
24385: LD_EXP 123
24389: PUSH
24390: LD_EXP 124
24394: PUSH
24395: LD_EXP 89
24399: PUSH
24400: LD_EXP 90
24404: PUSH
24405: LD_EXP 93
24409: PUSH
24410: LD_EXP 94
24414: PUSH
24415: LD_EXP 95
24419: PUSH
24420: LD_EXP 91
24424: PUSH
24425: LD_EXP 92
24429: PUSH
24430: LD_EXP 100
24434: PUSH
24435: LD_EXP 104
24439: PUSH
24440: LD_EXP 105
24444: PUSH
24445: LD_EXP 107
24449: PUSH
24450: LD_EXP 111
24454: PUSH
24455: LD_EXP 114
24459: PUSH
24460: LD_EXP 115
24464: PUSH
24465: LD_EXP 125
24469: PUSH
24470: LD_EXP 126
24474: PUSH
24475: LD_EXP 127
24479: PUSH
24480: LD_EXP 128
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: ST_TO_ADDR
// tmp :=  ;
24541: LD_ADDR_VAR 0 3
24545: PUSH
24546: LD_STRING 
24548: ST_TO_ADDR
// for i = 1 to normalCounter do
24549: LD_ADDR_VAR 0 8
24553: PUSH
24554: DOUBLE
24555: LD_INT 1
24557: DEC
24558: ST_TO_ADDR
24559: LD_EXP 73
24563: PUSH
24564: FOR_TO
24565: IFFALSE 24601
// begin if flags [ i ] then
24567: LD_VAR 0 4
24571: PUSH
24572: LD_VAR 0 8
24576: ARRAY
24577: IFFALSE 24599
// tmp := tmp & i & ; ;
24579: LD_ADDR_VAR 0 3
24583: PUSH
24584: LD_VAR 0 3
24588: PUSH
24589: LD_VAR 0 8
24593: STR
24594: PUSH
24595: LD_STRING ;
24597: STR
24598: ST_TO_ADDR
// end ;
24599: GO 24564
24601: POP
24602: POP
// for i = 1 to hardcoreCounter do
24603: LD_ADDR_VAR 0 8
24607: PUSH
24608: DOUBLE
24609: LD_INT 1
24611: DEC
24612: ST_TO_ADDR
24613: LD_EXP 74
24617: PUSH
24618: FOR_TO
24619: IFFALSE 24665
// begin if flags [ normalCounter + i ] then
24621: LD_VAR 0 4
24625: PUSH
24626: LD_EXP 73
24630: PUSH
24631: LD_VAR 0 8
24635: PLUS
24636: ARRAY
24637: IFFALSE 24663
// tmp := tmp & ( 100 + i ) & ; ;
24639: LD_ADDR_VAR 0 3
24643: PUSH
24644: LD_VAR 0 3
24648: PUSH
24649: LD_INT 100
24651: PUSH
24652: LD_VAR 0 8
24656: PLUS
24657: STR
24658: PUSH
24659: LD_STRING ;
24661: STR
24662: ST_TO_ADDR
// end ;
24663: GO 24618
24665: POP
24666: POP
// if tmp then
24667: LD_VAR 0 3
24671: IFFALSE 24683
// active := tmp ;
24673: LD_ADDR_VAR 0 7
24677: PUSH
24678: LD_VAR 0 3
24682: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24683: LD_STRING getStreamItemsFromMission("
24685: PUSH
24686: LD_VAR 0 5
24690: STR
24691: PUSH
24692: LD_STRING ","
24694: STR
24695: PUSH
24696: LD_VAR 0 6
24700: STR
24701: PUSH
24702: LD_STRING ","
24704: STR
24705: PUSH
24706: LD_VAR 0 7
24710: STR
24711: PUSH
24712: LD_STRING ")
24714: STR
24715: PPUSH
24716: CALL_OW 559
// end else
24720: GO 24729
// ToLua ( getStreamItemsFromMission("","","") ) ;
24722: LD_STRING getStreamItemsFromMission("","","")
24724: PPUSH
24725: CALL_OW 559
// end ;
24729: LD_VAR 0 2
24733: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24734: LD_EXP 72
24738: PUSH
24739: LD_EXP 77
24743: AND
24744: IFFALSE 24868
24746: GO 24748
24748: DISABLE
24749: LD_INT 0
24751: PPUSH
24752: PPUSH
// begin enable ;
24753: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24754: LD_ADDR_VAR 0 2
24758: PUSH
24759: LD_INT 22
24761: PUSH
24762: LD_OWVAR 2
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: LD_INT 2
24773: PUSH
24774: LD_INT 34
24776: PUSH
24777: LD_INT 7
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 34
24786: PUSH
24787: LD_INT 45
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 34
24796: PUSH
24797: LD_INT 28
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 34
24806: PUSH
24807: LD_INT 47
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PPUSH
24825: CALL_OW 69
24829: ST_TO_ADDR
// if not tmp then
24830: LD_VAR 0 2
24834: NOT
24835: IFFALSE 24839
// exit ;
24837: GO 24868
// for i in tmp do
24839: LD_ADDR_VAR 0 1
24843: PUSH
24844: LD_VAR 0 2
24848: PUSH
24849: FOR_IN
24850: IFFALSE 24866
// begin SetLives ( i , 0 ) ;
24852: LD_VAR 0 1
24856: PPUSH
24857: LD_INT 0
24859: PPUSH
24860: CALL_OW 234
// end ;
24864: GO 24849
24866: POP
24867: POP
// end ;
24868: PPOPN 2
24870: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24871: LD_EXP 72
24875: PUSH
24876: LD_EXP 78
24880: AND
24881: IFFALSE 24965
24883: GO 24885
24885: DISABLE
24886: LD_INT 0
24888: PPUSH
24889: PPUSH
// begin enable ;
24890: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24891: LD_ADDR_VAR 0 2
24895: PUSH
24896: LD_INT 22
24898: PUSH
24899: LD_OWVAR 2
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: LD_INT 32
24910: PUSH
24911: LD_INT 3
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PPUSH
24922: CALL_OW 69
24926: ST_TO_ADDR
// if not tmp then
24927: LD_VAR 0 2
24931: NOT
24932: IFFALSE 24936
// exit ;
24934: GO 24965
// for i in tmp do
24936: LD_ADDR_VAR 0 1
24940: PUSH
24941: LD_VAR 0 2
24945: PUSH
24946: FOR_IN
24947: IFFALSE 24963
// begin SetLives ( i , 0 ) ;
24949: LD_VAR 0 1
24953: PPUSH
24954: LD_INT 0
24956: PPUSH
24957: CALL_OW 234
// end ;
24961: GO 24946
24963: POP
24964: POP
// end ;
24965: PPOPN 2
24967: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24968: LD_EXP 72
24972: PUSH
24973: LD_EXP 75
24977: AND
24978: IFFALSE 25071
24980: GO 24982
24982: DISABLE
24983: LD_INT 0
24985: PPUSH
// begin enable ;
24986: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24987: LD_ADDR_VAR 0 1
24991: PUSH
24992: LD_INT 22
24994: PUSH
24995: LD_OWVAR 2
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 2
25006: PUSH
25007: LD_INT 25
25009: PUSH
25010: LD_INT 5
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: LD_INT 25
25019: PUSH
25020: LD_INT 9
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: PUSH
25027: LD_INT 25
25029: PUSH
25030: LD_INT 8
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PPUSH
25047: CALL_OW 69
25051: PUSH
25052: FOR_IN
25053: IFFALSE 25069
// begin SetClass ( i , 1 ) ;
25055: LD_VAR 0 1
25059: PPUSH
25060: LD_INT 1
25062: PPUSH
25063: CALL_OW 336
// end ;
25067: GO 25052
25069: POP
25070: POP
// end ;
25071: PPOPN 1
25073: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25074: LD_EXP 72
25078: PUSH
25079: LD_EXP 76
25083: AND
25084: PUSH
25085: LD_OWVAR 65
25089: PUSH
25090: LD_INT 7
25092: LESS
25093: AND
25094: IFFALSE 25108
25096: GO 25098
25098: DISABLE
// begin enable ;
25099: ENABLE
// game_speed := 7 ;
25100: LD_ADDR_OWVAR 65
25104: PUSH
25105: LD_INT 7
25107: ST_TO_ADDR
// end ;
25108: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25109: LD_EXP 72
25113: PUSH
25114: LD_EXP 79
25118: AND
25119: IFFALSE 25321
25121: GO 25123
25123: DISABLE
25124: LD_INT 0
25126: PPUSH
25127: PPUSH
25128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25129: LD_ADDR_VAR 0 3
25133: PUSH
25134: LD_INT 81
25136: PUSH
25137: LD_OWVAR 2
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 21
25148: PUSH
25149: LD_INT 1
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PPUSH
25160: CALL_OW 69
25164: ST_TO_ADDR
// if not tmp then
25165: LD_VAR 0 3
25169: NOT
25170: IFFALSE 25174
// exit ;
25172: GO 25321
// if tmp > 5 then
25174: LD_VAR 0 3
25178: PUSH
25179: LD_INT 5
25181: GREATER
25182: IFFALSE 25194
// k := 5 else
25184: LD_ADDR_VAR 0 2
25188: PUSH
25189: LD_INT 5
25191: ST_TO_ADDR
25192: GO 25204
// k := tmp ;
25194: LD_ADDR_VAR 0 2
25198: PUSH
25199: LD_VAR 0 3
25203: ST_TO_ADDR
// for i := 1 to k do
25204: LD_ADDR_VAR 0 1
25208: PUSH
25209: DOUBLE
25210: LD_INT 1
25212: DEC
25213: ST_TO_ADDR
25214: LD_VAR 0 2
25218: PUSH
25219: FOR_TO
25220: IFFALSE 25319
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25222: LD_VAR 0 3
25226: PUSH
25227: LD_VAR 0 1
25231: ARRAY
25232: PPUSH
25233: LD_VAR 0 1
25237: PUSH
25238: LD_INT 4
25240: MOD
25241: PUSH
25242: LD_INT 1
25244: PLUS
25245: PPUSH
25246: CALL_OW 259
25250: PUSH
25251: LD_INT 10
25253: LESS
25254: IFFALSE 25317
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25256: LD_VAR 0 3
25260: PUSH
25261: LD_VAR 0 1
25265: ARRAY
25266: PPUSH
25267: LD_VAR 0 1
25271: PUSH
25272: LD_INT 4
25274: MOD
25275: PUSH
25276: LD_INT 1
25278: PLUS
25279: PPUSH
25280: LD_VAR 0 3
25284: PUSH
25285: LD_VAR 0 1
25289: ARRAY
25290: PPUSH
25291: LD_VAR 0 1
25295: PUSH
25296: LD_INT 4
25298: MOD
25299: PUSH
25300: LD_INT 1
25302: PLUS
25303: PPUSH
25304: CALL_OW 259
25308: PUSH
25309: LD_INT 1
25311: PLUS
25312: PPUSH
25313: CALL_OW 237
25317: GO 25219
25319: POP
25320: POP
// end ;
25321: PPOPN 3
25323: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25324: LD_EXP 72
25328: PUSH
25329: LD_EXP 80
25333: AND
25334: IFFALSE 25354
25336: GO 25338
25338: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25339: LD_INT 4
25341: PPUSH
25342: LD_OWVAR 2
25346: PPUSH
25347: LD_INT 0
25349: PPUSH
25350: CALL_OW 324
25354: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25355: LD_EXP 72
25359: PUSH
25360: LD_EXP 109
25364: AND
25365: IFFALSE 25385
25367: GO 25369
25369: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25370: LD_INT 19
25372: PPUSH
25373: LD_OWVAR 2
25377: PPUSH
25378: LD_INT 0
25380: PPUSH
25381: CALL_OW 324
25385: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25386: LD_EXP 72
25390: PUSH
25391: LD_EXP 81
25395: AND
25396: IFFALSE 25498
25398: GO 25400
25400: DISABLE
25401: LD_INT 0
25403: PPUSH
25404: PPUSH
// begin enable ;
25405: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25406: LD_ADDR_VAR 0 2
25410: PUSH
25411: LD_INT 22
25413: PUSH
25414: LD_OWVAR 2
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 2
25425: PUSH
25426: LD_INT 34
25428: PUSH
25429: LD_INT 11
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 34
25438: PUSH
25439: LD_INT 30
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: LIST
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PPUSH
25455: CALL_OW 69
25459: ST_TO_ADDR
// if not tmp then
25460: LD_VAR 0 2
25464: NOT
25465: IFFALSE 25469
// exit ;
25467: GO 25498
// for i in tmp do
25469: LD_ADDR_VAR 0 1
25473: PUSH
25474: LD_VAR 0 2
25478: PUSH
25479: FOR_IN
25480: IFFALSE 25496
// begin SetLives ( i , 0 ) ;
25482: LD_VAR 0 1
25486: PPUSH
25487: LD_INT 0
25489: PPUSH
25490: CALL_OW 234
// end ;
25494: GO 25479
25496: POP
25497: POP
// end ;
25498: PPOPN 2
25500: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25501: LD_EXP 72
25505: PUSH
25506: LD_EXP 82
25510: AND
25511: IFFALSE 25531
25513: GO 25515
25515: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25516: LD_INT 32
25518: PPUSH
25519: LD_OWVAR 2
25523: PPUSH
25524: LD_INT 0
25526: PPUSH
25527: CALL_OW 324
25531: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25532: LD_EXP 72
25536: PUSH
25537: LD_EXP 83
25541: AND
25542: IFFALSE 25723
25544: GO 25546
25546: DISABLE
25547: LD_INT 0
25549: PPUSH
25550: PPUSH
25551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25552: LD_ADDR_VAR 0 2
25556: PUSH
25557: LD_INT 22
25559: PUSH
25560: LD_OWVAR 2
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 33
25571: PUSH
25572: LD_INT 3
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PPUSH
25583: CALL_OW 69
25587: ST_TO_ADDR
// if not tmp then
25588: LD_VAR 0 2
25592: NOT
25593: IFFALSE 25597
// exit ;
25595: GO 25723
// side := 0 ;
25597: LD_ADDR_VAR 0 3
25601: PUSH
25602: LD_INT 0
25604: ST_TO_ADDR
// for i := 1 to 8 do
25605: LD_ADDR_VAR 0 1
25609: PUSH
25610: DOUBLE
25611: LD_INT 1
25613: DEC
25614: ST_TO_ADDR
25615: LD_INT 8
25617: PUSH
25618: FOR_TO
25619: IFFALSE 25667
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25621: LD_OWVAR 2
25625: PUSH
25626: LD_VAR 0 1
25630: NONEQUAL
25631: PUSH
25632: LD_OWVAR 2
25636: PPUSH
25637: LD_VAR 0 1
25641: PPUSH
25642: CALL_OW 81
25646: PUSH
25647: LD_INT 2
25649: EQUAL
25650: AND
25651: IFFALSE 25665
// begin side := i ;
25653: LD_ADDR_VAR 0 3
25657: PUSH
25658: LD_VAR 0 1
25662: ST_TO_ADDR
// break ;
25663: GO 25667
// end ;
25665: GO 25618
25667: POP
25668: POP
// if not side then
25669: LD_VAR 0 3
25673: NOT
25674: IFFALSE 25678
// exit ;
25676: GO 25723
// for i := 1 to tmp do
25678: LD_ADDR_VAR 0 1
25682: PUSH
25683: DOUBLE
25684: LD_INT 1
25686: DEC
25687: ST_TO_ADDR
25688: LD_VAR 0 2
25692: PUSH
25693: FOR_TO
25694: IFFALSE 25721
// if Prob ( 60 ) then
25696: LD_INT 60
25698: PPUSH
25699: CALL_OW 13
25703: IFFALSE 25719
// SetSide ( i , side ) ;
25705: LD_VAR 0 1
25709: PPUSH
25710: LD_VAR 0 3
25714: PPUSH
25715: CALL_OW 235
25719: GO 25693
25721: POP
25722: POP
// end ;
25723: PPOPN 3
25725: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25726: LD_EXP 72
25730: PUSH
25731: LD_EXP 85
25735: AND
25736: IFFALSE 25855
25738: GO 25740
25740: DISABLE
25741: LD_INT 0
25743: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25744: LD_ADDR_VAR 0 1
25748: PUSH
25749: LD_INT 22
25751: PUSH
25752: LD_OWVAR 2
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PUSH
25761: LD_INT 21
25763: PUSH
25764: LD_INT 1
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 3
25773: PUSH
25774: LD_INT 23
25776: PUSH
25777: LD_INT 0
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: LIST
25792: PPUSH
25793: CALL_OW 69
25797: PUSH
25798: FOR_IN
25799: IFFALSE 25853
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25801: LD_VAR 0 1
25805: PPUSH
25806: CALL_OW 257
25810: PUSH
25811: LD_INT 1
25813: PUSH
25814: LD_INT 2
25816: PUSH
25817: LD_INT 3
25819: PUSH
25820: LD_INT 4
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: IN
25829: IFFALSE 25851
// SetClass ( un , rand ( 1 , 4 ) ) ;
25831: LD_VAR 0 1
25835: PPUSH
25836: LD_INT 1
25838: PPUSH
25839: LD_INT 4
25841: PPUSH
25842: CALL_OW 12
25846: PPUSH
25847: CALL_OW 336
25851: GO 25798
25853: POP
25854: POP
// end ;
25855: PPOPN 1
25857: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25858: LD_EXP 72
25862: PUSH
25863: LD_EXP 84
25867: AND
25868: IFFALSE 25947
25870: GO 25872
25872: DISABLE
25873: LD_INT 0
25875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25876: LD_ADDR_VAR 0 1
25880: PUSH
25881: LD_INT 22
25883: PUSH
25884: LD_OWVAR 2
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 21
25895: PUSH
25896: LD_INT 3
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PPUSH
25907: CALL_OW 69
25911: ST_TO_ADDR
// if not tmp then
25912: LD_VAR 0 1
25916: NOT
25917: IFFALSE 25921
// exit ;
25919: GO 25947
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25921: LD_VAR 0 1
25925: PUSH
25926: LD_INT 1
25928: PPUSH
25929: LD_VAR 0 1
25933: PPUSH
25934: CALL_OW 12
25938: ARRAY
25939: PPUSH
25940: LD_INT 100
25942: PPUSH
25943: CALL_OW 234
// end ;
25947: PPOPN 1
25949: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25950: LD_EXP 72
25954: PUSH
25955: LD_EXP 86
25959: AND
25960: IFFALSE 26058
25962: GO 25964
25964: DISABLE
25965: LD_INT 0
25967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25968: LD_ADDR_VAR 0 1
25972: PUSH
25973: LD_INT 22
25975: PUSH
25976: LD_OWVAR 2
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 21
25987: PUSH
25988: LD_INT 1
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PPUSH
25999: CALL_OW 69
26003: ST_TO_ADDR
// if not tmp then
26004: LD_VAR 0 1
26008: NOT
26009: IFFALSE 26013
// exit ;
26011: GO 26058
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26013: LD_VAR 0 1
26017: PUSH
26018: LD_INT 1
26020: PPUSH
26021: LD_VAR 0 1
26025: PPUSH
26026: CALL_OW 12
26030: ARRAY
26031: PPUSH
26032: LD_INT 1
26034: PPUSH
26035: LD_INT 4
26037: PPUSH
26038: CALL_OW 12
26042: PPUSH
26043: LD_INT 3000
26045: PPUSH
26046: LD_INT 9000
26048: PPUSH
26049: CALL_OW 12
26053: PPUSH
26054: CALL_OW 492
// end ;
26058: PPOPN 1
26060: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26061: LD_EXP 72
26065: PUSH
26066: LD_EXP 87
26070: AND
26071: IFFALSE 26091
26073: GO 26075
26075: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26076: LD_INT 1
26078: PPUSH
26079: LD_OWVAR 2
26083: PPUSH
26084: LD_INT 0
26086: PPUSH
26087: CALL_OW 324
26091: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26092: LD_EXP 72
26096: PUSH
26097: LD_EXP 88
26101: AND
26102: IFFALSE 26185
26104: GO 26106
26106: DISABLE
26107: LD_INT 0
26109: PPUSH
26110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26111: LD_ADDR_VAR 0 2
26115: PUSH
26116: LD_INT 22
26118: PUSH
26119: LD_OWVAR 2
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 21
26130: PUSH
26131: LD_INT 3
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PPUSH
26142: CALL_OW 69
26146: ST_TO_ADDR
// if not tmp then
26147: LD_VAR 0 2
26151: NOT
26152: IFFALSE 26156
// exit ;
26154: GO 26185
// for i in tmp do
26156: LD_ADDR_VAR 0 1
26160: PUSH
26161: LD_VAR 0 2
26165: PUSH
26166: FOR_IN
26167: IFFALSE 26183
// SetBLevel ( i , 10 ) ;
26169: LD_VAR 0 1
26173: PPUSH
26174: LD_INT 10
26176: PPUSH
26177: CALL_OW 241
26181: GO 26166
26183: POP
26184: POP
// end ;
26185: PPOPN 2
26187: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26188: LD_EXP 72
26192: PUSH
26193: LD_EXP 89
26197: AND
26198: IFFALSE 26309
26200: GO 26202
26202: DISABLE
26203: LD_INT 0
26205: PPUSH
26206: PPUSH
26207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26208: LD_ADDR_VAR 0 3
26212: PUSH
26213: LD_INT 22
26215: PUSH
26216: LD_OWVAR 2
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 25
26227: PUSH
26228: LD_INT 1
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PPUSH
26239: CALL_OW 69
26243: ST_TO_ADDR
// if not tmp then
26244: LD_VAR 0 3
26248: NOT
26249: IFFALSE 26253
// exit ;
26251: GO 26309
// un := tmp [ rand ( 1 , tmp ) ] ;
26253: LD_ADDR_VAR 0 2
26257: PUSH
26258: LD_VAR 0 3
26262: PUSH
26263: LD_INT 1
26265: PPUSH
26266: LD_VAR 0 3
26270: PPUSH
26271: CALL_OW 12
26275: ARRAY
26276: ST_TO_ADDR
// if Crawls ( un ) then
26277: LD_VAR 0 2
26281: PPUSH
26282: CALL_OW 318
26286: IFFALSE 26297
// ComWalk ( un ) ;
26288: LD_VAR 0 2
26292: PPUSH
26293: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26297: LD_VAR 0 2
26301: PPUSH
26302: LD_INT 5
26304: PPUSH
26305: CALL_OW 336
// end ;
26309: PPOPN 3
26311: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26312: LD_EXP 72
26316: PUSH
26317: LD_EXP 90
26321: AND
26322: PUSH
26323: LD_OWVAR 67
26327: PUSH
26328: LD_INT 4
26330: LESS
26331: AND
26332: IFFALSE 26351
26334: GO 26336
26336: DISABLE
// begin Difficulty := Difficulty + 1 ;
26337: LD_ADDR_OWVAR 67
26341: PUSH
26342: LD_OWVAR 67
26346: PUSH
26347: LD_INT 1
26349: PLUS
26350: ST_TO_ADDR
// end ;
26351: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26352: LD_EXP 72
26356: PUSH
26357: LD_EXP 91
26361: AND
26362: IFFALSE 26465
26364: GO 26366
26366: DISABLE
26367: LD_INT 0
26369: PPUSH
// begin for i := 1 to 5 do
26370: LD_ADDR_VAR 0 1
26374: PUSH
26375: DOUBLE
26376: LD_INT 1
26378: DEC
26379: ST_TO_ADDR
26380: LD_INT 5
26382: PUSH
26383: FOR_TO
26384: IFFALSE 26463
// begin uc_nation := nation_nature ;
26386: LD_ADDR_OWVAR 21
26390: PUSH
26391: LD_INT 0
26393: ST_TO_ADDR
// uc_side := 0 ;
26394: LD_ADDR_OWVAR 20
26398: PUSH
26399: LD_INT 0
26401: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26402: LD_ADDR_OWVAR 29
26406: PUSH
26407: LD_INT 12
26409: PUSH
26410: LD_INT 12
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: ST_TO_ADDR
// hc_agressivity := 20 ;
26417: LD_ADDR_OWVAR 35
26421: PUSH
26422: LD_INT 20
26424: ST_TO_ADDR
// hc_class := class_tiger ;
26425: LD_ADDR_OWVAR 28
26429: PUSH
26430: LD_INT 14
26432: ST_TO_ADDR
// hc_gallery :=  ;
26433: LD_ADDR_OWVAR 33
26437: PUSH
26438: LD_STRING 
26440: ST_TO_ADDR
// hc_name :=  ;
26441: LD_ADDR_OWVAR 26
26445: PUSH
26446: LD_STRING 
26448: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26449: CALL_OW 44
26453: PPUSH
26454: LD_INT 0
26456: PPUSH
26457: CALL_OW 51
// end ;
26461: GO 26383
26463: POP
26464: POP
// end ;
26465: PPOPN 1
26467: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26468: LD_EXP 72
26472: PUSH
26473: LD_EXP 92
26477: AND
26478: IFFALSE 26487
26480: GO 26482
26482: DISABLE
// StreamSibBomb ;
26483: CALL 26488 0 0
26487: END
// export function StreamSibBomb ; var i , x , y ; begin
26488: LD_INT 0
26490: PPUSH
26491: PPUSH
26492: PPUSH
26493: PPUSH
// result := false ;
26494: LD_ADDR_VAR 0 1
26498: PUSH
26499: LD_INT 0
26501: ST_TO_ADDR
// for i := 1 to 16 do
26502: LD_ADDR_VAR 0 2
26506: PUSH
26507: DOUBLE
26508: LD_INT 1
26510: DEC
26511: ST_TO_ADDR
26512: LD_INT 16
26514: PUSH
26515: FOR_TO
26516: IFFALSE 26715
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26518: LD_ADDR_VAR 0 3
26522: PUSH
26523: LD_INT 10
26525: PUSH
26526: LD_INT 20
26528: PUSH
26529: LD_INT 30
26531: PUSH
26532: LD_INT 40
26534: PUSH
26535: LD_INT 50
26537: PUSH
26538: LD_INT 60
26540: PUSH
26541: LD_INT 70
26543: PUSH
26544: LD_INT 80
26546: PUSH
26547: LD_INT 90
26549: PUSH
26550: LD_INT 100
26552: PUSH
26553: LD_INT 110
26555: PUSH
26556: LD_INT 120
26558: PUSH
26559: LD_INT 130
26561: PUSH
26562: LD_INT 140
26564: PUSH
26565: LD_INT 150
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 1
26587: PPUSH
26588: LD_INT 15
26590: PPUSH
26591: CALL_OW 12
26595: ARRAY
26596: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26597: LD_ADDR_VAR 0 4
26601: PUSH
26602: LD_INT 10
26604: PUSH
26605: LD_INT 20
26607: PUSH
26608: LD_INT 30
26610: PUSH
26611: LD_INT 40
26613: PUSH
26614: LD_INT 50
26616: PUSH
26617: LD_INT 60
26619: PUSH
26620: LD_INT 70
26622: PUSH
26623: LD_INT 80
26625: PUSH
26626: LD_INT 90
26628: PUSH
26629: LD_INT 100
26631: PUSH
26632: LD_INT 110
26634: PUSH
26635: LD_INT 120
26637: PUSH
26638: LD_INT 130
26640: PUSH
26641: LD_INT 140
26643: PUSH
26644: LD_INT 150
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 1
26666: PPUSH
26667: LD_INT 15
26669: PPUSH
26670: CALL_OW 12
26674: ARRAY
26675: ST_TO_ADDR
// if ValidHex ( x , y ) then
26676: LD_VAR 0 3
26680: PPUSH
26681: LD_VAR 0 4
26685: PPUSH
26686: CALL_OW 488
26690: IFFALSE 26713
// begin result := [ x , y ] ;
26692: LD_ADDR_VAR 0 1
26696: PUSH
26697: LD_VAR 0 3
26701: PUSH
26702: LD_VAR 0 4
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: ST_TO_ADDR
// break ;
26711: GO 26715
// end ; end ;
26713: GO 26515
26715: POP
26716: POP
// if result then
26717: LD_VAR 0 1
26721: IFFALSE 26781
// begin ToLua ( playSibBomb() ) ;
26723: LD_STRING playSibBomb()
26725: PPUSH
26726: CALL_OW 559
// wait ( 0 0$14 ) ;
26730: LD_INT 490
26732: PPUSH
26733: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26737: LD_VAR 0 1
26741: PUSH
26742: LD_INT 1
26744: ARRAY
26745: PPUSH
26746: LD_VAR 0 1
26750: PUSH
26751: LD_INT 2
26753: ARRAY
26754: PPUSH
26755: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26759: LD_VAR 0 1
26763: PUSH
26764: LD_INT 1
26766: ARRAY
26767: PPUSH
26768: LD_VAR 0 1
26772: PUSH
26773: LD_INT 2
26775: ARRAY
26776: PPUSH
26777: CALL_OW 429
// end ; end ;
26781: LD_VAR 0 1
26785: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26786: LD_EXP 72
26790: PUSH
26791: LD_EXP 94
26795: AND
26796: IFFALSE 26808
26798: GO 26800
26800: DISABLE
// YouLost (  ) ;
26801: LD_STRING 
26803: PPUSH
26804: CALL_OW 104
26808: END
// every 0 0$1 trigger StreamModeActive and sFog do
26809: LD_EXP 72
26813: PUSH
26814: LD_EXP 93
26818: AND
26819: IFFALSE 26833
26821: GO 26823
26823: DISABLE
// FogOff ( your_side ) ;
26824: LD_OWVAR 2
26828: PPUSH
26829: CALL_OW 344
26833: END
// every 0 0$1 trigger StreamModeActive and sSun do
26834: LD_EXP 72
26838: PUSH
26839: LD_EXP 95
26843: AND
26844: IFFALSE 26872
26846: GO 26848
26848: DISABLE
// begin solar_recharge_percent := 0 ;
26849: LD_ADDR_OWVAR 79
26853: PUSH
26854: LD_INT 0
26856: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26857: LD_INT 10500
26859: PPUSH
26860: CALL_OW 67
// solar_recharge_percent := 100 ;
26864: LD_ADDR_OWVAR 79
26868: PUSH
26869: LD_INT 100
26871: ST_TO_ADDR
// end ;
26872: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26873: LD_EXP 72
26877: PUSH
26878: LD_EXP 96
26882: AND
26883: IFFALSE 27122
26885: GO 26887
26887: DISABLE
26888: LD_INT 0
26890: PPUSH
26891: PPUSH
26892: PPUSH
// begin tmp := [ ] ;
26893: LD_ADDR_VAR 0 3
26897: PUSH
26898: EMPTY
26899: ST_TO_ADDR
// for i := 1 to 6 do
26900: LD_ADDR_VAR 0 1
26904: PUSH
26905: DOUBLE
26906: LD_INT 1
26908: DEC
26909: ST_TO_ADDR
26910: LD_INT 6
26912: PUSH
26913: FOR_TO
26914: IFFALSE 27019
// begin uc_nation := nation_nature ;
26916: LD_ADDR_OWVAR 21
26920: PUSH
26921: LD_INT 0
26923: ST_TO_ADDR
// uc_side := 0 ;
26924: LD_ADDR_OWVAR 20
26928: PUSH
26929: LD_INT 0
26931: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26932: LD_ADDR_OWVAR 29
26936: PUSH
26937: LD_INT 12
26939: PUSH
26940: LD_INT 12
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: ST_TO_ADDR
// hc_agressivity := 20 ;
26947: LD_ADDR_OWVAR 35
26951: PUSH
26952: LD_INT 20
26954: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26955: LD_ADDR_OWVAR 28
26959: PUSH
26960: LD_INT 17
26962: ST_TO_ADDR
// hc_gallery :=  ;
26963: LD_ADDR_OWVAR 33
26967: PUSH
26968: LD_STRING 
26970: ST_TO_ADDR
// hc_name :=  ;
26971: LD_ADDR_OWVAR 26
26975: PUSH
26976: LD_STRING 
26978: ST_TO_ADDR
// un := CreateHuman ;
26979: LD_ADDR_VAR 0 2
26983: PUSH
26984: CALL_OW 44
26988: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26989: LD_VAR 0 2
26993: PPUSH
26994: LD_INT 1
26996: PPUSH
26997: CALL_OW 51
// tmp := tmp ^ un ;
27001: LD_ADDR_VAR 0 3
27005: PUSH
27006: LD_VAR 0 3
27010: PUSH
27011: LD_VAR 0 2
27015: ADD
27016: ST_TO_ADDR
// end ;
27017: GO 26913
27019: POP
27020: POP
// repeat wait ( 0 0$1 ) ;
27021: LD_INT 35
27023: PPUSH
27024: CALL_OW 67
// for un in tmp do
27028: LD_ADDR_VAR 0 2
27032: PUSH
27033: LD_VAR 0 3
27037: PUSH
27038: FOR_IN
27039: IFFALSE 27113
// begin if IsDead ( un ) then
27041: LD_VAR 0 2
27045: PPUSH
27046: CALL_OW 301
27050: IFFALSE 27070
// begin tmp := tmp diff un ;
27052: LD_ADDR_VAR 0 3
27056: PUSH
27057: LD_VAR 0 3
27061: PUSH
27062: LD_VAR 0 2
27066: DIFF
27067: ST_TO_ADDR
// continue ;
27068: GO 27038
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27070: LD_VAR 0 2
27074: PPUSH
27075: LD_INT 3
27077: PUSH
27078: LD_INT 22
27080: PUSH
27081: LD_INT 0
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PPUSH
27092: CALL_OW 69
27096: PPUSH
27097: LD_VAR 0 2
27101: PPUSH
27102: CALL_OW 74
27106: PPUSH
27107: CALL_OW 115
// end ;
27111: GO 27038
27113: POP
27114: POP
// until not tmp ;
27115: LD_VAR 0 3
27119: NOT
27120: IFFALSE 27021
// end ;
27122: PPOPN 3
27124: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27125: LD_EXP 72
27129: PUSH
27130: LD_EXP 97
27134: AND
27135: IFFALSE 27189
27137: GO 27139
27139: DISABLE
// begin ToLua ( displayTroll(); ) ;
27140: LD_STRING displayTroll();
27142: PPUSH
27143: CALL_OW 559
// wait ( 3 3$00 ) ;
27147: LD_INT 6300
27149: PPUSH
27150: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27154: LD_STRING hideTroll();
27156: PPUSH
27157: CALL_OW 559
// wait ( 1 1$00 ) ;
27161: LD_INT 2100
27163: PPUSH
27164: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27168: LD_STRING displayTroll();
27170: PPUSH
27171: CALL_OW 559
// wait ( 1 1$00 ) ;
27175: LD_INT 2100
27177: PPUSH
27178: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27182: LD_STRING hideTroll();
27184: PPUSH
27185: CALL_OW 559
// end ;
27189: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27190: LD_EXP 72
27194: PUSH
27195: LD_EXP 98
27199: AND
27200: IFFALSE 27263
27202: GO 27204
27204: DISABLE
27205: LD_INT 0
27207: PPUSH
// begin p := 0 ;
27208: LD_ADDR_VAR 0 1
27212: PUSH
27213: LD_INT 0
27215: ST_TO_ADDR
// repeat game_speed := 1 ;
27216: LD_ADDR_OWVAR 65
27220: PUSH
27221: LD_INT 1
27223: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27224: LD_INT 35
27226: PPUSH
27227: CALL_OW 67
// p := p + 1 ;
27231: LD_ADDR_VAR 0 1
27235: PUSH
27236: LD_VAR 0 1
27240: PUSH
27241: LD_INT 1
27243: PLUS
27244: ST_TO_ADDR
// until p >= 60 ;
27245: LD_VAR 0 1
27249: PUSH
27250: LD_INT 60
27252: GREATEREQUAL
27253: IFFALSE 27216
// game_speed := 4 ;
27255: LD_ADDR_OWVAR 65
27259: PUSH
27260: LD_INT 4
27262: ST_TO_ADDR
// end ;
27263: PPOPN 1
27265: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27266: LD_EXP 72
27270: PUSH
27271: LD_EXP 99
27275: AND
27276: IFFALSE 27422
27278: GO 27280
27280: DISABLE
27281: LD_INT 0
27283: PPUSH
27284: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27285: LD_ADDR_VAR 0 1
27289: PUSH
27290: LD_INT 22
27292: PUSH
27293: LD_OWVAR 2
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 2
27304: PUSH
27305: LD_INT 30
27307: PUSH
27308: LD_INT 0
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 30
27317: PUSH
27318: LD_INT 1
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: LIST
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PPUSH
27334: CALL_OW 69
27338: ST_TO_ADDR
// if not depot then
27339: LD_VAR 0 1
27343: NOT
27344: IFFALSE 27348
// exit ;
27346: GO 27422
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27348: LD_ADDR_VAR 0 2
27352: PUSH
27353: LD_VAR 0 1
27357: PUSH
27358: LD_INT 1
27360: PPUSH
27361: LD_VAR 0 1
27365: PPUSH
27366: CALL_OW 12
27370: ARRAY
27371: PPUSH
27372: CALL_OW 274
27376: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27377: LD_VAR 0 2
27381: PPUSH
27382: LD_INT 1
27384: PPUSH
27385: LD_INT 0
27387: PPUSH
27388: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27392: LD_VAR 0 2
27396: PPUSH
27397: LD_INT 2
27399: PPUSH
27400: LD_INT 0
27402: PPUSH
27403: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27407: LD_VAR 0 2
27411: PPUSH
27412: LD_INT 3
27414: PPUSH
27415: LD_INT 0
27417: PPUSH
27418: CALL_OW 277
// end ;
27422: PPOPN 2
27424: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27425: LD_EXP 72
27429: PUSH
27430: LD_EXP 100
27434: AND
27435: IFFALSE 27532
27437: GO 27439
27439: DISABLE
27440: LD_INT 0
27442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27443: LD_ADDR_VAR 0 1
27447: PUSH
27448: LD_INT 22
27450: PUSH
27451: LD_OWVAR 2
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: LD_INT 21
27462: PUSH
27463: LD_INT 1
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: PUSH
27470: LD_INT 3
27472: PUSH
27473: LD_INT 23
27475: PUSH
27476: LD_INT 0
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: LIST
27491: PPUSH
27492: CALL_OW 69
27496: ST_TO_ADDR
// if not tmp then
27497: LD_VAR 0 1
27501: NOT
27502: IFFALSE 27506
// exit ;
27504: GO 27532
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27506: LD_VAR 0 1
27510: PUSH
27511: LD_INT 1
27513: PPUSH
27514: LD_VAR 0 1
27518: PPUSH
27519: CALL_OW 12
27523: ARRAY
27524: PPUSH
27525: LD_INT 200
27527: PPUSH
27528: CALL_OW 234
// end ;
27532: PPOPN 1
27534: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27535: LD_EXP 72
27539: PUSH
27540: LD_EXP 101
27544: AND
27545: IFFALSE 27624
27547: GO 27549
27549: DISABLE
27550: LD_INT 0
27552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27553: LD_ADDR_VAR 0 1
27557: PUSH
27558: LD_INT 22
27560: PUSH
27561: LD_OWVAR 2
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: LD_INT 21
27572: PUSH
27573: LD_INT 2
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PPUSH
27584: CALL_OW 69
27588: ST_TO_ADDR
// if not tmp then
27589: LD_VAR 0 1
27593: NOT
27594: IFFALSE 27598
// exit ;
27596: GO 27624
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27598: LD_VAR 0 1
27602: PUSH
27603: LD_INT 1
27605: PPUSH
27606: LD_VAR 0 1
27610: PPUSH
27611: CALL_OW 12
27615: ARRAY
27616: PPUSH
27617: LD_INT 60
27619: PPUSH
27620: CALL_OW 234
// end ;
27624: PPOPN 1
27626: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27627: LD_EXP 72
27631: PUSH
27632: LD_EXP 102
27636: AND
27637: IFFALSE 27736
27639: GO 27641
27641: DISABLE
27642: LD_INT 0
27644: PPUSH
27645: PPUSH
// begin enable ;
27646: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27647: LD_ADDR_VAR 0 1
27651: PUSH
27652: LD_INT 22
27654: PUSH
27655: LD_OWVAR 2
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 61
27666: PUSH
27667: EMPTY
27668: LIST
27669: PUSH
27670: LD_INT 33
27672: PUSH
27673: LD_INT 2
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: LIST
27684: PPUSH
27685: CALL_OW 69
27689: ST_TO_ADDR
// if not tmp then
27690: LD_VAR 0 1
27694: NOT
27695: IFFALSE 27699
// exit ;
27697: GO 27736
// for i in tmp do
27699: LD_ADDR_VAR 0 2
27703: PUSH
27704: LD_VAR 0 1
27708: PUSH
27709: FOR_IN
27710: IFFALSE 27734
// if IsControledBy ( i ) then
27712: LD_VAR 0 2
27716: PPUSH
27717: CALL_OW 312
27721: IFFALSE 27732
// ComUnlink ( i ) ;
27723: LD_VAR 0 2
27727: PPUSH
27728: CALL_OW 136
27732: GO 27709
27734: POP
27735: POP
// end ;
27736: PPOPN 2
27738: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27739: LD_EXP 72
27743: PUSH
27744: LD_EXP 103
27748: AND
27749: IFFALSE 27889
27751: GO 27753
27753: DISABLE
27754: LD_INT 0
27756: PPUSH
27757: PPUSH
// begin ToLua ( displayPowell(); ) ;
27758: LD_STRING displayPowell();
27760: PPUSH
27761: CALL_OW 559
// uc_side := 0 ;
27765: LD_ADDR_OWVAR 20
27769: PUSH
27770: LD_INT 0
27772: ST_TO_ADDR
// uc_nation := 2 ;
27773: LD_ADDR_OWVAR 21
27777: PUSH
27778: LD_INT 2
27780: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27781: LD_ADDR_OWVAR 37
27785: PUSH
27786: LD_INT 14
27788: ST_TO_ADDR
// vc_engine := engine_siberite ;
27789: LD_ADDR_OWVAR 39
27793: PUSH
27794: LD_INT 3
27796: ST_TO_ADDR
// vc_control := control_apeman ;
27797: LD_ADDR_OWVAR 38
27801: PUSH
27802: LD_INT 5
27804: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27805: LD_ADDR_OWVAR 40
27809: PUSH
27810: LD_INT 29
27812: ST_TO_ADDR
// un := CreateVehicle ;
27813: LD_ADDR_VAR 0 2
27817: PUSH
27818: CALL_OW 45
27822: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27823: LD_VAR 0 2
27827: PPUSH
27828: LD_INT 1
27830: PPUSH
27831: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27835: LD_INT 35
27837: PPUSH
27838: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27842: LD_VAR 0 2
27846: PPUSH
27847: LD_INT 22
27849: PUSH
27850: LD_OWVAR 2
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PPUSH
27859: CALL_OW 69
27863: PPUSH
27864: LD_VAR 0 2
27868: PPUSH
27869: CALL_OW 74
27873: PPUSH
27874: CALL_OW 115
// until IsDead ( un ) ;
27878: LD_VAR 0 2
27882: PPUSH
27883: CALL_OW 301
27887: IFFALSE 27835
// end ;
27889: PPOPN 2
27891: END
// every 0 0$1 trigger StreamModeActive and sStu do
27892: LD_EXP 72
27896: PUSH
27897: LD_EXP 111
27901: AND
27902: IFFALSE 27918
27904: GO 27906
27906: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27907: LD_STRING displayStucuk();
27909: PPUSH
27910: CALL_OW 559
// ResetFog ;
27914: CALL_OW 335
// end ;
27918: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27919: LD_EXP 72
27923: PUSH
27924: LD_EXP 104
27928: AND
27929: IFFALSE 28070
27931: GO 27933
27933: DISABLE
27934: LD_INT 0
27936: PPUSH
27937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27938: LD_ADDR_VAR 0 2
27942: PUSH
27943: LD_INT 22
27945: PUSH
27946: LD_OWVAR 2
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 21
27957: PUSH
27958: LD_INT 1
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PPUSH
27969: CALL_OW 69
27973: ST_TO_ADDR
// if not tmp then
27974: LD_VAR 0 2
27978: NOT
27979: IFFALSE 27983
// exit ;
27981: GO 28070
// un := tmp [ rand ( 1 , tmp ) ] ;
27983: LD_ADDR_VAR 0 1
27987: PUSH
27988: LD_VAR 0 2
27992: PUSH
27993: LD_INT 1
27995: PPUSH
27996: LD_VAR 0 2
28000: PPUSH
28001: CALL_OW 12
28005: ARRAY
28006: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28007: LD_VAR 0 1
28011: PPUSH
28012: LD_INT 0
28014: PPUSH
28015: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28019: LD_VAR 0 1
28023: PPUSH
28024: LD_OWVAR 3
28028: PUSH
28029: LD_VAR 0 1
28033: DIFF
28034: PPUSH
28035: LD_VAR 0 1
28039: PPUSH
28040: CALL_OW 74
28044: PPUSH
28045: CALL_OW 115
// wait ( 0 0$20 ) ;
28049: LD_INT 700
28051: PPUSH
28052: CALL_OW 67
// SetSide ( un , your_side ) ;
28056: LD_VAR 0 1
28060: PPUSH
28061: LD_OWVAR 2
28065: PPUSH
28066: CALL_OW 235
// end ;
28070: PPOPN 2
28072: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28073: LD_EXP 72
28077: PUSH
28078: LD_EXP 105
28082: AND
28083: IFFALSE 28189
28085: GO 28087
28087: DISABLE
28088: LD_INT 0
28090: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28091: LD_ADDR_VAR 0 1
28095: PUSH
28096: LD_INT 22
28098: PUSH
28099: LD_OWVAR 2
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 2
28110: PUSH
28111: LD_INT 30
28113: PUSH
28114: LD_INT 0
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: LD_INT 30
28123: PUSH
28124: LD_INT 1
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: LIST
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PPUSH
28140: CALL_OW 69
28144: ST_TO_ADDR
// if not depot then
28145: LD_VAR 0 1
28149: NOT
28150: IFFALSE 28154
// exit ;
28152: GO 28189
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28154: LD_VAR 0 1
28158: PUSH
28159: LD_INT 1
28161: ARRAY
28162: PPUSH
28163: CALL_OW 250
28167: PPUSH
28168: LD_VAR 0 1
28172: PUSH
28173: LD_INT 1
28175: ARRAY
28176: PPUSH
28177: CALL_OW 251
28181: PPUSH
28182: LD_INT 70
28184: PPUSH
28185: CALL_OW 495
// end ;
28189: PPOPN 1
28191: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28192: LD_EXP 72
28196: PUSH
28197: LD_EXP 106
28201: AND
28202: IFFALSE 28413
28204: GO 28206
28206: DISABLE
28207: LD_INT 0
28209: PPUSH
28210: PPUSH
28211: PPUSH
28212: PPUSH
28213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28214: LD_ADDR_VAR 0 5
28218: PUSH
28219: LD_INT 22
28221: PUSH
28222: LD_OWVAR 2
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 21
28233: PUSH
28234: LD_INT 1
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PPUSH
28245: CALL_OW 69
28249: ST_TO_ADDR
// if not tmp then
28250: LD_VAR 0 5
28254: NOT
28255: IFFALSE 28259
// exit ;
28257: GO 28413
// for i in tmp do
28259: LD_ADDR_VAR 0 1
28263: PUSH
28264: LD_VAR 0 5
28268: PUSH
28269: FOR_IN
28270: IFFALSE 28411
// begin d := rand ( 0 , 5 ) ;
28272: LD_ADDR_VAR 0 4
28276: PUSH
28277: LD_INT 0
28279: PPUSH
28280: LD_INT 5
28282: PPUSH
28283: CALL_OW 12
28287: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28288: LD_ADDR_VAR 0 2
28292: PUSH
28293: LD_VAR 0 1
28297: PPUSH
28298: CALL_OW 250
28302: PPUSH
28303: LD_VAR 0 4
28307: PPUSH
28308: LD_INT 3
28310: PPUSH
28311: LD_INT 12
28313: PPUSH
28314: CALL_OW 12
28318: PPUSH
28319: CALL_OW 272
28323: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28324: LD_ADDR_VAR 0 3
28328: PUSH
28329: LD_VAR 0 1
28333: PPUSH
28334: CALL_OW 251
28338: PPUSH
28339: LD_VAR 0 4
28343: PPUSH
28344: LD_INT 3
28346: PPUSH
28347: LD_INT 12
28349: PPUSH
28350: CALL_OW 12
28354: PPUSH
28355: CALL_OW 273
28359: ST_TO_ADDR
// if ValidHex ( x , y ) then
28360: LD_VAR 0 2
28364: PPUSH
28365: LD_VAR 0 3
28369: PPUSH
28370: CALL_OW 488
28374: IFFALSE 28409
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28376: LD_VAR 0 1
28380: PPUSH
28381: LD_VAR 0 2
28385: PPUSH
28386: LD_VAR 0 3
28390: PPUSH
28391: LD_INT 3
28393: PPUSH
28394: LD_INT 6
28396: PPUSH
28397: CALL_OW 12
28401: PPUSH
28402: LD_INT 1
28404: PPUSH
28405: CALL_OW 483
// end ;
28409: GO 28269
28411: POP
28412: POP
// end ;
28413: PPOPN 5
28415: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28416: LD_EXP 72
28420: PUSH
28421: LD_EXP 107
28425: AND
28426: IFFALSE 28520
28428: GO 28430
28430: DISABLE
28431: LD_INT 0
28433: PPUSH
28434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28435: LD_ADDR_VAR 0 2
28439: PUSH
28440: LD_INT 22
28442: PUSH
28443: LD_OWVAR 2
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 32
28454: PUSH
28455: LD_INT 1
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 21
28464: PUSH
28465: LD_INT 2
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: LIST
28476: PPUSH
28477: CALL_OW 69
28481: ST_TO_ADDR
// if not tmp then
28482: LD_VAR 0 2
28486: NOT
28487: IFFALSE 28491
// exit ;
28489: GO 28520
// for i in tmp do
28491: LD_ADDR_VAR 0 1
28495: PUSH
28496: LD_VAR 0 2
28500: PUSH
28501: FOR_IN
28502: IFFALSE 28518
// SetFuel ( i , 0 ) ;
28504: LD_VAR 0 1
28508: PPUSH
28509: LD_INT 0
28511: PPUSH
28512: CALL_OW 240
28516: GO 28501
28518: POP
28519: POP
// end ;
28520: PPOPN 2
28522: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28523: LD_EXP 72
28527: PUSH
28528: LD_EXP 108
28532: AND
28533: IFFALSE 28599
28535: GO 28537
28537: DISABLE
28538: LD_INT 0
28540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28541: LD_ADDR_VAR 0 1
28545: PUSH
28546: LD_INT 22
28548: PUSH
28549: LD_OWVAR 2
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 30
28560: PUSH
28561: LD_INT 29
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PPUSH
28572: CALL_OW 69
28576: ST_TO_ADDR
// if not tmp then
28577: LD_VAR 0 1
28581: NOT
28582: IFFALSE 28586
// exit ;
28584: GO 28599
// DestroyUnit ( tmp [ 1 ] ) ;
28586: LD_VAR 0 1
28590: PUSH
28591: LD_INT 1
28593: ARRAY
28594: PPUSH
28595: CALL_OW 65
// end ;
28599: PPOPN 1
28601: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28602: LD_EXP 72
28606: PUSH
28607: LD_EXP 110
28611: AND
28612: IFFALSE 28741
28614: GO 28616
28616: DISABLE
28617: LD_INT 0
28619: PPUSH
// begin uc_side := 0 ;
28620: LD_ADDR_OWVAR 20
28624: PUSH
28625: LD_INT 0
28627: ST_TO_ADDR
// uc_nation := nation_arabian ;
28628: LD_ADDR_OWVAR 21
28632: PUSH
28633: LD_INT 2
28635: ST_TO_ADDR
// hc_gallery :=  ;
28636: LD_ADDR_OWVAR 33
28640: PUSH
28641: LD_STRING 
28643: ST_TO_ADDR
// hc_name :=  ;
28644: LD_ADDR_OWVAR 26
28648: PUSH
28649: LD_STRING 
28651: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28652: LD_INT 1
28654: PPUSH
28655: LD_INT 11
28657: PPUSH
28658: LD_INT 10
28660: PPUSH
28661: CALL_OW 380
// un := CreateHuman ;
28665: LD_ADDR_VAR 0 1
28669: PUSH
28670: CALL_OW 44
28674: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28675: LD_VAR 0 1
28679: PPUSH
28680: LD_INT 1
28682: PPUSH
28683: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28687: LD_INT 35
28689: PPUSH
28690: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28694: LD_VAR 0 1
28698: PPUSH
28699: LD_INT 22
28701: PUSH
28702: LD_OWVAR 2
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PPUSH
28711: CALL_OW 69
28715: PPUSH
28716: LD_VAR 0 1
28720: PPUSH
28721: CALL_OW 74
28725: PPUSH
28726: CALL_OW 115
// until IsDead ( un ) ;
28730: LD_VAR 0 1
28734: PPUSH
28735: CALL_OW 301
28739: IFFALSE 28687
// end ;
28741: PPOPN 1
28743: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28744: LD_EXP 72
28748: PUSH
28749: LD_EXP 112
28753: AND
28754: IFFALSE 28766
28756: GO 28758
28758: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28759: LD_STRING earthquake(getX(game), 0, 32)
28761: PPUSH
28762: CALL_OW 559
28766: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28767: LD_EXP 72
28771: PUSH
28772: LD_EXP 113
28776: AND
28777: IFFALSE 28868
28779: GO 28781
28781: DISABLE
28782: LD_INT 0
28784: PPUSH
// begin enable ;
28785: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28786: LD_ADDR_VAR 0 1
28790: PUSH
28791: LD_INT 22
28793: PUSH
28794: LD_OWVAR 2
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 21
28805: PUSH
28806: LD_INT 2
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 33
28815: PUSH
28816: LD_INT 3
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: LIST
28827: PPUSH
28828: CALL_OW 69
28832: ST_TO_ADDR
// if not tmp then
28833: LD_VAR 0 1
28837: NOT
28838: IFFALSE 28842
// exit ;
28840: GO 28868
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28842: LD_VAR 0 1
28846: PUSH
28847: LD_INT 1
28849: PPUSH
28850: LD_VAR 0 1
28854: PPUSH
28855: CALL_OW 12
28859: ARRAY
28860: PPUSH
28861: LD_INT 1
28863: PPUSH
28864: CALL_OW 234
// end ;
28868: PPOPN 1
28870: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28871: LD_EXP 72
28875: PUSH
28876: LD_EXP 114
28880: AND
28881: IFFALSE 29022
28883: GO 28885
28885: DISABLE
28886: LD_INT 0
28888: PPUSH
28889: PPUSH
28890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28891: LD_ADDR_VAR 0 3
28895: PUSH
28896: LD_INT 22
28898: PUSH
28899: LD_OWVAR 2
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 25
28910: PUSH
28911: LD_INT 1
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PPUSH
28922: CALL_OW 69
28926: ST_TO_ADDR
// if not tmp then
28927: LD_VAR 0 3
28931: NOT
28932: IFFALSE 28936
// exit ;
28934: GO 29022
// un := tmp [ rand ( 1 , tmp ) ] ;
28936: LD_ADDR_VAR 0 2
28940: PUSH
28941: LD_VAR 0 3
28945: PUSH
28946: LD_INT 1
28948: PPUSH
28949: LD_VAR 0 3
28953: PPUSH
28954: CALL_OW 12
28958: ARRAY
28959: ST_TO_ADDR
// if Crawls ( un ) then
28960: LD_VAR 0 2
28964: PPUSH
28965: CALL_OW 318
28969: IFFALSE 28980
// ComWalk ( un ) ;
28971: LD_VAR 0 2
28975: PPUSH
28976: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28980: LD_VAR 0 2
28984: PPUSH
28985: LD_INT 9
28987: PPUSH
28988: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28992: LD_INT 28
28994: PPUSH
28995: LD_OWVAR 2
28999: PPUSH
29000: LD_INT 2
29002: PPUSH
29003: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29007: LD_INT 29
29009: PPUSH
29010: LD_OWVAR 2
29014: PPUSH
29015: LD_INT 2
29017: PPUSH
29018: CALL_OW 322
// end ;
29022: PPOPN 3
29024: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29025: LD_EXP 72
29029: PUSH
29030: LD_EXP 115
29034: AND
29035: IFFALSE 29146
29037: GO 29039
29039: DISABLE
29040: LD_INT 0
29042: PPUSH
29043: PPUSH
29044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29045: LD_ADDR_VAR 0 3
29049: PUSH
29050: LD_INT 22
29052: PUSH
29053: LD_OWVAR 2
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 25
29064: PUSH
29065: LD_INT 1
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PPUSH
29076: CALL_OW 69
29080: ST_TO_ADDR
// if not tmp then
29081: LD_VAR 0 3
29085: NOT
29086: IFFALSE 29090
// exit ;
29088: GO 29146
// un := tmp [ rand ( 1 , tmp ) ] ;
29090: LD_ADDR_VAR 0 2
29094: PUSH
29095: LD_VAR 0 3
29099: PUSH
29100: LD_INT 1
29102: PPUSH
29103: LD_VAR 0 3
29107: PPUSH
29108: CALL_OW 12
29112: ARRAY
29113: ST_TO_ADDR
// if Crawls ( un ) then
29114: LD_VAR 0 2
29118: PPUSH
29119: CALL_OW 318
29123: IFFALSE 29134
// ComWalk ( un ) ;
29125: LD_VAR 0 2
29129: PPUSH
29130: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29134: LD_VAR 0 2
29138: PPUSH
29139: LD_INT 8
29141: PPUSH
29142: CALL_OW 336
// end ;
29146: PPOPN 3
29148: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29149: LD_EXP 72
29153: PUSH
29154: LD_EXP 116
29158: AND
29159: IFFALSE 29303
29161: GO 29163
29163: DISABLE
29164: LD_INT 0
29166: PPUSH
29167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29168: LD_ADDR_VAR 0 2
29172: PUSH
29173: LD_INT 22
29175: PUSH
29176: LD_OWVAR 2
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 21
29187: PUSH
29188: LD_INT 2
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 2
29197: PUSH
29198: LD_INT 34
29200: PUSH
29201: LD_INT 12
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 34
29210: PUSH
29211: LD_INT 51
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: LD_INT 34
29220: PUSH
29221: LD_INT 32
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: LIST
29238: PPUSH
29239: CALL_OW 69
29243: ST_TO_ADDR
// if not tmp then
29244: LD_VAR 0 2
29248: NOT
29249: IFFALSE 29253
// exit ;
29251: GO 29303
// for i in tmp do
29253: LD_ADDR_VAR 0 1
29257: PUSH
29258: LD_VAR 0 2
29262: PUSH
29263: FOR_IN
29264: IFFALSE 29301
// if GetCargo ( i , mat_artifact ) = 0 then
29266: LD_VAR 0 1
29270: PPUSH
29271: LD_INT 4
29273: PPUSH
29274: CALL_OW 289
29278: PUSH
29279: LD_INT 0
29281: EQUAL
29282: IFFALSE 29299
// SetCargo ( i , mat_siberit , 100 ) ;
29284: LD_VAR 0 1
29288: PPUSH
29289: LD_INT 3
29291: PPUSH
29292: LD_INT 100
29294: PPUSH
29295: CALL_OW 290
29299: GO 29263
29301: POP
29302: POP
// end ;
29303: PPOPN 2
29305: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29306: LD_EXP 72
29310: PUSH
29311: LD_EXP 117
29315: AND
29316: IFFALSE 29499
29318: GO 29320
29320: DISABLE
29321: LD_INT 0
29323: PPUSH
29324: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29325: LD_ADDR_VAR 0 2
29329: PUSH
29330: LD_INT 22
29332: PUSH
29333: LD_OWVAR 2
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PPUSH
29342: CALL_OW 69
29346: ST_TO_ADDR
// if not tmp then
29347: LD_VAR 0 2
29351: NOT
29352: IFFALSE 29356
// exit ;
29354: GO 29499
// for i := 1 to 2 do
29356: LD_ADDR_VAR 0 1
29360: PUSH
29361: DOUBLE
29362: LD_INT 1
29364: DEC
29365: ST_TO_ADDR
29366: LD_INT 2
29368: PUSH
29369: FOR_TO
29370: IFFALSE 29497
// begin uc_side := your_side ;
29372: LD_ADDR_OWVAR 20
29376: PUSH
29377: LD_OWVAR 2
29381: ST_TO_ADDR
// uc_nation := nation_american ;
29382: LD_ADDR_OWVAR 21
29386: PUSH
29387: LD_INT 1
29389: ST_TO_ADDR
// vc_chassis := us_morphling ;
29390: LD_ADDR_OWVAR 37
29394: PUSH
29395: LD_INT 5
29397: ST_TO_ADDR
// vc_engine := engine_siberite ;
29398: LD_ADDR_OWVAR 39
29402: PUSH
29403: LD_INT 3
29405: ST_TO_ADDR
// vc_control := control_computer ;
29406: LD_ADDR_OWVAR 38
29410: PUSH
29411: LD_INT 3
29413: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29414: LD_ADDR_OWVAR 40
29418: PUSH
29419: LD_INT 10
29421: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29422: LD_VAR 0 2
29426: PUSH
29427: LD_INT 1
29429: ARRAY
29430: PPUSH
29431: CALL_OW 310
29435: NOT
29436: IFFALSE 29483
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29438: CALL_OW 45
29442: PPUSH
29443: LD_VAR 0 2
29447: PUSH
29448: LD_INT 1
29450: ARRAY
29451: PPUSH
29452: CALL_OW 250
29456: PPUSH
29457: LD_VAR 0 2
29461: PUSH
29462: LD_INT 1
29464: ARRAY
29465: PPUSH
29466: CALL_OW 251
29470: PPUSH
29471: LD_INT 12
29473: PPUSH
29474: LD_INT 1
29476: PPUSH
29477: CALL_OW 50
29481: GO 29495
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29483: CALL_OW 45
29487: PPUSH
29488: LD_INT 1
29490: PPUSH
29491: CALL_OW 51
// end ;
29495: GO 29369
29497: POP
29498: POP
// end ;
29499: PPOPN 2
29501: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29502: LD_EXP 72
29506: PUSH
29507: LD_EXP 118
29511: AND
29512: IFFALSE 29734
29514: GO 29516
29516: DISABLE
29517: LD_INT 0
29519: PPUSH
29520: PPUSH
29521: PPUSH
29522: PPUSH
29523: PPUSH
29524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29525: LD_ADDR_VAR 0 6
29529: PUSH
29530: LD_INT 22
29532: PUSH
29533: LD_OWVAR 2
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: LD_INT 21
29544: PUSH
29545: LD_INT 1
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 3
29554: PUSH
29555: LD_INT 23
29557: PUSH
29558: LD_INT 0
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: LIST
29573: PPUSH
29574: CALL_OW 69
29578: ST_TO_ADDR
// if not tmp then
29579: LD_VAR 0 6
29583: NOT
29584: IFFALSE 29588
// exit ;
29586: GO 29734
// s1 := rand ( 1 , 4 ) ;
29588: LD_ADDR_VAR 0 2
29592: PUSH
29593: LD_INT 1
29595: PPUSH
29596: LD_INT 4
29598: PPUSH
29599: CALL_OW 12
29603: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29604: LD_ADDR_VAR 0 4
29608: PUSH
29609: LD_VAR 0 6
29613: PUSH
29614: LD_INT 1
29616: ARRAY
29617: PPUSH
29618: LD_VAR 0 2
29622: PPUSH
29623: CALL_OW 259
29627: ST_TO_ADDR
// if s1 = 1 then
29628: LD_VAR 0 2
29632: PUSH
29633: LD_INT 1
29635: EQUAL
29636: IFFALSE 29656
// s2 := rand ( 2 , 4 ) else
29638: LD_ADDR_VAR 0 3
29642: PUSH
29643: LD_INT 2
29645: PPUSH
29646: LD_INT 4
29648: PPUSH
29649: CALL_OW 12
29653: ST_TO_ADDR
29654: GO 29664
// s2 := 1 ;
29656: LD_ADDR_VAR 0 3
29660: PUSH
29661: LD_INT 1
29663: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29664: LD_ADDR_VAR 0 5
29668: PUSH
29669: LD_VAR 0 6
29673: PUSH
29674: LD_INT 1
29676: ARRAY
29677: PPUSH
29678: LD_VAR 0 3
29682: PPUSH
29683: CALL_OW 259
29687: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29688: LD_VAR 0 6
29692: PUSH
29693: LD_INT 1
29695: ARRAY
29696: PPUSH
29697: LD_VAR 0 2
29701: PPUSH
29702: LD_VAR 0 5
29706: PPUSH
29707: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29711: LD_VAR 0 6
29715: PUSH
29716: LD_INT 1
29718: ARRAY
29719: PPUSH
29720: LD_VAR 0 3
29724: PPUSH
29725: LD_VAR 0 4
29729: PPUSH
29730: CALL_OW 237
// end ;
29734: PPOPN 6
29736: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29737: LD_EXP 72
29741: PUSH
29742: LD_EXP 119
29746: AND
29747: IFFALSE 29826
29749: GO 29751
29751: DISABLE
29752: LD_INT 0
29754: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29755: LD_ADDR_VAR 0 1
29759: PUSH
29760: LD_INT 22
29762: PUSH
29763: LD_OWVAR 2
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 30
29774: PUSH
29775: LD_INT 3
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PPUSH
29786: CALL_OW 69
29790: ST_TO_ADDR
// if not tmp then
29791: LD_VAR 0 1
29795: NOT
29796: IFFALSE 29800
// exit ;
29798: GO 29826
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29800: LD_VAR 0 1
29804: PUSH
29805: LD_INT 1
29807: PPUSH
29808: LD_VAR 0 1
29812: PPUSH
29813: CALL_OW 12
29817: ARRAY
29818: PPUSH
29819: LD_INT 1
29821: PPUSH
29822: CALL_OW 234
// end ;
29826: PPOPN 1
29828: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29829: LD_EXP 72
29833: PUSH
29834: LD_EXP 120
29838: AND
29839: IFFALSE 29951
29841: GO 29843
29843: DISABLE
29844: LD_INT 0
29846: PPUSH
29847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29848: LD_ADDR_VAR 0 2
29852: PUSH
29853: LD_INT 22
29855: PUSH
29856: LD_OWVAR 2
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 2
29867: PUSH
29868: LD_INT 30
29870: PUSH
29871: LD_INT 27
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 30
29880: PUSH
29881: LD_INT 26
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 30
29890: PUSH
29891: LD_INT 28
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PPUSH
29908: CALL_OW 69
29912: ST_TO_ADDR
// if not tmp then
29913: LD_VAR 0 2
29917: NOT
29918: IFFALSE 29922
// exit ;
29920: GO 29951
// for i in tmp do
29922: LD_ADDR_VAR 0 1
29926: PUSH
29927: LD_VAR 0 2
29931: PUSH
29932: FOR_IN
29933: IFFALSE 29949
// SetLives ( i , 1 ) ;
29935: LD_VAR 0 1
29939: PPUSH
29940: LD_INT 1
29942: PPUSH
29943: CALL_OW 234
29947: GO 29932
29949: POP
29950: POP
// end ;
29951: PPOPN 2
29953: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29954: LD_EXP 72
29958: PUSH
29959: LD_EXP 121
29963: AND
29964: IFFALSE 30251
29966: GO 29968
29968: DISABLE
29969: LD_INT 0
29971: PPUSH
29972: PPUSH
29973: PPUSH
// begin i := rand ( 1 , 7 ) ;
29974: LD_ADDR_VAR 0 1
29978: PUSH
29979: LD_INT 1
29981: PPUSH
29982: LD_INT 7
29984: PPUSH
29985: CALL_OW 12
29989: ST_TO_ADDR
// case i of 1 :
29990: LD_VAR 0 1
29994: PUSH
29995: LD_INT 1
29997: DOUBLE
29998: EQUAL
29999: IFTRUE 30003
30001: GO 30013
30003: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30004: LD_STRING earthquake(getX(game), 0, 32)
30006: PPUSH
30007: CALL_OW 559
30011: GO 30251
30013: LD_INT 2
30015: DOUBLE
30016: EQUAL
30017: IFTRUE 30021
30019: GO 30035
30021: POP
// begin ToLua ( displayStucuk(); ) ;
30022: LD_STRING displayStucuk();
30024: PPUSH
30025: CALL_OW 559
// ResetFog ;
30029: CALL_OW 335
// end ; 3 :
30033: GO 30251
30035: LD_INT 3
30037: DOUBLE
30038: EQUAL
30039: IFTRUE 30043
30041: GO 30147
30043: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30044: LD_ADDR_VAR 0 2
30048: PUSH
30049: LD_INT 22
30051: PUSH
30052: LD_OWVAR 2
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 25
30063: PUSH
30064: LD_INT 1
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PPUSH
30075: CALL_OW 69
30079: ST_TO_ADDR
// if not tmp then
30080: LD_VAR 0 2
30084: NOT
30085: IFFALSE 30089
// exit ;
30087: GO 30251
// un := tmp [ rand ( 1 , tmp ) ] ;
30089: LD_ADDR_VAR 0 3
30093: PUSH
30094: LD_VAR 0 2
30098: PUSH
30099: LD_INT 1
30101: PPUSH
30102: LD_VAR 0 2
30106: PPUSH
30107: CALL_OW 12
30111: ARRAY
30112: ST_TO_ADDR
// if Crawls ( un ) then
30113: LD_VAR 0 3
30117: PPUSH
30118: CALL_OW 318
30122: IFFALSE 30133
// ComWalk ( un ) ;
30124: LD_VAR 0 3
30128: PPUSH
30129: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30133: LD_VAR 0 3
30137: PPUSH
30138: LD_INT 8
30140: PPUSH
30141: CALL_OW 336
// end ; 4 :
30145: GO 30251
30147: LD_INT 4
30149: DOUBLE
30150: EQUAL
30151: IFTRUE 30155
30153: GO 30229
30155: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30156: LD_ADDR_VAR 0 2
30160: PUSH
30161: LD_INT 22
30163: PUSH
30164: LD_OWVAR 2
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 30
30175: PUSH
30176: LD_INT 29
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PPUSH
30187: CALL_OW 69
30191: ST_TO_ADDR
// if not tmp then
30192: LD_VAR 0 2
30196: NOT
30197: IFFALSE 30201
// exit ;
30199: GO 30251
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30201: LD_VAR 0 2
30205: PUSH
30206: LD_INT 1
30208: ARRAY
30209: PPUSH
30210: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30214: LD_VAR 0 2
30218: PUSH
30219: LD_INT 1
30221: ARRAY
30222: PPUSH
30223: CALL_OW 65
// end ; 5 .. 7 :
30227: GO 30251
30229: LD_INT 5
30231: DOUBLE
30232: GREATEREQUAL
30233: IFFALSE 30241
30235: LD_INT 7
30237: DOUBLE
30238: LESSEQUAL
30239: IFTRUE 30243
30241: GO 30250
30243: POP
// StreamSibBomb ; end ;
30244: CALL 26488 0 0
30248: GO 30251
30250: POP
// end ;
30251: PPOPN 3
30253: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30254: LD_EXP 72
30258: PUSH
30259: LD_EXP 122
30263: AND
30264: IFFALSE 30420
30266: GO 30268
30268: DISABLE
30269: LD_INT 0
30271: PPUSH
30272: PPUSH
30273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30274: LD_ADDR_VAR 0 2
30278: PUSH
30279: LD_INT 81
30281: PUSH
30282: LD_OWVAR 2
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 2
30293: PUSH
30294: LD_INT 21
30296: PUSH
30297: LD_INT 1
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: LD_INT 21
30306: PUSH
30307: LD_INT 2
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: LIST
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PPUSH
30323: CALL_OW 69
30327: ST_TO_ADDR
// if not tmp then
30328: LD_VAR 0 2
30332: NOT
30333: IFFALSE 30337
// exit ;
30335: GO 30420
// p := 0 ;
30337: LD_ADDR_VAR 0 3
30341: PUSH
30342: LD_INT 0
30344: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30345: LD_INT 35
30347: PPUSH
30348: CALL_OW 67
// p := p + 1 ;
30352: LD_ADDR_VAR 0 3
30356: PUSH
30357: LD_VAR 0 3
30361: PUSH
30362: LD_INT 1
30364: PLUS
30365: ST_TO_ADDR
// for i in tmp do
30366: LD_ADDR_VAR 0 1
30370: PUSH
30371: LD_VAR 0 2
30375: PUSH
30376: FOR_IN
30377: IFFALSE 30408
// if GetLives ( i ) < 1000 then
30379: LD_VAR 0 1
30383: PPUSH
30384: CALL_OW 256
30388: PUSH
30389: LD_INT 1000
30391: LESS
30392: IFFALSE 30406
// SetLives ( i , 1000 ) ;
30394: LD_VAR 0 1
30398: PPUSH
30399: LD_INT 1000
30401: PPUSH
30402: CALL_OW 234
30406: GO 30376
30408: POP
30409: POP
// until p > 20 ;
30410: LD_VAR 0 3
30414: PUSH
30415: LD_INT 20
30417: GREATER
30418: IFFALSE 30345
// end ;
30420: PPOPN 3
30422: END
// every 0 0$1 trigger StreamModeActive and sTime do
30423: LD_EXP 72
30427: PUSH
30428: LD_EXP 123
30432: AND
30433: IFFALSE 30468
30435: GO 30437
30437: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30438: LD_INT 28
30440: PPUSH
30441: LD_OWVAR 2
30445: PPUSH
30446: LD_INT 2
30448: PPUSH
30449: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30453: LD_INT 30
30455: PPUSH
30456: LD_OWVAR 2
30460: PPUSH
30461: LD_INT 2
30463: PPUSH
30464: CALL_OW 322
// end ;
30468: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30469: LD_EXP 72
30473: PUSH
30474: LD_EXP 124
30478: AND
30479: IFFALSE 30600
30481: GO 30483
30483: DISABLE
30484: LD_INT 0
30486: PPUSH
30487: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30488: LD_ADDR_VAR 0 2
30492: PUSH
30493: LD_INT 22
30495: PUSH
30496: LD_OWVAR 2
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 21
30507: PUSH
30508: LD_INT 1
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 3
30517: PUSH
30518: LD_INT 23
30520: PUSH
30521: LD_INT 0
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: LIST
30536: PPUSH
30537: CALL_OW 69
30541: ST_TO_ADDR
// if not tmp then
30542: LD_VAR 0 2
30546: NOT
30547: IFFALSE 30551
// exit ;
30549: GO 30600
// for i in tmp do
30551: LD_ADDR_VAR 0 1
30555: PUSH
30556: LD_VAR 0 2
30560: PUSH
30561: FOR_IN
30562: IFFALSE 30598
// begin if Crawls ( i ) then
30564: LD_VAR 0 1
30568: PPUSH
30569: CALL_OW 318
30573: IFFALSE 30584
// ComWalk ( i ) ;
30575: LD_VAR 0 1
30579: PPUSH
30580: CALL_OW 138
// SetClass ( i , 2 ) ;
30584: LD_VAR 0 1
30588: PPUSH
30589: LD_INT 2
30591: PPUSH
30592: CALL_OW 336
// end ;
30596: GO 30561
30598: POP
30599: POP
// end ;
30600: PPOPN 2
30602: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30603: LD_EXP 72
30607: PUSH
30608: LD_EXP 125
30612: AND
30613: IFFALSE 30901
30615: GO 30617
30617: DISABLE
30618: LD_INT 0
30620: PPUSH
30621: PPUSH
30622: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30623: LD_OWVAR 2
30627: PPUSH
30628: LD_INT 9
30630: PPUSH
30631: LD_INT 1
30633: PPUSH
30634: LD_INT 1
30636: PPUSH
30637: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30641: LD_INT 9
30643: PPUSH
30644: LD_OWVAR 2
30648: PPUSH
30649: CALL_OW 343
// uc_side := 9 ;
30653: LD_ADDR_OWVAR 20
30657: PUSH
30658: LD_INT 9
30660: ST_TO_ADDR
// uc_nation := 2 ;
30661: LD_ADDR_OWVAR 21
30665: PUSH
30666: LD_INT 2
30668: ST_TO_ADDR
// hc_name := Dark Warrior ;
30669: LD_ADDR_OWVAR 26
30673: PUSH
30674: LD_STRING Dark Warrior
30676: ST_TO_ADDR
// hc_gallery :=  ;
30677: LD_ADDR_OWVAR 33
30681: PUSH
30682: LD_STRING 
30684: ST_TO_ADDR
// hc_noskilllimit := true ;
30685: LD_ADDR_OWVAR 76
30689: PUSH
30690: LD_INT 1
30692: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30693: LD_ADDR_OWVAR 31
30697: PUSH
30698: LD_INT 30
30700: PUSH
30701: LD_INT 30
30703: PUSH
30704: LD_INT 30
30706: PUSH
30707: LD_INT 30
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: ST_TO_ADDR
// un := CreateHuman ;
30716: LD_ADDR_VAR 0 3
30720: PUSH
30721: CALL_OW 44
30725: ST_TO_ADDR
// hc_noskilllimit := false ;
30726: LD_ADDR_OWVAR 76
30730: PUSH
30731: LD_INT 0
30733: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30734: LD_VAR 0 3
30738: PPUSH
30739: LD_INT 1
30741: PPUSH
30742: CALL_OW 51
// ToLua ( playRanger() ) ;
30746: LD_STRING playRanger()
30748: PPUSH
30749: CALL_OW 559
// p := 0 ;
30753: LD_ADDR_VAR 0 2
30757: PUSH
30758: LD_INT 0
30760: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30761: LD_INT 35
30763: PPUSH
30764: CALL_OW 67
// p := p + 1 ;
30768: LD_ADDR_VAR 0 2
30772: PUSH
30773: LD_VAR 0 2
30777: PUSH
30778: LD_INT 1
30780: PLUS
30781: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30782: LD_VAR 0 3
30786: PPUSH
30787: CALL_OW 256
30791: PUSH
30792: LD_INT 1000
30794: LESS
30795: IFFALSE 30809
// SetLives ( un , 1000 ) ;
30797: LD_VAR 0 3
30801: PPUSH
30802: LD_INT 1000
30804: PPUSH
30805: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30809: LD_VAR 0 3
30813: PPUSH
30814: LD_INT 81
30816: PUSH
30817: LD_OWVAR 2
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 91
30828: PUSH
30829: LD_VAR 0 3
30833: PUSH
30834: LD_INT 30
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: LIST
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PPUSH
30846: CALL_OW 69
30850: PPUSH
30851: LD_VAR 0 3
30855: PPUSH
30856: CALL_OW 74
30860: PPUSH
30861: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30865: LD_VAR 0 2
30869: PUSH
30870: LD_INT 80
30872: GREATER
30873: PUSH
30874: LD_VAR 0 3
30878: PPUSH
30879: CALL_OW 301
30883: OR
30884: IFFALSE 30761
// if un then
30886: LD_VAR 0 3
30890: IFFALSE 30901
// RemoveUnit ( un ) ;
30892: LD_VAR 0 3
30896: PPUSH
30897: CALL_OW 64
// end ;
30901: PPOPN 3
30903: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30904: LD_EXP 126
30908: IFFALSE 31024
30910: GO 30912
30912: DISABLE
30913: LD_INT 0
30915: PPUSH
30916: PPUSH
30917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30918: LD_ADDR_VAR 0 2
30922: PUSH
30923: LD_INT 81
30925: PUSH
30926: LD_OWVAR 2
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 21
30937: PUSH
30938: LD_INT 1
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PPUSH
30949: CALL_OW 69
30953: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30954: LD_STRING playComputer()
30956: PPUSH
30957: CALL_OW 559
// if not tmp then
30961: LD_VAR 0 2
30965: NOT
30966: IFFALSE 30970
// exit ;
30968: GO 31024
// for i in tmp do
30970: LD_ADDR_VAR 0 1
30974: PUSH
30975: LD_VAR 0 2
30979: PUSH
30980: FOR_IN
30981: IFFALSE 31022
// for j := 1 to 4 do
30983: LD_ADDR_VAR 0 3
30987: PUSH
30988: DOUBLE
30989: LD_INT 1
30991: DEC
30992: ST_TO_ADDR
30993: LD_INT 4
30995: PUSH
30996: FOR_TO
30997: IFFALSE 31018
// SetSkill ( i , j , 10 ) ;
30999: LD_VAR 0 1
31003: PPUSH
31004: LD_VAR 0 3
31008: PPUSH
31009: LD_INT 10
31011: PPUSH
31012: CALL_OW 237
31016: GO 30996
31018: POP
31019: POP
31020: GO 30980
31022: POP
31023: POP
// end ;
31024: PPOPN 3
31026: END
// every 0 0$1 trigger s30 do var i , tmp ;
31027: LD_EXP 127
31031: IFFALSE 31100
31033: GO 31035
31035: DISABLE
31036: LD_INT 0
31038: PPUSH
31039: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31040: LD_ADDR_VAR 0 2
31044: PUSH
31045: LD_INT 22
31047: PUSH
31048: LD_OWVAR 2
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PPUSH
31057: CALL_OW 69
31061: ST_TO_ADDR
// if not tmp then
31062: LD_VAR 0 2
31066: NOT
31067: IFFALSE 31071
// exit ;
31069: GO 31100
// for i in tmp do
31071: LD_ADDR_VAR 0 1
31075: PUSH
31076: LD_VAR 0 2
31080: PUSH
31081: FOR_IN
31082: IFFALSE 31098
// SetLives ( i , 300 ) ;
31084: LD_VAR 0 1
31088: PPUSH
31089: LD_INT 300
31091: PPUSH
31092: CALL_OW 234
31096: GO 31081
31098: POP
31099: POP
// end ;
31100: PPOPN 2
31102: END
// every 0 0$1 trigger s60 do var i , tmp ;
31103: LD_EXP 128
31107: IFFALSE 31176
31109: GO 31111
31111: DISABLE
31112: LD_INT 0
31114: PPUSH
31115: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31116: LD_ADDR_VAR 0 2
31120: PUSH
31121: LD_INT 22
31123: PUSH
31124: LD_OWVAR 2
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PPUSH
31133: CALL_OW 69
31137: ST_TO_ADDR
// if not tmp then
31138: LD_VAR 0 2
31142: NOT
31143: IFFALSE 31147
// exit ;
31145: GO 31176
// for i in tmp do
31147: LD_ADDR_VAR 0 1
31151: PUSH
31152: LD_VAR 0 2
31156: PUSH
31157: FOR_IN
31158: IFFALSE 31174
// SetLives ( i , 600 ) ;
31160: LD_VAR 0 1
31164: PPUSH
31165: LD_INT 600
31167: PPUSH
31168: CALL_OW 234
31172: GO 31157
31174: POP
31175: POP
// end ;
31176: PPOPN 2
31178: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31179: LD_INT 0
31181: PPUSH
// case cmd of 301 :
31182: LD_VAR 0 1
31186: PUSH
31187: LD_INT 301
31189: DOUBLE
31190: EQUAL
31191: IFTRUE 31195
31193: GO 31227
31195: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31196: LD_VAR 0 6
31200: PPUSH
31201: LD_VAR 0 7
31205: PPUSH
31206: LD_VAR 0 8
31210: PPUSH
31211: LD_VAR 0 4
31215: PPUSH
31216: LD_VAR 0 5
31220: PPUSH
31221: CALL 32428 0 5
31225: GO 31348
31227: LD_INT 302
31229: DOUBLE
31230: EQUAL
31231: IFTRUE 31235
31233: GO 31272
31235: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31236: LD_VAR 0 6
31240: PPUSH
31241: LD_VAR 0 7
31245: PPUSH
31246: LD_VAR 0 8
31250: PPUSH
31251: LD_VAR 0 9
31255: PPUSH
31256: LD_VAR 0 4
31260: PPUSH
31261: LD_VAR 0 5
31265: PPUSH
31266: CALL 32519 0 6
31270: GO 31348
31272: LD_INT 303
31274: DOUBLE
31275: EQUAL
31276: IFTRUE 31280
31278: GO 31317
31280: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31281: LD_VAR 0 6
31285: PPUSH
31286: LD_VAR 0 7
31290: PPUSH
31291: LD_VAR 0 8
31295: PPUSH
31296: LD_VAR 0 9
31300: PPUSH
31301: LD_VAR 0 4
31305: PPUSH
31306: LD_VAR 0 5
31310: PPUSH
31311: CALL 31353 0 6
31315: GO 31348
31317: LD_INT 304
31319: DOUBLE
31320: EQUAL
31321: IFTRUE 31325
31323: GO 31347
31325: POP
// hHackTeleport ( unit , x , y ) ; end ;
31326: LD_VAR 0 2
31330: PPUSH
31331: LD_VAR 0 4
31335: PPUSH
31336: LD_VAR 0 5
31340: PPUSH
31341: CALL 33112 0 3
31345: GO 31348
31347: POP
// end ;
31348: LD_VAR 0 12
31352: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31353: LD_INT 0
31355: PPUSH
31356: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31357: LD_VAR 0 1
31361: PUSH
31362: LD_INT 1
31364: LESS
31365: PUSH
31366: LD_VAR 0 1
31370: PUSH
31371: LD_INT 3
31373: GREATER
31374: OR
31375: PUSH
31376: LD_VAR 0 5
31380: PPUSH
31381: LD_VAR 0 6
31385: PPUSH
31386: CALL_OW 428
31390: OR
31391: IFFALSE 31395
// exit ;
31393: GO 32115
// uc_side := your_side ;
31395: LD_ADDR_OWVAR 20
31399: PUSH
31400: LD_OWVAR 2
31404: ST_TO_ADDR
// uc_nation := nation ;
31405: LD_ADDR_OWVAR 21
31409: PUSH
31410: LD_VAR 0 1
31414: ST_TO_ADDR
// bc_level = 1 ;
31415: LD_ADDR_OWVAR 43
31419: PUSH
31420: LD_INT 1
31422: ST_TO_ADDR
// case btype of 1 :
31423: LD_VAR 0 2
31427: PUSH
31428: LD_INT 1
31430: DOUBLE
31431: EQUAL
31432: IFTRUE 31436
31434: GO 31447
31436: POP
// bc_type := b_depot ; 2 :
31437: LD_ADDR_OWVAR 42
31441: PUSH
31442: LD_INT 0
31444: ST_TO_ADDR
31445: GO 32059
31447: LD_INT 2
31449: DOUBLE
31450: EQUAL
31451: IFTRUE 31455
31453: GO 31466
31455: POP
// bc_type := b_warehouse ; 3 :
31456: LD_ADDR_OWVAR 42
31460: PUSH
31461: LD_INT 1
31463: ST_TO_ADDR
31464: GO 32059
31466: LD_INT 3
31468: DOUBLE
31469: EQUAL
31470: IFTRUE 31474
31472: GO 31485
31474: POP
// bc_type := b_lab ; 4 .. 9 :
31475: LD_ADDR_OWVAR 42
31479: PUSH
31480: LD_INT 6
31482: ST_TO_ADDR
31483: GO 32059
31485: LD_INT 4
31487: DOUBLE
31488: GREATEREQUAL
31489: IFFALSE 31497
31491: LD_INT 9
31493: DOUBLE
31494: LESSEQUAL
31495: IFTRUE 31499
31497: GO 31551
31499: POP
// begin bc_type := b_lab_half ;
31500: LD_ADDR_OWVAR 42
31504: PUSH
31505: LD_INT 7
31507: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31508: LD_ADDR_OWVAR 44
31512: PUSH
31513: LD_INT 10
31515: PUSH
31516: LD_INT 11
31518: PUSH
31519: LD_INT 12
31521: PUSH
31522: LD_INT 15
31524: PUSH
31525: LD_INT 14
31527: PUSH
31528: LD_INT 13
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: PUSH
31539: LD_VAR 0 2
31543: PUSH
31544: LD_INT 3
31546: MINUS
31547: ARRAY
31548: ST_TO_ADDR
// end ; 10 .. 13 :
31549: GO 32059
31551: LD_INT 10
31553: DOUBLE
31554: GREATEREQUAL
31555: IFFALSE 31563
31557: LD_INT 13
31559: DOUBLE
31560: LESSEQUAL
31561: IFTRUE 31565
31563: GO 31642
31565: POP
// begin bc_type := b_lab_full ;
31566: LD_ADDR_OWVAR 42
31570: PUSH
31571: LD_INT 8
31573: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31574: LD_ADDR_OWVAR 44
31578: PUSH
31579: LD_INT 10
31581: PUSH
31582: LD_INT 12
31584: PUSH
31585: LD_INT 14
31587: PUSH
31588: LD_INT 13
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: PUSH
31597: LD_VAR 0 2
31601: PUSH
31602: LD_INT 9
31604: MINUS
31605: ARRAY
31606: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31607: LD_ADDR_OWVAR 45
31611: PUSH
31612: LD_INT 11
31614: PUSH
31615: LD_INT 15
31617: PUSH
31618: LD_INT 12
31620: PUSH
31621: LD_INT 15
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: PUSH
31630: LD_VAR 0 2
31634: PUSH
31635: LD_INT 9
31637: MINUS
31638: ARRAY
31639: ST_TO_ADDR
// end ; 14 :
31640: GO 32059
31642: LD_INT 14
31644: DOUBLE
31645: EQUAL
31646: IFTRUE 31650
31648: GO 31661
31650: POP
// bc_type := b_workshop ; 15 :
31651: LD_ADDR_OWVAR 42
31655: PUSH
31656: LD_INT 2
31658: ST_TO_ADDR
31659: GO 32059
31661: LD_INT 15
31663: DOUBLE
31664: EQUAL
31665: IFTRUE 31669
31667: GO 31680
31669: POP
// bc_type := b_factory ; 16 :
31670: LD_ADDR_OWVAR 42
31674: PUSH
31675: LD_INT 3
31677: ST_TO_ADDR
31678: GO 32059
31680: LD_INT 16
31682: DOUBLE
31683: EQUAL
31684: IFTRUE 31688
31686: GO 31699
31688: POP
// bc_type := b_ext_gun ; 17 :
31689: LD_ADDR_OWVAR 42
31693: PUSH
31694: LD_INT 17
31696: ST_TO_ADDR
31697: GO 32059
31699: LD_INT 17
31701: DOUBLE
31702: EQUAL
31703: IFTRUE 31707
31705: GO 31735
31707: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31708: LD_ADDR_OWVAR 42
31712: PUSH
31713: LD_INT 19
31715: PUSH
31716: LD_INT 23
31718: PUSH
31719: LD_INT 19
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: LIST
31726: PUSH
31727: LD_VAR 0 1
31731: ARRAY
31732: ST_TO_ADDR
31733: GO 32059
31735: LD_INT 18
31737: DOUBLE
31738: EQUAL
31739: IFTRUE 31743
31741: GO 31754
31743: POP
// bc_type := b_ext_radar ; 19 :
31744: LD_ADDR_OWVAR 42
31748: PUSH
31749: LD_INT 20
31751: ST_TO_ADDR
31752: GO 32059
31754: LD_INT 19
31756: DOUBLE
31757: EQUAL
31758: IFTRUE 31762
31760: GO 31773
31762: POP
// bc_type := b_ext_radio ; 20 :
31763: LD_ADDR_OWVAR 42
31767: PUSH
31768: LD_INT 22
31770: ST_TO_ADDR
31771: GO 32059
31773: LD_INT 20
31775: DOUBLE
31776: EQUAL
31777: IFTRUE 31781
31779: GO 31792
31781: POP
// bc_type := b_ext_siberium ; 21 :
31782: LD_ADDR_OWVAR 42
31786: PUSH
31787: LD_INT 21
31789: ST_TO_ADDR
31790: GO 32059
31792: LD_INT 21
31794: DOUBLE
31795: EQUAL
31796: IFTRUE 31800
31798: GO 31811
31800: POP
// bc_type := b_ext_computer ; 22 :
31801: LD_ADDR_OWVAR 42
31805: PUSH
31806: LD_INT 24
31808: ST_TO_ADDR
31809: GO 32059
31811: LD_INT 22
31813: DOUBLE
31814: EQUAL
31815: IFTRUE 31819
31817: GO 31830
31819: POP
// bc_type := b_ext_track ; 23 :
31820: LD_ADDR_OWVAR 42
31824: PUSH
31825: LD_INT 16
31827: ST_TO_ADDR
31828: GO 32059
31830: LD_INT 23
31832: DOUBLE
31833: EQUAL
31834: IFTRUE 31838
31836: GO 31849
31838: POP
// bc_type := b_ext_laser ; 24 :
31839: LD_ADDR_OWVAR 42
31843: PUSH
31844: LD_INT 25
31846: ST_TO_ADDR
31847: GO 32059
31849: LD_INT 24
31851: DOUBLE
31852: EQUAL
31853: IFTRUE 31857
31855: GO 31868
31857: POP
// bc_type := b_control_tower ; 25 :
31858: LD_ADDR_OWVAR 42
31862: PUSH
31863: LD_INT 36
31865: ST_TO_ADDR
31866: GO 32059
31868: LD_INT 25
31870: DOUBLE
31871: EQUAL
31872: IFTRUE 31876
31874: GO 31887
31876: POP
// bc_type := b_breastwork ; 26 :
31877: LD_ADDR_OWVAR 42
31881: PUSH
31882: LD_INT 31
31884: ST_TO_ADDR
31885: GO 32059
31887: LD_INT 26
31889: DOUBLE
31890: EQUAL
31891: IFTRUE 31895
31893: GO 31906
31895: POP
// bc_type := b_bunker ; 27 :
31896: LD_ADDR_OWVAR 42
31900: PUSH
31901: LD_INT 32
31903: ST_TO_ADDR
31904: GO 32059
31906: LD_INT 27
31908: DOUBLE
31909: EQUAL
31910: IFTRUE 31914
31912: GO 31925
31914: POP
// bc_type := b_turret ; 28 :
31915: LD_ADDR_OWVAR 42
31919: PUSH
31920: LD_INT 33
31922: ST_TO_ADDR
31923: GO 32059
31925: LD_INT 28
31927: DOUBLE
31928: EQUAL
31929: IFTRUE 31933
31931: GO 31944
31933: POP
// bc_type := b_armoury ; 29 :
31934: LD_ADDR_OWVAR 42
31938: PUSH
31939: LD_INT 4
31941: ST_TO_ADDR
31942: GO 32059
31944: LD_INT 29
31946: DOUBLE
31947: EQUAL
31948: IFTRUE 31952
31950: GO 31963
31952: POP
// bc_type := b_barracks ; 30 :
31953: LD_ADDR_OWVAR 42
31957: PUSH
31958: LD_INT 5
31960: ST_TO_ADDR
31961: GO 32059
31963: LD_INT 30
31965: DOUBLE
31966: EQUAL
31967: IFTRUE 31971
31969: GO 31982
31971: POP
// bc_type := b_solar_power ; 31 :
31972: LD_ADDR_OWVAR 42
31976: PUSH
31977: LD_INT 27
31979: ST_TO_ADDR
31980: GO 32059
31982: LD_INT 31
31984: DOUBLE
31985: EQUAL
31986: IFTRUE 31990
31988: GO 32001
31990: POP
// bc_type := b_oil_power ; 32 :
31991: LD_ADDR_OWVAR 42
31995: PUSH
31996: LD_INT 26
31998: ST_TO_ADDR
31999: GO 32059
32001: LD_INT 32
32003: DOUBLE
32004: EQUAL
32005: IFTRUE 32009
32007: GO 32020
32009: POP
// bc_type := b_siberite_power ; 33 :
32010: LD_ADDR_OWVAR 42
32014: PUSH
32015: LD_INT 28
32017: ST_TO_ADDR
32018: GO 32059
32020: LD_INT 33
32022: DOUBLE
32023: EQUAL
32024: IFTRUE 32028
32026: GO 32039
32028: POP
// bc_type := b_oil_mine ; 34 :
32029: LD_ADDR_OWVAR 42
32033: PUSH
32034: LD_INT 29
32036: ST_TO_ADDR
32037: GO 32059
32039: LD_INT 34
32041: DOUBLE
32042: EQUAL
32043: IFTRUE 32047
32045: GO 32058
32047: POP
// bc_type := b_siberite_mine ; end ;
32048: LD_ADDR_OWVAR 42
32052: PUSH
32053: LD_INT 30
32055: ST_TO_ADDR
32056: GO 32059
32058: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32059: LD_ADDR_VAR 0 8
32063: PUSH
32064: LD_VAR 0 5
32068: PPUSH
32069: LD_VAR 0 6
32073: PPUSH
32074: LD_VAR 0 3
32078: PPUSH
32079: CALL_OW 47
32083: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32084: LD_OWVAR 42
32088: PUSH
32089: LD_INT 32
32091: PUSH
32092: LD_INT 33
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: IN
32099: IFFALSE 32115
// PlaceWeaponTurret ( b , weapon ) ;
32101: LD_VAR 0 8
32105: PPUSH
32106: LD_VAR 0 4
32110: PPUSH
32111: CALL_OW 431
// end ;
32115: LD_VAR 0 7
32119: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32120: LD_INT 0
32122: PPUSH
32123: PPUSH
32124: PPUSH
32125: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32126: LD_ADDR_VAR 0 4
32130: PUSH
32131: LD_INT 22
32133: PUSH
32134: LD_OWVAR 2
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 2
32145: PUSH
32146: LD_INT 30
32148: PUSH
32149: LD_INT 0
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 30
32158: PUSH
32159: LD_INT 1
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: LIST
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PPUSH
32175: CALL_OW 69
32179: ST_TO_ADDR
// if not tmp then
32180: LD_VAR 0 4
32184: NOT
32185: IFFALSE 32189
// exit ;
32187: GO 32248
// for i in tmp do
32189: LD_ADDR_VAR 0 2
32193: PUSH
32194: LD_VAR 0 4
32198: PUSH
32199: FOR_IN
32200: IFFALSE 32246
// for j = 1 to 3 do
32202: LD_ADDR_VAR 0 3
32206: PUSH
32207: DOUBLE
32208: LD_INT 1
32210: DEC
32211: ST_TO_ADDR
32212: LD_INT 3
32214: PUSH
32215: FOR_TO
32216: IFFALSE 32242
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32218: LD_VAR 0 2
32222: PPUSH
32223: CALL_OW 274
32227: PPUSH
32228: LD_VAR 0 3
32232: PPUSH
32233: LD_INT 99999
32235: PPUSH
32236: CALL_OW 277
32240: GO 32215
32242: POP
32243: POP
32244: GO 32199
32246: POP
32247: POP
// end ;
32248: LD_VAR 0 1
32252: RET
// export function hHackSetLevel10 ; var i , j ; begin
32253: LD_INT 0
32255: PPUSH
32256: PPUSH
32257: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32258: LD_ADDR_VAR 0 2
32262: PUSH
32263: LD_INT 21
32265: PUSH
32266: LD_INT 1
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PPUSH
32273: CALL_OW 69
32277: PUSH
32278: FOR_IN
32279: IFFALSE 32331
// if IsSelected ( i ) then
32281: LD_VAR 0 2
32285: PPUSH
32286: CALL_OW 306
32290: IFFALSE 32329
// begin for j := 1 to 4 do
32292: LD_ADDR_VAR 0 3
32296: PUSH
32297: DOUBLE
32298: LD_INT 1
32300: DEC
32301: ST_TO_ADDR
32302: LD_INT 4
32304: PUSH
32305: FOR_TO
32306: IFFALSE 32327
// SetSkill ( i , j , 10 ) ;
32308: LD_VAR 0 2
32312: PPUSH
32313: LD_VAR 0 3
32317: PPUSH
32318: LD_INT 10
32320: PPUSH
32321: CALL_OW 237
32325: GO 32305
32327: POP
32328: POP
// end ;
32329: GO 32278
32331: POP
32332: POP
// end ;
32333: LD_VAR 0 1
32337: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32338: LD_INT 0
32340: PPUSH
32341: PPUSH
32342: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32343: LD_ADDR_VAR 0 2
32347: PUSH
32348: LD_INT 22
32350: PUSH
32351: LD_OWVAR 2
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 21
32362: PUSH
32363: LD_INT 1
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PPUSH
32374: CALL_OW 69
32378: PUSH
32379: FOR_IN
32380: IFFALSE 32421
// begin for j := 1 to 4 do
32382: LD_ADDR_VAR 0 3
32386: PUSH
32387: DOUBLE
32388: LD_INT 1
32390: DEC
32391: ST_TO_ADDR
32392: LD_INT 4
32394: PUSH
32395: FOR_TO
32396: IFFALSE 32417
// SetSkill ( i , j , 10 ) ;
32398: LD_VAR 0 2
32402: PPUSH
32403: LD_VAR 0 3
32407: PPUSH
32408: LD_INT 10
32410: PPUSH
32411: CALL_OW 237
32415: GO 32395
32417: POP
32418: POP
// end ;
32419: GO 32379
32421: POP
32422: POP
// end ;
32423: LD_VAR 0 1
32427: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32428: LD_INT 0
32430: PPUSH
// uc_side := your_side ;
32431: LD_ADDR_OWVAR 20
32435: PUSH
32436: LD_OWVAR 2
32440: ST_TO_ADDR
// uc_nation := nation ;
32441: LD_ADDR_OWVAR 21
32445: PUSH
32446: LD_VAR 0 1
32450: ST_TO_ADDR
// InitHc ;
32451: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32455: LD_INT 0
32457: PPUSH
32458: LD_VAR 0 2
32462: PPUSH
32463: LD_VAR 0 3
32467: PPUSH
32468: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32472: LD_VAR 0 4
32476: PPUSH
32477: LD_VAR 0 5
32481: PPUSH
32482: CALL_OW 428
32486: PUSH
32487: LD_INT 0
32489: EQUAL
32490: IFFALSE 32514
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32492: CALL_OW 44
32496: PPUSH
32497: LD_VAR 0 4
32501: PPUSH
32502: LD_VAR 0 5
32506: PPUSH
32507: LD_INT 1
32509: PPUSH
32510: CALL_OW 48
// end ;
32514: LD_VAR 0 6
32518: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32519: LD_INT 0
32521: PPUSH
32522: PPUSH
// uc_side := your_side ;
32523: LD_ADDR_OWVAR 20
32527: PUSH
32528: LD_OWVAR 2
32532: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32533: LD_VAR 0 1
32537: PUSH
32538: LD_INT 1
32540: PUSH
32541: LD_INT 2
32543: PUSH
32544: LD_INT 3
32546: PUSH
32547: LD_INT 4
32549: PUSH
32550: LD_INT 5
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: IN
32560: IFFALSE 32572
// uc_nation := nation_american else
32562: LD_ADDR_OWVAR 21
32566: PUSH
32567: LD_INT 1
32569: ST_TO_ADDR
32570: GO 32615
// if chassis in [ 11 , 12 , 13 , 14 ] then
32572: LD_VAR 0 1
32576: PUSH
32577: LD_INT 11
32579: PUSH
32580: LD_INT 12
32582: PUSH
32583: LD_INT 13
32585: PUSH
32586: LD_INT 14
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: IN
32595: IFFALSE 32607
// uc_nation := nation_arabian else
32597: LD_ADDR_OWVAR 21
32601: PUSH
32602: LD_INT 2
32604: ST_TO_ADDR
32605: GO 32615
// uc_nation := nation_russian ;
32607: LD_ADDR_OWVAR 21
32611: PUSH
32612: LD_INT 3
32614: ST_TO_ADDR
// vc_chassis := chassis ;
32615: LD_ADDR_OWVAR 37
32619: PUSH
32620: LD_VAR 0 1
32624: ST_TO_ADDR
// vc_engine := engine ;
32625: LD_ADDR_OWVAR 39
32629: PUSH
32630: LD_VAR 0 2
32634: ST_TO_ADDR
// vc_control := control ;
32635: LD_ADDR_OWVAR 38
32639: PUSH
32640: LD_VAR 0 3
32644: ST_TO_ADDR
// vc_weapon := weapon ;
32645: LD_ADDR_OWVAR 40
32649: PUSH
32650: LD_VAR 0 4
32654: ST_TO_ADDR
// un := CreateVehicle ;
32655: LD_ADDR_VAR 0 8
32659: PUSH
32660: CALL_OW 45
32664: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32665: LD_VAR 0 8
32669: PPUSH
32670: LD_INT 0
32672: PPUSH
32673: LD_INT 5
32675: PPUSH
32676: CALL_OW 12
32680: PPUSH
32681: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32685: LD_VAR 0 8
32689: PPUSH
32690: LD_VAR 0 5
32694: PPUSH
32695: LD_VAR 0 6
32699: PPUSH
32700: LD_INT 1
32702: PPUSH
32703: CALL_OW 48
// end ;
32707: LD_VAR 0 7
32711: RET
// export hInvincible ; every 1 do
32712: GO 32714
32714: DISABLE
// hInvincible := [ ] ;
32715: LD_ADDR_EXP 129
32719: PUSH
32720: EMPTY
32721: ST_TO_ADDR
32722: END
// every 10 do var i ;
32723: GO 32725
32725: DISABLE
32726: LD_INT 0
32728: PPUSH
// begin enable ;
32729: ENABLE
// if not hInvincible then
32730: LD_EXP 129
32734: NOT
32735: IFFALSE 32739
// exit ;
32737: GO 32783
// for i in hInvincible do
32739: LD_ADDR_VAR 0 1
32743: PUSH
32744: LD_EXP 129
32748: PUSH
32749: FOR_IN
32750: IFFALSE 32781
// if GetLives ( i ) < 1000 then
32752: LD_VAR 0 1
32756: PPUSH
32757: CALL_OW 256
32761: PUSH
32762: LD_INT 1000
32764: LESS
32765: IFFALSE 32779
// SetLives ( i , 1000 ) ;
32767: LD_VAR 0 1
32771: PPUSH
32772: LD_INT 1000
32774: PPUSH
32775: CALL_OW 234
32779: GO 32749
32781: POP
32782: POP
// end ;
32783: PPOPN 1
32785: END
// export function hHackInvincible ; var i ; begin
32786: LD_INT 0
32788: PPUSH
32789: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32790: LD_ADDR_VAR 0 2
32794: PUSH
32795: LD_INT 2
32797: PUSH
32798: LD_INT 21
32800: PUSH
32801: LD_INT 1
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 21
32810: PUSH
32811: LD_INT 2
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: LIST
32822: PPUSH
32823: CALL_OW 69
32827: PUSH
32828: FOR_IN
32829: IFFALSE 32890
// if IsSelected ( i ) then
32831: LD_VAR 0 2
32835: PPUSH
32836: CALL_OW 306
32840: IFFALSE 32888
// begin if i in hInvincible then
32842: LD_VAR 0 2
32846: PUSH
32847: LD_EXP 129
32851: IN
32852: IFFALSE 32872
// hInvincible := hInvincible diff i else
32854: LD_ADDR_EXP 129
32858: PUSH
32859: LD_EXP 129
32863: PUSH
32864: LD_VAR 0 2
32868: DIFF
32869: ST_TO_ADDR
32870: GO 32888
// hInvincible := hInvincible union i ;
32872: LD_ADDR_EXP 129
32876: PUSH
32877: LD_EXP 129
32881: PUSH
32882: LD_VAR 0 2
32886: UNION
32887: ST_TO_ADDR
// end ;
32888: GO 32828
32890: POP
32891: POP
// end ;
32892: LD_VAR 0 1
32896: RET
// export function hHackInvisible ; var i , j ; begin
32897: LD_INT 0
32899: PPUSH
32900: PPUSH
32901: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32902: LD_ADDR_VAR 0 2
32906: PUSH
32907: LD_INT 21
32909: PUSH
32910: LD_INT 1
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PPUSH
32917: CALL_OW 69
32921: PUSH
32922: FOR_IN
32923: IFFALSE 32947
// if IsSelected ( i ) then
32925: LD_VAR 0 2
32929: PPUSH
32930: CALL_OW 306
32934: IFFALSE 32945
// ComForceInvisible ( i ) ;
32936: LD_VAR 0 2
32940: PPUSH
32941: CALL_OW 496
32945: GO 32922
32947: POP
32948: POP
// end ;
32949: LD_VAR 0 1
32953: RET
// export function hHackChangeYourSide ; begin
32954: LD_INT 0
32956: PPUSH
// if your_side = 8 then
32957: LD_OWVAR 2
32961: PUSH
32962: LD_INT 8
32964: EQUAL
32965: IFFALSE 32977
// your_side := 0 else
32967: LD_ADDR_OWVAR 2
32971: PUSH
32972: LD_INT 0
32974: ST_TO_ADDR
32975: GO 32991
// your_side := your_side + 1 ;
32977: LD_ADDR_OWVAR 2
32981: PUSH
32982: LD_OWVAR 2
32986: PUSH
32987: LD_INT 1
32989: PLUS
32990: ST_TO_ADDR
// end ;
32991: LD_VAR 0 1
32995: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32996: LD_INT 0
32998: PPUSH
32999: PPUSH
33000: PPUSH
// for i in all_units do
33001: LD_ADDR_VAR 0 2
33005: PUSH
33006: LD_OWVAR 3
33010: PUSH
33011: FOR_IN
33012: IFFALSE 33090
// if IsSelected ( i ) then
33014: LD_VAR 0 2
33018: PPUSH
33019: CALL_OW 306
33023: IFFALSE 33088
// begin j := GetSide ( i ) ;
33025: LD_ADDR_VAR 0 3
33029: PUSH
33030: LD_VAR 0 2
33034: PPUSH
33035: CALL_OW 255
33039: ST_TO_ADDR
// if j = 8 then
33040: LD_VAR 0 3
33044: PUSH
33045: LD_INT 8
33047: EQUAL
33048: IFFALSE 33060
// j := 0 else
33050: LD_ADDR_VAR 0 3
33054: PUSH
33055: LD_INT 0
33057: ST_TO_ADDR
33058: GO 33074
// j := j + 1 ;
33060: LD_ADDR_VAR 0 3
33064: PUSH
33065: LD_VAR 0 3
33069: PUSH
33070: LD_INT 1
33072: PLUS
33073: ST_TO_ADDR
// SetSide ( i , j ) ;
33074: LD_VAR 0 2
33078: PPUSH
33079: LD_VAR 0 3
33083: PPUSH
33084: CALL_OW 235
// end ;
33088: GO 33011
33090: POP
33091: POP
// end ;
33092: LD_VAR 0 1
33096: RET
// export function hHackFog ; begin
33097: LD_INT 0
33099: PPUSH
// FogOff ( true ) ;
33100: LD_INT 1
33102: PPUSH
33103: CALL_OW 344
// end ;
33107: LD_VAR 0 1
33111: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33112: LD_INT 0
33114: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33115: LD_VAR 0 1
33119: PPUSH
33120: LD_VAR 0 2
33124: PPUSH
33125: LD_VAR 0 3
33129: PPUSH
33130: LD_INT 1
33132: PPUSH
33133: LD_INT 1
33135: PPUSH
33136: CALL_OW 483
// CenterOnXY ( x , y ) ;
33140: LD_VAR 0 2
33144: PPUSH
33145: LD_VAR 0 3
33149: PPUSH
33150: CALL_OW 84
// end ;
33154: LD_VAR 0 4
33158: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33159: LD_INT 0
33161: PPUSH
33162: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33163: LD_VAR 0 1
33167: NOT
33168: PUSH
33169: LD_VAR 0 2
33173: PPUSH
33174: LD_VAR 0 3
33178: PPUSH
33179: CALL_OW 488
33183: NOT
33184: OR
33185: PUSH
33186: LD_VAR 0 1
33190: PPUSH
33191: CALL_OW 266
33195: PUSH
33196: LD_INT 3
33198: NONEQUAL
33199: PUSH
33200: LD_VAR 0 1
33204: PPUSH
33205: CALL_OW 247
33209: PUSH
33210: LD_INT 1
33212: EQUAL
33213: NOT
33214: AND
33215: OR
33216: IFFALSE 33220
// exit ;
33218: GO 33369
// if GetType ( factory ) = unit_human then
33220: LD_VAR 0 1
33224: PPUSH
33225: CALL_OW 247
33229: PUSH
33230: LD_INT 1
33232: EQUAL
33233: IFFALSE 33250
// factory := IsInUnit ( factory ) ;
33235: LD_ADDR_VAR 0 1
33239: PUSH
33240: LD_VAR 0 1
33244: PPUSH
33245: CALL_OW 310
33249: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33250: LD_VAR 0 1
33254: PPUSH
33255: CALL_OW 266
33259: PUSH
33260: LD_INT 3
33262: NONEQUAL
33263: IFFALSE 33267
// exit ;
33265: GO 33369
// if HexInfo ( x , y ) = factory then
33267: LD_VAR 0 2
33271: PPUSH
33272: LD_VAR 0 3
33276: PPUSH
33277: CALL_OW 428
33281: PUSH
33282: LD_VAR 0 1
33286: EQUAL
33287: IFFALSE 33314
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33289: LD_ADDR_EXP 130
33293: PUSH
33294: LD_EXP 130
33298: PPUSH
33299: LD_VAR 0 1
33303: PPUSH
33304: LD_INT 0
33306: PPUSH
33307: CALL_OW 1
33311: ST_TO_ADDR
33312: GO 33365
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33314: LD_ADDR_EXP 130
33318: PUSH
33319: LD_EXP 130
33323: PPUSH
33324: LD_VAR 0 1
33328: PPUSH
33329: LD_VAR 0 1
33333: PPUSH
33334: CALL_OW 255
33338: PUSH
33339: LD_VAR 0 1
33343: PUSH
33344: LD_VAR 0 2
33348: PUSH
33349: LD_VAR 0 3
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: PPUSH
33360: CALL_OW 1
33364: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33365: CALL 33374 0 0
// end ;
33369: LD_VAR 0 4
33373: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33374: LD_INT 0
33376: PPUSH
33377: PPUSH
33378: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33379: LD_STRING resetFactoryWaypoint();
33381: PPUSH
33382: CALL_OW 559
// if factoryWaypoints then
33386: LD_EXP 130
33390: IFFALSE 33516
// begin list := PrepareArray ( factoryWaypoints ) ;
33392: LD_ADDR_VAR 0 3
33396: PUSH
33397: LD_EXP 130
33401: PPUSH
33402: CALL 75620 0 1
33406: ST_TO_ADDR
// for i := 1 to list do
33407: LD_ADDR_VAR 0 2
33411: PUSH
33412: DOUBLE
33413: LD_INT 1
33415: DEC
33416: ST_TO_ADDR
33417: LD_VAR 0 3
33421: PUSH
33422: FOR_TO
33423: IFFALSE 33514
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33425: LD_STRING setFactoryWaypointXY(
33427: PUSH
33428: LD_VAR 0 3
33432: PUSH
33433: LD_VAR 0 2
33437: ARRAY
33438: PUSH
33439: LD_INT 1
33441: ARRAY
33442: STR
33443: PUSH
33444: LD_STRING ,
33446: STR
33447: PUSH
33448: LD_VAR 0 3
33452: PUSH
33453: LD_VAR 0 2
33457: ARRAY
33458: PUSH
33459: LD_INT 2
33461: ARRAY
33462: STR
33463: PUSH
33464: LD_STRING ,
33466: STR
33467: PUSH
33468: LD_VAR 0 3
33472: PUSH
33473: LD_VAR 0 2
33477: ARRAY
33478: PUSH
33479: LD_INT 3
33481: ARRAY
33482: STR
33483: PUSH
33484: LD_STRING ,
33486: STR
33487: PUSH
33488: LD_VAR 0 3
33492: PUSH
33493: LD_VAR 0 2
33497: ARRAY
33498: PUSH
33499: LD_INT 4
33501: ARRAY
33502: STR
33503: PUSH
33504: LD_STRING )
33506: STR
33507: PPUSH
33508: CALL_OW 559
33512: GO 33422
33514: POP
33515: POP
// end ; end ;
33516: LD_VAR 0 1
33520: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33521: LD_INT 0
33523: PPUSH
// if HexInfo ( x , y ) = warehouse then
33524: LD_VAR 0 2
33528: PPUSH
33529: LD_VAR 0 3
33533: PPUSH
33534: CALL_OW 428
33538: PUSH
33539: LD_VAR 0 1
33543: EQUAL
33544: IFFALSE 33571
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33546: LD_ADDR_EXP 131
33550: PUSH
33551: LD_EXP 131
33555: PPUSH
33556: LD_VAR 0 1
33560: PPUSH
33561: LD_INT 0
33563: PPUSH
33564: CALL_OW 1
33568: ST_TO_ADDR
33569: GO 33622
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33571: LD_ADDR_EXP 131
33575: PUSH
33576: LD_EXP 131
33580: PPUSH
33581: LD_VAR 0 1
33585: PPUSH
33586: LD_VAR 0 1
33590: PPUSH
33591: CALL_OW 255
33595: PUSH
33596: LD_VAR 0 1
33600: PUSH
33601: LD_VAR 0 2
33605: PUSH
33606: LD_VAR 0 3
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: PPUSH
33617: CALL_OW 1
33621: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33622: CALL 33631 0 0
// end ;
33626: LD_VAR 0 4
33630: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33631: LD_INT 0
33633: PPUSH
33634: PPUSH
33635: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33636: LD_STRING resetWarehouseGatheringPoints();
33638: PPUSH
33639: CALL_OW 559
// if warehouseGatheringPoints then
33643: LD_EXP 131
33647: IFFALSE 33773
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33649: LD_ADDR_VAR 0 3
33653: PUSH
33654: LD_EXP 131
33658: PPUSH
33659: CALL 75620 0 1
33663: ST_TO_ADDR
// for i := 1 to list do
33664: LD_ADDR_VAR 0 2
33668: PUSH
33669: DOUBLE
33670: LD_INT 1
33672: DEC
33673: ST_TO_ADDR
33674: LD_VAR 0 3
33678: PUSH
33679: FOR_TO
33680: IFFALSE 33771
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33682: LD_STRING setWarehouseGatheringPointXY(
33684: PUSH
33685: LD_VAR 0 3
33689: PUSH
33690: LD_VAR 0 2
33694: ARRAY
33695: PUSH
33696: LD_INT 1
33698: ARRAY
33699: STR
33700: PUSH
33701: LD_STRING ,
33703: STR
33704: PUSH
33705: LD_VAR 0 3
33709: PUSH
33710: LD_VAR 0 2
33714: ARRAY
33715: PUSH
33716: LD_INT 2
33718: ARRAY
33719: STR
33720: PUSH
33721: LD_STRING ,
33723: STR
33724: PUSH
33725: LD_VAR 0 3
33729: PUSH
33730: LD_VAR 0 2
33734: ARRAY
33735: PUSH
33736: LD_INT 3
33738: ARRAY
33739: STR
33740: PUSH
33741: LD_STRING ,
33743: STR
33744: PUSH
33745: LD_VAR 0 3
33749: PUSH
33750: LD_VAR 0 2
33754: ARRAY
33755: PUSH
33756: LD_INT 4
33758: ARRAY
33759: STR
33760: PUSH
33761: LD_STRING )
33763: STR
33764: PPUSH
33765: CALL_OW 559
33769: GO 33679
33771: POP
33772: POP
// end ; end ;
33773: LD_VAR 0 1
33777: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33778: LD_EXP 131
33782: IFFALSE 34469
33784: GO 33786
33786: DISABLE
33787: LD_INT 0
33789: PPUSH
33790: PPUSH
33791: PPUSH
33792: PPUSH
33793: PPUSH
33794: PPUSH
33795: PPUSH
33796: PPUSH
33797: PPUSH
// begin enable ;
33798: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33799: LD_ADDR_VAR 0 3
33803: PUSH
33804: LD_EXP 131
33808: PPUSH
33809: CALL 75620 0 1
33813: ST_TO_ADDR
// if not list then
33814: LD_VAR 0 3
33818: NOT
33819: IFFALSE 33823
// exit ;
33821: GO 34469
// for i := 1 to list do
33823: LD_ADDR_VAR 0 1
33827: PUSH
33828: DOUBLE
33829: LD_INT 1
33831: DEC
33832: ST_TO_ADDR
33833: LD_VAR 0 3
33837: PUSH
33838: FOR_TO
33839: IFFALSE 34467
// begin depot := list [ i ] [ 2 ] ;
33841: LD_ADDR_VAR 0 8
33845: PUSH
33846: LD_VAR 0 3
33850: PUSH
33851: LD_VAR 0 1
33855: ARRAY
33856: PUSH
33857: LD_INT 2
33859: ARRAY
33860: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33861: LD_ADDR_VAR 0 5
33865: PUSH
33866: LD_VAR 0 3
33870: PUSH
33871: LD_VAR 0 1
33875: ARRAY
33876: PUSH
33877: LD_INT 1
33879: ARRAY
33880: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33881: LD_VAR 0 8
33885: PPUSH
33886: CALL_OW 301
33890: PUSH
33891: LD_VAR 0 5
33895: PUSH
33896: LD_VAR 0 8
33900: PPUSH
33901: CALL_OW 255
33905: NONEQUAL
33906: OR
33907: IFFALSE 33936
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33909: LD_ADDR_EXP 131
33913: PUSH
33914: LD_EXP 131
33918: PPUSH
33919: LD_VAR 0 8
33923: PPUSH
33924: LD_INT 0
33926: PPUSH
33927: CALL_OW 1
33931: ST_TO_ADDR
// exit ;
33932: POP
33933: POP
33934: GO 34469
// end ; x := list [ i ] [ 3 ] ;
33936: LD_ADDR_VAR 0 6
33940: PUSH
33941: LD_VAR 0 3
33945: PUSH
33946: LD_VAR 0 1
33950: ARRAY
33951: PUSH
33952: LD_INT 3
33954: ARRAY
33955: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
33956: LD_ADDR_VAR 0 7
33960: PUSH
33961: LD_VAR 0 3
33965: PUSH
33966: LD_VAR 0 1
33970: ARRAY
33971: PUSH
33972: LD_INT 4
33974: ARRAY
33975: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
33976: LD_ADDR_VAR 0 9
33980: PUSH
33981: LD_VAR 0 6
33985: PPUSH
33986: LD_VAR 0 7
33990: PPUSH
33991: LD_INT 16
33993: PPUSH
33994: CALL 74204 0 3
33998: ST_TO_ADDR
// if not cratesNearbyPoint then
33999: LD_VAR 0 9
34003: NOT
34004: IFFALSE 34010
// exit ;
34006: POP
34007: POP
34008: GO 34469
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34010: LD_ADDR_VAR 0 4
34014: PUSH
34015: LD_INT 22
34017: PUSH
34018: LD_VAR 0 5
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 3
34029: PUSH
34030: LD_INT 60
34032: PUSH
34033: EMPTY
34034: LIST
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 91
34042: PUSH
34043: LD_VAR 0 8
34047: PUSH
34048: LD_INT 6
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 2
34058: PUSH
34059: LD_INT 25
34061: PUSH
34062: LD_INT 2
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 25
34071: PUSH
34072: LD_INT 16
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: LIST
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: PPUSH
34090: CALL_OW 69
34094: PUSH
34095: LD_VAR 0 8
34099: PPUSH
34100: CALL_OW 313
34104: PPUSH
34105: LD_INT 3
34107: PUSH
34108: LD_INT 60
34110: PUSH
34111: EMPTY
34112: LIST
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 2
34120: PUSH
34121: LD_INT 25
34123: PUSH
34124: LD_INT 2
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 25
34133: PUSH
34134: LD_INT 16
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: LIST
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PPUSH
34150: CALL_OW 72
34154: UNION
34155: ST_TO_ADDR
// if tmp then
34156: LD_VAR 0 4
34160: IFFALSE 34240
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34162: LD_ADDR_VAR 0 4
34166: PUSH
34167: LD_VAR 0 4
34171: PPUSH
34172: LD_INT 3
34174: PPUSH
34175: CALL 72171 0 2
34179: ST_TO_ADDR
// for j in tmp do
34180: LD_ADDR_VAR 0 2
34184: PUSH
34185: LD_VAR 0 4
34189: PUSH
34190: FOR_IN
34191: IFFALSE 34234
// begin if IsInUnit ( j ) then
34193: LD_VAR 0 2
34197: PPUSH
34198: CALL_OW 310
34202: IFFALSE 34213
// ComExit ( j ) ;
34204: LD_VAR 0 2
34208: PPUSH
34209: CALL 72254 0 1
// AddComCollect ( j , x , y ) ;
34213: LD_VAR 0 2
34217: PPUSH
34218: LD_VAR 0 6
34222: PPUSH
34223: LD_VAR 0 7
34227: PPUSH
34228: CALL_OW 177
// end ;
34232: GO 34190
34234: POP
34235: POP
// exit ;
34236: POP
34237: POP
34238: GO 34469
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34240: LD_ADDR_VAR 0 4
34244: PUSH
34245: LD_INT 22
34247: PUSH
34248: LD_VAR 0 5
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 91
34259: PUSH
34260: LD_VAR 0 8
34264: PUSH
34265: LD_INT 8
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 2
34275: PUSH
34276: LD_INT 34
34278: PUSH
34279: LD_INT 12
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 34
34288: PUSH
34289: LD_INT 51
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 34
34298: PUSH
34299: LD_INT 32
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: LD_INT 34
34308: PUSH
34309: LD_EXP 45
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: LIST
34329: PPUSH
34330: CALL_OW 69
34334: ST_TO_ADDR
// if tmp then
34335: LD_VAR 0 4
34339: IFFALSE 34465
// begin for j in tmp do
34341: LD_ADDR_VAR 0 2
34345: PUSH
34346: LD_VAR 0 4
34350: PUSH
34351: FOR_IN
34352: IFFALSE 34463
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34354: LD_VAR 0 2
34358: PPUSH
34359: CALL_OW 262
34363: PUSH
34364: LD_INT 3
34366: EQUAL
34367: PUSH
34368: LD_VAR 0 2
34372: PPUSH
34373: CALL_OW 261
34377: PUSH
34378: LD_INT 20
34380: GREATER
34381: OR
34382: PUSH
34383: LD_VAR 0 2
34387: PPUSH
34388: CALL_OW 314
34392: NOT
34393: AND
34394: PUSH
34395: LD_VAR 0 2
34399: PPUSH
34400: CALL_OW 263
34404: PUSH
34405: LD_INT 1
34407: NONEQUAL
34408: PUSH
34409: LD_VAR 0 2
34413: PPUSH
34414: CALL_OW 311
34418: OR
34419: AND
34420: IFFALSE 34461
// begin ComCollect ( j , x , y ) ;
34422: LD_VAR 0 2
34426: PPUSH
34427: LD_VAR 0 6
34431: PPUSH
34432: LD_VAR 0 7
34436: PPUSH
34437: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34441: LD_VAR 0 2
34445: PPUSH
34446: LD_VAR 0 8
34450: PPUSH
34451: CALL_OW 172
// exit ;
34455: POP
34456: POP
34457: POP
34458: POP
34459: GO 34469
// end ;
34461: GO 34351
34463: POP
34464: POP
// end ; end ;
34465: GO 33838
34467: POP
34468: POP
// end ; end_of_file end_of_file
34469: PPOPN 9
34471: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
34472: LD_INT 0
34474: PPUSH
34475: PPUSH
// if exist_mode then
34476: LD_VAR 0 2
34480: IFFALSE 34505
// unit := CreateCharacter ( prefix & ident ) else
34482: LD_ADDR_VAR 0 5
34486: PUSH
34487: LD_VAR 0 3
34491: PUSH
34492: LD_VAR 0 1
34496: STR
34497: PPUSH
34498: CALL_OW 34
34502: ST_TO_ADDR
34503: GO 34520
// unit := NewCharacter ( ident ) ;
34505: LD_ADDR_VAR 0 5
34509: PUSH
34510: LD_VAR 0 1
34514: PPUSH
34515: CALL_OW 25
34519: ST_TO_ADDR
// result := unit ;
34520: LD_ADDR_VAR 0 4
34524: PUSH
34525: LD_VAR 0 5
34529: ST_TO_ADDR
// end ;
34530: LD_VAR 0 4
34534: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
34535: LD_INT 0
34537: PPUSH
34538: PPUSH
// if not side or not nation then
34539: LD_VAR 0 1
34543: NOT
34544: PUSH
34545: LD_VAR 0 2
34549: NOT
34550: OR
34551: IFFALSE 34555
// exit ;
34553: GO 35323
// case nation of nation_american :
34555: LD_VAR 0 2
34559: PUSH
34560: LD_INT 1
34562: DOUBLE
34563: EQUAL
34564: IFTRUE 34568
34566: GO 34782
34568: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
34569: LD_ADDR_VAR 0 4
34573: PUSH
34574: LD_INT 35
34576: PUSH
34577: LD_INT 45
34579: PUSH
34580: LD_INT 46
34582: PUSH
34583: LD_INT 47
34585: PUSH
34586: LD_INT 82
34588: PUSH
34589: LD_INT 83
34591: PUSH
34592: LD_INT 84
34594: PUSH
34595: LD_INT 85
34597: PUSH
34598: LD_INT 86
34600: PUSH
34601: LD_INT 1
34603: PUSH
34604: LD_INT 2
34606: PUSH
34607: LD_INT 6
34609: PUSH
34610: LD_INT 15
34612: PUSH
34613: LD_INT 16
34615: PUSH
34616: LD_INT 7
34618: PUSH
34619: LD_INT 12
34621: PUSH
34622: LD_INT 13
34624: PUSH
34625: LD_INT 10
34627: PUSH
34628: LD_INT 14
34630: PUSH
34631: LD_INT 20
34633: PUSH
34634: LD_INT 21
34636: PUSH
34637: LD_INT 22
34639: PUSH
34640: LD_INT 25
34642: PUSH
34643: LD_INT 32
34645: PUSH
34646: LD_INT 27
34648: PUSH
34649: LD_INT 36
34651: PUSH
34652: LD_INT 69
34654: PUSH
34655: LD_INT 39
34657: PUSH
34658: LD_INT 34
34660: PUSH
34661: LD_INT 40
34663: PUSH
34664: LD_INT 48
34666: PUSH
34667: LD_INT 49
34669: PUSH
34670: LD_INT 50
34672: PUSH
34673: LD_INT 51
34675: PUSH
34676: LD_INT 52
34678: PUSH
34679: LD_INT 53
34681: PUSH
34682: LD_INT 54
34684: PUSH
34685: LD_INT 55
34687: PUSH
34688: LD_INT 56
34690: PUSH
34691: LD_INT 57
34693: PUSH
34694: LD_INT 58
34696: PUSH
34697: LD_INT 59
34699: PUSH
34700: LD_INT 60
34702: PUSH
34703: LD_INT 61
34705: PUSH
34706: LD_INT 62
34708: PUSH
34709: LD_INT 80
34711: PUSH
34712: LD_INT 82
34714: PUSH
34715: LD_INT 83
34717: PUSH
34718: LD_INT 84
34720: PUSH
34721: LD_INT 85
34723: PUSH
34724: LD_INT 86
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: ST_TO_ADDR
34780: GO 35247
34782: LD_INT 2
34784: DOUBLE
34785: EQUAL
34786: IFTRUE 34790
34788: GO 35016
34790: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
34791: LD_ADDR_VAR 0 4
34795: PUSH
34796: LD_INT 35
34798: PUSH
34799: LD_INT 45
34801: PUSH
34802: LD_INT 46
34804: PUSH
34805: LD_INT 47
34807: PUSH
34808: LD_INT 82
34810: PUSH
34811: LD_INT 83
34813: PUSH
34814: LD_INT 84
34816: PUSH
34817: LD_INT 85
34819: PUSH
34820: LD_INT 87
34822: PUSH
34823: LD_INT 70
34825: PUSH
34826: LD_INT 1
34828: PUSH
34829: LD_INT 11
34831: PUSH
34832: LD_INT 3
34834: PUSH
34835: LD_INT 4
34837: PUSH
34838: LD_INT 5
34840: PUSH
34841: LD_INT 6
34843: PUSH
34844: LD_INT 15
34846: PUSH
34847: LD_INT 18
34849: PUSH
34850: LD_INT 7
34852: PUSH
34853: LD_INT 17
34855: PUSH
34856: LD_INT 8
34858: PUSH
34859: LD_INT 20
34861: PUSH
34862: LD_INT 21
34864: PUSH
34865: LD_INT 22
34867: PUSH
34868: LD_INT 72
34870: PUSH
34871: LD_INT 26
34873: PUSH
34874: LD_INT 69
34876: PUSH
34877: LD_INT 39
34879: PUSH
34880: LD_INT 40
34882: PUSH
34883: LD_INT 41
34885: PUSH
34886: LD_INT 42
34888: PUSH
34889: LD_INT 43
34891: PUSH
34892: LD_INT 48
34894: PUSH
34895: LD_INT 49
34897: PUSH
34898: LD_INT 50
34900: PUSH
34901: LD_INT 51
34903: PUSH
34904: LD_INT 52
34906: PUSH
34907: LD_INT 53
34909: PUSH
34910: LD_INT 54
34912: PUSH
34913: LD_INT 55
34915: PUSH
34916: LD_INT 56
34918: PUSH
34919: LD_INT 60
34921: PUSH
34922: LD_INT 61
34924: PUSH
34925: LD_INT 62
34927: PUSH
34928: LD_INT 66
34930: PUSH
34931: LD_INT 67
34933: PUSH
34934: LD_INT 68
34936: PUSH
34937: LD_INT 81
34939: PUSH
34940: LD_INT 82
34942: PUSH
34943: LD_INT 83
34945: PUSH
34946: LD_INT 84
34948: PUSH
34949: LD_INT 85
34951: PUSH
34952: LD_INT 87
34954: PUSH
34955: LD_INT 88
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: ST_TO_ADDR
35014: GO 35247
35016: LD_INT 3
35018: DOUBLE
35019: EQUAL
35020: IFTRUE 35024
35022: GO 35246
35024: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
35025: LD_ADDR_VAR 0 4
35029: PUSH
35030: LD_INT 46
35032: PUSH
35033: LD_INT 47
35035: PUSH
35036: LD_INT 1
35038: PUSH
35039: LD_INT 2
35041: PUSH
35042: LD_INT 82
35044: PUSH
35045: LD_INT 83
35047: PUSH
35048: LD_INT 84
35050: PUSH
35051: LD_INT 85
35053: PUSH
35054: LD_INT 86
35056: PUSH
35057: LD_INT 11
35059: PUSH
35060: LD_INT 9
35062: PUSH
35063: LD_INT 20
35065: PUSH
35066: LD_INT 19
35068: PUSH
35069: LD_INT 21
35071: PUSH
35072: LD_INT 24
35074: PUSH
35075: LD_INT 22
35077: PUSH
35078: LD_INT 25
35080: PUSH
35081: LD_INT 28
35083: PUSH
35084: LD_INT 29
35086: PUSH
35087: LD_INT 30
35089: PUSH
35090: LD_INT 31
35092: PUSH
35093: LD_INT 37
35095: PUSH
35096: LD_INT 38
35098: PUSH
35099: LD_INT 32
35101: PUSH
35102: LD_INT 27
35104: PUSH
35105: LD_INT 33
35107: PUSH
35108: LD_INT 69
35110: PUSH
35111: LD_INT 39
35113: PUSH
35114: LD_INT 34
35116: PUSH
35117: LD_INT 40
35119: PUSH
35120: LD_INT 71
35122: PUSH
35123: LD_INT 23
35125: PUSH
35126: LD_INT 44
35128: PUSH
35129: LD_INT 48
35131: PUSH
35132: LD_INT 49
35134: PUSH
35135: LD_INT 50
35137: PUSH
35138: LD_INT 51
35140: PUSH
35141: LD_INT 52
35143: PUSH
35144: LD_INT 53
35146: PUSH
35147: LD_INT 54
35149: PUSH
35150: LD_INT 55
35152: PUSH
35153: LD_INT 56
35155: PUSH
35156: LD_INT 57
35158: PUSH
35159: LD_INT 58
35161: PUSH
35162: LD_INT 59
35164: PUSH
35165: LD_INT 63
35167: PUSH
35168: LD_INT 64
35170: PUSH
35171: LD_INT 65
35173: PUSH
35174: LD_INT 82
35176: PUSH
35177: LD_INT 83
35179: PUSH
35180: LD_INT 84
35182: PUSH
35183: LD_INT 85
35185: PUSH
35186: LD_INT 86
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: ST_TO_ADDR
35244: GO 35247
35246: POP
// if state > - 1 and state < 3 then
35247: LD_VAR 0 3
35251: PUSH
35252: LD_INT 1
35254: NEG
35255: GREATER
35256: PUSH
35257: LD_VAR 0 3
35261: PUSH
35262: LD_INT 3
35264: LESS
35265: AND
35266: IFFALSE 35323
// for i in result do
35268: LD_ADDR_VAR 0 5
35272: PUSH
35273: LD_VAR 0 4
35277: PUSH
35278: FOR_IN
35279: IFFALSE 35321
// if GetTech ( i , side ) <> state then
35281: LD_VAR 0 5
35285: PPUSH
35286: LD_VAR 0 1
35290: PPUSH
35291: CALL_OW 321
35295: PUSH
35296: LD_VAR 0 3
35300: NONEQUAL
35301: IFFALSE 35319
// result := result diff i ;
35303: LD_ADDR_VAR 0 4
35307: PUSH
35308: LD_VAR 0 4
35312: PUSH
35313: LD_VAR 0 5
35317: DIFF
35318: ST_TO_ADDR
35319: GO 35278
35321: POP
35322: POP
// end ;
35323: LD_VAR 0 4
35327: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35328: LD_INT 0
35330: PPUSH
35331: PPUSH
35332: PPUSH
// result := true ;
35333: LD_ADDR_VAR 0 3
35337: PUSH
35338: LD_INT 1
35340: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35341: LD_ADDR_VAR 0 5
35345: PUSH
35346: LD_VAR 0 2
35350: PPUSH
35351: CALL_OW 480
35355: ST_TO_ADDR
// if not tmp then
35356: LD_VAR 0 5
35360: NOT
35361: IFFALSE 35365
// exit ;
35363: GO 35414
// for i in tmp do
35365: LD_ADDR_VAR 0 4
35369: PUSH
35370: LD_VAR 0 5
35374: PUSH
35375: FOR_IN
35376: IFFALSE 35412
// if GetTech ( i , side ) <> state_researched then
35378: LD_VAR 0 4
35382: PPUSH
35383: LD_VAR 0 1
35387: PPUSH
35388: CALL_OW 321
35392: PUSH
35393: LD_INT 2
35395: NONEQUAL
35396: IFFALSE 35410
// begin result := false ;
35398: LD_ADDR_VAR 0 3
35402: PUSH
35403: LD_INT 0
35405: ST_TO_ADDR
// exit ;
35406: POP
35407: POP
35408: GO 35414
// end ;
35410: GO 35375
35412: POP
35413: POP
// end ;
35414: LD_VAR 0 3
35418: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
35419: LD_INT 0
35421: PPUSH
35422: PPUSH
35423: PPUSH
35424: PPUSH
35425: PPUSH
35426: PPUSH
35427: PPUSH
35428: PPUSH
35429: PPUSH
35430: PPUSH
35431: PPUSH
35432: PPUSH
35433: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
35434: LD_VAR 0 1
35438: NOT
35439: PUSH
35440: LD_VAR 0 1
35444: PPUSH
35445: CALL_OW 257
35449: PUSH
35450: LD_INT 9
35452: NONEQUAL
35453: OR
35454: IFFALSE 35458
// exit ;
35456: GO 36031
// side := GetSide ( unit ) ;
35458: LD_ADDR_VAR 0 9
35462: PUSH
35463: LD_VAR 0 1
35467: PPUSH
35468: CALL_OW 255
35472: ST_TO_ADDR
// tech_space := tech_spacanom ;
35473: LD_ADDR_VAR 0 12
35477: PUSH
35478: LD_INT 29
35480: ST_TO_ADDR
// tech_time := tech_taurad ;
35481: LD_ADDR_VAR 0 13
35485: PUSH
35486: LD_INT 28
35488: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
35489: LD_ADDR_VAR 0 11
35493: PUSH
35494: LD_VAR 0 1
35498: PPUSH
35499: CALL_OW 310
35503: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
35504: LD_VAR 0 11
35508: PPUSH
35509: CALL_OW 247
35513: PUSH
35514: LD_INT 2
35516: EQUAL
35517: IFFALSE 35521
// exit ;
35519: GO 36031
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35521: LD_ADDR_VAR 0 8
35525: PUSH
35526: LD_INT 81
35528: PUSH
35529: LD_VAR 0 9
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 3
35540: PUSH
35541: LD_INT 21
35543: PUSH
35544: LD_INT 3
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PPUSH
35559: CALL_OW 69
35563: ST_TO_ADDR
// if not tmp then
35564: LD_VAR 0 8
35568: NOT
35569: IFFALSE 35573
// exit ;
35571: GO 36031
// if in_unit then
35573: LD_VAR 0 11
35577: IFFALSE 35601
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
35579: LD_ADDR_VAR 0 10
35583: PUSH
35584: LD_VAR 0 8
35588: PPUSH
35589: LD_VAR 0 11
35593: PPUSH
35594: CALL_OW 74
35598: ST_TO_ADDR
35599: GO 35621
// enemy := NearestUnitToUnit ( tmp , unit ) ;
35601: LD_ADDR_VAR 0 10
35605: PUSH
35606: LD_VAR 0 8
35610: PPUSH
35611: LD_VAR 0 1
35615: PPUSH
35616: CALL_OW 74
35620: ST_TO_ADDR
// if not enemy then
35621: LD_VAR 0 10
35625: NOT
35626: IFFALSE 35630
// exit ;
35628: GO 36031
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
35630: LD_VAR 0 11
35634: PUSH
35635: LD_VAR 0 11
35639: PPUSH
35640: LD_VAR 0 10
35644: PPUSH
35645: CALL_OW 296
35649: PUSH
35650: LD_INT 13
35652: GREATER
35653: AND
35654: PUSH
35655: LD_VAR 0 1
35659: PPUSH
35660: LD_VAR 0 10
35664: PPUSH
35665: CALL_OW 296
35669: PUSH
35670: LD_INT 12
35672: GREATER
35673: OR
35674: IFFALSE 35678
// exit ;
35676: GO 36031
// missile := [ 1 ] ;
35678: LD_ADDR_VAR 0 14
35682: PUSH
35683: LD_INT 1
35685: PUSH
35686: EMPTY
35687: LIST
35688: ST_TO_ADDR
// if Researched ( side , tech_space ) then
35689: LD_VAR 0 9
35693: PPUSH
35694: LD_VAR 0 12
35698: PPUSH
35699: CALL_OW 325
35703: IFFALSE 35732
// missile := Replace ( missile , missile + 1 , 2 ) ;
35705: LD_ADDR_VAR 0 14
35709: PUSH
35710: LD_VAR 0 14
35714: PPUSH
35715: LD_VAR 0 14
35719: PUSH
35720: LD_INT 1
35722: PLUS
35723: PPUSH
35724: LD_INT 2
35726: PPUSH
35727: CALL_OW 1
35731: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
35732: LD_VAR 0 9
35736: PPUSH
35737: LD_VAR 0 13
35741: PPUSH
35742: CALL_OW 325
35746: PUSH
35747: LD_VAR 0 10
35751: PPUSH
35752: CALL_OW 255
35756: PPUSH
35757: LD_VAR 0 13
35761: PPUSH
35762: CALL_OW 325
35766: NOT
35767: AND
35768: IFFALSE 35797
// missile := Replace ( missile , missile + 1 , 3 ) ;
35770: LD_ADDR_VAR 0 14
35774: PUSH
35775: LD_VAR 0 14
35779: PPUSH
35780: LD_VAR 0 14
35784: PUSH
35785: LD_INT 1
35787: PLUS
35788: PPUSH
35789: LD_INT 3
35791: PPUSH
35792: CALL_OW 1
35796: ST_TO_ADDR
// if missile < 2 then
35797: LD_VAR 0 14
35801: PUSH
35802: LD_INT 2
35804: LESS
35805: IFFALSE 35809
// exit ;
35807: GO 36031
// x := GetX ( enemy ) ;
35809: LD_ADDR_VAR 0 4
35813: PUSH
35814: LD_VAR 0 10
35818: PPUSH
35819: CALL_OW 250
35823: ST_TO_ADDR
// y := GetY ( enemy ) ;
35824: LD_ADDR_VAR 0 5
35828: PUSH
35829: LD_VAR 0 10
35833: PPUSH
35834: CALL_OW 251
35838: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35839: LD_ADDR_VAR 0 6
35843: PUSH
35844: LD_VAR 0 4
35848: PUSH
35849: LD_INT 1
35851: NEG
35852: PPUSH
35853: LD_INT 1
35855: PPUSH
35856: CALL_OW 12
35860: PLUS
35861: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35862: LD_ADDR_VAR 0 7
35866: PUSH
35867: LD_VAR 0 5
35871: PUSH
35872: LD_INT 1
35874: NEG
35875: PPUSH
35876: LD_INT 1
35878: PPUSH
35879: CALL_OW 12
35883: PLUS
35884: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35885: LD_VAR 0 6
35889: PPUSH
35890: LD_VAR 0 7
35894: PPUSH
35895: CALL_OW 488
35899: NOT
35900: IFFALSE 35922
// begin _x := x ;
35902: LD_ADDR_VAR 0 6
35906: PUSH
35907: LD_VAR 0 4
35911: ST_TO_ADDR
// _y := y ;
35912: LD_ADDR_VAR 0 7
35916: PUSH
35917: LD_VAR 0 5
35921: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35922: LD_ADDR_VAR 0 3
35926: PUSH
35927: LD_INT 1
35929: PPUSH
35930: LD_VAR 0 14
35934: PPUSH
35935: CALL_OW 12
35939: ST_TO_ADDR
// case i of 1 :
35940: LD_VAR 0 3
35944: PUSH
35945: LD_INT 1
35947: DOUBLE
35948: EQUAL
35949: IFTRUE 35953
35951: GO 35970
35953: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35954: LD_VAR 0 1
35958: PPUSH
35959: LD_VAR 0 10
35963: PPUSH
35964: CALL_OW 115
35968: GO 36031
35970: LD_INT 2
35972: DOUBLE
35973: EQUAL
35974: IFTRUE 35978
35976: GO 36000
35978: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35979: LD_VAR 0 1
35983: PPUSH
35984: LD_VAR 0 6
35988: PPUSH
35989: LD_VAR 0 7
35993: PPUSH
35994: CALL_OW 153
35998: GO 36031
36000: LD_INT 3
36002: DOUBLE
36003: EQUAL
36004: IFTRUE 36008
36006: GO 36030
36008: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
36009: LD_VAR 0 1
36013: PPUSH
36014: LD_VAR 0 6
36018: PPUSH
36019: LD_VAR 0 7
36023: PPUSH
36024: CALL_OW 154
36028: GO 36031
36030: POP
// end ;
36031: LD_VAR 0 2
36035: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
36036: LD_INT 0
36038: PPUSH
36039: PPUSH
36040: PPUSH
36041: PPUSH
36042: PPUSH
36043: PPUSH
// if not unit or not building then
36044: LD_VAR 0 1
36048: NOT
36049: PUSH
36050: LD_VAR 0 2
36054: NOT
36055: OR
36056: IFFALSE 36060
// exit ;
36058: GO 36218
// x := GetX ( building ) ;
36060: LD_ADDR_VAR 0 5
36064: PUSH
36065: LD_VAR 0 2
36069: PPUSH
36070: CALL_OW 250
36074: ST_TO_ADDR
// y := GetY ( building ) ;
36075: LD_ADDR_VAR 0 6
36079: PUSH
36080: LD_VAR 0 2
36084: PPUSH
36085: CALL_OW 251
36089: ST_TO_ADDR
// for i = 0 to 5 do
36090: LD_ADDR_VAR 0 4
36094: PUSH
36095: DOUBLE
36096: LD_INT 0
36098: DEC
36099: ST_TO_ADDR
36100: LD_INT 5
36102: PUSH
36103: FOR_TO
36104: IFFALSE 36216
// begin _x := ShiftX ( x , i , 3 ) ;
36106: LD_ADDR_VAR 0 7
36110: PUSH
36111: LD_VAR 0 5
36115: PPUSH
36116: LD_VAR 0 4
36120: PPUSH
36121: LD_INT 3
36123: PPUSH
36124: CALL_OW 272
36128: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
36129: LD_ADDR_VAR 0 8
36133: PUSH
36134: LD_VAR 0 6
36138: PPUSH
36139: LD_VAR 0 4
36143: PPUSH
36144: LD_INT 3
36146: PPUSH
36147: CALL_OW 273
36151: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36152: LD_VAR 0 7
36156: PPUSH
36157: LD_VAR 0 8
36161: PPUSH
36162: CALL_OW 488
36166: NOT
36167: IFFALSE 36171
// continue ;
36169: GO 36103
// if HexInfo ( _x , _y ) = 0 then
36171: LD_VAR 0 7
36175: PPUSH
36176: LD_VAR 0 8
36180: PPUSH
36181: CALL_OW 428
36185: PUSH
36186: LD_INT 0
36188: EQUAL
36189: IFFALSE 36214
// begin ComMoveXY ( unit , _x , _y ) ;
36191: LD_VAR 0 1
36195: PPUSH
36196: LD_VAR 0 7
36200: PPUSH
36201: LD_VAR 0 8
36205: PPUSH
36206: CALL_OW 111
// exit ;
36210: POP
36211: POP
36212: GO 36218
// end ; end ;
36214: GO 36103
36216: POP
36217: POP
// end ;
36218: LD_VAR 0 3
36222: RET
// export function ScanBase ( side , base_area ) ; begin
36223: LD_INT 0
36225: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
36226: LD_ADDR_VAR 0 3
36230: PUSH
36231: LD_VAR 0 2
36235: PPUSH
36236: LD_INT 81
36238: PUSH
36239: LD_VAR 0 1
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PPUSH
36248: CALL_OW 70
36252: ST_TO_ADDR
// end ;
36253: LD_VAR 0 3
36257: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
36258: LD_INT 0
36260: PPUSH
36261: PPUSH
36262: PPUSH
36263: PPUSH
// result := false ;
36264: LD_ADDR_VAR 0 2
36268: PUSH
36269: LD_INT 0
36271: ST_TO_ADDR
// side := GetSide ( unit ) ;
36272: LD_ADDR_VAR 0 3
36276: PUSH
36277: LD_VAR 0 1
36281: PPUSH
36282: CALL_OW 255
36286: ST_TO_ADDR
// nat := GetNation ( unit ) ;
36287: LD_ADDR_VAR 0 4
36291: PUSH
36292: LD_VAR 0 1
36296: PPUSH
36297: CALL_OW 248
36301: ST_TO_ADDR
// case nat of 1 :
36302: LD_VAR 0 4
36306: PUSH
36307: LD_INT 1
36309: DOUBLE
36310: EQUAL
36311: IFTRUE 36315
36313: GO 36326
36315: POP
// tech := tech_lassight ; 2 :
36316: LD_ADDR_VAR 0 5
36320: PUSH
36321: LD_INT 12
36323: ST_TO_ADDR
36324: GO 36365
36326: LD_INT 2
36328: DOUBLE
36329: EQUAL
36330: IFTRUE 36334
36332: GO 36345
36334: POP
// tech := tech_mortar ; 3 :
36335: LD_ADDR_VAR 0 5
36339: PUSH
36340: LD_INT 41
36342: ST_TO_ADDR
36343: GO 36365
36345: LD_INT 3
36347: DOUBLE
36348: EQUAL
36349: IFTRUE 36353
36351: GO 36364
36353: POP
// tech := tech_bazooka ; end ;
36354: LD_ADDR_VAR 0 5
36358: PUSH
36359: LD_INT 44
36361: ST_TO_ADDR
36362: GO 36365
36364: POP
// if Researched ( side , tech ) then
36365: LD_VAR 0 3
36369: PPUSH
36370: LD_VAR 0 5
36374: PPUSH
36375: CALL_OW 325
36379: IFFALSE 36406
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
36381: LD_ADDR_VAR 0 2
36385: PUSH
36386: LD_INT 5
36388: PUSH
36389: LD_INT 8
36391: PUSH
36392: LD_INT 9
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: LIST
36399: PUSH
36400: LD_VAR 0 4
36404: ARRAY
36405: ST_TO_ADDR
// end ;
36406: LD_VAR 0 2
36410: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
36411: LD_INT 0
36413: PPUSH
36414: PPUSH
36415: PPUSH
// if not mines then
36416: LD_VAR 0 2
36420: NOT
36421: IFFALSE 36425
// exit ;
36423: GO 36569
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36425: LD_ADDR_VAR 0 5
36429: PUSH
36430: LD_INT 81
36432: PUSH
36433: LD_VAR 0 1
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 3
36444: PUSH
36445: LD_INT 21
36447: PUSH
36448: LD_INT 3
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PPUSH
36463: CALL_OW 69
36467: ST_TO_ADDR
// for i in mines do
36468: LD_ADDR_VAR 0 4
36472: PUSH
36473: LD_VAR 0 2
36477: PUSH
36478: FOR_IN
36479: IFFALSE 36567
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
36481: LD_VAR 0 4
36485: PUSH
36486: LD_INT 1
36488: ARRAY
36489: PPUSH
36490: LD_VAR 0 4
36494: PUSH
36495: LD_INT 2
36497: ARRAY
36498: PPUSH
36499: CALL_OW 458
36503: NOT
36504: IFFALSE 36508
// continue ;
36506: GO 36478
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
36508: LD_VAR 0 4
36512: PUSH
36513: LD_INT 1
36515: ARRAY
36516: PPUSH
36517: LD_VAR 0 4
36521: PUSH
36522: LD_INT 2
36524: ARRAY
36525: PPUSH
36526: CALL_OW 428
36530: PUSH
36531: LD_VAR 0 5
36535: IN
36536: IFFALSE 36565
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
36538: LD_VAR 0 4
36542: PUSH
36543: LD_INT 1
36545: ARRAY
36546: PPUSH
36547: LD_VAR 0 4
36551: PUSH
36552: LD_INT 2
36554: ARRAY
36555: PPUSH
36556: LD_VAR 0 1
36560: PPUSH
36561: CALL_OW 456
// end ;
36565: GO 36478
36567: POP
36568: POP
// end ;
36569: LD_VAR 0 3
36573: RET
// export function Count ( array ) ; var i ; begin
36574: LD_INT 0
36576: PPUSH
36577: PPUSH
// result := 0 ;
36578: LD_ADDR_VAR 0 2
36582: PUSH
36583: LD_INT 0
36585: ST_TO_ADDR
// for i in array do
36586: LD_ADDR_VAR 0 3
36590: PUSH
36591: LD_VAR 0 1
36595: PUSH
36596: FOR_IN
36597: IFFALSE 36621
// if i then
36599: LD_VAR 0 3
36603: IFFALSE 36619
// result := result + 1 ;
36605: LD_ADDR_VAR 0 2
36609: PUSH
36610: LD_VAR 0 2
36614: PUSH
36615: LD_INT 1
36617: PLUS
36618: ST_TO_ADDR
36619: GO 36596
36621: POP
36622: POP
// end ;
36623: LD_VAR 0 2
36627: RET
// export function IsEmpty ( building ) ; begin
36628: LD_INT 0
36630: PPUSH
// if not building then
36631: LD_VAR 0 1
36635: NOT
36636: IFFALSE 36640
// exit ;
36638: GO 36683
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
36640: LD_ADDR_VAR 0 2
36644: PUSH
36645: LD_VAR 0 1
36649: PUSH
36650: LD_INT 22
36652: PUSH
36653: LD_VAR 0 1
36657: PPUSH
36658: CALL_OW 255
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 58
36669: PUSH
36670: EMPTY
36671: LIST
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PPUSH
36677: CALL_OW 69
36681: IN
36682: ST_TO_ADDR
// end ;
36683: LD_VAR 0 2
36687: RET
// export function IsNotFull ( building ) ; var places ; begin
36688: LD_INT 0
36690: PPUSH
36691: PPUSH
// if not building then
36692: LD_VAR 0 1
36696: NOT
36697: IFFALSE 36701
// exit ;
36699: GO 36872
// result := false ;
36701: LD_ADDR_VAR 0 2
36705: PUSH
36706: LD_INT 0
36708: ST_TO_ADDR
// places := 0 ;
36709: LD_ADDR_VAR 0 3
36713: PUSH
36714: LD_INT 0
36716: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
36717: LD_VAR 0 1
36721: PPUSH
36722: CALL_OW 266
36726: PUSH
36727: LD_INT 0
36729: DOUBLE
36730: EQUAL
36731: IFTRUE 36789
36733: LD_INT 1
36735: DOUBLE
36736: EQUAL
36737: IFTRUE 36789
36739: LD_INT 6
36741: DOUBLE
36742: EQUAL
36743: IFTRUE 36789
36745: LD_INT 7
36747: DOUBLE
36748: EQUAL
36749: IFTRUE 36789
36751: LD_INT 8
36753: DOUBLE
36754: EQUAL
36755: IFTRUE 36789
36757: LD_INT 4
36759: DOUBLE
36760: EQUAL
36761: IFTRUE 36789
36763: LD_INT 5
36765: DOUBLE
36766: EQUAL
36767: IFTRUE 36789
36769: LD_INT 2
36771: DOUBLE
36772: EQUAL
36773: IFTRUE 36789
36775: LD_INT 3
36777: DOUBLE
36778: EQUAL
36779: IFTRUE 36789
36781: LD_INT 35
36783: DOUBLE
36784: EQUAL
36785: IFTRUE 36789
36787: GO 36800
36789: POP
// places := 6 ; b_bunker , b_breastwork :
36790: LD_ADDR_VAR 0 3
36794: PUSH
36795: LD_INT 6
36797: ST_TO_ADDR
36798: GO 36845
36800: LD_INT 32
36802: DOUBLE
36803: EQUAL
36804: IFTRUE 36814
36806: LD_INT 31
36808: DOUBLE
36809: EQUAL
36810: IFTRUE 36814
36812: GO 36825
36814: POP
// places := 1 ; b_control_tower :
36815: LD_ADDR_VAR 0 3
36819: PUSH
36820: LD_INT 1
36822: ST_TO_ADDR
36823: GO 36845
36825: LD_INT 36
36827: DOUBLE
36828: EQUAL
36829: IFTRUE 36833
36831: GO 36844
36833: POP
// places := 3 ; end ;
36834: LD_ADDR_VAR 0 3
36838: PUSH
36839: LD_INT 3
36841: ST_TO_ADDR
36842: GO 36845
36844: POP
// if places then
36845: LD_VAR 0 3
36849: IFFALSE 36872
// result := UnitsInside ( building ) < places ;
36851: LD_ADDR_VAR 0 2
36855: PUSH
36856: LD_VAR 0 1
36860: PPUSH
36861: CALL_OW 313
36865: PUSH
36866: LD_VAR 0 3
36870: LESS
36871: ST_TO_ADDR
// end ;
36872: LD_VAR 0 2
36876: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
36877: LD_INT 0
36879: PPUSH
36880: PPUSH
36881: PPUSH
36882: PPUSH
// tmp := [ ] ;
36883: LD_ADDR_VAR 0 3
36887: PUSH
36888: EMPTY
36889: ST_TO_ADDR
// list := [ ] ;
36890: LD_ADDR_VAR 0 5
36894: PUSH
36895: EMPTY
36896: ST_TO_ADDR
// for i = 16 to 25 do
36897: LD_ADDR_VAR 0 4
36901: PUSH
36902: DOUBLE
36903: LD_INT 16
36905: DEC
36906: ST_TO_ADDR
36907: LD_INT 25
36909: PUSH
36910: FOR_TO
36911: IFFALSE 36984
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
36913: LD_ADDR_VAR 0 3
36917: PUSH
36918: LD_VAR 0 3
36922: PUSH
36923: LD_INT 22
36925: PUSH
36926: LD_VAR 0 1
36930: PPUSH
36931: CALL_OW 255
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 91
36942: PUSH
36943: LD_VAR 0 1
36947: PUSH
36948: LD_INT 6
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 30
36958: PUSH
36959: LD_VAR 0 4
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: LIST
36972: PUSH
36973: EMPTY
36974: LIST
36975: PPUSH
36976: CALL_OW 69
36980: ADD
36981: ST_TO_ADDR
36982: GO 36910
36984: POP
36985: POP
// for i = 1 to tmp do
36986: LD_ADDR_VAR 0 4
36990: PUSH
36991: DOUBLE
36992: LD_INT 1
36994: DEC
36995: ST_TO_ADDR
36996: LD_VAR 0 3
37000: PUSH
37001: FOR_TO
37002: IFFALSE 37090
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
37004: LD_ADDR_VAR 0 5
37008: PUSH
37009: LD_VAR 0 5
37013: PUSH
37014: LD_VAR 0 3
37018: PUSH
37019: LD_VAR 0 4
37023: ARRAY
37024: PPUSH
37025: CALL_OW 266
37029: PUSH
37030: LD_VAR 0 3
37034: PUSH
37035: LD_VAR 0 4
37039: ARRAY
37040: PPUSH
37041: CALL_OW 250
37045: PUSH
37046: LD_VAR 0 3
37050: PUSH
37051: LD_VAR 0 4
37055: ARRAY
37056: PPUSH
37057: CALL_OW 251
37061: PUSH
37062: LD_VAR 0 3
37066: PUSH
37067: LD_VAR 0 4
37071: ARRAY
37072: PPUSH
37073: CALL_OW 254
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: PUSH
37084: EMPTY
37085: LIST
37086: ADD
37087: ST_TO_ADDR
37088: GO 37001
37090: POP
37091: POP
// result := list ;
37092: LD_ADDR_VAR 0 2
37096: PUSH
37097: LD_VAR 0 5
37101: ST_TO_ADDR
// end ;
37102: LD_VAR 0 2
37106: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
37107: LD_INT 0
37109: PPUSH
37110: PPUSH
37111: PPUSH
37112: PPUSH
37113: PPUSH
37114: PPUSH
37115: PPUSH
// if not factory then
37116: LD_VAR 0 1
37120: NOT
37121: IFFALSE 37125
// exit ;
37123: GO 37718
// if control = control_apeman then
37125: LD_VAR 0 4
37129: PUSH
37130: LD_INT 5
37132: EQUAL
37133: IFFALSE 37242
// begin tmp := UnitsInside ( factory ) ;
37135: LD_ADDR_VAR 0 8
37139: PUSH
37140: LD_VAR 0 1
37144: PPUSH
37145: CALL_OW 313
37149: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
37150: LD_VAR 0 8
37154: PPUSH
37155: LD_INT 25
37157: PUSH
37158: LD_INT 12
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PPUSH
37165: CALL_OW 72
37169: NOT
37170: IFFALSE 37180
// control := control_manual ;
37172: LD_ADDR_VAR 0 4
37176: PUSH
37177: LD_INT 1
37179: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
37180: LD_ADDR_VAR 0 8
37184: PUSH
37185: LD_VAR 0 1
37189: PPUSH
37190: CALL 36877 0 1
37194: ST_TO_ADDR
// if tmp then
37195: LD_VAR 0 8
37199: IFFALSE 37242
// begin for i in tmp do
37201: LD_ADDR_VAR 0 7
37205: PUSH
37206: LD_VAR 0 8
37210: PUSH
37211: FOR_IN
37212: IFFALSE 37240
// if i [ 1 ] = b_ext_radio then
37214: LD_VAR 0 7
37218: PUSH
37219: LD_INT 1
37221: ARRAY
37222: PUSH
37223: LD_INT 22
37225: EQUAL
37226: IFFALSE 37238
// begin control := control_remote ;
37228: LD_ADDR_VAR 0 4
37232: PUSH
37233: LD_INT 2
37235: ST_TO_ADDR
// break ;
37236: GO 37240
// end ;
37238: GO 37211
37240: POP
37241: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37242: LD_VAR 0 1
37246: PPUSH
37247: LD_VAR 0 2
37251: PPUSH
37252: LD_VAR 0 3
37256: PPUSH
37257: LD_VAR 0 4
37261: PPUSH
37262: LD_VAR 0 5
37266: PPUSH
37267: CALL_OW 448
37271: IFFALSE 37306
// begin result := [ chassis , engine , control , weapon ] ;
37273: LD_ADDR_VAR 0 6
37277: PUSH
37278: LD_VAR 0 2
37282: PUSH
37283: LD_VAR 0 3
37287: PUSH
37288: LD_VAR 0 4
37292: PUSH
37293: LD_VAR 0 5
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: ST_TO_ADDR
// exit ;
37304: GO 37718
// end ; _chassis := AvailableChassisList ( factory ) ;
37306: LD_ADDR_VAR 0 9
37310: PUSH
37311: LD_VAR 0 1
37315: PPUSH
37316: CALL_OW 475
37320: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
37321: LD_ADDR_VAR 0 11
37325: PUSH
37326: LD_VAR 0 1
37330: PPUSH
37331: CALL_OW 476
37335: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
37336: LD_ADDR_VAR 0 12
37340: PUSH
37341: LD_VAR 0 1
37345: PPUSH
37346: CALL_OW 477
37350: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
37351: LD_ADDR_VAR 0 10
37355: PUSH
37356: LD_VAR 0 1
37360: PPUSH
37361: CALL_OW 478
37365: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
37366: LD_VAR 0 9
37370: NOT
37371: PUSH
37372: LD_VAR 0 11
37376: NOT
37377: OR
37378: PUSH
37379: LD_VAR 0 12
37383: NOT
37384: OR
37385: PUSH
37386: LD_VAR 0 10
37390: NOT
37391: OR
37392: IFFALSE 37427
// begin result := [ chassis , engine , control , weapon ] ;
37394: LD_ADDR_VAR 0 6
37398: PUSH
37399: LD_VAR 0 2
37403: PUSH
37404: LD_VAR 0 3
37408: PUSH
37409: LD_VAR 0 4
37413: PUSH
37414: LD_VAR 0 5
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: LIST
37423: LIST
37424: ST_TO_ADDR
// exit ;
37425: GO 37718
// end ; if not chassis in _chassis then
37427: LD_VAR 0 2
37431: PUSH
37432: LD_VAR 0 9
37436: IN
37437: NOT
37438: IFFALSE 37464
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
37440: LD_ADDR_VAR 0 2
37444: PUSH
37445: LD_VAR 0 9
37449: PUSH
37450: LD_INT 1
37452: PPUSH
37453: LD_VAR 0 9
37457: PPUSH
37458: CALL_OW 12
37462: ARRAY
37463: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
37464: LD_VAR 0 2
37468: PPUSH
37469: LD_VAR 0 3
37473: PPUSH
37474: CALL 37723 0 2
37478: NOT
37479: IFFALSE 37538
// repeat engine := _engine [ 1 ] ;
37481: LD_ADDR_VAR 0 3
37485: PUSH
37486: LD_VAR 0 11
37490: PUSH
37491: LD_INT 1
37493: ARRAY
37494: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
37495: LD_ADDR_VAR 0 11
37499: PUSH
37500: LD_VAR 0 11
37504: PPUSH
37505: LD_INT 1
37507: PPUSH
37508: CALL_OW 3
37512: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
37513: LD_VAR 0 2
37517: PPUSH
37518: LD_VAR 0 3
37522: PPUSH
37523: CALL 37723 0 2
37527: PUSH
37528: LD_VAR 0 11
37532: PUSH
37533: EMPTY
37534: EQUAL
37535: OR
37536: IFFALSE 37481
// if not control in _control then
37538: LD_VAR 0 4
37542: PUSH
37543: LD_VAR 0 12
37547: IN
37548: NOT
37549: IFFALSE 37575
// control := _control [ rand ( 1 , _control ) ] ;
37551: LD_ADDR_VAR 0 4
37555: PUSH
37556: LD_VAR 0 12
37560: PUSH
37561: LD_INT 1
37563: PPUSH
37564: LD_VAR 0 12
37568: PPUSH
37569: CALL_OW 12
37573: ARRAY
37574: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
37575: LD_VAR 0 2
37579: PPUSH
37580: LD_VAR 0 5
37584: PPUSH
37585: CALL 37943 0 2
37589: NOT
37590: IFFALSE 37649
// repeat weapon := _weapon [ 1 ] ;
37592: LD_ADDR_VAR 0 5
37596: PUSH
37597: LD_VAR 0 10
37601: PUSH
37602: LD_INT 1
37604: ARRAY
37605: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
37606: LD_ADDR_VAR 0 10
37610: PUSH
37611: LD_VAR 0 10
37615: PPUSH
37616: LD_INT 1
37618: PPUSH
37619: CALL_OW 3
37623: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
37624: LD_VAR 0 2
37628: PPUSH
37629: LD_VAR 0 5
37633: PPUSH
37634: CALL 37943 0 2
37638: PUSH
37639: LD_VAR 0 10
37643: PUSH
37644: EMPTY
37645: EQUAL
37646: OR
37647: IFFALSE 37592
// result := [ ] ;
37649: LD_ADDR_VAR 0 6
37653: PUSH
37654: EMPTY
37655: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37656: LD_VAR 0 1
37660: PPUSH
37661: LD_VAR 0 2
37665: PPUSH
37666: LD_VAR 0 3
37670: PPUSH
37671: LD_VAR 0 4
37675: PPUSH
37676: LD_VAR 0 5
37680: PPUSH
37681: CALL_OW 448
37685: IFFALSE 37718
// result := [ chassis , engine , control , weapon ] ;
37687: LD_ADDR_VAR 0 6
37691: PUSH
37692: LD_VAR 0 2
37696: PUSH
37697: LD_VAR 0 3
37701: PUSH
37702: LD_VAR 0 4
37706: PUSH
37707: LD_VAR 0 5
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: ST_TO_ADDR
// end ;
37718: LD_VAR 0 6
37722: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
37723: LD_INT 0
37725: PPUSH
// if not chassis or not engine then
37726: LD_VAR 0 1
37730: NOT
37731: PUSH
37732: LD_VAR 0 2
37736: NOT
37737: OR
37738: IFFALSE 37742
// exit ;
37740: GO 37938
// case engine of engine_solar :
37742: LD_VAR 0 2
37746: PUSH
37747: LD_INT 2
37749: DOUBLE
37750: EQUAL
37751: IFTRUE 37755
37753: GO 37793
37755: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
37756: LD_ADDR_VAR 0 3
37760: PUSH
37761: LD_INT 11
37763: PUSH
37764: LD_INT 12
37766: PUSH
37767: LD_INT 13
37769: PUSH
37770: LD_INT 14
37772: PUSH
37773: LD_INT 1
37775: PUSH
37776: LD_INT 2
37778: PUSH
37779: LD_INT 3
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: ST_TO_ADDR
37791: GO 37922
37793: LD_INT 1
37795: DOUBLE
37796: EQUAL
37797: IFTRUE 37801
37799: GO 37863
37801: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
37802: LD_ADDR_VAR 0 3
37806: PUSH
37807: LD_INT 11
37809: PUSH
37810: LD_INT 12
37812: PUSH
37813: LD_INT 13
37815: PUSH
37816: LD_INT 14
37818: PUSH
37819: LD_INT 1
37821: PUSH
37822: LD_INT 2
37824: PUSH
37825: LD_INT 3
37827: PUSH
37828: LD_INT 4
37830: PUSH
37831: LD_INT 5
37833: PUSH
37834: LD_INT 21
37836: PUSH
37837: LD_INT 23
37839: PUSH
37840: LD_INT 22
37842: PUSH
37843: LD_INT 24
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: ST_TO_ADDR
37861: GO 37922
37863: LD_INT 3
37865: DOUBLE
37866: EQUAL
37867: IFTRUE 37871
37869: GO 37921
37871: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37872: LD_ADDR_VAR 0 3
37876: PUSH
37877: LD_INT 13
37879: PUSH
37880: LD_INT 14
37882: PUSH
37883: LD_INT 2
37885: PUSH
37886: LD_INT 3
37888: PUSH
37889: LD_INT 4
37891: PUSH
37892: LD_INT 5
37894: PUSH
37895: LD_INT 21
37897: PUSH
37898: LD_INT 22
37900: PUSH
37901: LD_INT 23
37903: PUSH
37904: LD_INT 24
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: ST_TO_ADDR
37919: GO 37922
37921: POP
// result := ( chassis in result ) ;
37922: LD_ADDR_VAR 0 3
37926: PUSH
37927: LD_VAR 0 1
37931: PUSH
37932: LD_VAR 0 3
37936: IN
37937: ST_TO_ADDR
// end ;
37938: LD_VAR 0 3
37942: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
37943: LD_INT 0
37945: PPUSH
// if not chassis or not weapon then
37946: LD_VAR 0 1
37950: NOT
37951: PUSH
37952: LD_VAR 0 2
37956: NOT
37957: OR
37958: IFFALSE 37962
// exit ;
37960: GO 39024
// case weapon of us_machine_gun :
37962: LD_VAR 0 2
37966: PUSH
37967: LD_INT 2
37969: DOUBLE
37970: EQUAL
37971: IFTRUE 37975
37973: GO 38005
37975: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
37976: LD_ADDR_VAR 0 3
37980: PUSH
37981: LD_INT 1
37983: PUSH
37984: LD_INT 2
37986: PUSH
37987: LD_INT 3
37989: PUSH
37990: LD_INT 4
37992: PUSH
37993: LD_INT 5
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: ST_TO_ADDR
38003: GO 39008
38005: LD_INT 3
38007: DOUBLE
38008: EQUAL
38009: IFTRUE 38013
38011: GO 38043
38013: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
38014: LD_ADDR_VAR 0 3
38018: PUSH
38019: LD_INT 1
38021: PUSH
38022: LD_INT 2
38024: PUSH
38025: LD_INT 3
38027: PUSH
38028: LD_INT 4
38030: PUSH
38031: LD_INT 5
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: ST_TO_ADDR
38041: GO 39008
38043: LD_INT 11
38045: DOUBLE
38046: EQUAL
38047: IFTRUE 38051
38049: GO 38081
38051: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
38052: LD_ADDR_VAR 0 3
38056: PUSH
38057: LD_INT 1
38059: PUSH
38060: LD_INT 2
38062: PUSH
38063: LD_INT 3
38065: PUSH
38066: LD_INT 4
38068: PUSH
38069: LD_INT 5
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: ST_TO_ADDR
38079: GO 39008
38081: LD_INT 4
38083: DOUBLE
38084: EQUAL
38085: IFTRUE 38089
38087: GO 38115
38089: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
38090: LD_ADDR_VAR 0 3
38094: PUSH
38095: LD_INT 2
38097: PUSH
38098: LD_INT 3
38100: PUSH
38101: LD_INT 4
38103: PUSH
38104: LD_INT 5
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: ST_TO_ADDR
38113: GO 39008
38115: LD_INT 5
38117: DOUBLE
38118: EQUAL
38119: IFTRUE 38123
38121: GO 38149
38123: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
38124: LD_ADDR_VAR 0 3
38128: PUSH
38129: LD_INT 2
38131: PUSH
38132: LD_INT 3
38134: PUSH
38135: LD_INT 4
38137: PUSH
38138: LD_INT 5
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: ST_TO_ADDR
38147: GO 39008
38149: LD_INT 9
38151: DOUBLE
38152: EQUAL
38153: IFTRUE 38157
38155: GO 38183
38157: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
38158: LD_ADDR_VAR 0 3
38162: PUSH
38163: LD_INT 2
38165: PUSH
38166: LD_INT 3
38168: PUSH
38169: LD_INT 4
38171: PUSH
38172: LD_INT 5
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: ST_TO_ADDR
38181: GO 39008
38183: LD_INT 7
38185: DOUBLE
38186: EQUAL
38187: IFTRUE 38191
38189: GO 38217
38191: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
38192: LD_ADDR_VAR 0 3
38196: PUSH
38197: LD_INT 2
38199: PUSH
38200: LD_INT 3
38202: PUSH
38203: LD_INT 4
38205: PUSH
38206: LD_INT 5
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: ST_TO_ADDR
38215: GO 39008
38217: LD_INT 12
38219: DOUBLE
38220: EQUAL
38221: IFTRUE 38225
38223: GO 38251
38225: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
38226: LD_ADDR_VAR 0 3
38230: PUSH
38231: LD_INT 2
38233: PUSH
38234: LD_INT 3
38236: PUSH
38237: LD_INT 4
38239: PUSH
38240: LD_INT 5
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: ST_TO_ADDR
38249: GO 39008
38251: LD_INT 13
38253: DOUBLE
38254: EQUAL
38255: IFTRUE 38259
38257: GO 38285
38259: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
38260: LD_ADDR_VAR 0 3
38264: PUSH
38265: LD_INT 2
38267: PUSH
38268: LD_INT 3
38270: PUSH
38271: LD_INT 4
38273: PUSH
38274: LD_INT 5
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: ST_TO_ADDR
38283: GO 39008
38285: LD_INT 14
38287: DOUBLE
38288: EQUAL
38289: IFTRUE 38293
38291: GO 38311
38293: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
38294: LD_ADDR_VAR 0 3
38298: PUSH
38299: LD_INT 4
38301: PUSH
38302: LD_INT 5
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: ST_TO_ADDR
38309: GO 39008
38311: LD_INT 6
38313: DOUBLE
38314: EQUAL
38315: IFTRUE 38319
38317: GO 38337
38319: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
38320: LD_ADDR_VAR 0 3
38324: PUSH
38325: LD_INT 4
38327: PUSH
38328: LD_INT 5
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: ST_TO_ADDR
38335: GO 39008
38337: LD_INT 10
38339: DOUBLE
38340: EQUAL
38341: IFTRUE 38345
38343: GO 38363
38345: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
38346: LD_ADDR_VAR 0 3
38350: PUSH
38351: LD_INT 4
38353: PUSH
38354: LD_INT 5
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: ST_TO_ADDR
38361: GO 39008
38363: LD_INT 22
38365: DOUBLE
38366: EQUAL
38367: IFTRUE 38371
38369: GO 38397
38371: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
38372: LD_ADDR_VAR 0 3
38376: PUSH
38377: LD_INT 11
38379: PUSH
38380: LD_INT 12
38382: PUSH
38383: LD_INT 13
38385: PUSH
38386: LD_INT 14
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: ST_TO_ADDR
38395: GO 39008
38397: LD_INT 23
38399: DOUBLE
38400: EQUAL
38401: IFTRUE 38405
38403: GO 38431
38405: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
38406: LD_ADDR_VAR 0 3
38410: PUSH
38411: LD_INT 11
38413: PUSH
38414: LD_INT 12
38416: PUSH
38417: LD_INT 13
38419: PUSH
38420: LD_INT 14
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: ST_TO_ADDR
38429: GO 39008
38431: LD_INT 24
38433: DOUBLE
38434: EQUAL
38435: IFTRUE 38439
38437: GO 38465
38439: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
38440: LD_ADDR_VAR 0 3
38444: PUSH
38445: LD_INT 11
38447: PUSH
38448: LD_INT 12
38450: PUSH
38451: LD_INT 13
38453: PUSH
38454: LD_INT 14
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: ST_TO_ADDR
38463: GO 39008
38465: LD_INT 30
38467: DOUBLE
38468: EQUAL
38469: IFTRUE 38473
38471: GO 38499
38473: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
38474: LD_ADDR_VAR 0 3
38478: PUSH
38479: LD_INT 11
38481: PUSH
38482: LD_INT 12
38484: PUSH
38485: LD_INT 13
38487: PUSH
38488: LD_INT 14
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: ST_TO_ADDR
38497: GO 39008
38499: LD_INT 25
38501: DOUBLE
38502: EQUAL
38503: IFTRUE 38507
38505: GO 38525
38507: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
38508: LD_ADDR_VAR 0 3
38512: PUSH
38513: LD_INT 13
38515: PUSH
38516: LD_INT 14
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: ST_TO_ADDR
38523: GO 39008
38525: LD_INT 27
38527: DOUBLE
38528: EQUAL
38529: IFTRUE 38533
38531: GO 38551
38533: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
38534: LD_ADDR_VAR 0 3
38538: PUSH
38539: LD_INT 13
38541: PUSH
38542: LD_INT 14
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: ST_TO_ADDR
38549: GO 39008
38551: LD_EXP 49
38555: DOUBLE
38556: EQUAL
38557: IFTRUE 38561
38559: GO 38587
38561: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
38562: LD_ADDR_VAR 0 3
38566: PUSH
38567: LD_INT 11
38569: PUSH
38570: LD_INT 12
38572: PUSH
38573: LD_INT 13
38575: PUSH
38576: LD_INT 14
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: ST_TO_ADDR
38585: GO 39008
38587: LD_INT 28
38589: DOUBLE
38590: EQUAL
38591: IFTRUE 38595
38593: GO 38613
38595: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
38596: LD_ADDR_VAR 0 3
38600: PUSH
38601: LD_INT 13
38603: PUSH
38604: LD_INT 14
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: ST_TO_ADDR
38611: GO 39008
38613: LD_INT 29
38615: DOUBLE
38616: EQUAL
38617: IFTRUE 38621
38619: GO 38639
38621: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
38622: LD_ADDR_VAR 0 3
38626: PUSH
38627: LD_INT 13
38629: PUSH
38630: LD_INT 14
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: ST_TO_ADDR
38637: GO 39008
38639: LD_INT 31
38641: DOUBLE
38642: EQUAL
38643: IFTRUE 38647
38645: GO 38665
38647: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
38648: LD_ADDR_VAR 0 3
38652: PUSH
38653: LD_INT 13
38655: PUSH
38656: LD_INT 14
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: ST_TO_ADDR
38663: GO 39008
38665: LD_INT 26
38667: DOUBLE
38668: EQUAL
38669: IFTRUE 38673
38671: GO 38691
38673: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
38674: LD_ADDR_VAR 0 3
38678: PUSH
38679: LD_INT 13
38681: PUSH
38682: LD_INT 14
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: ST_TO_ADDR
38689: GO 39008
38691: LD_INT 42
38693: DOUBLE
38694: EQUAL
38695: IFTRUE 38699
38697: GO 38725
38699: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
38700: LD_ADDR_VAR 0 3
38704: PUSH
38705: LD_INT 21
38707: PUSH
38708: LD_INT 22
38710: PUSH
38711: LD_INT 23
38713: PUSH
38714: LD_INT 24
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: ST_TO_ADDR
38723: GO 39008
38725: LD_INT 43
38727: DOUBLE
38728: EQUAL
38729: IFTRUE 38733
38731: GO 38759
38733: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
38734: LD_ADDR_VAR 0 3
38738: PUSH
38739: LD_INT 21
38741: PUSH
38742: LD_INT 22
38744: PUSH
38745: LD_INT 23
38747: PUSH
38748: LD_INT 24
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: ST_TO_ADDR
38757: GO 39008
38759: LD_INT 44
38761: DOUBLE
38762: EQUAL
38763: IFTRUE 38767
38765: GO 38793
38767: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
38768: LD_ADDR_VAR 0 3
38772: PUSH
38773: LD_INT 21
38775: PUSH
38776: LD_INT 22
38778: PUSH
38779: LD_INT 23
38781: PUSH
38782: LD_INT 24
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: ST_TO_ADDR
38791: GO 39008
38793: LD_INT 45
38795: DOUBLE
38796: EQUAL
38797: IFTRUE 38801
38799: GO 38827
38801: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
38802: LD_ADDR_VAR 0 3
38806: PUSH
38807: LD_INT 21
38809: PUSH
38810: LD_INT 22
38812: PUSH
38813: LD_INT 23
38815: PUSH
38816: LD_INT 24
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: ST_TO_ADDR
38825: GO 39008
38827: LD_INT 49
38829: DOUBLE
38830: EQUAL
38831: IFTRUE 38835
38833: GO 38861
38835: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
38836: LD_ADDR_VAR 0 3
38840: PUSH
38841: LD_INT 21
38843: PUSH
38844: LD_INT 22
38846: PUSH
38847: LD_INT 23
38849: PUSH
38850: LD_INT 24
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: ST_TO_ADDR
38859: GO 39008
38861: LD_INT 51
38863: DOUBLE
38864: EQUAL
38865: IFTRUE 38869
38867: GO 38895
38869: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
38870: LD_ADDR_VAR 0 3
38874: PUSH
38875: LD_INT 21
38877: PUSH
38878: LD_INT 22
38880: PUSH
38881: LD_INT 23
38883: PUSH
38884: LD_INT 24
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: ST_TO_ADDR
38893: GO 39008
38895: LD_INT 52
38897: DOUBLE
38898: EQUAL
38899: IFTRUE 38903
38901: GO 38929
38903: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
38904: LD_ADDR_VAR 0 3
38908: PUSH
38909: LD_INT 21
38911: PUSH
38912: LD_INT 22
38914: PUSH
38915: LD_INT 23
38917: PUSH
38918: LD_INT 24
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: ST_TO_ADDR
38927: GO 39008
38929: LD_INT 53
38931: DOUBLE
38932: EQUAL
38933: IFTRUE 38937
38935: GO 38955
38937: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
38938: LD_ADDR_VAR 0 3
38942: PUSH
38943: LD_INT 23
38945: PUSH
38946: LD_INT 24
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: ST_TO_ADDR
38953: GO 39008
38955: LD_INT 46
38957: DOUBLE
38958: EQUAL
38959: IFTRUE 38963
38961: GO 38981
38963: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
38964: LD_ADDR_VAR 0 3
38968: PUSH
38969: LD_INT 23
38971: PUSH
38972: LD_INT 24
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: ST_TO_ADDR
38979: GO 39008
38981: LD_INT 47
38983: DOUBLE
38984: EQUAL
38985: IFTRUE 38989
38987: GO 39007
38989: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38990: LD_ADDR_VAR 0 3
38994: PUSH
38995: LD_INT 23
38997: PUSH
38998: LD_INT 24
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: ST_TO_ADDR
39005: GO 39008
39007: POP
// result := ( chassis in result ) ;
39008: LD_ADDR_VAR 0 3
39012: PUSH
39013: LD_VAR 0 1
39017: PUSH
39018: LD_VAR 0 3
39022: IN
39023: ST_TO_ADDR
// end ;
39024: LD_VAR 0 3
39028: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
39029: LD_INT 0
39031: PPUSH
39032: PPUSH
39033: PPUSH
39034: PPUSH
39035: PPUSH
39036: PPUSH
39037: PPUSH
// result := array ;
39038: LD_ADDR_VAR 0 5
39042: PUSH
39043: LD_VAR 0 1
39047: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
39048: LD_VAR 0 1
39052: NOT
39053: PUSH
39054: LD_VAR 0 2
39058: NOT
39059: OR
39060: PUSH
39061: LD_VAR 0 3
39065: NOT
39066: OR
39067: PUSH
39068: LD_VAR 0 2
39072: PUSH
39073: LD_VAR 0 1
39077: GREATER
39078: OR
39079: PUSH
39080: LD_VAR 0 3
39084: PUSH
39085: LD_VAR 0 1
39089: GREATER
39090: OR
39091: IFFALSE 39095
// exit ;
39093: GO 39391
// if direction then
39095: LD_VAR 0 4
39099: IFFALSE 39163
// begin d := 1 ;
39101: LD_ADDR_VAR 0 9
39105: PUSH
39106: LD_INT 1
39108: ST_TO_ADDR
// if i_from > i_to then
39109: LD_VAR 0 2
39113: PUSH
39114: LD_VAR 0 3
39118: GREATER
39119: IFFALSE 39145
// length := ( array - i_from ) + i_to else
39121: LD_ADDR_VAR 0 11
39125: PUSH
39126: LD_VAR 0 1
39130: PUSH
39131: LD_VAR 0 2
39135: MINUS
39136: PUSH
39137: LD_VAR 0 3
39141: PLUS
39142: ST_TO_ADDR
39143: GO 39161
// length := i_to - i_from ;
39145: LD_ADDR_VAR 0 11
39149: PUSH
39150: LD_VAR 0 3
39154: PUSH
39155: LD_VAR 0 2
39159: MINUS
39160: ST_TO_ADDR
// end else
39161: GO 39224
// begin d := - 1 ;
39163: LD_ADDR_VAR 0 9
39167: PUSH
39168: LD_INT 1
39170: NEG
39171: ST_TO_ADDR
// if i_from > i_to then
39172: LD_VAR 0 2
39176: PUSH
39177: LD_VAR 0 3
39181: GREATER
39182: IFFALSE 39202
// length := i_from - i_to else
39184: LD_ADDR_VAR 0 11
39188: PUSH
39189: LD_VAR 0 2
39193: PUSH
39194: LD_VAR 0 3
39198: MINUS
39199: ST_TO_ADDR
39200: GO 39224
// length := ( array - i_to ) + i_from ;
39202: LD_ADDR_VAR 0 11
39206: PUSH
39207: LD_VAR 0 1
39211: PUSH
39212: LD_VAR 0 3
39216: MINUS
39217: PUSH
39218: LD_VAR 0 2
39222: PLUS
39223: ST_TO_ADDR
// end ; if not length then
39224: LD_VAR 0 11
39228: NOT
39229: IFFALSE 39233
// exit ;
39231: GO 39391
// tmp := array ;
39233: LD_ADDR_VAR 0 10
39237: PUSH
39238: LD_VAR 0 1
39242: ST_TO_ADDR
// for i = 1 to length do
39243: LD_ADDR_VAR 0 6
39247: PUSH
39248: DOUBLE
39249: LD_INT 1
39251: DEC
39252: ST_TO_ADDR
39253: LD_VAR 0 11
39257: PUSH
39258: FOR_TO
39259: IFFALSE 39379
// begin for j = 1 to array do
39261: LD_ADDR_VAR 0 7
39265: PUSH
39266: DOUBLE
39267: LD_INT 1
39269: DEC
39270: ST_TO_ADDR
39271: LD_VAR 0 1
39275: PUSH
39276: FOR_TO
39277: IFFALSE 39365
// begin k := j + d ;
39279: LD_ADDR_VAR 0 8
39283: PUSH
39284: LD_VAR 0 7
39288: PUSH
39289: LD_VAR 0 9
39293: PLUS
39294: ST_TO_ADDR
// if k > array then
39295: LD_VAR 0 8
39299: PUSH
39300: LD_VAR 0 1
39304: GREATER
39305: IFFALSE 39315
// k := 1 ;
39307: LD_ADDR_VAR 0 8
39311: PUSH
39312: LD_INT 1
39314: ST_TO_ADDR
// if not k then
39315: LD_VAR 0 8
39319: NOT
39320: IFFALSE 39332
// k := array ;
39322: LD_ADDR_VAR 0 8
39326: PUSH
39327: LD_VAR 0 1
39331: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
39332: LD_ADDR_VAR 0 10
39336: PUSH
39337: LD_VAR 0 10
39341: PPUSH
39342: LD_VAR 0 8
39346: PPUSH
39347: LD_VAR 0 1
39351: PUSH
39352: LD_VAR 0 7
39356: ARRAY
39357: PPUSH
39358: CALL_OW 1
39362: ST_TO_ADDR
// end ;
39363: GO 39276
39365: POP
39366: POP
// array := tmp ;
39367: LD_ADDR_VAR 0 1
39371: PUSH
39372: LD_VAR 0 10
39376: ST_TO_ADDR
// end ;
39377: GO 39258
39379: POP
39380: POP
// result := array ;
39381: LD_ADDR_VAR 0 5
39385: PUSH
39386: LD_VAR 0 1
39390: ST_TO_ADDR
// end ;
39391: LD_VAR 0 5
39395: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
39396: LD_INT 0
39398: PPUSH
39399: PPUSH
// result := 0 ;
39400: LD_ADDR_VAR 0 3
39404: PUSH
39405: LD_INT 0
39407: ST_TO_ADDR
// if not array or not value in array then
39408: LD_VAR 0 1
39412: NOT
39413: PUSH
39414: LD_VAR 0 2
39418: PUSH
39419: LD_VAR 0 1
39423: IN
39424: NOT
39425: OR
39426: IFFALSE 39430
// exit ;
39428: GO 39484
// for i = 1 to array do
39430: LD_ADDR_VAR 0 4
39434: PUSH
39435: DOUBLE
39436: LD_INT 1
39438: DEC
39439: ST_TO_ADDR
39440: LD_VAR 0 1
39444: PUSH
39445: FOR_TO
39446: IFFALSE 39482
// if value = array [ i ] then
39448: LD_VAR 0 2
39452: PUSH
39453: LD_VAR 0 1
39457: PUSH
39458: LD_VAR 0 4
39462: ARRAY
39463: EQUAL
39464: IFFALSE 39480
// begin result := i ;
39466: LD_ADDR_VAR 0 3
39470: PUSH
39471: LD_VAR 0 4
39475: ST_TO_ADDR
// exit ;
39476: POP
39477: POP
39478: GO 39484
// end ;
39480: GO 39445
39482: POP
39483: POP
// end ;
39484: LD_VAR 0 3
39488: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
39489: LD_INT 0
39491: PPUSH
// vc_chassis := chassis ;
39492: LD_ADDR_OWVAR 37
39496: PUSH
39497: LD_VAR 0 1
39501: ST_TO_ADDR
// vc_engine := engine ;
39502: LD_ADDR_OWVAR 39
39506: PUSH
39507: LD_VAR 0 2
39511: ST_TO_ADDR
// vc_control := control ;
39512: LD_ADDR_OWVAR 38
39516: PUSH
39517: LD_VAR 0 3
39521: ST_TO_ADDR
// vc_weapon := weapon ;
39522: LD_ADDR_OWVAR 40
39526: PUSH
39527: LD_VAR 0 4
39531: ST_TO_ADDR
// vc_fuel_battery := fuel ;
39532: LD_ADDR_OWVAR 41
39536: PUSH
39537: LD_VAR 0 5
39541: ST_TO_ADDR
// end ;
39542: LD_VAR 0 6
39546: RET
// export function WantPlant ( unit ) ; var task ; begin
39547: LD_INT 0
39549: PPUSH
39550: PPUSH
// result := false ;
39551: LD_ADDR_VAR 0 2
39555: PUSH
39556: LD_INT 0
39558: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
39559: LD_ADDR_VAR 0 3
39563: PUSH
39564: LD_VAR 0 1
39568: PPUSH
39569: CALL_OW 437
39573: ST_TO_ADDR
// if task then
39574: LD_VAR 0 3
39578: IFFALSE 39606
// if task [ 1 ] [ 1 ] = p then
39580: LD_VAR 0 3
39584: PUSH
39585: LD_INT 1
39587: ARRAY
39588: PUSH
39589: LD_INT 1
39591: ARRAY
39592: PUSH
39593: LD_STRING p
39595: EQUAL
39596: IFFALSE 39606
// result := true ;
39598: LD_ADDR_VAR 0 2
39602: PUSH
39603: LD_INT 1
39605: ST_TO_ADDR
// end ;
39606: LD_VAR 0 2
39610: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
39611: LD_INT 0
39613: PPUSH
39614: PPUSH
39615: PPUSH
39616: PPUSH
// if pos < 1 then
39617: LD_VAR 0 2
39621: PUSH
39622: LD_INT 1
39624: LESS
39625: IFFALSE 39629
// exit ;
39627: GO 39932
// if pos = 1 then
39629: LD_VAR 0 2
39633: PUSH
39634: LD_INT 1
39636: EQUAL
39637: IFFALSE 39670
// result := Replace ( arr , pos [ 1 ] , value ) else
39639: LD_ADDR_VAR 0 4
39643: PUSH
39644: LD_VAR 0 1
39648: PPUSH
39649: LD_VAR 0 2
39653: PUSH
39654: LD_INT 1
39656: ARRAY
39657: PPUSH
39658: LD_VAR 0 3
39662: PPUSH
39663: CALL_OW 1
39667: ST_TO_ADDR
39668: GO 39932
// begin tmp := arr ;
39670: LD_ADDR_VAR 0 6
39674: PUSH
39675: LD_VAR 0 1
39679: ST_TO_ADDR
// s_arr := [ tmp ] ;
39680: LD_ADDR_VAR 0 7
39684: PUSH
39685: LD_VAR 0 6
39689: PUSH
39690: EMPTY
39691: LIST
39692: ST_TO_ADDR
// for i = 1 to pos - 1 do
39693: LD_ADDR_VAR 0 5
39697: PUSH
39698: DOUBLE
39699: LD_INT 1
39701: DEC
39702: ST_TO_ADDR
39703: LD_VAR 0 2
39707: PUSH
39708: LD_INT 1
39710: MINUS
39711: PUSH
39712: FOR_TO
39713: IFFALSE 39758
// begin tmp := tmp [ pos [ i ] ] ;
39715: LD_ADDR_VAR 0 6
39719: PUSH
39720: LD_VAR 0 6
39724: PUSH
39725: LD_VAR 0 2
39729: PUSH
39730: LD_VAR 0 5
39734: ARRAY
39735: ARRAY
39736: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
39737: LD_ADDR_VAR 0 7
39741: PUSH
39742: LD_VAR 0 7
39746: PUSH
39747: LD_VAR 0 6
39751: PUSH
39752: EMPTY
39753: LIST
39754: ADD
39755: ST_TO_ADDR
// end ;
39756: GO 39712
39758: POP
39759: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
39760: LD_ADDR_VAR 0 6
39764: PUSH
39765: LD_VAR 0 6
39769: PPUSH
39770: LD_VAR 0 2
39774: PUSH
39775: LD_VAR 0 2
39779: ARRAY
39780: PPUSH
39781: LD_VAR 0 3
39785: PPUSH
39786: CALL_OW 1
39790: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
39791: LD_ADDR_VAR 0 7
39795: PUSH
39796: LD_VAR 0 7
39800: PPUSH
39801: LD_VAR 0 7
39805: PPUSH
39806: LD_VAR 0 6
39810: PPUSH
39811: CALL_OW 1
39815: ST_TO_ADDR
// for i = s_arr downto 2 do
39816: LD_ADDR_VAR 0 5
39820: PUSH
39821: DOUBLE
39822: LD_VAR 0 7
39826: INC
39827: ST_TO_ADDR
39828: LD_INT 2
39830: PUSH
39831: FOR_DOWNTO
39832: IFFALSE 39916
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
39834: LD_ADDR_VAR 0 6
39838: PUSH
39839: LD_VAR 0 7
39843: PUSH
39844: LD_VAR 0 5
39848: PUSH
39849: LD_INT 1
39851: MINUS
39852: ARRAY
39853: PPUSH
39854: LD_VAR 0 2
39858: PUSH
39859: LD_VAR 0 5
39863: PUSH
39864: LD_INT 1
39866: MINUS
39867: ARRAY
39868: PPUSH
39869: LD_VAR 0 7
39873: PUSH
39874: LD_VAR 0 5
39878: ARRAY
39879: PPUSH
39880: CALL_OW 1
39884: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
39885: LD_ADDR_VAR 0 7
39889: PUSH
39890: LD_VAR 0 7
39894: PPUSH
39895: LD_VAR 0 5
39899: PUSH
39900: LD_INT 1
39902: MINUS
39903: PPUSH
39904: LD_VAR 0 6
39908: PPUSH
39909: CALL_OW 1
39913: ST_TO_ADDR
// end ;
39914: GO 39831
39916: POP
39917: POP
// result := s_arr [ 1 ] ;
39918: LD_ADDR_VAR 0 4
39922: PUSH
39923: LD_VAR 0 7
39927: PUSH
39928: LD_INT 1
39930: ARRAY
39931: ST_TO_ADDR
// end ; end ;
39932: LD_VAR 0 4
39936: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
39937: LD_INT 0
39939: PPUSH
39940: PPUSH
// if not list then
39941: LD_VAR 0 1
39945: NOT
39946: IFFALSE 39950
// exit ;
39948: GO 40041
// i := list [ pos1 ] ;
39950: LD_ADDR_VAR 0 5
39954: PUSH
39955: LD_VAR 0 1
39959: PUSH
39960: LD_VAR 0 2
39964: ARRAY
39965: ST_TO_ADDR
// if not i then
39966: LD_VAR 0 5
39970: NOT
39971: IFFALSE 39975
// exit ;
39973: GO 40041
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39975: LD_ADDR_VAR 0 1
39979: PUSH
39980: LD_VAR 0 1
39984: PPUSH
39985: LD_VAR 0 2
39989: PPUSH
39990: LD_VAR 0 1
39994: PUSH
39995: LD_VAR 0 3
39999: ARRAY
40000: PPUSH
40001: CALL_OW 1
40005: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
40006: LD_ADDR_VAR 0 1
40010: PUSH
40011: LD_VAR 0 1
40015: PPUSH
40016: LD_VAR 0 3
40020: PPUSH
40021: LD_VAR 0 5
40025: PPUSH
40026: CALL_OW 1
40030: ST_TO_ADDR
// result := list ;
40031: LD_ADDR_VAR 0 4
40035: PUSH
40036: LD_VAR 0 1
40040: ST_TO_ADDR
// end ;
40041: LD_VAR 0 4
40045: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
40046: LD_INT 0
40048: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
40049: LD_ADDR_VAR 0 5
40053: PUSH
40054: LD_VAR 0 1
40058: PPUSH
40059: CALL_OW 250
40063: PPUSH
40064: LD_VAR 0 1
40068: PPUSH
40069: CALL_OW 251
40073: PPUSH
40074: LD_VAR 0 2
40078: PPUSH
40079: LD_VAR 0 3
40083: PPUSH
40084: LD_VAR 0 4
40088: PPUSH
40089: CALL 40099 0 5
40093: ST_TO_ADDR
// end ;
40094: LD_VAR 0 5
40098: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
40099: LD_INT 0
40101: PPUSH
40102: PPUSH
40103: PPUSH
40104: PPUSH
// if not list then
40105: LD_VAR 0 3
40109: NOT
40110: IFFALSE 40114
// exit ;
40112: GO 40502
// result := [ ] ;
40114: LD_ADDR_VAR 0 6
40118: PUSH
40119: EMPTY
40120: ST_TO_ADDR
// for i in list do
40121: LD_ADDR_VAR 0 7
40125: PUSH
40126: LD_VAR 0 3
40130: PUSH
40131: FOR_IN
40132: IFFALSE 40334
// begin tmp := GetDistUnitXY ( i , x , y ) ;
40134: LD_ADDR_VAR 0 9
40138: PUSH
40139: LD_VAR 0 7
40143: PPUSH
40144: LD_VAR 0 1
40148: PPUSH
40149: LD_VAR 0 2
40153: PPUSH
40154: CALL_OW 297
40158: ST_TO_ADDR
// if not result then
40159: LD_VAR 0 6
40163: NOT
40164: IFFALSE 40190
// result := [ [ i , tmp ] ] else
40166: LD_ADDR_VAR 0 6
40170: PUSH
40171: LD_VAR 0 7
40175: PUSH
40176: LD_VAR 0 9
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: EMPTY
40186: LIST
40187: ST_TO_ADDR
40188: GO 40332
// begin if result [ result ] [ 2 ] < tmp then
40190: LD_VAR 0 6
40194: PUSH
40195: LD_VAR 0 6
40199: ARRAY
40200: PUSH
40201: LD_INT 2
40203: ARRAY
40204: PUSH
40205: LD_VAR 0 9
40209: LESS
40210: IFFALSE 40252
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
40212: LD_ADDR_VAR 0 6
40216: PUSH
40217: LD_VAR 0 6
40221: PPUSH
40222: LD_VAR 0 6
40226: PUSH
40227: LD_INT 1
40229: PLUS
40230: PPUSH
40231: LD_VAR 0 7
40235: PUSH
40236: LD_VAR 0 9
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PPUSH
40245: CALL_OW 2
40249: ST_TO_ADDR
40250: GO 40332
// for j = 1 to result do
40252: LD_ADDR_VAR 0 8
40256: PUSH
40257: DOUBLE
40258: LD_INT 1
40260: DEC
40261: ST_TO_ADDR
40262: LD_VAR 0 6
40266: PUSH
40267: FOR_TO
40268: IFFALSE 40330
// begin if tmp < result [ j ] [ 2 ] then
40270: LD_VAR 0 9
40274: PUSH
40275: LD_VAR 0 6
40279: PUSH
40280: LD_VAR 0 8
40284: ARRAY
40285: PUSH
40286: LD_INT 2
40288: ARRAY
40289: LESS
40290: IFFALSE 40328
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40292: LD_ADDR_VAR 0 6
40296: PUSH
40297: LD_VAR 0 6
40301: PPUSH
40302: LD_VAR 0 8
40306: PPUSH
40307: LD_VAR 0 7
40311: PUSH
40312: LD_VAR 0 9
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PPUSH
40321: CALL_OW 2
40325: ST_TO_ADDR
// break ;
40326: GO 40330
// end ; end ;
40328: GO 40267
40330: POP
40331: POP
// end ; end ;
40332: GO 40131
40334: POP
40335: POP
// if result and not asc then
40336: LD_VAR 0 6
40340: PUSH
40341: LD_VAR 0 4
40345: NOT
40346: AND
40347: IFFALSE 40422
// begin tmp := result ;
40349: LD_ADDR_VAR 0 9
40353: PUSH
40354: LD_VAR 0 6
40358: ST_TO_ADDR
// for i = tmp downto 1 do
40359: LD_ADDR_VAR 0 7
40363: PUSH
40364: DOUBLE
40365: LD_VAR 0 9
40369: INC
40370: ST_TO_ADDR
40371: LD_INT 1
40373: PUSH
40374: FOR_DOWNTO
40375: IFFALSE 40420
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
40377: LD_ADDR_VAR 0 6
40381: PUSH
40382: LD_VAR 0 6
40386: PPUSH
40387: LD_VAR 0 9
40391: PUSH
40392: LD_VAR 0 7
40396: MINUS
40397: PUSH
40398: LD_INT 1
40400: PLUS
40401: PPUSH
40402: LD_VAR 0 9
40406: PUSH
40407: LD_VAR 0 7
40411: ARRAY
40412: PPUSH
40413: CALL_OW 1
40417: ST_TO_ADDR
40418: GO 40374
40420: POP
40421: POP
// end ; tmp := [ ] ;
40422: LD_ADDR_VAR 0 9
40426: PUSH
40427: EMPTY
40428: ST_TO_ADDR
// if mode then
40429: LD_VAR 0 5
40433: IFFALSE 40502
// begin for i = 1 to result do
40435: LD_ADDR_VAR 0 7
40439: PUSH
40440: DOUBLE
40441: LD_INT 1
40443: DEC
40444: ST_TO_ADDR
40445: LD_VAR 0 6
40449: PUSH
40450: FOR_TO
40451: IFFALSE 40490
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
40453: LD_ADDR_VAR 0 9
40457: PUSH
40458: LD_VAR 0 9
40462: PPUSH
40463: LD_VAR 0 7
40467: PPUSH
40468: LD_VAR 0 6
40472: PUSH
40473: LD_VAR 0 7
40477: ARRAY
40478: PUSH
40479: LD_INT 1
40481: ARRAY
40482: PPUSH
40483: CALL_OW 1
40487: ST_TO_ADDR
40488: GO 40450
40490: POP
40491: POP
// result := tmp ;
40492: LD_ADDR_VAR 0 6
40496: PUSH
40497: LD_VAR 0 9
40501: ST_TO_ADDR
// end ; end ;
40502: LD_VAR 0 6
40506: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40507: LD_INT 0
40509: PPUSH
40510: PPUSH
40511: PPUSH
40512: PPUSH
40513: PPUSH
40514: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40515: LD_ADDR_VAR 0 5
40519: PUSH
40520: LD_INT 0
40522: PUSH
40523: LD_INT 0
40525: PUSH
40526: LD_INT 0
40528: PUSH
40529: EMPTY
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: ST_TO_ADDR
// if not x or not y then
40537: LD_VAR 0 2
40541: NOT
40542: PUSH
40543: LD_VAR 0 3
40547: NOT
40548: OR
40549: IFFALSE 40553
// exit ;
40551: GO 42205
// if not range then
40553: LD_VAR 0 4
40557: NOT
40558: IFFALSE 40568
// range := 10 ;
40560: LD_ADDR_VAR 0 4
40564: PUSH
40565: LD_INT 10
40567: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40568: LD_ADDR_VAR 0 8
40572: PUSH
40573: LD_INT 81
40575: PUSH
40576: LD_VAR 0 1
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 92
40587: PUSH
40588: LD_VAR 0 2
40592: PUSH
40593: LD_VAR 0 3
40597: PUSH
40598: LD_VAR 0 4
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 3
40611: PUSH
40612: LD_INT 21
40614: PUSH
40615: LD_INT 3
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: LIST
40630: PPUSH
40631: CALL_OW 69
40635: ST_TO_ADDR
// if not tmp then
40636: LD_VAR 0 8
40640: NOT
40641: IFFALSE 40645
// exit ;
40643: GO 42205
// for i in tmp do
40645: LD_ADDR_VAR 0 6
40649: PUSH
40650: LD_VAR 0 8
40654: PUSH
40655: FOR_IN
40656: IFFALSE 42180
// begin points := [ 0 , 0 , 0 ] ;
40658: LD_ADDR_VAR 0 9
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: LD_INT 0
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: LIST
40676: ST_TO_ADDR
// bpoints := 1 ;
40677: LD_ADDR_VAR 0 10
40681: PUSH
40682: LD_INT 1
40684: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40685: LD_VAR 0 6
40689: PPUSH
40690: CALL_OW 247
40694: PUSH
40695: LD_INT 1
40697: DOUBLE
40698: EQUAL
40699: IFTRUE 40703
40701: GO 41281
40703: POP
// begin if GetClass ( i ) = 1 then
40704: LD_VAR 0 6
40708: PPUSH
40709: CALL_OW 257
40713: PUSH
40714: LD_INT 1
40716: EQUAL
40717: IFFALSE 40738
// points := [ 10 , 5 , 3 ] ;
40719: LD_ADDR_VAR 0 9
40723: PUSH
40724: LD_INT 10
40726: PUSH
40727: LD_INT 5
40729: PUSH
40730: LD_INT 3
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: LIST
40737: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40738: LD_VAR 0 6
40742: PPUSH
40743: CALL_OW 257
40747: PUSH
40748: LD_INT 2
40750: PUSH
40751: LD_INT 3
40753: PUSH
40754: LD_INT 4
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: LIST
40761: IN
40762: IFFALSE 40783
// points := [ 3 , 2 , 1 ] ;
40764: LD_ADDR_VAR 0 9
40768: PUSH
40769: LD_INT 3
40771: PUSH
40772: LD_INT 2
40774: PUSH
40775: LD_INT 1
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: LIST
40782: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40783: LD_VAR 0 6
40787: PPUSH
40788: CALL_OW 257
40792: PUSH
40793: LD_INT 5
40795: EQUAL
40796: IFFALSE 40817
// points := [ 130 , 5 , 2 ] ;
40798: LD_ADDR_VAR 0 9
40802: PUSH
40803: LD_INT 130
40805: PUSH
40806: LD_INT 5
40808: PUSH
40809: LD_INT 2
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: LIST
40816: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40817: LD_VAR 0 6
40821: PPUSH
40822: CALL_OW 257
40826: PUSH
40827: LD_INT 8
40829: EQUAL
40830: IFFALSE 40851
// points := [ 35 , 35 , 30 ] ;
40832: LD_ADDR_VAR 0 9
40836: PUSH
40837: LD_INT 35
40839: PUSH
40840: LD_INT 35
40842: PUSH
40843: LD_INT 30
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: LIST
40850: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40851: LD_VAR 0 6
40855: PPUSH
40856: CALL_OW 257
40860: PUSH
40861: LD_INT 9
40863: EQUAL
40864: IFFALSE 40885
// points := [ 20 , 55 , 40 ] ;
40866: LD_ADDR_VAR 0 9
40870: PUSH
40871: LD_INT 20
40873: PUSH
40874: LD_INT 55
40876: PUSH
40877: LD_INT 40
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: LIST
40884: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40885: LD_VAR 0 6
40889: PPUSH
40890: CALL_OW 257
40894: PUSH
40895: LD_INT 12
40897: PUSH
40898: LD_INT 16
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: IN
40905: IFFALSE 40926
// points := [ 5 , 3 , 2 ] ;
40907: LD_ADDR_VAR 0 9
40911: PUSH
40912: LD_INT 5
40914: PUSH
40915: LD_INT 3
40917: PUSH
40918: LD_INT 2
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: LIST
40925: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40926: LD_VAR 0 6
40930: PPUSH
40931: CALL_OW 257
40935: PUSH
40936: LD_INT 17
40938: EQUAL
40939: IFFALSE 40960
// points := [ 100 , 50 , 75 ] ;
40941: LD_ADDR_VAR 0 9
40945: PUSH
40946: LD_INT 100
40948: PUSH
40949: LD_INT 50
40951: PUSH
40952: LD_INT 75
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: LIST
40959: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40960: LD_VAR 0 6
40964: PPUSH
40965: CALL_OW 257
40969: PUSH
40970: LD_INT 15
40972: EQUAL
40973: IFFALSE 40994
// points := [ 10 , 5 , 3 ] ;
40975: LD_ADDR_VAR 0 9
40979: PUSH
40980: LD_INT 10
40982: PUSH
40983: LD_INT 5
40985: PUSH
40986: LD_INT 3
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: LIST
40993: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40994: LD_VAR 0 6
40998: PPUSH
40999: CALL_OW 257
41003: PUSH
41004: LD_INT 14
41006: EQUAL
41007: IFFALSE 41028
// points := [ 10 , 0 , 0 ] ;
41009: LD_ADDR_VAR 0 9
41013: PUSH
41014: LD_INT 10
41016: PUSH
41017: LD_INT 0
41019: PUSH
41020: LD_INT 0
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: LIST
41027: ST_TO_ADDR
// if GetClass ( i ) = 11 then
41028: LD_VAR 0 6
41032: PPUSH
41033: CALL_OW 257
41037: PUSH
41038: LD_INT 11
41040: EQUAL
41041: IFFALSE 41062
// points := [ 30 , 10 , 5 ] ;
41043: LD_ADDR_VAR 0 9
41047: PUSH
41048: LD_INT 30
41050: PUSH
41051: LD_INT 10
41053: PUSH
41054: LD_INT 5
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: LIST
41061: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
41062: LD_VAR 0 1
41066: PPUSH
41067: LD_INT 5
41069: PPUSH
41070: CALL_OW 321
41074: PUSH
41075: LD_INT 2
41077: EQUAL
41078: IFFALSE 41095
// bpoints := bpoints * 1.8 ;
41080: LD_ADDR_VAR 0 10
41084: PUSH
41085: LD_VAR 0 10
41089: PUSH
41090: LD_REAL  1.80000000000000E+0000
41093: MUL
41094: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
41095: LD_VAR 0 6
41099: PPUSH
41100: CALL_OW 257
41104: PUSH
41105: LD_INT 1
41107: PUSH
41108: LD_INT 2
41110: PUSH
41111: LD_INT 3
41113: PUSH
41114: LD_INT 4
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: IN
41123: PUSH
41124: LD_VAR 0 1
41128: PPUSH
41129: LD_INT 51
41131: PPUSH
41132: CALL_OW 321
41136: PUSH
41137: LD_INT 2
41139: EQUAL
41140: AND
41141: IFFALSE 41158
// bpoints := bpoints * 1.2 ;
41143: LD_ADDR_VAR 0 10
41147: PUSH
41148: LD_VAR 0 10
41152: PUSH
41153: LD_REAL  1.20000000000000E+0000
41156: MUL
41157: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
41158: LD_VAR 0 6
41162: PPUSH
41163: CALL_OW 257
41167: PUSH
41168: LD_INT 5
41170: PUSH
41171: LD_INT 7
41173: PUSH
41174: LD_INT 9
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: LIST
41181: IN
41182: PUSH
41183: LD_VAR 0 1
41187: PPUSH
41188: LD_INT 52
41190: PPUSH
41191: CALL_OW 321
41195: PUSH
41196: LD_INT 2
41198: EQUAL
41199: AND
41200: IFFALSE 41217
// bpoints := bpoints * 1.5 ;
41202: LD_ADDR_VAR 0 10
41206: PUSH
41207: LD_VAR 0 10
41211: PUSH
41212: LD_REAL  1.50000000000000E+0000
41215: MUL
41216: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
41217: LD_VAR 0 1
41221: PPUSH
41222: LD_INT 66
41224: PPUSH
41225: CALL_OW 321
41229: PUSH
41230: LD_INT 2
41232: EQUAL
41233: IFFALSE 41250
// bpoints := bpoints * 1.1 ;
41235: LD_ADDR_VAR 0 10
41239: PUSH
41240: LD_VAR 0 10
41244: PUSH
41245: LD_REAL  1.10000000000000E+0000
41248: MUL
41249: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
41250: LD_ADDR_VAR 0 10
41254: PUSH
41255: LD_VAR 0 10
41259: PUSH
41260: LD_VAR 0 6
41264: PPUSH
41265: LD_INT 1
41267: PPUSH
41268: CALL_OW 259
41272: PUSH
41273: LD_REAL  1.15000000000000E+0000
41276: MUL
41277: MUL
41278: ST_TO_ADDR
// end ; unit_vehicle :
41279: GO 42109
41281: LD_INT 2
41283: DOUBLE
41284: EQUAL
41285: IFTRUE 41289
41287: GO 42097
41289: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
41290: LD_VAR 0 6
41294: PPUSH
41295: CALL_OW 264
41299: PUSH
41300: LD_INT 2
41302: PUSH
41303: LD_INT 42
41305: PUSH
41306: LD_INT 24
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: LIST
41313: IN
41314: IFFALSE 41335
// points := [ 25 , 5 , 3 ] ;
41316: LD_ADDR_VAR 0 9
41320: PUSH
41321: LD_INT 25
41323: PUSH
41324: LD_INT 5
41326: PUSH
41327: LD_INT 3
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: LIST
41334: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
41335: LD_VAR 0 6
41339: PPUSH
41340: CALL_OW 264
41344: PUSH
41345: LD_INT 4
41347: PUSH
41348: LD_INT 43
41350: PUSH
41351: LD_INT 25
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: LIST
41358: IN
41359: IFFALSE 41380
// points := [ 40 , 15 , 5 ] ;
41361: LD_ADDR_VAR 0 9
41365: PUSH
41366: LD_INT 40
41368: PUSH
41369: LD_INT 15
41371: PUSH
41372: LD_INT 5
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: LIST
41379: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
41380: LD_VAR 0 6
41384: PPUSH
41385: CALL_OW 264
41389: PUSH
41390: LD_INT 3
41392: PUSH
41393: LD_INT 23
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: IN
41400: IFFALSE 41421
// points := [ 7 , 25 , 8 ] ;
41402: LD_ADDR_VAR 0 9
41406: PUSH
41407: LD_INT 7
41409: PUSH
41410: LD_INT 25
41412: PUSH
41413: LD_INT 8
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: LIST
41420: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
41421: LD_VAR 0 6
41425: PPUSH
41426: CALL_OW 264
41430: PUSH
41431: LD_INT 5
41433: PUSH
41434: LD_INT 27
41436: PUSH
41437: LD_INT 44
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: LIST
41444: IN
41445: IFFALSE 41466
// points := [ 14 , 50 , 16 ] ;
41447: LD_ADDR_VAR 0 9
41451: PUSH
41452: LD_INT 14
41454: PUSH
41455: LD_INT 50
41457: PUSH
41458: LD_INT 16
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: LIST
41465: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
41466: LD_VAR 0 6
41470: PPUSH
41471: CALL_OW 264
41475: PUSH
41476: LD_INT 6
41478: PUSH
41479: LD_INT 46
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: IN
41486: IFFALSE 41507
// points := [ 32 , 120 , 70 ] ;
41488: LD_ADDR_VAR 0 9
41492: PUSH
41493: LD_INT 32
41495: PUSH
41496: LD_INT 120
41498: PUSH
41499: LD_INT 70
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: LIST
41506: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
41507: LD_VAR 0 6
41511: PPUSH
41512: CALL_OW 264
41516: PUSH
41517: LD_INT 7
41519: PUSH
41520: LD_INT 28
41522: PUSH
41523: LD_INT 45
41525: PUSH
41526: LD_EXP 49
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: IN
41537: IFFALSE 41558
// points := [ 35 , 20 , 45 ] ;
41539: LD_ADDR_VAR 0 9
41543: PUSH
41544: LD_INT 35
41546: PUSH
41547: LD_INT 20
41549: PUSH
41550: LD_INT 45
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: LIST
41557: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
41558: LD_VAR 0 6
41562: PPUSH
41563: CALL_OW 264
41567: PUSH
41568: LD_INT 47
41570: PUSH
41571: EMPTY
41572: LIST
41573: IN
41574: IFFALSE 41595
// points := [ 67 , 45 , 75 ] ;
41576: LD_ADDR_VAR 0 9
41580: PUSH
41581: LD_INT 67
41583: PUSH
41584: LD_INT 45
41586: PUSH
41587: LD_INT 75
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: LIST
41594: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41595: LD_VAR 0 6
41599: PPUSH
41600: CALL_OW 264
41604: PUSH
41605: LD_INT 26
41607: PUSH
41608: EMPTY
41609: LIST
41610: IN
41611: IFFALSE 41632
// points := [ 120 , 30 , 80 ] ;
41613: LD_ADDR_VAR 0 9
41617: PUSH
41618: LD_INT 120
41620: PUSH
41621: LD_INT 30
41623: PUSH
41624: LD_INT 80
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: LIST
41631: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41632: LD_VAR 0 6
41636: PPUSH
41637: CALL_OW 264
41641: PUSH
41642: LD_INT 22
41644: PUSH
41645: EMPTY
41646: LIST
41647: IN
41648: IFFALSE 41669
// points := [ 40 , 1 , 1 ] ;
41650: LD_ADDR_VAR 0 9
41654: PUSH
41655: LD_INT 40
41657: PUSH
41658: LD_INT 1
41660: PUSH
41661: LD_INT 1
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: LIST
41668: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41669: LD_VAR 0 6
41673: PPUSH
41674: CALL_OW 264
41678: PUSH
41679: LD_INT 29
41681: PUSH
41682: EMPTY
41683: LIST
41684: IN
41685: IFFALSE 41706
// points := [ 70 , 200 , 400 ] ;
41687: LD_ADDR_VAR 0 9
41691: PUSH
41692: LD_INT 70
41694: PUSH
41695: LD_INT 200
41697: PUSH
41698: LD_INT 400
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: LIST
41705: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41706: LD_VAR 0 6
41710: PPUSH
41711: CALL_OW 264
41715: PUSH
41716: LD_INT 14
41718: PUSH
41719: LD_INT 53
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: IN
41726: IFFALSE 41747
// points := [ 40 , 10 , 20 ] ;
41728: LD_ADDR_VAR 0 9
41732: PUSH
41733: LD_INT 40
41735: PUSH
41736: LD_INT 10
41738: PUSH
41739: LD_INT 20
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: LIST
41746: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41747: LD_VAR 0 6
41751: PPUSH
41752: CALL_OW 264
41756: PUSH
41757: LD_INT 9
41759: PUSH
41760: EMPTY
41761: LIST
41762: IN
41763: IFFALSE 41784
// points := [ 5 , 70 , 20 ] ;
41765: LD_ADDR_VAR 0 9
41769: PUSH
41770: LD_INT 5
41772: PUSH
41773: LD_INT 70
41775: PUSH
41776: LD_INT 20
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: LIST
41783: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41784: LD_VAR 0 6
41788: PPUSH
41789: CALL_OW 264
41793: PUSH
41794: LD_INT 10
41796: PUSH
41797: EMPTY
41798: LIST
41799: IN
41800: IFFALSE 41821
// points := [ 35 , 110 , 70 ] ;
41802: LD_ADDR_VAR 0 9
41806: PUSH
41807: LD_INT 35
41809: PUSH
41810: LD_INT 110
41812: PUSH
41813: LD_INT 70
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: LIST
41820: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41821: LD_VAR 0 6
41825: PPUSH
41826: CALL_OW 265
41830: PUSH
41831: LD_INT 25
41833: EQUAL
41834: IFFALSE 41855
// points := [ 80 , 65 , 100 ] ;
41836: LD_ADDR_VAR 0 9
41840: PUSH
41841: LD_INT 80
41843: PUSH
41844: LD_INT 65
41846: PUSH
41847: LD_INT 100
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: LIST
41854: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41855: LD_VAR 0 6
41859: PPUSH
41860: CALL_OW 263
41864: PUSH
41865: LD_INT 1
41867: EQUAL
41868: IFFALSE 41903
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41870: LD_ADDR_VAR 0 10
41874: PUSH
41875: LD_VAR 0 10
41879: PUSH
41880: LD_VAR 0 6
41884: PPUSH
41885: CALL_OW 311
41889: PPUSH
41890: LD_INT 3
41892: PPUSH
41893: CALL_OW 259
41897: PUSH
41898: LD_INT 4
41900: MUL
41901: MUL
41902: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41903: LD_VAR 0 6
41907: PPUSH
41908: CALL_OW 263
41912: PUSH
41913: LD_INT 2
41915: EQUAL
41916: IFFALSE 41967
// begin j := IsControledBy ( i ) ;
41918: LD_ADDR_VAR 0 7
41922: PUSH
41923: LD_VAR 0 6
41927: PPUSH
41928: CALL_OW 312
41932: ST_TO_ADDR
// if j then
41933: LD_VAR 0 7
41937: IFFALSE 41967
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41939: LD_ADDR_VAR 0 10
41943: PUSH
41944: LD_VAR 0 10
41948: PUSH
41949: LD_VAR 0 7
41953: PPUSH
41954: LD_INT 3
41956: PPUSH
41957: CALL_OW 259
41961: PUSH
41962: LD_INT 3
41964: MUL
41965: MUL
41966: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41967: LD_VAR 0 6
41971: PPUSH
41972: CALL_OW 264
41976: PUSH
41977: LD_INT 5
41979: PUSH
41980: LD_INT 6
41982: PUSH
41983: LD_INT 46
41985: PUSH
41986: LD_INT 44
41988: PUSH
41989: LD_INT 47
41991: PUSH
41992: LD_INT 45
41994: PUSH
41995: LD_INT 28
41997: PUSH
41998: LD_INT 7
42000: PUSH
42001: LD_INT 27
42003: PUSH
42004: LD_INT 29
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: IN
42019: PUSH
42020: LD_VAR 0 1
42024: PPUSH
42025: LD_INT 52
42027: PPUSH
42028: CALL_OW 321
42032: PUSH
42033: LD_INT 2
42035: EQUAL
42036: AND
42037: IFFALSE 42054
// bpoints := bpoints * 1.2 ;
42039: LD_ADDR_VAR 0 10
42043: PUSH
42044: LD_VAR 0 10
42048: PUSH
42049: LD_REAL  1.20000000000000E+0000
42052: MUL
42053: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
42054: LD_VAR 0 6
42058: PPUSH
42059: CALL_OW 264
42063: PUSH
42064: LD_INT 6
42066: PUSH
42067: LD_INT 46
42069: PUSH
42070: LD_INT 47
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: LIST
42077: IN
42078: IFFALSE 42095
// bpoints := bpoints * 1.2 ;
42080: LD_ADDR_VAR 0 10
42084: PUSH
42085: LD_VAR 0 10
42089: PUSH
42090: LD_REAL  1.20000000000000E+0000
42093: MUL
42094: ST_TO_ADDR
// end ; unit_building :
42095: GO 42109
42097: LD_INT 3
42099: DOUBLE
42100: EQUAL
42101: IFTRUE 42105
42103: GO 42108
42105: POP
// ; end ;
42106: GO 42109
42108: POP
// for j = 1 to 3 do
42109: LD_ADDR_VAR 0 7
42113: PUSH
42114: DOUBLE
42115: LD_INT 1
42117: DEC
42118: ST_TO_ADDR
42119: LD_INT 3
42121: PUSH
42122: FOR_TO
42123: IFFALSE 42176
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
42125: LD_ADDR_VAR 0 5
42129: PUSH
42130: LD_VAR 0 5
42134: PPUSH
42135: LD_VAR 0 7
42139: PPUSH
42140: LD_VAR 0 5
42144: PUSH
42145: LD_VAR 0 7
42149: ARRAY
42150: PUSH
42151: LD_VAR 0 9
42155: PUSH
42156: LD_VAR 0 7
42160: ARRAY
42161: PUSH
42162: LD_VAR 0 10
42166: MUL
42167: PLUS
42168: PPUSH
42169: CALL_OW 1
42173: ST_TO_ADDR
42174: GO 42122
42176: POP
42177: POP
// end ;
42178: GO 40655
42180: POP
42181: POP
// result := Replace ( result , 4 , tmp ) ;
42182: LD_ADDR_VAR 0 5
42186: PUSH
42187: LD_VAR 0 5
42191: PPUSH
42192: LD_INT 4
42194: PPUSH
42195: LD_VAR 0 8
42199: PPUSH
42200: CALL_OW 1
42204: ST_TO_ADDR
// end ;
42205: LD_VAR 0 5
42209: RET
// export function DangerAtRange ( unit , range ) ; begin
42210: LD_INT 0
42212: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
42213: LD_ADDR_VAR 0 3
42217: PUSH
42218: LD_VAR 0 1
42222: PPUSH
42223: CALL_OW 255
42227: PPUSH
42228: LD_VAR 0 1
42232: PPUSH
42233: CALL_OW 250
42237: PPUSH
42238: LD_VAR 0 1
42242: PPUSH
42243: CALL_OW 251
42247: PPUSH
42248: LD_VAR 0 2
42252: PPUSH
42253: CALL 40507 0 4
42257: ST_TO_ADDR
// end ;
42258: LD_VAR 0 3
42262: RET
// export function DangerInArea ( side , area ) ; begin
42263: LD_INT 0
42265: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
42266: LD_ADDR_VAR 0 3
42270: PUSH
42271: LD_VAR 0 2
42275: PPUSH
42276: LD_INT 81
42278: PUSH
42279: LD_VAR 0 1
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PPUSH
42288: CALL_OW 70
42292: ST_TO_ADDR
// end ;
42293: LD_VAR 0 3
42297: RET
// export function IsExtension ( b ) ; begin
42298: LD_INT 0
42300: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
42301: LD_ADDR_VAR 0 2
42305: PUSH
42306: LD_VAR 0 1
42310: PUSH
42311: LD_INT 23
42313: PUSH
42314: LD_INT 20
42316: PUSH
42317: LD_INT 22
42319: PUSH
42320: LD_INT 17
42322: PUSH
42323: LD_INT 24
42325: PUSH
42326: LD_INT 21
42328: PUSH
42329: LD_INT 19
42331: PUSH
42332: LD_INT 16
42334: PUSH
42335: LD_INT 25
42337: PUSH
42338: LD_INT 18
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: IN
42353: ST_TO_ADDR
// end ;
42354: LD_VAR 0 2
42358: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
42359: LD_INT 0
42361: PPUSH
42362: PPUSH
42363: PPUSH
// result := [ ] ;
42364: LD_ADDR_VAR 0 4
42368: PUSH
42369: EMPTY
42370: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
42371: LD_ADDR_VAR 0 5
42375: PUSH
42376: LD_VAR 0 2
42380: PPUSH
42381: LD_INT 21
42383: PUSH
42384: LD_INT 3
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PPUSH
42391: CALL_OW 70
42395: ST_TO_ADDR
// if not tmp then
42396: LD_VAR 0 5
42400: NOT
42401: IFFALSE 42405
// exit ;
42403: GO 42469
// if checkLink then
42405: LD_VAR 0 3
42409: IFFALSE 42459
// begin for i in tmp do
42411: LD_ADDR_VAR 0 6
42415: PUSH
42416: LD_VAR 0 5
42420: PUSH
42421: FOR_IN
42422: IFFALSE 42457
// if GetBase ( i ) <> base then
42424: LD_VAR 0 6
42428: PPUSH
42429: CALL_OW 274
42433: PUSH
42434: LD_VAR 0 1
42438: NONEQUAL
42439: IFFALSE 42455
// ComLinkToBase ( base , i ) ;
42441: LD_VAR 0 1
42445: PPUSH
42446: LD_VAR 0 6
42450: PPUSH
42451: CALL_OW 169
42455: GO 42421
42457: POP
42458: POP
// end ; result := tmp ;
42459: LD_ADDR_VAR 0 4
42463: PUSH
42464: LD_VAR 0 5
42468: ST_TO_ADDR
// end ;
42469: LD_VAR 0 4
42473: RET
// export function ComComplete ( units , b ) ; var i ; begin
42474: LD_INT 0
42476: PPUSH
42477: PPUSH
// if not units then
42478: LD_VAR 0 1
42482: NOT
42483: IFFALSE 42487
// exit ;
42485: GO 42577
// for i in units do
42487: LD_ADDR_VAR 0 4
42491: PUSH
42492: LD_VAR 0 1
42496: PUSH
42497: FOR_IN
42498: IFFALSE 42575
// if BuildingStatus ( b ) = bs_build then
42500: LD_VAR 0 2
42504: PPUSH
42505: CALL_OW 461
42509: PUSH
42510: LD_INT 1
42512: EQUAL
42513: IFFALSE 42573
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42515: LD_VAR 0 4
42519: PPUSH
42520: LD_STRING h
42522: PUSH
42523: LD_VAR 0 2
42527: PPUSH
42528: CALL_OW 250
42532: PUSH
42533: LD_VAR 0 2
42537: PPUSH
42538: CALL_OW 251
42542: PUSH
42543: LD_VAR 0 2
42547: PUSH
42548: LD_INT 0
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: PUSH
42566: EMPTY
42567: LIST
42568: PPUSH
42569: CALL_OW 446
42573: GO 42497
42575: POP
42576: POP
// end ;
42577: LD_VAR 0 3
42581: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42582: LD_INT 0
42584: PPUSH
42585: PPUSH
42586: PPUSH
42587: PPUSH
42588: PPUSH
42589: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
42590: LD_VAR 0 1
42594: NOT
42595: PUSH
42596: LD_VAR 0 1
42600: PPUSH
42601: CALL_OW 263
42605: PUSH
42606: LD_INT 2
42608: NONEQUAL
42609: OR
42610: IFFALSE 42614
// exit ;
42612: GO 42930
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42614: LD_ADDR_VAR 0 6
42618: PUSH
42619: LD_INT 22
42621: PUSH
42622: LD_VAR 0 1
42626: PPUSH
42627: CALL_OW 255
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 2
42638: PUSH
42639: LD_INT 30
42641: PUSH
42642: LD_INT 36
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 34
42651: PUSH
42652: LD_INT 31
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: LIST
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PPUSH
42668: CALL_OW 69
42672: ST_TO_ADDR
// if not tmp then
42673: LD_VAR 0 6
42677: NOT
42678: IFFALSE 42682
// exit ;
42680: GO 42930
// result := [ ] ;
42682: LD_ADDR_VAR 0 2
42686: PUSH
42687: EMPTY
42688: ST_TO_ADDR
// for i in tmp do
42689: LD_ADDR_VAR 0 3
42693: PUSH
42694: LD_VAR 0 6
42698: PUSH
42699: FOR_IN
42700: IFFALSE 42771
// begin t := UnitsInside ( i ) ;
42702: LD_ADDR_VAR 0 4
42706: PUSH
42707: LD_VAR 0 3
42711: PPUSH
42712: CALL_OW 313
42716: ST_TO_ADDR
// if t then
42717: LD_VAR 0 4
42721: IFFALSE 42769
// for j in t do
42723: LD_ADDR_VAR 0 7
42727: PUSH
42728: LD_VAR 0 4
42732: PUSH
42733: FOR_IN
42734: IFFALSE 42767
// result := Replace ( result , result + 1 , j ) ;
42736: LD_ADDR_VAR 0 2
42740: PUSH
42741: LD_VAR 0 2
42745: PPUSH
42746: LD_VAR 0 2
42750: PUSH
42751: LD_INT 1
42753: PLUS
42754: PPUSH
42755: LD_VAR 0 7
42759: PPUSH
42760: CALL_OW 1
42764: ST_TO_ADDR
42765: GO 42733
42767: POP
42768: POP
// end ;
42769: GO 42699
42771: POP
42772: POP
// if not result then
42773: LD_VAR 0 2
42777: NOT
42778: IFFALSE 42782
// exit ;
42780: GO 42930
// mech := result [ 1 ] ;
42782: LD_ADDR_VAR 0 5
42786: PUSH
42787: LD_VAR 0 2
42791: PUSH
42792: LD_INT 1
42794: ARRAY
42795: ST_TO_ADDR
// if result > 1 then
42796: LD_VAR 0 2
42800: PUSH
42801: LD_INT 1
42803: GREATER
42804: IFFALSE 42916
// begin for i = 2 to result do
42806: LD_ADDR_VAR 0 3
42810: PUSH
42811: DOUBLE
42812: LD_INT 2
42814: DEC
42815: ST_TO_ADDR
42816: LD_VAR 0 2
42820: PUSH
42821: FOR_TO
42822: IFFALSE 42914
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42824: LD_ADDR_VAR 0 4
42828: PUSH
42829: LD_VAR 0 2
42833: PUSH
42834: LD_VAR 0 3
42838: ARRAY
42839: PPUSH
42840: LD_INT 3
42842: PPUSH
42843: CALL_OW 259
42847: PUSH
42848: LD_VAR 0 2
42852: PUSH
42853: LD_VAR 0 3
42857: ARRAY
42858: PPUSH
42859: CALL_OW 432
42863: MINUS
42864: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42865: LD_VAR 0 4
42869: PUSH
42870: LD_VAR 0 5
42874: PPUSH
42875: LD_INT 3
42877: PPUSH
42878: CALL_OW 259
42882: PUSH
42883: LD_VAR 0 5
42887: PPUSH
42888: CALL_OW 432
42892: MINUS
42893: GREATEREQUAL
42894: IFFALSE 42912
// mech := result [ i ] ;
42896: LD_ADDR_VAR 0 5
42900: PUSH
42901: LD_VAR 0 2
42905: PUSH
42906: LD_VAR 0 3
42910: ARRAY
42911: ST_TO_ADDR
// end ;
42912: GO 42821
42914: POP
42915: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42916: LD_VAR 0 1
42920: PPUSH
42921: LD_VAR 0 5
42925: PPUSH
42926: CALL_OW 135
// end ;
42930: LD_VAR 0 2
42934: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42935: LD_INT 0
42937: PPUSH
42938: PPUSH
42939: PPUSH
42940: PPUSH
42941: PPUSH
42942: PPUSH
42943: PPUSH
42944: PPUSH
42945: PPUSH
42946: PPUSH
42947: PPUSH
42948: PPUSH
42949: PPUSH
// result := [ ] ;
42950: LD_ADDR_VAR 0 7
42954: PUSH
42955: EMPTY
42956: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42957: LD_VAR 0 1
42961: PPUSH
42962: CALL_OW 266
42966: PUSH
42967: LD_INT 0
42969: PUSH
42970: LD_INT 1
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: IN
42977: NOT
42978: IFFALSE 42982
// exit ;
42980: GO 44616
// if name then
42982: LD_VAR 0 3
42986: IFFALSE 43002
// SetBName ( base_dep , name ) ;
42988: LD_VAR 0 1
42992: PPUSH
42993: LD_VAR 0 3
42997: PPUSH
42998: CALL_OW 500
// base := GetBase ( base_dep ) ;
43002: LD_ADDR_VAR 0 15
43006: PUSH
43007: LD_VAR 0 1
43011: PPUSH
43012: CALL_OW 274
43016: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
43017: LD_ADDR_VAR 0 16
43021: PUSH
43022: LD_VAR 0 1
43026: PPUSH
43027: CALL_OW 255
43031: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
43032: LD_ADDR_VAR 0 17
43036: PUSH
43037: LD_VAR 0 1
43041: PPUSH
43042: CALL_OW 248
43046: ST_TO_ADDR
// if sources then
43047: LD_VAR 0 5
43051: IFFALSE 43098
// for i = 1 to 3 do
43053: LD_ADDR_VAR 0 8
43057: PUSH
43058: DOUBLE
43059: LD_INT 1
43061: DEC
43062: ST_TO_ADDR
43063: LD_INT 3
43065: PUSH
43066: FOR_TO
43067: IFFALSE 43096
// AddResourceType ( base , i , sources [ i ] ) ;
43069: LD_VAR 0 15
43073: PPUSH
43074: LD_VAR 0 8
43078: PPUSH
43079: LD_VAR 0 5
43083: PUSH
43084: LD_VAR 0 8
43088: ARRAY
43089: PPUSH
43090: CALL_OW 276
43094: GO 43066
43096: POP
43097: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
43098: LD_ADDR_VAR 0 18
43102: PUSH
43103: LD_VAR 0 15
43107: PPUSH
43108: LD_VAR 0 2
43112: PPUSH
43113: LD_INT 1
43115: PPUSH
43116: CALL 42359 0 3
43120: ST_TO_ADDR
// InitHc ;
43121: CALL_OW 19
// InitUc ;
43125: CALL_OW 18
// uc_side := side ;
43129: LD_ADDR_OWVAR 20
43133: PUSH
43134: LD_VAR 0 16
43138: ST_TO_ADDR
// uc_nation := nation ;
43139: LD_ADDR_OWVAR 21
43143: PUSH
43144: LD_VAR 0 17
43148: ST_TO_ADDR
// if buildings then
43149: LD_VAR 0 18
43153: IFFALSE 44475
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
43155: LD_ADDR_VAR 0 19
43159: PUSH
43160: LD_VAR 0 18
43164: PPUSH
43165: LD_INT 2
43167: PUSH
43168: LD_INT 30
43170: PUSH
43171: LD_INT 29
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 30
43180: PUSH
43181: LD_INT 30
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: LIST
43192: PPUSH
43193: CALL_OW 72
43197: ST_TO_ADDR
// if tmp then
43198: LD_VAR 0 19
43202: IFFALSE 43250
// for i in tmp do
43204: LD_ADDR_VAR 0 8
43208: PUSH
43209: LD_VAR 0 19
43213: PUSH
43214: FOR_IN
43215: IFFALSE 43248
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
43217: LD_VAR 0 8
43221: PPUSH
43222: CALL_OW 250
43226: PPUSH
43227: LD_VAR 0 8
43231: PPUSH
43232: CALL_OW 251
43236: PPUSH
43237: LD_VAR 0 16
43241: PPUSH
43242: CALL_OW 441
43246: GO 43214
43248: POP
43249: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
43250: LD_VAR 0 18
43254: PPUSH
43255: LD_INT 2
43257: PUSH
43258: LD_INT 30
43260: PUSH
43261: LD_INT 32
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 30
43270: PUSH
43271: LD_INT 33
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: LIST
43282: PPUSH
43283: CALL_OW 72
43287: IFFALSE 43375
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
43289: LD_ADDR_VAR 0 8
43293: PUSH
43294: LD_VAR 0 18
43298: PPUSH
43299: LD_INT 2
43301: PUSH
43302: LD_INT 30
43304: PUSH
43305: LD_INT 32
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 30
43314: PUSH
43315: LD_INT 33
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: LIST
43326: PPUSH
43327: CALL_OW 72
43331: PUSH
43332: FOR_IN
43333: IFFALSE 43373
// begin if not GetBWeapon ( i ) then
43335: LD_VAR 0 8
43339: PPUSH
43340: CALL_OW 269
43344: NOT
43345: IFFALSE 43371
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
43347: LD_VAR 0 8
43351: PPUSH
43352: LD_VAR 0 8
43356: PPUSH
43357: LD_VAR 0 2
43361: PPUSH
43362: CALL 44621 0 2
43366: PPUSH
43367: CALL_OW 431
// end ;
43371: GO 43332
43373: POP
43374: POP
// end ; for i = 1 to personel do
43375: LD_ADDR_VAR 0 8
43379: PUSH
43380: DOUBLE
43381: LD_INT 1
43383: DEC
43384: ST_TO_ADDR
43385: LD_VAR 0 6
43389: PUSH
43390: FOR_TO
43391: IFFALSE 44455
// begin if i > 4 then
43393: LD_VAR 0 8
43397: PUSH
43398: LD_INT 4
43400: GREATER
43401: IFFALSE 43405
// break ;
43403: GO 44455
// case i of 1 :
43405: LD_VAR 0 8
43409: PUSH
43410: LD_INT 1
43412: DOUBLE
43413: EQUAL
43414: IFTRUE 43418
43416: GO 43498
43418: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
43419: LD_ADDR_VAR 0 12
43423: PUSH
43424: LD_VAR 0 18
43428: PPUSH
43429: LD_INT 22
43431: PUSH
43432: LD_VAR 0 16
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 58
43443: PUSH
43444: EMPTY
43445: LIST
43446: PUSH
43447: LD_INT 2
43449: PUSH
43450: LD_INT 30
43452: PUSH
43453: LD_INT 32
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 30
43462: PUSH
43463: LD_INT 4
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 30
43472: PUSH
43473: LD_INT 5
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: LIST
43490: PPUSH
43491: CALL_OW 72
43495: ST_TO_ADDR
43496: GO 43720
43498: LD_INT 2
43500: DOUBLE
43501: EQUAL
43502: IFTRUE 43506
43504: GO 43568
43506: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43507: LD_ADDR_VAR 0 12
43511: PUSH
43512: LD_VAR 0 18
43516: PPUSH
43517: LD_INT 22
43519: PUSH
43520: LD_VAR 0 16
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 2
43531: PUSH
43532: LD_INT 30
43534: PUSH
43535: LD_INT 0
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 30
43544: PUSH
43545: LD_INT 1
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: LIST
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PPUSH
43561: CALL_OW 72
43565: ST_TO_ADDR
43566: GO 43720
43568: LD_INT 3
43570: DOUBLE
43571: EQUAL
43572: IFTRUE 43576
43574: GO 43638
43576: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43577: LD_ADDR_VAR 0 12
43581: PUSH
43582: LD_VAR 0 18
43586: PPUSH
43587: LD_INT 22
43589: PUSH
43590: LD_VAR 0 16
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 2
43601: PUSH
43602: LD_INT 30
43604: PUSH
43605: LD_INT 2
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 30
43614: PUSH
43615: LD_INT 3
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: LIST
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PPUSH
43631: CALL_OW 72
43635: ST_TO_ADDR
43636: GO 43720
43638: LD_INT 4
43640: DOUBLE
43641: EQUAL
43642: IFTRUE 43646
43644: GO 43719
43646: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43647: LD_ADDR_VAR 0 12
43651: PUSH
43652: LD_VAR 0 18
43656: PPUSH
43657: LD_INT 22
43659: PUSH
43660: LD_VAR 0 16
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 2
43671: PUSH
43672: LD_INT 30
43674: PUSH
43675: LD_INT 6
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 30
43684: PUSH
43685: LD_INT 7
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 30
43694: PUSH
43695: LD_INT 8
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PPUSH
43712: CALL_OW 72
43716: ST_TO_ADDR
43717: GO 43720
43719: POP
// if i = 1 then
43720: LD_VAR 0 8
43724: PUSH
43725: LD_INT 1
43727: EQUAL
43728: IFFALSE 43839
// begin tmp := [ ] ;
43730: LD_ADDR_VAR 0 19
43734: PUSH
43735: EMPTY
43736: ST_TO_ADDR
// for j in f do
43737: LD_ADDR_VAR 0 9
43741: PUSH
43742: LD_VAR 0 12
43746: PUSH
43747: FOR_IN
43748: IFFALSE 43821
// if GetBType ( j ) = b_bunker then
43750: LD_VAR 0 9
43754: PPUSH
43755: CALL_OW 266
43759: PUSH
43760: LD_INT 32
43762: EQUAL
43763: IFFALSE 43790
// tmp := Insert ( tmp , 1 , j ) else
43765: LD_ADDR_VAR 0 19
43769: PUSH
43770: LD_VAR 0 19
43774: PPUSH
43775: LD_INT 1
43777: PPUSH
43778: LD_VAR 0 9
43782: PPUSH
43783: CALL_OW 2
43787: ST_TO_ADDR
43788: GO 43819
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43790: LD_ADDR_VAR 0 19
43794: PUSH
43795: LD_VAR 0 19
43799: PPUSH
43800: LD_VAR 0 19
43804: PUSH
43805: LD_INT 1
43807: PLUS
43808: PPUSH
43809: LD_VAR 0 9
43813: PPUSH
43814: CALL_OW 2
43818: ST_TO_ADDR
43819: GO 43747
43821: POP
43822: POP
// if tmp then
43823: LD_VAR 0 19
43827: IFFALSE 43839
// f := tmp ;
43829: LD_ADDR_VAR 0 12
43833: PUSH
43834: LD_VAR 0 19
43838: ST_TO_ADDR
// end ; x := personel [ i ] ;
43839: LD_ADDR_VAR 0 13
43843: PUSH
43844: LD_VAR 0 6
43848: PUSH
43849: LD_VAR 0 8
43853: ARRAY
43854: ST_TO_ADDR
// if x = - 1 then
43855: LD_VAR 0 13
43859: PUSH
43860: LD_INT 1
43862: NEG
43863: EQUAL
43864: IFFALSE 44073
// begin for j in f do
43866: LD_ADDR_VAR 0 9
43870: PUSH
43871: LD_VAR 0 12
43875: PUSH
43876: FOR_IN
43877: IFFALSE 44069
// repeat InitHc ;
43879: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43883: LD_VAR 0 9
43887: PPUSH
43888: CALL_OW 266
43892: PUSH
43893: LD_INT 5
43895: EQUAL
43896: IFFALSE 43966
// begin if UnitsInside ( j ) < 3 then
43898: LD_VAR 0 9
43902: PPUSH
43903: CALL_OW 313
43907: PUSH
43908: LD_INT 3
43910: LESS
43911: IFFALSE 43947
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43913: LD_INT 0
43915: PPUSH
43916: LD_INT 5
43918: PUSH
43919: LD_INT 8
43921: PUSH
43922: LD_INT 9
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: LIST
43929: PUSH
43930: LD_VAR 0 17
43934: ARRAY
43935: PPUSH
43936: LD_VAR 0 4
43940: PPUSH
43941: CALL_OW 380
43945: GO 43964
// PrepareHuman ( false , i , skill ) ;
43947: LD_INT 0
43949: PPUSH
43950: LD_VAR 0 8
43954: PPUSH
43955: LD_VAR 0 4
43959: PPUSH
43960: CALL_OW 380
// end else
43964: GO 43983
// PrepareHuman ( false , i , skill ) ;
43966: LD_INT 0
43968: PPUSH
43969: LD_VAR 0 8
43973: PPUSH
43974: LD_VAR 0 4
43978: PPUSH
43979: CALL_OW 380
// un := CreateHuman ;
43983: LD_ADDR_VAR 0 14
43987: PUSH
43988: CALL_OW 44
43992: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43993: LD_ADDR_VAR 0 7
43997: PUSH
43998: LD_VAR 0 7
44002: PPUSH
44003: LD_INT 1
44005: PPUSH
44006: LD_VAR 0 14
44010: PPUSH
44011: CALL_OW 2
44015: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
44016: LD_VAR 0 14
44020: PPUSH
44021: LD_VAR 0 9
44025: PPUSH
44026: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
44030: LD_VAR 0 9
44034: PPUSH
44035: CALL_OW 313
44039: PUSH
44040: LD_INT 6
44042: EQUAL
44043: PUSH
44044: LD_VAR 0 9
44048: PPUSH
44049: CALL_OW 266
44053: PUSH
44054: LD_INT 32
44056: PUSH
44057: LD_INT 31
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: IN
44064: OR
44065: IFFALSE 43879
44067: GO 43876
44069: POP
44070: POP
// end else
44071: GO 44453
// for j = 1 to x do
44073: LD_ADDR_VAR 0 9
44077: PUSH
44078: DOUBLE
44079: LD_INT 1
44081: DEC
44082: ST_TO_ADDR
44083: LD_VAR 0 13
44087: PUSH
44088: FOR_TO
44089: IFFALSE 44451
// begin InitHc ;
44091: CALL_OW 19
// if not f then
44095: LD_VAR 0 12
44099: NOT
44100: IFFALSE 44189
// begin PrepareHuman ( false , i , skill ) ;
44102: LD_INT 0
44104: PPUSH
44105: LD_VAR 0 8
44109: PPUSH
44110: LD_VAR 0 4
44114: PPUSH
44115: CALL_OW 380
// un := CreateHuman ;
44119: LD_ADDR_VAR 0 14
44123: PUSH
44124: CALL_OW 44
44128: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44129: LD_ADDR_VAR 0 7
44133: PUSH
44134: LD_VAR 0 7
44138: PPUSH
44139: LD_INT 1
44141: PPUSH
44142: LD_VAR 0 14
44146: PPUSH
44147: CALL_OW 2
44151: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44152: LD_VAR 0 14
44156: PPUSH
44157: LD_VAR 0 1
44161: PPUSH
44162: CALL_OW 250
44166: PPUSH
44167: LD_VAR 0 1
44171: PPUSH
44172: CALL_OW 251
44176: PPUSH
44177: LD_INT 10
44179: PPUSH
44180: LD_INT 0
44182: PPUSH
44183: CALL_OW 50
// continue ;
44187: GO 44088
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
44189: LD_VAR 0 12
44193: PUSH
44194: LD_INT 1
44196: ARRAY
44197: PPUSH
44198: CALL_OW 313
44202: PUSH
44203: LD_VAR 0 12
44207: PUSH
44208: LD_INT 1
44210: ARRAY
44211: PPUSH
44212: CALL_OW 266
44216: PUSH
44217: LD_INT 32
44219: PUSH
44220: LD_INT 31
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: IN
44227: AND
44228: PUSH
44229: LD_VAR 0 12
44233: PUSH
44234: LD_INT 1
44236: ARRAY
44237: PPUSH
44238: CALL_OW 313
44242: PUSH
44243: LD_INT 6
44245: EQUAL
44246: OR
44247: IFFALSE 44267
// f := Delete ( f , 1 ) ;
44249: LD_ADDR_VAR 0 12
44253: PUSH
44254: LD_VAR 0 12
44258: PPUSH
44259: LD_INT 1
44261: PPUSH
44262: CALL_OW 3
44266: ST_TO_ADDR
// if not f then
44267: LD_VAR 0 12
44271: NOT
44272: IFFALSE 44290
// begin x := x + 2 ;
44274: LD_ADDR_VAR 0 13
44278: PUSH
44279: LD_VAR 0 13
44283: PUSH
44284: LD_INT 2
44286: PLUS
44287: ST_TO_ADDR
// continue ;
44288: GO 44088
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
44290: LD_VAR 0 12
44294: PUSH
44295: LD_INT 1
44297: ARRAY
44298: PPUSH
44299: CALL_OW 266
44303: PUSH
44304: LD_INT 5
44306: EQUAL
44307: IFFALSE 44381
// begin if UnitsInside ( f [ 1 ] ) < 3 then
44309: LD_VAR 0 12
44313: PUSH
44314: LD_INT 1
44316: ARRAY
44317: PPUSH
44318: CALL_OW 313
44322: PUSH
44323: LD_INT 3
44325: LESS
44326: IFFALSE 44362
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44328: LD_INT 0
44330: PPUSH
44331: LD_INT 5
44333: PUSH
44334: LD_INT 8
44336: PUSH
44337: LD_INT 9
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: LIST
44344: PUSH
44345: LD_VAR 0 17
44349: ARRAY
44350: PPUSH
44351: LD_VAR 0 4
44355: PPUSH
44356: CALL_OW 380
44360: GO 44379
// PrepareHuman ( false , i , skill ) ;
44362: LD_INT 0
44364: PPUSH
44365: LD_VAR 0 8
44369: PPUSH
44370: LD_VAR 0 4
44374: PPUSH
44375: CALL_OW 380
// end else
44379: GO 44398
// PrepareHuman ( false , i , skill ) ;
44381: LD_INT 0
44383: PPUSH
44384: LD_VAR 0 8
44388: PPUSH
44389: LD_VAR 0 4
44393: PPUSH
44394: CALL_OW 380
// un := CreateHuman ;
44398: LD_ADDR_VAR 0 14
44402: PUSH
44403: CALL_OW 44
44407: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44408: LD_ADDR_VAR 0 7
44412: PUSH
44413: LD_VAR 0 7
44417: PPUSH
44418: LD_INT 1
44420: PPUSH
44421: LD_VAR 0 14
44425: PPUSH
44426: CALL_OW 2
44430: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
44431: LD_VAR 0 14
44435: PPUSH
44436: LD_VAR 0 12
44440: PUSH
44441: LD_INT 1
44443: ARRAY
44444: PPUSH
44445: CALL_OW 52
// end ;
44449: GO 44088
44451: POP
44452: POP
// end ;
44453: GO 43390
44455: POP
44456: POP
// result := result ^ buildings ;
44457: LD_ADDR_VAR 0 7
44461: PUSH
44462: LD_VAR 0 7
44466: PUSH
44467: LD_VAR 0 18
44471: ADD
44472: ST_TO_ADDR
// end else
44473: GO 44616
// begin for i = 1 to personel do
44475: LD_ADDR_VAR 0 8
44479: PUSH
44480: DOUBLE
44481: LD_INT 1
44483: DEC
44484: ST_TO_ADDR
44485: LD_VAR 0 6
44489: PUSH
44490: FOR_TO
44491: IFFALSE 44614
// begin if i > 4 then
44493: LD_VAR 0 8
44497: PUSH
44498: LD_INT 4
44500: GREATER
44501: IFFALSE 44505
// break ;
44503: GO 44614
// x := personel [ i ] ;
44505: LD_ADDR_VAR 0 13
44509: PUSH
44510: LD_VAR 0 6
44514: PUSH
44515: LD_VAR 0 8
44519: ARRAY
44520: ST_TO_ADDR
// if x = - 1 then
44521: LD_VAR 0 13
44525: PUSH
44526: LD_INT 1
44528: NEG
44529: EQUAL
44530: IFFALSE 44534
// continue ;
44532: GO 44490
// PrepareHuman ( false , i , skill ) ;
44534: LD_INT 0
44536: PPUSH
44537: LD_VAR 0 8
44541: PPUSH
44542: LD_VAR 0 4
44546: PPUSH
44547: CALL_OW 380
// un := CreateHuman ;
44551: LD_ADDR_VAR 0 14
44555: PUSH
44556: CALL_OW 44
44560: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44561: LD_VAR 0 14
44565: PPUSH
44566: LD_VAR 0 1
44570: PPUSH
44571: CALL_OW 250
44575: PPUSH
44576: LD_VAR 0 1
44580: PPUSH
44581: CALL_OW 251
44585: PPUSH
44586: LD_INT 10
44588: PPUSH
44589: LD_INT 0
44591: PPUSH
44592: CALL_OW 50
// result := result ^ un ;
44596: LD_ADDR_VAR 0 7
44600: PUSH
44601: LD_VAR 0 7
44605: PUSH
44606: LD_VAR 0 14
44610: ADD
44611: ST_TO_ADDR
// end ;
44612: GO 44490
44614: POP
44615: POP
// end ; end ;
44616: LD_VAR 0 7
44620: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44621: LD_INT 0
44623: PPUSH
44624: PPUSH
44625: PPUSH
44626: PPUSH
44627: PPUSH
44628: PPUSH
44629: PPUSH
44630: PPUSH
44631: PPUSH
44632: PPUSH
44633: PPUSH
44634: PPUSH
44635: PPUSH
44636: PPUSH
44637: PPUSH
44638: PPUSH
// result := false ;
44639: LD_ADDR_VAR 0 3
44643: PUSH
44644: LD_INT 0
44646: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44647: LD_VAR 0 1
44651: NOT
44652: PUSH
44653: LD_VAR 0 1
44657: PPUSH
44658: CALL_OW 266
44662: PUSH
44663: LD_INT 32
44665: PUSH
44666: LD_INT 33
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: IN
44673: NOT
44674: OR
44675: IFFALSE 44679
// exit ;
44677: GO 45788
// nat := GetNation ( tower ) ;
44679: LD_ADDR_VAR 0 12
44683: PUSH
44684: LD_VAR 0 1
44688: PPUSH
44689: CALL_OW 248
44693: ST_TO_ADDR
// side := GetSide ( tower ) ;
44694: LD_ADDR_VAR 0 16
44698: PUSH
44699: LD_VAR 0 1
44703: PPUSH
44704: CALL_OW 255
44708: ST_TO_ADDR
// x := GetX ( tower ) ;
44709: LD_ADDR_VAR 0 10
44713: PUSH
44714: LD_VAR 0 1
44718: PPUSH
44719: CALL_OW 250
44723: ST_TO_ADDR
// y := GetY ( tower ) ;
44724: LD_ADDR_VAR 0 11
44728: PUSH
44729: LD_VAR 0 1
44733: PPUSH
44734: CALL_OW 251
44738: ST_TO_ADDR
// if not x or not y then
44739: LD_VAR 0 10
44743: NOT
44744: PUSH
44745: LD_VAR 0 11
44749: NOT
44750: OR
44751: IFFALSE 44755
// exit ;
44753: GO 45788
// weapon := 0 ;
44755: LD_ADDR_VAR 0 18
44759: PUSH
44760: LD_INT 0
44762: ST_TO_ADDR
// fac_list := [ ] ;
44763: LD_ADDR_VAR 0 17
44767: PUSH
44768: EMPTY
44769: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44770: LD_ADDR_VAR 0 6
44774: PUSH
44775: LD_VAR 0 1
44779: PPUSH
44780: CALL_OW 274
44784: PPUSH
44785: LD_VAR 0 2
44789: PPUSH
44790: LD_INT 0
44792: PPUSH
44793: CALL 42359 0 3
44797: PPUSH
44798: LD_INT 30
44800: PUSH
44801: LD_INT 3
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PPUSH
44808: CALL_OW 72
44812: ST_TO_ADDR
// if not factories then
44813: LD_VAR 0 6
44817: NOT
44818: IFFALSE 44822
// exit ;
44820: GO 45788
// for i in factories do
44822: LD_ADDR_VAR 0 8
44826: PUSH
44827: LD_VAR 0 6
44831: PUSH
44832: FOR_IN
44833: IFFALSE 44858
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44835: LD_ADDR_VAR 0 17
44839: PUSH
44840: LD_VAR 0 17
44844: PUSH
44845: LD_VAR 0 8
44849: PPUSH
44850: CALL_OW 478
44854: UNION
44855: ST_TO_ADDR
44856: GO 44832
44858: POP
44859: POP
// if not fac_list then
44860: LD_VAR 0 17
44864: NOT
44865: IFFALSE 44869
// exit ;
44867: GO 45788
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44869: LD_ADDR_VAR 0 5
44873: PUSH
44874: LD_INT 4
44876: PUSH
44877: LD_INT 5
44879: PUSH
44880: LD_INT 9
44882: PUSH
44883: LD_INT 10
44885: PUSH
44886: LD_INT 6
44888: PUSH
44889: LD_INT 7
44891: PUSH
44892: LD_INT 11
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 27
44906: PUSH
44907: LD_INT 28
44909: PUSH
44910: LD_INT 26
44912: PUSH
44913: LD_INT 30
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 43
44924: PUSH
44925: LD_INT 44
44927: PUSH
44928: LD_INT 46
44930: PUSH
44931: LD_INT 45
44933: PUSH
44934: LD_INT 47
44936: PUSH
44937: LD_INT 49
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: LIST
44952: PUSH
44953: LD_VAR 0 12
44957: ARRAY
44958: ST_TO_ADDR
// list := list isect fac_list ;
44959: LD_ADDR_VAR 0 5
44963: PUSH
44964: LD_VAR 0 5
44968: PUSH
44969: LD_VAR 0 17
44973: ISECT
44974: ST_TO_ADDR
// if not list then
44975: LD_VAR 0 5
44979: NOT
44980: IFFALSE 44984
// exit ;
44982: GO 45788
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44984: LD_VAR 0 12
44988: PUSH
44989: LD_INT 3
44991: EQUAL
44992: PUSH
44993: LD_INT 49
44995: PUSH
44996: LD_VAR 0 5
45000: IN
45001: AND
45002: PUSH
45003: LD_INT 31
45005: PPUSH
45006: LD_VAR 0 16
45010: PPUSH
45011: CALL_OW 321
45015: PUSH
45016: LD_INT 2
45018: EQUAL
45019: AND
45020: IFFALSE 45080
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
45022: LD_INT 22
45024: PUSH
45025: LD_VAR 0 16
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 35
45036: PUSH
45037: LD_INT 49
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 91
45046: PUSH
45047: LD_VAR 0 1
45051: PUSH
45052: LD_INT 10
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: LIST
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: LIST
45064: PPUSH
45065: CALL_OW 69
45069: NOT
45070: IFFALSE 45080
// weapon := ru_time_lapser ;
45072: LD_ADDR_VAR 0 18
45076: PUSH
45077: LD_INT 49
45079: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
45080: LD_VAR 0 12
45084: PUSH
45085: LD_INT 1
45087: PUSH
45088: LD_INT 2
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: IN
45095: PUSH
45096: LD_INT 11
45098: PUSH
45099: LD_VAR 0 5
45103: IN
45104: PUSH
45105: LD_INT 30
45107: PUSH
45108: LD_VAR 0 5
45112: IN
45113: OR
45114: AND
45115: PUSH
45116: LD_INT 6
45118: PPUSH
45119: LD_VAR 0 16
45123: PPUSH
45124: CALL_OW 321
45128: PUSH
45129: LD_INT 2
45131: EQUAL
45132: AND
45133: IFFALSE 45298
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
45135: LD_INT 22
45137: PUSH
45138: LD_VAR 0 16
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 2
45149: PUSH
45150: LD_INT 35
45152: PUSH
45153: LD_INT 11
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 35
45162: PUSH
45163: LD_INT 30
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 91
45177: PUSH
45178: LD_VAR 0 1
45182: PUSH
45183: LD_INT 18
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: LIST
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: LIST
45195: PPUSH
45196: CALL_OW 69
45200: NOT
45201: PUSH
45202: LD_INT 22
45204: PUSH
45205: LD_VAR 0 16
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 2
45216: PUSH
45217: LD_INT 30
45219: PUSH
45220: LD_INT 32
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 30
45229: PUSH
45230: LD_INT 33
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 91
45244: PUSH
45245: LD_VAR 0 1
45249: PUSH
45250: LD_INT 12
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: LIST
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: LIST
45262: PUSH
45263: EMPTY
45264: LIST
45265: PPUSH
45266: CALL_OW 69
45270: PUSH
45271: LD_INT 2
45273: GREATER
45274: AND
45275: IFFALSE 45298
// weapon := [ us_radar , ar_radar ] [ nat ] ;
45277: LD_ADDR_VAR 0 18
45281: PUSH
45282: LD_INT 11
45284: PUSH
45285: LD_INT 30
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_VAR 0 12
45296: ARRAY
45297: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
45298: LD_VAR 0 18
45302: NOT
45303: PUSH
45304: LD_INT 40
45306: PPUSH
45307: LD_VAR 0 16
45311: PPUSH
45312: CALL_OW 321
45316: PUSH
45317: LD_INT 2
45319: EQUAL
45320: AND
45321: PUSH
45322: LD_INT 7
45324: PUSH
45325: LD_VAR 0 5
45329: IN
45330: PUSH
45331: LD_INT 28
45333: PUSH
45334: LD_VAR 0 5
45338: IN
45339: OR
45340: PUSH
45341: LD_INT 45
45343: PUSH
45344: LD_VAR 0 5
45348: IN
45349: OR
45350: AND
45351: IFFALSE 45605
// begin hex := GetHexInfo ( x , y ) ;
45353: LD_ADDR_VAR 0 4
45357: PUSH
45358: LD_VAR 0 10
45362: PPUSH
45363: LD_VAR 0 11
45367: PPUSH
45368: CALL_OW 546
45372: ST_TO_ADDR
// if hex [ 1 ] then
45373: LD_VAR 0 4
45377: PUSH
45378: LD_INT 1
45380: ARRAY
45381: IFFALSE 45385
// exit ;
45383: GO 45788
// height := hex [ 2 ] ;
45385: LD_ADDR_VAR 0 15
45389: PUSH
45390: LD_VAR 0 4
45394: PUSH
45395: LD_INT 2
45397: ARRAY
45398: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
45399: LD_ADDR_VAR 0 14
45403: PUSH
45404: LD_INT 0
45406: PUSH
45407: LD_INT 2
45409: PUSH
45410: LD_INT 3
45412: PUSH
45413: LD_INT 5
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: ST_TO_ADDR
// for i in tmp do
45422: LD_ADDR_VAR 0 8
45426: PUSH
45427: LD_VAR 0 14
45431: PUSH
45432: FOR_IN
45433: IFFALSE 45603
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
45435: LD_ADDR_VAR 0 9
45439: PUSH
45440: LD_VAR 0 10
45444: PPUSH
45445: LD_VAR 0 8
45449: PPUSH
45450: LD_INT 5
45452: PPUSH
45453: CALL_OW 272
45457: PUSH
45458: LD_VAR 0 11
45462: PPUSH
45463: LD_VAR 0 8
45467: PPUSH
45468: LD_INT 5
45470: PPUSH
45471: CALL_OW 273
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45480: LD_VAR 0 9
45484: PUSH
45485: LD_INT 1
45487: ARRAY
45488: PPUSH
45489: LD_VAR 0 9
45493: PUSH
45494: LD_INT 2
45496: ARRAY
45497: PPUSH
45498: CALL_OW 488
45502: IFFALSE 45601
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45504: LD_ADDR_VAR 0 4
45508: PUSH
45509: LD_VAR 0 9
45513: PUSH
45514: LD_INT 1
45516: ARRAY
45517: PPUSH
45518: LD_VAR 0 9
45522: PUSH
45523: LD_INT 2
45525: ARRAY
45526: PPUSH
45527: CALL_OW 546
45531: ST_TO_ADDR
// if hex [ 1 ] then
45532: LD_VAR 0 4
45536: PUSH
45537: LD_INT 1
45539: ARRAY
45540: IFFALSE 45544
// continue ;
45542: GO 45432
// h := hex [ 2 ] ;
45544: LD_ADDR_VAR 0 13
45548: PUSH
45549: LD_VAR 0 4
45553: PUSH
45554: LD_INT 2
45556: ARRAY
45557: ST_TO_ADDR
// if h + 7 < height then
45558: LD_VAR 0 13
45562: PUSH
45563: LD_INT 7
45565: PLUS
45566: PUSH
45567: LD_VAR 0 15
45571: LESS
45572: IFFALSE 45601
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45574: LD_ADDR_VAR 0 18
45578: PUSH
45579: LD_INT 7
45581: PUSH
45582: LD_INT 28
45584: PUSH
45585: LD_INT 45
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: LIST
45592: PUSH
45593: LD_VAR 0 12
45597: ARRAY
45598: ST_TO_ADDR
// break ;
45599: GO 45603
// end ; end ; end ;
45601: GO 45432
45603: POP
45604: POP
// end ; if not weapon then
45605: LD_VAR 0 18
45609: NOT
45610: IFFALSE 45670
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45612: LD_ADDR_VAR 0 5
45616: PUSH
45617: LD_VAR 0 5
45621: PUSH
45622: LD_INT 11
45624: PUSH
45625: LD_INT 30
45627: PUSH
45628: LD_INT 49
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: LIST
45635: DIFF
45636: ST_TO_ADDR
// if not list then
45637: LD_VAR 0 5
45641: NOT
45642: IFFALSE 45646
// exit ;
45644: GO 45788
// weapon := list [ rand ( 1 , list ) ] ;
45646: LD_ADDR_VAR 0 18
45650: PUSH
45651: LD_VAR 0 5
45655: PUSH
45656: LD_INT 1
45658: PPUSH
45659: LD_VAR 0 5
45663: PPUSH
45664: CALL_OW 12
45668: ARRAY
45669: ST_TO_ADDR
// end ; if weapon then
45670: LD_VAR 0 18
45674: IFFALSE 45788
// begin tmp := CostOfWeapon ( weapon ) ;
45676: LD_ADDR_VAR 0 14
45680: PUSH
45681: LD_VAR 0 18
45685: PPUSH
45686: CALL_OW 451
45690: ST_TO_ADDR
// j := GetBase ( tower ) ;
45691: LD_ADDR_VAR 0 9
45695: PUSH
45696: LD_VAR 0 1
45700: PPUSH
45701: CALL_OW 274
45705: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45706: LD_VAR 0 9
45710: PPUSH
45711: LD_INT 1
45713: PPUSH
45714: CALL_OW 275
45718: PUSH
45719: LD_VAR 0 14
45723: PUSH
45724: LD_INT 1
45726: ARRAY
45727: GREATEREQUAL
45728: PUSH
45729: LD_VAR 0 9
45733: PPUSH
45734: LD_INT 2
45736: PPUSH
45737: CALL_OW 275
45741: PUSH
45742: LD_VAR 0 14
45746: PUSH
45747: LD_INT 2
45749: ARRAY
45750: GREATEREQUAL
45751: AND
45752: PUSH
45753: LD_VAR 0 9
45757: PPUSH
45758: LD_INT 3
45760: PPUSH
45761: CALL_OW 275
45765: PUSH
45766: LD_VAR 0 14
45770: PUSH
45771: LD_INT 3
45773: ARRAY
45774: GREATEREQUAL
45775: AND
45776: IFFALSE 45788
// result := weapon ;
45778: LD_ADDR_VAR 0 3
45782: PUSH
45783: LD_VAR 0 18
45787: ST_TO_ADDR
// end ; end ;
45788: LD_VAR 0 3
45792: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45793: LD_INT 0
45795: PPUSH
45796: PPUSH
// result := true ;
45797: LD_ADDR_VAR 0 3
45801: PUSH
45802: LD_INT 1
45804: ST_TO_ADDR
// if array1 = array2 then
45805: LD_VAR 0 1
45809: PUSH
45810: LD_VAR 0 2
45814: EQUAL
45815: IFFALSE 45875
// begin for i = 1 to array1 do
45817: LD_ADDR_VAR 0 4
45821: PUSH
45822: DOUBLE
45823: LD_INT 1
45825: DEC
45826: ST_TO_ADDR
45827: LD_VAR 0 1
45831: PUSH
45832: FOR_TO
45833: IFFALSE 45871
// if array1 [ i ] <> array2 [ i ] then
45835: LD_VAR 0 1
45839: PUSH
45840: LD_VAR 0 4
45844: ARRAY
45845: PUSH
45846: LD_VAR 0 2
45850: PUSH
45851: LD_VAR 0 4
45855: ARRAY
45856: NONEQUAL
45857: IFFALSE 45869
// begin result := false ;
45859: LD_ADDR_VAR 0 3
45863: PUSH
45864: LD_INT 0
45866: ST_TO_ADDR
// break ;
45867: GO 45871
// end ;
45869: GO 45832
45871: POP
45872: POP
// end else
45873: GO 45883
// result := false ;
45875: LD_ADDR_VAR 0 3
45879: PUSH
45880: LD_INT 0
45882: ST_TO_ADDR
// end ;
45883: LD_VAR 0 3
45887: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45888: LD_INT 0
45890: PPUSH
45891: PPUSH
// if not array1 or not array2 then
45892: LD_VAR 0 1
45896: NOT
45897: PUSH
45898: LD_VAR 0 2
45902: NOT
45903: OR
45904: IFFALSE 45908
// exit ;
45906: GO 45972
// result := true ;
45908: LD_ADDR_VAR 0 3
45912: PUSH
45913: LD_INT 1
45915: ST_TO_ADDR
// for i = 1 to array1 do
45916: LD_ADDR_VAR 0 4
45920: PUSH
45921: DOUBLE
45922: LD_INT 1
45924: DEC
45925: ST_TO_ADDR
45926: LD_VAR 0 1
45930: PUSH
45931: FOR_TO
45932: IFFALSE 45970
// if array1 [ i ] <> array2 [ i ] then
45934: LD_VAR 0 1
45938: PUSH
45939: LD_VAR 0 4
45943: ARRAY
45944: PUSH
45945: LD_VAR 0 2
45949: PUSH
45950: LD_VAR 0 4
45954: ARRAY
45955: NONEQUAL
45956: IFFALSE 45968
// begin result := false ;
45958: LD_ADDR_VAR 0 3
45962: PUSH
45963: LD_INT 0
45965: ST_TO_ADDR
// break ;
45966: GO 45970
// end ;
45968: GO 45931
45970: POP
45971: POP
// end ;
45972: LD_VAR 0 3
45976: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45977: LD_INT 0
45979: PPUSH
45980: PPUSH
45981: PPUSH
// pom := GetBase ( fac ) ;
45982: LD_ADDR_VAR 0 5
45986: PUSH
45987: LD_VAR 0 1
45991: PPUSH
45992: CALL_OW 274
45996: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45997: LD_ADDR_VAR 0 4
46001: PUSH
46002: LD_VAR 0 2
46006: PUSH
46007: LD_INT 1
46009: ARRAY
46010: PPUSH
46011: LD_VAR 0 2
46015: PUSH
46016: LD_INT 2
46018: ARRAY
46019: PPUSH
46020: LD_VAR 0 2
46024: PUSH
46025: LD_INT 3
46027: ARRAY
46028: PPUSH
46029: LD_VAR 0 2
46033: PUSH
46034: LD_INT 4
46036: ARRAY
46037: PPUSH
46038: CALL_OW 449
46042: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46043: LD_ADDR_VAR 0 3
46047: PUSH
46048: LD_VAR 0 5
46052: PPUSH
46053: LD_INT 1
46055: PPUSH
46056: CALL_OW 275
46060: PUSH
46061: LD_VAR 0 4
46065: PUSH
46066: LD_INT 1
46068: ARRAY
46069: GREATEREQUAL
46070: PUSH
46071: LD_VAR 0 5
46075: PPUSH
46076: LD_INT 2
46078: PPUSH
46079: CALL_OW 275
46083: PUSH
46084: LD_VAR 0 4
46088: PUSH
46089: LD_INT 2
46091: ARRAY
46092: GREATEREQUAL
46093: AND
46094: PUSH
46095: LD_VAR 0 5
46099: PPUSH
46100: LD_INT 3
46102: PPUSH
46103: CALL_OW 275
46107: PUSH
46108: LD_VAR 0 4
46112: PUSH
46113: LD_INT 3
46115: ARRAY
46116: GREATEREQUAL
46117: AND
46118: ST_TO_ADDR
// end ;
46119: LD_VAR 0 3
46123: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
46124: LD_INT 0
46126: PPUSH
46127: PPUSH
46128: PPUSH
46129: PPUSH
// pom := GetBase ( building ) ;
46130: LD_ADDR_VAR 0 3
46134: PUSH
46135: LD_VAR 0 1
46139: PPUSH
46140: CALL_OW 274
46144: ST_TO_ADDR
// if not pom then
46145: LD_VAR 0 3
46149: NOT
46150: IFFALSE 46154
// exit ;
46152: GO 46324
// btype := GetBType ( building ) ;
46154: LD_ADDR_VAR 0 5
46158: PUSH
46159: LD_VAR 0 1
46163: PPUSH
46164: CALL_OW 266
46168: ST_TO_ADDR
// if btype = b_armoury then
46169: LD_VAR 0 5
46173: PUSH
46174: LD_INT 4
46176: EQUAL
46177: IFFALSE 46187
// btype := b_barracks ;
46179: LD_ADDR_VAR 0 5
46183: PUSH
46184: LD_INT 5
46186: ST_TO_ADDR
// if btype = b_depot then
46187: LD_VAR 0 5
46191: PUSH
46192: LD_INT 0
46194: EQUAL
46195: IFFALSE 46205
// btype := b_warehouse ;
46197: LD_ADDR_VAR 0 5
46201: PUSH
46202: LD_INT 1
46204: ST_TO_ADDR
// if btype = b_workshop then
46205: LD_VAR 0 5
46209: PUSH
46210: LD_INT 2
46212: EQUAL
46213: IFFALSE 46223
// btype := b_factory ;
46215: LD_ADDR_VAR 0 5
46219: PUSH
46220: LD_INT 3
46222: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46223: LD_ADDR_VAR 0 4
46227: PUSH
46228: LD_VAR 0 5
46232: PPUSH
46233: LD_VAR 0 1
46237: PPUSH
46238: CALL_OW 248
46242: PPUSH
46243: CALL_OW 450
46247: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46248: LD_ADDR_VAR 0 2
46252: PUSH
46253: LD_VAR 0 3
46257: PPUSH
46258: LD_INT 1
46260: PPUSH
46261: CALL_OW 275
46265: PUSH
46266: LD_VAR 0 4
46270: PUSH
46271: LD_INT 1
46273: ARRAY
46274: GREATEREQUAL
46275: PUSH
46276: LD_VAR 0 3
46280: PPUSH
46281: LD_INT 2
46283: PPUSH
46284: CALL_OW 275
46288: PUSH
46289: LD_VAR 0 4
46293: PUSH
46294: LD_INT 2
46296: ARRAY
46297: GREATEREQUAL
46298: AND
46299: PUSH
46300: LD_VAR 0 3
46304: PPUSH
46305: LD_INT 3
46307: PPUSH
46308: CALL_OW 275
46312: PUSH
46313: LD_VAR 0 4
46317: PUSH
46318: LD_INT 3
46320: ARRAY
46321: GREATEREQUAL
46322: AND
46323: ST_TO_ADDR
// end ;
46324: LD_VAR 0 2
46328: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
46329: LD_INT 0
46331: PPUSH
46332: PPUSH
46333: PPUSH
// pom := GetBase ( building ) ;
46334: LD_ADDR_VAR 0 4
46338: PUSH
46339: LD_VAR 0 1
46343: PPUSH
46344: CALL_OW 274
46348: ST_TO_ADDR
// if not pom then
46349: LD_VAR 0 4
46353: NOT
46354: IFFALSE 46358
// exit ;
46356: GO 46459
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46358: LD_ADDR_VAR 0 5
46362: PUSH
46363: LD_VAR 0 2
46367: PPUSH
46368: LD_VAR 0 1
46372: PPUSH
46373: CALL_OW 248
46377: PPUSH
46378: CALL_OW 450
46382: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46383: LD_ADDR_VAR 0 3
46387: PUSH
46388: LD_VAR 0 4
46392: PPUSH
46393: LD_INT 1
46395: PPUSH
46396: CALL_OW 275
46400: PUSH
46401: LD_VAR 0 5
46405: PUSH
46406: LD_INT 1
46408: ARRAY
46409: GREATEREQUAL
46410: PUSH
46411: LD_VAR 0 4
46415: PPUSH
46416: LD_INT 2
46418: PPUSH
46419: CALL_OW 275
46423: PUSH
46424: LD_VAR 0 5
46428: PUSH
46429: LD_INT 2
46431: ARRAY
46432: GREATEREQUAL
46433: AND
46434: PUSH
46435: LD_VAR 0 4
46439: PPUSH
46440: LD_INT 3
46442: PPUSH
46443: CALL_OW 275
46447: PUSH
46448: LD_VAR 0 5
46452: PUSH
46453: LD_INT 3
46455: ARRAY
46456: GREATEREQUAL
46457: AND
46458: ST_TO_ADDR
// end ;
46459: LD_VAR 0 3
46463: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
46464: LD_INT 0
46466: PPUSH
46467: PPUSH
46468: PPUSH
46469: PPUSH
46470: PPUSH
46471: PPUSH
46472: PPUSH
46473: PPUSH
46474: PPUSH
46475: PPUSH
46476: PPUSH
// result := false ;
46477: LD_ADDR_VAR 0 8
46481: PUSH
46482: LD_INT 0
46484: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
46485: LD_VAR 0 5
46489: NOT
46490: PUSH
46491: LD_VAR 0 1
46495: NOT
46496: OR
46497: PUSH
46498: LD_VAR 0 2
46502: NOT
46503: OR
46504: PUSH
46505: LD_VAR 0 3
46509: NOT
46510: OR
46511: IFFALSE 46515
// exit ;
46513: GO 47329
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46515: LD_ADDR_VAR 0 14
46519: PUSH
46520: LD_VAR 0 1
46524: PPUSH
46525: LD_VAR 0 2
46529: PPUSH
46530: LD_VAR 0 3
46534: PPUSH
46535: LD_VAR 0 4
46539: PPUSH
46540: LD_VAR 0 5
46544: PUSH
46545: LD_INT 1
46547: ARRAY
46548: PPUSH
46549: CALL_OW 248
46553: PPUSH
46554: LD_INT 0
46556: PPUSH
46557: CALL 48566 0 6
46561: ST_TO_ADDR
// if not hexes then
46562: LD_VAR 0 14
46566: NOT
46567: IFFALSE 46571
// exit ;
46569: GO 47329
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46571: LD_ADDR_VAR 0 17
46575: PUSH
46576: LD_VAR 0 5
46580: PPUSH
46581: LD_INT 22
46583: PUSH
46584: LD_VAR 0 13
46588: PPUSH
46589: CALL_OW 255
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 2
46600: PUSH
46601: LD_INT 30
46603: PUSH
46604: LD_INT 0
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 30
46613: PUSH
46614: LD_INT 1
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: LIST
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PPUSH
46630: CALL_OW 72
46634: ST_TO_ADDR
// for i = 1 to hexes do
46635: LD_ADDR_VAR 0 9
46639: PUSH
46640: DOUBLE
46641: LD_INT 1
46643: DEC
46644: ST_TO_ADDR
46645: LD_VAR 0 14
46649: PUSH
46650: FOR_TO
46651: IFFALSE 47327
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46653: LD_ADDR_VAR 0 13
46657: PUSH
46658: LD_VAR 0 14
46662: PUSH
46663: LD_VAR 0 9
46667: ARRAY
46668: PUSH
46669: LD_INT 1
46671: ARRAY
46672: PPUSH
46673: LD_VAR 0 14
46677: PUSH
46678: LD_VAR 0 9
46682: ARRAY
46683: PUSH
46684: LD_INT 2
46686: ARRAY
46687: PPUSH
46688: CALL_OW 428
46692: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46693: LD_VAR 0 14
46697: PUSH
46698: LD_VAR 0 9
46702: ARRAY
46703: PUSH
46704: LD_INT 1
46706: ARRAY
46707: PPUSH
46708: LD_VAR 0 14
46712: PUSH
46713: LD_VAR 0 9
46717: ARRAY
46718: PUSH
46719: LD_INT 2
46721: ARRAY
46722: PPUSH
46723: CALL_OW 351
46727: PUSH
46728: LD_VAR 0 14
46732: PUSH
46733: LD_VAR 0 9
46737: ARRAY
46738: PUSH
46739: LD_INT 1
46741: ARRAY
46742: PPUSH
46743: LD_VAR 0 14
46747: PUSH
46748: LD_VAR 0 9
46752: ARRAY
46753: PUSH
46754: LD_INT 2
46756: ARRAY
46757: PPUSH
46758: CALL_OW 488
46762: NOT
46763: OR
46764: PUSH
46765: LD_VAR 0 13
46769: PPUSH
46770: CALL_OW 247
46774: PUSH
46775: LD_INT 3
46777: EQUAL
46778: OR
46779: IFFALSE 46785
// exit ;
46781: POP
46782: POP
46783: GO 47329
// if not tmp then
46785: LD_VAR 0 13
46789: NOT
46790: IFFALSE 46794
// continue ;
46792: GO 46650
// result := true ;
46794: LD_ADDR_VAR 0 8
46798: PUSH
46799: LD_INT 1
46801: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46802: LD_VAR 0 6
46806: PUSH
46807: LD_VAR 0 13
46811: PPUSH
46812: CALL_OW 247
46816: PUSH
46817: LD_INT 2
46819: EQUAL
46820: AND
46821: PUSH
46822: LD_VAR 0 13
46826: PPUSH
46827: CALL_OW 263
46831: PUSH
46832: LD_INT 1
46834: EQUAL
46835: AND
46836: IFFALSE 47000
// begin if IsDrivenBy ( tmp ) then
46838: LD_VAR 0 13
46842: PPUSH
46843: CALL_OW 311
46847: IFFALSE 46851
// continue ;
46849: GO 46650
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46851: LD_VAR 0 6
46855: PPUSH
46856: LD_INT 3
46858: PUSH
46859: LD_INT 60
46861: PUSH
46862: EMPTY
46863: LIST
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 3
46871: PUSH
46872: LD_INT 55
46874: PUSH
46875: EMPTY
46876: LIST
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PPUSH
46886: CALL_OW 72
46890: IFFALSE 46998
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46892: LD_ADDR_VAR 0 18
46896: PUSH
46897: LD_VAR 0 6
46901: PPUSH
46902: LD_INT 3
46904: PUSH
46905: LD_INT 60
46907: PUSH
46908: EMPTY
46909: LIST
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 3
46917: PUSH
46918: LD_INT 55
46920: PUSH
46921: EMPTY
46922: LIST
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PPUSH
46932: CALL_OW 72
46936: PUSH
46937: LD_INT 1
46939: ARRAY
46940: ST_TO_ADDR
// if IsInUnit ( driver ) then
46941: LD_VAR 0 18
46945: PPUSH
46946: CALL_OW 310
46950: IFFALSE 46961
// ComExit ( driver ) ;
46952: LD_VAR 0 18
46956: PPUSH
46957: CALL 72254 0 1
// AddComEnterUnit ( driver , tmp ) ;
46961: LD_VAR 0 18
46965: PPUSH
46966: LD_VAR 0 13
46970: PPUSH
46971: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46975: LD_VAR 0 18
46979: PPUSH
46980: LD_VAR 0 7
46984: PPUSH
46985: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46989: LD_VAR 0 18
46993: PPUSH
46994: CALL_OW 181
// end ; continue ;
46998: GO 46650
// end ; if not cleaners or not tmp in cleaners then
47000: LD_VAR 0 6
47004: NOT
47005: PUSH
47006: LD_VAR 0 13
47010: PUSH
47011: LD_VAR 0 6
47015: IN
47016: NOT
47017: OR
47018: IFFALSE 47325
// begin if dep then
47020: LD_VAR 0 17
47024: IFFALSE 47160
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47026: LD_ADDR_VAR 0 16
47030: PUSH
47031: LD_VAR 0 17
47035: PUSH
47036: LD_INT 1
47038: ARRAY
47039: PPUSH
47040: CALL_OW 250
47044: PPUSH
47045: LD_VAR 0 17
47049: PUSH
47050: LD_INT 1
47052: ARRAY
47053: PPUSH
47054: CALL_OW 254
47058: PPUSH
47059: LD_INT 5
47061: PPUSH
47062: CALL_OW 272
47066: PUSH
47067: LD_VAR 0 17
47071: PUSH
47072: LD_INT 1
47074: ARRAY
47075: PPUSH
47076: CALL_OW 251
47080: PPUSH
47081: LD_VAR 0 17
47085: PUSH
47086: LD_INT 1
47088: ARRAY
47089: PPUSH
47090: CALL_OW 254
47094: PPUSH
47095: LD_INT 5
47097: PPUSH
47098: CALL_OW 273
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
47107: LD_VAR 0 16
47111: PUSH
47112: LD_INT 1
47114: ARRAY
47115: PPUSH
47116: LD_VAR 0 16
47120: PUSH
47121: LD_INT 2
47123: ARRAY
47124: PPUSH
47125: CALL_OW 488
47129: IFFALSE 47160
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
47131: LD_VAR 0 13
47135: PPUSH
47136: LD_VAR 0 16
47140: PUSH
47141: LD_INT 1
47143: ARRAY
47144: PPUSH
47145: LD_VAR 0 16
47149: PUSH
47150: LD_INT 2
47152: ARRAY
47153: PPUSH
47154: CALL_OW 111
// continue ;
47158: GO 46650
// end ; end ; r := GetDir ( tmp ) ;
47160: LD_ADDR_VAR 0 15
47164: PUSH
47165: LD_VAR 0 13
47169: PPUSH
47170: CALL_OW 254
47174: ST_TO_ADDR
// if r = 5 then
47175: LD_VAR 0 15
47179: PUSH
47180: LD_INT 5
47182: EQUAL
47183: IFFALSE 47193
// r := 0 ;
47185: LD_ADDR_VAR 0 15
47189: PUSH
47190: LD_INT 0
47192: ST_TO_ADDR
// for j = r to 5 do
47193: LD_ADDR_VAR 0 10
47197: PUSH
47198: DOUBLE
47199: LD_VAR 0 15
47203: DEC
47204: ST_TO_ADDR
47205: LD_INT 5
47207: PUSH
47208: FOR_TO
47209: IFFALSE 47323
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
47211: LD_ADDR_VAR 0 11
47215: PUSH
47216: LD_VAR 0 13
47220: PPUSH
47221: CALL_OW 250
47225: PPUSH
47226: LD_VAR 0 10
47230: PPUSH
47231: LD_INT 2
47233: PPUSH
47234: CALL_OW 272
47238: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47239: LD_ADDR_VAR 0 12
47243: PUSH
47244: LD_VAR 0 13
47248: PPUSH
47249: CALL_OW 251
47253: PPUSH
47254: LD_VAR 0 10
47258: PPUSH
47259: LD_INT 2
47261: PPUSH
47262: CALL_OW 273
47266: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47267: LD_VAR 0 11
47271: PPUSH
47272: LD_VAR 0 12
47276: PPUSH
47277: CALL_OW 488
47281: PUSH
47282: LD_VAR 0 11
47286: PPUSH
47287: LD_VAR 0 12
47291: PPUSH
47292: CALL_OW 428
47296: NOT
47297: AND
47298: IFFALSE 47321
// begin ComMoveXY ( tmp , _x , _y ) ;
47300: LD_VAR 0 13
47304: PPUSH
47305: LD_VAR 0 11
47309: PPUSH
47310: LD_VAR 0 12
47314: PPUSH
47315: CALL_OW 111
// break ;
47319: GO 47323
// end ; end ;
47321: GO 47208
47323: POP
47324: POP
// end ; end ;
47325: GO 46650
47327: POP
47328: POP
// end ;
47329: LD_VAR 0 8
47333: RET
// export function BuildingTechInvented ( side , btype ) ; begin
47334: LD_INT 0
47336: PPUSH
// result := true ;
47337: LD_ADDR_VAR 0 3
47341: PUSH
47342: LD_INT 1
47344: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
47345: LD_VAR 0 2
47349: PUSH
47350: LD_INT 24
47352: DOUBLE
47353: EQUAL
47354: IFTRUE 47364
47356: LD_INT 33
47358: DOUBLE
47359: EQUAL
47360: IFTRUE 47364
47362: GO 47389
47364: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
47365: LD_ADDR_VAR 0 3
47369: PUSH
47370: LD_INT 32
47372: PPUSH
47373: LD_VAR 0 1
47377: PPUSH
47378: CALL_OW 321
47382: PUSH
47383: LD_INT 2
47385: EQUAL
47386: ST_TO_ADDR
47387: GO 47709
47389: LD_INT 20
47391: DOUBLE
47392: EQUAL
47393: IFTRUE 47397
47395: GO 47422
47397: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
47398: LD_ADDR_VAR 0 3
47402: PUSH
47403: LD_INT 6
47405: PPUSH
47406: LD_VAR 0 1
47410: PPUSH
47411: CALL_OW 321
47415: PUSH
47416: LD_INT 2
47418: EQUAL
47419: ST_TO_ADDR
47420: GO 47709
47422: LD_INT 22
47424: DOUBLE
47425: EQUAL
47426: IFTRUE 47436
47428: LD_INT 36
47430: DOUBLE
47431: EQUAL
47432: IFTRUE 47436
47434: GO 47461
47436: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
47437: LD_ADDR_VAR 0 3
47441: PUSH
47442: LD_INT 15
47444: PPUSH
47445: LD_VAR 0 1
47449: PPUSH
47450: CALL_OW 321
47454: PUSH
47455: LD_INT 2
47457: EQUAL
47458: ST_TO_ADDR
47459: GO 47709
47461: LD_INT 30
47463: DOUBLE
47464: EQUAL
47465: IFTRUE 47469
47467: GO 47494
47469: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
47470: LD_ADDR_VAR 0 3
47474: PUSH
47475: LD_INT 20
47477: PPUSH
47478: LD_VAR 0 1
47482: PPUSH
47483: CALL_OW 321
47487: PUSH
47488: LD_INT 2
47490: EQUAL
47491: ST_TO_ADDR
47492: GO 47709
47494: LD_INT 28
47496: DOUBLE
47497: EQUAL
47498: IFTRUE 47508
47500: LD_INT 21
47502: DOUBLE
47503: EQUAL
47504: IFTRUE 47508
47506: GO 47533
47508: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47509: LD_ADDR_VAR 0 3
47513: PUSH
47514: LD_INT 21
47516: PPUSH
47517: LD_VAR 0 1
47521: PPUSH
47522: CALL_OW 321
47526: PUSH
47527: LD_INT 2
47529: EQUAL
47530: ST_TO_ADDR
47531: GO 47709
47533: LD_INT 16
47535: DOUBLE
47536: EQUAL
47537: IFTRUE 47541
47539: GO 47568
47541: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47542: LD_ADDR_VAR 0 3
47546: PUSH
47547: LD_EXP 57
47551: PPUSH
47552: LD_VAR 0 1
47556: PPUSH
47557: CALL_OW 321
47561: PUSH
47562: LD_INT 2
47564: EQUAL
47565: ST_TO_ADDR
47566: GO 47709
47568: LD_INT 19
47570: DOUBLE
47571: EQUAL
47572: IFTRUE 47582
47574: LD_INT 23
47576: DOUBLE
47577: EQUAL
47578: IFTRUE 47582
47580: GO 47609
47582: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47583: LD_ADDR_VAR 0 3
47587: PUSH
47588: LD_EXP 56
47592: PPUSH
47593: LD_VAR 0 1
47597: PPUSH
47598: CALL_OW 321
47602: PUSH
47603: LD_INT 2
47605: EQUAL
47606: ST_TO_ADDR
47607: GO 47709
47609: LD_INT 17
47611: DOUBLE
47612: EQUAL
47613: IFTRUE 47617
47615: GO 47642
47617: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47618: LD_ADDR_VAR 0 3
47622: PUSH
47623: LD_INT 39
47625: PPUSH
47626: LD_VAR 0 1
47630: PPUSH
47631: CALL_OW 321
47635: PUSH
47636: LD_INT 2
47638: EQUAL
47639: ST_TO_ADDR
47640: GO 47709
47642: LD_INT 18
47644: DOUBLE
47645: EQUAL
47646: IFTRUE 47650
47648: GO 47675
47650: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47651: LD_ADDR_VAR 0 3
47655: PUSH
47656: LD_INT 40
47658: PPUSH
47659: LD_VAR 0 1
47663: PPUSH
47664: CALL_OW 321
47668: PUSH
47669: LD_INT 2
47671: EQUAL
47672: ST_TO_ADDR
47673: GO 47709
47675: LD_INT 27
47677: DOUBLE
47678: EQUAL
47679: IFTRUE 47683
47681: GO 47708
47683: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47684: LD_ADDR_VAR 0 3
47688: PUSH
47689: LD_INT 35
47691: PPUSH
47692: LD_VAR 0 1
47696: PPUSH
47697: CALL_OW 321
47701: PUSH
47702: LD_INT 2
47704: EQUAL
47705: ST_TO_ADDR
47706: GO 47709
47708: POP
// end ;
47709: LD_VAR 0 3
47713: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47714: LD_INT 0
47716: PPUSH
47717: PPUSH
47718: PPUSH
47719: PPUSH
47720: PPUSH
47721: PPUSH
47722: PPUSH
47723: PPUSH
47724: PPUSH
47725: PPUSH
47726: PPUSH
// result := false ;
47727: LD_ADDR_VAR 0 6
47731: PUSH
47732: LD_INT 0
47734: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47735: LD_VAR 0 1
47739: NOT
47740: PUSH
47741: LD_VAR 0 1
47745: PPUSH
47746: CALL_OW 266
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: IN
47761: NOT
47762: OR
47763: PUSH
47764: LD_VAR 0 2
47768: NOT
47769: OR
47770: PUSH
47771: LD_VAR 0 5
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: LD_INT 1
47781: PUSH
47782: LD_INT 2
47784: PUSH
47785: LD_INT 3
47787: PUSH
47788: LD_INT 4
47790: PUSH
47791: LD_INT 5
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: IN
47802: NOT
47803: OR
47804: PUSH
47805: LD_VAR 0 3
47809: PPUSH
47810: LD_VAR 0 4
47814: PPUSH
47815: CALL_OW 488
47819: NOT
47820: OR
47821: IFFALSE 47825
// exit ;
47823: GO 48561
// side := GetSide ( depot ) ;
47825: LD_ADDR_VAR 0 9
47829: PUSH
47830: LD_VAR 0 1
47834: PPUSH
47835: CALL_OW 255
47839: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47840: LD_VAR 0 9
47844: PPUSH
47845: LD_VAR 0 2
47849: PPUSH
47850: CALL 47334 0 2
47854: NOT
47855: IFFALSE 47859
// exit ;
47857: GO 48561
// pom := GetBase ( depot ) ;
47859: LD_ADDR_VAR 0 10
47863: PUSH
47864: LD_VAR 0 1
47868: PPUSH
47869: CALL_OW 274
47873: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47874: LD_ADDR_VAR 0 11
47878: PUSH
47879: LD_VAR 0 2
47883: PPUSH
47884: LD_VAR 0 1
47888: PPUSH
47889: CALL_OW 248
47893: PPUSH
47894: CALL_OW 450
47898: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47899: LD_VAR 0 10
47903: PPUSH
47904: LD_INT 1
47906: PPUSH
47907: CALL_OW 275
47911: PUSH
47912: LD_VAR 0 11
47916: PUSH
47917: LD_INT 1
47919: ARRAY
47920: GREATEREQUAL
47921: PUSH
47922: LD_VAR 0 10
47926: PPUSH
47927: LD_INT 2
47929: PPUSH
47930: CALL_OW 275
47934: PUSH
47935: LD_VAR 0 11
47939: PUSH
47940: LD_INT 2
47942: ARRAY
47943: GREATEREQUAL
47944: AND
47945: PUSH
47946: LD_VAR 0 10
47950: PPUSH
47951: LD_INT 3
47953: PPUSH
47954: CALL_OW 275
47958: PUSH
47959: LD_VAR 0 11
47963: PUSH
47964: LD_INT 3
47966: ARRAY
47967: GREATEREQUAL
47968: AND
47969: NOT
47970: IFFALSE 47974
// exit ;
47972: GO 48561
// if GetBType ( depot ) = b_depot then
47974: LD_VAR 0 1
47978: PPUSH
47979: CALL_OW 266
47983: PUSH
47984: LD_INT 0
47986: EQUAL
47987: IFFALSE 47999
// dist := 28 else
47989: LD_ADDR_VAR 0 14
47993: PUSH
47994: LD_INT 28
47996: ST_TO_ADDR
47997: GO 48007
// dist := 36 ;
47999: LD_ADDR_VAR 0 14
48003: PUSH
48004: LD_INT 36
48006: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48007: LD_VAR 0 1
48011: PPUSH
48012: LD_VAR 0 3
48016: PPUSH
48017: LD_VAR 0 4
48021: PPUSH
48022: CALL_OW 297
48026: PUSH
48027: LD_VAR 0 14
48031: GREATER
48032: IFFALSE 48036
// exit ;
48034: GO 48561
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48036: LD_ADDR_VAR 0 12
48040: PUSH
48041: LD_VAR 0 2
48045: PPUSH
48046: LD_VAR 0 3
48050: PPUSH
48051: LD_VAR 0 4
48055: PPUSH
48056: LD_VAR 0 5
48060: PPUSH
48061: LD_VAR 0 1
48065: PPUSH
48066: CALL_OW 248
48070: PPUSH
48071: LD_INT 0
48073: PPUSH
48074: CALL 48566 0 6
48078: ST_TO_ADDR
// if not hexes then
48079: LD_VAR 0 12
48083: NOT
48084: IFFALSE 48088
// exit ;
48086: GO 48561
// hex := GetHexInfo ( x , y ) ;
48088: LD_ADDR_VAR 0 15
48092: PUSH
48093: LD_VAR 0 3
48097: PPUSH
48098: LD_VAR 0 4
48102: PPUSH
48103: CALL_OW 546
48107: ST_TO_ADDR
// if hex [ 1 ] then
48108: LD_VAR 0 15
48112: PUSH
48113: LD_INT 1
48115: ARRAY
48116: IFFALSE 48120
// exit ;
48118: GO 48561
// height := hex [ 2 ] ;
48120: LD_ADDR_VAR 0 13
48124: PUSH
48125: LD_VAR 0 15
48129: PUSH
48130: LD_INT 2
48132: ARRAY
48133: ST_TO_ADDR
// for i = 1 to hexes do
48134: LD_ADDR_VAR 0 7
48138: PUSH
48139: DOUBLE
48140: LD_INT 1
48142: DEC
48143: ST_TO_ADDR
48144: LD_VAR 0 12
48148: PUSH
48149: FOR_TO
48150: IFFALSE 48480
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48152: LD_VAR 0 12
48156: PUSH
48157: LD_VAR 0 7
48161: ARRAY
48162: PUSH
48163: LD_INT 1
48165: ARRAY
48166: PPUSH
48167: LD_VAR 0 12
48171: PUSH
48172: LD_VAR 0 7
48176: ARRAY
48177: PUSH
48178: LD_INT 2
48180: ARRAY
48181: PPUSH
48182: CALL_OW 488
48186: NOT
48187: PUSH
48188: LD_VAR 0 12
48192: PUSH
48193: LD_VAR 0 7
48197: ARRAY
48198: PUSH
48199: LD_INT 1
48201: ARRAY
48202: PPUSH
48203: LD_VAR 0 12
48207: PUSH
48208: LD_VAR 0 7
48212: ARRAY
48213: PUSH
48214: LD_INT 2
48216: ARRAY
48217: PPUSH
48218: CALL_OW 428
48222: PUSH
48223: LD_INT 0
48225: GREATER
48226: OR
48227: PUSH
48228: LD_VAR 0 12
48232: PUSH
48233: LD_VAR 0 7
48237: ARRAY
48238: PUSH
48239: LD_INT 1
48241: ARRAY
48242: PPUSH
48243: LD_VAR 0 12
48247: PUSH
48248: LD_VAR 0 7
48252: ARRAY
48253: PUSH
48254: LD_INT 2
48256: ARRAY
48257: PPUSH
48258: CALL_OW 351
48262: OR
48263: IFFALSE 48269
// exit ;
48265: POP
48266: POP
48267: GO 48561
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48269: LD_ADDR_VAR 0 8
48273: PUSH
48274: LD_VAR 0 12
48278: PUSH
48279: LD_VAR 0 7
48283: ARRAY
48284: PUSH
48285: LD_INT 1
48287: ARRAY
48288: PPUSH
48289: LD_VAR 0 12
48293: PUSH
48294: LD_VAR 0 7
48298: ARRAY
48299: PUSH
48300: LD_INT 2
48302: ARRAY
48303: PPUSH
48304: CALL_OW 546
48308: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48309: LD_VAR 0 8
48313: PUSH
48314: LD_INT 1
48316: ARRAY
48317: PUSH
48318: LD_VAR 0 8
48322: PUSH
48323: LD_INT 2
48325: ARRAY
48326: PUSH
48327: LD_VAR 0 13
48331: PUSH
48332: LD_INT 2
48334: PLUS
48335: GREATER
48336: OR
48337: PUSH
48338: LD_VAR 0 8
48342: PUSH
48343: LD_INT 2
48345: ARRAY
48346: PUSH
48347: LD_VAR 0 13
48351: PUSH
48352: LD_INT 2
48354: MINUS
48355: LESS
48356: OR
48357: PUSH
48358: LD_VAR 0 8
48362: PUSH
48363: LD_INT 3
48365: ARRAY
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: LD_INT 8
48372: PUSH
48373: LD_INT 9
48375: PUSH
48376: LD_INT 10
48378: PUSH
48379: LD_INT 11
48381: PUSH
48382: LD_INT 12
48384: PUSH
48385: LD_INT 13
48387: PUSH
48388: LD_INT 16
48390: PUSH
48391: LD_INT 17
48393: PUSH
48394: LD_INT 18
48396: PUSH
48397: LD_INT 19
48399: PUSH
48400: LD_INT 20
48402: PUSH
48403: LD_INT 21
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: IN
48421: NOT
48422: OR
48423: PUSH
48424: LD_VAR 0 8
48428: PUSH
48429: LD_INT 5
48431: ARRAY
48432: NOT
48433: OR
48434: PUSH
48435: LD_VAR 0 8
48439: PUSH
48440: LD_INT 6
48442: ARRAY
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: LD_INT 2
48449: PUSH
48450: LD_INT 7
48452: PUSH
48453: LD_INT 9
48455: PUSH
48456: LD_INT 10
48458: PUSH
48459: LD_INT 11
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: IN
48470: NOT
48471: OR
48472: IFFALSE 48478
// exit ;
48474: POP
48475: POP
48476: GO 48561
// end ;
48478: GO 48149
48480: POP
48481: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48482: LD_VAR 0 9
48486: PPUSH
48487: LD_VAR 0 3
48491: PPUSH
48492: LD_VAR 0 4
48496: PPUSH
48497: LD_INT 20
48499: PPUSH
48500: CALL 40507 0 4
48504: PUSH
48505: LD_INT 4
48507: ARRAY
48508: IFFALSE 48512
// exit ;
48510: GO 48561
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48512: LD_VAR 0 2
48516: PUSH
48517: LD_INT 29
48519: PUSH
48520: LD_INT 30
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: IN
48527: PUSH
48528: LD_VAR 0 3
48532: PPUSH
48533: LD_VAR 0 4
48537: PPUSH
48538: LD_VAR 0 9
48542: PPUSH
48543: CALL_OW 440
48547: NOT
48548: AND
48549: IFFALSE 48553
// exit ;
48551: GO 48561
// result := true ;
48553: LD_ADDR_VAR 0 6
48557: PUSH
48558: LD_INT 1
48560: ST_TO_ADDR
// end ;
48561: LD_VAR 0 6
48565: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48566: LD_INT 0
48568: PPUSH
48569: PPUSH
48570: PPUSH
48571: PPUSH
48572: PPUSH
48573: PPUSH
48574: PPUSH
48575: PPUSH
48576: PPUSH
48577: PPUSH
48578: PPUSH
48579: PPUSH
48580: PPUSH
48581: PPUSH
48582: PPUSH
48583: PPUSH
48584: PPUSH
48585: PPUSH
48586: PPUSH
48587: PPUSH
48588: PPUSH
48589: PPUSH
48590: PPUSH
48591: PPUSH
48592: PPUSH
48593: PPUSH
48594: PPUSH
48595: PPUSH
48596: PPUSH
48597: PPUSH
48598: PPUSH
48599: PPUSH
48600: PPUSH
48601: PPUSH
48602: PPUSH
48603: PPUSH
48604: PPUSH
48605: PPUSH
48606: PPUSH
48607: PPUSH
48608: PPUSH
48609: PPUSH
48610: PPUSH
48611: PPUSH
48612: PPUSH
48613: PPUSH
48614: PPUSH
48615: PPUSH
48616: PPUSH
48617: PPUSH
48618: PPUSH
48619: PPUSH
48620: PPUSH
48621: PPUSH
48622: PPUSH
48623: PPUSH
48624: PPUSH
48625: PPUSH
// result = [ ] ;
48626: LD_ADDR_VAR 0 7
48630: PUSH
48631: EMPTY
48632: ST_TO_ADDR
// temp_list = [ ] ;
48633: LD_ADDR_VAR 0 9
48637: PUSH
48638: EMPTY
48639: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48640: LD_VAR 0 4
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: LD_INT 2
48653: PUSH
48654: LD_INT 3
48656: PUSH
48657: LD_INT 4
48659: PUSH
48660: LD_INT 5
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: IN
48671: NOT
48672: PUSH
48673: LD_VAR 0 1
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: IN
48688: PUSH
48689: LD_VAR 0 5
48693: PUSH
48694: LD_INT 1
48696: PUSH
48697: LD_INT 2
48699: PUSH
48700: LD_INT 3
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: LIST
48707: IN
48708: NOT
48709: AND
48710: OR
48711: IFFALSE 48715
// exit ;
48713: GO 67106
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48715: LD_VAR 0 1
48719: PUSH
48720: LD_INT 6
48722: PUSH
48723: LD_INT 7
48725: PUSH
48726: LD_INT 8
48728: PUSH
48729: LD_INT 13
48731: PUSH
48732: LD_INT 12
48734: PUSH
48735: LD_INT 15
48737: PUSH
48738: LD_INT 11
48740: PUSH
48741: LD_INT 14
48743: PUSH
48744: LD_INT 10
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: IN
48758: IFFALSE 48768
// btype = b_lab ;
48760: LD_ADDR_VAR 0 1
48764: PUSH
48765: LD_INT 6
48767: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48768: LD_VAR 0 6
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: LD_INT 2
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: LIST
48786: IN
48787: NOT
48788: PUSH
48789: LD_VAR 0 1
48793: PUSH
48794: LD_INT 0
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: LD_INT 2
48802: PUSH
48803: LD_INT 3
48805: PUSH
48806: LD_INT 6
48808: PUSH
48809: LD_INT 36
48811: PUSH
48812: LD_INT 4
48814: PUSH
48815: LD_INT 5
48817: PUSH
48818: LD_INT 31
48820: PUSH
48821: LD_INT 32
48823: PUSH
48824: LD_INT 33
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: IN
48840: NOT
48841: PUSH
48842: LD_VAR 0 6
48846: PUSH
48847: LD_INT 1
48849: EQUAL
48850: AND
48851: OR
48852: PUSH
48853: LD_VAR 0 1
48857: PUSH
48858: LD_INT 2
48860: PUSH
48861: LD_INT 3
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: IN
48868: NOT
48869: PUSH
48870: LD_VAR 0 6
48874: PUSH
48875: LD_INT 2
48877: EQUAL
48878: AND
48879: OR
48880: IFFALSE 48890
// mode = 0 ;
48882: LD_ADDR_VAR 0 6
48886: PUSH
48887: LD_INT 0
48889: ST_TO_ADDR
// case mode of 0 :
48890: LD_VAR 0 6
48894: PUSH
48895: LD_INT 0
48897: DOUBLE
48898: EQUAL
48899: IFTRUE 48903
48901: GO 60356
48903: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48904: LD_ADDR_VAR 0 11
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: LD_INT 0
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 0
48921: PUSH
48922: LD_INT 1
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 1
48932: PUSH
48933: LD_INT 0
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 1
48942: PUSH
48943: LD_INT 1
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: LD_INT 1
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 1
48962: NEG
48963: PUSH
48964: LD_INT 0
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 1
48973: NEG
48974: PUSH
48975: LD_INT 1
48977: NEG
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: NEG
48986: PUSH
48987: LD_INT 2
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 0
48997: PUSH
48998: LD_INT 2
49000: NEG
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 1
49008: PUSH
49009: LD_INT 1
49011: NEG
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 1
49019: PUSH
49020: LD_INT 2
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: LD_INT 2
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 1
49039: NEG
49040: PUSH
49041: LD_INT 1
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 1
49050: PUSH
49051: LD_INT 3
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: LD_INT 3
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: LD_INT 2
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49097: LD_ADDR_VAR 0 12
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: LD_INT 1
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 1
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 0
49145: PUSH
49146: LD_INT 1
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: NEG
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: LD_INT 1
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 1
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 2
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 2
49199: PUSH
49200: LD_INT 1
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 2
49220: NEG
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 2
49231: NEG
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 2
49243: NEG
49244: PUSH
49245: LD_INT 1
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 3
49254: NEG
49255: PUSH
49256: LD_INT 0
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 3
49265: NEG
49266: PUSH
49267: LD_INT 1
49269: NEG
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49293: LD_ADDR_VAR 0 13
49297: PUSH
49298: LD_INT 0
49300: PUSH
49301: LD_INT 0
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: LD_INT 1
49313: NEG
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 1
49321: PUSH
49322: LD_INT 0
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 1
49331: PUSH
49332: LD_INT 1
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 0
49341: PUSH
49342: LD_INT 1
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 1
49351: NEG
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: LD_INT 1
49366: NEG
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: PUSH
49376: LD_INT 2
49378: NEG
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 2
49386: PUSH
49387: LD_INT 1
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 2
49396: PUSH
49397: LD_INT 2
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: PUSH
49407: LD_INT 2
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 2
49416: NEG
49417: PUSH
49418: LD_INT 1
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 2
49428: NEG
49429: PUSH
49430: LD_INT 2
49432: NEG
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 2
49440: NEG
49441: PUSH
49442: LD_INT 3
49444: NEG
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 3
49452: NEG
49453: PUSH
49454: LD_INT 2
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 3
49464: NEG
49465: PUSH
49466: LD_INT 3
49468: NEG
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49492: LD_ADDR_VAR 0 14
49496: PUSH
49497: LD_INT 0
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 0
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 1
49530: PUSH
49531: LD_INT 1
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: LD_INT 1
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: LD_INT 0
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 1
49561: NEG
49562: PUSH
49563: LD_INT 1
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: NEG
49574: PUSH
49575: LD_INT 2
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: LD_INT 2
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: LD_INT 1
49599: NEG
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 1
49607: PUSH
49608: LD_INT 2
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 0
49617: PUSH
49618: LD_INT 2
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 1
49627: NEG
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 1
49638: NEG
49639: PUSH
49640: LD_INT 3
49642: NEG
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: LD_INT 3
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 1
49661: PUSH
49662: LD_INT 2
49664: NEG
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49688: LD_ADDR_VAR 0 15
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: LD_INT 0
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 0
49705: PUSH
49706: LD_INT 1
49708: NEG
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 1
49716: PUSH
49717: LD_INT 0
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 1
49726: PUSH
49727: LD_INT 1
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: LD_INT 1
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: LD_INT 1
49761: NEG
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: LD_INT 1
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 2
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 2
49790: PUSH
49791: LD_INT 1
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 1
49800: NEG
49801: PUSH
49802: LD_INT 1
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 2
49811: NEG
49812: PUSH
49813: LD_INT 0
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 2
49822: NEG
49823: PUSH
49824: LD_INT 1
49826: NEG
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 2
49834: PUSH
49835: LD_INT 1
49837: NEG
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 3
49845: PUSH
49846: LD_INT 0
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 3
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49881: LD_ADDR_VAR 0 16
49885: PUSH
49886: LD_INT 0
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: LD_INT 1
49901: NEG
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 1
49909: PUSH
49910: LD_INT 0
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 1
49919: PUSH
49920: LD_INT 1
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: LD_INT 1
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: LD_INT 0
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 1
49950: NEG
49951: PUSH
49952: LD_INT 1
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: LD_INT 2
49966: NEG
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 2
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 2
49984: PUSH
49985: LD_INT 2
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: LD_INT 2
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 2
50004: NEG
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 2
50016: NEG
50017: PUSH
50018: LD_INT 2
50020: NEG
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 3
50028: PUSH
50029: LD_INT 2
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 3
50038: PUSH
50039: LD_INT 3
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 2
50048: PUSH
50049: LD_INT 3
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50074: LD_ADDR_VAR 0 17
50078: PUSH
50079: LD_INT 0
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 0
50091: PUSH
50092: LD_INT 1
50094: NEG
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: LD_INT 0
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: LD_INT 1
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: LD_INT 1
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 1
50143: NEG
50144: PUSH
50145: LD_INT 1
50147: NEG
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 1
50155: NEG
50156: PUSH
50157: LD_INT 2
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: LD_INT 2
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 1
50178: PUSH
50179: LD_INT 1
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 2
50189: PUSH
50190: LD_INT 0
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 2
50199: PUSH
50200: LD_INT 1
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 2
50209: PUSH
50210: LD_INT 2
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: LD_INT 2
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 0
50229: PUSH
50230: LD_INT 2
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: LD_INT 1
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 2
50250: NEG
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 2
50261: NEG
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 2
50273: NEG
50274: PUSH
50275: LD_INT 2
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50304: LD_ADDR_VAR 0 18
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: LD_INT 0
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 1
50342: PUSH
50343: LD_INT 1
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 1
50362: NEG
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: NEG
50374: PUSH
50375: LD_INT 1
50377: NEG
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: LD_INT 2
50389: NEG
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: LD_INT 2
50400: NEG
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 1
50408: PUSH
50409: LD_INT 1
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 2
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 2
50429: PUSH
50430: LD_INT 1
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 2
50439: PUSH
50440: LD_INT 2
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: LD_INT 2
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: LD_INT 2
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: LD_INT 1
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 2
50480: NEG
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 2
50491: NEG
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 2
50503: NEG
50504: PUSH
50505: LD_INT 2
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50534: LD_ADDR_VAR 0 19
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: LD_INT 0
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 0
50551: PUSH
50552: LD_INT 1
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: LD_INT 0
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: LD_INT 1
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 0
50582: PUSH
50583: LD_INT 1
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 1
50592: NEG
50593: PUSH
50594: LD_INT 0
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 1
50603: NEG
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 1
50615: NEG
50616: PUSH
50617: LD_INT 2
50619: NEG
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: LD_INT 2
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 1
50638: PUSH
50639: LD_INT 1
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 2
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 2
50659: PUSH
50660: LD_INT 1
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 2
50669: PUSH
50670: LD_INT 2
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: LD_INT 2
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: LD_INT 2
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 1
50699: NEG
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 2
50710: NEG
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 2
50721: NEG
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 2
50733: NEG
50734: PUSH
50735: LD_INT 2
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50764: LD_ADDR_VAR 0 20
50768: PUSH
50769: LD_INT 0
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: LD_INT 1
50784: NEG
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 1
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: LD_INT 1
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 0
50812: PUSH
50813: LD_INT 1
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 1
50822: NEG
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 1
50833: NEG
50834: PUSH
50835: LD_INT 1
50837: NEG
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 1
50845: NEG
50846: PUSH
50847: LD_INT 2
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: LD_INT 2
50860: NEG
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: LD_INT 1
50871: NEG
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 2
50879: PUSH
50880: LD_INT 0
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 2
50889: PUSH
50890: LD_INT 1
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 2
50899: PUSH
50900: LD_INT 2
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 1
50909: PUSH
50910: LD_INT 2
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: LD_INT 2
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: NEG
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 2
50940: NEG
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 2
50951: NEG
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 2
50963: NEG
50964: PUSH
50965: LD_INT 2
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50994: LD_ADDR_VAR 0 21
50998: PUSH
50999: LD_INT 0
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: LD_INT 1
51014: NEG
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 1
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 1
51032: PUSH
51033: LD_INT 1
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 0
51042: PUSH
51043: LD_INT 1
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 1
51052: NEG
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: LD_INT 1
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 1
51075: NEG
51076: PUSH
51077: LD_INT 2
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: LD_INT 2
51090: NEG
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 1
51098: PUSH
51099: LD_INT 1
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 2
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 2
51119: PUSH
51120: LD_INT 1
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 2
51129: PUSH
51130: LD_INT 2
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 1
51139: PUSH
51140: LD_INT 2
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 0
51149: PUSH
51150: LD_INT 2
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 1
51159: NEG
51160: PUSH
51161: LD_INT 1
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 2
51170: NEG
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 2
51181: NEG
51182: PUSH
51183: LD_INT 1
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 2
51193: NEG
51194: PUSH
51195: LD_INT 2
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51224: LD_ADDR_VAR 0 22
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: LD_INT 1
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 1
51282: NEG
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: LD_INT 1
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: LD_INT 2
51309: NEG
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: LD_INT 2
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 1
51328: PUSH
51329: LD_INT 1
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 2
51339: PUSH
51340: LD_INT 0
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 2
51349: PUSH
51350: LD_INT 1
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 2
51359: PUSH
51360: LD_INT 2
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 1
51369: PUSH
51370: LD_INT 2
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 0
51379: PUSH
51380: LD_INT 2
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: NEG
51390: PUSH
51391: LD_INT 1
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 2
51400: NEG
51401: PUSH
51402: LD_INT 0
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 2
51411: NEG
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 2
51423: NEG
51424: PUSH
51425: LD_INT 2
51427: NEG
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51454: LD_ADDR_VAR 0 23
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: LD_INT 0
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: LD_INT 1
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: LD_INT 0
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: LD_INT 1
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 0
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 1
51512: NEG
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 1
51523: NEG
51524: PUSH
51525: LD_INT 1
51527: NEG
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 1
51535: NEG
51536: PUSH
51537: LD_INT 2
51539: NEG
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 0
51547: PUSH
51548: LD_INT 2
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 1
51558: PUSH
51559: LD_INT 1
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 2
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 2
51579: PUSH
51580: LD_INT 1
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 2
51589: PUSH
51590: LD_INT 2
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 1
51599: PUSH
51600: LD_INT 2
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: LD_INT 2
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 1
51619: NEG
51620: PUSH
51621: LD_INT 1
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 2
51630: NEG
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 2
51641: NEG
51642: PUSH
51643: LD_INT 1
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 2
51653: NEG
51654: PUSH
51655: LD_INT 2
51657: NEG
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 2
51665: NEG
51666: PUSH
51667: LD_INT 3
51669: NEG
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: LD_INT 3
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 1
51689: PUSH
51690: LD_INT 2
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 2
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51734: LD_ADDR_VAR 0 24
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: LD_INT 0
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 0
51751: PUSH
51752: LD_INT 1
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 1
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 1
51772: PUSH
51773: LD_INT 1
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: LD_INT 1
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 1
51792: NEG
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: LD_INT 1
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: NEG
51816: PUSH
51817: LD_INT 2
51819: NEG
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: LD_INT 2
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 1
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 2
51849: PUSH
51850: LD_INT 0
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 2
51859: PUSH
51860: LD_INT 1
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 2
51869: PUSH
51870: LD_INT 2
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 1
51879: PUSH
51880: LD_INT 2
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: LD_INT 2
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 1
51899: NEG
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 2
51910: NEG
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 2
51921: NEG
51922: PUSH
51923: LD_INT 1
51925: NEG
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 2
51933: NEG
51934: PUSH
51935: LD_INT 2
51937: NEG
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: LD_INT 2
51948: NEG
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 2
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 3
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 3
51977: PUSH
51978: LD_INT 2
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52010: LD_ADDR_VAR 0 25
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: LD_INT 1
52030: NEG
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: LD_INT 0
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 1
52079: NEG
52080: PUSH
52081: LD_INT 1
52083: NEG
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: NEG
52092: PUSH
52093: LD_INT 2
52095: NEG
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 0
52103: PUSH
52104: LD_INT 2
52106: NEG
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: PUSH
52115: LD_INT 1
52117: NEG
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 2
52125: PUSH
52126: LD_INT 0
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 2
52135: PUSH
52136: LD_INT 1
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 2
52145: PUSH
52146: LD_INT 2
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 1
52155: PUSH
52156: LD_INT 2
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: LD_INT 2
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 1
52175: NEG
52176: PUSH
52177: LD_INT 1
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 2
52186: NEG
52187: PUSH
52188: LD_INT 0
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 2
52197: NEG
52198: PUSH
52199: LD_INT 1
52201: NEG
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 2
52209: NEG
52210: PUSH
52211: LD_INT 2
52213: NEG
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 3
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 3
52231: PUSH
52232: LD_INT 2
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 2
52241: PUSH
52242: LD_INT 3
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: LD_INT 3
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52284: LD_ADDR_VAR 0 26
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: LD_INT 1
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 1
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 0
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 1
52342: NEG
52343: PUSH
52344: LD_INT 0
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 1
52353: NEG
52354: PUSH
52355: LD_INT 1
52357: NEG
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 1
52365: NEG
52366: PUSH
52367: LD_INT 2
52369: NEG
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: LD_INT 2
52380: NEG
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 1
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 2
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 2
52409: PUSH
52410: LD_INT 1
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 2
52419: PUSH
52420: LD_INT 2
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: PUSH
52430: LD_INT 2
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: LD_INT 2
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 1
52449: NEG
52450: PUSH
52451: LD_INT 1
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 2
52460: NEG
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 2
52471: NEG
52472: PUSH
52473: LD_INT 1
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 2
52483: NEG
52484: PUSH
52485: LD_INT 2
52487: NEG
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 2
52495: PUSH
52496: LD_INT 3
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: PUSH
52506: LD_INT 3
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: LD_INT 2
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 2
52526: NEG
52527: PUSH
52528: LD_INT 1
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52560: LD_ADDR_VAR 0 27
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: LD_INT 1
52580: NEG
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 1
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 1
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 1
52618: NEG
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 1
52629: NEG
52630: PUSH
52631: LD_INT 1
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 1
52641: NEG
52642: PUSH
52643: LD_INT 2
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: LD_INT 2
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 1
52664: PUSH
52665: LD_INT 1
52667: NEG
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 2
52675: PUSH
52676: LD_INT 0
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 2
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 2
52695: PUSH
52696: LD_INT 2
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: LD_INT 2
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: LD_INT 2
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 1
52725: NEG
52726: PUSH
52727: LD_INT 1
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 2
52736: NEG
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 2
52747: NEG
52748: PUSH
52749: LD_INT 1
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 2
52759: NEG
52760: PUSH
52761: LD_INT 2
52763: NEG
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 1
52771: NEG
52772: PUSH
52773: LD_INT 2
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 2
52782: NEG
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 3
52793: NEG
52794: PUSH
52795: LD_INT 1
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 3
52805: NEG
52806: PUSH
52807: LD_INT 2
52809: NEG
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52840: LD_ADDR_VAR 0 28
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: LD_INT 1
52860: NEG
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 1
52868: PUSH
52869: LD_INT 0
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 1
52878: PUSH
52879: LD_INT 1
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: LD_INT 1
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 1
52898: NEG
52899: PUSH
52900: LD_INT 0
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: LD_INT 1
52913: NEG
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 1
52921: NEG
52922: PUSH
52923: LD_INT 2
52925: NEG
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 0
52933: PUSH
52934: LD_INT 2
52936: NEG
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 1
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 2
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 2
52965: PUSH
52966: LD_INT 1
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 2
52975: PUSH
52976: LD_INT 2
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 1
52985: PUSH
52986: LD_INT 2
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: LD_INT 2
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: LD_INT 1
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 2
53016: NEG
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 2
53027: NEG
53028: PUSH
53029: LD_INT 1
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 2
53039: NEG
53040: PUSH
53041: LD_INT 2
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 2
53051: NEG
53052: PUSH
53053: LD_INT 3
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 1
53063: NEG
53064: PUSH
53065: LD_INT 3
53067: NEG
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 3
53075: NEG
53076: PUSH
53077: LD_INT 1
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 3
53087: NEG
53088: PUSH
53089: LD_INT 2
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53122: LD_ADDR_VAR 0 29
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: LD_INT 0
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: LD_INT 1
53142: NEG
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: LD_INT 1
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: LD_INT 1
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 1
53180: NEG
53181: PUSH
53182: LD_INT 0
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: NEG
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: NEG
53204: PUSH
53205: LD_INT 2
53207: NEG
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: LD_INT 2
53218: NEG
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: LD_INT 1
53229: NEG
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 2
53237: PUSH
53238: LD_INT 0
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 2
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: LD_INT 2
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: LD_INT 2
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: LD_INT 1
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 2
53288: NEG
53289: PUSH
53290: LD_INT 1
53292: NEG
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 2
53300: NEG
53301: PUSH
53302: LD_INT 2
53304: NEG
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 2
53312: NEG
53313: PUSH
53314: LD_INT 3
53316: NEG
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 2
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 3
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: LD_INT 3
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: LD_INT 2
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 3
53366: NEG
53367: PUSH
53368: LD_INT 2
53370: NEG
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53401: LD_ADDR_VAR 0 30
53405: PUSH
53406: LD_INT 0
53408: PUSH
53409: LD_INT 0
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: LD_INT 1
53421: NEG
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 1
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 1
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 1
53459: NEG
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: PUSH
53472: LD_INT 1
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 1
53482: NEG
53483: PUSH
53484: LD_INT 2
53486: NEG
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: LD_INT 2
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 1
53505: PUSH
53506: LD_INT 1
53508: NEG
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 2
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 2
53526: PUSH
53527: LD_INT 1
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 2
53536: PUSH
53537: LD_INT 2
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: LD_INT 2
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: NEG
53557: PUSH
53558: LD_INT 1
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 2
53567: NEG
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 2
53578: NEG
53579: PUSH
53580: LD_INT 1
53582: NEG
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 1
53590: NEG
53591: PUSH
53592: LD_INT 3
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: LD_INT 2
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 3
53613: PUSH
53614: LD_INT 2
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 2
53623: PUSH
53624: LD_INT 3
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 2
53633: NEG
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 3
53644: NEG
53645: PUSH
53646: LD_INT 1
53648: NEG
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53679: LD_ADDR_VAR 0 31
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 1
53737: NEG
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 1
53748: NEG
53749: PUSH
53750: LD_INT 1
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 1
53760: NEG
53761: PUSH
53762: LD_INT 2
53764: NEG
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 1
53772: PUSH
53773: LD_INT 1
53775: NEG
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 2
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 2
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 2
53803: PUSH
53804: LD_INT 2
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 1
53813: PUSH
53814: LD_INT 2
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 0
53823: PUSH
53824: LD_INT 2
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 1
53833: NEG
53834: PUSH
53835: LD_INT 1
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 2
53844: NEG
53845: PUSH
53846: LD_INT 1
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 2
53856: NEG
53857: PUSH
53858: LD_INT 2
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 2
53868: NEG
53869: PUSH
53870: LD_INT 3
53872: NEG
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 2
53880: PUSH
53881: LD_INT 1
53883: NEG
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 3
53891: PUSH
53892: LD_INT 1
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 1
53901: PUSH
53902: LD_INT 3
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 1
53911: NEG
53912: PUSH
53913: LD_INT 2
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 3
53922: NEG
53923: PUSH
53924: LD_INT 2
53926: NEG
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53957: LD_ADDR_VAR 0 32
53961: PUSH
53962: LD_INT 0
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: LD_INT 1
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: NEG
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 1
54026: NEG
54027: PUSH
54028: LD_INT 1
54030: NEG
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 1
54038: NEG
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 0
54050: PUSH
54051: LD_INT 2
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 1
54061: PUSH
54062: LD_INT 1
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 2
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 2
54082: PUSH
54083: LD_INT 2
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: LD_INT 2
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: LD_INT 2
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 2
54123: NEG
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 2
54134: NEG
54135: PUSH
54136: LD_INT 1
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 1
54146: NEG
54147: PUSH
54148: LD_INT 3
54150: NEG
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: LD_INT 2
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 3
54169: PUSH
54170: LD_INT 2
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 2
54179: PUSH
54180: LD_INT 3
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 2
54189: NEG
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 3
54200: NEG
54201: PUSH
54202: LD_INT 1
54204: NEG
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54235: LD_ADDR_VAR 0 33
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 0
54252: PUSH
54253: LD_INT 1
54255: NEG
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 1
54263: PUSH
54264: LD_INT 0
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 1
54273: PUSH
54274: LD_INT 1
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: LD_INT 1
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 1
54293: NEG
54294: PUSH
54295: LD_INT 0
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 1
54304: NEG
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 1
54316: NEG
54317: PUSH
54318: LD_INT 2
54320: NEG
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: LD_INT 1
54331: NEG
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 2
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 2
54349: PUSH
54350: LD_INT 1
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 1
54359: PUSH
54360: LD_INT 2
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: LD_INT 2
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 1
54379: NEG
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 2
54390: NEG
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 2
54401: NEG
54402: PUSH
54403: LD_INT 1
54405: NEG
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 2
54413: NEG
54414: PUSH
54415: LD_INT 2
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 2
54425: NEG
54426: PUSH
54427: LD_INT 3
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 2
54437: PUSH
54438: LD_INT 1
54440: NEG
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 3
54448: PUSH
54449: LD_INT 1
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: LD_INT 3
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: LD_INT 2
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 3
54479: NEG
54480: PUSH
54481: LD_INT 2
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54514: LD_ADDR_VAR 0 34
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 0
54531: PUSH
54532: LD_INT 1
54534: NEG
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 1
54542: PUSH
54543: LD_INT 0
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: LD_INT 1
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: LD_INT 1
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 1
54572: NEG
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: PUSH
54585: LD_INT 1
54587: NEG
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: LD_INT 2
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: LD_INT 2
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: LD_INT 1
54621: NEG
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 2
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 2
54639: PUSH
54640: LD_INT 2
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: LD_INT 2
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 1
54659: NEG
54660: PUSH
54661: LD_INT 1
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 2
54670: NEG
54671: PUSH
54672: LD_INT 0
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 2
54681: NEG
54682: PUSH
54683: LD_INT 1
54685: NEG
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 2
54693: NEG
54694: PUSH
54695: LD_INT 2
54697: NEG
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 1
54705: NEG
54706: PUSH
54707: LD_INT 3
54709: NEG
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 1
54717: PUSH
54718: LD_INT 2
54720: NEG
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 3
54728: PUSH
54729: LD_INT 2
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 2
54738: PUSH
54739: LD_INT 3
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 2
54748: NEG
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 3
54759: NEG
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54794: LD_ADDR_VAR 0 35
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 0
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 1
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 1
54832: PUSH
54833: LD_INT 1
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 0
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 1
54852: NEG
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 1
54863: NEG
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 2
54875: PUSH
54876: LD_INT 1
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 2
54885: NEG
54886: PUSH
54887: LD_INT 1
54889: NEG
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54906: LD_ADDR_VAR 0 36
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: LD_INT 0
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: PUSH
54945: LD_INT 1
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 0
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: NEG
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 1
54975: NEG
54976: PUSH
54977: LD_INT 1
54979: NEG
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 1
54987: NEG
54988: PUSH
54989: LD_INT 2
54991: NEG
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 1
54999: PUSH
55000: LD_INT 2
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55018: LD_ADDR_VAR 0 37
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: LD_INT 1
55038: NEG
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: LD_INT 0
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: LD_INT 1
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: LD_INT 1
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 1
55087: NEG
55088: PUSH
55089: LD_INT 1
55091: NEG
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: LD_INT 1
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55130: LD_ADDR_VAR 0 38
55134: PUSH
55135: LD_INT 0
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: LD_INT 0
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 1
55168: PUSH
55169: LD_INT 1
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: NEG
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: NEG
55200: PUSH
55201: LD_INT 1
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 2
55211: PUSH
55212: LD_INT 1
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 2
55221: NEG
55222: PUSH
55223: LD_INT 1
55225: NEG
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55242: LD_ADDR_VAR 0 39
55246: PUSH
55247: LD_INT 0
55249: PUSH
55250: LD_INT 0
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: LD_INT 1
55262: NEG
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 1
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 1
55280: PUSH
55281: LD_INT 1
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: LD_INT 1
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: LD_INT 0
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: LD_INT 1
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: PUSH
55325: LD_INT 2
55327: NEG
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 1
55335: PUSH
55336: LD_INT 2
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55354: LD_ADDR_VAR 0 40
55358: PUSH
55359: LD_INT 0
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: LD_INT 1
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: PUSH
55383: LD_INT 0
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 1
55392: PUSH
55393: LD_INT 1
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 1
55412: NEG
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: NEG
55424: PUSH
55425: LD_INT 1
55427: NEG
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 1
55435: PUSH
55436: LD_INT 1
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55466: LD_ADDR_VAR 0 41
55470: PUSH
55471: LD_INT 0
55473: PUSH
55474: LD_INT 0
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 0
55483: PUSH
55484: LD_INT 1
55486: NEG
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 1
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 0
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 1
55524: NEG
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 1
55535: NEG
55536: PUSH
55537: LD_INT 1
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: LD_INT 2
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 2
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 2
55580: PUSH
55581: LD_INT 1
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 2
55590: PUSH
55591: LD_INT 2
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: LD_INT 2
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 1
55610: NEG
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 2
55621: NEG
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 2
55632: NEG
55633: PUSH
55634: LD_INT 1
55636: NEG
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 2
55644: NEG
55645: PUSH
55646: LD_INT 2
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 2
55656: NEG
55657: PUSH
55658: LD_INT 3
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 2
55668: PUSH
55669: LD_INT 1
55671: NEG
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 3
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 3
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 3
55699: PUSH
55700: LD_INT 2
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 3
55709: PUSH
55710: LD_INT 3
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 2
55719: PUSH
55720: LD_INT 3
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 2
55729: NEG
55730: PUSH
55731: LD_INT 1
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 3
55740: NEG
55741: PUSH
55742: LD_INT 0
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 3
55751: NEG
55752: PUSH
55753: LD_INT 1
55755: NEG
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 3
55763: NEG
55764: PUSH
55765: LD_INT 2
55767: NEG
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 3
55775: NEG
55776: PUSH
55777: LD_INT 3
55779: NEG
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55816: LD_ADDR_VAR 0 42
55820: PUSH
55821: LD_INT 0
55823: PUSH
55824: LD_INT 0
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: LD_INT 1
55836: NEG
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: LD_INT 0
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 1
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: LD_INT 1
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 1
55874: NEG
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 1
55885: NEG
55886: PUSH
55887: LD_INT 1
55889: NEG
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: LD_INT 2
55901: NEG
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: LD_INT 2
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: LD_INT 1
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 2
55931: PUSH
55932: LD_INT 1
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 2
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 1
55951: PUSH
55952: LD_INT 2
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: LD_INT 2
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 1
55971: NEG
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 2
55982: NEG
55983: PUSH
55984: LD_INT 1
55986: NEG
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 2
55994: NEG
55995: PUSH
55996: LD_INT 2
55998: NEG
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 2
56006: NEG
56007: PUSH
56008: LD_INT 3
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 1
56018: NEG
56019: PUSH
56020: LD_INT 3
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: LD_INT 3
56033: NEG
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 1
56041: PUSH
56042: LD_INT 2
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 3
56052: PUSH
56053: LD_INT 2
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 3
56062: PUSH
56063: LD_INT 3
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 2
56072: PUSH
56073: LD_INT 3
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 1
56082: PUSH
56083: LD_INT 3
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: LD_INT 3
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 1
56102: NEG
56103: PUSH
56104: LD_INT 2
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 3
56113: NEG
56114: PUSH
56115: LD_INT 2
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 3
56125: NEG
56126: PUSH
56127: LD_INT 3
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56166: LD_ADDR_VAR 0 43
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 0
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 1
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: NEG
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 1
56247: NEG
56248: PUSH
56249: LD_INT 2
56251: NEG
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: LD_INT 2
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 1
56270: PUSH
56271: LD_INT 1
56273: NEG
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 2
56281: PUSH
56282: LD_INT 0
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 2
56291: PUSH
56292: LD_INT 1
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: LD_INT 2
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: LD_INT 2
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 1
56321: NEG
56322: PUSH
56323: LD_INT 1
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 2
56332: NEG
56333: PUSH
56334: LD_INT 0
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 2
56343: NEG
56344: PUSH
56345: LD_INT 1
56347: NEG
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: LD_INT 3
56359: NEG
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: LD_INT 3
56370: NEG
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: PUSH
56379: LD_INT 2
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 2
56389: PUSH
56390: LD_INT 1
56392: NEG
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 3
56400: PUSH
56401: LD_INT 0
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 3
56410: PUSH
56411: LD_INT 1
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 1
56420: PUSH
56421: LD_INT 3
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 0
56430: PUSH
56431: LD_INT 3
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 1
56440: NEG
56441: PUSH
56442: LD_INT 2
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 2
56451: NEG
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 3
56462: NEG
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 3
56473: NEG
56474: PUSH
56475: LD_INT 1
56477: NEG
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56514: LD_ADDR_VAR 0 44
56518: PUSH
56519: LD_INT 0
56521: PUSH
56522: LD_INT 0
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 0
56531: PUSH
56532: LD_INT 1
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 1
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 1
56552: PUSH
56553: LD_INT 1
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 0
56562: PUSH
56563: LD_INT 1
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 1
56572: NEG
56573: PUSH
56574: LD_INT 0
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 1
56583: NEG
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 1
56595: NEG
56596: PUSH
56597: LD_INT 2
56599: NEG
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 1
56607: PUSH
56608: LD_INT 1
56610: NEG
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 2
56618: PUSH
56619: LD_INT 0
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 2
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 2
56638: PUSH
56639: LD_INT 2
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 1
56648: PUSH
56649: LD_INT 2
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 1
56658: NEG
56659: PUSH
56660: LD_INT 1
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 2
56669: NEG
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 2
56680: NEG
56681: PUSH
56682: LD_INT 1
56684: NEG
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 2
56692: NEG
56693: PUSH
56694: LD_INT 2
56696: NEG
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 2
56704: NEG
56705: PUSH
56706: LD_INT 3
56708: NEG
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 2
56716: PUSH
56717: LD_INT 1
56719: NEG
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 3
56727: PUSH
56728: LD_INT 0
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 3
56737: PUSH
56738: LD_INT 1
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 3
56747: PUSH
56748: LD_INT 2
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 3
56757: PUSH
56758: LD_INT 3
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 2
56767: PUSH
56768: LD_INT 3
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 2
56777: NEG
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 3
56788: NEG
56789: PUSH
56790: LD_INT 0
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 3
56799: NEG
56800: PUSH
56801: LD_INT 1
56803: NEG
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 3
56811: NEG
56812: PUSH
56813: LD_INT 2
56815: NEG
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 3
56823: NEG
56824: PUSH
56825: LD_INT 3
56827: NEG
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56864: LD_ADDR_VAR 0 45
56868: PUSH
56869: LD_INT 0
56871: PUSH
56872: LD_INT 0
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 0
56881: PUSH
56882: LD_INT 1
56884: NEG
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 1
56892: PUSH
56893: LD_INT 0
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 1
56902: PUSH
56903: LD_INT 1
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 0
56912: PUSH
56913: LD_INT 1
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 1
56922: NEG
56923: PUSH
56924: LD_INT 0
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 1
56933: NEG
56934: PUSH
56935: LD_INT 1
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 1
56945: NEG
56946: PUSH
56947: LD_INT 2
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 0
56957: PUSH
56958: LD_INT 2
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 1
56968: PUSH
56969: LD_INT 1
56971: NEG
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 2
56979: PUSH
56980: LD_INT 1
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 2
56989: PUSH
56990: LD_INT 2
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 1
56999: PUSH
57000: LD_INT 2
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 0
57009: PUSH
57010: LD_INT 2
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 1
57019: NEG
57020: PUSH
57021: LD_INT 1
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 2
57030: NEG
57031: PUSH
57032: LD_INT 1
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 2
57042: NEG
57043: PUSH
57044: LD_INT 2
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 2
57054: NEG
57055: PUSH
57056: LD_INT 3
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 1
57066: NEG
57067: PUSH
57068: LD_INT 3
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: LD_INT 3
57081: NEG
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: LD_INT 2
57092: NEG
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 3
57100: PUSH
57101: LD_INT 2
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 3
57110: PUSH
57111: LD_INT 3
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 2
57120: PUSH
57121: LD_INT 3
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 1
57130: PUSH
57131: LD_INT 3
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 0
57140: PUSH
57141: LD_INT 3
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 1
57150: NEG
57151: PUSH
57152: LD_INT 2
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 3
57161: NEG
57162: PUSH
57163: LD_INT 2
57165: NEG
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 3
57173: NEG
57174: PUSH
57175: LD_INT 3
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57214: LD_ADDR_VAR 0 46
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: LD_INT 1
57234: NEG
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: LD_INT 0
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 1
57252: PUSH
57253: LD_INT 1
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 0
57262: PUSH
57263: LD_INT 1
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 1
57272: NEG
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 1
57283: NEG
57284: PUSH
57285: LD_INT 1
57287: NEG
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 1
57295: NEG
57296: PUSH
57297: LD_INT 2
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 0
57307: PUSH
57308: LD_INT 2
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 1
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 2
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 2
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 1
57349: PUSH
57350: LD_INT 2
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 0
57359: PUSH
57360: LD_INT 2
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 1
57369: NEG
57370: PUSH
57371: LD_INT 1
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 2
57380: NEG
57381: PUSH
57382: LD_INT 0
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 2
57391: NEG
57392: PUSH
57393: LD_INT 1
57395: NEG
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 1
57403: NEG
57404: PUSH
57405: LD_INT 3
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 0
57415: PUSH
57416: LD_INT 3
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: LD_INT 2
57429: NEG
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 2
57437: PUSH
57438: LD_INT 1
57440: NEG
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 3
57448: PUSH
57449: LD_INT 0
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 3
57458: PUSH
57459: LD_INT 1
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 1
57468: PUSH
57469: LD_INT 3
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: LD_INT 3
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 1
57488: NEG
57489: PUSH
57490: LD_INT 2
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 2
57499: NEG
57500: PUSH
57501: LD_INT 1
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 3
57510: NEG
57511: PUSH
57512: LD_INT 0
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 3
57521: NEG
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57562: LD_ADDR_VAR 0 47
57566: PUSH
57567: LD_INT 0
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 0
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: LD_INT 0
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 1
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: LD_INT 1
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 1
57620: NEG
57621: PUSH
57622: LD_INT 0
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 1
57631: NEG
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 1
57643: NEG
57644: PUSH
57645: LD_INT 2
57647: NEG
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 0
57655: PUSH
57656: LD_INT 2
57658: NEG
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 1
57666: PUSH
57667: LD_INT 1
57669: NEG
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 2
57677: NEG
57678: PUSH
57679: LD_INT 1
57681: NEG
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 2
57689: NEG
57690: PUSH
57691: LD_INT 2
57693: NEG
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57713: LD_ADDR_VAR 0 48
57717: PUSH
57718: LD_INT 0
57720: PUSH
57721: LD_INT 0
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 0
57730: PUSH
57731: LD_INT 1
57733: NEG
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 1
57741: PUSH
57742: LD_INT 0
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 1
57751: PUSH
57752: LD_INT 1
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 0
57761: PUSH
57762: LD_INT 1
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 1
57771: NEG
57772: PUSH
57773: LD_INT 0
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 1
57782: NEG
57783: PUSH
57784: LD_INT 1
57786: NEG
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 1
57794: NEG
57795: PUSH
57796: LD_INT 2
57798: NEG
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 0
57806: PUSH
57807: LD_INT 2
57809: NEG
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 1
57817: PUSH
57818: LD_INT 1
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 2
57828: PUSH
57829: LD_INT 0
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 2
57838: PUSH
57839: LD_INT 1
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57860: LD_ADDR_VAR 0 49
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 1
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 1
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 1
57918: NEG
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 1
57929: NEG
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 1
57941: PUSH
57942: LD_INT 1
57944: NEG
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 2
57952: PUSH
57953: LD_INT 0
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 2
57962: PUSH
57963: LD_INT 1
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 2
57972: PUSH
57973: LD_INT 2
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 1
57982: PUSH
57983: LD_INT 2
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58004: LD_ADDR_VAR 0 50
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: LD_INT 0
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 0
58021: PUSH
58022: LD_INT 1
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 1
58032: PUSH
58033: LD_INT 0
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 0
58052: PUSH
58053: LD_INT 1
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 1
58073: NEG
58074: PUSH
58075: LD_INT 1
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 2
58085: PUSH
58086: LD_INT 1
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 2
58095: PUSH
58096: LD_INT 2
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 1
58105: PUSH
58106: LD_INT 2
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 0
58115: PUSH
58116: LD_INT 2
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 1
58125: NEG
58126: PUSH
58127: LD_INT 1
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58148: LD_ADDR_VAR 0 51
58152: PUSH
58153: LD_INT 0
58155: PUSH
58156: LD_INT 0
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 0
58165: PUSH
58166: LD_INT 1
58168: NEG
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 1
58176: PUSH
58177: LD_INT 0
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 1
58186: PUSH
58187: LD_INT 1
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 0
58196: PUSH
58197: LD_INT 1
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 1
58206: NEG
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 1
58217: NEG
58218: PUSH
58219: LD_INT 1
58221: NEG
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 1
58229: PUSH
58230: LD_INT 2
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 0
58239: PUSH
58240: LD_INT 2
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 1
58249: NEG
58250: PUSH
58251: LD_INT 1
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 2
58260: NEG
58261: PUSH
58262: LD_INT 0
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 2
58271: NEG
58272: PUSH
58273: LD_INT 1
58275: NEG
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58295: LD_ADDR_VAR 0 52
58299: PUSH
58300: LD_INT 0
58302: PUSH
58303: LD_INT 0
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 0
58312: PUSH
58313: LD_INT 1
58315: NEG
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 1
58323: PUSH
58324: LD_INT 0
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 1
58333: PUSH
58334: LD_INT 1
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 0
58343: PUSH
58344: LD_INT 1
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 1
58353: NEG
58354: PUSH
58355: LD_INT 0
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 1
58364: NEG
58365: PUSH
58366: LD_INT 1
58368: NEG
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 1
58376: NEG
58377: PUSH
58378: LD_INT 2
58380: NEG
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 1
58388: NEG
58389: PUSH
58390: LD_INT 1
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 2
58399: NEG
58400: PUSH
58401: LD_INT 0
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 2
58410: NEG
58411: PUSH
58412: LD_INT 1
58414: NEG
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 2
58422: NEG
58423: PUSH
58424: LD_INT 2
58426: NEG
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58446: LD_ADDR_VAR 0 53
58450: PUSH
58451: LD_INT 0
58453: PUSH
58454: LD_INT 0
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 0
58463: PUSH
58464: LD_INT 1
58466: NEG
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: LD_INT 0
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 1
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: NEG
58505: PUSH
58506: LD_INT 0
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 1
58515: NEG
58516: PUSH
58517: LD_INT 1
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 1
58527: NEG
58528: PUSH
58529: LD_INT 2
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 0
58539: PUSH
58540: LD_INT 2
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 1
58550: PUSH
58551: LD_INT 1
58553: NEG
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 2
58561: PUSH
58562: LD_INT 0
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 2
58571: PUSH
58572: LD_INT 1
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 2
58581: PUSH
58582: LD_INT 2
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 1
58591: PUSH
58592: LD_INT 2
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 0
58601: PUSH
58602: LD_INT 2
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: LD_INT 1
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 2
58622: NEG
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 2
58633: NEG
58634: PUSH
58635: LD_INT 1
58637: NEG
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 2
58645: NEG
58646: PUSH
58647: LD_INT 2
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58676: LD_ADDR_VAR 0 54
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: LD_INT 0
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 0
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 1
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 1
58714: PUSH
58715: LD_INT 1
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: LD_INT 1
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: NEG
58735: PUSH
58736: LD_INT 0
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 1
58745: NEG
58746: PUSH
58747: LD_INT 1
58749: NEG
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 1
58757: NEG
58758: PUSH
58759: LD_INT 2
58761: NEG
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 0
58769: PUSH
58770: LD_INT 2
58772: NEG
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 1
58780: PUSH
58781: LD_INT 1
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 2
58791: PUSH
58792: LD_INT 0
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 2
58801: PUSH
58802: LD_INT 1
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 2
58811: PUSH
58812: LD_INT 2
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 1
58821: PUSH
58822: LD_INT 2
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 0
58831: PUSH
58832: LD_INT 2
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 1
58841: NEG
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 2
58852: NEG
58853: PUSH
58854: LD_INT 0
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 2
58863: NEG
58864: PUSH
58865: LD_INT 1
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 2
58875: NEG
58876: PUSH
58877: LD_INT 2
58879: NEG
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58906: LD_ADDR_VAR 0 55
58910: PUSH
58911: LD_INT 0
58913: PUSH
58914: LD_INT 0
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 0
58923: PUSH
58924: LD_INT 1
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 1
58934: PUSH
58935: LD_INT 0
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 1
58944: PUSH
58945: LD_INT 1
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 0
58954: PUSH
58955: LD_INT 1
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 1
58964: NEG
58965: PUSH
58966: LD_INT 0
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 1
58975: NEG
58976: PUSH
58977: LD_INT 1
58979: NEG
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 1
58987: NEG
58988: PUSH
58989: LD_INT 2
58991: NEG
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 0
58999: PUSH
59000: LD_INT 2
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 1
59010: PUSH
59011: LD_INT 1
59013: NEG
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 2
59021: PUSH
59022: LD_INT 0
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 2
59031: PUSH
59032: LD_INT 1
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 2
59041: PUSH
59042: LD_INT 2
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 1
59051: PUSH
59052: LD_INT 2
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 0
59061: PUSH
59062: LD_INT 2
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 1
59071: NEG
59072: PUSH
59073: LD_INT 1
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 2
59082: NEG
59083: PUSH
59084: LD_INT 0
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 2
59093: NEG
59094: PUSH
59095: LD_INT 1
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 2
59105: NEG
59106: PUSH
59107: LD_INT 2
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59136: LD_ADDR_VAR 0 56
59140: PUSH
59141: LD_INT 0
59143: PUSH
59144: LD_INT 0
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 0
59153: PUSH
59154: LD_INT 1
59156: NEG
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 1
59164: PUSH
59165: LD_INT 0
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 1
59174: PUSH
59175: LD_INT 1
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 0
59184: PUSH
59185: LD_INT 1
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 1
59194: NEG
59195: PUSH
59196: LD_INT 0
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 1
59205: NEG
59206: PUSH
59207: LD_INT 1
59209: NEG
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 1
59217: NEG
59218: PUSH
59219: LD_INT 2
59221: NEG
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 0
59229: PUSH
59230: LD_INT 2
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 1
59240: PUSH
59241: LD_INT 1
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 2
59251: PUSH
59252: LD_INT 0
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 2
59261: PUSH
59262: LD_INT 1
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 2
59271: PUSH
59272: LD_INT 2
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 1
59281: PUSH
59282: LD_INT 2
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 0
59291: PUSH
59292: LD_INT 2
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 1
59301: NEG
59302: PUSH
59303: LD_INT 1
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 2
59312: NEG
59313: PUSH
59314: LD_INT 0
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 2
59323: NEG
59324: PUSH
59325: LD_INT 1
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 2
59335: NEG
59336: PUSH
59337: LD_INT 2
59339: NEG
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59366: LD_ADDR_VAR 0 57
59370: PUSH
59371: LD_INT 0
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: LD_INT 1
59386: NEG
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 1
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 1
59404: PUSH
59405: LD_INT 1
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 0
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 1
59424: NEG
59425: PUSH
59426: LD_INT 0
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: PUSH
59437: LD_INT 1
59439: NEG
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 1
59447: NEG
59448: PUSH
59449: LD_INT 2
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: LD_INT 2
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 1
59470: PUSH
59471: LD_INT 1
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 2
59481: PUSH
59482: LD_INT 0
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 2
59491: PUSH
59492: LD_INT 1
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 2
59501: PUSH
59502: LD_INT 2
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: LD_INT 2
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: LD_INT 2
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 1
59531: NEG
59532: PUSH
59533: LD_INT 1
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 2
59542: NEG
59543: PUSH
59544: LD_INT 0
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 2
59553: NEG
59554: PUSH
59555: LD_INT 1
59557: NEG
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 2
59565: NEG
59566: PUSH
59567: LD_INT 2
59569: NEG
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59596: LD_ADDR_VAR 0 58
59600: PUSH
59601: LD_INT 0
59603: PUSH
59604: LD_INT 0
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 0
59613: PUSH
59614: LD_INT 1
59616: NEG
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 1
59624: PUSH
59625: LD_INT 0
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 1
59634: PUSH
59635: LD_INT 1
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 0
59644: PUSH
59645: LD_INT 1
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 1
59654: NEG
59655: PUSH
59656: LD_INT 0
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 1
59665: NEG
59666: PUSH
59667: LD_INT 1
59669: NEG
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 1
59677: NEG
59678: PUSH
59679: LD_INT 2
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 0
59689: PUSH
59690: LD_INT 2
59692: NEG
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 1
59700: PUSH
59701: LD_INT 1
59703: NEG
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 2
59711: PUSH
59712: LD_INT 0
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 2
59721: PUSH
59722: LD_INT 1
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 2
59731: PUSH
59732: LD_INT 2
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 1
59741: PUSH
59742: LD_INT 2
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 0
59751: PUSH
59752: LD_INT 2
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 1
59761: NEG
59762: PUSH
59763: LD_INT 1
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 2
59772: NEG
59773: PUSH
59774: LD_INT 0
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 2
59783: NEG
59784: PUSH
59785: LD_INT 1
59787: NEG
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 2
59795: NEG
59796: PUSH
59797: LD_INT 2
59799: NEG
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59826: LD_ADDR_VAR 0 59
59830: PUSH
59831: LD_INT 0
59833: PUSH
59834: LD_INT 0
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 0
59843: PUSH
59844: LD_INT 1
59846: NEG
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 1
59854: PUSH
59855: LD_INT 0
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 1
59864: PUSH
59865: LD_INT 1
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 0
59874: PUSH
59875: LD_INT 1
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 1
59884: NEG
59885: PUSH
59886: LD_INT 0
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 1
59895: NEG
59896: PUSH
59897: LD_INT 1
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59914: LD_ADDR_VAR 0 60
59918: PUSH
59919: LD_INT 0
59921: PUSH
59922: LD_INT 0
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: LD_INT 1
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 1
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 1
59952: PUSH
59953: LD_INT 1
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 0
59962: PUSH
59963: LD_INT 1
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 1
59972: NEG
59973: PUSH
59974: LD_INT 0
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 1
59983: NEG
59984: PUSH
59985: LD_INT 1
59987: NEG
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60002: LD_ADDR_VAR 0 61
60006: PUSH
60007: LD_INT 0
60009: PUSH
60010: LD_INT 0
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: LD_INT 1
60022: NEG
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 1
60030: PUSH
60031: LD_INT 0
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 1
60040: PUSH
60041: LD_INT 1
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 0
60050: PUSH
60051: LD_INT 1
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 1
60060: NEG
60061: PUSH
60062: LD_INT 0
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 1
60071: NEG
60072: PUSH
60073: LD_INT 1
60075: NEG
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60090: LD_ADDR_VAR 0 62
60094: PUSH
60095: LD_INT 0
60097: PUSH
60098: LD_INT 0
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 0
60107: PUSH
60108: LD_INT 1
60110: NEG
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 1
60118: PUSH
60119: LD_INT 0
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 1
60128: PUSH
60129: LD_INT 1
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 0
60138: PUSH
60139: LD_INT 1
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 1
60148: NEG
60149: PUSH
60150: LD_INT 0
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 1
60159: NEG
60160: PUSH
60161: LD_INT 1
60163: NEG
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60178: LD_ADDR_VAR 0 63
60182: PUSH
60183: LD_INT 0
60185: PUSH
60186: LD_INT 0
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 0
60195: PUSH
60196: LD_INT 1
60198: NEG
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 1
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 1
60216: PUSH
60217: LD_INT 1
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 0
60226: PUSH
60227: LD_INT 1
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 1
60236: NEG
60237: PUSH
60238: LD_INT 0
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 1
60247: NEG
60248: PUSH
60249: LD_INT 1
60251: NEG
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60266: LD_ADDR_VAR 0 64
60270: PUSH
60271: LD_INT 0
60273: PUSH
60274: LD_INT 0
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 0
60283: PUSH
60284: LD_INT 1
60286: NEG
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 1
60294: PUSH
60295: LD_INT 0
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 1
60304: PUSH
60305: LD_INT 1
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 0
60314: PUSH
60315: LD_INT 1
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 1
60324: NEG
60325: PUSH
60326: LD_INT 0
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 1
60335: NEG
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: ST_TO_ADDR
// end ; 1 :
60354: GO 66251
60356: LD_INT 1
60358: DOUBLE
60359: EQUAL
60360: IFTRUE 60364
60362: GO 62987
60364: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60365: LD_ADDR_VAR 0 11
60369: PUSH
60370: LD_INT 1
60372: NEG
60373: PUSH
60374: LD_INT 3
60376: NEG
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 0
60384: PUSH
60385: LD_INT 3
60387: NEG
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 1
60395: PUSH
60396: LD_INT 2
60398: NEG
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: LIST
60408: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60409: LD_ADDR_VAR 0 12
60413: PUSH
60414: LD_INT 2
60416: PUSH
60417: LD_INT 1
60419: NEG
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 3
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 3
60437: PUSH
60438: LD_INT 1
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: LIST
60449: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60450: LD_ADDR_VAR 0 13
60454: PUSH
60455: LD_INT 3
60457: PUSH
60458: LD_INT 2
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 3
60467: PUSH
60468: LD_INT 3
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 2
60477: PUSH
60478: LD_INT 3
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: LIST
60489: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60490: LD_ADDR_VAR 0 14
60494: PUSH
60495: LD_INT 1
60497: PUSH
60498: LD_INT 3
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 0
60507: PUSH
60508: LD_INT 3
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 1
60517: NEG
60518: PUSH
60519: LD_INT 2
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: LIST
60530: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60531: LD_ADDR_VAR 0 15
60535: PUSH
60536: LD_INT 2
60538: NEG
60539: PUSH
60540: LD_INT 1
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 3
60549: NEG
60550: PUSH
60551: LD_INT 0
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 3
60560: NEG
60561: PUSH
60562: LD_INT 1
60564: NEG
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: LIST
60574: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60575: LD_ADDR_VAR 0 16
60579: PUSH
60580: LD_INT 2
60582: NEG
60583: PUSH
60584: LD_INT 3
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 3
60594: NEG
60595: PUSH
60596: LD_INT 2
60598: NEG
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 3
60606: NEG
60607: PUSH
60608: LD_INT 3
60610: NEG
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: LIST
60620: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60621: LD_ADDR_VAR 0 17
60625: PUSH
60626: LD_INT 1
60628: NEG
60629: PUSH
60630: LD_INT 3
60632: NEG
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 0
60640: PUSH
60641: LD_INT 3
60643: NEG
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 1
60651: PUSH
60652: LD_INT 2
60654: NEG
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: LIST
60664: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60665: LD_ADDR_VAR 0 18
60669: PUSH
60670: LD_INT 2
60672: PUSH
60673: LD_INT 1
60675: NEG
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 3
60683: PUSH
60684: LD_INT 0
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 3
60693: PUSH
60694: LD_INT 1
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: LIST
60705: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60706: LD_ADDR_VAR 0 19
60710: PUSH
60711: LD_INT 3
60713: PUSH
60714: LD_INT 2
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 3
60723: PUSH
60724: LD_INT 3
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 2
60733: PUSH
60734: LD_INT 3
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: LIST
60745: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60746: LD_ADDR_VAR 0 20
60750: PUSH
60751: LD_INT 1
60753: PUSH
60754: LD_INT 3
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 0
60763: PUSH
60764: LD_INT 3
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 1
60773: NEG
60774: PUSH
60775: LD_INT 2
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: LIST
60786: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60787: LD_ADDR_VAR 0 21
60791: PUSH
60792: LD_INT 2
60794: NEG
60795: PUSH
60796: LD_INT 1
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 3
60805: NEG
60806: PUSH
60807: LD_INT 0
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 3
60816: NEG
60817: PUSH
60818: LD_INT 1
60820: NEG
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: LIST
60830: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60831: LD_ADDR_VAR 0 22
60835: PUSH
60836: LD_INT 2
60838: NEG
60839: PUSH
60840: LD_INT 3
60842: NEG
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 3
60850: NEG
60851: PUSH
60852: LD_INT 2
60854: NEG
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 3
60862: NEG
60863: PUSH
60864: LD_INT 3
60866: NEG
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: LIST
60876: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60877: LD_ADDR_VAR 0 23
60881: PUSH
60882: LD_INT 0
60884: PUSH
60885: LD_INT 3
60887: NEG
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 1
60895: NEG
60896: PUSH
60897: LD_INT 4
60899: NEG
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 1
60907: PUSH
60908: LD_INT 3
60910: NEG
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: LIST
60920: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60921: LD_ADDR_VAR 0 24
60925: PUSH
60926: LD_INT 3
60928: PUSH
60929: LD_INT 0
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 3
60938: PUSH
60939: LD_INT 1
60941: NEG
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 4
60949: PUSH
60950: LD_INT 1
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: LIST
60961: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60962: LD_ADDR_VAR 0 25
60966: PUSH
60967: LD_INT 3
60969: PUSH
60970: LD_INT 3
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 4
60979: PUSH
60980: LD_INT 3
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 3
60989: PUSH
60990: LD_INT 4
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: LIST
61001: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61002: LD_ADDR_VAR 0 26
61006: PUSH
61007: LD_INT 0
61009: PUSH
61010: LD_INT 3
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 1
61019: PUSH
61020: LD_INT 4
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 1
61029: NEG
61030: PUSH
61031: LD_INT 3
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: LIST
61042: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61043: LD_ADDR_VAR 0 27
61047: PUSH
61048: LD_INT 3
61050: NEG
61051: PUSH
61052: LD_INT 0
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 3
61061: NEG
61062: PUSH
61063: LD_INT 1
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 4
61072: NEG
61073: PUSH
61074: LD_INT 1
61076: NEG
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: LIST
61086: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61087: LD_ADDR_VAR 0 28
61091: PUSH
61092: LD_INT 3
61094: NEG
61095: PUSH
61096: LD_INT 3
61098: NEG
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 3
61106: NEG
61107: PUSH
61108: LD_INT 4
61110: NEG
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 4
61118: NEG
61119: PUSH
61120: LD_INT 3
61122: NEG
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: LIST
61132: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61133: LD_ADDR_VAR 0 29
61137: PUSH
61138: LD_INT 1
61140: NEG
61141: PUSH
61142: LD_INT 3
61144: NEG
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 0
61152: PUSH
61153: LD_INT 3
61155: NEG
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: LD_INT 2
61166: NEG
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 1
61174: NEG
61175: PUSH
61176: LD_INT 4
61178: NEG
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 0
61186: PUSH
61187: LD_INT 4
61189: NEG
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 1
61197: PUSH
61198: LD_INT 3
61200: NEG
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 1
61208: NEG
61209: PUSH
61210: LD_INT 5
61212: NEG
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 0
61220: PUSH
61221: LD_INT 5
61223: NEG
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 1
61231: PUSH
61232: LD_INT 4
61234: NEG
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 1
61242: NEG
61243: PUSH
61244: LD_INT 6
61246: NEG
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 0
61254: PUSH
61255: LD_INT 6
61257: NEG
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 1
61265: PUSH
61266: LD_INT 5
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61288: LD_ADDR_VAR 0 30
61292: PUSH
61293: LD_INT 2
61295: PUSH
61296: LD_INT 1
61298: NEG
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 3
61306: PUSH
61307: LD_INT 0
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 3
61316: PUSH
61317: LD_INT 1
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 3
61326: PUSH
61327: LD_INT 1
61329: NEG
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 4
61337: PUSH
61338: LD_INT 0
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 4
61347: PUSH
61348: LD_INT 1
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 4
61357: PUSH
61358: LD_INT 1
61360: NEG
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 5
61368: PUSH
61369: LD_INT 0
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 5
61378: PUSH
61379: LD_INT 1
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 5
61388: PUSH
61389: LD_INT 1
61391: NEG
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 6
61399: PUSH
61400: LD_INT 0
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 6
61409: PUSH
61410: LD_INT 1
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61431: LD_ADDR_VAR 0 31
61435: PUSH
61436: LD_INT 3
61438: PUSH
61439: LD_INT 2
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 3
61448: PUSH
61449: LD_INT 3
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 2
61458: PUSH
61459: LD_INT 3
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 4
61468: PUSH
61469: LD_INT 3
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 4
61478: PUSH
61479: LD_INT 4
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 3
61488: PUSH
61489: LD_INT 4
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 5
61498: PUSH
61499: LD_INT 4
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 5
61508: PUSH
61509: LD_INT 5
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 4
61518: PUSH
61519: LD_INT 5
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 6
61528: PUSH
61529: LD_INT 5
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 6
61538: PUSH
61539: LD_INT 6
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 5
61548: PUSH
61549: LD_INT 6
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61570: LD_ADDR_VAR 0 32
61574: PUSH
61575: LD_INT 1
61577: PUSH
61578: LD_INT 3
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 0
61587: PUSH
61588: LD_INT 3
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 1
61597: NEG
61598: PUSH
61599: LD_INT 2
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 1
61608: PUSH
61609: LD_INT 4
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 0
61618: PUSH
61619: LD_INT 4
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 1
61628: NEG
61629: PUSH
61630: LD_INT 3
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 1
61639: PUSH
61640: LD_INT 5
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 0
61649: PUSH
61650: LD_INT 5
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 1
61659: NEG
61660: PUSH
61661: LD_INT 4
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 1
61670: PUSH
61671: LD_INT 6
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 0
61680: PUSH
61681: LD_INT 6
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 1
61690: NEG
61691: PUSH
61692: LD_INT 5
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61713: LD_ADDR_VAR 0 33
61717: PUSH
61718: LD_INT 2
61720: NEG
61721: PUSH
61722: LD_INT 1
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 3
61731: NEG
61732: PUSH
61733: LD_INT 0
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 3
61742: NEG
61743: PUSH
61744: LD_INT 1
61746: NEG
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 3
61754: NEG
61755: PUSH
61756: LD_INT 1
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 4
61765: NEG
61766: PUSH
61767: LD_INT 0
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 4
61776: NEG
61777: PUSH
61778: LD_INT 1
61780: NEG
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 4
61788: NEG
61789: PUSH
61790: LD_INT 1
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 5
61799: NEG
61800: PUSH
61801: LD_INT 0
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 5
61810: NEG
61811: PUSH
61812: LD_INT 1
61814: NEG
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 5
61822: NEG
61823: PUSH
61824: LD_INT 1
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 6
61833: NEG
61834: PUSH
61835: LD_INT 0
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 6
61844: NEG
61845: PUSH
61846: LD_INT 1
61848: NEG
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61868: LD_ADDR_VAR 0 34
61872: PUSH
61873: LD_INT 2
61875: NEG
61876: PUSH
61877: LD_INT 3
61879: NEG
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 3
61887: NEG
61888: PUSH
61889: LD_INT 2
61891: NEG
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 3
61899: NEG
61900: PUSH
61901: LD_INT 3
61903: NEG
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 3
61911: NEG
61912: PUSH
61913: LD_INT 4
61915: NEG
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 4
61923: NEG
61924: PUSH
61925: LD_INT 3
61927: NEG
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 4
61935: NEG
61936: PUSH
61937: LD_INT 4
61939: NEG
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 4
61947: NEG
61948: PUSH
61949: LD_INT 5
61951: NEG
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 5
61959: NEG
61960: PUSH
61961: LD_INT 4
61963: NEG
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 5
61971: NEG
61972: PUSH
61973: LD_INT 5
61975: NEG
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 5
61983: NEG
61984: PUSH
61985: LD_INT 6
61987: NEG
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 6
61995: NEG
61996: PUSH
61997: LD_INT 5
61999: NEG
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 6
62007: NEG
62008: PUSH
62009: LD_INT 6
62011: NEG
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62031: LD_ADDR_VAR 0 41
62035: PUSH
62036: LD_INT 0
62038: PUSH
62039: LD_INT 2
62041: NEG
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 1
62049: NEG
62050: PUSH
62051: LD_INT 3
62053: NEG
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 1
62061: PUSH
62062: LD_INT 2
62064: NEG
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: LIST
62074: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62075: LD_ADDR_VAR 0 42
62079: PUSH
62080: LD_INT 2
62082: PUSH
62083: LD_INT 0
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 2
62092: PUSH
62093: LD_INT 1
62095: NEG
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 3
62103: PUSH
62104: LD_INT 1
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: LIST
62115: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62116: LD_ADDR_VAR 0 43
62120: PUSH
62121: LD_INT 2
62123: PUSH
62124: LD_INT 2
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 3
62133: PUSH
62134: LD_INT 2
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 2
62143: PUSH
62144: LD_INT 3
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: LIST
62155: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62156: LD_ADDR_VAR 0 44
62160: PUSH
62161: LD_INT 0
62163: PUSH
62164: LD_INT 2
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 1
62173: PUSH
62174: LD_INT 3
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 1
62183: NEG
62184: PUSH
62185: LD_INT 2
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: LIST
62196: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62197: LD_ADDR_VAR 0 45
62201: PUSH
62202: LD_INT 2
62204: NEG
62205: PUSH
62206: LD_INT 0
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 2
62215: NEG
62216: PUSH
62217: LD_INT 1
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 3
62226: NEG
62227: PUSH
62228: LD_INT 1
62230: NEG
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: LIST
62240: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62241: LD_ADDR_VAR 0 46
62245: PUSH
62246: LD_INT 2
62248: NEG
62249: PUSH
62250: LD_INT 2
62252: NEG
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 2
62260: NEG
62261: PUSH
62262: LD_INT 3
62264: NEG
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 3
62272: NEG
62273: PUSH
62274: LD_INT 2
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: LIST
62286: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62287: LD_ADDR_VAR 0 47
62291: PUSH
62292: LD_INT 2
62294: NEG
62295: PUSH
62296: LD_INT 3
62298: NEG
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 1
62306: NEG
62307: PUSH
62308: LD_INT 3
62310: NEG
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62320: LD_ADDR_VAR 0 48
62324: PUSH
62325: LD_INT 1
62327: PUSH
62328: LD_INT 2
62330: NEG
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 2
62338: PUSH
62339: LD_INT 1
62341: NEG
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62351: LD_ADDR_VAR 0 49
62355: PUSH
62356: LD_INT 3
62358: PUSH
62359: LD_INT 1
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 3
62368: PUSH
62369: LD_INT 2
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62380: LD_ADDR_VAR 0 50
62384: PUSH
62385: LD_INT 2
62387: PUSH
62388: LD_INT 3
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 1
62397: PUSH
62398: LD_INT 3
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62409: LD_ADDR_VAR 0 51
62413: PUSH
62414: LD_INT 1
62416: NEG
62417: PUSH
62418: LD_INT 2
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 2
62427: NEG
62428: PUSH
62429: LD_INT 1
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62440: LD_ADDR_VAR 0 52
62444: PUSH
62445: LD_INT 3
62447: NEG
62448: PUSH
62449: LD_INT 1
62451: NEG
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 3
62459: NEG
62460: PUSH
62461: LD_INT 2
62463: NEG
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62473: LD_ADDR_VAR 0 53
62477: PUSH
62478: LD_INT 1
62480: NEG
62481: PUSH
62482: LD_INT 3
62484: NEG
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 0
62492: PUSH
62493: LD_INT 3
62495: NEG
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 1
62503: PUSH
62504: LD_INT 2
62506: NEG
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: LIST
62516: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62517: LD_ADDR_VAR 0 54
62521: PUSH
62522: LD_INT 2
62524: PUSH
62525: LD_INT 1
62527: NEG
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 3
62535: PUSH
62536: LD_INT 0
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 3
62545: PUSH
62546: LD_INT 1
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: LIST
62557: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62558: LD_ADDR_VAR 0 55
62562: PUSH
62563: LD_INT 3
62565: PUSH
62566: LD_INT 2
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 3
62575: PUSH
62576: LD_INT 3
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 2
62585: PUSH
62586: LD_INT 3
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: LIST
62597: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62598: LD_ADDR_VAR 0 56
62602: PUSH
62603: LD_INT 1
62605: PUSH
62606: LD_INT 3
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 0
62615: PUSH
62616: LD_INT 3
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 1
62625: NEG
62626: PUSH
62627: LD_INT 2
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: LIST
62638: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62639: LD_ADDR_VAR 0 57
62643: PUSH
62644: LD_INT 2
62646: NEG
62647: PUSH
62648: LD_INT 1
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 3
62657: NEG
62658: PUSH
62659: LD_INT 0
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 3
62668: NEG
62669: PUSH
62670: LD_INT 1
62672: NEG
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: LIST
62682: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62683: LD_ADDR_VAR 0 58
62687: PUSH
62688: LD_INT 2
62690: NEG
62691: PUSH
62692: LD_INT 3
62694: NEG
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 3
62702: NEG
62703: PUSH
62704: LD_INT 2
62706: NEG
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: LD_INT 3
62714: NEG
62715: PUSH
62716: LD_INT 3
62718: NEG
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: LIST
62728: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62729: LD_ADDR_VAR 0 59
62733: PUSH
62734: LD_INT 1
62736: NEG
62737: PUSH
62738: LD_INT 2
62740: NEG
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 0
62748: PUSH
62749: LD_INT 2
62751: NEG
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 1
62759: PUSH
62760: LD_INT 1
62762: NEG
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: LIST
62772: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62773: LD_ADDR_VAR 0 60
62777: PUSH
62778: LD_INT 1
62780: PUSH
62781: LD_INT 1
62783: NEG
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 2
62791: PUSH
62792: LD_INT 0
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 2
62801: PUSH
62802: LD_INT 1
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: LIST
62813: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62814: LD_ADDR_VAR 0 61
62818: PUSH
62819: LD_INT 2
62821: PUSH
62822: LD_INT 1
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 2
62831: PUSH
62832: LD_INT 2
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 1
62841: PUSH
62842: LD_INT 2
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: LIST
62853: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62854: LD_ADDR_VAR 0 62
62858: PUSH
62859: LD_INT 1
62861: PUSH
62862: LD_INT 2
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 0
62871: PUSH
62872: LD_INT 2
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 1
62881: NEG
62882: PUSH
62883: LD_INT 1
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: LIST
62894: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62895: LD_ADDR_VAR 0 63
62899: PUSH
62900: LD_INT 1
62902: NEG
62903: PUSH
62904: LD_INT 1
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 2
62913: NEG
62914: PUSH
62915: LD_INT 0
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 2
62924: NEG
62925: PUSH
62926: LD_INT 1
62928: NEG
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: LIST
62938: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62939: LD_ADDR_VAR 0 64
62943: PUSH
62944: LD_INT 1
62946: NEG
62947: PUSH
62948: LD_INT 2
62950: NEG
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 2
62958: NEG
62959: PUSH
62960: LD_INT 1
62962: NEG
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 2
62970: NEG
62971: PUSH
62972: LD_INT 2
62974: NEG
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: LIST
62984: ST_TO_ADDR
// end ; 2 :
62985: GO 66251
62987: LD_INT 2
62989: DOUBLE
62990: EQUAL
62991: IFTRUE 62995
62993: GO 66250
62995: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62996: LD_ADDR_VAR 0 29
63000: PUSH
63001: LD_INT 4
63003: PUSH
63004: LD_INT 0
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 4
63013: PUSH
63014: LD_INT 1
63016: NEG
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 5
63024: PUSH
63025: LD_INT 0
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 5
63034: PUSH
63035: LD_INT 1
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 4
63044: PUSH
63045: LD_INT 1
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 3
63054: PUSH
63055: LD_INT 0
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 3
63064: PUSH
63065: LD_INT 1
63067: NEG
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 3
63075: PUSH
63076: LD_INT 2
63078: NEG
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 5
63086: PUSH
63087: LD_INT 2
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 3
63096: PUSH
63097: LD_INT 3
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 3
63106: PUSH
63107: LD_INT 2
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 4
63116: PUSH
63117: LD_INT 3
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 4
63126: PUSH
63127: LD_INT 4
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 3
63136: PUSH
63137: LD_INT 4
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 2
63146: PUSH
63147: LD_INT 3
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 2
63156: PUSH
63157: LD_INT 2
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 4
63166: PUSH
63167: LD_INT 2
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 2
63176: PUSH
63177: LD_INT 4
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 0
63186: PUSH
63187: LD_INT 4
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 0
63196: PUSH
63197: LD_INT 3
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 1
63206: PUSH
63207: LD_INT 4
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 1
63216: PUSH
63217: LD_INT 5
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 0
63226: PUSH
63227: LD_INT 5
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 1
63236: NEG
63237: PUSH
63238: LD_INT 4
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 1
63247: NEG
63248: PUSH
63249: LD_INT 3
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 2
63258: PUSH
63259: LD_INT 5
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 2
63268: NEG
63269: PUSH
63270: LD_INT 3
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 3
63279: NEG
63280: PUSH
63281: LD_INT 0
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 3
63290: NEG
63291: PUSH
63292: LD_INT 1
63294: NEG
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 2
63302: NEG
63303: PUSH
63304: LD_INT 0
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 2
63313: NEG
63314: PUSH
63315: LD_INT 1
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 3
63324: NEG
63325: PUSH
63326: LD_INT 1
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 4
63335: NEG
63336: PUSH
63337: LD_INT 0
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 4
63346: NEG
63347: PUSH
63348: LD_INT 1
63350: NEG
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 4
63358: NEG
63359: PUSH
63360: LD_INT 2
63362: NEG
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 2
63370: NEG
63371: PUSH
63372: LD_INT 2
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 4
63381: NEG
63382: PUSH
63383: LD_INT 4
63385: NEG
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 4
63393: NEG
63394: PUSH
63395: LD_INT 5
63397: NEG
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 3
63405: NEG
63406: PUSH
63407: LD_INT 4
63409: NEG
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 3
63417: NEG
63418: PUSH
63419: LD_INT 3
63421: NEG
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 4
63429: NEG
63430: PUSH
63431: LD_INT 3
63433: NEG
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 5
63441: NEG
63442: PUSH
63443: LD_INT 4
63445: NEG
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 5
63453: NEG
63454: PUSH
63455: LD_INT 5
63457: NEG
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 3
63465: NEG
63466: PUSH
63467: LD_INT 5
63469: NEG
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 5
63477: NEG
63478: PUSH
63479: LD_INT 3
63481: NEG
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63534: LD_ADDR_VAR 0 30
63538: PUSH
63539: LD_INT 4
63541: PUSH
63542: LD_INT 4
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 4
63551: PUSH
63552: LD_INT 3
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 5
63561: PUSH
63562: LD_INT 4
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 5
63571: PUSH
63572: LD_INT 5
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 4
63581: PUSH
63582: LD_INT 5
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 3
63591: PUSH
63592: LD_INT 4
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 3
63601: PUSH
63602: LD_INT 3
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 5
63611: PUSH
63612: LD_INT 3
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 3
63621: PUSH
63622: LD_INT 5
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 0
63631: PUSH
63632: LD_INT 3
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: LD_INT 0
63641: PUSH
63642: LD_INT 2
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 1
63651: PUSH
63652: LD_INT 3
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 1
63661: PUSH
63662: LD_INT 4
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 0
63671: PUSH
63672: LD_INT 4
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 1
63681: NEG
63682: PUSH
63683: LD_INT 3
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 1
63692: NEG
63693: PUSH
63694: LD_INT 2
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 2
63703: PUSH
63704: LD_INT 4
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 2
63713: NEG
63714: PUSH
63715: LD_INT 2
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 4
63724: NEG
63725: PUSH
63726: LD_INT 0
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 4
63735: NEG
63736: PUSH
63737: LD_INT 1
63739: NEG
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 3
63747: NEG
63748: PUSH
63749: LD_INT 0
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 3
63758: NEG
63759: PUSH
63760: LD_INT 1
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 4
63769: NEG
63770: PUSH
63771: LD_INT 1
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 5
63780: NEG
63781: PUSH
63782: LD_INT 0
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 5
63791: NEG
63792: PUSH
63793: LD_INT 1
63795: NEG
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 5
63803: NEG
63804: PUSH
63805: LD_INT 2
63807: NEG
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 3
63815: NEG
63816: PUSH
63817: LD_INT 2
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 3
63826: NEG
63827: PUSH
63828: LD_INT 3
63830: NEG
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 3
63838: NEG
63839: PUSH
63840: LD_INT 4
63842: NEG
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 2
63850: NEG
63851: PUSH
63852: LD_INT 3
63854: NEG
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 2
63862: NEG
63863: PUSH
63864: LD_INT 2
63866: NEG
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 3
63874: NEG
63875: PUSH
63876: LD_INT 2
63878: NEG
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 4
63886: NEG
63887: PUSH
63888: LD_INT 3
63890: NEG
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 4
63898: NEG
63899: PUSH
63900: LD_INT 4
63902: NEG
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 2
63910: NEG
63911: PUSH
63912: LD_INT 4
63914: NEG
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 4
63922: NEG
63923: PUSH
63924: LD_INT 2
63926: NEG
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 0
63934: PUSH
63935: LD_INT 4
63937: NEG
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 0
63945: PUSH
63946: LD_INT 5
63948: NEG
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: LD_INT 1
63956: PUSH
63957: LD_INT 4
63959: NEG
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 1
63967: PUSH
63968: LD_INT 3
63970: NEG
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 0
63978: PUSH
63979: LD_INT 3
63981: NEG
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 1
63989: NEG
63990: PUSH
63991: LD_INT 4
63993: NEG
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 1
64001: NEG
64002: PUSH
64003: LD_INT 5
64005: NEG
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 2
64013: PUSH
64014: LD_INT 3
64016: NEG
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 2
64024: NEG
64025: PUSH
64026: LD_INT 5
64028: NEG
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64081: LD_ADDR_VAR 0 31
64085: PUSH
64086: LD_INT 0
64088: PUSH
64089: LD_INT 4
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 0
64098: PUSH
64099: LD_INT 3
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 1
64108: PUSH
64109: LD_INT 4
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 1
64118: PUSH
64119: LD_INT 5
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 0
64128: PUSH
64129: LD_INT 5
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 1
64138: NEG
64139: PUSH
64140: LD_INT 4
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 1
64149: NEG
64150: PUSH
64151: LD_INT 3
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 2
64160: PUSH
64161: LD_INT 5
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 2
64170: NEG
64171: PUSH
64172: LD_INT 3
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 3
64181: NEG
64182: PUSH
64183: LD_INT 0
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 3
64192: NEG
64193: PUSH
64194: LD_INT 1
64196: NEG
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 2
64204: NEG
64205: PUSH
64206: LD_INT 0
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: LD_INT 2
64215: NEG
64216: PUSH
64217: LD_INT 1
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 3
64226: NEG
64227: PUSH
64228: LD_INT 1
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 4
64237: NEG
64238: PUSH
64239: LD_INT 0
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 4
64248: NEG
64249: PUSH
64250: LD_INT 1
64252: NEG
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 4
64260: NEG
64261: PUSH
64262: LD_INT 2
64264: NEG
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 2
64272: NEG
64273: PUSH
64274: LD_INT 2
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 4
64283: NEG
64284: PUSH
64285: LD_INT 4
64287: NEG
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 4
64295: NEG
64296: PUSH
64297: LD_INT 5
64299: NEG
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 3
64307: NEG
64308: PUSH
64309: LD_INT 4
64311: NEG
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PUSH
64317: LD_INT 3
64319: NEG
64320: PUSH
64321: LD_INT 3
64323: NEG
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 4
64331: NEG
64332: PUSH
64333: LD_INT 3
64335: NEG
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 5
64343: NEG
64344: PUSH
64345: LD_INT 4
64347: NEG
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 5
64355: NEG
64356: PUSH
64357: LD_INT 5
64359: NEG
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 3
64367: NEG
64368: PUSH
64369: LD_INT 5
64371: NEG
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 5
64379: NEG
64380: PUSH
64381: LD_INT 3
64383: NEG
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 0
64391: PUSH
64392: LD_INT 3
64394: NEG
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 0
64402: PUSH
64403: LD_INT 4
64405: NEG
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: LD_INT 1
64413: PUSH
64414: LD_INT 3
64416: NEG
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 1
64424: PUSH
64425: LD_INT 2
64427: NEG
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: LD_INT 0
64435: PUSH
64436: LD_INT 2
64438: NEG
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 1
64446: NEG
64447: PUSH
64448: LD_INT 3
64450: NEG
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 1
64458: NEG
64459: PUSH
64460: LD_INT 4
64462: NEG
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 2
64470: PUSH
64471: LD_INT 2
64473: NEG
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 2
64481: NEG
64482: PUSH
64483: LD_INT 4
64485: NEG
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 4
64493: PUSH
64494: LD_INT 0
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: LD_INT 4
64503: PUSH
64504: LD_INT 1
64506: NEG
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 5
64514: PUSH
64515: LD_INT 0
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 5
64524: PUSH
64525: LD_INT 1
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 4
64534: PUSH
64535: LD_INT 1
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 3
64544: PUSH
64545: LD_INT 0
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 3
64554: PUSH
64555: LD_INT 1
64557: NEG
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 3
64565: PUSH
64566: LD_INT 2
64568: NEG
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 5
64576: PUSH
64577: LD_INT 2
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64631: LD_ADDR_VAR 0 32
64635: PUSH
64636: LD_INT 4
64638: NEG
64639: PUSH
64640: LD_INT 0
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 4
64649: NEG
64650: PUSH
64651: LD_INT 1
64653: NEG
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 3
64661: NEG
64662: PUSH
64663: LD_INT 0
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 3
64672: NEG
64673: PUSH
64674: LD_INT 1
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 4
64683: NEG
64684: PUSH
64685: LD_INT 1
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 5
64694: NEG
64695: PUSH
64696: LD_INT 0
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 5
64705: NEG
64706: PUSH
64707: LD_INT 1
64709: NEG
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: LD_INT 5
64717: NEG
64718: PUSH
64719: LD_INT 2
64721: NEG
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: LD_INT 3
64729: NEG
64730: PUSH
64731: LD_INT 2
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 3
64740: NEG
64741: PUSH
64742: LD_INT 3
64744: NEG
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: LD_INT 3
64752: NEG
64753: PUSH
64754: LD_INT 4
64756: NEG
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 2
64764: NEG
64765: PUSH
64766: LD_INT 3
64768: NEG
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 2
64776: NEG
64777: PUSH
64778: LD_INT 2
64780: NEG
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 3
64788: NEG
64789: PUSH
64790: LD_INT 2
64792: NEG
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 4
64800: NEG
64801: PUSH
64802: LD_INT 3
64804: NEG
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 4
64812: NEG
64813: PUSH
64814: LD_INT 4
64816: NEG
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 2
64824: NEG
64825: PUSH
64826: LD_INT 4
64828: NEG
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: PUSH
64834: LD_INT 4
64836: NEG
64837: PUSH
64838: LD_INT 2
64840: NEG
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 0
64848: PUSH
64849: LD_INT 4
64851: NEG
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: LD_INT 0
64859: PUSH
64860: LD_INT 5
64862: NEG
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 1
64870: PUSH
64871: LD_INT 4
64873: NEG
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 1
64881: PUSH
64882: LD_INT 3
64884: NEG
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 0
64892: PUSH
64893: LD_INT 3
64895: NEG
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 1
64903: NEG
64904: PUSH
64905: LD_INT 4
64907: NEG
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 1
64915: NEG
64916: PUSH
64917: LD_INT 5
64919: NEG
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 2
64927: PUSH
64928: LD_INT 3
64930: NEG
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 2
64938: NEG
64939: PUSH
64940: LD_INT 5
64942: NEG
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 3
64950: PUSH
64951: LD_INT 0
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 3
64960: PUSH
64961: LD_INT 1
64963: NEG
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 4
64971: PUSH
64972: LD_INT 0
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 4
64981: PUSH
64982: LD_INT 1
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 3
64991: PUSH
64992: LD_INT 1
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 2
65001: PUSH
65002: LD_INT 0
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 2
65011: PUSH
65012: LD_INT 1
65014: NEG
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 2
65022: PUSH
65023: LD_INT 2
65025: NEG
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 4
65033: PUSH
65034: LD_INT 2
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 4
65043: PUSH
65044: LD_INT 4
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 4
65053: PUSH
65054: LD_INT 3
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 5
65063: PUSH
65064: LD_INT 4
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 5
65073: PUSH
65074: LD_INT 5
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 4
65083: PUSH
65084: LD_INT 5
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 3
65093: PUSH
65094: LD_INT 4
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 3
65103: PUSH
65104: LD_INT 3
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 5
65113: PUSH
65114: LD_INT 3
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 3
65123: PUSH
65124: LD_INT 5
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65178: LD_ADDR_VAR 0 33
65182: PUSH
65183: LD_INT 4
65185: NEG
65186: PUSH
65187: LD_INT 4
65189: NEG
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 4
65197: NEG
65198: PUSH
65199: LD_INT 5
65201: NEG
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 3
65209: NEG
65210: PUSH
65211: LD_INT 4
65213: NEG
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 3
65221: NEG
65222: PUSH
65223: LD_INT 3
65225: NEG
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 4
65233: NEG
65234: PUSH
65235: LD_INT 3
65237: NEG
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 5
65245: NEG
65246: PUSH
65247: LD_INT 4
65249: NEG
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 5
65257: NEG
65258: PUSH
65259: LD_INT 5
65261: NEG
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 3
65269: NEG
65270: PUSH
65271: LD_INT 5
65273: NEG
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 5
65281: NEG
65282: PUSH
65283: LD_INT 3
65285: NEG
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PUSH
65291: LD_INT 0
65293: PUSH
65294: LD_INT 3
65296: NEG
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 0
65304: PUSH
65305: LD_INT 4
65307: NEG
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 1
65315: PUSH
65316: LD_INT 3
65318: NEG
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 1
65326: PUSH
65327: LD_INT 2
65329: NEG
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 0
65337: PUSH
65338: LD_INT 2
65340: NEG
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 1
65348: NEG
65349: PUSH
65350: LD_INT 3
65352: NEG
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 1
65360: NEG
65361: PUSH
65362: LD_INT 4
65364: NEG
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 2
65372: PUSH
65373: LD_INT 2
65375: NEG
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 2
65383: NEG
65384: PUSH
65385: LD_INT 4
65387: NEG
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 4
65395: PUSH
65396: LD_INT 0
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 4
65405: PUSH
65406: LD_INT 1
65408: NEG
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 5
65416: PUSH
65417: LD_INT 0
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 5
65426: PUSH
65427: LD_INT 1
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 4
65436: PUSH
65437: LD_INT 1
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 3
65446: PUSH
65447: LD_INT 0
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 3
65456: PUSH
65457: LD_INT 1
65459: NEG
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 3
65467: PUSH
65468: LD_INT 2
65470: NEG
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 5
65478: PUSH
65479: LD_INT 2
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 3
65488: PUSH
65489: LD_INT 3
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: LD_INT 3
65498: PUSH
65499: LD_INT 2
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 4
65508: PUSH
65509: LD_INT 3
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 4
65518: PUSH
65519: LD_INT 4
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 3
65528: PUSH
65529: LD_INT 4
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 2
65538: PUSH
65539: LD_INT 3
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: LD_INT 2
65548: PUSH
65549: LD_INT 2
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 4
65558: PUSH
65559: LD_INT 2
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 2
65568: PUSH
65569: LD_INT 4
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 0
65578: PUSH
65579: LD_INT 4
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: LD_INT 0
65588: PUSH
65589: LD_INT 3
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 1
65598: PUSH
65599: LD_INT 4
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 1
65608: PUSH
65609: LD_INT 5
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 0
65618: PUSH
65619: LD_INT 5
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: LD_INT 1
65628: NEG
65629: PUSH
65630: LD_INT 4
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: LD_INT 1
65639: NEG
65640: PUSH
65641: LD_INT 3
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 2
65650: PUSH
65651: LD_INT 5
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 2
65660: NEG
65661: PUSH
65662: LD_INT 3
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65716: LD_ADDR_VAR 0 34
65720: PUSH
65721: LD_INT 0
65723: PUSH
65724: LD_INT 4
65726: NEG
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: LD_INT 0
65734: PUSH
65735: LD_INT 5
65737: NEG
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 1
65745: PUSH
65746: LD_INT 4
65748: NEG
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 1
65756: PUSH
65757: LD_INT 3
65759: NEG
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 0
65767: PUSH
65768: LD_INT 3
65770: NEG
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 1
65778: NEG
65779: PUSH
65780: LD_INT 4
65782: NEG
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: LD_INT 1
65790: NEG
65791: PUSH
65792: LD_INT 5
65794: NEG
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 2
65802: PUSH
65803: LD_INT 3
65805: NEG
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 2
65813: NEG
65814: PUSH
65815: LD_INT 5
65817: NEG
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: PUSH
65823: LD_INT 3
65825: PUSH
65826: LD_INT 0
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 3
65835: PUSH
65836: LD_INT 1
65838: NEG
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: LD_INT 4
65846: PUSH
65847: LD_INT 0
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 4
65856: PUSH
65857: LD_INT 1
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: PUSH
65864: LD_INT 3
65866: PUSH
65867: LD_INT 1
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 2
65876: PUSH
65877: LD_INT 0
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 2
65886: PUSH
65887: LD_INT 1
65889: NEG
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: LD_INT 2
65897: PUSH
65898: LD_INT 2
65900: NEG
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: LD_INT 4
65908: PUSH
65909: LD_INT 2
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 4
65918: PUSH
65919: LD_INT 4
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: LD_INT 4
65928: PUSH
65929: LD_INT 3
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 5
65938: PUSH
65939: LD_INT 4
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: LD_INT 5
65948: PUSH
65949: LD_INT 5
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: LD_INT 4
65958: PUSH
65959: LD_INT 5
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: LD_INT 3
65968: PUSH
65969: LD_INT 4
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: PUSH
65976: LD_INT 3
65978: PUSH
65979: LD_INT 3
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 5
65988: PUSH
65989: LD_INT 3
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 3
65998: PUSH
65999: LD_INT 5
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: LD_INT 0
66008: PUSH
66009: LD_INT 3
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: LD_INT 0
66018: PUSH
66019: LD_INT 2
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: LD_INT 1
66028: PUSH
66029: LD_INT 3
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 1
66038: PUSH
66039: LD_INT 4
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 0
66048: PUSH
66049: LD_INT 4
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 1
66058: NEG
66059: PUSH
66060: LD_INT 3
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 1
66069: NEG
66070: PUSH
66071: LD_INT 2
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 2
66080: PUSH
66081: LD_INT 4
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 2
66090: NEG
66091: PUSH
66092: LD_INT 2
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 4
66101: NEG
66102: PUSH
66103: LD_INT 0
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: PUSH
66110: LD_INT 4
66112: NEG
66113: PUSH
66114: LD_INT 1
66116: NEG
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 3
66124: NEG
66125: PUSH
66126: LD_INT 0
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 3
66135: NEG
66136: PUSH
66137: LD_INT 1
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 4
66146: NEG
66147: PUSH
66148: LD_INT 1
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 5
66157: NEG
66158: PUSH
66159: LD_INT 0
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: PUSH
66166: LD_INT 5
66168: NEG
66169: PUSH
66170: LD_INT 1
66172: NEG
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 5
66180: NEG
66181: PUSH
66182: LD_INT 2
66184: NEG
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 3
66192: NEG
66193: PUSH
66194: LD_INT 2
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: ST_TO_ADDR
// end ; end ;
66248: GO 66251
66250: POP
// case btype of b_depot , b_warehouse :
66251: LD_VAR 0 1
66255: PUSH
66256: LD_INT 0
66258: DOUBLE
66259: EQUAL
66260: IFTRUE 66270
66262: LD_INT 1
66264: DOUBLE
66265: EQUAL
66266: IFTRUE 66270
66268: GO 66471
66270: POP
// case nation of nation_american :
66271: LD_VAR 0 5
66275: PUSH
66276: LD_INT 1
66278: DOUBLE
66279: EQUAL
66280: IFTRUE 66284
66282: GO 66340
66284: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66285: LD_ADDR_VAR 0 9
66289: PUSH
66290: LD_VAR 0 11
66294: PUSH
66295: LD_VAR 0 12
66299: PUSH
66300: LD_VAR 0 13
66304: PUSH
66305: LD_VAR 0 14
66309: PUSH
66310: LD_VAR 0 15
66314: PUSH
66315: LD_VAR 0 16
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: PUSH
66328: LD_VAR 0 4
66332: PUSH
66333: LD_INT 1
66335: PLUS
66336: ARRAY
66337: ST_TO_ADDR
66338: GO 66469
66340: LD_INT 2
66342: DOUBLE
66343: EQUAL
66344: IFTRUE 66348
66346: GO 66404
66348: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66349: LD_ADDR_VAR 0 9
66353: PUSH
66354: LD_VAR 0 17
66358: PUSH
66359: LD_VAR 0 18
66363: PUSH
66364: LD_VAR 0 19
66368: PUSH
66369: LD_VAR 0 20
66373: PUSH
66374: LD_VAR 0 21
66378: PUSH
66379: LD_VAR 0 22
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: PUSH
66392: LD_VAR 0 4
66396: PUSH
66397: LD_INT 1
66399: PLUS
66400: ARRAY
66401: ST_TO_ADDR
66402: GO 66469
66404: LD_INT 3
66406: DOUBLE
66407: EQUAL
66408: IFTRUE 66412
66410: GO 66468
66412: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66413: LD_ADDR_VAR 0 9
66417: PUSH
66418: LD_VAR 0 23
66422: PUSH
66423: LD_VAR 0 24
66427: PUSH
66428: LD_VAR 0 25
66432: PUSH
66433: LD_VAR 0 26
66437: PUSH
66438: LD_VAR 0 27
66442: PUSH
66443: LD_VAR 0 28
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: PUSH
66456: LD_VAR 0 4
66460: PUSH
66461: LD_INT 1
66463: PLUS
66464: ARRAY
66465: ST_TO_ADDR
66466: GO 66469
66468: POP
66469: GO 67024
66471: LD_INT 2
66473: DOUBLE
66474: EQUAL
66475: IFTRUE 66485
66477: LD_INT 3
66479: DOUBLE
66480: EQUAL
66481: IFTRUE 66485
66483: GO 66541
66485: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66486: LD_ADDR_VAR 0 9
66490: PUSH
66491: LD_VAR 0 29
66495: PUSH
66496: LD_VAR 0 30
66500: PUSH
66501: LD_VAR 0 31
66505: PUSH
66506: LD_VAR 0 32
66510: PUSH
66511: LD_VAR 0 33
66515: PUSH
66516: LD_VAR 0 34
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: PUSH
66529: LD_VAR 0 4
66533: PUSH
66534: LD_INT 1
66536: PLUS
66537: ARRAY
66538: ST_TO_ADDR
66539: GO 67024
66541: LD_INT 16
66543: DOUBLE
66544: EQUAL
66545: IFTRUE 66603
66547: LD_INT 17
66549: DOUBLE
66550: EQUAL
66551: IFTRUE 66603
66553: LD_INT 18
66555: DOUBLE
66556: EQUAL
66557: IFTRUE 66603
66559: LD_INT 19
66561: DOUBLE
66562: EQUAL
66563: IFTRUE 66603
66565: LD_INT 22
66567: DOUBLE
66568: EQUAL
66569: IFTRUE 66603
66571: LD_INT 20
66573: DOUBLE
66574: EQUAL
66575: IFTRUE 66603
66577: LD_INT 21
66579: DOUBLE
66580: EQUAL
66581: IFTRUE 66603
66583: LD_INT 23
66585: DOUBLE
66586: EQUAL
66587: IFTRUE 66603
66589: LD_INT 24
66591: DOUBLE
66592: EQUAL
66593: IFTRUE 66603
66595: LD_INT 25
66597: DOUBLE
66598: EQUAL
66599: IFTRUE 66603
66601: GO 66659
66603: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66604: LD_ADDR_VAR 0 9
66608: PUSH
66609: LD_VAR 0 35
66613: PUSH
66614: LD_VAR 0 36
66618: PUSH
66619: LD_VAR 0 37
66623: PUSH
66624: LD_VAR 0 38
66628: PUSH
66629: LD_VAR 0 39
66633: PUSH
66634: LD_VAR 0 40
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: PUSH
66647: LD_VAR 0 4
66651: PUSH
66652: LD_INT 1
66654: PLUS
66655: ARRAY
66656: ST_TO_ADDR
66657: GO 67024
66659: LD_INT 6
66661: DOUBLE
66662: EQUAL
66663: IFTRUE 66715
66665: LD_INT 7
66667: DOUBLE
66668: EQUAL
66669: IFTRUE 66715
66671: LD_INT 8
66673: DOUBLE
66674: EQUAL
66675: IFTRUE 66715
66677: LD_INT 13
66679: DOUBLE
66680: EQUAL
66681: IFTRUE 66715
66683: LD_INT 12
66685: DOUBLE
66686: EQUAL
66687: IFTRUE 66715
66689: LD_INT 15
66691: DOUBLE
66692: EQUAL
66693: IFTRUE 66715
66695: LD_INT 11
66697: DOUBLE
66698: EQUAL
66699: IFTRUE 66715
66701: LD_INT 14
66703: DOUBLE
66704: EQUAL
66705: IFTRUE 66715
66707: LD_INT 10
66709: DOUBLE
66710: EQUAL
66711: IFTRUE 66715
66713: GO 66771
66715: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66716: LD_ADDR_VAR 0 9
66720: PUSH
66721: LD_VAR 0 41
66725: PUSH
66726: LD_VAR 0 42
66730: PUSH
66731: LD_VAR 0 43
66735: PUSH
66736: LD_VAR 0 44
66740: PUSH
66741: LD_VAR 0 45
66745: PUSH
66746: LD_VAR 0 46
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: PUSH
66759: LD_VAR 0 4
66763: PUSH
66764: LD_INT 1
66766: PLUS
66767: ARRAY
66768: ST_TO_ADDR
66769: GO 67024
66771: LD_INT 36
66773: DOUBLE
66774: EQUAL
66775: IFTRUE 66779
66777: GO 66835
66779: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66780: LD_ADDR_VAR 0 9
66784: PUSH
66785: LD_VAR 0 47
66789: PUSH
66790: LD_VAR 0 48
66794: PUSH
66795: LD_VAR 0 49
66799: PUSH
66800: LD_VAR 0 50
66804: PUSH
66805: LD_VAR 0 51
66809: PUSH
66810: LD_VAR 0 52
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: PUSH
66823: LD_VAR 0 4
66827: PUSH
66828: LD_INT 1
66830: PLUS
66831: ARRAY
66832: ST_TO_ADDR
66833: GO 67024
66835: LD_INT 4
66837: DOUBLE
66838: EQUAL
66839: IFTRUE 66861
66841: LD_INT 5
66843: DOUBLE
66844: EQUAL
66845: IFTRUE 66861
66847: LD_INT 34
66849: DOUBLE
66850: EQUAL
66851: IFTRUE 66861
66853: LD_INT 37
66855: DOUBLE
66856: EQUAL
66857: IFTRUE 66861
66859: GO 66917
66861: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66862: LD_ADDR_VAR 0 9
66866: PUSH
66867: LD_VAR 0 53
66871: PUSH
66872: LD_VAR 0 54
66876: PUSH
66877: LD_VAR 0 55
66881: PUSH
66882: LD_VAR 0 56
66886: PUSH
66887: LD_VAR 0 57
66891: PUSH
66892: LD_VAR 0 58
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: PUSH
66905: LD_VAR 0 4
66909: PUSH
66910: LD_INT 1
66912: PLUS
66913: ARRAY
66914: ST_TO_ADDR
66915: GO 67024
66917: LD_INT 31
66919: DOUBLE
66920: EQUAL
66921: IFTRUE 66967
66923: LD_INT 32
66925: DOUBLE
66926: EQUAL
66927: IFTRUE 66967
66929: LD_INT 33
66931: DOUBLE
66932: EQUAL
66933: IFTRUE 66967
66935: LD_INT 27
66937: DOUBLE
66938: EQUAL
66939: IFTRUE 66967
66941: LD_INT 26
66943: DOUBLE
66944: EQUAL
66945: IFTRUE 66967
66947: LD_INT 28
66949: DOUBLE
66950: EQUAL
66951: IFTRUE 66967
66953: LD_INT 29
66955: DOUBLE
66956: EQUAL
66957: IFTRUE 66967
66959: LD_INT 30
66961: DOUBLE
66962: EQUAL
66963: IFTRUE 66967
66965: GO 67023
66967: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66968: LD_ADDR_VAR 0 9
66972: PUSH
66973: LD_VAR 0 59
66977: PUSH
66978: LD_VAR 0 60
66982: PUSH
66983: LD_VAR 0 61
66987: PUSH
66988: LD_VAR 0 62
66992: PUSH
66993: LD_VAR 0 63
66997: PUSH
66998: LD_VAR 0 64
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: LIST
67010: PUSH
67011: LD_VAR 0 4
67015: PUSH
67016: LD_INT 1
67018: PLUS
67019: ARRAY
67020: ST_TO_ADDR
67021: GO 67024
67023: POP
// temp_list2 = [ ] ;
67024: LD_ADDR_VAR 0 10
67028: PUSH
67029: EMPTY
67030: ST_TO_ADDR
// for i in temp_list do
67031: LD_ADDR_VAR 0 8
67035: PUSH
67036: LD_VAR 0 9
67040: PUSH
67041: FOR_IN
67042: IFFALSE 67094
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67044: LD_ADDR_VAR 0 10
67048: PUSH
67049: LD_VAR 0 10
67053: PUSH
67054: LD_VAR 0 8
67058: PUSH
67059: LD_INT 1
67061: ARRAY
67062: PUSH
67063: LD_VAR 0 2
67067: PLUS
67068: PUSH
67069: LD_VAR 0 8
67073: PUSH
67074: LD_INT 2
67076: ARRAY
67077: PUSH
67078: LD_VAR 0 3
67082: PLUS
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: EMPTY
67089: LIST
67090: ADD
67091: ST_TO_ADDR
67092: GO 67041
67094: POP
67095: POP
// result = temp_list2 ;
67096: LD_ADDR_VAR 0 7
67100: PUSH
67101: LD_VAR 0 10
67105: ST_TO_ADDR
// end ;
67106: LD_VAR 0 7
67110: RET
// export function EnemyInRange ( unit , dist ) ; begin
67111: LD_INT 0
67113: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67114: LD_ADDR_VAR 0 3
67118: PUSH
67119: LD_VAR 0 1
67123: PPUSH
67124: CALL_OW 255
67128: PPUSH
67129: LD_VAR 0 1
67133: PPUSH
67134: CALL_OW 250
67138: PPUSH
67139: LD_VAR 0 1
67143: PPUSH
67144: CALL_OW 251
67148: PPUSH
67149: LD_VAR 0 2
67153: PPUSH
67154: CALL 40507 0 4
67158: PUSH
67159: LD_INT 4
67161: ARRAY
67162: ST_TO_ADDR
// end ;
67163: LD_VAR 0 3
67167: RET
// export function PlayerSeeMe ( unit ) ; begin
67168: LD_INT 0
67170: PPUSH
// result := See ( your_side , unit ) ;
67171: LD_ADDR_VAR 0 2
67175: PUSH
67176: LD_OWVAR 2
67180: PPUSH
67181: LD_VAR 0 1
67185: PPUSH
67186: CALL_OW 292
67190: ST_TO_ADDR
// end ;
67191: LD_VAR 0 2
67195: RET
// export function ReverseDir ( unit ) ; begin
67196: LD_INT 0
67198: PPUSH
// if not unit then
67199: LD_VAR 0 1
67203: NOT
67204: IFFALSE 67208
// exit ;
67206: GO 67231
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67208: LD_ADDR_VAR 0 2
67212: PUSH
67213: LD_VAR 0 1
67217: PPUSH
67218: CALL_OW 254
67222: PUSH
67223: LD_INT 3
67225: PLUS
67226: PUSH
67227: LD_INT 6
67229: MOD
67230: ST_TO_ADDR
// end ;
67231: LD_VAR 0 2
67235: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
67236: LD_INT 0
67238: PPUSH
67239: PPUSH
67240: PPUSH
67241: PPUSH
67242: PPUSH
67243: PPUSH
// if not unit or not hexes then
67244: LD_VAR 0 1
67248: NOT
67249: PUSH
67250: LD_VAR 0 2
67254: NOT
67255: OR
67256: IFFALSE 67260
// exit ;
67258: GO 67383
// dist := 9999 ;
67260: LD_ADDR_VAR 0 5
67264: PUSH
67265: LD_INT 9999
67267: ST_TO_ADDR
// for i = 1 to hexes do
67268: LD_ADDR_VAR 0 4
67272: PUSH
67273: DOUBLE
67274: LD_INT 1
67276: DEC
67277: ST_TO_ADDR
67278: LD_VAR 0 2
67282: PUSH
67283: FOR_TO
67284: IFFALSE 67371
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67286: LD_ADDR_VAR 0 6
67290: PUSH
67291: LD_VAR 0 1
67295: PPUSH
67296: LD_VAR 0 2
67300: PUSH
67301: LD_VAR 0 4
67305: ARRAY
67306: PUSH
67307: LD_INT 1
67309: ARRAY
67310: PPUSH
67311: LD_VAR 0 2
67315: PUSH
67316: LD_VAR 0 4
67320: ARRAY
67321: PUSH
67322: LD_INT 2
67324: ARRAY
67325: PPUSH
67326: CALL_OW 297
67330: ST_TO_ADDR
// if tdist < dist then
67331: LD_VAR 0 6
67335: PUSH
67336: LD_VAR 0 5
67340: LESS
67341: IFFALSE 67369
// begin hex := hexes [ i ] ;
67343: LD_ADDR_VAR 0 8
67347: PUSH
67348: LD_VAR 0 2
67352: PUSH
67353: LD_VAR 0 4
67357: ARRAY
67358: ST_TO_ADDR
// dist := tdist ;
67359: LD_ADDR_VAR 0 5
67363: PUSH
67364: LD_VAR 0 6
67368: ST_TO_ADDR
// end ; end ;
67369: GO 67283
67371: POP
67372: POP
// result := hex ;
67373: LD_ADDR_VAR 0 3
67377: PUSH
67378: LD_VAR 0 8
67382: ST_TO_ADDR
// end ;
67383: LD_VAR 0 3
67387: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67388: LD_INT 0
67390: PPUSH
67391: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67392: LD_VAR 0 1
67396: NOT
67397: PUSH
67398: LD_VAR 0 1
67402: PUSH
67403: LD_INT 21
67405: PUSH
67406: LD_INT 2
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PUSH
67413: LD_INT 23
67415: PUSH
67416: LD_INT 2
67418: PUSH
67419: EMPTY
67420: LIST
67421: LIST
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PPUSH
67427: CALL_OW 69
67431: IN
67432: NOT
67433: OR
67434: IFFALSE 67438
// exit ;
67436: GO 67485
// for i = 1 to 3 do
67438: LD_ADDR_VAR 0 3
67442: PUSH
67443: DOUBLE
67444: LD_INT 1
67446: DEC
67447: ST_TO_ADDR
67448: LD_INT 3
67450: PUSH
67451: FOR_TO
67452: IFFALSE 67483
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67454: LD_VAR 0 1
67458: PPUSH
67459: CALL_OW 250
67463: PPUSH
67464: LD_VAR 0 1
67468: PPUSH
67469: CALL_OW 251
67473: PPUSH
67474: LD_INT 1
67476: PPUSH
67477: CALL_OW 453
67481: GO 67451
67483: POP
67484: POP
// end ;
67485: LD_VAR 0 2
67489: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67490: LD_INT 0
67492: PPUSH
67493: PPUSH
67494: PPUSH
67495: PPUSH
67496: PPUSH
67497: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
67498: LD_VAR 0 1
67502: NOT
67503: PUSH
67504: LD_VAR 0 2
67508: NOT
67509: OR
67510: PUSH
67511: LD_VAR 0 1
67515: PPUSH
67516: CALL_OW 314
67520: OR
67521: IFFALSE 67525
// exit ;
67523: GO 67966
// x := GetX ( enemy_unit ) ;
67525: LD_ADDR_VAR 0 7
67529: PUSH
67530: LD_VAR 0 2
67534: PPUSH
67535: CALL_OW 250
67539: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67540: LD_ADDR_VAR 0 8
67544: PUSH
67545: LD_VAR 0 2
67549: PPUSH
67550: CALL_OW 251
67554: ST_TO_ADDR
// if not x or not y then
67555: LD_VAR 0 7
67559: NOT
67560: PUSH
67561: LD_VAR 0 8
67565: NOT
67566: OR
67567: IFFALSE 67571
// exit ;
67569: GO 67966
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67571: LD_ADDR_VAR 0 6
67575: PUSH
67576: LD_VAR 0 7
67580: PPUSH
67581: LD_INT 0
67583: PPUSH
67584: LD_INT 4
67586: PPUSH
67587: CALL_OW 272
67591: PUSH
67592: LD_VAR 0 8
67596: PPUSH
67597: LD_INT 0
67599: PPUSH
67600: LD_INT 4
67602: PPUSH
67603: CALL_OW 273
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: LD_VAR 0 7
67616: PPUSH
67617: LD_INT 1
67619: PPUSH
67620: LD_INT 4
67622: PPUSH
67623: CALL_OW 272
67627: PUSH
67628: LD_VAR 0 8
67632: PPUSH
67633: LD_INT 1
67635: PPUSH
67636: LD_INT 4
67638: PPUSH
67639: CALL_OW 273
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_VAR 0 7
67652: PPUSH
67653: LD_INT 2
67655: PPUSH
67656: LD_INT 4
67658: PPUSH
67659: CALL_OW 272
67663: PUSH
67664: LD_VAR 0 8
67668: PPUSH
67669: LD_INT 2
67671: PPUSH
67672: LD_INT 4
67674: PPUSH
67675: CALL_OW 273
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: LD_VAR 0 7
67688: PPUSH
67689: LD_INT 3
67691: PPUSH
67692: LD_INT 4
67694: PPUSH
67695: CALL_OW 272
67699: PUSH
67700: LD_VAR 0 8
67704: PPUSH
67705: LD_INT 3
67707: PPUSH
67708: LD_INT 4
67710: PPUSH
67711: CALL_OW 273
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PUSH
67720: LD_VAR 0 7
67724: PPUSH
67725: LD_INT 4
67727: PPUSH
67728: LD_INT 4
67730: PPUSH
67731: CALL_OW 272
67735: PUSH
67736: LD_VAR 0 8
67740: PPUSH
67741: LD_INT 4
67743: PPUSH
67744: LD_INT 4
67746: PPUSH
67747: CALL_OW 273
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: PUSH
67756: LD_VAR 0 7
67760: PPUSH
67761: LD_INT 5
67763: PPUSH
67764: LD_INT 4
67766: PPUSH
67767: CALL_OW 272
67771: PUSH
67772: LD_VAR 0 8
67776: PPUSH
67777: LD_INT 5
67779: PPUSH
67780: LD_INT 4
67782: PPUSH
67783: CALL_OW 273
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: ST_TO_ADDR
// for i = tmp downto 1 do
67800: LD_ADDR_VAR 0 4
67804: PUSH
67805: DOUBLE
67806: LD_VAR 0 6
67810: INC
67811: ST_TO_ADDR
67812: LD_INT 1
67814: PUSH
67815: FOR_DOWNTO
67816: IFFALSE 67917
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67818: LD_VAR 0 6
67822: PUSH
67823: LD_VAR 0 4
67827: ARRAY
67828: PUSH
67829: LD_INT 1
67831: ARRAY
67832: PPUSH
67833: LD_VAR 0 6
67837: PUSH
67838: LD_VAR 0 4
67842: ARRAY
67843: PUSH
67844: LD_INT 2
67846: ARRAY
67847: PPUSH
67848: CALL_OW 488
67852: NOT
67853: PUSH
67854: LD_VAR 0 6
67858: PUSH
67859: LD_VAR 0 4
67863: ARRAY
67864: PUSH
67865: LD_INT 1
67867: ARRAY
67868: PPUSH
67869: LD_VAR 0 6
67873: PUSH
67874: LD_VAR 0 4
67878: ARRAY
67879: PUSH
67880: LD_INT 2
67882: ARRAY
67883: PPUSH
67884: CALL_OW 428
67888: PUSH
67889: LD_INT 0
67891: NONEQUAL
67892: OR
67893: IFFALSE 67915
// tmp := Delete ( tmp , i ) ;
67895: LD_ADDR_VAR 0 6
67899: PUSH
67900: LD_VAR 0 6
67904: PPUSH
67905: LD_VAR 0 4
67909: PPUSH
67910: CALL_OW 3
67914: ST_TO_ADDR
67915: GO 67815
67917: POP
67918: POP
// j := GetClosestHex ( unit , tmp ) ;
67919: LD_ADDR_VAR 0 5
67923: PUSH
67924: LD_VAR 0 1
67928: PPUSH
67929: LD_VAR 0 6
67933: PPUSH
67934: CALL 67236 0 2
67938: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67939: LD_VAR 0 1
67943: PPUSH
67944: LD_VAR 0 5
67948: PUSH
67949: LD_INT 1
67951: ARRAY
67952: PPUSH
67953: LD_VAR 0 5
67957: PUSH
67958: LD_INT 2
67960: ARRAY
67961: PPUSH
67962: CALL_OW 111
// end ;
67966: LD_VAR 0 3
67970: RET
// export function PrepareApemanSoldier ( ) ; begin
67971: LD_INT 0
67973: PPUSH
// uc_nation := 0 ;
67974: LD_ADDR_OWVAR 21
67978: PUSH
67979: LD_INT 0
67981: ST_TO_ADDR
// hc_sex := sex_male ;
67982: LD_ADDR_OWVAR 27
67986: PUSH
67987: LD_INT 1
67989: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
67990: LD_ADDR_OWVAR 28
67994: PUSH
67995: LD_INT 15
67997: ST_TO_ADDR
// hc_gallery :=  ;
67998: LD_ADDR_OWVAR 33
68002: PUSH
68003: LD_STRING 
68005: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68006: LD_ADDR_OWVAR 31
68010: PUSH
68011: LD_INT 0
68013: PPUSH
68014: LD_INT 3
68016: PPUSH
68017: CALL_OW 12
68021: PUSH
68022: LD_INT 0
68024: PPUSH
68025: LD_INT 3
68027: PPUSH
68028: CALL_OW 12
68032: PUSH
68033: LD_INT 0
68035: PUSH
68036: LD_INT 0
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: ST_TO_ADDR
// end ;
68045: LD_VAR 0 1
68049: RET
// export function PrepareApemanEngineer ( ) ; begin
68050: LD_INT 0
68052: PPUSH
// uc_nation := 0 ;
68053: LD_ADDR_OWVAR 21
68057: PUSH
68058: LD_INT 0
68060: ST_TO_ADDR
// hc_sex := sex_male ;
68061: LD_ADDR_OWVAR 27
68065: PUSH
68066: LD_INT 1
68068: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
68069: LD_ADDR_OWVAR 28
68073: PUSH
68074: LD_INT 16
68076: ST_TO_ADDR
// hc_gallery :=  ;
68077: LD_ADDR_OWVAR 33
68081: PUSH
68082: LD_STRING 
68084: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68085: LD_ADDR_OWVAR 31
68089: PUSH
68090: LD_INT 0
68092: PPUSH
68093: LD_INT 3
68095: PPUSH
68096: CALL_OW 12
68100: PUSH
68101: LD_INT 0
68103: PPUSH
68104: LD_INT 3
68106: PPUSH
68107: CALL_OW 12
68111: PUSH
68112: LD_INT 0
68114: PUSH
68115: LD_INT 0
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: ST_TO_ADDR
// end ;
68124: LD_VAR 0 1
68128: RET
// export function PrepareApeman ( agressivity ) ; begin
68129: LD_INT 0
68131: PPUSH
// uc_side := 0 ;
68132: LD_ADDR_OWVAR 20
68136: PUSH
68137: LD_INT 0
68139: ST_TO_ADDR
// uc_nation := 0 ;
68140: LD_ADDR_OWVAR 21
68144: PUSH
68145: LD_INT 0
68147: ST_TO_ADDR
// hc_sex := sex_male ;
68148: LD_ADDR_OWVAR 27
68152: PUSH
68153: LD_INT 1
68155: ST_TO_ADDR
// hc_class := class_apeman ;
68156: LD_ADDR_OWVAR 28
68160: PUSH
68161: LD_INT 12
68163: ST_TO_ADDR
// hc_gallery :=  ;
68164: LD_ADDR_OWVAR 33
68168: PUSH
68169: LD_STRING 
68171: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68172: LD_ADDR_OWVAR 35
68176: PUSH
68177: LD_VAR 0 1
68181: NEG
68182: PPUSH
68183: LD_VAR 0 1
68187: PPUSH
68188: CALL_OW 12
68192: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68193: LD_ADDR_OWVAR 31
68197: PUSH
68198: LD_INT 0
68200: PPUSH
68201: LD_INT 3
68203: PPUSH
68204: CALL_OW 12
68208: PUSH
68209: LD_INT 0
68211: PPUSH
68212: LD_INT 3
68214: PPUSH
68215: CALL_OW 12
68219: PUSH
68220: LD_INT 0
68222: PUSH
68223: LD_INT 0
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: LIST
68230: LIST
68231: ST_TO_ADDR
// end ;
68232: LD_VAR 0 2
68236: RET
// export function PrepareTiger ( agressivity ) ; begin
68237: LD_INT 0
68239: PPUSH
// uc_side := 0 ;
68240: LD_ADDR_OWVAR 20
68244: PUSH
68245: LD_INT 0
68247: ST_TO_ADDR
// uc_nation := 0 ;
68248: LD_ADDR_OWVAR 21
68252: PUSH
68253: LD_INT 0
68255: ST_TO_ADDR
// hc_class := class_tiger ;
68256: LD_ADDR_OWVAR 28
68260: PUSH
68261: LD_INT 14
68263: ST_TO_ADDR
// hc_gallery :=  ;
68264: LD_ADDR_OWVAR 33
68268: PUSH
68269: LD_STRING 
68271: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68272: LD_ADDR_OWVAR 35
68276: PUSH
68277: LD_VAR 0 1
68281: NEG
68282: PPUSH
68283: LD_VAR 0 1
68287: PPUSH
68288: CALL_OW 12
68292: ST_TO_ADDR
// end ;
68293: LD_VAR 0 2
68297: RET
// export function PrepareEnchidna ( ) ; begin
68298: LD_INT 0
68300: PPUSH
// uc_side := 0 ;
68301: LD_ADDR_OWVAR 20
68305: PUSH
68306: LD_INT 0
68308: ST_TO_ADDR
// uc_nation := 0 ;
68309: LD_ADDR_OWVAR 21
68313: PUSH
68314: LD_INT 0
68316: ST_TO_ADDR
// hc_class := class_baggie ;
68317: LD_ADDR_OWVAR 28
68321: PUSH
68322: LD_INT 13
68324: ST_TO_ADDR
// hc_gallery :=  ;
68325: LD_ADDR_OWVAR 33
68329: PUSH
68330: LD_STRING 
68332: ST_TO_ADDR
// end ;
68333: LD_VAR 0 1
68337: RET
// export function PrepareFrog ( ) ; begin
68338: LD_INT 0
68340: PPUSH
// uc_side := 0 ;
68341: LD_ADDR_OWVAR 20
68345: PUSH
68346: LD_INT 0
68348: ST_TO_ADDR
// uc_nation := 0 ;
68349: LD_ADDR_OWVAR 21
68353: PUSH
68354: LD_INT 0
68356: ST_TO_ADDR
// hc_class := class_frog ;
68357: LD_ADDR_OWVAR 28
68361: PUSH
68362: LD_INT 19
68364: ST_TO_ADDR
// hc_gallery :=  ;
68365: LD_ADDR_OWVAR 33
68369: PUSH
68370: LD_STRING 
68372: ST_TO_ADDR
// end ;
68373: LD_VAR 0 1
68377: RET
// export function PrepareFish ( ) ; begin
68378: LD_INT 0
68380: PPUSH
// uc_side := 0 ;
68381: LD_ADDR_OWVAR 20
68385: PUSH
68386: LD_INT 0
68388: ST_TO_ADDR
// uc_nation := 0 ;
68389: LD_ADDR_OWVAR 21
68393: PUSH
68394: LD_INT 0
68396: ST_TO_ADDR
// hc_class := class_fish ;
68397: LD_ADDR_OWVAR 28
68401: PUSH
68402: LD_INT 20
68404: ST_TO_ADDR
// hc_gallery :=  ;
68405: LD_ADDR_OWVAR 33
68409: PUSH
68410: LD_STRING 
68412: ST_TO_ADDR
// end ;
68413: LD_VAR 0 1
68417: RET
// export function PrepareBird ( ) ; begin
68418: LD_INT 0
68420: PPUSH
// uc_side := 0 ;
68421: LD_ADDR_OWVAR 20
68425: PUSH
68426: LD_INT 0
68428: ST_TO_ADDR
// uc_nation := 0 ;
68429: LD_ADDR_OWVAR 21
68433: PUSH
68434: LD_INT 0
68436: ST_TO_ADDR
// hc_class := class_phororhacos ;
68437: LD_ADDR_OWVAR 28
68441: PUSH
68442: LD_INT 18
68444: ST_TO_ADDR
// hc_gallery :=  ;
68445: LD_ADDR_OWVAR 33
68449: PUSH
68450: LD_STRING 
68452: ST_TO_ADDR
// end ;
68453: LD_VAR 0 1
68457: RET
// export function PrepareHorse ( ) ; begin
68458: LD_INT 0
68460: PPUSH
// uc_side := 0 ;
68461: LD_ADDR_OWVAR 20
68465: PUSH
68466: LD_INT 0
68468: ST_TO_ADDR
// uc_nation := 0 ;
68469: LD_ADDR_OWVAR 21
68473: PUSH
68474: LD_INT 0
68476: ST_TO_ADDR
// hc_class := class_horse ;
68477: LD_ADDR_OWVAR 28
68481: PUSH
68482: LD_INT 21
68484: ST_TO_ADDR
// hc_gallery :=  ;
68485: LD_ADDR_OWVAR 33
68489: PUSH
68490: LD_STRING 
68492: ST_TO_ADDR
// end ;
68493: LD_VAR 0 1
68497: RET
// export function PrepareMastodont ( ) ; begin
68498: LD_INT 0
68500: PPUSH
// uc_side := 0 ;
68501: LD_ADDR_OWVAR 20
68505: PUSH
68506: LD_INT 0
68508: ST_TO_ADDR
// uc_nation := 0 ;
68509: LD_ADDR_OWVAR 21
68513: PUSH
68514: LD_INT 0
68516: ST_TO_ADDR
// vc_chassis := class_mastodont ;
68517: LD_ADDR_OWVAR 37
68521: PUSH
68522: LD_INT 31
68524: ST_TO_ADDR
// vc_control := control_rider ;
68525: LD_ADDR_OWVAR 38
68529: PUSH
68530: LD_INT 4
68532: ST_TO_ADDR
// end ;
68533: LD_VAR 0 1
68537: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68538: LD_INT 0
68540: PPUSH
68541: PPUSH
68542: PPUSH
// uc_side = 0 ;
68543: LD_ADDR_OWVAR 20
68547: PUSH
68548: LD_INT 0
68550: ST_TO_ADDR
// uc_nation = 0 ;
68551: LD_ADDR_OWVAR 21
68555: PUSH
68556: LD_INT 0
68558: ST_TO_ADDR
// InitHc_All ( ) ;
68559: CALL_OW 584
// InitVc ;
68563: CALL_OW 20
// if mastodonts then
68567: LD_VAR 0 6
68571: IFFALSE 68638
// for i = 1 to mastodonts do
68573: LD_ADDR_VAR 0 11
68577: PUSH
68578: DOUBLE
68579: LD_INT 1
68581: DEC
68582: ST_TO_ADDR
68583: LD_VAR 0 6
68587: PUSH
68588: FOR_TO
68589: IFFALSE 68636
// begin vc_chassis := 31 ;
68591: LD_ADDR_OWVAR 37
68595: PUSH
68596: LD_INT 31
68598: ST_TO_ADDR
// vc_control := control_rider ;
68599: LD_ADDR_OWVAR 38
68603: PUSH
68604: LD_INT 4
68606: ST_TO_ADDR
// animal := CreateVehicle ;
68607: LD_ADDR_VAR 0 12
68611: PUSH
68612: CALL_OW 45
68616: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68617: LD_VAR 0 12
68621: PPUSH
68622: LD_VAR 0 8
68626: PPUSH
68627: LD_INT 0
68629: PPUSH
68630: CALL 70773 0 3
// end ;
68634: GO 68588
68636: POP
68637: POP
// if horses then
68638: LD_VAR 0 5
68642: IFFALSE 68709
// for i = 1 to horses do
68644: LD_ADDR_VAR 0 11
68648: PUSH
68649: DOUBLE
68650: LD_INT 1
68652: DEC
68653: ST_TO_ADDR
68654: LD_VAR 0 5
68658: PUSH
68659: FOR_TO
68660: IFFALSE 68707
// begin hc_class := 21 ;
68662: LD_ADDR_OWVAR 28
68666: PUSH
68667: LD_INT 21
68669: ST_TO_ADDR
// hc_gallery :=  ;
68670: LD_ADDR_OWVAR 33
68674: PUSH
68675: LD_STRING 
68677: ST_TO_ADDR
// animal := CreateHuman ;
68678: LD_ADDR_VAR 0 12
68682: PUSH
68683: CALL_OW 44
68687: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68688: LD_VAR 0 12
68692: PPUSH
68693: LD_VAR 0 8
68697: PPUSH
68698: LD_INT 0
68700: PPUSH
68701: CALL 70773 0 3
// end ;
68705: GO 68659
68707: POP
68708: POP
// if birds then
68709: LD_VAR 0 1
68713: IFFALSE 68780
// for i = 1 to birds do
68715: LD_ADDR_VAR 0 11
68719: PUSH
68720: DOUBLE
68721: LD_INT 1
68723: DEC
68724: ST_TO_ADDR
68725: LD_VAR 0 1
68729: PUSH
68730: FOR_TO
68731: IFFALSE 68778
// begin hc_class = 18 ;
68733: LD_ADDR_OWVAR 28
68737: PUSH
68738: LD_INT 18
68740: ST_TO_ADDR
// hc_gallery =  ;
68741: LD_ADDR_OWVAR 33
68745: PUSH
68746: LD_STRING 
68748: ST_TO_ADDR
// animal := CreateHuman ;
68749: LD_ADDR_VAR 0 12
68753: PUSH
68754: CALL_OW 44
68758: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68759: LD_VAR 0 12
68763: PPUSH
68764: LD_VAR 0 8
68768: PPUSH
68769: LD_INT 0
68771: PPUSH
68772: CALL 70773 0 3
// end ;
68776: GO 68730
68778: POP
68779: POP
// if tigers then
68780: LD_VAR 0 2
68784: IFFALSE 68868
// for i = 1 to tigers do
68786: LD_ADDR_VAR 0 11
68790: PUSH
68791: DOUBLE
68792: LD_INT 1
68794: DEC
68795: ST_TO_ADDR
68796: LD_VAR 0 2
68800: PUSH
68801: FOR_TO
68802: IFFALSE 68866
// begin hc_class = class_tiger ;
68804: LD_ADDR_OWVAR 28
68808: PUSH
68809: LD_INT 14
68811: ST_TO_ADDR
// hc_gallery =  ;
68812: LD_ADDR_OWVAR 33
68816: PUSH
68817: LD_STRING 
68819: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68820: LD_ADDR_OWVAR 35
68824: PUSH
68825: LD_INT 7
68827: NEG
68828: PPUSH
68829: LD_INT 7
68831: PPUSH
68832: CALL_OW 12
68836: ST_TO_ADDR
// animal := CreateHuman ;
68837: LD_ADDR_VAR 0 12
68841: PUSH
68842: CALL_OW 44
68846: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68847: LD_VAR 0 12
68851: PPUSH
68852: LD_VAR 0 8
68856: PPUSH
68857: LD_INT 0
68859: PPUSH
68860: CALL 70773 0 3
// end ;
68864: GO 68801
68866: POP
68867: POP
// if apemans then
68868: LD_VAR 0 3
68872: IFFALSE 68995
// for i = 1 to apemans do
68874: LD_ADDR_VAR 0 11
68878: PUSH
68879: DOUBLE
68880: LD_INT 1
68882: DEC
68883: ST_TO_ADDR
68884: LD_VAR 0 3
68888: PUSH
68889: FOR_TO
68890: IFFALSE 68993
// begin hc_class = class_apeman ;
68892: LD_ADDR_OWVAR 28
68896: PUSH
68897: LD_INT 12
68899: ST_TO_ADDR
// hc_gallery =  ;
68900: LD_ADDR_OWVAR 33
68904: PUSH
68905: LD_STRING 
68907: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
68908: LD_ADDR_OWVAR 35
68912: PUSH
68913: LD_INT 2
68915: NEG
68916: PPUSH
68917: LD_INT 2
68919: PPUSH
68920: CALL_OW 12
68924: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68925: LD_ADDR_OWVAR 31
68929: PUSH
68930: LD_INT 1
68932: PPUSH
68933: LD_INT 3
68935: PPUSH
68936: CALL_OW 12
68940: PUSH
68941: LD_INT 1
68943: PPUSH
68944: LD_INT 3
68946: PPUSH
68947: CALL_OW 12
68951: PUSH
68952: LD_INT 0
68954: PUSH
68955: LD_INT 0
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: ST_TO_ADDR
// animal := CreateHuman ;
68964: LD_ADDR_VAR 0 12
68968: PUSH
68969: CALL_OW 44
68973: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68974: LD_VAR 0 12
68978: PPUSH
68979: LD_VAR 0 8
68983: PPUSH
68984: LD_INT 0
68986: PPUSH
68987: CALL 70773 0 3
// end ;
68991: GO 68889
68993: POP
68994: POP
// if enchidnas then
68995: LD_VAR 0 4
68999: IFFALSE 69066
// for i = 1 to enchidnas do
69001: LD_ADDR_VAR 0 11
69005: PUSH
69006: DOUBLE
69007: LD_INT 1
69009: DEC
69010: ST_TO_ADDR
69011: LD_VAR 0 4
69015: PUSH
69016: FOR_TO
69017: IFFALSE 69064
// begin hc_class = 13 ;
69019: LD_ADDR_OWVAR 28
69023: PUSH
69024: LD_INT 13
69026: ST_TO_ADDR
// hc_gallery =  ;
69027: LD_ADDR_OWVAR 33
69031: PUSH
69032: LD_STRING 
69034: ST_TO_ADDR
// animal := CreateHuman ;
69035: LD_ADDR_VAR 0 12
69039: PUSH
69040: CALL_OW 44
69044: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69045: LD_VAR 0 12
69049: PPUSH
69050: LD_VAR 0 8
69054: PPUSH
69055: LD_INT 0
69057: PPUSH
69058: CALL 70773 0 3
// end ;
69062: GO 69016
69064: POP
69065: POP
// if fishes then
69066: LD_VAR 0 7
69070: IFFALSE 69137
// for i = 1 to fishes do
69072: LD_ADDR_VAR 0 11
69076: PUSH
69077: DOUBLE
69078: LD_INT 1
69080: DEC
69081: ST_TO_ADDR
69082: LD_VAR 0 7
69086: PUSH
69087: FOR_TO
69088: IFFALSE 69135
// begin hc_class = 20 ;
69090: LD_ADDR_OWVAR 28
69094: PUSH
69095: LD_INT 20
69097: ST_TO_ADDR
// hc_gallery =  ;
69098: LD_ADDR_OWVAR 33
69102: PUSH
69103: LD_STRING 
69105: ST_TO_ADDR
// animal := CreateHuman ;
69106: LD_ADDR_VAR 0 12
69110: PUSH
69111: CALL_OW 44
69115: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69116: LD_VAR 0 12
69120: PPUSH
69121: LD_VAR 0 9
69125: PPUSH
69126: LD_INT 0
69128: PPUSH
69129: CALL 70773 0 3
// end ;
69133: GO 69087
69135: POP
69136: POP
// end ;
69137: LD_VAR 0 10
69141: RET
// export function WantHeal ( sci , unit ) ; begin
69142: LD_INT 0
69144: PPUSH
// if GetTaskList ( sci ) > 0 then
69145: LD_VAR 0 1
69149: PPUSH
69150: CALL_OW 437
69154: PUSH
69155: LD_INT 0
69157: GREATER
69158: IFFALSE 69228
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69160: LD_VAR 0 1
69164: PPUSH
69165: CALL_OW 437
69169: PUSH
69170: LD_INT 1
69172: ARRAY
69173: PUSH
69174: LD_INT 1
69176: ARRAY
69177: PUSH
69178: LD_STRING l
69180: EQUAL
69181: PUSH
69182: LD_VAR 0 1
69186: PPUSH
69187: CALL_OW 437
69191: PUSH
69192: LD_INT 1
69194: ARRAY
69195: PUSH
69196: LD_INT 4
69198: ARRAY
69199: PUSH
69200: LD_VAR 0 2
69204: EQUAL
69205: AND
69206: IFFALSE 69218
// result := true else
69208: LD_ADDR_VAR 0 3
69212: PUSH
69213: LD_INT 1
69215: ST_TO_ADDR
69216: GO 69226
// result := false ;
69218: LD_ADDR_VAR 0 3
69222: PUSH
69223: LD_INT 0
69225: ST_TO_ADDR
// end else
69226: GO 69236
// result := false ;
69228: LD_ADDR_VAR 0 3
69232: PUSH
69233: LD_INT 0
69235: ST_TO_ADDR
// end ;
69236: LD_VAR 0 3
69240: RET
// export function HealTarget ( sci ) ; begin
69241: LD_INT 0
69243: PPUSH
// if not sci then
69244: LD_VAR 0 1
69248: NOT
69249: IFFALSE 69253
// exit ;
69251: GO 69318
// result := 0 ;
69253: LD_ADDR_VAR 0 2
69257: PUSH
69258: LD_INT 0
69260: ST_TO_ADDR
// if GetTaskList ( sci ) then
69261: LD_VAR 0 1
69265: PPUSH
69266: CALL_OW 437
69270: IFFALSE 69318
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69272: LD_VAR 0 1
69276: PPUSH
69277: CALL_OW 437
69281: PUSH
69282: LD_INT 1
69284: ARRAY
69285: PUSH
69286: LD_INT 1
69288: ARRAY
69289: PUSH
69290: LD_STRING l
69292: EQUAL
69293: IFFALSE 69318
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69295: LD_ADDR_VAR 0 2
69299: PUSH
69300: LD_VAR 0 1
69304: PPUSH
69305: CALL_OW 437
69309: PUSH
69310: LD_INT 1
69312: ARRAY
69313: PUSH
69314: LD_INT 4
69316: ARRAY
69317: ST_TO_ADDR
// end ;
69318: LD_VAR 0 2
69322: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69323: LD_INT 0
69325: PPUSH
69326: PPUSH
69327: PPUSH
69328: PPUSH
// if not base_units then
69329: LD_VAR 0 1
69333: NOT
69334: IFFALSE 69338
// exit ;
69336: GO 69425
// result := false ;
69338: LD_ADDR_VAR 0 2
69342: PUSH
69343: LD_INT 0
69345: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69346: LD_ADDR_VAR 0 5
69350: PUSH
69351: LD_VAR 0 1
69355: PPUSH
69356: LD_INT 21
69358: PUSH
69359: LD_INT 3
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: PPUSH
69366: CALL_OW 72
69370: ST_TO_ADDR
// if not tmp then
69371: LD_VAR 0 5
69375: NOT
69376: IFFALSE 69380
// exit ;
69378: GO 69425
// for i in tmp do
69380: LD_ADDR_VAR 0 3
69384: PUSH
69385: LD_VAR 0 5
69389: PUSH
69390: FOR_IN
69391: IFFALSE 69423
// begin result := EnemyInRange ( i , 22 ) ;
69393: LD_ADDR_VAR 0 2
69397: PUSH
69398: LD_VAR 0 3
69402: PPUSH
69403: LD_INT 22
69405: PPUSH
69406: CALL 67111 0 2
69410: ST_TO_ADDR
// if result then
69411: LD_VAR 0 2
69415: IFFALSE 69421
// exit ;
69417: POP
69418: POP
69419: GO 69425
// end ;
69421: GO 69390
69423: POP
69424: POP
// end ;
69425: LD_VAR 0 2
69429: RET
// export function FilterByTag ( units , tag ) ; begin
69430: LD_INT 0
69432: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
69433: LD_ADDR_VAR 0 3
69437: PUSH
69438: LD_VAR 0 1
69442: PPUSH
69443: LD_INT 120
69445: PUSH
69446: LD_VAR 0 2
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: PPUSH
69455: CALL_OW 72
69459: ST_TO_ADDR
// end ;
69460: LD_VAR 0 3
69464: RET
// export function IsDriver ( un ) ; begin
69465: LD_INT 0
69467: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69468: LD_ADDR_VAR 0 2
69472: PUSH
69473: LD_VAR 0 1
69477: PUSH
69478: LD_INT 55
69480: PUSH
69481: EMPTY
69482: LIST
69483: PPUSH
69484: CALL_OW 69
69488: IN
69489: ST_TO_ADDR
// end ;
69490: LD_VAR 0 2
69494: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69495: LD_INT 0
69497: PPUSH
69498: PPUSH
// list := [ ] ;
69499: LD_ADDR_VAR 0 5
69503: PUSH
69504: EMPTY
69505: ST_TO_ADDR
// case d of 0 :
69506: LD_VAR 0 3
69510: PUSH
69511: LD_INT 0
69513: DOUBLE
69514: EQUAL
69515: IFTRUE 69519
69517: GO 69652
69519: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69520: LD_ADDR_VAR 0 5
69524: PUSH
69525: LD_VAR 0 1
69529: PUSH
69530: LD_INT 4
69532: MINUS
69533: PUSH
69534: LD_VAR 0 2
69538: PUSH
69539: LD_INT 4
69541: MINUS
69542: PUSH
69543: LD_INT 2
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: LIST
69550: PUSH
69551: LD_VAR 0 1
69555: PUSH
69556: LD_INT 3
69558: MINUS
69559: PUSH
69560: LD_VAR 0 2
69564: PUSH
69565: LD_INT 1
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: LIST
69572: PUSH
69573: LD_VAR 0 1
69577: PUSH
69578: LD_INT 4
69580: PLUS
69581: PUSH
69582: LD_VAR 0 2
69586: PUSH
69587: LD_INT 4
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: LIST
69594: PUSH
69595: LD_VAR 0 1
69599: PUSH
69600: LD_INT 3
69602: PLUS
69603: PUSH
69604: LD_VAR 0 2
69608: PUSH
69609: LD_INT 3
69611: PLUS
69612: PUSH
69613: LD_INT 5
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: LIST
69620: PUSH
69621: LD_VAR 0 1
69625: PUSH
69626: LD_VAR 0 2
69630: PUSH
69631: LD_INT 4
69633: PLUS
69634: PUSH
69635: LD_INT 0
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: LIST
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: LIST
69649: ST_TO_ADDR
// end ; 1 :
69650: GO 70350
69652: LD_INT 1
69654: DOUBLE
69655: EQUAL
69656: IFTRUE 69660
69658: GO 69793
69660: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69661: LD_ADDR_VAR 0 5
69665: PUSH
69666: LD_VAR 0 1
69670: PUSH
69671: LD_VAR 0 2
69675: PUSH
69676: LD_INT 4
69678: MINUS
69679: PUSH
69680: LD_INT 3
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: LIST
69687: PUSH
69688: LD_VAR 0 1
69692: PUSH
69693: LD_INT 3
69695: MINUS
69696: PUSH
69697: LD_VAR 0 2
69701: PUSH
69702: LD_INT 3
69704: MINUS
69705: PUSH
69706: LD_INT 2
69708: PUSH
69709: EMPTY
69710: LIST
69711: LIST
69712: LIST
69713: PUSH
69714: LD_VAR 0 1
69718: PUSH
69719: LD_INT 4
69721: MINUS
69722: PUSH
69723: LD_VAR 0 2
69727: PUSH
69728: LD_INT 1
69730: PUSH
69731: EMPTY
69732: LIST
69733: LIST
69734: LIST
69735: PUSH
69736: LD_VAR 0 1
69740: PUSH
69741: LD_VAR 0 2
69745: PUSH
69746: LD_INT 3
69748: PLUS
69749: PUSH
69750: LD_INT 0
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: LIST
69757: PUSH
69758: LD_VAR 0 1
69762: PUSH
69763: LD_INT 4
69765: PLUS
69766: PUSH
69767: LD_VAR 0 2
69771: PUSH
69772: LD_INT 4
69774: PLUS
69775: PUSH
69776: LD_INT 5
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: LIST
69783: PUSH
69784: EMPTY
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: ST_TO_ADDR
// end ; 2 :
69791: GO 70350
69793: LD_INT 2
69795: DOUBLE
69796: EQUAL
69797: IFTRUE 69801
69799: GO 69930
69801: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69802: LD_ADDR_VAR 0 5
69806: PUSH
69807: LD_VAR 0 1
69811: PUSH
69812: LD_VAR 0 2
69816: PUSH
69817: LD_INT 3
69819: MINUS
69820: PUSH
69821: LD_INT 3
69823: PUSH
69824: EMPTY
69825: LIST
69826: LIST
69827: LIST
69828: PUSH
69829: LD_VAR 0 1
69833: PUSH
69834: LD_INT 4
69836: PLUS
69837: PUSH
69838: LD_VAR 0 2
69842: PUSH
69843: LD_INT 4
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: LIST
69850: PUSH
69851: LD_VAR 0 1
69855: PUSH
69856: LD_VAR 0 2
69860: PUSH
69861: LD_INT 4
69863: PLUS
69864: PUSH
69865: LD_INT 0
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: LIST
69872: PUSH
69873: LD_VAR 0 1
69877: PUSH
69878: LD_INT 3
69880: MINUS
69881: PUSH
69882: LD_VAR 0 2
69886: PUSH
69887: LD_INT 1
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: LIST
69894: PUSH
69895: LD_VAR 0 1
69899: PUSH
69900: LD_INT 4
69902: MINUS
69903: PUSH
69904: LD_VAR 0 2
69908: PUSH
69909: LD_INT 4
69911: MINUS
69912: PUSH
69913: LD_INT 2
69915: PUSH
69916: EMPTY
69917: LIST
69918: LIST
69919: LIST
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: LIST
69927: ST_TO_ADDR
// end ; 3 :
69928: GO 70350
69930: LD_INT 3
69932: DOUBLE
69933: EQUAL
69934: IFTRUE 69938
69936: GO 70071
69938: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69939: LD_ADDR_VAR 0 5
69943: PUSH
69944: LD_VAR 0 1
69948: PUSH
69949: LD_INT 3
69951: PLUS
69952: PUSH
69953: LD_VAR 0 2
69957: PUSH
69958: LD_INT 4
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: LIST
69965: PUSH
69966: LD_VAR 0 1
69970: PUSH
69971: LD_INT 4
69973: PLUS
69974: PUSH
69975: LD_VAR 0 2
69979: PUSH
69980: LD_INT 4
69982: PLUS
69983: PUSH
69984: LD_INT 5
69986: PUSH
69987: EMPTY
69988: LIST
69989: LIST
69990: LIST
69991: PUSH
69992: LD_VAR 0 1
69996: PUSH
69997: LD_INT 4
69999: MINUS
70000: PUSH
70001: LD_VAR 0 2
70005: PUSH
70006: LD_INT 1
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: LIST
70013: PUSH
70014: LD_VAR 0 1
70018: PUSH
70019: LD_VAR 0 2
70023: PUSH
70024: LD_INT 4
70026: MINUS
70027: PUSH
70028: LD_INT 3
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: LIST
70035: PUSH
70036: LD_VAR 0 1
70040: PUSH
70041: LD_INT 3
70043: MINUS
70044: PUSH
70045: LD_VAR 0 2
70049: PUSH
70050: LD_INT 3
70052: MINUS
70053: PUSH
70054: LD_INT 2
70056: PUSH
70057: EMPTY
70058: LIST
70059: LIST
70060: LIST
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: ST_TO_ADDR
// end ; 4 :
70069: GO 70350
70071: LD_INT 4
70073: DOUBLE
70074: EQUAL
70075: IFTRUE 70079
70077: GO 70212
70079: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70080: LD_ADDR_VAR 0 5
70084: PUSH
70085: LD_VAR 0 1
70089: PUSH
70090: LD_VAR 0 2
70094: PUSH
70095: LD_INT 4
70097: PLUS
70098: PUSH
70099: LD_INT 0
70101: PUSH
70102: EMPTY
70103: LIST
70104: LIST
70105: LIST
70106: PUSH
70107: LD_VAR 0 1
70111: PUSH
70112: LD_INT 3
70114: PLUS
70115: PUSH
70116: LD_VAR 0 2
70120: PUSH
70121: LD_INT 3
70123: PLUS
70124: PUSH
70125: LD_INT 5
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: LIST
70132: PUSH
70133: LD_VAR 0 1
70137: PUSH
70138: LD_INT 4
70140: PLUS
70141: PUSH
70142: LD_VAR 0 2
70146: PUSH
70147: LD_INT 4
70149: PUSH
70150: EMPTY
70151: LIST
70152: LIST
70153: LIST
70154: PUSH
70155: LD_VAR 0 1
70159: PUSH
70160: LD_VAR 0 2
70164: PUSH
70165: LD_INT 3
70167: MINUS
70168: PUSH
70169: LD_INT 3
70171: PUSH
70172: EMPTY
70173: LIST
70174: LIST
70175: LIST
70176: PUSH
70177: LD_VAR 0 1
70181: PUSH
70182: LD_INT 4
70184: MINUS
70185: PUSH
70186: LD_VAR 0 2
70190: PUSH
70191: LD_INT 4
70193: MINUS
70194: PUSH
70195: LD_INT 2
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: LIST
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: LIST
70207: LIST
70208: LIST
70209: ST_TO_ADDR
// end ; 5 :
70210: GO 70350
70212: LD_INT 5
70214: DOUBLE
70215: EQUAL
70216: IFTRUE 70220
70218: GO 70349
70220: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70221: LD_ADDR_VAR 0 5
70225: PUSH
70226: LD_VAR 0 1
70230: PUSH
70231: LD_INT 4
70233: MINUS
70234: PUSH
70235: LD_VAR 0 2
70239: PUSH
70240: LD_INT 1
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: LIST
70247: PUSH
70248: LD_VAR 0 1
70252: PUSH
70253: LD_VAR 0 2
70257: PUSH
70258: LD_INT 4
70260: MINUS
70261: PUSH
70262: LD_INT 3
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: LIST
70269: PUSH
70270: LD_VAR 0 1
70274: PUSH
70275: LD_INT 4
70277: PLUS
70278: PUSH
70279: LD_VAR 0 2
70283: PUSH
70284: LD_INT 4
70286: PLUS
70287: PUSH
70288: LD_INT 5
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: LIST
70295: PUSH
70296: LD_VAR 0 1
70300: PUSH
70301: LD_INT 3
70303: PLUS
70304: PUSH
70305: LD_VAR 0 2
70309: PUSH
70310: LD_INT 4
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: LIST
70317: PUSH
70318: LD_VAR 0 1
70322: PUSH
70323: LD_VAR 0 2
70327: PUSH
70328: LD_INT 3
70330: PLUS
70331: PUSH
70332: LD_INT 0
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: LIST
70339: PUSH
70340: EMPTY
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: ST_TO_ADDR
// end ; end ;
70347: GO 70350
70349: POP
// result := list ;
70350: LD_ADDR_VAR 0 4
70354: PUSH
70355: LD_VAR 0 5
70359: ST_TO_ADDR
// end ;
70360: LD_VAR 0 4
70364: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70365: LD_INT 0
70367: PPUSH
70368: PPUSH
70369: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70370: LD_VAR 0 1
70374: NOT
70375: PUSH
70376: LD_VAR 0 2
70380: PUSH
70381: LD_INT 1
70383: PUSH
70384: LD_INT 2
70386: PUSH
70387: LD_INT 3
70389: PUSH
70390: LD_INT 4
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: LIST
70397: LIST
70398: IN
70399: NOT
70400: OR
70401: IFFALSE 70405
// exit ;
70403: GO 70497
// tmp := [ ] ;
70405: LD_ADDR_VAR 0 5
70409: PUSH
70410: EMPTY
70411: ST_TO_ADDR
// for i in units do
70412: LD_ADDR_VAR 0 4
70416: PUSH
70417: LD_VAR 0 1
70421: PUSH
70422: FOR_IN
70423: IFFALSE 70466
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
70425: LD_ADDR_VAR 0 5
70429: PUSH
70430: LD_VAR 0 5
70434: PPUSH
70435: LD_VAR 0 5
70439: PUSH
70440: LD_INT 1
70442: PLUS
70443: PPUSH
70444: LD_VAR 0 4
70448: PPUSH
70449: LD_VAR 0 2
70453: PPUSH
70454: CALL_OW 259
70458: PPUSH
70459: CALL_OW 2
70463: ST_TO_ADDR
70464: GO 70422
70466: POP
70467: POP
// if not tmp then
70468: LD_VAR 0 5
70472: NOT
70473: IFFALSE 70477
// exit ;
70475: GO 70497
// result := SortListByListDesc ( units , tmp ) ;
70477: LD_ADDR_VAR 0 3
70481: PUSH
70482: LD_VAR 0 1
70486: PPUSH
70487: LD_VAR 0 5
70491: PPUSH
70492: CALL_OW 77
70496: ST_TO_ADDR
// end ;
70497: LD_VAR 0 3
70501: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70502: LD_INT 0
70504: PPUSH
70505: PPUSH
70506: PPUSH
// result := false ;
70507: LD_ADDR_VAR 0 3
70511: PUSH
70512: LD_INT 0
70514: ST_TO_ADDR
// x := GetX ( building ) ;
70515: LD_ADDR_VAR 0 4
70519: PUSH
70520: LD_VAR 0 2
70524: PPUSH
70525: CALL_OW 250
70529: ST_TO_ADDR
// y := GetY ( building ) ;
70530: LD_ADDR_VAR 0 5
70534: PUSH
70535: LD_VAR 0 2
70539: PPUSH
70540: CALL_OW 251
70544: ST_TO_ADDR
// if not building or not x or not y then
70545: LD_VAR 0 2
70549: NOT
70550: PUSH
70551: LD_VAR 0 4
70555: NOT
70556: OR
70557: PUSH
70558: LD_VAR 0 5
70562: NOT
70563: OR
70564: IFFALSE 70568
// exit ;
70566: GO 70660
// if GetTaskList ( unit ) then
70568: LD_VAR 0 1
70572: PPUSH
70573: CALL_OW 437
70577: IFFALSE 70660
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70579: LD_STRING e
70581: PUSH
70582: LD_VAR 0 1
70586: PPUSH
70587: CALL_OW 437
70591: PUSH
70592: LD_INT 1
70594: ARRAY
70595: PUSH
70596: LD_INT 1
70598: ARRAY
70599: EQUAL
70600: PUSH
70601: LD_VAR 0 4
70605: PUSH
70606: LD_VAR 0 1
70610: PPUSH
70611: CALL_OW 437
70615: PUSH
70616: LD_INT 1
70618: ARRAY
70619: PUSH
70620: LD_INT 2
70622: ARRAY
70623: EQUAL
70624: AND
70625: PUSH
70626: LD_VAR 0 5
70630: PUSH
70631: LD_VAR 0 1
70635: PPUSH
70636: CALL_OW 437
70640: PUSH
70641: LD_INT 1
70643: ARRAY
70644: PUSH
70645: LD_INT 3
70647: ARRAY
70648: EQUAL
70649: AND
70650: IFFALSE 70660
// result := true end ;
70652: LD_ADDR_VAR 0 3
70656: PUSH
70657: LD_INT 1
70659: ST_TO_ADDR
// end ;
70660: LD_VAR 0 3
70664: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70665: LD_INT 0
70667: PPUSH
// result := false ;
70668: LD_ADDR_VAR 0 4
70672: PUSH
70673: LD_INT 0
70675: ST_TO_ADDR
// if GetTaskList ( unit ) then
70676: LD_VAR 0 1
70680: PPUSH
70681: CALL_OW 437
70685: IFFALSE 70768
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70687: LD_STRING M
70689: PUSH
70690: LD_VAR 0 1
70694: PPUSH
70695: CALL_OW 437
70699: PUSH
70700: LD_INT 1
70702: ARRAY
70703: PUSH
70704: LD_INT 1
70706: ARRAY
70707: EQUAL
70708: PUSH
70709: LD_VAR 0 2
70713: PUSH
70714: LD_VAR 0 1
70718: PPUSH
70719: CALL_OW 437
70723: PUSH
70724: LD_INT 1
70726: ARRAY
70727: PUSH
70728: LD_INT 2
70730: ARRAY
70731: EQUAL
70732: AND
70733: PUSH
70734: LD_VAR 0 3
70738: PUSH
70739: LD_VAR 0 1
70743: PPUSH
70744: CALL_OW 437
70748: PUSH
70749: LD_INT 1
70751: ARRAY
70752: PUSH
70753: LD_INT 3
70755: ARRAY
70756: EQUAL
70757: AND
70758: IFFALSE 70768
// result := true ;
70760: LD_ADDR_VAR 0 4
70764: PUSH
70765: LD_INT 1
70767: ST_TO_ADDR
// end ; end ;
70768: LD_VAR 0 4
70772: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70773: LD_INT 0
70775: PPUSH
70776: PPUSH
70777: PPUSH
70778: PPUSH
// if not unit or not area then
70779: LD_VAR 0 1
70783: NOT
70784: PUSH
70785: LD_VAR 0 2
70789: NOT
70790: OR
70791: IFFALSE 70795
// exit ;
70793: GO 70959
// tmp := AreaToList ( area , i ) ;
70795: LD_ADDR_VAR 0 6
70799: PUSH
70800: LD_VAR 0 2
70804: PPUSH
70805: LD_VAR 0 5
70809: PPUSH
70810: CALL_OW 517
70814: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70815: LD_ADDR_VAR 0 5
70819: PUSH
70820: DOUBLE
70821: LD_INT 1
70823: DEC
70824: ST_TO_ADDR
70825: LD_VAR 0 6
70829: PUSH
70830: LD_INT 1
70832: ARRAY
70833: PUSH
70834: FOR_TO
70835: IFFALSE 70957
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70837: LD_ADDR_VAR 0 7
70841: PUSH
70842: LD_VAR 0 6
70846: PUSH
70847: LD_INT 1
70849: ARRAY
70850: PUSH
70851: LD_VAR 0 5
70855: ARRAY
70856: PUSH
70857: LD_VAR 0 6
70861: PUSH
70862: LD_INT 2
70864: ARRAY
70865: PUSH
70866: LD_VAR 0 5
70870: ARRAY
70871: PUSH
70872: EMPTY
70873: LIST
70874: LIST
70875: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
70876: LD_VAR 0 7
70880: PUSH
70881: LD_INT 1
70883: ARRAY
70884: PPUSH
70885: LD_VAR 0 7
70889: PUSH
70890: LD_INT 2
70892: ARRAY
70893: PPUSH
70894: CALL_OW 428
70898: PUSH
70899: LD_INT 0
70901: EQUAL
70902: IFFALSE 70955
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70904: LD_VAR 0 1
70908: PPUSH
70909: LD_VAR 0 7
70913: PUSH
70914: LD_INT 1
70916: ARRAY
70917: PPUSH
70918: LD_VAR 0 7
70922: PUSH
70923: LD_INT 2
70925: ARRAY
70926: PPUSH
70927: LD_VAR 0 3
70931: PPUSH
70932: CALL_OW 48
// result := IsPlaced ( unit ) ;
70936: LD_ADDR_VAR 0 4
70940: PUSH
70941: LD_VAR 0 1
70945: PPUSH
70946: CALL_OW 305
70950: ST_TO_ADDR
// exit ;
70951: POP
70952: POP
70953: GO 70959
// end ; end ;
70955: GO 70834
70957: POP
70958: POP
// end ;
70959: LD_VAR 0 4
70963: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70964: LD_INT 0
70966: PPUSH
70967: PPUSH
70968: PPUSH
// if not side or side > 8 then
70969: LD_VAR 0 1
70973: NOT
70974: PUSH
70975: LD_VAR 0 1
70979: PUSH
70980: LD_INT 8
70982: GREATER
70983: OR
70984: IFFALSE 70988
// exit ;
70986: GO 71175
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70988: LD_ADDR_VAR 0 4
70992: PUSH
70993: LD_INT 22
70995: PUSH
70996: LD_VAR 0 1
71000: PUSH
71001: EMPTY
71002: LIST
71003: LIST
71004: PUSH
71005: LD_INT 21
71007: PUSH
71008: LD_INT 3
71010: PUSH
71011: EMPTY
71012: LIST
71013: LIST
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: PPUSH
71019: CALL_OW 69
71023: ST_TO_ADDR
// if not tmp then
71024: LD_VAR 0 4
71028: NOT
71029: IFFALSE 71033
// exit ;
71031: GO 71175
// enable_addtolog := true ;
71033: LD_ADDR_OWVAR 81
71037: PUSH
71038: LD_INT 1
71040: ST_TO_ADDR
// AddToLog ( [ ) ;
71041: LD_STRING [
71043: PPUSH
71044: CALL_OW 561
// for i in tmp do
71048: LD_ADDR_VAR 0 3
71052: PUSH
71053: LD_VAR 0 4
71057: PUSH
71058: FOR_IN
71059: IFFALSE 71166
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71061: LD_STRING [
71063: PUSH
71064: LD_VAR 0 3
71068: PPUSH
71069: CALL_OW 266
71073: STR
71074: PUSH
71075: LD_STRING , 
71077: STR
71078: PUSH
71079: LD_VAR 0 3
71083: PPUSH
71084: CALL_OW 250
71088: STR
71089: PUSH
71090: LD_STRING , 
71092: STR
71093: PUSH
71094: LD_VAR 0 3
71098: PPUSH
71099: CALL_OW 251
71103: STR
71104: PUSH
71105: LD_STRING , 
71107: STR
71108: PUSH
71109: LD_VAR 0 3
71113: PPUSH
71114: CALL_OW 254
71118: STR
71119: PUSH
71120: LD_STRING , 
71122: STR
71123: PUSH
71124: LD_VAR 0 3
71128: PPUSH
71129: LD_INT 1
71131: PPUSH
71132: CALL_OW 268
71136: STR
71137: PUSH
71138: LD_STRING , 
71140: STR
71141: PUSH
71142: LD_VAR 0 3
71146: PPUSH
71147: LD_INT 2
71149: PPUSH
71150: CALL_OW 268
71154: STR
71155: PUSH
71156: LD_STRING ],
71158: STR
71159: PPUSH
71160: CALL_OW 561
// end ;
71164: GO 71058
71166: POP
71167: POP
// AddToLog ( ]; ) ;
71168: LD_STRING ];
71170: PPUSH
71171: CALL_OW 561
// end ;
71175: LD_VAR 0 2
71179: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71180: LD_INT 0
71182: PPUSH
71183: PPUSH
71184: PPUSH
71185: PPUSH
71186: PPUSH
// if not area or not rate or not max then
71187: LD_VAR 0 1
71191: NOT
71192: PUSH
71193: LD_VAR 0 2
71197: NOT
71198: OR
71199: PUSH
71200: LD_VAR 0 4
71204: NOT
71205: OR
71206: IFFALSE 71210
// exit ;
71208: GO 71399
// while 1 do
71210: LD_INT 1
71212: IFFALSE 71399
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71214: LD_ADDR_VAR 0 9
71218: PUSH
71219: LD_VAR 0 1
71223: PPUSH
71224: LD_INT 1
71226: PPUSH
71227: CALL_OW 287
71231: PUSH
71232: LD_INT 10
71234: MUL
71235: ST_TO_ADDR
// r := rate / 10 ;
71236: LD_ADDR_VAR 0 7
71240: PUSH
71241: LD_VAR 0 2
71245: PUSH
71246: LD_INT 10
71248: DIVREAL
71249: ST_TO_ADDR
// time := 1 1$00 ;
71250: LD_ADDR_VAR 0 8
71254: PUSH
71255: LD_INT 2100
71257: ST_TO_ADDR
// if amount < min then
71258: LD_VAR 0 9
71262: PUSH
71263: LD_VAR 0 3
71267: LESS
71268: IFFALSE 71286
// r := r * 2 else
71270: LD_ADDR_VAR 0 7
71274: PUSH
71275: LD_VAR 0 7
71279: PUSH
71280: LD_INT 2
71282: MUL
71283: ST_TO_ADDR
71284: GO 71312
// if amount > max then
71286: LD_VAR 0 9
71290: PUSH
71291: LD_VAR 0 4
71295: GREATER
71296: IFFALSE 71312
// r := r / 2 ;
71298: LD_ADDR_VAR 0 7
71302: PUSH
71303: LD_VAR 0 7
71307: PUSH
71308: LD_INT 2
71310: DIVREAL
71311: ST_TO_ADDR
// time := time / r ;
71312: LD_ADDR_VAR 0 8
71316: PUSH
71317: LD_VAR 0 8
71321: PUSH
71322: LD_VAR 0 7
71326: DIVREAL
71327: ST_TO_ADDR
// if time < 0 then
71328: LD_VAR 0 8
71332: PUSH
71333: LD_INT 0
71335: LESS
71336: IFFALSE 71353
// time := time * - 1 ;
71338: LD_ADDR_VAR 0 8
71342: PUSH
71343: LD_VAR 0 8
71347: PUSH
71348: LD_INT 1
71350: NEG
71351: MUL
71352: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
71353: LD_VAR 0 8
71357: PUSH
71358: LD_INT 35
71360: PPUSH
71361: LD_INT 875
71363: PPUSH
71364: CALL_OW 12
71368: PLUS
71369: PPUSH
71370: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71374: LD_INT 1
71376: PPUSH
71377: LD_INT 5
71379: PPUSH
71380: CALL_OW 12
71384: PPUSH
71385: LD_VAR 0 1
71389: PPUSH
71390: LD_INT 1
71392: PPUSH
71393: CALL_OW 55
// end ;
71397: GO 71210
// end ;
71399: LD_VAR 0 5
71403: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71404: LD_INT 0
71406: PPUSH
71407: PPUSH
71408: PPUSH
71409: PPUSH
71410: PPUSH
71411: PPUSH
71412: PPUSH
71413: PPUSH
// if not turrets or not factories then
71414: LD_VAR 0 1
71418: NOT
71419: PUSH
71420: LD_VAR 0 2
71424: NOT
71425: OR
71426: IFFALSE 71430
// exit ;
71428: GO 71737
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71430: LD_ADDR_VAR 0 10
71434: PUSH
71435: LD_INT 5
71437: PUSH
71438: LD_INT 6
71440: PUSH
71441: EMPTY
71442: LIST
71443: LIST
71444: PUSH
71445: LD_INT 2
71447: PUSH
71448: LD_INT 4
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: PUSH
71455: LD_INT 3
71457: PUSH
71458: LD_INT 5
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: EMPTY
71466: LIST
71467: LIST
71468: LIST
71469: PUSH
71470: LD_INT 24
71472: PUSH
71473: LD_INT 25
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PUSH
71480: LD_INT 23
71482: PUSH
71483: LD_INT 27
71485: PUSH
71486: EMPTY
71487: LIST
71488: LIST
71489: PUSH
71490: EMPTY
71491: LIST
71492: LIST
71493: PUSH
71494: LD_INT 42
71496: PUSH
71497: LD_INT 43
71499: PUSH
71500: EMPTY
71501: LIST
71502: LIST
71503: PUSH
71504: LD_INT 44
71506: PUSH
71507: LD_INT 46
71509: PUSH
71510: EMPTY
71511: LIST
71512: LIST
71513: PUSH
71514: LD_INT 45
71516: PUSH
71517: LD_INT 47
71519: PUSH
71520: EMPTY
71521: LIST
71522: LIST
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: LIST
71528: PUSH
71529: EMPTY
71530: LIST
71531: LIST
71532: LIST
71533: ST_TO_ADDR
// result := [ ] ;
71534: LD_ADDR_VAR 0 3
71538: PUSH
71539: EMPTY
71540: ST_TO_ADDR
// for i in turrets do
71541: LD_ADDR_VAR 0 4
71545: PUSH
71546: LD_VAR 0 1
71550: PUSH
71551: FOR_IN
71552: IFFALSE 71735
// begin nat := GetNation ( i ) ;
71554: LD_ADDR_VAR 0 7
71558: PUSH
71559: LD_VAR 0 4
71563: PPUSH
71564: CALL_OW 248
71568: ST_TO_ADDR
// weapon := 0 ;
71569: LD_ADDR_VAR 0 8
71573: PUSH
71574: LD_INT 0
71576: ST_TO_ADDR
// if not nat then
71577: LD_VAR 0 7
71581: NOT
71582: IFFALSE 71586
// continue ;
71584: GO 71551
// for j in list [ nat ] do
71586: LD_ADDR_VAR 0 5
71590: PUSH
71591: LD_VAR 0 10
71595: PUSH
71596: LD_VAR 0 7
71600: ARRAY
71601: PUSH
71602: FOR_IN
71603: IFFALSE 71644
// if GetBWeapon ( i ) = j [ 1 ] then
71605: LD_VAR 0 4
71609: PPUSH
71610: CALL_OW 269
71614: PUSH
71615: LD_VAR 0 5
71619: PUSH
71620: LD_INT 1
71622: ARRAY
71623: EQUAL
71624: IFFALSE 71642
// begin weapon := j [ 2 ] ;
71626: LD_ADDR_VAR 0 8
71630: PUSH
71631: LD_VAR 0 5
71635: PUSH
71636: LD_INT 2
71638: ARRAY
71639: ST_TO_ADDR
// break ;
71640: GO 71644
// end ;
71642: GO 71602
71644: POP
71645: POP
// if not weapon then
71646: LD_VAR 0 8
71650: NOT
71651: IFFALSE 71655
// continue ;
71653: GO 71551
// for k in factories do
71655: LD_ADDR_VAR 0 6
71659: PUSH
71660: LD_VAR 0 2
71664: PUSH
71665: FOR_IN
71666: IFFALSE 71731
// begin weapons := AvailableWeaponList ( k ) ;
71668: LD_ADDR_VAR 0 9
71672: PUSH
71673: LD_VAR 0 6
71677: PPUSH
71678: CALL_OW 478
71682: ST_TO_ADDR
// if not weapons then
71683: LD_VAR 0 9
71687: NOT
71688: IFFALSE 71692
// continue ;
71690: GO 71665
// if weapon in weapons then
71692: LD_VAR 0 8
71696: PUSH
71697: LD_VAR 0 9
71701: IN
71702: IFFALSE 71729
// begin result := [ i , weapon ] ;
71704: LD_ADDR_VAR 0 3
71708: PUSH
71709: LD_VAR 0 4
71713: PUSH
71714: LD_VAR 0 8
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: ST_TO_ADDR
// exit ;
71723: POP
71724: POP
71725: POP
71726: POP
71727: GO 71737
// end ; end ;
71729: GO 71665
71731: POP
71732: POP
// end ;
71733: GO 71551
71735: POP
71736: POP
// end ;
71737: LD_VAR 0 3
71741: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71742: LD_INT 0
71744: PPUSH
// if not side or side > 8 then
71745: LD_VAR 0 3
71749: NOT
71750: PUSH
71751: LD_VAR 0 3
71755: PUSH
71756: LD_INT 8
71758: GREATER
71759: OR
71760: IFFALSE 71764
// exit ;
71762: GO 71823
// if not range then
71764: LD_VAR 0 4
71768: NOT
71769: IFFALSE 71780
// range := - 12 ;
71771: LD_ADDR_VAR 0 4
71775: PUSH
71776: LD_INT 12
71778: NEG
71779: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71780: LD_VAR 0 1
71784: PPUSH
71785: LD_VAR 0 2
71789: PPUSH
71790: LD_VAR 0 3
71794: PPUSH
71795: LD_VAR 0 4
71799: PPUSH
71800: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71804: LD_VAR 0 1
71808: PPUSH
71809: LD_VAR 0 2
71813: PPUSH
71814: LD_VAR 0 3
71818: PPUSH
71819: CALL_OW 331
// end ;
71823: LD_VAR 0 5
71827: RET
// export function Video ( mode ) ; begin
71828: LD_INT 0
71830: PPUSH
// ingame_video = mode ;
71831: LD_ADDR_OWVAR 52
71835: PUSH
71836: LD_VAR 0 1
71840: ST_TO_ADDR
// interface_hidden = mode ;
71841: LD_ADDR_OWVAR 54
71845: PUSH
71846: LD_VAR 0 1
71850: ST_TO_ADDR
// end ;
71851: LD_VAR 0 2
71855: RET
// export function Join ( array , element ) ; begin
71856: LD_INT 0
71858: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71859: LD_ADDR_VAR 0 3
71863: PUSH
71864: LD_VAR 0 1
71868: PPUSH
71869: LD_VAR 0 1
71873: PUSH
71874: LD_INT 1
71876: PLUS
71877: PPUSH
71878: LD_VAR 0 2
71882: PPUSH
71883: CALL_OW 1
71887: ST_TO_ADDR
// end ;
71888: LD_VAR 0 3
71892: RET
// export function JoinUnion ( array , element ) ; begin
71893: LD_INT 0
71895: PPUSH
// result := array union element ;
71896: LD_ADDR_VAR 0 3
71900: PUSH
71901: LD_VAR 0 1
71905: PUSH
71906: LD_VAR 0 2
71910: UNION
71911: ST_TO_ADDR
// end ;
71912: LD_VAR 0 3
71916: RET
// export function GetBehemoths ( side ) ; begin
71917: LD_INT 0
71919: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
71920: LD_ADDR_VAR 0 2
71924: PUSH
71925: LD_INT 22
71927: PUSH
71928: LD_VAR 0 1
71932: PUSH
71933: EMPTY
71934: LIST
71935: LIST
71936: PUSH
71937: LD_INT 31
71939: PUSH
71940: LD_INT 25
71942: PUSH
71943: EMPTY
71944: LIST
71945: LIST
71946: PUSH
71947: EMPTY
71948: LIST
71949: LIST
71950: PPUSH
71951: CALL_OW 69
71955: ST_TO_ADDR
// end ;
71956: LD_VAR 0 2
71960: RET
// export function Shuffle ( array ) ; var i , index ; begin
71961: LD_INT 0
71963: PPUSH
71964: PPUSH
71965: PPUSH
// result := [ ] ;
71966: LD_ADDR_VAR 0 2
71970: PUSH
71971: EMPTY
71972: ST_TO_ADDR
// if not array then
71973: LD_VAR 0 1
71977: NOT
71978: IFFALSE 71982
// exit ;
71980: GO 72081
// Randomize ;
71982: CALL_OW 10
// for i = array downto 1 do
71986: LD_ADDR_VAR 0 3
71990: PUSH
71991: DOUBLE
71992: LD_VAR 0 1
71996: INC
71997: ST_TO_ADDR
71998: LD_INT 1
72000: PUSH
72001: FOR_DOWNTO
72002: IFFALSE 72079
// begin index := rand ( 1 , array ) ;
72004: LD_ADDR_VAR 0 4
72008: PUSH
72009: LD_INT 1
72011: PPUSH
72012: LD_VAR 0 1
72016: PPUSH
72017: CALL_OW 12
72021: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72022: LD_ADDR_VAR 0 2
72026: PUSH
72027: LD_VAR 0 2
72031: PPUSH
72032: LD_VAR 0 2
72036: PUSH
72037: LD_INT 1
72039: PLUS
72040: PPUSH
72041: LD_VAR 0 1
72045: PUSH
72046: LD_VAR 0 4
72050: ARRAY
72051: PPUSH
72052: CALL_OW 2
72056: ST_TO_ADDR
// array := Delete ( array , index ) ;
72057: LD_ADDR_VAR 0 1
72061: PUSH
72062: LD_VAR 0 1
72066: PPUSH
72067: LD_VAR 0 4
72071: PPUSH
72072: CALL_OW 3
72076: ST_TO_ADDR
// end ;
72077: GO 72001
72079: POP
72080: POP
// end ;
72081: LD_VAR 0 2
72085: RET
// export function GetBaseMaterials ( base ) ; begin
72086: LD_INT 0
72088: PPUSH
// result := [ 0 , 0 , 0 ] ;
72089: LD_ADDR_VAR 0 2
72093: PUSH
72094: LD_INT 0
72096: PUSH
72097: LD_INT 0
72099: PUSH
72100: LD_INT 0
72102: PUSH
72103: EMPTY
72104: LIST
72105: LIST
72106: LIST
72107: ST_TO_ADDR
// if not base then
72108: LD_VAR 0 1
72112: NOT
72113: IFFALSE 72117
// exit ;
72115: GO 72166
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72117: LD_ADDR_VAR 0 2
72121: PUSH
72122: LD_VAR 0 1
72126: PPUSH
72127: LD_INT 1
72129: PPUSH
72130: CALL_OW 275
72134: PUSH
72135: LD_VAR 0 1
72139: PPUSH
72140: LD_INT 2
72142: PPUSH
72143: CALL_OW 275
72147: PUSH
72148: LD_VAR 0 1
72152: PPUSH
72153: LD_INT 3
72155: PPUSH
72156: CALL_OW 275
72160: PUSH
72161: EMPTY
72162: LIST
72163: LIST
72164: LIST
72165: ST_TO_ADDR
// end ;
72166: LD_VAR 0 2
72170: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72171: LD_INT 0
72173: PPUSH
72174: PPUSH
// result := array ;
72175: LD_ADDR_VAR 0 3
72179: PUSH
72180: LD_VAR 0 1
72184: ST_TO_ADDR
// if size >= result then
72185: LD_VAR 0 2
72189: PUSH
72190: LD_VAR 0 3
72194: GREATEREQUAL
72195: IFFALSE 72199
// exit ;
72197: GO 72249
// if size then
72199: LD_VAR 0 2
72203: IFFALSE 72249
// for i := array downto size do
72205: LD_ADDR_VAR 0 4
72209: PUSH
72210: DOUBLE
72211: LD_VAR 0 1
72215: INC
72216: ST_TO_ADDR
72217: LD_VAR 0 2
72221: PUSH
72222: FOR_DOWNTO
72223: IFFALSE 72247
// result := Delete ( result , result ) ;
72225: LD_ADDR_VAR 0 3
72229: PUSH
72230: LD_VAR 0 3
72234: PPUSH
72235: LD_VAR 0 3
72239: PPUSH
72240: CALL_OW 3
72244: ST_TO_ADDR
72245: GO 72222
72247: POP
72248: POP
// end ;
72249: LD_VAR 0 3
72253: RET
// export function ComExit ( unit ) ; var tmp ; begin
72254: LD_INT 0
72256: PPUSH
72257: PPUSH
// if not IsInUnit ( unit ) then
72258: LD_VAR 0 1
72262: PPUSH
72263: CALL_OW 310
72267: NOT
72268: IFFALSE 72272
// exit ;
72270: GO 72332
// tmp := IsInUnit ( unit ) ;
72272: LD_ADDR_VAR 0 3
72276: PUSH
72277: LD_VAR 0 1
72281: PPUSH
72282: CALL_OW 310
72286: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72287: LD_VAR 0 3
72291: PPUSH
72292: CALL_OW 247
72296: PUSH
72297: LD_INT 2
72299: EQUAL
72300: IFFALSE 72313
// ComExitVehicle ( unit ) else
72302: LD_VAR 0 1
72306: PPUSH
72307: CALL_OW 121
72311: GO 72322
// ComExitBuilding ( unit ) ;
72313: LD_VAR 0 1
72317: PPUSH
72318: CALL_OW 122
// result := tmp ;
72322: LD_ADDR_VAR 0 2
72326: PUSH
72327: LD_VAR 0 3
72331: ST_TO_ADDR
// end ;
72332: LD_VAR 0 2
72336: RET
// export function ComExitAll ( units ) ; var i ; begin
72337: LD_INT 0
72339: PPUSH
72340: PPUSH
// if not units then
72341: LD_VAR 0 1
72345: NOT
72346: IFFALSE 72350
// exit ;
72348: GO 72376
// for i in units do
72350: LD_ADDR_VAR 0 3
72354: PUSH
72355: LD_VAR 0 1
72359: PUSH
72360: FOR_IN
72361: IFFALSE 72374
// ComExit ( i ) ;
72363: LD_VAR 0 3
72367: PPUSH
72368: CALL 72254 0 1
72372: GO 72360
72374: POP
72375: POP
// end ;
72376: LD_VAR 0 2
72380: RET
// export function ResetHc ; begin
72381: LD_INT 0
72383: PPUSH
// InitHc ;
72384: CALL_OW 19
// hc_importance := 0 ;
72388: LD_ADDR_OWVAR 32
72392: PUSH
72393: LD_INT 0
72395: ST_TO_ADDR
// end ;
72396: LD_VAR 0 1
72400: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72401: LD_INT 0
72403: PPUSH
72404: PPUSH
72405: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72406: LD_ADDR_VAR 0 6
72410: PUSH
72411: LD_VAR 0 1
72415: PUSH
72416: LD_VAR 0 3
72420: PLUS
72421: PUSH
72422: LD_INT 2
72424: DIV
72425: ST_TO_ADDR
// if _x < 0 then
72426: LD_VAR 0 6
72430: PUSH
72431: LD_INT 0
72433: LESS
72434: IFFALSE 72451
// _x := _x * - 1 ;
72436: LD_ADDR_VAR 0 6
72440: PUSH
72441: LD_VAR 0 6
72445: PUSH
72446: LD_INT 1
72448: NEG
72449: MUL
72450: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72451: LD_ADDR_VAR 0 7
72455: PUSH
72456: LD_VAR 0 2
72460: PUSH
72461: LD_VAR 0 4
72465: PLUS
72466: PUSH
72467: LD_INT 2
72469: DIV
72470: ST_TO_ADDR
// if _y < 0 then
72471: LD_VAR 0 7
72475: PUSH
72476: LD_INT 0
72478: LESS
72479: IFFALSE 72496
// _y := _y * - 1 ;
72481: LD_ADDR_VAR 0 7
72485: PUSH
72486: LD_VAR 0 7
72490: PUSH
72491: LD_INT 1
72493: NEG
72494: MUL
72495: ST_TO_ADDR
// result := [ _x , _y ] ;
72496: LD_ADDR_VAR 0 5
72500: PUSH
72501: LD_VAR 0 6
72505: PUSH
72506: LD_VAR 0 7
72510: PUSH
72511: EMPTY
72512: LIST
72513: LIST
72514: ST_TO_ADDR
// end ;
72515: LD_VAR 0 5
72519: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72520: LD_INT 0
72522: PPUSH
72523: PPUSH
72524: PPUSH
72525: PPUSH
// task := GetTaskList ( unit ) ;
72526: LD_ADDR_VAR 0 7
72530: PUSH
72531: LD_VAR 0 1
72535: PPUSH
72536: CALL_OW 437
72540: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72541: LD_VAR 0 7
72545: NOT
72546: PUSH
72547: LD_VAR 0 1
72551: PPUSH
72552: LD_VAR 0 2
72556: PPUSH
72557: CALL_OW 308
72561: NOT
72562: AND
72563: IFFALSE 72567
// exit ;
72565: GO 72685
// if IsInArea ( unit , area ) then
72567: LD_VAR 0 1
72571: PPUSH
72572: LD_VAR 0 2
72576: PPUSH
72577: CALL_OW 308
72581: IFFALSE 72599
// begin ComMoveToArea ( unit , goAway ) ;
72583: LD_VAR 0 1
72587: PPUSH
72588: LD_VAR 0 3
72592: PPUSH
72593: CALL_OW 113
// exit ;
72597: GO 72685
// end ; if task [ 1 ] [ 1 ] <> M then
72599: LD_VAR 0 7
72603: PUSH
72604: LD_INT 1
72606: ARRAY
72607: PUSH
72608: LD_INT 1
72610: ARRAY
72611: PUSH
72612: LD_STRING M
72614: NONEQUAL
72615: IFFALSE 72619
// exit ;
72617: GO 72685
// x := task [ 1 ] [ 2 ] ;
72619: LD_ADDR_VAR 0 5
72623: PUSH
72624: LD_VAR 0 7
72628: PUSH
72629: LD_INT 1
72631: ARRAY
72632: PUSH
72633: LD_INT 2
72635: ARRAY
72636: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72637: LD_ADDR_VAR 0 6
72641: PUSH
72642: LD_VAR 0 7
72646: PUSH
72647: LD_INT 1
72649: ARRAY
72650: PUSH
72651: LD_INT 3
72653: ARRAY
72654: ST_TO_ADDR
// if InArea ( x , y , area ) then
72655: LD_VAR 0 5
72659: PPUSH
72660: LD_VAR 0 6
72664: PPUSH
72665: LD_VAR 0 2
72669: PPUSH
72670: CALL_OW 309
72674: IFFALSE 72685
// ComStop ( unit ) ;
72676: LD_VAR 0 1
72680: PPUSH
72681: CALL_OW 141
// end ;
72685: LD_VAR 0 4
72689: RET
// export function Abs ( value ) ; begin
72690: LD_INT 0
72692: PPUSH
// result := value ;
72693: LD_ADDR_VAR 0 2
72697: PUSH
72698: LD_VAR 0 1
72702: ST_TO_ADDR
// if value < 0 then
72703: LD_VAR 0 1
72707: PUSH
72708: LD_INT 0
72710: LESS
72711: IFFALSE 72728
// result := value * - 1 ;
72713: LD_ADDR_VAR 0 2
72717: PUSH
72718: LD_VAR 0 1
72722: PUSH
72723: LD_INT 1
72725: NEG
72726: MUL
72727: ST_TO_ADDR
// end ;
72728: LD_VAR 0 2
72732: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72733: LD_INT 0
72735: PPUSH
72736: PPUSH
72737: PPUSH
72738: PPUSH
72739: PPUSH
72740: PPUSH
72741: PPUSH
72742: PPUSH
// if not unit or not building then
72743: LD_VAR 0 1
72747: NOT
72748: PUSH
72749: LD_VAR 0 2
72753: NOT
72754: OR
72755: IFFALSE 72759
// exit ;
72757: GO 72985
// x := GetX ( building ) ;
72759: LD_ADDR_VAR 0 4
72763: PUSH
72764: LD_VAR 0 2
72768: PPUSH
72769: CALL_OW 250
72773: ST_TO_ADDR
// y := GetY ( building ) ;
72774: LD_ADDR_VAR 0 6
72778: PUSH
72779: LD_VAR 0 2
72783: PPUSH
72784: CALL_OW 251
72788: ST_TO_ADDR
// d := GetDir ( building ) ;
72789: LD_ADDR_VAR 0 8
72793: PUSH
72794: LD_VAR 0 2
72798: PPUSH
72799: CALL_OW 254
72803: ST_TO_ADDR
// r := 4 ;
72804: LD_ADDR_VAR 0 9
72808: PUSH
72809: LD_INT 4
72811: ST_TO_ADDR
// for i := 1 to 5 do
72812: LD_ADDR_VAR 0 10
72816: PUSH
72817: DOUBLE
72818: LD_INT 1
72820: DEC
72821: ST_TO_ADDR
72822: LD_INT 5
72824: PUSH
72825: FOR_TO
72826: IFFALSE 72983
// begin _x := ShiftX ( x , d , r + i ) ;
72828: LD_ADDR_VAR 0 5
72832: PUSH
72833: LD_VAR 0 4
72837: PPUSH
72838: LD_VAR 0 8
72842: PPUSH
72843: LD_VAR 0 9
72847: PUSH
72848: LD_VAR 0 10
72852: PLUS
72853: PPUSH
72854: CALL_OW 272
72858: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72859: LD_ADDR_VAR 0 7
72863: PUSH
72864: LD_VAR 0 6
72868: PPUSH
72869: LD_VAR 0 8
72873: PPUSH
72874: LD_VAR 0 9
72878: PUSH
72879: LD_VAR 0 10
72883: PLUS
72884: PPUSH
72885: CALL_OW 273
72889: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72890: LD_VAR 0 5
72894: PPUSH
72895: LD_VAR 0 7
72899: PPUSH
72900: CALL_OW 488
72904: PUSH
72905: LD_VAR 0 5
72909: PPUSH
72910: LD_VAR 0 7
72914: PPUSH
72915: CALL_OW 428
72919: PPUSH
72920: CALL_OW 247
72924: PUSH
72925: LD_INT 3
72927: PUSH
72928: LD_INT 2
72930: PUSH
72931: EMPTY
72932: LIST
72933: LIST
72934: IN
72935: NOT
72936: AND
72937: IFFALSE 72981
// begin ComMoveXY ( unit , _x , _y ) ;
72939: LD_VAR 0 1
72943: PPUSH
72944: LD_VAR 0 5
72948: PPUSH
72949: LD_VAR 0 7
72953: PPUSH
72954: CALL_OW 111
// result := [ _x , _y ] ;
72958: LD_ADDR_VAR 0 3
72962: PUSH
72963: LD_VAR 0 5
72967: PUSH
72968: LD_VAR 0 7
72972: PUSH
72973: EMPTY
72974: LIST
72975: LIST
72976: ST_TO_ADDR
// exit ;
72977: POP
72978: POP
72979: GO 72985
// end ; end ;
72981: GO 72825
72983: POP
72984: POP
// end ;
72985: LD_VAR 0 3
72989: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72990: LD_INT 0
72992: PPUSH
72993: PPUSH
72994: PPUSH
// result := 0 ;
72995: LD_ADDR_VAR 0 3
72999: PUSH
73000: LD_INT 0
73002: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73003: LD_VAR 0 1
73007: PUSH
73008: LD_INT 0
73010: LESS
73011: PUSH
73012: LD_VAR 0 1
73016: PUSH
73017: LD_INT 8
73019: GREATER
73020: OR
73021: PUSH
73022: LD_VAR 0 2
73026: PUSH
73027: LD_INT 0
73029: LESS
73030: OR
73031: PUSH
73032: LD_VAR 0 2
73036: PUSH
73037: LD_INT 8
73039: GREATER
73040: OR
73041: IFFALSE 73045
// exit ;
73043: GO 73120
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73045: LD_ADDR_VAR 0 4
73049: PUSH
73050: LD_INT 22
73052: PUSH
73053: LD_VAR 0 2
73057: PUSH
73058: EMPTY
73059: LIST
73060: LIST
73061: PPUSH
73062: CALL_OW 69
73066: PUSH
73067: FOR_IN
73068: IFFALSE 73118
// begin un := UnitShoot ( i ) ;
73070: LD_ADDR_VAR 0 5
73074: PUSH
73075: LD_VAR 0 4
73079: PPUSH
73080: CALL_OW 504
73084: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73085: LD_VAR 0 5
73089: PPUSH
73090: CALL_OW 255
73094: PUSH
73095: LD_VAR 0 1
73099: EQUAL
73100: IFFALSE 73116
// begin result := un ;
73102: LD_ADDR_VAR 0 3
73106: PUSH
73107: LD_VAR 0 5
73111: ST_TO_ADDR
// exit ;
73112: POP
73113: POP
73114: GO 73120
// end ; end ;
73116: GO 73067
73118: POP
73119: POP
// end ;
73120: LD_VAR 0 3
73124: RET
// export function GetCargoBay ( units ) ; begin
73125: LD_INT 0
73127: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73128: LD_ADDR_VAR 0 2
73132: PUSH
73133: LD_VAR 0 1
73137: PPUSH
73138: LD_INT 2
73140: PUSH
73141: LD_INT 34
73143: PUSH
73144: LD_INT 12
73146: PUSH
73147: EMPTY
73148: LIST
73149: LIST
73150: PUSH
73151: LD_INT 34
73153: PUSH
73154: LD_INT 51
73156: PUSH
73157: EMPTY
73158: LIST
73159: LIST
73160: PUSH
73161: LD_INT 34
73163: PUSH
73164: LD_INT 32
73166: PUSH
73167: EMPTY
73168: LIST
73169: LIST
73170: PUSH
73171: LD_INT 34
73173: PUSH
73174: LD_EXP 45
73178: PUSH
73179: EMPTY
73180: LIST
73181: LIST
73182: PUSH
73183: EMPTY
73184: LIST
73185: LIST
73186: LIST
73187: LIST
73188: LIST
73189: PPUSH
73190: CALL_OW 72
73194: ST_TO_ADDR
// end ;
73195: LD_VAR 0 2
73199: RET
// export function Negate ( value ) ; begin
73200: LD_INT 0
73202: PPUSH
// result := not value ;
73203: LD_ADDR_VAR 0 2
73207: PUSH
73208: LD_VAR 0 1
73212: NOT
73213: ST_TO_ADDR
// end ;
73214: LD_VAR 0 2
73218: RET
// export function Inc ( value ) ; begin
73219: LD_INT 0
73221: PPUSH
// result := value + 1 ;
73222: LD_ADDR_VAR 0 2
73226: PUSH
73227: LD_VAR 0 1
73231: PUSH
73232: LD_INT 1
73234: PLUS
73235: ST_TO_ADDR
// end ;
73236: LD_VAR 0 2
73240: RET
// export function Dec ( value ) ; begin
73241: LD_INT 0
73243: PPUSH
// result := value - 1 ;
73244: LD_ADDR_VAR 0 2
73248: PUSH
73249: LD_VAR 0 1
73253: PUSH
73254: LD_INT 1
73256: MINUS
73257: ST_TO_ADDR
// end ;
73258: LD_VAR 0 2
73262: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73263: LD_INT 0
73265: PPUSH
73266: PPUSH
73267: PPUSH
73268: PPUSH
73269: PPUSH
73270: PPUSH
73271: PPUSH
73272: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73273: LD_VAR 0 1
73277: PPUSH
73278: LD_VAR 0 2
73282: PPUSH
73283: CALL_OW 488
73287: NOT
73288: PUSH
73289: LD_VAR 0 3
73293: PPUSH
73294: LD_VAR 0 4
73298: PPUSH
73299: CALL_OW 488
73303: NOT
73304: OR
73305: IFFALSE 73318
// begin result := - 1 ;
73307: LD_ADDR_VAR 0 5
73311: PUSH
73312: LD_INT 1
73314: NEG
73315: ST_TO_ADDR
// exit ;
73316: GO 73553
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
73318: LD_ADDR_VAR 0 12
73322: PUSH
73323: LD_VAR 0 1
73327: PPUSH
73328: LD_VAR 0 2
73332: PPUSH
73333: LD_VAR 0 3
73337: PPUSH
73338: LD_VAR 0 4
73342: PPUSH
73343: CALL 72401 0 4
73347: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
73348: LD_ADDR_VAR 0 11
73352: PUSH
73353: LD_VAR 0 1
73357: PPUSH
73358: LD_VAR 0 2
73362: PPUSH
73363: LD_VAR 0 12
73367: PUSH
73368: LD_INT 1
73370: ARRAY
73371: PPUSH
73372: LD_VAR 0 12
73376: PUSH
73377: LD_INT 2
73379: ARRAY
73380: PPUSH
73381: CALL_OW 298
73385: ST_TO_ADDR
// distance := 9999 ;
73386: LD_ADDR_VAR 0 10
73390: PUSH
73391: LD_INT 9999
73393: ST_TO_ADDR
// for i := 0 to 5 do
73394: LD_ADDR_VAR 0 6
73398: PUSH
73399: DOUBLE
73400: LD_INT 0
73402: DEC
73403: ST_TO_ADDR
73404: LD_INT 5
73406: PUSH
73407: FOR_TO
73408: IFFALSE 73551
// begin _x := ShiftX ( x1 , i , centerDist ) ;
73410: LD_ADDR_VAR 0 7
73414: PUSH
73415: LD_VAR 0 1
73419: PPUSH
73420: LD_VAR 0 6
73424: PPUSH
73425: LD_VAR 0 11
73429: PPUSH
73430: CALL_OW 272
73434: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
73435: LD_ADDR_VAR 0 8
73439: PUSH
73440: LD_VAR 0 2
73444: PPUSH
73445: LD_VAR 0 6
73449: PPUSH
73450: LD_VAR 0 11
73454: PPUSH
73455: CALL_OW 273
73459: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73460: LD_VAR 0 7
73464: PPUSH
73465: LD_VAR 0 8
73469: PPUSH
73470: CALL_OW 488
73474: NOT
73475: IFFALSE 73479
// continue ;
73477: GO 73407
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
73479: LD_ADDR_VAR 0 9
73483: PUSH
73484: LD_VAR 0 12
73488: PUSH
73489: LD_INT 1
73491: ARRAY
73492: PPUSH
73493: LD_VAR 0 12
73497: PUSH
73498: LD_INT 2
73500: ARRAY
73501: PPUSH
73502: LD_VAR 0 7
73506: PPUSH
73507: LD_VAR 0 8
73511: PPUSH
73512: CALL_OW 298
73516: ST_TO_ADDR
// if tmp < distance then
73517: LD_VAR 0 9
73521: PUSH
73522: LD_VAR 0 10
73526: LESS
73527: IFFALSE 73549
// begin result := i ;
73529: LD_ADDR_VAR 0 5
73533: PUSH
73534: LD_VAR 0 6
73538: ST_TO_ADDR
// distance := tmp ;
73539: LD_ADDR_VAR 0 10
73543: PUSH
73544: LD_VAR 0 9
73548: ST_TO_ADDR
// end ; end ;
73549: GO 73407
73551: POP
73552: POP
// end ;
73553: LD_VAR 0 5
73557: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73558: LD_INT 0
73560: PPUSH
73561: PPUSH
// if not driver or not IsInUnit ( driver ) then
73562: LD_VAR 0 1
73566: NOT
73567: PUSH
73568: LD_VAR 0 1
73572: PPUSH
73573: CALL_OW 310
73577: NOT
73578: OR
73579: IFFALSE 73583
// exit ;
73581: GO 73673
// vehicle := IsInUnit ( driver ) ;
73583: LD_ADDR_VAR 0 3
73587: PUSH
73588: LD_VAR 0 1
73592: PPUSH
73593: CALL_OW 310
73597: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73598: LD_VAR 0 1
73602: PPUSH
73603: LD_STRING \
73605: PUSH
73606: LD_INT 0
73608: PUSH
73609: LD_INT 0
73611: PUSH
73612: LD_INT 0
73614: PUSH
73615: LD_INT 0
73617: PUSH
73618: LD_INT 0
73620: PUSH
73621: LD_INT 0
73623: PUSH
73624: EMPTY
73625: LIST
73626: LIST
73627: LIST
73628: LIST
73629: LIST
73630: LIST
73631: LIST
73632: PUSH
73633: LD_STRING E
73635: PUSH
73636: LD_INT 0
73638: PUSH
73639: LD_INT 0
73641: PUSH
73642: LD_VAR 0 3
73646: PUSH
73647: LD_INT 0
73649: PUSH
73650: LD_INT 0
73652: PUSH
73653: LD_INT 0
73655: PUSH
73656: EMPTY
73657: LIST
73658: LIST
73659: LIST
73660: LIST
73661: LIST
73662: LIST
73663: LIST
73664: PUSH
73665: EMPTY
73666: LIST
73667: LIST
73668: PPUSH
73669: CALL_OW 446
// end ;
73673: LD_VAR 0 2
73677: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73678: LD_INT 0
73680: PPUSH
73681: PPUSH
// if not driver or not IsInUnit ( driver ) then
73682: LD_VAR 0 1
73686: NOT
73687: PUSH
73688: LD_VAR 0 1
73692: PPUSH
73693: CALL_OW 310
73697: NOT
73698: OR
73699: IFFALSE 73703
// exit ;
73701: GO 73793
// vehicle := IsInUnit ( driver ) ;
73703: LD_ADDR_VAR 0 3
73707: PUSH
73708: LD_VAR 0 1
73712: PPUSH
73713: CALL_OW 310
73717: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73718: LD_VAR 0 1
73722: PPUSH
73723: LD_STRING \
73725: PUSH
73726: LD_INT 0
73728: PUSH
73729: LD_INT 0
73731: PUSH
73732: LD_INT 0
73734: PUSH
73735: LD_INT 0
73737: PUSH
73738: LD_INT 0
73740: PUSH
73741: LD_INT 0
73743: PUSH
73744: EMPTY
73745: LIST
73746: LIST
73747: LIST
73748: LIST
73749: LIST
73750: LIST
73751: LIST
73752: PUSH
73753: LD_STRING E
73755: PUSH
73756: LD_INT 0
73758: PUSH
73759: LD_INT 0
73761: PUSH
73762: LD_VAR 0 3
73766: PUSH
73767: LD_INT 0
73769: PUSH
73770: LD_INT 0
73772: PUSH
73773: LD_INT 0
73775: PUSH
73776: EMPTY
73777: LIST
73778: LIST
73779: LIST
73780: LIST
73781: LIST
73782: LIST
73783: LIST
73784: PUSH
73785: EMPTY
73786: LIST
73787: LIST
73788: PPUSH
73789: CALL_OW 447
// end ;
73793: LD_VAR 0 2
73797: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
73798: LD_INT 0
73800: PPUSH
73801: PPUSH
73802: PPUSH
// tmp := [ ] ;
73803: LD_ADDR_VAR 0 5
73807: PUSH
73808: EMPTY
73809: ST_TO_ADDR
// for i in units do
73810: LD_ADDR_VAR 0 4
73814: PUSH
73815: LD_VAR 0 1
73819: PUSH
73820: FOR_IN
73821: IFFALSE 73859
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
73823: LD_ADDR_VAR 0 5
73827: PUSH
73828: LD_VAR 0 5
73832: PPUSH
73833: LD_VAR 0 5
73837: PUSH
73838: LD_INT 1
73840: PLUS
73841: PPUSH
73842: LD_VAR 0 4
73846: PPUSH
73847: CALL_OW 256
73851: PPUSH
73852: CALL_OW 2
73856: ST_TO_ADDR
73857: GO 73820
73859: POP
73860: POP
// if not tmp then
73861: LD_VAR 0 5
73865: NOT
73866: IFFALSE 73870
// exit ;
73868: GO 73918
// if asc then
73870: LD_VAR 0 2
73874: IFFALSE 73898
// result := SortListByListAsc ( units , tmp ) else
73876: LD_ADDR_VAR 0 3
73880: PUSH
73881: LD_VAR 0 1
73885: PPUSH
73886: LD_VAR 0 5
73890: PPUSH
73891: CALL_OW 76
73895: ST_TO_ADDR
73896: GO 73918
// result := SortListByListDesc ( units , tmp ) ;
73898: LD_ADDR_VAR 0 3
73902: PUSH
73903: LD_VAR 0 1
73907: PPUSH
73908: LD_VAR 0 5
73912: PPUSH
73913: CALL_OW 77
73917: ST_TO_ADDR
// end ;
73918: LD_VAR 0 3
73922: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
73923: LD_INT 0
73925: PPUSH
73926: PPUSH
// task := GetTaskList ( mech ) ;
73927: LD_ADDR_VAR 0 4
73931: PUSH
73932: LD_VAR 0 1
73936: PPUSH
73937: CALL_OW 437
73941: ST_TO_ADDR
// if not task then
73942: LD_VAR 0 4
73946: NOT
73947: IFFALSE 73951
// exit ;
73949: GO 73993
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
73951: LD_ADDR_VAR 0 3
73955: PUSH
73956: LD_VAR 0 4
73960: PUSH
73961: LD_INT 1
73963: ARRAY
73964: PUSH
73965: LD_INT 1
73967: ARRAY
73968: PUSH
73969: LD_STRING r
73971: EQUAL
73972: PUSH
73973: LD_VAR 0 4
73977: PUSH
73978: LD_INT 1
73980: ARRAY
73981: PUSH
73982: LD_INT 4
73984: ARRAY
73985: PUSH
73986: LD_VAR 0 2
73990: EQUAL
73991: AND
73992: ST_TO_ADDR
// end ;
73993: LD_VAR 0 3
73997: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73998: LD_INT 0
74000: PPUSH
// SetDir ( unit , d ) ;
74001: LD_VAR 0 1
74005: PPUSH
74006: LD_VAR 0 4
74010: PPUSH
74011: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
74015: LD_VAR 0 1
74019: PPUSH
74020: LD_VAR 0 2
74024: PPUSH
74025: LD_VAR 0 3
74029: PPUSH
74030: LD_VAR 0 5
74034: PPUSH
74035: CALL_OW 48
// end ;
74039: LD_VAR 0 6
74043: RET
// export function ToNaturalNumber ( number ) ; begin
74044: LD_INT 0
74046: PPUSH
// result := number div 1 ;
74047: LD_ADDR_VAR 0 2
74051: PUSH
74052: LD_VAR 0 1
74056: PUSH
74057: LD_INT 1
74059: DIV
74060: ST_TO_ADDR
// if number < 0 then
74061: LD_VAR 0 1
74065: PUSH
74066: LD_INT 0
74068: LESS
74069: IFFALSE 74079
// result := 0 ;
74071: LD_ADDR_VAR 0 2
74075: PUSH
74076: LD_INT 0
74078: ST_TO_ADDR
// end ;
74079: LD_VAR 0 2
74083: RET
// export function SortByClass ( units , class ) ; var un ; begin
74084: LD_INT 0
74086: PPUSH
74087: PPUSH
// if not units or not class then
74088: LD_VAR 0 1
74092: NOT
74093: PUSH
74094: LD_VAR 0 2
74098: NOT
74099: OR
74100: IFFALSE 74104
// exit ;
74102: GO 74199
// result := [ ] ;
74104: LD_ADDR_VAR 0 3
74108: PUSH
74109: EMPTY
74110: ST_TO_ADDR
// for un in units do
74111: LD_ADDR_VAR 0 4
74115: PUSH
74116: LD_VAR 0 1
74120: PUSH
74121: FOR_IN
74122: IFFALSE 74197
// if GetClass ( un ) = class then
74124: LD_VAR 0 4
74128: PPUSH
74129: CALL_OW 257
74133: PUSH
74134: LD_VAR 0 2
74138: EQUAL
74139: IFFALSE 74166
// result := Insert ( result , 1 , un ) else
74141: LD_ADDR_VAR 0 3
74145: PUSH
74146: LD_VAR 0 3
74150: PPUSH
74151: LD_INT 1
74153: PPUSH
74154: LD_VAR 0 4
74158: PPUSH
74159: CALL_OW 2
74163: ST_TO_ADDR
74164: GO 74195
// result := Replace ( result , result + 1 , un ) ;
74166: LD_ADDR_VAR 0 3
74170: PUSH
74171: LD_VAR 0 3
74175: PPUSH
74176: LD_VAR 0 3
74180: PUSH
74181: LD_INT 1
74183: PLUS
74184: PPUSH
74185: LD_VAR 0 4
74189: PPUSH
74190: CALL_OW 1
74194: ST_TO_ADDR
74195: GO 74121
74197: POP
74198: POP
// end ;
74199: LD_VAR 0 3
74203: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74204: LD_INT 0
74206: PPUSH
74207: PPUSH
74208: PPUSH
74209: PPUSH
74210: PPUSH
74211: PPUSH
74212: PPUSH
// result := [ ] ;
74213: LD_ADDR_VAR 0 4
74217: PUSH
74218: EMPTY
74219: ST_TO_ADDR
// if x - r < 0 then
74220: LD_VAR 0 1
74224: PUSH
74225: LD_VAR 0 3
74229: MINUS
74230: PUSH
74231: LD_INT 0
74233: LESS
74234: IFFALSE 74246
// min_x := 0 else
74236: LD_ADDR_VAR 0 8
74240: PUSH
74241: LD_INT 0
74243: ST_TO_ADDR
74244: GO 74262
// min_x := x - r ;
74246: LD_ADDR_VAR 0 8
74250: PUSH
74251: LD_VAR 0 1
74255: PUSH
74256: LD_VAR 0 3
74260: MINUS
74261: ST_TO_ADDR
// if y - r < 0 then
74262: LD_VAR 0 2
74266: PUSH
74267: LD_VAR 0 3
74271: MINUS
74272: PUSH
74273: LD_INT 0
74275: LESS
74276: IFFALSE 74288
// min_y := 0 else
74278: LD_ADDR_VAR 0 7
74282: PUSH
74283: LD_INT 0
74285: ST_TO_ADDR
74286: GO 74304
// min_y := y - r ;
74288: LD_ADDR_VAR 0 7
74292: PUSH
74293: LD_VAR 0 2
74297: PUSH
74298: LD_VAR 0 3
74302: MINUS
74303: ST_TO_ADDR
// max_x := x + r ;
74304: LD_ADDR_VAR 0 9
74308: PUSH
74309: LD_VAR 0 1
74313: PUSH
74314: LD_VAR 0 3
74318: PLUS
74319: ST_TO_ADDR
// max_y := y + r ;
74320: LD_ADDR_VAR 0 10
74324: PUSH
74325: LD_VAR 0 2
74329: PUSH
74330: LD_VAR 0 3
74334: PLUS
74335: ST_TO_ADDR
// for _x = min_x to max_x do
74336: LD_ADDR_VAR 0 5
74340: PUSH
74341: DOUBLE
74342: LD_VAR 0 8
74346: DEC
74347: ST_TO_ADDR
74348: LD_VAR 0 9
74352: PUSH
74353: FOR_TO
74354: IFFALSE 74455
// for _y = min_y to max_y do
74356: LD_ADDR_VAR 0 6
74360: PUSH
74361: DOUBLE
74362: LD_VAR 0 7
74366: DEC
74367: ST_TO_ADDR
74368: LD_VAR 0 10
74372: PUSH
74373: FOR_TO
74374: IFFALSE 74451
// begin if not ValidHex ( _x , _y ) then
74376: LD_VAR 0 5
74380: PPUSH
74381: LD_VAR 0 6
74385: PPUSH
74386: CALL_OW 488
74390: NOT
74391: IFFALSE 74395
// continue ;
74393: GO 74373
// if GetResourceTypeXY ( _x , _y ) then
74395: LD_VAR 0 5
74399: PPUSH
74400: LD_VAR 0 6
74404: PPUSH
74405: CALL_OW 283
74409: IFFALSE 74449
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
74411: LD_ADDR_VAR 0 4
74415: PUSH
74416: LD_VAR 0 4
74420: PPUSH
74421: LD_VAR 0 4
74425: PUSH
74426: LD_INT 1
74428: PLUS
74429: PPUSH
74430: LD_VAR 0 5
74434: PUSH
74435: LD_VAR 0 6
74439: PUSH
74440: EMPTY
74441: LIST
74442: LIST
74443: PPUSH
74444: CALL_OW 1
74448: ST_TO_ADDR
// end ;
74449: GO 74373
74451: POP
74452: POP
74453: GO 74353
74455: POP
74456: POP
// end ;
74457: LD_VAR 0 4
74461: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
74462: LD_INT 0
74464: PPUSH
74465: PPUSH
74466: PPUSH
74467: PPUSH
74468: PPUSH
74469: PPUSH
74470: PPUSH
74471: PPUSH
// if not units then
74472: LD_VAR 0 1
74476: NOT
74477: IFFALSE 74481
// exit ;
74479: GO 75007
// result := UnitFilter ( units , [ f_ok ] ) ;
74481: LD_ADDR_VAR 0 3
74485: PUSH
74486: LD_VAR 0 1
74490: PPUSH
74491: LD_INT 50
74493: PUSH
74494: EMPTY
74495: LIST
74496: PPUSH
74497: CALL_OW 72
74501: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74502: LD_ADDR_VAR 0 8
74506: PUSH
74507: LD_VAR 0 1
74511: PUSH
74512: LD_INT 1
74514: ARRAY
74515: PPUSH
74516: CALL_OW 255
74520: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
74521: LD_ADDR_VAR 0 10
74525: PUSH
74526: LD_INT 29
74528: PUSH
74529: LD_EXP 48
74533: PUSH
74534: LD_INT 49
74536: PUSH
74537: EMPTY
74538: LIST
74539: LIST
74540: LIST
74541: ST_TO_ADDR
// if not result then
74542: LD_VAR 0 3
74546: NOT
74547: IFFALSE 74551
// exit ;
74549: GO 75007
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74551: LD_ADDR_VAR 0 5
74555: PUSH
74556: LD_INT 81
74558: PUSH
74559: LD_VAR 0 8
74563: PUSH
74564: EMPTY
74565: LIST
74566: LIST
74567: PPUSH
74568: CALL_OW 69
74572: ST_TO_ADDR
// for i in result do
74573: LD_ADDR_VAR 0 4
74577: PUSH
74578: LD_VAR 0 3
74582: PUSH
74583: FOR_IN
74584: IFFALSE 75005
// begin tag := GetTag ( i ) + 1 ;
74586: LD_ADDR_VAR 0 9
74590: PUSH
74591: LD_VAR 0 4
74595: PPUSH
74596: CALL_OW 110
74600: PUSH
74601: LD_INT 1
74603: PLUS
74604: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
74605: LD_ADDR_VAR 0 7
74609: PUSH
74610: LD_VAR 0 4
74614: PPUSH
74615: CALL_OW 250
74619: PPUSH
74620: LD_VAR 0 4
74624: PPUSH
74625: CALL_OW 251
74629: PPUSH
74630: LD_INT 6
74632: PPUSH
74633: CALL 74204 0 3
74637: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
74638: LD_VAR 0 4
74642: PPUSH
74643: CALL_OW 247
74647: PUSH
74648: LD_INT 2
74650: EQUAL
74651: PUSH
74652: LD_VAR 0 7
74656: AND
74657: PUSH
74658: LD_VAR 0 4
74662: PPUSH
74663: CALL_OW 264
74667: PUSH
74668: LD_VAR 0 10
74672: IN
74673: NOT
74674: AND
74675: IFFALSE 74714
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
74677: LD_VAR 0 4
74681: PPUSH
74682: LD_VAR 0 7
74686: PUSH
74687: LD_INT 1
74689: ARRAY
74690: PUSH
74691: LD_INT 1
74693: ARRAY
74694: PPUSH
74695: LD_VAR 0 7
74699: PUSH
74700: LD_INT 1
74702: ARRAY
74703: PUSH
74704: LD_INT 2
74706: ARRAY
74707: PPUSH
74708: CALL_OW 116
74712: GO 75003
// if path > tag then
74714: LD_VAR 0 2
74718: PUSH
74719: LD_VAR 0 9
74723: GREATER
74724: IFFALSE 74932
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
74726: LD_ADDR_VAR 0 6
74730: PUSH
74731: LD_VAR 0 5
74735: PPUSH
74736: LD_INT 91
74738: PUSH
74739: LD_VAR 0 4
74743: PUSH
74744: LD_INT 8
74746: PUSH
74747: EMPTY
74748: LIST
74749: LIST
74750: LIST
74751: PPUSH
74752: CALL_OW 72
74756: ST_TO_ADDR
// if nearEnemy then
74757: LD_VAR 0 6
74761: IFFALSE 74830
// begin if GetWeapon ( i ) = ru_time_lapser then
74763: LD_VAR 0 4
74767: PPUSH
74768: CALL_OW 264
74772: PUSH
74773: LD_INT 49
74775: EQUAL
74776: IFFALSE 74804
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
74778: LD_VAR 0 4
74782: PPUSH
74783: LD_VAR 0 6
74787: PPUSH
74788: LD_VAR 0 4
74792: PPUSH
74793: CALL_OW 74
74797: PPUSH
74798: CALL_OW 112
74802: GO 74828
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
74804: LD_VAR 0 4
74808: PPUSH
74809: LD_VAR 0 6
74813: PPUSH
74814: LD_VAR 0 4
74818: PPUSH
74819: CALL_OW 74
74823: PPUSH
74824: CALL_OW 115
// end else
74828: GO 74930
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
74830: LD_VAR 0 4
74834: PPUSH
74835: LD_VAR 0 2
74839: PUSH
74840: LD_VAR 0 9
74844: ARRAY
74845: PUSH
74846: LD_INT 1
74848: ARRAY
74849: PPUSH
74850: LD_VAR 0 2
74854: PUSH
74855: LD_VAR 0 9
74859: ARRAY
74860: PUSH
74861: LD_INT 2
74863: ARRAY
74864: PPUSH
74865: CALL_OW 297
74869: PUSH
74870: LD_INT 6
74872: GREATER
74873: IFFALSE 74916
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
74875: LD_VAR 0 4
74879: PPUSH
74880: LD_VAR 0 2
74884: PUSH
74885: LD_VAR 0 9
74889: ARRAY
74890: PUSH
74891: LD_INT 1
74893: ARRAY
74894: PPUSH
74895: LD_VAR 0 2
74899: PUSH
74900: LD_VAR 0 9
74904: ARRAY
74905: PUSH
74906: LD_INT 2
74908: ARRAY
74909: PPUSH
74910: CALL_OW 114
74914: GO 74930
// SetTag ( i , tag ) ;
74916: LD_VAR 0 4
74920: PPUSH
74921: LD_VAR 0 9
74925: PPUSH
74926: CALL_OW 109
// end else
74930: GO 75003
// if enemy then
74932: LD_VAR 0 5
74936: IFFALSE 75003
// begin if GetWeapon ( i ) = ru_time_lapser then
74938: LD_VAR 0 4
74942: PPUSH
74943: CALL_OW 264
74947: PUSH
74948: LD_INT 49
74950: EQUAL
74951: IFFALSE 74979
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
74953: LD_VAR 0 4
74957: PPUSH
74958: LD_VAR 0 5
74962: PPUSH
74963: LD_VAR 0 4
74967: PPUSH
74968: CALL_OW 74
74972: PPUSH
74973: CALL_OW 112
74977: GO 75003
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
74979: LD_VAR 0 4
74983: PPUSH
74984: LD_VAR 0 5
74988: PPUSH
74989: LD_VAR 0 4
74993: PPUSH
74994: CALL_OW 74
74998: PPUSH
74999: CALL_OW 115
// end ; end ;
75003: GO 74583
75005: POP
75006: POP
// end ;
75007: LD_VAR 0 3
75011: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
75012: LD_INT 0
75014: PPUSH
75015: PPUSH
75016: PPUSH
// if not unit or IsInUnit ( unit ) then
75017: LD_VAR 0 1
75021: NOT
75022: PUSH
75023: LD_VAR 0 1
75027: PPUSH
75028: CALL_OW 310
75032: OR
75033: IFFALSE 75037
// exit ;
75035: GO 75128
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
75037: LD_ADDR_VAR 0 4
75041: PUSH
75042: LD_VAR 0 1
75046: PPUSH
75047: CALL_OW 250
75051: PPUSH
75052: LD_VAR 0 2
75056: PPUSH
75057: LD_INT 1
75059: PPUSH
75060: CALL_OW 272
75064: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
75065: LD_ADDR_VAR 0 5
75069: PUSH
75070: LD_VAR 0 1
75074: PPUSH
75075: CALL_OW 251
75079: PPUSH
75080: LD_VAR 0 2
75084: PPUSH
75085: LD_INT 1
75087: PPUSH
75088: CALL_OW 273
75092: ST_TO_ADDR
// if ValidHex ( x , y ) then
75093: LD_VAR 0 4
75097: PPUSH
75098: LD_VAR 0 5
75102: PPUSH
75103: CALL_OW 488
75107: IFFALSE 75128
// ComTurnXY ( unit , x , y ) ;
75109: LD_VAR 0 1
75113: PPUSH
75114: LD_VAR 0 4
75118: PPUSH
75119: LD_VAR 0 5
75123: PPUSH
75124: CALL_OW 118
// end ;
75128: LD_VAR 0 3
75132: RET
// export function SeeUnits ( side , units ) ; var i ; begin
75133: LD_INT 0
75135: PPUSH
75136: PPUSH
// result := false ;
75137: LD_ADDR_VAR 0 3
75141: PUSH
75142: LD_INT 0
75144: ST_TO_ADDR
// if not units then
75145: LD_VAR 0 2
75149: NOT
75150: IFFALSE 75154
// exit ;
75152: GO 75199
// for i in units do
75154: LD_ADDR_VAR 0 4
75158: PUSH
75159: LD_VAR 0 2
75163: PUSH
75164: FOR_IN
75165: IFFALSE 75197
// if See ( side , i ) then
75167: LD_VAR 0 1
75171: PPUSH
75172: LD_VAR 0 4
75176: PPUSH
75177: CALL_OW 292
75181: IFFALSE 75195
// begin result := true ;
75183: LD_ADDR_VAR 0 3
75187: PUSH
75188: LD_INT 1
75190: ST_TO_ADDR
// exit ;
75191: POP
75192: POP
75193: GO 75199
// end ;
75195: GO 75164
75197: POP
75198: POP
// end ;
75199: LD_VAR 0 3
75203: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75204: LD_INT 0
75206: PPUSH
75207: PPUSH
75208: PPUSH
75209: PPUSH
// if not unit or not points then
75210: LD_VAR 0 1
75214: NOT
75215: PUSH
75216: LD_VAR 0 2
75220: NOT
75221: OR
75222: IFFALSE 75226
// exit ;
75224: GO 75316
// dist := 99999 ;
75226: LD_ADDR_VAR 0 5
75230: PUSH
75231: LD_INT 99999
75233: ST_TO_ADDR
// for i in points do
75234: LD_ADDR_VAR 0 4
75238: PUSH
75239: LD_VAR 0 2
75243: PUSH
75244: FOR_IN
75245: IFFALSE 75314
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75247: LD_ADDR_VAR 0 6
75251: PUSH
75252: LD_VAR 0 1
75256: PPUSH
75257: LD_VAR 0 4
75261: PUSH
75262: LD_INT 1
75264: ARRAY
75265: PPUSH
75266: LD_VAR 0 4
75270: PUSH
75271: LD_INT 2
75273: ARRAY
75274: PPUSH
75275: CALL_OW 297
75279: ST_TO_ADDR
// if tmpDist < dist then
75280: LD_VAR 0 6
75284: PUSH
75285: LD_VAR 0 5
75289: LESS
75290: IFFALSE 75312
// begin result := i ;
75292: LD_ADDR_VAR 0 3
75296: PUSH
75297: LD_VAR 0 4
75301: ST_TO_ADDR
// dist := tmpDist ;
75302: LD_ADDR_VAR 0 5
75306: PUSH
75307: LD_VAR 0 6
75311: ST_TO_ADDR
// end ; end ;
75312: GO 75244
75314: POP
75315: POP
// end ;
75316: LD_VAR 0 3
75320: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
75321: LD_INT 0
75323: PPUSH
// uc_side := side ;
75324: LD_ADDR_OWVAR 20
75328: PUSH
75329: LD_VAR 0 1
75333: ST_TO_ADDR
// uc_nation := 3 ;
75334: LD_ADDR_OWVAR 21
75338: PUSH
75339: LD_INT 3
75341: ST_TO_ADDR
// vc_chassis := 25 ;
75342: LD_ADDR_OWVAR 37
75346: PUSH
75347: LD_INT 25
75349: ST_TO_ADDR
// vc_engine := engine_siberite ;
75350: LD_ADDR_OWVAR 39
75354: PUSH
75355: LD_INT 3
75357: ST_TO_ADDR
// vc_control := control_computer ;
75358: LD_ADDR_OWVAR 38
75362: PUSH
75363: LD_INT 3
75365: ST_TO_ADDR
// vc_weapon := 59 ;
75366: LD_ADDR_OWVAR 40
75370: PUSH
75371: LD_INT 59
75373: ST_TO_ADDR
// result := CreateVehicle ;
75374: LD_ADDR_VAR 0 5
75378: PUSH
75379: CALL_OW 45
75383: ST_TO_ADDR
// SetDir ( result , d ) ;
75384: LD_VAR 0 5
75388: PPUSH
75389: LD_VAR 0 4
75393: PPUSH
75394: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
75398: LD_VAR 0 5
75402: PPUSH
75403: LD_VAR 0 2
75407: PPUSH
75408: LD_VAR 0 3
75412: PPUSH
75413: LD_INT 0
75415: PPUSH
75416: CALL_OW 48
// end ;
75420: LD_VAR 0 5
75424: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
75425: LD_INT 0
75427: PPUSH
75428: PPUSH
75429: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
75430: LD_ADDR_VAR 0 2
75434: PUSH
75435: LD_INT 0
75437: PUSH
75438: LD_INT 0
75440: PUSH
75441: LD_INT 0
75443: PUSH
75444: LD_INT 0
75446: PUSH
75447: EMPTY
75448: LIST
75449: LIST
75450: LIST
75451: LIST
75452: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
75453: LD_VAR 0 1
75457: NOT
75458: PUSH
75459: LD_VAR 0 1
75463: PPUSH
75464: CALL_OW 264
75468: PUSH
75469: LD_INT 12
75471: PUSH
75472: LD_INT 51
75474: PUSH
75475: LD_INT 32
75477: PUSH
75478: LD_EXP 45
75482: PUSH
75483: EMPTY
75484: LIST
75485: LIST
75486: LIST
75487: LIST
75488: IN
75489: NOT
75490: OR
75491: IFFALSE 75495
// exit ;
75493: GO 75593
// for i := 1 to 3 do
75495: LD_ADDR_VAR 0 3
75499: PUSH
75500: DOUBLE
75501: LD_INT 1
75503: DEC
75504: ST_TO_ADDR
75505: LD_INT 3
75507: PUSH
75508: FOR_TO
75509: IFFALSE 75591
// begin tmp := GetCargo ( cargo , i ) ;
75511: LD_ADDR_VAR 0 4
75515: PUSH
75516: LD_VAR 0 1
75520: PPUSH
75521: LD_VAR 0 3
75525: PPUSH
75526: CALL_OW 289
75530: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
75531: LD_ADDR_VAR 0 2
75535: PUSH
75536: LD_VAR 0 2
75540: PPUSH
75541: LD_VAR 0 3
75545: PPUSH
75546: LD_VAR 0 4
75550: PPUSH
75551: CALL_OW 1
75555: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
75556: LD_ADDR_VAR 0 2
75560: PUSH
75561: LD_VAR 0 2
75565: PPUSH
75566: LD_INT 4
75568: PPUSH
75569: LD_VAR 0 2
75573: PUSH
75574: LD_INT 4
75576: ARRAY
75577: PUSH
75578: LD_VAR 0 4
75582: PLUS
75583: PPUSH
75584: CALL_OW 1
75588: ST_TO_ADDR
// end ;
75589: GO 75508
75591: POP
75592: POP
// end ;
75593: LD_VAR 0 2
75597: RET
// export function Length ( array ) ; begin
75598: LD_INT 0
75600: PPUSH
// result := array + 0 ;
75601: LD_ADDR_VAR 0 2
75605: PUSH
75606: LD_VAR 0 1
75610: PUSH
75611: LD_INT 0
75613: PLUS
75614: ST_TO_ADDR
// end ;
75615: LD_VAR 0 2
75619: RET
// export function PrepareArray ( array ) ; begin
75620: LD_INT 0
75622: PPUSH
// result := array diff 0 ;
75623: LD_ADDR_VAR 0 2
75627: PUSH
75628: LD_VAR 0 1
75632: PUSH
75633: LD_INT 0
75635: DIFF
75636: ST_TO_ADDR
// if not result [ 1 ] then
75637: LD_VAR 0 2
75641: PUSH
75642: LD_INT 1
75644: ARRAY
75645: NOT
75646: IFFALSE 75666
// result := Delete ( result , 1 ) ;
75648: LD_ADDR_VAR 0 2
75652: PUSH
75653: LD_VAR 0 2
75657: PPUSH
75658: LD_INT 1
75660: PPUSH
75661: CALL_OW 3
75665: ST_TO_ADDR
// end ; end_of_file
75666: LD_VAR 0 2
75670: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75671: LD_VAR 0 1
75675: PUSH
75676: LD_INT 200
75678: DOUBLE
75679: GREATEREQUAL
75680: IFFALSE 75688
75682: LD_INT 299
75684: DOUBLE
75685: LESSEQUAL
75686: IFTRUE 75690
75688: GO 75722
75690: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75691: LD_VAR 0 1
75695: PPUSH
75696: LD_VAR 0 2
75700: PPUSH
75701: LD_VAR 0 3
75705: PPUSH
75706: LD_VAR 0 4
75710: PPUSH
75711: LD_VAR 0 5
75715: PPUSH
75716: CALL 14888 0 5
75720: GO 75799
75722: LD_INT 300
75724: DOUBLE
75725: GREATEREQUAL
75726: IFFALSE 75734
75728: LD_INT 399
75730: DOUBLE
75731: LESSEQUAL
75732: IFTRUE 75736
75734: GO 75798
75736: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75737: LD_VAR 0 1
75741: PPUSH
75742: LD_VAR 0 2
75746: PPUSH
75747: LD_VAR 0 3
75751: PPUSH
75752: LD_VAR 0 4
75756: PPUSH
75757: LD_VAR 0 5
75761: PPUSH
75762: LD_VAR 0 6
75766: PPUSH
75767: LD_VAR 0 7
75771: PPUSH
75772: LD_VAR 0 8
75776: PPUSH
75777: LD_VAR 0 9
75781: PPUSH
75782: LD_VAR 0 10
75786: PPUSH
75787: LD_VAR 0 11
75791: PPUSH
75792: CALL 31179 0 11
75796: GO 75799
75798: POP
// end ;
75799: PPOPN 11
75801: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75802: LD_VAR 0 1
75806: PPUSH
75807: LD_VAR 0 2
75811: PPUSH
75812: LD_VAR 0 3
75816: PPUSH
75817: LD_VAR 0 4
75821: PPUSH
75822: LD_VAR 0 5
75826: PPUSH
75827: CALL 14624 0 5
// end ; end_of_file
75831: PPOPN 5
75833: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75834: LD_VAR 0 1
75838: PPUSH
75839: LD_VAR 0 2
75843: PPUSH
75844: LD_VAR 0 3
75848: PPUSH
75849: LD_VAR 0 4
75853: PPUSH
75854: LD_VAR 0 5
75858: PPUSH
75859: LD_VAR 0 6
75863: PPUSH
75864: CALL 18872 0 6
// end ;
75868: PPOPN 6
75870: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
75871: LD_INT 0
75873: PPUSH
// begin if not units then
75874: LD_VAR 0 1
75878: NOT
75879: IFFALSE 75883
// exit ;
75881: GO 75883
// end ;
75883: PPOPN 7
75885: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
75886: CALL 18843 0 0
// end ;
75890: PPOPN 1
75892: END
