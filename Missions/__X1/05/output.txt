// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// PrepareNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 795 0 2
// PrepareArabian ;
  31: CALL 3281 0 0
// PrepareRussian ;
  35: CALL 4879 0 0
// Action ;
  39: CALL 9423 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 210: LD_ADDR_EXP 14
 214: PUSH
 215: LD_STRING 04_1_RuLabCaptured
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 30
 225: ST_TO_ADDR
// captureCounter := 0 ;
 226: LD_ADDR_EXP 18
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 234: LD_ADDR_EXP 19
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// flamethrowerBuilt := false ;
 242: LD_ADDR_EXP 20
 246: PUSH
 247: LD_INT 0
 249: ST_TO_ADDR
// end ;
 250: LD_VAR 0 1
 254: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 255: LD_EXP 10
 259: NOT
 260: PUSH
 261: LD_EXP 9
 265: NOT
 266: AND
 267: PUSH
 268: LD_EXP 39
 272: NOT
 273: AND
 274: PUSH
 275: LD_EXP 40
 279: NOT
 280: AND
 281: IFFALSE 293
 283: GO 285
 285: DISABLE
// SetAchievement ( ACH_EXT ) ;
 286: LD_STRING ACH_EXT
 288: PPUSH
 289: CALL_OW 543
 293: END
// every 0 0$1 trigger captureCounter >= 6 do
 294: LD_EXP 18
 298: PUSH
 299: LD_INT 6
 301: GREATEREQUAL
 302: IFFALSE 314
 304: GO 306
 306: DISABLE
// SetAchievement ( ACH_KEY ) ;
 307: LD_STRING ACH_KEY
 309: PPUSH
 310: CALL_OW 543
 314: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 315: LD_EXP 19
 319: PUSH
 320: LD_INT 3
 322: GREATEREQUAL
 323: IFFALSE 335
 325: GO 327
 327: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 328: LD_STRING ACH_CHEM
 330: PPUSH
 331: CALL_OW 543
 335: END
// every 0 0$1 trigger debug do var i ;
 336: LD_EXP 1
 340: IFFALSE 424
 342: GO 344
 344: DISABLE
 345: LD_INT 0
 347: PPUSH
// begin enable ;
 348: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 349: LD_ADDR_VAR 0 1
 353: PUSH
 354: LD_INT 22
 356: PUSH
 357: LD_INT 2
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PUSH
 364: LD_INT 3
 366: PUSH
 367: LD_INT 21
 369: PUSH
 370: LD_INT 3
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: PUSH
 381: EMPTY
 382: LIST
 383: LIST
 384: PPUSH
 385: CALL_OW 69
 389: PUSH
 390: FOR_IN
 391: IFFALSE 422
// if GetLives ( i ) < 1000 then
 393: LD_VAR 0 1
 397: PPUSH
 398: CALL_OW 256
 402: PUSH
 403: LD_INT 1000
 405: LESS
 406: IFFALSE 420
// SetLives ( i , 1000 ) ;
 408: LD_VAR 0 1
 412: PPUSH
 413: LD_INT 1000
 415: PPUSH
 416: CALL_OW 234
 420: GO 390
 422: POP
 423: POP
// end ; end_of_file
 424: PPOPN 1
 426: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 427: LD_INT 0
 429: PPUSH
 430: PPUSH
// if exist_mode then
 431: LD_VAR 0 2
 435: IFFALSE 460
// unit := CreateCharacter ( prefix & ident ) else
 437: LD_ADDR_VAR 0 5
 441: PUSH
 442: LD_VAR 0 3
 446: PUSH
 447: LD_VAR 0 1
 451: STR
 452: PPUSH
 453: CALL_OW 34
 457: ST_TO_ADDR
 458: GO 475
// unit := NewCharacter ( ident ) ;
 460: LD_ADDR_VAR 0 5
 464: PUSH
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 25
 474: ST_TO_ADDR
// result := unit ;
 475: LD_ADDR_VAR 0 4
 479: PUSH
 480: LD_VAR 0 5
 484: ST_TO_ADDR
// end ;
 485: LD_VAR 0 4
 489: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 490: LD_INT 0
 492: PPUSH
// uc_side := side ;
 493: LD_ADDR_OWVAR 20
 497: PUSH
 498: LD_VAR 0 1
 502: ST_TO_ADDR
// uc_nation := nation ;
 503: LD_ADDR_OWVAR 21
 507: PUSH
 508: LD_VAR 0 2
 512: ST_TO_ADDR
// vc_chassis := chassis ;
 513: LD_ADDR_OWVAR 37
 517: PUSH
 518: LD_VAR 0 3
 522: ST_TO_ADDR
// vc_engine := engine ;
 523: LD_ADDR_OWVAR 39
 527: PUSH
 528: LD_VAR 0 4
 532: ST_TO_ADDR
// vc_control := control ;
 533: LD_ADDR_OWVAR 38
 537: PUSH
 538: LD_VAR 0 5
 542: ST_TO_ADDR
// vc_weapon := weapon ;
 543: LD_ADDR_OWVAR 40
 547: PUSH
 548: LD_VAR 0 6
 552: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 553: LD_ADDR_OWVAR 41
 557: PUSH
 558: LD_VAR 0 7
 562: ST_TO_ADDR
// result := CreateVehicle ;
 563: LD_ADDR_VAR 0 8
 567: PUSH
 568: CALL_OW 45
 572: ST_TO_ADDR
// end ;
 573: LD_VAR 0 8
 577: RET
// export function SayX ( units , ident ) ; var i ; begin
 578: LD_INT 0
 580: PPUSH
 581: PPUSH
// result := false ;
 582: LD_ADDR_VAR 0 3
 586: PUSH
 587: LD_INT 0
 589: ST_TO_ADDR
// if not units then
 590: LD_VAR 0 1
 594: NOT
 595: IFFALSE 599
// exit ;
 597: GO 653
// for i in units do
 599: LD_ADDR_VAR 0 4
 603: PUSH
 604: LD_VAR 0 1
 608: PUSH
 609: FOR_IN
 610: IFFALSE 651
// if IsOk ( i ) then
 612: LD_VAR 0 4
 616: PPUSH
 617: CALL_OW 302
 621: IFFALSE 649
// begin Say ( i , ident ) ;
 623: LD_VAR 0 4
 627: PPUSH
 628: LD_VAR 0 2
 632: PPUSH
 633: CALL_OW 88
// result := i ;
 637: LD_ADDR_VAR 0 3
 641: PUSH
 642: LD_VAR 0 4
 646: ST_TO_ADDR
// break ;
 647: GO 651
// end ;
 649: GO 609
 651: POP
 652: POP
// end ;
 653: LD_VAR 0 3
 657: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 658: LD_INT 0
 660: PPUSH
 661: PPUSH
// InitUc ;
 662: CALL_OW 18
// InitHc ;
 666: CALL_OW 19
// uc_side := 0 ;
 670: LD_ADDR_OWVAR 20
 674: PUSH
 675: LD_INT 0
 677: ST_TO_ADDR
// uc_nation := 0 ;
 678: LD_ADDR_OWVAR 21
 682: PUSH
 683: LD_INT 0
 685: ST_TO_ADDR
// for i = 1 to amount do
 686: LD_ADDR_VAR 0 4
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_VAR 0 2
 700: PUSH
 701: FOR_TO
 702: IFFALSE 784
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 704: LD_ADDR_OWVAR 29
 708: PUSH
 709: LD_INT 9
 711: PPUSH
 712: LD_INT 12
 714: PPUSH
 715: CALL_OW 12
 719: PUSH
 720: LD_INT 9
 722: PPUSH
 723: LD_INT 12
 725: PPUSH
 726: CALL_OW 12
 730: PUSH
 731: EMPTY
 732: LIST
 733: LIST
 734: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 735: LD_ADDR_OWVAR 35
 739: PUSH
 740: LD_INT 1
 742: NEG
 743: PPUSH
 744: LD_INT 1
 746: PPUSH
 747: CALL_OW 12
 751: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 752: LD_INT 0
 754: PPUSH
 755: LD_INT 12
 757: PPUSH
 758: LD_INT 1
 760: PPUSH
 761: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 765: CALL_OW 44
 769: PPUSH
 770: LD_VAR 0 1
 774: PPUSH
 775: LD_INT 0
 777: PPUSH
 778: CALL_OW 49
// end ;
 782: GO 701
 784: POP
 785: POP
// InitHc ;
 786: CALL_OW 19
// end ;
 790: LD_VAR 0 3
 794: RET
// export function PrepareNature ( forest , swamp ) ; var i ; begin
 795: LD_INT 0
 797: PPUSH
 798: PPUSH
// uc_side := 0 ;
 799: LD_ADDR_OWVAR 20
 803: PUSH
 804: LD_INT 0
 806: ST_TO_ADDR
// uc_nation := 0 ;
 807: LD_ADDR_OWVAR 21
 811: PUSH
 812: LD_INT 0
 814: ST_TO_ADDR
// for i := 1 to 3 do
 815: LD_ADDR_VAR 0 4
 819: PUSH
 820: DOUBLE
 821: LD_INT 1
 823: DEC
 824: ST_TO_ADDR
 825: LD_INT 3
 827: PUSH
 828: FOR_TO
 829: IFFALSE 866
// begin hc_class := 21 ;
 831: LD_ADDR_OWVAR 28
 835: PUSH
 836: LD_INT 21
 838: ST_TO_ADDR
// hc_gallery :=  ;
 839: LD_ADDR_OWVAR 33
 843: PUSH
 844: LD_STRING 
 846: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 847: CALL_OW 44
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: LD_INT 0
 859: PPUSH
 860: CALL_OW 49
// end ;
 864: GO 828
 866: POP
 867: POP
// for i := 1 to 3 do
 868: LD_ADDR_VAR 0 4
 872: PUSH
 873: DOUBLE
 874: LD_INT 1
 876: DEC
 877: ST_TO_ADDR
 878: LD_INT 3
 880: PUSH
 881: FOR_TO
 882: IFFALSE 919
// begin hc_class := 18 ;
 884: LD_ADDR_OWVAR 28
 888: PUSH
 889: LD_INT 18
 891: ST_TO_ADDR
// hc_gallery :=  ;
 892: LD_ADDR_OWVAR 33
 896: PUSH
 897: LD_STRING 
 899: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 900: CALL_OW 44
 904: PPUSH
 905: LD_VAR 0 1
 909: PPUSH
 910: LD_INT 0
 912: PPUSH
 913: CALL_OW 49
// end ;
 917: GO 881
 919: POP
 920: POP
// for i := 1 to 3 do
 921: LD_ADDR_VAR 0 4
 925: PUSH
 926: DOUBLE
 927: LD_INT 1
 929: DEC
 930: ST_TO_ADDR
 931: LD_INT 3
 933: PUSH
 934: FOR_TO
 935: IFFALSE 972
// begin hc_class := 13 ;
 937: LD_ADDR_OWVAR 28
 941: PUSH
 942: LD_INT 13
 944: ST_TO_ADDR
// hc_gallery :=  ;
 945: LD_ADDR_OWVAR 33
 949: PUSH
 950: LD_STRING 
 952: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 953: CALL_OW 44
 957: PPUSH
 958: LD_VAR 0 1
 962: PPUSH
 963: LD_INT 0
 965: PPUSH
 966: CALL_OW 49
// end ;
 970: GO 934
 972: POP
 973: POP
// for i := 1 to 4 do
 974: LD_ADDR_VAR 0 4
 978: PUSH
 979: DOUBLE
 980: LD_INT 1
 982: DEC
 983: ST_TO_ADDR
 984: LD_INT 4
 986: PUSH
 987: FOR_TO
 988: IFFALSE 1025
// begin hc_class := class_frog ;
 990: LD_ADDR_OWVAR 28
 994: PUSH
 995: LD_INT 19
 997: ST_TO_ADDR
// hc_gallery :=  ;
 998: LD_ADDR_OWVAR 33
1002: PUSH
1003: LD_STRING 
1005: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
1006: CALL_OW 44
1010: PPUSH
1011: LD_VAR 0 2
1015: PPUSH
1016: LD_INT 0
1018: PPUSH
1019: CALL_OW 49
// end ;
1023: GO 987
1025: POP
1026: POP
// end ;
1027: LD_VAR 0 3
1031: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
1032: LD_INT 0
1034: PPUSH
1035: PPUSH
1036: PPUSH
// if not observer or not unit then
1037: LD_VAR 0 1
1041: NOT
1042: PUSH
1043: LD_VAR 0 2
1047: NOT
1048: OR
1049: IFFALSE 1053
// exit ;
1051: GO 1101
// if not See ( GetSide ( observer ) , unit ) then
1053: LD_VAR 0 1
1057: PPUSH
1058: CALL_OW 255
1062: PPUSH
1063: LD_VAR 0 2
1067: PPUSH
1068: CALL_OW 292
1072: NOT
1073: IFFALSE 1077
// exit ;
1075: GO 1101
// result := GetDistUnits ( observer , unit ) < 12 ;
1077: LD_ADDR_VAR 0 3
1081: PUSH
1082: LD_VAR 0 1
1086: PPUSH
1087: LD_VAR 0 2
1091: PPUSH
1092: CALL_OW 296
1096: PUSH
1097: LD_INT 12
1099: LESS
1100: ST_TO_ADDR
// end ;
1101: LD_VAR 0 3
1105: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1106: LD_INT 0
1108: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1109: LD_VAR 0 2
1113: PUSH
1114: LD_INT 1
1116: ARRAY
1117: PPUSH
1118: LD_VAR 0 2
1122: PUSH
1123: LD_INT 2
1125: ARRAY
1126: PPUSH
1127: CALL_OW 488
1131: PUSH
1132: LD_VAR 0 2
1136: PUSH
1137: LD_INT 1
1139: ARRAY
1140: PPUSH
1141: LD_VAR 0 2
1145: PUSH
1146: LD_INT 2
1148: ARRAY
1149: PPUSH
1150: CALL_OW 428
1154: PUSH
1155: LD_INT 0
1157: EQUAL
1158: AND
1159: IFFALSE 1193
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1161: LD_VAR 0 1
1165: PPUSH
1166: LD_VAR 0 2
1170: PUSH
1171: LD_INT 1
1173: ARRAY
1174: PPUSH
1175: LD_VAR 0 2
1179: PUSH
1180: LD_INT 2
1182: ARRAY
1183: PPUSH
1184: LD_VAR 0 3
1188: PPUSH
1189: CALL_OW 48
// end ;
1193: LD_VAR 0 4
1197: RET
// export function Video ( mode ) ; begin
1198: LD_INT 0
1200: PPUSH
// ingame_video = mode ;
1201: LD_ADDR_OWVAR 52
1205: PUSH
1206: LD_VAR 0 1
1210: ST_TO_ADDR
// interface_hidden = mode ;
1211: LD_ADDR_OWVAR 54
1215: PUSH
1216: LD_VAR 0 1
1220: ST_TO_ADDR
// end ;
1221: LD_VAR 0 2
1225: RET
// export function ReverseArray ( array ) ; var i ; begin
1226: LD_INT 0
1228: PPUSH
1229: PPUSH
// if not array then
1230: LD_VAR 0 1
1234: NOT
1235: IFFALSE 1239
// exit ;
1237: GO 1297
// result := [ ] ;
1239: LD_ADDR_VAR 0 2
1243: PUSH
1244: EMPTY
1245: ST_TO_ADDR
// for i := 1 to array do
1246: LD_ADDR_VAR 0 3
1250: PUSH
1251: DOUBLE
1252: LD_INT 1
1254: DEC
1255: ST_TO_ADDR
1256: LD_VAR 0 1
1260: PUSH
1261: FOR_TO
1262: IFFALSE 1295
// result := Insert ( result , 1 , array [ i ] ) ;
1264: LD_ADDR_VAR 0 2
1268: PUSH
1269: LD_VAR 0 2
1273: PPUSH
1274: LD_INT 1
1276: PPUSH
1277: LD_VAR 0 1
1281: PUSH
1282: LD_VAR 0 3
1286: ARRAY
1287: PPUSH
1288: CALL_OW 2
1292: ST_TO_ADDR
1293: GO 1261
1295: POP
1296: POP
// end ;
1297: LD_VAR 0 2
1301: RET
// export function ComExit ( unit ) ; begin
1302: LD_INT 0
1304: PPUSH
// result := IsInUnit ( unit ) ;
1305: LD_ADDR_VAR 0 2
1309: PUSH
1310: LD_VAR 0 1
1314: PPUSH
1315: CALL_OW 310
1319: ST_TO_ADDR
// if not result then
1320: LD_VAR 0 2
1324: NOT
1325: IFFALSE 1329
// exit ;
1327: GO 1364
// if GetType ( result ) = unit_vehicle then
1329: LD_VAR 0 2
1333: PPUSH
1334: CALL_OW 247
1338: PUSH
1339: LD_INT 2
1341: EQUAL
1342: IFFALSE 1355
// ComExitVehicle ( unit ) else
1344: LD_VAR 0 1
1348: PPUSH
1349: CALL_OW 121
1353: GO 1364
// ComExitBuilding ( unit ) ;
1355: LD_VAR 0 1
1359: PPUSH
1360: CALL_OW 122
// end ;
1364: LD_VAR 0 2
1368: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1369: LD_INT 0
1371: PPUSH
1372: PPUSH
// if not side or not nation then
1373: LD_VAR 0 1
1377: NOT
1378: PUSH
1379: LD_VAR 0 2
1383: NOT
1384: OR
1385: IFFALSE 1389
// exit ;
1387: GO 2153
// case nation of nation_american :
1389: LD_VAR 0 2
1393: PUSH
1394: LD_INT 1
1396: DOUBLE
1397: EQUAL
1398: IFTRUE 1402
1400: GO 1616
1402: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1403: LD_ADDR_VAR 0 4
1407: PUSH
1408: LD_INT 35
1410: PUSH
1411: LD_INT 45
1413: PUSH
1414: LD_INT 46
1416: PUSH
1417: LD_INT 47
1419: PUSH
1420: LD_INT 82
1422: PUSH
1423: LD_INT 83
1425: PUSH
1426: LD_INT 84
1428: PUSH
1429: LD_INT 85
1431: PUSH
1432: LD_INT 86
1434: PUSH
1435: LD_INT 1
1437: PUSH
1438: LD_INT 2
1440: PUSH
1441: LD_INT 6
1443: PUSH
1444: LD_INT 15
1446: PUSH
1447: LD_INT 16
1449: PUSH
1450: LD_INT 7
1452: PUSH
1453: LD_INT 12
1455: PUSH
1456: LD_INT 13
1458: PUSH
1459: LD_INT 10
1461: PUSH
1462: LD_INT 14
1464: PUSH
1465: LD_INT 20
1467: PUSH
1468: LD_INT 21
1470: PUSH
1471: LD_INT 22
1473: PUSH
1474: LD_INT 25
1476: PUSH
1477: LD_INT 32
1479: PUSH
1480: LD_INT 27
1482: PUSH
1483: LD_INT 36
1485: PUSH
1486: LD_INT 69
1488: PUSH
1489: LD_INT 39
1491: PUSH
1492: LD_INT 34
1494: PUSH
1495: LD_INT 40
1497: PUSH
1498: LD_INT 48
1500: PUSH
1501: LD_INT 49
1503: PUSH
1504: LD_INT 50
1506: PUSH
1507: LD_INT 51
1509: PUSH
1510: LD_INT 52
1512: PUSH
1513: LD_INT 53
1515: PUSH
1516: LD_INT 54
1518: PUSH
1519: LD_INT 55
1521: PUSH
1522: LD_INT 56
1524: PUSH
1525: LD_INT 57
1527: PUSH
1528: LD_INT 58
1530: PUSH
1531: LD_INT 59
1533: PUSH
1534: LD_INT 60
1536: PUSH
1537: LD_INT 61
1539: PUSH
1540: LD_INT 62
1542: PUSH
1543: LD_INT 80
1545: PUSH
1546: LD_INT 82
1548: PUSH
1549: LD_INT 83
1551: PUSH
1552: LD_INT 84
1554: PUSH
1555: LD_INT 85
1557: PUSH
1558: LD_INT 86
1560: PUSH
1561: EMPTY
1562: LIST
1563: LIST
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: LIST
1611: LIST
1612: LIST
1613: ST_TO_ADDR
1614: GO 2077
1616: LD_INT 2
1618: DOUBLE
1619: EQUAL
1620: IFTRUE 1624
1622: GO 1846
1624: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1625: LD_ADDR_VAR 0 4
1629: PUSH
1630: LD_INT 35
1632: PUSH
1633: LD_INT 45
1635: PUSH
1636: LD_INT 46
1638: PUSH
1639: LD_INT 47
1641: PUSH
1642: LD_INT 82
1644: PUSH
1645: LD_INT 83
1647: PUSH
1648: LD_INT 84
1650: PUSH
1651: LD_INT 85
1653: PUSH
1654: LD_INT 87
1656: PUSH
1657: LD_INT 70
1659: PUSH
1660: LD_INT 1
1662: PUSH
1663: LD_INT 11
1665: PUSH
1666: LD_INT 3
1668: PUSH
1669: LD_INT 4
1671: PUSH
1672: LD_INT 5
1674: PUSH
1675: LD_INT 6
1677: PUSH
1678: LD_INT 15
1680: PUSH
1681: LD_INT 18
1683: PUSH
1684: LD_INT 7
1686: PUSH
1687: LD_INT 17
1689: PUSH
1690: LD_INT 8
1692: PUSH
1693: LD_INT 20
1695: PUSH
1696: LD_INT 21
1698: PUSH
1699: LD_INT 22
1701: PUSH
1702: LD_INT 72
1704: PUSH
1705: LD_INT 26
1707: PUSH
1708: LD_INT 69
1710: PUSH
1711: LD_INT 39
1713: PUSH
1714: LD_INT 40
1716: PUSH
1717: LD_INT 41
1719: PUSH
1720: LD_INT 42
1722: PUSH
1723: LD_INT 43
1725: PUSH
1726: LD_INT 48
1728: PUSH
1729: LD_INT 49
1731: PUSH
1732: LD_INT 50
1734: PUSH
1735: LD_INT 51
1737: PUSH
1738: LD_INT 52
1740: PUSH
1741: LD_INT 53
1743: PUSH
1744: LD_INT 54
1746: PUSH
1747: LD_INT 55
1749: PUSH
1750: LD_INT 56
1752: PUSH
1753: LD_INT 60
1755: PUSH
1756: LD_INT 61
1758: PUSH
1759: LD_INT 62
1761: PUSH
1762: LD_INT 66
1764: PUSH
1765: LD_INT 67
1767: PUSH
1768: LD_INT 68
1770: PUSH
1771: LD_INT 81
1773: PUSH
1774: LD_INT 82
1776: PUSH
1777: LD_INT 83
1779: PUSH
1780: LD_INT 84
1782: PUSH
1783: LD_INT 85
1785: PUSH
1786: LD_INT 87
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: LIST
1843: ST_TO_ADDR
1844: GO 2077
1846: LD_INT 3
1848: DOUBLE
1849: EQUAL
1850: IFTRUE 1854
1852: GO 2076
1854: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1855: LD_ADDR_VAR 0 4
1859: PUSH
1860: LD_INT 46
1862: PUSH
1863: LD_INT 47
1865: PUSH
1866: LD_INT 1
1868: PUSH
1869: LD_INT 2
1871: PUSH
1872: LD_INT 82
1874: PUSH
1875: LD_INT 83
1877: PUSH
1878: LD_INT 84
1880: PUSH
1881: LD_INT 85
1883: PUSH
1884: LD_INT 86
1886: PUSH
1887: LD_INT 11
1889: PUSH
1890: LD_INT 9
1892: PUSH
1893: LD_INT 20
1895: PUSH
1896: LD_INT 19
1898: PUSH
1899: LD_INT 21
1901: PUSH
1902: LD_INT 24
1904: PUSH
1905: LD_INT 22
1907: PUSH
1908: LD_INT 25
1910: PUSH
1911: LD_INT 28
1913: PUSH
1914: LD_INT 29
1916: PUSH
1917: LD_INT 30
1919: PUSH
1920: LD_INT 31
1922: PUSH
1923: LD_INT 37
1925: PUSH
1926: LD_INT 38
1928: PUSH
1929: LD_INT 32
1931: PUSH
1932: LD_INT 27
1934: PUSH
1935: LD_INT 33
1937: PUSH
1938: LD_INT 69
1940: PUSH
1941: LD_INT 39
1943: PUSH
1944: LD_INT 34
1946: PUSH
1947: LD_INT 40
1949: PUSH
1950: LD_INT 71
1952: PUSH
1953: LD_INT 23
1955: PUSH
1956: LD_INT 44
1958: PUSH
1959: LD_INT 48
1961: PUSH
1962: LD_INT 49
1964: PUSH
1965: LD_INT 50
1967: PUSH
1968: LD_INT 51
1970: PUSH
1971: LD_INT 52
1973: PUSH
1974: LD_INT 53
1976: PUSH
1977: LD_INT 54
1979: PUSH
1980: LD_INT 55
1982: PUSH
1983: LD_INT 56
1985: PUSH
1986: LD_INT 57
1988: PUSH
1989: LD_INT 58
1991: PUSH
1992: LD_INT 59
1994: PUSH
1995: LD_INT 63
1997: PUSH
1998: LD_INT 64
2000: PUSH
2001: LD_INT 65
2003: PUSH
2004: LD_INT 82
2006: PUSH
2007: LD_INT 83
2009: PUSH
2010: LD_INT 84
2012: PUSH
2013: LD_INT 85
2015: PUSH
2016: LD_INT 86
2018: PUSH
2019: EMPTY
2020: LIST
2021: LIST
2022: LIST
2023: LIST
2024: LIST
2025: LIST
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: ST_TO_ADDR
2074: GO 2077
2076: POP
// if state > - 1 and state < 3 then
2077: LD_VAR 0 3
2081: PUSH
2082: LD_INT 1
2084: NEG
2085: GREATER
2086: PUSH
2087: LD_VAR 0 3
2091: PUSH
2092: LD_INT 3
2094: LESS
2095: AND
2096: IFFALSE 2153
// for i in result do
2098: LD_ADDR_VAR 0 5
2102: PUSH
2103: LD_VAR 0 4
2107: PUSH
2108: FOR_IN
2109: IFFALSE 2151
// if GetTech ( i , side ) <> state then
2111: LD_VAR 0 5
2115: PPUSH
2116: LD_VAR 0 1
2120: PPUSH
2121: CALL_OW 321
2125: PUSH
2126: LD_VAR 0 3
2130: NONEQUAL
2131: IFFALSE 2149
// result := result diff i ;
2133: LD_ADDR_VAR 0 4
2137: PUSH
2138: LD_VAR 0 4
2142: PUSH
2143: LD_VAR 0 5
2147: DIFF
2148: ST_TO_ADDR
2149: GO 2108
2151: POP
2152: POP
// end ;
2153: LD_VAR 0 4
2157: RET
// export function SortByDistanceXY ( x , y , list , asc ) ; var i , j , tmp ; begin
2158: LD_INT 0
2160: PPUSH
2161: PPUSH
2162: PPUSH
2163: PPUSH
// if not list then
2164: LD_VAR 0 3
2168: NOT
2169: IFFALSE 2173
// exit ;
2171: GO 2481
// result := [ ] ;
2173: LD_ADDR_VAR 0 5
2177: PUSH
2178: EMPTY
2179: ST_TO_ADDR
// for i in list do
2180: LD_ADDR_VAR 0 6
2184: PUSH
2185: LD_VAR 0 3
2189: PUSH
2190: FOR_IN
2191: IFFALSE 2393
// begin tmp := GetDistUnitXY ( i , x , y ) ;
2193: LD_ADDR_VAR 0 8
2197: PUSH
2198: LD_VAR 0 6
2202: PPUSH
2203: LD_VAR 0 1
2207: PPUSH
2208: LD_VAR 0 2
2212: PPUSH
2213: CALL_OW 297
2217: ST_TO_ADDR
// if not result then
2218: LD_VAR 0 5
2222: NOT
2223: IFFALSE 2249
// result := [ [ i , tmp ] ] else
2225: LD_ADDR_VAR 0 5
2229: PUSH
2230: LD_VAR 0 6
2234: PUSH
2235: LD_VAR 0 8
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: PUSH
2244: EMPTY
2245: LIST
2246: ST_TO_ADDR
2247: GO 2391
// begin if result [ result ] [ 2 ] < tmp then
2249: LD_VAR 0 5
2253: PUSH
2254: LD_VAR 0 5
2258: ARRAY
2259: PUSH
2260: LD_INT 2
2262: ARRAY
2263: PUSH
2264: LD_VAR 0 8
2268: LESS
2269: IFFALSE 2311
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
2271: LD_ADDR_VAR 0 5
2275: PUSH
2276: LD_VAR 0 5
2280: PPUSH
2281: LD_VAR 0 5
2285: PUSH
2286: LD_INT 1
2288: PLUS
2289: PPUSH
2290: LD_VAR 0 6
2294: PUSH
2295: LD_VAR 0 8
2299: PUSH
2300: EMPTY
2301: LIST
2302: LIST
2303: PPUSH
2304: CALL_OW 2
2308: ST_TO_ADDR
2309: GO 2391
// for j = 1 to result do
2311: LD_ADDR_VAR 0 7
2315: PUSH
2316: DOUBLE
2317: LD_INT 1
2319: DEC
2320: ST_TO_ADDR
2321: LD_VAR 0 5
2325: PUSH
2326: FOR_TO
2327: IFFALSE 2389
// begin if tmp < result [ j ] [ 2 ] then
2329: LD_VAR 0 8
2333: PUSH
2334: LD_VAR 0 5
2338: PUSH
2339: LD_VAR 0 7
2343: ARRAY
2344: PUSH
2345: LD_INT 2
2347: ARRAY
2348: LESS
2349: IFFALSE 2387
// begin result := Insert ( result , j , [ i , tmp ] ) ;
2351: LD_ADDR_VAR 0 5
2355: PUSH
2356: LD_VAR 0 5
2360: PPUSH
2361: LD_VAR 0 7
2365: PPUSH
2366: LD_VAR 0 6
2370: PUSH
2371: LD_VAR 0 8
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: PPUSH
2380: CALL_OW 2
2384: ST_TO_ADDR
// break ;
2385: GO 2389
// end ; end ;
2387: GO 2326
2389: POP
2390: POP
// end ; end ;
2391: GO 2190
2393: POP
2394: POP
// if result and not asc then
2395: LD_VAR 0 5
2399: PUSH
2400: LD_VAR 0 4
2404: NOT
2405: AND
2406: IFFALSE 2481
// begin tmp := result ;
2408: LD_ADDR_VAR 0 8
2412: PUSH
2413: LD_VAR 0 5
2417: ST_TO_ADDR
// for i = tmp downto 1 do
2418: LD_ADDR_VAR 0 6
2422: PUSH
2423: DOUBLE
2424: LD_VAR 0 8
2428: INC
2429: ST_TO_ADDR
2430: LD_INT 1
2432: PUSH
2433: FOR_DOWNTO
2434: IFFALSE 2479
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
2436: LD_ADDR_VAR 0 5
2440: PUSH
2441: LD_VAR 0 5
2445: PPUSH
2446: LD_VAR 0 8
2450: PUSH
2451: LD_VAR 0 6
2455: MINUS
2456: PUSH
2457: LD_INT 1
2459: PLUS
2460: PPUSH
2461: LD_VAR 0 8
2465: PUSH
2466: LD_VAR 0 6
2470: ARRAY
2471: PPUSH
2472: CALL_OW 1
2476: ST_TO_ADDR
2477: GO 2433
2479: POP
2480: POP
// end ; end ;
2481: LD_VAR 0 5
2485: RET
// export function SortByDistanceUnit ( unit , list , asc ) ; begin
2486: LD_INT 0
2488: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc ) ;
2489: LD_ADDR_VAR 0 4
2493: PUSH
2494: LD_VAR 0 1
2498: PPUSH
2499: CALL_OW 250
2503: PPUSH
2504: LD_VAR 0 1
2508: PPUSH
2509: CALL_OW 251
2513: PPUSH
2514: LD_VAR 0 2
2518: PPUSH
2519: LD_VAR 0 3
2523: PPUSH
2524: CALL 2158 0 4
2528: ST_TO_ADDR
// end ;
2529: LD_VAR 0 4
2533: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
2534: LD_INT 0
2536: PPUSH
2537: PPUSH
2538: PPUSH
2539: PPUSH
2540: PPUSH
// if not unit then
2541: LD_VAR 0 1
2545: NOT
2546: IFFALSE 2550
// exit ;
2548: GO 2752
// side := GetSide ( unit ) ;
2550: LD_ADDR_VAR 0 4
2554: PUSH
2555: LD_VAR 0 1
2559: PPUSH
2560: CALL_OW 255
2564: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
2565: LD_ADDR_VAR 0 5
2569: PUSH
2570: LD_INT 22
2572: PUSH
2573: LD_VAR 0 4
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: PUSH
2582: LD_INT 30
2584: PUSH
2585: LD_VAR 0 2
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PUSH
2594: EMPTY
2595: LIST
2596: LIST
2597: PPUSH
2598: CALL_OW 69
2602: ST_TO_ADDR
// if not tmp then
2603: LD_VAR 0 5
2607: NOT
2608: IFFALSE 2612
// exit ;
2610: GO 2752
// tmp := SortByDistanceUnit ( unit , tmp , true ) ;
2612: LD_ADDR_VAR 0 5
2616: PUSH
2617: LD_VAR 0 1
2621: PPUSH
2622: LD_VAR 0 5
2626: PPUSH
2627: LD_INT 1
2629: PPUSH
2630: CALL 2486 0 3
2634: ST_TO_ADDR
// places := 1 ;
2635: LD_ADDR_VAR 0 7
2639: PUSH
2640: LD_INT 1
2642: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
2643: LD_VAR 0 2
2647: PUSH
2648: LD_INT 0
2650: PUSH
2651: LD_INT 1
2653: PUSH
2654: LD_INT 4
2656: PUSH
2657: LD_INT 5
2659: PUSH
2660: LD_INT 2
2662: PUSH
2663: LD_INT 3
2665: PUSH
2666: LD_INT 6
2668: PUSH
2669: LD_INT 7
2671: PUSH
2672: LD_INT 8
2674: PUSH
2675: EMPTY
2676: LIST
2677: LIST
2678: LIST
2679: LIST
2680: LIST
2681: LIST
2682: LIST
2683: LIST
2684: LIST
2685: IN
2686: IFFALSE 2696
// places := 6 ;
2688: LD_ADDR_VAR 0 7
2692: PUSH
2693: LD_INT 6
2695: ST_TO_ADDR
// for i in tmp do
2696: LD_ADDR_VAR 0 6
2700: PUSH
2701: LD_VAR 0 5
2705: PUSH
2706: FOR_IN
2707: IFFALSE 2750
// begin if UnitsInside ( i ) - places <= 0 then
2709: LD_VAR 0 6
2713: PPUSH
2714: CALL_OW 313
2718: PUSH
2719: LD_VAR 0 7
2723: MINUS
2724: PUSH
2725: LD_INT 0
2727: LESSEQUAL
2728: IFFALSE 2734
// continue else
2730: GO 2706
2732: GO 2748
// begin result := i ;
2734: LD_ADDR_VAR 0 3
2738: PUSH
2739: LD_VAR 0 6
2743: ST_TO_ADDR
// exit ;
2744: POP
2745: POP
2746: GO 2752
// end ; end ;
2748: GO 2706
2750: POP
2751: POP
// end ;
2752: LD_VAR 0 3
2756: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
2757: LD_INT 0
2759: PPUSH
2760: PPUSH
2761: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
2762: LD_VAR 0 1
2766: NOT
2767: PUSH
2768: LD_VAR 0 2
2772: PUSH
2773: LD_INT 1
2775: PUSH
2776: LD_INT 2
2778: PUSH
2779: LD_INT 3
2781: PUSH
2782: LD_INT 4
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: LIST
2789: LIST
2790: IN
2791: NOT
2792: OR
2793: IFFALSE 2797
// exit ;
2795: GO 2889
// tmp := [ ] ;
2797: LD_ADDR_VAR 0 5
2801: PUSH
2802: EMPTY
2803: ST_TO_ADDR
// for i in units do
2804: LD_ADDR_VAR 0 4
2808: PUSH
2809: LD_VAR 0 1
2813: PUSH
2814: FOR_IN
2815: IFFALSE 2858
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
2817: LD_ADDR_VAR 0 5
2821: PUSH
2822: LD_VAR 0 5
2826: PPUSH
2827: LD_VAR 0 5
2831: PUSH
2832: LD_INT 1
2834: PLUS
2835: PPUSH
2836: LD_VAR 0 4
2840: PPUSH
2841: LD_VAR 0 2
2845: PPUSH
2846: CALL_OW 259
2850: PPUSH
2851: CALL_OW 2
2855: ST_TO_ADDR
2856: GO 2814
2858: POP
2859: POP
// if not tmp then
2860: LD_VAR 0 5
2864: NOT
2865: IFFALSE 2869
// exit ;
2867: GO 2889
// result := SortListByListDesc ( units , tmp ) ;
2869: LD_ADDR_VAR 0 3
2873: PUSH
2874: LD_VAR 0 1
2878: PPUSH
2879: LD_VAR 0 5
2883: PPUSH
2884: CALL_OW 77
2888: ST_TO_ADDR
// end ;
2889: LD_VAR 0 3
2893: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
2894: LD_INT 0
2896: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
2897: LD_VAR 0 1
2901: PPUSH
2902: LD_VAR 0 2
2906: PPUSH
2907: LD_VAR 0 3
2911: PPUSH
2912: LD_VAR 0 4
2916: PPUSH
2917: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
2921: LD_VAR 0 1
2925: PPUSH
2926: LD_VAR 0 2
2930: PPUSH
2931: LD_VAR 0 3
2935: PPUSH
2936: CALL_OW 331
// end ;
2940: LD_VAR 0 5
2944: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
2945: LD_INT 0
2947: PPUSH
// if not units then
2948: LD_VAR 0 1
2952: NOT
2953: IFFALSE 2957
// exit ;
2955: GO 3022
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) , menDialog ) then
2957: LD_VAR 0 1
2961: PPUSH
2962: LD_INT 26
2964: PUSH
2965: LD_INT 1
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: PPUSH
2972: CALL_OW 72
2976: PPUSH
2977: LD_VAR 0 2
2981: PPUSH
2982: CALL_OW 88
2986: NOT
2987: IFFALSE 3022
// Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
2989: LD_VAR 0 1
2993: PPUSH
2994: LD_INT 26
2996: PUSH
2997: LD_INT 2
2999: PUSH
3000: EMPTY
3001: LIST
3002: LIST
3003: PPUSH
3004: CALL_OW 72
3008: PUSH
3009: LD_INT 1
3011: ARRAY
3012: PPUSH
3013: LD_VAR 0 3
3017: PPUSH
3018: CALL_OW 88
// end ;
3022: LD_VAR 0 4
3026: RET
// export function SeeGroup ( side , group ) ; var i ; begin
3027: LD_INT 0
3029: PPUSH
3030: PPUSH
// if not group then
3031: LD_VAR 0 2
3035: NOT
3036: IFFALSE 3040
// exit ;
3038: GO 3085
// for i in group do
3040: LD_ADDR_VAR 0 4
3044: PUSH
3045: LD_VAR 0 2
3049: PUSH
3050: FOR_IN
3051: IFFALSE 3083
// if See ( side , i ) then
3053: LD_VAR 0 1
3057: PPUSH
3058: LD_VAR 0 4
3062: PPUSH
3063: CALL_OW 292
3067: IFFALSE 3081
// begin result := true ;
3069: LD_ADDR_VAR 0 3
3073: PUSH
3074: LD_INT 1
3076: ST_TO_ADDR
// exit ;
3077: POP
3078: POP
3079: GO 3085
// end ;
3081: GO 3050
3083: POP
3084: POP
// end ;
3085: LD_VAR 0 3
3089: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
3090: LD_INT 0
3092: PPUSH
3093: PPUSH
3094: PPUSH
3095: PPUSH
// if not unit or not area then
3096: LD_VAR 0 1
3100: NOT
3101: PUSH
3102: LD_VAR 0 2
3106: NOT
3107: OR
3108: IFFALSE 3112
// exit ;
3110: GO 3276
// tmp := AreaToList ( area , i ) ;
3112: LD_ADDR_VAR 0 6
3116: PUSH
3117: LD_VAR 0 2
3121: PPUSH
3122: LD_VAR 0 5
3126: PPUSH
3127: CALL_OW 517
3131: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
3132: LD_ADDR_VAR 0 5
3136: PUSH
3137: DOUBLE
3138: LD_INT 1
3140: DEC
3141: ST_TO_ADDR
3142: LD_VAR 0 6
3146: PUSH
3147: LD_INT 1
3149: ARRAY
3150: PUSH
3151: FOR_TO
3152: IFFALSE 3274
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
3154: LD_ADDR_VAR 0 7
3158: PUSH
3159: LD_VAR 0 6
3163: PUSH
3164: LD_INT 1
3166: ARRAY
3167: PUSH
3168: LD_VAR 0 5
3172: ARRAY
3173: PUSH
3174: LD_VAR 0 6
3178: PUSH
3179: LD_INT 2
3181: ARRAY
3182: PUSH
3183: LD_VAR 0 5
3187: ARRAY
3188: PUSH
3189: EMPTY
3190: LIST
3191: LIST
3192: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
3193: LD_VAR 0 7
3197: PUSH
3198: LD_INT 1
3200: ARRAY
3201: PPUSH
3202: LD_VAR 0 7
3206: PUSH
3207: LD_INT 2
3209: ARRAY
3210: PPUSH
3211: CALL_OW 428
3215: PUSH
3216: LD_INT 0
3218: EQUAL
3219: IFFALSE 3272
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
3221: LD_VAR 0 1
3225: PPUSH
3226: LD_VAR 0 7
3230: PUSH
3231: LD_INT 1
3233: ARRAY
3234: PPUSH
3235: LD_VAR 0 7
3239: PUSH
3240: LD_INT 2
3242: ARRAY
3243: PPUSH
3244: LD_VAR 0 3
3248: PPUSH
3249: CALL_OW 48
// result := IsPlaced ( unit ) ;
3253: LD_ADDR_VAR 0 4
3257: PUSH
3258: LD_VAR 0 1
3262: PPUSH
3263: CALL_OW 305
3267: ST_TO_ADDR
// exit ;
3268: POP
3269: POP
3270: GO 3276
// end ; end ;
3272: GO 3151
3274: POP
3275: POP
// end ; end_of_file
3276: LD_VAR 0 4
3280: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
3281: LD_INT 0
3283: PPUSH
3284: PPUSH
// uc_side := 2 ;
3285: LD_ADDR_OWVAR 20
3289: PUSH
3290: LD_INT 2
3292: ST_TO_ADDR
// uc_nation := 2 ;
3293: LD_ADDR_OWVAR 21
3297: PUSH
3298: LD_INT 2
3300: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
3301: LD_ADDR_EXP 21
3305: PUSH
3306: LD_STRING Heike
3308: PPUSH
3309: LD_EXP 1
3313: NOT
3314: PPUSH
3315: LD_EXP 2
3319: PPUSH
3320: CALL 427 0 3
3324: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
3325: LD_ADDR_EXP 24
3329: PUSH
3330: LD_STRING Ibrahim
3332: PPUSH
3333: LD_EXP 1
3337: NOT
3338: PPUSH
3339: LD_EXP 2
3343: PPUSH
3344: CALL 427 0 3
3348: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
3349: LD_ADDR_EXP 22
3353: PUSH
3354: LD_STRING Givi
3356: PPUSH
3357: LD_EXP 1
3361: NOT
3362: PPUSH
3363: LD_EXP 2
3367: PPUSH
3368: CALL 427 0 3
3372: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
3373: LD_ADDR_EXP 25
3377: PUSH
3378: LD_STRING Kamil
3380: PPUSH
3381: LD_EXP 1
3385: NOT
3386: PPUSH
3387: LD_EXP 2
3391: PPUSH
3392: CALL 427 0 3
3396: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
3397: LD_ADDR_EXP 26
3401: PUSH
3402: LD_STRING Kaia
3404: PPUSH
3405: LD_EXP 1
3409: NOT
3410: PPUSH
3411: LD_EXP 2
3415: PPUSH
3416: CALL 427 0 3
3420: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
3421: LD_ADDR_EXP 27
3425: PUSH
3426: LD_STRING Sophia
3428: PPUSH
3429: LD_EXP 1
3433: NOT
3434: PPUSH
3435: LD_EXP 2
3439: PPUSH
3440: CALL 427 0 3
3444: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
3445: LD_ADDR_EXP 28
3449: PUSH
3450: LD_STRING Markov
3452: PPUSH
3453: LD_EXP 1
3457: NOT
3458: PPUSH
3459: LD_EXP 2
3463: PPUSH
3464: CALL 427 0 3
3468: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
3469: LD_ADDR_EXP 33
3473: PUSH
3474: LD_STRING Aviradze
3476: PPUSH
3477: LD_EXP 1
3481: NOT
3482: PPUSH
3483: LD_EXP 2
3487: PPUSH
3488: CALL 427 0 3
3492: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
3493: LD_ADDR_EXP 32
3497: PUSH
3498: LD_STRING Kurt
3500: PPUSH
3501: LD_EXP 1
3505: NOT
3506: PPUSH
3507: LD_EXP 2
3511: PPUSH
3512: CALL 427 0 3
3516: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
3517: LD_ADDR_EXP 23
3521: PUSH
3522: LD_STRING Mike
3524: PPUSH
3525: LD_EXP 1
3529: NOT
3530: PPUSH
3531: LD_EXP 2
3535: PPUSH
3536: CALL 427 0 3
3540: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
3541: LD_ADDR_EXP 30
3545: PUSH
3546: LD_STRING Olaf
3548: PPUSH
3549: LD_INT 0
3551: PPUSH
3552: LD_STRING 
3554: PPUSH
3555: CALL 427 0 3
3559: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
3560: LD_ADDR_EXP 34
3564: PUSH
3565: LD_STRING 04_2_others
3567: PPUSH
3568: CALL_OW 31
3572: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
3573: LD_ADDR_EXP 36
3577: PUSH
3578: LD_STRING 04_2_apes
3580: PPUSH
3581: CALL_OW 31
3585: ST_TO_ADDR
// if hasFlamethrower then
3586: LD_EXP 3
3590: IFFALSE 3821
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
3592: LD_INT 70
3594: PPUSH
3595: LD_INT 2
3597: PPUSH
3598: LD_INT 2
3600: PPUSH
3601: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 ] [ Difficulty ] ] ] ] ;
3605: LD_ADDR_EXP 35
3609: PUSH
3610: LD_INT 13
3612: PUSH
3613: LD_INT 1
3615: PUSH
3616: LD_INT 1
3618: PUSH
3619: LD_INT 27
3621: PUSH
3622: LD_INT 2
3624: PUSH
3625: LD_INT 1000
3627: PUSH
3628: LD_INT 0
3630: PUSH
3631: LD_INT 0
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: PUSH
3638: EMPTY
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: PUSH
3647: LD_INT 13
3649: PUSH
3650: LD_INT 1
3652: PUSH
3653: LD_INT 1
3655: PUSH
3656: LD_INT 25
3658: PUSH
3659: LD_INT 2
3661: PUSH
3662: LD_INT 1000
3664: PUSH
3665: LD_INT 0
3667: PUSH
3668: LD_INT 0
3670: PUSH
3671: EMPTY
3672: LIST
3673: LIST
3674: PUSH
3675: EMPTY
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: LIST
3683: PUSH
3684: LD_INT 13
3686: PUSH
3687: LD_INT 1
3689: PUSH
3690: LD_INT 1
3692: PUSH
3693: LD_INT 26
3695: PUSH
3696: LD_INT 2
3698: PUSH
3699: LD_INT 1000
3701: PUSH
3702: LD_INT 0
3704: PUSH
3705: LD_INT 0
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: PUSH
3721: LD_INT 13
3723: PUSH
3724: LD_INT 1
3726: PUSH
3727: LD_INT 1
3729: PUSH
3730: LD_INT 27
3732: PUSH
3733: LD_INT 2
3735: PUSH
3736: LD_INT 1000
3738: PUSH
3739: LD_INT 0
3741: PUSH
3742: LD_INT 0
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: PUSH
3749: EMPTY
3750: LIST
3751: LIST
3752: LIST
3753: LIST
3754: LIST
3755: LIST
3756: LIST
3757: PUSH
3758: LD_INT 13
3760: PUSH
3761: LD_INT 1
3763: PUSH
3764: LD_INT 1
3766: PUSH
3767: LD_INT 32
3769: PUSH
3770: LD_INT 2
3772: PUSH
3773: LD_INT 1000
3775: PUSH
3776: LD_INT 0
3778: PUSH
3779: LD_INT 60
3781: PUSH
3782: LD_INT 40
3784: PUSH
3785: LD_INT 20
3787: PUSH
3788: EMPTY
3789: LIST
3790: LIST
3791: LIST
3792: PUSH
3793: LD_OWVAR 67
3797: ARRAY
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: ST_TO_ADDR
// end else
3819: GO 4035
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 ] [ Difficulty ] ] ] ] ;
3821: LD_ADDR_EXP 35
3825: PUSH
3826: LD_INT 13
3828: PUSH
3829: LD_INT 1
3831: PUSH
3832: LD_INT 1
3834: PUSH
3835: LD_INT 25
3837: PUSH
3838: LD_INT 2
3840: PUSH
3841: LD_INT 1000
3843: PUSH
3844: LD_INT 0
3846: PUSH
3847: LD_INT 0
3849: PUSH
3850: EMPTY
3851: LIST
3852: LIST
3853: PUSH
3854: EMPTY
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: PUSH
3863: LD_INT 13
3865: PUSH
3866: LD_INT 1
3868: PUSH
3869: LD_INT 1
3871: PUSH
3872: LD_INT 27
3874: PUSH
3875: LD_INT 2
3877: PUSH
3878: LD_INT 1000
3880: PUSH
3881: LD_INT 0
3883: PUSH
3884: LD_INT 0
3886: PUSH
3887: EMPTY
3888: LIST
3889: LIST
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: PUSH
3900: LD_INT 13
3902: PUSH
3903: LD_INT 1
3905: PUSH
3906: LD_INT 1
3908: PUSH
3909: LD_INT 24
3911: PUSH
3912: LD_INT 2
3914: PUSH
3915: LD_INT 1000
3917: PUSH
3918: LD_INT 0
3920: PUSH
3921: LD_INT 0
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: PUSH
3937: LD_INT 13
3939: PUSH
3940: LD_INT 1
3942: PUSH
3943: LD_INT 1
3945: PUSH
3946: LD_INT 27
3948: PUSH
3949: LD_INT 2
3951: PUSH
3952: LD_INT 1000
3954: PUSH
3955: LD_INT 0
3957: PUSH
3958: LD_INT 0
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: LIST
3972: LIST
3973: PUSH
3974: LD_INT 13
3976: PUSH
3977: LD_INT 1
3979: PUSH
3980: LD_INT 1
3982: PUSH
3983: LD_INT 32
3985: PUSH
3986: LD_INT 2
3988: PUSH
3989: LD_INT 1000
3991: PUSH
3992: LD_INT 0
3994: PUSH
3995: LD_INT 50
3997: PUSH
3998: LD_INT 30
4000: PUSH
4001: LD_INT 20
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: LIST
4008: PUSH
4009: LD_OWVAR 67
4013: ARRAY
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: ST_TO_ADDR
// end ; uc_side := 5 ;
4035: LD_ADDR_OWVAR 20
4039: PUSH
4040: LD_INT 5
4042: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
4043: LD_ADDR_EXP 29
4047: PUSH
4048: LD_STRING Abdul
4050: PPUSH
4051: LD_INT 0
4053: PPUSH
4054: LD_STRING 
4056: PPUSH
4057: CALL 427 0 3
4061: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
4062: LD_ADDR_EXP 31
4066: PUSH
4067: LD_STRING Omar
4069: PPUSH
4070: LD_INT 0
4072: PPUSH
4073: LD_STRING 
4075: PPUSH
4076: CALL 427 0 3
4080: ST_TO_ADDR
// end ;
4081: LD_VAR 0 1
4085: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
4086: LD_INT 0
4088: PPUSH
4089: PPUSH
4090: PPUSH
4091: PPUSH
4092: PPUSH
// pfx := 04_1_ ;
4093: LD_ADDR_VAR 0 2
4097: PUSH
4098: LD_STRING 04_1_
4100: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4101: LD_INT 35
4103: PPUSH
4104: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
4108: LD_INT 3
4110: PPUSH
4111: LD_INT 2
4113: PPUSH
4114: CALL_OW 428
4118: NOT
4119: IFFALSE 4101
// tmp := [ ] ;
4121: LD_ADDR_VAR 0 4
4125: PUSH
4126: EMPTY
4127: ST_TO_ADDR
// uc_side := 5 ;
4128: LD_ADDR_OWVAR 20
4132: PUSH
4133: LD_INT 5
4135: ST_TO_ADDR
// uc_nation := 2 ;
4136: LD_ADDR_OWVAR 21
4140: PUSH
4141: LD_INT 2
4143: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
4144: LD_ADDR_EXP 33
4148: PUSH
4149: LD_STRING Aviradze_L
4151: PPUSH
4152: LD_EXP 1
4156: NOT
4157: PPUSH
4158: LD_VAR 0 2
4162: PPUSH
4163: CALL 427 0 3
4167: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
4168: LD_EXP 33
4172: PPUSH
4173: LD_INT 2
4175: PPUSH
4176: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
4180: LD_EXP 33
4184: PPUSH
4185: LD_INT 14
4187: PPUSH
4188: LD_INT 0
4190: PPUSH
4191: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
4195: LD_EXP 33
4199: PPUSH
4200: LD_INT 8
4202: PPUSH
4203: LD_INT 6
4205: PPUSH
4206: CALL_OW 111
// AddComHold ( Aviradze ) ;
4210: LD_EXP 33
4214: PPUSH
4215: CALL_OW 200
// tmp := [ Aviradze ] ;
4219: LD_ADDR_VAR 0 4
4223: PUSH
4224: LD_EXP 33
4228: PUSH
4229: EMPTY
4230: LIST
4231: ST_TO_ADDR
// wait ( 0 0$2 ) ;
4232: LD_INT 70
4234: PPUSH
4235: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
4239: LD_STRING Ibrahim_L
4241: PPUSH
4242: LD_EXP 1
4246: NOT
4247: PPUSH
4248: LD_VAR 0 2
4252: PPUSH
4253: CALL 427 0 3
4257: IFFALSE 4357
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
4259: LD_ADDR_EXP 24
4263: PUSH
4264: LD_STRING Ibrahim_L
4266: PPUSH
4267: LD_EXP 1
4271: NOT
4272: PPUSH
4273: LD_VAR 0 2
4277: PPUSH
4278: CALL 427 0 3
4282: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
4283: LD_EXP 24
4287: PPUSH
4288: LD_INT 2
4290: PPUSH
4291: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
4295: LD_EXP 24
4299: PPUSH
4300: LD_INT 14
4302: PPUSH
4303: LD_INT 0
4305: PPUSH
4306: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
4310: LD_EXP 24
4314: PPUSH
4315: LD_INT 8
4317: PPUSH
4318: LD_INT 7
4320: PPUSH
4321: CALL_OW 111
// AddComHold ( Ibrahim ) ;
4325: LD_EXP 24
4329: PPUSH
4330: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
4334: LD_ADDR_VAR 0 4
4338: PUSH
4339: LD_VAR 0 4
4343: PUSH
4344: LD_EXP 24
4348: ADD
4349: ST_TO_ADDR
// wait ( 0 0$2 ) ;
4350: LD_INT 70
4352: PPUSH
4353: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
4357: LD_STRING Kaia_L
4359: PPUSH
4360: LD_EXP 1
4364: NOT
4365: PPUSH
4366: LD_VAR 0 2
4370: PPUSH
4371: CALL 427 0 3
4375: IFFALSE 4475
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
4377: LD_ADDR_EXP 26
4381: PUSH
4382: LD_STRING Kaia_L
4384: PPUSH
4385: LD_EXP 1
4389: NOT
4390: PPUSH
4391: LD_VAR 0 2
4395: PPUSH
4396: CALL 427 0 3
4400: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
4401: LD_EXP 26
4405: PPUSH
4406: LD_INT 2
4408: PPUSH
4409: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
4413: LD_EXP 26
4417: PPUSH
4418: LD_INT 14
4420: PPUSH
4421: LD_INT 0
4423: PPUSH
4424: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
4428: LD_EXP 26
4432: PPUSH
4433: LD_INT 8
4435: PPUSH
4436: LD_INT 7
4438: PPUSH
4439: CALL_OW 111
// AddComHold ( Kaia ) ;
4443: LD_EXP 26
4447: PPUSH
4448: CALL_OW 200
// tmp := tmp ^ Kaia ;
4452: LD_ADDR_VAR 0 4
4456: PUSH
4457: LD_VAR 0 4
4461: PUSH
4462: LD_EXP 26
4466: ADD
4467: ST_TO_ADDR
// wait ( 0 0$2 ) ;
4468: LD_INT 70
4470: PPUSH
4471: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
4475: LD_STRING Kamil_L
4477: PPUSH
4478: LD_EXP 1
4482: NOT
4483: PPUSH
4484: LD_VAR 0 2
4488: PPUSH
4489: CALL 427 0 3
4493: IFFALSE 4593
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
4495: LD_ADDR_EXP 25
4499: PUSH
4500: LD_STRING Kamil_L
4502: PPUSH
4503: LD_EXP 1
4507: NOT
4508: PPUSH
4509: LD_VAR 0 2
4513: PPUSH
4514: CALL 427 0 3
4518: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
4519: LD_EXP 25
4523: PPUSH
4524: LD_INT 2
4526: PPUSH
4527: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
4531: LD_EXP 25
4535: PPUSH
4536: LD_INT 14
4538: PPUSH
4539: LD_INT 0
4541: PPUSH
4542: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
4546: LD_EXP 25
4550: PPUSH
4551: LD_INT 8
4553: PPUSH
4554: LD_INT 7
4556: PPUSH
4557: CALL_OW 111
// AddComHold ( Kamil ) ;
4561: LD_EXP 25
4565: PPUSH
4566: CALL_OW 200
// tmp := tmp ^ Kamil ;
4570: LD_ADDR_VAR 0 4
4574: PUSH
4575: LD_VAR 0 4
4579: PUSH
4580: LD_EXP 25
4584: ADD
4585: ST_TO_ADDR
// wait ( 0 0$2 ) ;
4586: LD_INT 70
4588: PPUSH
4589: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
4593: LD_STRING Sophia_L
4595: PPUSH
4596: LD_EXP 1
4600: NOT
4601: PPUSH
4602: LD_VAR 0 2
4606: PPUSH
4607: CALL 427 0 3
4611: IFFALSE 4711
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
4613: LD_ADDR_EXP 27
4617: PUSH
4618: LD_STRING Sophia_L
4620: PPUSH
4621: LD_EXP 1
4625: NOT
4626: PPUSH
4627: LD_VAR 0 2
4631: PPUSH
4632: CALL 427 0 3
4636: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
4637: LD_EXP 27
4641: PPUSH
4642: LD_INT 2
4644: PPUSH
4645: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
4649: LD_EXP 27
4653: PPUSH
4654: LD_INT 14
4656: PPUSH
4657: LD_INT 0
4659: PPUSH
4660: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
4664: LD_EXP 27
4668: PPUSH
4669: LD_INT 9
4671: PPUSH
4672: LD_INT 6
4674: PPUSH
4675: CALL_OW 111
// AddComHold ( Sophia ) ;
4679: LD_EXP 27
4683: PPUSH
4684: CALL_OW 200
// tmp := tmp ^ Sophia ;
4688: LD_ADDR_VAR 0 4
4692: PUSH
4693: LD_VAR 0 4
4697: PUSH
4698: LD_EXP 27
4702: ADD
4703: ST_TO_ADDR
// wait ( 0 0$2 ) ;
4704: LD_INT 70
4706: PPUSH
4707: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
4711: LD_ADDR_VAR 0 5
4715: PUSH
4716: LD_STRING 04_1_others_L
4718: PPUSH
4719: CALL_OW 31
4723: ST_TO_ADDR
// if tmp2 then
4724: LD_VAR 0 5
4728: IFFALSE 4825
// for i in tmp2 do
4730: LD_ADDR_VAR 0 3
4734: PUSH
4735: LD_VAR 0 5
4739: PUSH
4740: FOR_IN
4741: IFFALSE 4823
// begin SetDir ( i , 2 ) ;
4743: LD_VAR 0 3
4747: PPUSH
4748: LD_INT 2
4750: PPUSH
4751: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
4755: LD_VAR 0 3
4759: PPUSH
4760: LD_INT 14
4762: PPUSH
4763: LD_INT 0
4765: PPUSH
4766: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
4770: LD_ADDR_EXP 34
4774: PUSH
4775: LD_EXP 34
4779: PPUSH
4780: LD_EXP 34
4784: PUSH
4785: LD_INT 1
4787: PLUS
4788: PPUSH
4789: LD_VAR 0 3
4793: PPUSH
4794: CALL_OW 1
4798: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
4799: LD_VAR 0 3
4803: PPUSH
4804: LD_INT 17
4806: PPUSH
4807: LD_INT 14
4809: PPUSH
4810: CALL_OW 111
// wait ( 0 0$2 ) ;
4814: LD_INT 70
4816: PPUSH
4817: CALL_OW 67
// end ;
4821: GO 4740
4823: POP
4824: POP
// for i in tmp union tmp2 do
4825: LD_ADDR_VAR 0 3
4829: PUSH
4830: LD_VAR 0 4
4834: PUSH
4835: LD_VAR 0 5
4839: UNION
4840: PUSH
4841: FOR_IN
4842: IFFALSE 4872
// begin SetSide ( i , 2 ) ;
4844: LD_VAR 0 3
4848: PPUSH
4849: LD_INT 2
4851: PPUSH
4852: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
4856: LD_VAR 0 3
4860: PPUSH
4861: LD_EXP 21
4865: PPUSH
4866: CALL_OW 112
// end ;
4870: GO 4841
4872: POP
4873: POP
// end ; end_of_file
4874: LD_VAR 0 1
4878: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
4879: LD_INT 0
4881: PPUSH
4882: PPUSH
4883: PPUSH
// uc_side := 3 ;
4884: LD_ADDR_OWVAR 20
4888: PUSH
4889: LD_INT 3
4891: ST_TO_ADDR
// uc_nation := 3 ;
4892: LD_ADDR_OWVAR 21
4896: PUSH
4897: LD_INT 3
4899: ST_TO_ADDR
// crossRoadGuard := [ ] ;
4900: LD_ADDR_EXP 37
4904: PUSH
4905: EMPTY
4906: ST_TO_ADDR
// oilBaseGuard := [ ] ;
4907: LD_ADDR_EXP 38
4911: PUSH
4912: EMPTY
4913: ST_TO_ADDR
// ruConvoySquad := [ ] ;
4914: LD_ADDR_EXP 41
4918: PUSH
4919: EMPTY
4920: ST_TO_ADDR
// for i := 1 to 2 do
4921: LD_ADDR_VAR 0 2
4925: PUSH
4926: DOUBLE
4927: LD_INT 1
4929: DEC
4930: ST_TO_ADDR
4931: LD_INT 2
4933: PUSH
4934: FOR_TO
4935: IFFALSE 5070
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4937: LD_INT 0
4939: PPUSH
4940: LD_INT 1
4942: PPUSH
4943: LD_INT 3
4945: PUSH
4946: LD_INT 4
4948: PUSH
4949: LD_INT 5
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: LIST
4956: PUSH
4957: LD_OWVAR 67
4961: ARRAY
4962: PPUSH
4963: CALL_OW 380
// un := CreateHuman ;
4967: LD_ADDR_VAR 0 3
4971: PUSH
4972: CALL_OW 44
4976: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
4977: LD_ADDR_EXP 37
4981: PUSH
4982: LD_EXP 37
4986: PPUSH
4987: LD_EXP 37
4991: PUSH
4992: LD_INT 1
4994: PLUS
4995: PPUSH
4996: LD_VAR 0 3
5000: PPUSH
5001: CALL_OW 1
5005: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
5006: LD_VAR 0 3
5010: PPUSH
5011: LD_INT 100
5013: PPUSH
5014: LD_INT 63
5016: PPUSH
5017: LD_INT 3
5019: PPUSH
5020: LD_INT 0
5022: PPUSH
5023: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
5027: LD_VAR 0 3
5031: PPUSH
5032: LD_INT 97
5034: PPUSH
5035: LD_INT 64
5037: PPUSH
5038: CALL_OW 428
5042: PUSH
5043: LD_INT 98
5045: PPUSH
5046: LD_INT 58
5048: PPUSH
5049: CALL_OW 428
5053: PUSH
5054: EMPTY
5055: LIST
5056: LIST
5057: PUSH
5058: LD_VAR 0 2
5062: ARRAY
5063: PPUSH
5064: CALL_OW 120
// end ;
5068: GO 4934
5070: POP
5071: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
5072: LD_INT 51
5074: PPUSH
5075: LD_INT 77
5077: PPUSH
5078: CALL_OW 428
5082: PPUSH
5083: CALL_OW 274
5087: PPUSH
5088: LD_INT 1
5090: PPUSH
5091: LD_INT 120
5093: PPUSH
5094: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
5098: LD_INT 10
5100: PPUSH
5101: CALL_OW 274
5105: PPUSH
5106: LD_INT 2
5108: PPUSH
5109: LD_INT 300
5111: PPUSH
5112: CALL_OW 277
// for i := 1 to 2 do
5116: LD_ADDR_VAR 0 2
5120: PUSH
5121: DOUBLE
5122: LD_INT 1
5124: DEC
5125: ST_TO_ADDR
5126: LD_INT 2
5128: PUSH
5129: FOR_TO
5130: IFFALSE 5244
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
5132: LD_INT 0
5134: PPUSH
5135: LD_INT 1
5137: PPUSH
5138: LD_INT 3
5140: PUSH
5141: LD_INT 4
5143: PUSH
5144: LD_INT 5
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: LIST
5151: PUSH
5152: LD_OWVAR 67
5156: ARRAY
5157: PPUSH
5158: CALL_OW 380
// un := CreateHuman ;
5162: LD_ADDR_VAR 0 3
5166: PUSH
5167: CALL_OW 44
5171: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
5172: LD_ADDR_EXP 38
5176: PUSH
5177: LD_EXP 38
5181: PPUSH
5182: LD_EXP 38
5186: PUSH
5187: LD_INT 1
5189: PLUS
5190: PPUSH
5191: LD_VAR 0 3
5195: PPUSH
5196: CALL_OW 1
5200: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
5201: LD_VAR 0 3
5205: PPUSH
5206: LD_INT 198
5208: PPUSH
5209: LD_INT 106
5211: PPUSH
5212: CALL_OW 428
5216: PUSH
5217: LD_INT 205
5219: PPUSH
5220: LD_INT 114
5222: PPUSH
5223: CALL_OW 428
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: LD_VAR 0 2
5236: ARRAY
5237: PPUSH
5238: CALL_OW 52
// end ;
5242: GO 5129
5244: POP
5245: POP
// for i := 1 to 2 do
5246: LD_ADDR_VAR 0 2
5250: PUSH
5251: DOUBLE
5252: LD_INT 1
5254: DEC
5255: ST_TO_ADDR
5256: LD_INT 2
5258: PUSH
5259: FOR_TO
5260: IFFALSE 5337
// begin PrepareHuman ( false , 2 , 3 ) ;
5262: LD_INT 0
5264: PPUSH
5265: LD_INT 2
5267: PPUSH
5268: LD_INT 3
5270: PPUSH
5271: CALL_OW 380
// un := CreateHuman ;
5275: LD_ADDR_VAR 0 3
5279: PUSH
5280: CALL_OW 44
5284: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
5285: LD_ADDR_EXP 38
5289: PUSH
5290: LD_EXP 38
5294: PPUSH
5295: LD_EXP 38
5299: PUSH
5300: LD_INT 1
5302: PLUS
5303: PPUSH
5304: LD_VAR 0 3
5308: PPUSH
5309: CALL_OW 1
5313: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
5314: LD_VAR 0 3
5318: PPUSH
5319: LD_INT 204
5321: PPUSH
5322: LD_INT 108
5324: PPUSH
5325: LD_INT 2
5327: PPUSH
5328: LD_INT 0
5330: PPUSH
5331: CALL_OW 50
// end ;
5335: GO 5259
5337: POP
5338: POP
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5339: LD_ADDR_VAR 0 2
5343: PUSH
5344: DOUBLE
5345: LD_INT 1
5347: DEC
5348: ST_TO_ADDR
5349: LD_INT 4
5351: PUSH
5352: LD_INT 5
5354: PUSH
5355: LD_INT 6
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: LIST
5362: PUSH
5363: LD_OWVAR 67
5367: ARRAY
5368: PUSH
5369: FOR_TO
5370: IFFALSE 5491
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
5372: LD_INT 0
5374: PPUSH
5375: LD_INT 1
5377: PUSH
5378: LD_INT 1
5380: PUSH
5381: LD_INT 2
5383: PUSH
5384: LD_INT 4
5386: PUSH
5387: LD_INT 1
5389: PUSH
5390: EMPTY
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: PUSH
5397: LD_INT 1
5399: PPUSH
5400: LD_INT 5
5402: PPUSH
5403: CALL_OW 12
5407: ARRAY
5408: PPUSH
5409: LD_INT 3
5411: PUSH
5412: LD_INT 4
5414: PUSH
5415: LD_INT 5
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: LIST
5422: PUSH
5423: LD_OWVAR 67
5427: ARRAY
5428: PPUSH
5429: CALL_OW 380
// un := CreateHuman ;
5433: LD_ADDR_VAR 0 3
5437: PUSH
5438: CALL_OW 44
5442: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
5443: LD_VAR 0 3
5447: PPUSH
5448: LD_INT 11
5450: PPUSH
5451: LD_INT 0
5453: PPUSH
5454: CALL 3090 0 3
5458: IFFALSE 5489
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
5460: LD_ADDR_EXP 39
5464: PUSH
5465: LD_EXP 39
5469: PPUSH
5470: LD_EXP 39
5474: PUSH
5475: LD_INT 1
5477: PLUS
5478: PPUSH
5479: LD_VAR 0 3
5483: PPUSH
5484: CALL_OW 1
5488: ST_TO_ADDR
// end ;
5489: GO 5369
5491: POP
5492: POP
// for i := 1 to 3 do
5493: LD_ADDR_VAR 0 2
5497: PUSH
5498: DOUBLE
5499: LD_INT 1
5501: DEC
5502: ST_TO_ADDR
5503: LD_INT 3
5505: PUSH
5506: FOR_TO
5507: IFFALSE 5597
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 ] [ Difficulty ] ) ;
5509: LD_INT 0
5511: PPUSH
5512: LD_INT 1
5514: PPUSH
5515: LD_INT 3
5517: PUSH
5518: LD_INT 4
5520: PUSH
5521: LD_INT 4
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: LIST
5528: PUSH
5529: LD_OWVAR 67
5533: ARRAY
5534: PPUSH
5535: CALL_OW 380
// un := CreateHuman ;
5539: LD_ADDR_VAR 0 3
5543: PUSH
5544: CALL_OW 44
5548: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
5549: LD_VAR 0 3
5553: PPUSH
5554: LD_INT 11
5556: PPUSH
5557: LD_INT 0
5559: PPUSH
5560: CALL 3090 0 3
5564: IFFALSE 5595
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
5566: LD_ADDR_EXP 39
5570: PUSH
5571: LD_EXP 39
5575: PPUSH
5576: LD_EXP 39
5580: PUSH
5581: LD_INT 1
5583: PLUS
5584: PPUSH
5585: LD_VAR 0 3
5589: PPUSH
5590: CALL_OW 1
5594: ST_TO_ADDR
// end ;
5595: GO 5506
5597: POP
5598: POP
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
5599: LD_ADDR_VAR 0 2
5603: PUSH
5604: DOUBLE
5605: LD_INT 1
5607: DEC
5608: ST_TO_ADDR
5609: LD_INT 5
5611: PUSH
5612: LD_INT 6
5614: PUSH
5615: LD_INT 7
5617: PUSH
5618: EMPTY
5619: LIST
5620: LIST
5621: LIST
5622: PUSH
5623: LD_OWVAR 67
5627: ARRAY
5628: PUSH
5629: FOR_TO
5630: IFFALSE 5751
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
5632: LD_INT 0
5634: PPUSH
5635: LD_INT 1
5637: PUSH
5638: LD_INT 1
5640: PUSH
5641: LD_INT 2
5643: PUSH
5644: LD_INT 4
5646: PUSH
5647: LD_INT 1
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: LIST
5654: LIST
5655: LIST
5656: PUSH
5657: LD_INT 1
5659: PPUSH
5660: LD_INT 5
5662: PPUSH
5663: CALL_OW 12
5667: ARRAY
5668: PPUSH
5669: LD_INT 3
5671: PUSH
5672: LD_INT 4
5674: PUSH
5675: LD_INT 5
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: LIST
5682: PUSH
5683: LD_OWVAR 67
5687: ARRAY
5688: PPUSH
5689: CALL_OW 380
// un := CreateHuman ;
5693: LD_ADDR_VAR 0 3
5697: PUSH
5698: CALL_OW 44
5702: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
5703: LD_VAR 0 3
5707: PPUSH
5708: LD_INT 15
5710: PPUSH
5711: LD_INT 0
5713: PPUSH
5714: CALL 3090 0 3
5718: IFFALSE 5749
// ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
5720: LD_ADDR_EXP 40
5724: PUSH
5725: LD_EXP 40
5729: PPUSH
5730: LD_EXP 40
5734: PUSH
5735: LD_INT 1
5737: PLUS
5738: PPUSH
5739: LD_VAR 0 3
5743: PPUSH
5744: CALL_OW 1
5748: ST_TO_ADDR
// end ;
5749: GO 5629
5751: POP
5752: POP
// end ;
5753: LD_VAR 0 1
5757: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
5758: LD_INT 0
5760: PPUSH
5761: PPUSH
5762: PPUSH
// uc_side := 3 ;
5763: LD_ADDR_OWVAR 20
5767: PUSH
5768: LD_INT 3
5770: ST_TO_ADDR
// uc_nation := 3 ;
5771: LD_ADDR_OWVAR 21
5775: PUSH
5776: LD_INT 3
5778: ST_TO_ADDR
// for i := 1 to 6 do
5779: LD_ADDR_VAR 0 2
5783: PUSH
5784: DOUBLE
5785: LD_INT 1
5787: DEC
5788: ST_TO_ADDR
5789: LD_INT 6
5791: PUSH
5792: FOR_TO
5793: IFFALSE 5872
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
5795: LD_INT 0
5797: PPUSH
5798: LD_INT 1
5800: PUSH
5801: LD_INT 4
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: PUSH
5808: LD_INT 1
5810: PPUSH
5811: LD_INT 2
5813: PPUSH
5814: CALL_OW 12
5818: ARRAY
5819: PPUSH
5820: LD_INT 0
5822: PPUSH
5823: CALL_OW 380
// un := CreateHuman ;
5827: LD_ADDR_VAR 0 3
5831: PUSH
5832: CALL_OW 44
5836: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
5837: LD_VAR 0 3
5841: PPUSH
5842: LD_INT 54
5844: PPUSH
5845: LD_INT 88
5847: PPUSH
5848: LD_INT 12
5850: PPUSH
5851: LD_INT 0
5853: PPUSH
5854: CALL_OW 50
// SetLives ( un , 1 ) ;
5858: LD_VAR 0 3
5862: PPUSH
5863: LD_INT 1
5865: PPUSH
5866: CALL_OW 234
// end ;
5870: GO 5792
5872: POP
5873: POP
// uc_side := 3 ;
5874: LD_ADDR_OWVAR 20
5878: PUSH
5879: LD_INT 3
5881: ST_TO_ADDR
// uc_nation := 0 ;
5882: LD_ADDR_OWVAR 21
5886: PUSH
5887: LD_INT 0
5889: ST_TO_ADDR
// apeSoldGroup := [ ] ;
5890: LD_ADDR_EXP 42
5894: PUSH
5895: EMPTY
5896: ST_TO_ADDR
// apeEngGroup := [ ] ;
5897: LD_ADDR_EXP 43
5901: PUSH
5902: EMPTY
5903: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5904: LD_ADDR_VAR 0 2
5908: PUSH
5909: DOUBLE
5910: LD_INT 1
5912: DEC
5913: ST_TO_ADDR
5914: LD_INT 4
5916: PUSH
5917: LD_INT 5
5919: PUSH
5920: LD_INT 6
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: LIST
5927: PUSH
5928: LD_OWVAR 67
5932: ARRAY
5933: PUSH
5934: FOR_TO
5935: IFFALSE 6049
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
5937: LD_INT 0
5939: PPUSH
5940: LD_INT 15
5942: PPUSH
5943: LD_INT 3
5945: PUSH
5946: LD_INT 4
5948: PUSH
5949: LD_INT 5
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: LIST
5956: PUSH
5957: LD_OWVAR 67
5961: ARRAY
5962: PPUSH
5963: CALL_OW 380
// un := CreateHuman ;
5967: LD_ADDR_VAR 0 3
5971: PUSH
5972: CALL_OW 44
5976: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
5977: LD_ADDR_EXP 42
5981: PUSH
5982: LD_EXP 42
5986: PPUSH
5987: LD_EXP 42
5991: PUSH
5992: LD_INT 1
5994: PLUS
5995: PPUSH
5996: LD_VAR 0 3
6000: PPUSH
6001: CALL_OW 1
6005: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6006: LD_VAR 0 3
6010: PPUSH
6011: LD_INT 0
6013: PPUSH
6014: LD_INT 5
6016: PPUSH
6017: CALL_OW 12
6021: PPUSH
6022: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
6026: LD_VAR 0 3
6030: PPUSH
6031: LD_INT 56
6033: PPUSH
6034: LD_INT 82
6036: PPUSH
6037: LD_INT 6
6039: PPUSH
6040: LD_INT 0
6042: PPUSH
6043: CALL_OW 50
// end ;
6047: GO 5934
6049: POP
6050: POP
// for i := 1 to 2 do
6051: LD_ADDR_VAR 0 2
6055: PUSH
6056: DOUBLE
6057: LD_INT 1
6059: DEC
6060: ST_TO_ADDR
6061: LD_INT 2
6063: PUSH
6064: FOR_TO
6065: IFFALSE 6141
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
6067: LD_INT 0
6069: PPUSH
6070: LD_INT 16
6072: PPUSH
6073: LD_INT 4
6075: PPUSH
6076: CALL_OW 380
// un := CreateHuman ;
6080: LD_ADDR_VAR 0 3
6084: PUSH
6085: CALL_OW 44
6089: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
6090: LD_ADDR_EXP 43
6094: PUSH
6095: LD_EXP 43
6099: PPUSH
6100: LD_EXP 43
6104: PUSH
6105: LD_INT 1
6107: PLUS
6108: PPUSH
6109: LD_VAR 0 3
6113: PPUSH
6114: CALL_OW 1
6118: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
6119: LD_VAR 0 3
6123: PPUSH
6124: LD_INT 51
6126: PPUSH
6127: LD_INT 77
6129: PPUSH
6130: CALL_OW 428
6134: PPUSH
6135: CALL_OW 52
// end ;
6139: GO 6064
6141: POP
6142: POP
// end ;
6143: LD_VAR 0 1
6147: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
6148: LD_EXP 42
6152: PPUSH
6153: LD_INT 3
6155: PUSH
6156: LD_INT 24
6158: PUSH
6159: LD_INT 600
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: PUSH
6166: EMPTY
6167: LIST
6168: LIST
6169: PUSH
6170: LD_INT 3
6172: PUSH
6173: LD_INT 54
6175: PUSH
6176: EMPTY
6177: LIST
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: PUSH
6183: EMPTY
6184: LIST
6185: LIST
6186: PPUSH
6187: CALL_OW 72
6191: PUSH
6192: LD_INT 66
6194: PPUSH
6195: LD_INT 89
6197: PPUSH
6198: CALL_OW 428
6202: PPUSH
6203: CALL_OW 302
6207: AND
6208: IFFALSE 6293
6210: GO 6212
6212: DISABLE
6213: LD_INT 0
6215: PPUSH
// begin enable ;
6216: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
6217: LD_ADDR_VAR 0 1
6221: PUSH
6222: LD_EXP 42
6226: PPUSH
6227: LD_INT 3
6229: PUSH
6230: LD_INT 24
6232: PUSH
6233: LD_INT 600
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: PUSH
6244: LD_INT 3
6246: PUSH
6247: LD_INT 54
6249: PUSH
6250: EMPTY
6251: LIST
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PPUSH
6261: CALL_OW 72
6265: PUSH
6266: FOR_IN
6267: IFFALSE 6291
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
6269: LD_VAR 0 1
6273: PPUSH
6274: LD_INT 66
6276: PPUSH
6277: LD_INT 89
6279: PPUSH
6280: CALL_OW 428
6284: PPUSH
6285: CALL_OW 120
6289: GO 6266
6291: POP
6292: POP
// end ;
6293: PPOPN 1
6295: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
6296: LD_INT 22
6298: PUSH
6299: LD_INT 2
6301: PUSH
6302: EMPTY
6303: LIST
6304: LIST
6305: PUSH
6306: LD_INT 92
6308: PUSH
6309: LD_INT 54
6311: PUSH
6312: LD_INT 77
6314: PUSH
6315: LD_INT 8
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: PPUSH
6328: CALL_OW 69
6332: IFFALSE 6396
6334: GO 6336
6336: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
6337: LD_EXP 43
6341: PPUSH
6342: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
6346: LD_EXP 43
6350: PPUSH
6351: LD_INT 22
6353: PUSH
6354: LD_INT 2
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: PUSH
6361: LD_INT 92
6363: PUSH
6364: LD_INT 54
6366: PUSH
6367: LD_INT 77
6369: PUSH
6370: LD_INT 8
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: PUSH
6379: EMPTY
6380: LIST
6381: LIST
6382: PPUSH
6383: CALL_OW 69
6387: PUSH
6388: LD_INT 1
6390: ARRAY
6391: PPUSH
6392: CALL_OW 175
// end ;
6396: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag ; begin
6397: LD_INT 0
6399: PPUSH
6400: PPUSH
6401: PPUSH
6402: PPUSH
6403: PPUSH
6404: PPUSH
6405: PPUSH
6406: PPUSH
6407: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
6408: LD_ADDR_VAR 0 3
6412: PUSH
6413: LD_INT 1
6415: PPUSH
6416: LD_INT 3
6418: PPUSH
6419: CALL_OW 12
6423: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
6424: LD_ADDR_VAR 0 5
6428: PUSH
6429: LD_INT 16
6431: PUSH
6432: LD_INT 17
6434: PUSH
6435: LD_INT 19
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: LIST
6442: PUSH
6443: LD_VAR 0 3
6447: ARRAY
6448: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
6449: LD_ADDR_VAR 0 7
6453: PUSH
6454: LD_INT 159
6456: PUSH
6457: LD_INT 25
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: PUSH
6464: LD_INT 137
6466: PUSH
6467: LD_INT 37
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: PUSH
6474: LD_INT 123
6476: PUSH
6477: LD_INT 55
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: PUSH
6484: LD_INT 115
6486: PUSH
6487: LD_INT 71
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: PUSH
6494: LD_INT 106
6496: PUSH
6497: LD_INT 88
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: PUSH
6504: LD_INT 97
6506: PUSH
6507: LD_INT 114
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: PUSH
6514: LD_INT 75
6516: PUSH
6517: LD_INT 146
6519: PUSH
6520: EMPTY
6521: LIST
6522: LIST
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: PUSH
6533: LD_INT 206
6535: PUSH
6536: LD_INT 135
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: PUSH
6543: LD_INT 184
6545: PUSH
6546: LD_INT 111
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: PUSH
6553: LD_INT 154
6555: PUSH
6556: LD_INT 97
6558: PUSH
6559: EMPTY
6560: LIST
6561: LIST
6562: PUSH
6563: LD_INT 122
6565: PUSH
6566: LD_INT 80
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: PUSH
6573: LD_INT 109
6575: PUSH
6576: LD_INT 78
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PUSH
6583: LD_INT 97
6585: PUSH
6586: LD_INT 113
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: PUSH
6593: LD_INT 75
6595: PUSH
6596: LD_INT 147
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: PUSH
6612: LD_INT 185
6614: PUSH
6615: LD_INT 72
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: PUSH
6622: LD_INT 171
6624: PUSH
6625: LD_INT 83
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: LD_INT 161
6634: PUSH
6635: LD_INT 99
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: PUSH
6642: LD_INT 125
6644: PUSH
6645: LD_INT 82
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: PUSH
6652: LD_INT 105
6654: PUSH
6655: LD_INT 90
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PUSH
6662: LD_INT 96
6664: PUSH
6665: LD_INT 116
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: PUSH
6672: LD_INT 75
6674: PUSH
6675: LD_INT 147
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: LIST
6695: PUSH
6696: LD_VAR 0 3
6700: ARRAY
6701: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
6702: LD_ADDR_VAR 0 4
6706: PUSH
6707: LD_INT 4
6709: PUSH
6710: LD_INT 5
6712: PUSH
6713: LD_INT 3
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: LIST
6720: PUSH
6721: LD_VAR 0 3
6725: ARRAY
6726: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
6727: LD_ADDR_VAR 0 6
6731: PUSH
6732: LD_INT 22
6734: PUSH
6735: LD_INT 20
6737: PUSH
6738: LD_INT 21
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: LIST
6745: PUSH
6746: LD_VAR 0 3
6750: ARRAY
6751: ST_TO_ADDR
// for i := 1 to 2 do
6752: LD_ADDR_VAR 0 2
6756: PUSH
6757: DOUBLE
6758: LD_INT 1
6760: DEC
6761: ST_TO_ADDR
6762: LD_INT 2
6764: PUSH
6765: FOR_TO
6766: IFFALSE 6784
// EraseResourceArea ( i , outerSpawnArea ) ;
6768: LD_VAR 0 2
6772: PPUSH
6773: LD_VAR 0 6
6777: PPUSH
6778: CALL_OW 286
6782: GO 6765
6784: POP
6785: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
6786: LD_VAR 0 6
6790: PPUSH
6791: LD_INT 2
6793: PUSH
6794: LD_INT 21
6796: PUSH
6797: LD_INT 1
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: PUSH
6804: LD_INT 21
6806: PUSH
6807: LD_INT 2
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: PUSH
6814: LD_INT 21
6816: PUSH
6817: LD_INT 3
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: PPUSH
6830: CALL_OW 70
6834: IFFALSE 7049
// repeat wait ( 0 0$1 ) ;
6836: LD_INT 35
6838: PPUSH
6839: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
6843: LD_VAR 0 6
6847: PPUSH
6848: LD_INT 2
6850: PUSH
6851: LD_INT 21
6853: PUSH
6854: LD_INT 2
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PUSH
6861: LD_INT 21
6863: PUSH
6864: LD_INT 3
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: LIST
6875: PPUSH
6876: CALL_OW 70
6880: IFFALSE 6941
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
6882: LD_ADDR_VAR 0 2
6886: PUSH
6887: LD_VAR 0 6
6891: PPUSH
6892: LD_INT 2
6894: PUSH
6895: LD_INT 21
6897: PUSH
6898: LD_INT 2
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: PUSH
6905: LD_INT 21
6907: PUSH
6908: LD_INT 3
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: LIST
6919: PPUSH
6920: CALL_OW 70
6924: PUSH
6925: FOR_IN
6926: IFFALSE 6939
// RemoveUnit ( i ) ;
6928: LD_VAR 0 2
6932: PPUSH
6933: CALL_OW 64
6937: GO 6925
6939: POP
6940: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
6941: LD_VAR 0 6
6945: PPUSH
6946: LD_INT 21
6948: PUSH
6949: LD_INT 1
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PPUSH
6956: CALL_OW 70
6960: IFFALSE 7009
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
6962: LD_ADDR_VAR 0 2
6966: PUSH
6967: LD_VAR 0 6
6971: PPUSH
6972: LD_INT 21
6974: PUSH
6975: LD_INT 1
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PPUSH
6982: CALL_OW 70
6986: PUSH
6987: FOR_IN
6988: IFFALSE 7007
// ComMoveXY ( i , 113 , 53 ) ;
6990: LD_VAR 0 2
6994: PPUSH
6995: LD_INT 113
6997: PPUSH
6998: LD_INT 53
7000: PPUSH
7001: CALL_OW 111
7005: GO 6987
7007: POP
7008: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
7009: LD_VAR 0 6
7013: PPUSH
7014: LD_INT 2
7016: PUSH
7017: LD_INT 21
7019: PUSH
7020: LD_INT 1
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: PUSH
7027: LD_INT 21
7029: PUSH
7030: LD_INT 2
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: LIST
7041: PPUSH
7042: CALL_OW 70
7046: NOT
7047: IFFALSE 6836
// case convoyCounter of 1 .. 3 :
7049: LD_EXP 16
7053: PUSH
7054: LD_INT 1
7056: DOUBLE
7057: GREATEREQUAL
7058: IFFALSE 7066
7060: LD_INT 3
7062: DOUBLE
7063: LESSEQUAL
7064: IFTRUE 7068
7066: GO 7663
7068: POP
// begin uc_side := 3 ;
7069: LD_ADDR_OWVAR 20
7073: PUSH
7074: LD_INT 3
7076: ST_TO_ADDR
// uc_nation := 3 ;
7077: LD_ADDR_OWVAR 21
7081: PUSH
7082: LD_INT 3
7084: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] - convoyCounter do
7085: LD_ADDR_VAR 0 2
7089: PUSH
7090: DOUBLE
7091: LD_INT 1
7093: DEC
7094: ST_TO_ADDR
7095: LD_INT 5
7097: PUSH
7098: LD_INT 6
7100: PUSH
7101: LD_INT 7
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: LIST
7108: PUSH
7109: LD_OWVAR 67
7113: ARRAY
7114: PUSH
7115: LD_EXP 16
7119: MINUS
7120: PUSH
7121: FOR_TO
7122: IFFALSE 7309
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
7124: LD_INT 0
7126: PPUSH
7127: LD_INT 1
7129: PUSH
7130: LD_INT 1
7132: PUSH
7133: LD_INT 1
7135: PUSH
7136: LD_INT 4
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: LIST
7143: LIST
7144: PUSH
7145: LD_INT 1
7147: PPUSH
7148: LD_INT 4
7150: PPUSH
7151: CALL_OW 12
7155: ARRAY
7156: PPUSH
7157: LD_INT 4
7159: PUSH
7160: LD_INT 5
7162: PUSH
7163: LD_INT 6
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: LIST
7170: PUSH
7171: LD_OWVAR 67
7175: ARRAY
7176: PPUSH
7177: CALL_OW 380
// un := CreateHuman ;
7181: LD_ADDR_VAR 0 8
7185: PUSH
7186: CALL_OW 44
7190: ST_TO_ADDR
// SetDir ( un , dir ) ;
7191: LD_VAR 0 8
7195: PPUSH
7196: LD_VAR 0 4
7200: PPUSH
7201: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
7205: LD_VAR 0 8
7209: PPUSH
7210: LD_VAR 0 5
7214: PPUSH
7215: LD_INT 0
7217: PPUSH
7218: CALL 3090 0 3
7222: IFFALSE 7307
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
7224: LD_ADDR_EXP 41
7228: PUSH
7229: LD_EXP 41
7233: PPUSH
7234: LD_EXP 41
7238: PUSH
7239: LD_INT 1
7241: PLUS
7242: PPUSH
7243: LD_VAR 0 8
7247: PPUSH
7248: CALL_OW 1
7252: ST_TO_ADDR
// SetTag ( un , 1 ) ;
7253: LD_VAR 0 8
7257: PPUSH
7258: LD_INT 1
7260: PPUSH
7261: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
7265: LD_VAR 0 8
7269: PPUSH
7270: LD_VAR 0 7
7274: PUSH
7275: LD_INT 1
7277: ARRAY
7278: PUSH
7279: LD_INT 1
7281: ARRAY
7282: PPUSH
7283: LD_VAR 0 7
7287: PUSH
7288: LD_INT 1
7290: ARRAY
7291: PUSH
7292: LD_INT 2
7294: ARRAY
7295: PPUSH
7296: CALL_OW 111
// wait ( 0 0$2 ) ;
7300: LD_INT 70
7302: PPUSH
7303: CALL_OW 67
// end ; end ;
7307: GO 7121
7309: POP
7310: POP
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
7311: LD_ADDR_VAR 0 2
7315: PUSH
7316: DOUBLE
7317: LD_INT 1
7319: DEC
7320: ST_TO_ADDR
7321: LD_INT 3
7323: PUSH
7324: LD_INT 4
7326: PUSH
7327: LD_INT 4
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: LIST
7334: PUSH
7335: LD_OWVAR 67
7339: ARRAY
7340: PUSH
7341: FOR_TO
7342: IFFALSE 7659
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7344: LD_INT 3
7346: PPUSH
7347: LD_INT 3
7349: PPUSH
7350: LD_INT 21
7352: PUSH
7353: LD_INT 22
7355: PUSH
7356: LD_INT 23
7358: PUSH
7359: LD_INT 24
7361: PUSH
7362: LD_INT 24
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: PUSH
7372: LD_OWVAR 67
7376: PPUSH
7377: LD_OWVAR 67
7381: PUSH
7382: LD_INT 2
7384: PLUS
7385: PPUSH
7386: CALL_OW 12
7390: ARRAY
7391: PPUSH
7392: LD_INT 1
7394: PPUSH
7395: LD_INT 1
7397: PPUSH
7398: LD_INT 42
7400: PUSH
7401: LD_INT 44
7403: PUSH
7404: LD_INT 43
7406: PUSH
7407: LD_INT 44
7409: PUSH
7410: LD_INT 46
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: PUSH
7420: LD_INT 1
7422: PPUSH
7423: LD_OWVAR 67
7427: PUSH
7428: LD_INT 2
7430: PLUS
7431: PPUSH
7432: CALL_OW 12
7436: ARRAY
7437: PPUSH
7438: LD_INT 90
7440: PPUSH
7441: CALL 490 0 7
// un := CreateVehicle ;
7445: LD_ADDR_VAR 0 8
7449: PUSH
7450: CALL_OW 45
7454: ST_TO_ADDR
// SetDir ( un , dir ) ;
7455: LD_VAR 0 8
7459: PPUSH
7460: LD_VAR 0 4
7464: PPUSH
7465: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
7469: LD_VAR 0 8
7473: PPUSH
7474: LD_VAR 0 5
7478: PPUSH
7479: LD_INT 0
7481: PPUSH
7482: CALL 3090 0 3
7486: IFFALSE 7657
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
7488: LD_ADDR_EXP 41
7492: PUSH
7493: LD_EXP 41
7497: PPUSH
7498: LD_EXP 41
7502: PUSH
7503: LD_INT 1
7505: PLUS
7506: PPUSH
7507: LD_VAR 0 8
7511: PPUSH
7512: CALL_OW 1
7516: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
7517: LD_INT 0
7519: PPUSH
7520: LD_INT 3
7522: PUSH
7523: LD_INT 4
7525: PUSH
7526: LD_INT 5
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: LIST
7533: PUSH
7534: LD_OWVAR 67
7538: ARRAY
7539: PPUSH
7540: CALL_OW 383
// un := CreateHuman ;
7544: LD_ADDR_VAR 0 8
7548: PUSH
7549: CALL_OW 44
7553: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
7554: LD_VAR 0 8
7558: PPUSH
7559: LD_EXP 41
7563: PUSH
7564: LD_EXP 41
7568: ARRAY
7569: PPUSH
7570: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
7574: LD_ADDR_EXP 41
7578: PUSH
7579: LD_EXP 41
7583: PPUSH
7584: LD_EXP 41
7588: PUSH
7589: LD_INT 1
7591: PLUS
7592: PPUSH
7593: LD_VAR 0 8
7597: PPUSH
7598: CALL_OW 1
7602: ST_TO_ADDR
// SetTag ( un , 1 ) ;
7603: LD_VAR 0 8
7607: PPUSH
7608: LD_INT 1
7610: PPUSH
7611: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
7615: LD_VAR 0 8
7619: PPUSH
7620: LD_VAR 0 7
7624: PUSH
7625: LD_INT 1
7627: ARRAY
7628: PUSH
7629: LD_INT 1
7631: ARRAY
7632: PPUSH
7633: LD_VAR 0 7
7637: PUSH
7638: LD_INT 1
7640: ARRAY
7641: PUSH
7642: LD_INT 2
7644: ARRAY
7645: PPUSH
7646: CALL_OW 111
// wait ( 0 0$3 ) ;
7650: LD_INT 105
7652: PPUSH
7653: CALL_OW 67
// end ; end ;
7657: GO 7341
7659: POP
7660: POP
// end ; 4 .. 7 :
7661: GO 8216
7663: LD_INT 4
7665: DOUBLE
7666: GREATEREQUAL
7667: IFFALSE 7675
7669: LD_INT 7
7671: DOUBLE
7672: LESSEQUAL
7673: IFTRUE 7677
7675: GO 8215
7677: POP
// begin uc_side := 3 ;
7678: LD_ADDR_OWVAR 20
7682: PUSH
7683: LD_INT 3
7685: ST_TO_ADDR
// uc_nation := 3 ;
7686: LD_ADDR_OWVAR 21
7690: PUSH
7691: LD_INT 3
7693: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
7694: LD_ADDR_VAR 0 2
7698: PUSH
7699: DOUBLE
7700: LD_INT 1
7702: DEC
7703: ST_TO_ADDR
7704: LD_INT 2
7706: PUSH
7707: LD_INT 3
7709: PUSH
7710: LD_INT 4
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: LIST
7717: PUSH
7718: LD_OWVAR 67
7722: ARRAY
7723: PUSH
7724: FOR_TO
7725: IFFALSE 7885
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
7727: LD_INT 0
7729: PPUSH
7730: LD_INT 1
7732: PPUSH
7733: LD_INT 4
7735: PUSH
7736: LD_INT 5
7738: PUSH
7739: LD_INT 6
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: LIST
7746: PUSH
7747: LD_OWVAR 67
7751: ARRAY
7752: PPUSH
7753: CALL_OW 380
// un := CreateHuman ;
7757: LD_ADDR_VAR 0 8
7761: PUSH
7762: CALL_OW 44
7766: ST_TO_ADDR
// SetDir ( un , dir ) ;
7767: LD_VAR 0 8
7771: PPUSH
7772: LD_VAR 0 4
7776: PPUSH
7777: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
7781: LD_VAR 0 8
7785: PPUSH
7786: LD_VAR 0 5
7790: PPUSH
7791: LD_INT 0
7793: PPUSH
7794: CALL 3090 0 3
7798: IFFALSE 7883
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
7800: LD_ADDR_EXP 41
7804: PUSH
7805: LD_EXP 41
7809: PPUSH
7810: LD_EXP 41
7814: PUSH
7815: LD_INT 1
7817: PLUS
7818: PPUSH
7819: LD_VAR 0 8
7823: PPUSH
7824: CALL_OW 1
7828: ST_TO_ADDR
// SetTag ( un , 1 ) ;
7829: LD_VAR 0 8
7833: PPUSH
7834: LD_INT 1
7836: PPUSH
7837: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
7841: LD_VAR 0 8
7845: PPUSH
7846: LD_VAR 0 7
7850: PUSH
7851: LD_INT 1
7853: ARRAY
7854: PUSH
7855: LD_INT 1
7857: ARRAY
7858: PPUSH
7859: LD_VAR 0 7
7863: PUSH
7864: LD_INT 1
7866: ARRAY
7867: PUSH
7868: LD_INT 2
7870: ARRAY
7871: PPUSH
7872: CALL_OW 111
// wait ( 0 0$2 ) ;
7876: LD_INT 70
7878: PPUSH
7879: CALL_OW 67
// end ; end ;
7883: GO 7724
7885: POP
7886: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
7887: LD_ADDR_VAR 0 2
7891: PUSH
7892: DOUBLE
7893: LD_INT 1
7895: DEC
7896: ST_TO_ADDR
7897: LD_INT 2
7899: PUSH
7900: LD_INT 3
7902: PUSH
7903: LD_INT 3
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: LIST
7910: PUSH
7911: LD_OWVAR 67
7915: ARRAY
7916: PUSH
7917: FOR_TO
7918: IFFALSE 8211
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
7920: LD_INT 3
7922: PPUSH
7923: LD_INT 3
7925: PPUSH
7926: LD_INT 21
7928: PUSH
7929: LD_INT 22
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: PUSH
7936: LD_INT 1
7938: PPUSH
7939: LD_INT 2
7941: PPUSH
7942: CALL_OW 12
7946: ARRAY
7947: PPUSH
7948: LD_INT 1
7950: PPUSH
7951: LD_INT 1
7953: PPUSH
7954: LD_INT 42
7956: PUSH
7957: LD_INT 44
7959: PUSH
7960: LD_INT 43
7962: PUSH
7963: LD_INT 44
7965: PUSH
7966: EMPTY
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: PUSH
7972: LD_INT 1
7974: PPUSH
7975: LD_OWVAR 67
7979: PUSH
7980: LD_INT 1
7982: PLUS
7983: PPUSH
7984: CALL_OW 12
7988: ARRAY
7989: PPUSH
7990: LD_INT 90
7992: PPUSH
7993: CALL 490 0 7
// un := CreateVehicle ;
7997: LD_ADDR_VAR 0 8
8001: PUSH
8002: CALL_OW 45
8006: ST_TO_ADDR
// SetDir ( un , dir ) ;
8007: LD_VAR 0 8
8011: PPUSH
8012: LD_VAR 0 4
8016: PPUSH
8017: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
8021: LD_VAR 0 8
8025: PPUSH
8026: LD_VAR 0 5
8030: PPUSH
8031: LD_INT 0
8033: PPUSH
8034: CALL 3090 0 3
8038: IFFALSE 8209
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
8040: LD_ADDR_EXP 41
8044: PUSH
8045: LD_EXP 41
8049: PPUSH
8050: LD_EXP 41
8054: PUSH
8055: LD_INT 1
8057: PLUS
8058: PPUSH
8059: LD_VAR 0 8
8063: PPUSH
8064: CALL_OW 1
8068: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
8069: LD_INT 0
8071: PPUSH
8072: LD_INT 3
8074: PUSH
8075: LD_INT 4
8077: PUSH
8078: LD_INT 5
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: LIST
8085: PUSH
8086: LD_OWVAR 67
8090: ARRAY
8091: PPUSH
8092: CALL_OW 383
// un := CreateHuman ;
8096: LD_ADDR_VAR 0 8
8100: PUSH
8101: CALL_OW 44
8105: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
8106: LD_VAR 0 8
8110: PPUSH
8111: LD_EXP 41
8115: PUSH
8116: LD_EXP 41
8120: ARRAY
8121: PPUSH
8122: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
8126: LD_ADDR_EXP 41
8130: PUSH
8131: LD_EXP 41
8135: PPUSH
8136: LD_EXP 41
8140: PUSH
8141: LD_INT 1
8143: PLUS
8144: PPUSH
8145: LD_VAR 0 8
8149: PPUSH
8150: CALL_OW 1
8154: ST_TO_ADDR
// SetTag ( un , 1 ) ;
8155: LD_VAR 0 8
8159: PPUSH
8160: LD_INT 1
8162: PPUSH
8163: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
8167: LD_VAR 0 8
8171: PPUSH
8172: LD_VAR 0 7
8176: PUSH
8177: LD_INT 1
8179: ARRAY
8180: PUSH
8181: LD_INT 1
8183: ARRAY
8184: PPUSH
8185: LD_VAR 0 7
8189: PUSH
8190: LD_INT 1
8192: ARRAY
8193: PUSH
8194: LD_INT 2
8196: ARRAY
8197: PPUSH
8198: CALL_OW 111
// wait ( 0 0$2 ) ;
8202: LD_INT 70
8204: PPUSH
8205: CALL_OW 67
// end ; end ;
8209: GO 7917
8211: POP
8212: POP
// end ; end ;
8213: GO 8216
8215: POP
// repeat wait ( 0 0$1 ) ;
8216: LD_INT 35
8218: PPUSH
8219: CALL_OW 67
// for un in ruConvoySquad do
8223: LD_ADDR_VAR 0 8
8227: PUSH
8228: LD_EXP 41
8232: PUSH
8233: FOR_IN
8234: IFFALSE 8729
// begin if IsInArea ( un , westSouthOutArea ) then
8236: LD_VAR 0 8
8240: PPUSH
8241: LD_INT 18
8243: PPUSH
8244: CALL_OW 308
8248: IFFALSE 8327
// begin if GetType ( un ) = unit_vehicle then
8250: LD_VAR 0 8
8254: PPUSH
8255: CALL_OW 247
8259: PUSH
8260: LD_INT 2
8262: EQUAL
8263: IFFALSE 8286
// ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
8265: LD_ADDR_EXP 41
8269: PUSH
8270: LD_EXP 41
8274: PUSH
8275: LD_VAR 0 8
8279: PPUSH
8280: CALL_OW 311
8284: DIFF
8285: ST_TO_ADDR
// convoySavedCounter := convoySavedCounter + 1 ;
8286: LD_ADDR_EXP 15
8290: PUSH
8291: LD_EXP 15
8295: PUSH
8296: LD_INT 1
8298: PLUS
8299: ST_TO_ADDR
// RemoveUnit ( un ) ;
8300: LD_VAR 0 8
8304: PPUSH
8305: CALL_OW 64
// ruConvoySquad := ruConvoySquad diff un ;
8309: LD_ADDR_EXP 41
8313: PUSH
8314: LD_EXP 41
8318: PUSH
8319: LD_VAR 0 8
8323: DIFF
8324: ST_TO_ADDR
// break ;
8325: GO 8729
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
8327: LD_VAR 0 8
8331: PPUSH
8332: CALL_OW 305
8336: NOT
8337: PUSH
8338: LD_VAR 0 8
8342: PPUSH
8343: CALL_OW 310
8347: NOT
8348: AND
8349: IFFALSE 8367
// ruConvoySquad := ruConvoySquad diff un ;
8351: LD_ADDR_EXP 41
8355: PUSH
8356: LD_EXP 41
8360: PUSH
8361: LD_VAR 0 8
8365: DIFF
8366: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
8367: LD_VAR 0 8
8371: PPUSH
8372: CALL_OW 302
8376: PUSH
8377: LD_VAR 0 8
8381: PPUSH
8382: CALL_OW 314
8386: NOT
8387: AND
8388: IFFALSE 8727
// begin tag := GetTag ( un ) ;
8390: LD_ADDR_VAR 0 9
8394: PUSH
8395: LD_VAR 0 8
8399: PPUSH
8400: CALL_OW 110
8404: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
8405: LD_VAR 0 8
8409: PPUSH
8410: LD_VAR 0 7
8414: PUSH
8415: LD_VAR 0 9
8419: PUSH
8420: LD_INT 1
8422: PLUS
8423: ARRAY
8424: PUSH
8425: LD_INT 1
8427: ARRAY
8428: PPUSH
8429: LD_VAR 0 7
8433: PUSH
8434: LD_VAR 0 9
8438: PUSH
8439: LD_INT 1
8441: PLUS
8442: ARRAY
8443: PUSH
8444: LD_INT 2
8446: ARRAY
8447: PPUSH
8448: CALL_OW 297
8452: PUSH
8453: LD_INT 6
8455: LESS
8456: IFFALSE 8567
// begin SetTag ( un , tag + 1 ) ;
8458: LD_VAR 0 8
8462: PPUSH
8463: LD_VAR 0 9
8467: PUSH
8468: LD_INT 1
8470: PLUS
8471: PPUSH
8472: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
8476: LD_VAR 0 8
8480: PPUSH
8481: CALL_OW 247
8485: PUSH
8486: LD_INT 2
8488: EQUAL
8489: PUSH
8490: LD_VAR 0 8
8494: PPUSH
8495: CALL_OW 257
8499: PUSH
8500: LD_INT 3
8502: EQUAL
8503: OR
8504: IFFALSE 8565
// begin AddComWait ( un , 0 0$4 ) ;
8506: LD_VAR 0 8
8510: PPUSH
8511: LD_INT 140
8513: PPUSH
8514: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
8518: LD_VAR 0 8
8522: PPUSH
8523: LD_VAR 0 7
8527: PUSH
8528: LD_VAR 0 9
8532: PUSH
8533: LD_INT 1
8535: PLUS
8536: ARRAY
8537: PUSH
8538: LD_INT 1
8540: ARRAY
8541: PPUSH
8542: LD_VAR 0 7
8546: PUSH
8547: LD_VAR 0 9
8551: PUSH
8552: LD_INT 1
8554: PLUS
8555: ARRAY
8556: PUSH
8557: LD_INT 2
8559: ARRAY
8560: PPUSH
8561: CALL_OW 174
// end ; end else
8565: GO 8727
// begin if GetClass ( un ) = 4 and UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
8567: LD_VAR 0 8
8571: PPUSH
8572: CALL_OW 257
8576: PUSH
8577: LD_INT 4
8579: EQUAL
8580: PUSH
8581: LD_EXP 41
8585: PPUSH
8586: LD_INT 21
8588: PUSH
8589: LD_INT 1
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: PUSH
8596: LD_INT 3
8598: PUSH
8599: LD_INT 24
8601: PUSH
8602: LD_INT 1000
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: PPUSH
8617: CALL_OW 72
8621: AND
8622: IFFALSE 8680
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
8624: LD_VAR 0 8
8628: PPUSH
8629: LD_EXP 41
8633: PPUSH
8634: LD_INT 21
8636: PUSH
8637: LD_INT 1
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 3
8646: PUSH
8647: LD_INT 24
8649: PUSH
8650: LD_INT 1000
8652: PUSH
8653: EMPTY
8654: LIST
8655: LIST
8656: PUSH
8657: EMPTY
8658: LIST
8659: LIST
8660: PUSH
8661: EMPTY
8662: LIST
8663: LIST
8664: PPUSH
8665: CALL_OW 72
8669: PUSH
8670: LD_INT 1
8672: ARRAY
8673: PPUSH
8674: CALL_OW 128
8678: GO 8727
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
8680: LD_VAR 0 8
8684: PPUSH
8685: LD_VAR 0 7
8689: PUSH
8690: LD_VAR 0 9
8694: PUSH
8695: LD_INT 1
8697: PLUS
8698: ARRAY
8699: PUSH
8700: LD_INT 1
8702: ARRAY
8703: PPUSH
8704: LD_VAR 0 7
8708: PUSH
8709: LD_VAR 0 9
8713: PUSH
8714: LD_INT 1
8716: PLUS
8717: ARRAY
8718: PUSH
8719: LD_INT 2
8721: ARRAY
8722: PPUSH
8723: CALL_OW 114
// end ; end ; end ;
8727: GO 8233
8729: POP
8730: POP
// until not ruConvoySquad ;
8731: LD_EXP 41
8735: NOT
8736: IFFALSE 8216
// end ;
8738: LD_VAR 0 1
8742: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
8743: LD_EXP 16
8747: PUSH
8748: LD_INT 3
8750: PPUSH
8751: LD_INT 5
8753: PPUSH
8754: CALL_OW 12
8758: LESS
8759: PUSH
8760: LD_EXP 41
8764: NOT
8765: AND
8766: PUSH
8767: LD_OWVAR 67
8771: PUSH
8772: LD_INT 1
8774: GREATER
8775: AND
8776: IFFALSE 9164
8778: GO 8780
8780: DISABLE
8781: LD_INT 0
8783: PPUSH
8784: PPUSH
8785: PPUSH
// begin uc_side := 3 ;
8786: LD_ADDR_OWVAR 20
8790: PUSH
8791: LD_INT 3
8793: ST_TO_ADDR
// uc_nation := 3 ;
8794: LD_ADDR_OWVAR 21
8798: PUSH
8799: LD_INT 3
8801: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
8802: LD_ADDR_VAR 0 1
8806: PUSH
8807: DOUBLE
8808: LD_INT 1
8810: DEC
8811: ST_TO_ADDR
8812: LD_INT 2
8814: PUSH
8815: LD_INT 3
8817: PUSH
8818: LD_INT 4
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: LIST
8825: PUSH
8826: LD_OWVAR 67
8830: ARRAY
8831: PUSH
8832: FOR_TO
8833: IFFALSE 9085
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
8835: LD_INT 3
8837: PPUSH
8838: LD_INT 3
8840: PPUSH
8841: LD_INT 21
8843: PUSH
8844: LD_INT 22
8846: PUSH
8847: LD_INT 23
8849: PUSH
8850: LD_INT 24
8852: PUSH
8853: LD_INT 24
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: PUSH
8863: LD_OWVAR 67
8867: PPUSH
8868: LD_OWVAR 67
8872: PUSH
8873: LD_INT 2
8875: PLUS
8876: PPUSH
8877: CALL_OW 12
8881: ARRAY
8882: PPUSH
8883: LD_INT 1
8885: PPUSH
8886: LD_INT 1
8888: PPUSH
8889: LD_INT 42
8891: PUSH
8892: LD_INT 44
8894: PUSH
8895: LD_INT 43
8897: PUSH
8898: LD_INT 44
8900: PUSH
8901: LD_INT 46
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: PUSH
8911: LD_INT 1
8913: PPUSH
8914: LD_OWVAR 67
8918: PUSH
8919: LD_INT 2
8921: PLUS
8922: PPUSH
8923: CALL_OW 12
8927: ARRAY
8928: PPUSH
8929: LD_INT 90
8931: PPUSH
8932: CALL 490 0 7
// un := CreateVehicle ;
8936: LD_ADDR_VAR 0 3
8940: PUSH
8941: CALL_OW 45
8945: ST_TO_ADDR
// SetDir ( un , 0 ) ;
8946: LD_VAR 0 3
8950: PPUSH
8951: LD_INT 0
8953: PPUSH
8954: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
8958: LD_VAR 0 3
8962: PPUSH
8963: LD_INT 23
8965: PPUSH
8966: LD_INT 0
8968: PPUSH
8969: CALL 3090 0 3
8973: IFFALSE 9083
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
8975: LD_ADDR_VAR 0 2
8979: PUSH
8980: LD_VAR 0 2
8984: PPUSH
8985: LD_VAR 0 2
8989: PUSH
8990: LD_INT 1
8992: PLUS
8993: PPUSH
8994: LD_VAR 0 3
8998: PPUSH
8999: CALL_OW 1
9003: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
9004: LD_INT 0
9006: PPUSH
9007: LD_INT 3
9009: PUSH
9010: LD_INT 4
9012: PUSH
9013: LD_INT 5
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: LIST
9020: PUSH
9021: LD_OWVAR 67
9025: ARRAY
9026: PPUSH
9027: CALL_OW 383
// un := CreateHuman ;
9031: LD_ADDR_VAR 0 3
9035: PUSH
9036: CALL_OW 44
9040: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
9041: LD_VAR 0 3
9045: PPUSH
9046: LD_VAR 0 2
9050: PUSH
9051: LD_VAR 0 2
9055: ARRAY
9056: PPUSH
9057: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
9061: LD_VAR 0 3
9065: PPUSH
9066: LD_INT 80
9068: PPUSH
9069: LD_INT 139
9071: PPUSH
9072: CALL_OW 111
// wait ( 0 0$3 ) ;
9076: LD_INT 105
9078: PPUSH
9079: CALL_OW 67
// end ; end ;
9083: GO 8832
9085: POP
9086: POP
// for i in tmp do
9087: LD_ADDR_VAR 0 1
9091: PUSH
9092: LD_VAR 0 2
9096: PUSH
9097: FOR_IN
9098: IFFALSE 9162
// begin ComAgressiveMove ( i , 101 , 102 ) ;
9100: LD_VAR 0 1
9104: PPUSH
9105: LD_INT 101
9107: PPUSH
9108: LD_INT 102
9110: PPUSH
9111: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
9115: LD_VAR 0 1
9119: PPUSH
9120: LD_INT 110
9122: PPUSH
9123: LD_INT 78
9125: PPUSH
9126: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
9130: LD_VAR 0 1
9134: PPUSH
9135: LD_INT 75
9137: PPUSH
9138: LD_INT 101
9140: PPUSH
9141: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
9145: LD_VAR 0 1
9149: PPUSH
9150: LD_INT 57
9152: PPUSH
9153: LD_INT 83
9155: PPUSH
9156: CALL_OW 174
// end ;
9160: GO 9097
9162: POP
9163: POP
// end ; end_of_file
9164: PPOPN 3
9166: END
// on UnitDestroyed ( un ) do begin if un = Heike then
9167: LD_VAR 0 1
9171: PUSH
9172: LD_EXP 21
9176: EQUAL
9177: IFFALSE 9186
// YouLost ( Heike ) ;
9179: LD_STRING Heike
9181: PPUSH
9182: CALL_OW 104
// if un in apeSoldGroup then
9186: LD_VAR 0 1
9190: PUSH
9191: LD_EXP 42
9195: IN
9196: IFFALSE 9214
// apeSoldGroup := apeSoldGroup diff un ;
9198: LD_ADDR_EXP 42
9202: PUSH
9203: LD_EXP 42
9207: PUSH
9208: LD_VAR 0 1
9212: DIFF
9213: ST_TO_ADDR
// if un in apeEngGroup then
9214: LD_VAR 0 1
9218: PUSH
9219: LD_EXP 43
9223: IN
9224: IFFALSE 9242
// apeEngGroup := apeEngGroup diff un ;
9226: LD_ADDR_EXP 43
9230: PUSH
9231: LD_EXP 43
9235: PUSH
9236: LD_VAR 0 1
9240: DIFF
9241: ST_TO_ADDR
// if un in oilBaseGuard then
9242: LD_VAR 0 1
9246: PUSH
9247: LD_EXP 38
9251: IN
9252: IFFALSE 9270
// oilBaseGuard := oilBaseGuard diff un ;
9254: LD_ADDR_EXP 38
9258: PUSH
9259: LD_EXP 38
9263: PUSH
9264: LD_VAR 0 1
9268: DIFF
9269: ST_TO_ADDR
// if un in ruNorthGroup then
9270: LD_VAR 0 1
9274: PUSH
9275: LD_EXP 39
9279: IN
9280: IFFALSE 9298
// ruNorthGroup := ruNorthGroup diff un ;
9282: LD_ADDR_EXP 39
9286: PUSH
9287: LD_EXP 39
9291: PUSH
9292: LD_VAR 0 1
9296: DIFF
9297: ST_TO_ADDR
// if un in ruSouthGroup then
9298: LD_VAR 0 1
9302: PUSH
9303: LD_EXP 40
9307: IN
9308: IFFALSE 9326
// ruSouthGroup := ruSouthGroup diff un ;
9310: LD_ADDR_EXP 40
9314: PUSH
9315: LD_EXP 40
9319: PUSH
9320: LD_VAR 0 1
9324: DIFF
9325: ST_TO_ADDR
// if un in ruConvoySquad then
9326: LD_VAR 0 1
9330: PUSH
9331: LD_EXP 41
9335: IN
9336: IFFALSE 9354
// ruConvoySquad := ruConvoySquad diff un ;
9338: LD_ADDR_EXP 41
9342: PUSH
9343: LD_EXP 41
9347: PUSH
9348: LD_VAR 0 1
9352: DIFF
9353: ST_TO_ADDR
// end ;
9354: PPOPN 1
9356: END
// on VehicleConstructed ( veh , fac ) do begin if GetWeapon ( veh ) = ar_radar then
9357: LD_VAR 0 1
9361: PPUSH
9362: CALL_OW 264
9366: PUSH
9367: LD_INT 30
9369: EQUAL
9370: IFFALSE 9380
// radarConstructed := true ;
9372: LD_ADDR_EXP 13
9376: PUSH
9377: LD_INT 1
9379: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
9380: LD_VAR 0 1
9384: PPUSH
9385: CALL_OW 264
9389: PUSH
9390: LD_INT 26
9392: EQUAL
9393: IFFALSE 9403
// flamethrowerBuilt := true ;
9395: LD_ADDR_EXP 20
9399: PUSH
9400: LD_INT 1
9402: ST_TO_ADDR
// end ;
9403: PPOPN 2
9405: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
9406: LD_ADDR_EXP 18
9410: PUSH
9411: LD_EXP 18
9415: PUSH
9416: LD_INT 1
9418: PLUS
9419: ST_TO_ADDR
// end ; end_of_file
9420: PPOPN 4
9422: END
// export function Action ; var i , un , veh , tmp ; begin
9423: LD_INT 0
9425: PPUSH
9426: PPUSH
9427: PPUSH
9428: PPUSH
9429: PPUSH
// InGameOn ;
9430: CALL_OW 8
// music_nat := 2 ;
9434: LD_ADDR_OWVAR 71
9438: PUSH
9439: LD_INT 2
9441: ST_TO_ADDR
// music_class := 0 ;
9442: LD_ADDR_OWVAR 72
9446: PUSH
9447: LD_INT 0
9449: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
9450: LD_INT 7
9452: PPUSH
9453: LD_INT 6
9455: PPUSH
9456: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 20 ) ;
9460: LD_INT 7
9462: PPUSH
9463: LD_INT 6
9465: PPUSH
9466: LD_INT 2
9468: PPUSH
9469: LD_INT 20
9471: NEG
9472: PPUSH
9473: CALL 2894 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Aviradze ] ;
9477: LD_ADDR_VAR 0 5
9481: PUSH
9482: LD_EXP 21
9486: PUSH
9487: LD_EXP 22
9491: PUSH
9492: LD_EXP 23
9496: PUSH
9497: LD_EXP 24
9501: PUSH
9502: LD_EXP 25
9506: PUSH
9507: LD_EXP 26
9511: PUSH
9512: LD_EXP 27
9516: PUSH
9517: LD_EXP 28
9521: PUSH
9522: LD_EXP 33
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: ST_TO_ADDR
// tmp := tmp diff 0 ;
9538: LD_ADDR_VAR 0 5
9542: PUSH
9543: LD_VAR 0 5
9547: PUSH
9548: LD_INT 0
9550: DIFF
9551: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
9552: LD_ADDR_VAR 0 5
9556: PUSH
9557: LD_VAR 0 5
9561: PPUSH
9562: LD_INT 3
9564: PPUSH
9565: CALL 2757 0 2
9569: ST_TO_ADDR
// for i in heikeVehicles do
9570: LD_ADDR_VAR 0 2
9574: PUSH
9575: LD_EXP 35
9579: PUSH
9580: FOR_IN
9581: IFFALSE 9780
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
9583: LD_INT 5
9585: PPUSH
9586: LD_VAR 0 2
9590: PUSH
9591: LD_INT 5
9593: ARRAY
9594: PPUSH
9595: LD_VAR 0 2
9599: PUSH
9600: LD_INT 1
9602: ARRAY
9603: PPUSH
9604: LD_VAR 0 2
9608: PUSH
9609: LD_INT 2
9611: ARRAY
9612: PPUSH
9613: LD_VAR 0 2
9617: PUSH
9618: LD_INT 3
9620: ARRAY
9621: PPUSH
9622: LD_VAR 0 2
9626: PUSH
9627: LD_INT 4
9629: ARRAY
9630: PPUSH
9631: LD_INT 34
9633: PPUSH
9634: CALL 490 0 7
// veh := CreateVehicle ;
9638: LD_ADDR_VAR 0 4
9642: PUSH
9643: CALL_OW 45
9647: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
9648: LD_VAR 0 2
9652: PUSH
9653: LD_INT 4
9655: ARRAY
9656: PUSH
9657: LD_INT 51
9659: PUSH
9660: LD_INT 32
9662: PUSH
9663: LD_INT 12
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: LIST
9670: IN
9671: IFFALSE 9751
// begin if i [ 7 ] [ 1 ] then
9673: LD_VAR 0 2
9677: PUSH
9678: LD_INT 7
9680: ARRAY
9681: PUSH
9682: LD_INT 1
9684: ARRAY
9685: IFFALSE 9712
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
9687: LD_VAR 0 4
9691: PPUSH
9692: LD_INT 1
9694: PPUSH
9695: LD_VAR 0 2
9699: PUSH
9700: LD_INT 7
9702: ARRAY
9703: PUSH
9704: LD_INT 1
9706: ARRAY
9707: PPUSH
9708: CALL_OW 291
// if i [ 7 ] [ 2 ] then
9712: LD_VAR 0 2
9716: PUSH
9717: LD_INT 7
9719: ARRAY
9720: PUSH
9721: LD_INT 2
9723: ARRAY
9724: IFFALSE 9751
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
9726: LD_VAR 0 4
9730: PPUSH
9731: LD_INT 2
9733: PPUSH
9734: LD_VAR 0 2
9738: PUSH
9739: LD_INT 7
9741: ARRAY
9742: PUSH
9743: LD_INT 2
9745: ARRAY
9746: PPUSH
9747: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
9751: LD_VAR 0 4
9755: PPUSH
9756: LD_INT 2
9758: PPUSH
9759: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
9763: LD_VAR 0 4
9767: PPUSH
9768: LD_INT 4
9770: PPUSH
9771: LD_INT 0
9773: PPUSH
9774: CALL_OW 49
// end ;
9778: GO 9580
9780: POP
9781: POP
// if tmp then
9782: LD_VAR 0 5
9786: IFFALSE 9841
// for i in tmp union heikeApes do
9788: LD_ADDR_VAR 0 2
9792: PUSH
9793: LD_VAR 0 5
9797: PUSH
9798: LD_EXP 36
9802: UNION
9803: PUSH
9804: FOR_IN
9805: IFFALSE 9839
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
9807: LD_VAR 0 2
9811: PPUSH
9812: LD_INT 5
9814: PPUSH
9815: LD_INT 0
9817: PPUSH
9818: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
9822: LD_VAR 0 2
9826: PPUSH
9827: LD_INT 26
9829: PPUSH
9830: LD_INT 9
9832: PPUSH
9833: CALL_OW 118
// end ;
9837: GO 9804
9839: POP
9840: POP
// if heikeSecondSquad then
9841: LD_EXP 34
9845: IFFALSE 9894
// for i in heikeSecondSquad do
9847: LD_ADDR_VAR 0 2
9851: PUSH
9852: LD_EXP 34
9856: PUSH
9857: FOR_IN
9858: IFFALSE 9892
// begin PlaceUnitArea ( i , spawnHuman2Area , false ) ;
9860: LD_VAR 0 2
9864: PPUSH
9865: LD_INT 6
9867: PPUSH
9868: LD_INT 0
9870: PPUSH
9871: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
9875: LD_VAR 0 2
9879: PPUSH
9880: LD_INT 26
9882: PPUSH
9883: LD_INT 9
9885: PPUSH
9886: CALL_OW 118
// end ;
9890: GO 9857
9892: POP
9893: POP
// if heikeApes then
9894: LD_EXP 36
9898: IFFALSE 9941
// for i in heikeApes do
9900: LD_ADDR_VAR 0 2
9904: PUSH
9905: LD_EXP 36
9909: PUSH
9910: FOR_IN
9911: IFFALSE 9939
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
9913: LD_VAR 0 2
9917: PPUSH
9918: LD_INT 7
9920: PPUSH
9921: LD_INT 0
9923: PPUSH
9924: CALL_OW 49
// ComHold ( i ) ;
9928: LD_VAR 0 2
9932: PPUSH
9933: CALL_OW 140
// end ;
9937: GO 9910
9939: POP
9940: POP
// if Kurt then
9941: LD_EXP 32
9945: IFFALSE 9977
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
9947: LD_EXP 32
9951: PPUSH
9952: LD_INT 8
9954: PPUSH
9955: LD_INT 0
9957: PPUSH
9958: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
9962: LD_EXP 32
9966: PPUSH
9967: LD_INT 42
9969: PPUSH
9970: LD_INT 32
9972: PPUSH
9973: CALL_OW 118
// end ; Say ( Heike , DH-Start-1 ) ;
9977: LD_EXP 21
9981: PPUSH
9982: LD_STRING DH-Start-1
9984: PPUSH
9985: CALL_OW 88
// if Givi then
9989: LD_EXP 22
9993: IFFALSE 10256
// begin Say ( Givi , DG-Start-2-5 ) ;
9995: LD_EXP 22
9999: PPUSH
10000: LD_STRING DG-Start-2-5
10002: PPUSH
10003: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
10007: LD_EXP 21
10011: PPUSH
10012: LD_STRING DH-Start-3
10014: PPUSH
10015: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
10019: LD_EXP 21
10023: PPUSH
10024: LD_STRING DH-Start-4
10026: PPUSH
10027: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
10031: LD_EXP 22
10035: PPUSH
10036: LD_STRING DG-Start-5
10038: PPUSH
10039: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
10043: LD_EXP 21
10047: PPUSH
10048: LD_STRING DH-Start-6
10050: PPUSH
10051: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
10055: LD_EXP 22
10059: PPUSH
10060: LD_STRING DG-Start-7
10062: PPUSH
10063: CALL_OW 88
// if Mike then
10067: LD_EXP 23
10071: IFFALSE 10244
// begin Say ( Mike , DM-Start-8 ) ;
10073: LD_EXP 23
10077: PPUSH
10078: LD_STRING DM-Start-8
10080: PPUSH
10081: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
10085: LD_EXP 23
10089: PPUSH
10090: LD_STRING DM-Start-9
10092: PPUSH
10093: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
10097: LD_EXP 22
10101: PPUSH
10102: LD_STRING DG-Start-10
10104: PPUSH
10105: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
10109: LD_EXP 22
10113: PPUSH
10114: LD_STRING DG-Start-11
10116: PPUSH
10117: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
10121: LD_EXP 21
10125: PPUSH
10126: LD_STRING DH-Start-12
10128: PPUSH
10129: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
10133: LD_EXP 22
10137: PPUSH
10138: LD_STRING DG-Start-13
10140: PPUSH
10141: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
10145: LD_EXP 22
10149: PPUSH
10150: LD_STRING DG-Start-14
10152: PPUSH
10153: CALL_OW 88
// if Kaia then
10157: LD_EXP 26
10161: IFFALSE 10244
// begin Say ( Kaia , DK-Start-15 ) ;
10163: LD_EXP 26
10167: PPUSH
10168: LD_STRING DK-Start-15
10170: PPUSH
10171: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
10175: LD_EXP 26
10179: PPUSH
10180: LD_STRING DK-Start-16
10182: PPUSH
10183: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
10187: LD_EXP 26
10191: PPUSH
10192: LD_STRING DK-Start-17
10194: PPUSH
10195: CALL_OW 88
// wait ( 0 0$0.3 ) ;
10199: LD_INT 10
10201: PPUSH
10202: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
10206: LD_EXP 22
10210: PPUSH
10211: LD_EXP 26
10215: PPUSH
10216: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
10220: LD_EXP 22
10224: PPUSH
10225: LD_STRING DG-Start-18
10227: PPUSH
10228: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
10232: LD_EXP 26
10236: PPUSH
10237: LD_STRING DK-Start-19
10239: PPUSH
10240: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
10244: LD_EXP 21
10248: PPUSH
10249: LD_STRING DH-Start-20
10251: PPUSH
10252: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
10256: LD_INT 70
10258: PPUSH
10259: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
10263: LD_EXP 29
10267: PPUSH
10268: LD_STRING DShar-Start-21
10270: PPUSH
10271: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
10275: LD_EXP 21
10279: PPUSH
10280: LD_STRING DH-Start-22
10282: PPUSH
10283: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
10287: LD_EXP 29
10291: PPUSH
10292: LD_STRING DShar-Start-23
10294: PPUSH
10295: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
10299: LD_EXP 29
10303: PPUSH
10304: LD_STRING DShar-Start-24
10306: PPUSH
10307: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
10311: LD_EXP 29
10315: PPUSH
10316: LD_STRING DShar-Start-25
10318: PPUSH
10319: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
10323: LD_EXP 29
10327: PPUSH
10328: LD_STRING DShar-Start-26
10330: PPUSH
10331: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
10335: LD_EXP 21
10339: PPUSH
10340: LD_STRING DH-Start-27
10342: PPUSH
10343: CALL_OW 88
// if Kaia then
10347: LD_EXP 26
10351: IFFALSE 10391
// begin ComTurnUnit ( Heike , Kaia ) ;
10353: LD_EXP 21
10357: PPUSH
10358: LD_EXP 26
10362: PPUSH
10363: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
10367: LD_EXP 26
10371: PPUSH
10372: LD_STRING DK-Start-28
10374: PPUSH
10375: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
10379: LD_EXP 21
10383: PPUSH
10384: LD_STRING DH-Start-29
10386: PPUSH
10387: CALL_OW 88
// end ; if Givi then
10391: LD_EXP 22
10395: IFFALSE 10607
// begin ComTurnUnit ( Heike , Givi ) ;
10397: LD_EXP 21
10401: PPUSH
10402: LD_EXP 22
10406: PPUSH
10407: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
10411: LD_EXP 22
10415: PPUSH
10416: LD_EXP 21
10420: PPUSH
10421: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
10425: LD_EXP 21
10429: PPUSH
10430: LD_STRING DH-Start-30
10432: PPUSH
10433: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
10437: LD_EXP 21
10441: PPUSH
10442: LD_STRING DH-Start-31
10444: PPUSH
10445: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
10449: LD_EXP 22
10453: PPUSH
10454: LD_STRING DG-Start-32
10456: PPUSH
10457: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
10461: LD_EXP 21
10465: PPUSH
10466: LD_STRING DH-Start-33
10468: PPUSH
10469: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
10473: LD_EXP 22
10477: PPUSH
10478: LD_STRING DG-Start-34
10480: PPUSH
10481: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
10485: LD_EXP 22
10489: PPUSH
10490: LD_STRING DG-Start-35
10492: PPUSH
10493: CALL_OW 88
// if Kurt and not dialogue_skipped then
10497: LD_EXP 32
10501: PUSH
10502: LD_OWVAR 59
10506: NOT
10507: AND
10508: IFFALSE 10539
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
10510: LD_EXP 32
10514: PPUSH
10515: LD_INT 28
10517: PPUSH
10518: LD_INT 13
10520: PPUSH
10521: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
10525: LD_EXP 32
10529: PPUSH
10530: LD_EXP 21
10534: PPUSH
10535: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
10539: LD_EXP 22
10543: PPUSH
10544: LD_STRING DG-Start-36
10546: PPUSH
10547: CALL_OW 88
// if Kurt then
10551: LD_EXP 32
10555: IFFALSE 10607
// begin Say ( Kurt , DKs-Start-37 ) ;
10557: LD_EXP 32
10561: PPUSH
10562: LD_STRING DKs-Start-37
10564: PPUSH
10565: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
10569: LD_EXP 32
10573: PPUSH
10574: LD_STRING DKs-Start-38
10576: PPUSH
10577: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
10581: LD_EXP 21
10585: PPUSH
10586: LD_EXP 32
10590: PPUSH
10591: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
10595: LD_EXP 21
10599: PPUSH
10600: LD_STRING DH-Start-39
10602: PPUSH
10603: CALL_OW 88
// end ; end ; if HexInfo ( 44 , 25 ) then
10607: LD_INT 44
10609: PPUSH
10610: LD_INT 25
10612: PPUSH
10613: CALL_OW 428
10617: IFFALSE 10634
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
10619: LD_INT 44
10621: PPUSH
10622: LD_INT 25
10624: PPUSH
10625: CALL_OW 428
10629: PPUSH
10630: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
10634: LD_EXP 30
10638: PPUSH
10639: LD_INT 5
10641: PPUSH
10642: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
10646: LD_EXP 30
10650: PPUSH
10651: LD_INT 44
10653: PPUSH
10654: LD_INT 25
10656: PPUSH
10657: LD_INT 0
10659: PPUSH
10660: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
10664: LD_EXP 30
10668: PPUSH
10669: LD_INT 29
10671: PPUSH
10672: LD_INT 12
10674: PPUSH
10675: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10679: LD_INT 35
10681: PPUSH
10682: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
10686: LD_OWVAR 59
10690: PUSH
10691: LD_EXP 21
10695: PPUSH
10696: LD_EXP 30
10700: PPUSH
10701: CALL_OW 296
10705: PUSH
10706: LD_INT 8
10708: LESS
10709: OR
10710: PUSH
10711: LD_EXP 30
10715: PPUSH
10716: LD_INT 26
10718: PPUSH
10719: LD_INT 9
10721: PPUSH
10722: CALL_OW 297
10726: PUSH
10727: LD_INT 6
10729: LESS
10730: OR
10731: IFFALSE 10679
// Say ( Olaf , DO-Scout-1 ) ;
10733: LD_EXP 30
10737: PPUSH
10738: LD_STRING DO-Scout-1
10740: PPUSH
10741: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
10745: LD_EXP 30
10749: PPUSH
10750: LD_EXP 21
10754: PPUSH
10755: CALL_OW 119
// for i in tmp union heikeSecondSquad do
10759: LD_ADDR_VAR 0 2
10763: PUSH
10764: LD_VAR 0 5
10768: PUSH
10769: LD_EXP 34
10773: UNION
10774: PUSH
10775: FOR_IN
10776: IFFALSE 10794
// ComTurnUnit ( i , Olaf ) ;
10778: LD_VAR 0 2
10782: PPUSH
10783: LD_EXP 30
10787: PPUSH
10788: CALL_OW 119
10792: GO 10775
10794: POP
10795: POP
// wait ( 0 0$0.3 ) ;
10796: LD_INT 10
10798: PPUSH
10799: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
10803: LD_EXP 21
10807: PPUSH
10808: LD_EXP 30
10812: PPUSH
10813: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
10817: LD_EXP 21
10821: PPUSH
10822: LD_EXP 30
10826: PPUSH
10827: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
10831: LD_EXP 21
10835: PPUSH
10836: LD_STRING DH-Scout-2
10838: PPUSH
10839: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
10843: LD_EXP 30
10847: PPUSH
10848: LD_STRING DO-Scout-3
10850: PPUSH
10851: CALL_OW 88
// if Mike and Givi then
10855: LD_EXP 23
10859: PUSH
10860: LD_EXP 22
10864: AND
10865: IFFALSE 10881
// Say ( Olaf , DO-Scout-4 ) else
10867: LD_EXP 30
10871: PPUSH
10872: LD_STRING DO-Scout-4
10874: PPUSH
10875: CALL_OW 88
10879: GO 10981
// begin if Mike then
10881: LD_EXP 23
10885: IFFALSE 10913
// begin Say ( Olaf , DO-Scout-a-4 ) ;
10887: LD_EXP 30
10891: PPUSH
10892: LD_STRING DO-Scout-a-4
10894: PPUSH
10895: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
10899: LD_EXP 21
10903: PPUSH
10904: LD_STRING DH-Scout-a-5
10906: PPUSH
10907: CALL_OW 88
// end else
10911: GO 10981
// if Givi then
10913: LD_EXP 22
10917: IFFALSE 10945
// begin Say ( Olaf , DO-Scout-b-4 ) ;
10919: LD_EXP 30
10923: PPUSH
10924: LD_STRING DO-Scout-b-4
10926: PPUSH
10927: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
10931: LD_EXP 21
10935: PPUSH
10936: LD_STRING DH-Scout-b-5
10938: PPUSH
10939: CALL_OW 88
// end else
10943: GO 10981
// begin Say ( Olaf , DO-Scout-f-4 ) ;
10945: LD_EXP 30
10949: PPUSH
10950: LD_STRING DO-Scout-f-4
10952: PPUSH
10953: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
10957: LD_EXP 21
10961: PPUSH
10962: LD_STRING DH-Scout-f-5
10964: PPUSH
10965: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
10969: LD_EXP 30
10973: PPUSH
10974: LD_STRING DO-Scout-f-6
10976: PPUSH
10977: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
10981: LD_EXP 21
10985: PPUSH
10986: LD_STRING DH-Scout-5
10988: PPUSH
10989: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
10993: LD_EXP 30
10997: PPUSH
10998: LD_STRING DO-Scout-6
11000: PPUSH
11001: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
11005: LD_EXP 30
11009: PPUSH
11010: LD_STRING DO-Scout-7
11012: PPUSH
11013: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
11017: LD_EXP 21
11021: PPUSH
11022: LD_STRING DH-Scout-8
11024: PPUSH
11025: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
11029: LD_EXP 21
11033: PPUSH
11034: LD_STRING DH-Scout-9
11036: PPUSH
11037: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
11041: LD_EXP 30
11045: PPUSH
11046: LD_STRING DO-Scout-10
11048: PPUSH
11049: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
11053: LD_EXP 30
11057: PPUSH
11058: LD_STRING DO-Scout-12
11060: PPUSH
11061: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
11065: LD_EXP 30
11069: PPUSH
11070: LD_STRING DO-Scout-13
11072: PPUSH
11073: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
11077: LD_EXP 30
11081: PPUSH
11082: LD_STRING DO-Scout-14
11084: PPUSH
11085: CALL_OW 88
// if Givi then
11089: LD_EXP 22
11093: IFFALSE 11119
// begin Say ( Givi , DG-Scout-15 ) ;
11095: LD_EXP 22
11099: PPUSH
11100: LD_STRING DG-Scout-15
11102: PPUSH
11103: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
11107: LD_EXP 26
11111: PPUSH
11112: LD_STRING DK-Scout-16
11114: PPUSH
11115: CALL_OW 88
// end ; if not dialogue_skipped then
11119: LD_OWVAR 59
11123: NOT
11124: IFFALSE 11243
// begin async ;
11126: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
11127: LD_EXP 30
11131: PPUSH
11132: LD_STRING DO-Scout-17
11134: PPUSH
11135: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
11139: LD_INT 55
11141: PPUSH
11142: LD_INT 77
11144: PPUSH
11145: LD_INT 2
11147: PPUSH
11148: LD_INT 6
11150: NEG
11151: PPUSH
11152: CALL 2894 0 4
// wait ( 10 ) ;
11156: LD_INT 10
11158: PPUSH
11159: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
11163: LD_INT 55
11165: PPUSH
11166: LD_INT 77
11168: PPUSH
11169: CALL_OW 84
// wait ( 0 0$5 ) ;
11173: LD_INT 175
11175: PPUSH
11176: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
11180: LD_EXP 30
11184: PPUSH
11185: LD_STRING DO-Scout-18
11187: PPUSH
11188: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
11192: LD_INT 204
11194: PPUSH
11195: LD_INT 107
11197: PPUSH
11198: LD_INT 2
11200: PPUSH
11201: LD_INT 12
11203: NEG
11204: PPUSH
11205: CALL 2894 0 4
// wait ( 10 ) ;
11209: LD_INT 10
11211: PPUSH
11212: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
11216: LD_INT 204
11218: PPUSH
11219: LD_INT 107
11221: PPUSH
11222: CALL_OW 84
// wait ( 0 0$5 ) ;
11226: LD_INT 175
11228: PPUSH
11229: CALL_OW 67
// sync ;
11233: SYNC
// CenterNowOnUnits ( Heike ) ;
11234: LD_EXP 21
11238: PPUSH
11239: CALL_OW 87
// end ; Say ( Olaf , DO-Scout-19 ) ;
11243: LD_EXP 30
11247: PPUSH
11248: LD_STRING DO-Scout-19
11250: PPUSH
11251: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
11255: LD_EXP 30
11259: PPUSH
11260: LD_STRING DO-Scout-20
11262: PPUSH
11263: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
11267: LD_EXP 21
11271: PPUSH
11272: LD_STRING DH-Scout-21
11274: PPUSH
11275: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
11279: LD_EXP 21
11283: PPUSH
11284: LD_STRING DH-Scout-22
11286: PPUSH
11287: CALL_OW 88
// InGameOff ;
11291: CALL_OW 9
// if Givi then
11295: LD_EXP 22
11299: IFFALSE 11314
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
11301: LD_INT 13
11303: PPUSH
11304: LD_INT 2
11306: PPUSH
11307: LD_INT 1
11309: PPUSH
11310: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
11314: LD_STRING Road
11316: PPUSH
11317: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
11321: LD_ADDR_VAR 0 2
11325: PUSH
11326: LD_INT 22
11328: PUSH
11329: LD_INT 5
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: PUSH
11336: LD_INT 21
11338: PUSH
11339: LD_INT 2
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: PPUSH
11350: CALL_OW 69
11354: PUSH
11355: FOR_IN
11356: IFFALSE 11372
// SetSide ( i , 2 ) ;
11358: LD_VAR 0 2
11362: PPUSH
11363: LD_INT 2
11365: PPUSH
11366: CALL_OW 235
11370: GO 11355
11372: POP
11373: POP
// SaveForQuickRestart ;
11374: CALL_OW 22
// end ;
11378: LD_VAR 0 1
11382: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
11383: LD_INT 2
11385: PPUSH
11386: LD_INT 9
11388: PPUSH
11389: CALL_OW 294
11393: IFFALSE 11760
11395: GO 11397
11397: DISABLE
// begin DialogueOn ;
11398: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
11402: LD_INT 111
11404: PPUSH
11405: LD_INT 72
11407: PPUSH
11408: LD_INT 2
11410: PPUSH
11411: LD_INT 20
11413: NEG
11414: PPUSH
11415: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
11419: LD_INT 111
11421: PPUSH
11422: LD_INT 72
11424: PPUSH
11425: LD_INT 2
11427: PPUSH
11428: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
11432: LD_INT 111
11434: PPUSH
11435: LD_INT 72
11437: PPUSH
11438: CALL_OW 86
// if IsOk ( Kamil ) then
11442: LD_EXP 25
11446: PPUSH
11447: CALL_OW 302
11451: IFFALSE 11568
// begin Say ( Kamil , DKam-Cross-1 ) ;
11453: LD_EXP 25
11457: PPUSH
11458: LD_STRING DKam-Cross-1
11460: PPUSH
11461: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
11465: LD_EXP 25
11469: PPUSH
11470: LD_STRING DKam-Cross-2
11472: PPUSH
11473: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
11477: LD_EXP 25
11481: PPUSH
11482: LD_STRING DKam-Cross-3
11484: PPUSH
11485: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
11489: LD_EXP 25
11493: PPUSH
11494: LD_STRING DKam-Cross-4
11496: PPUSH
11497: CALL_OW 88
// if IsOk ( Ibrahim ) then
11501: LD_EXP 24
11505: PPUSH
11506: CALL_OW 302
11510: IFFALSE 11566
// begin if ibrahimJoinedIn04 then
11512: LD_EXP 4
11516: IFFALSE 11530
// Say ( Ibrahim , DI-Cross-b-5 ) ;
11518: LD_EXP 24
11522: PPUSH
11523: LD_STRING DI-Cross-b-5
11525: PPUSH
11526: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
11530: LD_EXP 24
11534: PPUSH
11535: LD_STRING DI-Cross-b-6
11537: PPUSH
11538: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
11542: LD_EXP 24
11546: PPUSH
11547: LD_STRING DI-Cross-b-7
11549: PPUSH
11550: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
11554: LD_EXP 25
11558: PPUSH
11559: LD_STRING DKam-Cross-8
11561: PPUSH
11562: CALL_OW 88
// end ; end else
11566: GO 11726
// if IsOk ( Sophia ) then
11568: LD_EXP 27
11572: PPUSH
11573: CALL_OW 302
11577: IFFALSE 11694
// begin Say ( Sophia , DS-Cross-1 ) ;
11579: LD_EXP 27
11583: PPUSH
11584: LD_STRING DS-Cross-1
11586: PPUSH
11587: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
11591: LD_EXP 27
11595: PPUSH
11596: LD_STRING DS-Cross-2
11598: PPUSH
11599: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
11603: LD_EXP 27
11607: PPUSH
11608: LD_STRING DS-Cross-3
11610: PPUSH
11611: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
11615: LD_EXP 27
11619: PPUSH
11620: LD_STRING DS-Cross-4
11622: PPUSH
11623: CALL_OW 88
// if IsOk ( Ibrahim ) then
11627: LD_EXP 24
11631: PPUSH
11632: CALL_OW 302
11636: IFFALSE 11692
// begin if ibrahimJoinedIn04 then
11638: LD_EXP 4
11642: IFFALSE 11656
// Say ( Ibrahim , DI-Cross-b-5 ) ;
11644: LD_EXP 24
11648: PPUSH
11649: LD_STRING DI-Cross-b-5
11651: PPUSH
11652: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
11656: LD_EXP 24
11660: PPUSH
11661: LD_STRING DI-Cross-b-6
11663: PPUSH
11664: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
11668: LD_EXP 24
11672: PPUSH
11673: LD_STRING DI-Cross-b-7
11675: PPUSH
11676: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
11680: LD_EXP 27
11684: PPUSH
11685: LD_STRING DS-Cross-8
11687: PPUSH
11688: CALL_OW 88
// end ; end else
11692: GO 11726
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
11694: LD_EXP 34
11698: PPUSH
11699: LD_INT 50
11701: PUSH
11702: EMPTY
11703: LIST
11704: PPUSH
11705: CALL_OW 72
11709: IFFALSE 11726
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
11711: LD_EXP 34
11715: PPUSH
11716: LD_STRING DArm-Cross-c-1
11718: PPUSH
11719: LD_STRING DArf-Cross-c-1
11721: PPUSH
11722: CALL 2945 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
11726: LD_EXP 55
11730: PPUSH
11731: LD_INT 2
11733: PPUSH
11734: LD_INT 1
11736: PPUSH
11737: CALL_OW 322
// DialogueOff ;
11741: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
11745: LD_STRING Crane
11747: PPUSH
11748: CALL_OW 337
// spottedCrossRoad := true ;
11752: LD_ADDR_EXP 8
11756: PUSH
11757: LD_INT 1
11759: ST_TO_ADDR
// end ;
11760: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
11761: LD_INT 22
11763: PUSH
11764: LD_INT 2
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: PUSH
11771: LD_INT 2
11773: PUSH
11774: LD_INT 30
11776: PUSH
11777: LD_INT 0
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: LD_INT 30
11786: PUSH
11787: LD_INT 1
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: LIST
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: PPUSH
11803: CALL_OW 69
11807: PUSH
11808: LD_EXP 26
11812: PPUSH
11813: CALL_OW 302
11817: PUSH
11818: LD_EXP 34
11822: OR
11823: AND
11824: IFFALSE 12036
11826: GO 11828
11828: DISABLE
// begin DialogueOn ;
11829: CALL_OW 6
// if Kaia then
11833: LD_EXP 26
11837: IFFALSE 11850
// CenterNowOnUnits ( Kaia ) else
11839: LD_EXP 26
11843: PPUSH
11844: CALL_OW 87
11848: GO 11859
// CenterNowOnUnits ( Heike ) ;
11850: LD_EXP 21
11854: PPUSH
11855: CALL_OW 87
// if IsOk ( Kaia ) then
11859: LD_EXP 26
11863: PPUSH
11864: CALL_OW 302
11868: IFFALSE 11884
// Say ( Kaia , DK-Cam-1 ) else
11870: LD_EXP 26
11874: PPUSH
11875: LD_STRING DK-Cam-1
11877: PPUSH
11878: CALL_OW 88
11882: GO 11899
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
11884: LD_EXP 34
11888: PPUSH
11889: LD_STRING DArm-Cam-1
11891: PPUSH
11892: LD_STRING DArf-Cam-1
11894: PPUSH
11895: CALL 2945 0 3
// Say ( Heike , DH-Cam-2 ) ;
11899: LD_EXP 21
11903: PPUSH
11904: LD_STRING DH-Cam-2
11906: PPUSH
11907: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
11911: LD_EXP 21
11915: PPUSH
11916: LD_STRING DH-Cam-3
11918: PPUSH
11919: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11923: LD_EXP 21
11927: PPUSH
11928: LD_STRING DH-Cam-4
11930: PPUSH
11931: CALL_OW 88
// if IsOk ( Kaia ) then
11935: LD_EXP 26
11939: PPUSH
11940: CALL_OW 302
11944: IFFALSE 11960
// Say ( Kaia , DK-Cam-5 ) else
11946: LD_EXP 26
11950: PPUSH
11951: LD_STRING DK-Cam-5
11953: PPUSH
11954: CALL_OW 88
11958: GO 11975
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
11960: LD_EXP 34
11964: PPUSH
11965: LD_STRING DArm-Cam-5
11967: PPUSH
11968: LD_STRING DArf-Cam-5
11970: PPUSH
11971: CALL 2945 0 3
// Say ( Olaf , DO-Cam-6 ) ;
11975: LD_EXP 30
11979: PPUSH
11980: LD_STRING DO-Cam-6
11982: PPUSH
11983: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
11987: LD_EXP 30
11991: PPUSH
11992: LD_STRING DO-Cam-7
11994: PPUSH
11995: CALL_OW 88
// DialogueOff ;
11999: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
12003: LD_STRING Radar
12005: PPUSH
12006: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
12010: LD_INT 6
12012: PPUSH
12013: LD_INT 2
12015: PPUSH
12016: LD_INT 1
12018: PPUSH
12019: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
12023: LD_INT 20
12025: PPUSH
12026: LD_INT 2
12028: PPUSH
12029: LD_INT 1
12031: PPUSH
12032: CALL_OW 324
// end ;
12036: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
12037: LD_INT 22
12039: PUSH
12040: LD_INT 2
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: PUSH
12047: LD_INT 2
12049: PUSH
12050: LD_INT 34
12052: PUSH
12053: LD_INT 30
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: PUSH
12060: LD_INT 35
12062: PUSH
12063: LD_INT 30
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: LIST
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: PPUSH
12079: CALL_OW 69
12083: IFFALSE 12095
12085: GO 12087
12087: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
12088: LD_STRING RadarDone
12090: PPUSH
12091: CALL_OW 337
12095: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
12096: LD_EXP 30
12100: PPUSH
12101: CALL_OW 302
12105: PUSH
12106: LD_EXP 33
12110: PPUSH
12111: CALL_OW 302
12115: AND
12116: PUSH
12117: LD_INT 6
12119: PPUSH
12120: LD_INT 2
12122: PPUSH
12123: CALL_OW 321
12127: PUSH
12128: LD_INT 2
12130: EQUAL
12131: AND
12132: PUSH
12133: LD_EXP 33
12137: PPUSH
12138: LD_EXP 21
12142: PPUSH
12143: CALL_OW 296
12147: PUSH
12148: LD_INT 10
12150: LESS
12151: PUSH
12152: LD_EXP 33
12156: PPUSH
12157: CALL_OW 310
12161: OR
12162: AND
12163: IFFALSE 12377
12165: GO 12167
12167: DISABLE
// begin DialogueOn ;
12168: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
12172: LD_EXP 33
12176: PPUSH
12177: LD_STRING DA-RC-1
12179: PPUSH
12180: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
12184: LD_EXP 33
12188: PPUSH
12189: LD_STRING DA-RC-2
12191: PPUSH
12192: CALL_OW 88
// if IsOk ( Kaia ) then
12196: LD_EXP 26
12200: PPUSH
12201: CALL_OW 302
12205: IFFALSE 12279
// begin Say ( Kaia , DK-RC-3 ) ;
12207: LD_EXP 26
12211: PPUSH
12212: LD_STRING DK-RC-3
12214: PPUSH
12215: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
12219: LD_EXP 33
12223: PPUSH
12224: LD_STRING DA-RC-4
12226: PPUSH
12227: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
12231: LD_EXP 26
12235: PPUSH
12236: LD_STRING DK-RC-5
12238: PPUSH
12239: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
12243: LD_EXP 33
12247: PPUSH
12248: LD_STRING DA-RC-6
12250: PPUSH
12251: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
12255: LD_EXP 26
12259: PPUSH
12260: LD_STRING DK-RC-7
12262: PPUSH
12263: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
12267: LD_EXP 33
12271: PPUSH
12272: LD_STRING DA-RC-8
12274: PPUSH
12275: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
12279: LD_EXP 21
12283: PPUSH
12284: LD_STRING DH-RC-9
12286: PPUSH
12287: CALL_OW 88
// if IsOk ( Markov ) then
12291: LD_EXP 28
12295: PPUSH
12296: CALL_OW 302
12300: IFFALSE 12328
// begin Say ( Markov , DMar-RC-10 ) ;
12302: LD_EXP 28
12306: PPUSH
12307: LD_STRING DMar-RC-10
12309: PPUSH
12310: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
12314: LD_EXP 28
12318: PPUSH
12319: LD_STRING DMar-RC-11
12321: PPUSH
12322: CALL_OW 88
// end else
12326: GO 12340
// begin Say ( Olaf , DO-RC-a-10 ) ;
12328: LD_EXP 30
12332: PPUSH
12333: LD_STRING DO-RC-a-10
12335: PPUSH
12336: CALL_OW 88
// end ; DialogueOff ;
12340: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
12344: LD_STRING RemoteControl
12346: PPUSH
12347: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
12351: LD_INT 15
12353: PPUSH
12354: LD_INT 2
12356: PPUSH
12357: LD_INT 1
12359: PPUSH
12360: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
12364: LD_INT 22
12366: PPUSH
12367: LD_INT 2
12369: PPUSH
12370: LD_INT 1
12372: PPUSH
12373: CALL_OW 324
// end ;
12377: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
12378: LD_INT 12
12380: PPUSH
12381: LD_INT 22
12383: PUSH
12384: LD_INT 2
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: PPUSH
12391: CALL_OW 70
12395: IFFALSE 12762
12397: GO 12399
12399: DISABLE
12400: LD_INT 0
12402: PPUSH
// begin PrepareWestBase ;
12403: CALL 5758 0 0
// westBaseSpotted := true ;
12407: LD_ADDR_EXP 5
12411: PUSH
12412: LD_INT 1
12414: ST_TO_ADDR
// wait ( 0 0$2 ) ;
12415: LD_INT 70
12417: PPUSH
12418: CALL_OW 67
// InGameOn ;
12422: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
12426: LD_INT 56
12428: PPUSH
12429: LD_INT 77
12431: PPUSH
12432: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
12436: LD_INT 56
12438: PPUSH
12439: LD_INT 77
12441: PPUSH
12442: LD_INT 2
12444: PPUSH
12445: LD_INT 12
12447: NEG
12448: PPUSH
12449: CALL_OW 330
// wait ( 0 0$2 ) ;
12453: LD_INT 70
12455: PPUSH
12456: CALL_OW 67
// DialogueOn ;
12460: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
12464: LD_EXP 21
12468: PPUSH
12469: LD_STRING DH-Rbase-1
12471: PPUSH
12472: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
12476: LD_EXP 26
12480: PPUSH
12481: LD_STRING DK-Rbase-2
12483: PPUSH
12484: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
12488: LD_EXP 26
12492: PPUSH
12493: LD_STRING DK-Rbase-3
12495: PPUSH
12496: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
12500: LD_EXP 26
12504: PPUSH
12505: LD_STRING DK-Rbase-4
12507: PPUSH
12508: CALL_OW 88
// DialogueOff ;
12512: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
12516: LD_INT 56
12518: PPUSH
12519: LD_INT 77
12521: PPUSH
12522: LD_INT 2
12524: PPUSH
12525: CALL_OW 331
// InGameOff ;
12529: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
12533: LD_INT 35
12535: PPUSH
12536: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
12540: LD_EXP 42
12544: NOT
12545: PUSH
12546: LD_EXP 43
12550: NOT
12551: AND
12552: IFFALSE 12533
// wait ( 0 0$2 ) ;
12554: LD_INT 70
12556: PPUSH
12557: CALL_OW 67
// if IsOk ( Kaia ) then
12561: LD_EXP 26
12565: PPUSH
12566: CALL_OW 302
12570: IFFALSE 12685
// begin DialogueOn ;
12572: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
12576: LD_INT 56
12578: PPUSH
12579: LD_INT 81
12581: PPUSH
12582: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
12586: LD_EXP 26
12590: PPUSH
12591: LD_STRING DK-Rbase-5
12593: PPUSH
12594: CALL_OW 88
// if IsOk ( Givi ) then
12598: LD_EXP 22
12602: PPUSH
12603: CALL_OW 302
12607: IFFALSE 12681
// begin Say ( Givi , DG-Rbase-6 ) ;
12609: LD_EXP 22
12613: PPUSH
12614: LD_STRING DG-Rbase-6
12616: PPUSH
12617: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
12621: LD_EXP 22
12625: PPUSH
12626: LD_STRING DG-Rbase-7
12628: PPUSH
12629: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
12633: LD_EXP 26
12637: PPUSH
12638: LD_STRING DK-Rbase-8
12640: PPUSH
12641: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
12645: LD_EXP 22
12649: PPUSH
12650: LD_STRING DG-Rbase-9
12652: PPUSH
12653: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
12657: LD_EXP 22
12661: PPUSH
12662: LD_STRING DG-Rbase-10
12664: PPUSH
12665: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
12669: LD_EXP 26
12673: PPUSH
12674: LD_STRING DK-Rbase-11
12676: PPUSH
12677: CALL_OW 88
// end ; DialogueOff ;
12681: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
12685: LD_ADDR_VAR 0 1
12689: PUSH
12690: LD_INT 12
12692: PPUSH
12693: LD_INT 22
12695: PUSH
12696: LD_INT 3
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: PUSH
12703: LD_INT 21
12705: PUSH
12706: LD_INT 3
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: PPUSH
12717: CALL_OW 70
12721: PUSH
12722: FOR_IN
12723: IFFALSE 12739
// SetSide ( i , 2 ) ;
12725: LD_VAR 0 1
12729: PPUSH
12730: LD_INT 2
12732: PPUSH
12733: CALL_OW 235
12737: GO 12722
12739: POP
12740: POP
// westBaseCaptured := true ;
12741: LD_ADDR_EXP 9
12745: PUSH
12746: LD_INT 1
12748: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
12749: LD_INT 0
12751: PPUSH
12752: LD_INT 2
12754: PPUSH
12755: LD_INT 1
12757: PPUSH
12758: CALL_OW 324
// end ;
12762: PPOPN 1
12764: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
12765: LD_EXP 38
12769: NOT
12770: PUSH
12771: LD_INT 10
12773: PPUSH
12774: CALL_OW 255
12778: PUSH
12779: LD_INT 2
12781: EQUAL
12782: OR
12783: IFFALSE 12920
12785: GO 12787
12787: DISABLE
// begin DialogueOn ;
12788: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
12792: LD_EXP 21
12796: PPUSH
12797: LD_STRING DH-Goal-1
12799: PPUSH
12800: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
12804: LD_EXP 29
12808: PPUSH
12809: LD_STRING DShar-Goal-2
12811: PPUSH
12812: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
12816: LD_EXP 21
12820: PPUSH
12821: LD_STRING DH-Goal-3
12823: PPUSH
12824: CALL_OW 88
// if reinforcementsAllowed then
12828: LD_EXP 14
12832: IFFALSE 12858
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
12834: LD_EXP 29
12838: PPUSH
12839: LD_STRING DShar-Goal-4
12841: PPUSH
12842: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
12846: LD_EXP 21
12850: PPUSH
12851: LD_STRING DH-Goal-5
12853: PPUSH
12854: CALL_OW 88
// end ; DialogueOff ;
12858: CALL_OW 7
// eastBaseCaptured := true ;
12862: LD_ADDR_EXP 10
12866: PUSH
12867: LD_INT 1
12869: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
12870: LD_STRING BaseCaptured
12872: PPUSH
12873: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
12877: LD_INT 10
12879: PPUSH
12880: LD_INT 2
12882: PPUSH
12883: CALL_OW 235
// if not reinforcementsAllowed then
12887: LD_EXP 14
12891: NOT
12892: IFFALSE 12896
// exit ;
12894: GO 12920
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
12896: LD_INT 21000
12898: PUSH
12899: LD_INT 1050
12901: NEG
12902: PPUSH
12903: LD_INT 1050
12905: PPUSH
12906: CALL_OW 12
12910: PLUS
12911: PPUSH
12912: CALL_OW 67
// PrepareReinforcements ;
12916: CALL 4086 0 0
// end ;
12920: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
12921: LD_INT 22
12923: PUSH
12924: LD_INT 2
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: PUSH
12931: LD_INT 30
12933: PUSH
12934: LD_INT 13
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: PPUSH
12945: CALL_OW 69
12949: IFFALSE 12966
12951: GO 12953
12953: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
12954: LD_EXP 22
12958: PPUSH
12959: LD_STRING DG-Lab-1
12961: PPUSH
12962: CALL_OW 88
// end ;
12966: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched do
12967: LD_INT 5
12969: PPUSH
12970: LD_INT 2
12972: PPUSH
12973: CALL_OW 321
12977: PUSH
12978: LD_INT 2
12980: EQUAL
12981: IFFALSE 13042
12983: GO 12985
12985: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
12986: LD_EXP 22
12990: PPUSH
12991: LD_STRING DG-Stim-1
12993: PPUSH
12994: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
12998: LD_EXP 21
13002: PPUSH
13003: LD_STRING DH-Stim-2
13005: PPUSH
13006: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
13010: LD_EXP 22
13014: PPUSH
13015: LD_STRING DG-Stim-3
13017: PPUSH
13018: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
13022: LD_EXP 21
13026: PPUSH
13027: LD_STRING DH-Stim-4
13029: PPUSH
13030: CALL_OW 88
// drugsResearched := true ;
13034: LD_ADDR_EXP 11
13038: PUSH
13039: LD_INT 1
13041: ST_TO_ADDR
// end ;
13042: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
13043: LD_EXP 11
13047: IFFALSE 13359
13049: GO 13051
13051: DISABLE
13052: LD_INT 0
13054: PPUSH
13055: PPUSH
13056: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
13057: LD_ADDR_VAR 0 2
13061: PUSH
13062: LD_EXP 21
13066: PUSH
13067: LD_EXP 22
13071: PUSH
13072: LD_EXP 30
13076: PUSH
13077: LD_EXP 28
13081: PUSH
13082: LD_EXP 26
13086: PUSH
13087: LD_EXP 27
13091: PUSH
13092: LD_EXP 32
13096: PUSH
13097: LD_EXP 25
13101: PUSH
13102: LD_EXP 23
13106: PUSH
13107: LD_EXP 24
13111: PUSH
13112: LD_EXP 33
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
13130: LD_ADDR_VAR 0 3
13134: PUSH
13135: LD_STRING H
13137: PUSH
13138: LD_STRING G
13140: PUSH
13141: LD_STRING O
13143: PUSH
13144: LD_STRING Mar
13146: PUSH
13147: LD_STRING K
13149: PUSH
13150: LD_STRING S
13152: PUSH
13153: LD_STRING Ks
13155: PUSH
13156: LD_STRING Kam
13158: PUSH
13159: LD_STRING M
13161: PUSH
13162: LD_STRING I
13164: PUSH
13165: LD_STRING A
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13181: LD_INT 35
13183: PPUSH
13184: CALL_OW 67
// for i := tmp downto 1 do
13188: LD_ADDR_VAR 0 1
13192: PUSH
13193: DOUBLE
13194: LD_VAR 0 2
13198: INC
13199: ST_TO_ADDR
13200: LD_INT 1
13202: PUSH
13203: FOR_DOWNTO
13204: IFFALSE 13350
// if GetLives ( tmp [ i ] ) < 250 then
13206: LD_VAR 0 2
13210: PUSH
13211: LD_VAR 0 1
13215: ARRAY
13216: PPUSH
13217: CALL_OW 256
13221: PUSH
13222: LD_INT 250
13224: LESS
13225: IFFALSE 13348
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
13227: LD_ADDR_EXP 19
13231: PUSH
13232: LD_EXP 19
13236: PUSH
13237: LD_INT 1
13239: PLUS
13240: ST_TO_ADDR
// DialogueOn ;
13241: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
13245: LD_VAR 0 2
13249: PUSH
13250: LD_VAR 0 1
13254: ARRAY
13255: PPUSH
13256: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
13260: LD_VAR 0 2
13264: PUSH
13265: LD_VAR 0 1
13269: ARRAY
13270: PPUSH
13271: LD_STRING D
13273: PUSH
13274: LD_VAR 0 3
13278: PUSH
13279: LD_VAR 0 1
13283: ARRAY
13284: STR
13285: PUSH
13286: LD_STRING -Stim-a-1
13288: STR
13289: PPUSH
13290: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
13294: LD_ADDR_VAR 0 2
13298: PUSH
13299: LD_VAR 0 2
13303: PPUSH
13304: LD_VAR 0 1
13308: PPUSH
13309: CALL_OW 3
13313: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
13314: LD_ADDR_VAR 0 3
13318: PUSH
13319: LD_VAR 0 3
13323: PPUSH
13324: LD_VAR 0 1
13328: PPUSH
13329: CALL_OW 3
13333: ST_TO_ADDR
// drugsTested := true ;
13334: LD_ADDR_EXP 6
13338: PUSH
13339: LD_INT 1
13341: ST_TO_ADDR
// DialogueOff ;
13342: CALL_OW 7
// break ;
13346: GO 13350
// end ;
13348: GO 13203
13350: POP
13351: POP
// until not tmp ;
13352: LD_VAR 0 2
13356: NOT
13357: IFFALSE 13181
// end ;
13359: PPOPN 3
13361: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
13362: LD_INT 22
13364: PUSH
13365: LD_INT 2
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PUSH
13372: LD_INT 34
13374: PUSH
13375: LD_INT 31
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PPUSH
13386: CALL_OW 69
13390: PUSH
13391: LD_INT 22
13393: PUSH
13394: LD_INT 2
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: PUSH
13401: LD_INT 33
13403: PUSH
13404: LD_INT 2
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PPUSH
13415: CALL_OW 69
13419: AND
13420: IFFALSE 13433
13422: GO 13424
13424: DISABLE
// remoteControlConstructed := true ;
13425: LD_ADDR_EXP 12
13429: PUSH
13430: LD_INT 1
13432: ST_TO_ADDR
13433: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
13434: LD_EXP 12
13438: IFFALSE 13738
13440: GO 13442
13442: DISABLE
13443: LD_INT 0
13445: PPUSH
13446: PPUSH
13447: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
13448: LD_ADDR_VAR 0 2
13452: PUSH
13453: LD_EXP 21
13457: PUSH
13458: LD_EXP 22
13462: PUSH
13463: LD_EXP 30
13467: PUSH
13468: LD_EXP 28
13472: PUSH
13473: LD_EXP 26
13477: PUSH
13478: LD_EXP 27
13482: PUSH
13483: LD_EXP 32
13487: PUSH
13488: LD_EXP 25
13492: PUSH
13493: LD_EXP 23
13497: PUSH
13498: LD_EXP 24
13502: PUSH
13503: LD_EXP 33
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
13521: LD_ADDR_VAR 0 3
13525: PUSH
13526: LD_STRING H
13528: PUSH
13529: LD_STRING G
13531: PUSH
13532: LD_STRING O
13534: PUSH
13535: LD_STRING Mar
13537: PUSH
13538: LD_STRING K
13540: PUSH
13541: LD_STRING S
13543: PUSH
13544: LD_STRING Ks
13546: PUSH
13547: LD_STRING Kam
13549: PUSH
13550: LD_STRING M
13552: PUSH
13553: LD_STRING I
13555: PUSH
13556: LD_STRING A
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13572: LD_INT 35
13574: PPUSH
13575: CALL_OW 67
// for i := tmp downto 1 do
13579: LD_ADDR_VAR 0 1
13583: PUSH
13584: DOUBLE
13585: LD_VAR 0 2
13589: INC
13590: ST_TO_ADDR
13591: LD_INT 1
13593: PUSH
13594: FOR_DOWNTO
13595: IFFALSE 13729
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
13597: LD_VAR 0 2
13601: PUSH
13602: LD_VAR 0 1
13606: ARRAY
13607: PPUSH
13608: CALL_OW 257
13612: PUSH
13613: LD_INT 3
13615: EQUAL
13616: PUSH
13617: LD_VAR 0 2
13621: PUSH
13622: LD_VAR 0 1
13626: ARRAY
13627: PPUSH
13628: CALL_OW 432
13632: AND
13633: IFFALSE 13727
// begin DialogueOn ;
13635: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
13639: LD_VAR 0 2
13643: PUSH
13644: LD_VAR 0 1
13648: ARRAY
13649: PPUSH
13650: LD_STRING D
13652: PUSH
13653: LD_VAR 0 3
13657: PUSH
13658: LD_VAR 0 1
13662: ARRAY
13663: STR
13664: PUSH
13665: LD_STRING -RC-a-1
13667: STR
13668: PPUSH
13669: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
13673: LD_ADDR_VAR 0 2
13677: PUSH
13678: LD_VAR 0 2
13682: PPUSH
13683: LD_VAR 0 1
13687: PPUSH
13688: CALL_OW 3
13692: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
13693: LD_ADDR_VAR 0 3
13697: PUSH
13698: LD_VAR 0 3
13702: PPUSH
13703: LD_VAR 0 1
13707: PPUSH
13708: CALL_OW 3
13712: ST_TO_ADDR
// DialogueOff ;
13713: CALL_OW 7
// remoteControlTested := true ;
13717: LD_ADDR_EXP 7
13721: PUSH
13722: LD_INT 1
13724: ST_TO_ADDR
// break ;
13725: GO 13729
// end ;
13727: GO 13594
13729: POP
13730: POP
// until not tmp ;
13731: LD_VAR 0 2
13735: NOT
13736: IFFALSE 13572
// end ;
13738: PPOPN 3
13740: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
13741: LD_EXP 7
13745: PUSH
13746: LD_EXP 28
13750: PPUSH
13751: CALL_OW 302
13755: AND
13756: IFFALSE 13785
13758: GO 13760
13760: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
13761: LD_EXP 28
13765: PPUSH
13766: LD_STRING DMar-RC-a-2
13768: PPUSH
13769: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
13773: LD_EXP 28
13777: PPUSH
13778: LD_STRING DMar-RC-a-3
13780: PPUSH
13781: CALL_OW 88
// end ;
13785: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
13786: LD_EXP 14
13790: PUSH
13791: LD_EXP 21
13795: PPUSH
13796: LD_EXP 33
13800: PPUSH
13801: CALL_OW 296
13805: PUSH
13806: LD_INT 8
13808: LESS
13809: AND
13810: PUSH
13811: LD_INT 2
13813: PPUSH
13814: CALL_OW 463
13818: NOT
13819: AND
13820: PUSH
13821: LD_EXP 33
13825: PPUSH
13826: CALL_OW 302
13830: AND
13831: PUSH
13832: LD_EXP 21
13836: PPUSH
13837: CALL_OW 302
13841: AND
13842: IFFALSE 14020
13844: GO 13846
13846: DISABLE
// begin if not IsInUnit ( Aviradze ) then
13847: LD_EXP 33
13851: PPUSH
13852: CALL_OW 310
13856: NOT
13857: IFFALSE 13873
// ComTurnUnit ( Aviradze , Heike ) ;
13859: LD_EXP 33
13863: PPUSH
13864: LD_EXP 21
13868: PPUSH
13869: CALL_OW 119
// if not IsInUnit ( Heike ) then
13873: LD_EXP 21
13877: PPUSH
13878: CALL_OW 310
13882: NOT
13883: IFFALSE 13899
// ComTurnUnit ( Heike , Aviradze ) ;
13885: LD_EXP 21
13889: PPUSH
13890: LD_EXP 33
13894: PPUSH
13895: CALL_OW 119
// wait ( 0 0$1 ) ;
13899: LD_INT 35
13901: PPUSH
13902: CALL_OW 67
// DialogueOn ;
13906: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
13910: LD_EXP 33
13914: PPUSH
13915: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
13919: LD_EXP 21
13923: PPUSH
13924: LD_STRING DH-Beria-1
13926: PPUSH
13927: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
13931: LD_EXP 33
13935: PPUSH
13936: LD_STRING DA-Beria-2
13938: PPUSH
13939: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
13943: LD_EXP 21
13947: PPUSH
13948: LD_STRING DH-Beria-3
13950: PPUSH
13951: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
13955: LD_EXP 33
13959: PPUSH
13960: LD_STRING DA-Beria-4
13962: PPUSH
13963: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
13967: LD_EXP 33
13971: PPUSH
13972: LD_STRING DA-Beria-5
13974: PPUSH
13975: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
13979: LD_EXP 33
13983: PPUSH
13984: LD_STRING DA-Beria-6
13986: PPUSH
13987: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
13991: LD_EXP 21
13995: PPUSH
13996: LD_STRING DA-Beria-7
13998: PPUSH
13999: CALL_OW 88
// DialogueOff ;
14003: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
14007: LD_INT 52
14009: PPUSH
14010: LD_INT 2
14012: PPUSH
14013: LD_INT 1
14015: PPUSH
14016: CALL_OW 322
// end ;
14020: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
14021: LD_EXP 26
14025: PPUSH
14026: CALL_OW 256
14030: PUSH
14031: LD_INT 10
14033: LESS
14034: IFFALSE 14071
14036: GO 14038
14038: DISABLE
// begin DialogueOn ;
14039: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
14043: LD_EXP 26
14047: PPUSH
14048: LD_STRING DK-Kdeath-1
14050: PPUSH
14051: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
14055: LD_EXP 21
14059: PPUSH
14060: LD_STRING DH-Kdeath-2
14062: PPUSH
14063: CALL_OW 88
// DialogueOff ;
14067: CALL_OW 7
// end ;
14071: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
14072: LD_INT 2
14074: PPUSH
14075: LD_EXP 39
14079: PPUSH
14080: CALL 3027 0 2
14084: IFFALSE 14101
14086: GO 14088
14088: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
14089: LD_EXP 21
14093: PPUSH
14094: LD_STRING DH-Obj-1
14096: PPUSH
14097: CALL_OW 88
14101: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
14102: LD_INT 2
14104: PPUSH
14105: LD_EXP 40
14109: PPUSH
14110: CALL 3027 0 2
14114: IFFALSE 14131
14116: GO 14118
14118: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
14119: LD_EXP 21
14123: PPUSH
14124: LD_STRING DH-Obj-a-1
14126: PPUSH
14127: CALL_OW 88
14131: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 7 7$00 , 6 6$30 , 6 6$00 ] [ Difficulty ] do
14132: LD_EXP 10
14136: PUSH
14137: LD_OWVAR 1
14141: PUSH
14142: LD_INT 14700
14144: PUSH
14145: LD_INT 13650
14147: PUSH
14148: LD_INT 12600
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: LIST
14155: PUSH
14156: LD_OWVAR 67
14160: ARRAY
14161: GREATEREQUAL
14162: OR
14163: IFFALSE 14191
14165: GO 14167
14167: DISABLE
// begin wait ( rand ( 2 2$00 , 2 2$30 ) ) ;
14168: LD_INT 4200
14170: PPUSH
14171: LD_INT 5250
14173: PPUSH
14174: CALL_OW 12
14178: PPUSH
14179: CALL_OW 67
// convoyStarted := true ;
14183: LD_ADDR_EXP 17
14187: PUSH
14188: LD_INT 1
14190: ST_TO_ADDR
// end ;
14191: END
// every 0 0$1 trigger convoyStarted do
14192: LD_EXP 17
14196: IFFALSE 14280
14198: GO 14200
14200: DISABLE
// begin DialogueOn ;
14201: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
14205: LD_EXP 29
14209: PPUSH
14210: LD_STRING DShar-Convoy-1
14212: PPUSH
14213: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
14217: LD_EXP 21
14221: PPUSH
14222: LD_STRING DH-Convoy-2
14224: PPUSH
14225: CALL_OW 88
// DialogueOff ;
14229: CALL_OW 7
// PrepareConvoy ;
14233: CALL 6397 0 0
// repeat wait ( rand ( 3 3$30 , 5 5$30 ) ) ;
14237: LD_INT 7350
14239: PPUSH
14240: LD_INT 11550
14242: PPUSH
14243: CALL_OW 12
14247: PPUSH
14248: CALL_OW 67
// PrepareConvoy ;
14252: CALL 6397 0 0
// convoyCounter := convoyCounter - 1 ;
14256: LD_ADDR_EXP 16
14260: PUSH
14261: LD_EXP 16
14265: PUSH
14266: LD_INT 1
14268: MINUS
14269: ST_TO_ADDR
// until convoyCounter <= 0 ;
14270: LD_EXP 16
14274: PUSH
14275: LD_INT 0
14277: LESSEQUAL
14278: IFFALSE 14237
// end ;
14280: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
14281: LD_EXP 15
14285: PUSH
14286: LD_INT 10
14288: GREATEREQUAL
14289: IFFALSE 14306
14291: GO 14293
14293: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
14294: LD_EXP 31
14298: PPUSH
14299: LD_STRING DOm-Fail-1
14301: PPUSH
14302: CALL_OW 94
14306: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
14307: LD_EXP 39
14311: NOT
14312: PUSH
14313: LD_EXP 40
14317: NOT
14318: AND
14319: IFFALSE 14331
14321: GO 14323
14323: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
14324: LD_STRING RaiderDone
14326: PPUSH
14327: CALL_OW 337
14331: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
14332: LD_INT 22
14334: PUSH
14335: LD_INT 2
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PUSH
14342: LD_INT 33
14344: PUSH
14345: LD_INT 2
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: PPUSH
14356: CALL_OW 69
14360: PUSH
14361: LD_INT 3
14363: GREATEREQUAL
14364: PUSH
14365: LD_INT 22
14367: PUSH
14368: LD_INT 2
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: PUSH
14375: LD_INT 34
14377: PUSH
14378: LD_INT 31
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: PPUSH
14389: CALL_OW 69
14393: PUSH
14394: LD_INT 2
14396: GREATEREQUAL
14397: AND
14398: IFFALSE 14410
14400: GO 14402
14402: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
14403: LD_STRING RemoteControlDone
14405: PPUSH
14406: CALL_OW 337
14410: END
// every 0 0$1 trigger convoyCounter = 0 and not ruConvoySquad do var tmp ;
14411: LD_EXP 16
14415: PUSH
14416: LD_INT 0
14418: EQUAL
14419: PUSH
14420: LD_EXP 41
14424: NOT
14425: AND
14426: IFFALSE 15214
14428: GO 14430
14430: DISABLE
14431: LD_INT 0
14433: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
14434: LD_STRING ReinforcementsDone
14436: PPUSH
14437: CALL_OW 337
// music_class := music_victory ;
14441: LD_ADDR_OWVAR 72
14445: PUSH
14446: LD_INT 4
14448: ST_TO_ADDR
// InGameOn ;
14449: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
14453: LD_EXP 21
14457: PPUSH
14458: LD_STRING DH-end-1
14460: PPUSH
14461: CALL_OW 88
// wait ( 0 0$2 ) ;
14465: LD_INT 70
14467: PPUSH
14468: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
14472: LD_EXP 29
14476: PPUSH
14477: LD_STRING DShar-end-2
14479: PPUSH
14480: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
14484: LD_EXP 39
14488: NOT
14489: PUSH
14490: LD_EXP 40
14494: NOT
14495: AND
14496: IFFALSE 14512
// begin Say ( Heike , DH-end-3 ) ;
14498: LD_EXP 21
14502: PPUSH
14503: LD_STRING DH-end-3
14505: PPUSH
14506: CALL_OW 88
// end else
14510: GO 14609
// begin Say ( Heike , DH-end-a-3 ) ;
14512: LD_EXP 21
14516: PPUSH
14517: LD_STRING DH-end-a-3
14519: PPUSH
14520: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
14524: LD_EXP 29
14528: PPUSH
14529: LD_STRING DShar-end-a-4
14531: PPUSH
14532: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
14536: LD_EXP 21
14540: PPUSH
14541: LD_STRING DH-end-a-5
14543: PPUSH
14544: CALL_OW 88
// InGameOff ;
14548: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
14552: LD_INT 35
14554: PPUSH
14555: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
14559: LD_INT 22
14561: PUSH
14562: LD_INT 3
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: PUSH
14569: LD_INT 21
14571: PUSH
14572: LD_INT 1
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: PPUSH
14583: CALL_OW 69
14587: PUSH
14588: LD_INT 0
14590: EQUAL
14591: IFFALSE 14552
// InGameOn ;
14593: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
14597: LD_EXP 21
14601: PPUSH
14602: LD_STRING DH-end-a-6
14604: PPUSH
14605: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
14609: LD_EXP 29
14613: PPUSH
14614: LD_STRING DShar-end-3
14616: PPUSH
14617: CALL_OW 94
// if not flamethrowerBuilt then
14621: LD_EXP 20
14625: NOT
14626: IFFALSE 14635
// SetAchievement ( ACH_FIRE ) ;
14628: LD_STRING ACH_FIRE
14630: PPUSH
14631: CALL_OW 543
// if drugsTested then
14635: LD_EXP 6
14639: IFFALSE 14653
// AddMedal ( med1 , 1 ) else
14641: LD_STRING med1
14643: PPUSH
14644: LD_INT 1
14646: PPUSH
14647: CALL_OW 101
14651: GO 14664
// AddMedal ( med1 , - 1 ) ;
14653: LD_STRING med1
14655: PPUSH
14656: LD_INT 1
14658: NEG
14659: PPUSH
14660: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 then
14664: LD_INT 22
14666: PUSH
14667: LD_INT 2
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: PUSH
14674: LD_INT 33
14676: PUSH
14677: LD_INT 2
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: PPUSH
14688: CALL_OW 69
14692: PUSH
14693: LD_INT 3
14695: GREATEREQUAL
14696: PUSH
14697: LD_INT 22
14699: PUSH
14700: LD_INT 2
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: PUSH
14707: LD_INT 34
14709: PUSH
14710: LD_INT 31
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: PPUSH
14721: CALL_OW 69
14725: PUSH
14726: LD_INT 2
14728: GREATEREQUAL
14729: AND
14730: IFFALSE 14744
// AddMedal ( med2 , 1 ) else
14732: LD_STRING med2
14734: PPUSH
14735: LD_INT 1
14737: PPUSH
14738: CALL_OW 101
14742: GO 14755
// AddMedal ( med2 , - 1 ) ;
14744: LD_STRING med2
14746: PPUSH
14747: LD_INT 1
14749: NEG
14750: PPUSH
14751: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 ] [ Difficulty ] then
14755: LD_EXP 15
14759: PUSH
14760: LD_INT 10
14762: PUSH
14763: LD_INT 8
14765: PUSH
14766: LD_INT 6
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: LIST
14773: PUSH
14774: LD_OWVAR 67
14778: ARRAY
14779: LESS
14780: IFFALSE 14794
// AddMedal ( med3 , 1 ) else
14782: LD_STRING med3
14784: PPUSH
14785: LD_INT 1
14787: PPUSH
14788: CALL_OW 101
14792: GO 14805
// AddMedal ( med3 , - 1 ) ;
14794: LD_STRING med3
14796: PPUSH
14797: LD_INT 1
14799: NEG
14800: PPUSH
14801: CALL_OW 101
// GiveMedals ( MAIN ) ;
14805: LD_STRING MAIN
14807: PPUSH
14808: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
14812: LD_INT 22
14814: PUSH
14815: LD_INT 2
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: LD_INT 23
14824: PUSH
14825: LD_INT 2
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: LD_INT 21
14834: PUSH
14835: LD_INT 1
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: LIST
14846: PPUSH
14847: CALL_OW 69
14851: PPUSH
14852: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
14856: LD_EXP 15
14860: PPUSH
14861: LD_STRING 05_ConvoySavedCounter
14863: PPUSH
14864: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
14868: LD_EXP 13
14872: PPUSH
14873: LD_STRING 05_Radar
14875: PPUSH
14876: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
14880: LD_EXP 6
14884: PPUSH
14885: LD_STRING 05_DrugsTested
14887: PPUSH
14888: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
14892: LD_INT 22
14894: PUSH
14895: LD_INT 2
14897: PUSH
14898: EMPTY
14899: LIST
14900: LIST
14901: PUSH
14902: LD_INT 33
14904: PUSH
14905: LD_INT 2
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: PUSH
14912: EMPTY
14913: LIST
14914: LIST
14915: PPUSH
14916: CALL_OW 69
14920: PUSH
14921: LD_INT 3
14923: GREATEREQUAL
14924: PUSH
14925: LD_INT 22
14927: PUSH
14928: LD_INT 2
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: PUSH
14935: LD_INT 34
14937: PUSH
14938: LD_INT 31
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: PPUSH
14949: CALL_OW 69
14953: PUSH
14954: LD_INT 2
14956: GREATEREQUAL
14957: AND
14958: PPUSH
14959: LD_STRING 05_RemoteControl
14961: PPUSH
14962: CALL_OW 39
// SaveCharacters ( Heike , 05_Heike ) ;
14966: LD_EXP 21
14970: PPUSH
14971: LD_STRING 05_Heike
14973: PPUSH
14974: CALL_OW 38
// if Aviradze then
14978: LD_EXP 33
14982: IFFALSE 14996
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
14984: LD_EXP 33
14988: PPUSH
14989: LD_STRING 05_Aviradze
14991: PPUSH
14992: CALL_OW 38
// if Ibrahim then
14996: LD_EXP 24
15000: IFFALSE 15014
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
15002: LD_EXP 24
15006: PPUSH
15007: LD_STRING 05_Ibrahim
15009: PPUSH
15010: CALL_OW 38
// if Kamil then
15014: LD_EXP 25
15018: IFFALSE 15032
// SaveCharacters ( Kamil , 05_Kamil ) ;
15020: LD_EXP 25
15024: PPUSH
15025: LD_STRING 05_Kamil
15027: PPUSH
15028: CALL_OW 38
// if Sophia then
15032: LD_EXP 27
15036: IFFALSE 15050
// SaveCharacters ( Sophia , 05_Sophia ) ;
15038: LD_EXP 27
15042: PPUSH
15043: LD_STRING 05_Sophia
15045: PPUSH
15046: CALL_OW 38
// if Kaia then
15050: LD_EXP 26
15054: IFFALSE 15068
// SaveCharacters ( Kaia , 05_Kaia ) ;
15056: LD_EXP 26
15060: PPUSH
15061: LD_STRING 05_Kaia
15063: PPUSH
15064: CALL_OW 38
// if Givi then
15068: LD_EXP 22
15072: IFFALSE 15086
// SaveCharacters ( Givi , 05_Givi ) ;
15074: LD_EXP 22
15078: PPUSH
15079: LD_STRING 05_Givi
15081: PPUSH
15082: CALL_OW 38
// if Mike then
15086: LD_EXP 23
15090: IFFALSE 15104
// SaveCharacters ( Mike , 05_Mike ) ;
15092: LD_EXP 23
15096: PPUSH
15097: LD_STRING 05_Mike
15099: PPUSH
15100: CALL_OW 38
// if Markov then
15104: LD_EXP 28
15108: IFFALSE 15122
// SaveCharacters ( Markov , 05_Markov ) ;
15110: LD_EXP 28
15114: PPUSH
15115: LD_STRING 05_Markov
15117: PPUSH
15118: CALL_OW 38
// if Kurt then
15122: LD_EXP 32
15126: IFFALSE 15140
// SaveCharacters ( Kurt , 05_Kurt ) ;
15128: LD_EXP 32
15132: PPUSH
15133: LD_STRING 05_Kurt
15135: PPUSH
15136: CALL_OW 38
// if heikeSecondSquad then
15140: LD_EXP 34
15144: IFFALSE 15158
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
15146: LD_EXP 34
15150: PPUSH
15151: LD_STRING 05_others
15153: PPUSH
15154: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
15158: LD_ADDR_VAR 0 1
15162: PUSH
15163: LD_INT 22
15165: PUSH
15166: LD_INT 2
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: PUSH
15173: LD_INT 23
15175: PUSH
15176: LD_INT 0
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PPUSH
15187: CALL_OW 69
15191: ST_TO_ADDR
// if tmp then
15192: LD_VAR 0 1
15196: IFFALSE 15210
// SaveCharacters ( tmp , 05_apes ) ;
15198: LD_VAR 0 1
15202: PPUSH
15203: LD_STRING 05_apes
15205: PPUSH
15206: CALL_OW 38
// YouWin ;
15210: CALL_OW 103
// end ; end_of_file
15214: PPOPN 1
15216: END
// every 0 0$40 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
15217: LD_EXP 9
15221: PUSH
15222: LD_INT 13
15224: PPUSH
15225: LD_INT 1
15227: PPUSH
15228: CALL_OW 287
15232: PUSH
15233: LD_INT 25
15235: LESS
15236: AND
15237: IFFALSE 15264
15239: GO 15241
15241: DISABLE
// begin enable ;
15242: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
15243: LD_INT 1
15245: PPUSH
15246: LD_INT 5
15248: PPUSH
15249: CALL_OW 12
15253: PPUSH
15254: LD_INT 13
15256: PPUSH
15257: LD_INT 1
15259: PPUSH
15260: CALL_OW 55
// end ; end_of_file
15264: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
15265: GO 15267
15267: DISABLE
// begin ru_radar := 98 ;
15268: LD_ADDR_EXP 44
15272: PUSH
15273: LD_INT 98
15275: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
15276: LD_ADDR_EXP 45
15280: PUSH
15281: LD_INT 89
15283: ST_TO_ADDR
// us_hack := 99 ;
15284: LD_ADDR_EXP 46
15288: PUSH
15289: LD_INT 99
15291: ST_TO_ADDR
// us_artillery := 97 ;
15292: LD_ADDR_EXP 47
15296: PUSH
15297: LD_INT 97
15299: ST_TO_ADDR
// ar_bio_bomb := 91 ;
15300: LD_ADDR_EXP 48
15304: PUSH
15305: LD_INT 91
15307: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
15308: LD_ADDR_EXP 49
15312: PUSH
15313: LD_INT 92
15315: ST_TO_ADDR
// tech_Artillery := 80 ;
15316: LD_ADDR_EXP 50
15320: PUSH
15321: LD_INT 80
15323: ST_TO_ADDR
// tech_RadMat := 81 ;
15324: LD_ADDR_EXP 51
15328: PUSH
15329: LD_INT 81
15331: ST_TO_ADDR
// tech_BasicTools := 82 ;
15332: LD_ADDR_EXP 52
15336: PUSH
15337: LD_INT 82
15339: ST_TO_ADDR
// tech_Cargo := 83 ;
15340: LD_ADDR_EXP 53
15344: PUSH
15345: LD_INT 83
15347: ST_TO_ADDR
// tech_Track := 84 ;
15348: LD_ADDR_EXP 54
15352: PUSH
15353: LD_INT 84
15355: ST_TO_ADDR
// tech_Crane := 85 ;
15356: LD_ADDR_EXP 55
15360: PUSH
15361: LD_INT 85
15363: ST_TO_ADDR
// tech_Bulldozer := 86 ;
15364: LD_ADDR_EXP 56
15368: PUSH
15369: LD_INT 86
15371: ST_TO_ADDR
// tech_Hovercraft := 87 ;
15372: LD_ADDR_EXP 57
15376: PUSH
15377: LD_INT 87
15379: ST_TO_ADDR
// end ;
15380: END
