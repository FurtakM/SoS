// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 744 0 2
// PrepareArabian ;
  31: CALL 1361 0 0
// PrepareRussian ;
  35: CALL 2967 0 0
// Action ;
  39: CALL 8103 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: LD_INT 7
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_STRING 04_1_RuLabCaptured
 221: PPUSH
 222: LD_INT 0
 224: PPUSH
 225: CALL_OW 30
 229: ST_TO_ADDR
// captureCounter := 0 ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// flamethrowerBuilt := false ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 254: LD_ADDR_OWVAR 79
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// end ;
 262: LD_VAR 0 1
 266: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 267: LD_EXP 10
 271: NOT
 272: PUSH
 273: LD_EXP 9
 277: NOT
 278: AND
 279: PUSH
 280: LD_EXP 39
 284: NOT
 285: AND
 286: PUSH
 287: LD_EXP 40
 291: NOT
 292: AND
 293: IFFALSE 305
 295: GO 297
 297: DISABLE
// SetAchievement ( ACH_EXT ) ;
 298: LD_STRING ACH_EXT
 300: PPUSH
 301: CALL_OW 543
 305: END
// every 0 0$1 trigger captureCounter >= 6 do
 306: LD_EXP 18
 310: PUSH
 311: LD_INT 6
 313: GREATEREQUAL
 314: IFFALSE 326
 316: GO 318
 318: DISABLE
// SetAchievement ( ACH_KEY ) ;
 319: LD_STRING ACH_KEY
 321: PPUSH
 322: CALL_OW 543
 326: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 327: LD_EXP 19
 331: PUSH
 332: LD_INT 3
 334: GREATEREQUAL
 335: IFFALSE 347
 337: GO 339
 339: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 340: LD_STRING ACH_CHEM
 342: PPUSH
 343: CALL_OW 543
 347: END
// every 0 0$1 trigger debug do var i ;
 348: LD_EXP 1
 352: IFFALSE 436
 354: GO 356
 356: DISABLE
 357: LD_INT 0
 359: PPUSH
// begin enable ;
 360: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 361: LD_ADDR_VAR 0 1
 365: PUSH
 366: LD_INT 22
 368: PUSH
 369: LD_INT 2
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 3
 378: PUSH
 379: LD_INT 21
 381: PUSH
 382: LD_INT 3
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 434
// if GetLives ( i ) < 1000 then
 405: LD_VAR 0 1
 409: PPUSH
 410: CALL_OW 256
 414: PUSH
 415: LD_INT 1000
 417: LESS
 418: IFFALSE 432
// SetLives ( i , 1000 ) ;
 420: LD_VAR 0 1
 424: PPUSH
 425: LD_INT 1000
 427: PPUSH
 428: CALL_OW 234
 432: GO 402
 434: POP
 435: POP
// end ; end_of_file
 436: PPOPN 1
 438: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 439: LD_INT 0
 441: PPUSH
// uc_side := side ;
 442: LD_ADDR_OWVAR 20
 446: PUSH
 447: LD_VAR 0 1
 451: ST_TO_ADDR
// uc_nation := nation ;
 452: LD_ADDR_OWVAR 21
 456: PUSH
 457: LD_VAR 0 2
 461: ST_TO_ADDR
// vc_chassis := chassis ;
 462: LD_ADDR_OWVAR 37
 466: PUSH
 467: LD_VAR 0 3
 471: ST_TO_ADDR
// vc_engine := engine ;
 472: LD_ADDR_OWVAR 39
 476: PUSH
 477: LD_VAR 0 4
 481: ST_TO_ADDR
// vc_control := control ;
 482: LD_ADDR_OWVAR 38
 486: PUSH
 487: LD_VAR 0 5
 491: ST_TO_ADDR
// vc_weapon := weapon ;
 492: LD_ADDR_OWVAR 40
 496: PUSH
 497: LD_VAR 0 6
 501: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 502: LD_ADDR_OWVAR 41
 506: PUSH
 507: LD_VAR 0 7
 511: ST_TO_ADDR
// result := CreateVehicle ;
 512: LD_ADDR_VAR 0 8
 516: PUSH
 517: CALL_OW 45
 521: ST_TO_ADDR
// end ;
 522: LD_VAR 0 8
 526: RET
// export function SayX ( units , ident ) ; var i ; begin
 527: LD_INT 0
 529: PPUSH
 530: PPUSH
// result := false ;
 531: LD_ADDR_VAR 0 3
 535: PUSH
 536: LD_INT 0
 538: ST_TO_ADDR
// if not units then
 539: LD_VAR 0 1
 543: NOT
 544: IFFALSE 548
// exit ;
 546: GO 602
// for i in units do
 548: LD_ADDR_VAR 0 4
 552: PUSH
 553: LD_VAR 0 1
 557: PUSH
 558: FOR_IN
 559: IFFALSE 600
// if IsOk ( i ) then
 561: LD_VAR 0 4
 565: PPUSH
 566: CALL_OW 302
 570: IFFALSE 598
// begin Say ( i , ident ) ;
 572: LD_VAR 0 4
 576: PPUSH
 577: LD_VAR 0 2
 581: PPUSH
 582: CALL_OW 88
// result := i ;
 586: LD_ADDR_VAR 0 3
 590: PUSH
 591: LD_VAR 0 4
 595: ST_TO_ADDR
// break ;
 596: GO 600
// end ;
 598: GO 558
 600: POP
 601: POP
// end ;
 602: LD_VAR 0 3
 606: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 607: LD_INT 0
 609: PPUSH
 610: PPUSH
// InitUc ;
 611: CALL_OW 18
// InitHc ;
 615: CALL_OW 19
// uc_side := 0 ;
 619: LD_ADDR_OWVAR 20
 623: PUSH
 624: LD_INT 0
 626: ST_TO_ADDR
// uc_nation := 0 ;
 627: LD_ADDR_OWVAR 21
 631: PUSH
 632: LD_INT 0
 634: ST_TO_ADDR
// for i = 1 to amount do
 635: LD_ADDR_VAR 0 4
 639: PUSH
 640: DOUBLE
 641: LD_INT 1
 643: DEC
 644: ST_TO_ADDR
 645: LD_VAR 0 2
 649: PUSH
 650: FOR_TO
 651: IFFALSE 733
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 653: LD_ADDR_OWVAR 29
 657: PUSH
 658: LD_INT 9
 660: PPUSH
 661: LD_INT 12
 663: PPUSH
 664: CALL_OW 12
 668: PUSH
 669: LD_INT 9
 671: PPUSH
 672: LD_INT 12
 674: PPUSH
 675: CALL_OW 12
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 684: LD_ADDR_OWVAR 35
 688: PUSH
 689: LD_INT 1
 691: NEG
 692: PPUSH
 693: LD_INT 1
 695: PPUSH
 696: CALL_OW 12
 700: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 701: LD_INT 0
 703: PPUSH
 704: LD_INT 12
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 714: CALL_OW 44
 718: PPUSH
 719: LD_VAR 0 1
 723: PPUSH
 724: LD_INT 0
 726: PPUSH
 727: CALL_OW 49
// end ;
 731: GO 650
 733: POP
 734: POP
// InitHc ;
 735: CALL_OW 19
// end ;
 739: LD_VAR 0 3
 743: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 744: LD_INT 0
 746: PPUSH
 747: PPUSH
// uc_side := 0 ;
 748: LD_ADDR_OWVAR 20
 752: PUSH
 753: LD_INT 0
 755: ST_TO_ADDR
// uc_nation := 0 ;
 756: LD_ADDR_OWVAR 21
 760: PUSH
 761: LD_INT 0
 763: ST_TO_ADDR
// for i := 1 to 3 do
 764: LD_ADDR_VAR 0 4
 768: PUSH
 769: DOUBLE
 770: LD_INT 1
 772: DEC
 773: ST_TO_ADDR
 774: LD_INT 3
 776: PUSH
 777: FOR_TO
 778: IFFALSE 815
// begin hc_class := 21 ;
 780: LD_ADDR_OWVAR 28
 784: PUSH
 785: LD_INT 21
 787: ST_TO_ADDR
// hc_gallery :=  ;
 788: LD_ADDR_OWVAR 33
 792: PUSH
 793: LD_STRING 
 795: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 796: CALL_OW 44
 800: PPUSH
 801: LD_VAR 0 1
 805: PPUSH
 806: LD_INT 0
 808: PPUSH
 809: CALL_OW 49
// end ;
 813: GO 777
 815: POP
 816: POP
// for i := 1 to 3 do
 817: LD_ADDR_VAR 0 4
 821: PUSH
 822: DOUBLE
 823: LD_INT 1
 825: DEC
 826: ST_TO_ADDR
 827: LD_INT 3
 829: PUSH
 830: FOR_TO
 831: IFFALSE 868
// begin hc_class := 18 ;
 833: LD_ADDR_OWVAR 28
 837: PUSH
 838: LD_INT 18
 840: ST_TO_ADDR
// hc_gallery :=  ;
 841: LD_ADDR_OWVAR 33
 845: PUSH
 846: LD_STRING 
 848: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 849: CALL_OW 44
 853: PPUSH
 854: LD_VAR 0 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// end ;
 866: GO 830
 868: POP
 869: POP
// for i := 1 to 3 do
 870: LD_ADDR_VAR 0 4
 874: PUSH
 875: DOUBLE
 876: LD_INT 1
 878: DEC
 879: ST_TO_ADDR
 880: LD_INT 3
 882: PUSH
 883: FOR_TO
 884: IFFALSE 921
// begin hc_class := 13 ;
 886: LD_ADDR_OWVAR 28
 890: PUSH
 891: LD_INT 13
 893: ST_TO_ADDR
// hc_gallery :=  ;
 894: LD_ADDR_OWVAR 33
 898: PUSH
 899: LD_STRING 
 901: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 902: CALL_OW 44
 906: PPUSH
 907: LD_VAR 0 1
 911: PPUSH
 912: LD_INT 0
 914: PPUSH
 915: CALL_OW 49
// end ;
 919: GO 883
 921: POP
 922: POP
// for i := 1 to 4 do
 923: LD_ADDR_VAR 0 4
 927: PUSH
 928: DOUBLE
 929: LD_INT 1
 931: DEC
 932: ST_TO_ADDR
 933: LD_INT 4
 935: PUSH
 936: FOR_TO
 937: IFFALSE 974
// begin hc_class := class_frog ;
 939: LD_ADDR_OWVAR 28
 943: PUSH
 944: LD_INT 19
 946: ST_TO_ADDR
// hc_gallery :=  ;
 947: LD_ADDR_OWVAR 33
 951: PUSH
 952: LD_STRING 
 954: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 955: CALL_OW 44
 959: PPUSH
 960: LD_VAR 0 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ;
 972: GO 936
 974: POP
 975: POP
// end ;
 976: LD_VAR 0 3
 980: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 981: LD_INT 0
 983: PPUSH
 984: PPUSH
 985: PPUSH
// if not observer or not unit then
 986: LD_VAR 0 1
 990: NOT
 991: PUSH
 992: LD_VAR 0 2
 996: NOT
 997: OR
 998: IFFALSE 1002
// exit ;
1000: GO 1050
// if not See ( GetSide ( observer ) , unit ) then
1002: LD_VAR 0 1
1006: PPUSH
1007: CALL_OW 255
1011: PPUSH
1012: LD_VAR 0 2
1016: PPUSH
1017: CALL_OW 292
1021: NOT
1022: IFFALSE 1026
// exit ;
1024: GO 1050
// result := GetDistUnits ( observer , unit ) < 12 ;
1026: LD_ADDR_VAR 0 3
1030: PUSH
1031: LD_VAR 0 1
1035: PPUSH
1036: LD_VAR 0 2
1040: PPUSH
1041: CALL_OW 296
1045: PUSH
1046: LD_INT 12
1048: LESS
1049: ST_TO_ADDR
// end ;
1050: LD_VAR 0 3
1054: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1055: LD_INT 0
1057: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1058: LD_VAR 0 2
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PPUSH
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 2
1074: ARRAY
1075: PPUSH
1076: CALL_OW 488
1080: PUSH
1081: LD_VAR 0 2
1085: PUSH
1086: LD_INT 1
1088: ARRAY
1089: PPUSH
1090: LD_VAR 0 2
1094: PUSH
1095: LD_INT 2
1097: ARRAY
1098: PPUSH
1099: CALL_OW 428
1103: PUSH
1104: LD_INT 0
1106: EQUAL
1107: AND
1108: IFFALSE 1142
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1110: LD_VAR 0 1
1114: PPUSH
1115: LD_VAR 0 2
1119: PUSH
1120: LD_INT 1
1122: ARRAY
1123: PPUSH
1124: LD_VAR 0 2
1128: PUSH
1129: LD_INT 2
1131: ARRAY
1132: PPUSH
1133: LD_VAR 0 3
1137: PPUSH
1138: CALL_OW 48
// end ;
1142: LD_VAR 0 4
1146: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1147: LD_INT 0
1149: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1150: LD_VAR 0 1
1154: PPUSH
1155: LD_VAR 0 2
1159: PPUSH
1160: LD_VAR 0 3
1164: PPUSH
1165: LD_VAR 0 4
1169: PPUSH
1170: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1174: LD_VAR 0 1
1178: PPUSH
1179: LD_VAR 0 2
1183: PPUSH
1184: LD_VAR 0 3
1188: PPUSH
1189: CALL_OW 331
// end ;
1193: LD_VAR 0 5
1197: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1198: LD_INT 0
1200: PPUSH
// if not units then
1201: LD_VAR 0 1
1205: NOT
1206: IFFALSE 1210
// exit ;
1208: GO 1293
// result := true ;
1210: LD_ADDR_VAR 0 4
1214: PUSH
1215: LD_INT 1
1217: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1218: LD_VAR 0 1
1222: PPUSH
1223: LD_INT 26
1225: PUSH
1226: LD_INT 1
1228: PUSH
1229: EMPTY
1230: LIST
1231: LIST
1232: PPUSH
1233: CALL_OW 72
1237: PUSH
1238: LD_INT 1
1240: ARRAY
1241: PPUSH
1242: LD_VAR 0 2
1246: PPUSH
1247: CALL_OW 88
1251: NOT
1252: IFFALSE 1293
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1254: LD_ADDR_VAR 0 4
1258: PUSH
1259: LD_VAR 0 1
1263: PPUSH
1264: LD_INT 26
1266: PUSH
1267: LD_INT 2
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: PPUSH
1274: CALL_OW 72
1278: PUSH
1279: LD_INT 1
1281: ARRAY
1282: PPUSH
1283: LD_VAR 0 3
1287: PPUSH
1288: CALL_OW 88
1292: ST_TO_ADDR
// end ;
1293: LD_VAR 0 4
1297: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1298: LD_INT 0
1300: PPUSH
1301: PPUSH
// if not group then
1302: LD_VAR 0 2
1306: NOT
1307: IFFALSE 1311
// exit ;
1309: GO 1356
// for i in group do
1311: LD_ADDR_VAR 0 4
1315: PUSH
1316: LD_VAR 0 2
1320: PUSH
1321: FOR_IN
1322: IFFALSE 1354
// if See ( side , i ) then
1324: LD_VAR 0 1
1328: PPUSH
1329: LD_VAR 0 4
1333: PPUSH
1334: CALL_OW 292
1338: IFFALSE 1352
// begin result := true ;
1340: LD_ADDR_VAR 0 3
1344: PUSH
1345: LD_INT 1
1347: ST_TO_ADDR
// exit ;
1348: POP
1349: POP
1350: GO 1356
// end ;
1352: GO 1321
1354: POP
1355: POP
// end ; end_of_file
1356: LD_VAR 0 3
1360: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1361: LD_INT 0
1363: PPUSH
1364: PPUSH
// uc_side := 2 ;
1365: LD_ADDR_OWVAR 20
1369: PUSH
1370: LD_INT 2
1372: ST_TO_ADDR
// uc_nation := 2 ;
1373: LD_ADDR_OWVAR 21
1377: PUSH
1378: LD_INT 2
1380: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1381: LD_ADDR_EXP 21
1385: PUSH
1386: LD_STRING Heike
1388: PPUSH
1389: LD_EXP 1
1393: NOT
1394: PPUSH
1395: LD_EXP 2
1399: PPUSH
1400: CALL 34277 0 3
1404: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1405: LD_ADDR_EXP 24
1409: PUSH
1410: LD_STRING Ibrahim
1412: PPUSH
1413: LD_EXP 1
1417: NOT
1418: PPUSH
1419: LD_EXP 2
1423: PPUSH
1424: CALL 34277 0 3
1428: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1429: LD_ADDR_EXP 22
1433: PUSH
1434: LD_STRING Givi
1436: PPUSH
1437: LD_EXP 1
1441: NOT
1442: PPUSH
1443: LD_EXP 2
1447: PPUSH
1448: CALL 34277 0 3
1452: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1453: LD_ADDR_EXP 25
1457: PUSH
1458: LD_STRING Kamil
1460: PPUSH
1461: LD_EXP 1
1465: NOT
1466: PPUSH
1467: LD_EXP 2
1471: PPUSH
1472: CALL 34277 0 3
1476: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1477: LD_ADDR_EXP 26
1481: PUSH
1482: LD_STRING Kaia
1484: PPUSH
1485: LD_EXP 1
1489: NOT
1490: PPUSH
1491: LD_EXP 2
1495: PPUSH
1496: CALL 34277 0 3
1500: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1501: LD_ADDR_EXP 27
1505: PUSH
1506: LD_STRING Sophia
1508: PPUSH
1509: LD_EXP 1
1513: NOT
1514: PPUSH
1515: LD_EXP 2
1519: PPUSH
1520: CALL 34277 0 3
1524: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1525: LD_ADDR_EXP 28
1529: PUSH
1530: LD_STRING Markov
1532: PPUSH
1533: LD_EXP 1
1537: NOT
1538: PPUSH
1539: LD_EXP 2
1543: PPUSH
1544: CALL 34277 0 3
1548: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1549: LD_ADDR_EXP 33
1553: PUSH
1554: LD_STRING Aviradze
1556: PPUSH
1557: LD_EXP 1
1561: NOT
1562: PPUSH
1563: LD_EXP 2
1567: PPUSH
1568: CALL 34277 0 3
1572: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1573: LD_ADDR_EXP 32
1577: PUSH
1578: LD_STRING Kurt
1580: PPUSH
1581: LD_EXP 1
1585: NOT
1586: PPUSH
1587: LD_EXP 2
1591: PPUSH
1592: CALL 34277 0 3
1596: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1597: LD_ADDR_EXP 23
1601: PUSH
1602: LD_STRING Mike
1604: PPUSH
1605: LD_EXP 1
1609: NOT
1610: PPUSH
1611: LD_EXP 2
1615: PPUSH
1616: CALL 34277 0 3
1620: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1621: LD_ADDR_EXP 30
1625: PUSH
1626: LD_STRING Olaf
1628: PPUSH
1629: LD_INT 0
1631: PPUSH
1632: LD_STRING 
1634: PPUSH
1635: CALL 34277 0 3
1639: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1640: LD_ADDR_EXP 34
1644: PUSH
1645: LD_STRING 04_2_others
1647: PPUSH
1648: CALL_OW 31
1652: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1653: LD_ADDR_EXP 36
1657: PUSH
1658: LD_STRING 04_2_apes
1660: PPUSH
1661: CALL_OW 31
1665: ST_TO_ADDR
// if hasFlamethrower then
1666: LD_EXP 3
1670: IFFALSE 1905
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1672: LD_INT 70
1674: PPUSH
1675: LD_INT 2
1677: PPUSH
1678: LD_INT 2
1680: PPUSH
1681: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1685: LD_ADDR_EXP 35
1689: PUSH
1690: LD_INT 13
1692: PUSH
1693: LD_INT 1
1695: PUSH
1696: LD_INT 1
1698: PUSH
1699: LD_INT 27
1701: PUSH
1702: LD_INT 2
1704: PUSH
1705: LD_INT 1000
1707: PUSH
1708: LD_INT 0
1710: PUSH
1711: LD_INT 0
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: PUSH
1727: LD_INT 13
1729: PUSH
1730: LD_INT 1
1732: PUSH
1733: LD_INT 1
1735: PUSH
1736: LD_INT 25
1738: PUSH
1739: LD_INT 2
1741: PUSH
1742: LD_INT 1000
1744: PUSH
1745: LD_INT 0
1747: PUSH
1748: LD_INT 0
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: LIST
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: LD_INT 13
1766: PUSH
1767: LD_INT 1
1769: PUSH
1770: LD_INT 1
1772: PUSH
1773: LD_INT 26
1775: PUSH
1776: LD_INT 2
1778: PUSH
1779: LD_INT 1000
1781: PUSH
1782: LD_INT 0
1784: PUSH
1785: LD_INT 0
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 13
1803: PUSH
1804: LD_INT 1
1806: PUSH
1807: LD_INT 1
1809: PUSH
1810: LD_INT 27
1812: PUSH
1813: LD_INT 2
1815: PUSH
1816: LD_INT 1000
1818: PUSH
1819: LD_INT 0
1821: PUSH
1822: LD_INT 0
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: PUSH
1838: LD_INT 13
1840: PUSH
1841: LD_INT 1
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: LD_INT 32
1849: PUSH
1850: LD_INT 2
1852: PUSH
1853: LD_INT 1000
1855: PUSH
1856: LD_INT 0
1858: PUSH
1859: LD_INT 60
1861: PUSH
1862: LD_INT 40
1864: PUSH
1865: LD_INT 20
1867: PUSH
1868: LD_INT 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_OWVAR 67
1881: ARRAY
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: ST_TO_ADDR
// end else
1903: GO 2123
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1905: LD_ADDR_EXP 35
1909: PUSH
1910: LD_INT 13
1912: PUSH
1913: LD_INT 1
1915: PUSH
1916: LD_INT 1
1918: PUSH
1919: LD_INT 25
1921: PUSH
1922: LD_INT 2
1924: PUSH
1925: LD_INT 1000
1927: PUSH
1928: LD_INT 0
1930: PUSH
1931: LD_INT 0
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: PUSH
1947: LD_INT 13
1949: PUSH
1950: LD_INT 1
1952: PUSH
1953: LD_INT 1
1955: PUSH
1956: LD_INT 27
1958: PUSH
1959: LD_INT 2
1961: PUSH
1962: LD_INT 1000
1964: PUSH
1965: LD_INT 0
1967: PUSH
1968: LD_INT 0
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_INT 13
1986: PUSH
1987: LD_INT 1
1989: PUSH
1990: LD_INT 1
1992: PUSH
1993: LD_INT 24
1995: PUSH
1996: LD_INT 2
1998: PUSH
1999: LD_INT 1000
2001: PUSH
2002: LD_INT 0
2004: PUSH
2005: LD_INT 0
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 13
2023: PUSH
2024: LD_INT 1
2026: PUSH
2027: LD_INT 1
2029: PUSH
2030: LD_INT 27
2032: PUSH
2033: LD_INT 2
2035: PUSH
2036: LD_INT 1000
2038: PUSH
2039: LD_INT 0
2041: PUSH
2042: LD_INT 0
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: PUSH
2058: LD_INT 13
2060: PUSH
2061: LD_INT 1
2063: PUSH
2064: LD_INT 1
2066: PUSH
2067: LD_INT 32
2069: PUSH
2070: LD_INT 2
2072: PUSH
2073: LD_INT 1000
2075: PUSH
2076: LD_INT 0
2078: PUSH
2079: LD_INT 50
2081: PUSH
2082: LD_INT 30
2084: PUSH
2085: LD_INT 20
2087: PUSH
2088: LD_INT 10
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_OWVAR 67
2101: ARRAY
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: ST_TO_ADDR
// end ; uc_side := 5 ;
2123: LD_ADDR_OWVAR 20
2127: PUSH
2128: LD_INT 5
2130: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2131: LD_ADDR_EXP 29
2135: PUSH
2136: LD_STRING Abdul
2138: PPUSH
2139: LD_INT 0
2141: PPUSH
2142: LD_STRING 
2144: PPUSH
2145: CALL 34277 0 3
2149: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2150: LD_ADDR_EXP 31
2154: PUSH
2155: LD_STRING Omar
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: LD_STRING 
2163: PPUSH
2164: CALL 34277 0 3
2168: ST_TO_ADDR
// end ;
2169: LD_VAR 0 1
2173: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2174: LD_INT 0
2176: PPUSH
2177: PPUSH
2178: PPUSH
2179: PPUSH
2180: PPUSH
// pfx := 04_1_ ;
2181: LD_ADDR_VAR 0 2
2185: PUSH
2186: LD_STRING 04_1_
2188: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2189: LD_INT 35
2191: PPUSH
2192: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
2196: LD_INT 3
2198: PPUSH
2199: LD_INT 2
2201: PPUSH
2202: CALL_OW 428
2206: NOT
2207: IFFALSE 2189
// tmp := [ ] ;
2209: LD_ADDR_VAR 0 4
2213: PUSH
2214: EMPTY
2215: ST_TO_ADDR
// uc_side := 5 ;
2216: LD_ADDR_OWVAR 20
2220: PUSH
2221: LD_INT 5
2223: ST_TO_ADDR
// uc_nation := 2 ;
2224: LD_ADDR_OWVAR 21
2228: PUSH
2229: LD_INT 2
2231: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2232: LD_ADDR_EXP 33
2236: PUSH
2237: LD_STRING Aviradze_L
2239: PPUSH
2240: LD_EXP 1
2244: NOT
2245: PPUSH
2246: LD_VAR 0 2
2250: PPUSH
2251: CALL 34277 0 3
2255: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2256: LD_EXP 33
2260: PPUSH
2261: LD_INT 2
2263: PPUSH
2264: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2268: LD_EXP 33
2272: PPUSH
2273: LD_INT 14
2275: PPUSH
2276: LD_INT 0
2278: PPUSH
2279: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
2283: LD_EXP 33
2287: PPUSH
2288: LD_INT 8
2290: PPUSH
2291: LD_INT 6
2293: PPUSH
2294: CALL_OW 111
// AddComHold ( Aviradze ) ;
2298: LD_EXP 33
2302: PPUSH
2303: CALL_OW 200
// tmp := [ Aviradze ] ;
2307: LD_ADDR_VAR 0 4
2311: PUSH
2312: LD_EXP 33
2316: PUSH
2317: EMPTY
2318: LIST
2319: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2320: LD_INT 70
2322: PPUSH
2323: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2327: LD_STRING Ibrahim_L
2329: PPUSH
2330: LD_EXP 1
2334: NOT
2335: PPUSH
2336: LD_VAR 0 2
2340: PPUSH
2341: CALL 34277 0 3
2345: IFFALSE 2445
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2347: LD_ADDR_EXP 24
2351: PUSH
2352: LD_STRING Ibrahim_L
2354: PPUSH
2355: LD_EXP 1
2359: NOT
2360: PPUSH
2361: LD_VAR 0 2
2365: PPUSH
2366: CALL 34277 0 3
2370: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2371: LD_EXP 24
2375: PPUSH
2376: LD_INT 2
2378: PPUSH
2379: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2383: LD_EXP 24
2387: PPUSH
2388: LD_INT 14
2390: PPUSH
2391: LD_INT 0
2393: PPUSH
2394: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
2398: LD_EXP 24
2402: PPUSH
2403: LD_INT 8
2405: PPUSH
2406: LD_INT 7
2408: PPUSH
2409: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2413: LD_EXP 24
2417: PPUSH
2418: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2422: LD_ADDR_VAR 0 4
2426: PUSH
2427: LD_VAR 0 4
2431: PUSH
2432: LD_EXP 24
2436: ADD
2437: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2438: LD_INT 70
2440: PPUSH
2441: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2445: LD_STRING Kaia_L
2447: PPUSH
2448: LD_EXP 1
2452: NOT
2453: PPUSH
2454: LD_VAR 0 2
2458: PPUSH
2459: CALL 34277 0 3
2463: IFFALSE 2563
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2465: LD_ADDR_EXP 26
2469: PUSH
2470: LD_STRING Kaia_L
2472: PPUSH
2473: LD_EXP 1
2477: NOT
2478: PPUSH
2479: LD_VAR 0 2
2483: PPUSH
2484: CALL 34277 0 3
2488: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2489: LD_EXP 26
2493: PPUSH
2494: LD_INT 2
2496: PPUSH
2497: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2501: LD_EXP 26
2505: PPUSH
2506: LD_INT 14
2508: PPUSH
2509: LD_INT 0
2511: PPUSH
2512: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
2516: LD_EXP 26
2520: PPUSH
2521: LD_INT 8
2523: PPUSH
2524: LD_INT 7
2526: PPUSH
2527: CALL_OW 111
// AddComHold ( Kaia ) ;
2531: LD_EXP 26
2535: PPUSH
2536: CALL_OW 200
// tmp := tmp ^ Kaia ;
2540: LD_ADDR_VAR 0 4
2544: PUSH
2545: LD_VAR 0 4
2549: PUSH
2550: LD_EXP 26
2554: ADD
2555: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2556: LD_INT 70
2558: PPUSH
2559: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2563: LD_STRING Kamil_L
2565: PPUSH
2566: LD_EXP 1
2570: NOT
2571: PPUSH
2572: LD_VAR 0 2
2576: PPUSH
2577: CALL 34277 0 3
2581: IFFALSE 2681
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2583: LD_ADDR_EXP 25
2587: PUSH
2588: LD_STRING Kamil_L
2590: PPUSH
2591: LD_EXP 1
2595: NOT
2596: PPUSH
2597: LD_VAR 0 2
2601: PPUSH
2602: CALL 34277 0 3
2606: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2607: LD_EXP 25
2611: PPUSH
2612: LD_INT 2
2614: PPUSH
2615: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2619: LD_EXP 25
2623: PPUSH
2624: LD_INT 14
2626: PPUSH
2627: LD_INT 0
2629: PPUSH
2630: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
2634: LD_EXP 25
2638: PPUSH
2639: LD_INT 8
2641: PPUSH
2642: LD_INT 7
2644: PPUSH
2645: CALL_OW 111
// AddComHold ( Kamil ) ;
2649: LD_EXP 25
2653: PPUSH
2654: CALL_OW 200
// tmp := tmp ^ Kamil ;
2658: LD_ADDR_VAR 0 4
2662: PUSH
2663: LD_VAR 0 4
2667: PUSH
2668: LD_EXP 25
2672: ADD
2673: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2674: LD_INT 70
2676: PPUSH
2677: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2681: LD_STRING Sophia_L
2683: PPUSH
2684: LD_EXP 1
2688: NOT
2689: PPUSH
2690: LD_VAR 0 2
2694: PPUSH
2695: CALL 34277 0 3
2699: IFFALSE 2799
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2701: LD_ADDR_EXP 27
2705: PUSH
2706: LD_STRING Sophia_L
2708: PPUSH
2709: LD_EXP 1
2713: NOT
2714: PPUSH
2715: LD_VAR 0 2
2719: PPUSH
2720: CALL 34277 0 3
2724: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2725: LD_EXP 27
2729: PPUSH
2730: LD_INT 2
2732: PPUSH
2733: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2737: LD_EXP 27
2741: PPUSH
2742: LD_INT 14
2744: PPUSH
2745: LD_INT 0
2747: PPUSH
2748: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
2752: LD_EXP 27
2756: PPUSH
2757: LD_INT 9
2759: PPUSH
2760: LD_INT 6
2762: PPUSH
2763: CALL_OW 111
// AddComHold ( Sophia ) ;
2767: LD_EXP 27
2771: PPUSH
2772: CALL_OW 200
// tmp := tmp ^ Sophia ;
2776: LD_ADDR_VAR 0 4
2780: PUSH
2781: LD_VAR 0 4
2785: PUSH
2786: LD_EXP 27
2790: ADD
2791: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2792: LD_INT 70
2794: PPUSH
2795: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2799: LD_ADDR_VAR 0 5
2803: PUSH
2804: LD_STRING 04_1_others_L
2806: PPUSH
2807: CALL_OW 31
2811: ST_TO_ADDR
// if tmp2 then
2812: LD_VAR 0 5
2816: IFFALSE 2913
// for i in tmp2 do
2818: LD_ADDR_VAR 0 3
2822: PUSH
2823: LD_VAR 0 5
2827: PUSH
2828: FOR_IN
2829: IFFALSE 2911
// begin SetDir ( i , 2 ) ;
2831: LD_VAR 0 3
2835: PPUSH
2836: LD_INT 2
2838: PPUSH
2839: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2843: LD_VAR 0 3
2847: PPUSH
2848: LD_INT 14
2850: PPUSH
2851: LD_INT 0
2853: PPUSH
2854: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2858: LD_ADDR_EXP 34
2862: PUSH
2863: LD_EXP 34
2867: PPUSH
2868: LD_EXP 34
2872: PUSH
2873: LD_INT 1
2875: PLUS
2876: PPUSH
2877: LD_VAR 0 3
2881: PPUSH
2882: CALL_OW 1
2886: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2887: LD_VAR 0 3
2891: PPUSH
2892: LD_INT 17
2894: PPUSH
2895: LD_INT 14
2897: PPUSH
2898: CALL_OW 111
// wait ( 0 0$2 ) ;
2902: LD_INT 70
2904: PPUSH
2905: CALL_OW 67
// end ;
2909: GO 2828
2911: POP
2912: POP
// for i in tmp union tmp2 do
2913: LD_ADDR_VAR 0 3
2917: PUSH
2918: LD_VAR 0 4
2922: PUSH
2923: LD_VAR 0 5
2927: UNION
2928: PUSH
2929: FOR_IN
2930: IFFALSE 2960
// begin SetSide ( i , 2 ) ;
2932: LD_VAR 0 3
2936: PPUSH
2937: LD_INT 2
2939: PPUSH
2940: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
2944: LD_VAR 0 3
2948: PPUSH
2949: LD_EXP 21
2953: PPUSH
2954: CALL_OW 112
// end ;
2958: GO 2929
2960: POP
2961: POP
// end ; end_of_file
2962: LD_VAR 0 1
2966: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
2967: LD_INT 0
2969: PPUSH
2970: PPUSH
2971: PPUSH
// uc_side := 3 ;
2972: LD_ADDR_OWVAR 20
2976: PUSH
2977: LD_INT 3
2979: ST_TO_ADDR
// uc_nation := 3 ;
2980: LD_ADDR_OWVAR 21
2984: PUSH
2985: LD_INT 3
2987: ST_TO_ADDR
// crossRoadGuard := [ ] ;
2988: LD_ADDR_EXP 37
2992: PUSH
2993: EMPTY
2994: ST_TO_ADDR
// oilBaseGuard := [ ] ;
2995: LD_ADDR_EXP 38
2999: PUSH
3000: EMPTY
3001: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3002: LD_ADDR_EXP 41
3006: PUSH
3007: EMPTY
3008: ST_TO_ADDR
// for i := 1 to 2 do
3009: LD_ADDR_VAR 0 2
3013: PUSH
3014: DOUBLE
3015: LD_INT 1
3017: DEC
3018: ST_TO_ADDR
3019: LD_INT 2
3021: PUSH
3022: FOR_TO
3023: IFFALSE 3162
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3025: LD_INT 0
3027: PPUSH
3028: LD_INT 1
3030: PPUSH
3031: LD_INT 3
3033: PUSH
3034: LD_INT 4
3036: PUSH
3037: LD_INT 5
3039: PUSH
3040: LD_INT 6
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: PUSH
3049: LD_OWVAR 67
3053: ARRAY
3054: PPUSH
3055: CALL_OW 380
// un := CreateHuman ;
3059: LD_ADDR_VAR 0 3
3063: PUSH
3064: CALL_OW 44
3068: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3069: LD_ADDR_EXP 37
3073: PUSH
3074: LD_EXP 37
3078: PPUSH
3079: LD_EXP 37
3083: PUSH
3084: LD_INT 1
3086: PLUS
3087: PPUSH
3088: LD_VAR 0 3
3092: PPUSH
3093: CALL_OW 1
3097: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3098: LD_VAR 0 3
3102: PPUSH
3103: LD_INT 100
3105: PPUSH
3106: LD_INT 63
3108: PPUSH
3109: LD_INT 3
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3119: LD_VAR 0 3
3123: PPUSH
3124: LD_INT 97
3126: PPUSH
3127: LD_INT 64
3129: PPUSH
3130: CALL_OW 428
3134: PUSH
3135: LD_INT 98
3137: PPUSH
3138: LD_INT 58
3140: PPUSH
3141: CALL_OW 428
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: LD_VAR 0 2
3154: ARRAY
3155: PPUSH
3156: CALL_OW 120
// end ;
3160: GO 3022
3162: POP
3163: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3164: LD_INT 51
3166: PPUSH
3167: LD_INT 77
3169: PPUSH
3170: CALL_OW 428
3174: PPUSH
3175: CALL_OW 274
3179: PPUSH
3180: LD_INT 1
3182: PPUSH
3183: LD_INT 120
3185: PPUSH
3186: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3190: LD_INT 10
3192: PPUSH
3193: CALL_OW 274
3197: PPUSH
3198: LD_INT 2
3200: PPUSH
3201: LD_INT 300
3203: PPUSH
3204: CALL_OW 277
// for i := 1 to 2 do
3208: LD_ADDR_VAR 0 2
3212: PUSH
3213: DOUBLE
3214: LD_INT 1
3216: DEC
3217: ST_TO_ADDR
3218: LD_INT 2
3220: PUSH
3221: FOR_TO
3222: IFFALSE 3340
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3224: LD_INT 0
3226: PPUSH
3227: LD_INT 1
3229: PPUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 4
3235: PUSH
3236: LD_INT 5
3238: PUSH
3239: LD_INT 6
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: PUSH
3248: LD_OWVAR 67
3252: ARRAY
3253: PPUSH
3254: CALL_OW 380
// un := CreateHuman ;
3258: LD_ADDR_VAR 0 3
3262: PUSH
3263: CALL_OW 44
3267: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3268: LD_ADDR_EXP 38
3272: PUSH
3273: LD_EXP 38
3277: PPUSH
3278: LD_EXP 38
3282: PUSH
3283: LD_INT 1
3285: PLUS
3286: PPUSH
3287: LD_VAR 0 3
3291: PPUSH
3292: CALL_OW 1
3296: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3297: LD_VAR 0 3
3301: PPUSH
3302: LD_INT 198
3304: PPUSH
3305: LD_INT 106
3307: PPUSH
3308: CALL_OW 428
3312: PUSH
3313: LD_INT 205
3315: PPUSH
3316: LD_INT 114
3318: PPUSH
3319: CALL_OW 428
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PUSH
3328: LD_VAR 0 2
3332: ARRAY
3333: PPUSH
3334: CALL_OW 52
// end ;
3338: GO 3221
3340: POP
3341: POP
// for i := 1 to 2 do
3342: LD_ADDR_VAR 0 2
3346: PUSH
3347: DOUBLE
3348: LD_INT 1
3350: DEC
3351: ST_TO_ADDR
3352: LD_INT 2
3354: PUSH
3355: FOR_TO
3356: IFFALSE 3433
// begin PrepareHuman ( false , 2 , 3 ) ;
3358: LD_INT 0
3360: PPUSH
3361: LD_INT 2
3363: PPUSH
3364: LD_INT 3
3366: PPUSH
3367: CALL_OW 380
// un := CreateHuman ;
3371: LD_ADDR_VAR 0 3
3375: PUSH
3376: CALL_OW 44
3380: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3381: LD_ADDR_EXP 38
3385: PUSH
3386: LD_EXP 38
3390: PPUSH
3391: LD_EXP 38
3395: PUSH
3396: LD_INT 1
3398: PLUS
3399: PPUSH
3400: LD_VAR 0 3
3404: PPUSH
3405: CALL_OW 1
3409: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3410: LD_VAR 0 3
3414: PPUSH
3415: LD_INT 204
3417: PPUSH
3418: LD_INT 108
3420: PPUSH
3421: LD_INT 2
3423: PPUSH
3424: LD_INT 0
3426: PPUSH
3427: CALL_OW 50
// end ;
3431: GO 3355
3433: POP
3434: POP
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
3435: LD_ADDR_VAR 0 2
3439: PUSH
3440: DOUBLE
3441: LD_INT 1
3443: DEC
3444: ST_TO_ADDR
3445: LD_INT 4
3447: PUSH
3448: LD_INT 5
3450: PUSH
3451: LD_INT 6
3453: PUSH
3454: LD_INT 7
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: PUSH
3463: LD_OWVAR 67
3467: ARRAY
3468: PUSH
3469: FOR_TO
3470: IFFALSE 3616
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3472: LD_INT 0
3474: PPUSH
3475: LD_INT 1
3477: PUSH
3478: LD_INT 1
3480: PUSH
3481: LD_INT 2
3483: PUSH
3484: LD_INT 4
3486: PUSH
3487: LD_INT 1
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: PUSH
3497: LD_INT 1
3499: PPUSH
3500: LD_INT 5
3502: PPUSH
3503: CALL_OW 12
3507: ARRAY
3508: PPUSH
3509: LD_INT 3
3511: PUSH
3512: LD_INT 4
3514: PUSH
3515: LD_INT 5
3517: PUSH
3518: LD_INT 5
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: PUSH
3527: LD_OWVAR 67
3531: ARRAY
3532: PPUSH
3533: CALL_OW 380
// un := CreateHuman ;
3537: LD_ADDR_VAR 0 3
3541: PUSH
3542: CALL_OW 44
3546: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroupArea , false ) then
3547: LD_VAR 0 3
3551: PPUSH
3552: LD_INT 10
3554: PPUSH
3555: LD_INT 0
3557: PPUSH
3558: CALL 70643 0 3
3562: IFFALSE 3614
// begin ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3564: LD_ADDR_EXP 39
3568: PUSH
3569: LD_EXP 39
3573: PPUSH
3574: LD_EXP 39
3578: PUSH
3579: LD_INT 1
3581: PLUS
3582: PPUSH
3583: LD_VAR 0 3
3587: PPUSH
3588: CALL_OW 1
3592: ST_TO_ADDR
// if Prob ( 50 ) then
3593: LD_INT 50
3595: PPUSH
3596: CALL_OW 13
3600: IFFALSE 3614
// ForceSleep ( un , true ) ;
3602: LD_VAR 0 3
3606: PPUSH
3607: LD_INT 1
3609: PPUSH
3610: CALL_OW 585
// end ; end ;
3614: GO 3469
3616: POP
3617: POP
// for i := 1 to 3 do
3618: LD_ADDR_VAR 0 2
3622: PUSH
3623: DOUBLE
3624: LD_INT 1
3626: DEC
3627: ST_TO_ADDR
3628: LD_INT 3
3630: PUSH
3631: FOR_TO
3632: IFFALSE 3726
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
3634: LD_INT 0
3636: PPUSH
3637: LD_INT 1
3639: PPUSH
3640: LD_INT 3
3642: PUSH
3643: LD_INT 4
3645: PUSH
3646: LD_INT 4
3648: PUSH
3649: LD_INT 5
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: PUSH
3658: LD_OWVAR 67
3662: ARRAY
3663: PPUSH
3664: CALL_OW 380
// un := CreateHuman ;
3668: LD_ADDR_VAR 0 3
3672: PUSH
3673: CALL_OW 44
3677: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3678: LD_VAR 0 3
3682: PPUSH
3683: LD_INT 11
3685: PPUSH
3686: LD_INT 0
3688: PPUSH
3689: CALL 70643 0 3
3693: IFFALSE 3724
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3695: LD_ADDR_EXP 39
3699: PUSH
3700: LD_EXP 39
3704: PPUSH
3705: LD_EXP 39
3709: PUSH
3710: LD_INT 1
3712: PLUS
3713: PPUSH
3714: LD_VAR 0 3
3718: PPUSH
3719: CALL_OW 1
3723: ST_TO_ADDR
// end ;
3724: GO 3631
3726: POP
3727: POP
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3728: LD_ADDR_VAR 0 2
3732: PUSH
3733: DOUBLE
3734: LD_INT 1
3736: DEC
3737: ST_TO_ADDR
3738: LD_INT 5
3740: PUSH
3741: LD_INT 6
3743: PUSH
3744: LD_INT 7
3746: PUSH
3747: LD_INT 8
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: LIST
3754: LIST
3755: PUSH
3756: LD_OWVAR 67
3760: ARRAY
3761: PUSH
3762: FOR_TO
3763: IFFALSE 3909
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3765: LD_INT 0
3767: PPUSH
3768: LD_INT 1
3770: PUSH
3771: LD_INT 1
3773: PUSH
3774: LD_INT 2
3776: PUSH
3777: LD_INT 4
3779: PUSH
3780: LD_INT 1
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: PUSH
3790: LD_INT 1
3792: PPUSH
3793: LD_INT 5
3795: PPUSH
3796: CALL_OW 12
3800: ARRAY
3801: PPUSH
3802: LD_INT 3
3804: PUSH
3805: LD_INT 4
3807: PUSH
3808: LD_INT 5
3810: PUSH
3811: LD_INT 5
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: PUSH
3820: LD_OWVAR 67
3824: ARRAY
3825: PPUSH
3826: CALL_OW 380
// un := CreateHuman ;
3830: LD_ADDR_VAR 0 3
3834: PUSH
3835: CALL_OW 44
3839: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3840: LD_VAR 0 3
3844: PPUSH
3845: LD_INT 15
3847: PPUSH
3848: LD_INT 0
3850: PPUSH
3851: CALL 70643 0 3
3855: IFFALSE 3907
// begin ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3857: LD_ADDR_EXP 40
3861: PUSH
3862: LD_EXP 40
3866: PPUSH
3867: LD_EXP 40
3871: PUSH
3872: LD_INT 1
3874: PLUS
3875: PPUSH
3876: LD_VAR 0 3
3880: PPUSH
3881: CALL_OW 1
3885: ST_TO_ADDR
// if Prob ( 50 ) then
3886: LD_INT 50
3888: PPUSH
3889: CALL_OW 13
3893: IFFALSE 3907
// ForceSleep ( un , true ) ;
3895: LD_VAR 0 3
3899: PPUSH
3900: LD_INT 1
3902: PPUSH
3903: CALL_OW 585
// end ; end ;
3907: GO 3762
3909: POP
3910: POP
// end ;
3911: LD_VAR 0 1
3915: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3916: LD_INT 0
3918: PPUSH
3919: PPUSH
3920: PPUSH
// uc_side := 3 ;
3921: LD_ADDR_OWVAR 20
3925: PUSH
3926: LD_INT 3
3928: ST_TO_ADDR
// uc_nation := 3 ;
3929: LD_ADDR_OWVAR 21
3933: PUSH
3934: LD_INT 3
3936: ST_TO_ADDR
// for i := 1 to 6 do
3937: LD_ADDR_VAR 0 2
3941: PUSH
3942: DOUBLE
3943: LD_INT 1
3945: DEC
3946: ST_TO_ADDR
3947: LD_INT 6
3949: PUSH
3950: FOR_TO
3951: IFFALSE 4030
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
3953: LD_INT 0
3955: PPUSH
3956: LD_INT 1
3958: PUSH
3959: LD_INT 4
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PUSH
3966: LD_INT 1
3968: PPUSH
3969: LD_INT 2
3971: PPUSH
3972: CALL_OW 12
3976: ARRAY
3977: PPUSH
3978: LD_INT 0
3980: PPUSH
3981: CALL_OW 380
// un := CreateHuman ;
3985: LD_ADDR_VAR 0 3
3989: PUSH
3990: CALL_OW 44
3994: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
3995: LD_VAR 0 3
3999: PPUSH
4000: LD_INT 54
4002: PPUSH
4003: LD_INT 88
4005: PPUSH
4006: LD_INT 12
4008: PPUSH
4009: LD_INT 0
4011: PPUSH
4012: CALL_OW 50
// SetLives ( un , 1 ) ;
4016: LD_VAR 0 3
4020: PPUSH
4021: LD_INT 1
4023: PPUSH
4024: CALL_OW 234
// end ;
4028: GO 3950
4030: POP
4031: POP
// uc_side := 3 ;
4032: LD_ADDR_OWVAR 20
4036: PUSH
4037: LD_INT 3
4039: ST_TO_ADDR
// uc_nation := 0 ;
4040: LD_ADDR_OWVAR 21
4044: PUSH
4045: LD_INT 0
4047: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4048: LD_ADDR_EXP 42
4052: PUSH
4053: EMPTY
4054: ST_TO_ADDR
// apeEngGroup := [ ] ;
4055: LD_ADDR_EXP 43
4059: PUSH
4060: EMPTY
4061: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
4062: LD_ADDR_VAR 0 2
4066: PUSH
4067: DOUBLE
4068: LD_INT 1
4070: DEC
4071: ST_TO_ADDR
4072: LD_INT 4
4074: PUSH
4075: LD_INT 5
4077: PUSH
4078: LD_INT 6
4080: PUSH
4081: LD_INT 7
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: PUSH
4090: LD_OWVAR 67
4094: ARRAY
4095: PUSH
4096: FOR_TO
4097: IFFALSE 4215
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
4099: LD_INT 0
4101: PPUSH
4102: LD_INT 15
4104: PPUSH
4105: LD_INT 3
4107: PUSH
4108: LD_INT 4
4110: PUSH
4111: LD_INT 5
4113: PUSH
4114: LD_INT 6
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: PUSH
4123: LD_OWVAR 67
4127: ARRAY
4128: PPUSH
4129: CALL_OW 380
// un := CreateHuman ;
4133: LD_ADDR_VAR 0 3
4137: PUSH
4138: CALL_OW 44
4142: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4143: LD_ADDR_EXP 42
4147: PUSH
4148: LD_EXP 42
4152: PPUSH
4153: LD_EXP 42
4157: PUSH
4158: LD_INT 1
4160: PLUS
4161: PPUSH
4162: LD_VAR 0 3
4166: PPUSH
4167: CALL_OW 1
4171: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4172: LD_VAR 0 3
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: LD_INT 5
4182: PPUSH
4183: CALL_OW 12
4187: PPUSH
4188: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4192: LD_VAR 0 3
4196: PPUSH
4197: LD_INT 56
4199: PPUSH
4200: LD_INT 82
4202: PPUSH
4203: LD_INT 6
4205: PPUSH
4206: LD_INT 0
4208: PPUSH
4209: CALL_OW 50
// end ;
4213: GO 4096
4215: POP
4216: POP
// for i := 1 to 2 do
4217: LD_ADDR_VAR 0 2
4221: PUSH
4222: DOUBLE
4223: LD_INT 1
4225: DEC
4226: ST_TO_ADDR
4227: LD_INT 2
4229: PUSH
4230: FOR_TO
4231: IFFALSE 4307
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4233: LD_INT 0
4235: PPUSH
4236: LD_INT 16
4238: PPUSH
4239: LD_INT 4
4241: PPUSH
4242: CALL_OW 380
// un := CreateHuman ;
4246: LD_ADDR_VAR 0 3
4250: PUSH
4251: CALL_OW 44
4255: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4256: LD_ADDR_EXP 43
4260: PUSH
4261: LD_EXP 43
4265: PPUSH
4266: LD_EXP 43
4270: PUSH
4271: LD_INT 1
4273: PLUS
4274: PPUSH
4275: LD_VAR 0 3
4279: PPUSH
4280: CALL_OW 1
4284: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4285: LD_VAR 0 3
4289: PPUSH
4290: LD_INT 51
4292: PPUSH
4293: LD_INT 77
4295: PPUSH
4296: CALL_OW 428
4300: PPUSH
4301: CALL_OW 52
// end ;
4305: GO 4230
4307: POP
4308: POP
// end ;
4309: LD_VAR 0 1
4313: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4314: LD_EXP 42
4318: PPUSH
4319: LD_INT 3
4321: PUSH
4322: LD_INT 24
4324: PUSH
4325: LD_INT 600
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: PUSH
4336: LD_INT 3
4338: PUSH
4339: LD_INT 54
4341: PUSH
4342: EMPTY
4343: LIST
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: PUSH
4349: EMPTY
4350: LIST
4351: LIST
4352: PPUSH
4353: CALL_OW 72
4357: PUSH
4358: LD_INT 66
4360: PPUSH
4361: LD_INT 89
4363: PPUSH
4364: CALL_OW 428
4368: PPUSH
4369: CALL_OW 302
4373: AND
4374: IFFALSE 4459
4376: GO 4378
4378: DISABLE
4379: LD_INT 0
4381: PPUSH
// begin enable ;
4382: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4383: LD_ADDR_VAR 0 1
4387: PUSH
4388: LD_EXP 42
4392: PPUSH
4393: LD_INT 3
4395: PUSH
4396: LD_INT 24
4398: PUSH
4399: LD_INT 600
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: PUSH
4410: LD_INT 3
4412: PUSH
4413: LD_INT 54
4415: PUSH
4416: EMPTY
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PPUSH
4427: CALL_OW 72
4431: PUSH
4432: FOR_IN
4433: IFFALSE 4457
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4435: LD_VAR 0 1
4439: PPUSH
4440: LD_INT 66
4442: PPUSH
4443: LD_INT 89
4445: PPUSH
4446: CALL_OW 428
4450: PPUSH
4451: CALL_OW 120
4455: GO 4432
4457: POP
4458: POP
// end ;
4459: PPOPN 1
4461: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4462: LD_INT 22
4464: PUSH
4465: LD_INT 2
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 92
4474: PUSH
4475: LD_INT 54
4477: PUSH
4478: LD_INT 77
4480: PUSH
4481: LD_INT 8
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: PPUSH
4494: CALL_OW 69
4498: IFFALSE 4562
4500: GO 4502
4502: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4503: LD_EXP 43
4507: PPUSH
4508: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4512: LD_EXP 43
4516: PPUSH
4517: LD_INT 22
4519: PUSH
4520: LD_INT 2
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PUSH
4527: LD_INT 92
4529: PUSH
4530: LD_INT 54
4532: PUSH
4533: LD_INT 77
4535: PUSH
4536: LD_INT 8
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: PPUSH
4549: CALL_OW 69
4553: PUSH
4554: LD_INT 1
4556: ARRAY
4557: PPUSH
4558: CALL_OW 175
// end ;
4562: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag , enemy ; begin
4563: LD_INT 0
4565: PPUSH
4566: PPUSH
4567: PPUSH
4568: PPUSH
4569: PPUSH
4570: PPUSH
4571: PPUSH
4572: PPUSH
4573: PPUSH
4574: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4575: LD_ADDR_VAR 0 3
4579: PUSH
4580: LD_INT 1
4582: PPUSH
4583: LD_INT 3
4585: PPUSH
4586: CALL_OW 12
4590: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4591: LD_ADDR_VAR 0 5
4595: PUSH
4596: LD_INT 16
4598: PUSH
4599: LD_INT 17
4601: PUSH
4602: LD_INT 19
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: LIST
4609: PUSH
4610: LD_VAR 0 3
4614: ARRAY
4615: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4616: LD_ADDR_VAR 0 7
4620: PUSH
4621: LD_INT 159
4623: PUSH
4624: LD_INT 25
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: PUSH
4631: LD_INT 137
4633: PUSH
4634: LD_INT 37
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: PUSH
4641: LD_INT 123
4643: PUSH
4644: LD_INT 55
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PUSH
4651: LD_INT 115
4653: PUSH
4654: LD_INT 71
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: PUSH
4661: LD_INT 106
4663: PUSH
4664: LD_INT 88
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 97
4673: PUSH
4674: LD_INT 114
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: LD_INT 75
4683: PUSH
4684: LD_INT 146
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: PUSH
4700: LD_INT 206
4702: PUSH
4703: LD_INT 135
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: PUSH
4710: LD_INT 184
4712: PUSH
4713: LD_INT 111
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: PUSH
4720: LD_INT 154
4722: PUSH
4723: LD_INT 97
4725: PUSH
4726: EMPTY
4727: LIST
4728: LIST
4729: PUSH
4730: LD_INT 122
4732: PUSH
4733: LD_INT 80
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PUSH
4740: LD_INT 109
4742: PUSH
4743: LD_INT 78
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: PUSH
4750: LD_INT 97
4752: PUSH
4753: LD_INT 113
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: PUSH
4760: LD_INT 75
4762: PUSH
4763: LD_INT 147
4765: PUSH
4766: EMPTY
4767: LIST
4768: LIST
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: PUSH
4779: LD_INT 185
4781: PUSH
4782: LD_INT 72
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: PUSH
4789: LD_INT 171
4791: PUSH
4792: LD_INT 83
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PUSH
4799: LD_INT 161
4801: PUSH
4802: LD_INT 99
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: LD_INT 125
4811: PUSH
4812: LD_INT 82
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: PUSH
4819: LD_INT 105
4821: PUSH
4822: LD_INT 90
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: PUSH
4829: LD_INT 96
4831: PUSH
4832: LD_INT 116
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: PUSH
4839: LD_INT 75
4841: PUSH
4842: LD_INT 147
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: LD_VAR 0 3
4867: ARRAY
4868: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4869: LD_ADDR_VAR 0 4
4873: PUSH
4874: LD_INT 4
4876: PUSH
4877: LD_INT 5
4879: PUSH
4880: LD_INT 3
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: LIST
4887: PUSH
4888: LD_VAR 0 3
4892: ARRAY
4893: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4894: LD_ADDR_VAR 0 6
4898: PUSH
4899: LD_INT 22
4901: PUSH
4902: LD_INT 20
4904: PUSH
4905: LD_INT 21
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: LIST
4912: PUSH
4913: LD_VAR 0 3
4917: ARRAY
4918: ST_TO_ADDR
// for i := 1 to 2 do
4919: LD_ADDR_VAR 0 2
4923: PUSH
4924: DOUBLE
4925: LD_INT 1
4927: DEC
4928: ST_TO_ADDR
4929: LD_INT 2
4931: PUSH
4932: FOR_TO
4933: IFFALSE 4951
// EraseResourceArea ( i , outerSpawnArea ) ;
4935: LD_VAR 0 2
4939: PPUSH
4940: LD_VAR 0 6
4944: PPUSH
4945: CALL_OW 286
4949: GO 4932
4951: POP
4952: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
4953: LD_VAR 0 6
4957: PPUSH
4958: LD_INT 2
4960: PUSH
4961: LD_INT 21
4963: PUSH
4964: LD_INT 1
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: PUSH
4971: LD_INT 21
4973: PUSH
4974: LD_INT 2
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PUSH
4981: LD_INT 21
4983: PUSH
4984: LD_INT 3
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: PPUSH
4997: CALL_OW 70
5001: IFFALSE 5216
// repeat wait ( 0 0$1 ) ;
5003: LD_INT 35
5005: PPUSH
5006: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5010: LD_VAR 0 6
5014: PPUSH
5015: LD_INT 2
5017: PUSH
5018: LD_INT 21
5020: PUSH
5021: LD_INT 2
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: PUSH
5028: LD_INT 21
5030: PUSH
5031: LD_INT 3
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: LIST
5042: PPUSH
5043: CALL_OW 70
5047: IFFALSE 5108
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5049: LD_ADDR_VAR 0 2
5053: PUSH
5054: LD_VAR 0 6
5058: PPUSH
5059: LD_INT 2
5061: PUSH
5062: LD_INT 21
5064: PUSH
5065: LD_INT 2
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: PUSH
5072: LD_INT 21
5074: PUSH
5075: LD_INT 3
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: LIST
5086: PPUSH
5087: CALL_OW 70
5091: PUSH
5092: FOR_IN
5093: IFFALSE 5106
// RemoveUnit ( i ) ;
5095: LD_VAR 0 2
5099: PPUSH
5100: CALL_OW 64
5104: GO 5092
5106: POP
5107: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5108: LD_VAR 0 6
5112: PPUSH
5113: LD_INT 21
5115: PUSH
5116: LD_INT 1
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: PPUSH
5123: CALL_OW 70
5127: IFFALSE 5176
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5129: LD_ADDR_VAR 0 2
5133: PUSH
5134: LD_VAR 0 6
5138: PPUSH
5139: LD_INT 21
5141: PUSH
5142: LD_INT 1
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PPUSH
5149: CALL_OW 70
5153: PUSH
5154: FOR_IN
5155: IFFALSE 5174
// ComMoveXY ( i , 113 , 53 ) ;
5157: LD_VAR 0 2
5161: PPUSH
5162: LD_INT 113
5164: PPUSH
5165: LD_INT 53
5167: PPUSH
5168: CALL_OW 111
5172: GO 5154
5174: POP
5175: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5176: LD_VAR 0 6
5180: PPUSH
5181: LD_INT 2
5183: PUSH
5184: LD_INT 21
5186: PUSH
5187: LD_INT 1
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: PUSH
5194: LD_INT 21
5196: PUSH
5197: LD_INT 2
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: LIST
5208: PPUSH
5209: CALL_OW 70
5213: NOT
5214: IFFALSE 5003
// case convoyCounter of 1 .. 3 :
5216: LD_EXP 16
5220: PUSH
5221: LD_INT 1
5223: DOUBLE
5224: GREATEREQUAL
5225: IFFALSE 5233
5227: LD_INT 3
5229: DOUBLE
5230: LESSEQUAL
5231: IFTRUE 5235
5233: GO 5870
5235: POP
// begin for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] - convoyCounter do
5236: LD_ADDR_VAR 0 2
5240: PUSH
5241: DOUBLE
5242: LD_INT 1
5244: DEC
5245: ST_TO_ADDR
5246: LD_INT 5
5248: PUSH
5249: LD_INT 6
5251: PUSH
5252: LD_INT 7
5254: PUSH
5255: LD_INT 8
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: PUSH
5264: LD_OWVAR 67
5268: ARRAY
5269: PUSH
5270: LD_EXP 16
5274: MINUS
5275: PUSH
5276: FOR_TO
5277: IFFALSE 5484
// begin uc_side := 3 ;
5279: LD_ADDR_OWVAR 20
5283: PUSH
5284: LD_INT 3
5286: ST_TO_ADDR
// uc_nation := 3 ;
5287: LD_ADDR_OWVAR 21
5291: PUSH
5292: LD_INT 3
5294: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5295: LD_INT 0
5297: PPUSH
5298: LD_INT 1
5300: PUSH
5301: LD_INT 1
5303: PUSH
5304: LD_INT 1
5306: PUSH
5307: LD_INT 4
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: PUSH
5316: LD_INT 1
5318: PPUSH
5319: LD_INT 4
5321: PPUSH
5322: CALL_OW 12
5326: ARRAY
5327: PPUSH
5328: LD_INT 4
5330: PUSH
5331: LD_INT 5
5333: PUSH
5334: LD_INT 6
5336: PUSH
5337: LD_INT 7
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: PUSH
5346: LD_OWVAR 67
5350: ARRAY
5351: PPUSH
5352: CALL_OW 380
// un := CreateHuman ;
5356: LD_ADDR_VAR 0 8
5360: PUSH
5361: CALL_OW 44
5365: ST_TO_ADDR
// SetDir ( un , dir ) ;
5366: LD_VAR 0 8
5370: PPUSH
5371: LD_VAR 0 4
5375: PPUSH
5376: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5380: LD_VAR 0 8
5384: PPUSH
5385: LD_VAR 0 5
5389: PPUSH
5390: LD_INT 0
5392: PPUSH
5393: CALL 70643 0 3
5397: IFFALSE 5482
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5399: LD_ADDR_EXP 41
5403: PUSH
5404: LD_EXP 41
5408: PPUSH
5409: LD_EXP 41
5413: PUSH
5414: LD_INT 1
5416: PLUS
5417: PPUSH
5418: LD_VAR 0 8
5422: PPUSH
5423: CALL_OW 1
5427: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5428: LD_VAR 0 8
5432: PPUSH
5433: LD_INT 1
5435: PPUSH
5436: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5440: LD_VAR 0 8
5444: PPUSH
5445: LD_VAR 0 7
5449: PUSH
5450: LD_INT 1
5452: ARRAY
5453: PUSH
5454: LD_INT 1
5456: ARRAY
5457: PPUSH
5458: LD_VAR 0 7
5462: PUSH
5463: LD_INT 1
5465: ARRAY
5466: PUSH
5467: LD_INT 2
5469: ARRAY
5470: PPUSH
5471: CALL_OW 111
// wait ( 0 0$2 ) ;
5475: LD_INT 70
5477: PPUSH
5478: CALL_OW 67
// end ; end ;
5482: GO 5276
5484: POP
5485: POP
// for i := 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
5486: LD_ADDR_VAR 0 2
5490: PUSH
5491: DOUBLE
5492: LD_INT 1
5494: DEC
5495: ST_TO_ADDR
5496: LD_INT 3
5498: PUSH
5499: LD_INT 4
5501: PUSH
5502: LD_INT 4
5504: PUSH
5505: LD_INT 4
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: PUSH
5514: LD_OWVAR 67
5518: ARRAY
5519: PUSH
5520: FOR_TO
5521: IFFALSE 5866
// begin uc_side := 3 ;
5523: LD_ADDR_OWVAR 20
5527: PUSH
5528: LD_INT 3
5530: ST_TO_ADDR
// uc_nation := 3 ;
5531: LD_ADDR_OWVAR 21
5535: PUSH
5536: LD_INT 3
5538: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5539: LD_INT 3
5541: PPUSH
5542: LD_INT 3
5544: PPUSH
5545: LD_INT 21
5547: PUSH
5548: LD_INT 22
5550: PUSH
5551: LD_INT 23
5553: PUSH
5554: LD_INT 24
5556: PUSH
5557: LD_INT 24
5559: PUSH
5560: LD_INT 24
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: PUSH
5571: LD_OWVAR 67
5575: PPUSH
5576: LD_OWVAR 67
5580: PUSH
5581: LD_INT 2
5583: PLUS
5584: PPUSH
5585: CALL_OW 12
5589: ARRAY
5590: PPUSH
5591: LD_INT 1
5593: PPUSH
5594: LD_INT 1
5596: PPUSH
5597: LD_INT 42
5599: PUSH
5600: LD_INT 44
5602: PUSH
5603: LD_INT 43
5605: PUSH
5606: LD_INT 44
5608: PUSH
5609: LD_INT 46
5611: PUSH
5612: LD_INT 46
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: PUSH
5623: LD_INT 1
5625: PPUSH
5626: LD_OWVAR 67
5630: PUSH
5631: LD_INT 2
5633: PLUS
5634: PPUSH
5635: CALL_OW 12
5639: ARRAY
5640: PPUSH
5641: LD_INT 90
5643: PPUSH
5644: CALL 439 0 7
// un := CreateVehicle ;
5648: LD_ADDR_VAR 0 8
5652: PUSH
5653: CALL_OW 45
5657: ST_TO_ADDR
// SetDir ( un , dir ) ;
5658: LD_VAR 0 8
5662: PPUSH
5663: LD_VAR 0 4
5667: PPUSH
5668: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5672: LD_VAR 0 8
5676: PPUSH
5677: LD_VAR 0 5
5681: PPUSH
5682: LD_INT 0
5684: PPUSH
5685: CALL 70643 0 3
5689: IFFALSE 5864
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5691: LD_ADDR_EXP 41
5695: PUSH
5696: LD_EXP 41
5700: PPUSH
5701: LD_EXP 41
5705: PUSH
5706: LD_INT 1
5708: PLUS
5709: PPUSH
5710: LD_VAR 0 8
5714: PPUSH
5715: CALL_OW 1
5719: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
5720: LD_INT 0
5722: PPUSH
5723: LD_INT 3
5725: PUSH
5726: LD_INT 4
5728: PUSH
5729: LD_INT 5
5731: PUSH
5732: LD_INT 6
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: PUSH
5741: LD_OWVAR 67
5745: ARRAY
5746: PPUSH
5747: CALL_OW 383
// un := CreateHuman ;
5751: LD_ADDR_VAR 0 8
5755: PUSH
5756: CALL_OW 44
5760: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5761: LD_VAR 0 8
5765: PPUSH
5766: LD_EXP 41
5770: PUSH
5771: LD_EXP 41
5775: ARRAY
5776: PPUSH
5777: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5781: LD_ADDR_EXP 41
5785: PUSH
5786: LD_EXP 41
5790: PPUSH
5791: LD_EXP 41
5795: PUSH
5796: LD_INT 1
5798: PLUS
5799: PPUSH
5800: LD_VAR 0 8
5804: PPUSH
5805: CALL_OW 1
5809: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5810: LD_VAR 0 8
5814: PPUSH
5815: LD_INT 1
5817: PPUSH
5818: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5822: LD_VAR 0 8
5826: PPUSH
5827: LD_VAR 0 7
5831: PUSH
5832: LD_INT 1
5834: ARRAY
5835: PUSH
5836: LD_INT 1
5838: ARRAY
5839: PPUSH
5840: LD_VAR 0 7
5844: PUSH
5845: LD_INT 1
5847: ARRAY
5848: PUSH
5849: LD_INT 2
5851: ARRAY
5852: PPUSH
5853: CALL_OW 111
// wait ( 0 0$3 ) ;
5857: LD_INT 105
5859: PPUSH
5860: CALL_OW 67
// end ; end ;
5864: GO 5520
5866: POP
5867: POP
// end ; 4 .. 7 :
5868: GO 6475
5870: LD_INT 4
5872: DOUBLE
5873: GREATEREQUAL
5874: IFFALSE 5882
5876: LD_INT 7
5878: DOUBLE
5879: LESSEQUAL
5880: IFTRUE 5884
5882: GO 6474
5884: POP
// begin for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
5885: LD_ADDR_VAR 0 2
5889: PUSH
5890: DOUBLE
5891: LD_INT 1
5893: DEC
5894: ST_TO_ADDR
5895: LD_INT 2
5897: PUSH
5898: LD_INT 3
5900: PUSH
5901: LD_INT 4
5903: PUSH
5904: LD_INT 4
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: PUSH
5913: LD_OWVAR 67
5917: ARRAY
5918: PUSH
5919: FOR_TO
5920: IFFALSE 6100
// begin uc_side := 3 ;
5922: LD_ADDR_OWVAR 20
5926: PUSH
5927: LD_INT 3
5929: ST_TO_ADDR
// uc_nation := 3 ;
5930: LD_ADDR_OWVAR 21
5934: PUSH
5935: LD_INT 3
5937: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5938: LD_INT 0
5940: PPUSH
5941: LD_INT 1
5943: PPUSH
5944: LD_INT 4
5946: PUSH
5947: LD_INT 5
5949: PUSH
5950: LD_INT 6
5952: PUSH
5953: LD_INT 7
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: LIST
5960: LIST
5961: PUSH
5962: LD_OWVAR 67
5966: ARRAY
5967: PPUSH
5968: CALL_OW 380
// un := CreateHuman ;
5972: LD_ADDR_VAR 0 8
5976: PUSH
5977: CALL_OW 44
5981: ST_TO_ADDR
// SetDir ( un , dir ) ;
5982: LD_VAR 0 8
5986: PPUSH
5987: LD_VAR 0 4
5991: PPUSH
5992: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5996: LD_VAR 0 8
6000: PPUSH
6001: LD_VAR 0 5
6005: PPUSH
6006: LD_INT 0
6008: PPUSH
6009: CALL 70643 0 3
6013: IFFALSE 6098
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6015: LD_ADDR_EXP 41
6019: PUSH
6020: LD_EXP 41
6024: PPUSH
6025: LD_EXP 41
6029: PUSH
6030: LD_INT 1
6032: PLUS
6033: PPUSH
6034: LD_VAR 0 8
6038: PPUSH
6039: CALL_OW 1
6043: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6044: LD_VAR 0 8
6048: PPUSH
6049: LD_INT 1
6051: PPUSH
6052: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6056: LD_VAR 0 8
6060: PPUSH
6061: LD_VAR 0 7
6065: PUSH
6066: LD_INT 1
6068: ARRAY
6069: PUSH
6070: LD_INT 1
6072: ARRAY
6073: PPUSH
6074: LD_VAR 0 7
6078: PUSH
6079: LD_INT 1
6081: ARRAY
6082: PUSH
6083: LD_INT 2
6085: ARRAY
6086: PPUSH
6087: CALL_OW 111
// wait ( 0 0$2 ) ;
6091: LD_INT 70
6093: PPUSH
6094: CALL_OW 67
// end ; end ;
6098: GO 5919
6100: POP
6101: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
6102: LD_ADDR_VAR 0 2
6106: PUSH
6107: DOUBLE
6108: LD_INT 1
6110: DEC
6111: ST_TO_ADDR
6112: LD_INT 2
6114: PUSH
6115: LD_INT 3
6117: PUSH
6118: LD_INT 3
6120: PUSH
6121: LD_INT 4
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: PUSH
6130: LD_OWVAR 67
6134: ARRAY
6135: PUSH
6136: FOR_TO
6137: IFFALSE 6470
// begin uc_side := 3 ;
6139: LD_ADDR_OWVAR 20
6143: PUSH
6144: LD_INT 3
6146: ST_TO_ADDR
// uc_nation := 3 ;
6147: LD_ADDR_OWVAR 21
6151: PUSH
6152: LD_INT 3
6154: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6155: LD_INT 3
6157: PPUSH
6158: LD_INT 3
6160: PPUSH
6161: LD_INT 21
6163: PUSH
6164: LD_INT 22
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: LD_INT 1
6173: PPUSH
6174: LD_INT 2
6176: PPUSH
6177: CALL_OW 12
6181: ARRAY
6182: PPUSH
6183: LD_INT 1
6185: PPUSH
6186: LD_INT 1
6188: PPUSH
6189: LD_INT 42
6191: PUSH
6192: LD_INT 44
6194: PUSH
6195: LD_INT 43
6197: PUSH
6198: LD_INT 44
6200: PUSH
6201: LD_INT 44
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: PUSH
6211: LD_INT 1
6213: PPUSH
6214: LD_OWVAR 67
6218: PUSH
6219: LD_INT 1
6221: PLUS
6222: PPUSH
6223: CALL_OW 12
6227: ARRAY
6228: PPUSH
6229: LD_INT 90
6231: PPUSH
6232: CALL 439 0 7
// un := CreateVehicle ;
6236: LD_ADDR_VAR 0 8
6240: PUSH
6241: CALL_OW 45
6245: ST_TO_ADDR
// SetDir ( un , dir ) ;
6246: LD_VAR 0 8
6250: PPUSH
6251: LD_VAR 0 4
6255: PPUSH
6256: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6260: LD_VAR 0 8
6264: PPUSH
6265: LD_VAR 0 5
6269: PPUSH
6270: LD_INT 0
6272: PPUSH
6273: CALL 70643 0 3
6277: IFFALSE 6468
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6279: LD_ADDR_EXP 41
6283: PUSH
6284: LD_EXP 41
6288: PPUSH
6289: LD_EXP 41
6293: PUSH
6294: LD_INT 1
6296: PLUS
6297: PPUSH
6298: LD_VAR 0 8
6302: PPUSH
6303: CALL_OW 1
6307: ST_TO_ADDR
// uc_side := 3 ;
6308: LD_ADDR_OWVAR 20
6312: PUSH
6313: LD_INT 3
6315: ST_TO_ADDR
// uc_nation := 3 ;
6316: LD_ADDR_OWVAR 21
6320: PUSH
6321: LD_INT 3
6323: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
6324: LD_INT 0
6326: PPUSH
6327: LD_INT 3
6329: PUSH
6330: LD_INT 4
6332: PUSH
6333: LD_INT 5
6335: PUSH
6336: LD_INT 6
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: PUSH
6345: LD_OWVAR 67
6349: ARRAY
6350: PPUSH
6351: CALL_OW 383
// un := CreateHuman ;
6355: LD_ADDR_VAR 0 8
6359: PUSH
6360: CALL_OW 44
6364: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6365: LD_VAR 0 8
6369: PPUSH
6370: LD_EXP 41
6374: PUSH
6375: LD_EXP 41
6379: ARRAY
6380: PPUSH
6381: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6385: LD_ADDR_EXP 41
6389: PUSH
6390: LD_EXP 41
6394: PPUSH
6395: LD_EXP 41
6399: PUSH
6400: LD_INT 1
6402: PLUS
6403: PPUSH
6404: LD_VAR 0 8
6408: PPUSH
6409: CALL_OW 1
6413: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6414: LD_VAR 0 8
6418: PPUSH
6419: LD_INT 1
6421: PPUSH
6422: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6426: LD_VAR 0 8
6430: PPUSH
6431: LD_VAR 0 7
6435: PUSH
6436: LD_INT 1
6438: ARRAY
6439: PUSH
6440: LD_INT 1
6442: ARRAY
6443: PPUSH
6444: LD_VAR 0 7
6448: PUSH
6449: LD_INT 1
6451: ARRAY
6452: PUSH
6453: LD_INT 2
6455: ARRAY
6456: PPUSH
6457: CALL_OW 111
// wait ( 0 0$2 ) ;
6461: LD_INT 70
6463: PPUSH
6464: CALL_OW 67
// end ; end ;
6468: GO 6136
6470: POP
6471: POP
// end ; end ;
6472: GO 6475
6474: POP
// repeat wait ( 0 0$1 ) ;
6475: LD_INT 35
6477: PPUSH
6478: CALL_OW 67
// for un in ruConvoySquad do
6482: LD_ADDR_VAR 0 8
6486: PUSH
6487: LD_EXP 41
6491: PUSH
6492: FOR_IN
6493: IFFALSE 7117
// begin if IsInArea ( un , westSouthOutArea ) then
6495: LD_VAR 0 8
6499: PPUSH
6500: LD_INT 18
6502: PPUSH
6503: CALL_OW 308
6507: IFFALSE 6595
// begin if GetType ( un ) = unit_vehicle then
6509: LD_VAR 0 8
6513: PPUSH
6514: CALL_OW 247
6518: PUSH
6519: LD_INT 2
6521: EQUAL
6522: IFFALSE 6554
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6524: LD_ADDR_EXP 41
6528: PUSH
6529: LD_EXP 41
6533: PUSH
6534: LD_VAR 0 8
6538: PPUSH
6539: CALL_OW 311
6543: DIFF
6544: ST_TO_ADDR
// RemoveUnit ( un ) ;
6545: LD_VAR 0 8
6549: PPUSH
6550: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6554: LD_ADDR_EXP 15
6558: PUSH
6559: LD_EXP 15
6563: PUSH
6564: LD_INT 1
6566: PLUS
6567: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6568: LD_ADDR_EXP 41
6572: PUSH
6573: LD_EXP 41
6577: PUSH
6578: LD_VAR 0 8
6582: DIFF
6583: ST_TO_ADDR
// RemoveUnit ( un ) ;
6584: LD_VAR 0 8
6588: PPUSH
6589: CALL_OW 64
// break ;
6593: GO 7117
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6595: LD_VAR 0 8
6599: PPUSH
6600: CALL_OW 305
6604: NOT
6605: PUSH
6606: LD_VAR 0 8
6610: PPUSH
6611: CALL_OW 310
6615: NOT
6616: AND
6617: IFFALSE 6635
// ruConvoySquad := ruConvoySquad diff un ;
6619: LD_ADDR_EXP 41
6623: PUSH
6624: LD_EXP 41
6628: PUSH
6629: LD_VAR 0 8
6633: DIFF
6634: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6635: LD_VAR 0 8
6639: PPUSH
6640: CALL_OW 302
6644: PUSH
6645: LD_VAR 0 8
6649: PPUSH
6650: CALL_OW 314
6654: NOT
6655: AND
6656: IFFALSE 7115
// begin tag := GetTag ( un ) ;
6658: LD_ADDR_VAR 0 9
6662: PUSH
6663: LD_VAR 0 8
6667: PPUSH
6668: CALL_OW 110
6672: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6673: LD_VAR 0 8
6677: PPUSH
6678: LD_VAR 0 7
6682: PUSH
6683: LD_VAR 0 9
6687: PUSH
6688: LD_INT 1
6690: PLUS
6691: ARRAY
6692: PUSH
6693: LD_INT 1
6695: ARRAY
6696: PPUSH
6697: LD_VAR 0 7
6701: PUSH
6702: LD_VAR 0 9
6706: PUSH
6707: LD_INT 1
6709: PLUS
6710: ARRAY
6711: PUSH
6712: LD_INT 2
6714: ARRAY
6715: PPUSH
6716: CALL_OW 297
6720: PUSH
6721: LD_INT 6
6723: LESS
6724: IFFALSE 6907
// begin SetTag ( un , tag + 1 ) ;
6726: LD_VAR 0 8
6730: PPUSH
6731: LD_VAR 0 9
6735: PUSH
6736: LD_INT 1
6738: PLUS
6739: PPUSH
6740: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6744: LD_VAR 0 8
6748: PPUSH
6749: CALL_OW 247
6753: PUSH
6754: LD_INT 2
6756: EQUAL
6757: PUSH
6758: LD_VAR 0 8
6762: PPUSH
6763: CALL_OW 257
6767: PUSH
6768: LD_INT 3
6770: EQUAL
6771: OR
6772: IFFALSE 6905
// begin enemy := FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , un , 8 ] ] ) ;
6774: LD_ADDR_VAR 0 10
6778: PUSH
6779: LD_INT 22
6781: PUSH
6782: LD_INT 2
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: PUSH
6789: LD_INT 91
6791: PUSH
6792: LD_VAR 0 8
6796: PUSH
6797: LD_INT 8
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: LIST
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: PPUSH
6809: CALL_OW 69
6813: ST_TO_ADDR
// if enemy then
6814: LD_VAR 0 10
6818: IFFALSE 6846
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) else
6820: LD_VAR 0 8
6824: PPUSH
6825: LD_VAR 0 10
6829: PPUSH
6830: LD_VAR 0 8
6834: PPUSH
6835: CALL_OW 74
6839: PPUSH
6840: CALL_OW 115
6844: GO 6905
// begin AddComWait ( un , 0 0$4 ) ;
6846: LD_VAR 0 8
6850: PPUSH
6851: LD_INT 140
6853: PPUSH
6854: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6858: LD_VAR 0 8
6862: PPUSH
6863: LD_VAR 0 7
6867: PUSH
6868: LD_VAR 0 9
6872: PUSH
6873: LD_INT 1
6875: PLUS
6876: ARRAY
6877: PUSH
6878: LD_INT 1
6880: ARRAY
6881: PPUSH
6882: LD_VAR 0 7
6886: PUSH
6887: LD_VAR 0 9
6891: PUSH
6892: LD_INT 1
6894: PLUS
6895: ARRAY
6896: PUSH
6897: LD_INT 2
6899: ARRAY
6900: PPUSH
6901: CALL_OW 174
// end ; end ; end else
6905: GO 7115
// begin if GetClass ( un ) = 4 then
6907: LD_VAR 0 8
6911: PPUSH
6912: CALL_OW 257
6916: PUSH
6917: LD_INT 4
6919: EQUAL
6920: IFFALSE 7068
// begin if UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6922: LD_EXP 41
6926: PPUSH
6927: LD_INT 21
6929: PUSH
6930: LD_INT 1
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: LD_INT 3
6939: PUSH
6940: LD_INT 24
6942: PUSH
6943: LD_INT 1000
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PPUSH
6958: CALL_OW 72
6962: IFFALSE 7020
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
6964: LD_VAR 0 8
6968: PPUSH
6969: LD_EXP 41
6973: PPUSH
6974: LD_INT 21
6976: PUSH
6977: LD_INT 1
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 3
6986: PUSH
6987: LD_INT 24
6989: PUSH
6990: LD_INT 1000
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PPUSH
7005: CALL_OW 72
7009: PUSH
7010: LD_INT 1
7012: ARRAY
7013: PPUSH
7014: CALL_OW 128
7018: GO 7066
// ComMoveUnit ( un , NearestUnitToUnit ( UnitFilter ( ruConvoySquad , [ f_not , [ f_class , 4 ] ] ) , un ) ) end else
7020: LD_VAR 0 8
7024: PPUSH
7025: LD_EXP 41
7029: PPUSH
7030: LD_INT 3
7032: PUSH
7033: LD_INT 25
7035: PUSH
7036: LD_INT 4
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PPUSH
7047: CALL_OW 72
7051: PPUSH
7052: LD_VAR 0 8
7056: PPUSH
7057: CALL_OW 74
7061: PPUSH
7062: CALL_OW 112
7066: GO 7115
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7068: LD_VAR 0 8
7072: PPUSH
7073: LD_VAR 0 7
7077: PUSH
7078: LD_VAR 0 9
7082: PUSH
7083: LD_INT 1
7085: PLUS
7086: ARRAY
7087: PUSH
7088: LD_INT 1
7090: ARRAY
7091: PPUSH
7092: LD_VAR 0 7
7096: PUSH
7097: LD_VAR 0 9
7101: PUSH
7102: LD_INT 1
7104: PLUS
7105: ARRAY
7106: PUSH
7107: LD_INT 2
7109: ARRAY
7110: PPUSH
7111: CALL_OW 114
// end ; end ; end ;
7115: GO 6492
7117: POP
7118: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
7119: LD_EXP 41
7123: PPUSH
7124: LD_INT 52
7126: PUSH
7127: EMPTY
7128: LIST
7129: PUSH
7130: LD_INT 21
7132: PUSH
7133: LD_INT 1
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PPUSH
7144: CALL_OW 72
7148: NOT
7149: IFFALSE 6475
// end ;
7151: LD_VAR 0 1
7155: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
7156: LD_EXP 16
7160: PUSH
7161: LD_INT 3
7163: PPUSH
7164: LD_INT 5
7166: PPUSH
7167: CALL_OW 12
7171: LESS
7172: PUSH
7173: LD_EXP 41
7177: NOT
7178: AND
7179: PUSH
7180: LD_OWVAR 67
7184: PUSH
7185: LD_INT 1
7187: GREATER
7188: AND
7189: IFFALSE 7609
7191: GO 7193
7193: DISABLE
7194: LD_INT 0
7196: PPUSH
7197: PPUSH
7198: PPUSH
// begin for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
7199: LD_ADDR_VAR 0 1
7203: PUSH
7204: DOUBLE
7205: LD_INT 1
7207: DEC
7208: ST_TO_ADDR
7209: LD_INT 2
7211: PUSH
7212: LD_INT 3
7214: PUSH
7215: LD_INT 4
7217: PUSH
7218: LD_INT 5
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: PUSH
7227: LD_OWVAR 67
7231: ARRAY
7232: PUSH
7233: FOR_TO
7234: IFFALSE 7530
// begin uc_side := 3 ;
7236: LD_ADDR_OWVAR 20
7240: PUSH
7241: LD_INT 3
7243: ST_TO_ADDR
// uc_nation := 3 ;
7244: LD_ADDR_OWVAR 21
7248: PUSH
7249: LD_INT 3
7251: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7252: LD_INT 3
7254: PPUSH
7255: LD_INT 3
7257: PPUSH
7258: LD_INT 21
7260: PUSH
7261: LD_INT 22
7263: PUSH
7264: LD_INT 23
7266: PUSH
7267: LD_INT 24
7269: PUSH
7270: LD_INT 24
7272: PUSH
7273: LD_INT 24
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: LIST
7283: PUSH
7284: LD_OWVAR 67
7288: PPUSH
7289: LD_OWVAR 67
7293: PUSH
7294: LD_INT 2
7296: PLUS
7297: PPUSH
7298: CALL_OW 12
7302: ARRAY
7303: PPUSH
7304: LD_INT 1
7306: PPUSH
7307: LD_INT 1
7309: PPUSH
7310: LD_INT 42
7312: PUSH
7313: LD_INT 44
7315: PUSH
7316: LD_INT 43
7318: PUSH
7319: LD_INT 44
7321: PUSH
7322: LD_INT 46
7324: PUSH
7325: LD_INT 46
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: PUSH
7336: LD_INT 1
7338: PPUSH
7339: LD_OWVAR 67
7343: PUSH
7344: LD_INT 2
7346: PLUS
7347: PPUSH
7348: CALL_OW 12
7352: ARRAY
7353: PPUSH
7354: LD_INT 90
7356: PPUSH
7357: CALL 439 0 7
// un := CreateVehicle ;
7361: LD_ADDR_VAR 0 3
7365: PUSH
7366: CALL_OW 45
7370: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7371: LD_VAR 0 3
7375: PPUSH
7376: LD_INT 0
7378: PPUSH
7379: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7383: LD_VAR 0 3
7387: PPUSH
7388: LD_INT 23
7390: PPUSH
7391: LD_INT 0
7393: PPUSH
7394: CALL 70643 0 3
7398: IFFALSE 7528
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7400: LD_ADDR_VAR 0 2
7404: PUSH
7405: LD_VAR 0 2
7409: PPUSH
7410: LD_VAR 0 2
7414: PUSH
7415: LD_INT 1
7417: PLUS
7418: PPUSH
7419: LD_VAR 0 3
7423: PPUSH
7424: CALL_OW 1
7428: ST_TO_ADDR
// uc_side := 3 ;
7429: LD_ADDR_OWVAR 20
7433: PUSH
7434: LD_INT 3
7436: ST_TO_ADDR
// uc_nation := 3 ;
7437: LD_ADDR_OWVAR 21
7441: PUSH
7442: LD_INT 3
7444: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
7445: LD_INT 0
7447: PPUSH
7448: LD_INT 3
7450: PUSH
7451: LD_INT 4
7453: PUSH
7454: LD_INT 5
7456: PUSH
7457: LD_INT 6
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: PUSH
7466: LD_OWVAR 67
7470: ARRAY
7471: PPUSH
7472: CALL_OW 383
// un := CreateHuman ;
7476: LD_ADDR_VAR 0 3
7480: PUSH
7481: CALL_OW 44
7485: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7486: LD_VAR 0 3
7490: PPUSH
7491: LD_VAR 0 2
7495: PUSH
7496: LD_VAR 0 2
7500: ARRAY
7501: PPUSH
7502: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7506: LD_VAR 0 3
7510: PPUSH
7511: LD_INT 80
7513: PPUSH
7514: LD_INT 139
7516: PPUSH
7517: CALL_OW 111
// wait ( 0 0$3 ) ;
7521: LD_INT 105
7523: PPUSH
7524: CALL_OW 67
// end ; end ;
7528: GO 7233
7530: POP
7531: POP
// for i in tmp do
7532: LD_ADDR_VAR 0 1
7536: PUSH
7537: LD_VAR 0 2
7541: PUSH
7542: FOR_IN
7543: IFFALSE 7607
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7545: LD_VAR 0 1
7549: PPUSH
7550: LD_INT 101
7552: PPUSH
7553: LD_INT 102
7555: PPUSH
7556: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7560: LD_VAR 0 1
7564: PPUSH
7565: LD_INT 110
7567: PPUSH
7568: LD_INT 78
7570: PPUSH
7571: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7575: LD_VAR 0 1
7579: PPUSH
7580: LD_INT 75
7582: PPUSH
7583: LD_INT 101
7585: PPUSH
7586: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7590: LD_VAR 0 1
7594: PPUSH
7595: LD_INT 57
7597: PPUSH
7598: LD_INT 83
7600: PPUSH
7601: CALL_OW 174
// end ;
7605: GO 7542
7607: POP
7608: POP
// end ;
7609: PPOPN 3
7611: END
// every 0 0$1 trigger UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) or UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do var i ;
7612: LD_EXP 39
7616: PPUSH
7617: LD_INT 3
7619: PUSH
7620: LD_INT 24
7622: PUSH
7623: LD_INT 1000
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PPUSH
7634: CALL_OW 72
7638: PUSH
7639: LD_EXP 40
7643: PPUSH
7644: LD_INT 3
7646: PUSH
7647: LD_INT 24
7649: PUSH
7650: LD_INT 1000
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PPUSH
7661: CALL_OW 72
7665: OR
7666: IFFALSE 7765
7668: GO 7670
7670: DISABLE
7671: LD_INT 0
7673: PPUSH
// begin enable ;
7674: ENABLE
// for i in UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) union UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do
7675: LD_ADDR_VAR 0 1
7679: PUSH
7680: LD_EXP 39
7684: PPUSH
7685: LD_INT 3
7687: PUSH
7688: LD_INT 24
7690: PUSH
7691: LD_INT 1000
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PPUSH
7702: CALL_OW 72
7706: PUSH
7707: LD_EXP 40
7711: PPUSH
7712: LD_INT 3
7714: PUSH
7715: LD_INT 24
7717: PUSH
7718: LD_INT 1000
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: PPUSH
7729: CALL_OW 72
7733: UNION
7734: PUSH
7735: FOR_IN
7736: IFFALSE 7763
// if IsSleeping ( i ) then
7738: LD_VAR 0 1
7742: PPUSH
7743: CALL_OW 555
7747: IFFALSE 7761
// ForceSleep ( i , false ) ;
7749: LD_VAR 0 1
7753: PPUSH
7754: LD_INT 0
7756: PPUSH
7757: CALL_OW 585
7761: GO 7735
7763: POP
7764: POP
// end ; end_of_file
7765: PPOPN 1
7767: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7768: LD_VAR 0 1
7772: PPUSH
7773: CALL 14339 0 1
// if un = Heike then
7777: LD_VAR 0 1
7781: PUSH
7782: LD_EXP 21
7786: EQUAL
7787: IFFALSE 7796
// YouLost ( Heike ) ;
7789: LD_STRING Heike
7791: PPUSH
7792: CALL_OW 104
// if un in apeSoldGroup then
7796: LD_VAR 0 1
7800: PUSH
7801: LD_EXP 42
7805: IN
7806: IFFALSE 7824
// apeSoldGroup := apeSoldGroup diff un ;
7808: LD_ADDR_EXP 42
7812: PUSH
7813: LD_EXP 42
7817: PUSH
7818: LD_VAR 0 1
7822: DIFF
7823: ST_TO_ADDR
// if un in apeEngGroup then
7824: LD_VAR 0 1
7828: PUSH
7829: LD_EXP 43
7833: IN
7834: IFFALSE 7852
// apeEngGroup := apeEngGroup diff un ;
7836: LD_ADDR_EXP 43
7840: PUSH
7841: LD_EXP 43
7845: PUSH
7846: LD_VAR 0 1
7850: DIFF
7851: ST_TO_ADDR
// if un in oilBaseGuard then
7852: LD_VAR 0 1
7856: PUSH
7857: LD_EXP 38
7861: IN
7862: IFFALSE 7880
// oilBaseGuard := oilBaseGuard diff un ;
7864: LD_ADDR_EXP 38
7868: PUSH
7869: LD_EXP 38
7873: PUSH
7874: LD_VAR 0 1
7878: DIFF
7879: ST_TO_ADDR
// if un in ruNorthGroup then
7880: LD_VAR 0 1
7884: PUSH
7885: LD_EXP 39
7889: IN
7890: IFFALSE 7908
// ruNorthGroup := ruNorthGroup diff un ;
7892: LD_ADDR_EXP 39
7896: PUSH
7897: LD_EXP 39
7901: PUSH
7902: LD_VAR 0 1
7906: DIFF
7907: ST_TO_ADDR
// if un in ruSouthGroup then
7908: LD_VAR 0 1
7912: PUSH
7913: LD_EXP 40
7917: IN
7918: IFFALSE 7936
// ruSouthGroup := ruSouthGroup diff un ;
7920: LD_ADDR_EXP 40
7924: PUSH
7925: LD_EXP 40
7929: PUSH
7930: LD_VAR 0 1
7934: DIFF
7935: ST_TO_ADDR
// if un in ruConvoySquad then
7936: LD_VAR 0 1
7940: PUSH
7941: LD_EXP 41
7945: IN
7946: IFFALSE 7964
// ruConvoySquad := ruConvoySquad diff un ;
7948: LD_ADDR_EXP 41
7952: PUSH
7953: LD_EXP 41
7957: PUSH
7958: LD_VAR 0 1
7962: DIFF
7963: ST_TO_ADDR
// end ;
7964: PPOPN 1
7966: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
7967: LD_VAR 0 1
7971: PPUSH
7972: LD_VAR 0 2
7976: PPUSH
7977: CALL 14459 0 2
// if GetWeapon ( veh ) = ar_radar then
7981: LD_VAR 0 1
7985: PPUSH
7986: CALL_OW 264
7990: PUSH
7991: LD_INT 30
7993: EQUAL
7994: IFFALSE 8004
// radarConstructed := true ;
7996: LD_ADDR_EXP 13
8000: PUSH
8001: LD_INT 1
8003: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
8004: LD_VAR 0 1
8008: PPUSH
8009: CALL_OW 264
8013: PUSH
8014: LD_INT 26
8016: EQUAL
8017: IFFALSE 8027
// flamethrowerBuilt := true ;
8019: LD_ADDR_EXP 20
8023: PUSH
8024: LD_INT 1
8026: ST_TO_ADDR
// end ;
8027: PPOPN 2
8029: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
8030: LD_ADDR_EXP 18
8034: PUSH
8035: LD_EXP 18
8039: PUSH
8040: LD_INT 1
8042: PLUS
8043: ST_TO_ADDR
// if oldId in ruConvoySquad then
8044: LD_VAR 0 2
8048: PUSH
8049: LD_EXP 41
8053: IN
8054: IFFALSE 8072
// ruConvoySquad := ruConvoySquad diff oldId ;
8056: LD_ADDR_EXP 41
8060: PUSH
8061: LD_EXP 41
8065: PUSH
8066: LD_VAR 0 2
8070: DIFF
8071: ST_TO_ADDR
// if newId in ruConvoySquad then
8072: LD_VAR 0 1
8076: PUSH
8077: LD_EXP 41
8081: IN
8082: IFFALSE 8100
// ruConvoySquad := ruConvoySquad diff newId ;
8084: LD_ADDR_EXP 41
8088: PUSH
8089: LD_EXP 41
8093: PUSH
8094: LD_VAR 0 1
8098: DIFF
8099: ST_TO_ADDR
// end ; end_of_file
8100: PPOPN 4
8102: END
// export function Action ; var i , p , un , veh , tmp ; begin
8103: LD_INT 0
8105: PPUSH
8106: PPUSH
8107: PPUSH
8108: PPUSH
8109: PPUSH
8110: PPUSH
// InGameOn ;
8111: CALL_OW 8
// music_nat := 2 ;
8115: LD_ADDR_OWVAR 71
8119: PUSH
8120: LD_INT 2
8122: ST_TO_ADDR
// music_class := music_recon ;
8123: LD_ADDR_OWVAR 72
8127: PUSH
8128: LD_INT 3
8130: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
8131: LD_INT 7
8133: PPUSH
8134: LD_INT 6
8136: PPUSH
8137: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 30 ) ;
8141: LD_INT 7
8143: PPUSH
8144: LD_INT 6
8146: PPUSH
8147: LD_INT 2
8149: PPUSH
8150: LD_INT 30
8152: NEG
8153: PPUSH
8154: CALL 1147 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Markov , Aviradze , Sophia ] ;
8158: LD_ADDR_VAR 0 6
8162: PUSH
8163: LD_EXP 21
8167: PUSH
8168: LD_EXP 22
8172: PUSH
8173: LD_EXP 23
8177: PUSH
8178: LD_EXP 24
8182: PUSH
8183: LD_EXP 25
8187: PUSH
8188: LD_EXP 26
8192: PUSH
8193: LD_EXP 28
8197: PUSH
8198: LD_EXP 33
8202: PUSH
8203: LD_EXP 27
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: ST_TO_ADDR
// tmp := tmp diff 0 ;
8219: LD_ADDR_VAR 0 6
8223: PUSH
8224: LD_VAR 0 6
8228: PUSH
8229: LD_INT 0
8231: DIFF
8232: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
8233: LD_ADDR_VAR 0 6
8237: PUSH
8238: LD_VAR 0 6
8242: PPUSH
8243: LD_INT 3
8245: PPUSH
8246: CALL 70235 0 2
8250: ST_TO_ADDR
// for i in heikeVehicles do
8251: LD_ADDR_VAR 0 2
8255: PUSH
8256: LD_EXP 35
8260: PUSH
8261: FOR_IN
8262: IFFALSE 8461
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
8264: LD_INT 5
8266: PPUSH
8267: LD_VAR 0 2
8271: PUSH
8272: LD_INT 5
8274: ARRAY
8275: PPUSH
8276: LD_VAR 0 2
8280: PUSH
8281: LD_INT 1
8283: ARRAY
8284: PPUSH
8285: LD_VAR 0 2
8289: PUSH
8290: LD_INT 2
8292: ARRAY
8293: PPUSH
8294: LD_VAR 0 2
8298: PUSH
8299: LD_INT 3
8301: ARRAY
8302: PPUSH
8303: LD_VAR 0 2
8307: PUSH
8308: LD_INT 4
8310: ARRAY
8311: PPUSH
8312: LD_INT 34
8314: PPUSH
8315: CALL 439 0 7
// veh := CreateVehicle ;
8319: LD_ADDR_VAR 0 5
8323: PUSH
8324: CALL_OW 45
8328: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
8329: LD_VAR 0 2
8333: PUSH
8334: LD_INT 4
8336: ARRAY
8337: PUSH
8338: LD_INT 51
8340: PUSH
8341: LD_INT 32
8343: PUSH
8344: LD_INT 12
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: IN
8352: IFFALSE 8432
// begin if i [ 7 ] [ 1 ] then
8354: LD_VAR 0 2
8358: PUSH
8359: LD_INT 7
8361: ARRAY
8362: PUSH
8363: LD_INT 1
8365: ARRAY
8366: IFFALSE 8393
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
8368: LD_VAR 0 5
8372: PPUSH
8373: LD_INT 1
8375: PPUSH
8376: LD_VAR 0 2
8380: PUSH
8381: LD_INT 7
8383: ARRAY
8384: PUSH
8385: LD_INT 1
8387: ARRAY
8388: PPUSH
8389: CALL_OW 291
// if i [ 7 ] [ 2 ] then
8393: LD_VAR 0 2
8397: PUSH
8398: LD_INT 7
8400: ARRAY
8401: PUSH
8402: LD_INT 2
8404: ARRAY
8405: IFFALSE 8432
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
8407: LD_VAR 0 5
8411: PPUSH
8412: LD_INT 2
8414: PPUSH
8415: LD_VAR 0 2
8419: PUSH
8420: LD_INT 7
8422: ARRAY
8423: PUSH
8424: LD_INT 2
8426: ARRAY
8427: PPUSH
8428: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8432: LD_VAR 0 5
8436: PPUSH
8437: LD_INT 2
8439: PPUSH
8440: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8444: LD_VAR 0 5
8448: PPUSH
8449: LD_INT 4
8451: PPUSH
8452: LD_INT 0
8454: PPUSH
8455: CALL_OW 49
// end ;
8459: GO 8261
8461: POP
8462: POP
// if tmp then
8463: LD_VAR 0 6
8467: IFFALSE 8577
// begin p := 0 ;
8469: LD_ADDR_VAR 0 3
8473: PUSH
8474: LD_INT 0
8476: ST_TO_ADDR
// for i in tmp do
8477: LD_ADDR_VAR 0 2
8481: PUSH
8482: LD_VAR 0 6
8486: PUSH
8487: FOR_IN
8488: IFFALSE 8575
// begin p := p + 1 ;
8490: LD_ADDR_VAR 0 3
8494: PUSH
8495: LD_VAR 0 3
8499: PUSH
8500: LD_INT 1
8502: PLUS
8503: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHumanArea , false ) ;
8504: LD_VAR 0 2
8508: PPUSH
8509: LD_INT 5
8511: PPUSH
8512: LD_INT 0
8514: PPUSH
8515: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8519: LD_VAR 0 2
8523: PPUSH
8524: LD_INT 26
8526: PPUSH
8527: LD_INT 9
8529: PPUSH
8530: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8534: LD_VAR 0 3
8538: PUSH
8539: LD_EXP 35
8543: GREATEREQUAL
8544: PUSH
8545: LD_VAR 0 2
8549: PPUSH
8550: CALL_OW 257
8554: PUSH
8555: LD_INT 3
8557: EQUAL
8558: AND
8559: IFFALSE 8573
// SetClass ( i , 1 ) ;
8561: LD_VAR 0 2
8565: PPUSH
8566: LD_INT 1
8568: PPUSH
8569: CALL_OW 336
// end ;
8573: GO 8487
8575: POP
8576: POP
// end ; if heikeSecondSquad then
8577: LD_EXP 34
8581: IFFALSE 8695
// for i in heikeSecondSquad do
8583: LD_ADDR_VAR 0 2
8587: PUSH
8588: LD_EXP 34
8592: PUSH
8593: FOR_IN
8594: IFFALSE 8693
// begin p := p + 1 ;
8596: LD_ADDR_VAR 0 3
8600: PUSH
8601: LD_VAR 0 3
8605: PUSH
8606: LD_INT 1
8608: PLUS
8609: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8610: LD_VAR 0 2
8614: PPUSH
8615: LD_INT 6
8617: PPUSH
8618: LD_INT 0
8620: PPUSH
8621: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8625: LD_VAR 0 2
8629: PPUSH
8630: LD_INT 26
8632: PPUSH
8633: LD_INT 9
8635: PPUSH
8636: CALL_OW 118
// ForceSleep ( i , true ) ;
8640: LD_VAR 0 2
8644: PPUSH
8645: LD_INT 1
8647: PPUSH
8648: CALL_OW 585
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8652: LD_VAR 0 3
8656: PUSH
8657: LD_EXP 35
8661: GREATEREQUAL
8662: PUSH
8663: LD_VAR 0 2
8667: PPUSH
8668: CALL_OW 257
8672: PUSH
8673: LD_INT 3
8675: EQUAL
8676: AND
8677: IFFALSE 8691
// SetClass ( i , 1 ) ;
8679: LD_VAR 0 2
8683: PPUSH
8684: LD_INT 1
8686: PPUSH
8687: CALL_OW 336
// end ;
8691: GO 8593
8693: POP
8694: POP
// if heikeApes then
8695: LD_EXP 36
8699: IFFALSE 8742
// for i in heikeApes do
8701: LD_ADDR_VAR 0 2
8705: PUSH
8706: LD_EXP 36
8710: PUSH
8711: FOR_IN
8712: IFFALSE 8740
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
8714: LD_VAR 0 2
8718: PPUSH
8719: LD_INT 7
8721: PPUSH
8722: LD_INT 0
8724: PPUSH
8725: CALL_OW 49
// ComHold ( i ) ;
8729: LD_VAR 0 2
8733: PPUSH
8734: CALL_OW 140
// end ;
8738: GO 8711
8740: POP
8741: POP
// if Kurt then
8742: LD_EXP 32
8746: IFFALSE 8778
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
8748: LD_EXP 32
8752: PPUSH
8753: LD_INT 8
8755: PPUSH
8756: LD_INT 0
8758: PPUSH
8759: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
8763: LD_EXP 32
8767: PPUSH
8768: LD_INT 42
8770: PPUSH
8771: LD_INT 32
8773: PPUSH
8774: CALL_OW 118
// end ; wait ( 0 0$2 ) ;
8778: LD_INT 70
8780: PPUSH
8781: CALL_OW 67
// Say ( Heike , DH-Start-1 ) ;
8785: LD_EXP 21
8789: PPUSH
8790: LD_STRING DH-Start-1
8792: PPUSH
8793: CALL_OW 88
// if Givi then
8797: LD_EXP 22
8801: IFFALSE 9064
// begin Say ( Givi , DG-Start-2-5 ) ;
8803: LD_EXP 22
8807: PPUSH
8808: LD_STRING DG-Start-2-5
8810: PPUSH
8811: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
8815: LD_EXP 21
8819: PPUSH
8820: LD_STRING DH-Start-3
8822: PPUSH
8823: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8827: LD_EXP 21
8831: PPUSH
8832: LD_STRING DH-Start-4
8834: PPUSH
8835: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
8839: LD_EXP 22
8843: PPUSH
8844: LD_STRING DG-Start-5
8846: PPUSH
8847: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
8851: LD_EXP 21
8855: PPUSH
8856: LD_STRING DH-Start-6
8858: PPUSH
8859: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
8863: LD_EXP 22
8867: PPUSH
8868: LD_STRING DG-Start-7
8870: PPUSH
8871: CALL_OW 88
// if Mike then
8875: LD_EXP 23
8879: IFFALSE 9052
// begin Say ( Mike , DM-Start-8 ) ;
8881: LD_EXP 23
8885: PPUSH
8886: LD_STRING DM-Start-8
8888: PPUSH
8889: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
8893: LD_EXP 23
8897: PPUSH
8898: LD_STRING DM-Start-9
8900: PPUSH
8901: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
8905: LD_EXP 22
8909: PPUSH
8910: LD_STRING DG-Start-10
8912: PPUSH
8913: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
8917: LD_EXP 22
8921: PPUSH
8922: LD_STRING DG-Start-11
8924: PPUSH
8925: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
8929: LD_EXP 21
8933: PPUSH
8934: LD_STRING DH-Start-12
8936: PPUSH
8937: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
8941: LD_EXP 22
8945: PPUSH
8946: LD_STRING DG-Start-13
8948: PPUSH
8949: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
8953: LD_EXP 22
8957: PPUSH
8958: LD_STRING DG-Start-14
8960: PPUSH
8961: CALL_OW 88
// if Kaia then
8965: LD_EXP 26
8969: IFFALSE 9052
// begin Say ( Kaia , DK-Start-15 ) ;
8971: LD_EXP 26
8975: PPUSH
8976: LD_STRING DK-Start-15
8978: PPUSH
8979: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
8983: LD_EXP 26
8987: PPUSH
8988: LD_STRING DK-Start-16
8990: PPUSH
8991: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
8995: LD_EXP 26
8999: PPUSH
9000: LD_STRING DK-Start-17
9002: PPUSH
9003: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9007: LD_INT 10
9009: PPUSH
9010: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
9014: LD_EXP 22
9018: PPUSH
9019: LD_EXP 26
9023: PPUSH
9024: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
9028: LD_EXP 22
9032: PPUSH
9033: LD_STRING DG-Start-18
9035: PPUSH
9036: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
9040: LD_EXP 26
9044: PPUSH
9045: LD_STRING DK-Start-19
9047: PPUSH
9048: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
9052: LD_EXP 21
9056: PPUSH
9057: LD_STRING DH-Start-20
9059: PPUSH
9060: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
9064: LD_INT 70
9066: PPUSH
9067: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
9071: LD_EXP 29
9075: PPUSH
9076: LD_STRING DShar-Start-21
9078: PPUSH
9079: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
9083: LD_EXP 21
9087: PPUSH
9088: LD_STRING DH-Start-22
9090: PPUSH
9091: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
9095: LD_EXP 29
9099: PPUSH
9100: LD_STRING DShar-Start-23
9102: PPUSH
9103: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
9107: LD_EXP 29
9111: PPUSH
9112: LD_STRING DShar-Start-24
9114: PPUSH
9115: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
9119: LD_EXP 29
9123: PPUSH
9124: LD_STRING DShar-Start-25
9126: PPUSH
9127: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
9131: LD_EXP 29
9135: PPUSH
9136: LD_STRING DShar-Start-26
9138: PPUSH
9139: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
9143: LD_EXP 21
9147: PPUSH
9148: LD_STRING DH-Start-27
9150: PPUSH
9151: CALL_OW 88
// if Kaia then
9155: LD_EXP 26
9159: IFFALSE 9201
// begin ComTurnUnit ( Heike , Kaia ) ;
9161: LD_EXP 21
9165: PPUSH
9166: LD_EXP 26
9170: PPUSH
9171: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
9175: LD_EXP 26
9179: PPUSH
9180: LD_STRING DK-Start-28
9182: PPUSH
9183: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
9187: LD_EXP 21
9191: PPUSH
9192: LD_STRING DH-Start-29
9194: PPUSH
9195: CALL_OW 88
// end else
9199: GO 9213
// Say ( Heike , DH-Start-a-28 ) ;
9201: LD_EXP 21
9205: PPUSH
9206: LD_STRING DH-Start-a-28
9208: PPUSH
9209: CALL_OW 88
// if Givi then
9213: LD_EXP 22
9217: IFFALSE 9452
// begin ComTurnUnit ( Heike , Givi ) ;
9219: LD_EXP 21
9223: PPUSH
9224: LD_EXP 22
9228: PPUSH
9229: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
9233: LD_EXP 22
9237: PPUSH
9238: LD_EXP 21
9242: PPUSH
9243: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
9247: LD_EXP 21
9251: PPUSH
9252: LD_STRING DH-Start-30
9254: PPUSH
9255: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
9259: LD_EXP 21
9263: PPUSH
9264: LD_STRING DH-Start-31
9266: PPUSH
9267: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
9271: LD_EXP 22
9275: PPUSH
9276: LD_STRING DG-Start-32
9278: PPUSH
9279: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
9283: LD_EXP 21
9287: PPUSH
9288: LD_STRING DH-Start-33
9290: PPUSH
9291: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
9295: LD_EXP 22
9299: PPUSH
9300: LD_STRING DG-Start-34
9302: PPUSH
9303: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
9307: LD_EXP 22
9311: PPUSH
9312: LD_STRING DG-Start-35
9314: PPUSH
9315: CALL_OW 88
// if Kurt and not dialogue_skipped then
9319: LD_EXP 32
9323: PUSH
9324: LD_OWVAR 59
9328: NOT
9329: AND
9330: IFFALSE 9361
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
9332: LD_EXP 32
9336: PPUSH
9337: LD_INT 28
9339: PPUSH
9340: LD_INT 13
9342: PPUSH
9343: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
9347: LD_EXP 32
9351: PPUSH
9352: LD_EXP 21
9356: PPUSH
9357: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
9361: LD_EXP 22
9365: PPUSH
9366: LD_STRING DG-Start-36
9368: PPUSH
9369: CALL_OW 88
// if Kurt then
9373: LD_EXP 32
9377: IFFALSE 9450
// begin if not Givi then
9379: LD_EXP 22
9383: NOT
9384: IFFALSE 9400
// Say ( Kurt , DKs-Start-37-a ) else
9386: LD_EXP 32
9390: PPUSH
9391: LD_STRING DKs-Start-37-a
9393: PPUSH
9394: CALL_OW 88
9398: GO 9412
// Say ( Kurt , DKs-Start-37 ) ;
9400: LD_EXP 32
9404: PPUSH
9405: LD_STRING DKs-Start-37
9407: PPUSH
9408: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
9412: LD_EXP 32
9416: PPUSH
9417: LD_STRING DKs-Start-38
9419: PPUSH
9420: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
9424: LD_EXP 21
9428: PPUSH
9429: LD_EXP 32
9433: PPUSH
9434: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
9438: LD_EXP 21
9442: PPUSH
9443: LD_STRING DH-Start-39
9445: PPUSH
9446: CALL_OW 88
// end ; end else
9450: GO 9481
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
9452: LD_EXP 34
9456: PPUSH
9457: LD_STRING DArm-Start-a-37
9459: PPUSH
9460: LD_STRING DArf-Start-a-37
9462: PPUSH
9463: CALL 1198 0 3
9467: IFFALSE 9481
// Say ( Heike , DH-Start-39 ) ;
9469: LD_EXP 21
9473: PPUSH
9474: LD_STRING DH-Start-39
9476: PPUSH
9477: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
9481: LD_INT 44
9483: PPUSH
9484: LD_INT 25
9486: PPUSH
9487: CALL_OW 428
9491: IFFALSE 9508
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
9493: LD_INT 44
9495: PPUSH
9496: LD_INT 25
9498: PPUSH
9499: CALL_OW 428
9503: PPUSH
9504: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
9508: LD_EXP 30
9512: PPUSH
9513: LD_INT 5
9515: PPUSH
9516: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
9520: LD_EXP 30
9524: PPUSH
9525: LD_INT 44
9527: PPUSH
9528: LD_INT 25
9530: PPUSH
9531: LD_INT 0
9533: PPUSH
9534: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
9538: LD_EXP 30
9542: PPUSH
9543: LD_INT 29
9545: PPUSH
9546: LD_INT 12
9548: PPUSH
9549: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9553: LD_INT 35
9555: PPUSH
9556: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9560: LD_OWVAR 59
9564: PUSH
9565: LD_EXP 21
9569: PPUSH
9570: LD_EXP 30
9574: PPUSH
9575: CALL_OW 296
9579: PUSH
9580: LD_INT 8
9582: LESS
9583: OR
9584: PUSH
9585: LD_EXP 30
9589: PPUSH
9590: LD_INT 26
9592: PPUSH
9593: LD_INT 9
9595: PPUSH
9596: CALL_OW 297
9600: PUSH
9601: LD_INT 6
9603: LESS
9604: OR
9605: IFFALSE 9553
// Say ( Olaf , DO-Scout-1 ) ;
9607: LD_EXP 30
9611: PPUSH
9612: LD_STRING DO-Scout-1
9614: PPUSH
9615: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9619: LD_EXP 30
9623: PPUSH
9624: LD_EXP 21
9628: PPUSH
9629: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9633: LD_ADDR_VAR 0 2
9637: PUSH
9638: LD_VAR 0 6
9642: PUSH
9643: LD_EXP 34
9647: UNION
9648: PUSH
9649: FOR_IN
9650: IFFALSE 9668
// ComTurnUnit ( i , Olaf ) ;
9652: LD_VAR 0 2
9656: PPUSH
9657: LD_EXP 30
9661: PPUSH
9662: CALL_OW 119
9666: GO 9649
9668: POP
9669: POP
// wait ( 0 0$0.3 ) ;
9670: LD_INT 10
9672: PPUSH
9673: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9677: LD_EXP 21
9681: PPUSH
9682: LD_EXP 30
9686: PPUSH
9687: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
9691: LD_EXP 21
9695: PPUSH
9696: LD_EXP 30
9700: PPUSH
9701: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
9705: LD_EXP 21
9709: PPUSH
9710: LD_STRING DH-Scout-2
9712: PPUSH
9713: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
9717: LD_EXP 30
9721: PPUSH
9722: LD_STRING DO-Scout-3
9724: PPUSH
9725: CALL_OW 88
// if Mike and Givi then
9729: LD_EXP 23
9733: PUSH
9734: LD_EXP 22
9738: AND
9739: IFFALSE 9755
// Say ( Olaf , DO-Scout-4 ) else
9741: LD_EXP 30
9745: PPUSH
9746: LD_STRING DO-Scout-4
9748: PPUSH
9749: CALL_OW 88
9753: GO 9855
// begin if Mike then
9755: LD_EXP 23
9759: IFFALSE 9787
// begin Say ( Olaf , DO-Scout-a-4 ) ;
9761: LD_EXP 30
9765: PPUSH
9766: LD_STRING DO-Scout-a-4
9768: PPUSH
9769: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
9773: LD_EXP 21
9777: PPUSH
9778: LD_STRING DH-Scout-a-5
9780: PPUSH
9781: CALL_OW 88
// end else
9785: GO 9855
// if Givi then
9787: LD_EXP 22
9791: IFFALSE 9819
// begin Say ( Olaf , DO-Scout-b-4 ) ;
9793: LD_EXP 30
9797: PPUSH
9798: LD_STRING DO-Scout-b-4
9800: PPUSH
9801: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
9805: LD_EXP 21
9809: PPUSH
9810: LD_STRING DH-Scout-b-5
9812: PPUSH
9813: CALL_OW 88
// end else
9817: GO 9855
// begin Say ( Olaf , DO-Scout-f-4 ) ;
9819: LD_EXP 30
9823: PPUSH
9824: LD_STRING DO-Scout-f-4
9826: PPUSH
9827: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
9831: LD_EXP 21
9835: PPUSH
9836: LD_STRING DH-Scout-f-5
9838: PPUSH
9839: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
9843: LD_EXP 30
9847: PPUSH
9848: LD_STRING DO-Scout-f-6
9850: PPUSH
9851: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
9855: LD_EXP 21
9859: PPUSH
9860: LD_STRING DH-Scout-5
9862: PPUSH
9863: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
9867: LD_EXP 30
9871: PPUSH
9872: LD_STRING DO-Scout-6
9874: PPUSH
9875: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
9879: LD_EXP 30
9883: PPUSH
9884: LD_STRING DO-Scout-7
9886: PPUSH
9887: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
9891: LD_EXP 21
9895: PPUSH
9896: LD_STRING DH-Scout-8
9898: PPUSH
9899: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
9903: LD_EXP 21
9907: PPUSH
9908: LD_STRING DH-Scout-9
9910: PPUSH
9911: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
9915: LD_EXP 30
9919: PPUSH
9920: LD_STRING DO-Scout-10
9922: PPUSH
9923: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
9927: LD_EXP 30
9931: PPUSH
9932: LD_STRING DO-Scout-12
9934: PPUSH
9935: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
9939: LD_EXP 30
9943: PPUSH
9944: LD_STRING DO-Scout-13
9946: PPUSH
9947: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
9951: LD_EXP 30
9955: PPUSH
9956: LD_STRING DO-Scout-14
9958: PPUSH
9959: CALL_OW 88
// if Givi then
9963: LD_EXP 22
9967: IFFALSE 9993
// begin Say ( Givi , DG-Scout-15 ) ;
9969: LD_EXP 22
9973: PPUSH
9974: LD_STRING DG-Scout-15
9976: PPUSH
9977: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
9981: LD_EXP 26
9985: PPUSH
9986: LD_STRING DK-Scout-16
9988: PPUSH
9989: CALL_OW 88
// end ; if not dialogue_skipped then
9993: LD_OWVAR 59
9997: NOT
9998: IFFALSE 10119
// begin async ;
10000: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
10001: LD_EXP 30
10005: PPUSH
10006: LD_STRING DO-Scout-17
10008: PPUSH
10009: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10013: LD_INT 55
10015: PPUSH
10016: LD_INT 77
10018: PPUSH
10019: LD_INT 2
10021: PPUSH
10022: LD_INT 6
10024: NEG
10025: PPUSH
10026: CALL 1147 0 4
// wait ( 10 ) ;
10030: LD_INT 10
10032: PPUSH
10033: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
10037: LD_INT 55
10039: PPUSH
10040: LD_INT 77
10042: PPUSH
10043: CALL_OW 84
// wait ( 0 0$10 ) ;
10047: LD_INT 350
10049: PPUSH
10050: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
10054: LD_EXP 30
10058: PPUSH
10059: LD_STRING DO-Scout-18
10061: PPUSH
10062: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10066: LD_INT 204
10068: PPUSH
10069: LD_INT 107
10071: PPUSH
10072: LD_INT 2
10074: PPUSH
10075: LD_INT 12
10077: NEG
10078: PPUSH
10079: CALL 1147 0 4
// wait ( 10 ) ;
10083: LD_INT 10
10085: PPUSH
10086: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
10090: LD_INT 204
10092: PPUSH
10093: LD_INT 107
10095: PPUSH
10096: CALL_OW 84
// wait ( 0 0$10 ) ;
10100: LD_INT 350
10102: PPUSH
10103: CALL_OW 67
// sync ;
10107: SYNC
// CenterNowOnUnits ( Heike ) ;
10108: LD_EXP 21
10112: PPUSH
10113: CALL_OW 87
// end else
10117: GO 10153
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10119: LD_INT 55
10121: PPUSH
10122: LD_INT 77
10124: PPUSH
10125: LD_INT 2
10127: PPUSH
10128: LD_INT 6
10130: NEG
10131: PPUSH
10132: CALL 1147 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10136: LD_INT 204
10138: PPUSH
10139: LD_INT 107
10141: PPUSH
10142: LD_INT 2
10144: PPUSH
10145: LD_INT 12
10147: NEG
10148: PPUSH
10149: CALL 1147 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
10153: LD_EXP 30
10157: PPUSH
10158: LD_STRING DO-Scout-19
10160: PPUSH
10161: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
10165: LD_EXP 30
10169: PPUSH
10170: LD_STRING DO-Scout-20
10172: PPUSH
10173: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
10177: LD_EXP 21
10181: PPUSH
10182: LD_STRING DH-Scout-21
10184: PPUSH
10185: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
10189: LD_EXP 21
10193: PPUSH
10194: LD_STRING DH-Scout-22
10196: PPUSH
10197: CALL_OW 88
// InGameOff ;
10201: CALL_OW 9
// if heikeSecondSquad then
10205: LD_EXP 34
10209: IFFALSE 10223
// ForceSleep ( heikeSecondSquad , false ) ;
10211: LD_EXP 34
10215: PPUSH
10216: LD_INT 0
10218: PPUSH
10219: CALL_OW 585
// if Givi then
10223: LD_EXP 22
10227: IFFALSE 10242
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
10229: LD_INT 13
10231: PPUSH
10232: LD_INT 2
10234: PPUSH
10235: LD_INT 1
10237: PPUSH
10238: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
10242: LD_STRING Road
10244: PPUSH
10245: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
10249: LD_ADDR_VAR 0 2
10253: PUSH
10254: LD_INT 22
10256: PUSH
10257: LD_INT 5
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: LD_INT 21
10266: PUSH
10267: LD_INT 2
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PPUSH
10278: CALL_OW 69
10282: PUSH
10283: FOR_IN
10284: IFFALSE 10300
// SetSide ( i , 2 ) ;
10286: LD_VAR 0 2
10290: PPUSH
10291: LD_INT 2
10293: PPUSH
10294: CALL_OW 235
10298: GO 10283
10300: POP
10301: POP
// SaveForQuickRestart ;
10302: CALL_OW 22
// music_class := music_auto ;
10306: LD_ADDR_OWVAR 72
10310: PUSH
10311: LD_INT 0
10313: ST_TO_ADDR
// end ;
10314: LD_VAR 0 1
10318: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
10319: LD_INT 2
10321: PPUSH
10322: LD_INT 9
10324: PPUSH
10325: CALL_OW 294
10329: IFFALSE 10694
10331: GO 10333
10333: DISABLE
// begin DialogueOn ;
10334: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
10338: LD_INT 111
10340: PPUSH
10341: LD_INT 72
10343: PPUSH
10344: LD_INT 2
10346: PPUSH
10347: LD_INT 20
10349: NEG
10350: PPUSH
10351: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
10355: LD_INT 111
10357: PPUSH
10358: LD_INT 72
10360: PPUSH
10361: LD_INT 2
10363: PPUSH
10364: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
10368: LD_INT 111
10370: PPUSH
10371: LD_INT 72
10373: PPUSH
10374: CALL_OW 86
// if IsOk ( Kamil ) then
10378: LD_EXP 25
10382: PPUSH
10383: CALL_OW 302
10387: IFFALSE 10504
// begin Say ( Kamil , DKam-Cross-1 ) ;
10389: LD_EXP 25
10393: PPUSH
10394: LD_STRING DKam-Cross-1
10396: PPUSH
10397: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
10401: LD_EXP 25
10405: PPUSH
10406: LD_STRING DKam-Cross-2
10408: PPUSH
10409: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
10413: LD_EXP 25
10417: PPUSH
10418: LD_STRING DKam-Cross-3
10420: PPUSH
10421: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
10425: LD_EXP 25
10429: PPUSH
10430: LD_STRING DKam-Cross-4
10432: PPUSH
10433: CALL_OW 88
// if IsOk ( Ibrahim ) then
10437: LD_EXP 24
10441: PPUSH
10442: CALL_OW 302
10446: IFFALSE 10502
// begin if ibrahimJoinedIn04 then
10448: LD_EXP 4
10452: IFFALSE 10466
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10454: LD_EXP 24
10458: PPUSH
10459: LD_STRING DI-Cross-b-5
10461: PPUSH
10462: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10466: LD_EXP 24
10470: PPUSH
10471: LD_STRING DI-Cross-b-6
10473: PPUSH
10474: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10478: LD_EXP 24
10482: PPUSH
10483: LD_STRING DI-Cross-b-7
10485: PPUSH
10486: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
10490: LD_EXP 25
10494: PPUSH
10495: LD_STRING DKam-Cross-8
10497: PPUSH
10498: CALL_OW 88
// end ; end else
10502: GO 10662
// if IsOk ( Sophia ) then
10504: LD_EXP 27
10508: PPUSH
10509: CALL_OW 302
10513: IFFALSE 10630
// begin Say ( Sophia , DS-Cross-1 ) ;
10515: LD_EXP 27
10519: PPUSH
10520: LD_STRING DS-Cross-1
10522: PPUSH
10523: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
10527: LD_EXP 27
10531: PPUSH
10532: LD_STRING DS-Cross-2
10534: PPUSH
10535: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
10539: LD_EXP 27
10543: PPUSH
10544: LD_STRING DS-Cross-3
10546: PPUSH
10547: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
10551: LD_EXP 27
10555: PPUSH
10556: LD_STRING DS-Cross-4
10558: PPUSH
10559: CALL_OW 88
// if IsOk ( Ibrahim ) then
10563: LD_EXP 24
10567: PPUSH
10568: CALL_OW 302
10572: IFFALSE 10628
// begin if ibrahimJoinedIn04 then
10574: LD_EXP 4
10578: IFFALSE 10592
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10580: LD_EXP 24
10584: PPUSH
10585: LD_STRING DI-Cross-b-5
10587: PPUSH
10588: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10592: LD_EXP 24
10596: PPUSH
10597: LD_STRING DI-Cross-b-6
10599: PPUSH
10600: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10604: LD_EXP 24
10608: PPUSH
10609: LD_STRING DI-Cross-b-7
10611: PPUSH
10612: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10616: LD_EXP 27
10620: PPUSH
10621: LD_STRING DS-Cross-8
10623: PPUSH
10624: CALL_OW 88
// end ; end else
10628: GO 10662
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10630: LD_EXP 34
10634: PPUSH
10635: LD_INT 50
10637: PUSH
10638: EMPTY
10639: LIST
10640: PPUSH
10641: CALL_OW 72
10645: IFFALSE 10662
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10647: LD_EXP 34
10651: PPUSH
10652: LD_STRING DArm-Cross-c-1
10654: PPUSH
10655: LD_STRING DArf-Cross-c-1
10657: PPUSH
10658: CALL 1198 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10662: LD_INT 85
10664: PPUSH
10665: LD_INT 2
10667: PPUSH
10668: LD_INT 1
10670: PPUSH
10671: CALL_OW 322
// DialogueOff ;
10675: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
10679: LD_STRING Crane
10681: PPUSH
10682: CALL_OW 337
// spottedCrossRoad := true ;
10686: LD_ADDR_EXP 8
10690: PUSH
10691: LD_INT 1
10693: ST_TO_ADDR
// end ;
10694: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
10695: LD_INT 22
10697: PUSH
10698: LD_INT 2
10700: PUSH
10701: EMPTY
10702: LIST
10703: LIST
10704: PUSH
10705: LD_INT 2
10707: PUSH
10708: LD_INT 30
10710: PUSH
10711: LD_INT 0
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: LD_INT 30
10720: PUSH
10721: LD_INT 1
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: LIST
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: PPUSH
10737: CALL_OW 69
10741: PUSH
10742: LD_EXP 26
10746: PPUSH
10747: CALL_OW 302
10751: PUSH
10752: LD_EXP 34
10756: OR
10757: AND
10758: IFFALSE 10970
10760: GO 10762
10762: DISABLE
// begin DialogueOn ;
10763: CALL_OW 6
// if Kaia then
10767: LD_EXP 26
10771: IFFALSE 10784
// CenterNowOnUnits ( Kaia ) else
10773: LD_EXP 26
10777: PPUSH
10778: CALL_OW 87
10782: GO 10793
// CenterNowOnUnits ( Heike ) ;
10784: LD_EXP 21
10788: PPUSH
10789: CALL_OW 87
// if IsOk ( Kaia ) then
10793: LD_EXP 26
10797: PPUSH
10798: CALL_OW 302
10802: IFFALSE 10818
// Say ( Kaia , DK-Cam-1 ) else
10804: LD_EXP 26
10808: PPUSH
10809: LD_STRING DK-Cam-1
10811: PPUSH
10812: CALL_OW 88
10816: GO 10833
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
10818: LD_EXP 34
10822: PPUSH
10823: LD_STRING DArm-Cam-1
10825: PPUSH
10826: LD_STRING DArf-Cam-1
10828: PPUSH
10829: CALL 1198 0 3
// Say ( Heike , DH-Cam-2 ) ;
10833: LD_EXP 21
10837: PPUSH
10838: LD_STRING DH-Cam-2
10840: PPUSH
10841: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
10845: LD_EXP 21
10849: PPUSH
10850: LD_STRING DH-Cam-3
10852: PPUSH
10853: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10857: LD_EXP 21
10861: PPUSH
10862: LD_STRING DH-Cam-4
10864: PPUSH
10865: CALL_OW 88
// if IsOk ( Kaia ) then
10869: LD_EXP 26
10873: PPUSH
10874: CALL_OW 302
10878: IFFALSE 10894
// Say ( Kaia , DK-Cam-5 ) else
10880: LD_EXP 26
10884: PPUSH
10885: LD_STRING DK-Cam-5
10887: PPUSH
10888: CALL_OW 88
10892: GO 10909
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
10894: LD_EXP 34
10898: PPUSH
10899: LD_STRING DArm-Cam-5
10901: PPUSH
10902: LD_STRING DArf-Cam-5
10904: PPUSH
10905: CALL 1198 0 3
// Say ( Olaf , DO-Cam-6 ) ;
10909: LD_EXP 30
10913: PPUSH
10914: LD_STRING DO-Cam-6
10916: PPUSH
10917: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
10921: LD_EXP 30
10925: PPUSH
10926: LD_STRING DO-Cam-7
10928: PPUSH
10929: CALL_OW 88
// DialogueOff ;
10933: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
10937: LD_STRING Radar
10939: PPUSH
10940: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
10944: LD_INT 6
10946: PPUSH
10947: LD_INT 2
10949: PPUSH
10950: LD_INT 1
10952: PPUSH
10953: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
10957: LD_INT 20
10959: PPUSH
10960: LD_INT 2
10962: PPUSH
10963: LD_INT 1
10965: PPUSH
10966: CALL_OW 324
// end ;
10970: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
10971: LD_INT 22
10973: PUSH
10974: LD_INT 2
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PUSH
10981: LD_INT 2
10983: PUSH
10984: LD_INT 34
10986: PUSH
10987: LD_INT 30
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: PUSH
10994: LD_INT 35
10996: PUSH
10997: LD_INT 30
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: LIST
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: PPUSH
11013: CALL_OW 69
11017: IFFALSE 11029
11019: GO 11021
11021: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
11022: LD_STRING RadarDone
11024: PPUSH
11025: CALL_OW 337
11029: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
11030: LD_INT 22
11032: PUSH
11033: LD_INT 2
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: PUSH
11040: LD_INT 34
11042: PUSH
11043: LD_INT 88
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PPUSH
11054: CALL_OW 69
11058: IFFALSE 11070
11060: GO 11062
11062: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
11063: LD_STRING CraneDone
11065: PPUSH
11066: CALL_OW 337
11070: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
11071: LD_EXP 30
11075: PPUSH
11076: CALL_OW 302
11080: PUSH
11081: LD_EXP 33
11085: PPUSH
11086: CALL_OW 302
11090: AND
11091: PUSH
11092: LD_INT 6
11094: PPUSH
11095: LD_INT 2
11097: PPUSH
11098: CALL_OW 321
11102: PUSH
11103: LD_INT 2
11105: EQUAL
11106: AND
11107: PUSH
11108: LD_EXP 33
11112: PPUSH
11113: LD_EXP 21
11117: PPUSH
11118: CALL_OW 296
11122: PUSH
11123: LD_INT 10
11125: LESS
11126: PUSH
11127: LD_EXP 33
11131: PPUSH
11132: CALL_OW 310
11136: OR
11137: AND
11138: IFFALSE 11352
11140: GO 11142
11142: DISABLE
// begin DialogueOn ;
11143: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
11147: LD_EXP 33
11151: PPUSH
11152: LD_STRING DA-RC-1
11154: PPUSH
11155: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
11159: LD_EXP 33
11163: PPUSH
11164: LD_STRING DA-RC-2
11166: PPUSH
11167: CALL_OW 88
// if IsOk ( Kaia ) then
11171: LD_EXP 26
11175: PPUSH
11176: CALL_OW 302
11180: IFFALSE 11254
// begin Say ( Kaia , DK-RC-3 ) ;
11182: LD_EXP 26
11186: PPUSH
11187: LD_STRING DK-RC-3
11189: PPUSH
11190: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
11194: LD_EXP 33
11198: PPUSH
11199: LD_STRING DA-RC-4
11201: PPUSH
11202: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
11206: LD_EXP 26
11210: PPUSH
11211: LD_STRING DK-RC-5
11213: PPUSH
11214: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
11218: LD_EXP 33
11222: PPUSH
11223: LD_STRING DA-RC-6
11225: PPUSH
11226: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
11230: LD_EXP 26
11234: PPUSH
11235: LD_STRING DK-RC-7
11237: PPUSH
11238: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
11242: LD_EXP 33
11246: PPUSH
11247: LD_STRING DA-RC-8
11249: PPUSH
11250: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
11254: LD_EXP 21
11258: PPUSH
11259: LD_STRING DH-RC-9
11261: PPUSH
11262: CALL_OW 88
// if IsOk ( Markov ) then
11266: LD_EXP 28
11270: PPUSH
11271: CALL_OW 302
11275: IFFALSE 11303
// begin Say ( Markov , DMar-RC-10 ) ;
11277: LD_EXP 28
11281: PPUSH
11282: LD_STRING DMar-RC-10
11284: PPUSH
11285: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
11289: LD_EXP 28
11293: PPUSH
11294: LD_STRING DMar-RC-11
11296: PPUSH
11297: CALL_OW 88
// end else
11301: GO 11315
// begin Say ( Olaf , DO-RC-a-10 ) ;
11303: LD_EXP 30
11307: PPUSH
11308: LD_STRING DO-RC-a-10
11310: PPUSH
11311: CALL_OW 88
// end ; DialogueOff ;
11315: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
11319: LD_STRING RemoteControl
11321: PPUSH
11322: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
11326: LD_INT 15
11328: PPUSH
11329: LD_INT 2
11331: PPUSH
11332: LD_INT 1
11334: PPUSH
11335: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
11339: LD_INT 22
11341: PPUSH
11342: LD_INT 2
11344: PPUSH
11345: LD_INT 1
11347: PPUSH
11348: CALL_OW 324
// end ;
11352: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
11353: LD_INT 12
11355: PPUSH
11356: LD_INT 22
11358: PUSH
11359: LD_INT 2
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PPUSH
11366: CALL_OW 70
11370: IFFALSE 11737
11372: GO 11374
11374: DISABLE
11375: LD_INT 0
11377: PPUSH
// begin PrepareWestBase ;
11378: CALL 3916 0 0
// westBaseSpotted := true ;
11382: LD_ADDR_EXP 5
11386: PUSH
11387: LD_INT 1
11389: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11390: LD_INT 70
11392: PPUSH
11393: CALL_OW 67
// InGameOn ;
11397: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
11401: LD_INT 56
11403: PPUSH
11404: LD_INT 77
11406: PPUSH
11407: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
11411: LD_INT 56
11413: PPUSH
11414: LD_INT 77
11416: PPUSH
11417: LD_INT 2
11419: PPUSH
11420: LD_INT 12
11422: NEG
11423: PPUSH
11424: CALL_OW 330
// wait ( 0 0$2 ) ;
11428: LD_INT 70
11430: PPUSH
11431: CALL_OW 67
// DialogueOn ;
11435: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
11439: LD_EXP 21
11443: PPUSH
11444: LD_STRING DH-Rbase-1
11446: PPUSH
11447: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
11451: LD_EXP 26
11455: PPUSH
11456: LD_STRING DK-Rbase-2
11458: PPUSH
11459: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
11463: LD_EXP 26
11467: PPUSH
11468: LD_STRING DK-Rbase-3
11470: PPUSH
11471: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
11475: LD_EXP 26
11479: PPUSH
11480: LD_STRING DK-Rbase-4
11482: PPUSH
11483: CALL_OW 88
// DialogueOff ;
11487: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
11491: LD_INT 56
11493: PPUSH
11494: LD_INT 77
11496: PPUSH
11497: LD_INT 2
11499: PPUSH
11500: CALL_OW 331
// InGameOff ;
11504: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
11508: LD_INT 35
11510: PPUSH
11511: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
11515: LD_EXP 42
11519: NOT
11520: PUSH
11521: LD_EXP 43
11525: NOT
11526: AND
11527: IFFALSE 11508
// wait ( 0 0$2 ) ;
11529: LD_INT 70
11531: PPUSH
11532: CALL_OW 67
// if IsOk ( Kaia ) then
11536: LD_EXP 26
11540: PPUSH
11541: CALL_OW 302
11545: IFFALSE 11660
// begin DialogueOn ;
11547: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
11551: LD_INT 56
11553: PPUSH
11554: LD_INT 81
11556: PPUSH
11557: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11561: LD_EXP 26
11565: PPUSH
11566: LD_STRING DK-Rbase-5
11568: PPUSH
11569: CALL_OW 88
// if IsOk ( Givi ) then
11573: LD_EXP 22
11577: PPUSH
11578: CALL_OW 302
11582: IFFALSE 11656
// begin Say ( Givi , DG-Rbase-6 ) ;
11584: LD_EXP 22
11588: PPUSH
11589: LD_STRING DG-Rbase-6
11591: PPUSH
11592: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11596: LD_EXP 22
11600: PPUSH
11601: LD_STRING DG-Rbase-7
11603: PPUSH
11604: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11608: LD_EXP 26
11612: PPUSH
11613: LD_STRING DK-Rbase-8
11615: PPUSH
11616: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11620: LD_EXP 22
11624: PPUSH
11625: LD_STRING DG-Rbase-9
11627: PPUSH
11628: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11632: LD_EXP 22
11636: PPUSH
11637: LD_STRING DG-Rbase-10
11639: PPUSH
11640: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11644: LD_EXP 26
11648: PPUSH
11649: LD_STRING DK-Rbase-11
11651: PPUSH
11652: CALL_OW 88
// end ; DialogueOff ;
11656: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11660: LD_ADDR_VAR 0 1
11664: PUSH
11665: LD_INT 12
11667: PPUSH
11668: LD_INT 22
11670: PUSH
11671: LD_INT 3
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: PUSH
11678: LD_INT 21
11680: PUSH
11681: LD_INT 3
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: PPUSH
11692: CALL_OW 70
11696: PUSH
11697: FOR_IN
11698: IFFALSE 11714
// SetSide ( i , 2 ) ;
11700: LD_VAR 0 1
11704: PPUSH
11705: LD_INT 2
11707: PPUSH
11708: CALL_OW 235
11712: GO 11697
11714: POP
11715: POP
// westBaseCaptured := true ;
11716: LD_ADDR_EXP 9
11720: PUSH
11721: LD_INT 1
11723: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
11724: LD_INT 0
11726: PPUSH
11727: LD_INT 2
11729: PPUSH
11730: LD_INT 1
11732: PPUSH
11733: CALL_OW 324
// end ;
11737: PPOPN 1
11739: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
11740: LD_EXP 38
11744: NOT
11745: PUSH
11746: LD_INT 10
11748: PPUSH
11749: CALL_OW 255
11753: PUSH
11754: LD_INT 2
11756: EQUAL
11757: OR
11758: IFFALSE 11895
11760: GO 11762
11762: DISABLE
// begin DialogueOn ;
11763: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
11767: LD_EXP 21
11771: PPUSH
11772: LD_STRING DH-Goal-1
11774: PPUSH
11775: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
11779: LD_EXP 29
11783: PPUSH
11784: LD_STRING DShar-Goal-2
11786: PPUSH
11787: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
11791: LD_EXP 21
11795: PPUSH
11796: LD_STRING DH-Goal-3
11798: PPUSH
11799: CALL_OW 88
// if reinforcementsAllowed then
11803: LD_EXP 14
11807: IFFALSE 11833
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
11809: LD_EXP 29
11813: PPUSH
11814: LD_STRING DShar-Goal-4
11816: PPUSH
11817: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
11821: LD_EXP 21
11825: PPUSH
11826: LD_STRING DH-Goal-5
11828: PPUSH
11829: CALL_OW 88
// end ; DialogueOff ;
11833: CALL_OW 7
// eastBaseCaptured := true ;
11837: LD_ADDR_EXP 10
11841: PUSH
11842: LD_INT 1
11844: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
11845: LD_STRING BaseCaptured
11847: PPUSH
11848: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
11852: LD_INT 10
11854: PPUSH
11855: LD_INT 2
11857: PPUSH
11858: CALL_OW 235
// if not reinforcementsAllowed then
11862: LD_EXP 14
11866: NOT
11867: IFFALSE 11871
// exit ;
11869: GO 11895
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
11871: LD_INT 21000
11873: PUSH
11874: LD_INT 1050
11876: NEG
11877: PPUSH
11878: LD_INT 1050
11880: PPUSH
11881: CALL_OW 12
11885: PLUS
11886: PPUSH
11887: CALL_OW 67
// PrepareReinforcements ;
11891: CALL 2174 0 0
// end ;
11895: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
11896: LD_INT 22
11898: PUSH
11899: LD_INT 2
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PUSH
11906: LD_INT 30
11908: PUSH
11909: LD_INT 13
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: PPUSH
11920: CALL_OW 69
11924: IFFALSE 11941
11926: GO 11928
11928: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
11929: LD_EXP 22
11933: PPUSH
11934: LD_STRING DG-Lab-1
11936: PPUSH
11937: CALL_OW 88
// end ;
11941: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
11942: LD_INT 5
11944: PPUSH
11945: LD_INT 2
11947: PPUSH
11948: CALL_OW 321
11952: PUSH
11953: LD_INT 2
11955: EQUAL
11956: PUSH
11957: LD_EXP 22
11961: PPUSH
11962: CALL_OW 302
11966: AND
11967: IFFALSE 12028
11969: GO 11971
11971: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
11972: LD_EXP 22
11976: PPUSH
11977: LD_STRING DG-Stim-1
11979: PPUSH
11980: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
11984: LD_EXP 21
11988: PPUSH
11989: LD_STRING DH-Stim-2
11991: PPUSH
11992: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
11996: LD_EXP 22
12000: PPUSH
12001: LD_STRING DG-Stim-3
12003: PPUSH
12004: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
12008: LD_EXP 21
12012: PPUSH
12013: LD_STRING DH-Stim-4
12015: PPUSH
12016: CALL_OW 88
// drugsResearched := true ;
12020: LD_ADDR_EXP 11
12024: PUSH
12025: LD_INT 1
12027: ST_TO_ADDR
// end ;
12028: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
12029: LD_EXP 11
12033: IFFALSE 12345
12035: GO 12037
12037: DISABLE
12038: LD_INT 0
12040: PPUSH
12041: PPUSH
12042: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12043: LD_ADDR_VAR 0 2
12047: PUSH
12048: LD_EXP 21
12052: PUSH
12053: LD_EXP 22
12057: PUSH
12058: LD_EXP 30
12062: PUSH
12063: LD_EXP 28
12067: PUSH
12068: LD_EXP 26
12072: PUSH
12073: LD_EXP 27
12077: PUSH
12078: LD_EXP 32
12082: PUSH
12083: LD_EXP 25
12087: PUSH
12088: LD_EXP 23
12092: PUSH
12093: LD_EXP 24
12097: PUSH
12098: LD_EXP 33
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12116: LD_ADDR_VAR 0 3
12120: PUSH
12121: LD_STRING H
12123: PUSH
12124: LD_STRING G
12126: PUSH
12127: LD_STRING O
12129: PUSH
12130: LD_STRING Mar
12132: PUSH
12133: LD_STRING K
12135: PUSH
12136: LD_STRING S
12138: PUSH
12139: LD_STRING Ks
12141: PUSH
12142: LD_STRING Kam
12144: PUSH
12145: LD_STRING M
12147: PUSH
12148: LD_STRING I
12150: PUSH
12151: LD_STRING A
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12167: LD_INT 35
12169: PPUSH
12170: CALL_OW 67
// for i := tmp downto 1 do
12174: LD_ADDR_VAR 0 1
12178: PUSH
12179: DOUBLE
12180: LD_VAR 0 2
12184: INC
12185: ST_TO_ADDR
12186: LD_INT 1
12188: PUSH
12189: FOR_DOWNTO
12190: IFFALSE 12336
// if GetLives ( tmp [ i ] ) < 250 then
12192: LD_VAR 0 2
12196: PUSH
12197: LD_VAR 0 1
12201: ARRAY
12202: PPUSH
12203: CALL_OW 256
12207: PUSH
12208: LD_INT 250
12210: LESS
12211: IFFALSE 12334
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
12213: LD_ADDR_EXP 19
12217: PUSH
12218: LD_EXP 19
12222: PUSH
12223: LD_INT 1
12225: PLUS
12226: ST_TO_ADDR
// DialogueOn ;
12227: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
12231: LD_VAR 0 2
12235: PUSH
12236: LD_VAR 0 1
12240: ARRAY
12241: PPUSH
12242: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
12246: LD_VAR 0 2
12250: PUSH
12251: LD_VAR 0 1
12255: ARRAY
12256: PPUSH
12257: LD_STRING D
12259: PUSH
12260: LD_VAR 0 3
12264: PUSH
12265: LD_VAR 0 1
12269: ARRAY
12270: STR
12271: PUSH
12272: LD_STRING -Stim-a-1
12274: STR
12275: PPUSH
12276: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
12280: LD_ADDR_VAR 0 2
12284: PUSH
12285: LD_VAR 0 2
12289: PPUSH
12290: LD_VAR 0 1
12294: PPUSH
12295: CALL_OW 3
12299: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12300: LD_ADDR_VAR 0 3
12304: PUSH
12305: LD_VAR 0 3
12309: PPUSH
12310: LD_VAR 0 1
12314: PPUSH
12315: CALL_OW 3
12319: ST_TO_ADDR
// drugsTested := true ;
12320: LD_ADDR_EXP 6
12324: PUSH
12325: LD_INT 1
12327: ST_TO_ADDR
// DialogueOff ;
12328: CALL_OW 7
// break ;
12332: GO 12336
// end ;
12334: GO 12189
12336: POP
12337: POP
// until not tmp ;
12338: LD_VAR 0 2
12342: NOT
12343: IFFALSE 12167
// end ;
12345: PPOPN 3
12347: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
12348: LD_INT 22
12350: PUSH
12351: LD_INT 2
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: PUSH
12358: LD_INT 34
12360: PUSH
12361: LD_INT 31
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PPUSH
12372: CALL_OW 69
12376: PUSH
12377: LD_INT 22
12379: PUSH
12380: LD_INT 2
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: PUSH
12387: LD_INT 33
12389: PUSH
12390: LD_INT 2
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PPUSH
12401: CALL_OW 69
12405: AND
12406: IFFALSE 12419
12408: GO 12410
12410: DISABLE
// remoteControlConstructed := true ;
12411: LD_ADDR_EXP 12
12415: PUSH
12416: LD_INT 1
12418: ST_TO_ADDR
12419: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
12420: LD_EXP 12
12424: IFFALSE 12724
12426: GO 12428
12428: DISABLE
12429: LD_INT 0
12431: PPUSH
12432: PPUSH
12433: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12434: LD_ADDR_VAR 0 2
12438: PUSH
12439: LD_EXP 21
12443: PUSH
12444: LD_EXP 22
12448: PUSH
12449: LD_EXP 30
12453: PUSH
12454: LD_EXP 28
12458: PUSH
12459: LD_EXP 26
12463: PUSH
12464: LD_EXP 27
12468: PUSH
12469: LD_EXP 32
12473: PUSH
12474: LD_EXP 25
12478: PUSH
12479: LD_EXP 23
12483: PUSH
12484: LD_EXP 24
12488: PUSH
12489: LD_EXP 33
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12507: LD_ADDR_VAR 0 3
12511: PUSH
12512: LD_STRING H
12514: PUSH
12515: LD_STRING G
12517: PUSH
12518: LD_STRING O
12520: PUSH
12521: LD_STRING Mar
12523: PUSH
12524: LD_STRING K
12526: PUSH
12527: LD_STRING S
12529: PUSH
12530: LD_STRING Ks
12532: PUSH
12533: LD_STRING Kam
12535: PUSH
12536: LD_STRING M
12538: PUSH
12539: LD_STRING I
12541: PUSH
12542: LD_STRING A
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12558: LD_INT 35
12560: PPUSH
12561: CALL_OW 67
// for i := tmp downto 1 do
12565: LD_ADDR_VAR 0 1
12569: PUSH
12570: DOUBLE
12571: LD_VAR 0 2
12575: INC
12576: ST_TO_ADDR
12577: LD_INT 1
12579: PUSH
12580: FOR_DOWNTO
12581: IFFALSE 12715
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
12583: LD_VAR 0 2
12587: PUSH
12588: LD_VAR 0 1
12592: ARRAY
12593: PPUSH
12594: CALL_OW 257
12598: PUSH
12599: LD_INT 3
12601: EQUAL
12602: PUSH
12603: LD_VAR 0 2
12607: PUSH
12608: LD_VAR 0 1
12612: ARRAY
12613: PPUSH
12614: CALL_OW 432
12618: AND
12619: IFFALSE 12713
// begin DialogueOn ;
12621: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12625: LD_VAR 0 2
12629: PUSH
12630: LD_VAR 0 1
12634: ARRAY
12635: PPUSH
12636: LD_STRING D
12638: PUSH
12639: LD_VAR 0 3
12643: PUSH
12644: LD_VAR 0 1
12648: ARRAY
12649: STR
12650: PUSH
12651: LD_STRING -RC-a-1
12653: STR
12654: PPUSH
12655: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12659: LD_ADDR_VAR 0 2
12663: PUSH
12664: LD_VAR 0 2
12668: PPUSH
12669: LD_VAR 0 1
12673: PPUSH
12674: CALL_OW 3
12678: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12679: LD_ADDR_VAR 0 3
12683: PUSH
12684: LD_VAR 0 3
12688: PPUSH
12689: LD_VAR 0 1
12693: PPUSH
12694: CALL_OW 3
12698: ST_TO_ADDR
// DialogueOff ;
12699: CALL_OW 7
// remoteControlTested := true ;
12703: LD_ADDR_EXP 7
12707: PUSH
12708: LD_INT 1
12710: ST_TO_ADDR
// break ;
12711: GO 12715
// end ;
12713: GO 12580
12715: POP
12716: POP
// until not tmp ;
12717: LD_VAR 0 2
12721: NOT
12722: IFFALSE 12558
// end ;
12724: PPOPN 3
12726: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
12727: LD_EXP 7
12731: PUSH
12732: LD_EXP 28
12736: PPUSH
12737: CALL_OW 302
12741: AND
12742: IFFALSE 12771
12744: GO 12746
12746: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
12747: LD_EXP 28
12751: PPUSH
12752: LD_STRING DMar-RC-a-2
12754: PPUSH
12755: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
12759: LD_EXP 28
12763: PPUSH
12764: LD_STRING DMar-RC-a-3
12766: PPUSH
12767: CALL_OW 88
// end ;
12771: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
12772: LD_EXP 14
12776: PUSH
12777: LD_EXP 21
12781: PPUSH
12782: LD_EXP 33
12786: PPUSH
12787: CALL_OW 296
12791: PUSH
12792: LD_INT 8
12794: LESS
12795: AND
12796: PUSH
12797: LD_INT 2
12799: PPUSH
12800: CALL_OW 463
12804: NOT
12805: AND
12806: PUSH
12807: LD_EXP 33
12811: PPUSH
12812: CALL_OW 302
12816: AND
12817: PUSH
12818: LD_EXP 21
12822: PPUSH
12823: CALL_OW 302
12827: AND
12828: IFFALSE 13006
12830: GO 12832
12832: DISABLE
// begin if not IsInUnit ( Aviradze ) then
12833: LD_EXP 33
12837: PPUSH
12838: CALL_OW 310
12842: NOT
12843: IFFALSE 12859
// ComTurnUnit ( Aviradze , Heike ) ;
12845: LD_EXP 33
12849: PPUSH
12850: LD_EXP 21
12854: PPUSH
12855: CALL_OW 119
// if not IsInUnit ( Heike ) then
12859: LD_EXP 21
12863: PPUSH
12864: CALL_OW 310
12868: NOT
12869: IFFALSE 12885
// ComTurnUnit ( Heike , Aviradze ) ;
12871: LD_EXP 21
12875: PPUSH
12876: LD_EXP 33
12880: PPUSH
12881: CALL_OW 119
// wait ( 0 0$1 ) ;
12885: LD_INT 35
12887: PPUSH
12888: CALL_OW 67
// DialogueOn ;
12892: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
12896: LD_EXP 33
12900: PPUSH
12901: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
12905: LD_EXP 21
12909: PPUSH
12910: LD_STRING DH-Beria-1
12912: PPUSH
12913: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
12917: LD_EXP 33
12921: PPUSH
12922: LD_STRING DA-Beria-2
12924: PPUSH
12925: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
12929: LD_EXP 21
12933: PPUSH
12934: LD_STRING DH-Beria-3
12936: PPUSH
12937: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
12941: LD_EXP 33
12945: PPUSH
12946: LD_STRING DA-Beria-4
12948: PPUSH
12949: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
12953: LD_EXP 33
12957: PPUSH
12958: LD_STRING DA-Beria-5
12960: PPUSH
12961: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
12965: LD_EXP 33
12969: PPUSH
12970: LD_STRING DA-Beria-6
12972: PPUSH
12973: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
12977: LD_EXP 21
12981: PPUSH
12982: LD_STRING DA-Beria-7
12984: PPUSH
12985: CALL_OW 88
// DialogueOff ;
12989: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
12993: LD_INT 52
12995: PPUSH
12996: LD_INT 2
12998: PPUSH
12999: LD_INT 1
13001: PPUSH
13002: CALL_OW 322
// end ;
13006: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
13007: LD_EXP 26
13011: PPUSH
13012: CALL_OW 300
13016: PUSH
13017: LD_EXP 26
13021: PPUSH
13022: CALL_OW 256
13026: PUSH
13027: LD_INT 10
13029: LESS
13030: AND
13031: IFFALSE 13068
13033: GO 13035
13035: DISABLE
// begin DialogueOn ;
13036: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
13040: LD_EXP 26
13044: PPUSH
13045: LD_STRING DK-Kdeath-1
13047: PPUSH
13048: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
13052: LD_EXP 21
13056: PPUSH
13057: LD_STRING DH-Kdeath-2
13059: PPUSH
13060: CALL_OW 88
// DialogueOff ;
13064: CALL_OW 7
// end ;
13068: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
13069: LD_INT 2
13071: PPUSH
13072: LD_EXP 39
13076: PPUSH
13077: CALL 1298 0 2
13081: IFFALSE 13098
13083: GO 13085
13085: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
13086: LD_EXP 21
13090: PPUSH
13091: LD_STRING DH-Obj-1
13093: PPUSH
13094: CALL_OW 88
13098: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
13099: LD_INT 2
13101: PPUSH
13102: LD_EXP 40
13106: PPUSH
13107: CALL 1298 0 2
13111: IFFALSE 13128
13113: GO 13115
13115: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
13116: LD_EXP 21
13120: PPUSH
13121: LD_STRING DH-Obj-a-1
13123: PPUSH
13124: CALL_OW 88
13128: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 11 11$00 , 10 10$30 , 10 10$00 , 9 9$30 ] [ Difficulty ] do
13129: LD_EXP 10
13133: PUSH
13134: LD_OWVAR 1
13138: PUSH
13139: LD_INT 23100
13141: PUSH
13142: LD_INT 22050
13144: PUSH
13145: LD_INT 21000
13147: PUSH
13148: LD_INT 19950
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: PUSH
13157: LD_OWVAR 67
13161: ARRAY
13162: GREATEREQUAL
13163: OR
13164: IFFALSE 13190
13166: GO 13168
13168: DISABLE
// begin if eastBaseCaptured then
13169: LD_EXP 10
13173: IFFALSE 13182
// wait ( 2 2$00 ) ;
13175: LD_INT 4200
13177: PPUSH
13178: CALL_OW 67
// convoyStarted := true ;
13182: LD_ADDR_EXP 17
13186: PUSH
13187: LD_INT 1
13189: ST_TO_ADDR
// end ;
13190: END
// every 0 0$1 trigger convoyStarted do
13191: LD_EXP 17
13195: IFFALSE 13286
13197: GO 13199
13199: DISABLE
// begin DialogueOn ;
13200: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
13204: LD_EXP 29
13208: PPUSH
13209: LD_STRING DShar-Convoy-1
13211: PPUSH
13212: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
13216: LD_EXP 21
13220: PPUSH
13221: LD_STRING DH-Convoy-2
13223: PPUSH
13224: CALL_OW 88
// DialogueOff ;
13228: CALL_OW 7
// wait ( 0 0$10 ) ;
13232: LD_INT 350
13234: PPUSH
13235: CALL_OW 67
// PrepareConvoy ;
13239: CALL 4563 0 0
// repeat wait ( rand ( 2 2$30 , 5 5$30 ) ) ;
13243: LD_INT 5250
13245: PPUSH
13246: LD_INT 11550
13248: PPUSH
13249: CALL_OW 12
13253: PPUSH
13254: CALL_OW 67
// PrepareConvoy ;
13258: CALL 4563 0 0
// convoyCounter := convoyCounter - 1 ;
13262: LD_ADDR_EXP 16
13266: PUSH
13267: LD_EXP 16
13271: PUSH
13272: LD_INT 1
13274: MINUS
13275: ST_TO_ADDR
// until convoyCounter <= 0 ;
13276: LD_EXP 16
13280: PUSH
13281: LD_INT 0
13283: LESSEQUAL
13284: IFFALSE 13243
// end ;
13286: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
13287: LD_EXP 15
13291: PUSH
13292: LD_INT 10
13294: GREATEREQUAL
13295: IFFALSE 13312
13297: GO 13299
13299: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
13300: LD_EXP 31
13304: PPUSH
13305: LD_STRING DOm-Fail-1
13307: PPUSH
13308: CALL_OW 94
13312: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
13313: LD_EXP 39
13317: NOT
13318: PUSH
13319: LD_EXP 40
13323: NOT
13324: AND
13325: IFFALSE 13337
13327: GO 13329
13329: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
13330: LD_STRING RaiderDone
13332: PPUSH
13333: CALL_OW 337
13337: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
13338: LD_INT 22
13340: PUSH
13341: LD_INT 2
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: PUSH
13348: LD_INT 33
13350: PUSH
13351: LD_INT 2
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PPUSH
13362: CALL_OW 69
13366: PUSH
13367: LD_INT 3
13369: GREATEREQUAL
13370: PUSH
13371: LD_INT 22
13373: PUSH
13374: LD_INT 2
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: PUSH
13381: LD_INT 34
13383: PUSH
13384: LD_INT 31
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PPUSH
13395: CALL_OW 69
13399: PUSH
13400: LD_INT 2
13402: GREATEREQUAL
13403: AND
13404: IFFALSE 13416
13406: GO 13408
13408: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
13409: LD_STRING RemoteControlDone
13411: PPUSH
13412: CALL_OW 337
13416: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var tmp ;
13417: LD_EXP 16
13421: PUSH
13422: LD_INT 1
13424: LESS
13425: PUSH
13426: LD_EXP 41
13430: PPUSH
13431: LD_INT 52
13433: PUSH
13434: EMPTY
13435: LIST
13436: PUSH
13437: LD_INT 21
13439: PUSH
13440: LD_INT 1
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PPUSH
13451: CALL_OW 72
13455: NOT
13456: AND
13457: PUSH
13458: LD_OWVAR 1
13462: PUSH
13463: LD_INT 126000
13465: GREATEREQUAL
13466: OR
13467: IFFALSE 14288
13469: GO 13471
13471: DISABLE
13472: LD_INT 0
13474: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
13475: LD_STRING ReinforcementsDone
13477: PPUSH
13478: CALL_OW 337
// music_class := music_victory ;
13482: LD_ADDR_OWVAR 72
13486: PUSH
13487: LD_INT 4
13489: ST_TO_ADDR
// InGameOn ;
13490: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
13494: LD_EXP 21
13498: PPUSH
13499: LD_STRING DH-end-1
13501: PPUSH
13502: CALL_OW 88
// wait ( 0 0$2 ) ;
13506: LD_INT 70
13508: PPUSH
13509: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
13513: LD_EXP 29
13517: PPUSH
13518: LD_STRING DShar-end-2
13520: PPUSH
13521: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
13525: LD_EXP 39
13529: NOT
13530: PUSH
13531: LD_EXP 40
13535: NOT
13536: AND
13537: IFFALSE 13553
// begin Say ( Heike , DH-end-3 ) ;
13539: LD_EXP 21
13543: PPUSH
13544: LD_STRING DH-end-3
13546: PPUSH
13547: CALL_OW 88
// end else
13551: GO 13650
// begin Say ( Heike , DH-end-a-3 ) ;
13553: LD_EXP 21
13557: PPUSH
13558: LD_STRING DH-end-a-3
13560: PPUSH
13561: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
13565: LD_EXP 29
13569: PPUSH
13570: LD_STRING DShar-end-a-4
13572: PPUSH
13573: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
13577: LD_EXP 21
13581: PPUSH
13582: LD_STRING DH-end-a-5
13584: PPUSH
13585: CALL_OW 88
// InGameOff ;
13589: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
13593: LD_INT 35
13595: PPUSH
13596: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
13600: LD_INT 22
13602: PUSH
13603: LD_INT 3
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PUSH
13610: LD_INT 21
13612: PUSH
13613: LD_INT 1
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PPUSH
13624: CALL_OW 69
13628: PUSH
13629: LD_INT 0
13631: EQUAL
13632: IFFALSE 13593
// InGameOn ;
13634: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
13638: LD_EXP 21
13642: PPUSH
13643: LD_STRING DH-end-a-6
13645: PPUSH
13646: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
13650: LD_EXP 29
13654: PPUSH
13655: LD_STRING DShar-end-3
13657: PPUSH
13658: CALL_OW 94
// if not flamethrowerBuilt then
13662: LD_EXP 20
13666: NOT
13667: IFFALSE 13676
// SetAchievement ( ACH_FIRE ) ;
13669: LD_STRING ACH_FIRE
13671: PPUSH
13672: CALL_OW 543
// if drugsTested then
13676: LD_EXP 6
13680: IFFALSE 13694
// AddMedal ( med1 , 1 ) else
13682: LD_STRING med1
13684: PPUSH
13685: LD_INT 1
13687: PPUSH
13688: CALL_OW 101
13692: GO 13734
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
13694: LD_INT 5
13696: PPUSH
13697: LD_INT 2
13699: PPUSH
13700: CALL_OW 321
13704: PUSH
13705: LD_INT 2
13707: EQUAL
13708: IFFALSE 13723
// AddMedal ( med1 , - 1 ) else
13710: LD_STRING med1
13712: PPUSH
13713: LD_INT 1
13715: NEG
13716: PPUSH
13717: CALL_OW 101
13721: GO 13734
// AddMedal ( med1 , - 2 ) ;
13723: LD_STRING med1
13725: PPUSH
13726: LD_INT 2
13728: NEG
13729: PPUSH
13730: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
13734: LD_INT 22
13736: PUSH
13737: LD_INT 2
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PUSH
13744: LD_INT 33
13746: PUSH
13747: LD_INT 2
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: PPUSH
13758: CALL_OW 69
13762: PUSH
13763: LD_INT 3
13765: GREATEREQUAL
13766: PUSH
13767: LD_INT 22
13769: PUSH
13770: LD_INT 2
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PUSH
13777: LD_INT 34
13779: PUSH
13780: LD_INT 31
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: PPUSH
13791: CALL_OW 69
13795: PUSH
13796: LD_INT 1
13798: GREATEREQUAL
13799: AND
13800: IFFALSE 13814
// AddMedal ( med2 , 1 ) else
13802: LD_STRING med2
13804: PPUSH
13805: LD_INT 1
13807: PPUSH
13808: CALL_OW 101
13812: GO 13825
// AddMedal ( med2 , - 1 ) ;
13814: LD_STRING med2
13816: PPUSH
13817: LD_INT 1
13819: NEG
13820: PPUSH
13821: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
13825: LD_EXP 15
13829: PUSH
13830: LD_INT 10
13832: PUSH
13833: LD_INT 8
13835: PUSH
13836: LD_INT 6
13838: PUSH
13839: LD_INT 5
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: PUSH
13848: LD_OWVAR 67
13852: ARRAY
13853: LESS
13854: IFFALSE 13868
// AddMedal ( med3 , 1 ) else
13856: LD_STRING med3
13858: PPUSH
13859: LD_INT 1
13861: PPUSH
13862: CALL_OW 101
13866: GO 13879
// AddMedal ( med3 , - 1 ) ;
13868: LD_STRING med3
13870: PPUSH
13871: LD_INT 1
13873: NEG
13874: PPUSH
13875: CALL_OW 101
// GiveMedals ( MAIN ) ;
13879: LD_STRING MAIN
13881: PPUSH
13882: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13886: LD_INT 22
13888: PUSH
13889: LD_INT 2
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: PUSH
13896: LD_INT 23
13898: PUSH
13899: LD_INT 2
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: PUSH
13906: LD_INT 21
13908: PUSH
13909: LD_INT 1
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: LIST
13920: PPUSH
13921: CALL_OW 69
13925: PPUSH
13926: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
13930: LD_EXP 15
13934: PPUSH
13935: LD_STRING 05_ConvoySavedCounter
13937: PPUSH
13938: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
13942: LD_EXP 13
13946: PPUSH
13947: LD_STRING 05_Radar
13949: PPUSH
13950: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
13954: LD_EXP 6
13958: PPUSH
13959: LD_STRING 05_DrugsTested
13961: PPUSH
13962: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
13966: LD_INT 22
13968: PUSH
13969: LD_INT 2
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: PUSH
13976: LD_INT 33
13978: PUSH
13979: LD_INT 2
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: PPUSH
13990: CALL_OW 69
13994: PUSH
13995: LD_INT 3
13997: GREATEREQUAL
13998: PUSH
13999: LD_INT 22
14001: PUSH
14002: LD_INT 2
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PUSH
14009: LD_INT 34
14011: PUSH
14012: LD_INT 31
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: PPUSH
14023: CALL_OW 69
14027: PUSH
14028: LD_INT 2
14030: GREATEREQUAL
14031: AND
14032: PPUSH
14033: LD_STRING 05_RemoteControl
14035: PPUSH
14036: CALL_OW 39
// SaveCharacters ( Heike , 05_Heike ) ;
14040: LD_EXP 21
14044: PPUSH
14045: LD_STRING 05_Heike
14047: PPUSH
14048: CALL_OW 38
// if Aviradze then
14052: LD_EXP 33
14056: IFFALSE 14070
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
14058: LD_EXP 33
14062: PPUSH
14063: LD_STRING 05_Aviradze
14065: PPUSH
14066: CALL_OW 38
// if Ibrahim then
14070: LD_EXP 24
14074: IFFALSE 14088
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
14076: LD_EXP 24
14080: PPUSH
14081: LD_STRING 05_Ibrahim
14083: PPUSH
14084: CALL_OW 38
// if Kamil then
14088: LD_EXP 25
14092: IFFALSE 14106
// SaveCharacters ( Kamil , 05_Kamil ) ;
14094: LD_EXP 25
14098: PPUSH
14099: LD_STRING 05_Kamil
14101: PPUSH
14102: CALL_OW 38
// if Sophia then
14106: LD_EXP 27
14110: IFFALSE 14124
// SaveCharacters ( Sophia , 05_Sophia ) ;
14112: LD_EXP 27
14116: PPUSH
14117: LD_STRING 05_Sophia
14119: PPUSH
14120: CALL_OW 38
// if Kaia then
14124: LD_EXP 26
14128: IFFALSE 14142
// SaveCharacters ( Kaia , 05_Kaia ) ;
14130: LD_EXP 26
14134: PPUSH
14135: LD_STRING 05_Kaia
14137: PPUSH
14138: CALL_OW 38
// if Givi then
14142: LD_EXP 22
14146: IFFALSE 14160
// SaveCharacters ( Givi , 05_Givi ) ;
14148: LD_EXP 22
14152: PPUSH
14153: LD_STRING 05_Givi
14155: PPUSH
14156: CALL_OW 38
// if Mike then
14160: LD_EXP 23
14164: IFFALSE 14178
// SaveCharacters ( Mike , 05_Mike ) ;
14166: LD_EXP 23
14170: PPUSH
14171: LD_STRING 05_Mike
14173: PPUSH
14174: CALL_OW 38
// if Markov then
14178: LD_EXP 28
14182: IFFALSE 14196
// SaveCharacters ( Markov , 05_Markov ) ;
14184: LD_EXP 28
14188: PPUSH
14189: LD_STRING 05_Markov
14191: PPUSH
14192: CALL_OW 38
// if Kurt then
14196: LD_EXP 32
14200: IFFALSE 14214
// SaveCharacters ( Kurt , 05_Kurt ) ;
14202: LD_EXP 32
14206: PPUSH
14207: LD_STRING 05_Kurt
14209: PPUSH
14210: CALL_OW 38
// if heikeSecondSquad then
14214: LD_EXP 34
14218: IFFALSE 14232
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
14220: LD_EXP 34
14224: PPUSH
14225: LD_STRING 05_others
14227: PPUSH
14228: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14232: LD_ADDR_VAR 0 1
14236: PUSH
14237: LD_INT 22
14239: PUSH
14240: LD_INT 2
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: PUSH
14247: LD_INT 23
14249: PUSH
14250: LD_INT 0
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: PPUSH
14261: CALL_OW 69
14265: ST_TO_ADDR
// if tmp then
14266: LD_VAR 0 1
14270: IFFALSE 14284
// SaveCharacters ( tmp , 05_apes ) ;
14272: LD_VAR 0 1
14276: PPUSH
14277: LD_STRING 05_apes
14279: PPUSH
14280: CALL_OW 38
// YouWin ;
14284: CALL_OW 103
// end ; end_of_file
14288: PPOPN 1
14290: END
// every 0 0$40 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
14291: LD_EXP 9
14295: PUSH
14296: LD_INT 13
14298: PPUSH
14299: LD_INT 1
14301: PPUSH
14302: CALL_OW 287
14306: PUSH
14307: LD_INT 25
14309: LESS
14310: AND
14311: IFFALSE 14338
14313: GO 14315
14315: DISABLE
// begin enable ;
14316: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
14317: LD_INT 1
14319: PPUSH
14320: LD_INT 5
14322: PPUSH
14323: CALL_OW 12
14327: PPUSH
14328: LD_INT 13
14330: PPUSH
14331: LD_INT 1
14333: PPUSH
14334: CALL_OW 55
// end ; end_of_file
14338: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
14339: LD_INT 0
14341: PPUSH
14342: PPUSH
14343: PPUSH
14344: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
14345: LD_VAR 0 1
14349: PPUSH
14350: CALL_OW 264
14354: PUSH
14355: LD_INT 91
14357: EQUAL
14358: IFFALSE 14430
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
14360: LD_INT 68
14362: PPUSH
14363: LD_VAR 0 1
14367: PPUSH
14368: CALL_OW 255
14372: PPUSH
14373: CALL_OW 321
14377: PUSH
14378: LD_INT 2
14380: EQUAL
14381: IFFALSE 14393
// eff := 70 else
14383: LD_ADDR_VAR 0 4
14387: PUSH
14388: LD_INT 70
14390: ST_TO_ADDR
14391: GO 14401
// eff := 30 ;
14393: LD_ADDR_VAR 0 4
14397: PUSH
14398: LD_INT 30
14400: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
14401: LD_VAR 0 1
14405: PPUSH
14406: CALL_OW 250
14410: PPUSH
14411: LD_VAR 0 1
14415: PPUSH
14416: CALL_OW 251
14420: PPUSH
14421: LD_VAR 0 4
14425: PPUSH
14426: CALL_OW 495
// end ; end ;
14430: LD_VAR 0 2
14434: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
14435: LD_INT 0
14437: PPUSH
// end ;
14438: LD_VAR 0 4
14442: RET
// export function SOS_Command ( cmd ) ; begin
14443: LD_INT 0
14445: PPUSH
// end ;
14446: LD_VAR 0 2
14450: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
14451: LD_INT 0
14453: PPUSH
// end ;
14454: LD_VAR 0 6
14458: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
14459: LD_INT 0
14461: PPUSH
14462: PPUSH
// if not vehicle or not factory then
14463: LD_VAR 0 1
14467: NOT
14468: PUSH
14469: LD_VAR 0 2
14473: NOT
14474: OR
14475: IFFALSE 14479
// exit ;
14477: GO 14710
// if factoryWaypoints >= factory then
14479: LD_EXP 112
14483: PUSH
14484: LD_VAR 0 2
14488: GREATEREQUAL
14489: IFFALSE 14710
// if factoryWaypoints [ factory ] then
14491: LD_EXP 112
14495: PUSH
14496: LD_VAR 0 2
14500: ARRAY
14501: IFFALSE 14710
// begin if GetControl ( vehicle ) = control_manual then
14503: LD_VAR 0 1
14507: PPUSH
14508: CALL_OW 263
14512: PUSH
14513: LD_INT 1
14515: EQUAL
14516: IFFALSE 14597
// begin driver := IsDrivenBy ( vehicle ) ;
14518: LD_ADDR_VAR 0 4
14522: PUSH
14523: LD_VAR 0 1
14527: PPUSH
14528: CALL_OW 311
14532: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14533: LD_VAR 0 4
14537: PPUSH
14538: LD_EXP 112
14542: PUSH
14543: LD_VAR 0 2
14547: ARRAY
14548: PUSH
14549: LD_INT 3
14551: ARRAY
14552: PPUSH
14553: LD_EXP 112
14557: PUSH
14558: LD_VAR 0 2
14562: ARRAY
14563: PUSH
14564: LD_INT 4
14566: ARRAY
14567: PPUSH
14568: CALL_OW 171
// AddComExitVehicle ( driver ) ;
14572: LD_VAR 0 4
14576: PPUSH
14577: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
14581: LD_VAR 0 4
14585: PPUSH
14586: LD_VAR 0 2
14590: PPUSH
14591: CALL_OW 180
// end else
14595: GO 14710
// if GetControl ( vehicle ) = control_remote then
14597: LD_VAR 0 1
14601: PPUSH
14602: CALL_OW 263
14606: PUSH
14607: LD_INT 2
14609: EQUAL
14610: IFFALSE 14671
// begin wait ( 0 0$2 ) ;
14612: LD_INT 70
14614: PPUSH
14615: CALL_OW 67
// if Connect ( vehicle ) then
14619: LD_VAR 0 1
14623: PPUSH
14624: CALL 42383 0 1
14628: IFFALSE 14669
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14630: LD_VAR 0 1
14634: PPUSH
14635: LD_EXP 112
14639: PUSH
14640: LD_VAR 0 2
14644: ARRAY
14645: PUSH
14646: LD_INT 3
14648: ARRAY
14649: PPUSH
14650: LD_EXP 112
14654: PUSH
14655: LD_VAR 0 2
14659: ARRAY
14660: PUSH
14661: LD_INT 4
14663: ARRAY
14664: PPUSH
14665: CALL_OW 171
// end else
14669: GO 14710
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14671: LD_VAR 0 1
14675: PPUSH
14676: LD_EXP 112
14680: PUSH
14681: LD_VAR 0 2
14685: ARRAY
14686: PUSH
14687: LD_INT 3
14689: ARRAY
14690: PPUSH
14691: LD_EXP 112
14695: PUSH
14696: LD_VAR 0 2
14700: ARRAY
14701: PUSH
14702: LD_INT 4
14704: ARRAY
14705: PPUSH
14706: CALL_OW 171
// end ; end ;
14710: LD_VAR 0 3
14714: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
14715: LD_INT 0
14717: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
14718: LD_VAR 0 1
14722: PUSH
14723: LD_INT 250
14725: EQUAL
14726: PUSH
14727: LD_VAR 0 2
14731: PPUSH
14732: CALL_OW 264
14736: PUSH
14737: LD_INT 81
14739: EQUAL
14740: AND
14741: IFFALSE 14762
// MinerPlaceMine ( unit , x , y ) ;
14743: LD_VAR 0 2
14747: PPUSH
14748: LD_VAR 0 4
14752: PPUSH
14753: LD_VAR 0 5
14757: PPUSH
14758: CALL 17147 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
14762: LD_VAR 0 1
14766: PUSH
14767: LD_INT 251
14769: EQUAL
14770: PUSH
14771: LD_VAR 0 2
14775: PPUSH
14776: CALL_OW 264
14780: PUSH
14781: LD_INT 81
14783: EQUAL
14784: AND
14785: IFFALSE 14806
// MinerDetonateMine ( unit , x , y ) ;
14787: LD_VAR 0 2
14791: PPUSH
14792: LD_VAR 0 4
14796: PPUSH
14797: LD_VAR 0 5
14801: PPUSH
14802: CALL 17422 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
14806: LD_VAR 0 1
14810: PUSH
14811: LD_INT 252
14813: EQUAL
14814: PUSH
14815: LD_VAR 0 2
14819: PPUSH
14820: CALL_OW 264
14824: PUSH
14825: LD_INT 81
14827: EQUAL
14828: AND
14829: IFFALSE 14850
// MinerCreateMinefield ( unit , x , y ) ;
14831: LD_VAR 0 2
14835: PPUSH
14836: LD_VAR 0 4
14840: PPUSH
14841: LD_VAR 0 5
14845: PPUSH
14846: CALL 17839 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
14850: LD_VAR 0 1
14854: PUSH
14855: LD_INT 253
14857: EQUAL
14858: PUSH
14859: LD_VAR 0 2
14863: PPUSH
14864: CALL_OW 257
14868: PUSH
14869: LD_INT 5
14871: EQUAL
14872: AND
14873: IFFALSE 14894
// ComBinocular ( unit , x , y ) ;
14875: LD_VAR 0 2
14879: PPUSH
14880: LD_VAR 0 4
14884: PPUSH
14885: LD_VAR 0 5
14889: PPUSH
14890: CALL 18208 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
14894: LD_VAR 0 1
14898: PUSH
14899: LD_INT 254
14901: EQUAL
14902: PUSH
14903: LD_VAR 0 2
14907: PPUSH
14908: CALL_OW 264
14912: PUSH
14913: LD_INT 99
14915: EQUAL
14916: AND
14917: PUSH
14918: LD_VAR 0 3
14922: PPUSH
14923: CALL_OW 263
14927: PUSH
14928: LD_INT 3
14930: EQUAL
14931: AND
14932: IFFALSE 14948
// HackDestroyVehicle ( unit , selectedUnit ) ;
14934: LD_VAR 0 2
14938: PPUSH
14939: LD_VAR 0 3
14943: PPUSH
14944: CALL 16511 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
14948: LD_VAR 0 1
14952: PUSH
14953: LD_INT 255
14955: EQUAL
14956: PUSH
14957: LD_VAR 0 2
14961: PPUSH
14962: CALL_OW 264
14966: PUSH
14967: LD_INT 14
14969: PUSH
14970: LD_INT 53
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: IN
14977: AND
14978: PUSH
14979: LD_VAR 0 4
14983: PPUSH
14984: LD_VAR 0 5
14988: PPUSH
14989: CALL_OW 488
14993: AND
14994: IFFALSE 15018
// CutTreeXYR ( unit , x , y , 12 ) ;
14996: LD_VAR 0 2
15000: PPUSH
15001: LD_VAR 0 4
15005: PPUSH
15006: LD_VAR 0 5
15010: PPUSH
15011: LD_INT 12
15013: PPUSH
15014: CALL 15081 0 4
// if cmd = 256 then
15018: LD_VAR 0 1
15022: PUSH
15023: LD_INT 256
15025: EQUAL
15026: IFFALSE 15047
// SetFactoryWaypoint ( unit , x , y ) ;
15028: LD_VAR 0 2
15032: PPUSH
15033: LD_VAR 0 4
15037: PPUSH
15038: LD_VAR 0 5
15042: PPUSH
15043: CALL 32966 0 3
// if cmd = 257 then
15047: LD_VAR 0 1
15051: PUSH
15052: LD_INT 257
15054: EQUAL
15055: IFFALSE 15076
// SetWarehouseGatheringPoint ( unit , x , y ) ;
15057: LD_VAR 0 2
15061: PPUSH
15062: LD_VAR 0 4
15066: PPUSH
15067: LD_VAR 0 5
15071: PPUSH
15072: CALL 33328 0 3
// end ;
15076: LD_VAR 0 6
15080: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15081: LD_INT 0
15083: PPUSH
15084: PPUSH
15085: PPUSH
15086: PPUSH
15087: PPUSH
15088: PPUSH
15089: PPUSH
15090: PPUSH
15091: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15092: LD_VAR 0 1
15096: NOT
15097: PUSH
15098: LD_VAR 0 2
15102: PPUSH
15103: LD_VAR 0 3
15107: PPUSH
15108: CALL_OW 488
15112: NOT
15113: OR
15114: PUSH
15115: LD_VAR 0 4
15119: NOT
15120: OR
15121: IFFALSE 15125
// exit ;
15123: GO 15465
// list := [ ] ;
15125: LD_ADDR_VAR 0 13
15129: PUSH
15130: EMPTY
15131: ST_TO_ADDR
// if x - r < 0 then
15132: LD_VAR 0 2
15136: PUSH
15137: LD_VAR 0 4
15141: MINUS
15142: PUSH
15143: LD_INT 0
15145: LESS
15146: IFFALSE 15158
// min_x := 0 else
15148: LD_ADDR_VAR 0 7
15152: PUSH
15153: LD_INT 0
15155: ST_TO_ADDR
15156: GO 15174
// min_x := x - r ;
15158: LD_ADDR_VAR 0 7
15162: PUSH
15163: LD_VAR 0 2
15167: PUSH
15168: LD_VAR 0 4
15172: MINUS
15173: ST_TO_ADDR
// if y - r < 0 then
15174: LD_VAR 0 3
15178: PUSH
15179: LD_VAR 0 4
15183: MINUS
15184: PUSH
15185: LD_INT 0
15187: LESS
15188: IFFALSE 15200
// min_y := 0 else
15190: LD_ADDR_VAR 0 8
15194: PUSH
15195: LD_INT 0
15197: ST_TO_ADDR
15198: GO 15216
// min_y := y - r ;
15200: LD_ADDR_VAR 0 8
15204: PUSH
15205: LD_VAR 0 3
15209: PUSH
15210: LD_VAR 0 4
15214: MINUS
15215: ST_TO_ADDR
// max_x := x + r ;
15216: LD_ADDR_VAR 0 9
15220: PUSH
15221: LD_VAR 0 2
15225: PUSH
15226: LD_VAR 0 4
15230: PLUS
15231: ST_TO_ADDR
// max_y := y + r ;
15232: LD_ADDR_VAR 0 10
15236: PUSH
15237: LD_VAR 0 3
15241: PUSH
15242: LD_VAR 0 4
15246: PLUS
15247: ST_TO_ADDR
// for _x = min_x to max_x do
15248: LD_ADDR_VAR 0 11
15252: PUSH
15253: DOUBLE
15254: LD_VAR 0 7
15258: DEC
15259: ST_TO_ADDR
15260: LD_VAR 0 9
15264: PUSH
15265: FOR_TO
15266: IFFALSE 15383
// for _y = min_y to max_y do
15268: LD_ADDR_VAR 0 12
15272: PUSH
15273: DOUBLE
15274: LD_VAR 0 8
15278: DEC
15279: ST_TO_ADDR
15280: LD_VAR 0 10
15284: PUSH
15285: FOR_TO
15286: IFFALSE 15379
// begin if not ValidHex ( _x , _y ) then
15288: LD_VAR 0 11
15292: PPUSH
15293: LD_VAR 0 12
15297: PPUSH
15298: CALL_OW 488
15302: NOT
15303: IFFALSE 15307
// continue ;
15305: GO 15285
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15307: LD_VAR 0 11
15311: PPUSH
15312: LD_VAR 0 12
15316: PPUSH
15317: CALL_OW 351
15321: PUSH
15322: LD_VAR 0 11
15326: PPUSH
15327: LD_VAR 0 12
15331: PPUSH
15332: CALL_OW 554
15336: AND
15337: IFFALSE 15377
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15339: LD_ADDR_VAR 0 13
15343: PUSH
15344: LD_VAR 0 13
15348: PPUSH
15349: LD_VAR 0 13
15353: PUSH
15354: LD_INT 1
15356: PLUS
15357: PPUSH
15358: LD_VAR 0 11
15362: PUSH
15363: LD_VAR 0 12
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: PPUSH
15372: CALL_OW 2
15376: ST_TO_ADDR
// end ;
15377: GO 15285
15379: POP
15380: POP
15381: GO 15265
15383: POP
15384: POP
// if not list then
15385: LD_VAR 0 13
15389: NOT
15390: IFFALSE 15394
// exit ;
15392: GO 15465
// for i in list do
15394: LD_ADDR_VAR 0 6
15398: PUSH
15399: LD_VAR 0 13
15403: PUSH
15404: FOR_IN
15405: IFFALSE 15463
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
15407: LD_VAR 0 1
15411: PPUSH
15412: LD_STRING M
15414: PUSH
15415: LD_VAR 0 6
15419: PUSH
15420: LD_INT 1
15422: ARRAY
15423: PUSH
15424: LD_VAR 0 6
15428: PUSH
15429: LD_INT 2
15431: ARRAY
15432: PUSH
15433: LD_INT 0
15435: PUSH
15436: LD_INT 0
15438: PUSH
15439: LD_INT 0
15441: PUSH
15442: LD_INT 0
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: PUSH
15454: EMPTY
15455: LIST
15456: PPUSH
15457: CALL_OW 447
15461: GO 15404
15463: POP
15464: POP
// end ;
15465: LD_VAR 0 5
15469: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
15470: LD_EXP 44
15474: NOT
15475: IFFALSE 15525
15477: GO 15479
15479: DISABLE
// begin initHack := true ;
15480: LD_ADDR_EXP 44
15484: PUSH
15485: LD_INT 1
15487: ST_TO_ADDR
// hackTanks := [ ] ;
15488: LD_ADDR_EXP 45
15492: PUSH
15493: EMPTY
15494: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
15495: LD_ADDR_EXP 46
15499: PUSH
15500: EMPTY
15501: ST_TO_ADDR
// hackLimit := 3 ;
15502: LD_ADDR_EXP 47
15506: PUSH
15507: LD_INT 3
15509: ST_TO_ADDR
// hackDist := 12 ;
15510: LD_ADDR_EXP 48
15514: PUSH
15515: LD_INT 12
15517: ST_TO_ADDR
// hackCounter := [ ] ;
15518: LD_ADDR_EXP 49
15522: PUSH
15523: EMPTY
15524: ST_TO_ADDR
// end ;
15525: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
15526: LD_EXP 44
15530: PUSH
15531: LD_INT 34
15533: PUSH
15534: LD_INT 99
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: PPUSH
15541: CALL_OW 69
15545: AND
15546: IFFALSE 15799
15548: GO 15550
15550: DISABLE
15551: LD_INT 0
15553: PPUSH
15554: PPUSH
// begin enable ;
15555: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
15556: LD_ADDR_VAR 0 1
15560: PUSH
15561: LD_INT 34
15563: PUSH
15564: LD_INT 99
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PPUSH
15571: CALL_OW 69
15575: PUSH
15576: FOR_IN
15577: IFFALSE 15797
// begin if not i in hackTanks then
15579: LD_VAR 0 1
15583: PUSH
15584: LD_EXP 45
15588: IN
15589: NOT
15590: IFFALSE 15673
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
15592: LD_ADDR_EXP 45
15596: PUSH
15597: LD_EXP 45
15601: PPUSH
15602: LD_EXP 45
15606: PUSH
15607: LD_INT 1
15609: PLUS
15610: PPUSH
15611: LD_VAR 0 1
15615: PPUSH
15616: CALL_OW 1
15620: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
15621: LD_ADDR_EXP 46
15625: PUSH
15626: LD_EXP 46
15630: PPUSH
15631: LD_EXP 46
15635: PUSH
15636: LD_INT 1
15638: PLUS
15639: PPUSH
15640: EMPTY
15641: PPUSH
15642: CALL_OW 1
15646: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
15647: LD_ADDR_EXP 49
15651: PUSH
15652: LD_EXP 49
15656: PPUSH
15657: LD_EXP 49
15661: PUSH
15662: LD_INT 1
15664: PLUS
15665: PPUSH
15666: EMPTY
15667: PPUSH
15668: CALL_OW 1
15672: ST_TO_ADDR
// end ; if not IsOk ( i ) then
15673: LD_VAR 0 1
15677: PPUSH
15678: CALL_OW 302
15682: NOT
15683: IFFALSE 15696
// begin HackUnlinkAll ( i ) ;
15685: LD_VAR 0 1
15689: PPUSH
15690: CALL 15802 0 1
// continue ;
15694: GO 15576
// end ; HackCheckCapturedStatus ( i ) ;
15696: LD_VAR 0 1
15700: PPUSH
15701: CALL 16245 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
15705: LD_ADDR_VAR 0 2
15709: PUSH
15710: LD_INT 81
15712: PUSH
15713: LD_VAR 0 1
15717: PPUSH
15718: CALL_OW 255
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: PUSH
15727: LD_INT 33
15729: PUSH
15730: LD_INT 3
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: PUSH
15737: LD_INT 91
15739: PUSH
15740: LD_VAR 0 1
15744: PUSH
15745: LD_EXP 48
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: LIST
15754: PUSH
15755: LD_INT 50
15757: PUSH
15758: EMPTY
15759: LIST
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: PPUSH
15767: CALL_OW 69
15771: ST_TO_ADDR
// if not tmp then
15772: LD_VAR 0 2
15776: NOT
15777: IFFALSE 15781
// continue ;
15779: GO 15576
// HackLink ( i , tmp ) ;
15781: LD_VAR 0 1
15785: PPUSH
15786: LD_VAR 0 2
15790: PPUSH
15791: CALL 15938 0 2
// end ;
15795: GO 15576
15797: POP
15798: POP
// end ;
15799: PPOPN 2
15801: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
15802: LD_INT 0
15804: PPUSH
15805: PPUSH
15806: PPUSH
// if not hack in hackTanks then
15807: LD_VAR 0 1
15811: PUSH
15812: LD_EXP 45
15816: IN
15817: NOT
15818: IFFALSE 15822
// exit ;
15820: GO 15933
// index := GetElementIndex ( hackTanks , hack ) ;
15822: LD_ADDR_VAR 0 4
15826: PUSH
15827: LD_EXP 45
15831: PPUSH
15832: LD_VAR 0 1
15836: PPUSH
15837: CALL 39199 0 2
15841: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
15842: LD_EXP 46
15846: PUSH
15847: LD_VAR 0 4
15851: ARRAY
15852: IFFALSE 15933
// begin for i in hackTanksCaptured [ index ] do
15854: LD_ADDR_VAR 0 3
15858: PUSH
15859: LD_EXP 46
15863: PUSH
15864: LD_VAR 0 4
15868: ARRAY
15869: PUSH
15870: FOR_IN
15871: IFFALSE 15897
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
15873: LD_VAR 0 3
15877: PUSH
15878: LD_INT 1
15880: ARRAY
15881: PPUSH
15882: LD_VAR 0 3
15886: PUSH
15887: LD_INT 2
15889: ARRAY
15890: PPUSH
15891: CALL_OW 235
15895: GO 15870
15897: POP
15898: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
15899: LD_ADDR_EXP 46
15903: PUSH
15904: LD_EXP 46
15908: PPUSH
15909: LD_VAR 0 4
15913: PPUSH
15914: EMPTY
15915: PPUSH
15916: CALL_OW 1
15920: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
15921: LD_VAR 0 1
15925: PPUSH
15926: LD_INT 0
15928: PPUSH
15929: CALL_OW 505
// end ; end ;
15933: LD_VAR 0 2
15937: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
15938: LD_INT 0
15940: PPUSH
15941: PPUSH
15942: PPUSH
// if not hack in hackTanks or not vehicles then
15943: LD_VAR 0 1
15947: PUSH
15948: LD_EXP 45
15952: IN
15953: NOT
15954: PUSH
15955: LD_VAR 0 2
15959: NOT
15960: OR
15961: IFFALSE 15965
// exit ;
15963: GO 16240
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
15965: LD_ADDR_VAR 0 2
15969: PUSH
15970: LD_VAR 0 1
15974: PPUSH
15975: LD_VAR 0 2
15979: PPUSH
15980: LD_INT 1
15982: PPUSH
15983: LD_INT 1
15985: PPUSH
15986: CALL 39849 0 4
15990: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
15991: LD_ADDR_VAR 0 5
15995: PUSH
15996: LD_EXP 45
16000: PPUSH
16001: LD_VAR 0 1
16005: PPUSH
16006: CALL 39199 0 2
16010: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
16011: LD_EXP 46
16015: PUSH
16016: LD_VAR 0 5
16020: ARRAY
16021: PUSH
16022: LD_EXP 47
16026: LESS
16027: IFFALSE 16216
// begin for i := 1 to vehicles do
16029: LD_ADDR_VAR 0 4
16033: PUSH
16034: DOUBLE
16035: LD_INT 1
16037: DEC
16038: ST_TO_ADDR
16039: LD_VAR 0 2
16043: PUSH
16044: FOR_TO
16045: IFFALSE 16214
// begin if hackTanksCaptured [ index ] = hackLimit then
16047: LD_EXP 46
16051: PUSH
16052: LD_VAR 0 5
16056: ARRAY
16057: PUSH
16058: LD_EXP 47
16062: EQUAL
16063: IFFALSE 16067
// break ;
16065: GO 16214
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
16067: LD_ADDR_EXP 49
16071: PUSH
16072: LD_EXP 49
16076: PPUSH
16077: LD_VAR 0 5
16081: PPUSH
16082: LD_EXP 49
16086: PUSH
16087: LD_VAR 0 5
16091: ARRAY
16092: PUSH
16093: LD_INT 1
16095: PLUS
16096: PPUSH
16097: CALL_OW 1
16101: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
16102: LD_ADDR_EXP 46
16106: PUSH
16107: LD_EXP 46
16111: PPUSH
16112: LD_VAR 0 5
16116: PUSH
16117: LD_EXP 46
16121: PUSH
16122: LD_VAR 0 5
16126: ARRAY
16127: PUSH
16128: LD_INT 1
16130: PLUS
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: PPUSH
16136: LD_VAR 0 2
16140: PUSH
16141: LD_VAR 0 4
16145: ARRAY
16146: PUSH
16147: LD_VAR 0 2
16151: PUSH
16152: LD_VAR 0 4
16156: ARRAY
16157: PPUSH
16158: CALL_OW 255
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PPUSH
16167: CALL 39414 0 3
16171: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
16172: LD_VAR 0 2
16176: PUSH
16177: LD_VAR 0 4
16181: ARRAY
16182: PPUSH
16183: LD_VAR 0 1
16187: PPUSH
16188: CALL_OW 255
16192: PPUSH
16193: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
16197: LD_VAR 0 2
16201: PUSH
16202: LD_VAR 0 4
16206: ARRAY
16207: PPUSH
16208: CALL_OW 141
// end ;
16212: GO 16044
16214: POP
16215: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16216: LD_VAR 0 1
16220: PPUSH
16221: LD_EXP 46
16225: PUSH
16226: LD_VAR 0 5
16230: ARRAY
16231: PUSH
16232: LD_INT 0
16234: PLUS
16235: PPUSH
16236: CALL_OW 505
// end ;
16240: LD_VAR 0 3
16244: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
16245: LD_INT 0
16247: PPUSH
16248: PPUSH
16249: PPUSH
16250: PPUSH
// if not hack in hackTanks then
16251: LD_VAR 0 1
16255: PUSH
16256: LD_EXP 45
16260: IN
16261: NOT
16262: IFFALSE 16266
// exit ;
16264: GO 16506
// index := GetElementIndex ( hackTanks , hack ) ;
16266: LD_ADDR_VAR 0 4
16270: PUSH
16271: LD_EXP 45
16275: PPUSH
16276: LD_VAR 0 1
16280: PPUSH
16281: CALL 39199 0 2
16285: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
16286: LD_ADDR_VAR 0 3
16290: PUSH
16291: DOUBLE
16292: LD_EXP 46
16296: PUSH
16297: LD_VAR 0 4
16301: ARRAY
16302: INC
16303: ST_TO_ADDR
16304: LD_INT 1
16306: PUSH
16307: FOR_DOWNTO
16308: IFFALSE 16480
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
16310: LD_ADDR_VAR 0 5
16314: PUSH
16315: LD_EXP 46
16319: PUSH
16320: LD_VAR 0 4
16324: ARRAY
16325: PUSH
16326: LD_VAR 0 3
16330: ARRAY
16331: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
16332: LD_VAR 0 5
16336: PUSH
16337: LD_INT 1
16339: ARRAY
16340: PPUSH
16341: CALL_OW 302
16345: NOT
16346: PUSH
16347: LD_VAR 0 5
16351: PUSH
16352: LD_INT 1
16354: ARRAY
16355: PPUSH
16356: CALL_OW 255
16360: PUSH
16361: LD_VAR 0 1
16365: PPUSH
16366: CALL_OW 255
16370: NONEQUAL
16371: OR
16372: IFFALSE 16478
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
16374: LD_VAR 0 5
16378: PUSH
16379: LD_INT 1
16381: ARRAY
16382: PPUSH
16383: CALL_OW 305
16387: PUSH
16388: LD_VAR 0 5
16392: PUSH
16393: LD_INT 1
16395: ARRAY
16396: PPUSH
16397: CALL_OW 255
16401: PUSH
16402: LD_VAR 0 1
16406: PPUSH
16407: CALL_OW 255
16411: EQUAL
16412: AND
16413: IFFALSE 16437
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
16415: LD_VAR 0 5
16419: PUSH
16420: LD_INT 1
16422: ARRAY
16423: PPUSH
16424: LD_VAR 0 5
16428: PUSH
16429: LD_INT 2
16431: ARRAY
16432: PPUSH
16433: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
16437: LD_ADDR_EXP 46
16441: PUSH
16442: LD_EXP 46
16446: PPUSH
16447: LD_VAR 0 4
16451: PPUSH
16452: LD_EXP 46
16456: PUSH
16457: LD_VAR 0 4
16461: ARRAY
16462: PPUSH
16463: LD_VAR 0 3
16467: PPUSH
16468: CALL_OW 3
16472: PPUSH
16473: CALL_OW 1
16477: ST_TO_ADDR
// end ; end ;
16478: GO 16307
16480: POP
16481: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16482: LD_VAR 0 1
16486: PPUSH
16487: LD_EXP 46
16491: PUSH
16492: LD_VAR 0 4
16496: ARRAY
16497: PUSH
16498: LD_INT 0
16500: PLUS
16501: PPUSH
16502: CALL_OW 505
// end ;
16506: LD_VAR 0 2
16510: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
16511: LD_INT 0
16513: PPUSH
16514: PPUSH
16515: PPUSH
16516: PPUSH
// if not hack in hackTanks then
16517: LD_VAR 0 1
16521: PUSH
16522: LD_EXP 45
16526: IN
16527: NOT
16528: IFFALSE 16532
// exit ;
16530: GO 16617
// index := GetElementIndex ( hackTanks , hack ) ;
16532: LD_ADDR_VAR 0 5
16536: PUSH
16537: LD_EXP 45
16541: PPUSH
16542: LD_VAR 0 1
16546: PPUSH
16547: CALL 39199 0 2
16551: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
16552: LD_ADDR_VAR 0 4
16556: PUSH
16557: DOUBLE
16558: LD_INT 1
16560: DEC
16561: ST_TO_ADDR
16562: LD_EXP 46
16566: PUSH
16567: LD_VAR 0 5
16571: ARRAY
16572: PUSH
16573: FOR_TO
16574: IFFALSE 16615
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
16576: LD_EXP 46
16580: PUSH
16581: LD_VAR 0 5
16585: ARRAY
16586: PUSH
16587: LD_VAR 0 4
16591: ARRAY
16592: PUSH
16593: LD_INT 1
16595: ARRAY
16596: PUSH
16597: LD_VAR 0 2
16601: EQUAL
16602: IFFALSE 16613
// KillUnit ( vehicle ) ;
16604: LD_VAR 0 2
16608: PPUSH
16609: CALL_OW 66
16613: GO 16573
16615: POP
16616: POP
// end ;
16617: LD_VAR 0 3
16621: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
16622: LD_EXP 50
16626: NOT
16627: IFFALSE 16662
16629: GO 16631
16631: DISABLE
// begin initMiner := true ;
16632: LD_ADDR_EXP 50
16636: PUSH
16637: LD_INT 1
16639: ST_TO_ADDR
// minersList := [ ] ;
16640: LD_ADDR_EXP 51
16644: PUSH
16645: EMPTY
16646: ST_TO_ADDR
// minerMinesList := [ ] ;
16647: LD_ADDR_EXP 52
16651: PUSH
16652: EMPTY
16653: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
16654: LD_ADDR_EXP 53
16658: PUSH
16659: LD_INT 5
16661: ST_TO_ADDR
// end ;
16662: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
16663: LD_EXP 50
16667: PUSH
16668: LD_INT 34
16670: PUSH
16671: LD_INT 81
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PPUSH
16678: CALL_OW 69
16682: AND
16683: IFFALSE 17144
16685: GO 16687
16687: DISABLE
16688: LD_INT 0
16690: PPUSH
16691: PPUSH
16692: PPUSH
16693: PPUSH
// begin enable ;
16694: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
16695: LD_ADDR_VAR 0 1
16699: PUSH
16700: LD_INT 34
16702: PUSH
16703: LD_INT 81
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PPUSH
16710: CALL_OW 69
16714: PUSH
16715: FOR_IN
16716: IFFALSE 16788
// begin if not i in minersList then
16718: LD_VAR 0 1
16722: PUSH
16723: LD_EXP 51
16727: IN
16728: NOT
16729: IFFALSE 16786
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
16731: LD_ADDR_EXP 51
16735: PUSH
16736: LD_EXP 51
16740: PPUSH
16741: LD_EXP 51
16745: PUSH
16746: LD_INT 1
16748: PLUS
16749: PPUSH
16750: LD_VAR 0 1
16754: PPUSH
16755: CALL_OW 1
16759: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
16760: LD_ADDR_EXP 52
16764: PUSH
16765: LD_EXP 52
16769: PPUSH
16770: LD_EXP 52
16774: PUSH
16775: LD_INT 1
16777: PLUS
16778: PPUSH
16779: EMPTY
16780: PPUSH
16781: CALL_OW 1
16785: ST_TO_ADDR
// end end ;
16786: GO 16715
16788: POP
16789: POP
// for i := minerMinesList downto 1 do
16790: LD_ADDR_VAR 0 1
16794: PUSH
16795: DOUBLE
16796: LD_EXP 52
16800: INC
16801: ST_TO_ADDR
16802: LD_INT 1
16804: PUSH
16805: FOR_DOWNTO
16806: IFFALSE 17142
// begin if IsLive ( minersList [ i ] ) then
16808: LD_EXP 51
16812: PUSH
16813: LD_VAR 0 1
16817: ARRAY
16818: PPUSH
16819: CALL_OW 300
16823: IFFALSE 16851
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
16825: LD_EXP 51
16829: PUSH
16830: LD_VAR 0 1
16834: ARRAY
16835: PPUSH
16836: LD_EXP 52
16840: PUSH
16841: LD_VAR 0 1
16845: ARRAY
16846: PPUSH
16847: CALL_OW 505
// if not minerMinesList [ i ] then
16851: LD_EXP 52
16855: PUSH
16856: LD_VAR 0 1
16860: ARRAY
16861: NOT
16862: IFFALSE 16866
// continue ;
16864: GO 16805
// for j := minerMinesList [ i ] downto 1 do
16866: LD_ADDR_VAR 0 2
16870: PUSH
16871: DOUBLE
16872: LD_EXP 52
16876: PUSH
16877: LD_VAR 0 1
16881: ARRAY
16882: INC
16883: ST_TO_ADDR
16884: LD_INT 1
16886: PUSH
16887: FOR_DOWNTO
16888: IFFALSE 17138
// begin side := GetSide ( minersList [ i ] ) ;
16890: LD_ADDR_VAR 0 3
16894: PUSH
16895: LD_EXP 51
16899: PUSH
16900: LD_VAR 0 1
16904: ARRAY
16905: PPUSH
16906: CALL_OW 255
16910: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
16911: LD_ADDR_VAR 0 4
16915: PUSH
16916: LD_EXP 52
16920: PUSH
16921: LD_VAR 0 1
16925: ARRAY
16926: PUSH
16927: LD_VAR 0 2
16931: ARRAY
16932: PUSH
16933: LD_INT 1
16935: ARRAY
16936: PPUSH
16937: LD_EXP 52
16941: PUSH
16942: LD_VAR 0 1
16946: ARRAY
16947: PUSH
16948: LD_VAR 0 2
16952: ARRAY
16953: PUSH
16954: LD_INT 2
16956: ARRAY
16957: PPUSH
16958: CALL_OW 428
16962: ST_TO_ADDR
// if not tmp then
16963: LD_VAR 0 4
16967: NOT
16968: IFFALSE 16972
// continue ;
16970: GO 16887
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
16972: LD_VAR 0 4
16976: PUSH
16977: LD_INT 81
16979: PUSH
16980: LD_VAR 0 3
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PPUSH
16989: CALL_OW 69
16993: IN
16994: PUSH
16995: LD_EXP 52
16999: PUSH
17000: LD_VAR 0 1
17004: ARRAY
17005: PUSH
17006: LD_VAR 0 2
17010: ARRAY
17011: PUSH
17012: LD_INT 1
17014: ARRAY
17015: PPUSH
17016: LD_EXP 52
17020: PUSH
17021: LD_VAR 0 1
17025: ARRAY
17026: PUSH
17027: LD_VAR 0 2
17031: ARRAY
17032: PUSH
17033: LD_INT 2
17035: ARRAY
17036: PPUSH
17037: CALL_OW 458
17041: AND
17042: IFFALSE 17136
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
17044: LD_EXP 52
17048: PUSH
17049: LD_VAR 0 1
17053: ARRAY
17054: PUSH
17055: LD_VAR 0 2
17059: ARRAY
17060: PUSH
17061: LD_INT 1
17063: ARRAY
17064: PPUSH
17065: LD_EXP 52
17069: PUSH
17070: LD_VAR 0 1
17074: ARRAY
17075: PUSH
17076: LD_VAR 0 2
17080: ARRAY
17081: PUSH
17082: LD_INT 2
17084: ARRAY
17085: PPUSH
17086: LD_VAR 0 3
17090: PPUSH
17091: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
17095: LD_ADDR_EXP 52
17099: PUSH
17100: LD_EXP 52
17104: PPUSH
17105: LD_VAR 0 1
17109: PPUSH
17110: LD_EXP 52
17114: PUSH
17115: LD_VAR 0 1
17119: ARRAY
17120: PPUSH
17121: LD_VAR 0 2
17125: PPUSH
17126: CALL_OW 3
17130: PPUSH
17131: CALL_OW 1
17135: ST_TO_ADDR
// end ; end ;
17136: GO 16887
17138: POP
17139: POP
// end ;
17140: GO 16805
17142: POP
17143: POP
// end ;
17144: PPOPN 4
17146: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
17147: LD_INT 0
17149: PPUSH
17150: PPUSH
// result := false ;
17151: LD_ADDR_VAR 0 4
17155: PUSH
17156: LD_INT 0
17158: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
17159: LD_VAR 0 1
17163: PPUSH
17164: CALL_OW 264
17168: PUSH
17169: LD_INT 81
17171: EQUAL
17172: NOT
17173: IFFALSE 17177
// exit ;
17175: GO 17417
// index := GetElementIndex ( minersList , unit ) ;
17177: LD_ADDR_VAR 0 5
17181: PUSH
17182: LD_EXP 51
17186: PPUSH
17187: LD_VAR 0 1
17191: PPUSH
17192: CALL 39199 0 2
17196: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
17197: LD_EXP 52
17201: PUSH
17202: LD_VAR 0 5
17206: ARRAY
17207: PUSH
17208: LD_EXP 53
17212: GREATEREQUAL
17213: IFFALSE 17217
// exit ;
17215: GO 17417
// ComMoveXY ( unit , x , y ) ;
17217: LD_VAR 0 1
17221: PPUSH
17222: LD_VAR 0 2
17226: PPUSH
17227: LD_VAR 0 3
17231: PPUSH
17232: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17236: LD_INT 35
17238: PPUSH
17239: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
17243: LD_VAR 0 1
17247: PPUSH
17248: LD_VAR 0 2
17252: PPUSH
17253: LD_VAR 0 3
17257: PPUSH
17258: CALL 70535 0 3
17262: NOT
17263: PUSH
17264: LD_VAR 0 1
17268: PPUSH
17269: CALL_OW 314
17273: AND
17274: IFFALSE 17278
// exit ;
17276: GO 17417
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
17278: LD_VAR 0 2
17282: PPUSH
17283: LD_VAR 0 3
17287: PPUSH
17288: CALL_OW 428
17292: PUSH
17293: LD_VAR 0 1
17297: EQUAL
17298: PUSH
17299: LD_VAR 0 1
17303: PPUSH
17304: CALL_OW 314
17308: NOT
17309: AND
17310: IFFALSE 17236
// PlaySoundXY ( x , y , PlantMine ) ;
17312: LD_VAR 0 2
17316: PPUSH
17317: LD_VAR 0 3
17321: PPUSH
17322: LD_STRING PlantMine
17324: PPUSH
17325: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
17329: LD_VAR 0 2
17333: PPUSH
17334: LD_VAR 0 3
17338: PPUSH
17339: LD_VAR 0 1
17343: PPUSH
17344: CALL_OW 255
17348: PPUSH
17349: LD_INT 0
17351: PPUSH
17352: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17356: LD_ADDR_EXP 52
17360: PUSH
17361: LD_EXP 52
17365: PPUSH
17366: LD_VAR 0 5
17370: PUSH
17371: LD_EXP 52
17375: PUSH
17376: LD_VAR 0 5
17380: ARRAY
17381: PUSH
17382: LD_INT 1
17384: PLUS
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PPUSH
17390: LD_VAR 0 2
17394: PUSH
17395: LD_VAR 0 3
17399: PUSH
17400: EMPTY
17401: LIST
17402: LIST
17403: PPUSH
17404: CALL 39414 0 3
17408: ST_TO_ADDR
// result := true ;
17409: LD_ADDR_VAR 0 4
17413: PUSH
17414: LD_INT 1
17416: ST_TO_ADDR
// end ;
17417: LD_VAR 0 4
17421: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
17422: LD_INT 0
17424: PPUSH
17425: PPUSH
17426: PPUSH
// if not unit in minersList then
17427: LD_VAR 0 1
17431: PUSH
17432: LD_EXP 51
17436: IN
17437: NOT
17438: IFFALSE 17442
// exit ;
17440: GO 17834
// index := GetElementIndex ( minersList , unit ) ;
17442: LD_ADDR_VAR 0 6
17446: PUSH
17447: LD_EXP 51
17451: PPUSH
17452: LD_VAR 0 1
17456: PPUSH
17457: CALL 39199 0 2
17461: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
17462: LD_ADDR_VAR 0 5
17466: PUSH
17467: DOUBLE
17468: LD_EXP 52
17472: PUSH
17473: LD_VAR 0 6
17477: ARRAY
17478: INC
17479: ST_TO_ADDR
17480: LD_INT 1
17482: PUSH
17483: FOR_DOWNTO
17484: IFFALSE 17645
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
17486: LD_EXP 52
17490: PUSH
17491: LD_VAR 0 6
17495: ARRAY
17496: PUSH
17497: LD_VAR 0 5
17501: ARRAY
17502: PUSH
17503: LD_INT 1
17505: ARRAY
17506: PUSH
17507: LD_VAR 0 2
17511: EQUAL
17512: PUSH
17513: LD_EXP 52
17517: PUSH
17518: LD_VAR 0 6
17522: ARRAY
17523: PUSH
17524: LD_VAR 0 5
17528: ARRAY
17529: PUSH
17530: LD_INT 2
17532: ARRAY
17533: PUSH
17534: LD_VAR 0 3
17538: EQUAL
17539: AND
17540: IFFALSE 17643
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17542: LD_EXP 52
17546: PUSH
17547: LD_VAR 0 6
17551: ARRAY
17552: PUSH
17553: LD_VAR 0 5
17557: ARRAY
17558: PUSH
17559: LD_INT 1
17561: ARRAY
17562: PPUSH
17563: LD_EXP 52
17567: PUSH
17568: LD_VAR 0 6
17572: ARRAY
17573: PUSH
17574: LD_VAR 0 5
17578: ARRAY
17579: PUSH
17580: LD_INT 2
17582: ARRAY
17583: PPUSH
17584: LD_VAR 0 1
17588: PPUSH
17589: CALL_OW 255
17593: PPUSH
17594: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17598: LD_ADDR_EXP 52
17602: PUSH
17603: LD_EXP 52
17607: PPUSH
17608: LD_VAR 0 6
17612: PPUSH
17613: LD_EXP 52
17617: PUSH
17618: LD_VAR 0 6
17622: ARRAY
17623: PPUSH
17624: LD_VAR 0 5
17628: PPUSH
17629: CALL_OW 3
17633: PPUSH
17634: CALL_OW 1
17638: ST_TO_ADDR
// exit ;
17639: POP
17640: POP
17641: GO 17834
// end ; end ;
17643: GO 17483
17645: POP
17646: POP
// for i := minerMinesList [ index ] downto 1 do
17647: LD_ADDR_VAR 0 5
17651: PUSH
17652: DOUBLE
17653: LD_EXP 52
17657: PUSH
17658: LD_VAR 0 6
17662: ARRAY
17663: INC
17664: ST_TO_ADDR
17665: LD_INT 1
17667: PUSH
17668: FOR_DOWNTO
17669: IFFALSE 17832
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
17671: LD_EXP 52
17675: PUSH
17676: LD_VAR 0 6
17680: ARRAY
17681: PUSH
17682: LD_VAR 0 5
17686: ARRAY
17687: PUSH
17688: LD_INT 1
17690: ARRAY
17691: PPUSH
17692: LD_EXP 52
17696: PUSH
17697: LD_VAR 0 6
17701: ARRAY
17702: PUSH
17703: LD_VAR 0 5
17707: ARRAY
17708: PUSH
17709: LD_INT 2
17711: ARRAY
17712: PPUSH
17713: LD_VAR 0 2
17717: PPUSH
17718: LD_VAR 0 3
17722: PPUSH
17723: CALL_OW 298
17727: PUSH
17728: LD_INT 6
17730: LESS
17731: IFFALSE 17830
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17733: LD_EXP 52
17737: PUSH
17738: LD_VAR 0 6
17742: ARRAY
17743: PUSH
17744: LD_VAR 0 5
17748: ARRAY
17749: PUSH
17750: LD_INT 1
17752: ARRAY
17753: PPUSH
17754: LD_EXP 52
17758: PUSH
17759: LD_VAR 0 6
17763: ARRAY
17764: PUSH
17765: LD_VAR 0 5
17769: ARRAY
17770: PUSH
17771: LD_INT 2
17773: ARRAY
17774: PPUSH
17775: LD_VAR 0 1
17779: PPUSH
17780: CALL_OW 255
17784: PPUSH
17785: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17789: LD_ADDR_EXP 52
17793: PUSH
17794: LD_EXP 52
17798: PPUSH
17799: LD_VAR 0 6
17803: PPUSH
17804: LD_EXP 52
17808: PUSH
17809: LD_VAR 0 6
17813: ARRAY
17814: PPUSH
17815: LD_VAR 0 5
17819: PPUSH
17820: CALL_OW 3
17824: PPUSH
17825: CALL_OW 1
17829: ST_TO_ADDR
// end ; end ;
17830: GO 17668
17832: POP
17833: POP
// end ;
17834: LD_VAR 0 4
17838: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
17839: LD_INT 0
17841: PPUSH
17842: PPUSH
17843: PPUSH
17844: PPUSH
17845: PPUSH
17846: PPUSH
17847: PPUSH
17848: PPUSH
17849: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
17850: LD_VAR 0 1
17854: PPUSH
17855: CALL_OW 264
17859: PUSH
17860: LD_INT 81
17862: EQUAL
17863: NOT
17864: PUSH
17865: LD_VAR 0 1
17869: PUSH
17870: LD_EXP 51
17874: IN
17875: NOT
17876: OR
17877: IFFALSE 17881
// exit ;
17879: GO 18203
// index := GetElementIndex ( minersList , unit ) ;
17881: LD_ADDR_VAR 0 6
17885: PUSH
17886: LD_EXP 51
17890: PPUSH
17891: LD_VAR 0 1
17895: PPUSH
17896: CALL 39199 0 2
17900: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
17901: LD_ADDR_VAR 0 8
17905: PUSH
17906: LD_EXP 53
17910: PUSH
17911: LD_EXP 52
17915: PUSH
17916: LD_VAR 0 6
17920: ARRAY
17921: MINUS
17922: ST_TO_ADDR
// if not minesFreeAmount then
17923: LD_VAR 0 8
17927: NOT
17928: IFFALSE 17932
// exit ;
17930: GO 18203
// tmp := [ ] ;
17932: LD_ADDR_VAR 0 7
17936: PUSH
17937: EMPTY
17938: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
17939: LD_ADDR_VAR 0 5
17943: PUSH
17944: DOUBLE
17945: LD_INT 1
17947: DEC
17948: ST_TO_ADDR
17949: LD_VAR 0 8
17953: PUSH
17954: FOR_TO
17955: IFFALSE 18150
// begin _d := rand ( 0 , 5 ) ;
17957: LD_ADDR_VAR 0 11
17961: PUSH
17962: LD_INT 0
17964: PPUSH
17965: LD_INT 5
17967: PPUSH
17968: CALL_OW 12
17972: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
17973: LD_ADDR_VAR 0 12
17977: PUSH
17978: LD_INT 2
17980: PPUSH
17981: LD_INT 6
17983: PPUSH
17984: CALL_OW 12
17988: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
17989: LD_ADDR_VAR 0 9
17993: PUSH
17994: LD_VAR 0 2
17998: PPUSH
17999: LD_VAR 0 11
18003: PPUSH
18004: LD_VAR 0 12
18008: PPUSH
18009: CALL_OW 272
18013: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
18014: LD_ADDR_VAR 0 10
18018: PUSH
18019: LD_VAR 0 3
18023: PPUSH
18024: LD_VAR 0 11
18028: PPUSH
18029: LD_VAR 0 12
18033: PPUSH
18034: CALL_OW 273
18038: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
18039: LD_VAR 0 9
18043: PPUSH
18044: LD_VAR 0 10
18048: PPUSH
18049: CALL_OW 488
18053: PUSH
18054: LD_VAR 0 9
18058: PUSH
18059: LD_VAR 0 10
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: LD_VAR 0 7
18072: IN
18073: NOT
18074: AND
18075: PUSH
18076: LD_VAR 0 9
18080: PPUSH
18081: LD_VAR 0 10
18085: PPUSH
18086: CALL_OW 458
18090: NOT
18091: AND
18092: IFFALSE 18134
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
18094: LD_ADDR_VAR 0 7
18098: PUSH
18099: LD_VAR 0 7
18103: PPUSH
18104: LD_VAR 0 7
18108: PUSH
18109: LD_INT 1
18111: PLUS
18112: PPUSH
18113: LD_VAR 0 9
18117: PUSH
18118: LD_VAR 0 10
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PPUSH
18127: CALL_OW 1
18131: ST_TO_ADDR
18132: GO 18148
// i := i - 1 ;
18134: LD_ADDR_VAR 0 5
18138: PUSH
18139: LD_VAR 0 5
18143: PUSH
18144: LD_INT 1
18146: MINUS
18147: ST_TO_ADDR
// end ;
18148: GO 17954
18150: POP
18151: POP
// for i in tmp do
18152: LD_ADDR_VAR 0 5
18156: PUSH
18157: LD_VAR 0 7
18161: PUSH
18162: FOR_IN
18163: IFFALSE 18201
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
18165: LD_VAR 0 1
18169: PPUSH
18170: LD_VAR 0 5
18174: PUSH
18175: LD_INT 1
18177: ARRAY
18178: PPUSH
18179: LD_VAR 0 5
18183: PUSH
18184: LD_INT 2
18186: ARRAY
18187: PPUSH
18188: CALL 17147 0 3
18192: NOT
18193: IFFALSE 18199
// exit ;
18195: POP
18196: POP
18197: GO 18203
18199: GO 18162
18201: POP
18202: POP
// end ;
18203: LD_VAR 0 4
18207: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
18208: LD_INT 0
18210: PPUSH
18211: PPUSH
18212: PPUSH
18213: PPUSH
18214: PPUSH
18215: PPUSH
18216: PPUSH
// if not GetClass ( unit ) = class_sniper then
18217: LD_VAR 0 1
18221: PPUSH
18222: CALL_OW 257
18226: PUSH
18227: LD_INT 5
18229: EQUAL
18230: NOT
18231: IFFALSE 18235
// exit ;
18233: GO 18623
// dist := 8 ;
18235: LD_ADDR_VAR 0 5
18239: PUSH
18240: LD_INT 8
18242: ST_TO_ADDR
// viewRange := 12 ;
18243: LD_ADDR_VAR 0 7
18247: PUSH
18248: LD_INT 12
18250: ST_TO_ADDR
// side := GetSide ( unit ) ;
18251: LD_ADDR_VAR 0 6
18255: PUSH
18256: LD_VAR 0 1
18260: PPUSH
18261: CALL_OW 255
18265: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
18266: LD_INT 61
18268: PPUSH
18269: LD_VAR 0 6
18273: PPUSH
18274: CALL_OW 321
18278: PUSH
18279: LD_INT 2
18281: EQUAL
18282: IFFALSE 18292
// viewRange := 16 ;
18284: LD_ADDR_VAR 0 7
18288: PUSH
18289: LD_INT 16
18291: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
18292: LD_VAR 0 1
18296: PPUSH
18297: LD_VAR 0 2
18301: PPUSH
18302: LD_VAR 0 3
18306: PPUSH
18307: CALL_OW 297
18311: PUSH
18312: LD_VAR 0 5
18316: GREATER
18317: IFFALSE 18396
// begin ComMoveXY ( unit , x , y ) ;
18319: LD_VAR 0 1
18323: PPUSH
18324: LD_VAR 0 2
18328: PPUSH
18329: LD_VAR 0 3
18333: PPUSH
18334: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18338: LD_INT 35
18340: PPUSH
18341: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
18345: LD_VAR 0 1
18349: PPUSH
18350: LD_VAR 0 2
18354: PPUSH
18355: LD_VAR 0 3
18359: PPUSH
18360: CALL 70535 0 3
18364: NOT
18365: IFFALSE 18369
// exit ;
18367: GO 18623
// until GetDistUnitXY ( unit , x , y ) < dist ;
18369: LD_VAR 0 1
18373: PPUSH
18374: LD_VAR 0 2
18378: PPUSH
18379: LD_VAR 0 3
18383: PPUSH
18384: CALL_OW 297
18388: PUSH
18389: LD_VAR 0 5
18393: LESS
18394: IFFALSE 18338
// end ; ComTurnXY ( unit , x , y ) ;
18396: LD_VAR 0 1
18400: PPUSH
18401: LD_VAR 0 2
18405: PPUSH
18406: LD_VAR 0 3
18410: PPUSH
18411: CALL_OW 118
// wait ( 5 ) ;
18415: LD_INT 5
18417: PPUSH
18418: CALL_OW 67
// _d := GetDir ( unit ) ;
18422: LD_ADDR_VAR 0 10
18426: PUSH
18427: LD_VAR 0 1
18431: PPUSH
18432: CALL_OW 254
18436: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
18437: LD_ADDR_VAR 0 8
18441: PUSH
18442: LD_VAR 0 1
18446: PPUSH
18447: CALL_OW 250
18451: PPUSH
18452: LD_VAR 0 10
18456: PPUSH
18457: LD_VAR 0 5
18461: PPUSH
18462: CALL_OW 272
18466: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
18467: LD_ADDR_VAR 0 9
18471: PUSH
18472: LD_VAR 0 1
18476: PPUSH
18477: CALL_OW 251
18481: PPUSH
18482: LD_VAR 0 10
18486: PPUSH
18487: LD_VAR 0 5
18491: PPUSH
18492: CALL_OW 273
18496: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18497: LD_VAR 0 8
18501: PPUSH
18502: LD_VAR 0 9
18506: PPUSH
18507: CALL_OW 488
18511: NOT
18512: IFFALSE 18516
// exit ;
18514: GO 18623
// ComAnimCustom ( unit , 1 ) ;
18516: LD_VAR 0 1
18520: PPUSH
18521: LD_INT 1
18523: PPUSH
18524: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
18528: LD_VAR 0 8
18532: PPUSH
18533: LD_VAR 0 9
18537: PPUSH
18538: LD_VAR 0 6
18542: PPUSH
18543: LD_VAR 0 7
18547: PPUSH
18548: CALL_OW 330
// repeat wait ( 1 ) ;
18552: LD_INT 1
18554: PPUSH
18555: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
18559: LD_VAR 0 1
18563: PPUSH
18564: CALL_OW 316
18568: PUSH
18569: LD_VAR 0 1
18573: PPUSH
18574: CALL_OW 314
18578: OR
18579: PUSH
18580: LD_VAR 0 1
18584: PPUSH
18585: CALL_OW 302
18589: NOT
18590: OR
18591: PUSH
18592: LD_VAR 0 1
18596: PPUSH
18597: CALL_OW 301
18601: OR
18602: IFFALSE 18552
// RemoveSeeing ( _x , _y , side ) ;
18604: LD_VAR 0 8
18608: PPUSH
18609: LD_VAR 0 9
18613: PPUSH
18614: LD_VAR 0 6
18618: PPUSH
18619: CALL_OW 331
// end ; end_of_file
18623: LD_VAR 0 4
18627: RET
// every 0 0$1 do
18628: GO 18630
18630: DISABLE
// begin enable ;
18631: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18632: LD_STRING updateTimer(
18634: PUSH
18635: LD_OWVAR 1
18639: STR
18640: PUSH
18641: LD_STRING );
18643: STR
18644: PPUSH
18645: CALL_OW 559
// end ;
18649: END
// export function SOS_MapStart ( ) ; begin
18650: LD_INT 0
18652: PPUSH
// if streamModeActive then
18653: LD_EXP 54
18657: IFFALSE 18666
// DefineStreamItems ( true ) ;
18659: LD_INT 1
18661: PPUSH
18662: CALL 20320 0 1
// UpdateFactoryWaypoints ( ) ;
18666: CALL 33181 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18670: CALL 33438 0 0
// end ;
18674: LD_VAR 0 1
18678: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18679: LD_INT 0
18681: PPUSH
// if p2 = hack_mode then
18682: LD_VAR 0 2
18686: PUSH
18687: LD_INT 100
18689: EQUAL
18690: IFFALSE 19693
// begin if not StreamModeActive then
18692: LD_EXP 54
18696: NOT
18697: IFFALSE 18707
// StreamModeActive := true ;
18699: LD_ADDR_EXP 54
18703: PUSH
18704: LD_INT 1
18706: ST_TO_ADDR
// if p3 = 0 then
18707: LD_VAR 0 3
18711: PUSH
18712: LD_INT 0
18714: EQUAL
18715: IFFALSE 18721
// InitStreamMode ;
18717: CALL 19856 0 0
// if p3 = 1 then
18721: LD_VAR 0 3
18725: PUSH
18726: LD_INT 1
18728: EQUAL
18729: IFFALSE 18739
// sRocket := true ;
18731: LD_ADDR_EXP 59
18735: PUSH
18736: LD_INT 1
18738: ST_TO_ADDR
// if p3 = 2 then
18739: LD_VAR 0 3
18743: PUSH
18744: LD_INT 2
18746: EQUAL
18747: IFFALSE 18757
// sSpeed := true ;
18749: LD_ADDR_EXP 58
18753: PUSH
18754: LD_INT 1
18756: ST_TO_ADDR
// if p3 = 3 then
18757: LD_VAR 0 3
18761: PUSH
18762: LD_INT 3
18764: EQUAL
18765: IFFALSE 18775
// sEngine := true ;
18767: LD_ADDR_EXP 60
18771: PUSH
18772: LD_INT 1
18774: ST_TO_ADDR
// if p3 = 4 then
18775: LD_VAR 0 3
18779: PUSH
18780: LD_INT 4
18782: EQUAL
18783: IFFALSE 18793
// sSpec := true ;
18785: LD_ADDR_EXP 57
18789: PUSH
18790: LD_INT 1
18792: ST_TO_ADDR
// if p3 = 5 then
18793: LD_VAR 0 3
18797: PUSH
18798: LD_INT 5
18800: EQUAL
18801: IFFALSE 18811
// sLevel := true ;
18803: LD_ADDR_EXP 61
18807: PUSH
18808: LD_INT 1
18810: ST_TO_ADDR
// if p3 = 6 then
18811: LD_VAR 0 3
18815: PUSH
18816: LD_INT 6
18818: EQUAL
18819: IFFALSE 18829
// sArmoury := true ;
18821: LD_ADDR_EXP 62
18825: PUSH
18826: LD_INT 1
18828: ST_TO_ADDR
// if p3 = 7 then
18829: LD_VAR 0 3
18833: PUSH
18834: LD_INT 7
18836: EQUAL
18837: IFFALSE 18847
// sRadar := true ;
18839: LD_ADDR_EXP 63
18843: PUSH
18844: LD_INT 1
18846: ST_TO_ADDR
// if p3 = 8 then
18847: LD_VAR 0 3
18851: PUSH
18852: LD_INT 8
18854: EQUAL
18855: IFFALSE 18865
// sBunker := true ;
18857: LD_ADDR_EXP 64
18861: PUSH
18862: LD_INT 1
18864: ST_TO_ADDR
// if p3 = 9 then
18865: LD_VAR 0 3
18869: PUSH
18870: LD_INT 9
18872: EQUAL
18873: IFFALSE 18883
// sHack := true ;
18875: LD_ADDR_EXP 65
18879: PUSH
18880: LD_INT 1
18882: ST_TO_ADDR
// if p3 = 10 then
18883: LD_VAR 0 3
18887: PUSH
18888: LD_INT 10
18890: EQUAL
18891: IFFALSE 18901
// sFire := true ;
18893: LD_ADDR_EXP 66
18897: PUSH
18898: LD_INT 1
18900: ST_TO_ADDR
// if p3 = 11 then
18901: LD_VAR 0 3
18905: PUSH
18906: LD_INT 11
18908: EQUAL
18909: IFFALSE 18919
// sRefresh := true ;
18911: LD_ADDR_EXP 67
18915: PUSH
18916: LD_INT 1
18918: ST_TO_ADDR
// if p3 = 12 then
18919: LD_VAR 0 3
18923: PUSH
18924: LD_INT 12
18926: EQUAL
18927: IFFALSE 18937
// sExp := true ;
18929: LD_ADDR_EXP 68
18933: PUSH
18934: LD_INT 1
18936: ST_TO_ADDR
// if p3 = 13 then
18937: LD_VAR 0 3
18941: PUSH
18942: LD_INT 13
18944: EQUAL
18945: IFFALSE 18955
// sDepot := true ;
18947: LD_ADDR_EXP 69
18951: PUSH
18952: LD_INT 1
18954: ST_TO_ADDR
// if p3 = 14 then
18955: LD_VAR 0 3
18959: PUSH
18960: LD_INT 14
18962: EQUAL
18963: IFFALSE 18973
// sFlag := true ;
18965: LD_ADDR_EXP 70
18969: PUSH
18970: LD_INT 1
18972: ST_TO_ADDR
// if p3 = 15 then
18973: LD_VAR 0 3
18977: PUSH
18978: LD_INT 15
18980: EQUAL
18981: IFFALSE 18991
// sKamikadze := true ;
18983: LD_ADDR_EXP 78
18987: PUSH
18988: LD_INT 1
18990: ST_TO_ADDR
// if p3 = 16 then
18991: LD_VAR 0 3
18995: PUSH
18996: LD_INT 16
18998: EQUAL
18999: IFFALSE 19009
// sTroll := true ;
19001: LD_ADDR_EXP 79
19005: PUSH
19006: LD_INT 1
19008: ST_TO_ADDR
// if p3 = 17 then
19009: LD_VAR 0 3
19013: PUSH
19014: LD_INT 17
19016: EQUAL
19017: IFFALSE 19027
// sSlow := true ;
19019: LD_ADDR_EXP 80
19023: PUSH
19024: LD_INT 1
19026: ST_TO_ADDR
// if p3 = 18 then
19027: LD_VAR 0 3
19031: PUSH
19032: LD_INT 18
19034: EQUAL
19035: IFFALSE 19045
// sLack := true ;
19037: LD_ADDR_EXP 81
19041: PUSH
19042: LD_INT 1
19044: ST_TO_ADDR
// if p3 = 19 then
19045: LD_VAR 0 3
19049: PUSH
19050: LD_INT 19
19052: EQUAL
19053: IFFALSE 19063
// sTank := true ;
19055: LD_ADDR_EXP 83
19059: PUSH
19060: LD_INT 1
19062: ST_TO_ADDR
// if p3 = 20 then
19063: LD_VAR 0 3
19067: PUSH
19068: LD_INT 20
19070: EQUAL
19071: IFFALSE 19081
// sRemote := true ;
19073: LD_ADDR_EXP 84
19077: PUSH
19078: LD_INT 1
19080: ST_TO_ADDR
// if p3 = 21 then
19081: LD_VAR 0 3
19085: PUSH
19086: LD_INT 21
19088: EQUAL
19089: IFFALSE 19099
// sPowell := true ;
19091: LD_ADDR_EXP 85
19095: PUSH
19096: LD_INT 1
19098: ST_TO_ADDR
// if p3 = 22 then
19099: LD_VAR 0 3
19103: PUSH
19104: LD_INT 22
19106: EQUAL
19107: IFFALSE 19117
// sTeleport := true ;
19109: LD_ADDR_EXP 88
19113: PUSH
19114: LD_INT 1
19116: ST_TO_ADDR
// if p3 = 23 then
19117: LD_VAR 0 3
19121: PUSH
19122: LD_INT 23
19124: EQUAL
19125: IFFALSE 19135
// sOilTower := true ;
19127: LD_ADDR_EXP 90
19131: PUSH
19132: LD_INT 1
19134: ST_TO_ADDR
// if p3 = 24 then
19135: LD_VAR 0 3
19139: PUSH
19140: LD_INT 24
19142: EQUAL
19143: IFFALSE 19153
// sShovel := true ;
19145: LD_ADDR_EXP 91
19149: PUSH
19150: LD_INT 1
19152: ST_TO_ADDR
// if p3 = 25 then
19153: LD_VAR 0 3
19157: PUSH
19158: LD_INT 25
19160: EQUAL
19161: IFFALSE 19171
// sSheik := true ;
19163: LD_ADDR_EXP 92
19167: PUSH
19168: LD_INT 1
19170: ST_TO_ADDR
// if p3 = 26 then
19171: LD_VAR 0 3
19175: PUSH
19176: LD_INT 26
19178: EQUAL
19179: IFFALSE 19189
// sEarthquake := true ;
19181: LD_ADDR_EXP 94
19185: PUSH
19186: LD_INT 1
19188: ST_TO_ADDR
// if p3 = 27 then
19189: LD_VAR 0 3
19193: PUSH
19194: LD_INT 27
19196: EQUAL
19197: IFFALSE 19207
// sAI := true ;
19199: LD_ADDR_EXP 95
19203: PUSH
19204: LD_INT 1
19206: ST_TO_ADDR
// if p3 = 28 then
19207: LD_VAR 0 3
19211: PUSH
19212: LD_INT 28
19214: EQUAL
19215: IFFALSE 19225
// sCargo := true ;
19217: LD_ADDR_EXP 98
19221: PUSH
19222: LD_INT 1
19224: ST_TO_ADDR
// if p3 = 29 then
19225: LD_VAR 0 3
19229: PUSH
19230: LD_INT 29
19232: EQUAL
19233: IFFALSE 19243
// sDLaser := true ;
19235: LD_ADDR_EXP 99
19239: PUSH
19240: LD_INT 1
19242: ST_TO_ADDR
// if p3 = 30 then
19243: LD_VAR 0 3
19247: PUSH
19248: LD_INT 30
19250: EQUAL
19251: IFFALSE 19261
// sExchange := true ;
19253: LD_ADDR_EXP 100
19257: PUSH
19258: LD_INT 1
19260: ST_TO_ADDR
// if p3 = 31 then
19261: LD_VAR 0 3
19265: PUSH
19266: LD_INT 31
19268: EQUAL
19269: IFFALSE 19279
// sFac := true ;
19271: LD_ADDR_EXP 101
19275: PUSH
19276: LD_INT 1
19278: ST_TO_ADDR
// if p3 = 32 then
19279: LD_VAR 0 3
19283: PUSH
19284: LD_INT 32
19286: EQUAL
19287: IFFALSE 19297
// sPower := true ;
19289: LD_ADDR_EXP 102
19293: PUSH
19294: LD_INT 1
19296: ST_TO_ADDR
// if p3 = 33 then
19297: LD_VAR 0 3
19301: PUSH
19302: LD_INT 33
19304: EQUAL
19305: IFFALSE 19315
// sRandom := true ;
19307: LD_ADDR_EXP 103
19311: PUSH
19312: LD_INT 1
19314: ST_TO_ADDR
// if p3 = 34 then
19315: LD_VAR 0 3
19319: PUSH
19320: LD_INT 34
19322: EQUAL
19323: IFFALSE 19333
// sShield := true ;
19325: LD_ADDR_EXP 104
19329: PUSH
19330: LD_INT 1
19332: ST_TO_ADDR
// if p3 = 35 then
19333: LD_VAR 0 3
19337: PUSH
19338: LD_INT 35
19340: EQUAL
19341: IFFALSE 19351
// sTime := true ;
19343: LD_ADDR_EXP 105
19347: PUSH
19348: LD_INT 1
19350: ST_TO_ADDR
// if p3 = 36 then
19351: LD_VAR 0 3
19355: PUSH
19356: LD_INT 36
19358: EQUAL
19359: IFFALSE 19369
// sTools := true ;
19361: LD_ADDR_EXP 106
19365: PUSH
19366: LD_INT 1
19368: ST_TO_ADDR
// if p3 = 101 then
19369: LD_VAR 0 3
19373: PUSH
19374: LD_INT 101
19376: EQUAL
19377: IFFALSE 19387
// sSold := true ;
19379: LD_ADDR_EXP 71
19383: PUSH
19384: LD_INT 1
19386: ST_TO_ADDR
// if p3 = 102 then
19387: LD_VAR 0 3
19391: PUSH
19392: LD_INT 102
19394: EQUAL
19395: IFFALSE 19405
// sDiff := true ;
19397: LD_ADDR_EXP 72
19401: PUSH
19402: LD_INT 1
19404: ST_TO_ADDR
// if p3 = 103 then
19405: LD_VAR 0 3
19409: PUSH
19410: LD_INT 103
19412: EQUAL
19413: IFFALSE 19423
// sFog := true ;
19415: LD_ADDR_EXP 75
19419: PUSH
19420: LD_INT 1
19422: ST_TO_ADDR
// if p3 = 104 then
19423: LD_VAR 0 3
19427: PUSH
19428: LD_INT 104
19430: EQUAL
19431: IFFALSE 19441
// sReset := true ;
19433: LD_ADDR_EXP 76
19437: PUSH
19438: LD_INT 1
19440: ST_TO_ADDR
// if p3 = 105 then
19441: LD_VAR 0 3
19445: PUSH
19446: LD_INT 105
19448: EQUAL
19449: IFFALSE 19459
// sSun := true ;
19451: LD_ADDR_EXP 77
19455: PUSH
19456: LD_INT 1
19458: ST_TO_ADDR
// if p3 = 106 then
19459: LD_VAR 0 3
19463: PUSH
19464: LD_INT 106
19466: EQUAL
19467: IFFALSE 19477
// sTiger := true ;
19469: LD_ADDR_EXP 73
19473: PUSH
19474: LD_INT 1
19476: ST_TO_ADDR
// if p3 = 107 then
19477: LD_VAR 0 3
19481: PUSH
19482: LD_INT 107
19484: EQUAL
19485: IFFALSE 19495
// sBomb := true ;
19487: LD_ADDR_EXP 74
19491: PUSH
19492: LD_INT 1
19494: ST_TO_ADDR
// if p3 = 108 then
19495: LD_VAR 0 3
19499: PUSH
19500: LD_INT 108
19502: EQUAL
19503: IFFALSE 19513
// sWound := true ;
19505: LD_ADDR_EXP 82
19509: PUSH
19510: LD_INT 1
19512: ST_TO_ADDR
// if p3 = 109 then
19513: LD_VAR 0 3
19517: PUSH
19518: LD_INT 109
19520: EQUAL
19521: IFFALSE 19531
// sBetray := true ;
19523: LD_ADDR_EXP 86
19527: PUSH
19528: LD_INT 1
19530: ST_TO_ADDR
// if p3 = 110 then
19531: LD_VAR 0 3
19535: PUSH
19536: LD_INT 110
19538: EQUAL
19539: IFFALSE 19549
// sContamin := true ;
19541: LD_ADDR_EXP 87
19545: PUSH
19546: LD_INT 1
19548: ST_TO_ADDR
// if p3 = 111 then
19549: LD_VAR 0 3
19553: PUSH
19554: LD_INT 111
19556: EQUAL
19557: IFFALSE 19567
// sOil := true ;
19559: LD_ADDR_EXP 89
19563: PUSH
19564: LD_INT 1
19566: ST_TO_ADDR
// if p3 = 112 then
19567: LD_VAR 0 3
19571: PUSH
19572: LD_INT 112
19574: EQUAL
19575: IFFALSE 19585
// sStu := true ;
19577: LD_ADDR_EXP 93
19581: PUSH
19582: LD_INT 1
19584: ST_TO_ADDR
// if p3 = 113 then
19585: LD_VAR 0 3
19589: PUSH
19590: LD_INT 113
19592: EQUAL
19593: IFFALSE 19603
// sBazooka := true ;
19595: LD_ADDR_EXP 96
19599: PUSH
19600: LD_INT 1
19602: ST_TO_ADDR
// if p3 = 114 then
19603: LD_VAR 0 3
19607: PUSH
19608: LD_INT 114
19610: EQUAL
19611: IFFALSE 19621
// sMortar := true ;
19613: LD_ADDR_EXP 97
19617: PUSH
19618: LD_INT 1
19620: ST_TO_ADDR
// if p3 = 115 then
19621: LD_VAR 0 3
19625: PUSH
19626: LD_INT 115
19628: EQUAL
19629: IFFALSE 19639
// sRanger := true ;
19631: LD_ADDR_EXP 107
19635: PUSH
19636: LD_INT 1
19638: ST_TO_ADDR
// if p3 = 116 then
19639: LD_VAR 0 3
19643: PUSH
19644: LD_INT 116
19646: EQUAL
19647: IFFALSE 19657
// sComputer := true ;
19649: LD_ADDR_EXP 108
19653: PUSH
19654: LD_INT 1
19656: ST_TO_ADDR
// if p3 = 117 then
19657: LD_VAR 0 3
19661: PUSH
19662: LD_INT 117
19664: EQUAL
19665: IFFALSE 19675
// s30 := true ;
19667: LD_ADDR_EXP 109
19671: PUSH
19672: LD_INT 1
19674: ST_TO_ADDR
// if p3 = 118 then
19675: LD_VAR 0 3
19679: PUSH
19680: LD_INT 118
19682: EQUAL
19683: IFFALSE 19693
// s60 := true ;
19685: LD_ADDR_EXP 110
19689: PUSH
19690: LD_INT 1
19692: ST_TO_ADDR
// end ; if p2 = stream_mode then
19693: LD_VAR 0 2
19697: PUSH
19698: LD_INT 101
19700: EQUAL
19701: IFFALSE 19829
// begin case p3 of 1 :
19703: LD_VAR 0 3
19707: PUSH
19708: LD_INT 1
19710: DOUBLE
19711: EQUAL
19712: IFTRUE 19716
19714: GO 19723
19716: POP
// hHackUnlimitedResources ; 2 :
19717: CALL 31927 0 0
19721: GO 19829
19723: LD_INT 2
19725: DOUBLE
19726: EQUAL
19727: IFTRUE 19731
19729: GO 19738
19731: POP
// hHackSetLevel10 ; 3 :
19732: CALL 32060 0 0
19736: GO 19829
19738: LD_INT 3
19740: DOUBLE
19741: EQUAL
19742: IFTRUE 19746
19744: GO 19753
19746: POP
// hHackSetLevel10YourUnits ; 4 :
19747: CALL 32145 0 0
19751: GO 19829
19753: LD_INT 4
19755: DOUBLE
19756: EQUAL
19757: IFTRUE 19761
19759: GO 19768
19761: POP
// hHackInvincible ; 5 :
19762: CALL 32593 0 0
19766: GO 19829
19768: LD_INT 5
19770: DOUBLE
19771: EQUAL
19772: IFTRUE 19776
19774: GO 19783
19776: POP
// hHackInvisible ; 6 :
19777: CALL 32704 0 0
19781: GO 19829
19783: LD_INT 6
19785: DOUBLE
19786: EQUAL
19787: IFTRUE 19791
19789: GO 19798
19791: POP
// hHackChangeYourSide ; 7 :
19792: CALL 32761 0 0
19796: GO 19829
19798: LD_INT 7
19800: DOUBLE
19801: EQUAL
19802: IFTRUE 19806
19804: GO 19813
19806: POP
// hHackChangeUnitSide ; 8 :
19807: CALL 32803 0 0
19811: GO 19829
19813: LD_INT 8
19815: DOUBLE
19816: EQUAL
19817: IFTRUE 19821
19819: GO 19828
19821: POP
// hHackFog ; end ;
19822: CALL 32904 0 0
19826: GO 19829
19828: POP
// end ; end ;
19829: LD_VAR 0 7
19833: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
19834: GO 19836
19836: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19837: LD_STRING initStreamRollete();
19839: PPUSH
19840: CALL_OW 559
// InitStreamMode ;
19844: CALL 19856 0 0
// DefineStreamItems ( false ) ;
19848: LD_INT 0
19850: PPUSH
19851: CALL 20320 0 1
// end ;
19855: END
// function InitStreamMode ; begin
19856: LD_INT 0
19858: PPUSH
// streamModeActive := false ;
19859: LD_ADDR_EXP 54
19863: PUSH
19864: LD_INT 0
19866: ST_TO_ADDR
// normalCounter := 36 ;
19867: LD_ADDR_EXP 55
19871: PUSH
19872: LD_INT 36
19874: ST_TO_ADDR
// hardcoreCounter := 18 ;
19875: LD_ADDR_EXP 56
19879: PUSH
19880: LD_INT 18
19882: ST_TO_ADDR
// sRocket := false ;
19883: LD_ADDR_EXP 59
19887: PUSH
19888: LD_INT 0
19890: ST_TO_ADDR
// sSpeed := false ;
19891: LD_ADDR_EXP 58
19895: PUSH
19896: LD_INT 0
19898: ST_TO_ADDR
// sEngine := false ;
19899: LD_ADDR_EXP 60
19903: PUSH
19904: LD_INT 0
19906: ST_TO_ADDR
// sSpec := false ;
19907: LD_ADDR_EXP 57
19911: PUSH
19912: LD_INT 0
19914: ST_TO_ADDR
// sLevel := false ;
19915: LD_ADDR_EXP 61
19919: PUSH
19920: LD_INT 0
19922: ST_TO_ADDR
// sArmoury := false ;
19923: LD_ADDR_EXP 62
19927: PUSH
19928: LD_INT 0
19930: ST_TO_ADDR
// sRadar := false ;
19931: LD_ADDR_EXP 63
19935: PUSH
19936: LD_INT 0
19938: ST_TO_ADDR
// sBunker := false ;
19939: LD_ADDR_EXP 64
19943: PUSH
19944: LD_INT 0
19946: ST_TO_ADDR
// sHack := false ;
19947: LD_ADDR_EXP 65
19951: PUSH
19952: LD_INT 0
19954: ST_TO_ADDR
// sFire := false ;
19955: LD_ADDR_EXP 66
19959: PUSH
19960: LD_INT 0
19962: ST_TO_ADDR
// sRefresh := false ;
19963: LD_ADDR_EXP 67
19967: PUSH
19968: LD_INT 0
19970: ST_TO_ADDR
// sExp := false ;
19971: LD_ADDR_EXP 68
19975: PUSH
19976: LD_INT 0
19978: ST_TO_ADDR
// sDepot := false ;
19979: LD_ADDR_EXP 69
19983: PUSH
19984: LD_INT 0
19986: ST_TO_ADDR
// sFlag := false ;
19987: LD_ADDR_EXP 70
19991: PUSH
19992: LD_INT 0
19994: ST_TO_ADDR
// sKamikadze := false ;
19995: LD_ADDR_EXP 78
19999: PUSH
20000: LD_INT 0
20002: ST_TO_ADDR
// sTroll := false ;
20003: LD_ADDR_EXP 79
20007: PUSH
20008: LD_INT 0
20010: ST_TO_ADDR
// sSlow := false ;
20011: LD_ADDR_EXP 80
20015: PUSH
20016: LD_INT 0
20018: ST_TO_ADDR
// sLack := false ;
20019: LD_ADDR_EXP 81
20023: PUSH
20024: LD_INT 0
20026: ST_TO_ADDR
// sTank := false ;
20027: LD_ADDR_EXP 83
20031: PUSH
20032: LD_INT 0
20034: ST_TO_ADDR
// sRemote := false ;
20035: LD_ADDR_EXP 84
20039: PUSH
20040: LD_INT 0
20042: ST_TO_ADDR
// sPowell := false ;
20043: LD_ADDR_EXP 85
20047: PUSH
20048: LD_INT 0
20050: ST_TO_ADDR
// sTeleport := false ;
20051: LD_ADDR_EXP 88
20055: PUSH
20056: LD_INT 0
20058: ST_TO_ADDR
// sOilTower := false ;
20059: LD_ADDR_EXP 90
20063: PUSH
20064: LD_INT 0
20066: ST_TO_ADDR
// sShovel := false ;
20067: LD_ADDR_EXP 91
20071: PUSH
20072: LD_INT 0
20074: ST_TO_ADDR
// sSheik := false ;
20075: LD_ADDR_EXP 92
20079: PUSH
20080: LD_INT 0
20082: ST_TO_ADDR
// sEarthquake := false ;
20083: LD_ADDR_EXP 94
20087: PUSH
20088: LD_INT 0
20090: ST_TO_ADDR
// sAI := false ;
20091: LD_ADDR_EXP 95
20095: PUSH
20096: LD_INT 0
20098: ST_TO_ADDR
// sCargo := false ;
20099: LD_ADDR_EXP 98
20103: PUSH
20104: LD_INT 0
20106: ST_TO_ADDR
// sDLaser := false ;
20107: LD_ADDR_EXP 99
20111: PUSH
20112: LD_INT 0
20114: ST_TO_ADDR
// sExchange := false ;
20115: LD_ADDR_EXP 100
20119: PUSH
20120: LD_INT 0
20122: ST_TO_ADDR
// sFac := false ;
20123: LD_ADDR_EXP 101
20127: PUSH
20128: LD_INT 0
20130: ST_TO_ADDR
// sPower := false ;
20131: LD_ADDR_EXP 102
20135: PUSH
20136: LD_INT 0
20138: ST_TO_ADDR
// sRandom := false ;
20139: LD_ADDR_EXP 103
20143: PUSH
20144: LD_INT 0
20146: ST_TO_ADDR
// sShield := false ;
20147: LD_ADDR_EXP 104
20151: PUSH
20152: LD_INT 0
20154: ST_TO_ADDR
// sTime := false ;
20155: LD_ADDR_EXP 105
20159: PUSH
20160: LD_INT 0
20162: ST_TO_ADDR
// sTools := false ;
20163: LD_ADDR_EXP 106
20167: PUSH
20168: LD_INT 0
20170: ST_TO_ADDR
// sSold := false ;
20171: LD_ADDR_EXP 71
20175: PUSH
20176: LD_INT 0
20178: ST_TO_ADDR
// sDiff := false ;
20179: LD_ADDR_EXP 72
20183: PUSH
20184: LD_INT 0
20186: ST_TO_ADDR
// sFog := false ;
20187: LD_ADDR_EXP 75
20191: PUSH
20192: LD_INT 0
20194: ST_TO_ADDR
// sReset := false ;
20195: LD_ADDR_EXP 76
20199: PUSH
20200: LD_INT 0
20202: ST_TO_ADDR
// sSun := false ;
20203: LD_ADDR_EXP 77
20207: PUSH
20208: LD_INT 0
20210: ST_TO_ADDR
// sTiger := false ;
20211: LD_ADDR_EXP 73
20215: PUSH
20216: LD_INT 0
20218: ST_TO_ADDR
// sBomb := false ;
20219: LD_ADDR_EXP 74
20223: PUSH
20224: LD_INT 0
20226: ST_TO_ADDR
// sWound := false ;
20227: LD_ADDR_EXP 82
20231: PUSH
20232: LD_INT 0
20234: ST_TO_ADDR
// sBetray := false ;
20235: LD_ADDR_EXP 86
20239: PUSH
20240: LD_INT 0
20242: ST_TO_ADDR
// sContamin := false ;
20243: LD_ADDR_EXP 87
20247: PUSH
20248: LD_INT 0
20250: ST_TO_ADDR
// sOil := false ;
20251: LD_ADDR_EXP 89
20255: PUSH
20256: LD_INT 0
20258: ST_TO_ADDR
// sStu := false ;
20259: LD_ADDR_EXP 93
20263: PUSH
20264: LD_INT 0
20266: ST_TO_ADDR
// sBazooka := false ;
20267: LD_ADDR_EXP 96
20271: PUSH
20272: LD_INT 0
20274: ST_TO_ADDR
// sMortar := false ;
20275: LD_ADDR_EXP 97
20279: PUSH
20280: LD_INT 0
20282: ST_TO_ADDR
// sRanger := false ;
20283: LD_ADDR_EXP 107
20287: PUSH
20288: LD_INT 0
20290: ST_TO_ADDR
// sComputer := false ;
20291: LD_ADDR_EXP 108
20295: PUSH
20296: LD_INT 0
20298: ST_TO_ADDR
// s30 := false ;
20299: LD_ADDR_EXP 109
20303: PUSH
20304: LD_INT 0
20306: ST_TO_ADDR
// s60 := false ;
20307: LD_ADDR_EXP 110
20311: PUSH
20312: LD_INT 0
20314: ST_TO_ADDR
// end ;
20315: LD_VAR 0 1
20319: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20320: LD_INT 0
20322: PPUSH
20323: PPUSH
20324: PPUSH
20325: PPUSH
20326: PPUSH
20327: PPUSH
20328: PPUSH
// result := [ ] ;
20329: LD_ADDR_VAR 0 2
20333: PUSH
20334: EMPTY
20335: ST_TO_ADDR
// if campaign_id = 1 then
20336: LD_OWVAR 69
20340: PUSH
20341: LD_INT 1
20343: EQUAL
20344: IFFALSE 23510
// begin case mission_number of 1 :
20346: LD_OWVAR 70
20350: PUSH
20351: LD_INT 1
20353: DOUBLE
20354: EQUAL
20355: IFTRUE 20359
20357: GO 20435
20359: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20360: LD_ADDR_VAR 0 2
20364: PUSH
20365: LD_INT 2
20367: PUSH
20368: LD_INT 4
20370: PUSH
20371: LD_INT 11
20373: PUSH
20374: LD_INT 12
20376: PUSH
20377: LD_INT 15
20379: PUSH
20380: LD_INT 16
20382: PUSH
20383: LD_INT 22
20385: PUSH
20386: LD_INT 23
20388: PUSH
20389: LD_INT 26
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 101
20405: PUSH
20406: LD_INT 102
20408: PUSH
20409: LD_INT 106
20411: PUSH
20412: LD_INT 116
20414: PUSH
20415: LD_INT 117
20417: PUSH
20418: LD_INT 118
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: ST_TO_ADDR
20433: GO 23508
20435: LD_INT 2
20437: DOUBLE
20438: EQUAL
20439: IFTRUE 20443
20441: GO 20527
20443: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20444: LD_ADDR_VAR 0 2
20448: PUSH
20449: LD_INT 2
20451: PUSH
20452: LD_INT 4
20454: PUSH
20455: LD_INT 11
20457: PUSH
20458: LD_INT 12
20460: PUSH
20461: LD_INT 15
20463: PUSH
20464: LD_INT 16
20466: PUSH
20467: LD_INT 22
20469: PUSH
20470: LD_INT 23
20472: PUSH
20473: LD_INT 26
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: PUSH
20487: LD_INT 101
20489: PUSH
20490: LD_INT 102
20492: PUSH
20493: LD_INT 105
20495: PUSH
20496: LD_INT 106
20498: PUSH
20499: LD_INT 108
20501: PUSH
20502: LD_INT 116
20504: PUSH
20505: LD_INT 117
20507: PUSH
20508: LD_INT 118
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: ST_TO_ADDR
20525: GO 23508
20527: LD_INT 3
20529: DOUBLE
20530: EQUAL
20531: IFTRUE 20535
20533: GO 20623
20535: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20536: LD_ADDR_VAR 0 2
20540: PUSH
20541: LD_INT 2
20543: PUSH
20544: LD_INT 4
20546: PUSH
20547: LD_INT 5
20549: PUSH
20550: LD_INT 11
20552: PUSH
20553: LD_INT 12
20555: PUSH
20556: LD_INT 15
20558: PUSH
20559: LD_INT 16
20561: PUSH
20562: LD_INT 22
20564: PUSH
20565: LD_INT 26
20567: PUSH
20568: LD_INT 36
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: PUSH
20583: LD_INT 101
20585: PUSH
20586: LD_INT 102
20588: PUSH
20589: LD_INT 105
20591: PUSH
20592: LD_INT 106
20594: PUSH
20595: LD_INT 108
20597: PUSH
20598: LD_INT 116
20600: PUSH
20601: LD_INT 117
20603: PUSH
20604: LD_INT 118
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: ST_TO_ADDR
20621: GO 23508
20623: LD_INT 4
20625: DOUBLE
20626: EQUAL
20627: IFTRUE 20631
20629: GO 20727
20631: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20632: LD_ADDR_VAR 0 2
20636: PUSH
20637: LD_INT 2
20639: PUSH
20640: LD_INT 4
20642: PUSH
20643: LD_INT 5
20645: PUSH
20646: LD_INT 8
20648: PUSH
20649: LD_INT 11
20651: PUSH
20652: LD_INT 12
20654: PUSH
20655: LD_INT 15
20657: PUSH
20658: LD_INT 16
20660: PUSH
20661: LD_INT 22
20663: PUSH
20664: LD_INT 23
20666: PUSH
20667: LD_INT 26
20669: PUSH
20670: LD_INT 36
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: PUSH
20687: LD_INT 101
20689: PUSH
20690: LD_INT 102
20692: PUSH
20693: LD_INT 105
20695: PUSH
20696: LD_INT 106
20698: PUSH
20699: LD_INT 108
20701: PUSH
20702: LD_INT 116
20704: PUSH
20705: LD_INT 117
20707: PUSH
20708: LD_INT 118
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: ST_TO_ADDR
20725: GO 23508
20727: LD_INT 5
20729: DOUBLE
20730: EQUAL
20731: IFTRUE 20735
20733: GO 20847
20735: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20736: LD_ADDR_VAR 0 2
20740: PUSH
20741: LD_INT 2
20743: PUSH
20744: LD_INT 4
20746: PUSH
20747: LD_INT 5
20749: PUSH
20750: LD_INT 6
20752: PUSH
20753: LD_INT 8
20755: PUSH
20756: LD_INT 11
20758: PUSH
20759: LD_INT 12
20761: PUSH
20762: LD_INT 15
20764: PUSH
20765: LD_INT 16
20767: PUSH
20768: LD_INT 22
20770: PUSH
20771: LD_INT 23
20773: PUSH
20774: LD_INT 25
20776: PUSH
20777: LD_INT 26
20779: PUSH
20780: LD_INT 36
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: PUSH
20799: LD_INT 101
20801: PUSH
20802: LD_INT 102
20804: PUSH
20805: LD_INT 105
20807: PUSH
20808: LD_INT 106
20810: PUSH
20811: LD_INT 108
20813: PUSH
20814: LD_INT 109
20816: PUSH
20817: LD_INT 112
20819: PUSH
20820: LD_INT 116
20822: PUSH
20823: LD_INT 117
20825: PUSH
20826: LD_INT 118
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: ST_TO_ADDR
20845: GO 23508
20847: LD_INT 6
20849: DOUBLE
20850: EQUAL
20851: IFTRUE 20855
20853: GO 20987
20855: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20856: LD_ADDR_VAR 0 2
20860: PUSH
20861: LD_INT 2
20863: PUSH
20864: LD_INT 4
20866: PUSH
20867: LD_INT 5
20869: PUSH
20870: LD_INT 6
20872: PUSH
20873: LD_INT 8
20875: PUSH
20876: LD_INT 11
20878: PUSH
20879: LD_INT 12
20881: PUSH
20882: LD_INT 15
20884: PUSH
20885: LD_INT 16
20887: PUSH
20888: LD_INT 20
20890: PUSH
20891: LD_INT 21
20893: PUSH
20894: LD_INT 22
20896: PUSH
20897: LD_INT 23
20899: PUSH
20900: LD_INT 25
20902: PUSH
20903: LD_INT 26
20905: PUSH
20906: LD_INT 30
20908: PUSH
20909: LD_INT 31
20911: PUSH
20912: LD_INT 32
20914: PUSH
20915: LD_INT 36
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: PUSH
20939: LD_INT 101
20941: PUSH
20942: LD_INT 102
20944: PUSH
20945: LD_INT 105
20947: PUSH
20948: LD_INT 106
20950: PUSH
20951: LD_INT 108
20953: PUSH
20954: LD_INT 109
20956: PUSH
20957: LD_INT 112
20959: PUSH
20960: LD_INT 116
20962: PUSH
20963: LD_INT 117
20965: PUSH
20966: LD_INT 118
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: ST_TO_ADDR
20985: GO 23508
20987: LD_INT 7
20989: DOUBLE
20990: EQUAL
20991: IFTRUE 20995
20993: GO 21107
20995: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20996: LD_ADDR_VAR 0 2
21000: PUSH
21001: LD_INT 2
21003: PUSH
21004: LD_INT 4
21006: PUSH
21007: LD_INT 5
21009: PUSH
21010: LD_INT 7
21012: PUSH
21013: LD_INT 11
21015: PUSH
21016: LD_INT 12
21018: PUSH
21019: LD_INT 15
21021: PUSH
21022: LD_INT 16
21024: PUSH
21025: LD_INT 20
21027: PUSH
21028: LD_INT 21
21030: PUSH
21031: LD_INT 22
21033: PUSH
21034: LD_INT 23
21036: PUSH
21037: LD_INT 25
21039: PUSH
21040: LD_INT 26
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 101
21061: PUSH
21062: LD_INT 102
21064: PUSH
21065: LD_INT 103
21067: PUSH
21068: LD_INT 105
21070: PUSH
21071: LD_INT 106
21073: PUSH
21074: LD_INT 108
21076: PUSH
21077: LD_INT 112
21079: PUSH
21080: LD_INT 116
21082: PUSH
21083: LD_INT 117
21085: PUSH
21086: LD_INT 118
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: ST_TO_ADDR
21105: GO 23508
21107: LD_INT 8
21109: DOUBLE
21110: EQUAL
21111: IFTRUE 21115
21113: GO 21255
21115: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21116: LD_ADDR_VAR 0 2
21120: PUSH
21121: LD_INT 2
21123: PUSH
21124: LD_INT 4
21126: PUSH
21127: LD_INT 5
21129: PUSH
21130: LD_INT 6
21132: PUSH
21133: LD_INT 7
21135: PUSH
21136: LD_INT 8
21138: PUSH
21139: LD_INT 11
21141: PUSH
21142: LD_INT 12
21144: PUSH
21145: LD_INT 15
21147: PUSH
21148: LD_INT 16
21150: PUSH
21151: LD_INT 20
21153: PUSH
21154: LD_INT 21
21156: PUSH
21157: LD_INT 22
21159: PUSH
21160: LD_INT 23
21162: PUSH
21163: LD_INT 25
21165: PUSH
21166: LD_INT 26
21168: PUSH
21169: LD_INT 30
21171: PUSH
21172: LD_INT 31
21174: PUSH
21175: LD_INT 32
21177: PUSH
21178: LD_INT 36
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 101
21205: PUSH
21206: LD_INT 102
21208: PUSH
21209: LD_INT 103
21211: PUSH
21212: LD_INT 105
21214: PUSH
21215: LD_INT 106
21217: PUSH
21218: LD_INT 108
21220: PUSH
21221: LD_INT 109
21223: PUSH
21224: LD_INT 112
21226: PUSH
21227: LD_INT 116
21229: PUSH
21230: LD_INT 117
21232: PUSH
21233: LD_INT 118
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: ST_TO_ADDR
21253: GO 23508
21255: LD_INT 9
21257: DOUBLE
21258: EQUAL
21259: IFTRUE 21263
21261: GO 21411
21263: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21264: LD_ADDR_VAR 0 2
21268: PUSH
21269: LD_INT 2
21271: PUSH
21272: LD_INT 4
21274: PUSH
21275: LD_INT 5
21277: PUSH
21278: LD_INT 6
21280: PUSH
21281: LD_INT 7
21283: PUSH
21284: LD_INT 8
21286: PUSH
21287: LD_INT 11
21289: PUSH
21290: LD_INT 12
21292: PUSH
21293: LD_INT 15
21295: PUSH
21296: LD_INT 16
21298: PUSH
21299: LD_INT 20
21301: PUSH
21302: LD_INT 21
21304: PUSH
21305: LD_INT 22
21307: PUSH
21308: LD_INT 23
21310: PUSH
21311: LD_INT 25
21313: PUSH
21314: LD_INT 26
21316: PUSH
21317: LD_INT 28
21319: PUSH
21320: LD_INT 30
21322: PUSH
21323: LD_INT 31
21325: PUSH
21326: LD_INT 32
21328: PUSH
21329: LD_INT 36
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 101
21357: PUSH
21358: LD_INT 102
21360: PUSH
21361: LD_INT 103
21363: PUSH
21364: LD_INT 105
21366: PUSH
21367: LD_INT 106
21369: PUSH
21370: LD_INT 108
21372: PUSH
21373: LD_INT 109
21375: PUSH
21376: LD_INT 112
21378: PUSH
21379: LD_INT 114
21381: PUSH
21382: LD_INT 116
21384: PUSH
21385: LD_INT 117
21387: PUSH
21388: LD_INT 118
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: ST_TO_ADDR
21409: GO 23508
21411: LD_INT 10
21413: DOUBLE
21414: EQUAL
21415: IFTRUE 21419
21417: GO 21615
21419: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21420: LD_ADDR_VAR 0 2
21424: PUSH
21425: LD_INT 2
21427: PUSH
21428: LD_INT 4
21430: PUSH
21431: LD_INT 5
21433: PUSH
21434: LD_INT 6
21436: PUSH
21437: LD_INT 7
21439: PUSH
21440: LD_INT 8
21442: PUSH
21443: LD_INT 9
21445: PUSH
21446: LD_INT 10
21448: PUSH
21449: LD_INT 11
21451: PUSH
21452: LD_INT 12
21454: PUSH
21455: LD_INT 13
21457: PUSH
21458: LD_INT 14
21460: PUSH
21461: LD_INT 15
21463: PUSH
21464: LD_INT 16
21466: PUSH
21467: LD_INT 17
21469: PUSH
21470: LD_INT 18
21472: PUSH
21473: LD_INT 19
21475: PUSH
21476: LD_INT 20
21478: PUSH
21479: LD_INT 21
21481: PUSH
21482: LD_INT 22
21484: PUSH
21485: LD_INT 23
21487: PUSH
21488: LD_INT 24
21490: PUSH
21491: LD_INT 25
21493: PUSH
21494: LD_INT 26
21496: PUSH
21497: LD_INT 28
21499: PUSH
21500: LD_INT 30
21502: PUSH
21503: LD_INT 31
21505: PUSH
21506: LD_INT 32
21508: PUSH
21509: LD_INT 36
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 101
21545: PUSH
21546: LD_INT 102
21548: PUSH
21549: LD_INT 103
21551: PUSH
21552: LD_INT 104
21554: PUSH
21555: LD_INT 105
21557: PUSH
21558: LD_INT 106
21560: PUSH
21561: LD_INT 107
21563: PUSH
21564: LD_INT 108
21566: PUSH
21567: LD_INT 109
21569: PUSH
21570: LD_INT 110
21572: PUSH
21573: LD_INT 111
21575: PUSH
21576: LD_INT 112
21578: PUSH
21579: LD_INT 114
21581: PUSH
21582: LD_INT 116
21584: PUSH
21585: LD_INT 117
21587: PUSH
21588: LD_INT 118
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: ST_TO_ADDR
21613: GO 23508
21615: LD_INT 11
21617: DOUBLE
21618: EQUAL
21619: IFTRUE 21623
21621: GO 21827
21623: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21624: LD_ADDR_VAR 0 2
21628: PUSH
21629: LD_INT 2
21631: PUSH
21632: LD_INT 3
21634: PUSH
21635: LD_INT 4
21637: PUSH
21638: LD_INT 5
21640: PUSH
21641: LD_INT 6
21643: PUSH
21644: LD_INT 7
21646: PUSH
21647: LD_INT 8
21649: PUSH
21650: LD_INT 9
21652: PUSH
21653: LD_INT 10
21655: PUSH
21656: LD_INT 11
21658: PUSH
21659: LD_INT 12
21661: PUSH
21662: LD_INT 13
21664: PUSH
21665: LD_INT 14
21667: PUSH
21668: LD_INT 15
21670: PUSH
21671: LD_INT 16
21673: PUSH
21674: LD_INT 17
21676: PUSH
21677: LD_INT 18
21679: PUSH
21680: LD_INT 19
21682: PUSH
21683: LD_INT 20
21685: PUSH
21686: LD_INT 21
21688: PUSH
21689: LD_INT 22
21691: PUSH
21692: LD_INT 23
21694: PUSH
21695: LD_INT 24
21697: PUSH
21698: LD_INT 25
21700: PUSH
21701: LD_INT 26
21703: PUSH
21704: LD_INT 28
21706: PUSH
21707: LD_INT 30
21709: PUSH
21710: LD_INT 31
21712: PUSH
21713: LD_INT 32
21715: PUSH
21716: LD_INT 34
21718: PUSH
21719: LD_INT 36
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 101
21757: PUSH
21758: LD_INT 102
21760: PUSH
21761: LD_INT 103
21763: PUSH
21764: LD_INT 104
21766: PUSH
21767: LD_INT 105
21769: PUSH
21770: LD_INT 106
21772: PUSH
21773: LD_INT 107
21775: PUSH
21776: LD_INT 108
21778: PUSH
21779: LD_INT 109
21781: PUSH
21782: LD_INT 110
21784: PUSH
21785: LD_INT 111
21787: PUSH
21788: LD_INT 112
21790: PUSH
21791: LD_INT 114
21793: PUSH
21794: LD_INT 116
21796: PUSH
21797: LD_INT 117
21799: PUSH
21800: LD_INT 118
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: ST_TO_ADDR
21825: GO 23508
21827: LD_INT 12
21829: DOUBLE
21830: EQUAL
21831: IFTRUE 21835
21833: GO 22055
21835: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21836: LD_ADDR_VAR 0 2
21840: PUSH
21841: LD_INT 1
21843: PUSH
21844: LD_INT 2
21846: PUSH
21847: LD_INT 3
21849: PUSH
21850: LD_INT 4
21852: PUSH
21853: LD_INT 5
21855: PUSH
21856: LD_INT 6
21858: PUSH
21859: LD_INT 7
21861: PUSH
21862: LD_INT 8
21864: PUSH
21865: LD_INT 9
21867: PUSH
21868: LD_INT 10
21870: PUSH
21871: LD_INT 11
21873: PUSH
21874: LD_INT 12
21876: PUSH
21877: LD_INT 13
21879: PUSH
21880: LD_INT 14
21882: PUSH
21883: LD_INT 15
21885: PUSH
21886: LD_INT 16
21888: PUSH
21889: LD_INT 17
21891: PUSH
21892: LD_INT 18
21894: PUSH
21895: LD_INT 19
21897: PUSH
21898: LD_INT 20
21900: PUSH
21901: LD_INT 21
21903: PUSH
21904: LD_INT 22
21906: PUSH
21907: LD_INT 23
21909: PUSH
21910: LD_INT 24
21912: PUSH
21913: LD_INT 25
21915: PUSH
21916: LD_INT 26
21918: PUSH
21919: LD_INT 27
21921: PUSH
21922: LD_INT 28
21924: PUSH
21925: LD_INT 30
21927: PUSH
21928: LD_INT 31
21930: PUSH
21931: LD_INT 32
21933: PUSH
21934: LD_INT 33
21936: PUSH
21937: LD_INT 34
21939: PUSH
21940: LD_INT 36
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 101
21981: PUSH
21982: LD_INT 102
21984: PUSH
21985: LD_INT 103
21987: PUSH
21988: LD_INT 104
21990: PUSH
21991: LD_INT 105
21993: PUSH
21994: LD_INT 106
21996: PUSH
21997: LD_INT 107
21999: PUSH
22000: LD_INT 108
22002: PUSH
22003: LD_INT 109
22005: PUSH
22006: LD_INT 110
22008: PUSH
22009: LD_INT 111
22011: PUSH
22012: LD_INT 112
22014: PUSH
22015: LD_INT 113
22017: PUSH
22018: LD_INT 114
22020: PUSH
22021: LD_INT 116
22023: PUSH
22024: LD_INT 117
22026: PUSH
22027: LD_INT 118
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: ST_TO_ADDR
22053: GO 23508
22055: LD_INT 13
22057: DOUBLE
22058: EQUAL
22059: IFTRUE 22063
22061: GO 22271
22063: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22064: LD_ADDR_VAR 0 2
22068: PUSH
22069: LD_INT 1
22071: PUSH
22072: LD_INT 2
22074: PUSH
22075: LD_INT 3
22077: PUSH
22078: LD_INT 4
22080: PUSH
22081: LD_INT 5
22083: PUSH
22084: LD_INT 8
22086: PUSH
22087: LD_INT 9
22089: PUSH
22090: LD_INT 10
22092: PUSH
22093: LD_INT 11
22095: PUSH
22096: LD_INT 12
22098: PUSH
22099: LD_INT 14
22101: PUSH
22102: LD_INT 15
22104: PUSH
22105: LD_INT 16
22107: PUSH
22108: LD_INT 17
22110: PUSH
22111: LD_INT 18
22113: PUSH
22114: LD_INT 19
22116: PUSH
22117: LD_INT 20
22119: PUSH
22120: LD_INT 21
22122: PUSH
22123: LD_INT 22
22125: PUSH
22126: LD_INT 23
22128: PUSH
22129: LD_INT 24
22131: PUSH
22132: LD_INT 25
22134: PUSH
22135: LD_INT 26
22137: PUSH
22138: LD_INT 27
22140: PUSH
22141: LD_INT 28
22143: PUSH
22144: LD_INT 30
22146: PUSH
22147: LD_INT 31
22149: PUSH
22150: LD_INT 32
22152: PUSH
22153: LD_INT 33
22155: PUSH
22156: LD_INT 34
22158: PUSH
22159: LD_INT 36
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: PUSH
22195: LD_INT 101
22197: PUSH
22198: LD_INT 102
22200: PUSH
22201: LD_INT 103
22203: PUSH
22204: LD_INT 104
22206: PUSH
22207: LD_INT 105
22209: PUSH
22210: LD_INT 106
22212: PUSH
22213: LD_INT 107
22215: PUSH
22216: LD_INT 108
22218: PUSH
22219: LD_INT 109
22221: PUSH
22222: LD_INT 110
22224: PUSH
22225: LD_INT 111
22227: PUSH
22228: LD_INT 112
22230: PUSH
22231: LD_INT 113
22233: PUSH
22234: LD_INT 114
22236: PUSH
22237: LD_INT 116
22239: PUSH
22240: LD_INT 117
22242: PUSH
22243: LD_INT 118
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: ST_TO_ADDR
22269: GO 23508
22271: LD_INT 14
22273: DOUBLE
22274: EQUAL
22275: IFTRUE 22279
22277: GO 22503
22279: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22280: LD_ADDR_VAR 0 2
22284: PUSH
22285: LD_INT 1
22287: PUSH
22288: LD_INT 2
22290: PUSH
22291: LD_INT 3
22293: PUSH
22294: LD_INT 4
22296: PUSH
22297: LD_INT 5
22299: PUSH
22300: LD_INT 6
22302: PUSH
22303: LD_INT 7
22305: PUSH
22306: LD_INT 8
22308: PUSH
22309: LD_INT 9
22311: PUSH
22312: LD_INT 10
22314: PUSH
22315: LD_INT 11
22317: PUSH
22318: LD_INT 12
22320: PUSH
22321: LD_INT 13
22323: PUSH
22324: LD_INT 14
22326: PUSH
22327: LD_INT 15
22329: PUSH
22330: LD_INT 16
22332: PUSH
22333: LD_INT 17
22335: PUSH
22336: LD_INT 18
22338: PUSH
22339: LD_INT 19
22341: PUSH
22342: LD_INT 20
22344: PUSH
22345: LD_INT 21
22347: PUSH
22348: LD_INT 22
22350: PUSH
22351: LD_INT 23
22353: PUSH
22354: LD_INT 24
22356: PUSH
22357: LD_INT 25
22359: PUSH
22360: LD_INT 26
22362: PUSH
22363: LD_INT 27
22365: PUSH
22366: LD_INT 28
22368: PUSH
22369: LD_INT 29
22371: PUSH
22372: LD_INT 30
22374: PUSH
22375: LD_INT 31
22377: PUSH
22378: LD_INT 32
22380: PUSH
22381: LD_INT 33
22383: PUSH
22384: LD_INT 34
22386: PUSH
22387: LD_INT 36
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 101
22429: PUSH
22430: LD_INT 102
22432: PUSH
22433: LD_INT 103
22435: PUSH
22436: LD_INT 104
22438: PUSH
22439: LD_INT 105
22441: PUSH
22442: LD_INT 106
22444: PUSH
22445: LD_INT 107
22447: PUSH
22448: LD_INT 108
22450: PUSH
22451: LD_INT 109
22453: PUSH
22454: LD_INT 110
22456: PUSH
22457: LD_INT 111
22459: PUSH
22460: LD_INT 112
22462: PUSH
22463: LD_INT 113
22465: PUSH
22466: LD_INT 114
22468: PUSH
22469: LD_INT 116
22471: PUSH
22472: LD_INT 117
22474: PUSH
22475: LD_INT 118
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: ST_TO_ADDR
22501: GO 23508
22503: LD_INT 15
22505: DOUBLE
22506: EQUAL
22507: IFTRUE 22511
22509: GO 22735
22511: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22512: LD_ADDR_VAR 0 2
22516: PUSH
22517: LD_INT 1
22519: PUSH
22520: LD_INT 2
22522: PUSH
22523: LD_INT 3
22525: PUSH
22526: LD_INT 4
22528: PUSH
22529: LD_INT 5
22531: PUSH
22532: LD_INT 6
22534: PUSH
22535: LD_INT 7
22537: PUSH
22538: LD_INT 8
22540: PUSH
22541: LD_INT 9
22543: PUSH
22544: LD_INT 10
22546: PUSH
22547: LD_INT 11
22549: PUSH
22550: LD_INT 12
22552: PUSH
22553: LD_INT 13
22555: PUSH
22556: LD_INT 14
22558: PUSH
22559: LD_INT 15
22561: PUSH
22562: LD_INT 16
22564: PUSH
22565: LD_INT 17
22567: PUSH
22568: LD_INT 18
22570: PUSH
22571: LD_INT 19
22573: PUSH
22574: LD_INT 20
22576: PUSH
22577: LD_INT 21
22579: PUSH
22580: LD_INT 22
22582: PUSH
22583: LD_INT 23
22585: PUSH
22586: LD_INT 24
22588: PUSH
22589: LD_INT 25
22591: PUSH
22592: LD_INT 26
22594: PUSH
22595: LD_INT 27
22597: PUSH
22598: LD_INT 28
22600: PUSH
22601: LD_INT 29
22603: PUSH
22604: LD_INT 30
22606: PUSH
22607: LD_INT 31
22609: PUSH
22610: LD_INT 32
22612: PUSH
22613: LD_INT 33
22615: PUSH
22616: LD_INT 34
22618: PUSH
22619: LD_INT 36
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 101
22661: PUSH
22662: LD_INT 102
22664: PUSH
22665: LD_INT 103
22667: PUSH
22668: LD_INT 104
22670: PUSH
22671: LD_INT 105
22673: PUSH
22674: LD_INT 106
22676: PUSH
22677: LD_INT 107
22679: PUSH
22680: LD_INT 108
22682: PUSH
22683: LD_INT 109
22685: PUSH
22686: LD_INT 110
22688: PUSH
22689: LD_INT 111
22691: PUSH
22692: LD_INT 112
22694: PUSH
22695: LD_INT 113
22697: PUSH
22698: LD_INT 114
22700: PUSH
22701: LD_INT 116
22703: PUSH
22704: LD_INT 117
22706: PUSH
22707: LD_INT 118
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: ST_TO_ADDR
22733: GO 23508
22735: LD_INT 16
22737: DOUBLE
22738: EQUAL
22739: IFTRUE 22743
22741: GO 22879
22743: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22744: LD_ADDR_VAR 0 2
22748: PUSH
22749: LD_INT 2
22751: PUSH
22752: LD_INT 4
22754: PUSH
22755: LD_INT 5
22757: PUSH
22758: LD_INT 7
22760: PUSH
22761: LD_INT 11
22763: PUSH
22764: LD_INT 12
22766: PUSH
22767: LD_INT 15
22769: PUSH
22770: LD_INT 16
22772: PUSH
22773: LD_INT 20
22775: PUSH
22776: LD_INT 21
22778: PUSH
22779: LD_INT 22
22781: PUSH
22782: LD_INT 23
22784: PUSH
22785: LD_INT 25
22787: PUSH
22788: LD_INT 26
22790: PUSH
22791: LD_INT 30
22793: PUSH
22794: LD_INT 31
22796: PUSH
22797: LD_INT 32
22799: PUSH
22800: LD_INT 33
22802: PUSH
22803: LD_INT 34
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 101
22829: PUSH
22830: LD_INT 102
22832: PUSH
22833: LD_INT 103
22835: PUSH
22836: LD_INT 106
22838: PUSH
22839: LD_INT 108
22841: PUSH
22842: LD_INT 112
22844: PUSH
22845: LD_INT 113
22847: PUSH
22848: LD_INT 114
22850: PUSH
22851: LD_INT 116
22853: PUSH
22854: LD_INT 117
22856: PUSH
22857: LD_INT 118
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: ST_TO_ADDR
22877: GO 23508
22879: LD_INT 17
22881: DOUBLE
22882: EQUAL
22883: IFTRUE 22887
22885: GO 23111
22887: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22888: LD_ADDR_VAR 0 2
22892: PUSH
22893: LD_INT 1
22895: PUSH
22896: LD_INT 2
22898: PUSH
22899: LD_INT 3
22901: PUSH
22902: LD_INT 4
22904: PUSH
22905: LD_INT 5
22907: PUSH
22908: LD_INT 6
22910: PUSH
22911: LD_INT 7
22913: PUSH
22914: LD_INT 8
22916: PUSH
22917: LD_INT 9
22919: PUSH
22920: LD_INT 10
22922: PUSH
22923: LD_INT 11
22925: PUSH
22926: LD_INT 12
22928: PUSH
22929: LD_INT 13
22931: PUSH
22932: LD_INT 14
22934: PUSH
22935: LD_INT 15
22937: PUSH
22938: LD_INT 16
22940: PUSH
22941: LD_INT 17
22943: PUSH
22944: LD_INT 18
22946: PUSH
22947: LD_INT 19
22949: PUSH
22950: LD_INT 20
22952: PUSH
22953: LD_INT 21
22955: PUSH
22956: LD_INT 22
22958: PUSH
22959: LD_INT 23
22961: PUSH
22962: LD_INT 24
22964: PUSH
22965: LD_INT 25
22967: PUSH
22968: LD_INT 26
22970: PUSH
22971: LD_INT 27
22973: PUSH
22974: LD_INT 28
22976: PUSH
22977: LD_INT 29
22979: PUSH
22980: LD_INT 30
22982: PUSH
22983: LD_INT 31
22985: PUSH
22986: LD_INT 32
22988: PUSH
22989: LD_INT 33
22991: PUSH
22992: LD_INT 34
22994: PUSH
22995: LD_INT 36
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 101
23037: PUSH
23038: LD_INT 102
23040: PUSH
23041: LD_INT 103
23043: PUSH
23044: LD_INT 104
23046: PUSH
23047: LD_INT 105
23049: PUSH
23050: LD_INT 106
23052: PUSH
23053: LD_INT 107
23055: PUSH
23056: LD_INT 108
23058: PUSH
23059: LD_INT 109
23061: PUSH
23062: LD_INT 110
23064: PUSH
23065: LD_INT 111
23067: PUSH
23068: LD_INT 112
23070: PUSH
23071: LD_INT 113
23073: PUSH
23074: LD_INT 114
23076: PUSH
23077: LD_INT 116
23079: PUSH
23080: LD_INT 117
23082: PUSH
23083: LD_INT 118
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: ST_TO_ADDR
23109: GO 23508
23111: LD_INT 18
23113: DOUBLE
23114: EQUAL
23115: IFTRUE 23119
23117: GO 23267
23119: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23120: LD_ADDR_VAR 0 2
23124: PUSH
23125: LD_INT 2
23127: PUSH
23128: LD_INT 4
23130: PUSH
23131: LD_INT 5
23133: PUSH
23134: LD_INT 7
23136: PUSH
23137: LD_INT 11
23139: PUSH
23140: LD_INT 12
23142: PUSH
23143: LD_INT 15
23145: PUSH
23146: LD_INT 16
23148: PUSH
23149: LD_INT 20
23151: PUSH
23152: LD_INT 21
23154: PUSH
23155: LD_INT 22
23157: PUSH
23158: LD_INT 23
23160: PUSH
23161: LD_INT 25
23163: PUSH
23164: LD_INT 26
23166: PUSH
23167: LD_INT 30
23169: PUSH
23170: LD_INT 31
23172: PUSH
23173: LD_INT 32
23175: PUSH
23176: LD_INT 33
23178: PUSH
23179: LD_INT 34
23181: PUSH
23182: LD_INT 35
23184: PUSH
23185: LD_INT 36
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: PUSH
23211: LD_INT 101
23213: PUSH
23214: LD_INT 102
23216: PUSH
23217: LD_INT 103
23219: PUSH
23220: LD_INT 106
23222: PUSH
23223: LD_INT 108
23225: PUSH
23226: LD_INT 112
23228: PUSH
23229: LD_INT 113
23231: PUSH
23232: LD_INT 114
23234: PUSH
23235: LD_INT 115
23237: PUSH
23238: LD_INT 116
23240: PUSH
23241: LD_INT 117
23243: PUSH
23244: LD_INT 118
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: ST_TO_ADDR
23265: GO 23508
23267: LD_INT 19
23269: DOUBLE
23270: EQUAL
23271: IFTRUE 23275
23273: GO 23507
23275: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23276: LD_ADDR_VAR 0 2
23280: PUSH
23281: LD_INT 1
23283: PUSH
23284: LD_INT 2
23286: PUSH
23287: LD_INT 3
23289: PUSH
23290: LD_INT 4
23292: PUSH
23293: LD_INT 5
23295: PUSH
23296: LD_INT 6
23298: PUSH
23299: LD_INT 7
23301: PUSH
23302: LD_INT 8
23304: PUSH
23305: LD_INT 9
23307: PUSH
23308: LD_INT 10
23310: PUSH
23311: LD_INT 11
23313: PUSH
23314: LD_INT 12
23316: PUSH
23317: LD_INT 13
23319: PUSH
23320: LD_INT 14
23322: PUSH
23323: LD_INT 15
23325: PUSH
23326: LD_INT 16
23328: PUSH
23329: LD_INT 17
23331: PUSH
23332: LD_INT 18
23334: PUSH
23335: LD_INT 19
23337: PUSH
23338: LD_INT 20
23340: PUSH
23341: LD_INT 21
23343: PUSH
23344: LD_INT 22
23346: PUSH
23347: LD_INT 23
23349: PUSH
23350: LD_INT 24
23352: PUSH
23353: LD_INT 25
23355: PUSH
23356: LD_INT 26
23358: PUSH
23359: LD_INT 27
23361: PUSH
23362: LD_INT 28
23364: PUSH
23365: LD_INT 29
23367: PUSH
23368: LD_INT 30
23370: PUSH
23371: LD_INT 31
23373: PUSH
23374: LD_INT 32
23376: PUSH
23377: LD_INT 33
23379: PUSH
23380: LD_INT 34
23382: PUSH
23383: LD_INT 35
23385: PUSH
23386: LD_INT 36
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: PUSH
23427: LD_INT 101
23429: PUSH
23430: LD_INT 102
23432: PUSH
23433: LD_INT 103
23435: PUSH
23436: LD_INT 104
23438: PUSH
23439: LD_INT 105
23441: PUSH
23442: LD_INT 106
23444: PUSH
23445: LD_INT 107
23447: PUSH
23448: LD_INT 108
23450: PUSH
23451: LD_INT 109
23453: PUSH
23454: LD_INT 110
23456: PUSH
23457: LD_INT 111
23459: PUSH
23460: LD_INT 112
23462: PUSH
23463: LD_INT 113
23465: PUSH
23466: LD_INT 114
23468: PUSH
23469: LD_INT 115
23471: PUSH
23472: LD_INT 116
23474: PUSH
23475: LD_INT 117
23477: PUSH
23478: LD_INT 118
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: ST_TO_ADDR
23505: GO 23508
23507: POP
// end else
23508: GO 23739
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23510: LD_ADDR_VAR 0 2
23514: PUSH
23515: LD_INT 1
23517: PUSH
23518: LD_INT 2
23520: PUSH
23521: LD_INT 3
23523: PUSH
23524: LD_INT 4
23526: PUSH
23527: LD_INT 5
23529: PUSH
23530: LD_INT 6
23532: PUSH
23533: LD_INT 7
23535: PUSH
23536: LD_INT 8
23538: PUSH
23539: LD_INT 9
23541: PUSH
23542: LD_INT 10
23544: PUSH
23545: LD_INT 11
23547: PUSH
23548: LD_INT 12
23550: PUSH
23551: LD_INT 13
23553: PUSH
23554: LD_INT 14
23556: PUSH
23557: LD_INT 15
23559: PUSH
23560: LD_INT 16
23562: PUSH
23563: LD_INT 17
23565: PUSH
23566: LD_INT 18
23568: PUSH
23569: LD_INT 19
23571: PUSH
23572: LD_INT 20
23574: PUSH
23575: LD_INT 21
23577: PUSH
23578: LD_INT 22
23580: PUSH
23581: LD_INT 23
23583: PUSH
23584: LD_INT 24
23586: PUSH
23587: LD_INT 25
23589: PUSH
23590: LD_INT 26
23592: PUSH
23593: LD_INT 27
23595: PUSH
23596: LD_INT 28
23598: PUSH
23599: LD_INT 29
23601: PUSH
23602: LD_INT 30
23604: PUSH
23605: LD_INT 31
23607: PUSH
23608: LD_INT 32
23610: PUSH
23611: LD_INT 33
23613: PUSH
23614: LD_INT 34
23616: PUSH
23617: LD_INT 35
23619: PUSH
23620: LD_INT 36
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: PUSH
23661: LD_INT 101
23663: PUSH
23664: LD_INT 102
23666: PUSH
23667: LD_INT 103
23669: PUSH
23670: LD_INT 104
23672: PUSH
23673: LD_INT 105
23675: PUSH
23676: LD_INT 106
23678: PUSH
23679: LD_INT 107
23681: PUSH
23682: LD_INT 108
23684: PUSH
23685: LD_INT 109
23687: PUSH
23688: LD_INT 110
23690: PUSH
23691: LD_INT 111
23693: PUSH
23694: LD_INT 112
23696: PUSH
23697: LD_INT 113
23699: PUSH
23700: LD_INT 114
23702: PUSH
23703: LD_INT 115
23705: PUSH
23706: LD_INT 116
23708: PUSH
23709: LD_INT 117
23711: PUSH
23712: LD_INT 118
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: ST_TO_ADDR
// if result then
23739: LD_VAR 0 2
23743: IFFALSE 24529
// begin normal :=  ;
23745: LD_ADDR_VAR 0 5
23749: PUSH
23750: LD_STRING 
23752: ST_TO_ADDR
// hardcore :=  ;
23753: LD_ADDR_VAR 0 6
23757: PUSH
23758: LD_STRING 
23760: ST_TO_ADDR
// active :=  ;
23761: LD_ADDR_VAR 0 7
23765: PUSH
23766: LD_STRING 
23768: ST_TO_ADDR
// for i = 1 to normalCounter do
23769: LD_ADDR_VAR 0 8
23773: PUSH
23774: DOUBLE
23775: LD_INT 1
23777: DEC
23778: ST_TO_ADDR
23779: LD_EXP 55
23783: PUSH
23784: FOR_TO
23785: IFFALSE 23886
// begin tmp := 0 ;
23787: LD_ADDR_VAR 0 3
23791: PUSH
23792: LD_STRING 0
23794: ST_TO_ADDR
// if result [ 1 ] then
23795: LD_VAR 0 2
23799: PUSH
23800: LD_INT 1
23802: ARRAY
23803: IFFALSE 23868
// if result [ 1 ] [ 1 ] = i then
23805: LD_VAR 0 2
23809: PUSH
23810: LD_INT 1
23812: ARRAY
23813: PUSH
23814: LD_INT 1
23816: ARRAY
23817: PUSH
23818: LD_VAR 0 8
23822: EQUAL
23823: IFFALSE 23868
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23825: LD_ADDR_VAR 0 2
23829: PUSH
23830: LD_VAR 0 2
23834: PPUSH
23835: LD_INT 1
23837: PPUSH
23838: LD_VAR 0 2
23842: PUSH
23843: LD_INT 1
23845: ARRAY
23846: PPUSH
23847: LD_INT 1
23849: PPUSH
23850: CALL_OW 3
23854: PPUSH
23855: CALL_OW 1
23859: ST_TO_ADDR
// tmp := 1 ;
23860: LD_ADDR_VAR 0 3
23864: PUSH
23865: LD_STRING 1
23867: ST_TO_ADDR
// end ; normal := normal & tmp ;
23868: LD_ADDR_VAR 0 5
23872: PUSH
23873: LD_VAR 0 5
23877: PUSH
23878: LD_VAR 0 3
23882: STR
23883: ST_TO_ADDR
// end ;
23884: GO 23784
23886: POP
23887: POP
// for i = 1 to hardcoreCounter do
23888: LD_ADDR_VAR 0 8
23892: PUSH
23893: DOUBLE
23894: LD_INT 1
23896: DEC
23897: ST_TO_ADDR
23898: LD_EXP 56
23902: PUSH
23903: FOR_TO
23904: IFFALSE 24009
// begin tmp := 0 ;
23906: LD_ADDR_VAR 0 3
23910: PUSH
23911: LD_STRING 0
23913: ST_TO_ADDR
// if result [ 2 ] then
23914: LD_VAR 0 2
23918: PUSH
23919: LD_INT 2
23921: ARRAY
23922: IFFALSE 23991
// if result [ 2 ] [ 1 ] = 100 + i then
23924: LD_VAR 0 2
23928: PUSH
23929: LD_INT 2
23931: ARRAY
23932: PUSH
23933: LD_INT 1
23935: ARRAY
23936: PUSH
23937: LD_INT 100
23939: PUSH
23940: LD_VAR 0 8
23944: PLUS
23945: EQUAL
23946: IFFALSE 23991
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23948: LD_ADDR_VAR 0 2
23952: PUSH
23953: LD_VAR 0 2
23957: PPUSH
23958: LD_INT 2
23960: PPUSH
23961: LD_VAR 0 2
23965: PUSH
23966: LD_INT 2
23968: ARRAY
23969: PPUSH
23970: LD_INT 1
23972: PPUSH
23973: CALL_OW 3
23977: PPUSH
23978: CALL_OW 1
23982: ST_TO_ADDR
// tmp := 1 ;
23983: LD_ADDR_VAR 0 3
23987: PUSH
23988: LD_STRING 1
23990: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23991: LD_ADDR_VAR 0 6
23995: PUSH
23996: LD_VAR 0 6
24000: PUSH
24001: LD_VAR 0 3
24005: STR
24006: ST_TO_ADDR
// end ;
24007: GO 23903
24009: POP
24010: POP
// if isGameLoad then
24011: LD_VAR 0 1
24015: IFFALSE 24490
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24017: LD_ADDR_VAR 0 4
24021: PUSH
24022: LD_EXP 59
24026: PUSH
24027: LD_EXP 58
24031: PUSH
24032: LD_EXP 60
24036: PUSH
24037: LD_EXP 57
24041: PUSH
24042: LD_EXP 61
24046: PUSH
24047: LD_EXP 62
24051: PUSH
24052: LD_EXP 63
24056: PUSH
24057: LD_EXP 64
24061: PUSH
24062: LD_EXP 65
24066: PUSH
24067: LD_EXP 66
24071: PUSH
24072: LD_EXP 67
24076: PUSH
24077: LD_EXP 68
24081: PUSH
24082: LD_EXP 69
24086: PUSH
24087: LD_EXP 70
24091: PUSH
24092: LD_EXP 78
24096: PUSH
24097: LD_EXP 79
24101: PUSH
24102: LD_EXP 80
24106: PUSH
24107: LD_EXP 81
24111: PUSH
24112: LD_EXP 83
24116: PUSH
24117: LD_EXP 84
24121: PUSH
24122: LD_EXP 85
24126: PUSH
24127: LD_EXP 88
24131: PUSH
24132: LD_EXP 90
24136: PUSH
24137: LD_EXP 91
24141: PUSH
24142: LD_EXP 92
24146: PUSH
24147: LD_EXP 94
24151: PUSH
24152: LD_EXP 95
24156: PUSH
24157: LD_EXP 98
24161: PUSH
24162: LD_EXP 99
24166: PUSH
24167: LD_EXP 100
24171: PUSH
24172: LD_EXP 101
24176: PUSH
24177: LD_EXP 102
24181: PUSH
24182: LD_EXP 103
24186: PUSH
24187: LD_EXP 104
24191: PUSH
24192: LD_EXP 105
24196: PUSH
24197: LD_EXP 106
24201: PUSH
24202: LD_EXP 71
24206: PUSH
24207: LD_EXP 72
24211: PUSH
24212: LD_EXP 75
24216: PUSH
24217: LD_EXP 76
24221: PUSH
24222: LD_EXP 77
24226: PUSH
24227: LD_EXP 73
24231: PUSH
24232: LD_EXP 74
24236: PUSH
24237: LD_EXP 82
24241: PUSH
24242: LD_EXP 86
24246: PUSH
24247: LD_EXP 87
24251: PUSH
24252: LD_EXP 89
24256: PUSH
24257: LD_EXP 93
24261: PUSH
24262: LD_EXP 96
24266: PUSH
24267: LD_EXP 97
24271: PUSH
24272: LD_EXP 107
24276: PUSH
24277: LD_EXP 108
24281: PUSH
24282: LD_EXP 109
24286: PUSH
24287: LD_EXP 110
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: ST_TO_ADDR
// tmp :=  ;
24348: LD_ADDR_VAR 0 3
24352: PUSH
24353: LD_STRING 
24355: ST_TO_ADDR
// for i = 1 to normalCounter do
24356: LD_ADDR_VAR 0 8
24360: PUSH
24361: DOUBLE
24362: LD_INT 1
24364: DEC
24365: ST_TO_ADDR
24366: LD_EXP 55
24370: PUSH
24371: FOR_TO
24372: IFFALSE 24408
// begin if flags [ i ] then
24374: LD_VAR 0 4
24378: PUSH
24379: LD_VAR 0 8
24383: ARRAY
24384: IFFALSE 24406
// tmp := tmp & i & ; ;
24386: LD_ADDR_VAR 0 3
24390: PUSH
24391: LD_VAR 0 3
24395: PUSH
24396: LD_VAR 0 8
24400: STR
24401: PUSH
24402: LD_STRING ;
24404: STR
24405: ST_TO_ADDR
// end ;
24406: GO 24371
24408: POP
24409: POP
// for i = 1 to hardcoreCounter do
24410: LD_ADDR_VAR 0 8
24414: PUSH
24415: DOUBLE
24416: LD_INT 1
24418: DEC
24419: ST_TO_ADDR
24420: LD_EXP 56
24424: PUSH
24425: FOR_TO
24426: IFFALSE 24472
// begin if flags [ normalCounter + i ] then
24428: LD_VAR 0 4
24432: PUSH
24433: LD_EXP 55
24437: PUSH
24438: LD_VAR 0 8
24442: PLUS
24443: ARRAY
24444: IFFALSE 24470
// tmp := tmp & ( 100 + i ) & ; ;
24446: LD_ADDR_VAR 0 3
24450: PUSH
24451: LD_VAR 0 3
24455: PUSH
24456: LD_INT 100
24458: PUSH
24459: LD_VAR 0 8
24463: PLUS
24464: STR
24465: PUSH
24466: LD_STRING ;
24468: STR
24469: ST_TO_ADDR
// end ;
24470: GO 24425
24472: POP
24473: POP
// if tmp then
24474: LD_VAR 0 3
24478: IFFALSE 24490
// active := tmp ;
24480: LD_ADDR_VAR 0 7
24484: PUSH
24485: LD_VAR 0 3
24489: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24490: LD_STRING getStreamItemsFromMission("
24492: PUSH
24493: LD_VAR 0 5
24497: STR
24498: PUSH
24499: LD_STRING ","
24501: STR
24502: PUSH
24503: LD_VAR 0 6
24507: STR
24508: PUSH
24509: LD_STRING ","
24511: STR
24512: PUSH
24513: LD_VAR 0 7
24517: STR
24518: PUSH
24519: LD_STRING ")
24521: STR
24522: PPUSH
24523: CALL_OW 559
// end else
24527: GO 24536
// ToLua ( getStreamItemsFromMission("","","") ) ;
24529: LD_STRING getStreamItemsFromMission("","","")
24531: PPUSH
24532: CALL_OW 559
// end ;
24536: LD_VAR 0 2
24540: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24541: LD_EXP 54
24545: PUSH
24546: LD_EXP 59
24550: AND
24551: IFFALSE 24675
24553: GO 24555
24555: DISABLE
24556: LD_INT 0
24558: PPUSH
24559: PPUSH
// begin enable ;
24560: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24561: LD_ADDR_VAR 0 2
24565: PUSH
24566: LD_INT 22
24568: PUSH
24569: LD_OWVAR 2
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 2
24580: PUSH
24581: LD_INT 34
24583: PUSH
24584: LD_INT 7
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 34
24593: PUSH
24594: LD_INT 45
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PUSH
24601: LD_INT 34
24603: PUSH
24604: LD_INT 28
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 34
24613: PUSH
24614: LD_INT 47
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PPUSH
24632: CALL_OW 69
24636: ST_TO_ADDR
// if not tmp then
24637: LD_VAR 0 2
24641: NOT
24642: IFFALSE 24646
// exit ;
24644: GO 24675
// for i in tmp do
24646: LD_ADDR_VAR 0 1
24650: PUSH
24651: LD_VAR 0 2
24655: PUSH
24656: FOR_IN
24657: IFFALSE 24673
// begin SetLives ( i , 0 ) ;
24659: LD_VAR 0 1
24663: PPUSH
24664: LD_INT 0
24666: PPUSH
24667: CALL_OW 234
// end ;
24671: GO 24656
24673: POP
24674: POP
// end ;
24675: PPOPN 2
24677: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24678: LD_EXP 54
24682: PUSH
24683: LD_EXP 60
24687: AND
24688: IFFALSE 24772
24690: GO 24692
24692: DISABLE
24693: LD_INT 0
24695: PPUSH
24696: PPUSH
// begin enable ;
24697: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24698: LD_ADDR_VAR 0 2
24702: PUSH
24703: LD_INT 22
24705: PUSH
24706: LD_OWVAR 2
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 32
24717: PUSH
24718: LD_INT 3
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PPUSH
24729: CALL_OW 69
24733: ST_TO_ADDR
// if not tmp then
24734: LD_VAR 0 2
24738: NOT
24739: IFFALSE 24743
// exit ;
24741: GO 24772
// for i in tmp do
24743: LD_ADDR_VAR 0 1
24747: PUSH
24748: LD_VAR 0 2
24752: PUSH
24753: FOR_IN
24754: IFFALSE 24770
// begin SetLives ( i , 0 ) ;
24756: LD_VAR 0 1
24760: PPUSH
24761: LD_INT 0
24763: PPUSH
24764: CALL_OW 234
// end ;
24768: GO 24753
24770: POP
24771: POP
// end ;
24772: PPOPN 2
24774: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24775: LD_EXP 54
24779: PUSH
24780: LD_EXP 57
24784: AND
24785: IFFALSE 24878
24787: GO 24789
24789: DISABLE
24790: LD_INT 0
24792: PPUSH
// begin enable ;
24793: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24794: LD_ADDR_VAR 0 1
24798: PUSH
24799: LD_INT 22
24801: PUSH
24802: LD_OWVAR 2
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 2
24813: PUSH
24814: LD_INT 25
24816: PUSH
24817: LD_INT 5
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: PUSH
24824: LD_INT 25
24826: PUSH
24827: LD_INT 9
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: LD_INT 25
24836: PUSH
24837: LD_INT 8
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PPUSH
24854: CALL_OW 69
24858: PUSH
24859: FOR_IN
24860: IFFALSE 24876
// begin SetClass ( i , 1 ) ;
24862: LD_VAR 0 1
24866: PPUSH
24867: LD_INT 1
24869: PPUSH
24870: CALL_OW 336
// end ;
24874: GO 24859
24876: POP
24877: POP
// end ;
24878: PPOPN 1
24880: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24881: LD_EXP 54
24885: PUSH
24886: LD_EXP 58
24890: AND
24891: PUSH
24892: LD_OWVAR 65
24896: PUSH
24897: LD_INT 7
24899: LESS
24900: AND
24901: IFFALSE 24915
24903: GO 24905
24905: DISABLE
// begin enable ;
24906: ENABLE
// game_speed := 7 ;
24907: LD_ADDR_OWVAR 65
24911: PUSH
24912: LD_INT 7
24914: ST_TO_ADDR
// end ;
24915: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24916: LD_EXP 54
24920: PUSH
24921: LD_EXP 61
24925: AND
24926: IFFALSE 25128
24928: GO 24930
24930: DISABLE
24931: LD_INT 0
24933: PPUSH
24934: PPUSH
24935: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24936: LD_ADDR_VAR 0 3
24940: PUSH
24941: LD_INT 81
24943: PUSH
24944: LD_OWVAR 2
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 21
24955: PUSH
24956: LD_INT 1
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PPUSH
24967: CALL_OW 69
24971: ST_TO_ADDR
// if not tmp then
24972: LD_VAR 0 3
24976: NOT
24977: IFFALSE 24981
// exit ;
24979: GO 25128
// if tmp > 5 then
24981: LD_VAR 0 3
24985: PUSH
24986: LD_INT 5
24988: GREATER
24989: IFFALSE 25001
// k := 5 else
24991: LD_ADDR_VAR 0 2
24995: PUSH
24996: LD_INT 5
24998: ST_TO_ADDR
24999: GO 25011
// k := tmp ;
25001: LD_ADDR_VAR 0 2
25005: PUSH
25006: LD_VAR 0 3
25010: ST_TO_ADDR
// for i := 1 to k do
25011: LD_ADDR_VAR 0 1
25015: PUSH
25016: DOUBLE
25017: LD_INT 1
25019: DEC
25020: ST_TO_ADDR
25021: LD_VAR 0 2
25025: PUSH
25026: FOR_TO
25027: IFFALSE 25126
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25029: LD_VAR 0 3
25033: PUSH
25034: LD_VAR 0 1
25038: ARRAY
25039: PPUSH
25040: LD_VAR 0 1
25044: PUSH
25045: LD_INT 4
25047: MOD
25048: PUSH
25049: LD_INT 1
25051: PLUS
25052: PPUSH
25053: CALL_OW 259
25057: PUSH
25058: LD_INT 10
25060: LESS
25061: IFFALSE 25124
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25063: LD_VAR 0 3
25067: PUSH
25068: LD_VAR 0 1
25072: ARRAY
25073: PPUSH
25074: LD_VAR 0 1
25078: PUSH
25079: LD_INT 4
25081: MOD
25082: PUSH
25083: LD_INT 1
25085: PLUS
25086: PPUSH
25087: LD_VAR 0 3
25091: PUSH
25092: LD_VAR 0 1
25096: ARRAY
25097: PPUSH
25098: LD_VAR 0 1
25102: PUSH
25103: LD_INT 4
25105: MOD
25106: PUSH
25107: LD_INT 1
25109: PLUS
25110: PPUSH
25111: CALL_OW 259
25115: PUSH
25116: LD_INT 1
25118: PLUS
25119: PPUSH
25120: CALL_OW 237
25124: GO 25026
25126: POP
25127: POP
// end ;
25128: PPOPN 3
25130: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25131: LD_EXP 54
25135: PUSH
25136: LD_EXP 62
25140: AND
25141: IFFALSE 25161
25143: GO 25145
25145: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25146: LD_INT 4
25148: PPUSH
25149: LD_OWVAR 2
25153: PPUSH
25154: LD_INT 0
25156: PPUSH
25157: CALL_OW 324
25161: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25162: LD_EXP 54
25166: PUSH
25167: LD_EXP 91
25171: AND
25172: IFFALSE 25192
25174: GO 25176
25176: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25177: LD_INT 19
25179: PPUSH
25180: LD_OWVAR 2
25184: PPUSH
25185: LD_INT 0
25187: PPUSH
25188: CALL_OW 324
25192: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25193: LD_EXP 54
25197: PUSH
25198: LD_EXP 63
25202: AND
25203: IFFALSE 25305
25205: GO 25207
25207: DISABLE
25208: LD_INT 0
25210: PPUSH
25211: PPUSH
// begin enable ;
25212: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25213: LD_ADDR_VAR 0 2
25217: PUSH
25218: LD_INT 22
25220: PUSH
25221: LD_OWVAR 2
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: LD_INT 2
25232: PUSH
25233: LD_INT 34
25235: PUSH
25236: LD_INT 11
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: LD_INT 34
25245: PUSH
25246: LD_INT 30
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: LIST
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PPUSH
25262: CALL_OW 69
25266: ST_TO_ADDR
// if not tmp then
25267: LD_VAR 0 2
25271: NOT
25272: IFFALSE 25276
// exit ;
25274: GO 25305
// for i in tmp do
25276: LD_ADDR_VAR 0 1
25280: PUSH
25281: LD_VAR 0 2
25285: PUSH
25286: FOR_IN
25287: IFFALSE 25303
// begin SetLives ( i , 0 ) ;
25289: LD_VAR 0 1
25293: PPUSH
25294: LD_INT 0
25296: PPUSH
25297: CALL_OW 234
// end ;
25301: GO 25286
25303: POP
25304: POP
// end ;
25305: PPOPN 2
25307: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25308: LD_EXP 54
25312: PUSH
25313: LD_EXP 64
25317: AND
25318: IFFALSE 25338
25320: GO 25322
25322: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25323: LD_INT 32
25325: PPUSH
25326: LD_OWVAR 2
25330: PPUSH
25331: LD_INT 0
25333: PPUSH
25334: CALL_OW 324
25338: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25339: LD_EXP 54
25343: PUSH
25344: LD_EXP 65
25348: AND
25349: IFFALSE 25530
25351: GO 25353
25353: DISABLE
25354: LD_INT 0
25356: PPUSH
25357: PPUSH
25358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25359: LD_ADDR_VAR 0 2
25363: PUSH
25364: LD_INT 22
25366: PUSH
25367: LD_OWVAR 2
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: LD_INT 33
25378: PUSH
25379: LD_INT 3
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PPUSH
25390: CALL_OW 69
25394: ST_TO_ADDR
// if not tmp then
25395: LD_VAR 0 2
25399: NOT
25400: IFFALSE 25404
// exit ;
25402: GO 25530
// side := 0 ;
25404: LD_ADDR_VAR 0 3
25408: PUSH
25409: LD_INT 0
25411: ST_TO_ADDR
// for i := 1 to 8 do
25412: LD_ADDR_VAR 0 1
25416: PUSH
25417: DOUBLE
25418: LD_INT 1
25420: DEC
25421: ST_TO_ADDR
25422: LD_INT 8
25424: PUSH
25425: FOR_TO
25426: IFFALSE 25474
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25428: LD_OWVAR 2
25432: PUSH
25433: LD_VAR 0 1
25437: NONEQUAL
25438: PUSH
25439: LD_OWVAR 2
25443: PPUSH
25444: LD_VAR 0 1
25448: PPUSH
25449: CALL_OW 81
25453: PUSH
25454: LD_INT 2
25456: EQUAL
25457: AND
25458: IFFALSE 25472
// begin side := i ;
25460: LD_ADDR_VAR 0 3
25464: PUSH
25465: LD_VAR 0 1
25469: ST_TO_ADDR
// break ;
25470: GO 25474
// end ;
25472: GO 25425
25474: POP
25475: POP
// if not side then
25476: LD_VAR 0 3
25480: NOT
25481: IFFALSE 25485
// exit ;
25483: GO 25530
// for i := 1 to tmp do
25485: LD_ADDR_VAR 0 1
25489: PUSH
25490: DOUBLE
25491: LD_INT 1
25493: DEC
25494: ST_TO_ADDR
25495: LD_VAR 0 2
25499: PUSH
25500: FOR_TO
25501: IFFALSE 25528
// if Prob ( 60 ) then
25503: LD_INT 60
25505: PPUSH
25506: CALL_OW 13
25510: IFFALSE 25526
// SetSide ( i , side ) ;
25512: LD_VAR 0 1
25516: PPUSH
25517: LD_VAR 0 3
25521: PPUSH
25522: CALL_OW 235
25526: GO 25500
25528: POP
25529: POP
// end ;
25530: PPOPN 3
25532: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25533: LD_EXP 54
25537: PUSH
25538: LD_EXP 67
25542: AND
25543: IFFALSE 25662
25545: GO 25547
25547: DISABLE
25548: LD_INT 0
25550: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25551: LD_ADDR_VAR 0 1
25555: PUSH
25556: LD_INT 22
25558: PUSH
25559: LD_OWVAR 2
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 21
25570: PUSH
25571: LD_INT 1
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 3
25580: PUSH
25581: LD_INT 23
25583: PUSH
25584: LD_INT 0
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: LIST
25599: PPUSH
25600: CALL_OW 69
25604: PUSH
25605: FOR_IN
25606: IFFALSE 25660
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25608: LD_VAR 0 1
25612: PPUSH
25613: CALL_OW 257
25617: PUSH
25618: LD_INT 1
25620: PUSH
25621: LD_INT 2
25623: PUSH
25624: LD_INT 3
25626: PUSH
25627: LD_INT 4
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: IN
25636: IFFALSE 25658
// SetClass ( un , rand ( 1 , 4 ) ) ;
25638: LD_VAR 0 1
25642: PPUSH
25643: LD_INT 1
25645: PPUSH
25646: LD_INT 4
25648: PPUSH
25649: CALL_OW 12
25653: PPUSH
25654: CALL_OW 336
25658: GO 25605
25660: POP
25661: POP
// end ;
25662: PPOPN 1
25664: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25665: LD_EXP 54
25669: PUSH
25670: LD_EXP 66
25674: AND
25675: IFFALSE 25754
25677: GO 25679
25679: DISABLE
25680: LD_INT 0
25682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25683: LD_ADDR_VAR 0 1
25687: PUSH
25688: LD_INT 22
25690: PUSH
25691: LD_OWVAR 2
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 21
25702: PUSH
25703: LD_INT 3
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PPUSH
25714: CALL_OW 69
25718: ST_TO_ADDR
// if not tmp then
25719: LD_VAR 0 1
25723: NOT
25724: IFFALSE 25728
// exit ;
25726: GO 25754
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25728: LD_VAR 0 1
25732: PUSH
25733: LD_INT 1
25735: PPUSH
25736: LD_VAR 0 1
25740: PPUSH
25741: CALL_OW 12
25745: ARRAY
25746: PPUSH
25747: LD_INT 100
25749: PPUSH
25750: CALL_OW 234
// end ;
25754: PPOPN 1
25756: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25757: LD_EXP 54
25761: PUSH
25762: LD_EXP 68
25766: AND
25767: IFFALSE 25865
25769: GO 25771
25771: DISABLE
25772: LD_INT 0
25774: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25775: LD_ADDR_VAR 0 1
25779: PUSH
25780: LD_INT 22
25782: PUSH
25783: LD_OWVAR 2
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 21
25794: PUSH
25795: LD_INT 1
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PPUSH
25806: CALL_OW 69
25810: ST_TO_ADDR
// if not tmp then
25811: LD_VAR 0 1
25815: NOT
25816: IFFALSE 25820
// exit ;
25818: GO 25865
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25820: LD_VAR 0 1
25824: PUSH
25825: LD_INT 1
25827: PPUSH
25828: LD_VAR 0 1
25832: PPUSH
25833: CALL_OW 12
25837: ARRAY
25838: PPUSH
25839: LD_INT 1
25841: PPUSH
25842: LD_INT 4
25844: PPUSH
25845: CALL_OW 12
25849: PPUSH
25850: LD_INT 3000
25852: PPUSH
25853: LD_INT 9000
25855: PPUSH
25856: CALL_OW 12
25860: PPUSH
25861: CALL_OW 492
// end ;
25865: PPOPN 1
25867: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25868: LD_EXP 54
25872: PUSH
25873: LD_EXP 69
25877: AND
25878: IFFALSE 25898
25880: GO 25882
25882: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25883: LD_INT 1
25885: PPUSH
25886: LD_OWVAR 2
25890: PPUSH
25891: LD_INT 0
25893: PPUSH
25894: CALL_OW 324
25898: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25899: LD_EXP 54
25903: PUSH
25904: LD_EXP 70
25908: AND
25909: IFFALSE 25992
25911: GO 25913
25913: DISABLE
25914: LD_INT 0
25916: PPUSH
25917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25918: LD_ADDR_VAR 0 2
25922: PUSH
25923: LD_INT 22
25925: PUSH
25926: LD_OWVAR 2
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 21
25937: PUSH
25938: LD_INT 3
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PPUSH
25949: CALL_OW 69
25953: ST_TO_ADDR
// if not tmp then
25954: LD_VAR 0 2
25958: NOT
25959: IFFALSE 25963
// exit ;
25961: GO 25992
// for i in tmp do
25963: LD_ADDR_VAR 0 1
25967: PUSH
25968: LD_VAR 0 2
25972: PUSH
25973: FOR_IN
25974: IFFALSE 25990
// SetBLevel ( i , 10 ) ;
25976: LD_VAR 0 1
25980: PPUSH
25981: LD_INT 10
25983: PPUSH
25984: CALL_OW 241
25988: GO 25973
25990: POP
25991: POP
// end ;
25992: PPOPN 2
25994: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25995: LD_EXP 54
25999: PUSH
26000: LD_EXP 71
26004: AND
26005: IFFALSE 26116
26007: GO 26009
26009: DISABLE
26010: LD_INT 0
26012: PPUSH
26013: PPUSH
26014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26015: LD_ADDR_VAR 0 3
26019: PUSH
26020: LD_INT 22
26022: PUSH
26023: LD_OWVAR 2
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 25
26034: PUSH
26035: LD_INT 1
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PPUSH
26046: CALL_OW 69
26050: ST_TO_ADDR
// if not tmp then
26051: LD_VAR 0 3
26055: NOT
26056: IFFALSE 26060
// exit ;
26058: GO 26116
// un := tmp [ rand ( 1 , tmp ) ] ;
26060: LD_ADDR_VAR 0 2
26064: PUSH
26065: LD_VAR 0 3
26069: PUSH
26070: LD_INT 1
26072: PPUSH
26073: LD_VAR 0 3
26077: PPUSH
26078: CALL_OW 12
26082: ARRAY
26083: ST_TO_ADDR
// if Crawls ( un ) then
26084: LD_VAR 0 2
26088: PPUSH
26089: CALL_OW 318
26093: IFFALSE 26104
// ComWalk ( un ) ;
26095: LD_VAR 0 2
26099: PPUSH
26100: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26104: LD_VAR 0 2
26108: PPUSH
26109: LD_INT 5
26111: PPUSH
26112: CALL_OW 336
// end ;
26116: PPOPN 3
26118: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26119: LD_EXP 54
26123: PUSH
26124: LD_EXP 72
26128: AND
26129: PUSH
26130: LD_OWVAR 67
26134: PUSH
26135: LD_INT 4
26137: LESS
26138: AND
26139: IFFALSE 26158
26141: GO 26143
26143: DISABLE
// begin Difficulty := Difficulty + 1 ;
26144: LD_ADDR_OWVAR 67
26148: PUSH
26149: LD_OWVAR 67
26153: PUSH
26154: LD_INT 1
26156: PLUS
26157: ST_TO_ADDR
// end ;
26158: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26159: LD_EXP 54
26163: PUSH
26164: LD_EXP 73
26168: AND
26169: IFFALSE 26272
26171: GO 26173
26173: DISABLE
26174: LD_INT 0
26176: PPUSH
// begin for i := 1 to 5 do
26177: LD_ADDR_VAR 0 1
26181: PUSH
26182: DOUBLE
26183: LD_INT 1
26185: DEC
26186: ST_TO_ADDR
26187: LD_INT 5
26189: PUSH
26190: FOR_TO
26191: IFFALSE 26270
// begin uc_nation := nation_nature ;
26193: LD_ADDR_OWVAR 21
26197: PUSH
26198: LD_INT 0
26200: ST_TO_ADDR
// uc_side := 0 ;
26201: LD_ADDR_OWVAR 20
26205: PUSH
26206: LD_INT 0
26208: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26209: LD_ADDR_OWVAR 29
26213: PUSH
26214: LD_INT 12
26216: PUSH
26217: LD_INT 12
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: ST_TO_ADDR
// hc_agressivity := 20 ;
26224: LD_ADDR_OWVAR 35
26228: PUSH
26229: LD_INT 20
26231: ST_TO_ADDR
// hc_class := class_tiger ;
26232: LD_ADDR_OWVAR 28
26236: PUSH
26237: LD_INT 14
26239: ST_TO_ADDR
// hc_gallery :=  ;
26240: LD_ADDR_OWVAR 33
26244: PUSH
26245: LD_STRING 
26247: ST_TO_ADDR
// hc_name :=  ;
26248: LD_ADDR_OWVAR 26
26252: PUSH
26253: LD_STRING 
26255: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26256: CALL_OW 44
26260: PPUSH
26261: LD_INT 0
26263: PPUSH
26264: CALL_OW 51
// end ;
26268: GO 26190
26270: POP
26271: POP
// end ;
26272: PPOPN 1
26274: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26275: LD_EXP 54
26279: PUSH
26280: LD_EXP 74
26284: AND
26285: IFFALSE 26294
26287: GO 26289
26289: DISABLE
// StreamSibBomb ;
26290: CALL 26295 0 0
26294: END
// export function StreamSibBomb ; var i , x , y ; begin
26295: LD_INT 0
26297: PPUSH
26298: PPUSH
26299: PPUSH
26300: PPUSH
// result := false ;
26301: LD_ADDR_VAR 0 1
26305: PUSH
26306: LD_INT 0
26308: ST_TO_ADDR
// for i := 1 to 16 do
26309: LD_ADDR_VAR 0 2
26313: PUSH
26314: DOUBLE
26315: LD_INT 1
26317: DEC
26318: ST_TO_ADDR
26319: LD_INT 16
26321: PUSH
26322: FOR_TO
26323: IFFALSE 26522
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26325: LD_ADDR_VAR 0 3
26329: PUSH
26330: LD_INT 10
26332: PUSH
26333: LD_INT 20
26335: PUSH
26336: LD_INT 30
26338: PUSH
26339: LD_INT 40
26341: PUSH
26342: LD_INT 50
26344: PUSH
26345: LD_INT 60
26347: PUSH
26348: LD_INT 70
26350: PUSH
26351: LD_INT 80
26353: PUSH
26354: LD_INT 90
26356: PUSH
26357: LD_INT 100
26359: PUSH
26360: LD_INT 110
26362: PUSH
26363: LD_INT 120
26365: PUSH
26366: LD_INT 130
26368: PUSH
26369: LD_INT 140
26371: PUSH
26372: LD_INT 150
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: PUSH
26392: LD_INT 1
26394: PPUSH
26395: LD_INT 15
26397: PPUSH
26398: CALL_OW 12
26402: ARRAY
26403: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26404: LD_ADDR_VAR 0 4
26408: PUSH
26409: LD_INT 10
26411: PUSH
26412: LD_INT 20
26414: PUSH
26415: LD_INT 30
26417: PUSH
26418: LD_INT 40
26420: PUSH
26421: LD_INT 50
26423: PUSH
26424: LD_INT 60
26426: PUSH
26427: LD_INT 70
26429: PUSH
26430: LD_INT 80
26432: PUSH
26433: LD_INT 90
26435: PUSH
26436: LD_INT 100
26438: PUSH
26439: LD_INT 110
26441: PUSH
26442: LD_INT 120
26444: PUSH
26445: LD_INT 130
26447: PUSH
26448: LD_INT 140
26450: PUSH
26451: LD_INT 150
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: PUSH
26471: LD_INT 1
26473: PPUSH
26474: LD_INT 15
26476: PPUSH
26477: CALL_OW 12
26481: ARRAY
26482: ST_TO_ADDR
// if ValidHex ( x , y ) then
26483: LD_VAR 0 3
26487: PPUSH
26488: LD_VAR 0 4
26492: PPUSH
26493: CALL_OW 488
26497: IFFALSE 26520
// begin result := [ x , y ] ;
26499: LD_ADDR_VAR 0 1
26503: PUSH
26504: LD_VAR 0 3
26508: PUSH
26509: LD_VAR 0 4
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: ST_TO_ADDR
// break ;
26518: GO 26522
// end ; end ;
26520: GO 26322
26522: POP
26523: POP
// if result then
26524: LD_VAR 0 1
26528: IFFALSE 26588
// begin ToLua ( playSibBomb() ) ;
26530: LD_STRING playSibBomb()
26532: PPUSH
26533: CALL_OW 559
// wait ( 0 0$14 ) ;
26537: LD_INT 490
26539: PPUSH
26540: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26544: LD_VAR 0 1
26548: PUSH
26549: LD_INT 1
26551: ARRAY
26552: PPUSH
26553: LD_VAR 0 1
26557: PUSH
26558: LD_INT 2
26560: ARRAY
26561: PPUSH
26562: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26566: LD_VAR 0 1
26570: PUSH
26571: LD_INT 1
26573: ARRAY
26574: PPUSH
26575: LD_VAR 0 1
26579: PUSH
26580: LD_INT 2
26582: ARRAY
26583: PPUSH
26584: CALL_OW 429
// end ; end ;
26588: LD_VAR 0 1
26592: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26593: LD_EXP 54
26597: PUSH
26598: LD_EXP 76
26602: AND
26603: IFFALSE 26615
26605: GO 26607
26607: DISABLE
// YouLost (  ) ;
26608: LD_STRING 
26610: PPUSH
26611: CALL_OW 104
26615: END
// every 0 0$1 trigger StreamModeActive and sFog do
26616: LD_EXP 54
26620: PUSH
26621: LD_EXP 75
26625: AND
26626: IFFALSE 26640
26628: GO 26630
26630: DISABLE
// FogOff ( your_side ) ;
26631: LD_OWVAR 2
26635: PPUSH
26636: CALL_OW 344
26640: END
// every 0 0$1 trigger StreamModeActive and sSun do
26641: LD_EXP 54
26645: PUSH
26646: LD_EXP 77
26650: AND
26651: IFFALSE 26679
26653: GO 26655
26655: DISABLE
// begin solar_recharge_percent := 0 ;
26656: LD_ADDR_OWVAR 79
26660: PUSH
26661: LD_INT 0
26663: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26664: LD_INT 10500
26666: PPUSH
26667: CALL_OW 67
// solar_recharge_percent := 100 ;
26671: LD_ADDR_OWVAR 79
26675: PUSH
26676: LD_INT 100
26678: ST_TO_ADDR
// end ;
26679: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26680: LD_EXP 54
26684: PUSH
26685: LD_EXP 78
26689: AND
26690: IFFALSE 26929
26692: GO 26694
26694: DISABLE
26695: LD_INT 0
26697: PPUSH
26698: PPUSH
26699: PPUSH
// begin tmp := [ ] ;
26700: LD_ADDR_VAR 0 3
26704: PUSH
26705: EMPTY
26706: ST_TO_ADDR
// for i := 1 to 6 do
26707: LD_ADDR_VAR 0 1
26711: PUSH
26712: DOUBLE
26713: LD_INT 1
26715: DEC
26716: ST_TO_ADDR
26717: LD_INT 6
26719: PUSH
26720: FOR_TO
26721: IFFALSE 26826
// begin uc_nation := nation_nature ;
26723: LD_ADDR_OWVAR 21
26727: PUSH
26728: LD_INT 0
26730: ST_TO_ADDR
// uc_side := 0 ;
26731: LD_ADDR_OWVAR 20
26735: PUSH
26736: LD_INT 0
26738: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26739: LD_ADDR_OWVAR 29
26743: PUSH
26744: LD_INT 12
26746: PUSH
26747: LD_INT 12
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: ST_TO_ADDR
// hc_agressivity := 20 ;
26754: LD_ADDR_OWVAR 35
26758: PUSH
26759: LD_INT 20
26761: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26762: LD_ADDR_OWVAR 28
26766: PUSH
26767: LD_INT 17
26769: ST_TO_ADDR
// hc_gallery :=  ;
26770: LD_ADDR_OWVAR 33
26774: PUSH
26775: LD_STRING 
26777: ST_TO_ADDR
// hc_name :=  ;
26778: LD_ADDR_OWVAR 26
26782: PUSH
26783: LD_STRING 
26785: ST_TO_ADDR
// un := CreateHuman ;
26786: LD_ADDR_VAR 0 2
26790: PUSH
26791: CALL_OW 44
26795: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26796: LD_VAR 0 2
26800: PPUSH
26801: LD_INT 1
26803: PPUSH
26804: CALL_OW 51
// tmp := tmp ^ un ;
26808: LD_ADDR_VAR 0 3
26812: PUSH
26813: LD_VAR 0 3
26817: PUSH
26818: LD_VAR 0 2
26822: ADD
26823: ST_TO_ADDR
// end ;
26824: GO 26720
26826: POP
26827: POP
// repeat wait ( 0 0$1 ) ;
26828: LD_INT 35
26830: PPUSH
26831: CALL_OW 67
// for un in tmp do
26835: LD_ADDR_VAR 0 2
26839: PUSH
26840: LD_VAR 0 3
26844: PUSH
26845: FOR_IN
26846: IFFALSE 26920
// begin if IsDead ( un ) then
26848: LD_VAR 0 2
26852: PPUSH
26853: CALL_OW 301
26857: IFFALSE 26877
// begin tmp := tmp diff un ;
26859: LD_ADDR_VAR 0 3
26863: PUSH
26864: LD_VAR 0 3
26868: PUSH
26869: LD_VAR 0 2
26873: DIFF
26874: ST_TO_ADDR
// continue ;
26875: GO 26845
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26877: LD_VAR 0 2
26881: PPUSH
26882: LD_INT 3
26884: PUSH
26885: LD_INT 22
26887: PUSH
26888: LD_INT 0
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PPUSH
26899: CALL_OW 69
26903: PPUSH
26904: LD_VAR 0 2
26908: PPUSH
26909: CALL_OW 74
26913: PPUSH
26914: CALL_OW 115
// end ;
26918: GO 26845
26920: POP
26921: POP
// until not tmp ;
26922: LD_VAR 0 3
26926: NOT
26927: IFFALSE 26828
// end ;
26929: PPOPN 3
26931: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26932: LD_EXP 54
26936: PUSH
26937: LD_EXP 79
26941: AND
26942: IFFALSE 26996
26944: GO 26946
26946: DISABLE
// begin ToLua ( displayTroll(); ) ;
26947: LD_STRING displayTroll();
26949: PPUSH
26950: CALL_OW 559
// wait ( 3 3$00 ) ;
26954: LD_INT 6300
26956: PPUSH
26957: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26961: LD_STRING hideTroll();
26963: PPUSH
26964: CALL_OW 559
// wait ( 1 1$00 ) ;
26968: LD_INT 2100
26970: PPUSH
26971: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26975: LD_STRING displayTroll();
26977: PPUSH
26978: CALL_OW 559
// wait ( 1 1$00 ) ;
26982: LD_INT 2100
26984: PPUSH
26985: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26989: LD_STRING hideTroll();
26991: PPUSH
26992: CALL_OW 559
// end ;
26996: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26997: LD_EXP 54
27001: PUSH
27002: LD_EXP 80
27006: AND
27007: IFFALSE 27070
27009: GO 27011
27011: DISABLE
27012: LD_INT 0
27014: PPUSH
// begin p := 0 ;
27015: LD_ADDR_VAR 0 1
27019: PUSH
27020: LD_INT 0
27022: ST_TO_ADDR
// repeat game_speed := 1 ;
27023: LD_ADDR_OWVAR 65
27027: PUSH
27028: LD_INT 1
27030: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27031: LD_INT 35
27033: PPUSH
27034: CALL_OW 67
// p := p + 1 ;
27038: LD_ADDR_VAR 0 1
27042: PUSH
27043: LD_VAR 0 1
27047: PUSH
27048: LD_INT 1
27050: PLUS
27051: ST_TO_ADDR
// until p >= 60 ;
27052: LD_VAR 0 1
27056: PUSH
27057: LD_INT 60
27059: GREATEREQUAL
27060: IFFALSE 27023
// game_speed := 4 ;
27062: LD_ADDR_OWVAR 65
27066: PUSH
27067: LD_INT 4
27069: ST_TO_ADDR
// end ;
27070: PPOPN 1
27072: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27073: LD_EXP 54
27077: PUSH
27078: LD_EXP 81
27082: AND
27083: IFFALSE 27229
27085: GO 27087
27087: DISABLE
27088: LD_INT 0
27090: PPUSH
27091: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27092: LD_ADDR_VAR 0 1
27096: PUSH
27097: LD_INT 22
27099: PUSH
27100: LD_OWVAR 2
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 2
27111: PUSH
27112: LD_INT 30
27114: PUSH
27115: LD_INT 0
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PUSH
27122: LD_INT 30
27124: PUSH
27125: LD_INT 1
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: LIST
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PPUSH
27141: CALL_OW 69
27145: ST_TO_ADDR
// if not depot then
27146: LD_VAR 0 1
27150: NOT
27151: IFFALSE 27155
// exit ;
27153: GO 27229
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27155: LD_ADDR_VAR 0 2
27159: PUSH
27160: LD_VAR 0 1
27164: PUSH
27165: LD_INT 1
27167: PPUSH
27168: LD_VAR 0 1
27172: PPUSH
27173: CALL_OW 12
27177: ARRAY
27178: PPUSH
27179: CALL_OW 274
27183: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27184: LD_VAR 0 2
27188: PPUSH
27189: LD_INT 1
27191: PPUSH
27192: LD_INT 0
27194: PPUSH
27195: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27199: LD_VAR 0 2
27203: PPUSH
27204: LD_INT 2
27206: PPUSH
27207: LD_INT 0
27209: PPUSH
27210: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27214: LD_VAR 0 2
27218: PPUSH
27219: LD_INT 3
27221: PPUSH
27222: LD_INT 0
27224: PPUSH
27225: CALL_OW 277
// end ;
27229: PPOPN 2
27231: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27232: LD_EXP 54
27236: PUSH
27237: LD_EXP 82
27241: AND
27242: IFFALSE 27339
27244: GO 27246
27246: DISABLE
27247: LD_INT 0
27249: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27250: LD_ADDR_VAR 0 1
27254: PUSH
27255: LD_INT 22
27257: PUSH
27258: LD_OWVAR 2
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 21
27269: PUSH
27270: LD_INT 1
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 3
27279: PUSH
27280: LD_INT 23
27282: PUSH
27283: LD_INT 0
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: LIST
27298: PPUSH
27299: CALL_OW 69
27303: ST_TO_ADDR
// if not tmp then
27304: LD_VAR 0 1
27308: NOT
27309: IFFALSE 27313
// exit ;
27311: GO 27339
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27313: LD_VAR 0 1
27317: PUSH
27318: LD_INT 1
27320: PPUSH
27321: LD_VAR 0 1
27325: PPUSH
27326: CALL_OW 12
27330: ARRAY
27331: PPUSH
27332: LD_INT 200
27334: PPUSH
27335: CALL_OW 234
// end ;
27339: PPOPN 1
27341: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27342: LD_EXP 54
27346: PUSH
27347: LD_EXP 83
27351: AND
27352: IFFALSE 27431
27354: GO 27356
27356: DISABLE
27357: LD_INT 0
27359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27360: LD_ADDR_VAR 0 1
27364: PUSH
27365: LD_INT 22
27367: PUSH
27368: LD_OWVAR 2
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 21
27379: PUSH
27380: LD_INT 2
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PPUSH
27391: CALL_OW 69
27395: ST_TO_ADDR
// if not tmp then
27396: LD_VAR 0 1
27400: NOT
27401: IFFALSE 27405
// exit ;
27403: GO 27431
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27405: LD_VAR 0 1
27409: PUSH
27410: LD_INT 1
27412: PPUSH
27413: LD_VAR 0 1
27417: PPUSH
27418: CALL_OW 12
27422: ARRAY
27423: PPUSH
27424: LD_INT 60
27426: PPUSH
27427: CALL_OW 234
// end ;
27431: PPOPN 1
27433: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27434: LD_EXP 54
27438: PUSH
27439: LD_EXP 84
27443: AND
27444: IFFALSE 27543
27446: GO 27448
27448: DISABLE
27449: LD_INT 0
27451: PPUSH
27452: PPUSH
// begin enable ;
27453: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27454: LD_ADDR_VAR 0 1
27458: PUSH
27459: LD_INT 22
27461: PUSH
27462: LD_OWVAR 2
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 61
27473: PUSH
27474: EMPTY
27475: LIST
27476: PUSH
27477: LD_INT 33
27479: PUSH
27480: LD_INT 2
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: LIST
27491: PPUSH
27492: CALL_OW 69
27496: ST_TO_ADDR
// if not tmp then
27497: LD_VAR 0 1
27501: NOT
27502: IFFALSE 27506
// exit ;
27504: GO 27543
// for i in tmp do
27506: LD_ADDR_VAR 0 2
27510: PUSH
27511: LD_VAR 0 1
27515: PUSH
27516: FOR_IN
27517: IFFALSE 27541
// if IsControledBy ( i ) then
27519: LD_VAR 0 2
27523: PPUSH
27524: CALL_OW 312
27528: IFFALSE 27539
// ComUnlink ( i ) ;
27530: LD_VAR 0 2
27534: PPUSH
27535: CALL_OW 136
27539: GO 27516
27541: POP
27542: POP
// end ;
27543: PPOPN 2
27545: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27546: LD_EXP 54
27550: PUSH
27551: LD_EXP 85
27555: AND
27556: IFFALSE 27696
27558: GO 27560
27560: DISABLE
27561: LD_INT 0
27563: PPUSH
27564: PPUSH
// begin ToLua ( displayPowell(); ) ;
27565: LD_STRING displayPowell();
27567: PPUSH
27568: CALL_OW 559
// uc_side := 0 ;
27572: LD_ADDR_OWVAR 20
27576: PUSH
27577: LD_INT 0
27579: ST_TO_ADDR
// uc_nation := 2 ;
27580: LD_ADDR_OWVAR 21
27584: PUSH
27585: LD_INT 2
27587: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27588: LD_ADDR_OWVAR 37
27592: PUSH
27593: LD_INT 14
27595: ST_TO_ADDR
// vc_engine := engine_siberite ;
27596: LD_ADDR_OWVAR 39
27600: PUSH
27601: LD_INT 3
27603: ST_TO_ADDR
// vc_control := control_apeman ;
27604: LD_ADDR_OWVAR 38
27608: PUSH
27609: LD_INT 5
27611: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27612: LD_ADDR_OWVAR 40
27616: PUSH
27617: LD_INT 29
27619: ST_TO_ADDR
// un := CreateVehicle ;
27620: LD_ADDR_VAR 0 2
27624: PUSH
27625: CALL_OW 45
27629: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27630: LD_VAR 0 2
27634: PPUSH
27635: LD_INT 1
27637: PPUSH
27638: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27642: LD_INT 35
27644: PPUSH
27645: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27649: LD_VAR 0 2
27653: PPUSH
27654: LD_INT 22
27656: PUSH
27657: LD_OWVAR 2
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PPUSH
27666: CALL_OW 69
27670: PPUSH
27671: LD_VAR 0 2
27675: PPUSH
27676: CALL_OW 74
27680: PPUSH
27681: CALL_OW 115
// until IsDead ( un ) ;
27685: LD_VAR 0 2
27689: PPUSH
27690: CALL_OW 301
27694: IFFALSE 27642
// end ;
27696: PPOPN 2
27698: END
// every 0 0$1 trigger StreamModeActive and sStu do
27699: LD_EXP 54
27703: PUSH
27704: LD_EXP 93
27708: AND
27709: IFFALSE 27725
27711: GO 27713
27713: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27714: LD_STRING displayStucuk();
27716: PPUSH
27717: CALL_OW 559
// ResetFog ;
27721: CALL_OW 335
// end ;
27725: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27726: LD_EXP 54
27730: PUSH
27731: LD_EXP 86
27735: AND
27736: IFFALSE 27877
27738: GO 27740
27740: DISABLE
27741: LD_INT 0
27743: PPUSH
27744: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27745: LD_ADDR_VAR 0 2
27749: PUSH
27750: LD_INT 22
27752: PUSH
27753: LD_OWVAR 2
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: LD_INT 21
27764: PUSH
27765: LD_INT 1
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PPUSH
27776: CALL_OW 69
27780: ST_TO_ADDR
// if not tmp then
27781: LD_VAR 0 2
27785: NOT
27786: IFFALSE 27790
// exit ;
27788: GO 27877
// un := tmp [ rand ( 1 , tmp ) ] ;
27790: LD_ADDR_VAR 0 1
27794: PUSH
27795: LD_VAR 0 2
27799: PUSH
27800: LD_INT 1
27802: PPUSH
27803: LD_VAR 0 2
27807: PPUSH
27808: CALL_OW 12
27812: ARRAY
27813: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27814: LD_VAR 0 1
27818: PPUSH
27819: LD_INT 0
27821: PPUSH
27822: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27826: LD_VAR 0 1
27830: PPUSH
27831: LD_OWVAR 3
27835: PUSH
27836: LD_VAR 0 1
27840: DIFF
27841: PPUSH
27842: LD_VAR 0 1
27846: PPUSH
27847: CALL_OW 74
27851: PPUSH
27852: CALL_OW 115
// wait ( 0 0$20 ) ;
27856: LD_INT 700
27858: PPUSH
27859: CALL_OW 67
// SetSide ( un , your_side ) ;
27863: LD_VAR 0 1
27867: PPUSH
27868: LD_OWVAR 2
27872: PPUSH
27873: CALL_OW 235
// end ;
27877: PPOPN 2
27879: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27880: LD_EXP 54
27884: PUSH
27885: LD_EXP 87
27889: AND
27890: IFFALSE 27996
27892: GO 27894
27894: DISABLE
27895: LD_INT 0
27897: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27898: LD_ADDR_VAR 0 1
27902: PUSH
27903: LD_INT 22
27905: PUSH
27906: LD_OWVAR 2
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 2
27917: PUSH
27918: LD_INT 30
27920: PUSH
27921: LD_INT 0
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: LD_INT 30
27930: PUSH
27931: LD_INT 1
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: LIST
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PPUSH
27947: CALL_OW 69
27951: ST_TO_ADDR
// if not depot then
27952: LD_VAR 0 1
27956: NOT
27957: IFFALSE 27961
// exit ;
27959: GO 27996
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27961: LD_VAR 0 1
27965: PUSH
27966: LD_INT 1
27968: ARRAY
27969: PPUSH
27970: CALL_OW 250
27974: PPUSH
27975: LD_VAR 0 1
27979: PUSH
27980: LD_INT 1
27982: ARRAY
27983: PPUSH
27984: CALL_OW 251
27988: PPUSH
27989: LD_INT 70
27991: PPUSH
27992: CALL_OW 495
// end ;
27996: PPOPN 1
27998: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27999: LD_EXP 54
28003: PUSH
28004: LD_EXP 88
28008: AND
28009: IFFALSE 28220
28011: GO 28013
28013: DISABLE
28014: LD_INT 0
28016: PPUSH
28017: PPUSH
28018: PPUSH
28019: PPUSH
28020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28021: LD_ADDR_VAR 0 5
28025: PUSH
28026: LD_INT 22
28028: PUSH
28029: LD_OWVAR 2
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: LD_INT 21
28040: PUSH
28041: LD_INT 1
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PPUSH
28052: CALL_OW 69
28056: ST_TO_ADDR
// if not tmp then
28057: LD_VAR 0 5
28061: NOT
28062: IFFALSE 28066
// exit ;
28064: GO 28220
// for i in tmp do
28066: LD_ADDR_VAR 0 1
28070: PUSH
28071: LD_VAR 0 5
28075: PUSH
28076: FOR_IN
28077: IFFALSE 28218
// begin d := rand ( 0 , 5 ) ;
28079: LD_ADDR_VAR 0 4
28083: PUSH
28084: LD_INT 0
28086: PPUSH
28087: LD_INT 5
28089: PPUSH
28090: CALL_OW 12
28094: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28095: LD_ADDR_VAR 0 2
28099: PUSH
28100: LD_VAR 0 1
28104: PPUSH
28105: CALL_OW 250
28109: PPUSH
28110: LD_VAR 0 4
28114: PPUSH
28115: LD_INT 3
28117: PPUSH
28118: LD_INT 12
28120: PPUSH
28121: CALL_OW 12
28125: PPUSH
28126: CALL_OW 272
28130: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28131: LD_ADDR_VAR 0 3
28135: PUSH
28136: LD_VAR 0 1
28140: PPUSH
28141: CALL_OW 251
28145: PPUSH
28146: LD_VAR 0 4
28150: PPUSH
28151: LD_INT 3
28153: PPUSH
28154: LD_INT 12
28156: PPUSH
28157: CALL_OW 12
28161: PPUSH
28162: CALL_OW 273
28166: ST_TO_ADDR
// if ValidHex ( x , y ) then
28167: LD_VAR 0 2
28171: PPUSH
28172: LD_VAR 0 3
28176: PPUSH
28177: CALL_OW 488
28181: IFFALSE 28216
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28183: LD_VAR 0 1
28187: PPUSH
28188: LD_VAR 0 2
28192: PPUSH
28193: LD_VAR 0 3
28197: PPUSH
28198: LD_INT 3
28200: PPUSH
28201: LD_INT 6
28203: PPUSH
28204: CALL_OW 12
28208: PPUSH
28209: LD_INT 1
28211: PPUSH
28212: CALL_OW 483
// end ;
28216: GO 28076
28218: POP
28219: POP
// end ;
28220: PPOPN 5
28222: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28223: LD_EXP 54
28227: PUSH
28228: LD_EXP 89
28232: AND
28233: IFFALSE 28327
28235: GO 28237
28237: DISABLE
28238: LD_INT 0
28240: PPUSH
28241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28242: LD_ADDR_VAR 0 2
28246: PUSH
28247: LD_INT 22
28249: PUSH
28250: LD_OWVAR 2
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 32
28261: PUSH
28262: LD_INT 1
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 21
28271: PUSH
28272: LD_INT 2
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: LIST
28283: PPUSH
28284: CALL_OW 69
28288: ST_TO_ADDR
// if not tmp then
28289: LD_VAR 0 2
28293: NOT
28294: IFFALSE 28298
// exit ;
28296: GO 28327
// for i in tmp do
28298: LD_ADDR_VAR 0 1
28302: PUSH
28303: LD_VAR 0 2
28307: PUSH
28308: FOR_IN
28309: IFFALSE 28325
// SetFuel ( i , 0 ) ;
28311: LD_VAR 0 1
28315: PPUSH
28316: LD_INT 0
28318: PPUSH
28319: CALL_OW 240
28323: GO 28308
28325: POP
28326: POP
// end ;
28327: PPOPN 2
28329: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28330: LD_EXP 54
28334: PUSH
28335: LD_EXP 90
28339: AND
28340: IFFALSE 28406
28342: GO 28344
28344: DISABLE
28345: LD_INT 0
28347: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28348: LD_ADDR_VAR 0 1
28352: PUSH
28353: LD_INT 22
28355: PUSH
28356: LD_OWVAR 2
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 30
28367: PUSH
28368: LD_INT 29
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PPUSH
28379: CALL_OW 69
28383: ST_TO_ADDR
// if not tmp then
28384: LD_VAR 0 1
28388: NOT
28389: IFFALSE 28393
// exit ;
28391: GO 28406
// DestroyUnit ( tmp [ 1 ] ) ;
28393: LD_VAR 0 1
28397: PUSH
28398: LD_INT 1
28400: ARRAY
28401: PPUSH
28402: CALL_OW 65
// end ;
28406: PPOPN 1
28408: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28409: LD_EXP 54
28413: PUSH
28414: LD_EXP 92
28418: AND
28419: IFFALSE 28548
28421: GO 28423
28423: DISABLE
28424: LD_INT 0
28426: PPUSH
// begin uc_side := 0 ;
28427: LD_ADDR_OWVAR 20
28431: PUSH
28432: LD_INT 0
28434: ST_TO_ADDR
// uc_nation := nation_arabian ;
28435: LD_ADDR_OWVAR 21
28439: PUSH
28440: LD_INT 2
28442: ST_TO_ADDR
// hc_gallery :=  ;
28443: LD_ADDR_OWVAR 33
28447: PUSH
28448: LD_STRING 
28450: ST_TO_ADDR
// hc_name :=  ;
28451: LD_ADDR_OWVAR 26
28455: PUSH
28456: LD_STRING 
28458: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28459: LD_INT 1
28461: PPUSH
28462: LD_INT 11
28464: PPUSH
28465: LD_INT 10
28467: PPUSH
28468: CALL_OW 380
// un := CreateHuman ;
28472: LD_ADDR_VAR 0 1
28476: PUSH
28477: CALL_OW 44
28481: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28482: LD_VAR 0 1
28486: PPUSH
28487: LD_INT 1
28489: PPUSH
28490: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28494: LD_INT 35
28496: PPUSH
28497: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28501: LD_VAR 0 1
28505: PPUSH
28506: LD_INT 22
28508: PUSH
28509: LD_OWVAR 2
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PPUSH
28518: CALL_OW 69
28522: PPUSH
28523: LD_VAR 0 1
28527: PPUSH
28528: CALL_OW 74
28532: PPUSH
28533: CALL_OW 115
// until IsDead ( un ) ;
28537: LD_VAR 0 1
28541: PPUSH
28542: CALL_OW 301
28546: IFFALSE 28494
// end ;
28548: PPOPN 1
28550: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28551: LD_EXP 54
28555: PUSH
28556: LD_EXP 94
28560: AND
28561: IFFALSE 28573
28563: GO 28565
28565: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28566: LD_STRING earthquake(getX(game), 0, 32)
28568: PPUSH
28569: CALL_OW 559
28573: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28574: LD_EXP 54
28578: PUSH
28579: LD_EXP 95
28583: AND
28584: IFFALSE 28675
28586: GO 28588
28588: DISABLE
28589: LD_INT 0
28591: PPUSH
// begin enable ;
28592: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28593: LD_ADDR_VAR 0 1
28597: PUSH
28598: LD_INT 22
28600: PUSH
28601: LD_OWVAR 2
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: PUSH
28610: LD_INT 21
28612: PUSH
28613: LD_INT 2
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PUSH
28620: LD_INT 33
28622: PUSH
28623: LD_INT 3
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: LIST
28634: PPUSH
28635: CALL_OW 69
28639: ST_TO_ADDR
// if not tmp then
28640: LD_VAR 0 1
28644: NOT
28645: IFFALSE 28649
// exit ;
28647: GO 28675
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28649: LD_VAR 0 1
28653: PUSH
28654: LD_INT 1
28656: PPUSH
28657: LD_VAR 0 1
28661: PPUSH
28662: CALL_OW 12
28666: ARRAY
28667: PPUSH
28668: LD_INT 1
28670: PPUSH
28671: CALL_OW 234
// end ;
28675: PPOPN 1
28677: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28678: LD_EXP 54
28682: PUSH
28683: LD_EXP 96
28687: AND
28688: IFFALSE 28829
28690: GO 28692
28692: DISABLE
28693: LD_INT 0
28695: PPUSH
28696: PPUSH
28697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28698: LD_ADDR_VAR 0 3
28702: PUSH
28703: LD_INT 22
28705: PUSH
28706: LD_OWVAR 2
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 25
28717: PUSH
28718: LD_INT 1
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PPUSH
28729: CALL_OW 69
28733: ST_TO_ADDR
// if not tmp then
28734: LD_VAR 0 3
28738: NOT
28739: IFFALSE 28743
// exit ;
28741: GO 28829
// un := tmp [ rand ( 1 , tmp ) ] ;
28743: LD_ADDR_VAR 0 2
28747: PUSH
28748: LD_VAR 0 3
28752: PUSH
28753: LD_INT 1
28755: PPUSH
28756: LD_VAR 0 3
28760: PPUSH
28761: CALL_OW 12
28765: ARRAY
28766: ST_TO_ADDR
// if Crawls ( un ) then
28767: LD_VAR 0 2
28771: PPUSH
28772: CALL_OW 318
28776: IFFALSE 28787
// ComWalk ( un ) ;
28778: LD_VAR 0 2
28782: PPUSH
28783: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28787: LD_VAR 0 2
28791: PPUSH
28792: LD_INT 9
28794: PPUSH
28795: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28799: LD_INT 28
28801: PPUSH
28802: LD_OWVAR 2
28806: PPUSH
28807: LD_INT 2
28809: PPUSH
28810: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28814: LD_INT 29
28816: PPUSH
28817: LD_OWVAR 2
28821: PPUSH
28822: LD_INT 2
28824: PPUSH
28825: CALL_OW 322
// end ;
28829: PPOPN 3
28831: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28832: LD_EXP 54
28836: PUSH
28837: LD_EXP 97
28841: AND
28842: IFFALSE 28953
28844: GO 28846
28846: DISABLE
28847: LD_INT 0
28849: PPUSH
28850: PPUSH
28851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28852: LD_ADDR_VAR 0 3
28856: PUSH
28857: LD_INT 22
28859: PUSH
28860: LD_OWVAR 2
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: LD_INT 25
28871: PUSH
28872: LD_INT 1
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PPUSH
28883: CALL_OW 69
28887: ST_TO_ADDR
// if not tmp then
28888: LD_VAR 0 3
28892: NOT
28893: IFFALSE 28897
// exit ;
28895: GO 28953
// un := tmp [ rand ( 1 , tmp ) ] ;
28897: LD_ADDR_VAR 0 2
28901: PUSH
28902: LD_VAR 0 3
28906: PUSH
28907: LD_INT 1
28909: PPUSH
28910: LD_VAR 0 3
28914: PPUSH
28915: CALL_OW 12
28919: ARRAY
28920: ST_TO_ADDR
// if Crawls ( un ) then
28921: LD_VAR 0 2
28925: PPUSH
28926: CALL_OW 318
28930: IFFALSE 28941
// ComWalk ( un ) ;
28932: LD_VAR 0 2
28936: PPUSH
28937: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28941: LD_VAR 0 2
28945: PPUSH
28946: LD_INT 8
28948: PPUSH
28949: CALL_OW 336
// end ;
28953: PPOPN 3
28955: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28956: LD_EXP 54
28960: PUSH
28961: LD_EXP 98
28965: AND
28966: IFFALSE 29110
28968: GO 28970
28970: DISABLE
28971: LD_INT 0
28973: PPUSH
28974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28975: LD_ADDR_VAR 0 2
28979: PUSH
28980: LD_INT 22
28982: PUSH
28983: LD_OWVAR 2
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 21
28994: PUSH
28995: LD_INT 2
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 2
29004: PUSH
29005: LD_INT 34
29007: PUSH
29008: LD_INT 12
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: LD_INT 34
29017: PUSH
29018: LD_INT 51
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 34
29027: PUSH
29028: LD_INT 32
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: LIST
29045: PPUSH
29046: CALL_OW 69
29050: ST_TO_ADDR
// if not tmp then
29051: LD_VAR 0 2
29055: NOT
29056: IFFALSE 29060
// exit ;
29058: GO 29110
// for i in tmp do
29060: LD_ADDR_VAR 0 1
29064: PUSH
29065: LD_VAR 0 2
29069: PUSH
29070: FOR_IN
29071: IFFALSE 29108
// if GetCargo ( i , mat_artifact ) = 0 then
29073: LD_VAR 0 1
29077: PPUSH
29078: LD_INT 4
29080: PPUSH
29081: CALL_OW 289
29085: PUSH
29086: LD_INT 0
29088: EQUAL
29089: IFFALSE 29106
// SetCargo ( i , mat_siberit , 100 ) ;
29091: LD_VAR 0 1
29095: PPUSH
29096: LD_INT 3
29098: PPUSH
29099: LD_INT 100
29101: PPUSH
29102: CALL_OW 290
29106: GO 29070
29108: POP
29109: POP
// end ;
29110: PPOPN 2
29112: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29113: LD_EXP 54
29117: PUSH
29118: LD_EXP 99
29122: AND
29123: IFFALSE 29306
29125: GO 29127
29127: DISABLE
29128: LD_INT 0
29130: PPUSH
29131: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29132: LD_ADDR_VAR 0 2
29136: PUSH
29137: LD_INT 22
29139: PUSH
29140: LD_OWVAR 2
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PPUSH
29149: CALL_OW 69
29153: ST_TO_ADDR
// if not tmp then
29154: LD_VAR 0 2
29158: NOT
29159: IFFALSE 29163
// exit ;
29161: GO 29306
// for i := 1 to 2 do
29163: LD_ADDR_VAR 0 1
29167: PUSH
29168: DOUBLE
29169: LD_INT 1
29171: DEC
29172: ST_TO_ADDR
29173: LD_INT 2
29175: PUSH
29176: FOR_TO
29177: IFFALSE 29304
// begin uc_side := your_side ;
29179: LD_ADDR_OWVAR 20
29183: PUSH
29184: LD_OWVAR 2
29188: ST_TO_ADDR
// uc_nation := nation_american ;
29189: LD_ADDR_OWVAR 21
29193: PUSH
29194: LD_INT 1
29196: ST_TO_ADDR
// vc_chassis := us_morphling ;
29197: LD_ADDR_OWVAR 37
29201: PUSH
29202: LD_INT 5
29204: ST_TO_ADDR
// vc_engine := engine_siberite ;
29205: LD_ADDR_OWVAR 39
29209: PUSH
29210: LD_INT 3
29212: ST_TO_ADDR
// vc_control := control_computer ;
29213: LD_ADDR_OWVAR 38
29217: PUSH
29218: LD_INT 3
29220: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29221: LD_ADDR_OWVAR 40
29225: PUSH
29226: LD_INT 10
29228: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29229: LD_VAR 0 2
29233: PUSH
29234: LD_INT 1
29236: ARRAY
29237: PPUSH
29238: CALL_OW 310
29242: NOT
29243: IFFALSE 29290
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29245: CALL_OW 45
29249: PPUSH
29250: LD_VAR 0 2
29254: PUSH
29255: LD_INT 1
29257: ARRAY
29258: PPUSH
29259: CALL_OW 250
29263: PPUSH
29264: LD_VAR 0 2
29268: PUSH
29269: LD_INT 1
29271: ARRAY
29272: PPUSH
29273: CALL_OW 251
29277: PPUSH
29278: LD_INT 12
29280: PPUSH
29281: LD_INT 1
29283: PPUSH
29284: CALL_OW 50
29288: GO 29302
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29290: CALL_OW 45
29294: PPUSH
29295: LD_INT 1
29297: PPUSH
29298: CALL_OW 51
// end ;
29302: GO 29176
29304: POP
29305: POP
// end ;
29306: PPOPN 2
29308: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29309: LD_EXP 54
29313: PUSH
29314: LD_EXP 100
29318: AND
29319: IFFALSE 29541
29321: GO 29323
29323: DISABLE
29324: LD_INT 0
29326: PPUSH
29327: PPUSH
29328: PPUSH
29329: PPUSH
29330: PPUSH
29331: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29332: LD_ADDR_VAR 0 6
29336: PUSH
29337: LD_INT 22
29339: PUSH
29340: LD_OWVAR 2
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 21
29351: PUSH
29352: LD_INT 1
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 3
29361: PUSH
29362: LD_INT 23
29364: PUSH
29365: LD_INT 0
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: LIST
29380: PPUSH
29381: CALL_OW 69
29385: ST_TO_ADDR
// if not tmp then
29386: LD_VAR 0 6
29390: NOT
29391: IFFALSE 29395
// exit ;
29393: GO 29541
// s1 := rand ( 1 , 4 ) ;
29395: LD_ADDR_VAR 0 2
29399: PUSH
29400: LD_INT 1
29402: PPUSH
29403: LD_INT 4
29405: PPUSH
29406: CALL_OW 12
29410: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29411: LD_ADDR_VAR 0 4
29415: PUSH
29416: LD_VAR 0 6
29420: PUSH
29421: LD_INT 1
29423: ARRAY
29424: PPUSH
29425: LD_VAR 0 2
29429: PPUSH
29430: CALL_OW 259
29434: ST_TO_ADDR
// if s1 = 1 then
29435: LD_VAR 0 2
29439: PUSH
29440: LD_INT 1
29442: EQUAL
29443: IFFALSE 29463
// s2 := rand ( 2 , 4 ) else
29445: LD_ADDR_VAR 0 3
29449: PUSH
29450: LD_INT 2
29452: PPUSH
29453: LD_INT 4
29455: PPUSH
29456: CALL_OW 12
29460: ST_TO_ADDR
29461: GO 29471
// s2 := 1 ;
29463: LD_ADDR_VAR 0 3
29467: PUSH
29468: LD_INT 1
29470: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29471: LD_ADDR_VAR 0 5
29475: PUSH
29476: LD_VAR 0 6
29480: PUSH
29481: LD_INT 1
29483: ARRAY
29484: PPUSH
29485: LD_VAR 0 3
29489: PPUSH
29490: CALL_OW 259
29494: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29495: LD_VAR 0 6
29499: PUSH
29500: LD_INT 1
29502: ARRAY
29503: PPUSH
29504: LD_VAR 0 2
29508: PPUSH
29509: LD_VAR 0 5
29513: PPUSH
29514: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29518: LD_VAR 0 6
29522: PUSH
29523: LD_INT 1
29525: ARRAY
29526: PPUSH
29527: LD_VAR 0 3
29531: PPUSH
29532: LD_VAR 0 4
29536: PPUSH
29537: CALL_OW 237
// end ;
29541: PPOPN 6
29543: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29544: LD_EXP 54
29548: PUSH
29549: LD_EXP 101
29553: AND
29554: IFFALSE 29633
29556: GO 29558
29558: DISABLE
29559: LD_INT 0
29561: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29562: LD_ADDR_VAR 0 1
29566: PUSH
29567: LD_INT 22
29569: PUSH
29570: LD_OWVAR 2
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 30
29581: PUSH
29582: LD_INT 3
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PPUSH
29593: CALL_OW 69
29597: ST_TO_ADDR
// if not tmp then
29598: LD_VAR 0 1
29602: NOT
29603: IFFALSE 29607
// exit ;
29605: GO 29633
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29607: LD_VAR 0 1
29611: PUSH
29612: LD_INT 1
29614: PPUSH
29615: LD_VAR 0 1
29619: PPUSH
29620: CALL_OW 12
29624: ARRAY
29625: PPUSH
29626: LD_INT 1
29628: PPUSH
29629: CALL_OW 234
// end ;
29633: PPOPN 1
29635: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29636: LD_EXP 54
29640: PUSH
29641: LD_EXP 102
29645: AND
29646: IFFALSE 29758
29648: GO 29650
29650: DISABLE
29651: LD_INT 0
29653: PPUSH
29654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29655: LD_ADDR_VAR 0 2
29659: PUSH
29660: LD_INT 22
29662: PUSH
29663: LD_OWVAR 2
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PUSH
29672: LD_INT 2
29674: PUSH
29675: LD_INT 30
29677: PUSH
29678: LD_INT 27
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 30
29687: PUSH
29688: LD_INT 26
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 30
29697: PUSH
29698: LD_INT 28
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PPUSH
29715: CALL_OW 69
29719: ST_TO_ADDR
// if not tmp then
29720: LD_VAR 0 2
29724: NOT
29725: IFFALSE 29729
// exit ;
29727: GO 29758
// for i in tmp do
29729: LD_ADDR_VAR 0 1
29733: PUSH
29734: LD_VAR 0 2
29738: PUSH
29739: FOR_IN
29740: IFFALSE 29756
// SetLives ( i , 1 ) ;
29742: LD_VAR 0 1
29746: PPUSH
29747: LD_INT 1
29749: PPUSH
29750: CALL_OW 234
29754: GO 29739
29756: POP
29757: POP
// end ;
29758: PPOPN 2
29760: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29761: LD_EXP 54
29765: PUSH
29766: LD_EXP 103
29770: AND
29771: IFFALSE 30058
29773: GO 29775
29775: DISABLE
29776: LD_INT 0
29778: PPUSH
29779: PPUSH
29780: PPUSH
// begin i := rand ( 1 , 7 ) ;
29781: LD_ADDR_VAR 0 1
29785: PUSH
29786: LD_INT 1
29788: PPUSH
29789: LD_INT 7
29791: PPUSH
29792: CALL_OW 12
29796: ST_TO_ADDR
// case i of 1 :
29797: LD_VAR 0 1
29801: PUSH
29802: LD_INT 1
29804: DOUBLE
29805: EQUAL
29806: IFTRUE 29810
29808: GO 29820
29810: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29811: LD_STRING earthquake(getX(game), 0, 32)
29813: PPUSH
29814: CALL_OW 559
29818: GO 30058
29820: LD_INT 2
29822: DOUBLE
29823: EQUAL
29824: IFTRUE 29828
29826: GO 29842
29828: POP
// begin ToLua ( displayStucuk(); ) ;
29829: LD_STRING displayStucuk();
29831: PPUSH
29832: CALL_OW 559
// ResetFog ;
29836: CALL_OW 335
// end ; 3 :
29840: GO 30058
29842: LD_INT 3
29844: DOUBLE
29845: EQUAL
29846: IFTRUE 29850
29848: GO 29954
29850: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29851: LD_ADDR_VAR 0 2
29855: PUSH
29856: LD_INT 22
29858: PUSH
29859: LD_OWVAR 2
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 25
29870: PUSH
29871: LD_INT 1
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PPUSH
29882: CALL_OW 69
29886: ST_TO_ADDR
// if not tmp then
29887: LD_VAR 0 2
29891: NOT
29892: IFFALSE 29896
// exit ;
29894: GO 30058
// un := tmp [ rand ( 1 , tmp ) ] ;
29896: LD_ADDR_VAR 0 3
29900: PUSH
29901: LD_VAR 0 2
29905: PUSH
29906: LD_INT 1
29908: PPUSH
29909: LD_VAR 0 2
29913: PPUSH
29914: CALL_OW 12
29918: ARRAY
29919: ST_TO_ADDR
// if Crawls ( un ) then
29920: LD_VAR 0 3
29924: PPUSH
29925: CALL_OW 318
29929: IFFALSE 29940
// ComWalk ( un ) ;
29931: LD_VAR 0 3
29935: PPUSH
29936: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29940: LD_VAR 0 3
29944: PPUSH
29945: LD_INT 8
29947: PPUSH
29948: CALL_OW 336
// end ; 4 :
29952: GO 30058
29954: LD_INT 4
29956: DOUBLE
29957: EQUAL
29958: IFTRUE 29962
29960: GO 30036
29962: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29963: LD_ADDR_VAR 0 2
29967: PUSH
29968: LD_INT 22
29970: PUSH
29971: LD_OWVAR 2
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 30
29982: PUSH
29983: LD_INT 29
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PPUSH
29994: CALL_OW 69
29998: ST_TO_ADDR
// if not tmp then
29999: LD_VAR 0 2
30003: NOT
30004: IFFALSE 30008
// exit ;
30006: GO 30058
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30008: LD_VAR 0 2
30012: PUSH
30013: LD_INT 1
30015: ARRAY
30016: PPUSH
30017: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30021: LD_VAR 0 2
30025: PUSH
30026: LD_INT 1
30028: ARRAY
30029: PPUSH
30030: CALL_OW 65
// end ; 5 .. 7 :
30034: GO 30058
30036: LD_INT 5
30038: DOUBLE
30039: GREATEREQUAL
30040: IFFALSE 30048
30042: LD_INT 7
30044: DOUBLE
30045: LESSEQUAL
30046: IFTRUE 30050
30048: GO 30057
30050: POP
// StreamSibBomb ; end ;
30051: CALL 26295 0 0
30055: GO 30058
30057: POP
// end ;
30058: PPOPN 3
30060: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30061: LD_EXP 54
30065: PUSH
30066: LD_EXP 104
30070: AND
30071: IFFALSE 30227
30073: GO 30075
30075: DISABLE
30076: LD_INT 0
30078: PPUSH
30079: PPUSH
30080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30081: LD_ADDR_VAR 0 2
30085: PUSH
30086: LD_INT 81
30088: PUSH
30089: LD_OWVAR 2
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 2
30100: PUSH
30101: LD_INT 21
30103: PUSH
30104: LD_INT 1
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 21
30113: PUSH
30114: LD_INT 2
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: LIST
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PPUSH
30130: CALL_OW 69
30134: ST_TO_ADDR
// if not tmp then
30135: LD_VAR 0 2
30139: NOT
30140: IFFALSE 30144
// exit ;
30142: GO 30227
// p := 0 ;
30144: LD_ADDR_VAR 0 3
30148: PUSH
30149: LD_INT 0
30151: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30152: LD_INT 35
30154: PPUSH
30155: CALL_OW 67
// p := p + 1 ;
30159: LD_ADDR_VAR 0 3
30163: PUSH
30164: LD_VAR 0 3
30168: PUSH
30169: LD_INT 1
30171: PLUS
30172: ST_TO_ADDR
// for i in tmp do
30173: LD_ADDR_VAR 0 1
30177: PUSH
30178: LD_VAR 0 2
30182: PUSH
30183: FOR_IN
30184: IFFALSE 30215
// if GetLives ( i ) < 1000 then
30186: LD_VAR 0 1
30190: PPUSH
30191: CALL_OW 256
30195: PUSH
30196: LD_INT 1000
30198: LESS
30199: IFFALSE 30213
// SetLives ( i , 1000 ) ;
30201: LD_VAR 0 1
30205: PPUSH
30206: LD_INT 1000
30208: PPUSH
30209: CALL_OW 234
30213: GO 30183
30215: POP
30216: POP
// until p > 20 ;
30217: LD_VAR 0 3
30221: PUSH
30222: LD_INT 20
30224: GREATER
30225: IFFALSE 30152
// end ;
30227: PPOPN 3
30229: END
// every 0 0$1 trigger StreamModeActive and sTime do
30230: LD_EXP 54
30234: PUSH
30235: LD_EXP 105
30239: AND
30240: IFFALSE 30275
30242: GO 30244
30244: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30245: LD_INT 28
30247: PPUSH
30248: LD_OWVAR 2
30252: PPUSH
30253: LD_INT 2
30255: PPUSH
30256: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30260: LD_INT 30
30262: PPUSH
30263: LD_OWVAR 2
30267: PPUSH
30268: LD_INT 2
30270: PPUSH
30271: CALL_OW 322
// end ;
30275: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30276: LD_EXP 54
30280: PUSH
30281: LD_EXP 106
30285: AND
30286: IFFALSE 30407
30288: GO 30290
30290: DISABLE
30291: LD_INT 0
30293: PPUSH
30294: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30295: LD_ADDR_VAR 0 2
30299: PUSH
30300: LD_INT 22
30302: PUSH
30303: LD_OWVAR 2
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 21
30314: PUSH
30315: LD_INT 1
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 3
30324: PUSH
30325: LD_INT 23
30327: PUSH
30328: LD_INT 0
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: LIST
30343: PPUSH
30344: CALL_OW 69
30348: ST_TO_ADDR
// if not tmp then
30349: LD_VAR 0 2
30353: NOT
30354: IFFALSE 30358
// exit ;
30356: GO 30407
// for i in tmp do
30358: LD_ADDR_VAR 0 1
30362: PUSH
30363: LD_VAR 0 2
30367: PUSH
30368: FOR_IN
30369: IFFALSE 30405
// begin if Crawls ( i ) then
30371: LD_VAR 0 1
30375: PPUSH
30376: CALL_OW 318
30380: IFFALSE 30391
// ComWalk ( i ) ;
30382: LD_VAR 0 1
30386: PPUSH
30387: CALL_OW 138
// SetClass ( i , 2 ) ;
30391: LD_VAR 0 1
30395: PPUSH
30396: LD_INT 2
30398: PPUSH
30399: CALL_OW 336
// end ;
30403: GO 30368
30405: POP
30406: POP
// end ;
30407: PPOPN 2
30409: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30410: LD_EXP 54
30414: PUSH
30415: LD_EXP 107
30419: AND
30420: IFFALSE 30708
30422: GO 30424
30424: DISABLE
30425: LD_INT 0
30427: PPUSH
30428: PPUSH
30429: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30430: LD_OWVAR 2
30434: PPUSH
30435: LD_INT 9
30437: PPUSH
30438: LD_INT 1
30440: PPUSH
30441: LD_INT 1
30443: PPUSH
30444: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30448: LD_INT 9
30450: PPUSH
30451: LD_OWVAR 2
30455: PPUSH
30456: CALL_OW 343
// uc_side := 9 ;
30460: LD_ADDR_OWVAR 20
30464: PUSH
30465: LD_INT 9
30467: ST_TO_ADDR
// uc_nation := 2 ;
30468: LD_ADDR_OWVAR 21
30472: PUSH
30473: LD_INT 2
30475: ST_TO_ADDR
// hc_name := Dark Warrior ;
30476: LD_ADDR_OWVAR 26
30480: PUSH
30481: LD_STRING Dark Warrior
30483: ST_TO_ADDR
// hc_gallery :=  ;
30484: LD_ADDR_OWVAR 33
30488: PUSH
30489: LD_STRING 
30491: ST_TO_ADDR
// hc_noskilllimit := true ;
30492: LD_ADDR_OWVAR 76
30496: PUSH
30497: LD_INT 1
30499: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30500: LD_ADDR_OWVAR 31
30504: PUSH
30505: LD_INT 30
30507: PUSH
30508: LD_INT 30
30510: PUSH
30511: LD_INT 30
30513: PUSH
30514: LD_INT 30
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: ST_TO_ADDR
// un := CreateHuman ;
30523: LD_ADDR_VAR 0 3
30527: PUSH
30528: CALL_OW 44
30532: ST_TO_ADDR
// hc_noskilllimit := false ;
30533: LD_ADDR_OWVAR 76
30537: PUSH
30538: LD_INT 0
30540: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30541: LD_VAR 0 3
30545: PPUSH
30546: LD_INT 1
30548: PPUSH
30549: CALL_OW 51
// ToLua ( playRanger() ) ;
30553: LD_STRING playRanger()
30555: PPUSH
30556: CALL_OW 559
// p := 0 ;
30560: LD_ADDR_VAR 0 2
30564: PUSH
30565: LD_INT 0
30567: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30568: LD_INT 35
30570: PPUSH
30571: CALL_OW 67
// p := p + 1 ;
30575: LD_ADDR_VAR 0 2
30579: PUSH
30580: LD_VAR 0 2
30584: PUSH
30585: LD_INT 1
30587: PLUS
30588: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30589: LD_VAR 0 3
30593: PPUSH
30594: CALL_OW 256
30598: PUSH
30599: LD_INT 1000
30601: LESS
30602: IFFALSE 30616
// SetLives ( un , 1000 ) ;
30604: LD_VAR 0 3
30608: PPUSH
30609: LD_INT 1000
30611: PPUSH
30612: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30616: LD_VAR 0 3
30620: PPUSH
30621: LD_INT 81
30623: PUSH
30624: LD_OWVAR 2
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 91
30635: PUSH
30636: LD_VAR 0 3
30640: PUSH
30641: LD_INT 30
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: LIST
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PPUSH
30653: CALL_OW 69
30657: PPUSH
30658: LD_VAR 0 3
30662: PPUSH
30663: CALL_OW 74
30667: PPUSH
30668: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30672: LD_VAR 0 2
30676: PUSH
30677: LD_INT 80
30679: GREATER
30680: PUSH
30681: LD_VAR 0 3
30685: PPUSH
30686: CALL_OW 301
30690: OR
30691: IFFALSE 30568
// if un then
30693: LD_VAR 0 3
30697: IFFALSE 30708
// RemoveUnit ( un ) ;
30699: LD_VAR 0 3
30703: PPUSH
30704: CALL_OW 64
// end ;
30708: PPOPN 3
30710: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30711: LD_EXP 108
30715: IFFALSE 30831
30717: GO 30719
30719: DISABLE
30720: LD_INT 0
30722: PPUSH
30723: PPUSH
30724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30725: LD_ADDR_VAR 0 2
30729: PUSH
30730: LD_INT 81
30732: PUSH
30733: LD_OWVAR 2
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 21
30744: PUSH
30745: LD_INT 1
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PPUSH
30756: CALL_OW 69
30760: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30761: LD_STRING playComputer()
30763: PPUSH
30764: CALL_OW 559
// if not tmp then
30768: LD_VAR 0 2
30772: NOT
30773: IFFALSE 30777
// exit ;
30775: GO 30831
// for i in tmp do
30777: LD_ADDR_VAR 0 1
30781: PUSH
30782: LD_VAR 0 2
30786: PUSH
30787: FOR_IN
30788: IFFALSE 30829
// for j := 1 to 4 do
30790: LD_ADDR_VAR 0 3
30794: PUSH
30795: DOUBLE
30796: LD_INT 1
30798: DEC
30799: ST_TO_ADDR
30800: LD_INT 4
30802: PUSH
30803: FOR_TO
30804: IFFALSE 30825
// SetSkill ( i , j , 10 ) ;
30806: LD_VAR 0 1
30810: PPUSH
30811: LD_VAR 0 3
30815: PPUSH
30816: LD_INT 10
30818: PPUSH
30819: CALL_OW 237
30823: GO 30803
30825: POP
30826: POP
30827: GO 30787
30829: POP
30830: POP
// end ;
30831: PPOPN 3
30833: END
// every 0 0$1 trigger s30 do var i , tmp ;
30834: LD_EXP 109
30838: IFFALSE 30907
30840: GO 30842
30842: DISABLE
30843: LD_INT 0
30845: PPUSH
30846: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30847: LD_ADDR_VAR 0 2
30851: PUSH
30852: LD_INT 22
30854: PUSH
30855: LD_OWVAR 2
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PPUSH
30864: CALL_OW 69
30868: ST_TO_ADDR
// if not tmp then
30869: LD_VAR 0 2
30873: NOT
30874: IFFALSE 30878
// exit ;
30876: GO 30907
// for i in tmp do
30878: LD_ADDR_VAR 0 1
30882: PUSH
30883: LD_VAR 0 2
30887: PUSH
30888: FOR_IN
30889: IFFALSE 30905
// SetLives ( i , 300 ) ;
30891: LD_VAR 0 1
30895: PPUSH
30896: LD_INT 300
30898: PPUSH
30899: CALL_OW 234
30903: GO 30888
30905: POP
30906: POP
// end ;
30907: PPOPN 2
30909: END
// every 0 0$1 trigger s60 do var i , tmp ;
30910: LD_EXP 110
30914: IFFALSE 30983
30916: GO 30918
30918: DISABLE
30919: LD_INT 0
30921: PPUSH
30922: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30923: LD_ADDR_VAR 0 2
30927: PUSH
30928: LD_INT 22
30930: PUSH
30931: LD_OWVAR 2
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PPUSH
30940: CALL_OW 69
30944: ST_TO_ADDR
// if not tmp then
30945: LD_VAR 0 2
30949: NOT
30950: IFFALSE 30954
// exit ;
30952: GO 30983
// for i in tmp do
30954: LD_ADDR_VAR 0 1
30958: PUSH
30959: LD_VAR 0 2
30963: PUSH
30964: FOR_IN
30965: IFFALSE 30981
// SetLives ( i , 600 ) ;
30967: LD_VAR 0 1
30971: PPUSH
30972: LD_INT 600
30974: PPUSH
30975: CALL_OW 234
30979: GO 30964
30981: POP
30982: POP
// end ;
30983: PPOPN 2
30985: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30986: LD_INT 0
30988: PPUSH
// case cmd of 301 :
30989: LD_VAR 0 1
30993: PUSH
30994: LD_INT 301
30996: DOUBLE
30997: EQUAL
30998: IFTRUE 31002
31000: GO 31034
31002: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31003: LD_VAR 0 6
31007: PPUSH
31008: LD_VAR 0 7
31012: PPUSH
31013: LD_VAR 0 8
31017: PPUSH
31018: LD_VAR 0 4
31022: PPUSH
31023: LD_VAR 0 5
31027: PPUSH
31028: CALL 32235 0 5
31032: GO 31155
31034: LD_INT 302
31036: DOUBLE
31037: EQUAL
31038: IFTRUE 31042
31040: GO 31079
31042: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31043: LD_VAR 0 6
31047: PPUSH
31048: LD_VAR 0 7
31052: PPUSH
31053: LD_VAR 0 8
31057: PPUSH
31058: LD_VAR 0 9
31062: PPUSH
31063: LD_VAR 0 4
31067: PPUSH
31068: LD_VAR 0 5
31072: PPUSH
31073: CALL 32326 0 6
31077: GO 31155
31079: LD_INT 303
31081: DOUBLE
31082: EQUAL
31083: IFTRUE 31087
31085: GO 31124
31087: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31088: LD_VAR 0 6
31092: PPUSH
31093: LD_VAR 0 7
31097: PPUSH
31098: LD_VAR 0 8
31102: PPUSH
31103: LD_VAR 0 9
31107: PPUSH
31108: LD_VAR 0 4
31112: PPUSH
31113: LD_VAR 0 5
31117: PPUSH
31118: CALL 31160 0 6
31122: GO 31155
31124: LD_INT 304
31126: DOUBLE
31127: EQUAL
31128: IFTRUE 31132
31130: GO 31154
31132: POP
// hHackTeleport ( unit , x , y ) ; end ;
31133: LD_VAR 0 2
31137: PPUSH
31138: LD_VAR 0 4
31142: PPUSH
31143: LD_VAR 0 5
31147: PPUSH
31148: CALL 32919 0 3
31152: GO 31155
31154: POP
// end ;
31155: LD_VAR 0 12
31159: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31160: LD_INT 0
31162: PPUSH
31163: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31164: LD_VAR 0 1
31168: PUSH
31169: LD_INT 1
31171: LESS
31172: PUSH
31173: LD_VAR 0 1
31177: PUSH
31178: LD_INT 3
31180: GREATER
31181: OR
31182: PUSH
31183: LD_VAR 0 5
31187: PPUSH
31188: LD_VAR 0 6
31192: PPUSH
31193: CALL_OW 428
31197: OR
31198: IFFALSE 31202
// exit ;
31200: GO 31922
// uc_side := your_side ;
31202: LD_ADDR_OWVAR 20
31206: PUSH
31207: LD_OWVAR 2
31211: ST_TO_ADDR
// uc_nation := nation ;
31212: LD_ADDR_OWVAR 21
31216: PUSH
31217: LD_VAR 0 1
31221: ST_TO_ADDR
// bc_level = 1 ;
31222: LD_ADDR_OWVAR 43
31226: PUSH
31227: LD_INT 1
31229: ST_TO_ADDR
// case btype of 1 :
31230: LD_VAR 0 2
31234: PUSH
31235: LD_INT 1
31237: DOUBLE
31238: EQUAL
31239: IFTRUE 31243
31241: GO 31254
31243: POP
// bc_type := b_depot ; 2 :
31244: LD_ADDR_OWVAR 42
31248: PUSH
31249: LD_INT 0
31251: ST_TO_ADDR
31252: GO 31866
31254: LD_INT 2
31256: DOUBLE
31257: EQUAL
31258: IFTRUE 31262
31260: GO 31273
31262: POP
// bc_type := b_warehouse ; 3 :
31263: LD_ADDR_OWVAR 42
31267: PUSH
31268: LD_INT 1
31270: ST_TO_ADDR
31271: GO 31866
31273: LD_INT 3
31275: DOUBLE
31276: EQUAL
31277: IFTRUE 31281
31279: GO 31292
31281: POP
// bc_type := b_lab ; 4 .. 9 :
31282: LD_ADDR_OWVAR 42
31286: PUSH
31287: LD_INT 6
31289: ST_TO_ADDR
31290: GO 31866
31292: LD_INT 4
31294: DOUBLE
31295: GREATEREQUAL
31296: IFFALSE 31304
31298: LD_INT 9
31300: DOUBLE
31301: LESSEQUAL
31302: IFTRUE 31306
31304: GO 31358
31306: POP
// begin bc_type := b_lab_half ;
31307: LD_ADDR_OWVAR 42
31311: PUSH
31312: LD_INT 7
31314: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31315: LD_ADDR_OWVAR 44
31319: PUSH
31320: LD_INT 10
31322: PUSH
31323: LD_INT 11
31325: PUSH
31326: LD_INT 12
31328: PUSH
31329: LD_INT 15
31331: PUSH
31332: LD_INT 14
31334: PUSH
31335: LD_INT 13
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: PUSH
31346: LD_VAR 0 2
31350: PUSH
31351: LD_INT 3
31353: MINUS
31354: ARRAY
31355: ST_TO_ADDR
// end ; 10 .. 13 :
31356: GO 31866
31358: LD_INT 10
31360: DOUBLE
31361: GREATEREQUAL
31362: IFFALSE 31370
31364: LD_INT 13
31366: DOUBLE
31367: LESSEQUAL
31368: IFTRUE 31372
31370: GO 31449
31372: POP
// begin bc_type := b_lab_full ;
31373: LD_ADDR_OWVAR 42
31377: PUSH
31378: LD_INT 8
31380: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31381: LD_ADDR_OWVAR 44
31385: PUSH
31386: LD_INT 10
31388: PUSH
31389: LD_INT 12
31391: PUSH
31392: LD_INT 14
31394: PUSH
31395: LD_INT 13
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: PUSH
31404: LD_VAR 0 2
31408: PUSH
31409: LD_INT 9
31411: MINUS
31412: ARRAY
31413: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31414: LD_ADDR_OWVAR 45
31418: PUSH
31419: LD_INT 11
31421: PUSH
31422: LD_INT 15
31424: PUSH
31425: LD_INT 12
31427: PUSH
31428: LD_INT 15
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: PUSH
31437: LD_VAR 0 2
31441: PUSH
31442: LD_INT 9
31444: MINUS
31445: ARRAY
31446: ST_TO_ADDR
// end ; 14 :
31447: GO 31866
31449: LD_INT 14
31451: DOUBLE
31452: EQUAL
31453: IFTRUE 31457
31455: GO 31468
31457: POP
// bc_type := b_workshop ; 15 :
31458: LD_ADDR_OWVAR 42
31462: PUSH
31463: LD_INT 2
31465: ST_TO_ADDR
31466: GO 31866
31468: LD_INT 15
31470: DOUBLE
31471: EQUAL
31472: IFTRUE 31476
31474: GO 31487
31476: POP
// bc_type := b_factory ; 16 :
31477: LD_ADDR_OWVAR 42
31481: PUSH
31482: LD_INT 3
31484: ST_TO_ADDR
31485: GO 31866
31487: LD_INT 16
31489: DOUBLE
31490: EQUAL
31491: IFTRUE 31495
31493: GO 31506
31495: POP
// bc_type := b_ext_gun ; 17 :
31496: LD_ADDR_OWVAR 42
31500: PUSH
31501: LD_INT 17
31503: ST_TO_ADDR
31504: GO 31866
31506: LD_INT 17
31508: DOUBLE
31509: EQUAL
31510: IFTRUE 31514
31512: GO 31542
31514: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31515: LD_ADDR_OWVAR 42
31519: PUSH
31520: LD_INT 19
31522: PUSH
31523: LD_INT 23
31525: PUSH
31526: LD_INT 19
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: LIST
31533: PUSH
31534: LD_VAR 0 1
31538: ARRAY
31539: ST_TO_ADDR
31540: GO 31866
31542: LD_INT 18
31544: DOUBLE
31545: EQUAL
31546: IFTRUE 31550
31548: GO 31561
31550: POP
// bc_type := b_ext_radar ; 19 :
31551: LD_ADDR_OWVAR 42
31555: PUSH
31556: LD_INT 20
31558: ST_TO_ADDR
31559: GO 31866
31561: LD_INT 19
31563: DOUBLE
31564: EQUAL
31565: IFTRUE 31569
31567: GO 31580
31569: POP
// bc_type := b_ext_radio ; 20 :
31570: LD_ADDR_OWVAR 42
31574: PUSH
31575: LD_INT 22
31577: ST_TO_ADDR
31578: GO 31866
31580: LD_INT 20
31582: DOUBLE
31583: EQUAL
31584: IFTRUE 31588
31586: GO 31599
31588: POP
// bc_type := b_ext_siberium ; 21 :
31589: LD_ADDR_OWVAR 42
31593: PUSH
31594: LD_INT 21
31596: ST_TO_ADDR
31597: GO 31866
31599: LD_INT 21
31601: DOUBLE
31602: EQUAL
31603: IFTRUE 31607
31605: GO 31618
31607: POP
// bc_type := b_ext_computer ; 22 :
31608: LD_ADDR_OWVAR 42
31612: PUSH
31613: LD_INT 24
31615: ST_TO_ADDR
31616: GO 31866
31618: LD_INT 22
31620: DOUBLE
31621: EQUAL
31622: IFTRUE 31626
31624: GO 31637
31626: POP
// bc_type := b_ext_track ; 23 :
31627: LD_ADDR_OWVAR 42
31631: PUSH
31632: LD_INT 16
31634: ST_TO_ADDR
31635: GO 31866
31637: LD_INT 23
31639: DOUBLE
31640: EQUAL
31641: IFTRUE 31645
31643: GO 31656
31645: POP
// bc_type := b_ext_laser ; 24 :
31646: LD_ADDR_OWVAR 42
31650: PUSH
31651: LD_INT 25
31653: ST_TO_ADDR
31654: GO 31866
31656: LD_INT 24
31658: DOUBLE
31659: EQUAL
31660: IFTRUE 31664
31662: GO 31675
31664: POP
// bc_type := b_control_tower ; 25 :
31665: LD_ADDR_OWVAR 42
31669: PUSH
31670: LD_INT 36
31672: ST_TO_ADDR
31673: GO 31866
31675: LD_INT 25
31677: DOUBLE
31678: EQUAL
31679: IFTRUE 31683
31681: GO 31694
31683: POP
// bc_type := b_breastwork ; 26 :
31684: LD_ADDR_OWVAR 42
31688: PUSH
31689: LD_INT 31
31691: ST_TO_ADDR
31692: GO 31866
31694: LD_INT 26
31696: DOUBLE
31697: EQUAL
31698: IFTRUE 31702
31700: GO 31713
31702: POP
// bc_type := b_bunker ; 27 :
31703: LD_ADDR_OWVAR 42
31707: PUSH
31708: LD_INT 32
31710: ST_TO_ADDR
31711: GO 31866
31713: LD_INT 27
31715: DOUBLE
31716: EQUAL
31717: IFTRUE 31721
31719: GO 31732
31721: POP
// bc_type := b_turret ; 28 :
31722: LD_ADDR_OWVAR 42
31726: PUSH
31727: LD_INT 33
31729: ST_TO_ADDR
31730: GO 31866
31732: LD_INT 28
31734: DOUBLE
31735: EQUAL
31736: IFTRUE 31740
31738: GO 31751
31740: POP
// bc_type := b_armoury ; 29 :
31741: LD_ADDR_OWVAR 42
31745: PUSH
31746: LD_INT 4
31748: ST_TO_ADDR
31749: GO 31866
31751: LD_INT 29
31753: DOUBLE
31754: EQUAL
31755: IFTRUE 31759
31757: GO 31770
31759: POP
// bc_type := b_barracks ; 30 :
31760: LD_ADDR_OWVAR 42
31764: PUSH
31765: LD_INT 5
31767: ST_TO_ADDR
31768: GO 31866
31770: LD_INT 30
31772: DOUBLE
31773: EQUAL
31774: IFTRUE 31778
31776: GO 31789
31778: POP
// bc_type := b_solar_power ; 31 :
31779: LD_ADDR_OWVAR 42
31783: PUSH
31784: LD_INT 27
31786: ST_TO_ADDR
31787: GO 31866
31789: LD_INT 31
31791: DOUBLE
31792: EQUAL
31793: IFTRUE 31797
31795: GO 31808
31797: POP
// bc_type := b_oil_power ; 32 :
31798: LD_ADDR_OWVAR 42
31802: PUSH
31803: LD_INT 26
31805: ST_TO_ADDR
31806: GO 31866
31808: LD_INT 32
31810: DOUBLE
31811: EQUAL
31812: IFTRUE 31816
31814: GO 31827
31816: POP
// bc_type := b_siberite_power ; 33 :
31817: LD_ADDR_OWVAR 42
31821: PUSH
31822: LD_INT 28
31824: ST_TO_ADDR
31825: GO 31866
31827: LD_INT 33
31829: DOUBLE
31830: EQUAL
31831: IFTRUE 31835
31833: GO 31846
31835: POP
// bc_type := b_oil_mine ; 34 :
31836: LD_ADDR_OWVAR 42
31840: PUSH
31841: LD_INT 29
31843: ST_TO_ADDR
31844: GO 31866
31846: LD_INT 34
31848: DOUBLE
31849: EQUAL
31850: IFTRUE 31854
31852: GO 31865
31854: POP
// bc_type := b_siberite_mine ; end ;
31855: LD_ADDR_OWVAR 42
31859: PUSH
31860: LD_INT 30
31862: ST_TO_ADDR
31863: GO 31866
31865: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31866: LD_ADDR_VAR 0 8
31870: PUSH
31871: LD_VAR 0 5
31875: PPUSH
31876: LD_VAR 0 6
31880: PPUSH
31881: LD_VAR 0 3
31885: PPUSH
31886: CALL_OW 47
31890: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31891: LD_OWVAR 42
31895: PUSH
31896: LD_INT 32
31898: PUSH
31899: LD_INT 33
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: IN
31906: IFFALSE 31922
// PlaceWeaponTurret ( b , weapon ) ;
31908: LD_VAR 0 8
31912: PPUSH
31913: LD_VAR 0 4
31917: PPUSH
31918: CALL_OW 431
// end ;
31922: LD_VAR 0 7
31926: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31927: LD_INT 0
31929: PPUSH
31930: PPUSH
31931: PPUSH
31932: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31933: LD_ADDR_VAR 0 4
31937: PUSH
31938: LD_INT 22
31940: PUSH
31941: LD_OWVAR 2
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 2
31952: PUSH
31953: LD_INT 30
31955: PUSH
31956: LD_INT 0
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 30
31965: PUSH
31966: LD_INT 1
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: LIST
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PPUSH
31982: CALL_OW 69
31986: ST_TO_ADDR
// if not tmp then
31987: LD_VAR 0 4
31991: NOT
31992: IFFALSE 31996
// exit ;
31994: GO 32055
// for i in tmp do
31996: LD_ADDR_VAR 0 2
32000: PUSH
32001: LD_VAR 0 4
32005: PUSH
32006: FOR_IN
32007: IFFALSE 32053
// for j = 1 to 3 do
32009: LD_ADDR_VAR 0 3
32013: PUSH
32014: DOUBLE
32015: LD_INT 1
32017: DEC
32018: ST_TO_ADDR
32019: LD_INT 3
32021: PUSH
32022: FOR_TO
32023: IFFALSE 32049
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32025: LD_VAR 0 2
32029: PPUSH
32030: CALL_OW 274
32034: PPUSH
32035: LD_VAR 0 3
32039: PPUSH
32040: LD_INT 99999
32042: PPUSH
32043: CALL_OW 277
32047: GO 32022
32049: POP
32050: POP
32051: GO 32006
32053: POP
32054: POP
// end ;
32055: LD_VAR 0 1
32059: RET
// export function hHackSetLevel10 ; var i , j ; begin
32060: LD_INT 0
32062: PPUSH
32063: PPUSH
32064: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32065: LD_ADDR_VAR 0 2
32069: PUSH
32070: LD_INT 21
32072: PUSH
32073: LD_INT 1
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PPUSH
32080: CALL_OW 69
32084: PUSH
32085: FOR_IN
32086: IFFALSE 32138
// if IsSelected ( i ) then
32088: LD_VAR 0 2
32092: PPUSH
32093: CALL_OW 306
32097: IFFALSE 32136
// begin for j := 1 to 4 do
32099: LD_ADDR_VAR 0 3
32103: PUSH
32104: DOUBLE
32105: LD_INT 1
32107: DEC
32108: ST_TO_ADDR
32109: LD_INT 4
32111: PUSH
32112: FOR_TO
32113: IFFALSE 32134
// SetSkill ( i , j , 10 ) ;
32115: LD_VAR 0 2
32119: PPUSH
32120: LD_VAR 0 3
32124: PPUSH
32125: LD_INT 10
32127: PPUSH
32128: CALL_OW 237
32132: GO 32112
32134: POP
32135: POP
// end ;
32136: GO 32085
32138: POP
32139: POP
// end ;
32140: LD_VAR 0 1
32144: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32145: LD_INT 0
32147: PPUSH
32148: PPUSH
32149: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32150: LD_ADDR_VAR 0 2
32154: PUSH
32155: LD_INT 22
32157: PUSH
32158: LD_OWVAR 2
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 21
32169: PUSH
32170: LD_INT 1
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PPUSH
32181: CALL_OW 69
32185: PUSH
32186: FOR_IN
32187: IFFALSE 32228
// begin for j := 1 to 4 do
32189: LD_ADDR_VAR 0 3
32193: PUSH
32194: DOUBLE
32195: LD_INT 1
32197: DEC
32198: ST_TO_ADDR
32199: LD_INT 4
32201: PUSH
32202: FOR_TO
32203: IFFALSE 32224
// SetSkill ( i , j , 10 ) ;
32205: LD_VAR 0 2
32209: PPUSH
32210: LD_VAR 0 3
32214: PPUSH
32215: LD_INT 10
32217: PPUSH
32218: CALL_OW 237
32222: GO 32202
32224: POP
32225: POP
// end ;
32226: GO 32186
32228: POP
32229: POP
// end ;
32230: LD_VAR 0 1
32234: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32235: LD_INT 0
32237: PPUSH
// uc_side := your_side ;
32238: LD_ADDR_OWVAR 20
32242: PUSH
32243: LD_OWVAR 2
32247: ST_TO_ADDR
// uc_nation := nation ;
32248: LD_ADDR_OWVAR 21
32252: PUSH
32253: LD_VAR 0 1
32257: ST_TO_ADDR
// InitHc ;
32258: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32262: LD_INT 0
32264: PPUSH
32265: LD_VAR 0 2
32269: PPUSH
32270: LD_VAR 0 3
32274: PPUSH
32275: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32279: LD_VAR 0 4
32283: PPUSH
32284: LD_VAR 0 5
32288: PPUSH
32289: CALL_OW 428
32293: PUSH
32294: LD_INT 0
32296: EQUAL
32297: IFFALSE 32321
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32299: CALL_OW 44
32303: PPUSH
32304: LD_VAR 0 4
32308: PPUSH
32309: LD_VAR 0 5
32313: PPUSH
32314: LD_INT 1
32316: PPUSH
32317: CALL_OW 48
// end ;
32321: LD_VAR 0 6
32325: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32326: LD_INT 0
32328: PPUSH
32329: PPUSH
// uc_side := your_side ;
32330: LD_ADDR_OWVAR 20
32334: PUSH
32335: LD_OWVAR 2
32339: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32340: LD_VAR 0 1
32344: PUSH
32345: LD_INT 1
32347: PUSH
32348: LD_INT 2
32350: PUSH
32351: LD_INT 3
32353: PUSH
32354: LD_INT 4
32356: PUSH
32357: LD_INT 5
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: IN
32367: IFFALSE 32379
// uc_nation := nation_american else
32369: LD_ADDR_OWVAR 21
32373: PUSH
32374: LD_INT 1
32376: ST_TO_ADDR
32377: GO 32422
// if chassis in [ 11 , 12 , 13 , 14 ] then
32379: LD_VAR 0 1
32383: PUSH
32384: LD_INT 11
32386: PUSH
32387: LD_INT 12
32389: PUSH
32390: LD_INT 13
32392: PUSH
32393: LD_INT 14
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: IN
32402: IFFALSE 32414
// uc_nation := nation_arabian else
32404: LD_ADDR_OWVAR 21
32408: PUSH
32409: LD_INT 2
32411: ST_TO_ADDR
32412: GO 32422
// uc_nation := nation_russian ;
32414: LD_ADDR_OWVAR 21
32418: PUSH
32419: LD_INT 3
32421: ST_TO_ADDR
// vc_chassis := chassis ;
32422: LD_ADDR_OWVAR 37
32426: PUSH
32427: LD_VAR 0 1
32431: ST_TO_ADDR
// vc_engine := engine ;
32432: LD_ADDR_OWVAR 39
32436: PUSH
32437: LD_VAR 0 2
32441: ST_TO_ADDR
// vc_control := control ;
32442: LD_ADDR_OWVAR 38
32446: PUSH
32447: LD_VAR 0 3
32451: ST_TO_ADDR
// vc_weapon := weapon ;
32452: LD_ADDR_OWVAR 40
32456: PUSH
32457: LD_VAR 0 4
32461: ST_TO_ADDR
// un := CreateVehicle ;
32462: LD_ADDR_VAR 0 8
32466: PUSH
32467: CALL_OW 45
32471: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32472: LD_VAR 0 8
32476: PPUSH
32477: LD_INT 0
32479: PPUSH
32480: LD_INT 5
32482: PPUSH
32483: CALL_OW 12
32487: PPUSH
32488: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32492: LD_VAR 0 8
32496: PPUSH
32497: LD_VAR 0 5
32501: PPUSH
32502: LD_VAR 0 6
32506: PPUSH
32507: LD_INT 1
32509: PPUSH
32510: CALL_OW 48
// end ;
32514: LD_VAR 0 7
32518: RET
// export hInvincible ; every 1 do
32519: GO 32521
32521: DISABLE
// hInvincible := [ ] ;
32522: LD_ADDR_EXP 111
32526: PUSH
32527: EMPTY
32528: ST_TO_ADDR
32529: END
// every 10 do var i ;
32530: GO 32532
32532: DISABLE
32533: LD_INT 0
32535: PPUSH
// begin enable ;
32536: ENABLE
// if not hInvincible then
32537: LD_EXP 111
32541: NOT
32542: IFFALSE 32546
// exit ;
32544: GO 32590
// for i in hInvincible do
32546: LD_ADDR_VAR 0 1
32550: PUSH
32551: LD_EXP 111
32555: PUSH
32556: FOR_IN
32557: IFFALSE 32588
// if GetLives ( i ) < 1000 then
32559: LD_VAR 0 1
32563: PPUSH
32564: CALL_OW 256
32568: PUSH
32569: LD_INT 1000
32571: LESS
32572: IFFALSE 32586
// SetLives ( i , 1000 ) ;
32574: LD_VAR 0 1
32578: PPUSH
32579: LD_INT 1000
32581: PPUSH
32582: CALL_OW 234
32586: GO 32556
32588: POP
32589: POP
// end ;
32590: PPOPN 1
32592: END
// export function hHackInvincible ; var i ; begin
32593: LD_INT 0
32595: PPUSH
32596: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32597: LD_ADDR_VAR 0 2
32601: PUSH
32602: LD_INT 2
32604: PUSH
32605: LD_INT 21
32607: PUSH
32608: LD_INT 1
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 21
32617: PUSH
32618: LD_INT 2
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: LIST
32629: PPUSH
32630: CALL_OW 69
32634: PUSH
32635: FOR_IN
32636: IFFALSE 32697
// if IsSelected ( i ) then
32638: LD_VAR 0 2
32642: PPUSH
32643: CALL_OW 306
32647: IFFALSE 32695
// begin if i in hInvincible then
32649: LD_VAR 0 2
32653: PUSH
32654: LD_EXP 111
32658: IN
32659: IFFALSE 32679
// hInvincible := hInvincible diff i else
32661: LD_ADDR_EXP 111
32665: PUSH
32666: LD_EXP 111
32670: PUSH
32671: LD_VAR 0 2
32675: DIFF
32676: ST_TO_ADDR
32677: GO 32695
// hInvincible := hInvincible union i ;
32679: LD_ADDR_EXP 111
32683: PUSH
32684: LD_EXP 111
32688: PUSH
32689: LD_VAR 0 2
32693: UNION
32694: ST_TO_ADDR
// end ;
32695: GO 32635
32697: POP
32698: POP
// end ;
32699: LD_VAR 0 1
32703: RET
// export function hHackInvisible ; var i , j ; begin
32704: LD_INT 0
32706: PPUSH
32707: PPUSH
32708: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32709: LD_ADDR_VAR 0 2
32713: PUSH
32714: LD_INT 21
32716: PUSH
32717: LD_INT 1
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PPUSH
32724: CALL_OW 69
32728: PUSH
32729: FOR_IN
32730: IFFALSE 32754
// if IsSelected ( i ) then
32732: LD_VAR 0 2
32736: PPUSH
32737: CALL_OW 306
32741: IFFALSE 32752
// ComForceInvisible ( i ) ;
32743: LD_VAR 0 2
32747: PPUSH
32748: CALL_OW 496
32752: GO 32729
32754: POP
32755: POP
// end ;
32756: LD_VAR 0 1
32760: RET
// export function hHackChangeYourSide ; begin
32761: LD_INT 0
32763: PPUSH
// if your_side = 8 then
32764: LD_OWVAR 2
32768: PUSH
32769: LD_INT 8
32771: EQUAL
32772: IFFALSE 32784
// your_side := 0 else
32774: LD_ADDR_OWVAR 2
32778: PUSH
32779: LD_INT 0
32781: ST_TO_ADDR
32782: GO 32798
// your_side := your_side + 1 ;
32784: LD_ADDR_OWVAR 2
32788: PUSH
32789: LD_OWVAR 2
32793: PUSH
32794: LD_INT 1
32796: PLUS
32797: ST_TO_ADDR
// end ;
32798: LD_VAR 0 1
32802: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32803: LD_INT 0
32805: PPUSH
32806: PPUSH
32807: PPUSH
// for i in all_units do
32808: LD_ADDR_VAR 0 2
32812: PUSH
32813: LD_OWVAR 3
32817: PUSH
32818: FOR_IN
32819: IFFALSE 32897
// if IsSelected ( i ) then
32821: LD_VAR 0 2
32825: PPUSH
32826: CALL_OW 306
32830: IFFALSE 32895
// begin j := GetSide ( i ) ;
32832: LD_ADDR_VAR 0 3
32836: PUSH
32837: LD_VAR 0 2
32841: PPUSH
32842: CALL_OW 255
32846: ST_TO_ADDR
// if j = 8 then
32847: LD_VAR 0 3
32851: PUSH
32852: LD_INT 8
32854: EQUAL
32855: IFFALSE 32867
// j := 0 else
32857: LD_ADDR_VAR 0 3
32861: PUSH
32862: LD_INT 0
32864: ST_TO_ADDR
32865: GO 32881
// j := j + 1 ;
32867: LD_ADDR_VAR 0 3
32871: PUSH
32872: LD_VAR 0 3
32876: PUSH
32877: LD_INT 1
32879: PLUS
32880: ST_TO_ADDR
// SetSide ( i , j ) ;
32881: LD_VAR 0 2
32885: PPUSH
32886: LD_VAR 0 3
32890: PPUSH
32891: CALL_OW 235
// end ;
32895: GO 32818
32897: POP
32898: POP
// end ;
32899: LD_VAR 0 1
32903: RET
// export function hHackFog ; begin
32904: LD_INT 0
32906: PPUSH
// FogOff ( true ) ;
32907: LD_INT 1
32909: PPUSH
32910: CALL_OW 344
// end ;
32914: LD_VAR 0 1
32918: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32919: LD_INT 0
32921: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32922: LD_VAR 0 1
32926: PPUSH
32927: LD_VAR 0 2
32931: PPUSH
32932: LD_VAR 0 3
32936: PPUSH
32937: LD_INT 1
32939: PPUSH
32940: LD_INT 1
32942: PPUSH
32943: CALL_OW 483
// CenterOnXY ( x , y ) ;
32947: LD_VAR 0 2
32951: PPUSH
32952: LD_VAR 0 3
32956: PPUSH
32957: CALL_OW 84
// end ;
32961: LD_VAR 0 4
32965: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
32966: LD_INT 0
32968: PPUSH
32969: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
32970: LD_VAR 0 1
32974: NOT
32975: PUSH
32976: LD_VAR 0 2
32980: PPUSH
32981: LD_VAR 0 3
32985: PPUSH
32986: CALL_OW 488
32990: NOT
32991: OR
32992: PUSH
32993: LD_VAR 0 1
32997: PPUSH
32998: CALL_OW 266
33002: PUSH
33003: LD_INT 3
33005: NONEQUAL
33006: PUSH
33007: LD_VAR 0 1
33011: PPUSH
33012: CALL_OW 247
33016: PUSH
33017: LD_INT 1
33019: EQUAL
33020: NOT
33021: AND
33022: OR
33023: IFFALSE 33027
// exit ;
33025: GO 33176
// if GetType ( factory ) = unit_human then
33027: LD_VAR 0 1
33031: PPUSH
33032: CALL_OW 247
33036: PUSH
33037: LD_INT 1
33039: EQUAL
33040: IFFALSE 33057
// factory := IsInUnit ( factory ) ;
33042: LD_ADDR_VAR 0 1
33046: PUSH
33047: LD_VAR 0 1
33051: PPUSH
33052: CALL_OW 310
33056: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33057: LD_VAR 0 1
33061: PPUSH
33062: CALL_OW 266
33066: PUSH
33067: LD_INT 3
33069: NONEQUAL
33070: IFFALSE 33074
// exit ;
33072: GO 33176
// if HexInfo ( x , y ) = factory then
33074: LD_VAR 0 2
33078: PPUSH
33079: LD_VAR 0 3
33083: PPUSH
33084: CALL_OW 428
33088: PUSH
33089: LD_VAR 0 1
33093: EQUAL
33094: IFFALSE 33121
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33096: LD_ADDR_EXP 112
33100: PUSH
33101: LD_EXP 112
33105: PPUSH
33106: LD_VAR 0 1
33110: PPUSH
33111: LD_INT 0
33113: PPUSH
33114: CALL_OW 1
33118: ST_TO_ADDR
33119: GO 33172
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33121: LD_ADDR_EXP 112
33125: PUSH
33126: LD_EXP 112
33130: PPUSH
33131: LD_VAR 0 1
33135: PPUSH
33136: LD_VAR 0 1
33140: PPUSH
33141: CALL_OW 255
33145: PUSH
33146: LD_VAR 0 1
33150: PUSH
33151: LD_VAR 0 2
33155: PUSH
33156: LD_VAR 0 3
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: PPUSH
33167: CALL_OW 1
33171: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33172: CALL 33181 0 0
// end ;
33176: LD_VAR 0 4
33180: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33181: LD_INT 0
33183: PPUSH
33184: PPUSH
33185: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33186: LD_STRING resetFactoryWaypoint();
33188: PPUSH
33189: CALL_OW 559
// if factoryWaypoints then
33193: LD_EXP 112
33197: IFFALSE 33323
// begin list := PrepareArray ( factoryWaypoints ) ;
33199: LD_ADDR_VAR 0 3
33203: PUSH
33204: LD_EXP 112
33208: PPUSH
33209: CALL 75484 0 1
33213: ST_TO_ADDR
// for i := 1 to list do
33214: LD_ADDR_VAR 0 2
33218: PUSH
33219: DOUBLE
33220: LD_INT 1
33222: DEC
33223: ST_TO_ADDR
33224: LD_VAR 0 3
33228: PUSH
33229: FOR_TO
33230: IFFALSE 33321
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33232: LD_STRING setFactoryWaypointXY(
33234: PUSH
33235: LD_VAR 0 3
33239: PUSH
33240: LD_VAR 0 2
33244: ARRAY
33245: PUSH
33246: LD_INT 1
33248: ARRAY
33249: STR
33250: PUSH
33251: LD_STRING ,
33253: STR
33254: PUSH
33255: LD_VAR 0 3
33259: PUSH
33260: LD_VAR 0 2
33264: ARRAY
33265: PUSH
33266: LD_INT 2
33268: ARRAY
33269: STR
33270: PUSH
33271: LD_STRING ,
33273: STR
33274: PUSH
33275: LD_VAR 0 3
33279: PUSH
33280: LD_VAR 0 2
33284: ARRAY
33285: PUSH
33286: LD_INT 3
33288: ARRAY
33289: STR
33290: PUSH
33291: LD_STRING ,
33293: STR
33294: PUSH
33295: LD_VAR 0 3
33299: PUSH
33300: LD_VAR 0 2
33304: ARRAY
33305: PUSH
33306: LD_INT 4
33308: ARRAY
33309: STR
33310: PUSH
33311: LD_STRING )
33313: STR
33314: PPUSH
33315: CALL_OW 559
33319: GO 33229
33321: POP
33322: POP
// end ; end ;
33323: LD_VAR 0 1
33327: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33328: LD_INT 0
33330: PPUSH
// if HexInfo ( x , y ) = warehouse then
33331: LD_VAR 0 2
33335: PPUSH
33336: LD_VAR 0 3
33340: PPUSH
33341: CALL_OW 428
33345: PUSH
33346: LD_VAR 0 1
33350: EQUAL
33351: IFFALSE 33378
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33353: LD_ADDR_EXP 113
33357: PUSH
33358: LD_EXP 113
33362: PPUSH
33363: LD_VAR 0 1
33367: PPUSH
33368: LD_INT 0
33370: PPUSH
33371: CALL_OW 1
33375: ST_TO_ADDR
33376: GO 33429
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33378: LD_ADDR_EXP 113
33382: PUSH
33383: LD_EXP 113
33387: PPUSH
33388: LD_VAR 0 1
33392: PPUSH
33393: LD_VAR 0 1
33397: PPUSH
33398: CALL_OW 255
33402: PUSH
33403: LD_VAR 0 1
33407: PUSH
33408: LD_VAR 0 2
33412: PUSH
33413: LD_VAR 0 3
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: PPUSH
33424: CALL_OW 1
33428: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33429: CALL 33438 0 0
// end ;
33433: LD_VAR 0 4
33437: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33438: LD_INT 0
33440: PPUSH
33441: PPUSH
33442: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33443: LD_STRING resetWarehouseGatheringPoints();
33445: PPUSH
33446: CALL_OW 559
// if warehouseGatheringPoints then
33450: LD_EXP 113
33454: IFFALSE 33580
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33456: LD_ADDR_VAR 0 3
33460: PUSH
33461: LD_EXP 113
33465: PPUSH
33466: CALL 75484 0 1
33470: ST_TO_ADDR
// for i := 1 to list do
33471: LD_ADDR_VAR 0 2
33475: PUSH
33476: DOUBLE
33477: LD_INT 1
33479: DEC
33480: ST_TO_ADDR
33481: LD_VAR 0 3
33485: PUSH
33486: FOR_TO
33487: IFFALSE 33578
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33489: LD_STRING setWarehouseGatheringPointXY(
33491: PUSH
33492: LD_VAR 0 3
33496: PUSH
33497: LD_VAR 0 2
33501: ARRAY
33502: PUSH
33503: LD_INT 1
33505: ARRAY
33506: STR
33507: PUSH
33508: LD_STRING ,
33510: STR
33511: PUSH
33512: LD_VAR 0 3
33516: PUSH
33517: LD_VAR 0 2
33521: ARRAY
33522: PUSH
33523: LD_INT 2
33525: ARRAY
33526: STR
33527: PUSH
33528: LD_STRING ,
33530: STR
33531: PUSH
33532: LD_VAR 0 3
33536: PUSH
33537: LD_VAR 0 2
33541: ARRAY
33542: PUSH
33543: LD_INT 3
33545: ARRAY
33546: STR
33547: PUSH
33548: LD_STRING ,
33550: STR
33551: PUSH
33552: LD_VAR 0 3
33556: PUSH
33557: LD_VAR 0 2
33561: ARRAY
33562: PUSH
33563: LD_INT 4
33565: ARRAY
33566: STR
33567: PUSH
33568: LD_STRING )
33570: STR
33571: PPUSH
33572: CALL_OW 559
33576: GO 33486
33578: POP
33579: POP
// end ; end ;
33580: LD_VAR 0 1
33584: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33585: LD_EXP 113
33589: IFFALSE 34274
33591: GO 33593
33593: DISABLE
33594: LD_INT 0
33596: PPUSH
33597: PPUSH
33598: PPUSH
33599: PPUSH
33600: PPUSH
33601: PPUSH
33602: PPUSH
33603: PPUSH
33604: PPUSH
// begin enable ;
33605: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33606: LD_ADDR_VAR 0 3
33610: PUSH
33611: LD_EXP 113
33615: PPUSH
33616: CALL 75484 0 1
33620: ST_TO_ADDR
// if not list then
33621: LD_VAR 0 3
33625: NOT
33626: IFFALSE 33630
// exit ;
33628: GO 34274
// for i := 1 to list do
33630: LD_ADDR_VAR 0 1
33634: PUSH
33635: DOUBLE
33636: LD_INT 1
33638: DEC
33639: ST_TO_ADDR
33640: LD_VAR 0 3
33644: PUSH
33645: FOR_TO
33646: IFFALSE 34272
// begin depot := list [ i ] [ 2 ] ;
33648: LD_ADDR_VAR 0 8
33652: PUSH
33653: LD_VAR 0 3
33657: PUSH
33658: LD_VAR 0 1
33662: ARRAY
33663: PUSH
33664: LD_INT 2
33666: ARRAY
33667: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33668: LD_ADDR_VAR 0 5
33672: PUSH
33673: LD_VAR 0 3
33677: PUSH
33678: LD_VAR 0 1
33682: ARRAY
33683: PUSH
33684: LD_INT 1
33686: ARRAY
33687: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33688: LD_VAR 0 8
33692: PPUSH
33693: CALL_OW 301
33697: PUSH
33698: LD_VAR 0 5
33702: PUSH
33703: LD_VAR 0 8
33707: PPUSH
33708: CALL_OW 255
33712: NONEQUAL
33713: OR
33714: IFFALSE 33743
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33716: LD_ADDR_EXP 113
33720: PUSH
33721: LD_EXP 113
33725: PPUSH
33726: LD_VAR 0 8
33730: PPUSH
33731: LD_INT 0
33733: PPUSH
33734: CALL_OW 1
33738: ST_TO_ADDR
// exit ;
33739: POP
33740: POP
33741: GO 34274
// end ; x := list [ i ] [ 3 ] ;
33743: LD_ADDR_VAR 0 6
33747: PUSH
33748: LD_VAR 0 3
33752: PUSH
33753: LD_VAR 0 1
33757: ARRAY
33758: PUSH
33759: LD_INT 3
33761: ARRAY
33762: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
33763: LD_ADDR_VAR 0 7
33767: PUSH
33768: LD_VAR 0 3
33772: PUSH
33773: LD_VAR 0 1
33777: ARRAY
33778: PUSH
33779: LD_INT 4
33781: ARRAY
33782: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
33783: LD_ADDR_VAR 0 9
33787: PUSH
33788: LD_VAR 0 6
33792: PPUSH
33793: LD_VAR 0 7
33797: PPUSH
33798: LD_INT 16
33800: PPUSH
33801: CALL 74072 0 3
33805: ST_TO_ADDR
// if not cratesNearbyPoint then
33806: LD_VAR 0 9
33810: NOT
33811: IFFALSE 33817
// exit ;
33813: POP
33814: POP
33815: GO 34274
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
33817: LD_ADDR_VAR 0 4
33821: PUSH
33822: LD_INT 22
33824: PUSH
33825: LD_VAR 0 5
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 3
33836: PUSH
33837: LD_INT 60
33839: PUSH
33840: EMPTY
33841: LIST
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 91
33849: PUSH
33850: LD_VAR 0 8
33854: PUSH
33855: LD_INT 6
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 2
33865: PUSH
33866: LD_INT 25
33868: PUSH
33869: LD_INT 2
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 25
33878: PUSH
33879: LD_INT 16
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: LIST
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: PPUSH
33897: CALL_OW 69
33901: PUSH
33902: LD_VAR 0 8
33906: PPUSH
33907: CALL_OW 313
33911: PPUSH
33912: LD_INT 3
33914: PUSH
33915: LD_INT 60
33917: PUSH
33918: EMPTY
33919: LIST
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 2
33927: PUSH
33928: LD_INT 25
33930: PUSH
33931: LD_INT 2
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 25
33940: PUSH
33941: LD_INT 16
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: LIST
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PPUSH
33957: CALL_OW 72
33961: UNION
33962: ST_TO_ADDR
// if tmp then
33963: LD_VAR 0 4
33967: IFFALSE 34047
// begin tmp := ShrinkArray ( tmp , 3 ) ;
33969: LD_ADDR_VAR 0 4
33973: PUSH
33974: LD_VAR 0 4
33978: PPUSH
33979: LD_INT 3
33981: PPUSH
33982: CALL 72041 0 2
33986: ST_TO_ADDR
// for j in tmp do
33987: LD_ADDR_VAR 0 2
33991: PUSH
33992: LD_VAR 0 4
33996: PUSH
33997: FOR_IN
33998: IFFALSE 34041
// begin if IsInUnit ( j ) then
34000: LD_VAR 0 2
34004: PPUSH
34005: CALL_OW 310
34009: IFFALSE 34020
// ComExit ( j ) ;
34011: LD_VAR 0 2
34015: PPUSH
34016: CALL 72124 0 1
// AddComCollect ( j , x , y ) ;
34020: LD_VAR 0 2
34024: PPUSH
34025: LD_VAR 0 6
34029: PPUSH
34030: LD_VAR 0 7
34034: PPUSH
34035: CALL_OW 177
// end ;
34039: GO 33997
34041: POP
34042: POP
// exit ;
34043: POP
34044: POP
34045: GO 34274
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34047: LD_ADDR_VAR 0 4
34051: PUSH
34052: LD_INT 22
34054: PUSH
34055: LD_VAR 0 5
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 91
34066: PUSH
34067: LD_VAR 0 8
34071: PUSH
34072: LD_INT 8
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 2
34082: PUSH
34083: LD_INT 34
34085: PUSH
34086: LD_INT 12
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 34
34095: PUSH
34096: LD_INT 51
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 34
34105: PUSH
34106: LD_INT 32
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 34
34115: PUSH
34116: LD_INT 89
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: LIST
34134: PPUSH
34135: CALL_OW 69
34139: ST_TO_ADDR
// if tmp then
34140: LD_VAR 0 4
34144: IFFALSE 34270
// begin for j in tmp do
34146: LD_ADDR_VAR 0 2
34150: PUSH
34151: LD_VAR 0 4
34155: PUSH
34156: FOR_IN
34157: IFFALSE 34268
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34159: LD_VAR 0 2
34163: PPUSH
34164: CALL_OW 262
34168: PUSH
34169: LD_INT 3
34171: EQUAL
34172: PUSH
34173: LD_VAR 0 2
34177: PPUSH
34178: CALL_OW 261
34182: PUSH
34183: LD_INT 20
34185: GREATER
34186: OR
34187: PUSH
34188: LD_VAR 0 2
34192: PPUSH
34193: CALL_OW 314
34197: NOT
34198: AND
34199: PUSH
34200: LD_VAR 0 2
34204: PPUSH
34205: CALL_OW 263
34209: PUSH
34210: LD_INT 1
34212: NONEQUAL
34213: PUSH
34214: LD_VAR 0 2
34218: PPUSH
34219: CALL_OW 311
34223: OR
34224: AND
34225: IFFALSE 34266
// begin ComCollect ( j , x , y ) ;
34227: LD_VAR 0 2
34231: PPUSH
34232: LD_VAR 0 6
34236: PPUSH
34237: LD_VAR 0 7
34241: PPUSH
34242: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34246: LD_VAR 0 2
34250: PPUSH
34251: LD_VAR 0 8
34255: PPUSH
34256: CALL_OW 172
// exit ;
34260: POP
34261: POP
34262: POP
34263: POP
34264: GO 34274
// end ;
34266: GO 34156
34268: POP
34269: POP
// end ; end ;
34270: GO 33645
34272: POP
34273: POP
// end ; end_of_file end_of_file
34274: PPOPN 9
34276: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
34277: LD_INT 0
34279: PPUSH
34280: PPUSH
// if exist_mode then
34281: LD_VAR 0 2
34285: IFFALSE 34310
// unit := CreateCharacter ( prefix & ident ) else
34287: LD_ADDR_VAR 0 5
34291: PUSH
34292: LD_VAR 0 3
34296: PUSH
34297: LD_VAR 0 1
34301: STR
34302: PPUSH
34303: CALL_OW 34
34307: ST_TO_ADDR
34308: GO 34325
// unit := NewCharacter ( ident ) ;
34310: LD_ADDR_VAR 0 5
34314: PUSH
34315: LD_VAR 0 1
34319: PPUSH
34320: CALL_OW 25
34324: ST_TO_ADDR
// result := unit ;
34325: LD_ADDR_VAR 0 4
34329: PUSH
34330: LD_VAR 0 5
34334: ST_TO_ADDR
// end ;
34335: LD_VAR 0 4
34339: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
34340: LD_INT 0
34342: PPUSH
34343: PPUSH
// if not side or not nation then
34344: LD_VAR 0 1
34348: NOT
34349: PUSH
34350: LD_VAR 0 2
34354: NOT
34355: OR
34356: IFFALSE 34360
// exit ;
34358: GO 35128
// case nation of nation_american :
34360: LD_VAR 0 2
34364: PUSH
34365: LD_INT 1
34367: DOUBLE
34368: EQUAL
34369: IFTRUE 34373
34371: GO 34587
34373: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
34374: LD_ADDR_VAR 0 4
34378: PUSH
34379: LD_INT 35
34381: PUSH
34382: LD_INT 45
34384: PUSH
34385: LD_INT 46
34387: PUSH
34388: LD_INT 47
34390: PUSH
34391: LD_INT 82
34393: PUSH
34394: LD_INT 83
34396: PUSH
34397: LD_INT 84
34399: PUSH
34400: LD_INT 85
34402: PUSH
34403: LD_INT 86
34405: PUSH
34406: LD_INT 1
34408: PUSH
34409: LD_INT 2
34411: PUSH
34412: LD_INT 6
34414: PUSH
34415: LD_INT 15
34417: PUSH
34418: LD_INT 16
34420: PUSH
34421: LD_INT 7
34423: PUSH
34424: LD_INT 12
34426: PUSH
34427: LD_INT 13
34429: PUSH
34430: LD_INT 10
34432: PUSH
34433: LD_INT 14
34435: PUSH
34436: LD_INT 20
34438: PUSH
34439: LD_INT 21
34441: PUSH
34442: LD_INT 22
34444: PUSH
34445: LD_INT 25
34447: PUSH
34448: LD_INT 32
34450: PUSH
34451: LD_INT 27
34453: PUSH
34454: LD_INT 36
34456: PUSH
34457: LD_INT 69
34459: PUSH
34460: LD_INT 39
34462: PUSH
34463: LD_INT 34
34465: PUSH
34466: LD_INT 40
34468: PUSH
34469: LD_INT 48
34471: PUSH
34472: LD_INT 49
34474: PUSH
34475: LD_INT 50
34477: PUSH
34478: LD_INT 51
34480: PUSH
34481: LD_INT 52
34483: PUSH
34484: LD_INT 53
34486: PUSH
34487: LD_INT 54
34489: PUSH
34490: LD_INT 55
34492: PUSH
34493: LD_INT 56
34495: PUSH
34496: LD_INT 57
34498: PUSH
34499: LD_INT 58
34501: PUSH
34502: LD_INT 59
34504: PUSH
34505: LD_INT 60
34507: PUSH
34508: LD_INT 61
34510: PUSH
34511: LD_INT 62
34513: PUSH
34514: LD_INT 80
34516: PUSH
34517: LD_INT 82
34519: PUSH
34520: LD_INT 83
34522: PUSH
34523: LD_INT 84
34525: PUSH
34526: LD_INT 85
34528: PUSH
34529: LD_INT 86
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: ST_TO_ADDR
34585: GO 35052
34587: LD_INT 2
34589: DOUBLE
34590: EQUAL
34591: IFTRUE 34595
34593: GO 34821
34595: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
34596: LD_ADDR_VAR 0 4
34600: PUSH
34601: LD_INT 35
34603: PUSH
34604: LD_INT 45
34606: PUSH
34607: LD_INT 46
34609: PUSH
34610: LD_INT 47
34612: PUSH
34613: LD_INT 82
34615: PUSH
34616: LD_INT 83
34618: PUSH
34619: LD_INT 84
34621: PUSH
34622: LD_INT 85
34624: PUSH
34625: LD_INT 87
34627: PUSH
34628: LD_INT 70
34630: PUSH
34631: LD_INT 1
34633: PUSH
34634: LD_INT 11
34636: PUSH
34637: LD_INT 3
34639: PUSH
34640: LD_INT 4
34642: PUSH
34643: LD_INT 5
34645: PUSH
34646: LD_INT 6
34648: PUSH
34649: LD_INT 15
34651: PUSH
34652: LD_INT 18
34654: PUSH
34655: LD_INT 7
34657: PUSH
34658: LD_INT 17
34660: PUSH
34661: LD_INT 8
34663: PUSH
34664: LD_INT 20
34666: PUSH
34667: LD_INT 21
34669: PUSH
34670: LD_INT 22
34672: PUSH
34673: LD_INT 72
34675: PUSH
34676: LD_INT 26
34678: PUSH
34679: LD_INT 69
34681: PUSH
34682: LD_INT 39
34684: PUSH
34685: LD_INT 40
34687: PUSH
34688: LD_INT 41
34690: PUSH
34691: LD_INT 42
34693: PUSH
34694: LD_INT 43
34696: PUSH
34697: LD_INT 48
34699: PUSH
34700: LD_INT 49
34702: PUSH
34703: LD_INT 50
34705: PUSH
34706: LD_INT 51
34708: PUSH
34709: LD_INT 52
34711: PUSH
34712: LD_INT 53
34714: PUSH
34715: LD_INT 54
34717: PUSH
34718: LD_INT 55
34720: PUSH
34721: LD_INT 56
34723: PUSH
34724: LD_INT 60
34726: PUSH
34727: LD_INT 61
34729: PUSH
34730: LD_INT 62
34732: PUSH
34733: LD_INT 66
34735: PUSH
34736: LD_INT 67
34738: PUSH
34739: LD_INT 68
34741: PUSH
34742: LD_INT 81
34744: PUSH
34745: LD_INT 82
34747: PUSH
34748: LD_INT 83
34750: PUSH
34751: LD_INT 84
34753: PUSH
34754: LD_INT 85
34756: PUSH
34757: LD_INT 87
34759: PUSH
34760: LD_INT 88
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: ST_TO_ADDR
34819: GO 35052
34821: LD_INT 3
34823: DOUBLE
34824: EQUAL
34825: IFTRUE 34829
34827: GO 35051
34829: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
34830: LD_ADDR_VAR 0 4
34834: PUSH
34835: LD_INT 46
34837: PUSH
34838: LD_INT 47
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: LD_INT 2
34846: PUSH
34847: LD_INT 82
34849: PUSH
34850: LD_INT 83
34852: PUSH
34853: LD_INT 84
34855: PUSH
34856: LD_INT 85
34858: PUSH
34859: LD_INT 86
34861: PUSH
34862: LD_INT 11
34864: PUSH
34865: LD_INT 9
34867: PUSH
34868: LD_INT 20
34870: PUSH
34871: LD_INT 19
34873: PUSH
34874: LD_INT 21
34876: PUSH
34877: LD_INT 24
34879: PUSH
34880: LD_INT 22
34882: PUSH
34883: LD_INT 25
34885: PUSH
34886: LD_INT 28
34888: PUSH
34889: LD_INT 29
34891: PUSH
34892: LD_INT 30
34894: PUSH
34895: LD_INT 31
34897: PUSH
34898: LD_INT 37
34900: PUSH
34901: LD_INT 38
34903: PUSH
34904: LD_INT 32
34906: PUSH
34907: LD_INT 27
34909: PUSH
34910: LD_INT 33
34912: PUSH
34913: LD_INT 69
34915: PUSH
34916: LD_INT 39
34918: PUSH
34919: LD_INT 34
34921: PUSH
34922: LD_INT 40
34924: PUSH
34925: LD_INT 71
34927: PUSH
34928: LD_INT 23
34930: PUSH
34931: LD_INT 44
34933: PUSH
34934: LD_INT 48
34936: PUSH
34937: LD_INT 49
34939: PUSH
34940: LD_INT 50
34942: PUSH
34943: LD_INT 51
34945: PUSH
34946: LD_INT 52
34948: PUSH
34949: LD_INT 53
34951: PUSH
34952: LD_INT 54
34954: PUSH
34955: LD_INT 55
34957: PUSH
34958: LD_INT 56
34960: PUSH
34961: LD_INT 57
34963: PUSH
34964: LD_INT 58
34966: PUSH
34967: LD_INT 59
34969: PUSH
34970: LD_INT 63
34972: PUSH
34973: LD_INT 64
34975: PUSH
34976: LD_INT 65
34978: PUSH
34979: LD_INT 82
34981: PUSH
34982: LD_INT 83
34984: PUSH
34985: LD_INT 84
34987: PUSH
34988: LD_INT 85
34990: PUSH
34991: LD_INT 86
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: ST_TO_ADDR
35049: GO 35052
35051: POP
// if state > - 1 and state < 3 then
35052: LD_VAR 0 3
35056: PUSH
35057: LD_INT 1
35059: NEG
35060: GREATER
35061: PUSH
35062: LD_VAR 0 3
35066: PUSH
35067: LD_INT 3
35069: LESS
35070: AND
35071: IFFALSE 35128
// for i in result do
35073: LD_ADDR_VAR 0 5
35077: PUSH
35078: LD_VAR 0 4
35082: PUSH
35083: FOR_IN
35084: IFFALSE 35126
// if GetTech ( i , side ) <> state then
35086: LD_VAR 0 5
35090: PPUSH
35091: LD_VAR 0 1
35095: PPUSH
35096: CALL_OW 321
35100: PUSH
35101: LD_VAR 0 3
35105: NONEQUAL
35106: IFFALSE 35124
// result := result diff i ;
35108: LD_ADDR_VAR 0 4
35112: PUSH
35113: LD_VAR 0 4
35117: PUSH
35118: LD_VAR 0 5
35122: DIFF
35123: ST_TO_ADDR
35124: GO 35083
35126: POP
35127: POP
// end ;
35128: LD_VAR 0 4
35132: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35133: LD_INT 0
35135: PPUSH
35136: PPUSH
35137: PPUSH
// result := true ;
35138: LD_ADDR_VAR 0 3
35142: PUSH
35143: LD_INT 1
35145: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35146: LD_ADDR_VAR 0 5
35150: PUSH
35151: LD_VAR 0 2
35155: PPUSH
35156: CALL_OW 480
35160: ST_TO_ADDR
// if not tmp then
35161: LD_VAR 0 5
35165: NOT
35166: IFFALSE 35170
// exit ;
35168: GO 35219
// for i in tmp do
35170: LD_ADDR_VAR 0 4
35174: PUSH
35175: LD_VAR 0 5
35179: PUSH
35180: FOR_IN
35181: IFFALSE 35217
// if GetTech ( i , side ) <> state_researched then
35183: LD_VAR 0 4
35187: PPUSH
35188: LD_VAR 0 1
35192: PPUSH
35193: CALL_OW 321
35197: PUSH
35198: LD_INT 2
35200: NONEQUAL
35201: IFFALSE 35215
// begin result := false ;
35203: LD_ADDR_VAR 0 3
35207: PUSH
35208: LD_INT 0
35210: ST_TO_ADDR
// exit ;
35211: POP
35212: POP
35213: GO 35219
// end ;
35215: GO 35180
35217: POP
35218: POP
// end ;
35219: LD_VAR 0 3
35223: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
35224: LD_INT 0
35226: PPUSH
35227: PPUSH
35228: PPUSH
35229: PPUSH
35230: PPUSH
35231: PPUSH
35232: PPUSH
35233: PPUSH
35234: PPUSH
35235: PPUSH
35236: PPUSH
35237: PPUSH
35238: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
35239: LD_VAR 0 1
35243: NOT
35244: PUSH
35245: LD_VAR 0 1
35249: PPUSH
35250: CALL_OW 257
35254: PUSH
35255: LD_INT 9
35257: NONEQUAL
35258: OR
35259: IFFALSE 35263
// exit ;
35261: GO 35836
// side := GetSide ( unit ) ;
35263: LD_ADDR_VAR 0 9
35267: PUSH
35268: LD_VAR 0 1
35272: PPUSH
35273: CALL_OW 255
35277: ST_TO_ADDR
// tech_space := tech_spacanom ;
35278: LD_ADDR_VAR 0 12
35282: PUSH
35283: LD_INT 29
35285: ST_TO_ADDR
// tech_time := tech_taurad ;
35286: LD_ADDR_VAR 0 13
35290: PUSH
35291: LD_INT 28
35293: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
35294: LD_ADDR_VAR 0 11
35298: PUSH
35299: LD_VAR 0 1
35303: PPUSH
35304: CALL_OW 310
35308: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
35309: LD_VAR 0 11
35313: PPUSH
35314: CALL_OW 247
35318: PUSH
35319: LD_INT 2
35321: EQUAL
35322: IFFALSE 35326
// exit ;
35324: GO 35836
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35326: LD_ADDR_VAR 0 8
35330: PUSH
35331: LD_INT 81
35333: PUSH
35334: LD_VAR 0 9
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 3
35345: PUSH
35346: LD_INT 21
35348: PUSH
35349: LD_INT 3
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PPUSH
35364: CALL_OW 69
35368: ST_TO_ADDR
// if not tmp then
35369: LD_VAR 0 8
35373: NOT
35374: IFFALSE 35378
// exit ;
35376: GO 35836
// if in_unit then
35378: LD_VAR 0 11
35382: IFFALSE 35406
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
35384: LD_ADDR_VAR 0 10
35388: PUSH
35389: LD_VAR 0 8
35393: PPUSH
35394: LD_VAR 0 11
35398: PPUSH
35399: CALL_OW 74
35403: ST_TO_ADDR
35404: GO 35426
// enemy := NearestUnitToUnit ( tmp , unit ) ;
35406: LD_ADDR_VAR 0 10
35410: PUSH
35411: LD_VAR 0 8
35415: PPUSH
35416: LD_VAR 0 1
35420: PPUSH
35421: CALL_OW 74
35425: ST_TO_ADDR
// if not enemy then
35426: LD_VAR 0 10
35430: NOT
35431: IFFALSE 35435
// exit ;
35433: GO 35836
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
35435: LD_VAR 0 11
35439: PUSH
35440: LD_VAR 0 11
35444: PPUSH
35445: LD_VAR 0 10
35449: PPUSH
35450: CALL_OW 296
35454: PUSH
35455: LD_INT 13
35457: GREATER
35458: AND
35459: PUSH
35460: LD_VAR 0 1
35464: PPUSH
35465: LD_VAR 0 10
35469: PPUSH
35470: CALL_OW 296
35474: PUSH
35475: LD_INT 12
35477: GREATER
35478: OR
35479: IFFALSE 35483
// exit ;
35481: GO 35836
// missile := [ 1 ] ;
35483: LD_ADDR_VAR 0 14
35487: PUSH
35488: LD_INT 1
35490: PUSH
35491: EMPTY
35492: LIST
35493: ST_TO_ADDR
// if Researched ( side , tech_space ) then
35494: LD_VAR 0 9
35498: PPUSH
35499: LD_VAR 0 12
35503: PPUSH
35504: CALL_OW 325
35508: IFFALSE 35537
// missile := Replace ( missile , missile + 1 , 2 ) ;
35510: LD_ADDR_VAR 0 14
35514: PUSH
35515: LD_VAR 0 14
35519: PPUSH
35520: LD_VAR 0 14
35524: PUSH
35525: LD_INT 1
35527: PLUS
35528: PPUSH
35529: LD_INT 2
35531: PPUSH
35532: CALL_OW 1
35536: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
35537: LD_VAR 0 9
35541: PPUSH
35542: LD_VAR 0 13
35546: PPUSH
35547: CALL_OW 325
35551: PUSH
35552: LD_VAR 0 10
35556: PPUSH
35557: CALL_OW 255
35561: PPUSH
35562: LD_VAR 0 13
35566: PPUSH
35567: CALL_OW 325
35571: NOT
35572: AND
35573: IFFALSE 35602
// missile := Replace ( missile , missile + 1 , 3 ) ;
35575: LD_ADDR_VAR 0 14
35579: PUSH
35580: LD_VAR 0 14
35584: PPUSH
35585: LD_VAR 0 14
35589: PUSH
35590: LD_INT 1
35592: PLUS
35593: PPUSH
35594: LD_INT 3
35596: PPUSH
35597: CALL_OW 1
35601: ST_TO_ADDR
// if missile < 2 then
35602: LD_VAR 0 14
35606: PUSH
35607: LD_INT 2
35609: LESS
35610: IFFALSE 35614
// exit ;
35612: GO 35836
// x := GetX ( enemy ) ;
35614: LD_ADDR_VAR 0 4
35618: PUSH
35619: LD_VAR 0 10
35623: PPUSH
35624: CALL_OW 250
35628: ST_TO_ADDR
// y := GetY ( enemy ) ;
35629: LD_ADDR_VAR 0 5
35633: PUSH
35634: LD_VAR 0 10
35638: PPUSH
35639: CALL_OW 251
35643: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35644: LD_ADDR_VAR 0 6
35648: PUSH
35649: LD_VAR 0 4
35653: PUSH
35654: LD_INT 1
35656: NEG
35657: PPUSH
35658: LD_INT 1
35660: PPUSH
35661: CALL_OW 12
35665: PLUS
35666: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35667: LD_ADDR_VAR 0 7
35671: PUSH
35672: LD_VAR 0 5
35676: PUSH
35677: LD_INT 1
35679: NEG
35680: PPUSH
35681: LD_INT 1
35683: PPUSH
35684: CALL_OW 12
35688: PLUS
35689: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35690: LD_VAR 0 6
35694: PPUSH
35695: LD_VAR 0 7
35699: PPUSH
35700: CALL_OW 488
35704: NOT
35705: IFFALSE 35727
// begin _x := x ;
35707: LD_ADDR_VAR 0 6
35711: PUSH
35712: LD_VAR 0 4
35716: ST_TO_ADDR
// _y := y ;
35717: LD_ADDR_VAR 0 7
35721: PUSH
35722: LD_VAR 0 5
35726: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35727: LD_ADDR_VAR 0 3
35731: PUSH
35732: LD_INT 1
35734: PPUSH
35735: LD_VAR 0 14
35739: PPUSH
35740: CALL_OW 12
35744: ST_TO_ADDR
// case i of 1 :
35745: LD_VAR 0 3
35749: PUSH
35750: LD_INT 1
35752: DOUBLE
35753: EQUAL
35754: IFTRUE 35758
35756: GO 35775
35758: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35759: LD_VAR 0 1
35763: PPUSH
35764: LD_VAR 0 10
35768: PPUSH
35769: CALL_OW 115
35773: GO 35836
35775: LD_INT 2
35777: DOUBLE
35778: EQUAL
35779: IFTRUE 35783
35781: GO 35805
35783: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35784: LD_VAR 0 1
35788: PPUSH
35789: LD_VAR 0 6
35793: PPUSH
35794: LD_VAR 0 7
35798: PPUSH
35799: CALL_OW 153
35803: GO 35836
35805: LD_INT 3
35807: DOUBLE
35808: EQUAL
35809: IFTRUE 35813
35811: GO 35835
35813: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35814: LD_VAR 0 1
35818: PPUSH
35819: LD_VAR 0 6
35823: PPUSH
35824: LD_VAR 0 7
35828: PPUSH
35829: CALL_OW 154
35833: GO 35836
35835: POP
// end ;
35836: LD_VAR 0 2
35840: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35841: LD_INT 0
35843: PPUSH
35844: PPUSH
35845: PPUSH
35846: PPUSH
35847: PPUSH
35848: PPUSH
// if not unit or not building then
35849: LD_VAR 0 1
35853: NOT
35854: PUSH
35855: LD_VAR 0 2
35859: NOT
35860: OR
35861: IFFALSE 35865
// exit ;
35863: GO 36023
// x := GetX ( building ) ;
35865: LD_ADDR_VAR 0 5
35869: PUSH
35870: LD_VAR 0 2
35874: PPUSH
35875: CALL_OW 250
35879: ST_TO_ADDR
// y := GetY ( building ) ;
35880: LD_ADDR_VAR 0 6
35884: PUSH
35885: LD_VAR 0 2
35889: PPUSH
35890: CALL_OW 251
35894: ST_TO_ADDR
// for i = 0 to 5 do
35895: LD_ADDR_VAR 0 4
35899: PUSH
35900: DOUBLE
35901: LD_INT 0
35903: DEC
35904: ST_TO_ADDR
35905: LD_INT 5
35907: PUSH
35908: FOR_TO
35909: IFFALSE 36021
// begin _x := ShiftX ( x , i , 3 ) ;
35911: LD_ADDR_VAR 0 7
35915: PUSH
35916: LD_VAR 0 5
35920: PPUSH
35921: LD_VAR 0 4
35925: PPUSH
35926: LD_INT 3
35928: PPUSH
35929: CALL_OW 272
35933: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35934: LD_ADDR_VAR 0 8
35938: PUSH
35939: LD_VAR 0 6
35943: PPUSH
35944: LD_VAR 0 4
35948: PPUSH
35949: LD_INT 3
35951: PPUSH
35952: CALL_OW 273
35956: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35957: LD_VAR 0 7
35961: PPUSH
35962: LD_VAR 0 8
35966: PPUSH
35967: CALL_OW 488
35971: NOT
35972: IFFALSE 35976
// continue ;
35974: GO 35908
// if HexInfo ( _x , _y ) = 0 then
35976: LD_VAR 0 7
35980: PPUSH
35981: LD_VAR 0 8
35985: PPUSH
35986: CALL_OW 428
35990: PUSH
35991: LD_INT 0
35993: EQUAL
35994: IFFALSE 36019
// begin ComMoveXY ( unit , _x , _y ) ;
35996: LD_VAR 0 1
36000: PPUSH
36001: LD_VAR 0 7
36005: PPUSH
36006: LD_VAR 0 8
36010: PPUSH
36011: CALL_OW 111
// exit ;
36015: POP
36016: POP
36017: GO 36023
// end ; end ;
36019: GO 35908
36021: POP
36022: POP
// end ;
36023: LD_VAR 0 3
36027: RET
// export function ScanBase ( side , base_area ) ; begin
36028: LD_INT 0
36030: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
36031: LD_ADDR_VAR 0 3
36035: PUSH
36036: LD_VAR 0 2
36040: PPUSH
36041: LD_INT 81
36043: PUSH
36044: LD_VAR 0 1
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PPUSH
36053: CALL_OW 70
36057: ST_TO_ADDR
// end ;
36058: LD_VAR 0 3
36062: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
36063: LD_INT 0
36065: PPUSH
36066: PPUSH
36067: PPUSH
36068: PPUSH
// result := false ;
36069: LD_ADDR_VAR 0 2
36073: PUSH
36074: LD_INT 0
36076: ST_TO_ADDR
// side := GetSide ( unit ) ;
36077: LD_ADDR_VAR 0 3
36081: PUSH
36082: LD_VAR 0 1
36086: PPUSH
36087: CALL_OW 255
36091: ST_TO_ADDR
// nat := GetNation ( unit ) ;
36092: LD_ADDR_VAR 0 4
36096: PUSH
36097: LD_VAR 0 1
36101: PPUSH
36102: CALL_OW 248
36106: ST_TO_ADDR
// case nat of 1 :
36107: LD_VAR 0 4
36111: PUSH
36112: LD_INT 1
36114: DOUBLE
36115: EQUAL
36116: IFTRUE 36120
36118: GO 36131
36120: POP
// tech := tech_lassight ; 2 :
36121: LD_ADDR_VAR 0 5
36125: PUSH
36126: LD_INT 12
36128: ST_TO_ADDR
36129: GO 36170
36131: LD_INT 2
36133: DOUBLE
36134: EQUAL
36135: IFTRUE 36139
36137: GO 36150
36139: POP
// tech := tech_mortar ; 3 :
36140: LD_ADDR_VAR 0 5
36144: PUSH
36145: LD_INT 41
36147: ST_TO_ADDR
36148: GO 36170
36150: LD_INT 3
36152: DOUBLE
36153: EQUAL
36154: IFTRUE 36158
36156: GO 36169
36158: POP
// tech := tech_bazooka ; end ;
36159: LD_ADDR_VAR 0 5
36163: PUSH
36164: LD_INT 44
36166: ST_TO_ADDR
36167: GO 36170
36169: POP
// if Researched ( side , tech ) then
36170: LD_VAR 0 3
36174: PPUSH
36175: LD_VAR 0 5
36179: PPUSH
36180: CALL_OW 325
36184: IFFALSE 36211
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
36186: LD_ADDR_VAR 0 2
36190: PUSH
36191: LD_INT 5
36193: PUSH
36194: LD_INT 8
36196: PUSH
36197: LD_INT 9
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: LIST
36204: PUSH
36205: LD_VAR 0 4
36209: ARRAY
36210: ST_TO_ADDR
// end ;
36211: LD_VAR 0 2
36215: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
36216: LD_INT 0
36218: PPUSH
36219: PPUSH
36220: PPUSH
// if not mines then
36221: LD_VAR 0 2
36225: NOT
36226: IFFALSE 36230
// exit ;
36228: GO 36374
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36230: LD_ADDR_VAR 0 5
36234: PUSH
36235: LD_INT 81
36237: PUSH
36238: LD_VAR 0 1
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: LD_INT 3
36249: PUSH
36250: LD_INT 21
36252: PUSH
36253: LD_INT 3
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PPUSH
36268: CALL_OW 69
36272: ST_TO_ADDR
// for i in mines do
36273: LD_ADDR_VAR 0 4
36277: PUSH
36278: LD_VAR 0 2
36282: PUSH
36283: FOR_IN
36284: IFFALSE 36372
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
36286: LD_VAR 0 4
36290: PUSH
36291: LD_INT 1
36293: ARRAY
36294: PPUSH
36295: LD_VAR 0 4
36299: PUSH
36300: LD_INT 2
36302: ARRAY
36303: PPUSH
36304: CALL_OW 458
36308: NOT
36309: IFFALSE 36313
// continue ;
36311: GO 36283
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
36313: LD_VAR 0 4
36317: PUSH
36318: LD_INT 1
36320: ARRAY
36321: PPUSH
36322: LD_VAR 0 4
36326: PUSH
36327: LD_INT 2
36329: ARRAY
36330: PPUSH
36331: CALL_OW 428
36335: PUSH
36336: LD_VAR 0 5
36340: IN
36341: IFFALSE 36370
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
36343: LD_VAR 0 4
36347: PUSH
36348: LD_INT 1
36350: ARRAY
36351: PPUSH
36352: LD_VAR 0 4
36356: PUSH
36357: LD_INT 2
36359: ARRAY
36360: PPUSH
36361: LD_VAR 0 1
36365: PPUSH
36366: CALL_OW 456
// end ;
36370: GO 36283
36372: POP
36373: POP
// end ;
36374: LD_VAR 0 3
36378: RET
// export function Count ( array ) ; var i ; begin
36379: LD_INT 0
36381: PPUSH
36382: PPUSH
// result := 0 ;
36383: LD_ADDR_VAR 0 2
36387: PUSH
36388: LD_INT 0
36390: ST_TO_ADDR
// for i in array do
36391: LD_ADDR_VAR 0 3
36395: PUSH
36396: LD_VAR 0 1
36400: PUSH
36401: FOR_IN
36402: IFFALSE 36426
// if i then
36404: LD_VAR 0 3
36408: IFFALSE 36424
// result := result + 1 ;
36410: LD_ADDR_VAR 0 2
36414: PUSH
36415: LD_VAR 0 2
36419: PUSH
36420: LD_INT 1
36422: PLUS
36423: ST_TO_ADDR
36424: GO 36401
36426: POP
36427: POP
// end ;
36428: LD_VAR 0 2
36432: RET
// export function IsEmpty ( building ) ; begin
36433: LD_INT 0
36435: PPUSH
// if not building then
36436: LD_VAR 0 1
36440: NOT
36441: IFFALSE 36445
// exit ;
36443: GO 36488
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
36445: LD_ADDR_VAR 0 2
36449: PUSH
36450: LD_VAR 0 1
36454: PUSH
36455: LD_INT 22
36457: PUSH
36458: LD_VAR 0 1
36462: PPUSH
36463: CALL_OW 255
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 58
36474: PUSH
36475: EMPTY
36476: LIST
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PPUSH
36482: CALL_OW 69
36486: IN
36487: ST_TO_ADDR
// end ;
36488: LD_VAR 0 2
36492: RET
// export function IsNotFull ( building ) ; var places ; begin
36493: LD_INT 0
36495: PPUSH
36496: PPUSH
// if not building then
36497: LD_VAR 0 1
36501: NOT
36502: IFFALSE 36506
// exit ;
36504: GO 36677
// result := false ;
36506: LD_ADDR_VAR 0 2
36510: PUSH
36511: LD_INT 0
36513: ST_TO_ADDR
// places := 0 ;
36514: LD_ADDR_VAR 0 3
36518: PUSH
36519: LD_INT 0
36521: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
36522: LD_VAR 0 1
36526: PPUSH
36527: CALL_OW 266
36531: PUSH
36532: LD_INT 0
36534: DOUBLE
36535: EQUAL
36536: IFTRUE 36594
36538: LD_INT 1
36540: DOUBLE
36541: EQUAL
36542: IFTRUE 36594
36544: LD_INT 6
36546: DOUBLE
36547: EQUAL
36548: IFTRUE 36594
36550: LD_INT 7
36552: DOUBLE
36553: EQUAL
36554: IFTRUE 36594
36556: LD_INT 8
36558: DOUBLE
36559: EQUAL
36560: IFTRUE 36594
36562: LD_INT 4
36564: DOUBLE
36565: EQUAL
36566: IFTRUE 36594
36568: LD_INT 5
36570: DOUBLE
36571: EQUAL
36572: IFTRUE 36594
36574: LD_INT 2
36576: DOUBLE
36577: EQUAL
36578: IFTRUE 36594
36580: LD_INT 3
36582: DOUBLE
36583: EQUAL
36584: IFTRUE 36594
36586: LD_INT 35
36588: DOUBLE
36589: EQUAL
36590: IFTRUE 36594
36592: GO 36605
36594: POP
// places := 6 ; b_bunker , b_breastwork :
36595: LD_ADDR_VAR 0 3
36599: PUSH
36600: LD_INT 6
36602: ST_TO_ADDR
36603: GO 36650
36605: LD_INT 32
36607: DOUBLE
36608: EQUAL
36609: IFTRUE 36619
36611: LD_INT 31
36613: DOUBLE
36614: EQUAL
36615: IFTRUE 36619
36617: GO 36630
36619: POP
// places := 1 ; b_control_tower :
36620: LD_ADDR_VAR 0 3
36624: PUSH
36625: LD_INT 1
36627: ST_TO_ADDR
36628: GO 36650
36630: LD_INT 36
36632: DOUBLE
36633: EQUAL
36634: IFTRUE 36638
36636: GO 36649
36638: POP
// places := 3 ; end ;
36639: LD_ADDR_VAR 0 3
36643: PUSH
36644: LD_INT 3
36646: ST_TO_ADDR
36647: GO 36650
36649: POP
// if places then
36650: LD_VAR 0 3
36654: IFFALSE 36677
// result := UnitsInside ( building ) < places ;
36656: LD_ADDR_VAR 0 2
36660: PUSH
36661: LD_VAR 0 1
36665: PPUSH
36666: CALL_OW 313
36670: PUSH
36671: LD_VAR 0 3
36675: LESS
36676: ST_TO_ADDR
// end ;
36677: LD_VAR 0 2
36681: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
36682: LD_INT 0
36684: PPUSH
36685: PPUSH
36686: PPUSH
36687: PPUSH
// tmp := [ ] ;
36688: LD_ADDR_VAR 0 3
36692: PUSH
36693: EMPTY
36694: ST_TO_ADDR
// list := [ ] ;
36695: LD_ADDR_VAR 0 5
36699: PUSH
36700: EMPTY
36701: ST_TO_ADDR
// for i = 16 to 25 do
36702: LD_ADDR_VAR 0 4
36706: PUSH
36707: DOUBLE
36708: LD_INT 16
36710: DEC
36711: ST_TO_ADDR
36712: LD_INT 25
36714: PUSH
36715: FOR_TO
36716: IFFALSE 36789
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
36718: LD_ADDR_VAR 0 3
36722: PUSH
36723: LD_VAR 0 3
36727: PUSH
36728: LD_INT 22
36730: PUSH
36731: LD_VAR 0 1
36735: PPUSH
36736: CALL_OW 255
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 91
36747: PUSH
36748: LD_VAR 0 1
36752: PUSH
36753: LD_INT 6
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 30
36763: PUSH
36764: LD_VAR 0 4
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: LIST
36777: PUSH
36778: EMPTY
36779: LIST
36780: PPUSH
36781: CALL_OW 69
36785: ADD
36786: ST_TO_ADDR
36787: GO 36715
36789: POP
36790: POP
// for i = 1 to tmp do
36791: LD_ADDR_VAR 0 4
36795: PUSH
36796: DOUBLE
36797: LD_INT 1
36799: DEC
36800: ST_TO_ADDR
36801: LD_VAR 0 3
36805: PUSH
36806: FOR_TO
36807: IFFALSE 36895
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36809: LD_ADDR_VAR 0 5
36813: PUSH
36814: LD_VAR 0 5
36818: PUSH
36819: LD_VAR 0 3
36823: PUSH
36824: LD_VAR 0 4
36828: ARRAY
36829: PPUSH
36830: CALL_OW 266
36834: PUSH
36835: LD_VAR 0 3
36839: PUSH
36840: LD_VAR 0 4
36844: ARRAY
36845: PPUSH
36846: CALL_OW 250
36850: PUSH
36851: LD_VAR 0 3
36855: PUSH
36856: LD_VAR 0 4
36860: ARRAY
36861: PPUSH
36862: CALL_OW 251
36866: PUSH
36867: LD_VAR 0 3
36871: PUSH
36872: LD_VAR 0 4
36876: ARRAY
36877: PPUSH
36878: CALL_OW 254
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: PUSH
36889: EMPTY
36890: LIST
36891: ADD
36892: ST_TO_ADDR
36893: GO 36806
36895: POP
36896: POP
// result := list ;
36897: LD_ADDR_VAR 0 2
36901: PUSH
36902: LD_VAR 0 5
36906: ST_TO_ADDR
// end ;
36907: LD_VAR 0 2
36911: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36912: LD_INT 0
36914: PPUSH
36915: PPUSH
36916: PPUSH
36917: PPUSH
36918: PPUSH
36919: PPUSH
36920: PPUSH
// if not factory then
36921: LD_VAR 0 1
36925: NOT
36926: IFFALSE 36930
// exit ;
36928: GO 37523
// if control = control_apeman then
36930: LD_VAR 0 4
36934: PUSH
36935: LD_INT 5
36937: EQUAL
36938: IFFALSE 37047
// begin tmp := UnitsInside ( factory ) ;
36940: LD_ADDR_VAR 0 8
36944: PUSH
36945: LD_VAR 0 1
36949: PPUSH
36950: CALL_OW 313
36954: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36955: LD_VAR 0 8
36959: PPUSH
36960: LD_INT 25
36962: PUSH
36963: LD_INT 12
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PPUSH
36970: CALL_OW 72
36974: NOT
36975: IFFALSE 36985
// control := control_manual ;
36977: LD_ADDR_VAR 0 4
36981: PUSH
36982: LD_INT 1
36984: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36985: LD_ADDR_VAR 0 8
36989: PUSH
36990: LD_VAR 0 1
36994: PPUSH
36995: CALL 36682 0 1
36999: ST_TO_ADDR
// if tmp then
37000: LD_VAR 0 8
37004: IFFALSE 37047
// begin for i in tmp do
37006: LD_ADDR_VAR 0 7
37010: PUSH
37011: LD_VAR 0 8
37015: PUSH
37016: FOR_IN
37017: IFFALSE 37045
// if i [ 1 ] = b_ext_radio then
37019: LD_VAR 0 7
37023: PUSH
37024: LD_INT 1
37026: ARRAY
37027: PUSH
37028: LD_INT 22
37030: EQUAL
37031: IFFALSE 37043
// begin control := control_remote ;
37033: LD_ADDR_VAR 0 4
37037: PUSH
37038: LD_INT 2
37040: ST_TO_ADDR
// break ;
37041: GO 37045
// end ;
37043: GO 37016
37045: POP
37046: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37047: LD_VAR 0 1
37051: PPUSH
37052: LD_VAR 0 2
37056: PPUSH
37057: LD_VAR 0 3
37061: PPUSH
37062: LD_VAR 0 4
37066: PPUSH
37067: LD_VAR 0 5
37071: PPUSH
37072: CALL_OW 448
37076: IFFALSE 37111
// begin result := [ chassis , engine , control , weapon ] ;
37078: LD_ADDR_VAR 0 6
37082: PUSH
37083: LD_VAR 0 2
37087: PUSH
37088: LD_VAR 0 3
37092: PUSH
37093: LD_VAR 0 4
37097: PUSH
37098: LD_VAR 0 5
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: ST_TO_ADDR
// exit ;
37109: GO 37523
// end ; _chassis := AvailableChassisList ( factory ) ;
37111: LD_ADDR_VAR 0 9
37115: PUSH
37116: LD_VAR 0 1
37120: PPUSH
37121: CALL_OW 475
37125: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
37126: LD_ADDR_VAR 0 11
37130: PUSH
37131: LD_VAR 0 1
37135: PPUSH
37136: CALL_OW 476
37140: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
37141: LD_ADDR_VAR 0 12
37145: PUSH
37146: LD_VAR 0 1
37150: PPUSH
37151: CALL_OW 477
37155: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
37156: LD_ADDR_VAR 0 10
37160: PUSH
37161: LD_VAR 0 1
37165: PPUSH
37166: CALL_OW 478
37170: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
37171: LD_VAR 0 9
37175: NOT
37176: PUSH
37177: LD_VAR 0 11
37181: NOT
37182: OR
37183: PUSH
37184: LD_VAR 0 12
37188: NOT
37189: OR
37190: PUSH
37191: LD_VAR 0 10
37195: NOT
37196: OR
37197: IFFALSE 37232
// begin result := [ chassis , engine , control , weapon ] ;
37199: LD_ADDR_VAR 0 6
37203: PUSH
37204: LD_VAR 0 2
37208: PUSH
37209: LD_VAR 0 3
37213: PUSH
37214: LD_VAR 0 4
37218: PUSH
37219: LD_VAR 0 5
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: ST_TO_ADDR
// exit ;
37230: GO 37523
// end ; if not chassis in _chassis then
37232: LD_VAR 0 2
37236: PUSH
37237: LD_VAR 0 9
37241: IN
37242: NOT
37243: IFFALSE 37269
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
37245: LD_ADDR_VAR 0 2
37249: PUSH
37250: LD_VAR 0 9
37254: PUSH
37255: LD_INT 1
37257: PPUSH
37258: LD_VAR 0 9
37262: PPUSH
37263: CALL_OW 12
37267: ARRAY
37268: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
37269: LD_VAR 0 2
37273: PPUSH
37274: LD_VAR 0 3
37278: PPUSH
37279: CALL 37528 0 2
37283: NOT
37284: IFFALSE 37343
// repeat engine := _engine [ 1 ] ;
37286: LD_ADDR_VAR 0 3
37290: PUSH
37291: LD_VAR 0 11
37295: PUSH
37296: LD_INT 1
37298: ARRAY
37299: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
37300: LD_ADDR_VAR 0 11
37304: PUSH
37305: LD_VAR 0 11
37309: PPUSH
37310: LD_INT 1
37312: PPUSH
37313: CALL_OW 3
37317: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
37318: LD_VAR 0 2
37322: PPUSH
37323: LD_VAR 0 3
37327: PPUSH
37328: CALL 37528 0 2
37332: PUSH
37333: LD_VAR 0 11
37337: PUSH
37338: EMPTY
37339: EQUAL
37340: OR
37341: IFFALSE 37286
// if not control in _control then
37343: LD_VAR 0 4
37347: PUSH
37348: LD_VAR 0 12
37352: IN
37353: NOT
37354: IFFALSE 37380
// control := _control [ rand ( 1 , _control ) ] ;
37356: LD_ADDR_VAR 0 4
37360: PUSH
37361: LD_VAR 0 12
37365: PUSH
37366: LD_INT 1
37368: PPUSH
37369: LD_VAR 0 12
37373: PPUSH
37374: CALL_OW 12
37378: ARRAY
37379: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
37380: LD_VAR 0 2
37384: PPUSH
37385: LD_VAR 0 5
37389: PPUSH
37390: CALL 37748 0 2
37394: NOT
37395: IFFALSE 37454
// repeat weapon := _weapon [ 1 ] ;
37397: LD_ADDR_VAR 0 5
37401: PUSH
37402: LD_VAR 0 10
37406: PUSH
37407: LD_INT 1
37409: ARRAY
37410: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
37411: LD_ADDR_VAR 0 10
37415: PUSH
37416: LD_VAR 0 10
37420: PPUSH
37421: LD_INT 1
37423: PPUSH
37424: CALL_OW 3
37428: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
37429: LD_VAR 0 2
37433: PPUSH
37434: LD_VAR 0 5
37438: PPUSH
37439: CALL 37748 0 2
37443: PUSH
37444: LD_VAR 0 10
37448: PUSH
37449: EMPTY
37450: EQUAL
37451: OR
37452: IFFALSE 37397
// result := [ ] ;
37454: LD_ADDR_VAR 0 6
37458: PUSH
37459: EMPTY
37460: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37461: LD_VAR 0 1
37465: PPUSH
37466: LD_VAR 0 2
37470: PPUSH
37471: LD_VAR 0 3
37475: PPUSH
37476: LD_VAR 0 4
37480: PPUSH
37481: LD_VAR 0 5
37485: PPUSH
37486: CALL_OW 448
37490: IFFALSE 37523
// result := [ chassis , engine , control , weapon ] ;
37492: LD_ADDR_VAR 0 6
37496: PUSH
37497: LD_VAR 0 2
37501: PUSH
37502: LD_VAR 0 3
37506: PUSH
37507: LD_VAR 0 4
37511: PUSH
37512: LD_VAR 0 5
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: ST_TO_ADDR
// end ;
37523: LD_VAR 0 6
37527: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
37528: LD_INT 0
37530: PPUSH
// if not chassis or not engine then
37531: LD_VAR 0 1
37535: NOT
37536: PUSH
37537: LD_VAR 0 2
37541: NOT
37542: OR
37543: IFFALSE 37547
// exit ;
37545: GO 37743
// case engine of engine_solar :
37547: LD_VAR 0 2
37551: PUSH
37552: LD_INT 2
37554: DOUBLE
37555: EQUAL
37556: IFTRUE 37560
37558: GO 37598
37560: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
37561: LD_ADDR_VAR 0 3
37565: PUSH
37566: LD_INT 11
37568: PUSH
37569: LD_INT 12
37571: PUSH
37572: LD_INT 13
37574: PUSH
37575: LD_INT 14
37577: PUSH
37578: LD_INT 1
37580: PUSH
37581: LD_INT 2
37583: PUSH
37584: LD_INT 3
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: ST_TO_ADDR
37596: GO 37727
37598: LD_INT 1
37600: DOUBLE
37601: EQUAL
37602: IFTRUE 37606
37604: GO 37668
37606: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
37607: LD_ADDR_VAR 0 3
37611: PUSH
37612: LD_INT 11
37614: PUSH
37615: LD_INT 12
37617: PUSH
37618: LD_INT 13
37620: PUSH
37621: LD_INT 14
37623: PUSH
37624: LD_INT 1
37626: PUSH
37627: LD_INT 2
37629: PUSH
37630: LD_INT 3
37632: PUSH
37633: LD_INT 4
37635: PUSH
37636: LD_INT 5
37638: PUSH
37639: LD_INT 21
37641: PUSH
37642: LD_INT 23
37644: PUSH
37645: LD_INT 22
37647: PUSH
37648: LD_INT 24
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: ST_TO_ADDR
37666: GO 37727
37668: LD_INT 3
37670: DOUBLE
37671: EQUAL
37672: IFTRUE 37676
37674: GO 37726
37676: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37677: LD_ADDR_VAR 0 3
37681: PUSH
37682: LD_INT 13
37684: PUSH
37685: LD_INT 14
37687: PUSH
37688: LD_INT 2
37690: PUSH
37691: LD_INT 3
37693: PUSH
37694: LD_INT 4
37696: PUSH
37697: LD_INT 5
37699: PUSH
37700: LD_INT 21
37702: PUSH
37703: LD_INT 22
37705: PUSH
37706: LD_INT 23
37708: PUSH
37709: LD_INT 24
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: ST_TO_ADDR
37724: GO 37727
37726: POP
// result := ( chassis in result ) ;
37727: LD_ADDR_VAR 0 3
37731: PUSH
37732: LD_VAR 0 1
37736: PUSH
37737: LD_VAR 0 3
37741: IN
37742: ST_TO_ADDR
// end ;
37743: LD_VAR 0 3
37747: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
37748: LD_INT 0
37750: PPUSH
// if not chassis or not weapon then
37751: LD_VAR 0 1
37755: NOT
37756: PUSH
37757: LD_VAR 0 2
37761: NOT
37762: OR
37763: IFFALSE 37767
// exit ;
37765: GO 38827
// case weapon of us_machine_gun :
37767: LD_VAR 0 2
37771: PUSH
37772: LD_INT 2
37774: DOUBLE
37775: EQUAL
37776: IFTRUE 37780
37778: GO 37810
37780: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
37781: LD_ADDR_VAR 0 3
37785: PUSH
37786: LD_INT 1
37788: PUSH
37789: LD_INT 2
37791: PUSH
37792: LD_INT 3
37794: PUSH
37795: LD_INT 4
37797: PUSH
37798: LD_INT 5
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: ST_TO_ADDR
37808: GO 38811
37810: LD_INT 3
37812: DOUBLE
37813: EQUAL
37814: IFTRUE 37818
37816: GO 37848
37818: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
37819: LD_ADDR_VAR 0 3
37823: PUSH
37824: LD_INT 1
37826: PUSH
37827: LD_INT 2
37829: PUSH
37830: LD_INT 3
37832: PUSH
37833: LD_INT 4
37835: PUSH
37836: LD_INT 5
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: ST_TO_ADDR
37846: GO 38811
37848: LD_INT 11
37850: DOUBLE
37851: EQUAL
37852: IFTRUE 37856
37854: GO 37886
37856: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37857: LD_ADDR_VAR 0 3
37861: PUSH
37862: LD_INT 1
37864: PUSH
37865: LD_INT 2
37867: PUSH
37868: LD_INT 3
37870: PUSH
37871: LD_INT 4
37873: PUSH
37874: LD_INT 5
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: ST_TO_ADDR
37884: GO 38811
37886: LD_INT 4
37888: DOUBLE
37889: EQUAL
37890: IFTRUE 37894
37892: GO 37920
37894: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37895: LD_ADDR_VAR 0 3
37899: PUSH
37900: LD_INT 2
37902: PUSH
37903: LD_INT 3
37905: PUSH
37906: LD_INT 4
37908: PUSH
37909: LD_INT 5
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: ST_TO_ADDR
37918: GO 38811
37920: LD_INT 5
37922: DOUBLE
37923: EQUAL
37924: IFTRUE 37928
37926: GO 37954
37928: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37929: LD_ADDR_VAR 0 3
37933: PUSH
37934: LD_INT 2
37936: PUSH
37937: LD_INT 3
37939: PUSH
37940: LD_INT 4
37942: PUSH
37943: LD_INT 5
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: ST_TO_ADDR
37952: GO 38811
37954: LD_INT 9
37956: DOUBLE
37957: EQUAL
37958: IFTRUE 37962
37960: GO 37988
37962: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37963: LD_ADDR_VAR 0 3
37967: PUSH
37968: LD_INT 2
37970: PUSH
37971: LD_INT 3
37973: PUSH
37974: LD_INT 4
37976: PUSH
37977: LD_INT 5
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: ST_TO_ADDR
37986: GO 38811
37988: LD_INT 7
37990: DOUBLE
37991: EQUAL
37992: IFTRUE 37996
37994: GO 38022
37996: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37997: LD_ADDR_VAR 0 3
38001: PUSH
38002: LD_INT 2
38004: PUSH
38005: LD_INT 3
38007: PUSH
38008: LD_INT 4
38010: PUSH
38011: LD_INT 5
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: ST_TO_ADDR
38020: GO 38811
38022: LD_INT 12
38024: DOUBLE
38025: EQUAL
38026: IFTRUE 38030
38028: GO 38056
38030: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
38031: LD_ADDR_VAR 0 3
38035: PUSH
38036: LD_INT 2
38038: PUSH
38039: LD_INT 3
38041: PUSH
38042: LD_INT 4
38044: PUSH
38045: LD_INT 5
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: ST_TO_ADDR
38054: GO 38811
38056: LD_INT 13
38058: DOUBLE
38059: EQUAL
38060: IFTRUE 38064
38062: GO 38090
38064: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
38065: LD_ADDR_VAR 0 3
38069: PUSH
38070: LD_INT 2
38072: PUSH
38073: LD_INT 3
38075: PUSH
38076: LD_INT 4
38078: PUSH
38079: LD_INT 5
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: ST_TO_ADDR
38088: GO 38811
38090: LD_INT 14
38092: DOUBLE
38093: EQUAL
38094: IFTRUE 38098
38096: GO 38116
38098: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
38099: LD_ADDR_VAR 0 3
38103: PUSH
38104: LD_INT 4
38106: PUSH
38107: LD_INT 5
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: ST_TO_ADDR
38114: GO 38811
38116: LD_INT 6
38118: DOUBLE
38119: EQUAL
38120: IFTRUE 38124
38122: GO 38142
38124: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
38125: LD_ADDR_VAR 0 3
38129: PUSH
38130: LD_INT 4
38132: PUSH
38133: LD_INT 5
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: ST_TO_ADDR
38140: GO 38811
38142: LD_INT 10
38144: DOUBLE
38145: EQUAL
38146: IFTRUE 38150
38148: GO 38168
38150: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
38151: LD_ADDR_VAR 0 3
38155: PUSH
38156: LD_INT 4
38158: PUSH
38159: LD_INT 5
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: ST_TO_ADDR
38166: GO 38811
38168: LD_INT 22
38170: DOUBLE
38171: EQUAL
38172: IFTRUE 38176
38174: GO 38202
38176: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
38177: LD_ADDR_VAR 0 3
38181: PUSH
38182: LD_INT 11
38184: PUSH
38185: LD_INT 12
38187: PUSH
38188: LD_INT 13
38190: PUSH
38191: LD_INT 14
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: ST_TO_ADDR
38200: GO 38811
38202: LD_INT 23
38204: DOUBLE
38205: EQUAL
38206: IFTRUE 38210
38208: GO 38236
38210: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
38211: LD_ADDR_VAR 0 3
38215: PUSH
38216: LD_INT 11
38218: PUSH
38219: LD_INT 12
38221: PUSH
38222: LD_INT 13
38224: PUSH
38225: LD_INT 14
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: ST_TO_ADDR
38234: GO 38811
38236: LD_INT 24
38238: DOUBLE
38239: EQUAL
38240: IFTRUE 38244
38242: GO 38270
38244: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
38245: LD_ADDR_VAR 0 3
38249: PUSH
38250: LD_INT 11
38252: PUSH
38253: LD_INT 12
38255: PUSH
38256: LD_INT 13
38258: PUSH
38259: LD_INT 14
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: ST_TO_ADDR
38268: GO 38811
38270: LD_INT 30
38272: DOUBLE
38273: EQUAL
38274: IFTRUE 38278
38276: GO 38304
38278: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
38279: LD_ADDR_VAR 0 3
38283: PUSH
38284: LD_INT 11
38286: PUSH
38287: LD_INT 12
38289: PUSH
38290: LD_INT 13
38292: PUSH
38293: LD_INT 14
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: ST_TO_ADDR
38302: GO 38811
38304: LD_INT 25
38306: DOUBLE
38307: EQUAL
38308: IFTRUE 38312
38310: GO 38330
38312: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
38313: LD_ADDR_VAR 0 3
38317: PUSH
38318: LD_INT 13
38320: PUSH
38321: LD_INT 14
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: ST_TO_ADDR
38328: GO 38811
38330: LD_INT 27
38332: DOUBLE
38333: EQUAL
38334: IFTRUE 38338
38336: GO 38356
38338: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
38339: LD_ADDR_VAR 0 3
38343: PUSH
38344: LD_INT 13
38346: PUSH
38347: LD_INT 14
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: ST_TO_ADDR
38354: GO 38811
38356: LD_INT 92
38358: DOUBLE
38359: EQUAL
38360: IFTRUE 38364
38362: GO 38390
38364: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
38365: LD_ADDR_VAR 0 3
38369: PUSH
38370: LD_INT 11
38372: PUSH
38373: LD_INT 12
38375: PUSH
38376: LD_INT 13
38378: PUSH
38379: LD_INT 14
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: ST_TO_ADDR
38388: GO 38811
38390: LD_INT 28
38392: DOUBLE
38393: EQUAL
38394: IFTRUE 38398
38396: GO 38416
38398: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
38399: LD_ADDR_VAR 0 3
38403: PUSH
38404: LD_INT 13
38406: PUSH
38407: LD_INT 14
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: ST_TO_ADDR
38414: GO 38811
38416: LD_INT 29
38418: DOUBLE
38419: EQUAL
38420: IFTRUE 38424
38422: GO 38442
38424: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
38425: LD_ADDR_VAR 0 3
38429: PUSH
38430: LD_INT 13
38432: PUSH
38433: LD_INT 14
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: ST_TO_ADDR
38440: GO 38811
38442: LD_INT 31
38444: DOUBLE
38445: EQUAL
38446: IFTRUE 38450
38448: GO 38468
38450: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
38451: LD_ADDR_VAR 0 3
38455: PUSH
38456: LD_INT 13
38458: PUSH
38459: LD_INT 14
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: ST_TO_ADDR
38466: GO 38811
38468: LD_INT 26
38470: DOUBLE
38471: EQUAL
38472: IFTRUE 38476
38474: GO 38494
38476: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
38477: LD_ADDR_VAR 0 3
38481: PUSH
38482: LD_INT 13
38484: PUSH
38485: LD_INT 14
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: ST_TO_ADDR
38492: GO 38811
38494: LD_INT 42
38496: DOUBLE
38497: EQUAL
38498: IFTRUE 38502
38500: GO 38528
38502: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
38503: LD_ADDR_VAR 0 3
38507: PUSH
38508: LD_INT 21
38510: PUSH
38511: LD_INT 22
38513: PUSH
38514: LD_INT 23
38516: PUSH
38517: LD_INT 24
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: ST_TO_ADDR
38526: GO 38811
38528: LD_INT 43
38530: DOUBLE
38531: EQUAL
38532: IFTRUE 38536
38534: GO 38562
38536: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
38537: LD_ADDR_VAR 0 3
38541: PUSH
38542: LD_INT 21
38544: PUSH
38545: LD_INT 22
38547: PUSH
38548: LD_INT 23
38550: PUSH
38551: LD_INT 24
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: ST_TO_ADDR
38560: GO 38811
38562: LD_INT 44
38564: DOUBLE
38565: EQUAL
38566: IFTRUE 38570
38568: GO 38596
38570: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
38571: LD_ADDR_VAR 0 3
38575: PUSH
38576: LD_INT 21
38578: PUSH
38579: LD_INT 22
38581: PUSH
38582: LD_INT 23
38584: PUSH
38585: LD_INT 24
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: ST_TO_ADDR
38594: GO 38811
38596: LD_INT 45
38598: DOUBLE
38599: EQUAL
38600: IFTRUE 38604
38602: GO 38630
38604: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
38605: LD_ADDR_VAR 0 3
38609: PUSH
38610: LD_INT 21
38612: PUSH
38613: LD_INT 22
38615: PUSH
38616: LD_INT 23
38618: PUSH
38619: LD_INT 24
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: ST_TO_ADDR
38628: GO 38811
38630: LD_INT 49
38632: DOUBLE
38633: EQUAL
38634: IFTRUE 38638
38636: GO 38664
38638: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
38639: LD_ADDR_VAR 0 3
38643: PUSH
38644: LD_INT 21
38646: PUSH
38647: LD_INT 22
38649: PUSH
38650: LD_INT 23
38652: PUSH
38653: LD_INT 24
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: ST_TO_ADDR
38662: GO 38811
38664: LD_INT 51
38666: DOUBLE
38667: EQUAL
38668: IFTRUE 38672
38670: GO 38698
38672: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
38673: LD_ADDR_VAR 0 3
38677: PUSH
38678: LD_INT 21
38680: PUSH
38681: LD_INT 22
38683: PUSH
38684: LD_INT 23
38686: PUSH
38687: LD_INT 24
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: ST_TO_ADDR
38696: GO 38811
38698: LD_INT 52
38700: DOUBLE
38701: EQUAL
38702: IFTRUE 38706
38704: GO 38732
38706: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
38707: LD_ADDR_VAR 0 3
38711: PUSH
38712: LD_INT 21
38714: PUSH
38715: LD_INT 22
38717: PUSH
38718: LD_INT 23
38720: PUSH
38721: LD_INT 24
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: ST_TO_ADDR
38730: GO 38811
38732: LD_INT 53
38734: DOUBLE
38735: EQUAL
38736: IFTRUE 38740
38738: GO 38758
38740: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
38741: LD_ADDR_VAR 0 3
38745: PUSH
38746: LD_INT 23
38748: PUSH
38749: LD_INT 24
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: ST_TO_ADDR
38756: GO 38811
38758: LD_INT 46
38760: DOUBLE
38761: EQUAL
38762: IFTRUE 38766
38764: GO 38784
38766: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
38767: LD_ADDR_VAR 0 3
38771: PUSH
38772: LD_INT 23
38774: PUSH
38775: LD_INT 24
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: ST_TO_ADDR
38782: GO 38811
38784: LD_INT 47
38786: DOUBLE
38787: EQUAL
38788: IFTRUE 38792
38790: GO 38810
38792: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38793: LD_ADDR_VAR 0 3
38797: PUSH
38798: LD_INT 23
38800: PUSH
38801: LD_INT 24
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: ST_TO_ADDR
38808: GO 38811
38810: POP
// result := ( chassis in result ) ;
38811: LD_ADDR_VAR 0 3
38815: PUSH
38816: LD_VAR 0 1
38820: PUSH
38821: LD_VAR 0 3
38825: IN
38826: ST_TO_ADDR
// end ;
38827: LD_VAR 0 3
38831: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
38832: LD_INT 0
38834: PPUSH
38835: PPUSH
38836: PPUSH
38837: PPUSH
38838: PPUSH
38839: PPUSH
38840: PPUSH
// result := array ;
38841: LD_ADDR_VAR 0 5
38845: PUSH
38846: LD_VAR 0 1
38850: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38851: LD_VAR 0 1
38855: NOT
38856: PUSH
38857: LD_VAR 0 2
38861: NOT
38862: OR
38863: PUSH
38864: LD_VAR 0 3
38868: NOT
38869: OR
38870: PUSH
38871: LD_VAR 0 2
38875: PUSH
38876: LD_VAR 0 1
38880: GREATER
38881: OR
38882: PUSH
38883: LD_VAR 0 3
38887: PUSH
38888: LD_VAR 0 1
38892: GREATER
38893: OR
38894: IFFALSE 38898
// exit ;
38896: GO 39194
// if direction then
38898: LD_VAR 0 4
38902: IFFALSE 38966
// begin d := 1 ;
38904: LD_ADDR_VAR 0 9
38908: PUSH
38909: LD_INT 1
38911: ST_TO_ADDR
// if i_from > i_to then
38912: LD_VAR 0 2
38916: PUSH
38917: LD_VAR 0 3
38921: GREATER
38922: IFFALSE 38948
// length := ( array - i_from ) + i_to else
38924: LD_ADDR_VAR 0 11
38928: PUSH
38929: LD_VAR 0 1
38933: PUSH
38934: LD_VAR 0 2
38938: MINUS
38939: PUSH
38940: LD_VAR 0 3
38944: PLUS
38945: ST_TO_ADDR
38946: GO 38964
// length := i_to - i_from ;
38948: LD_ADDR_VAR 0 11
38952: PUSH
38953: LD_VAR 0 3
38957: PUSH
38958: LD_VAR 0 2
38962: MINUS
38963: ST_TO_ADDR
// end else
38964: GO 39027
// begin d := - 1 ;
38966: LD_ADDR_VAR 0 9
38970: PUSH
38971: LD_INT 1
38973: NEG
38974: ST_TO_ADDR
// if i_from > i_to then
38975: LD_VAR 0 2
38979: PUSH
38980: LD_VAR 0 3
38984: GREATER
38985: IFFALSE 39005
// length := i_from - i_to else
38987: LD_ADDR_VAR 0 11
38991: PUSH
38992: LD_VAR 0 2
38996: PUSH
38997: LD_VAR 0 3
39001: MINUS
39002: ST_TO_ADDR
39003: GO 39027
// length := ( array - i_to ) + i_from ;
39005: LD_ADDR_VAR 0 11
39009: PUSH
39010: LD_VAR 0 1
39014: PUSH
39015: LD_VAR 0 3
39019: MINUS
39020: PUSH
39021: LD_VAR 0 2
39025: PLUS
39026: ST_TO_ADDR
// end ; if not length then
39027: LD_VAR 0 11
39031: NOT
39032: IFFALSE 39036
// exit ;
39034: GO 39194
// tmp := array ;
39036: LD_ADDR_VAR 0 10
39040: PUSH
39041: LD_VAR 0 1
39045: ST_TO_ADDR
// for i = 1 to length do
39046: LD_ADDR_VAR 0 6
39050: PUSH
39051: DOUBLE
39052: LD_INT 1
39054: DEC
39055: ST_TO_ADDR
39056: LD_VAR 0 11
39060: PUSH
39061: FOR_TO
39062: IFFALSE 39182
// begin for j = 1 to array do
39064: LD_ADDR_VAR 0 7
39068: PUSH
39069: DOUBLE
39070: LD_INT 1
39072: DEC
39073: ST_TO_ADDR
39074: LD_VAR 0 1
39078: PUSH
39079: FOR_TO
39080: IFFALSE 39168
// begin k := j + d ;
39082: LD_ADDR_VAR 0 8
39086: PUSH
39087: LD_VAR 0 7
39091: PUSH
39092: LD_VAR 0 9
39096: PLUS
39097: ST_TO_ADDR
// if k > array then
39098: LD_VAR 0 8
39102: PUSH
39103: LD_VAR 0 1
39107: GREATER
39108: IFFALSE 39118
// k := 1 ;
39110: LD_ADDR_VAR 0 8
39114: PUSH
39115: LD_INT 1
39117: ST_TO_ADDR
// if not k then
39118: LD_VAR 0 8
39122: NOT
39123: IFFALSE 39135
// k := array ;
39125: LD_ADDR_VAR 0 8
39129: PUSH
39130: LD_VAR 0 1
39134: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
39135: LD_ADDR_VAR 0 10
39139: PUSH
39140: LD_VAR 0 10
39144: PPUSH
39145: LD_VAR 0 8
39149: PPUSH
39150: LD_VAR 0 1
39154: PUSH
39155: LD_VAR 0 7
39159: ARRAY
39160: PPUSH
39161: CALL_OW 1
39165: ST_TO_ADDR
// end ;
39166: GO 39079
39168: POP
39169: POP
// array := tmp ;
39170: LD_ADDR_VAR 0 1
39174: PUSH
39175: LD_VAR 0 10
39179: ST_TO_ADDR
// end ;
39180: GO 39061
39182: POP
39183: POP
// result := array ;
39184: LD_ADDR_VAR 0 5
39188: PUSH
39189: LD_VAR 0 1
39193: ST_TO_ADDR
// end ;
39194: LD_VAR 0 5
39198: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
39199: LD_INT 0
39201: PPUSH
39202: PPUSH
// result := 0 ;
39203: LD_ADDR_VAR 0 3
39207: PUSH
39208: LD_INT 0
39210: ST_TO_ADDR
// if not array or not value in array then
39211: LD_VAR 0 1
39215: NOT
39216: PUSH
39217: LD_VAR 0 2
39221: PUSH
39222: LD_VAR 0 1
39226: IN
39227: NOT
39228: OR
39229: IFFALSE 39233
// exit ;
39231: GO 39287
// for i = 1 to array do
39233: LD_ADDR_VAR 0 4
39237: PUSH
39238: DOUBLE
39239: LD_INT 1
39241: DEC
39242: ST_TO_ADDR
39243: LD_VAR 0 1
39247: PUSH
39248: FOR_TO
39249: IFFALSE 39285
// if value = array [ i ] then
39251: LD_VAR 0 2
39255: PUSH
39256: LD_VAR 0 1
39260: PUSH
39261: LD_VAR 0 4
39265: ARRAY
39266: EQUAL
39267: IFFALSE 39283
// begin result := i ;
39269: LD_ADDR_VAR 0 3
39273: PUSH
39274: LD_VAR 0 4
39278: ST_TO_ADDR
// exit ;
39279: POP
39280: POP
39281: GO 39287
// end ;
39283: GO 39248
39285: POP
39286: POP
// end ;
39287: LD_VAR 0 3
39291: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
39292: LD_INT 0
39294: PPUSH
// vc_chassis := chassis ;
39295: LD_ADDR_OWVAR 37
39299: PUSH
39300: LD_VAR 0 1
39304: ST_TO_ADDR
// vc_engine := engine ;
39305: LD_ADDR_OWVAR 39
39309: PUSH
39310: LD_VAR 0 2
39314: ST_TO_ADDR
// vc_control := control ;
39315: LD_ADDR_OWVAR 38
39319: PUSH
39320: LD_VAR 0 3
39324: ST_TO_ADDR
// vc_weapon := weapon ;
39325: LD_ADDR_OWVAR 40
39329: PUSH
39330: LD_VAR 0 4
39334: ST_TO_ADDR
// vc_fuel_battery := fuel ;
39335: LD_ADDR_OWVAR 41
39339: PUSH
39340: LD_VAR 0 5
39344: ST_TO_ADDR
// end ;
39345: LD_VAR 0 6
39349: RET
// export function WantPlant ( unit ) ; var task ; begin
39350: LD_INT 0
39352: PPUSH
39353: PPUSH
// result := false ;
39354: LD_ADDR_VAR 0 2
39358: PUSH
39359: LD_INT 0
39361: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
39362: LD_ADDR_VAR 0 3
39366: PUSH
39367: LD_VAR 0 1
39371: PPUSH
39372: CALL_OW 437
39376: ST_TO_ADDR
// if task then
39377: LD_VAR 0 3
39381: IFFALSE 39409
// if task [ 1 ] [ 1 ] = p then
39383: LD_VAR 0 3
39387: PUSH
39388: LD_INT 1
39390: ARRAY
39391: PUSH
39392: LD_INT 1
39394: ARRAY
39395: PUSH
39396: LD_STRING p
39398: EQUAL
39399: IFFALSE 39409
// result := true ;
39401: LD_ADDR_VAR 0 2
39405: PUSH
39406: LD_INT 1
39408: ST_TO_ADDR
// end ;
39409: LD_VAR 0 2
39413: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
39414: LD_INT 0
39416: PPUSH
39417: PPUSH
39418: PPUSH
39419: PPUSH
// if pos < 1 then
39420: LD_VAR 0 2
39424: PUSH
39425: LD_INT 1
39427: LESS
39428: IFFALSE 39432
// exit ;
39430: GO 39735
// if pos = 1 then
39432: LD_VAR 0 2
39436: PUSH
39437: LD_INT 1
39439: EQUAL
39440: IFFALSE 39473
// result := Replace ( arr , pos [ 1 ] , value ) else
39442: LD_ADDR_VAR 0 4
39446: PUSH
39447: LD_VAR 0 1
39451: PPUSH
39452: LD_VAR 0 2
39456: PUSH
39457: LD_INT 1
39459: ARRAY
39460: PPUSH
39461: LD_VAR 0 3
39465: PPUSH
39466: CALL_OW 1
39470: ST_TO_ADDR
39471: GO 39735
// begin tmp := arr ;
39473: LD_ADDR_VAR 0 6
39477: PUSH
39478: LD_VAR 0 1
39482: ST_TO_ADDR
// s_arr := [ tmp ] ;
39483: LD_ADDR_VAR 0 7
39487: PUSH
39488: LD_VAR 0 6
39492: PUSH
39493: EMPTY
39494: LIST
39495: ST_TO_ADDR
// for i = 1 to pos - 1 do
39496: LD_ADDR_VAR 0 5
39500: PUSH
39501: DOUBLE
39502: LD_INT 1
39504: DEC
39505: ST_TO_ADDR
39506: LD_VAR 0 2
39510: PUSH
39511: LD_INT 1
39513: MINUS
39514: PUSH
39515: FOR_TO
39516: IFFALSE 39561
// begin tmp := tmp [ pos [ i ] ] ;
39518: LD_ADDR_VAR 0 6
39522: PUSH
39523: LD_VAR 0 6
39527: PUSH
39528: LD_VAR 0 2
39532: PUSH
39533: LD_VAR 0 5
39537: ARRAY
39538: ARRAY
39539: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
39540: LD_ADDR_VAR 0 7
39544: PUSH
39545: LD_VAR 0 7
39549: PUSH
39550: LD_VAR 0 6
39554: PUSH
39555: EMPTY
39556: LIST
39557: ADD
39558: ST_TO_ADDR
// end ;
39559: GO 39515
39561: POP
39562: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
39563: LD_ADDR_VAR 0 6
39567: PUSH
39568: LD_VAR 0 6
39572: PPUSH
39573: LD_VAR 0 2
39577: PUSH
39578: LD_VAR 0 2
39582: ARRAY
39583: PPUSH
39584: LD_VAR 0 3
39588: PPUSH
39589: CALL_OW 1
39593: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
39594: LD_ADDR_VAR 0 7
39598: PUSH
39599: LD_VAR 0 7
39603: PPUSH
39604: LD_VAR 0 7
39608: PPUSH
39609: LD_VAR 0 6
39613: PPUSH
39614: CALL_OW 1
39618: ST_TO_ADDR
// for i = s_arr downto 2 do
39619: LD_ADDR_VAR 0 5
39623: PUSH
39624: DOUBLE
39625: LD_VAR 0 7
39629: INC
39630: ST_TO_ADDR
39631: LD_INT 2
39633: PUSH
39634: FOR_DOWNTO
39635: IFFALSE 39719
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
39637: LD_ADDR_VAR 0 6
39641: PUSH
39642: LD_VAR 0 7
39646: PUSH
39647: LD_VAR 0 5
39651: PUSH
39652: LD_INT 1
39654: MINUS
39655: ARRAY
39656: PPUSH
39657: LD_VAR 0 2
39661: PUSH
39662: LD_VAR 0 5
39666: PUSH
39667: LD_INT 1
39669: MINUS
39670: ARRAY
39671: PPUSH
39672: LD_VAR 0 7
39676: PUSH
39677: LD_VAR 0 5
39681: ARRAY
39682: PPUSH
39683: CALL_OW 1
39687: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
39688: LD_ADDR_VAR 0 7
39692: PUSH
39693: LD_VAR 0 7
39697: PPUSH
39698: LD_VAR 0 5
39702: PUSH
39703: LD_INT 1
39705: MINUS
39706: PPUSH
39707: LD_VAR 0 6
39711: PPUSH
39712: CALL_OW 1
39716: ST_TO_ADDR
// end ;
39717: GO 39634
39719: POP
39720: POP
// result := s_arr [ 1 ] ;
39721: LD_ADDR_VAR 0 4
39725: PUSH
39726: LD_VAR 0 7
39730: PUSH
39731: LD_INT 1
39733: ARRAY
39734: ST_TO_ADDR
// end ; end ;
39735: LD_VAR 0 4
39739: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
39740: LD_INT 0
39742: PPUSH
39743: PPUSH
// if not list then
39744: LD_VAR 0 1
39748: NOT
39749: IFFALSE 39753
// exit ;
39751: GO 39844
// i := list [ pos1 ] ;
39753: LD_ADDR_VAR 0 5
39757: PUSH
39758: LD_VAR 0 1
39762: PUSH
39763: LD_VAR 0 2
39767: ARRAY
39768: ST_TO_ADDR
// if not i then
39769: LD_VAR 0 5
39773: NOT
39774: IFFALSE 39778
// exit ;
39776: GO 39844
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39778: LD_ADDR_VAR 0 1
39782: PUSH
39783: LD_VAR 0 1
39787: PPUSH
39788: LD_VAR 0 2
39792: PPUSH
39793: LD_VAR 0 1
39797: PUSH
39798: LD_VAR 0 3
39802: ARRAY
39803: PPUSH
39804: CALL_OW 1
39808: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
39809: LD_ADDR_VAR 0 1
39813: PUSH
39814: LD_VAR 0 1
39818: PPUSH
39819: LD_VAR 0 3
39823: PPUSH
39824: LD_VAR 0 5
39828: PPUSH
39829: CALL_OW 1
39833: ST_TO_ADDR
// result := list ;
39834: LD_ADDR_VAR 0 4
39838: PUSH
39839: LD_VAR 0 1
39843: ST_TO_ADDR
// end ;
39844: LD_VAR 0 4
39848: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39849: LD_INT 0
39851: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39852: LD_ADDR_VAR 0 5
39856: PUSH
39857: LD_VAR 0 1
39861: PPUSH
39862: CALL_OW 250
39866: PPUSH
39867: LD_VAR 0 1
39871: PPUSH
39872: CALL_OW 251
39876: PPUSH
39877: LD_VAR 0 2
39881: PPUSH
39882: LD_VAR 0 3
39886: PPUSH
39887: LD_VAR 0 4
39891: PPUSH
39892: CALL 39902 0 5
39896: ST_TO_ADDR
// end ;
39897: LD_VAR 0 5
39901: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39902: LD_INT 0
39904: PPUSH
39905: PPUSH
39906: PPUSH
39907: PPUSH
// if not list then
39908: LD_VAR 0 3
39912: NOT
39913: IFFALSE 39917
// exit ;
39915: GO 40305
// result := [ ] ;
39917: LD_ADDR_VAR 0 6
39921: PUSH
39922: EMPTY
39923: ST_TO_ADDR
// for i in list do
39924: LD_ADDR_VAR 0 7
39928: PUSH
39929: LD_VAR 0 3
39933: PUSH
39934: FOR_IN
39935: IFFALSE 40137
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39937: LD_ADDR_VAR 0 9
39941: PUSH
39942: LD_VAR 0 7
39946: PPUSH
39947: LD_VAR 0 1
39951: PPUSH
39952: LD_VAR 0 2
39956: PPUSH
39957: CALL_OW 297
39961: ST_TO_ADDR
// if not result then
39962: LD_VAR 0 6
39966: NOT
39967: IFFALSE 39993
// result := [ [ i , tmp ] ] else
39969: LD_ADDR_VAR 0 6
39973: PUSH
39974: LD_VAR 0 7
39978: PUSH
39979: LD_VAR 0 9
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: EMPTY
39989: LIST
39990: ST_TO_ADDR
39991: GO 40135
// begin if result [ result ] [ 2 ] < tmp then
39993: LD_VAR 0 6
39997: PUSH
39998: LD_VAR 0 6
40002: ARRAY
40003: PUSH
40004: LD_INT 2
40006: ARRAY
40007: PUSH
40008: LD_VAR 0 9
40012: LESS
40013: IFFALSE 40055
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
40015: LD_ADDR_VAR 0 6
40019: PUSH
40020: LD_VAR 0 6
40024: PPUSH
40025: LD_VAR 0 6
40029: PUSH
40030: LD_INT 1
40032: PLUS
40033: PPUSH
40034: LD_VAR 0 7
40038: PUSH
40039: LD_VAR 0 9
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PPUSH
40048: CALL_OW 2
40052: ST_TO_ADDR
40053: GO 40135
// for j = 1 to result do
40055: LD_ADDR_VAR 0 8
40059: PUSH
40060: DOUBLE
40061: LD_INT 1
40063: DEC
40064: ST_TO_ADDR
40065: LD_VAR 0 6
40069: PUSH
40070: FOR_TO
40071: IFFALSE 40133
// begin if tmp < result [ j ] [ 2 ] then
40073: LD_VAR 0 9
40077: PUSH
40078: LD_VAR 0 6
40082: PUSH
40083: LD_VAR 0 8
40087: ARRAY
40088: PUSH
40089: LD_INT 2
40091: ARRAY
40092: LESS
40093: IFFALSE 40131
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40095: LD_ADDR_VAR 0 6
40099: PUSH
40100: LD_VAR 0 6
40104: PPUSH
40105: LD_VAR 0 8
40109: PPUSH
40110: LD_VAR 0 7
40114: PUSH
40115: LD_VAR 0 9
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PPUSH
40124: CALL_OW 2
40128: ST_TO_ADDR
// break ;
40129: GO 40133
// end ; end ;
40131: GO 40070
40133: POP
40134: POP
// end ; end ;
40135: GO 39934
40137: POP
40138: POP
// if result and not asc then
40139: LD_VAR 0 6
40143: PUSH
40144: LD_VAR 0 4
40148: NOT
40149: AND
40150: IFFALSE 40225
// begin tmp := result ;
40152: LD_ADDR_VAR 0 9
40156: PUSH
40157: LD_VAR 0 6
40161: ST_TO_ADDR
// for i = tmp downto 1 do
40162: LD_ADDR_VAR 0 7
40166: PUSH
40167: DOUBLE
40168: LD_VAR 0 9
40172: INC
40173: ST_TO_ADDR
40174: LD_INT 1
40176: PUSH
40177: FOR_DOWNTO
40178: IFFALSE 40223
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
40180: LD_ADDR_VAR 0 6
40184: PUSH
40185: LD_VAR 0 6
40189: PPUSH
40190: LD_VAR 0 9
40194: PUSH
40195: LD_VAR 0 7
40199: MINUS
40200: PUSH
40201: LD_INT 1
40203: PLUS
40204: PPUSH
40205: LD_VAR 0 9
40209: PUSH
40210: LD_VAR 0 7
40214: ARRAY
40215: PPUSH
40216: CALL_OW 1
40220: ST_TO_ADDR
40221: GO 40177
40223: POP
40224: POP
// end ; tmp := [ ] ;
40225: LD_ADDR_VAR 0 9
40229: PUSH
40230: EMPTY
40231: ST_TO_ADDR
// if mode then
40232: LD_VAR 0 5
40236: IFFALSE 40305
// begin for i = 1 to result do
40238: LD_ADDR_VAR 0 7
40242: PUSH
40243: DOUBLE
40244: LD_INT 1
40246: DEC
40247: ST_TO_ADDR
40248: LD_VAR 0 6
40252: PUSH
40253: FOR_TO
40254: IFFALSE 40293
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
40256: LD_ADDR_VAR 0 9
40260: PUSH
40261: LD_VAR 0 9
40265: PPUSH
40266: LD_VAR 0 7
40270: PPUSH
40271: LD_VAR 0 6
40275: PUSH
40276: LD_VAR 0 7
40280: ARRAY
40281: PUSH
40282: LD_INT 1
40284: ARRAY
40285: PPUSH
40286: CALL_OW 1
40290: ST_TO_ADDR
40291: GO 40253
40293: POP
40294: POP
// result := tmp ;
40295: LD_ADDR_VAR 0 6
40299: PUSH
40300: LD_VAR 0 9
40304: ST_TO_ADDR
// end ; end ;
40305: LD_VAR 0 6
40309: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40310: LD_INT 0
40312: PPUSH
40313: PPUSH
40314: PPUSH
40315: PPUSH
40316: PPUSH
40317: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40318: LD_ADDR_VAR 0 5
40322: PUSH
40323: LD_INT 0
40325: PUSH
40326: LD_INT 0
40328: PUSH
40329: LD_INT 0
40331: PUSH
40332: EMPTY
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: ST_TO_ADDR
// if not x or not y then
40340: LD_VAR 0 2
40344: NOT
40345: PUSH
40346: LD_VAR 0 3
40350: NOT
40351: OR
40352: IFFALSE 40356
// exit ;
40354: GO 42006
// if not range then
40356: LD_VAR 0 4
40360: NOT
40361: IFFALSE 40371
// range := 10 ;
40363: LD_ADDR_VAR 0 4
40367: PUSH
40368: LD_INT 10
40370: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40371: LD_ADDR_VAR 0 8
40375: PUSH
40376: LD_INT 81
40378: PUSH
40379: LD_VAR 0 1
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 92
40390: PUSH
40391: LD_VAR 0 2
40395: PUSH
40396: LD_VAR 0 3
40400: PUSH
40401: LD_VAR 0 4
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 3
40414: PUSH
40415: LD_INT 21
40417: PUSH
40418: LD_INT 3
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: LIST
40433: PPUSH
40434: CALL_OW 69
40438: ST_TO_ADDR
// if not tmp then
40439: LD_VAR 0 8
40443: NOT
40444: IFFALSE 40448
// exit ;
40446: GO 42006
// for i in tmp do
40448: LD_ADDR_VAR 0 6
40452: PUSH
40453: LD_VAR 0 8
40457: PUSH
40458: FOR_IN
40459: IFFALSE 41981
// begin points := [ 0 , 0 , 0 ] ;
40461: LD_ADDR_VAR 0 9
40465: PUSH
40466: LD_INT 0
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: LD_INT 0
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: LIST
40479: ST_TO_ADDR
// bpoints := 1 ;
40480: LD_ADDR_VAR 0 10
40484: PUSH
40485: LD_INT 1
40487: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40488: LD_VAR 0 6
40492: PPUSH
40493: CALL_OW 247
40497: PUSH
40498: LD_INT 1
40500: DOUBLE
40501: EQUAL
40502: IFTRUE 40506
40504: GO 41084
40506: POP
// begin if GetClass ( i ) = 1 then
40507: LD_VAR 0 6
40511: PPUSH
40512: CALL_OW 257
40516: PUSH
40517: LD_INT 1
40519: EQUAL
40520: IFFALSE 40541
// points := [ 10 , 5 , 3 ] ;
40522: LD_ADDR_VAR 0 9
40526: PUSH
40527: LD_INT 10
40529: PUSH
40530: LD_INT 5
40532: PUSH
40533: LD_INT 3
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: LIST
40540: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40541: LD_VAR 0 6
40545: PPUSH
40546: CALL_OW 257
40550: PUSH
40551: LD_INT 2
40553: PUSH
40554: LD_INT 3
40556: PUSH
40557: LD_INT 4
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: LIST
40564: IN
40565: IFFALSE 40586
// points := [ 3 , 2 , 1 ] ;
40567: LD_ADDR_VAR 0 9
40571: PUSH
40572: LD_INT 3
40574: PUSH
40575: LD_INT 2
40577: PUSH
40578: LD_INT 1
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: LIST
40585: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40586: LD_VAR 0 6
40590: PPUSH
40591: CALL_OW 257
40595: PUSH
40596: LD_INT 5
40598: EQUAL
40599: IFFALSE 40620
// points := [ 130 , 5 , 2 ] ;
40601: LD_ADDR_VAR 0 9
40605: PUSH
40606: LD_INT 130
40608: PUSH
40609: LD_INT 5
40611: PUSH
40612: LD_INT 2
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: LIST
40619: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40620: LD_VAR 0 6
40624: PPUSH
40625: CALL_OW 257
40629: PUSH
40630: LD_INT 8
40632: EQUAL
40633: IFFALSE 40654
// points := [ 35 , 35 , 30 ] ;
40635: LD_ADDR_VAR 0 9
40639: PUSH
40640: LD_INT 35
40642: PUSH
40643: LD_INT 35
40645: PUSH
40646: LD_INT 30
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: LIST
40653: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40654: LD_VAR 0 6
40658: PPUSH
40659: CALL_OW 257
40663: PUSH
40664: LD_INT 9
40666: EQUAL
40667: IFFALSE 40688
// points := [ 20 , 55 , 40 ] ;
40669: LD_ADDR_VAR 0 9
40673: PUSH
40674: LD_INT 20
40676: PUSH
40677: LD_INT 55
40679: PUSH
40680: LD_INT 40
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: LIST
40687: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40688: LD_VAR 0 6
40692: PPUSH
40693: CALL_OW 257
40697: PUSH
40698: LD_INT 12
40700: PUSH
40701: LD_INT 16
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: IN
40708: IFFALSE 40729
// points := [ 5 , 3 , 2 ] ;
40710: LD_ADDR_VAR 0 9
40714: PUSH
40715: LD_INT 5
40717: PUSH
40718: LD_INT 3
40720: PUSH
40721: LD_INT 2
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: LIST
40728: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40729: LD_VAR 0 6
40733: PPUSH
40734: CALL_OW 257
40738: PUSH
40739: LD_INT 17
40741: EQUAL
40742: IFFALSE 40763
// points := [ 100 , 50 , 75 ] ;
40744: LD_ADDR_VAR 0 9
40748: PUSH
40749: LD_INT 100
40751: PUSH
40752: LD_INT 50
40754: PUSH
40755: LD_INT 75
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: LIST
40762: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40763: LD_VAR 0 6
40767: PPUSH
40768: CALL_OW 257
40772: PUSH
40773: LD_INT 15
40775: EQUAL
40776: IFFALSE 40797
// points := [ 10 , 5 , 3 ] ;
40778: LD_ADDR_VAR 0 9
40782: PUSH
40783: LD_INT 10
40785: PUSH
40786: LD_INT 5
40788: PUSH
40789: LD_INT 3
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: LIST
40796: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40797: LD_VAR 0 6
40801: PPUSH
40802: CALL_OW 257
40806: PUSH
40807: LD_INT 14
40809: EQUAL
40810: IFFALSE 40831
// points := [ 10 , 0 , 0 ] ;
40812: LD_ADDR_VAR 0 9
40816: PUSH
40817: LD_INT 10
40819: PUSH
40820: LD_INT 0
40822: PUSH
40823: LD_INT 0
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: LIST
40830: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40831: LD_VAR 0 6
40835: PPUSH
40836: CALL_OW 257
40840: PUSH
40841: LD_INT 11
40843: EQUAL
40844: IFFALSE 40865
// points := [ 30 , 10 , 5 ] ;
40846: LD_ADDR_VAR 0 9
40850: PUSH
40851: LD_INT 30
40853: PUSH
40854: LD_INT 10
40856: PUSH
40857: LD_INT 5
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: LIST
40864: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40865: LD_VAR 0 1
40869: PPUSH
40870: LD_INT 5
40872: PPUSH
40873: CALL_OW 321
40877: PUSH
40878: LD_INT 2
40880: EQUAL
40881: IFFALSE 40898
// bpoints := bpoints * 1.8 ;
40883: LD_ADDR_VAR 0 10
40887: PUSH
40888: LD_VAR 0 10
40892: PUSH
40893: LD_REAL  1.80000000000000E+0000
40896: MUL
40897: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40898: LD_VAR 0 6
40902: PPUSH
40903: CALL_OW 257
40907: PUSH
40908: LD_INT 1
40910: PUSH
40911: LD_INT 2
40913: PUSH
40914: LD_INT 3
40916: PUSH
40917: LD_INT 4
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: IN
40926: PUSH
40927: LD_VAR 0 1
40931: PPUSH
40932: LD_INT 51
40934: PPUSH
40935: CALL_OW 321
40939: PUSH
40940: LD_INT 2
40942: EQUAL
40943: AND
40944: IFFALSE 40961
// bpoints := bpoints * 1.2 ;
40946: LD_ADDR_VAR 0 10
40950: PUSH
40951: LD_VAR 0 10
40955: PUSH
40956: LD_REAL  1.20000000000000E+0000
40959: MUL
40960: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40961: LD_VAR 0 6
40965: PPUSH
40966: CALL_OW 257
40970: PUSH
40971: LD_INT 5
40973: PUSH
40974: LD_INT 7
40976: PUSH
40977: LD_INT 9
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: LIST
40984: IN
40985: PUSH
40986: LD_VAR 0 1
40990: PPUSH
40991: LD_INT 52
40993: PPUSH
40994: CALL_OW 321
40998: PUSH
40999: LD_INT 2
41001: EQUAL
41002: AND
41003: IFFALSE 41020
// bpoints := bpoints * 1.5 ;
41005: LD_ADDR_VAR 0 10
41009: PUSH
41010: LD_VAR 0 10
41014: PUSH
41015: LD_REAL  1.50000000000000E+0000
41018: MUL
41019: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
41020: LD_VAR 0 1
41024: PPUSH
41025: LD_INT 66
41027: PPUSH
41028: CALL_OW 321
41032: PUSH
41033: LD_INT 2
41035: EQUAL
41036: IFFALSE 41053
// bpoints := bpoints * 1.1 ;
41038: LD_ADDR_VAR 0 10
41042: PUSH
41043: LD_VAR 0 10
41047: PUSH
41048: LD_REAL  1.10000000000000E+0000
41051: MUL
41052: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
41053: LD_ADDR_VAR 0 10
41057: PUSH
41058: LD_VAR 0 10
41062: PUSH
41063: LD_VAR 0 6
41067: PPUSH
41068: LD_INT 1
41070: PPUSH
41071: CALL_OW 259
41075: PUSH
41076: LD_REAL  1.15000000000000E+0000
41079: MUL
41080: MUL
41081: ST_TO_ADDR
// end ; unit_vehicle :
41082: GO 41910
41084: LD_INT 2
41086: DOUBLE
41087: EQUAL
41088: IFTRUE 41092
41090: GO 41898
41092: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
41093: LD_VAR 0 6
41097: PPUSH
41098: CALL_OW 264
41102: PUSH
41103: LD_INT 2
41105: PUSH
41106: LD_INT 42
41108: PUSH
41109: LD_INT 24
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: LIST
41116: IN
41117: IFFALSE 41138
// points := [ 25 , 5 , 3 ] ;
41119: LD_ADDR_VAR 0 9
41123: PUSH
41124: LD_INT 25
41126: PUSH
41127: LD_INT 5
41129: PUSH
41130: LD_INT 3
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: LIST
41137: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
41138: LD_VAR 0 6
41142: PPUSH
41143: CALL_OW 264
41147: PUSH
41148: LD_INT 4
41150: PUSH
41151: LD_INT 43
41153: PUSH
41154: LD_INT 25
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: LIST
41161: IN
41162: IFFALSE 41183
// points := [ 40 , 15 , 5 ] ;
41164: LD_ADDR_VAR 0 9
41168: PUSH
41169: LD_INT 40
41171: PUSH
41172: LD_INT 15
41174: PUSH
41175: LD_INT 5
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: LIST
41182: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
41183: LD_VAR 0 6
41187: PPUSH
41188: CALL_OW 264
41192: PUSH
41193: LD_INT 3
41195: PUSH
41196: LD_INT 23
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: IN
41203: IFFALSE 41224
// points := [ 7 , 25 , 8 ] ;
41205: LD_ADDR_VAR 0 9
41209: PUSH
41210: LD_INT 7
41212: PUSH
41213: LD_INT 25
41215: PUSH
41216: LD_INT 8
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: LIST
41223: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
41224: LD_VAR 0 6
41228: PPUSH
41229: CALL_OW 264
41233: PUSH
41234: LD_INT 5
41236: PUSH
41237: LD_INT 27
41239: PUSH
41240: LD_INT 44
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: LIST
41247: IN
41248: IFFALSE 41269
// points := [ 14 , 50 , 16 ] ;
41250: LD_ADDR_VAR 0 9
41254: PUSH
41255: LD_INT 14
41257: PUSH
41258: LD_INT 50
41260: PUSH
41261: LD_INT 16
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: LIST
41268: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
41269: LD_VAR 0 6
41273: PPUSH
41274: CALL_OW 264
41278: PUSH
41279: LD_INT 6
41281: PUSH
41282: LD_INT 46
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: IN
41289: IFFALSE 41310
// points := [ 32 , 120 , 70 ] ;
41291: LD_ADDR_VAR 0 9
41295: PUSH
41296: LD_INT 32
41298: PUSH
41299: LD_INT 120
41301: PUSH
41302: LD_INT 70
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: LIST
41309: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
41310: LD_VAR 0 6
41314: PPUSH
41315: CALL_OW 264
41319: PUSH
41320: LD_INT 7
41322: PUSH
41323: LD_INT 28
41325: PUSH
41326: LD_INT 45
41328: PUSH
41329: LD_INT 92
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: IN
41338: IFFALSE 41359
// points := [ 35 , 20 , 45 ] ;
41340: LD_ADDR_VAR 0 9
41344: PUSH
41345: LD_INT 35
41347: PUSH
41348: LD_INT 20
41350: PUSH
41351: LD_INT 45
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: LIST
41358: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
41359: LD_VAR 0 6
41363: PPUSH
41364: CALL_OW 264
41368: PUSH
41369: LD_INT 47
41371: PUSH
41372: EMPTY
41373: LIST
41374: IN
41375: IFFALSE 41396
// points := [ 67 , 45 , 75 ] ;
41377: LD_ADDR_VAR 0 9
41381: PUSH
41382: LD_INT 67
41384: PUSH
41385: LD_INT 45
41387: PUSH
41388: LD_INT 75
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: LIST
41395: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41396: LD_VAR 0 6
41400: PPUSH
41401: CALL_OW 264
41405: PUSH
41406: LD_INT 26
41408: PUSH
41409: EMPTY
41410: LIST
41411: IN
41412: IFFALSE 41433
// points := [ 120 , 30 , 80 ] ;
41414: LD_ADDR_VAR 0 9
41418: PUSH
41419: LD_INT 120
41421: PUSH
41422: LD_INT 30
41424: PUSH
41425: LD_INT 80
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: LIST
41432: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41433: LD_VAR 0 6
41437: PPUSH
41438: CALL_OW 264
41442: PUSH
41443: LD_INT 22
41445: PUSH
41446: EMPTY
41447: LIST
41448: IN
41449: IFFALSE 41470
// points := [ 40 , 1 , 1 ] ;
41451: LD_ADDR_VAR 0 9
41455: PUSH
41456: LD_INT 40
41458: PUSH
41459: LD_INT 1
41461: PUSH
41462: LD_INT 1
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: LIST
41469: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41470: LD_VAR 0 6
41474: PPUSH
41475: CALL_OW 264
41479: PUSH
41480: LD_INT 29
41482: PUSH
41483: EMPTY
41484: LIST
41485: IN
41486: IFFALSE 41507
// points := [ 70 , 200 , 400 ] ;
41488: LD_ADDR_VAR 0 9
41492: PUSH
41493: LD_INT 70
41495: PUSH
41496: LD_INT 200
41498: PUSH
41499: LD_INT 400
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: LIST
41506: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41507: LD_VAR 0 6
41511: PPUSH
41512: CALL_OW 264
41516: PUSH
41517: LD_INT 14
41519: PUSH
41520: LD_INT 53
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: IN
41527: IFFALSE 41548
// points := [ 40 , 10 , 20 ] ;
41529: LD_ADDR_VAR 0 9
41533: PUSH
41534: LD_INT 40
41536: PUSH
41537: LD_INT 10
41539: PUSH
41540: LD_INT 20
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: LIST
41547: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41548: LD_VAR 0 6
41552: PPUSH
41553: CALL_OW 264
41557: PUSH
41558: LD_INT 9
41560: PUSH
41561: EMPTY
41562: LIST
41563: IN
41564: IFFALSE 41585
// points := [ 5 , 70 , 20 ] ;
41566: LD_ADDR_VAR 0 9
41570: PUSH
41571: LD_INT 5
41573: PUSH
41574: LD_INT 70
41576: PUSH
41577: LD_INT 20
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: LIST
41584: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41585: LD_VAR 0 6
41589: PPUSH
41590: CALL_OW 264
41594: PUSH
41595: LD_INT 10
41597: PUSH
41598: EMPTY
41599: LIST
41600: IN
41601: IFFALSE 41622
// points := [ 35 , 110 , 70 ] ;
41603: LD_ADDR_VAR 0 9
41607: PUSH
41608: LD_INT 35
41610: PUSH
41611: LD_INT 110
41613: PUSH
41614: LD_INT 70
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: LIST
41621: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41622: LD_VAR 0 6
41626: PPUSH
41627: CALL_OW 265
41631: PUSH
41632: LD_INT 25
41634: EQUAL
41635: IFFALSE 41656
// points := [ 80 , 65 , 100 ] ;
41637: LD_ADDR_VAR 0 9
41641: PUSH
41642: LD_INT 80
41644: PUSH
41645: LD_INT 65
41647: PUSH
41648: LD_INT 100
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: LIST
41655: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41656: LD_VAR 0 6
41660: PPUSH
41661: CALL_OW 263
41665: PUSH
41666: LD_INT 1
41668: EQUAL
41669: IFFALSE 41704
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41671: LD_ADDR_VAR 0 10
41675: PUSH
41676: LD_VAR 0 10
41680: PUSH
41681: LD_VAR 0 6
41685: PPUSH
41686: CALL_OW 311
41690: PPUSH
41691: LD_INT 3
41693: PPUSH
41694: CALL_OW 259
41698: PUSH
41699: LD_INT 4
41701: MUL
41702: MUL
41703: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41704: LD_VAR 0 6
41708: PPUSH
41709: CALL_OW 263
41713: PUSH
41714: LD_INT 2
41716: EQUAL
41717: IFFALSE 41768
// begin j := IsControledBy ( i ) ;
41719: LD_ADDR_VAR 0 7
41723: PUSH
41724: LD_VAR 0 6
41728: PPUSH
41729: CALL_OW 312
41733: ST_TO_ADDR
// if j then
41734: LD_VAR 0 7
41738: IFFALSE 41768
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41740: LD_ADDR_VAR 0 10
41744: PUSH
41745: LD_VAR 0 10
41749: PUSH
41750: LD_VAR 0 7
41754: PPUSH
41755: LD_INT 3
41757: PPUSH
41758: CALL_OW 259
41762: PUSH
41763: LD_INT 3
41765: MUL
41766: MUL
41767: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41768: LD_VAR 0 6
41772: PPUSH
41773: CALL_OW 264
41777: PUSH
41778: LD_INT 5
41780: PUSH
41781: LD_INT 6
41783: PUSH
41784: LD_INT 46
41786: PUSH
41787: LD_INT 44
41789: PUSH
41790: LD_INT 47
41792: PUSH
41793: LD_INT 45
41795: PUSH
41796: LD_INT 28
41798: PUSH
41799: LD_INT 7
41801: PUSH
41802: LD_INT 27
41804: PUSH
41805: LD_INT 29
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: IN
41820: PUSH
41821: LD_VAR 0 1
41825: PPUSH
41826: LD_INT 52
41828: PPUSH
41829: CALL_OW 321
41833: PUSH
41834: LD_INT 2
41836: EQUAL
41837: AND
41838: IFFALSE 41855
// bpoints := bpoints * 1.2 ;
41840: LD_ADDR_VAR 0 10
41844: PUSH
41845: LD_VAR 0 10
41849: PUSH
41850: LD_REAL  1.20000000000000E+0000
41853: MUL
41854: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41855: LD_VAR 0 6
41859: PPUSH
41860: CALL_OW 264
41864: PUSH
41865: LD_INT 6
41867: PUSH
41868: LD_INT 46
41870: PUSH
41871: LD_INT 47
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: LIST
41878: IN
41879: IFFALSE 41896
// bpoints := bpoints * 1.2 ;
41881: LD_ADDR_VAR 0 10
41885: PUSH
41886: LD_VAR 0 10
41890: PUSH
41891: LD_REAL  1.20000000000000E+0000
41894: MUL
41895: ST_TO_ADDR
// end ; unit_building :
41896: GO 41910
41898: LD_INT 3
41900: DOUBLE
41901: EQUAL
41902: IFTRUE 41906
41904: GO 41909
41906: POP
// ; end ;
41907: GO 41910
41909: POP
// for j = 1 to 3 do
41910: LD_ADDR_VAR 0 7
41914: PUSH
41915: DOUBLE
41916: LD_INT 1
41918: DEC
41919: ST_TO_ADDR
41920: LD_INT 3
41922: PUSH
41923: FOR_TO
41924: IFFALSE 41977
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41926: LD_ADDR_VAR 0 5
41930: PUSH
41931: LD_VAR 0 5
41935: PPUSH
41936: LD_VAR 0 7
41940: PPUSH
41941: LD_VAR 0 5
41945: PUSH
41946: LD_VAR 0 7
41950: ARRAY
41951: PUSH
41952: LD_VAR 0 9
41956: PUSH
41957: LD_VAR 0 7
41961: ARRAY
41962: PUSH
41963: LD_VAR 0 10
41967: MUL
41968: PLUS
41969: PPUSH
41970: CALL_OW 1
41974: ST_TO_ADDR
41975: GO 41923
41977: POP
41978: POP
// end ;
41979: GO 40458
41981: POP
41982: POP
// result := Replace ( result , 4 , tmp ) ;
41983: LD_ADDR_VAR 0 5
41987: PUSH
41988: LD_VAR 0 5
41992: PPUSH
41993: LD_INT 4
41995: PPUSH
41996: LD_VAR 0 8
42000: PPUSH
42001: CALL_OW 1
42005: ST_TO_ADDR
// end ;
42006: LD_VAR 0 5
42010: RET
// export function DangerAtRange ( unit , range ) ; begin
42011: LD_INT 0
42013: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
42014: LD_ADDR_VAR 0 3
42018: PUSH
42019: LD_VAR 0 1
42023: PPUSH
42024: CALL_OW 255
42028: PPUSH
42029: LD_VAR 0 1
42033: PPUSH
42034: CALL_OW 250
42038: PPUSH
42039: LD_VAR 0 1
42043: PPUSH
42044: CALL_OW 251
42048: PPUSH
42049: LD_VAR 0 2
42053: PPUSH
42054: CALL 40310 0 4
42058: ST_TO_ADDR
// end ;
42059: LD_VAR 0 3
42063: RET
// export function DangerInArea ( side , area ) ; begin
42064: LD_INT 0
42066: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
42067: LD_ADDR_VAR 0 3
42071: PUSH
42072: LD_VAR 0 2
42076: PPUSH
42077: LD_INT 81
42079: PUSH
42080: LD_VAR 0 1
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PPUSH
42089: CALL_OW 70
42093: ST_TO_ADDR
// end ;
42094: LD_VAR 0 3
42098: RET
// export function IsExtension ( b ) ; begin
42099: LD_INT 0
42101: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
42102: LD_ADDR_VAR 0 2
42106: PUSH
42107: LD_VAR 0 1
42111: PUSH
42112: LD_INT 23
42114: PUSH
42115: LD_INT 20
42117: PUSH
42118: LD_INT 22
42120: PUSH
42121: LD_INT 17
42123: PUSH
42124: LD_INT 24
42126: PUSH
42127: LD_INT 21
42129: PUSH
42130: LD_INT 19
42132: PUSH
42133: LD_INT 16
42135: PUSH
42136: LD_INT 25
42138: PUSH
42139: LD_INT 18
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: IN
42154: ST_TO_ADDR
// end ;
42155: LD_VAR 0 2
42159: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
42160: LD_INT 0
42162: PPUSH
42163: PPUSH
42164: PPUSH
// result := [ ] ;
42165: LD_ADDR_VAR 0 4
42169: PUSH
42170: EMPTY
42171: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
42172: LD_ADDR_VAR 0 5
42176: PUSH
42177: LD_VAR 0 2
42181: PPUSH
42182: LD_INT 21
42184: PUSH
42185: LD_INT 3
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PPUSH
42192: CALL_OW 70
42196: ST_TO_ADDR
// if not tmp then
42197: LD_VAR 0 5
42201: NOT
42202: IFFALSE 42206
// exit ;
42204: GO 42270
// if checkLink then
42206: LD_VAR 0 3
42210: IFFALSE 42260
// begin for i in tmp do
42212: LD_ADDR_VAR 0 6
42216: PUSH
42217: LD_VAR 0 5
42221: PUSH
42222: FOR_IN
42223: IFFALSE 42258
// if GetBase ( i ) <> base then
42225: LD_VAR 0 6
42229: PPUSH
42230: CALL_OW 274
42234: PUSH
42235: LD_VAR 0 1
42239: NONEQUAL
42240: IFFALSE 42256
// ComLinkToBase ( base , i ) ;
42242: LD_VAR 0 1
42246: PPUSH
42247: LD_VAR 0 6
42251: PPUSH
42252: CALL_OW 169
42256: GO 42222
42258: POP
42259: POP
// end ; result := tmp ;
42260: LD_ADDR_VAR 0 4
42264: PUSH
42265: LD_VAR 0 5
42269: ST_TO_ADDR
// end ;
42270: LD_VAR 0 4
42274: RET
// export function ComComplete ( units , b ) ; var i ; begin
42275: LD_INT 0
42277: PPUSH
42278: PPUSH
// if not units then
42279: LD_VAR 0 1
42283: NOT
42284: IFFALSE 42288
// exit ;
42286: GO 42378
// for i in units do
42288: LD_ADDR_VAR 0 4
42292: PUSH
42293: LD_VAR 0 1
42297: PUSH
42298: FOR_IN
42299: IFFALSE 42376
// if BuildingStatus ( b ) = bs_build then
42301: LD_VAR 0 2
42305: PPUSH
42306: CALL_OW 461
42310: PUSH
42311: LD_INT 1
42313: EQUAL
42314: IFFALSE 42374
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42316: LD_VAR 0 4
42320: PPUSH
42321: LD_STRING h
42323: PUSH
42324: LD_VAR 0 2
42328: PPUSH
42329: CALL_OW 250
42333: PUSH
42334: LD_VAR 0 2
42338: PPUSH
42339: CALL_OW 251
42343: PUSH
42344: LD_VAR 0 2
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: LD_INT 0
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: PUSH
42367: EMPTY
42368: LIST
42369: PPUSH
42370: CALL_OW 446
42374: GO 42298
42376: POP
42377: POP
// end ;
42378: LD_VAR 0 3
42382: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42383: LD_INT 0
42385: PPUSH
42386: PPUSH
42387: PPUSH
42388: PPUSH
42389: PPUSH
42390: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
42391: LD_VAR 0 1
42395: NOT
42396: PUSH
42397: LD_VAR 0 1
42401: PPUSH
42402: CALL_OW 263
42406: PUSH
42407: LD_INT 2
42409: NONEQUAL
42410: OR
42411: IFFALSE 42415
// exit ;
42413: GO 42731
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42415: LD_ADDR_VAR 0 6
42419: PUSH
42420: LD_INT 22
42422: PUSH
42423: LD_VAR 0 1
42427: PPUSH
42428: CALL_OW 255
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 2
42439: PUSH
42440: LD_INT 30
42442: PUSH
42443: LD_INT 36
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 34
42452: PUSH
42453: LD_INT 31
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: LIST
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PPUSH
42469: CALL_OW 69
42473: ST_TO_ADDR
// if not tmp then
42474: LD_VAR 0 6
42478: NOT
42479: IFFALSE 42483
// exit ;
42481: GO 42731
// result := [ ] ;
42483: LD_ADDR_VAR 0 2
42487: PUSH
42488: EMPTY
42489: ST_TO_ADDR
// for i in tmp do
42490: LD_ADDR_VAR 0 3
42494: PUSH
42495: LD_VAR 0 6
42499: PUSH
42500: FOR_IN
42501: IFFALSE 42572
// begin t := UnitsInside ( i ) ;
42503: LD_ADDR_VAR 0 4
42507: PUSH
42508: LD_VAR 0 3
42512: PPUSH
42513: CALL_OW 313
42517: ST_TO_ADDR
// if t then
42518: LD_VAR 0 4
42522: IFFALSE 42570
// for j in t do
42524: LD_ADDR_VAR 0 7
42528: PUSH
42529: LD_VAR 0 4
42533: PUSH
42534: FOR_IN
42535: IFFALSE 42568
// result := Replace ( result , result + 1 , j ) ;
42537: LD_ADDR_VAR 0 2
42541: PUSH
42542: LD_VAR 0 2
42546: PPUSH
42547: LD_VAR 0 2
42551: PUSH
42552: LD_INT 1
42554: PLUS
42555: PPUSH
42556: LD_VAR 0 7
42560: PPUSH
42561: CALL_OW 1
42565: ST_TO_ADDR
42566: GO 42534
42568: POP
42569: POP
// end ;
42570: GO 42500
42572: POP
42573: POP
// if not result then
42574: LD_VAR 0 2
42578: NOT
42579: IFFALSE 42583
// exit ;
42581: GO 42731
// mech := result [ 1 ] ;
42583: LD_ADDR_VAR 0 5
42587: PUSH
42588: LD_VAR 0 2
42592: PUSH
42593: LD_INT 1
42595: ARRAY
42596: ST_TO_ADDR
// if result > 1 then
42597: LD_VAR 0 2
42601: PUSH
42602: LD_INT 1
42604: GREATER
42605: IFFALSE 42717
// begin for i = 2 to result do
42607: LD_ADDR_VAR 0 3
42611: PUSH
42612: DOUBLE
42613: LD_INT 2
42615: DEC
42616: ST_TO_ADDR
42617: LD_VAR 0 2
42621: PUSH
42622: FOR_TO
42623: IFFALSE 42715
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42625: LD_ADDR_VAR 0 4
42629: PUSH
42630: LD_VAR 0 2
42634: PUSH
42635: LD_VAR 0 3
42639: ARRAY
42640: PPUSH
42641: LD_INT 3
42643: PPUSH
42644: CALL_OW 259
42648: PUSH
42649: LD_VAR 0 2
42653: PUSH
42654: LD_VAR 0 3
42658: ARRAY
42659: PPUSH
42660: CALL_OW 432
42664: MINUS
42665: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42666: LD_VAR 0 4
42670: PUSH
42671: LD_VAR 0 5
42675: PPUSH
42676: LD_INT 3
42678: PPUSH
42679: CALL_OW 259
42683: PUSH
42684: LD_VAR 0 5
42688: PPUSH
42689: CALL_OW 432
42693: MINUS
42694: GREATEREQUAL
42695: IFFALSE 42713
// mech := result [ i ] ;
42697: LD_ADDR_VAR 0 5
42701: PUSH
42702: LD_VAR 0 2
42706: PUSH
42707: LD_VAR 0 3
42711: ARRAY
42712: ST_TO_ADDR
// end ;
42713: GO 42622
42715: POP
42716: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42717: LD_VAR 0 1
42721: PPUSH
42722: LD_VAR 0 5
42726: PPUSH
42727: CALL_OW 135
// end ;
42731: LD_VAR 0 2
42735: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42736: LD_INT 0
42738: PPUSH
42739: PPUSH
42740: PPUSH
42741: PPUSH
42742: PPUSH
42743: PPUSH
42744: PPUSH
42745: PPUSH
42746: PPUSH
42747: PPUSH
42748: PPUSH
42749: PPUSH
42750: PPUSH
// result := [ ] ;
42751: LD_ADDR_VAR 0 7
42755: PUSH
42756: EMPTY
42757: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42758: LD_VAR 0 1
42762: PPUSH
42763: CALL_OW 266
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: LD_INT 1
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: IN
42778: NOT
42779: IFFALSE 42783
// exit ;
42781: GO 44417
// if name then
42783: LD_VAR 0 3
42787: IFFALSE 42803
// SetBName ( base_dep , name ) ;
42789: LD_VAR 0 1
42793: PPUSH
42794: LD_VAR 0 3
42798: PPUSH
42799: CALL_OW 500
// base := GetBase ( base_dep ) ;
42803: LD_ADDR_VAR 0 15
42807: PUSH
42808: LD_VAR 0 1
42812: PPUSH
42813: CALL_OW 274
42817: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42818: LD_ADDR_VAR 0 16
42822: PUSH
42823: LD_VAR 0 1
42827: PPUSH
42828: CALL_OW 255
42832: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42833: LD_ADDR_VAR 0 17
42837: PUSH
42838: LD_VAR 0 1
42842: PPUSH
42843: CALL_OW 248
42847: ST_TO_ADDR
// if sources then
42848: LD_VAR 0 5
42852: IFFALSE 42899
// for i = 1 to 3 do
42854: LD_ADDR_VAR 0 8
42858: PUSH
42859: DOUBLE
42860: LD_INT 1
42862: DEC
42863: ST_TO_ADDR
42864: LD_INT 3
42866: PUSH
42867: FOR_TO
42868: IFFALSE 42897
// AddResourceType ( base , i , sources [ i ] ) ;
42870: LD_VAR 0 15
42874: PPUSH
42875: LD_VAR 0 8
42879: PPUSH
42880: LD_VAR 0 5
42884: PUSH
42885: LD_VAR 0 8
42889: ARRAY
42890: PPUSH
42891: CALL_OW 276
42895: GO 42867
42897: POP
42898: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42899: LD_ADDR_VAR 0 18
42903: PUSH
42904: LD_VAR 0 15
42908: PPUSH
42909: LD_VAR 0 2
42913: PPUSH
42914: LD_INT 1
42916: PPUSH
42917: CALL 42160 0 3
42921: ST_TO_ADDR
// InitHc ;
42922: CALL_OW 19
// InitUc ;
42926: CALL_OW 18
// uc_side := side ;
42930: LD_ADDR_OWVAR 20
42934: PUSH
42935: LD_VAR 0 16
42939: ST_TO_ADDR
// uc_nation := nation ;
42940: LD_ADDR_OWVAR 21
42944: PUSH
42945: LD_VAR 0 17
42949: ST_TO_ADDR
// if buildings then
42950: LD_VAR 0 18
42954: IFFALSE 44276
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42956: LD_ADDR_VAR 0 19
42960: PUSH
42961: LD_VAR 0 18
42965: PPUSH
42966: LD_INT 2
42968: PUSH
42969: LD_INT 30
42971: PUSH
42972: LD_INT 29
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 30
42981: PUSH
42982: LD_INT 30
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: LIST
42993: PPUSH
42994: CALL_OW 72
42998: ST_TO_ADDR
// if tmp then
42999: LD_VAR 0 19
43003: IFFALSE 43051
// for i in tmp do
43005: LD_ADDR_VAR 0 8
43009: PUSH
43010: LD_VAR 0 19
43014: PUSH
43015: FOR_IN
43016: IFFALSE 43049
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
43018: LD_VAR 0 8
43022: PPUSH
43023: CALL_OW 250
43027: PPUSH
43028: LD_VAR 0 8
43032: PPUSH
43033: CALL_OW 251
43037: PPUSH
43038: LD_VAR 0 16
43042: PPUSH
43043: CALL_OW 441
43047: GO 43015
43049: POP
43050: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
43051: LD_VAR 0 18
43055: PPUSH
43056: LD_INT 2
43058: PUSH
43059: LD_INT 30
43061: PUSH
43062: LD_INT 32
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 30
43071: PUSH
43072: LD_INT 33
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: LIST
43083: PPUSH
43084: CALL_OW 72
43088: IFFALSE 43176
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
43090: LD_ADDR_VAR 0 8
43094: PUSH
43095: LD_VAR 0 18
43099: PPUSH
43100: LD_INT 2
43102: PUSH
43103: LD_INT 30
43105: PUSH
43106: LD_INT 32
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 30
43115: PUSH
43116: LD_INT 33
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: LIST
43127: PPUSH
43128: CALL_OW 72
43132: PUSH
43133: FOR_IN
43134: IFFALSE 43174
// begin if not GetBWeapon ( i ) then
43136: LD_VAR 0 8
43140: PPUSH
43141: CALL_OW 269
43145: NOT
43146: IFFALSE 43172
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
43148: LD_VAR 0 8
43152: PPUSH
43153: LD_VAR 0 8
43157: PPUSH
43158: LD_VAR 0 2
43162: PPUSH
43163: CALL 44422 0 2
43167: PPUSH
43168: CALL_OW 431
// end ;
43172: GO 43133
43174: POP
43175: POP
// end ; for i = 1 to personel do
43176: LD_ADDR_VAR 0 8
43180: PUSH
43181: DOUBLE
43182: LD_INT 1
43184: DEC
43185: ST_TO_ADDR
43186: LD_VAR 0 6
43190: PUSH
43191: FOR_TO
43192: IFFALSE 44256
// begin if i > 4 then
43194: LD_VAR 0 8
43198: PUSH
43199: LD_INT 4
43201: GREATER
43202: IFFALSE 43206
// break ;
43204: GO 44256
// case i of 1 :
43206: LD_VAR 0 8
43210: PUSH
43211: LD_INT 1
43213: DOUBLE
43214: EQUAL
43215: IFTRUE 43219
43217: GO 43299
43219: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
43220: LD_ADDR_VAR 0 12
43224: PUSH
43225: LD_VAR 0 18
43229: PPUSH
43230: LD_INT 22
43232: PUSH
43233: LD_VAR 0 16
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 58
43244: PUSH
43245: EMPTY
43246: LIST
43247: PUSH
43248: LD_INT 2
43250: PUSH
43251: LD_INT 30
43253: PUSH
43254: LD_INT 32
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 30
43263: PUSH
43264: LD_INT 4
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 30
43273: PUSH
43274: LD_INT 5
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: LIST
43291: PPUSH
43292: CALL_OW 72
43296: ST_TO_ADDR
43297: GO 43521
43299: LD_INT 2
43301: DOUBLE
43302: EQUAL
43303: IFTRUE 43307
43305: GO 43369
43307: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43308: LD_ADDR_VAR 0 12
43312: PUSH
43313: LD_VAR 0 18
43317: PPUSH
43318: LD_INT 22
43320: PUSH
43321: LD_VAR 0 16
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 2
43332: PUSH
43333: LD_INT 30
43335: PUSH
43336: LD_INT 0
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 30
43345: PUSH
43346: LD_INT 1
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: LIST
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PPUSH
43362: CALL_OW 72
43366: ST_TO_ADDR
43367: GO 43521
43369: LD_INT 3
43371: DOUBLE
43372: EQUAL
43373: IFTRUE 43377
43375: GO 43439
43377: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43378: LD_ADDR_VAR 0 12
43382: PUSH
43383: LD_VAR 0 18
43387: PPUSH
43388: LD_INT 22
43390: PUSH
43391: LD_VAR 0 16
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 2
43402: PUSH
43403: LD_INT 30
43405: PUSH
43406: LD_INT 2
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 30
43415: PUSH
43416: LD_INT 3
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: LIST
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PPUSH
43432: CALL_OW 72
43436: ST_TO_ADDR
43437: GO 43521
43439: LD_INT 4
43441: DOUBLE
43442: EQUAL
43443: IFTRUE 43447
43445: GO 43520
43447: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43448: LD_ADDR_VAR 0 12
43452: PUSH
43453: LD_VAR 0 18
43457: PPUSH
43458: LD_INT 22
43460: PUSH
43461: LD_VAR 0 16
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 2
43472: PUSH
43473: LD_INT 30
43475: PUSH
43476: LD_INT 6
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 30
43485: PUSH
43486: LD_INT 7
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 30
43495: PUSH
43496: LD_INT 8
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PPUSH
43513: CALL_OW 72
43517: ST_TO_ADDR
43518: GO 43521
43520: POP
// if i = 1 then
43521: LD_VAR 0 8
43525: PUSH
43526: LD_INT 1
43528: EQUAL
43529: IFFALSE 43640
// begin tmp := [ ] ;
43531: LD_ADDR_VAR 0 19
43535: PUSH
43536: EMPTY
43537: ST_TO_ADDR
// for j in f do
43538: LD_ADDR_VAR 0 9
43542: PUSH
43543: LD_VAR 0 12
43547: PUSH
43548: FOR_IN
43549: IFFALSE 43622
// if GetBType ( j ) = b_bunker then
43551: LD_VAR 0 9
43555: PPUSH
43556: CALL_OW 266
43560: PUSH
43561: LD_INT 32
43563: EQUAL
43564: IFFALSE 43591
// tmp := Insert ( tmp , 1 , j ) else
43566: LD_ADDR_VAR 0 19
43570: PUSH
43571: LD_VAR 0 19
43575: PPUSH
43576: LD_INT 1
43578: PPUSH
43579: LD_VAR 0 9
43583: PPUSH
43584: CALL_OW 2
43588: ST_TO_ADDR
43589: GO 43620
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43591: LD_ADDR_VAR 0 19
43595: PUSH
43596: LD_VAR 0 19
43600: PPUSH
43601: LD_VAR 0 19
43605: PUSH
43606: LD_INT 1
43608: PLUS
43609: PPUSH
43610: LD_VAR 0 9
43614: PPUSH
43615: CALL_OW 2
43619: ST_TO_ADDR
43620: GO 43548
43622: POP
43623: POP
// if tmp then
43624: LD_VAR 0 19
43628: IFFALSE 43640
// f := tmp ;
43630: LD_ADDR_VAR 0 12
43634: PUSH
43635: LD_VAR 0 19
43639: ST_TO_ADDR
// end ; x := personel [ i ] ;
43640: LD_ADDR_VAR 0 13
43644: PUSH
43645: LD_VAR 0 6
43649: PUSH
43650: LD_VAR 0 8
43654: ARRAY
43655: ST_TO_ADDR
// if x = - 1 then
43656: LD_VAR 0 13
43660: PUSH
43661: LD_INT 1
43663: NEG
43664: EQUAL
43665: IFFALSE 43874
// begin for j in f do
43667: LD_ADDR_VAR 0 9
43671: PUSH
43672: LD_VAR 0 12
43676: PUSH
43677: FOR_IN
43678: IFFALSE 43870
// repeat InitHc ;
43680: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43684: LD_VAR 0 9
43688: PPUSH
43689: CALL_OW 266
43693: PUSH
43694: LD_INT 5
43696: EQUAL
43697: IFFALSE 43767
// begin if UnitsInside ( j ) < 3 then
43699: LD_VAR 0 9
43703: PPUSH
43704: CALL_OW 313
43708: PUSH
43709: LD_INT 3
43711: LESS
43712: IFFALSE 43748
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43714: LD_INT 0
43716: PPUSH
43717: LD_INT 5
43719: PUSH
43720: LD_INT 8
43722: PUSH
43723: LD_INT 9
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: LIST
43730: PUSH
43731: LD_VAR 0 17
43735: ARRAY
43736: PPUSH
43737: LD_VAR 0 4
43741: PPUSH
43742: CALL_OW 380
43746: GO 43765
// PrepareHuman ( false , i , skill ) ;
43748: LD_INT 0
43750: PPUSH
43751: LD_VAR 0 8
43755: PPUSH
43756: LD_VAR 0 4
43760: PPUSH
43761: CALL_OW 380
// end else
43765: GO 43784
// PrepareHuman ( false , i , skill ) ;
43767: LD_INT 0
43769: PPUSH
43770: LD_VAR 0 8
43774: PPUSH
43775: LD_VAR 0 4
43779: PPUSH
43780: CALL_OW 380
// un := CreateHuman ;
43784: LD_ADDR_VAR 0 14
43788: PUSH
43789: CALL_OW 44
43793: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43794: LD_ADDR_VAR 0 7
43798: PUSH
43799: LD_VAR 0 7
43803: PPUSH
43804: LD_INT 1
43806: PPUSH
43807: LD_VAR 0 14
43811: PPUSH
43812: CALL_OW 2
43816: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43817: LD_VAR 0 14
43821: PPUSH
43822: LD_VAR 0 9
43826: PPUSH
43827: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43831: LD_VAR 0 9
43835: PPUSH
43836: CALL_OW 313
43840: PUSH
43841: LD_INT 6
43843: EQUAL
43844: PUSH
43845: LD_VAR 0 9
43849: PPUSH
43850: CALL_OW 266
43854: PUSH
43855: LD_INT 32
43857: PUSH
43858: LD_INT 31
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: IN
43865: OR
43866: IFFALSE 43680
43868: GO 43677
43870: POP
43871: POP
// end else
43872: GO 44254
// for j = 1 to x do
43874: LD_ADDR_VAR 0 9
43878: PUSH
43879: DOUBLE
43880: LD_INT 1
43882: DEC
43883: ST_TO_ADDR
43884: LD_VAR 0 13
43888: PUSH
43889: FOR_TO
43890: IFFALSE 44252
// begin InitHc ;
43892: CALL_OW 19
// if not f then
43896: LD_VAR 0 12
43900: NOT
43901: IFFALSE 43990
// begin PrepareHuman ( false , i , skill ) ;
43903: LD_INT 0
43905: PPUSH
43906: LD_VAR 0 8
43910: PPUSH
43911: LD_VAR 0 4
43915: PPUSH
43916: CALL_OW 380
// un := CreateHuman ;
43920: LD_ADDR_VAR 0 14
43924: PUSH
43925: CALL_OW 44
43929: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43930: LD_ADDR_VAR 0 7
43934: PUSH
43935: LD_VAR 0 7
43939: PPUSH
43940: LD_INT 1
43942: PPUSH
43943: LD_VAR 0 14
43947: PPUSH
43948: CALL_OW 2
43952: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43953: LD_VAR 0 14
43957: PPUSH
43958: LD_VAR 0 1
43962: PPUSH
43963: CALL_OW 250
43967: PPUSH
43968: LD_VAR 0 1
43972: PPUSH
43973: CALL_OW 251
43977: PPUSH
43978: LD_INT 10
43980: PPUSH
43981: LD_INT 0
43983: PPUSH
43984: CALL_OW 50
// continue ;
43988: GO 43889
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43990: LD_VAR 0 12
43994: PUSH
43995: LD_INT 1
43997: ARRAY
43998: PPUSH
43999: CALL_OW 313
44003: PUSH
44004: LD_VAR 0 12
44008: PUSH
44009: LD_INT 1
44011: ARRAY
44012: PPUSH
44013: CALL_OW 266
44017: PUSH
44018: LD_INT 32
44020: PUSH
44021: LD_INT 31
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: IN
44028: AND
44029: PUSH
44030: LD_VAR 0 12
44034: PUSH
44035: LD_INT 1
44037: ARRAY
44038: PPUSH
44039: CALL_OW 313
44043: PUSH
44044: LD_INT 6
44046: EQUAL
44047: OR
44048: IFFALSE 44068
// f := Delete ( f , 1 ) ;
44050: LD_ADDR_VAR 0 12
44054: PUSH
44055: LD_VAR 0 12
44059: PPUSH
44060: LD_INT 1
44062: PPUSH
44063: CALL_OW 3
44067: ST_TO_ADDR
// if not f then
44068: LD_VAR 0 12
44072: NOT
44073: IFFALSE 44091
// begin x := x + 2 ;
44075: LD_ADDR_VAR 0 13
44079: PUSH
44080: LD_VAR 0 13
44084: PUSH
44085: LD_INT 2
44087: PLUS
44088: ST_TO_ADDR
// continue ;
44089: GO 43889
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
44091: LD_VAR 0 12
44095: PUSH
44096: LD_INT 1
44098: ARRAY
44099: PPUSH
44100: CALL_OW 266
44104: PUSH
44105: LD_INT 5
44107: EQUAL
44108: IFFALSE 44182
// begin if UnitsInside ( f [ 1 ] ) < 3 then
44110: LD_VAR 0 12
44114: PUSH
44115: LD_INT 1
44117: ARRAY
44118: PPUSH
44119: CALL_OW 313
44123: PUSH
44124: LD_INT 3
44126: LESS
44127: IFFALSE 44163
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44129: LD_INT 0
44131: PPUSH
44132: LD_INT 5
44134: PUSH
44135: LD_INT 8
44137: PUSH
44138: LD_INT 9
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: LIST
44145: PUSH
44146: LD_VAR 0 17
44150: ARRAY
44151: PPUSH
44152: LD_VAR 0 4
44156: PPUSH
44157: CALL_OW 380
44161: GO 44180
// PrepareHuman ( false , i , skill ) ;
44163: LD_INT 0
44165: PPUSH
44166: LD_VAR 0 8
44170: PPUSH
44171: LD_VAR 0 4
44175: PPUSH
44176: CALL_OW 380
// end else
44180: GO 44199
// PrepareHuman ( false , i , skill ) ;
44182: LD_INT 0
44184: PPUSH
44185: LD_VAR 0 8
44189: PPUSH
44190: LD_VAR 0 4
44194: PPUSH
44195: CALL_OW 380
// un := CreateHuman ;
44199: LD_ADDR_VAR 0 14
44203: PUSH
44204: CALL_OW 44
44208: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44209: LD_ADDR_VAR 0 7
44213: PUSH
44214: LD_VAR 0 7
44218: PPUSH
44219: LD_INT 1
44221: PPUSH
44222: LD_VAR 0 14
44226: PPUSH
44227: CALL_OW 2
44231: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
44232: LD_VAR 0 14
44236: PPUSH
44237: LD_VAR 0 12
44241: PUSH
44242: LD_INT 1
44244: ARRAY
44245: PPUSH
44246: CALL_OW 52
// end ;
44250: GO 43889
44252: POP
44253: POP
// end ;
44254: GO 43191
44256: POP
44257: POP
// result := result ^ buildings ;
44258: LD_ADDR_VAR 0 7
44262: PUSH
44263: LD_VAR 0 7
44267: PUSH
44268: LD_VAR 0 18
44272: ADD
44273: ST_TO_ADDR
// end else
44274: GO 44417
// begin for i = 1 to personel do
44276: LD_ADDR_VAR 0 8
44280: PUSH
44281: DOUBLE
44282: LD_INT 1
44284: DEC
44285: ST_TO_ADDR
44286: LD_VAR 0 6
44290: PUSH
44291: FOR_TO
44292: IFFALSE 44415
// begin if i > 4 then
44294: LD_VAR 0 8
44298: PUSH
44299: LD_INT 4
44301: GREATER
44302: IFFALSE 44306
// break ;
44304: GO 44415
// x := personel [ i ] ;
44306: LD_ADDR_VAR 0 13
44310: PUSH
44311: LD_VAR 0 6
44315: PUSH
44316: LD_VAR 0 8
44320: ARRAY
44321: ST_TO_ADDR
// if x = - 1 then
44322: LD_VAR 0 13
44326: PUSH
44327: LD_INT 1
44329: NEG
44330: EQUAL
44331: IFFALSE 44335
// continue ;
44333: GO 44291
// PrepareHuman ( false , i , skill ) ;
44335: LD_INT 0
44337: PPUSH
44338: LD_VAR 0 8
44342: PPUSH
44343: LD_VAR 0 4
44347: PPUSH
44348: CALL_OW 380
// un := CreateHuman ;
44352: LD_ADDR_VAR 0 14
44356: PUSH
44357: CALL_OW 44
44361: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44362: LD_VAR 0 14
44366: PPUSH
44367: LD_VAR 0 1
44371: PPUSH
44372: CALL_OW 250
44376: PPUSH
44377: LD_VAR 0 1
44381: PPUSH
44382: CALL_OW 251
44386: PPUSH
44387: LD_INT 10
44389: PPUSH
44390: LD_INT 0
44392: PPUSH
44393: CALL_OW 50
// result := result ^ un ;
44397: LD_ADDR_VAR 0 7
44401: PUSH
44402: LD_VAR 0 7
44406: PUSH
44407: LD_VAR 0 14
44411: ADD
44412: ST_TO_ADDR
// end ;
44413: GO 44291
44415: POP
44416: POP
// end ; end ;
44417: LD_VAR 0 7
44421: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44422: LD_INT 0
44424: PPUSH
44425: PPUSH
44426: PPUSH
44427: PPUSH
44428: PPUSH
44429: PPUSH
44430: PPUSH
44431: PPUSH
44432: PPUSH
44433: PPUSH
44434: PPUSH
44435: PPUSH
44436: PPUSH
44437: PPUSH
44438: PPUSH
44439: PPUSH
// result := false ;
44440: LD_ADDR_VAR 0 3
44444: PUSH
44445: LD_INT 0
44447: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44448: LD_VAR 0 1
44452: NOT
44453: PUSH
44454: LD_VAR 0 1
44458: PPUSH
44459: CALL_OW 266
44463: PUSH
44464: LD_INT 32
44466: PUSH
44467: LD_INT 33
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: IN
44474: NOT
44475: OR
44476: IFFALSE 44480
// exit ;
44478: GO 45589
// nat := GetNation ( tower ) ;
44480: LD_ADDR_VAR 0 12
44484: PUSH
44485: LD_VAR 0 1
44489: PPUSH
44490: CALL_OW 248
44494: ST_TO_ADDR
// side := GetSide ( tower ) ;
44495: LD_ADDR_VAR 0 16
44499: PUSH
44500: LD_VAR 0 1
44504: PPUSH
44505: CALL_OW 255
44509: ST_TO_ADDR
// x := GetX ( tower ) ;
44510: LD_ADDR_VAR 0 10
44514: PUSH
44515: LD_VAR 0 1
44519: PPUSH
44520: CALL_OW 250
44524: ST_TO_ADDR
// y := GetY ( tower ) ;
44525: LD_ADDR_VAR 0 11
44529: PUSH
44530: LD_VAR 0 1
44534: PPUSH
44535: CALL_OW 251
44539: ST_TO_ADDR
// if not x or not y then
44540: LD_VAR 0 10
44544: NOT
44545: PUSH
44546: LD_VAR 0 11
44550: NOT
44551: OR
44552: IFFALSE 44556
// exit ;
44554: GO 45589
// weapon := 0 ;
44556: LD_ADDR_VAR 0 18
44560: PUSH
44561: LD_INT 0
44563: ST_TO_ADDR
// fac_list := [ ] ;
44564: LD_ADDR_VAR 0 17
44568: PUSH
44569: EMPTY
44570: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44571: LD_ADDR_VAR 0 6
44575: PUSH
44576: LD_VAR 0 1
44580: PPUSH
44581: CALL_OW 274
44585: PPUSH
44586: LD_VAR 0 2
44590: PPUSH
44591: LD_INT 0
44593: PPUSH
44594: CALL 42160 0 3
44598: PPUSH
44599: LD_INT 30
44601: PUSH
44602: LD_INT 3
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PPUSH
44609: CALL_OW 72
44613: ST_TO_ADDR
// if not factories then
44614: LD_VAR 0 6
44618: NOT
44619: IFFALSE 44623
// exit ;
44621: GO 45589
// for i in factories do
44623: LD_ADDR_VAR 0 8
44627: PUSH
44628: LD_VAR 0 6
44632: PUSH
44633: FOR_IN
44634: IFFALSE 44659
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44636: LD_ADDR_VAR 0 17
44640: PUSH
44641: LD_VAR 0 17
44645: PUSH
44646: LD_VAR 0 8
44650: PPUSH
44651: CALL_OW 478
44655: UNION
44656: ST_TO_ADDR
44657: GO 44633
44659: POP
44660: POP
// if not fac_list then
44661: LD_VAR 0 17
44665: NOT
44666: IFFALSE 44670
// exit ;
44668: GO 45589
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44670: LD_ADDR_VAR 0 5
44674: PUSH
44675: LD_INT 4
44677: PUSH
44678: LD_INT 5
44680: PUSH
44681: LD_INT 9
44683: PUSH
44684: LD_INT 10
44686: PUSH
44687: LD_INT 6
44689: PUSH
44690: LD_INT 7
44692: PUSH
44693: LD_INT 11
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 27
44707: PUSH
44708: LD_INT 28
44710: PUSH
44711: LD_INT 26
44713: PUSH
44714: LD_INT 30
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 43
44725: PUSH
44726: LD_INT 44
44728: PUSH
44729: LD_INT 46
44731: PUSH
44732: LD_INT 45
44734: PUSH
44735: LD_INT 47
44737: PUSH
44738: LD_INT 49
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: LIST
44753: PUSH
44754: LD_VAR 0 12
44758: ARRAY
44759: ST_TO_ADDR
// list := list isect fac_list ;
44760: LD_ADDR_VAR 0 5
44764: PUSH
44765: LD_VAR 0 5
44769: PUSH
44770: LD_VAR 0 17
44774: ISECT
44775: ST_TO_ADDR
// if not list then
44776: LD_VAR 0 5
44780: NOT
44781: IFFALSE 44785
// exit ;
44783: GO 45589
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44785: LD_VAR 0 12
44789: PUSH
44790: LD_INT 3
44792: EQUAL
44793: PUSH
44794: LD_INT 49
44796: PUSH
44797: LD_VAR 0 5
44801: IN
44802: AND
44803: PUSH
44804: LD_INT 31
44806: PPUSH
44807: LD_VAR 0 16
44811: PPUSH
44812: CALL_OW 321
44816: PUSH
44817: LD_INT 2
44819: EQUAL
44820: AND
44821: IFFALSE 44881
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44823: LD_INT 22
44825: PUSH
44826: LD_VAR 0 16
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 35
44837: PUSH
44838: LD_INT 49
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 91
44847: PUSH
44848: LD_VAR 0 1
44852: PUSH
44853: LD_INT 10
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: LIST
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: LIST
44865: PPUSH
44866: CALL_OW 69
44870: NOT
44871: IFFALSE 44881
// weapon := ru_time_lapser ;
44873: LD_ADDR_VAR 0 18
44877: PUSH
44878: LD_INT 49
44880: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44881: LD_VAR 0 12
44885: PUSH
44886: LD_INT 1
44888: PUSH
44889: LD_INT 2
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: IN
44896: PUSH
44897: LD_INT 11
44899: PUSH
44900: LD_VAR 0 5
44904: IN
44905: PUSH
44906: LD_INT 30
44908: PUSH
44909: LD_VAR 0 5
44913: IN
44914: OR
44915: AND
44916: PUSH
44917: LD_INT 6
44919: PPUSH
44920: LD_VAR 0 16
44924: PPUSH
44925: CALL_OW 321
44929: PUSH
44930: LD_INT 2
44932: EQUAL
44933: AND
44934: IFFALSE 45099
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44936: LD_INT 22
44938: PUSH
44939: LD_VAR 0 16
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 2
44950: PUSH
44951: LD_INT 35
44953: PUSH
44954: LD_INT 11
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 35
44963: PUSH
44964: LD_INT 30
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 91
44978: PUSH
44979: LD_VAR 0 1
44983: PUSH
44984: LD_INT 18
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: LIST
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: LIST
44996: PPUSH
44997: CALL_OW 69
45001: NOT
45002: PUSH
45003: LD_INT 22
45005: PUSH
45006: LD_VAR 0 16
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 2
45017: PUSH
45018: LD_INT 30
45020: PUSH
45021: LD_INT 32
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 30
45030: PUSH
45031: LD_INT 33
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 91
45045: PUSH
45046: LD_VAR 0 1
45050: PUSH
45051: LD_INT 12
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: LIST
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: LIST
45063: PUSH
45064: EMPTY
45065: LIST
45066: PPUSH
45067: CALL_OW 69
45071: PUSH
45072: LD_INT 2
45074: GREATER
45075: AND
45076: IFFALSE 45099
// weapon := [ us_radar , ar_radar ] [ nat ] ;
45078: LD_ADDR_VAR 0 18
45082: PUSH
45083: LD_INT 11
45085: PUSH
45086: LD_INT 30
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_VAR 0 12
45097: ARRAY
45098: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
45099: LD_VAR 0 18
45103: NOT
45104: PUSH
45105: LD_INT 40
45107: PPUSH
45108: LD_VAR 0 16
45112: PPUSH
45113: CALL_OW 321
45117: PUSH
45118: LD_INT 2
45120: EQUAL
45121: AND
45122: PUSH
45123: LD_INT 7
45125: PUSH
45126: LD_VAR 0 5
45130: IN
45131: PUSH
45132: LD_INT 28
45134: PUSH
45135: LD_VAR 0 5
45139: IN
45140: OR
45141: PUSH
45142: LD_INT 45
45144: PUSH
45145: LD_VAR 0 5
45149: IN
45150: OR
45151: AND
45152: IFFALSE 45406
// begin hex := GetHexInfo ( x , y ) ;
45154: LD_ADDR_VAR 0 4
45158: PUSH
45159: LD_VAR 0 10
45163: PPUSH
45164: LD_VAR 0 11
45168: PPUSH
45169: CALL_OW 546
45173: ST_TO_ADDR
// if hex [ 1 ] then
45174: LD_VAR 0 4
45178: PUSH
45179: LD_INT 1
45181: ARRAY
45182: IFFALSE 45186
// exit ;
45184: GO 45589
// height := hex [ 2 ] ;
45186: LD_ADDR_VAR 0 15
45190: PUSH
45191: LD_VAR 0 4
45195: PUSH
45196: LD_INT 2
45198: ARRAY
45199: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
45200: LD_ADDR_VAR 0 14
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: LD_INT 2
45210: PUSH
45211: LD_INT 3
45213: PUSH
45214: LD_INT 5
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: ST_TO_ADDR
// for i in tmp do
45223: LD_ADDR_VAR 0 8
45227: PUSH
45228: LD_VAR 0 14
45232: PUSH
45233: FOR_IN
45234: IFFALSE 45404
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
45236: LD_ADDR_VAR 0 9
45240: PUSH
45241: LD_VAR 0 10
45245: PPUSH
45246: LD_VAR 0 8
45250: PPUSH
45251: LD_INT 5
45253: PPUSH
45254: CALL_OW 272
45258: PUSH
45259: LD_VAR 0 11
45263: PPUSH
45264: LD_VAR 0 8
45268: PPUSH
45269: LD_INT 5
45271: PPUSH
45272: CALL_OW 273
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45281: LD_VAR 0 9
45285: PUSH
45286: LD_INT 1
45288: ARRAY
45289: PPUSH
45290: LD_VAR 0 9
45294: PUSH
45295: LD_INT 2
45297: ARRAY
45298: PPUSH
45299: CALL_OW 488
45303: IFFALSE 45402
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45305: LD_ADDR_VAR 0 4
45309: PUSH
45310: LD_VAR 0 9
45314: PUSH
45315: LD_INT 1
45317: ARRAY
45318: PPUSH
45319: LD_VAR 0 9
45323: PUSH
45324: LD_INT 2
45326: ARRAY
45327: PPUSH
45328: CALL_OW 546
45332: ST_TO_ADDR
// if hex [ 1 ] then
45333: LD_VAR 0 4
45337: PUSH
45338: LD_INT 1
45340: ARRAY
45341: IFFALSE 45345
// continue ;
45343: GO 45233
// h := hex [ 2 ] ;
45345: LD_ADDR_VAR 0 13
45349: PUSH
45350: LD_VAR 0 4
45354: PUSH
45355: LD_INT 2
45357: ARRAY
45358: ST_TO_ADDR
// if h + 7 < height then
45359: LD_VAR 0 13
45363: PUSH
45364: LD_INT 7
45366: PLUS
45367: PUSH
45368: LD_VAR 0 15
45372: LESS
45373: IFFALSE 45402
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45375: LD_ADDR_VAR 0 18
45379: PUSH
45380: LD_INT 7
45382: PUSH
45383: LD_INT 28
45385: PUSH
45386: LD_INT 45
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: LIST
45393: PUSH
45394: LD_VAR 0 12
45398: ARRAY
45399: ST_TO_ADDR
// break ;
45400: GO 45404
// end ; end ; end ;
45402: GO 45233
45404: POP
45405: POP
// end ; if not weapon then
45406: LD_VAR 0 18
45410: NOT
45411: IFFALSE 45471
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45413: LD_ADDR_VAR 0 5
45417: PUSH
45418: LD_VAR 0 5
45422: PUSH
45423: LD_INT 11
45425: PUSH
45426: LD_INT 30
45428: PUSH
45429: LD_INT 49
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: LIST
45436: DIFF
45437: ST_TO_ADDR
// if not list then
45438: LD_VAR 0 5
45442: NOT
45443: IFFALSE 45447
// exit ;
45445: GO 45589
// weapon := list [ rand ( 1 , list ) ] ;
45447: LD_ADDR_VAR 0 18
45451: PUSH
45452: LD_VAR 0 5
45456: PUSH
45457: LD_INT 1
45459: PPUSH
45460: LD_VAR 0 5
45464: PPUSH
45465: CALL_OW 12
45469: ARRAY
45470: ST_TO_ADDR
// end ; if weapon then
45471: LD_VAR 0 18
45475: IFFALSE 45589
// begin tmp := CostOfWeapon ( weapon ) ;
45477: LD_ADDR_VAR 0 14
45481: PUSH
45482: LD_VAR 0 18
45486: PPUSH
45487: CALL_OW 451
45491: ST_TO_ADDR
// j := GetBase ( tower ) ;
45492: LD_ADDR_VAR 0 9
45496: PUSH
45497: LD_VAR 0 1
45501: PPUSH
45502: CALL_OW 274
45506: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45507: LD_VAR 0 9
45511: PPUSH
45512: LD_INT 1
45514: PPUSH
45515: CALL_OW 275
45519: PUSH
45520: LD_VAR 0 14
45524: PUSH
45525: LD_INT 1
45527: ARRAY
45528: GREATEREQUAL
45529: PUSH
45530: LD_VAR 0 9
45534: PPUSH
45535: LD_INT 2
45537: PPUSH
45538: CALL_OW 275
45542: PUSH
45543: LD_VAR 0 14
45547: PUSH
45548: LD_INT 2
45550: ARRAY
45551: GREATEREQUAL
45552: AND
45553: PUSH
45554: LD_VAR 0 9
45558: PPUSH
45559: LD_INT 3
45561: PPUSH
45562: CALL_OW 275
45566: PUSH
45567: LD_VAR 0 14
45571: PUSH
45572: LD_INT 3
45574: ARRAY
45575: GREATEREQUAL
45576: AND
45577: IFFALSE 45589
// result := weapon ;
45579: LD_ADDR_VAR 0 3
45583: PUSH
45584: LD_VAR 0 18
45588: ST_TO_ADDR
// end ; end ;
45589: LD_VAR 0 3
45593: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45594: LD_INT 0
45596: PPUSH
45597: PPUSH
// result := true ;
45598: LD_ADDR_VAR 0 3
45602: PUSH
45603: LD_INT 1
45605: ST_TO_ADDR
// if array1 = array2 then
45606: LD_VAR 0 1
45610: PUSH
45611: LD_VAR 0 2
45615: EQUAL
45616: IFFALSE 45676
// begin for i = 1 to array1 do
45618: LD_ADDR_VAR 0 4
45622: PUSH
45623: DOUBLE
45624: LD_INT 1
45626: DEC
45627: ST_TO_ADDR
45628: LD_VAR 0 1
45632: PUSH
45633: FOR_TO
45634: IFFALSE 45672
// if array1 [ i ] <> array2 [ i ] then
45636: LD_VAR 0 1
45640: PUSH
45641: LD_VAR 0 4
45645: ARRAY
45646: PUSH
45647: LD_VAR 0 2
45651: PUSH
45652: LD_VAR 0 4
45656: ARRAY
45657: NONEQUAL
45658: IFFALSE 45670
// begin result := false ;
45660: LD_ADDR_VAR 0 3
45664: PUSH
45665: LD_INT 0
45667: ST_TO_ADDR
// break ;
45668: GO 45672
// end ;
45670: GO 45633
45672: POP
45673: POP
// end else
45674: GO 45684
// result := false ;
45676: LD_ADDR_VAR 0 3
45680: PUSH
45681: LD_INT 0
45683: ST_TO_ADDR
// end ;
45684: LD_VAR 0 3
45688: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45689: LD_INT 0
45691: PPUSH
45692: PPUSH
// if not array1 or not array2 then
45693: LD_VAR 0 1
45697: NOT
45698: PUSH
45699: LD_VAR 0 2
45703: NOT
45704: OR
45705: IFFALSE 45709
// exit ;
45707: GO 45773
// result := true ;
45709: LD_ADDR_VAR 0 3
45713: PUSH
45714: LD_INT 1
45716: ST_TO_ADDR
// for i = 1 to array1 do
45717: LD_ADDR_VAR 0 4
45721: PUSH
45722: DOUBLE
45723: LD_INT 1
45725: DEC
45726: ST_TO_ADDR
45727: LD_VAR 0 1
45731: PUSH
45732: FOR_TO
45733: IFFALSE 45771
// if array1 [ i ] <> array2 [ i ] then
45735: LD_VAR 0 1
45739: PUSH
45740: LD_VAR 0 4
45744: ARRAY
45745: PUSH
45746: LD_VAR 0 2
45750: PUSH
45751: LD_VAR 0 4
45755: ARRAY
45756: NONEQUAL
45757: IFFALSE 45769
// begin result := false ;
45759: LD_ADDR_VAR 0 3
45763: PUSH
45764: LD_INT 0
45766: ST_TO_ADDR
// break ;
45767: GO 45771
// end ;
45769: GO 45732
45771: POP
45772: POP
// end ;
45773: LD_VAR 0 3
45777: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45778: LD_INT 0
45780: PPUSH
45781: PPUSH
45782: PPUSH
// pom := GetBase ( fac ) ;
45783: LD_ADDR_VAR 0 5
45787: PUSH
45788: LD_VAR 0 1
45792: PPUSH
45793: CALL_OW 274
45797: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45798: LD_ADDR_VAR 0 4
45802: PUSH
45803: LD_VAR 0 2
45807: PUSH
45808: LD_INT 1
45810: ARRAY
45811: PPUSH
45812: LD_VAR 0 2
45816: PUSH
45817: LD_INT 2
45819: ARRAY
45820: PPUSH
45821: LD_VAR 0 2
45825: PUSH
45826: LD_INT 3
45828: ARRAY
45829: PPUSH
45830: LD_VAR 0 2
45834: PUSH
45835: LD_INT 4
45837: ARRAY
45838: PPUSH
45839: CALL_OW 449
45843: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45844: LD_ADDR_VAR 0 3
45848: PUSH
45849: LD_VAR 0 5
45853: PPUSH
45854: LD_INT 1
45856: PPUSH
45857: CALL_OW 275
45861: PUSH
45862: LD_VAR 0 4
45866: PUSH
45867: LD_INT 1
45869: ARRAY
45870: GREATEREQUAL
45871: PUSH
45872: LD_VAR 0 5
45876: PPUSH
45877: LD_INT 2
45879: PPUSH
45880: CALL_OW 275
45884: PUSH
45885: LD_VAR 0 4
45889: PUSH
45890: LD_INT 2
45892: ARRAY
45893: GREATEREQUAL
45894: AND
45895: PUSH
45896: LD_VAR 0 5
45900: PPUSH
45901: LD_INT 3
45903: PPUSH
45904: CALL_OW 275
45908: PUSH
45909: LD_VAR 0 4
45913: PUSH
45914: LD_INT 3
45916: ARRAY
45917: GREATEREQUAL
45918: AND
45919: ST_TO_ADDR
// end ;
45920: LD_VAR 0 3
45924: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45925: LD_INT 0
45927: PPUSH
45928: PPUSH
45929: PPUSH
45930: PPUSH
// pom := GetBase ( building ) ;
45931: LD_ADDR_VAR 0 3
45935: PUSH
45936: LD_VAR 0 1
45940: PPUSH
45941: CALL_OW 274
45945: ST_TO_ADDR
// if not pom then
45946: LD_VAR 0 3
45950: NOT
45951: IFFALSE 45955
// exit ;
45953: GO 46125
// btype := GetBType ( building ) ;
45955: LD_ADDR_VAR 0 5
45959: PUSH
45960: LD_VAR 0 1
45964: PPUSH
45965: CALL_OW 266
45969: ST_TO_ADDR
// if btype = b_armoury then
45970: LD_VAR 0 5
45974: PUSH
45975: LD_INT 4
45977: EQUAL
45978: IFFALSE 45988
// btype := b_barracks ;
45980: LD_ADDR_VAR 0 5
45984: PUSH
45985: LD_INT 5
45987: ST_TO_ADDR
// if btype = b_depot then
45988: LD_VAR 0 5
45992: PUSH
45993: LD_INT 0
45995: EQUAL
45996: IFFALSE 46006
// btype := b_warehouse ;
45998: LD_ADDR_VAR 0 5
46002: PUSH
46003: LD_INT 1
46005: ST_TO_ADDR
// if btype = b_workshop then
46006: LD_VAR 0 5
46010: PUSH
46011: LD_INT 2
46013: EQUAL
46014: IFFALSE 46024
// btype := b_factory ;
46016: LD_ADDR_VAR 0 5
46020: PUSH
46021: LD_INT 3
46023: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46024: LD_ADDR_VAR 0 4
46028: PUSH
46029: LD_VAR 0 5
46033: PPUSH
46034: LD_VAR 0 1
46038: PPUSH
46039: CALL_OW 248
46043: PPUSH
46044: CALL_OW 450
46048: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46049: LD_ADDR_VAR 0 2
46053: PUSH
46054: LD_VAR 0 3
46058: PPUSH
46059: LD_INT 1
46061: PPUSH
46062: CALL_OW 275
46066: PUSH
46067: LD_VAR 0 4
46071: PUSH
46072: LD_INT 1
46074: ARRAY
46075: GREATEREQUAL
46076: PUSH
46077: LD_VAR 0 3
46081: PPUSH
46082: LD_INT 2
46084: PPUSH
46085: CALL_OW 275
46089: PUSH
46090: LD_VAR 0 4
46094: PUSH
46095: LD_INT 2
46097: ARRAY
46098: GREATEREQUAL
46099: AND
46100: PUSH
46101: LD_VAR 0 3
46105: PPUSH
46106: LD_INT 3
46108: PPUSH
46109: CALL_OW 275
46113: PUSH
46114: LD_VAR 0 4
46118: PUSH
46119: LD_INT 3
46121: ARRAY
46122: GREATEREQUAL
46123: AND
46124: ST_TO_ADDR
// end ;
46125: LD_VAR 0 2
46129: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
46130: LD_INT 0
46132: PPUSH
46133: PPUSH
46134: PPUSH
// pom := GetBase ( building ) ;
46135: LD_ADDR_VAR 0 4
46139: PUSH
46140: LD_VAR 0 1
46144: PPUSH
46145: CALL_OW 274
46149: ST_TO_ADDR
// if not pom then
46150: LD_VAR 0 4
46154: NOT
46155: IFFALSE 46159
// exit ;
46157: GO 46260
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46159: LD_ADDR_VAR 0 5
46163: PUSH
46164: LD_VAR 0 2
46168: PPUSH
46169: LD_VAR 0 1
46173: PPUSH
46174: CALL_OW 248
46178: PPUSH
46179: CALL_OW 450
46183: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46184: LD_ADDR_VAR 0 3
46188: PUSH
46189: LD_VAR 0 4
46193: PPUSH
46194: LD_INT 1
46196: PPUSH
46197: CALL_OW 275
46201: PUSH
46202: LD_VAR 0 5
46206: PUSH
46207: LD_INT 1
46209: ARRAY
46210: GREATEREQUAL
46211: PUSH
46212: LD_VAR 0 4
46216: PPUSH
46217: LD_INT 2
46219: PPUSH
46220: CALL_OW 275
46224: PUSH
46225: LD_VAR 0 5
46229: PUSH
46230: LD_INT 2
46232: ARRAY
46233: GREATEREQUAL
46234: AND
46235: PUSH
46236: LD_VAR 0 4
46240: PPUSH
46241: LD_INT 3
46243: PPUSH
46244: CALL_OW 275
46248: PUSH
46249: LD_VAR 0 5
46253: PUSH
46254: LD_INT 3
46256: ARRAY
46257: GREATEREQUAL
46258: AND
46259: ST_TO_ADDR
// end ;
46260: LD_VAR 0 3
46264: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
46265: LD_INT 0
46267: PPUSH
46268: PPUSH
46269: PPUSH
46270: PPUSH
46271: PPUSH
46272: PPUSH
46273: PPUSH
46274: PPUSH
46275: PPUSH
46276: PPUSH
46277: PPUSH
// result := false ;
46278: LD_ADDR_VAR 0 8
46282: PUSH
46283: LD_INT 0
46285: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
46286: LD_VAR 0 5
46290: NOT
46291: PUSH
46292: LD_VAR 0 1
46296: NOT
46297: OR
46298: PUSH
46299: LD_VAR 0 2
46303: NOT
46304: OR
46305: PUSH
46306: LD_VAR 0 3
46310: NOT
46311: OR
46312: IFFALSE 46316
// exit ;
46314: GO 47130
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46316: LD_ADDR_VAR 0 14
46320: PUSH
46321: LD_VAR 0 1
46325: PPUSH
46326: LD_VAR 0 2
46330: PPUSH
46331: LD_VAR 0 3
46335: PPUSH
46336: LD_VAR 0 4
46340: PPUSH
46341: LD_VAR 0 5
46345: PUSH
46346: LD_INT 1
46348: ARRAY
46349: PPUSH
46350: CALL_OW 248
46354: PPUSH
46355: LD_INT 0
46357: PPUSH
46358: CALL 48363 0 6
46362: ST_TO_ADDR
// if not hexes then
46363: LD_VAR 0 14
46367: NOT
46368: IFFALSE 46372
// exit ;
46370: GO 47130
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46372: LD_ADDR_VAR 0 17
46376: PUSH
46377: LD_VAR 0 5
46381: PPUSH
46382: LD_INT 22
46384: PUSH
46385: LD_VAR 0 13
46389: PPUSH
46390: CALL_OW 255
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 2
46401: PUSH
46402: LD_INT 30
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 30
46414: PUSH
46415: LD_INT 1
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: LIST
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PPUSH
46431: CALL_OW 72
46435: ST_TO_ADDR
// for i = 1 to hexes do
46436: LD_ADDR_VAR 0 9
46440: PUSH
46441: DOUBLE
46442: LD_INT 1
46444: DEC
46445: ST_TO_ADDR
46446: LD_VAR 0 14
46450: PUSH
46451: FOR_TO
46452: IFFALSE 47128
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46454: LD_ADDR_VAR 0 13
46458: PUSH
46459: LD_VAR 0 14
46463: PUSH
46464: LD_VAR 0 9
46468: ARRAY
46469: PUSH
46470: LD_INT 1
46472: ARRAY
46473: PPUSH
46474: LD_VAR 0 14
46478: PUSH
46479: LD_VAR 0 9
46483: ARRAY
46484: PUSH
46485: LD_INT 2
46487: ARRAY
46488: PPUSH
46489: CALL_OW 428
46493: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46494: LD_VAR 0 14
46498: PUSH
46499: LD_VAR 0 9
46503: ARRAY
46504: PUSH
46505: LD_INT 1
46507: ARRAY
46508: PPUSH
46509: LD_VAR 0 14
46513: PUSH
46514: LD_VAR 0 9
46518: ARRAY
46519: PUSH
46520: LD_INT 2
46522: ARRAY
46523: PPUSH
46524: CALL_OW 351
46528: PUSH
46529: LD_VAR 0 14
46533: PUSH
46534: LD_VAR 0 9
46538: ARRAY
46539: PUSH
46540: LD_INT 1
46542: ARRAY
46543: PPUSH
46544: LD_VAR 0 14
46548: PUSH
46549: LD_VAR 0 9
46553: ARRAY
46554: PUSH
46555: LD_INT 2
46557: ARRAY
46558: PPUSH
46559: CALL_OW 488
46563: NOT
46564: OR
46565: PUSH
46566: LD_VAR 0 13
46570: PPUSH
46571: CALL_OW 247
46575: PUSH
46576: LD_INT 3
46578: EQUAL
46579: OR
46580: IFFALSE 46586
// exit ;
46582: POP
46583: POP
46584: GO 47130
// if not tmp then
46586: LD_VAR 0 13
46590: NOT
46591: IFFALSE 46595
// continue ;
46593: GO 46451
// result := true ;
46595: LD_ADDR_VAR 0 8
46599: PUSH
46600: LD_INT 1
46602: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46603: LD_VAR 0 6
46607: PUSH
46608: LD_VAR 0 13
46612: PPUSH
46613: CALL_OW 247
46617: PUSH
46618: LD_INT 2
46620: EQUAL
46621: AND
46622: PUSH
46623: LD_VAR 0 13
46627: PPUSH
46628: CALL_OW 263
46632: PUSH
46633: LD_INT 1
46635: EQUAL
46636: AND
46637: IFFALSE 46801
// begin if IsDrivenBy ( tmp ) then
46639: LD_VAR 0 13
46643: PPUSH
46644: CALL_OW 311
46648: IFFALSE 46652
// continue ;
46650: GO 46451
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46652: LD_VAR 0 6
46656: PPUSH
46657: LD_INT 3
46659: PUSH
46660: LD_INT 60
46662: PUSH
46663: EMPTY
46664: LIST
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 3
46672: PUSH
46673: LD_INT 55
46675: PUSH
46676: EMPTY
46677: LIST
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PPUSH
46687: CALL_OW 72
46691: IFFALSE 46799
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46693: LD_ADDR_VAR 0 18
46697: PUSH
46698: LD_VAR 0 6
46702: PPUSH
46703: LD_INT 3
46705: PUSH
46706: LD_INT 60
46708: PUSH
46709: EMPTY
46710: LIST
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 3
46718: PUSH
46719: LD_INT 55
46721: PUSH
46722: EMPTY
46723: LIST
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PPUSH
46733: CALL_OW 72
46737: PUSH
46738: LD_INT 1
46740: ARRAY
46741: ST_TO_ADDR
// if IsInUnit ( driver ) then
46742: LD_VAR 0 18
46746: PPUSH
46747: CALL_OW 310
46751: IFFALSE 46762
// ComExit ( driver ) ;
46753: LD_VAR 0 18
46757: PPUSH
46758: CALL 72124 0 1
// AddComEnterUnit ( driver , tmp ) ;
46762: LD_VAR 0 18
46766: PPUSH
46767: LD_VAR 0 13
46771: PPUSH
46772: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46776: LD_VAR 0 18
46780: PPUSH
46781: LD_VAR 0 7
46785: PPUSH
46786: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46790: LD_VAR 0 18
46794: PPUSH
46795: CALL_OW 181
// end ; continue ;
46799: GO 46451
// end ; if not cleaners or not tmp in cleaners then
46801: LD_VAR 0 6
46805: NOT
46806: PUSH
46807: LD_VAR 0 13
46811: PUSH
46812: LD_VAR 0 6
46816: IN
46817: NOT
46818: OR
46819: IFFALSE 47126
// begin if dep then
46821: LD_VAR 0 17
46825: IFFALSE 46961
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46827: LD_ADDR_VAR 0 16
46831: PUSH
46832: LD_VAR 0 17
46836: PUSH
46837: LD_INT 1
46839: ARRAY
46840: PPUSH
46841: CALL_OW 250
46845: PPUSH
46846: LD_VAR 0 17
46850: PUSH
46851: LD_INT 1
46853: ARRAY
46854: PPUSH
46855: CALL_OW 254
46859: PPUSH
46860: LD_INT 5
46862: PPUSH
46863: CALL_OW 272
46867: PUSH
46868: LD_VAR 0 17
46872: PUSH
46873: LD_INT 1
46875: ARRAY
46876: PPUSH
46877: CALL_OW 251
46881: PPUSH
46882: LD_VAR 0 17
46886: PUSH
46887: LD_INT 1
46889: ARRAY
46890: PPUSH
46891: CALL_OW 254
46895: PPUSH
46896: LD_INT 5
46898: PPUSH
46899: CALL_OW 273
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46908: LD_VAR 0 16
46912: PUSH
46913: LD_INT 1
46915: ARRAY
46916: PPUSH
46917: LD_VAR 0 16
46921: PUSH
46922: LD_INT 2
46924: ARRAY
46925: PPUSH
46926: CALL_OW 488
46930: IFFALSE 46961
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46932: LD_VAR 0 13
46936: PPUSH
46937: LD_VAR 0 16
46941: PUSH
46942: LD_INT 1
46944: ARRAY
46945: PPUSH
46946: LD_VAR 0 16
46950: PUSH
46951: LD_INT 2
46953: ARRAY
46954: PPUSH
46955: CALL_OW 111
// continue ;
46959: GO 46451
// end ; end ; r := GetDir ( tmp ) ;
46961: LD_ADDR_VAR 0 15
46965: PUSH
46966: LD_VAR 0 13
46970: PPUSH
46971: CALL_OW 254
46975: ST_TO_ADDR
// if r = 5 then
46976: LD_VAR 0 15
46980: PUSH
46981: LD_INT 5
46983: EQUAL
46984: IFFALSE 46994
// r := 0 ;
46986: LD_ADDR_VAR 0 15
46990: PUSH
46991: LD_INT 0
46993: ST_TO_ADDR
// for j = r to 5 do
46994: LD_ADDR_VAR 0 10
46998: PUSH
46999: DOUBLE
47000: LD_VAR 0 15
47004: DEC
47005: ST_TO_ADDR
47006: LD_INT 5
47008: PUSH
47009: FOR_TO
47010: IFFALSE 47124
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
47012: LD_ADDR_VAR 0 11
47016: PUSH
47017: LD_VAR 0 13
47021: PPUSH
47022: CALL_OW 250
47026: PPUSH
47027: LD_VAR 0 10
47031: PPUSH
47032: LD_INT 2
47034: PPUSH
47035: CALL_OW 272
47039: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47040: LD_ADDR_VAR 0 12
47044: PUSH
47045: LD_VAR 0 13
47049: PPUSH
47050: CALL_OW 251
47054: PPUSH
47055: LD_VAR 0 10
47059: PPUSH
47060: LD_INT 2
47062: PPUSH
47063: CALL_OW 273
47067: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47068: LD_VAR 0 11
47072: PPUSH
47073: LD_VAR 0 12
47077: PPUSH
47078: CALL_OW 488
47082: PUSH
47083: LD_VAR 0 11
47087: PPUSH
47088: LD_VAR 0 12
47092: PPUSH
47093: CALL_OW 428
47097: NOT
47098: AND
47099: IFFALSE 47122
// begin ComMoveXY ( tmp , _x , _y ) ;
47101: LD_VAR 0 13
47105: PPUSH
47106: LD_VAR 0 11
47110: PPUSH
47111: LD_VAR 0 12
47115: PPUSH
47116: CALL_OW 111
// break ;
47120: GO 47124
// end ; end ;
47122: GO 47009
47124: POP
47125: POP
// end ; end ;
47126: GO 46451
47128: POP
47129: POP
// end ;
47130: LD_VAR 0 8
47134: RET
// export function BuildingTechInvented ( side , btype ) ; begin
47135: LD_INT 0
47137: PPUSH
// result := true ;
47138: LD_ADDR_VAR 0 3
47142: PUSH
47143: LD_INT 1
47145: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
47146: LD_VAR 0 2
47150: PUSH
47151: LD_INT 24
47153: DOUBLE
47154: EQUAL
47155: IFTRUE 47165
47157: LD_INT 33
47159: DOUBLE
47160: EQUAL
47161: IFTRUE 47165
47163: GO 47190
47165: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
47166: LD_ADDR_VAR 0 3
47170: PUSH
47171: LD_INT 32
47173: PPUSH
47174: LD_VAR 0 1
47178: PPUSH
47179: CALL_OW 321
47183: PUSH
47184: LD_INT 2
47186: EQUAL
47187: ST_TO_ADDR
47188: GO 47506
47190: LD_INT 20
47192: DOUBLE
47193: EQUAL
47194: IFTRUE 47198
47196: GO 47223
47198: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
47199: LD_ADDR_VAR 0 3
47203: PUSH
47204: LD_INT 6
47206: PPUSH
47207: LD_VAR 0 1
47211: PPUSH
47212: CALL_OW 321
47216: PUSH
47217: LD_INT 2
47219: EQUAL
47220: ST_TO_ADDR
47221: GO 47506
47223: LD_INT 22
47225: DOUBLE
47226: EQUAL
47227: IFTRUE 47237
47229: LD_INT 36
47231: DOUBLE
47232: EQUAL
47233: IFTRUE 47237
47235: GO 47262
47237: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
47238: LD_ADDR_VAR 0 3
47242: PUSH
47243: LD_INT 15
47245: PPUSH
47246: LD_VAR 0 1
47250: PPUSH
47251: CALL_OW 321
47255: PUSH
47256: LD_INT 2
47258: EQUAL
47259: ST_TO_ADDR
47260: GO 47506
47262: LD_INT 30
47264: DOUBLE
47265: EQUAL
47266: IFTRUE 47270
47268: GO 47295
47270: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
47271: LD_ADDR_VAR 0 3
47275: PUSH
47276: LD_INT 20
47278: PPUSH
47279: LD_VAR 0 1
47283: PPUSH
47284: CALL_OW 321
47288: PUSH
47289: LD_INT 2
47291: EQUAL
47292: ST_TO_ADDR
47293: GO 47506
47295: LD_INT 28
47297: DOUBLE
47298: EQUAL
47299: IFTRUE 47309
47301: LD_INT 21
47303: DOUBLE
47304: EQUAL
47305: IFTRUE 47309
47307: GO 47334
47309: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47310: LD_ADDR_VAR 0 3
47314: PUSH
47315: LD_INT 21
47317: PPUSH
47318: LD_VAR 0 1
47322: PPUSH
47323: CALL_OW 321
47327: PUSH
47328: LD_INT 2
47330: EQUAL
47331: ST_TO_ADDR
47332: GO 47506
47334: LD_INT 16
47336: DOUBLE
47337: EQUAL
47338: IFTRUE 47342
47340: GO 47367
47342: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47343: LD_ADDR_VAR 0 3
47347: PUSH
47348: LD_INT 84
47350: PPUSH
47351: LD_VAR 0 1
47355: PPUSH
47356: CALL_OW 321
47360: PUSH
47361: LD_INT 2
47363: EQUAL
47364: ST_TO_ADDR
47365: GO 47506
47367: LD_INT 19
47369: DOUBLE
47370: EQUAL
47371: IFTRUE 47381
47373: LD_INT 23
47375: DOUBLE
47376: EQUAL
47377: IFTRUE 47381
47379: GO 47406
47381: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47382: LD_ADDR_VAR 0 3
47386: PUSH
47387: LD_INT 83
47389: PPUSH
47390: LD_VAR 0 1
47394: PPUSH
47395: CALL_OW 321
47399: PUSH
47400: LD_INT 2
47402: EQUAL
47403: ST_TO_ADDR
47404: GO 47506
47406: LD_INT 17
47408: DOUBLE
47409: EQUAL
47410: IFTRUE 47414
47412: GO 47439
47414: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47415: LD_ADDR_VAR 0 3
47419: PUSH
47420: LD_INT 39
47422: PPUSH
47423: LD_VAR 0 1
47427: PPUSH
47428: CALL_OW 321
47432: PUSH
47433: LD_INT 2
47435: EQUAL
47436: ST_TO_ADDR
47437: GO 47506
47439: LD_INT 18
47441: DOUBLE
47442: EQUAL
47443: IFTRUE 47447
47445: GO 47472
47447: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47448: LD_ADDR_VAR 0 3
47452: PUSH
47453: LD_INT 40
47455: PPUSH
47456: LD_VAR 0 1
47460: PPUSH
47461: CALL_OW 321
47465: PUSH
47466: LD_INT 2
47468: EQUAL
47469: ST_TO_ADDR
47470: GO 47506
47472: LD_INT 27
47474: DOUBLE
47475: EQUAL
47476: IFTRUE 47480
47478: GO 47505
47480: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47481: LD_ADDR_VAR 0 3
47485: PUSH
47486: LD_INT 35
47488: PPUSH
47489: LD_VAR 0 1
47493: PPUSH
47494: CALL_OW 321
47498: PUSH
47499: LD_INT 2
47501: EQUAL
47502: ST_TO_ADDR
47503: GO 47506
47505: POP
// end ;
47506: LD_VAR 0 3
47510: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47511: LD_INT 0
47513: PPUSH
47514: PPUSH
47515: PPUSH
47516: PPUSH
47517: PPUSH
47518: PPUSH
47519: PPUSH
47520: PPUSH
47521: PPUSH
47522: PPUSH
47523: PPUSH
// result := false ;
47524: LD_ADDR_VAR 0 6
47528: PUSH
47529: LD_INT 0
47531: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47532: LD_VAR 0 1
47536: NOT
47537: PUSH
47538: LD_VAR 0 1
47542: PPUSH
47543: CALL_OW 266
47547: PUSH
47548: LD_INT 0
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: IN
47558: NOT
47559: OR
47560: PUSH
47561: LD_VAR 0 2
47565: NOT
47566: OR
47567: PUSH
47568: LD_VAR 0 5
47572: PUSH
47573: LD_INT 0
47575: PUSH
47576: LD_INT 1
47578: PUSH
47579: LD_INT 2
47581: PUSH
47582: LD_INT 3
47584: PUSH
47585: LD_INT 4
47587: PUSH
47588: LD_INT 5
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: IN
47599: NOT
47600: OR
47601: PUSH
47602: LD_VAR 0 3
47606: PPUSH
47607: LD_VAR 0 4
47611: PPUSH
47612: CALL_OW 488
47616: NOT
47617: OR
47618: IFFALSE 47622
// exit ;
47620: GO 48358
// side := GetSide ( depot ) ;
47622: LD_ADDR_VAR 0 9
47626: PUSH
47627: LD_VAR 0 1
47631: PPUSH
47632: CALL_OW 255
47636: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47637: LD_VAR 0 9
47641: PPUSH
47642: LD_VAR 0 2
47646: PPUSH
47647: CALL 47135 0 2
47651: NOT
47652: IFFALSE 47656
// exit ;
47654: GO 48358
// pom := GetBase ( depot ) ;
47656: LD_ADDR_VAR 0 10
47660: PUSH
47661: LD_VAR 0 1
47665: PPUSH
47666: CALL_OW 274
47670: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47671: LD_ADDR_VAR 0 11
47675: PUSH
47676: LD_VAR 0 2
47680: PPUSH
47681: LD_VAR 0 1
47685: PPUSH
47686: CALL_OW 248
47690: PPUSH
47691: CALL_OW 450
47695: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47696: LD_VAR 0 10
47700: PPUSH
47701: LD_INT 1
47703: PPUSH
47704: CALL_OW 275
47708: PUSH
47709: LD_VAR 0 11
47713: PUSH
47714: LD_INT 1
47716: ARRAY
47717: GREATEREQUAL
47718: PUSH
47719: LD_VAR 0 10
47723: PPUSH
47724: LD_INT 2
47726: PPUSH
47727: CALL_OW 275
47731: PUSH
47732: LD_VAR 0 11
47736: PUSH
47737: LD_INT 2
47739: ARRAY
47740: GREATEREQUAL
47741: AND
47742: PUSH
47743: LD_VAR 0 10
47747: PPUSH
47748: LD_INT 3
47750: PPUSH
47751: CALL_OW 275
47755: PUSH
47756: LD_VAR 0 11
47760: PUSH
47761: LD_INT 3
47763: ARRAY
47764: GREATEREQUAL
47765: AND
47766: NOT
47767: IFFALSE 47771
// exit ;
47769: GO 48358
// if GetBType ( depot ) = b_depot then
47771: LD_VAR 0 1
47775: PPUSH
47776: CALL_OW 266
47780: PUSH
47781: LD_INT 0
47783: EQUAL
47784: IFFALSE 47796
// dist := 28 else
47786: LD_ADDR_VAR 0 14
47790: PUSH
47791: LD_INT 28
47793: ST_TO_ADDR
47794: GO 47804
// dist := 36 ;
47796: LD_ADDR_VAR 0 14
47800: PUSH
47801: LD_INT 36
47803: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47804: LD_VAR 0 1
47808: PPUSH
47809: LD_VAR 0 3
47813: PPUSH
47814: LD_VAR 0 4
47818: PPUSH
47819: CALL_OW 297
47823: PUSH
47824: LD_VAR 0 14
47828: GREATER
47829: IFFALSE 47833
// exit ;
47831: GO 48358
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47833: LD_ADDR_VAR 0 12
47837: PUSH
47838: LD_VAR 0 2
47842: PPUSH
47843: LD_VAR 0 3
47847: PPUSH
47848: LD_VAR 0 4
47852: PPUSH
47853: LD_VAR 0 5
47857: PPUSH
47858: LD_VAR 0 1
47862: PPUSH
47863: CALL_OW 248
47867: PPUSH
47868: LD_INT 0
47870: PPUSH
47871: CALL 48363 0 6
47875: ST_TO_ADDR
// if not hexes then
47876: LD_VAR 0 12
47880: NOT
47881: IFFALSE 47885
// exit ;
47883: GO 48358
// hex := GetHexInfo ( x , y ) ;
47885: LD_ADDR_VAR 0 15
47889: PUSH
47890: LD_VAR 0 3
47894: PPUSH
47895: LD_VAR 0 4
47899: PPUSH
47900: CALL_OW 546
47904: ST_TO_ADDR
// if hex [ 1 ] then
47905: LD_VAR 0 15
47909: PUSH
47910: LD_INT 1
47912: ARRAY
47913: IFFALSE 47917
// exit ;
47915: GO 48358
// height := hex [ 2 ] ;
47917: LD_ADDR_VAR 0 13
47921: PUSH
47922: LD_VAR 0 15
47926: PUSH
47927: LD_INT 2
47929: ARRAY
47930: ST_TO_ADDR
// for i = 1 to hexes do
47931: LD_ADDR_VAR 0 7
47935: PUSH
47936: DOUBLE
47937: LD_INT 1
47939: DEC
47940: ST_TO_ADDR
47941: LD_VAR 0 12
47945: PUSH
47946: FOR_TO
47947: IFFALSE 48277
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47949: LD_VAR 0 12
47953: PUSH
47954: LD_VAR 0 7
47958: ARRAY
47959: PUSH
47960: LD_INT 1
47962: ARRAY
47963: PPUSH
47964: LD_VAR 0 12
47968: PUSH
47969: LD_VAR 0 7
47973: ARRAY
47974: PUSH
47975: LD_INT 2
47977: ARRAY
47978: PPUSH
47979: CALL_OW 488
47983: NOT
47984: PUSH
47985: LD_VAR 0 12
47989: PUSH
47990: LD_VAR 0 7
47994: ARRAY
47995: PUSH
47996: LD_INT 1
47998: ARRAY
47999: PPUSH
48000: LD_VAR 0 12
48004: PUSH
48005: LD_VAR 0 7
48009: ARRAY
48010: PUSH
48011: LD_INT 2
48013: ARRAY
48014: PPUSH
48015: CALL_OW 428
48019: PUSH
48020: LD_INT 0
48022: GREATER
48023: OR
48024: PUSH
48025: LD_VAR 0 12
48029: PUSH
48030: LD_VAR 0 7
48034: ARRAY
48035: PUSH
48036: LD_INT 1
48038: ARRAY
48039: PPUSH
48040: LD_VAR 0 12
48044: PUSH
48045: LD_VAR 0 7
48049: ARRAY
48050: PUSH
48051: LD_INT 2
48053: ARRAY
48054: PPUSH
48055: CALL_OW 351
48059: OR
48060: IFFALSE 48066
// exit ;
48062: POP
48063: POP
48064: GO 48358
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48066: LD_ADDR_VAR 0 8
48070: PUSH
48071: LD_VAR 0 12
48075: PUSH
48076: LD_VAR 0 7
48080: ARRAY
48081: PUSH
48082: LD_INT 1
48084: ARRAY
48085: PPUSH
48086: LD_VAR 0 12
48090: PUSH
48091: LD_VAR 0 7
48095: ARRAY
48096: PUSH
48097: LD_INT 2
48099: ARRAY
48100: PPUSH
48101: CALL_OW 546
48105: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48106: LD_VAR 0 8
48110: PUSH
48111: LD_INT 1
48113: ARRAY
48114: PUSH
48115: LD_VAR 0 8
48119: PUSH
48120: LD_INT 2
48122: ARRAY
48123: PUSH
48124: LD_VAR 0 13
48128: PUSH
48129: LD_INT 2
48131: PLUS
48132: GREATER
48133: OR
48134: PUSH
48135: LD_VAR 0 8
48139: PUSH
48140: LD_INT 2
48142: ARRAY
48143: PUSH
48144: LD_VAR 0 13
48148: PUSH
48149: LD_INT 2
48151: MINUS
48152: LESS
48153: OR
48154: PUSH
48155: LD_VAR 0 8
48159: PUSH
48160: LD_INT 3
48162: ARRAY
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: LD_INT 8
48169: PUSH
48170: LD_INT 9
48172: PUSH
48173: LD_INT 10
48175: PUSH
48176: LD_INT 11
48178: PUSH
48179: LD_INT 12
48181: PUSH
48182: LD_INT 13
48184: PUSH
48185: LD_INT 16
48187: PUSH
48188: LD_INT 17
48190: PUSH
48191: LD_INT 18
48193: PUSH
48194: LD_INT 19
48196: PUSH
48197: LD_INT 20
48199: PUSH
48200: LD_INT 21
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: IN
48218: NOT
48219: OR
48220: PUSH
48221: LD_VAR 0 8
48225: PUSH
48226: LD_INT 5
48228: ARRAY
48229: NOT
48230: OR
48231: PUSH
48232: LD_VAR 0 8
48236: PUSH
48237: LD_INT 6
48239: ARRAY
48240: PUSH
48241: LD_INT 1
48243: PUSH
48244: LD_INT 2
48246: PUSH
48247: LD_INT 7
48249: PUSH
48250: LD_INT 9
48252: PUSH
48253: LD_INT 10
48255: PUSH
48256: LD_INT 11
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: IN
48267: NOT
48268: OR
48269: IFFALSE 48275
// exit ;
48271: POP
48272: POP
48273: GO 48358
// end ;
48275: GO 47946
48277: POP
48278: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48279: LD_VAR 0 9
48283: PPUSH
48284: LD_VAR 0 3
48288: PPUSH
48289: LD_VAR 0 4
48293: PPUSH
48294: LD_INT 20
48296: PPUSH
48297: CALL 40310 0 4
48301: PUSH
48302: LD_INT 4
48304: ARRAY
48305: IFFALSE 48309
// exit ;
48307: GO 48358
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48309: LD_VAR 0 2
48313: PUSH
48314: LD_INT 29
48316: PUSH
48317: LD_INT 30
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: IN
48324: PUSH
48325: LD_VAR 0 3
48329: PPUSH
48330: LD_VAR 0 4
48334: PPUSH
48335: LD_VAR 0 9
48339: PPUSH
48340: CALL_OW 440
48344: NOT
48345: AND
48346: IFFALSE 48350
// exit ;
48348: GO 48358
// result := true ;
48350: LD_ADDR_VAR 0 6
48354: PUSH
48355: LD_INT 1
48357: ST_TO_ADDR
// end ;
48358: LD_VAR 0 6
48362: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48363: LD_INT 0
48365: PPUSH
48366: PPUSH
48367: PPUSH
48368: PPUSH
48369: PPUSH
48370: PPUSH
48371: PPUSH
48372: PPUSH
48373: PPUSH
48374: PPUSH
48375: PPUSH
48376: PPUSH
48377: PPUSH
48378: PPUSH
48379: PPUSH
48380: PPUSH
48381: PPUSH
48382: PPUSH
48383: PPUSH
48384: PPUSH
48385: PPUSH
48386: PPUSH
48387: PPUSH
48388: PPUSH
48389: PPUSH
48390: PPUSH
48391: PPUSH
48392: PPUSH
48393: PPUSH
48394: PPUSH
48395: PPUSH
48396: PPUSH
48397: PPUSH
48398: PPUSH
48399: PPUSH
48400: PPUSH
48401: PPUSH
48402: PPUSH
48403: PPUSH
48404: PPUSH
48405: PPUSH
48406: PPUSH
48407: PPUSH
48408: PPUSH
48409: PPUSH
48410: PPUSH
48411: PPUSH
48412: PPUSH
48413: PPUSH
48414: PPUSH
48415: PPUSH
48416: PPUSH
48417: PPUSH
48418: PPUSH
48419: PPUSH
48420: PPUSH
48421: PPUSH
48422: PPUSH
// result = [ ] ;
48423: LD_ADDR_VAR 0 7
48427: PUSH
48428: EMPTY
48429: ST_TO_ADDR
// temp_list = [ ] ;
48430: LD_ADDR_VAR 0 9
48434: PUSH
48435: EMPTY
48436: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48437: LD_VAR 0 4
48441: PUSH
48442: LD_INT 0
48444: PUSH
48445: LD_INT 1
48447: PUSH
48448: LD_INT 2
48450: PUSH
48451: LD_INT 3
48453: PUSH
48454: LD_INT 4
48456: PUSH
48457: LD_INT 5
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: IN
48468: NOT
48469: PUSH
48470: LD_VAR 0 1
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: IN
48485: PUSH
48486: LD_VAR 0 5
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: LD_INT 2
48496: PUSH
48497: LD_INT 3
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: LIST
48504: IN
48505: NOT
48506: AND
48507: OR
48508: IFFALSE 48512
// exit ;
48510: GO 66903
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48512: LD_VAR 0 1
48516: PUSH
48517: LD_INT 6
48519: PUSH
48520: LD_INT 7
48522: PUSH
48523: LD_INT 8
48525: PUSH
48526: LD_INT 13
48528: PUSH
48529: LD_INT 12
48531: PUSH
48532: LD_INT 15
48534: PUSH
48535: LD_INT 11
48537: PUSH
48538: LD_INT 14
48540: PUSH
48541: LD_INT 10
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: IN
48555: IFFALSE 48565
// btype = b_lab ;
48557: LD_ADDR_VAR 0 1
48561: PUSH
48562: LD_INT 6
48564: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48565: LD_VAR 0 6
48569: PUSH
48570: LD_INT 0
48572: PUSH
48573: LD_INT 1
48575: PUSH
48576: LD_INT 2
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: LIST
48583: IN
48584: NOT
48585: PUSH
48586: LD_VAR 0 1
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: LD_INT 1
48596: PUSH
48597: LD_INT 2
48599: PUSH
48600: LD_INT 3
48602: PUSH
48603: LD_INT 6
48605: PUSH
48606: LD_INT 36
48608: PUSH
48609: LD_INT 4
48611: PUSH
48612: LD_INT 5
48614: PUSH
48615: LD_INT 31
48617: PUSH
48618: LD_INT 32
48620: PUSH
48621: LD_INT 33
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: IN
48637: NOT
48638: PUSH
48639: LD_VAR 0 6
48643: PUSH
48644: LD_INT 1
48646: EQUAL
48647: AND
48648: OR
48649: PUSH
48650: LD_VAR 0 1
48654: PUSH
48655: LD_INT 2
48657: PUSH
48658: LD_INT 3
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: IN
48665: NOT
48666: PUSH
48667: LD_VAR 0 6
48671: PUSH
48672: LD_INT 2
48674: EQUAL
48675: AND
48676: OR
48677: IFFALSE 48687
// mode = 0 ;
48679: LD_ADDR_VAR 0 6
48683: PUSH
48684: LD_INT 0
48686: ST_TO_ADDR
// case mode of 0 :
48687: LD_VAR 0 6
48691: PUSH
48692: LD_INT 0
48694: DOUBLE
48695: EQUAL
48696: IFTRUE 48700
48698: GO 60153
48700: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48701: LD_ADDR_VAR 0 11
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: LD_INT 1
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: LD_INT 0
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: LD_INT 1
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 1
48759: NEG
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: LD_INT 1
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 1
48782: NEG
48783: PUSH
48784: LD_INT 2
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: LD_INT 2
48797: NEG
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: LD_INT 1
48808: NEG
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 1
48816: PUSH
48817: LD_INT 2
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 0
48826: PUSH
48827: LD_INT 2
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 1
48836: NEG
48837: PUSH
48838: LD_INT 1
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: PUSH
48848: LD_INT 3
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: LD_INT 3
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: LD_INT 2
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48894: LD_ADDR_VAR 0 12
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: LD_INT 0
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: LD_INT 1
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 1
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 1
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 0
48942: PUSH
48943: LD_INT 1
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 1
48952: NEG
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 1
48975: PUSH
48976: LD_INT 1
48978: NEG
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 2
48986: PUSH
48987: LD_INT 0
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 2
48996: PUSH
48997: LD_INT 1
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 1
49006: NEG
49007: PUSH
49008: LD_INT 1
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 2
49017: NEG
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 2
49028: NEG
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 2
49040: NEG
49041: PUSH
49042: LD_INT 1
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 3
49051: NEG
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 3
49062: NEG
49063: PUSH
49064: LD_INT 1
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49090: LD_ADDR_VAR 0 13
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: LD_INT 0
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 1
49128: PUSH
49129: LD_INT 1
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 1
49159: NEG
49160: PUSH
49161: LD_INT 1
49163: NEG
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 1
49171: NEG
49172: PUSH
49173: LD_INT 2
49175: NEG
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 2
49183: PUSH
49184: LD_INT 1
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 2
49193: PUSH
49194: LD_INT 2
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: LD_INT 2
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 2
49213: NEG
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 2
49225: NEG
49226: PUSH
49227: LD_INT 2
49229: NEG
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 2
49237: NEG
49238: PUSH
49239: LD_INT 3
49241: NEG
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 3
49249: NEG
49250: PUSH
49251: LD_INT 2
49253: NEG
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 3
49261: NEG
49262: PUSH
49263: LD_INT 3
49265: NEG
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49289: LD_ADDR_VAR 0 14
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: LD_INT 0
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: LD_INT 1
49309: NEG
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: LD_INT 0
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 0
49337: PUSH
49338: LD_INT 1
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: LD_INT 0
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 1
49370: NEG
49371: PUSH
49372: LD_INT 2
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: LD_INT 2
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 1
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: LD_INT 2
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 0
49414: PUSH
49415: LD_INT 2
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 1
49424: NEG
49425: PUSH
49426: LD_INT 1
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 1
49435: NEG
49436: PUSH
49437: LD_INT 3
49439: NEG
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 0
49447: PUSH
49448: LD_INT 3
49450: NEG
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: PUSH
49459: LD_INT 2
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49485: LD_ADDR_VAR 0 15
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: LD_INT 0
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: LD_INT 1
49505: NEG
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: PUSH
49524: LD_INT 1
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 0
49533: PUSH
49534: LD_INT 1
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 1
49543: NEG
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 1
49554: NEG
49555: PUSH
49556: LD_INT 1
49558: NEG
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 1
49566: PUSH
49567: LD_INT 1
49569: NEG
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: LD_INT 0
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 2
49587: PUSH
49588: LD_INT 1
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 2
49608: NEG
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 2
49619: NEG
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 2
49631: PUSH
49632: LD_INT 1
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 3
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 3
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49678: LD_ADDR_VAR 0 16
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: LD_INT 0
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: LD_INT 1
49698: NEG
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 1
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 1
49716: PUSH
49717: LD_INT 1
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: LD_INT 1
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 1
49736: NEG
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: NEG
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 1
49759: NEG
49760: PUSH
49761: LD_INT 2
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 2
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 2
49781: PUSH
49782: LD_INT 2
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 1
49791: PUSH
49792: LD_INT 2
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 2
49801: NEG
49802: PUSH
49803: LD_INT 1
49805: NEG
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 2
49813: NEG
49814: PUSH
49815: LD_INT 2
49817: NEG
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 3
49825: PUSH
49826: LD_INT 2
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 3
49835: PUSH
49836: LD_INT 3
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 2
49845: PUSH
49846: LD_INT 3
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49871: LD_ADDR_VAR 0 17
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 0
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 1
49899: PUSH
49900: LD_INT 0
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 1
49909: PUSH
49910: LD_INT 1
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 0
49919: PUSH
49920: LD_INT 1
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: NEG
49930: PUSH
49931: LD_INT 0
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 1
49940: NEG
49941: PUSH
49942: LD_INT 1
49944: NEG
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 1
49952: NEG
49953: PUSH
49954: LD_INT 2
49956: NEG
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: LD_INT 2
49967: NEG
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 1
49975: PUSH
49976: LD_INT 1
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 2
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 2
49996: PUSH
49997: LD_INT 1
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 2
50006: PUSH
50007: LD_INT 2
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 1
50016: PUSH
50017: LD_INT 2
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: LD_INT 2
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 1
50036: NEG
50037: PUSH
50038: LD_INT 1
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 2
50047: NEG
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 2
50058: NEG
50059: PUSH
50060: LD_INT 1
50062: NEG
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 2
50070: NEG
50071: PUSH
50072: LD_INT 2
50074: NEG
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50101: LD_ADDR_VAR 0 18
50105: PUSH
50106: LD_INT 0
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 0
50118: PUSH
50119: LD_INT 1
50121: NEG
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 1
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 0
50149: PUSH
50150: LD_INT 1
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 1
50159: NEG
50160: PUSH
50161: LD_INT 0
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: LD_INT 2
50186: NEG
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: LD_INT 2
50197: NEG
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 1
50205: PUSH
50206: LD_INT 1
50208: NEG
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 2
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 2
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 2
50236: PUSH
50237: LD_INT 2
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: LD_INT 2
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 0
50256: PUSH
50257: LD_INT 2
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: LD_INT 1
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 2
50277: NEG
50278: PUSH
50279: LD_INT 0
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 2
50288: NEG
50289: PUSH
50290: LD_INT 1
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 2
50300: NEG
50301: PUSH
50302: LD_INT 2
50304: NEG
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50331: LD_ADDR_VAR 0 19
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 0
50348: PUSH
50349: LD_INT 1
50351: NEG
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 1
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 1
50369: PUSH
50370: LD_INT 1
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 0
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 1
50389: NEG
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 1
50400: NEG
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: LD_INT 2
50416: NEG
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: LD_INT 2
50427: NEG
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 1
50435: PUSH
50436: LD_INT 1
50438: NEG
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 2
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 2
50456: PUSH
50457: LD_INT 1
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 2
50466: PUSH
50467: LD_INT 2
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: LD_INT 2
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: LD_INT 2
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 2
50507: NEG
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 2
50518: NEG
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 2
50530: NEG
50531: PUSH
50532: LD_INT 2
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50561: LD_ADDR_VAR 0 20
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 1
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: LD_INT 1
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: LD_INT 1
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 1
50619: NEG
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: LD_INT 1
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 1
50642: NEG
50643: PUSH
50644: LD_INT 2
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: LD_INT 2
50657: NEG
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: LD_INT 1
50668: NEG
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 2
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 2
50686: PUSH
50687: LD_INT 1
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 2
50696: PUSH
50697: LD_INT 2
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 1
50706: PUSH
50707: LD_INT 2
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: LD_INT 2
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 1
50726: NEG
50727: PUSH
50728: LD_INT 1
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 2
50737: NEG
50738: PUSH
50739: LD_INT 0
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 2
50748: NEG
50749: PUSH
50750: LD_INT 1
50752: NEG
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 2
50760: NEG
50761: PUSH
50762: LD_INT 2
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50791: LD_ADDR_VAR 0 21
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: LD_INT 1
50811: NEG
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 1
50819: PUSH
50820: LD_INT 0
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 1
50829: PUSH
50830: LD_INT 1
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 0
50839: PUSH
50840: LD_INT 1
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 1
50849: NEG
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 1
50860: NEG
50861: PUSH
50862: LD_INT 1
50864: NEG
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: LD_INT 2
50876: NEG
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: LD_INT 2
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 1
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 2
50906: PUSH
50907: LD_INT 0
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 2
50916: PUSH
50917: LD_INT 1
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 2
50926: PUSH
50927: LD_INT 2
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: LD_INT 2
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: LD_INT 2
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 1
50956: NEG
50957: PUSH
50958: LD_INT 1
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 2
50967: NEG
50968: PUSH
50969: LD_INT 0
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 2
50978: NEG
50979: PUSH
50980: LD_INT 1
50982: NEG
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 2
50990: NEG
50991: PUSH
50992: LD_INT 2
50994: NEG
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51021: LD_ADDR_VAR 0 22
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 0
51038: PUSH
51039: LD_INT 1
51041: NEG
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 1
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 1
51059: PUSH
51060: LD_INT 1
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: LD_INT 1
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 1
51079: NEG
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 1
51090: NEG
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: LD_INT 2
51106: NEG
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: LD_INT 2
51117: NEG
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 1
51125: PUSH
51126: LD_INT 1
51128: NEG
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 2
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 2
51146: PUSH
51147: LD_INT 1
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 2
51156: PUSH
51157: LD_INT 2
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: LD_INT 2
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: LD_INT 2
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: NEG
51187: PUSH
51188: LD_INT 1
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 2
51197: NEG
51198: PUSH
51199: LD_INT 0
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 2
51208: NEG
51209: PUSH
51210: LD_INT 1
51212: NEG
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 2
51220: NEG
51221: PUSH
51222: LD_INT 2
51224: NEG
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51251: LD_ADDR_VAR 0 23
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: LD_INT 0
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 0
51268: PUSH
51269: LD_INT 1
51271: NEG
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 1
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 1
51289: PUSH
51290: LD_INT 1
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 0
51299: PUSH
51300: LD_INT 1
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 1
51309: NEG
51310: PUSH
51311: LD_INT 0
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 1
51320: NEG
51321: PUSH
51322: LD_INT 1
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 1
51332: NEG
51333: PUSH
51334: LD_INT 2
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: LD_INT 2
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: LD_INT 1
51358: NEG
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 2
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 2
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 2
51386: PUSH
51387: LD_INT 2
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: LD_INT 2
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: LD_INT 2
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: LD_INT 1
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 2
51427: NEG
51428: PUSH
51429: LD_INT 0
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 2
51438: NEG
51439: PUSH
51440: LD_INT 1
51442: NEG
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 2
51450: NEG
51451: PUSH
51452: LD_INT 2
51454: NEG
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 2
51462: NEG
51463: PUSH
51464: LD_INT 3
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: NEG
51475: PUSH
51476: LD_INT 3
51478: NEG
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 1
51486: PUSH
51487: LD_INT 2
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 2
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51531: LD_ADDR_VAR 0 24
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: LD_INT 0
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: LD_INT 1
51551: NEG
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 1
51559: PUSH
51560: LD_INT 0
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 1
51569: PUSH
51570: LD_INT 1
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: LD_INT 1
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: LD_INT 0
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 1
51600: NEG
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 1
51612: NEG
51613: PUSH
51614: LD_INT 2
51616: NEG
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: LD_INT 2
51627: NEG
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 1
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 2
51646: PUSH
51647: LD_INT 0
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 2
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 2
51666: PUSH
51667: LD_INT 2
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: LD_INT 2
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: LD_INT 2
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: NEG
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 2
51707: NEG
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 2
51718: NEG
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 2
51730: NEG
51731: PUSH
51732: LD_INT 2
51734: NEG
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 1
51742: PUSH
51743: LD_INT 2
51745: NEG
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 2
51753: PUSH
51754: LD_INT 1
51756: NEG
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 3
51764: PUSH
51765: LD_INT 1
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 3
51774: PUSH
51775: LD_INT 2
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51807: LD_ADDR_VAR 0 25
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: LD_INT 1
51827: NEG
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 1
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: LD_INT 1
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 0
51855: PUSH
51856: LD_INT 1
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 1
51865: NEG
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: LD_INT 1
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 1
51888: NEG
51889: PUSH
51890: LD_INT 2
51892: NEG
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: LD_INT 2
51903: NEG
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: LD_INT 1
51914: NEG
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 2
51922: PUSH
51923: LD_INT 0
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 2
51932: PUSH
51933: LD_INT 1
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 2
51942: PUSH
51943: LD_INT 2
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: LD_INT 2
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 0
51962: PUSH
51963: LD_INT 2
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 1
51972: NEG
51973: PUSH
51974: LD_INT 1
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 2
51983: NEG
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 2
51994: NEG
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 2
52006: NEG
52007: PUSH
52008: LD_INT 2
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 3
52018: PUSH
52019: LD_INT 1
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 3
52028: PUSH
52029: LD_INT 2
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 2
52038: PUSH
52039: LD_INT 3
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: LD_INT 3
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52081: LD_ADDR_VAR 0 26
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 0
52098: PUSH
52099: LD_INT 1
52101: NEG
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 1
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 0
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: LD_INT 1
52154: NEG
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: LD_INT 2
52166: NEG
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: LD_INT 2
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 2
52196: PUSH
52197: LD_INT 0
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 2
52206: PUSH
52207: LD_INT 1
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 2
52216: PUSH
52217: LD_INT 2
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: LD_INT 2
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: LD_INT 2
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 2
52257: NEG
52258: PUSH
52259: LD_INT 0
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 2
52268: NEG
52269: PUSH
52270: LD_INT 1
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 2
52280: NEG
52281: PUSH
52282: LD_INT 2
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 2
52292: PUSH
52293: LD_INT 3
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: PUSH
52303: LD_INT 3
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: LD_INT 2
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 2
52323: NEG
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52357: LD_ADDR_VAR 0 27
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: LD_INT 1
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 0
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: NEG
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 1
52438: NEG
52439: PUSH
52440: LD_INT 2
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: LD_INT 2
52453: NEG
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 1
52461: PUSH
52462: LD_INT 1
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 2
52472: PUSH
52473: LD_INT 0
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 2
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 2
52492: PUSH
52493: LD_INT 2
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: LD_INT 2
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 0
52512: PUSH
52513: LD_INT 2
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 2
52533: NEG
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 2
52544: NEG
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 2
52556: NEG
52557: PUSH
52558: LD_INT 2
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 1
52568: NEG
52569: PUSH
52570: LD_INT 2
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 2
52579: NEG
52580: PUSH
52581: LD_INT 1
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 3
52590: NEG
52591: PUSH
52592: LD_INT 1
52594: NEG
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 3
52602: NEG
52603: PUSH
52604: LD_INT 2
52606: NEG
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52637: LD_ADDR_VAR 0 28
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: LD_INT 1
52657: NEG
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 0
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 1
52695: NEG
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: LD_INT 1
52710: NEG
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: LD_INT 2
52722: NEG
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: LD_INT 2
52733: NEG
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 2
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 2
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 2
52772: PUSH
52773: LD_INT 2
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 1
52782: PUSH
52783: LD_INT 2
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 0
52792: PUSH
52793: LD_INT 2
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 1
52802: NEG
52803: PUSH
52804: LD_INT 1
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 2
52813: NEG
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 2
52824: NEG
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 2
52836: NEG
52837: PUSH
52838: LD_INT 2
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 2
52848: NEG
52849: PUSH
52850: LD_INT 3
52852: NEG
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 1
52860: NEG
52861: PUSH
52862: LD_INT 3
52864: NEG
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 3
52872: NEG
52873: PUSH
52874: LD_INT 1
52876: NEG
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 3
52884: NEG
52885: PUSH
52886: LD_INT 2
52888: NEG
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52919: LD_ADDR_VAR 0 29
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: LD_INT 1
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 1
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 0
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 1
52977: NEG
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: LD_INT 1
52992: NEG
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: LD_INT 2
53004: NEG
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 0
53012: PUSH
53013: LD_INT 2
53015: NEG
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 1
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 2
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 2
53044: PUSH
53045: LD_INT 1
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: LD_INT 2
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: LD_INT 2
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: NEG
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 2
53085: NEG
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 2
53097: NEG
53098: PUSH
53099: LD_INT 2
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 2
53109: NEG
53110: PUSH
53111: LD_INT 3
53113: NEG
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 2
53121: PUSH
53122: LD_INT 1
53124: NEG
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 3
53132: PUSH
53133: LD_INT 1
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 1
53142: PUSH
53143: LD_INT 3
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 1
53152: NEG
53153: PUSH
53154: LD_INT 2
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 3
53163: NEG
53164: PUSH
53165: LD_INT 2
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53198: LD_ADDR_VAR 0 30
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: LD_INT 1
53218: NEG
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: LD_INT 0
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: LD_INT 1
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 0
53246: PUSH
53247: LD_INT 1
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 1
53256: NEG
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 1
53267: NEG
53268: PUSH
53269: LD_INT 1
53271: NEG
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: LD_INT 2
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 0
53291: PUSH
53292: LD_INT 2
53294: NEG
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 1
53302: PUSH
53303: LD_INT 1
53305: NEG
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 2
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 2
53323: PUSH
53324: LD_INT 1
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 2
53333: PUSH
53334: LD_INT 2
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 1
53343: PUSH
53344: LD_INT 2
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: LD_INT 1
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 2
53364: NEG
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 2
53375: NEG
53376: PUSH
53377: LD_INT 1
53379: NEG
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 1
53387: NEG
53388: PUSH
53389: LD_INT 3
53391: NEG
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: LD_INT 2
53402: NEG
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 3
53410: PUSH
53411: LD_INT 2
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 2
53420: PUSH
53421: LD_INT 3
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 2
53430: NEG
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 3
53441: NEG
53442: PUSH
53443: LD_INT 1
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53476: LD_ADDR_VAR 0 31
53480: PUSH
53481: LD_INT 0
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: LD_INT 1
53496: NEG
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 1
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 1
53534: NEG
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: LD_INT 1
53549: NEG
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 1
53557: NEG
53558: PUSH
53559: LD_INT 2
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 1
53569: PUSH
53570: LD_INT 1
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 2
53580: PUSH
53581: LD_INT 0
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 2
53590: PUSH
53591: LD_INT 1
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 2
53600: PUSH
53601: LD_INT 2
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 1
53610: PUSH
53611: LD_INT 2
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: LD_INT 2
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: LD_INT 1
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 2
53641: NEG
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 2
53653: NEG
53654: PUSH
53655: LD_INT 2
53657: NEG
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 2
53665: NEG
53666: PUSH
53667: LD_INT 3
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 2
53677: PUSH
53678: LD_INT 1
53680: NEG
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 3
53688: PUSH
53689: LD_INT 1
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: PUSH
53699: LD_INT 3
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 1
53708: NEG
53709: PUSH
53710: LD_INT 2
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 3
53719: NEG
53720: PUSH
53721: LD_INT 2
53723: NEG
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53754: LD_ADDR_VAR 0 32
53758: PUSH
53759: LD_INT 0
53761: PUSH
53762: LD_INT 0
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 0
53771: PUSH
53772: LD_INT 1
53774: NEG
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: LD_INT 0
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 1
53792: PUSH
53793: LD_INT 1
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 0
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 1
53812: NEG
53813: PUSH
53814: LD_INT 0
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 1
53823: NEG
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 1
53835: NEG
53836: PUSH
53837: LD_INT 2
53839: NEG
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 0
53847: PUSH
53848: LD_INT 2
53850: NEG
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 1
53858: PUSH
53859: LD_INT 1
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 2
53869: PUSH
53870: LD_INT 1
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 2
53879: PUSH
53880: LD_INT 2
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: LD_INT 2
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: LD_INT 2
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 2
53920: NEG
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 2
53931: NEG
53932: PUSH
53933: LD_INT 1
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 1
53943: NEG
53944: PUSH
53945: LD_INT 3
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 1
53955: PUSH
53956: LD_INT 2
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 3
53966: PUSH
53967: LD_INT 2
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 2
53976: PUSH
53977: LD_INT 3
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 2
53986: NEG
53987: PUSH
53988: LD_INT 1
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 3
53997: NEG
53998: PUSH
53999: LD_INT 1
54001: NEG
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54032: LD_ADDR_VAR 0 33
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: LD_INT 1
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 1
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 1
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 0
54080: PUSH
54081: LD_INT 1
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 1
54090: NEG
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 1
54101: NEG
54102: PUSH
54103: LD_INT 1
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 1
54113: NEG
54114: PUSH
54115: LD_INT 2
54117: NEG
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: LD_INT 1
54128: NEG
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 2
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 2
54146: PUSH
54147: LD_INT 1
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 1
54156: PUSH
54157: LD_INT 2
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: LD_INT 2
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 1
54176: NEG
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 2
54187: NEG
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 2
54198: NEG
54199: PUSH
54200: LD_INT 1
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 2
54210: NEG
54211: PUSH
54212: LD_INT 2
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 2
54222: NEG
54223: PUSH
54224: LD_INT 3
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 2
54234: PUSH
54235: LD_INT 1
54237: NEG
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 3
54245: PUSH
54246: LD_INT 1
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: LD_INT 3
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 1
54265: NEG
54266: PUSH
54267: LD_INT 2
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 3
54276: NEG
54277: PUSH
54278: LD_INT 2
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54311: LD_ADDR_VAR 0 34
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: LD_INT 0
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 0
54328: PUSH
54329: LD_INT 1
54331: NEG
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 1
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 1
54349: PUSH
54350: LD_INT 1
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 0
54359: PUSH
54360: LD_INT 1
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 1
54380: NEG
54381: PUSH
54382: LD_INT 1
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: NEG
54393: PUSH
54394: LD_INT 2
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 0
54404: PUSH
54405: LD_INT 2
54407: NEG
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 1
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 2
54426: PUSH
54427: LD_INT 1
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 2
54436: PUSH
54437: LD_INT 2
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 1
54446: PUSH
54447: LD_INT 2
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 1
54456: NEG
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 2
54467: NEG
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 2
54478: NEG
54479: PUSH
54480: LD_INT 1
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 2
54490: NEG
54491: PUSH
54492: LD_INT 2
54494: NEG
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: LD_INT 3
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: LD_INT 2
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 3
54525: PUSH
54526: LD_INT 2
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 2
54535: PUSH
54536: LD_INT 3
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 2
54545: NEG
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 3
54556: NEG
54557: PUSH
54558: LD_INT 1
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54591: LD_ADDR_VAR 0 35
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: LD_INT 1
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 1
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: LD_INT 1
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: NEG
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: LD_INT 1
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 2
54672: PUSH
54673: LD_INT 1
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 2
54682: NEG
54683: PUSH
54684: LD_INT 1
54686: NEG
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54703: LD_ADDR_VAR 0 36
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: LD_INT 1
54723: NEG
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 1
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: LD_INT 0
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: LD_INT 2
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 1
54796: PUSH
54797: LD_INT 2
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54815: LD_ADDR_VAR 0 37
54819: PUSH
54820: LD_INT 0
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: LD_INT 1
54835: NEG
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 1
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 1
54853: PUSH
54854: LD_INT 1
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 0
54863: PUSH
54864: LD_INT 1
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 1
54873: NEG
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 1
54884: NEG
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: LD_INT 1
54899: NEG
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 1
54907: NEG
54908: PUSH
54909: LD_INT 1
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54927: LD_ADDR_VAR 0 38
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: LD_INT 1
54947: NEG
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 1
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: LD_INT 1
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 1
54985: NEG
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 1
54996: NEG
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 2
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 2
55018: NEG
55019: PUSH
55020: LD_INT 1
55022: NEG
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55039: LD_ADDR_VAR 0 39
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: LD_INT 0
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: LD_INT 1
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 1
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: LD_INT 1
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 1
55097: NEG
55098: PUSH
55099: LD_INT 0
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 1
55108: NEG
55109: PUSH
55110: LD_INT 1
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 1
55120: NEG
55121: PUSH
55122: LD_INT 2
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 1
55132: PUSH
55133: LD_INT 2
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55151: LD_ADDR_VAR 0 40
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: LD_INT 0
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: LD_INT 1
55171: NEG
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: LD_INT 0
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: LD_INT 1
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 1
55209: NEG
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: LD_INT 1
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: LD_INT 1
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55263: LD_ADDR_VAR 0 41
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: LD_INT 1
55283: NEG
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 1
55291: PUSH
55292: LD_INT 0
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 1
55301: PUSH
55302: LD_INT 1
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: LD_INT 1
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 1
55321: NEG
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 1
55344: NEG
55345: PUSH
55346: LD_INT 2
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 1
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 2
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 2
55377: PUSH
55378: LD_INT 1
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 2
55387: PUSH
55388: LD_INT 2
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 1
55397: PUSH
55398: LD_INT 2
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 1
55407: NEG
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 2
55418: NEG
55419: PUSH
55420: LD_INT 0
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 2
55429: NEG
55430: PUSH
55431: LD_INT 1
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 2
55441: NEG
55442: PUSH
55443: LD_INT 2
55445: NEG
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 2
55453: NEG
55454: PUSH
55455: LD_INT 3
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 2
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 3
55476: PUSH
55477: LD_INT 0
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 3
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 3
55496: PUSH
55497: LD_INT 2
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 3
55506: PUSH
55507: LD_INT 3
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 2
55516: PUSH
55517: LD_INT 3
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 2
55526: NEG
55527: PUSH
55528: LD_INT 1
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 3
55537: NEG
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 3
55548: NEG
55549: PUSH
55550: LD_INT 1
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 3
55560: NEG
55561: PUSH
55562: LD_INT 2
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 3
55572: NEG
55573: PUSH
55574: LD_INT 3
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55613: LD_ADDR_VAR 0 42
55617: PUSH
55618: LD_INT 0
55620: PUSH
55621: LD_INT 0
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: LD_INT 1
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 1
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 1
55651: PUSH
55652: LD_INT 1
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 0
55661: PUSH
55662: LD_INT 1
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 1
55671: NEG
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 1
55682: NEG
55683: PUSH
55684: LD_INT 1
55686: NEG
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 1
55694: NEG
55695: PUSH
55696: LD_INT 2
55698: NEG
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 0
55706: PUSH
55707: LD_INT 2
55709: NEG
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 1
55717: PUSH
55718: LD_INT 1
55720: NEG
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 2
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 2
55738: PUSH
55739: LD_INT 2
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: LD_INT 2
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: LD_INT 2
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 2
55779: NEG
55780: PUSH
55781: LD_INT 1
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 2
55791: NEG
55792: PUSH
55793: LD_INT 2
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 2
55803: NEG
55804: PUSH
55805: LD_INT 3
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: LD_INT 3
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: LD_INT 3
55830: NEG
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 1
55838: PUSH
55839: LD_INT 2
55841: NEG
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 3
55849: PUSH
55850: LD_INT 2
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 3
55859: PUSH
55860: LD_INT 3
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 2
55869: PUSH
55870: LD_INT 3
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: LD_INT 3
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: LD_INT 3
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: NEG
55900: PUSH
55901: LD_INT 2
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 3
55910: NEG
55911: PUSH
55912: LD_INT 2
55914: NEG
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 3
55922: NEG
55923: PUSH
55924: LD_INT 3
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55963: LD_ADDR_VAR 0 43
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 0
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 1
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 1
56001: PUSH
56002: LD_INT 1
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: LD_INT 1
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 1
56021: NEG
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: LD_INT 1
56036: NEG
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 1
56044: NEG
56045: PUSH
56046: LD_INT 2
56048: NEG
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 0
56056: PUSH
56057: LD_INT 2
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: LD_INT 1
56070: NEG
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 2
56078: PUSH
56079: LD_INT 0
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 2
56088: PUSH
56089: LD_INT 1
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 1
56098: PUSH
56099: LD_INT 2
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 0
56108: PUSH
56109: LD_INT 2
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 1
56118: NEG
56119: PUSH
56120: LD_INT 1
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 2
56129: NEG
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 2
56140: NEG
56141: PUSH
56142: LD_INT 1
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 1
56152: NEG
56153: PUSH
56154: LD_INT 3
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 0
56164: PUSH
56165: LD_INT 3
56167: NEG
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 1
56175: PUSH
56176: LD_INT 2
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 2
56186: PUSH
56187: LD_INT 1
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 3
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 3
56207: PUSH
56208: LD_INT 1
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: LD_INT 3
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: LD_INT 3
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 1
56237: NEG
56238: PUSH
56239: LD_INT 2
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 2
56248: NEG
56249: PUSH
56250: LD_INT 1
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 3
56259: NEG
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 3
56270: NEG
56271: PUSH
56272: LD_INT 1
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56311: LD_ADDR_VAR 0 44
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: LD_INT 1
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 1
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 1
56349: PUSH
56350: LD_INT 1
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 0
56359: PUSH
56360: LD_INT 1
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 1
56369: NEG
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 1
56380: NEG
56381: PUSH
56382: LD_INT 1
56384: NEG
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 1
56392: NEG
56393: PUSH
56394: LD_INT 2
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 1
56404: PUSH
56405: LD_INT 1
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 2
56415: PUSH
56416: LD_INT 0
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 2
56425: PUSH
56426: LD_INT 1
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 2
56435: PUSH
56436: LD_INT 2
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 1
56445: PUSH
56446: LD_INT 2
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 1
56455: NEG
56456: PUSH
56457: LD_INT 1
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 2
56466: NEG
56467: PUSH
56468: LD_INT 0
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 2
56477: NEG
56478: PUSH
56479: LD_INT 1
56481: NEG
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 2
56489: NEG
56490: PUSH
56491: LD_INT 2
56493: NEG
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 2
56501: NEG
56502: PUSH
56503: LD_INT 3
56505: NEG
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 2
56513: PUSH
56514: LD_INT 1
56516: NEG
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 3
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 3
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 3
56544: PUSH
56545: LD_INT 2
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 3
56554: PUSH
56555: LD_INT 3
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 2
56564: PUSH
56565: LD_INT 3
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 2
56574: NEG
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 3
56585: NEG
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 3
56596: NEG
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 3
56608: NEG
56609: PUSH
56610: LD_INT 2
56612: NEG
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 3
56620: NEG
56621: PUSH
56622: LD_INT 3
56624: NEG
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56661: LD_ADDR_VAR 0 45
56665: PUSH
56666: LD_INT 0
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: LD_INT 1
56681: NEG
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 1
56689: PUSH
56690: LD_INT 0
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 1
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: LD_INT 1
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 1
56719: NEG
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 1
56730: NEG
56731: PUSH
56732: LD_INT 1
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 1
56742: NEG
56743: PUSH
56744: LD_INT 2
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 0
56754: PUSH
56755: LD_INT 2
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: LD_INT 1
56768: NEG
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 2
56776: PUSH
56777: LD_INT 1
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 2
56786: PUSH
56787: LD_INT 2
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: LD_INT 2
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 0
56806: PUSH
56807: LD_INT 2
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 1
56816: NEG
56817: PUSH
56818: LD_INT 1
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 2
56827: NEG
56828: PUSH
56829: LD_INT 1
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 2
56839: NEG
56840: PUSH
56841: LD_INT 2
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 2
56851: NEG
56852: PUSH
56853: LD_INT 3
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: PUSH
56865: LD_INT 3
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 0
56875: PUSH
56876: LD_INT 3
56878: NEG
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 1
56886: PUSH
56887: LD_INT 2
56889: NEG
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 3
56897: PUSH
56898: LD_INT 2
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 3
56907: PUSH
56908: LD_INT 3
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 2
56917: PUSH
56918: LD_INT 3
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 1
56927: PUSH
56928: LD_INT 3
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 0
56937: PUSH
56938: LD_INT 3
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 1
56947: NEG
56948: PUSH
56949: LD_INT 2
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 3
56958: NEG
56959: PUSH
56960: LD_INT 2
56962: NEG
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 3
56970: NEG
56971: PUSH
56972: LD_INT 3
56974: NEG
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57011: LD_ADDR_VAR 0 46
57015: PUSH
57016: LD_INT 0
57018: PUSH
57019: LD_INT 0
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 0
57028: PUSH
57029: LD_INT 1
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 1
57039: PUSH
57040: LD_INT 0
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 1
57049: PUSH
57050: LD_INT 1
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 0
57059: PUSH
57060: LD_INT 1
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 1
57069: NEG
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 1
57080: NEG
57081: PUSH
57082: LD_INT 1
57084: NEG
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 1
57092: NEG
57093: PUSH
57094: LD_INT 2
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 0
57104: PUSH
57105: LD_INT 2
57107: NEG
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 1
57115: PUSH
57116: LD_INT 1
57118: NEG
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 2
57126: PUSH
57127: LD_INT 0
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 2
57136: PUSH
57137: LD_INT 1
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: LD_INT 2
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: LD_INT 2
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: LD_INT 1
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 2
57177: NEG
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 2
57188: NEG
57189: PUSH
57190: LD_INT 1
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 1
57200: NEG
57201: PUSH
57202: LD_INT 3
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 0
57212: PUSH
57213: LD_INT 3
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 1
57223: PUSH
57224: LD_INT 2
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 2
57234: PUSH
57235: LD_INT 1
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 3
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 3
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 1
57265: PUSH
57266: LD_INT 3
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: LD_INT 3
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 1
57285: NEG
57286: PUSH
57287: LD_INT 2
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 2
57296: NEG
57297: PUSH
57298: LD_INT 1
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 3
57307: NEG
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 3
57318: NEG
57319: PUSH
57320: LD_INT 1
57322: NEG
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57359: LD_ADDR_VAR 0 47
57363: PUSH
57364: LD_INT 0
57366: PUSH
57367: LD_INT 0
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 0
57376: PUSH
57377: LD_INT 1
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 1
57387: PUSH
57388: LD_INT 0
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 1
57397: PUSH
57398: LD_INT 1
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 1
57417: NEG
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 1
57428: NEG
57429: PUSH
57430: LD_INT 1
57432: NEG
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 1
57440: NEG
57441: PUSH
57442: LD_INT 2
57444: NEG
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 0
57452: PUSH
57453: LD_INT 2
57455: NEG
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 1
57463: PUSH
57464: LD_INT 1
57466: NEG
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 2
57474: NEG
57475: PUSH
57476: LD_INT 1
57478: NEG
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 2
57486: NEG
57487: PUSH
57488: LD_INT 2
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57510: LD_ADDR_VAR 0 48
57514: PUSH
57515: LD_INT 0
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 0
57527: PUSH
57528: LD_INT 1
57530: NEG
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: LD_INT 0
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 1
57548: PUSH
57549: LD_INT 1
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: LD_INT 1
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 1
57568: NEG
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 1
57579: NEG
57580: PUSH
57581: LD_INT 1
57583: NEG
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 1
57591: NEG
57592: PUSH
57593: LD_INT 2
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: LD_INT 2
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 1
57614: PUSH
57615: LD_INT 1
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 2
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 2
57635: PUSH
57636: LD_INT 1
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57657: LD_ADDR_VAR 0 49
57661: PUSH
57662: LD_INT 0
57664: PUSH
57665: LD_INT 0
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: LD_INT 1
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 1
57685: PUSH
57686: LD_INT 0
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 1
57695: PUSH
57696: LD_INT 1
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: LD_INT 1
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 1
57715: NEG
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 1
57726: NEG
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 1
57738: PUSH
57739: LD_INT 1
57741: NEG
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 2
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 2
57759: PUSH
57760: LD_INT 1
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 2
57769: PUSH
57770: LD_INT 2
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 1
57779: PUSH
57780: LD_INT 2
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57801: LD_ADDR_VAR 0 50
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 0
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 1
57829: PUSH
57830: LD_INT 0
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: LD_INT 1
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 0
57849: PUSH
57850: LD_INT 1
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 1
57859: NEG
57860: PUSH
57861: LD_INT 0
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 1
57870: NEG
57871: PUSH
57872: LD_INT 1
57874: NEG
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 2
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 2
57892: PUSH
57893: LD_INT 2
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: PUSH
57903: LD_INT 2
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 0
57912: PUSH
57913: LD_INT 2
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 1
57922: NEG
57923: PUSH
57924: LD_INT 1
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57945: LD_ADDR_VAR 0 51
57949: PUSH
57950: LD_INT 0
57952: PUSH
57953: LD_INT 0
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 0
57962: PUSH
57963: LD_INT 1
57965: NEG
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 1
57973: PUSH
57974: LD_INT 0
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 1
57983: PUSH
57984: LD_INT 1
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 0
57993: PUSH
57994: LD_INT 1
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 1
58003: NEG
58004: PUSH
58005: LD_INT 0
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 1
58014: NEG
58015: PUSH
58016: LD_INT 1
58018: NEG
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 1
58026: PUSH
58027: LD_INT 2
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: LD_INT 2
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 1
58046: NEG
58047: PUSH
58048: LD_INT 1
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 2
58057: NEG
58058: PUSH
58059: LD_INT 0
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 2
58068: NEG
58069: PUSH
58070: LD_INT 1
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58092: LD_ADDR_VAR 0 52
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 0
58109: PUSH
58110: LD_INT 1
58112: NEG
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 1
58120: PUSH
58121: LD_INT 0
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 1
58130: PUSH
58131: LD_INT 1
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 0
58140: PUSH
58141: LD_INT 1
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 1
58150: NEG
58151: PUSH
58152: LD_INT 0
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: NEG
58162: PUSH
58163: LD_INT 1
58165: NEG
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 1
58173: NEG
58174: PUSH
58175: LD_INT 2
58177: NEG
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 1
58185: NEG
58186: PUSH
58187: LD_INT 1
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 2
58196: NEG
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 2
58207: NEG
58208: PUSH
58209: LD_INT 1
58211: NEG
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 2
58219: NEG
58220: PUSH
58221: LD_INT 2
58223: NEG
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58243: LD_ADDR_VAR 0 53
58247: PUSH
58248: LD_INT 0
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 0
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: LD_INT 0
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 1
58281: PUSH
58282: LD_INT 1
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: LD_INT 1
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 1
58301: NEG
58302: PUSH
58303: LD_INT 0
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 1
58312: NEG
58313: PUSH
58314: LD_INT 1
58316: NEG
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 1
58324: NEG
58325: PUSH
58326: LD_INT 2
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: LD_INT 2
58339: NEG
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 1
58347: PUSH
58348: LD_INT 1
58350: NEG
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 2
58358: PUSH
58359: LD_INT 0
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 2
58368: PUSH
58369: LD_INT 1
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 2
58378: PUSH
58379: LD_INT 2
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 1
58388: PUSH
58389: LD_INT 2
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 0
58398: PUSH
58399: LD_INT 2
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 1
58408: NEG
58409: PUSH
58410: LD_INT 1
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 2
58419: NEG
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 2
58430: NEG
58431: PUSH
58432: LD_INT 1
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 2
58442: NEG
58443: PUSH
58444: LD_INT 2
58446: NEG
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58473: LD_ADDR_VAR 0 54
58477: PUSH
58478: LD_INT 0
58480: PUSH
58481: LD_INT 0
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 0
58490: PUSH
58491: LD_INT 1
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 1
58501: PUSH
58502: LD_INT 0
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 1
58511: PUSH
58512: LD_INT 1
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 0
58521: PUSH
58522: LD_INT 1
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 1
58531: NEG
58532: PUSH
58533: LD_INT 0
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 1
58542: NEG
58543: PUSH
58544: LD_INT 1
58546: NEG
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 1
58554: NEG
58555: PUSH
58556: LD_INT 2
58558: NEG
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: LD_INT 2
58569: NEG
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 1
58577: PUSH
58578: LD_INT 1
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 2
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 2
58598: PUSH
58599: LD_INT 1
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 2
58608: PUSH
58609: LD_INT 2
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 1
58618: PUSH
58619: LD_INT 2
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 0
58628: PUSH
58629: LD_INT 2
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 1
58638: NEG
58639: PUSH
58640: LD_INT 1
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 2
58649: NEG
58650: PUSH
58651: LD_INT 0
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 2
58660: NEG
58661: PUSH
58662: LD_INT 1
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 2
58672: NEG
58673: PUSH
58674: LD_INT 2
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58703: LD_ADDR_VAR 0 55
58707: PUSH
58708: LD_INT 0
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 0
58720: PUSH
58721: LD_INT 1
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 1
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 1
58741: PUSH
58742: LD_INT 1
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 0
58751: PUSH
58752: LD_INT 1
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 1
58761: NEG
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 1
58772: NEG
58773: PUSH
58774: LD_INT 1
58776: NEG
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 1
58784: NEG
58785: PUSH
58786: LD_INT 2
58788: NEG
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 0
58796: PUSH
58797: LD_INT 2
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 1
58807: PUSH
58808: LD_INT 1
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 2
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 2
58828: PUSH
58829: LD_INT 1
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 2
58838: PUSH
58839: LD_INT 2
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 1
58848: PUSH
58849: LD_INT 2
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: LD_INT 2
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 1
58868: NEG
58869: PUSH
58870: LD_INT 1
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 2
58879: NEG
58880: PUSH
58881: LD_INT 0
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 2
58890: NEG
58891: PUSH
58892: LD_INT 1
58894: NEG
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 2
58902: NEG
58903: PUSH
58904: LD_INT 2
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58933: LD_ADDR_VAR 0 56
58937: PUSH
58938: LD_INT 0
58940: PUSH
58941: LD_INT 0
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 0
58950: PUSH
58951: LD_INT 1
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 1
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 1
58971: PUSH
58972: LD_INT 1
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 0
58981: PUSH
58982: LD_INT 1
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 1
58991: NEG
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 1
59002: NEG
59003: PUSH
59004: LD_INT 1
59006: NEG
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 1
59014: NEG
59015: PUSH
59016: LD_INT 2
59018: NEG
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: LD_INT 2
59029: NEG
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 1
59037: PUSH
59038: LD_INT 1
59040: NEG
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 2
59048: PUSH
59049: LD_INT 0
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 2
59058: PUSH
59059: LD_INT 1
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 2
59068: PUSH
59069: LD_INT 2
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 1
59078: PUSH
59079: LD_INT 2
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 0
59088: PUSH
59089: LD_INT 2
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 1
59098: NEG
59099: PUSH
59100: LD_INT 1
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 2
59109: NEG
59110: PUSH
59111: LD_INT 0
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 2
59120: NEG
59121: PUSH
59122: LD_INT 1
59124: NEG
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 2
59132: NEG
59133: PUSH
59134: LD_INT 2
59136: NEG
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59163: LD_ADDR_VAR 0 57
59167: PUSH
59168: LD_INT 0
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 0
59180: PUSH
59181: LD_INT 1
59183: NEG
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 1
59191: PUSH
59192: LD_INT 0
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 1
59201: PUSH
59202: LD_INT 1
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 0
59211: PUSH
59212: LD_INT 1
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 1
59221: NEG
59222: PUSH
59223: LD_INT 0
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 1
59232: NEG
59233: PUSH
59234: LD_INT 1
59236: NEG
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 1
59244: NEG
59245: PUSH
59246: LD_INT 2
59248: NEG
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 0
59256: PUSH
59257: LD_INT 2
59259: NEG
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 1
59267: PUSH
59268: LD_INT 1
59270: NEG
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 2
59278: PUSH
59279: LD_INT 0
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 2
59288: PUSH
59289: LD_INT 1
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 2
59298: PUSH
59299: LD_INT 2
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 1
59308: PUSH
59309: LD_INT 2
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 0
59318: PUSH
59319: LD_INT 2
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 1
59328: NEG
59329: PUSH
59330: LD_INT 1
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 2
59339: NEG
59340: PUSH
59341: LD_INT 0
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 2
59350: NEG
59351: PUSH
59352: LD_INT 1
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 2
59362: NEG
59363: PUSH
59364: LD_INT 2
59366: NEG
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59393: LD_ADDR_VAR 0 58
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 0
59410: PUSH
59411: LD_INT 1
59413: NEG
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 1
59421: PUSH
59422: LD_INT 0
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 1
59431: PUSH
59432: LD_INT 1
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 0
59441: PUSH
59442: LD_INT 1
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 1
59451: NEG
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 1
59462: NEG
59463: PUSH
59464: LD_INT 1
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 1
59474: NEG
59475: PUSH
59476: LD_INT 2
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 0
59486: PUSH
59487: LD_INT 2
59489: NEG
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 1
59497: PUSH
59498: LD_INT 1
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 2
59508: PUSH
59509: LD_INT 0
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 2
59518: PUSH
59519: LD_INT 1
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 2
59528: PUSH
59529: LD_INT 2
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 1
59538: PUSH
59539: LD_INT 2
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 0
59548: PUSH
59549: LD_INT 2
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 1
59558: NEG
59559: PUSH
59560: LD_INT 1
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 2
59569: NEG
59570: PUSH
59571: LD_INT 0
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 2
59580: NEG
59581: PUSH
59582: LD_INT 1
59584: NEG
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 2
59592: NEG
59593: PUSH
59594: LD_INT 2
59596: NEG
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59623: LD_ADDR_VAR 0 59
59627: PUSH
59628: LD_INT 0
59630: PUSH
59631: LD_INT 0
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 0
59640: PUSH
59641: LD_INT 1
59643: NEG
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: LD_INT 0
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 1
59661: PUSH
59662: LD_INT 1
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 0
59671: PUSH
59672: LD_INT 1
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 1
59681: NEG
59682: PUSH
59683: LD_INT 0
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 1
59692: NEG
59693: PUSH
59694: LD_INT 1
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59711: LD_ADDR_VAR 0 60
59715: PUSH
59716: LD_INT 0
59718: PUSH
59719: LD_INT 0
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 0
59728: PUSH
59729: LD_INT 1
59731: NEG
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 1
59739: PUSH
59740: LD_INT 0
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 1
59749: PUSH
59750: LD_INT 1
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 0
59759: PUSH
59760: LD_INT 1
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 1
59769: NEG
59770: PUSH
59771: LD_INT 0
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 1
59780: NEG
59781: PUSH
59782: LD_INT 1
59784: NEG
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59799: LD_ADDR_VAR 0 61
59803: PUSH
59804: LD_INT 0
59806: PUSH
59807: LD_INT 0
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 0
59816: PUSH
59817: LD_INT 1
59819: NEG
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 1
59827: PUSH
59828: LD_INT 0
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 1
59837: PUSH
59838: LD_INT 1
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 0
59847: PUSH
59848: LD_INT 1
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 1
59857: NEG
59858: PUSH
59859: LD_INT 0
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 1
59868: NEG
59869: PUSH
59870: LD_INT 1
59872: NEG
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59887: LD_ADDR_VAR 0 62
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: LD_INT 1
59907: NEG
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 1
59915: PUSH
59916: LD_INT 0
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 1
59925: PUSH
59926: LD_INT 1
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 0
59935: PUSH
59936: LD_INT 1
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 1
59945: NEG
59946: PUSH
59947: LD_INT 0
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 1
59956: NEG
59957: PUSH
59958: LD_INT 1
59960: NEG
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59975: LD_ADDR_VAR 0 63
59979: PUSH
59980: LD_INT 0
59982: PUSH
59983: LD_INT 0
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 0
59992: PUSH
59993: LD_INT 1
59995: NEG
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 1
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 1
60013: PUSH
60014: LD_INT 1
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 0
60023: PUSH
60024: LD_INT 1
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 1
60033: NEG
60034: PUSH
60035: LD_INT 0
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 1
60044: NEG
60045: PUSH
60046: LD_INT 1
60048: NEG
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60063: LD_ADDR_VAR 0 64
60067: PUSH
60068: LD_INT 0
60070: PUSH
60071: LD_INT 0
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 0
60080: PUSH
60081: LD_INT 1
60083: NEG
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 1
60091: PUSH
60092: LD_INT 0
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 1
60101: PUSH
60102: LD_INT 1
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 0
60111: PUSH
60112: LD_INT 1
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 1
60121: NEG
60122: PUSH
60123: LD_INT 0
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 1
60132: NEG
60133: PUSH
60134: LD_INT 1
60136: NEG
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: ST_TO_ADDR
// end ; 1 :
60151: GO 66048
60153: LD_INT 1
60155: DOUBLE
60156: EQUAL
60157: IFTRUE 60161
60159: GO 62784
60161: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60162: LD_ADDR_VAR 0 11
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: LD_INT 3
60173: NEG
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 0
60181: PUSH
60182: LD_INT 3
60184: NEG
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 1
60192: PUSH
60193: LD_INT 2
60195: NEG
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: LIST
60205: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60206: LD_ADDR_VAR 0 12
60210: PUSH
60211: LD_INT 2
60213: PUSH
60214: LD_INT 1
60216: NEG
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 3
60224: PUSH
60225: LD_INT 0
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 3
60234: PUSH
60235: LD_INT 1
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: LIST
60246: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60247: LD_ADDR_VAR 0 13
60251: PUSH
60252: LD_INT 3
60254: PUSH
60255: LD_INT 2
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 3
60264: PUSH
60265: LD_INT 3
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 2
60274: PUSH
60275: LD_INT 3
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: LIST
60286: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60287: LD_ADDR_VAR 0 14
60291: PUSH
60292: LD_INT 1
60294: PUSH
60295: LD_INT 3
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 0
60304: PUSH
60305: LD_INT 3
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 1
60314: NEG
60315: PUSH
60316: LD_INT 2
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: LIST
60327: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60328: LD_ADDR_VAR 0 15
60332: PUSH
60333: LD_INT 2
60335: NEG
60336: PUSH
60337: LD_INT 1
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 3
60346: NEG
60347: PUSH
60348: LD_INT 0
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 3
60357: NEG
60358: PUSH
60359: LD_INT 1
60361: NEG
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: LIST
60371: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60372: LD_ADDR_VAR 0 16
60376: PUSH
60377: LD_INT 2
60379: NEG
60380: PUSH
60381: LD_INT 3
60383: NEG
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 3
60391: NEG
60392: PUSH
60393: LD_INT 2
60395: NEG
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 3
60403: NEG
60404: PUSH
60405: LD_INT 3
60407: NEG
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: LIST
60417: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60418: LD_ADDR_VAR 0 17
60422: PUSH
60423: LD_INT 1
60425: NEG
60426: PUSH
60427: LD_INT 3
60429: NEG
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 0
60437: PUSH
60438: LD_INT 3
60440: NEG
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 1
60448: PUSH
60449: LD_INT 2
60451: NEG
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: LIST
60461: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60462: LD_ADDR_VAR 0 18
60466: PUSH
60467: LD_INT 2
60469: PUSH
60470: LD_INT 1
60472: NEG
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 3
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 3
60490: PUSH
60491: LD_INT 1
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: LIST
60502: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60503: LD_ADDR_VAR 0 19
60507: PUSH
60508: LD_INT 3
60510: PUSH
60511: LD_INT 2
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 3
60520: PUSH
60521: LD_INT 3
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 2
60530: PUSH
60531: LD_INT 3
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: LIST
60542: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60543: LD_ADDR_VAR 0 20
60547: PUSH
60548: LD_INT 1
60550: PUSH
60551: LD_INT 3
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 0
60560: PUSH
60561: LD_INT 3
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 1
60570: NEG
60571: PUSH
60572: LD_INT 2
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: LIST
60583: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60584: LD_ADDR_VAR 0 21
60588: PUSH
60589: LD_INT 2
60591: NEG
60592: PUSH
60593: LD_INT 1
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 3
60602: NEG
60603: PUSH
60604: LD_INT 0
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 3
60613: NEG
60614: PUSH
60615: LD_INT 1
60617: NEG
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: LIST
60627: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60628: LD_ADDR_VAR 0 22
60632: PUSH
60633: LD_INT 2
60635: NEG
60636: PUSH
60637: LD_INT 3
60639: NEG
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 3
60647: NEG
60648: PUSH
60649: LD_INT 2
60651: NEG
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 3
60659: NEG
60660: PUSH
60661: LD_INT 3
60663: NEG
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: LIST
60673: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60674: LD_ADDR_VAR 0 23
60678: PUSH
60679: LD_INT 0
60681: PUSH
60682: LD_INT 3
60684: NEG
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 1
60692: NEG
60693: PUSH
60694: LD_INT 4
60696: NEG
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 1
60704: PUSH
60705: LD_INT 3
60707: NEG
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: LIST
60717: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60718: LD_ADDR_VAR 0 24
60722: PUSH
60723: LD_INT 3
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 3
60735: PUSH
60736: LD_INT 1
60738: NEG
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 4
60746: PUSH
60747: LD_INT 1
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: LIST
60758: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60759: LD_ADDR_VAR 0 25
60763: PUSH
60764: LD_INT 3
60766: PUSH
60767: LD_INT 3
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 4
60776: PUSH
60777: LD_INT 3
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 3
60786: PUSH
60787: LD_INT 4
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: LIST
60798: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60799: LD_ADDR_VAR 0 26
60803: PUSH
60804: LD_INT 0
60806: PUSH
60807: LD_INT 3
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 1
60816: PUSH
60817: LD_INT 4
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 1
60826: NEG
60827: PUSH
60828: LD_INT 3
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: LIST
60839: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60840: LD_ADDR_VAR 0 27
60844: PUSH
60845: LD_INT 3
60847: NEG
60848: PUSH
60849: LD_INT 0
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 3
60858: NEG
60859: PUSH
60860: LD_INT 1
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 4
60869: NEG
60870: PUSH
60871: LD_INT 1
60873: NEG
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: LIST
60883: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60884: LD_ADDR_VAR 0 28
60888: PUSH
60889: LD_INT 3
60891: NEG
60892: PUSH
60893: LD_INT 3
60895: NEG
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 3
60903: NEG
60904: PUSH
60905: LD_INT 4
60907: NEG
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 4
60915: NEG
60916: PUSH
60917: LD_INT 3
60919: NEG
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: LIST
60929: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60930: LD_ADDR_VAR 0 29
60934: PUSH
60935: LD_INT 1
60937: NEG
60938: PUSH
60939: LD_INT 3
60941: NEG
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 0
60949: PUSH
60950: LD_INT 3
60952: NEG
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 1
60960: PUSH
60961: LD_INT 2
60963: NEG
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 1
60971: NEG
60972: PUSH
60973: LD_INT 4
60975: NEG
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 0
60983: PUSH
60984: LD_INT 4
60986: NEG
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 1
60994: PUSH
60995: LD_INT 3
60997: NEG
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 1
61005: NEG
61006: PUSH
61007: LD_INT 5
61009: NEG
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 0
61017: PUSH
61018: LD_INT 5
61020: NEG
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 1
61028: PUSH
61029: LD_INT 4
61031: NEG
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 1
61039: NEG
61040: PUSH
61041: LD_INT 6
61043: NEG
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 0
61051: PUSH
61052: LD_INT 6
61054: NEG
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 1
61062: PUSH
61063: LD_INT 5
61065: NEG
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61085: LD_ADDR_VAR 0 30
61089: PUSH
61090: LD_INT 2
61092: PUSH
61093: LD_INT 1
61095: NEG
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 3
61103: PUSH
61104: LD_INT 0
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 3
61113: PUSH
61114: LD_INT 1
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 3
61123: PUSH
61124: LD_INT 1
61126: NEG
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 4
61134: PUSH
61135: LD_INT 0
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 4
61144: PUSH
61145: LD_INT 1
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 4
61154: PUSH
61155: LD_INT 1
61157: NEG
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 5
61165: PUSH
61166: LD_INT 0
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 5
61175: PUSH
61176: LD_INT 1
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 5
61185: PUSH
61186: LD_INT 1
61188: NEG
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 6
61196: PUSH
61197: LD_INT 0
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 6
61206: PUSH
61207: LD_INT 1
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61228: LD_ADDR_VAR 0 31
61232: PUSH
61233: LD_INT 3
61235: PUSH
61236: LD_INT 2
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 3
61245: PUSH
61246: LD_INT 3
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 2
61255: PUSH
61256: LD_INT 3
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 4
61265: PUSH
61266: LD_INT 3
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 4
61275: PUSH
61276: LD_INT 4
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 3
61285: PUSH
61286: LD_INT 4
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 5
61295: PUSH
61296: LD_INT 4
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 5
61305: PUSH
61306: LD_INT 5
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 4
61315: PUSH
61316: LD_INT 5
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 6
61325: PUSH
61326: LD_INT 5
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 6
61335: PUSH
61336: LD_INT 6
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 5
61345: PUSH
61346: LD_INT 6
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61367: LD_ADDR_VAR 0 32
61371: PUSH
61372: LD_INT 1
61374: PUSH
61375: LD_INT 3
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 0
61384: PUSH
61385: LD_INT 3
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 1
61394: NEG
61395: PUSH
61396: LD_INT 2
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 1
61405: PUSH
61406: LD_INT 4
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 0
61415: PUSH
61416: LD_INT 4
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 1
61425: NEG
61426: PUSH
61427: LD_INT 3
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 1
61436: PUSH
61437: LD_INT 5
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 0
61446: PUSH
61447: LD_INT 5
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 1
61456: NEG
61457: PUSH
61458: LD_INT 4
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 1
61467: PUSH
61468: LD_INT 6
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 0
61477: PUSH
61478: LD_INT 6
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 1
61487: NEG
61488: PUSH
61489: LD_INT 5
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61510: LD_ADDR_VAR 0 33
61514: PUSH
61515: LD_INT 2
61517: NEG
61518: PUSH
61519: LD_INT 1
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 3
61528: NEG
61529: PUSH
61530: LD_INT 0
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 3
61539: NEG
61540: PUSH
61541: LD_INT 1
61543: NEG
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 3
61551: NEG
61552: PUSH
61553: LD_INT 1
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 4
61562: NEG
61563: PUSH
61564: LD_INT 0
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 4
61573: NEG
61574: PUSH
61575: LD_INT 1
61577: NEG
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 4
61585: NEG
61586: PUSH
61587: LD_INT 1
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 5
61596: NEG
61597: PUSH
61598: LD_INT 0
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 5
61607: NEG
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 5
61619: NEG
61620: PUSH
61621: LD_INT 1
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 6
61630: NEG
61631: PUSH
61632: LD_INT 0
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 6
61641: NEG
61642: PUSH
61643: LD_INT 1
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61665: LD_ADDR_VAR 0 34
61669: PUSH
61670: LD_INT 2
61672: NEG
61673: PUSH
61674: LD_INT 3
61676: NEG
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 3
61684: NEG
61685: PUSH
61686: LD_INT 2
61688: NEG
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 3
61696: NEG
61697: PUSH
61698: LD_INT 3
61700: NEG
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 3
61708: NEG
61709: PUSH
61710: LD_INT 4
61712: NEG
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 4
61720: NEG
61721: PUSH
61722: LD_INT 3
61724: NEG
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 4
61732: NEG
61733: PUSH
61734: LD_INT 4
61736: NEG
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 4
61744: NEG
61745: PUSH
61746: LD_INT 5
61748: NEG
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 5
61756: NEG
61757: PUSH
61758: LD_INT 4
61760: NEG
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 5
61768: NEG
61769: PUSH
61770: LD_INT 5
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 5
61780: NEG
61781: PUSH
61782: LD_INT 6
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 6
61792: NEG
61793: PUSH
61794: LD_INT 5
61796: NEG
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 6
61804: NEG
61805: PUSH
61806: LD_INT 6
61808: NEG
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61828: LD_ADDR_VAR 0 41
61832: PUSH
61833: LD_INT 0
61835: PUSH
61836: LD_INT 2
61838: NEG
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 1
61846: NEG
61847: PUSH
61848: LD_INT 3
61850: NEG
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 1
61858: PUSH
61859: LD_INT 2
61861: NEG
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: LIST
61871: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61872: LD_ADDR_VAR 0 42
61876: PUSH
61877: LD_INT 2
61879: PUSH
61880: LD_INT 0
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 2
61889: PUSH
61890: LD_INT 1
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 3
61900: PUSH
61901: LD_INT 1
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: LIST
61912: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61913: LD_ADDR_VAR 0 43
61917: PUSH
61918: LD_INT 2
61920: PUSH
61921: LD_INT 2
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 3
61930: PUSH
61931: LD_INT 2
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 2
61940: PUSH
61941: LD_INT 3
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: LIST
61952: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61953: LD_ADDR_VAR 0 44
61957: PUSH
61958: LD_INT 0
61960: PUSH
61961: LD_INT 2
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 1
61970: PUSH
61971: LD_INT 3
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 1
61980: NEG
61981: PUSH
61982: LD_INT 2
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: LIST
61993: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61994: LD_ADDR_VAR 0 45
61998: PUSH
61999: LD_INT 2
62001: NEG
62002: PUSH
62003: LD_INT 0
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 2
62012: NEG
62013: PUSH
62014: LD_INT 1
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 3
62023: NEG
62024: PUSH
62025: LD_INT 1
62027: NEG
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: LIST
62037: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62038: LD_ADDR_VAR 0 46
62042: PUSH
62043: LD_INT 2
62045: NEG
62046: PUSH
62047: LD_INT 2
62049: NEG
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 2
62057: NEG
62058: PUSH
62059: LD_INT 3
62061: NEG
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 3
62069: NEG
62070: PUSH
62071: LD_INT 2
62073: NEG
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: LIST
62083: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62084: LD_ADDR_VAR 0 47
62088: PUSH
62089: LD_INT 2
62091: NEG
62092: PUSH
62093: LD_INT 3
62095: NEG
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 1
62103: NEG
62104: PUSH
62105: LD_INT 3
62107: NEG
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62117: LD_ADDR_VAR 0 48
62121: PUSH
62122: LD_INT 1
62124: PUSH
62125: LD_INT 2
62127: NEG
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 2
62135: PUSH
62136: LD_INT 1
62138: NEG
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62148: LD_ADDR_VAR 0 49
62152: PUSH
62153: LD_INT 3
62155: PUSH
62156: LD_INT 1
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 3
62165: PUSH
62166: LD_INT 2
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62177: LD_ADDR_VAR 0 50
62181: PUSH
62182: LD_INT 2
62184: PUSH
62185: LD_INT 3
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 1
62194: PUSH
62195: LD_INT 3
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62206: LD_ADDR_VAR 0 51
62210: PUSH
62211: LD_INT 1
62213: NEG
62214: PUSH
62215: LD_INT 2
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 2
62224: NEG
62225: PUSH
62226: LD_INT 1
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62237: LD_ADDR_VAR 0 52
62241: PUSH
62242: LD_INT 3
62244: NEG
62245: PUSH
62246: LD_INT 1
62248: NEG
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 3
62256: NEG
62257: PUSH
62258: LD_INT 2
62260: NEG
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62270: LD_ADDR_VAR 0 53
62274: PUSH
62275: LD_INT 1
62277: NEG
62278: PUSH
62279: LD_INT 3
62281: NEG
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 0
62289: PUSH
62290: LD_INT 3
62292: NEG
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 1
62300: PUSH
62301: LD_INT 2
62303: NEG
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: LIST
62313: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62314: LD_ADDR_VAR 0 54
62318: PUSH
62319: LD_INT 2
62321: PUSH
62322: LD_INT 1
62324: NEG
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 3
62332: PUSH
62333: LD_INT 0
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 3
62342: PUSH
62343: LD_INT 1
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: LIST
62354: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62355: LD_ADDR_VAR 0 55
62359: PUSH
62360: LD_INT 3
62362: PUSH
62363: LD_INT 2
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 3
62372: PUSH
62373: LD_INT 3
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 2
62382: PUSH
62383: LD_INT 3
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: LIST
62394: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62395: LD_ADDR_VAR 0 56
62399: PUSH
62400: LD_INT 1
62402: PUSH
62403: LD_INT 3
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 0
62412: PUSH
62413: LD_INT 3
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 1
62422: NEG
62423: PUSH
62424: LD_INT 2
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: LIST
62435: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62436: LD_ADDR_VAR 0 57
62440: PUSH
62441: LD_INT 2
62443: NEG
62444: PUSH
62445: LD_INT 1
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 3
62454: NEG
62455: PUSH
62456: LD_INT 0
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 3
62465: NEG
62466: PUSH
62467: LD_INT 1
62469: NEG
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: LIST
62479: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62480: LD_ADDR_VAR 0 58
62484: PUSH
62485: LD_INT 2
62487: NEG
62488: PUSH
62489: LD_INT 3
62491: NEG
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 3
62499: NEG
62500: PUSH
62501: LD_INT 2
62503: NEG
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 3
62511: NEG
62512: PUSH
62513: LD_INT 3
62515: NEG
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: LIST
62525: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62526: LD_ADDR_VAR 0 59
62530: PUSH
62531: LD_INT 1
62533: NEG
62534: PUSH
62535: LD_INT 2
62537: NEG
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 0
62545: PUSH
62546: LD_INT 2
62548: NEG
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 1
62556: PUSH
62557: LD_INT 1
62559: NEG
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: LIST
62569: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62570: LD_ADDR_VAR 0 60
62574: PUSH
62575: LD_INT 1
62577: PUSH
62578: LD_INT 1
62580: NEG
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 2
62588: PUSH
62589: LD_INT 0
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 2
62598: PUSH
62599: LD_INT 1
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: LIST
62610: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62611: LD_ADDR_VAR 0 61
62615: PUSH
62616: LD_INT 2
62618: PUSH
62619: LD_INT 1
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 2
62628: PUSH
62629: LD_INT 2
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 1
62638: PUSH
62639: LD_INT 2
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: LIST
62650: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62651: LD_ADDR_VAR 0 62
62655: PUSH
62656: LD_INT 1
62658: PUSH
62659: LD_INT 2
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 0
62668: PUSH
62669: LD_INT 2
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 1
62678: NEG
62679: PUSH
62680: LD_INT 1
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: LIST
62691: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62692: LD_ADDR_VAR 0 63
62696: PUSH
62697: LD_INT 1
62699: NEG
62700: PUSH
62701: LD_INT 1
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 2
62710: NEG
62711: PUSH
62712: LD_INT 0
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 2
62721: NEG
62722: PUSH
62723: LD_INT 1
62725: NEG
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: LIST
62735: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62736: LD_ADDR_VAR 0 64
62740: PUSH
62741: LD_INT 1
62743: NEG
62744: PUSH
62745: LD_INT 2
62747: NEG
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 2
62755: NEG
62756: PUSH
62757: LD_INT 1
62759: NEG
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 2
62767: NEG
62768: PUSH
62769: LD_INT 2
62771: NEG
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: LIST
62781: ST_TO_ADDR
// end ; 2 :
62782: GO 66048
62784: LD_INT 2
62786: DOUBLE
62787: EQUAL
62788: IFTRUE 62792
62790: GO 66047
62792: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62793: LD_ADDR_VAR 0 29
62797: PUSH
62798: LD_INT 4
62800: PUSH
62801: LD_INT 0
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 4
62810: PUSH
62811: LD_INT 1
62813: NEG
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 5
62821: PUSH
62822: LD_INT 0
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 5
62831: PUSH
62832: LD_INT 1
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 4
62841: PUSH
62842: LD_INT 1
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 3
62851: PUSH
62852: LD_INT 0
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 3
62861: PUSH
62862: LD_INT 1
62864: NEG
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 3
62872: PUSH
62873: LD_INT 2
62875: NEG
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 5
62883: PUSH
62884: LD_INT 2
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 3
62893: PUSH
62894: LD_INT 3
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 3
62903: PUSH
62904: LD_INT 2
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 4
62913: PUSH
62914: LD_INT 3
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 4
62923: PUSH
62924: LD_INT 4
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 3
62933: PUSH
62934: LD_INT 4
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 2
62943: PUSH
62944: LD_INT 3
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 2
62953: PUSH
62954: LD_INT 2
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 4
62963: PUSH
62964: LD_INT 2
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 2
62973: PUSH
62974: LD_INT 4
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 0
62983: PUSH
62984: LD_INT 4
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 0
62993: PUSH
62994: LD_INT 3
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 1
63003: PUSH
63004: LD_INT 4
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 1
63013: PUSH
63014: LD_INT 5
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 0
63023: PUSH
63024: LD_INT 5
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 1
63033: NEG
63034: PUSH
63035: LD_INT 4
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 1
63044: NEG
63045: PUSH
63046: LD_INT 3
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 2
63055: PUSH
63056: LD_INT 5
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 2
63065: NEG
63066: PUSH
63067: LD_INT 3
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 3
63076: NEG
63077: PUSH
63078: LD_INT 0
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 3
63087: NEG
63088: PUSH
63089: LD_INT 1
63091: NEG
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 2
63099: NEG
63100: PUSH
63101: LD_INT 0
63103: PUSH
63104: EMPTY
63105: LIST
63106: LIST
63107: PUSH
63108: LD_INT 2
63110: NEG
63111: PUSH
63112: LD_INT 1
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 3
63121: NEG
63122: PUSH
63123: LD_INT 1
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 4
63132: NEG
63133: PUSH
63134: LD_INT 0
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 4
63143: NEG
63144: PUSH
63145: LD_INT 1
63147: NEG
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 4
63155: NEG
63156: PUSH
63157: LD_INT 2
63159: NEG
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 2
63167: NEG
63168: PUSH
63169: LD_INT 2
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 4
63178: NEG
63179: PUSH
63180: LD_INT 4
63182: NEG
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 4
63190: NEG
63191: PUSH
63192: LD_INT 5
63194: NEG
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 3
63202: NEG
63203: PUSH
63204: LD_INT 4
63206: NEG
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 3
63214: NEG
63215: PUSH
63216: LD_INT 3
63218: NEG
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 4
63226: NEG
63227: PUSH
63228: LD_INT 3
63230: NEG
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 5
63238: NEG
63239: PUSH
63240: LD_INT 4
63242: NEG
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 5
63250: NEG
63251: PUSH
63252: LD_INT 5
63254: NEG
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 3
63262: NEG
63263: PUSH
63264: LD_INT 5
63266: NEG
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 5
63274: NEG
63275: PUSH
63276: LD_INT 3
63278: NEG
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63331: LD_ADDR_VAR 0 30
63335: PUSH
63336: LD_INT 4
63338: PUSH
63339: LD_INT 4
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 4
63348: PUSH
63349: LD_INT 3
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 5
63358: PUSH
63359: LD_INT 4
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 5
63368: PUSH
63369: LD_INT 5
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 4
63378: PUSH
63379: LD_INT 5
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 3
63388: PUSH
63389: LD_INT 4
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 3
63398: PUSH
63399: LD_INT 3
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 5
63408: PUSH
63409: LD_INT 3
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 3
63418: PUSH
63419: LD_INT 5
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 0
63428: PUSH
63429: LD_INT 3
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 0
63438: PUSH
63439: LD_INT 2
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 1
63448: PUSH
63449: LD_INT 3
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 1
63458: PUSH
63459: LD_INT 4
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 0
63468: PUSH
63469: LD_INT 4
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 1
63478: NEG
63479: PUSH
63480: LD_INT 3
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 1
63489: NEG
63490: PUSH
63491: LD_INT 2
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 2
63500: PUSH
63501: LD_INT 4
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 2
63510: NEG
63511: PUSH
63512: LD_INT 2
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 4
63521: NEG
63522: PUSH
63523: LD_INT 0
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 4
63532: NEG
63533: PUSH
63534: LD_INT 1
63536: NEG
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 3
63544: NEG
63545: PUSH
63546: LD_INT 0
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 3
63555: NEG
63556: PUSH
63557: LD_INT 1
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 4
63566: NEG
63567: PUSH
63568: LD_INT 1
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 5
63577: NEG
63578: PUSH
63579: LD_INT 0
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 5
63588: NEG
63589: PUSH
63590: LD_INT 1
63592: NEG
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 5
63600: NEG
63601: PUSH
63602: LD_INT 2
63604: NEG
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 3
63612: NEG
63613: PUSH
63614: LD_INT 2
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 3
63623: NEG
63624: PUSH
63625: LD_INT 3
63627: NEG
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 3
63635: NEG
63636: PUSH
63637: LD_INT 4
63639: NEG
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 2
63647: NEG
63648: PUSH
63649: LD_INT 3
63651: NEG
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 2
63659: NEG
63660: PUSH
63661: LD_INT 2
63663: NEG
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 3
63671: NEG
63672: PUSH
63673: LD_INT 2
63675: NEG
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 4
63683: NEG
63684: PUSH
63685: LD_INT 3
63687: NEG
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 4
63695: NEG
63696: PUSH
63697: LD_INT 4
63699: NEG
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 2
63707: NEG
63708: PUSH
63709: LD_INT 4
63711: NEG
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 4
63719: NEG
63720: PUSH
63721: LD_INT 2
63723: NEG
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 0
63731: PUSH
63732: LD_INT 4
63734: NEG
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 0
63742: PUSH
63743: LD_INT 5
63745: NEG
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 1
63753: PUSH
63754: LD_INT 4
63756: NEG
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 1
63764: PUSH
63765: LD_INT 3
63767: NEG
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 0
63775: PUSH
63776: LD_INT 3
63778: NEG
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 1
63786: NEG
63787: PUSH
63788: LD_INT 4
63790: NEG
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 1
63798: NEG
63799: PUSH
63800: LD_INT 5
63802: NEG
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 2
63810: PUSH
63811: LD_INT 3
63813: NEG
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 2
63821: NEG
63822: PUSH
63823: LD_INT 5
63825: NEG
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63878: LD_ADDR_VAR 0 31
63882: PUSH
63883: LD_INT 0
63885: PUSH
63886: LD_INT 4
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 0
63895: PUSH
63896: LD_INT 3
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 1
63905: PUSH
63906: LD_INT 4
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: LD_INT 1
63915: PUSH
63916: LD_INT 5
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 0
63925: PUSH
63926: LD_INT 5
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: LD_INT 1
63935: NEG
63936: PUSH
63937: LD_INT 4
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 1
63946: NEG
63947: PUSH
63948: LD_INT 3
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 2
63957: PUSH
63958: LD_INT 5
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 2
63967: NEG
63968: PUSH
63969: LD_INT 3
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 3
63978: NEG
63979: PUSH
63980: LD_INT 0
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 3
63989: NEG
63990: PUSH
63991: LD_INT 1
63993: NEG
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 2
64001: NEG
64002: PUSH
64003: LD_INT 0
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_INT 2
64012: NEG
64013: PUSH
64014: LD_INT 1
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 3
64023: NEG
64024: PUSH
64025: LD_INT 1
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 4
64034: NEG
64035: PUSH
64036: LD_INT 0
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 4
64045: NEG
64046: PUSH
64047: LD_INT 1
64049: NEG
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 4
64057: NEG
64058: PUSH
64059: LD_INT 2
64061: NEG
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 2
64069: NEG
64070: PUSH
64071: LD_INT 2
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 4
64080: NEG
64081: PUSH
64082: LD_INT 4
64084: NEG
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 4
64092: NEG
64093: PUSH
64094: LD_INT 5
64096: NEG
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 3
64104: NEG
64105: PUSH
64106: LD_INT 4
64108: NEG
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: LD_INT 3
64116: NEG
64117: PUSH
64118: LD_INT 3
64120: NEG
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 4
64128: NEG
64129: PUSH
64130: LD_INT 3
64132: NEG
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 5
64140: NEG
64141: PUSH
64142: LD_INT 4
64144: NEG
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 5
64152: NEG
64153: PUSH
64154: LD_INT 5
64156: NEG
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 3
64164: NEG
64165: PUSH
64166: LD_INT 5
64168: NEG
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 5
64176: NEG
64177: PUSH
64178: LD_INT 3
64180: NEG
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PUSH
64186: LD_INT 0
64188: PUSH
64189: LD_INT 3
64191: NEG
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 0
64199: PUSH
64200: LD_INT 4
64202: NEG
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 1
64210: PUSH
64211: LD_INT 3
64213: NEG
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 1
64221: PUSH
64222: LD_INT 2
64224: NEG
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 0
64232: PUSH
64233: LD_INT 2
64235: NEG
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 1
64243: NEG
64244: PUSH
64245: LD_INT 3
64247: NEG
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 1
64255: NEG
64256: PUSH
64257: LD_INT 4
64259: NEG
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 2
64267: PUSH
64268: LD_INT 2
64270: NEG
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 2
64278: NEG
64279: PUSH
64280: LD_INT 4
64282: NEG
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 4
64290: PUSH
64291: LD_INT 0
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 4
64300: PUSH
64301: LD_INT 1
64303: NEG
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 5
64311: PUSH
64312: LD_INT 0
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 5
64321: PUSH
64322: LD_INT 1
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 4
64331: PUSH
64332: LD_INT 1
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 3
64341: PUSH
64342: LD_INT 0
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 3
64351: PUSH
64352: LD_INT 1
64354: NEG
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 3
64362: PUSH
64363: LD_INT 2
64365: NEG
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 5
64373: PUSH
64374: LD_INT 2
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64428: LD_ADDR_VAR 0 32
64432: PUSH
64433: LD_INT 4
64435: NEG
64436: PUSH
64437: LD_INT 0
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 4
64446: NEG
64447: PUSH
64448: LD_INT 1
64450: NEG
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 3
64458: NEG
64459: PUSH
64460: LD_INT 0
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 3
64469: NEG
64470: PUSH
64471: LD_INT 1
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 4
64480: NEG
64481: PUSH
64482: LD_INT 1
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 5
64491: NEG
64492: PUSH
64493: LD_INT 0
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 5
64502: NEG
64503: PUSH
64504: LD_INT 1
64506: NEG
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 5
64514: NEG
64515: PUSH
64516: LD_INT 2
64518: NEG
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 3
64526: NEG
64527: PUSH
64528: LD_INT 2
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 3
64537: NEG
64538: PUSH
64539: LD_INT 3
64541: NEG
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 3
64549: NEG
64550: PUSH
64551: LD_INT 4
64553: NEG
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: LD_INT 2
64561: NEG
64562: PUSH
64563: LD_INT 3
64565: NEG
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: LD_INT 2
64573: NEG
64574: PUSH
64575: LD_INT 2
64577: NEG
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 3
64585: NEG
64586: PUSH
64587: LD_INT 2
64589: NEG
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: LD_INT 4
64597: NEG
64598: PUSH
64599: LD_INT 3
64601: NEG
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 4
64609: NEG
64610: PUSH
64611: LD_INT 4
64613: NEG
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 2
64621: NEG
64622: PUSH
64623: LD_INT 4
64625: NEG
64626: PUSH
64627: EMPTY
64628: LIST
64629: LIST
64630: PUSH
64631: LD_INT 4
64633: NEG
64634: PUSH
64635: LD_INT 2
64637: NEG
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 0
64645: PUSH
64646: LD_INT 4
64648: NEG
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: LD_INT 0
64656: PUSH
64657: LD_INT 5
64659: NEG
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 1
64667: PUSH
64668: LD_INT 4
64670: NEG
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 1
64678: PUSH
64679: LD_INT 3
64681: NEG
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 0
64689: PUSH
64690: LD_INT 3
64692: NEG
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 1
64700: NEG
64701: PUSH
64702: LD_INT 4
64704: NEG
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 1
64712: NEG
64713: PUSH
64714: LD_INT 5
64716: NEG
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 2
64724: PUSH
64725: LD_INT 3
64727: NEG
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 2
64735: NEG
64736: PUSH
64737: LD_INT 5
64739: NEG
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 3
64747: PUSH
64748: LD_INT 0
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 3
64757: PUSH
64758: LD_INT 1
64760: NEG
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 4
64768: PUSH
64769: LD_INT 0
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 4
64778: PUSH
64779: LD_INT 1
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 3
64788: PUSH
64789: LD_INT 1
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 2
64798: PUSH
64799: LD_INT 0
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 2
64808: PUSH
64809: LD_INT 1
64811: NEG
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 2
64819: PUSH
64820: LD_INT 2
64822: NEG
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: PUSH
64828: LD_INT 4
64830: PUSH
64831: LD_INT 2
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 4
64840: PUSH
64841: LD_INT 4
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: LD_INT 4
64850: PUSH
64851: LD_INT 3
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 5
64860: PUSH
64861: LD_INT 4
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 5
64870: PUSH
64871: LD_INT 5
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 4
64880: PUSH
64881: LD_INT 5
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 3
64890: PUSH
64891: LD_INT 4
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: LD_INT 3
64900: PUSH
64901: LD_INT 3
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 5
64910: PUSH
64911: LD_INT 3
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 3
64920: PUSH
64921: LD_INT 5
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64975: LD_ADDR_VAR 0 33
64979: PUSH
64980: LD_INT 4
64982: NEG
64983: PUSH
64984: LD_INT 4
64986: NEG
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 4
64994: NEG
64995: PUSH
64996: LD_INT 5
64998: NEG
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 3
65006: NEG
65007: PUSH
65008: LD_INT 4
65010: NEG
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: LD_INT 3
65018: NEG
65019: PUSH
65020: LD_INT 3
65022: NEG
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 4
65030: NEG
65031: PUSH
65032: LD_INT 3
65034: NEG
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 5
65042: NEG
65043: PUSH
65044: LD_INT 4
65046: NEG
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 5
65054: NEG
65055: PUSH
65056: LD_INT 5
65058: NEG
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: LD_INT 3
65066: NEG
65067: PUSH
65068: LD_INT 5
65070: NEG
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 5
65078: NEG
65079: PUSH
65080: LD_INT 3
65082: NEG
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 0
65090: PUSH
65091: LD_INT 3
65093: NEG
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 0
65101: PUSH
65102: LD_INT 4
65104: NEG
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 1
65112: PUSH
65113: LD_INT 3
65115: NEG
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 1
65123: PUSH
65124: LD_INT 2
65126: NEG
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 0
65134: PUSH
65135: LD_INT 2
65137: NEG
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 1
65145: NEG
65146: PUSH
65147: LD_INT 3
65149: NEG
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 1
65157: NEG
65158: PUSH
65159: LD_INT 4
65161: NEG
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 2
65169: PUSH
65170: LD_INT 2
65172: NEG
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 2
65180: NEG
65181: PUSH
65182: LD_INT 4
65184: NEG
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 4
65192: PUSH
65193: LD_INT 0
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 4
65202: PUSH
65203: LD_INT 1
65205: NEG
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 5
65213: PUSH
65214: LD_INT 0
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 5
65223: PUSH
65224: LD_INT 1
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 4
65233: PUSH
65234: LD_INT 1
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 3
65243: PUSH
65244: LD_INT 0
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 3
65253: PUSH
65254: LD_INT 1
65256: NEG
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: PUSH
65262: LD_INT 3
65264: PUSH
65265: LD_INT 2
65267: NEG
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 5
65275: PUSH
65276: LD_INT 2
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 3
65285: PUSH
65286: LD_INT 3
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 3
65295: PUSH
65296: LD_INT 2
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 4
65305: PUSH
65306: LD_INT 3
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 4
65315: PUSH
65316: LD_INT 4
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 3
65325: PUSH
65326: LD_INT 4
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 2
65335: PUSH
65336: LD_INT 3
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 2
65345: PUSH
65346: LD_INT 2
65348: PUSH
65349: EMPTY
65350: LIST
65351: LIST
65352: PUSH
65353: LD_INT 4
65355: PUSH
65356: LD_INT 2
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 2
65365: PUSH
65366: LD_INT 4
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: LD_INT 0
65375: PUSH
65376: LD_INT 4
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_INT 0
65385: PUSH
65386: LD_INT 3
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 1
65395: PUSH
65396: LD_INT 4
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 1
65405: PUSH
65406: LD_INT 5
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 0
65415: PUSH
65416: LD_INT 5
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 1
65425: NEG
65426: PUSH
65427: LD_INT 4
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 1
65436: NEG
65437: PUSH
65438: LD_INT 3
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 2
65447: PUSH
65448: LD_INT 5
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 2
65457: NEG
65458: PUSH
65459: LD_INT 3
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: LIST
65476: LIST
65477: LIST
65478: LIST
65479: LIST
65480: LIST
65481: LIST
65482: LIST
65483: LIST
65484: LIST
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65513: LD_ADDR_VAR 0 34
65517: PUSH
65518: LD_INT 0
65520: PUSH
65521: LD_INT 4
65523: NEG
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 0
65531: PUSH
65532: LD_INT 5
65534: NEG
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 1
65542: PUSH
65543: LD_INT 4
65545: NEG
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 1
65553: PUSH
65554: LD_INT 3
65556: NEG
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 0
65564: PUSH
65565: LD_INT 3
65567: NEG
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 1
65575: NEG
65576: PUSH
65577: LD_INT 4
65579: NEG
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 1
65587: NEG
65588: PUSH
65589: LD_INT 5
65591: NEG
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 2
65599: PUSH
65600: LD_INT 3
65602: NEG
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 2
65610: NEG
65611: PUSH
65612: LD_INT 5
65614: NEG
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 3
65622: PUSH
65623: LD_INT 0
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: LD_INT 3
65632: PUSH
65633: LD_INT 1
65635: NEG
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 4
65643: PUSH
65644: LD_INT 0
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 4
65653: PUSH
65654: LD_INT 1
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: PUSH
65661: LD_INT 3
65663: PUSH
65664: LD_INT 1
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: PUSH
65671: LD_INT 2
65673: PUSH
65674: LD_INT 0
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: LD_INT 2
65683: PUSH
65684: LD_INT 1
65686: NEG
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 2
65694: PUSH
65695: LD_INT 2
65697: NEG
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 4
65705: PUSH
65706: LD_INT 2
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 4
65715: PUSH
65716: LD_INT 4
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 4
65725: PUSH
65726: LD_INT 3
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 5
65735: PUSH
65736: LD_INT 4
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 5
65745: PUSH
65746: LD_INT 5
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 4
65755: PUSH
65756: LD_INT 5
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 3
65765: PUSH
65766: LD_INT 4
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 3
65775: PUSH
65776: LD_INT 3
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 5
65785: PUSH
65786: LD_INT 3
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 3
65795: PUSH
65796: LD_INT 5
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 0
65805: PUSH
65806: LD_INT 3
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 0
65815: PUSH
65816: LD_INT 2
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: PUSH
65823: LD_INT 1
65825: PUSH
65826: LD_INT 3
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 1
65835: PUSH
65836: LD_INT 4
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 0
65845: PUSH
65846: LD_INT 4
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 1
65855: NEG
65856: PUSH
65857: LD_INT 3
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: PUSH
65864: LD_INT 1
65866: NEG
65867: PUSH
65868: LD_INT 2
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 2
65877: PUSH
65878: LD_INT 4
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 2
65887: NEG
65888: PUSH
65889: LD_INT 2
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 4
65898: NEG
65899: PUSH
65900: LD_INT 0
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 4
65909: NEG
65910: PUSH
65911: LD_INT 1
65913: NEG
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_INT 3
65921: NEG
65922: PUSH
65923: LD_INT 0
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: LD_INT 3
65932: NEG
65933: PUSH
65934: LD_INT 1
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 4
65943: NEG
65944: PUSH
65945: LD_INT 1
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 5
65954: NEG
65955: PUSH
65956: LD_INT 0
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 5
65965: NEG
65966: PUSH
65967: LD_INT 1
65969: NEG
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 5
65977: NEG
65978: PUSH
65979: LD_INT 2
65981: NEG
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 3
65989: NEG
65990: PUSH
65991: LD_INT 2
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: LIST
66022: LIST
66023: LIST
66024: LIST
66025: LIST
66026: LIST
66027: LIST
66028: LIST
66029: LIST
66030: LIST
66031: LIST
66032: LIST
66033: LIST
66034: LIST
66035: LIST
66036: LIST
66037: LIST
66038: LIST
66039: LIST
66040: LIST
66041: LIST
66042: LIST
66043: LIST
66044: ST_TO_ADDR
// end ; end ;
66045: GO 66048
66047: POP
// case btype of b_depot , b_warehouse :
66048: LD_VAR 0 1
66052: PUSH
66053: LD_INT 0
66055: DOUBLE
66056: EQUAL
66057: IFTRUE 66067
66059: LD_INT 1
66061: DOUBLE
66062: EQUAL
66063: IFTRUE 66067
66065: GO 66268
66067: POP
// case nation of nation_american :
66068: LD_VAR 0 5
66072: PUSH
66073: LD_INT 1
66075: DOUBLE
66076: EQUAL
66077: IFTRUE 66081
66079: GO 66137
66081: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66082: LD_ADDR_VAR 0 9
66086: PUSH
66087: LD_VAR 0 11
66091: PUSH
66092: LD_VAR 0 12
66096: PUSH
66097: LD_VAR 0 13
66101: PUSH
66102: LD_VAR 0 14
66106: PUSH
66107: LD_VAR 0 15
66111: PUSH
66112: LD_VAR 0 16
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: PUSH
66125: LD_VAR 0 4
66129: PUSH
66130: LD_INT 1
66132: PLUS
66133: ARRAY
66134: ST_TO_ADDR
66135: GO 66266
66137: LD_INT 2
66139: DOUBLE
66140: EQUAL
66141: IFTRUE 66145
66143: GO 66201
66145: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66146: LD_ADDR_VAR 0 9
66150: PUSH
66151: LD_VAR 0 17
66155: PUSH
66156: LD_VAR 0 18
66160: PUSH
66161: LD_VAR 0 19
66165: PUSH
66166: LD_VAR 0 20
66170: PUSH
66171: LD_VAR 0 21
66175: PUSH
66176: LD_VAR 0 22
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: PUSH
66189: LD_VAR 0 4
66193: PUSH
66194: LD_INT 1
66196: PLUS
66197: ARRAY
66198: ST_TO_ADDR
66199: GO 66266
66201: LD_INT 3
66203: DOUBLE
66204: EQUAL
66205: IFTRUE 66209
66207: GO 66265
66209: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66210: LD_ADDR_VAR 0 9
66214: PUSH
66215: LD_VAR 0 23
66219: PUSH
66220: LD_VAR 0 24
66224: PUSH
66225: LD_VAR 0 25
66229: PUSH
66230: LD_VAR 0 26
66234: PUSH
66235: LD_VAR 0 27
66239: PUSH
66240: LD_VAR 0 28
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: PUSH
66253: LD_VAR 0 4
66257: PUSH
66258: LD_INT 1
66260: PLUS
66261: ARRAY
66262: ST_TO_ADDR
66263: GO 66266
66265: POP
66266: GO 66821
66268: LD_INT 2
66270: DOUBLE
66271: EQUAL
66272: IFTRUE 66282
66274: LD_INT 3
66276: DOUBLE
66277: EQUAL
66278: IFTRUE 66282
66280: GO 66338
66282: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66283: LD_ADDR_VAR 0 9
66287: PUSH
66288: LD_VAR 0 29
66292: PUSH
66293: LD_VAR 0 30
66297: PUSH
66298: LD_VAR 0 31
66302: PUSH
66303: LD_VAR 0 32
66307: PUSH
66308: LD_VAR 0 33
66312: PUSH
66313: LD_VAR 0 34
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: PUSH
66326: LD_VAR 0 4
66330: PUSH
66331: LD_INT 1
66333: PLUS
66334: ARRAY
66335: ST_TO_ADDR
66336: GO 66821
66338: LD_INT 16
66340: DOUBLE
66341: EQUAL
66342: IFTRUE 66400
66344: LD_INT 17
66346: DOUBLE
66347: EQUAL
66348: IFTRUE 66400
66350: LD_INT 18
66352: DOUBLE
66353: EQUAL
66354: IFTRUE 66400
66356: LD_INT 19
66358: DOUBLE
66359: EQUAL
66360: IFTRUE 66400
66362: LD_INT 22
66364: DOUBLE
66365: EQUAL
66366: IFTRUE 66400
66368: LD_INT 20
66370: DOUBLE
66371: EQUAL
66372: IFTRUE 66400
66374: LD_INT 21
66376: DOUBLE
66377: EQUAL
66378: IFTRUE 66400
66380: LD_INT 23
66382: DOUBLE
66383: EQUAL
66384: IFTRUE 66400
66386: LD_INT 24
66388: DOUBLE
66389: EQUAL
66390: IFTRUE 66400
66392: LD_INT 25
66394: DOUBLE
66395: EQUAL
66396: IFTRUE 66400
66398: GO 66456
66400: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66401: LD_ADDR_VAR 0 9
66405: PUSH
66406: LD_VAR 0 35
66410: PUSH
66411: LD_VAR 0 36
66415: PUSH
66416: LD_VAR 0 37
66420: PUSH
66421: LD_VAR 0 38
66425: PUSH
66426: LD_VAR 0 39
66430: PUSH
66431: LD_VAR 0 40
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: PUSH
66444: LD_VAR 0 4
66448: PUSH
66449: LD_INT 1
66451: PLUS
66452: ARRAY
66453: ST_TO_ADDR
66454: GO 66821
66456: LD_INT 6
66458: DOUBLE
66459: EQUAL
66460: IFTRUE 66512
66462: LD_INT 7
66464: DOUBLE
66465: EQUAL
66466: IFTRUE 66512
66468: LD_INT 8
66470: DOUBLE
66471: EQUAL
66472: IFTRUE 66512
66474: LD_INT 13
66476: DOUBLE
66477: EQUAL
66478: IFTRUE 66512
66480: LD_INT 12
66482: DOUBLE
66483: EQUAL
66484: IFTRUE 66512
66486: LD_INT 15
66488: DOUBLE
66489: EQUAL
66490: IFTRUE 66512
66492: LD_INT 11
66494: DOUBLE
66495: EQUAL
66496: IFTRUE 66512
66498: LD_INT 14
66500: DOUBLE
66501: EQUAL
66502: IFTRUE 66512
66504: LD_INT 10
66506: DOUBLE
66507: EQUAL
66508: IFTRUE 66512
66510: GO 66568
66512: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66513: LD_ADDR_VAR 0 9
66517: PUSH
66518: LD_VAR 0 41
66522: PUSH
66523: LD_VAR 0 42
66527: PUSH
66528: LD_VAR 0 43
66532: PUSH
66533: LD_VAR 0 44
66537: PUSH
66538: LD_VAR 0 45
66542: PUSH
66543: LD_VAR 0 46
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: LIST
66552: LIST
66553: LIST
66554: LIST
66555: PUSH
66556: LD_VAR 0 4
66560: PUSH
66561: LD_INT 1
66563: PLUS
66564: ARRAY
66565: ST_TO_ADDR
66566: GO 66821
66568: LD_INT 36
66570: DOUBLE
66571: EQUAL
66572: IFTRUE 66576
66574: GO 66632
66576: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66577: LD_ADDR_VAR 0 9
66581: PUSH
66582: LD_VAR 0 47
66586: PUSH
66587: LD_VAR 0 48
66591: PUSH
66592: LD_VAR 0 49
66596: PUSH
66597: LD_VAR 0 50
66601: PUSH
66602: LD_VAR 0 51
66606: PUSH
66607: LD_VAR 0 52
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: PUSH
66620: LD_VAR 0 4
66624: PUSH
66625: LD_INT 1
66627: PLUS
66628: ARRAY
66629: ST_TO_ADDR
66630: GO 66821
66632: LD_INT 4
66634: DOUBLE
66635: EQUAL
66636: IFTRUE 66658
66638: LD_INT 5
66640: DOUBLE
66641: EQUAL
66642: IFTRUE 66658
66644: LD_INT 34
66646: DOUBLE
66647: EQUAL
66648: IFTRUE 66658
66650: LD_INT 37
66652: DOUBLE
66653: EQUAL
66654: IFTRUE 66658
66656: GO 66714
66658: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66659: LD_ADDR_VAR 0 9
66663: PUSH
66664: LD_VAR 0 53
66668: PUSH
66669: LD_VAR 0 54
66673: PUSH
66674: LD_VAR 0 55
66678: PUSH
66679: LD_VAR 0 56
66683: PUSH
66684: LD_VAR 0 57
66688: PUSH
66689: LD_VAR 0 58
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: PUSH
66702: LD_VAR 0 4
66706: PUSH
66707: LD_INT 1
66709: PLUS
66710: ARRAY
66711: ST_TO_ADDR
66712: GO 66821
66714: LD_INT 31
66716: DOUBLE
66717: EQUAL
66718: IFTRUE 66764
66720: LD_INT 32
66722: DOUBLE
66723: EQUAL
66724: IFTRUE 66764
66726: LD_INT 33
66728: DOUBLE
66729: EQUAL
66730: IFTRUE 66764
66732: LD_INT 27
66734: DOUBLE
66735: EQUAL
66736: IFTRUE 66764
66738: LD_INT 26
66740: DOUBLE
66741: EQUAL
66742: IFTRUE 66764
66744: LD_INT 28
66746: DOUBLE
66747: EQUAL
66748: IFTRUE 66764
66750: LD_INT 29
66752: DOUBLE
66753: EQUAL
66754: IFTRUE 66764
66756: LD_INT 30
66758: DOUBLE
66759: EQUAL
66760: IFTRUE 66764
66762: GO 66820
66764: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66765: LD_ADDR_VAR 0 9
66769: PUSH
66770: LD_VAR 0 59
66774: PUSH
66775: LD_VAR 0 60
66779: PUSH
66780: LD_VAR 0 61
66784: PUSH
66785: LD_VAR 0 62
66789: PUSH
66790: LD_VAR 0 63
66794: PUSH
66795: LD_VAR 0 64
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: PUSH
66808: LD_VAR 0 4
66812: PUSH
66813: LD_INT 1
66815: PLUS
66816: ARRAY
66817: ST_TO_ADDR
66818: GO 66821
66820: POP
// temp_list2 = [ ] ;
66821: LD_ADDR_VAR 0 10
66825: PUSH
66826: EMPTY
66827: ST_TO_ADDR
// for i in temp_list do
66828: LD_ADDR_VAR 0 8
66832: PUSH
66833: LD_VAR 0 9
66837: PUSH
66838: FOR_IN
66839: IFFALSE 66891
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66841: LD_ADDR_VAR 0 10
66845: PUSH
66846: LD_VAR 0 10
66850: PUSH
66851: LD_VAR 0 8
66855: PUSH
66856: LD_INT 1
66858: ARRAY
66859: PUSH
66860: LD_VAR 0 2
66864: PLUS
66865: PUSH
66866: LD_VAR 0 8
66870: PUSH
66871: LD_INT 2
66873: ARRAY
66874: PUSH
66875: LD_VAR 0 3
66879: PLUS
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: EMPTY
66886: LIST
66887: ADD
66888: ST_TO_ADDR
66889: GO 66838
66891: POP
66892: POP
// result = temp_list2 ;
66893: LD_ADDR_VAR 0 7
66897: PUSH
66898: LD_VAR 0 10
66902: ST_TO_ADDR
// end ;
66903: LD_VAR 0 7
66907: RET
// export function EnemyInRange ( unit , dist ) ; begin
66908: LD_INT 0
66910: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66911: LD_ADDR_VAR 0 3
66915: PUSH
66916: LD_VAR 0 1
66920: PPUSH
66921: CALL_OW 255
66925: PPUSH
66926: LD_VAR 0 1
66930: PPUSH
66931: CALL_OW 250
66935: PPUSH
66936: LD_VAR 0 1
66940: PPUSH
66941: CALL_OW 251
66945: PPUSH
66946: LD_VAR 0 2
66950: PPUSH
66951: CALL 40310 0 4
66955: PUSH
66956: LD_INT 4
66958: ARRAY
66959: ST_TO_ADDR
// end ;
66960: LD_VAR 0 3
66964: RET
// export function PlayerSeeMe ( unit ) ; begin
66965: LD_INT 0
66967: PPUSH
// result := See ( your_side , unit ) ;
66968: LD_ADDR_VAR 0 2
66972: PUSH
66973: LD_OWVAR 2
66977: PPUSH
66978: LD_VAR 0 1
66982: PPUSH
66983: CALL_OW 292
66987: ST_TO_ADDR
// end ;
66988: LD_VAR 0 2
66992: RET
// export function ReverseDir ( unit ) ; begin
66993: LD_INT 0
66995: PPUSH
// if not unit then
66996: LD_VAR 0 1
67000: NOT
67001: IFFALSE 67005
// exit ;
67003: GO 67028
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67005: LD_ADDR_VAR 0 2
67009: PUSH
67010: LD_VAR 0 1
67014: PPUSH
67015: CALL_OW 254
67019: PUSH
67020: LD_INT 3
67022: PLUS
67023: PUSH
67024: LD_INT 6
67026: MOD
67027: ST_TO_ADDR
// end ;
67028: LD_VAR 0 2
67032: RET
// export function ReverseArray ( array ) ; var i ; begin
67033: LD_INT 0
67035: PPUSH
67036: PPUSH
// if not array then
67037: LD_VAR 0 1
67041: NOT
67042: IFFALSE 67046
// exit ;
67044: GO 67101
// result := [ ] ;
67046: LD_ADDR_VAR 0 2
67050: PUSH
67051: EMPTY
67052: ST_TO_ADDR
// for i := array downto 1 do
67053: LD_ADDR_VAR 0 3
67057: PUSH
67058: DOUBLE
67059: LD_VAR 0 1
67063: INC
67064: ST_TO_ADDR
67065: LD_INT 1
67067: PUSH
67068: FOR_DOWNTO
67069: IFFALSE 67099
// result := Join ( result , array [ i ] ) ;
67071: LD_ADDR_VAR 0 2
67075: PUSH
67076: LD_VAR 0 2
67080: PPUSH
67081: LD_VAR 0 1
67085: PUSH
67086: LD_VAR 0 3
67090: ARRAY
67091: PPUSH
67092: CALL 71726 0 2
67096: ST_TO_ADDR
67097: GO 67068
67099: POP
67100: POP
// end ;
67101: LD_VAR 0 2
67105: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
67106: LD_INT 0
67108: PPUSH
67109: PPUSH
67110: PPUSH
67111: PPUSH
67112: PPUSH
67113: PPUSH
// if not unit or not hexes then
67114: LD_VAR 0 1
67118: NOT
67119: PUSH
67120: LD_VAR 0 2
67124: NOT
67125: OR
67126: IFFALSE 67130
// exit ;
67128: GO 67253
// dist := 9999 ;
67130: LD_ADDR_VAR 0 5
67134: PUSH
67135: LD_INT 9999
67137: ST_TO_ADDR
// for i = 1 to hexes do
67138: LD_ADDR_VAR 0 4
67142: PUSH
67143: DOUBLE
67144: LD_INT 1
67146: DEC
67147: ST_TO_ADDR
67148: LD_VAR 0 2
67152: PUSH
67153: FOR_TO
67154: IFFALSE 67241
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67156: LD_ADDR_VAR 0 6
67160: PUSH
67161: LD_VAR 0 1
67165: PPUSH
67166: LD_VAR 0 2
67170: PUSH
67171: LD_VAR 0 4
67175: ARRAY
67176: PUSH
67177: LD_INT 1
67179: ARRAY
67180: PPUSH
67181: LD_VAR 0 2
67185: PUSH
67186: LD_VAR 0 4
67190: ARRAY
67191: PUSH
67192: LD_INT 2
67194: ARRAY
67195: PPUSH
67196: CALL_OW 297
67200: ST_TO_ADDR
// if tdist < dist then
67201: LD_VAR 0 6
67205: PUSH
67206: LD_VAR 0 5
67210: LESS
67211: IFFALSE 67239
// begin hex := hexes [ i ] ;
67213: LD_ADDR_VAR 0 8
67217: PUSH
67218: LD_VAR 0 2
67222: PUSH
67223: LD_VAR 0 4
67227: ARRAY
67228: ST_TO_ADDR
// dist := tdist ;
67229: LD_ADDR_VAR 0 5
67233: PUSH
67234: LD_VAR 0 6
67238: ST_TO_ADDR
// end ; end ;
67239: GO 67153
67241: POP
67242: POP
// result := hex ;
67243: LD_ADDR_VAR 0 3
67247: PUSH
67248: LD_VAR 0 8
67252: ST_TO_ADDR
// end ;
67253: LD_VAR 0 3
67257: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67258: LD_INT 0
67260: PPUSH
67261: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67262: LD_VAR 0 1
67266: NOT
67267: PUSH
67268: LD_VAR 0 1
67272: PUSH
67273: LD_INT 21
67275: PUSH
67276: LD_INT 2
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 23
67285: PUSH
67286: LD_INT 2
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PPUSH
67297: CALL_OW 69
67301: IN
67302: NOT
67303: OR
67304: IFFALSE 67308
// exit ;
67306: GO 67355
// for i = 1 to 3 do
67308: LD_ADDR_VAR 0 3
67312: PUSH
67313: DOUBLE
67314: LD_INT 1
67316: DEC
67317: ST_TO_ADDR
67318: LD_INT 3
67320: PUSH
67321: FOR_TO
67322: IFFALSE 67353
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67324: LD_VAR 0 1
67328: PPUSH
67329: CALL_OW 250
67333: PPUSH
67334: LD_VAR 0 1
67338: PPUSH
67339: CALL_OW 251
67343: PPUSH
67344: LD_INT 1
67346: PPUSH
67347: CALL_OW 453
67351: GO 67321
67353: POP
67354: POP
// end ;
67355: LD_VAR 0 2
67359: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67360: LD_INT 0
67362: PPUSH
67363: PPUSH
67364: PPUSH
67365: PPUSH
67366: PPUSH
67367: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
67368: LD_VAR 0 1
67372: NOT
67373: PUSH
67374: LD_VAR 0 2
67378: NOT
67379: OR
67380: PUSH
67381: LD_VAR 0 1
67385: PPUSH
67386: CALL_OW 314
67390: OR
67391: IFFALSE 67395
// exit ;
67393: GO 67836
// x := GetX ( enemy_unit ) ;
67395: LD_ADDR_VAR 0 7
67399: PUSH
67400: LD_VAR 0 2
67404: PPUSH
67405: CALL_OW 250
67409: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67410: LD_ADDR_VAR 0 8
67414: PUSH
67415: LD_VAR 0 2
67419: PPUSH
67420: CALL_OW 251
67424: ST_TO_ADDR
// if not x or not y then
67425: LD_VAR 0 7
67429: NOT
67430: PUSH
67431: LD_VAR 0 8
67435: NOT
67436: OR
67437: IFFALSE 67441
// exit ;
67439: GO 67836
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67441: LD_ADDR_VAR 0 6
67445: PUSH
67446: LD_VAR 0 7
67450: PPUSH
67451: LD_INT 0
67453: PPUSH
67454: LD_INT 4
67456: PPUSH
67457: CALL_OW 272
67461: PUSH
67462: LD_VAR 0 8
67466: PPUSH
67467: LD_INT 0
67469: PPUSH
67470: LD_INT 4
67472: PPUSH
67473: CALL_OW 273
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: LD_VAR 0 7
67486: PPUSH
67487: LD_INT 1
67489: PPUSH
67490: LD_INT 4
67492: PPUSH
67493: CALL_OW 272
67497: PUSH
67498: LD_VAR 0 8
67502: PPUSH
67503: LD_INT 1
67505: PPUSH
67506: LD_INT 4
67508: PPUSH
67509: CALL_OW 273
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_VAR 0 7
67522: PPUSH
67523: LD_INT 2
67525: PPUSH
67526: LD_INT 4
67528: PPUSH
67529: CALL_OW 272
67533: PUSH
67534: LD_VAR 0 8
67538: PPUSH
67539: LD_INT 2
67541: PPUSH
67542: LD_INT 4
67544: PPUSH
67545: CALL_OW 273
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_VAR 0 7
67558: PPUSH
67559: LD_INT 3
67561: PPUSH
67562: LD_INT 4
67564: PPUSH
67565: CALL_OW 272
67569: PUSH
67570: LD_VAR 0 8
67574: PPUSH
67575: LD_INT 3
67577: PPUSH
67578: LD_INT 4
67580: PPUSH
67581: CALL_OW 273
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_VAR 0 7
67594: PPUSH
67595: LD_INT 4
67597: PPUSH
67598: LD_INT 4
67600: PPUSH
67601: CALL_OW 272
67605: PUSH
67606: LD_VAR 0 8
67610: PPUSH
67611: LD_INT 4
67613: PPUSH
67614: LD_INT 4
67616: PPUSH
67617: CALL_OW 273
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_VAR 0 7
67630: PPUSH
67631: LD_INT 5
67633: PPUSH
67634: LD_INT 4
67636: PPUSH
67637: CALL_OW 272
67641: PUSH
67642: LD_VAR 0 8
67646: PPUSH
67647: LD_INT 5
67649: PPUSH
67650: LD_INT 4
67652: PPUSH
67653: CALL_OW 273
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: ST_TO_ADDR
// for i = tmp downto 1 do
67670: LD_ADDR_VAR 0 4
67674: PUSH
67675: DOUBLE
67676: LD_VAR 0 6
67680: INC
67681: ST_TO_ADDR
67682: LD_INT 1
67684: PUSH
67685: FOR_DOWNTO
67686: IFFALSE 67787
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67688: LD_VAR 0 6
67692: PUSH
67693: LD_VAR 0 4
67697: ARRAY
67698: PUSH
67699: LD_INT 1
67701: ARRAY
67702: PPUSH
67703: LD_VAR 0 6
67707: PUSH
67708: LD_VAR 0 4
67712: ARRAY
67713: PUSH
67714: LD_INT 2
67716: ARRAY
67717: PPUSH
67718: CALL_OW 488
67722: NOT
67723: PUSH
67724: LD_VAR 0 6
67728: PUSH
67729: LD_VAR 0 4
67733: ARRAY
67734: PUSH
67735: LD_INT 1
67737: ARRAY
67738: PPUSH
67739: LD_VAR 0 6
67743: PUSH
67744: LD_VAR 0 4
67748: ARRAY
67749: PUSH
67750: LD_INT 2
67752: ARRAY
67753: PPUSH
67754: CALL_OW 428
67758: PUSH
67759: LD_INT 0
67761: NONEQUAL
67762: OR
67763: IFFALSE 67785
// tmp := Delete ( tmp , i ) ;
67765: LD_ADDR_VAR 0 6
67769: PUSH
67770: LD_VAR 0 6
67774: PPUSH
67775: LD_VAR 0 4
67779: PPUSH
67780: CALL_OW 3
67784: ST_TO_ADDR
67785: GO 67685
67787: POP
67788: POP
// j := GetClosestHex ( unit , tmp ) ;
67789: LD_ADDR_VAR 0 5
67793: PUSH
67794: LD_VAR 0 1
67798: PPUSH
67799: LD_VAR 0 6
67803: PPUSH
67804: CALL 67106 0 2
67808: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67809: LD_VAR 0 1
67813: PPUSH
67814: LD_VAR 0 5
67818: PUSH
67819: LD_INT 1
67821: ARRAY
67822: PPUSH
67823: LD_VAR 0 5
67827: PUSH
67828: LD_INT 2
67830: ARRAY
67831: PPUSH
67832: CALL_OW 111
// end ;
67836: LD_VAR 0 3
67840: RET
// export function PrepareApemanSoldier ( ) ; begin
67841: LD_INT 0
67843: PPUSH
// uc_nation := 0 ;
67844: LD_ADDR_OWVAR 21
67848: PUSH
67849: LD_INT 0
67851: ST_TO_ADDR
// hc_sex := sex_male ;
67852: LD_ADDR_OWVAR 27
67856: PUSH
67857: LD_INT 1
67859: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
67860: LD_ADDR_OWVAR 28
67864: PUSH
67865: LD_INT 15
67867: ST_TO_ADDR
// hc_gallery :=  ;
67868: LD_ADDR_OWVAR 33
67872: PUSH
67873: LD_STRING 
67875: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67876: LD_ADDR_OWVAR 31
67880: PUSH
67881: LD_INT 0
67883: PPUSH
67884: LD_INT 3
67886: PPUSH
67887: CALL_OW 12
67891: PUSH
67892: LD_INT 0
67894: PPUSH
67895: LD_INT 3
67897: PPUSH
67898: CALL_OW 12
67902: PUSH
67903: LD_INT 0
67905: PUSH
67906: LD_INT 0
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: ST_TO_ADDR
// end ;
67915: LD_VAR 0 1
67919: RET
// export function PrepareApemanEngineer ( ) ; begin
67920: LD_INT 0
67922: PPUSH
// uc_nation := 0 ;
67923: LD_ADDR_OWVAR 21
67927: PUSH
67928: LD_INT 0
67930: ST_TO_ADDR
// hc_sex := sex_male ;
67931: LD_ADDR_OWVAR 27
67935: PUSH
67936: LD_INT 1
67938: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
67939: LD_ADDR_OWVAR 28
67943: PUSH
67944: LD_INT 16
67946: ST_TO_ADDR
// hc_gallery :=  ;
67947: LD_ADDR_OWVAR 33
67951: PUSH
67952: LD_STRING 
67954: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67955: LD_ADDR_OWVAR 31
67959: PUSH
67960: LD_INT 0
67962: PPUSH
67963: LD_INT 3
67965: PPUSH
67966: CALL_OW 12
67970: PUSH
67971: LD_INT 0
67973: PPUSH
67974: LD_INT 3
67976: PPUSH
67977: CALL_OW 12
67981: PUSH
67982: LD_INT 0
67984: PUSH
67985: LD_INT 0
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: LIST
67992: LIST
67993: ST_TO_ADDR
// end ;
67994: LD_VAR 0 1
67998: RET
// export function PrepareApeman ( agressivity ) ; begin
67999: LD_INT 0
68001: PPUSH
// uc_side := 0 ;
68002: LD_ADDR_OWVAR 20
68006: PUSH
68007: LD_INT 0
68009: ST_TO_ADDR
// uc_nation := 0 ;
68010: LD_ADDR_OWVAR 21
68014: PUSH
68015: LD_INT 0
68017: ST_TO_ADDR
// hc_sex := sex_male ;
68018: LD_ADDR_OWVAR 27
68022: PUSH
68023: LD_INT 1
68025: ST_TO_ADDR
// hc_class := class_apeman ;
68026: LD_ADDR_OWVAR 28
68030: PUSH
68031: LD_INT 12
68033: ST_TO_ADDR
// hc_gallery :=  ;
68034: LD_ADDR_OWVAR 33
68038: PUSH
68039: LD_STRING 
68041: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68042: LD_ADDR_OWVAR 35
68046: PUSH
68047: LD_VAR 0 1
68051: NEG
68052: PPUSH
68053: LD_VAR 0 1
68057: PPUSH
68058: CALL_OW 12
68062: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68063: LD_ADDR_OWVAR 31
68067: PUSH
68068: LD_INT 0
68070: PPUSH
68071: LD_INT 3
68073: PPUSH
68074: CALL_OW 12
68078: PUSH
68079: LD_INT 0
68081: PPUSH
68082: LD_INT 3
68084: PPUSH
68085: CALL_OW 12
68089: PUSH
68090: LD_INT 0
68092: PUSH
68093: LD_INT 0
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: ST_TO_ADDR
// end ;
68102: LD_VAR 0 2
68106: RET
// export function PrepareTiger ( agressivity ) ; begin
68107: LD_INT 0
68109: PPUSH
// uc_side := 0 ;
68110: LD_ADDR_OWVAR 20
68114: PUSH
68115: LD_INT 0
68117: ST_TO_ADDR
// uc_nation := 0 ;
68118: LD_ADDR_OWVAR 21
68122: PUSH
68123: LD_INT 0
68125: ST_TO_ADDR
// hc_class := class_tiger ;
68126: LD_ADDR_OWVAR 28
68130: PUSH
68131: LD_INT 14
68133: ST_TO_ADDR
// hc_gallery :=  ;
68134: LD_ADDR_OWVAR 33
68138: PUSH
68139: LD_STRING 
68141: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68142: LD_ADDR_OWVAR 35
68146: PUSH
68147: LD_VAR 0 1
68151: NEG
68152: PPUSH
68153: LD_VAR 0 1
68157: PPUSH
68158: CALL_OW 12
68162: ST_TO_ADDR
// end ;
68163: LD_VAR 0 2
68167: RET
// export function PrepareEnchidna ( ) ; begin
68168: LD_INT 0
68170: PPUSH
// uc_side := 0 ;
68171: LD_ADDR_OWVAR 20
68175: PUSH
68176: LD_INT 0
68178: ST_TO_ADDR
// uc_nation := 0 ;
68179: LD_ADDR_OWVAR 21
68183: PUSH
68184: LD_INT 0
68186: ST_TO_ADDR
// hc_class := class_baggie ;
68187: LD_ADDR_OWVAR 28
68191: PUSH
68192: LD_INT 13
68194: ST_TO_ADDR
// hc_gallery :=  ;
68195: LD_ADDR_OWVAR 33
68199: PUSH
68200: LD_STRING 
68202: ST_TO_ADDR
// end ;
68203: LD_VAR 0 1
68207: RET
// export function PrepareFrog ( ) ; begin
68208: LD_INT 0
68210: PPUSH
// uc_side := 0 ;
68211: LD_ADDR_OWVAR 20
68215: PUSH
68216: LD_INT 0
68218: ST_TO_ADDR
// uc_nation := 0 ;
68219: LD_ADDR_OWVAR 21
68223: PUSH
68224: LD_INT 0
68226: ST_TO_ADDR
// hc_class := class_frog ;
68227: LD_ADDR_OWVAR 28
68231: PUSH
68232: LD_INT 19
68234: ST_TO_ADDR
// hc_gallery :=  ;
68235: LD_ADDR_OWVAR 33
68239: PUSH
68240: LD_STRING 
68242: ST_TO_ADDR
// end ;
68243: LD_VAR 0 1
68247: RET
// export function PrepareFish ( ) ; begin
68248: LD_INT 0
68250: PPUSH
// uc_side := 0 ;
68251: LD_ADDR_OWVAR 20
68255: PUSH
68256: LD_INT 0
68258: ST_TO_ADDR
// uc_nation := 0 ;
68259: LD_ADDR_OWVAR 21
68263: PUSH
68264: LD_INT 0
68266: ST_TO_ADDR
// hc_class := class_fish ;
68267: LD_ADDR_OWVAR 28
68271: PUSH
68272: LD_INT 20
68274: ST_TO_ADDR
// hc_gallery :=  ;
68275: LD_ADDR_OWVAR 33
68279: PUSH
68280: LD_STRING 
68282: ST_TO_ADDR
// end ;
68283: LD_VAR 0 1
68287: RET
// export function PrepareBird ( ) ; begin
68288: LD_INT 0
68290: PPUSH
// uc_side := 0 ;
68291: LD_ADDR_OWVAR 20
68295: PUSH
68296: LD_INT 0
68298: ST_TO_ADDR
// uc_nation := 0 ;
68299: LD_ADDR_OWVAR 21
68303: PUSH
68304: LD_INT 0
68306: ST_TO_ADDR
// hc_class := class_phororhacos ;
68307: LD_ADDR_OWVAR 28
68311: PUSH
68312: LD_INT 18
68314: ST_TO_ADDR
// hc_gallery :=  ;
68315: LD_ADDR_OWVAR 33
68319: PUSH
68320: LD_STRING 
68322: ST_TO_ADDR
// end ;
68323: LD_VAR 0 1
68327: RET
// export function PrepareHorse ( ) ; begin
68328: LD_INT 0
68330: PPUSH
// uc_side := 0 ;
68331: LD_ADDR_OWVAR 20
68335: PUSH
68336: LD_INT 0
68338: ST_TO_ADDR
// uc_nation := 0 ;
68339: LD_ADDR_OWVAR 21
68343: PUSH
68344: LD_INT 0
68346: ST_TO_ADDR
// hc_class := class_horse ;
68347: LD_ADDR_OWVAR 28
68351: PUSH
68352: LD_INT 21
68354: ST_TO_ADDR
// hc_gallery :=  ;
68355: LD_ADDR_OWVAR 33
68359: PUSH
68360: LD_STRING 
68362: ST_TO_ADDR
// end ;
68363: LD_VAR 0 1
68367: RET
// export function PrepareMastodont ( ) ; begin
68368: LD_INT 0
68370: PPUSH
// uc_side := 0 ;
68371: LD_ADDR_OWVAR 20
68375: PUSH
68376: LD_INT 0
68378: ST_TO_ADDR
// uc_nation := 0 ;
68379: LD_ADDR_OWVAR 21
68383: PUSH
68384: LD_INT 0
68386: ST_TO_ADDR
// vc_chassis := class_mastodont ;
68387: LD_ADDR_OWVAR 37
68391: PUSH
68392: LD_INT 31
68394: ST_TO_ADDR
// vc_control := control_rider ;
68395: LD_ADDR_OWVAR 38
68399: PUSH
68400: LD_INT 4
68402: ST_TO_ADDR
// end ;
68403: LD_VAR 0 1
68407: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68408: LD_INT 0
68410: PPUSH
68411: PPUSH
68412: PPUSH
// uc_side = 0 ;
68413: LD_ADDR_OWVAR 20
68417: PUSH
68418: LD_INT 0
68420: ST_TO_ADDR
// uc_nation = 0 ;
68421: LD_ADDR_OWVAR 21
68425: PUSH
68426: LD_INT 0
68428: ST_TO_ADDR
// InitHc_All ( ) ;
68429: CALL_OW 584
// InitVc ;
68433: CALL_OW 20
// if mastodonts then
68437: LD_VAR 0 6
68441: IFFALSE 68508
// for i = 1 to mastodonts do
68443: LD_ADDR_VAR 0 11
68447: PUSH
68448: DOUBLE
68449: LD_INT 1
68451: DEC
68452: ST_TO_ADDR
68453: LD_VAR 0 6
68457: PUSH
68458: FOR_TO
68459: IFFALSE 68506
// begin vc_chassis := 31 ;
68461: LD_ADDR_OWVAR 37
68465: PUSH
68466: LD_INT 31
68468: ST_TO_ADDR
// vc_control := control_rider ;
68469: LD_ADDR_OWVAR 38
68473: PUSH
68474: LD_INT 4
68476: ST_TO_ADDR
// animal := CreateVehicle ;
68477: LD_ADDR_VAR 0 12
68481: PUSH
68482: CALL_OW 45
68486: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68487: LD_VAR 0 12
68491: PPUSH
68492: LD_VAR 0 8
68496: PPUSH
68497: LD_INT 0
68499: PPUSH
68500: CALL 70643 0 3
// end ;
68504: GO 68458
68506: POP
68507: POP
// if horses then
68508: LD_VAR 0 5
68512: IFFALSE 68579
// for i = 1 to horses do
68514: LD_ADDR_VAR 0 11
68518: PUSH
68519: DOUBLE
68520: LD_INT 1
68522: DEC
68523: ST_TO_ADDR
68524: LD_VAR 0 5
68528: PUSH
68529: FOR_TO
68530: IFFALSE 68577
// begin hc_class := 21 ;
68532: LD_ADDR_OWVAR 28
68536: PUSH
68537: LD_INT 21
68539: ST_TO_ADDR
// hc_gallery :=  ;
68540: LD_ADDR_OWVAR 33
68544: PUSH
68545: LD_STRING 
68547: ST_TO_ADDR
// animal := CreateHuman ;
68548: LD_ADDR_VAR 0 12
68552: PUSH
68553: CALL_OW 44
68557: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68558: LD_VAR 0 12
68562: PPUSH
68563: LD_VAR 0 8
68567: PPUSH
68568: LD_INT 0
68570: PPUSH
68571: CALL 70643 0 3
// end ;
68575: GO 68529
68577: POP
68578: POP
// if birds then
68579: LD_VAR 0 1
68583: IFFALSE 68650
// for i = 1 to birds do
68585: LD_ADDR_VAR 0 11
68589: PUSH
68590: DOUBLE
68591: LD_INT 1
68593: DEC
68594: ST_TO_ADDR
68595: LD_VAR 0 1
68599: PUSH
68600: FOR_TO
68601: IFFALSE 68648
// begin hc_class = 18 ;
68603: LD_ADDR_OWVAR 28
68607: PUSH
68608: LD_INT 18
68610: ST_TO_ADDR
// hc_gallery =  ;
68611: LD_ADDR_OWVAR 33
68615: PUSH
68616: LD_STRING 
68618: ST_TO_ADDR
// animal := CreateHuman ;
68619: LD_ADDR_VAR 0 12
68623: PUSH
68624: CALL_OW 44
68628: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68629: LD_VAR 0 12
68633: PPUSH
68634: LD_VAR 0 8
68638: PPUSH
68639: LD_INT 0
68641: PPUSH
68642: CALL 70643 0 3
// end ;
68646: GO 68600
68648: POP
68649: POP
// if tigers then
68650: LD_VAR 0 2
68654: IFFALSE 68738
// for i = 1 to tigers do
68656: LD_ADDR_VAR 0 11
68660: PUSH
68661: DOUBLE
68662: LD_INT 1
68664: DEC
68665: ST_TO_ADDR
68666: LD_VAR 0 2
68670: PUSH
68671: FOR_TO
68672: IFFALSE 68736
// begin hc_class = class_tiger ;
68674: LD_ADDR_OWVAR 28
68678: PUSH
68679: LD_INT 14
68681: ST_TO_ADDR
// hc_gallery =  ;
68682: LD_ADDR_OWVAR 33
68686: PUSH
68687: LD_STRING 
68689: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68690: LD_ADDR_OWVAR 35
68694: PUSH
68695: LD_INT 7
68697: NEG
68698: PPUSH
68699: LD_INT 7
68701: PPUSH
68702: CALL_OW 12
68706: ST_TO_ADDR
// animal := CreateHuman ;
68707: LD_ADDR_VAR 0 12
68711: PUSH
68712: CALL_OW 44
68716: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68717: LD_VAR 0 12
68721: PPUSH
68722: LD_VAR 0 8
68726: PPUSH
68727: LD_INT 0
68729: PPUSH
68730: CALL 70643 0 3
// end ;
68734: GO 68671
68736: POP
68737: POP
// if apemans then
68738: LD_VAR 0 3
68742: IFFALSE 68865
// for i = 1 to apemans do
68744: LD_ADDR_VAR 0 11
68748: PUSH
68749: DOUBLE
68750: LD_INT 1
68752: DEC
68753: ST_TO_ADDR
68754: LD_VAR 0 3
68758: PUSH
68759: FOR_TO
68760: IFFALSE 68863
// begin hc_class = class_apeman ;
68762: LD_ADDR_OWVAR 28
68766: PUSH
68767: LD_INT 12
68769: ST_TO_ADDR
// hc_gallery =  ;
68770: LD_ADDR_OWVAR 33
68774: PUSH
68775: LD_STRING 
68777: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
68778: LD_ADDR_OWVAR 35
68782: PUSH
68783: LD_INT 2
68785: NEG
68786: PPUSH
68787: LD_INT 2
68789: PPUSH
68790: CALL_OW 12
68794: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68795: LD_ADDR_OWVAR 31
68799: PUSH
68800: LD_INT 1
68802: PPUSH
68803: LD_INT 3
68805: PPUSH
68806: CALL_OW 12
68810: PUSH
68811: LD_INT 1
68813: PPUSH
68814: LD_INT 3
68816: PPUSH
68817: CALL_OW 12
68821: PUSH
68822: LD_INT 0
68824: PUSH
68825: LD_INT 0
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: ST_TO_ADDR
// animal := CreateHuman ;
68834: LD_ADDR_VAR 0 12
68838: PUSH
68839: CALL_OW 44
68843: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68844: LD_VAR 0 12
68848: PPUSH
68849: LD_VAR 0 8
68853: PPUSH
68854: LD_INT 0
68856: PPUSH
68857: CALL 70643 0 3
// end ;
68861: GO 68759
68863: POP
68864: POP
// if enchidnas then
68865: LD_VAR 0 4
68869: IFFALSE 68936
// for i = 1 to enchidnas do
68871: LD_ADDR_VAR 0 11
68875: PUSH
68876: DOUBLE
68877: LD_INT 1
68879: DEC
68880: ST_TO_ADDR
68881: LD_VAR 0 4
68885: PUSH
68886: FOR_TO
68887: IFFALSE 68934
// begin hc_class = 13 ;
68889: LD_ADDR_OWVAR 28
68893: PUSH
68894: LD_INT 13
68896: ST_TO_ADDR
// hc_gallery =  ;
68897: LD_ADDR_OWVAR 33
68901: PUSH
68902: LD_STRING 
68904: ST_TO_ADDR
// animal := CreateHuman ;
68905: LD_ADDR_VAR 0 12
68909: PUSH
68910: CALL_OW 44
68914: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68915: LD_VAR 0 12
68919: PPUSH
68920: LD_VAR 0 8
68924: PPUSH
68925: LD_INT 0
68927: PPUSH
68928: CALL 70643 0 3
// end ;
68932: GO 68886
68934: POP
68935: POP
// if fishes then
68936: LD_VAR 0 7
68940: IFFALSE 69007
// for i = 1 to fishes do
68942: LD_ADDR_VAR 0 11
68946: PUSH
68947: DOUBLE
68948: LD_INT 1
68950: DEC
68951: ST_TO_ADDR
68952: LD_VAR 0 7
68956: PUSH
68957: FOR_TO
68958: IFFALSE 69005
// begin hc_class = 20 ;
68960: LD_ADDR_OWVAR 28
68964: PUSH
68965: LD_INT 20
68967: ST_TO_ADDR
// hc_gallery =  ;
68968: LD_ADDR_OWVAR 33
68972: PUSH
68973: LD_STRING 
68975: ST_TO_ADDR
// animal := CreateHuman ;
68976: LD_ADDR_VAR 0 12
68980: PUSH
68981: CALL_OW 44
68985: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68986: LD_VAR 0 12
68990: PPUSH
68991: LD_VAR 0 9
68995: PPUSH
68996: LD_INT 0
68998: PPUSH
68999: CALL 70643 0 3
// end ;
69003: GO 68957
69005: POP
69006: POP
// end ;
69007: LD_VAR 0 10
69011: RET
// export function WantHeal ( sci , unit ) ; begin
69012: LD_INT 0
69014: PPUSH
// if GetTaskList ( sci ) > 0 then
69015: LD_VAR 0 1
69019: PPUSH
69020: CALL_OW 437
69024: PUSH
69025: LD_INT 0
69027: GREATER
69028: IFFALSE 69098
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69030: LD_VAR 0 1
69034: PPUSH
69035: CALL_OW 437
69039: PUSH
69040: LD_INT 1
69042: ARRAY
69043: PUSH
69044: LD_INT 1
69046: ARRAY
69047: PUSH
69048: LD_STRING l
69050: EQUAL
69051: PUSH
69052: LD_VAR 0 1
69056: PPUSH
69057: CALL_OW 437
69061: PUSH
69062: LD_INT 1
69064: ARRAY
69065: PUSH
69066: LD_INT 4
69068: ARRAY
69069: PUSH
69070: LD_VAR 0 2
69074: EQUAL
69075: AND
69076: IFFALSE 69088
// result := true else
69078: LD_ADDR_VAR 0 3
69082: PUSH
69083: LD_INT 1
69085: ST_TO_ADDR
69086: GO 69096
// result := false ;
69088: LD_ADDR_VAR 0 3
69092: PUSH
69093: LD_INT 0
69095: ST_TO_ADDR
// end else
69096: GO 69106
// result := false ;
69098: LD_ADDR_VAR 0 3
69102: PUSH
69103: LD_INT 0
69105: ST_TO_ADDR
// end ;
69106: LD_VAR 0 3
69110: RET
// export function HealTarget ( sci ) ; begin
69111: LD_INT 0
69113: PPUSH
// if not sci then
69114: LD_VAR 0 1
69118: NOT
69119: IFFALSE 69123
// exit ;
69121: GO 69188
// result := 0 ;
69123: LD_ADDR_VAR 0 2
69127: PUSH
69128: LD_INT 0
69130: ST_TO_ADDR
// if GetTaskList ( sci ) then
69131: LD_VAR 0 1
69135: PPUSH
69136: CALL_OW 437
69140: IFFALSE 69188
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69142: LD_VAR 0 1
69146: PPUSH
69147: CALL_OW 437
69151: PUSH
69152: LD_INT 1
69154: ARRAY
69155: PUSH
69156: LD_INT 1
69158: ARRAY
69159: PUSH
69160: LD_STRING l
69162: EQUAL
69163: IFFALSE 69188
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69165: LD_ADDR_VAR 0 2
69169: PUSH
69170: LD_VAR 0 1
69174: PPUSH
69175: CALL_OW 437
69179: PUSH
69180: LD_INT 1
69182: ARRAY
69183: PUSH
69184: LD_INT 4
69186: ARRAY
69187: ST_TO_ADDR
// end ;
69188: LD_VAR 0 2
69192: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69193: LD_INT 0
69195: PPUSH
69196: PPUSH
69197: PPUSH
69198: PPUSH
// if not base_units then
69199: LD_VAR 0 1
69203: NOT
69204: IFFALSE 69208
// exit ;
69206: GO 69295
// result := false ;
69208: LD_ADDR_VAR 0 2
69212: PUSH
69213: LD_INT 0
69215: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69216: LD_ADDR_VAR 0 5
69220: PUSH
69221: LD_VAR 0 1
69225: PPUSH
69226: LD_INT 21
69228: PUSH
69229: LD_INT 3
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: PPUSH
69236: CALL_OW 72
69240: ST_TO_ADDR
// if not tmp then
69241: LD_VAR 0 5
69245: NOT
69246: IFFALSE 69250
// exit ;
69248: GO 69295
// for i in tmp do
69250: LD_ADDR_VAR 0 3
69254: PUSH
69255: LD_VAR 0 5
69259: PUSH
69260: FOR_IN
69261: IFFALSE 69293
// begin result := EnemyInRange ( i , 22 ) ;
69263: LD_ADDR_VAR 0 2
69267: PUSH
69268: LD_VAR 0 3
69272: PPUSH
69273: LD_INT 22
69275: PPUSH
69276: CALL 66908 0 2
69280: ST_TO_ADDR
// if result then
69281: LD_VAR 0 2
69285: IFFALSE 69291
// exit ;
69287: POP
69288: POP
69289: GO 69295
// end ;
69291: GO 69260
69293: POP
69294: POP
// end ;
69295: LD_VAR 0 2
69299: RET
// export function FilterByTag ( units , tag ) ; begin
69300: LD_INT 0
69302: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
69303: LD_ADDR_VAR 0 3
69307: PUSH
69308: LD_VAR 0 1
69312: PPUSH
69313: LD_INT 120
69315: PUSH
69316: LD_VAR 0 2
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PPUSH
69325: CALL_OW 72
69329: ST_TO_ADDR
// end ;
69330: LD_VAR 0 3
69334: RET
// export function IsDriver ( un ) ; begin
69335: LD_INT 0
69337: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69338: LD_ADDR_VAR 0 2
69342: PUSH
69343: LD_VAR 0 1
69347: PUSH
69348: LD_INT 55
69350: PUSH
69351: EMPTY
69352: LIST
69353: PPUSH
69354: CALL_OW 69
69358: IN
69359: ST_TO_ADDR
// end ;
69360: LD_VAR 0 2
69364: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69365: LD_INT 0
69367: PPUSH
69368: PPUSH
// list := [ ] ;
69369: LD_ADDR_VAR 0 5
69373: PUSH
69374: EMPTY
69375: ST_TO_ADDR
// case d of 0 :
69376: LD_VAR 0 3
69380: PUSH
69381: LD_INT 0
69383: DOUBLE
69384: EQUAL
69385: IFTRUE 69389
69387: GO 69522
69389: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69390: LD_ADDR_VAR 0 5
69394: PUSH
69395: LD_VAR 0 1
69399: PUSH
69400: LD_INT 4
69402: MINUS
69403: PUSH
69404: LD_VAR 0 2
69408: PUSH
69409: LD_INT 4
69411: MINUS
69412: PUSH
69413: LD_INT 2
69415: PUSH
69416: EMPTY
69417: LIST
69418: LIST
69419: LIST
69420: PUSH
69421: LD_VAR 0 1
69425: PUSH
69426: LD_INT 3
69428: MINUS
69429: PUSH
69430: LD_VAR 0 2
69434: PUSH
69435: LD_INT 1
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: LIST
69442: PUSH
69443: LD_VAR 0 1
69447: PUSH
69448: LD_INT 4
69450: PLUS
69451: PUSH
69452: LD_VAR 0 2
69456: PUSH
69457: LD_INT 4
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: LIST
69464: PUSH
69465: LD_VAR 0 1
69469: PUSH
69470: LD_INT 3
69472: PLUS
69473: PUSH
69474: LD_VAR 0 2
69478: PUSH
69479: LD_INT 3
69481: PLUS
69482: PUSH
69483: LD_INT 5
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: LIST
69490: PUSH
69491: LD_VAR 0 1
69495: PUSH
69496: LD_VAR 0 2
69500: PUSH
69501: LD_INT 4
69503: PLUS
69504: PUSH
69505: LD_INT 0
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: LIST
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: ST_TO_ADDR
// end ; 1 :
69520: GO 70220
69522: LD_INT 1
69524: DOUBLE
69525: EQUAL
69526: IFTRUE 69530
69528: GO 69663
69530: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69531: LD_ADDR_VAR 0 5
69535: PUSH
69536: LD_VAR 0 1
69540: PUSH
69541: LD_VAR 0 2
69545: PUSH
69546: LD_INT 4
69548: MINUS
69549: PUSH
69550: LD_INT 3
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: LIST
69557: PUSH
69558: LD_VAR 0 1
69562: PUSH
69563: LD_INT 3
69565: MINUS
69566: PUSH
69567: LD_VAR 0 2
69571: PUSH
69572: LD_INT 3
69574: MINUS
69575: PUSH
69576: LD_INT 2
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: LIST
69583: PUSH
69584: LD_VAR 0 1
69588: PUSH
69589: LD_INT 4
69591: MINUS
69592: PUSH
69593: LD_VAR 0 2
69597: PUSH
69598: LD_INT 1
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: LIST
69605: PUSH
69606: LD_VAR 0 1
69610: PUSH
69611: LD_VAR 0 2
69615: PUSH
69616: LD_INT 3
69618: PLUS
69619: PUSH
69620: LD_INT 0
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: LIST
69627: PUSH
69628: LD_VAR 0 1
69632: PUSH
69633: LD_INT 4
69635: PLUS
69636: PUSH
69637: LD_VAR 0 2
69641: PUSH
69642: LD_INT 4
69644: PLUS
69645: PUSH
69646: LD_INT 5
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: LIST
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: LIST
69658: LIST
69659: LIST
69660: ST_TO_ADDR
// end ; 2 :
69661: GO 70220
69663: LD_INT 2
69665: DOUBLE
69666: EQUAL
69667: IFTRUE 69671
69669: GO 69800
69671: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69672: LD_ADDR_VAR 0 5
69676: PUSH
69677: LD_VAR 0 1
69681: PUSH
69682: LD_VAR 0 2
69686: PUSH
69687: LD_INT 3
69689: MINUS
69690: PUSH
69691: LD_INT 3
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: LIST
69698: PUSH
69699: LD_VAR 0 1
69703: PUSH
69704: LD_INT 4
69706: PLUS
69707: PUSH
69708: LD_VAR 0 2
69712: PUSH
69713: LD_INT 4
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: LIST
69720: PUSH
69721: LD_VAR 0 1
69725: PUSH
69726: LD_VAR 0 2
69730: PUSH
69731: LD_INT 4
69733: PLUS
69734: PUSH
69735: LD_INT 0
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: LIST
69742: PUSH
69743: LD_VAR 0 1
69747: PUSH
69748: LD_INT 3
69750: MINUS
69751: PUSH
69752: LD_VAR 0 2
69756: PUSH
69757: LD_INT 1
69759: PUSH
69760: EMPTY
69761: LIST
69762: LIST
69763: LIST
69764: PUSH
69765: LD_VAR 0 1
69769: PUSH
69770: LD_INT 4
69772: MINUS
69773: PUSH
69774: LD_VAR 0 2
69778: PUSH
69779: LD_INT 4
69781: MINUS
69782: PUSH
69783: LD_INT 2
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: LIST
69790: PUSH
69791: EMPTY
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: ST_TO_ADDR
// end ; 3 :
69798: GO 70220
69800: LD_INT 3
69802: DOUBLE
69803: EQUAL
69804: IFTRUE 69808
69806: GO 69941
69808: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69809: LD_ADDR_VAR 0 5
69813: PUSH
69814: LD_VAR 0 1
69818: PUSH
69819: LD_INT 3
69821: PLUS
69822: PUSH
69823: LD_VAR 0 2
69827: PUSH
69828: LD_INT 4
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: LIST
69835: PUSH
69836: LD_VAR 0 1
69840: PUSH
69841: LD_INT 4
69843: PLUS
69844: PUSH
69845: LD_VAR 0 2
69849: PUSH
69850: LD_INT 4
69852: PLUS
69853: PUSH
69854: LD_INT 5
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: LIST
69861: PUSH
69862: LD_VAR 0 1
69866: PUSH
69867: LD_INT 4
69869: MINUS
69870: PUSH
69871: LD_VAR 0 2
69875: PUSH
69876: LD_INT 1
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: LIST
69883: PUSH
69884: LD_VAR 0 1
69888: PUSH
69889: LD_VAR 0 2
69893: PUSH
69894: LD_INT 4
69896: MINUS
69897: PUSH
69898: LD_INT 3
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: LIST
69905: PUSH
69906: LD_VAR 0 1
69910: PUSH
69911: LD_INT 3
69913: MINUS
69914: PUSH
69915: LD_VAR 0 2
69919: PUSH
69920: LD_INT 3
69922: MINUS
69923: PUSH
69924: LD_INT 2
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: LIST
69931: PUSH
69932: EMPTY
69933: LIST
69934: LIST
69935: LIST
69936: LIST
69937: LIST
69938: ST_TO_ADDR
// end ; 4 :
69939: GO 70220
69941: LD_INT 4
69943: DOUBLE
69944: EQUAL
69945: IFTRUE 69949
69947: GO 70082
69949: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69950: LD_ADDR_VAR 0 5
69954: PUSH
69955: LD_VAR 0 1
69959: PUSH
69960: LD_VAR 0 2
69964: PUSH
69965: LD_INT 4
69967: PLUS
69968: PUSH
69969: LD_INT 0
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: LIST
69976: PUSH
69977: LD_VAR 0 1
69981: PUSH
69982: LD_INT 3
69984: PLUS
69985: PUSH
69986: LD_VAR 0 2
69990: PUSH
69991: LD_INT 3
69993: PLUS
69994: PUSH
69995: LD_INT 5
69997: PUSH
69998: EMPTY
69999: LIST
70000: LIST
70001: LIST
70002: PUSH
70003: LD_VAR 0 1
70007: PUSH
70008: LD_INT 4
70010: PLUS
70011: PUSH
70012: LD_VAR 0 2
70016: PUSH
70017: LD_INT 4
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: LIST
70024: PUSH
70025: LD_VAR 0 1
70029: PUSH
70030: LD_VAR 0 2
70034: PUSH
70035: LD_INT 3
70037: MINUS
70038: PUSH
70039: LD_INT 3
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: LIST
70046: PUSH
70047: LD_VAR 0 1
70051: PUSH
70052: LD_INT 4
70054: MINUS
70055: PUSH
70056: LD_VAR 0 2
70060: PUSH
70061: LD_INT 4
70063: MINUS
70064: PUSH
70065: LD_INT 2
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: LIST
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: ST_TO_ADDR
// end ; 5 :
70080: GO 70220
70082: LD_INT 5
70084: DOUBLE
70085: EQUAL
70086: IFTRUE 70090
70088: GO 70219
70090: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70091: LD_ADDR_VAR 0 5
70095: PUSH
70096: LD_VAR 0 1
70100: PUSH
70101: LD_INT 4
70103: MINUS
70104: PUSH
70105: LD_VAR 0 2
70109: PUSH
70110: LD_INT 1
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: LIST
70117: PUSH
70118: LD_VAR 0 1
70122: PUSH
70123: LD_VAR 0 2
70127: PUSH
70128: LD_INT 4
70130: MINUS
70131: PUSH
70132: LD_INT 3
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: LIST
70139: PUSH
70140: LD_VAR 0 1
70144: PUSH
70145: LD_INT 4
70147: PLUS
70148: PUSH
70149: LD_VAR 0 2
70153: PUSH
70154: LD_INT 4
70156: PLUS
70157: PUSH
70158: LD_INT 5
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: LIST
70165: PUSH
70166: LD_VAR 0 1
70170: PUSH
70171: LD_INT 3
70173: PLUS
70174: PUSH
70175: LD_VAR 0 2
70179: PUSH
70180: LD_INT 4
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: LIST
70187: PUSH
70188: LD_VAR 0 1
70192: PUSH
70193: LD_VAR 0 2
70197: PUSH
70198: LD_INT 3
70200: PLUS
70201: PUSH
70202: LD_INT 0
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: LIST
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: LIST
70214: LIST
70215: LIST
70216: ST_TO_ADDR
// end ; end ;
70217: GO 70220
70219: POP
// result := list ;
70220: LD_ADDR_VAR 0 4
70224: PUSH
70225: LD_VAR 0 5
70229: ST_TO_ADDR
// end ;
70230: LD_VAR 0 4
70234: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70235: LD_INT 0
70237: PPUSH
70238: PPUSH
70239: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70240: LD_VAR 0 1
70244: NOT
70245: PUSH
70246: LD_VAR 0 2
70250: PUSH
70251: LD_INT 1
70253: PUSH
70254: LD_INT 2
70256: PUSH
70257: LD_INT 3
70259: PUSH
70260: LD_INT 4
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: LIST
70267: LIST
70268: IN
70269: NOT
70270: OR
70271: IFFALSE 70275
// exit ;
70273: GO 70367
// tmp := [ ] ;
70275: LD_ADDR_VAR 0 5
70279: PUSH
70280: EMPTY
70281: ST_TO_ADDR
// for i in units do
70282: LD_ADDR_VAR 0 4
70286: PUSH
70287: LD_VAR 0 1
70291: PUSH
70292: FOR_IN
70293: IFFALSE 70336
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
70295: LD_ADDR_VAR 0 5
70299: PUSH
70300: LD_VAR 0 5
70304: PPUSH
70305: LD_VAR 0 5
70309: PUSH
70310: LD_INT 1
70312: PLUS
70313: PPUSH
70314: LD_VAR 0 4
70318: PPUSH
70319: LD_VAR 0 2
70323: PPUSH
70324: CALL_OW 259
70328: PPUSH
70329: CALL_OW 2
70333: ST_TO_ADDR
70334: GO 70292
70336: POP
70337: POP
// if not tmp then
70338: LD_VAR 0 5
70342: NOT
70343: IFFALSE 70347
// exit ;
70345: GO 70367
// result := SortListByListDesc ( units , tmp ) ;
70347: LD_ADDR_VAR 0 3
70351: PUSH
70352: LD_VAR 0 1
70356: PPUSH
70357: LD_VAR 0 5
70361: PPUSH
70362: CALL_OW 77
70366: ST_TO_ADDR
// end ;
70367: LD_VAR 0 3
70371: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70372: LD_INT 0
70374: PPUSH
70375: PPUSH
70376: PPUSH
// result := false ;
70377: LD_ADDR_VAR 0 3
70381: PUSH
70382: LD_INT 0
70384: ST_TO_ADDR
// x := GetX ( building ) ;
70385: LD_ADDR_VAR 0 4
70389: PUSH
70390: LD_VAR 0 2
70394: PPUSH
70395: CALL_OW 250
70399: ST_TO_ADDR
// y := GetY ( building ) ;
70400: LD_ADDR_VAR 0 5
70404: PUSH
70405: LD_VAR 0 2
70409: PPUSH
70410: CALL_OW 251
70414: ST_TO_ADDR
// if not building or not x or not y then
70415: LD_VAR 0 2
70419: NOT
70420: PUSH
70421: LD_VAR 0 4
70425: NOT
70426: OR
70427: PUSH
70428: LD_VAR 0 5
70432: NOT
70433: OR
70434: IFFALSE 70438
// exit ;
70436: GO 70530
// if GetTaskList ( unit ) then
70438: LD_VAR 0 1
70442: PPUSH
70443: CALL_OW 437
70447: IFFALSE 70530
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70449: LD_STRING e
70451: PUSH
70452: LD_VAR 0 1
70456: PPUSH
70457: CALL_OW 437
70461: PUSH
70462: LD_INT 1
70464: ARRAY
70465: PUSH
70466: LD_INT 1
70468: ARRAY
70469: EQUAL
70470: PUSH
70471: LD_VAR 0 4
70475: PUSH
70476: LD_VAR 0 1
70480: PPUSH
70481: CALL_OW 437
70485: PUSH
70486: LD_INT 1
70488: ARRAY
70489: PUSH
70490: LD_INT 2
70492: ARRAY
70493: EQUAL
70494: AND
70495: PUSH
70496: LD_VAR 0 5
70500: PUSH
70501: LD_VAR 0 1
70505: PPUSH
70506: CALL_OW 437
70510: PUSH
70511: LD_INT 1
70513: ARRAY
70514: PUSH
70515: LD_INT 3
70517: ARRAY
70518: EQUAL
70519: AND
70520: IFFALSE 70530
// result := true end ;
70522: LD_ADDR_VAR 0 3
70526: PUSH
70527: LD_INT 1
70529: ST_TO_ADDR
// end ;
70530: LD_VAR 0 3
70534: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70535: LD_INT 0
70537: PPUSH
// result := false ;
70538: LD_ADDR_VAR 0 4
70542: PUSH
70543: LD_INT 0
70545: ST_TO_ADDR
// if GetTaskList ( unit ) then
70546: LD_VAR 0 1
70550: PPUSH
70551: CALL_OW 437
70555: IFFALSE 70638
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70557: LD_STRING M
70559: PUSH
70560: LD_VAR 0 1
70564: PPUSH
70565: CALL_OW 437
70569: PUSH
70570: LD_INT 1
70572: ARRAY
70573: PUSH
70574: LD_INT 1
70576: ARRAY
70577: EQUAL
70578: PUSH
70579: LD_VAR 0 2
70583: PUSH
70584: LD_VAR 0 1
70588: PPUSH
70589: CALL_OW 437
70593: PUSH
70594: LD_INT 1
70596: ARRAY
70597: PUSH
70598: LD_INT 2
70600: ARRAY
70601: EQUAL
70602: AND
70603: PUSH
70604: LD_VAR 0 3
70608: PUSH
70609: LD_VAR 0 1
70613: PPUSH
70614: CALL_OW 437
70618: PUSH
70619: LD_INT 1
70621: ARRAY
70622: PUSH
70623: LD_INT 3
70625: ARRAY
70626: EQUAL
70627: AND
70628: IFFALSE 70638
// result := true ;
70630: LD_ADDR_VAR 0 4
70634: PUSH
70635: LD_INT 1
70637: ST_TO_ADDR
// end ; end ;
70638: LD_VAR 0 4
70642: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70643: LD_INT 0
70645: PPUSH
70646: PPUSH
70647: PPUSH
70648: PPUSH
// if not unit or not area then
70649: LD_VAR 0 1
70653: NOT
70654: PUSH
70655: LD_VAR 0 2
70659: NOT
70660: OR
70661: IFFALSE 70665
// exit ;
70663: GO 70829
// tmp := AreaToList ( area , i ) ;
70665: LD_ADDR_VAR 0 6
70669: PUSH
70670: LD_VAR 0 2
70674: PPUSH
70675: LD_VAR 0 5
70679: PPUSH
70680: CALL_OW 517
70684: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70685: LD_ADDR_VAR 0 5
70689: PUSH
70690: DOUBLE
70691: LD_INT 1
70693: DEC
70694: ST_TO_ADDR
70695: LD_VAR 0 6
70699: PUSH
70700: LD_INT 1
70702: ARRAY
70703: PUSH
70704: FOR_TO
70705: IFFALSE 70827
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70707: LD_ADDR_VAR 0 7
70711: PUSH
70712: LD_VAR 0 6
70716: PUSH
70717: LD_INT 1
70719: ARRAY
70720: PUSH
70721: LD_VAR 0 5
70725: ARRAY
70726: PUSH
70727: LD_VAR 0 6
70731: PUSH
70732: LD_INT 2
70734: ARRAY
70735: PUSH
70736: LD_VAR 0 5
70740: ARRAY
70741: PUSH
70742: EMPTY
70743: LIST
70744: LIST
70745: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
70746: LD_VAR 0 7
70750: PUSH
70751: LD_INT 1
70753: ARRAY
70754: PPUSH
70755: LD_VAR 0 7
70759: PUSH
70760: LD_INT 2
70762: ARRAY
70763: PPUSH
70764: CALL_OW 428
70768: PUSH
70769: LD_INT 0
70771: EQUAL
70772: IFFALSE 70825
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70774: LD_VAR 0 1
70778: PPUSH
70779: LD_VAR 0 7
70783: PUSH
70784: LD_INT 1
70786: ARRAY
70787: PPUSH
70788: LD_VAR 0 7
70792: PUSH
70793: LD_INT 2
70795: ARRAY
70796: PPUSH
70797: LD_VAR 0 3
70801: PPUSH
70802: CALL_OW 48
// result := IsPlaced ( unit ) ;
70806: LD_ADDR_VAR 0 4
70810: PUSH
70811: LD_VAR 0 1
70815: PPUSH
70816: CALL_OW 305
70820: ST_TO_ADDR
// exit ;
70821: POP
70822: POP
70823: GO 70829
// end ; end ;
70825: GO 70704
70827: POP
70828: POP
// end ;
70829: LD_VAR 0 4
70833: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70834: LD_INT 0
70836: PPUSH
70837: PPUSH
70838: PPUSH
// if not side or side > 8 then
70839: LD_VAR 0 1
70843: NOT
70844: PUSH
70845: LD_VAR 0 1
70849: PUSH
70850: LD_INT 8
70852: GREATER
70853: OR
70854: IFFALSE 70858
// exit ;
70856: GO 71045
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70858: LD_ADDR_VAR 0 4
70862: PUSH
70863: LD_INT 22
70865: PUSH
70866: LD_VAR 0 1
70870: PUSH
70871: EMPTY
70872: LIST
70873: LIST
70874: PUSH
70875: LD_INT 21
70877: PUSH
70878: LD_INT 3
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: PUSH
70885: EMPTY
70886: LIST
70887: LIST
70888: PPUSH
70889: CALL_OW 69
70893: ST_TO_ADDR
// if not tmp then
70894: LD_VAR 0 4
70898: NOT
70899: IFFALSE 70903
// exit ;
70901: GO 71045
// enable_addtolog := true ;
70903: LD_ADDR_OWVAR 81
70907: PUSH
70908: LD_INT 1
70910: ST_TO_ADDR
// AddToLog ( [ ) ;
70911: LD_STRING [
70913: PPUSH
70914: CALL_OW 561
// for i in tmp do
70918: LD_ADDR_VAR 0 3
70922: PUSH
70923: LD_VAR 0 4
70927: PUSH
70928: FOR_IN
70929: IFFALSE 71036
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70931: LD_STRING [
70933: PUSH
70934: LD_VAR 0 3
70938: PPUSH
70939: CALL_OW 266
70943: STR
70944: PUSH
70945: LD_STRING , 
70947: STR
70948: PUSH
70949: LD_VAR 0 3
70953: PPUSH
70954: CALL_OW 250
70958: STR
70959: PUSH
70960: LD_STRING , 
70962: STR
70963: PUSH
70964: LD_VAR 0 3
70968: PPUSH
70969: CALL_OW 251
70973: STR
70974: PUSH
70975: LD_STRING , 
70977: STR
70978: PUSH
70979: LD_VAR 0 3
70983: PPUSH
70984: CALL_OW 254
70988: STR
70989: PUSH
70990: LD_STRING , 
70992: STR
70993: PUSH
70994: LD_VAR 0 3
70998: PPUSH
70999: LD_INT 1
71001: PPUSH
71002: CALL_OW 268
71006: STR
71007: PUSH
71008: LD_STRING , 
71010: STR
71011: PUSH
71012: LD_VAR 0 3
71016: PPUSH
71017: LD_INT 2
71019: PPUSH
71020: CALL_OW 268
71024: STR
71025: PUSH
71026: LD_STRING ],
71028: STR
71029: PPUSH
71030: CALL_OW 561
// end ;
71034: GO 70928
71036: POP
71037: POP
// AddToLog ( ]; ) ;
71038: LD_STRING ];
71040: PPUSH
71041: CALL_OW 561
// end ;
71045: LD_VAR 0 2
71049: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71050: LD_INT 0
71052: PPUSH
71053: PPUSH
71054: PPUSH
71055: PPUSH
71056: PPUSH
// if not area or not rate or not max then
71057: LD_VAR 0 1
71061: NOT
71062: PUSH
71063: LD_VAR 0 2
71067: NOT
71068: OR
71069: PUSH
71070: LD_VAR 0 4
71074: NOT
71075: OR
71076: IFFALSE 71080
// exit ;
71078: GO 71269
// while 1 do
71080: LD_INT 1
71082: IFFALSE 71269
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71084: LD_ADDR_VAR 0 9
71088: PUSH
71089: LD_VAR 0 1
71093: PPUSH
71094: LD_INT 1
71096: PPUSH
71097: CALL_OW 287
71101: PUSH
71102: LD_INT 10
71104: MUL
71105: ST_TO_ADDR
// r := rate / 10 ;
71106: LD_ADDR_VAR 0 7
71110: PUSH
71111: LD_VAR 0 2
71115: PUSH
71116: LD_INT 10
71118: DIVREAL
71119: ST_TO_ADDR
// time := 1 1$00 ;
71120: LD_ADDR_VAR 0 8
71124: PUSH
71125: LD_INT 2100
71127: ST_TO_ADDR
// if amount < min then
71128: LD_VAR 0 9
71132: PUSH
71133: LD_VAR 0 3
71137: LESS
71138: IFFALSE 71156
// r := r * 2 else
71140: LD_ADDR_VAR 0 7
71144: PUSH
71145: LD_VAR 0 7
71149: PUSH
71150: LD_INT 2
71152: MUL
71153: ST_TO_ADDR
71154: GO 71182
// if amount > max then
71156: LD_VAR 0 9
71160: PUSH
71161: LD_VAR 0 4
71165: GREATER
71166: IFFALSE 71182
// r := r / 2 ;
71168: LD_ADDR_VAR 0 7
71172: PUSH
71173: LD_VAR 0 7
71177: PUSH
71178: LD_INT 2
71180: DIVREAL
71181: ST_TO_ADDR
// time := time / r ;
71182: LD_ADDR_VAR 0 8
71186: PUSH
71187: LD_VAR 0 8
71191: PUSH
71192: LD_VAR 0 7
71196: DIVREAL
71197: ST_TO_ADDR
// if time < 0 then
71198: LD_VAR 0 8
71202: PUSH
71203: LD_INT 0
71205: LESS
71206: IFFALSE 71223
// time := time * - 1 ;
71208: LD_ADDR_VAR 0 8
71212: PUSH
71213: LD_VAR 0 8
71217: PUSH
71218: LD_INT 1
71220: NEG
71221: MUL
71222: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
71223: LD_VAR 0 8
71227: PUSH
71228: LD_INT 35
71230: PPUSH
71231: LD_INT 875
71233: PPUSH
71234: CALL_OW 12
71238: PLUS
71239: PPUSH
71240: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71244: LD_INT 1
71246: PPUSH
71247: LD_INT 5
71249: PPUSH
71250: CALL_OW 12
71254: PPUSH
71255: LD_VAR 0 1
71259: PPUSH
71260: LD_INT 1
71262: PPUSH
71263: CALL_OW 55
// end ;
71267: GO 71080
// end ;
71269: LD_VAR 0 5
71273: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71274: LD_INT 0
71276: PPUSH
71277: PPUSH
71278: PPUSH
71279: PPUSH
71280: PPUSH
71281: PPUSH
71282: PPUSH
71283: PPUSH
// if not turrets or not factories then
71284: LD_VAR 0 1
71288: NOT
71289: PUSH
71290: LD_VAR 0 2
71294: NOT
71295: OR
71296: IFFALSE 71300
// exit ;
71298: GO 71607
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71300: LD_ADDR_VAR 0 10
71304: PUSH
71305: LD_INT 5
71307: PUSH
71308: LD_INT 6
71310: PUSH
71311: EMPTY
71312: LIST
71313: LIST
71314: PUSH
71315: LD_INT 2
71317: PUSH
71318: LD_INT 4
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: PUSH
71325: LD_INT 3
71327: PUSH
71328: LD_INT 5
71330: PUSH
71331: EMPTY
71332: LIST
71333: LIST
71334: PUSH
71335: EMPTY
71336: LIST
71337: LIST
71338: LIST
71339: PUSH
71340: LD_INT 24
71342: PUSH
71343: LD_INT 25
71345: PUSH
71346: EMPTY
71347: LIST
71348: LIST
71349: PUSH
71350: LD_INT 23
71352: PUSH
71353: LD_INT 27
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: PUSH
71360: EMPTY
71361: LIST
71362: LIST
71363: PUSH
71364: LD_INT 42
71366: PUSH
71367: LD_INT 43
71369: PUSH
71370: EMPTY
71371: LIST
71372: LIST
71373: PUSH
71374: LD_INT 44
71376: PUSH
71377: LD_INT 46
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: PUSH
71384: LD_INT 45
71386: PUSH
71387: LD_INT 47
71389: PUSH
71390: EMPTY
71391: LIST
71392: LIST
71393: PUSH
71394: EMPTY
71395: LIST
71396: LIST
71397: LIST
71398: PUSH
71399: EMPTY
71400: LIST
71401: LIST
71402: LIST
71403: ST_TO_ADDR
// result := [ ] ;
71404: LD_ADDR_VAR 0 3
71408: PUSH
71409: EMPTY
71410: ST_TO_ADDR
// for i in turrets do
71411: LD_ADDR_VAR 0 4
71415: PUSH
71416: LD_VAR 0 1
71420: PUSH
71421: FOR_IN
71422: IFFALSE 71605
// begin nat := GetNation ( i ) ;
71424: LD_ADDR_VAR 0 7
71428: PUSH
71429: LD_VAR 0 4
71433: PPUSH
71434: CALL_OW 248
71438: ST_TO_ADDR
// weapon := 0 ;
71439: LD_ADDR_VAR 0 8
71443: PUSH
71444: LD_INT 0
71446: ST_TO_ADDR
// if not nat then
71447: LD_VAR 0 7
71451: NOT
71452: IFFALSE 71456
// continue ;
71454: GO 71421
// for j in list [ nat ] do
71456: LD_ADDR_VAR 0 5
71460: PUSH
71461: LD_VAR 0 10
71465: PUSH
71466: LD_VAR 0 7
71470: ARRAY
71471: PUSH
71472: FOR_IN
71473: IFFALSE 71514
// if GetBWeapon ( i ) = j [ 1 ] then
71475: LD_VAR 0 4
71479: PPUSH
71480: CALL_OW 269
71484: PUSH
71485: LD_VAR 0 5
71489: PUSH
71490: LD_INT 1
71492: ARRAY
71493: EQUAL
71494: IFFALSE 71512
// begin weapon := j [ 2 ] ;
71496: LD_ADDR_VAR 0 8
71500: PUSH
71501: LD_VAR 0 5
71505: PUSH
71506: LD_INT 2
71508: ARRAY
71509: ST_TO_ADDR
// break ;
71510: GO 71514
// end ;
71512: GO 71472
71514: POP
71515: POP
// if not weapon then
71516: LD_VAR 0 8
71520: NOT
71521: IFFALSE 71525
// continue ;
71523: GO 71421
// for k in factories do
71525: LD_ADDR_VAR 0 6
71529: PUSH
71530: LD_VAR 0 2
71534: PUSH
71535: FOR_IN
71536: IFFALSE 71601
// begin weapons := AvailableWeaponList ( k ) ;
71538: LD_ADDR_VAR 0 9
71542: PUSH
71543: LD_VAR 0 6
71547: PPUSH
71548: CALL_OW 478
71552: ST_TO_ADDR
// if not weapons then
71553: LD_VAR 0 9
71557: NOT
71558: IFFALSE 71562
// continue ;
71560: GO 71535
// if weapon in weapons then
71562: LD_VAR 0 8
71566: PUSH
71567: LD_VAR 0 9
71571: IN
71572: IFFALSE 71599
// begin result := [ i , weapon ] ;
71574: LD_ADDR_VAR 0 3
71578: PUSH
71579: LD_VAR 0 4
71583: PUSH
71584: LD_VAR 0 8
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: ST_TO_ADDR
// exit ;
71593: POP
71594: POP
71595: POP
71596: POP
71597: GO 71607
// end ; end ;
71599: GO 71535
71601: POP
71602: POP
// end ;
71603: GO 71421
71605: POP
71606: POP
// end ;
71607: LD_VAR 0 3
71611: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71612: LD_INT 0
71614: PPUSH
// if not side or side > 8 then
71615: LD_VAR 0 3
71619: NOT
71620: PUSH
71621: LD_VAR 0 3
71625: PUSH
71626: LD_INT 8
71628: GREATER
71629: OR
71630: IFFALSE 71634
// exit ;
71632: GO 71693
// if not range then
71634: LD_VAR 0 4
71638: NOT
71639: IFFALSE 71650
// range := - 12 ;
71641: LD_ADDR_VAR 0 4
71645: PUSH
71646: LD_INT 12
71648: NEG
71649: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71650: LD_VAR 0 1
71654: PPUSH
71655: LD_VAR 0 2
71659: PPUSH
71660: LD_VAR 0 3
71664: PPUSH
71665: LD_VAR 0 4
71669: PPUSH
71670: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71674: LD_VAR 0 1
71678: PPUSH
71679: LD_VAR 0 2
71683: PPUSH
71684: LD_VAR 0 3
71688: PPUSH
71689: CALL_OW 331
// end ;
71693: LD_VAR 0 5
71697: RET
// export function Video ( mode ) ; begin
71698: LD_INT 0
71700: PPUSH
// ingame_video = mode ;
71701: LD_ADDR_OWVAR 52
71705: PUSH
71706: LD_VAR 0 1
71710: ST_TO_ADDR
// interface_hidden = mode ;
71711: LD_ADDR_OWVAR 54
71715: PUSH
71716: LD_VAR 0 1
71720: ST_TO_ADDR
// end ;
71721: LD_VAR 0 2
71725: RET
// export function Join ( array , element ) ; begin
71726: LD_INT 0
71728: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71729: LD_ADDR_VAR 0 3
71733: PUSH
71734: LD_VAR 0 1
71738: PPUSH
71739: LD_VAR 0 1
71743: PUSH
71744: LD_INT 1
71746: PLUS
71747: PPUSH
71748: LD_VAR 0 2
71752: PPUSH
71753: CALL_OW 1
71757: ST_TO_ADDR
// end ;
71758: LD_VAR 0 3
71762: RET
// export function JoinUnion ( array , element ) ; begin
71763: LD_INT 0
71765: PPUSH
// result := array union element ;
71766: LD_ADDR_VAR 0 3
71770: PUSH
71771: LD_VAR 0 1
71775: PUSH
71776: LD_VAR 0 2
71780: UNION
71781: ST_TO_ADDR
// end ;
71782: LD_VAR 0 3
71786: RET
// export function GetBehemoths ( side ) ; begin
71787: LD_INT 0
71789: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
71790: LD_ADDR_VAR 0 2
71794: PUSH
71795: LD_INT 22
71797: PUSH
71798: LD_VAR 0 1
71802: PUSH
71803: EMPTY
71804: LIST
71805: LIST
71806: PUSH
71807: LD_INT 31
71809: PUSH
71810: LD_INT 25
71812: PUSH
71813: EMPTY
71814: LIST
71815: LIST
71816: PUSH
71817: EMPTY
71818: LIST
71819: LIST
71820: PPUSH
71821: CALL_OW 69
71825: ST_TO_ADDR
// end ;
71826: LD_VAR 0 2
71830: RET
// export function Shuffle ( array ) ; var i , index ; begin
71831: LD_INT 0
71833: PPUSH
71834: PPUSH
71835: PPUSH
// result := [ ] ;
71836: LD_ADDR_VAR 0 2
71840: PUSH
71841: EMPTY
71842: ST_TO_ADDR
// if not array then
71843: LD_VAR 0 1
71847: NOT
71848: IFFALSE 71852
// exit ;
71850: GO 71951
// Randomize ;
71852: CALL_OW 10
// for i = array downto 1 do
71856: LD_ADDR_VAR 0 3
71860: PUSH
71861: DOUBLE
71862: LD_VAR 0 1
71866: INC
71867: ST_TO_ADDR
71868: LD_INT 1
71870: PUSH
71871: FOR_DOWNTO
71872: IFFALSE 71949
// begin index := rand ( 1 , array ) ;
71874: LD_ADDR_VAR 0 4
71878: PUSH
71879: LD_INT 1
71881: PPUSH
71882: LD_VAR 0 1
71886: PPUSH
71887: CALL_OW 12
71891: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71892: LD_ADDR_VAR 0 2
71896: PUSH
71897: LD_VAR 0 2
71901: PPUSH
71902: LD_VAR 0 2
71906: PUSH
71907: LD_INT 1
71909: PLUS
71910: PPUSH
71911: LD_VAR 0 1
71915: PUSH
71916: LD_VAR 0 4
71920: ARRAY
71921: PPUSH
71922: CALL_OW 2
71926: ST_TO_ADDR
// array := Delete ( array , index ) ;
71927: LD_ADDR_VAR 0 1
71931: PUSH
71932: LD_VAR 0 1
71936: PPUSH
71937: LD_VAR 0 4
71941: PPUSH
71942: CALL_OW 3
71946: ST_TO_ADDR
// end ;
71947: GO 71871
71949: POP
71950: POP
// end ;
71951: LD_VAR 0 2
71955: RET
// export function GetBaseMaterials ( base ) ; begin
71956: LD_INT 0
71958: PPUSH
// result := [ 0 , 0 , 0 ] ;
71959: LD_ADDR_VAR 0 2
71963: PUSH
71964: LD_INT 0
71966: PUSH
71967: LD_INT 0
71969: PUSH
71970: LD_INT 0
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: LIST
71977: ST_TO_ADDR
// if not base then
71978: LD_VAR 0 1
71982: NOT
71983: IFFALSE 71987
// exit ;
71985: GO 72036
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71987: LD_ADDR_VAR 0 2
71991: PUSH
71992: LD_VAR 0 1
71996: PPUSH
71997: LD_INT 1
71999: PPUSH
72000: CALL_OW 275
72004: PUSH
72005: LD_VAR 0 1
72009: PPUSH
72010: LD_INT 2
72012: PPUSH
72013: CALL_OW 275
72017: PUSH
72018: LD_VAR 0 1
72022: PPUSH
72023: LD_INT 3
72025: PPUSH
72026: CALL_OW 275
72030: PUSH
72031: EMPTY
72032: LIST
72033: LIST
72034: LIST
72035: ST_TO_ADDR
// end ;
72036: LD_VAR 0 2
72040: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72041: LD_INT 0
72043: PPUSH
72044: PPUSH
// result := array ;
72045: LD_ADDR_VAR 0 3
72049: PUSH
72050: LD_VAR 0 1
72054: ST_TO_ADDR
// if size >= result then
72055: LD_VAR 0 2
72059: PUSH
72060: LD_VAR 0 3
72064: GREATEREQUAL
72065: IFFALSE 72069
// exit ;
72067: GO 72119
// if size then
72069: LD_VAR 0 2
72073: IFFALSE 72119
// for i := array downto size do
72075: LD_ADDR_VAR 0 4
72079: PUSH
72080: DOUBLE
72081: LD_VAR 0 1
72085: INC
72086: ST_TO_ADDR
72087: LD_VAR 0 2
72091: PUSH
72092: FOR_DOWNTO
72093: IFFALSE 72117
// result := Delete ( result , result ) ;
72095: LD_ADDR_VAR 0 3
72099: PUSH
72100: LD_VAR 0 3
72104: PPUSH
72105: LD_VAR 0 3
72109: PPUSH
72110: CALL_OW 3
72114: ST_TO_ADDR
72115: GO 72092
72117: POP
72118: POP
// end ;
72119: LD_VAR 0 3
72123: RET
// export function ComExit ( unit ) ; var tmp ; begin
72124: LD_INT 0
72126: PPUSH
72127: PPUSH
// if not IsInUnit ( unit ) then
72128: LD_VAR 0 1
72132: PPUSH
72133: CALL_OW 310
72137: NOT
72138: IFFALSE 72142
// exit ;
72140: GO 72202
// tmp := IsInUnit ( unit ) ;
72142: LD_ADDR_VAR 0 3
72146: PUSH
72147: LD_VAR 0 1
72151: PPUSH
72152: CALL_OW 310
72156: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72157: LD_VAR 0 3
72161: PPUSH
72162: CALL_OW 247
72166: PUSH
72167: LD_INT 2
72169: EQUAL
72170: IFFALSE 72183
// ComExitVehicle ( unit ) else
72172: LD_VAR 0 1
72176: PPUSH
72177: CALL_OW 121
72181: GO 72192
// ComExitBuilding ( unit ) ;
72183: LD_VAR 0 1
72187: PPUSH
72188: CALL_OW 122
// result := tmp ;
72192: LD_ADDR_VAR 0 2
72196: PUSH
72197: LD_VAR 0 3
72201: ST_TO_ADDR
// end ;
72202: LD_VAR 0 2
72206: RET
// export function ComExitAll ( units ) ; var i ; begin
72207: LD_INT 0
72209: PPUSH
72210: PPUSH
// if not units then
72211: LD_VAR 0 1
72215: NOT
72216: IFFALSE 72220
// exit ;
72218: GO 72246
// for i in units do
72220: LD_ADDR_VAR 0 3
72224: PUSH
72225: LD_VAR 0 1
72229: PUSH
72230: FOR_IN
72231: IFFALSE 72244
// ComExit ( i ) ;
72233: LD_VAR 0 3
72237: PPUSH
72238: CALL 72124 0 1
72242: GO 72230
72244: POP
72245: POP
// end ;
72246: LD_VAR 0 2
72250: RET
// export function ResetHc ; begin
72251: LD_INT 0
72253: PPUSH
// InitHc ;
72254: CALL_OW 19
// hc_importance := 0 ;
72258: LD_ADDR_OWVAR 32
72262: PUSH
72263: LD_INT 0
72265: ST_TO_ADDR
// end ;
72266: LD_VAR 0 1
72270: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72271: LD_INT 0
72273: PPUSH
72274: PPUSH
72275: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72276: LD_ADDR_VAR 0 6
72280: PUSH
72281: LD_VAR 0 1
72285: PUSH
72286: LD_VAR 0 3
72290: PLUS
72291: PUSH
72292: LD_INT 2
72294: DIV
72295: ST_TO_ADDR
// if _x < 0 then
72296: LD_VAR 0 6
72300: PUSH
72301: LD_INT 0
72303: LESS
72304: IFFALSE 72321
// _x := _x * - 1 ;
72306: LD_ADDR_VAR 0 6
72310: PUSH
72311: LD_VAR 0 6
72315: PUSH
72316: LD_INT 1
72318: NEG
72319: MUL
72320: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72321: LD_ADDR_VAR 0 7
72325: PUSH
72326: LD_VAR 0 2
72330: PUSH
72331: LD_VAR 0 4
72335: PLUS
72336: PUSH
72337: LD_INT 2
72339: DIV
72340: ST_TO_ADDR
// if _y < 0 then
72341: LD_VAR 0 7
72345: PUSH
72346: LD_INT 0
72348: LESS
72349: IFFALSE 72366
// _y := _y * - 1 ;
72351: LD_ADDR_VAR 0 7
72355: PUSH
72356: LD_VAR 0 7
72360: PUSH
72361: LD_INT 1
72363: NEG
72364: MUL
72365: ST_TO_ADDR
// result := [ _x , _y ] ;
72366: LD_ADDR_VAR 0 5
72370: PUSH
72371: LD_VAR 0 6
72375: PUSH
72376: LD_VAR 0 7
72380: PUSH
72381: EMPTY
72382: LIST
72383: LIST
72384: ST_TO_ADDR
// end ;
72385: LD_VAR 0 5
72389: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72390: LD_INT 0
72392: PPUSH
72393: PPUSH
72394: PPUSH
72395: PPUSH
// task := GetTaskList ( unit ) ;
72396: LD_ADDR_VAR 0 7
72400: PUSH
72401: LD_VAR 0 1
72405: PPUSH
72406: CALL_OW 437
72410: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72411: LD_VAR 0 7
72415: NOT
72416: PUSH
72417: LD_VAR 0 1
72421: PPUSH
72422: LD_VAR 0 2
72426: PPUSH
72427: CALL_OW 308
72431: NOT
72432: AND
72433: IFFALSE 72437
// exit ;
72435: GO 72555
// if IsInArea ( unit , area ) then
72437: LD_VAR 0 1
72441: PPUSH
72442: LD_VAR 0 2
72446: PPUSH
72447: CALL_OW 308
72451: IFFALSE 72469
// begin ComMoveToArea ( unit , goAway ) ;
72453: LD_VAR 0 1
72457: PPUSH
72458: LD_VAR 0 3
72462: PPUSH
72463: CALL_OW 113
// exit ;
72467: GO 72555
// end ; if task [ 1 ] [ 1 ] <> M then
72469: LD_VAR 0 7
72473: PUSH
72474: LD_INT 1
72476: ARRAY
72477: PUSH
72478: LD_INT 1
72480: ARRAY
72481: PUSH
72482: LD_STRING M
72484: NONEQUAL
72485: IFFALSE 72489
// exit ;
72487: GO 72555
// x := task [ 1 ] [ 2 ] ;
72489: LD_ADDR_VAR 0 5
72493: PUSH
72494: LD_VAR 0 7
72498: PUSH
72499: LD_INT 1
72501: ARRAY
72502: PUSH
72503: LD_INT 2
72505: ARRAY
72506: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72507: LD_ADDR_VAR 0 6
72511: PUSH
72512: LD_VAR 0 7
72516: PUSH
72517: LD_INT 1
72519: ARRAY
72520: PUSH
72521: LD_INT 3
72523: ARRAY
72524: ST_TO_ADDR
// if InArea ( x , y , area ) then
72525: LD_VAR 0 5
72529: PPUSH
72530: LD_VAR 0 6
72534: PPUSH
72535: LD_VAR 0 2
72539: PPUSH
72540: CALL_OW 309
72544: IFFALSE 72555
// ComStop ( unit ) ;
72546: LD_VAR 0 1
72550: PPUSH
72551: CALL_OW 141
// end ;
72555: LD_VAR 0 4
72559: RET
// export function Abs ( value ) ; begin
72560: LD_INT 0
72562: PPUSH
// result := value ;
72563: LD_ADDR_VAR 0 2
72567: PUSH
72568: LD_VAR 0 1
72572: ST_TO_ADDR
// if value < 0 then
72573: LD_VAR 0 1
72577: PUSH
72578: LD_INT 0
72580: LESS
72581: IFFALSE 72598
// result := value * - 1 ;
72583: LD_ADDR_VAR 0 2
72587: PUSH
72588: LD_VAR 0 1
72592: PUSH
72593: LD_INT 1
72595: NEG
72596: MUL
72597: ST_TO_ADDR
// end ;
72598: LD_VAR 0 2
72602: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72603: LD_INT 0
72605: PPUSH
72606: PPUSH
72607: PPUSH
72608: PPUSH
72609: PPUSH
72610: PPUSH
72611: PPUSH
72612: PPUSH
// if not unit or not building then
72613: LD_VAR 0 1
72617: NOT
72618: PUSH
72619: LD_VAR 0 2
72623: NOT
72624: OR
72625: IFFALSE 72629
// exit ;
72627: GO 72855
// x := GetX ( building ) ;
72629: LD_ADDR_VAR 0 4
72633: PUSH
72634: LD_VAR 0 2
72638: PPUSH
72639: CALL_OW 250
72643: ST_TO_ADDR
// y := GetY ( building ) ;
72644: LD_ADDR_VAR 0 6
72648: PUSH
72649: LD_VAR 0 2
72653: PPUSH
72654: CALL_OW 251
72658: ST_TO_ADDR
// d := GetDir ( building ) ;
72659: LD_ADDR_VAR 0 8
72663: PUSH
72664: LD_VAR 0 2
72668: PPUSH
72669: CALL_OW 254
72673: ST_TO_ADDR
// r := 4 ;
72674: LD_ADDR_VAR 0 9
72678: PUSH
72679: LD_INT 4
72681: ST_TO_ADDR
// for i := 1 to 5 do
72682: LD_ADDR_VAR 0 10
72686: PUSH
72687: DOUBLE
72688: LD_INT 1
72690: DEC
72691: ST_TO_ADDR
72692: LD_INT 5
72694: PUSH
72695: FOR_TO
72696: IFFALSE 72853
// begin _x := ShiftX ( x , d , r + i ) ;
72698: LD_ADDR_VAR 0 5
72702: PUSH
72703: LD_VAR 0 4
72707: PPUSH
72708: LD_VAR 0 8
72712: PPUSH
72713: LD_VAR 0 9
72717: PUSH
72718: LD_VAR 0 10
72722: PLUS
72723: PPUSH
72724: CALL_OW 272
72728: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72729: LD_ADDR_VAR 0 7
72733: PUSH
72734: LD_VAR 0 6
72738: PPUSH
72739: LD_VAR 0 8
72743: PPUSH
72744: LD_VAR 0 9
72748: PUSH
72749: LD_VAR 0 10
72753: PLUS
72754: PPUSH
72755: CALL_OW 273
72759: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72760: LD_VAR 0 5
72764: PPUSH
72765: LD_VAR 0 7
72769: PPUSH
72770: CALL_OW 488
72774: PUSH
72775: LD_VAR 0 5
72779: PPUSH
72780: LD_VAR 0 7
72784: PPUSH
72785: CALL_OW 428
72789: PPUSH
72790: CALL_OW 247
72794: PUSH
72795: LD_INT 3
72797: PUSH
72798: LD_INT 2
72800: PUSH
72801: EMPTY
72802: LIST
72803: LIST
72804: IN
72805: NOT
72806: AND
72807: IFFALSE 72851
// begin ComMoveXY ( unit , _x , _y ) ;
72809: LD_VAR 0 1
72813: PPUSH
72814: LD_VAR 0 5
72818: PPUSH
72819: LD_VAR 0 7
72823: PPUSH
72824: CALL_OW 111
// result := [ _x , _y ] ;
72828: LD_ADDR_VAR 0 3
72832: PUSH
72833: LD_VAR 0 5
72837: PUSH
72838: LD_VAR 0 7
72842: PUSH
72843: EMPTY
72844: LIST
72845: LIST
72846: ST_TO_ADDR
// exit ;
72847: POP
72848: POP
72849: GO 72855
// end ; end ;
72851: GO 72695
72853: POP
72854: POP
// end ;
72855: LD_VAR 0 3
72859: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72860: LD_INT 0
72862: PPUSH
72863: PPUSH
72864: PPUSH
// result := 0 ;
72865: LD_ADDR_VAR 0 3
72869: PUSH
72870: LD_INT 0
72872: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72873: LD_VAR 0 1
72877: PUSH
72878: LD_INT 0
72880: LESS
72881: PUSH
72882: LD_VAR 0 1
72886: PUSH
72887: LD_INT 8
72889: GREATER
72890: OR
72891: PUSH
72892: LD_VAR 0 2
72896: PUSH
72897: LD_INT 0
72899: LESS
72900: OR
72901: PUSH
72902: LD_VAR 0 2
72906: PUSH
72907: LD_INT 8
72909: GREATER
72910: OR
72911: IFFALSE 72915
// exit ;
72913: GO 72990
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72915: LD_ADDR_VAR 0 4
72919: PUSH
72920: LD_INT 22
72922: PUSH
72923: LD_VAR 0 2
72927: PUSH
72928: EMPTY
72929: LIST
72930: LIST
72931: PPUSH
72932: CALL_OW 69
72936: PUSH
72937: FOR_IN
72938: IFFALSE 72988
// begin un := UnitShoot ( i ) ;
72940: LD_ADDR_VAR 0 5
72944: PUSH
72945: LD_VAR 0 4
72949: PPUSH
72950: CALL_OW 504
72954: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72955: LD_VAR 0 5
72959: PPUSH
72960: CALL_OW 255
72964: PUSH
72965: LD_VAR 0 1
72969: EQUAL
72970: IFFALSE 72986
// begin result := un ;
72972: LD_ADDR_VAR 0 3
72976: PUSH
72977: LD_VAR 0 5
72981: ST_TO_ADDR
// exit ;
72982: POP
72983: POP
72984: GO 72990
// end ; end ;
72986: GO 72937
72988: POP
72989: POP
// end ;
72990: LD_VAR 0 3
72994: RET
// export function GetCargoBay ( units ) ; begin
72995: LD_INT 0
72997: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72998: LD_ADDR_VAR 0 2
73002: PUSH
73003: LD_VAR 0 1
73007: PPUSH
73008: LD_INT 2
73010: PUSH
73011: LD_INT 34
73013: PUSH
73014: LD_INT 12
73016: PUSH
73017: EMPTY
73018: LIST
73019: LIST
73020: PUSH
73021: LD_INT 34
73023: PUSH
73024: LD_INT 51
73026: PUSH
73027: EMPTY
73028: LIST
73029: LIST
73030: PUSH
73031: LD_INT 34
73033: PUSH
73034: LD_INT 32
73036: PUSH
73037: EMPTY
73038: LIST
73039: LIST
73040: PUSH
73041: LD_INT 34
73043: PUSH
73044: LD_INT 89
73046: PUSH
73047: EMPTY
73048: LIST
73049: LIST
73050: PUSH
73051: EMPTY
73052: LIST
73053: LIST
73054: LIST
73055: LIST
73056: LIST
73057: PPUSH
73058: CALL_OW 72
73062: ST_TO_ADDR
// end ;
73063: LD_VAR 0 2
73067: RET
// export function Negate ( value ) ; begin
73068: LD_INT 0
73070: PPUSH
// result := not value ;
73071: LD_ADDR_VAR 0 2
73075: PUSH
73076: LD_VAR 0 1
73080: NOT
73081: ST_TO_ADDR
// end ;
73082: LD_VAR 0 2
73086: RET
// export function Inc ( value ) ; begin
73087: LD_INT 0
73089: PPUSH
// result := value + 1 ;
73090: LD_ADDR_VAR 0 2
73094: PUSH
73095: LD_VAR 0 1
73099: PUSH
73100: LD_INT 1
73102: PLUS
73103: ST_TO_ADDR
// end ;
73104: LD_VAR 0 2
73108: RET
// export function Dec ( value ) ; begin
73109: LD_INT 0
73111: PPUSH
// result := value - 1 ;
73112: LD_ADDR_VAR 0 2
73116: PUSH
73117: LD_VAR 0 1
73121: PUSH
73122: LD_INT 1
73124: MINUS
73125: ST_TO_ADDR
// end ;
73126: LD_VAR 0 2
73130: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73131: LD_INT 0
73133: PPUSH
73134: PPUSH
73135: PPUSH
73136: PPUSH
73137: PPUSH
73138: PPUSH
73139: PPUSH
73140: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73141: LD_VAR 0 1
73145: PPUSH
73146: LD_VAR 0 2
73150: PPUSH
73151: CALL_OW 488
73155: NOT
73156: PUSH
73157: LD_VAR 0 3
73161: PPUSH
73162: LD_VAR 0 4
73166: PPUSH
73167: CALL_OW 488
73171: NOT
73172: OR
73173: IFFALSE 73186
// begin result := - 1 ;
73175: LD_ADDR_VAR 0 5
73179: PUSH
73180: LD_INT 1
73182: NEG
73183: ST_TO_ADDR
// exit ;
73184: GO 73421
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
73186: LD_ADDR_VAR 0 12
73190: PUSH
73191: LD_VAR 0 1
73195: PPUSH
73196: LD_VAR 0 2
73200: PPUSH
73201: LD_VAR 0 3
73205: PPUSH
73206: LD_VAR 0 4
73210: PPUSH
73211: CALL 72271 0 4
73215: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
73216: LD_ADDR_VAR 0 11
73220: PUSH
73221: LD_VAR 0 1
73225: PPUSH
73226: LD_VAR 0 2
73230: PPUSH
73231: LD_VAR 0 12
73235: PUSH
73236: LD_INT 1
73238: ARRAY
73239: PPUSH
73240: LD_VAR 0 12
73244: PUSH
73245: LD_INT 2
73247: ARRAY
73248: PPUSH
73249: CALL_OW 298
73253: ST_TO_ADDR
// distance := 9999 ;
73254: LD_ADDR_VAR 0 10
73258: PUSH
73259: LD_INT 9999
73261: ST_TO_ADDR
// for i := 0 to 5 do
73262: LD_ADDR_VAR 0 6
73266: PUSH
73267: DOUBLE
73268: LD_INT 0
73270: DEC
73271: ST_TO_ADDR
73272: LD_INT 5
73274: PUSH
73275: FOR_TO
73276: IFFALSE 73419
// begin _x := ShiftX ( x1 , i , centerDist ) ;
73278: LD_ADDR_VAR 0 7
73282: PUSH
73283: LD_VAR 0 1
73287: PPUSH
73288: LD_VAR 0 6
73292: PPUSH
73293: LD_VAR 0 11
73297: PPUSH
73298: CALL_OW 272
73302: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
73303: LD_ADDR_VAR 0 8
73307: PUSH
73308: LD_VAR 0 2
73312: PPUSH
73313: LD_VAR 0 6
73317: PPUSH
73318: LD_VAR 0 11
73322: PPUSH
73323: CALL_OW 273
73327: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73328: LD_VAR 0 7
73332: PPUSH
73333: LD_VAR 0 8
73337: PPUSH
73338: CALL_OW 488
73342: NOT
73343: IFFALSE 73347
// continue ;
73345: GO 73275
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
73347: LD_ADDR_VAR 0 9
73351: PUSH
73352: LD_VAR 0 12
73356: PUSH
73357: LD_INT 1
73359: ARRAY
73360: PPUSH
73361: LD_VAR 0 12
73365: PUSH
73366: LD_INT 2
73368: ARRAY
73369: PPUSH
73370: LD_VAR 0 7
73374: PPUSH
73375: LD_VAR 0 8
73379: PPUSH
73380: CALL_OW 298
73384: ST_TO_ADDR
// if tmp < distance then
73385: LD_VAR 0 9
73389: PUSH
73390: LD_VAR 0 10
73394: LESS
73395: IFFALSE 73417
// begin result := i ;
73397: LD_ADDR_VAR 0 5
73401: PUSH
73402: LD_VAR 0 6
73406: ST_TO_ADDR
// distance := tmp ;
73407: LD_ADDR_VAR 0 10
73411: PUSH
73412: LD_VAR 0 9
73416: ST_TO_ADDR
// end ; end ;
73417: GO 73275
73419: POP
73420: POP
// end ;
73421: LD_VAR 0 5
73425: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73426: LD_INT 0
73428: PPUSH
73429: PPUSH
// if not driver or not IsInUnit ( driver ) then
73430: LD_VAR 0 1
73434: NOT
73435: PUSH
73436: LD_VAR 0 1
73440: PPUSH
73441: CALL_OW 310
73445: NOT
73446: OR
73447: IFFALSE 73451
// exit ;
73449: GO 73541
// vehicle := IsInUnit ( driver ) ;
73451: LD_ADDR_VAR 0 3
73455: PUSH
73456: LD_VAR 0 1
73460: PPUSH
73461: CALL_OW 310
73465: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73466: LD_VAR 0 1
73470: PPUSH
73471: LD_STRING \
73473: PUSH
73474: LD_INT 0
73476: PUSH
73477: LD_INT 0
73479: PUSH
73480: LD_INT 0
73482: PUSH
73483: LD_INT 0
73485: PUSH
73486: LD_INT 0
73488: PUSH
73489: LD_INT 0
73491: PUSH
73492: EMPTY
73493: LIST
73494: LIST
73495: LIST
73496: LIST
73497: LIST
73498: LIST
73499: LIST
73500: PUSH
73501: LD_STRING E
73503: PUSH
73504: LD_INT 0
73506: PUSH
73507: LD_INT 0
73509: PUSH
73510: LD_VAR 0 3
73514: PUSH
73515: LD_INT 0
73517: PUSH
73518: LD_INT 0
73520: PUSH
73521: LD_INT 0
73523: PUSH
73524: EMPTY
73525: LIST
73526: LIST
73527: LIST
73528: LIST
73529: LIST
73530: LIST
73531: LIST
73532: PUSH
73533: EMPTY
73534: LIST
73535: LIST
73536: PPUSH
73537: CALL_OW 446
// end ;
73541: LD_VAR 0 2
73545: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73546: LD_INT 0
73548: PPUSH
73549: PPUSH
// if not driver or not IsInUnit ( driver ) then
73550: LD_VAR 0 1
73554: NOT
73555: PUSH
73556: LD_VAR 0 1
73560: PPUSH
73561: CALL_OW 310
73565: NOT
73566: OR
73567: IFFALSE 73571
// exit ;
73569: GO 73661
// vehicle := IsInUnit ( driver ) ;
73571: LD_ADDR_VAR 0 3
73575: PUSH
73576: LD_VAR 0 1
73580: PPUSH
73581: CALL_OW 310
73585: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73586: LD_VAR 0 1
73590: PPUSH
73591: LD_STRING \
73593: PUSH
73594: LD_INT 0
73596: PUSH
73597: LD_INT 0
73599: PUSH
73600: LD_INT 0
73602: PUSH
73603: LD_INT 0
73605: PUSH
73606: LD_INT 0
73608: PUSH
73609: LD_INT 0
73611: PUSH
73612: EMPTY
73613: LIST
73614: LIST
73615: LIST
73616: LIST
73617: LIST
73618: LIST
73619: LIST
73620: PUSH
73621: LD_STRING E
73623: PUSH
73624: LD_INT 0
73626: PUSH
73627: LD_INT 0
73629: PUSH
73630: LD_VAR 0 3
73634: PUSH
73635: LD_INT 0
73637: PUSH
73638: LD_INT 0
73640: PUSH
73641: LD_INT 0
73643: PUSH
73644: EMPTY
73645: LIST
73646: LIST
73647: LIST
73648: LIST
73649: LIST
73650: LIST
73651: LIST
73652: PUSH
73653: EMPTY
73654: LIST
73655: LIST
73656: PPUSH
73657: CALL_OW 447
// end ;
73661: LD_VAR 0 2
73665: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
73666: LD_INT 0
73668: PPUSH
73669: PPUSH
73670: PPUSH
// tmp := [ ] ;
73671: LD_ADDR_VAR 0 5
73675: PUSH
73676: EMPTY
73677: ST_TO_ADDR
// for i in units do
73678: LD_ADDR_VAR 0 4
73682: PUSH
73683: LD_VAR 0 1
73687: PUSH
73688: FOR_IN
73689: IFFALSE 73727
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
73691: LD_ADDR_VAR 0 5
73695: PUSH
73696: LD_VAR 0 5
73700: PPUSH
73701: LD_VAR 0 5
73705: PUSH
73706: LD_INT 1
73708: PLUS
73709: PPUSH
73710: LD_VAR 0 4
73714: PPUSH
73715: CALL_OW 256
73719: PPUSH
73720: CALL_OW 2
73724: ST_TO_ADDR
73725: GO 73688
73727: POP
73728: POP
// if not tmp then
73729: LD_VAR 0 5
73733: NOT
73734: IFFALSE 73738
// exit ;
73736: GO 73786
// if asc then
73738: LD_VAR 0 2
73742: IFFALSE 73766
// result := SortListByListAsc ( units , tmp ) else
73744: LD_ADDR_VAR 0 3
73748: PUSH
73749: LD_VAR 0 1
73753: PPUSH
73754: LD_VAR 0 5
73758: PPUSH
73759: CALL_OW 76
73763: ST_TO_ADDR
73764: GO 73786
// result := SortListByListDesc ( units , tmp ) ;
73766: LD_ADDR_VAR 0 3
73770: PUSH
73771: LD_VAR 0 1
73775: PPUSH
73776: LD_VAR 0 5
73780: PPUSH
73781: CALL_OW 77
73785: ST_TO_ADDR
// end ;
73786: LD_VAR 0 3
73790: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
73791: LD_INT 0
73793: PPUSH
73794: PPUSH
// task := GetTaskList ( mech ) ;
73795: LD_ADDR_VAR 0 4
73799: PUSH
73800: LD_VAR 0 1
73804: PPUSH
73805: CALL_OW 437
73809: ST_TO_ADDR
// if not task then
73810: LD_VAR 0 4
73814: NOT
73815: IFFALSE 73819
// exit ;
73817: GO 73861
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
73819: LD_ADDR_VAR 0 3
73823: PUSH
73824: LD_VAR 0 4
73828: PUSH
73829: LD_INT 1
73831: ARRAY
73832: PUSH
73833: LD_INT 1
73835: ARRAY
73836: PUSH
73837: LD_STRING r
73839: EQUAL
73840: PUSH
73841: LD_VAR 0 4
73845: PUSH
73846: LD_INT 1
73848: ARRAY
73849: PUSH
73850: LD_INT 4
73852: ARRAY
73853: PUSH
73854: LD_VAR 0 2
73858: EQUAL
73859: AND
73860: ST_TO_ADDR
// end ;
73861: LD_VAR 0 3
73865: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73866: LD_INT 0
73868: PPUSH
// SetDir ( unit , d ) ;
73869: LD_VAR 0 1
73873: PPUSH
73874: LD_VAR 0 4
73878: PPUSH
73879: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
73883: LD_VAR 0 1
73887: PPUSH
73888: LD_VAR 0 2
73892: PPUSH
73893: LD_VAR 0 3
73897: PPUSH
73898: LD_VAR 0 5
73902: PPUSH
73903: CALL_OW 48
// end ;
73907: LD_VAR 0 6
73911: RET
// export function ToNaturalNumber ( number ) ; begin
73912: LD_INT 0
73914: PPUSH
// result := number div 1 ;
73915: LD_ADDR_VAR 0 2
73919: PUSH
73920: LD_VAR 0 1
73924: PUSH
73925: LD_INT 1
73927: DIV
73928: ST_TO_ADDR
// if number < 0 then
73929: LD_VAR 0 1
73933: PUSH
73934: LD_INT 0
73936: LESS
73937: IFFALSE 73947
// result := 0 ;
73939: LD_ADDR_VAR 0 2
73943: PUSH
73944: LD_INT 0
73946: ST_TO_ADDR
// end ;
73947: LD_VAR 0 2
73951: RET
// export function SortByClass ( units , class ) ; var un ; begin
73952: LD_INT 0
73954: PPUSH
73955: PPUSH
// if not units or not class then
73956: LD_VAR 0 1
73960: NOT
73961: PUSH
73962: LD_VAR 0 2
73966: NOT
73967: OR
73968: IFFALSE 73972
// exit ;
73970: GO 74067
// result := [ ] ;
73972: LD_ADDR_VAR 0 3
73976: PUSH
73977: EMPTY
73978: ST_TO_ADDR
// for un in units do
73979: LD_ADDR_VAR 0 4
73983: PUSH
73984: LD_VAR 0 1
73988: PUSH
73989: FOR_IN
73990: IFFALSE 74065
// if GetClass ( un ) = class then
73992: LD_VAR 0 4
73996: PPUSH
73997: CALL_OW 257
74001: PUSH
74002: LD_VAR 0 2
74006: EQUAL
74007: IFFALSE 74034
// result := Insert ( result , 1 , un ) else
74009: LD_ADDR_VAR 0 3
74013: PUSH
74014: LD_VAR 0 3
74018: PPUSH
74019: LD_INT 1
74021: PPUSH
74022: LD_VAR 0 4
74026: PPUSH
74027: CALL_OW 2
74031: ST_TO_ADDR
74032: GO 74063
// result := Replace ( result , result + 1 , un ) ;
74034: LD_ADDR_VAR 0 3
74038: PUSH
74039: LD_VAR 0 3
74043: PPUSH
74044: LD_VAR 0 3
74048: PUSH
74049: LD_INT 1
74051: PLUS
74052: PPUSH
74053: LD_VAR 0 4
74057: PPUSH
74058: CALL_OW 1
74062: ST_TO_ADDR
74063: GO 73989
74065: POP
74066: POP
// end ;
74067: LD_VAR 0 3
74071: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74072: LD_INT 0
74074: PPUSH
74075: PPUSH
74076: PPUSH
74077: PPUSH
74078: PPUSH
74079: PPUSH
74080: PPUSH
// result := [ ] ;
74081: LD_ADDR_VAR 0 4
74085: PUSH
74086: EMPTY
74087: ST_TO_ADDR
// if x - r < 0 then
74088: LD_VAR 0 1
74092: PUSH
74093: LD_VAR 0 3
74097: MINUS
74098: PUSH
74099: LD_INT 0
74101: LESS
74102: IFFALSE 74114
// min_x := 0 else
74104: LD_ADDR_VAR 0 8
74108: PUSH
74109: LD_INT 0
74111: ST_TO_ADDR
74112: GO 74130
// min_x := x - r ;
74114: LD_ADDR_VAR 0 8
74118: PUSH
74119: LD_VAR 0 1
74123: PUSH
74124: LD_VAR 0 3
74128: MINUS
74129: ST_TO_ADDR
// if y - r < 0 then
74130: LD_VAR 0 2
74134: PUSH
74135: LD_VAR 0 3
74139: MINUS
74140: PUSH
74141: LD_INT 0
74143: LESS
74144: IFFALSE 74156
// min_y := 0 else
74146: LD_ADDR_VAR 0 7
74150: PUSH
74151: LD_INT 0
74153: ST_TO_ADDR
74154: GO 74172
// min_y := y - r ;
74156: LD_ADDR_VAR 0 7
74160: PUSH
74161: LD_VAR 0 2
74165: PUSH
74166: LD_VAR 0 3
74170: MINUS
74171: ST_TO_ADDR
// max_x := x + r ;
74172: LD_ADDR_VAR 0 9
74176: PUSH
74177: LD_VAR 0 1
74181: PUSH
74182: LD_VAR 0 3
74186: PLUS
74187: ST_TO_ADDR
// max_y := y + r ;
74188: LD_ADDR_VAR 0 10
74192: PUSH
74193: LD_VAR 0 2
74197: PUSH
74198: LD_VAR 0 3
74202: PLUS
74203: ST_TO_ADDR
// for _x = min_x to max_x do
74204: LD_ADDR_VAR 0 5
74208: PUSH
74209: DOUBLE
74210: LD_VAR 0 8
74214: DEC
74215: ST_TO_ADDR
74216: LD_VAR 0 9
74220: PUSH
74221: FOR_TO
74222: IFFALSE 74323
// for _y = min_y to max_y do
74224: LD_ADDR_VAR 0 6
74228: PUSH
74229: DOUBLE
74230: LD_VAR 0 7
74234: DEC
74235: ST_TO_ADDR
74236: LD_VAR 0 10
74240: PUSH
74241: FOR_TO
74242: IFFALSE 74319
// begin if not ValidHex ( _x , _y ) then
74244: LD_VAR 0 5
74248: PPUSH
74249: LD_VAR 0 6
74253: PPUSH
74254: CALL_OW 488
74258: NOT
74259: IFFALSE 74263
// continue ;
74261: GO 74241
// if GetResourceTypeXY ( _x , _y ) then
74263: LD_VAR 0 5
74267: PPUSH
74268: LD_VAR 0 6
74272: PPUSH
74273: CALL_OW 283
74277: IFFALSE 74317
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
74279: LD_ADDR_VAR 0 4
74283: PUSH
74284: LD_VAR 0 4
74288: PPUSH
74289: LD_VAR 0 4
74293: PUSH
74294: LD_INT 1
74296: PLUS
74297: PPUSH
74298: LD_VAR 0 5
74302: PUSH
74303: LD_VAR 0 6
74307: PUSH
74308: EMPTY
74309: LIST
74310: LIST
74311: PPUSH
74312: CALL_OW 1
74316: ST_TO_ADDR
// end ;
74317: GO 74241
74319: POP
74320: POP
74321: GO 74221
74323: POP
74324: POP
// end ;
74325: LD_VAR 0 4
74329: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
74330: LD_INT 0
74332: PPUSH
74333: PPUSH
74334: PPUSH
74335: PPUSH
74336: PPUSH
74337: PPUSH
74338: PPUSH
74339: PPUSH
// if not units then
74340: LD_VAR 0 1
74344: NOT
74345: IFFALSE 74349
// exit ;
74347: GO 74873
// result := UnitFilter ( units , [ f_ok ] ) ;
74349: LD_ADDR_VAR 0 3
74353: PUSH
74354: LD_VAR 0 1
74358: PPUSH
74359: LD_INT 50
74361: PUSH
74362: EMPTY
74363: LIST
74364: PPUSH
74365: CALL_OW 72
74369: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74370: LD_ADDR_VAR 0 8
74374: PUSH
74375: LD_VAR 0 1
74379: PUSH
74380: LD_INT 1
74382: ARRAY
74383: PPUSH
74384: CALL_OW 255
74388: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
74389: LD_ADDR_VAR 0 10
74393: PUSH
74394: LD_INT 29
74396: PUSH
74397: LD_INT 91
74399: PUSH
74400: LD_INT 49
74402: PUSH
74403: EMPTY
74404: LIST
74405: LIST
74406: LIST
74407: ST_TO_ADDR
// if not result then
74408: LD_VAR 0 3
74412: NOT
74413: IFFALSE 74417
// exit ;
74415: GO 74873
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74417: LD_ADDR_VAR 0 5
74421: PUSH
74422: LD_INT 81
74424: PUSH
74425: LD_VAR 0 8
74429: PUSH
74430: EMPTY
74431: LIST
74432: LIST
74433: PPUSH
74434: CALL_OW 69
74438: ST_TO_ADDR
// for i in result do
74439: LD_ADDR_VAR 0 4
74443: PUSH
74444: LD_VAR 0 3
74448: PUSH
74449: FOR_IN
74450: IFFALSE 74871
// begin tag := GetTag ( i ) + 1 ;
74452: LD_ADDR_VAR 0 9
74456: PUSH
74457: LD_VAR 0 4
74461: PPUSH
74462: CALL_OW 110
74466: PUSH
74467: LD_INT 1
74469: PLUS
74470: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
74471: LD_ADDR_VAR 0 7
74475: PUSH
74476: LD_VAR 0 4
74480: PPUSH
74481: CALL_OW 250
74485: PPUSH
74486: LD_VAR 0 4
74490: PPUSH
74491: CALL_OW 251
74495: PPUSH
74496: LD_INT 6
74498: PPUSH
74499: CALL 74072 0 3
74503: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
74504: LD_VAR 0 4
74508: PPUSH
74509: CALL_OW 247
74513: PUSH
74514: LD_INT 2
74516: EQUAL
74517: PUSH
74518: LD_VAR 0 7
74522: AND
74523: PUSH
74524: LD_VAR 0 4
74528: PPUSH
74529: CALL_OW 264
74533: PUSH
74534: LD_VAR 0 10
74538: IN
74539: NOT
74540: AND
74541: IFFALSE 74580
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
74543: LD_VAR 0 4
74547: PPUSH
74548: LD_VAR 0 7
74552: PUSH
74553: LD_INT 1
74555: ARRAY
74556: PUSH
74557: LD_INT 1
74559: ARRAY
74560: PPUSH
74561: LD_VAR 0 7
74565: PUSH
74566: LD_INT 1
74568: ARRAY
74569: PUSH
74570: LD_INT 2
74572: ARRAY
74573: PPUSH
74574: CALL_OW 116
74578: GO 74869
// if path > tag then
74580: LD_VAR 0 2
74584: PUSH
74585: LD_VAR 0 9
74589: GREATER
74590: IFFALSE 74798
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
74592: LD_ADDR_VAR 0 6
74596: PUSH
74597: LD_VAR 0 5
74601: PPUSH
74602: LD_INT 91
74604: PUSH
74605: LD_VAR 0 4
74609: PUSH
74610: LD_INT 8
74612: PUSH
74613: EMPTY
74614: LIST
74615: LIST
74616: LIST
74617: PPUSH
74618: CALL_OW 72
74622: ST_TO_ADDR
// if nearEnemy then
74623: LD_VAR 0 6
74627: IFFALSE 74696
// begin if GetWeapon ( i ) = ru_time_lapser then
74629: LD_VAR 0 4
74633: PPUSH
74634: CALL_OW 264
74638: PUSH
74639: LD_INT 49
74641: EQUAL
74642: IFFALSE 74670
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
74644: LD_VAR 0 4
74648: PPUSH
74649: LD_VAR 0 6
74653: PPUSH
74654: LD_VAR 0 4
74658: PPUSH
74659: CALL_OW 74
74663: PPUSH
74664: CALL_OW 112
74668: GO 74694
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
74670: LD_VAR 0 4
74674: PPUSH
74675: LD_VAR 0 6
74679: PPUSH
74680: LD_VAR 0 4
74684: PPUSH
74685: CALL_OW 74
74689: PPUSH
74690: CALL_OW 115
// end else
74694: GO 74796
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
74696: LD_VAR 0 4
74700: PPUSH
74701: LD_VAR 0 2
74705: PUSH
74706: LD_VAR 0 9
74710: ARRAY
74711: PUSH
74712: LD_INT 1
74714: ARRAY
74715: PPUSH
74716: LD_VAR 0 2
74720: PUSH
74721: LD_VAR 0 9
74725: ARRAY
74726: PUSH
74727: LD_INT 2
74729: ARRAY
74730: PPUSH
74731: CALL_OW 297
74735: PUSH
74736: LD_INT 6
74738: GREATER
74739: IFFALSE 74782
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
74741: LD_VAR 0 4
74745: PPUSH
74746: LD_VAR 0 2
74750: PUSH
74751: LD_VAR 0 9
74755: ARRAY
74756: PUSH
74757: LD_INT 1
74759: ARRAY
74760: PPUSH
74761: LD_VAR 0 2
74765: PUSH
74766: LD_VAR 0 9
74770: ARRAY
74771: PUSH
74772: LD_INT 2
74774: ARRAY
74775: PPUSH
74776: CALL_OW 114
74780: GO 74796
// SetTag ( i , tag ) ;
74782: LD_VAR 0 4
74786: PPUSH
74787: LD_VAR 0 9
74791: PPUSH
74792: CALL_OW 109
// end else
74796: GO 74869
// if enemy then
74798: LD_VAR 0 5
74802: IFFALSE 74869
// begin if GetWeapon ( i ) = ru_time_lapser then
74804: LD_VAR 0 4
74808: PPUSH
74809: CALL_OW 264
74813: PUSH
74814: LD_INT 49
74816: EQUAL
74817: IFFALSE 74845
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
74819: LD_VAR 0 4
74823: PPUSH
74824: LD_VAR 0 5
74828: PPUSH
74829: LD_VAR 0 4
74833: PPUSH
74834: CALL_OW 74
74838: PPUSH
74839: CALL_OW 112
74843: GO 74869
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
74845: LD_VAR 0 4
74849: PPUSH
74850: LD_VAR 0 5
74854: PPUSH
74855: LD_VAR 0 4
74859: PPUSH
74860: CALL_OW 74
74864: PPUSH
74865: CALL_OW 115
// end ; end ;
74869: GO 74449
74871: POP
74872: POP
// end ;
74873: LD_VAR 0 3
74877: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
74878: LD_INT 0
74880: PPUSH
74881: PPUSH
74882: PPUSH
// if not unit or IsInUnit ( unit ) then
74883: LD_VAR 0 1
74887: NOT
74888: PUSH
74889: LD_VAR 0 1
74893: PPUSH
74894: CALL_OW 310
74898: OR
74899: IFFALSE 74903
// exit ;
74901: GO 74994
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
74903: LD_ADDR_VAR 0 4
74907: PUSH
74908: LD_VAR 0 1
74912: PPUSH
74913: CALL_OW 250
74917: PPUSH
74918: LD_VAR 0 2
74922: PPUSH
74923: LD_INT 1
74925: PPUSH
74926: CALL_OW 272
74930: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
74931: LD_ADDR_VAR 0 5
74935: PUSH
74936: LD_VAR 0 1
74940: PPUSH
74941: CALL_OW 251
74945: PPUSH
74946: LD_VAR 0 2
74950: PPUSH
74951: LD_INT 1
74953: PPUSH
74954: CALL_OW 273
74958: ST_TO_ADDR
// if ValidHex ( x , y ) then
74959: LD_VAR 0 4
74963: PPUSH
74964: LD_VAR 0 5
74968: PPUSH
74969: CALL_OW 488
74973: IFFALSE 74994
// ComTurnXY ( unit , x , y ) ;
74975: LD_VAR 0 1
74979: PPUSH
74980: LD_VAR 0 4
74984: PPUSH
74985: LD_VAR 0 5
74989: PPUSH
74990: CALL_OW 118
// end ;
74994: LD_VAR 0 3
74998: RET
// export function SeeUnits ( side , units ) ; var i ; begin
74999: LD_INT 0
75001: PPUSH
75002: PPUSH
// result := false ;
75003: LD_ADDR_VAR 0 3
75007: PUSH
75008: LD_INT 0
75010: ST_TO_ADDR
// if not units then
75011: LD_VAR 0 2
75015: NOT
75016: IFFALSE 75020
// exit ;
75018: GO 75065
// for i in units do
75020: LD_ADDR_VAR 0 4
75024: PUSH
75025: LD_VAR 0 2
75029: PUSH
75030: FOR_IN
75031: IFFALSE 75063
// if See ( side , i ) then
75033: LD_VAR 0 1
75037: PPUSH
75038: LD_VAR 0 4
75042: PPUSH
75043: CALL_OW 292
75047: IFFALSE 75061
// begin result := true ;
75049: LD_ADDR_VAR 0 3
75053: PUSH
75054: LD_INT 1
75056: ST_TO_ADDR
// exit ;
75057: POP
75058: POP
75059: GO 75065
// end ;
75061: GO 75030
75063: POP
75064: POP
// end ;
75065: LD_VAR 0 3
75069: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75070: LD_INT 0
75072: PPUSH
75073: PPUSH
75074: PPUSH
75075: PPUSH
// if not unit or not points then
75076: LD_VAR 0 1
75080: NOT
75081: PUSH
75082: LD_VAR 0 2
75086: NOT
75087: OR
75088: IFFALSE 75092
// exit ;
75090: GO 75182
// dist := 99999 ;
75092: LD_ADDR_VAR 0 5
75096: PUSH
75097: LD_INT 99999
75099: ST_TO_ADDR
// for i in points do
75100: LD_ADDR_VAR 0 4
75104: PUSH
75105: LD_VAR 0 2
75109: PUSH
75110: FOR_IN
75111: IFFALSE 75180
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75113: LD_ADDR_VAR 0 6
75117: PUSH
75118: LD_VAR 0 1
75122: PPUSH
75123: LD_VAR 0 4
75127: PUSH
75128: LD_INT 1
75130: ARRAY
75131: PPUSH
75132: LD_VAR 0 4
75136: PUSH
75137: LD_INT 2
75139: ARRAY
75140: PPUSH
75141: CALL_OW 297
75145: ST_TO_ADDR
// if tmpDist < dist then
75146: LD_VAR 0 6
75150: PUSH
75151: LD_VAR 0 5
75155: LESS
75156: IFFALSE 75178
// begin result := i ;
75158: LD_ADDR_VAR 0 3
75162: PUSH
75163: LD_VAR 0 4
75167: ST_TO_ADDR
// dist := tmpDist ;
75168: LD_ADDR_VAR 0 5
75172: PUSH
75173: LD_VAR 0 6
75177: ST_TO_ADDR
// end ; end ;
75178: GO 75110
75180: POP
75181: POP
// end ;
75182: LD_VAR 0 3
75186: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
75187: LD_INT 0
75189: PPUSH
// uc_side := side ;
75190: LD_ADDR_OWVAR 20
75194: PUSH
75195: LD_VAR 0 1
75199: ST_TO_ADDR
// uc_nation := 3 ;
75200: LD_ADDR_OWVAR 21
75204: PUSH
75205: LD_INT 3
75207: ST_TO_ADDR
// vc_chassis := 25 ;
75208: LD_ADDR_OWVAR 37
75212: PUSH
75213: LD_INT 25
75215: ST_TO_ADDR
// vc_engine := engine_siberite ;
75216: LD_ADDR_OWVAR 39
75220: PUSH
75221: LD_INT 3
75223: ST_TO_ADDR
// vc_control := control_computer ;
75224: LD_ADDR_OWVAR 38
75228: PUSH
75229: LD_INT 3
75231: ST_TO_ADDR
// vc_weapon := 59 ;
75232: LD_ADDR_OWVAR 40
75236: PUSH
75237: LD_INT 59
75239: ST_TO_ADDR
// result := CreateVehicle ;
75240: LD_ADDR_VAR 0 5
75244: PUSH
75245: CALL_OW 45
75249: ST_TO_ADDR
// SetDir ( result , d ) ;
75250: LD_VAR 0 5
75254: PPUSH
75255: LD_VAR 0 4
75259: PPUSH
75260: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
75264: LD_VAR 0 5
75268: PPUSH
75269: LD_VAR 0 2
75273: PPUSH
75274: LD_VAR 0 3
75278: PPUSH
75279: LD_INT 0
75281: PPUSH
75282: CALL_OW 48
// end ;
75286: LD_VAR 0 5
75290: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
75291: LD_INT 0
75293: PPUSH
75294: PPUSH
75295: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
75296: LD_ADDR_VAR 0 2
75300: PUSH
75301: LD_INT 0
75303: PUSH
75304: LD_INT 0
75306: PUSH
75307: LD_INT 0
75309: PUSH
75310: LD_INT 0
75312: PUSH
75313: EMPTY
75314: LIST
75315: LIST
75316: LIST
75317: LIST
75318: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
75319: LD_VAR 0 1
75323: NOT
75324: PUSH
75325: LD_VAR 0 1
75329: PPUSH
75330: CALL_OW 264
75334: PUSH
75335: LD_INT 12
75337: PUSH
75338: LD_INT 51
75340: PUSH
75341: LD_INT 32
75343: PUSH
75344: LD_INT 89
75346: PUSH
75347: EMPTY
75348: LIST
75349: LIST
75350: LIST
75351: LIST
75352: IN
75353: NOT
75354: OR
75355: IFFALSE 75359
// exit ;
75357: GO 75457
// for i := 1 to 3 do
75359: LD_ADDR_VAR 0 3
75363: PUSH
75364: DOUBLE
75365: LD_INT 1
75367: DEC
75368: ST_TO_ADDR
75369: LD_INT 3
75371: PUSH
75372: FOR_TO
75373: IFFALSE 75455
// begin tmp := GetCargo ( cargo , i ) ;
75375: LD_ADDR_VAR 0 4
75379: PUSH
75380: LD_VAR 0 1
75384: PPUSH
75385: LD_VAR 0 3
75389: PPUSH
75390: CALL_OW 289
75394: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
75395: LD_ADDR_VAR 0 2
75399: PUSH
75400: LD_VAR 0 2
75404: PPUSH
75405: LD_VAR 0 3
75409: PPUSH
75410: LD_VAR 0 4
75414: PPUSH
75415: CALL_OW 1
75419: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
75420: LD_ADDR_VAR 0 2
75424: PUSH
75425: LD_VAR 0 2
75429: PPUSH
75430: LD_INT 4
75432: PPUSH
75433: LD_VAR 0 2
75437: PUSH
75438: LD_INT 4
75440: ARRAY
75441: PUSH
75442: LD_VAR 0 4
75446: PLUS
75447: PPUSH
75448: CALL_OW 1
75452: ST_TO_ADDR
// end ;
75453: GO 75372
75455: POP
75456: POP
// end ;
75457: LD_VAR 0 2
75461: RET
// export function Length ( array ) ; begin
75462: LD_INT 0
75464: PPUSH
// result := array + 0 ;
75465: LD_ADDR_VAR 0 2
75469: PUSH
75470: LD_VAR 0 1
75474: PUSH
75475: LD_INT 0
75477: PLUS
75478: ST_TO_ADDR
// end ;
75479: LD_VAR 0 2
75483: RET
// export function PrepareArray ( array ) ; begin
75484: LD_INT 0
75486: PPUSH
// result := array diff 0 ;
75487: LD_ADDR_VAR 0 2
75491: PUSH
75492: LD_VAR 0 1
75496: PUSH
75497: LD_INT 0
75499: DIFF
75500: ST_TO_ADDR
// if not result [ 1 ] then
75501: LD_VAR 0 2
75505: PUSH
75506: LD_INT 1
75508: ARRAY
75509: NOT
75510: IFFALSE 75530
// result := Delete ( result , 1 ) ;
75512: LD_ADDR_VAR 0 2
75516: PUSH
75517: LD_VAR 0 2
75521: PPUSH
75522: LD_INT 1
75524: PPUSH
75525: CALL_OW 3
75529: ST_TO_ADDR
// end ;
75530: LD_VAR 0 2
75534: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
75535: LD_INT 0
75537: PPUSH
75538: PPUSH
75539: PPUSH
75540: PPUSH
// sibRocketRange := 25 ;
75541: LD_ADDR_VAR 0 6
75545: PUSH
75546: LD_INT 25
75548: ST_TO_ADDR
// result := false ;
75549: LD_ADDR_VAR 0 4
75553: PUSH
75554: LD_INT 0
75556: ST_TO_ADDR
// for i := 0 to 5 do
75557: LD_ADDR_VAR 0 5
75561: PUSH
75562: DOUBLE
75563: LD_INT 0
75565: DEC
75566: ST_TO_ADDR
75567: LD_INT 5
75569: PUSH
75570: FOR_TO
75571: IFFALSE 75638
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
75573: LD_VAR 0 1
75577: PPUSH
75578: LD_VAR 0 5
75582: PPUSH
75583: LD_VAR 0 6
75587: PPUSH
75588: CALL_OW 272
75592: PPUSH
75593: LD_VAR 0 2
75597: PPUSH
75598: LD_VAR 0 5
75602: PPUSH
75603: LD_VAR 0 6
75607: PPUSH
75608: CALL_OW 273
75612: PPUSH
75613: LD_VAR 0 3
75617: PPUSH
75618: CALL_OW 309
75622: IFFALSE 75636
// begin result := true ;
75624: LD_ADDR_VAR 0 4
75628: PUSH
75629: LD_INT 1
75631: ST_TO_ADDR
// exit ;
75632: POP
75633: POP
75634: GO 75640
// end ;
75636: GO 75570
75638: POP
75639: POP
// end ; end_of_file
75640: LD_VAR 0 4
75644: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75645: LD_VAR 0 1
75649: PUSH
75650: LD_INT 200
75652: DOUBLE
75653: GREATEREQUAL
75654: IFFALSE 75662
75656: LD_INT 299
75658: DOUBLE
75659: LESSEQUAL
75660: IFTRUE 75664
75662: GO 75696
75664: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75665: LD_VAR 0 1
75669: PPUSH
75670: LD_VAR 0 2
75674: PPUSH
75675: LD_VAR 0 3
75679: PPUSH
75680: LD_VAR 0 4
75684: PPUSH
75685: LD_VAR 0 5
75689: PPUSH
75690: CALL 14715 0 5
75694: GO 75773
75696: LD_INT 300
75698: DOUBLE
75699: GREATEREQUAL
75700: IFFALSE 75708
75702: LD_INT 399
75704: DOUBLE
75705: LESSEQUAL
75706: IFTRUE 75710
75708: GO 75772
75710: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75711: LD_VAR 0 1
75715: PPUSH
75716: LD_VAR 0 2
75720: PPUSH
75721: LD_VAR 0 3
75725: PPUSH
75726: LD_VAR 0 4
75730: PPUSH
75731: LD_VAR 0 5
75735: PPUSH
75736: LD_VAR 0 6
75740: PPUSH
75741: LD_VAR 0 7
75745: PPUSH
75746: LD_VAR 0 8
75750: PPUSH
75751: LD_VAR 0 9
75755: PPUSH
75756: LD_VAR 0 10
75760: PPUSH
75761: LD_VAR 0 11
75765: PPUSH
75766: CALL 30986 0 11
75770: GO 75773
75772: POP
// end ;
75773: PPOPN 11
75775: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75776: LD_VAR 0 1
75780: PPUSH
75781: LD_VAR 0 2
75785: PPUSH
75786: LD_VAR 0 3
75790: PPUSH
75791: LD_VAR 0 4
75795: PPUSH
75796: LD_VAR 0 5
75800: PPUSH
75801: CALL 14451 0 5
// end ; end_of_file
75805: PPOPN 5
75807: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75808: LD_VAR 0 1
75812: PPUSH
75813: LD_VAR 0 2
75817: PPUSH
75818: LD_VAR 0 3
75822: PPUSH
75823: LD_VAR 0 4
75827: PPUSH
75828: LD_VAR 0 5
75832: PPUSH
75833: LD_VAR 0 6
75837: PPUSH
75838: CALL 18679 0 6
// end ;
75842: PPOPN 6
75844: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
75845: LD_INT 0
75847: PPUSH
// begin if not units then
75848: LD_VAR 0 1
75852: NOT
75853: IFFALSE 75857
// exit ;
75855: GO 75857
// end ;
75857: PPOPN 7
75859: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
75860: CALL 18650 0 0
// end ;
75864: PPOPN 1
75866: END
