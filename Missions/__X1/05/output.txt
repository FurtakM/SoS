// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 744 0 2
// PrepareArabian ;
  31: CALL 1437 0 0
// PrepareRussian ;
  35: CALL 3043 0 0
// Action ;
  39: CALL 8115 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: LD_INT 7
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_STRING 04_1_RuLabCaptured
 221: PPUSH
 222: LD_INT 0
 224: PPUSH
 225: CALL_OW 30
 229: ST_TO_ADDR
// captureCounter := 0 ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// flamethrowerBuilt := false ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 254: LD_ADDR_OWVAR 79
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// end ;
 262: LD_VAR 0 1
 266: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 267: LD_EXP 10
 271: NOT
 272: PUSH
 273: LD_EXP 9
 277: NOT
 278: AND
 279: PUSH
 280: LD_EXP 39
 284: NOT
 285: AND
 286: PUSH
 287: LD_EXP 40
 291: NOT
 292: AND
 293: IFFALSE 305
 295: GO 297
 297: DISABLE
// SetAchievement ( ACH_EXT ) ;
 298: LD_STRING ACH_EXT
 300: PPUSH
 301: CALL_OW 543
 305: END
// every 0 0$1 trigger captureCounter >= 6 do
 306: LD_EXP 18
 310: PUSH
 311: LD_INT 6
 313: GREATEREQUAL
 314: IFFALSE 326
 316: GO 318
 318: DISABLE
// SetAchievement ( ACH_KEY ) ;
 319: LD_STRING ACH_KEY
 321: PPUSH
 322: CALL_OW 543
 326: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 327: LD_EXP 19
 331: PUSH
 332: LD_INT 3
 334: GREATEREQUAL
 335: IFFALSE 347
 337: GO 339
 339: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 340: LD_STRING ACH_CHEM
 342: PPUSH
 343: CALL_OW 543
 347: END
// every 0 0$1 trigger debug do var i ;
 348: LD_EXP 1
 352: IFFALSE 436
 354: GO 356
 356: DISABLE
 357: LD_INT 0
 359: PPUSH
// begin enable ;
 360: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 361: LD_ADDR_VAR 0 1
 365: PUSH
 366: LD_INT 22
 368: PUSH
 369: LD_INT 2
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 3
 378: PUSH
 379: LD_INT 21
 381: PUSH
 382: LD_INT 3
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 434
// if GetLives ( i ) < 1000 then
 405: LD_VAR 0 1
 409: PPUSH
 410: CALL_OW 256
 414: PUSH
 415: LD_INT 1000
 417: LESS
 418: IFFALSE 432
// SetLives ( i , 1000 ) ;
 420: LD_VAR 0 1
 424: PPUSH
 425: LD_INT 1000
 427: PPUSH
 428: CALL_OW 234
 432: GO 402
 434: POP
 435: POP
// end ; end_of_file
 436: PPOPN 1
 438: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 439: LD_INT 0
 441: PPUSH
// uc_side := side ;
 442: LD_ADDR_OWVAR 20
 446: PUSH
 447: LD_VAR 0 1
 451: ST_TO_ADDR
// uc_nation := nation ;
 452: LD_ADDR_OWVAR 21
 456: PUSH
 457: LD_VAR 0 2
 461: ST_TO_ADDR
// vc_chassis := chassis ;
 462: LD_ADDR_OWVAR 37
 466: PUSH
 467: LD_VAR 0 3
 471: ST_TO_ADDR
// vc_engine := engine ;
 472: LD_ADDR_OWVAR 39
 476: PUSH
 477: LD_VAR 0 4
 481: ST_TO_ADDR
// vc_control := control ;
 482: LD_ADDR_OWVAR 38
 486: PUSH
 487: LD_VAR 0 5
 491: ST_TO_ADDR
// vc_weapon := weapon ;
 492: LD_ADDR_OWVAR 40
 496: PUSH
 497: LD_VAR 0 6
 501: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 502: LD_ADDR_OWVAR 41
 506: PUSH
 507: LD_VAR 0 7
 511: ST_TO_ADDR
// result := CreateVehicle ;
 512: LD_ADDR_VAR 0 8
 516: PUSH
 517: CALL_OW 45
 521: ST_TO_ADDR
// end ;
 522: LD_VAR 0 8
 526: RET
// export function SayX ( units , ident ) ; var i ; begin
 527: LD_INT 0
 529: PPUSH
 530: PPUSH
// result := false ;
 531: LD_ADDR_VAR 0 3
 535: PUSH
 536: LD_INT 0
 538: ST_TO_ADDR
// if not units then
 539: LD_VAR 0 1
 543: NOT
 544: IFFALSE 548
// exit ;
 546: GO 602
// for i in units do
 548: LD_ADDR_VAR 0 4
 552: PUSH
 553: LD_VAR 0 1
 557: PUSH
 558: FOR_IN
 559: IFFALSE 600
// if IsOk ( i ) then
 561: LD_VAR 0 4
 565: PPUSH
 566: CALL_OW 302
 570: IFFALSE 598
// begin Say ( i , ident ) ;
 572: LD_VAR 0 4
 576: PPUSH
 577: LD_VAR 0 2
 581: PPUSH
 582: CALL_OW 88
// result := i ;
 586: LD_ADDR_VAR 0 3
 590: PUSH
 591: LD_VAR 0 4
 595: ST_TO_ADDR
// break ;
 596: GO 600
// end ;
 598: GO 558
 600: POP
 601: POP
// end ;
 602: LD_VAR 0 3
 606: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 607: LD_INT 0
 609: PPUSH
 610: PPUSH
// InitUc ;
 611: CALL_OW 18
// InitHc ;
 615: CALL_OW 19
// uc_side := 0 ;
 619: LD_ADDR_OWVAR 20
 623: PUSH
 624: LD_INT 0
 626: ST_TO_ADDR
// uc_nation := 0 ;
 627: LD_ADDR_OWVAR 21
 631: PUSH
 632: LD_INT 0
 634: ST_TO_ADDR
// for i = 1 to amount do
 635: LD_ADDR_VAR 0 4
 639: PUSH
 640: DOUBLE
 641: LD_INT 1
 643: DEC
 644: ST_TO_ADDR
 645: LD_VAR 0 2
 649: PUSH
 650: FOR_TO
 651: IFFALSE 733
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 653: LD_ADDR_OWVAR 29
 657: PUSH
 658: LD_INT 9
 660: PPUSH
 661: LD_INT 12
 663: PPUSH
 664: CALL_OW 12
 668: PUSH
 669: LD_INT 9
 671: PPUSH
 672: LD_INT 12
 674: PPUSH
 675: CALL_OW 12
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 684: LD_ADDR_OWVAR 35
 688: PUSH
 689: LD_INT 1
 691: NEG
 692: PPUSH
 693: LD_INT 1
 695: PPUSH
 696: CALL_OW 12
 700: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 701: LD_INT 0
 703: PPUSH
 704: LD_INT 12
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 714: CALL_OW 44
 718: PPUSH
 719: LD_VAR 0 1
 723: PPUSH
 724: LD_INT 0
 726: PPUSH
 727: CALL_OW 49
// end ;
 731: GO 650
 733: POP
 734: POP
// InitHc ;
 735: CALL_OW 19
// end ;
 739: LD_VAR 0 3
 743: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 744: LD_INT 0
 746: PPUSH
 747: PPUSH
// uc_side := 0 ;
 748: LD_ADDR_OWVAR 20
 752: PUSH
 753: LD_INT 0
 755: ST_TO_ADDR
// uc_nation := 0 ;
 756: LD_ADDR_OWVAR 21
 760: PUSH
 761: LD_INT 0
 763: ST_TO_ADDR
// for i := 1 to 3 do
 764: LD_ADDR_VAR 0 4
 768: PUSH
 769: DOUBLE
 770: LD_INT 1
 772: DEC
 773: ST_TO_ADDR
 774: LD_INT 3
 776: PUSH
 777: FOR_TO
 778: IFFALSE 815
// begin hc_class := 21 ;
 780: LD_ADDR_OWVAR 28
 784: PUSH
 785: LD_INT 21
 787: ST_TO_ADDR
// hc_gallery :=  ;
 788: LD_ADDR_OWVAR 33
 792: PUSH
 793: LD_STRING 
 795: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 796: CALL_OW 44
 800: PPUSH
 801: LD_VAR 0 1
 805: PPUSH
 806: LD_INT 0
 808: PPUSH
 809: CALL_OW 49
// end ;
 813: GO 777
 815: POP
 816: POP
// for i := 1 to 3 do
 817: LD_ADDR_VAR 0 4
 821: PUSH
 822: DOUBLE
 823: LD_INT 1
 825: DEC
 826: ST_TO_ADDR
 827: LD_INT 3
 829: PUSH
 830: FOR_TO
 831: IFFALSE 868
// begin hc_class := 18 ;
 833: LD_ADDR_OWVAR 28
 837: PUSH
 838: LD_INT 18
 840: ST_TO_ADDR
// hc_gallery :=  ;
 841: LD_ADDR_OWVAR 33
 845: PUSH
 846: LD_STRING 
 848: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 849: CALL_OW 44
 853: PPUSH
 854: LD_VAR 0 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// end ;
 866: GO 830
 868: POP
 869: POP
// for i := 1 to 3 do
 870: LD_ADDR_VAR 0 4
 874: PUSH
 875: DOUBLE
 876: LD_INT 1
 878: DEC
 879: ST_TO_ADDR
 880: LD_INT 3
 882: PUSH
 883: FOR_TO
 884: IFFALSE 921
// begin hc_class := 13 ;
 886: LD_ADDR_OWVAR 28
 890: PUSH
 891: LD_INT 13
 893: ST_TO_ADDR
// hc_gallery :=  ;
 894: LD_ADDR_OWVAR 33
 898: PUSH
 899: LD_STRING 
 901: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 902: CALL_OW 44
 906: PPUSH
 907: LD_VAR 0 1
 911: PPUSH
 912: LD_INT 0
 914: PPUSH
 915: CALL_OW 49
// end ;
 919: GO 883
 921: POP
 922: POP
// for i := 1 to 4 do
 923: LD_ADDR_VAR 0 4
 927: PUSH
 928: DOUBLE
 929: LD_INT 1
 931: DEC
 932: ST_TO_ADDR
 933: LD_INT 4
 935: PUSH
 936: FOR_TO
 937: IFFALSE 974
// begin hc_class := class_frog ;
 939: LD_ADDR_OWVAR 28
 943: PUSH
 944: LD_INT 19
 946: ST_TO_ADDR
// hc_gallery :=  ;
 947: LD_ADDR_OWVAR 33
 951: PUSH
 952: LD_STRING 
 954: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 955: CALL_OW 44
 959: PPUSH
 960: LD_VAR 0 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ;
 972: GO 936
 974: POP
 975: POP
// end ;
 976: LD_VAR 0 3
 980: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 981: LD_INT 0
 983: PPUSH
 984: PPUSH
 985: PPUSH
// if not observer or not unit then
 986: LD_VAR 0 1
 990: NOT
 991: PUSH
 992: LD_VAR 0 2
 996: NOT
 997: OR
 998: IFFALSE 1002
// exit ;
1000: GO 1050
// if not See ( GetSide ( observer ) , unit ) then
1002: LD_VAR 0 1
1006: PPUSH
1007: CALL_OW 255
1011: PPUSH
1012: LD_VAR 0 2
1016: PPUSH
1017: CALL_OW 292
1021: NOT
1022: IFFALSE 1026
// exit ;
1024: GO 1050
// result := GetDistUnits ( observer , unit ) < 12 ;
1026: LD_ADDR_VAR 0 3
1030: PUSH
1031: LD_VAR 0 1
1035: PPUSH
1036: LD_VAR 0 2
1040: PPUSH
1041: CALL_OW 296
1045: PUSH
1046: LD_INT 12
1048: LESS
1049: ST_TO_ADDR
// end ;
1050: LD_VAR 0 3
1054: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1055: LD_INT 0
1057: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1058: LD_VAR 0 2
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PPUSH
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 2
1074: ARRAY
1075: PPUSH
1076: CALL_OW 488
1080: PUSH
1081: LD_VAR 0 2
1085: PUSH
1086: LD_INT 1
1088: ARRAY
1089: PPUSH
1090: LD_VAR 0 2
1094: PUSH
1095: LD_INT 2
1097: ARRAY
1098: PPUSH
1099: CALL_OW 428
1103: PUSH
1104: LD_INT 0
1106: EQUAL
1107: AND
1108: IFFALSE 1142
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1110: LD_VAR 0 1
1114: PPUSH
1115: LD_VAR 0 2
1119: PUSH
1120: LD_INT 1
1122: ARRAY
1123: PPUSH
1124: LD_VAR 0 2
1128: PUSH
1129: LD_INT 2
1131: ARRAY
1132: PPUSH
1133: LD_VAR 0 3
1137: PPUSH
1138: CALL_OW 48
// end ;
1142: LD_VAR 0 4
1146: RET
// export function ReverseArray ( array ) ; var i ; begin
1147: LD_INT 0
1149: PPUSH
1150: PPUSH
// if not array then
1151: LD_VAR 0 1
1155: NOT
1156: IFFALSE 1160
// exit ;
1158: GO 1218
// result := [ ] ;
1160: LD_ADDR_VAR 0 2
1164: PUSH
1165: EMPTY
1166: ST_TO_ADDR
// for i := 1 to array do
1167: LD_ADDR_VAR 0 3
1171: PUSH
1172: DOUBLE
1173: LD_INT 1
1175: DEC
1176: ST_TO_ADDR
1177: LD_VAR 0 1
1181: PUSH
1182: FOR_TO
1183: IFFALSE 1216
// result := Insert ( result , 1 , array [ i ] ) ;
1185: LD_ADDR_VAR 0 2
1189: PUSH
1190: LD_VAR 0 2
1194: PPUSH
1195: LD_INT 1
1197: PPUSH
1198: LD_VAR 0 1
1202: PUSH
1203: LD_VAR 0 3
1207: ARRAY
1208: PPUSH
1209: CALL_OW 2
1213: ST_TO_ADDR
1214: GO 1182
1216: POP
1217: POP
// end ;
1218: LD_VAR 0 2
1222: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1223: LD_INT 0
1225: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1226: LD_VAR 0 1
1230: PPUSH
1231: LD_VAR 0 2
1235: PPUSH
1236: LD_VAR 0 3
1240: PPUSH
1241: LD_VAR 0 4
1245: PPUSH
1246: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1250: LD_VAR 0 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: LD_VAR 0 3
1264: PPUSH
1265: CALL_OW 331
// end ;
1269: LD_VAR 0 5
1273: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1274: LD_INT 0
1276: PPUSH
// if not units then
1277: LD_VAR 0 1
1281: NOT
1282: IFFALSE 1286
// exit ;
1284: GO 1369
// result := true ;
1286: LD_ADDR_VAR 0 4
1290: PUSH
1291: LD_INT 1
1293: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1294: LD_VAR 0 1
1298: PPUSH
1299: LD_INT 26
1301: PUSH
1302: LD_INT 1
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: PPUSH
1309: CALL_OW 72
1313: PUSH
1314: LD_INT 1
1316: ARRAY
1317: PPUSH
1318: LD_VAR 0 2
1322: PPUSH
1323: CALL_OW 88
1327: NOT
1328: IFFALSE 1369
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1330: LD_ADDR_VAR 0 4
1334: PUSH
1335: LD_VAR 0 1
1339: PPUSH
1340: LD_INT 26
1342: PUSH
1343: LD_INT 2
1345: PUSH
1346: EMPTY
1347: LIST
1348: LIST
1349: PPUSH
1350: CALL_OW 72
1354: PUSH
1355: LD_INT 1
1357: ARRAY
1358: PPUSH
1359: LD_VAR 0 3
1363: PPUSH
1364: CALL_OW 88
1368: ST_TO_ADDR
// end ;
1369: LD_VAR 0 4
1373: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1374: LD_INT 0
1376: PPUSH
1377: PPUSH
// if not group then
1378: LD_VAR 0 2
1382: NOT
1383: IFFALSE 1387
// exit ;
1385: GO 1432
// for i in group do
1387: LD_ADDR_VAR 0 4
1391: PUSH
1392: LD_VAR 0 2
1396: PUSH
1397: FOR_IN
1398: IFFALSE 1430
// if See ( side , i ) then
1400: LD_VAR 0 1
1404: PPUSH
1405: LD_VAR 0 4
1409: PPUSH
1410: CALL_OW 292
1414: IFFALSE 1428
// begin result := true ;
1416: LD_ADDR_VAR 0 3
1420: PUSH
1421: LD_INT 1
1423: ST_TO_ADDR
// exit ;
1424: POP
1425: POP
1426: GO 1432
// end ;
1428: GO 1397
1430: POP
1431: POP
// end ; end_of_file
1432: LD_VAR 0 3
1436: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1437: LD_INT 0
1439: PPUSH
1440: PPUSH
// uc_side := 2 ;
1441: LD_ADDR_OWVAR 20
1445: PUSH
1446: LD_INT 2
1448: ST_TO_ADDR
// uc_nation := 2 ;
1449: LD_ADDR_OWVAR 21
1453: PUSH
1454: LD_INT 2
1456: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1457: LD_ADDR_EXP 21
1461: PUSH
1462: LD_STRING Heike
1464: PPUSH
1465: LD_EXP 1
1469: NOT
1470: PPUSH
1471: LD_EXP 2
1475: PPUSH
1476: CALL 33492 0 3
1480: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1481: LD_ADDR_EXP 24
1485: PUSH
1486: LD_STRING Ibrahim
1488: PPUSH
1489: LD_EXP 1
1493: NOT
1494: PPUSH
1495: LD_EXP 2
1499: PPUSH
1500: CALL 33492 0 3
1504: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1505: LD_ADDR_EXP 22
1509: PUSH
1510: LD_STRING Givi
1512: PPUSH
1513: LD_EXP 1
1517: NOT
1518: PPUSH
1519: LD_EXP 2
1523: PPUSH
1524: CALL 33492 0 3
1528: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1529: LD_ADDR_EXP 25
1533: PUSH
1534: LD_STRING Kamil
1536: PPUSH
1537: LD_EXP 1
1541: NOT
1542: PPUSH
1543: LD_EXP 2
1547: PPUSH
1548: CALL 33492 0 3
1552: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1553: LD_ADDR_EXP 26
1557: PUSH
1558: LD_STRING Kaia
1560: PPUSH
1561: LD_EXP 1
1565: NOT
1566: PPUSH
1567: LD_EXP 2
1571: PPUSH
1572: CALL 33492 0 3
1576: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1577: LD_ADDR_EXP 27
1581: PUSH
1582: LD_STRING Sophia
1584: PPUSH
1585: LD_EXP 1
1589: NOT
1590: PPUSH
1591: LD_EXP 2
1595: PPUSH
1596: CALL 33492 0 3
1600: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1601: LD_ADDR_EXP 28
1605: PUSH
1606: LD_STRING Markov
1608: PPUSH
1609: LD_EXP 1
1613: NOT
1614: PPUSH
1615: LD_EXP 2
1619: PPUSH
1620: CALL 33492 0 3
1624: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1625: LD_ADDR_EXP 33
1629: PUSH
1630: LD_STRING Aviradze
1632: PPUSH
1633: LD_EXP 1
1637: NOT
1638: PPUSH
1639: LD_EXP 2
1643: PPUSH
1644: CALL 33492 0 3
1648: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1649: LD_ADDR_EXP 32
1653: PUSH
1654: LD_STRING Kurt
1656: PPUSH
1657: LD_EXP 1
1661: NOT
1662: PPUSH
1663: LD_EXP 2
1667: PPUSH
1668: CALL 33492 0 3
1672: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1673: LD_ADDR_EXP 23
1677: PUSH
1678: LD_STRING Mike
1680: PPUSH
1681: LD_EXP 1
1685: NOT
1686: PPUSH
1687: LD_EXP 2
1691: PPUSH
1692: CALL 33492 0 3
1696: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1697: LD_ADDR_EXP 30
1701: PUSH
1702: LD_STRING Olaf
1704: PPUSH
1705: LD_INT 0
1707: PPUSH
1708: LD_STRING 
1710: PPUSH
1711: CALL 33492 0 3
1715: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1716: LD_ADDR_EXP 34
1720: PUSH
1721: LD_STRING 04_2_others
1723: PPUSH
1724: CALL_OW 31
1728: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1729: LD_ADDR_EXP 36
1733: PUSH
1734: LD_STRING 04_2_apes
1736: PPUSH
1737: CALL_OW 31
1741: ST_TO_ADDR
// if hasFlamethrower then
1742: LD_EXP 3
1746: IFFALSE 1981
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1748: LD_INT 70
1750: PPUSH
1751: LD_INT 2
1753: PPUSH
1754: LD_INT 2
1756: PPUSH
1757: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1761: LD_ADDR_EXP 35
1765: PUSH
1766: LD_INT 13
1768: PUSH
1769: LD_INT 1
1771: PUSH
1772: LD_INT 1
1774: PUSH
1775: LD_INT 27
1777: PUSH
1778: LD_INT 2
1780: PUSH
1781: LD_INT 1000
1783: PUSH
1784: LD_INT 0
1786: PUSH
1787: LD_INT 0
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: PUSH
1803: LD_INT 13
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: LD_INT 1
1811: PUSH
1812: LD_INT 25
1814: PUSH
1815: LD_INT 2
1817: PUSH
1818: LD_INT 1000
1820: PUSH
1821: LD_INT 0
1823: PUSH
1824: LD_INT 0
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: PUSH
1840: LD_INT 13
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: LD_INT 1
1848: PUSH
1849: LD_INT 26
1851: PUSH
1852: LD_INT 2
1854: PUSH
1855: LD_INT 1000
1857: PUSH
1858: LD_INT 0
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 13
1879: PUSH
1880: LD_INT 1
1882: PUSH
1883: LD_INT 1
1885: PUSH
1886: LD_INT 27
1888: PUSH
1889: LD_INT 2
1891: PUSH
1892: LD_INT 1000
1894: PUSH
1895: LD_INT 0
1897: PUSH
1898: LD_INT 0
1900: PUSH
1901: EMPTY
1902: LIST
1903: LIST
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 13
1916: PUSH
1917: LD_INT 1
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: LD_INT 32
1925: PUSH
1926: LD_INT 2
1928: PUSH
1929: LD_INT 1000
1931: PUSH
1932: LD_INT 0
1934: PUSH
1935: LD_INT 60
1937: PUSH
1938: LD_INT 40
1940: PUSH
1941: LD_INT 20
1943: PUSH
1944: LD_INT 10
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_OWVAR 67
1957: ARRAY
1958: PUSH
1959: EMPTY
1960: LIST
1961: LIST
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: ST_TO_ADDR
// end else
1979: GO 2199
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1981: LD_ADDR_EXP 35
1985: PUSH
1986: LD_INT 13
1988: PUSH
1989: LD_INT 1
1991: PUSH
1992: LD_INT 1
1994: PUSH
1995: LD_INT 25
1997: PUSH
1998: LD_INT 2
2000: PUSH
2001: LD_INT 1000
2003: PUSH
2004: LD_INT 0
2006: PUSH
2007: LD_INT 0
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: PUSH
2023: LD_INT 13
2025: PUSH
2026: LD_INT 1
2028: PUSH
2029: LD_INT 1
2031: PUSH
2032: LD_INT 27
2034: PUSH
2035: LD_INT 2
2037: PUSH
2038: LD_INT 1000
2040: PUSH
2041: LD_INT 0
2043: PUSH
2044: LD_INT 0
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: LD_INT 13
2062: PUSH
2063: LD_INT 1
2065: PUSH
2066: LD_INT 1
2068: PUSH
2069: LD_INT 24
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: LD_INT 1000
2077: PUSH
2078: LD_INT 0
2080: PUSH
2081: LD_INT 0
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 13
2099: PUSH
2100: LD_INT 1
2102: PUSH
2103: LD_INT 1
2105: PUSH
2106: LD_INT 27
2108: PUSH
2109: LD_INT 2
2111: PUSH
2112: LD_INT 1000
2114: PUSH
2115: LD_INT 0
2117: PUSH
2118: LD_INT 0
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: LIST
2133: PUSH
2134: LD_INT 13
2136: PUSH
2137: LD_INT 1
2139: PUSH
2140: LD_INT 1
2142: PUSH
2143: LD_INT 32
2145: PUSH
2146: LD_INT 2
2148: PUSH
2149: LD_INT 1000
2151: PUSH
2152: LD_INT 0
2154: PUSH
2155: LD_INT 50
2157: PUSH
2158: LD_INT 30
2160: PUSH
2161: LD_INT 20
2163: PUSH
2164: LD_INT 10
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_OWVAR 67
2177: ARRAY
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: ST_TO_ADDR
// end ; uc_side := 5 ;
2199: LD_ADDR_OWVAR 20
2203: PUSH
2204: LD_INT 5
2206: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2207: LD_ADDR_EXP 29
2211: PUSH
2212: LD_STRING Abdul
2214: PPUSH
2215: LD_INT 0
2217: PPUSH
2218: LD_STRING 
2220: PPUSH
2221: CALL 33492 0 3
2225: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2226: LD_ADDR_EXP 31
2230: PUSH
2231: LD_STRING Omar
2233: PPUSH
2234: LD_INT 0
2236: PPUSH
2237: LD_STRING 
2239: PPUSH
2240: CALL 33492 0 3
2244: ST_TO_ADDR
// end ;
2245: LD_VAR 0 1
2249: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2250: LD_INT 0
2252: PPUSH
2253: PPUSH
2254: PPUSH
2255: PPUSH
2256: PPUSH
// pfx := 04_1_ ;
2257: LD_ADDR_VAR 0 2
2261: PUSH
2262: LD_STRING 04_1_
2264: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2265: LD_INT 35
2267: PPUSH
2268: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
2272: LD_INT 3
2274: PPUSH
2275: LD_INT 2
2277: PPUSH
2278: CALL_OW 428
2282: NOT
2283: IFFALSE 2265
// tmp := [ ] ;
2285: LD_ADDR_VAR 0 4
2289: PUSH
2290: EMPTY
2291: ST_TO_ADDR
// uc_side := 5 ;
2292: LD_ADDR_OWVAR 20
2296: PUSH
2297: LD_INT 5
2299: ST_TO_ADDR
// uc_nation := 2 ;
2300: LD_ADDR_OWVAR 21
2304: PUSH
2305: LD_INT 2
2307: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2308: LD_ADDR_EXP 33
2312: PUSH
2313: LD_STRING Aviradze_L
2315: PPUSH
2316: LD_EXP 1
2320: NOT
2321: PPUSH
2322: LD_VAR 0 2
2326: PPUSH
2327: CALL 33492 0 3
2331: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2332: LD_EXP 33
2336: PPUSH
2337: LD_INT 2
2339: PPUSH
2340: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2344: LD_EXP 33
2348: PPUSH
2349: LD_INT 14
2351: PPUSH
2352: LD_INT 0
2354: PPUSH
2355: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
2359: LD_EXP 33
2363: PPUSH
2364: LD_INT 8
2366: PPUSH
2367: LD_INT 6
2369: PPUSH
2370: CALL_OW 111
// AddComHold ( Aviradze ) ;
2374: LD_EXP 33
2378: PPUSH
2379: CALL_OW 200
// tmp := [ Aviradze ] ;
2383: LD_ADDR_VAR 0 4
2387: PUSH
2388: LD_EXP 33
2392: PUSH
2393: EMPTY
2394: LIST
2395: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2396: LD_INT 70
2398: PPUSH
2399: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2403: LD_STRING Ibrahim_L
2405: PPUSH
2406: LD_EXP 1
2410: NOT
2411: PPUSH
2412: LD_VAR 0 2
2416: PPUSH
2417: CALL 33492 0 3
2421: IFFALSE 2521
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2423: LD_ADDR_EXP 24
2427: PUSH
2428: LD_STRING Ibrahim_L
2430: PPUSH
2431: LD_EXP 1
2435: NOT
2436: PPUSH
2437: LD_VAR 0 2
2441: PPUSH
2442: CALL 33492 0 3
2446: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2447: LD_EXP 24
2451: PPUSH
2452: LD_INT 2
2454: PPUSH
2455: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2459: LD_EXP 24
2463: PPUSH
2464: LD_INT 14
2466: PPUSH
2467: LD_INT 0
2469: PPUSH
2470: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
2474: LD_EXP 24
2478: PPUSH
2479: LD_INT 8
2481: PPUSH
2482: LD_INT 7
2484: PPUSH
2485: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2489: LD_EXP 24
2493: PPUSH
2494: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2498: LD_ADDR_VAR 0 4
2502: PUSH
2503: LD_VAR 0 4
2507: PUSH
2508: LD_EXP 24
2512: ADD
2513: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2514: LD_INT 70
2516: PPUSH
2517: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2521: LD_STRING Kaia_L
2523: PPUSH
2524: LD_EXP 1
2528: NOT
2529: PPUSH
2530: LD_VAR 0 2
2534: PPUSH
2535: CALL 33492 0 3
2539: IFFALSE 2639
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2541: LD_ADDR_EXP 26
2545: PUSH
2546: LD_STRING Kaia_L
2548: PPUSH
2549: LD_EXP 1
2553: NOT
2554: PPUSH
2555: LD_VAR 0 2
2559: PPUSH
2560: CALL 33492 0 3
2564: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2565: LD_EXP 26
2569: PPUSH
2570: LD_INT 2
2572: PPUSH
2573: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2577: LD_EXP 26
2581: PPUSH
2582: LD_INT 14
2584: PPUSH
2585: LD_INT 0
2587: PPUSH
2588: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
2592: LD_EXP 26
2596: PPUSH
2597: LD_INT 8
2599: PPUSH
2600: LD_INT 7
2602: PPUSH
2603: CALL_OW 111
// AddComHold ( Kaia ) ;
2607: LD_EXP 26
2611: PPUSH
2612: CALL_OW 200
// tmp := tmp ^ Kaia ;
2616: LD_ADDR_VAR 0 4
2620: PUSH
2621: LD_VAR 0 4
2625: PUSH
2626: LD_EXP 26
2630: ADD
2631: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2632: LD_INT 70
2634: PPUSH
2635: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2639: LD_STRING Kamil_L
2641: PPUSH
2642: LD_EXP 1
2646: NOT
2647: PPUSH
2648: LD_VAR 0 2
2652: PPUSH
2653: CALL 33492 0 3
2657: IFFALSE 2757
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2659: LD_ADDR_EXP 25
2663: PUSH
2664: LD_STRING Kamil_L
2666: PPUSH
2667: LD_EXP 1
2671: NOT
2672: PPUSH
2673: LD_VAR 0 2
2677: PPUSH
2678: CALL 33492 0 3
2682: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2683: LD_EXP 25
2687: PPUSH
2688: LD_INT 2
2690: PPUSH
2691: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2695: LD_EXP 25
2699: PPUSH
2700: LD_INT 14
2702: PPUSH
2703: LD_INT 0
2705: PPUSH
2706: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
2710: LD_EXP 25
2714: PPUSH
2715: LD_INT 8
2717: PPUSH
2718: LD_INT 7
2720: PPUSH
2721: CALL_OW 111
// AddComHold ( Kamil ) ;
2725: LD_EXP 25
2729: PPUSH
2730: CALL_OW 200
// tmp := tmp ^ Kamil ;
2734: LD_ADDR_VAR 0 4
2738: PUSH
2739: LD_VAR 0 4
2743: PUSH
2744: LD_EXP 25
2748: ADD
2749: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2750: LD_INT 70
2752: PPUSH
2753: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2757: LD_STRING Sophia_L
2759: PPUSH
2760: LD_EXP 1
2764: NOT
2765: PPUSH
2766: LD_VAR 0 2
2770: PPUSH
2771: CALL 33492 0 3
2775: IFFALSE 2875
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2777: LD_ADDR_EXP 27
2781: PUSH
2782: LD_STRING Sophia_L
2784: PPUSH
2785: LD_EXP 1
2789: NOT
2790: PPUSH
2791: LD_VAR 0 2
2795: PPUSH
2796: CALL 33492 0 3
2800: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2801: LD_EXP 27
2805: PPUSH
2806: LD_INT 2
2808: PPUSH
2809: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2813: LD_EXP 27
2817: PPUSH
2818: LD_INT 14
2820: PPUSH
2821: LD_INT 0
2823: PPUSH
2824: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
2828: LD_EXP 27
2832: PPUSH
2833: LD_INT 9
2835: PPUSH
2836: LD_INT 6
2838: PPUSH
2839: CALL_OW 111
// AddComHold ( Sophia ) ;
2843: LD_EXP 27
2847: PPUSH
2848: CALL_OW 200
// tmp := tmp ^ Sophia ;
2852: LD_ADDR_VAR 0 4
2856: PUSH
2857: LD_VAR 0 4
2861: PUSH
2862: LD_EXP 27
2866: ADD
2867: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2868: LD_INT 70
2870: PPUSH
2871: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2875: LD_ADDR_VAR 0 5
2879: PUSH
2880: LD_STRING 04_1_others_L
2882: PPUSH
2883: CALL_OW 31
2887: ST_TO_ADDR
// if tmp2 then
2888: LD_VAR 0 5
2892: IFFALSE 2989
// for i in tmp2 do
2894: LD_ADDR_VAR 0 3
2898: PUSH
2899: LD_VAR 0 5
2903: PUSH
2904: FOR_IN
2905: IFFALSE 2987
// begin SetDir ( i , 2 ) ;
2907: LD_VAR 0 3
2911: PPUSH
2912: LD_INT 2
2914: PPUSH
2915: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2919: LD_VAR 0 3
2923: PPUSH
2924: LD_INT 14
2926: PPUSH
2927: LD_INT 0
2929: PPUSH
2930: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2934: LD_ADDR_EXP 34
2938: PUSH
2939: LD_EXP 34
2943: PPUSH
2944: LD_EXP 34
2948: PUSH
2949: LD_INT 1
2951: PLUS
2952: PPUSH
2953: LD_VAR 0 3
2957: PPUSH
2958: CALL_OW 1
2962: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2963: LD_VAR 0 3
2967: PPUSH
2968: LD_INT 17
2970: PPUSH
2971: LD_INT 14
2973: PPUSH
2974: CALL_OW 111
// wait ( 0 0$2 ) ;
2978: LD_INT 70
2980: PPUSH
2981: CALL_OW 67
// end ;
2985: GO 2904
2987: POP
2988: POP
// for i in tmp union tmp2 do
2989: LD_ADDR_VAR 0 3
2993: PUSH
2994: LD_VAR 0 4
2998: PUSH
2999: LD_VAR 0 5
3003: UNION
3004: PUSH
3005: FOR_IN
3006: IFFALSE 3036
// begin SetSide ( i , 2 ) ;
3008: LD_VAR 0 3
3012: PPUSH
3013: LD_INT 2
3015: PPUSH
3016: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
3020: LD_VAR 0 3
3024: PPUSH
3025: LD_EXP 21
3029: PPUSH
3030: CALL_OW 112
// end ;
3034: GO 3005
3036: POP
3037: POP
// end ; end_of_file
3038: LD_VAR 0 1
3042: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
3043: LD_INT 0
3045: PPUSH
3046: PPUSH
3047: PPUSH
// uc_side := 3 ;
3048: LD_ADDR_OWVAR 20
3052: PUSH
3053: LD_INT 3
3055: ST_TO_ADDR
// uc_nation := 3 ;
3056: LD_ADDR_OWVAR 21
3060: PUSH
3061: LD_INT 3
3063: ST_TO_ADDR
// crossRoadGuard := [ ] ;
3064: LD_ADDR_EXP 37
3068: PUSH
3069: EMPTY
3070: ST_TO_ADDR
// oilBaseGuard := [ ] ;
3071: LD_ADDR_EXP 38
3075: PUSH
3076: EMPTY
3077: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3078: LD_ADDR_EXP 41
3082: PUSH
3083: EMPTY
3084: ST_TO_ADDR
// for i := 1 to 2 do
3085: LD_ADDR_VAR 0 2
3089: PUSH
3090: DOUBLE
3091: LD_INT 1
3093: DEC
3094: ST_TO_ADDR
3095: LD_INT 2
3097: PUSH
3098: FOR_TO
3099: IFFALSE 3238
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3101: LD_INT 0
3103: PPUSH
3104: LD_INT 1
3106: PPUSH
3107: LD_INT 3
3109: PUSH
3110: LD_INT 4
3112: PUSH
3113: LD_INT 5
3115: PUSH
3116: LD_INT 6
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: PUSH
3125: LD_OWVAR 67
3129: ARRAY
3130: PPUSH
3131: CALL_OW 380
// un := CreateHuman ;
3135: LD_ADDR_VAR 0 3
3139: PUSH
3140: CALL_OW 44
3144: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3145: LD_ADDR_EXP 37
3149: PUSH
3150: LD_EXP 37
3154: PPUSH
3155: LD_EXP 37
3159: PUSH
3160: LD_INT 1
3162: PLUS
3163: PPUSH
3164: LD_VAR 0 3
3168: PPUSH
3169: CALL_OW 1
3173: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3174: LD_VAR 0 3
3178: PPUSH
3179: LD_INT 100
3181: PPUSH
3182: LD_INT 63
3184: PPUSH
3185: LD_INT 3
3187: PPUSH
3188: LD_INT 0
3190: PPUSH
3191: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3195: LD_VAR 0 3
3199: PPUSH
3200: LD_INT 97
3202: PPUSH
3203: LD_INT 64
3205: PPUSH
3206: CALL_OW 428
3210: PUSH
3211: LD_INT 98
3213: PPUSH
3214: LD_INT 58
3216: PPUSH
3217: CALL_OW 428
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: LD_VAR 0 2
3230: ARRAY
3231: PPUSH
3232: CALL_OW 120
// end ;
3236: GO 3098
3238: POP
3239: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3240: LD_INT 51
3242: PPUSH
3243: LD_INT 77
3245: PPUSH
3246: CALL_OW 428
3250: PPUSH
3251: CALL_OW 274
3255: PPUSH
3256: LD_INT 1
3258: PPUSH
3259: LD_INT 120
3261: PPUSH
3262: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3266: LD_INT 10
3268: PPUSH
3269: CALL_OW 274
3273: PPUSH
3274: LD_INT 2
3276: PPUSH
3277: LD_INT 300
3279: PPUSH
3280: CALL_OW 277
// for i := 1 to 2 do
3284: LD_ADDR_VAR 0 2
3288: PUSH
3289: DOUBLE
3290: LD_INT 1
3292: DEC
3293: ST_TO_ADDR
3294: LD_INT 2
3296: PUSH
3297: FOR_TO
3298: IFFALSE 3416
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3300: LD_INT 0
3302: PPUSH
3303: LD_INT 1
3305: PPUSH
3306: LD_INT 3
3308: PUSH
3309: LD_INT 4
3311: PUSH
3312: LD_INT 5
3314: PUSH
3315: LD_INT 6
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: PUSH
3324: LD_OWVAR 67
3328: ARRAY
3329: PPUSH
3330: CALL_OW 380
// un := CreateHuman ;
3334: LD_ADDR_VAR 0 3
3338: PUSH
3339: CALL_OW 44
3343: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3344: LD_ADDR_EXP 38
3348: PUSH
3349: LD_EXP 38
3353: PPUSH
3354: LD_EXP 38
3358: PUSH
3359: LD_INT 1
3361: PLUS
3362: PPUSH
3363: LD_VAR 0 3
3367: PPUSH
3368: CALL_OW 1
3372: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3373: LD_VAR 0 3
3377: PPUSH
3378: LD_INT 198
3380: PPUSH
3381: LD_INT 106
3383: PPUSH
3384: CALL_OW 428
3388: PUSH
3389: LD_INT 205
3391: PPUSH
3392: LD_INT 114
3394: PPUSH
3395: CALL_OW 428
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: LD_VAR 0 2
3408: ARRAY
3409: PPUSH
3410: CALL_OW 52
// end ;
3414: GO 3297
3416: POP
3417: POP
// for i := 1 to 2 do
3418: LD_ADDR_VAR 0 2
3422: PUSH
3423: DOUBLE
3424: LD_INT 1
3426: DEC
3427: ST_TO_ADDR
3428: LD_INT 2
3430: PUSH
3431: FOR_TO
3432: IFFALSE 3509
// begin PrepareHuman ( false , 2 , 3 ) ;
3434: LD_INT 0
3436: PPUSH
3437: LD_INT 2
3439: PPUSH
3440: LD_INT 3
3442: PPUSH
3443: CALL_OW 380
// un := CreateHuman ;
3447: LD_ADDR_VAR 0 3
3451: PUSH
3452: CALL_OW 44
3456: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3457: LD_ADDR_EXP 38
3461: PUSH
3462: LD_EXP 38
3466: PPUSH
3467: LD_EXP 38
3471: PUSH
3472: LD_INT 1
3474: PLUS
3475: PPUSH
3476: LD_VAR 0 3
3480: PPUSH
3481: CALL_OW 1
3485: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3486: LD_VAR 0 3
3490: PPUSH
3491: LD_INT 204
3493: PPUSH
3494: LD_INT 108
3496: PPUSH
3497: LD_INT 2
3499: PPUSH
3500: LD_INT 0
3502: PPUSH
3503: CALL_OW 50
// end ;
3507: GO 3431
3509: POP
3510: POP
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
3511: LD_ADDR_VAR 0 2
3515: PUSH
3516: DOUBLE
3517: LD_INT 1
3519: DEC
3520: ST_TO_ADDR
3521: LD_INT 4
3523: PUSH
3524: LD_INT 5
3526: PUSH
3527: LD_INT 6
3529: PUSH
3530: LD_INT 7
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: PUSH
3539: LD_OWVAR 67
3543: ARRAY
3544: PUSH
3545: FOR_TO
3546: IFFALSE 3692
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3548: LD_INT 0
3550: PPUSH
3551: LD_INT 1
3553: PUSH
3554: LD_INT 1
3556: PUSH
3557: LD_INT 2
3559: PUSH
3560: LD_INT 4
3562: PUSH
3563: LD_INT 1
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: PUSH
3573: LD_INT 1
3575: PPUSH
3576: LD_INT 5
3578: PPUSH
3579: CALL_OW 12
3583: ARRAY
3584: PPUSH
3585: LD_INT 3
3587: PUSH
3588: LD_INT 4
3590: PUSH
3591: LD_INT 5
3593: PUSH
3594: LD_INT 5
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: PUSH
3603: LD_OWVAR 67
3607: ARRAY
3608: PPUSH
3609: CALL_OW 380
// un := CreateHuman ;
3613: LD_ADDR_VAR 0 3
3617: PUSH
3618: CALL_OW 44
3622: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroupArea , false ) then
3623: LD_VAR 0 3
3627: PPUSH
3628: LD_INT 10
3630: PPUSH
3631: LD_INT 0
3633: PPUSH
3634: CALL 69090 0 3
3638: IFFALSE 3690
// begin ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3640: LD_ADDR_EXP 39
3644: PUSH
3645: LD_EXP 39
3649: PPUSH
3650: LD_EXP 39
3654: PUSH
3655: LD_INT 1
3657: PLUS
3658: PPUSH
3659: LD_VAR 0 3
3663: PPUSH
3664: CALL_OW 1
3668: ST_TO_ADDR
// if Prob ( 50 ) then
3669: LD_INT 50
3671: PPUSH
3672: CALL_OW 13
3676: IFFALSE 3690
// ForceSleep ( un , true ) ;
3678: LD_VAR 0 3
3682: PPUSH
3683: LD_INT 1
3685: PPUSH
3686: CALL_OW 585
// end ; end ;
3690: GO 3545
3692: POP
3693: POP
// for i := 1 to 3 do
3694: LD_ADDR_VAR 0 2
3698: PUSH
3699: DOUBLE
3700: LD_INT 1
3702: DEC
3703: ST_TO_ADDR
3704: LD_INT 3
3706: PUSH
3707: FOR_TO
3708: IFFALSE 3802
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
3710: LD_INT 0
3712: PPUSH
3713: LD_INT 1
3715: PPUSH
3716: LD_INT 3
3718: PUSH
3719: LD_INT 4
3721: PUSH
3722: LD_INT 4
3724: PUSH
3725: LD_INT 5
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: PUSH
3734: LD_OWVAR 67
3738: ARRAY
3739: PPUSH
3740: CALL_OW 380
// un := CreateHuman ;
3744: LD_ADDR_VAR 0 3
3748: PUSH
3749: CALL_OW 44
3753: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3754: LD_VAR 0 3
3758: PPUSH
3759: LD_INT 11
3761: PPUSH
3762: LD_INT 0
3764: PPUSH
3765: CALL 69090 0 3
3769: IFFALSE 3800
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3771: LD_ADDR_EXP 39
3775: PUSH
3776: LD_EXP 39
3780: PPUSH
3781: LD_EXP 39
3785: PUSH
3786: LD_INT 1
3788: PLUS
3789: PPUSH
3790: LD_VAR 0 3
3794: PPUSH
3795: CALL_OW 1
3799: ST_TO_ADDR
// end ;
3800: GO 3707
3802: POP
3803: POP
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3804: LD_ADDR_VAR 0 2
3808: PUSH
3809: DOUBLE
3810: LD_INT 1
3812: DEC
3813: ST_TO_ADDR
3814: LD_INT 5
3816: PUSH
3817: LD_INT 6
3819: PUSH
3820: LD_INT 7
3822: PUSH
3823: LD_INT 8
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: PUSH
3832: LD_OWVAR 67
3836: ARRAY
3837: PUSH
3838: FOR_TO
3839: IFFALSE 3985
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3841: LD_INT 0
3843: PPUSH
3844: LD_INT 1
3846: PUSH
3847: LD_INT 1
3849: PUSH
3850: LD_INT 2
3852: PUSH
3853: LD_INT 4
3855: PUSH
3856: LD_INT 1
3858: PUSH
3859: EMPTY
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: PUSH
3866: LD_INT 1
3868: PPUSH
3869: LD_INT 5
3871: PPUSH
3872: CALL_OW 12
3876: ARRAY
3877: PPUSH
3878: LD_INT 3
3880: PUSH
3881: LD_INT 4
3883: PUSH
3884: LD_INT 5
3886: PUSH
3887: LD_INT 5
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: PUSH
3896: LD_OWVAR 67
3900: ARRAY
3901: PPUSH
3902: CALL_OW 380
// un := CreateHuman ;
3906: LD_ADDR_VAR 0 3
3910: PUSH
3911: CALL_OW 44
3915: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3916: LD_VAR 0 3
3920: PPUSH
3921: LD_INT 15
3923: PPUSH
3924: LD_INT 0
3926: PPUSH
3927: CALL 69090 0 3
3931: IFFALSE 3983
// begin ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3933: LD_ADDR_EXP 40
3937: PUSH
3938: LD_EXP 40
3942: PPUSH
3943: LD_EXP 40
3947: PUSH
3948: LD_INT 1
3950: PLUS
3951: PPUSH
3952: LD_VAR 0 3
3956: PPUSH
3957: CALL_OW 1
3961: ST_TO_ADDR
// if Prob ( 50 ) then
3962: LD_INT 50
3964: PPUSH
3965: CALL_OW 13
3969: IFFALSE 3983
// ForceSleep ( un , true ) ;
3971: LD_VAR 0 3
3975: PPUSH
3976: LD_INT 1
3978: PPUSH
3979: CALL_OW 585
// end ; end ;
3983: GO 3838
3985: POP
3986: POP
// end ;
3987: LD_VAR 0 1
3991: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3992: LD_INT 0
3994: PPUSH
3995: PPUSH
3996: PPUSH
// uc_side := 3 ;
3997: LD_ADDR_OWVAR 20
4001: PUSH
4002: LD_INT 3
4004: ST_TO_ADDR
// uc_nation := 3 ;
4005: LD_ADDR_OWVAR 21
4009: PUSH
4010: LD_INT 3
4012: ST_TO_ADDR
// for i := 1 to 6 do
4013: LD_ADDR_VAR 0 2
4017: PUSH
4018: DOUBLE
4019: LD_INT 1
4021: DEC
4022: ST_TO_ADDR
4023: LD_INT 6
4025: PUSH
4026: FOR_TO
4027: IFFALSE 4106
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
4029: LD_INT 0
4031: PPUSH
4032: LD_INT 1
4034: PUSH
4035: LD_INT 4
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: PUSH
4042: LD_INT 1
4044: PPUSH
4045: LD_INT 2
4047: PPUSH
4048: CALL_OW 12
4052: ARRAY
4053: PPUSH
4054: LD_INT 0
4056: PPUSH
4057: CALL_OW 380
// un := CreateHuman ;
4061: LD_ADDR_VAR 0 3
4065: PUSH
4066: CALL_OW 44
4070: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
4071: LD_VAR 0 3
4075: PPUSH
4076: LD_INT 54
4078: PPUSH
4079: LD_INT 88
4081: PPUSH
4082: LD_INT 12
4084: PPUSH
4085: LD_INT 0
4087: PPUSH
4088: CALL_OW 50
// SetLives ( un , 1 ) ;
4092: LD_VAR 0 3
4096: PPUSH
4097: LD_INT 1
4099: PPUSH
4100: CALL_OW 234
// end ;
4104: GO 4026
4106: POP
4107: POP
// uc_side := 3 ;
4108: LD_ADDR_OWVAR 20
4112: PUSH
4113: LD_INT 3
4115: ST_TO_ADDR
// uc_nation := 0 ;
4116: LD_ADDR_OWVAR 21
4120: PUSH
4121: LD_INT 0
4123: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4124: LD_ADDR_EXP 42
4128: PUSH
4129: EMPTY
4130: ST_TO_ADDR
// apeEngGroup := [ ] ;
4131: LD_ADDR_EXP 43
4135: PUSH
4136: EMPTY
4137: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
4138: LD_ADDR_VAR 0 2
4142: PUSH
4143: DOUBLE
4144: LD_INT 1
4146: DEC
4147: ST_TO_ADDR
4148: LD_INT 4
4150: PUSH
4151: LD_INT 5
4153: PUSH
4154: LD_INT 6
4156: PUSH
4157: LD_INT 7
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: PUSH
4166: LD_OWVAR 67
4170: ARRAY
4171: PUSH
4172: FOR_TO
4173: IFFALSE 4291
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
4175: LD_INT 0
4177: PPUSH
4178: LD_INT 15
4180: PPUSH
4181: LD_INT 3
4183: PUSH
4184: LD_INT 4
4186: PUSH
4187: LD_INT 5
4189: PUSH
4190: LD_INT 6
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: PUSH
4199: LD_OWVAR 67
4203: ARRAY
4204: PPUSH
4205: CALL_OW 380
// un := CreateHuman ;
4209: LD_ADDR_VAR 0 3
4213: PUSH
4214: CALL_OW 44
4218: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4219: LD_ADDR_EXP 42
4223: PUSH
4224: LD_EXP 42
4228: PPUSH
4229: LD_EXP 42
4233: PUSH
4234: LD_INT 1
4236: PLUS
4237: PPUSH
4238: LD_VAR 0 3
4242: PPUSH
4243: CALL_OW 1
4247: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4248: LD_VAR 0 3
4252: PPUSH
4253: LD_INT 0
4255: PPUSH
4256: LD_INT 5
4258: PPUSH
4259: CALL_OW 12
4263: PPUSH
4264: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4268: LD_VAR 0 3
4272: PPUSH
4273: LD_INT 56
4275: PPUSH
4276: LD_INT 82
4278: PPUSH
4279: LD_INT 6
4281: PPUSH
4282: LD_INT 0
4284: PPUSH
4285: CALL_OW 50
// end ;
4289: GO 4172
4291: POP
4292: POP
// for i := 1 to 2 do
4293: LD_ADDR_VAR 0 2
4297: PUSH
4298: DOUBLE
4299: LD_INT 1
4301: DEC
4302: ST_TO_ADDR
4303: LD_INT 2
4305: PUSH
4306: FOR_TO
4307: IFFALSE 4383
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4309: LD_INT 0
4311: PPUSH
4312: LD_INT 16
4314: PPUSH
4315: LD_INT 4
4317: PPUSH
4318: CALL_OW 380
// un := CreateHuman ;
4322: LD_ADDR_VAR 0 3
4326: PUSH
4327: CALL_OW 44
4331: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4332: LD_ADDR_EXP 43
4336: PUSH
4337: LD_EXP 43
4341: PPUSH
4342: LD_EXP 43
4346: PUSH
4347: LD_INT 1
4349: PLUS
4350: PPUSH
4351: LD_VAR 0 3
4355: PPUSH
4356: CALL_OW 1
4360: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4361: LD_VAR 0 3
4365: PPUSH
4366: LD_INT 51
4368: PPUSH
4369: LD_INT 77
4371: PPUSH
4372: CALL_OW 428
4376: PPUSH
4377: CALL_OW 52
// end ;
4381: GO 4306
4383: POP
4384: POP
// end ;
4385: LD_VAR 0 1
4389: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4390: LD_EXP 42
4394: PPUSH
4395: LD_INT 3
4397: PUSH
4398: LD_INT 24
4400: PUSH
4401: LD_INT 600
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: PUSH
4412: LD_INT 3
4414: PUSH
4415: LD_INT 54
4417: PUSH
4418: EMPTY
4419: LIST
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: PPUSH
4429: CALL_OW 72
4433: PUSH
4434: LD_INT 66
4436: PPUSH
4437: LD_INT 89
4439: PPUSH
4440: CALL_OW 428
4444: PPUSH
4445: CALL_OW 302
4449: AND
4450: IFFALSE 4535
4452: GO 4454
4454: DISABLE
4455: LD_INT 0
4457: PPUSH
// begin enable ;
4458: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4459: LD_ADDR_VAR 0 1
4463: PUSH
4464: LD_EXP 42
4468: PPUSH
4469: LD_INT 3
4471: PUSH
4472: LD_INT 24
4474: PUSH
4475: LD_INT 600
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: LD_INT 3
4488: PUSH
4489: LD_INT 54
4491: PUSH
4492: EMPTY
4493: LIST
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PPUSH
4503: CALL_OW 72
4507: PUSH
4508: FOR_IN
4509: IFFALSE 4533
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4511: LD_VAR 0 1
4515: PPUSH
4516: LD_INT 66
4518: PPUSH
4519: LD_INT 89
4521: PPUSH
4522: CALL_OW 428
4526: PPUSH
4527: CALL_OW 120
4531: GO 4508
4533: POP
4534: POP
// end ;
4535: PPOPN 1
4537: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4538: LD_INT 22
4540: PUSH
4541: LD_INT 2
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PUSH
4548: LD_INT 92
4550: PUSH
4551: LD_INT 54
4553: PUSH
4554: LD_INT 77
4556: PUSH
4557: LD_INT 8
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PPUSH
4570: CALL_OW 69
4574: IFFALSE 4638
4576: GO 4578
4578: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4579: LD_EXP 43
4583: PPUSH
4584: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4588: LD_EXP 43
4592: PPUSH
4593: LD_INT 22
4595: PUSH
4596: LD_INT 2
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: PUSH
4603: LD_INT 92
4605: PUSH
4606: LD_INT 54
4608: PUSH
4609: LD_INT 77
4611: PUSH
4612: LD_INT 8
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: PPUSH
4625: CALL_OW 69
4629: PUSH
4630: LD_INT 1
4632: ARRAY
4633: PPUSH
4634: CALL_OW 175
// end ;
4638: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag , enemy ; begin
4639: LD_INT 0
4641: PPUSH
4642: PPUSH
4643: PPUSH
4644: PPUSH
4645: PPUSH
4646: PPUSH
4647: PPUSH
4648: PPUSH
4649: PPUSH
4650: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4651: LD_ADDR_VAR 0 3
4655: PUSH
4656: LD_INT 1
4658: PPUSH
4659: LD_INT 3
4661: PPUSH
4662: CALL_OW 12
4666: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4667: LD_ADDR_VAR 0 5
4671: PUSH
4672: LD_INT 16
4674: PUSH
4675: LD_INT 17
4677: PUSH
4678: LD_INT 19
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: LIST
4685: PUSH
4686: LD_VAR 0 3
4690: ARRAY
4691: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4692: LD_ADDR_VAR 0 7
4696: PUSH
4697: LD_INT 159
4699: PUSH
4700: LD_INT 25
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PUSH
4707: LD_INT 137
4709: PUSH
4710: LD_INT 37
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: LD_INT 123
4719: PUSH
4720: LD_INT 55
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: PUSH
4727: LD_INT 115
4729: PUSH
4730: LD_INT 71
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: PUSH
4737: LD_INT 106
4739: PUSH
4740: LD_INT 88
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: PUSH
4747: LD_INT 97
4749: PUSH
4750: LD_INT 114
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: LD_INT 75
4759: PUSH
4760: LD_INT 146
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: PUSH
4776: LD_INT 206
4778: PUSH
4779: LD_INT 135
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PUSH
4786: LD_INT 184
4788: PUSH
4789: LD_INT 111
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 154
4798: PUSH
4799: LD_INT 97
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PUSH
4806: LD_INT 122
4808: PUSH
4809: LD_INT 80
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 109
4818: PUSH
4819: LD_INT 78
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: LD_INT 97
4828: PUSH
4829: LD_INT 113
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 75
4838: PUSH
4839: LD_INT 147
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 185
4857: PUSH
4858: LD_INT 72
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: LD_INT 171
4867: PUSH
4868: LD_INT 83
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PUSH
4875: LD_INT 161
4877: PUSH
4878: LD_INT 99
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PUSH
4885: LD_INT 125
4887: PUSH
4888: LD_INT 82
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: PUSH
4895: LD_INT 105
4897: PUSH
4898: LD_INT 90
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PUSH
4905: LD_INT 96
4907: PUSH
4908: LD_INT 116
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: LD_INT 75
4917: PUSH
4918: LD_INT 147
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: LIST
4938: PUSH
4939: LD_VAR 0 3
4943: ARRAY
4944: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4945: LD_ADDR_VAR 0 4
4949: PUSH
4950: LD_INT 4
4952: PUSH
4953: LD_INT 5
4955: PUSH
4956: LD_INT 3
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: LIST
4963: PUSH
4964: LD_VAR 0 3
4968: ARRAY
4969: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4970: LD_ADDR_VAR 0 6
4974: PUSH
4975: LD_INT 22
4977: PUSH
4978: LD_INT 20
4980: PUSH
4981: LD_INT 21
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: LIST
4988: PUSH
4989: LD_VAR 0 3
4993: ARRAY
4994: ST_TO_ADDR
// for i := 1 to 2 do
4995: LD_ADDR_VAR 0 2
4999: PUSH
5000: DOUBLE
5001: LD_INT 1
5003: DEC
5004: ST_TO_ADDR
5005: LD_INT 2
5007: PUSH
5008: FOR_TO
5009: IFFALSE 5027
// EraseResourceArea ( i , outerSpawnArea ) ;
5011: LD_VAR 0 2
5015: PPUSH
5016: LD_VAR 0 6
5020: PPUSH
5021: CALL_OW 286
5025: GO 5008
5027: POP
5028: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5029: LD_VAR 0 6
5033: PPUSH
5034: LD_INT 2
5036: PUSH
5037: LD_INT 21
5039: PUSH
5040: LD_INT 1
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: PUSH
5047: LD_INT 21
5049: PUSH
5050: LD_INT 2
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: LD_INT 21
5059: PUSH
5060: LD_INT 3
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: PPUSH
5073: CALL_OW 70
5077: IFFALSE 5292
// repeat wait ( 0 0$1 ) ;
5079: LD_INT 35
5081: PPUSH
5082: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5086: LD_VAR 0 6
5090: PPUSH
5091: LD_INT 2
5093: PUSH
5094: LD_INT 21
5096: PUSH
5097: LD_INT 2
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 21
5106: PUSH
5107: LD_INT 3
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: LIST
5118: PPUSH
5119: CALL_OW 70
5123: IFFALSE 5184
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5125: LD_ADDR_VAR 0 2
5129: PUSH
5130: LD_VAR 0 6
5134: PPUSH
5135: LD_INT 2
5137: PUSH
5138: LD_INT 21
5140: PUSH
5141: LD_INT 2
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PUSH
5148: LD_INT 21
5150: PUSH
5151: LD_INT 3
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: LIST
5162: PPUSH
5163: CALL_OW 70
5167: PUSH
5168: FOR_IN
5169: IFFALSE 5182
// RemoveUnit ( i ) ;
5171: LD_VAR 0 2
5175: PPUSH
5176: CALL_OW 64
5180: GO 5168
5182: POP
5183: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5184: LD_VAR 0 6
5188: PPUSH
5189: LD_INT 21
5191: PUSH
5192: LD_INT 1
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: PPUSH
5199: CALL_OW 70
5203: IFFALSE 5252
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5205: LD_ADDR_VAR 0 2
5209: PUSH
5210: LD_VAR 0 6
5214: PPUSH
5215: LD_INT 21
5217: PUSH
5218: LD_INT 1
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: PPUSH
5225: CALL_OW 70
5229: PUSH
5230: FOR_IN
5231: IFFALSE 5250
// ComMoveXY ( i , 113 , 53 ) ;
5233: LD_VAR 0 2
5237: PPUSH
5238: LD_INT 113
5240: PPUSH
5241: LD_INT 53
5243: PPUSH
5244: CALL_OW 111
5248: GO 5230
5250: POP
5251: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5252: LD_VAR 0 6
5256: PPUSH
5257: LD_INT 2
5259: PUSH
5260: LD_INT 21
5262: PUSH
5263: LD_INT 1
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: LD_INT 21
5272: PUSH
5273: LD_INT 2
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: PUSH
5280: EMPTY
5281: LIST
5282: LIST
5283: LIST
5284: PPUSH
5285: CALL_OW 70
5289: NOT
5290: IFFALSE 5079
// case convoyCounter of 1 .. 3 :
5292: LD_EXP 16
5296: PUSH
5297: LD_INT 1
5299: DOUBLE
5300: GREATEREQUAL
5301: IFFALSE 5309
5303: LD_INT 3
5305: DOUBLE
5306: LESSEQUAL
5307: IFTRUE 5311
5309: GO 5930
5311: POP
// begin uc_side := 3 ;
5312: LD_ADDR_OWVAR 20
5316: PUSH
5317: LD_INT 3
5319: ST_TO_ADDR
// uc_nation := 3 ;
5320: LD_ADDR_OWVAR 21
5324: PUSH
5325: LD_INT 3
5327: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] - convoyCounter do
5328: LD_ADDR_VAR 0 2
5332: PUSH
5333: DOUBLE
5334: LD_INT 1
5336: DEC
5337: ST_TO_ADDR
5338: LD_INT 5
5340: PUSH
5341: LD_INT 6
5343: PUSH
5344: LD_INT 7
5346: PUSH
5347: LD_INT 8
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_OWVAR 67
5360: ARRAY
5361: PUSH
5362: LD_EXP 16
5366: MINUS
5367: PUSH
5368: FOR_TO
5369: IFFALSE 5560
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5371: LD_INT 0
5373: PPUSH
5374: LD_INT 1
5376: PUSH
5377: LD_INT 1
5379: PUSH
5380: LD_INT 1
5382: PUSH
5383: LD_INT 4
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: PUSH
5392: LD_INT 1
5394: PPUSH
5395: LD_INT 4
5397: PPUSH
5398: CALL_OW 12
5402: ARRAY
5403: PPUSH
5404: LD_INT 4
5406: PUSH
5407: LD_INT 5
5409: PUSH
5410: LD_INT 6
5412: PUSH
5413: LD_INT 7
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: PUSH
5422: LD_OWVAR 67
5426: ARRAY
5427: PPUSH
5428: CALL_OW 380
// un := CreateHuman ;
5432: LD_ADDR_VAR 0 8
5436: PUSH
5437: CALL_OW 44
5441: ST_TO_ADDR
// SetDir ( un , dir ) ;
5442: LD_VAR 0 8
5446: PPUSH
5447: LD_VAR 0 4
5451: PPUSH
5452: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5456: LD_VAR 0 8
5460: PPUSH
5461: LD_VAR 0 5
5465: PPUSH
5466: LD_INT 0
5468: PPUSH
5469: CALL 69090 0 3
5473: IFFALSE 5558
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5475: LD_ADDR_EXP 41
5479: PUSH
5480: LD_EXP 41
5484: PPUSH
5485: LD_EXP 41
5489: PUSH
5490: LD_INT 1
5492: PLUS
5493: PPUSH
5494: LD_VAR 0 8
5498: PPUSH
5499: CALL_OW 1
5503: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5504: LD_VAR 0 8
5508: PPUSH
5509: LD_INT 1
5511: PPUSH
5512: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5516: LD_VAR 0 8
5520: PPUSH
5521: LD_VAR 0 7
5525: PUSH
5526: LD_INT 1
5528: ARRAY
5529: PUSH
5530: LD_INT 1
5532: ARRAY
5533: PPUSH
5534: LD_VAR 0 7
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PUSH
5543: LD_INT 2
5545: ARRAY
5546: PPUSH
5547: CALL_OW 111
// wait ( 0 0$2 ) ;
5551: LD_INT 70
5553: PPUSH
5554: CALL_OW 67
// end ; end ;
5558: GO 5368
5560: POP
5561: POP
// for i := 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
5562: LD_ADDR_VAR 0 2
5566: PUSH
5567: DOUBLE
5568: LD_INT 1
5570: DEC
5571: ST_TO_ADDR
5572: LD_INT 3
5574: PUSH
5575: LD_INT 4
5577: PUSH
5578: LD_INT 4
5580: PUSH
5581: LD_INT 4
5583: PUSH
5584: EMPTY
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: PUSH
5590: LD_OWVAR 67
5594: ARRAY
5595: PUSH
5596: FOR_TO
5597: IFFALSE 5926
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5599: LD_INT 3
5601: PPUSH
5602: LD_INT 3
5604: PPUSH
5605: LD_INT 21
5607: PUSH
5608: LD_INT 22
5610: PUSH
5611: LD_INT 23
5613: PUSH
5614: LD_INT 24
5616: PUSH
5617: LD_INT 24
5619: PUSH
5620: LD_INT 24
5622: PUSH
5623: EMPTY
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: PUSH
5631: LD_OWVAR 67
5635: PPUSH
5636: LD_OWVAR 67
5640: PUSH
5641: LD_INT 2
5643: PLUS
5644: PPUSH
5645: CALL_OW 12
5649: ARRAY
5650: PPUSH
5651: LD_INT 1
5653: PPUSH
5654: LD_INT 1
5656: PPUSH
5657: LD_INT 42
5659: PUSH
5660: LD_INT 44
5662: PUSH
5663: LD_INT 43
5665: PUSH
5666: LD_INT 44
5668: PUSH
5669: LD_INT 46
5671: PUSH
5672: LD_INT 46
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: PUSH
5683: LD_INT 1
5685: PPUSH
5686: LD_OWVAR 67
5690: PUSH
5691: LD_INT 2
5693: PLUS
5694: PPUSH
5695: CALL_OW 12
5699: ARRAY
5700: PPUSH
5701: LD_INT 90
5703: PPUSH
5704: CALL 439 0 7
// un := CreateVehicle ;
5708: LD_ADDR_VAR 0 8
5712: PUSH
5713: CALL_OW 45
5717: ST_TO_ADDR
// SetDir ( un , dir ) ;
5718: LD_VAR 0 8
5722: PPUSH
5723: LD_VAR 0 4
5727: PPUSH
5728: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5732: LD_VAR 0 8
5736: PPUSH
5737: LD_VAR 0 5
5741: PPUSH
5742: LD_INT 0
5744: PPUSH
5745: CALL 69090 0 3
5749: IFFALSE 5924
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5751: LD_ADDR_EXP 41
5755: PUSH
5756: LD_EXP 41
5760: PPUSH
5761: LD_EXP 41
5765: PUSH
5766: LD_INT 1
5768: PLUS
5769: PPUSH
5770: LD_VAR 0 8
5774: PPUSH
5775: CALL_OW 1
5779: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
5780: LD_INT 0
5782: PPUSH
5783: LD_INT 3
5785: PUSH
5786: LD_INT 4
5788: PUSH
5789: LD_INT 5
5791: PUSH
5792: LD_INT 6
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: LIST
5799: LIST
5800: PUSH
5801: LD_OWVAR 67
5805: ARRAY
5806: PPUSH
5807: CALL_OW 383
// un := CreateHuman ;
5811: LD_ADDR_VAR 0 8
5815: PUSH
5816: CALL_OW 44
5820: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5821: LD_VAR 0 8
5825: PPUSH
5826: LD_EXP 41
5830: PUSH
5831: LD_EXP 41
5835: ARRAY
5836: PPUSH
5837: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5841: LD_ADDR_EXP 41
5845: PUSH
5846: LD_EXP 41
5850: PPUSH
5851: LD_EXP 41
5855: PUSH
5856: LD_INT 1
5858: PLUS
5859: PPUSH
5860: LD_VAR 0 8
5864: PPUSH
5865: CALL_OW 1
5869: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5870: LD_VAR 0 8
5874: PPUSH
5875: LD_INT 1
5877: PPUSH
5878: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5882: LD_VAR 0 8
5886: PPUSH
5887: LD_VAR 0 7
5891: PUSH
5892: LD_INT 1
5894: ARRAY
5895: PUSH
5896: LD_INT 1
5898: ARRAY
5899: PPUSH
5900: LD_VAR 0 7
5904: PUSH
5905: LD_INT 1
5907: ARRAY
5908: PUSH
5909: LD_INT 2
5911: ARRAY
5912: PPUSH
5913: CALL_OW 111
// wait ( 0 0$3 ) ;
5917: LD_INT 105
5919: PPUSH
5920: CALL_OW 67
// end ; end ;
5924: GO 5596
5926: POP
5927: POP
// end ; 4 .. 7 :
5928: GO 6503
5930: LD_INT 4
5932: DOUBLE
5933: GREATEREQUAL
5934: IFFALSE 5942
5936: LD_INT 7
5938: DOUBLE
5939: LESSEQUAL
5940: IFTRUE 5944
5942: GO 6502
5944: POP
// begin uc_side := 3 ;
5945: LD_ADDR_OWVAR 20
5949: PUSH
5950: LD_INT 3
5952: ST_TO_ADDR
// uc_nation := 3 ;
5953: LD_ADDR_OWVAR 21
5957: PUSH
5958: LD_INT 3
5960: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
5961: LD_ADDR_VAR 0 2
5965: PUSH
5966: DOUBLE
5967: LD_INT 1
5969: DEC
5970: ST_TO_ADDR
5971: LD_INT 2
5973: PUSH
5974: LD_INT 3
5976: PUSH
5977: LD_INT 4
5979: PUSH
5980: LD_INT 4
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: PUSH
5989: LD_OWVAR 67
5993: ARRAY
5994: PUSH
5995: FOR_TO
5996: IFFALSE 6160
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5998: LD_INT 0
6000: PPUSH
6001: LD_INT 1
6003: PPUSH
6004: LD_INT 4
6006: PUSH
6007: LD_INT 5
6009: PUSH
6010: LD_INT 6
6012: PUSH
6013: LD_INT 7
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: PUSH
6022: LD_OWVAR 67
6026: ARRAY
6027: PPUSH
6028: CALL_OW 380
// un := CreateHuman ;
6032: LD_ADDR_VAR 0 8
6036: PUSH
6037: CALL_OW 44
6041: ST_TO_ADDR
// SetDir ( un , dir ) ;
6042: LD_VAR 0 8
6046: PPUSH
6047: LD_VAR 0 4
6051: PPUSH
6052: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6056: LD_VAR 0 8
6060: PPUSH
6061: LD_VAR 0 5
6065: PPUSH
6066: LD_INT 0
6068: PPUSH
6069: CALL 69090 0 3
6073: IFFALSE 6158
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6075: LD_ADDR_EXP 41
6079: PUSH
6080: LD_EXP 41
6084: PPUSH
6085: LD_EXP 41
6089: PUSH
6090: LD_INT 1
6092: PLUS
6093: PPUSH
6094: LD_VAR 0 8
6098: PPUSH
6099: CALL_OW 1
6103: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6104: LD_VAR 0 8
6108: PPUSH
6109: LD_INT 1
6111: PPUSH
6112: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6116: LD_VAR 0 8
6120: PPUSH
6121: LD_VAR 0 7
6125: PUSH
6126: LD_INT 1
6128: ARRAY
6129: PUSH
6130: LD_INT 1
6132: ARRAY
6133: PPUSH
6134: LD_VAR 0 7
6138: PUSH
6139: LD_INT 1
6141: ARRAY
6142: PUSH
6143: LD_INT 2
6145: ARRAY
6146: PPUSH
6147: CALL_OW 111
// wait ( 0 0$2 ) ;
6151: LD_INT 70
6153: PPUSH
6154: CALL_OW 67
// end ; end ;
6158: GO 5995
6160: POP
6161: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
6162: LD_ADDR_VAR 0 2
6166: PUSH
6167: DOUBLE
6168: LD_INT 1
6170: DEC
6171: ST_TO_ADDR
6172: LD_INT 2
6174: PUSH
6175: LD_INT 3
6177: PUSH
6178: LD_INT 3
6180: PUSH
6181: LD_INT 4
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: PUSH
6190: LD_OWVAR 67
6194: ARRAY
6195: PUSH
6196: FOR_TO
6197: IFFALSE 6498
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6199: LD_INT 3
6201: PPUSH
6202: LD_INT 3
6204: PPUSH
6205: LD_INT 21
6207: PUSH
6208: LD_INT 22
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: PUSH
6215: LD_INT 1
6217: PPUSH
6218: LD_INT 2
6220: PPUSH
6221: CALL_OW 12
6225: ARRAY
6226: PPUSH
6227: LD_INT 1
6229: PPUSH
6230: LD_INT 1
6232: PPUSH
6233: LD_INT 42
6235: PUSH
6236: LD_INT 44
6238: PUSH
6239: LD_INT 43
6241: PUSH
6242: LD_INT 44
6244: PUSH
6245: LD_INT 44
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 1
6257: PPUSH
6258: LD_OWVAR 67
6262: PUSH
6263: LD_INT 1
6265: PLUS
6266: PPUSH
6267: CALL_OW 12
6271: ARRAY
6272: PPUSH
6273: LD_INT 90
6275: PPUSH
6276: CALL 439 0 7
// un := CreateVehicle ;
6280: LD_ADDR_VAR 0 8
6284: PUSH
6285: CALL_OW 45
6289: ST_TO_ADDR
// SetDir ( un , dir ) ;
6290: LD_VAR 0 8
6294: PPUSH
6295: LD_VAR 0 4
6299: PPUSH
6300: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6304: LD_VAR 0 8
6308: PPUSH
6309: LD_VAR 0 5
6313: PPUSH
6314: LD_INT 0
6316: PPUSH
6317: CALL 69090 0 3
6321: IFFALSE 6496
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6323: LD_ADDR_EXP 41
6327: PUSH
6328: LD_EXP 41
6332: PPUSH
6333: LD_EXP 41
6337: PUSH
6338: LD_INT 1
6340: PLUS
6341: PPUSH
6342: LD_VAR 0 8
6346: PPUSH
6347: CALL_OW 1
6351: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
6352: LD_INT 0
6354: PPUSH
6355: LD_INT 3
6357: PUSH
6358: LD_INT 4
6360: PUSH
6361: LD_INT 5
6363: PUSH
6364: LD_INT 6
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: PUSH
6373: LD_OWVAR 67
6377: ARRAY
6378: PPUSH
6379: CALL_OW 383
// un := CreateHuman ;
6383: LD_ADDR_VAR 0 8
6387: PUSH
6388: CALL_OW 44
6392: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6393: LD_VAR 0 8
6397: PPUSH
6398: LD_EXP 41
6402: PUSH
6403: LD_EXP 41
6407: ARRAY
6408: PPUSH
6409: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6413: LD_ADDR_EXP 41
6417: PUSH
6418: LD_EXP 41
6422: PPUSH
6423: LD_EXP 41
6427: PUSH
6428: LD_INT 1
6430: PLUS
6431: PPUSH
6432: LD_VAR 0 8
6436: PPUSH
6437: CALL_OW 1
6441: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6442: LD_VAR 0 8
6446: PPUSH
6447: LD_INT 1
6449: PPUSH
6450: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6454: LD_VAR 0 8
6458: PPUSH
6459: LD_VAR 0 7
6463: PUSH
6464: LD_INT 1
6466: ARRAY
6467: PUSH
6468: LD_INT 1
6470: ARRAY
6471: PPUSH
6472: LD_VAR 0 7
6476: PUSH
6477: LD_INT 1
6479: ARRAY
6480: PUSH
6481: LD_INT 2
6483: ARRAY
6484: PPUSH
6485: CALL_OW 111
// wait ( 0 0$2 ) ;
6489: LD_INT 70
6491: PPUSH
6492: CALL_OW 67
// end ; end ;
6496: GO 6196
6498: POP
6499: POP
// end ; end ;
6500: GO 6503
6502: POP
// repeat wait ( 0 0$1 ) ;
6503: LD_INT 35
6505: PPUSH
6506: CALL_OW 67
// for un in ruConvoySquad do
6510: LD_ADDR_VAR 0 8
6514: PUSH
6515: LD_EXP 41
6519: PUSH
6520: FOR_IN
6521: IFFALSE 7145
// begin if IsInArea ( un , westSouthOutArea ) then
6523: LD_VAR 0 8
6527: PPUSH
6528: LD_INT 18
6530: PPUSH
6531: CALL_OW 308
6535: IFFALSE 6623
// begin if GetType ( un ) = unit_vehicle then
6537: LD_VAR 0 8
6541: PPUSH
6542: CALL_OW 247
6546: PUSH
6547: LD_INT 2
6549: EQUAL
6550: IFFALSE 6582
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6552: LD_ADDR_EXP 41
6556: PUSH
6557: LD_EXP 41
6561: PUSH
6562: LD_VAR 0 8
6566: PPUSH
6567: CALL_OW 311
6571: DIFF
6572: ST_TO_ADDR
// RemoveUnit ( un ) ;
6573: LD_VAR 0 8
6577: PPUSH
6578: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6582: LD_ADDR_EXP 15
6586: PUSH
6587: LD_EXP 15
6591: PUSH
6592: LD_INT 1
6594: PLUS
6595: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6596: LD_ADDR_EXP 41
6600: PUSH
6601: LD_EXP 41
6605: PUSH
6606: LD_VAR 0 8
6610: DIFF
6611: ST_TO_ADDR
// RemoveUnit ( un ) ;
6612: LD_VAR 0 8
6616: PPUSH
6617: CALL_OW 64
// break ;
6621: GO 7145
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6623: LD_VAR 0 8
6627: PPUSH
6628: CALL_OW 305
6632: NOT
6633: PUSH
6634: LD_VAR 0 8
6638: PPUSH
6639: CALL_OW 310
6643: NOT
6644: AND
6645: IFFALSE 6663
// ruConvoySquad := ruConvoySquad diff un ;
6647: LD_ADDR_EXP 41
6651: PUSH
6652: LD_EXP 41
6656: PUSH
6657: LD_VAR 0 8
6661: DIFF
6662: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6663: LD_VAR 0 8
6667: PPUSH
6668: CALL_OW 302
6672: PUSH
6673: LD_VAR 0 8
6677: PPUSH
6678: CALL_OW 314
6682: NOT
6683: AND
6684: IFFALSE 7143
// begin tag := GetTag ( un ) ;
6686: LD_ADDR_VAR 0 9
6690: PUSH
6691: LD_VAR 0 8
6695: PPUSH
6696: CALL_OW 110
6700: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6701: LD_VAR 0 8
6705: PPUSH
6706: LD_VAR 0 7
6710: PUSH
6711: LD_VAR 0 9
6715: PUSH
6716: LD_INT 1
6718: PLUS
6719: ARRAY
6720: PUSH
6721: LD_INT 1
6723: ARRAY
6724: PPUSH
6725: LD_VAR 0 7
6729: PUSH
6730: LD_VAR 0 9
6734: PUSH
6735: LD_INT 1
6737: PLUS
6738: ARRAY
6739: PUSH
6740: LD_INT 2
6742: ARRAY
6743: PPUSH
6744: CALL_OW 297
6748: PUSH
6749: LD_INT 6
6751: LESS
6752: IFFALSE 6935
// begin SetTag ( un , tag + 1 ) ;
6754: LD_VAR 0 8
6758: PPUSH
6759: LD_VAR 0 9
6763: PUSH
6764: LD_INT 1
6766: PLUS
6767: PPUSH
6768: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6772: LD_VAR 0 8
6776: PPUSH
6777: CALL_OW 247
6781: PUSH
6782: LD_INT 2
6784: EQUAL
6785: PUSH
6786: LD_VAR 0 8
6790: PPUSH
6791: CALL_OW 257
6795: PUSH
6796: LD_INT 3
6798: EQUAL
6799: OR
6800: IFFALSE 6933
// begin enemy := FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , un , 8 ] ] ) ;
6802: LD_ADDR_VAR 0 10
6806: PUSH
6807: LD_INT 22
6809: PUSH
6810: LD_INT 2
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: PUSH
6817: LD_INT 91
6819: PUSH
6820: LD_VAR 0 8
6824: PUSH
6825: LD_INT 8
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: LIST
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: PPUSH
6837: CALL_OW 69
6841: ST_TO_ADDR
// if enemy then
6842: LD_VAR 0 10
6846: IFFALSE 6874
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) else
6848: LD_VAR 0 8
6852: PPUSH
6853: LD_VAR 0 10
6857: PPUSH
6858: LD_VAR 0 8
6862: PPUSH
6863: CALL_OW 74
6867: PPUSH
6868: CALL_OW 115
6872: GO 6933
// begin AddComWait ( un , 0 0$4 ) ;
6874: LD_VAR 0 8
6878: PPUSH
6879: LD_INT 140
6881: PPUSH
6882: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6886: LD_VAR 0 8
6890: PPUSH
6891: LD_VAR 0 7
6895: PUSH
6896: LD_VAR 0 9
6900: PUSH
6901: LD_INT 1
6903: PLUS
6904: ARRAY
6905: PUSH
6906: LD_INT 1
6908: ARRAY
6909: PPUSH
6910: LD_VAR 0 7
6914: PUSH
6915: LD_VAR 0 9
6919: PUSH
6920: LD_INT 1
6922: PLUS
6923: ARRAY
6924: PUSH
6925: LD_INT 2
6927: ARRAY
6928: PPUSH
6929: CALL_OW 174
// end ; end ; end else
6933: GO 7143
// begin if GetClass ( un ) = 4 then
6935: LD_VAR 0 8
6939: PPUSH
6940: CALL_OW 257
6944: PUSH
6945: LD_INT 4
6947: EQUAL
6948: IFFALSE 7096
// begin if UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6950: LD_EXP 41
6954: PPUSH
6955: LD_INT 21
6957: PUSH
6958: LD_INT 1
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: LD_INT 3
6967: PUSH
6968: LD_INT 24
6970: PUSH
6971: LD_INT 1000
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PPUSH
6986: CALL_OW 72
6990: IFFALSE 7048
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
6992: LD_VAR 0 8
6996: PPUSH
6997: LD_EXP 41
7001: PPUSH
7002: LD_INT 21
7004: PUSH
7005: LD_INT 1
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PUSH
7012: LD_INT 3
7014: PUSH
7015: LD_INT 24
7017: PUSH
7018: LD_INT 1000
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PPUSH
7033: CALL_OW 72
7037: PUSH
7038: LD_INT 1
7040: ARRAY
7041: PPUSH
7042: CALL_OW 128
7046: GO 7094
// ComMoveUnit ( un , NearestUnitToUnit ( UnitFilter ( ruConvoySquad , [ f_not , [ f_class , 4 ] ] ) , un ) ) end else
7048: LD_VAR 0 8
7052: PPUSH
7053: LD_EXP 41
7057: PPUSH
7058: LD_INT 3
7060: PUSH
7061: LD_INT 25
7063: PUSH
7064: LD_INT 4
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PPUSH
7075: CALL_OW 72
7079: PPUSH
7080: LD_VAR 0 8
7084: PPUSH
7085: CALL_OW 74
7089: PPUSH
7090: CALL_OW 112
7094: GO 7143
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7096: LD_VAR 0 8
7100: PPUSH
7101: LD_VAR 0 7
7105: PUSH
7106: LD_VAR 0 9
7110: PUSH
7111: LD_INT 1
7113: PLUS
7114: ARRAY
7115: PUSH
7116: LD_INT 1
7118: ARRAY
7119: PPUSH
7120: LD_VAR 0 7
7124: PUSH
7125: LD_VAR 0 9
7129: PUSH
7130: LD_INT 1
7132: PLUS
7133: ARRAY
7134: PUSH
7135: LD_INT 2
7137: ARRAY
7138: PPUSH
7139: CALL_OW 114
// end ; end ; end ;
7143: GO 6520
7145: POP
7146: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
7147: LD_EXP 41
7151: PPUSH
7152: LD_INT 52
7154: PUSH
7155: EMPTY
7156: LIST
7157: PUSH
7158: LD_INT 21
7160: PUSH
7161: LD_INT 1
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PPUSH
7172: CALL_OW 72
7176: NOT
7177: IFFALSE 6503
// end ;
7179: LD_VAR 0 1
7183: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
7184: LD_EXP 16
7188: PUSH
7189: LD_INT 3
7191: PPUSH
7192: LD_INT 5
7194: PPUSH
7195: CALL_OW 12
7199: LESS
7200: PUSH
7201: LD_EXP 41
7205: NOT
7206: AND
7207: PUSH
7208: LD_OWVAR 67
7212: PUSH
7213: LD_INT 1
7215: GREATER
7216: AND
7217: IFFALSE 7621
7219: GO 7221
7221: DISABLE
7222: LD_INT 0
7224: PPUSH
7225: PPUSH
7226: PPUSH
// begin uc_side := 3 ;
7227: LD_ADDR_OWVAR 20
7231: PUSH
7232: LD_INT 3
7234: ST_TO_ADDR
// uc_nation := 3 ;
7235: LD_ADDR_OWVAR 21
7239: PUSH
7240: LD_INT 3
7242: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
7243: LD_ADDR_VAR 0 1
7247: PUSH
7248: DOUBLE
7249: LD_INT 1
7251: DEC
7252: ST_TO_ADDR
7253: LD_INT 2
7255: PUSH
7256: LD_INT 3
7258: PUSH
7259: LD_INT 4
7261: PUSH
7262: LD_INT 5
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: PUSH
7271: LD_OWVAR 67
7275: ARRAY
7276: PUSH
7277: FOR_TO
7278: IFFALSE 7542
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7280: LD_INT 3
7282: PPUSH
7283: LD_INT 3
7285: PPUSH
7286: LD_INT 21
7288: PUSH
7289: LD_INT 22
7291: PUSH
7292: LD_INT 23
7294: PUSH
7295: LD_INT 24
7297: PUSH
7298: LD_INT 24
7300: PUSH
7301: LD_INT 24
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: PUSH
7312: LD_OWVAR 67
7316: PPUSH
7317: LD_OWVAR 67
7321: PUSH
7322: LD_INT 2
7324: PLUS
7325: PPUSH
7326: CALL_OW 12
7330: ARRAY
7331: PPUSH
7332: LD_INT 1
7334: PPUSH
7335: LD_INT 1
7337: PPUSH
7338: LD_INT 42
7340: PUSH
7341: LD_INT 44
7343: PUSH
7344: LD_INT 43
7346: PUSH
7347: LD_INT 44
7349: PUSH
7350: LD_INT 46
7352: PUSH
7353: LD_INT 46
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: LD_INT 1
7366: PPUSH
7367: LD_OWVAR 67
7371: PUSH
7372: LD_INT 2
7374: PLUS
7375: PPUSH
7376: CALL_OW 12
7380: ARRAY
7381: PPUSH
7382: LD_INT 90
7384: PPUSH
7385: CALL 439 0 7
// un := CreateVehicle ;
7389: LD_ADDR_VAR 0 3
7393: PUSH
7394: CALL_OW 45
7398: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7399: LD_VAR 0 3
7403: PPUSH
7404: LD_INT 0
7406: PPUSH
7407: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7411: LD_VAR 0 3
7415: PPUSH
7416: LD_INT 23
7418: PPUSH
7419: LD_INT 0
7421: PPUSH
7422: CALL 69090 0 3
7426: IFFALSE 7540
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7428: LD_ADDR_VAR 0 2
7432: PUSH
7433: LD_VAR 0 2
7437: PPUSH
7438: LD_VAR 0 2
7442: PUSH
7443: LD_INT 1
7445: PLUS
7446: PPUSH
7447: LD_VAR 0 3
7451: PPUSH
7452: CALL_OW 1
7456: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
7457: LD_INT 0
7459: PPUSH
7460: LD_INT 3
7462: PUSH
7463: LD_INT 4
7465: PUSH
7466: LD_INT 5
7468: PUSH
7469: LD_INT 6
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: PUSH
7478: LD_OWVAR 67
7482: ARRAY
7483: PPUSH
7484: CALL_OW 383
// un := CreateHuman ;
7488: LD_ADDR_VAR 0 3
7492: PUSH
7493: CALL_OW 44
7497: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7498: LD_VAR 0 3
7502: PPUSH
7503: LD_VAR 0 2
7507: PUSH
7508: LD_VAR 0 2
7512: ARRAY
7513: PPUSH
7514: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7518: LD_VAR 0 3
7522: PPUSH
7523: LD_INT 80
7525: PPUSH
7526: LD_INT 139
7528: PPUSH
7529: CALL_OW 111
// wait ( 0 0$3 ) ;
7533: LD_INT 105
7535: PPUSH
7536: CALL_OW 67
// end ; end ;
7540: GO 7277
7542: POP
7543: POP
// for i in tmp do
7544: LD_ADDR_VAR 0 1
7548: PUSH
7549: LD_VAR 0 2
7553: PUSH
7554: FOR_IN
7555: IFFALSE 7619
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7557: LD_VAR 0 1
7561: PPUSH
7562: LD_INT 101
7564: PPUSH
7565: LD_INT 102
7567: PPUSH
7568: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7572: LD_VAR 0 1
7576: PPUSH
7577: LD_INT 110
7579: PPUSH
7580: LD_INT 78
7582: PPUSH
7583: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7587: LD_VAR 0 1
7591: PPUSH
7592: LD_INT 75
7594: PPUSH
7595: LD_INT 101
7597: PPUSH
7598: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7602: LD_VAR 0 1
7606: PPUSH
7607: LD_INT 57
7609: PPUSH
7610: LD_INT 83
7612: PPUSH
7613: CALL_OW 174
// end ;
7617: GO 7554
7619: POP
7620: POP
// end ;
7621: PPOPN 3
7623: END
// every 0 0$1 trigger UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) or UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do var i ;
7624: LD_EXP 39
7628: PPUSH
7629: LD_INT 3
7631: PUSH
7632: LD_INT 24
7634: PUSH
7635: LD_INT 1000
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PPUSH
7646: CALL_OW 72
7650: PUSH
7651: LD_EXP 40
7655: PPUSH
7656: LD_INT 3
7658: PUSH
7659: LD_INT 24
7661: PUSH
7662: LD_INT 1000
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: PPUSH
7673: CALL_OW 72
7677: OR
7678: IFFALSE 7777
7680: GO 7682
7682: DISABLE
7683: LD_INT 0
7685: PPUSH
// begin enable ;
7686: ENABLE
// for i in UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) union UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do
7687: LD_ADDR_VAR 0 1
7691: PUSH
7692: LD_EXP 39
7696: PPUSH
7697: LD_INT 3
7699: PUSH
7700: LD_INT 24
7702: PUSH
7703: LD_INT 1000
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PPUSH
7714: CALL_OW 72
7718: PUSH
7719: LD_EXP 40
7723: PPUSH
7724: LD_INT 3
7726: PUSH
7727: LD_INT 24
7729: PUSH
7730: LD_INT 1000
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PPUSH
7741: CALL_OW 72
7745: UNION
7746: PUSH
7747: FOR_IN
7748: IFFALSE 7775
// if IsSleeping ( i ) then
7750: LD_VAR 0 1
7754: PPUSH
7755: CALL_OW 555
7759: IFFALSE 7773
// ForceSleep ( i , false ) ;
7761: LD_VAR 0 1
7765: PPUSH
7766: LD_INT 0
7768: PPUSH
7769: CALL_OW 585
7773: GO 7747
7775: POP
7776: POP
// end ; end_of_file
7777: PPOPN 1
7779: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7780: LD_VAR 0 1
7784: PPUSH
7785: CALL 14518 0 1
// if un = Heike then
7789: LD_VAR 0 1
7793: PUSH
7794: LD_EXP 21
7798: EQUAL
7799: IFFALSE 7808
// YouLost ( Heike ) ;
7801: LD_STRING Heike
7803: PPUSH
7804: CALL_OW 104
// if un in apeSoldGroup then
7808: LD_VAR 0 1
7812: PUSH
7813: LD_EXP 42
7817: IN
7818: IFFALSE 7836
// apeSoldGroup := apeSoldGroup diff un ;
7820: LD_ADDR_EXP 42
7824: PUSH
7825: LD_EXP 42
7829: PUSH
7830: LD_VAR 0 1
7834: DIFF
7835: ST_TO_ADDR
// if un in apeEngGroup then
7836: LD_VAR 0 1
7840: PUSH
7841: LD_EXP 43
7845: IN
7846: IFFALSE 7864
// apeEngGroup := apeEngGroup diff un ;
7848: LD_ADDR_EXP 43
7852: PUSH
7853: LD_EXP 43
7857: PUSH
7858: LD_VAR 0 1
7862: DIFF
7863: ST_TO_ADDR
// if un in oilBaseGuard then
7864: LD_VAR 0 1
7868: PUSH
7869: LD_EXP 38
7873: IN
7874: IFFALSE 7892
// oilBaseGuard := oilBaseGuard diff un ;
7876: LD_ADDR_EXP 38
7880: PUSH
7881: LD_EXP 38
7885: PUSH
7886: LD_VAR 0 1
7890: DIFF
7891: ST_TO_ADDR
// if un in ruNorthGroup then
7892: LD_VAR 0 1
7896: PUSH
7897: LD_EXP 39
7901: IN
7902: IFFALSE 7920
// ruNorthGroup := ruNorthGroup diff un ;
7904: LD_ADDR_EXP 39
7908: PUSH
7909: LD_EXP 39
7913: PUSH
7914: LD_VAR 0 1
7918: DIFF
7919: ST_TO_ADDR
// if un in ruSouthGroup then
7920: LD_VAR 0 1
7924: PUSH
7925: LD_EXP 40
7929: IN
7930: IFFALSE 7948
// ruSouthGroup := ruSouthGroup diff un ;
7932: LD_ADDR_EXP 40
7936: PUSH
7937: LD_EXP 40
7941: PUSH
7942: LD_VAR 0 1
7946: DIFF
7947: ST_TO_ADDR
// if un in ruConvoySquad then
7948: LD_VAR 0 1
7952: PUSH
7953: LD_EXP 41
7957: IN
7958: IFFALSE 7976
// ruConvoySquad := ruConvoySquad diff un ;
7960: LD_ADDR_EXP 41
7964: PUSH
7965: LD_EXP 41
7969: PUSH
7970: LD_VAR 0 1
7974: DIFF
7975: ST_TO_ADDR
// end ;
7976: PPOPN 1
7978: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
7979: LD_VAR 0 1
7983: PPUSH
7984: LD_VAR 0 2
7988: PPUSH
7989: CALL 14640 0 2
// if GetWeapon ( veh ) = ar_radar then
7993: LD_VAR 0 1
7997: PPUSH
7998: CALL_OW 264
8002: PUSH
8003: LD_INT 30
8005: EQUAL
8006: IFFALSE 8016
// radarConstructed := true ;
8008: LD_ADDR_EXP 13
8012: PUSH
8013: LD_INT 1
8015: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
8016: LD_VAR 0 1
8020: PPUSH
8021: CALL_OW 264
8025: PUSH
8026: LD_INT 26
8028: EQUAL
8029: IFFALSE 8039
// flamethrowerBuilt := true ;
8031: LD_ADDR_EXP 20
8035: PUSH
8036: LD_INT 1
8038: ST_TO_ADDR
// end ;
8039: PPOPN 2
8041: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
8042: LD_ADDR_EXP 18
8046: PUSH
8047: LD_EXP 18
8051: PUSH
8052: LD_INT 1
8054: PLUS
8055: ST_TO_ADDR
// if oldId in ruConvoySquad then
8056: LD_VAR 0 2
8060: PUSH
8061: LD_EXP 41
8065: IN
8066: IFFALSE 8084
// ruConvoySquad := ruConvoySquad diff oldId ;
8068: LD_ADDR_EXP 41
8072: PUSH
8073: LD_EXP 41
8077: PUSH
8078: LD_VAR 0 2
8082: DIFF
8083: ST_TO_ADDR
// if newId in ruConvoySquad then
8084: LD_VAR 0 1
8088: PUSH
8089: LD_EXP 41
8093: IN
8094: IFFALSE 8112
// ruConvoySquad := ruConvoySquad diff newId ;
8096: LD_ADDR_EXP 41
8100: PUSH
8101: LD_EXP 41
8105: PUSH
8106: LD_VAR 0 1
8110: DIFF
8111: ST_TO_ADDR
// end ; end_of_file
8112: PPOPN 4
8114: END
// export function Action ; var i , p , un , veh , tmp ; begin
8115: LD_INT 0
8117: PPUSH
8118: PPUSH
8119: PPUSH
8120: PPUSH
8121: PPUSH
8122: PPUSH
// InGameOn ;
8123: CALL_OW 8
// music_nat := 2 ;
8127: LD_ADDR_OWVAR 71
8131: PUSH
8132: LD_INT 2
8134: ST_TO_ADDR
// music_class := music_recon ;
8135: LD_ADDR_OWVAR 72
8139: PUSH
8140: LD_INT 3
8142: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
8143: LD_INT 7
8145: PPUSH
8146: LD_INT 6
8148: PPUSH
8149: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 30 ) ;
8153: LD_INT 7
8155: PPUSH
8156: LD_INT 6
8158: PPUSH
8159: LD_INT 2
8161: PPUSH
8162: LD_INT 30
8164: NEG
8165: PPUSH
8166: CALL 1223 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Markov , Aviradze , Sophia ] ;
8170: LD_ADDR_VAR 0 6
8174: PUSH
8175: LD_EXP 21
8179: PUSH
8180: LD_EXP 22
8184: PUSH
8185: LD_EXP 23
8189: PUSH
8190: LD_EXP 24
8194: PUSH
8195: LD_EXP 25
8199: PUSH
8200: LD_EXP 26
8204: PUSH
8205: LD_EXP 28
8209: PUSH
8210: LD_EXP 33
8214: PUSH
8215: LD_EXP 27
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: ST_TO_ADDR
// tmp := tmp diff 0 ;
8231: LD_ADDR_VAR 0 6
8235: PUSH
8236: LD_VAR 0 6
8240: PUSH
8241: LD_INT 0
8243: DIFF
8244: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
8245: LD_ADDR_VAR 0 6
8249: PUSH
8250: LD_VAR 0 6
8254: PPUSH
8255: LD_INT 3
8257: PPUSH
8258: CALL 68682 0 2
8262: ST_TO_ADDR
// for i in heikeVehicles do
8263: LD_ADDR_VAR 0 2
8267: PUSH
8268: LD_EXP 35
8272: PUSH
8273: FOR_IN
8274: IFFALSE 8473
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
8276: LD_INT 5
8278: PPUSH
8279: LD_VAR 0 2
8283: PUSH
8284: LD_INT 5
8286: ARRAY
8287: PPUSH
8288: LD_VAR 0 2
8292: PUSH
8293: LD_INT 1
8295: ARRAY
8296: PPUSH
8297: LD_VAR 0 2
8301: PUSH
8302: LD_INT 2
8304: ARRAY
8305: PPUSH
8306: LD_VAR 0 2
8310: PUSH
8311: LD_INT 3
8313: ARRAY
8314: PPUSH
8315: LD_VAR 0 2
8319: PUSH
8320: LD_INT 4
8322: ARRAY
8323: PPUSH
8324: LD_INT 34
8326: PPUSH
8327: CALL 439 0 7
// veh := CreateVehicle ;
8331: LD_ADDR_VAR 0 5
8335: PUSH
8336: CALL_OW 45
8340: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
8341: LD_VAR 0 2
8345: PUSH
8346: LD_INT 4
8348: ARRAY
8349: PUSH
8350: LD_INT 51
8352: PUSH
8353: LD_INT 32
8355: PUSH
8356: LD_INT 12
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: LIST
8363: IN
8364: IFFALSE 8444
// begin if i [ 7 ] [ 1 ] then
8366: LD_VAR 0 2
8370: PUSH
8371: LD_INT 7
8373: ARRAY
8374: PUSH
8375: LD_INT 1
8377: ARRAY
8378: IFFALSE 8405
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
8380: LD_VAR 0 5
8384: PPUSH
8385: LD_INT 1
8387: PPUSH
8388: LD_VAR 0 2
8392: PUSH
8393: LD_INT 7
8395: ARRAY
8396: PUSH
8397: LD_INT 1
8399: ARRAY
8400: PPUSH
8401: CALL_OW 291
// if i [ 7 ] [ 2 ] then
8405: LD_VAR 0 2
8409: PUSH
8410: LD_INT 7
8412: ARRAY
8413: PUSH
8414: LD_INT 2
8416: ARRAY
8417: IFFALSE 8444
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
8419: LD_VAR 0 5
8423: PPUSH
8424: LD_INT 2
8426: PPUSH
8427: LD_VAR 0 2
8431: PUSH
8432: LD_INT 7
8434: ARRAY
8435: PUSH
8436: LD_INT 2
8438: ARRAY
8439: PPUSH
8440: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8444: LD_VAR 0 5
8448: PPUSH
8449: LD_INT 2
8451: PPUSH
8452: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8456: LD_VAR 0 5
8460: PPUSH
8461: LD_INT 4
8463: PPUSH
8464: LD_INT 0
8466: PPUSH
8467: CALL_OW 49
// end ;
8471: GO 8273
8473: POP
8474: POP
// if tmp then
8475: LD_VAR 0 6
8479: IFFALSE 8589
// begin p := 0 ;
8481: LD_ADDR_VAR 0 3
8485: PUSH
8486: LD_INT 0
8488: ST_TO_ADDR
// for i in tmp do
8489: LD_ADDR_VAR 0 2
8493: PUSH
8494: LD_VAR 0 6
8498: PUSH
8499: FOR_IN
8500: IFFALSE 8587
// begin p := p + 1 ;
8502: LD_ADDR_VAR 0 3
8506: PUSH
8507: LD_VAR 0 3
8511: PUSH
8512: LD_INT 1
8514: PLUS
8515: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHumanArea , false ) ;
8516: LD_VAR 0 2
8520: PPUSH
8521: LD_INT 5
8523: PPUSH
8524: LD_INT 0
8526: PPUSH
8527: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8531: LD_VAR 0 2
8535: PPUSH
8536: LD_INT 26
8538: PPUSH
8539: LD_INT 9
8541: PPUSH
8542: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8546: LD_VAR 0 3
8550: PUSH
8551: LD_EXP 35
8555: GREATEREQUAL
8556: PUSH
8557: LD_VAR 0 2
8561: PPUSH
8562: CALL_OW 257
8566: PUSH
8567: LD_INT 3
8569: EQUAL
8570: AND
8571: IFFALSE 8585
// SetClass ( i , 1 ) ;
8573: LD_VAR 0 2
8577: PPUSH
8578: LD_INT 1
8580: PPUSH
8581: CALL_OW 336
// end ;
8585: GO 8499
8587: POP
8588: POP
// end ; if heikeSecondSquad then
8589: LD_EXP 34
8593: IFFALSE 8707
// for i in heikeSecondSquad do
8595: LD_ADDR_VAR 0 2
8599: PUSH
8600: LD_EXP 34
8604: PUSH
8605: FOR_IN
8606: IFFALSE 8705
// begin p := p + 1 ;
8608: LD_ADDR_VAR 0 3
8612: PUSH
8613: LD_VAR 0 3
8617: PUSH
8618: LD_INT 1
8620: PLUS
8621: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8622: LD_VAR 0 2
8626: PPUSH
8627: LD_INT 6
8629: PPUSH
8630: LD_INT 0
8632: PPUSH
8633: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8637: LD_VAR 0 2
8641: PPUSH
8642: LD_INT 26
8644: PPUSH
8645: LD_INT 9
8647: PPUSH
8648: CALL_OW 118
// ForceSleep ( i , true ) ;
8652: LD_VAR 0 2
8656: PPUSH
8657: LD_INT 1
8659: PPUSH
8660: CALL_OW 585
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8664: LD_VAR 0 3
8668: PUSH
8669: LD_EXP 35
8673: GREATEREQUAL
8674: PUSH
8675: LD_VAR 0 2
8679: PPUSH
8680: CALL_OW 257
8684: PUSH
8685: LD_INT 3
8687: EQUAL
8688: AND
8689: IFFALSE 8703
// SetClass ( i , 1 ) ;
8691: LD_VAR 0 2
8695: PPUSH
8696: LD_INT 1
8698: PPUSH
8699: CALL_OW 336
// end ;
8703: GO 8605
8705: POP
8706: POP
// if heikeApes then
8707: LD_EXP 36
8711: IFFALSE 8754
// for i in heikeApes do
8713: LD_ADDR_VAR 0 2
8717: PUSH
8718: LD_EXP 36
8722: PUSH
8723: FOR_IN
8724: IFFALSE 8752
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
8726: LD_VAR 0 2
8730: PPUSH
8731: LD_INT 7
8733: PPUSH
8734: LD_INT 0
8736: PPUSH
8737: CALL_OW 49
// ComHold ( i ) ;
8741: LD_VAR 0 2
8745: PPUSH
8746: CALL_OW 140
// end ;
8750: GO 8723
8752: POP
8753: POP
// if Kurt then
8754: LD_EXP 32
8758: IFFALSE 8790
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
8760: LD_EXP 32
8764: PPUSH
8765: LD_INT 8
8767: PPUSH
8768: LD_INT 0
8770: PPUSH
8771: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
8775: LD_EXP 32
8779: PPUSH
8780: LD_INT 42
8782: PPUSH
8783: LD_INT 32
8785: PPUSH
8786: CALL_OW 118
// end ; wait ( 0 0$2 ) ;
8790: LD_INT 70
8792: PPUSH
8793: CALL_OW 67
// Say ( Heike , DH-Start-1 ) ;
8797: LD_EXP 21
8801: PPUSH
8802: LD_STRING DH-Start-1
8804: PPUSH
8805: CALL_OW 88
// if Givi then
8809: LD_EXP 22
8813: IFFALSE 9076
// begin Say ( Givi , DG-Start-2-5 ) ;
8815: LD_EXP 22
8819: PPUSH
8820: LD_STRING DG-Start-2-5
8822: PPUSH
8823: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
8827: LD_EXP 21
8831: PPUSH
8832: LD_STRING DH-Start-3
8834: PPUSH
8835: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8839: LD_EXP 21
8843: PPUSH
8844: LD_STRING DH-Start-4
8846: PPUSH
8847: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
8851: LD_EXP 22
8855: PPUSH
8856: LD_STRING DG-Start-5
8858: PPUSH
8859: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
8863: LD_EXP 21
8867: PPUSH
8868: LD_STRING DH-Start-6
8870: PPUSH
8871: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
8875: LD_EXP 22
8879: PPUSH
8880: LD_STRING DG-Start-7
8882: PPUSH
8883: CALL_OW 88
// if Mike then
8887: LD_EXP 23
8891: IFFALSE 9064
// begin Say ( Mike , DM-Start-8 ) ;
8893: LD_EXP 23
8897: PPUSH
8898: LD_STRING DM-Start-8
8900: PPUSH
8901: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
8905: LD_EXP 23
8909: PPUSH
8910: LD_STRING DM-Start-9
8912: PPUSH
8913: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
8917: LD_EXP 22
8921: PPUSH
8922: LD_STRING DG-Start-10
8924: PPUSH
8925: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
8929: LD_EXP 22
8933: PPUSH
8934: LD_STRING DG-Start-11
8936: PPUSH
8937: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
8941: LD_EXP 21
8945: PPUSH
8946: LD_STRING DH-Start-12
8948: PPUSH
8949: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
8953: LD_EXP 22
8957: PPUSH
8958: LD_STRING DG-Start-13
8960: PPUSH
8961: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
8965: LD_EXP 22
8969: PPUSH
8970: LD_STRING DG-Start-14
8972: PPUSH
8973: CALL_OW 88
// if Kaia then
8977: LD_EXP 26
8981: IFFALSE 9064
// begin Say ( Kaia , DK-Start-15 ) ;
8983: LD_EXP 26
8987: PPUSH
8988: LD_STRING DK-Start-15
8990: PPUSH
8991: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
8995: LD_EXP 26
8999: PPUSH
9000: LD_STRING DK-Start-16
9002: PPUSH
9003: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
9007: LD_EXP 26
9011: PPUSH
9012: LD_STRING DK-Start-17
9014: PPUSH
9015: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9019: LD_INT 10
9021: PPUSH
9022: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
9026: LD_EXP 22
9030: PPUSH
9031: LD_EXP 26
9035: PPUSH
9036: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
9040: LD_EXP 22
9044: PPUSH
9045: LD_STRING DG-Start-18
9047: PPUSH
9048: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
9052: LD_EXP 26
9056: PPUSH
9057: LD_STRING DK-Start-19
9059: PPUSH
9060: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
9064: LD_EXP 21
9068: PPUSH
9069: LD_STRING DH-Start-20
9071: PPUSH
9072: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
9076: LD_INT 70
9078: PPUSH
9079: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
9083: LD_EXP 29
9087: PPUSH
9088: LD_STRING DShar-Start-21
9090: PPUSH
9091: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
9095: LD_EXP 21
9099: PPUSH
9100: LD_STRING DH-Start-22
9102: PPUSH
9103: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
9107: LD_EXP 29
9111: PPUSH
9112: LD_STRING DShar-Start-23
9114: PPUSH
9115: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
9119: LD_EXP 29
9123: PPUSH
9124: LD_STRING DShar-Start-24
9126: PPUSH
9127: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
9131: LD_EXP 29
9135: PPUSH
9136: LD_STRING DShar-Start-25
9138: PPUSH
9139: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
9143: LD_EXP 29
9147: PPUSH
9148: LD_STRING DShar-Start-26
9150: PPUSH
9151: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
9155: LD_EXP 21
9159: PPUSH
9160: LD_STRING DH-Start-27
9162: PPUSH
9163: CALL_OW 88
// if Kaia then
9167: LD_EXP 26
9171: IFFALSE 9213
// begin ComTurnUnit ( Heike , Kaia ) ;
9173: LD_EXP 21
9177: PPUSH
9178: LD_EXP 26
9182: PPUSH
9183: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
9187: LD_EXP 26
9191: PPUSH
9192: LD_STRING DK-Start-28
9194: PPUSH
9195: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
9199: LD_EXP 21
9203: PPUSH
9204: LD_STRING DH-Start-29
9206: PPUSH
9207: CALL_OW 88
// end else
9211: GO 9225
// Say ( Heike , DH-Start-a-28 ) ;
9213: LD_EXP 21
9217: PPUSH
9218: LD_STRING DH-Start-a-28
9220: PPUSH
9221: CALL_OW 88
// if Givi then
9225: LD_EXP 22
9229: IFFALSE 9464
// begin ComTurnUnit ( Heike , Givi ) ;
9231: LD_EXP 21
9235: PPUSH
9236: LD_EXP 22
9240: PPUSH
9241: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
9245: LD_EXP 22
9249: PPUSH
9250: LD_EXP 21
9254: PPUSH
9255: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
9259: LD_EXP 21
9263: PPUSH
9264: LD_STRING DH-Start-30
9266: PPUSH
9267: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
9271: LD_EXP 21
9275: PPUSH
9276: LD_STRING DH-Start-31
9278: PPUSH
9279: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
9283: LD_EXP 22
9287: PPUSH
9288: LD_STRING DG-Start-32
9290: PPUSH
9291: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
9295: LD_EXP 21
9299: PPUSH
9300: LD_STRING DH-Start-33
9302: PPUSH
9303: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
9307: LD_EXP 22
9311: PPUSH
9312: LD_STRING DG-Start-34
9314: PPUSH
9315: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
9319: LD_EXP 22
9323: PPUSH
9324: LD_STRING DG-Start-35
9326: PPUSH
9327: CALL_OW 88
// if Kurt and not dialogue_skipped then
9331: LD_EXP 32
9335: PUSH
9336: LD_OWVAR 59
9340: NOT
9341: AND
9342: IFFALSE 9373
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
9344: LD_EXP 32
9348: PPUSH
9349: LD_INT 28
9351: PPUSH
9352: LD_INT 13
9354: PPUSH
9355: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
9359: LD_EXP 32
9363: PPUSH
9364: LD_EXP 21
9368: PPUSH
9369: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
9373: LD_EXP 22
9377: PPUSH
9378: LD_STRING DG-Start-36
9380: PPUSH
9381: CALL_OW 88
// if Kurt then
9385: LD_EXP 32
9389: IFFALSE 9462
// begin if not Givi then
9391: LD_EXP 22
9395: NOT
9396: IFFALSE 9412
// Say ( Kurt , DKs-Start-37-a ) else
9398: LD_EXP 32
9402: PPUSH
9403: LD_STRING DKs-Start-37-a
9405: PPUSH
9406: CALL_OW 88
9410: GO 9424
// Say ( Kurt , DKs-Start-37 ) ;
9412: LD_EXP 32
9416: PPUSH
9417: LD_STRING DKs-Start-37
9419: PPUSH
9420: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
9424: LD_EXP 32
9428: PPUSH
9429: LD_STRING DKs-Start-38
9431: PPUSH
9432: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
9436: LD_EXP 21
9440: PPUSH
9441: LD_EXP 32
9445: PPUSH
9446: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
9450: LD_EXP 21
9454: PPUSH
9455: LD_STRING DH-Start-39
9457: PPUSH
9458: CALL_OW 88
// end ; end else
9462: GO 9493
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
9464: LD_EXP 34
9468: PPUSH
9469: LD_STRING DArm-Start-a-37
9471: PPUSH
9472: LD_STRING DArf-Start-a-37
9474: PPUSH
9475: CALL 1274 0 3
9479: IFFALSE 9493
// Say ( Heike , DH-Start-39 ) ;
9481: LD_EXP 21
9485: PPUSH
9486: LD_STRING DH-Start-39
9488: PPUSH
9489: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
9493: LD_INT 44
9495: PPUSH
9496: LD_INT 25
9498: PPUSH
9499: CALL_OW 428
9503: IFFALSE 9520
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
9505: LD_INT 44
9507: PPUSH
9508: LD_INT 25
9510: PPUSH
9511: CALL_OW 428
9515: PPUSH
9516: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
9520: LD_EXP 30
9524: PPUSH
9525: LD_INT 5
9527: PPUSH
9528: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
9532: LD_EXP 30
9536: PPUSH
9537: LD_INT 44
9539: PPUSH
9540: LD_INT 25
9542: PPUSH
9543: LD_INT 0
9545: PPUSH
9546: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
9550: LD_EXP 30
9554: PPUSH
9555: LD_INT 29
9557: PPUSH
9558: LD_INT 12
9560: PPUSH
9561: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9565: LD_INT 35
9567: PPUSH
9568: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9572: LD_OWVAR 59
9576: PUSH
9577: LD_EXP 21
9581: PPUSH
9582: LD_EXP 30
9586: PPUSH
9587: CALL_OW 296
9591: PUSH
9592: LD_INT 8
9594: LESS
9595: OR
9596: PUSH
9597: LD_EXP 30
9601: PPUSH
9602: LD_INT 26
9604: PPUSH
9605: LD_INT 9
9607: PPUSH
9608: CALL_OW 297
9612: PUSH
9613: LD_INT 6
9615: LESS
9616: OR
9617: IFFALSE 9565
// Say ( Olaf , DO-Scout-1 ) ;
9619: LD_EXP 30
9623: PPUSH
9624: LD_STRING DO-Scout-1
9626: PPUSH
9627: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9631: LD_EXP 30
9635: PPUSH
9636: LD_EXP 21
9640: PPUSH
9641: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9645: LD_ADDR_VAR 0 2
9649: PUSH
9650: LD_VAR 0 6
9654: PUSH
9655: LD_EXP 34
9659: UNION
9660: PUSH
9661: FOR_IN
9662: IFFALSE 9680
// ComTurnUnit ( i , Olaf ) ;
9664: LD_VAR 0 2
9668: PPUSH
9669: LD_EXP 30
9673: PPUSH
9674: CALL_OW 119
9678: GO 9661
9680: POP
9681: POP
// wait ( 0 0$0.3 ) ;
9682: LD_INT 10
9684: PPUSH
9685: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9689: LD_EXP 21
9693: PPUSH
9694: LD_EXP 30
9698: PPUSH
9699: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
9703: LD_EXP 21
9707: PPUSH
9708: LD_EXP 30
9712: PPUSH
9713: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
9717: LD_EXP 21
9721: PPUSH
9722: LD_STRING DH-Scout-2
9724: PPUSH
9725: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
9729: LD_EXP 30
9733: PPUSH
9734: LD_STRING DO-Scout-3
9736: PPUSH
9737: CALL_OW 88
// if Mike and Givi then
9741: LD_EXP 23
9745: PUSH
9746: LD_EXP 22
9750: AND
9751: IFFALSE 9767
// Say ( Olaf , DO-Scout-4 ) else
9753: LD_EXP 30
9757: PPUSH
9758: LD_STRING DO-Scout-4
9760: PPUSH
9761: CALL_OW 88
9765: GO 9867
// begin if Mike then
9767: LD_EXP 23
9771: IFFALSE 9799
// begin Say ( Olaf , DO-Scout-a-4 ) ;
9773: LD_EXP 30
9777: PPUSH
9778: LD_STRING DO-Scout-a-4
9780: PPUSH
9781: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
9785: LD_EXP 21
9789: PPUSH
9790: LD_STRING DH-Scout-a-5
9792: PPUSH
9793: CALL_OW 88
// end else
9797: GO 9867
// if Givi then
9799: LD_EXP 22
9803: IFFALSE 9831
// begin Say ( Olaf , DO-Scout-b-4 ) ;
9805: LD_EXP 30
9809: PPUSH
9810: LD_STRING DO-Scout-b-4
9812: PPUSH
9813: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
9817: LD_EXP 21
9821: PPUSH
9822: LD_STRING DH-Scout-b-5
9824: PPUSH
9825: CALL_OW 88
// end else
9829: GO 9867
// begin Say ( Olaf , DO-Scout-f-4 ) ;
9831: LD_EXP 30
9835: PPUSH
9836: LD_STRING DO-Scout-f-4
9838: PPUSH
9839: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
9843: LD_EXP 21
9847: PPUSH
9848: LD_STRING DH-Scout-f-5
9850: PPUSH
9851: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
9855: LD_EXP 30
9859: PPUSH
9860: LD_STRING DO-Scout-f-6
9862: PPUSH
9863: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
9867: LD_EXP 21
9871: PPUSH
9872: LD_STRING DH-Scout-5
9874: PPUSH
9875: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
9879: LD_EXP 30
9883: PPUSH
9884: LD_STRING DO-Scout-6
9886: PPUSH
9887: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
9891: LD_EXP 30
9895: PPUSH
9896: LD_STRING DO-Scout-7
9898: PPUSH
9899: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
9903: LD_EXP 21
9907: PPUSH
9908: LD_STRING DH-Scout-8
9910: PPUSH
9911: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
9915: LD_EXP 21
9919: PPUSH
9920: LD_STRING DH-Scout-9
9922: PPUSH
9923: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
9927: LD_EXP 30
9931: PPUSH
9932: LD_STRING DO-Scout-10
9934: PPUSH
9935: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
9939: LD_EXP 30
9943: PPUSH
9944: LD_STRING DO-Scout-12
9946: PPUSH
9947: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
9951: LD_EXP 30
9955: PPUSH
9956: LD_STRING DO-Scout-13
9958: PPUSH
9959: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
9963: LD_EXP 30
9967: PPUSH
9968: LD_STRING DO-Scout-14
9970: PPUSH
9971: CALL_OW 88
// if Givi then
9975: LD_EXP 22
9979: IFFALSE 10005
// begin Say ( Givi , DG-Scout-15 ) ;
9981: LD_EXP 22
9985: PPUSH
9986: LD_STRING DG-Scout-15
9988: PPUSH
9989: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
9993: LD_EXP 26
9997: PPUSH
9998: LD_STRING DK-Scout-16
10000: PPUSH
10001: CALL_OW 88
// end ; if not dialogue_skipped then
10005: LD_OWVAR 59
10009: NOT
10010: IFFALSE 10131
// begin async ;
10012: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
10013: LD_EXP 30
10017: PPUSH
10018: LD_STRING DO-Scout-17
10020: PPUSH
10021: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10025: LD_INT 55
10027: PPUSH
10028: LD_INT 77
10030: PPUSH
10031: LD_INT 2
10033: PPUSH
10034: LD_INT 6
10036: NEG
10037: PPUSH
10038: CALL 1223 0 4
// wait ( 10 ) ;
10042: LD_INT 10
10044: PPUSH
10045: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
10049: LD_INT 55
10051: PPUSH
10052: LD_INT 77
10054: PPUSH
10055: CALL_OW 84
// wait ( 0 0$10 ) ;
10059: LD_INT 350
10061: PPUSH
10062: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
10066: LD_EXP 30
10070: PPUSH
10071: LD_STRING DO-Scout-18
10073: PPUSH
10074: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10078: LD_INT 204
10080: PPUSH
10081: LD_INT 107
10083: PPUSH
10084: LD_INT 2
10086: PPUSH
10087: LD_INT 12
10089: NEG
10090: PPUSH
10091: CALL 1223 0 4
// wait ( 10 ) ;
10095: LD_INT 10
10097: PPUSH
10098: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
10102: LD_INT 204
10104: PPUSH
10105: LD_INT 107
10107: PPUSH
10108: CALL_OW 84
// wait ( 0 0$10 ) ;
10112: LD_INT 350
10114: PPUSH
10115: CALL_OW 67
// sync ;
10119: SYNC
// CenterNowOnUnits ( Heike ) ;
10120: LD_EXP 21
10124: PPUSH
10125: CALL_OW 87
// end else
10129: GO 10165
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10131: LD_INT 55
10133: PPUSH
10134: LD_INT 77
10136: PPUSH
10137: LD_INT 2
10139: PPUSH
10140: LD_INT 6
10142: NEG
10143: PPUSH
10144: CALL 1223 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10148: LD_INT 204
10150: PPUSH
10151: LD_INT 107
10153: PPUSH
10154: LD_INT 2
10156: PPUSH
10157: LD_INT 12
10159: NEG
10160: PPUSH
10161: CALL 1223 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
10165: LD_EXP 30
10169: PPUSH
10170: LD_STRING DO-Scout-19
10172: PPUSH
10173: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
10177: LD_EXP 30
10181: PPUSH
10182: LD_STRING DO-Scout-20
10184: PPUSH
10185: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
10189: LD_EXP 21
10193: PPUSH
10194: LD_STRING DH-Scout-21
10196: PPUSH
10197: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
10201: LD_EXP 21
10205: PPUSH
10206: LD_STRING DH-Scout-22
10208: PPUSH
10209: CALL_OW 88
// InGameOff ;
10213: CALL_OW 9
// if heikeSecondSquad then
10217: LD_EXP 34
10221: IFFALSE 10235
// ForceSleep ( heikeSecondSquad , false ) ;
10223: LD_EXP 34
10227: PPUSH
10228: LD_INT 0
10230: PPUSH
10231: CALL_OW 585
// if Givi then
10235: LD_EXP 22
10239: IFFALSE 10254
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
10241: LD_INT 13
10243: PPUSH
10244: LD_INT 2
10246: PPUSH
10247: LD_INT 1
10249: PPUSH
10250: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
10254: LD_STRING Road
10256: PPUSH
10257: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
10261: LD_ADDR_VAR 0 2
10265: PUSH
10266: LD_INT 22
10268: PUSH
10269: LD_INT 5
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 21
10278: PUSH
10279: LD_INT 2
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PPUSH
10290: CALL_OW 69
10294: PUSH
10295: FOR_IN
10296: IFFALSE 10312
// SetSide ( i , 2 ) ;
10298: LD_VAR 0 2
10302: PPUSH
10303: LD_INT 2
10305: PPUSH
10306: CALL_OW 235
10310: GO 10295
10312: POP
10313: POP
// SaveForQuickRestart ;
10314: CALL_OW 22
// music_class := music_auto ;
10318: LD_ADDR_OWVAR 72
10322: PUSH
10323: LD_INT 0
10325: ST_TO_ADDR
// end ;
10326: LD_VAR 0 1
10330: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
10331: LD_INT 2
10333: PPUSH
10334: LD_INT 9
10336: PPUSH
10337: CALL_OW 294
10341: IFFALSE 10708
10343: GO 10345
10345: DISABLE
// begin DialogueOn ;
10346: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
10350: LD_INT 111
10352: PPUSH
10353: LD_INT 72
10355: PPUSH
10356: LD_INT 2
10358: PPUSH
10359: LD_INT 20
10361: NEG
10362: PPUSH
10363: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
10367: LD_INT 111
10369: PPUSH
10370: LD_INT 72
10372: PPUSH
10373: LD_INT 2
10375: PPUSH
10376: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
10380: LD_INT 111
10382: PPUSH
10383: LD_INT 72
10385: PPUSH
10386: CALL_OW 86
// if IsOk ( Kamil ) then
10390: LD_EXP 25
10394: PPUSH
10395: CALL_OW 302
10399: IFFALSE 10516
// begin Say ( Kamil , DKam-Cross-1 ) ;
10401: LD_EXP 25
10405: PPUSH
10406: LD_STRING DKam-Cross-1
10408: PPUSH
10409: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
10413: LD_EXP 25
10417: PPUSH
10418: LD_STRING DKam-Cross-2
10420: PPUSH
10421: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
10425: LD_EXP 25
10429: PPUSH
10430: LD_STRING DKam-Cross-3
10432: PPUSH
10433: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
10437: LD_EXP 25
10441: PPUSH
10442: LD_STRING DKam-Cross-4
10444: PPUSH
10445: CALL_OW 88
// if IsOk ( Ibrahim ) then
10449: LD_EXP 24
10453: PPUSH
10454: CALL_OW 302
10458: IFFALSE 10514
// begin if ibrahimJoinedIn04 then
10460: LD_EXP 4
10464: IFFALSE 10478
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10466: LD_EXP 24
10470: PPUSH
10471: LD_STRING DI-Cross-b-5
10473: PPUSH
10474: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10478: LD_EXP 24
10482: PPUSH
10483: LD_STRING DI-Cross-b-6
10485: PPUSH
10486: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10490: LD_EXP 24
10494: PPUSH
10495: LD_STRING DI-Cross-b-7
10497: PPUSH
10498: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
10502: LD_EXP 25
10506: PPUSH
10507: LD_STRING DKam-Cross-8
10509: PPUSH
10510: CALL_OW 88
// end ; end else
10514: GO 10674
// if IsOk ( Sophia ) then
10516: LD_EXP 27
10520: PPUSH
10521: CALL_OW 302
10525: IFFALSE 10642
// begin Say ( Sophia , DS-Cross-1 ) ;
10527: LD_EXP 27
10531: PPUSH
10532: LD_STRING DS-Cross-1
10534: PPUSH
10535: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
10539: LD_EXP 27
10543: PPUSH
10544: LD_STRING DS-Cross-2
10546: PPUSH
10547: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
10551: LD_EXP 27
10555: PPUSH
10556: LD_STRING DS-Cross-3
10558: PPUSH
10559: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
10563: LD_EXP 27
10567: PPUSH
10568: LD_STRING DS-Cross-4
10570: PPUSH
10571: CALL_OW 88
// if IsOk ( Ibrahim ) then
10575: LD_EXP 24
10579: PPUSH
10580: CALL_OW 302
10584: IFFALSE 10640
// begin if ibrahimJoinedIn04 then
10586: LD_EXP 4
10590: IFFALSE 10604
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10592: LD_EXP 24
10596: PPUSH
10597: LD_STRING DI-Cross-b-5
10599: PPUSH
10600: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10604: LD_EXP 24
10608: PPUSH
10609: LD_STRING DI-Cross-b-6
10611: PPUSH
10612: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10616: LD_EXP 24
10620: PPUSH
10621: LD_STRING DI-Cross-b-7
10623: PPUSH
10624: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10628: LD_EXP 27
10632: PPUSH
10633: LD_STRING DS-Cross-8
10635: PPUSH
10636: CALL_OW 88
// end ; end else
10640: GO 10674
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10642: LD_EXP 34
10646: PPUSH
10647: LD_INT 50
10649: PUSH
10650: EMPTY
10651: LIST
10652: PPUSH
10653: CALL_OW 72
10657: IFFALSE 10674
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10659: LD_EXP 34
10663: PPUSH
10664: LD_STRING DArm-Cross-c-1
10666: PPUSH
10667: LD_STRING DArf-Cross-c-1
10669: PPUSH
10670: CALL 1274 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10674: LD_EXP 57
10678: PPUSH
10679: LD_INT 2
10681: PPUSH
10682: LD_INT 1
10684: PPUSH
10685: CALL_OW 322
// DialogueOff ;
10689: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
10693: LD_STRING Crane
10695: PPUSH
10696: CALL_OW 337
// spottedCrossRoad := true ;
10700: LD_ADDR_EXP 8
10704: PUSH
10705: LD_INT 1
10707: ST_TO_ADDR
// end ;
10708: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
10709: LD_INT 22
10711: PUSH
10712: LD_INT 2
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: PUSH
10719: LD_INT 2
10721: PUSH
10722: LD_INT 30
10724: PUSH
10725: LD_INT 0
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: PUSH
10732: LD_INT 30
10734: PUSH
10735: LD_INT 1
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: LIST
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: PPUSH
10751: CALL_OW 69
10755: PUSH
10756: LD_EXP 26
10760: PPUSH
10761: CALL_OW 302
10765: PUSH
10766: LD_EXP 34
10770: OR
10771: AND
10772: IFFALSE 10984
10774: GO 10776
10776: DISABLE
// begin DialogueOn ;
10777: CALL_OW 6
// if Kaia then
10781: LD_EXP 26
10785: IFFALSE 10798
// CenterNowOnUnits ( Kaia ) else
10787: LD_EXP 26
10791: PPUSH
10792: CALL_OW 87
10796: GO 10807
// CenterNowOnUnits ( Heike ) ;
10798: LD_EXP 21
10802: PPUSH
10803: CALL_OW 87
// if IsOk ( Kaia ) then
10807: LD_EXP 26
10811: PPUSH
10812: CALL_OW 302
10816: IFFALSE 10832
// Say ( Kaia , DK-Cam-1 ) else
10818: LD_EXP 26
10822: PPUSH
10823: LD_STRING DK-Cam-1
10825: PPUSH
10826: CALL_OW 88
10830: GO 10847
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
10832: LD_EXP 34
10836: PPUSH
10837: LD_STRING DArm-Cam-1
10839: PPUSH
10840: LD_STRING DArf-Cam-1
10842: PPUSH
10843: CALL 1274 0 3
// Say ( Heike , DH-Cam-2 ) ;
10847: LD_EXP 21
10851: PPUSH
10852: LD_STRING DH-Cam-2
10854: PPUSH
10855: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
10859: LD_EXP 21
10863: PPUSH
10864: LD_STRING DH-Cam-3
10866: PPUSH
10867: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10871: LD_EXP 21
10875: PPUSH
10876: LD_STRING DH-Cam-4
10878: PPUSH
10879: CALL_OW 88
// if IsOk ( Kaia ) then
10883: LD_EXP 26
10887: PPUSH
10888: CALL_OW 302
10892: IFFALSE 10908
// Say ( Kaia , DK-Cam-5 ) else
10894: LD_EXP 26
10898: PPUSH
10899: LD_STRING DK-Cam-5
10901: PPUSH
10902: CALL_OW 88
10906: GO 10923
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
10908: LD_EXP 34
10912: PPUSH
10913: LD_STRING DArm-Cam-5
10915: PPUSH
10916: LD_STRING DArf-Cam-5
10918: PPUSH
10919: CALL 1274 0 3
// Say ( Olaf , DO-Cam-6 ) ;
10923: LD_EXP 30
10927: PPUSH
10928: LD_STRING DO-Cam-6
10930: PPUSH
10931: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
10935: LD_EXP 30
10939: PPUSH
10940: LD_STRING DO-Cam-7
10942: PPUSH
10943: CALL_OW 88
// DialogueOff ;
10947: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
10951: LD_STRING Radar
10953: PPUSH
10954: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
10958: LD_INT 6
10960: PPUSH
10961: LD_INT 2
10963: PPUSH
10964: LD_INT 1
10966: PPUSH
10967: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
10971: LD_INT 20
10973: PPUSH
10974: LD_INT 2
10976: PPUSH
10977: LD_INT 1
10979: PPUSH
10980: CALL_OW 324
// end ;
10984: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
10985: LD_INT 22
10987: PUSH
10988: LD_INT 2
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PUSH
10995: LD_INT 2
10997: PUSH
10998: LD_INT 34
11000: PUSH
11001: LD_INT 30
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: PUSH
11008: LD_INT 35
11010: PUSH
11011: LD_INT 30
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: LIST
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PPUSH
11027: CALL_OW 69
11031: IFFALSE 11043
11033: GO 11035
11035: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
11036: LD_STRING RadarDone
11038: PPUSH
11039: CALL_OW 337
11043: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
11044: LD_INT 22
11046: PUSH
11047: LD_INT 2
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PUSH
11054: LD_INT 34
11056: PUSH
11057: LD_EXP 50
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PPUSH
11070: CALL_OW 69
11074: IFFALSE 11086
11076: GO 11078
11078: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
11079: LD_STRING CraneDone
11081: PPUSH
11082: CALL_OW 337
11086: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
11087: LD_EXP 30
11091: PPUSH
11092: CALL_OW 302
11096: PUSH
11097: LD_EXP 33
11101: PPUSH
11102: CALL_OW 302
11106: AND
11107: PUSH
11108: LD_INT 6
11110: PPUSH
11111: LD_INT 2
11113: PPUSH
11114: CALL_OW 321
11118: PUSH
11119: LD_INT 2
11121: EQUAL
11122: AND
11123: PUSH
11124: LD_EXP 33
11128: PPUSH
11129: LD_EXP 21
11133: PPUSH
11134: CALL_OW 296
11138: PUSH
11139: LD_INT 10
11141: LESS
11142: PUSH
11143: LD_EXP 33
11147: PPUSH
11148: CALL_OW 310
11152: OR
11153: AND
11154: IFFALSE 11368
11156: GO 11158
11158: DISABLE
// begin DialogueOn ;
11159: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
11163: LD_EXP 33
11167: PPUSH
11168: LD_STRING DA-RC-1
11170: PPUSH
11171: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
11175: LD_EXP 33
11179: PPUSH
11180: LD_STRING DA-RC-2
11182: PPUSH
11183: CALL_OW 88
// if IsOk ( Kaia ) then
11187: LD_EXP 26
11191: PPUSH
11192: CALL_OW 302
11196: IFFALSE 11270
// begin Say ( Kaia , DK-RC-3 ) ;
11198: LD_EXP 26
11202: PPUSH
11203: LD_STRING DK-RC-3
11205: PPUSH
11206: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
11210: LD_EXP 33
11214: PPUSH
11215: LD_STRING DA-RC-4
11217: PPUSH
11218: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
11222: LD_EXP 26
11226: PPUSH
11227: LD_STRING DK-RC-5
11229: PPUSH
11230: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
11234: LD_EXP 33
11238: PPUSH
11239: LD_STRING DA-RC-6
11241: PPUSH
11242: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
11246: LD_EXP 26
11250: PPUSH
11251: LD_STRING DK-RC-7
11253: PPUSH
11254: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
11258: LD_EXP 33
11262: PPUSH
11263: LD_STRING DA-RC-8
11265: PPUSH
11266: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
11270: LD_EXP 21
11274: PPUSH
11275: LD_STRING DH-RC-9
11277: PPUSH
11278: CALL_OW 88
// if IsOk ( Markov ) then
11282: LD_EXP 28
11286: PPUSH
11287: CALL_OW 302
11291: IFFALSE 11319
// begin Say ( Markov , DMar-RC-10 ) ;
11293: LD_EXP 28
11297: PPUSH
11298: LD_STRING DMar-RC-10
11300: PPUSH
11301: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
11305: LD_EXP 28
11309: PPUSH
11310: LD_STRING DMar-RC-11
11312: PPUSH
11313: CALL_OW 88
// end else
11317: GO 11331
// begin Say ( Olaf , DO-RC-a-10 ) ;
11319: LD_EXP 30
11323: PPUSH
11324: LD_STRING DO-RC-a-10
11326: PPUSH
11327: CALL_OW 88
// end ; DialogueOff ;
11331: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
11335: LD_STRING RemoteControl
11337: PPUSH
11338: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
11342: LD_INT 15
11344: PPUSH
11345: LD_INT 2
11347: PPUSH
11348: LD_INT 1
11350: PPUSH
11351: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
11355: LD_INT 22
11357: PPUSH
11358: LD_INT 2
11360: PPUSH
11361: LD_INT 1
11363: PPUSH
11364: CALL_OW 324
// end ;
11368: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
11369: LD_INT 12
11371: PPUSH
11372: LD_INT 22
11374: PUSH
11375: LD_INT 2
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: PPUSH
11382: CALL_OW 70
11386: IFFALSE 11753
11388: GO 11390
11390: DISABLE
11391: LD_INT 0
11393: PPUSH
// begin PrepareWestBase ;
11394: CALL 3992 0 0
// westBaseSpotted := true ;
11398: LD_ADDR_EXP 5
11402: PUSH
11403: LD_INT 1
11405: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11406: LD_INT 70
11408: PPUSH
11409: CALL_OW 67
// InGameOn ;
11413: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
11417: LD_INT 56
11419: PPUSH
11420: LD_INT 77
11422: PPUSH
11423: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
11427: LD_INT 56
11429: PPUSH
11430: LD_INT 77
11432: PPUSH
11433: LD_INT 2
11435: PPUSH
11436: LD_INT 12
11438: NEG
11439: PPUSH
11440: CALL_OW 330
// wait ( 0 0$2 ) ;
11444: LD_INT 70
11446: PPUSH
11447: CALL_OW 67
// DialogueOn ;
11451: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
11455: LD_EXP 21
11459: PPUSH
11460: LD_STRING DH-Rbase-1
11462: PPUSH
11463: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
11467: LD_EXP 26
11471: PPUSH
11472: LD_STRING DK-Rbase-2
11474: PPUSH
11475: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
11479: LD_EXP 26
11483: PPUSH
11484: LD_STRING DK-Rbase-3
11486: PPUSH
11487: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
11491: LD_EXP 26
11495: PPUSH
11496: LD_STRING DK-Rbase-4
11498: PPUSH
11499: CALL_OW 88
// DialogueOff ;
11503: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
11507: LD_INT 56
11509: PPUSH
11510: LD_INT 77
11512: PPUSH
11513: LD_INT 2
11515: PPUSH
11516: CALL_OW 331
// InGameOff ;
11520: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
11524: LD_INT 35
11526: PPUSH
11527: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
11531: LD_EXP 42
11535: NOT
11536: PUSH
11537: LD_EXP 43
11541: NOT
11542: AND
11543: IFFALSE 11524
// wait ( 0 0$2 ) ;
11545: LD_INT 70
11547: PPUSH
11548: CALL_OW 67
// if IsOk ( Kaia ) then
11552: LD_EXP 26
11556: PPUSH
11557: CALL_OW 302
11561: IFFALSE 11676
// begin DialogueOn ;
11563: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
11567: LD_INT 56
11569: PPUSH
11570: LD_INT 81
11572: PPUSH
11573: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11577: LD_EXP 26
11581: PPUSH
11582: LD_STRING DK-Rbase-5
11584: PPUSH
11585: CALL_OW 88
// if IsOk ( Givi ) then
11589: LD_EXP 22
11593: PPUSH
11594: CALL_OW 302
11598: IFFALSE 11672
// begin Say ( Givi , DG-Rbase-6 ) ;
11600: LD_EXP 22
11604: PPUSH
11605: LD_STRING DG-Rbase-6
11607: PPUSH
11608: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11612: LD_EXP 22
11616: PPUSH
11617: LD_STRING DG-Rbase-7
11619: PPUSH
11620: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11624: LD_EXP 26
11628: PPUSH
11629: LD_STRING DK-Rbase-8
11631: PPUSH
11632: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11636: LD_EXP 22
11640: PPUSH
11641: LD_STRING DG-Rbase-9
11643: PPUSH
11644: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11648: LD_EXP 22
11652: PPUSH
11653: LD_STRING DG-Rbase-10
11655: PPUSH
11656: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11660: LD_EXP 26
11664: PPUSH
11665: LD_STRING DK-Rbase-11
11667: PPUSH
11668: CALL_OW 88
// end ; DialogueOff ;
11672: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11676: LD_ADDR_VAR 0 1
11680: PUSH
11681: LD_INT 12
11683: PPUSH
11684: LD_INT 22
11686: PUSH
11687: LD_INT 3
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: PUSH
11694: LD_INT 21
11696: PUSH
11697: LD_INT 3
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: PPUSH
11708: CALL_OW 70
11712: PUSH
11713: FOR_IN
11714: IFFALSE 11730
// SetSide ( i , 2 ) ;
11716: LD_VAR 0 1
11720: PPUSH
11721: LD_INT 2
11723: PPUSH
11724: CALL_OW 235
11728: GO 11713
11730: POP
11731: POP
// westBaseCaptured := true ;
11732: LD_ADDR_EXP 9
11736: PUSH
11737: LD_INT 1
11739: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
11740: LD_INT 0
11742: PPUSH
11743: LD_INT 2
11745: PPUSH
11746: LD_INT 1
11748: PPUSH
11749: CALL_OW 324
// end ;
11753: PPOPN 1
11755: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
11756: LD_EXP 38
11760: NOT
11761: PUSH
11762: LD_INT 10
11764: PPUSH
11765: CALL_OW 255
11769: PUSH
11770: LD_INT 2
11772: EQUAL
11773: OR
11774: IFFALSE 11911
11776: GO 11778
11778: DISABLE
// begin DialogueOn ;
11779: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
11783: LD_EXP 21
11787: PPUSH
11788: LD_STRING DH-Goal-1
11790: PPUSH
11791: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
11795: LD_EXP 29
11799: PPUSH
11800: LD_STRING DShar-Goal-2
11802: PPUSH
11803: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
11807: LD_EXP 21
11811: PPUSH
11812: LD_STRING DH-Goal-3
11814: PPUSH
11815: CALL_OW 88
// if reinforcementsAllowed then
11819: LD_EXP 14
11823: IFFALSE 11849
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
11825: LD_EXP 29
11829: PPUSH
11830: LD_STRING DShar-Goal-4
11832: PPUSH
11833: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
11837: LD_EXP 21
11841: PPUSH
11842: LD_STRING DH-Goal-5
11844: PPUSH
11845: CALL_OW 88
// end ; DialogueOff ;
11849: CALL_OW 7
// eastBaseCaptured := true ;
11853: LD_ADDR_EXP 10
11857: PUSH
11858: LD_INT 1
11860: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
11861: LD_STRING BaseCaptured
11863: PPUSH
11864: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
11868: LD_INT 10
11870: PPUSH
11871: LD_INT 2
11873: PPUSH
11874: CALL_OW 235
// if not reinforcementsAllowed then
11878: LD_EXP 14
11882: NOT
11883: IFFALSE 11887
// exit ;
11885: GO 11911
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
11887: LD_INT 21000
11889: PUSH
11890: LD_INT 1050
11892: NEG
11893: PPUSH
11894: LD_INT 1050
11896: PPUSH
11897: CALL_OW 12
11901: PLUS
11902: PPUSH
11903: CALL_OW 67
// PrepareReinforcements ;
11907: CALL 2250 0 0
// end ;
11911: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
11912: LD_INT 22
11914: PUSH
11915: LD_INT 2
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PUSH
11922: LD_INT 30
11924: PUSH
11925: LD_INT 13
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PPUSH
11936: CALL_OW 69
11940: IFFALSE 11957
11942: GO 11944
11944: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
11945: LD_EXP 22
11949: PPUSH
11950: LD_STRING DG-Lab-1
11952: PPUSH
11953: CALL_OW 88
// end ;
11957: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
11958: LD_INT 5
11960: PPUSH
11961: LD_INT 2
11963: PPUSH
11964: CALL_OW 321
11968: PUSH
11969: LD_INT 2
11971: EQUAL
11972: PUSH
11973: LD_EXP 22
11977: PPUSH
11978: CALL_OW 302
11982: AND
11983: IFFALSE 12044
11985: GO 11987
11987: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
11988: LD_EXP 22
11992: PPUSH
11993: LD_STRING DG-Stim-1
11995: PPUSH
11996: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
12000: LD_EXP 21
12004: PPUSH
12005: LD_STRING DH-Stim-2
12007: PPUSH
12008: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
12012: LD_EXP 22
12016: PPUSH
12017: LD_STRING DG-Stim-3
12019: PPUSH
12020: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
12024: LD_EXP 21
12028: PPUSH
12029: LD_STRING DH-Stim-4
12031: PPUSH
12032: CALL_OW 88
// drugsResearched := true ;
12036: LD_ADDR_EXP 11
12040: PUSH
12041: LD_INT 1
12043: ST_TO_ADDR
// end ;
12044: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
12045: LD_EXP 11
12049: IFFALSE 12361
12051: GO 12053
12053: DISABLE
12054: LD_INT 0
12056: PPUSH
12057: PPUSH
12058: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12059: LD_ADDR_VAR 0 2
12063: PUSH
12064: LD_EXP 21
12068: PUSH
12069: LD_EXP 22
12073: PUSH
12074: LD_EXP 30
12078: PUSH
12079: LD_EXP 28
12083: PUSH
12084: LD_EXP 26
12088: PUSH
12089: LD_EXP 27
12093: PUSH
12094: LD_EXP 32
12098: PUSH
12099: LD_EXP 25
12103: PUSH
12104: LD_EXP 23
12108: PUSH
12109: LD_EXP 24
12113: PUSH
12114: LD_EXP 33
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12132: LD_ADDR_VAR 0 3
12136: PUSH
12137: LD_STRING H
12139: PUSH
12140: LD_STRING G
12142: PUSH
12143: LD_STRING O
12145: PUSH
12146: LD_STRING Mar
12148: PUSH
12149: LD_STRING K
12151: PUSH
12152: LD_STRING S
12154: PUSH
12155: LD_STRING Ks
12157: PUSH
12158: LD_STRING Kam
12160: PUSH
12161: LD_STRING M
12163: PUSH
12164: LD_STRING I
12166: PUSH
12167: LD_STRING A
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12183: LD_INT 35
12185: PPUSH
12186: CALL_OW 67
// for i := tmp downto 1 do
12190: LD_ADDR_VAR 0 1
12194: PUSH
12195: DOUBLE
12196: LD_VAR 0 2
12200: INC
12201: ST_TO_ADDR
12202: LD_INT 1
12204: PUSH
12205: FOR_DOWNTO
12206: IFFALSE 12352
// if GetLives ( tmp [ i ] ) < 250 then
12208: LD_VAR 0 2
12212: PUSH
12213: LD_VAR 0 1
12217: ARRAY
12218: PPUSH
12219: CALL_OW 256
12223: PUSH
12224: LD_INT 250
12226: LESS
12227: IFFALSE 12350
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
12229: LD_ADDR_EXP 19
12233: PUSH
12234: LD_EXP 19
12238: PUSH
12239: LD_INT 1
12241: PLUS
12242: ST_TO_ADDR
// DialogueOn ;
12243: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
12247: LD_VAR 0 2
12251: PUSH
12252: LD_VAR 0 1
12256: ARRAY
12257: PPUSH
12258: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
12262: LD_VAR 0 2
12266: PUSH
12267: LD_VAR 0 1
12271: ARRAY
12272: PPUSH
12273: LD_STRING D
12275: PUSH
12276: LD_VAR 0 3
12280: PUSH
12281: LD_VAR 0 1
12285: ARRAY
12286: STR
12287: PUSH
12288: LD_STRING -Stim-a-1
12290: STR
12291: PPUSH
12292: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
12296: LD_ADDR_VAR 0 2
12300: PUSH
12301: LD_VAR 0 2
12305: PPUSH
12306: LD_VAR 0 1
12310: PPUSH
12311: CALL_OW 3
12315: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12316: LD_ADDR_VAR 0 3
12320: PUSH
12321: LD_VAR 0 3
12325: PPUSH
12326: LD_VAR 0 1
12330: PPUSH
12331: CALL_OW 3
12335: ST_TO_ADDR
// drugsTested := true ;
12336: LD_ADDR_EXP 6
12340: PUSH
12341: LD_INT 1
12343: ST_TO_ADDR
// DialogueOff ;
12344: CALL_OW 7
// break ;
12348: GO 12352
// end ;
12350: GO 12205
12352: POP
12353: POP
// until not tmp ;
12354: LD_VAR 0 2
12358: NOT
12359: IFFALSE 12183
// end ;
12361: PPOPN 3
12363: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
12364: LD_INT 22
12366: PUSH
12367: LD_INT 2
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PUSH
12374: LD_INT 34
12376: PUSH
12377: LD_INT 31
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: PPUSH
12388: CALL_OW 69
12392: PUSH
12393: LD_INT 22
12395: PUSH
12396: LD_INT 2
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: LD_INT 33
12405: PUSH
12406: LD_INT 2
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: PPUSH
12417: CALL_OW 69
12421: AND
12422: IFFALSE 12435
12424: GO 12426
12426: DISABLE
// remoteControlConstructed := true ;
12427: LD_ADDR_EXP 12
12431: PUSH
12432: LD_INT 1
12434: ST_TO_ADDR
12435: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
12436: LD_EXP 12
12440: IFFALSE 12740
12442: GO 12444
12444: DISABLE
12445: LD_INT 0
12447: PPUSH
12448: PPUSH
12449: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12450: LD_ADDR_VAR 0 2
12454: PUSH
12455: LD_EXP 21
12459: PUSH
12460: LD_EXP 22
12464: PUSH
12465: LD_EXP 30
12469: PUSH
12470: LD_EXP 28
12474: PUSH
12475: LD_EXP 26
12479: PUSH
12480: LD_EXP 27
12484: PUSH
12485: LD_EXP 32
12489: PUSH
12490: LD_EXP 25
12494: PUSH
12495: LD_EXP 23
12499: PUSH
12500: LD_EXP 24
12504: PUSH
12505: LD_EXP 33
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12523: LD_ADDR_VAR 0 3
12527: PUSH
12528: LD_STRING H
12530: PUSH
12531: LD_STRING G
12533: PUSH
12534: LD_STRING O
12536: PUSH
12537: LD_STRING Mar
12539: PUSH
12540: LD_STRING K
12542: PUSH
12543: LD_STRING S
12545: PUSH
12546: LD_STRING Ks
12548: PUSH
12549: LD_STRING Kam
12551: PUSH
12552: LD_STRING M
12554: PUSH
12555: LD_STRING I
12557: PUSH
12558: LD_STRING A
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12574: LD_INT 35
12576: PPUSH
12577: CALL_OW 67
// for i := tmp downto 1 do
12581: LD_ADDR_VAR 0 1
12585: PUSH
12586: DOUBLE
12587: LD_VAR 0 2
12591: INC
12592: ST_TO_ADDR
12593: LD_INT 1
12595: PUSH
12596: FOR_DOWNTO
12597: IFFALSE 12731
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
12599: LD_VAR 0 2
12603: PUSH
12604: LD_VAR 0 1
12608: ARRAY
12609: PPUSH
12610: CALL_OW 257
12614: PUSH
12615: LD_INT 3
12617: EQUAL
12618: PUSH
12619: LD_VAR 0 2
12623: PUSH
12624: LD_VAR 0 1
12628: ARRAY
12629: PPUSH
12630: CALL_OW 432
12634: AND
12635: IFFALSE 12729
// begin DialogueOn ;
12637: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12641: LD_VAR 0 2
12645: PUSH
12646: LD_VAR 0 1
12650: ARRAY
12651: PPUSH
12652: LD_STRING D
12654: PUSH
12655: LD_VAR 0 3
12659: PUSH
12660: LD_VAR 0 1
12664: ARRAY
12665: STR
12666: PUSH
12667: LD_STRING -RC-a-1
12669: STR
12670: PPUSH
12671: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12675: LD_ADDR_VAR 0 2
12679: PUSH
12680: LD_VAR 0 2
12684: PPUSH
12685: LD_VAR 0 1
12689: PPUSH
12690: CALL_OW 3
12694: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12695: LD_ADDR_VAR 0 3
12699: PUSH
12700: LD_VAR 0 3
12704: PPUSH
12705: LD_VAR 0 1
12709: PPUSH
12710: CALL_OW 3
12714: ST_TO_ADDR
// DialogueOff ;
12715: CALL_OW 7
// remoteControlTested := true ;
12719: LD_ADDR_EXP 7
12723: PUSH
12724: LD_INT 1
12726: ST_TO_ADDR
// break ;
12727: GO 12731
// end ;
12729: GO 12596
12731: POP
12732: POP
// until not tmp ;
12733: LD_VAR 0 2
12737: NOT
12738: IFFALSE 12574
// end ;
12740: PPOPN 3
12742: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
12743: LD_EXP 7
12747: PUSH
12748: LD_EXP 28
12752: PPUSH
12753: CALL_OW 302
12757: AND
12758: IFFALSE 12787
12760: GO 12762
12762: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
12763: LD_EXP 28
12767: PPUSH
12768: LD_STRING DMar-RC-a-2
12770: PPUSH
12771: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
12775: LD_EXP 28
12779: PPUSH
12780: LD_STRING DMar-RC-a-3
12782: PPUSH
12783: CALL_OW 88
// end ;
12787: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
12788: LD_EXP 14
12792: PUSH
12793: LD_EXP 21
12797: PPUSH
12798: LD_EXP 33
12802: PPUSH
12803: CALL_OW 296
12807: PUSH
12808: LD_INT 8
12810: LESS
12811: AND
12812: PUSH
12813: LD_INT 2
12815: PPUSH
12816: CALL_OW 463
12820: NOT
12821: AND
12822: PUSH
12823: LD_EXP 33
12827: PPUSH
12828: CALL_OW 302
12832: AND
12833: PUSH
12834: LD_EXP 21
12838: PPUSH
12839: CALL_OW 302
12843: AND
12844: IFFALSE 13022
12846: GO 12848
12848: DISABLE
// begin if not IsInUnit ( Aviradze ) then
12849: LD_EXP 33
12853: PPUSH
12854: CALL_OW 310
12858: NOT
12859: IFFALSE 12875
// ComTurnUnit ( Aviradze , Heike ) ;
12861: LD_EXP 33
12865: PPUSH
12866: LD_EXP 21
12870: PPUSH
12871: CALL_OW 119
// if not IsInUnit ( Heike ) then
12875: LD_EXP 21
12879: PPUSH
12880: CALL_OW 310
12884: NOT
12885: IFFALSE 12901
// ComTurnUnit ( Heike , Aviradze ) ;
12887: LD_EXP 21
12891: PPUSH
12892: LD_EXP 33
12896: PPUSH
12897: CALL_OW 119
// wait ( 0 0$1 ) ;
12901: LD_INT 35
12903: PPUSH
12904: CALL_OW 67
// DialogueOn ;
12908: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
12912: LD_EXP 33
12916: PPUSH
12917: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
12921: LD_EXP 21
12925: PPUSH
12926: LD_STRING DH-Beria-1
12928: PPUSH
12929: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
12933: LD_EXP 33
12937: PPUSH
12938: LD_STRING DA-Beria-2
12940: PPUSH
12941: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
12945: LD_EXP 21
12949: PPUSH
12950: LD_STRING DH-Beria-3
12952: PPUSH
12953: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
12957: LD_EXP 33
12961: PPUSH
12962: LD_STRING DA-Beria-4
12964: PPUSH
12965: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
12969: LD_EXP 33
12973: PPUSH
12974: LD_STRING DA-Beria-5
12976: PPUSH
12977: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
12981: LD_EXP 33
12985: PPUSH
12986: LD_STRING DA-Beria-6
12988: PPUSH
12989: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
12993: LD_EXP 21
12997: PPUSH
12998: LD_STRING DA-Beria-7
13000: PPUSH
13001: CALL_OW 88
// DialogueOff ;
13005: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
13009: LD_INT 52
13011: PPUSH
13012: LD_INT 2
13014: PPUSH
13015: LD_INT 1
13017: PPUSH
13018: CALL_OW 322
// end ;
13022: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
13023: LD_EXP 26
13027: PPUSH
13028: CALL_OW 300
13032: PUSH
13033: LD_EXP 26
13037: PPUSH
13038: CALL_OW 256
13042: PUSH
13043: LD_INT 10
13045: LESS
13046: AND
13047: IFFALSE 13084
13049: GO 13051
13051: DISABLE
// begin DialogueOn ;
13052: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
13056: LD_EXP 26
13060: PPUSH
13061: LD_STRING DK-Kdeath-1
13063: PPUSH
13064: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
13068: LD_EXP 21
13072: PPUSH
13073: LD_STRING DH-Kdeath-2
13075: PPUSH
13076: CALL_OW 88
// DialogueOff ;
13080: CALL_OW 7
// end ;
13084: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
13085: LD_INT 2
13087: PPUSH
13088: LD_EXP 39
13092: PPUSH
13093: CALL 1374 0 2
13097: IFFALSE 13114
13099: GO 13101
13101: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
13102: LD_EXP 21
13106: PPUSH
13107: LD_STRING DH-Obj-1
13109: PPUSH
13110: CALL_OW 88
13114: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
13115: LD_INT 2
13117: PPUSH
13118: LD_EXP 40
13122: PPUSH
13123: CALL 1374 0 2
13127: IFFALSE 13144
13129: GO 13131
13131: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
13132: LD_EXP 21
13136: PPUSH
13137: LD_STRING DH-Obj-a-1
13139: PPUSH
13140: CALL_OW 88
13144: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 7 7$00 , 6 6$30 , 6 6$00 , 5 5$30 ] [ Difficulty ] do
13145: LD_EXP 10
13149: PUSH
13150: LD_OWVAR 1
13154: PUSH
13155: LD_INT 14700
13157: PUSH
13158: LD_INT 13650
13160: PUSH
13161: LD_INT 12600
13163: PUSH
13164: LD_INT 11550
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: PUSH
13173: LD_OWVAR 67
13177: ARRAY
13178: GREATEREQUAL
13179: OR
13180: IFFALSE 13208
13182: GO 13184
13184: DISABLE
// begin wait ( rand ( 2 2$00 , 2 2$30 ) ) ;
13185: LD_INT 4200
13187: PPUSH
13188: LD_INT 5250
13190: PPUSH
13191: CALL_OW 12
13195: PPUSH
13196: CALL_OW 67
// convoyStarted := true ;
13200: LD_ADDR_EXP 17
13204: PUSH
13205: LD_INT 1
13207: ST_TO_ADDR
// end ;
13208: END
// every 0 0$1 trigger convoyStarted do
13209: LD_EXP 17
13213: IFFALSE 13297
13215: GO 13217
13217: DISABLE
// begin DialogueOn ;
13218: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
13222: LD_EXP 29
13226: PPUSH
13227: LD_STRING DShar-Convoy-1
13229: PPUSH
13230: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
13234: LD_EXP 21
13238: PPUSH
13239: LD_STRING DH-Convoy-2
13241: PPUSH
13242: CALL_OW 88
// DialogueOff ;
13246: CALL_OW 7
// PrepareConvoy ;
13250: CALL 4639 0 0
// repeat wait ( rand ( 2 2$30 , 5 5$30 ) ) ;
13254: LD_INT 5250
13256: PPUSH
13257: LD_INT 11550
13259: PPUSH
13260: CALL_OW 12
13264: PPUSH
13265: CALL_OW 67
// PrepareConvoy ;
13269: CALL 4639 0 0
// convoyCounter := convoyCounter - 1 ;
13273: LD_ADDR_EXP 16
13277: PUSH
13278: LD_EXP 16
13282: PUSH
13283: LD_INT 1
13285: MINUS
13286: ST_TO_ADDR
// until convoyCounter <= 0 ;
13287: LD_EXP 16
13291: PUSH
13292: LD_INT 0
13294: LESSEQUAL
13295: IFFALSE 13254
// end ;
13297: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
13298: LD_EXP 15
13302: PUSH
13303: LD_INT 10
13305: GREATEREQUAL
13306: IFFALSE 13323
13308: GO 13310
13310: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
13311: LD_EXP 31
13315: PPUSH
13316: LD_STRING DOm-Fail-1
13318: PPUSH
13319: CALL_OW 94
13323: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
13324: LD_EXP 39
13328: NOT
13329: PUSH
13330: LD_EXP 40
13334: NOT
13335: AND
13336: IFFALSE 13348
13338: GO 13340
13340: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
13341: LD_STRING RaiderDone
13343: PPUSH
13344: CALL_OW 337
13348: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
13349: LD_INT 22
13351: PUSH
13352: LD_INT 2
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: PUSH
13359: LD_INT 33
13361: PUSH
13362: LD_INT 2
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: PPUSH
13373: CALL_OW 69
13377: PUSH
13378: LD_INT 3
13380: GREATEREQUAL
13381: PUSH
13382: LD_INT 22
13384: PUSH
13385: LD_INT 2
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PUSH
13392: LD_INT 34
13394: PUSH
13395: LD_INT 31
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PPUSH
13406: CALL_OW 69
13410: PUSH
13411: LD_INT 2
13413: GREATEREQUAL
13414: AND
13415: IFFALSE 13427
13417: GO 13419
13419: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
13420: LD_STRING RemoteControlDone
13422: PPUSH
13423: CALL_OW 337
13427: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var tmp ;
13428: LD_EXP 16
13432: PUSH
13433: LD_INT 1
13435: LESS
13436: PUSH
13437: LD_EXP 41
13441: PPUSH
13442: LD_INT 52
13444: PUSH
13445: EMPTY
13446: LIST
13447: PUSH
13448: LD_INT 21
13450: PUSH
13451: LD_INT 1
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PPUSH
13462: CALL_OW 72
13466: NOT
13467: AND
13468: PUSH
13469: LD_OWVAR 1
13473: PUSH
13474: LD_INT 126000
13476: GREATEREQUAL
13477: OR
13478: IFFALSE 14299
13480: GO 13482
13482: DISABLE
13483: LD_INT 0
13485: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
13486: LD_STRING ReinforcementsDone
13488: PPUSH
13489: CALL_OW 337
// music_class := music_victory ;
13493: LD_ADDR_OWVAR 72
13497: PUSH
13498: LD_INT 4
13500: ST_TO_ADDR
// InGameOn ;
13501: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
13505: LD_EXP 21
13509: PPUSH
13510: LD_STRING DH-end-1
13512: PPUSH
13513: CALL_OW 88
// wait ( 0 0$2 ) ;
13517: LD_INT 70
13519: PPUSH
13520: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
13524: LD_EXP 29
13528: PPUSH
13529: LD_STRING DShar-end-2
13531: PPUSH
13532: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
13536: LD_EXP 39
13540: NOT
13541: PUSH
13542: LD_EXP 40
13546: NOT
13547: AND
13548: IFFALSE 13564
// begin Say ( Heike , DH-end-3 ) ;
13550: LD_EXP 21
13554: PPUSH
13555: LD_STRING DH-end-3
13557: PPUSH
13558: CALL_OW 88
// end else
13562: GO 13661
// begin Say ( Heike , DH-end-a-3 ) ;
13564: LD_EXP 21
13568: PPUSH
13569: LD_STRING DH-end-a-3
13571: PPUSH
13572: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
13576: LD_EXP 29
13580: PPUSH
13581: LD_STRING DShar-end-a-4
13583: PPUSH
13584: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
13588: LD_EXP 21
13592: PPUSH
13593: LD_STRING DH-end-a-5
13595: PPUSH
13596: CALL_OW 88
// InGameOff ;
13600: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
13604: LD_INT 35
13606: PPUSH
13607: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
13611: LD_INT 22
13613: PUSH
13614: LD_INT 3
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PUSH
13621: LD_INT 21
13623: PUSH
13624: LD_INT 1
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: PPUSH
13635: CALL_OW 69
13639: PUSH
13640: LD_INT 0
13642: EQUAL
13643: IFFALSE 13604
// InGameOn ;
13645: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
13649: LD_EXP 21
13653: PPUSH
13654: LD_STRING DH-end-a-6
13656: PPUSH
13657: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
13661: LD_EXP 29
13665: PPUSH
13666: LD_STRING DShar-end-3
13668: PPUSH
13669: CALL_OW 94
// if not flamethrowerBuilt then
13673: LD_EXP 20
13677: NOT
13678: IFFALSE 13687
// SetAchievement ( ACH_FIRE ) ;
13680: LD_STRING ACH_FIRE
13682: PPUSH
13683: CALL_OW 543
// if drugsTested then
13687: LD_EXP 6
13691: IFFALSE 13705
// AddMedal ( med1 , 1 ) else
13693: LD_STRING med1
13695: PPUSH
13696: LD_INT 1
13698: PPUSH
13699: CALL_OW 101
13703: GO 13745
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
13705: LD_INT 5
13707: PPUSH
13708: LD_INT 2
13710: PPUSH
13711: CALL_OW 321
13715: PUSH
13716: LD_INT 2
13718: EQUAL
13719: IFFALSE 13734
// AddMedal ( med1 , - 1 ) else
13721: LD_STRING med1
13723: PPUSH
13724: LD_INT 1
13726: NEG
13727: PPUSH
13728: CALL_OW 101
13732: GO 13745
// AddMedal ( med1 , - 2 ) ;
13734: LD_STRING med1
13736: PPUSH
13737: LD_INT 2
13739: NEG
13740: PPUSH
13741: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
13745: LD_INT 22
13747: PUSH
13748: LD_INT 2
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: PUSH
13755: LD_INT 33
13757: PUSH
13758: LD_INT 2
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: PPUSH
13769: CALL_OW 69
13773: PUSH
13774: LD_INT 3
13776: GREATEREQUAL
13777: PUSH
13778: LD_INT 22
13780: PUSH
13781: LD_INT 2
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: PUSH
13788: LD_INT 34
13790: PUSH
13791: LD_INT 31
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: PPUSH
13802: CALL_OW 69
13806: PUSH
13807: LD_INT 1
13809: GREATEREQUAL
13810: AND
13811: IFFALSE 13825
// AddMedal ( med2 , 1 ) else
13813: LD_STRING med2
13815: PPUSH
13816: LD_INT 1
13818: PPUSH
13819: CALL_OW 101
13823: GO 13836
// AddMedal ( med2 , - 1 ) ;
13825: LD_STRING med2
13827: PPUSH
13828: LD_INT 1
13830: NEG
13831: PPUSH
13832: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
13836: LD_EXP 15
13840: PUSH
13841: LD_INT 10
13843: PUSH
13844: LD_INT 8
13846: PUSH
13847: LD_INT 6
13849: PUSH
13850: LD_INT 5
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: PUSH
13859: LD_OWVAR 67
13863: ARRAY
13864: LESS
13865: IFFALSE 13879
// AddMedal ( med3 , 1 ) else
13867: LD_STRING med3
13869: PPUSH
13870: LD_INT 1
13872: PPUSH
13873: CALL_OW 101
13877: GO 13890
// AddMedal ( med3 , - 1 ) ;
13879: LD_STRING med3
13881: PPUSH
13882: LD_INT 1
13884: NEG
13885: PPUSH
13886: CALL_OW 101
// GiveMedals ( MAIN ) ;
13890: LD_STRING MAIN
13892: PPUSH
13893: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13897: LD_INT 22
13899: PUSH
13900: LD_INT 2
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: PUSH
13907: LD_INT 23
13909: PUSH
13910: LD_INT 2
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: PUSH
13917: LD_INT 21
13919: PUSH
13920: LD_INT 1
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: LIST
13931: PPUSH
13932: CALL_OW 69
13936: PPUSH
13937: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
13941: LD_EXP 15
13945: PPUSH
13946: LD_STRING 05_ConvoySavedCounter
13948: PPUSH
13949: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
13953: LD_EXP 13
13957: PPUSH
13958: LD_STRING 05_Radar
13960: PPUSH
13961: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
13965: LD_EXP 6
13969: PPUSH
13970: LD_STRING 05_DrugsTested
13972: PPUSH
13973: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
13977: LD_INT 22
13979: PUSH
13980: LD_INT 2
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: PUSH
13987: LD_INT 33
13989: PUSH
13990: LD_INT 2
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: PPUSH
14001: CALL_OW 69
14005: PUSH
14006: LD_INT 3
14008: GREATEREQUAL
14009: PUSH
14010: LD_INT 22
14012: PUSH
14013: LD_INT 2
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PUSH
14020: LD_INT 34
14022: PUSH
14023: LD_INT 31
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PPUSH
14034: CALL_OW 69
14038: PUSH
14039: LD_INT 2
14041: GREATEREQUAL
14042: AND
14043: PPUSH
14044: LD_STRING 05_RemoteControl
14046: PPUSH
14047: CALL_OW 39
// SaveCharacters ( Heike , 05_Heike ) ;
14051: LD_EXP 21
14055: PPUSH
14056: LD_STRING 05_Heike
14058: PPUSH
14059: CALL_OW 38
// if Aviradze then
14063: LD_EXP 33
14067: IFFALSE 14081
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
14069: LD_EXP 33
14073: PPUSH
14074: LD_STRING 05_Aviradze
14076: PPUSH
14077: CALL_OW 38
// if Ibrahim then
14081: LD_EXP 24
14085: IFFALSE 14099
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
14087: LD_EXP 24
14091: PPUSH
14092: LD_STRING 05_Ibrahim
14094: PPUSH
14095: CALL_OW 38
// if Kamil then
14099: LD_EXP 25
14103: IFFALSE 14117
// SaveCharacters ( Kamil , 05_Kamil ) ;
14105: LD_EXP 25
14109: PPUSH
14110: LD_STRING 05_Kamil
14112: PPUSH
14113: CALL_OW 38
// if Sophia then
14117: LD_EXP 27
14121: IFFALSE 14135
// SaveCharacters ( Sophia , 05_Sophia ) ;
14123: LD_EXP 27
14127: PPUSH
14128: LD_STRING 05_Sophia
14130: PPUSH
14131: CALL_OW 38
// if Kaia then
14135: LD_EXP 26
14139: IFFALSE 14153
// SaveCharacters ( Kaia , 05_Kaia ) ;
14141: LD_EXP 26
14145: PPUSH
14146: LD_STRING 05_Kaia
14148: PPUSH
14149: CALL_OW 38
// if Givi then
14153: LD_EXP 22
14157: IFFALSE 14171
// SaveCharacters ( Givi , 05_Givi ) ;
14159: LD_EXP 22
14163: PPUSH
14164: LD_STRING 05_Givi
14166: PPUSH
14167: CALL_OW 38
// if Mike then
14171: LD_EXP 23
14175: IFFALSE 14189
// SaveCharacters ( Mike , 05_Mike ) ;
14177: LD_EXP 23
14181: PPUSH
14182: LD_STRING 05_Mike
14184: PPUSH
14185: CALL_OW 38
// if Markov then
14189: LD_EXP 28
14193: IFFALSE 14207
// SaveCharacters ( Markov , 05_Markov ) ;
14195: LD_EXP 28
14199: PPUSH
14200: LD_STRING 05_Markov
14202: PPUSH
14203: CALL_OW 38
// if Kurt then
14207: LD_EXP 32
14211: IFFALSE 14225
// SaveCharacters ( Kurt , 05_Kurt ) ;
14213: LD_EXP 32
14217: PPUSH
14218: LD_STRING 05_Kurt
14220: PPUSH
14221: CALL_OW 38
// if heikeSecondSquad then
14225: LD_EXP 34
14229: IFFALSE 14243
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
14231: LD_EXP 34
14235: PPUSH
14236: LD_STRING 05_others
14238: PPUSH
14239: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14243: LD_ADDR_VAR 0 1
14247: PUSH
14248: LD_INT 22
14250: PUSH
14251: LD_INT 2
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 23
14260: PUSH
14261: LD_INT 0
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PPUSH
14272: CALL_OW 69
14276: ST_TO_ADDR
// if tmp then
14277: LD_VAR 0 1
14281: IFFALSE 14295
// SaveCharacters ( tmp , 05_apes ) ;
14283: LD_VAR 0 1
14287: PPUSH
14288: LD_STRING 05_apes
14290: PPUSH
14291: CALL_OW 38
// YouWin ;
14295: CALL_OW 103
// end ; end_of_file
14299: PPOPN 1
14301: END
// every 0 0$40 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
14302: LD_EXP 9
14306: PUSH
14307: LD_INT 13
14309: PPUSH
14310: LD_INT 1
14312: PPUSH
14313: CALL_OW 287
14317: PUSH
14318: LD_INT 25
14320: LESS
14321: AND
14322: IFFALSE 14349
14324: GO 14326
14326: DISABLE
// begin enable ;
14327: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
14328: LD_INT 1
14330: PPUSH
14331: LD_INT 5
14333: PPUSH
14334: CALL_OW 12
14338: PPUSH
14339: LD_INT 13
14341: PPUSH
14342: LD_INT 1
14344: PPUSH
14345: CALL_OW 55
// end ; end_of_file
14349: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
14350: LD_INT 0
14352: PPUSH
// ar_miner := 81 ;
14353: LD_ADDR_EXP 51
14357: PUSH
14358: LD_INT 81
14360: ST_TO_ADDR
// ar_crane := 88 ;
14361: LD_ADDR_EXP 50
14365: PUSH
14366: LD_INT 88
14368: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
14369: LD_ADDR_EXP 45
14373: PUSH
14374: LD_INT 89
14376: ST_TO_ADDR
// us_hack := 99 ;
14377: LD_ADDR_EXP 46
14381: PUSH
14382: LD_INT 99
14384: ST_TO_ADDR
// us_artillery := 97 ;
14385: LD_ADDR_EXP 47
14389: PUSH
14390: LD_INT 97
14392: ST_TO_ADDR
// ar_bio_bomb := 91 ;
14393: LD_ADDR_EXP 48
14397: PUSH
14398: LD_INT 91
14400: ST_TO_ADDR
// ar_mortar := 92 ;
14401: LD_ADDR_EXP 49
14405: PUSH
14406: LD_INT 92
14408: ST_TO_ADDR
// ru_radar := 98 ;
14409: LD_ADDR_EXP 44
14413: PUSH
14414: LD_INT 98
14416: ST_TO_ADDR
// tech_Artillery := 80 ;
14417: LD_ADDR_EXP 52
14421: PUSH
14422: LD_INT 80
14424: ST_TO_ADDR
// tech_RadMat := 81 ;
14425: LD_ADDR_EXP 53
14429: PUSH
14430: LD_INT 81
14432: ST_TO_ADDR
// tech_BasicTools := 82 ;
14433: LD_ADDR_EXP 54
14437: PUSH
14438: LD_INT 82
14440: ST_TO_ADDR
// tech_Cargo := 83 ;
14441: LD_ADDR_EXP 55
14445: PUSH
14446: LD_INT 83
14448: ST_TO_ADDR
// tech_Track := 84 ;
14449: LD_ADDR_EXP 56
14453: PUSH
14454: LD_INT 84
14456: ST_TO_ADDR
// tech_Crane := 85 ;
14457: LD_ADDR_EXP 57
14461: PUSH
14462: LD_INT 85
14464: ST_TO_ADDR
// tech_Bulldozer := 86 ;
14465: LD_ADDR_EXP 58
14469: PUSH
14470: LD_INT 86
14472: ST_TO_ADDR
// tech_Hovercraft := 87 ;
14473: LD_ADDR_EXP 59
14477: PUSH
14478: LD_INT 87
14480: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
14481: LD_ADDR_EXP 60
14485: PUSH
14486: LD_INT 88
14488: ST_TO_ADDR
// class_mastodont := 31 ;
14489: LD_ADDR_EXP 61
14493: PUSH
14494: LD_INT 31
14496: ST_TO_ADDR
// class_horse := 21 ;
14497: LD_ADDR_EXP 62
14501: PUSH
14502: LD_INT 21
14504: ST_TO_ADDR
// end ;
14505: LD_VAR 0 1
14509: RET
// every 1 do
14510: GO 14512
14512: DISABLE
// InitGlobalVariables ; end_of_file
14513: CALL 14350 0 0
14517: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
14518: LD_INT 0
14520: PPUSH
14521: PPUSH
14522: PPUSH
14523: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
14524: LD_VAR 0 1
14528: PPUSH
14529: CALL_OW 264
14533: PUSH
14534: LD_EXP 48
14538: EQUAL
14539: IFFALSE 14611
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
14541: LD_INT 68
14543: PPUSH
14544: LD_VAR 0 1
14548: PPUSH
14549: CALL_OW 255
14553: PPUSH
14554: CALL_OW 321
14558: PUSH
14559: LD_INT 2
14561: EQUAL
14562: IFFALSE 14574
// eff := 70 else
14564: LD_ADDR_VAR 0 4
14568: PUSH
14569: LD_INT 70
14571: ST_TO_ADDR
14572: GO 14582
// eff := 30 ;
14574: LD_ADDR_VAR 0 4
14578: PUSH
14579: LD_INT 30
14581: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
14582: LD_VAR 0 1
14586: PPUSH
14587: CALL_OW 250
14591: PPUSH
14592: LD_VAR 0 1
14596: PPUSH
14597: CALL_OW 251
14601: PPUSH
14602: LD_VAR 0 4
14606: PPUSH
14607: CALL_OW 495
// end ; end ;
14611: LD_VAR 0 2
14615: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
14616: LD_INT 0
14618: PPUSH
// end ;
14619: LD_VAR 0 4
14623: RET
// export function SOS_Command ( cmd ) ; begin
14624: LD_INT 0
14626: PPUSH
// end ;
14627: LD_VAR 0 2
14631: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
14632: LD_INT 0
14634: PPUSH
// end ;
14635: LD_VAR 0 6
14639: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
14640: LD_INT 0
14642: PPUSH
14643: PPUSH
// if not vehicle or not factory then
14644: LD_VAR 0 1
14648: NOT
14649: PUSH
14650: LD_VAR 0 2
14654: NOT
14655: OR
14656: IFFALSE 14660
// exit ;
14658: GO 14891
// if factoryWaypoints >= factory then
14660: LD_EXP 63
14664: PUSH
14665: LD_VAR 0 2
14669: GREATEREQUAL
14670: IFFALSE 14891
// if factoryWaypoints [ factory ] then
14672: LD_EXP 63
14676: PUSH
14677: LD_VAR 0 2
14681: ARRAY
14682: IFFALSE 14891
// begin if GetControl ( vehicle ) = control_manual then
14684: LD_VAR 0 1
14688: PPUSH
14689: CALL_OW 263
14693: PUSH
14694: LD_INT 1
14696: EQUAL
14697: IFFALSE 14778
// begin driver := IsDrivenBy ( vehicle ) ;
14699: LD_ADDR_VAR 0 4
14703: PUSH
14704: LD_VAR 0 1
14708: PPUSH
14709: CALL_OW 311
14713: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14714: LD_VAR 0 4
14718: PPUSH
14719: LD_EXP 63
14723: PUSH
14724: LD_VAR 0 2
14728: ARRAY
14729: PUSH
14730: LD_INT 3
14732: ARRAY
14733: PPUSH
14734: LD_EXP 63
14738: PUSH
14739: LD_VAR 0 2
14743: ARRAY
14744: PUSH
14745: LD_INT 4
14747: ARRAY
14748: PPUSH
14749: CALL_OW 171
// AddComExitVehicle ( driver ) ;
14753: LD_VAR 0 4
14757: PPUSH
14758: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
14762: LD_VAR 0 4
14766: PPUSH
14767: LD_VAR 0 2
14771: PPUSH
14772: CALL_OW 180
// end else
14776: GO 14891
// if GetControl ( vehicle ) = control_remote then
14778: LD_VAR 0 1
14782: PPUSH
14783: CALL_OW 263
14787: PUSH
14788: LD_INT 2
14790: EQUAL
14791: IFFALSE 14852
// begin wait ( 0 0$2 ) ;
14793: LD_INT 70
14795: PPUSH
14796: CALL_OW 67
// if Connect ( vehicle ) then
14800: LD_VAR 0 1
14804: PPUSH
14805: CALL 41449 0 1
14809: IFFALSE 14850
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14811: LD_VAR 0 1
14815: PPUSH
14816: LD_EXP 63
14820: PUSH
14821: LD_VAR 0 2
14825: ARRAY
14826: PUSH
14827: LD_INT 3
14829: ARRAY
14830: PPUSH
14831: LD_EXP 63
14835: PUSH
14836: LD_VAR 0 2
14840: ARRAY
14841: PUSH
14842: LD_INT 4
14844: ARRAY
14845: PPUSH
14846: CALL_OW 171
// end else
14850: GO 14891
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14852: LD_VAR 0 1
14856: PPUSH
14857: LD_EXP 63
14861: PUSH
14862: LD_VAR 0 2
14866: ARRAY
14867: PUSH
14868: LD_INT 3
14870: ARRAY
14871: PPUSH
14872: LD_EXP 63
14876: PUSH
14877: LD_VAR 0 2
14881: ARRAY
14882: PUSH
14883: LD_INT 4
14885: ARRAY
14886: PPUSH
14887: CALL_OW 171
// end ; end ;
14891: LD_VAR 0 3
14895: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
14896: LD_INT 0
14898: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
14899: LD_VAR 0 1
14903: PUSH
14904: LD_INT 250
14906: EQUAL
14907: PUSH
14908: LD_VAR 0 2
14912: PPUSH
14913: CALL_OW 264
14917: PUSH
14918: LD_EXP 51
14922: EQUAL
14923: AND
14924: IFFALSE 14945
// MinerPlaceMine ( unit , x , y ) ;
14926: LD_VAR 0 2
14930: PPUSH
14931: LD_VAR 0 4
14935: PPUSH
14936: LD_VAR 0 5
14940: PPUSH
14941: CALL 17673 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
14945: LD_VAR 0 1
14949: PUSH
14950: LD_INT 251
14952: EQUAL
14953: PUSH
14954: LD_VAR 0 2
14958: PPUSH
14959: CALL_OW 264
14963: PUSH
14964: LD_EXP 51
14968: EQUAL
14969: AND
14970: IFFALSE 14991
// MinerDetonateMine ( unit , x , y ) ;
14972: LD_VAR 0 2
14976: PPUSH
14977: LD_VAR 0 4
14981: PPUSH
14982: LD_VAR 0 5
14986: PPUSH
14987: CALL 17950 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
14991: LD_VAR 0 1
14995: PUSH
14996: LD_INT 252
14998: EQUAL
14999: PUSH
15000: LD_VAR 0 2
15004: PPUSH
15005: CALL_OW 264
15009: PUSH
15010: LD_EXP 51
15014: EQUAL
15015: AND
15016: IFFALSE 15037
// MinerCreateMinefield ( unit , x , y ) ;
15018: LD_VAR 0 2
15022: PPUSH
15023: LD_VAR 0 4
15027: PPUSH
15028: LD_VAR 0 5
15032: PPUSH
15033: CALL 18367 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
15037: LD_VAR 0 1
15041: PUSH
15042: LD_INT 253
15044: EQUAL
15045: PUSH
15046: LD_VAR 0 2
15050: PPUSH
15051: CALL_OW 257
15055: PUSH
15056: LD_INT 5
15058: EQUAL
15059: AND
15060: IFFALSE 15081
// ComBinocular ( unit , x , y ) ;
15062: LD_VAR 0 2
15066: PPUSH
15067: LD_VAR 0 4
15071: PPUSH
15072: LD_VAR 0 5
15076: PPUSH
15077: CALL 18738 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
15081: LD_VAR 0 1
15085: PUSH
15086: LD_INT 254
15088: EQUAL
15089: PUSH
15090: LD_VAR 0 2
15094: PPUSH
15095: CALL_OW 264
15099: PUSH
15100: LD_EXP 46
15104: EQUAL
15105: AND
15106: PUSH
15107: LD_VAR 0 3
15111: PPUSH
15112: CALL_OW 263
15116: PUSH
15117: LD_INT 3
15119: EQUAL
15120: AND
15121: IFFALSE 15137
// HackDestroyVehicle ( unit , selectedUnit ) ;
15123: LD_VAR 0 2
15127: PPUSH
15128: LD_VAR 0 3
15132: PPUSH
15133: CALL 17033 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
15137: LD_VAR 0 1
15141: PUSH
15142: LD_INT 255
15144: EQUAL
15145: PUSH
15146: LD_VAR 0 2
15150: PPUSH
15151: CALL_OW 264
15155: PUSH
15156: LD_INT 14
15158: PUSH
15159: LD_INT 53
15161: PUSH
15162: EMPTY
15163: LIST
15164: LIST
15165: IN
15166: AND
15167: PUSH
15168: LD_VAR 0 4
15172: PPUSH
15173: LD_VAR 0 5
15177: PPUSH
15178: CALL_OW 488
15182: AND
15183: IFFALSE 15207
// CutTreeXYR ( unit , x , y , 12 ) ;
15185: LD_VAR 0 2
15189: PPUSH
15190: LD_VAR 0 4
15194: PPUSH
15195: LD_VAR 0 5
15199: PPUSH
15200: LD_INT 12
15202: PPUSH
15203: CALL 15599 0 4
// if cmd = 256 then
15207: LD_VAR 0 1
15211: PUSH
15212: LD_INT 256
15214: EQUAL
15215: IFFALSE 15236
// SetFactoryWaypoint ( unit , x , y ) ;
15217: LD_VAR 0 2
15221: PPUSH
15222: LD_VAR 0 4
15226: PPUSH
15227: LD_VAR 0 5
15231: PPUSH
15232: CALL 15241 0 3
// end ;
15236: LD_VAR 0 6
15240: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
15241: LD_INT 0
15243: PPUSH
15244: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
15245: LD_VAR 0 1
15249: NOT
15250: PUSH
15251: LD_VAR 0 2
15255: PPUSH
15256: LD_VAR 0 3
15260: PPUSH
15261: CALL_OW 488
15265: NOT
15266: OR
15267: PUSH
15268: LD_VAR 0 1
15272: PPUSH
15273: CALL_OW 266
15277: PUSH
15278: LD_INT 3
15280: NONEQUAL
15281: PUSH
15282: LD_VAR 0 1
15286: PPUSH
15287: CALL_OW 247
15291: PUSH
15292: LD_INT 1
15294: EQUAL
15295: NOT
15296: AND
15297: OR
15298: IFFALSE 15302
// exit ;
15300: GO 15451
// if GetType ( factory ) = unit_human then
15302: LD_VAR 0 1
15306: PPUSH
15307: CALL_OW 247
15311: PUSH
15312: LD_INT 1
15314: EQUAL
15315: IFFALSE 15332
// factory := IsInUnit ( factory ) ;
15317: LD_ADDR_VAR 0 1
15321: PUSH
15322: LD_VAR 0 1
15326: PPUSH
15327: CALL_OW 310
15331: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
15332: LD_VAR 0 1
15336: PPUSH
15337: CALL_OW 266
15341: PUSH
15342: LD_INT 3
15344: NONEQUAL
15345: IFFALSE 15349
// exit ;
15347: GO 15451
// if HexInfo ( x , y ) = factory then
15349: LD_VAR 0 2
15353: PPUSH
15354: LD_VAR 0 3
15358: PPUSH
15359: CALL_OW 428
15363: PUSH
15364: LD_VAR 0 1
15368: EQUAL
15369: IFFALSE 15396
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
15371: LD_ADDR_EXP 63
15375: PUSH
15376: LD_EXP 63
15380: PPUSH
15381: LD_VAR 0 1
15385: PPUSH
15386: LD_INT 0
15388: PPUSH
15389: CALL_OW 1
15393: ST_TO_ADDR
15394: GO 15447
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
15396: LD_ADDR_EXP 63
15400: PUSH
15401: LD_EXP 63
15405: PPUSH
15406: LD_VAR 0 1
15410: PPUSH
15411: LD_VAR 0 1
15415: PPUSH
15416: CALL_OW 255
15420: PUSH
15421: LD_VAR 0 1
15425: PUSH
15426: LD_VAR 0 2
15430: PUSH
15431: LD_VAR 0 3
15435: PUSH
15436: EMPTY
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: PPUSH
15442: CALL_OW 1
15446: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15447: CALL 15456 0 0
// end ;
15451: LD_VAR 0 4
15455: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
15456: LD_INT 0
15458: PPUSH
15459: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
15460: LD_STRING resetFactoryWaypoint();
15462: PPUSH
15463: CALL_OW 559
// if factoryWaypoints then
15467: LD_EXP 63
15471: IFFALSE 15594
// begin for i := 1 to factoryWaypoints do
15473: LD_ADDR_VAR 0 2
15477: PUSH
15478: DOUBLE
15479: LD_INT 1
15481: DEC
15482: ST_TO_ADDR
15483: LD_EXP 63
15487: PUSH
15488: FOR_TO
15489: IFFALSE 15592
// if factoryWaypoints [ i ] then
15491: LD_EXP 63
15495: PUSH
15496: LD_VAR 0 2
15500: ARRAY
15501: IFFALSE 15590
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
15503: LD_STRING setFactoryWaypointXY(
15505: PUSH
15506: LD_EXP 63
15510: PUSH
15511: LD_VAR 0 2
15515: ARRAY
15516: PUSH
15517: LD_INT 1
15519: ARRAY
15520: STR
15521: PUSH
15522: LD_STRING ,
15524: STR
15525: PUSH
15526: LD_EXP 63
15530: PUSH
15531: LD_VAR 0 2
15535: ARRAY
15536: PUSH
15537: LD_INT 2
15539: ARRAY
15540: STR
15541: PUSH
15542: LD_STRING ,
15544: STR
15545: PUSH
15546: LD_EXP 63
15550: PUSH
15551: LD_VAR 0 2
15555: ARRAY
15556: PUSH
15557: LD_INT 3
15559: ARRAY
15560: STR
15561: PUSH
15562: LD_STRING ,
15564: STR
15565: PUSH
15566: LD_EXP 63
15570: PUSH
15571: LD_VAR 0 2
15575: ARRAY
15576: PUSH
15577: LD_INT 4
15579: ARRAY
15580: STR
15581: PUSH
15582: LD_STRING )
15584: STR
15585: PPUSH
15586: CALL_OW 559
15590: GO 15488
15592: POP
15593: POP
// end ; end ;
15594: LD_VAR 0 1
15598: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15599: LD_INT 0
15601: PPUSH
15602: PPUSH
15603: PPUSH
15604: PPUSH
15605: PPUSH
15606: PPUSH
15607: PPUSH
15608: PPUSH
15609: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15610: LD_VAR 0 1
15614: NOT
15615: PUSH
15616: LD_VAR 0 2
15620: PPUSH
15621: LD_VAR 0 3
15625: PPUSH
15626: CALL_OW 488
15630: NOT
15631: OR
15632: PUSH
15633: LD_VAR 0 4
15637: NOT
15638: OR
15639: IFFALSE 15643
// exit ;
15641: GO 15983
// list := [ ] ;
15643: LD_ADDR_VAR 0 13
15647: PUSH
15648: EMPTY
15649: ST_TO_ADDR
// if x - r < 0 then
15650: LD_VAR 0 2
15654: PUSH
15655: LD_VAR 0 4
15659: MINUS
15660: PUSH
15661: LD_INT 0
15663: LESS
15664: IFFALSE 15676
// min_x := 0 else
15666: LD_ADDR_VAR 0 7
15670: PUSH
15671: LD_INT 0
15673: ST_TO_ADDR
15674: GO 15692
// min_x := x - r ;
15676: LD_ADDR_VAR 0 7
15680: PUSH
15681: LD_VAR 0 2
15685: PUSH
15686: LD_VAR 0 4
15690: MINUS
15691: ST_TO_ADDR
// if y - r < 0 then
15692: LD_VAR 0 3
15696: PUSH
15697: LD_VAR 0 4
15701: MINUS
15702: PUSH
15703: LD_INT 0
15705: LESS
15706: IFFALSE 15718
// min_y := 0 else
15708: LD_ADDR_VAR 0 8
15712: PUSH
15713: LD_INT 0
15715: ST_TO_ADDR
15716: GO 15734
// min_y := y - r ;
15718: LD_ADDR_VAR 0 8
15722: PUSH
15723: LD_VAR 0 3
15727: PUSH
15728: LD_VAR 0 4
15732: MINUS
15733: ST_TO_ADDR
// max_x := x + r ;
15734: LD_ADDR_VAR 0 9
15738: PUSH
15739: LD_VAR 0 2
15743: PUSH
15744: LD_VAR 0 4
15748: PLUS
15749: ST_TO_ADDR
// max_y := y + r ;
15750: LD_ADDR_VAR 0 10
15754: PUSH
15755: LD_VAR 0 3
15759: PUSH
15760: LD_VAR 0 4
15764: PLUS
15765: ST_TO_ADDR
// for _x = min_x to max_x do
15766: LD_ADDR_VAR 0 11
15770: PUSH
15771: DOUBLE
15772: LD_VAR 0 7
15776: DEC
15777: ST_TO_ADDR
15778: LD_VAR 0 9
15782: PUSH
15783: FOR_TO
15784: IFFALSE 15901
// for _y = min_y to max_y do
15786: LD_ADDR_VAR 0 12
15790: PUSH
15791: DOUBLE
15792: LD_VAR 0 8
15796: DEC
15797: ST_TO_ADDR
15798: LD_VAR 0 10
15802: PUSH
15803: FOR_TO
15804: IFFALSE 15897
// begin if not ValidHex ( _x , _y ) then
15806: LD_VAR 0 11
15810: PPUSH
15811: LD_VAR 0 12
15815: PPUSH
15816: CALL_OW 488
15820: NOT
15821: IFFALSE 15825
// continue ;
15823: GO 15803
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15825: LD_VAR 0 11
15829: PPUSH
15830: LD_VAR 0 12
15834: PPUSH
15835: CALL_OW 351
15839: PUSH
15840: LD_VAR 0 11
15844: PPUSH
15845: LD_VAR 0 12
15849: PPUSH
15850: CALL_OW 554
15854: AND
15855: IFFALSE 15895
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15857: LD_ADDR_VAR 0 13
15861: PUSH
15862: LD_VAR 0 13
15866: PPUSH
15867: LD_VAR 0 13
15871: PUSH
15872: LD_INT 1
15874: PLUS
15875: PPUSH
15876: LD_VAR 0 11
15880: PUSH
15881: LD_VAR 0 12
15885: PUSH
15886: EMPTY
15887: LIST
15888: LIST
15889: PPUSH
15890: CALL_OW 2
15894: ST_TO_ADDR
// end ;
15895: GO 15803
15897: POP
15898: POP
15899: GO 15783
15901: POP
15902: POP
// if not list then
15903: LD_VAR 0 13
15907: NOT
15908: IFFALSE 15912
// exit ;
15910: GO 15983
// for i in list do
15912: LD_ADDR_VAR 0 6
15916: PUSH
15917: LD_VAR 0 13
15921: PUSH
15922: FOR_IN
15923: IFFALSE 15981
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
15925: LD_VAR 0 1
15929: PPUSH
15930: LD_STRING M
15932: PUSH
15933: LD_VAR 0 6
15937: PUSH
15938: LD_INT 1
15940: ARRAY
15941: PUSH
15942: LD_VAR 0 6
15946: PUSH
15947: LD_INT 2
15949: ARRAY
15950: PUSH
15951: LD_INT 0
15953: PUSH
15954: LD_INT 0
15956: PUSH
15957: LD_INT 0
15959: PUSH
15960: LD_INT 0
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: PUSH
15972: EMPTY
15973: LIST
15974: PPUSH
15975: CALL_OW 447
15979: GO 15922
15981: POP
15982: POP
// end ;
15983: LD_VAR 0 5
15987: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
15988: LD_EXP 64
15992: NOT
15993: IFFALSE 16043
15995: GO 15997
15997: DISABLE
// begin initHack := true ;
15998: LD_ADDR_EXP 64
16002: PUSH
16003: LD_INT 1
16005: ST_TO_ADDR
// hackTanks := [ ] ;
16006: LD_ADDR_EXP 65
16010: PUSH
16011: EMPTY
16012: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
16013: LD_ADDR_EXP 66
16017: PUSH
16018: EMPTY
16019: ST_TO_ADDR
// hackLimit := 3 ;
16020: LD_ADDR_EXP 67
16024: PUSH
16025: LD_INT 3
16027: ST_TO_ADDR
// hackDist := 12 ;
16028: LD_ADDR_EXP 68
16032: PUSH
16033: LD_INT 12
16035: ST_TO_ADDR
// hackCounter := [ ] ;
16036: LD_ADDR_EXP 69
16040: PUSH
16041: EMPTY
16042: ST_TO_ADDR
// end ;
16043: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
16044: LD_EXP 64
16048: PUSH
16049: LD_INT 34
16051: PUSH
16052: LD_EXP 46
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: PPUSH
16061: CALL_OW 69
16065: AND
16066: IFFALSE 16321
16068: GO 16070
16070: DISABLE
16071: LD_INT 0
16073: PPUSH
16074: PPUSH
// begin enable ;
16075: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
16076: LD_ADDR_VAR 0 1
16080: PUSH
16081: LD_INT 34
16083: PUSH
16084: LD_EXP 46
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: PPUSH
16093: CALL_OW 69
16097: PUSH
16098: FOR_IN
16099: IFFALSE 16319
// begin if not i in hackTanks then
16101: LD_VAR 0 1
16105: PUSH
16106: LD_EXP 65
16110: IN
16111: NOT
16112: IFFALSE 16195
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
16114: LD_ADDR_EXP 65
16118: PUSH
16119: LD_EXP 65
16123: PPUSH
16124: LD_EXP 65
16128: PUSH
16129: LD_INT 1
16131: PLUS
16132: PPUSH
16133: LD_VAR 0 1
16137: PPUSH
16138: CALL_OW 1
16142: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
16143: LD_ADDR_EXP 66
16147: PUSH
16148: LD_EXP 66
16152: PPUSH
16153: LD_EXP 66
16157: PUSH
16158: LD_INT 1
16160: PLUS
16161: PPUSH
16162: EMPTY
16163: PPUSH
16164: CALL_OW 1
16168: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
16169: LD_ADDR_EXP 69
16173: PUSH
16174: LD_EXP 69
16178: PPUSH
16179: LD_EXP 69
16183: PUSH
16184: LD_INT 1
16186: PLUS
16187: PPUSH
16188: EMPTY
16189: PPUSH
16190: CALL_OW 1
16194: ST_TO_ADDR
// end ; if not IsOk ( i ) then
16195: LD_VAR 0 1
16199: PPUSH
16200: CALL_OW 302
16204: NOT
16205: IFFALSE 16218
// begin HackUnlinkAll ( i ) ;
16207: LD_VAR 0 1
16211: PPUSH
16212: CALL 16324 0 1
// continue ;
16216: GO 16098
// end ; HackCheckCapturedStatus ( i ) ;
16218: LD_VAR 0 1
16222: PPUSH
16223: CALL 16767 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
16227: LD_ADDR_VAR 0 2
16231: PUSH
16232: LD_INT 81
16234: PUSH
16235: LD_VAR 0 1
16239: PPUSH
16240: CALL_OW 255
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PUSH
16249: LD_INT 33
16251: PUSH
16252: LD_INT 3
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PUSH
16259: LD_INT 91
16261: PUSH
16262: LD_VAR 0 1
16266: PUSH
16267: LD_EXP 68
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: LIST
16276: PUSH
16277: LD_INT 50
16279: PUSH
16280: EMPTY
16281: LIST
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: PPUSH
16289: CALL_OW 69
16293: ST_TO_ADDR
// if not tmp then
16294: LD_VAR 0 2
16298: NOT
16299: IFFALSE 16303
// continue ;
16301: GO 16098
// HackLink ( i , tmp ) ;
16303: LD_VAR 0 1
16307: PPUSH
16308: LD_VAR 0 2
16312: PPUSH
16313: CALL 16460 0 2
// end ;
16317: GO 16098
16319: POP
16320: POP
// end ;
16321: PPOPN 2
16323: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
16324: LD_INT 0
16326: PPUSH
16327: PPUSH
16328: PPUSH
// if not hack in hackTanks then
16329: LD_VAR 0 1
16333: PUSH
16334: LD_EXP 65
16338: IN
16339: NOT
16340: IFFALSE 16344
// exit ;
16342: GO 16455
// index := GetElementIndex ( hackTanks , hack ) ;
16344: LD_ADDR_VAR 0 4
16348: PUSH
16349: LD_EXP 65
16353: PPUSH
16354: LD_VAR 0 1
16358: PPUSH
16359: CALL 38263 0 2
16363: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
16364: LD_EXP 66
16368: PUSH
16369: LD_VAR 0 4
16373: ARRAY
16374: IFFALSE 16455
// begin for i in hackTanksCaptured [ index ] do
16376: LD_ADDR_VAR 0 3
16380: PUSH
16381: LD_EXP 66
16385: PUSH
16386: LD_VAR 0 4
16390: ARRAY
16391: PUSH
16392: FOR_IN
16393: IFFALSE 16419
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
16395: LD_VAR 0 3
16399: PUSH
16400: LD_INT 1
16402: ARRAY
16403: PPUSH
16404: LD_VAR 0 3
16408: PUSH
16409: LD_INT 2
16411: ARRAY
16412: PPUSH
16413: CALL_OW 235
16417: GO 16392
16419: POP
16420: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
16421: LD_ADDR_EXP 66
16425: PUSH
16426: LD_EXP 66
16430: PPUSH
16431: LD_VAR 0 4
16435: PPUSH
16436: EMPTY
16437: PPUSH
16438: CALL_OW 1
16442: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
16443: LD_VAR 0 1
16447: PPUSH
16448: LD_INT 0
16450: PPUSH
16451: CALL_OW 505
// end ; end ;
16455: LD_VAR 0 2
16459: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
16460: LD_INT 0
16462: PPUSH
16463: PPUSH
16464: PPUSH
// if not hack in hackTanks or not vehicles then
16465: LD_VAR 0 1
16469: PUSH
16470: LD_EXP 65
16474: IN
16475: NOT
16476: PUSH
16477: LD_VAR 0 2
16481: NOT
16482: OR
16483: IFFALSE 16487
// exit ;
16485: GO 16762
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
16487: LD_ADDR_VAR 0 2
16491: PUSH
16492: LD_VAR 0 1
16496: PPUSH
16497: LD_VAR 0 2
16501: PPUSH
16502: LD_INT 1
16504: PPUSH
16505: LD_INT 1
16507: PPUSH
16508: CALL 38913 0 4
16512: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
16513: LD_ADDR_VAR 0 5
16517: PUSH
16518: LD_EXP 65
16522: PPUSH
16523: LD_VAR 0 1
16527: PPUSH
16528: CALL 38263 0 2
16532: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
16533: LD_EXP 66
16537: PUSH
16538: LD_VAR 0 5
16542: ARRAY
16543: PUSH
16544: LD_EXP 67
16548: LESS
16549: IFFALSE 16738
// begin for i := 1 to vehicles do
16551: LD_ADDR_VAR 0 4
16555: PUSH
16556: DOUBLE
16557: LD_INT 1
16559: DEC
16560: ST_TO_ADDR
16561: LD_VAR 0 2
16565: PUSH
16566: FOR_TO
16567: IFFALSE 16736
// begin if hackTanksCaptured [ index ] = hackLimit then
16569: LD_EXP 66
16573: PUSH
16574: LD_VAR 0 5
16578: ARRAY
16579: PUSH
16580: LD_EXP 67
16584: EQUAL
16585: IFFALSE 16589
// break ;
16587: GO 16736
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
16589: LD_ADDR_EXP 69
16593: PUSH
16594: LD_EXP 69
16598: PPUSH
16599: LD_VAR 0 5
16603: PPUSH
16604: LD_EXP 69
16608: PUSH
16609: LD_VAR 0 5
16613: ARRAY
16614: PUSH
16615: LD_INT 1
16617: PLUS
16618: PPUSH
16619: CALL_OW 1
16623: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
16624: LD_ADDR_EXP 66
16628: PUSH
16629: LD_EXP 66
16633: PPUSH
16634: LD_VAR 0 5
16638: PUSH
16639: LD_EXP 66
16643: PUSH
16644: LD_VAR 0 5
16648: ARRAY
16649: PUSH
16650: LD_INT 1
16652: PLUS
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: PPUSH
16658: LD_VAR 0 2
16662: PUSH
16663: LD_VAR 0 4
16667: ARRAY
16668: PUSH
16669: LD_VAR 0 2
16673: PUSH
16674: LD_VAR 0 4
16678: ARRAY
16679: PPUSH
16680: CALL_OW 255
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PPUSH
16689: CALL 38478 0 3
16693: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
16694: LD_VAR 0 2
16698: PUSH
16699: LD_VAR 0 4
16703: ARRAY
16704: PPUSH
16705: LD_VAR 0 1
16709: PPUSH
16710: CALL_OW 255
16714: PPUSH
16715: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
16719: LD_VAR 0 2
16723: PUSH
16724: LD_VAR 0 4
16728: ARRAY
16729: PPUSH
16730: CALL_OW 141
// end ;
16734: GO 16566
16736: POP
16737: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16738: LD_VAR 0 1
16742: PPUSH
16743: LD_EXP 66
16747: PUSH
16748: LD_VAR 0 5
16752: ARRAY
16753: PUSH
16754: LD_INT 0
16756: PLUS
16757: PPUSH
16758: CALL_OW 505
// end ;
16762: LD_VAR 0 3
16766: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
16767: LD_INT 0
16769: PPUSH
16770: PPUSH
16771: PPUSH
16772: PPUSH
// if not hack in hackTanks then
16773: LD_VAR 0 1
16777: PUSH
16778: LD_EXP 65
16782: IN
16783: NOT
16784: IFFALSE 16788
// exit ;
16786: GO 17028
// index := GetElementIndex ( hackTanks , hack ) ;
16788: LD_ADDR_VAR 0 4
16792: PUSH
16793: LD_EXP 65
16797: PPUSH
16798: LD_VAR 0 1
16802: PPUSH
16803: CALL 38263 0 2
16807: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
16808: LD_ADDR_VAR 0 3
16812: PUSH
16813: DOUBLE
16814: LD_EXP 66
16818: PUSH
16819: LD_VAR 0 4
16823: ARRAY
16824: INC
16825: ST_TO_ADDR
16826: LD_INT 1
16828: PUSH
16829: FOR_DOWNTO
16830: IFFALSE 17002
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
16832: LD_ADDR_VAR 0 5
16836: PUSH
16837: LD_EXP 66
16841: PUSH
16842: LD_VAR 0 4
16846: ARRAY
16847: PUSH
16848: LD_VAR 0 3
16852: ARRAY
16853: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
16854: LD_VAR 0 5
16858: PUSH
16859: LD_INT 1
16861: ARRAY
16862: PPUSH
16863: CALL_OW 302
16867: NOT
16868: PUSH
16869: LD_VAR 0 5
16873: PUSH
16874: LD_INT 1
16876: ARRAY
16877: PPUSH
16878: CALL_OW 255
16882: PUSH
16883: LD_VAR 0 1
16887: PPUSH
16888: CALL_OW 255
16892: NONEQUAL
16893: OR
16894: IFFALSE 17000
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
16896: LD_VAR 0 5
16900: PUSH
16901: LD_INT 1
16903: ARRAY
16904: PPUSH
16905: CALL_OW 305
16909: PUSH
16910: LD_VAR 0 5
16914: PUSH
16915: LD_INT 1
16917: ARRAY
16918: PPUSH
16919: CALL_OW 255
16923: PUSH
16924: LD_VAR 0 1
16928: PPUSH
16929: CALL_OW 255
16933: EQUAL
16934: AND
16935: IFFALSE 16959
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
16937: LD_VAR 0 5
16941: PUSH
16942: LD_INT 1
16944: ARRAY
16945: PPUSH
16946: LD_VAR 0 5
16950: PUSH
16951: LD_INT 2
16953: ARRAY
16954: PPUSH
16955: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
16959: LD_ADDR_EXP 66
16963: PUSH
16964: LD_EXP 66
16968: PPUSH
16969: LD_VAR 0 4
16973: PPUSH
16974: LD_EXP 66
16978: PUSH
16979: LD_VAR 0 4
16983: ARRAY
16984: PPUSH
16985: LD_VAR 0 3
16989: PPUSH
16990: CALL_OW 3
16994: PPUSH
16995: CALL_OW 1
16999: ST_TO_ADDR
// end ; end ;
17000: GO 16829
17002: POP
17003: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17004: LD_VAR 0 1
17008: PPUSH
17009: LD_EXP 66
17013: PUSH
17014: LD_VAR 0 4
17018: ARRAY
17019: PUSH
17020: LD_INT 0
17022: PLUS
17023: PPUSH
17024: CALL_OW 505
// end ;
17028: LD_VAR 0 2
17032: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
17033: LD_INT 0
17035: PPUSH
17036: PPUSH
17037: PPUSH
17038: PPUSH
// if not hack in hackTanks then
17039: LD_VAR 0 1
17043: PUSH
17044: LD_EXP 65
17048: IN
17049: NOT
17050: IFFALSE 17054
// exit ;
17052: GO 17139
// index := GetElementIndex ( hackTanks , hack ) ;
17054: LD_ADDR_VAR 0 5
17058: PUSH
17059: LD_EXP 65
17063: PPUSH
17064: LD_VAR 0 1
17068: PPUSH
17069: CALL 38263 0 2
17073: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
17074: LD_ADDR_VAR 0 4
17078: PUSH
17079: DOUBLE
17080: LD_INT 1
17082: DEC
17083: ST_TO_ADDR
17084: LD_EXP 66
17088: PUSH
17089: LD_VAR 0 5
17093: ARRAY
17094: PUSH
17095: FOR_TO
17096: IFFALSE 17137
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
17098: LD_EXP 66
17102: PUSH
17103: LD_VAR 0 5
17107: ARRAY
17108: PUSH
17109: LD_VAR 0 4
17113: ARRAY
17114: PUSH
17115: LD_INT 1
17117: ARRAY
17118: PUSH
17119: LD_VAR 0 2
17123: EQUAL
17124: IFFALSE 17135
// KillUnit ( vehicle ) ;
17126: LD_VAR 0 2
17130: PPUSH
17131: CALL_OW 66
17135: GO 17095
17137: POP
17138: POP
// end ;
17139: LD_VAR 0 3
17143: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
17144: LD_EXP 70
17148: NOT
17149: IFFALSE 17184
17151: GO 17153
17153: DISABLE
// begin initMiner := true ;
17154: LD_ADDR_EXP 70
17158: PUSH
17159: LD_INT 1
17161: ST_TO_ADDR
// minersList := [ ] ;
17162: LD_ADDR_EXP 71
17166: PUSH
17167: EMPTY
17168: ST_TO_ADDR
// minerMinesList := [ ] ;
17169: LD_ADDR_EXP 72
17173: PUSH
17174: EMPTY
17175: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
17176: LD_ADDR_EXP 73
17180: PUSH
17181: LD_INT 5
17183: ST_TO_ADDR
// end ;
17184: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
17185: LD_EXP 70
17189: PUSH
17190: LD_INT 34
17192: PUSH
17193: LD_EXP 51
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PPUSH
17202: CALL_OW 69
17206: AND
17207: IFFALSE 17670
17209: GO 17211
17211: DISABLE
17212: LD_INT 0
17214: PPUSH
17215: PPUSH
17216: PPUSH
17217: PPUSH
// begin enable ;
17218: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
17219: LD_ADDR_VAR 0 1
17223: PUSH
17224: LD_INT 34
17226: PUSH
17227: LD_EXP 51
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PPUSH
17236: CALL_OW 69
17240: PUSH
17241: FOR_IN
17242: IFFALSE 17314
// begin if not i in minersList then
17244: LD_VAR 0 1
17248: PUSH
17249: LD_EXP 71
17253: IN
17254: NOT
17255: IFFALSE 17312
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
17257: LD_ADDR_EXP 71
17261: PUSH
17262: LD_EXP 71
17266: PPUSH
17267: LD_EXP 71
17271: PUSH
17272: LD_INT 1
17274: PLUS
17275: PPUSH
17276: LD_VAR 0 1
17280: PPUSH
17281: CALL_OW 1
17285: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17286: LD_ADDR_EXP 72
17290: PUSH
17291: LD_EXP 72
17295: PPUSH
17296: LD_EXP 72
17300: PUSH
17301: LD_INT 1
17303: PLUS
17304: PPUSH
17305: EMPTY
17306: PPUSH
17307: CALL_OW 1
17311: ST_TO_ADDR
// end end ;
17312: GO 17241
17314: POP
17315: POP
// for i := minerMinesList downto 1 do
17316: LD_ADDR_VAR 0 1
17320: PUSH
17321: DOUBLE
17322: LD_EXP 72
17326: INC
17327: ST_TO_ADDR
17328: LD_INT 1
17330: PUSH
17331: FOR_DOWNTO
17332: IFFALSE 17668
// begin if IsLive ( minersList [ i ] ) then
17334: LD_EXP 71
17338: PUSH
17339: LD_VAR 0 1
17343: ARRAY
17344: PPUSH
17345: CALL_OW 300
17349: IFFALSE 17377
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
17351: LD_EXP 71
17355: PUSH
17356: LD_VAR 0 1
17360: ARRAY
17361: PPUSH
17362: LD_EXP 72
17366: PUSH
17367: LD_VAR 0 1
17371: ARRAY
17372: PPUSH
17373: CALL_OW 505
// if not minerMinesList [ i ] then
17377: LD_EXP 72
17381: PUSH
17382: LD_VAR 0 1
17386: ARRAY
17387: NOT
17388: IFFALSE 17392
// continue ;
17390: GO 17331
// for j := minerMinesList [ i ] downto 1 do
17392: LD_ADDR_VAR 0 2
17396: PUSH
17397: DOUBLE
17398: LD_EXP 72
17402: PUSH
17403: LD_VAR 0 1
17407: ARRAY
17408: INC
17409: ST_TO_ADDR
17410: LD_INT 1
17412: PUSH
17413: FOR_DOWNTO
17414: IFFALSE 17664
// begin side := GetSide ( minersList [ i ] ) ;
17416: LD_ADDR_VAR 0 3
17420: PUSH
17421: LD_EXP 71
17425: PUSH
17426: LD_VAR 0 1
17430: ARRAY
17431: PPUSH
17432: CALL_OW 255
17436: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
17437: LD_ADDR_VAR 0 4
17441: PUSH
17442: LD_EXP 72
17446: PUSH
17447: LD_VAR 0 1
17451: ARRAY
17452: PUSH
17453: LD_VAR 0 2
17457: ARRAY
17458: PUSH
17459: LD_INT 1
17461: ARRAY
17462: PPUSH
17463: LD_EXP 72
17467: PUSH
17468: LD_VAR 0 1
17472: ARRAY
17473: PUSH
17474: LD_VAR 0 2
17478: ARRAY
17479: PUSH
17480: LD_INT 2
17482: ARRAY
17483: PPUSH
17484: CALL_OW 428
17488: ST_TO_ADDR
// if not tmp then
17489: LD_VAR 0 4
17493: NOT
17494: IFFALSE 17498
// continue ;
17496: GO 17413
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
17498: LD_VAR 0 4
17502: PUSH
17503: LD_INT 81
17505: PUSH
17506: LD_VAR 0 3
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PPUSH
17515: CALL_OW 69
17519: IN
17520: PUSH
17521: LD_EXP 72
17525: PUSH
17526: LD_VAR 0 1
17530: ARRAY
17531: PUSH
17532: LD_VAR 0 2
17536: ARRAY
17537: PUSH
17538: LD_INT 1
17540: ARRAY
17541: PPUSH
17542: LD_EXP 72
17546: PUSH
17547: LD_VAR 0 1
17551: ARRAY
17552: PUSH
17553: LD_VAR 0 2
17557: ARRAY
17558: PUSH
17559: LD_INT 2
17561: ARRAY
17562: PPUSH
17563: CALL_OW 458
17567: AND
17568: IFFALSE 17662
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
17570: LD_EXP 72
17574: PUSH
17575: LD_VAR 0 1
17579: ARRAY
17580: PUSH
17581: LD_VAR 0 2
17585: ARRAY
17586: PUSH
17587: LD_INT 1
17589: ARRAY
17590: PPUSH
17591: LD_EXP 72
17595: PUSH
17596: LD_VAR 0 1
17600: ARRAY
17601: PUSH
17602: LD_VAR 0 2
17606: ARRAY
17607: PUSH
17608: LD_INT 2
17610: ARRAY
17611: PPUSH
17612: LD_VAR 0 3
17616: PPUSH
17617: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
17621: LD_ADDR_EXP 72
17625: PUSH
17626: LD_EXP 72
17630: PPUSH
17631: LD_VAR 0 1
17635: PPUSH
17636: LD_EXP 72
17640: PUSH
17641: LD_VAR 0 1
17645: ARRAY
17646: PPUSH
17647: LD_VAR 0 2
17651: PPUSH
17652: CALL_OW 3
17656: PPUSH
17657: CALL_OW 1
17661: ST_TO_ADDR
// end ; end ;
17662: GO 17413
17664: POP
17665: POP
// end ;
17666: GO 17331
17668: POP
17669: POP
// end ;
17670: PPOPN 4
17672: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
17673: LD_INT 0
17675: PPUSH
17676: PPUSH
// result := false ;
17677: LD_ADDR_VAR 0 4
17681: PUSH
17682: LD_INT 0
17684: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
17685: LD_VAR 0 1
17689: PPUSH
17690: CALL_OW 264
17694: PUSH
17695: LD_EXP 51
17699: EQUAL
17700: NOT
17701: IFFALSE 17705
// exit ;
17703: GO 17945
// index := GetElementIndex ( minersList , unit ) ;
17705: LD_ADDR_VAR 0 5
17709: PUSH
17710: LD_EXP 71
17714: PPUSH
17715: LD_VAR 0 1
17719: PPUSH
17720: CALL 38263 0 2
17724: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
17725: LD_EXP 72
17729: PUSH
17730: LD_VAR 0 5
17734: ARRAY
17735: PUSH
17736: LD_EXP 73
17740: GREATEREQUAL
17741: IFFALSE 17745
// exit ;
17743: GO 17945
// ComMoveXY ( unit , x , y ) ;
17745: LD_VAR 0 1
17749: PPUSH
17750: LD_VAR 0 2
17754: PPUSH
17755: LD_VAR 0 3
17759: PPUSH
17760: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17764: LD_INT 35
17766: PPUSH
17767: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
17771: LD_VAR 0 1
17775: PPUSH
17776: LD_VAR 0 2
17780: PPUSH
17781: LD_VAR 0 3
17785: PPUSH
17786: CALL 68982 0 3
17790: NOT
17791: PUSH
17792: LD_VAR 0 1
17796: PPUSH
17797: CALL_OW 314
17801: AND
17802: IFFALSE 17806
// exit ;
17804: GO 17945
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
17806: LD_VAR 0 2
17810: PPUSH
17811: LD_VAR 0 3
17815: PPUSH
17816: CALL_OW 428
17820: PUSH
17821: LD_VAR 0 1
17825: EQUAL
17826: PUSH
17827: LD_VAR 0 1
17831: PPUSH
17832: CALL_OW 314
17836: NOT
17837: AND
17838: IFFALSE 17764
// PlaySoundXY ( x , y , PlantMine ) ;
17840: LD_VAR 0 2
17844: PPUSH
17845: LD_VAR 0 3
17849: PPUSH
17850: LD_STRING PlantMine
17852: PPUSH
17853: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
17857: LD_VAR 0 2
17861: PPUSH
17862: LD_VAR 0 3
17866: PPUSH
17867: LD_VAR 0 1
17871: PPUSH
17872: CALL_OW 255
17876: PPUSH
17877: LD_INT 0
17879: PPUSH
17880: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17884: LD_ADDR_EXP 72
17888: PUSH
17889: LD_EXP 72
17893: PPUSH
17894: LD_VAR 0 5
17898: PUSH
17899: LD_EXP 72
17903: PUSH
17904: LD_VAR 0 5
17908: ARRAY
17909: PUSH
17910: LD_INT 1
17912: PLUS
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PPUSH
17918: LD_VAR 0 2
17922: PUSH
17923: LD_VAR 0 3
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PPUSH
17932: CALL 38478 0 3
17936: ST_TO_ADDR
// result := true ;
17937: LD_ADDR_VAR 0 4
17941: PUSH
17942: LD_INT 1
17944: ST_TO_ADDR
// end ;
17945: LD_VAR 0 4
17949: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
17950: LD_INT 0
17952: PPUSH
17953: PPUSH
17954: PPUSH
// if not unit in minersList then
17955: LD_VAR 0 1
17959: PUSH
17960: LD_EXP 71
17964: IN
17965: NOT
17966: IFFALSE 17970
// exit ;
17968: GO 18362
// index := GetElementIndex ( minersList , unit ) ;
17970: LD_ADDR_VAR 0 6
17974: PUSH
17975: LD_EXP 71
17979: PPUSH
17980: LD_VAR 0 1
17984: PPUSH
17985: CALL 38263 0 2
17989: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
17990: LD_ADDR_VAR 0 5
17994: PUSH
17995: DOUBLE
17996: LD_EXP 72
18000: PUSH
18001: LD_VAR 0 6
18005: ARRAY
18006: INC
18007: ST_TO_ADDR
18008: LD_INT 1
18010: PUSH
18011: FOR_DOWNTO
18012: IFFALSE 18173
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
18014: LD_EXP 72
18018: PUSH
18019: LD_VAR 0 6
18023: ARRAY
18024: PUSH
18025: LD_VAR 0 5
18029: ARRAY
18030: PUSH
18031: LD_INT 1
18033: ARRAY
18034: PUSH
18035: LD_VAR 0 2
18039: EQUAL
18040: PUSH
18041: LD_EXP 72
18045: PUSH
18046: LD_VAR 0 6
18050: ARRAY
18051: PUSH
18052: LD_VAR 0 5
18056: ARRAY
18057: PUSH
18058: LD_INT 2
18060: ARRAY
18061: PUSH
18062: LD_VAR 0 3
18066: EQUAL
18067: AND
18068: IFFALSE 18171
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18070: LD_EXP 72
18074: PUSH
18075: LD_VAR 0 6
18079: ARRAY
18080: PUSH
18081: LD_VAR 0 5
18085: ARRAY
18086: PUSH
18087: LD_INT 1
18089: ARRAY
18090: PPUSH
18091: LD_EXP 72
18095: PUSH
18096: LD_VAR 0 6
18100: ARRAY
18101: PUSH
18102: LD_VAR 0 5
18106: ARRAY
18107: PUSH
18108: LD_INT 2
18110: ARRAY
18111: PPUSH
18112: LD_VAR 0 1
18116: PPUSH
18117: CALL_OW 255
18121: PPUSH
18122: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18126: LD_ADDR_EXP 72
18130: PUSH
18131: LD_EXP 72
18135: PPUSH
18136: LD_VAR 0 6
18140: PPUSH
18141: LD_EXP 72
18145: PUSH
18146: LD_VAR 0 6
18150: ARRAY
18151: PPUSH
18152: LD_VAR 0 5
18156: PPUSH
18157: CALL_OW 3
18161: PPUSH
18162: CALL_OW 1
18166: ST_TO_ADDR
// exit ;
18167: POP
18168: POP
18169: GO 18362
// end ; end ;
18171: GO 18011
18173: POP
18174: POP
// for i := minerMinesList [ index ] downto 1 do
18175: LD_ADDR_VAR 0 5
18179: PUSH
18180: DOUBLE
18181: LD_EXP 72
18185: PUSH
18186: LD_VAR 0 6
18190: ARRAY
18191: INC
18192: ST_TO_ADDR
18193: LD_INT 1
18195: PUSH
18196: FOR_DOWNTO
18197: IFFALSE 18360
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
18199: LD_EXP 72
18203: PUSH
18204: LD_VAR 0 6
18208: ARRAY
18209: PUSH
18210: LD_VAR 0 5
18214: ARRAY
18215: PUSH
18216: LD_INT 1
18218: ARRAY
18219: PPUSH
18220: LD_EXP 72
18224: PUSH
18225: LD_VAR 0 6
18229: ARRAY
18230: PUSH
18231: LD_VAR 0 5
18235: ARRAY
18236: PUSH
18237: LD_INT 2
18239: ARRAY
18240: PPUSH
18241: LD_VAR 0 2
18245: PPUSH
18246: LD_VAR 0 3
18250: PPUSH
18251: CALL_OW 298
18255: PUSH
18256: LD_INT 6
18258: LESS
18259: IFFALSE 18358
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18261: LD_EXP 72
18265: PUSH
18266: LD_VAR 0 6
18270: ARRAY
18271: PUSH
18272: LD_VAR 0 5
18276: ARRAY
18277: PUSH
18278: LD_INT 1
18280: ARRAY
18281: PPUSH
18282: LD_EXP 72
18286: PUSH
18287: LD_VAR 0 6
18291: ARRAY
18292: PUSH
18293: LD_VAR 0 5
18297: ARRAY
18298: PUSH
18299: LD_INT 2
18301: ARRAY
18302: PPUSH
18303: LD_VAR 0 1
18307: PPUSH
18308: CALL_OW 255
18312: PPUSH
18313: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18317: LD_ADDR_EXP 72
18321: PUSH
18322: LD_EXP 72
18326: PPUSH
18327: LD_VAR 0 6
18331: PPUSH
18332: LD_EXP 72
18336: PUSH
18337: LD_VAR 0 6
18341: ARRAY
18342: PPUSH
18343: LD_VAR 0 5
18347: PPUSH
18348: CALL_OW 3
18352: PPUSH
18353: CALL_OW 1
18357: ST_TO_ADDR
// end ; end ;
18358: GO 18196
18360: POP
18361: POP
// end ;
18362: LD_VAR 0 4
18366: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
18367: LD_INT 0
18369: PPUSH
18370: PPUSH
18371: PPUSH
18372: PPUSH
18373: PPUSH
18374: PPUSH
18375: PPUSH
18376: PPUSH
18377: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
18378: LD_VAR 0 1
18382: PPUSH
18383: CALL_OW 264
18387: PUSH
18388: LD_EXP 51
18392: EQUAL
18393: NOT
18394: PUSH
18395: LD_VAR 0 1
18399: PUSH
18400: LD_EXP 71
18404: IN
18405: NOT
18406: OR
18407: IFFALSE 18411
// exit ;
18409: GO 18733
// index := GetElementIndex ( minersList , unit ) ;
18411: LD_ADDR_VAR 0 6
18415: PUSH
18416: LD_EXP 71
18420: PPUSH
18421: LD_VAR 0 1
18425: PPUSH
18426: CALL 38263 0 2
18430: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
18431: LD_ADDR_VAR 0 8
18435: PUSH
18436: LD_EXP 73
18440: PUSH
18441: LD_EXP 72
18445: PUSH
18446: LD_VAR 0 6
18450: ARRAY
18451: MINUS
18452: ST_TO_ADDR
// if not minesFreeAmount then
18453: LD_VAR 0 8
18457: NOT
18458: IFFALSE 18462
// exit ;
18460: GO 18733
// tmp := [ ] ;
18462: LD_ADDR_VAR 0 7
18466: PUSH
18467: EMPTY
18468: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
18469: LD_ADDR_VAR 0 5
18473: PUSH
18474: DOUBLE
18475: LD_INT 1
18477: DEC
18478: ST_TO_ADDR
18479: LD_VAR 0 8
18483: PUSH
18484: FOR_TO
18485: IFFALSE 18680
// begin _d := rand ( 0 , 5 ) ;
18487: LD_ADDR_VAR 0 11
18491: PUSH
18492: LD_INT 0
18494: PPUSH
18495: LD_INT 5
18497: PPUSH
18498: CALL_OW 12
18502: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
18503: LD_ADDR_VAR 0 12
18507: PUSH
18508: LD_INT 2
18510: PPUSH
18511: LD_INT 6
18513: PPUSH
18514: CALL_OW 12
18518: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
18519: LD_ADDR_VAR 0 9
18523: PUSH
18524: LD_VAR 0 2
18528: PPUSH
18529: LD_VAR 0 11
18533: PPUSH
18534: LD_VAR 0 12
18538: PPUSH
18539: CALL_OW 272
18543: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
18544: LD_ADDR_VAR 0 10
18548: PUSH
18549: LD_VAR 0 3
18553: PPUSH
18554: LD_VAR 0 11
18558: PPUSH
18559: LD_VAR 0 12
18563: PPUSH
18564: CALL_OW 273
18568: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
18569: LD_VAR 0 9
18573: PPUSH
18574: LD_VAR 0 10
18578: PPUSH
18579: CALL_OW 488
18583: PUSH
18584: LD_VAR 0 9
18588: PUSH
18589: LD_VAR 0 10
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: LD_VAR 0 7
18602: IN
18603: NOT
18604: AND
18605: PUSH
18606: LD_VAR 0 9
18610: PPUSH
18611: LD_VAR 0 10
18615: PPUSH
18616: CALL_OW 458
18620: NOT
18621: AND
18622: IFFALSE 18664
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
18624: LD_ADDR_VAR 0 7
18628: PUSH
18629: LD_VAR 0 7
18633: PPUSH
18634: LD_VAR 0 7
18638: PUSH
18639: LD_INT 1
18641: PLUS
18642: PPUSH
18643: LD_VAR 0 9
18647: PUSH
18648: LD_VAR 0 10
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PPUSH
18657: CALL_OW 1
18661: ST_TO_ADDR
18662: GO 18678
// i := i - 1 ;
18664: LD_ADDR_VAR 0 5
18668: PUSH
18669: LD_VAR 0 5
18673: PUSH
18674: LD_INT 1
18676: MINUS
18677: ST_TO_ADDR
// end ;
18678: GO 18484
18680: POP
18681: POP
// for i in tmp do
18682: LD_ADDR_VAR 0 5
18686: PUSH
18687: LD_VAR 0 7
18691: PUSH
18692: FOR_IN
18693: IFFALSE 18731
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
18695: LD_VAR 0 1
18699: PPUSH
18700: LD_VAR 0 5
18704: PUSH
18705: LD_INT 1
18707: ARRAY
18708: PPUSH
18709: LD_VAR 0 5
18713: PUSH
18714: LD_INT 2
18716: ARRAY
18717: PPUSH
18718: CALL 17673 0 3
18722: NOT
18723: IFFALSE 18729
// exit ;
18725: POP
18726: POP
18727: GO 18733
18729: GO 18692
18731: POP
18732: POP
// end ;
18733: LD_VAR 0 4
18737: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
18738: LD_INT 0
18740: PPUSH
18741: PPUSH
18742: PPUSH
18743: PPUSH
18744: PPUSH
18745: PPUSH
18746: PPUSH
// if not GetClass ( unit ) = class_sniper then
18747: LD_VAR 0 1
18751: PPUSH
18752: CALL_OW 257
18756: PUSH
18757: LD_INT 5
18759: EQUAL
18760: NOT
18761: IFFALSE 18765
// exit ;
18763: GO 19153
// dist := 8 ;
18765: LD_ADDR_VAR 0 5
18769: PUSH
18770: LD_INT 8
18772: ST_TO_ADDR
// viewRange := 12 ;
18773: LD_ADDR_VAR 0 7
18777: PUSH
18778: LD_INT 12
18780: ST_TO_ADDR
// side := GetSide ( unit ) ;
18781: LD_ADDR_VAR 0 6
18785: PUSH
18786: LD_VAR 0 1
18790: PPUSH
18791: CALL_OW 255
18795: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
18796: LD_INT 61
18798: PPUSH
18799: LD_VAR 0 6
18803: PPUSH
18804: CALL_OW 321
18808: PUSH
18809: LD_INT 2
18811: EQUAL
18812: IFFALSE 18822
// viewRange := 16 ;
18814: LD_ADDR_VAR 0 7
18818: PUSH
18819: LD_INT 16
18821: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
18822: LD_VAR 0 1
18826: PPUSH
18827: LD_VAR 0 2
18831: PPUSH
18832: LD_VAR 0 3
18836: PPUSH
18837: CALL_OW 297
18841: PUSH
18842: LD_VAR 0 5
18846: GREATER
18847: IFFALSE 18926
// begin ComMoveXY ( unit , x , y ) ;
18849: LD_VAR 0 1
18853: PPUSH
18854: LD_VAR 0 2
18858: PPUSH
18859: LD_VAR 0 3
18863: PPUSH
18864: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18868: LD_INT 35
18870: PPUSH
18871: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
18875: LD_VAR 0 1
18879: PPUSH
18880: LD_VAR 0 2
18884: PPUSH
18885: LD_VAR 0 3
18889: PPUSH
18890: CALL 68982 0 3
18894: NOT
18895: IFFALSE 18899
// exit ;
18897: GO 19153
// until GetDistUnitXY ( unit , x , y ) < dist ;
18899: LD_VAR 0 1
18903: PPUSH
18904: LD_VAR 0 2
18908: PPUSH
18909: LD_VAR 0 3
18913: PPUSH
18914: CALL_OW 297
18918: PUSH
18919: LD_VAR 0 5
18923: LESS
18924: IFFALSE 18868
// end ; ComTurnXY ( unit , x , y ) ;
18926: LD_VAR 0 1
18930: PPUSH
18931: LD_VAR 0 2
18935: PPUSH
18936: LD_VAR 0 3
18940: PPUSH
18941: CALL_OW 118
// wait ( 5 ) ;
18945: LD_INT 5
18947: PPUSH
18948: CALL_OW 67
// _d := GetDir ( unit ) ;
18952: LD_ADDR_VAR 0 10
18956: PUSH
18957: LD_VAR 0 1
18961: PPUSH
18962: CALL_OW 254
18966: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
18967: LD_ADDR_VAR 0 8
18971: PUSH
18972: LD_VAR 0 1
18976: PPUSH
18977: CALL_OW 250
18981: PPUSH
18982: LD_VAR 0 10
18986: PPUSH
18987: LD_VAR 0 5
18991: PPUSH
18992: CALL_OW 272
18996: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
18997: LD_ADDR_VAR 0 9
19001: PUSH
19002: LD_VAR 0 1
19006: PPUSH
19007: CALL_OW 251
19011: PPUSH
19012: LD_VAR 0 10
19016: PPUSH
19017: LD_VAR 0 5
19021: PPUSH
19022: CALL_OW 273
19026: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19027: LD_VAR 0 8
19031: PPUSH
19032: LD_VAR 0 9
19036: PPUSH
19037: CALL_OW 488
19041: NOT
19042: IFFALSE 19046
// exit ;
19044: GO 19153
// ComAnimCustom ( unit , 1 ) ;
19046: LD_VAR 0 1
19050: PPUSH
19051: LD_INT 1
19053: PPUSH
19054: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
19058: LD_VAR 0 8
19062: PPUSH
19063: LD_VAR 0 9
19067: PPUSH
19068: LD_VAR 0 6
19072: PPUSH
19073: LD_VAR 0 7
19077: PPUSH
19078: CALL_OW 330
// repeat wait ( 1 ) ;
19082: LD_INT 1
19084: PPUSH
19085: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
19089: LD_VAR 0 1
19093: PPUSH
19094: CALL_OW 316
19098: PUSH
19099: LD_VAR 0 1
19103: PPUSH
19104: CALL_OW 314
19108: OR
19109: PUSH
19110: LD_VAR 0 1
19114: PPUSH
19115: CALL_OW 302
19119: NOT
19120: OR
19121: PUSH
19122: LD_VAR 0 1
19126: PPUSH
19127: CALL_OW 301
19131: OR
19132: IFFALSE 19082
// RemoveSeeing ( _x , _y , side ) ;
19134: LD_VAR 0 8
19138: PPUSH
19139: LD_VAR 0 9
19143: PPUSH
19144: LD_VAR 0 6
19148: PPUSH
19149: CALL_OW 331
// end ; end_of_file
19153: LD_VAR 0 4
19157: RET
// every 0 0$1 do
19158: GO 19160
19160: DISABLE
// begin enable ;
19161: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19162: LD_STRING updateTimer(
19164: PUSH
19165: LD_OWVAR 1
19169: STR
19170: PUSH
19171: LD_STRING );
19173: STR
19174: PPUSH
19175: CALL_OW 559
// end ;
19179: END
// export function SOS_MapStart ( ) ; begin
19180: LD_INT 0
19182: PPUSH
// if streamModeActive then
19183: LD_EXP 74
19187: IFFALSE 19196
// DefineStreamItems ( true ) ;
19189: LD_INT 1
19191: PPUSH
19192: CALL 20846 0 1
// UpdateFactoryWaypoints ( ) ;
19196: CALL 15456 0 0
// end ;
19200: LD_VAR 0 1
19204: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19205: LD_INT 0
19207: PPUSH
// if p2 = 100 then
19208: LD_VAR 0 2
19212: PUSH
19213: LD_INT 100
19215: EQUAL
19216: IFFALSE 20219
// begin if not StreamModeActive then
19218: LD_EXP 74
19222: NOT
19223: IFFALSE 19233
// StreamModeActive := true ;
19225: LD_ADDR_EXP 74
19229: PUSH
19230: LD_INT 1
19232: ST_TO_ADDR
// if p3 = 0 then
19233: LD_VAR 0 3
19237: PUSH
19238: LD_INT 0
19240: EQUAL
19241: IFFALSE 19247
// InitStreamMode ;
19243: CALL 20382 0 0
// if p3 = 1 then
19247: LD_VAR 0 3
19251: PUSH
19252: LD_INT 1
19254: EQUAL
19255: IFFALSE 19265
// sRocket := true ;
19257: LD_ADDR_EXP 79
19261: PUSH
19262: LD_INT 1
19264: ST_TO_ADDR
// if p3 = 2 then
19265: LD_VAR 0 3
19269: PUSH
19270: LD_INT 2
19272: EQUAL
19273: IFFALSE 19283
// sSpeed := true ;
19275: LD_ADDR_EXP 78
19279: PUSH
19280: LD_INT 1
19282: ST_TO_ADDR
// if p3 = 3 then
19283: LD_VAR 0 3
19287: PUSH
19288: LD_INT 3
19290: EQUAL
19291: IFFALSE 19301
// sEngine := true ;
19293: LD_ADDR_EXP 80
19297: PUSH
19298: LD_INT 1
19300: ST_TO_ADDR
// if p3 = 4 then
19301: LD_VAR 0 3
19305: PUSH
19306: LD_INT 4
19308: EQUAL
19309: IFFALSE 19319
// sSpec := true ;
19311: LD_ADDR_EXP 77
19315: PUSH
19316: LD_INT 1
19318: ST_TO_ADDR
// if p3 = 5 then
19319: LD_VAR 0 3
19323: PUSH
19324: LD_INT 5
19326: EQUAL
19327: IFFALSE 19337
// sLevel := true ;
19329: LD_ADDR_EXP 81
19333: PUSH
19334: LD_INT 1
19336: ST_TO_ADDR
// if p3 = 6 then
19337: LD_VAR 0 3
19341: PUSH
19342: LD_INT 6
19344: EQUAL
19345: IFFALSE 19355
// sArmoury := true ;
19347: LD_ADDR_EXP 82
19351: PUSH
19352: LD_INT 1
19354: ST_TO_ADDR
// if p3 = 7 then
19355: LD_VAR 0 3
19359: PUSH
19360: LD_INT 7
19362: EQUAL
19363: IFFALSE 19373
// sRadar := true ;
19365: LD_ADDR_EXP 83
19369: PUSH
19370: LD_INT 1
19372: ST_TO_ADDR
// if p3 = 8 then
19373: LD_VAR 0 3
19377: PUSH
19378: LD_INT 8
19380: EQUAL
19381: IFFALSE 19391
// sBunker := true ;
19383: LD_ADDR_EXP 84
19387: PUSH
19388: LD_INT 1
19390: ST_TO_ADDR
// if p3 = 9 then
19391: LD_VAR 0 3
19395: PUSH
19396: LD_INT 9
19398: EQUAL
19399: IFFALSE 19409
// sHack := true ;
19401: LD_ADDR_EXP 85
19405: PUSH
19406: LD_INT 1
19408: ST_TO_ADDR
// if p3 = 10 then
19409: LD_VAR 0 3
19413: PUSH
19414: LD_INT 10
19416: EQUAL
19417: IFFALSE 19427
// sFire := true ;
19419: LD_ADDR_EXP 86
19423: PUSH
19424: LD_INT 1
19426: ST_TO_ADDR
// if p3 = 11 then
19427: LD_VAR 0 3
19431: PUSH
19432: LD_INT 11
19434: EQUAL
19435: IFFALSE 19445
// sRefresh := true ;
19437: LD_ADDR_EXP 87
19441: PUSH
19442: LD_INT 1
19444: ST_TO_ADDR
// if p3 = 12 then
19445: LD_VAR 0 3
19449: PUSH
19450: LD_INT 12
19452: EQUAL
19453: IFFALSE 19463
// sExp := true ;
19455: LD_ADDR_EXP 88
19459: PUSH
19460: LD_INT 1
19462: ST_TO_ADDR
// if p3 = 13 then
19463: LD_VAR 0 3
19467: PUSH
19468: LD_INT 13
19470: EQUAL
19471: IFFALSE 19481
// sDepot := true ;
19473: LD_ADDR_EXP 89
19477: PUSH
19478: LD_INT 1
19480: ST_TO_ADDR
// if p3 = 14 then
19481: LD_VAR 0 3
19485: PUSH
19486: LD_INT 14
19488: EQUAL
19489: IFFALSE 19499
// sFlag := true ;
19491: LD_ADDR_EXP 90
19495: PUSH
19496: LD_INT 1
19498: ST_TO_ADDR
// if p3 = 15 then
19499: LD_VAR 0 3
19503: PUSH
19504: LD_INT 15
19506: EQUAL
19507: IFFALSE 19517
// sKamikadze := true ;
19509: LD_ADDR_EXP 98
19513: PUSH
19514: LD_INT 1
19516: ST_TO_ADDR
// if p3 = 16 then
19517: LD_VAR 0 3
19521: PUSH
19522: LD_INT 16
19524: EQUAL
19525: IFFALSE 19535
// sTroll := true ;
19527: LD_ADDR_EXP 99
19531: PUSH
19532: LD_INT 1
19534: ST_TO_ADDR
// if p3 = 17 then
19535: LD_VAR 0 3
19539: PUSH
19540: LD_INT 17
19542: EQUAL
19543: IFFALSE 19553
// sSlow := true ;
19545: LD_ADDR_EXP 100
19549: PUSH
19550: LD_INT 1
19552: ST_TO_ADDR
// if p3 = 18 then
19553: LD_VAR 0 3
19557: PUSH
19558: LD_INT 18
19560: EQUAL
19561: IFFALSE 19571
// sLack := true ;
19563: LD_ADDR_EXP 101
19567: PUSH
19568: LD_INT 1
19570: ST_TO_ADDR
// if p3 = 19 then
19571: LD_VAR 0 3
19575: PUSH
19576: LD_INT 19
19578: EQUAL
19579: IFFALSE 19589
// sTank := true ;
19581: LD_ADDR_EXP 103
19585: PUSH
19586: LD_INT 1
19588: ST_TO_ADDR
// if p3 = 20 then
19589: LD_VAR 0 3
19593: PUSH
19594: LD_INT 20
19596: EQUAL
19597: IFFALSE 19607
// sRemote := true ;
19599: LD_ADDR_EXP 104
19603: PUSH
19604: LD_INT 1
19606: ST_TO_ADDR
// if p3 = 21 then
19607: LD_VAR 0 3
19611: PUSH
19612: LD_INT 21
19614: EQUAL
19615: IFFALSE 19625
// sPowell := true ;
19617: LD_ADDR_EXP 105
19621: PUSH
19622: LD_INT 1
19624: ST_TO_ADDR
// if p3 = 22 then
19625: LD_VAR 0 3
19629: PUSH
19630: LD_INT 22
19632: EQUAL
19633: IFFALSE 19643
// sTeleport := true ;
19635: LD_ADDR_EXP 108
19639: PUSH
19640: LD_INT 1
19642: ST_TO_ADDR
// if p3 = 23 then
19643: LD_VAR 0 3
19647: PUSH
19648: LD_INT 23
19650: EQUAL
19651: IFFALSE 19661
// sOilTower := true ;
19653: LD_ADDR_EXP 110
19657: PUSH
19658: LD_INT 1
19660: ST_TO_ADDR
// if p3 = 24 then
19661: LD_VAR 0 3
19665: PUSH
19666: LD_INT 24
19668: EQUAL
19669: IFFALSE 19679
// sShovel := true ;
19671: LD_ADDR_EXP 111
19675: PUSH
19676: LD_INT 1
19678: ST_TO_ADDR
// if p3 = 25 then
19679: LD_VAR 0 3
19683: PUSH
19684: LD_INT 25
19686: EQUAL
19687: IFFALSE 19697
// sSheik := true ;
19689: LD_ADDR_EXP 112
19693: PUSH
19694: LD_INT 1
19696: ST_TO_ADDR
// if p3 = 26 then
19697: LD_VAR 0 3
19701: PUSH
19702: LD_INT 26
19704: EQUAL
19705: IFFALSE 19715
// sEarthquake := true ;
19707: LD_ADDR_EXP 114
19711: PUSH
19712: LD_INT 1
19714: ST_TO_ADDR
// if p3 = 27 then
19715: LD_VAR 0 3
19719: PUSH
19720: LD_INT 27
19722: EQUAL
19723: IFFALSE 19733
// sAI := true ;
19725: LD_ADDR_EXP 115
19729: PUSH
19730: LD_INT 1
19732: ST_TO_ADDR
// if p3 = 28 then
19733: LD_VAR 0 3
19737: PUSH
19738: LD_INT 28
19740: EQUAL
19741: IFFALSE 19751
// sCargo := true ;
19743: LD_ADDR_EXP 118
19747: PUSH
19748: LD_INT 1
19750: ST_TO_ADDR
// if p3 = 29 then
19751: LD_VAR 0 3
19755: PUSH
19756: LD_INT 29
19758: EQUAL
19759: IFFALSE 19769
// sDLaser := true ;
19761: LD_ADDR_EXP 119
19765: PUSH
19766: LD_INT 1
19768: ST_TO_ADDR
// if p3 = 30 then
19769: LD_VAR 0 3
19773: PUSH
19774: LD_INT 30
19776: EQUAL
19777: IFFALSE 19787
// sExchange := true ;
19779: LD_ADDR_EXP 120
19783: PUSH
19784: LD_INT 1
19786: ST_TO_ADDR
// if p3 = 31 then
19787: LD_VAR 0 3
19791: PUSH
19792: LD_INT 31
19794: EQUAL
19795: IFFALSE 19805
// sFac := true ;
19797: LD_ADDR_EXP 121
19801: PUSH
19802: LD_INT 1
19804: ST_TO_ADDR
// if p3 = 32 then
19805: LD_VAR 0 3
19809: PUSH
19810: LD_INT 32
19812: EQUAL
19813: IFFALSE 19823
// sPower := true ;
19815: LD_ADDR_EXP 122
19819: PUSH
19820: LD_INT 1
19822: ST_TO_ADDR
// if p3 = 33 then
19823: LD_VAR 0 3
19827: PUSH
19828: LD_INT 33
19830: EQUAL
19831: IFFALSE 19841
// sRandom := true ;
19833: LD_ADDR_EXP 123
19837: PUSH
19838: LD_INT 1
19840: ST_TO_ADDR
// if p3 = 34 then
19841: LD_VAR 0 3
19845: PUSH
19846: LD_INT 34
19848: EQUAL
19849: IFFALSE 19859
// sShield := true ;
19851: LD_ADDR_EXP 124
19855: PUSH
19856: LD_INT 1
19858: ST_TO_ADDR
// if p3 = 35 then
19859: LD_VAR 0 3
19863: PUSH
19864: LD_INT 35
19866: EQUAL
19867: IFFALSE 19877
// sTime := true ;
19869: LD_ADDR_EXP 125
19873: PUSH
19874: LD_INT 1
19876: ST_TO_ADDR
// if p3 = 36 then
19877: LD_VAR 0 3
19881: PUSH
19882: LD_INT 36
19884: EQUAL
19885: IFFALSE 19895
// sTools := true ;
19887: LD_ADDR_EXP 126
19891: PUSH
19892: LD_INT 1
19894: ST_TO_ADDR
// if p3 = 101 then
19895: LD_VAR 0 3
19899: PUSH
19900: LD_INT 101
19902: EQUAL
19903: IFFALSE 19913
// sSold := true ;
19905: LD_ADDR_EXP 91
19909: PUSH
19910: LD_INT 1
19912: ST_TO_ADDR
// if p3 = 102 then
19913: LD_VAR 0 3
19917: PUSH
19918: LD_INT 102
19920: EQUAL
19921: IFFALSE 19931
// sDiff := true ;
19923: LD_ADDR_EXP 92
19927: PUSH
19928: LD_INT 1
19930: ST_TO_ADDR
// if p3 = 103 then
19931: LD_VAR 0 3
19935: PUSH
19936: LD_INT 103
19938: EQUAL
19939: IFFALSE 19949
// sFog := true ;
19941: LD_ADDR_EXP 95
19945: PUSH
19946: LD_INT 1
19948: ST_TO_ADDR
// if p3 = 104 then
19949: LD_VAR 0 3
19953: PUSH
19954: LD_INT 104
19956: EQUAL
19957: IFFALSE 19967
// sReset := true ;
19959: LD_ADDR_EXP 96
19963: PUSH
19964: LD_INT 1
19966: ST_TO_ADDR
// if p3 = 105 then
19967: LD_VAR 0 3
19971: PUSH
19972: LD_INT 105
19974: EQUAL
19975: IFFALSE 19985
// sSun := true ;
19977: LD_ADDR_EXP 97
19981: PUSH
19982: LD_INT 1
19984: ST_TO_ADDR
// if p3 = 106 then
19985: LD_VAR 0 3
19989: PUSH
19990: LD_INT 106
19992: EQUAL
19993: IFFALSE 20003
// sTiger := true ;
19995: LD_ADDR_EXP 93
19999: PUSH
20000: LD_INT 1
20002: ST_TO_ADDR
// if p3 = 107 then
20003: LD_VAR 0 3
20007: PUSH
20008: LD_INT 107
20010: EQUAL
20011: IFFALSE 20021
// sBomb := true ;
20013: LD_ADDR_EXP 94
20017: PUSH
20018: LD_INT 1
20020: ST_TO_ADDR
// if p3 = 108 then
20021: LD_VAR 0 3
20025: PUSH
20026: LD_INT 108
20028: EQUAL
20029: IFFALSE 20039
// sWound := true ;
20031: LD_ADDR_EXP 102
20035: PUSH
20036: LD_INT 1
20038: ST_TO_ADDR
// if p3 = 109 then
20039: LD_VAR 0 3
20043: PUSH
20044: LD_INT 109
20046: EQUAL
20047: IFFALSE 20057
// sBetray := true ;
20049: LD_ADDR_EXP 106
20053: PUSH
20054: LD_INT 1
20056: ST_TO_ADDR
// if p3 = 110 then
20057: LD_VAR 0 3
20061: PUSH
20062: LD_INT 110
20064: EQUAL
20065: IFFALSE 20075
// sContamin := true ;
20067: LD_ADDR_EXP 107
20071: PUSH
20072: LD_INT 1
20074: ST_TO_ADDR
// if p3 = 111 then
20075: LD_VAR 0 3
20079: PUSH
20080: LD_INT 111
20082: EQUAL
20083: IFFALSE 20093
// sOil := true ;
20085: LD_ADDR_EXP 109
20089: PUSH
20090: LD_INT 1
20092: ST_TO_ADDR
// if p3 = 112 then
20093: LD_VAR 0 3
20097: PUSH
20098: LD_INT 112
20100: EQUAL
20101: IFFALSE 20111
// sStu := true ;
20103: LD_ADDR_EXP 113
20107: PUSH
20108: LD_INT 1
20110: ST_TO_ADDR
// if p3 = 113 then
20111: LD_VAR 0 3
20115: PUSH
20116: LD_INT 113
20118: EQUAL
20119: IFFALSE 20129
// sBazooka := true ;
20121: LD_ADDR_EXP 116
20125: PUSH
20126: LD_INT 1
20128: ST_TO_ADDR
// if p3 = 114 then
20129: LD_VAR 0 3
20133: PUSH
20134: LD_INT 114
20136: EQUAL
20137: IFFALSE 20147
// sMortar := true ;
20139: LD_ADDR_EXP 117
20143: PUSH
20144: LD_INT 1
20146: ST_TO_ADDR
// if p3 = 115 then
20147: LD_VAR 0 3
20151: PUSH
20152: LD_INT 115
20154: EQUAL
20155: IFFALSE 20165
// sRanger := true ;
20157: LD_ADDR_EXP 127
20161: PUSH
20162: LD_INT 1
20164: ST_TO_ADDR
// if p3 = 116 then
20165: LD_VAR 0 3
20169: PUSH
20170: LD_INT 116
20172: EQUAL
20173: IFFALSE 20183
// sComputer := true ;
20175: LD_ADDR_EXP 128
20179: PUSH
20180: LD_INT 1
20182: ST_TO_ADDR
// if p3 = 117 then
20183: LD_VAR 0 3
20187: PUSH
20188: LD_INT 117
20190: EQUAL
20191: IFFALSE 20201
// s30 := true ;
20193: LD_ADDR_EXP 129
20197: PUSH
20198: LD_INT 1
20200: ST_TO_ADDR
// if p3 = 118 then
20201: LD_VAR 0 3
20205: PUSH
20206: LD_INT 118
20208: EQUAL
20209: IFFALSE 20219
// s60 := true ;
20211: LD_ADDR_EXP 130
20215: PUSH
20216: LD_INT 1
20218: ST_TO_ADDR
// end ; if p2 = 101 then
20219: LD_VAR 0 2
20223: PUSH
20224: LD_INT 101
20226: EQUAL
20227: IFFALSE 20355
// begin case p3 of 1 :
20229: LD_VAR 0 3
20233: PUSH
20234: LD_INT 1
20236: DOUBLE
20237: EQUAL
20238: IFTRUE 20242
20240: GO 20249
20242: POP
// hHackUnlimitedResources ; 2 :
20243: CALL 32453 0 0
20247: GO 20355
20249: LD_INT 2
20251: DOUBLE
20252: EQUAL
20253: IFTRUE 20257
20255: GO 20264
20257: POP
// hHackSetLevel10 ; 3 :
20258: CALL 32586 0 0
20262: GO 20355
20264: LD_INT 3
20266: DOUBLE
20267: EQUAL
20268: IFTRUE 20272
20270: GO 20279
20272: POP
// hHackSetLevel10YourUnits ; 4 :
20273: CALL 32671 0 0
20277: GO 20355
20279: LD_INT 4
20281: DOUBLE
20282: EQUAL
20283: IFTRUE 20287
20285: GO 20294
20287: POP
// hHackInvincible ; 5 :
20288: CALL 33119 0 0
20292: GO 20355
20294: LD_INT 5
20296: DOUBLE
20297: EQUAL
20298: IFTRUE 20302
20300: GO 20309
20302: POP
// hHackInvisible ; 6 :
20303: CALL 33230 0 0
20307: GO 20355
20309: LD_INT 6
20311: DOUBLE
20312: EQUAL
20313: IFTRUE 20317
20315: GO 20324
20317: POP
// hHackChangeYourSide ; 7 :
20318: CALL 33287 0 0
20322: GO 20355
20324: LD_INT 7
20326: DOUBLE
20327: EQUAL
20328: IFTRUE 20332
20330: GO 20339
20332: POP
// hHackChangeUnitSide ; 8 :
20333: CALL 33329 0 0
20337: GO 20355
20339: LD_INT 8
20341: DOUBLE
20342: EQUAL
20343: IFTRUE 20347
20345: GO 20354
20347: POP
// hHackFog ; end ;
20348: CALL 33430 0 0
20352: GO 20355
20354: POP
// end ; end ;
20355: LD_VAR 0 7
20359: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20360: GO 20362
20362: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20363: LD_STRING initStreamRollete();
20365: PPUSH
20366: CALL_OW 559
// InitStreamMode ;
20370: CALL 20382 0 0
// DefineStreamItems ( false ) ;
20374: LD_INT 0
20376: PPUSH
20377: CALL 20846 0 1
// end ;
20381: END
// function InitStreamMode ; begin
20382: LD_INT 0
20384: PPUSH
// streamModeActive := false ;
20385: LD_ADDR_EXP 74
20389: PUSH
20390: LD_INT 0
20392: ST_TO_ADDR
// normalCounter := 36 ;
20393: LD_ADDR_EXP 75
20397: PUSH
20398: LD_INT 36
20400: ST_TO_ADDR
// hardcoreCounter := 18 ;
20401: LD_ADDR_EXP 76
20405: PUSH
20406: LD_INT 18
20408: ST_TO_ADDR
// sRocket := false ;
20409: LD_ADDR_EXP 79
20413: PUSH
20414: LD_INT 0
20416: ST_TO_ADDR
// sSpeed := false ;
20417: LD_ADDR_EXP 78
20421: PUSH
20422: LD_INT 0
20424: ST_TO_ADDR
// sEngine := false ;
20425: LD_ADDR_EXP 80
20429: PUSH
20430: LD_INT 0
20432: ST_TO_ADDR
// sSpec := false ;
20433: LD_ADDR_EXP 77
20437: PUSH
20438: LD_INT 0
20440: ST_TO_ADDR
// sLevel := false ;
20441: LD_ADDR_EXP 81
20445: PUSH
20446: LD_INT 0
20448: ST_TO_ADDR
// sArmoury := false ;
20449: LD_ADDR_EXP 82
20453: PUSH
20454: LD_INT 0
20456: ST_TO_ADDR
// sRadar := false ;
20457: LD_ADDR_EXP 83
20461: PUSH
20462: LD_INT 0
20464: ST_TO_ADDR
// sBunker := false ;
20465: LD_ADDR_EXP 84
20469: PUSH
20470: LD_INT 0
20472: ST_TO_ADDR
// sHack := false ;
20473: LD_ADDR_EXP 85
20477: PUSH
20478: LD_INT 0
20480: ST_TO_ADDR
// sFire := false ;
20481: LD_ADDR_EXP 86
20485: PUSH
20486: LD_INT 0
20488: ST_TO_ADDR
// sRefresh := false ;
20489: LD_ADDR_EXP 87
20493: PUSH
20494: LD_INT 0
20496: ST_TO_ADDR
// sExp := false ;
20497: LD_ADDR_EXP 88
20501: PUSH
20502: LD_INT 0
20504: ST_TO_ADDR
// sDepot := false ;
20505: LD_ADDR_EXP 89
20509: PUSH
20510: LD_INT 0
20512: ST_TO_ADDR
// sFlag := false ;
20513: LD_ADDR_EXP 90
20517: PUSH
20518: LD_INT 0
20520: ST_TO_ADDR
// sKamikadze := false ;
20521: LD_ADDR_EXP 98
20525: PUSH
20526: LD_INT 0
20528: ST_TO_ADDR
// sTroll := false ;
20529: LD_ADDR_EXP 99
20533: PUSH
20534: LD_INT 0
20536: ST_TO_ADDR
// sSlow := false ;
20537: LD_ADDR_EXP 100
20541: PUSH
20542: LD_INT 0
20544: ST_TO_ADDR
// sLack := false ;
20545: LD_ADDR_EXP 101
20549: PUSH
20550: LD_INT 0
20552: ST_TO_ADDR
// sTank := false ;
20553: LD_ADDR_EXP 103
20557: PUSH
20558: LD_INT 0
20560: ST_TO_ADDR
// sRemote := false ;
20561: LD_ADDR_EXP 104
20565: PUSH
20566: LD_INT 0
20568: ST_TO_ADDR
// sPowell := false ;
20569: LD_ADDR_EXP 105
20573: PUSH
20574: LD_INT 0
20576: ST_TO_ADDR
// sTeleport := false ;
20577: LD_ADDR_EXP 108
20581: PUSH
20582: LD_INT 0
20584: ST_TO_ADDR
// sOilTower := false ;
20585: LD_ADDR_EXP 110
20589: PUSH
20590: LD_INT 0
20592: ST_TO_ADDR
// sShovel := false ;
20593: LD_ADDR_EXP 111
20597: PUSH
20598: LD_INT 0
20600: ST_TO_ADDR
// sSheik := false ;
20601: LD_ADDR_EXP 112
20605: PUSH
20606: LD_INT 0
20608: ST_TO_ADDR
// sEarthquake := false ;
20609: LD_ADDR_EXP 114
20613: PUSH
20614: LD_INT 0
20616: ST_TO_ADDR
// sAI := false ;
20617: LD_ADDR_EXP 115
20621: PUSH
20622: LD_INT 0
20624: ST_TO_ADDR
// sCargo := false ;
20625: LD_ADDR_EXP 118
20629: PUSH
20630: LD_INT 0
20632: ST_TO_ADDR
// sDLaser := false ;
20633: LD_ADDR_EXP 119
20637: PUSH
20638: LD_INT 0
20640: ST_TO_ADDR
// sExchange := false ;
20641: LD_ADDR_EXP 120
20645: PUSH
20646: LD_INT 0
20648: ST_TO_ADDR
// sFac := false ;
20649: LD_ADDR_EXP 121
20653: PUSH
20654: LD_INT 0
20656: ST_TO_ADDR
// sPower := false ;
20657: LD_ADDR_EXP 122
20661: PUSH
20662: LD_INT 0
20664: ST_TO_ADDR
// sRandom := false ;
20665: LD_ADDR_EXP 123
20669: PUSH
20670: LD_INT 0
20672: ST_TO_ADDR
// sShield := false ;
20673: LD_ADDR_EXP 124
20677: PUSH
20678: LD_INT 0
20680: ST_TO_ADDR
// sTime := false ;
20681: LD_ADDR_EXP 125
20685: PUSH
20686: LD_INT 0
20688: ST_TO_ADDR
// sTools := false ;
20689: LD_ADDR_EXP 126
20693: PUSH
20694: LD_INT 0
20696: ST_TO_ADDR
// sSold := false ;
20697: LD_ADDR_EXP 91
20701: PUSH
20702: LD_INT 0
20704: ST_TO_ADDR
// sDiff := false ;
20705: LD_ADDR_EXP 92
20709: PUSH
20710: LD_INT 0
20712: ST_TO_ADDR
// sFog := false ;
20713: LD_ADDR_EXP 95
20717: PUSH
20718: LD_INT 0
20720: ST_TO_ADDR
// sReset := false ;
20721: LD_ADDR_EXP 96
20725: PUSH
20726: LD_INT 0
20728: ST_TO_ADDR
// sSun := false ;
20729: LD_ADDR_EXP 97
20733: PUSH
20734: LD_INT 0
20736: ST_TO_ADDR
// sTiger := false ;
20737: LD_ADDR_EXP 93
20741: PUSH
20742: LD_INT 0
20744: ST_TO_ADDR
// sBomb := false ;
20745: LD_ADDR_EXP 94
20749: PUSH
20750: LD_INT 0
20752: ST_TO_ADDR
// sWound := false ;
20753: LD_ADDR_EXP 102
20757: PUSH
20758: LD_INT 0
20760: ST_TO_ADDR
// sBetray := false ;
20761: LD_ADDR_EXP 106
20765: PUSH
20766: LD_INT 0
20768: ST_TO_ADDR
// sContamin := false ;
20769: LD_ADDR_EXP 107
20773: PUSH
20774: LD_INT 0
20776: ST_TO_ADDR
// sOil := false ;
20777: LD_ADDR_EXP 109
20781: PUSH
20782: LD_INT 0
20784: ST_TO_ADDR
// sStu := false ;
20785: LD_ADDR_EXP 113
20789: PUSH
20790: LD_INT 0
20792: ST_TO_ADDR
// sBazooka := false ;
20793: LD_ADDR_EXP 116
20797: PUSH
20798: LD_INT 0
20800: ST_TO_ADDR
// sMortar := false ;
20801: LD_ADDR_EXP 117
20805: PUSH
20806: LD_INT 0
20808: ST_TO_ADDR
// sRanger := false ;
20809: LD_ADDR_EXP 127
20813: PUSH
20814: LD_INT 0
20816: ST_TO_ADDR
// sComputer := false ;
20817: LD_ADDR_EXP 128
20821: PUSH
20822: LD_INT 0
20824: ST_TO_ADDR
// s30 := false ;
20825: LD_ADDR_EXP 129
20829: PUSH
20830: LD_INT 0
20832: ST_TO_ADDR
// s60 := false ;
20833: LD_ADDR_EXP 130
20837: PUSH
20838: LD_INT 0
20840: ST_TO_ADDR
// end ;
20841: LD_VAR 0 1
20845: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20846: LD_INT 0
20848: PPUSH
20849: PPUSH
20850: PPUSH
20851: PPUSH
20852: PPUSH
20853: PPUSH
20854: PPUSH
// result := [ ] ;
20855: LD_ADDR_VAR 0 2
20859: PUSH
20860: EMPTY
20861: ST_TO_ADDR
// if campaign_id = 1 then
20862: LD_OWVAR 69
20866: PUSH
20867: LD_INT 1
20869: EQUAL
20870: IFFALSE 24036
// begin case mission_number of 1 :
20872: LD_OWVAR 70
20876: PUSH
20877: LD_INT 1
20879: DOUBLE
20880: EQUAL
20881: IFTRUE 20885
20883: GO 20961
20885: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20886: LD_ADDR_VAR 0 2
20890: PUSH
20891: LD_INT 2
20893: PUSH
20894: LD_INT 4
20896: PUSH
20897: LD_INT 11
20899: PUSH
20900: LD_INT 12
20902: PUSH
20903: LD_INT 15
20905: PUSH
20906: LD_INT 16
20908: PUSH
20909: LD_INT 22
20911: PUSH
20912: LD_INT 23
20914: PUSH
20915: LD_INT 26
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: PUSH
20929: LD_INT 101
20931: PUSH
20932: LD_INT 102
20934: PUSH
20935: LD_INT 106
20937: PUSH
20938: LD_INT 116
20940: PUSH
20941: LD_INT 117
20943: PUSH
20944: LD_INT 118
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: ST_TO_ADDR
20959: GO 24034
20961: LD_INT 2
20963: DOUBLE
20964: EQUAL
20965: IFTRUE 20969
20967: GO 21053
20969: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20970: LD_ADDR_VAR 0 2
20974: PUSH
20975: LD_INT 2
20977: PUSH
20978: LD_INT 4
20980: PUSH
20981: LD_INT 11
20983: PUSH
20984: LD_INT 12
20986: PUSH
20987: LD_INT 15
20989: PUSH
20990: LD_INT 16
20992: PUSH
20993: LD_INT 22
20995: PUSH
20996: LD_INT 23
20998: PUSH
20999: LD_INT 26
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: PUSH
21013: LD_INT 101
21015: PUSH
21016: LD_INT 102
21018: PUSH
21019: LD_INT 105
21021: PUSH
21022: LD_INT 106
21024: PUSH
21025: LD_INT 108
21027: PUSH
21028: LD_INT 116
21030: PUSH
21031: LD_INT 117
21033: PUSH
21034: LD_INT 118
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: ST_TO_ADDR
21051: GO 24034
21053: LD_INT 3
21055: DOUBLE
21056: EQUAL
21057: IFTRUE 21061
21059: GO 21149
21061: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21062: LD_ADDR_VAR 0 2
21066: PUSH
21067: LD_INT 2
21069: PUSH
21070: LD_INT 4
21072: PUSH
21073: LD_INT 5
21075: PUSH
21076: LD_INT 11
21078: PUSH
21079: LD_INT 12
21081: PUSH
21082: LD_INT 15
21084: PUSH
21085: LD_INT 16
21087: PUSH
21088: LD_INT 22
21090: PUSH
21091: LD_INT 26
21093: PUSH
21094: LD_INT 36
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 101
21111: PUSH
21112: LD_INT 102
21114: PUSH
21115: LD_INT 105
21117: PUSH
21118: LD_INT 106
21120: PUSH
21121: LD_INT 108
21123: PUSH
21124: LD_INT 116
21126: PUSH
21127: LD_INT 117
21129: PUSH
21130: LD_INT 118
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: ST_TO_ADDR
21147: GO 24034
21149: LD_INT 4
21151: DOUBLE
21152: EQUAL
21153: IFTRUE 21157
21155: GO 21253
21157: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21158: LD_ADDR_VAR 0 2
21162: PUSH
21163: LD_INT 2
21165: PUSH
21166: LD_INT 4
21168: PUSH
21169: LD_INT 5
21171: PUSH
21172: LD_INT 8
21174: PUSH
21175: LD_INT 11
21177: PUSH
21178: LD_INT 12
21180: PUSH
21181: LD_INT 15
21183: PUSH
21184: LD_INT 16
21186: PUSH
21187: LD_INT 22
21189: PUSH
21190: LD_INT 23
21192: PUSH
21193: LD_INT 26
21195: PUSH
21196: LD_INT 36
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: PUSH
21213: LD_INT 101
21215: PUSH
21216: LD_INT 102
21218: PUSH
21219: LD_INT 105
21221: PUSH
21222: LD_INT 106
21224: PUSH
21225: LD_INT 108
21227: PUSH
21228: LD_INT 116
21230: PUSH
21231: LD_INT 117
21233: PUSH
21234: LD_INT 118
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: ST_TO_ADDR
21251: GO 24034
21253: LD_INT 5
21255: DOUBLE
21256: EQUAL
21257: IFTRUE 21261
21259: GO 21373
21261: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21262: LD_ADDR_VAR 0 2
21266: PUSH
21267: LD_INT 2
21269: PUSH
21270: LD_INT 4
21272: PUSH
21273: LD_INT 5
21275: PUSH
21276: LD_INT 6
21278: PUSH
21279: LD_INT 8
21281: PUSH
21282: LD_INT 11
21284: PUSH
21285: LD_INT 12
21287: PUSH
21288: LD_INT 15
21290: PUSH
21291: LD_INT 16
21293: PUSH
21294: LD_INT 22
21296: PUSH
21297: LD_INT 23
21299: PUSH
21300: LD_INT 25
21302: PUSH
21303: LD_INT 26
21305: PUSH
21306: LD_INT 36
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 101
21327: PUSH
21328: LD_INT 102
21330: PUSH
21331: LD_INT 105
21333: PUSH
21334: LD_INT 106
21336: PUSH
21337: LD_INT 108
21339: PUSH
21340: LD_INT 109
21342: PUSH
21343: LD_INT 112
21345: PUSH
21346: LD_INT 116
21348: PUSH
21349: LD_INT 117
21351: PUSH
21352: LD_INT 118
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: ST_TO_ADDR
21371: GO 24034
21373: LD_INT 6
21375: DOUBLE
21376: EQUAL
21377: IFTRUE 21381
21379: GO 21513
21381: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21382: LD_ADDR_VAR 0 2
21386: PUSH
21387: LD_INT 2
21389: PUSH
21390: LD_INT 4
21392: PUSH
21393: LD_INT 5
21395: PUSH
21396: LD_INT 6
21398: PUSH
21399: LD_INT 8
21401: PUSH
21402: LD_INT 11
21404: PUSH
21405: LD_INT 12
21407: PUSH
21408: LD_INT 15
21410: PUSH
21411: LD_INT 16
21413: PUSH
21414: LD_INT 20
21416: PUSH
21417: LD_INT 21
21419: PUSH
21420: LD_INT 22
21422: PUSH
21423: LD_INT 23
21425: PUSH
21426: LD_INT 25
21428: PUSH
21429: LD_INT 26
21431: PUSH
21432: LD_INT 30
21434: PUSH
21435: LD_INT 31
21437: PUSH
21438: LD_INT 32
21440: PUSH
21441: LD_INT 36
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 101
21467: PUSH
21468: LD_INT 102
21470: PUSH
21471: LD_INT 105
21473: PUSH
21474: LD_INT 106
21476: PUSH
21477: LD_INT 108
21479: PUSH
21480: LD_INT 109
21482: PUSH
21483: LD_INT 112
21485: PUSH
21486: LD_INT 116
21488: PUSH
21489: LD_INT 117
21491: PUSH
21492: LD_INT 118
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: ST_TO_ADDR
21511: GO 24034
21513: LD_INT 7
21515: DOUBLE
21516: EQUAL
21517: IFTRUE 21521
21519: GO 21633
21521: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21522: LD_ADDR_VAR 0 2
21526: PUSH
21527: LD_INT 2
21529: PUSH
21530: LD_INT 4
21532: PUSH
21533: LD_INT 5
21535: PUSH
21536: LD_INT 7
21538: PUSH
21539: LD_INT 11
21541: PUSH
21542: LD_INT 12
21544: PUSH
21545: LD_INT 15
21547: PUSH
21548: LD_INT 16
21550: PUSH
21551: LD_INT 20
21553: PUSH
21554: LD_INT 21
21556: PUSH
21557: LD_INT 22
21559: PUSH
21560: LD_INT 23
21562: PUSH
21563: LD_INT 25
21565: PUSH
21566: LD_INT 26
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: PUSH
21585: LD_INT 101
21587: PUSH
21588: LD_INT 102
21590: PUSH
21591: LD_INT 103
21593: PUSH
21594: LD_INT 105
21596: PUSH
21597: LD_INT 106
21599: PUSH
21600: LD_INT 108
21602: PUSH
21603: LD_INT 112
21605: PUSH
21606: LD_INT 116
21608: PUSH
21609: LD_INT 117
21611: PUSH
21612: LD_INT 118
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: ST_TO_ADDR
21631: GO 24034
21633: LD_INT 8
21635: DOUBLE
21636: EQUAL
21637: IFTRUE 21641
21639: GO 21781
21641: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21642: LD_ADDR_VAR 0 2
21646: PUSH
21647: LD_INT 2
21649: PUSH
21650: LD_INT 4
21652: PUSH
21653: LD_INT 5
21655: PUSH
21656: LD_INT 6
21658: PUSH
21659: LD_INT 7
21661: PUSH
21662: LD_INT 8
21664: PUSH
21665: LD_INT 11
21667: PUSH
21668: LD_INT 12
21670: PUSH
21671: LD_INT 15
21673: PUSH
21674: LD_INT 16
21676: PUSH
21677: LD_INT 20
21679: PUSH
21680: LD_INT 21
21682: PUSH
21683: LD_INT 22
21685: PUSH
21686: LD_INT 23
21688: PUSH
21689: LD_INT 25
21691: PUSH
21692: LD_INT 26
21694: PUSH
21695: LD_INT 30
21697: PUSH
21698: LD_INT 31
21700: PUSH
21701: LD_INT 32
21703: PUSH
21704: LD_INT 36
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 101
21731: PUSH
21732: LD_INT 102
21734: PUSH
21735: LD_INT 103
21737: PUSH
21738: LD_INT 105
21740: PUSH
21741: LD_INT 106
21743: PUSH
21744: LD_INT 108
21746: PUSH
21747: LD_INT 109
21749: PUSH
21750: LD_INT 112
21752: PUSH
21753: LD_INT 116
21755: PUSH
21756: LD_INT 117
21758: PUSH
21759: LD_INT 118
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: ST_TO_ADDR
21779: GO 24034
21781: LD_INT 9
21783: DOUBLE
21784: EQUAL
21785: IFTRUE 21789
21787: GO 21937
21789: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21790: LD_ADDR_VAR 0 2
21794: PUSH
21795: LD_INT 2
21797: PUSH
21798: LD_INT 4
21800: PUSH
21801: LD_INT 5
21803: PUSH
21804: LD_INT 6
21806: PUSH
21807: LD_INT 7
21809: PUSH
21810: LD_INT 8
21812: PUSH
21813: LD_INT 11
21815: PUSH
21816: LD_INT 12
21818: PUSH
21819: LD_INT 15
21821: PUSH
21822: LD_INT 16
21824: PUSH
21825: LD_INT 20
21827: PUSH
21828: LD_INT 21
21830: PUSH
21831: LD_INT 22
21833: PUSH
21834: LD_INT 23
21836: PUSH
21837: LD_INT 25
21839: PUSH
21840: LD_INT 26
21842: PUSH
21843: LD_INT 28
21845: PUSH
21846: LD_INT 30
21848: PUSH
21849: LD_INT 31
21851: PUSH
21852: LD_INT 32
21854: PUSH
21855: LD_INT 36
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 101
21883: PUSH
21884: LD_INT 102
21886: PUSH
21887: LD_INT 103
21889: PUSH
21890: LD_INT 105
21892: PUSH
21893: LD_INT 106
21895: PUSH
21896: LD_INT 108
21898: PUSH
21899: LD_INT 109
21901: PUSH
21902: LD_INT 112
21904: PUSH
21905: LD_INT 114
21907: PUSH
21908: LD_INT 116
21910: PUSH
21911: LD_INT 117
21913: PUSH
21914: LD_INT 118
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: ST_TO_ADDR
21935: GO 24034
21937: LD_INT 10
21939: DOUBLE
21940: EQUAL
21941: IFTRUE 21945
21943: GO 22141
21945: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21946: LD_ADDR_VAR 0 2
21950: PUSH
21951: LD_INT 2
21953: PUSH
21954: LD_INT 4
21956: PUSH
21957: LD_INT 5
21959: PUSH
21960: LD_INT 6
21962: PUSH
21963: LD_INT 7
21965: PUSH
21966: LD_INT 8
21968: PUSH
21969: LD_INT 9
21971: PUSH
21972: LD_INT 10
21974: PUSH
21975: LD_INT 11
21977: PUSH
21978: LD_INT 12
21980: PUSH
21981: LD_INT 13
21983: PUSH
21984: LD_INT 14
21986: PUSH
21987: LD_INT 15
21989: PUSH
21990: LD_INT 16
21992: PUSH
21993: LD_INT 17
21995: PUSH
21996: LD_INT 18
21998: PUSH
21999: LD_INT 19
22001: PUSH
22002: LD_INT 20
22004: PUSH
22005: LD_INT 21
22007: PUSH
22008: LD_INT 22
22010: PUSH
22011: LD_INT 23
22013: PUSH
22014: LD_INT 24
22016: PUSH
22017: LD_INT 25
22019: PUSH
22020: LD_INT 26
22022: PUSH
22023: LD_INT 28
22025: PUSH
22026: LD_INT 30
22028: PUSH
22029: LD_INT 31
22031: PUSH
22032: LD_INT 32
22034: PUSH
22035: LD_INT 36
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 101
22071: PUSH
22072: LD_INT 102
22074: PUSH
22075: LD_INT 103
22077: PUSH
22078: LD_INT 104
22080: PUSH
22081: LD_INT 105
22083: PUSH
22084: LD_INT 106
22086: PUSH
22087: LD_INT 107
22089: PUSH
22090: LD_INT 108
22092: PUSH
22093: LD_INT 109
22095: PUSH
22096: LD_INT 110
22098: PUSH
22099: LD_INT 111
22101: PUSH
22102: LD_INT 112
22104: PUSH
22105: LD_INT 114
22107: PUSH
22108: LD_INT 116
22110: PUSH
22111: LD_INT 117
22113: PUSH
22114: LD_INT 118
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: ST_TO_ADDR
22139: GO 24034
22141: LD_INT 11
22143: DOUBLE
22144: EQUAL
22145: IFTRUE 22149
22147: GO 22353
22149: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22150: LD_ADDR_VAR 0 2
22154: PUSH
22155: LD_INT 2
22157: PUSH
22158: LD_INT 3
22160: PUSH
22161: LD_INT 4
22163: PUSH
22164: LD_INT 5
22166: PUSH
22167: LD_INT 6
22169: PUSH
22170: LD_INT 7
22172: PUSH
22173: LD_INT 8
22175: PUSH
22176: LD_INT 9
22178: PUSH
22179: LD_INT 10
22181: PUSH
22182: LD_INT 11
22184: PUSH
22185: LD_INT 12
22187: PUSH
22188: LD_INT 13
22190: PUSH
22191: LD_INT 14
22193: PUSH
22194: LD_INT 15
22196: PUSH
22197: LD_INT 16
22199: PUSH
22200: LD_INT 17
22202: PUSH
22203: LD_INT 18
22205: PUSH
22206: LD_INT 19
22208: PUSH
22209: LD_INT 20
22211: PUSH
22212: LD_INT 21
22214: PUSH
22215: LD_INT 22
22217: PUSH
22218: LD_INT 23
22220: PUSH
22221: LD_INT 24
22223: PUSH
22224: LD_INT 25
22226: PUSH
22227: LD_INT 26
22229: PUSH
22230: LD_INT 28
22232: PUSH
22233: LD_INT 30
22235: PUSH
22236: LD_INT 31
22238: PUSH
22239: LD_INT 32
22241: PUSH
22242: LD_INT 34
22244: PUSH
22245: LD_INT 36
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: PUSH
22281: LD_INT 101
22283: PUSH
22284: LD_INT 102
22286: PUSH
22287: LD_INT 103
22289: PUSH
22290: LD_INT 104
22292: PUSH
22293: LD_INT 105
22295: PUSH
22296: LD_INT 106
22298: PUSH
22299: LD_INT 107
22301: PUSH
22302: LD_INT 108
22304: PUSH
22305: LD_INT 109
22307: PUSH
22308: LD_INT 110
22310: PUSH
22311: LD_INT 111
22313: PUSH
22314: LD_INT 112
22316: PUSH
22317: LD_INT 114
22319: PUSH
22320: LD_INT 116
22322: PUSH
22323: LD_INT 117
22325: PUSH
22326: LD_INT 118
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: ST_TO_ADDR
22351: GO 24034
22353: LD_INT 12
22355: DOUBLE
22356: EQUAL
22357: IFTRUE 22361
22359: GO 22581
22361: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22362: LD_ADDR_VAR 0 2
22366: PUSH
22367: LD_INT 1
22369: PUSH
22370: LD_INT 2
22372: PUSH
22373: LD_INT 3
22375: PUSH
22376: LD_INT 4
22378: PUSH
22379: LD_INT 5
22381: PUSH
22382: LD_INT 6
22384: PUSH
22385: LD_INT 7
22387: PUSH
22388: LD_INT 8
22390: PUSH
22391: LD_INT 9
22393: PUSH
22394: LD_INT 10
22396: PUSH
22397: LD_INT 11
22399: PUSH
22400: LD_INT 12
22402: PUSH
22403: LD_INT 13
22405: PUSH
22406: LD_INT 14
22408: PUSH
22409: LD_INT 15
22411: PUSH
22412: LD_INT 16
22414: PUSH
22415: LD_INT 17
22417: PUSH
22418: LD_INT 18
22420: PUSH
22421: LD_INT 19
22423: PUSH
22424: LD_INT 20
22426: PUSH
22427: LD_INT 21
22429: PUSH
22430: LD_INT 22
22432: PUSH
22433: LD_INT 23
22435: PUSH
22436: LD_INT 24
22438: PUSH
22439: LD_INT 25
22441: PUSH
22442: LD_INT 26
22444: PUSH
22445: LD_INT 27
22447: PUSH
22448: LD_INT 28
22450: PUSH
22451: LD_INT 30
22453: PUSH
22454: LD_INT 31
22456: PUSH
22457: LD_INT 32
22459: PUSH
22460: LD_INT 33
22462: PUSH
22463: LD_INT 34
22465: PUSH
22466: LD_INT 36
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 101
22507: PUSH
22508: LD_INT 102
22510: PUSH
22511: LD_INT 103
22513: PUSH
22514: LD_INT 104
22516: PUSH
22517: LD_INT 105
22519: PUSH
22520: LD_INT 106
22522: PUSH
22523: LD_INT 107
22525: PUSH
22526: LD_INT 108
22528: PUSH
22529: LD_INT 109
22531: PUSH
22532: LD_INT 110
22534: PUSH
22535: LD_INT 111
22537: PUSH
22538: LD_INT 112
22540: PUSH
22541: LD_INT 113
22543: PUSH
22544: LD_INT 114
22546: PUSH
22547: LD_INT 116
22549: PUSH
22550: LD_INT 117
22552: PUSH
22553: LD_INT 118
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: ST_TO_ADDR
22579: GO 24034
22581: LD_INT 13
22583: DOUBLE
22584: EQUAL
22585: IFTRUE 22589
22587: GO 22797
22589: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22590: LD_ADDR_VAR 0 2
22594: PUSH
22595: LD_INT 1
22597: PUSH
22598: LD_INT 2
22600: PUSH
22601: LD_INT 3
22603: PUSH
22604: LD_INT 4
22606: PUSH
22607: LD_INT 5
22609: PUSH
22610: LD_INT 8
22612: PUSH
22613: LD_INT 9
22615: PUSH
22616: LD_INT 10
22618: PUSH
22619: LD_INT 11
22621: PUSH
22622: LD_INT 12
22624: PUSH
22625: LD_INT 14
22627: PUSH
22628: LD_INT 15
22630: PUSH
22631: LD_INT 16
22633: PUSH
22634: LD_INT 17
22636: PUSH
22637: LD_INT 18
22639: PUSH
22640: LD_INT 19
22642: PUSH
22643: LD_INT 20
22645: PUSH
22646: LD_INT 21
22648: PUSH
22649: LD_INT 22
22651: PUSH
22652: LD_INT 23
22654: PUSH
22655: LD_INT 24
22657: PUSH
22658: LD_INT 25
22660: PUSH
22661: LD_INT 26
22663: PUSH
22664: LD_INT 27
22666: PUSH
22667: LD_INT 28
22669: PUSH
22670: LD_INT 30
22672: PUSH
22673: LD_INT 31
22675: PUSH
22676: LD_INT 32
22678: PUSH
22679: LD_INT 33
22681: PUSH
22682: LD_INT 34
22684: PUSH
22685: LD_INT 36
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: PUSH
22721: LD_INT 101
22723: PUSH
22724: LD_INT 102
22726: PUSH
22727: LD_INT 103
22729: PUSH
22730: LD_INT 104
22732: PUSH
22733: LD_INT 105
22735: PUSH
22736: LD_INT 106
22738: PUSH
22739: LD_INT 107
22741: PUSH
22742: LD_INT 108
22744: PUSH
22745: LD_INT 109
22747: PUSH
22748: LD_INT 110
22750: PUSH
22751: LD_INT 111
22753: PUSH
22754: LD_INT 112
22756: PUSH
22757: LD_INT 113
22759: PUSH
22760: LD_INT 114
22762: PUSH
22763: LD_INT 116
22765: PUSH
22766: LD_INT 117
22768: PUSH
22769: LD_INT 118
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: ST_TO_ADDR
22795: GO 24034
22797: LD_INT 14
22799: DOUBLE
22800: EQUAL
22801: IFTRUE 22805
22803: GO 23029
22805: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22806: LD_ADDR_VAR 0 2
22810: PUSH
22811: LD_INT 1
22813: PUSH
22814: LD_INT 2
22816: PUSH
22817: LD_INT 3
22819: PUSH
22820: LD_INT 4
22822: PUSH
22823: LD_INT 5
22825: PUSH
22826: LD_INT 6
22828: PUSH
22829: LD_INT 7
22831: PUSH
22832: LD_INT 8
22834: PUSH
22835: LD_INT 9
22837: PUSH
22838: LD_INT 10
22840: PUSH
22841: LD_INT 11
22843: PUSH
22844: LD_INT 12
22846: PUSH
22847: LD_INT 13
22849: PUSH
22850: LD_INT 14
22852: PUSH
22853: LD_INT 15
22855: PUSH
22856: LD_INT 16
22858: PUSH
22859: LD_INT 17
22861: PUSH
22862: LD_INT 18
22864: PUSH
22865: LD_INT 19
22867: PUSH
22868: LD_INT 20
22870: PUSH
22871: LD_INT 21
22873: PUSH
22874: LD_INT 22
22876: PUSH
22877: LD_INT 23
22879: PUSH
22880: LD_INT 24
22882: PUSH
22883: LD_INT 25
22885: PUSH
22886: LD_INT 26
22888: PUSH
22889: LD_INT 27
22891: PUSH
22892: LD_INT 28
22894: PUSH
22895: LD_INT 29
22897: PUSH
22898: LD_INT 30
22900: PUSH
22901: LD_INT 31
22903: PUSH
22904: LD_INT 32
22906: PUSH
22907: LD_INT 33
22909: PUSH
22910: LD_INT 34
22912: PUSH
22913: LD_INT 36
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 101
22955: PUSH
22956: LD_INT 102
22958: PUSH
22959: LD_INT 103
22961: PUSH
22962: LD_INT 104
22964: PUSH
22965: LD_INT 105
22967: PUSH
22968: LD_INT 106
22970: PUSH
22971: LD_INT 107
22973: PUSH
22974: LD_INT 108
22976: PUSH
22977: LD_INT 109
22979: PUSH
22980: LD_INT 110
22982: PUSH
22983: LD_INT 111
22985: PUSH
22986: LD_INT 112
22988: PUSH
22989: LD_INT 113
22991: PUSH
22992: LD_INT 114
22994: PUSH
22995: LD_INT 116
22997: PUSH
22998: LD_INT 117
23000: PUSH
23001: LD_INT 118
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: ST_TO_ADDR
23027: GO 24034
23029: LD_INT 15
23031: DOUBLE
23032: EQUAL
23033: IFTRUE 23037
23035: GO 23261
23037: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23038: LD_ADDR_VAR 0 2
23042: PUSH
23043: LD_INT 1
23045: PUSH
23046: LD_INT 2
23048: PUSH
23049: LD_INT 3
23051: PUSH
23052: LD_INT 4
23054: PUSH
23055: LD_INT 5
23057: PUSH
23058: LD_INT 6
23060: PUSH
23061: LD_INT 7
23063: PUSH
23064: LD_INT 8
23066: PUSH
23067: LD_INT 9
23069: PUSH
23070: LD_INT 10
23072: PUSH
23073: LD_INT 11
23075: PUSH
23076: LD_INT 12
23078: PUSH
23079: LD_INT 13
23081: PUSH
23082: LD_INT 14
23084: PUSH
23085: LD_INT 15
23087: PUSH
23088: LD_INT 16
23090: PUSH
23091: LD_INT 17
23093: PUSH
23094: LD_INT 18
23096: PUSH
23097: LD_INT 19
23099: PUSH
23100: LD_INT 20
23102: PUSH
23103: LD_INT 21
23105: PUSH
23106: LD_INT 22
23108: PUSH
23109: LD_INT 23
23111: PUSH
23112: LD_INT 24
23114: PUSH
23115: LD_INT 25
23117: PUSH
23118: LD_INT 26
23120: PUSH
23121: LD_INT 27
23123: PUSH
23124: LD_INT 28
23126: PUSH
23127: LD_INT 29
23129: PUSH
23130: LD_INT 30
23132: PUSH
23133: LD_INT 31
23135: PUSH
23136: LD_INT 32
23138: PUSH
23139: LD_INT 33
23141: PUSH
23142: LD_INT 34
23144: PUSH
23145: LD_INT 36
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 101
23187: PUSH
23188: LD_INT 102
23190: PUSH
23191: LD_INT 103
23193: PUSH
23194: LD_INT 104
23196: PUSH
23197: LD_INT 105
23199: PUSH
23200: LD_INT 106
23202: PUSH
23203: LD_INT 107
23205: PUSH
23206: LD_INT 108
23208: PUSH
23209: LD_INT 109
23211: PUSH
23212: LD_INT 110
23214: PUSH
23215: LD_INT 111
23217: PUSH
23218: LD_INT 112
23220: PUSH
23221: LD_INT 113
23223: PUSH
23224: LD_INT 114
23226: PUSH
23227: LD_INT 116
23229: PUSH
23230: LD_INT 117
23232: PUSH
23233: LD_INT 118
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: ST_TO_ADDR
23259: GO 24034
23261: LD_INT 16
23263: DOUBLE
23264: EQUAL
23265: IFTRUE 23269
23267: GO 23405
23269: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23270: LD_ADDR_VAR 0 2
23274: PUSH
23275: LD_INT 2
23277: PUSH
23278: LD_INT 4
23280: PUSH
23281: LD_INT 5
23283: PUSH
23284: LD_INT 7
23286: PUSH
23287: LD_INT 11
23289: PUSH
23290: LD_INT 12
23292: PUSH
23293: LD_INT 15
23295: PUSH
23296: LD_INT 16
23298: PUSH
23299: LD_INT 20
23301: PUSH
23302: LD_INT 21
23304: PUSH
23305: LD_INT 22
23307: PUSH
23308: LD_INT 23
23310: PUSH
23311: LD_INT 25
23313: PUSH
23314: LD_INT 26
23316: PUSH
23317: LD_INT 30
23319: PUSH
23320: LD_INT 31
23322: PUSH
23323: LD_INT 32
23325: PUSH
23326: LD_INT 33
23328: PUSH
23329: LD_INT 34
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: PUSH
23353: LD_INT 101
23355: PUSH
23356: LD_INT 102
23358: PUSH
23359: LD_INT 103
23361: PUSH
23362: LD_INT 106
23364: PUSH
23365: LD_INT 108
23367: PUSH
23368: LD_INT 112
23370: PUSH
23371: LD_INT 113
23373: PUSH
23374: LD_INT 114
23376: PUSH
23377: LD_INT 116
23379: PUSH
23380: LD_INT 117
23382: PUSH
23383: LD_INT 118
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: ST_TO_ADDR
23403: GO 24034
23405: LD_INT 17
23407: DOUBLE
23408: EQUAL
23409: IFTRUE 23413
23411: GO 23637
23413: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23414: LD_ADDR_VAR 0 2
23418: PUSH
23419: LD_INT 1
23421: PUSH
23422: LD_INT 2
23424: PUSH
23425: LD_INT 3
23427: PUSH
23428: LD_INT 4
23430: PUSH
23431: LD_INT 5
23433: PUSH
23434: LD_INT 6
23436: PUSH
23437: LD_INT 7
23439: PUSH
23440: LD_INT 8
23442: PUSH
23443: LD_INT 9
23445: PUSH
23446: LD_INT 10
23448: PUSH
23449: LD_INT 11
23451: PUSH
23452: LD_INT 12
23454: PUSH
23455: LD_INT 13
23457: PUSH
23458: LD_INT 14
23460: PUSH
23461: LD_INT 15
23463: PUSH
23464: LD_INT 16
23466: PUSH
23467: LD_INT 17
23469: PUSH
23470: LD_INT 18
23472: PUSH
23473: LD_INT 19
23475: PUSH
23476: LD_INT 20
23478: PUSH
23479: LD_INT 21
23481: PUSH
23482: LD_INT 22
23484: PUSH
23485: LD_INT 23
23487: PUSH
23488: LD_INT 24
23490: PUSH
23491: LD_INT 25
23493: PUSH
23494: LD_INT 26
23496: PUSH
23497: LD_INT 27
23499: PUSH
23500: LD_INT 28
23502: PUSH
23503: LD_INT 29
23505: PUSH
23506: LD_INT 30
23508: PUSH
23509: LD_INT 31
23511: PUSH
23512: LD_INT 32
23514: PUSH
23515: LD_INT 33
23517: PUSH
23518: LD_INT 34
23520: PUSH
23521: LD_INT 36
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: PUSH
23561: LD_INT 101
23563: PUSH
23564: LD_INT 102
23566: PUSH
23567: LD_INT 103
23569: PUSH
23570: LD_INT 104
23572: PUSH
23573: LD_INT 105
23575: PUSH
23576: LD_INT 106
23578: PUSH
23579: LD_INT 107
23581: PUSH
23582: LD_INT 108
23584: PUSH
23585: LD_INT 109
23587: PUSH
23588: LD_INT 110
23590: PUSH
23591: LD_INT 111
23593: PUSH
23594: LD_INT 112
23596: PUSH
23597: LD_INT 113
23599: PUSH
23600: LD_INT 114
23602: PUSH
23603: LD_INT 116
23605: PUSH
23606: LD_INT 117
23608: PUSH
23609: LD_INT 118
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: ST_TO_ADDR
23635: GO 24034
23637: LD_INT 18
23639: DOUBLE
23640: EQUAL
23641: IFTRUE 23645
23643: GO 23793
23645: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23646: LD_ADDR_VAR 0 2
23650: PUSH
23651: LD_INT 2
23653: PUSH
23654: LD_INT 4
23656: PUSH
23657: LD_INT 5
23659: PUSH
23660: LD_INT 7
23662: PUSH
23663: LD_INT 11
23665: PUSH
23666: LD_INT 12
23668: PUSH
23669: LD_INT 15
23671: PUSH
23672: LD_INT 16
23674: PUSH
23675: LD_INT 20
23677: PUSH
23678: LD_INT 21
23680: PUSH
23681: LD_INT 22
23683: PUSH
23684: LD_INT 23
23686: PUSH
23687: LD_INT 25
23689: PUSH
23690: LD_INT 26
23692: PUSH
23693: LD_INT 30
23695: PUSH
23696: LD_INT 31
23698: PUSH
23699: LD_INT 32
23701: PUSH
23702: LD_INT 33
23704: PUSH
23705: LD_INT 34
23707: PUSH
23708: LD_INT 35
23710: PUSH
23711: LD_INT 36
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 101
23739: PUSH
23740: LD_INT 102
23742: PUSH
23743: LD_INT 103
23745: PUSH
23746: LD_INT 106
23748: PUSH
23749: LD_INT 108
23751: PUSH
23752: LD_INT 112
23754: PUSH
23755: LD_INT 113
23757: PUSH
23758: LD_INT 114
23760: PUSH
23761: LD_INT 115
23763: PUSH
23764: LD_INT 116
23766: PUSH
23767: LD_INT 117
23769: PUSH
23770: LD_INT 118
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: ST_TO_ADDR
23791: GO 24034
23793: LD_INT 19
23795: DOUBLE
23796: EQUAL
23797: IFTRUE 23801
23799: GO 24033
23801: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23802: LD_ADDR_VAR 0 2
23806: PUSH
23807: LD_INT 1
23809: PUSH
23810: LD_INT 2
23812: PUSH
23813: LD_INT 3
23815: PUSH
23816: LD_INT 4
23818: PUSH
23819: LD_INT 5
23821: PUSH
23822: LD_INT 6
23824: PUSH
23825: LD_INT 7
23827: PUSH
23828: LD_INT 8
23830: PUSH
23831: LD_INT 9
23833: PUSH
23834: LD_INT 10
23836: PUSH
23837: LD_INT 11
23839: PUSH
23840: LD_INT 12
23842: PUSH
23843: LD_INT 13
23845: PUSH
23846: LD_INT 14
23848: PUSH
23849: LD_INT 15
23851: PUSH
23852: LD_INT 16
23854: PUSH
23855: LD_INT 17
23857: PUSH
23858: LD_INT 18
23860: PUSH
23861: LD_INT 19
23863: PUSH
23864: LD_INT 20
23866: PUSH
23867: LD_INT 21
23869: PUSH
23870: LD_INT 22
23872: PUSH
23873: LD_INT 23
23875: PUSH
23876: LD_INT 24
23878: PUSH
23879: LD_INT 25
23881: PUSH
23882: LD_INT 26
23884: PUSH
23885: LD_INT 27
23887: PUSH
23888: LD_INT 28
23890: PUSH
23891: LD_INT 29
23893: PUSH
23894: LD_INT 30
23896: PUSH
23897: LD_INT 31
23899: PUSH
23900: LD_INT 32
23902: PUSH
23903: LD_INT 33
23905: PUSH
23906: LD_INT 34
23908: PUSH
23909: LD_INT 35
23911: PUSH
23912: LD_INT 36
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 101
23955: PUSH
23956: LD_INT 102
23958: PUSH
23959: LD_INT 103
23961: PUSH
23962: LD_INT 104
23964: PUSH
23965: LD_INT 105
23967: PUSH
23968: LD_INT 106
23970: PUSH
23971: LD_INT 107
23973: PUSH
23974: LD_INT 108
23976: PUSH
23977: LD_INT 109
23979: PUSH
23980: LD_INT 110
23982: PUSH
23983: LD_INT 111
23985: PUSH
23986: LD_INT 112
23988: PUSH
23989: LD_INT 113
23991: PUSH
23992: LD_INT 114
23994: PUSH
23995: LD_INT 115
23997: PUSH
23998: LD_INT 116
24000: PUSH
24001: LD_INT 117
24003: PUSH
24004: LD_INT 118
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: ST_TO_ADDR
24031: GO 24034
24033: POP
// end else
24034: GO 24265
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24036: LD_ADDR_VAR 0 2
24040: PUSH
24041: LD_INT 1
24043: PUSH
24044: LD_INT 2
24046: PUSH
24047: LD_INT 3
24049: PUSH
24050: LD_INT 4
24052: PUSH
24053: LD_INT 5
24055: PUSH
24056: LD_INT 6
24058: PUSH
24059: LD_INT 7
24061: PUSH
24062: LD_INT 8
24064: PUSH
24065: LD_INT 9
24067: PUSH
24068: LD_INT 10
24070: PUSH
24071: LD_INT 11
24073: PUSH
24074: LD_INT 12
24076: PUSH
24077: LD_INT 13
24079: PUSH
24080: LD_INT 14
24082: PUSH
24083: LD_INT 15
24085: PUSH
24086: LD_INT 16
24088: PUSH
24089: LD_INT 17
24091: PUSH
24092: LD_INT 18
24094: PUSH
24095: LD_INT 19
24097: PUSH
24098: LD_INT 20
24100: PUSH
24101: LD_INT 21
24103: PUSH
24104: LD_INT 22
24106: PUSH
24107: LD_INT 23
24109: PUSH
24110: LD_INT 24
24112: PUSH
24113: LD_INT 25
24115: PUSH
24116: LD_INT 26
24118: PUSH
24119: LD_INT 27
24121: PUSH
24122: LD_INT 28
24124: PUSH
24125: LD_INT 29
24127: PUSH
24128: LD_INT 30
24130: PUSH
24131: LD_INT 31
24133: PUSH
24134: LD_INT 32
24136: PUSH
24137: LD_INT 33
24139: PUSH
24140: LD_INT 34
24142: PUSH
24143: LD_INT 35
24145: PUSH
24146: LD_INT 36
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: PUSH
24187: LD_INT 101
24189: PUSH
24190: LD_INT 102
24192: PUSH
24193: LD_INT 103
24195: PUSH
24196: LD_INT 104
24198: PUSH
24199: LD_INT 105
24201: PUSH
24202: LD_INT 106
24204: PUSH
24205: LD_INT 107
24207: PUSH
24208: LD_INT 108
24210: PUSH
24211: LD_INT 109
24213: PUSH
24214: LD_INT 110
24216: PUSH
24217: LD_INT 111
24219: PUSH
24220: LD_INT 112
24222: PUSH
24223: LD_INT 113
24225: PUSH
24226: LD_INT 114
24228: PUSH
24229: LD_INT 115
24231: PUSH
24232: LD_INT 116
24234: PUSH
24235: LD_INT 117
24237: PUSH
24238: LD_INT 118
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: ST_TO_ADDR
// if result then
24265: LD_VAR 0 2
24269: IFFALSE 25055
// begin normal :=  ;
24271: LD_ADDR_VAR 0 5
24275: PUSH
24276: LD_STRING 
24278: ST_TO_ADDR
// hardcore :=  ;
24279: LD_ADDR_VAR 0 6
24283: PUSH
24284: LD_STRING 
24286: ST_TO_ADDR
// active :=  ;
24287: LD_ADDR_VAR 0 7
24291: PUSH
24292: LD_STRING 
24294: ST_TO_ADDR
// for i = 1 to normalCounter do
24295: LD_ADDR_VAR 0 8
24299: PUSH
24300: DOUBLE
24301: LD_INT 1
24303: DEC
24304: ST_TO_ADDR
24305: LD_EXP 75
24309: PUSH
24310: FOR_TO
24311: IFFALSE 24412
// begin tmp := 0 ;
24313: LD_ADDR_VAR 0 3
24317: PUSH
24318: LD_STRING 0
24320: ST_TO_ADDR
// if result [ 1 ] then
24321: LD_VAR 0 2
24325: PUSH
24326: LD_INT 1
24328: ARRAY
24329: IFFALSE 24394
// if result [ 1 ] [ 1 ] = i then
24331: LD_VAR 0 2
24335: PUSH
24336: LD_INT 1
24338: ARRAY
24339: PUSH
24340: LD_INT 1
24342: ARRAY
24343: PUSH
24344: LD_VAR 0 8
24348: EQUAL
24349: IFFALSE 24394
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24351: LD_ADDR_VAR 0 2
24355: PUSH
24356: LD_VAR 0 2
24360: PPUSH
24361: LD_INT 1
24363: PPUSH
24364: LD_VAR 0 2
24368: PUSH
24369: LD_INT 1
24371: ARRAY
24372: PPUSH
24373: LD_INT 1
24375: PPUSH
24376: CALL_OW 3
24380: PPUSH
24381: CALL_OW 1
24385: ST_TO_ADDR
// tmp := 1 ;
24386: LD_ADDR_VAR 0 3
24390: PUSH
24391: LD_STRING 1
24393: ST_TO_ADDR
// end ; normal := normal & tmp ;
24394: LD_ADDR_VAR 0 5
24398: PUSH
24399: LD_VAR 0 5
24403: PUSH
24404: LD_VAR 0 3
24408: STR
24409: ST_TO_ADDR
// end ;
24410: GO 24310
24412: POP
24413: POP
// for i = 1 to hardcoreCounter do
24414: LD_ADDR_VAR 0 8
24418: PUSH
24419: DOUBLE
24420: LD_INT 1
24422: DEC
24423: ST_TO_ADDR
24424: LD_EXP 76
24428: PUSH
24429: FOR_TO
24430: IFFALSE 24535
// begin tmp := 0 ;
24432: LD_ADDR_VAR 0 3
24436: PUSH
24437: LD_STRING 0
24439: ST_TO_ADDR
// if result [ 2 ] then
24440: LD_VAR 0 2
24444: PUSH
24445: LD_INT 2
24447: ARRAY
24448: IFFALSE 24517
// if result [ 2 ] [ 1 ] = 100 + i then
24450: LD_VAR 0 2
24454: PUSH
24455: LD_INT 2
24457: ARRAY
24458: PUSH
24459: LD_INT 1
24461: ARRAY
24462: PUSH
24463: LD_INT 100
24465: PUSH
24466: LD_VAR 0 8
24470: PLUS
24471: EQUAL
24472: IFFALSE 24517
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24474: LD_ADDR_VAR 0 2
24478: PUSH
24479: LD_VAR 0 2
24483: PPUSH
24484: LD_INT 2
24486: PPUSH
24487: LD_VAR 0 2
24491: PUSH
24492: LD_INT 2
24494: ARRAY
24495: PPUSH
24496: LD_INT 1
24498: PPUSH
24499: CALL_OW 3
24503: PPUSH
24504: CALL_OW 1
24508: ST_TO_ADDR
// tmp := 1 ;
24509: LD_ADDR_VAR 0 3
24513: PUSH
24514: LD_STRING 1
24516: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24517: LD_ADDR_VAR 0 6
24521: PUSH
24522: LD_VAR 0 6
24526: PUSH
24527: LD_VAR 0 3
24531: STR
24532: ST_TO_ADDR
// end ;
24533: GO 24429
24535: POP
24536: POP
// if isGameLoad then
24537: LD_VAR 0 1
24541: IFFALSE 25016
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24543: LD_ADDR_VAR 0 4
24547: PUSH
24548: LD_EXP 79
24552: PUSH
24553: LD_EXP 78
24557: PUSH
24558: LD_EXP 80
24562: PUSH
24563: LD_EXP 77
24567: PUSH
24568: LD_EXP 81
24572: PUSH
24573: LD_EXP 82
24577: PUSH
24578: LD_EXP 83
24582: PUSH
24583: LD_EXP 84
24587: PUSH
24588: LD_EXP 85
24592: PUSH
24593: LD_EXP 86
24597: PUSH
24598: LD_EXP 87
24602: PUSH
24603: LD_EXP 88
24607: PUSH
24608: LD_EXP 89
24612: PUSH
24613: LD_EXP 90
24617: PUSH
24618: LD_EXP 98
24622: PUSH
24623: LD_EXP 99
24627: PUSH
24628: LD_EXP 100
24632: PUSH
24633: LD_EXP 101
24637: PUSH
24638: LD_EXP 103
24642: PUSH
24643: LD_EXP 104
24647: PUSH
24648: LD_EXP 105
24652: PUSH
24653: LD_EXP 108
24657: PUSH
24658: LD_EXP 110
24662: PUSH
24663: LD_EXP 111
24667: PUSH
24668: LD_EXP 112
24672: PUSH
24673: LD_EXP 114
24677: PUSH
24678: LD_EXP 115
24682: PUSH
24683: LD_EXP 118
24687: PUSH
24688: LD_EXP 119
24692: PUSH
24693: LD_EXP 120
24697: PUSH
24698: LD_EXP 121
24702: PUSH
24703: LD_EXP 122
24707: PUSH
24708: LD_EXP 123
24712: PUSH
24713: LD_EXP 124
24717: PUSH
24718: LD_EXP 125
24722: PUSH
24723: LD_EXP 126
24727: PUSH
24728: LD_EXP 91
24732: PUSH
24733: LD_EXP 92
24737: PUSH
24738: LD_EXP 95
24742: PUSH
24743: LD_EXP 96
24747: PUSH
24748: LD_EXP 97
24752: PUSH
24753: LD_EXP 93
24757: PUSH
24758: LD_EXP 94
24762: PUSH
24763: LD_EXP 102
24767: PUSH
24768: LD_EXP 106
24772: PUSH
24773: LD_EXP 107
24777: PUSH
24778: LD_EXP 109
24782: PUSH
24783: LD_EXP 113
24787: PUSH
24788: LD_EXP 116
24792: PUSH
24793: LD_EXP 117
24797: PUSH
24798: LD_EXP 127
24802: PUSH
24803: LD_EXP 128
24807: PUSH
24808: LD_EXP 129
24812: PUSH
24813: LD_EXP 130
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: ST_TO_ADDR
// tmp :=  ;
24874: LD_ADDR_VAR 0 3
24878: PUSH
24879: LD_STRING 
24881: ST_TO_ADDR
// for i = 1 to normalCounter do
24882: LD_ADDR_VAR 0 8
24886: PUSH
24887: DOUBLE
24888: LD_INT 1
24890: DEC
24891: ST_TO_ADDR
24892: LD_EXP 75
24896: PUSH
24897: FOR_TO
24898: IFFALSE 24934
// begin if flags [ i ] then
24900: LD_VAR 0 4
24904: PUSH
24905: LD_VAR 0 8
24909: ARRAY
24910: IFFALSE 24932
// tmp := tmp & i & ; ;
24912: LD_ADDR_VAR 0 3
24916: PUSH
24917: LD_VAR 0 3
24921: PUSH
24922: LD_VAR 0 8
24926: STR
24927: PUSH
24928: LD_STRING ;
24930: STR
24931: ST_TO_ADDR
// end ;
24932: GO 24897
24934: POP
24935: POP
// for i = 1 to hardcoreCounter do
24936: LD_ADDR_VAR 0 8
24940: PUSH
24941: DOUBLE
24942: LD_INT 1
24944: DEC
24945: ST_TO_ADDR
24946: LD_EXP 76
24950: PUSH
24951: FOR_TO
24952: IFFALSE 24998
// begin if flags [ normalCounter + i ] then
24954: LD_VAR 0 4
24958: PUSH
24959: LD_EXP 75
24963: PUSH
24964: LD_VAR 0 8
24968: PLUS
24969: ARRAY
24970: IFFALSE 24996
// tmp := tmp & ( 100 + i ) & ; ;
24972: LD_ADDR_VAR 0 3
24976: PUSH
24977: LD_VAR 0 3
24981: PUSH
24982: LD_INT 100
24984: PUSH
24985: LD_VAR 0 8
24989: PLUS
24990: STR
24991: PUSH
24992: LD_STRING ;
24994: STR
24995: ST_TO_ADDR
// end ;
24996: GO 24951
24998: POP
24999: POP
// if tmp then
25000: LD_VAR 0 3
25004: IFFALSE 25016
// active := tmp ;
25006: LD_ADDR_VAR 0 7
25010: PUSH
25011: LD_VAR 0 3
25015: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25016: LD_STRING getStreamItemsFromMission("
25018: PUSH
25019: LD_VAR 0 5
25023: STR
25024: PUSH
25025: LD_STRING ","
25027: STR
25028: PUSH
25029: LD_VAR 0 6
25033: STR
25034: PUSH
25035: LD_STRING ","
25037: STR
25038: PUSH
25039: LD_VAR 0 7
25043: STR
25044: PUSH
25045: LD_STRING ")
25047: STR
25048: PPUSH
25049: CALL_OW 559
// end else
25053: GO 25062
// ToLua ( getStreamItemsFromMission("","","") ) ;
25055: LD_STRING getStreamItemsFromMission("","","")
25057: PPUSH
25058: CALL_OW 559
// end ;
25062: LD_VAR 0 2
25066: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25067: LD_EXP 74
25071: PUSH
25072: LD_EXP 79
25076: AND
25077: IFFALSE 25201
25079: GO 25081
25081: DISABLE
25082: LD_INT 0
25084: PPUSH
25085: PPUSH
// begin enable ;
25086: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25087: LD_ADDR_VAR 0 2
25091: PUSH
25092: LD_INT 22
25094: PUSH
25095: LD_OWVAR 2
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 2
25106: PUSH
25107: LD_INT 34
25109: PUSH
25110: LD_INT 7
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 34
25119: PUSH
25120: LD_INT 45
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 34
25129: PUSH
25130: LD_INT 28
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: LD_INT 34
25139: PUSH
25140: LD_INT 47
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PPUSH
25158: CALL_OW 69
25162: ST_TO_ADDR
// if not tmp then
25163: LD_VAR 0 2
25167: NOT
25168: IFFALSE 25172
// exit ;
25170: GO 25201
// for i in tmp do
25172: LD_ADDR_VAR 0 1
25176: PUSH
25177: LD_VAR 0 2
25181: PUSH
25182: FOR_IN
25183: IFFALSE 25199
// begin SetLives ( i , 0 ) ;
25185: LD_VAR 0 1
25189: PPUSH
25190: LD_INT 0
25192: PPUSH
25193: CALL_OW 234
// end ;
25197: GO 25182
25199: POP
25200: POP
// end ;
25201: PPOPN 2
25203: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25204: LD_EXP 74
25208: PUSH
25209: LD_EXP 80
25213: AND
25214: IFFALSE 25298
25216: GO 25218
25218: DISABLE
25219: LD_INT 0
25221: PPUSH
25222: PPUSH
// begin enable ;
25223: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25224: LD_ADDR_VAR 0 2
25228: PUSH
25229: LD_INT 22
25231: PUSH
25232: LD_OWVAR 2
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PUSH
25241: LD_INT 32
25243: PUSH
25244: LD_INT 3
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PPUSH
25255: CALL_OW 69
25259: ST_TO_ADDR
// if not tmp then
25260: LD_VAR 0 2
25264: NOT
25265: IFFALSE 25269
// exit ;
25267: GO 25298
// for i in tmp do
25269: LD_ADDR_VAR 0 1
25273: PUSH
25274: LD_VAR 0 2
25278: PUSH
25279: FOR_IN
25280: IFFALSE 25296
// begin SetLives ( i , 0 ) ;
25282: LD_VAR 0 1
25286: PPUSH
25287: LD_INT 0
25289: PPUSH
25290: CALL_OW 234
// end ;
25294: GO 25279
25296: POP
25297: POP
// end ;
25298: PPOPN 2
25300: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25301: LD_EXP 74
25305: PUSH
25306: LD_EXP 77
25310: AND
25311: IFFALSE 25404
25313: GO 25315
25315: DISABLE
25316: LD_INT 0
25318: PPUSH
// begin enable ;
25319: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25320: LD_ADDR_VAR 0 1
25324: PUSH
25325: LD_INT 22
25327: PUSH
25328: LD_OWVAR 2
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 2
25339: PUSH
25340: LD_INT 25
25342: PUSH
25343: LD_INT 5
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 25
25352: PUSH
25353: LD_INT 9
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 25
25362: PUSH
25363: LD_INT 8
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PPUSH
25380: CALL_OW 69
25384: PUSH
25385: FOR_IN
25386: IFFALSE 25402
// begin SetClass ( i , 1 ) ;
25388: LD_VAR 0 1
25392: PPUSH
25393: LD_INT 1
25395: PPUSH
25396: CALL_OW 336
// end ;
25400: GO 25385
25402: POP
25403: POP
// end ;
25404: PPOPN 1
25406: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25407: LD_EXP 74
25411: PUSH
25412: LD_EXP 78
25416: AND
25417: PUSH
25418: LD_OWVAR 65
25422: PUSH
25423: LD_INT 7
25425: LESS
25426: AND
25427: IFFALSE 25441
25429: GO 25431
25431: DISABLE
// begin enable ;
25432: ENABLE
// game_speed := 7 ;
25433: LD_ADDR_OWVAR 65
25437: PUSH
25438: LD_INT 7
25440: ST_TO_ADDR
// end ;
25441: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25442: LD_EXP 74
25446: PUSH
25447: LD_EXP 81
25451: AND
25452: IFFALSE 25654
25454: GO 25456
25456: DISABLE
25457: LD_INT 0
25459: PPUSH
25460: PPUSH
25461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25462: LD_ADDR_VAR 0 3
25466: PUSH
25467: LD_INT 81
25469: PUSH
25470: LD_OWVAR 2
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 21
25481: PUSH
25482: LD_INT 1
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PPUSH
25493: CALL_OW 69
25497: ST_TO_ADDR
// if not tmp then
25498: LD_VAR 0 3
25502: NOT
25503: IFFALSE 25507
// exit ;
25505: GO 25654
// if tmp > 5 then
25507: LD_VAR 0 3
25511: PUSH
25512: LD_INT 5
25514: GREATER
25515: IFFALSE 25527
// k := 5 else
25517: LD_ADDR_VAR 0 2
25521: PUSH
25522: LD_INT 5
25524: ST_TO_ADDR
25525: GO 25537
// k := tmp ;
25527: LD_ADDR_VAR 0 2
25531: PUSH
25532: LD_VAR 0 3
25536: ST_TO_ADDR
// for i := 1 to k do
25537: LD_ADDR_VAR 0 1
25541: PUSH
25542: DOUBLE
25543: LD_INT 1
25545: DEC
25546: ST_TO_ADDR
25547: LD_VAR 0 2
25551: PUSH
25552: FOR_TO
25553: IFFALSE 25652
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25555: LD_VAR 0 3
25559: PUSH
25560: LD_VAR 0 1
25564: ARRAY
25565: PPUSH
25566: LD_VAR 0 1
25570: PUSH
25571: LD_INT 4
25573: MOD
25574: PUSH
25575: LD_INT 1
25577: PLUS
25578: PPUSH
25579: CALL_OW 259
25583: PUSH
25584: LD_INT 10
25586: LESS
25587: IFFALSE 25650
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25589: LD_VAR 0 3
25593: PUSH
25594: LD_VAR 0 1
25598: ARRAY
25599: PPUSH
25600: LD_VAR 0 1
25604: PUSH
25605: LD_INT 4
25607: MOD
25608: PUSH
25609: LD_INT 1
25611: PLUS
25612: PPUSH
25613: LD_VAR 0 3
25617: PUSH
25618: LD_VAR 0 1
25622: ARRAY
25623: PPUSH
25624: LD_VAR 0 1
25628: PUSH
25629: LD_INT 4
25631: MOD
25632: PUSH
25633: LD_INT 1
25635: PLUS
25636: PPUSH
25637: CALL_OW 259
25641: PUSH
25642: LD_INT 1
25644: PLUS
25645: PPUSH
25646: CALL_OW 237
25650: GO 25552
25652: POP
25653: POP
// end ;
25654: PPOPN 3
25656: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25657: LD_EXP 74
25661: PUSH
25662: LD_EXP 82
25666: AND
25667: IFFALSE 25687
25669: GO 25671
25671: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25672: LD_INT 4
25674: PPUSH
25675: LD_OWVAR 2
25679: PPUSH
25680: LD_INT 0
25682: PPUSH
25683: CALL_OW 324
25687: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25688: LD_EXP 74
25692: PUSH
25693: LD_EXP 111
25697: AND
25698: IFFALSE 25718
25700: GO 25702
25702: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25703: LD_INT 19
25705: PPUSH
25706: LD_OWVAR 2
25710: PPUSH
25711: LD_INT 0
25713: PPUSH
25714: CALL_OW 324
25718: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25719: LD_EXP 74
25723: PUSH
25724: LD_EXP 83
25728: AND
25729: IFFALSE 25831
25731: GO 25733
25733: DISABLE
25734: LD_INT 0
25736: PPUSH
25737: PPUSH
// begin enable ;
25738: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25739: LD_ADDR_VAR 0 2
25743: PUSH
25744: LD_INT 22
25746: PUSH
25747: LD_OWVAR 2
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PUSH
25756: LD_INT 2
25758: PUSH
25759: LD_INT 34
25761: PUSH
25762: LD_INT 11
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 34
25771: PUSH
25772: LD_INT 30
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: LIST
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PPUSH
25788: CALL_OW 69
25792: ST_TO_ADDR
// if not tmp then
25793: LD_VAR 0 2
25797: NOT
25798: IFFALSE 25802
// exit ;
25800: GO 25831
// for i in tmp do
25802: LD_ADDR_VAR 0 1
25806: PUSH
25807: LD_VAR 0 2
25811: PUSH
25812: FOR_IN
25813: IFFALSE 25829
// begin SetLives ( i , 0 ) ;
25815: LD_VAR 0 1
25819: PPUSH
25820: LD_INT 0
25822: PPUSH
25823: CALL_OW 234
// end ;
25827: GO 25812
25829: POP
25830: POP
// end ;
25831: PPOPN 2
25833: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25834: LD_EXP 74
25838: PUSH
25839: LD_EXP 84
25843: AND
25844: IFFALSE 25864
25846: GO 25848
25848: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25849: LD_INT 32
25851: PPUSH
25852: LD_OWVAR 2
25856: PPUSH
25857: LD_INT 0
25859: PPUSH
25860: CALL_OW 324
25864: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25865: LD_EXP 74
25869: PUSH
25870: LD_EXP 85
25874: AND
25875: IFFALSE 26056
25877: GO 25879
25879: DISABLE
25880: LD_INT 0
25882: PPUSH
25883: PPUSH
25884: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25885: LD_ADDR_VAR 0 2
25889: PUSH
25890: LD_INT 22
25892: PUSH
25893: LD_OWVAR 2
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 33
25904: PUSH
25905: LD_INT 3
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PPUSH
25916: CALL_OW 69
25920: ST_TO_ADDR
// if not tmp then
25921: LD_VAR 0 2
25925: NOT
25926: IFFALSE 25930
// exit ;
25928: GO 26056
// side := 0 ;
25930: LD_ADDR_VAR 0 3
25934: PUSH
25935: LD_INT 0
25937: ST_TO_ADDR
// for i := 1 to 8 do
25938: LD_ADDR_VAR 0 1
25942: PUSH
25943: DOUBLE
25944: LD_INT 1
25946: DEC
25947: ST_TO_ADDR
25948: LD_INT 8
25950: PUSH
25951: FOR_TO
25952: IFFALSE 26000
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25954: LD_OWVAR 2
25958: PUSH
25959: LD_VAR 0 1
25963: NONEQUAL
25964: PUSH
25965: LD_OWVAR 2
25969: PPUSH
25970: LD_VAR 0 1
25974: PPUSH
25975: CALL_OW 81
25979: PUSH
25980: LD_INT 2
25982: EQUAL
25983: AND
25984: IFFALSE 25998
// begin side := i ;
25986: LD_ADDR_VAR 0 3
25990: PUSH
25991: LD_VAR 0 1
25995: ST_TO_ADDR
// break ;
25996: GO 26000
// end ;
25998: GO 25951
26000: POP
26001: POP
// if not side then
26002: LD_VAR 0 3
26006: NOT
26007: IFFALSE 26011
// exit ;
26009: GO 26056
// for i := 1 to tmp do
26011: LD_ADDR_VAR 0 1
26015: PUSH
26016: DOUBLE
26017: LD_INT 1
26019: DEC
26020: ST_TO_ADDR
26021: LD_VAR 0 2
26025: PUSH
26026: FOR_TO
26027: IFFALSE 26054
// if Prob ( 60 ) then
26029: LD_INT 60
26031: PPUSH
26032: CALL_OW 13
26036: IFFALSE 26052
// SetSide ( i , side ) ;
26038: LD_VAR 0 1
26042: PPUSH
26043: LD_VAR 0 3
26047: PPUSH
26048: CALL_OW 235
26052: GO 26026
26054: POP
26055: POP
// end ;
26056: PPOPN 3
26058: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26059: LD_EXP 74
26063: PUSH
26064: LD_EXP 87
26068: AND
26069: IFFALSE 26188
26071: GO 26073
26073: DISABLE
26074: LD_INT 0
26076: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26077: LD_ADDR_VAR 0 1
26081: PUSH
26082: LD_INT 22
26084: PUSH
26085: LD_OWVAR 2
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: LD_INT 21
26096: PUSH
26097: LD_INT 1
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 3
26106: PUSH
26107: LD_INT 23
26109: PUSH
26110: LD_INT 0
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: LIST
26125: PPUSH
26126: CALL_OW 69
26130: PUSH
26131: FOR_IN
26132: IFFALSE 26186
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26134: LD_VAR 0 1
26138: PPUSH
26139: CALL_OW 257
26143: PUSH
26144: LD_INT 1
26146: PUSH
26147: LD_INT 2
26149: PUSH
26150: LD_INT 3
26152: PUSH
26153: LD_INT 4
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: IN
26162: IFFALSE 26184
// SetClass ( un , rand ( 1 , 4 ) ) ;
26164: LD_VAR 0 1
26168: PPUSH
26169: LD_INT 1
26171: PPUSH
26172: LD_INT 4
26174: PPUSH
26175: CALL_OW 12
26179: PPUSH
26180: CALL_OW 336
26184: GO 26131
26186: POP
26187: POP
// end ;
26188: PPOPN 1
26190: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26191: LD_EXP 74
26195: PUSH
26196: LD_EXP 86
26200: AND
26201: IFFALSE 26280
26203: GO 26205
26205: DISABLE
26206: LD_INT 0
26208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26209: LD_ADDR_VAR 0 1
26213: PUSH
26214: LD_INT 22
26216: PUSH
26217: LD_OWVAR 2
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 21
26228: PUSH
26229: LD_INT 3
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PPUSH
26240: CALL_OW 69
26244: ST_TO_ADDR
// if not tmp then
26245: LD_VAR 0 1
26249: NOT
26250: IFFALSE 26254
// exit ;
26252: GO 26280
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26254: LD_VAR 0 1
26258: PUSH
26259: LD_INT 1
26261: PPUSH
26262: LD_VAR 0 1
26266: PPUSH
26267: CALL_OW 12
26271: ARRAY
26272: PPUSH
26273: LD_INT 100
26275: PPUSH
26276: CALL_OW 234
// end ;
26280: PPOPN 1
26282: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26283: LD_EXP 74
26287: PUSH
26288: LD_EXP 88
26292: AND
26293: IFFALSE 26391
26295: GO 26297
26297: DISABLE
26298: LD_INT 0
26300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26301: LD_ADDR_VAR 0 1
26305: PUSH
26306: LD_INT 22
26308: PUSH
26309: LD_OWVAR 2
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 21
26320: PUSH
26321: LD_INT 1
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PPUSH
26332: CALL_OW 69
26336: ST_TO_ADDR
// if not tmp then
26337: LD_VAR 0 1
26341: NOT
26342: IFFALSE 26346
// exit ;
26344: GO 26391
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26346: LD_VAR 0 1
26350: PUSH
26351: LD_INT 1
26353: PPUSH
26354: LD_VAR 0 1
26358: PPUSH
26359: CALL_OW 12
26363: ARRAY
26364: PPUSH
26365: LD_INT 1
26367: PPUSH
26368: LD_INT 4
26370: PPUSH
26371: CALL_OW 12
26375: PPUSH
26376: LD_INT 3000
26378: PPUSH
26379: LD_INT 9000
26381: PPUSH
26382: CALL_OW 12
26386: PPUSH
26387: CALL_OW 492
// end ;
26391: PPOPN 1
26393: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26394: LD_EXP 74
26398: PUSH
26399: LD_EXP 89
26403: AND
26404: IFFALSE 26424
26406: GO 26408
26408: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26409: LD_INT 1
26411: PPUSH
26412: LD_OWVAR 2
26416: PPUSH
26417: LD_INT 0
26419: PPUSH
26420: CALL_OW 324
26424: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26425: LD_EXP 74
26429: PUSH
26430: LD_EXP 90
26434: AND
26435: IFFALSE 26518
26437: GO 26439
26439: DISABLE
26440: LD_INT 0
26442: PPUSH
26443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26444: LD_ADDR_VAR 0 2
26448: PUSH
26449: LD_INT 22
26451: PUSH
26452: LD_OWVAR 2
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 21
26463: PUSH
26464: LD_INT 3
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PPUSH
26475: CALL_OW 69
26479: ST_TO_ADDR
// if not tmp then
26480: LD_VAR 0 2
26484: NOT
26485: IFFALSE 26489
// exit ;
26487: GO 26518
// for i in tmp do
26489: LD_ADDR_VAR 0 1
26493: PUSH
26494: LD_VAR 0 2
26498: PUSH
26499: FOR_IN
26500: IFFALSE 26516
// SetBLevel ( i , 10 ) ;
26502: LD_VAR 0 1
26506: PPUSH
26507: LD_INT 10
26509: PPUSH
26510: CALL_OW 241
26514: GO 26499
26516: POP
26517: POP
// end ;
26518: PPOPN 2
26520: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26521: LD_EXP 74
26525: PUSH
26526: LD_EXP 91
26530: AND
26531: IFFALSE 26642
26533: GO 26535
26535: DISABLE
26536: LD_INT 0
26538: PPUSH
26539: PPUSH
26540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26541: LD_ADDR_VAR 0 3
26545: PUSH
26546: LD_INT 22
26548: PUSH
26549: LD_OWVAR 2
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: LD_INT 25
26560: PUSH
26561: LD_INT 1
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PPUSH
26572: CALL_OW 69
26576: ST_TO_ADDR
// if not tmp then
26577: LD_VAR 0 3
26581: NOT
26582: IFFALSE 26586
// exit ;
26584: GO 26642
// un := tmp [ rand ( 1 , tmp ) ] ;
26586: LD_ADDR_VAR 0 2
26590: PUSH
26591: LD_VAR 0 3
26595: PUSH
26596: LD_INT 1
26598: PPUSH
26599: LD_VAR 0 3
26603: PPUSH
26604: CALL_OW 12
26608: ARRAY
26609: ST_TO_ADDR
// if Crawls ( un ) then
26610: LD_VAR 0 2
26614: PPUSH
26615: CALL_OW 318
26619: IFFALSE 26630
// ComWalk ( un ) ;
26621: LD_VAR 0 2
26625: PPUSH
26626: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26630: LD_VAR 0 2
26634: PPUSH
26635: LD_INT 5
26637: PPUSH
26638: CALL_OW 336
// end ;
26642: PPOPN 3
26644: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26645: LD_EXP 74
26649: PUSH
26650: LD_EXP 92
26654: AND
26655: PUSH
26656: LD_OWVAR 67
26660: PUSH
26661: LD_INT 4
26663: LESS
26664: AND
26665: IFFALSE 26684
26667: GO 26669
26669: DISABLE
// begin Difficulty := Difficulty + 1 ;
26670: LD_ADDR_OWVAR 67
26674: PUSH
26675: LD_OWVAR 67
26679: PUSH
26680: LD_INT 1
26682: PLUS
26683: ST_TO_ADDR
// end ;
26684: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26685: LD_EXP 74
26689: PUSH
26690: LD_EXP 93
26694: AND
26695: IFFALSE 26798
26697: GO 26699
26699: DISABLE
26700: LD_INT 0
26702: PPUSH
// begin for i := 1 to 5 do
26703: LD_ADDR_VAR 0 1
26707: PUSH
26708: DOUBLE
26709: LD_INT 1
26711: DEC
26712: ST_TO_ADDR
26713: LD_INT 5
26715: PUSH
26716: FOR_TO
26717: IFFALSE 26796
// begin uc_nation := nation_nature ;
26719: LD_ADDR_OWVAR 21
26723: PUSH
26724: LD_INT 0
26726: ST_TO_ADDR
// uc_side := 0 ;
26727: LD_ADDR_OWVAR 20
26731: PUSH
26732: LD_INT 0
26734: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26735: LD_ADDR_OWVAR 29
26739: PUSH
26740: LD_INT 12
26742: PUSH
26743: LD_INT 12
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: ST_TO_ADDR
// hc_agressivity := 20 ;
26750: LD_ADDR_OWVAR 35
26754: PUSH
26755: LD_INT 20
26757: ST_TO_ADDR
// hc_class := class_tiger ;
26758: LD_ADDR_OWVAR 28
26762: PUSH
26763: LD_INT 14
26765: ST_TO_ADDR
// hc_gallery :=  ;
26766: LD_ADDR_OWVAR 33
26770: PUSH
26771: LD_STRING 
26773: ST_TO_ADDR
// hc_name :=  ;
26774: LD_ADDR_OWVAR 26
26778: PUSH
26779: LD_STRING 
26781: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26782: CALL_OW 44
26786: PPUSH
26787: LD_INT 0
26789: PPUSH
26790: CALL_OW 51
// end ;
26794: GO 26716
26796: POP
26797: POP
// end ;
26798: PPOPN 1
26800: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26801: LD_EXP 74
26805: PUSH
26806: LD_EXP 94
26810: AND
26811: IFFALSE 26820
26813: GO 26815
26815: DISABLE
// StreamSibBomb ;
26816: CALL 26821 0 0
26820: END
// export function StreamSibBomb ; var i , x , y ; begin
26821: LD_INT 0
26823: PPUSH
26824: PPUSH
26825: PPUSH
26826: PPUSH
// result := false ;
26827: LD_ADDR_VAR 0 1
26831: PUSH
26832: LD_INT 0
26834: ST_TO_ADDR
// for i := 1 to 16 do
26835: LD_ADDR_VAR 0 2
26839: PUSH
26840: DOUBLE
26841: LD_INT 1
26843: DEC
26844: ST_TO_ADDR
26845: LD_INT 16
26847: PUSH
26848: FOR_TO
26849: IFFALSE 27048
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26851: LD_ADDR_VAR 0 3
26855: PUSH
26856: LD_INT 10
26858: PUSH
26859: LD_INT 20
26861: PUSH
26862: LD_INT 30
26864: PUSH
26865: LD_INT 40
26867: PUSH
26868: LD_INT 50
26870: PUSH
26871: LD_INT 60
26873: PUSH
26874: LD_INT 70
26876: PUSH
26877: LD_INT 80
26879: PUSH
26880: LD_INT 90
26882: PUSH
26883: LD_INT 100
26885: PUSH
26886: LD_INT 110
26888: PUSH
26889: LD_INT 120
26891: PUSH
26892: LD_INT 130
26894: PUSH
26895: LD_INT 140
26897: PUSH
26898: LD_INT 150
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 1
26920: PPUSH
26921: LD_INT 15
26923: PPUSH
26924: CALL_OW 12
26928: ARRAY
26929: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26930: LD_ADDR_VAR 0 4
26934: PUSH
26935: LD_INT 10
26937: PUSH
26938: LD_INT 20
26940: PUSH
26941: LD_INT 30
26943: PUSH
26944: LD_INT 40
26946: PUSH
26947: LD_INT 50
26949: PUSH
26950: LD_INT 60
26952: PUSH
26953: LD_INT 70
26955: PUSH
26956: LD_INT 80
26958: PUSH
26959: LD_INT 90
26961: PUSH
26962: LD_INT 100
26964: PUSH
26965: LD_INT 110
26967: PUSH
26968: LD_INT 120
26970: PUSH
26971: LD_INT 130
26973: PUSH
26974: LD_INT 140
26976: PUSH
26977: LD_INT 150
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 1
26999: PPUSH
27000: LD_INT 15
27002: PPUSH
27003: CALL_OW 12
27007: ARRAY
27008: ST_TO_ADDR
// if ValidHex ( x , y ) then
27009: LD_VAR 0 3
27013: PPUSH
27014: LD_VAR 0 4
27018: PPUSH
27019: CALL_OW 488
27023: IFFALSE 27046
// begin result := [ x , y ] ;
27025: LD_ADDR_VAR 0 1
27029: PUSH
27030: LD_VAR 0 3
27034: PUSH
27035: LD_VAR 0 4
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: ST_TO_ADDR
// break ;
27044: GO 27048
// end ; end ;
27046: GO 26848
27048: POP
27049: POP
// if result then
27050: LD_VAR 0 1
27054: IFFALSE 27114
// begin ToLua ( playSibBomb() ) ;
27056: LD_STRING playSibBomb()
27058: PPUSH
27059: CALL_OW 559
// wait ( 0 0$14 ) ;
27063: LD_INT 490
27065: PPUSH
27066: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27070: LD_VAR 0 1
27074: PUSH
27075: LD_INT 1
27077: ARRAY
27078: PPUSH
27079: LD_VAR 0 1
27083: PUSH
27084: LD_INT 2
27086: ARRAY
27087: PPUSH
27088: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27092: LD_VAR 0 1
27096: PUSH
27097: LD_INT 1
27099: ARRAY
27100: PPUSH
27101: LD_VAR 0 1
27105: PUSH
27106: LD_INT 2
27108: ARRAY
27109: PPUSH
27110: CALL_OW 429
// end ; end ;
27114: LD_VAR 0 1
27118: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27119: LD_EXP 74
27123: PUSH
27124: LD_EXP 96
27128: AND
27129: IFFALSE 27141
27131: GO 27133
27133: DISABLE
// YouLost (  ) ;
27134: LD_STRING 
27136: PPUSH
27137: CALL_OW 104
27141: END
// every 0 0$1 trigger StreamModeActive and sFog do
27142: LD_EXP 74
27146: PUSH
27147: LD_EXP 95
27151: AND
27152: IFFALSE 27166
27154: GO 27156
27156: DISABLE
// FogOff ( your_side ) ;
27157: LD_OWVAR 2
27161: PPUSH
27162: CALL_OW 344
27166: END
// every 0 0$1 trigger StreamModeActive and sSun do
27167: LD_EXP 74
27171: PUSH
27172: LD_EXP 97
27176: AND
27177: IFFALSE 27205
27179: GO 27181
27181: DISABLE
// begin solar_recharge_percent := 0 ;
27182: LD_ADDR_OWVAR 79
27186: PUSH
27187: LD_INT 0
27189: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27190: LD_INT 10500
27192: PPUSH
27193: CALL_OW 67
// solar_recharge_percent := 100 ;
27197: LD_ADDR_OWVAR 79
27201: PUSH
27202: LD_INT 100
27204: ST_TO_ADDR
// end ;
27205: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27206: LD_EXP 74
27210: PUSH
27211: LD_EXP 98
27215: AND
27216: IFFALSE 27455
27218: GO 27220
27220: DISABLE
27221: LD_INT 0
27223: PPUSH
27224: PPUSH
27225: PPUSH
// begin tmp := [ ] ;
27226: LD_ADDR_VAR 0 3
27230: PUSH
27231: EMPTY
27232: ST_TO_ADDR
// for i := 1 to 6 do
27233: LD_ADDR_VAR 0 1
27237: PUSH
27238: DOUBLE
27239: LD_INT 1
27241: DEC
27242: ST_TO_ADDR
27243: LD_INT 6
27245: PUSH
27246: FOR_TO
27247: IFFALSE 27352
// begin uc_nation := nation_nature ;
27249: LD_ADDR_OWVAR 21
27253: PUSH
27254: LD_INT 0
27256: ST_TO_ADDR
// uc_side := 0 ;
27257: LD_ADDR_OWVAR 20
27261: PUSH
27262: LD_INT 0
27264: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27265: LD_ADDR_OWVAR 29
27269: PUSH
27270: LD_INT 12
27272: PUSH
27273: LD_INT 12
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: ST_TO_ADDR
// hc_agressivity := 20 ;
27280: LD_ADDR_OWVAR 35
27284: PUSH
27285: LD_INT 20
27287: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27288: LD_ADDR_OWVAR 28
27292: PUSH
27293: LD_INT 17
27295: ST_TO_ADDR
// hc_gallery :=  ;
27296: LD_ADDR_OWVAR 33
27300: PUSH
27301: LD_STRING 
27303: ST_TO_ADDR
// hc_name :=  ;
27304: LD_ADDR_OWVAR 26
27308: PUSH
27309: LD_STRING 
27311: ST_TO_ADDR
// un := CreateHuman ;
27312: LD_ADDR_VAR 0 2
27316: PUSH
27317: CALL_OW 44
27321: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27322: LD_VAR 0 2
27326: PPUSH
27327: LD_INT 1
27329: PPUSH
27330: CALL_OW 51
// tmp := tmp ^ un ;
27334: LD_ADDR_VAR 0 3
27338: PUSH
27339: LD_VAR 0 3
27343: PUSH
27344: LD_VAR 0 2
27348: ADD
27349: ST_TO_ADDR
// end ;
27350: GO 27246
27352: POP
27353: POP
// repeat wait ( 0 0$1 ) ;
27354: LD_INT 35
27356: PPUSH
27357: CALL_OW 67
// for un in tmp do
27361: LD_ADDR_VAR 0 2
27365: PUSH
27366: LD_VAR 0 3
27370: PUSH
27371: FOR_IN
27372: IFFALSE 27446
// begin if IsDead ( un ) then
27374: LD_VAR 0 2
27378: PPUSH
27379: CALL_OW 301
27383: IFFALSE 27403
// begin tmp := tmp diff un ;
27385: LD_ADDR_VAR 0 3
27389: PUSH
27390: LD_VAR 0 3
27394: PUSH
27395: LD_VAR 0 2
27399: DIFF
27400: ST_TO_ADDR
// continue ;
27401: GO 27371
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27403: LD_VAR 0 2
27407: PPUSH
27408: LD_INT 3
27410: PUSH
27411: LD_INT 22
27413: PUSH
27414: LD_INT 0
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PPUSH
27425: CALL_OW 69
27429: PPUSH
27430: LD_VAR 0 2
27434: PPUSH
27435: CALL_OW 74
27439: PPUSH
27440: CALL_OW 115
// end ;
27444: GO 27371
27446: POP
27447: POP
// until not tmp ;
27448: LD_VAR 0 3
27452: NOT
27453: IFFALSE 27354
// end ;
27455: PPOPN 3
27457: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27458: LD_EXP 74
27462: PUSH
27463: LD_EXP 99
27467: AND
27468: IFFALSE 27522
27470: GO 27472
27472: DISABLE
// begin ToLua ( displayTroll(); ) ;
27473: LD_STRING displayTroll();
27475: PPUSH
27476: CALL_OW 559
// wait ( 3 3$00 ) ;
27480: LD_INT 6300
27482: PPUSH
27483: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27487: LD_STRING hideTroll();
27489: PPUSH
27490: CALL_OW 559
// wait ( 1 1$00 ) ;
27494: LD_INT 2100
27496: PPUSH
27497: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27501: LD_STRING displayTroll();
27503: PPUSH
27504: CALL_OW 559
// wait ( 1 1$00 ) ;
27508: LD_INT 2100
27510: PPUSH
27511: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27515: LD_STRING hideTroll();
27517: PPUSH
27518: CALL_OW 559
// end ;
27522: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27523: LD_EXP 74
27527: PUSH
27528: LD_EXP 100
27532: AND
27533: IFFALSE 27596
27535: GO 27537
27537: DISABLE
27538: LD_INT 0
27540: PPUSH
// begin p := 0 ;
27541: LD_ADDR_VAR 0 1
27545: PUSH
27546: LD_INT 0
27548: ST_TO_ADDR
// repeat game_speed := 1 ;
27549: LD_ADDR_OWVAR 65
27553: PUSH
27554: LD_INT 1
27556: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27557: LD_INT 35
27559: PPUSH
27560: CALL_OW 67
// p := p + 1 ;
27564: LD_ADDR_VAR 0 1
27568: PUSH
27569: LD_VAR 0 1
27573: PUSH
27574: LD_INT 1
27576: PLUS
27577: ST_TO_ADDR
// until p >= 60 ;
27578: LD_VAR 0 1
27582: PUSH
27583: LD_INT 60
27585: GREATEREQUAL
27586: IFFALSE 27549
// game_speed := 4 ;
27588: LD_ADDR_OWVAR 65
27592: PUSH
27593: LD_INT 4
27595: ST_TO_ADDR
// end ;
27596: PPOPN 1
27598: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27599: LD_EXP 74
27603: PUSH
27604: LD_EXP 101
27608: AND
27609: IFFALSE 27755
27611: GO 27613
27613: DISABLE
27614: LD_INT 0
27616: PPUSH
27617: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27618: LD_ADDR_VAR 0 1
27622: PUSH
27623: LD_INT 22
27625: PUSH
27626: LD_OWVAR 2
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PUSH
27635: LD_INT 2
27637: PUSH
27638: LD_INT 30
27640: PUSH
27641: LD_INT 0
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: LD_INT 30
27650: PUSH
27651: LD_INT 1
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: LIST
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PPUSH
27667: CALL_OW 69
27671: ST_TO_ADDR
// if not depot then
27672: LD_VAR 0 1
27676: NOT
27677: IFFALSE 27681
// exit ;
27679: GO 27755
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27681: LD_ADDR_VAR 0 2
27685: PUSH
27686: LD_VAR 0 1
27690: PUSH
27691: LD_INT 1
27693: PPUSH
27694: LD_VAR 0 1
27698: PPUSH
27699: CALL_OW 12
27703: ARRAY
27704: PPUSH
27705: CALL_OW 274
27709: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27710: LD_VAR 0 2
27714: PPUSH
27715: LD_INT 1
27717: PPUSH
27718: LD_INT 0
27720: PPUSH
27721: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27725: LD_VAR 0 2
27729: PPUSH
27730: LD_INT 2
27732: PPUSH
27733: LD_INT 0
27735: PPUSH
27736: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27740: LD_VAR 0 2
27744: PPUSH
27745: LD_INT 3
27747: PPUSH
27748: LD_INT 0
27750: PPUSH
27751: CALL_OW 277
// end ;
27755: PPOPN 2
27757: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27758: LD_EXP 74
27762: PUSH
27763: LD_EXP 102
27767: AND
27768: IFFALSE 27865
27770: GO 27772
27772: DISABLE
27773: LD_INT 0
27775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27776: LD_ADDR_VAR 0 1
27780: PUSH
27781: LD_INT 22
27783: PUSH
27784: LD_OWVAR 2
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PUSH
27793: LD_INT 21
27795: PUSH
27796: LD_INT 1
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: LD_INT 3
27805: PUSH
27806: LD_INT 23
27808: PUSH
27809: LD_INT 0
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: LIST
27824: PPUSH
27825: CALL_OW 69
27829: ST_TO_ADDR
// if not tmp then
27830: LD_VAR 0 1
27834: NOT
27835: IFFALSE 27839
// exit ;
27837: GO 27865
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27839: LD_VAR 0 1
27843: PUSH
27844: LD_INT 1
27846: PPUSH
27847: LD_VAR 0 1
27851: PPUSH
27852: CALL_OW 12
27856: ARRAY
27857: PPUSH
27858: LD_INT 200
27860: PPUSH
27861: CALL_OW 234
// end ;
27865: PPOPN 1
27867: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27868: LD_EXP 74
27872: PUSH
27873: LD_EXP 103
27877: AND
27878: IFFALSE 27957
27880: GO 27882
27882: DISABLE
27883: LD_INT 0
27885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27886: LD_ADDR_VAR 0 1
27890: PUSH
27891: LD_INT 22
27893: PUSH
27894: LD_OWVAR 2
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 21
27905: PUSH
27906: LD_INT 2
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PPUSH
27917: CALL_OW 69
27921: ST_TO_ADDR
// if not tmp then
27922: LD_VAR 0 1
27926: NOT
27927: IFFALSE 27931
// exit ;
27929: GO 27957
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27931: LD_VAR 0 1
27935: PUSH
27936: LD_INT 1
27938: PPUSH
27939: LD_VAR 0 1
27943: PPUSH
27944: CALL_OW 12
27948: ARRAY
27949: PPUSH
27950: LD_INT 60
27952: PPUSH
27953: CALL_OW 234
// end ;
27957: PPOPN 1
27959: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27960: LD_EXP 74
27964: PUSH
27965: LD_EXP 104
27969: AND
27970: IFFALSE 28069
27972: GO 27974
27974: DISABLE
27975: LD_INT 0
27977: PPUSH
27978: PPUSH
// begin enable ;
27979: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27980: LD_ADDR_VAR 0 1
27984: PUSH
27985: LD_INT 22
27987: PUSH
27988: LD_OWVAR 2
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 61
27999: PUSH
28000: EMPTY
28001: LIST
28002: PUSH
28003: LD_INT 33
28005: PUSH
28006: LD_INT 2
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: LIST
28017: PPUSH
28018: CALL_OW 69
28022: ST_TO_ADDR
// if not tmp then
28023: LD_VAR 0 1
28027: NOT
28028: IFFALSE 28032
// exit ;
28030: GO 28069
// for i in tmp do
28032: LD_ADDR_VAR 0 2
28036: PUSH
28037: LD_VAR 0 1
28041: PUSH
28042: FOR_IN
28043: IFFALSE 28067
// if IsControledBy ( i ) then
28045: LD_VAR 0 2
28049: PPUSH
28050: CALL_OW 312
28054: IFFALSE 28065
// ComUnlink ( i ) ;
28056: LD_VAR 0 2
28060: PPUSH
28061: CALL_OW 136
28065: GO 28042
28067: POP
28068: POP
// end ;
28069: PPOPN 2
28071: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28072: LD_EXP 74
28076: PUSH
28077: LD_EXP 105
28081: AND
28082: IFFALSE 28222
28084: GO 28086
28086: DISABLE
28087: LD_INT 0
28089: PPUSH
28090: PPUSH
// begin ToLua ( displayPowell(); ) ;
28091: LD_STRING displayPowell();
28093: PPUSH
28094: CALL_OW 559
// uc_side := 0 ;
28098: LD_ADDR_OWVAR 20
28102: PUSH
28103: LD_INT 0
28105: ST_TO_ADDR
// uc_nation := 2 ;
28106: LD_ADDR_OWVAR 21
28110: PUSH
28111: LD_INT 2
28113: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28114: LD_ADDR_OWVAR 37
28118: PUSH
28119: LD_INT 14
28121: ST_TO_ADDR
// vc_engine := engine_siberite ;
28122: LD_ADDR_OWVAR 39
28126: PUSH
28127: LD_INT 3
28129: ST_TO_ADDR
// vc_control := control_apeman ;
28130: LD_ADDR_OWVAR 38
28134: PUSH
28135: LD_INT 5
28137: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28138: LD_ADDR_OWVAR 40
28142: PUSH
28143: LD_INT 29
28145: ST_TO_ADDR
// un := CreateVehicle ;
28146: LD_ADDR_VAR 0 2
28150: PUSH
28151: CALL_OW 45
28155: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28156: LD_VAR 0 2
28160: PPUSH
28161: LD_INT 1
28163: PPUSH
28164: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28168: LD_INT 35
28170: PPUSH
28171: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28175: LD_VAR 0 2
28179: PPUSH
28180: LD_INT 22
28182: PUSH
28183: LD_OWVAR 2
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PPUSH
28192: CALL_OW 69
28196: PPUSH
28197: LD_VAR 0 2
28201: PPUSH
28202: CALL_OW 74
28206: PPUSH
28207: CALL_OW 115
// until IsDead ( un ) ;
28211: LD_VAR 0 2
28215: PPUSH
28216: CALL_OW 301
28220: IFFALSE 28168
// end ;
28222: PPOPN 2
28224: END
// every 0 0$1 trigger StreamModeActive and sStu do
28225: LD_EXP 74
28229: PUSH
28230: LD_EXP 113
28234: AND
28235: IFFALSE 28251
28237: GO 28239
28239: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28240: LD_STRING displayStucuk();
28242: PPUSH
28243: CALL_OW 559
// ResetFog ;
28247: CALL_OW 335
// end ;
28251: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28252: LD_EXP 74
28256: PUSH
28257: LD_EXP 106
28261: AND
28262: IFFALSE 28403
28264: GO 28266
28266: DISABLE
28267: LD_INT 0
28269: PPUSH
28270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28271: LD_ADDR_VAR 0 2
28275: PUSH
28276: LD_INT 22
28278: PUSH
28279: LD_OWVAR 2
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 21
28290: PUSH
28291: LD_INT 1
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PPUSH
28302: CALL_OW 69
28306: ST_TO_ADDR
// if not tmp then
28307: LD_VAR 0 2
28311: NOT
28312: IFFALSE 28316
// exit ;
28314: GO 28403
// un := tmp [ rand ( 1 , tmp ) ] ;
28316: LD_ADDR_VAR 0 1
28320: PUSH
28321: LD_VAR 0 2
28325: PUSH
28326: LD_INT 1
28328: PPUSH
28329: LD_VAR 0 2
28333: PPUSH
28334: CALL_OW 12
28338: ARRAY
28339: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28340: LD_VAR 0 1
28344: PPUSH
28345: LD_INT 0
28347: PPUSH
28348: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28352: LD_VAR 0 1
28356: PPUSH
28357: LD_OWVAR 3
28361: PUSH
28362: LD_VAR 0 1
28366: DIFF
28367: PPUSH
28368: LD_VAR 0 1
28372: PPUSH
28373: CALL_OW 74
28377: PPUSH
28378: CALL_OW 115
// wait ( 0 0$20 ) ;
28382: LD_INT 700
28384: PPUSH
28385: CALL_OW 67
// SetSide ( un , your_side ) ;
28389: LD_VAR 0 1
28393: PPUSH
28394: LD_OWVAR 2
28398: PPUSH
28399: CALL_OW 235
// end ;
28403: PPOPN 2
28405: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28406: LD_EXP 74
28410: PUSH
28411: LD_EXP 107
28415: AND
28416: IFFALSE 28522
28418: GO 28420
28420: DISABLE
28421: LD_INT 0
28423: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28424: LD_ADDR_VAR 0 1
28428: PUSH
28429: LD_INT 22
28431: PUSH
28432: LD_OWVAR 2
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 2
28443: PUSH
28444: LD_INT 30
28446: PUSH
28447: LD_INT 0
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: LD_INT 30
28456: PUSH
28457: LD_INT 1
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: LIST
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PPUSH
28473: CALL_OW 69
28477: ST_TO_ADDR
// if not depot then
28478: LD_VAR 0 1
28482: NOT
28483: IFFALSE 28487
// exit ;
28485: GO 28522
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28487: LD_VAR 0 1
28491: PUSH
28492: LD_INT 1
28494: ARRAY
28495: PPUSH
28496: CALL_OW 250
28500: PPUSH
28501: LD_VAR 0 1
28505: PUSH
28506: LD_INT 1
28508: ARRAY
28509: PPUSH
28510: CALL_OW 251
28514: PPUSH
28515: LD_INT 70
28517: PPUSH
28518: CALL_OW 495
// end ;
28522: PPOPN 1
28524: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28525: LD_EXP 74
28529: PUSH
28530: LD_EXP 108
28534: AND
28535: IFFALSE 28746
28537: GO 28539
28539: DISABLE
28540: LD_INT 0
28542: PPUSH
28543: PPUSH
28544: PPUSH
28545: PPUSH
28546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28547: LD_ADDR_VAR 0 5
28551: PUSH
28552: LD_INT 22
28554: PUSH
28555: LD_OWVAR 2
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 21
28566: PUSH
28567: LD_INT 1
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PPUSH
28578: CALL_OW 69
28582: ST_TO_ADDR
// if not tmp then
28583: LD_VAR 0 5
28587: NOT
28588: IFFALSE 28592
// exit ;
28590: GO 28746
// for i in tmp do
28592: LD_ADDR_VAR 0 1
28596: PUSH
28597: LD_VAR 0 5
28601: PUSH
28602: FOR_IN
28603: IFFALSE 28744
// begin d := rand ( 0 , 5 ) ;
28605: LD_ADDR_VAR 0 4
28609: PUSH
28610: LD_INT 0
28612: PPUSH
28613: LD_INT 5
28615: PPUSH
28616: CALL_OW 12
28620: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28621: LD_ADDR_VAR 0 2
28625: PUSH
28626: LD_VAR 0 1
28630: PPUSH
28631: CALL_OW 250
28635: PPUSH
28636: LD_VAR 0 4
28640: PPUSH
28641: LD_INT 3
28643: PPUSH
28644: LD_INT 12
28646: PPUSH
28647: CALL_OW 12
28651: PPUSH
28652: CALL_OW 272
28656: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28657: LD_ADDR_VAR 0 3
28661: PUSH
28662: LD_VAR 0 1
28666: PPUSH
28667: CALL_OW 251
28671: PPUSH
28672: LD_VAR 0 4
28676: PPUSH
28677: LD_INT 3
28679: PPUSH
28680: LD_INT 12
28682: PPUSH
28683: CALL_OW 12
28687: PPUSH
28688: CALL_OW 273
28692: ST_TO_ADDR
// if ValidHex ( x , y ) then
28693: LD_VAR 0 2
28697: PPUSH
28698: LD_VAR 0 3
28702: PPUSH
28703: CALL_OW 488
28707: IFFALSE 28742
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28709: LD_VAR 0 1
28713: PPUSH
28714: LD_VAR 0 2
28718: PPUSH
28719: LD_VAR 0 3
28723: PPUSH
28724: LD_INT 3
28726: PPUSH
28727: LD_INT 6
28729: PPUSH
28730: CALL_OW 12
28734: PPUSH
28735: LD_INT 1
28737: PPUSH
28738: CALL_OW 483
// end ;
28742: GO 28602
28744: POP
28745: POP
// end ;
28746: PPOPN 5
28748: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28749: LD_EXP 74
28753: PUSH
28754: LD_EXP 109
28758: AND
28759: IFFALSE 28853
28761: GO 28763
28763: DISABLE
28764: LD_INT 0
28766: PPUSH
28767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28768: LD_ADDR_VAR 0 2
28772: PUSH
28773: LD_INT 22
28775: PUSH
28776: LD_OWVAR 2
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: LD_INT 32
28787: PUSH
28788: LD_INT 1
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: LD_INT 21
28797: PUSH
28798: LD_INT 2
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: LIST
28809: PPUSH
28810: CALL_OW 69
28814: ST_TO_ADDR
// if not tmp then
28815: LD_VAR 0 2
28819: NOT
28820: IFFALSE 28824
// exit ;
28822: GO 28853
// for i in tmp do
28824: LD_ADDR_VAR 0 1
28828: PUSH
28829: LD_VAR 0 2
28833: PUSH
28834: FOR_IN
28835: IFFALSE 28851
// SetFuel ( i , 0 ) ;
28837: LD_VAR 0 1
28841: PPUSH
28842: LD_INT 0
28844: PPUSH
28845: CALL_OW 240
28849: GO 28834
28851: POP
28852: POP
// end ;
28853: PPOPN 2
28855: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28856: LD_EXP 74
28860: PUSH
28861: LD_EXP 110
28865: AND
28866: IFFALSE 28932
28868: GO 28870
28870: DISABLE
28871: LD_INT 0
28873: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28874: LD_ADDR_VAR 0 1
28878: PUSH
28879: LD_INT 22
28881: PUSH
28882: LD_OWVAR 2
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 30
28893: PUSH
28894: LD_INT 29
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PPUSH
28905: CALL_OW 69
28909: ST_TO_ADDR
// if not tmp then
28910: LD_VAR 0 1
28914: NOT
28915: IFFALSE 28919
// exit ;
28917: GO 28932
// DestroyUnit ( tmp [ 1 ] ) ;
28919: LD_VAR 0 1
28923: PUSH
28924: LD_INT 1
28926: ARRAY
28927: PPUSH
28928: CALL_OW 65
// end ;
28932: PPOPN 1
28934: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28935: LD_EXP 74
28939: PUSH
28940: LD_EXP 112
28944: AND
28945: IFFALSE 29074
28947: GO 28949
28949: DISABLE
28950: LD_INT 0
28952: PPUSH
// begin uc_side := 0 ;
28953: LD_ADDR_OWVAR 20
28957: PUSH
28958: LD_INT 0
28960: ST_TO_ADDR
// uc_nation := nation_arabian ;
28961: LD_ADDR_OWVAR 21
28965: PUSH
28966: LD_INT 2
28968: ST_TO_ADDR
// hc_gallery :=  ;
28969: LD_ADDR_OWVAR 33
28973: PUSH
28974: LD_STRING 
28976: ST_TO_ADDR
// hc_name :=  ;
28977: LD_ADDR_OWVAR 26
28981: PUSH
28982: LD_STRING 
28984: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28985: LD_INT 1
28987: PPUSH
28988: LD_INT 11
28990: PPUSH
28991: LD_INT 10
28993: PPUSH
28994: CALL_OW 380
// un := CreateHuman ;
28998: LD_ADDR_VAR 0 1
29002: PUSH
29003: CALL_OW 44
29007: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29008: LD_VAR 0 1
29012: PPUSH
29013: LD_INT 1
29015: PPUSH
29016: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29020: LD_INT 35
29022: PPUSH
29023: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29027: LD_VAR 0 1
29031: PPUSH
29032: LD_INT 22
29034: PUSH
29035: LD_OWVAR 2
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PPUSH
29044: CALL_OW 69
29048: PPUSH
29049: LD_VAR 0 1
29053: PPUSH
29054: CALL_OW 74
29058: PPUSH
29059: CALL_OW 115
// until IsDead ( un ) ;
29063: LD_VAR 0 1
29067: PPUSH
29068: CALL_OW 301
29072: IFFALSE 29020
// end ;
29074: PPOPN 1
29076: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29077: LD_EXP 74
29081: PUSH
29082: LD_EXP 114
29086: AND
29087: IFFALSE 29099
29089: GO 29091
29091: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29092: LD_STRING earthquake(getX(game), 0, 32)
29094: PPUSH
29095: CALL_OW 559
29099: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29100: LD_EXP 74
29104: PUSH
29105: LD_EXP 115
29109: AND
29110: IFFALSE 29201
29112: GO 29114
29114: DISABLE
29115: LD_INT 0
29117: PPUSH
// begin enable ;
29118: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29119: LD_ADDR_VAR 0 1
29123: PUSH
29124: LD_INT 22
29126: PUSH
29127: LD_OWVAR 2
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PUSH
29136: LD_INT 21
29138: PUSH
29139: LD_INT 2
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 33
29148: PUSH
29149: LD_INT 3
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: LIST
29160: PPUSH
29161: CALL_OW 69
29165: ST_TO_ADDR
// if not tmp then
29166: LD_VAR 0 1
29170: NOT
29171: IFFALSE 29175
// exit ;
29173: GO 29201
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29175: LD_VAR 0 1
29179: PUSH
29180: LD_INT 1
29182: PPUSH
29183: LD_VAR 0 1
29187: PPUSH
29188: CALL_OW 12
29192: ARRAY
29193: PPUSH
29194: LD_INT 1
29196: PPUSH
29197: CALL_OW 234
// end ;
29201: PPOPN 1
29203: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29204: LD_EXP 74
29208: PUSH
29209: LD_EXP 116
29213: AND
29214: IFFALSE 29355
29216: GO 29218
29218: DISABLE
29219: LD_INT 0
29221: PPUSH
29222: PPUSH
29223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29224: LD_ADDR_VAR 0 3
29228: PUSH
29229: LD_INT 22
29231: PUSH
29232: LD_OWVAR 2
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PUSH
29241: LD_INT 25
29243: PUSH
29244: LD_INT 1
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PPUSH
29255: CALL_OW 69
29259: ST_TO_ADDR
// if not tmp then
29260: LD_VAR 0 3
29264: NOT
29265: IFFALSE 29269
// exit ;
29267: GO 29355
// un := tmp [ rand ( 1 , tmp ) ] ;
29269: LD_ADDR_VAR 0 2
29273: PUSH
29274: LD_VAR 0 3
29278: PUSH
29279: LD_INT 1
29281: PPUSH
29282: LD_VAR 0 3
29286: PPUSH
29287: CALL_OW 12
29291: ARRAY
29292: ST_TO_ADDR
// if Crawls ( un ) then
29293: LD_VAR 0 2
29297: PPUSH
29298: CALL_OW 318
29302: IFFALSE 29313
// ComWalk ( un ) ;
29304: LD_VAR 0 2
29308: PPUSH
29309: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29313: LD_VAR 0 2
29317: PPUSH
29318: LD_INT 9
29320: PPUSH
29321: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29325: LD_INT 28
29327: PPUSH
29328: LD_OWVAR 2
29332: PPUSH
29333: LD_INT 2
29335: PPUSH
29336: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29340: LD_INT 29
29342: PPUSH
29343: LD_OWVAR 2
29347: PPUSH
29348: LD_INT 2
29350: PPUSH
29351: CALL_OW 322
// end ;
29355: PPOPN 3
29357: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29358: LD_EXP 74
29362: PUSH
29363: LD_EXP 117
29367: AND
29368: IFFALSE 29479
29370: GO 29372
29372: DISABLE
29373: LD_INT 0
29375: PPUSH
29376: PPUSH
29377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29378: LD_ADDR_VAR 0 3
29382: PUSH
29383: LD_INT 22
29385: PUSH
29386: LD_OWVAR 2
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 25
29397: PUSH
29398: LD_INT 1
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PPUSH
29409: CALL_OW 69
29413: ST_TO_ADDR
// if not tmp then
29414: LD_VAR 0 3
29418: NOT
29419: IFFALSE 29423
// exit ;
29421: GO 29479
// un := tmp [ rand ( 1 , tmp ) ] ;
29423: LD_ADDR_VAR 0 2
29427: PUSH
29428: LD_VAR 0 3
29432: PUSH
29433: LD_INT 1
29435: PPUSH
29436: LD_VAR 0 3
29440: PPUSH
29441: CALL_OW 12
29445: ARRAY
29446: ST_TO_ADDR
// if Crawls ( un ) then
29447: LD_VAR 0 2
29451: PPUSH
29452: CALL_OW 318
29456: IFFALSE 29467
// ComWalk ( un ) ;
29458: LD_VAR 0 2
29462: PPUSH
29463: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29467: LD_VAR 0 2
29471: PPUSH
29472: LD_INT 8
29474: PPUSH
29475: CALL_OW 336
// end ;
29479: PPOPN 3
29481: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29482: LD_EXP 74
29486: PUSH
29487: LD_EXP 118
29491: AND
29492: IFFALSE 29636
29494: GO 29496
29496: DISABLE
29497: LD_INT 0
29499: PPUSH
29500: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29501: LD_ADDR_VAR 0 2
29505: PUSH
29506: LD_INT 22
29508: PUSH
29509: LD_OWVAR 2
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: LD_INT 21
29520: PUSH
29521: LD_INT 2
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 2
29530: PUSH
29531: LD_INT 34
29533: PUSH
29534: LD_INT 12
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 34
29543: PUSH
29544: LD_INT 51
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 34
29553: PUSH
29554: LD_INT 32
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: LIST
29571: PPUSH
29572: CALL_OW 69
29576: ST_TO_ADDR
// if not tmp then
29577: LD_VAR 0 2
29581: NOT
29582: IFFALSE 29586
// exit ;
29584: GO 29636
// for i in tmp do
29586: LD_ADDR_VAR 0 1
29590: PUSH
29591: LD_VAR 0 2
29595: PUSH
29596: FOR_IN
29597: IFFALSE 29634
// if GetCargo ( i , mat_artifact ) = 0 then
29599: LD_VAR 0 1
29603: PPUSH
29604: LD_INT 4
29606: PPUSH
29607: CALL_OW 289
29611: PUSH
29612: LD_INT 0
29614: EQUAL
29615: IFFALSE 29632
// SetCargo ( i , mat_siberit , 100 ) ;
29617: LD_VAR 0 1
29621: PPUSH
29622: LD_INT 3
29624: PPUSH
29625: LD_INT 100
29627: PPUSH
29628: CALL_OW 290
29632: GO 29596
29634: POP
29635: POP
// end ;
29636: PPOPN 2
29638: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29639: LD_EXP 74
29643: PUSH
29644: LD_EXP 119
29648: AND
29649: IFFALSE 29832
29651: GO 29653
29653: DISABLE
29654: LD_INT 0
29656: PPUSH
29657: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29658: LD_ADDR_VAR 0 2
29662: PUSH
29663: LD_INT 22
29665: PUSH
29666: LD_OWVAR 2
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PPUSH
29675: CALL_OW 69
29679: ST_TO_ADDR
// if not tmp then
29680: LD_VAR 0 2
29684: NOT
29685: IFFALSE 29689
// exit ;
29687: GO 29832
// for i := 1 to 2 do
29689: LD_ADDR_VAR 0 1
29693: PUSH
29694: DOUBLE
29695: LD_INT 1
29697: DEC
29698: ST_TO_ADDR
29699: LD_INT 2
29701: PUSH
29702: FOR_TO
29703: IFFALSE 29830
// begin uc_side := your_side ;
29705: LD_ADDR_OWVAR 20
29709: PUSH
29710: LD_OWVAR 2
29714: ST_TO_ADDR
// uc_nation := nation_american ;
29715: LD_ADDR_OWVAR 21
29719: PUSH
29720: LD_INT 1
29722: ST_TO_ADDR
// vc_chassis := us_morphling ;
29723: LD_ADDR_OWVAR 37
29727: PUSH
29728: LD_INT 5
29730: ST_TO_ADDR
// vc_engine := engine_siberite ;
29731: LD_ADDR_OWVAR 39
29735: PUSH
29736: LD_INT 3
29738: ST_TO_ADDR
// vc_control := control_computer ;
29739: LD_ADDR_OWVAR 38
29743: PUSH
29744: LD_INT 3
29746: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29747: LD_ADDR_OWVAR 40
29751: PUSH
29752: LD_INT 10
29754: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29755: LD_VAR 0 2
29759: PUSH
29760: LD_INT 1
29762: ARRAY
29763: PPUSH
29764: CALL_OW 310
29768: NOT
29769: IFFALSE 29816
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29771: CALL_OW 45
29775: PPUSH
29776: LD_VAR 0 2
29780: PUSH
29781: LD_INT 1
29783: ARRAY
29784: PPUSH
29785: CALL_OW 250
29789: PPUSH
29790: LD_VAR 0 2
29794: PUSH
29795: LD_INT 1
29797: ARRAY
29798: PPUSH
29799: CALL_OW 251
29803: PPUSH
29804: LD_INT 12
29806: PPUSH
29807: LD_INT 1
29809: PPUSH
29810: CALL_OW 50
29814: GO 29828
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29816: CALL_OW 45
29820: PPUSH
29821: LD_INT 1
29823: PPUSH
29824: CALL_OW 51
// end ;
29828: GO 29702
29830: POP
29831: POP
// end ;
29832: PPOPN 2
29834: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29835: LD_EXP 74
29839: PUSH
29840: LD_EXP 120
29844: AND
29845: IFFALSE 30067
29847: GO 29849
29849: DISABLE
29850: LD_INT 0
29852: PPUSH
29853: PPUSH
29854: PPUSH
29855: PPUSH
29856: PPUSH
29857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29858: LD_ADDR_VAR 0 6
29862: PUSH
29863: LD_INT 22
29865: PUSH
29866: LD_OWVAR 2
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 21
29877: PUSH
29878: LD_INT 1
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 3
29887: PUSH
29888: LD_INT 23
29890: PUSH
29891: LD_INT 0
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: LIST
29906: PPUSH
29907: CALL_OW 69
29911: ST_TO_ADDR
// if not tmp then
29912: LD_VAR 0 6
29916: NOT
29917: IFFALSE 29921
// exit ;
29919: GO 30067
// s1 := rand ( 1 , 4 ) ;
29921: LD_ADDR_VAR 0 2
29925: PUSH
29926: LD_INT 1
29928: PPUSH
29929: LD_INT 4
29931: PPUSH
29932: CALL_OW 12
29936: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29937: LD_ADDR_VAR 0 4
29941: PUSH
29942: LD_VAR 0 6
29946: PUSH
29947: LD_INT 1
29949: ARRAY
29950: PPUSH
29951: LD_VAR 0 2
29955: PPUSH
29956: CALL_OW 259
29960: ST_TO_ADDR
// if s1 = 1 then
29961: LD_VAR 0 2
29965: PUSH
29966: LD_INT 1
29968: EQUAL
29969: IFFALSE 29989
// s2 := rand ( 2 , 4 ) else
29971: LD_ADDR_VAR 0 3
29975: PUSH
29976: LD_INT 2
29978: PPUSH
29979: LD_INT 4
29981: PPUSH
29982: CALL_OW 12
29986: ST_TO_ADDR
29987: GO 29997
// s2 := 1 ;
29989: LD_ADDR_VAR 0 3
29993: PUSH
29994: LD_INT 1
29996: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29997: LD_ADDR_VAR 0 5
30001: PUSH
30002: LD_VAR 0 6
30006: PUSH
30007: LD_INT 1
30009: ARRAY
30010: PPUSH
30011: LD_VAR 0 3
30015: PPUSH
30016: CALL_OW 259
30020: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30021: LD_VAR 0 6
30025: PUSH
30026: LD_INT 1
30028: ARRAY
30029: PPUSH
30030: LD_VAR 0 2
30034: PPUSH
30035: LD_VAR 0 5
30039: PPUSH
30040: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30044: LD_VAR 0 6
30048: PUSH
30049: LD_INT 1
30051: ARRAY
30052: PPUSH
30053: LD_VAR 0 3
30057: PPUSH
30058: LD_VAR 0 4
30062: PPUSH
30063: CALL_OW 237
// end ;
30067: PPOPN 6
30069: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30070: LD_EXP 74
30074: PUSH
30075: LD_EXP 121
30079: AND
30080: IFFALSE 30159
30082: GO 30084
30084: DISABLE
30085: LD_INT 0
30087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30088: LD_ADDR_VAR 0 1
30092: PUSH
30093: LD_INT 22
30095: PUSH
30096: LD_OWVAR 2
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: LD_INT 30
30107: PUSH
30108: LD_INT 3
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PPUSH
30119: CALL_OW 69
30123: ST_TO_ADDR
// if not tmp then
30124: LD_VAR 0 1
30128: NOT
30129: IFFALSE 30133
// exit ;
30131: GO 30159
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30133: LD_VAR 0 1
30137: PUSH
30138: LD_INT 1
30140: PPUSH
30141: LD_VAR 0 1
30145: PPUSH
30146: CALL_OW 12
30150: ARRAY
30151: PPUSH
30152: LD_INT 1
30154: PPUSH
30155: CALL_OW 234
// end ;
30159: PPOPN 1
30161: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30162: LD_EXP 74
30166: PUSH
30167: LD_EXP 122
30171: AND
30172: IFFALSE 30284
30174: GO 30176
30176: DISABLE
30177: LD_INT 0
30179: PPUSH
30180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30181: LD_ADDR_VAR 0 2
30185: PUSH
30186: LD_INT 22
30188: PUSH
30189: LD_OWVAR 2
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 2
30200: PUSH
30201: LD_INT 30
30203: PUSH
30204: LD_INT 27
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 30
30213: PUSH
30214: LD_INT 26
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 30
30223: PUSH
30224: LD_INT 28
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PPUSH
30241: CALL_OW 69
30245: ST_TO_ADDR
// if not tmp then
30246: LD_VAR 0 2
30250: NOT
30251: IFFALSE 30255
// exit ;
30253: GO 30284
// for i in tmp do
30255: LD_ADDR_VAR 0 1
30259: PUSH
30260: LD_VAR 0 2
30264: PUSH
30265: FOR_IN
30266: IFFALSE 30282
// SetLives ( i , 1 ) ;
30268: LD_VAR 0 1
30272: PPUSH
30273: LD_INT 1
30275: PPUSH
30276: CALL_OW 234
30280: GO 30265
30282: POP
30283: POP
// end ;
30284: PPOPN 2
30286: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30287: LD_EXP 74
30291: PUSH
30292: LD_EXP 123
30296: AND
30297: IFFALSE 30584
30299: GO 30301
30301: DISABLE
30302: LD_INT 0
30304: PPUSH
30305: PPUSH
30306: PPUSH
// begin i := rand ( 1 , 7 ) ;
30307: LD_ADDR_VAR 0 1
30311: PUSH
30312: LD_INT 1
30314: PPUSH
30315: LD_INT 7
30317: PPUSH
30318: CALL_OW 12
30322: ST_TO_ADDR
// case i of 1 :
30323: LD_VAR 0 1
30327: PUSH
30328: LD_INT 1
30330: DOUBLE
30331: EQUAL
30332: IFTRUE 30336
30334: GO 30346
30336: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30337: LD_STRING earthquake(getX(game), 0, 32)
30339: PPUSH
30340: CALL_OW 559
30344: GO 30584
30346: LD_INT 2
30348: DOUBLE
30349: EQUAL
30350: IFTRUE 30354
30352: GO 30368
30354: POP
// begin ToLua ( displayStucuk(); ) ;
30355: LD_STRING displayStucuk();
30357: PPUSH
30358: CALL_OW 559
// ResetFog ;
30362: CALL_OW 335
// end ; 3 :
30366: GO 30584
30368: LD_INT 3
30370: DOUBLE
30371: EQUAL
30372: IFTRUE 30376
30374: GO 30480
30376: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30377: LD_ADDR_VAR 0 2
30381: PUSH
30382: LD_INT 22
30384: PUSH
30385: LD_OWVAR 2
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 25
30396: PUSH
30397: LD_INT 1
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PPUSH
30408: CALL_OW 69
30412: ST_TO_ADDR
// if not tmp then
30413: LD_VAR 0 2
30417: NOT
30418: IFFALSE 30422
// exit ;
30420: GO 30584
// un := tmp [ rand ( 1 , tmp ) ] ;
30422: LD_ADDR_VAR 0 3
30426: PUSH
30427: LD_VAR 0 2
30431: PUSH
30432: LD_INT 1
30434: PPUSH
30435: LD_VAR 0 2
30439: PPUSH
30440: CALL_OW 12
30444: ARRAY
30445: ST_TO_ADDR
// if Crawls ( un ) then
30446: LD_VAR 0 3
30450: PPUSH
30451: CALL_OW 318
30455: IFFALSE 30466
// ComWalk ( un ) ;
30457: LD_VAR 0 3
30461: PPUSH
30462: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30466: LD_VAR 0 3
30470: PPUSH
30471: LD_INT 8
30473: PPUSH
30474: CALL_OW 336
// end ; 4 :
30478: GO 30584
30480: LD_INT 4
30482: DOUBLE
30483: EQUAL
30484: IFTRUE 30488
30486: GO 30562
30488: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30489: LD_ADDR_VAR 0 2
30493: PUSH
30494: LD_INT 22
30496: PUSH
30497: LD_OWVAR 2
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: LD_INT 30
30508: PUSH
30509: LD_INT 29
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PPUSH
30520: CALL_OW 69
30524: ST_TO_ADDR
// if not tmp then
30525: LD_VAR 0 2
30529: NOT
30530: IFFALSE 30534
// exit ;
30532: GO 30584
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30534: LD_VAR 0 2
30538: PUSH
30539: LD_INT 1
30541: ARRAY
30542: PPUSH
30543: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30547: LD_VAR 0 2
30551: PUSH
30552: LD_INT 1
30554: ARRAY
30555: PPUSH
30556: CALL_OW 65
// end ; 5 .. 7 :
30560: GO 30584
30562: LD_INT 5
30564: DOUBLE
30565: GREATEREQUAL
30566: IFFALSE 30574
30568: LD_INT 7
30570: DOUBLE
30571: LESSEQUAL
30572: IFTRUE 30576
30574: GO 30583
30576: POP
// StreamSibBomb ; end ;
30577: CALL 26821 0 0
30581: GO 30584
30583: POP
// end ;
30584: PPOPN 3
30586: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30587: LD_EXP 74
30591: PUSH
30592: LD_EXP 124
30596: AND
30597: IFFALSE 30753
30599: GO 30601
30601: DISABLE
30602: LD_INT 0
30604: PPUSH
30605: PPUSH
30606: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30607: LD_ADDR_VAR 0 2
30611: PUSH
30612: LD_INT 81
30614: PUSH
30615: LD_OWVAR 2
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 2
30626: PUSH
30627: LD_INT 21
30629: PUSH
30630: LD_INT 1
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 21
30639: PUSH
30640: LD_INT 2
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: LIST
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PPUSH
30656: CALL_OW 69
30660: ST_TO_ADDR
// if not tmp then
30661: LD_VAR 0 2
30665: NOT
30666: IFFALSE 30670
// exit ;
30668: GO 30753
// p := 0 ;
30670: LD_ADDR_VAR 0 3
30674: PUSH
30675: LD_INT 0
30677: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30678: LD_INT 35
30680: PPUSH
30681: CALL_OW 67
// p := p + 1 ;
30685: LD_ADDR_VAR 0 3
30689: PUSH
30690: LD_VAR 0 3
30694: PUSH
30695: LD_INT 1
30697: PLUS
30698: ST_TO_ADDR
// for i in tmp do
30699: LD_ADDR_VAR 0 1
30703: PUSH
30704: LD_VAR 0 2
30708: PUSH
30709: FOR_IN
30710: IFFALSE 30741
// if GetLives ( i ) < 1000 then
30712: LD_VAR 0 1
30716: PPUSH
30717: CALL_OW 256
30721: PUSH
30722: LD_INT 1000
30724: LESS
30725: IFFALSE 30739
// SetLives ( i , 1000 ) ;
30727: LD_VAR 0 1
30731: PPUSH
30732: LD_INT 1000
30734: PPUSH
30735: CALL_OW 234
30739: GO 30709
30741: POP
30742: POP
// until p > 20 ;
30743: LD_VAR 0 3
30747: PUSH
30748: LD_INT 20
30750: GREATER
30751: IFFALSE 30678
// end ;
30753: PPOPN 3
30755: END
// every 0 0$1 trigger StreamModeActive and sTime do
30756: LD_EXP 74
30760: PUSH
30761: LD_EXP 125
30765: AND
30766: IFFALSE 30801
30768: GO 30770
30770: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30771: LD_INT 28
30773: PPUSH
30774: LD_OWVAR 2
30778: PPUSH
30779: LD_INT 2
30781: PPUSH
30782: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30786: LD_INT 30
30788: PPUSH
30789: LD_OWVAR 2
30793: PPUSH
30794: LD_INT 2
30796: PPUSH
30797: CALL_OW 322
// end ;
30801: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30802: LD_EXP 74
30806: PUSH
30807: LD_EXP 126
30811: AND
30812: IFFALSE 30933
30814: GO 30816
30816: DISABLE
30817: LD_INT 0
30819: PPUSH
30820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30821: LD_ADDR_VAR 0 2
30825: PUSH
30826: LD_INT 22
30828: PUSH
30829: LD_OWVAR 2
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 21
30840: PUSH
30841: LD_INT 1
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 3
30850: PUSH
30851: LD_INT 23
30853: PUSH
30854: LD_INT 0
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: LIST
30869: PPUSH
30870: CALL_OW 69
30874: ST_TO_ADDR
// if not tmp then
30875: LD_VAR 0 2
30879: NOT
30880: IFFALSE 30884
// exit ;
30882: GO 30933
// for i in tmp do
30884: LD_ADDR_VAR 0 1
30888: PUSH
30889: LD_VAR 0 2
30893: PUSH
30894: FOR_IN
30895: IFFALSE 30931
// begin if Crawls ( i ) then
30897: LD_VAR 0 1
30901: PPUSH
30902: CALL_OW 318
30906: IFFALSE 30917
// ComWalk ( i ) ;
30908: LD_VAR 0 1
30912: PPUSH
30913: CALL_OW 138
// SetClass ( i , 2 ) ;
30917: LD_VAR 0 1
30921: PPUSH
30922: LD_INT 2
30924: PPUSH
30925: CALL_OW 336
// end ;
30929: GO 30894
30931: POP
30932: POP
// end ;
30933: PPOPN 2
30935: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30936: LD_EXP 74
30940: PUSH
30941: LD_EXP 127
30945: AND
30946: IFFALSE 31234
30948: GO 30950
30950: DISABLE
30951: LD_INT 0
30953: PPUSH
30954: PPUSH
30955: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30956: LD_OWVAR 2
30960: PPUSH
30961: LD_INT 9
30963: PPUSH
30964: LD_INT 1
30966: PPUSH
30967: LD_INT 1
30969: PPUSH
30970: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30974: LD_INT 9
30976: PPUSH
30977: LD_OWVAR 2
30981: PPUSH
30982: CALL_OW 343
// uc_side := 9 ;
30986: LD_ADDR_OWVAR 20
30990: PUSH
30991: LD_INT 9
30993: ST_TO_ADDR
// uc_nation := 2 ;
30994: LD_ADDR_OWVAR 21
30998: PUSH
30999: LD_INT 2
31001: ST_TO_ADDR
// hc_name := Dark Warrior ;
31002: LD_ADDR_OWVAR 26
31006: PUSH
31007: LD_STRING Dark Warrior
31009: ST_TO_ADDR
// hc_gallery :=  ;
31010: LD_ADDR_OWVAR 33
31014: PUSH
31015: LD_STRING 
31017: ST_TO_ADDR
// hc_noskilllimit := true ;
31018: LD_ADDR_OWVAR 76
31022: PUSH
31023: LD_INT 1
31025: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31026: LD_ADDR_OWVAR 31
31030: PUSH
31031: LD_INT 30
31033: PUSH
31034: LD_INT 30
31036: PUSH
31037: LD_INT 30
31039: PUSH
31040: LD_INT 30
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: ST_TO_ADDR
// un := CreateHuman ;
31049: LD_ADDR_VAR 0 3
31053: PUSH
31054: CALL_OW 44
31058: ST_TO_ADDR
// hc_noskilllimit := false ;
31059: LD_ADDR_OWVAR 76
31063: PUSH
31064: LD_INT 0
31066: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31067: LD_VAR 0 3
31071: PPUSH
31072: LD_INT 1
31074: PPUSH
31075: CALL_OW 51
// ToLua ( playRanger() ) ;
31079: LD_STRING playRanger()
31081: PPUSH
31082: CALL_OW 559
// p := 0 ;
31086: LD_ADDR_VAR 0 2
31090: PUSH
31091: LD_INT 0
31093: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31094: LD_INT 35
31096: PPUSH
31097: CALL_OW 67
// p := p + 1 ;
31101: LD_ADDR_VAR 0 2
31105: PUSH
31106: LD_VAR 0 2
31110: PUSH
31111: LD_INT 1
31113: PLUS
31114: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31115: LD_VAR 0 3
31119: PPUSH
31120: CALL_OW 256
31124: PUSH
31125: LD_INT 1000
31127: LESS
31128: IFFALSE 31142
// SetLives ( un , 1000 ) ;
31130: LD_VAR 0 3
31134: PPUSH
31135: LD_INT 1000
31137: PPUSH
31138: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31142: LD_VAR 0 3
31146: PPUSH
31147: LD_INT 81
31149: PUSH
31150: LD_OWVAR 2
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 91
31161: PUSH
31162: LD_VAR 0 3
31166: PUSH
31167: LD_INT 30
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: LIST
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PPUSH
31179: CALL_OW 69
31183: PPUSH
31184: LD_VAR 0 3
31188: PPUSH
31189: CALL_OW 74
31193: PPUSH
31194: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31198: LD_VAR 0 2
31202: PUSH
31203: LD_INT 80
31205: GREATER
31206: PUSH
31207: LD_VAR 0 3
31211: PPUSH
31212: CALL_OW 301
31216: OR
31217: IFFALSE 31094
// if un then
31219: LD_VAR 0 3
31223: IFFALSE 31234
// RemoveUnit ( un ) ;
31225: LD_VAR 0 3
31229: PPUSH
31230: CALL_OW 64
// end ;
31234: PPOPN 3
31236: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31237: LD_EXP 128
31241: IFFALSE 31357
31243: GO 31245
31245: DISABLE
31246: LD_INT 0
31248: PPUSH
31249: PPUSH
31250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31251: LD_ADDR_VAR 0 2
31255: PUSH
31256: LD_INT 81
31258: PUSH
31259: LD_OWVAR 2
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 21
31270: PUSH
31271: LD_INT 1
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PPUSH
31282: CALL_OW 69
31286: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31287: LD_STRING playComputer()
31289: PPUSH
31290: CALL_OW 559
// if not tmp then
31294: LD_VAR 0 2
31298: NOT
31299: IFFALSE 31303
// exit ;
31301: GO 31357
// for i in tmp do
31303: LD_ADDR_VAR 0 1
31307: PUSH
31308: LD_VAR 0 2
31312: PUSH
31313: FOR_IN
31314: IFFALSE 31355
// for j := 1 to 4 do
31316: LD_ADDR_VAR 0 3
31320: PUSH
31321: DOUBLE
31322: LD_INT 1
31324: DEC
31325: ST_TO_ADDR
31326: LD_INT 4
31328: PUSH
31329: FOR_TO
31330: IFFALSE 31351
// SetSkill ( i , j , 10 ) ;
31332: LD_VAR 0 1
31336: PPUSH
31337: LD_VAR 0 3
31341: PPUSH
31342: LD_INT 10
31344: PPUSH
31345: CALL_OW 237
31349: GO 31329
31351: POP
31352: POP
31353: GO 31313
31355: POP
31356: POP
// end ;
31357: PPOPN 3
31359: END
// every 0 0$1 trigger s30 do var i , tmp ;
31360: LD_EXP 129
31364: IFFALSE 31433
31366: GO 31368
31368: DISABLE
31369: LD_INT 0
31371: PPUSH
31372: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31373: LD_ADDR_VAR 0 2
31377: PUSH
31378: LD_INT 22
31380: PUSH
31381: LD_OWVAR 2
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PPUSH
31390: CALL_OW 69
31394: ST_TO_ADDR
// if not tmp then
31395: LD_VAR 0 2
31399: NOT
31400: IFFALSE 31404
// exit ;
31402: GO 31433
// for i in tmp do
31404: LD_ADDR_VAR 0 1
31408: PUSH
31409: LD_VAR 0 2
31413: PUSH
31414: FOR_IN
31415: IFFALSE 31431
// SetLives ( i , 300 ) ;
31417: LD_VAR 0 1
31421: PPUSH
31422: LD_INT 300
31424: PPUSH
31425: CALL_OW 234
31429: GO 31414
31431: POP
31432: POP
// end ;
31433: PPOPN 2
31435: END
// every 0 0$1 trigger s60 do var i , tmp ;
31436: LD_EXP 130
31440: IFFALSE 31509
31442: GO 31444
31444: DISABLE
31445: LD_INT 0
31447: PPUSH
31448: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31449: LD_ADDR_VAR 0 2
31453: PUSH
31454: LD_INT 22
31456: PUSH
31457: LD_OWVAR 2
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PPUSH
31466: CALL_OW 69
31470: ST_TO_ADDR
// if not tmp then
31471: LD_VAR 0 2
31475: NOT
31476: IFFALSE 31480
// exit ;
31478: GO 31509
// for i in tmp do
31480: LD_ADDR_VAR 0 1
31484: PUSH
31485: LD_VAR 0 2
31489: PUSH
31490: FOR_IN
31491: IFFALSE 31507
// SetLives ( i , 600 ) ;
31493: LD_VAR 0 1
31497: PPUSH
31498: LD_INT 600
31500: PPUSH
31501: CALL_OW 234
31505: GO 31490
31507: POP
31508: POP
// end ;
31509: PPOPN 2
31511: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31512: LD_INT 0
31514: PPUSH
// case cmd of 301 :
31515: LD_VAR 0 1
31519: PUSH
31520: LD_INT 301
31522: DOUBLE
31523: EQUAL
31524: IFTRUE 31528
31526: GO 31560
31528: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31529: LD_VAR 0 6
31533: PPUSH
31534: LD_VAR 0 7
31538: PPUSH
31539: LD_VAR 0 8
31543: PPUSH
31544: LD_VAR 0 4
31548: PPUSH
31549: LD_VAR 0 5
31553: PPUSH
31554: CALL 32761 0 5
31558: GO 31681
31560: LD_INT 302
31562: DOUBLE
31563: EQUAL
31564: IFTRUE 31568
31566: GO 31605
31568: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31569: LD_VAR 0 6
31573: PPUSH
31574: LD_VAR 0 7
31578: PPUSH
31579: LD_VAR 0 8
31583: PPUSH
31584: LD_VAR 0 9
31588: PPUSH
31589: LD_VAR 0 4
31593: PPUSH
31594: LD_VAR 0 5
31598: PPUSH
31599: CALL 32852 0 6
31603: GO 31681
31605: LD_INT 303
31607: DOUBLE
31608: EQUAL
31609: IFTRUE 31613
31611: GO 31650
31613: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31614: LD_VAR 0 6
31618: PPUSH
31619: LD_VAR 0 7
31623: PPUSH
31624: LD_VAR 0 8
31628: PPUSH
31629: LD_VAR 0 9
31633: PPUSH
31634: LD_VAR 0 4
31638: PPUSH
31639: LD_VAR 0 5
31643: PPUSH
31644: CALL 31686 0 6
31648: GO 31681
31650: LD_INT 304
31652: DOUBLE
31653: EQUAL
31654: IFTRUE 31658
31656: GO 31680
31658: POP
// hHackTeleport ( unit , x , y ) ; end ;
31659: LD_VAR 0 2
31663: PPUSH
31664: LD_VAR 0 4
31668: PPUSH
31669: LD_VAR 0 5
31673: PPUSH
31674: CALL 33445 0 3
31678: GO 31681
31680: POP
// end ;
31681: LD_VAR 0 12
31685: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31686: LD_INT 0
31688: PPUSH
31689: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31690: LD_VAR 0 1
31694: PUSH
31695: LD_INT 1
31697: LESS
31698: PUSH
31699: LD_VAR 0 1
31703: PUSH
31704: LD_INT 3
31706: GREATER
31707: OR
31708: PUSH
31709: LD_VAR 0 5
31713: PPUSH
31714: LD_VAR 0 6
31718: PPUSH
31719: CALL_OW 428
31723: OR
31724: IFFALSE 31728
// exit ;
31726: GO 32448
// uc_side := your_side ;
31728: LD_ADDR_OWVAR 20
31732: PUSH
31733: LD_OWVAR 2
31737: ST_TO_ADDR
// uc_nation := nation ;
31738: LD_ADDR_OWVAR 21
31742: PUSH
31743: LD_VAR 0 1
31747: ST_TO_ADDR
// bc_level = 1 ;
31748: LD_ADDR_OWVAR 43
31752: PUSH
31753: LD_INT 1
31755: ST_TO_ADDR
// case btype of 1 :
31756: LD_VAR 0 2
31760: PUSH
31761: LD_INT 1
31763: DOUBLE
31764: EQUAL
31765: IFTRUE 31769
31767: GO 31780
31769: POP
// bc_type := b_depot ; 2 :
31770: LD_ADDR_OWVAR 42
31774: PUSH
31775: LD_INT 0
31777: ST_TO_ADDR
31778: GO 32392
31780: LD_INT 2
31782: DOUBLE
31783: EQUAL
31784: IFTRUE 31788
31786: GO 31799
31788: POP
// bc_type := b_warehouse ; 3 :
31789: LD_ADDR_OWVAR 42
31793: PUSH
31794: LD_INT 1
31796: ST_TO_ADDR
31797: GO 32392
31799: LD_INT 3
31801: DOUBLE
31802: EQUAL
31803: IFTRUE 31807
31805: GO 31818
31807: POP
// bc_type := b_lab ; 4 .. 9 :
31808: LD_ADDR_OWVAR 42
31812: PUSH
31813: LD_INT 6
31815: ST_TO_ADDR
31816: GO 32392
31818: LD_INT 4
31820: DOUBLE
31821: GREATEREQUAL
31822: IFFALSE 31830
31824: LD_INT 9
31826: DOUBLE
31827: LESSEQUAL
31828: IFTRUE 31832
31830: GO 31884
31832: POP
// begin bc_type := b_lab_half ;
31833: LD_ADDR_OWVAR 42
31837: PUSH
31838: LD_INT 7
31840: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31841: LD_ADDR_OWVAR 44
31845: PUSH
31846: LD_INT 10
31848: PUSH
31849: LD_INT 11
31851: PUSH
31852: LD_INT 12
31854: PUSH
31855: LD_INT 15
31857: PUSH
31858: LD_INT 14
31860: PUSH
31861: LD_INT 13
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: PUSH
31872: LD_VAR 0 2
31876: PUSH
31877: LD_INT 3
31879: MINUS
31880: ARRAY
31881: ST_TO_ADDR
// end ; 10 .. 13 :
31882: GO 32392
31884: LD_INT 10
31886: DOUBLE
31887: GREATEREQUAL
31888: IFFALSE 31896
31890: LD_INT 13
31892: DOUBLE
31893: LESSEQUAL
31894: IFTRUE 31898
31896: GO 31975
31898: POP
// begin bc_type := b_lab_full ;
31899: LD_ADDR_OWVAR 42
31903: PUSH
31904: LD_INT 8
31906: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31907: LD_ADDR_OWVAR 44
31911: PUSH
31912: LD_INT 10
31914: PUSH
31915: LD_INT 12
31917: PUSH
31918: LD_INT 14
31920: PUSH
31921: LD_INT 13
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: PUSH
31930: LD_VAR 0 2
31934: PUSH
31935: LD_INT 9
31937: MINUS
31938: ARRAY
31939: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31940: LD_ADDR_OWVAR 45
31944: PUSH
31945: LD_INT 11
31947: PUSH
31948: LD_INT 15
31950: PUSH
31951: LD_INT 12
31953: PUSH
31954: LD_INT 15
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: PUSH
31963: LD_VAR 0 2
31967: PUSH
31968: LD_INT 9
31970: MINUS
31971: ARRAY
31972: ST_TO_ADDR
// end ; 14 :
31973: GO 32392
31975: LD_INT 14
31977: DOUBLE
31978: EQUAL
31979: IFTRUE 31983
31981: GO 31994
31983: POP
// bc_type := b_workshop ; 15 :
31984: LD_ADDR_OWVAR 42
31988: PUSH
31989: LD_INT 2
31991: ST_TO_ADDR
31992: GO 32392
31994: LD_INT 15
31996: DOUBLE
31997: EQUAL
31998: IFTRUE 32002
32000: GO 32013
32002: POP
// bc_type := b_factory ; 16 :
32003: LD_ADDR_OWVAR 42
32007: PUSH
32008: LD_INT 3
32010: ST_TO_ADDR
32011: GO 32392
32013: LD_INT 16
32015: DOUBLE
32016: EQUAL
32017: IFTRUE 32021
32019: GO 32032
32021: POP
// bc_type := b_ext_gun ; 17 :
32022: LD_ADDR_OWVAR 42
32026: PUSH
32027: LD_INT 17
32029: ST_TO_ADDR
32030: GO 32392
32032: LD_INT 17
32034: DOUBLE
32035: EQUAL
32036: IFTRUE 32040
32038: GO 32068
32040: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32041: LD_ADDR_OWVAR 42
32045: PUSH
32046: LD_INT 19
32048: PUSH
32049: LD_INT 23
32051: PUSH
32052: LD_INT 19
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: LIST
32059: PUSH
32060: LD_VAR 0 1
32064: ARRAY
32065: ST_TO_ADDR
32066: GO 32392
32068: LD_INT 18
32070: DOUBLE
32071: EQUAL
32072: IFTRUE 32076
32074: GO 32087
32076: POP
// bc_type := b_ext_radar ; 19 :
32077: LD_ADDR_OWVAR 42
32081: PUSH
32082: LD_INT 20
32084: ST_TO_ADDR
32085: GO 32392
32087: LD_INT 19
32089: DOUBLE
32090: EQUAL
32091: IFTRUE 32095
32093: GO 32106
32095: POP
// bc_type := b_ext_radio ; 20 :
32096: LD_ADDR_OWVAR 42
32100: PUSH
32101: LD_INT 22
32103: ST_TO_ADDR
32104: GO 32392
32106: LD_INT 20
32108: DOUBLE
32109: EQUAL
32110: IFTRUE 32114
32112: GO 32125
32114: POP
// bc_type := b_ext_siberium ; 21 :
32115: LD_ADDR_OWVAR 42
32119: PUSH
32120: LD_INT 21
32122: ST_TO_ADDR
32123: GO 32392
32125: LD_INT 21
32127: DOUBLE
32128: EQUAL
32129: IFTRUE 32133
32131: GO 32144
32133: POP
// bc_type := b_ext_computer ; 22 :
32134: LD_ADDR_OWVAR 42
32138: PUSH
32139: LD_INT 24
32141: ST_TO_ADDR
32142: GO 32392
32144: LD_INT 22
32146: DOUBLE
32147: EQUAL
32148: IFTRUE 32152
32150: GO 32163
32152: POP
// bc_type := b_ext_track ; 23 :
32153: LD_ADDR_OWVAR 42
32157: PUSH
32158: LD_INT 16
32160: ST_TO_ADDR
32161: GO 32392
32163: LD_INT 23
32165: DOUBLE
32166: EQUAL
32167: IFTRUE 32171
32169: GO 32182
32171: POP
// bc_type := b_ext_laser ; 24 :
32172: LD_ADDR_OWVAR 42
32176: PUSH
32177: LD_INT 25
32179: ST_TO_ADDR
32180: GO 32392
32182: LD_INT 24
32184: DOUBLE
32185: EQUAL
32186: IFTRUE 32190
32188: GO 32201
32190: POP
// bc_type := b_control_tower ; 25 :
32191: LD_ADDR_OWVAR 42
32195: PUSH
32196: LD_INT 36
32198: ST_TO_ADDR
32199: GO 32392
32201: LD_INT 25
32203: DOUBLE
32204: EQUAL
32205: IFTRUE 32209
32207: GO 32220
32209: POP
// bc_type := b_breastwork ; 26 :
32210: LD_ADDR_OWVAR 42
32214: PUSH
32215: LD_INT 31
32217: ST_TO_ADDR
32218: GO 32392
32220: LD_INT 26
32222: DOUBLE
32223: EQUAL
32224: IFTRUE 32228
32226: GO 32239
32228: POP
// bc_type := b_bunker ; 27 :
32229: LD_ADDR_OWVAR 42
32233: PUSH
32234: LD_INT 32
32236: ST_TO_ADDR
32237: GO 32392
32239: LD_INT 27
32241: DOUBLE
32242: EQUAL
32243: IFTRUE 32247
32245: GO 32258
32247: POP
// bc_type := b_turret ; 28 :
32248: LD_ADDR_OWVAR 42
32252: PUSH
32253: LD_INT 33
32255: ST_TO_ADDR
32256: GO 32392
32258: LD_INT 28
32260: DOUBLE
32261: EQUAL
32262: IFTRUE 32266
32264: GO 32277
32266: POP
// bc_type := b_armoury ; 29 :
32267: LD_ADDR_OWVAR 42
32271: PUSH
32272: LD_INT 4
32274: ST_TO_ADDR
32275: GO 32392
32277: LD_INT 29
32279: DOUBLE
32280: EQUAL
32281: IFTRUE 32285
32283: GO 32296
32285: POP
// bc_type := b_barracks ; 30 :
32286: LD_ADDR_OWVAR 42
32290: PUSH
32291: LD_INT 5
32293: ST_TO_ADDR
32294: GO 32392
32296: LD_INT 30
32298: DOUBLE
32299: EQUAL
32300: IFTRUE 32304
32302: GO 32315
32304: POP
// bc_type := b_solar_power ; 31 :
32305: LD_ADDR_OWVAR 42
32309: PUSH
32310: LD_INT 27
32312: ST_TO_ADDR
32313: GO 32392
32315: LD_INT 31
32317: DOUBLE
32318: EQUAL
32319: IFTRUE 32323
32321: GO 32334
32323: POP
// bc_type := b_oil_power ; 32 :
32324: LD_ADDR_OWVAR 42
32328: PUSH
32329: LD_INT 26
32331: ST_TO_ADDR
32332: GO 32392
32334: LD_INT 32
32336: DOUBLE
32337: EQUAL
32338: IFTRUE 32342
32340: GO 32353
32342: POP
// bc_type := b_siberite_power ; 33 :
32343: LD_ADDR_OWVAR 42
32347: PUSH
32348: LD_INT 28
32350: ST_TO_ADDR
32351: GO 32392
32353: LD_INT 33
32355: DOUBLE
32356: EQUAL
32357: IFTRUE 32361
32359: GO 32372
32361: POP
// bc_type := b_oil_mine ; 34 :
32362: LD_ADDR_OWVAR 42
32366: PUSH
32367: LD_INT 29
32369: ST_TO_ADDR
32370: GO 32392
32372: LD_INT 34
32374: DOUBLE
32375: EQUAL
32376: IFTRUE 32380
32378: GO 32391
32380: POP
// bc_type := b_siberite_mine ; end ;
32381: LD_ADDR_OWVAR 42
32385: PUSH
32386: LD_INT 30
32388: ST_TO_ADDR
32389: GO 32392
32391: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32392: LD_ADDR_VAR 0 8
32396: PUSH
32397: LD_VAR 0 5
32401: PPUSH
32402: LD_VAR 0 6
32406: PPUSH
32407: LD_VAR 0 3
32411: PPUSH
32412: CALL_OW 47
32416: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32417: LD_OWVAR 42
32421: PUSH
32422: LD_INT 32
32424: PUSH
32425: LD_INT 33
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: IN
32432: IFFALSE 32448
// PlaceWeaponTurret ( b , weapon ) ;
32434: LD_VAR 0 8
32438: PPUSH
32439: LD_VAR 0 4
32443: PPUSH
32444: CALL_OW 431
// end ;
32448: LD_VAR 0 7
32452: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32453: LD_INT 0
32455: PPUSH
32456: PPUSH
32457: PPUSH
32458: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32459: LD_ADDR_VAR 0 4
32463: PUSH
32464: LD_INT 22
32466: PUSH
32467: LD_OWVAR 2
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 2
32478: PUSH
32479: LD_INT 30
32481: PUSH
32482: LD_INT 0
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 30
32491: PUSH
32492: LD_INT 1
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: LIST
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PPUSH
32508: CALL_OW 69
32512: ST_TO_ADDR
// if not tmp then
32513: LD_VAR 0 4
32517: NOT
32518: IFFALSE 32522
// exit ;
32520: GO 32581
// for i in tmp do
32522: LD_ADDR_VAR 0 2
32526: PUSH
32527: LD_VAR 0 4
32531: PUSH
32532: FOR_IN
32533: IFFALSE 32579
// for j = 1 to 3 do
32535: LD_ADDR_VAR 0 3
32539: PUSH
32540: DOUBLE
32541: LD_INT 1
32543: DEC
32544: ST_TO_ADDR
32545: LD_INT 3
32547: PUSH
32548: FOR_TO
32549: IFFALSE 32575
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32551: LD_VAR 0 2
32555: PPUSH
32556: CALL_OW 274
32560: PPUSH
32561: LD_VAR 0 3
32565: PPUSH
32566: LD_INT 99999
32568: PPUSH
32569: CALL_OW 277
32573: GO 32548
32575: POP
32576: POP
32577: GO 32532
32579: POP
32580: POP
// end ;
32581: LD_VAR 0 1
32585: RET
// export function hHackSetLevel10 ; var i , j ; begin
32586: LD_INT 0
32588: PPUSH
32589: PPUSH
32590: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32591: LD_ADDR_VAR 0 2
32595: PUSH
32596: LD_INT 21
32598: PUSH
32599: LD_INT 1
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PPUSH
32606: CALL_OW 69
32610: PUSH
32611: FOR_IN
32612: IFFALSE 32664
// if IsSelected ( i ) then
32614: LD_VAR 0 2
32618: PPUSH
32619: CALL_OW 306
32623: IFFALSE 32662
// begin for j := 1 to 4 do
32625: LD_ADDR_VAR 0 3
32629: PUSH
32630: DOUBLE
32631: LD_INT 1
32633: DEC
32634: ST_TO_ADDR
32635: LD_INT 4
32637: PUSH
32638: FOR_TO
32639: IFFALSE 32660
// SetSkill ( i , j , 10 ) ;
32641: LD_VAR 0 2
32645: PPUSH
32646: LD_VAR 0 3
32650: PPUSH
32651: LD_INT 10
32653: PPUSH
32654: CALL_OW 237
32658: GO 32638
32660: POP
32661: POP
// end ;
32662: GO 32611
32664: POP
32665: POP
// end ;
32666: LD_VAR 0 1
32670: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32671: LD_INT 0
32673: PPUSH
32674: PPUSH
32675: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32676: LD_ADDR_VAR 0 2
32680: PUSH
32681: LD_INT 22
32683: PUSH
32684: LD_OWVAR 2
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 21
32695: PUSH
32696: LD_INT 1
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PPUSH
32707: CALL_OW 69
32711: PUSH
32712: FOR_IN
32713: IFFALSE 32754
// begin for j := 1 to 4 do
32715: LD_ADDR_VAR 0 3
32719: PUSH
32720: DOUBLE
32721: LD_INT 1
32723: DEC
32724: ST_TO_ADDR
32725: LD_INT 4
32727: PUSH
32728: FOR_TO
32729: IFFALSE 32750
// SetSkill ( i , j , 10 ) ;
32731: LD_VAR 0 2
32735: PPUSH
32736: LD_VAR 0 3
32740: PPUSH
32741: LD_INT 10
32743: PPUSH
32744: CALL_OW 237
32748: GO 32728
32750: POP
32751: POP
// end ;
32752: GO 32712
32754: POP
32755: POP
// end ;
32756: LD_VAR 0 1
32760: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32761: LD_INT 0
32763: PPUSH
// uc_side := your_side ;
32764: LD_ADDR_OWVAR 20
32768: PUSH
32769: LD_OWVAR 2
32773: ST_TO_ADDR
// uc_nation := nation ;
32774: LD_ADDR_OWVAR 21
32778: PUSH
32779: LD_VAR 0 1
32783: ST_TO_ADDR
// InitHc ;
32784: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32788: LD_INT 0
32790: PPUSH
32791: LD_VAR 0 2
32795: PPUSH
32796: LD_VAR 0 3
32800: PPUSH
32801: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32805: LD_VAR 0 4
32809: PPUSH
32810: LD_VAR 0 5
32814: PPUSH
32815: CALL_OW 428
32819: PUSH
32820: LD_INT 0
32822: EQUAL
32823: IFFALSE 32847
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32825: CALL_OW 44
32829: PPUSH
32830: LD_VAR 0 4
32834: PPUSH
32835: LD_VAR 0 5
32839: PPUSH
32840: LD_INT 1
32842: PPUSH
32843: CALL_OW 48
// end ;
32847: LD_VAR 0 6
32851: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32852: LD_INT 0
32854: PPUSH
32855: PPUSH
// uc_side := your_side ;
32856: LD_ADDR_OWVAR 20
32860: PUSH
32861: LD_OWVAR 2
32865: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32866: LD_VAR 0 1
32870: PUSH
32871: LD_INT 1
32873: PUSH
32874: LD_INT 2
32876: PUSH
32877: LD_INT 3
32879: PUSH
32880: LD_INT 4
32882: PUSH
32883: LD_INT 5
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: IN
32893: IFFALSE 32905
// uc_nation := nation_american else
32895: LD_ADDR_OWVAR 21
32899: PUSH
32900: LD_INT 1
32902: ST_TO_ADDR
32903: GO 32948
// if chassis in [ 11 , 12 , 13 , 14 ] then
32905: LD_VAR 0 1
32909: PUSH
32910: LD_INT 11
32912: PUSH
32913: LD_INT 12
32915: PUSH
32916: LD_INT 13
32918: PUSH
32919: LD_INT 14
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: IN
32928: IFFALSE 32940
// uc_nation := nation_arabian else
32930: LD_ADDR_OWVAR 21
32934: PUSH
32935: LD_INT 2
32937: ST_TO_ADDR
32938: GO 32948
// uc_nation := nation_russian ;
32940: LD_ADDR_OWVAR 21
32944: PUSH
32945: LD_INT 3
32947: ST_TO_ADDR
// vc_chassis := chassis ;
32948: LD_ADDR_OWVAR 37
32952: PUSH
32953: LD_VAR 0 1
32957: ST_TO_ADDR
// vc_engine := engine ;
32958: LD_ADDR_OWVAR 39
32962: PUSH
32963: LD_VAR 0 2
32967: ST_TO_ADDR
// vc_control := control ;
32968: LD_ADDR_OWVAR 38
32972: PUSH
32973: LD_VAR 0 3
32977: ST_TO_ADDR
// vc_weapon := weapon ;
32978: LD_ADDR_OWVAR 40
32982: PUSH
32983: LD_VAR 0 4
32987: ST_TO_ADDR
// un := CreateVehicle ;
32988: LD_ADDR_VAR 0 8
32992: PUSH
32993: CALL_OW 45
32997: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32998: LD_VAR 0 8
33002: PPUSH
33003: LD_INT 0
33005: PPUSH
33006: LD_INT 5
33008: PPUSH
33009: CALL_OW 12
33013: PPUSH
33014: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33018: LD_VAR 0 8
33022: PPUSH
33023: LD_VAR 0 5
33027: PPUSH
33028: LD_VAR 0 6
33032: PPUSH
33033: LD_INT 1
33035: PPUSH
33036: CALL_OW 48
// end ;
33040: LD_VAR 0 7
33044: RET
// export hInvincible ; every 1 do
33045: GO 33047
33047: DISABLE
// hInvincible := [ ] ;
33048: LD_ADDR_EXP 131
33052: PUSH
33053: EMPTY
33054: ST_TO_ADDR
33055: END
// every 10 do var i ;
33056: GO 33058
33058: DISABLE
33059: LD_INT 0
33061: PPUSH
// begin enable ;
33062: ENABLE
// if not hInvincible then
33063: LD_EXP 131
33067: NOT
33068: IFFALSE 33072
// exit ;
33070: GO 33116
// for i in hInvincible do
33072: LD_ADDR_VAR 0 1
33076: PUSH
33077: LD_EXP 131
33081: PUSH
33082: FOR_IN
33083: IFFALSE 33114
// if GetLives ( i ) < 1000 then
33085: LD_VAR 0 1
33089: PPUSH
33090: CALL_OW 256
33094: PUSH
33095: LD_INT 1000
33097: LESS
33098: IFFALSE 33112
// SetLives ( i , 1000 ) ;
33100: LD_VAR 0 1
33104: PPUSH
33105: LD_INT 1000
33107: PPUSH
33108: CALL_OW 234
33112: GO 33082
33114: POP
33115: POP
// end ;
33116: PPOPN 1
33118: END
// export function hHackInvincible ; var i ; begin
33119: LD_INT 0
33121: PPUSH
33122: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33123: LD_ADDR_VAR 0 2
33127: PUSH
33128: LD_INT 2
33130: PUSH
33131: LD_INT 21
33133: PUSH
33134: LD_INT 1
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 21
33143: PUSH
33144: LD_INT 2
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: LIST
33155: PPUSH
33156: CALL_OW 69
33160: PUSH
33161: FOR_IN
33162: IFFALSE 33223
// if IsSelected ( i ) then
33164: LD_VAR 0 2
33168: PPUSH
33169: CALL_OW 306
33173: IFFALSE 33221
// begin if i in hInvincible then
33175: LD_VAR 0 2
33179: PUSH
33180: LD_EXP 131
33184: IN
33185: IFFALSE 33205
// hInvincible := hInvincible diff i else
33187: LD_ADDR_EXP 131
33191: PUSH
33192: LD_EXP 131
33196: PUSH
33197: LD_VAR 0 2
33201: DIFF
33202: ST_TO_ADDR
33203: GO 33221
// hInvincible := hInvincible union i ;
33205: LD_ADDR_EXP 131
33209: PUSH
33210: LD_EXP 131
33214: PUSH
33215: LD_VAR 0 2
33219: UNION
33220: ST_TO_ADDR
// end ;
33221: GO 33161
33223: POP
33224: POP
// end ;
33225: LD_VAR 0 1
33229: RET
// export function hHackInvisible ; var i , j ; begin
33230: LD_INT 0
33232: PPUSH
33233: PPUSH
33234: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33235: LD_ADDR_VAR 0 2
33239: PUSH
33240: LD_INT 21
33242: PUSH
33243: LD_INT 1
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PPUSH
33250: CALL_OW 69
33254: PUSH
33255: FOR_IN
33256: IFFALSE 33280
// if IsSelected ( i ) then
33258: LD_VAR 0 2
33262: PPUSH
33263: CALL_OW 306
33267: IFFALSE 33278
// ComForceInvisible ( i ) ;
33269: LD_VAR 0 2
33273: PPUSH
33274: CALL_OW 496
33278: GO 33255
33280: POP
33281: POP
// end ;
33282: LD_VAR 0 1
33286: RET
// export function hHackChangeYourSide ; begin
33287: LD_INT 0
33289: PPUSH
// if your_side = 8 then
33290: LD_OWVAR 2
33294: PUSH
33295: LD_INT 8
33297: EQUAL
33298: IFFALSE 33310
// your_side := 0 else
33300: LD_ADDR_OWVAR 2
33304: PUSH
33305: LD_INT 0
33307: ST_TO_ADDR
33308: GO 33324
// your_side := your_side + 1 ;
33310: LD_ADDR_OWVAR 2
33314: PUSH
33315: LD_OWVAR 2
33319: PUSH
33320: LD_INT 1
33322: PLUS
33323: ST_TO_ADDR
// end ;
33324: LD_VAR 0 1
33328: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33329: LD_INT 0
33331: PPUSH
33332: PPUSH
33333: PPUSH
// for i in all_units do
33334: LD_ADDR_VAR 0 2
33338: PUSH
33339: LD_OWVAR 3
33343: PUSH
33344: FOR_IN
33345: IFFALSE 33423
// if IsSelected ( i ) then
33347: LD_VAR 0 2
33351: PPUSH
33352: CALL_OW 306
33356: IFFALSE 33421
// begin j := GetSide ( i ) ;
33358: LD_ADDR_VAR 0 3
33362: PUSH
33363: LD_VAR 0 2
33367: PPUSH
33368: CALL_OW 255
33372: ST_TO_ADDR
// if j = 8 then
33373: LD_VAR 0 3
33377: PUSH
33378: LD_INT 8
33380: EQUAL
33381: IFFALSE 33393
// j := 0 else
33383: LD_ADDR_VAR 0 3
33387: PUSH
33388: LD_INT 0
33390: ST_TO_ADDR
33391: GO 33407
// j := j + 1 ;
33393: LD_ADDR_VAR 0 3
33397: PUSH
33398: LD_VAR 0 3
33402: PUSH
33403: LD_INT 1
33405: PLUS
33406: ST_TO_ADDR
// SetSide ( i , j ) ;
33407: LD_VAR 0 2
33411: PPUSH
33412: LD_VAR 0 3
33416: PPUSH
33417: CALL_OW 235
// end ;
33421: GO 33344
33423: POP
33424: POP
// end ;
33425: LD_VAR 0 1
33429: RET
// export function hHackFog ; begin
33430: LD_INT 0
33432: PPUSH
// FogOff ( true ) ;
33433: LD_INT 1
33435: PPUSH
33436: CALL_OW 344
// end ;
33440: LD_VAR 0 1
33444: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33445: LD_INT 0
33447: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33448: LD_VAR 0 1
33452: PPUSH
33453: LD_VAR 0 2
33457: PPUSH
33458: LD_VAR 0 3
33462: PPUSH
33463: LD_INT 1
33465: PPUSH
33466: LD_INT 1
33468: PPUSH
33469: CALL_OW 483
// CenterOnXY ( x , y ) ;
33473: LD_VAR 0 2
33477: PPUSH
33478: LD_VAR 0 3
33482: PPUSH
33483: CALL_OW 84
// end ; end_of_file end_of_file
33487: LD_VAR 0 4
33491: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33492: LD_INT 0
33494: PPUSH
33495: PPUSH
// if exist_mode then
33496: LD_VAR 0 2
33500: IFFALSE 33525
// unit := CreateCharacter ( prefix & ident ) else
33502: LD_ADDR_VAR 0 5
33506: PUSH
33507: LD_VAR 0 3
33511: PUSH
33512: LD_VAR 0 1
33516: STR
33517: PPUSH
33518: CALL_OW 34
33522: ST_TO_ADDR
33523: GO 33540
// unit := NewCharacter ( ident ) ;
33525: LD_ADDR_VAR 0 5
33529: PUSH
33530: LD_VAR 0 1
33534: PPUSH
33535: CALL_OW 25
33539: ST_TO_ADDR
// result := unit ;
33540: LD_ADDR_VAR 0 4
33544: PUSH
33545: LD_VAR 0 5
33549: ST_TO_ADDR
// end ;
33550: LD_VAR 0 4
33554: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33555: LD_INT 0
33557: PPUSH
33558: PPUSH
// if not side or not nation then
33559: LD_VAR 0 1
33563: NOT
33564: PUSH
33565: LD_VAR 0 2
33569: NOT
33570: OR
33571: IFFALSE 33575
// exit ;
33573: GO 34343
// case nation of nation_american :
33575: LD_VAR 0 2
33579: PUSH
33580: LD_INT 1
33582: DOUBLE
33583: EQUAL
33584: IFTRUE 33588
33586: GO 33802
33588: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33589: LD_ADDR_VAR 0 4
33593: PUSH
33594: LD_INT 35
33596: PUSH
33597: LD_INT 45
33599: PUSH
33600: LD_INT 46
33602: PUSH
33603: LD_INT 47
33605: PUSH
33606: LD_INT 82
33608: PUSH
33609: LD_INT 83
33611: PUSH
33612: LD_INT 84
33614: PUSH
33615: LD_INT 85
33617: PUSH
33618: LD_INT 86
33620: PUSH
33621: LD_INT 1
33623: PUSH
33624: LD_INT 2
33626: PUSH
33627: LD_INT 6
33629: PUSH
33630: LD_INT 15
33632: PUSH
33633: LD_INT 16
33635: PUSH
33636: LD_INT 7
33638: PUSH
33639: LD_INT 12
33641: PUSH
33642: LD_INT 13
33644: PUSH
33645: LD_INT 10
33647: PUSH
33648: LD_INT 14
33650: PUSH
33651: LD_INT 20
33653: PUSH
33654: LD_INT 21
33656: PUSH
33657: LD_INT 22
33659: PUSH
33660: LD_INT 25
33662: PUSH
33663: LD_INT 32
33665: PUSH
33666: LD_INT 27
33668: PUSH
33669: LD_INT 36
33671: PUSH
33672: LD_INT 69
33674: PUSH
33675: LD_INT 39
33677: PUSH
33678: LD_INT 34
33680: PUSH
33681: LD_INT 40
33683: PUSH
33684: LD_INT 48
33686: PUSH
33687: LD_INT 49
33689: PUSH
33690: LD_INT 50
33692: PUSH
33693: LD_INT 51
33695: PUSH
33696: LD_INT 52
33698: PUSH
33699: LD_INT 53
33701: PUSH
33702: LD_INT 54
33704: PUSH
33705: LD_INT 55
33707: PUSH
33708: LD_INT 56
33710: PUSH
33711: LD_INT 57
33713: PUSH
33714: LD_INT 58
33716: PUSH
33717: LD_INT 59
33719: PUSH
33720: LD_INT 60
33722: PUSH
33723: LD_INT 61
33725: PUSH
33726: LD_INT 62
33728: PUSH
33729: LD_INT 80
33731: PUSH
33732: LD_INT 82
33734: PUSH
33735: LD_INT 83
33737: PUSH
33738: LD_INT 84
33740: PUSH
33741: LD_INT 85
33743: PUSH
33744: LD_INT 86
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: ST_TO_ADDR
33800: GO 34267
33802: LD_INT 2
33804: DOUBLE
33805: EQUAL
33806: IFTRUE 33810
33808: GO 34036
33810: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33811: LD_ADDR_VAR 0 4
33815: PUSH
33816: LD_INT 35
33818: PUSH
33819: LD_INT 45
33821: PUSH
33822: LD_INT 46
33824: PUSH
33825: LD_INT 47
33827: PUSH
33828: LD_INT 82
33830: PUSH
33831: LD_INT 83
33833: PUSH
33834: LD_INT 84
33836: PUSH
33837: LD_INT 85
33839: PUSH
33840: LD_INT 87
33842: PUSH
33843: LD_INT 70
33845: PUSH
33846: LD_INT 1
33848: PUSH
33849: LD_INT 11
33851: PUSH
33852: LD_INT 3
33854: PUSH
33855: LD_INT 4
33857: PUSH
33858: LD_INT 5
33860: PUSH
33861: LD_INT 6
33863: PUSH
33864: LD_INT 15
33866: PUSH
33867: LD_INT 18
33869: PUSH
33870: LD_INT 7
33872: PUSH
33873: LD_INT 17
33875: PUSH
33876: LD_INT 8
33878: PUSH
33879: LD_INT 20
33881: PUSH
33882: LD_INT 21
33884: PUSH
33885: LD_INT 22
33887: PUSH
33888: LD_INT 72
33890: PUSH
33891: LD_INT 26
33893: PUSH
33894: LD_INT 69
33896: PUSH
33897: LD_INT 39
33899: PUSH
33900: LD_INT 40
33902: PUSH
33903: LD_INT 41
33905: PUSH
33906: LD_INT 42
33908: PUSH
33909: LD_INT 43
33911: PUSH
33912: LD_INT 48
33914: PUSH
33915: LD_INT 49
33917: PUSH
33918: LD_INT 50
33920: PUSH
33921: LD_INT 51
33923: PUSH
33924: LD_INT 52
33926: PUSH
33927: LD_INT 53
33929: PUSH
33930: LD_INT 54
33932: PUSH
33933: LD_INT 55
33935: PUSH
33936: LD_INT 56
33938: PUSH
33939: LD_INT 60
33941: PUSH
33942: LD_INT 61
33944: PUSH
33945: LD_INT 62
33947: PUSH
33948: LD_INT 66
33950: PUSH
33951: LD_INT 67
33953: PUSH
33954: LD_INT 68
33956: PUSH
33957: LD_INT 81
33959: PUSH
33960: LD_INT 82
33962: PUSH
33963: LD_INT 83
33965: PUSH
33966: LD_INT 84
33968: PUSH
33969: LD_INT 85
33971: PUSH
33972: LD_INT 87
33974: PUSH
33975: LD_INT 88
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: ST_TO_ADDR
34034: GO 34267
34036: LD_INT 3
34038: DOUBLE
34039: EQUAL
34040: IFTRUE 34044
34042: GO 34266
34044: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
34045: LD_ADDR_VAR 0 4
34049: PUSH
34050: LD_INT 46
34052: PUSH
34053: LD_INT 47
34055: PUSH
34056: LD_INT 1
34058: PUSH
34059: LD_INT 2
34061: PUSH
34062: LD_INT 82
34064: PUSH
34065: LD_INT 83
34067: PUSH
34068: LD_INT 84
34070: PUSH
34071: LD_INT 85
34073: PUSH
34074: LD_INT 86
34076: PUSH
34077: LD_INT 11
34079: PUSH
34080: LD_INT 9
34082: PUSH
34083: LD_INT 20
34085: PUSH
34086: LD_INT 19
34088: PUSH
34089: LD_INT 21
34091: PUSH
34092: LD_INT 24
34094: PUSH
34095: LD_INT 22
34097: PUSH
34098: LD_INT 25
34100: PUSH
34101: LD_INT 28
34103: PUSH
34104: LD_INT 29
34106: PUSH
34107: LD_INT 30
34109: PUSH
34110: LD_INT 31
34112: PUSH
34113: LD_INT 37
34115: PUSH
34116: LD_INT 38
34118: PUSH
34119: LD_INT 32
34121: PUSH
34122: LD_INT 27
34124: PUSH
34125: LD_INT 33
34127: PUSH
34128: LD_INT 69
34130: PUSH
34131: LD_INT 39
34133: PUSH
34134: LD_INT 34
34136: PUSH
34137: LD_INT 40
34139: PUSH
34140: LD_INT 71
34142: PUSH
34143: LD_INT 23
34145: PUSH
34146: LD_INT 44
34148: PUSH
34149: LD_INT 48
34151: PUSH
34152: LD_INT 49
34154: PUSH
34155: LD_INT 50
34157: PUSH
34158: LD_INT 51
34160: PUSH
34161: LD_INT 52
34163: PUSH
34164: LD_INT 53
34166: PUSH
34167: LD_INT 54
34169: PUSH
34170: LD_INT 55
34172: PUSH
34173: LD_INT 56
34175: PUSH
34176: LD_INT 57
34178: PUSH
34179: LD_INT 58
34181: PUSH
34182: LD_INT 59
34184: PUSH
34185: LD_INT 63
34187: PUSH
34188: LD_INT 64
34190: PUSH
34191: LD_INT 65
34193: PUSH
34194: LD_INT 82
34196: PUSH
34197: LD_INT 83
34199: PUSH
34200: LD_INT 84
34202: PUSH
34203: LD_INT 85
34205: PUSH
34206: LD_INT 86
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: ST_TO_ADDR
34264: GO 34267
34266: POP
// if state > - 1 and state < 3 then
34267: LD_VAR 0 3
34271: PUSH
34272: LD_INT 1
34274: NEG
34275: GREATER
34276: PUSH
34277: LD_VAR 0 3
34281: PUSH
34282: LD_INT 3
34284: LESS
34285: AND
34286: IFFALSE 34343
// for i in result do
34288: LD_ADDR_VAR 0 5
34292: PUSH
34293: LD_VAR 0 4
34297: PUSH
34298: FOR_IN
34299: IFFALSE 34341
// if GetTech ( i , side ) <> state then
34301: LD_VAR 0 5
34305: PPUSH
34306: LD_VAR 0 1
34310: PPUSH
34311: CALL_OW 321
34315: PUSH
34316: LD_VAR 0 3
34320: NONEQUAL
34321: IFFALSE 34339
// result := result diff i ;
34323: LD_ADDR_VAR 0 4
34327: PUSH
34328: LD_VAR 0 4
34332: PUSH
34333: LD_VAR 0 5
34337: DIFF
34338: ST_TO_ADDR
34339: GO 34298
34341: POP
34342: POP
// end ;
34343: LD_VAR 0 4
34347: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34348: LD_INT 0
34350: PPUSH
34351: PPUSH
34352: PPUSH
// result := true ;
34353: LD_ADDR_VAR 0 3
34357: PUSH
34358: LD_INT 1
34360: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34361: LD_ADDR_VAR 0 5
34365: PUSH
34366: LD_VAR 0 2
34370: PPUSH
34371: CALL_OW 480
34375: ST_TO_ADDR
// if not tmp then
34376: LD_VAR 0 5
34380: NOT
34381: IFFALSE 34385
// exit ;
34383: GO 34434
// for i in tmp do
34385: LD_ADDR_VAR 0 4
34389: PUSH
34390: LD_VAR 0 5
34394: PUSH
34395: FOR_IN
34396: IFFALSE 34432
// if GetTech ( i , side ) <> state_researched then
34398: LD_VAR 0 4
34402: PPUSH
34403: LD_VAR 0 1
34407: PPUSH
34408: CALL_OW 321
34412: PUSH
34413: LD_INT 2
34415: NONEQUAL
34416: IFFALSE 34430
// begin result := false ;
34418: LD_ADDR_VAR 0 3
34422: PUSH
34423: LD_INT 0
34425: ST_TO_ADDR
// exit ;
34426: POP
34427: POP
34428: GO 34434
// end ;
34430: GO 34395
34432: POP
34433: POP
// end ;
34434: LD_VAR 0 3
34438: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34439: LD_INT 0
34441: PPUSH
34442: PPUSH
34443: PPUSH
34444: PPUSH
34445: PPUSH
34446: PPUSH
34447: PPUSH
34448: PPUSH
34449: PPUSH
34450: PPUSH
34451: PPUSH
34452: PPUSH
34453: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34454: LD_VAR 0 1
34458: NOT
34459: PUSH
34460: LD_VAR 0 1
34464: PPUSH
34465: CALL_OW 257
34469: PUSH
34470: LD_INT 9
34472: NONEQUAL
34473: OR
34474: IFFALSE 34478
// exit ;
34476: GO 35051
// side := GetSide ( unit ) ;
34478: LD_ADDR_VAR 0 9
34482: PUSH
34483: LD_VAR 0 1
34487: PPUSH
34488: CALL_OW 255
34492: ST_TO_ADDR
// tech_space := tech_spacanom ;
34493: LD_ADDR_VAR 0 12
34497: PUSH
34498: LD_INT 29
34500: ST_TO_ADDR
// tech_time := tech_taurad ;
34501: LD_ADDR_VAR 0 13
34505: PUSH
34506: LD_INT 28
34508: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34509: LD_ADDR_VAR 0 11
34513: PUSH
34514: LD_VAR 0 1
34518: PPUSH
34519: CALL_OW 310
34523: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34524: LD_VAR 0 11
34528: PPUSH
34529: CALL_OW 247
34533: PUSH
34534: LD_INT 2
34536: EQUAL
34537: IFFALSE 34541
// exit ;
34539: GO 35051
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34541: LD_ADDR_VAR 0 8
34545: PUSH
34546: LD_INT 81
34548: PUSH
34549: LD_VAR 0 9
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 3
34560: PUSH
34561: LD_INT 21
34563: PUSH
34564: LD_INT 3
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PPUSH
34579: CALL_OW 69
34583: ST_TO_ADDR
// if not tmp then
34584: LD_VAR 0 8
34588: NOT
34589: IFFALSE 34593
// exit ;
34591: GO 35051
// if in_unit then
34593: LD_VAR 0 11
34597: IFFALSE 34621
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34599: LD_ADDR_VAR 0 10
34603: PUSH
34604: LD_VAR 0 8
34608: PPUSH
34609: LD_VAR 0 11
34613: PPUSH
34614: CALL_OW 74
34618: ST_TO_ADDR
34619: GO 34641
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34621: LD_ADDR_VAR 0 10
34625: PUSH
34626: LD_VAR 0 8
34630: PPUSH
34631: LD_VAR 0 1
34635: PPUSH
34636: CALL_OW 74
34640: ST_TO_ADDR
// if not enemy then
34641: LD_VAR 0 10
34645: NOT
34646: IFFALSE 34650
// exit ;
34648: GO 35051
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34650: LD_VAR 0 11
34654: PUSH
34655: LD_VAR 0 11
34659: PPUSH
34660: LD_VAR 0 10
34664: PPUSH
34665: CALL_OW 296
34669: PUSH
34670: LD_INT 13
34672: GREATER
34673: AND
34674: PUSH
34675: LD_VAR 0 1
34679: PPUSH
34680: LD_VAR 0 10
34684: PPUSH
34685: CALL_OW 296
34689: PUSH
34690: LD_INT 12
34692: GREATER
34693: OR
34694: IFFALSE 34698
// exit ;
34696: GO 35051
// missile := [ 1 ] ;
34698: LD_ADDR_VAR 0 14
34702: PUSH
34703: LD_INT 1
34705: PUSH
34706: EMPTY
34707: LIST
34708: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34709: LD_VAR 0 9
34713: PPUSH
34714: LD_VAR 0 12
34718: PPUSH
34719: CALL_OW 325
34723: IFFALSE 34752
// missile := Replace ( missile , missile + 1 , 2 ) ;
34725: LD_ADDR_VAR 0 14
34729: PUSH
34730: LD_VAR 0 14
34734: PPUSH
34735: LD_VAR 0 14
34739: PUSH
34740: LD_INT 1
34742: PLUS
34743: PPUSH
34744: LD_INT 2
34746: PPUSH
34747: CALL_OW 1
34751: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34752: LD_VAR 0 9
34756: PPUSH
34757: LD_VAR 0 13
34761: PPUSH
34762: CALL_OW 325
34766: PUSH
34767: LD_VAR 0 10
34771: PPUSH
34772: CALL_OW 255
34776: PPUSH
34777: LD_VAR 0 13
34781: PPUSH
34782: CALL_OW 325
34786: NOT
34787: AND
34788: IFFALSE 34817
// missile := Replace ( missile , missile + 1 , 3 ) ;
34790: LD_ADDR_VAR 0 14
34794: PUSH
34795: LD_VAR 0 14
34799: PPUSH
34800: LD_VAR 0 14
34804: PUSH
34805: LD_INT 1
34807: PLUS
34808: PPUSH
34809: LD_INT 3
34811: PPUSH
34812: CALL_OW 1
34816: ST_TO_ADDR
// if missile < 2 then
34817: LD_VAR 0 14
34821: PUSH
34822: LD_INT 2
34824: LESS
34825: IFFALSE 34829
// exit ;
34827: GO 35051
// x := GetX ( enemy ) ;
34829: LD_ADDR_VAR 0 4
34833: PUSH
34834: LD_VAR 0 10
34838: PPUSH
34839: CALL_OW 250
34843: ST_TO_ADDR
// y := GetY ( enemy ) ;
34844: LD_ADDR_VAR 0 5
34848: PUSH
34849: LD_VAR 0 10
34853: PPUSH
34854: CALL_OW 251
34858: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34859: LD_ADDR_VAR 0 6
34863: PUSH
34864: LD_VAR 0 4
34868: PUSH
34869: LD_INT 1
34871: NEG
34872: PPUSH
34873: LD_INT 1
34875: PPUSH
34876: CALL_OW 12
34880: PLUS
34881: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34882: LD_ADDR_VAR 0 7
34886: PUSH
34887: LD_VAR 0 5
34891: PUSH
34892: LD_INT 1
34894: NEG
34895: PPUSH
34896: LD_INT 1
34898: PPUSH
34899: CALL_OW 12
34903: PLUS
34904: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34905: LD_VAR 0 6
34909: PPUSH
34910: LD_VAR 0 7
34914: PPUSH
34915: CALL_OW 488
34919: NOT
34920: IFFALSE 34942
// begin _x := x ;
34922: LD_ADDR_VAR 0 6
34926: PUSH
34927: LD_VAR 0 4
34931: ST_TO_ADDR
// _y := y ;
34932: LD_ADDR_VAR 0 7
34936: PUSH
34937: LD_VAR 0 5
34941: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34942: LD_ADDR_VAR 0 3
34946: PUSH
34947: LD_INT 1
34949: PPUSH
34950: LD_VAR 0 14
34954: PPUSH
34955: CALL_OW 12
34959: ST_TO_ADDR
// case i of 1 :
34960: LD_VAR 0 3
34964: PUSH
34965: LD_INT 1
34967: DOUBLE
34968: EQUAL
34969: IFTRUE 34973
34971: GO 34990
34973: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34974: LD_VAR 0 1
34978: PPUSH
34979: LD_VAR 0 10
34983: PPUSH
34984: CALL_OW 115
34988: GO 35051
34990: LD_INT 2
34992: DOUBLE
34993: EQUAL
34994: IFTRUE 34998
34996: GO 35020
34998: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34999: LD_VAR 0 1
35003: PPUSH
35004: LD_VAR 0 6
35008: PPUSH
35009: LD_VAR 0 7
35013: PPUSH
35014: CALL_OW 153
35018: GO 35051
35020: LD_INT 3
35022: DOUBLE
35023: EQUAL
35024: IFTRUE 35028
35026: GO 35050
35028: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35029: LD_VAR 0 1
35033: PPUSH
35034: LD_VAR 0 6
35038: PPUSH
35039: LD_VAR 0 7
35043: PPUSH
35044: CALL_OW 154
35048: GO 35051
35050: POP
// end ;
35051: LD_VAR 0 2
35055: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35056: LD_INT 0
35058: PPUSH
35059: PPUSH
35060: PPUSH
35061: PPUSH
35062: PPUSH
35063: PPUSH
// if not unit or not building then
35064: LD_VAR 0 1
35068: NOT
35069: PUSH
35070: LD_VAR 0 2
35074: NOT
35075: OR
35076: IFFALSE 35080
// exit ;
35078: GO 35238
// x := GetX ( building ) ;
35080: LD_ADDR_VAR 0 5
35084: PUSH
35085: LD_VAR 0 2
35089: PPUSH
35090: CALL_OW 250
35094: ST_TO_ADDR
// y := GetY ( building ) ;
35095: LD_ADDR_VAR 0 6
35099: PUSH
35100: LD_VAR 0 2
35104: PPUSH
35105: CALL_OW 251
35109: ST_TO_ADDR
// for i = 0 to 5 do
35110: LD_ADDR_VAR 0 4
35114: PUSH
35115: DOUBLE
35116: LD_INT 0
35118: DEC
35119: ST_TO_ADDR
35120: LD_INT 5
35122: PUSH
35123: FOR_TO
35124: IFFALSE 35236
// begin _x := ShiftX ( x , i , 3 ) ;
35126: LD_ADDR_VAR 0 7
35130: PUSH
35131: LD_VAR 0 5
35135: PPUSH
35136: LD_VAR 0 4
35140: PPUSH
35141: LD_INT 3
35143: PPUSH
35144: CALL_OW 272
35148: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35149: LD_ADDR_VAR 0 8
35153: PUSH
35154: LD_VAR 0 6
35158: PPUSH
35159: LD_VAR 0 4
35163: PPUSH
35164: LD_INT 3
35166: PPUSH
35167: CALL_OW 273
35171: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35172: LD_VAR 0 7
35176: PPUSH
35177: LD_VAR 0 8
35181: PPUSH
35182: CALL_OW 488
35186: NOT
35187: IFFALSE 35191
// continue ;
35189: GO 35123
// if HexInfo ( _x , _y ) = 0 then
35191: LD_VAR 0 7
35195: PPUSH
35196: LD_VAR 0 8
35200: PPUSH
35201: CALL_OW 428
35205: PUSH
35206: LD_INT 0
35208: EQUAL
35209: IFFALSE 35234
// begin ComMoveXY ( unit , _x , _y ) ;
35211: LD_VAR 0 1
35215: PPUSH
35216: LD_VAR 0 7
35220: PPUSH
35221: LD_VAR 0 8
35225: PPUSH
35226: CALL_OW 111
// exit ;
35230: POP
35231: POP
35232: GO 35238
// end ; end ;
35234: GO 35123
35236: POP
35237: POP
// end ;
35238: LD_VAR 0 3
35242: RET
// export function ScanBase ( side , base_area ) ; begin
35243: LD_INT 0
35245: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35246: LD_ADDR_VAR 0 3
35250: PUSH
35251: LD_VAR 0 2
35255: PPUSH
35256: LD_INT 81
35258: PUSH
35259: LD_VAR 0 1
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PPUSH
35268: CALL_OW 70
35272: ST_TO_ADDR
// end ;
35273: LD_VAR 0 3
35277: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35278: LD_INT 0
35280: PPUSH
35281: PPUSH
35282: PPUSH
35283: PPUSH
// result := false ;
35284: LD_ADDR_VAR 0 2
35288: PUSH
35289: LD_INT 0
35291: ST_TO_ADDR
// side := GetSide ( unit ) ;
35292: LD_ADDR_VAR 0 3
35296: PUSH
35297: LD_VAR 0 1
35301: PPUSH
35302: CALL_OW 255
35306: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35307: LD_ADDR_VAR 0 4
35311: PUSH
35312: LD_VAR 0 1
35316: PPUSH
35317: CALL_OW 248
35321: ST_TO_ADDR
// case nat of 1 :
35322: LD_VAR 0 4
35326: PUSH
35327: LD_INT 1
35329: DOUBLE
35330: EQUAL
35331: IFTRUE 35335
35333: GO 35346
35335: POP
// tech := tech_lassight ; 2 :
35336: LD_ADDR_VAR 0 5
35340: PUSH
35341: LD_INT 12
35343: ST_TO_ADDR
35344: GO 35385
35346: LD_INT 2
35348: DOUBLE
35349: EQUAL
35350: IFTRUE 35354
35352: GO 35365
35354: POP
// tech := tech_mortar ; 3 :
35355: LD_ADDR_VAR 0 5
35359: PUSH
35360: LD_INT 41
35362: ST_TO_ADDR
35363: GO 35385
35365: LD_INT 3
35367: DOUBLE
35368: EQUAL
35369: IFTRUE 35373
35371: GO 35384
35373: POP
// tech := tech_bazooka ; end ;
35374: LD_ADDR_VAR 0 5
35378: PUSH
35379: LD_INT 44
35381: ST_TO_ADDR
35382: GO 35385
35384: POP
// if Researched ( side , tech ) then
35385: LD_VAR 0 3
35389: PPUSH
35390: LD_VAR 0 5
35394: PPUSH
35395: CALL_OW 325
35399: IFFALSE 35426
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35401: LD_ADDR_VAR 0 2
35405: PUSH
35406: LD_INT 5
35408: PUSH
35409: LD_INT 8
35411: PUSH
35412: LD_INT 9
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: LIST
35419: PUSH
35420: LD_VAR 0 4
35424: ARRAY
35425: ST_TO_ADDR
// end ;
35426: LD_VAR 0 2
35430: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35431: LD_INT 0
35433: PPUSH
35434: PPUSH
35435: PPUSH
// if not mines then
35436: LD_VAR 0 2
35440: NOT
35441: IFFALSE 35445
// exit ;
35443: GO 35589
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35445: LD_ADDR_VAR 0 5
35449: PUSH
35450: LD_INT 81
35452: PUSH
35453: LD_VAR 0 1
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 3
35464: PUSH
35465: LD_INT 21
35467: PUSH
35468: LD_INT 3
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PPUSH
35483: CALL_OW 69
35487: ST_TO_ADDR
// for i in mines do
35488: LD_ADDR_VAR 0 4
35492: PUSH
35493: LD_VAR 0 2
35497: PUSH
35498: FOR_IN
35499: IFFALSE 35587
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35501: LD_VAR 0 4
35505: PUSH
35506: LD_INT 1
35508: ARRAY
35509: PPUSH
35510: LD_VAR 0 4
35514: PUSH
35515: LD_INT 2
35517: ARRAY
35518: PPUSH
35519: CALL_OW 458
35523: NOT
35524: IFFALSE 35528
// continue ;
35526: GO 35498
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35528: LD_VAR 0 4
35532: PUSH
35533: LD_INT 1
35535: ARRAY
35536: PPUSH
35537: LD_VAR 0 4
35541: PUSH
35542: LD_INT 2
35544: ARRAY
35545: PPUSH
35546: CALL_OW 428
35550: PUSH
35551: LD_VAR 0 5
35555: IN
35556: IFFALSE 35585
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35558: LD_VAR 0 4
35562: PUSH
35563: LD_INT 1
35565: ARRAY
35566: PPUSH
35567: LD_VAR 0 4
35571: PUSH
35572: LD_INT 2
35574: ARRAY
35575: PPUSH
35576: LD_VAR 0 1
35580: PPUSH
35581: CALL_OW 456
// end ;
35585: GO 35498
35587: POP
35588: POP
// end ;
35589: LD_VAR 0 3
35593: RET
// export function Count ( array ) ; var i ; begin
35594: LD_INT 0
35596: PPUSH
35597: PPUSH
// result := 0 ;
35598: LD_ADDR_VAR 0 2
35602: PUSH
35603: LD_INT 0
35605: ST_TO_ADDR
// for i in array do
35606: LD_ADDR_VAR 0 3
35610: PUSH
35611: LD_VAR 0 1
35615: PUSH
35616: FOR_IN
35617: IFFALSE 35641
// if i then
35619: LD_VAR 0 3
35623: IFFALSE 35639
// result := result + 1 ;
35625: LD_ADDR_VAR 0 2
35629: PUSH
35630: LD_VAR 0 2
35634: PUSH
35635: LD_INT 1
35637: PLUS
35638: ST_TO_ADDR
35639: GO 35616
35641: POP
35642: POP
// end ;
35643: LD_VAR 0 2
35647: RET
// export function IsEmpty ( building ) ; begin
35648: LD_INT 0
35650: PPUSH
// if not building then
35651: LD_VAR 0 1
35655: NOT
35656: IFFALSE 35660
// exit ;
35658: GO 35703
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35660: LD_ADDR_VAR 0 2
35664: PUSH
35665: LD_VAR 0 1
35669: PUSH
35670: LD_INT 22
35672: PUSH
35673: LD_VAR 0 1
35677: PPUSH
35678: CALL_OW 255
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 58
35689: PUSH
35690: EMPTY
35691: LIST
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PPUSH
35697: CALL_OW 69
35701: IN
35702: ST_TO_ADDR
// end ;
35703: LD_VAR 0 2
35707: RET
// export function IsNotFull ( building ) ; begin
35708: LD_INT 0
35710: PPUSH
// if not building then
35711: LD_VAR 0 1
35715: NOT
35716: IFFALSE 35720
// exit ;
35718: GO 35739
// result := UnitsInside ( building ) < 6 ;
35720: LD_ADDR_VAR 0 2
35724: PUSH
35725: LD_VAR 0 1
35729: PPUSH
35730: CALL_OW 313
35734: PUSH
35735: LD_INT 6
35737: LESS
35738: ST_TO_ADDR
// end ;
35739: LD_VAR 0 2
35743: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35744: LD_INT 0
35746: PPUSH
35747: PPUSH
35748: PPUSH
35749: PPUSH
// tmp := [ ] ;
35750: LD_ADDR_VAR 0 3
35754: PUSH
35755: EMPTY
35756: ST_TO_ADDR
// list := [ ] ;
35757: LD_ADDR_VAR 0 5
35761: PUSH
35762: EMPTY
35763: ST_TO_ADDR
// for i = 16 to 25 do
35764: LD_ADDR_VAR 0 4
35768: PUSH
35769: DOUBLE
35770: LD_INT 16
35772: DEC
35773: ST_TO_ADDR
35774: LD_INT 25
35776: PUSH
35777: FOR_TO
35778: IFFALSE 35851
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35780: LD_ADDR_VAR 0 3
35784: PUSH
35785: LD_VAR 0 3
35789: PUSH
35790: LD_INT 22
35792: PUSH
35793: LD_VAR 0 1
35797: PPUSH
35798: CALL_OW 255
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 91
35809: PUSH
35810: LD_VAR 0 1
35814: PUSH
35815: LD_INT 6
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 30
35825: PUSH
35826: LD_VAR 0 4
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: LIST
35839: PUSH
35840: EMPTY
35841: LIST
35842: PPUSH
35843: CALL_OW 69
35847: ADD
35848: ST_TO_ADDR
35849: GO 35777
35851: POP
35852: POP
// for i = 1 to tmp do
35853: LD_ADDR_VAR 0 4
35857: PUSH
35858: DOUBLE
35859: LD_INT 1
35861: DEC
35862: ST_TO_ADDR
35863: LD_VAR 0 3
35867: PUSH
35868: FOR_TO
35869: IFFALSE 35957
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35871: LD_ADDR_VAR 0 5
35875: PUSH
35876: LD_VAR 0 5
35880: PUSH
35881: LD_VAR 0 3
35885: PUSH
35886: LD_VAR 0 4
35890: ARRAY
35891: PPUSH
35892: CALL_OW 266
35896: PUSH
35897: LD_VAR 0 3
35901: PUSH
35902: LD_VAR 0 4
35906: ARRAY
35907: PPUSH
35908: CALL_OW 250
35912: PUSH
35913: LD_VAR 0 3
35917: PUSH
35918: LD_VAR 0 4
35922: ARRAY
35923: PPUSH
35924: CALL_OW 251
35928: PUSH
35929: LD_VAR 0 3
35933: PUSH
35934: LD_VAR 0 4
35938: ARRAY
35939: PPUSH
35940: CALL_OW 254
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: PUSH
35951: EMPTY
35952: LIST
35953: ADD
35954: ST_TO_ADDR
35955: GO 35868
35957: POP
35958: POP
// result := list ;
35959: LD_ADDR_VAR 0 2
35963: PUSH
35964: LD_VAR 0 5
35968: ST_TO_ADDR
// end ;
35969: LD_VAR 0 2
35973: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35974: LD_INT 0
35976: PPUSH
35977: PPUSH
35978: PPUSH
35979: PPUSH
35980: PPUSH
35981: PPUSH
35982: PPUSH
// if not factory then
35983: LD_VAR 0 1
35987: NOT
35988: IFFALSE 35992
// exit ;
35990: GO 36585
// if control = control_apeman then
35992: LD_VAR 0 4
35996: PUSH
35997: LD_INT 5
35999: EQUAL
36000: IFFALSE 36109
// begin tmp := UnitsInside ( factory ) ;
36002: LD_ADDR_VAR 0 8
36006: PUSH
36007: LD_VAR 0 1
36011: PPUSH
36012: CALL_OW 313
36016: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36017: LD_VAR 0 8
36021: PPUSH
36022: LD_INT 25
36024: PUSH
36025: LD_INT 12
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PPUSH
36032: CALL_OW 72
36036: NOT
36037: IFFALSE 36047
// control := control_manual ;
36039: LD_ADDR_VAR 0 4
36043: PUSH
36044: LD_INT 1
36046: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36047: LD_ADDR_VAR 0 8
36051: PUSH
36052: LD_VAR 0 1
36056: PPUSH
36057: CALL 35744 0 1
36061: ST_TO_ADDR
// if tmp then
36062: LD_VAR 0 8
36066: IFFALSE 36109
// begin for i in tmp do
36068: LD_ADDR_VAR 0 7
36072: PUSH
36073: LD_VAR 0 8
36077: PUSH
36078: FOR_IN
36079: IFFALSE 36107
// if i [ 1 ] = b_ext_radio then
36081: LD_VAR 0 7
36085: PUSH
36086: LD_INT 1
36088: ARRAY
36089: PUSH
36090: LD_INT 22
36092: EQUAL
36093: IFFALSE 36105
// begin control := control_remote ;
36095: LD_ADDR_VAR 0 4
36099: PUSH
36100: LD_INT 2
36102: ST_TO_ADDR
// break ;
36103: GO 36107
// end ;
36105: GO 36078
36107: POP
36108: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36109: LD_VAR 0 1
36113: PPUSH
36114: LD_VAR 0 2
36118: PPUSH
36119: LD_VAR 0 3
36123: PPUSH
36124: LD_VAR 0 4
36128: PPUSH
36129: LD_VAR 0 5
36133: PPUSH
36134: CALL_OW 448
36138: IFFALSE 36173
// begin result := [ chassis , engine , control , weapon ] ;
36140: LD_ADDR_VAR 0 6
36144: PUSH
36145: LD_VAR 0 2
36149: PUSH
36150: LD_VAR 0 3
36154: PUSH
36155: LD_VAR 0 4
36159: PUSH
36160: LD_VAR 0 5
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: ST_TO_ADDR
// exit ;
36171: GO 36585
// end ; _chassis := AvailableChassisList ( factory ) ;
36173: LD_ADDR_VAR 0 9
36177: PUSH
36178: LD_VAR 0 1
36182: PPUSH
36183: CALL_OW 475
36187: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36188: LD_ADDR_VAR 0 11
36192: PUSH
36193: LD_VAR 0 1
36197: PPUSH
36198: CALL_OW 476
36202: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36203: LD_ADDR_VAR 0 12
36207: PUSH
36208: LD_VAR 0 1
36212: PPUSH
36213: CALL_OW 477
36217: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36218: LD_ADDR_VAR 0 10
36222: PUSH
36223: LD_VAR 0 1
36227: PPUSH
36228: CALL_OW 478
36232: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36233: LD_VAR 0 9
36237: NOT
36238: PUSH
36239: LD_VAR 0 11
36243: NOT
36244: OR
36245: PUSH
36246: LD_VAR 0 12
36250: NOT
36251: OR
36252: PUSH
36253: LD_VAR 0 10
36257: NOT
36258: OR
36259: IFFALSE 36294
// begin result := [ chassis , engine , control , weapon ] ;
36261: LD_ADDR_VAR 0 6
36265: PUSH
36266: LD_VAR 0 2
36270: PUSH
36271: LD_VAR 0 3
36275: PUSH
36276: LD_VAR 0 4
36280: PUSH
36281: LD_VAR 0 5
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: ST_TO_ADDR
// exit ;
36292: GO 36585
// end ; if not chassis in _chassis then
36294: LD_VAR 0 2
36298: PUSH
36299: LD_VAR 0 9
36303: IN
36304: NOT
36305: IFFALSE 36331
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36307: LD_ADDR_VAR 0 2
36311: PUSH
36312: LD_VAR 0 9
36316: PUSH
36317: LD_INT 1
36319: PPUSH
36320: LD_VAR 0 9
36324: PPUSH
36325: CALL_OW 12
36329: ARRAY
36330: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36331: LD_VAR 0 2
36335: PPUSH
36336: LD_VAR 0 3
36340: PPUSH
36341: CALL 36590 0 2
36345: NOT
36346: IFFALSE 36405
// repeat engine := _engine [ 1 ] ;
36348: LD_ADDR_VAR 0 3
36352: PUSH
36353: LD_VAR 0 11
36357: PUSH
36358: LD_INT 1
36360: ARRAY
36361: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36362: LD_ADDR_VAR 0 11
36366: PUSH
36367: LD_VAR 0 11
36371: PPUSH
36372: LD_INT 1
36374: PPUSH
36375: CALL_OW 3
36379: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36380: LD_VAR 0 2
36384: PPUSH
36385: LD_VAR 0 3
36389: PPUSH
36390: CALL 36590 0 2
36394: PUSH
36395: LD_VAR 0 11
36399: PUSH
36400: EMPTY
36401: EQUAL
36402: OR
36403: IFFALSE 36348
// if not control in _control then
36405: LD_VAR 0 4
36409: PUSH
36410: LD_VAR 0 12
36414: IN
36415: NOT
36416: IFFALSE 36442
// control := _control [ rand ( 1 , _control ) ] ;
36418: LD_ADDR_VAR 0 4
36422: PUSH
36423: LD_VAR 0 12
36427: PUSH
36428: LD_INT 1
36430: PPUSH
36431: LD_VAR 0 12
36435: PPUSH
36436: CALL_OW 12
36440: ARRAY
36441: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36442: LD_VAR 0 2
36446: PPUSH
36447: LD_VAR 0 5
36451: PPUSH
36452: CALL 36810 0 2
36456: NOT
36457: IFFALSE 36516
// repeat weapon := _weapon [ 1 ] ;
36459: LD_ADDR_VAR 0 5
36463: PUSH
36464: LD_VAR 0 10
36468: PUSH
36469: LD_INT 1
36471: ARRAY
36472: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36473: LD_ADDR_VAR 0 10
36477: PUSH
36478: LD_VAR 0 10
36482: PPUSH
36483: LD_INT 1
36485: PPUSH
36486: CALL_OW 3
36490: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36491: LD_VAR 0 2
36495: PPUSH
36496: LD_VAR 0 5
36500: PPUSH
36501: CALL 36810 0 2
36505: PUSH
36506: LD_VAR 0 10
36510: PUSH
36511: EMPTY
36512: EQUAL
36513: OR
36514: IFFALSE 36459
// result := [ ] ;
36516: LD_ADDR_VAR 0 6
36520: PUSH
36521: EMPTY
36522: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36523: LD_VAR 0 1
36527: PPUSH
36528: LD_VAR 0 2
36532: PPUSH
36533: LD_VAR 0 3
36537: PPUSH
36538: LD_VAR 0 4
36542: PPUSH
36543: LD_VAR 0 5
36547: PPUSH
36548: CALL_OW 448
36552: IFFALSE 36585
// result := [ chassis , engine , control , weapon ] ;
36554: LD_ADDR_VAR 0 6
36558: PUSH
36559: LD_VAR 0 2
36563: PUSH
36564: LD_VAR 0 3
36568: PUSH
36569: LD_VAR 0 4
36573: PUSH
36574: LD_VAR 0 5
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: ST_TO_ADDR
// end ;
36585: LD_VAR 0 6
36589: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36590: LD_INT 0
36592: PPUSH
// if not chassis or not engine then
36593: LD_VAR 0 1
36597: NOT
36598: PUSH
36599: LD_VAR 0 2
36603: NOT
36604: OR
36605: IFFALSE 36609
// exit ;
36607: GO 36805
// case engine of engine_solar :
36609: LD_VAR 0 2
36613: PUSH
36614: LD_INT 2
36616: DOUBLE
36617: EQUAL
36618: IFTRUE 36622
36620: GO 36660
36622: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36623: LD_ADDR_VAR 0 3
36627: PUSH
36628: LD_INT 11
36630: PUSH
36631: LD_INT 12
36633: PUSH
36634: LD_INT 13
36636: PUSH
36637: LD_INT 14
36639: PUSH
36640: LD_INT 1
36642: PUSH
36643: LD_INT 2
36645: PUSH
36646: LD_INT 3
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: ST_TO_ADDR
36658: GO 36789
36660: LD_INT 1
36662: DOUBLE
36663: EQUAL
36664: IFTRUE 36668
36666: GO 36730
36668: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36669: LD_ADDR_VAR 0 3
36673: PUSH
36674: LD_INT 11
36676: PUSH
36677: LD_INT 12
36679: PUSH
36680: LD_INT 13
36682: PUSH
36683: LD_INT 14
36685: PUSH
36686: LD_INT 1
36688: PUSH
36689: LD_INT 2
36691: PUSH
36692: LD_INT 3
36694: PUSH
36695: LD_INT 4
36697: PUSH
36698: LD_INT 5
36700: PUSH
36701: LD_INT 21
36703: PUSH
36704: LD_INT 23
36706: PUSH
36707: LD_INT 22
36709: PUSH
36710: LD_INT 24
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: ST_TO_ADDR
36728: GO 36789
36730: LD_INT 3
36732: DOUBLE
36733: EQUAL
36734: IFTRUE 36738
36736: GO 36788
36738: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36739: LD_ADDR_VAR 0 3
36743: PUSH
36744: LD_INT 13
36746: PUSH
36747: LD_INT 14
36749: PUSH
36750: LD_INT 2
36752: PUSH
36753: LD_INT 3
36755: PUSH
36756: LD_INT 4
36758: PUSH
36759: LD_INT 5
36761: PUSH
36762: LD_INT 21
36764: PUSH
36765: LD_INT 22
36767: PUSH
36768: LD_INT 23
36770: PUSH
36771: LD_INT 24
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: ST_TO_ADDR
36786: GO 36789
36788: POP
// result := ( chassis in result ) ;
36789: LD_ADDR_VAR 0 3
36793: PUSH
36794: LD_VAR 0 1
36798: PUSH
36799: LD_VAR 0 3
36803: IN
36804: ST_TO_ADDR
// end ;
36805: LD_VAR 0 3
36809: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36810: LD_INT 0
36812: PPUSH
// if not chassis or not weapon then
36813: LD_VAR 0 1
36817: NOT
36818: PUSH
36819: LD_VAR 0 2
36823: NOT
36824: OR
36825: IFFALSE 36829
// exit ;
36827: GO 37891
// case weapon of us_machine_gun :
36829: LD_VAR 0 2
36833: PUSH
36834: LD_INT 2
36836: DOUBLE
36837: EQUAL
36838: IFTRUE 36842
36840: GO 36872
36842: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36843: LD_ADDR_VAR 0 3
36847: PUSH
36848: LD_INT 1
36850: PUSH
36851: LD_INT 2
36853: PUSH
36854: LD_INT 3
36856: PUSH
36857: LD_INT 4
36859: PUSH
36860: LD_INT 5
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: ST_TO_ADDR
36870: GO 37875
36872: LD_INT 3
36874: DOUBLE
36875: EQUAL
36876: IFTRUE 36880
36878: GO 36910
36880: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36881: LD_ADDR_VAR 0 3
36885: PUSH
36886: LD_INT 1
36888: PUSH
36889: LD_INT 2
36891: PUSH
36892: LD_INT 3
36894: PUSH
36895: LD_INT 4
36897: PUSH
36898: LD_INT 5
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: ST_TO_ADDR
36908: GO 37875
36910: LD_INT 11
36912: DOUBLE
36913: EQUAL
36914: IFTRUE 36918
36916: GO 36948
36918: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36919: LD_ADDR_VAR 0 3
36923: PUSH
36924: LD_INT 1
36926: PUSH
36927: LD_INT 2
36929: PUSH
36930: LD_INT 3
36932: PUSH
36933: LD_INT 4
36935: PUSH
36936: LD_INT 5
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: ST_TO_ADDR
36946: GO 37875
36948: LD_INT 4
36950: DOUBLE
36951: EQUAL
36952: IFTRUE 36956
36954: GO 36982
36956: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36957: LD_ADDR_VAR 0 3
36961: PUSH
36962: LD_INT 2
36964: PUSH
36965: LD_INT 3
36967: PUSH
36968: LD_INT 4
36970: PUSH
36971: LD_INT 5
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: ST_TO_ADDR
36980: GO 37875
36982: LD_INT 5
36984: DOUBLE
36985: EQUAL
36986: IFTRUE 36990
36988: GO 37016
36990: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36991: LD_ADDR_VAR 0 3
36995: PUSH
36996: LD_INT 2
36998: PUSH
36999: LD_INT 3
37001: PUSH
37002: LD_INT 4
37004: PUSH
37005: LD_INT 5
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: ST_TO_ADDR
37014: GO 37875
37016: LD_INT 9
37018: DOUBLE
37019: EQUAL
37020: IFTRUE 37024
37022: GO 37050
37024: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37025: LD_ADDR_VAR 0 3
37029: PUSH
37030: LD_INT 2
37032: PUSH
37033: LD_INT 3
37035: PUSH
37036: LD_INT 4
37038: PUSH
37039: LD_INT 5
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: ST_TO_ADDR
37048: GO 37875
37050: LD_INT 7
37052: DOUBLE
37053: EQUAL
37054: IFTRUE 37058
37056: GO 37084
37058: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37059: LD_ADDR_VAR 0 3
37063: PUSH
37064: LD_INT 2
37066: PUSH
37067: LD_INT 3
37069: PUSH
37070: LD_INT 4
37072: PUSH
37073: LD_INT 5
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: ST_TO_ADDR
37082: GO 37875
37084: LD_INT 12
37086: DOUBLE
37087: EQUAL
37088: IFTRUE 37092
37090: GO 37118
37092: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37093: LD_ADDR_VAR 0 3
37097: PUSH
37098: LD_INT 2
37100: PUSH
37101: LD_INT 3
37103: PUSH
37104: LD_INT 4
37106: PUSH
37107: LD_INT 5
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: ST_TO_ADDR
37116: GO 37875
37118: LD_INT 13
37120: DOUBLE
37121: EQUAL
37122: IFTRUE 37126
37124: GO 37152
37126: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37127: LD_ADDR_VAR 0 3
37131: PUSH
37132: LD_INT 2
37134: PUSH
37135: LD_INT 3
37137: PUSH
37138: LD_INT 4
37140: PUSH
37141: LD_INT 5
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: ST_TO_ADDR
37150: GO 37875
37152: LD_INT 14
37154: DOUBLE
37155: EQUAL
37156: IFTRUE 37160
37158: GO 37178
37160: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37161: LD_ADDR_VAR 0 3
37165: PUSH
37166: LD_INT 4
37168: PUSH
37169: LD_INT 5
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: ST_TO_ADDR
37176: GO 37875
37178: LD_INT 6
37180: DOUBLE
37181: EQUAL
37182: IFTRUE 37186
37184: GO 37204
37186: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37187: LD_ADDR_VAR 0 3
37191: PUSH
37192: LD_INT 4
37194: PUSH
37195: LD_INT 5
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: ST_TO_ADDR
37202: GO 37875
37204: LD_INT 10
37206: DOUBLE
37207: EQUAL
37208: IFTRUE 37212
37210: GO 37230
37212: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37213: LD_ADDR_VAR 0 3
37217: PUSH
37218: LD_INT 4
37220: PUSH
37221: LD_INT 5
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: ST_TO_ADDR
37228: GO 37875
37230: LD_INT 22
37232: DOUBLE
37233: EQUAL
37234: IFTRUE 37238
37236: GO 37264
37238: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37239: LD_ADDR_VAR 0 3
37243: PUSH
37244: LD_INT 11
37246: PUSH
37247: LD_INT 12
37249: PUSH
37250: LD_INT 13
37252: PUSH
37253: LD_INT 14
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: ST_TO_ADDR
37262: GO 37875
37264: LD_INT 23
37266: DOUBLE
37267: EQUAL
37268: IFTRUE 37272
37270: GO 37298
37272: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37273: LD_ADDR_VAR 0 3
37277: PUSH
37278: LD_INT 11
37280: PUSH
37281: LD_INT 12
37283: PUSH
37284: LD_INT 13
37286: PUSH
37287: LD_INT 14
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: ST_TO_ADDR
37296: GO 37875
37298: LD_INT 24
37300: DOUBLE
37301: EQUAL
37302: IFTRUE 37306
37304: GO 37332
37306: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37307: LD_ADDR_VAR 0 3
37311: PUSH
37312: LD_INT 11
37314: PUSH
37315: LD_INT 12
37317: PUSH
37318: LD_INT 13
37320: PUSH
37321: LD_INT 14
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: ST_TO_ADDR
37330: GO 37875
37332: LD_INT 30
37334: DOUBLE
37335: EQUAL
37336: IFTRUE 37340
37338: GO 37366
37340: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37341: LD_ADDR_VAR 0 3
37345: PUSH
37346: LD_INT 11
37348: PUSH
37349: LD_INT 12
37351: PUSH
37352: LD_INT 13
37354: PUSH
37355: LD_INT 14
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: ST_TO_ADDR
37364: GO 37875
37366: LD_INT 25
37368: DOUBLE
37369: EQUAL
37370: IFTRUE 37374
37372: GO 37392
37374: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37375: LD_ADDR_VAR 0 3
37379: PUSH
37380: LD_INT 13
37382: PUSH
37383: LD_INT 14
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: ST_TO_ADDR
37390: GO 37875
37392: LD_INT 27
37394: DOUBLE
37395: EQUAL
37396: IFTRUE 37400
37398: GO 37418
37400: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
37401: LD_ADDR_VAR 0 3
37405: PUSH
37406: LD_INT 13
37408: PUSH
37409: LD_INT 14
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: ST_TO_ADDR
37416: GO 37875
37418: LD_EXP 49
37422: DOUBLE
37423: EQUAL
37424: IFTRUE 37428
37426: GO 37454
37428: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37429: LD_ADDR_VAR 0 3
37433: PUSH
37434: LD_INT 11
37436: PUSH
37437: LD_INT 12
37439: PUSH
37440: LD_INT 13
37442: PUSH
37443: LD_INT 14
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: ST_TO_ADDR
37452: GO 37875
37454: LD_INT 28
37456: DOUBLE
37457: EQUAL
37458: IFTRUE 37462
37460: GO 37480
37462: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37463: LD_ADDR_VAR 0 3
37467: PUSH
37468: LD_INT 13
37470: PUSH
37471: LD_INT 14
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: ST_TO_ADDR
37478: GO 37875
37480: LD_INT 29
37482: DOUBLE
37483: EQUAL
37484: IFTRUE 37488
37486: GO 37506
37488: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37489: LD_ADDR_VAR 0 3
37493: PUSH
37494: LD_INT 13
37496: PUSH
37497: LD_INT 14
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: ST_TO_ADDR
37504: GO 37875
37506: LD_INT 31
37508: DOUBLE
37509: EQUAL
37510: IFTRUE 37514
37512: GO 37532
37514: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37515: LD_ADDR_VAR 0 3
37519: PUSH
37520: LD_INT 13
37522: PUSH
37523: LD_INT 14
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: ST_TO_ADDR
37530: GO 37875
37532: LD_INT 26
37534: DOUBLE
37535: EQUAL
37536: IFTRUE 37540
37538: GO 37558
37540: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37541: LD_ADDR_VAR 0 3
37545: PUSH
37546: LD_INT 13
37548: PUSH
37549: LD_INT 14
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: ST_TO_ADDR
37556: GO 37875
37558: LD_INT 42
37560: DOUBLE
37561: EQUAL
37562: IFTRUE 37566
37564: GO 37592
37566: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37567: LD_ADDR_VAR 0 3
37571: PUSH
37572: LD_INT 21
37574: PUSH
37575: LD_INT 22
37577: PUSH
37578: LD_INT 23
37580: PUSH
37581: LD_INT 24
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: ST_TO_ADDR
37590: GO 37875
37592: LD_INT 43
37594: DOUBLE
37595: EQUAL
37596: IFTRUE 37600
37598: GO 37626
37600: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37601: LD_ADDR_VAR 0 3
37605: PUSH
37606: LD_INT 21
37608: PUSH
37609: LD_INT 22
37611: PUSH
37612: LD_INT 23
37614: PUSH
37615: LD_INT 24
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: ST_TO_ADDR
37624: GO 37875
37626: LD_INT 44
37628: DOUBLE
37629: EQUAL
37630: IFTRUE 37634
37632: GO 37660
37634: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37635: LD_ADDR_VAR 0 3
37639: PUSH
37640: LD_INT 21
37642: PUSH
37643: LD_INT 22
37645: PUSH
37646: LD_INT 23
37648: PUSH
37649: LD_INT 24
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: ST_TO_ADDR
37658: GO 37875
37660: LD_INT 45
37662: DOUBLE
37663: EQUAL
37664: IFTRUE 37668
37666: GO 37694
37668: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37669: LD_ADDR_VAR 0 3
37673: PUSH
37674: LD_INT 21
37676: PUSH
37677: LD_INT 22
37679: PUSH
37680: LD_INT 23
37682: PUSH
37683: LD_INT 24
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: ST_TO_ADDR
37692: GO 37875
37694: LD_INT 49
37696: DOUBLE
37697: EQUAL
37698: IFTRUE 37702
37700: GO 37728
37702: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37703: LD_ADDR_VAR 0 3
37707: PUSH
37708: LD_INT 21
37710: PUSH
37711: LD_INT 22
37713: PUSH
37714: LD_INT 23
37716: PUSH
37717: LD_INT 24
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: ST_TO_ADDR
37726: GO 37875
37728: LD_INT 51
37730: DOUBLE
37731: EQUAL
37732: IFTRUE 37736
37734: GO 37762
37736: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37737: LD_ADDR_VAR 0 3
37741: PUSH
37742: LD_INT 21
37744: PUSH
37745: LD_INT 22
37747: PUSH
37748: LD_INT 23
37750: PUSH
37751: LD_INT 24
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: ST_TO_ADDR
37760: GO 37875
37762: LD_INT 52
37764: DOUBLE
37765: EQUAL
37766: IFTRUE 37770
37768: GO 37796
37770: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37771: LD_ADDR_VAR 0 3
37775: PUSH
37776: LD_INT 21
37778: PUSH
37779: LD_INT 22
37781: PUSH
37782: LD_INT 23
37784: PUSH
37785: LD_INT 24
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: ST_TO_ADDR
37794: GO 37875
37796: LD_INT 53
37798: DOUBLE
37799: EQUAL
37800: IFTRUE 37804
37802: GO 37822
37804: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37805: LD_ADDR_VAR 0 3
37809: PUSH
37810: LD_INT 23
37812: PUSH
37813: LD_INT 24
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: ST_TO_ADDR
37820: GO 37875
37822: LD_INT 46
37824: DOUBLE
37825: EQUAL
37826: IFTRUE 37830
37828: GO 37848
37830: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37831: LD_ADDR_VAR 0 3
37835: PUSH
37836: LD_INT 23
37838: PUSH
37839: LD_INT 24
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: ST_TO_ADDR
37846: GO 37875
37848: LD_INT 47
37850: DOUBLE
37851: EQUAL
37852: IFTRUE 37856
37854: GO 37874
37856: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37857: LD_ADDR_VAR 0 3
37861: PUSH
37862: LD_INT 23
37864: PUSH
37865: LD_INT 24
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: ST_TO_ADDR
37872: GO 37875
37874: POP
// result := ( chassis in result ) ;
37875: LD_ADDR_VAR 0 3
37879: PUSH
37880: LD_VAR 0 1
37884: PUSH
37885: LD_VAR 0 3
37889: IN
37890: ST_TO_ADDR
// end ;
37891: LD_VAR 0 3
37895: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37896: LD_INT 0
37898: PPUSH
37899: PPUSH
37900: PPUSH
37901: PPUSH
37902: PPUSH
37903: PPUSH
37904: PPUSH
// result := array ;
37905: LD_ADDR_VAR 0 5
37909: PUSH
37910: LD_VAR 0 1
37914: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37915: LD_VAR 0 1
37919: NOT
37920: PUSH
37921: LD_VAR 0 2
37925: NOT
37926: OR
37927: PUSH
37928: LD_VAR 0 3
37932: NOT
37933: OR
37934: PUSH
37935: LD_VAR 0 2
37939: PUSH
37940: LD_VAR 0 1
37944: GREATER
37945: OR
37946: PUSH
37947: LD_VAR 0 3
37951: PUSH
37952: LD_VAR 0 1
37956: GREATER
37957: OR
37958: IFFALSE 37962
// exit ;
37960: GO 38258
// if direction then
37962: LD_VAR 0 4
37966: IFFALSE 38030
// begin d := 1 ;
37968: LD_ADDR_VAR 0 9
37972: PUSH
37973: LD_INT 1
37975: ST_TO_ADDR
// if i_from > i_to then
37976: LD_VAR 0 2
37980: PUSH
37981: LD_VAR 0 3
37985: GREATER
37986: IFFALSE 38012
// length := ( array - i_from ) + i_to else
37988: LD_ADDR_VAR 0 11
37992: PUSH
37993: LD_VAR 0 1
37997: PUSH
37998: LD_VAR 0 2
38002: MINUS
38003: PUSH
38004: LD_VAR 0 3
38008: PLUS
38009: ST_TO_ADDR
38010: GO 38028
// length := i_to - i_from ;
38012: LD_ADDR_VAR 0 11
38016: PUSH
38017: LD_VAR 0 3
38021: PUSH
38022: LD_VAR 0 2
38026: MINUS
38027: ST_TO_ADDR
// end else
38028: GO 38091
// begin d := - 1 ;
38030: LD_ADDR_VAR 0 9
38034: PUSH
38035: LD_INT 1
38037: NEG
38038: ST_TO_ADDR
// if i_from > i_to then
38039: LD_VAR 0 2
38043: PUSH
38044: LD_VAR 0 3
38048: GREATER
38049: IFFALSE 38069
// length := i_from - i_to else
38051: LD_ADDR_VAR 0 11
38055: PUSH
38056: LD_VAR 0 2
38060: PUSH
38061: LD_VAR 0 3
38065: MINUS
38066: ST_TO_ADDR
38067: GO 38091
// length := ( array - i_to ) + i_from ;
38069: LD_ADDR_VAR 0 11
38073: PUSH
38074: LD_VAR 0 1
38078: PUSH
38079: LD_VAR 0 3
38083: MINUS
38084: PUSH
38085: LD_VAR 0 2
38089: PLUS
38090: ST_TO_ADDR
// end ; if not length then
38091: LD_VAR 0 11
38095: NOT
38096: IFFALSE 38100
// exit ;
38098: GO 38258
// tmp := array ;
38100: LD_ADDR_VAR 0 10
38104: PUSH
38105: LD_VAR 0 1
38109: ST_TO_ADDR
// for i = 1 to length do
38110: LD_ADDR_VAR 0 6
38114: PUSH
38115: DOUBLE
38116: LD_INT 1
38118: DEC
38119: ST_TO_ADDR
38120: LD_VAR 0 11
38124: PUSH
38125: FOR_TO
38126: IFFALSE 38246
// begin for j = 1 to array do
38128: LD_ADDR_VAR 0 7
38132: PUSH
38133: DOUBLE
38134: LD_INT 1
38136: DEC
38137: ST_TO_ADDR
38138: LD_VAR 0 1
38142: PUSH
38143: FOR_TO
38144: IFFALSE 38232
// begin k := j + d ;
38146: LD_ADDR_VAR 0 8
38150: PUSH
38151: LD_VAR 0 7
38155: PUSH
38156: LD_VAR 0 9
38160: PLUS
38161: ST_TO_ADDR
// if k > array then
38162: LD_VAR 0 8
38166: PUSH
38167: LD_VAR 0 1
38171: GREATER
38172: IFFALSE 38182
// k := 1 ;
38174: LD_ADDR_VAR 0 8
38178: PUSH
38179: LD_INT 1
38181: ST_TO_ADDR
// if not k then
38182: LD_VAR 0 8
38186: NOT
38187: IFFALSE 38199
// k := array ;
38189: LD_ADDR_VAR 0 8
38193: PUSH
38194: LD_VAR 0 1
38198: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38199: LD_ADDR_VAR 0 10
38203: PUSH
38204: LD_VAR 0 10
38208: PPUSH
38209: LD_VAR 0 8
38213: PPUSH
38214: LD_VAR 0 1
38218: PUSH
38219: LD_VAR 0 7
38223: ARRAY
38224: PPUSH
38225: CALL_OW 1
38229: ST_TO_ADDR
// end ;
38230: GO 38143
38232: POP
38233: POP
// array := tmp ;
38234: LD_ADDR_VAR 0 1
38238: PUSH
38239: LD_VAR 0 10
38243: ST_TO_ADDR
// end ;
38244: GO 38125
38246: POP
38247: POP
// result := array ;
38248: LD_ADDR_VAR 0 5
38252: PUSH
38253: LD_VAR 0 1
38257: ST_TO_ADDR
// end ;
38258: LD_VAR 0 5
38262: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38263: LD_INT 0
38265: PPUSH
38266: PPUSH
// result := 0 ;
38267: LD_ADDR_VAR 0 3
38271: PUSH
38272: LD_INT 0
38274: ST_TO_ADDR
// if not array or not value in array then
38275: LD_VAR 0 1
38279: NOT
38280: PUSH
38281: LD_VAR 0 2
38285: PUSH
38286: LD_VAR 0 1
38290: IN
38291: NOT
38292: OR
38293: IFFALSE 38297
// exit ;
38295: GO 38351
// for i = 1 to array do
38297: LD_ADDR_VAR 0 4
38301: PUSH
38302: DOUBLE
38303: LD_INT 1
38305: DEC
38306: ST_TO_ADDR
38307: LD_VAR 0 1
38311: PUSH
38312: FOR_TO
38313: IFFALSE 38349
// if value = array [ i ] then
38315: LD_VAR 0 2
38319: PUSH
38320: LD_VAR 0 1
38324: PUSH
38325: LD_VAR 0 4
38329: ARRAY
38330: EQUAL
38331: IFFALSE 38347
// begin result := i ;
38333: LD_ADDR_VAR 0 3
38337: PUSH
38338: LD_VAR 0 4
38342: ST_TO_ADDR
// exit ;
38343: POP
38344: POP
38345: GO 38351
// end ;
38347: GO 38312
38349: POP
38350: POP
// end ;
38351: LD_VAR 0 3
38355: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38356: LD_INT 0
38358: PPUSH
// vc_chassis := chassis ;
38359: LD_ADDR_OWVAR 37
38363: PUSH
38364: LD_VAR 0 1
38368: ST_TO_ADDR
// vc_engine := engine ;
38369: LD_ADDR_OWVAR 39
38373: PUSH
38374: LD_VAR 0 2
38378: ST_TO_ADDR
// vc_control := control ;
38379: LD_ADDR_OWVAR 38
38383: PUSH
38384: LD_VAR 0 3
38388: ST_TO_ADDR
// vc_weapon := weapon ;
38389: LD_ADDR_OWVAR 40
38393: PUSH
38394: LD_VAR 0 4
38398: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38399: LD_ADDR_OWVAR 41
38403: PUSH
38404: LD_VAR 0 5
38408: ST_TO_ADDR
// end ;
38409: LD_VAR 0 6
38413: RET
// export function WantPlant ( unit ) ; var task ; begin
38414: LD_INT 0
38416: PPUSH
38417: PPUSH
// result := false ;
38418: LD_ADDR_VAR 0 2
38422: PUSH
38423: LD_INT 0
38425: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38426: LD_ADDR_VAR 0 3
38430: PUSH
38431: LD_VAR 0 1
38435: PPUSH
38436: CALL_OW 437
38440: ST_TO_ADDR
// if task then
38441: LD_VAR 0 3
38445: IFFALSE 38473
// if task [ 1 ] [ 1 ] = p then
38447: LD_VAR 0 3
38451: PUSH
38452: LD_INT 1
38454: ARRAY
38455: PUSH
38456: LD_INT 1
38458: ARRAY
38459: PUSH
38460: LD_STRING p
38462: EQUAL
38463: IFFALSE 38473
// result := true ;
38465: LD_ADDR_VAR 0 2
38469: PUSH
38470: LD_INT 1
38472: ST_TO_ADDR
// end ;
38473: LD_VAR 0 2
38477: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38478: LD_INT 0
38480: PPUSH
38481: PPUSH
38482: PPUSH
38483: PPUSH
// if pos < 1 then
38484: LD_VAR 0 2
38488: PUSH
38489: LD_INT 1
38491: LESS
38492: IFFALSE 38496
// exit ;
38494: GO 38799
// if pos = 1 then
38496: LD_VAR 0 2
38500: PUSH
38501: LD_INT 1
38503: EQUAL
38504: IFFALSE 38537
// result := Replace ( arr , pos [ 1 ] , value ) else
38506: LD_ADDR_VAR 0 4
38510: PUSH
38511: LD_VAR 0 1
38515: PPUSH
38516: LD_VAR 0 2
38520: PUSH
38521: LD_INT 1
38523: ARRAY
38524: PPUSH
38525: LD_VAR 0 3
38529: PPUSH
38530: CALL_OW 1
38534: ST_TO_ADDR
38535: GO 38799
// begin tmp := arr ;
38537: LD_ADDR_VAR 0 6
38541: PUSH
38542: LD_VAR 0 1
38546: ST_TO_ADDR
// s_arr := [ tmp ] ;
38547: LD_ADDR_VAR 0 7
38551: PUSH
38552: LD_VAR 0 6
38556: PUSH
38557: EMPTY
38558: LIST
38559: ST_TO_ADDR
// for i = 1 to pos - 1 do
38560: LD_ADDR_VAR 0 5
38564: PUSH
38565: DOUBLE
38566: LD_INT 1
38568: DEC
38569: ST_TO_ADDR
38570: LD_VAR 0 2
38574: PUSH
38575: LD_INT 1
38577: MINUS
38578: PUSH
38579: FOR_TO
38580: IFFALSE 38625
// begin tmp := tmp [ pos [ i ] ] ;
38582: LD_ADDR_VAR 0 6
38586: PUSH
38587: LD_VAR 0 6
38591: PUSH
38592: LD_VAR 0 2
38596: PUSH
38597: LD_VAR 0 5
38601: ARRAY
38602: ARRAY
38603: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38604: LD_ADDR_VAR 0 7
38608: PUSH
38609: LD_VAR 0 7
38613: PUSH
38614: LD_VAR 0 6
38618: PUSH
38619: EMPTY
38620: LIST
38621: ADD
38622: ST_TO_ADDR
// end ;
38623: GO 38579
38625: POP
38626: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38627: LD_ADDR_VAR 0 6
38631: PUSH
38632: LD_VAR 0 6
38636: PPUSH
38637: LD_VAR 0 2
38641: PUSH
38642: LD_VAR 0 2
38646: ARRAY
38647: PPUSH
38648: LD_VAR 0 3
38652: PPUSH
38653: CALL_OW 1
38657: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38658: LD_ADDR_VAR 0 7
38662: PUSH
38663: LD_VAR 0 7
38667: PPUSH
38668: LD_VAR 0 7
38672: PPUSH
38673: LD_VAR 0 6
38677: PPUSH
38678: CALL_OW 1
38682: ST_TO_ADDR
// for i = s_arr downto 2 do
38683: LD_ADDR_VAR 0 5
38687: PUSH
38688: DOUBLE
38689: LD_VAR 0 7
38693: INC
38694: ST_TO_ADDR
38695: LD_INT 2
38697: PUSH
38698: FOR_DOWNTO
38699: IFFALSE 38783
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38701: LD_ADDR_VAR 0 6
38705: PUSH
38706: LD_VAR 0 7
38710: PUSH
38711: LD_VAR 0 5
38715: PUSH
38716: LD_INT 1
38718: MINUS
38719: ARRAY
38720: PPUSH
38721: LD_VAR 0 2
38725: PUSH
38726: LD_VAR 0 5
38730: PUSH
38731: LD_INT 1
38733: MINUS
38734: ARRAY
38735: PPUSH
38736: LD_VAR 0 7
38740: PUSH
38741: LD_VAR 0 5
38745: ARRAY
38746: PPUSH
38747: CALL_OW 1
38751: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38752: LD_ADDR_VAR 0 7
38756: PUSH
38757: LD_VAR 0 7
38761: PPUSH
38762: LD_VAR 0 5
38766: PUSH
38767: LD_INT 1
38769: MINUS
38770: PPUSH
38771: LD_VAR 0 6
38775: PPUSH
38776: CALL_OW 1
38780: ST_TO_ADDR
// end ;
38781: GO 38698
38783: POP
38784: POP
// result := s_arr [ 1 ] ;
38785: LD_ADDR_VAR 0 4
38789: PUSH
38790: LD_VAR 0 7
38794: PUSH
38795: LD_INT 1
38797: ARRAY
38798: ST_TO_ADDR
// end ; end ;
38799: LD_VAR 0 4
38803: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38804: LD_INT 0
38806: PPUSH
38807: PPUSH
// if not list then
38808: LD_VAR 0 1
38812: NOT
38813: IFFALSE 38817
// exit ;
38815: GO 38908
// i := list [ pos1 ] ;
38817: LD_ADDR_VAR 0 5
38821: PUSH
38822: LD_VAR 0 1
38826: PUSH
38827: LD_VAR 0 2
38831: ARRAY
38832: ST_TO_ADDR
// if not i then
38833: LD_VAR 0 5
38837: NOT
38838: IFFALSE 38842
// exit ;
38840: GO 38908
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38842: LD_ADDR_VAR 0 1
38846: PUSH
38847: LD_VAR 0 1
38851: PPUSH
38852: LD_VAR 0 2
38856: PPUSH
38857: LD_VAR 0 1
38861: PUSH
38862: LD_VAR 0 3
38866: ARRAY
38867: PPUSH
38868: CALL_OW 1
38872: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38873: LD_ADDR_VAR 0 1
38877: PUSH
38878: LD_VAR 0 1
38882: PPUSH
38883: LD_VAR 0 3
38887: PPUSH
38888: LD_VAR 0 5
38892: PPUSH
38893: CALL_OW 1
38897: ST_TO_ADDR
// result := list ;
38898: LD_ADDR_VAR 0 4
38902: PUSH
38903: LD_VAR 0 1
38907: ST_TO_ADDR
// end ;
38908: LD_VAR 0 4
38912: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38913: LD_INT 0
38915: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38916: LD_ADDR_VAR 0 5
38920: PUSH
38921: LD_VAR 0 1
38925: PPUSH
38926: CALL_OW 250
38930: PPUSH
38931: LD_VAR 0 1
38935: PPUSH
38936: CALL_OW 251
38940: PPUSH
38941: LD_VAR 0 2
38945: PPUSH
38946: LD_VAR 0 3
38950: PPUSH
38951: LD_VAR 0 4
38955: PPUSH
38956: CALL 38966 0 5
38960: ST_TO_ADDR
// end ;
38961: LD_VAR 0 5
38965: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38966: LD_INT 0
38968: PPUSH
38969: PPUSH
38970: PPUSH
38971: PPUSH
// if not list then
38972: LD_VAR 0 3
38976: NOT
38977: IFFALSE 38981
// exit ;
38979: GO 39369
// result := [ ] ;
38981: LD_ADDR_VAR 0 6
38985: PUSH
38986: EMPTY
38987: ST_TO_ADDR
// for i in list do
38988: LD_ADDR_VAR 0 7
38992: PUSH
38993: LD_VAR 0 3
38997: PUSH
38998: FOR_IN
38999: IFFALSE 39201
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39001: LD_ADDR_VAR 0 9
39005: PUSH
39006: LD_VAR 0 7
39010: PPUSH
39011: LD_VAR 0 1
39015: PPUSH
39016: LD_VAR 0 2
39020: PPUSH
39021: CALL_OW 297
39025: ST_TO_ADDR
// if not result then
39026: LD_VAR 0 6
39030: NOT
39031: IFFALSE 39057
// result := [ [ i , tmp ] ] else
39033: LD_ADDR_VAR 0 6
39037: PUSH
39038: LD_VAR 0 7
39042: PUSH
39043: LD_VAR 0 9
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: EMPTY
39053: LIST
39054: ST_TO_ADDR
39055: GO 39199
// begin if result [ result ] [ 2 ] < tmp then
39057: LD_VAR 0 6
39061: PUSH
39062: LD_VAR 0 6
39066: ARRAY
39067: PUSH
39068: LD_INT 2
39070: ARRAY
39071: PUSH
39072: LD_VAR 0 9
39076: LESS
39077: IFFALSE 39119
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39079: LD_ADDR_VAR 0 6
39083: PUSH
39084: LD_VAR 0 6
39088: PPUSH
39089: LD_VAR 0 6
39093: PUSH
39094: LD_INT 1
39096: PLUS
39097: PPUSH
39098: LD_VAR 0 7
39102: PUSH
39103: LD_VAR 0 9
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PPUSH
39112: CALL_OW 2
39116: ST_TO_ADDR
39117: GO 39199
// for j = 1 to result do
39119: LD_ADDR_VAR 0 8
39123: PUSH
39124: DOUBLE
39125: LD_INT 1
39127: DEC
39128: ST_TO_ADDR
39129: LD_VAR 0 6
39133: PUSH
39134: FOR_TO
39135: IFFALSE 39197
// begin if tmp < result [ j ] [ 2 ] then
39137: LD_VAR 0 9
39141: PUSH
39142: LD_VAR 0 6
39146: PUSH
39147: LD_VAR 0 8
39151: ARRAY
39152: PUSH
39153: LD_INT 2
39155: ARRAY
39156: LESS
39157: IFFALSE 39195
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39159: LD_ADDR_VAR 0 6
39163: PUSH
39164: LD_VAR 0 6
39168: PPUSH
39169: LD_VAR 0 8
39173: PPUSH
39174: LD_VAR 0 7
39178: PUSH
39179: LD_VAR 0 9
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PPUSH
39188: CALL_OW 2
39192: ST_TO_ADDR
// break ;
39193: GO 39197
// end ; end ;
39195: GO 39134
39197: POP
39198: POP
// end ; end ;
39199: GO 38998
39201: POP
39202: POP
// if result and not asc then
39203: LD_VAR 0 6
39207: PUSH
39208: LD_VAR 0 4
39212: NOT
39213: AND
39214: IFFALSE 39289
// begin tmp := result ;
39216: LD_ADDR_VAR 0 9
39220: PUSH
39221: LD_VAR 0 6
39225: ST_TO_ADDR
// for i = tmp downto 1 do
39226: LD_ADDR_VAR 0 7
39230: PUSH
39231: DOUBLE
39232: LD_VAR 0 9
39236: INC
39237: ST_TO_ADDR
39238: LD_INT 1
39240: PUSH
39241: FOR_DOWNTO
39242: IFFALSE 39287
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39244: LD_ADDR_VAR 0 6
39248: PUSH
39249: LD_VAR 0 6
39253: PPUSH
39254: LD_VAR 0 9
39258: PUSH
39259: LD_VAR 0 7
39263: MINUS
39264: PUSH
39265: LD_INT 1
39267: PLUS
39268: PPUSH
39269: LD_VAR 0 9
39273: PUSH
39274: LD_VAR 0 7
39278: ARRAY
39279: PPUSH
39280: CALL_OW 1
39284: ST_TO_ADDR
39285: GO 39241
39287: POP
39288: POP
// end ; tmp := [ ] ;
39289: LD_ADDR_VAR 0 9
39293: PUSH
39294: EMPTY
39295: ST_TO_ADDR
// if mode then
39296: LD_VAR 0 5
39300: IFFALSE 39369
// begin for i = 1 to result do
39302: LD_ADDR_VAR 0 7
39306: PUSH
39307: DOUBLE
39308: LD_INT 1
39310: DEC
39311: ST_TO_ADDR
39312: LD_VAR 0 6
39316: PUSH
39317: FOR_TO
39318: IFFALSE 39357
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39320: LD_ADDR_VAR 0 9
39324: PUSH
39325: LD_VAR 0 9
39329: PPUSH
39330: LD_VAR 0 7
39334: PPUSH
39335: LD_VAR 0 6
39339: PUSH
39340: LD_VAR 0 7
39344: ARRAY
39345: PUSH
39346: LD_INT 1
39348: ARRAY
39349: PPUSH
39350: CALL_OW 1
39354: ST_TO_ADDR
39355: GO 39317
39357: POP
39358: POP
// result := tmp ;
39359: LD_ADDR_VAR 0 6
39363: PUSH
39364: LD_VAR 0 9
39368: ST_TO_ADDR
// end ; end ;
39369: LD_VAR 0 6
39373: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39374: LD_INT 0
39376: PPUSH
39377: PPUSH
39378: PPUSH
39379: PPUSH
39380: PPUSH
39381: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39382: LD_ADDR_VAR 0 5
39386: PUSH
39387: LD_INT 0
39389: PUSH
39390: LD_INT 0
39392: PUSH
39393: LD_INT 0
39395: PUSH
39396: EMPTY
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: ST_TO_ADDR
// if not x or not y then
39404: LD_VAR 0 2
39408: NOT
39409: PUSH
39410: LD_VAR 0 3
39414: NOT
39415: OR
39416: IFFALSE 39420
// exit ;
39418: GO 41072
// if not range then
39420: LD_VAR 0 4
39424: NOT
39425: IFFALSE 39435
// range := 10 ;
39427: LD_ADDR_VAR 0 4
39431: PUSH
39432: LD_INT 10
39434: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39435: LD_ADDR_VAR 0 8
39439: PUSH
39440: LD_INT 81
39442: PUSH
39443: LD_VAR 0 1
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 92
39454: PUSH
39455: LD_VAR 0 2
39459: PUSH
39460: LD_VAR 0 3
39464: PUSH
39465: LD_VAR 0 4
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 3
39478: PUSH
39479: LD_INT 21
39481: PUSH
39482: LD_INT 3
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: LIST
39497: PPUSH
39498: CALL_OW 69
39502: ST_TO_ADDR
// if not tmp then
39503: LD_VAR 0 8
39507: NOT
39508: IFFALSE 39512
// exit ;
39510: GO 41072
// for i in tmp do
39512: LD_ADDR_VAR 0 6
39516: PUSH
39517: LD_VAR 0 8
39521: PUSH
39522: FOR_IN
39523: IFFALSE 41047
// begin points := [ 0 , 0 , 0 ] ;
39525: LD_ADDR_VAR 0 9
39529: PUSH
39530: LD_INT 0
39532: PUSH
39533: LD_INT 0
39535: PUSH
39536: LD_INT 0
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: LIST
39543: ST_TO_ADDR
// bpoints := 1 ;
39544: LD_ADDR_VAR 0 10
39548: PUSH
39549: LD_INT 1
39551: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39552: LD_VAR 0 6
39556: PPUSH
39557: CALL_OW 247
39561: PUSH
39562: LD_INT 1
39564: DOUBLE
39565: EQUAL
39566: IFTRUE 39570
39568: GO 40148
39570: POP
// begin if GetClass ( i ) = 1 then
39571: LD_VAR 0 6
39575: PPUSH
39576: CALL_OW 257
39580: PUSH
39581: LD_INT 1
39583: EQUAL
39584: IFFALSE 39605
// points := [ 10 , 5 , 3 ] ;
39586: LD_ADDR_VAR 0 9
39590: PUSH
39591: LD_INT 10
39593: PUSH
39594: LD_INT 5
39596: PUSH
39597: LD_INT 3
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: LIST
39604: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39605: LD_VAR 0 6
39609: PPUSH
39610: CALL_OW 257
39614: PUSH
39615: LD_INT 2
39617: PUSH
39618: LD_INT 3
39620: PUSH
39621: LD_INT 4
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: LIST
39628: IN
39629: IFFALSE 39650
// points := [ 3 , 2 , 1 ] ;
39631: LD_ADDR_VAR 0 9
39635: PUSH
39636: LD_INT 3
39638: PUSH
39639: LD_INT 2
39641: PUSH
39642: LD_INT 1
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: LIST
39649: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39650: LD_VAR 0 6
39654: PPUSH
39655: CALL_OW 257
39659: PUSH
39660: LD_INT 5
39662: EQUAL
39663: IFFALSE 39684
// points := [ 130 , 5 , 2 ] ;
39665: LD_ADDR_VAR 0 9
39669: PUSH
39670: LD_INT 130
39672: PUSH
39673: LD_INT 5
39675: PUSH
39676: LD_INT 2
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: LIST
39683: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39684: LD_VAR 0 6
39688: PPUSH
39689: CALL_OW 257
39693: PUSH
39694: LD_INT 8
39696: EQUAL
39697: IFFALSE 39718
// points := [ 35 , 35 , 30 ] ;
39699: LD_ADDR_VAR 0 9
39703: PUSH
39704: LD_INT 35
39706: PUSH
39707: LD_INT 35
39709: PUSH
39710: LD_INT 30
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: LIST
39717: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39718: LD_VAR 0 6
39722: PPUSH
39723: CALL_OW 257
39727: PUSH
39728: LD_INT 9
39730: EQUAL
39731: IFFALSE 39752
// points := [ 20 , 55 , 40 ] ;
39733: LD_ADDR_VAR 0 9
39737: PUSH
39738: LD_INT 20
39740: PUSH
39741: LD_INT 55
39743: PUSH
39744: LD_INT 40
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: LIST
39751: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39752: LD_VAR 0 6
39756: PPUSH
39757: CALL_OW 257
39761: PUSH
39762: LD_INT 12
39764: PUSH
39765: LD_INT 16
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: IN
39772: IFFALSE 39793
// points := [ 5 , 3 , 2 ] ;
39774: LD_ADDR_VAR 0 9
39778: PUSH
39779: LD_INT 5
39781: PUSH
39782: LD_INT 3
39784: PUSH
39785: LD_INT 2
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: LIST
39792: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39793: LD_VAR 0 6
39797: PPUSH
39798: CALL_OW 257
39802: PUSH
39803: LD_INT 17
39805: EQUAL
39806: IFFALSE 39827
// points := [ 100 , 50 , 75 ] ;
39808: LD_ADDR_VAR 0 9
39812: PUSH
39813: LD_INT 100
39815: PUSH
39816: LD_INT 50
39818: PUSH
39819: LD_INT 75
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: LIST
39826: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39827: LD_VAR 0 6
39831: PPUSH
39832: CALL_OW 257
39836: PUSH
39837: LD_INT 15
39839: EQUAL
39840: IFFALSE 39861
// points := [ 10 , 5 , 3 ] ;
39842: LD_ADDR_VAR 0 9
39846: PUSH
39847: LD_INT 10
39849: PUSH
39850: LD_INT 5
39852: PUSH
39853: LD_INT 3
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: LIST
39860: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39861: LD_VAR 0 6
39865: PPUSH
39866: CALL_OW 257
39870: PUSH
39871: LD_INT 14
39873: EQUAL
39874: IFFALSE 39895
// points := [ 10 , 0 , 0 ] ;
39876: LD_ADDR_VAR 0 9
39880: PUSH
39881: LD_INT 10
39883: PUSH
39884: LD_INT 0
39886: PUSH
39887: LD_INT 0
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: LIST
39894: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39895: LD_VAR 0 6
39899: PPUSH
39900: CALL_OW 257
39904: PUSH
39905: LD_INT 11
39907: EQUAL
39908: IFFALSE 39929
// points := [ 30 , 10 , 5 ] ;
39910: LD_ADDR_VAR 0 9
39914: PUSH
39915: LD_INT 30
39917: PUSH
39918: LD_INT 10
39920: PUSH
39921: LD_INT 5
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: LIST
39928: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39929: LD_VAR 0 1
39933: PPUSH
39934: LD_INT 5
39936: PPUSH
39937: CALL_OW 321
39941: PUSH
39942: LD_INT 2
39944: EQUAL
39945: IFFALSE 39962
// bpoints := bpoints * 1.8 ;
39947: LD_ADDR_VAR 0 10
39951: PUSH
39952: LD_VAR 0 10
39956: PUSH
39957: LD_REAL  1.80000000000000E+0000
39960: MUL
39961: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39962: LD_VAR 0 6
39966: PPUSH
39967: CALL_OW 257
39971: PUSH
39972: LD_INT 1
39974: PUSH
39975: LD_INT 2
39977: PUSH
39978: LD_INT 3
39980: PUSH
39981: LD_INT 4
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: IN
39990: PUSH
39991: LD_VAR 0 1
39995: PPUSH
39996: LD_INT 51
39998: PPUSH
39999: CALL_OW 321
40003: PUSH
40004: LD_INT 2
40006: EQUAL
40007: AND
40008: IFFALSE 40025
// bpoints := bpoints * 1.2 ;
40010: LD_ADDR_VAR 0 10
40014: PUSH
40015: LD_VAR 0 10
40019: PUSH
40020: LD_REAL  1.20000000000000E+0000
40023: MUL
40024: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40025: LD_VAR 0 6
40029: PPUSH
40030: CALL_OW 257
40034: PUSH
40035: LD_INT 5
40037: PUSH
40038: LD_INT 7
40040: PUSH
40041: LD_INT 9
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: LIST
40048: IN
40049: PUSH
40050: LD_VAR 0 1
40054: PPUSH
40055: LD_INT 52
40057: PPUSH
40058: CALL_OW 321
40062: PUSH
40063: LD_INT 2
40065: EQUAL
40066: AND
40067: IFFALSE 40084
// bpoints := bpoints * 1.5 ;
40069: LD_ADDR_VAR 0 10
40073: PUSH
40074: LD_VAR 0 10
40078: PUSH
40079: LD_REAL  1.50000000000000E+0000
40082: MUL
40083: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40084: LD_VAR 0 1
40088: PPUSH
40089: LD_INT 66
40091: PPUSH
40092: CALL_OW 321
40096: PUSH
40097: LD_INT 2
40099: EQUAL
40100: IFFALSE 40117
// bpoints := bpoints * 1.1 ;
40102: LD_ADDR_VAR 0 10
40106: PUSH
40107: LD_VAR 0 10
40111: PUSH
40112: LD_REAL  1.10000000000000E+0000
40115: MUL
40116: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40117: LD_ADDR_VAR 0 10
40121: PUSH
40122: LD_VAR 0 10
40126: PUSH
40127: LD_VAR 0 6
40131: PPUSH
40132: LD_INT 1
40134: PPUSH
40135: CALL_OW 259
40139: PUSH
40140: LD_REAL  1.15000000000000E+0000
40143: MUL
40144: MUL
40145: ST_TO_ADDR
// end ; unit_vehicle :
40146: GO 40976
40148: LD_INT 2
40150: DOUBLE
40151: EQUAL
40152: IFTRUE 40156
40154: GO 40964
40156: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40157: LD_VAR 0 6
40161: PPUSH
40162: CALL_OW 264
40166: PUSH
40167: LD_INT 2
40169: PUSH
40170: LD_INT 42
40172: PUSH
40173: LD_INT 24
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: LIST
40180: IN
40181: IFFALSE 40202
// points := [ 25 , 5 , 3 ] ;
40183: LD_ADDR_VAR 0 9
40187: PUSH
40188: LD_INT 25
40190: PUSH
40191: LD_INT 5
40193: PUSH
40194: LD_INT 3
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: LIST
40201: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40202: LD_VAR 0 6
40206: PPUSH
40207: CALL_OW 264
40211: PUSH
40212: LD_INT 4
40214: PUSH
40215: LD_INT 43
40217: PUSH
40218: LD_INT 25
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: LIST
40225: IN
40226: IFFALSE 40247
// points := [ 40 , 15 , 5 ] ;
40228: LD_ADDR_VAR 0 9
40232: PUSH
40233: LD_INT 40
40235: PUSH
40236: LD_INT 15
40238: PUSH
40239: LD_INT 5
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: LIST
40246: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40247: LD_VAR 0 6
40251: PPUSH
40252: CALL_OW 264
40256: PUSH
40257: LD_INT 3
40259: PUSH
40260: LD_INT 23
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: IN
40267: IFFALSE 40288
// points := [ 7 , 25 , 8 ] ;
40269: LD_ADDR_VAR 0 9
40273: PUSH
40274: LD_INT 7
40276: PUSH
40277: LD_INT 25
40279: PUSH
40280: LD_INT 8
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: LIST
40287: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40288: LD_VAR 0 6
40292: PPUSH
40293: CALL_OW 264
40297: PUSH
40298: LD_INT 5
40300: PUSH
40301: LD_INT 27
40303: PUSH
40304: LD_INT 44
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: LIST
40311: IN
40312: IFFALSE 40333
// points := [ 14 , 50 , 16 ] ;
40314: LD_ADDR_VAR 0 9
40318: PUSH
40319: LD_INT 14
40321: PUSH
40322: LD_INT 50
40324: PUSH
40325: LD_INT 16
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: LIST
40332: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40333: LD_VAR 0 6
40337: PPUSH
40338: CALL_OW 264
40342: PUSH
40343: LD_INT 6
40345: PUSH
40346: LD_INT 46
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: IN
40353: IFFALSE 40374
// points := [ 32 , 120 , 70 ] ;
40355: LD_ADDR_VAR 0 9
40359: PUSH
40360: LD_INT 32
40362: PUSH
40363: LD_INT 120
40365: PUSH
40366: LD_INT 70
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: LIST
40373: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
40374: LD_VAR 0 6
40378: PPUSH
40379: CALL_OW 264
40383: PUSH
40384: LD_INT 7
40386: PUSH
40387: LD_INT 28
40389: PUSH
40390: LD_INT 45
40392: PUSH
40393: LD_EXP 49
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: IN
40404: IFFALSE 40425
// points := [ 35 , 20 , 45 ] ;
40406: LD_ADDR_VAR 0 9
40410: PUSH
40411: LD_INT 35
40413: PUSH
40414: LD_INT 20
40416: PUSH
40417: LD_INT 45
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: LIST
40424: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40425: LD_VAR 0 6
40429: PPUSH
40430: CALL_OW 264
40434: PUSH
40435: LD_INT 47
40437: PUSH
40438: EMPTY
40439: LIST
40440: IN
40441: IFFALSE 40462
// points := [ 67 , 45 , 75 ] ;
40443: LD_ADDR_VAR 0 9
40447: PUSH
40448: LD_INT 67
40450: PUSH
40451: LD_INT 45
40453: PUSH
40454: LD_INT 75
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: LIST
40461: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40462: LD_VAR 0 6
40466: PPUSH
40467: CALL_OW 264
40471: PUSH
40472: LD_INT 26
40474: PUSH
40475: EMPTY
40476: LIST
40477: IN
40478: IFFALSE 40499
// points := [ 120 , 30 , 80 ] ;
40480: LD_ADDR_VAR 0 9
40484: PUSH
40485: LD_INT 120
40487: PUSH
40488: LD_INT 30
40490: PUSH
40491: LD_INT 80
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: LIST
40498: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40499: LD_VAR 0 6
40503: PPUSH
40504: CALL_OW 264
40508: PUSH
40509: LD_INT 22
40511: PUSH
40512: EMPTY
40513: LIST
40514: IN
40515: IFFALSE 40536
// points := [ 40 , 1 , 1 ] ;
40517: LD_ADDR_VAR 0 9
40521: PUSH
40522: LD_INT 40
40524: PUSH
40525: LD_INT 1
40527: PUSH
40528: LD_INT 1
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: LIST
40535: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40536: LD_VAR 0 6
40540: PPUSH
40541: CALL_OW 264
40545: PUSH
40546: LD_INT 29
40548: PUSH
40549: EMPTY
40550: LIST
40551: IN
40552: IFFALSE 40573
// points := [ 70 , 200 , 400 ] ;
40554: LD_ADDR_VAR 0 9
40558: PUSH
40559: LD_INT 70
40561: PUSH
40562: LD_INT 200
40564: PUSH
40565: LD_INT 400
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: LIST
40572: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40573: LD_VAR 0 6
40577: PPUSH
40578: CALL_OW 264
40582: PUSH
40583: LD_INT 14
40585: PUSH
40586: LD_INT 53
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: IN
40593: IFFALSE 40614
// points := [ 40 , 10 , 20 ] ;
40595: LD_ADDR_VAR 0 9
40599: PUSH
40600: LD_INT 40
40602: PUSH
40603: LD_INT 10
40605: PUSH
40606: LD_INT 20
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: LIST
40613: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40614: LD_VAR 0 6
40618: PPUSH
40619: CALL_OW 264
40623: PUSH
40624: LD_INT 9
40626: PUSH
40627: EMPTY
40628: LIST
40629: IN
40630: IFFALSE 40651
// points := [ 5 , 70 , 20 ] ;
40632: LD_ADDR_VAR 0 9
40636: PUSH
40637: LD_INT 5
40639: PUSH
40640: LD_INT 70
40642: PUSH
40643: LD_INT 20
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: LIST
40650: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40651: LD_VAR 0 6
40655: PPUSH
40656: CALL_OW 264
40660: PUSH
40661: LD_INT 10
40663: PUSH
40664: EMPTY
40665: LIST
40666: IN
40667: IFFALSE 40688
// points := [ 35 , 110 , 70 ] ;
40669: LD_ADDR_VAR 0 9
40673: PUSH
40674: LD_INT 35
40676: PUSH
40677: LD_INT 110
40679: PUSH
40680: LD_INT 70
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: LIST
40687: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40688: LD_VAR 0 6
40692: PPUSH
40693: CALL_OW 265
40697: PUSH
40698: LD_INT 25
40700: EQUAL
40701: IFFALSE 40722
// points := [ 80 , 65 , 100 ] ;
40703: LD_ADDR_VAR 0 9
40707: PUSH
40708: LD_INT 80
40710: PUSH
40711: LD_INT 65
40713: PUSH
40714: LD_INT 100
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: LIST
40721: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40722: LD_VAR 0 6
40726: PPUSH
40727: CALL_OW 263
40731: PUSH
40732: LD_INT 1
40734: EQUAL
40735: IFFALSE 40770
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40737: LD_ADDR_VAR 0 10
40741: PUSH
40742: LD_VAR 0 10
40746: PUSH
40747: LD_VAR 0 6
40751: PPUSH
40752: CALL_OW 311
40756: PPUSH
40757: LD_INT 3
40759: PPUSH
40760: CALL_OW 259
40764: PUSH
40765: LD_INT 4
40767: MUL
40768: MUL
40769: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40770: LD_VAR 0 6
40774: PPUSH
40775: CALL_OW 263
40779: PUSH
40780: LD_INT 2
40782: EQUAL
40783: IFFALSE 40834
// begin j := IsControledBy ( i ) ;
40785: LD_ADDR_VAR 0 7
40789: PUSH
40790: LD_VAR 0 6
40794: PPUSH
40795: CALL_OW 312
40799: ST_TO_ADDR
// if j then
40800: LD_VAR 0 7
40804: IFFALSE 40834
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40806: LD_ADDR_VAR 0 10
40810: PUSH
40811: LD_VAR 0 10
40815: PUSH
40816: LD_VAR 0 7
40820: PPUSH
40821: LD_INT 3
40823: PPUSH
40824: CALL_OW 259
40828: PUSH
40829: LD_INT 3
40831: MUL
40832: MUL
40833: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40834: LD_VAR 0 6
40838: PPUSH
40839: CALL_OW 264
40843: PUSH
40844: LD_INT 5
40846: PUSH
40847: LD_INT 6
40849: PUSH
40850: LD_INT 46
40852: PUSH
40853: LD_INT 44
40855: PUSH
40856: LD_INT 47
40858: PUSH
40859: LD_INT 45
40861: PUSH
40862: LD_INT 28
40864: PUSH
40865: LD_INT 7
40867: PUSH
40868: LD_INT 27
40870: PUSH
40871: LD_INT 29
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: IN
40886: PUSH
40887: LD_VAR 0 1
40891: PPUSH
40892: LD_INT 52
40894: PPUSH
40895: CALL_OW 321
40899: PUSH
40900: LD_INT 2
40902: EQUAL
40903: AND
40904: IFFALSE 40921
// bpoints := bpoints * 1.2 ;
40906: LD_ADDR_VAR 0 10
40910: PUSH
40911: LD_VAR 0 10
40915: PUSH
40916: LD_REAL  1.20000000000000E+0000
40919: MUL
40920: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40921: LD_VAR 0 6
40925: PPUSH
40926: CALL_OW 264
40930: PUSH
40931: LD_INT 6
40933: PUSH
40934: LD_INT 46
40936: PUSH
40937: LD_INT 47
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: LIST
40944: IN
40945: IFFALSE 40962
// bpoints := bpoints * 1.2 ;
40947: LD_ADDR_VAR 0 10
40951: PUSH
40952: LD_VAR 0 10
40956: PUSH
40957: LD_REAL  1.20000000000000E+0000
40960: MUL
40961: ST_TO_ADDR
// end ; unit_building :
40962: GO 40976
40964: LD_INT 3
40966: DOUBLE
40967: EQUAL
40968: IFTRUE 40972
40970: GO 40975
40972: POP
// ; end ;
40973: GO 40976
40975: POP
// for j = 1 to 3 do
40976: LD_ADDR_VAR 0 7
40980: PUSH
40981: DOUBLE
40982: LD_INT 1
40984: DEC
40985: ST_TO_ADDR
40986: LD_INT 3
40988: PUSH
40989: FOR_TO
40990: IFFALSE 41043
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40992: LD_ADDR_VAR 0 5
40996: PUSH
40997: LD_VAR 0 5
41001: PPUSH
41002: LD_VAR 0 7
41006: PPUSH
41007: LD_VAR 0 5
41011: PUSH
41012: LD_VAR 0 7
41016: ARRAY
41017: PUSH
41018: LD_VAR 0 9
41022: PUSH
41023: LD_VAR 0 7
41027: ARRAY
41028: PUSH
41029: LD_VAR 0 10
41033: MUL
41034: PLUS
41035: PPUSH
41036: CALL_OW 1
41040: ST_TO_ADDR
41041: GO 40989
41043: POP
41044: POP
// end ;
41045: GO 39522
41047: POP
41048: POP
// result := Replace ( result , 4 , tmp ) ;
41049: LD_ADDR_VAR 0 5
41053: PUSH
41054: LD_VAR 0 5
41058: PPUSH
41059: LD_INT 4
41061: PPUSH
41062: LD_VAR 0 8
41066: PPUSH
41067: CALL_OW 1
41071: ST_TO_ADDR
// end ;
41072: LD_VAR 0 5
41076: RET
// export function DangerAtRange ( unit , range ) ; begin
41077: LD_INT 0
41079: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41080: LD_ADDR_VAR 0 3
41084: PUSH
41085: LD_VAR 0 1
41089: PPUSH
41090: CALL_OW 255
41094: PPUSH
41095: LD_VAR 0 1
41099: PPUSH
41100: CALL_OW 250
41104: PPUSH
41105: LD_VAR 0 1
41109: PPUSH
41110: CALL_OW 251
41114: PPUSH
41115: LD_VAR 0 2
41119: PPUSH
41120: CALL 39374 0 4
41124: ST_TO_ADDR
// end ;
41125: LD_VAR 0 3
41129: RET
// export function DangerInArea ( side , area ) ; begin
41130: LD_INT 0
41132: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41133: LD_ADDR_VAR 0 3
41137: PUSH
41138: LD_VAR 0 2
41142: PPUSH
41143: LD_INT 81
41145: PUSH
41146: LD_VAR 0 1
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PPUSH
41155: CALL_OW 70
41159: ST_TO_ADDR
// end ;
41160: LD_VAR 0 3
41164: RET
// export function IsExtension ( b ) ; begin
41165: LD_INT 0
41167: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41168: LD_ADDR_VAR 0 2
41172: PUSH
41173: LD_VAR 0 1
41177: PUSH
41178: LD_INT 23
41180: PUSH
41181: LD_INT 20
41183: PUSH
41184: LD_INT 22
41186: PUSH
41187: LD_INT 17
41189: PUSH
41190: LD_INT 24
41192: PUSH
41193: LD_INT 21
41195: PUSH
41196: LD_INT 19
41198: PUSH
41199: LD_INT 16
41201: PUSH
41202: LD_INT 25
41204: PUSH
41205: LD_INT 18
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: IN
41220: ST_TO_ADDR
// end ;
41221: LD_VAR 0 2
41225: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41226: LD_INT 0
41228: PPUSH
41229: PPUSH
41230: PPUSH
// result := [ ] ;
41231: LD_ADDR_VAR 0 4
41235: PUSH
41236: EMPTY
41237: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41238: LD_ADDR_VAR 0 5
41242: PUSH
41243: LD_VAR 0 2
41247: PPUSH
41248: LD_INT 21
41250: PUSH
41251: LD_INT 3
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PPUSH
41258: CALL_OW 70
41262: ST_TO_ADDR
// if not tmp then
41263: LD_VAR 0 5
41267: NOT
41268: IFFALSE 41272
// exit ;
41270: GO 41336
// if checkLink then
41272: LD_VAR 0 3
41276: IFFALSE 41326
// begin for i in tmp do
41278: LD_ADDR_VAR 0 6
41282: PUSH
41283: LD_VAR 0 5
41287: PUSH
41288: FOR_IN
41289: IFFALSE 41324
// if GetBase ( i ) <> base then
41291: LD_VAR 0 6
41295: PPUSH
41296: CALL_OW 274
41300: PUSH
41301: LD_VAR 0 1
41305: NONEQUAL
41306: IFFALSE 41322
// ComLinkToBase ( base , i ) ;
41308: LD_VAR 0 1
41312: PPUSH
41313: LD_VAR 0 6
41317: PPUSH
41318: CALL_OW 169
41322: GO 41288
41324: POP
41325: POP
// end ; result := tmp ;
41326: LD_ADDR_VAR 0 4
41330: PUSH
41331: LD_VAR 0 5
41335: ST_TO_ADDR
// end ;
41336: LD_VAR 0 4
41340: RET
// export function ComComplete ( units , b ) ; var i ; begin
41341: LD_INT 0
41343: PPUSH
41344: PPUSH
// if not units then
41345: LD_VAR 0 1
41349: NOT
41350: IFFALSE 41354
// exit ;
41352: GO 41444
// for i in units do
41354: LD_ADDR_VAR 0 4
41358: PUSH
41359: LD_VAR 0 1
41363: PUSH
41364: FOR_IN
41365: IFFALSE 41442
// if BuildingStatus ( b ) = bs_build then
41367: LD_VAR 0 2
41371: PPUSH
41372: CALL_OW 461
41376: PUSH
41377: LD_INT 1
41379: EQUAL
41380: IFFALSE 41440
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41382: LD_VAR 0 4
41386: PPUSH
41387: LD_STRING h
41389: PUSH
41390: LD_VAR 0 2
41394: PPUSH
41395: CALL_OW 250
41399: PUSH
41400: LD_VAR 0 2
41404: PPUSH
41405: CALL_OW 251
41409: PUSH
41410: LD_VAR 0 2
41414: PUSH
41415: LD_INT 0
41417: PUSH
41418: LD_INT 0
41420: PUSH
41421: LD_INT 0
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: PUSH
41433: EMPTY
41434: LIST
41435: PPUSH
41436: CALL_OW 446
41440: GO 41364
41442: POP
41443: POP
// end ;
41444: LD_VAR 0 3
41448: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41449: LD_INT 0
41451: PPUSH
41452: PPUSH
41453: PPUSH
41454: PPUSH
41455: PPUSH
41456: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
41457: LD_VAR 0 1
41461: NOT
41462: PUSH
41463: LD_VAR 0 1
41467: PPUSH
41468: CALL_OW 263
41472: PUSH
41473: LD_INT 2
41475: NONEQUAL
41476: OR
41477: IFFALSE 41481
// exit ;
41479: GO 41797
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41481: LD_ADDR_VAR 0 6
41485: PUSH
41486: LD_INT 22
41488: PUSH
41489: LD_VAR 0 1
41493: PPUSH
41494: CALL_OW 255
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 2
41505: PUSH
41506: LD_INT 30
41508: PUSH
41509: LD_INT 36
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 34
41518: PUSH
41519: LD_INT 31
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: LIST
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PPUSH
41535: CALL_OW 69
41539: ST_TO_ADDR
// if not tmp then
41540: LD_VAR 0 6
41544: NOT
41545: IFFALSE 41549
// exit ;
41547: GO 41797
// result := [ ] ;
41549: LD_ADDR_VAR 0 2
41553: PUSH
41554: EMPTY
41555: ST_TO_ADDR
// for i in tmp do
41556: LD_ADDR_VAR 0 3
41560: PUSH
41561: LD_VAR 0 6
41565: PUSH
41566: FOR_IN
41567: IFFALSE 41638
// begin t := UnitsInside ( i ) ;
41569: LD_ADDR_VAR 0 4
41573: PUSH
41574: LD_VAR 0 3
41578: PPUSH
41579: CALL_OW 313
41583: ST_TO_ADDR
// if t then
41584: LD_VAR 0 4
41588: IFFALSE 41636
// for j in t do
41590: LD_ADDR_VAR 0 7
41594: PUSH
41595: LD_VAR 0 4
41599: PUSH
41600: FOR_IN
41601: IFFALSE 41634
// result := Replace ( result , result + 1 , j ) ;
41603: LD_ADDR_VAR 0 2
41607: PUSH
41608: LD_VAR 0 2
41612: PPUSH
41613: LD_VAR 0 2
41617: PUSH
41618: LD_INT 1
41620: PLUS
41621: PPUSH
41622: LD_VAR 0 7
41626: PPUSH
41627: CALL_OW 1
41631: ST_TO_ADDR
41632: GO 41600
41634: POP
41635: POP
// end ;
41636: GO 41566
41638: POP
41639: POP
// if not result then
41640: LD_VAR 0 2
41644: NOT
41645: IFFALSE 41649
// exit ;
41647: GO 41797
// mech := result [ 1 ] ;
41649: LD_ADDR_VAR 0 5
41653: PUSH
41654: LD_VAR 0 2
41658: PUSH
41659: LD_INT 1
41661: ARRAY
41662: ST_TO_ADDR
// if result > 1 then
41663: LD_VAR 0 2
41667: PUSH
41668: LD_INT 1
41670: GREATER
41671: IFFALSE 41783
// begin for i = 2 to result do
41673: LD_ADDR_VAR 0 3
41677: PUSH
41678: DOUBLE
41679: LD_INT 2
41681: DEC
41682: ST_TO_ADDR
41683: LD_VAR 0 2
41687: PUSH
41688: FOR_TO
41689: IFFALSE 41781
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41691: LD_ADDR_VAR 0 4
41695: PUSH
41696: LD_VAR 0 2
41700: PUSH
41701: LD_VAR 0 3
41705: ARRAY
41706: PPUSH
41707: LD_INT 3
41709: PPUSH
41710: CALL_OW 259
41714: PUSH
41715: LD_VAR 0 2
41719: PUSH
41720: LD_VAR 0 3
41724: ARRAY
41725: PPUSH
41726: CALL_OW 432
41730: MINUS
41731: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41732: LD_VAR 0 4
41736: PUSH
41737: LD_VAR 0 5
41741: PPUSH
41742: LD_INT 3
41744: PPUSH
41745: CALL_OW 259
41749: PUSH
41750: LD_VAR 0 5
41754: PPUSH
41755: CALL_OW 432
41759: MINUS
41760: GREATEREQUAL
41761: IFFALSE 41779
// mech := result [ i ] ;
41763: LD_ADDR_VAR 0 5
41767: PUSH
41768: LD_VAR 0 2
41772: PUSH
41773: LD_VAR 0 3
41777: ARRAY
41778: ST_TO_ADDR
// end ;
41779: GO 41688
41781: POP
41782: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41783: LD_VAR 0 1
41787: PPUSH
41788: LD_VAR 0 5
41792: PPUSH
41793: CALL_OW 135
// end ;
41797: LD_VAR 0 2
41801: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41802: LD_INT 0
41804: PPUSH
41805: PPUSH
41806: PPUSH
41807: PPUSH
41808: PPUSH
41809: PPUSH
41810: PPUSH
41811: PPUSH
41812: PPUSH
41813: PPUSH
41814: PPUSH
41815: PPUSH
41816: PPUSH
// result := [ ] ;
41817: LD_ADDR_VAR 0 7
41821: PUSH
41822: EMPTY
41823: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41824: LD_VAR 0 1
41828: PPUSH
41829: CALL_OW 266
41833: PUSH
41834: LD_INT 0
41836: PUSH
41837: LD_INT 1
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: IN
41844: NOT
41845: IFFALSE 41849
// exit ;
41847: GO 43483
// if name then
41849: LD_VAR 0 3
41853: IFFALSE 41869
// SetBName ( base_dep , name ) ;
41855: LD_VAR 0 1
41859: PPUSH
41860: LD_VAR 0 3
41864: PPUSH
41865: CALL_OW 500
// base := GetBase ( base_dep ) ;
41869: LD_ADDR_VAR 0 15
41873: PUSH
41874: LD_VAR 0 1
41878: PPUSH
41879: CALL_OW 274
41883: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41884: LD_ADDR_VAR 0 16
41888: PUSH
41889: LD_VAR 0 1
41893: PPUSH
41894: CALL_OW 255
41898: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41899: LD_ADDR_VAR 0 17
41903: PUSH
41904: LD_VAR 0 1
41908: PPUSH
41909: CALL_OW 248
41913: ST_TO_ADDR
// if sources then
41914: LD_VAR 0 5
41918: IFFALSE 41965
// for i = 1 to 3 do
41920: LD_ADDR_VAR 0 8
41924: PUSH
41925: DOUBLE
41926: LD_INT 1
41928: DEC
41929: ST_TO_ADDR
41930: LD_INT 3
41932: PUSH
41933: FOR_TO
41934: IFFALSE 41963
// AddResourceType ( base , i , sources [ i ] ) ;
41936: LD_VAR 0 15
41940: PPUSH
41941: LD_VAR 0 8
41945: PPUSH
41946: LD_VAR 0 5
41950: PUSH
41951: LD_VAR 0 8
41955: ARRAY
41956: PPUSH
41957: CALL_OW 276
41961: GO 41933
41963: POP
41964: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41965: LD_ADDR_VAR 0 18
41969: PUSH
41970: LD_VAR 0 15
41974: PPUSH
41975: LD_VAR 0 2
41979: PPUSH
41980: LD_INT 1
41982: PPUSH
41983: CALL 41226 0 3
41987: ST_TO_ADDR
// InitHc ;
41988: CALL_OW 19
// InitUc ;
41992: CALL_OW 18
// uc_side := side ;
41996: LD_ADDR_OWVAR 20
42000: PUSH
42001: LD_VAR 0 16
42005: ST_TO_ADDR
// uc_nation := nation ;
42006: LD_ADDR_OWVAR 21
42010: PUSH
42011: LD_VAR 0 17
42015: ST_TO_ADDR
// if buildings then
42016: LD_VAR 0 18
42020: IFFALSE 43342
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42022: LD_ADDR_VAR 0 19
42026: PUSH
42027: LD_VAR 0 18
42031: PPUSH
42032: LD_INT 2
42034: PUSH
42035: LD_INT 30
42037: PUSH
42038: LD_INT 29
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 30
42047: PUSH
42048: LD_INT 30
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: LIST
42059: PPUSH
42060: CALL_OW 72
42064: ST_TO_ADDR
// if tmp then
42065: LD_VAR 0 19
42069: IFFALSE 42117
// for i in tmp do
42071: LD_ADDR_VAR 0 8
42075: PUSH
42076: LD_VAR 0 19
42080: PUSH
42081: FOR_IN
42082: IFFALSE 42115
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42084: LD_VAR 0 8
42088: PPUSH
42089: CALL_OW 250
42093: PPUSH
42094: LD_VAR 0 8
42098: PPUSH
42099: CALL_OW 251
42103: PPUSH
42104: LD_VAR 0 16
42108: PPUSH
42109: CALL_OW 441
42113: GO 42081
42115: POP
42116: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42117: LD_VAR 0 18
42121: PPUSH
42122: LD_INT 2
42124: PUSH
42125: LD_INT 30
42127: PUSH
42128: LD_INT 32
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 30
42137: PUSH
42138: LD_INT 33
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: LIST
42149: PPUSH
42150: CALL_OW 72
42154: IFFALSE 42242
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42156: LD_ADDR_VAR 0 8
42160: PUSH
42161: LD_VAR 0 18
42165: PPUSH
42166: LD_INT 2
42168: PUSH
42169: LD_INT 30
42171: PUSH
42172: LD_INT 32
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 30
42181: PUSH
42182: LD_INT 33
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: LIST
42193: PPUSH
42194: CALL_OW 72
42198: PUSH
42199: FOR_IN
42200: IFFALSE 42240
// begin if not GetBWeapon ( i ) then
42202: LD_VAR 0 8
42206: PPUSH
42207: CALL_OW 269
42211: NOT
42212: IFFALSE 42238
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42214: LD_VAR 0 8
42218: PPUSH
42219: LD_VAR 0 8
42223: PPUSH
42224: LD_VAR 0 2
42228: PPUSH
42229: CALL 43488 0 2
42233: PPUSH
42234: CALL_OW 431
// end ;
42238: GO 42199
42240: POP
42241: POP
// end ; for i = 1 to personel do
42242: LD_ADDR_VAR 0 8
42246: PUSH
42247: DOUBLE
42248: LD_INT 1
42250: DEC
42251: ST_TO_ADDR
42252: LD_VAR 0 6
42256: PUSH
42257: FOR_TO
42258: IFFALSE 43322
// begin if i > 4 then
42260: LD_VAR 0 8
42264: PUSH
42265: LD_INT 4
42267: GREATER
42268: IFFALSE 42272
// break ;
42270: GO 43322
// case i of 1 :
42272: LD_VAR 0 8
42276: PUSH
42277: LD_INT 1
42279: DOUBLE
42280: EQUAL
42281: IFTRUE 42285
42283: GO 42365
42285: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42286: LD_ADDR_VAR 0 12
42290: PUSH
42291: LD_VAR 0 18
42295: PPUSH
42296: LD_INT 22
42298: PUSH
42299: LD_VAR 0 16
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 58
42310: PUSH
42311: EMPTY
42312: LIST
42313: PUSH
42314: LD_INT 2
42316: PUSH
42317: LD_INT 30
42319: PUSH
42320: LD_INT 32
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 30
42329: PUSH
42330: LD_INT 4
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 30
42339: PUSH
42340: LD_INT 5
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: LIST
42357: PPUSH
42358: CALL_OW 72
42362: ST_TO_ADDR
42363: GO 42587
42365: LD_INT 2
42367: DOUBLE
42368: EQUAL
42369: IFTRUE 42373
42371: GO 42435
42373: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42374: LD_ADDR_VAR 0 12
42378: PUSH
42379: LD_VAR 0 18
42383: PPUSH
42384: LD_INT 22
42386: PUSH
42387: LD_VAR 0 16
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 2
42398: PUSH
42399: LD_INT 30
42401: PUSH
42402: LD_INT 0
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 30
42411: PUSH
42412: LD_INT 1
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: LIST
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PPUSH
42428: CALL_OW 72
42432: ST_TO_ADDR
42433: GO 42587
42435: LD_INT 3
42437: DOUBLE
42438: EQUAL
42439: IFTRUE 42443
42441: GO 42505
42443: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42444: LD_ADDR_VAR 0 12
42448: PUSH
42449: LD_VAR 0 18
42453: PPUSH
42454: LD_INT 22
42456: PUSH
42457: LD_VAR 0 16
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 2
42468: PUSH
42469: LD_INT 30
42471: PUSH
42472: LD_INT 2
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 30
42481: PUSH
42482: LD_INT 3
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: LIST
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PPUSH
42498: CALL_OW 72
42502: ST_TO_ADDR
42503: GO 42587
42505: LD_INT 4
42507: DOUBLE
42508: EQUAL
42509: IFTRUE 42513
42511: GO 42586
42513: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42514: LD_ADDR_VAR 0 12
42518: PUSH
42519: LD_VAR 0 18
42523: PPUSH
42524: LD_INT 22
42526: PUSH
42527: LD_VAR 0 16
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 2
42538: PUSH
42539: LD_INT 30
42541: PUSH
42542: LD_INT 6
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 30
42551: PUSH
42552: LD_INT 7
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 30
42561: PUSH
42562: LD_INT 8
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PPUSH
42579: CALL_OW 72
42583: ST_TO_ADDR
42584: GO 42587
42586: POP
// if i = 1 then
42587: LD_VAR 0 8
42591: PUSH
42592: LD_INT 1
42594: EQUAL
42595: IFFALSE 42706
// begin tmp := [ ] ;
42597: LD_ADDR_VAR 0 19
42601: PUSH
42602: EMPTY
42603: ST_TO_ADDR
// for j in f do
42604: LD_ADDR_VAR 0 9
42608: PUSH
42609: LD_VAR 0 12
42613: PUSH
42614: FOR_IN
42615: IFFALSE 42688
// if GetBType ( j ) = b_bunker then
42617: LD_VAR 0 9
42621: PPUSH
42622: CALL_OW 266
42626: PUSH
42627: LD_INT 32
42629: EQUAL
42630: IFFALSE 42657
// tmp := Insert ( tmp , 1 , j ) else
42632: LD_ADDR_VAR 0 19
42636: PUSH
42637: LD_VAR 0 19
42641: PPUSH
42642: LD_INT 1
42644: PPUSH
42645: LD_VAR 0 9
42649: PPUSH
42650: CALL_OW 2
42654: ST_TO_ADDR
42655: GO 42686
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42657: LD_ADDR_VAR 0 19
42661: PUSH
42662: LD_VAR 0 19
42666: PPUSH
42667: LD_VAR 0 19
42671: PUSH
42672: LD_INT 1
42674: PLUS
42675: PPUSH
42676: LD_VAR 0 9
42680: PPUSH
42681: CALL_OW 2
42685: ST_TO_ADDR
42686: GO 42614
42688: POP
42689: POP
// if tmp then
42690: LD_VAR 0 19
42694: IFFALSE 42706
// f := tmp ;
42696: LD_ADDR_VAR 0 12
42700: PUSH
42701: LD_VAR 0 19
42705: ST_TO_ADDR
// end ; x := personel [ i ] ;
42706: LD_ADDR_VAR 0 13
42710: PUSH
42711: LD_VAR 0 6
42715: PUSH
42716: LD_VAR 0 8
42720: ARRAY
42721: ST_TO_ADDR
// if x = - 1 then
42722: LD_VAR 0 13
42726: PUSH
42727: LD_INT 1
42729: NEG
42730: EQUAL
42731: IFFALSE 42940
// begin for j in f do
42733: LD_ADDR_VAR 0 9
42737: PUSH
42738: LD_VAR 0 12
42742: PUSH
42743: FOR_IN
42744: IFFALSE 42936
// repeat InitHc ;
42746: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42750: LD_VAR 0 9
42754: PPUSH
42755: CALL_OW 266
42759: PUSH
42760: LD_INT 5
42762: EQUAL
42763: IFFALSE 42833
// begin if UnitsInside ( j ) < 3 then
42765: LD_VAR 0 9
42769: PPUSH
42770: CALL_OW 313
42774: PUSH
42775: LD_INT 3
42777: LESS
42778: IFFALSE 42814
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42780: LD_INT 0
42782: PPUSH
42783: LD_INT 5
42785: PUSH
42786: LD_INT 8
42788: PUSH
42789: LD_INT 9
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: LIST
42796: PUSH
42797: LD_VAR 0 17
42801: ARRAY
42802: PPUSH
42803: LD_VAR 0 4
42807: PPUSH
42808: CALL_OW 380
42812: GO 42831
// PrepareHuman ( false , i , skill ) ;
42814: LD_INT 0
42816: PPUSH
42817: LD_VAR 0 8
42821: PPUSH
42822: LD_VAR 0 4
42826: PPUSH
42827: CALL_OW 380
// end else
42831: GO 42850
// PrepareHuman ( false , i , skill ) ;
42833: LD_INT 0
42835: PPUSH
42836: LD_VAR 0 8
42840: PPUSH
42841: LD_VAR 0 4
42845: PPUSH
42846: CALL_OW 380
// un := CreateHuman ;
42850: LD_ADDR_VAR 0 14
42854: PUSH
42855: CALL_OW 44
42859: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42860: LD_ADDR_VAR 0 7
42864: PUSH
42865: LD_VAR 0 7
42869: PPUSH
42870: LD_INT 1
42872: PPUSH
42873: LD_VAR 0 14
42877: PPUSH
42878: CALL_OW 2
42882: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42883: LD_VAR 0 14
42887: PPUSH
42888: LD_VAR 0 9
42892: PPUSH
42893: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42897: LD_VAR 0 9
42901: PPUSH
42902: CALL_OW 313
42906: PUSH
42907: LD_INT 6
42909: EQUAL
42910: PUSH
42911: LD_VAR 0 9
42915: PPUSH
42916: CALL_OW 266
42920: PUSH
42921: LD_INT 32
42923: PUSH
42924: LD_INT 31
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: IN
42931: OR
42932: IFFALSE 42746
42934: GO 42743
42936: POP
42937: POP
// end else
42938: GO 43320
// for j = 1 to x do
42940: LD_ADDR_VAR 0 9
42944: PUSH
42945: DOUBLE
42946: LD_INT 1
42948: DEC
42949: ST_TO_ADDR
42950: LD_VAR 0 13
42954: PUSH
42955: FOR_TO
42956: IFFALSE 43318
// begin InitHc ;
42958: CALL_OW 19
// if not f then
42962: LD_VAR 0 12
42966: NOT
42967: IFFALSE 43056
// begin PrepareHuman ( false , i , skill ) ;
42969: LD_INT 0
42971: PPUSH
42972: LD_VAR 0 8
42976: PPUSH
42977: LD_VAR 0 4
42981: PPUSH
42982: CALL_OW 380
// un := CreateHuman ;
42986: LD_ADDR_VAR 0 14
42990: PUSH
42991: CALL_OW 44
42995: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42996: LD_ADDR_VAR 0 7
43000: PUSH
43001: LD_VAR 0 7
43005: PPUSH
43006: LD_INT 1
43008: PPUSH
43009: LD_VAR 0 14
43013: PPUSH
43014: CALL_OW 2
43018: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43019: LD_VAR 0 14
43023: PPUSH
43024: LD_VAR 0 1
43028: PPUSH
43029: CALL_OW 250
43033: PPUSH
43034: LD_VAR 0 1
43038: PPUSH
43039: CALL_OW 251
43043: PPUSH
43044: LD_INT 10
43046: PPUSH
43047: LD_INT 0
43049: PPUSH
43050: CALL_OW 50
// continue ;
43054: GO 42955
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43056: LD_VAR 0 12
43060: PUSH
43061: LD_INT 1
43063: ARRAY
43064: PPUSH
43065: CALL_OW 313
43069: PUSH
43070: LD_VAR 0 12
43074: PUSH
43075: LD_INT 1
43077: ARRAY
43078: PPUSH
43079: CALL_OW 266
43083: PUSH
43084: LD_INT 32
43086: PUSH
43087: LD_INT 31
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: IN
43094: AND
43095: PUSH
43096: LD_VAR 0 12
43100: PUSH
43101: LD_INT 1
43103: ARRAY
43104: PPUSH
43105: CALL_OW 313
43109: PUSH
43110: LD_INT 6
43112: EQUAL
43113: OR
43114: IFFALSE 43134
// f := Delete ( f , 1 ) ;
43116: LD_ADDR_VAR 0 12
43120: PUSH
43121: LD_VAR 0 12
43125: PPUSH
43126: LD_INT 1
43128: PPUSH
43129: CALL_OW 3
43133: ST_TO_ADDR
// if not f then
43134: LD_VAR 0 12
43138: NOT
43139: IFFALSE 43157
// begin x := x + 2 ;
43141: LD_ADDR_VAR 0 13
43145: PUSH
43146: LD_VAR 0 13
43150: PUSH
43151: LD_INT 2
43153: PLUS
43154: ST_TO_ADDR
// continue ;
43155: GO 42955
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43157: LD_VAR 0 12
43161: PUSH
43162: LD_INT 1
43164: ARRAY
43165: PPUSH
43166: CALL_OW 266
43170: PUSH
43171: LD_INT 5
43173: EQUAL
43174: IFFALSE 43248
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43176: LD_VAR 0 12
43180: PUSH
43181: LD_INT 1
43183: ARRAY
43184: PPUSH
43185: CALL_OW 313
43189: PUSH
43190: LD_INT 3
43192: LESS
43193: IFFALSE 43229
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43195: LD_INT 0
43197: PPUSH
43198: LD_INT 5
43200: PUSH
43201: LD_INT 8
43203: PUSH
43204: LD_INT 9
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: LIST
43211: PUSH
43212: LD_VAR 0 17
43216: ARRAY
43217: PPUSH
43218: LD_VAR 0 4
43222: PPUSH
43223: CALL_OW 380
43227: GO 43246
// PrepareHuman ( false , i , skill ) ;
43229: LD_INT 0
43231: PPUSH
43232: LD_VAR 0 8
43236: PPUSH
43237: LD_VAR 0 4
43241: PPUSH
43242: CALL_OW 380
// end else
43246: GO 43265
// PrepareHuman ( false , i , skill ) ;
43248: LD_INT 0
43250: PPUSH
43251: LD_VAR 0 8
43255: PPUSH
43256: LD_VAR 0 4
43260: PPUSH
43261: CALL_OW 380
// un := CreateHuman ;
43265: LD_ADDR_VAR 0 14
43269: PUSH
43270: CALL_OW 44
43274: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43275: LD_ADDR_VAR 0 7
43279: PUSH
43280: LD_VAR 0 7
43284: PPUSH
43285: LD_INT 1
43287: PPUSH
43288: LD_VAR 0 14
43292: PPUSH
43293: CALL_OW 2
43297: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43298: LD_VAR 0 14
43302: PPUSH
43303: LD_VAR 0 12
43307: PUSH
43308: LD_INT 1
43310: ARRAY
43311: PPUSH
43312: CALL_OW 52
// end ;
43316: GO 42955
43318: POP
43319: POP
// end ;
43320: GO 42257
43322: POP
43323: POP
// result := result ^ buildings ;
43324: LD_ADDR_VAR 0 7
43328: PUSH
43329: LD_VAR 0 7
43333: PUSH
43334: LD_VAR 0 18
43338: ADD
43339: ST_TO_ADDR
// end else
43340: GO 43483
// begin for i = 1 to personel do
43342: LD_ADDR_VAR 0 8
43346: PUSH
43347: DOUBLE
43348: LD_INT 1
43350: DEC
43351: ST_TO_ADDR
43352: LD_VAR 0 6
43356: PUSH
43357: FOR_TO
43358: IFFALSE 43481
// begin if i > 4 then
43360: LD_VAR 0 8
43364: PUSH
43365: LD_INT 4
43367: GREATER
43368: IFFALSE 43372
// break ;
43370: GO 43481
// x := personel [ i ] ;
43372: LD_ADDR_VAR 0 13
43376: PUSH
43377: LD_VAR 0 6
43381: PUSH
43382: LD_VAR 0 8
43386: ARRAY
43387: ST_TO_ADDR
// if x = - 1 then
43388: LD_VAR 0 13
43392: PUSH
43393: LD_INT 1
43395: NEG
43396: EQUAL
43397: IFFALSE 43401
// continue ;
43399: GO 43357
// PrepareHuman ( false , i , skill ) ;
43401: LD_INT 0
43403: PPUSH
43404: LD_VAR 0 8
43408: PPUSH
43409: LD_VAR 0 4
43413: PPUSH
43414: CALL_OW 380
// un := CreateHuman ;
43418: LD_ADDR_VAR 0 14
43422: PUSH
43423: CALL_OW 44
43427: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43428: LD_VAR 0 14
43432: PPUSH
43433: LD_VAR 0 1
43437: PPUSH
43438: CALL_OW 250
43442: PPUSH
43443: LD_VAR 0 1
43447: PPUSH
43448: CALL_OW 251
43452: PPUSH
43453: LD_INT 10
43455: PPUSH
43456: LD_INT 0
43458: PPUSH
43459: CALL_OW 50
// result := result ^ un ;
43463: LD_ADDR_VAR 0 7
43467: PUSH
43468: LD_VAR 0 7
43472: PUSH
43473: LD_VAR 0 14
43477: ADD
43478: ST_TO_ADDR
// end ;
43479: GO 43357
43481: POP
43482: POP
// end ; end ;
43483: LD_VAR 0 7
43487: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43488: LD_INT 0
43490: PPUSH
43491: PPUSH
43492: PPUSH
43493: PPUSH
43494: PPUSH
43495: PPUSH
43496: PPUSH
43497: PPUSH
43498: PPUSH
43499: PPUSH
43500: PPUSH
43501: PPUSH
43502: PPUSH
43503: PPUSH
43504: PPUSH
43505: PPUSH
// result := false ;
43506: LD_ADDR_VAR 0 3
43510: PUSH
43511: LD_INT 0
43513: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43514: LD_VAR 0 1
43518: NOT
43519: PUSH
43520: LD_VAR 0 1
43524: PPUSH
43525: CALL_OW 266
43529: PUSH
43530: LD_INT 32
43532: PUSH
43533: LD_INT 33
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: IN
43540: NOT
43541: OR
43542: IFFALSE 43546
// exit ;
43544: GO 44655
// nat := GetNation ( tower ) ;
43546: LD_ADDR_VAR 0 12
43550: PUSH
43551: LD_VAR 0 1
43555: PPUSH
43556: CALL_OW 248
43560: ST_TO_ADDR
// side := GetSide ( tower ) ;
43561: LD_ADDR_VAR 0 16
43565: PUSH
43566: LD_VAR 0 1
43570: PPUSH
43571: CALL_OW 255
43575: ST_TO_ADDR
// x := GetX ( tower ) ;
43576: LD_ADDR_VAR 0 10
43580: PUSH
43581: LD_VAR 0 1
43585: PPUSH
43586: CALL_OW 250
43590: ST_TO_ADDR
// y := GetY ( tower ) ;
43591: LD_ADDR_VAR 0 11
43595: PUSH
43596: LD_VAR 0 1
43600: PPUSH
43601: CALL_OW 251
43605: ST_TO_ADDR
// if not x or not y then
43606: LD_VAR 0 10
43610: NOT
43611: PUSH
43612: LD_VAR 0 11
43616: NOT
43617: OR
43618: IFFALSE 43622
// exit ;
43620: GO 44655
// weapon := 0 ;
43622: LD_ADDR_VAR 0 18
43626: PUSH
43627: LD_INT 0
43629: ST_TO_ADDR
// fac_list := [ ] ;
43630: LD_ADDR_VAR 0 17
43634: PUSH
43635: EMPTY
43636: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43637: LD_ADDR_VAR 0 6
43641: PUSH
43642: LD_VAR 0 1
43646: PPUSH
43647: CALL_OW 274
43651: PPUSH
43652: LD_VAR 0 2
43656: PPUSH
43657: LD_INT 0
43659: PPUSH
43660: CALL 41226 0 3
43664: PPUSH
43665: LD_INT 30
43667: PUSH
43668: LD_INT 3
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PPUSH
43675: CALL_OW 72
43679: ST_TO_ADDR
// if not factories then
43680: LD_VAR 0 6
43684: NOT
43685: IFFALSE 43689
// exit ;
43687: GO 44655
// for i in factories do
43689: LD_ADDR_VAR 0 8
43693: PUSH
43694: LD_VAR 0 6
43698: PUSH
43699: FOR_IN
43700: IFFALSE 43725
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43702: LD_ADDR_VAR 0 17
43706: PUSH
43707: LD_VAR 0 17
43711: PUSH
43712: LD_VAR 0 8
43716: PPUSH
43717: CALL_OW 478
43721: UNION
43722: ST_TO_ADDR
43723: GO 43699
43725: POP
43726: POP
// if not fac_list then
43727: LD_VAR 0 17
43731: NOT
43732: IFFALSE 43736
// exit ;
43734: GO 44655
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43736: LD_ADDR_VAR 0 5
43740: PUSH
43741: LD_INT 4
43743: PUSH
43744: LD_INT 5
43746: PUSH
43747: LD_INT 9
43749: PUSH
43750: LD_INT 10
43752: PUSH
43753: LD_INT 6
43755: PUSH
43756: LD_INT 7
43758: PUSH
43759: LD_INT 11
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 27
43773: PUSH
43774: LD_INT 28
43776: PUSH
43777: LD_INT 26
43779: PUSH
43780: LD_INT 30
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 43
43791: PUSH
43792: LD_INT 44
43794: PUSH
43795: LD_INT 46
43797: PUSH
43798: LD_INT 45
43800: PUSH
43801: LD_INT 47
43803: PUSH
43804: LD_INT 49
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: LIST
43819: PUSH
43820: LD_VAR 0 12
43824: ARRAY
43825: ST_TO_ADDR
// list := list isect fac_list ;
43826: LD_ADDR_VAR 0 5
43830: PUSH
43831: LD_VAR 0 5
43835: PUSH
43836: LD_VAR 0 17
43840: ISECT
43841: ST_TO_ADDR
// if not list then
43842: LD_VAR 0 5
43846: NOT
43847: IFFALSE 43851
// exit ;
43849: GO 44655
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43851: LD_VAR 0 12
43855: PUSH
43856: LD_INT 3
43858: EQUAL
43859: PUSH
43860: LD_INT 49
43862: PUSH
43863: LD_VAR 0 5
43867: IN
43868: AND
43869: PUSH
43870: LD_INT 31
43872: PPUSH
43873: LD_VAR 0 16
43877: PPUSH
43878: CALL_OW 321
43882: PUSH
43883: LD_INT 2
43885: EQUAL
43886: AND
43887: IFFALSE 43947
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43889: LD_INT 22
43891: PUSH
43892: LD_VAR 0 16
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 35
43903: PUSH
43904: LD_INT 49
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 91
43913: PUSH
43914: LD_VAR 0 1
43918: PUSH
43919: LD_INT 10
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: LIST
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: LIST
43931: PPUSH
43932: CALL_OW 69
43936: NOT
43937: IFFALSE 43947
// weapon := ru_time_lapser ;
43939: LD_ADDR_VAR 0 18
43943: PUSH
43944: LD_INT 49
43946: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43947: LD_VAR 0 12
43951: PUSH
43952: LD_INT 1
43954: PUSH
43955: LD_INT 2
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: IN
43962: PUSH
43963: LD_INT 11
43965: PUSH
43966: LD_VAR 0 5
43970: IN
43971: PUSH
43972: LD_INT 30
43974: PUSH
43975: LD_VAR 0 5
43979: IN
43980: OR
43981: AND
43982: PUSH
43983: LD_INT 6
43985: PPUSH
43986: LD_VAR 0 16
43990: PPUSH
43991: CALL_OW 321
43995: PUSH
43996: LD_INT 2
43998: EQUAL
43999: AND
44000: IFFALSE 44165
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44002: LD_INT 22
44004: PUSH
44005: LD_VAR 0 16
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 2
44016: PUSH
44017: LD_INT 35
44019: PUSH
44020: LD_INT 11
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 35
44029: PUSH
44030: LD_INT 30
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 91
44044: PUSH
44045: LD_VAR 0 1
44049: PUSH
44050: LD_INT 18
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: LIST
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: LIST
44062: PPUSH
44063: CALL_OW 69
44067: NOT
44068: PUSH
44069: LD_INT 22
44071: PUSH
44072: LD_VAR 0 16
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 2
44083: PUSH
44084: LD_INT 30
44086: PUSH
44087: LD_INT 32
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 30
44096: PUSH
44097: LD_INT 33
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 91
44111: PUSH
44112: LD_VAR 0 1
44116: PUSH
44117: LD_INT 12
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: LIST
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: LIST
44129: PUSH
44130: EMPTY
44131: LIST
44132: PPUSH
44133: CALL_OW 69
44137: PUSH
44138: LD_INT 2
44140: GREATER
44141: AND
44142: IFFALSE 44165
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44144: LD_ADDR_VAR 0 18
44148: PUSH
44149: LD_INT 11
44151: PUSH
44152: LD_INT 30
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_VAR 0 12
44163: ARRAY
44164: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44165: LD_VAR 0 18
44169: NOT
44170: PUSH
44171: LD_INT 40
44173: PPUSH
44174: LD_VAR 0 16
44178: PPUSH
44179: CALL_OW 321
44183: PUSH
44184: LD_INT 2
44186: EQUAL
44187: AND
44188: PUSH
44189: LD_INT 7
44191: PUSH
44192: LD_VAR 0 5
44196: IN
44197: PUSH
44198: LD_INT 28
44200: PUSH
44201: LD_VAR 0 5
44205: IN
44206: OR
44207: PUSH
44208: LD_INT 45
44210: PUSH
44211: LD_VAR 0 5
44215: IN
44216: OR
44217: AND
44218: IFFALSE 44472
// begin hex := GetHexInfo ( x , y ) ;
44220: LD_ADDR_VAR 0 4
44224: PUSH
44225: LD_VAR 0 10
44229: PPUSH
44230: LD_VAR 0 11
44234: PPUSH
44235: CALL_OW 546
44239: ST_TO_ADDR
// if hex [ 1 ] then
44240: LD_VAR 0 4
44244: PUSH
44245: LD_INT 1
44247: ARRAY
44248: IFFALSE 44252
// exit ;
44250: GO 44655
// height := hex [ 2 ] ;
44252: LD_ADDR_VAR 0 15
44256: PUSH
44257: LD_VAR 0 4
44261: PUSH
44262: LD_INT 2
44264: ARRAY
44265: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44266: LD_ADDR_VAR 0 14
44270: PUSH
44271: LD_INT 0
44273: PUSH
44274: LD_INT 2
44276: PUSH
44277: LD_INT 3
44279: PUSH
44280: LD_INT 5
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: ST_TO_ADDR
// for i in tmp do
44289: LD_ADDR_VAR 0 8
44293: PUSH
44294: LD_VAR 0 14
44298: PUSH
44299: FOR_IN
44300: IFFALSE 44470
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44302: LD_ADDR_VAR 0 9
44306: PUSH
44307: LD_VAR 0 10
44311: PPUSH
44312: LD_VAR 0 8
44316: PPUSH
44317: LD_INT 5
44319: PPUSH
44320: CALL_OW 272
44324: PUSH
44325: LD_VAR 0 11
44329: PPUSH
44330: LD_VAR 0 8
44334: PPUSH
44335: LD_INT 5
44337: PPUSH
44338: CALL_OW 273
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44347: LD_VAR 0 9
44351: PUSH
44352: LD_INT 1
44354: ARRAY
44355: PPUSH
44356: LD_VAR 0 9
44360: PUSH
44361: LD_INT 2
44363: ARRAY
44364: PPUSH
44365: CALL_OW 488
44369: IFFALSE 44468
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44371: LD_ADDR_VAR 0 4
44375: PUSH
44376: LD_VAR 0 9
44380: PUSH
44381: LD_INT 1
44383: ARRAY
44384: PPUSH
44385: LD_VAR 0 9
44389: PUSH
44390: LD_INT 2
44392: ARRAY
44393: PPUSH
44394: CALL_OW 546
44398: ST_TO_ADDR
// if hex [ 1 ] then
44399: LD_VAR 0 4
44403: PUSH
44404: LD_INT 1
44406: ARRAY
44407: IFFALSE 44411
// continue ;
44409: GO 44299
// h := hex [ 2 ] ;
44411: LD_ADDR_VAR 0 13
44415: PUSH
44416: LD_VAR 0 4
44420: PUSH
44421: LD_INT 2
44423: ARRAY
44424: ST_TO_ADDR
// if h + 7 < height then
44425: LD_VAR 0 13
44429: PUSH
44430: LD_INT 7
44432: PLUS
44433: PUSH
44434: LD_VAR 0 15
44438: LESS
44439: IFFALSE 44468
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44441: LD_ADDR_VAR 0 18
44445: PUSH
44446: LD_INT 7
44448: PUSH
44449: LD_INT 28
44451: PUSH
44452: LD_INT 45
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: LIST
44459: PUSH
44460: LD_VAR 0 12
44464: ARRAY
44465: ST_TO_ADDR
// break ;
44466: GO 44470
// end ; end ; end ;
44468: GO 44299
44470: POP
44471: POP
// end ; if not weapon then
44472: LD_VAR 0 18
44476: NOT
44477: IFFALSE 44537
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44479: LD_ADDR_VAR 0 5
44483: PUSH
44484: LD_VAR 0 5
44488: PUSH
44489: LD_INT 11
44491: PUSH
44492: LD_INT 30
44494: PUSH
44495: LD_INT 49
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: LIST
44502: DIFF
44503: ST_TO_ADDR
// if not list then
44504: LD_VAR 0 5
44508: NOT
44509: IFFALSE 44513
// exit ;
44511: GO 44655
// weapon := list [ rand ( 1 , list ) ] ;
44513: LD_ADDR_VAR 0 18
44517: PUSH
44518: LD_VAR 0 5
44522: PUSH
44523: LD_INT 1
44525: PPUSH
44526: LD_VAR 0 5
44530: PPUSH
44531: CALL_OW 12
44535: ARRAY
44536: ST_TO_ADDR
// end ; if weapon then
44537: LD_VAR 0 18
44541: IFFALSE 44655
// begin tmp := CostOfWeapon ( weapon ) ;
44543: LD_ADDR_VAR 0 14
44547: PUSH
44548: LD_VAR 0 18
44552: PPUSH
44553: CALL_OW 451
44557: ST_TO_ADDR
// j := GetBase ( tower ) ;
44558: LD_ADDR_VAR 0 9
44562: PUSH
44563: LD_VAR 0 1
44567: PPUSH
44568: CALL_OW 274
44572: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44573: LD_VAR 0 9
44577: PPUSH
44578: LD_INT 1
44580: PPUSH
44581: CALL_OW 275
44585: PUSH
44586: LD_VAR 0 14
44590: PUSH
44591: LD_INT 1
44593: ARRAY
44594: GREATEREQUAL
44595: PUSH
44596: LD_VAR 0 9
44600: PPUSH
44601: LD_INT 2
44603: PPUSH
44604: CALL_OW 275
44608: PUSH
44609: LD_VAR 0 14
44613: PUSH
44614: LD_INT 2
44616: ARRAY
44617: GREATEREQUAL
44618: AND
44619: PUSH
44620: LD_VAR 0 9
44624: PPUSH
44625: LD_INT 3
44627: PPUSH
44628: CALL_OW 275
44632: PUSH
44633: LD_VAR 0 14
44637: PUSH
44638: LD_INT 3
44640: ARRAY
44641: GREATEREQUAL
44642: AND
44643: IFFALSE 44655
// result := weapon ;
44645: LD_ADDR_VAR 0 3
44649: PUSH
44650: LD_VAR 0 18
44654: ST_TO_ADDR
// end ; end ;
44655: LD_VAR 0 3
44659: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44660: LD_INT 0
44662: PPUSH
44663: PPUSH
// result := true ;
44664: LD_ADDR_VAR 0 3
44668: PUSH
44669: LD_INT 1
44671: ST_TO_ADDR
// if array1 = array2 then
44672: LD_VAR 0 1
44676: PUSH
44677: LD_VAR 0 2
44681: EQUAL
44682: IFFALSE 44742
// begin for i = 1 to array1 do
44684: LD_ADDR_VAR 0 4
44688: PUSH
44689: DOUBLE
44690: LD_INT 1
44692: DEC
44693: ST_TO_ADDR
44694: LD_VAR 0 1
44698: PUSH
44699: FOR_TO
44700: IFFALSE 44738
// if array1 [ i ] <> array2 [ i ] then
44702: LD_VAR 0 1
44706: PUSH
44707: LD_VAR 0 4
44711: ARRAY
44712: PUSH
44713: LD_VAR 0 2
44717: PUSH
44718: LD_VAR 0 4
44722: ARRAY
44723: NONEQUAL
44724: IFFALSE 44736
// begin result := false ;
44726: LD_ADDR_VAR 0 3
44730: PUSH
44731: LD_INT 0
44733: ST_TO_ADDR
// break ;
44734: GO 44738
// end ;
44736: GO 44699
44738: POP
44739: POP
// end else
44740: GO 44750
// result := false ;
44742: LD_ADDR_VAR 0 3
44746: PUSH
44747: LD_INT 0
44749: ST_TO_ADDR
// end ;
44750: LD_VAR 0 3
44754: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44755: LD_INT 0
44757: PPUSH
44758: PPUSH
// if not array1 or not array2 then
44759: LD_VAR 0 1
44763: NOT
44764: PUSH
44765: LD_VAR 0 2
44769: NOT
44770: OR
44771: IFFALSE 44775
// exit ;
44773: GO 44839
// result := true ;
44775: LD_ADDR_VAR 0 3
44779: PUSH
44780: LD_INT 1
44782: ST_TO_ADDR
// for i = 1 to array1 do
44783: LD_ADDR_VAR 0 4
44787: PUSH
44788: DOUBLE
44789: LD_INT 1
44791: DEC
44792: ST_TO_ADDR
44793: LD_VAR 0 1
44797: PUSH
44798: FOR_TO
44799: IFFALSE 44837
// if array1 [ i ] <> array2 [ i ] then
44801: LD_VAR 0 1
44805: PUSH
44806: LD_VAR 0 4
44810: ARRAY
44811: PUSH
44812: LD_VAR 0 2
44816: PUSH
44817: LD_VAR 0 4
44821: ARRAY
44822: NONEQUAL
44823: IFFALSE 44835
// begin result := false ;
44825: LD_ADDR_VAR 0 3
44829: PUSH
44830: LD_INT 0
44832: ST_TO_ADDR
// break ;
44833: GO 44837
// end ;
44835: GO 44798
44837: POP
44838: POP
// end ;
44839: LD_VAR 0 3
44843: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44844: LD_INT 0
44846: PPUSH
44847: PPUSH
44848: PPUSH
// pom := GetBase ( fac ) ;
44849: LD_ADDR_VAR 0 5
44853: PUSH
44854: LD_VAR 0 1
44858: PPUSH
44859: CALL_OW 274
44863: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44864: LD_ADDR_VAR 0 4
44868: PUSH
44869: LD_VAR 0 2
44873: PUSH
44874: LD_INT 1
44876: ARRAY
44877: PPUSH
44878: LD_VAR 0 2
44882: PUSH
44883: LD_INT 2
44885: ARRAY
44886: PPUSH
44887: LD_VAR 0 2
44891: PUSH
44892: LD_INT 3
44894: ARRAY
44895: PPUSH
44896: LD_VAR 0 2
44900: PUSH
44901: LD_INT 4
44903: ARRAY
44904: PPUSH
44905: CALL_OW 449
44909: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44910: LD_ADDR_VAR 0 3
44914: PUSH
44915: LD_VAR 0 5
44919: PPUSH
44920: LD_INT 1
44922: PPUSH
44923: CALL_OW 275
44927: PUSH
44928: LD_VAR 0 4
44932: PUSH
44933: LD_INT 1
44935: ARRAY
44936: GREATEREQUAL
44937: PUSH
44938: LD_VAR 0 5
44942: PPUSH
44943: LD_INT 2
44945: PPUSH
44946: CALL_OW 275
44950: PUSH
44951: LD_VAR 0 4
44955: PUSH
44956: LD_INT 2
44958: ARRAY
44959: GREATEREQUAL
44960: AND
44961: PUSH
44962: LD_VAR 0 5
44966: PPUSH
44967: LD_INT 3
44969: PPUSH
44970: CALL_OW 275
44974: PUSH
44975: LD_VAR 0 4
44979: PUSH
44980: LD_INT 3
44982: ARRAY
44983: GREATEREQUAL
44984: AND
44985: ST_TO_ADDR
// end ;
44986: LD_VAR 0 3
44990: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44991: LD_INT 0
44993: PPUSH
44994: PPUSH
44995: PPUSH
44996: PPUSH
// pom := GetBase ( building ) ;
44997: LD_ADDR_VAR 0 3
45001: PUSH
45002: LD_VAR 0 1
45006: PPUSH
45007: CALL_OW 274
45011: ST_TO_ADDR
// if not pom then
45012: LD_VAR 0 3
45016: NOT
45017: IFFALSE 45021
// exit ;
45019: GO 45191
// btype := GetBType ( building ) ;
45021: LD_ADDR_VAR 0 5
45025: PUSH
45026: LD_VAR 0 1
45030: PPUSH
45031: CALL_OW 266
45035: ST_TO_ADDR
// if btype = b_armoury then
45036: LD_VAR 0 5
45040: PUSH
45041: LD_INT 4
45043: EQUAL
45044: IFFALSE 45054
// btype := b_barracks ;
45046: LD_ADDR_VAR 0 5
45050: PUSH
45051: LD_INT 5
45053: ST_TO_ADDR
// if btype = b_depot then
45054: LD_VAR 0 5
45058: PUSH
45059: LD_INT 0
45061: EQUAL
45062: IFFALSE 45072
// btype := b_warehouse ;
45064: LD_ADDR_VAR 0 5
45068: PUSH
45069: LD_INT 1
45071: ST_TO_ADDR
// if btype = b_workshop then
45072: LD_VAR 0 5
45076: PUSH
45077: LD_INT 2
45079: EQUAL
45080: IFFALSE 45090
// btype := b_factory ;
45082: LD_ADDR_VAR 0 5
45086: PUSH
45087: LD_INT 3
45089: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45090: LD_ADDR_VAR 0 4
45094: PUSH
45095: LD_VAR 0 5
45099: PPUSH
45100: LD_VAR 0 1
45104: PPUSH
45105: CALL_OW 248
45109: PPUSH
45110: CALL_OW 450
45114: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45115: LD_ADDR_VAR 0 2
45119: PUSH
45120: LD_VAR 0 3
45124: PPUSH
45125: LD_INT 1
45127: PPUSH
45128: CALL_OW 275
45132: PUSH
45133: LD_VAR 0 4
45137: PUSH
45138: LD_INT 1
45140: ARRAY
45141: GREATEREQUAL
45142: PUSH
45143: LD_VAR 0 3
45147: PPUSH
45148: LD_INT 2
45150: PPUSH
45151: CALL_OW 275
45155: PUSH
45156: LD_VAR 0 4
45160: PUSH
45161: LD_INT 2
45163: ARRAY
45164: GREATEREQUAL
45165: AND
45166: PUSH
45167: LD_VAR 0 3
45171: PPUSH
45172: LD_INT 3
45174: PPUSH
45175: CALL_OW 275
45179: PUSH
45180: LD_VAR 0 4
45184: PUSH
45185: LD_INT 3
45187: ARRAY
45188: GREATEREQUAL
45189: AND
45190: ST_TO_ADDR
// end ;
45191: LD_VAR 0 2
45195: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45196: LD_INT 0
45198: PPUSH
45199: PPUSH
45200: PPUSH
// pom := GetBase ( building ) ;
45201: LD_ADDR_VAR 0 4
45205: PUSH
45206: LD_VAR 0 1
45210: PPUSH
45211: CALL_OW 274
45215: ST_TO_ADDR
// if not pom then
45216: LD_VAR 0 4
45220: NOT
45221: IFFALSE 45225
// exit ;
45223: GO 45326
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45225: LD_ADDR_VAR 0 5
45229: PUSH
45230: LD_VAR 0 2
45234: PPUSH
45235: LD_VAR 0 1
45239: PPUSH
45240: CALL_OW 248
45244: PPUSH
45245: CALL_OW 450
45249: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45250: LD_ADDR_VAR 0 3
45254: PUSH
45255: LD_VAR 0 4
45259: PPUSH
45260: LD_INT 1
45262: PPUSH
45263: CALL_OW 275
45267: PUSH
45268: LD_VAR 0 5
45272: PUSH
45273: LD_INT 1
45275: ARRAY
45276: GREATEREQUAL
45277: PUSH
45278: LD_VAR 0 4
45282: PPUSH
45283: LD_INT 2
45285: PPUSH
45286: CALL_OW 275
45290: PUSH
45291: LD_VAR 0 5
45295: PUSH
45296: LD_INT 2
45298: ARRAY
45299: GREATEREQUAL
45300: AND
45301: PUSH
45302: LD_VAR 0 4
45306: PPUSH
45307: LD_INT 3
45309: PPUSH
45310: CALL_OW 275
45314: PUSH
45315: LD_VAR 0 5
45319: PUSH
45320: LD_INT 3
45322: ARRAY
45323: GREATEREQUAL
45324: AND
45325: ST_TO_ADDR
// end ;
45326: LD_VAR 0 3
45330: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45331: LD_INT 0
45333: PPUSH
45334: PPUSH
45335: PPUSH
45336: PPUSH
45337: PPUSH
45338: PPUSH
45339: PPUSH
45340: PPUSH
45341: PPUSH
45342: PPUSH
45343: PPUSH
// result := false ;
45344: LD_ADDR_VAR 0 8
45348: PUSH
45349: LD_INT 0
45351: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45352: LD_VAR 0 5
45356: NOT
45357: PUSH
45358: LD_VAR 0 1
45362: NOT
45363: OR
45364: PUSH
45365: LD_VAR 0 2
45369: NOT
45370: OR
45371: PUSH
45372: LD_VAR 0 3
45376: NOT
45377: OR
45378: IFFALSE 45382
// exit ;
45380: GO 46196
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
45382: LD_ADDR_VAR 0 14
45386: PUSH
45387: LD_VAR 0 1
45391: PPUSH
45392: LD_VAR 0 2
45396: PPUSH
45397: LD_VAR 0 3
45401: PPUSH
45402: LD_VAR 0 4
45406: PPUSH
45407: LD_VAR 0 5
45411: PUSH
45412: LD_INT 1
45414: ARRAY
45415: PPUSH
45416: CALL_OW 248
45420: PPUSH
45421: LD_INT 0
45423: PPUSH
45424: CALL 47433 0 6
45428: ST_TO_ADDR
// if not hexes then
45429: LD_VAR 0 14
45433: NOT
45434: IFFALSE 45438
// exit ;
45436: GO 46196
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45438: LD_ADDR_VAR 0 17
45442: PUSH
45443: LD_VAR 0 5
45447: PPUSH
45448: LD_INT 22
45450: PUSH
45451: LD_VAR 0 13
45455: PPUSH
45456: CALL_OW 255
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 2
45467: PUSH
45468: LD_INT 30
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 30
45480: PUSH
45481: LD_INT 1
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: LIST
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PPUSH
45497: CALL_OW 72
45501: ST_TO_ADDR
// for i = 1 to hexes do
45502: LD_ADDR_VAR 0 9
45506: PUSH
45507: DOUBLE
45508: LD_INT 1
45510: DEC
45511: ST_TO_ADDR
45512: LD_VAR 0 14
45516: PUSH
45517: FOR_TO
45518: IFFALSE 46194
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45520: LD_ADDR_VAR 0 13
45524: PUSH
45525: LD_VAR 0 14
45529: PUSH
45530: LD_VAR 0 9
45534: ARRAY
45535: PUSH
45536: LD_INT 1
45538: ARRAY
45539: PPUSH
45540: LD_VAR 0 14
45544: PUSH
45545: LD_VAR 0 9
45549: ARRAY
45550: PUSH
45551: LD_INT 2
45553: ARRAY
45554: PPUSH
45555: CALL_OW 428
45559: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45560: LD_VAR 0 14
45564: PUSH
45565: LD_VAR 0 9
45569: ARRAY
45570: PUSH
45571: LD_INT 1
45573: ARRAY
45574: PPUSH
45575: LD_VAR 0 14
45579: PUSH
45580: LD_VAR 0 9
45584: ARRAY
45585: PUSH
45586: LD_INT 2
45588: ARRAY
45589: PPUSH
45590: CALL_OW 351
45594: PUSH
45595: LD_VAR 0 14
45599: PUSH
45600: LD_VAR 0 9
45604: ARRAY
45605: PUSH
45606: LD_INT 1
45608: ARRAY
45609: PPUSH
45610: LD_VAR 0 14
45614: PUSH
45615: LD_VAR 0 9
45619: ARRAY
45620: PUSH
45621: LD_INT 2
45623: ARRAY
45624: PPUSH
45625: CALL_OW 488
45629: NOT
45630: OR
45631: PUSH
45632: LD_VAR 0 13
45636: PPUSH
45637: CALL_OW 247
45641: PUSH
45642: LD_INT 3
45644: EQUAL
45645: OR
45646: IFFALSE 45652
// exit ;
45648: POP
45649: POP
45650: GO 46196
// if not tmp then
45652: LD_VAR 0 13
45656: NOT
45657: IFFALSE 45661
// continue ;
45659: GO 45517
// result := true ;
45661: LD_ADDR_VAR 0 8
45665: PUSH
45666: LD_INT 1
45668: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45669: LD_VAR 0 6
45673: PUSH
45674: LD_VAR 0 13
45678: PPUSH
45679: CALL_OW 247
45683: PUSH
45684: LD_INT 2
45686: EQUAL
45687: AND
45688: PUSH
45689: LD_VAR 0 13
45693: PPUSH
45694: CALL_OW 263
45698: PUSH
45699: LD_INT 1
45701: EQUAL
45702: AND
45703: IFFALSE 45867
// begin if IsDrivenBy ( tmp ) then
45705: LD_VAR 0 13
45709: PPUSH
45710: CALL_OW 311
45714: IFFALSE 45718
// continue ;
45716: GO 45517
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45718: LD_VAR 0 6
45722: PPUSH
45723: LD_INT 3
45725: PUSH
45726: LD_INT 60
45728: PUSH
45729: EMPTY
45730: LIST
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 3
45738: PUSH
45739: LD_INT 55
45741: PUSH
45742: EMPTY
45743: LIST
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PPUSH
45753: CALL_OW 72
45757: IFFALSE 45865
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45759: LD_ADDR_VAR 0 18
45763: PUSH
45764: LD_VAR 0 6
45768: PPUSH
45769: LD_INT 3
45771: PUSH
45772: LD_INT 60
45774: PUSH
45775: EMPTY
45776: LIST
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 3
45784: PUSH
45785: LD_INT 55
45787: PUSH
45788: EMPTY
45789: LIST
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PPUSH
45799: CALL_OW 72
45803: PUSH
45804: LD_INT 1
45806: ARRAY
45807: ST_TO_ADDR
// if IsInUnit ( driver ) then
45808: LD_VAR 0 18
45812: PPUSH
45813: CALL_OW 310
45817: IFFALSE 45828
// ComExit ( driver ) ;
45819: LD_VAR 0 18
45823: PPUSH
45824: CALL 70561 0 1
// AddComEnterUnit ( driver , tmp ) ;
45828: LD_VAR 0 18
45832: PPUSH
45833: LD_VAR 0 13
45837: PPUSH
45838: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45842: LD_VAR 0 18
45846: PPUSH
45847: LD_VAR 0 7
45851: PPUSH
45852: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45856: LD_VAR 0 18
45860: PPUSH
45861: CALL_OW 181
// end ; continue ;
45865: GO 45517
// end ; if not cleaners or not tmp in cleaners then
45867: LD_VAR 0 6
45871: NOT
45872: PUSH
45873: LD_VAR 0 13
45877: PUSH
45878: LD_VAR 0 6
45882: IN
45883: NOT
45884: OR
45885: IFFALSE 46192
// begin if dep then
45887: LD_VAR 0 17
45891: IFFALSE 46027
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45893: LD_ADDR_VAR 0 16
45897: PUSH
45898: LD_VAR 0 17
45902: PUSH
45903: LD_INT 1
45905: ARRAY
45906: PPUSH
45907: CALL_OW 250
45911: PPUSH
45912: LD_VAR 0 17
45916: PUSH
45917: LD_INT 1
45919: ARRAY
45920: PPUSH
45921: CALL_OW 254
45925: PPUSH
45926: LD_INT 5
45928: PPUSH
45929: CALL_OW 272
45933: PUSH
45934: LD_VAR 0 17
45938: PUSH
45939: LD_INT 1
45941: ARRAY
45942: PPUSH
45943: CALL_OW 251
45947: PPUSH
45948: LD_VAR 0 17
45952: PUSH
45953: LD_INT 1
45955: ARRAY
45956: PPUSH
45957: CALL_OW 254
45961: PPUSH
45962: LD_INT 5
45964: PPUSH
45965: CALL_OW 273
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45974: LD_VAR 0 16
45978: PUSH
45979: LD_INT 1
45981: ARRAY
45982: PPUSH
45983: LD_VAR 0 16
45987: PUSH
45988: LD_INT 2
45990: ARRAY
45991: PPUSH
45992: CALL_OW 488
45996: IFFALSE 46027
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45998: LD_VAR 0 13
46002: PPUSH
46003: LD_VAR 0 16
46007: PUSH
46008: LD_INT 1
46010: ARRAY
46011: PPUSH
46012: LD_VAR 0 16
46016: PUSH
46017: LD_INT 2
46019: ARRAY
46020: PPUSH
46021: CALL_OW 111
// continue ;
46025: GO 45517
// end ; end ; r := GetDir ( tmp ) ;
46027: LD_ADDR_VAR 0 15
46031: PUSH
46032: LD_VAR 0 13
46036: PPUSH
46037: CALL_OW 254
46041: ST_TO_ADDR
// if r = 5 then
46042: LD_VAR 0 15
46046: PUSH
46047: LD_INT 5
46049: EQUAL
46050: IFFALSE 46060
// r := 0 ;
46052: LD_ADDR_VAR 0 15
46056: PUSH
46057: LD_INT 0
46059: ST_TO_ADDR
// for j = r to 5 do
46060: LD_ADDR_VAR 0 10
46064: PUSH
46065: DOUBLE
46066: LD_VAR 0 15
46070: DEC
46071: ST_TO_ADDR
46072: LD_INT 5
46074: PUSH
46075: FOR_TO
46076: IFFALSE 46190
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46078: LD_ADDR_VAR 0 11
46082: PUSH
46083: LD_VAR 0 13
46087: PPUSH
46088: CALL_OW 250
46092: PPUSH
46093: LD_VAR 0 10
46097: PPUSH
46098: LD_INT 2
46100: PPUSH
46101: CALL_OW 272
46105: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46106: LD_ADDR_VAR 0 12
46110: PUSH
46111: LD_VAR 0 13
46115: PPUSH
46116: CALL_OW 251
46120: PPUSH
46121: LD_VAR 0 10
46125: PPUSH
46126: LD_INT 2
46128: PPUSH
46129: CALL_OW 273
46133: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46134: LD_VAR 0 11
46138: PPUSH
46139: LD_VAR 0 12
46143: PPUSH
46144: CALL_OW 488
46148: PUSH
46149: LD_VAR 0 11
46153: PPUSH
46154: LD_VAR 0 12
46158: PPUSH
46159: CALL_OW 428
46163: NOT
46164: AND
46165: IFFALSE 46188
// begin ComMoveXY ( tmp , _x , _y ) ;
46167: LD_VAR 0 13
46171: PPUSH
46172: LD_VAR 0 11
46176: PPUSH
46177: LD_VAR 0 12
46181: PPUSH
46182: CALL_OW 111
// break ;
46186: GO 46190
// end ; end ;
46188: GO 46075
46190: POP
46191: POP
// end ; end ;
46192: GO 45517
46194: POP
46195: POP
// end ;
46196: LD_VAR 0 8
46200: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46201: LD_INT 0
46203: PPUSH
// result := true ;
46204: LD_ADDR_VAR 0 3
46208: PUSH
46209: LD_INT 1
46211: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46212: LD_VAR 0 2
46216: PUSH
46217: LD_INT 24
46219: DOUBLE
46220: EQUAL
46221: IFTRUE 46231
46223: LD_INT 33
46225: DOUBLE
46226: EQUAL
46227: IFTRUE 46231
46229: GO 46256
46231: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46232: LD_ADDR_VAR 0 3
46236: PUSH
46237: LD_INT 32
46239: PPUSH
46240: LD_VAR 0 1
46244: PPUSH
46245: CALL_OW 321
46249: PUSH
46250: LD_INT 2
46252: EQUAL
46253: ST_TO_ADDR
46254: GO 46576
46256: LD_INT 20
46258: DOUBLE
46259: EQUAL
46260: IFTRUE 46264
46262: GO 46289
46264: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46265: LD_ADDR_VAR 0 3
46269: PUSH
46270: LD_INT 6
46272: PPUSH
46273: LD_VAR 0 1
46277: PPUSH
46278: CALL_OW 321
46282: PUSH
46283: LD_INT 2
46285: EQUAL
46286: ST_TO_ADDR
46287: GO 46576
46289: LD_INT 22
46291: DOUBLE
46292: EQUAL
46293: IFTRUE 46303
46295: LD_INT 36
46297: DOUBLE
46298: EQUAL
46299: IFTRUE 46303
46301: GO 46328
46303: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46304: LD_ADDR_VAR 0 3
46308: PUSH
46309: LD_INT 15
46311: PPUSH
46312: LD_VAR 0 1
46316: PPUSH
46317: CALL_OW 321
46321: PUSH
46322: LD_INT 2
46324: EQUAL
46325: ST_TO_ADDR
46326: GO 46576
46328: LD_INT 30
46330: DOUBLE
46331: EQUAL
46332: IFTRUE 46336
46334: GO 46361
46336: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46337: LD_ADDR_VAR 0 3
46341: PUSH
46342: LD_INT 20
46344: PPUSH
46345: LD_VAR 0 1
46349: PPUSH
46350: CALL_OW 321
46354: PUSH
46355: LD_INT 2
46357: EQUAL
46358: ST_TO_ADDR
46359: GO 46576
46361: LD_INT 28
46363: DOUBLE
46364: EQUAL
46365: IFTRUE 46375
46367: LD_INT 21
46369: DOUBLE
46370: EQUAL
46371: IFTRUE 46375
46373: GO 46400
46375: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
46376: LD_ADDR_VAR 0 3
46380: PUSH
46381: LD_INT 21
46383: PPUSH
46384: LD_VAR 0 1
46388: PPUSH
46389: CALL_OW 321
46393: PUSH
46394: LD_INT 2
46396: EQUAL
46397: ST_TO_ADDR
46398: GO 46576
46400: LD_INT 16
46402: DOUBLE
46403: EQUAL
46404: IFTRUE 46408
46406: GO 46435
46408: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
46409: LD_ADDR_VAR 0 3
46413: PUSH
46414: LD_EXP 56
46418: PPUSH
46419: LD_VAR 0 1
46423: PPUSH
46424: CALL_OW 321
46428: PUSH
46429: LD_INT 2
46431: EQUAL
46432: ST_TO_ADDR
46433: GO 46576
46435: LD_INT 19
46437: DOUBLE
46438: EQUAL
46439: IFTRUE 46449
46441: LD_INT 23
46443: DOUBLE
46444: EQUAL
46445: IFTRUE 46449
46447: GO 46476
46449: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
46450: LD_ADDR_VAR 0 3
46454: PUSH
46455: LD_EXP 55
46459: PPUSH
46460: LD_VAR 0 1
46464: PPUSH
46465: CALL_OW 321
46469: PUSH
46470: LD_INT 2
46472: EQUAL
46473: ST_TO_ADDR
46474: GO 46576
46476: LD_INT 17
46478: DOUBLE
46479: EQUAL
46480: IFTRUE 46484
46482: GO 46509
46484: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
46485: LD_ADDR_VAR 0 3
46489: PUSH
46490: LD_INT 39
46492: PPUSH
46493: LD_VAR 0 1
46497: PPUSH
46498: CALL_OW 321
46502: PUSH
46503: LD_INT 2
46505: EQUAL
46506: ST_TO_ADDR
46507: GO 46576
46509: LD_INT 18
46511: DOUBLE
46512: EQUAL
46513: IFTRUE 46517
46515: GO 46542
46517: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46518: LD_ADDR_VAR 0 3
46522: PUSH
46523: LD_INT 40
46525: PPUSH
46526: LD_VAR 0 1
46530: PPUSH
46531: CALL_OW 321
46535: PUSH
46536: LD_INT 2
46538: EQUAL
46539: ST_TO_ADDR
46540: GO 46576
46542: LD_INT 27
46544: DOUBLE
46545: EQUAL
46546: IFTRUE 46550
46548: GO 46575
46550: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46551: LD_ADDR_VAR 0 3
46555: PUSH
46556: LD_INT 35
46558: PPUSH
46559: LD_VAR 0 1
46563: PPUSH
46564: CALL_OW 321
46568: PUSH
46569: LD_INT 2
46571: EQUAL
46572: ST_TO_ADDR
46573: GO 46576
46575: POP
// end ;
46576: LD_VAR 0 3
46580: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46581: LD_INT 0
46583: PPUSH
46584: PPUSH
46585: PPUSH
46586: PPUSH
46587: PPUSH
46588: PPUSH
46589: PPUSH
46590: PPUSH
46591: PPUSH
46592: PPUSH
46593: PPUSH
// result := false ;
46594: LD_ADDR_VAR 0 6
46598: PUSH
46599: LD_INT 0
46601: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46602: LD_VAR 0 1
46606: NOT
46607: PUSH
46608: LD_VAR 0 1
46612: PPUSH
46613: CALL_OW 266
46617: PUSH
46618: LD_INT 0
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: IN
46628: NOT
46629: OR
46630: PUSH
46631: LD_VAR 0 2
46635: NOT
46636: OR
46637: PUSH
46638: LD_VAR 0 5
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: LD_INT 1
46648: PUSH
46649: LD_INT 2
46651: PUSH
46652: LD_INT 3
46654: PUSH
46655: LD_INT 4
46657: PUSH
46658: LD_INT 5
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: IN
46669: NOT
46670: OR
46671: PUSH
46672: LD_VAR 0 3
46676: PPUSH
46677: LD_VAR 0 4
46681: PPUSH
46682: CALL_OW 488
46686: NOT
46687: OR
46688: IFFALSE 46692
// exit ;
46690: GO 47428
// side := GetSide ( depot ) ;
46692: LD_ADDR_VAR 0 9
46696: PUSH
46697: LD_VAR 0 1
46701: PPUSH
46702: CALL_OW 255
46706: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46707: LD_VAR 0 9
46711: PPUSH
46712: LD_VAR 0 2
46716: PPUSH
46717: CALL 46201 0 2
46721: NOT
46722: IFFALSE 46726
// exit ;
46724: GO 47428
// pom := GetBase ( depot ) ;
46726: LD_ADDR_VAR 0 10
46730: PUSH
46731: LD_VAR 0 1
46735: PPUSH
46736: CALL_OW 274
46740: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46741: LD_ADDR_VAR 0 11
46745: PUSH
46746: LD_VAR 0 2
46750: PPUSH
46751: LD_VAR 0 1
46755: PPUSH
46756: CALL_OW 248
46760: PPUSH
46761: CALL_OW 450
46765: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46766: LD_VAR 0 10
46770: PPUSH
46771: LD_INT 1
46773: PPUSH
46774: CALL_OW 275
46778: PUSH
46779: LD_VAR 0 11
46783: PUSH
46784: LD_INT 1
46786: ARRAY
46787: GREATEREQUAL
46788: PUSH
46789: LD_VAR 0 10
46793: PPUSH
46794: LD_INT 2
46796: PPUSH
46797: CALL_OW 275
46801: PUSH
46802: LD_VAR 0 11
46806: PUSH
46807: LD_INT 2
46809: ARRAY
46810: GREATEREQUAL
46811: AND
46812: PUSH
46813: LD_VAR 0 10
46817: PPUSH
46818: LD_INT 3
46820: PPUSH
46821: CALL_OW 275
46825: PUSH
46826: LD_VAR 0 11
46830: PUSH
46831: LD_INT 3
46833: ARRAY
46834: GREATEREQUAL
46835: AND
46836: NOT
46837: IFFALSE 46841
// exit ;
46839: GO 47428
// if GetBType ( depot ) = b_depot then
46841: LD_VAR 0 1
46845: PPUSH
46846: CALL_OW 266
46850: PUSH
46851: LD_INT 0
46853: EQUAL
46854: IFFALSE 46866
// dist := 28 else
46856: LD_ADDR_VAR 0 14
46860: PUSH
46861: LD_INT 28
46863: ST_TO_ADDR
46864: GO 46874
// dist := 36 ;
46866: LD_ADDR_VAR 0 14
46870: PUSH
46871: LD_INT 36
46873: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46874: LD_VAR 0 1
46878: PPUSH
46879: LD_VAR 0 3
46883: PPUSH
46884: LD_VAR 0 4
46888: PPUSH
46889: CALL_OW 297
46893: PUSH
46894: LD_VAR 0 14
46898: GREATER
46899: IFFALSE 46903
// exit ;
46901: GO 47428
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46903: LD_ADDR_VAR 0 12
46907: PUSH
46908: LD_VAR 0 2
46912: PPUSH
46913: LD_VAR 0 3
46917: PPUSH
46918: LD_VAR 0 4
46922: PPUSH
46923: LD_VAR 0 5
46927: PPUSH
46928: LD_VAR 0 1
46932: PPUSH
46933: CALL_OW 248
46937: PPUSH
46938: LD_INT 0
46940: PPUSH
46941: CALL 47433 0 6
46945: ST_TO_ADDR
// if not hexes then
46946: LD_VAR 0 12
46950: NOT
46951: IFFALSE 46955
// exit ;
46953: GO 47428
// hex := GetHexInfo ( x , y ) ;
46955: LD_ADDR_VAR 0 15
46959: PUSH
46960: LD_VAR 0 3
46964: PPUSH
46965: LD_VAR 0 4
46969: PPUSH
46970: CALL_OW 546
46974: ST_TO_ADDR
// if hex [ 1 ] then
46975: LD_VAR 0 15
46979: PUSH
46980: LD_INT 1
46982: ARRAY
46983: IFFALSE 46987
// exit ;
46985: GO 47428
// height := hex [ 2 ] ;
46987: LD_ADDR_VAR 0 13
46991: PUSH
46992: LD_VAR 0 15
46996: PUSH
46997: LD_INT 2
46999: ARRAY
47000: ST_TO_ADDR
// for i = 1 to hexes do
47001: LD_ADDR_VAR 0 7
47005: PUSH
47006: DOUBLE
47007: LD_INT 1
47009: DEC
47010: ST_TO_ADDR
47011: LD_VAR 0 12
47015: PUSH
47016: FOR_TO
47017: IFFALSE 47347
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47019: LD_VAR 0 12
47023: PUSH
47024: LD_VAR 0 7
47028: ARRAY
47029: PUSH
47030: LD_INT 1
47032: ARRAY
47033: PPUSH
47034: LD_VAR 0 12
47038: PUSH
47039: LD_VAR 0 7
47043: ARRAY
47044: PUSH
47045: LD_INT 2
47047: ARRAY
47048: PPUSH
47049: CALL_OW 488
47053: NOT
47054: PUSH
47055: LD_VAR 0 12
47059: PUSH
47060: LD_VAR 0 7
47064: ARRAY
47065: PUSH
47066: LD_INT 1
47068: ARRAY
47069: PPUSH
47070: LD_VAR 0 12
47074: PUSH
47075: LD_VAR 0 7
47079: ARRAY
47080: PUSH
47081: LD_INT 2
47083: ARRAY
47084: PPUSH
47085: CALL_OW 428
47089: PUSH
47090: LD_INT 0
47092: GREATER
47093: OR
47094: PUSH
47095: LD_VAR 0 12
47099: PUSH
47100: LD_VAR 0 7
47104: ARRAY
47105: PUSH
47106: LD_INT 1
47108: ARRAY
47109: PPUSH
47110: LD_VAR 0 12
47114: PUSH
47115: LD_VAR 0 7
47119: ARRAY
47120: PUSH
47121: LD_INT 2
47123: ARRAY
47124: PPUSH
47125: CALL_OW 351
47129: OR
47130: IFFALSE 47136
// exit ;
47132: POP
47133: POP
47134: GO 47428
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47136: LD_ADDR_VAR 0 8
47140: PUSH
47141: LD_VAR 0 12
47145: PUSH
47146: LD_VAR 0 7
47150: ARRAY
47151: PUSH
47152: LD_INT 1
47154: ARRAY
47155: PPUSH
47156: LD_VAR 0 12
47160: PUSH
47161: LD_VAR 0 7
47165: ARRAY
47166: PUSH
47167: LD_INT 2
47169: ARRAY
47170: PPUSH
47171: CALL_OW 546
47175: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47176: LD_VAR 0 8
47180: PUSH
47181: LD_INT 1
47183: ARRAY
47184: PUSH
47185: LD_VAR 0 8
47189: PUSH
47190: LD_INT 2
47192: ARRAY
47193: PUSH
47194: LD_VAR 0 13
47198: PUSH
47199: LD_INT 2
47201: PLUS
47202: GREATER
47203: OR
47204: PUSH
47205: LD_VAR 0 8
47209: PUSH
47210: LD_INT 2
47212: ARRAY
47213: PUSH
47214: LD_VAR 0 13
47218: PUSH
47219: LD_INT 2
47221: MINUS
47222: LESS
47223: OR
47224: PUSH
47225: LD_VAR 0 8
47229: PUSH
47230: LD_INT 3
47232: ARRAY
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: LD_INT 8
47239: PUSH
47240: LD_INT 9
47242: PUSH
47243: LD_INT 10
47245: PUSH
47246: LD_INT 11
47248: PUSH
47249: LD_INT 12
47251: PUSH
47252: LD_INT 13
47254: PUSH
47255: LD_INT 16
47257: PUSH
47258: LD_INT 17
47260: PUSH
47261: LD_INT 18
47263: PUSH
47264: LD_INT 19
47266: PUSH
47267: LD_INT 20
47269: PUSH
47270: LD_INT 21
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: IN
47288: NOT
47289: OR
47290: PUSH
47291: LD_VAR 0 8
47295: PUSH
47296: LD_INT 5
47298: ARRAY
47299: NOT
47300: OR
47301: PUSH
47302: LD_VAR 0 8
47306: PUSH
47307: LD_INT 6
47309: ARRAY
47310: PUSH
47311: LD_INT 1
47313: PUSH
47314: LD_INT 2
47316: PUSH
47317: LD_INT 7
47319: PUSH
47320: LD_INT 9
47322: PUSH
47323: LD_INT 10
47325: PUSH
47326: LD_INT 11
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: IN
47337: NOT
47338: OR
47339: IFFALSE 47345
// exit ;
47341: POP
47342: POP
47343: GO 47428
// end ;
47345: GO 47016
47347: POP
47348: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47349: LD_VAR 0 9
47353: PPUSH
47354: LD_VAR 0 3
47358: PPUSH
47359: LD_VAR 0 4
47363: PPUSH
47364: LD_INT 20
47366: PPUSH
47367: CALL 39374 0 4
47371: PUSH
47372: LD_INT 4
47374: ARRAY
47375: IFFALSE 47379
// exit ;
47377: GO 47428
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47379: LD_VAR 0 2
47383: PUSH
47384: LD_INT 29
47386: PUSH
47387: LD_INT 30
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: IN
47394: PUSH
47395: LD_VAR 0 3
47399: PPUSH
47400: LD_VAR 0 4
47404: PPUSH
47405: LD_VAR 0 9
47409: PPUSH
47410: CALL_OW 440
47414: NOT
47415: AND
47416: IFFALSE 47420
// exit ;
47418: GO 47428
// result := true ;
47420: LD_ADDR_VAR 0 6
47424: PUSH
47425: LD_INT 1
47427: ST_TO_ADDR
// end ;
47428: LD_VAR 0 6
47432: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
47433: LD_INT 0
47435: PPUSH
47436: PPUSH
47437: PPUSH
47438: PPUSH
47439: PPUSH
47440: PPUSH
47441: PPUSH
47442: PPUSH
47443: PPUSH
47444: PPUSH
47445: PPUSH
47446: PPUSH
47447: PPUSH
47448: PPUSH
47449: PPUSH
47450: PPUSH
47451: PPUSH
47452: PPUSH
47453: PPUSH
47454: PPUSH
47455: PPUSH
47456: PPUSH
47457: PPUSH
47458: PPUSH
47459: PPUSH
47460: PPUSH
47461: PPUSH
47462: PPUSH
47463: PPUSH
47464: PPUSH
47465: PPUSH
47466: PPUSH
47467: PPUSH
47468: PPUSH
47469: PPUSH
47470: PPUSH
47471: PPUSH
47472: PPUSH
47473: PPUSH
47474: PPUSH
47475: PPUSH
47476: PPUSH
47477: PPUSH
47478: PPUSH
47479: PPUSH
47480: PPUSH
47481: PPUSH
47482: PPUSH
47483: PPUSH
47484: PPUSH
47485: PPUSH
47486: PPUSH
47487: PPUSH
47488: PPUSH
47489: PPUSH
47490: PPUSH
47491: PPUSH
47492: PPUSH
// result = [ ] ;
47493: LD_ADDR_VAR 0 7
47497: PUSH
47498: EMPTY
47499: ST_TO_ADDR
// temp_list = [ ] ;
47500: LD_ADDR_VAR 0 9
47504: PUSH
47505: EMPTY
47506: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47507: LD_VAR 0 4
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: LD_INT 1
47517: PUSH
47518: LD_INT 2
47520: PUSH
47521: LD_INT 3
47523: PUSH
47524: LD_INT 4
47526: PUSH
47527: LD_INT 5
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: IN
47538: NOT
47539: PUSH
47540: LD_VAR 0 1
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: LD_INT 1
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: IN
47555: PUSH
47556: LD_VAR 0 5
47560: PUSH
47561: LD_INT 1
47563: PUSH
47564: LD_INT 2
47566: PUSH
47567: LD_INT 3
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: LIST
47574: IN
47575: NOT
47576: AND
47577: OR
47578: IFFALSE 47582
// exit ;
47580: GO 65973
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47582: LD_VAR 0 1
47586: PUSH
47587: LD_INT 6
47589: PUSH
47590: LD_INT 7
47592: PUSH
47593: LD_INT 8
47595: PUSH
47596: LD_INT 13
47598: PUSH
47599: LD_INT 12
47601: PUSH
47602: LD_INT 15
47604: PUSH
47605: LD_INT 11
47607: PUSH
47608: LD_INT 14
47610: PUSH
47611: LD_INT 10
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: IN
47625: IFFALSE 47635
// btype = b_lab ;
47627: LD_ADDR_VAR 0 1
47631: PUSH
47632: LD_INT 6
47634: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47635: LD_VAR 0 6
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: LD_INT 1
47645: PUSH
47646: LD_INT 2
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: LIST
47653: IN
47654: NOT
47655: PUSH
47656: LD_VAR 0 1
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: LD_INT 2
47669: PUSH
47670: LD_INT 3
47672: PUSH
47673: LD_INT 6
47675: PUSH
47676: LD_INT 36
47678: PUSH
47679: LD_INT 4
47681: PUSH
47682: LD_INT 5
47684: PUSH
47685: LD_INT 31
47687: PUSH
47688: LD_INT 32
47690: PUSH
47691: LD_INT 33
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: IN
47707: NOT
47708: PUSH
47709: LD_VAR 0 6
47713: PUSH
47714: LD_INT 1
47716: EQUAL
47717: AND
47718: OR
47719: PUSH
47720: LD_VAR 0 1
47724: PUSH
47725: LD_INT 2
47727: PUSH
47728: LD_INT 3
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: IN
47735: NOT
47736: PUSH
47737: LD_VAR 0 6
47741: PUSH
47742: LD_INT 2
47744: EQUAL
47745: AND
47746: OR
47747: IFFALSE 47757
// mode = 0 ;
47749: LD_ADDR_VAR 0 6
47753: PUSH
47754: LD_INT 0
47756: ST_TO_ADDR
// case mode of 0 :
47757: LD_VAR 0 6
47761: PUSH
47762: LD_INT 0
47764: DOUBLE
47765: EQUAL
47766: IFTRUE 47770
47768: GO 59223
47770: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47771: LD_ADDR_VAR 0 11
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: LD_INT 0
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 0
47788: PUSH
47789: LD_INT 1
47791: NEG
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 1
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 0
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 1
47829: NEG
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 1
47840: NEG
47841: PUSH
47842: LD_INT 1
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 1
47852: NEG
47853: PUSH
47854: LD_INT 2
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: LD_INT 2
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: LD_INT 1
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: LD_INT 2
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 1
47906: NEG
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 1
47917: PUSH
47918: LD_INT 3
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: LD_INT 3
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 1
47937: NEG
47938: PUSH
47939: LD_INT 2
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47964: LD_ADDR_VAR 0 12
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: LD_INT 0
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: PUSH
48003: LD_INT 1
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 0
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 1
48022: NEG
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 1
48033: NEG
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 2
48056: PUSH
48057: LD_INT 0
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 2
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 2
48087: NEG
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 2
48098: NEG
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 2
48110: NEG
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 3
48121: NEG
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 3
48132: NEG
48133: PUSH
48134: LD_INT 1
48136: NEG
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48160: LD_ADDR_VAR 0 13
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: LD_INT 1
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: LD_INT 0
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: LD_INT 2
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: LD_INT 1
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 2
48263: PUSH
48264: LD_INT 2
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 1
48273: PUSH
48274: LD_INT 2
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 2
48283: NEG
48284: PUSH
48285: LD_INT 1
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 2
48295: NEG
48296: PUSH
48297: LD_INT 2
48299: NEG
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 2
48307: NEG
48308: PUSH
48309: LD_INT 3
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 3
48319: NEG
48320: PUSH
48321: LD_INT 2
48323: NEG
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 3
48331: NEG
48332: PUSH
48333: LD_INT 3
48335: NEG
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48359: LD_ADDR_VAR 0 14
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: LD_INT 1
48379: NEG
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 1
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 1
48397: PUSH
48398: LD_INT 1
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 1
48428: NEG
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: LD_INT 2
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 0
48452: PUSH
48453: LD_INT 2
48455: NEG
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 1
48463: PUSH
48464: LD_INT 1
48466: NEG
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 1
48474: PUSH
48475: LD_INT 2
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: LD_INT 2
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: LD_INT 1
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: LD_INT 3
48509: NEG
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: LD_INT 3
48520: NEG
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: LD_INT 2
48531: NEG
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48555: LD_ADDR_VAR 0 15
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: LD_INT 0
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 0
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: LD_INT 1
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 0
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: NEG
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 1
48624: NEG
48625: PUSH
48626: LD_INT 1
48628: NEG
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 1
48636: PUSH
48637: LD_INT 1
48639: NEG
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 2
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 2
48657: PUSH
48658: LD_INT 1
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 1
48667: NEG
48668: PUSH
48669: LD_INT 1
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 2
48678: NEG
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 2
48689: NEG
48690: PUSH
48691: LD_INT 1
48693: NEG
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 2
48701: PUSH
48702: LD_INT 1
48704: NEG
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 3
48712: PUSH
48713: LD_INT 0
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 3
48722: PUSH
48723: LD_INT 1
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48748: LD_ADDR_VAR 0 16
48752: PUSH
48753: LD_INT 0
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 0
48765: PUSH
48766: LD_INT 1
48768: NEG
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 1
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 1
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 0
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 1
48806: NEG
48807: PUSH
48808: LD_INT 0
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 1
48817: NEG
48818: PUSH
48819: LD_INT 1
48821: NEG
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 1
48829: NEG
48830: PUSH
48831: LD_INT 2
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 2
48841: PUSH
48842: LD_INT 1
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 2
48851: PUSH
48852: LD_INT 2
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 1
48861: PUSH
48862: LD_INT 2
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 2
48871: NEG
48872: PUSH
48873: LD_INT 1
48875: NEG
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 2
48883: NEG
48884: PUSH
48885: LD_INT 2
48887: NEG
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 3
48895: PUSH
48896: LD_INT 2
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 3
48905: PUSH
48906: LD_INT 3
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 2
48915: PUSH
48916: LD_INT 3
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48941: LD_ADDR_VAR 0 17
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: LD_INT 0
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: LD_INT 1
48961: NEG
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 1
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 0
48989: PUSH
48990: LD_INT 1
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 1
49010: NEG
49011: PUSH
49012: LD_INT 1
49014: NEG
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 1
49022: NEG
49023: PUSH
49024: LD_INT 2
49026: NEG
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 0
49034: PUSH
49035: LD_INT 2
49037: NEG
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 2
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 2
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 2
49076: PUSH
49077: LD_INT 2
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: LD_INT 2
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 0
49096: PUSH
49097: LD_INT 2
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 1
49106: NEG
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 2
49117: NEG
49118: PUSH
49119: LD_INT 0
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 2
49128: NEG
49129: PUSH
49130: LD_INT 1
49132: NEG
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 2
49140: NEG
49141: PUSH
49142: LD_INT 2
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49171: LD_ADDR_VAR 0 18
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: LD_INT 1
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: LD_INT 0
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 1
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: LD_INT 1
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 1
49229: NEG
49230: PUSH
49231: LD_INT 0
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 1
49240: NEG
49241: PUSH
49242: LD_INT 1
49244: NEG
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: LD_INT 2
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: LD_INT 2
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: LD_INT 1
49278: NEG
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 2
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 2
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 2
49306: PUSH
49307: LD_INT 2
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 1
49316: PUSH
49317: LD_INT 2
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: LD_INT 2
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: NEG
49337: PUSH
49338: LD_INT 1
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 2
49347: NEG
49348: PUSH
49349: LD_INT 0
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 2
49358: NEG
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 2
49370: NEG
49371: PUSH
49372: LD_INT 2
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49401: LD_ADDR_VAR 0 19
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 0
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: LD_INT 1
49421: NEG
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: LD_INT 1
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 0
49449: PUSH
49450: LD_INT 1
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 1
49459: NEG
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: LD_INT 2
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: LD_INT 2
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 2
49516: PUSH
49517: LD_INT 0
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 2
49526: PUSH
49527: LD_INT 1
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 2
49536: PUSH
49537: LD_INT 2
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: LD_INT 2
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: LD_INT 2
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: LD_INT 1
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 2
49577: NEG
49578: PUSH
49579: LD_INT 0
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 2
49588: NEG
49589: PUSH
49590: LD_INT 1
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 2
49600: NEG
49601: PUSH
49602: LD_INT 2
49604: NEG
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49631: LD_ADDR_VAR 0 20
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: LD_INT 0
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: LD_INT 1
49651: NEG
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 1
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 1
49669: PUSH
49670: LD_INT 1
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 1
49689: NEG
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: LD_INT 2
49716: NEG
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: LD_INT 2
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: LD_INT 1
49738: NEG
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 2
49746: PUSH
49747: LD_INT 0
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 2
49756: PUSH
49757: LD_INT 1
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 2
49766: PUSH
49767: LD_INT 2
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 1
49776: PUSH
49777: LD_INT 2
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 0
49786: PUSH
49787: LD_INT 2
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 2
49807: NEG
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 2
49818: NEG
49819: PUSH
49820: LD_INT 1
49822: NEG
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 2
49830: NEG
49831: PUSH
49832: LD_INT 2
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49861: LD_ADDR_VAR 0 21
49865: PUSH
49866: LD_INT 0
49868: PUSH
49869: LD_INT 0
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: LD_INT 1
49881: NEG
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 1
49889: PUSH
49890: LD_INT 0
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 1
49899: PUSH
49900: LD_INT 1
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 0
49909: PUSH
49910: LD_INT 1
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 1
49930: NEG
49931: PUSH
49932: LD_INT 1
49934: NEG
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 1
49942: NEG
49943: PUSH
49944: LD_INT 2
49946: NEG
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: LD_INT 2
49957: NEG
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 1
49965: PUSH
49966: LD_INT 1
49968: NEG
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 2
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 2
49986: PUSH
49987: LD_INT 1
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 2
49996: PUSH
49997: LD_INT 2
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 1
50006: PUSH
50007: LD_INT 2
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: LD_INT 2
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 1
50026: NEG
50027: PUSH
50028: LD_INT 1
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 2
50037: NEG
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 2
50048: NEG
50049: PUSH
50050: LD_INT 1
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 2
50060: NEG
50061: PUSH
50062: LD_INT 2
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50091: LD_ADDR_VAR 0 22
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 0
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 1
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 1
50129: PUSH
50130: LD_INT 1
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 0
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: NEG
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 1
50160: NEG
50161: PUSH
50162: LD_INT 1
50164: NEG
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: LD_INT 2
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 0
50184: PUSH
50185: LD_INT 2
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: PUSH
50196: LD_INT 1
50198: NEG
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 2
50206: PUSH
50207: LD_INT 0
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 2
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 2
50226: PUSH
50227: LD_INT 2
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: LD_INT 2
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 0
50246: PUSH
50247: LD_INT 2
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: NEG
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 2
50267: NEG
50268: PUSH
50269: LD_INT 0
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 2
50278: NEG
50279: PUSH
50280: LD_INT 1
50282: NEG
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 2
50290: NEG
50291: PUSH
50292: LD_INT 2
50294: NEG
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50321: LD_ADDR_VAR 0 23
50325: PUSH
50326: LD_INT 0
50328: PUSH
50329: LD_INT 0
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: LD_INT 1
50341: NEG
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 1
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 0
50369: PUSH
50370: LD_INT 1
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 1
50379: NEG
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 1
50390: NEG
50391: PUSH
50392: LD_INT 1
50394: NEG
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: NEG
50403: PUSH
50404: LD_INT 2
50406: NEG
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: LD_INT 2
50417: NEG
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: LD_INT 1
50428: NEG
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 2
50436: PUSH
50437: LD_INT 0
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 2
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 2
50456: PUSH
50457: LD_INT 2
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 1
50466: PUSH
50467: LD_INT 2
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: LD_INT 2
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: NEG
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 2
50497: NEG
50498: PUSH
50499: LD_INT 0
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 2
50508: NEG
50509: PUSH
50510: LD_INT 1
50512: NEG
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 2
50520: NEG
50521: PUSH
50522: LD_INT 2
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 2
50532: NEG
50533: PUSH
50534: LD_INT 3
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 1
50544: NEG
50545: PUSH
50546: LD_INT 3
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: LD_INT 2
50559: NEG
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 2
50567: PUSH
50568: LD_INT 1
50570: NEG
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50601: LD_ADDR_VAR 0 24
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: LD_INT 1
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: LD_INT 1
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: LD_INT 0
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: LD_INT 1
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 1
50682: NEG
50683: PUSH
50684: LD_INT 2
50686: NEG
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: LD_INT 2
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: LD_INT 1
50708: NEG
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 2
50716: PUSH
50717: LD_INT 0
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 2
50726: PUSH
50727: LD_INT 1
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 2
50736: PUSH
50737: LD_INT 2
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: LD_INT 2
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: LD_INT 2
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 1
50766: NEG
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 2
50777: NEG
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 2
50788: NEG
50789: PUSH
50790: LD_INT 1
50792: NEG
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 2
50800: NEG
50801: PUSH
50802: LD_INT 2
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 1
50812: PUSH
50813: LD_INT 2
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 2
50823: PUSH
50824: LD_INT 1
50826: NEG
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 3
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 3
50844: PUSH
50845: LD_INT 2
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50877: LD_ADDR_VAR 0 25
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 0
50894: PUSH
50895: LD_INT 1
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 1
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 1
50915: PUSH
50916: LD_INT 1
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: LD_INT 1
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 1
50946: NEG
50947: PUSH
50948: LD_INT 1
50950: NEG
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 1
50958: NEG
50959: PUSH
50960: LD_INT 2
50962: NEG
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: LD_INT 2
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 1
50981: PUSH
50982: LD_INT 1
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 2
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 2
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 2
51012: PUSH
51013: LD_INT 2
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 1
51022: PUSH
51023: LD_INT 2
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: LD_INT 2
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 1
51042: NEG
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 2
51053: NEG
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 2
51064: NEG
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 2
51076: NEG
51077: PUSH
51078: LD_INT 2
51080: NEG
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 3
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 3
51098: PUSH
51099: LD_INT 2
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 2
51108: PUSH
51109: LD_INT 3
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: LD_INT 3
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51151: LD_ADDR_VAR 0 26
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: LD_INT 1
51171: NEG
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 1
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: LD_INT 1
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 1
51232: NEG
51233: PUSH
51234: LD_INT 2
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: LD_INT 2
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 2
51266: PUSH
51267: LD_INT 0
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 2
51276: PUSH
51277: LD_INT 1
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 2
51286: PUSH
51287: LD_INT 2
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 1
51296: PUSH
51297: LD_INT 2
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: LD_INT 2
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 2
51327: NEG
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 2
51338: NEG
51339: PUSH
51340: LD_INT 1
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 2
51350: NEG
51351: PUSH
51352: LD_INT 2
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 2
51362: PUSH
51363: LD_INT 3
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 1
51372: PUSH
51373: LD_INT 3
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 1
51382: NEG
51383: PUSH
51384: LD_INT 2
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 2
51393: NEG
51394: PUSH
51395: LD_INT 1
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51427: LD_ADDR_VAR 0 27
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 1
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 1
51485: NEG
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 1
51496: NEG
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: LD_INT 2
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 0
51520: PUSH
51521: LD_INT 2
51523: NEG
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 1
51531: PUSH
51532: LD_INT 1
51534: NEG
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 2
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 2
51552: PUSH
51553: LD_INT 1
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 2
51562: PUSH
51563: LD_INT 2
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 1
51572: PUSH
51573: LD_INT 2
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 0
51582: PUSH
51583: LD_INT 2
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: LD_INT 1
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 2
51603: NEG
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 2
51614: NEG
51615: PUSH
51616: LD_INT 1
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 2
51626: NEG
51627: PUSH
51628: LD_INT 2
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: LD_INT 2
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 2
51649: NEG
51650: PUSH
51651: LD_INT 1
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 3
51660: NEG
51661: PUSH
51662: LD_INT 1
51664: NEG
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 3
51672: NEG
51673: PUSH
51674: LD_INT 2
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51707: LD_ADDR_VAR 0 28
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: LD_INT 0
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: LD_INT 1
51727: NEG
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: LD_INT 1
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 0
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 1
51765: NEG
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 1
51788: NEG
51789: PUSH
51790: LD_INT 2
51792: NEG
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: LD_INT 2
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: PUSH
51812: LD_INT 1
51814: NEG
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 2
51822: PUSH
51823: LD_INT 0
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 2
51832: PUSH
51833: LD_INT 1
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 2
51842: PUSH
51843: LD_INT 2
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 1
51852: PUSH
51853: LD_INT 2
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: LD_INT 2
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: LD_INT 1
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 2
51883: NEG
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 2
51894: NEG
51895: PUSH
51896: LD_INT 1
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 2
51906: NEG
51907: PUSH
51908: LD_INT 2
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 2
51918: NEG
51919: PUSH
51920: LD_INT 3
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 1
51930: NEG
51931: PUSH
51932: LD_INT 3
51934: NEG
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 3
51942: NEG
51943: PUSH
51944: LD_INT 1
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 3
51954: NEG
51955: PUSH
51956: LD_INT 2
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51989: LD_ADDR_VAR 0 29
51993: PUSH
51994: LD_INT 0
51996: PUSH
51997: LD_INT 0
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: LD_INT 1
52009: NEG
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 1
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: PUSH
52028: LD_INT 1
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: LD_INT 1
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 1
52047: NEG
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 1
52058: NEG
52059: PUSH
52060: LD_INT 1
52062: NEG
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 1
52070: NEG
52071: PUSH
52072: LD_INT 2
52074: NEG
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 0
52082: PUSH
52083: LD_INT 2
52085: NEG
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 1
52093: PUSH
52094: LD_INT 1
52096: NEG
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 2
52104: PUSH
52105: LD_INT 0
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 2
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 1
52124: PUSH
52125: LD_INT 2
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 0
52134: PUSH
52135: LD_INT 2
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 1
52144: NEG
52145: PUSH
52146: LD_INT 1
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 2
52155: NEG
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 2
52167: NEG
52168: PUSH
52169: LD_INT 2
52171: NEG
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 2
52179: NEG
52180: PUSH
52181: LD_INT 3
52183: NEG
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 2
52191: PUSH
52192: LD_INT 1
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 3
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: PUSH
52213: LD_INT 3
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 1
52222: NEG
52223: PUSH
52224: LD_INT 2
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 3
52233: NEG
52234: PUSH
52235: LD_INT 2
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52268: LD_ADDR_VAR 0 30
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: LD_INT 0
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: LD_INT 1
52288: NEG
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 1
52296: PUSH
52297: LD_INT 0
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 1
52306: PUSH
52307: LD_INT 1
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: LD_INT 1
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 1
52326: NEG
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 1
52337: NEG
52338: PUSH
52339: LD_INT 1
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 1
52349: NEG
52350: PUSH
52351: LD_INT 2
52353: NEG
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 0
52361: PUSH
52362: LD_INT 2
52364: NEG
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: PUSH
52373: LD_INT 1
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 2
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 2
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 2
52403: PUSH
52404: LD_INT 2
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: LD_INT 2
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: LD_INT 1
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 2
52434: NEG
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 2
52445: NEG
52446: PUSH
52447: LD_INT 1
52449: NEG
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: NEG
52458: PUSH
52459: LD_INT 3
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: LD_INT 2
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 3
52480: PUSH
52481: LD_INT 2
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 2
52490: PUSH
52491: LD_INT 3
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 2
52500: NEG
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 3
52511: NEG
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52546: LD_ADDR_VAR 0 31
52550: PUSH
52551: LD_INT 0
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: LD_INT 1
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 1
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 1
52604: NEG
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: NEG
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 1
52627: NEG
52628: PUSH
52629: LD_INT 2
52631: NEG
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 1
52639: PUSH
52640: LD_INT 1
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 2
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 2
52660: PUSH
52661: LD_INT 1
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 2
52670: PUSH
52671: LD_INT 2
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 1
52680: PUSH
52681: LD_INT 2
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 0
52690: PUSH
52691: LD_INT 2
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 1
52700: NEG
52701: PUSH
52702: LD_INT 1
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 2
52711: NEG
52712: PUSH
52713: LD_INT 1
52715: NEG
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 2
52723: NEG
52724: PUSH
52725: LD_INT 2
52727: NEG
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 2
52735: NEG
52736: PUSH
52737: LD_INT 3
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 2
52747: PUSH
52748: LD_INT 1
52750: NEG
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 3
52758: PUSH
52759: LD_INT 1
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 1
52768: PUSH
52769: LD_INT 3
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 1
52778: NEG
52779: PUSH
52780: LD_INT 2
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 3
52789: NEG
52790: PUSH
52791: LD_INT 2
52793: NEG
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52824: LD_ADDR_VAR 0 32
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: LD_INT 0
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 0
52841: PUSH
52842: LD_INT 1
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 1
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 1
52862: PUSH
52863: LD_INT 1
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 1
52882: NEG
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: LD_INT 2
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: LD_INT 2
52920: NEG
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: LD_INT 1
52931: NEG
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 2
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 2
52949: PUSH
52950: LD_INT 2
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: LD_INT 2
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: LD_INT 2
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 2
52990: NEG
52991: PUSH
52992: LD_INT 0
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 2
53001: NEG
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: LD_INT 3
53017: NEG
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: LD_INT 2
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 3
53036: PUSH
53037: LD_INT 2
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 2
53046: PUSH
53047: LD_INT 3
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 2
53056: NEG
53057: PUSH
53058: LD_INT 1
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 3
53067: NEG
53068: PUSH
53069: LD_INT 1
53071: NEG
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53102: LD_ADDR_VAR 0 33
53106: PUSH
53107: LD_INT 0
53109: PUSH
53110: LD_INT 0
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 0
53119: PUSH
53120: LD_INT 1
53122: NEG
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 1
53140: PUSH
53141: LD_INT 1
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 0
53150: PUSH
53151: LD_INT 1
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 1
53160: NEG
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 1
53171: NEG
53172: PUSH
53173: LD_INT 1
53175: NEG
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 1
53183: NEG
53184: PUSH
53185: LD_INT 2
53187: NEG
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 1
53195: PUSH
53196: LD_INT 1
53198: NEG
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 2
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 2
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: LD_INT 2
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: LD_INT 2
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 2
53257: NEG
53258: PUSH
53259: LD_INT 0
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 2
53268: NEG
53269: PUSH
53270: LD_INT 1
53272: NEG
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 2
53280: NEG
53281: PUSH
53282: LD_INT 2
53284: NEG
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 2
53292: NEG
53293: PUSH
53294: LD_INT 3
53296: NEG
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 2
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 3
53315: PUSH
53316: LD_INT 1
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: LD_INT 3
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 1
53335: NEG
53336: PUSH
53337: LD_INT 2
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 3
53346: NEG
53347: PUSH
53348: LD_INT 2
53350: NEG
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53381: LD_ADDR_VAR 0 34
53385: PUSH
53386: LD_INT 0
53388: PUSH
53389: LD_INT 0
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: LD_INT 1
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 1
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 1
53419: PUSH
53420: LD_INT 1
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: LD_INT 1
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 1
53439: NEG
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 1
53450: NEG
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 1
53462: NEG
53463: PUSH
53464: LD_INT 2
53466: NEG
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 0
53474: PUSH
53475: LD_INT 2
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 1
53485: PUSH
53486: LD_INT 1
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 2
53496: PUSH
53497: LD_INT 1
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 2
53506: PUSH
53507: LD_INT 2
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: PUSH
53517: LD_INT 2
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 1
53526: NEG
53527: PUSH
53528: LD_INT 1
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 2
53537: NEG
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 2
53548: NEG
53549: PUSH
53550: LD_INT 1
53552: NEG
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 2
53560: NEG
53561: PUSH
53562: LD_INT 2
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 1
53572: NEG
53573: PUSH
53574: LD_INT 3
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: LD_INT 2
53587: NEG
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 3
53595: PUSH
53596: LD_INT 2
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 2
53605: PUSH
53606: LD_INT 3
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 2
53615: NEG
53616: PUSH
53617: LD_INT 1
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 3
53626: NEG
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53661: LD_ADDR_VAR 0 35
53665: PUSH
53666: LD_INT 0
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 0
53678: PUSH
53679: LD_INT 1
53681: NEG
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 1
53689: PUSH
53690: LD_INT 0
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 1
53699: PUSH
53700: LD_INT 1
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 0
53709: PUSH
53710: LD_INT 1
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 1
53719: NEG
53720: PUSH
53721: LD_INT 0
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: NEG
53731: PUSH
53732: LD_INT 1
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 2
53742: PUSH
53743: LD_INT 1
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 2
53752: NEG
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53773: LD_ADDR_VAR 0 36
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: LD_INT 0
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 0
53790: PUSH
53791: LD_INT 1
53793: NEG
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: LD_INT 0
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 1
53811: PUSH
53812: LD_INT 1
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 0
53821: PUSH
53822: LD_INT 1
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 1
53831: NEG
53832: PUSH
53833: LD_INT 0
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 1
53842: NEG
53843: PUSH
53844: LD_INT 1
53846: NEG
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 1
53854: NEG
53855: PUSH
53856: LD_INT 2
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 1
53866: PUSH
53867: LD_INT 2
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53885: LD_ADDR_VAR 0 37
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: LD_INT 1
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 1
53943: NEG
53944: PUSH
53945: LD_INT 0
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 1
53966: PUSH
53967: LD_INT 1
53969: NEG
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: LD_INT 1
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53997: LD_ADDR_VAR 0 38
54001: PUSH
54002: LD_INT 0
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: LD_INT 1
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 1
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 0
54045: PUSH
54046: LD_INT 1
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: NEG
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 2
54078: PUSH
54079: LD_INT 1
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 2
54088: NEG
54089: PUSH
54090: LD_INT 1
54092: NEG
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54109: LD_ADDR_VAR 0 39
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: LD_INT 1
54129: NEG
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 1
54137: PUSH
54138: LD_INT 0
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 1
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 1
54167: NEG
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: LD_INT 1
54182: NEG
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: LD_INT 2
54194: NEG
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 1
54202: PUSH
54203: LD_INT 2
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54221: LD_ADDR_VAR 0 40
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: LD_INT 0
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 0
54238: PUSH
54239: LD_INT 1
54241: NEG
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 1
54249: PUSH
54250: LD_INT 0
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: LD_INT 1
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: LD_INT 1
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 1
54290: NEG
54291: PUSH
54292: LD_INT 1
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: PUSH
54303: LD_INT 1
54305: NEG
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54333: LD_ADDR_VAR 0 41
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: LD_INT 0
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: LD_INT 1
54353: NEG
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 1
54371: PUSH
54372: LD_INT 1
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: LD_INT 1
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 1
54402: NEG
54403: PUSH
54404: LD_INT 1
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 1
54414: NEG
54415: PUSH
54416: LD_INT 2
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 1
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 2
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 2
54447: PUSH
54448: LD_INT 1
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 2
54457: PUSH
54458: LD_INT 2
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: LD_INT 2
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: LD_INT 1
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 2
54488: NEG
54489: PUSH
54490: LD_INT 0
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 2
54499: NEG
54500: PUSH
54501: LD_INT 1
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 2
54511: NEG
54512: PUSH
54513: LD_INT 2
54515: NEG
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 2
54523: NEG
54524: PUSH
54525: LD_INT 3
54527: NEG
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 2
54535: PUSH
54536: LD_INT 1
54538: NEG
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 3
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 3
54556: PUSH
54557: LD_INT 1
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 3
54566: PUSH
54567: LD_INT 2
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 3
54576: PUSH
54577: LD_INT 3
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 2
54586: PUSH
54587: LD_INT 3
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 2
54596: NEG
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 3
54607: NEG
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 3
54618: NEG
54619: PUSH
54620: LD_INT 1
54622: NEG
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 3
54630: NEG
54631: PUSH
54632: LD_INT 2
54634: NEG
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 3
54642: NEG
54643: PUSH
54644: LD_INT 3
54646: NEG
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54683: LD_ADDR_VAR 0 42
54687: PUSH
54688: LD_INT 0
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 1
54711: PUSH
54712: LD_INT 0
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 1
54721: PUSH
54722: LD_INT 1
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 0
54731: PUSH
54732: LD_INT 1
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: NEG
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 1
54752: NEG
54753: PUSH
54754: LD_INT 1
54756: NEG
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 1
54764: NEG
54765: PUSH
54766: LD_INT 2
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: LD_INT 2
54779: NEG
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 1
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 2
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 2
54808: PUSH
54809: LD_INT 2
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 1
54818: PUSH
54819: LD_INT 2
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: LD_INT 2
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 1
54838: NEG
54839: PUSH
54840: LD_INT 1
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 2
54849: NEG
54850: PUSH
54851: LD_INT 1
54853: NEG
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 2
54861: NEG
54862: PUSH
54863: LD_INT 2
54865: NEG
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 2
54873: NEG
54874: PUSH
54875: LD_INT 3
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 1
54885: NEG
54886: PUSH
54887: LD_INT 3
54889: NEG
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: LD_INT 3
54900: NEG
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 1
54908: PUSH
54909: LD_INT 2
54911: NEG
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 3
54919: PUSH
54920: LD_INT 2
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 3
54929: PUSH
54930: LD_INT 3
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 2
54939: PUSH
54940: LD_INT 3
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: LD_INT 3
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: LD_INT 3
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: LD_INT 2
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 3
54980: NEG
54981: PUSH
54982: LD_INT 2
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 3
54992: NEG
54993: PUSH
54994: LD_INT 3
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55033: LD_ADDR_VAR 0 43
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: LD_INT 1
55053: NEG
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 1
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: LD_INT 1
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: LD_INT 1
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 1
55091: NEG
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 1
55114: NEG
55115: PUSH
55116: LD_INT 2
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 0
55126: PUSH
55127: LD_INT 2
55129: NEG
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: LD_INT 1
55140: NEG
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 2
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 2
55158: PUSH
55159: LD_INT 1
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 1
55168: PUSH
55169: LD_INT 2
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: LD_INT 2
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: NEG
55189: PUSH
55190: LD_INT 1
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 2
55199: NEG
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 2
55210: NEG
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: LD_INT 3
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: LD_INT 3
55237: NEG
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 1
55245: PUSH
55246: LD_INT 2
55248: NEG
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 2
55256: PUSH
55257: LD_INT 1
55259: NEG
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 3
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 3
55277: PUSH
55278: LD_INT 1
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: LD_INT 3
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: LD_INT 3
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 1
55307: NEG
55308: PUSH
55309: LD_INT 2
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 2
55318: NEG
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 3
55329: NEG
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 3
55340: NEG
55341: PUSH
55342: LD_INT 1
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55381: LD_ADDR_VAR 0 44
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: LD_INT 0
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: LD_INT 1
55401: NEG
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 1
55419: PUSH
55420: LD_INT 1
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: LD_INT 1
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 1
55439: NEG
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 1
55450: NEG
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 1
55462: NEG
55463: PUSH
55464: LD_INT 2
55466: NEG
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 1
55474: PUSH
55475: LD_INT 1
55477: NEG
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 2
55485: PUSH
55486: LD_INT 0
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 2
55495: PUSH
55496: LD_INT 1
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 2
55505: PUSH
55506: LD_INT 2
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 1
55515: PUSH
55516: LD_INT 2
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 1
55525: NEG
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 2
55536: NEG
55537: PUSH
55538: LD_INT 0
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 2
55547: NEG
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 2
55559: NEG
55560: PUSH
55561: LD_INT 2
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 2
55571: NEG
55572: PUSH
55573: LD_INT 3
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 2
55583: PUSH
55584: LD_INT 1
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 3
55594: PUSH
55595: LD_INT 0
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 3
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 3
55614: PUSH
55615: LD_INT 2
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 3
55624: PUSH
55625: LD_INT 3
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 2
55634: PUSH
55635: LD_INT 3
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 2
55644: NEG
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 3
55655: NEG
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 3
55666: NEG
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 3
55678: NEG
55679: PUSH
55680: LD_INT 2
55682: NEG
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 3
55690: NEG
55691: PUSH
55692: LD_INT 3
55694: NEG
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55731: LD_ADDR_VAR 0 45
55735: PUSH
55736: LD_INT 0
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 0
55748: PUSH
55749: LD_INT 1
55751: NEG
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 1
55759: PUSH
55760: LD_INT 0
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: LD_INT 1
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 1
55789: NEG
55790: PUSH
55791: LD_INT 0
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 1
55800: NEG
55801: PUSH
55802: LD_INT 1
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 1
55812: NEG
55813: PUSH
55814: LD_INT 2
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 0
55824: PUSH
55825: LD_INT 2
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: PUSH
55836: LD_INT 1
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 2
55846: PUSH
55847: LD_INT 1
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 2
55856: PUSH
55857: LD_INT 2
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 1
55866: PUSH
55867: LD_INT 2
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: LD_INT 2
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 1
55886: NEG
55887: PUSH
55888: LD_INT 1
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 2
55897: NEG
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 2
55909: NEG
55910: PUSH
55911: LD_INT 2
55913: NEG
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 2
55921: NEG
55922: PUSH
55923: LD_INT 3
55925: NEG
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 1
55933: NEG
55934: PUSH
55935: LD_INT 3
55937: NEG
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: LD_INT 3
55948: NEG
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 1
55956: PUSH
55957: LD_INT 2
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 3
55967: PUSH
55968: LD_INT 2
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 3
55977: PUSH
55978: LD_INT 3
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 2
55987: PUSH
55988: LD_INT 3
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 1
55997: PUSH
55998: LD_INT 3
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: LD_INT 3
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: LD_INT 2
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 3
56028: NEG
56029: PUSH
56030: LD_INT 2
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 3
56040: NEG
56041: PUSH
56042: LD_INT 3
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56081: LD_ADDR_VAR 0 46
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 0
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 1
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: LD_INT 1
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: LD_INT 1
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 1
56139: NEG
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 1
56150: NEG
56151: PUSH
56152: LD_INT 1
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 1
56162: NEG
56163: PUSH
56164: LD_INT 2
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: LD_INT 2
56177: NEG
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 1
56185: PUSH
56186: LD_INT 1
56188: NEG
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 2
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 2
56206: PUSH
56207: LD_INT 1
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 1
56216: PUSH
56217: LD_INT 2
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 0
56226: PUSH
56227: LD_INT 2
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 1
56236: NEG
56237: PUSH
56238: LD_INT 1
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 2
56247: NEG
56248: PUSH
56249: LD_INT 0
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 2
56258: NEG
56259: PUSH
56260: LD_INT 1
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 1
56270: NEG
56271: PUSH
56272: LD_INT 3
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: LD_INT 3
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 1
56293: PUSH
56294: LD_INT 2
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 2
56304: PUSH
56305: LD_INT 1
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 3
56315: PUSH
56316: LD_INT 0
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 3
56325: PUSH
56326: LD_INT 1
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 1
56335: PUSH
56336: LD_INT 3
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: LD_INT 3
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: LD_INT 2
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 2
56366: NEG
56367: PUSH
56368: LD_INT 1
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 3
56377: NEG
56378: PUSH
56379: LD_INT 0
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 3
56388: NEG
56389: PUSH
56390: LD_INT 1
56392: NEG
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56429: LD_ADDR_VAR 0 47
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: LD_INT 0
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 0
56446: PUSH
56447: LD_INT 1
56449: NEG
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 1
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 1
56467: PUSH
56468: LD_INT 1
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: LD_INT 1
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: LD_INT 0
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 1
56498: NEG
56499: PUSH
56500: LD_INT 1
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 1
56510: NEG
56511: PUSH
56512: LD_INT 2
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: LD_INT 2
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: LD_INT 1
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 2
56544: NEG
56545: PUSH
56546: LD_INT 1
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 2
56556: NEG
56557: PUSH
56558: LD_INT 2
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56580: LD_ADDR_VAR 0 48
56584: PUSH
56585: LD_INT 0
56587: PUSH
56588: LD_INT 0
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 0
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 1
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 0
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 1
56638: NEG
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 1
56649: NEG
56650: PUSH
56651: LD_INT 1
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 1
56661: NEG
56662: PUSH
56663: LD_INT 2
56665: NEG
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: LD_INT 2
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: LD_INT 1
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 2
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 2
56705: PUSH
56706: LD_INT 1
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56727: LD_ADDR_VAR 0 49
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: LD_INT 0
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: LD_INT 1
56747: NEG
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 1
56755: PUSH
56756: LD_INT 0
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: LD_INT 1
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: LD_INT 1
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: LD_INT 1
56800: NEG
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 1
56808: PUSH
56809: LD_INT 1
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 2
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 2
56829: PUSH
56830: LD_INT 1
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 2
56839: PUSH
56840: LD_INT 2
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: PUSH
56850: LD_INT 2
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56871: LD_ADDR_VAR 0 50
56875: PUSH
56876: LD_INT 0
56878: PUSH
56879: LD_INT 0
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: LD_INT 1
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 1
56899: PUSH
56900: LD_INT 0
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 1
56909: PUSH
56910: LD_INT 1
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 0
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 1
56929: NEG
56930: PUSH
56931: LD_INT 0
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: LD_INT 1
56944: NEG
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 2
56952: PUSH
56953: LD_INT 1
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 2
56962: PUSH
56963: LD_INT 2
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 1
56972: PUSH
56973: LD_INT 2
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 0
56982: PUSH
56983: LD_INT 2
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 1
56992: NEG
56993: PUSH
56994: LD_INT 1
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57015: LD_ADDR_VAR 0 51
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 0
57032: PUSH
57033: LD_INT 1
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 1
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 0
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 1
57073: NEG
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 1
57084: NEG
57085: PUSH
57086: LD_INT 1
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 1
57096: PUSH
57097: LD_INT 2
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 0
57106: PUSH
57107: LD_INT 2
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 1
57116: NEG
57117: PUSH
57118: LD_INT 1
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 2
57127: NEG
57128: PUSH
57129: LD_INT 0
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 2
57138: NEG
57139: PUSH
57140: LD_INT 1
57142: NEG
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57162: LD_ADDR_VAR 0 52
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: LD_INT 0
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 0
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 1
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 1
57200: PUSH
57201: LD_INT 1
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 0
57210: PUSH
57211: LD_INT 1
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 1
57220: NEG
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 1
57231: NEG
57232: PUSH
57233: LD_INT 1
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 1
57243: NEG
57244: PUSH
57245: LD_INT 2
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 1
57255: NEG
57256: PUSH
57257: LD_INT 1
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 2
57266: NEG
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 2
57277: NEG
57278: PUSH
57279: LD_INT 1
57281: NEG
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 2
57289: NEG
57290: PUSH
57291: LD_INT 2
57293: NEG
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57313: LD_ADDR_VAR 0 53
57317: PUSH
57318: LD_INT 0
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: LD_INT 1
57333: NEG
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 1
57341: PUSH
57342: LD_INT 0
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 1
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: LD_INT 1
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 1
57371: NEG
57372: PUSH
57373: LD_INT 0
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 1
57382: NEG
57383: PUSH
57384: LD_INT 1
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 1
57394: NEG
57395: PUSH
57396: LD_INT 2
57398: NEG
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 0
57406: PUSH
57407: LD_INT 2
57409: NEG
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 1
57417: PUSH
57418: LD_INT 1
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 2
57428: PUSH
57429: LD_INT 0
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 2
57438: PUSH
57439: LD_INT 1
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 2
57448: PUSH
57449: LD_INT 2
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 1
57458: PUSH
57459: LD_INT 2
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 0
57468: PUSH
57469: LD_INT 2
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 1
57478: NEG
57479: PUSH
57480: LD_INT 1
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 2
57489: NEG
57490: PUSH
57491: LD_INT 0
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 2
57500: NEG
57501: PUSH
57502: LD_INT 1
57504: NEG
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 2
57512: NEG
57513: PUSH
57514: LD_INT 2
57516: NEG
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57543: LD_ADDR_VAR 0 54
57547: PUSH
57548: LD_INT 0
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 0
57560: PUSH
57561: LD_INT 1
57563: NEG
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 1
57571: PUSH
57572: LD_INT 0
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 1
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: LD_INT 1
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 1
57601: NEG
57602: PUSH
57603: LD_INT 0
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 1
57624: NEG
57625: PUSH
57626: LD_INT 2
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 0
57636: PUSH
57637: LD_INT 2
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 1
57647: PUSH
57648: LD_INT 1
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 2
57658: PUSH
57659: LD_INT 0
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 2
57668: PUSH
57669: LD_INT 1
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 2
57678: PUSH
57679: LD_INT 2
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 1
57688: PUSH
57689: LD_INT 2
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 0
57698: PUSH
57699: LD_INT 2
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 1
57708: NEG
57709: PUSH
57710: LD_INT 1
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 2
57719: NEG
57720: PUSH
57721: LD_INT 0
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 2
57730: NEG
57731: PUSH
57732: LD_INT 1
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 2
57742: NEG
57743: PUSH
57744: LD_INT 2
57746: NEG
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57773: LD_ADDR_VAR 0 55
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: LD_INT 1
57793: NEG
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 1
57801: PUSH
57802: LD_INT 0
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 1
57811: PUSH
57812: LD_INT 1
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 0
57821: PUSH
57822: LD_INT 1
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 1
57831: NEG
57832: PUSH
57833: LD_INT 0
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 1
57842: NEG
57843: PUSH
57844: LD_INT 1
57846: NEG
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 1
57854: NEG
57855: PUSH
57856: LD_INT 2
57858: NEG
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 0
57866: PUSH
57867: LD_INT 2
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 1
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 2
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 2
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 2
57908: PUSH
57909: LD_INT 2
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 1
57918: PUSH
57919: LD_INT 2
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 0
57928: PUSH
57929: LD_INT 2
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 1
57938: NEG
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 2
57949: NEG
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 2
57960: NEG
57961: PUSH
57962: LD_INT 1
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 2
57972: NEG
57973: PUSH
57974: LD_INT 2
57976: NEG
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58003: LD_ADDR_VAR 0 56
58007: PUSH
58008: LD_INT 0
58010: PUSH
58011: LD_INT 0
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 0
58020: PUSH
58021: LD_INT 1
58023: NEG
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 1
58031: PUSH
58032: LD_INT 0
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 1
58041: PUSH
58042: LD_INT 1
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 0
58051: PUSH
58052: LD_INT 1
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 1
58061: NEG
58062: PUSH
58063: LD_INT 0
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 1
58072: NEG
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 1
58084: NEG
58085: PUSH
58086: LD_INT 2
58088: NEG
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 0
58096: PUSH
58097: LD_INT 2
58099: NEG
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 1
58107: PUSH
58108: LD_INT 1
58110: NEG
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 2
58118: PUSH
58119: LD_INT 0
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 2
58128: PUSH
58129: LD_INT 1
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 2
58138: PUSH
58139: LD_INT 2
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 1
58148: PUSH
58149: LD_INT 2
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 0
58158: PUSH
58159: LD_INT 2
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 1
58168: NEG
58169: PUSH
58170: LD_INT 1
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 2
58179: NEG
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 2
58190: NEG
58191: PUSH
58192: LD_INT 1
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 2
58202: NEG
58203: PUSH
58204: LD_INT 2
58206: NEG
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58233: LD_ADDR_VAR 0 57
58237: PUSH
58238: LD_INT 0
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 0
58250: PUSH
58251: LD_INT 1
58253: NEG
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: LD_INT 0
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: LD_INT 1
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: LD_INT 1
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 1
58291: NEG
58292: PUSH
58293: LD_INT 0
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 1
58302: NEG
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: LD_INT 2
58318: NEG
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 0
58326: PUSH
58327: LD_INT 2
58329: NEG
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: LD_INT 1
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 2
58348: PUSH
58349: LD_INT 0
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 2
58358: PUSH
58359: LD_INT 1
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 2
58368: PUSH
58369: LD_INT 2
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 1
58378: PUSH
58379: LD_INT 2
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 0
58388: PUSH
58389: LD_INT 2
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 1
58398: NEG
58399: PUSH
58400: LD_INT 1
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 2
58409: NEG
58410: PUSH
58411: LD_INT 0
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 2
58420: NEG
58421: PUSH
58422: LD_INT 1
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 2
58432: NEG
58433: PUSH
58434: LD_INT 2
58436: NEG
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58463: LD_ADDR_VAR 0 58
58467: PUSH
58468: LD_INT 0
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 0
58480: PUSH
58481: LD_INT 1
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 1
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 1
58501: PUSH
58502: LD_INT 1
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 0
58511: PUSH
58512: LD_INT 1
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 1
58521: NEG
58522: PUSH
58523: LD_INT 0
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: LD_INT 1
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: LD_INT 2
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 0
58556: PUSH
58557: LD_INT 2
58559: NEG
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 1
58567: PUSH
58568: LD_INT 1
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 2
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 2
58588: PUSH
58589: LD_INT 1
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 2
58598: PUSH
58599: LD_INT 2
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 1
58608: PUSH
58609: LD_INT 2
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 0
58618: PUSH
58619: LD_INT 2
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 1
58628: NEG
58629: PUSH
58630: LD_INT 1
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 2
58639: NEG
58640: PUSH
58641: LD_INT 0
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 2
58650: NEG
58651: PUSH
58652: LD_INT 1
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 2
58662: NEG
58663: PUSH
58664: LD_INT 2
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58693: LD_ADDR_VAR 0 59
58697: PUSH
58698: LD_INT 0
58700: PUSH
58701: LD_INT 0
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 0
58710: PUSH
58711: LD_INT 1
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 1
58731: PUSH
58732: LD_INT 1
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: LD_INT 1
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 1
58751: NEG
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: LD_INT 1
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58781: LD_ADDR_VAR 0 60
58785: PUSH
58786: LD_INT 0
58788: PUSH
58789: LD_INT 0
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 0
58798: PUSH
58799: LD_INT 1
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 1
58809: PUSH
58810: LD_INT 0
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 1
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 0
58829: PUSH
58830: LD_INT 1
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 1
58839: NEG
58840: PUSH
58841: LD_INT 0
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 1
58850: NEG
58851: PUSH
58852: LD_INT 1
58854: NEG
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58869: LD_ADDR_VAR 0 61
58873: PUSH
58874: LD_INT 0
58876: PUSH
58877: LD_INT 0
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 0
58886: PUSH
58887: LD_INT 1
58889: NEG
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 1
58897: PUSH
58898: LD_INT 0
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 1
58907: PUSH
58908: LD_INT 1
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 0
58917: PUSH
58918: LD_INT 1
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 1
58927: NEG
58928: PUSH
58929: LD_INT 0
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 1
58938: NEG
58939: PUSH
58940: LD_INT 1
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58957: LD_ADDR_VAR 0 62
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: LD_INT 0
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 0
58974: PUSH
58975: LD_INT 1
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 1
58985: PUSH
58986: LD_INT 0
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: LD_INT 1
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: LD_INT 1
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: LD_INT 0
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 1
59026: NEG
59027: PUSH
59028: LD_INT 1
59030: NEG
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59045: LD_ADDR_VAR 0 63
59049: PUSH
59050: LD_INT 0
59052: PUSH
59053: LD_INT 0
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 0
59062: PUSH
59063: LD_INT 1
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 1
59073: PUSH
59074: LD_INT 0
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 1
59083: PUSH
59084: LD_INT 1
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 0
59093: PUSH
59094: LD_INT 1
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 1
59103: NEG
59104: PUSH
59105: LD_INT 0
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 1
59114: NEG
59115: PUSH
59116: LD_INT 1
59118: NEG
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59133: LD_ADDR_VAR 0 64
59137: PUSH
59138: LD_INT 0
59140: PUSH
59141: LD_INT 0
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 0
59150: PUSH
59151: LD_INT 1
59153: NEG
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 1
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 1
59171: PUSH
59172: LD_INT 1
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: LD_INT 1
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 1
59191: NEG
59192: PUSH
59193: LD_INT 0
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: PUSH
59204: LD_INT 1
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: ST_TO_ADDR
// end ; 1 :
59221: GO 65118
59223: LD_INT 1
59225: DOUBLE
59226: EQUAL
59227: IFTRUE 59231
59229: GO 61854
59231: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59232: LD_ADDR_VAR 0 11
59236: PUSH
59237: LD_INT 1
59239: NEG
59240: PUSH
59241: LD_INT 3
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: LD_INT 3
59254: NEG
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 1
59262: PUSH
59263: LD_INT 2
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: LIST
59275: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59276: LD_ADDR_VAR 0 12
59280: PUSH
59281: LD_INT 2
59283: PUSH
59284: LD_INT 1
59286: NEG
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 3
59294: PUSH
59295: LD_INT 0
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 3
59304: PUSH
59305: LD_INT 1
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: LIST
59316: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59317: LD_ADDR_VAR 0 13
59321: PUSH
59322: LD_INT 3
59324: PUSH
59325: LD_INT 2
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 3
59334: PUSH
59335: LD_INT 3
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 2
59344: PUSH
59345: LD_INT 3
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: LIST
59356: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59357: LD_ADDR_VAR 0 14
59361: PUSH
59362: LD_INT 1
59364: PUSH
59365: LD_INT 3
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 0
59374: PUSH
59375: LD_INT 3
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 1
59384: NEG
59385: PUSH
59386: LD_INT 2
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: LIST
59397: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59398: LD_ADDR_VAR 0 15
59402: PUSH
59403: LD_INT 2
59405: NEG
59406: PUSH
59407: LD_INT 1
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 3
59416: NEG
59417: PUSH
59418: LD_INT 0
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 3
59427: NEG
59428: PUSH
59429: LD_INT 1
59431: NEG
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: LIST
59441: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59442: LD_ADDR_VAR 0 16
59446: PUSH
59447: LD_INT 2
59449: NEG
59450: PUSH
59451: LD_INT 3
59453: NEG
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 3
59461: NEG
59462: PUSH
59463: LD_INT 2
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 3
59473: NEG
59474: PUSH
59475: LD_INT 3
59477: NEG
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: LIST
59487: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59488: LD_ADDR_VAR 0 17
59492: PUSH
59493: LD_INT 1
59495: NEG
59496: PUSH
59497: LD_INT 3
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: LD_INT 3
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: PUSH
59519: LD_INT 2
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: LIST
59531: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59532: LD_ADDR_VAR 0 18
59536: PUSH
59537: LD_INT 2
59539: PUSH
59540: LD_INT 1
59542: NEG
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 3
59550: PUSH
59551: LD_INT 0
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 3
59560: PUSH
59561: LD_INT 1
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: LIST
59572: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59573: LD_ADDR_VAR 0 19
59577: PUSH
59578: LD_INT 3
59580: PUSH
59581: LD_INT 2
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 3
59590: PUSH
59591: LD_INT 3
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 2
59600: PUSH
59601: LD_INT 3
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: LIST
59612: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59613: LD_ADDR_VAR 0 20
59617: PUSH
59618: LD_INT 1
59620: PUSH
59621: LD_INT 3
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 0
59630: PUSH
59631: LD_INT 3
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 1
59640: NEG
59641: PUSH
59642: LD_INT 2
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: LIST
59653: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59654: LD_ADDR_VAR 0 21
59658: PUSH
59659: LD_INT 2
59661: NEG
59662: PUSH
59663: LD_INT 1
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 3
59672: NEG
59673: PUSH
59674: LD_INT 0
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 3
59683: NEG
59684: PUSH
59685: LD_INT 1
59687: NEG
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: LIST
59697: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59698: LD_ADDR_VAR 0 22
59702: PUSH
59703: LD_INT 2
59705: NEG
59706: PUSH
59707: LD_INT 3
59709: NEG
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 3
59717: NEG
59718: PUSH
59719: LD_INT 2
59721: NEG
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 3
59729: NEG
59730: PUSH
59731: LD_INT 3
59733: NEG
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: LIST
59743: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59744: LD_ADDR_VAR 0 23
59748: PUSH
59749: LD_INT 0
59751: PUSH
59752: LD_INT 3
59754: NEG
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 1
59762: NEG
59763: PUSH
59764: LD_INT 4
59766: NEG
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 1
59774: PUSH
59775: LD_INT 3
59777: NEG
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: LIST
59787: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59788: LD_ADDR_VAR 0 24
59792: PUSH
59793: LD_INT 3
59795: PUSH
59796: LD_INT 0
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 3
59805: PUSH
59806: LD_INT 1
59808: NEG
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 4
59816: PUSH
59817: LD_INT 1
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: LIST
59828: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59829: LD_ADDR_VAR 0 25
59833: PUSH
59834: LD_INT 3
59836: PUSH
59837: LD_INT 3
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 4
59846: PUSH
59847: LD_INT 3
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 3
59856: PUSH
59857: LD_INT 4
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: LIST
59868: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59869: LD_ADDR_VAR 0 26
59873: PUSH
59874: LD_INT 0
59876: PUSH
59877: LD_INT 3
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 1
59886: PUSH
59887: LD_INT 4
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 1
59896: NEG
59897: PUSH
59898: LD_INT 3
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: LIST
59909: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59910: LD_ADDR_VAR 0 27
59914: PUSH
59915: LD_INT 3
59917: NEG
59918: PUSH
59919: LD_INT 0
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 3
59928: NEG
59929: PUSH
59930: LD_INT 1
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 4
59939: NEG
59940: PUSH
59941: LD_INT 1
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: LIST
59953: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59954: LD_ADDR_VAR 0 28
59958: PUSH
59959: LD_INT 3
59961: NEG
59962: PUSH
59963: LD_INT 3
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 3
59973: NEG
59974: PUSH
59975: LD_INT 4
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 4
59985: NEG
59986: PUSH
59987: LD_INT 3
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: LIST
59999: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60000: LD_ADDR_VAR 0 29
60004: PUSH
60005: LD_INT 1
60007: NEG
60008: PUSH
60009: LD_INT 3
60011: NEG
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: LD_INT 3
60022: NEG
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 1
60030: PUSH
60031: LD_INT 2
60033: NEG
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 1
60041: NEG
60042: PUSH
60043: LD_INT 4
60045: NEG
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 0
60053: PUSH
60054: LD_INT 4
60056: NEG
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 1
60064: PUSH
60065: LD_INT 3
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 1
60075: NEG
60076: PUSH
60077: LD_INT 5
60079: NEG
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 0
60087: PUSH
60088: LD_INT 5
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 1
60098: PUSH
60099: LD_INT 4
60101: NEG
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 1
60109: NEG
60110: PUSH
60111: LD_INT 6
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 0
60121: PUSH
60122: LD_INT 6
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 1
60132: PUSH
60133: LD_INT 5
60135: NEG
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60155: LD_ADDR_VAR 0 30
60159: PUSH
60160: LD_INT 2
60162: PUSH
60163: LD_INT 1
60165: NEG
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 3
60173: PUSH
60174: LD_INT 0
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 3
60183: PUSH
60184: LD_INT 1
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 3
60193: PUSH
60194: LD_INT 1
60196: NEG
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 4
60204: PUSH
60205: LD_INT 0
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 4
60214: PUSH
60215: LD_INT 1
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 4
60224: PUSH
60225: LD_INT 1
60227: NEG
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 5
60235: PUSH
60236: LD_INT 0
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 5
60245: PUSH
60246: LD_INT 1
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 5
60255: PUSH
60256: LD_INT 1
60258: NEG
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 6
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 6
60276: PUSH
60277: LD_INT 1
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60298: LD_ADDR_VAR 0 31
60302: PUSH
60303: LD_INT 3
60305: PUSH
60306: LD_INT 2
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 3
60315: PUSH
60316: LD_INT 3
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 2
60325: PUSH
60326: LD_INT 3
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 4
60335: PUSH
60336: LD_INT 3
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 4
60345: PUSH
60346: LD_INT 4
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 3
60355: PUSH
60356: LD_INT 4
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 5
60365: PUSH
60366: LD_INT 4
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 5
60375: PUSH
60376: LD_INT 5
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 4
60385: PUSH
60386: LD_INT 5
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 6
60395: PUSH
60396: LD_INT 5
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 6
60405: PUSH
60406: LD_INT 6
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 5
60415: PUSH
60416: LD_INT 6
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
60437: LD_ADDR_VAR 0 32
60441: PUSH
60442: LD_INT 1
60444: PUSH
60445: LD_INT 3
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 0
60454: PUSH
60455: LD_INT 3
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 1
60464: NEG
60465: PUSH
60466: LD_INT 2
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 1
60475: PUSH
60476: LD_INT 4
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: LD_INT 4
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 1
60495: NEG
60496: PUSH
60497: LD_INT 3
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 1
60506: PUSH
60507: LD_INT 5
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: LD_INT 5
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 1
60526: NEG
60527: PUSH
60528: LD_INT 4
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 1
60537: PUSH
60538: LD_INT 6
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 0
60547: PUSH
60548: LD_INT 6
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 1
60557: NEG
60558: PUSH
60559: LD_INT 5
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60580: LD_ADDR_VAR 0 33
60584: PUSH
60585: LD_INT 2
60587: NEG
60588: PUSH
60589: LD_INT 1
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 3
60598: NEG
60599: PUSH
60600: LD_INT 0
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 3
60609: NEG
60610: PUSH
60611: LD_INT 1
60613: NEG
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 3
60621: NEG
60622: PUSH
60623: LD_INT 1
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 4
60632: NEG
60633: PUSH
60634: LD_INT 0
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 4
60643: NEG
60644: PUSH
60645: LD_INT 1
60647: NEG
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 4
60655: NEG
60656: PUSH
60657: LD_INT 1
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 5
60666: NEG
60667: PUSH
60668: LD_INT 0
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 5
60677: NEG
60678: PUSH
60679: LD_INT 1
60681: NEG
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 5
60689: NEG
60690: PUSH
60691: LD_INT 1
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 6
60700: NEG
60701: PUSH
60702: LD_INT 0
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 6
60711: NEG
60712: PUSH
60713: LD_INT 1
60715: NEG
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60735: LD_ADDR_VAR 0 34
60739: PUSH
60740: LD_INT 2
60742: NEG
60743: PUSH
60744: LD_INT 3
60746: NEG
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 3
60754: NEG
60755: PUSH
60756: LD_INT 2
60758: NEG
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 3
60766: NEG
60767: PUSH
60768: LD_INT 3
60770: NEG
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 3
60778: NEG
60779: PUSH
60780: LD_INT 4
60782: NEG
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 4
60790: NEG
60791: PUSH
60792: LD_INT 3
60794: NEG
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 4
60802: NEG
60803: PUSH
60804: LD_INT 4
60806: NEG
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 4
60814: NEG
60815: PUSH
60816: LD_INT 5
60818: NEG
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 5
60826: NEG
60827: PUSH
60828: LD_INT 4
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 5
60838: NEG
60839: PUSH
60840: LD_INT 5
60842: NEG
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 5
60850: NEG
60851: PUSH
60852: LD_INT 6
60854: NEG
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 6
60862: NEG
60863: PUSH
60864: LD_INT 5
60866: NEG
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 6
60874: NEG
60875: PUSH
60876: LD_INT 6
60878: NEG
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60898: LD_ADDR_VAR 0 41
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: LD_INT 2
60908: NEG
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 1
60916: NEG
60917: PUSH
60918: LD_INT 3
60920: NEG
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 1
60928: PUSH
60929: LD_INT 2
60931: NEG
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: LIST
60941: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60942: LD_ADDR_VAR 0 42
60946: PUSH
60947: LD_INT 2
60949: PUSH
60950: LD_INT 0
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 2
60959: PUSH
60960: LD_INT 1
60962: NEG
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 3
60970: PUSH
60971: LD_INT 1
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: LIST
60982: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60983: LD_ADDR_VAR 0 43
60987: PUSH
60988: LD_INT 2
60990: PUSH
60991: LD_INT 2
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 3
61000: PUSH
61001: LD_INT 2
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 2
61010: PUSH
61011: LD_INT 3
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: LIST
61022: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61023: LD_ADDR_VAR 0 44
61027: PUSH
61028: LD_INT 0
61030: PUSH
61031: LD_INT 2
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 1
61040: PUSH
61041: LD_INT 3
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 1
61050: NEG
61051: PUSH
61052: LD_INT 2
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: LIST
61063: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61064: LD_ADDR_VAR 0 45
61068: PUSH
61069: LD_INT 2
61071: NEG
61072: PUSH
61073: LD_INT 0
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 2
61082: NEG
61083: PUSH
61084: LD_INT 1
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 3
61093: NEG
61094: PUSH
61095: LD_INT 1
61097: NEG
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: LIST
61107: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61108: LD_ADDR_VAR 0 46
61112: PUSH
61113: LD_INT 2
61115: NEG
61116: PUSH
61117: LD_INT 2
61119: NEG
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 2
61127: NEG
61128: PUSH
61129: LD_INT 3
61131: NEG
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 3
61139: NEG
61140: PUSH
61141: LD_INT 2
61143: NEG
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: LIST
61153: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61154: LD_ADDR_VAR 0 47
61158: PUSH
61159: LD_INT 2
61161: NEG
61162: PUSH
61163: LD_INT 3
61165: NEG
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 1
61173: NEG
61174: PUSH
61175: LD_INT 3
61177: NEG
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61187: LD_ADDR_VAR 0 48
61191: PUSH
61192: LD_INT 1
61194: PUSH
61195: LD_INT 2
61197: NEG
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 2
61205: PUSH
61206: LD_INT 1
61208: NEG
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61218: LD_ADDR_VAR 0 49
61222: PUSH
61223: LD_INT 3
61225: PUSH
61226: LD_INT 1
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 3
61235: PUSH
61236: LD_INT 2
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61247: LD_ADDR_VAR 0 50
61251: PUSH
61252: LD_INT 2
61254: PUSH
61255: LD_INT 3
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 1
61264: PUSH
61265: LD_INT 3
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61276: LD_ADDR_VAR 0 51
61280: PUSH
61281: LD_INT 1
61283: NEG
61284: PUSH
61285: LD_INT 2
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 2
61294: NEG
61295: PUSH
61296: LD_INT 1
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61307: LD_ADDR_VAR 0 52
61311: PUSH
61312: LD_INT 3
61314: NEG
61315: PUSH
61316: LD_INT 1
61318: NEG
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 3
61326: NEG
61327: PUSH
61328: LD_INT 2
61330: NEG
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61340: LD_ADDR_VAR 0 53
61344: PUSH
61345: LD_INT 1
61347: NEG
61348: PUSH
61349: LD_INT 3
61351: NEG
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 0
61359: PUSH
61360: LD_INT 3
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 1
61370: PUSH
61371: LD_INT 2
61373: NEG
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: LIST
61383: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61384: LD_ADDR_VAR 0 54
61388: PUSH
61389: LD_INT 2
61391: PUSH
61392: LD_INT 1
61394: NEG
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 3
61402: PUSH
61403: LD_INT 0
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 3
61412: PUSH
61413: LD_INT 1
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: LIST
61424: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61425: LD_ADDR_VAR 0 55
61429: PUSH
61430: LD_INT 3
61432: PUSH
61433: LD_INT 2
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 3
61442: PUSH
61443: LD_INT 3
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 2
61452: PUSH
61453: LD_INT 3
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: LIST
61464: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61465: LD_ADDR_VAR 0 56
61469: PUSH
61470: LD_INT 1
61472: PUSH
61473: LD_INT 3
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 0
61482: PUSH
61483: LD_INT 3
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 1
61492: NEG
61493: PUSH
61494: LD_INT 2
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: LIST
61505: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61506: LD_ADDR_VAR 0 57
61510: PUSH
61511: LD_INT 2
61513: NEG
61514: PUSH
61515: LD_INT 1
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 3
61524: NEG
61525: PUSH
61526: LD_INT 0
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 3
61535: NEG
61536: PUSH
61537: LD_INT 1
61539: NEG
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: LIST
61549: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61550: LD_ADDR_VAR 0 58
61554: PUSH
61555: LD_INT 2
61557: NEG
61558: PUSH
61559: LD_INT 3
61561: NEG
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 3
61569: NEG
61570: PUSH
61571: LD_INT 2
61573: NEG
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 3
61581: NEG
61582: PUSH
61583: LD_INT 3
61585: NEG
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: LIST
61595: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61596: LD_ADDR_VAR 0 59
61600: PUSH
61601: LD_INT 1
61603: NEG
61604: PUSH
61605: LD_INT 2
61607: NEG
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 0
61615: PUSH
61616: LD_INT 2
61618: NEG
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 1
61626: PUSH
61627: LD_INT 1
61629: NEG
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: LIST
61639: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61640: LD_ADDR_VAR 0 60
61644: PUSH
61645: LD_INT 1
61647: PUSH
61648: LD_INT 1
61650: NEG
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 2
61658: PUSH
61659: LD_INT 0
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 2
61668: PUSH
61669: LD_INT 1
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: LIST
61680: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61681: LD_ADDR_VAR 0 61
61685: PUSH
61686: LD_INT 2
61688: PUSH
61689: LD_INT 1
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 2
61698: PUSH
61699: LD_INT 2
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 1
61708: PUSH
61709: LD_INT 2
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: LIST
61720: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61721: LD_ADDR_VAR 0 62
61725: PUSH
61726: LD_INT 1
61728: PUSH
61729: LD_INT 2
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 0
61738: PUSH
61739: LD_INT 2
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 1
61748: NEG
61749: PUSH
61750: LD_INT 1
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: LIST
61761: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61762: LD_ADDR_VAR 0 63
61766: PUSH
61767: LD_INT 1
61769: NEG
61770: PUSH
61771: LD_INT 1
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 2
61780: NEG
61781: PUSH
61782: LD_INT 0
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 2
61791: NEG
61792: PUSH
61793: LD_INT 1
61795: NEG
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: LIST
61805: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61806: LD_ADDR_VAR 0 64
61810: PUSH
61811: LD_INT 1
61813: NEG
61814: PUSH
61815: LD_INT 2
61817: NEG
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 2
61825: NEG
61826: PUSH
61827: LD_INT 1
61829: NEG
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 2
61837: NEG
61838: PUSH
61839: LD_INT 2
61841: NEG
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: LIST
61851: ST_TO_ADDR
// end ; 2 :
61852: GO 65118
61854: LD_INT 2
61856: DOUBLE
61857: EQUAL
61858: IFTRUE 61862
61860: GO 65117
61862: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61863: LD_ADDR_VAR 0 29
61867: PUSH
61868: LD_INT 4
61870: PUSH
61871: LD_INT 0
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 4
61880: PUSH
61881: LD_INT 1
61883: NEG
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 5
61891: PUSH
61892: LD_INT 0
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 5
61901: PUSH
61902: LD_INT 1
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 4
61911: PUSH
61912: LD_INT 1
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 3
61921: PUSH
61922: LD_INT 0
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 3
61931: PUSH
61932: LD_INT 1
61934: NEG
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 3
61942: PUSH
61943: LD_INT 2
61945: NEG
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 5
61953: PUSH
61954: LD_INT 2
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 3
61963: PUSH
61964: LD_INT 3
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 3
61973: PUSH
61974: LD_INT 2
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 4
61983: PUSH
61984: LD_INT 3
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 4
61993: PUSH
61994: LD_INT 4
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 3
62003: PUSH
62004: LD_INT 4
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 2
62013: PUSH
62014: LD_INT 3
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 2
62023: PUSH
62024: LD_INT 2
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 4
62033: PUSH
62034: LD_INT 2
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 2
62043: PUSH
62044: LD_INT 4
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 0
62053: PUSH
62054: LD_INT 4
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 0
62063: PUSH
62064: LD_INT 3
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 1
62073: PUSH
62074: LD_INT 4
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 1
62083: PUSH
62084: LD_INT 5
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 0
62093: PUSH
62094: LD_INT 5
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 1
62103: NEG
62104: PUSH
62105: LD_INT 4
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 1
62114: NEG
62115: PUSH
62116: LD_INT 3
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 2
62125: PUSH
62126: LD_INT 5
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 2
62135: NEG
62136: PUSH
62137: LD_INT 3
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 3
62146: NEG
62147: PUSH
62148: LD_INT 0
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 3
62157: NEG
62158: PUSH
62159: LD_INT 1
62161: NEG
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 2
62169: NEG
62170: PUSH
62171: LD_INT 0
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 2
62180: NEG
62181: PUSH
62182: LD_INT 1
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 3
62191: NEG
62192: PUSH
62193: LD_INT 1
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 4
62202: NEG
62203: PUSH
62204: LD_INT 0
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 4
62213: NEG
62214: PUSH
62215: LD_INT 1
62217: NEG
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 4
62225: NEG
62226: PUSH
62227: LD_INT 2
62229: NEG
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 2
62237: NEG
62238: PUSH
62239: LD_INT 2
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 4
62248: NEG
62249: PUSH
62250: LD_INT 4
62252: NEG
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 4
62260: NEG
62261: PUSH
62262: LD_INT 5
62264: NEG
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 3
62272: NEG
62273: PUSH
62274: LD_INT 4
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 3
62284: NEG
62285: PUSH
62286: LD_INT 3
62288: NEG
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 4
62296: NEG
62297: PUSH
62298: LD_INT 3
62300: NEG
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 5
62308: NEG
62309: PUSH
62310: LD_INT 4
62312: NEG
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 5
62320: NEG
62321: PUSH
62322: LD_INT 5
62324: NEG
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 3
62332: NEG
62333: PUSH
62334: LD_INT 5
62336: NEG
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 5
62344: NEG
62345: PUSH
62346: LD_INT 3
62348: NEG
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
62401: LD_ADDR_VAR 0 30
62405: PUSH
62406: LD_INT 4
62408: PUSH
62409: LD_INT 4
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 4
62418: PUSH
62419: LD_INT 3
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 5
62428: PUSH
62429: LD_INT 4
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 5
62438: PUSH
62439: LD_INT 5
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 4
62448: PUSH
62449: LD_INT 5
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 3
62458: PUSH
62459: LD_INT 4
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 3
62468: PUSH
62469: LD_INT 3
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 5
62478: PUSH
62479: LD_INT 3
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 3
62488: PUSH
62489: LD_INT 5
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 0
62498: PUSH
62499: LD_INT 3
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 0
62508: PUSH
62509: LD_INT 2
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 1
62518: PUSH
62519: LD_INT 3
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 1
62528: PUSH
62529: LD_INT 4
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 0
62538: PUSH
62539: LD_INT 4
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 1
62548: NEG
62549: PUSH
62550: LD_INT 3
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 1
62559: NEG
62560: PUSH
62561: LD_INT 2
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 2
62570: PUSH
62571: LD_INT 4
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 2
62580: NEG
62581: PUSH
62582: LD_INT 2
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 4
62591: NEG
62592: PUSH
62593: LD_INT 0
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 4
62602: NEG
62603: PUSH
62604: LD_INT 1
62606: NEG
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 3
62614: NEG
62615: PUSH
62616: LD_INT 0
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 3
62625: NEG
62626: PUSH
62627: LD_INT 1
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 4
62636: NEG
62637: PUSH
62638: LD_INT 1
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 5
62647: NEG
62648: PUSH
62649: LD_INT 0
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 5
62658: NEG
62659: PUSH
62660: LD_INT 1
62662: NEG
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 5
62670: NEG
62671: PUSH
62672: LD_INT 2
62674: NEG
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 3
62682: NEG
62683: PUSH
62684: LD_INT 2
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 3
62693: NEG
62694: PUSH
62695: LD_INT 3
62697: NEG
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 3
62705: NEG
62706: PUSH
62707: LD_INT 4
62709: NEG
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 2
62717: NEG
62718: PUSH
62719: LD_INT 3
62721: NEG
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 2
62729: NEG
62730: PUSH
62731: LD_INT 2
62733: NEG
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 3
62741: NEG
62742: PUSH
62743: LD_INT 2
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 4
62753: NEG
62754: PUSH
62755: LD_INT 3
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 4
62765: NEG
62766: PUSH
62767: LD_INT 4
62769: NEG
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 2
62777: NEG
62778: PUSH
62779: LD_INT 4
62781: NEG
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 4
62789: NEG
62790: PUSH
62791: LD_INT 2
62793: NEG
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 0
62801: PUSH
62802: LD_INT 4
62804: NEG
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 0
62812: PUSH
62813: LD_INT 5
62815: NEG
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 1
62823: PUSH
62824: LD_INT 4
62826: NEG
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 1
62834: PUSH
62835: LD_INT 3
62837: NEG
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 0
62845: PUSH
62846: LD_INT 3
62848: NEG
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 1
62856: NEG
62857: PUSH
62858: LD_INT 4
62860: NEG
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 1
62868: NEG
62869: PUSH
62870: LD_INT 5
62872: NEG
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 2
62880: PUSH
62881: LD_INT 3
62883: NEG
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 2
62891: NEG
62892: PUSH
62893: LD_INT 5
62895: NEG
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62948: LD_ADDR_VAR 0 31
62952: PUSH
62953: LD_INT 0
62955: PUSH
62956: LD_INT 4
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 0
62965: PUSH
62966: LD_INT 3
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 1
62975: PUSH
62976: LD_INT 4
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 1
62985: PUSH
62986: LD_INT 5
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 0
62995: PUSH
62996: LD_INT 5
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 1
63005: NEG
63006: PUSH
63007: LD_INT 4
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 1
63016: NEG
63017: PUSH
63018: LD_INT 3
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 2
63027: PUSH
63028: LD_INT 5
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 2
63037: NEG
63038: PUSH
63039: LD_INT 3
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 3
63048: NEG
63049: PUSH
63050: LD_INT 0
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 3
63059: NEG
63060: PUSH
63061: LD_INT 1
63063: NEG
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 2
63071: NEG
63072: PUSH
63073: LD_INT 0
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 2
63082: NEG
63083: PUSH
63084: LD_INT 1
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 3
63093: NEG
63094: PUSH
63095: LD_INT 1
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 4
63104: NEG
63105: PUSH
63106: LD_INT 0
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 4
63115: NEG
63116: PUSH
63117: LD_INT 1
63119: NEG
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 4
63127: NEG
63128: PUSH
63129: LD_INT 2
63131: NEG
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 2
63139: NEG
63140: PUSH
63141: LD_INT 2
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 4
63150: NEG
63151: PUSH
63152: LD_INT 4
63154: NEG
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 4
63162: NEG
63163: PUSH
63164: LD_INT 5
63166: NEG
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 3
63174: NEG
63175: PUSH
63176: LD_INT 4
63178: NEG
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 3
63186: NEG
63187: PUSH
63188: LD_INT 3
63190: NEG
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 4
63198: NEG
63199: PUSH
63200: LD_INT 3
63202: NEG
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 5
63210: NEG
63211: PUSH
63212: LD_INT 4
63214: NEG
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 5
63222: NEG
63223: PUSH
63224: LD_INT 5
63226: NEG
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 3
63234: NEG
63235: PUSH
63236: LD_INT 5
63238: NEG
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 5
63246: NEG
63247: PUSH
63248: LD_INT 3
63250: NEG
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 0
63258: PUSH
63259: LD_INT 3
63261: NEG
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 0
63269: PUSH
63270: LD_INT 4
63272: NEG
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 1
63280: PUSH
63281: LD_INT 3
63283: NEG
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 1
63291: PUSH
63292: LD_INT 2
63294: NEG
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 0
63302: PUSH
63303: LD_INT 2
63305: NEG
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 1
63313: NEG
63314: PUSH
63315: LD_INT 3
63317: NEG
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 1
63325: NEG
63326: PUSH
63327: LD_INT 4
63329: NEG
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 2
63337: PUSH
63338: LD_INT 2
63340: NEG
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 2
63348: NEG
63349: PUSH
63350: LD_INT 4
63352: NEG
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 4
63360: PUSH
63361: LD_INT 0
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 4
63370: PUSH
63371: LD_INT 1
63373: NEG
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 5
63381: PUSH
63382: LD_INT 0
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 5
63391: PUSH
63392: LD_INT 1
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 4
63401: PUSH
63402: LD_INT 1
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 3
63411: PUSH
63412: LD_INT 0
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 3
63421: PUSH
63422: LD_INT 1
63424: NEG
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 3
63432: PUSH
63433: LD_INT 2
63435: NEG
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 5
63443: PUSH
63444: LD_INT 2
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63498: LD_ADDR_VAR 0 32
63502: PUSH
63503: LD_INT 4
63505: NEG
63506: PUSH
63507: LD_INT 0
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 4
63516: NEG
63517: PUSH
63518: LD_INT 1
63520: NEG
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 3
63528: NEG
63529: PUSH
63530: LD_INT 0
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 3
63539: NEG
63540: PUSH
63541: LD_INT 1
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 4
63550: NEG
63551: PUSH
63552: LD_INT 1
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 5
63561: NEG
63562: PUSH
63563: LD_INT 0
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 5
63572: NEG
63573: PUSH
63574: LD_INT 1
63576: NEG
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 5
63584: NEG
63585: PUSH
63586: LD_INT 2
63588: NEG
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 3
63596: NEG
63597: PUSH
63598: LD_INT 2
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 3
63607: NEG
63608: PUSH
63609: LD_INT 3
63611: NEG
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 3
63619: NEG
63620: PUSH
63621: LD_INT 4
63623: NEG
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 2
63631: NEG
63632: PUSH
63633: LD_INT 3
63635: NEG
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 2
63643: NEG
63644: PUSH
63645: LD_INT 2
63647: NEG
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 3
63655: NEG
63656: PUSH
63657: LD_INT 2
63659: NEG
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 4
63667: NEG
63668: PUSH
63669: LD_INT 3
63671: NEG
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 4
63679: NEG
63680: PUSH
63681: LD_INT 4
63683: NEG
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 2
63691: NEG
63692: PUSH
63693: LD_INT 4
63695: NEG
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 4
63703: NEG
63704: PUSH
63705: LD_INT 2
63707: NEG
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 0
63715: PUSH
63716: LD_INT 4
63718: NEG
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 0
63726: PUSH
63727: LD_INT 5
63729: NEG
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 1
63737: PUSH
63738: LD_INT 4
63740: NEG
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 1
63748: PUSH
63749: LD_INT 3
63751: NEG
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 0
63759: PUSH
63760: LD_INT 3
63762: NEG
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 1
63770: NEG
63771: PUSH
63772: LD_INT 4
63774: NEG
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 1
63782: NEG
63783: PUSH
63784: LD_INT 5
63786: NEG
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 2
63794: PUSH
63795: LD_INT 3
63797: NEG
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 2
63805: NEG
63806: PUSH
63807: LD_INT 5
63809: NEG
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 3
63817: PUSH
63818: LD_INT 0
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 3
63827: PUSH
63828: LD_INT 1
63830: NEG
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 4
63838: PUSH
63839: LD_INT 0
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 4
63848: PUSH
63849: LD_INT 1
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 3
63858: PUSH
63859: LD_INT 1
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 2
63868: PUSH
63869: LD_INT 0
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 2
63878: PUSH
63879: LD_INT 1
63881: NEG
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 2
63889: PUSH
63890: LD_INT 2
63892: NEG
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 4
63900: PUSH
63901: LD_INT 2
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 4
63910: PUSH
63911: LD_INT 4
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 4
63920: PUSH
63921: LD_INT 3
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 5
63930: PUSH
63931: LD_INT 4
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 5
63940: PUSH
63941: LD_INT 5
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 4
63950: PUSH
63951: LD_INT 5
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 3
63960: PUSH
63961: LD_INT 4
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: PUSH
63968: LD_INT 3
63970: PUSH
63971: LD_INT 3
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 5
63980: PUSH
63981: LD_INT 3
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 3
63990: PUSH
63991: LD_INT 5
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64045: LD_ADDR_VAR 0 33
64049: PUSH
64050: LD_INT 4
64052: NEG
64053: PUSH
64054: LD_INT 4
64056: NEG
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 4
64064: NEG
64065: PUSH
64066: LD_INT 5
64068: NEG
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 3
64076: NEG
64077: PUSH
64078: LD_INT 4
64080: NEG
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 3
64088: NEG
64089: PUSH
64090: LD_INT 3
64092: NEG
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 4
64100: NEG
64101: PUSH
64102: LD_INT 3
64104: NEG
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 5
64112: NEG
64113: PUSH
64114: LD_INT 4
64116: NEG
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 5
64124: NEG
64125: PUSH
64126: LD_INT 5
64128: NEG
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 3
64136: NEG
64137: PUSH
64138: LD_INT 5
64140: NEG
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 5
64148: NEG
64149: PUSH
64150: LD_INT 3
64152: NEG
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 0
64160: PUSH
64161: LD_INT 3
64163: NEG
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 0
64171: PUSH
64172: LD_INT 4
64174: NEG
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 1
64182: PUSH
64183: LD_INT 3
64185: NEG
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: LD_INT 1
64193: PUSH
64194: LD_INT 2
64196: NEG
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 0
64204: PUSH
64205: LD_INT 2
64207: NEG
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: LD_INT 1
64215: NEG
64216: PUSH
64217: LD_INT 3
64219: NEG
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 1
64227: NEG
64228: PUSH
64229: LD_INT 4
64231: NEG
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 2
64239: PUSH
64240: LD_INT 2
64242: NEG
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 2
64250: NEG
64251: PUSH
64252: LD_INT 4
64254: NEG
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 4
64262: PUSH
64263: LD_INT 0
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 4
64272: PUSH
64273: LD_INT 1
64275: NEG
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 5
64283: PUSH
64284: LD_INT 0
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 5
64293: PUSH
64294: LD_INT 1
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 4
64303: PUSH
64304: LD_INT 1
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 3
64313: PUSH
64314: LD_INT 0
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 3
64323: PUSH
64324: LD_INT 1
64326: NEG
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 3
64334: PUSH
64335: LD_INT 2
64337: NEG
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 5
64345: PUSH
64346: LD_INT 2
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 3
64355: PUSH
64356: LD_INT 3
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 3
64365: PUSH
64366: LD_INT 2
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 4
64375: PUSH
64376: LD_INT 3
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 4
64385: PUSH
64386: LD_INT 4
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 3
64395: PUSH
64396: LD_INT 4
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 2
64405: PUSH
64406: LD_INT 3
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 2
64415: PUSH
64416: LD_INT 2
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 4
64425: PUSH
64426: LD_INT 2
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: LD_INT 2
64435: PUSH
64436: LD_INT 4
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 0
64445: PUSH
64446: LD_INT 4
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 0
64455: PUSH
64456: LD_INT 3
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: LD_INT 1
64465: PUSH
64466: LD_INT 4
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 1
64475: PUSH
64476: LD_INT 5
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 0
64485: PUSH
64486: LD_INT 5
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 1
64495: NEG
64496: PUSH
64497: LD_INT 4
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 1
64506: NEG
64507: PUSH
64508: LD_INT 3
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 2
64517: PUSH
64518: LD_INT 5
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 2
64527: NEG
64528: PUSH
64529: LD_INT 3
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64583: LD_ADDR_VAR 0 34
64587: PUSH
64588: LD_INT 0
64590: PUSH
64591: LD_INT 4
64593: NEG
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 0
64601: PUSH
64602: LD_INT 5
64604: NEG
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 1
64612: PUSH
64613: LD_INT 4
64615: NEG
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 1
64623: PUSH
64624: LD_INT 3
64626: NEG
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: LD_INT 0
64634: PUSH
64635: LD_INT 3
64637: NEG
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 1
64645: NEG
64646: PUSH
64647: LD_INT 4
64649: NEG
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 1
64657: NEG
64658: PUSH
64659: LD_INT 5
64661: NEG
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 2
64669: PUSH
64670: LD_INT 3
64672: NEG
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 2
64680: NEG
64681: PUSH
64682: LD_INT 5
64684: NEG
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 3
64692: PUSH
64693: LD_INT 0
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 3
64702: PUSH
64703: LD_INT 1
64705: NEG
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_INT 4
64713: PUSH
64714: LD_INT 0
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 4
64723: PUSH
64724: LD_INT 1
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 3
64733: PUSH
64734: LD_INT 1
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 2
64743: PUSH
64744: LD_INT 0
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 2
64753: PUSH
64754: LD_INT 1
64756: NEG
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 2
64764: PUSH
64765: LD_INT 2
64767: NEG
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 4
64775: PUSH
64776: LD_INT 2
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 4
64785: PUSH
64786: LD_INT 4
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 4
64795: PUSH
64796: LD_INT 3
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 5
64805: PUSH
64806: LD_INT 4
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 5
64815: PUSH
64816: LD_INT 5
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 4
64825: PUSH
64826: LD_INT 5
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 3
64835: PUSH
64836: LD_INT 4
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 3
64845: PUSH
64846: LD_INT 3
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 5
64855: PUSH
64856: LD_INT 3
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 3
64865: PUSH
64866: LD_INT 5
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 0
64875: PUSH
64876: LD_INT 3
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 0
64885: PUSH
64886: LD_INT 2
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 1
64895: PUSH
64896: LD_INT 3
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 1
64905: PUSH
64906: LD_INT 4
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 0
64915: PUSH
64916: LD_INT 4
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 1
64925: NEG
64926: PUSH
64927: LD_INT 3
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 1
64936: NEG
64937: PUSH
64938: LD_INT 2
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 2
64947: PUSH
64948: LD_INT 4
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 2
64957: NEG
64958: PUSH
64959: LD_INT 2
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 4
64968: NEG
64969: PUSH
64970: LD_INT 0
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 4
64979: NEG
64980: PUSH
64981: LD_INT 1
64983: NEG
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 3
64991: NEG
64992: PUSH
64993: LD_INT 0
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 3
65002: NEG
65003: PUSH
65004: LD_INT 1
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 4
65013: NEG
65014: PUSH
65015: LD_INT 1
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: LD_INT 5
65024: NEG
65025: PUSH
65026: LD_INT 0
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 5
65035: NEG
65036: PUSH
65037: LD_INT 1
65039: NEG
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 5
65047: NEG
65048: PUSH
65049: LD_INT 2
65051: NEG
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 3
65059: NEG
65060: PUSH
65061: LD_INT 2
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: LIST
65114: ST_TO_ADDR
// end ; end ;
65115: GO 65118
65117: POP
// case btype of b_depot , b_warehouse :
65118: LD_VAR 0 1
65122: PUSH
65123: LD_INT 0
65125: DOUBLE
65126: EQUAL
65127: IFTRUE 65137
65129: LD_INT 1
65131: DOUBLE
65132: EQUAL
65133: IFTRUE 65137
65135: GO 65338
65137: POP
// case nation of nation_american :
65138: LD_VAR 0 5
65142: PUSH
65143: LD_INT 1
65145: DOUBLE
65146: EQUAL
65147: IFTRUE 65151
65149: GO 65207
65151: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65152: LD_ADDR_VAR 0 9
65156: PUSH
65157: LD_VAR 0 11
65161: PUSH
65162: LD_VAR 0 12
65166: PUSH
65167: LD_VAR 0 13
65171: PUSH
65172: LD_VAR 0 14
65176: PUSH
65177: LD_VAR 0 15
65181: PUSH
65182: LD_VAR 0 16
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: PUSH
65195: LD_VAR 0 4
65199: PUSH
65200: LD_INT 1
65202: PLUS
65203: ARRAY
65204: ST_TO_ADDR
65205: GO 65336
65207: LD_INT 2
65209: DOUBLE
65210: EQUAL
65211: IFTRUE 65215
65213: GO 65271
65215: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65216: LD_ADDR_VAR 0 9
65220: PUSH
65221: LD_VAR 0 17
65225: PUSH
65226: LD_VAR 0 18
65230: PUSH
65231: LD_VAR 0 19
65235: PUSH
65236: LD_VAR 0 20
65240: PUSH
65241: LD_VAR 0 21
65245: PUSH
65246: LD_VAR 0 22
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: PUSH
65259: LD_VAR 0 4
65263: PUSH
65264: LD_INT 1
65266: PLUS
65267: ARRAY
65268: ST_TO_ADDR
65269: GO 65336
65271: LD_INT 3
65273: DOUBLE
65274: EQUAL
65275: IFTRUE 65279
65277: GO 65335
65279: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65280: LD_ADDR_VAR 0 9
65284: PUSH
65285: LD_VAR 0 23
65289: PUSH
65290: LD_VAR 0 24
65294: PUSH
65295: LD_VAR 0 25
65299: PUSH
65300: LD_VAR 0 26
65304: PUSH
65305: LD_VAR 0 27
65309: PUSH
65310: LD_VAR 0 28
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: PUSH
65323: LD_VAR 0 4
65327: PUSH
65328: LD_INT 1
65330: PLUS
65331: ARRAY
65332: ST_TO_ADDR
65333: GO 65336
65335: POP
65336: GO 65891
65338: LD_INT 2
65340: DOUBLE
65341: EQUAL
65342: IFTRUE 65352
65344: LD_INT 3
65346: DOUBLE
65347: EQUAL
65348: IFTRUE 65352
65350: GO 65408
65352: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65353: LD_ADDR_VAR 0 9
65357: PUSH
65358: LD_VAR 0 29
65362: PUSH
65363: LD_VAR 0 30
65367: PUSH
65368: LD_VAR 0 31
65372: PUSH
65373: LD_VAR 0 32
65377: PUSH
65378: LD_VAR 0 33
65382: PUSH
65383: LD_VAR 0 34
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: LIST
65392: LIST
65393: LIST
65394: LIST
65395: PUSH
65396: LD_VAR 0 4
65400: PUSH
65401: LD_INT 1
65403: PLUS
65404: ARRAY
65405: ST_TO_ADDR
65406: GO 65891
65408: LD_INT 16
65410: DOUBLE
65411: EQUAL
65412: IFTRUE 65470
65414: LD_INT 17
65416: DOUBLE
65417: EQUAL
65418: IFTRUE 65470
65420: LD_INT 18
65422: DOUBLE
65423: EQUAL
65424: IFTRUE 65470
65426: LD_INT 19
65428: DOUBLE
65429: EQUAL
65430: IFTRUE 65470
65432: LD_INT 22
65434: DOUBLE
65435: EQUAL
65436: IFTRUE 65470
65438: LD_INT 20
65440: DOUBLE
65441: EQUAL
65442: IFTRUE 65470
65444: LD_INT 21
65446: DOUBLE
65447: EQUAL
65448: IFTRUE 65470
65450: LD_INT 23
65452: DOUBLE
65453: EQUAL
65454: IFTRUE 65470
65456: LD_INT 24
65458: DOUBLE
65459: EQUAL
65460: IFTRUE 65470
65462: LD_INT 25
65464: DOUBLE
65465: EQUAL
65466: IFTRUE 65470
65468: GO 65526
65470: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
65471: LD_ADDR_VAR 0 9
65475: PUSH
65476: LD_VAR 0 35
65480: PUSH
65481: LD_VAR 0 36
65485: PUSH
65486: LD_VAR 0 37
65490: PUSH
65491: LD_VAR 0 38
65495: PUSH
65496: LD_VAR 0 39
65500: PUSH
65501: LD_VAR 0 40
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: PUSH
65514: LD_VAR 0 4
65518: PUSH
65519: LD_INT 1
65521: PLUS
65522: ARRAY
65523: ST_TO_ADDR
65524: GO 65891
65526: LD_INT 6
65528: DOUBLE
65529: EQUAL
65530: IFTRUE 65582
65532: LD_INT 7
65534: DOUBLE
65535: EQUAL
65536: IFTRUE 65582
65538: LD_INT 8
65540: DOUBLE
65541: EQUAL
65542: IFTRUE 65582
65544: LD_INT 13
65546: DOUBLE
65547: EQUAL
65548: IFTRUE 65582
65550: LD_INT 12
65552: DOUBLE
65553: EQUAL
65554: IFTRUE 65582
65556: LD_INT 15
65558: DOUBLE
65559: EQUAL
65560: IFTRUE 65582
65562: LD_INT 11
65564: DOUBLE
65565: EQUAL
65566: IFTRUE 65582
65568: LD_INT 14
65570: DOUBLE
65571: EQUAL
65572: IFTRUE 65582
65574: LD_INT 10
65576: DOUBLE
65577: EQUAL
65578: IFTRUE 65582
65580: GO 65638
65582: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65583: LD_ADDR_VAR 0 9
65587: PUSH
65588: LD_VAR 0 41
65592: PUSH
65593: LD_VAR 0 42
65597: PUSH
65598: LD_VAR 0 43
65602: PUSH
65603: LD_VAR 0 44
65607: PUSH
65608: LD_VAR 0 45
65612: PUSH
65613: LD_VAR 0 46
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: PUSH
65626: LD_VAR 0 4
65630: PUSH
65631: LD_INT 1
65633: PLUS
65634: ARRAY
65635: ST_TO_ADDR
65636: GO 65891
65638: LD_INT 36
65640: DOUBLE
65641: EQUAL
65642: IFTRUE 65646
65644: GO 65702
65646: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65647: LD_ADDR_VAR 0 9
65651: PUSH
65652: LD_VAR 0 47
65656: PUSH
65657: LD_VAR 0 48
65661: PUSH
65662: LD_VAR 0 49
65666: PUSH
65667: LD_VAR 0 50
65671: PUSH
65672: LD_VAR 0 51
65676: PUSH
65677: LD_VAR 0 52
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: PUSH
65690: LD_VAR 0 4
65694: PUSH
65695: LD_INT 1
65697: PLUS
65698: ARRAY
65699: ST_TO_ADDR
65700: GO 65891
65702: LD_INT 4
65704: DOUBLE
65705: EQUAL
65706: IFTRUE 65728
65708: LD_INT 5
65710: DOUBLE
65711: EQUAL
65712: IFTRUE 65728
65714: LD_INT 34
65716: DOUBLE
65717: EQUAL
65718: IFTRUE 65728
65720: LD_INT 37
65722: DOUBLE
65723: EQUAL
65724: IFTRUE 65728
65726: GO 65784
65728: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65729: LD_ADDR_VAR 0 9
65733: PUSH
65734: LD_VAR 0 53
65738: PUSH
65739: LD_VAR 0 54
65743: PUSH
65744: LD_VAR 0 55
65748: PUSH
65749: LD_VAR 0 56
65753: PUSH
65754: LD_VAR 0 57
65758: PUSH
65759: LD_VAR 0 58
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: PUSH
65772: LD_VAR 0 4
65776: PUSH
65777: LD_INT 1
65779: PLUS
65780: ARRAY
65781: ST_TO_ADDR
65782: GO 65891
65784: LD_INT 31
65786: DOUBLE
65787: EQUAL
65788: IFTRUE 65834
65790: LD_INT 32
65792: DOUBLE
65793: EQUAL
65794: IFTRUE 65834
65796: LD_INT 33
65798: DOUBLE
65799: EQUAL
65800: IFTRUE 65834
65802: LD_INT 27
65804: DOUBLE
65805: EQUAL
65806: IFTRUE 65834
65808: LD_INT 26
65810: DOUBLE
65811: EQUAL
65812: IFTRUE 65834
65814: LD_INT 28
65816: DOUBLE
65817: EQUAL
65818: IFTRUE 65834
65820: LD_INT 29
65822: DOUBLE
65823: EQUAL
65824: IFTRUE 65834
65826: LD_INT 30
65828: DOUBLE
65829: EQUAL
65830: IFTRUE 65834
65832: GO 65890
65834: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65835: LD_ADDR_VAR 0 9
65839: PUSH
65840: LD_VAR 0 59
65844: PUSH
65845: LD_VAR 0 60
65849: PUSH
65850: LD_VAR 0 61
65854: PUSH
65855: LD_VAR 0 62
65859: PUSH
65860: LD_VAR 0 63
65864: PUSH
65865: LD_VAR 0 64
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: PUSH
65878: LD_VAR 0 4
65882: PUSH
65883: LD_INT 1
65885: PLUS
65886: ARRAY
65887: ST_TO_ADDR
65888: GO 65891
65890: POP
// temp_list2 = [ ] ;
65891: LD_ADDR_VAR 0 10
65895: PUSH
65896: EMPTY
65897: ST_TO_ADDR
// for i in temp_list do
65898: LD_ADDR_VAR 0 8
65902: PUSH
65903: LD_VAR 0 9
65907: PUSH
65908: FOR_IN
65909: IFFALSE 65961
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65911: LD_ADDR_VAR 0 10
65915: PUSH
65916: LD_VAR 0 10
65920: PUSH
65921: LD_VAR 0 8
65925: PUSH
65926: LD_INT 1
65928: ARRAY
65929: PUSH
65930: LD_VAR 0 2
65934: PLUS
65935: PUSH
65936: LD_VAR 0 8
65940: PUSH
65941: LD_INT 2
65943: ARRAY
65944: PUSH
65945: LD_VAR 0 3
65949: PLUS
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: EMPTY
65956: LIST
65957: ADD
65958: ST_TO_ADDR
65959: GO 65908
65961: POP
65962: POP
// result = temp_list2 ;
65963: LD_ADDR_VAR 0 7
65967: PUSH
65968: LD_VAR 0 10
65972: ST_TO_ADDR
// end ;
65973: LD_VAR 0 7
65977: RET
// export function EnemyInRange ( unit , dist ) ; begin
65978: LD_INT 0
65980: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65981: LD_ADDR_VAR 0 3
65985: PUSH
65986: LD_VAR 0 1
65990: PPUSH
65991: CALL_OW 255
65995: PPUSH
65996: LD_VAR 0 1
66000: PPUSH
66001: CALL_OW 250
66005: PPUSH
66006: LD_VAR 0 1
66010: PPUSH
66011: CALL_OW 251
66015: PPUSH
66016: LD_VAR 0 2
66020: PPUSH
66021: CALL 39374 0 4
66025: PUSH
66026: LD_INT 4
66028: ARRAY
66029: ST_TO_ADDR
// end ;
66030: LD_VAR 0 3
66034: RET
// export function PlayerSeeMe ( unit ) ; begin
66035: LD_INT 0
66037: PPUSH
// result := See ( your_side , unit ) ;
66038: LD_ADDR_VAR 0 2
66042: PUSH
66043: LD_OWVAR 2
66047: PPUSH
66048: LD_VAR 0 1
66052: PPUSH
66053: CALL_OW 292
66057: ST_TO_ADDR
// end ;
66058: LD_VAR 0 2
66062: RET
// export function ReverseDir ( unit ) ; begin
66063: LD_INT 0
66065: PPUSH
// if not unit then
66066: LD_VAR 0 1
66070: NOT
66071: IFFALSE 66075
// exit ;
66073: GO 66098
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66075: LD_ADDR_VAR 0 2
66079: PUSH
66080: LD_VAR 0 1
66084: PPUSH
66085: CALL_OW 254
66089: PUSH
66090: LD_INT 3
66092: PLUS
66093: PUSH
66094: LD_INT 6
66096: MOD
66097: ST_TO_ADDR
// end ;
66098: LD_VAR 0 2
66102: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
66103: LD_INT 0
66105: PPUSH
66106: PPUSH
66107: PPUSH
66108: PPUSH
66109: PPUSH
// if not hexes then
66110: LD_VAR 0 2
66114: NOT
66115: IFFALSE 66119
// exit ;
66117: GO 66267
// dist := 9999 ;
66119: LD_ADDR_VAR 0 5
66123: PUSH
66124: LD_INT 9999
66126: ST_TO_ADDR
// for i = 1 to hexes do
66127: LD_ADDR_VAR 0 4
66131: PUSH
66132: DOUBLE
66133: LD_INT 1
66135: DEC
66136: ST_TO_ADDR
66137: LD_VAR 0 2
66141: PUSH
66142: FOR_TO
66143: IFFALSE 66255
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
66145: LD_VAR 0 1
66149: PPUSH
66150: LD_VAR 0 2
66154: PUSH
66155: LD_VAR 0 4
66159: ARRAY
66160: PUSH
66161: LD_INT 1
66163: ARRAY
66164: PPUSH
66165: LD_VAR 0 2
66169: PUSH
66170: LD_VAR 0 4
66174: ARRAY
66175: PUSH
66176: LD_INT 2
66178: ARRAY
66179: PPUSH
66180: CALL_OW 297
66184: PUSH
66185: LD_VAR 0 5
66189: LESS
66190: IFFALSE 66253
// begin hex := hexes [ i ] ;
66192: LD_ADDR_VAR 0 7
66196: PUSH
66197: LD_VAR 0 2
66201: PUSH
66202: LD_VAR 0 4
66206: ARRAY
66207: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66208: LD_ADDR_VAR 0 5
66212: PUSH
66213: LD_VAR 0 1
66217: PPUSH
66218: LD_VAR 0 2
66222: PUSH
66223: LD_VAR 0 4
66227: ARRAY
66228: PUSH
66229: LD_INT 1
66231: ARRAY
66232: PPUSH
66233: LD_VAR 0 2
66237: PUSH
66238: LD_VAR 0 4
66242: ARRAY
66243: PUSH
66244: LD_INT 2
66246: ARRAY
66247: PPUSH
66248: CALL_OW 297
66252: ST_TO_ADDR
// end ; end ;
66253: GO 66142
66255: POP
66256: POP
// result := hex ;
66257: LD_ADDR_VAR 0 3
66261: PUSH
66262: LD_VAR 0 7
66266: ST_TO_ADDR
// end ;
66267: LD_VAR 0 3
66271: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66272: LD_INT 0
66274: PPUSH
66275: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66276: LD_VAR 0 1
66280: NOT
66281: PUSH
66282: LD_VAR 0 1
66286: PUSH
66287: LD_INT 21
66289: PUSH
66290: LD_INT 2
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 23
66299: PUSH
66300: LD_INT 2
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PPUSH
66311: CALL_OW 69
66315: IN
66316: NOT
66317: OR
66318: IFFALSE 66322
// exit ;
66320: GO 66369
// for i = 1 to 3 do
66322: LD_ADDR_VAR 0 3
66326: PUSH
66327: DOUBLE
66328: LD_INT 1
66330: DEC
66331: ST_TO_ADDR
66332: LD_INT 3
66334: PUSH
66335: FOR_TO
66336: IFFALSE 66367
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66338: LD_VAR 0 1
66342: PPUSH
66343: CALL_OW 250
66347: PPUSH
66348: LD_VAR 0 1
66352: PPUSH
66353: CALL_OW 251
66357: PPUSH
66358: LD_INT 1
66360: PPUSH
66361: CALL_OW 453
66365: GO 66335
66367: POP
66368: POP
// end ;
66369: LD_VAR 0 2
66373: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
66374: LD_INT 0
66376: PPUSH
66377: PPUSH
66378: PPUSH
66379: PPUSH
66380: PPUSH
66381: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
66382: LD_VAR 0 1
66386: NOT
66387: PUSH
66388: LD_VAR 0 2
66392: NOT
66393: OR
66394: PUSH
66395: LD_VAR 0 1
66399: PPUSH
66400: CALL_OW 314
66404: OR
66405: IFFALSE 66409
// exit ;
66407: GO 66850
// x := GetX ( enemy_unit ) ;
66409: LD_ADDR_VAR 0 7
66413: PUSH
66414: LD_VAR 0 2
66418: PPUSH
66419: CALL_OW 250
66423: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66424: LD_ADDR_VAR 0 8
66428: PUSH
66429: LD_VAR 0 2
66433: PPUSH
66434: CALL_OW 251
66438: ST_TO_ADDR
// if not x or not y then
66439: LD_VAR 0 7
66443: NOT
66444: PUSH
66445: LD_VAR 0 8
66449: NOT
66450: OR
66451: IFFALSE 66455
// exit ;
66453: GO 66850
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66455: LD_ADDR_VAR 0 6
66459: PUSH
66460: LD_VAR 0 7
66464: PPUSH
66465: LD_INT 0
66467: PPUSH
66468: LD_INT 4
66470: PPUSH
66471: CALL_OW 272
66475: PUSH
66476: LD_VAR 0 8
66480: PPUSH
66481: LD_INT 0
66483: PPUSH
66484: LD_INT 4
66486: PPUSH
66487: CALL_OW 273
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_VAR 0 7
66500: PPUSH
66501: LD_INT 1
66503: PPUSH
66504: LD_INT 4
66506: PPUSH
66507: CALL_OW 272
66511: PUSH
66512: LD_VAR 0 8
66516: PPUSH
66517: LD_INT 1
66519: PPUSH
66520: LD_INT 4
66522: PPUSH
66523: CALL_OW 273
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_VAR 0 7
66536: PPUSH
66537: LD_INT 2
66539: PPUSH
66540: LD_INT 4
66542: PPUSH
66543: CALL_OW 272
66547: PUSH
66548: LD_VAR 0 8
66552: PPUSH
66553: LD_INT 2
66555: PPUSH
66556: LD_INT 4
66558: PPUSH
66559: CALL_OW 273
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_VAR 0 7
66572: PPUSH
66573: LD_INT 3
66575: PPUSH
66576: LD_INT 4
66578: PPUSH
66579: CALL_OW 272
66583: PUSH
66584: LD_VAR 0 8
66588: PPUSH
66589: LD_INT 3
66591: PPUSH
66592: LD_INT 4
66594: PPUSH
66595: CALL_OW 273
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_VAR 0 7
66608: PPUSH
66609: LD_INT 4
66611: PPUSH
66612: LD_INT 4
66614: PPUSH
66615: CALL_OW 272
66619: PUSH
66620: LD_VAR 0 8
66624: PPUSH
66625: LD_INT 4
66627: PPUSH
66628: LD_INT 4
66630: PPUSH
66631: CALL_OW 273
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: LD_VAR 0 7
66644: PPUSH
66645: LD_INT 5
66647: PPUSH
66648: LD_INT 4
66650: PPUSH
66651: CALL_OW 272
66655: PUSH
66656: LD_VAR 0 8
66660: PPUSH
66661: LD_INT 5
66663: PPUSH
66664: LD_INT 4
66666: PPUSH
66667: CALL_OW 273
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: ST_TO_ADDR
// for i = tmp downto 1 do
66684: LD_ADDR_VAR 0 4
66688: PUSH
66689: DOUBLE
66690: LD_VAR 0 6
66694: INC
66695: ST_TO_ADDR
66696: LD_INT 1
66698: PUSH
66699: FOR_DOWNTO
66700: IFFALSE 66801
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66702: LD_VAR 0 6
66706: PUSH
66707: LD_VAR 0 4
66711: ARRAY
66712: PUSH
66713: LD_INT 1
66715: ARRAY
66716: PPUSH
66717: LD_VAR 0 6
66721: PUSH
66722: LD_VAR 0 4
66726: ARRAY
66727: PUSH
66728: LD_INT 2
66730: ARRAY
66731: PPUSH
66732: CALL_OW 488
66736: NOT
66737: PUSH
66738: LD_VAR 0 6
66742: PUSH
66743: LD_VAR 0 4
66747: ARRAY
66748: PUSH
66749: LD_INT 1
66751: ARRAY
66752: PPUSH
66753: LD_VAR 0 6
66757: PUSH
66758: LD_VAR 0 4
66762: ARRAY
66763: PUSH
66764: LD_INT 2
66766: ARRAY
66767: PPUSH
66768: CALL_OW 428
66772: PUSH
66773: LD_INT 0
66775: NONEQUAL
66776: OR
66777: IFFALSE 66799
// tmp := Delete ( tmp , i ) ;
66779: LD_ADDR_VAR 0 6
66783: PUSH
66784: LD_VAR 0 6
66788: PPUSH
66789: LD_VAR 0 4
66793: PPUSH
66794: CALL_OW 3
66798: ST_TO_ADDR
66799: GO 66699
66801: POP
66802: POP
// j := GetClosestHex ( unit , tmp ) ;
66803: LD_ADDR_VAR 0 5
66807: PUSH
66808: LD_VAR 0 1
66812: PPUSH
66813: LD_VAR 0 6
66817: PPUSH
66818: CALL 66103 0 2
66822: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66823: LD_VAR 0 1
66827: PPUSH
66828: LD_VAR 0 5
66832: PUSH
66833: LD_INT 1
66835: ARRAY
66836: PPUSH
66837: LD_VAR 0 5
66841: PUSH
66842: LD_INT 2
66844: ARRAY
66845: PPUSH
66846: CALL_OW 111
// end ;
66850: LD_VAR 0 3
66854: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66855: LD_INT 0
66857: PPUSH
66858: PPUSH
66859: PPUSH
// uc_side = 0 ;
66860: LD_ADDR_OWVAR 20
66864: PUSH
66865: LD_INT 0
66867: ST_TO_ADDR
// uc_nation = 0 ;
66868: LD_ADDR_OWVAR 21
66872: PUSH
66873: LD_INT 0
66875: ST_TO_ADDR
// InitHc_All ( ) ;
66876: CALL_OW 584
// InitVc ;
66880: CALL_OW 20
// if mastodonts then
66884: LD_VAR 0 6
66888: IFFALSE 66955
// for i = 1 to mastodonts do
66890: LD_ADDR_VAR 0 11
66894: PUSH
66895: DOUBLE
66896: LD_INT 1
66898: DEC
66899: ST_TO_ADDR
66900: LD_VAR 0 6
66904: PUSH
66905: FOR_TO
66906: IFFALSE 66953
// begin vc_chassis := 31 ;
66908: LD_ADDR_OWVAR 37
66912: PUSH
66913: LD_INT 31
66915: ST_TO_ADDR
// vc_control := control_rider ;
66916: LD_ADDR_OWVAR 38
66920: PUSH
66921: LD_INT 4
66923: ST_TO_ADDR
// animal := CreateVehicle ;
66924: LD_ADDR_VAR 0 12
66928: PUSH
66929: CALL_OW 45
66933: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66934: LD_VAR 0 12
66938: PPUSH
66939: LD_VAR 0 8
66943: PPUSH
66944: LD_INT 0
66946: PPUSH
66947: CALL 69090 0 3
// end ;
66951: GO 66905
66953: POP
66954: POP
// if horses then
66955: LD_VAR 0 5
66959: IFFALSE 67026
// for i = 1 to horses do
66961: LD_ADDR_VAR 0 11
66965: PUSH
66966: DOUBLE
66967: LD_INT 1
66969: DEC
66970: ST_TO_ADDR
66971: LD_VAR 0 5
66975: PUSH
66976: FOR_TO
66977: IFFALSE 67024
// begin hc_class := 21 ;
66979: LD_ADDR_OWVAR 28
66983: PUSH
66984: LD_INT 21
66986: ST_TO_ADDR
// hc_gallery :=  ;
66987: LD_ADDR_OWVAR 33
66991: PUSH
66992: LD_STRING 
66994: ST_TO_ADDR
// animal := CreateHuman ;
66995: LD_ADDR_VAR 0 12
66999: PUSH
67000: CALL_OW 44
67004: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67005: LD_VAR 0 12
67009: PPUSH
67010: LD_VAR 0 8
67014: PPUSH
67015: LD_INT 0
67017: PPUSH
67018: CALL 69090 0 3
// end ;
67022: GO 66976
67024: POP
67025: POP
// if birds then
67026: LD_VAR 0 1
67030: IFFALSE 67097
// for i = 1 to birds do
67032: LD_ADDR_VAR 0 11
67036: PUSH
67037: DOUBLE
67038: LD_INT 1
67040: DEC
67041: ST_TO_ADDR
67042: LD_VAR 0 1
67046: PUSH
67047: FOR_TO
67048: IFFALSE 67095
// begin hc_class = 18 ;
67050: LD_ADDR_OWVAR 28
67054: PUSH
67055: LD_INT 18
67057: ST_TO_ADDR
// hc_gallery =  ;
67058: LD_ADDR_OWVAR 33
67062: PUSH
67063: LD_STRING 
67065: ST_TO_ADDR
// animal := CreateHuman ;
67066: LD_ADDR_VAR 0 12
67070: PUSH
67071: CALL_OW 44
67075: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67076: LD_VAR 0 12
67080: PPUSH
67081: LD_VAR 0 8
67085: PPUSH
67086: LD_INT 0
67088: PPUSH
67089: CALL 69090 0 3
// end ;
67093: GO 67047
67095: POP
67096: POP
// if tigers then
67097: LD_VAR 0 2
67101: IFFALSE 67185
// for i = 1 to tigers do
67103: LD_ADDR_VAR 0 11
67107: PUSH
67108: DOUBLE
67109: LD_INT 1
67111: DEC
67112: ST_TO_ADDR
67113: LD_VAR 0 2
67117: PUSH
67118: FOR_TO
67119: IFFALSE 67183
// begin hc_class = class_tiger ;
67121: LD_ADDR_OWVAR 28
67125: PUSH
67126: LD_INT 14
67128: ST_TO_ADDR
// hc_gallery =  ;
67129: LD_ADDR_OWVAR 33
67133: PUSH
67134: LD_STRING 
67136: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67137: LD_ADDR_OWVAR 35
67141: PUSH
67142: LD_INT 7
67144: NEG
67145: PPUSH
67146: LD_INT 7
67148: PPUSH
67149: CALL_OW 12
67153: ST_TO_ADDR
// animal := CreateHuman ;
67154: LD_ADDR_VAR 0 12
67158: PUSH
67159: CALL_OW 44
67163: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67164: LD_VAR 0 12
67168: PPUSH
67169: LD_VAR 0 8
67173: PPUSH
67174: LD_INT 0
67176: PPUSH
67177: CALL 69090 0 3
// end ;
67181: GO 67118
67183: POP
67184: POP
// if apemans then
67185: LD_VAR 0 3
67189: IFFALSE 67312
// for i = 1 to apemans do
67191: LD_ADDR_VAR 0 11
67195: PUSH
67196: DOUBLE
67197: LD_INT 1
67199: DEC
67200: ST_TO_ADDR
67201: LD_VAR 0 3
67205: PUSH
67206: FOR_TO
67207: IFFALSE 67310
// begin hc_class = class_apeman ;
67209: LD_ADDR_OWVAR 28
67213: PUSH
67214: LD_INT 12
67216: ST_TO_ADDR
// hc_gallery =  ;
67217: LD_ADDR_OWVAR 33
67221: PUSH
67222: LD_STRING 
67224: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67225: LD_ADDR_OWVAR 35
67229: PUSH
67230: LD_INT 2
67232: NEG
67233: PPUSH
67234: LD_INT 2
67236: PPUSH
67237: CALL_OW 12
67241: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67242: LD_ADDR_OWVAR 31
67246: PUSH
67247: LD_INT 1
67249: PPUSH
67250: LD_INT 3
67252: PPUSH
67253: CALL_OW 12
67257: PUSH
67258: LD_INT 1
67260: PPUSH
67261: LD_INT 3
67263: PPUSH
67264: CALL_OW 12
67268: PUSH
67269: LD_INT 0
67271: PUSH
67272: LD_INT 0
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: LIST
67279: LIST
67280: ST_TO_ADDR
// animal := CreateHuman ;
67281: LD_ADDR_VAR 0 12
67285: PUSH
67286: CALL_OW 44
67290: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67291: LD_VAR 0 12
67295: PPUSH
67296: LD_VAR 0 8
67300: PPUSH
67301: LD_INT 0
67303: PPUSH
67304: CALL 69090 0 3
// end ;
67308: GO 67206
67310: POP
67311: POP
// if enchidnas then
67312: LD_VAR 0 4
67316: IFFALSE 67383
// for i = 1 to enchidnas do
67318: LD_ADDR_VAR 0 11
67322: PUSH
67323: DOUBLE
67324: LD_INT 1
67326: DEC
67327: ST_TO_ADDR
67328: LD_VAR 0 4
67332: PUSH
67333: FOR_TO
67334: IFFALSE 67381
// begin hc_class = 13 ;
67336: LD_ADDR_OWVAR 28
67340: PUSH
67341: LD_INT 13
67343: ST_TO_ADDR
// hc_gallery =  ;
67344: LD_ADDR_OWVAR 33
67348: PUSH
67349: LD_STRING 
67351: ST_TO_ADDR
// animal := CreateHuman ;
67352: LD_ADDR_VAR 0 12
67356: PUSH
67357: CALL_OW 44
67361: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67362: LD_VAR 0 12
67366: PPUSH
67367: LD_VAR 0 8
67371: PPUSH
67372: LD_INT 0
67374: PPUSH
67375: CALL 69090 0 3
// end ;
67379: GO 67333
67381: POP
67382: POP
// if fishes then
67383: LD_VAR 0 7
67387: IFFALSE 67454
// for i = 1 to fishes do
67389: LD_ADDR_VAR 0 11
67393: PUSH
67394: DOUBLE
67395: LD_INT 1
67397: DEC
67398: ST_TO_ADDR
67399: LD_VAR 0 7
67403: PUSH
67404: FOR_TO
67405: IFFALSE 67452
// begin hc_class = 20 ;
67407: LD_ADDR_OWVAR 28
67411: PUSH
67412: LD_INT 20
67414: ST_TO_ADDR
// hc_gallery =  ;
67415: LD_ADDR_OWVAR 33
67419: PUSH
67420: LD_STRING 
67422: ST_TO_ADDR
// animal := CreateHuman ;
67423: LD_ADDR_VAR 0 12
67427: PUSH
67428: CALL_OW 44
67432: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67433: LD_VAR 0 12
67437: PPUSH
67438: LD_VAR 0 9
67442: PPUSH
67443: LD_INT 0
67445: PPUSH
67446: CALL 69090 0 3
// end ;
67450: GO 67404
67452: POP
67453: POP
// end ;
67454: LD_VAR 0 10
67458: RET
// export function WantHeal ( sci , unit ) ; begin
67459: LD_INT 0
67461: PPUSH
// if GetTaskList ( sci ) > 0 then
67462: LD_VAR 0 1
67466: PPUSH
67467: CALL_OW 437
67471: PUSH
67472: LD_INT 0
67474: GREATER
67475: IFFALSE 67545
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67477: LD_VAR 0 1
67481: PPUSH
67482: CALL_OW 437
67486: PUSH
67487: LD_INT 1
67489: ARRAY
67490: PUSH
67491: LD_INT 1
67493: ARRAY
67494: PUSH
67495: LD_STRING l
67497: EQUAL
67498: PUSH
67499: LD_VAR 0 1
67503: PPUSH
67504: CALL_OW 437
67508: PUSH
67509: LD_INT 1
67511: ARRAY
67512: PUSH
67513: LD_INT 4
67515: ARRAY
67516: PUSH
67517: LD_VAR 0 2
67521: EQUAL
67522: AND
67523: IFFALSE 67535
// result := true else
67525: LD_ADDR_VAR 0 3
67529: PUSH
67530: LD_INT 1
67532: ST_TO_ADDR
67533: GO 67543
// result := false ;
67535: LD_ADDR_VAR 0 3
67539: PUSH
67540: LD_INT 0
67542: ST_TO_ADDR
// end else
67543: GO 67553
// result := false ;
67545: LD_ADDR_VAR 0 3
67549: PUSH
67550: LD_INT 0
67552: ST_TO_ADDR
// end ;
67553: LD_VAR 0 3
67557: RET
// export function HealTarget ( sci ) ; begin
67558: LD_INT 0
67560: PPUSH
// if not sci then
67561: LD_VAR 0 1
67565: NOT
67566: IFFALSE 67570
// exit ;
67568: GO 67635
// result := 0 ;
67570: LD_ADDR_VAR 0 2
67574: PUSH
67575: LD_INT 0
67577: ST_TO_ADDR
// if GetTaskList ( sci ) then
67578: LD_VAR 0 1
67582: PPUSH
67583: CALL_OW 437
67587: IFFALSE 67635
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67589: LD_VAR 0 1
67593: PPUSH
67594: CALL_OW 437
67598: PUSH
67599: LD_INT 1
67601: ARRAY
67602: PUSH
67603: LD_INT 1
67605: ARRAY
67606: PUSH
67607: LD_STRING l
67609: EQUAL
67610: IFFALSE 67635
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67612: LD_ADDR_VAR 0 2
67616: PUSH
67617: LD_VAR 0 1
67621: PPUSH
67622: CALL_OW 437
67626: PUSH
67627: LD_INT 1
67629: ARRAY
67630: PUSH
67631: LD_INT 4
67633: ARRAY
67634: ST_TO_ADDR
// end ;
67635: LD_VAR 0 2
67639: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67640: LD_INT 0
67642: PPUSH
67643: PPUSH
67644: PPUSH
67645: PPUSH
// if not base_units then
67646: LD_VAR 0 1
67650: NOT
67651: IFFALSE 67655
// exit ;
67653: GO 67742
// result := false ;
67655: LD_ADDR_VAR 0 2
67659: PUSH
67660: LD_INT 0
67662: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67663: LD_ADDR_VAR 0 5
67667: PUSH
67668: LD_VAR 0 1
67672: PPUSH
67673: LD_INT 21
67675: PUSH
67676: LD_INT 3
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PPUSH
67683: CALL_OW 72
67687: ST_TO_ADDR
// if not tmp then
67688: LD_VAR 0 5
67692: NOT
67693: IFFALSE 67697
// exit ;
67695: GO 67742
// for i in tmp do
67697: LD_ADDR_VAR 0 3
67701: PUSH
67702: LD_VAR 0 5
67706: PUSH
67707: FOR_IN
67708: IFFALSE 67740
// begin result := EnemyInRange ( i , 22 ) ;
67710: LD_ADDR_VAR 0 2
67714: PUSH
67715: LD_VAR 0 3
67719: PPUSH
67720: LD_INT 22
67722: PPUSH
67723: CALL 65978 0 2
67727: ST_TO_ADDR
// if result then
67728: LD_VAR 0 2
67732: IFFALSE 67738
// exit ;
67734: POP
67735: POP
67736: GO 67742
// end ;
67738: GO 67707
67740: POP
67741: POP
// end ;
67742: LD_VAR 0 2
67746: RET
// export function FilterByTag ( units , tag ) ; begin
67747: LD_INT 0
67749: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67750: LD_ADDR_VAR 0 3
67754: PUSH
67755: LD_VAR 0 1
67759: PPUSH
67760: LD_INT 120
67762: PUSH
67763: LD_VAR 0 2
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PPUSH
67772: CALL_OW 72
67776: ST_TO_ADDR
// end ;
67777: LD_VAR 0 3
67781: RET
// export function IsDriver ( un ) ; begin
67782: LD_INT 0
67784: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67785: LD_ADDR_VAR 0 2
67789: PUSH
67790: LD_VAR 0 1
67794: PUSH
67795: LD_INT 55
67797: PUSH
67798: EMPTY
67799: LIST
67800: PPUSH
67801: CALL_OW 69
67805: IN
67806: ST_TO_ADDR
// end ;
67807: LD_VAR 0 2
67811: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67812: LD_INT 0
67814: PPUSH
67815: PPUSH
// list := [ ] ;
67816: LD_ADDR_VAR 0 5
67820: PUSH
67821: EMPTY
67822: ST_TO_ADDR
// case d of 0 :
67823: LD_VAR 0 3
67827: PUSH
67828: LD_INT 0
67830: DOUBLE
67831: EQUAL
67832: IFTRUE 67836
67834: GO 67969
67836: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67837: LD_ADDR_VAR 0 5
67841: PUSH
67842: LD_VAR 0 1
67846: PUSH
67847: LD_INT 4
67849: MINUS
67850: PUSH
67851: LD_VAR 0 2
67855: PUSH
67856: LD_INT 4
67858: MINUS
67859: PUSH
67860: LD_INT 2
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: LIST
67867: PUSH
67868: LD_VAR 0 1
67872: PUSH
67873: LD_INT 3
67875: MINUS
67876: PUSH
67877: LD_VAR 0 2
67881: PUSH
67882: LD_INT 1
67884: PUSH
67885: EMPTY
67886: LIST
67887: LIST
67888: LIST
67889: PUSH
67890: LD_VAR 0 1
67894: PUSH
67895: LD_INT 4
67897: PLUS
67898: PUSH
67899: LD_VAR 0 2
67903: PUSH
67904: LD_INT 4
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: LIST
67911: PUSH
67912: LD_VAR 0 1
67916: PUSH
67917: LD_INT 3
67919: PLUS
67920: PUSH
67921: LD_VAR 0 2
67925: PUSH
67926: LD_INT 3
67928: PLUS
67929: PUSH
67930: LD_INT 5
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: LIST
67937: PUSH
67938: LD_VAR 0 1
67942: PUSH
67943: LD_VAR 0 2
67947: PUSH
67948: LD_INT 4
67950: PLUS
67951: PUSH
67952: LD_INT 0
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: LIST
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: LIST
67964: LIST
67965: LIST
67966: ST_TO_ADDR
// end ; 1 :
67967: GO 68667
67969: LD_INT 1
67971: DOUBLE
67972: EQUAL
67973: IFTRUE 67977
67975: GO 68110
67977: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67978: LD_ADDR_VAR 0 5
67982: PUSH
67983: LD_VAR 0 1
67987: PUSH
67988: LD_VAR 0 2
67992: PUSH
67993: LD_INT 4
67995: MINUS
67996: PUSH
67997: LD_INT 3
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: LIST
68004: PUSH
68005: LD_VAR 0 1
68009: PUSH
68010: LD_INT 3
68012: MINUS
68013: PUSH
68014: LD_VAR 0 2
68018: PUSH
68019: LD_INT 3
68021: MINUS
68022: PUSH
68023: LD_INT 2
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: LIST
68030: PUSH
68031: LD_VAR 0 1
68035: PUSH
68036: LD_INT 4
68038: MINUS
68039: PUSH
68040: LD_VAR 0 2
68044: PUSH
68045: LD_INT 1
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: LIST
68052: PUSH
68053: LD_VAR 0 1
68057: PUSH
68058: LD_VAR 0 2
68062: PUSH
68063: LD_INT 3
68065: PLUS
68066: PUSH
68067: LD_INT 0
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: LIST
68074: PUSH
68075: LD_VAR 0 1
68079: PUSH
68080: LD_INT 4
68082: PLUS
68083: PUSH
68084: LD_VAR 0 2
68088: PUSH
68089: LD_INT 4
68091: PLUS
68092: PUSH
68093: LD_INT 5
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: LIST
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: ST_TO_ADDR
// end ; 2 :
68108: GO 68667
68110: LD_INT 2
68112: DOUBLE
68113: EQUAL
68114: IFTRUE 68118
68116: GO 68247
68118: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68119: LD_ADDR_VAR 0 5
68123: PUSH
68124: LD_VAR 0 1
68128: PUSH
68129: LD_VAR 0 2
68133: PUSH
68134: LD_INT 3
68136: MINUS
68137: PUSH
68138: LD_INT 3
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: LIST
68145: PUSH
68146: LD_VAR 0 1
68150: PUSH
68151: LD_INT 4
68153: PLUS
68154: PUSH
68155: LD_VAR 0 2
68159: PUSH
68160: LD_INT 4
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: LIST
68167: PUSH
68168: LD_VAR 0 1
68172: PUSH
68173: LD_VAR 0 2
68177: PUSH
68178: LD_INT 4
68180: PLUS
68181: PUSH
68182: LD_INT 0
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: LIST
68189: PUSH
68190: LD_VAR 0 1
68194: PUSH
68195: LD_INT 3
68197: MINUS
68198: PUSH
68199: LD_VAR 0 2
68203: PUSH
68204: LD_INT 1
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: LIST
68211: PUSH
68212: LD_VAR 0 1
68216: PUSH
68217: LD_INT 4
68219: MINUS
68220: PUSH
68221: LD_VAR 0 2
68225: PUSH
68226: LD_INT 4
68228: MINUS
68229: PUSH
68230: LD_INT 2
68232: PUSH
68233: EMPTY
68234: LIST
68235: LIST
68236: LIST
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: ST_TO_ADDR
// end ; 3 :
68245: GO 68667
68247: LD_INT 3
68249: DOUBLE
68250: EQUAL
68251: IFTRUE 68255
68253: GO 68388
68255: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68256: LD_ADDR_VAR 0 5
68260: PUSH
68261: LD_VAR 0 1
68265: PUSH
68266: LD_INT 3
68268: PLUS
68269: PUSH
68270: LD_VAR 0 2
68274: PUSH
68275: LD_INT 4
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: LIST
68282: PUSH
68283: LD_VAR 0 1
68287: PUSH
68288: LD_INT 4
68290: PLUS
68291: PUSH
68292: LD_VAR 0 2
68296: PUSH
68297: LD_INT 4
68299: PLUS
68300: PUSH
68301: LD_INT 5
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: LIST
68308: PUSH
68309: LD_VAR 0 1
68313: PUSH
68314: LD_INT 4
68316: MINUS
68317: PUSH
68318: LD_VAR 0 2
68322: PUSH
68323: LD_INT 1
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: LIST
68330: PUSH
68331: LD_VAR 0 1
68335: PUSH
68336: LD_VAR 0 2
68340: PUSH
68341: LD_INT 4
68343: MINUS
68344: PUSH
68345: LD_INT 3
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: LIST
68352: PUSH
68353: LD_VAR 0 1
68357: PUSH
68358: LD_INT 3
68360: MINUS
68361: PUSH
68362: LD_VAR 0 2
68366: PUSH
68367: LD_INT 3
68369: MINUS
68370: PUSH
68371: LD_INT 2
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: LIST
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: ST_TO_ADDR
// end ; 4 :
68386: GO 68667
68388: LD_INT 4
68390: DOUBLE
68391: EQUAL
68392: IFTRUE 68396
68394: GO 68529
68396: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68397: LD_ADDR_VAR 0 5
68401: PUSH
68402: LD_VAR 0 1
68406: PUSH
68407: LD_VAR 0 2
68411: PUSH
68412: LD_INT 4
68414: PLUS
68415: PUSH
68416: LD_INT 0
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: LIST
68423: PUSH
68424: LD_VAR 0 1
68428: PUSH
68429: LD_INT 3
68431: PLUS
68432: PUSH
68433: LD_VAR 0 2
68437: PUSH
68438: LD_INT 3
68440: PLUS
68441: PUSH
68442: LD_INT 5
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: LIST
68449: PUSH
68450: LD_VAR 0 1
68454: PUSH
68455: LD_INT 4
68457: PLUS
68458: PUSH
68459: LD_VAR 0 2
68463: PUSH
68464: LD_INT 4
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: LIST
68471: PUSH
68472: LD_VAR 0 1
68476: PUSH
68477: LD_VAR 0 2
68481: PUSH
68482: LD_INT 3
68484: MINUS
68485: PUSH
68486: LD_INT 3
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: LIST
68493: PUSH
68494: LD_VAR 0 1
68498: PUSH
68499: LD_INT 4
68501: MINUS
68502: PUSH
68503: LD_VAR 0 2
68507: PUSH
68508: LD_INT 4
68510: MINUS
68511: PUSH
68512: LD_INT 2
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: LIST
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: ST_TO_ADDR
// end ; 5 :
68527: GO 68667
68529: LD_INT 5
68531: DOUBLE
68532: EQUAL
68533: IFTRUE 68537
68535: GO 68666
68537: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68538: LD_ADDR_VAR 0 5
68542: PUSH
68543: LD_VAR 0 1
68547: PUSH
68548: LD_INT 4
68550: MINUS
68551: PUSH
68552: LD_VAR 0 2
68556: PUSH
68557: LD_INT 1
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: LIST
68564: PUSH
68565: LD_VAR 0 1
68569: PUSH
68570: LD_VAR 0 2
68574: PUSH
68575: LD_INT 4
68577: MINUS
68578: PUSH
68579: LD_INT 3
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: LIST
68586: PUSH
68587: LD_VAR 0 1
68591: PUSH
68592: LD_INT 4
68594: PLUS
68595: PUSH
68596: LD_VAR 0 2
68600: PUSH
68601: LD_INT 4
68603: PLUS
68604: PUSH
68605: LD_INT 5
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: LIST
68612: PUSH
68613: LD_VAR 0 1
68617: PUSH
68618: LD_INT 3
68620: PLUS
68621: PUSH
68622: LD_VAR 0 2
68626: PUSH
68627: LD_INT 4
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: LIST
68634: PUSH
68635: LD_VAR 0 1
68639: PUSH
68640: LD_VAR 0 2
68644: PUSH
68645: LD_INT 3
68647: PLUS
68648: PUSH
68649: LD_INT 0
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: LIST
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: LIST
68661: LIST
68662: LIST
68663: ST_TO_ADDR
// end ; end ;
68664: GO 68667
68666: POP
// result := list ;
68667: LD_ADDR_VAR 0 4
68671: PUSH
68672: LD_VAR 0 5
68676: ST_TO_ADDR
// end ;
68677: LD_VAR 0 4
68681: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68682: LD_INT 0
68684: PPUSH
68685: PPUSH
68686: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68687: LD_VAR 0 1
68691: NOT
68692: PUSH
68693: LD_VAR 0 2
68697: PUSH
68698: LD_INT 1
68700: PUSH
68701: LD_INT 2
68703: PUSH
68704: LD_INT 3
68706: PUSH
68707: LD_INT 4
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: IN
68716: NOT
68717: OR
68718: IFFALSE 68722
// exit ;
68720: GO 68814
// tmp := [ ] ;
68722: LD_ADDR_VAR 0 5
68726: PUSH
68727: EMPTY
68728: ST_TO_ADDR
// for i in units do
68729: LD_ADDR_VAR 0 4
68733: PUSH
68734: LD_VAR 0 1
68738: PUSH
68739: FOR_IN
68740: IFFALSE 68783
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
68742: LD_ADDR_VAR 0 5
68746: PUSH
68747: LD_VAR 0 5
68751: PPUSH
68752: LD_VAR 0 5
68756: PUSH
68757: LD_INT 1
68759: PLUS
68760: PPUSH
68761: LD_VAR 0 4
68765: PPUSH
68766: LD_VAR 0 2
68770: PPUSH
68771: CALL_OW 259
68775: PPUSH
68776: CALL_OW 2
68780: ST_TO_ADDR
68781: GO 68739
68783: POP
68784: POP
// if not tmp then
68785: LD_VAR 0 5
68789: NOT
68790: IFFALSE 68794
// exit ;
68792: GO 68814
// result := SortListByListDesc ( units , tmp ) ;
68794: LD_ADDR_VAR 0 3
68798: PUSH
68799: LD_VAR 0 1
68803: PPUSH
68804: LD_VAR 0 5
68808: PPUSH
68809: CALL_OW 77
68813: ST_TO_ADDR
// end ;
68814: LD_VAR 0 3
68818: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68819: LD_INT 0
68821: PPUSH
68822: PPUSH
68823: PPUSH
// result := false ;
68824: LD_ADDR_VAR 0 3
68828: PUSH
68829: LD_INT 0
68831: ST_TO_ADDR
// x := GetX ( building ) ;
68832: LD_ADDR_VAR 0 4
68836: PUSH
68837: LD_VAR 0 2
68841: PPUSH
68842: CALL_OW 250
68846: ST_TO_ADDR
// y := GetY ( building ) ;
68847: LD_ADDR_VAR 0 5
68851: PUSH
68852: LD_VAR 0 2
68856: PPUSH
68857: CALL_OW 251
68861: ST_TO_ADDR
// if not building or not x or not y then
68862: LD_VAR 0 2
68866: NOT
68867: PUSH
68868: LD_VAR 0 4
68872: NOT
68873: OR
68874: PUSH
68875: LD_VAR 0 5
68879: NOT
68880: OR
68881: IFFALSE 68885
// exit ;
68883: GO 68977
// if GetTaskList ( unit ) then
68885: LD_VAR 0 1
68889: PPUSH
68890: CALL_OW 437
68894: IFFALSE 68977
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68896: LD_STRING e
68898: PUSH
68899: LD_VAR 0 1
68903: PPUSH
68904: CALL_OW 437
68908: PUSH
68909: LD_INT 1
68911: ARRAY
68912: PUSH
68913: LD_INT 1
68915: ARRAY
68916: EQUAL
68917: PUSH
68918: LD_VAR 0 4
68922: PUSH
68923: LD_VAR 0 1
68927: PPUSH
68928: CALL_OW 437
68932: PUSH
68933: LD_INT 1
68935: ARRAY
68936: PUSH
68937: LD_INT 2
68939: ARRAY
68940: EQUAL
68941: AND
68942: PUSH
68943: LD_VAR 0 5
68947: PUSH
68948: LD_VAR 0 1
68952: PPUSH
68953: CALL_OW 437
68957: PUSH
68958: LD_INT 1
68960: ARRAY
68961: PUSH
68962: LD_INT 3
68964: ARRAY
68965: EQUAL
68966: AND
68967: IFFALSE 68977
// result := true end ;
68969: LD_ADDR_VAR 0 3
68973: PUSH
68974: LD_INT 1
68976: ST_TO_ADDR
// end ;
68977: LD_VAR 0 3
68981: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68982: LD_INT 0
68984: PPUSH
// result := false ;
68985: LD_ADDR_VAR 0 4
68989: PUSH
68990: LD_INT 0
68992: ST_TO_ADDR
// if GetTaskList ( unit ) then
68993: LD_VAR 0 1
68997: PPUSH
68998: CALL_OW 437
69002: IFFALSE 69085
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69004: LD_STRING M
69006: PUSH
69007: LD_VAR 0 1
69011: PPUSH
69012: CALL_OW 437
69016: PUSH
69017: LD_INT 1
69019: ARRAY
69020: PUSH
69021: LD_INT 1
69023: ARRAY
69024: EQUAL
69025: PUSH
69026: LD_VAR 0 2
69030: PUSH
69031: LD_VAR 0 1
69035: PPUSH
69036: CALL_OW 437
69040: PUSH
69041: LD_INT 1
69043: ARRAY
69044: PUSH
69045: LD_INT 2
69047: ARRAY
69048: EQUAL
69049: AND
69050: PUSH
69051: LD_VAR 0 3
69055: PUSH
69056: LD_VAR 0 1
69060: PPUSH
69061: CALL_OW 437
69065: PUSH
69066: LD_INT 1
69068: ARRAY
69069: PUSH
69070: LD_INT 3
69072: ARRAY
69073: EQUAL
69074: AND
69075: IFFALSE 69085
// result := true ;
69077: LD_ADDR_VAR 0 4
69081: PUSH
69082: LD_INT 1
69084: ST_TO_ADDR
// end ; end ;
69085: LD_VAR 0 4
69089: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69090: LD_INT 0
69092: PPUSH
69093: PPUSH
69094: PPUSH
69095: PPUSH
// if not unit or not area then
69096: LD_VAR 0 1
69100: NOT
69101: PUSH
69102: LD_VAR 0 2
69106: NOT
69107: OR
69108: IFFALSE 69112
// exit ;
69110: GO 69276
// tmp := AreaToList ( area , i ) ;
69112: LD_ADDR_VAR 0 6
69116: PUSH
69117: LD_VAR 0 2
69121: PPUSH
69122: LD_VAR 0 5
69126: PPUSH
69127: CALL_OW 517
69131: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69132: LD_ADDR_VAR 0 5
69136: PUSH
69137: DOUBLE
69138: LD_INT 1
69140: DEC
69141: ST_TO_ADDR
69142: LD_VAR 0 6
69146: PUSH
69147: LD_INT 1
69149: ARRAY
69150: PUSH
69151: FOR_TO
69152: IFFALSE 69274
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69154: LD_ADDR_VAR 0 7
69158: PUSH
69159: LD_VAR 0 6
69163: PUSH
69164: LD_INT 1
69166: ARRAY
69167: PUSH
69168: LD_VAR 0 5
69172: ARRAY
69173: PUSH
69174: LD_VAR 0 6
69178: PUSH
69179: LD_INT 2
69181: ARRAY
69182: PUSH
69183: LD_VAR 0 5
69187: ARRAY
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
69193: LD_VAR 0 7
69197: PUSH
69198: LD_INT 1
69200: ARRAY
69201: PPUSH
69202: LD_VAR 0 7
69206: PUSH
69207: LD_INT 2
69209: ARRAY
69210: PPUSH
69211: CALL_OW 428
69215: PUSH
69216: LD_INT 0
69218: EQUAL
69219: IFFALSE 69272
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69221: LD_VAR 0 1
69225: PPUSH
69226: LD_VAR 0 7
69230: PUSH
69231: LD_INT 1
69233: ARRAY
69234: PPUSH
69235: LD_VAR 0 7
69239: PUSH
69240: LD_INT 2
69242: ARRAY
69243: PPUSH
69244: LD_VAR 0 3
69248: PPUSH
69249: CALL_OW 48
// result := IsPlaced ( unit ) ;
69253: LD_ADDR_VAR 0 4
69257: PUSH
69258: LD_VAR 0 1
69262: PPUSH
69263: CALL_OW 305
69267: ST_TO_ADDR
// exit ;
69268: POP
69269: POP
69270: GO 69276
// end ; end ;
69272: GO 69151
69274: POP
69275: POP
// end ;
69276: LD_VAR 0 4
69280: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69281: LD_INT 0
69283: PPUSH
69284: PPUSH
69285: PPUSH
// if not side or side > 8 then
69286: LD_VAR 0 1
69290: NOT
69291: PUSH
69292: LD_VAR 0 1
69296: PUSH
69297: LD_INT 8
69299: GREATER
69300: OR
69301: IFFALSE 69305
// exit ;
69303: GO 69492
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69305: LD_ADDR_VAR 0 4
69309: PUSH
69310: LD_INT 22
69312: PUSH
69313: LD_VAR 0 1
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: LD_INT 21
69324: PUSH
69325: LD_INT 3
69327: PUSH
69328: EMPTY
69329: LIST
69330: LIST
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: PPUSH
69336: CALL_OW 69
69340: ST_TO_ADDR
// if not tmp then
69341: LD_VAR 0 4
69345: NOT
69346: IFFALSE 69350
// exit ;
69348: GO 69492
// enable_addtolog := true ;
69350: LD_ADDR_OWVAR 81
69354: PUSH
69355: LD_INT 1
69357: ST_TO_ADDR
// AddToLog ( [ ) ;
69358: LD_STRING [
69360: PPUSH
69361: CALL_OW 561
// for i in tmp do
69365: LD_ADDR_VAR 0 3
69369: PUSH
69370: LD_VAR 0 4
69374: PUSH
69375: FOR_IN
69376: IFFALSE 69483
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69378: LD_STRING [
69380: PUSH
69381: LD_VAR 0 3
69385: PPUSH
69386: CALL_OW 266
69390: STR
69391: PUSH
69392: LD_STRING , 
69394: STR
69395: PUSH
69396: LD_VAR 0 3
69400: PPUSH
69401: CALL_OW 250
69405: STR
69406: PUSH
69407: LD_STRING , 
69409: STR
69410: PUSH
69411: LD_VAR 0 3
69415: PPUSH
69416: CALL_OW 251
69420: STR
69421: PUSH
69422: LD_STRING , 
69424: STR
69425: PUSH
69426: LD_VAR 0 3
69430: PPUSH
69431: CALL_OW 254
69435: STR
69436: PUSH
69437: LD_STRING , 
69439: STR
69440: PUSH
69441: LD_VAR 0 3
69445: PPUSH
69446: LD_INT 1
69448: PPUSH
69449: CALL_OW 268
69453: STR
69454: PUSH
69455: LD_STRING , 
69457: STR
69458: PUSH
69459: LD_VAR 0 3
69463: PPUSH
69464: LD_INT 2
69466: PPUSH
69467: CALL_OW 268
69471: STR
69472: PUSH
69473: LD_STRING ],
69475: STR
69476: PPUSH
69477: CALL_OW 561
// end ;
69481: GO 69375
69483: POP
69484: POP
// AddToLog ( ]; ) ;
69485: LD_STRING ];
69487: PPUSH
69488: CALL_OW 561
// end ;
69492: LD_VAR 0 2
69496: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69497: LD_INT 0
69499: PPUSH
69500: PPUSH
69501: PPUSH
69502: PPUSH
69503: PPUSH
// if not area or not rate or not max then
69504: LD_VAR 0 1
69508: NOT
69509: PUSH
69510: LD_VAR 0 2
69514: NOT
69515: OR
69516: PUSH
69517: LD_VAR 0 4
69521: NOT
69522: OR
69523: IFFALSE 69527
// exit ;
69525: GO 69716
// while 1 do
69527: LD_INT 1
69529: IFFALSE 69716
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69531: LD_ADDR_VAR 0 9
69535: PUSH
69536: LD_VAR 0 1
69540: PPUSH
69541: LD_INT 1
69543: PPUSH
69544: CALL_OW 287
69548: PUSH
69549: LD_INT 10
69551: MUL
69552: ST_TO_ADDR
// r := rate / 10 ;
69553: LD_ADDR_VAR 0 7
69557: PUSH
69558: LD_VAR 0 2
69562: PUSH
69563: LD_INT 10
69565: DIVREAL
69566: ST_TO_ADDR
// time := 1 1$00 ;
69567: LD_ADDR_VAR 0 8
69571: PUSH
69572: LD_INT 2100
69574: ST_TO_ADDR
// if amount < min then
69575: LD_VAR 0 9
69579: PUSH
69580: LD_VAR 0 3
69584: LESS
69585: IFFALSE 69603
// r := r * 2 else
69587: LD_ADDR_VAR 0 7
69591: PUSH
69592: LD_VAR 0 7
69596: PUSH
69597: LD_INT 2
69599: MUL
69600: ST_TO_ADDR
69601: GO 69629
// if amount > max then
69603: LD_VAR 0 9
69607: PUSH
69608: LD_VAR 0 4
69612: GREATER
69613: IFFALSE 69629
// r := r / 2 ;
69615: LD_ADDR_VAR 0 7
69619: PUSH
69620: LD_VAR 0 7
69624: PUSH
69625: LD_INT 2
69627: DIVREAL
69628: ST_TO_ADDR
// time := time / r ;
69629: LD_ADDR_VAR 0 8
69633: PUSH
69634: LD_VAR 0 8
69638: PUSH
69639: LD_VAR 0 7
69643: DIVREAL
69644: ST_TO_ADDR
// if time < 0 then
69645: LD_VAR 0 8
69649: PUSH
69650: LD_INT 0
69652: LESS
69653: IFFALSE 69670
// time := time * - 1 ;
69655: LD_ADDR_VAR 0 8
69659: PUSH
69660: LD_VAR 0 8
69664: PUSH
69665: LD_INT 1
69667: NEG
69668: MUL
69669: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69670: LD_VAR 0 8
69674: PUSH
69675: LD_INT 35
69677: PPUSH
69678: LD_INT 875
69680: PPUSH
69681: CALL_OW 12
69685: PLUS
69686: PPUSH
69687: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69691: LD_INT 1
69693: PPUSH
69694: LD_INT 5
69696: PPUSH
69697: CALL_OW 12
69701: PPUSH
69702: LD_VAR 0 1
69706: PPUSH
69707: LD_INT 1
69709: PPUSH
69710: CALL_OW 55
// end ;
69714: GO 69527
// end ;
69716: LD_VAR 0 5
69720: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69721: LD_INT 0
69723: PPUSH
69724: PPUSH
69725: PPUSH
69726: PPUSH
69727: PPUSH
69728: PPUSH
69729: PPUSH
69730: PPUSH
// if not turrets or not factories then
69731: LD_VAR 0 1
69735: NOT
69736: PUSH
69737: LD_VAR 0 2
69741: NOT
69742: OR
69743: IFFALSE 69747
// exit ;
69745: GO 70054
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69747: LD_ADDR_VAR 0 10
69751: PUSH
69752: LD_INT 5
69754: PUSH
69755: LD_INT 6
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: PUSH
69762: LD_INT 2
69764: PUSH
69765: LD_INT 4
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: PUSH
69772: LD_INT 3
69774: PUSH
69775: LD_INT 5
69777: PUSH
69778: EMPTY
69779: LIST
69780: LIST
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: LIST
69786: PUSH
69787: LD_INT 24
69789: PUSH
69790: LD_INT 25
69792: PUSH
69793: EMPTY
69794: LIST
69795: LIST
69796: PUSH
69797: LD_INT 23
69799: PUSH
69800: LD_INT 27
69802: PUSH
69803: EMPTY
69804: LIST
69805: LIST
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: LD_INT 42
69813: PUSH
69814: LD_INT 43
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: PUSH
69821: LD_INT 44
69823: PUSH
69824: LD_INT 46
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: LD_INT 45
69833: PUSH
69834: LD_INT 47
69836: PUSH
69837: EMPTY
69838: LIST
69839: LIST
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: LIST
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: LIST
69850: ST_TO_ADDR
// result := [ ] ;
69851: LD_ADDR_VAR 0 3
69855: PUSH
69856: EMPTY
69857: ST_TO_ADDR
// for i in turrets do
69858: LD_ADDR_VAR 0 4
69862: PUSH
69863: LD_VAR 0 1
69867: PUSH
69868: FOR_IN
69869: IFFALSE 70052
// begin nat := GetNation ( i ) ;
69871: LD_ADDR_VAR 0 7
69875: PUSH
69876: LD_VAR 0 4
69880: PPUSH
69881: CALL_OW 248
69885: ST_TO_ADDR
// weapon := 0 ;
69886: LD_ADDR_VAR 0 8
69890: PUSH
69891: LD_INT 0
69893: ST_TO_ADDR
// if not nat then
69894: LD_VAR 0 7
69898: NOT
69899: IFFALSE 69903
// continue ;
69901: GO 69868
// for j in list [ nat ] do
69903: LD_ADDR_VAR 0 5
69907: PUSH
69908: LD_VAR 0 10
69912: PUSH
69913: LD_VAR 0 7
69917: ARRAY
69918: PUSH
69919: FOR_IN
69920: IFFALSE 69961
// if GetBWeapon ( i ) = j [ 1 ] then
69922: LD_VAR 0 4
69926: PPUSH
69927: CALL_OW 269
69931: PUSH
69932: LD_VAR 0 5
69936: PUSH
69937: LD_INT 1
69939: ARRAY
69940: EQUAL
69941: IFFALSE 69959
// begin weapon := j [ 2 ] ;
69943: LD_ADDR_VAR 0 8
69947: PUSH
69948: LD_VAR 0 5
69952: PUSH
69953: LD_INT 2
69955: ARRAY
69956: ST_TO_ADDR
// break ;
69957: GO 69961
// end ;
69959: GO 69919
69961: POP
69962: POP
// if not weapon then
69963: LD_VAR 0 8
69967: NOT
69968: IFFALSE 69972
// continue ;
69970: GO 69868
// for k in factories do
69972: LD_ADDR_VAR 0 6
69976: PUSH
69977: LD_VAR 0 2
69981: PUSH
69982: FOR_IN
69983: IFFALSE 70048
// begin weapons := AvailableWeaponList ( k ) ;
69985: LD_ADDR_VAR 0 9
69989: PUSH
69990: LD_VAR 0 6
69994: PPUSH
69995: CALL_OW 478
69999: ST_TO_ADDR
// if not weapons then
70000: LD_VAR 0 9
70004: NOT
70005: IFFALSE 70009
// continue ;
70007: GO 69982
// if weapon in weapons then
70009: LD_VAR 0 8
70013: PUSH
70014: LD_VAR 0 9
70018: IN
70019: IFFALSE 70046
// begin result := [ i , weapon ] ;
70021: LD_ADDR_VAR 0 3
70025: PUSH
70026: LD_VAR 0 4
70030: PUSH
70031: LD_VAR 0 8
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: ST_TO_ADDR
// exit ;
70040: POP
70041: POP
70042: POP
70043: POP
70044: GO 70054
// end ; end ;
70046: GO 69982
70048: POP
70049: POP
// end ;
70050: GO 69868
70052: POP
70053: POP
// end ;
70054: LD_VAR 0 3
70058: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70059: LD_INT 0
70061: PPUSH
// if not side or side > 8 then
70062: LD_VAR 0 3
70066: NOT
70067: PUSH
70068: LD_VAR 0 3
70072: PUSH
70073: LD_INT 8
70075: GREATER
70076: OR
70077: IFFALSE 70081
// exit ;
70079: GO 70140
// if not range then
70081: LD_VAR 0 4
70085: NOT
70086: IFFALSE 70097
// range := - 12 ;
70088: LD_ADDR_VAR 0 4
70092: PUSH
70093: LD_INT 12
70095: NEG
70096: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70097: LD_VAR 0 1
70101: PPUSH
70102: LD_VAR 0 2
70106: PPUSH
70107: LD_VAR 0 3
70111: PPUSH
70112: LD_VAR 0 4
70116: PPUSH
70117: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70121: LD_VAR 0 1
70125: PPUSH
70126: LD_VAR 0 2
70130: PPUSH
70131: LD_VAR 0 3
70135: PPUSH
70136: CALL_OW 331
// end ;
70140: LD_VAR 0 5
70144: RET
// export function Video ( mode ) ; begin
70145: LD_INT 0
70147: PPUSH
// ingame_video = mode ;
70148: LD_ADDR_OWVAR 52
70152: PUSH
70153: LD_VAR 0 1
70157: ST_TO_ADDR
// interface_hidden = mode ;
70158: LD_ADDR_OWVAR 54
70162: PUSH
70163: LD_VAR 0 1
70167: ST_TO_ADDR
// end ;
70168: LD_VAR 0 2
70172: RET
// export function Join ( array , element ) ; begin
70173: LD_INT 0
70175: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70176: LD_ADDR_VAR 0 3
70180: PUSH
70181: LD_VAR 0 1
70185: PPUSH
70186: LD_VAR 0 1
70190: PUSH
70191: LD_INT 1
70193: PLUS
70194: PPUSH
70195: LD_VAR 0 2
70199: PPUSH
70200: CALL_OW 1
70204: ST_TO_ADDR
// end ;
70205: LD_VAR 0 3
70209: RET
// export function JoinUnion ( array , element ) ; begin
70210: LD_INT 0
70212: PPUSH
// result := array union element ;
70213: LD_ADDR_VAR 0 3
70217: PUSH
70218: LD_VAR 0 1
70222: PUSH
70223: LD_VAR 0 2
70227: UNION
70228: ST_TO_ADDR
// end ;
70229: LD_VAR 0 3
70233: RET
// export function GetBehemoths ( side ) ; begin
70234: LD_INT 0
70236: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
70237: LD_ADDR_VAR 0 2
70241: PUSH
70242: LD_INT 22
70244: PUSH
70245: LD_VAR 0 1
70249: PUSH
70250: EMPTY
70251: LIST
70252: LIST
70253: PUSH
70254: LD_INT 31
70256: PUSH
70257: LD_INT 25
70259: PUSH
70260: EMPTY
70261: LIST
70262: LIST
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PPUSH
70268: CALL_OW 69
70272: ST_TO_ADDR
// end ;
70273: LD_VAR 0 2
70277: RET
// export function Shuffle ( array ) ; var i , index ; begin
70278: LD_INT 0
70280: PPUSH
70281: PPUSH
70282: PPUSH
// result := [ ] ;
70283: LD_ADDR_VAR 0 2
70287: PUSH
70288: EMPTY
70289: ST_TO_ADDR
// if not array then
70290: LD_VAR 0 1
70294: NOT
70295: IFFALSE 70299
// exit ;
70297: GO 70398
// Randomize ;
70299: CALL_OW 10
// for i = array downto 1 do
70303: LD_ADDR_VAR 0 3
70307: PUSH
70308: DOUBLE
70309: LD_VAR 0 1
70313: INC
70314: ST_TO_ADDR
70315: LD_INT 1
70317: PUSH
70318: FOR_DOWNTO
70319: IFFALSE 70396
// begin index := rand ( 1 , array ) ;
70321: LD_ADDR_VAR 0 4
70325: PUSH
70326: LD_INT 1
70328: PPUSH
70329: LD_VAR 0 1
70333: PPUSH
70334: CALL_OW 12
70338: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70339: LD_ADDR_VAR 0 2
70343: PUSH
70344: LD_VAR 0 2
70348: PPUSH
70349: LD_VAR 0 2
70353: PUSH
70354: LD_INT 1
70356: PLUS
70357: PPUSH
70358: LD_VAR 0 1
70362: PUSH
70363: LD_VAR 0 4
70367: ARRAY
70368: PPUSH
70369: CALL_OW 2
70373: ST_TO_ADDR
// array := Delete ( array , index ) ;
70374: LD_ADDR_VAR 0 1
70378: PUSH
70379: LD_VAR 0 1
70383: PPUSH
70384: LD_VAR 0 4
70388: PPUSH
70389: CALL_OW 3
70393: ST_TO_ADDR
// end ;
70394: GO 70318
70396: POP
70397: POP
// end ;
70398: LD_VAR 0 2
70402: RET
// export function GetBaseMaterials ( base ) ; begin
70403: LD_INT 0
70405: PPUSH
// result := [ 0 , 0 , 0 ] ;
70406: LD_ADDR_VAR 0 2
70410: PUSH
70411: LD_INT 0
70413: PUSH
70414: LD_INT 0
70416: PUSH
70417: LD_INT 0
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: LIST
70424: ST_TO_ADDR
// if not base then
70425: LD_VAR 0 1
70429: NOT
70430: IFFALSE 70434
// exit ;
70432: GO 70483
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70434: LD_ADDR_VAR 0 2
70438: PUSH
70439: LD_VAR 0 1
70443: PPUSH
70444: LD_INT 1
70446: PPUSH
70447: CALL_OW 275
70451: PUSH
70452: LD_VAR 0 1
70456: PPUSH
70457: LD_INT 2
70459: PPUSH
70460: CALL_OW 275
70464: PUSH
70465: LD_VAR 0 1
70469: PPUSH
70470: LD_INT 3
70472: PPUSH
70473: CALL_OW 275
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: LIST
70482: ST_TO_ADDR
// end ;
70483: LD_VAR 0 2
70487: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70488: LD_INT 0
70490: PPUSH
70491: PPUSH
// result := array ;
70492: LD_ADDR_VAR 0 3
70496: PUSH
70497: LD_VAR 0 1
70501: ST_TO_ADDR
// if size > 0 then
70502: LD_VAR 0 2
70506: PUSH
70507: LD_INT 0
70509: GREATER
70510: IFFALSE 70556
// for i := array downto size do
70512: LD_ADDR_VAR 0 4
70516: PUSH
70517: DOUBLE
70518: LD_VAR 0 1
70522: INC
70523: ST_TO_ADDR
70524: LD_VAR 0 2
70528: PUSH
70529: FOR_DOWNTO
70530: IFFALSE 70554
// result := Delete ( result , result ) ;
70532: LD_ADDR_VAR 0 3
70536: PUSH
70537: LD_VAR 0 3
70541: PPUSH
70542: LD_VAR 0 3
70546: PPUSH
70547: CALL_OW 3
70551: ST_TO_ADDR
70552: GO 70529
70554: POP
70555: POP
// end ;
70556: LD_VAR 0 3
70560: RET
// export function ComExit ( unit ) ; var tmp ; begin
70561: LD_INT 0
70563: PPUSH
70564: PPUSH
// if not IsInUnit ( unit ) then
70565: LD_VAR 0 1
70569: PPUSH
70570: CALL_OW 310
70574: NOT
70575: IFFALSE 70579
// exit ;
70577: GO 70639
// tmp := IsInUnit ( unit ) ;
70579: LD_ADDR_VAR 0 3
70583: PUSH
70584: LD_VAR 0 1
70588: PPUSH
70589: CALL_OW 310
70593: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70594: LD_VAR 0 3
70598: PPUSH
70599: CALL_OW 247
70603: PUSH
70604: LD_INT 2
70606: EQUAL
70607: IFFALSE 70620
// ComExitVehicle ( unit ) else
70609: LD_VAR 0 1
70613: PPUSH
70614: CALL_OW 121
70618: GO 70629
// ComExitBuilding ( unit ) ;
70620: LD_VAR 0 1
70624: PPUSH
70625: CALL_OW 122
// result := tmp ;
70629: LD_ADDR_VAR 0 2
70633: PUSH
70634: LD_VAR 0 3
70638: ST_TO_ADDR
// end ;
70639: LD_VAR 0 2
70643: RET
// export function ComExitAll ( units ) ; var i ; begin
70644: LD_INT 0
70646: PPUSH
70647: PPUSH
// if not units then
70648: LD_VAR 0 1
70652: NOT
70653: IFFALSE 70657
// exit ;
70655: GO 70683
// for i in units do
70657: LD_ADDR_VAR 0 3
70661: PUSH
70662: LD_VAR 0 1
70666: PUSH
70667: FOR_IN
70668: IFFALSE 70681
// ComExit ( i ) ;
70670: LD_VAR 0 3
70674: PPUSH
70675: CALL 70561 0 1
70679: GO 70667
70681: POP
70682: POP
// end ;
70683: LD_VAR 0 2
70687: RET
// export function ResetHc ; begin
70688: LD_INT 0
70690: PPUSH
// InitHc ;
70691: CALL_OW 19
// hc_importance := 0 ;
70695: LD_ADDR_OWVAR 32
70699: PUSH
70700: LD_INT 0
70702: ST_TO_ADDR
// end ;
70703: LD_VAR 0 1
70707: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70708: LD_INT 0
70710: PPUSH
70711: PPUSH
70712: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70713: LD_ADDR_VAR 0 6
70717: PUSH
70718: LD_VAR 0 1
70722: PUSH
70723: LD_VAR 0 3
70727: PLUS
70728: PUSH
70729: LD_INT 2
70731: DIV
70732: ST_TO_ADDR
// if _x < 0 then
70733: LD_VAR 0 6
70737: PUSH
70738: LD_INT 0
70740: LESS
70741: IFFALSE 70758
// _x := _x * - 1 ;
70743: LD_ADDR_VAR 0 6
70747: PUSH
70748: LD_VAR 0 6
70752: PUSH
70753: LD_INT 1
70755: NEG
70756: MUL
70757: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70758: LD_ADDR_VAR 0 7
70762: PUSH
70763: LD_VAR 0 2
70767: PUSH
70768: LD_VAR 0 4
70772: PLUS
70773: PUSH
70774: LD_INT 2
70776: DIV
70777: ST_TO_ADDR
// if _y < 0 then
70778: LD_VAR 0 7
70782: PUSH
70783: LD_INT 0
70785: LESS
70786: IFFALSE 70803
// _y := _y * - 1 ;
70788: LD_ADDR_VAR 0 7
70792: PUSH
70793: LD_VAR 0 7
70797: PUSH
70798: LD_INT 1
70800: NEG
70801: MUL
70802: ST_TO_ADDR
// result := [ _x , _y ] ;
70803: LD_ADDR_VAR 0 5
70807: PUSH
70808: LD_VAR 0 6
70812: PUSH
70813: LD_VAR 0 7
70817: PUSH
70818: EMPTY
70819: LIST
70820: LIST
70821: ST_TO_ADDR
// end ;
70822: LD_VAR 0 5
70826: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70827: LD_INT 0
70829: PPUSH
70830: PPUSH
70831: PPUSH
70832: PPUSH
// task := GetTaskList ( unit ) ;
70833: LD_ADDR_VAR 0 7
70837: PUSH
70838: LD_VAR 0 1
70842: PPUSH
70843: CALL_OW 437
70847: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70848: LD_VAR 0 7
70852: NOT
70853: PUSH
70854: LD_VAR 0 1
70858: PPUSH
70859: LD_VAR 0 2
70863: PPUSH
70864: CALL_OW 308
70868: NOT
70869: AND
70870: IFFALSE 70874
// exit ;
70872: GO 70992
// if IsInArea ( unit , area ) then
70874: LD_VAR 0 1
70878: PPUSH
70879: LD_VAR 0 2
70883: PPUSH
70884: CALL_OW 308
70888: IFFALSE 70906
// begin ComMoveToArea ( unit , goAway ) ;
70890: LD_VAR 0 1
70894: PPUSH
70895: LD_VAR 0 3
70899: PPUSH
70900: CALL_OW 113
// exit ;
70904: GO 70992
// end ; if task [ 1 ] [ 1 ] <> M then
70906: LD_VAR 0 7
70910: PUSH
70911: LD_INT 1
70913: ARRAY
70914: PUSH
70915: LD_INT 1
70917: ARRAY
70918: PUSH
70919: LD_STRING M
70921: NONEQUAL
70922: IFFALSE 70926
// exit ;
70924: GO 70992
// x := task [ 1 ] [ 2 ] ;
70926: LD_ADDR_VAR 0 5
70930: PUSH
70931: LD_VAR 0 7
70935: PUSH
70936: LD_INT 1
70938: ARRAY
70939: PUSH
70940: LD_INT 2
70942: ARRAY
70943: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70944: LD_ADDR_VAR 0 6
70948: PUSH
70949: LD_VAR 0 7
70953: PUSH
70954: LD_INT 1
70956: ARRAY
70957: PUSH
70958: LD_INT 3
70960: ARRAY
70961: ST_TO_ADDR
// if InArea ( x , y , area ) then
70962: LD_VAR 0 5
70966: PPUSH
70967: LD_VAR 0 6
70971: PPUSH
70972: LD_VAR 0 2
70976: PPUSH
70977: CALL_OW 309
70981: IFFALSE 70992
// ComStop ( unit ) ;
70983: LD_VAR 0 1
70987: PPUSH
70988: CALL_OW 141
// end ;
70992: LD_VAR 0 4
70996: RET
// export function Abs ( value ) ; begin
70997: LD_INT 0
70999: PPUSH
// result := value ;
71000: LD_ADDR_VAR 0 2
71004: PUSH
71005: LD_VAR 0 1
71009: ST_TO_ADDR
// if value < 0 then
71010: LD_VAR 0 1
71014: PUSH
71015: LD_INT 0
71017: LESS
71018: IFFALSE 71035
// result := value * - 1 ;
71020: LD_ADDR_VAR 0 2
71024: PUSH
71025: LD_VAR 0 1
71029: PUSH
71030: LD_INT 1
71032: NEG
71033: MUL
71034: ST_TO_ADDR
// end ;
71035: LD_VAR 0 2
71039: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71040: LD_INT 0
71042: PPUSH
71043: PPUSH
71044: PPUSH
71045: PPUSH
71046: PPUSH
71047: PPUSH
71048: PPUSH
71049: PPUSH
// if not unit or not building then
71050: LD_VAR 0 1
71054: NOT
71055: PUSH
71056: LD_VAR 0 2
71060: NOT
71061: OR
71062: IFFALSE 71066
// exit ;
71064: GO 71292
// x := GetX ( building ) ;
71066: LD_ADDR_VAR 0 4
71070: PUSH
71071: LD_VAR 0 2
71075: PPUSH
71076: CALL_OW 250
71080: ST_TO_ADDR
// y := GetY ( building ) ;
71081: LD_ADDR_VAR 0 6
71085: PUSH
71086: LD_VAR 0 2
71090: PPUSH
71091: CALL_OW 251
71095: ST_TO_ADDR
// d := GetDir ( building ) ;
71096: LD_ADDR_VAR 0 8
71100: PUSH
71101: LD_VAR 0 2
71105: PPUSH
71106: CALL_OW 254
71110: ST_TO_ADDR
// r := 4 ;
71111: LD_ADDR_VAR 0 9
71115: PUSH
71116: LD_INT 4
71118: ST_TO_ADDR
// for i := 1 to 5 do
71119: LD_ADDR_VAR 0 10
71123: PUSH
71124: DOUBLE
71125: LD_INT 1
71127: DEC
71128: ST_TO_ADDR
71129: LD_INT 5
71131: PUSH
71132: FOR_TO
71133: IFFALSE 71290
// begin _x := ShiftX ( x , d , r + i ) ;
71135: LD_ADDR_VAR 0 5
71139: PUSH
71140: LD_VAR 0 4
71144: PPUSH
71145: LD_VAR 0 8
71149: PPUSH
71150: LD_VAR 0 9
71154: PUSH
71155: LD_VAR 0 10
71159: PLUS
71160: PPUSH
71161: CALL_OW 272
71165: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71166: LD_ADDR_VAR 0 7
71170: PUSH
71171: LD_VAR 0 6
71175: PPUSH
71176: LD_VAR 0 8
71180: PPUSH
71181: LD_VAR 0 9
71185: PUSH
71186: LD_VAR 0 10
71190: PLUS
71191: PPUSH
71192: CALL_OW 273
71196: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71197: LD_VAR 0 5
71201: PPUSH
71202: LD_VAR 0 7
71206: PPUSH
71207: CALL_OW 488
71211: PUSH
71212: LD_VAR 0 5
71216: PPUSH
71217: LD_VAR 0 7
71221: PPUSH
71222: CALL_OW 428
71226: PPUSH
71227: CALL_OW 247
71231: PUSH
71232: LD_INT 3
71234: PUSH
71235: LD_INT 2
71237: PUSH
71238: EMPTY
71239: LIST
71240: LIST
71241: IN
71242: NOT
71243: AND
71244: IFFALSE 71288
// begin ComMoveXY ( unit , _x , _y ) ;
71246: LD_VAR 0 1
71250: PPUSH
71251: LD_VAR 0 5
71255: PPUSH
71256: LD_VAR 0 7
71260: PPUSH
71261: CALL_OW 111
// result := [ _x , _y ] ;
71265: LD_ADDR_VAR 0 3
71269: PUSH
71270: LD_VAR 0 5
71274: PUSH
71275: LD_VAR 0 7
71279: PUSH
71280: EMPTY
71281: LIST
71282: LIST
71283: ST_TO_ADDR
// exit ;
71284: POP
71285: POP
71286: GO 71292
// end ; end ;
71288: GO 71132
71290: POP
71291: POP
// end ;
71292: LD_VAR 0 3
71296: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71297: LD_INT 0
71299: PPUSH
71300: PPUSH
71301: PPUSH
// result := 0 ;
71302: LD_ADDR_VAR 0 3
71306: PUSH
71307: LD_INT 0
71309: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71310: LD_VAR 0 1
71314: PUSH
71315: LD_INT 0
71317: LESS
71318: PUSH
71319: LD_VAR 0 1
71323: PUSH
71324: LD_INT 8
71326: GREATER
71327: OR
71328: PUSH
71329: LD_VAR 0 2
71333: PUSH
71334: LD_INT 0
71336: LESS
71337: OR
71338: PUSH
71339: LD_VAR 0 2
71343: PUSH
71344: LD_INT 8
71346: GREATER
71347: OR
71348: IFFALSE 71352
// exit ;
71350: GO 71427
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71352: LD_ADDR_VAR 0 4
71356: PUSH
71357: LD_INT 22
71359: PUSH
71360: LD_VAR 0 2
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: PPUSH
71369: CALL_OW 69
71373: PUSH
71374: FOR_IN
71375: IFFALSE 71425
// begin un := UnitShoot ( i ) ;
71377: LD_ADDR_VAR 0 5
71381: PUSH
71382: LD_VAR 0 4
71386: PPUSH
71387: CALL_OW 504
71391: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71392: LD_VAR 0 5
71396: PPUSH
71397: CALL_OW 255
71401: PUSH
71402: LD_VAR 0 1
71406: EQUAL
71407: IFFALSE 71423
// begin result := un ;
71409: LD_ADDR_VAR 0 3
71413: PUSH
71414: LD_VAR 0 5
71418: ST_TO_ADDR
// exit ;
71419: POP
71420: POP
71421: GO 71427
// end ; end ;
71423: GO 71374
71425: POP
71426: POP
// end ;
71427: LD_VAR 0 3
71431: RET
// export function GetCargoBay ( units ) ; begin
71432: LD_INT 0
71434: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71435: LD_ADDR_VAR 0 2
71439: PUSH
71440: LD_VAR 0 1
71444: PPUSH
71445: LD_INT 2
71447: PUSH
71448: LD_INT 34
71450: PUSH
71451: LD_INT 12
71453: PUSH
71454: EMPTY
71455: LIST
71456: LIST
71457: PUSH
71458: LD_INT 34
71460: PUSH
71461: LD_INT 51
71463: PUSH
71464: EMPTY
71465: LIST
71466: LIST
71467: PUSH
71468: LD_INT 34
71470: PUSH
71471: LD_INT 32
71473: PUSH
71474: EMPTY
71475: LIST
71476: LIST
71477: PUSH
71478: LD_INT 34
71480: PUSH
71481: LD_EXP 45
71485: PUSH
71486: EMPTY
71487: LIST
71488: LIST
71489: PUSH
71490: EMPTY
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: LIST
71496: PPUSH
71497: CALL_OW 72
71501: ST_TO_ADDR
// end ;
71502: LD_VAR 0 2
71506: RET
// export function Negate ( value ) ; begin
71507: LD_INT 0
71509: PPUSH
// result := not value ;
71510: LD_ADDR_VAR 0 2
71514: PUSH
71515: LD_VAR 0 1
71519: NOT
71520: ST_TO_ADDR
// end ;
71521: LD_VAR 0 2
71525: RET
// export function Inc ( value ) ; begin
71526: LD_INT 0
71528: PPUSH
// result := value + 1 ;
71529: LD_ADDR_VAR 0 2
71533: PUSH
71534: LD_VAR 0 1
71538: PUSH
71539: LD_INT 1
71541: PLUS
71542: ST_TO_ADDR
// end ;
71543: LD_VAR 0 2
71547: RET
// export function Dec ( value ) ; begin
71548: LD_INT 0
71550: PPUSH
// result := value - 1 ;
71551: LD_ADDR_VAR 0 2
71555: PUSH
71556: LD_VAR 0 1
71560: PUSH
71561: LD_INT 1
71563: MINUS
71564: ST_TO_ADDR
// end ;
71565: LD_VAR 0 2
71569: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71570: LD_INT 0
71572: PPUSH
71573: PPUSH
71574: PPUSH
71575: PPUSH
71576: PPUSH
71577: PPUSH
71578: PPUSH
71579: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71580: LD_VAR 0 1
71584: PPUSH
71585: LD_VAR 0 2
71589: PPUSH
71590: CALL_OW 488
71594: NOT
71595: PUSH
71596: LD_VAR 0 3
71600: PPUSH
71601: LD_VAR 0 4
71605: PPUSH
71606: CALL_OW 488
71610: NOT
71611: OR
71612: IFFALSE 71625
// begin result := - 1 ;
71614: LD_ADDR_VAR 0 5
71618: PUSH
71619: LD_INT 1
71621: NEG
71622: ST_TO_ADDR
// exit ;
71623: GO 71860
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71625: LD_ADDR_VAR 0 12
71629: PUSH
71630: LD_VAR 0 1
71634: PPUSH
71635: LD_VAR 0 2
71639: PPUSH
71640: LD_VAR 0 3
71644: PPUSH
71645: LD_VAR 0 4
71649: PPUSH
71650: CALL 70708 0 4
71654: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71655: LD_ADDR_VAR 0 11
71659: PUSH
71660: LD_VAR 0 1
71664: PPUSH
71665: LD_VAR 0 2
71669: PPUSH
71670: LD_VAR 0 12
71674: PUSH
71675: LD_INT 1
71677: ARRAY
71678: PPUSH
71679: LD_VAR 0 12
71683: PUSH
71684: LD_INT 2
71686: ARRAY
71687: PPUSH
71688: CALL_OW 298
71692: ST_TO_ADDR
// distance := 9999 ;
71693: LD_ADDR_VAR 0 10
71697: PUSH
71698: LD_INT 9999
71700: ST_TO_ADDR
// for i := 0 to 5 do
71701: LD_ADDR_VAR 0 6
71705: PUSH
71706: DOUBLE
71707: LD_INT 0
71709: DEC
71710: ST_TO_ADDR
71711: LD_INT 5
71713: PUSH
71714: FOR_TO
71715: IFFALSE 71858
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71717: LD_ADDR_VAR 0 7
71721: PUSH
71722: LD_VAR 0 1
71726: PPUSH
71727: LD_VAR 0 6
71731: PPUSH
71732: LD_VAR 0 11
71736: PPUSH
71737: CALL_OW 272
71741: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71742: LD_ADDR_VAR 0 8
71746: PUSH
71747: LD_VAR 0 2
71751: PPUSH
71752: LD_VAR 0 6
71756: PPUSH
71757: LD_VAR 0 11
71761: PPUSH
71762: CALL_OW 273
71766: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71767: LD_VAR 0 7
71771: PPUSH
71772: LD_VAR 0 8
71776: PPUSH
71777: CALL_OW 488
71781: NOT
71782: IFFALSE 71786
// continue ;
71784: GO 71714
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71786: LD_ADDR_VAR 0 9
71790: PUSH
71791: LD_VAR 0 12
71795: PUSH
71796: LD_INT 1
71798: ARRAY
71799: PPUSH
71800: LD_VAR 0 12
71804: PUSH
71805: LD_INT 2
71807: ARRAY
71808: PPUSH
71809: LD_VAR 0 7
71813: PPUSH
71814: LD_VAR 0 8
71818: PPUSH
71819: CALL_OW 298
71823: ST_TO_ADDR
// if tmp < distance then
71824: LD_VAR 0 9
71828: PUSH
71829: LD_VAR 0 10
71833: LESS
71834: IFFALSE 71856
// begin result := i ;
71836: LD_ADDR_VAR 0 5
71840: PUSH
71841: LD_VAR 0 6
71845: ST_TO_ADDR
// distance := tmp ;
71846: LD_ADDR_VAR 0 10
71850: PUSH
71851: LD_VAR 0 9
71855: ST_TO_ADDR
// end ; end ;
71856: GO 71714
71858: POP
71859: POP
// end ;
71860: LD_VAR 0 5
71864: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71865: LD_INT 0
71867: PPUSH
71868: PPUSH
// if not driver or not IsInUnit ( driver ) then
71869: LD_VAR 0 1
71873: NOT
71874: PUSH
71875: LD_VAR 0 1
71879: PPUSH
71880: CALL_OW 310
71884: NOT
71885: OR
71886: IFFALSE 71890
// exit ;
71888: GO 71980
// vehicle := IsInUnit ( driver ) ;
71890: LD_ADDR_VAR 0 3
71894: PUSH
71895: LD_VAR 0 1
71899: PPUSH
71900: CALL_OW 310
71904: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71905: LD_VAR 0 1
71909: PPUSH
71910: LD_STRING \
71912: PUSH
71913: LD_INT 0
71915: PUSH
71916: LD_INT 0
71918: PUSH
71919: LD_INT 0
71921: PUSH
71922: LD_INT 0
71924: PUSH
71925: LD_INT 0
71927: PUSH
71928: LD_INT 0
71930: PUSH
71931: EMPTY
71932: LIST
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: LIST
71938: LIST
71939: PUSH
71940: LD_STRING E
71942: PUSH
71943: LD_INT 0
71945: PUSH
71946: LD_INT 0
71948: PUSH
71949: LD_VAR 0 3
71953: PUSH
71954: LD_INT 0
71956: PUSH
71957: LD_INT 0
71959: PUSH
71960: LD_INT 0
71962: PUSH
71963: EMPTY
71964: LIST
71965: LIST
71966: LIST
71967: LIST
71968: LIST
71969: LIST
71970: LIST
71971: PUSH
71972: EMPTY
71973: LIST
71974: LIST
71975: PPUSH
71976: CALL_OW 446
// end ;
71980: LD_VAR 0 2
71984: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71985: LD_INT 0
71987: PPUSH
71988: PPUSH
// if not driver or not IsInUnit ( driver ) then
71989: LD_VAR 0 1
71993: NOT
71994: PUSH
71995: LD_VAR 0 1
71999: PPUSH
72000: CALL_OW 310
72004: NOT
72005: OR
72006: IFFALSE 72010
// exit ;
72008: GO 72100
// vehicle := IsInUnit ( driver ) ;
72010: LD_ADDR_VAR 0 3
72014: PUSH
72015: LD_VAR 0 1
72019: PPUSH
72020: CALL_OW 310
72024: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72025: LD_VAR 0 1
72029: PPUSH
72030: LD_STRING \
72032: PUSH
72033: LD_INT 0
72035: PUSH
72036: LD_INT 0
72038: PUSH
72039: LD_INT 0
72041: PUSH
72042: LD_INT 0
72044: PUSH
72045: LD_INT 0
72047: PUSH
72048: LD_INT 0
72050: PUSH
72051: EMPTY
72052: LIST
72053: LIST
72054: LIST
72055: LIST
72056: LIST
72057: LIST
72058: LIST
72059: PUSH
72060: LD_STRING E
72062: PUSH
72063: LD_INT 0
72065: PUSH
72066: LD_INT 0
72068: PUSH
72069: LD_VAR 0 3
72073: PUSH
72074: LD_INT 0
72076: PUSH
72077: LD_INT 0
72079: PUSH
72080: LD_INT 0
72082: PUSH
72083: EMPTY
72084: LIST
72085: LIST
72086: LIST
72087: LIST
72088: LIST
72089: LIST
72090: LIST
72091: PUSH
72092: EMPTY
72093: LIST
72094: LIST
72095: PPUSH
72096: CALL_OW 447
// end ;
72100: LD_VAR 0 2
72104: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72105: LD_INT 0
72107: PPUSH
72108: PPUSH
72109: PPUSH
// tmp := [ ] ;
72110: LD_ADDR_VAR 0 5
72114: PUSH
72115: EMPTY
72116: ST_TO_ADDR
// for i in units do
72117: LD_ADDR_VAR 0 4
72121: PUSH
72122: LD_VAR 0 1
72126: PUSH
72127: FOR_IN
72128: IFFALSE 72166
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72130: LD_ADDR_VAR 0 5
72134: PUSH
72135: LD_VAR 0 5
72139: PPUSH
72140: LD_VAR 0 5
72144: PUSH
72145: LD_INT 1
72147: PLUS
72148: PPUSH
72149: LD_VAR 0 4
72153: PPUSH
72154: CALL_OW 256
72158: PPUSH
72159: CALL_OW 2
72163: ST_TO_ADDR
72164: GO 72127
72166: POP
72167: POP
// if not tmp then
72168: LD_VAR 0 5
72172: NOT
72173: IFFALSE 72177
// exit ;
72175: GO 72225
// if asc then
72177: LD_VAR 0 2
72181: IFFALSE 72205
// result := SortListByListAsc ( units , tmp ) else
72183: LD_ADDR_VAR 0 3
72187: PUSH
72188: LD_VAR 0 1
72192: PPUSH
72193: LD_VAR 0 5
72197: PPUSH
72198: CALL_OW 76
72202: ST_TO_ADDR
72203: GO 72225
// result := SortListByListDesc ( units , tmp ) ;
72205: LD_ADDR_VAR 0 3
72209: PUSH
72210: LD_VAR 0 1
72214: PPUSH
72215: LD_VAR 0 5
72219: PPUSH
72220: CALL_OW 77
72224: ST_TO_ADDR
// end ;
72225: LD_VAR 0 3
72229: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72230: LD_INT 0
72232: PPUSH
72233: PPUSH
// task := GetTaskList ( mech ) ;
72234: LD_ADDR_VAR 0 4
72238: PUSH
72239: LD_VAR 0 1
72243: PPUSH
72244: CALL_OW 437
72248: ST_TO_ADDR
// if not task then
72249: LD_VAR 0 4
72253: NOT
72254: IFFALSE 72258
// exit ;
72256: GO 72300
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72258: LD_ADDR_VAR 0 3
72262: PUSH
72263: LD_VAR 0 4
72267: PUSH
72268: LD_INT 1
72270: ARRAY
72271: PUSH
72272: LD_INT 1
72274: ARRAY
72275: PUSH
72276: LD_STRING r
72278: EQUAL
72279: PUSH
72280: LD_VAR 0 4
72284: PUSH
72285: LD_INT 1
72287: ARRAY
72288: PUSH
72289: LD_INT 4
72291: ARRAY
72292: PUSH
72293: LD_VAR 0 2
72297: EQUAL
72298: AND
72299: ST_TO_ADDR
// end ;
72300: LD_VAR 0 3
72304: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72305: LD_INT 0
72307: PPUSH
// SetDir ( unit , d ) ;
72308: LD_VAR 0 1
72312: PPUSH
72313: LD_VAR 0 4
72317: PPUSH
72318: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
72322: LD_VAR 0 1
72326: PPUSH
72327: LD_VAR 0 2
72331: PPUSH
72332: LD_VAR 0 3
72336: PPUSH
72337: LD_VAR 0 5
72341: PPUSH
72342: CALL_OW 48
// end ;
72346: LD_VAR 0 6
72350: RET
// export function ToNaturalNumber ( number ) ; begin
72351: LD_INT 0
72353: PPUSH
// result := number div 1 ;
72354: LD_ADDR_VAR 0 2
72358: PUSH
72359: LD_VAR 0 1
72363: PUSH
72364: LD_INT 1
72366: DIV
72367: ST_TO_ADDR
// if number < 0 then
72368: LD_VAR 0 1
72372: PUSH
72373: LD_INT 0
72375: LESS
72376: IFFALSE 72386
// result := 0 ;
72378: LD_ADDR_VAR 0 2
72382: PUSH
72383: LD_INT 0
72385: ST_TO_ADDR
// end ;
72386: LD_VAR 0 2
72390: RET
// export function SortByClass ( units , class ) ; var un ; begin
72391: LD_INT 0
72393: PPUSH
72394: PPUSH
// if not units or not class then
72395: LD_VAR 0 1
72399: NOT
72400: PUSH
72401: LD_VAR 0 2
72405: NOT
72406: OR
72407: IFFALSE 72411
// exit ;
72409: GO 72506
// result := [ ] ;
72411: LD_ADDR_VAR 0 3
72415: PUSH
72416: EMPTY
72417: ST_TO_ADDR
// for un in units do
72418: LD_ADDR_VAR 0 4
72422: PUSH
72423: LD_VAR 0 1
72427: PUSH
72428: FOR_IN
72429: IFFALSE 72504
// if GetClass ( un ) = class then
72431: LD_VAR 0 4
72435: PPUSH
72436: CALL_OW 257
72440: PUSH
72441: LD_VAR 0 2
72445: EQUAL
72446: IFFALSE 72473
// result := Insert ( result , 1 , un ) else
72448: LD_ADDR_VAR 0 3
72452: PUSH
72453: LD_VAR 0 3
72457: PPUSH
72458: LD_INT 1
72460: PPUSH
72461: LD_VAR 0 4
72465: PPUSH
72466: CALL_OW 2
72470: ST_TO_ADDR
72471: GO 72502
// result := Replace ( result , result + 1 , un ) ;
72473: LD_ADDR_VAR 0 3
72477: PUSH
72478: LD_VAR 0 3
72482: PPUSH
72483: LD_VAR 0 3
72487: PUSH
72488: LD_INT 1
72490: PLUS
72491: PPUSH
72492: LD_VAR 0 4
72496: PPUSH
72497: CALL_OW 1
72501: ST_TO_ADDR
72502: GO 72428
72504: POP
72505: POP
// end ;
72506: LD_VAR 0 3
72510: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72511: LD_INT 0
72513: PPUSH
72514: PPUSH
72515: PPUSH
72516: PPUSH
72517: PPUSH
72518: PPUSH
72519: PPUSH
// result := [ ] ;
72520: LD_ADDR_VAR 0 4
72524: PUSH
72525: EMPTY
72526: ST_TO_ADDR
// if x - r < 0 then
72527: LD_VAR 0 1
72531: PUSH
72532: LD_VAR 0 3
72536: MINUS
72537: PUSH
72538: LD_INT 0
72540: LESS
72541: IFFALSE 72553
// min_x := 0 else
72543: LD_ADDR_VAR 0 8
72547: PUSH
72548: LD_INT 0
72550: ST_TO_ADDR
72551: GO 72569
// min_x := x - r ;
72553: LD_ADDR_VAR 0 8
72557: PUSH
72558: LD_VAR 0 1
72562: PUSH
72563: LD_VAR 0 3
72567: MINUS
72568: ST_TO_ADDR
// if y - r < 0 then
72569: LD_VAR 0 2
72573: PUSH
72574: LD_VAR 0 3
72578: MINUS
72579: PUSH
72580: LD_INT 0
72582: LESS
72583: IFFALSE 72595
// min_y := 0 else
72585: LD_ADDR_VAR 0 7
72589: PUSH
72590: LD_INT 0
72592: ST_TO_ADDR
72593: GO 72611
// min_y := y - r ;
72595: LD_ADDR_VAR 0 7
72599: PUSH
72600: LD_VAR 0 2
72604: PUSH
72605: LD_VAR 0 3
72609: MINUS
72610: ST_TO_ADDR
// max_x := x + r ;
72611: LD_ADDR_VAR 0 9
72615: PUSH
72616: LD_VAR 0 1
72620: PUSH
72621: LD_VAR 0 3
72625: PLUS
72626: ST_TO_ADDR
// max_y := y + r ;
72627: LD_ADDR_VAR 0 10
72631: PUSH
72632: LD_VAR 0 2
72636: PUSH
72637: LD_VAR 0 3
72641: PLUS
72642: ST_TO_ADDR
// for _x = min_x to max_x do
72643: LD_ADDR_VAR 0 5
72647: PUSH
72648: DOUBLE
72649: LD_VAR 0 8
72653: DEC
72654: ST_TO_ADDR
72655: LD_VAR 0 9
72659: PUSH
72660: FOR_TO
72661: IFFALSE 72762
// for _y = min_y to max_y do
72663: LD_ADDR_VAR 0 6
72667: PUSH
72668: DOUBLE
72669: LD_VAR 0 7
72673: DEC
72674: ST_TO_ADDR
72675: LD_VAR 0 10
72679: PUSH
72680: FOR_TO
72681: IFFALSE 72758
// begin if not ValidHex ( _x , _y ) then
72683: LD_VAR 0 5
72687: PPUSH
72688: LD_VAR 0 6
72692: PPUSH
72693: CALL_OW 488
72697: NOT
72698: IFFALSE 72702
// continue ;
72700: GO 72680
// if GetResourceTypeXY ( _x , _y ) then
72702: LD_VAR 0 5
72706: PPUSH
72707: LD_VAR 0 6
72711: PPUSH
72712: CALL_OW 283
72716: IFFALSE 72756
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72718: LD_ADDR_VAR 0 4
72722: PUSH
72723: LD_VAR 0 4
72727: PPUSH
72728: LD_VAR 0 4
72732: PUSH
72733: LD_INT 1
72735: PLUS
72736: PPUSH
72737: LD_VAR 0 5
72741: PUSH
72742: LD_VAR 0 6
72746: PUSH
72747: EMPTY
72748: LIST
72749: LIST
72750: PPUSH
72751: CALL_OW 1
72755: ST_TO_ADDR
// end ;
72756: GO 72680
72758: POP
72759: POP
72760: GO 72660
72762: POP
72763: POP
// end ;
72764: LD_VAR 0 4
72768: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72769: LD_INT 0
72771: PPUSH
72772: PPUSH
72773: PPUSH
72774: PPUSH
72775: PPUSH
72776: PPUSH
72777: PPUSH
72778: PPUSH
// if not units then
72779: LD_VAR 0 1
72783: NOT
72784: IFFALSE 72788
// exit ;
72786: GO 73213
// result := UnitFilter ( units , [ f_ok ] ) ;
72788: LD_ADDR_VAR 0 3
72792: PUSH
72793: LD_VAR 0 1
72797: PPUSH
72798: LD_INT 50
72800: PUSH
72801: EMPTY
72802: LIST
72803: PPUSH
72804: CALL_OW 72
72808: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72809: LD_ADDR_VAR 0 8
72813: PUSH
72814: LD_VAR 0 1
72818: PUSH
72819: LD_INT 1
72821: ARRAY
72822: PPUSH
72823: CALL_OW 255
72827: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
72828: LD_ADDR_VAR 0 10
72832: PUSH
72833: LD_INT 29
72835: PUSH
72836: LD_EXP 48
72840: PUSH
72841: EMPTY
72842: LIST
72843: LIST
72844: ST_TO_ADDR
// if not result then
72845: LD_VAR 0 3
72849: NOT
72850: IFFALSE 72854
// exit ;
72852: GO 73213
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72854: LD_ADDR_VAR 0 5
72858: PUSH
72859: LD_INT 81
72861: PUSH
72862: LD_VAR 0 8
72866: PUSH
72867: EMPTY
72868: LIST
72869: LIST
72870: PPUSH
72871: CALL_OW 69
72875: ST_TO_ADDR
// for i in result do
72876: LD_ADDR_VAR 0 4
72880: PUSH
72881: LD_VAR 0 3
72885: PUSH
72886: FOR_IN
72887: IFFALSE 73211
// begin tag := GetTag ( i ) + 1 ;
72889: LD_ADDR_VAR 0 9
72893: PUSH
72894: LD_VAR 0 4
72898: PPUSH
72899: CALL_OW 110
72903: PUSH
72904: LD_INT 1
72906: PLUS
72907: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
72908: LD_ADDR_VAR 0 7
72912: PUSH
72913: LD_VAR 0 4
72917: PPUSH
72918: CALL_OW 250
72922: PPUSH
72923: LD_VAR 0 4
72927: PPUSH
72928: CALL_OW 251
72932: PPUSH
72933: LD_INT 6
72935: PPUSH
72936: CALL 72511 0 3
72940: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
72941: LD_VAR 0 7
72945: PUSH
72946: LD_VAR 0 4
72950: PPUSH
72951: CALL_OW 264
72955: PUSH
72956: LD_VAR 0 10
72960: IN
72961: NOT
72962: AND
72963: IFFALSE 73002
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72965: LD_VAR 0 4
72969: PPUSH
72970: LD_VAR 0 7
72974: PUSH
72975: LD_INT 1
72977: ARRAY
72978: PUSH
72979: LD_INT 1
72981: ARRAY
72982: PPUSH
72983: LD_VAR 0 7
72987: PUSH
72988: LD_INT 1
72990: ARRAY
72991: PUSH
72992: LD_INT 2
72994: ARRAY
72995: PPUSH
72996: CALL_OW 116
73000: GO 73209
// if path > tag then
73002: LD_VAR 0 2
73006: PUSH
73007: LD_VAR 0 9
73011: GREATER
73012: IFFALSE 73179
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
73014: LD_ADDR_VAR 0 6
73018: PUSH
73019: LD_VAR 0 5
73023: PPUSH
73024: LD_INT 91
73026: PUSH
73027: LD_VAR 0 4
73031: PUSH
73032: LD_INT 12
73034: PUSH
73035: EMPTY
73036: LIST
73037: LIST
73038: LIST
73039: PPUSH
73040: CALL_OW 72
73044: ST_TO_ADDR
// if nearEnemy then
73045: LD_VAR 0 6
73049: IFFALSE 73077
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73051: LD_VAR 0 4
73055: PPUSH
73056: LD_VAR 0 6
73060: PPUSH
73061: LD_VAR 0 4
73065: PPUSH
73066: CALL_OW 74
73070: PPUSH
73071: CALL_OW 115
73075: GO 73177
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73077: LD_VAR 0 4
73081: PPUSH
73082: LD_VAR 0 2
73086: PUSH
73087: LD_VAR 0 9
73091: ARRAY
73092: PUSH
73093: LD_INT 1
73095: ARRAY
73096: PPUSH
73097: LD_VAR 0 2
73101: PUSH
73102: LD_VAR 0 9
73106: ARRAY
73107: PUSH
73108: LD_INT 2
73110: ARRAY
73111: PPUSH
73112: CALL_OW 297
73116: PUSH
73117: LD_INT 6
73119: GREATER
73120: IFFALSE 73163
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73122: LD_VAR 0 4
73126: PPUSH
73127: LD_VAR 0 2
73131: PUSH
73132: LD_VAR 0 9
73136: ARRAY
73137: PUSH
73138: LD_INT 1
73140: ARRAY
73141: PPUSH
73142: LD_VAR 0 2
73146: PUSH
73147: LD_VAR 0 9
73151: ARRAY
73152: PUSH
73153: LD_INT 2
73155: ARRAY
73156: PPUSH
73157: CALL_OW 114
73161: GO 73177
// SetTag ( i , tag ) ;
73163: LD_VAR 0 4
73167: PPUSH
73168: LD_VAR 0 9
73172: PPUSH
73173: CALL_OW 109
// end else
73177: GO 73209
// if enemy then
73179: LD_VAR 0 5
73183: IFFALSE 73209
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73185: LD_VAR 0 4
73189: PPUSH
73190: LD_VAR 0 5
73194: PPUSH
73195: LD_VAR 0 4
73199: PPUSH
73200: CALL_OW 74
73204: PPUSH
73205: CALL_OW 115
// end ;
73209: GO 72886
73211: POP
73212: POP
// end ;
73213: LD_VAR 0 3
73217: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
73218: LD_INT 0
73220: PPUSH
73221: PPUSH
73222: PPUSH
// if not unit or IsInUnit ( unit ) then
73223: LD_VAR 0 1
73227: NOT
73228: PUSH
73229: LD_VAR 0 1
73233: PPUSH
73234: CALL_OW 310
73238: OR
73239: IFFALSE 73243
// exit ;
73241: GO 73334
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73243: LD_ADDR_VAR 0 4
73247: PUSH
73248: LD_VAR 0 1
73252: PPUSH
73253: CALL_OW 250
73257: PPUSH
73258: LD_VAR 0 2
73262: PPUSH
73263: LD_INT 1
73265: PPUSH
73266: CALL_OW 272
73270: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73271: LD_ADDR_VAR 0 5
73275: PUSH
73276: LD_VAR 0 1
73280: PPUSH
73281: CALL_OW 251
73285: PPUSH
73286: LD_VAR 0 2
73290: PPUSH
73291: LD_INT 1
73293: PPUSH
73294: CALL_OW 273
73298: ST_TO_ADDR
// if ValidHex ( x , y ) then
73299: LD_VAR 0 4
73303: PPUSH
73304: LD_VAR 0 5
73308: PPUSH
73309: CALL_OW 488
73313: IFFALSE 73334
// ComTurnXY ( unit , x , y ) ;
73315: LD_VAR 0 1
73319: PPUSH
73320: LD_VAR 0 4
73324: PPUSH
73325: LD_VAR 0 5
73329: PPUSH
73330: CALL_OW 118
// end ;
73334: LD_VAR 0 3
73338: RET
// export function SeeUnits ( side , units ) ; var i ; begin
73339: LD_INT 0
73341: PPUSH
73342: PPUSH
// result := false ;
73343: LD_ADDR_VAR 0 3
73347: PUSH
73348: LD_INT 0
73350: ST_TO_ADDR
// if not units then
73351: LD_VAR 0 2
73355: NOT
73356: IFFALSE 73360
// exit ;
73358: GO 73405
// for i in units do
73360: LD_ADDR_VAR 0 4
73364: PUSH
73365: LD_VAR 0 2
73369: PUSH
73370: FOR_IN
73371: IFFALSE 73403
// if See ( side , i ) then
73373: LD_VAR 0 1
73377: PPUSH
73378: LD_VAR 0 4
73382: PPUSH
73383: CALL_OW 292
73387: IFFALSE 73401
// begin result := true ;
73389: LD_ADDR_VAR 0 3
73393: PUSH
73394: LD_INT 1
73396: ST_TO_ADDR
// exit ;
73397: POP
73398: POP
73399: GO 73405
// end ;
73401: GO 73370
73403: POP
73404: POP
// end ;
73405: LD_VAR 0 3
73409: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
73410: LD_INT 0
73412: PPUSH
73413: PPUSH
73414: PPUSH
73415: PPUSH
// if not unit or not points then
73416: LD_VAR 0 1
73420: NOT
73421: PUSH
73422: LD_VAR 0 2
73426: NOT
73427: OR
73428: IFFALSE 73432
// exit ;
73430: GO 73522
// dist := 99999 ;
73432: LD_ADDR_VAR 0 5
73436: PUSH
73437: LD_INT 99999
73439: ST_TO_ADDR
// for i in points do
73440: LD_ADDR_VAR 0 4
73444: PUSH
73445: LD_VAR 0 2
73449: PUSH
73450: FOR_IN
73451: IFFALSE 73520
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73453: LD_ADDR_VAR 0 6
73457: PUSH
73458: LD_VAR 0 1
73462: PPUSH
73463: LD_VAR 0 4
73467: PUSH
73468: LD_INT 1
73470: ARRAY
73471: PPUSH
73472: LD_VAR 0 4
73476: PUSH
73477: LD_INT 2
73479: ARRAY
73480: PPUSH
73481: CALL_OW 297
73485: ST_TO_ADDR
// if tmpDist < dist then
73486: LD_VAR 0 6
73490: PUSH
73491: LD_VAR 0 5
73495: LESS
73496: IFFALSE 73518
// begin result := i ;
73498: LD_ADDR_VAR 0 3
73502: PUSH
73503: LD_VAR 0 4
73507: ST_TO_ADDR
// dist := tmpDist ;
73508: LD_ADDR_VAR 0 5
73512: PUSH
73513: LD_VAR 0 6
73517: ST_TO_ADDR
// end ; end ;
73518: GO 73450
73520: POP
73521: POP
// end ; end_of_file
73522: LD_VAR 0 3
73526: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73527: LD_VAR 0 1
73531: PUSH
73532: LD_INT 200
73534: DOUBLE
73535: GREATEREQUAL
73536: IFFALSE 73544
73538: LD_INT 299
73540: DOUBLE
73541: LESSEQUAL
73542: IFTRUE 73546
73544: GO 73578
73546: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73547: LD_VAR 0 1
73551: PPUSH
73552: LD_VAR 0 2
73556: PPUSH
73557: LD_VAR 0 3
73561: PPUSH
73562: LD_VAR 0 4
73566: PPUSH
73567: LD_VAR 0 5
73571: PPUSH
73572: CALL 14896 0 5
73576: GO 73655
73578: LD_INT 300
73580: DOUBLE
73581: GREATEREQUAL
73582: IFFALSE 73590
73584: LD_INT 399
73586: DOUBLE
73587: LESSEQUAL
73588: IFTRUE 73592
73590: GO 73654
73592: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73593: LD_VAR 0 1
73597: PPUSH
73598: LD_VAR 0 2
73602: PPUSH
73603: LD_VAR 0 3
73607: PPUSH
73608: LD_VAR 0 4
73612: PPUSH
73613: LD_VAR 0 5
73617: PPUSH
73618: LD_VAR 0 6
73622: PPUSH
73623: LD_VAR 0 7
73627: PPUSH
73628: LD_VAR 0 8
73632: PPUSH
73633: LD_VAR 0 9
73637: PPUSH
73638: LD_VAR 0 10
73642: PPUSH
73643: LD_VAR 0 11
73647: PPUSH
73648: CALL 31512 0 11
73652: GO 73655
73654: POP
// end ;
73655: PPOPN 11
73657: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73658: LD_VAR 0 1
73662: PPUSH
73663: LD_VAR 0 2
73667: PPUSH
73668: LD_VAR 0 3
73672: PPUSH
73673: LD_VAR 0 4
73677: PPUSH
73678: LD_VAR 0 5
73682: PPUSH
73683: CALL 14632 0 5
// end ; end_of_file
73687: PPOPN 5
73689: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73690: LD_VAR 0 1
73694: PPUSH
73695: LD_VAR 0 2
73699: PPUSH
73700: LD_VAR 0 3
73704: PPUSH
73705: LD_VAR 0 4
73709: PPUSH
73710: LD_VAR 0 5
73714: PPUSH
73715: LD_VAR 0 6
73719: PPUSH
73720: CALL 19205 0 6
// end ;
73724: PPOPN 6
73726: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73727: CALL 19180 0 0
// end ;
73731: PPOPN 1
73733: END
