// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 758 0 2
// PrepareArabian ;
  31: CALL 1379 0 0
// PrepareRussian ;
  35: CALL 3030 0 0
// Action ;
  39: CALL 8466 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: LD_INT 7
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_STRING 04_1_RuLabCaptured
 221: PPUSH
 222: LD_INT 0
 224: PPUSH
 225: CALL_OW 30
 229: ST_TO_ADDR
// captureCounter := 0 ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// flamethrowerBuilt := false ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 254: LD_ADDR_OWVAR 79
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// solar_recharge_amount := 0 ;
 262: LD_ADDR_OWVAR 82
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// end ;
 270: LD_VAR 0 1
 274: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 275: LD_EXP 10
 279: NOT
 280: IFFALSE 289
 282: PUSH
 283: LD_EXP 9
 287: NOT
 288: AND
 289: IFFALSE 298
 291: PUSH
 292: LD_EXP 39
 296: NOT
 297: AND
 298: IFFALSE 307
 300: PUSH
 301: LD_EXP 40
 305: NOT
 306: AND
 307: IFFALSE 319
 309: GO 311
 311: DISABLE
// SetAchievement ( ACH_EXT ) ;
 312: LD_STRING ACH_EXT
 314: PPUSH
 315: CALL_OW 543
 319: END
// every 0 0$1 trigger captureCounter >= 6 do
 320: LD_EXP 18
 324: PUSH
 325: LD_INT 6
 327: GREATEREQUAL
 328: IFFALSE 340
 330: GO 332
 332: DISABLE
// SetAchievement ( ACH_KEY ) ;
 333: LD_STRING ACH_KEY
 335: PPUSH
 336: CALL_OW 543
 340: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 341: LD_EXP 19
 345: PUSH
 346: LD_INT 3
 348: GREATEREQUAL
 349: IFFALSE 361
 351: GO 353
 353: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 354: LD_STRING ACH_CHEM
 356: PPUSH
 357: CALL_OW 543
 361: END
// every 0 0$1 trigger debug do var i ;
 362: LD_EXP 1
 366: IFFALSE 450
 368: GO 370
 370: DISABLE
 371: LD_INT 0
 373: PPUSH
// begin enable ;
 374: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 375: LD_ADDR_VAR 0 1
 379: PUSH
 380: LD_INT 22
 382: PUSH
 383: LD_INT 2
 385: PUSH
 386: EMPTY
 387: LIST
 388: LIST
 389: PUSH
 390: LD_INT 3
 392: PUSH
 393: LD_INT 21
 395: PUSH
 396: LD_INT 3
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: PPUSH
 411: CALL_OW 69
 415: PUSH
 416: FOR_IN
 417: IFFALSE 448
// if GetLives ( i ) < 1000 then
 419: LD_VAR 0 1
 423: PPUSH
 424: CALL_OW 256
 428: PUSH
 429: LD_INT 1000
 431: LESS
 432: IFFALSE 446
// SetLives ( i , 1000 ) ;
 434: LD_VAR 0 1
 438: PPUSH
 439: LD_INT 1000
 441: PPUSH
 442: CALL_OW 234
 446: GO 416
 448: POP
 449: POP
// end ; end_of_file
 450: PPOPN 1
 452: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 453: LD_INT 0
 455: PPUSH
// uc_side := side ;
 456: LD_ADDR_OWVAR 20
 460: PUSH
 461: LD_VAR 0 1
 465: ST_TO_ADDR
// uc_nation := nation ;
 466: LD_ADDR_OWVAR 21
 470: PUSH
 471: LD_VAR 0 2
 475: ST_TO_ADDR
// vc_chassis := chassis ;
 476: LD_ADDR_OWVAR 37
 480: PUSH
 481: LD_VAR 0 3
 485: ST_TO_ADDR
// vc_engine := engine ;
 486: LD_ADDR_OWVAR 39
 490: PUSH
 491: LD_VAR 0 4
 495: ST_TO_ADDR
// vc_control := control ;
 496: LD_ADDR_OWVAR 38
 500: PUSH
 501: LD_VAR 0 5
 505: ST_TO_ADDR
// vc_weapon := weapon ;
 506: LD_ADDR_OWVAR 40
 510: PUSH
 511: LD_VAR 0 6
 515: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 516: LD_ADDR_OWVAR 41
 520: PUSH
 521: LD_VAR 0 7
 525: ST_TO_ADDR
// result := CreateVehicle ;
 526: LD_ADDR_VAR 0 8
 530: PUSH
 531: CALL_OW 45
 535: ST_TO_ADDR
// end ;
 536: LD_VAR 0 8
 540: RET
// export function SayX ( units , ident ) ; var i ; begin
 541: LD_INT 0
 543: PPUSH
 544: PPUSH
// result := false ;
 545: LD_ADDR_VAR 0 3
 549: PUSH
 550: LD_INT 0
 552: ST_TO_ADDR
// if not units then
 553: LD_VAR 0 1
 557: NOT
 558: IFFALSE 562
// exit ;
 560: GO 616
// for i in units do
 562: LD_ADDR_VAR 0 4
 566: PUSH
 567: LD_VAR 0 1
 571: PUSH
 572: FOR_IN
 573: IFFALSE 614
// if IsOk ( i ) then
 575: LD_VAR 0 4
 579: PPUSH
 580: CALL_OW 302
 584: IFFALSE 612
// begin Say ( i , ident ) ;
 586: LD_VAR 0 4
 590: PPUSH
 591: LD_VAR 0 2
 595: PPUSH
 596: CALL_OW 88
// result := i ;
 600: LD_ADDR_VAR 0 3
 604: PUSH
 605: LD_VAR 0 4
 609: ST_TO_ADDR
// break ;
 610: GO 614
// end ;
 612: GO 572
 614: POP
 615: POP
// end ;
 616: LD_VAR 0 3
 620: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 621: LD_INT 0
 623: PPUSH
 624: PPUSH
// InitUc ;
 625: CALL_OW 18
// InitHc ;
 629: CALL_OW 19
// uc_side := 0 ;
 633: LD_ADDR_OWVAR 20
 637: PUSH
 638: LD_INT 0
 640: ST_TO_ADDR
// uc_nation := 0 ;
 641: LD_ADDR_OWVAR 21
 645: PUSH
 646: LD_INT 0
 648: ST_TO_ADDR
// for i = 1 to amount do
 649: LD_ADDR_VAR 0 4
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_VAR 0 2
 663: PUSH
 664: FOR_TO
 665: IFFALSE 747
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 667: LD_ADDR_OWVAR 29
 671: PUSH
 672: LD_INT 9
 674: PPUSH
 675: LD_INT 12
 677: PPUSH
 678: CALL_OW 12
 682: PUSH
 683: LD_INT 9
 685: PPUSH
 686: LD_INT 12
 688: PPUSH
 689: CALL_OW 12
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 698: LD_ADDR_OWVAR 35
 702: PUSH
 703: LD_INT 1
 705: NEG
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: CALL_OW 12
 714: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 715: LD_INT 0
 717: PPUSH
 718: LD_INT 12
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 728: CALL_OW 44
 732: PPUSH
 733: LD_VAR 0 1
 737: PPUSH
 738: LD_INT 0
 740: PPUSH
 741: CALL_OW 49
// end ;
 745: GO 664
 747: POP
 748: POP
// InitHc ;
 749: CALL_OW 19
// end ;
 753: LD_VAR 0 3
 757: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 758: LD_INT 0
 760: PPUSH
 761: PPUSH
// uc_side := 0 ;
 762: LD_ADDR_OWVAR 20
 766: PUSH
 767: LD_INT 0
 769: ST_TO_ADDR
// uc_nation := 0 ;
 770: LD_ADDR_OWVAR 21
 774: PUSH
 775: LD_INT 0
 777: ST_TO_ADDR
// for i := 1 to 3 do
 778: LD_ADDR_VAR 0 4
 782: PUSH
 783: DOUBLE
 784: LD_INT 1
 786: DEC
 787: ST_TO_ADDR
 788: LD_INT 3
 790: PUSH
 791: FOR_TO
 792: IFFALSE 829
// begin hc_class := 21 ;
 794: LD_ADDR_OWVAR 28
 798: PUSH
 799: LD_INT 21
 801: ST_TO_ADDR
// hc_gallery :=  ;
 802: LD_ADDR_OWVAR 33
 806: PUSH
 807: LD_STRING 
 809: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 810: CALL_OW 44
 814: PPUSH
 815: LD_VAR 0 1
 819: PPUSH
 820: LD_INT 0
 822: PPUSH
 823: CALL_OW 49
// end ;
 827: GO 791
 829: POP
 830: POP
// for i := 1 to 3 do
 831: LD_ADDR_VAR 0 4
 835: PUSH
 836: DOUBLE
 837: LD_INT 1
 839: DEC
 840: ST_TO_ADDR
 841: LD_INT 3
 843: PUSH
 844: FOR_TO
 845: IFFALSE 882
// begin hc_class := 18 ;
 847: LD_ADDR_OWVAR 28
 851: PUSH
 852: LD_INT 18
 854: ST_TO_ADDR
// hc_gallery :=  ;
 855: LD_ADDR_OWVAR 33
 859: PUSH
 860: LD_STRING 
 862: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 863: CALL_OW 44
 867: PPUSH
 868: LD_VAR 0 1
 872: PPUSH
 873: LD_INT 0
 875: PPUSH
 876: CALL_OW 49
// end ;
 880: GO 844
 882: POP
 883: POP
// for i := 1 to 3 do
 884: LD_ADDR_VAR 0 4
 888: PUSH
 889: DOUBLE
 890: LD_INT 1
 892: DEC
 893: ST_TO_ADDR
 894: LD_INT 3
 896: PUSH
 897: FOR_TO
 898: IFFALSE 935
// begin hc_class := 13 ;
 900: LD_ADDR_OWVAR 28
 904: PUSH
 905: LD_INT 13
 907: ST_TO_ADDR
// hc_gallery :=  ;
 908: LD_ADDR_OWVAR 33
 912: PUSH
 913: LD_STRING 
 915: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 916: CALL_OW 44
 920: PPUSH
 921: LD_VAR 0 1
 925: PPUSH
 926: LD_INT 0
 928: PPUSH
 929: CALL_OW 49
// end ;
 933: GO 897
 935: POP
 936: POP
// for i := 1 to 4 do
 937: LD_ADDR_VAR 0 4
 941: PUSH
 942: DOUBLE
 943: LD_INT 1
 945: DEC
 946: ST_TO_ADDR
 947: LD_INT 4
 949: PUSH
 950: FOR_TO
 951: IFFALSE 988
// begin hc_class := class_frog ;
 953: LD_ADDR_OWVAR 28
 957: PUSH
 958: LD_INT 19
 960: ST_TO_ADDR
// hc_gallery :=  ;
 961: LD_ADDR_OWVAR 33
 965: PUSH
 966: LD_STRING 
 968: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 969: CALL_OW 44
 973: PPUSH
 974: LD_VAR 0 2
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL_OW 49
// end ;
 986: GO 950
 988: POP
 989: POP
// end ;
 990: LD_VAR 0 3
 994: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 995: LD_INT 0
 997: PPUSH
 998: PPUSH
 999: PPUSH
// if not observer or not unit then
1000: LD_VAR 0 1
1004: NOT
1005: IFTRUE 1014
1007: PUSH
1008: LD_VAR 0 2
1012: NOT
1013: OR
1014: IFFALSE 1018
// exit ;
1016: GO 1066
// if not See ( GetSide ( observer ) , unit ) then
1018: LD_VAR 0 1
1022: PPUSH
1023: CALL_OW 255
1027: PPUSH
1028: LD_VAR 0 2
1032: PPUSH
1033: CALL_OW 292
1037: NOT
1038: IFFALSE 1042
// exit ;
1040: GO 1066
// result := GetDistUnits ( observer , unit ) < 12 ;
1042: LD_ADDR_VAR 0 3
1046: PUSH
1047: LD_VAR 0 1
1051: PPUSH
1052: LD_VAR 0 2
1056: PPUSH
1057: CALL_OW 296
1061: PUSH
1062: LD_INT 12
1064: LESS
1065: ST_TO_ADDR
// end ;
1066: LD_VAR 0 3
1070: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1071: LD_INT 0
1073: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1074: LD_VAR 0 2
1078: PUSH
1079: LD_INT 1
1081: ARRAY
1082: PPUSH
1083: LD_VAR 0 2
1087: PUSH
1088: LD_INT 2
1090: ARRAY
1091: PPUSH
1092: CALL_OW 488
1096: IFFALSE 1126
1098: PUSH
1099: LD_VAR 0 2
1103: PUSH
1104: LD_INT 1
1106: ARRAY
1107: PPUSH
1108: LD_VAR 0 2
1112: PUSH
1113: LD_INT 2
1115: ARRAY
1116: PPUSH
1117: CALL_OW 428
1121: PUSH
1122: LD_INT 0
1124: EQUAL
1125: AND
1126: IFFALSE 1160
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1128: LD_VAR 0 1
1132: PPUSH
1133: LD_VAR 0 2
1137: PUSH
1138: LD_INT 1
1140: ARRAY
1141: PPUSH
1142: LD_VAR 0 2
1146: PUSH
1147: LD_INT 2
1149: ARRAY
1150: PPUSH
1151: LD_VAR 0 3
1155: PPUSH
1156: CALL_OW 48
// end ;
1160: LD_VAR 0 4
1164: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1165: LD_INT 0
1167: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1168: LD_VAR 0 1
1172: PPUSH
1173: LD_VAR 0 2
1177: PPUSH
1178: LD_VAR 0 3
1182: PPUSH
1183: LD_VAR 0 4
1187: PPUSH
1188: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1192: LD_VAR 0 1
1196: PPUSH
1197: LD_VAR 0 2
1201: PPUSH
1202: LD_VAR 0 3
1206: PPUSH
1207: CALL_OW 331
// end ;
1211: LD_VAR 0 5
1215: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1216: LD_INT 0
1218: PPUSH
// if not units then
1219: LD_VAR 0 1
1223: NOT
1224: IFFALSE 1228
// exit ;
1226: GO 1311
// result := true ;
1228: LD_ADDR_VAR 0 4
1232: PUSH
1233: LD_INT 1
1235: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1236: LD_VAR 0 1
1240: PPUSH
1241: LD_INT 26
1243: PUSH
1244: LD_INT 1
1246: PUSH
1247: EMPTY
1248: LIST
1249: LIST
1250: PPUSH
1251: CALL_OW 72
1255: PUSH
1256: LD_INT 1
1258: ARRAY
1259: PPUSH
1260: LD_VAR 0 2
1264: PPUSH
1265: CALL_OW 88
1269: NOT
1270: IFFALSE 1311
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1272: LD_ADDR_VAR 0 4
1276: PUSH
1277: LD_VAR 0 1
1281: PPUSH
1282: LD_INT 26
1284: PUSH
1285: LD_INT 2
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: PPUSH
1292: CALL_OW 72
1296: PUSH
1297: LD_INT 1
1299: ARRAY
1300: PPUSH
1301: LD_VAR 0 3
1305: PPUSH
1306: CALL_OW 88
1310: ST_TO_ADDR
// end ;
1311: LD_VAR 0 4
1315: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1316: LD_INT 0
1318: PPUSH
1319: PPUSH
// if not group then
1320: LD_VAR 0 2
1324: NOT
1325: IFFALSE 1329
// exit ;
1327: GO 1374
// for i in group do
1329: LD_ADDR_VAR 0 4
1333: PUSH
1334: LD_VAR 0 2
1338: PUSH
1339: FOR_IN
1340: IFFALSE 1372
// if See ( side , i ) then
1342: LD_VAR 0 1
1346: PPUSH
1347: LD_VAR 0 4
1351: PPUSH
1352: CALL_OW 292
1356: IFFALSE 1370
// begin result := true ;
1358: LD_ADDR_VAR 0 3
1362: PUSH
1363: LD_INT 1
1365: ST_TO_ADDR
// exit ;
1366: POP
1367: POP
1368: GO 1374
// end ;
1370: GO 1339
1372: POP
1373: POP
// end ; end_of_file
1374: LD_VAR 0 3
1378: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1379: LD_INT 0
1381: PPUSH
1382: PPUSH
// uc_side := 2 ;
1383: LD_ADDR_OWVAR 20
1387: PUSH
1388: LD_INT 2
1390: ST_TO_ADDR
// uc_nation := 2 ;
1391: LD_ADDR_OWVAR 21
1395: PUSH
1396: LD_INT 2
1398: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1399: LD_ADDR_EXP 21
1403: PUSH
1404: LD_STRING Heike
1406: PPUSH
1407: LD_EXP 1
1411: NOT
1412: PPUSH
1413: LD_EXP 2
1417: PPUSH
1418: CALL 37407 0 3
1422: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1423: LD_ADDR_EXP 24
1427: PUSH
1428: LD_STRING Ibrahim
1430: PPUSH
1431: LD_EXP 1
1435: NOT
1436: PPUSH
1437: LD_EXP 2
1441: PPUSH
1442: CALL 37407 0 3
1446: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1447: LD_ADDR_EXP 22
1451: PUSH
1452: LD_STRING Givi
1454: PPUSH
1455: LD_EXP 1
1459: NOT
1460: PPUSH
1461: LD_EXP 2
1465: PPUSH
1466: CALL 37407 0 3
1470: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1471: LD_ADDR_EXP 25
1475: PUSH
1476: LD_STRING Kamil
1478: PPUSH
1479: LD_EXP 1
1483: NOT
1484: PPUSH
1485: LD_EXP 2
1489: PPUSH
1490: CALL 37407 0 3
1494: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1495: LD_ADDR_EXP 26
1499: PUSH
1500: LD_STRING Kaia
1502: PPUSH
1503: LD_EXP 1
1507: NOT
1508: PPUSH
1509: LD_EXP 2
1513: PPUSH
1514: CALL 37407 0 3
1518: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1519: LD_ADDR_EXP 27
1523: PUSH
1524: LD_STRING Sophia
1526: PPUSH
1527: LD_EXP 1
1531: NOT
1532: PPUSH
1533: LD_EXP 2
1537: PPUSH
1538: CALL 37407 0 3
1542: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1543: LD_ADDR_EXP 28
1547: PUSH
1548: LD_STRING Markov
1550: PPUSH
1551: LD_EXP 1
1555: NOT
1556: PPUSH
1557: LD_EXP 2
1561: PPUSH
1562: CALL 37407 0 3
1566: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1567: LD_ADDR_EXP 33
1571: PUSH
1572: LD_STRING Aviradze
1574: PPUSH
1575: LD_EXP 1
1579: NOT
1580: PPUSH
1581: LD_EXP 2
1585: PPUSH
1586: CALL 37407 0 3
1590: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1591: LD_ADDR_EXP 32
1595: PUSH
1596: LD_STRING Kurt
1598: PPUSH
1599: LD_EXP 1
1603: NOT
1604: PPUSH
1605: LD_EXP 2
1609: PPUSH
1610: CALL 37407 0 3
1614: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1615: LD_ADDR_EXP 23
1619: PUSH
1620: LD_STRING Mike
1622: PPUSH
1623: LD_EXP 1
1627: NOT
1628: PPUSH
1629: LD_EXP 2
1633: PPUSH
1634: CALL 37407 0 3
1638: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1639: LD_ADDR_EXP 30
1643: PUSH
1644: LD_STRING Olaf
1646: PPUSH
1647: LD_INT 0
1649: PPUSH
1650: LD_STRING 
1652: PPUSH
1653: CALL 37407 0 3
1657: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1658: LD_ADDR_EXP 34
1662: PUSH
1663: LD_STRING 04_2_others
1665: PPUSH
1666: CALL_OW 31
1670: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1671: LD_ADDR_EXP 36
1675: PUSH
1676: LD_STRING 04_2_apes
1678: PPUSH
1679: CALL_OW 31
1683: ST_TO_ADDR
// if hasFlamethrower then
1684: LD_EXP 3
1688: IFFALSE 1923
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1690: LD_INT 70
1692: PPUSH
1693: LD_INT 2
1695: PPUSH
1696: LD_INT 2
1698: PPUSH
1699: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1703: LD_ADDR_EXP 35
1707: PUSH
1708: LD_INT 13
1710: PUSH
1711: LD_INT 1
1713: PUSH
1714: LD_INT 1
1716: PUSH
1717: LD_INT 27
1719: PUSH
1720: LD_INT 2
1722: PUSH
1723: LD_INT 1000
1725: PUSH
1726: LD_INT 0
1728: PUSH
1729: LD_INT 0
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_INT 13
1747: PUSH
1748: LD_INT 1
1750: PUSH
1751: LD_INT 1
1753: PUSH
1754: LD_INT 25
1756: PUSH
1757: LD_INT 2
1759: PUSH
1760: LD_INT 1000
1762: PUSH
1763: LD_INT 0
1765: PUSH
1766: LD_INT 0
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: LIST
1781: PUSH
1782: LD_INT 13
1784: PUSH
1785: LD_INT 1
1787: PUSH
1788: LD_INT 1
1790: PUSH
1791: LD_INT 26
1793: PUSH
1794: LD_INT 2
1796: PUSH
1797: LD_INT 1000
1799: PUSH
1800: LD_INT 0
1802: PUSH
1803: LD_INT 0
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_INT 13
1821: PUSH
1822: LD_INT 1
1824: PUSH
1825: LD_INT 1
1827: PUSH
1828: LD_INT 27
1830: PUSH
1831: LD_INT 2
1833: PUSH
1834: LD_INT 1000
1836: PUSH
1837: LD_INT 0
1839: PUSH
1840: LD_INT 0
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 13
1858: PUSH
1859: LD_INT 1
1861: PUSH
1862: LD_INT 1
1864: PUSH
1865: LD_INT 32
1867: PUSH
1868: LD_INT 2
1870: PUSH
1871: LD_INT 1000
1873: PUSH
1874: LD_INT 0
1876: PUSH
1877: LD_INT 60
1879: PUSH
1880: LD_INT 40
1882: PUSH
1883: LD_INT 20
1885: PUSH
1886: LD_INT 10
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: PUSH
1895: LD_OWVAR 67
1899: ARRAY
1900: PUSH
1901: EMPTY
1902: LIST
1903: LIST
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: ST_TO_ADDR
// end else
1921: GO 2141
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1923: LD_ADDR_EXP 35
1927: PUSH
1928: LD_INT 13
1930: PUSH
1931: LD_INT 1
1933: PUSH
1934: LD_INT 1
1936: PUSH
1937: LD_INT 25
1939: PUSH
1940: LD_INT 2
1942: PUSH
1943: LD_INT 1000
1945: PUSH
1946: LD_INT 0
1948: PUSH
1949: LD_INT 0
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: PUSH
1965: LD_INT 13
1967: PUSH
1968: LD_INT 1
1970: PUSH
1971: LD_INT 1
1973: PUSH
1974: LD_INT 27
1976: PUSH
1977: LD_INT 2
1979: PUSH
1980: LD_INT 1000
1982: PUSH
1983: LD_INT 0
1985: PUSH
1986: LD_INT 0
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: PUSH
2002: LD_INT 13
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: LD_INT 1
2010: PUSH
2011: LD_INT 24
2013: PUSH
2014: LD_INT 2
2016: PUSH
2017: LD_INT 1000
2019: PUSH
2020: LD_INT 0
2022: PUSH
2023: LD_INT 0
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: LIST
2038: PUSH
2039: LD_INT 13
2041: PUSH
2042: LD_INT 1
2044: PUSH
2045: LD_INT 1
2047: PUSH
2048: LD_INT 27
2050: PUSH
2051: LD_INT 2
2053: PUSH
2054: LD_INT 1000
2056: PUSH
2057: LD_INT 0
2059: PUSH
2060: LD_INT 0
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: PUSH
2067: EMPTY
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: LIST
2075: PUSH
2076: LD_INT 13
2078: PUSH
2079: LD_INT 1
2081: PUSH
2082: LD_INT 1
2084: PUSH
2085: LD_INT 32
2087: PUSH
2088: LD_INT 2
2090: PUSH
2091: LD_INT 1000
2093: PUSH
2094: LD_INT 0
2096: PUSH
2097: LD_INT 50
2099: PUSH
2100: LD_INT 30
2102: PUSH
2103: LD_INT 20
2105: PUSH
2106: LD_INT 10
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: PUSH
2115: LD_OWVAR 67
2119: ARRAY
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: LIST
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: ST_TO_ADDR
// end ; uc_side := 5 ;
2141: LD_ADDR_OWVAR 20
2145: PUSH
2146: LD_INT 5
2148: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2149: LD_ADDR_EXP 29
2153: PUSH
2154: LD_STRING Abdul
2156: PPUSH
2157: LD_INT 0
2159: PPUSH
2160: LD_STRING 
2162: PPUSH
2163: CALL 37407 0 3
2167: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2168: LD_ADDR_EXP 31
2172: PUSH
2173: LD_STRING Omar
2175: PPUSH
2176: LD_INT 0
2178: PPUSH
2179: LD_STRING 
2181: PPUSH
2182: CALL 37407 0 3
2186: ST_TO_ADDR
// end ;
2187: LD_VAR 0 1
2191: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2192: LD_INT 0
2194: PPUSH
2195: PPUSH
2196: PPUSH
2197: PPUSH
2198: PPUSH
// pfx := 04_1_ ;
2199: LD_ADDR_VAR 0 2
2203: PUSH
2204: LD_STRING 04_1_
2206: ST_TO_ADDR
// if HexInfo ( 10 , 16 ) then
2207: LD_INT 10
2209: PPUSH
2210: LD_INT 16
2212: PPUSH
2213: CALL_OW 428
2217: IFFALSE 2242
// ComMoveXY ( HexInfo ( 10 , 16 ) , 18 , 18 ) else
2219: LD_INT 10
2221: PPUSH
2222: LD_INT 16
2224: PPUSH
2225: CALL_OW 428
2229: PPUSH
2230: LD_INT 18
2232: PPUSH
2233: LD_INT 18
2235: PPUSH
2236: CALL_OW 111
2240: GO 2252
// EraseResourceArea ( mat_cans , westSpawnPointArea ) ;
2242: LD_INT 1
2244: PPUSH
2245: LD_INT 14
2247: PPUSH
2248: CALL_OW 286
// repeat wait ( 0 0$1 ) ;
2252: LD_INT 35
2254: PPUSH
2255: CALL_OW 67
// until not HexInfo ( 10 , 16 ) ;
2259: LD_INT 10
2261: PPUSH
2262: LD_INT 16
2264: PPUSH
2265: CALL_OW 428
2269: NOT
2270: IFFALSE 2252
// tmp := [ ] ;
2272: LD_ADDR_VAR 0 4
2276: PUSH
2277: EMPTY
2278: ST_TO_ADDR
// uc_side := 5 ;
2279: LD_ADDR_OWVAR 20
2283: PUSH
2284: LD_INT 5
2286: ST_TO_ADDR
// uc_nation := 2 ;
2287: LD_ADDR_OWVAR 21
2291: PUSH
2292: LD_INT 2
2294: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2295: LD_ADDR_EXP 33
2299: PUSH
2300: LD_STRING Aviradze_L
2302: PPUSH
2303: LD_EXP 1
2307: NOT
2308: PPUSH
2309: LD_VAR 0 2
2313: PPUSH
2314: CALL 37407 0 3
2318: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2319: LD_EXP 33
2323: PPUSH
2324: LD_INT 2
2326: PPUSH
2327: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2331: LD_EXP 33
2335: PPUSH
2336: LD_INT 14
2338: PPUSH
2339: LD_INT 0
2341: PPUSH
2342: CALL_OW 49
// ComMoveXY ( Aviradze , 25 , 19 ) ;
2346: LD_EXP 33
2350: PPUSH
2351: LD_INT 25
2353: PPUSH
2354: LD_INT 19
2356: PPUSH
2357: CALL_OW 111
// AddComHold ( Aviradze ) ;
2361: LD_EXP 33
2365: PPUSH
2366: CALL_OW 200
// tmp := [ Aviradze ] ;
2370: LD_ADDR_VAR 0 4
2374: PUSH
2375: LD_EXP 33
2379: PUSH
2380: EMPTY
2381: LIST
2382: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2383: LD_INT 70
2385: PPUSH
2386: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2390: LD_STRING Ibrahim_L
2392: PPUSH
2393: LD_EXP 1
2397: NOT
2398: PPUSH
2399: LD_VAR 0 2
2403: PPUSH
2404: CALL 37407 0 3
2408: IFFALSE 2508
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2410: LD_ADDR_EXP 24
2414: PUSH
2415: LD_STRING Ibrahim_L
2417: PPUSH
2418: LD_EXP 1
2422: NOT
2423: PPUSH
2424: LD_VAR 0 2
2428: PPUSH
2429: CALL 37407 0 3
2433: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2434: LD_EXP 24
2438: PPUSH
2439: LD_INT 2
2441: PPUSH
2442: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2446: LD_EXP 24
2450: PPUSH
2451: LD_INT 14
2453: PPUSH
2454: LD_INT 0
2456: PPUSH
2457: CALL_OW 49
// ComMoveXY ( Ibrahim , 25 , 19 ) ;
2461: LD_EXP 24
2465: PPUSH
2466: LD_INT 25
2468: PPUSH
2469: LD_INT 19
2471: PPUSH
2472: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2476: LD_EXP 24
2480: PPUSH
2481: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2485: LD_ADDR_VAR 0 4
2489: PUSH
2490: LD_VAR 0 4
2494: PUSH
2495: LD_EXP 24
2499: ADD
2500: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2501: LD_INT 70
2503: PPUSH
2504: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2508: LD_STRING Kaia_L
2510: PPUSH
2511: LD_EXP 1
2515: NOT
2516: PPUSH
2517: LD_VAR 0 2
2521: PPUSH
2522: CALL 37407 0 3
2526: IFFALSE 2626
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2528: LD_ADDR_EXP 26
2532: PUSH
2533: LD_STRING Kaia_L
2535: PPUSH
2536: LD_EXP 1
2540: NOT
2541: PPUSH
2542: LD_VAR 0 2
2546: PPUSH
2547: CALL 37407 0 3
2551: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2552: LD_EXP 26
2556: PPUSH
2557: LD_INT 2
2559: PPUSH
2560: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2564: LD_EXP 26
2568: PPUSH
2569: LD_INT 14
2571: PPUSH
2572: LD_INT 0
2574: PPUSH
2575: CALL_OW 49
// ComMoveXY ( Kaia , 25 , 19 ) ;
2579: LD_EXP 26
2583: PPUSH
2584: LD_INT 25
2586: PPUSH
2587: LD_INT 19
2589: PPUSH
2590: CALL_OW 111
// AddComHold ( Kaia ) ;
2594: LD_EXP 26
2598: PPUSH
2599: CALL_OW 200
// tmp := tmp ^ Kaia ;
2603: LD_ADDR_VAR 0 4
2607: PUSH
2608: LD_VAR 0 4
2612: PUSH
2613: LD_EXP 26
2617: ADD
2618: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2619: LD_INT 70
2621: PPUSH
2622: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2626: LD_STRING Kamil_L
2628: PPUSH
2629: LD_EXP 1
2633: NOT
2634: PPUSH
2635: LD_VAR 0 2
2639: PPUSH
2640: CALL 37407 0 3
2644: IFFALSE 2744
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2646: LD_ADDR_EXP 25
2650: PUSH
2651: LD_STRING Kamil_L
2653: PPUSH
2654: LD_EXP 1
2658: NOT
2659: PPUSH
2660: LD_VAR 0 2
2664: PPUSH
2665: CALL 37407 0 3
2669: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2670: LD_EXP 25
2674: PPUSH
2675: LD_INT 2
2677: PPUSH
2678: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2682: LD_EXP 25
2686: PPUSH
2687: LD_INT 14
2689: PPUSH
2690: LD_INT 0
2692: PPUSH
2693: CALL_OW 49
// ComMoveXY ( Kamil , 25 , 19 ) ;
2697: LD_EXP 25
2701: PPUSH
2702: LD_INT 25
2704: PPUSH
2705: LD_INT 19
2707: PPUSH
2708: CALL_OW 111
// AddComHold ( Kamil ) ;
2712: LD_EXP 25
2716: PPUSH
2717: CALL_OW 200
// tmp := tmp ^ Kamil ;
2721: LD_ADDR_VAR 0 4
2725: PUSH
2726: LD_VAR 0 4
2730: PUSH
2731: LD_EXP 25
2735: ADD
2736: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2737: LD_INT 70
2739: PPUSH
2740: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2744: LD_STRING Sophia_L
2746: PPUSH
2747: LD_EXP 1
2751: NOT
2752: PPUSH
2753: LD_VAR 0 2
2757: PPUSH
2758: CALL 37407 0 3
2762: IFFALSE 2862
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2764: LD_ADDR_EXP 27
2768: PUSH
2769: LD_STRING Sophia_L
2771: PPUSH
2772: LD_EXP 1
2776: NOT
2777: PPUSH
2778: LD_VAR 0 2
2782: PPUSH
2783: CALL 37407 0 3
2787: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2788: LD_EXP 27
2792: PPUSH
2793: LD_INT 2
2795: PPUSH
2796: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2800: LD_EXP 27
2804: PPUSH
2805: LD_INT 14
2807: PPUSH
2808: LD_INT 0
2810: PPUSH
2811: CALL_OW 49
// ComMoveXY ( Sophia , 25 , 19 ) ;
2815: LD_EXP 27
2819: PPUSH
2820: LD_INT 25
2822: PPUSH
2823: LD_INT 19
2825: PPUSH
2826: CALL_OW 111
// AddComHold ( Sophia ) ;
2830: LD_EXP 27
2834: PPUSH
2835: CALL_OW 200
// tmp := tmp ^ Sophia ;
2839: LD_ADDR_VAR 0 4
2843: PUSH
2844: LD_VAR 0 4
2848: PUSH
2849: LD_EXP 27
2853: ADD
2854: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2855: LD_INT 70
2857: PPUSH
2858: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2862: LD_ADDR_VAR 0 5
2866: PUSH
2867: LD_STRING 04_1_others_L
2869: PPUSH
2870: CALL_OW 31
2874: ST_TO_ADDR
// if tmp2 then
2875: LD_VAR 0 5
2879: IFFALSE 2976
// for i in tmp2 do
2881: LD_ADDR_VAR 0 3
2885: PUSH
2886: LD_VAR 0 5
2890: PUSH
2891: FOR_IN
2892: IFFALSE 2974
// begin SetDir ( i , 2 ) ;
2894: LD_VAR 0 3
2898: PPUSH
2899: LD_INT 2
2901: PPUSH
2902: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2906: LD_VAR 0 3
2910: PPUSH
2911: LD_INT 14
2913: PPUSH
2914: LD_INT 0
2916: PPUSH
2917: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2921: LD_ADDR_EXP 34
2925: PUSH
2926: LD_EXP 34
2930: PPUSH
2931: LD_EXP 34
2935: PUSH
2936: LD_INT 1
2938: PLUS
2939: PPUSH
2940: LD_VAR 0 3
2944: PPUSH
2945: CALL_OW 1
2949: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2950: LD_VAR 0 3
2954: PPUSH
2955: LD_INT 17
2957: PPUSH
2958: LD_INT 14
2960: PPUSH
2961: CALL_OW 111
// wait ( 0 0$2 ) ;
2965: LD_INT 70
2967: PPUSH
2968: CALL_OW 67
// end ;
2972: GO 2891
2974: POP
2975: POP
// for i in tmp union tmp2 do
2976: LD_ADDR_VAR 0 3
2980: PUSH
2981: LD_VAR 0 4
2985: PUSH
2986: LD_VAR 0 5
2990: UNION
2991: PUSH
2992: FOR_IN
2993: IFFALSE 3023
// begin SetSide ( i , 2 ) ;
2995: LD_VAR 0 3
2999: PPUSH
3000: LD_INT 2
3002: PPUSH
3003: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
3007: LD_VAR 0 3
3011: PPUSH
3012: LD_EXP 21
3016: PPUSH
3017: CALL_OW 112
// end ;
3021: GO 2992
3023: POP
3024: POP
// end ; end_of_file
3025: LD_VAR 0 1
3029: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
3030: LD_INT 0
3032: PPUSH
3033: PPUSH
3034: PPUSH
// uc_side := 3 ;
3035: LD_ADDR_OWVAR 20
3039: PUSH
3040: LD_INT 3
3042: ST_TO_ADDR
// uc_nation := 3 ;
3043: LD_ADDR_OWVAR 21
3047: PUSH
3048: LD_INT 3
3050: ST_TO_ADDR
// crossRoadGuard := [ ] ;
3051: LD_ADDR_EXP 37
3055: PUSH
3056: EMPTY
3057: ST_TO_ADDR
// oilBaseGuard := [ ] ;
3058: LD_ADDR_EXP 38
3062: PUSH
3063: EMPTY
3064: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3065: LD_ADDR_EXP 41
3069: PUSH
3070: EMPTY
3071: ST_TO_ADDR
// for i := 1 to 2 do
3072: LD_ADDR_VAR 0 2
3076: PUSH
3077: DOUBLE
3078: LD_INT 1
3080: DEC
3081: ST_TO_ADDR
3082: LD_INT 2
3084: PUSH
3085: FOR_TO
3086: IFFALSE 3225
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3088: LD_INT 0
3090: PPUSH
3091: LD_INT 1
3093: PPUSH
3094: LD_INT 3
3096: PUSH
3097: LD_INT 4
3099: PUSH
3100: LD_INT 5
3102: PUSH
3103: LD_INT 6
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: LIST
3110: LIST
3111: PUSH
3112: LD_OWVAR 67
3116: ARRAY
3117: PPUSH
3118: CALL_OW 380
// un := CreateHuman ;
3122: LD_ADDR_VAR 0 3
3126: PUSH
3127: CALL_OW 44
3131: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3132: LD_ADDR_EXP 37
3136: PUSH
3137: LD_EXP 37
3141: PPUSH
3142: LD_EXP 37
3146: PUSH
3147: LD_INT 1
3149: PLUS
3150: PPUSH
3151: LD_VAR 0 3
3155: PPUSH
3156: CALL_OW 1
3160: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3161: LD_VAR 0 3
3165: PPUSH
3166: LD_INT 100
3168: PPUSH
3169: LD_INT 63
3171: PPUSH
3172: LD_INT 3
3174: PPUSH
3175: LD_INT 0
3177: PPUSH
3178: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3182: LD_VAR 0 3
3186: PPUSH
3187: LD_INT 97
3189: PPUSH
3190: LD_INT 64
3192: PPUSH
3193: CALL_OW 428
3197: PUSH
3198: LD_INT 98
3200: PPUSH
3201: LD_INT 58
3203: PPUSH
3204: CALL_OW 428
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: PUSH
3213: LD_VAR 0 2
3217: ARRAY
3218: PPUSH
3219: CALL_OW 120
// end ;
3223: GO 3085
3225: POP
3226: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3227: LD_INT 51
3229: PPUSH
3230: LD_INT 77
3232: PPUSH
3233: CALL_OW 428
3237: PPUSH
3238: CALL_OW 274
3242: PPUSH
3243: LD_INT 1
3245: PPUSH
3246: LD_INT 120
3248: PPUSH
3249: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3253: LD_INT 10
3255: PPUSH
3256: CALL_OW 274
3260: PPUSH
3261: LD_INT 2
3263: PPUSH
3264: LD_INT 300
3266: PPUSH
3267: CALL_OW 277
// for i := 1 to 2 do
3271: LD_ADDR_VAR 0 2
3275: PUSH
3276: DOUBLE
3277: LD_INT 1
3279: DEC
3280: ST_TO_ADDR
3281: LD_INT 2
3283: PUSH
3284: FOR_TO
3285: IFFALSE 3403
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3287: LD_INT 0
3289: PPUSH
3290: LD_INT 1
3292: PPUSH
3293: LD_INT 3
3295: PUSH
3296: LD_INT 4
3298: PUSH
3299: LD_INT 5
3301: PUSH
3302: LD_INT 6
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: PUSH
3311: LD_OWVAR 67
3315: ARRAY
3316: PPUSH
3317: CALL_OW 380
// un := CreateHuman ;
3321: LD_ADDR_VAR 0 3
3325: PUSH
3326: CALL_OW 44
3330: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3331: LD_ADDR_EXP 38
3335: PUSH
3336: LD_EXP 38
3340: PPUSH
3341: LD_EXP 38
3345: PUSH
3346: LD_INT 1
3348: PLUS
3349: PPUSH
3350: LD_VAR 0 3
3354: PPUSH
3355: CALL_OW 1
3359: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3360: LD_VAR 0 3
3364: PPUSH
3365: LD_INT 198
3367: PPUSH
3368: LD_INT 106
3370: PPUSH
3371: CALL_OW 428
3375: PUSH
3376: LD_INT 205
3378: PPUSH
3379: LD_INT 114
3381: PPUSH
3382: CALL_OW 428
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PUSH
3391: LD_VAR 0 2
3395: ARRAY
3396: PPUSH
3397: CALL_OW 52
// end ;
3401: GO 3284
3403: POP
3404: POP
// for i := 1 to 2 do
3405: LD_ADDR_VAR 0 2
3409: PUSH
3410: DOUBLE
3411: LD_INT 1
3413: DEC
3414: ST_TO_ADDR
3415: LD_INT 2
3417: PUSH
3418: FOR_TO
3419: IFFALSE 3496
// begin PrepareHuman ( false , 2 , 3 ) ;
3421: LD_INT 0
3423: PPUSH
3424: LD_INT 2
3426: PPUSH
3427: LD_INT 3
3429: PPUSH
3430: CALL_OW 380
// un := CreateHuman ;
3434: LD_ADDR_VAR 0 3
3438: PUSH
3439: CALL_OW 44
3443: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3444: LD_ADDR_EXP 38
3448: PUSH
3449: LD_EXP 38
3453: PPUSH
3454: LD_EXP 38
3458: PUSH
3459: LD_INT 1
3461: PLUS
3462: PPUSH
3463: LD_VAR 0 3
3467: PPUSH
3468: CALL_OW 1
3472: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3473: LD_VAR 0 3
3477: PPUSH
3478: LD_INT 204
3480: PPUSH
3481: LD_INT 108
3483: PPUSH
3484: LD_INT 2
3486: PPUSH
3487: LD_INT 0
3489: PPUSH
3490: CALL_OW 50
// end ;
3494: GO 3418
3496: POP
3497: POP
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
3498: LD_ADDR_VAR 0 2
3502: PUSH
3503: DOUBLE
3504: LD_INT 1
3506: DEC
3507: ST_TO_ADDR
3508: LD_INT 4
3510: PUSH
3511: LD_INT 5
3513: PUSH
3514: LD_INT 6
3516: PUSH
3517: LD_INT 7
3519: PUSH
3520: EMPTY
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: PUSH
3526: LD_OWVAR 67
3530: ARRAY
3531: PUSH
3532: FOR_TO
3533: IFFALSE 3679
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3535: LD_INT 0
3537: PPUSH
3538: LD_INT 1
3540: PUSH
3541: LD_INT 1
3543: PUSH
3544: LD_INT 2
3546: PUSH
3547: LD_INT 4
3549: PUSH
3550: LD_INT 1
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: PUSH
3560: LD_INT 1
3562: PPUSH
3563: LD_INT 5
3565: PPUSH
3566: CALL_OW 12
3570: ARRAY
3571: PPUSH
3572: LD_INT 3
3574: PUSH
3575: LD_INT 4
3577: PUSH
3578: LD_INT 5
3580: PUSH
3581: LD_INT 5
3583: PUSH
3584: EMPTY
3585: LIST
3586: LIST
3587: LIST
3588: LIST
3589: PUSH
3590: LD_OWVAR 67
3594: ARRAY
3595: PPUSH
3596: CALL_OW 380
// un := CreateHuman ;
3600: LD_ADDR_VAR 0 3
3604: PUSH
3605: CALL_OW 44
3609: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroupArea , false ) then
3610: LD_VAR 0 3
3614: PPUSH
3615: LD_INT 10
3617: PPUSH
3618: LD_INT 0
3620: PPUSH
3621: CALL 74456 0 3
3625: IFFALSE 3677
// begin ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3627: LD_ADDR_EXP 39
3631: PUSH
3632: LD_EXP 39
3636: PPUSH
3637: LD_EXP 39
3641: PUSH
3642: LD_INT 1
3644: PLUS
3645: PPUSH
3646: LD_VAR 0 3
3650: PPUSH
3651: CALL_OW 1
3655: ST_TO_ADDR
// if Prob ( 50 ) then
3656: LD_INT 50
3658: PPUSH
3659: CALL_OW 13
3663: IFFALSE 3677
// ForceSleep ( un , true ) ;
3665: LD_VAR 0 3
3669: PPUSH
3670: LD_INT 1
3672: PPUSH
3673: CALL_OW 585
// end ; end ;
3677: GO 3532
3679: POP
3680: POP
// for i := 1 to 3 do
3681: LD_ADDR_VAR 0 2
3685: PUSH
3686: DOUBLE
3687: LD_INT 1
3689: DEC
3690: ST_TO_ADDR
3691: LD_INT 3
3693: PUSH
3694: FOR_TO
3695: IFFALSE 3789
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
3697: LD_INT 0
3699: PPUSH
3700: LD_INT 1
3702: PPUSH
3703: LD_INT 3
3705: PUSH
3706: LD_INT 4
3708: PUSH
3709: LD_INT 4
3711: PUSH
3712: LD_INT 5
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: PUSH
3721: LD_OWVAR 67
3725: ARRAY
3726: PPUSH
3727: CALL_OW 380
// un := CreateHuman ;
3731: LD_ADDR_VAR 0 3
3735: PUSH
3736: CALL_OW 44
3740: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3741: LD_VAR 0 3
3745: PPUSH
3746: LD_INT 11
3748: PPUSH
3749: LD_INT 0
3751: PPUSH
3752: CALL 74456 0 3
3756: IFFALSE 3787
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3758: LD_ADDR_EXP 39
3762: PUSH
3763: LD_EXP 39
3767: PPUSH
3768: LD_EXP 39
3772: PUSH
3773: LD_INT 1
3775: PLUS
3776: PPUSH
3777: LD_VAR 0 3
3781: PPUSH
3782: CALL_OW 1
3786: ST_TO_ADDR
// end ;
3787: GO 3694
3789: POP
3790: POP
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3791: LD_ADDR_VAR 0 2
3795: PUSH
3796: DOUBLE
3797: LD_INT 1
3799: DEC
3800: ST_TO_ADDR
3801: LD_INT 5
3803: PUSH
3804: LD_INT 6
3806: PUSH
3807: LD_INT 7
3809: PUSH
3810: LD_INT 8
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: PUSH
3819: LD_OWVAR 67
3823: ARRAY
3824: PUSH
3825: FOR_TO
3826: IFFALSE 3972
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3828: LD_INT 0
3830: PPUSH
3831: LD_INT 1
3833: PUSH
3834: LD_INT 1
3836: PUSH
3837: LD_INT 2
3839: PUSH
3840: LD_INT 4
3842: PUSH
3843: LD_INT 1
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: PUSH
3853: LD_INT 1
3855: PPUSH
3856: LD_INT 5
3858: PPUSH
3859: CALL_OW 12
3863: ARRAY
3864: PPUSH
3865: LD_INT 3
3867: PUSH
3868: LD_INT 4
3870: PUSH
3871: LD_INT 5
3873: PUSH
3874: LD_INT 5
3876: PUSH
3877: EMPTY
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: PUSH
3883: LD_OWVAR 67
3887: ARRAY
3888: PPUSH
3889: CALL_OW 380
// un := CreateHuman ;
3893: LD_ADDR_VAR 0 3
3897: PUSH
3898: CALL_OW 44
3902: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3903: LD_VAR 0 3
3907: PPUSH
3908: LD_INT 15
3910: PPUSH
3911: LD_INT 0
3913: PPUSH
3914: CALL 74456 0 3
3918: IFFALSE 3970
// begin ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3920: LD_ADDR_EXP 40
3924: PUSH
3925: LD_EXP 40
3929: PPUSH
3930: LD_EXP 40
3934: PUSH
3935: LD_INT 1
3937: PLUS
3938: PPUSH
3939: LD_VAR 0 3
3943: PPUSH
3944: CALL_OW 1
3948: ST_TO_ADDR
// if Prob ( 50 ) then
3949: LD_INT 50
3951: PPUSH
3952: CALL_OW 13
3956: IFFALSE 3970
// ForceSleep ( un , true ) ;
3958: LD_VAR 0 3
3962: PPUSH
3963: LD_INT 1
3965: PPUSH
3966: CALL_OW 585
// end ; end ;
3970: GO 3825
3972: POP
3973: POP
// end ;
3974: LD_VAR 0 1
3978: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3979: LD_INT 0
3981: PPUSH
3982: PPUSH
3983: PPUSH
// uc_side := 3 ;
3984: LD_ADDR_OWVAR 20
3988: PUSH
3989: LD_INT 3
3991: ST_TO_ADDR
// uc_nation := 3 ;
3992: LD_ADDR_OWVAR 21
3996: PUSH
3997: LD_INT 3
3999: ST_TO_ADDR
// for i := 1 to 6 do
4000: LD_ADDR_VAR 0 2
4004: PUSH
4005: DOUBLE
4006: LD_INT 1
4008: DEC
4009: ST_TO_ADDR
4010: LD_INT 6
4012: PUSH
4013: FOR_TO
4014: IFFALSE 4093
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
4016: LD_INT 0
4018: PPUSH
4019: LD_INT 1
4021: PUSH
4022: LD_INT 4
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: PUSH
4029: LD_INT 1
4031: PPUSH
4032: LD_INT 2
4034: PPUSH
4035: CALL_OW 12
4039: ARRAY
4040: PPUSH
4041: LD_INT 0
4043: PPUSH
4044: CALL_OW 380
// un := CreateHuman ;
4048: LD_ADDR_VAR 0 3
4052: PUSH
4053: CALL_OW 44
4057: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
4058: LD_VAR 0 3
4062: PPUSH
4063: LD_INT 54
4065: PPUSH
4066: LD_INT 88
4068: PPUSH
4069: LD_INT 12
4071: PPUSH
4072: LD_INT 0
4074: PPUSH
4075: CALL_OW 50
// SetLives ( un , 1 ) ;
4079: LD_VAR 0 3
4083: PPUSH
4084: LD_INT 1
4086: PPUSH
4087: CALL_OW 234
// end ;
4091: GO 4013
4093: POP
4094: POP
// uc_side := 3 ;
4095: LD_ADDR_OWVAR 20
4099: PUSH
4100: LD_INT 3
4102: ST_TO_ADDR
// uc_nation := 0 ;
4103: LD_ADDR_OWVAR 21
4107: PUSH
4108: LD_INT 0
4110: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4111: LD_ADDR_EXP 42
4115: PUSH
4116: EMPTY
4117: ST_TO_ADDR
// apeEngGroup := [ ] ;
4118: LD_ADDR_EXP 43
4122: PUSH
4123: EMPTY
4124: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
4125: LD_ADDR_VAR 0 2
4129: PUSH
4130: DOUBLE
4131: LD_INT 1
4133: DEC
4134: ST_TO_ADDR
4135: LD_INT 4
4137: PUSH
4138: LD_INT 5
4140: PUSH
4141: LD_INT 6
4143: PUSH
4144: LD_INT 7
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: PUSH
4153: LD_OWVAR 67
4157: ARRAY
4158: PUSH
4159: FOR_TO
4160: IFFALSE 4278
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
4162: LD_INT 0
4164: PPUSH
4165: LD_INT 15
4167: PPUSH
4168: LD_INT 3
4170: PUSH
4171: LD_INT 4
4173: PUSH
4174: LD_INT 5
4176: PUSH
4177: LD_INT 6
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: PUSH
4186: LD_OWVAR 67
4190: ARRAY
4191: PPUSH
4192: CALL_OW 380
// un := CreateHuman ;
4196: LD_ADDR_VAR 0 3
4200: PUSH
4201: CALL_OW 44
4205: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4206: LD_ADDR_EXP 42
4210: PUSH
4211: LD_EXP 42
4215: PPUSH
4216: LD_EXP 42
4220: PUSH
4221: LD_INT 1
4223: PLUS
4224: PPUSH
4225: LD_VAR 0 3
4229: PPUSH
4230: CALL_OW 1
4234: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4235: LD_VAR 0 3
4239: PPUSH
4240: LD_INT 0
4242: PPUSH
4243: LD_INT 5
4245: PPUSH
4246: CALL_OW 12
4250: PPUSH
4251: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4255: LD_VAR 0 3
4259: PPUSH
4260: LD_INT 56
4262: PPUSH
4263: LD_INT 82
4265: PPUSH
4266: LD_INT 6
4268: PPUSH
4269: LD_INT 0
4271: PPUSH
4272: CALL_OW 50
// end ;
4276: GO 4159
4278: POP
4279: POP
// for i := 1 to 2 do
4280: LD_ADDR_VAR 0 2
4284: PUSH
4285: DOUBLE
4286: LD_INT 1
4288: DEC
4289: ST_TO_ADDR
4290: LD_INT 2
4292: PUSH
4293: FOR_TO
4294: IFFALSE 4370
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4296: LD_INT 0
4298: PPUSH
4299: LD_INT 16
4301: PPUSH
4302: LD_INT 4
4304: PPUSH
4305: CALL_OW 380
// un := CreateHuman ;
4309: LD_ADDR_VAR 0 3
4313: PUSH
4314: CALL_OW 44
4318: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4319: LD_ADDR_EXP 43
4323: PUSH
4324: LD_EXP 43
4328: PPUSH
4329: LD_EXP 43
4333: PUSH
4334: LD_INT 1
4336: PLUS
4337: PPUSH
4338: LD_VAR 0 3
4342: PPUSH
4343: CALL_OW 1
4347: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4348: LD_VAR 0 3
4352: PPUSH
4353: LD_INT 51
4355: PPUSH
4356: LD_INT 77
4358: PPUSH
4359: CALL_OW 428
4363: PPUSH
4364: CALL_OW 52
// end ;
4368: GO 4293
4370: POP
4371: POP
// end ;
4372: LD_VAR 0 1
4376: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4377: LD_EXP 42
4381: PPUSH
4382: LD_INT 3
4384: PUSH
4385: LD_INT 24
4387: PUSH
4388: LD_INT 600
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: PUSH
4399: LD_INT 3
4401: PUSH
4402: LD_INT 54
4404: PUSH
4405: EMPTY
4406: LIST
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PPUSH
4416: CALL_OW 72
4420: IFFALSE 4439
4422: PUSH
4423: LD_INT 66
4425: PPUSH
4426: LD_INT 89
4428: PPUSH
4429: CALL_OW 428
4433: PPUSH
4434: CALL_OW 302
4438: AND
4439: IFFALSE 4524
4441: GO 4443
4443: DISABLE
4444: LD_INT 0
4446: PPUSH
// begin enable ;
4447: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4448: LD_ADDR_VAR 0 1
4452: PUSH
4453: LD_EXP 42
4457: PPUSH
4458: LD_INT 3
4460: PUSH
4461: LD_INT 24
4463: PUSH
4464: LD_INT 600
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: LD_INT 3
4477: PUSH
4478: LD_INT 54
4480: PUSH
4481: EMPTY
4482: LIST
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PPUSH
4492: CALL_OW 72
4496: PUSH
4497: FOR_IN
4498: IFFALSE 4522
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4500: LD_VAR 0 1
4504: PPUSH
4505: LD_INT 66
4507: PPUSH
4508: LD_INT 89
4510: PPUSH
4511: CALL_OW 428
4515: PPUSH
4516: CALL_OW 120
4520: GO 4497
4522: POP
4523: POP
// end ;
4524: PPOPN 1
4526: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4527: LD_INT 22
4529: PUSH
4530: LD_INT 2
4532: PUSH
4533: EMPTY
4534: LIST
4535: LIST
4536: PUSH
4537: LD_INT 92
4539: PUSH
4540: LD_INT 54
4542: PUSH
4543: LD_INT 77
4545: PUSH
4546: LD_INT 8
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: PUSH
4555: EMPTY
4556: LIST
4557: LIST
4558: PPUSH
4559: CALL_OW 69
4563: IFFALSE 4627
4565: GO 4567
4567: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4568: LD_EXP 43
4572: PPUSH
4573: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4577: LD_EXP 43
4581: PPUSH
4582: LD_INT 22
4584: PUSH
4585: LD_INT 2
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: PUSH
4592: LD_INT 92
4594: PUSH
4595: LD_INT 54
4597: PUSH
4598: LD_INT 77
4600: PUSH
4601: LD_INT 8
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: LIST
4608: LIST
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: PPUSH
4614: CALL_OW 69
4618: PUSH
4619: LD_INT 1
4621: ARRAY
4622: PPUSH
4623: CALL_OW 175
// end ;
4627: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag , enemy ; begin
4628: LD_INT 0
4630: PPUSH
4631: PPUSH
4632: PPUSH
4633: PPUSH
4634: PPUSH
4635: PPUSH
4636: PPUSH
4637: PPUSH
4638: PPUSH
4639: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4640: LD_ADDR_VAR 0 3
4644: PUSH
4645: LD_INT 1
4647: PPUSH
4648: LD_INT 3
4650: PPUSH
4651: CALL_OW 12
4655: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4656: LD_ADDR_VAR 0 5
4660: PUSH
4661: LD_INT 16
4663: PUSH
4664: LD_INT 17
4666: PUSH
4667: LD_INT 19
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: LIST
4674: PUSH
4675: LD_VAR 0 3
4679: ARRAY
4680: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4681: LD_ADDR_VAR 0 7
4685: PUSH
4686: LD_INT 159
4688: PUSH
4689: LD_INT 25
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: PUSH
4696: LD_INT 137
4698: PUSH
4699: LD_INT 37
4701: PUSH
4702: EMPTY
4703: LIST
4704: LIST
4705: PUSH
4706: LD_INT 123
4708: PUSH
4709: LD_INT 55
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: PUSH
4716: LD_INT 115
4718: PUSH
4719: LD_INT 71
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: PUSH
4726: LD_INT 106
4728: PUSH
4729: LD_INT 88
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: PUSH
4736: LD_INT 97
4738: PUSH
4739: LD_INT 114
4741: PUSH
4742: EMPTY
4743: LIST
4744: LIST
4745: PUSH
4746: LD_INT 75
4748: PUSH
4749: LD_INT 146
4751: PUSH
4752: EMPTY
4753: LIST
4754: LIST
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: PUSH
4765: LD_INT 206
4767: PUSH
4768: LD_INT 135
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: PUSH
4775: LD_INT 184
4777: PUSH
4778: LD_INT 111
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: PUSH
4785: LD_INT 154
4787: PUSH
4788: LD_INT 97
4790: PUSH
4791: EMPTY
4792: LIST
4793: LIST
4794: PUSH
4795: LD_INT 122
4797: PUSH
4798: LD_INT 80
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: PUSH
4805: LD_INT 109
4807: PUSH
4808: LD_INT 78
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: PUSH
4815: LD_INT 97
4817: PUSH
4818: LD_INT 113
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: PUSH
4825: LD_INT 75
4827: PUSH
4828: LD_INT 147
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 185
4846: PUSH
4847: LD_INT 72
4849: PUSH
4850: EMPTY
4851: LIST
4852: LIST
4853: PUSH
4854: LD_INT 171
4856: PUSH
4857: LD_INT 83
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: PUSH
4864: LD_INT 161
4866: PUSH
4867: LD_INT 99
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 125
4876: PUSH
4877: LD_INT 82
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: LD_INT 105
4886: PUSH
4887: LD_INT 90
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: PUSH
4894: LD_INT 96
4896: PUSH
4897: LD_INT 116
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 75
4906: PUSH
4907: LD_INT 147
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: LIST
4927: PUSH
4928: LD_VAR 0 3
4932: ARRAY
4933: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4934: LD_ADDR_VAR 0 4
4938: PUSH
4939: LD_INT 4
4941: PUSH
4942: LD_INT 5
4944: PUSH
4945: LD_INT 3
4947: PUSH
4948: EMPTY
4949: LIST
4950: LIST
4951: LIST
4952: PUSH
4953: LD_VAR 0 3
4957: ARRAY
4958: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4959: LD_ADDR_VAR 0 6
4963: PUSH
4964: LD_INT 22
4966: PUSH
4967: LD_INT 20
4969: PUSH
4970: LD_INT 21
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: LIST
4977: PUSH
4978: LD_VAR 0 3
4982: ARRAY
4983: ST_TO_ADDR
// for i := 1 to 2 do
4984: LD_ADDR_VAR 0 2
4988: PUSH
4989: DOUBLE
4990: LD_INT 1
4992: DEC
4993: ST_TO_ADDR
4994: LD_INT 2
4996: PUSH
4997: FOR_TO
4998: IFFALSE 5016
// EraseResourceArea ( i , outerSpawnArea ) ;
5000: LD_VAR 0 2
5004: PPUSH
5005: LD_VAR 0 6
5009: PPUSH
5010: CALL_OW 286
5014: GO 4997
5016: POP
5017: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5018: LD_VAR 0 6
5022: PPUSH
5023: LD_INT 2
5025: PUSH
5026: LD_INT 21
5028: PUSH
5029: LD_INT 1
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 21
5038: PUSH
5039: LD_INT 2
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: LD_INT 21
5048: PUSH
5049: LD_INT 3
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: LIST
5060: LIST
5061: PPUSH
5062: CALL_OW 70
5066: IFFALSE 5281
// repeat wait ( 0 0$1 ) ;
5068: LD_INT 35
5070: PPUSH
5071: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5075: LD_VAR 0 6
5079: PPUSH
5080: LD_INT 2
5082: PUSH
5083: LD_INT 21
5085: PUSH
5086: LD_INT 2
5088: PUSH
5089: EMPTY
5090: LIST
5091: LIST
5092: PUSH
5093: LD_INT 21
5095: PUSH
5096: LD_INT 3
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PUSH
5103: EMPTY
5104: LIST
5105: LIST
5106: LIST
5107: PPUSH
5108: CALL_OW 70
5112: IFFALSE 5173
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5114: LD_ADDR_VAR 0 2
5118: PUSH
5119: LD_VAR 0 6
5123: PPUSH
5124: LD_INT 2
5126: PUSH
5127: LD_INT 21
5129: PUSH
5130: LD_INT 2
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: PUSH
5137: LD_INT 21
5139: PUSH
5140: LD_INT 3
5142: PUSH
5143: EMPTY
5144: LIST
5145: LIST
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: LIST
5151: PPUSH
5152: CALL_OW 70
5156: PUSH
5157: FOR_IN
5158: IFFALSE 5171
// RemoveUnit ( i ) ;
5160: LD_VAR 0 2
5164: PPUSH
5165: CALL_OW 64
5169: GO 5157
5171: POP
5172: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5173: LD_VAR 0 6
5177: PPUSH
5178: LD_INT 21
5180: PUSH
5181: LD_INT 1
5183: PUSH
5184: EMPTY
5185: LIST
5186: LIST
5187: PPUSH
5188: CALL_OW 70
5192: IFFALSE 5241
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5194: LD_ADDR_VAR 0 2
5198: PUSH
5199: LD_VAR 0 6
5203: PPUSH
5204: LD_INT 21
5206: PUSH
5207: LD_INT 1
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: PPUSH
5214: CALL_OW 70
5218: PUSH
5219: FOR_IN
5220: IFFALSE 5239
// ComMoveXY ( i , 113 , 53 ) ;
5222: LD_VAR 0 2
5226: PPUSH
5227: LD_INT 113
5229: PPUSH
5230: LD_INT 53
5232: PPUSH
5233: CALL_OW 111
5237: GO 5219
5239: POP
5240: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5241: LD_VAR 0 6
5245: PPUSH
5246: LD_INT 2
5248: PUSH
5249: LD_INT 21
5251: PUSH
5252: LD_INT 1
5254: PUSH
5255: EMPTY
5256: LIST
5257: LIST
5258: PUSH
5259: LD_INT 21
5261: PUSH
5262: LD_INT 2
5264: PUSH
5265: EMPTY
5266: LIST
5267: LIST
5268: PUSH
5269: EMPTY
5270: LIST
5271: LIST
5272: LIST
5273: PPUSH
5274: CALL_OW 70
5278: NOT
5279: IFFALSE 5068
// case convoyCounter of 1 .. 3 :
5281: LD_EXP 16
5285: PUSH
5286: LD_INT 1
5288: DOUBLE
5289: GREATEREQUAL
5290: IFFALSE 5298
5292: LD_INT 3
5294: DOUBLE
5295: LESSEQUAL
5296: IFTRUE 5300
5298: GO 5935
5300: POP
// begin for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] - convoyCounter do
5301: LD_ADDR_VAR 0 2
5305: PUSH
5306: DOUBLE
5307: LD_INT 1
5309: DEC
5310: ST_TO_ADDR
5311: LD_INT 5
5313: PUSH
5314: LD_INT 6
5316: PUSH
5317: LD_INT 7
5319: PUSH
5320: LD_INT 8
5322: PUSH
5323: EMPTY
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: PUSH
5329: LD_OWVAR 67
5333: ARRAY
5334: PUSH
5335: LD_EXP 16
5339: MINUS
5340: PUSH
5341: FOR_TO
5342: IFFALSE 5549
// begin uc_side := 3 ;
5344: LD_ADDR_OWVAR 20
5348: PUSH
5349: LD_INT 3
5351: ST_TO_ADDR
// uc_nation := 3 ;
5352: LD_ADDR_OWVAR 21
5356: PUSH
5357: LD_INT 3
5359: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5360: LD_INT 0
5362: PPUSH
5363: LD_INT 1
5365: PUSH
5366: LD_INT 1
5368: PUSH
5369: LD_INT 1
5371: PUSH
5372: LD_INT 4
5374: PUSH
5375: EMPTY
5376: LIST
5377: LIST
5378: LIST
5379: LIST
5380: PUSH
5381: LD_INT 1
5383: PPUSH
5384: LD_INT 4
5386: PPUSH
5387: CALL_OW 12
5391: ARRAY
5392: PPUSH
5393: LD_INT 4
5395: PUSH
5396: LD_INT 5
5398: PUSH
5399: LD_INT 6
5401: PUSH
5402: LD_INT 7
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: PUSH
5411: LD_OWVAR 67
5415: ARRAY
5416: PPUSH
5417: CALL_OW 380
// un := CreateHuman ;
5421: LD_ADDR_VAR 0 8
5425: PUSH
5426: CALL_OW 44
5430: ST_TO_ADDR
// SetDir ( un , dir ) ;
5431: LD_VAR 0 8
5435: PPUSH
5436: LD_VAR 0 4
5440: PPUSH
5441: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5445: LD_VAR 0 8
5449: PPUSH
5450: LD_VAR 0 5
5454: PPUSH
5455: LD_INT 0
5457: PPUSH
5458: CALL 74456 0 3
5462: IFFALSE 5547
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5464: LD_ADDR_EXP 41
5468: PUSH
5469: LD_EXP 41
5473: PPUSH
5474: LD_EXP 41
5478: PUSH
5479: LD_INT 1
5481: PLUS
5482: PPUSH
5483: LD_VAR 0 8
5487: PPUSH
5488: CALL_OW 1
5492: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5493: LD_VAR 0 8
5497: PPUSH
5498: LD_INT 1
5500: PPUSH
5501: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5505: LD_VAR 0 8
5509: PPUSH
5510: LD_VAR 0 7
5514: PUSH
5515: LD_INT 1
5517: ARRAY
5518: PUSH
5519: LD_INT 1
5521: ARRAY
5522: PPUSH
5523: LD_VAR 0 7
5527: PUSH
5528: LD_INT 1
5530: ARRAY
5531: PUSH
5532: LD_INT 2
5534: ARRAY
5535: PPUSH
5536: CALL_OW 111
// wait ( 0 0$2 ) ;
5540: LD_INT 70
5542: PPUSH
5543: CALL_OW 67
// end ; end ;
5547: GO 5341
5549: POP
5550: POP
// for i := 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
5551: LD_ADDR_VAR 0 2
5555: PUSH
5556: DOUBLE
5557: LD_INT 1
5559: DEC
5560: ST_TO_ADDR
5561: LD_INT 3
5563: PUSH
5564: LD_INT 4
5566: PUSH
5567: LD_INT 4
5569: PUSH
5570: LD_INT 4
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: PUSH
5579: LD_OWVAR 67
5583: ARRAY
5584: PUSH
5585: FOR_TO
5586: IFFALSE 5931
// begin uc_side := 3 ;
5588: LD_ADDR_OWVAR 20
5592: PUSH
5593: LD_INT 3
5595: ST_TO_ADDR
// uc_nation := 3 ;
5596: LD_ADDR_OWVAR 21
5600: PUSH
5601: LD_INT 3
5603: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5604: LD_INT 3
5606: PPUSH
5607: LD_INT 3
5609: PPUSH
5610: LD_INT 21
5612: PUSH
5613: LD_INT 22
5615: PUSH
5616: LD_INT 23
5618: PUSH
5619: LD_INT 24
5621: PUSH
5622: LD_INT 24
5624: PUSH
5625: LD_INT 24
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: PUSH
5636: LD_OWVAR 67
5640: PPUSH
5641: LD_OWVAR 67
5645: PUSH
5646: LD_INT 2
5648: PLUS
5649: PPUSH
5650: CALL_OW 12
5654: ARRAY
5655: PPUSH
5656: LD_INT 1
5658: PPUSH
5659: LD_INT 1
5661: PPUSH
5662: LD_INT 42
5664: PUSH
5665: LD_INT 44
5667: PUSH
5668: LD_INT 43
5670: PUSH
5671: LD_INT 44
5673: PUSH
5674: LD_INT 46
5676: PUSH
5677: LD_INT 46
5679: PUSH
5680: EMPTY
5681: LIST
5682: LIST
5683: LIST
5684: LIST
5685: LIST
5686: LIST
5687: PUSH
5688: LD_INT 1
5690: PPUSH
5691: LD_OWVAR 67
5695: PUSH
5696: LD_INT 2
5698: PLUS
5699: PPUSH
5700: CALL_OW 12
5704: ARRAY
5705: PPUSH
5706: LD_INT 90
5708: PPUSH
5709: CALL 453 0 7
// un := CreateVehicle ;
5713: LD_ADDR_VAR 0 8
5717: PUSH
5718: CALL_OW 45
5722: ST_TO_ADDR
// SetDir ( un , dir ) ;
5723: LD_VAR 0 8
5727: PPUSH
5728: LD_VAR 0 4
5732: PPUSH
5733: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5737: LD_VAR 0 8
5741: PPUSH
5742: LD_VAR 0 5
5746: PPUSH
5747: LD_INT 0
5749: PPUSH
5750: CALL 74456 0 3
5754: IFFALSE 5929
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5756: LD_ADDR_EXP 41
5760: PUSH
5761: LD_EXP 41
5765: PPUSH
5766: LD_EXP 41
5770: PUSH
5771: LD_INT 1
5773: PLUS
5774: PPUSH
5775: LD_VAR 0 8
5779: PPUSH
5780: CALL_OW 1
5784: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
5785: LD_INT 0
5787: PPUSH
5788: LD_INT 3
5790: PUSH
5791: LD_INT 4
5793: PUSH
5794: LD_INT 5
5796: PUSH
5797: LD_INT 6
5799: PUSH
5800: EMPTY
5801: LIST
5802: LIST
5803: LIST
5804: LIST
5805: PUSH
5806: LD_OWVAR 67
5810: ARRAY
5811: PPUSH
5812: CALL_OW 383
// un := CreateHuman ;
5816: LD_ADDR_VAR 0 8
5820: PUSH
5821: CALL_OW 44
5825: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5826: LD_VAR 0 8
5830: PPUSH
5831: LD_EXP 41
5835: PUSH
5836: LD_EXP 41
5840: ARRAY
5841: PPUSH
5842: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5846: LD_ADDR_EXP 41
5850: PUSH
5851: LD_EXP 41
5855: PPUSH
5856: LD_EXP 41
5860: PUSH
5861: LD_INT 1
5863: PLUS
5864: PPUSH
5865: LD_VAR 0 8
5869: PPUSH
5870: CALL_OW 1
5874: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5875: LD_VAR 0 8
5879: PPUSH
5880: LD_INT 1
5882: PPUSH
5883: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5887: LD_VAR 0 8
5891: PPUSH
5892: LD_VAR 0 7
5896: PUSH
5897: LD_INT 1
5899: ARRAY
5900: PUSH
5901: LD_INT 1
5903: ARRAY
5904: PPUSH
5905: LD_VAR 0 7
5909: PUSH
5910: LD_INT 1
5912: ARRAY
5913: PUSH
5914: LD_INT 2
5916: ARRAY
5917: PPUSH
5918: CALL_OW 111
// wait ( 0 0$3 ) ;
5922: LD_INT 105
5924: PPUSH
5925: CALL_OW 67
// end ; end ;
5929: GO 5585
5931: POP
5932: POP
// end ; 4 .. 7 :
5933: GO 6540
5935: LD_INT 4
5937: DOUBLE
5938: GREATEREQUAL
5939: IFFALSE 5947
5941: LD_INT 7
5943: DOUBLE
5944: LESSEQUAL
5945: IFTRUE 5949
5947: GO 6539
5949: POP
// begin for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
5950: LD_ADDR_VAR 0 2
5954: PUSH
5955: DOUBLE
5956: LD_INT 1
5958: DEC
5959: ST_TO_ADDR
5960: LD_INT 2
5962: PUSH
5963: LD_INT 3
5965: PUSH
5966: LD_INT 4
5968: PUSH
5969: LD_INT 4
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: PUSH
5978: LD_OWVAR 67
5982: ARRAY
5983: PUSH
5984: FOR_TO
5985: IFFALSE 6165
// begin uc_side := 3 ;
5987: LD_ADDR_OWVAR 20
5991: PUSH
5992: LD_INT 3
5994: ST_TO_ADDR
// uc_nation := 3 ;
5995: LD_ADDR_OWVAR 21
5999: PUSH
6000: LD_INT 3
6002: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
6003: LD_INT 0
6005: PPUSH
6006: LD_INT 1
6008: PPUSH
6009: LD_INT 4
6011: PUSH
6012: LD_INT 5
6014: PUSH
6015: LD_INT 6
6017: PUSH
6018: LD_INT 7
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: PUSH
6027: LD_OWVAR 67
6031: ARRAY
6032: PPUSH
6033: CALL_OW 380
// un := CreateHuman ;
6037: LD_ADDR_VAR 0 8
6041: PUSH
6042: CALL_OW 44
6046: ST_TO_ADDR
// SetDir ( un , dir ) ;
6047: LD_VAR 0 8
6051: PPUSH
6052: LD_VAR 0 4
6056: PPUSH
6057: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6061: LD_VAR 0 8
6065: PPUSH
6066: LD_VAR 0 5
6070: PPUSH
6071: LD_INT 0
6073: PPUSH
6074: CALL 74456 0 3
6078: IFFALSE 6163
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6080: LD_ADDR_EXP 41
6084: PUSH
6085: LD_EXP 41
6089: PPUSH
6090: LD_EXP 41
6094: PUSH
6095: LD_INT 1
6097: PLUS
6098: PPUSH
6099: LD_VAR 0 8
6103: PPUSH
6104: CALL_OW 1
6108: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6109: LD_VAR 0 8
6113: PPUSH
6114: LD_INT 1
6116: PPUSH
6117: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6121: LD_VAR 0 8
6125: PPUSH
6126: LD_VAR 0 7
6130: PUSH
6131: LD_INT 1
6133: ARRAY
6134: PUSH
6135: LD_INT 1
6137: ARRAY
6138: PPUSH
6139: LD_VAR 0 7
6143: PUSH
6144: LD_INT 1
6146: ARRAY
6147: PUSH
6148: LD_INT 2
6150: ARRAY
6151: PPUSH
6152: CALL_OW 111
// wait ( 0 0$2 ) ;
6156: LD_INT 70
6158: PPUSH
6159: CALL_OW 67
// end ; end ;
6163: GO 5984
6165: POP
6166: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
6167: LD_ADDR_VAR 0 2
6171: PUSH
6172: DOUBLE
6173: LD_INT 1
6175: DEC
6176: ST_TO_ADDR
6177: LD_INT 2
6179: PUSH
6180: LD_INT 3
6182: PUSH
6183: LD_INT 3
6185: PUSH
6186: LD_INT 4
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: PUSH
6195: LD_OWVAR 67
6199: ARRAY
6200: PUSH
6201: FOR_TO
6202: IFFALSE 6535
// begin uc_side := 3 ;
6204: LD_ADDR_OWVAR 20
6208: PUSH
6209: LD_INT 3
6211: ST_TO_ADDR
// uc_nation := 3 ;
6212: LD_ADDR_OWVAR 21
6216: PUSH
6217: LD_INT 3
6219: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6220: LD_INT 3
6222: PPUSH
6223: LD_INT 3
6225: PPUSH
6226: LD_INT 21
6228: PUSH
6229: LD_INT 22
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PUSH
6236: LD_INT 1
6238: PPUSH
6239: LD_INT 2
6241: PPUSH
6242: CALL_OW 12
6246: ARRAY
6247: PPUSH
6248: LD_INT 1
6250: PPUSH
6251: LD_INT 1
6253: PPUSH
6254: LD_INT 42
6256: PUSH
6257: LD_INT 44
6259: PUSH
6260: LD_INT 43
6262: PUSH
6263: LD_INT 44
6265: PUSH
6266: LD_INT 44
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: PUSH
6276: LD_INT 1
6278: PPUSH
6279: LD_OWVAR 67
6283: PUSH
6284: LD_INT 1
6286: PLUS
6287: PPUSH
6288: CALL_OW 12
6292: ARRAY
6293: PPUSH
6294: LD_INT 90
6296: PPUSH
6297: CALL 453 0 7
// un := CreateVehicle ;
6301: LD_ADDR_VAR 0 8
6305: PUSH
6306: CALL_OW 45
6310: ST_TO_ADDR
// SetDir ( un , dir ) ;
6311: LD_VAR 0 8
6315: PPUSH
6316: LD_VAR 0 4
6320: PPUSH
6321: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6325: LD_VAR 0 8
6329: PPUSH
6330: LD_VAR 0 5
6334: PPUSH
6335: LD_INT 0
6337: PPUSH
6338: CALL 74456 0 3
6342: IFFALSE 6533
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6344: LD_ADDR_EXP 41
6348: PUSH
6349: LD_EXP 41
6353: PPUSH
6354: LD_EXP 41
6358: PUSH
6359: LD_INT 1
6361: PLUS
6362: PPUSH
6363: LD_VAR 0 8
6367: PPUSH
6368: CALL_OW 1
6372: ST_TO_ADDR
// uc_side := 3 ;
6373: LD_ADDR_OWVAR 20
6377: PUSH
6378: LD_INT 3
6380: ST_TO_ADDR
// uc_nation := 3 ;
6381: LD_ADDR_OWVAR 21
6385: PUSH
6386: LD_INT 3
6388: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
6389: LD_INT 0
6391: PPUSH
6392: LD_INT 3
6394: PUSH
6395: LD_INT 4
6397: PUSH
6398: LD_INT 5
6400: PUSH
6401: LD_INT 6
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: PUSH
6410: LD_OWVAR 67
6414: ARRAY
6415: PPUSH
6416: CALL_OW 383
// un := CreateHuman ;
6420: LD_ADDR_VAR 0 8
6424: PUSH
6425: CALL_OW 44
6429: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6430: LD_VAR 0 8
6434: PPUSH
6435: LD_EXP 41
6439: PUSH
6440: LD_EXP 41
6444: ARRAY
6445: PPUSH
6446: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6450: LD_ADDR_EXP 41
6454: PUSH
6455: LD_EXP 41
6459: PPUSH
6460: LD_EXP 41
6464: PUSH
6465: LD_INT 1
6467: PLUS
6468: PPUSH
6469: LD_VAR 0 8
6473: PPUSH
6474: CALL_OW 1
6478: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6479: LD_VAR 0 8
6483: PPUSH
6484: LD_INT 1
6486: PPUSH
6487: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6491: LD_VAR 0 8
6495: PPUSH
6496: LD_VAR 0 7
6500: PUSH
6501: LD_INT 1
6503: ARRAY
6504: PUSH
6505: LD_INT 1
6507: ARRAY
6508: PPUSH
6509: LD_VAR 0 7
6513: PUSH
6514: LD_INT 1
6516: ARRAY
6517: PUSH
6518: LD_INT 2
6520: ARRAY
6521: PPUSH
6522: CALL_OW 111
// wait ( 0 0$2 ) ;
6526: LD_INT 70
6528: PPUSH
6529: CALL_OW 67
// end ; end ;
6533: GO 6201
6535: POP
6536: POP
// end ; end ;
6537: GO 6540
6539: POP
// repeat wait ( 0 0$1 ) ;
6540: LD_INT 35
6542: PPUSH
6543: CALL_OW 67
// for un in ruConvoySquad do
6547: LD_ADDR_VAR 0 8
6551: PUSH
6552: LD_EXP 41
6556: PUSH
6557: FOR_IN
6558: IFFALSE 7188
// begin if IsInArea ( un , westSouthOutArea ) then
6560: LD_VAR 0 8
6564: PPUSH
6565: LD_INT 18
6567: PPUSH
6568: CALL_OW 308
6572: IFFALSE 6660
// begin if GetType ( un ) = unit_vehicle then
6574: LD_VAR 0 8
6578: PPUSH
6579: CALL_OW 247
6583: PUSH
6584: LD_INT 2
6586: EQUAL
6587: IFFALSE 6619
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6589: LD_ADDR_EXP 41
6593: PUSH
6594: LD_EXP 41
6598: PUSH
6599: LD_VAR 0 8
6603: PPUSH
6604: CALL_OW 311
6608: DIFF
6609: ST_TO_ADDR
// RemoveUnit ( un ) ;
6610: LD_VAR 0 8
6614: PPUSH
6615: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6619: LD_ADDR_EXP 15
6623: PUSH
6624: LD_EXP 15
6628: PUSH
6629: LD_INT 1
6631: PLUS
6632: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6633: LD_ADDR_EXP 41
6637: PUSH
6638: LD_EXP 41
6642: PUSH
6643: LD_VAR 0 8
6647: DIFF
6648: ST_TO_ADDR
// RemoveUnit ( un ) ;
6649: LD_VAR 0 8
6653: PPUSH
6654: CALL_OW 64
// break ;
6658: GO 7188
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6660: LD_VAR 0 8
6664: PPUSH
6665: CALL_OW 305
6669: NOT
6670: IFFALSE 6684
6672: PUSH
6673: LD_VAR 0 8
6677: PPUSH
6678: CALL_OW 310
6682: NOT
6683: AND
6684: IFFALSE 6702
// ruConvoySquad := ruConvoySquad diff un ;
6686: LD_ADDR_EXP 41
6690: PUSH
6691: LD_EXP 41
6695: PUSH
6696: LD_VAR 0 8
6700: DIFF
6701: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6702: LD_VAR 0 8
6706: PPUSH
6707: CALL_OW 302
6711: IFFALSE 6725
6713: PUSH
6714: LD_VAR 0 8
6718: PPUSH
6719: CALL_OW 314
6723: NOT
6724: AND
6725: IFFALSE 7186
// begin tag := GetTag ( un ) ;
6727: LD_ADDR_VAR 0 9
6731: PUSH
6732: LD_VAR 0 8
6736: PPUSH
6737: CALL_OW 110
6741: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6742: LD_VAR 0 8
6746: PPUSH
6747: LD_VAR 0 7
6751: PUSH
6752: LD_VAR 0 9
6756: PUSH
6757: LD_INT 1
6759: PLUS
6760: ARRAY
6761: PUSH
6762: LD_INT 1
6764: ARRAY
6765: PPUSH
6766: LD_VAR 0 7
6770: PUSH
6771: LD_VAR 0 9
6775: PUSH
6776: LD_INT 1
6778: PLUS
6779: ARRAY
6780: PUSH
6781: LD_INT 2
6783: ARRAY
6784: PPUSH
6785: CALL_OW 297
6789: PUSH
6790: LD_INT 6
6792: LESS
6793: IFFALSE 6978
// begin SetTag ( un , tag + 1 ) ;
6795: LD_VAR 0 8
6799: PPUSH
6800: LD_VAR 0 9
6804: PUSH
6805: LD_INT 1
6807: PLUS
6808: PPUSH
6809: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6813: LD_VAR 0 8
6817: PPUSH
6818: CALL_OW 247
6822: PUSH
6823: LD_INT 2
6825: EQUAL
6826: IFTRUE 6843
6828: PUSH
6829: LD_VAR 0 8
6833: PPUSH
6834: CALL_OW 257
6838: PUSH
6839: LD_INT 3
6841: EQUAL
6842: OR
6843: IFFALSE 6976
// begin enemy := FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , un , 8 ] ] ) ;
6845: LD_ADDR_VAR 0 10
6849: PUSH
6850: LD_INT 22
6852: PUSH
6853: LD_INT 2
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: PUSH
6860: LD_INT 91
6862: PUSH
6863: LD_VAR 0 8
6867: PUSH
6868: LD_INT 8
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: LIST
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PPUSH
6880: CALL_OW 69
6884: ST_TO_ADDR
// if enemy then
6885: LD_VAR 0 10
6889: IFFALSE 6917
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) else
6891: LD_VAR 0 8
6895: PPUSH
6896: LD_VAR 0 10
6900: PPUSH
6901: LD_VAR 0 8
6905: PPUSH
6906: CALL_OW 74
6910: PPUSH
6911: CALL_OW 115
6915: GO 6976
// begin AddComWait ( un , 0 0$4 ) ;
6917: LD_VAR 0 8
6921: PPUSH
6922: LD_INT 140
6924: PPUSH
6925: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6929: LD_VAR 0 8
6933: PPUSH
6934: LD_VAR 0 7
6938: PUSH
6939: LD_VAR 0 9
6943: PUSH
6944: LD_INT 1
6946: PLUS
6947: ARRAY
6948: PUSH
6949: LD_INT 1
6951: ARRAY
6952: PPUSH
6953: LD_VAR 0 7
6957: PUSH
6958: LD_VAR 0 9
6962: PUSH
6963: LD_INT 1
6965: PLUS
6966: ARRAY
6967: PUSH
6968: LD_INT 2
6970: ARRAY
6971: PPUSH
6972: CALL_OW 174
// end ; end ; end else
6976: GO 7186
// begin if GetClass ( un ) = 4 then
6978: LD_VAR 0 8
6982: PPUSH
6983: CALL_OW 257
6987: PUSH
6988: LD_INT 4
6990: EQUAL
6991: IFFALSE 7139
// begin if UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6993: LD_EXP 41
6997: PPUSH
6998: LD_INT 21
7000: PUSH
7001: LD_INT 1
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: PUSH
7008: LD_INT 3
7010: PUSH
7011: LD_INT 24
7013: PUSH
7014: LD_INT 1000
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PPUSH
7029: CALL_OW 72
7033: IFFALSE 7091
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
7035: LD_VAR 0 8
7039: PPUSH
7040: LD_EXP 41
7044: PPUSH
7045: LD_INT 21
7047: PUSH
7048: LD_INT 1
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: PUSH
7055: LD_INT 3
7057: PUSH
7058: LD_INT 24
7060: PUSH
7061: LD_INT 1000
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PPUSH
7076: CALL_OW 72
7080: PUSH
7081: LD_INT 1
7083: ARRAY
7084: PPUSH
7085: CALL_OW 128
7089: GO 7137
// ComMoveUnit ( un , NearestUnitToUnit ( UnitFilter ( ruConvoySquad , [ f_not , [ f_class , 4 ] ] ) , un ) ) end else
7091: LD_VAR 0 8
7095: PPUSH
7096: LD_EXP 41
7100: PPUSH
7101: LD_INT 3
7103: PUSH
7104: LD_INT 25
7106: PUSH
7107: LD_INT 4
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: PPUSH
7118: CALL_OW 72
7122: PPUSH
7123: LD_VAR 0 8
7127: PPUSH
7128: CALL_OW 74
7132: PPUSH
7133: CALL_OW 112
7137: GO 7186
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7139: LD_VAR 0 8
7143: PPUSH
7144: LD_VAR 0 7
7148: PUSH
7149: LD_VAR 0 9
7153: PUSH
7154: LD_INT 1
7156: PLUS
7157: ARRAY
7158: PUSH
7159: LD_INT 1
7161: ARRAY
7162: PPUSH
7163: LD_VAR 0 7
7167: PUSH
7168: LD_VAR 0 9
7172: PUSH
7173: LD_INT 1
7175: PLUS
7176: ARRAY
7177: PUSH
7178: LD_INT 2
7180: ARRAY
7181: PPUSH
7182: CALL_OW 114
// end ; end ; end ;
7186: GO 6557
7188: POP
7189: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
7190: LD_EXP 41
7194: PPUSH
7195: LD_INT 52
7197: PUSH
7198: EMPTY
7199: LIST
7200: PUSH
7201: LD_INT 21
7203: PUSH
7204: LD_INT 1
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PPUSH
7215: CALL_OW 72
7219: NOT
7220: IFFALSE 6540
// end ;
7222: LD_VAR 0 1
7226: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
7227: LD_EXP 16
7231: PUSH
7232: LD_INT 3
7234: PPUSH
7235: LD_INT 5
7237: PPUSH
7238: CALL_OW 12
7242: LESS
7243: IFFALSE 7252
7245: PUSH
7246: LD_EXP 41
7250: NOT
7251: AND
7252: IFFALSE 7264
7254: PUSH
7255: LD_OWVAR 67
7259: PUSH
7260: LD_INT 1
7262: GREATER
7263: AND
7264: IFFALSE 7684
7266: GO 7268
7268: DISABLE
7269: LD_INT 0
7271: PPUSH
7272: PPUSH
7273: PPUSH
// begin for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
7274: LD_ADDR_VAR 0 1
7278: PUSH
7279: DOUBLE
7280: LD_INT 1
7282: DEC
7283: ST_TO_ADDR
7284: LD_INT 2
7286: PUSH
7287: LD_INT 3
7289: PUSH
7290: LD_INT 4
7292: PUSH
7293: LD_INT 5
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: PUSH
7302: LD_OWVAR 67
7306: ARRAY
7307: PUSH
7308: FOR_TO
7309: IFFALSE 7605
// begin uc_side := 3 ;
7311: LD_ADDR_OWVAR 20
7315: PUSH
7316: LD_INT 3
7318: ST_TO_ADDR
// uc_nation := 3 ;
7319: LD_ADDR_OWVAR 21
7323: PUSH
7324: LD_INT 3
7326: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7327: LD_INT 3
7329: PPUSH
7330: LD_INT 3
7332: PPUSH
7333: LD_INT 21
7335: PUSH
7336: LD_INT 22
7338: PUSH
7339: LD_INT 23
7341: PUSH
7342: LD_INT 24
7344: PUSH
7345: LD_INT 24
7347: PUSH
7348: LD_INT 24
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: PUSH
7359: LD_OWVAR 67
7363: PPUSH
7364: LD_OWVAR 67
7368: PUSH
7369: LD_INT 2
7371: PLUS
7372: PPUSH
7373: CALL_OW 12
7377: ARRAY
7378: PPUSH
7379: LD_INT 1
7381: PPUSH
7382: LD_INT 1
7384: PPUSH
7385: LD_INT 42
7387: PUSH
7388: LD_INT 44
7390: PUSH
7391: LD_INT 43
7393: PUSH
7394: LD_INT 44
7396: PUSH
7397: LD_INT 46
7399: PUSH
7400: LD_INT 46
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: PUSH
7411: LD_INT 1
7413: PPUSH
7414: LD_OWVAR 67
7418: PUSH
7419: LD_INT 2
7421: PLUS
7422: PPUSH
7423: CALL_OW 12
7427: ARRAY
7428: PPUSH
7429: LD_INT 90
7431: PPUSH
7432: CALL 453 0 7
// un := CreateVehicle ;
7436: LD_ADDR_VAR 0 3
7440: PUSH
7441: CALL_OW 45
7445: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7446: LD_VAR 0 3
7450: PPUSH
7451: LD_INT 0
7453: PPUSH
7454: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7458: LD_VAR 0 3
7462: PPUSH
7463: LD_INT 23
7465: PPUSH
7466: LD_INT 0
7468: PPUSH
7469: CALL 74456 0 3
7473: IFFALSE 7603
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7475: LD_ADDR_VAR 0 2
7479: PUSH
7480: LD_VAR 0 2
7484: PPUSH
7485: LD_VAR 0 2
7489: PUSH
7490: LD_INT 1
7492: PLUS
7493: PPUSH
7494: LD_VAR 0 3
7498: PPUSH
7499: CALL_OW 1
7503: ST_TO_ADDR
// uc_side := 3 ;
7504: LD_ADDR_OWVAR 20
7508: PUSH
7509: LD_INT 3
7511: ST_TO_ADDR
// uc_nation := 3 ;
7512: LD_ADDR_OWVAR 21
7516: PUSH
7517: LD_INT 3
7519: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
7520: LD_INT 0
7522: PPUSH
7523: LD_INT 3
7525: PUSH
7526: LD_INT 4
7528: PUSH
7529: LD_INT 5
7531: PUSH
7532: LD_INT 6
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: PUSH
7541: LD_OWVAR 67
7545: ARRAY
7546: PPUSH
7547: CALL_OW 383
// un := CreateHuman ;
7551: LD_ADDR_VAR 0 3
7555: PUSH
7556: CALL_OW 44
7560: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7561: LD_VAR 0 3
7565: PPUSH
7566: LD_VAR 0 2
7570: PUSH
7571: LD_VAR 0 2
7575: ARRAY
7576: PPUSH
7577: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7581: LD_VAR 0 3
7585: PPUSH
7586: LD_INT 80
7588: PPUSH
7589: LD_INT 139
7591: PPUSH
7592: CALL_OW 111
// wait ( 0 0$3 ) ;
7596: LD_INT 105
7598: PPUSH
7599: CALL_OW 67
// end ; end ;
7603: GO 7308
7605: POP
7606: POP
// for i in tmp do
7607: LD_ADDR_VAR 0 1
7611: PUSH
7612: LD_VAR 0 2
7616: PUSH
7617: FOR_IN
7618: IFFALSE 7682
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7620: LD_VAR 0 1
7624: PPUSH
7625: LD_INT 101
7627: PPUSH
7628: LD_INT 102
7630: PPUSH
7631: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7635: LD_VAR 0 1
7639: PPUSH
7640: LD_INT 110
7642: PPUSH
7643: LD_INT 78
7645: PPUSH
7646: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7650: LD_VAR 0 1
7654: PPUSH
7655: LD_INT 75
7657: PPUSH
7658: LD_INT 101
7660: PPUSH
7661: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7665: LD_VAR 0 1
7669: PPUSH
7670: LD_INT 57
7672: PPUSH
7673: LD_INT 83
7675: PPUSH
7676: CALL_OW 174
// end ;
7680: GO 7617
7682: POP
7683: POP
// end ;
7684: PPOPN 3
7686: END
// every 0 0$1 trigger UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) or UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do var i ;
7687: LD_EXP 39
7691: PPUSH
7692: LD_INT 3
7694: PUSH
7695: LD_INT 24
7697: PUSH
7698: LD_INT 1000
7700: PUSH
7701: EMPTY
7702: LIST
7703: LIST
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: PPUSH
7709: CALL_OW 72
7713: IFTRUE 7743
7715: PUSH
7716: LD_EXP 40
7720: PPUSH
7721: LD_INT 3
7723: PUSH
7724: LD_INT 24
7726: PUSH
7727: LD_INT 1000
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: PPUSH
7738: CALL_OW 72
7742: OR
7743: IFFALSE 7842
7745: GO 7747
7747: DISABLE
7748: LD_INT 0
7750: PPUSH
// begin enable ;
7751: ENABLE
// for i in UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) union UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do
7752: LD_ADDR_VAR 0 1
7756: PUSH
7757: LD_EXP 39
7761: PPUSH
7762: LD_INT 3
7764: PUSH
7765: LD_INT 24
7767: PUSH
7768: LD_INT 1000
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PPUSH
7779: CALL_OW 72
7783: PUSH
7784: LD_EXP 40
7788: PPUSH
7789: LD_INT 3
7791: PUSH
7792: LD_INT 24
7794: PUSH
7795: LD_INT 1000
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: PPUSH
7806: CALL_OW 72
7810: UNION
7811: PUSH
7812: FOR_IN
7813: IFFALSE 7840
// if IsSleeping ( i ) then
7815: LD_VAR 0 1
7819: PPUSH
7820: CALL_OW 555
7824: IFFALSE 7838
// ForceSleep ( i , false ) ;
7826: LD_VAR 0 1
7830: PPUSH
7831: LD_INT 0
7833: PPUSH
7834: CALL_OW 585
7838: GO 7812
7840: POP
7841: POP
// end ;
7842: PPOPN 1
7844: END
// every 0 0$1 trigger UnitFilter ( oilBaseGuard , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_inarea , eastBaseArea ] ] ] ) do var i , tmp ;
7845: LD_EXP 38
7849: PPUSH
7850: LD_INT 1
7852: PUSH
7853: LD_INT 3
7855: PUSH
7856: LD_INT 54
7858: PUSH
7859: EMPTY
7860: LIST
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: PUSH
7866: LD_INT 3
7868: PUSH
7869: LD_INT 95
7871: PUSH
7872: LD_INT 26
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: PUSH
7879: EMPTY
7880: LIST
7881: LIST
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: LIST
7887: PPUSH
7888: CALL_OW 72
7892: IFFALSE 7987
7894: GO 7896
7896: DISABLE
7897: LD_INT 0
7899: PPUSH
7900: PPUSH
// begin enable ;
7901: ENABLE
// tmp := UnitFilter ( oilBaseGuard , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_inarea , eastBaseArea ] ] ] ) ;
7902: LD_ADDR_VAR 0 2
7906: PUSH
7907: LD_EXP 38
7911: PPUSH
7912: LD_INT 1
7914: PUSH
7915: LD_INT 3
7917: PUSH
7918: LD_INT 54
7920: PUSH
7921: EMPTY
7922: LIST
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: LD_INT 3
7930: PUSH
7931: LD_INT 95
7933: PUSH
7934: LD_INT 26
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: PUSH
7941: EMPTY
7942: LIST
7943: LIST
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: LIST
7949: PPUSH
7950: CALL_OW 72
7954: ST_TO_ADDR
// for i in tmp do
7955: LD_ADDR_VAR 0 1
7959: PUSH
7960: LD_VAR 0 2
7964: PUSH
7965: FOR_IN
7966: IFFALSE 7985
// ComMoveXY ( i , 206 , 110 ) ;
7968: LD_VAR 0 1
7972: PPUSH
7973: LD_INT 206
7975: PPUSH
7976: LD_INT 110
7978: PPUSH
7979: CALL_OW 111
7983: GO 7965
7985: POP
7986: POP
// end ;
7987: PPOPN 2
7989: END
// every 0 0$5 trigger FilterUnitsInArea ( eastBaseArea , [ f_side , 2 ] ) and FilterUnitsInArea ( eastBaseArea , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) do var i ;
7990: LD_INT 26
7992: PPUSH
7993: LD_INT 22
7995: PUSH
7996: LD_INT 2
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: PPUSH
8003: CALL_OW 70
8007: IFFALSE 8049
8009: PUSH
8010: LD_INT 26
8012: PPUSH
8013: LD_INT 22
8015: PUSH
8016: LD_INT 3
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PUSH
8023: LD_INT 30
8025: PUSH
8026: LD_INT 32
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: PUSH
8033: LD_INT 50
8035: PUSH
8036: EMPTY
8037: LIST
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: LIST
8043: PPUSH
8044: CALL_OW 70
8048: AND
8049: IFFALSE 8128
8051: GO 8053
8053: DISABLE
8054: LD_INT 0
8056: PPUSH
// begin for i in FilterUnitsInArea ( eastBaseArea , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) do
8057: LD_ADDR_VAR 0 1
8061: PUSH
8062: LD_INT 26
8064: PPUSH
8065: LD_INT 22
8067: PUSH
8068: LD_INT 3
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: PUSH
8075: LD_INT 30
8077: PUSH
8078: LD_INT 32
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: PUSH
8085: LD_INT 50
8087: PUSH
8088: EMPTY
8089: LIST
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: LIST
8095: PPUSH
8096: CALL_OW 70
8100: PUSH
8101: FOR_IN
8102: IFFALSE 8126
// if IsInUnit ( i ) then
8104: LD_VAR 0 1
8108: PPUSH
8109: CALL_OW 310
8113: IFFALSE 8124
// ComExitBuilding ( i ) ;
8115: LD_VAR 0 1
8119: PPUSH
8120: CALL_OW 122
8124: GO 8101
8126: POP
8127: POP
// end ; end_of_file
8128: PPOPN 1
8130: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
8131: LD_VAR 0 1
8135: PPUSH
8136: CALL 15125 0 1
// if un = Heike then
8140: LD_VAR 0 1
8144: PUSH
8145: LD_EXP 21
8149: EQUAL
8150: IFFALSE 8159
// YouLost ( Heike ) ;
8152: LD_STRING Heike
8154: PPUSH
8155: CALL_OW 104
// if un in apeSoldGroup then
8159: LD_VAR 0 1
8163: PUSH
8164: LD_EXP 42
8168: IN
8169: IFFALSE 8187
// apeSoldGroup := apeSoldGroup diff un ;
8171: LD_ADDR_EXP 42
8175: PUSH
8176: LD_EXP 42
8180: PUSH
8181: LD_VAR 0 1
8185: DIFF
8186: ST_TO_ADDR
// if un in apeEngGroup then
8187: LD_VAR 0 1
8191: PUSH
8192: LD_EXP 43
8196: IN
8197: IFFALSE 8215
// apeEngGroup := apeEngGroup diff un ;
8199: LD_ADDR_EXP 43
8203: PUSH
8204: LD_EXP 43
8208: PUSH
8209: LD_VAR 0 1
8213: DIFF
8214: ST_TO_ADDR
// if un in oilBaseGuard then
8215: LD_VAR 0 1
8219: PUSH
8220: LD_EXP 38
8224: IN
8225: IFFALSE 8243
// oilBaseGuard := oilBaseGuard diff un ;
8227: LD_ADDR_EXP 38
8231: PUSH
8232: LD_EXP 38
8236: PUSH
8237: LD_VAR 0 1
8241: DIFF
8242: ST_TO_ADDR
// if un in ruNorthGroup then
8243: LD_VAR 0 1
8247: PUSH
8248: LD_EXP 39
8252: IN
8253: IFFALSE 8271
// ruNorthGroup := ruNorthGroup diff un ;
8255: LD_ADDR_EXP 39
8259: PUSH
8260: LD_EXP 39
8264: PUSH
8265: LD_VAR 0 1
8269: DIFF
8270: ST_TO_ADDR
// if un in ruSouthGroup then
8271: LD_VAR 0 1
8275: PUSH
8276: LD_EXP 40
8280: IN
8281: IFFALSE 8299
// ruSouthGroup := ruSouthGroup diff un ;
8283: LD_ADDR_EXP 40
8287: PUSH
8288: LD_EXP 40
8292: PUSH
8293: LD_VAR 0 1
8297: DIFF
8298: ST_TO_ADDR
// if un in ruConvoySquad then
8299: LD_VAR 0 1
8303: PUSH
8304: LD_EXP 41
8308: IN
8309: IFFALSE 8327
// ruConvoySquad := ruConvoySquad diff un ;
8311: LD_ADDR_EXP 41
8315: PUSH
8316: LD_EXP 41
8320: PUSH
8321: LD_VAR 0 1
8325: DIFF
8326: ST_TO_ADDR
// end ;
8327: PPOPN 1
8329: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8330: LD_VAR 0 1
8334: PPUSH
8335: LD_VAR 0 2
8339: PPUSH
8340: CALL 15183 0 2
// if GetWeapon ( veh ) = ar_radar then
8344: LD_VAR 0 1
8348: PPUSH
8349: CALL_OW 264
8353: PUSH
8354: LD_INT 30
8356: EQUAL
8357: IFFALSE 8367
// radarConstructed := true ;
8359: LD_ADDR_EXP 13
8363: PUSH
8364: LD_INT 1
8366: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
8367: LD_VAR 0 1
8371: PPUSH
8372: CALL_OW 264
8376: PUSH
8377: LD_INT 26
8379: EQUAL
8380: IFFALSE 8390
// flamethrowerBuilt := true ;
8382: LD_ADDR_EXP 20
8386: PUSH
8387: LD_INT 1
8389: ST_TO_ADDR
// end ;
8390: PPOPN 2
8392: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
8393: LD_ADDR_EXP 18
8397: PUSH
8398: LD_EXP 18
8402: PUSH
8403: LD_INT 1
8405: PLUS
8406: ST_TO_ADDR
// if oldId in ruConvoySquad then
8407: LD_VAR 0 2
8411: PUSH
8412: LD_EXP 41
8416: IN
8417: IFFALSE 8435
// ruConvoySquad := ruConvoySquad diff oldId ;
8419: LD_ADDR_EXP 41
8423: PUSH
8424: LD_EXP 41
8428: PUSH
8429: LD_VAR 0 2
8433: DIFF
8434: ST_TO_ADDR
// if newId in ruConvoySquad then
8435: LD_VAR 0 1
8439: PUSH
8440: LD_EXP 41
8444: IN
8445: IFFALSE 8463
// ruConvoySquad := ruConvoySquad diff newId ;
8447: LD_ADDR_EXP 41
8451: PUSH
8452: LD_EXP 41
8456: PUSH
8457: LD_VAR 0 1
8461: DIFF
8462: ST_TO_ADDR
// end ; end_of_file
8463: PPOPN 4
8465: END
// export function Action ; var i , p , un , veh , tmp ; begin
8466: LD_INT 0
8468: PPUSH
8469: PPUSH
8470: PPUSH
8471: PPUSH
8472: PPUSH
8473: PPUSH
// InGameOn ;
8474: CALL_OW 8
// music_nat := 2 ;
8478: LD_ADDR_OWVAR 71
8482: PUSH
8483: LD_INT 2
8485: ST_TO_ADDR
// music_class := music_recon ;
8486: LD_ADDR_OWVAR 72
8490: PUSH
8491: LD_INT 3
8493: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
8494: LD_INT 7
8496: PPUSH
8497: LD_INT 6
8499: PPUSH
8500: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 30 ) ;
8504: LD_INT 7
8506: PPUSH
8507: LD_INT 6
8509: PPUSH
8510: LD_INT 2
8512: PPUSH
8513: LD_INT 30
8515: NEG
8516: PPUSH
8517: CALL 1165 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Markov , Aviradze , Sophia ] ;
8521: LD_ADDR_VAR 0 6
8525: PUSH
8526: LD_EXP 21
8530: PUSH
8531: LD_EXP 22
8535: PUSH
8536: LD_EXP 23
8540: PUSH
8541: LD_EXP 24
8545: PUSH
8546: LD_EXP 25
8550: PUSH
8551: LD_EXP 26
8555: PUSH
8556: LD_EXP 28
8560: PUSH
8561: LD_EXP 33
8565: PUSH
8566: LD_EXP 27
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: ST_TO_ADDR
// tmp := tmp diff 0 ;
8582: LD_ADDR_VAR 0 6
8586: PUSH
8587: LD_VAR 0 6
8591: PUSH
8592: LD_INT 0
8594: DIFF
8595: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
8596: LD_ADDR_VAR 0 6
8600: PUSH
8601: LD_VAR 0 6
8605: PPUSH
8606: LD_INT 3
8608: PPUSH
8609: CALL 74043 0 2
8613: ST_TO_ADDR
// for i in heikeVehicles do
8614: LD_ADDR_VAR 0 2
8618: PUSH
8619: LD_EXP 35
8623: PUSH
8624: FOR_IN
8625: IFFALSE 8824
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
8627: LD_INT 5
8629: PPUSH
8630: LD_VAR 0 2
8634: PUSH
8635: LD_INT 5
8637: ARRAY
8638: PPUSH
8639: LD_VAR 0 2
8643: PUSH
8644: LD_INT 1
8646: ARRAY
8647: PPUSH
8648: LD_VAR 0 2
8652: PUSH
8653: LD_INT 2
8655: ARRAY
8656: PPUSH
8657: LD_VAR 0 2
8661: PUSH
8662: LD_INT 3
8664: ARRAY
8665: PPUSH
8666: LD_VAR 0 2
8670: PUSH
8671: LD_INT 4
8673: ARRAY
8674: PPUSH
8675: LD_INT 34
8677: PPUSH
8678: CALL 453 0 7
// veh := CreateVehicle ;
8682: LD_ADDR_VAR 0 5
8686: PUSH
8687: CALL_OW 45
8691: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
8692: LD_VAR 0 2
8696: PUSH
8697: LD_INT 4
8699: ARRAY
8700: PUSH
8701: LD_INT 51
8703: PUSH
8704: LD_INT 32
8706: PUSH
8707: LD_INT 12
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: LIST
8714: IN
8715: IFFALSE 8795
// begin if i [ 7 ] [ 1 ] then
8717: LD_VAR 0 2
8721: PUSH
8722: LD_INT 7
8724: ARRAY
8725: PUSH
8726: LD_INT 1
8728: ARRAY
8729: IFFALSE 8756
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
8731: LD_VAR 0 5
8735: PPUSH
8736: LD_INT 1
8738: PPUSH
8739: LD_VAR 0 2
8743: PUSH
8744: LD_INT 7
8746: ARRAY
8747: PUSH
8748: LD_INT 1
8750: ARRAY
8751: PPUSH
8752: CALL_OW 291
// if i [ 7 ] [ 2 ] then
8756: LD_VAR 0 2
8760: PUSH
8761: LD_INT 7
8763: ARRAY
8764: PUSH
8765: LD_INT 2
8767: ARRAY
8768: IFFALSE 8795
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
8770: LD_VAR 0 5
8774: PPUSH
8775: LD_INT 2
8777: PPUSH
8778: LD_VAR 0 2
8782: PUSH
8783: LD_INT 7
8785: ARRAY
8786: PUSH
8787: LD_INT 2
8789: ARRAY
8790: PPUSH
8791: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8795: LD_VAR 0 5
8799: PPUSH
8800: LD_INT 2
8802: PPUSH
8803: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8807: LD_VAR 0 5
8811: PPUSH
8812: LD_INT 4
8814: PPUSH
8815: LD_INT 0
8817: PPUSH
8818: CALL_OW 49
// end ;
8822: GO 8624
8824: POP
8825: POP
// if tmp then
8826: LD_VAR 0 6
8830: IFFALSE 8942
// begin p := 0 ;
8832: LD_ADDR_VAR 0 3
8836: PUSH
8837: LD_INT 0
8839: ST_TO_ADDR
// for i in tmp do
8840: LD_ADDR_VAR 0 2
8844: PUSH
8845: LD_VAR 0 6
8849: PUSH
8850: FOR_IN
8851: IFFALSE 8940
// begin p := p + 1 ;
8853: LD_ADDR_VAR 0 3
8857: PUSH
8858: LD_VAR 0 3
8862: PUSH
8863: LD_INT 1
8865: PLUS
8866: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHumanArea , false ) ;
8867: LD_VAR 0 2
8871: PPUSH
8872: LD_INT 5
8874: PPUSH
8875: LD_INT 0
8877: PPUSH
8878: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8882: LD_VAR 0 2
8886: PPUSH
8887: LD_INT 26
8889: PPUSH
8890: LD_INT 9
8892: PPUSH
8893: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8897: LD_VAR 0 3
8901: PUSH
8902: LD_EXP 35
8906: GREATEREQUAL
8907: IFFALSE 8924
8909: PUSH
8910: LD_VAR 0 2
8914: PPUSH
8915: CALL_OW 257
8919: PUSH
8920: LD_INT 3
8922: EQUAL
8923: AND
8924: IFFALSE 8938
// SetClass ( i , 1 ) ;
8926: LD_VAR 0 2
8930: PPUSH
8931: LD_INT 1
8933: PPUSH
8934: CALL_OW 336
// end ;
8938: GO 8850
8940: POP
8941: POP
// end ; if heikeSecondSquad then
8942: LD_EXP 34
8946: IFFALSE 9050
// for i in heikeSecondSquad do
8948: LD_ADDR_VAR 0 2
8952: PUSH
8953: LD_EXP 34
8957: PUSH
8958: FOR_IN
8959: IFFALSE 9048
// begin p := p + 1 ;
8961: LD_ADDR_VAR 0 3
8965: PUSH
8966: LD_VAR 0 3
8970: PUSH
8971: LD_INT 1
8973: PLUS
8974: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8975: LD_VAR 0 2
8979: PPUSH
8980: LD_INT 6
8982: PPUSH
8983: LD_INT 0
8985: PPUSH
8986: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8990: LD_VAR 0 2
8994: PPUSH
8995: LD_INT 26
8997: PPUSH
8998: LD_INT 9
9000: PPUSH
9001: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
9005: LD_VAR 0 3
9009: PUSH
9010: LD_EXP 35
9014: GREATEREQUAL
9015: IFFALSE 9032
9017: PUSH
9018: LD_VAR 0 2
9022: PPUSH
9023: CALL_OW 257
9027: PUSH
9028: LD_INT 3
9030: EQUAL
9031: AND
9032: IFFALSE 9046
// SetClass ( i , 1 ) ;
9034: LD_VAR 0 2
9038: PPUSH
9039: LD_INT 1
9041: PPUSH
9042: CALL_OW 336
// end ;
9046: GO 8958
9048: POP
9049: POP
// if heikeApes then
9050: LD_EXP 36
9054: IFFALSE 9097
// for i in heikeApes do
9056: LD_ADDR_VAR 0 2
9060: PUSH
9061: LD_EXP 36
9065: PUSH
9066: FOR_IN
9067: IFFALSE 9095
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
9069: LD_VAR 0 2
9073: PPUSH
9074: LD_INT 7
9076: PPUSH
9077: LD_INT 0
9079: PPUSH
9080: CALL_OW 49
// ComHold ( i ) ;
9084: LD_VAR 0 2
9088: PPUSH
9089: CALL_OW 140
// end ;
9093: GO 9066
9095: POP
9096: POP
// if Kurt then
9097: LD_EXP 32
9101: IFFALSE 9133
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
9103: LD_EXP 32
9107: PPUSH
9108: LD_INT 8
9110: PPUSH
9111: LD_INT 0
9113: PPUSH
9114: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
9118: LD_EXP 32
9122: PPUSH
9123: LD_INT 42
9125: PPUSH
9126: LD_INT 32
9128: PPUSH
9129: CALL_OW 118
// end ; wait ( 0 0$2 ) ;
9133: LD_INT 70
9135: PPUSH
9136: CALL_OW 67
// Say ( Heike , DH-Start-1 ) ;
9140: LD_EXP 21
9144: PPUSH
9145: LD_STRING DH-Start-1
9147: PPUSH
9148: CALL_OW 88
// if Givi then
9152: LD_EXP 22
9156: IFFALSE 9419
// begin Say ( Givi , DG-Start-2-5 ) ;
9158: LD_EXP 22
9162: PPUSH
9163: LD_STRING DG-Start-2-5
9165: PPUSH
9166: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
9170: LD_EXP 21
9174: PPUSH
9175: LD_STRING DH-Start-3
9177: PPUSH
9178: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9182: LD_EXP 21
9186: PPUSH
9187: LD_STRING DH-Start-4
9189: PPUSH
9190: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
9194: LD_EXP 22
9198: PPUSH
9199: LD_STRING DG-Start-5
9201: PPUSH
9202: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
9206: LD_EXP 21
9210: PPUSH
9211: LD_STRING DH-Start-6
9213: PPUSH
9214: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
9218: LD_EXP 22
9222: PPUSH
9223: LD_STRING DG-Start-7
9225: PPUSH
9226: CALL_OW 88
// if Mike then
9230: LD_EXP 23
9234: IFFALSE 9407
// begin Say ( Mike , DM-Start-8 ) ;
9236: LD_EXP 23
9240: PPUSH
9241: LD_STRING DM-Start-8
9243: PPUSH
9244: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
9248: LD_EXP 23
9252: PPUSH
9253: LD_STRING DM-Start-9
9255: PPUSH
9256: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
9260: LD_EXP 22
9264: PPUSH
9265: LD_STRING DG-Start-10
9267: PPUSH
9268: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
9272: LD_EXP 22
9276: PPUSH
9277: LD_STRING DG-Start-11
9279: PPUSH
9280: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
9284: LD_EXP 21
9288: PPUSH
9289: LD_STRING DH-Start-12
9291: PPUSH
9292: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
9296: LD_EXP 22
9300: PPUSH
9301: LD_STRING DG-Start-13
9303: PPUSH
9304: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
9308: LD_EXP 22
9312: PPUSH
9313: LD_STRING DG-Start-14
9315: PPUSH
9316: CALL_OW 88
// if Kaia then
9320: LD_EXP 26
9324: IFFALSE 9407
// begin Say ( Kaia , DK-Start-15 ) ;
9326: LD_EXP 26
9330: PPUSH
9331: LD_STRING DK-Start-15
9333: PPUSH
9334: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
9338: LD_EXP 26
9342: PPUSH
9343: LD_STRING DK-Start-16
9345: PPUSH
9346: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
9350: LD_EXP 26
9354: PPUSH
9355: LD_STRING DK-Start-17
9357: PPUSH
9358: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9362: LD_INT 10
9364: PPUSH
9365: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
9369: LD_EXP 22
9373: PPUSH
9374: LD_EXP 26
9378: PPUSH
9379: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
9383: LD_EXP 22
9387: PPUSH
9388: LD_STRING DG-Start-18
9390: PPUSH
9391: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
9395: LD_EXP 26
9399: PPUSH
9400: LD_STRING DK-Start-19
9402: PPUSH
9403: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
9407: LD_EXP 21
9411: PPUSH
9412: LD_STRING DH-Start-20
9414: PPUSH
9415: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
9419: LD_INT 70
9421: PPUSH
9422: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
9426: LD_EXP 29
9430: PPUSH
9431: LD_STRING DShar-Start-21
9433: PPUSH
9434: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
9438: LD_EXP 21
9442: PPUSH
9443: LD_STRING DH-Start-22
9445: PPUSH
9446: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
9450: LD_EXP 29
9454: PPUSH
9455: LD_STRING DShar-Start-23
9457: PPUSH
9458: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
9462: LD_EXP 29
9466: PPUSH
9467: LD_STRING DShar-Start-24
9469: PPUSH
9470: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
9474: LD_EXP 29
9478: PPUSH
9479: LD_STRING DShar-Start-25
9481: PPUSH
9482: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
9486: LD_EXP 29
9490: PPUSH
9491: LD_STRING DShar-Start-26
9493: PPUSH
9494: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
9498: LD_EXP 21
9502: PPUSH
9503: LD_STRING DH-Start-27
9505: PPUSH
9506: CALL_OW 88
// if Kaia then
9510: LD_EXP 26
9514: IFFALSE 9556
// begin ComTurnUnit ( Heike , Kaia ) ;
9516: LD_EXP 21
9520: PPUSH
9521: LD_EXP 26
9525: PPUSH
9526: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
9530: LD_EXP 26
9534: PPUSH
9535: LD_STRING DK-Start-28
9537: PPUSH
9538: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
9542: LD_EXP 21
9546: PPUSH
9547: LD_STRING DH-Start-29
9549: PPUSH
9550: CALL_OW 88
// end else
9554: GO 9568
// Say ( Heike , DH-Start-a-28 ) ;
9556: LD_EXP 21
9560: PPUSH
9561: LD_STRING DH-Start-a-28
9563: PPUSH
9564: CALL_OW 88
// if Givi then
9568: LD_EXP 22
9572: IFFALSE 9809
// begin ComTurnUnit ( Heike , Givi ) ;
9574: LD_EXP 21
9578: PPUSH
9579: LD_EXP 22
9583: PPUSH
9584: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
9588: LD_EXP 22
9592: PPUSH
9593: LD_EXP 21
9597: PPUSH
9598: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
9602: LD_EXP 21
9606: PPUSH
9607: LD_STRING DH-Start-30
9609: PPUSH
9610: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
9614: LD_EXP 21
9618: PPUSH
9619: LD_STRING DH-Start-31
9621: PPUSH
9622: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
9626: LD_EXP 22
9630: PPUSH
9631: LD_STRING DG-Start-32
9633: PPUSH
9634: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
9638: LD_EXP 21
9642: PPUSH
9643: LD_STRING DH-Start-33
9645: PPUSH
9646: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
9650: LD_EXP 22
9654: PPUSH
9655: LD_STRING DG-Start-34
9657: PPUSH
9658: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
9662: LD_EXP 22
9666: PPUSH
9667: LD_STRING DG-Start-35
9669: PPUSH
9670: CALL_OW 88
// if Kurt and not dialogue_skipped then
9674: LD_EXP 32
9678: IFFALSE 9687
9680: PUSH
9681: LD_OWVAR 59
9685: NOT
9686: AND
9687: IFFALSE 9718
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
9689: LD_EXP 32
9693: PPUSH
9694: LD_INT 28
9696: PPUSH
9697: LD_INT 13
9699: PPUSH
9700: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
9704: LD_EXP 32
9708: PPUSH
9709: LD_EXP 21
9713: PPUSH
9714: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
9718: LD_EXP 22
9722: PPUSH
9723: LD_STRING DG-Start-36
9725: PPUSH
9726: CALL_OW 88
// if Kurt then
9730: LD_EXP 32
9734: IFFALSE 9807
// begin if not Givi then
9736: LD_EXP 22
9740: NOT
9741: IFFALSE 9757
// Say ( Kurt , DKs-Start-37-a ) else
9743: LD_EXP 32
9747: PPUSH
9748: LD_STRING DKs-Start-37-a
9750: PPUSH
9751: CALL_OW 88
9755: GO 9769
// Say ( Kurt , DKs-Start-37 ) ;
9757: LD_EXP 32
9761: PPUSH
9762: LD_STRING DKs-Start-37
9764: PPUSH
9765: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
9769: LD_EXP 32
9773: PPUSH
9774: LD_STRING DKs-Start-38
9776: PPUSH
9777: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
9781: LD_EXP 21
9785: PPUSH
9786: LD_EXP 32
9790: PPUSH
9791: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
9795: LD_EXP 21
9799: PPUSH
9800: LD_STRING DH-Start-39
9802: PPUSH
9803: CALL_OW 88
// end ; end else
9807: GO 9838
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
9809: LD_EXP 34
9813: PPUSH
9814: LD_STRING DArm-Start-a-37
9816: PPUSH
9817: LD_STRING DArf-Start-a-37
9819: PPUSH
9820: CALL 1216 0 3
9824: IFFALSE 9838
// Say ( Heike , DH-Start-39 ) ;
9826: LD_EXP 21
9830: PPUSH
9831: LD_STRING DH-Start-39
9833: PPUSH
9834: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
9838: LD_INT 44
9840: PPUSH
9841: LD_INT 25
9843: PPUSH
9844: CALL_OW 428
9848: IFFALSE 9865
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
9850: LD_INT 44
9852: PPUSH
9853: LD_INT 25
9855: PPUSH
9856: CALL_OW 428
9860: PPUSH
9861: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
9865: LD_EXP 30
9869: PPUSH
9870: LD_INT 5
9872: PPUSH
9873: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
9877: LD_EXP 30
9881: PPUSH
9882: LD_INT 44
9884: PPUSH
9885: LD_INT 25
9887: PPUSH
9888: LD_INT 0
9890: PPUSH
9891: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
9895: LD_EXP 30
9899: PPUSH
9900: LD_INT 29
9902: PPUSH
9903: LD_INT 12
9905: PPUSH
9906: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9910: LD_INT 35
9912: PPUSH
9913: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9917: LD_OWVAR 59
9921: IFTRUE 9943
9923: PUSH
9924: LD_EXP 21
9928: PPUSH
9929: LD_EXP 30
9933: PPUSH
9934: CALL_OW 296
9938: PUSH
9939: LD_INT 8
9941: LESS
9942: OR
9943: IFTRUE 9966
9945: PUSH
9946: LD_EXP 30
9950: PPUSH
9951: LD_INT 26
9953: PPUSH
9954: LD_INT 9
9956: PPUSH
9957: CALL_OW 297
9961: PUSH
9962: LD_INT 6
9964: LESS
9965: OR
9966: IFFALSE 9910
// Say ( Olaf , DO-Scout-1 ) ;
9968: LD_EXP 30
9972: PPUSH
9973: LD_STRING DO-Scout-1
9975: PPUSH
9976: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9980: LD_EXP 30
9984: PPUSH
9985: LD_EXP 21
9989: PPUSH
9990: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9994: LD_ADDR_VAR 0 2
9998: PUSH
9999: LD_VAR 0 6
10003: PUSH
10004: LD_EXP 34
10008: UNION
10009: PUSH
10010: FOR_IN
10011: IFFALSE 10029
// ComTurnUnit ( i , Olaf ) ;
10013: LD_VAR 0 2
10017: PPUSH
10018: LD_EXP 30
10022: PPUSH
10023: CALL_OW 119
10027: GO 10010
10029: POP
10030: POP
// wait ( 0 0$0.3 ) ;
10031: LD_INT 10
10033: PPUSH
10034: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
10038: LD_EXP 21
10042: PPUSH
10043: LD_EXP 30
10047: PPUSH
10048: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
10052: LD_EXP 21
10056: PPUSH
10057: LD_EXP 30
10061: PPUSH
10062: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
10066: LD_EXP 21
10070: PPUSH
10071: LD_STRING DH-Scout-2
10073: PPUSH
10074: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
10078: LD_EXP 30
10082: PPUSH
10083: LD_STRING DO-Scout-3
10085: PPUSH
10086: CALL_OW 88
// if Mike and Givi then
10090: LD_EXP 23
10094: IFFALSE 10102
10096: PUSH
10097: LD_EXP 22
10101: AND
10102: IFFALSE 10118
// Say ( Olaf , DO-Scout-4 ) else
10104: LD_EXP 30
10108: PPUSH
10109: LD_STRING DO-Scout-4
10111: PPUSH
10112: CALL_OW 88
10116: GO 10218
// begin if Mike then
10118: LD_EXP 23
10122: IFFALSE 10150
// begin Say ( Olaf , DO-Scout-a-4 ) ;
10124: LD_EXP 30
10128: PPUSH
10129: LD_STRING DO-Scout-a-4
10131: PPUSH
10132: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
10136: LD_EXP 21
10140: PPUSH
10141: LD_STRING DH-Scout-a-5
10143: PPUSH
10144: CALL_OW 88
// end else
10148: GO 10218
// if Givi then
10150: LD_EXP 22
10154: IFFALSE 10182
// begin Say ( Olaf , DO-Scout-b-4 ) ;
10156: LD_EXP 30
10160: PPUSH
10161: LD_STRING DO-Scout-b-4
10163: PPUSH
10164: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
10168: LD_EXP 21
10172: PPUSH
10173: LD_STRING DH-Scout-b-5
10175: PPUSH
10176: CALL_OW 88
// end else
10180: GO 10218
// begin Say ( Olaf , DO-Scout-f-4 ) ;
10182: LD_EXP 30
10186: PPUSH
10187: LD_STRING DO-Scout-f-4
10189: PPUSH
10190: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
10194: LD_EXP 21
10198: PPUSH
10199: LD_STRING DH-Scout-f-5
10201: PPUSH
10202: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
10206: LD_EXP 30
10210: PPUSH
10211: LD_STRING DO-Scout-f-6
10213: PPUSH
10214: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
10218: LD_EXP 21
10222: PPUSH
10223: LD_STRING DH-Scout-5
10225: PPUSH
10226: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
10230: LD_EXP 30
10234: PPUSH
10235: LD_STRING DO-Scout-6
10237: PPUSH
10238: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
10242: LD_EXP 30
10246: PPUSH
10247: LD_STRING DO-Scout-7
10249: PPUSH
10250: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
10254: LD_EXP 21
10258: PPUSH
10259: LD_STRING DH-Scout-8
10261: PPUSH
10262: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
10266: LD_EXP 21
10270: PPUSH
10271: LD_STRING DH-Scout-9
10273: PPUSH
10274: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
10278: LD_EXP 30
10282: PPUSH
10283: LD_STRING DO-Scout-10
10285: PPUSH
10286: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
10290: LD_EXP 30
10294: PPUSH
10295: LD_STRING DO-Scout-12
10297: PPUSH
10298: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
10302: LD_EXP 30
10306: PPUSH
10307: LD_STRING DO-Scout-13
10309: PPUSH
10310: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
10314: LD_EXP 30
10318: PPUSH
10319: LD_STRING DO-Scout-14
10321: PPUSH
10322: CALL_OW 88
// if Givi then
10326: LD_EXP 22
10330: IFFALSE 10356
// begin Say ( Givi , DG-Scout-15 ) ;
10332: LD_EXP 22
10336: PPUSH
10337: LD_STRING DG-Scout-15
10339: PPUSH
10340: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
10344: LD_EXP 26
10348: PPUSH
10349: LD_STRING DK-Scout-16
10351: PPUSH
10352: CALL_OW 88
// end ; if not dialogue_skipped then
10356: LD_OWVAR 59
10360: NOT
10361: IFFALSE 10482
// begin async ;
10363: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
10364: LD_EXP 30
10368: PPUSH
10369: LD_STRING DO-Scout-17
10371: PPUSH
10372: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10376: LD_INT 55
10378: PPUSH
10379: LD_INT 77
10381: PPUSH
10382: LD_INT 2
10384: PPUSH
10385: LD_INT 6
10387: NEG
10388: PPUSH
10389: CALL 1165 0 4
// wait ( 10 ) ;
10393: LD_INT 10
10395: PPUSH
10396: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
10400: LD_INT 55
10402: PPUSH
10403: LD_INT 77
10405: PPUSH
10406: CALL_OW 84
// wait ( 0 0$10 ) ;
10410: LD_INT 350
10412: PPUSH
10413: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
10417: LD_EXP 30
10421: PPUSH
10422: LD_STRING DO-Scout-18
10424: PPUSH
10425: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10429: LD_INT 204
10431: PPUSH
10432: LD_INT 107
10434: PPUSH
10435: LD_INT 2
10437: PPUSH
10438: LD_INT 12
10440: NEG
10441: PPUSH
10442: CALL 1165 0 4
// wait ( 10 ) ;
10446: LD_INT 10
10448: PPUSH
10449: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
10453: LD_INT 204
10455: PPUSH
10456: LD_INT 107
10458: PPUSH
10459: CALL_OW 84
// wait ( 0 0$10 ) ;
10463: LD_INT 350
10465: PPUSH
10466: CALL_OW 67
// sync ;
10470: SYNC
// CenterNowOnUnits ( Heike ) ;
10471: LD_EXP 21
10475: PPUSH
10476: CALL_OW 87
// end else
10480: GO 10516
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10482: LD_INT 55
10484: PPUSH
10485: LD_INT 77
10487: PPUSH
10488: LD_INT 2
10490: PPUSH
10491: LD_INT 6
10493: NEG
10494: PPUSH
10495: CALL 1165 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10499: LD_INT 204
10501: PPUSH
10502: LD_INT 107
10504: PPUSH
10505: LD_INT 2
10507: PPUSH
10508: LD_INT 12
10510: NEG
10511: PPUSH
10512: CALL 1165 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
10516: LD_EXP 30
10520: PPUSH
10521: LD_STRING DO-Scout-19
10523: PPUSH
10524: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
10528: LD_EXP 30
10532: PPUSH
10533: LD_STRING DO-Scout-20
10535: PPUSH
10536: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
10540: LD_EXP 21
10544: PPUSH
10545: LD_STRING DH-Scout-21
10547: PPUSH
10548: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
10552: LD_EXP 21
10556: PPUSH
10557: LD_STRING DH-Scout-22
10559: PPUSH
10560: CALL_OW 88
// InGameOff ;
10564: CALL_OW 9
// if heikeSecondSquad then
10568: LD_EXP 34
10572: IFFALSE 10586
// ForceSleep ( heikeSecondSquad , false ) ;
10574: LD_EXP 34
10578: PPUSH
10579: LD_INT 0
10581: PPUSH
10582: CALL_OW 585
// if Givi then
10586: LD_EXP 22
10590: IFFALSE 10605
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
10592: LD_INT 13
10594: PPUSH
10595: LD_INT 2
10597: PPUSH
10598: LD_INT 1
10600: PPUSH
10601: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
10605: LD_STRING Road
10607: PPUSH
10608: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
10612: LD_ADDR_VAR 0 2
10616: PUSH
10617: LD_INT 22
10619: PUSH
10620: LD_INT 5
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: PUSH
10627: LD_INT 21
10629: PUSH
10630: LD_INT 2
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: PPUSH
10641: CALL_OW 69
10645: PUSH
10646: FOR_IN
10647: IFFALSE 10663
// SetSide ( i , 2 ) ;
10649: LD_VAR 0 2
10653: PPUSH
10654: LD_INT 2
10656: PPUSH
10657: CALL_OW 235
10661: GO 10646
10663: POP
10664: POP
// SaveForQuickRestart ;
10665: CALL_OW 22
// music_class := music_auto ;
10669: LD_ADDR_OWVAR 72
10673: PUSH
10674: LD_INT 0
10676: ST_TO_ADDR
// end ;
10677: LD_VAR 0 1
10681: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
10682: LD_INT 2
10684: PPUSH
10685: LD_INT 9
10687: PPUSH
10688: CALL_OW 294
10692: IFFALSE 11057
10694: GO 10696
10696: DISABLE
// begin DialogueOn ;
10697: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
10701: LD_INT 111
10703: PPUSH
10704: LD_INT 72
10706: PPUSH
10707: LD_INT 2
10709: PPUSH
10710: LD_INT 20
10712: NEG
10713: PPUSH
10714: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
10718: LD_INT 111
10720: PPUSH
10721: LD_INT 72
10723: PPUSH
10724: LD_INT 2
10726: PPUSH
10727: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
10731: LD_INT 111
10733: PPUSH
10734: LD_INT 72
10736: PPUSH
10737: CALL_OW 86
// if IsOk ( Kamil ) then
10741: LD_EXP 25
10745: PPUSH
10746: CALL_OW 302
10750: IFFALSE 10867
// begin Say ( Kamil , DKam-Cross-1 ) ;
10752: LD_EXP 25
10756: PPUSH
10757: LD_STRING DKam-Cross-1
10759: PPUSH
10760: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
10764: LD_EXP 25
10768: PPUSH
10769: LD_STRING DKam-Cross-2
10771: PPUSH
10772: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
10776: LD_EXP 25
10780: PPUSH
10781: LD_STRING DKam-Cross-3
10783: PPUSH
10784: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
10788: LD_EXP 25
10792: PPUSH
10793: LD_STRING DKam-Cross-4
10795: PPUSH
10796: CALL_OW 88
// if IsOk ( Ibrahim ) then
10800: LD_EXP 24
10804: PPUSH
10805: CALL_OW 302
10809: IFFALSE 10865
// begin if ibrahimJoinedIn04 then
10811: LD_EXP 4
10815: IFFALSE 10829
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10817: LD_EXP 24
10821: PPUSH
10822: LD_STRING DI-Cross-b-5
10824: PPUSH
10825: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10829: LD_EXP 24
10833: PPUSH
10834: LD_STRING DI-Cross-b-6
10836: PPUSH
10837: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10841: LD_EXP 24
10845: PPUSH
10846: LD_STRING DI-Cross-b-7
10848: PPUSH
10849: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
10853: LD_EXP 25
10857: PPUSH
10858: LD_STRING DKam-Cross-8
10860: PPUSH
10861: CALL_OW 88
// end ; end else
10865: GO 11025
// if IsOk ( Sophia ) then
10867: LD_EXP 27
10871: PPUSH
10872: CALL_OW 302
10876: IFFALSE 10993
// begin Say ( Sophia , DS-Cross-1 ) ;
10878: LD_EXP 27
10882: PPUSH
10883: LD_STRING DS-Cross-1
10885: PPUSH
10886: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
10890: LD_EXP 27
10894: PPUSH
10895: LD_STRING DS-Cross-2
10897: PPUSH
10898: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
10902: LD_EXP 27
10906: PPUSH
10907: LD_STRING DS-Cross-3
10909: PPUSH
10910: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
10914: LD_EXP 27
10918: PPUSH
10919: LD_STRING DS-Cross-4
10921: PPUSH
10922: CALL_OW 88
// if IsOk ( Ibrahim ) then
10926: LD_EXP 24
10930: PPUSH
10931: CALL_OW 302
10935: IFFALSE 10991
// begin if ibrahimJoinedIn04 then
10937: LD_EXP 4
10941: IFFALSE 10955
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10943: LD_EXP 24
10947: PPUSH
10948: LD_STRING DI-Cross-b-5
10950: PPUSH
10951: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10955: LD_EXP 24
10959: PPUSH
10960: LD_STRING DI-Cross-b-6
10962: PPUSH
10963: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10967: LD_EXP 24
10971: PPUSH
10972: LD_STRING DI-Cross-b-7
10974: PPUSH
10975: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10979: LD_EXP 27
10983: PPUSH
10984: LD_STRING DS-Cross-8
10986: PPUSH
10987: CALL_OW 88
// end ; end else
10991: GO 11025
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10993: LD_EXP 34
10997: PPUSH
10998: LD_INT 50
11000: PUSH
11001: EMPTY
11002: LIST
11003: PPUSH
11004: CALL_OW 72
11008: IFFALSE 11025
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
11010: LD_EXP 34
11014: PPUSH
11015: LD_STRING DArm-Cross-c-1
11017: PPUSH
11018: LD_STRING DArf-Cross-c-1
11020: PPUSH
11021: CALL 1216 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
11025: LD_INT 85
11027: PPUSH
11028: LD_INT 2
11030: PPUSH
11031: LD_INT 1
11033: PPUSH
11034: CALL_OW 322
// DialogueOff ;
11038: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
11042: LD_STRING Crane
11044: PPUSH
11045: CALL_OW 337
// spottedCrossRoad := true ;
11049: LD_ADDR_EXP 8
11053: PUSH
11054: LD_INT 1
11056: ST_TO_ADDR
// end ;
11057: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
11058: LD_INT 22
11060: PUSH
11061: LD_INT 2
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: LD_INT 2
11070: PUSH
11071: LD_INT 30
11073: PUSH
11074: LD_INT 0
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: PUSH
11081: LD_INT 30
11083: PUSH
11084: LD_INT 1
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: LIST
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: PPUSH
11100: CALL_OW 69
11104: IFFALSE 11125
11106: PUSH
11107: LD_EXP 26
11111: PPUSH
11112: CALL_OW 302
11116: IFTRUE 11124
11118: PUSH
11119: LD_EXP 34
11123: OR
11124: AND
11125: IFFALSE 11337
11127: GO 11129
11129: DISABLE
// begin DialogueOn ;
11130: CALL_OW 6
// if Kaia then
11134: LD_EXP 26
11138: IFFALSE 11151
// CenterNowOnUnits ( Kaia ) else
11140: LD_EXP 26
11144: PPUSH
11145: CALL_OW 87
11149: GO 11160
// CenterNowOnUnits ( Heike ) ;
11151: LD_EXP 21
11155: PPUSH
11156: CALL_OW 87
// if IsOk ( Kaia ) then
11160: LD_EXP 26
11164: PPUSH
11165: CALL_OW 302
11169: IFFALSE 11185
// Say ( Kaia , DK-Cam-1 ) else
11171: LD_EXP 26
11175: PPUSH
11176: LD_STRING DK-Cam-1
11178: PPUSH
11179: CALL_OW 88
11183: GO 11200
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
11185: LD_EXP 34
11189: PPUSH
11190: LD_STRING DArm-Cam-1
11192: PPUSH
11193: LD_STRING DArf-Cam-1
11195: PPUSH
11196: CALL 1216 0 3
// Say ( Heike , DH-Cam-2 ) ;
11200: LD_EXP 21
11204: PPUSH
11205: LD_STRING DH-Cam-2
11207: PPUSH
11208: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
11212: LD_EXP 21
11216: PPUSH
11217: LD_STRING DH-Cam-3
11219: PPUSH
11220: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11224: LD_EXP 21
11228: PPUSH
11229: LD_STRING DH-Cam-4
11231: PPUSH
11232: CALL_OW 88
// if IsOk ( Kaia ) then
11236: LD_EXP 26
11240: PPUSH
11241: CALL_OW 302
11245: IFFALSE 11261
// Say ( Kaia , DK-Cam-5 ) else
11247: LD_EXP 26
11251: PPUSH
11252: LD_STRING DK-Cam-5
11254: PPUSH
11255: CALL_OW 88
11259: GO 11276
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
11261: LD_EXP 34
11265: PPUSH
11266: LD_STRING DArm-Cam-5
11268: PPUSH
11269: LD_STRING DArf-Cam-5
11271: PPUSH
11272: CALL 1216 0 3
// Say ( Olaf , DO-Cam-6 ) ;
11276: LD_EXP 30
11280: PPUSH
11281: LD_STRING DO-Cam-6
11283: PPUSH
11284: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
11288: LD_EXP 30
11292: PPUSH
11293: LD_STRING DO-Cam-7
11295: PPUSH
11296: CALL_OW 88
// DialogueOff ;
11300: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
11304: LD_STRING Radar
11306: PPUSH
11307: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
11311: LD_INT 6
11313: PPUSH
11314: LD_INT 2
11316: PPUSH
11317: LD_INT 1
11319: PPUSH
11320: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
11324: LD_INT 20
11326: PPUSH
11327: LD_INT 2
11329: PPUSH
11330: LD_INT 1
11332: PPUSH
11333: CALL_OW 324
// end ;
11337: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
11338: LD_INT 22
11340: PUSH
11341: LD_INT 2
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PUSH
11348: LD_INT 2
11350: PUSH
11351: LD_INT 34
11353: PUSH
11354: LD_INT 30
11356: PUSH
11357: EMPTY
11358: LIST
11359: LIST
11360: PUSH
11361: LD_INT 35
11363: PUSH
11364: LD_INT 30
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: LIST
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: PPUSH
11380: CALL_OW 69
11384: IFFALSE 11396
11386: GO 11388
11388: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
11389: LD_STRING RadarDone
11391: PPUSH
11392: CALL_OW 337
11396: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
11397: LD_INT 22
11399: PUSH
11400: LD_INT 2
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: PUSH
11407: LD_INT 34
11409: PUSH
11410: LD_INT 88
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: PPUSH
11421: CALL_OW 69
11425: IFFALSE 11437
11427: GO 11429
11429: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
11430: LD_STRING CraneDone
11432: PPUSH
11433: CALL_OW 337
11437: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
11438: LD_EXP 30
11442: PPUSH
11443: CALL_OW 302
11447: IFFALSE 11460
11449: PUSH
11450: LD_EXP 33
11454: PPUSH
11455: CALL_OW 302
11459: AND
11460: IFFALSE 11478
11462: PUSH
11463: LD_INT 6
11465: PPUSH
11466: LD_INT 2
11468: PPUSH
11469: CALL_OW 321
11473: PUSH
11474: LD_INT 2
11476: EQUAL
11477: AND
11478: IFFALSE 11513
11480: PUSH
11481: LD_EXP 33
11485: PPUSH
11486: LD_EXP 21
11490: PPUSH
11491: CALL_OW 296
11495: PUSH
11496: LD_INT 10
11498: LESS
11499: IFTRUE 11512
11501: PUSH
11502: LD_EXP 33
11506: PPUSH
11507: CALL_OW 310
11511: OR
11512: AND
11513: IFFALSE 11727
11515: GO 11517
11517: DISABLE
// begin DialogueOn ;
11518: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
11522: LD_EXP 33
11526: PPUSH
11527: LD_STRING DA-RC-1
11529: PPUSH
11530: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
11534: LD_EXP 33
11538: PPUSH
11539: LD_STRING DA-RC-2
11541: PPUSH
11542: CALL_OW 88
// if IsOk ( Kaia ) then
11546: LD_EXP 26
11550: PPUSH
11551: CALL_OW 302
11555: IFFALSE 11629
// begin Say ( Kaia , DK-RC-3 ) ;
11557: LD_EXP 26
11561: PPUSH
11562: LD_STRING DK-RC-3
11564: PPUSH
11565: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
11569: LD_EXP 33
11573: PPUSH
11574: LD_STRING DA-RC-4
11576: PPUSH
11577: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
11581: LD_EXP 26
11585: PPUSH
11586: LD_STRING DK-RC-5
11588: PPUSH
11589: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
11593: LD_EXP 33
11597: PPUSH
11598: LD_STRING DA-RC-6
11600: PPUSH
11601: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
11605: LD_EXP 26
11609: PPUSH
11610: LD_STRING DK-RC-7
11612: PPUSH
11613: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
11617: LD_EXP 33
11621: PPUSH
11622: LD_STRING DA-RC-8
11624: PPUSH
11625: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
11629: LD_EXP 21
11633: PPUSH
11634: LD_STRING DH-RC-9
11636: PPUSH
11637: CALL_OW 88
// if IsOk ( Markov ) then
11641: LD_EXP 28
11645: PPUSH
11646: CALL_OW 302
11650: IFFALSE 11678
// begin Say ( Markov , DMar-RC-10 ) ;
11652: LD_EXP 28
11656: PPUSH
11657: LD_STRING DMar-RC-10
11659: PPUSH
11660: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
11664: LD_EXP 28
11668: PPUSH
11669: LD_STRING DMar-RC-11
11671: PPUSH
11672: CALL_OW 88
// end else
11676: GO 11690
// begin Say ( Olaf , DO-RC-a-10 ) ;
11678: LD_EXP 30
11682: PPUSH
11683: LD_STRING DO-RC-a-10
11685: PPUSH
11686: CALL_OW 88
// end ; DialogueOff ;
11690: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
11694: LD_STRING RemoteControl
11696: PPUSH
11697: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
11701: LD_INT 15
11703: PPUSH
11704: LD_INT 2
11706: PPUSH
11707: LD_INT 1
11709: PPUSH
11710: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
11714: LD_INT 22
11716: PPUSH
11717: LD_INT 2
11719: PPUSH
11720: LD_INT 1
11722: PPUSH
11723: CALL_OW 324
// end ;
11727: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
11728: LD_INT 12
11730: PPUSH
11731: LD_INT 22
11733: PUSH
11734: LD_INT 2
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: PPUSH
11741: CALL_OW 70
11745: IFFALSE 12114
11747: GO 11749
11749: DISABLE
11750: LD_INT 0
11752: PPUSH
// begin PrepareWestBase ;
11753: CALL 3979 0 0
// westBaseSpotted := true ;
11757: LD_ADDR_EXP 5
11761: PUSH
11762: LD_INT 1
11764: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11765: LD_INT 70
11767: PPUSH
11768: CALL_OW 67
// InGameOn ;
11772: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
11776: LD_INT 56
11778: PPUSH
11779: LD_INT 77
11781: PPUSH
11782: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
11786: LD_INT 56
11788: PPUSH
11789: LD_INT 77
11791: PPUSH
11792: LD_INT 2
11794: PPUSH
11795: LD_INT 12
11797: NEG
11798: PPUSH
11799: CALL_OW 330
// wait ( 0 0$2 ) ;
11803: LD_INT 70
11805: PPUSH
11806: CALL_OW 67
// DialogueOn ;
11810: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
11814: LD_EXP 21
11818: PPUSH
11819: LD_STRING DH-Rbase-1
11821: PPUSH
11822: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
11826: LD_EXP 26
11830: PPUSH
11831: LD_STRING DK-Rbase-2
11833: PPUSH
11834: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
11838: LD_EXP 26
11842: PPUSH
11843: LD_STRING DK-Rbase-3
11845: PPUSH
11846: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
11850: LD_EXP 26
11854: PPUSH
11855: LD_STRING DK-Rbase-4
11857: PPUSH
11858: CALL_OW 88
// DialogueOff ;
11862: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
11866: LD_INT 56
11868: PPUSH
11869: LD_INT 77
11871: PPUSH
11872: LD_INT 2
11874: PPUSH
11875: CALL_OW 331
// InGameOff ;
11879: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
11883: LD_INT 35
11885: PPUSH
11886: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
11890: LD_EXP 42
11894: NOT
11895: IFFALSE 11904
11897: PUSH
11898: LD_EXP 43
11902: NOT
11903: AND
11904: IFFALSE 11883
// wait ( 0 0$2 ) ;
11906: LD_INT 70
11908: PPUSH
11909: CALL_OW 67
// if IsOk ( Kaia ) then
11913: LD_EXP 26
11917: PPUSH
11918: CALL_OW 302
11922: IFFALSE 12037
// begin DialogueOn ;
11924: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
11928: LD_INT 56
11930: PPUSH
11931: LD_INT 81
11933: PPUSH
11934: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11938: LD_EXP 26
11942: PPUSH
11943: LD_STRING DK-Rbase-5
11945: PPUSH
11946: CALL_OW 88
// if IsOk ( Givi ) then
11950: LD_EXP 22
11954: PPUSH
11955: CALL_OW 302
11959: IFFALSE 12033
// begin Say ( Givi , DG-Rbase-6 ) ;
11961: LD_EXP 22
11965: PPUSH
11966: LD_STRING DG-Rbase-6
11968: PPUSH
11969: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11973: LD_EXP 22
11977: PPUSH
11978: LD_STRING DG-Rbase-7
11980: PPUSH
11981: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11985: LD_EXP 26
11989: PPUSH
11990: LD_STRING DK-Rbase-8
11992: PPUSH
11993: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11997: LD_EXP 22
12001: PPUSH
12002: LD_STRING DG-Rbase-9
12004: PPUSH
12005: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
12009: LD_EXP 22
12013: PPUSH
12014: LD_STRING DG-Rbase-10
12016: PPUSH
12017: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
12021: LD_EXP 26
12025: PPUSH
12026: LD_STRING DK-Rbase-11
12028: PPUSH
12029: CALL_OW 88
// end ; DialogueOff ;
12033: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
12037: LD_ADDR_VAR 0 1
12041: PUSH
12042: LD_INT 12
12044: PPUSH
12045: LD_INT 22
12047: PUSH
12048: LD_INT 3
12050: PUSH
12051: EMPTY
12052: LIST
12053: LIST
12054: PUSH
12055: LD_INT 21
12057: PUSH
12058: LD_INT 3
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: PPUSH
12069: CALL_OW 70
12073: PUSH
12074: FOR_IN
12075: IFFALSE 12091
// SetSide ( i , 2 ) ;
12077: LD_VAR 0 1
12081: PPUSH
12082: LD_INT 2
12084: PPUSH
12085: CALL_OW 235
12089: GO 12074
12091: POP
12092: POP
// westBaseCaptured := true ;
12093: LD_ADDR_EXP 9
12097: PUSH
12098: LD_INT 1
12100: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
12101: LD_INT 0
12103: PPUSH
12104: LD_INT 2
12106: PPUSH
12107: LD_INT 1
12109: PPUSH
12110: CALL_OW 324
// end ;
12114: PPOPN 1
12116: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
12117: LD_EXP 38
12121: NOT
12122: IFTRUE 12137
12124: PUSH
12125: LD_INT 10
12127: PPUSH
12128: CALL_OW 255
12132: PUSH
12133: LD_INT 2
12135: EQUAL
12136: OR
12137: IFFALSE 12274
12139: GO 12141
12141: DISABLE
// begin DialogueOn ;
12142: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
12146: LD_EXP 21
12150: PPUSH
12151: LD_STRING DH-Goal-1
12153: PPUSH
12154: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
12158: LD_EXP 29
12162: PPUSH
12163: LD_STRING DShar-Goal-2
12165: PPUSH
12166: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
12170: LD_EXP 21
12174: PPUSH
12175: LD_STRING DH-Goal-3
12177: PPUSH
12178: CALL_OW 88
// if reinforcementsAllowed then
12182: LD_EXP 14
12186: IFFALSE 12212
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
12188: LD_EXP 29
12192: PPUSH
12193: LD_STRING DShar-Goal-4
12195: PPUSH
12196: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
12200: LD_EXP 21
12204: PPUSH
12205: LD_STRING DH-Goal-5
12207: PPUSH
12208: CALL_OW 88
// end ; DialogueOff ;
12212: CALL_OW 7
// eastBaseCaptured := true ;
12216: LD_ADDR_EXP 10
12220: PUSH
12221: LD_INT 1
12223: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
12224: LD_STRING BaseCaptured
12226: PPUSH
12227: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
12231: LD_INT 10
12233: PPUSH
12234: LD_INT 2
12236: PPUSH
12237: CALL_OW 235
// if not reinforcementsAllowed then
12241: LD_EXP 14
12245: NOT
12246: IFFALSE 12250
// exit ;
12248: GO 12274
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
12250: LD_INT 21000
12252: PUSH
12253: LD_INT 1050
12255: NEG
12256: PPUSH
12257: LD_INT 1050
12259: PPUSH
12260: CALL_OW 12
12264: PLUS
12265: PPUSH
12266: CALL_OW 67
// PrepareReinforcements ;
12270: CALL 2192 0 0
// end ;
12274: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
12275: LD_INT 22
12277: PUSH
12278: LD_INT 2
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: PUSH
12285: LD_INT 30
12287: PUSH
12288: LD_INT 13
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: PPUSH
12299: CALL_OW 69
12303: IFFALSE 12320
12305: GO 12307
12307: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
12308: LD_EXP 22
12312: PPUSH
12313: LD_STRING DG-Lab-1
12315: PPUSH
12316: CALL_OW 88
// end ;
12320: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
12321: LD_INT 5
12323: PPUSH
12324: LD_INT 2
12326: PPUSH
12327: CALL_OW 321
12331: PUSH
12332: LD_INT 2
12334: EQUAL
12335: IFFALSE 12348
12337: PUSH
12338: LD_EXP 22
12342: PPUSH
12343: CALL_OW 302
12347: AND
12348: IFFALSE 12409
12350: GO 12352
12352: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
12353: LD_EXP 22
12357: PPUSH
12358: LD_STRING DG-Stim-1
12360: PPUSH
12361: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
12365: LD_EXP 21
12369: PPUSH
12370: LD_STRING DH-Stim-2
12372: PPUSH
12373: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
12377: LD_EXP 22
12381: PPUSH
12382: LD_STRING DG-Stim-3
12384: PPUSH
12385: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
12389: LD_EXP 21
12393: PPUSH
12394: LD_STRING DH-Stim-4
12396: PPUSH
12397: CALL_OW 88
// drugsResearched := true ;
12401: LD_ADDR_EXP 11
12405: PUSH
12406: LD_INT 1
12408: ST_TO_ADDR
// end ;
12409: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
12410: LD_EXP 11
12414: IFFALSE 12726
12416: GO 12418
12418: DISABLE
12419: LD_INT 0
12421: PPUSH
12422: PPUSH
12423: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12424: LD_ADDR_VAR 0 2
12428: PUSH
12429: LD_EXP 21
12433: PUSH
12434: LD_EXP 22
12438: PUSH
12439: LD_EXP 30
12443: PUSH
12444: LD_EXP 28
12448: PUSH
12449: LD_EXP 26
12453: PUSH
12454: LD_EXP 27
12458: PUSH
12459: LD_EXP 32
12463: PUSH
12464: LD_EXP 25
12468: PUSH
12469: LD_EXP 23
12473: PUSH
12474: LD_EXP 24
12478: PUSH
12479: LD_EXP 33
12483: PUSH
12484: EMPTY
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12497: LD_ADDR_VAR 0 3
12501: PUSH
12502: LD_STRING H
12504: PUSH
12505: LD_STRING G
12507: PUSH
12508: LD_STRING O
12510: PUSH
12511: LD_STRING Mar
12513: PUSH
12514: LD_STRING K
12516: PUSH
12517: LD_STRING S
12519: PUSH
12520: LD_STRING Ks
12522: PUSH
12523: LD_STRING Kam
12525: PUSH
12526: LD_STRING M
12528: PUSH
12529: LD_STRING I
12531: PUSH
12532: LD_STRING A
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12548: LD_INT 35
12550: PPUSH
12551: CALL_OW 67
// for i := tmp downto 1 do
12555: LD_ADDR_VAR 0 1
12559: PUSH
12560: DOUBLE
12561: LD_VAR 0 2
12565: INC
12566: ST_TO_ADDR
12567: LD_INT 1
12569: PUSH
12570: FOR_DOWNTO
12571: IFFALSE 12717
// if GetLives ( tmp [ i ] ) < 250 then
12573: LD_VAR 0 2
12577: PUSH
12578: LD_VAR 0 1
12582: ARRAY
12583: PPUSH
12584: CALL_OW 256
12588: PUSH
12589: LD_INT 250
12591: LESS
12592: IFFALSE 12715
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
12594: LD_ADDR_EXP 19
12598: PUSH
12599: LD_EXP 19
12603: PUSH
12604: LD_INT 1
12606: PLUS
12607: ST_TO_ADDR
// DialogueOn ;
12608: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
12612: LD_VAR 0 2
12616: PUSH
12617: LD_VAR 0 1
12621: ARRAY
12622: PPUSH
12623: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
12627: LD_VAR 0 2
12631: PUSH
12632: LD_VAR 0 1
12636: ARRAY
12637: PPUSH
12638: LD_STRING D
12640: PUSH
12641: LD_VAR 0 3
12645: PUSH
12646: LD_VAR 0 1
12650: ARRAY
12651: STR
12652: PUSH
12653: LD_STRING -Stim-a-1
12655: STR
12656: PPUSH
12657: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
12661: LD_ADDR_VAR 0 2
12665: PUSH
12666: LD_VAR 0 2
12670: PPUSH
12671: LD_VAR 0 1
12675: PPUSH
12676: CALL_OW 3
12680: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12681: LD_ADDR_VAR 0 3
12685: PUSH
12686: LD_VAR 0 3
12690: PPUSH
12691: LD_VAR 0 1
12695: PPUSH
12696: CALL_OW 3
12700: ST_TO_ADDR
// drugsTested := true ;
12701: LD_ADDR_EXP 6
12705: PUSH
12706: LD_INT 1
12708: ST_TO_ADDR
// DialogueOff ;
12709: CALL_OW 7
// break ;
12713: GO 12717
// end ;
12715: GO 12570
12717: POP
12718: POP
// until not tmp ;
12719: LD_VAR 0 2
12723: NOT
12724: IFFALSE 12548
// end ;
12726: PPOPN 3
12728: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
12729: LD_INT 22
12731: PUSH
12732: LD_INT 2
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PUSH
12739: LD_INT 34
12741: PUSH
12742: LD_INT 31
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PPUSH
12753: CALL_OW 69
12757: IFFALSE 12789
12759: PUSH
12760: LD_INT 22
12762: PUSH
12763: LD_INT 2
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: PUSH
12770: LD_INT 33
12772: PUSH
12773: LD_INT 2
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: PPUSH
12784: CALL_OW 69
12788: AND
12789: IFFALSE 12802
12791: GO 12793
12793: DISABLE
// remoteControlConstructed := true ;
12794: LD_ADDR_EXP 12
12798: PUSH
12799: LD_INT 1
12801: ST_TO_ADDR
12802: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
12803: LD_EXP 12
12807: IFFALSE 13109
12809: GO 12811
12811: DISABLE
12812: LD_INT 0
12814: PPUSH
12815: PPUSH
12816: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12817: LD_ADDR_VAR 0 2
12821: PUSH
12822: LD_EXP 21
12826: PUSH
12827: LD_EXP 22
12831: PUSH
12832: LD_EXP 30
12836: PUSH
12837: LD_EXP 28
12841: PUSH
12842: LD_EXP 26
12846: PUSH
12847: LD_EXP 27
12851: PUSH
12852: LD_EXP 32
12856: PUSH
12857: LD_EXP 25
12861: PUSH
12862: LD_EXP 23
12866: PUSH
12867: LD_EXP 24
12871: PUSH
12872: LD_EXP 33
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12890: LD_ADDR_VAR 0 3
12894: PUSH
12895: LD_STRING H
12897: PUSH
12898: LD_STRING G
12900: PUSH
12901: LD_STRING O
12903: PUSH
12904: LD_STRING Mar
12906: PUSH
12907: LD_STRING K
12909: PUSH
12910: LD_STRING S
12912: PUSH
12913: LD_STRING Ks
12915: PUSH
12916: LD_STRING Kam
12918: PUSH
12919: LD_STRING M
12921: PUSH
12922: LD_STRING I
12924: PUSH
12925: LD_STRING A
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12941: LD_INT 35
12943: PPUSH
12944: CALL_OW 67
// for i := tmp downto 1 do
12948: LD_ADDR_VAR 0 1
12952: PUSH
12953: DOUBLE
12954: LD_VAR 0 2
12958: INC
12959: ST_TO_ADDR
12960: LD_INT 1
12962: PUSH
12963: FOR_DOWNTO
12964: IFFALSE 13100
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
12966: LD_VAR 0 2
12970: PUSH
12971: LD_VAR 0 1
12975: ARRAY
12976: PPUSH
12977: CALL_OW 257
12981: PUSH
12982: LD_INT 3
12984: EQUAL
12985: IFFALSE 13004
12987: PUSH
12988: LD_VAR 0 2
12992: PUSH
12993: LD_VAR 0 1
12997: ARRAY
12998: PPUSH
12999: CALL_OW 432
13003: AND
13004: IFFALSE 13098
// begin DialogueOn ;
13006: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
13010: LD_VAR 0 2
13014: PUSH
13015: LD_VAR 0 1
13019: ARRAY
13020: PPUSH
13021: LD_STRING D
13023: PUSH
13024: LD_VAR 0 3
13028: PUSH
13029: LD_VAR 0 1
13033: ARRAY
13034: STR
13035: PUSH
13036: LD_STRING -RC-a-1
13038: STR
13039: PPUSH
13040: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
13044: LD_ADDR_VAR 0 2
13048: PUSH
13049: LD_VAR 0 2
13053: PPUSH
13054: LD_VAR 0 1
13058: PPUSH
13059: CALL_OW 3
13063: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
13064: LD_ADDR_VAR 0 3
13068: PUSH
13069: LD_VAR 0 3
13073: PPUSH
13074: LD_VAR 0 1
13078: PPUSH
13079: CALL_OW 3
13083: ST_TO_ADDR
// DialogueOff ;
13084: CALL_OW 7
// remoteControlTested := true ;
13088: LD_ADDR_EXP 7
13092: PUSH
13093: LD_INT 1
13095: ST_TO_ADDR
// break ;
13096: GO 13100
// end ;
13098: GO 12963
13100: POP
13101: POP
// until not tmp ;
13102: LD_VAR 0 2
13106: NOT
13107: IFFALSE 12941
// end ;
13109: PPOPN 3
13111: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
13112: LD_EXP 7
13116: IFFALSE 13129
13118: PUSH
13119: LD_EXP 28
13123: PPUSH
13124: CALL_OW 302
13128: AND
13129: IFFALSE 13158
13131: GO 13133
13133: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
13134: LD_EXP 28
13138: PPUSH
13139: LD_STRING DMar-RC-a-2
13141: PPUSH
13142: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
13146: LD_EXP 28
13150: PPUSH
13151: LD_STRING DMar-RC-a-3
13153: PPUSH
13154: CALL_OW 88
// end ;
13158: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
13159: LD_EXP 14
13163: IFFALSE 13185
13165: PUSH
13166: LD_EXP 21
13170: PPUSH
13171: LD_EXP 33
13175: PPUSH
13176: CALL_OW 296
13180: PUSH
13181: LD_INT 8
13183: LESS
13184: AND
13185: IFFALSE 13197
13187: PUSH
13188: LD_INT 2
13190: PPUSH
13191: CALL_OW 463
13195: NOT
13196: AND
13197: IFFALSE 13210
13199: PUSH
13200: LD_EXP 33
13204: PPUSH
13205: CALL_OW 302
13209: AND
13210: IFFALSE 13223
13212: PUSH
13213: LD_EXP 21
13217: PPUSH
13218: CALL_OW 302
13222: AND
13223: IFFALSE 13401
13225: GO 13227
13227: DISABLE
// begin if not IsInUnit ( Aviradze ) then
13228: LD_EXP 33
13232: PPUSH
13233: CALL_OW 310
13237: NOT
13238: IFFALSE 13254
// ComTurnUnit ( Aviradze , Heike ) ;
13240: LD_EXP 33
13244: PPUSH
13245: LD_EXP 21
13249: PPUSH
13250: CALL_OW 119
// if not IsInUnit ( Heike ) then
13254: LD_EXP 21
13258: PPUSH
13259: CALL_OW 310
13263: NOT
13264: IFFALSE 13280
// ComTurnUnit ( Heike , Aviradze ) ;
13266: LD_EXP 21
13270: PPUSH
13271: LD_EXP 33
13275: PPUSH
13276: CALL_OW 119
// wait ( 0 0$1 ) ;
13280: LD_INT 35
13282: PPUSH
13283: CALL_OW 67
// DialogueOn ;
13287: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
13291: LD_EXP 33
13295: PPUSH
13296: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
13300: LD_EXP 21
13304: PPUSH
13305: LD_STRING DH-Beria-1
13307: PPUSH
13308: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
13312: LD_EXP 33
13316: PPUSH
13317: LD_STRING DA-Beria-2
13319: PPUSH
13320: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
13324: LD_EXP 21
13328: PPUSH
13329: LD_STRING DH-Beria-3
13331: PPUSH
13332: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
13336: LD_EXP 33
13340: PPUSH
13341: LD_STRING DA-Beria-4
13343: PPUSH
13344: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
13348: LD_EXP 33
13352: PPUSH
13353: LD_STRING DA-Beria-5
13355: PPUSH
13356: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
13360: LD_EXP 33
13364: PPUSH
13365: LD_STRING DA-Beria-6
13367: PPUSH
13368: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
13372: LD_EXP 21
13376: PPUSH
13377: LD_STRING DA-Beria-7
13379: PPUSH
13380: CALL_OW 88
// DialogueOff ;
13384: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
13388: LD_INT 52
13390: PPUSH
13391: LD_INT 2
13393: PPUSH
13394: LD_INT 1
13396: PPUSH
13397: CALL_OW 322
// end ;
13401: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
13402: LD_EXP 26
13406: PPUSH
13407: CALL_OW 300
13411: IFFALSE 13428
13413: PUSH
13414: LD_EXP 26
13418: PPUSH
13419: CALL_OW 256
13423: PUSH
13424: LD_INT 10
13426: LESS
13427: AND
13428: IFFALSE 13465
13430: GO 13432
13432: DISABLE
// begin DialogueOn ;
13433: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
13437: LD_EXP 26
13441: PPUSH
13442: LD_STRING DK-Kdeath-1
13444: PPUSH
13445: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
13449: LD_EXP 21
13453: PPUSH
13454: LD_STRING DH-Kdeath-2
13456: PPUSH
13457: CALL_OW 88
// DialogueOff ;
13461: CALL_OW 7
// end ;
13465: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
13466: LD_INT 2
13468: PPUSH
13469: LD_EXP 39
13473: PPUSH
13474: CALL 1316 0 2
13478: IFFALSE 13495
13480: GO 13482
13482: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
13483: LD_EXP 21
13487: PPUSH
13488: LD_STRING DH-Obj-1
13490: PPUSH
13491: CALL_OW 88
13495: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
13496: LD_INT 2
13498: PPUSH
13499: LD_EXP 40
13503: PPUSH
13504: CALL 1316 0 2
13508: IFFALSE 13525
13510: GO 13512
13512: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
13513: LD_EXP 21
13517: PPUSH
13518: LD_STRING DH-Obj-a-1
13520: PPUSH
13521: CALL_OW 88
13525: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 11 11$00 , 10 10$30 , 10 10$00 , 9 9$30 ] [ Difficulty ] do
13526: LD_EXP 10
13530: IFTRUE 13563
13532: PUSH
13533: LD_OWVAR 1
13537: PUSH
13538: LD_INT 23100
13540: PUSH
13541: LD_INT 22050
13543: PUSH
13544: LD_INT 21000
13546: PUSH
13547: LD_INT 19950
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: PUSH
13556: LD_OWVAR 67
13560: ARRAY
13561: GREATEREQUAL
13562: OR
13563: IFFALSE 13589
13565: GO 13567
13567: DISABLE
// begin if eastBaseCaptured then
13568: LD_EXP 10
13572: IFFALSE 13581
// wait ( 2 2$00 ) ;
13574: LD_INT 4200
13576: PPUSH
13577: CALL_OW 67
// convoyStarted := true ;
13581: LD_ADDR_EXP 17
13585: PUSH
13586: LD_INT 1
13588: ST_TO_ADDR
// end ;
13589: END
// every 0 0$1 trigger convoyStarted do
13590: LD_EXP 17
13594: IFFALSE 13685
13596: GO 13598
13598: DISABLE
// begin DialogueOn ;
13599: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
13603: LD_EXP 29
13607: PPUSH
13608: LD_STRING DShar-Convoy-1
13610: PPUSH
13611: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
13615: LD_EXP 21
13619: PPUSH
13620: LD_STRING DH-Convoy-2
13622: PPUSH
13623: CALL_OW 88
// DialogueOff ;
13627: CALL_OW 7
// wait ( 0 0$10 ) ;
13631: LD_INT 350
13633: PPUSH
13634: CALL_OW 67
// PrepareConvoy ;
13638: CALL 4628 0 0
// repeat wait ( rand ( 2 2$30 , 4 4$30 ) ) ;
13642: LD_INT 5250
13644: PPUSH
13645: LD_INT 9450
13647: PPUSH
13648: CALL_OW 12
13652: PPUSH
13653: CALL_OW 67
// PrepareConvoy ;
13657: CALL 4628 0 0
// convoyCounter := convoyCounter - 1 ;
13661: LD_ADDR_EXP 16
13665: PUSH
13666: LD_EXP 16
13670: PUSH
13671: LD_INT 1
13673: MINUS
13674: ST_TO_ADDR
// until convoyCounter <= 0 ;
13675: LD_EXP 16
13679: PUSH
13680: LD_INT 0
13682: LESSEQUAL
13683: IFFALSE 13642
// end ;
13685: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
13686: LD_EXP 15
13690: PUSH
13691: LD_INT 10
13693: GREATEREQUAL
13694: IFFALSE 13711
13696: GO 13698
13698: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
13699: LD_EXP 31
13703: PPUSH
13704: LD_STRING DOm-Fail-1
13706: PPUSH
13707: CALL_OW 94
13711: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
13712: LD_EXP 39
13716: NOT
13717: IFFALSE 13726
13719: PUSH
13720: LD_EXP 40
13724: NOT
13725: AND
13726: IFFALSE 13738
13728: GO 13730
13730: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
13731: LD_STRING RaiderDone
13733: PPUSH
13734: CALL_OW 337
13738: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
13739: LD_INT 22
13741: PUSH
13742: LD_INT 2
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: PUSH
13749: LD_INT 33
13751: PUSH
13752: LD_INT 2
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PPUSH
13763: CALL_OW 69
13767: PUSH
13768: LD_INT 3
13770: GREATEREQUAL
13771: IFFALSE 13807
13773: PUSH
13774: LD_INT 22
13776: PUSH
13777: LD_INT 2
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PUSH
13784: LD_INT 34
13786: PUSH
13787: LD_INT 31
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PPUSH
13798: CALL_OW 69
13802: PUSH
13803: LD_INT 2
13805: GREATEREQUAL
13806: AND
13807: IFFALSE 13819
13809: GO 13811
13811: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
13812: LD_STRING RemoteControlDone
13814: PPUSH
13815: CALL_OW 337
13819: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var i , tmp , tmp2 , vehs ;
13820: LD_EXP 16
13824: PUSH
13825: LD_INT 1
13827: LESS
13828: IFFALSE 13862
13830: PUSH
13831: LD_EXP 41
13835: PPUSH
13836: LD_INT 52
13838: PUSH
13839: EMPTY
13840: LIST
13841: PUSH
13842: LD_INT 21
13844: PUSH
13845: LD_INT 1
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: PPUSH
13856: CALL_OW 72
13860: NOT
13861: AND
13862: IFTRUE 13874
13864: PUSH
13865: LD_OWVAR 1
13869: PUSH
13870: LD_INT 126000
13872: GREATEREQUAL
13873: OR
13874: IFFALSE 15072
13876: GO 13878
13878: DISABLE
13879: LD_INT 0
13881: PPUSH
13882: PPUSH
13883: PPUSH
13884: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
13885: LD_STRING ReinforcementsDone
13887: PPUSH
13888: CALL_OW 337
// music_class := music_victory ;
13892: LD_ADDR_OWVAR 72
13896: PUSH
13897: LD_INT 4
13899: ST_TO_ADDR
// if tick <= 45 45$00 then
13900: LD_OWVAR 1
13904: PUSH
13905: LD_INT 94500
13907: LESSEQUAL
13908: IFFALSE 13917
// SetAchievement ( ACH_HSPEED_5 ) ;
13910: LD_STRING ACH_HSPEED_5
13912: PPUSH
13913: CALL_OW 543
// InGameOn ;
13917: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
13921: LD_EXP 21
13925: PPUSH
13926: LD_STRING DH-end-1
13928: PPUSH
13929: CALL_OW 88
// wait ( 0 0$2 ) ;
13933: LD_INT 70
13935: PPUSH
13936: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
13940: LD_EXP 29
13944: PPUSH
13945: LD_STRING DShar-end-2
13947: PPUSH
13948: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
13952: LD_EXP 39
13956: NOT
13957: IFFALSE 13966
13959: PUSH
13960: LD_EXP 40
13964: NOT
13965: AND
13966: IFFALSE 13982
// begin Say ( Heike , DH-end-3 ) ;
13968: LD_EXP 21
13972: PPUSH
13973: LD_STRING DH-end-3
13975: PPUSH
13976: CALL_OW 88
// end else
13980: GO 14086
// begin Say ( Heike , DH-end-a-3 ) ;
13982: LD_EXP 21
13986: PPUSH
13987: LD_STRING DH-end-a-3
13989: PPUSH
13990: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
13994: LD_EXP 29
13998: PPUSH
13999: LD_STRING DShar-end-a-4
14001: PPUSH
14002: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
14006: LD_EXP 21
14010: PPUSH
14011: LD_STRING DH-end-a-5
14013: PPUSH
14014: CALL_OW 88
// InGameOff ;
14018: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
14022: LD_INT 35
14024: PPUSH
14025: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_type , unit_human ] ] ) = 0 ;
14029: LD_INT 22
14031: PUSH
14032: LD_INT 3
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: LD_INT 50
14041: PUSH
14042: EMPTY
14043: LIST
14044: PUSH
14045: LD_INT 21
14047: PUSH
14048: LD_INT 1
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: LIST
14059: PPUSH
14060: CALL_OW 69
14064: PUSH
14065: LD_INT 0
14067: EQUAL
14068: IFFALSE 14022
// InGameOn ;
14070: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
14074: LD_EXP 21
14078: PPUSH
14079: LD_STRING DH-end-a-6
14081: PPUSH
14082: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
14086: LD_EXP 29
14090: PPUSH
14091: LD_STRING DShar-end-3
14093: PPUSH
14094: CALL_OW 94
// if not flamethrowerBuilt then
14098: LD_EXP 20
14102: NOT
14103: IFFALSE 14112
// SetAchievement ( ACH_FIRE ) ;
14105: LD_STRING ACH_FIRE
14107: PPUSH
14108: CALL_OW 543
// if drugsTested then
14112: LD_EXP 6
14116: IFFALSE 14130
// AddMedal ( med1 , 1 ) else
14118: LD_STRING med1
14120: PPUSH
14121: LD_INT 1
14123: PPUSH
14124: CALL_OW 101
14128: GO 14170
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
14130: LD_INT 5
14132: PPUSH
14133: LD_INT 2
14135: PPUSH
14136: CALL_OW 321
14140: PUSH
14141: LD_INT 2
14143: EQUAL
14144: IFFALSE 14159
// AddMedal ( med1 , - 1 ) else
14146: LD_STRING med1
14148: PPUSH
14149: LD_INT 1
14151: NEG
14152: PPUSH
14153: CALL_OW 101
14157: GO 14170
// AddMedal ( med1 , - 2 ) ;
14159: LD_STRING med1
14161: PPUSH
14162: LD_INT 2
14164: NEG
14165: PPUSH
14166: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
14170: LD_INT 22
14172: PUSH
14173: LD_INT 2
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: PUSH
14180: LD_INT 33
14182: PUSH
14183: LD_INT 2
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: PPUSH
14194: CALL_OW 69
14198: PUSH
14199: LD_INT 3
14201: GREATEREQUAL
14202: IFFALSE 14238
14204: PUSH
14205: LD_INT 22
14207: PUSH
14208: LD_INT 2
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: LD_INT 34
14217: PUSH
14218: LD_INT 31
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: PPUSH
14229: CALL_OW 69
14233: PUSH
14234: LD_INT 1
14236: GREATEREQUAL
14237: AND
14238: IFFALSE 14252
// AddMedal ( med2 , 1 ) else
14240: LD_STRING med2
14242: PPUSH
14243: LD_INT 1
14245: PPUSH
14246: CALL_OW 101
14250: GO 14263
// AddMedal ( med2 , - 1 ) ;
14252: LD_STRING med2
14254: PPUSH
14255: LD_INT 1
14257: NEG
14258: PPUSH
14259: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
14263: LD_EXP 15
14267: PUSH
14268: LD_INT 10
14270: PUSH
14271: LD_INT 8
14273: PUSH
14274: LD_INT 6
14276: PUSH
14277: LD_INT 5
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: LIST
14284: LIST
14285: PUSH
14286: LD_OWVAR 67
14290: ARRAY
14291: LESS
14292: IFFALSE 14306
// AddMedal ( med3 , 1 ) else
14294: LD_STRING med3
14296: PPUSH
14297: LD_INT 1
14299: PPUSH
14300: CALL_OW 101
14304: GO 14317
// AddMedal ( med3 , - 1 ) ;
14306: LD_STRING med3
14308: PPUSH
14309: LD_INT 1
14311: NEG
14312: PPUSH
14313: CALL_OW 101
// GiveMedals ( MAIN ) ;
14317: LD_STRING MAIN
14319: PPUSH
14320: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
14324: LD_INT 22
14326: PUSH
14327: LD_INT 2
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: PUSH
14334: LD_INT 23
14336: PUSH
14337: LD_INT 2
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PUSH
14344: LD_INT 21
14346: PUSH
14347: LD_INT 1
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: LIST
14358: PPUSH
14359: CALL_OW 69
14363: PPUSH
14364: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
14368: LD_EXP 15
14372: PPUSH
14373: LD_STRING 05_ConvoySavedCounter
14375: PPUSH
14376: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
14380: LD_EXP 13
14384: PPUSH
14385: LD_STRING 05_Radar
14387: PPUSH
14388: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
14392: LD_EXP 6
14396: PPUSH
14397: LD_STRING 05_DrugsTested
14399: PPUSH
14400: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
14404: LD_INT 22
14406: PUSH
14407: LD_INT 2
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: PUSH
14414: LD_INT 33
14416: PUSH
14417: LD_INT 2
14419: PUSH
14420: EMPTY
14421: LIST
14422: LIST
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: PPUSH
14428: CALL_OW 69
14432: PUSH
14433: LD_INT 3
14435: GREATEREQUAL
14436: IFFALSE 14472
14438: PUSH
14439: LD_INT 22
14441: PUSH
14442: LD_INT 2
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: PUSH
14449: LD_INT 34
14451: PUSH
14452: LD_INT 31
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: PPUSH
14463: CALL_OW 69
14467: PUSH
14468: LD_INT 2
14470: GREATEREQUAL
14471: AND
14472: PPUSH
14473: LD_STRING 05_RemoteControl
14475: PPUSH
14476: CALL_OW 39
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
14480: LD_ADDR_VAR 0 2
14484: PUSH
14485: LD_INT 22
14487: PUSH
14488: LD_INT 2
14490: PUSH
14491: EMPTY
14492: LIST
14493: LIST
14494: PUSH
14495: LD_INT 21
14497: PUSH
14498: LD_INT 2
14500: PUSH
14501: EMPTY
14502: LIST
14503: LIST
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: PPUSH
14509: CALL_OW 69
14513: ST_TO_ADDR
// if tmp then
14514: LD_VAR 0 2
14518: IFFALSE 14637
// begin vehs := [ ] ;
14520: LD_ADDR_VAR 0 4
14524: PUSH
14525: EMPTY
14526: ST_TO_ADDR
// for i in tmp do
14527: LD_ADDR_VAR 0 1
14531: PUSH
14532: LD_VAR 0 2
14536: PUSH
14537: FOR_IN
14538: IFFALSE 14623
// vehs := Replace ( vehs , vehs + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) ] ) ;
14540: LD_ADDR_VAR 0 4
14544: PUSH
14545: LD_VAR 0 4
14549: PPUSH
14550: LD_VAR 0 4
14554: PUSH
14555: LD_INT 1
14557: PLUS
14558: PPUSH
14559: LD_VAR 0 1
14563: PPUSH
14564: CALL_OW 265
14568: PUSH
14569: LD_VAR 0 1
14573: PPUSH
14574: CALL_OW 262
14578: PUSH
14579: LD_VAR 0 1
14583: PPUSH
14584: CALL_OW 263
14588: PUSH
14589: LD_VAR 0 1
14593: PPUSH
14594: CALL_OW 264
14598: PUSH
14599: LD_VAR 0 1
14603: PPUSH
14604: CALL_OW 248
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: PPUSH
14616: CALL_OW 1
14620: ST_TO_ADDR
14621: GO 14537
14623: POP
14624: POP
// SaveVariable ( vehs , 05_Vehicles ) ;
14625: LD_VAR 0 4
14629: PPUSH
14630: LD_STRING 05_Vehicles
14632: PPUSH
14633: CALL_OW 39
// end ; tmp := FilterUnitsInArea ( saveBuildingsArea , [ f_type , unit_building ] ) ;
14637: LD_ADDR_VAR 0 2
14641: PUSH
14642: LD_INT 25
14644: PPUSH
14645: LD_INT 21
14647: PUSH
14648: LD_INT 3
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: PPUSH
14655: CALL_OW 70
14659: ST_TO_ADDR
// tmp2 := [ ] ;
14660: LD_ADDR_VAR 0 3
14664: PUSH
14665: EMPTY
14666: ST_TO_ADDR
// if tmp then
14667: LD_VAR 0 2
14671: IFFALSE 14824
// begin for i in tmp do
14673: LD_ADDR_VAR 0 1
14677: PUSH
14678: LD_VAR 0 2
14682: PUSH
14683: FOR_IN
14684: IFFALSE 14810
// tmp2 := Join ( tmp2 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetNation ( i ) , GetBLevel ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ) ;
14686: LD_ADDR_VAR 0 3
14690: PUSH
14691: LD_VAR 0 3
14695: PPUSH
14696: LD_VAR 0 1
14700: PPUSH
14701: CALL_OW 266
14705: PUSH
14706: LD_VAR 0 1
14710: PPUSH
14711: CALL_OW 250
14715: PUSH
14716: LD_VAR 0 1
14720: PPUSH
14721: CALL_OW 251
14725: PUSH
14726: LD_VAR 0 1
14730: PPUSH
14731: CALL_OW 254
14735: PUSH
14736: LD_VAR 0 1
14740: PPUSH
14741: CALL_OW 248
14745: PUSH
14746: LD_VAR 0 1
14750: PPUSH
14751: CALL_OW 267
14755: PUSH
14756: LD_VAR 0 1
14760: PPUSH
14761: LD_INT 1
14763: PPUSH
14764: CALL_OW 268
14768: PUSH
14769: LD_VAR 0 1
14773: PPUSH
14774: LD_INT 2
14776: PPUSH
14777: CALL_OW 268
14781: PUSH
14782: LD_VAR 0 1
14786: PPUSH
14787: CALL_OW 269
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: PPUSH
14803: CALL 75563 0 2
14807: ST_TO_ADDR
14808: GO 14683
14810: POP
14811: POP
// SaveVariable ( tmp2 , 05_Buildings ) ;
14812: LD_VAR 0 3
14816: PPUSH
14817: LD_STRING 05_Buildings
14819: PPUSH
14820: CALL_OW 39
// end ; SaveCharacters ( Heike , 05_Heike ) ;
14824: LD_EXP 21
14828: PPUSH
14829: LD_STRING 05_Heike
14831: PPUSH
14832: CALL_OW 38
// if Aviradze then
14836: LD_EXP 33
14840: IFFALSE 14854
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
14842: LD_EXP 33
14846: PPUSH
14847: LD_STRING 05_Aviradze
14849: PPUSH
14850: CALL_OW 38
// if Ibrahim then
14854: LD_EXP 24
14858: IFFALSE 14872
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
14860: LD_EXP 24
14864: PPUSH
14865: LD_STRING 05_Ibrahim
14867: PPUSH
14868: CALL_OW 38
// if Kamil then
14872: LD_EXP 25
14876: IFFALSE 14890
// SaveCharacters ( Kamil , 05_Kamil ) ;
14878: LD_EXP 25
14882: PPUSH
14883: LD_STRING 05_Kamil
14885: PPUSH
14886: CALL_OW 38
// if Sophia then
14890: LD_EXP 27
14894: IFFALSE 14908
// SaveCharacters ( Sophia , 05_Sophia ) ;
14896: LD_EXP 27
14900: PPUSH
14901: LD_STRING 05_Sophia
14903: PPUSH
14904: CALL_OW 38
// if Kaia then
14908: LD_EXP 26
14912: IFFALSE 14926
// SaveCharacters ( Kaia , 05_Kaia ) ;
14914: LD_EXP 26
14918: PPUSH
14919: LD_STRING 05_Kaia
14921: PPUSH
14922: CALL_OW 38
// if Givi then
14926: LD_EXP 22
14930: IFFALSE 14944
// SaveCharacters ( Givi , 05_Givi ) ;
14932: LD_EXP 22
14936: PPUSH
14937: LD_STRING 05_Givi
14939: PPUSH
14940: CALL_OW 38
// if Mike then
14944: LD_EXP 23
14948: IFFALSE 14962
// SaveCharacters ( Mike , 05_Mike ) ;
14950: LD_EXP 23
14954: PPUSH
14955: LD_STRING 05_Mike
14957: PPUSH
14958: CALL_OW 38
// if Markov then
14962: LD_EXP 28
14966: IFFALSE 14980
// SaveCharacters ( Markov , 05_Markov ) ;
14968: LD_EXP 28
14972: PPUSH
14973: LD_STRING 05_Markov
14975: PPUSH
14976: CALL_OW 38
// if Kurt then
14980: LD_EXP 32
14984: IFFALSE 14998
// SaveCharacters ( Kurt , 05_Kurt ) ;
14986: LD_EXP 32
14990: PPUSH
14991: LD_STRING 05_Kurt
14993: PPUSH
14994: CALL_OW 38
// if heikeSecondSquad then
14998: LD_EXP 34
15002: IFFALSE 15016
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
15004: LD_EXP 34
15008: PPUSH
15009: LD_STRING 05_others
15011: PPUSH
15012: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
15016: LD_ADDR_VAR 0 2
15020: PUSH
15021: LD_INT 22
15023: PUSH
15024: LD_INT 2
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: PUSH
15031: LD_INT 23
15033: PUSH
15034: LD_INT 0
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: PPUSH
15045: CALL_OW 69
15049: ST_TO_ADDR
// if tmp then
15050: LD_VAR 0 2
15054: IFFALSE 15068
// SaveCharacters ( tmp , 05_apes ) ;
15056: LD_VAR 0 2
15060: PPUSH
15061: LD_STRING 05_apes
15063: PPUSH
15064: CALL_OW 38
// YouWin ;
15068: CALL_OW 103
// end ; end_of_file
15072: PPOPN 4
15074: END
// every 0 0$35 + 0 0$20 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
15075: LD_EXP 9
15079: IFFALSE 15097
15081: PUSH
15082: LD_INT 13
15084: PPUSH
15085: LD_INT 1
15087: PPUSH
15088: CALL_OW 287
15092: PUSH
15093: LD_INT 25
15095: LESS
15096: AND
15097: IFFALSE 15124
15099: GO 15101
15101: DISABLE
// begin enable ;
15102: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
15103: LD_INT 1
15105: PPUSH
15106: LD_INT 5
15108: PPUSH
15109: CALL_OW 12
15113: PPUSH
15114: LD_INT 13
15116: PPUSH
15117: LD_INT 1
15119: PPUSH
15120: CALL_OW 55
// end ; end_of_file
15124: END
// export function SOS_UnitDestroyed ( un ) ; begin
15125: LD_INT 0
15127: PPUSH
// ComRadiation ( un ) ;
15128: LD_VAR 0 1
15132: PPUSH
15133: CALL 16214 0 1
// end ;
15137: LD_VAR 0 2
15141: RET
// export function SOS_UnitKamikazed ( un ) ; begin
15142: LD_INT 0
15144: PPUSH
// ComRadiation ( un ) ;
15145: LD_VAR 0 1
15149: PPUSH
15150: CALL 16214 0 1
// end ;
15154: LD_VAR 0 2
15158: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15159: LD_INT 0
15161: PPUSH
// end ;
15162: LD_VAR 0 4
15166: RET
// export function SOS_Command ( cmd ) ; begin
15167: LD_INT 0
15169: PPUSH
// end ;
15170: LD_VAR 0 2
15174: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
15175: LD_INT 0
15177: PPUSH
// end ;
15178: LD_VAR 0 6
15182: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
15183: LD_INT 0
15185: PPUSH
15186: PPUSH
15187: PPUSH
15188: PPUSH
// if not vehicle or not factory then
15189: LD_VAR 0 1
15193: NOT
15194: IFTRUE 15203
15196: PUSH
15197: LD_VAR 0 2
15201: NOT
15202: OR
15203: IFFALSE 15207
// exit ;
15205: GO 15789
// if not factoryWaypoints then
15207: LD_EXP 113
15211: NOT
15212: IFFALSE 15216
// exit ;
15214: GO 15789
// for i := 1 to Count ( factoryWaypoints ) do
15216: LD_ADDR_VAR 0 4
15220: PUSH
15221: DOUBLE
15222: LD_INT 1
15224: DEC
15225: ST_TO_ADDR
15226: LD_EXP 113
15230: PPUSH
15231: CALL 39631 0 1
15235: PUSH
15236: FOR_TO
15237: IFFALSE 15787
// if factoryWaypoints [ i ] [ 2 ] = factory then
15239: LD_EXP 113
15243: PUSH
15244: LD_VAR 0 4
15248: ARRAY
15249: PUSH
15250: LD_INT 2
15252: ARRAY
15253: PUSH
15254: LD_VAR 0 2
15258: EQUAL
15259: IFFALSE 15785
// begin if GetControl ( vehicle ) = control_manual then
15261: LD_VAR 0 1
15265: PPUSH
15266: CALL_OW 263
15270: PUSH
15271: LD_INT 1
15273: EQUAL
15274: IFFALSE 15638
// begin driver := IsDrivenBy ( vehicle ) ;
15276: LD_ADDR_VAR 0 5
15280: PUSH
15281: LD_VAR 0 1
15285: PPUSH
15286: CALL_OW 311
15290: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
15291: LD_VAR 0 5
15295: PUSH
15296: LD_EXP 114
15300: IN
15301: IFTRUE 15315
15303: PUSH
15304: LD_VAR 0 1
15308: PUSH
15309: LD_EXP 114
15313: IN
15314: OR
15315: IFFALSE 15321
// exit ;
15317: POP
15318: POP
15319: GO 15789
// if not HasTask ( driver ) then
15321: LD_VAR 0 5
15325: PPUSH
15326: CALL_OW 314
15330: NOT
15331: IFFALSE 15636
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
15333: LD_ADDR_EXP 114
15337: PUSH
15338: LD_EXP 114
15342: PPUSH
15343: LD_VAR 0 5
15347: PPUSH
15348: CALL 75563 0 2
15352: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
15353: LD_ADDR_EXP 114
15357: PUSH
15358: LD_EXP 114
15362: PPUSH
15363: LD_VAR 0 1
15367: PPUSH
15368: CALL 75563 0 2
15372: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
15373: LD_ADDR_VAR 0 6
15377: PUSH
15378: LD_EXP 113
15382: PUSH
15383: LD_VAR 0 4
15387: ARRAY
15388: PUSH
15389: LD_INT 3
15391: ARRAY
15392: PPUSH
15393: LD_EXP 113
15397: PUSH
15398: LD_VAR 0 4
15402: ARRAY
15403: PUSH
15404: LD_INT 4
15406: ARRAY
15407: PPUSH
15408: CALL_OW 428
15412: ST_TO_ADDR
// if hex then
15413: LD_VAR 0 6
15417: IFFALSE 15435
// ComMoveUnit ( driver , hex ) else
15419: LD_VAR 0 5
15423: PPUSH
15424: LD_VAR 0 6
15428: PPUSH
15429: CALL_OW 112
15433: GO 15519
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
15435: LD_VAR 0 1
15439: PPUSH
15440: LD_EXP 113
15444: PUSH
15445: LD_VAR 0 4
15449: ARRAY
15450: PUSH
15451: LD_INT 3
15453: ARRAY
15454: PPUSH
15455: LD_EXP 113
15459: PUSH
15460: LD_VAR 0 4
15464: ARRAY
15465: PUSH
15466: LD_INT 4
15468: ARRAY
15469: PPUSH
15470: CALL_OW 297
15474: PUSH
15475: LD_INT 0
15477: GREATER
15478: IFFALSE 15519
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
15480: LD_VAR 0 5
15484: PPUSH
15485: LD_EXP 113
15489: PUSH
15490: LD_VAR 0 4
15494: ARRAY
15495: PUSH
15496: LD_INT 3
15498: ARRAY
15499: PPUSH
15500: LD_EXP 113
15504: PUSH
15505: LD_VAR 0 4
15509: ARRAY
15510: PUSH
15511: LD_INT 4
15513: ARRAY
15514: PPUSH
15515: CALL_OW 111
// AddComExitVehicle ( driver ) ;
15519: LD_VAR 0 5
15523: PPUSH
15524: CALL_OW 181
// if Multiplayer then
15528: LD_OWVAR 4
15532: IFFALSE 15581
// begin repeat wait ( 10 ) ;
15534: LD_INT 10
15536: PPUSH
15537: CALL_OW 67
// until not IsInUnit ( driver ) ;
15541: LD_VAR 0 5
15545: PPUSH
15546: CALL_OW 310
15550: NOT
15551: IFFALSE 15534
// if not HasTask ( driver ) then
15553: LD_VAR 0 5
15557: PPUSH
15558: CALL_OW 314
15562: NOT
15563: IFFALSE 15579
// ComEnterUnit ( driver , factory ) ;
15565: LD_VAR 0 5
15569: PPUSH
15570: LD_VAR 0 2
15574: PPUSH
15575: CALL_OW 120
// end else
15579: GO 15595
// AddComEnterUnit ( driver , factory ) ;
15581: LD_VAR 0 5
15585: PPUSH
15586: LD_VAR 0 2
15590: PPUSH
15591: CALL_OW 180
// wait ( 0 0$1 ) ;
15595: LD_INT 35
15597: PPUSH
15598: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
15602: LD_ADDR_EXP 114
15606: PUSH
15607: LD_EXP 114
15611: PUSH
15612: LD_VAR 0 5
15616: DIFF
15617: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
15618: LD_ADDR_EXP 114
15622: PUSH
15623: LD_EXP 114
15627: PUSH
15628: LD_VAR 0 1
15632: DIFF
15633: ST_TO_ADDR
// break ;
15634: GO 15787
// end ; end else
15636: GO 15785
// if GetControl ( vehicle ) = control_remote then
15638: LD_VAR 0 1
15642: PPUSH
15643: CALL_OW 263
15647: PUSH
15648: LD_INT 2
15650: EQUAL
15651: IFFALSE 15737
// begin wait ( 0 0$2 ) ;
15653: LD_INT 70
15655: PPUSH
15656: CALL_OW 67
// repeat wait ( 10 ) ;
15660: LD_INT 10
15662: PPUSH
15663: CALL_OW 67
// Connect ( vehicle ) ;
15667: LD_VAR 0 1
15671: PPUSH
15672: CALL 45875 0 1
// until IsControledBy ( vehicle ) ;
15676: LD_VAR 0 1
15680: PPUSH
15681: CALL_OW 312
15685: IFFALSE 15660
// wait ( 10 ) ;
15687: LD_INT 10
15689: PPUSH
15690: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
15694: LD_VAR 0 1
15698: PPUSH
15699: LD_EXP 113
15703: PUSH
15704: LD_VAR 0 4
15708: ARRAY
15709: PUSH
15710: LD_INT 3
15712: ARRAY
15713: PPUSH
15714: LD_EXP 113
15718: PUSH
15719: LD_VAR 0 4
15723: ARRAY
15724: PUSH
15725: LD_INT 4
15727: ARRAY
15728: PPUSH
15729: CALL_OW 111
// break ;
15733: GO 15787
// end else
15735: GO 15785
// begin wait ( 0 0$3 ) ;
15737: LD_INT 105
15739: PPUSH
15740: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
15744: LD_VAR 0 1
15748: PPUSH
15749: LD_EXP 113
15753: PUSH
15754: LD_VAR 0 4
15758: ARRAY
15759: PUSH
15760: LD_INT 3
15762: ARRAY
15763: PPUSH
15764: LD_EXP 113
15768: PUSH
15769: LD_VAR 0 4
15773: ARRAY
15774: PUSH
15775: LD_INT 4
15777: ARRAY
15778: PPUSH
15779: CALL_OW 111
// break ;
15783: GO 15787
// end ; end ;
15785: GO 15236
15787: POP
15788: POP
// end ;
15789: LD_VAR 0 3
15793: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
15794: LD_INT 0
15796: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
15797: LD_VAR 0 1
15801: PUSH
15802: LD_INT 250
15804: EQUAL
15805: IFFALSE 15822
15807: PUSH
15808: LD_VAR 0 2
15812: PPUSH
15813: CALL_OW 264
15817: PUSH
15818: LD_INT 81
15820: EQUAL
15821: AND
15822: IFFALSE 15843
// MinerPlaceMine ( unit , x , y ) ;
15824: LD_VAR 0 2
15828: PPUSH
15829: LD_VAR 0 4
15833: PPUSH
15834: LD_VAR 0 5
15838: PPUSH
15839: CALL 18975 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
15843: LD_VAR 0 1
15847: PUSH
15848: LD_INT 251
15850: EQUAL
15851: IFFALSE 15868
15853: PUSH
15854: LD_VAR 0 2
15858: PPUSH
15859: CALL_OW 264
15863: PUSH
15864: LD_INT 81
15866: EQUAL
15867: AND
15868: IFFALSE 15889
// MinerDetonateMine ( unit , x , y ) ;
15870: LD_VAR 0 2
15874: PPUSH
15875: LD_VAR 0 4
15879: PPUSH
15880: LD_VAR 0 5
15884: PPUSH
15885: CALL 19254 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
15889: LD_VAR 0 1
15893: PUSH
15894: LD_INT 252
15896: EQUAL
15897: IFFALSE 15914
15899: PUSH
15900: LD_VAR 0 2
15904: PPUSH
15905: CALL_OW 264
15909: PUSH
15910: LD_INT 81
15912: EQUAL
15913: AND
15914: IFFALSE 15935
// MinerCreateMinefield ( unit , x , y ) ;
15916: LD_VAR 0 2
15920: PPUSH
15921: LD_VAR 0 4
15925: PPUSH
15926: LD_VAR 0 5
15930: PPUSH
15931: CALL 19673 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
15935: LD_VAR 0 1
15939: PUSH
15940: LD_INT 253
15942: EQUAL
15943: IFFALSE 15960
15945: PUSH
15946: LD_VAR 0 2
15950: PPUSH
15951: CALL_OW 257
15955: PUSH
15956: LD_INT 5
15958: EQUAL
15959: AND
15960: IFFALSE 15981
// ComBinocular ( unit , x , y ) ;
15962: LD_VAR 0 2
15966: PPUSH
15967: LD_VAR 0 4
15971: PPUSH
15972: LD_VAR 0 5
15976: PPUSH
15977: CALL 20048 0 3
// if selectedUnit then
15981: LD_VAR 0 3
15985: IFFALSE 16045
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
15987: LD_VAR 0 1
15991: PUSH
15992: LD_INT 254
15994: EQUAL
15995: IFFALSE 16012
15997: PUSH
15998: LD_VAR 0 2
16002: PPUSH
16003: CALL_OW 264
16007: PUSH
16008: LD_INT 99
16010: EQUAL
16011: AND
16012: IFFALSE 16029
16014: PUSH
16015: LD_VAR 0 3
16019: PPUSH
16020: CALL_OW 263
16024: PUSH
16025: LD_INT 3
16027: EQUAL
16028: AND
16029: IFFALSE 16045
// HackDestroyVehicle ( unit , selectedUnit ) ;
16031: LD_VAR 0 2
16035: PPUSH
16036: LD_VAR 0 3
16040: PPUSH
16041: CALL 18335 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
16045: LD_VAR 0 1
16049: PUSH
16050: LD_INT 255
16052: EQUAL
16053: IFFALSE 16077
16055: PUSH
16056: LD_VAR 0 2
16060: PPUSH
16061: CALL_OW 264
16065: PUSH
16066: LD_INT 14
16068: PUSH
16069: LD_INT 53
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: IN
16076: AND
16077: IFFALSE 16095
16079: PUSH
16080: LD_VAR 0 4
16084: PPUSH
16085: LD_VAR 0 5
16089: PPUSH
16090: CALL_OW 488
16094: AND
16095: IFFALSE 16119
// CutTreeXYR ( unit , x , y , 12 ) ;
16097: LD_VAR 0 2
16101: PPUSH
16102: LD_VAR 0 4
16106: PPUSH
16107: LD_VAR 0 5
16111: PPUSH
16112: LD_INT 12
16114: PPUSH
16115: CALL 16310 0 4
// if cmd = 256 then
16119: LD_VAR 0 1
16123: PUSH
16124: LD_INT 256
16126: EQUAL
16127: IFFALSE 16148
// SetFactoryWaypoint ( unit , x , y ) ;
16129: LD_VAR 0 2
16133: PPUSH
16134: LD_VAR 0 4
16138: PPUSH
16139: LD_VAR 0 5
16143: PPUSH
16144: CALL 35952 0 3
// if cmd = 257 then
16148: LD_VAR 0 1
16152: PUSH
16153: LD_INT 257
16155: EQUAL
16156: IFFALSE 16177
// SetWarehouseGatheringPoint ( unit , x , y ) ;
16158: LD_VAR 0 2
16162: PPUSH
16163: LD_VAR 0 4
16167: PPUSH
16168: LD_VAR 0 5
16172: PPUSH
16173: CALL 36448 0 3
// if cmd = 258 then
16177: LD_VAR 0 1
16181: PUSH
16182: LD_INT 258
16184: EQUAL
16185: IFFALSE 16209
// BurnTreeXYR ( unit , x , y , 8 ) ;
16187: LD_VAR 0 2
16191: PPUSH
16192: LD_VAR 0 4
16196: PPUSH
16197: LD_VAR 0 5
16201: PPUSH
16202: LD_INT 8
16204: PPUSH
16205: CALL 16710 0 4
// end ;
16209: LD_VAR 0 6
16213: RET
// export function ComRadiation ( un ) ; var eff ; begin
16214: LD_INT 0
16216: PPUSH
16217: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
16218: LD_VAR 0 1
16222: PPUSH
16223: CALL_OW 264
16227: PUSH
16228: LD_INT 91
16230: NONEQUAL
16231: IFFALSE 16235
// exit ;
16233: GO 16305
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
16235: LD_INT 68
16237: PPUSH
16238: LD_VAR 0 1
16242: PPUSH
16243: CALL_OW 255
16247: PPUSH
16248: CALL_OW 321
16252: PUSH
16253: LD_INT 2
16255: EQUAL
16256: IFFALSE 16268
// eff := 50 else
16258: LD_ADDR_VAR 0 3
16262: PUSH
16263: LD_INT 50
16265: ST_TO_ADDR
16266: GO 16276
// eff := 25 ;
16268: LD_ADDR_VAR 0 3
16272: PUSH
16273: LD_INT 25
16275: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
16276: LD_VAR 0 1
16280: PPUSH
16281: CALL_OW 250
16285: PPUSH
16286: LD_VAR 0 1
16290: PPUSH
16291: CALL_OW 251
16295: PPUSH
16296: LD_VAR 0 3
16300: PPUSH
16301: CALL_OW 495
// end ;
16305: LD_VAR 0 2
16309: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
16310: LD_INT 0
16312: PPUSH
16313: PPUSH
16314: PPUSH
16315: PPUSH
16316: PPUSH
16317: PPUSH
16318: PPUSH
16319: PPUSH
16320: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
16321: LD_VAR 0 1
16325: PPUSH
16326: CALL_OW 302
16330: NOT
16331: IFTRUE 16350
16333: PUSH
16334: LD_VAR 0 2
16338: PPUSH
16339: LD_VAR 0 3
16343: PPUSH
16344: CALL_OW 488
16348: NOT
16349: OR
16350: IFTRUE 16359
16352: PUSH
16353: LD_VAR 0 4
16357: NOT
16358: OR
16359: IFFALSE 16363
// exit ;
16361: GO 16705
// list := [ ] ;
16363: LD_ADDR_VAR 0 13
16367: PUSH
16368: EMPTY
16369: ST_TO_ADDR
// if x - r < 0 then
16370: LD_VAR 0 2
16374: PUSH
16375: LD_VAR 0 4
16379: MINUS
16380: PUSH
16381: LD_INT 0
16383: LESS
16384: IFFALSE 16396
// min_x := 0 else
16386: LD_ADDR_VAR 0 7
16390: PUSH
16391: LD_INT 0
16393: ST_TO_ADDR
16394: GO 16412
// min_x := x - r ;
16396: LD_ADDR_VAR 0 7
16400: PUSH
16401: LD_VAR 0 2
16405: PUSH
16406: LD_VAR 0 4
16410: MINUS
16411: ST_TO_ADDR
// if y - r < 0 then
16412: LD_VAR 0 3
16416: PUSH
16417: LD_VAR 0 4
16421: MINUS
16422: PUSH
16423: LD_INT 0
16425: LESS
16426: IFFALSE 16438
// min_y := 0 else
16428: LD_ADDR_VAR 0 8
16432: PUSH
16433: LD_INT 0
16435: ST_TO_ADDR
16436: GO 16454
// min_y := y - r ;
16438: LD_ADDR_VAR 0 8
16442: PUSH
16443: LD_VAR 0 3
16447: PUSH
16448: LD_VAR 0 4
16452: MINUS
16453: ST_TO_ADDR
// max_x := x + r ;
16454: LD_ADDR_VAR 0 9
16458: PUSH
16459: LD_VAR 0 2
16463: PUSH
16464: LD_VAR 0 4
16468: PLUS
16469: ST_TO_ADDR
// max_y := y + r ;
16470: LD_ADDR_VAR 0 10
16474: PUSH
16475: LD_VAR 0 3
16479: PUSH
16480: LD_VAR 0 4
16484: PLUS
16485: ST_TO_ADDR
// for _x = min_x to max_x do
16486: LD_ADDR_VAR 0 11
16490: PUSH
16491: DOUBLE
16492: LD_VAR 0 7
16496: DEC
16497: ST_TO_ADDR
16498: LD_VAR 0 9
16502: PUSH
16503: FOR_TO
16504: IFFALSE 16623
// for _y = min_y to max_y do
16506: LD_ADDR_VAR 0 12
16510: PUSH
16511: DOUBLE
16512: LD_VAR 0 8
16516: DEC
16517: ST_TO_ADDR
16518: LD_VAR 0 10
16522: PUSH
16523: FOR_TO
16524: IFFALSE 16619
// begin if not ValidHex ( _x , _y ) then
16526: LD_VAR 0 11
16530: PPUSH
16531: LD_VAR 0 12
16535: PPUSH
16536: CALL_OW 488
16540: NOT
16541: IFFALSE 16545
// continue ;
16543: GO 16523
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16545: LD_VAR 0 11
16549: PPUSH
16550: LD_VAR 0 12
16554: PPUSH
16555: CALL_OW 351
16559: IFFALSE 16577
16561: PUSH
16562: LD_VAR 0 11
16566: PPUSH
16567: LD_VAR 0 12
16571: PPUSH
16572: CALL_OW 554
16576: AND
16577: IFFALSE 16617
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16579: LD_ADDR_VAR 0 13
16583: PUSH
16584: LD_VAR 0 13
16588: PPUSH
16589: LD_VAR 0 13
16593: PUSH
16594: LD_INT 1
16596: PLUS
16597: PPUSH
16598: LD_VAR 0 11
16602: PUSH
16603: LD_VAR 0 12
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: PPUSH
16612: CALL_OW 2
16616: ST_TO_ADDR
// end ;
16617: GO 16523
16619: POP
16620: POP
16621: GO 16503
16623: POP
16624: POP
// if not list then
16625: LD_VAR 0 13
16629: NOT
16630: IFFALSE 16634
// exit ;
16632: GO 16705
// for i in list do
16634: LD_ADDR_VAR 0 6
16638: PUSH
16639: LD_VAR 0 13
16643: PUSH
16644: FOR_IN
16645: IFFALSE 16703
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16647: LD_VAR 0 1
16651: PPUSH
16652: LD_STRING M
16654: PUSH
16655: LD_VAR 0 6
16659: PUSH
16660: LD_INT 1
16662: ARRAY
16663: PUSH
16664: LD_VAR 0 6
16668: PUSH
16669: LD_INT 2
16671: ARRAY
16672: PUSH
16673: LD_INT 0
16675: PUSH
16676: LD_INT 0
16678: PUSH
16679: LD_INT 0
16681: PUSH
16682: LD_INT 0
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: PUSH
16694: EMPTY
16695: LIST
16696: PPUSH
16697: CALL_OW 447
16701: GO 16644
16703: POP
16704: POP
// end ;
16705: LD_VAR 0 5
16709: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
16710: LD_INT 0
16712: PPUSH
16713: PPUSH
16714: PPUSH
16715: PPUSH
16716: PPUSH
16717: PPUSH
16718: PPUSH
16719: PPUSH
16720: PPUSH
16721: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
16722: LD_VAR 0 1
16726: PPUSH
16727: CALL_OW 302
16731: NOT
16732: IFTRUE 16751
16734: PUSH
16735: LD_VAR 0 2
16739: PPUSH
16740: LD_VAR 0 3
16744: PPUSH
16745: CALL_OW 488
16749: NOT
16750: OR
16751: IFTRUE 16760
16753: PUSH
16754: LD_VAR 0 4
16758: NOT
16759: OR
16760: IFFALSE 16764
// exit ;
16762: GO 17281
// list := [ ] ;
16764: LD_ADDR_VAR 0 13
16768: PUSH
16769: EMPTY
16770: ST_TO_ADDR
// if x - r < 0 then
16771: LD_VAR 0 2
16775: PUSH
16776: LD_VAR 0 4
16780: MINUS
16781: PUSH
16782: LD_INT 0
16784: LESS
16785: IFFALSE 16797
// min_x := 0 else
16787: LD_ADDR_VAR 0 7
16791: PUSH
16792: LD_INT 0
16794: ST_TO_ADDR
16795: GO 16813
// min_x := x - r ;
16797: LD_ADDR_VAR 0 7
16801: PUSH
16802: LD_VAR 0 2
16806: PUSH
16807: LD_VAR 0 4
16811: MINUS
16812: ST_TO_ADDR
// if y - r < 0 then
16813: LD_VAR 0 3
16817: PUSH
16818: LD_VAR 0 4
16822: MINUS
16823: PUSH
16824: LD_INT 0
16826: LESS
16827: IFFALSE 16839
// min_y := 0 else
16829: LD_ADDR_VAR 0 8
16833: PUSH
16834: LD_INT 0
16836: ST_TO_ADDR
16837: GO 16855
// min_y := y - r ;
16839: LD_ADDR_VAR 0 8
16843: PUSH
16844: LD_VAR 0 3
16848: PUSH
16849: LD_VAR 0 4
16853: MINUS
16854: ST_TO_ADDR
// max_x := x + r ;
16855: LD_ADDR_VAR 0 9
16859: PUSH
16860: LD_VAR 0 2
16864: PUSH
16865: LD_VAR 0 4
16869: PLUS
16870: ST_TO_ADDR
// max_y := y + r ;
16871: LD_ADDR_VAR 0 10
16875: PUSH
16876: LD_VAR 0 3
16880: PUSH
16881: LD_VAR 0 4
16885: PLUS
16886: ST_TO_ADDR
// for _x = min_x to max_x do
16887: LD_ADDR_VAR 0 11
16891: PUSH
16892: DOUBLE
16893: LD_VAR 0 7
16897: DEC
16898: ST_TO_ADDR
16899: LD_VAR 0 9
16903: PUSH
16904: FOR_TO
16905: IFFALSE 17024
// for _y = min_y to max_y do
16907: LD_ADDR_VAR 0 12
16911: PUSH
16912: DOUBLE
16913: LD_VAR 0 8
16917: DEC
16918: ST_TO_ADDR
16919: LD_VAR 0 10
16923: PUSH
16924: FOR_TO
16925: IFFALSE 17020
// begin if not ValidHex ( _x , _y ) then
16927: LD_VAR 0 11
16931: PPUSH
16932: LD_VAR 0 12
16936: PPUSH
16937: CALL_OW 488
16941: NOT
16942: IFFALSE 16946
// continue ;
16944: GO 16924
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16946: LD_VAR 0 11
16950: PPUSH
16951: LD_VAR 0 12
16955: PPUSH
16956: CALL_OW 351
16960: IFFALSE 16978
16962: PUSH
16963: LD_VAR 0 11
16967: PPUSH
16968: LD_VAR 0 12
16972: PPUSH
16973: CALL_OW 554
16977: AND
16978: IFFALSE 17018
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16980: LD_ADDR_VAR 0 13
16984: PUSH
16985: LD_VAR 0 13
16989: PPUSH
16990: LD_VAR 0 13
16994: PUSH
16995: LD_INT 1
16997: PLUS
16998: PPUSH
16999: LD_VAR 0 11
17003: PUSH
17004: LD_VAR 0 12
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: PPUSH
17013: CALL_OW 2
17017: ST_TO_ADDR
// end ;
17018: GO 16924
17020: POP
17021: POP
17022: GO 16904
17024: POP
17025: POP
// if not list then
17026: LD_VAR 0 13
17030: NOT
17031: IFFALSE 17035
// exit ;
17033: GO 17281
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
17035: LD_ADDR_VAR 0 13
17039: PUSH
17040: LD_VAR 0 1
17044: PPUSH
17045: LD_VAR 0 13
17049: PPUSH
17050: LD_INT 1
17052: PPUSH
17053: LD_INT 1
17055: PPUSH
17056: CALL 43003 0 4
17060: ST_TO_ADDR
// ComStop ( flame ) ;
17061: LD_VAR 0 1
17065: PPUSH
17066: CALL_OW 141
// for i in list do
17070: LD_ADDR_VAR 0 6
17074: PUSH
17075: LD_VAR 0 13
17079: PUSH
17080: FOR_IN
17081: IFFALSE 17112
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
17083: LD_VAR 0 1
17087: PPUSH
17088: LD_VAR 0 6
17092: PUSH
17093: LD_INT 1
17095: ARRAY
17096: PPUSH
17097: LD_VAR 0 6
17101: PUSH
17102: LD_INT 2
17104: ARRAY
17105: PPUSH
17106: CALL_OW 176
17110: GO 17080
17112: POP
17113: POP
// repeat wait ( 0 0$1 ) ;
17114: LD_INT 35
17116: PPUSH
17117: CALL_OW 67
// task := GetTaskList ( flame ) ;
17121: LD_ADDR_VAR 0 14
17125: PUSH
17126: LD_VAR 0 1
17130: PPUSH
17131: CALL_OW 437
17135: ST_TO_ADDR
// if not task then
17136: LD_VAR 0 14
17140: NOT
17141: IFFALSE 17145
// exit ;
17143: GO 17281
// if task [ 1 ] [ 1 ] <> | then
17145: LD_VAR 0 14
17149: PUSH
17150: LD_INT 1
17152: ARRAY
17153: PUSH
17154: LD_INT 1
17156: ARRAY
17157: PUSH
17158: LD_STRING |
17160: NONEQUAL
17161: IFFALSE 17165
// exit ;
17163: GO 17281
// _x := task [ 1 ] [ 2 ] ;
17165: LD_ADDR_VAR 0 11
17169: PUSH
17170: LD_VAR 0 14
17174: PUSH
17175: LD_INT 1
17177: ARRAY
17178: PUSH
17179: LD_INT 2
17181: ARRAY
17182: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
17183: LD_ADDR_VAR 0 12
17187: PUSH
17188: LD_VAR 0 14
17192: PUSH
17193: LD_INT 1
17195: ARRAY
17196: PUSH
17197: LD_INT 3
17199: ARRAY
17200: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
17201: LD_VAR 0 11
17205: PPUSH
17206: LD_VAR 0 12
17210: PPUSH
17211: CALL_OW 351
17215: NOT
17216: IFTRUE 17235
17218: PUSH
17219: LD_VAR 0 11
17223: PPUSH
17224: LD_VAR 0 12
17228: PPUSH
17229: CALL_OW 554
17233: NOT
17234: OR
17235: IFFALSE 17269
// begin task := Delete ( task , 1 ) ;
17237: LD_ADDR_VAR 0 14
17241: PUSH
17242: LD_VAR 0 14
17246: PPUSH
17247: LD_INT 1
17249: PPUSH
17250: CALL_OW 3
17254: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
17255: LD_VAR 0 1
17259: PPUSH
17260: LD_VAR 0 14
17264: PPUSH
17265: CALL_OW 446
// end ; until not HasTask ( flame ) ;
17269: LD_VAR 0 1
17273: PPUSH
17274: CALL_OW 314
17278: NOT
17279: IFFALSE 17114
// end ;
17281: LD_VAR 0 5
17285: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
17286: LD_EXP 44
17290: NOT
17291: IFFALSE 17341
17293: GO 17295
17295: DISABLE
// begin initHack := true ;
17296: LD_ADDR_EXP 44
17300: PUSH
17301: LD_INT 1
17303: ST_TO_ADDR
// hackTanks := [ ] ;
17304: LD_ADDR_EXP 45
17308: PUSH
17309: EMPTY
17310: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
17311: LD_ADDR_EXP 46
17315: PUSH
17316: EMPTY
17317: ST_TO_ADDR
// hackLimit := 3 ;
17318: LD_ADDR_EXP 47
17322: PUSH
17323: LD_INT 3
17325: ST_TO_ADDR
// hackDist := 12 ;
17326: LD_ADDR_EXP 48
17330: PUSH
17331: LD_INT 12
17333: ST_TO_ADDR
// hackCounter := [ ] ;
17334: LD_ADDR_EXP 49
17338: PUSH
17339: EMPTY
17340: ST_TO_ADDR
// end ;
17341: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
17342: LD_EXP 44
17346: IFFALSE 17364
17348: PUSH
17349: LD_INT 34
17351: PUSH
17352: LD_INT 99
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PPUSH
17359: CALL_OW 69
17363: AND
17364: IFFALSE 17617
17366: GO 17368
17368: DISABLE
17369: LD_INT 0
17371: PPUSH
17372: PPUSH
// begin enable ;
17373: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
17374: LD_ADDR_VAR 0 1
17378: PUSH
17379: LD_INT 34
17381: PUSH
17382: LD_INT 99
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: PPUSH
17389: CALL_OW 69
17393: PUSH
17394: FOR_IN
17395: IFFALSE 17615
// begin if not i in hackTanks then
17397: LD_VAR 0 1
17401: PUSH
17402: LD_EXP 45
17406: IN
17407: NOT
17408: IFFALSE 17491
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
17410: LD_ADDR_EXP 45
17414: PUSH
17415: LD_EXP 45
17419: PPUSH
17420: LD_EXP 45
17424: PUSH
17425: LD_INT 1
17427: PLUS
17428: PPUSH
17429: LD_VAR 0 1
17433: PPUSH
17434: CALL_OW 1
17438: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
17439: LD_ADDR_EXP 46
17443: PUSH
17444: LD_EXP 46
17448: PPUSH
17449: LD_EXP 46
17453: PUSH
17454: LD_INT 1
17456: PLUS
17457: PPUSH
17458: EMPTY
17459: PPUSH
17460: CALL_OW 1
17464: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
17465: LD_ADDR_EXP 49
17469: PUSH
17470: LD_EXP 49
17474: PPUSH
17475: LD_EXP 49
17479: PUSH
17480: LD_INT 1
17482: PLUS
17483: PPUSH
17484: EMPTY
17485: PPUSH
17486: CALL_OW 1
17490: ST_TO_ADDR
// end ; if not IsOk ( i ) then
17491: LD_VAR 0 1
17495: PPUSH
17496: CALL_OW 302
17500: NOT
17501: IFFALSE 17514
// begin HackUnlinkAll ( i ) ;
17503: LD_VAR 0 1
17507: PPUSH
17508: CALL 17620 0 1
// continue ;
17512: GO 17394
// end ; HackCheckCapturedStatus ( i ) ;
17514: LD_VAR 0 1
17518: PPUSH
17519: CALL 18065 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
17523: LD_ADDR_VAR 0 2
17527: PUSH
17528: LD_INT 81
17530: PUSH
17531: LD_VAR 0 1
17535: PPUSH
17536: CALL_OW 255
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PUSH
17545: LD_INT 33
17547: PUSH
17548: LD_INT 3
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PUSH
17555: LD_INT 91
17557: PUSH
17558: LD_VAR 0 1
17562: PUSH
17563: LD_EXP 48
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: LIST
17572: PUSH
17573: LD_INT 50
17575: PUSH
17576: EMPTY
17577: LIST
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: PPUSH
17585: CALL_OW 69
17589: ST_TO_ADDR
// if not tmp then
17590: LD_VAR 0 2
17594: NOT
17595: IFFALSE 17599
// continue ;
17597: GO 17394
// HackLink ( i , tmp ) ;
17599: LD_VAR 0 1
17603: PPUSH
17604: LD_VAR 0 2
17608: PPUSH
17609: CALL 17756 0 2
// end ;
17613: GO 17394
17615: POP
17616: POP
// end ;
17617: PPOPN 2
17619: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
17620: LD_INT 0
17622: PPUSH
17623: PPUSH
17624: PPUSH
// if not hack in hackTanks then
17625: LD_VAR 0 1
17629: PUSH
17630: LD_EXP 45
17634: IN
17635: NOT
17636: IFFALSE 17640
// exit ;
17638: GO 17751
// index := GetElementIndex ( hackTanks , hack ) ;
17640: LD_ADDR_VAR 0 4
17644: PUSH
17645: LD_EXP 45
17649: PPUSH
17650: LD_VAR 0 1
17654: PPUSH
17655: CALL 42298 0 2
17659: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
17660: LD_EXP 46
17664: PUSH
17665: LD_VAR 0 4
17669: ARRAY
17670: IFFALSE 17751
// begin for i in hackTanksCaptured [ index ] do
17672: LD_ADDR_VAR 0 3
17676: PUSH
17677: LD_EXP 46
17681: PUSH
17682: LD_VAR 0 4
17686: ARRAY
17687: PUSH
17688: FOR_IN
17689: IFFALSE 17715
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
17691: LD_VAR 0 3
17695: PUSH
17696: LD_INT 1
17698: ARRAY
17699: PPUSH
17700: LD_VAR 0 3
17704: PUSH
17705: LD_INT 2
17707: ARRAY
17708: PPUSH
17709: CALL_OW 235
17713: GO 17688
17715: POP
17716: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
17717: LD_ADDR_EXP 46
17721: PUSH
17722: LD_EXP 46
17726: PPUSH
17727: LD_VAR 0 4
17731: PPUSH
17732: EMPTY
17733: PPUSH
17734: CALL_OW 1
17738: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
17739: LD_VAR 0 1
17743: PPUSH
17744: LD_INT 0
17746: PPUSH
17747: CALL_OW 505
// end ; end ;
17751: LD_VAR 0 2
17755: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
17756: LD_INT 0
17758: PPUSH
17759: PPUSH
17760: PPUSH
// if not hack in hackTanks or not vehicles then
17761: LD_VAR 0 1
17765: PUSH
17766: LD_EXP 45
17770: IN
17771: NOT
17772: IFTRUE 17781
17774: PUSH
17775: LD_VAR 0 2
17779: NOT
17780: OR
17781: IFFALSE 17785
// exit ;
17783: GO 18060
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
17785: LD_ADDR_VAR 0 2
17789: PUSH
17790: LD_VAR 0 1
17794: PPUSH
17795: LD_VAR 0 2
17799: PPUSH
17800: LD_INT 1
17802: PPUSH
17803: LD_INT 1
17805: PPUSH
17806: CALL 42950 0 4
17810: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
17811: LD_ADDR_VAR 0 5
17815: PUSH
17816: LD_EXP 45
17820: PPUSH
17821: LD_VAR 0 1
17825: PPUSH
17826: CALL 42298 0 2
17830: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
17831: LD_EXP 46
17835: PUSH
17836: LD_VAR 0 5
17840: ARRAY
17841: PUSH
17842: LD_EXP 47
17846: LESS
17847: IFFALSE 18036
// begin for i := 1 to vehicles do
17849: LD_ADDR_VAR 0 4
17853: PUSH
17854: DOUBLE
17855: LD_INT 1
17857: DEC
17858: ST_TO_ADDR
17859: LD_VAR 0 2
17863: PUSH
17864: FOR_TO
17865: IFFALSE 18034
// begin if hackTanksCaptured [ index ] = hackLimit then
17867: LD_EXP 46
17871: PUSH
17872: LD_VAR 0 5
17876: ARRAY
17877: PUSH
17878: LD_EXP 47
17882: EQUAL
17883: IFFALSE 17887
// break ;
17885: GO 18034
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
17887: LD_ADDR_EXP 49
17891: PUSH
17892: LD_EXP 49
17896: PPUSH
17897: LD_VAR 0 5
17901: PPUSH
17902: LD_EXP 49
17906: PUSH
17907: LD_VAR 0 5
17911: ARRAY
17912: PUSH
17913: LD_INT 1
17915: PLUS
17916: PPUSH
17917: CALL_OW 1
17921: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
17922: LD_ADDR_EXP 46
17926: PUSH
17927: LD_EXP 46
17931: PPUSH
17932: LD_VAR 0 5
17936: PUSH
17937: LD_EXP 46
17941: PUSH
17942: LD_VAR 0 5
17946: ARRAY
17947: PUSH
17948: LD_INT 1
17950: PLUS
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PPUSH
17956: LD_VAR 0 2
17960: PUSH
17961: LD_VAR 0 4
17965: ARRAY
17966: PUSH
17967: LD_VAR 0 2
17971: PUSH
17972: LD_VAR 0 4
17976: ARRAY
17977: PPUSH
17978: CALL_OW 255
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PPUSH
17987: CALL 42515 0 3
17991: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
17992: LD_VAR 0 2
17996: PUSH
17997: LD_VAR 0 4
18001: ARRAY
18002: PPUSH
18003: LD_VAR 0 1
18007: PPUSH
18008: CALL_OW 255
18012: PPUSH
18013: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
18017: LD_VAR 0 2
18021: PUSH
18022: LD_VAR 0 4
18026: ARRAY
18027: PPUSH
18028: CALL_OW 141
// end ;
18032: GO 17864
18034: POP
18035: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18036: LD_VAR 0 1
18040: PPUSH
18041: LD_EXP 46
18045: PUSH
18046: LD_VAR 0 5
18050: ARRAY
18051: PUSH
18052: LD_INT 0
18054: PLUS
18055: PPUSH
18056: CALL_OW 505
// end ;
18060: LD_VAR 0 3
18064: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
18065: LD_INT 0
18067: PPUSH
18068: PPUSH
18069: PPUSH
18070: PPUSH
// if not hack in hackTanks then
18071: LD_VAR 0 1
18075: PUSH
18076: LD_EXP 45
18080: IN
18081: NOT
18082: IFFALSE 18086
// exit ;
18084: GO 18330
// index := GetElementIndex ( hackTanks , hack ) ;
18086: LD_ADDR_VAR 0 4
18090: PUSH
18091: LD_EXP 45
18095: PPUSH
18096: LD_VAR 0 1
18100: PPUSH
18101: CALL 42298 0 2
18105: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
18106: LD_ADDR_VAR 0 3
18110: PUSH
18111: DOUBLE
18112: LD_EXP 46
18116: PUSH
18117: LD_VAR 0 4
18121: ARRAY
18122: INC
18123: ST_TO_ADDR
18124: LD_INT 1
18126: PUSH
18127: FOR_DOWNTO
18128: IFFALSE 18304
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
18130: LD_ADDR_VAR 0 5
18134: PUSH
18135: LD_EXP 46
18139: PUSH
18140: LD_VAR 0 4
18144: ARRAY
18145: PUSH
18146: LD_VAR 0 3
18150: ARRAY
18151: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
18152: LD_VAR 0 5
18156: PUSH
18157: LD_INT 1
18159: ARRAY
18160: PPUSH
18161: CALL_OW 302
18165: NOT
18166: IFTRUE 18194
18168: PUSH
18169: LD_VAR 0 5
18173: PUSH
18174: LD_INT 1
18176: ARRAY
18177: PPUSH
18178: CALL_OW 255
18182: PUSH
18183: LD_VAR 0 1
18187: PPUSH
18188: CALL_OW 255
18192: NONEQUAL
18193: OR
18194: IFFALSE 18302
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
18196: LD_VAR 0 5
18200: PUSH
18201: LD_INT 1
18203: ARRAY
18204: PPUSH
18205: CALL_OW 305
18209: IFFALSE 18237
18211: PUSH
18212: LD_VAR 0 5
18216: PUSH
18217: LD_INT 1
18219: ARRAY
18220: PPUSH
18221: CALL_OW 255
18225: PUSH
18226: LD_VAR 0 1
18230: PPUSH
18231: CALL_OW 255
18235: EQUAL
18236: AND
18237: IFFALSE 18261
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
18239: LD_VAR 0 5
18243: PUSH
18244: LD_INT 1
18246: ARRAY
18247: PPUSH
18248: LD_VAR 0 5
18252: PUSH
18253: LD_INT 2
18255: ARRAY
18256: PPUSH
18257: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
18261: LD_ADDR_EXP 46
18265: PUSH
18266: LD_EXP 46
18270: PPUSH
18271: LD_VAR 0 4
18275: PPUSH
18276: LD_EXP 46
18280: PUSH
18281: LD_VAR 0 4
18285: ARRAY
18286: PPUSH
18287: LD_VAR 0 3
18291: PPUSH
18292: CALL_OW 3
18296: PPUSH
18297: CALL_OW 1
18301: ST_TO_ADDR
// end ; end ;
18302: GO 18127
18304: POP
18305: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18306: LD_VAR 0 1
18310: PPUSH
18311: LD_EXP 46
18315: PUSH
18316: LD_VAR 0 4
18320: ARRAY
18321: PUSH
18322: LD_INT 0
18324: PLUS
18325: PPUSH
18326: CALL_OW 505
// end ;
18330: LD_VAR 0 2
18334: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
18335: LD_INT 0
18337: PPUSH
18338: PPUSH
18339: PPUSH
18340: PPUSH
// if not hack in hackTanks then
18341: LD_VAR 0 1
18345: PUSH
18346: LD_EXP 45
18350: IN
18351: NOT
18352: IFFALSE 18356
// exit ;
18354: GO 18441
// index := GetElementIndex ( hackTanks , hack ) ;
18356: LD_ADDR_VAR 0 5
18360: PUSH
18361: LD_EXP 45
18365: PPUSH
18366: LD_VAR 0 1
18370: PPUSH
18371: CALL 42298 0 2
18375: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
18376: LD_ADDR_VAR 0 4
18380: PUSH
18381: DOUBLE
18382: LD_INT 1
18384: DEC
18385: ST_TO_ADDR
18386: LD_EXP 46
18390: PUSH
18391: LD_VAR 0 5
18395: ARRAY
18396: PUSH
18397: FOR_TO
18398: IFFALSE 18439
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
18400: LD_EXP 46
18404: PUSH
18405: LD_VAR 0 5
18409: ARRAY
18410: PUSH
18411: LD_VAR 0 4
18415: ARRAY
18416: PUSH
18417: LD_INT 1
18419: ARRAY
18420: PUSH
18421: LD_VAR 0 2
18425: EQUAL
18426: IFFALSE 18437
// KillUnit ( vehicle ) ;
18428: LD_VAR 0 2
18432: PPUSH
18433: CALL_OW 66
18437: GO 18397
18439: POP
18440: POP
// end ;
18441: LD_VAR 0 3
18445: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
18446: LD_EXP 50
18450: NOT
18451: IFFALSE 18486
18453: GO 18455
18455: DISABLE
// begin initMiner := true ;
18456: LD_ADDR_EXP 50
18460: PUSH
18461: LD_INT 1
18463: ST_TO_ADDR
// minersList := [ ] ;
18464: LD_ADDR_EXP 51
18468: PUSH
18469: EMPTY
18470: ST_TO_ADDR
// minerMinesList := [ ] ;
18471: LD_ADDR_EXP 52
18475: PUSH
18476: EMPTY
18477: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
18478: LD_ADDR_EXP 53
18482: PUSH
18483: LD_INT 5
18485: ST_TO_ADDR
// end ;
18486: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
18487: LD_EXP 50
18491: IFFALSE 18509
18493: PUSH
18494: LD_INT 34
18496: PUSH
18497: LD_INT 81
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PPUSH
18504: CALL_OW 69
18508: AND
18509: IFFALSE 18972
18511: GO 18513
18513: DISABLE
18514: LD_INT 0
18516: PPUSH
18517: PPUSH
18518: PPUSH
18519: PPUSH
// begin enable ;
18520: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
18521: LD_ADDR_VAR 0 1
18525: PUSH
18526: LD_INT 34
18528: PUSH
18529: LD_INT 81
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PPUSH
18536: CALL_OW 69
18540: PUSH
18541: FOR_IN
18542: IFFALSE 18614
// begin if not i in minersList then
18544: LD_VAR 0 1
18548: PUSH
18549: LD_EXP 51
18553: IN
18554: NOT
18555: IFFALSE 18612
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
18557: LD_ADDR_EXP 51
18561: PUSH
18562: LD_EXP 51
18566: PPUSH
18567: LD_EXP 51
18571: PUSH
18572: LD_INT 1
18574: PLUS
18575: PPUSH
18576: LD_VAR 0 1
18580: PPUSH
18581: CALL_OW 1
18585: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
18586: LD_ADDR_EXP 52
18590: PUSH
18591: LD_EXP 52
18595: PPUSH
18596: LD_EXP 52
18600: PUSH
18601: LD_INT 1
18603: PLUS
18604: PPUSH
18605: EMPTY
18606: PPUSH
18607: CALL_OW 1
18611: ST_TO_ADDR
// end end ;
18612: GO 18541
18614: POP
18615: POP
// for i := minerMinesList downto 1 do
18616: LD_ADDR_VAR 0 1
18620: PUSH
18621: DOUBLE
18622: LD_EXP 52
18626: INC
18627: ST_TO_ADDR
18628: LD_INT 1
18630: PUSH
18631: FOR_DOWNTO
18632: IFFALSE 18970
// begin if IsLive ( minersList [ i ] ) then
18634: LD_EXP 51
18638: PUSH
18639: LD_VAR 0 1
18643: ARRAY
18644: PPUSH
18645: CALL_OW 300
18649: IFFALSE 18677
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
18651: LD_EXP 51
18655: PUSH
18656: LD_VAR 0 1
18660: ARRAY
18661: PPUSH
18662: LD_EXP 52
18666: PUSH
18667: LD_VAR 0 1
18671: ARRAY
18672: PPUSH
18673: CALL_OW 505
// if not minerMinesList [ i ] then
18677: LD_EXP 52
18681: PUSH
18682: LD_VAR 0 1
18686: ARRAY
18687: NOT
18688: IFFALSE 18692
// continue ;
18690: GO 18631
// for j := minerMinesList [ i ] downto 1 do
18692: LD_ADDR_VAR 0 2
18696: PUSH
18697: DOUBLE
18698: LD_EXP 52
18702: PUSH
18703: LD_VAR 0 1
18707: ARRAY
18708: INC
18709: ST_TO_ADDR
18710: LD_INT 1
18712: PUSH
18713: FOR_DOWNTO
18714: IFFALSE 18966
// begin side := GetSide ( minersList [ i ] ) ;
18716: LD_ADDR_VAR 0 3
18720: PUSH
18721: LD_EXP 51
18725: PUSH
18726: LD_VAR 0 1
18730: ARRAY
18731: PPUSH
18732: CALL_OW 255
18736: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
18737: LD_ADDR_VAR 0 4
18741: PUSH
18742: LD_EXP 52
18746: PUSH
18747: LD_VAR 0 1
18751: ARRAY
18752: PUSH
18753: LD_VAR 0 2
18757: ARRAY
18758: PUSH
18759: LD_INT 1
18761: ARRAY
18762: PPUSH
18763: LD_EXP 52
18767: PUSH
18768: LD_VAR 0 1
18772: ARRAY
18773: PUSH
18774: LD_VAR 0 2
18778: ARRAY
18779: PUSH
18780: LD_INT 2
18782: ARRAY
18783: PPUSH
18784: CALL_OW 428
18788: ST_TO_ADDR
// if not tmp then
18789: LD_VAR 0 4
18793: NOT
18794: IFFALSE 18798
// continue ;
18796: GO 18713
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
18798: LD_VAR 0 4
18802: PUSH
18803: LD_INT 81
18805: PUSH
18806: LD_VAR 0 3
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PPUSH
18815: CALL_OW 69
18819: IN
18820: IFFALSE 18870
18822: PUSH
18823: LD_EXP 52
18827: PUSH
18828: LD_VAR 0 1
18832: ARRAY
18833: PUSH
18834: LD_VAR 0 2
18838: ARRAY
18839: PUSH
18840: LD_INT 1
18842: ARRAY
18843: PPUSH
18844: LD_EXP 52
18848: PUSH
18849: LD_VAR 0 1
18853: ARRAY
18854: PUSH
18855: LD_VAR 0 2
18859: ARRAY
18860: PUSH
18861: LD_INT 2
18863: ARRAY
18864: PPUSH
18865: CALL_OW 458
18869: AND
18870: IFFALSE 18964
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
18872: LD_EXP 52
18876: PUSH
18877: LD_VAR 0 1
18881: ARRAY
18882: PUSH
18883: LD_VAR 0 2
18887: ARRAY
18888: PUSH
18889: LD_INT 1
18891: ARRAY
18892: PPUSH
18893: LD_EXP 52
18897: PUSH
18898: LD_VAR 0 1
18902: ARRAY
18903: PUSH
18904: LD_VAR 0 2
18908: ARRAY
18909: PUSH
18910: LD_INT 2
18912: ARRAY
18913: PPUSH
18914: LD_VAR 0 3
18918: PPUSH
18919: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
18923: LD_ADDR_EXP 52
18927: PUSH
18928: LD_EXP 52
18932: PPUSH
18933: LD_VAR 0 1
18937: PPUSH
18938: LD_EXP 52
18942: PUSH
18943: LD_VAR 0 1
18947: ARRAY
18948: PPUSH
18949: LD_VAR 0 2
18953: PPUSH
18954: CALL_OW 3
18958: PPUSH
18959: CALL_OW 1
18963: ST_TO_ADDR
// end ; end ;
18964: GO 18713
18966: POP
18967: POP
// end ;
18968: GO 18631
18970: POP
18971: POP
// end ;
18972: PPOPN 4
18974: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
18975: LD_INT 0
18977: PPUSH
18978: PPUSH
// result := false ;
18979: LD_ADDR_VAR 0 4
18983: PUSH
18984: LD_INT 0
18986: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
18987: LD_VAR 0 1
18991: PPUSH
18992: CALL_OW 264
18996: PUSH
18997: LD_INT 81
18999: EQUAL
19000: NOT
19001: IFFALSE 19005
// exit ;
19003: GO 19249
// index := GetElementIndex ( minersList , unit ) ;
19005: LD_ADDR_VAR 0 5
19009: PUSH
19010: LD_EXP 51
19014: PPUSH
19015: LD_VAR 0 1
19019: PPUSH
19020: CALL 42298 0 2
19024: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
19025: LD_EXP 52
19029: PUSH
19030: LD_VAR 0 5
19034: ARRAY
19035: PUSH
19036: LD_EXP 53
19040: GREATEREQUAL
19041: IFFALSE 19045
// exit ;
19043: GO 19249
// ComMoveXY ( unit , x , y ) ;
19045: LD_VAR 0 1
19049: PPUSH
19050: LD_VAR 0 2
19054: PPUSH
19055: LD_VAR 0 3
19059: PPUSH
19060: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19064: LD_INT 35
19066: PPUSH
19067: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
19071: LD_VAR 0 1
19075: PPUSH
19076: LD_VAR 0 2
19080: PPUSH
19081: LD_VAR 0 3
19085: PPUSH
19086: CALL 74344 0 3
19090: NOT
19091: IFFALSE 19104
19093: PUSH
19094: LD_VAR 0 1
19098: PPUSH
19099: CALL_OW 314
19103: AND
19104: IFFALSE 19108
// exit ;
19106: GO 19249
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
19108: LD_VAR 0 2
19112: PPUSH
19113: LD_VAR 0 3
19117: PPUSH
19118: CALL_OW 428
19122: PUSH
19123: LD_VAR 0 1
19127: EQUAL
19128: IFFALSE 19142
19130: PUSH
19131: LD_VAR 0 1
19135: PPUSH
19136: CALL_OW 314
19140: NOT
19141: AND
19142: IFFALSE 19064
// PlaySoundXY ( x , y , PlantMine ) ;
19144: LD_VAR 0 2
19148: PPUSH
19149: LD_VAR 0 3
19153: PPUSH
19154: LD_STRING PlantMine
19156: PPUSH
19157: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
19161: LD_VAR 0 2
19165: PPUSH
19166: LD_VAR 0 3
19170: PPUSH
19171: LD_VAR 0 1
19175: PPUSH
19176: CALL_OW 255
19180: PPUSH
19181: LD_INT 0
19183: PPUSH
19184: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
19188: LD_ADDR_EXP 52
19192: PUSH
19193: LD_EXP 52
19197: PPUSH
19198: LD_VAR 0 5
19202: PUSH
19203: LD_EXP 52
19207: PUSH
19208: LD_VAR 0 5
19212: ARRAY
19213: PUSH
19214: LD_INT 1
19216: PLUS
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PPUSH
19222: LD_VAR 0 2
19226: PUSH
19227: LD_VAR 0 3
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PPUSH
19236: CALL 42515 0 3
19240: ST_TO_ADDR
// result := true ;
19241: LD_ADDR_VAR 0 4
19245: PUSH
19246: LD_INT 1
19248: ST_TO_ADDR
// end ;
19249: LD_VAR 0 4
19253: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
19254: LD_INT 0
19256: PPUSH
19257: PPUSH
19258: PPUSH
// if not unit in minersList then
19259: LD_VAR 0 1
19263: PUSH
19264: LD_EXP 51
19268: IN
19269: NOT
19270: IFFALSE 19274
// exit ;
19272: GO 19668
// index := GetElementIndex ( minersList , unit ) ;
19274: LD_ADDR_VAR 0 6
19278: PUSH
19279: LD_EXP 51
19283: PPUSH
19284: LD_VAR 0 1
19288: PPUSH
19289: CALL 42298 0 2
19293: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
19294: LD_ADDR_VAR 0 5
19298: PUSH
19299: DOUBLE
19300: LD_EXP 52
19304: PUSH
19305: LD_VAR 0 6
19309: ARRAY
19310: INC
19311: ST_TO_ADDR
19312: LD_INT 1
19314: PUSH
19315: FOR_DOWNTO
19316: IFFALSE 19479
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
19318: LD_EXP 52
19322: PUSH
19323: LD_VAR 0 6
19327: ARRAY
19328: PUSH
19329: LD_VAR 0 5
19333: ARRAY
19334: PUSH
19335: LD_INT 1
19337: ARRAY
19338: PUSH
19339: LD_VAR 0 2
19343: EQUAL
19344: IFFALSE 19374
19346: PUSH
19347: LD_EXP 52
19351: PUSH
19352: LD_VAR 0 6
19356: ARRAY
19357: PUSH
19358: LD_VAR 0 5
19362: ARRAY
19363: PUSH
19364: LD_INT 2
19366: ARRAY
19367: PUSH
19368: LD_VAR 0 3
19372: EQUAL
19373: AND
19374: IFFALSE 19477
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
19376: LD_EXP 52
19380: PUSH
19381: LD_VAR 0 6
19385: ARRAY
19386: PUSH
19387: LD_VAR 0 5
19391: ARRAY
19392: PUSH
19393: LD_INT 1
19395: ARRAY
19396: PPUSH
19397: LD_EXP 52
19401: PUSH
19402: LD_VAR 0 6
19406: ARRAY
19407: PUSH
19408: LD_VAR 0 5
19412: ARRAY
19413: PUSH
19414: LD_INT 2
19416: ARRAY
19417: PPUSH
19418: LD_VAR 0 1
19422: PPUSH
19423: CALL_OW 255
19427: PPUSH
19428: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
19432: LD_ADDR_EXP 52
19436: PUSH
19437: LD_EXP 52
19441: PPUSH
19442: LD_VAR 0 6
19446: PPUSH
19447: LD_EXP 52
19451: PUSH
19452: LD_VAR 0 6
19456: ARRAY
19457: PPUSH
19458: LD_VAR 0 5
19462: PPUSH
19463: CALL_OW 3
19467: PPUSH
19468: CALL_OW 1
19472: ST_TO_ADDR
// exit ;
19473: POP
19474: POP
19475: GO 19668
// end ; end ;
19477: GO 19315
19479: POP
19480: POP
// for i := minerMinesList [ index ] downto 1 do
19481: LD_ADDR_VAR 0 5
19485: PUSH
19486: DOUBLE
19487: LD_EXP 52
19491: PUSH
19492: LD_VAR 0 6
19496: ARRAY
19497: INC
19498: ST_TO_ADDR
19499: LD_INT 1
19501: PUSH
19502: FOR_DOWNTO
19503: IFFALSE 19666
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
19505: LD_EXP 52
19509: PUSH
19510: LD_VAR 0 6
19514: ARRAY
19515: PUSH
19516: LD_VAR 0 5
19520: ARRAY
19521: PUSH
19522: LD_INT 1
19524: ARRAY
19525: PPUSH
19526: LD_EXP 52
19530: PUSH
19531: LD_VAR 0 6
19535: ARRAY
19536: PUSH
19537: LD_VAR 0 5
19541: ARRAY
19542: PUSH
19543: LD_INT 2
19545: ARRAY
19546: PPUSH
19547: LD_VAR 0 2
19551: PPUSH
19552: LD_VAR 0 3
19556: PPUSH
19557: CALL_OW 298
19561: PUSH
19562: LD_INT 6
19564: LESS
19565: IFFALSE 19664
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
19567: LD_EXP 52
19571: PUSH
19572: LD_VAR 0 6
19576: ARRAY
19577: PUSH
19578: LD_VAR 0 5
19582: ARRAY
19583: PUSH
19584: LD_INT 1
19586: ARRAY
19587: PPUSH
19588: LD_EXP 52
19592: PUSH
19593: LD_VAR 0 6
19597: ARRAY
19598: PUSH
19599: LD_VAR 0 5
19603: ARRAY
19604: PUSH
19605: LD_INT 2
19607: ARRAY
19608: PPUSH
19609: LD_VAR 0 1
19613: PPUSH
19614: CALL_OW 255
19618: PPUSH
19619: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
19623: LD_ADDR_EXP 52
19627: PUSH
19628: LD_EXP 52
19632: PPUSH
19633: LD_VAR 0 6
19637: PPUSH
19638: LD_EXP 52
19642: PUSH
19643: LD_VAR 0 6
19647: ARRAY
19648: PPUSH
19649: LD_VAR 0 5
19653: PPUSH
19654: CALL_OW 3
19658: PPUSH
19659: CALL_OW 1
19663: ST_TO_ADDR
// end ; end ;
19664: GO 19502
19666: POP
19667: POP
// end ;
19668: LD_VAR 0 4
19672: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
19673: LD_INT 0
19675: PPUSH
19676: PPUSH
19677: PPUSH
19678: PPUSH
19679: PPUSH
19680: PPUSH
19681: PPUSH
19682: PPUSH
19683: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
19684: LD_VAR 0 1
19688: PPUSH
19689: CALL_OW 264
19693: PUSH
19694: LD_INT 81
19696: EQUAL
19697: NOT
19698: IFTRUE 19713
19700: PUSH
19701: LD_VAR 0 1
19705: PUSH
19706: LD_EXP 51
19710: IN
19711: NOT
19712: OR
19713: IFFALSE 19717
// exit ;
19715: GO 20043
// index := GetElementIndex ( minersList , unit ) ;
19717: LD_ADDR_VAR 0 6
19721: PUSH
19722: LD_EXP 51
19726: PPUSH
19727: LD_VAR 0 1
19731: PPUSH
19732: CALL 42298 0 2
19736: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
19737: LD_ADDR_VAR 0 8
19741: PUSH
19742: LD_EXP 53
19746: PUSH
19747: LD_EXP 52
19751: PUSH
19752: LD_VAR 0 6
19756: ARRAY
19757: MINUS
19758: ST_TO_ADDR
// if not minesFreeAmount then
19759: LD_VAR 0 8
19763: NOT
19764: IFFALSE 19768
// exit ;
19766: GO 20043
// tmp := [ ] ;
19768: LD_ADDR_VAR 0 7
19772: PUSH
19773: EMPTY
19774: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
19775: LD_ADDR_VAR 0 5
19779: PUSH
19780: DOUBLE
19781: LD_INT 1
19783: DEC
19784: ST_TO_ADDR
19785: LD_VAR 0 8
19789: PUSH
19790: FOR_TO
19791: IFFALSE 19990
// begin _d := rand ( 0 , 5 ) ;
19793: LD_ADDR_VAR 0 11
19797: PUSH
19798: LD_INT 0
19800: PPUSH
19801: LD_INT 5
19803: PPUSH
19804: CALL_OW 12
19808: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
19809: LD_ADDR_VAR 0 12
19813: PUSH
19814: LD_INT 2
19816: PPUSH
19817: LD_INT 6
19819: PPUSH
19820: CALL_OW 12
19824: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
19825: LD_ADDR_VAR 0 9
19829: PUSH
19830: LD_VAR 0 2
19834: PPUSH
19835: LD_VAR 0 11
19839: PPUSH
19840: LD_VAR 0 12
19844: PPUSH
19845: CALL_OW 272
19849: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
19850: LD_ADDR_VAR 0 10
19854: PUSH
19855: LD_VAR 0 3
19859: PPUSH
19860: LD_VAR 0 11
19864: PPUSH
19865: LD_VAR 0 12
19869: PPUSH
19870: CALL_OW 273
19874: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
19875: LD_VAR 0 9
19879: PPUSH
19880: LD_VAR 0 10
19884: PPUSH
19885: CALL_OW 488
19889: IFFALSE 19913
19891: PUSH
19892: LD_VAR 0 9
19896: PUSH
19897: LD_VAR 0 10
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_VAR 0 7
19910: IN
19911: NOT
19912: AND
19913: IFFALSE 19932
19915: PUSH
19916: LD_VAR 0 9
19920: PPUSH
19921: LD_VAR 0 10
19925: PPUSH
19926: CALL_OW 458
19930: NOT
19931: AND
19932: IFFALSE 19974
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
19934: LD_ADDR_VAR 0 7
19938: PUSH
19939: LD_VAR 0 7
19943: PPUSH
19944: LD_VAR 0 7
19948: PUSH
19949: LD_INT 1
19951: PLUS
19952: PPUSH
19953: LD_VAR 0 9
19957: PUSH
19958: LD_VAR 0 10
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: PPUSH
19967: CALL_OW 1
19971: ST_TO_ADDR
19972: GO 19988
// i := i - 1 ;
19974: LD_ADDR_VAR 0 5
19978: PUSH
19979: LD_VAR 0 5
19983: PUSH
19984: LD_INT 1
19986: MINUS
19987: ST_TO_ADDR
// end ;
19988: GO 19790
19990: POP
19991: POP
// for i in tmp do
19992: LD_ADDR_VAR 0 5
19996: PUSH
19997: LD_VAR 0 7
20001: PUSH
20002: FOR_IN
20003: IFFALSE 20041
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
20005: LD_VAR 0 1
20009: PPUSH
20010: LD_VAR 0 5
20014: PUSH
20015: LD_INT 1
20017: ARRAY
20018: PPUSH
20019: LD_VAR 0 5
20023: PUSH
20024: LD_INT 2
20026: ARRAY
20027: PPUSH
20028: CALL 18975 0 3
20032: NOT
20033: IFFALSE 20039
// exit ;
20035: POP
20036: POP
20037: GO 20043
20039: GO 20002
20041: POP
20042: POP
// end ;
20043: LD_VAR 0 4
20047: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
20048: LD_INT 0
20050: PPUSH
20051: PPUSH
20052: PPUSH
20053: PPUSH
20054: PPUSH
20055: PPUSH
20056: PPUSH
20057: PPUSH
20058: PPUSH
// if GetClass ( unit ) <> class_sniper then
20059: LD_VAR 0 1
20063: PPUSH
20064: CALL_OW 257
20068: PUSH
20069: LD_INT 5
20071: NONEQUAL
20072: IFFALSE 20076
// exit ;
20074: GO 20546
// dist := 8 ;
20076: LD_ADDR_VAR 0 5
20080: PUSH
20081: LD_INT 8
20083: ST_TO_ADDR
// viewRange := 12 ;
20084: LD_ADDR_VAR 0 8
20088: PUSH
20089: LD_INT 12
20091: ST_TO_ADDR
// side := GetSide ( unit ) ;
20092: LD_ADDR_VAR 0 6
20096: PUSH
20097: LD_VAR 0 1
20101: PPUSH
20102: CALL_OW 255
20106: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
20107: LD_INT 61
20109: PPUSH
20110: LD_VAR 0 6
20114: PPUSH
20115: CALL_OW 321
20119: PUSH
20120: LD_INT 2
20122: EQUAL
20123: IFFALSE 20133
// viewRange := 16 ;
20125: LD_ADDR_VAR 0 8
20129: PUSH
20130: LD_INT 16
20132: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
20133: LD_VAR 0 1
20137: PPUSH
20138: LD_VAR 0 2
20142: PPUSH
20143: LD_VAR 0 3
20147: PPUSH
20148: CALL_OW 297
20152: PUSH
20153: LD_VAR 0 5
20157: GREATER
20158: IFFALSE 20237
// begin ComMoveXY ( unit , x , y ) ;
20160: LD_VAR 0 1
20164: PPUSH
20165: LD_VAR 0 2
20169: PPUSH
20170: LD_VAR 0 3
20174: PPUSH
20175: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20179: LD_INT 35
20181: PPUSH
20182: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
20186: LD_VAR 0 1
20190: PPUSH
20191: LD_VAR 0 2
20195: PPUSH
20196: LD_VAR 0 3
20200: PPUSH
20201: CALL 74344 0 3
20205: NOT
20206: IFFALSE 20210
// exit ;
20208: GO 20546
// until GetDistUnitXY ( unit , x , y ) < dist ;
20210: LD_VAR 0 1
20214: PPUSH
20215: LD_VAR 0 2
20219: PPUSH
20220: LD_VAR 0 3
20224: PPUSH
20225: CALL_OW 297
20229: PUSH
20230: LD_VAR 0 5
20234: LESS
20235: IFFALSE 20179
// end ; ComTurnXY ( unit , x , y ) ;
20237: LD_VAR 0 1
20241: PPUSH
20242: LD_VAR 0 2
20246: PPUSH
20247: LD_VAR 0 3
20251: PPUSH
20252: CALL_OW 118
// repeat if Multiplayer then
20256: LD_OWVAR 4
20260: IFFALSE 20271
// wait ( 35 ) else
20262: LD_INT 35
20264: PPUSH
20265: CALL_OW 67
20269: GO 20278
// wait ( 5 ) ;
20271: LD_INT 5
20273: PPUSH
20274: CALL_OW 67
// _d := GetDir ( unit ) ;
20278: LD_ADDR_VAR 0 11
20282: PUSH
20283: LD_VAR 0 1
20287: PPUSH
20288: CALL_OW 254
20292: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
20293: LD_ADDR_VAR 0 7
20297: PUSH
20298: LD_VAR 0 1
20302: PPUSH
20303: CALL_OW 250
20307: PPUSH
20308: LD_VAR 0 1
20312: PPUSH
20313: CALL_OW 251
20317: PPUSH
20318: LD_VAR 0 2
20322: PPUSH
20323: LD_VAR 0 3
20327: PPUSH
20328: CALL 76980 0 4
20332: ST_TO_ADDR
// until dir = _d ;
20333: LD_VAR 0 7
20337: PUSH
20338: LD_VAR 0 11
20342: EQUAL
20343: IFFALSE 20256
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
20345: LD_ADDR_VAR 0 9
20349: PUSH
20350: LD_VAR 0 1
20354: PPUSH
20355: CALL_OW 250
20359: PPUSH
20360: LD_VAR 0 7
20364: PPUSH
20365: LD_VAR 0 5
20369: PPUSH
20370: CALL_OW 272
20374: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
20375: LD_ADDR_VAR 0 10
20379: PUSH
20380: LD_VAR 0 1
20384: PPUSH
20385: CALL_OW 251
20389: PPUSH
20390: LD_VAR 0 7
20394: PPUSH
20395: LD_VAR 0 5
20399: PPUSH
20400: CALL_OW 273
20404: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20405: LD_VAR 0 9
20409: PPUSH
20410: LD_VAR 0 10
20414: PPUSH
20415: CALL_OW 488
20419: NOT
20420: IFFALSE 20424
// exit ;
20422: GO 20546
// ComAnimCustom ( unit , 1 ) ;
20424: LD_VAR 0 1
20428: PPUSH
20429: LD_INT 1
20431: PPUSH
20432: CALL_OW 592
// p := 0 ;
20436: LD_ADDR_VAR 0 12
20440: PUSH
20441: LD_INT 0
20443: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
20444: LD_VAR 0 9
20448: PPUSH
20449: LD_VAR 0 10
20453: PPUSH
20454: LD_VAR 0 6
20458: PPUSH
20459: LD_VAR 0 8
20463: PPUSH
20464: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
20468: LD_INT 35
20470: PPUSH
20471: CALL_OW 67
// p := Inc ( p ) ;
20475: LD_ADDR_VAR 0 12
20479: PUSH
20480: LD_VAR 0 12
20484: PPUSH
20485: CALL 76936 0 1
20489: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
20490: LD_VAR 0 12
20494: PUSH
20495: LD_INT 3
20497: EQUAL
20498: IFTRUE 20512
20500: PUSH
20501: LD_VAR 0 1
20505: PPUSH
20506: CALL_OW 302
20510: NOT
20511: OR
20512: IFTRUE 20525
20514: PUSH
20515: LD_VAR 0 1
20519: PPUSH
20520: CALL_OW 301
20524: OR
20525: IFFALSE 20468
// RemoveSeeing ( _x , _y , side ) ;
20527: LD_VAR 0 9
20531: PPUSH
20532: LD_VAR 0 10
20536: PPUSH
20537: LD_VAR 0 6
20541: PPUSH
20542: CALL_OW 331
// end ;
20546: LD_VAR 0 4
20550: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
20551: LD_INT 0
20553: PPUSH
20554: PPUSH
20555: PPUSH
20556: PPUSH
20557: PPUSH
20558: PPUSH
20559: PPUSH
20560: PPUSH
20561: PPUSH
20562: PPUSH
20563: PPUSH
// if not unit then
20564: LD_VAR 0 1
20568: NOT
20569: IFFALSE 20573
// exit ;
20571: GO 20844
// side := GetSide ( unit ) ;
20573: LD_ADDR_VAR 0 3
20577: PUSH
20578: LD_VAR 0 1
20582: PPUSH
20583: CALL_OW 255
20587: ST_TO_ADDR
// x := GetX ( unit ) ;
20588: LD_ADDR_VAR 0 5
20592: PUSH
20593: LD_VAR 0 1
20597: PPUSH
20598: CALL_OW 250
20602: ST_TO_ADDR
// y := GetY ( unit ) ;
20603: LD_ADDR_VAR 0 6
20607: PUSH
20608: LD_VAR 0 1
20612: PPUSH
20613: CALL_OW 251
20617: ST_TO_ADDR
// r := 8 ;
20618: LD_ADDR_VAR 0 4
20622: PUSH
20623: LD_INT 8
20625: ST_TO_ADDR
// if x - r < 0 then
20626: LD_VAR 0 5
20630: PUSH
20631: LD_VAR 0 4
20635: MINUS
20636: PUSH
20637: LD_INT 0
20639: LESS
20640: IFFALSE 20652
// min_x := 0 else
20642: LD_ADDR_VAR 0 7
20646: PUSH
20647: LD_INT 0
20649: ST_TO_ADDR
20650: GO 20668
// min_x := x - r ;
20652: LD_ADDR_VAR 0 7
20656: PUSH
20657: LD_VAR 0 5
20661: PUSH
20662: LD_VAR 0 4
20666: MINUS
20667: ST_TO_ADDR
// if y - r < 0 then
20668: LD_VAR 0 6
20672: PUSH
20673: LD_VAR 0 4
20677: MINUS
20678: PUSH
20679: LD_INT 0
20681: LESS
20682: IFFALSE 20694
// min_y := 0 else
20684: LD_ADDR_VAR 0 8
20688: PUSH
20689: LD_INT 0
20691: ST_TO_ADDR
20692: GO 20710
// min_y := y - r ;
20694: LD_ADDR_VAR 0 8
20698: PUSH
20699: LD_VAR 0 6
20703: PUSH
20704: LD_VAR 0 4
20708: MINUS
20709: ST_TO_ADDR
// max_x := x + r ;
20710: LD_ADDR_VAR 0 9
20714: PUSH
20715: LD_VAR 0 5
20719: PUSH
20720: LD_VAR 0 4
20724: PLUS
20725: ST_TO_ADDR
// max_y := y + r ;
20726: LD_ADDR_VAR 0 10
20730: PUSH
20731: LD_VAR 0 6
20735: PUSH
20736: LD_VAR 0 4
20740: PLUS
20741: ST_TO_ADDR
// for _x = min_x to max_x do
20742: LD_ADDR_VAR 0 11
20746: PUSH
20747: DOUBLE
20748: LD_VAR 0 7
20752: DEC
20753: ST_TO_ADDR
20754: LD_VAR 0 9
20758: PUSH
20759: FOR_TO
20760: IFFALSE 20842
// for _y = min_y to max_y do
20762: LD_ADDR_VAR 0 12
20766: PUSH
20767: DOUBLE
20768: LD_VAR 0 8
20772: DEC
20773: ST_TO_ADDR
20774: LD_VAR 0 10
20778: PUSH
20779: FOR_TO
20780: IFFALSE 20838
// begin if not ValidHex ( _x , _y ) then
20782: LD_VAR 0 11
20786: PPUSH
20787: LD_VAR 0 12
20791: PPUSH
20792: CALL_OW 488
20796: NOT
20797: IFFALSE 20801
// continue ;
20799: GO 20779
// if MineAtPos ( _x , _y ) then
20801: LD_VAR 0 11
20805: PPUSH
20806: LD_VAR 0 12
20810: PPUSH
20811: CALL_OW 458
20815: IFFALSE 20836
// ViewMineAtPos ( _x , _y , side ) ;
20817: LD_VAR 0 11
20821: PPUSH
20822: LD_VAR 0 12
20826: PPUSH
20827: LD_VAR 0 3
20831: PPUSH
20832: CALL_OW 457
// end ;
20836: GO 20779
20838: POP
20839: POP
20840: GO 20759
20842: POP
20843: POP
// end ;
20844: LD_VAR 0 2
20848: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
20849: LD_INT 0
20851: PPUSH
20852: PPUSH
20853: PPUSH
20854: PPUSH
20855: PPUSH
20856: PPUSH
// if not units then
20857: LD_VAR 0 1
20861: NOT
20862: IFFALSE 20866
// exit ;
20864: GO 21296
// scaners := [ ] ;
20866: LD_ADDR_VAR 0 6
20870: PUSH
20871: EMPTY
20872: ST_TO_ADDR
// for i in units do
20873: LD_ADDR_VAR 0 3
20877: PUSH
20878: LD_VAR 0 1
20882: PUSH
20883: FOR_IN
20884: IFFALSE 21041
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
20886: LD_VAR 0 3
20890: PPUSH
20891: CALL_OW 264
20895: PUSH
20896: LD_INT 11
20898: NONEQUAL
20899: IFTRUE 20913
20901: PUSH
20902: LD_VAR 0 3
20906: PPUSH
20907: CALL_OW 302
20911: NOT
20912: OR
20913: IFTRUE 20930
20915: PUSH
20916: LD_VAR 0 3
20920: PPUSH
20921: CALL_OW 110
20925: PUSH
20926: LD_INT 502
20928: EQUAL
20929: OR
20930: IFFALSE 20934
// continue ;
20932: GO 20883
// ComStop ( i ) ;
20934: LD_VAR 0 3
20938: PPUSH
20939: CALL_OW 141
// x := GetX ( i ) ;
20943: LD_ADDR_VAR 0 4
20947: PUSH
20948: LD_VAR 0 3
20952: PPUSH
20953: CALL_OW 250
20957: ST_TO_ADDR
// y := GetY ( i ) ;
20958: LD_ADDR_VAR 0 5
20962: PUSH
20963: LD_VAR 0 3
20967: PPUSH
20968: CALL_OW 251
20972: ST_TO_ADDR
// if GetSide ( i ) = your_side then
20973: LD_VAR 0 3
20977: PPUSH
20978: CALL_OW 255
20982: PUSH
20983: LD_OWVAR 2
20987: EQUAL
20988: IFFALSE 21007
// PlaySoundXY ( x , y , mineDetector ) ;
20990: LD_VAR 0 4
20994: PPUSH
20995: LD_VAR 0 5
20999: PPUSH
21000: LD_STRING mineDetector
21002: PPUSH
21003: CALL_OW 366
// scaners := Join ( scaners , i ) ;
21007: LD_ADDR_VAR 0 6
21011: PUSH
21012: LD_VAR 0 6
21016: PPUSH
21017: LD_VAR 0 3
21021: PPUSH
21022: CALL 75563 0 2
21026: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
21027: LD_VAR 0 3
21031: PPUSH
21032: LD_INT 502
21034: PPUSH
21035: CALL_OW 109
// end ;
21039: GO 20883
21041: POP
21042: POP
// if not scaners then
21043: LD_VAR 0 6
21047: NOT
21048: IFFALSE 21052
// exit ;
21050: GO 21296
// wait ( 3 ) ;
21052: LD_INT 3
21054: PPUSH
21055: CALL_OW 67
// timer := 6 ;
21059: LD_ADDR_VAR 0 7
21063: PUSH
21064: LD_INT 6
21066: ST_TO_ADDR
// repeat for i in scaners do
21067: LD_ADDR_VAR 0 3
21071: PUSH
21072: LD_VAR 0 6
21076: PUSH
21077: FOR_IN
21078: IFFALSE 21194
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
21080: LD_VAR 0 3
21084: PPUSH
21085: CALL_OW 302
21089: NOT
21090: IFTRUE 21103
21092: PUSH
21093: LD_VAR 0 3
21097: PPUSH
21098: CALL_OW 314
21102: OR
21103: IFTRUE 21134
21105: PUSH
21106: LD_VAR 0 3
21110: PPUSH
21111: CALL_OW 263
21115: PUSH
21116: LD_INT 1
21118: EQUAL
21119: IFFALSE 21133
21121: PUSH
21122: LD_VAR 0 3
21126: PPUSH
21127: CALL_OW 311
21131: NOT
21132: AND
21133: OR
21134: IFFALSE 21178
// begin SetUnitDisplayNumber ( i , 0 ) ;
21136: LD_VAR 0 3
21140: PPUSH
21141: LD_INT 0
21143: PPUSH
21144: CALL_OW 505
// SetTag ( i , 0 ) ;
21148: LD_VAR 0 3
21152: PPUSH
21153: LD_INT 0
21155: PPUSH
21156: CALL_OW 109
// scaners := scaners diff i ;
21160: LD_ADDR_VAR 0 6
21164: PUSH
21165: LD_VAR 0 6
21169: PUSH
21170: LD_VAR 0 3
21174: DIFF
21175: ST_TO_ADDR
// continue ;
21176: GO 21077
// end ; SetUnitDisplayNumber ( i , timer ) ;
21178: LD_VAR 0 3
21182: PPUSH
21183: LD_VAR 0 7
21187: PPUSH
21188: CALL_OW 505
// end ;
21192: GO 21077
21194: POP
21195: POP
// if not scaners then
21196: LD_VAR 0 6
21200: NOT
21201: IFFALSE 21205
// exit ;
21203: GO 21296
// timer := Dec ( timer ) ;
21205: LD_ADDR_VAR 0 7
21209: PUSH
21210: LD_VAR 0 7
21214: PPUSH
21215: CALL 76958 0 1
21219: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21220: LD_INT 35
21222: PPUSH
21223: CALL_OW 67
// until timer = 0 ;
21227: LD_VAR 0 7
21231: PUSH
21232: LD_INT 0
21234: EQUAL
21235: IFFALSE 21067
// if not scaners then
21237: LD_VAR 0 6
21241: NOT
21242: IFFALSE 21246
// exit ;
21244: GO 21296
// for i in scaners do
21246: LD_ADDR_VAR 0 3
21250: PUSH
21251: LD_VAR 0 6
21255: PUSH
21256: FOR_IN
21257: IFFALSE 21294
// begin SetUnitDisplayNumber ( i , 0 ) ;
21259: LD_VAR 0 3
21263: PPUSH
21264: LD_INT 0
21266: PPUSH
21267: CALL_OW 505
// SetTag ( i , 0 ) ;
21271: LD_VAR 0 3
21275: PPUSH
21276: LD_INT 0
21278: PPUSH
21279: CALL_OW 109
// RevealDetectorMine ( i ) ;
21283: LD_VAR 0 3
21287: PPUSH
21288: CALL 20551 0 1
// end ;
21292: GO 21256
21294: POP
21295: POP
// end ;
21296: LD_VAR 0 2
21300: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
21301: LD_INT 0
21303: PPUSH
// if p1 = mine_detector_mode then
21304: LD_VAR 0 2
21308: PUSH
21309: LD_INT 103
21311: EQUAL
21312: IFFALSE 21323
// DetectMine ( units ) ;
21314: LD_VAR 0 1
21318: PPUSH
21319: CALL 20849 0 1
// end ; end_of_file
21323: LD_VAR 0 7
21327: RET
// export globalGameSaveCounter ; every 0 0$1 do
21328: GO 21330
21330: DISABLE
// begin enable ;
21331: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
21332: LD_STRING updateTimer(
21334: PUSH
21335: LD_OWVAR 1
21339: STR
21340: PUSH
21341: LD_STRING );
21343: STR
21344: PPUSH
21345: CALL_OW 559
// end ;
21349: END
// every 0 0$1 do
21350: GO 21352
21352: DISABLE
// begin globalGameSaveCounter := 0 ;
21353: LD_ADDR_EXP 54
21357: PUSH
21358: LD_INT 0
21360: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
21361: LD_STRING setGameSaveCounter(0)
21363: PPUSH
21364: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
21368: LD_STRING initStreamRollete();
21370: PPUSH
21371: CALL_OW 559
// InitStreamMode ;
21375: CALL 22720 0 0
// DefineStreamItems ( false ) ;
21379: LD_INT 0
21381: PPUSH
21382: CALL 23184 0 1
// end ;
21386: END
// export function SOS_MapStart ( ) ; begin
21387: LD_INT 0
21389: PPUSH
// if streamModeActive then
21390: LD_EXP 55
21394: IFFALSE 21403
// DefineStreamItems ( true ) ;
21396: LD_INT 1
21398: PPUSH
21399: CALL 23184 0 1
// UpdateLuaVariables ( ) ;
21403: CALL 21420 0 0
// UpdateFactoryWaypoints ( ) ;
21407: CALL 36306 0 0
// UpdateWarehouseGatheringPoints ( ) ;
21411: CALL 36558 0 0
// end ;
21415: LD_VAR 0 1
21419: RET
// function UpdateLuaVariables ( ) ; begin
21420: LD_INT 0
21422: PPUSH
// if globalGameSaveCounter then
21423: LD_EXP 54
21427: IFFALSE 21461
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
21429: LD_ADDR_EXP 54
21433: PUSH
21434: LD_EXP 54
21438: PPUSH
21439: CALL 76936 0 1
21443: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21444: LD_STRING setGameSaveCounter(
21446: PUSH
21447: LD_EXP 54
21451: STR
21452: PUSH
21453: LD_STRING )
21455: STR
21456: PPUSH
21457: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
21461: LD_STRING setGameDifficulty(
21463: PUSH
21464: LD_OWVAR 67
21468: STR
21469: PUSH
21470: LD_STRING )
21472: STR
21473: PPUSH
21474: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
21478: LD_STRING displayDifficulty(
21480: PUSH
21481: LD_OWVAR 67
21485: STR
21486: PUSH
21487: LD_STRING )
21489: STR
21490: PPUSH
21491: CALL_OW 559
// end ;
21495: LD_VAR 0 1
21499: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21500: LD_INT 0
21502: PPUSH
// if p2 = stream_mode then
21503: LD_VAR 0 2
21507: PUSH
21508: LD_INT 100
21510: EQUAL
21511: IFFALSE 22514
// begin if not StreamModeActive then
21513: LD_EXP 55
21517: NOT
21518: IFFALSE 21528
// StreamModeActive := true ;
21520: LD_ADDR_EXP 55
21524: PUSH
21525: LD_INT 1
21527: ST_TO_ADDR
// if p3 = 0 then
21528: LD_VAR 0 3
21532: PUSH
21533: LD_INT 0
21535: EQUAL
21536: IFFALSE 21542
// InitStreamMode ;
21538: CALL 22720 0 0
// if p3 = 1 then
21542: LD_VAR 0 3
21546: PUSH
21547: LD_INT 1
21549: EQUAL
21550: IFFALSE 21560
// sRocket := true ;
21552: LD_ADDR_EXP 60
21556: PUSH
21557: LD_INT 1
21559: ST_TO_ADDR
// if p3 = 2 then
21560: LD_VAR 0 3
21564: PUSH
21565: LD_INT 2
21567: EQUAL
21568: IFFALSE 21578
// sSpeed := true ;
21570: LD_ADDR_EXP 59
21574: PUSH
21575: LD_INT 1
21577: ST_TO_ADDR
// if p3 = 3 then
21578: LD_VAR 0 3
21582: PUSH
21583: LD_INT 3
21585: EQUAL
21586: IFFALSE 21596
// sEngine := true ;
21588: LD_ADDR_EXP 61
21592: PUSH
21593: LD_INT 1
21595: ST_TO_ADDR
// if p3 = 4 then
21596: LD_VAR 0 3
21600: PUSH
21601: LD_INT 4
21603: EQUAL
21604: IFFALSE 21614
// sSpec := true ;
21606: LD_ADDR_EXP 58
21610: PUSH
21611: LD_INT 1
21613: ST_TO_ADDR
// if p3 = 5 then
21614: LD_VAR 0 3
21618: PUSH
21619: LD_INT 5
21621: EQUAL
21622: IFFALSE 21632
// sLevel := true ;
21624: LD_ADDR_EXP 62
21628: PUSH
21629: LD_INT 1
21631: ST_TO_ADDR
// if p3 = 6 then
21632: LD_VAR 0 3
21636: PUSH
21637: LD_INT 6
21639: EQUAL
21640: IFFALSE 21650
// sArmoury := true ;
21642: LD_ADDR_EXP 63
21646: PUSH
21647: LD_INT 1
21649: ST_TO_ADDR
// if p3 = 7 then
21650: LD_VAR 0 3
21654: PUSH
21655: LD_INT 7
21657: EQUAL
21658: IFFALSE 21668
// sRadar := true ;
21660: LD_ADDR_EXP 64
21664: PUSH
21665: LD_INT 1
21667: ST_TO_ADDR
// if p3 = 8 then
21668: LD_VAR 0 3
21672: PUSH
21673: LD_INT 8
21675: EQUAL
21676: IFFALSE 21686
// sBunker := true ;
21678: LD_ADDR_EXP 65
21682: PUSH
21683: LD_INT 1
21685: ST_TO_ADDR
// if p3 = 9 then
21686: LD_VAR 0 3
21690: PUSH
21691: LD_INT 9
21693: EQUAL
21694: IFFALSE 21704
// sHack := true ;
21696: LD_ADDR_EXP 66
21700: PUSH
21701: LD_INT 1
21703: ST_TO_ADDR
// if p3 = 10 then
21704: LD_VAR 0 3
21708: PUSH
21709: LD_INT 10
21711: EQUAL
21712: IFFALSE 21722
// sFire := true ;
21714: LD_ADDR_EXP 67
21718: PUSH
21719: LD_INT 1
21721: ST_TO_ADDR
// if p3 = 11 then
21722: LD_VAR 0 3
21726: PUSH
21727: LD_INT 11
21729: EQUAL
21730: IFFALSE 21740
// sRefresh := true ;
21732: LD_ADDR_EXP 68
21736: PUSH
21737: LD_INT 1
21739: ST_TO_ADDR
// if p3 = 12 then
21740: LD_VAR 0 3
21744: PUSH
21745: LD_INT 12
21747: EQUAL
21748: IFFALSE 21758
// sExp := true ;
21750: LD_ADDR_EXP 69
21754: PUSH
21755: LD_INT 1
21757: ST_TO_ADDR
// if p3 = 13 then
21758: LD_VAR 0 3
21762: PUSH
21763: LD_INT 13
21765: EQUAL
21766: IFFALSE 21776
// sDepot := true ;
21768: LD_ADDR_EXP 70
21772: PUSH
21773: LD_INT 1
21775: ST_TO_ADDR
// if p3 = 14 then
21776: LD_VAR 0 3
21780: PUSH
21781: LD_INT 14
21783: EQUAL
21784: IFFALSE 21794
// sFlag := true ;
21786: LD_ADDR_EXP 71
21790: PUSH
21791: LD_INT 1
21793: ST_TO_ADDR
// if p3 = 15 then
21794: LD_VAR 0 3
21798: PUSH
21799: LD_INT 15
21801: EQUAL
21802: IFFALSE 21812
// sKamikadze := true ;
21804: LD_ADDR_EXP 79
21808: PUSH
21809: LD_INT 1
21811: ST_TO_ADDR
// if p3 = 16 then
21812: LD_VAR 0 3
21816: PUSH
21817: LD_INT 16
21819: EQUAL
21820: IFFALSE 21830
// sTroll := true ;
21822: LD_ADDR_EXP 80
21826: PUSH
21827: LD_INT 1
21829: ST_TO_ADDR
// if p3 = 17 then
21830: LD_VAR 0 3
21834: PUSH
21835: LD_INT 17
21837: EQUAL
21838: IFFALSE 21848
// sSlow := true ;
21840: LD_ADDR_EXP 81
21844: PUSH
21845: LD_INT 1
21847: ST_TO_ADDR
// if p3 = 18 then
21848: LD_VAR 0 3
21852: PUSH
21853: LD_INT 18
21855: EQUAL
21856: IFFALSE 21866
// sLack := true ;
21858: LD_ADDR_EXP 82
21862: PUSH
21863: LD_INT 1
21865: ST_TO_ADDR
// if p3 = 19 then
21866: LD_VAR 0 3
21870: PUSH
21871: LD_INT 19
21873: EQUAL
21874: IFFALSE 21884
// sTank := true ;
21876: LD_ADDR_EXP 84
21880: PUSH
21881: LD_INT 1
21883: ST_TO_ADDR
// if p3 = 20 then
21884: LD_VAR 0 3
21888: PUSH
21889: LD_INT 20
21891: EQUAL
21892: IFFALSE 21902
// sRemote := true ;
21894: LD_ADDR_EXP 85
21898: PUSH
21899: LD_INT 1
21901: ST_TO_ADDR
// if p3 = 21 then
21902: LD_VAR 0 3
21906: PUSH
21907: LD_INT 21
21909: EQUAL
21910: IFFALSE 21920
// sPowell := true ;
21912: LD_ADDR_EXP 86
21916: PUSH
21917: LD_INT 1
21919: ST_TO_ADDR
// if p3 = 22 then
21920: LD_VAR 0 3
21924: PUSH
21925: LD_INT 22
21927: EQUAL
21928: IFFALSE 21938
// sTeleport := true ;
21930: LD_ADDR_EXP 89
21934: PUSH
21935: LD_INT 1
21937: ST_TO_ADDR
// if p3 = 23 then
21938: LD_VAR 0 3
21942: PUSH
21943: LD_INT 23
21945: EQUAL
21946: IFFALSE 21956
// sOilTower := true ;
21948: LD_ADDR_EXP 91
21952: PUSH
21953: LD_INT 1
21955: ST_TO_ADDR
// if p3 = 24 then
21956: LD_VAR 0 3
21960: PUSH
21961: LD_INT 24
21963: EQUAL
21964: IFFALSE 21974
// sShovel := true ;
21966: LD_ADDR_EXP 92
21970: PUSH
21971: LD_INT 1
21973: ST_TO_ADDR
// if p3 = 25 then
21974: LD_VAR 0 3
21978: PUSH
21979: LD_INT 25
21981: EQUAL
21982: IFFALSE 21992
// sSheik := true ;
21984: LD_ADDR_EXP 93
21988: PUSH
21989: LD_INT 1
21991: ST_TO_ADDR
// if p3 = 26 then
21992: LD_VAR 0 3
21996: PUSH
21997: LD_INT 26
21999: EQUAL
22000: IFFALSE 22010
// sEarthquake := true ;
22002: LD_ADDR_EXP 95
22006: PUSH
22007: LD_INT 1
22009: ST_TO_ADDR
// if p3 = 27 then
22010: LD_VAR 0 3
22014: PUSH
22015: LD_INT 27
22017: EQUAL
22018: IFFALSE 22028
// sAI := true ;
22020: LD_ADDR_EXP 96
22024: PUSH
22025: LD_INT 1
22027: ST_TO_ADDR
// if p3 = 28 then
22028: LD_VAR 0 3
22032: PUSH
22033: LD_INT 28
22035: EQUAL
22036: IFFALSE 22046
// sCargo := true ;
22038: LD_ADDR_EXP 99
22042: PUSH
22043: LD_INT 1
22045: ST_TO_ADDR
// if p3 = 29 then
22046: LD_VAR 0 3
22050: PUSH
22051: LD_INT 29
22053: EQUAL
22054: IFFALSE 22064
// sDLaser := true ;
22056: LD_ADDR_EXP 100
22060: PUSH
22061: LD_INT 1
22063: ST_TO_ADDR
// if p3 = 30 then
22064: LD_VAR 0 3
22068: PUSH
22069: LD_INT 30
22071: EQUAL
22072: IFFALSE 22082
// sExchange := true ;
22074: LD_ADDR_EXP 101
22078: PUSH
22079: LD_INT 1
22081: ST_TO_ADDR
// if p3 = 31 then
22082: LD_VAR 0 3
22086: PUSH
22087: LD_INT 31
22089: EQUAL
22090: IFFALSE 22100
// sFac := true ;
22092: LD_ADDR_EXP 102
22096: PUSH
22097: LD_INT 1
22099: ST_TO_ADDR
// if p3 = 32 then
22100: LD_VAR 0 3
22104: PUSH
22105: LD_INT 32
22107: EQUAL
22108: IFFALSE 22118
// sPower := true ;
22110: LD_ADDR_EXP 103
22114: PUSH
22115: LD_INT 1
22117: ST_TO_ADDR
// if p3 = 33 then
22118: LD_VAR 0 3
22122: PUSH
22123: LD_INT 33
22125: EQUAL
22126: IFFALSE 22136
// sRandom := true ;
22128: LD_ADDR_EXP 104
22132: PUSH
22133: LD_INT 1
22135: ST_TO_ADDR
// if p3 = 34 then
22136: LD_VAR 0 3
22140: PUSH
22141: LD_INT 34
22143: EQUAL
22144: IFFALSE 22154
// sShield := true ;
22146: LD_ADDR_EXP 105
22150: PUSH
22151: LD_INT 1
22153: ST_TO_ADDR
// if p3 = 35 then
22154: LD_VAR 0 3
22158: PUSH
22159: LD_INT 35
22161: EQUAL
22162: IFFALSE 22172
// sTime := true ;
22164: LD_ADDR_EXP 106
22168: PUSH
22169: LD_INT 1
22171: ST_TO_ADDR
// if p3 = 36 then
22172: LD_VAR 0 3
22176: PUSH
22177: LD_INT 36
22179: EQUAL
22180: IFFALSE 22190
// sTools := true ;
22182: LD_ADDR_EXP 107
22186: PUSH
22187: LD_INT 1
22189: ST_TO_ADDR
// if p3 = 101 then
22190: LD_VAR 0 3
22194: PUSH
22195: LD_INT 101
22197: EQUAL
22198: IFFALSE 22208
// sSold := true ;
22200: LD_ADDR_EXP 72
22204: PUSH
22205: LD_INT 1
22207: ST_TO_ADDR
// if p3 = 102 then
22208: LD_VAR 0 3
22212: PUSH
22213: LD_INT 102
22215: EQUAL
22216: IFFALSE 22226
// sDiff := true ;
22218: LD_ADDR_EXP 73
22222: PUSH
22223: LD_INT 1
22225: ST_TO_ADDR
// if p3 = 103 then
22226: LD_VAR 0 3
22230: PUSH
22231: LD_INT 103
22233: EQUAL
22234: IFFALSE 22244
// sFog := true ;
22236: LD_ADDR_EXP 76
22240: PUSH
22241: LD_INT 1
22243: ST_TO_ADDR
// if p3 = 104 then
22244: LD_VAR 0 3
22248: PUSH
22249: LD_INT 104
22251: EQUAL
22252: IFFALSE 22262
// sReset := true ;
22254: LD_ADDR_EXP 77
22258: PUSH
22259: LD_INT 1
22261: ST_TO_ADDR
// if p3 = 105 then
22262: LD_VAR 0 3
22266: PUSH
22267: LD_INT 105
22269: EQUAL
22270: IFFALSE 22280
// sSun := true ;
22272: LD_ADDR_EXP 78
22276: PUSH
22277: LD_INT 1
22279: ST_TO_ADDR
// if p3 = 106 then
22280: LD_VAR 0 3
22284: PUSH
22285: LD_INT 106
22287: EQUAL
22288: IFFALSE 22298
// sTiger := true ;
22290: LD_ADDR_EXP 74
22294: PUSH
22295: LD_INT 1
22297: ST_TO_ADDR
// if p3 = 107 then
22298: LD_VAR 0 3
22302: PUSH
22303: LD_INT 107
22305: EQUAL
22306: IFFALSE 22316
// sBomb := true ;
22308: LD_ADDR_EXP 75
22312: PUSH
22313: LD_INT 1
22315: ST_TO_ADDR
// if p3 = 108 then
22316: LD_VAR 0 3
22320: PUSH
22321: LD_INT 108
22323: EQUAL
22324: IFFALSE 22334
// sWound := true ;
22326: LD_ADDR_EXP 83
22330: PUSH
22331: LD_INT 1
22333: ST_TO_ADDR
// if p3 = 109 then
22334: LD_VAR 0 3
22338: PUSH
22339: LD_INT 109
22341: EQUAL
22342: IFFALSE 22352
// sBetray := true ;
22344: LD_ADDR_EXP 87
22348: PUSH
22349: LD_INT 1
22351: ST_TO_ADDR
// if p3 = 110 then
22352: LD_VAR 0 3
22356: PUSH
22357: LD_INT 110
22359: EQUAL
22360: IFFALSE 22370
// sContamin := true ;
22362: LD_ADDR_EXP 88
22366: PUSH
22367: LD_INT 1
22369: ST_TO_ADDR
// if p3 = 111 then
22370: LD_VAR 0 3
22374: PUSH
22375: LD_INT 111
22377: EQUAL
22378: IFFALSE 22388
// sOil := true ;
22380: LD_ADDR_EXP 90
22384: PUSH
22385: LD_INT 1
22387: ST_TO_ADDR
// if p3 = 112 then
22388: LD_VAR 0 3
22392: PUSH
22393: LD_INT 112
22395: EQUAL
22396: IFFALSE 22406
// sStu := true ;
22398: LD_ADDR_EXP 94
22402: PUSH
22403: LD_INT 1
22405: ST_TO_ADDR
// if p3 = 113 then
22406: LD_VAR 0 3
22410: PUSH
22411: LD_INT 113
22413: EQUAL
22414: IFFALSE 22424
// sBazooka := true ;
22416: LD_ADDR_EXP 97
22420: PUSH
22421: LD_INT 1
22423: ST_TO_ADDR
// if p3 = 114 then
22424: LD_VAR 0 3
22428: PUSH
22429: LD_INT 114
22431: EQUAL
22432: IFFALSE 22442
// sMortar := true ;
22434: LD_ADDR_EXP 98
22438: PUSH
22439: LD_INT 1
22441: ST_TO_ADDR
// if p3 = 115 then
22442: LD_VAR 0 3
22446: PUSH
22447: LD_INT 115
22449: EQUAL
22450: IFFALSE 22460
// sRanger := true ;
22452: LD_ADDR_EXP 108
22456: PUSH
22457: LD_INT 1
22459: ST_TO_ADDR
// if p3 = 116 then
22460: LD_VAR 0 3
22464: PUSH
22465: LD_INT 116
22467: EQUAL
22468: IFFALSE 22478
// sComputer := true ;
22470: LD_ADDR_EXP 109
22474: PUSH
22475: LD_INT 1
22477: ST_TO_ADDR
// if p3 = 117 then
22478: LD_VAR 0 3
22482: PUSH
22483: LD_INT 117
22485: EQUAL
22486: IFFALSE 22496
// s30 := true ;
22488: LD_ADDR_EXP 110
22492: PUSH
22493: LD_INT 1
22495: ST_TO_ADDR
// if p3 = 118 then
22496: LD_VAR 0 3
22500: PUSH
22501: LD_INT 118
22503: EQUAL
22504: IFFALSE 22514
// s60 := true ;
22506: LD_ADDR_EXP 111
22510: PUSH
22511: LD_INT 1
22513: ST_TO_ADDR
// end ; if p2 = hack_mode then
22514: LD_VAR 0 2
22518: PUSH
22519: LD_INT 101
22521: EQUAL
22522: IFFALSE 22650
// begin case p3 of 1 :
22524: LD_VAR 0 3
22528: PUSH
22529: LD_INT 1
22531: DOUBLE
22532: EQUAL
22533: IFTRUE 22537
22535: GO 22544
22537: POP
// hHackUnlimitedResources ; 2 :
22538: CALL 34913 0 0
22542: GO 22650
22544: LD_INT 2
22546: DOUBLE
22547: EQUAL
22548: IFTRUE 22552
22550: GO 22559
22552: POP
// hHackSetLevel10 ; 3 :
22553: CALL 35046 0 0
22557: GO 22650
22559: LD_INT 3
22561: DOUBLE
22562: EQUAL
22563: IFTRUE 22567
22565: GO 22574
22567: POP
// hHackSetLevel10YourUnits ; 4 :
22568: CALL 35131 0 0
22572: GO 22650
22574: LD_INT 4
22576: DOUBLE
22577: EQUAL
22578: IFTRUE 22582
22580: GO 22589
22582: POP
// hHackInvincible ; 5 :
22583: CALL 35579 0 0
22587: GO 22650
22589: LD_INT 5
22591: DOUBLE
22592: EQUAL
22593: IFTRUE 22597
22595: GO 22604
22597: POP
// hHackInvisible ; 6 :
22598: CALL 35690 0 0
22602: GO 22650
22604: LD_INT 6
22606: DOUBLE
22607: EQUAL
22608: IFTRUE 22612
22610: GO 22619
22612: POP
// hHackChangeYourSide ; 7 :
22613: CALL 35747 0 0
22617: GO 22650
22619: LD_INT 7
22621: DOUBLE
22622: EQUAL
22623: IFTRUE 22627
22625: GO 22634
22627: POP
// hHackChangeUnitSide ; 8 :
22628: CALL 35789 0 0
22632: GO 22650
22634: LD_INT 8
22636: DOUBLE
22637: EQUAL
22638: IFTRUE 22642
22640: GO 22649
22642: POP
// hHackFog ; end ;
22643: CALL 35890 0 0
22647: GO 22650
22649: POP
// end ; if p2 = game_save_mode then
22650: LD_VAR 0 2
22654: PUSH
22655: LD_INT 102
22657: EQUAL
22658: IFFALSE 22715
// begin if p3 = 1 then
22660: LD_VAR 0 3
22664: PUSH
22665: LD_INT 1
22667: EQUAL
22668: IFFALSE 22680
// globalGameSaveCounter := p4 ;
22670: LD_ADDR_EXP 54
22674: PUSH
22675: LD_VAR 0 4
22679: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
22680: LD_VAR 0 3
22684: PUSH
22685: LD_INT 2
22687: EQUAL
22688: IFFALSE 22696
22690: PUSH
22691: LD_EXP 54
22695: AND
22696: IFFALSE 22715
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
22698: LD_STRING setGameSaveCounter(
22700: PUSH
22701: LD_EXP 54
22705: STR
22706: PUSH
22707: LD_STRING )
22709: STR
22710: PPUSH
22711: CALL_OW 559
// end ; end ;
22715: LD_VAR 0 7
22719: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
22720: LD_INT 0
22722: PPUSH
// streamModeActive := false ;
22723: LD_ADDR_EXP 55
22727: PUSH
22728: LD_INT 0
22730: ST_TO_ADDR
// normalCounter := 36 ;
22731: LD_ADDR_EXP 56
22735: PUSH
22736: LD_INT 36
22738: ST_TO_ADDR
// hardcoreCounter := 18 ;
22739: LD_ADDR_EXP 57
22743: PUSH
22744: LD_INT 18
22746: ST_TO_ADDR
// sRocket := false ;
22747: LD_ADDR_EXP 60
22751: PUSH
22752: LD_INT 0
22754: ST_TO_ADDR
// sSpeed := false ;
22755: LD_ADDR_EXP 59
22759: PUSH
22760: LD_INT 0
22762: ST_TO_ADDR
// sEngine := false ;
22763: LD_ADDR_EXP 61
22767: PUSH
22768: LD_INT 0
22770: ST_TO_ADDR
// sSpec := false ;
22771: LD_ADDR_EXP 58
22775: PUSH
22776: LD_INT 0
22778: ST_TO_ADDR
// sLevel := false ;
22779: LD_ADDR_EXP 62
22783: PUSH
22784: LD_INT 0
22786: ST_TO_ADDR
// sArmoury := false ;
22787: LD_ADDR_EXP 63
22791: PUSH
22792: LD_INT 0
22794: ST_TO_ADDR
// sRadar := false ;
22795: LD_ADDR_EXP 64
22799: PUSH
22800: LD_INT 0
22802: ST_TO_ADDR
// sBunker := false ;
22803: LD_ADDR_EXP 65
22807: PUSH
22808: LD_INT 0
22810: ST_TO_ADDR
// sHack := false ;
22811: LD_ADDR_EXP 66
22815: PUSH
22816: LD_INT 0
22818: ST_TO_ADDR
// sFire := false ;
22819: LD_ADDR_EXP 67
22823: PUSH
22824: LD_INT 0
22826: ST_TO_ADDR
// sRefresh := false ;
22827: LD_ADDR_EXP 68
22831: PUSH
22832: LD_INT 0
22834: ST_TO_ADDR
// sExp := false ;
22835: LD_ADDR_EXP 69
22839: PUSH
22840: LD_INT 0
22842: ST_TO_ADDR
// sDepot := false ;
22843: LD_ADDR_EXP 70
22847: PUSH
22848: LD_INT 0
22850: ST_TO_ADDR
// sFlag := false ;
22851: LD_ADDR_EXP 71
22855: PUSH
22856: LD_INT 0
22858: ST_TO_ADDR
// sKamikadze := false ;
22859: LD_ADDR_EXP 79
22863: PUSH
22864: LD_INT 0
22866: ST_TO_ADDR
// sTroll := false ;
22867: LD_ADDR_EXP 80
22871: PUSH
22872: LD_INT 0
22874: ST_TO_ADDR
// sSlow := false ;
22875: LD_ADDR_EXP 81
22879: PUSH
22880: LD_INT 0
22882: ST_TO_ADDR
// sLack := false ;
22883: LD_ADDR_EXP 82
22887: PUSH
22888: LD_INT 0
22890: ST_TO_ADDR
// sTank := false ;
22891: LD_ADDR_EXP 84
22895: PUSH
22896: LD_INT 0
22898: ST_TO_ADDR
// sRemote := false ;
22899: LD_ADDR_EXP 85
22903: PUSH
22904: LD_INT 0
22906: ST_TO_ADDR
// sPowell := false ;
22907: LD_ADDR_EXP 86
22911: PUSH
22912: LD_INT 0
22914: ST_TO_ADDR
// sTeleport := false ;
22915: LD_ADDR_EXP 89
22919: PUSH
22920: LD_INT 0
22922: ST_TO_ADDR
// sOilTower := false ;
22923: LD_ADDR_EXP 91
22927: PUSH
22928: LD_INT 0
22930: ST_TO_ADDR
// sShovel := false ;
22931: LD_ADDR_EXP 92
22935: PUSH
22936: LD_INT 0
22938: ST_TO_ADDR
// sSheik := false ;
22939: LD_ADDR_EXP 93
22943: PUSH
22944: LD_INT 0
22946: ST_TO_ADDR
// sEarthquake := false ;
22947: LD_ADDR_EXP 95
22951: PUSH
22952: LD_INT 0
22954: ST_TO_ADDR
// sAI := false ;
22955: LD_ADDR_EXP 96
22959: PUSH
22960: LD_INT 0
22962: ST_TO_ADDR
// sCargo := false ;
22963: LD_ADDR_EXP 99
22967: PUSH
22968: LD_INT 0
22970: ST_TO_ADDR
// sDLaser := false ;
22971: LD_ADDR_EXP 100
22975: PUSH
22976: LD_INT 0
22978: ST_TO_ADDR
// sExchange := false ;
22979: LD_ADDR_EXP 101
22983: PUSH
22984: LD_INT 0
22986: ST_TO_ADDR
// sFac := false ;
22987: LD_ADDR_EXP 102
22991: PUSH
22992: LD_INT 0
22994: ST_TO_ADDR
// sPower := false ;
22995: LD_ADDR_EXP 103
22999: PUSH
23000: LD_INT 0
23002: ST_TO_ADDR
// sRandom := false ;
23003: LD_ADDR_EXP 104
23007: PUSH
23008: LD_INT 0
23010: ST_TO_ADDR
// sShield := false ;
23011: LD_ADDR_EXP 105
23015: PUSH
23016: LD_INT 0
23018: ST_TO_ADDR
// sTime := false ;
23019: LD_ADDR_EXP 106
23023: PUSH
23024: LD_INT 0
23026: ST_TO_ADDR
// sTools := false ;
23027: LD_ADDR_EXP 107
23031: PUSH
23032: LD_INT 0
23034: ST_TO_ADDR
// sSold := false ;
23035: LD_ADDR_EXP 72
23039: PUSH
23040: LD_INT 0
23042: ST_TO_ADDR
// sDiff := false ;
23043: LD_ADDR_EXP 73
23047: PUSH
23048: LD_INT 0
23050: ST_TO_ADDR
// sFog := false ;
23051: LD_ADDR_EXP 76
23055: PUSH
23056: LD_INT 0
23058: ST_TO_ADDR
// sReset := false ;
23059: LD_ADDR_EXP 77
23063: PUSH
23064: LD_INT 0
23066: ST_TO_ADDR
// sSun := false ;
23067: LD_ADDR_EXP 78
23071: PUSH
23072: LD_INT 0
23074: ST_TO_ADDR
// sTiger := false ;
23075: LD_ADDR_EXP 74
23079: PUSH
23080: LD_INT 0
23082: ST_TO_ADDR
// sBomb := false ;
23083: LD_ADDR_EXP 75
23087: PUSH
23088: LD_INT 0
23090: ST_TO_ADDR
// sWound := false ;
23091: LD_ADDR_EXP 83
23095: PUSH
23096: LD_INT 0
23098: ST_TO_ADDR
// sBetray := false ;
23099: LD_ADDR_EXP 87
23103: PUSH
23104: LD_INT 0
23106: ST_TO_ADDR
// sContamin := false ;
23107: LD_ADDR_EXP 88
23111: PUSH
23112: LD_INT 0
23114: ST_TO_ADDR
// sOil := false ;
23115: LD_ADDR_EXP 90
23119: PUSH
23120: LD_INT 0
23122: ST_TO_ADDR
// sStu := false ;
23123: LD_ADDR_EXP 94
23127: PUSH
23128: LD_INT 0
23130: ST_TO_ADDR
// sBazooka := false ;
23131: LD_ADDR_EXP 97
23135: PUSH
23136: LD_INT 0
23138: ST_TO_ADDR
// sMortar := false ;
23139: LD_ADDR_EXP 98
23143: PUSH
23144: LD_INT 0
23146: ST_TO_ADDR
// sRanger := false ;
23147: LD_ADDR_EXP 108
23151: PUSH
23152: LD_INT 0
23154: ST_TO_ADDR
// sComputer := false ;
23155: LD_ADDR_EXP 109
23159: PUSH
23160: LD_INT 0
23162: ST_TO_ADDR
// s30 := false ;
23163: LD_ADDR_EXP 110
23167: PUSH
23168: LD_INT 0
23170: ST_TO_ADDR
// s60 := false ;
23171: LD_ADDR_EXP 111
23175: PUSH
23176: LD_INT 0
23178: ST_TO_ADDR
// end ;
23179: LD_VAR 0 1
23183: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
23184: LD_INT 0
23186: PPUSH
23187: PPUSH
23188: PPUSH
23189: PPUSH
23190: PPUSH
23191: PPUSH
23192: PPUSH
// result := [ ] ;
23193: LD_ADDR_VAR 0 2
23197: PUSH
23198: EMPTY
23199: ST_TO_ADDR
// if campaign_id = 1 then
23200: LD_OWVAR 69
23204: PUSH
23205: LD_INT 1
23207: EQUAL
23208: IFFALSE 26374
// begin case mission_number of 1 :
23210: LD_OWVAR 70
23214: PUSH
23215: LD_INT 1
23217: DOUBLE
23218: EQUAL
23219: IFTRUE 23223
23221: GO 23299
23223: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
23224: LD_ADDR_VAR 0 2
23228: PUSH
23229: LD_INT 2
23231: PUSH
23232: LD_INT 4
23234: PUSH
23235: LD_INT 11
23237: PUSH
23238: LD_INT 12
23240: PUSH
23241: LD_INT 15
23243: PUSH
23244: LD_INT 16
23246: PUSH
23247: LD_INT 22
23249: PUSH
23250: LD_INT 23
23252: PUSH
23253: LD_INT 26
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: PUSH
23267: LD_INT 101
23269: PUSH
23270: LD_INT 102
23272: PUSH
23273: LD_INT 106
23275: PUSH
23276: LD_INT 116
23278: PUSH
23279: LD_INT 117
23281: PUSH
23282: LD_INT 118
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: ST_TO_ADDR
23297: GO 26372
23299: LD_INT 2
23301: DOUBLE
23302: EQUAL
23303: IFTRUE 23307
23305: GO 23391
23307: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
23308: LD_ADDR_VAR 0 2
23312: PUSH
23313: LD_INT 2
23315: PUSH
23316: LD_INT 4
23318: PUSH
23319: LD_INT 11
23321: PUSH
23322: LD_INT 12
23324: PUSH
23325: LD_INT 15
23327: PUSH
23328: LD_INT 16
23330: PUSH
23331: LD_INT 22
23333: PUSH
23334: LD_INT 23
23336: PUSH
23337: LD_INT 26
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: PUSH
23351: LD_INT 101
23353: PUSH
23354: LD_INT 102
23356: PUSH
23357: LD_INT 105
23359: PUSH
23360: LD_INT 106
23362: PUSH
23363: LD_INT 108
23365: PUSH
23366: LD_INT 116
23368: PUSH
23369: LD_INT 117
23371: PUSH
23372: LD_INT 118
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: ST_TO_ADDR
23389: GO 26372
23391: LD_INT 3
23393: DOUBLE
23394: EQUAL
23395: IFTRUE 23399
23397: GO 23487
23399: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
23400: LD_ADDR_VAR 0 2
23404: PUSH
23405: LD_INT 2
23407: PUSH
23408: LD_INT 4
23410: PUSH
23411: LD_INT 5
23413: PUSH
23414: LD_INT 11
23416: PUSH
23417: LD_INT 12
23419: PUSH
23420: LD_INT 15
23422: PUSH
23423: LD_INT 16
23425: PUSH
23426: LD_INT 22
23428: PUSH
23429: LD_INT 26
23431: PUSH
23432: LD_INT 36
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: PUSH
23447: LD_INT 101
23449: PUSH
23450: LD_INT 102
23452: PUSH
23453: LD_INT 105
23455: PUSH
23456: LD_INT 106
23458: PUSH
23459: LD_INT 108
23461: PUSH
23462: LD_INT 116
23464: PUSH
23465: LD_INT 117
23467: PUSH
23468: LD_INT 118
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: ST_TO_ADDR
23485: GO 26372
23487: LD_INT 4
23489: DOUBLE
23490: EQUAL
23491: IFTRUE 23495
23493: GO 23591
23495: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
23496: LD_ADDR_VAR 0 2
23500: PUSH
23501: LD_INT 2
23503: PUSH
23504: LD_INT 4
23506: PUSH
23507: LD_INT 5
23509: PUSH
23510: LD_INT 8
23512: PUSH
23513: LD_INT 11
23515: PUSH
23516: LD_INT 12
23518: PUSH
23519: LD_INT 15
23521: PUSH
23522: LD_INT 16
23524: PUSH
23525: LD_INT 22
23527: PUSH
23528: LD_INT 23
23530: PUSH
23531: LD_INT 26
23533: PUSH
23534: LD_INT 36
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: PUSH
23551: LD_INT 101
23553: PUSH
23554: LD_INT 102
23556: PUSH
23557: LD_INT 105
23559: PUSH
23560: LD_INT 106
23562: PUSH
23563: LD_INT 108
23565: PUSH
23566: LD_INT 116
23568: PUSH
23569: LD_INT 117
23571: PUSH
23572: LD_INT 118
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: ST_TO_ADDR
23589: GO 26372
23591: LD_INT 5
23593: DOUBLE
23594: EQUAL
23595: IFTRUE 23599
23597: GO 23711
23599: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
23600: LD_ADDR_VAR 0 2
23604: PUSH
23605: LD_INT 2
23607: PUSH
23608: LD_INT 4
23610: PUSH
23611: LD_INT 5
23613: PUSH
23614: LD_INT 6
23616: PUSH
23617: LD_INT 8
23619: PUSH
23620: LD_INT 11
23622: PUSH
23623: LD_INT 12
23625: PUSH
23626: LD_INT 15
23628: PUSH
23629: LD_INT 16
23631: PUSH
23632: LD_INT 22
23634: PUSH
23635: LD_INT 23
23637: PUSH
23638: LD_INT 25
23640: PUSH
23641: LD_INT 26
23643: PUSH
23644: LD_INT 36
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 101
23665: PUSH
23666: LD_INT 102
23668: PUSH
23669: LD_INT 105
23671: PUSH
23672: LD_INT 106
23674: PUSH
23675: LD_INT 108
23677: PUSH
23678: LD_INT 109
23680: PUSH
23681: LD_INT 112
23683: PUSH
23684: LD_INT 116
23686: PUSH
23687: LD_INT 117
23689: PUSH
23690: LD_INT 118
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: ST_TO_ADDR
23709: GO 26372
23711: LD_INT 6
23713: DOUBLE
23714: EQUAL
23715: IFTRUE 23719
23717: GO 23851
23719: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
23720: LD_ADDR_VAR 0 2
23724: PUSH
23725: LD_INT 2
23727: PUSH
23728: LD_INT 4
23730: PUSH
23731: LD_INT 5
23733: PUSH
23734: LD_INT 6
23736: PUSH
23737: LD_INT 8
23739: PUSH
23740: LD_INT 11
23742: PUSH
23743: LD_INT 12
23745: PUSH
23746: LD_INT 15
23748: PUSH
23749: LD_INT 16
23751: PUSH
23752: LD_INT 20
23754: PUSH
23755: LD_INT 21
23757: PUSH
23758: LD_INT 22
23760: PUSH
23761: LD_INT 23
23763: PUSH
23764: LD_INT 25
23766: PUSH
23767: LD_INT 26
23769: PUSH
23770: LD_INT 30
23772: PUSH
23773: LD_INT 31
23775: PUSH
23776: LD_INT 32
23778: PUSH
23779: LD_INT 36
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 101
23805: PUSH
23806: LD_INT 102
23808: PUSH
23809: LD_INT 105
23811: PUSH
23812: LD_INT 106
23814: PUSH
23815: LD_INT 108
23817: PUSH
23818: LD_INT 109
23820: PUSH
23821: LD_INT 112
23823: PUSH
23824: LD_INT 116
23826: PUSH
23827: LD_INT 117
23829: PUSH
23830: LD_INT 118
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: ST_TO_ADDR
23849: GO 26372
23851: LD_INT 7
23853: DOUBLE
23854: EQUAL
23855: IFTRUE 23859
23857: GO 23971
23859: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
23860: LD_ADDR_VAR 0 2
23864: PUSH
23865: LD_INT 2
23867: PUSH
23868: LD_INT 4
23870: PUSH
23871: LD_INT 5
23873: PUSH
23874: LD_INT 7
23876: PUSH
23877: LD_INT 11
23879: PUSH
23880: LD_INT 12
23882: PUSH
23883: LD_INT 15
23885: PUSH
23886: LD_INT 16
23888: PUSH
23889: LD_INT 20
23891: PUSH
23892: LD_INT 21
23894: PUSH
23895: LD_INT 22
23897: PUSH
23898: LD_INT 23
23900: PUSH
23901: LD_INT 25
23903: PUSH
23904: LD_INT 26
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: PUSH
23923: LD_INT 101
23925: PUSH
23926: LD_INT 102
23928: PUSH
23929: LD_INT 103
23931: PUSH
23932: LD_INT 105
23934: PUSH
23935: LD_INT 106
23937: PUSH
23938: LD_INT 108
23940: PUSH
23941: LD_INT 112
23943: PUSH
23944: LD_INT 116
23946: PUSH
23947: LD_INT 117
23949: PUSH
23950: LD_INT 118
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: ST_TO_ADDR
23969: GO 26372
23971: LD_INT 8
23973: DOUBLE
23974: EQUAL
23975: IFTRUE 23979
23977: GO 24119
23979: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
23980: LD_ADDR_VAR 0 2
23984: PUSH
23985: LD_INT 2
23987: PUSH
23988: LD_INT 4
23990: PUSH
23991: LD_INT 5
23993: PUSH
23994: LD_INT 6
23996: PUSH
23997: LD_INT 7
23999: PUSH
24000: LD_INT 8
24002: PUSH
24003: LD_INT 11
24005: PUSH
24006: LD_INT 12
24008: PUSH
24009: LD_INT 15
24011: PUSH
24012: LD_INT 16
24014: PUSH
24015: LD_INT 20
24017: PUSH
24018: LD_INT 21
24020: PUSH
24021: LD_INT 22
24023: PUSH
24024: LD_INT 23
24026: PUSH
24027: LD_INT 25
24029: PUSH
24030: LD_INT 26
24032: PUSH
24033: LD_INT 30
24035: PUSH
24036: LD_INT 31
24038: PUSH
24039: LD_INT 32
24041: PUSH
24042: LD_INT 36
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 101
24069: PUSH
24070: LD_INT 102
24072: PUSH
24073: LD_INT 103
24075: PUSH
24076: LD_INT 105
24078: PUSH
24079: LD_INT 106
24081: PUSH
24082: LD_INT 108
24084: PUSH
24085: LD_INT 109
24087: PUSH
24088: LD_INT 112
24090: PUSH
24091: LD_INT 116
24093: PUSH
24094: LD_INT 117
24096: PUSH
24097: LD_INT 118
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: ST_TO_ADDR
24117: GO 26372
24119: LD_INT 9
24121: DOUBLE
24122: EQUAL
24123: IFTRUE 24127
24125: GO 24275
24127: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
24128: LD_ADDR_VAR 0 2
24132: PUSH
24133: LD_INT 2
24135: PUSH
24136: LD_INT 4
24138: PUSH
24139: LD_INT 5
24141: PUSH
24142: LD_INT 6
24144: PUSH
24145: LD_INT 7
24147: PUSH
24148: LD_INT 8
24150: PUSH
24151: LD_INT 11
24153: PUSH
24154: LD_INT 12
24156: PUSH
24157: LD_INT 15
24159: PUSH
24160: LD_INT 16
24162: PUSH
24163: LD_INT 20
24165: PUSH
24166: LD_INT 21
24168: PUSH
24169: LD_INT 22
24171: PUSH
24172: LD_INT 23
24174: PUSH
24175: LD_INT 25
24177: PUSH
24178: LD_INT 26
24180: PUSH
24181: LD_INT 28
24183: PUSH
24184: LD_INT 30
24186: PUSH
24187: LD_INT 31
24189: PUSH
24190: LD_INT 32
24192: PUSH
24193: LD_INT 36
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 101
24221: PUSH
24222: LD_INT 102
24224: PUSH
24225: LD_INT 103
24227: PUSH
24228: LD_INT 105
24230: PUSH
24231: LD_INT 106
24233: PUSH
24234: LD_INT 108
24236: PUSH
24237: LD_INT 109
24239: PUSH
24240: LD_INT 112
24242: PUSH
24243: LD_INT 114
24245: PUSH
24246: LD_INT 116
24248: PUSH
24249: LD_INT 117
24251: PUSH
24252: LD_INT 118
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: ST_TO_ADDR
24273: GO 26372
24275: LD_INT 10
24277: DOUBLE
24278: EQUAL
24279: IFTRUE 24283
24281: GO 24479
24283: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
24284: LD_ADDR_VAR 0 2
24288: PUSH
24289: LD_INT 2
24291: PUSH
24292: LD_INT 4
24294: PUSH
24295: LD_INT 5
24297: PUSH
24298: LD_INT 6
24300: PUSH
24301: LD_INT 7
24303: PUSH
24304: LD_INT 8
24306: PUSH
24307: LD_INT 9
24309: PUSH
24310: LD_INT 10
24312: PUSH
24313: LD_INT 11
24315: PUSH
24316: LD_INT 12
24318: PUSH
24319: LD_INT 13
24321: PUSH
24322: LD_INT 14
24324: PUSH
24325: LD_INT 15
24327: PUSH
24328: LD_INT 16
24330: PUSH
24331: LD_INT 17
24333: PUSH
24334: LD_INT 18
24336: PUSH
24337: LD_INT 19
24339: PUSH
24340: LD_INT 20
24342: PUSH
24343: LD_INT 21
24345: PUSH
24346: LD_INT 22
24348: PUSH
24349: LD_INT 23
24351: PUSH
24352: LD_INT 24
24354: PUSH
24355: LD_INT 25
24357: PUSH
24358: LD_INT 26
24360: PUSH
24361: LD_INT 28
24363: PUSH
24364: LD_INT 30
24366: PUSH
24367: LD_INT 31
24369: PUSH
24370: LD_INT 32
24372: PUSH
24373: LD_INT 36
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 101
24409: PUSH
24410: LD_INT 102
24412: PUSH
24413: LD_INT 103
24415: PUSH
24416: LD_INT 104
24418: PUSH
24419: LD_INT 105
24421: PUSH
24422: LD_INT 106
24424: PUSH
24425: LD_INT 107
24427: PUSH
24428: LD_INT 108
24430: PUSH
24431: LD_INT 109
24433: PUSH
24434: LD_INT 110
24436: PUSH
24437: LD_INT 111
24439: PUSH
24440: LD_INT 112
24442: PUSH
24443: LD_INT 114
24445: PUSH
24446: LD_INT 116
24448: PUSH
24449: LD_INT 117
24451: PUSH
24452: LD_INT 118
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: ST_TO_ADDR
24477: GO 26372
24479: LD_INT 11
24481: DOUBLE
24482: EQUAL
24483: IFTRUE 24487
24485: GO 24691
24487: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
24488: LD_ADDR_VAR 0 2
24492: PUSH
24493: LD_INT 2
24495: PUSH
24496: LD_INT 3
24498: PUSH
24499: LD_INT 4
24501: PUSH
24502: LD_INT 5
24504: PUSH
24505: LD_INT 6
24507: PUSH
24508: LD_INT 7
24510: PUSH
24511: LD_INT 8
24513: PUSH
24514: LD_INT 9
24516: PUSH
24517: LD_INT 10
24519: PUSH
24520: LD_INT 11
24522: PUSH
24523: LD_INT 12
24525: PUSH
24526: LD_INT 13
24528: PUSH
24529: LD_INT 14
24531: PUSH
24532: LD_INT 15
24534: PUSH
24535: LD_INT 16
24537: PUSH
24538: LD_INT 17
24540: PUSH
24541: LD_INT 18
24543: PUSH
24544: LD_INT 19
24546: PUSH
24547: LD_INT 20
24549: PUSH
24550: LD_INT 21
24552: PUSH
24553: LD_INT 22
24555: PUSH
24556: LD_INT 23
24558: PUSH
24559: LD_INT 24
24561: PUSH
24562: LD_INT 25
24564: PUSH
24565: LD_INT 26
24567: PUSH
24568: LD_INT 28
24570: PUSH
24571: LD_INT 30
24573: PUSH
24574: LD_INT 31
24576: PUSH
24577: LD_INT 32
24579: PUSH
24580: LD_INT 34
24582: PUSH
24583: LD_INT 36
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 101
24621: PUSH
24622: LD_INT 102
24624: PUSH
24625: LD_INT 103
24627: PUSH
24628: LD_INT 104
24630: PUSH
24631: LD_INT 105
24633: PUSH
24634: LD_INT 106
24636: PUSH
24637: LD_INT 107
24639: PUSH
24640: LD_INT 108
24642: PUSH
24643: LD_INT 109
24645: PUSH
24646: LD_INT 110
24648: PUSH
24649: LD_INT 111
24651: PUSH
24652: LD_INT 112
24654: PUSH
24655: LD_INT 114
24657: PUSH
24658: LD_INT 116
24660: PUSH
24661: LD_INT 117
24663: PUSH
24664: LD_INT 118
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: ST_TO_ADDR
24689: GO 26372
24691: LD_INT 12
24693: DOUBLE
24694: EQUAL
24695: IFTRUE 24699
24697: GO 24919
24699: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
24700: LD_ADDR_VAR 0 2
24704: PUSH
24705: LD_INT 1
24707: PUSH
24708: LD_INT 2
24710: PUSH
24711: LD_INT 3
24713: PUSH
24714: LD_INT 4
24716: PUSH
24717: LD_INT 5
24719: PUSH
24720: LD_INT 6
24722: PUSH
24723: LD_INT 7
24725: PUSH
24726: LD_INT 8
24728: PUSH
24729: LD_INT 9
24731: PUSH
24732: LD_INT 10
24734: PUSH
24735: LD_INT 11
24737: PUSH
24738: LD_INT 12
24740: PUSH
24741: LD_INT 13
24743: PUSH
24744: LD_INT 14
24746: PUSH
24747: LD_INT 15
24749: PUSH
24750: LD_INT 16
24752: PUSH
24753: LD_INT 17
24755: PUSH
24756: LD_INT 18
24758: PUSH
24759: LD_INT 19
24761: PUSH
24762: LD_INT 20
24764: PUSH
24765: LD_INT 21
24767: PUSH
24768: LD_INT 22
24770: PUSH
24771: LD_INT 23
24773: PUSH
24774: LD_INT 24
24776: PUSH
24777: LD_INT 25
24779: PUSH
24780: LD_INT 26
24782: PUSH
24783: LD_INT 27
24785: PUSH
24786: LD_INT 28
24788: PUSH
24789: LD_INT 30
24791: PUSH
24792: LD_INT 31
24794: PUSH
24795: LD_INT 32
24797: PUSH
24798: LD_INT 33
24800: PUSH
24801: LD_INT 34
24803: PUSH
24804: LD_INT 36
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 101
24845: PUSH
24846: LD_INT 102
24848: PUSH
24849: LD_INT 103
24851: PUSH
24852: LD_INT 104
24854: PUSH
24855: LD_INT 105
24857: PUSH
24858: LD_INT 106
24860: PUSH
24861: LD_INT 107
24863: PUSH
24864: LD_INT 108
24866: PUSH
24867: LD_INT 109
24869: PUSH
24870: LD_INT 110
24872: PUSH
24873: LD_INT 111
24875: PUSH
24876: LD_INT 112
24878: PUSH
24879: LD_INT 113
24881: PUSH
24882: LD_INT 114
24884: PUSH
24885: LD_INT 116
24887: PUSH
24888: LD_INT 117
24890: PUSH
24891: LD_INT 118
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: ST_TO_ADDR
24917: GO 26372
24919: LD_INT 13
24921: DOUBLE
24922: EQUAL
24923: IFTRUE 24927
24925: GO 25135
24927: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
24928: LD_ADDR_VAR 0 2
24932: PUSH
24933: LD_INT 1
24935: PUSH
24936: LD_INT 2
24938: PUSH
24939: LD_INT 3
24941: PUSH
24942: LD_INT 4
24944: PUSH
24945: LD_INT 5
24947: PUSH
24948: LD_INT 8
24950: PUSH
24951: LD_INT 9
24953: PUSH
24954: LD_INT 10
24956: PUSH
24957: LD_INT 11
24959: PUSH
24960: LD_INT 12
24962: PUSH
24963: LD_INT 14
24965: PUSH
24966: LD_INT 15
24968: PUSH
24969: LD_INT 16
24971: PUSH
24972: LD_INT 17
24974: PUSH
24975: LD_INT 18
24977: PUSH
24978: LD_INT 19
24980: PUSH
24981: LD_INT 20
24983: PUSH
24984: LD_INT 21
24986: PUSH
24987: LD_INT 22
24989: PUSH
24990: LD_INT 23
24992: PUSH
24993: LD_INT 24
24995: PUSH
24996: LD_INT 25
24998: PUSH
24999: LD_INT 26
25001: PUSH
25002: LD_INT 27
25004: PUSH
25005: LD_INT 28
25007: PUSH
25008: LD_INT 30
25010: PUSH
25011: LD_INT 31
25013: PUSH
25014: LD_INT 32
25016: PUSH
25017: LD_INT 33
25019: PUSH
25020: LD_INT 34
25022: PUSH
25023: LD_INT 36
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: PUSH
25059: LD_INT 101
25061: PUSH
25062: LD_INT 102
25064: PUSH
25065: LD_INT 103
25067: PUSH
25068: LD_INT 104
25070: PUSH
25071: LD_INT 105
25073: PUSH
25074: LD_INT 106
25076: PUSH
25077: LD_INT 107
25079: PUSH
25080: LD_INT 108
25082: PUSH
25083: LD_INT 109
25085: PUSH
25086: LD_INT 110
25088: PUSH
25089: LD_INT 111
25091: PUSH
25092: LD_INT 112
25094: PUSH
25095: LD_INT 113
25097: PUSH
25098: LD_INT 114
25100: PUSH
25101: LD_INT 116
25103: PUSH
25104: LD_INT 117
25106: PUSH
25107: LD_INT 118
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: ST_TO_ADDR
25133: GO 26372
25135: LD_INT 14
25137: DOUBLE
25138: EQUAL
25139: IFTRUE 25143
25141: GO 25367
25143: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
25144: LD_ADDR_VAR 0 2
25148: PUSH
25149: LD_INT 1
25151: PUSH
25152: LD_INT 2
25154: PUSH
25155: LD_INT 3
25157: PUSH
25158: LD_INT 4
25160: PUSH
25161: LD_INT 5
25163: PUSH
25164: LD_INT 6
25166: PUSH
25167: LD_INT 7
25169: PUSH
25170: LD_INT 8
25172: PUSH
25173: LD_INT 9
25175: PUSH
25176: LD_INT 10
25178: PUSH
25179: LD_INT 11
25181: PUSH
25182: LD_INT 12
25184: PUSH
25185: LD_INT 13
25187: PUSH
25188: LD_INT 14
25190: PUSH
25191: LD_INT 15
25193: PUSH
25194: LD_INT 16
25196: PUSH
25197: LD_INT 17
25199: PUSH
25200: LD_INT 18
25202: PUSH
25203: LD_INT 19
25205: PUSH
25206: LD_INT 20
25208: PUSH
25209: LD_INT 21
25211: PUSH
25212: LD_INT 22
25214: PUSH
25215: LD_INT 23
25217: PUSH
25218: LD_INT 24
25220: PUSH
25221: LD_INT 25
25223: PUSH
25224: LD_INT 26
25226: PUSH
25227: LD_INT 27
25229: PUSH
25230: LD_INT 28
25232: PUSH
25233: LD_INT 29
25235: PUSH
25236: LD_INT 30
25238: PUSH
25239: LD_INT 31
25241: PUSH
25242: LD_INT 32
25244: PUSH
25245: LD_INT 33
25247: PUSH
25248: LD_INT 34
25250: PUSH
25251: LD_INT 36
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 101
25293: PUSH
25294: LD_INT 102
25296: PUSH
25297: LD_INT 103
25299: PUSH
25300: LD_INT 104
25302: PUSH
25303: LD_INT 105
25305: PUSH
25306: LD_INT 106
25308: PUSH
25309: LD_INT 107
25311: PUSH
25312: LD_INT 108
25314: PUSH
25315: LD_INT 109
25317: PUSH
25318: LD_INT 110
25320: PUSH
25321: LD_INT 111
25323: PUSH
25324: LD_INT 112
25326: PUSH
25327: LD_INT 113
25329: PUSH
25330: LD_INT 114
25332: PUSH
25333: LD_INT 116
25335: PUSH
25336: LD_INT 117
25338: PUSH
25339: LD_INT 118
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: ST_TO_ADDR
25365: GO 26372
25367: LD_INT 15
25369: DOUBLE
25370: EQUAL
25371: IFTRUE 25375
25373: GO 25599
25375: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
25376: LD_ADDR_VAR 0 2
25380: PUSH
25381: LD_INT 1
25383: PUSH
25384: LD_INT 2
25386: PUSH
25387: LD_INT 3
25389: PUSH
25390: LD_INT 4
25392: PUSH
25393: LD_INT 5
25395: PUSH
25396: LD_INT 6
25398: PUSH
25399: LD_INT 7
25401: PUSH
25402: LD_INT 8
25404: PUSH
25405: LD_INT 9
25407: PUSH
25408: LD_INT 10
25410: PUSH
25411: LD_INT 11
25413: PUSH
25414: LD_INT 12
25416: PUSH
25417: LD_INT 13
25419: PUSH
25420: LD_INT 14
25422: PUSH
25423: LD_INT 15
25425: PUSH
25426: LD_INT 16
25428: PUSH
25429: LD_INT 17
25431: PUSH
25432: LD_INT 18
25434: PUSH
25435: LD_INT 19
25437: PUSH
25438: LD_INT 20
25440: PUSH
25441: LD_INT 21
25443: PUSH
25444: LD_INT 22
25446: PUSH
25447: LD_INT 23
25449: PUSH
25450: LD_INT 24
25452: PUSH
25453: LD_INT 25
25455: PUSH
25456: LD_INT 26
25458: PUSH
25459: LD_INT 27
25461: PUSH
25462: LD_INT 28
25464: PUSH
25465: LD_INT 29
25467: PUSH
25468: LD_INT 30
25470: PUSH
25471: LD_INT 31
25473: PUSH
25474: LD_INT 32
25476: PUSH
25477: LD_INT 33
25479: PUSH
25480: LD_INT 34
25482: PUSH
25483: LD_INT 36
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 101
25525: PUSH
25526: LD_INT 102
25528: PUSH
25529: LD_INT 103
25531: PUSH
25532: LD_INT 104
25534: PUSH
25535: LD_INT 105
25537: PUSH
25538: LD_INT 106
25540: PUSH
25541: LD_INT 107
25543: PUSH
25544: LD_INT 108
25546: PUSH
25547: LD_INT 109
25549: PUSH
25550: LD_INT 110
25552: PUSH
25553: LD_INT 111
25555: PUSH
25556: LD_INT 112
25558: PUSH
25559: LD_INT 113
25561: PUSH
25562: LD_INT 114
25564: PUSH
25565: LD_INT 116
25567: PUSH
25568: LD_INT 117
25570: PUSH
25571: LD_INT 118
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: ST_TO_ADDR
25597: GO 26372
25599: LD_INT 16
25601: DOUBLE
25602: EQUAL
25603: IFTRUE 25607
25605: GO 25743
25607: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
25608: LD_ADDR_VAR 0 2
25612: PUSH
25613: LD_INT 2
25615: PUSH
25616: LD_INT 4
25618: PUSH
25619: LD_INT 5
25621: PUSH
25622: LD_INT 7
25624: PUSH
25625: LD_INT 11
25627: PUSH
25628: LD_INT 12
25630: PUSH
25631: LD_INT 15
25633: PUSH
25634: LD_INT 16
25636: PUSH
25637: LD_INT 20
25639: PUSH
25640: LD_INT 21
25642: PUSH
25643: LD_INT 22
25645: PUSH
25646: LD_INT 23
25648: PUSH
25649: LD_INT 25
25651: PUSH
25652: LD_INT 26
25654: PUSH
25655: LD_INT 30
25657: PUSH
25658: LD_INT 31
25660: PUSH
25661: LD_INT 32
25663: PUSH
25664: LD_INT 33
25666: PUSH
25667: LD_INT 34
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 101
25693: PUSH
25694: LD_INT 102
25696: PUSH
25697: LD_INT 103
25699: PUSH
25700: LD_INT 106
25702: PUSH
25703: LD_INT 108
25705: PUSH
25706: LD_INT 112
25708: PUSH
25709: LD_INT 113
25711: PUSH
25712: LD_INT 114
25714: PUSH
25715: LD_INT 116
25717: PUSH
25718: LD_INT 117
25720: PUSH
25721: LD_INT 118
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: ST_TO_ADDR
25741: GO 26372
25743: LD_INT 17
25745: DOUBLE
25746: EQUAL
25747: IFTRUE 25751
25749: GO 25975
25751: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
25752: LD_ADDR_VAR 0 2
25756: PUSH
25757: LD_INT 1
25759: PUSH
25760: LD_INT 2
25762: PUSH
25763: LD_INT 3
25765: PUSH
25766: LD_INT 4
25768: PUSH
25769: LD_INT 5
25771: PUSH
25772: LD_INT 6
25774: PUSH
25775: LD_INT 7
25777: PUSH
25778: LD_INT 8
25780: PUSH
25781: LD_INT 9
25783: PUSH
25784: LD_INT 10
25786: PUSH
25787: LD_INT 11
25789: PUSH
25790: LD_INT 12
25792: PUSH
25793: LD_INT 13
25795: PUSH
25796: LD_INT 14
25798: PUSH
25799: LD_INT 15
25801: PUSH
25802: LD_INT 16
25804: PUSH
25805: LD_INT 17
25807: PUSH
25808: LD_INT 18
25810: PUSH
25811: LD_INT 19
25813: PUSH
25814: LD_INT 20
25816: PUSH
25817: LD_INT 21
25819: PUSH
25820: LD_INT 22
25822: PUSH
25823: LD_INT 23
25825: PUSH
25826: LD_INT 24
25828: PUSH
25829: LD_INT 25
25831: PUSH
25832: LD_INT 26
25834: PUSH
25835: LD_INT 27
25837: PUSH
25838: LD_INT 28
25840: PUSH
25841: LD_INT 29
25843: PUSH
25844: LD_INT 30
25846: PUSH
25847: LD_INT 31
25849: PUSH
25850: LD_INT 32
25852: PUSH
25853: LD_INT 33
25855: PUSH
25856: LD_INT 34
25858: PUSH
25859: LD_INT 36
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 101
25901: PUSH
25902: LD_INT 102
25904: PUSH
25905: LD_INT 103
25907: PUSH
25908: LD_INT 104
25910: PUSH
25911: LD_INT 105
25913: PUSH
25914: LD_INT 106
25916: PUSH
25917: LD_INT 107
25919: PUSH
25920: LD_INT 108
25922: PUSH
25923: LD_INT 109
25925: PUSH
25926: LD_INT 110
25928: PUSH
25929: LD_INT 111
25931: PUSH
25932: LD_INT 112
25934: PUSH
25935: LD_INT 113
25937: PUSH
25938: LD_INT 114
25940: PUSH
25941: LD_INT 116
25943: PUSH
25944: LD_INT 117
25946: PUSH
25947: LD_INT 118
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: ST_TO_ADDR
25973: GO 26372
25975: LD_INT 18
25977: DOUBLE
25978: EQUAL
25979: IFTRUE 25983
25981: GO 26131
25983: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
25984: LD_ADDR_VAR 0 2
25988: PUSH
25989: LD_INT 2
25991: PUSH
25992: LD_INT 4
25994: PUSH
25995: LD_INT 5
25997: PUSH
25998: LD_INT 7
26000: PUSH
26001: LD_INT 11
26003: PUSH
26004: LD_INT 12
26006: PUSH
26007: LD_INT 15
26009: PUSH
26010: LD_INT 16
26012: PUSH
26013: LD_INT 20
26015: PUSH
26016: LD_INT 21
26018: PUSH
26019: LD_INT 22
26021: PUSH
26022: LD_INT 23
26024: PUSH
26025: LD_INT 25
26027: PUSH
26028: LD_INT 26
26030: PUSH
26031: LD_INT 30
26033: PUSH
26034: LD_INT 31
26036: PUSH
26037: LD_INT 32
26039: PUSH
26040: LD_INT 33
26042: PUSH
26043: LD_INT 34
26045: PUSH
26046: LD_INT 35
26048: PUSH
26049: LD_INT 36
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: PUSH
26075: LD_INT 101
26077: PUSH
26078: LD_INT 102
26080: PUSH
26081: LD_INT 103
26083: PUSH
26084: LD_INT 106
26086: PUSH
26087: LD_INT 108
26089: PUSH
26090: LD_INT 112
26092: PUSH
26093: LD_INT 113
26095: PUSH
26096: LD_INT 114
26098: PUSH
26099: LD_INT 115
26101: PUSH
26102: LD_INT 116
26104: PUSH
26105: LD_INT 117
26107: PUSH
26108: LD_INT 118
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: ST_TO_ADDR
26129: GO 26372
26131: LD_INT 19
26133: DOUBLE
26134: EQUAL
26135: IFTRUE 26139
26137: GO 26371
26139: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
26140: LD_ADDR_VAR 0 2
26144: PUSH
26145: LD_INT 1
26147: PUSH
26148: LD_INT 2
26150: PUSH
26151: LD_INT 3
26153: PUSH
26154: LD_INT 4
26156: PUSH
26157: LD_INT 5
26159: PUSH
26160: LD_INT 6
26162: PUSH
26163: LD_INT 7
26165: PUSH
26166: LD_INT 8
26168: PUSH
26169: LD_INT 9
26171: PUSH
26172: LD_INT 10
26174: PUSH
26175: LD_INT 11
26177: PUSH
26178: LD_INT 12
26180: PUSH
26181: LD_INT 13
26183: PUSH
26184: LD_INT 14
26186: PUSH
26187: LD_INT 15
26189: PUSH
26190: LD_INT 16
26192: PUSH
26193: LD_INT 17
26195: PUSH
26196: LD_INT 18
26198: PUSH
26199: LD_INT 19
26201: PUSH
26202: LD_INT 20
26204: PUSH
26205: LD_INT 21
26207: PUSH
26208: LD_INT 22
26210: PUSH
26211: LD_INT 23
26213: PUSH
26214: LD_INT 24
26216: PUSH
26217: LD_INT 25
26219: PUSH
26220: LD_INT 26
26222: PUSH
26223: LD_INT 27
26225: PUSH
26226: LD_INT 28
26228: PUSH
26229: LD_INT 29
26231: PUSH
26232: LD_INT 30
26234: PUSH
26235: LD_INT 31
26237: PUSH
26238: LD_INT 32
26240: PUSH
26241: LD_INT 33
26243: PUSH
26244: LD_INT 34
26246: PUSH
26247: LD_INT 35
26249: PUSH
26250: LD_INT 36
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: PUSH
26291: LD_INT 101
26293: PUSH
26294: LD_INT 102
26296: PUSH
26297: LD_INT 103
26299: PUSH
26300: LD_INT 104
26302: PUSH
26303: LD_INT 105
26305: PUSH
26306: LD_INT 106
26308: PUSH
26309: LD_INT 107
26311: PUSH
26312: LD_INT 108
26314: PUSH
26315: LD_INT 109
26317: PUSH
26318: LD_INT 110
26320: PUSH
26321: LD_INT 111
26323: PUSH
26324: LD_INT 112
26326: PUSH
26327: LD_INT 113
26329: PUSH
26330: LD_INT 114
26332: PUSH
26333: LD_INT 115
26335: PUSH
26336: LD_INT 116
26338: PUSH
26339: LD_INT 117
26341: PUSH
26342: LD_INT 118
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: ST_TO_ADDR
26369: GO 26372
26371: POP
// end else
26372: GO 26603
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
26374: LD_ADDR_VAR 0 2
26378: PUSH
26379: LD_INT 1
26381: PUSH
26382: LD_INT 2
26384: PUSH
26385: LD_INT 3
26387: PUSH
26388: LD_INT 4
26390: PUSH
26391: LD_INT 5
26393: PUSH
26394: LD_INT 6
26396: PUSH
26397: LD_INT 7
26399: PUSH
26400: LD_INT 8
26402: PUSH
26403: LD_INT 9
26405: PUSH
26406: LD_INT 10
26408: PUSH
26409: LD_INT 11
26411: PUSH
26412: LD_INT 12
26414: PUSH
26415: LD_INT 13
26417: PUSH
26418: LD_INT 14
26420: PUSH
26421: LD_INT 15
26423: PUSH
26424: LD_INT 16
26426: PUSH
26427: LD_INT 17
26429: PUSH
26430: LD_INT 18
26432: PUSH
26433: LD_INT 19
26435: PUSH
26436: LD_INT 20
26438: PUSH
26439: LD_INT 21
26441: PUSH
26442: LD_INT 22
26444: PUSH
26445: LD_INT 23
26447: PUSH
26448: LD_INT 24
26450: PUSH
26451: LD_INT 25
26453: PUSH
26454: LD_INT 26
26456: PUSH
26457: LD_INT 27
26459: PUSH
26460: LD_INT 28
26462: PUSH
26463: LD_INT 29
26465: PUSH
26466: LD_INT 30
26468: PUSH
26469: LD_INT 31
26471: PUSH
26472: LD_INT 32
26474: PUSH
26475: LD_INT 33
26477: PUSH
26478: LD_INT 34
26480: PUSH
26481: LD_INT 35
26483: PUSH
26484: LD_INT 36
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 101
26527: PUSH
26528: LD_INT 102
26530: PUSH
26531: LD_INT 103
26533: PUSH
26534: LD_INT 104
26536: PUSH
26537: LD_INT 105
26539: PUSH
26540: LD_INT 106
26542: PUSH
26543: LD_INT 107
26545: PUSH
26546: LD_INT 108
26548: PUSH
26549: LD_INT 109
26551: PUSH
26552: LD_INT 110
26554: PUSH
26555: LD_INT 111
26557: PUSH
26558: LD_INT 112
26560: PUSH
26561: LD_INT 113
26563: PUSH
26564: LD_INT 114
26566: PUSH
26567: LD_INT 115
26569: PUSH
26570: LD_INT 116
26572: PUSH
26573: LD_INT 117
26575: PUSH
26576: LD_INT 118
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: ST_TO_ADDR
// if result then
26603: LD_VAR 0 2
26607: IFFALSE 27393
// begin normal :=  ;
26609: LD_ADDR_VAR 0 5
26613: PUSH
26614: LD_STRING 
26616: ST_TO_ADDR
// hardcore :=  ;
26617: LD_ADDR_VAR 0 6
26621: PUSH
26622: LD_STRING 
26624: ST_TO_ADDR
// active :=  ;
26625: LD_ADDR_VAR 0 7
26629: PUSH
26630: LD_STRING 
26632: ST_TO_ADDR
// for i = 1 to normalCounter do
26633: LD_ADDR_VAR 0 8
26637: PUSH
26638: DOUBLE
26639: LD_INT 1
26641: DEC
26642: ST_TO_ADDR
26643: LD_EXP 56
26647: PUSH
26648: FOR_TO
26649: IFFALSE 26750
// begin tmp := 0 ;
26651: LD_ADDR_VAR 0 3
26655: PUSH
26656: LD_STRING 0
26658: ST_TO_ADDR
// if result [ 1 ] then
26659: LD_VAR 0 2
26663: PUSH
26664: LD_INT 1
26666: ARRAY
26667: IFFALSE 26732
// if result [ 1 ] [ 1 ] = i then
26669: LD_VAR 0 2
26673: PUSH
26674: LD_INT 1
26676: ARRAY
26677: PUSH
26678: LD_INT 1
26680: ARRAY
26681: PUSH
26682: LD_VAR 0 8
26686: EQUAL
26687: IFFALSE 26732
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
26689: LD_ADDR_VAR 0 2
26693: PUSH
26694: LD_VAR 0 2
26698: PPUSH
26699: LD_INT 1
26701: PPUSH
26702: LD_VAR 0 2
26706: PUSH
26707: LD_INT 1
26709: ARRAY
26710: PPUSH
26711: LD_INT 1
26713: PPUSH
26714: CALL_OW 3
26718: PPUSH
26719: CALL_OW 1
26723: ST_TO_ADDR
// tmp := 1 ;
26724: LD_ADDR_VAR 0 3
26728: PUSH
26729: LD_STRING 1
26731: ST_TO_ADDR
// end ; normal := normal & tmp ;
26732: LD_ADDR_VAR 0 5
26736: PUSH
26737: LD_VAR 0 5
26741: PUSH
26742: LD_VAR 0 3
26746: STR
26747: ST_TO_ADDR
// end ;
26748: GO 26648
26750: POP
26751: POP
// for i = 1 to hardcoreCounter do
26752: LD_ADDR_VAR 0 8
26756: PUSH
26757: DOUBLE
26758: LD_INT 1
26760: DEC
26761: ST_TO_ADDR
26762: LD_EXP 57
26766: PUSH
26767: FOR_TO
26768: IFFALSE 26873
// begin tmp := 0 ;
26770: LD_ADDR_VAR 0 3
26774: PUSH
26775: LD_STRING 0
26777: ST_TO_ADDR
// if result [ 2 ] then
26778: LD_VAR 0 2
26782: PUSH
26783: LD_INT 2
26785: ARRAY
26786: IFFALSE 26855
// if result [ 2 ] [ 1 ] = 100 + i then
26788: LD_VAR 0 2
26792: PUSH
26793: LD_INT 2
26795: ARRAY
26796: PUSH
26797: LD_INT 1
26799: ARRAY
26800: PUSH
26801: LD_INT 100
26803: PUSH
26804: LD_VAR 0 8
26808: PLUS
26809: EQUAL
26810: IFFALSE 26855
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
26812: LD_ADDR_VAR 0 2
26816: PUSH
26817: LD_VAR 0 2
26821: PPUSH
26822: LD_INT 2
26824: PPUSH
26825: LD_VAR 0 2
26829: PUSH
26830: LD_INT 2
26832: ARRAY
26833: PPUSH
26834: LD_INT 1
26836: PPUSH
26837: CALL_OW 3
26841: PPUSH
26842: CALL_OW 1
26846: ST_TO_ADDR
// tmp := 1 ;
26847: LD_ADDR_VAR 0 3
26851: PUSH
26852: LD_STRING 1
26854: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
26855: LD_ADDR_VAR 0 6
26859: PUSH
26860: LD_VAR 0 6
26864: PUSH
26865: LD_VAR 0 3
26869: STR
26870: ST_TO_ADDR
// end ;
26871: GO 26767
26873: POP
26874: POP
// if isGameLoad then
26875: LD_VAR 0 1
26879: IFFALSE 27354
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
26881: LD_ADDR_VAR 0 4
26885: PUSH
26886: LD_EXP 60
26890: PUSH
26891: LD_EXP 59
26895: PUSH
26896: LD_EXP 61
26900: PUSH
26901: LD_EXP 58
26905: PUSH
26906: LD_EXP 62
26910: PUSH
26911: LD_EXP 63
26915: PUSH
26916: LD_EXP 64
26920: PUSH
26921: LD_EXP 65
26925: PUSH
26926: LD_EXP 66
26930: PUSH
26931: LD_EXP 67
26935: PUSH
26936: LD_EXP 68
26940: PUSH
26941: LD_EXP 69
26945: PUSH
26946: LD_EXP 70
26950: PUSH
26951: LD_EXP 71
26955: PUSH
26956: LD_EXP 79
26960: PUSH
26961: LD_EXP 80
26965: PUSH
26966: LD_EXP 81
26970: PUSH
26971: LD_EXP 82
26975: PUSH
26976: LD_EXP 84
26980: PUSH
26981: LD_EXP 85
26985: PUSH
26986: LD_EXP 86
26990: PUSH
26991: LD_EXP 89
26995: PUSH
26996: LD_EXP 91
27000: PUSH
27001: LD_EXP 92
27005: PUSH
27006: LD_EXP 93
27010: PUSH
27011: LD_EXP 95
27015: PUSH
27016: LD_EXP 96
27020: PUSH
27021: LD_EXP 99
27025: PUSH
27026: LD_EXP 100
27030: PUSH
27031: LD_EXP 101
27035: PUSH
27036: LD_EXP 102
27040: PUSH
27041: LD_EXP 103
27045: PUSH
27046: LD_EXP 104
27050: PUSH
27051: LD_EXP 105
27055: PUSH
27056: LD_EXP 106
27060: PUSH
27061: LD_EXP 107
27065: PUSH
27066: LD_EXP 72
27070: PUSH
27071: LD_EXP 73
27075: PUSH
27076: LD_EXP 76
27080: PUSH
27081: LD_EXP 77
27085: PUSH
27086: LD_EXP 78
27090: PUSH
27091: LD_EXP 74
27095: PUSH
27096: LD_EXP 75
27100: PUSH
27101: LD_EXP 83
27105: PUSH
27106: LD_EXP 87
27110: PUSH
27111: LD_EXP 88
27115: PUSH
27116: LD_EXP 90
27120: PUSH
27121: LD_EXP 94
27125: PUSH
27126: LD_EXP 97
27130: PUSH
27131: LD_EXP 98
27135: PUSH
27136: LD_EXP 108
27140: PUSH
27141: LD_EXP 109
27145: PUSH
27146: LD_EXP 110
27150: PUSH
27151: LD_EXP 111
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: ST_TO_ADDR
// tmp :=  ;
27212: LD_ADDR_VAR 0 3
27216: PUSH
27217: LD_STRING 
27219: ST_TO_ADDR
// for i = 1 to normalCounter do
27220: LD_ADDR_VAR 0 8
27224: PUSH
27225: DOUBLE
27226: LD_INT 1
27228: DEC
27229: ST_TO_ADDR
27230: LD_EXP 56
27234: PUSH
27235: FOR_TO
27236: IFFALSE 27272
// begin if flags [ i ] then
27238: LD_VAR 0 4
27242: PUSH
27243: LD_VAR 0 8
27247: ARRAY
27248: IFFALSE 27270
// tmp := tmp & i & ; ;
27250: LD_ADDR_VAR 0 3
27254: PUSH
27255: LD_VAR 0 3
27259: PUSH
27260: LD_VAR 0 8
27264: STR
27265: PUSH
27266: LD_STRING ;
27268: STR
27269: ST_TO_ADDR
// end ;
27270: GO 27235
27272: POP
27273: POP
// for i = 1 to hardcoreCounter do
27274: LD_ADDR_VAR 0 8
27278: PUSH
27279: DOUBLE
27280: LD_INT 1
27282: DEC
27283: ST_TO_ADDR
27284: LD_EXP 57
27288: PUSH
27289: FOR_TO
27290: IFFALSE 27336
// begin if flags [ normalCounter + i ] then
27292: LD_VAR 0 4
27296: PUSH
27297: LD_EXP 56
27301: PUSH
27302: LD_VAR 0 8
27306: PLUS
27307: ARRAY
27308: IFFALSE 27334
// tmp := tmp & ( 100 + i ) & ; ;
27310: LD_ADDR_VAR 0 3
27314: PUSH
27315: LD_VAR 0 3
27319: PUSH
27320: LD_INT 100
27322: PUSH
27323: LD_VAR 0 8
27327: PLUS
27328: STR
27329: PUSH
27330: LD_STRING ;
27332: STR
27333: ST_TO_ADDR
// end ;
27334: GO 27289
27336: POP
27337: POP
// if tmp then
27338: LD_VAR 0 3
27342: IFFALSE 27354
// active := tmp ;
27344: LD_ADDR_VAR 0 7
27348: PUSH
27349: LD_VAR 0 3
27353: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
27354: LD_STRING getStreamItemsFromMission("
27356: PUSH
27357: LD_VAR 0 5
27361: STR
27362: PUSH
27363: LD_STRING ","
27365: STR
27366: PUSH
27367: LD_VAR 0 6
27371: STR
27372: PUSH
27373: LD_STRING ","
27375: STR
27376: PUSH
27377: LD_VAR 0 7
27381: STR
27382: PUSH
27383: LD_STRING ")
27385: STR
27386: PPUSH
27387: CALL_OW 559
// end else
27391: GO 27400
// ToLua ( getStreamItemsFromMission("","","") ) ;
27393: LD_STRING getStreamItemsFromMission("","","")
27395: PPUSH
27396: CALL_OW 559
// end ;
27400: LD_VAR 0 2
27404: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
27405: LD_EXP 55
27409: IFFALSE 27417
27411: PUSH
27412: LD_EXP 60
27416: AND
27417: IFFALSE 27541
27419: GO 27421
27421: DISABLE
27422: LD_INT 0
27424: PPUSH
27425: PPUSH
// begin enable ;
27426: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
27427: LD_ADDR_VAR 0 2
27431: PUSH
27432: LD_INT 22
27434: PUSH
27435: LD_OWVAR 2
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 2
27446: PUSH
27447: LD_INT 34
27449: PUSH
27450: LD_INT 7
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 34
27459: PUSH
27460: LD_INT 45
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 34
27469: PUSH
27470: LD_INT 28
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 34
27479: PUSH
27480: LD_INT 47
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PPUSH
27498: CALL_OW 69
27502: ST_TO_ADDR
// if not tmp then
27503: LD_VAR 0 2
27507: NOT
27508: IFFALSE 27512
// exit ;
27510: GO 27541
// for i in tmp do
27512: LD_ADDR_VAR 0 1
27516: PUSH
27517: LD_VAR 0 2
27521: PUSH
27522: FOR_IN
27523: IFFALSE 27539
// begin SetLives ( i , 0 ) ;
27525: LD_VAR 0 1
27529: PPUSH
27530: LD_INT 0
27532: PPUSH
27533: CALL_OW 234
// end ;
27537: GO 27522
27539: POP
27540: POP
// end ;
27541: PPOPN 2
27543: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
27544: LD_EXP 55
27548: IFFALSE 27556
27550: PUSH
27551: LD_EXP 61
27555: AND
27556: IFFALSE 27640
27558: GO 27560
27560: DISABLE
27561: LD_INT 0
27563: PPUSH
27564: PPUSH
// begin enable ;
27565: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
27566: LD_ADDR_VAR 0 2
27570: PUSH
27571: LD_INT 22
27573: PUSH
27574: LD_OWVAR 2
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 32
27585: PUSH
27586: LD_INT 3
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PPUSH
27597: CALL_OW 69
27601: ST_TO_ADDR
// if not tmp then
27602: LD_VAR 0 2
27606: NOT
27607: IFFALSE 27611
// exit ;
27609: GO 27640
// for i in tmp do
27611: LD_ADDR_VAR 0 1
27615: PUSH
27616: LD_VAR 0 2
27620: PUSH
27621: FOR_IN
27622: IFFALSE 27638
// begin SetLives ( i , 0 ) ;
27624: LD_VAR 0 1
27628: PPUSH
27629: LD_INT 0
27631: PPUSH
27632: CALL_OW 234
// end ;
27636: GO 27621
27638: POP
27639: POP
// end ;
27640: PPOPN 2
27642: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
27643: LD_EXP 55
27647: IFFALSE 27655
27649: PUSH
27650: LD_EXP 58
27654: AND
27655: IFFALSE 27748
27657: GO 27659
27659: DISABLE
27660: LD_INT 0
27662: PPUSH
// begin enable ;
27663: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
27664: LD_ADDR_VAR 0 1
27668: PUSH
27669: LD_INT 22
27671: PUSH
27672: LD_OWVAR 2
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 2
27683: PUSH
27684: LD_INT 25
27686: PUSH
27687: LD_INT 5
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PUSH
27694: LD_INT 25
27696: PUSH
27697: LD_INT 9
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 25
27706: PUSH
27707: LD_INT 8
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PPUSH
27724: CALL_OW 69
27728: PUSH
27729: FOR_IN
27730: IFFALSE 27746
// begin SetClass ( i , 1 ) ;
27732: LD_VAR 0 1
27736: PPUSH
27737: LD_INT 1
27739: PPUSH
27740: CALL_OW 336
// end ;
27744: GO 27729
27746: POP
27747: POP
// end ;
27748: PPOPN 1
27750: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
27751: LD_EXP 55
27755: IFFALSE 27763
27757: PUSH
27758: LD_EXP 59
27762: AND
27763: IFFALSE 27775
27765: PUSH
27766: LD_OWVAR 65
27770: PUSH
27771: LD_INT 7
27773: LESS
27774: AND
27775: IFFALSE 27789
27777: GO 27779
27779: DISABLE
// begin enable ;
27780: ENABLE
// game_speed := 7 ;
27781: LD_ADDR_OWVAR 65
27785: PUSH
27786: LD_INT 7
27788: ST_TO_ADDR
// end ;
27789: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
27790: LD_EXP 55
27794: IFFALSE 27802
27796: PUSH
27797: LD_EXP 62
27801: AND
27802: IFFALSE 28004
27804: GO 27806
27806: DISABLE
27807: LD_INT 0
27809: PPUSH
27810: PPUSH
27811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27812: LD_ADDR_VAR 0 3
27816: PUSH
27817: LD_INT 81
27819: PUSH
27820: LD_OWVAR 2
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 21
27831: PUSH
27832: LD_INT 1
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PPUSH
27843: CALL_OW 69
27847: ST_TO_ADDR
// if not tmp then
27848: LD_VAR 0 3
27852: NOT
27853: IFFALSE 27857
// exit ;
27855: GO 28004
// if tmp > 5 then
27857: LD_VAR 0 3
27861: PUSH
27862: LD_INT 5
27864: GREATER
27865: IFFALSE 27877
// k := 5 else
27867: LD_ADDR_VAR 0 2
27871: PUSH
27872: LD_INT 5
27874: ST_TO_ADDR
27875: GO 27887
// k := tmp ;
27877: LD_ADDR_VAR 0 2
27881: PUSH
27882: LD_VAR 0 3
27886: ST_TO_ADDR
// for i := 1 to k do
27887: LD_ADDR_VAR 0 1
27891: PUSH
27892: DOUBLE
27893: LD_INT 1
27895: DEC
27896: ST_TO_ADDR
27897: LD_VAR 0 2
27901: PUSH
27902: FOR_TO
27903: IFFALSE 28002
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
27905: LD_VAR 0 3
27909: PUSH
27910: LD_VAR 0 1
27914: ARRAY
27915: PPUSH
27916: LD_VAR 0 1
27920: PUSH
27921: LD_INT 4
27923: MOD
27924: PUSH
27925: LD_INT 1
27927: PLUS
27928: PPUSH
27929: CALL_OW 259
27933: PUSH
27934: LD_INT 10
27936: LESS
27937: IFFALSE 28000
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
27939: LD_VAR 0 3
27943: PUSH
27944: LD_VAR 0 1
27948: ARRAY
27949: PPUSH
27950: LD_VAR 0 1
27954: PUSH
27955: LD_INT 4
27957: MOD
27958: PUSH
27959: LD_INT 1
27961: PLUS
27962: PPUSH
27963: LD_VAR 0 3
27967: PUSH
27968: LD_VAR 0 1
27972: ARRAY
27973: PPUSH
27974: LD_VAR 0 1
27978: PUSH
27979: LD_INT 4
27981: MOD
27982: PUSH
27983: LD_INT 1
27985: PLUS
27986: PPUSH
27987: CALL_OW 259
27991: PUSH
27992: LD_INT 1
27994: PLUS
27995: PPUSH
27996: CALL_OW 237
28000: GO 27902
28002: POP
28003: POP
// end ;
28004: PPOPN 3
28006: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
28007: LD_EXP 55
28011: IFFALSE 28019
28013: PUSH
28014: LD_EXP 63
28018: AND
28019: IFFALSE 28039
28021: GO 28023
28023: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
28024: LD_INT 4
28026: PPUSH
28027: LD_OWVAR 2
28031: PPUSH
28032: LD_INT 0
28034: PPUSH
28035: CALL_OW 324
28039: END
// every 0 0$1 trigger StreamModeActive and sShovel do
28040: LD_EXP 55
28044: IFFALSE 28052
28046: PUSH
28047: LD_EXP 92
28051: AND
28052: IFFALSE 28072
28054: GO 28056
28056: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
28057: LD_INT 19
28059: PPUSH
28060: LD_OWVAR 2
28064: PPUSH
28065: LD_INT 0
28067: PPUSH
28068: CALL_OW 324
28072: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
28073: LD_EXP 55
28077: IFFALSE 28085
28079: PUSH
28080: LD_EXP 64
28084: AND
28085: IFFALSE 28187
28087: GO 28089
28089: DISABLE
28090: LD_INT 0
28092: PPUSH
28093: PPUSH
// begin enable ;
28094: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
28095: LD_ADDR_VAR 0 2
28099: PUSH
28100: LD_INT 22
28102: PUSH
28103: LD_OWVAR 2
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 2
28114: PUSH
28115: LD_INT 34
28117: PUSH
28118: LD_INT 11
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 34
28127: PUSH
28128: LD_INT 30
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: LIST
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PPUSH
28144: CALL_OW 69
28148: ST_TO_ADDR
// if not tmp then
28149: LD_VAR 0 2
28153: NOT
28154: IFFALSE 28158
// exit ;
28156: GO 28187
// for i in tmp do
28158: LD_ADDR_VAR 0 1
28162: PUSH
28163: LD_VAR 0 2
28167: PUSH
28168: FOR_IN
28169: IFFALSE 28185
// begin SetLives ( i , 0 ) ;
28171: LD_VAR 0 1
28175: PPUSH
28176: LD_INT 0
28178: PPUSH
28179: CALL_OW 234
// end ;
28183: GO 28168
28185: POP
28186: POP
// end ;
28187: PPOPN 2
28189: END
// every 0 0$1 trigger StreamModeActive and sBunker do
28190: LD_EXP 55
28194: IFFALSE 28202
28196: PUSH
28197: LD_EXP 65
28201: AND
28202: IFFALSE 28222
28204: GO 28206
28206: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
28207: LD_INT 32
28209: PPUSH
28210: LD_OWVAR 2
28214: PPUSH
28215: LD_INT 0
28217: PPUSH
28218: CALL_OW 324
28222: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
28223: LD_EXP 55
28227: IFFALSE 28235
28229: PUSH
28230: LD_EXP 66
28234: AND
28235: IFFALSE 28418
28237: GO 28239
28239: DISABLE
28240: LD_INT 0
28242: PPUSH
28243: PPUSH
28244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
28245: LD_ADDR_VAR 0 2
28249: PUSH
28250: LD_INT 22
28252: PUSH
28253: LD_OWVAR 2
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 33
28264: PUSH
28265: LD_INT 3
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PPUSH
28276: CALL_OW 69
28280: ST_TO_ADDR
// if not tmp then
28281: LD_VAR 0 2
28285: NOT
28286: IFFALSE 28290
// exit ;
28288: GO 28418
// side := 0 ;
28290: LD_ADDR_VAR 0 3
28294: PUSH
28295: LD_INT 0
28297: ST_TO_ADDR
// for i := 1 to 8 do
28298: LD_ADDR_VAR 0 1
28302: PUSH
28303: DOUBLE
28304: LD_INT 1
28306: DEC
28307: ST_TO_ADDR
28308: LD_INT 8
28310: PUSH
28311: FOR_TO
28312: IFFALSE 28362
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
28314: LD_OWVAR 2
28318: PUSH
28319: LD_VAR 0 1
28323: NONEQUAL
28324: IFFALSE 28346
28326: PUSH
28327: LD_OWVAR 2
28331: PPUSH
28332: LD_VAR 0 1
28336: PPUSH
28337: CALL_OW 81
28341: PUSH
28342: LD_INT 2
28344: EQUAL
28345: AND
28346: IFFALSE 28360
// begin side := i ;
28348: LD_ADDR_VAR 0 3
28352: PUSH
28353: LD_VAR 0 1
28357: ST_TO_ADDR
// break ;
28358: GO 28362
// end ;
28360: GO 28311
28362: POP
28363: POP
// if not side then
28364: LD_VAR 0 3
28368: NOT
28369: IFFALSE 28373
// exit ;
28371: GO 28418
// for i := 1 to tmp do
28373: LD_ADDR_VAR 0 1
28377: PUSH
28378: DOUBLE
28379: LD_INT 1
28381: DEC
28382: ST_TO_ADDR
28383: LD_VAR 0 2
28387: PUSH
28388: FOR_TO
28389: IFFALSE 28416
// if Prob ( 60 ) then
28391: LD_INT 60
28393: PPUSH
28394: CALL_OW 13
28398: IFFALSE 28414
// SetSide ( i , side ) ;
28400: LD_VAR 0 1
28404: PPUSH
28405: LD_VAR 0 3
28409: PPUSH
28410: CALL_OW 235
28414: GO 28388
28416: POP
28417: POP
// end ;
28418: PPOPN 3
28420: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
28421: LD_EXP 55
28425: IFFALSE 28433
28427: PUSH
28428: LD_EXP 68
28432: AND
28433: IFFALSE 28552
28435: GO 28437
28437: DISABLE
28438: LD_INT 0
28440: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
28441: LD_ADDR_VAR 0 1
28445: PUSH
28446: LD_INT 22
28448: PUSH
28449: LD_OWVAR 2
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 21
28460: PUSH
28461: LD_INT 1
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 3
28470: PUSH
28471: LD_INT 23
28473: PUSH
28474: LD_INT 0
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: LIST
28489: PPUSH
28490: CALL_OW 69
28494: PUSH
28495: FOR_IN
28496: IFFALSE 28550
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
28498: LD_VAR 0 1
28502: PPUSH
28503: CALL_OW 257
28507: PUSH
28508: LD_INT 1
28510: PUSH
28511: LD_INT 2
28513: PUSH
28514: LD_INT 3
28516: PUSH
28517: LD_INT 4
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: IN
28526: IFFALSE 28548
// SetClass ( un , rand ( 1 , 4 ) ) ;
28528: LD_VAR 0 1
28532: PPUSH
28533: LD_INT 1
28535: PPUSH
28536: LD_INT 4
28538: PPUSH
28539: CALL_OW 12
28543: PPUSH
28544: CALL_OW 336
28548: GO 28495
28550: POP
28551: POP
// end ;
28552: PPOPN 1
28554: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
28555: LD_EXP 55
28559: IFFALSE 28567
28561: PUSH
28562: LD_EXP 67
28566: AND
28567: IFFALSE 28646
28569: GO 28571
28571: DISABLE
28572: LD_INT 0
28574: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28575: LD_ADDR_VAR 0 1
28579: PUSH
28580: LD_INT 22
28582: PUSH
28583: LD_OWVAR 2
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 21
28594: PUSH
28595: LD_INT 3
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PPUSH
28606: CALL_OW 69
28610: ST_TO_ADDR
// if not tmp then
28611: LD_VAR 0 1
28615: NOT
28616: IFFALSE 28620
// exit ;
28618: GO 28646
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
28620: LD_VAR 0 1
28624: PUSH
28625: LD_INT 1
28627: PPUSH
28628: LD_VAR 0 1
28632: PPUSH
28633: CALL_OW 12
28637: ARRAY
28638: PPUSH
28639: LD_INT 100
28641: PPUSH
28642: CALL_OW 234
// end ;
28646: PPOPN 1
28648: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
28649: LD_EXP 55
28653: IFFALSE 28661
28655: PUSH
28656: LD_EXP 69
28660: AND
28661: IFFALSE 28759
28663: GO 28665
28665: DISABLE
28666: LD_INT 0
28668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28669: LD_ADDR_VAR 0 1
28673: PUSH
28674: LD_INT 22
28676: PUSH
28677: LD_OWVAR 2
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 21
28688: PUSH
28689: LD_INT 1
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PPUSH
28700: CALL_OW 69
28704: ST_TO_ADDR
// if not tmp then
28705: LD_VAR 0 1
28709: NOT
28710: IFFALSE 28714
// exit ;
28712: GO 28759
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
28714: LD_VAR 0 1
28718: PUSH
28719: LD_INT 1
28721: PPUSH
28722: LD_VAR 0 1
28726: PPUSH
28727: CALL_OW 12
28731: ARRAY
28732: PPUSH
28733: LD_INT 1
28735: PPUSH
28736: LD_INT 4
28738: PPUSH
28739: CALL_OW 12
28743: PPUSH
28744: LD_INT 3000
28746: PPUSH
28747: LD_INT 9000
28749: PPUSH
28750: CALL_OW 12
28754: PPUSH
28755: CALL_OW 492
// end ;
28759: PPOPN 1
28761: END
// every 0 0$1 trigger StreamModeActive and sDepot do
28762: LD_EXP 55
28766: IFFALSE 28774
28768: PUSH
28769: LD_EXP 70
28773: AND
28774: IFFALSE 28794
28776: GO 28778
28778: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
28779: LD_INT 1
28781: PPUSH
28782: LD_OWVAR 2
28786: PPUSH
28787: LD_INT 0
28789: PPUSH
28790: CALL_OW 324
28794: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
28795: LD_EXP 55
28799: IFFALSE 28807
28801: PUSH
28802: LD_EXP 71
28806: AND
28807: IFFALSE 28890
28809: GO 28811
28811: DISABLE
28812: LD_INT 0
28814: PPUSH
28815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28816: LD_ADDR_VAR 0 2
28820: PUSH
28821: LD_INT 22
28823: PUSH
28824: LD_OWVAR 2
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 21
28835: PUSH
28836: LD_INT 3
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PPUSH
28847: CALL_OW 69
28851: ST_TO_ADDR
// if not tmp then
28852: LD_VAR 0 2
28856: NOT
28857: IFFALSE 28861
// exit ;
28859: GO 28890
// for i in tmp do
28861: LD_ADDR_VAR 0 1
28865: PUSH
28866: LD_VAR 0 2
28870: PUSH
28871: FOR_IN
28872: IFFALSE 28888
// SetBLevel ( i , 10 ) ;
28874: LD_VAR 0 1
28878: PPUSH
28879: LD_INT 10
28881: PPUSH
28882: CALL_OW 241
28886: GO 28871
28888: POP
28889: POP
// end ;
28890: PPOPN 2
28892: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
28893: LD_EXP 55
28897: IFFALSE 28905
28899: PUSH
28900: LD_EXP 72
28904: AND
28905: IFFALSE 29016
28907: GO 28909
28909: DISABLE
28910: LD_INT 0
28912: PPUSH
28913: PPUSH
28914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28915: LD_ADDR_VAR 0 3
28919: PUSH
28920: LD_INT 22
28922: PUSH
28923: LD_OWVAR 2
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 25
28934: PUSH
28935: LD_INT 1
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PPUSH
28946: CALL_OW 69
28950: ST_TO_ADDR
// if not tmp then
28951: LD_VAR 0 3
28955: NOT
28956: IFFALSE 28960
// exit ;
28958: GO 29016
// un := tmp [ rand ( 1 , tmp ) ] ;
28960: LD_ADDR_VAR 0 2
28964: PUSH
28965: LD_VAR 0 3
28969: PUSH
28970: LD_INT 1
28972: PPUSH
28973: LD_VAR 0 3
28977: PPUSH
28978: CALL_OW 12
28982: ARRAY
28983: ST_TO_ADDR
// if Crawls ( un ) then
28984: LD_VAR 0 2
28988: PPUSH
28989: CALL_OW 318
28993: IFFALSE 29004
// ComWalk ( un ) ;
28995: LD_VAR 0 2
28999: PPUSH
29000: CALL_OW 138
// SetClass ( un , class_sniper ) ;
29004: LD_VAR 0 2
29008: PPUSH
29009: LD_INT 5
29011: PPUSH
29012: CALL_OW 336
// end ;
29016: PPOPN 3
29018: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
29019: LD_EXP 55
29023: IFFALSE 29031
29025: PUSH
29026: LD_EXP 73
29030: AND
29031: IFFALSE 29043
29033: PUSH
29034: LD_OWVAR 67
29038: PUSH
29039: LD_INT 4
29041: LESS
29042: AND
29043: IFFALSE 29062
29045: GO 29047
29047: DISABLE
// begin Difficulty := Difficulty + 1 ;
29048: LD_ADDR_OWVAR 67
29052: PUSH
29053: LD_OWVAR 67
29057: PUSH
29058: LD_INT 1
29060: PLUS
29061: ST_TO_ADDR
// end ;
29062: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
29063: LD_EXP 55
29067: IFFALSE 29075
29069: PUSH
29070: LD_EXP 74
29074: AND
29075: IFFALSE 29178
29077: GO 29079
29079: DISABLE
29080: LD_INT 0
29082: PPUSH
// begin for i := 1 to 5 do
29083: LD_ADDR_VAR 0 1
29087: PUSH
29088: DOUBLE
29089: LD_INT 1
29091: DEC
29092: ST_TO_ADDR
29093: LD_INT 5
29095: PUSH
29096: FOR_TO
29097: IFFALSE 29176
// begin uc_nation := nation_nature ;
29099: LD_ADDR_OWVAR 21
29103: PUSH
29104: LD_INT 0
29106: ST_TO_ADDR
// uc_side := 0 ;
29107: LD_ADDR_OWVAR 20
29111: PUSH
29112: LD_INT 0
29114: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29115: LD_ADDR_OWVAR 29
29119: PUSH
29120: LD_INT 12
29122: PUSH
29123: LD_INT 12
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: ST_TO_ADDR
// hc_agressivity := 20 ;
29130: LD_ADDR_OWVAR 35
29134: PUSH
29135: LD_INT 20
29137: ST_TO_ADDR
// hc_class := class_tiger ;
29138: LD_ADDR_OWVAR 28
29142: PUSH
29143: LD_INT 14
29145: ST_TO_ADDR
// hc_gallery :=  ;
29146: LD_ADDR_OWVAR 33
29150: PUSH
29151: LD_STRING 
29153: ST_TO_ADDR
// hc_name :=  ;
29154: LD_ADDR_OWVAR 26
29158: PUSH
29159: LD_STRING 
29161: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
29162: CALL_OW 44
29166: PPUSH
29167: LD_INT 0
29169: PPUSH
29170: CALL_OW 51
// end ;
29174: GO 29096
29176: POP
29177: POP
// end ;
29178: PPOPN 1
29180: END
// every 0 0$1 trigger StreamModeActive and sBomb do
29181: LD_EXP 55
29185: IFFALSE 29193
29187: PUSH
29188: LD_EXP 75
29192: AND
29193: IFFALSE 29202
29195: GO 29197
29197: DISABLE
// StreamSibBomb ;
29198: CALL 29203 0 0
29202: END
// export function StreamSibBomb ; var i , x , y ; begin
29203: LD_INT 0
29205: PPUSH
29206: PPUSH
29207: PPUSH
29208: PPUSH
// result := false ;
29209: LD_ADDR_VAR 0 1
29213: PUSH
29214: LD_INT 0
29216: ST_TO_ADDR
// for i := 1 to 16 do
29217: LD_ADDR_VAR 0 2
29221: PUSH
29222: DOUBLE
29223: LD_INT 1
29225: DEC
29226: ST_TO_ADDR
29227: LD_INT 16
29229: PUSH
29230: FOR_TO
29231: IFFALSE 29430
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29233: LD_ADDR_VAR 0 3
29237: PUSH
29238: LD_INT 10
29240: PUSH
29241: LD_INT 20
29243: PUSH
29244: LD_INT 30
29246: PUSH
29247: LD_INT 40
29249: PUSH
29250: LD_INT 50
29252: PUSH
29253: LD_INT 60
29255: PUSH
29256: LD_INT 70
29258: PUSH
29259: LD_INT 80
29261: PUSH
29262: LD_INT 90
29264: PUSH
29265: LD_INT 100
29267: PUSH
29268: LD_INT 110
29270: PUSH
29271: LD_INT 120
29273: PUSH
29274: LD_INT 130
29276: PUSH
29277: LD_INT 140
29279: PUSH
29280: LD_INT 150
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 1
29302: PPUSH
29303: LD_INT 15
29305: PPUSH
29306: CALL_OW 12
29310: ARRAY
29311: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29312: LD_ADDR_VAR 0 4
29316: PUSH
29317: LD_INT 10
29319: PUSH
29320: LD_INT 20
29322: PUSH
29323: LD_INT 30
29325: PUSH
29326: LD_INT 40
29328: PUSH
29329: LD_INT 50
29331: PUSH
29332: LD_INT 60
29334: PUSH
29335: LD_INT 70
29337: PUSH
29338: LD_INT 80
29340: PUSH
29341: LD_INT 90
29343: PUSH
29344: LD_INT 100
29346: PUSH
29347: LD_INT 110
29349: PUSH
29350: LD_INT 120
29352: PUSH
29353: LD_INT 130
29355: PUSH
29356: LD_INT 140
29358: PUSH
29359: LD_INT 150
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 1
29381: PPUSH
29382: LD_INT 15
29384: PPUSH
29385: CALL_OW 12
29389: ARRAY
29390: ST_TO_ADDR
// if ValidHex ( x , y ) then
29391: LD_VAR 0 3
29395: PPUSH
29396: LD_VAR 0 4
29400: PPUSH
29401: CALL_OW 488
29405: IFFALSE 29428
// begin result := [ x , y ] ;
29407: LD_ADDR_VAR 0 1
29411: PUSH
29412: LD_VAR 0 3
29416: PUSH
29417: LD_VAR 0 4
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: ST_TO_ADDR
// break ;
29426: GO 29430
// end ; end ;
29428: GO 29230
29430: POP
29431: POP
// if result then
29432: LD_VAR 0 1
29436: IFFALSE 29496
// begin ToLua ( playSibBomb() ) ;
29438: LD_STRING playSibBomb()
29440: PPUSH
29441: CALL_OW 559
// wait ( 0 0$14 ) ;
29445: LD_INT 490
29447: PPUSH
29448: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
29452: LD_VAR 0 1
29456: PUSH
29457: LD_INT 1
29459: ARRAY
29460: PPUSH
29461: LD_VAR 0 1
29465: PUSH
29466: LD_INT 2
29468: ARRAY
29469: PPUSH
29470: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
29474: LD_VAR 0 1
29478: PUSH
29479: LD_INT 1
29481: ARRAY
29482: PPUSH
29483: LD_VAR 0 1
29487: PUSH
29488: LD_INT 2
29490: ARRAY
29491: PPUSH
29492: CALL_OW 429
// end ; end ;
29496: LD_VAR 0 1
29500: RET
// every 0 0$1 trigger StreamModeActive and sReset do
29501: LD_EXP 55
29505: IFFALSE 29513
29507: PUSH
29508: LD_EXP 77
29512: AND
29513: IFFALSE 29525
29515: GO 29517
29517: DISABLE
// YouLost (  ) ;
29518: LD_STRING 
29520: PPUSH
29521: CALL_OW 104
29525: END
// every 0 0$1 trigger StreamModeActive and sFog do
29526: LD_EXP 55
29530: IFFALSE 29538
29532: PUSH
29533: LD_EXP 76
29537: AND
29538: IFFALSE 29552
29540: GO 29542
29542: DISABLE
// FogOff ( your_side ) ;
29543: LD_OWVAR 2
29547: PPUSH
29548: CALL_OW 344
29552: END
// every 0 0$1 trigger StreamModeActive and sSun do
29553: LD_EXP 55
29557: IFFALSE 29565
29559: PUSH
29560: LD_EXP 78
29564: AND
29565: IFFALSE 29593
29567: GO 29569
29569: DISABLE
// begin solar_recharge_percent := 0 ;
29570: LD_ADDR_OWVAR 79
29574: PUSH
29575: LD_INT 0
29577: ST_TO_ADDR
// wait ( 5 5$00 ) ;
29578: LD_INT 10500
29580: PPUSH
29581: CALL_OW 67
// solar_recharge_percent := 100 ;
29585: LD_ADDR_OWVAR 79
29589: PUSH
29590: LD_INT 100
29592: ST_TO_ADDR
// end ;
29593: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
29594: LD_EXP 55
29598: IFFALSE 29606
29600: PUSH
29601: LD_EXP 79
29605: AND
29606: IFFALSE 29845
29608: GO 29610
29610: DISABLE
29611: LD_INT 0
29613: PPUSH
29614: PPUSH
29615: PPUSH
// begin tmp := [ ] ;
29616: LD_ADDR_VAR 0 3
29620: PUSH
29621: EMPTY
29622: ST_TO_ADDR
// for i := 1 to 6 do
29623: LD_ADDR_VAR 0 1
29627: PUSH
29628: DOUBLE
29629: LD_INT 1
29631: DEC
29632: ST_TO_ADDR
29633: LD_INT 6
29635: PUSH
29636: FOR_TO
29637: IFFALSE 29742
// begin uc_nation := nation_nature ;
29639: LD_ADDR_OWVAR 21
29643: PUSH
29644: LD_INT 0
29646: ST_TO_ADDR
// uc_side := 0 ;
29647: LD_ADDR_OWVAR 20
29651: PUSH
29652: LD_INT 0
29654: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29655: LD_ADDR_OWVAR 29
29659: PUSH
29660: LD_INT 12
29662: PUSH
29663: LD_INT 12
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: ST_TO_ADDR
// hc_agressivity := 20 ;
29670: LD_ADDR_OWVAR 35
29674: PUSH
29675: LD_INT 20
29677: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
29678: LD_ADDR_OWVAR 28
29682: PUSH
29683: LD_INT 17
29685: ST_TO_ADDR
// hc_gallery :=  ;
29686: LD_ADDR_OWVAR 33
29690: PUSH
29691: LD_STRING 
29693: ST_TO_ADDR
// hc_name :=  ;
29694: LD_ADDR_OWVAR 26
29698: PUSH
29699: LD_STRING 
29701: ST_TO_ADDR
// un := CreateHuman ;
29702: LD_ADDR_VAR 0 2
29706: PUSH
29707: CALL_OW 44
29711: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
29712: LD_VAR 0 2
29716: PPUSH
29717: LD_INT 1
29719: PPUSH
29720: CALL_OW 51
// tmp := tmp ^ un ;
29724: LD_ADDR_VAR 0 3
29728: PUSH
29729: LD_VAR 0 3
29733: PUSH
29734: LD_VAR 0 2
29738: ADD
29739: ST_TO_ADDR
// end ;
29740: GO 29636
29742: POP
29743: POP
// repeat wait ( 0 0$1 ) ;
29744: LD_INT 35
29746: PPUSH
29747: CALL_OW 67
// for un in tmp do
29751: LD_ADDR_VAR 0 2
29755: PUSH
29756: LD_VAR 0 3
29760: PUSH
29761: FOR_IN
29762: IFFALSE 29836
// begin if IsDead ( un ) then
29764: LD_VAR 0 2
29768: PPUSH
29769: CALL_OW 301
29773: IFFALSE 29793
// begin tmp := tmp diff un ;
29775: LD_ADDR_VAR 0 3
29779: PUSH
29780: LD_VAR 0 3
29784: PUSH
29785: LD_VAR 0 2
29789: DIFF
29790: ST_TO_ADDR
// continue ;
29791: GO 29761
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
29793: LD_VAR 0 2
29797: PPUSH
29798: LD_INT 3
29800: PUSH
29801: LD_INT 22
29803: PUSH
29804: LD_INT 0
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PPUSH
29815: CALL_OW 69
29819: PPUSH
29820: LD_VAR 0 2
29824: PPUSH
29825: CALL_OW 74
29829: PPUSH
29830: CALL_OW 115
// end ;
29834: GO 29761
29836: POP
29837: POP
// until not tmp ;
29838: LD_VAR 0 3
29842: NOT
29843: IFFALSE 29744
// end ;
29845: PPOPN 3
29847: END
// every 0 0$1 trigger StreamModeActive and sTroll do
29848: LD_EXP 55
29852: IFFALSE 29860
29854: PUSH
29855: LD_EXP 80
29859: AND
29860: IFFALSE 29914
29862: GO 29864
29864: DISABLE
// begin ToLua ( displayTroll(); ) ;
29865: LD_STRING displayTroll();
29867: PPUSH
29868: CALL_OW 559
// wait ( 3 3$00 ) ;
29872: LD_INT 6300
29874: PPUSH
29875: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29879: LD_STRING hideTroll();
29881: PPUSH
29882: CALL_OW 559
// wait ( 1 1$00 ) ;
29886: LD_INT 2100
29888: PPUSH
29889: CALL_OW 67
// ToLua ( displayTroll(); ) ;
29893: LD_STRING displayTroll();
29895: PPUSH
29896: CALL_OW 559
// wait ( 1 1$00 ) ;
29900: LD_INT 2100
29902: PPUSH
29903: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29907: LD_STRING hideTroll();
29909: PPUSH
29910: CALL_OW 559
// end ;
29914: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
29915: LD_EXP 55
29919: IFFALSE 29927
29921: PUSH
29922: LD_EXP 81
29926: AND
29927: IFFALSE 29990
29929: GO 29931
29931: DISABLE
29932: LD_INT 0
29934: PPUSH
// begin p := 0 ;
29935: LD_ADDR_VAR 0 1
29939: PUSH
29940: LD_INT 0
29942: ST_TO_ADDR
// repeat game_speed := 1 ;
29943: LD_ADDR_OWVAR 65
29947: PUSH
29948: LD_INT 1
29950: ST_TO_ADDR
// wait ( 0 0$1 ) ;
29951: LD_INT 35
29953: PPUSH
29954: CALL_OW 67
// p := p + 1 ;
29958: LD_ADDR_VAR 0 1
29962: PUSH
29963: LD_VAR 0 1
29967: PUSH
29968: LD_INT 1
29970: PLUS
29971: ST_TO_ADDR
// until p >= 60 ;
29972: LD_VAR 0 1
29976: PUSH
29977: LD_INT 60
29979: GREATEREQUAL
29980: IFFALSE 29943
// game_speed := 4 ;
29982: LD_ADDR_OWVAR 65
29986: PUSH
29987: LD_INT 4
29989: ST_TO_ADDR
// end ;
29990: PPOPN 1
29992: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
29993: LD_EXP 55
29997: IFFALSE 30005
29999: PUSH
30000: LD_EXP 82
30004: AND
30005: IFFALSE 30151
30007: GO 30009
30009: DISABLE
30010: LD_INT 0
30012: PPUSH
30013: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30014: LD_ADDR_VAR 0 1
30018: PUSH
30019: LD_INT 22
30021: PUSH
30022: LD_OWVAR 2
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 2
30033: PUSH
30034: LD_INT 30
30036: PUSH
30037: LD_INT 0
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 30
30046: PUSH
30047: LD_INT 1
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: LIST
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PPUSH
30063: CALL_OW 69
30067: ST_TO_ADDR
// if not depot then
30068: LD_VAR 0 1
30072: NOT
30073: IFFALSE 30077
// exit ;
30075: GO 30151
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
30077: LD_ADDR_VAR 0 2
30081: PUSH
30082: LD_VAR 0 1
30086: PUSH
30087: LD_INT 1
30089: PPUSH
30090: LD_VAR 0 1
30094: PPUSH
30095: CALL_OW 12
30099: ARRAY
30100: PPUSH
30101: CALL_OW 274
30105: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
30106: LD_VAR 0 2
30110: PPUSH
30111: LD_INT 1
30113: PPUSH
30114: LD_INT 0
30116: PPUSH
30117: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
30121: LD_VAR 0 2
30125: PPUSH
30126: LD_INT 2
30128: PPUSH
30129: LD_INT 0
30131: PPUSH
30132: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
30136: LD_VAR 0 2
30140: PPUSH
30141: LD_INT 3
30143: PPUSH
30144: LD_INT 0
30146: PPUSH
30147: CALL_OW 277
// end ;
30151: PPOPN 2
30153: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
30154: LD_EXP 55
30158: IFFALSE 30166
30160: PUSH
30161: LD_EXP 83
30165: AND
30166: IFFALSE 30263
30168: GO 30170
30170: DISABLE
30171: LD_INT 0
30173: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30174: LD_ADDR_VAR 0 1
30178: PUSH
30179: LD_INT 22
30181: PUSH
30182: LD_OWVAR 2
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 21
30193: PUSH
30194: LD_INT 1
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 3
30203: PUSH
30204: LD_INT 23
30206: PUSH
30207: LD_INT 0
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: LIST
30222: PPUSH
30223: CALL_OW 69
30227: ST_TO_ADDR
// if not tmp then
30228: LD_VAR 0 1
30232: NOT
30233: IFFALSE 30237
// exit ;
30235: GO 30263
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
30237: LD_VAR 0 1
30241: PUSH
30242: LD_INT 1
30244: PPUSH
30245: LD_VAR 0 1
30249: PPUSH
30250: CALL_OW 12
30254: ARRAY
30255: PPUSH
30256: LD_INT 200
30258: PPUSH
30259: CALL_OW 234
// end ;
30263: PPOPN 1
30265: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
30266: LD_EXP 55
30270: IFFALSE 30278
30272: PUSH
30273: LD_EXP 84
30277: AND
30278: IFFALSE 30357
30280: GO 30282
30282: DISABLE
30283: LD_INT 0
30285: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
30286: LD_ADDR_VAR 0 1
30290: PUSH
30291: LD_INT 22
30293: PUSH
30294: LD_OWVAR 2
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 21
30305: PUSH
30306: LD_INT 2
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PPUSH
30317: CALL_OW 69
30321: ST_TO_ADDR
// if not tmp then
30322: LD_VAR 0 1
30326: NOT
30327: IFFALSE 30331
// exit ;
30329: GO 30357
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
30331: LD_VAR 0 1
30335: PUSH
30336: LD_INT 1
30338: PPUSH
30339: LD_VAR 0 1
30343: PPUSH
30344: CALL_OW 12
30348: ARRAY
30349: PPUSH
30350: LD_INT 60
30352: PPUSH
30353: CALL_OW 234
// end ;
30357: PPOPN 1
30359: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
30360: LD_EXP 55
30364: IFFALSE 30372
30366: PUSH
30367: LD_EXP 85
30371: AND
30372: IFFALSE 30471
30374: GO 30376
30376: DISABLE
30377: LD_INT 0
30379: PPUSH
30380: PPUSH
// begin enable ;
30381: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
30382: LD_ADDR_VAR 0 1
30386: PUSH
30387: LD_INT 22
30389: PUSH
30390: LD_OWVAR 2
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 61
30401: PUSH
30402: EMPTY
30403: LIST
30404: PUSH
30405: LD_INT 33
30407: PUSH
30408: LD_INT 2
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: LIST
30419: PPUSH
30420: CALL_OW 69
30424: ST_TO_ADDR
// if not tmp then
30425: LD_VAR 0 1
30429: NOT
30430: IFFALSE 30434
// exit ;
30432: GO 30471
// for i in tmp do
30434: LD_ADDR_VAR 0 2
30438: PUSH
30439: LD_VAR 0 1
30443: PUSH
30444: FOR_IN
30445: IFFALSE 30469
// if IsControledBy ( i ) then
30447: LD_VAR 0 2
30451: PPUSH
30452: CALL_OW 312
30456: IFFALSE 30467
// ComUnlink ( i ) ;
30458: LD_VAR 0 2
30462: PPUSH
30463: CALL_OW 136
30467: GO 30444
30469: POP
30470: POP
// end ;
30471: PPOPN 2
30473: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
30474: LD_EXP 55
30478: IFFALSE 30486
30480: PUSH
30481: LD_EXP 86
30485: AND
30486: IFFALSE 30626
30488: GO 30490
30490: DISABLE
30491: LD_INT 0
30493: PPUSH
30494: PPUSH
// begin ToLua ( displayPowell(); ) ;
30495: LD_STRING displayPowell();
30497: PPUSH
30498: CALL_OW 559
// uc_side := 0 ;
30502: LD_ADDR_OWVAR 20
30506: PUSH
30507: LD_INT 0
30509: ST_TO_ADDR
// uc_nation := 2 ;
30510: LD_ADDR_OWVAR 21
30514: PUSH
30515: LD_INT 2
30517: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
30518: LD_ADDR_OWVAR 37
30522: PUSH
30523: LD_INT 14
30525: ST_TO_ADDR
// vc_engine := engine_siberite ;
30526: LD_ADDR_OWVAR 39
30530: PUSH
30531: LD_INT 3
30533: ST_TO_ADDR
// vc_control := control_apeman ;
30534: LD_ADDR_OWVAR 38
30538: PUSH
30539: LD_INT 5
30541: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
30542: LD_ADDR_OWVAR 40
30546: PUSH
30547: LD_INT 29
30549: ST_TO_ADDR
// un := CreateVehicle ;
30550: LD_ADDR_VAR 0 2
30554: PUSH
30555: CALL_OW 45
30559: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30560: LD_VAR 0 2
30564: PPUSH
30565: LD_INT 1
30567: PPUSH
30568: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30572: LD_INT 35
30574: PPUSH
30575: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30579: LD_VAR 0 2
30583: PPUSH
30584: LD_INT 22
30586: PUSH
30587: LD_OWVAR 2
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PPUSH
30596: CALL_OW 69
30600: PPUSH
30601: LD_VAR 0 2
30605: PPUSH
30606: CALL_OW 74
30610: PPUSH
30611: CALL_OW 115
// until IsDead ( un ) ;
30615: LD_VAR 0 2
30619: PPUSH
30620: CALL_OW 301
30624: IFFALSE 30572
// end ;
30626: PPOPN 2
30628: END
// every 0 0$1 trigger StreamModeActive and sStu do
30629: LD_EXP 55
30633: IFFALSE 30641
30635: PUSH
30636: LD_EXP 94
30640: AND
30641: IFFALSE 30657
30643: GO 30645
30645: DISABLE
// begin ToLua ( displayStucuk(); ) ;
30646: LD_STRING displayStucuk();
30648: PPUSH
30649: CALL_OW 559
// ResetFog ;
30653: CALL_OW 335
// end ;
30657: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
30658: LD_EXP 55
30662: IFFALSE 30670
30664: PUSH
30665: LD_EXP 87
30669: AND
30670: IFFALSE 30811
30672: GO 30674
30674: DISABLE
30675: LD_INT 0
30677: PPUSH
30678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30679: LD_ADDR_VAR 0 2
30683: PUSH
30684: LD_INT 22
30686: PUSH
30687: LD_OWVAR 2
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 21
30698: PUSH
30699: LD_INT 1
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PPUSH
30710: CALL_OW 69
30714: ST_TO_ADDR
// if not tmp then
30715: LD_VAR 0 2
30719: NOT
30720: IFFALSE 30724
// exit ;
30722: GO 30811
// un := tmp [ rand ( 1 , tmp ) ] ;
30724: LD_ADDR_VAR 0 1
30728: PUSH
30729: LD_VAR 0 2
30733: PUSH
30734: LD_INT 1
30736: PPUSH
30737: LD_VAR 0 2
30741: PPUSH
30742: CALL_OW 12
30746: ARRAY
30747: ST_TO_ADDR
// SetSide ( un , 0 ) ;
30748: LD_VAR 0 1
30752: PPUSH
30753: LD_INT 0
30755: PPUSH
30756: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
30760: LD_VAR 0 1
30764: PPUSH
30765: LD_OWVAR 3
30769: PUSH
30770: LD_VAR 0 1
30774: DIFF
30775: PPUSH
30776: LD_VAR 0 1
30780: PPUSH
30781: CALL_OW 74
30785: PPUSH
30786: CALL_OW 115
// wait ( 0 0$20 ) ;
30790: LD_INT 700
30792: PPUSH
30793: CALL_OW 67
// SetSide ( un , your_side ) ;
30797: LD_VAR 0 1
30801: PPUSH
30802: LD_OWVAR 2
30806: PPUSH
30807: CALL_OW 235
// end ;
30811: PPOPN 2
30813: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
30814: LD_EXP 55
30818: IFFALSE 30826
30820: PUSH
30821: LD_EXP 88
30825: AND
30826: IFFALSE 30932
30828: GO 30830
30830: DISABLE
30831: LD_INT 0
30833: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30834: LD_ADDR_VAR 0 1
30838: PUSH
30839: LD_INT 22
30841: PUSH
30842: LD_OWVAR 2
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 2
30853: PUSH
30854: LD_INT 30
30856: PUSH
30857: LD_INT 0
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 30
30866: PUSH
30867: LD_INT 1
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: LIST
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PPUSH
30883: CALL_OW 69
30887: ST_TO_ADDR
// if not depot then
30888: LD_VAR 0 1
30892: NOT
30893: IFFALSE 30897
// exit ;
30895: GO 30932
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
30897: LD_VAR 0 1
30901: PUSH
30902: LD_INT 1
30904: ARRAY
30905: PPUSH
30906: CALL_OW 250
30910: PPUSH
30911: LD_VAR 0 1
30915: PUSH
30916: LD_INT 1
30918: ARRAY
30919: PPUSH
30920: CALL_OW 251
30924: PPUSH
30925: LD_INT 70
30927: PPUSH
30928: CALL_OW 495
// end ;
30932: PPOPN 1
30934: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
30935: LD_EXP 55
30939: IFFALSE 30947
30941: PUSH
30942: LD_EXP 89
30946: AND
30947: IFFALSE 31158
30949: GO 30951
30951: DISABLE
30952: LD_INT 0
30954: PPUSH
30955: PPUSH
30956: PPUSH
30957: PPUSH
30958: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30959: LD_ADDR_VAR 0 5
30963: PUSH
30964: LD_INT 22
30966: PUSH
30967: LD_OWVAR 2
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 21
30978: PUSH
30979: LD_INT 1
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PPUSH
30990: CALL_OW 69
30994: ST_TO_ADDR
// if not tmp then
30995: LD_VAR 0 5
30999: NOT
31000: IFFALSE 31004
// exit ;
31002: GO 31158
// for i in tmp do
31004: LD_ADDR_VAR 0 1
31008: PUSH
31009: LD_VAR 0 5
31013: PUSH
31014: FOR_IN
31015: IFFALSE 31156
// begin d := rand ( 0 , 5 ) ;
31017: LD_ADDR_VAR 0 4
31021: PUSH
31022: LD_INT 0
31024: PPUSH
31025: LD_INT 5
31027: PPUSH
31028: CALL_OW 12
31032: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
31033: LD_ADDR_VAR 0 2
31037: PUSH
31038: LD_VAR 0 1
31042: PPUSH
31043: CALL_OW 250
31047: PPUSH
31048: LD_VAR 0 4
31052: PPUSH
31053: LD_INT 3
31055: PPUSH
31056: LD_INT 12
31058: PPUSH
31059: CALL_OW 12
31063: PPUSH
31064: CALL_OW 272
31068: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
31069: LD_ADDR_VAR 0 3
31073: PUSH
31074: LD_VAR 0 1
31078: PPUSH
31079: CALL_OW 251
31083: PPUSH
31084: LD_VAR 0 4
31088: PPUSH
31089: LD_INT 3
31091: PPUSH
31092: LD_INT 12
31094: PPUSH
31095: CALL_OW 12
31099: PPUSH
31100: CALL_OW 273
31104: ST_TO_ADDR
// if ValidHex ( x , y ) then
31105: LD_VAR 0 2
31109: PPUSH
31110: LD_VAR 0 3
31114: PPUSH
31115: CALL_OW 488
31119: IFFALSE 31154
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
31121: LD_VAR 0 1
31125: PPUSH
31126: LD_VAR 0 2
31130: PPUSH
31131: LD_VAR 0 3
31135: PPUSH
31136: LD_INT 3
31138: PPUSH
31139: LD_INT 6
31141: PPUSH
31142: CALL_OW 12
31146: PPUSH
31147: LD_INT 1
31149: PPUSH
31150: CALL_OW 483
// end ;
31154: GO 31014
31156: POP
31157: POP
// end ;
31158: PPOPN 5
31160: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
31161: LD_EXP 55
31165: IFFALSE 31173
31167: PUSH
31168: LD_EXP 90
31172: AND
31173: IFFALSE 31267
31175: GO 31177
31177: DISABLE
31178: LD_INT 0
31180: PPUSH
31181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
31182: LD_ADDR_VAR 0 2
31186: PUSH
31187: LD_INT 22
31189: PUSH
31190: LD_OWVAR 2
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 32
31201: PUSH
31202: LD_INT 1
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 21
31211: PUSH
31212: LD_INT 2
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: LIST
31223: PPUSH
31224: CALL_OW 69
31228: ST_TO_ADDR
// if not tmp then
31229: LD_VAR 0 2
31233: NOT
31234: IFFALSE 31238
// exit ;
31236: GO 31267
// for i in tmp do
31238: LD_ADDR_VAR 0 1
31242: PUSH
31243: LD_VAR 0 2
31247: PUSH
31248: FOR_IN
31249: IFFALSE 31265
// SetFuel ( i , 0 ) ;
31251: LD_VAR 0 1
31255: PPUSH
31256: LD_INT 0
31258: PPUSH
31259: CALL_OW 240
31263: GO 31248
31265: POP
31266: POP
// end ;
31267: PPOPN 2
31269: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
31270: LD_EXP 55
31274: IFFALSE 31282
31276: PUSH
31277: LD_EXP 91
31281: AND
31282: IFFALSE 31348
31284: GO 31286
31286: DISABLE
31287: LD_INT 0
31289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31290: LD_ADDR_VAR 0 1
31294: PUSH
31295: LD_INT 22
31297: PUSH
31298: LD_OWVAR 2
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 30
31309: PUSH
31310: LD_INT 29
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PPUSH
31321: CALL_OW 69
31325: ST_TO_ADDR
// if not tmp then
31326: LD_VAR 0 1
31330: NOT
31331: IFFALSE 31335
// exit ;
31333: GO 31348
// DestroyUnit ( tmp [ 1 ] ) ;
31335: LD_VAR 0 1
31339: PUSH
31340: LD_INT 1
31342: ARRAY
31343: PPUSH
31344: CALL_OW 65
// end ;
31348: PPOPN 1
31350: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
31351: LD_EXP 55
31355: IFFALSE 31363
31357: PUSH
31358: LD_EXP 93
31362: AND
31363: IFFALSE 31492
31365: GO 31367
31367: DISABLE
31368: LD_INT 0
31370: PPUSH
// begin uc_side := 0 ;
31371: LD_ADDR_OWVAR 20
31375: PUSH
31376: LD_INT 0
31378: ST_TO_ADDR
// uc_nation := nation_arabian ;
31379: LD_ADDR_OWVAR 21
31383: PUSH
31384: LD_INT 2
31386: ST_TO_ADDR
// hc_gallery :=  ;
31387: LD_ADDR_OWVAR 33
31391: PUSH
31392: LD_STRING 
31394: ST_TO_ADDR
// hc_name :=  ;
31395: LD_ADDR_OWVAR 26
31399: PUSH
31400: LD_STRING 
31402: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31403: LD_INT 1
31405: PPUSH
31406: LD_INT 11
31408: PPUSH
31409: LD_INT 10
31411: PPUSH
31412: CALL_OW 380
// un := CreateHuman ;
31416: LD_ADDR_VAR 0 1
31420: PUSH
31421: CALL_OW 44
31425: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31426: LD_VAR 0 1
31430: PPUSH
31431: LD_INT 1
31433: PPUSH
31434: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31438: LD_INT 35
31440: PPUSH
31441: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31445: LD_VAR 0 1
31449: PPUSH
31450: LD_INT 22
31452: PUSH
31453: LD_OWVAR 2
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PPUSH
31462: CALL_OW 69
31466: PPUSH
31467: LD_VAR 0 1
31471: PPUSH
31472: CALL_OW 74
31476: PPUSH
31477: CALL_OW 115
// until IsDead ( un ) ;
31481: LD_VAR 0 1
31485: PPUSH
31486: CALL_OW 301
31490: IFFALSE 31438
// end ;
31492: PPOPN 1
31494: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
31495: LD_EXP 55
31499: IFFALSE 31507
31501: PUSH
31502: LD_EXP 95
31506: AND
31507: IFFALSE 31519
31509: GO 31511
31511: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
31512: LD_STRING earthquake(getX(game), 0, 32)
31514: PPUSH
31515: CALL_OW 559
31519: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
31520: LD_EXP 55
31524: IFFALSE 31532
31526: PUSH
31527: LD_EXP 96
31531: AND
31532: IFFALSE 31623
31534: GO 31536
31536: DISABLE
31537: LD_INT 0
31539: PPUSH
// begin enable ;
31540: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
31541: LD_ADDR_VAR 0 1
31545: PUSH
31546: LD_INT 22
31548: PUSH
31549: LD_OWVAR 2
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 21
31560: PUSH
31561: LD_INT 2
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 33
31570: PUSH
31571: LD_INT 3
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: LIST
31582: PPUSH
31583: CALL_OW 69
31587: ST_TO_ADDR
// if not tmp then
31588: LD_VAR 0 1
31592: NOT
31593: IFFALSE 31597
// exit ;
31595: GO 31623
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31597: LD_VAR 0 1
31601: PUSH
31602: LD_INT 1
31604: PPUSH
31605: LD_VAR 0 1
31609: PPUSH
31610: CALL_OW 12
31614: ARRAY
31615: PPUSH
31616: LD_INT 1
31618: PPUSH
31619: CALL_OW 234
// end ;
31623: PPOPN 1
31625: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
31626: LD_EXP 55
31630: IFFALSE 31638
31632: PUSH
31633: LD_EXP 97
31637: AND
31638: IFFALSE 31779
31640: GO 31642
31642: DISABLE
31643: LD_INT 0
31645: PPUSH
31646: PPUSH
31647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31648: LD_ADDR_VAR 0 3
31652: PUSH
31653: LD_INT 22
31655: PUSH
31656: LD_OWVAR 2
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 25
31667: PUSH
31668: LD_INT 1
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PPUSH
31679: CALL_OW 69
31683: ST_TO_ADDR
// if not tmp then
31684: LD_VAR 0 3
31688: NOT
31689: IFFALSE 31693
// exit ;
31691: GO 31779
// un := tmp [ rand ( 1 , tmp ) ] ;
31693: LD_ADDR_VAR 0 2
31697: PUSH
31698: LD_VAR 0 3
31702: PUSH
31703: LD_INT 1
31705: PPUSH
31706: LD_VAR 0 3
31710: PPUSH
31711: CALL_OW 12
31715: ARRAY
31716: ST_TO_ADDR
// if Crawls ( un ) then
31717: LD_VAR 0 2
31721: PPUSH
31722: CALL_OW 318
31726: IFFALSE 31737
// ComWalk ( un ) ;
31728: LD_VAR 0 2
31732: PPUSH
31733: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
31737: LD_VAR 0 2
31741: PPUSH
31742: LD_INT 9
31744: PPUSH
31745: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
31749: LD_INT 28
31751: PPUSH
31752: LD_OWVAR 2
31756: PPUSH
31757: LD_INT 2
31759: PPUSH
31760: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
31764: LD_INT 29
31766: PPUSH
31767: LD_OWVAR 2
31771: PPUSH
31772: LD_INT 2
31774: PPUSH
31775: CALL_OW 322
// end ;
31779: PPOPN 3
31781: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
31782: LD_EXP 55
31786: IFFALSE 31794
31788: PUSH
31789: LD_EXP 98
31793: AND
31794: IFFALSE 31905
31796: GO 31798
31798: DISABLE
31799: LD_INT 0
31801: PPUSH
31802: PPUSH
31803: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31804: LD_ADDR_VAR 0 3
31808: PUSH
31809: LD_INT 22
31811: PUSH
31812: LD_OWVAR 2
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 25
31823: PUSH
31824: LD_INT 1
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PPUSH
31835: CALL_OW 69
31839: ST_TO_ADDR
// if not tmp then
31840: LD_VAR 0 3
31844: NOT
31845: IFFALSE 31849
// exit ;
31847: GO 31905
// un := tmp [ rand ( 1 , tmp ) ] ;
31849: LD_ADDR_VAR 0 2
31853: PUSH
31854: LD_VAR 0 3
31858: PUSH
31859: LD_INT 1
31861: PPUSH
31862: LD_VAR 0 3
31866: PPUSH
31867: CALL_OW 12
31871: ARRAY
31872: ST_TO_ADDR
// if Crawls ( un ) then
31873: LD_VAR 0 2
31877: PPUSH
31878: CALL_OW 318
31882: IFFALSE 31893
// ComWalk ( un ) ;
31884: LD_VAR 0 2
31888: PPUSH
31889: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31893: LD_VAR 0 2
31897: PPUSH
31898: LD_INT 8
31900: PPUSH
31901: CALL_OW 336
// end ;
31905: PPOPN 3
31907: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
31908: LD_EXP 55
31912: IFFALSE 31920
31914: PUSH
31915: LD_EXP 99
31919: AND
31920: IFFALSE 32064
31922: GO 31924
31924: DISABLE
31925: LD_INT 0
31927: PPUSH
31928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
31929: LD_ADDR_VAR 0 2
31933: PUSH
31934: LD_INT 22
31936: PUSH
31937: LD_OWVAR 2
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 21
31948: PUSH
31949: LD_INT 2
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 2
31958: PUSH
31959: LD_INT 34
31961: PUSH
31962: LD_INT 12
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 34
31971: PUSH
31972: LD_INT 51
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 34
31981: PUSH
31982: LD_INT 32
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: LIST
31999: PPUSH
32000: CALL_OW 69
32004: ST_TO_ADDR
// if not tmp then
32005: LD_VAR 0 2
32009: NOT
32010: IFFALSE 32014
// exit ;
32012: GO 32064
// for i in tmp do
32014: LD_ADDR_VAR 0 1
32018: PUSH
32019: LD_VAR 0 2
32023: PUSH
32024: FOR_IN
32025: IFFALSE 32062
// if GetCargo ( i , mat_artifact ) = 0 then
32027: LD_VAR 0 1
32031: PPUSH
32032: LD_INT 4
32034: PPUSH
32035: CALL_OW 289
32039: PUSH
32040: LD_INT 0
32042: EQUAL
32043: IFFALSE 32060
// SetCargo ( i , mat_siberit , 100 ) ;
32045: LD_VAR 0 1
32049: PPUSH
32050: LD_INT 3
32052: PPUSH
32053: LD_INT 100
32055: PPUSH
32056: CALL_OW 290
32060: GO 32024
32062: POP
32063: POP
// end ;
32064: PPOPN 2
32066: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
32067: LD_EXP 55
32071: IFFALSE 32079
32073: PUSH
32074: LD_EXP 100
32078: AND
32079: IFFALSE 32262
32081: GO 32083
32083: DISABLE
32084: LD_INT 0
32086: PPUSH
32087: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32088: LD_ADDR_VAR 0 2
32092: PUSH
32093: LD_INT 22
32095: PUSH
32096: LD_OWVAR 2
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PPUSH
32105: CALL_OW 69
32109: ST_TO_ADDR
// if not tmp then
32110: LD_VAR 0 2
32114: NOT
32115: IFFALSE 32119
// exit ;
32117: GO 32262
// for i := 1 to 2 do
32119: LD_ADDR_VAR 0 1
32123: PUSH
32124: DOUBLE
32125: LD_INT 1
32127: DEC
32128: ST_TO_ADDR
32129: LD_INT 2
32131: PUSH
32132: FOR_TO
32133: IFFALSE 32260
// begin uc_side := your_side ;
32135: LD_ADDR_OWVAR 20
32139: PUSH
32140: LD_OWVAR 2
32144: ST_TO_ADDR
// uc_nation := nation_american ;
32145: LD_ADDR_OWVAR 21
32149: PUSH
32150: LD_INT 1
32152: ST_TO_ADDR
// vc_chassis := us_morphling ;
32153: LD_ADDR_OWVAR 37
32157: PUSH
32158: LD_INT 5
32160: ST_TO_ADDR
// vc_engine := engine_siberite ;
32161: LD_ADDR_OWVAR 39
32165: PUSH
32166: LD_INT 3
32168: ST_TO_ADDR
// vc_control := control_computer ;
32169: LD_ADDR_OWVAR 38
32173: PUSH
32174: LD_INT 3
32176: ST_TO_ADDR
// vc_weapon := us_double_laser ;
32177: LD_ADDR_OWVAR 40
32181: PUSH
32182: LD_INT 10
32184: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
32185: LD_VAR 0 2
32189: PUSH
32190: LD_INT 1
32192: ARRAY
32193: PPUSH
32194: CALL_OW 310
32198: NOT
32199: IFFALSE 32246
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
32201: CALL_OW 45
32205: PPUSH
32206: LD_VAR 0 2
32210: PUSH
32211: LD_INT 1
32213: ARRAY
32214: PPUSH
32215: CALL_OW 250
32219: PPUSH
32220: LD_VAR 0 2
32224: PUSH
32225: LD_INT 1
32227: ARRAY
32228: PPUSH
32229: CALL_OW 251
32233: PPUSH
32234: LD_INT 12
32236: PPUSH
32237: LD_INT 1
32239: PPUSH
32240: CALL_OW 50
32244: GO 32258
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
32246: CALL_OW 45
32250: PPUSH
32251: LD_INT 1
32253: PPUSH
32254: CALL_OW 51
// end ;
32258: GO 32132
32260: POP
32261: POP
// end ;
32262: PPOPN 2
32264: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
32265: LD_EXP 55
32269: IFFALSE 32277
32271: PUSH
32272: LD_EXP 101
32276: AND
32277: IFFALSE 32499
32279: GO 32281
32281: DISABLE
32282: LD_INT 0
32284: PPUSH
32285: PPUSH
32286: PPUSH
32287: PPUSH
32288: PPUSH
32289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32290: LD_ADDR_VAR 0 6
32294: PUSH
32295: LD_INT 22
32297: PUSH
32298: LD_OWVAR 2
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 21
32309: PUSH
32310: LD_INT 1
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 3
32319: PUSH
32320: LD_INT 23
32322: PUSH
32323: LD_INT 0
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: LIST
32338: PPUSH
32339: CALL_OW 69
32343: ST_TO_ADDR
// if not tmp then
32344: LD_VAR 0 6
32348: NOT
32349: IFFALSE 32353
// exit ;
32351: GO 32499
// s1 := rand ( 1 , 4 ) ;
32353: LD_ADDR_VAR 0 2
32357: PUSH
32358: LD_INT 1
32360: PPUSH
32361: LD_INT 4
32363: PPUSH
32364: CALL_OW 12
32368: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
32369: LD_ADDR_VAR 0 4
32373: PUSH
32374: LD_VAR 0 6
32378: PUSH
32379: LD_INT 1
32381: ARRAY
32382: PPUSH
32383: LD_VAR 0 2
32387: PPUSH
32388: CALL_OW 259
32392: ST_TO_ADDR
// if s1 = 1 then
32393: LD_VAR 0 2
32397: PUSH
32398: LD_INT 1
32400: EQUAL
32401: IFFALSE 32421
// s2 := rand ( 2 , 4 ) else
32403: LD_ADDR_VAR 0 3
32407: PUSH
32408: LD_INT 2
32410: PPUSH
32411: LD_INT 4
32413: PPUSH
32414: CALL_OW 12
32418: ST_TO_ADDR
32419: GO 32429
// s2 := 1 ;
32421: LD_ADDR_VAR 0 3
32425: PUSH
32426: LD_INT 1
32428: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
32429: LD_ADDR_VAR 0 5
32433: PUSH
32434: LD_VAR 0 6
32438: PUSH
32439: LD_INT 1
32441: ARRAY
32442: PPUSH
32443: LD_VAR 0 3
32447: PPUSH
32448: CALL_OW 259
32452: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
32453: LD_VAR 0 6
32457: PUSH
32458: LD_INT 1
32460: ARRAY
32461: PPUSH
32462: LD_VAR 0 2
32466: PPUSH
32467: LD_VAR 0 5
32471: PPUSH
32472: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
32476: LD_VAR 0 6
32480: PUSH
32481: LD_INT 1
32483: ARRAY
32484: PPUSH
32485: LD_VAR 0 3
32489: PPUSH
32490: LD_VAR 0 4
32494: PPUSH
32495: CALL_OW 237
// end ;
32499: PPOPN 6
32501: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
32502: LD_EXP 55
32506: IFFALSE 32514
32508: PUSH
32509: LD_EXP 102
32513: AND
32514: IFFALSE 32593
32516: GO 32518
32518: DISABLE
32519: LD_INT 0
32521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
32522: LD_ADDR_VAR 0 1
32526: PUSH
32527: LD_INT 22
32529: PUSH
32530: LD_OWVAR 2
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 30
32541: PUSH
32542: LD_INT 3
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PPUSH
32553: CALL_OW 69
32557: ST_TO_ADDR
// if not tmp then
32558: LD_VAR 0 1
32562: NOT
32563: IFFALSE 32567
// exit ;
32565: GO 32593
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32567: LD_VAR 0 1
32571: PUSH
32572: LD_INT 1
32574: PPUSH
32575: LD_VAR 0 1
32579: PPUSH
32580: CALL_OW 12
32584: ARRAY
32585: PPUSH
32586: LD_INT 1
32588: PPUSH
32589: CALL_OW 234
// end ;
32593: PPOPN 1
32595: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
32596: LD_EXP 55
32600: IFFALSE 32608
32602: PUSH
32603: LD_EXP 103
32607: AND
32608: IFFALSE 32720
32610: GO 32612
32612: DISABLE
32613: LD_INT 0
32615: PPUSH
32616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
32617: LD_ADDR_VAR 0 2
32621: PUSH
32622: LD_INT 22
32624: PUSH
32625: LD_OWVAR 2
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 2
32636: PUSH
32637: LD_INT 30
32639: PUSH
32640: LD_INT 27
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 30
32649: PUSH
32650: LD_INT 26
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 30
32659: PUSH
32660: LD_INT 28
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PPUSH
32677: CALL_OW 69
32681: ST_TO_ADDR
// if not tmp then
32682: LD_VAR 0 2
32686: NOT
32687: IFFALSE 32691
// exit ;
32689: GO 32720
// for i in tmp do
32691: LD_ADDR_VAR 0 1
32695: PUSH
32696: LD_VAR 0 2
32700: PUSH
32701: FOR_IN
32702: IFFALSE 32718
// SetLives ( i , 1 ) ;
32704: LD_VAR 0 1
32708: PPUSH
32709: LD_INT 1
32711: PPUSH
32712: CALL_OW 234
32716: GO 32701
32718: POP
32719: POP
// end ;
32720: PPOPN 2
32722: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
32723: LD_EXP 55
32727: IFFALSE 32735
32729: PUSH
32730: LD_EXP 104
32734: AND
32735: IFFALSE 33022
32737: GO 32739
32739: DISABLE
32740: LD_INT 0
32742: PPUSH
32743: PPUSH
32744: PPUSH
// begin i := rand ( 1 , 7 ) ;
32745: LD_ADDR_VAR 0 1
32749: PUSH
32750: LD_INT 1
32752: PPUSH
32753: LD_INT 7
32755: PPUSH
32756: CALL_OW 12
32760: ST_TO_ADDR
// case i of 1 :
32761: LD_VAR 0 1
32765: PUSH
32766: LD_INT 1
32768: DOUBLE
32769: EQUAL
32770: IFTRUE 32774
32772: GO 32784
32774: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
32775: LD_STRING earthquake(getX(game), 0, 32)
32777: PPUSH
32778: CALL_OW 559
32782: GO 33022
32784: LD_INT 2
32786: DOUBLE
32787: EQUAL
32788: IFTRUE 32792
32790: GO 32806
32792: POP
// begin ToLua ( displayStucuk(); ) ;
32793: LD_STRING displayStucuk();
32795: PPUSH
32796: CALL_OW 559
// ResetFog ;
32800: CALL_OW 335
// end ; 3 :
32804: GO 33022
32806: LD_INT 3
32808: DOUBLE
32809: EQUAL
32810: IFTRUE 32814
32812: GO 32918
32814: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32815: LD_ADDR_VAR 0 2
32819: PUSH
32820: LD_INT 22
32822: PUSH
32823: LD_OWVAR 2
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 25
32834: PUSH
32835: LD_INT 1
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PPUSH
32846: CALL_OW 69
32850: ST_TO_ADDR
// if not tmp then
32851: LD_VAR 0 2
32855: NOT
32856: IFFALSE 32860
// exit ;
32858: GO 33022
// un := tmp [ rand ( 1 , tmp ) ] ;
32860: LD_ADDR_VAR 0 3
32864: PUSH
32865: LD_VAR 0 2
32869: PUSH
32870: LD_INT 1
32872: PPUSH
32873: LD_VAR 0 2
32877: PPUSH
32878: CALL_OW 12
32882: ARRAY
32883: ST_TO_ADDR
// if Crawls ( un ) then
32884: LD_VAR 0 3
32888: PPUSH
32889: CALL_OW 318
32893: IFFALSE 32904
// ComWalk ( un ) ;
32895: LD_VAR 0 3
32899: PPUSH
32900: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32904: LD_VAR 0 3
32908: PPUSH
32909: LD_INT 8
32911: PPUSH
32912: CALL_OW 336
// end ; 4 :
32916: GO 33022
32918: LD_INT 4
32920: DOUBLE
32921: EQUAL
32922: IFTRUE 32926
32924: GO 33000
32926: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
32927: LD_ADDR_VAR 0 2
32931: PUSH
32932: LD_INT 22
32934: PUSH
32935: LD_OWVAR 2
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 30
32946: PUSH
32947: LD_INT 29
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PPUSH
32958: CALL_OW 69
32962: ST_TO_ADDR
// if not tmp then
32963: LD_VAR 0 2
32967: NOT
32968: IFFALSE 32972
// exit ;
32970: GO 33022
// CenterNowOnUnits ( tmp [ 1 ] ) ;
32972: LD_VAR 0 2
32976: PUSH
32977: LD_INT 1
32979: ARRAY
32980: PPUSH
32981: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
32985: LD_VAR 0 2
32989: PUSH
32990: LD_INT 1
32992: ARRAY
32993: PPUSH
32994: CALL_OW 65
// end ; 5 .. 7 :
32998: GO 33022
33000: LD_INT 5
33002: DOUBLE
33003: GREATEREQUAL
33004: IFFALSE 33012
33006: LD_INT 7
33008: DOUBLE
33009: LESSEQUAL
33010: IFTRUE 33014
33012: GO 33021
33014: POP
// StreamSibBomb ; end ;
33015: CALL 29203 0 0
33019: GO 33022
33021: POP
// end ;
33022: PPOPN 3
33024: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
33025: LD_EXP 55
33029: IFFALSE 33037
33031: PUSH
33032: LD_EXP 105
33036: AND
33037: IFFALSE 33193
33039: GO 33041
33041: DISABLE
33042: LD_INT 0
33044: PPUSH
33045: PPUSH
33046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
33047: LD_ADDR_VAR 0 2
33051: PUSH
33052: LD_INT 81
33054: PUSH
33055: LD_OWVAR 2
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 2
33066: PUSH
33067: LD_INT 21
33069: PUSH
33070: LD_INT 1
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 21
33079: PUSH
33080: LD_INT 2
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: LIST
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PPUSH
33096: CALL_OW 69
33100: ST_TO_ADDR
// if not tmp then
33101: LD_VAR 0 2
33105: NOT
33106: IFFALSE 33110
// exit ;
33108: GO 33193
// p := 0 ;
33110: LD_ADDR_VAR 0 3
33114: PUSH
33115: LD_INT 0
33117: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33118: LD_INT 35
33120: PPUSH
33121: CALL_OW 67
// p := p + 1 ;
33125: LD_ADDR_VAR 0 3
33129: PUSH
33130: LD_VAR 0 3
33134: PUSH
33135: LD_INT 1
33137: PLUS
33138: ST_TO_ADDR
// for i in tmp do
33139: LD_ADDR_VAR 0 1
33143: PUSH
33144: LD_VAR 0 2
33148: PUSH
33149: FOR_IN
33150: IFFALSE 33181
// if GetLives ( i ) < 1000 then
33152: LD_VAR 0 1
33156: PPUSH
33157: CALL_OW 256
33161: PUSH
33162: LD_INT 1000
33164: LESS
33165: IFFALSE 33179
// SetLives ( i , 1000 ) ;
33167: LD_VAR 0 1
33171: PPUSH
33172: LD_INT 1000
33174: PPUSH
33175: CALL_OW 234
33179: GO 33149
33181: POP
33182: POP
// until p > 20 ;
33183: LD_VAR 0 3
33187: PUSH
33188: LD_INT 20
33190: GREATER
33191: IFFALSE 33118
// end ;
33193: PPOPN 3
33195: END
// every 0 0$1 trigger StreamModeActive and sTime do
33196: LD_EXP 55
33200: IFFALSE 33208
33202: PUSH
33203: LD_EXP 106
33207: AND
33208: IFFALSE 33243
33210: GO 33212
33212: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
33213: LD_INT 28
33215: PPUSH
33216: LD_OWVAR 2
33220: PPUSH
33221: LD_INT 2
33223: PPUSH
33224: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
33228: LD_INT 30
33230: PPUSH
33231: LD_OWVAR 2
33235: PPUSH
33236: LD_INT 2
33238: PPUSH
33239: CALL_OW 322
// end ;
33243: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
33244: LD_EXP 55
33248: IFFALSE 33256
33250: PUSH
33251: LD_EXP 107
33255: AND
33256: IFFALSE 33377
33258: GO 33260
33260: DISABLE
33261: LD_INT 0
33263: PPUSH
33264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33265: LD_ADDR_VAR 0 2
33269: PUSH
33270: LD_INT 22
33272: PUSH
33273: LD_OWVAR 2
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 21
33284: PUSH
33285: LD_INT 1
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 3
33294: PUSH
33295: LD_INT 23
33297: PUSH
33298: LD_INT 0
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: LIST
33313: PPUSH
33314: CALL_OW 69
33318: ST_TO_ADDR
// if not tmp then
33319: LD_VAR 0 2
33323: NOT
33324: IFFALSE 33328
// exit ;
33326: GO 33377
// for i in tmp do
33328: LD_ADDR_VAR 0 1
33332: PUSH
33333: LD_VAR 0 2
33337: PUSH
33338: FOR_IN
33339: IFFALSE 33375
// begin if Crawls ( i ) then
33341: LD_VAR 0 1
33345: PPUSH
33346: CALL_OW 318
33350: IFFALSE 33361
// ComWalk ( i ) ;
33352: LD_VAR 0 1
33356: PPUSH
33357: CALL_OW 138
// SetClass ( i , 2 ) ;
33361: LD_VAR 0 1
33365: PPUSH
33366: LD_INT 2
33368: PPUSH
33369: CALL_OW 336
// end ;
33373: GO 33338
33375: POP
33376: POP
// end ;
33377: PPOPN 2
33379: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
33380: LD_EXP 55
33384: IFFALSE 33392
33386: PUSH
33387: LD_EXP 108
33391: AND
33392: IFFALSE 33682
33394: GO 33396
33396: DISABLE
33397: LD_INT 0
33399: PPUSH
33400: PPUSH
33401: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
33402: LD_OWVAR 2
33406: PPUSH
33407: LD_INT 9
33409: PPUSH
33410: LD_INT 1
33412: PPUSH
33413: LD_INT 1
33415: PPUSH
33416: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
33420: LD_INT 9
33422: PPUSH
33423: LD_OWVAR 2
33427: PPUSH
33428: CALL_OW 343
// uc_side := 9 ;
33432: LD_ADDR_OWVAR 20
33436: PUSH
33437: LD_INT 9
33439: ST_TO_ADDR
// uc_nation := 2 ;
33440: LD_ADDR_OWVAR 21
33444: PUSH
33445: LD_INT 2
33447: ST_TO_ADDR
// hc_name := Dark Warrior ;
33448: LD_ADDR_OWVAR 26
33452: PUSH
33453: LD_STRING Dark Warrior
33455: ST_TO_ADDR
// hc_gallery :=  ;
33456: LD_ADDR_OWVAR 33
33460: PUSH
33461: LD_STRING 
33463: ST_TO_ADDR
// hc_noskilllimit := true ;
33464: LD_ADDR_OWVAR 76
33468: PUSH
33469: LD_INT 1
33471: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
33472: LD_ADDR_OWVAR 31
33476: PUSH
33477: LD_INT 30
33479: PUSH
33480: LD_INT 30
33482: PUSH
33483: LD_INT 30
33485: PUSH
33486: LD_INT 30
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: ST_TO_ADDR
// un := CreateHuman ;
33495: LD_ADDR_VAR 0 3
33499: PUSH
33500: CALL_OW 44
33504: ST_TO_ADDR
// hc_noskilllimit := false ;
33505: LD_ADDR_OWVAR 76
33509: PUSH
33510: LD_INT 0
33512: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33513: LD_VAR 0 3
33517: PPUSH
33518: LD_INT 1
33520: PPUSH
33521: CALL_OW 51
// ToLua ( playRanger() ) ;
33525: LD_STRING playRanger()
33527: PPUSH
33528: CALL_OW 559
// p := 0 ;
33532: LD_ADDR_VAR 0 2
33536: PUSH
33537: LD_INT 0
33539: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33540: LD_INT 35
33542: PPUSH
33543: CALL_OW 67
// p := p + 1 ;
33547: LD_ADDR_VAR 0 2
33551: PUSH
33552: LD_VAR 0 2
33556: PUSH
33557: LD_INT 1
33559: PLUS
33560: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
33561: LD_VAR 0 3
33565: PPUSH
33566: CALL_OW 256
33570: PUSH
33571: LD_INT 1000
33573: LESS
33574: IFFALSE 33588
// SetLives ( un , 1000 ) ;
33576: LD_VAR 0 3
33580: PPUSH
33581: LD_INT 1000
33583: PPUSH
33584: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
33588: LD_VAR 0 3
33592: PPUSH
33593: LD_INT 81
33595: PUSH
33596: LD_OWVAR 2
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 91
33607: PUSH
33608: LD_VAR 0 3
33612: PUSH
33613: LD_INT 30
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: LIST
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PPUSH
33625: CALL_OW 69
33629: PPUSH
33630: LD_VAR 0 3
33634: PPUSH
33635: CALL_OW 74
33639: PPUSH
33640: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
33644: LD_VAR 0 2
33648: PUSH
33649: LD_INT 80
33651: GREATER
33652: IFTRUE 33665
33654: PUSH
33655: LD_VAR 0 3
33659: PPUSH
33660: CALL_OW 301
33664: OR
33665: IFFALSE 33540
// if un then
33667: LD_VAR 0 3
33671: IFFALSE 33682
// RemoveUnit ( un ) ;
33673: LD_VAR 0 3
33677: PPUSH
33678: CALL_OW 64
// end ;
33682: PPOPN 3
33684: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
33685: LD_EXP 109
33689: IFFALSE 33805
33691: GO 33693
33693: DISABLE
33694: LD_INT 0
33696: PPUSH
33697: PPUSH
33698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33699: LD_ADDR_VAR 0 2
33703: PUSH
33704: LD_INT 81
33706: PUSH
33707: LD_OWVAR 2
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 21
33718: PUSH
33719: LD_INT 1
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PPUSH
33730: CALL_OW 69
33734: ST_TO_ADDR
// ToLua ( playComputer() ) ;
33735: LD_STRING playComputer()
33737: PPUSH
33738: CALL_OW 559
// if not tmp then
33742: LD_VAR 0 2
33746: NOT
33747: IFFALSE 33751
// exit ;
33749: GO 33805
// for i in tmp do
33751: LD_ADDR_VAR 0 1
33755: PUSH
33756: LD_VAR 0 2
33760: PUSH
33761: FOR_IN
33762: IFFALSE 33803
// for j := 1 to 4 do
33764: LD_ADDR_VAR 0 3
33768: PUSH
33769: DOUBLE
33770: LD_INT 1
33772: DEC
33773: ST_TO_ADDR
33774: LD_INT 4
33776: PUSH
33777: FOR_TO
33778: IFFALSE 33799
// SetSkill ( i , j , 10 ) ;
33780: LD_VAR 0 1
33784: PPUSH
33785: LD_VAR 0 3
33789: PPUSH
33790: LD_INT 10
33792: PPUSH
33793: CALL_OW 237
33797: GO 33777
33799: POP
33800: POP
33801: GO 33761
33803: POP
33804: POP
// end ;
33805: PPOPN 3
33807: END
// every 0 0$1 trigger s30 do var i , tmp ;
33808: LD_EXP 110
33812: IFFALSE 33881
33814: GO 33816
33816: DISABLE
33817: LD_INT 0
33819: PPUSH
33820: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33821: LD_ADDR_VAR 0 2
33825: PUSH
33826: LD_INT 22
33828: PUSH
33829: LD_OWVAR 2
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PPUSH
33838: CALL_OW 69
33842: ST_TO_ADDR
// if not tmp then
33843: LD_VAR 0 2
33847: NOT
33848: IFFALSE 33852
// exit ;
33850: GO 33881
// for i in tmp do
33852: LD_ADDR_VAR 0 1
33856: PUSH
33857: LD_VAR 0 2
33861: PUSH
33862: FOR_IN
33863: IFFALSE 33879
// SetLives ( i , 300 ) ;
33865: LD_VAR 0 1
33869: PPUSH
33870: LD_INT 300
33872: PPUSH
33873: CALL_OW 234
33877: GO 33862
33879: POP
33880: POP
// end ;
33881: PPOPN 2
33883: END
// every 0 0$1 trigger s60 do var i , tmp ;
33884: LD_EXP 111
33888: IFFALSE 33957
33890: GO 33892
33892: DISABLE
33893: LD_INT 0
33895: PPUSH
33896: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33897: LD_ADDR_VAR 0 2
33901: PUSH
33902: LD_INT 22
33904: PUSH
33905: LD_OWVAR 2
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PPUSH
33914: CALL_OW 69
33918: ST_TO_ADDR
// if not tmp then
33919: LD_VAR 0 2
33923: NOT
33924: IFFALSE 33928
// exit ;
33926: GO 33957
// for i in tmp do
33928: LD_ADDR_VAR 0 1
33932: PUSH
33933: LD_VAR 0 2
33937: PUSH
33938: FOR_IN
33939: IFFALSE 33955
// SetLives ( i , 600 ) ;
33941: LD_VAR 0 1
33945: PPUSH
33946: LD_INT 600
33948: PPUSH
33949: CALL_OW 234
33953: GO 33938
33955: POP
33956: POP
// end ;
33957: PPOPN 2
33959: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
33960: LD_INT 0
33962: PPUSH
// case cmd of 301 :
33963: LD_VAR 0 1
33967: PUSH
33968: LD_INT 301
33970: DOUBLE
33971: EQUAL
33972: IFTRUE 33976
33974: GO 34008
33976: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
33977: LD_VAR 0 6
33981: PPUSH
33982: LD_VAR 0 7
33986: PPUSH
33987: LD_VAR 0 8
33991: PPUSH
33992: LD_VAR 0 4
33996: PPUSH
33997: LD_VAR 0 5
34001: PPUSH
34002: CALL 35221 0 5
34006: GO 34129
34008: LD_INT 302
34010: DOUBLE
34011: EQUAL
34012: IFTRUE 34016
34014: GO 34053
34016: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
34017: LD_VAR 0 6
34021: PPUSH
34022: LD_VAR 0 7
34026: PPUSH
34027: LD_VAR 0 8
34031: PPUSH
34032: LD_VAR 0 9
34036: PPUSH
34037: LD_VAR 0 4
34041: PPUSH
34042: LD_VAR 0 5
34046: PPUSH
34047: CALL 35312 0 6
34051: GO 34129
34053: LD_INT 303
34055: DOUBLE
34056: EQUAL
34057: IFTRUE 34061
34059: GO 34098
34061: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
34062: LD_VAR 0 6
34066: PPUSH
34067: LD_VAR 0 7
34071: PPUSH
34072: LD_VAR 0 8
34076: PPUSH
34077: LD_VAR 0 9
34081: PPUSH
34082: LD_VAR 0 4
34086: PPUSH
34087: LD_VAR 0 5
34091: PPUSH
34092: CALL 34134 0 6
34096: GO 34129
34098: LD_INT 304
34100: DOUBLE
34101: EQUAL
34102: IFTRUE 34106
34104: GO 34128
34106: POP
// hHackTeleport ( unit , x , y ) ; end ;
34107: LD_VAR 0 2
34111: PPUSH
34112: LD_VAR 0 4
34116: PPUSH
34117: LD_VAR 0 5
34121: PPUSH
34122: CALL 35905 0 3
34126: GO 34129
34128: POP
// end ;
34129: LD_VAR 0 12
34133: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
34134: LD_INT 0
34136: PPUSH
34137: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
34138: LD_VAR 0 1
34142: PUSH
34143: LD_INT 1
34145: LESS
34146: IFTRUE 34158
34148: PUSH
34149: LD_VAR 0 1
34153: PUSH
34154: LD_INT 3
34156: GREATER
34157: OR
34158: IFTRUE 34176
34160: PUSH
34161: LD_VAR 0 5
34165: PPUSH
34166: LD_VAR 0 6
34170: PPUSH
34171: CALL_OW 428
34175: OR
34176: IFFALSE 34180
// exit ;
34178: GO 34908
// uc_side := your_side ;
34180: LD_ADDR_OWVAR 20
34184: PUSH
34185: LD_OWVAR 2
34189: ST_TO_ADDR
// uc_nation := nation ;
34190: LD_ADDR_OWVAR 21
34194: PUSH
34195: LD_VAR 0 1
34199: ST_TO_ADDR
// bc_level = 1 ;
34200: LD_ADDR_OWVAR 43
34204: PUSH
34205: LD_INT 1
34207: ST_TO_ADDR
// case btype of 1 :
34208: LD_VAR 0 2
34212: PUSH
34213: LD_INT 1
34215: DOUBLE
34216: EQUAL
34217: IFTRUE 34221
34219: GO 34232
34221: POP
// bc_type := b_depot ; 2 :
34222: LD_ADDR_OWVAR 42
34226: PUSH
34227: LD_INT 0
34229: ST_TO_ADDR
34230: GO 34852
34232: LD_INT 2
34234: DOUBLE
34235: EQUAL
34236: IFTRUE 34240
34238: GO 34251
34240: POP
// bc_type := b_warehouse ; 3 :
34241: LD_ADDR_OWVAR 42
34245: PUSH
34246: LD_INT 1
34248: ST_TO_ADDR
34249: GO 34852
34251: LD_INT 3
34253: DOUBLE
34254: EQUAL
34255: IFTRUE 34259
34257: GO 34270
34259: POP
// bc_type := b_lab ; 4 .. 9 :
34260: LD_ADDR_OWVAR 42
34264: PUSH
34265: LD_INT 6
34267: ST_TO_ADDR
34268: GO 34852
34270: LD_INT 4
34272: DOUBLE
34273: GREATEREQUAL
34274: IFFALSE 34282
34276: LD_INT 9
34278: DOUBLE
34279: LESSEQUAL
34280: IFTRUE 34284
34282: GO 34344
34284: POP
// begin bc_type := b_lab_half ;
34285: LD_ADDR_OWVAR 42
34289: PUSH
34290: LD_INT 7
34292: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
34293: LD_ADDR_OWVAR 44
34297: PUSH
34298: LD_INT 10
34300: PUSH
34301: LD_INT 11
34303: PUSH
34304: LD_INT 12
34306: PUSH
34307: LD_INT 15
34309: PUSH
34310: LD_INT 14
34312: PUSH
34313: LD_INT 13
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: PUSH
34324: LD_VAR 0 2
34328: PUSH
34329: LD_INT 3
34331: MINUS
34332: ARRAY
34333: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
34334: LD_ADDR_OWVAR 45
34338: PUSH
34339: LD_INT 9
34341: ST_TO_ADDR
// end ; 10 .. 13 :
34342: GO 34852
34344: LD_INT 10
34346: DOUBLE
34347: GREATEREQUAL
34348: IFFALSE 34356
34350: LD_INT 13
34352: DOUBLE
34353: LESSEQUAL
34354: IFTRUE 34358
34356: GO 34435
34358: POP
// begin bc_type := b_lab_full ;
34359: LD_ADDR_OWVAR 42
34363: PUSH
34364: LD_INT 8
34366: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
34367: LD_ADDR_OWVAR 44
34371: PUSH
34372: LD_INT 10
34374: PUSH
34375: LD_INT 12
34377: PUSH
34378: LD_INT 14
34380: PUSH
34381: LD_INT 13
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: PUSH
34390: LD_VAR 0 2
34394: PUSH
34395: LD_INT 9
34397: MINUS
34398: ARRAY
34399: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
34400: LD_ADDR_OWVAR 45
34404: PUSH
34405: LD_INT 11
34407: PUSH
34408: LD_INT 15
34410: PUSH
34411: LD_INT 12
34413: PUSH
34414: LD_INT 15
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: PUSH
34423: LD_VAR 0 2
34427: PUSH
34428: LD_INT 9
34430: MINUS
34431: ARRAY
34432: ST_TO_ADDR
// end ; 14 :
34433: GO 34852
34435: LD_INT 14
34437: DOUBLE
34438: EQUAL
34439: IFTRUE 34443
34441: GO 34454
34443: POP
// bc_type := b_workshop ; 15 :
34444: LD_ADDR_OWVAR 42
34448: PUSH
34449: LD_INT 2
34451: ST_TO_ADDR
34452: GO 34852
34454: LD_INT 15
34456: DOUBLE
34457: EQUAL
34458: IFTRUE 34462
34460: GO 34473
34462: POP
// bc_type := b_factory ; 16 :
34463: LD_ADDR_OWVAR 42
34467: PUSH
34468: LD_INT 3
34470: ST_TO_ADDR
34471: GO 34852
34473: LD_INT 16
34475: DOUBLE
34476: EQUAL
34477: IFTRUE 34481
34479: GO 34492
34481: POP
// bc_type := b_ext_gun ; 17 :
34482: LD_ADDR_OWVAR 42
34486: PUSH
34487: LD_INT 17
34489: ST_TO_ADDR
34490: GO 34852
34492: LD_INT 17
34494: DOUBLE
34495: EQUAL
34496: IFTRUE 34500
34498: GO 34528
34500: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
34501: LD_ADDR_OWVAR 42
34505: PUSH
34506: LD_INT 19
34508: PUSH
34509: LD_INT 23
34511: PUSH
34512: LD_INT 19
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: LIST
34519: PUSH
34520: LD_VAR 0 1
34524: ARRAY
34525: ST_TO_ADDR
34526: GO 34852
34528: LD_INT 18
34530: DOUBLE
34531: EQUAL
34532: IFTRUE 34536
34534: GO 34547
34536: POP
// bc_type := b_ext_radar ; 19 :
34537: LD_ADDR_OWVAR 42
34541: PUSH
34542: LD_INT 20
34544: ST_TO_ADDR
34545: GO 34852
34547: LD_INT 19
34549: DOUBLE
34550: EQUAL
34551: IFTRUE 34555
34553: GO 34566
34555: POP
// bc_type := b_ext_radio ; 20 :
34556: LD_ADDR_OWVAR 42
34560: PUSH
34561: LD_INT 22
34563: ST_TO_ADDR
34564: GO 34852
34566: LD_INT 20
34568: DOUBLE
34569: EQUAL
34570: IFTRUE 34574
34572: GO 34585
34574: POP
// bc_type := b_ext_siberium ; 21 :
34575: LD_ADDR_OWVAR 42
34579: PUSH
34580: LD_INT 21
34582: ST_TO_ADDR
34583: GO 34852
34585: LD_INT 21
34587: DOUBLE
34588: EQUAL
34589: IFTRUE 34593
34591: GO 34604
34593: POP
// bc_type := b_ext_computer ; 22 :
34594: LD_ADDR_OWVAR 42
34598: PUSH
34599: LD_INT 24
34601: ST_TO_ADDR
34602: GO 34852
34604: LD_INT 22
34606: DOUBLE
34607: EQUAL
34608: IFTRUE 34612
34610: GO 34623
34612: POP
// bc_type := b_ext_track ; 23 :
34613: LD_ADDR_OWVAR 42
34617: PUSH
34618: LD_INT 16
34620: ST_TO_ADDR
34621: GO 34852
34623: LD_INT 23
34625: DOUBLE
34626: EQUAL
34627: IFTRUE 34631
34629: GO 34642
34631: POP
// bc_type := b_ext_laser ; 24 :
34632: LD_ADDR_OWVAR 42
34636: PUSH
34637: LD_INT 25
34639: ST_TO_ADDR
34640: GO 34852
34642: LD_INT 24
34644: DOUBLE
34645: EQUAL
34646: IFTRUE 34650
34648: GO 34661
34650: POP
// bc_type := b_control_tower ; 25 :
34651: LD_ADDR_OWVAR 42
34655: PUSH
34656: LD_INT 36
34658: ST_TO_ADDR
34659: GO 34852
34661: LD_INT 25
34663: DOUBLE
34664: EQUAL
34665: IFTRUE 34669
34667: GO 34680
34669: POP
// bc_type := b_breastwork ; 26 :
34670: LD_ADDR_OWVAR 42
34674: PUSH
34675: LD_INT 31
34677: ST_TO_ADDR
34678: GO 34852
34680: LD_INT 26
34682: DOUBLE
34683: EQUAL
34684: IFTRUE 34688
34686: GO 34699
34688: POP
// bc_type := b_bunker ; 27 :
34689: LD_ADDR_OWVAR 42
34693: PUSH
34694: LD_INT 32
34696: ST_TO_ADDR
34697: GO 34852
34699: LD_INT 27
34701: DOUBLE
34702: EQUAL
34703: IFTRUE 34707
34705: GO 34718
34707: POP
// bc_type := b_turret ; 28 :
34708: LD_ADDR_OWVAR 42
34712: PUSH
34713: LD_INT 33
34715: ST_TO_ADDR
34716: GO 34852
34718: LD_INT 28
34720: DOUBLE
34721: EQUAL
34722: IFTRUE 34726
34724: GO 34737
34726: POP
// bc_type := b_armoury ; 29 :
34727: LD_ADDR_OWVAR 42
34731: PUSH
34732: LD_INT 4
34734: ST_TO_ADDR
34735: GO 34852
34737: LD_INT 29
34739: DOUBLE
34740: EQUAL
34741: IFTRUE 34745
34743: GO 34756
34745: POP
// bc_type := b_barracks ; 30 :
34746: LD_ADDR_OWVAR 42
34750: PUSH
34751: LD_INT 5
34753: ST_TO_ADDR
34754: GO 34852
34756: LD_INT 30
34758: DOUBLE
34759: EQUAL
34760: IFTRUE 34764
34762: GO 34775
34764: POP
// bc_type := b_solar_power ; 31 :
34765: LD_ADDR_OWVAR 42
34769: PUSH
34770: LD_INT 27
34772: ST_TO_ADDR
34773: GO 34852
34775: LD_INT 31
34777: DOUBLE
34778: EQUAL
34779: IFTRUE 34783
34781: GO 34794
34783: POP
// bc_type := b_oil_power ; 32 :
34784: LD_ADDR_OWVAR 42
34788: PUSH
34789: LD_INT 26
34791: ST_TO_ADDR
34792: GO 34852
34794: LD_INT 32
34796: DOUBLE
34797: EQUAL
34798: IFTRUE 34802
34800: GO 34813
34802: POP
// bc_type := b_siberite_power ; 33 :
34803: LD_ADDR_OWVAR 42
34807: PUSH
34808: LD_INT 28
34810: ST_TO_ADDR
34811: GO 34852
34813: LD_INT 33
34815: DOUBLE
34816: EQUAL
34817: IFTRUE 34821
34819: GO 34832
34821: POP
// bc_type := b_oil_mine ; 34 :
34822: LD_ADDR_OWVAR 42
34826: PUSH
34827: LD_INT 29
34829: ST_TO_ADDR
34830: GO 34852
34832: LD_INT 34
34834: DOUBLE
34835: EQUAL
34836: IFTRUE 34840
34838: GO 34851
34840: POP
// bc_type := b_siberite_mine ; end ;
34841: LD_ADDR_OWVAR 42
34845: PUSH
34846: LD_INT 30
34848: ST_TO_ADDR
34849: GO 34852
34851: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
34852: LD_ADDR_VAR 0 8
34856: PUSH
34857: LD_VAR 0 5
34861: PPUSH
34862: LD_VAR 0 6
34866: PPUSH
34867: LD_VAR 0 3
34871: PPUSH
34872: CALL_OW 47
34876: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
34877: LD_OWVAR 42
34881: PUSH
34882: LD_INT 32
34884: PUSH
34885: LD_INT 33
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: IN
34892: IFFALSE 34908
// PlaceWeaponTurret ( b , weapon ) ;
34894: LD_VAR 0 8
34898: PPUSH
34899: LD_VAR 0 4
34903: PPUSH
34904: CALL_OW 431
// end ;
34908: LD_VAR 0 7
34912: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
34913: LD_INT 0
34915: PPUSH
34916: PPUSH
34917: PPUSH
34918: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34919: LD_ADDR_VAR 0 4
34923: PUSH
34924: LD_INT 22
34926: PUSH
34927: LD_OWVAR 2
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 2
34938: PUSH
34939: LD_INT 30
34941: PUSH
34942: LD_INT 0
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 30
34951: PUSH
34952: LD_INT 1
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: LIST
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PPUSH
34968: CALL_OW 69
34972: ST_TO_ADDR
// if not tmp then
34973: LD_VAR 0 4
34977: NOT
34978: IFFALSE 34982
// exit ;
34980: GO 35041
// for i in tmp do
34982: LD_ADDR_VAR 0 2
34986: PUSH
34987: LD_VAR 0 4
34991: PUSH
34992: FOR_IN
34993: IFFALSE 35039
// for j = 1 to 3 do
34995: LD_ADDR_VAR 0 3
34999: PUSH
35000: DOUBLE
35001: LD_INT 1
35003: DEC
35004: ST_TO_ADDR
35005: LD_INT 3
35007: PUSH
35008: FOR_TO
35009: IFFALSE 35035
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
35011: LD_VAR 0 2
35015: PPUSH
35016: CALL_OW 274
35020: PPUSH
35021: LD_VAR 0 3
35025: PPUSH
35026: LD_INT 99999
35028: PPUSH
35029: CALL_OW 277
35033: GO 35008
35035: POP
35036: POP
35037: GO 34992
35039: POP
35040: POP
// end ;
35041: LD_VAR 0 1
35045: RET
// export function hHackSetLevel10 ; var i , j ; begin
35046: LD_INT 0
35048: PPUSH
35049: PPUSH
35050: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35051: LD_ADDR_VAR 0 2
35055: PUSH
35056: LD_INT 21
35058: PUSH
35059: LD_INT 1
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PPUSH
35066: CALL_OW 69
35070: PUSH
35071: FOR_IN
35072: IFFALSE 35124
// if IsSelected ( i ) then
35074: LD_VAR 0 2
35078: PPUSH
35079: CALL_OW 306
35083: IFFALSE 35122
// begin for j := 1 to 4 do
35085: LD_ADDR_VAR 0 3
35089: PUSH
35090: DOUBLE
35091: LD_INT 1
35093: DEC
35094: ST_TO_ADDR
35095: LD_INT 4
35097: PUSH
35098: FOR_TO
35099: IFFALSE 35120
// SetSkill ( i , j , 10 ) ;
35101: LD_VAR 0 2
35105: PPUSH
35106: LD_VAR 0 3
35110: PPUSH
35111: LD_INT 10
35113: PPUSH
35114: CALL_OW 237
35118: GO 35098
35120: POP
35121: POP
// end ;
35122: GO 35071
35124: POP
35125: POP
// end ;
35126: LD_VAR 0 1
35130: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
35131: LD_INT 0
35133: PPUSH
35134: PPUSH
35135: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
35136: LD_ADDR_VAR 0 2
35140: PUSH
35141: LD_INT 22
35143: PUSH
35144: LD_OWVAR 2
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 21
35155: PUSH
35156: LD_INT 1
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PPUSH
35167: CALL_OW 69
35171: PUSH
35172: FOR_IN
35173: IFFALSE 35214
// begin for j := 1 to 4 do
35175: LD_ADDR_VAR 0 3
35179: PUSH
35180: DOUBLE
35181: LD_INT 1
35183: DEC
35184: ST_TO_ADDR
35185: LD_INT 4
35187: PUSH
35188: FOR_TO
35189: IFFALSE 35210
// SetSkill ( i , j , 10 ) ;
35191: LD_VAR 0 2
35195: PPUSH
35196: LD_VAR 0 3
35200: PPUSH
35201: LD_INT 10
35203: PPUSH
35204: CALL_OW 237
35208: GO 35188
35210: POP
35211: POP
// end ;
35212: GO 35172
35214: POP
35215: POP
// end ;
35216: LD_VAR 0 1
35220: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
35221: LD_INT 0
35223: PPUSH
// uc_side := your_side ;
35224: LD_ADDR_OWVAR 20
35228: PUSH
35229: LD_OWVAR 2
35233: ST_TO_ADDR
// uc_nation := nation ;
35234: LD_ADDR_OWVAR 21
35238: PUSH
35239: LD_VAR 0 1
35243: ST_TO_ADDR
// InitHc ;
35244: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
35248: LD_INT 0
35250: PPUSH
35251: LD_VAR 0 2
35255: PPUSH
35256: LD_VAR 0 3
35260: PPUSH
35261: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
35265: LD_VAR 0 4
35269: PPUSH
35270: LD_VAR 0 5
35274: PPUSH
35275: CALL_OW 428
35279: PUSH
35280: LD_INT 0
35282: EQUAL
35283: IFFALSE 35307
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
35285: CALL_OW 44
35289: PPUSH
35290: LD_VAR 0 4
35294: PPUSH
35295: LD_VAR 0 5
35299: PPUSH
35300: LD_INT 1
35302: PPUSH
35303: CALL_OW 48
// end ;
35307: LD_VAR 0 6
35311: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
35312: LD_INT 0
35314: PPUSH
35315: PPUSH
// uc_side := your_side ;
35316: LD_ADDR_OWVAR 20
35320: PUSH
35321: LD_OWVAR 2
35325: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
35326: LD_VAR 0 1
35330: PUSH
35331: LD_INT 1
35333: PUSH
35334: LD_INT 2
35336: PUSH
35337: LD_INT 3
35339: PUSH
35340: LD_INT 4
35342: PUSH
35343: LD_INT 5
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: IN
35353: IFFALSE 35365
// uc_nation := nation_american else
35355: LD_ADDR_OWVAR 21
35359: PUSH
35360: LD_INT 1
35362: ST_TO_ADDR
35363: GO 35408
// if chassis in [ 11 , 12 , 13 , 14 ] then
35365: LD_VAR 0 1
35369: PUSH
35370: LD_INT 11
35372: PUSH
35373: LD_INT 12
35375: PUSH
35376: LD_INT 13
35378: PUSH
35379: LD_INT 14
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: IN
35388: IFFALSE 35400
// uc_nation := nation_arabian else
35390: LD_ADDR_OWVAR 21
35394: PUSH
35395: LD_INT 2
35397: ST_TO_ADDR
35398: GO 35408
// uc_nation := nation_russian ;
35400: LD_ADDR_OWVAR 21
35404: PUSH
35405: LD_INT 3
35407: ST_TO_ADDR
// vc_chassis := chassis ;
35408: LD_ADDR_OWVAR 37
35412: PUSH
35413: LD_VAR 0 1
35417: ST_TO_ADDR
// vc_engine := engine ;
35418: LD_ADDR_OWVAR 39
35422: PUSH
35423: LD_VAR 0 2
35427: ST_TO_ADDR
// vc_control := control ;
35428: LD_ADDR_OWVAR 38
35432: PUSH
35433: LD_VAR 0 3
35437: ST_TO_ADDR
// vc_weapon := weapon ;
35438: LD_ADDR_OWVAR 40
35442: PUSH
35443: LD_VAR 0 4
35447: ST_TO_ADDR
// un := CreateVehicle ;
35448: LD_ADDR_VAR 0 8
35452: PUSH
35453: CALL_OW 45
35457: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35458: LD_VAR 0 8
35462: PPUSH
35463: LD_INT 0
35465: PPUSH
35466: LD_INT 5
35468: PPUSH
35469: CALL_OW 12
35473: PPUSH
35474: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
35478: LD_VAR 0 8
35482: PPUSH
35483: LD_VAR 0 5
35487: PPUSH
35488: LD_VAR 0 6
35492: PPUSH
35493: LD_INT 1
35495: PPUSH
35496: CALL_OW 48
// end ;
35500: LD_VAR 0 7
35504: RET
// export hInvincible ; every 1 do
35505: GO 35507
35507: DISABLE
// hInvincible := [ ] ;
35508: LD_ADDR_EXP 112
35512: PUSH
35513: EMPTY
35514: ST_TO_ADDR
35515: END
// every 10 do var i ;
35516: GO 35518
35518: DISABLE
35519: LD_INT 0
35521: PPUSH
// begin enable ;
35522: ENABLE
// if not hInvincible then
35523: LD_EXP 112
35527: NOT
35528: IFFALSE 35532
// exit ;
35530: GO 35576
// for i in hInvincible do
35532: LD_ADDR_VAR 0 1
35536: PUSH
35537: LD_EXP 112
35541: PUSH
35542: FOR_IN
35543: IFFALSE 35574
// if GetLives ( i ) < 1000 then
35545: LD_VAR 0 1
35549: PPUSH
35550: CALL_OW 256
35554: PUSH
35555: LD_INT 1000
35557: LESS
35558: IFFALSE 35572
// SetLives ( i , 1000 ) ;
35560: LD_VAR 0 1
35564: PPUSH
35565: LD_INT 1000
35567: PPUSH
35568: CALL_OW 234
35572: GO 35542
35574: POP
35575: POP
// end ;
35576: PPOPN 1
35578: END
// export function hHackInvincible ; var i ; begin
35579: LD_INT 0
35581: PPUSH
35582: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
35583: LD_ADDR_VAR 0 2
35587: PUSH
35588: LD_INT 2
35590: PUSH
35591: LD_INT 21
35593: PUSH
35594: LD_INT 1
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 21
35603: PUSH
35604: LD_INT 2
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: LIST
35615: PPUSH
35616: CALL_OW 69
35620: PUSH
35621: FOR_IN
35622: IFFALSE 35683
// if IsSelected ( i ) then
35624: LD_VAR 0 2
35628: PPUSH
35629: CALL_OW 306
35633: IFFALSE 35681
// begin if i in hInvincible then
35635: LD_VAR 0 2
35639: PUSH
35640: LD_EXP 112
35644: IN
35645: IFFALSE 35665
// hInvincible := hInvincible diff i else
35647: LD_ADDR_EXP 112
35651: PUSH
35652: LD_EXP 112
35656: PUSH
35657: LD_VAR 0 2
35661: DIFF
35662: ST_TO_ADDR
35663: GO 35681
// hInvincible := hInvincible union i ;
35665: LD_ADDR_EXP 112
35669: PUSH
35670: LD_EXP 112
35674: PUSH
35675: LD_VAR 0 2
35679: UNION
35680: ST_TO_ADDR
// end ;
35681: GO 35621
35683: POP
35684: POP
// end ;
35685: LD_VAR 0 1
35689: RET
// export function hHackInvisible ; var i , j ; begin
35690: LD_INT 0
35692: PPUSH
35693: PPUSH
35694: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35695: LD_ADDR_VAR 0 2
35699: PUSH
35700: LD_INT 21
35702: PUSH
35703: LD_INT 1
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PPUSH
35710: CALL_OW 69
35714: PUSH
35715: FOR_IN
35716: IFFALSE 35740
// if IsSelected ( i ) then
35718: LD_VAR 0 2
35722: PPUSH
35723: CALL_OW 306
35727: IFFALSE 35738
// ComForceInvisible ( i ) ;
35729: LD_VAR 0 2
35733: PPUSH
35734: CALL_OW 496
35738: GO 35715
35740: POP
35741: POP
// end ;
35742: LD_VAR 0 1
35746: RET
// export function hHackChangeYourSide ; begin
35747: LD_INT 0
35749: PPUSH
// if your_side = 8 then
35750: LD_OWVAR 2
35754: PUSH
35755: LD_INT 8
35757: EQUAL
35758: IFFALSE 35770
// your_side := 0 else
35760: LD_ADDR_OWVAR 2
35764: PUSH
35765: LD_INT 0
35767: ST_TO_ADDR
35768: GO 35784
// your_side := your_side + 1 ;
35770: LD_ADDR_OWVAR 2
35774: PUSH
35775: LD_OWVAR 2
35779: PUSH
35780: LD_INT 1
35782: PLUS
35783: ST_TO_ADDR
// end ;
35784: LD_VAR 0 1
35788: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35789: LD_INT 0
35791: PPUSH
35792: PPUSH
35793: PPUSH
// for i in all_units do
35794: LD_ADDR_VAR 0 2
35798: PUSH
35799: LD_OWVAR 3
35803: PUSH
35804: FOR_IN
35805: IFFALSE 35883
// if IsSelected ( i ) then
35807: LD_VAR 0 2
35811: PPUSH
35812: CALL_OW 306
35816: IFFALSE 35881
// begin j := GetSide ( i ) ;
35818: LD_ADDR_VAR 0 3
35822: PUSH
35823: LD_VAR 0 2
35827: PPUSH
35828: CALL_OW 255
35832: ST_TO_ADDR
// if j = 8 then
35833: LD_VAR 0 3
35837: PUSH
35838: LD_INT 8
35840: EQUAL
35841: IFFALSE 35853
// j := 0 else
35843: LD_ADDR_VAR 0 3
35847: PUSH
35848: LD_INT 0
35850: ST_TO_ADDR
35851: GO 35867
// j := j + 1 ;
35853: LD_ADDR_VAR 0 3
35857: PUSH
35858: LD_VAR 0 3
35862: PUSH
35863: LD_INT 1
35865: PLUS
35866: ST_TO_ADDR
// SetSide ( i , j ) ;
35867: LD_VAR 0 2
35871: PPUSH
35872: LD_VAR 0 3
35876: PPUSH
35877: CALL_OW 235
// end ;
35881: GO 35804
35883: POP
35884: POP
// end ;
35885: LD_VAR 0 1
35889: RET
// export function hHackFog ; begin
35890: LD_INT 0
35892: PPUSH
// FogOff ( true ) ;
35893: LD_INT 1
35895: PPUSH
35896: CALL_OW 344
// end ;
35900: LD_VAR 0 1
35904: RET
// export function hHackTeleport ( unit , x , y ) ; begin
35905: LD_INT 0
35907: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
35908: LD_VAR 0 1
35912: PPUSH
35913: LD_VAR 0 2
35917: PPUSH
35918: LD_VAR 0 3
35922: PPUSH
35923: LD_INT 1
35925: PPUSH
35926: LD_INT 1
35928: PPUSH
35929: CALL_OW 483
// CenterOnXY ( x , y ) ;
35933: LD_VAR 0 2
35937: PPUSH
35938: LD_VAR 0 3
35942: PPUSH
35943: CALL_OW 84
// end ;
35947: LD_VAR 0 4
35951: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
35952: LD_INT 0
35954: PPUSH
35955: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
35956: LD_VAR 0 1
35960: NOT
35961: IFTRUE 35980
35963: PUSH
35964: LD_VAR 0 2
35968: PPUSH
35969: LD_VAR 0 3
35973: PPUSH
35974: CALL_OW 488
35978: NOT
35979: OR
35980: IFTRUE 36015
35982: PUSH
35983: LD_VAR 0 1
35987: PPUSH
35988: CALL_OW 266
35992: PUSH
35993: LD_INT 3
35995: NONEQUAL
35996: IFFALSE 36014
35998: PUSH
35999: LD_VAR 0 1
36003: PPUSH
36004: CALL_OW 247
36008: PUSH
36009: LD_INT 1
36011: EQUAL
36012: NOT
36013: AND
36014: OR
36015: IFFALSE 36019
// exit ;
36017: GO 36301
// if GetType ( factory ) = unit_human then
36019: LD_VAR 0 1
36023: PPUSH
36024: CALL_OW 247
36028: PUSH
36029: LD_INT 1
36031: EQUAL
36032: IFFALSE 36049
// factory := IsInUnit ( factory ) ;
36034: LD_ADDR_VAR 0 1
36038: PUSH
36039: LD_VAR 0 1
36043: PPUSH
36044: CALL_OW 310
36048: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
36049: LD_VAR 0 1
36053: PPUSH
36054: CALL_OW 266
36058: PUSH
36059: LD_INT 3
36061: NONEQUAL
36062: IFFALSE 36066
// exit ;
36064: GO 36301
// for i := 1 to Count ( factoryWaypoints ) do
36066: LD_ADDR_VAR 0 5
36070: PUSH
36071: DOUBLE
36072: LD_INT 1
36074: DEC
36075: ST_TO_ADDR
36076: LD_EXP 113
36080: PPUSH
36081: CALL 39631 0 1
36085: PUSH
36086: FOR_TO
36087: IFFALSE 36249
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
36089: LD_VAR 0 2
36093: PPUSH
36094: LD_VAR 0 3
36098: PPUSH
36099: CALL_OW 428
36103: PUSH
36104: LD_EXP 113
36108: PUSH
36109: LD_VAR 0 5
36113: ARRAY
36114: PUSH
36115: LD_INT 2
36117: ARRAY
36118: EQUAL
36119: IFFALSE 36151
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
36121: LD_ADDR_EXP 113
36125: PUSH
36126: LD_EXP 113
36130: PPUSH
36131: LD_VAR 0 5
36135: PPUSH
36136: CALL_OW 3
36140: ST_TO_ADDR
// UpdateFactoryWaypoints ;
36141: CALL 36306 0 0
// exit ;
36145: POP
36146: POP
36147: GO 36301
// end else
36149: GO 36247
// if factory = factoryWaypoints [ i ] [ 2 ] then
36151: LD_VAR 0 1
36155: PUSH
36156: LD_EXP 113
36160: PUSH
36161: LD_VAR 0 5
36165: ARRAY
36166: PUSH
36167: LD_INT 2
36169: ARRAY
36170: EQUAL
36171: IFFALSE 36247
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
36173: LD_ADDR_EXP 113
36177: PUSH
36178: LD_EXP 113
36182: PPUSH
36183: LD_VAR 0 5
36187: PPUSH
36188: CALL_OW 3
36192: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
36193: LD_ADDR_EXP 113
36197: PUSH
36198: LD_EXP 113
36202: PPUSH
36203: LD_VAR 0 1
36207: PPUSH
36208: CALL_OW 255
36212: PUSH
36213: LD_VAR 0 1
36217: PUSH
36218: LD_VAR 0 2
36222: PUSH
36223: LD_VAR 0 3
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: PPUSH
36234: CALL 75563 0 2
36238: ST_TO_ADDR
// UpdateFactoryWaypoints ;
36239: CALL 36306 0 0
// exit ;
36243: POP
36244: POP
36245: GO 36301
// end ; end ;
36247: GO 36086
36249: POP
36250: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
36251: LD_ADDR_EXP 113
36255: PUSH
36256: LD_EXP 113
36260: PPUSH
36261: LD_VAR 0 1
36265: PPUSH
36266: CALL_OW 255
36270: PUSH
36271: LD_VAR 0 1
36275: PUSH
36276: LD_VAR 0 2
36280: PUSH
36281: LD_VAR 0 3
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: PPUSH
36292: CALL 75563 0 2
36296: ST_TO_ADDR
// UpdateFactoryWaypoints ;
36297: CALL 36306 0 0
// end ;
36301: LD_VAR 0 4
36305: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
36306: LD_INT 0
36308: PPUSH
36309: PPUSH
36310: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
36311: LD_STRING resetFactoryWaypoint();
36313: PPUSH
36314: CALL_OW 559
// if factoryWaypoints then
36318: LD_EXP 113
36322: IFFALSE 36443
// begin list := factoryWaypoints ;
36324: LD_ADDR_VAR 0 3
36328: PUSH
36329: LD_EXP 113
36333: ST_TO_ADDR
// for i := 1 to list do
36334: LD_ADDR_VAR 0 2
36338: PUSH
36339: DOUBLE
36340: LD_INT 1
36342: DEC
36343: ST_TO_ADDR
36344: LD_VAR 0 3
36348: PUSH
36349: FOR_TO
36350: IFFALSE 36441
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
36352: LD_STRING setFactoryWaypointXY(
36354: PUSH
36355: LD_VAR 0 3
36359: PUSH
36360: LD_VAR 0 2
36364: ARRAY
36365: PUSH
36366: LD_INT 1
36368: ARRAY
36369: STR
36370: PUSH
36371: LD_STRING ,
36373: STR
36374: PUSH
36375: LD_VAR 0 3
36379: PUSH
36380: LD_VAR 0 2
36384: ARRAY
36385: PUSH
36386: LD_INT 2
36388: ARRAY
36389: STR
36390: PUSH
36391: LD_STRING ,
36393: STR
36394: PUSH
36395: LD_VAR 0 3
36399: PUSH
36400: LD_VAR 0 2
36404: ARRAY
36405: PUSH
36406: LD_INT 3
36408: ARRAY
36409: STR
36410: PUSH
36411: LD_STRING ,
36413: STR
36414: PUSH
36415: LD_VAR 0 3
36419: PUSH
36420: LD_VAR 0 2
36424: ARRAY
36425: PUSH
36426: LD_INT 4
36428: ARRAY
36429: STR
36430: PUSH
36431: LD_STRING )
36433: STR
36434: PPUSH
36435: CALL_OW 559
36439: GO 36349
36441: POP
36442: POP
// end ; end ;
36443: LD_VAR 0 1
36447: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
36448: LD_INT 0
36450: PPUSH
// if HexInfo ( x , y ) = warehouse then
36451: LD_VAR 0 2
36455: PPUSH
36456: LD_VAR 0 3
36460: PPUSH
36461: CALL_OW 428
36465: PUSH
36466: LD_VAR 0 1
36470: EQUAL
36471: IFFALSE 36498
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
36473: LD_ADDR_EXP 115
36477: PUSH
36478: LD_EXP 115
36482: PPUSH
36483: LD_VAR 0 1
36487: PPUSH
36488: LD_INT 0
36490: PPUSH
36491: CALL_OW 1
36495: ST_TO_ADDR
36496: GO 36549
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
36498: LD_ADDR_EXP 115
36502: PUSH
36503: LD_EXP 115
36507: PPUSH
36508: LD_VAR 0 1
36512: PPUSH
36513: LD_VAR 0 1
36517: PPUSH
36518: CALL_OW 255
36522: PUSH
36523: LD_VAR 0 1
36527: PUSH
36528: LD_VAR 0 2
36532: PUSH
36533: LD_VAR 0 3
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: PPUSH
36544: CALL_OW 1
36548: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
36549: CALL 36558 0 0
// end ;
36553: LD_VAR 0 4
36557: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
36558: LD_INT 0
36560: PPUSH
36561: PPUSH
36562: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
36563: LD_STRING resetWarehouseGatheringPoints();
36565: PPUSH
36566: CALL_OW 559
// if warehouseGatheringPoints then
36570: LD_EXP 115
36574: IFFALSE 36700
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
36576: LD_ADDR_VAR 0 3
36580: PUSH
36581: LD_EXP 115
36585: PPUSH
36586: CALL 79497 0 1
36590: ST_TO_ADDR
// for i := 1 to list do
36591: LD_ADDR_VAR 0 2
36595: PUSH
36596: DOUBLE
36597: LD_INT 1
36599: DEC
36600: ST_TO_ADDR
36601: LD_VAR 0 3
36605: PUSH
36606: FOR_TO
36607: IFFALSE 36698
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
36609: LD_STRING setWarehouseGatheringPointXY(
36611: PUSH
36612: LD_VAR 0 3
36616: PUSH
36617: LD_VAR 0 2
36621: ARRAY
36622: PUSH
36623: LD_INT 1
36625: ARRAY
36626: STR
36627: PUSH
36628: LD_STRING ,
36630: STR
36631: PUSH
36632: LD_VAR 0 3
36636: PUSH
36637: LD_VAR 0 2
36641: ARRAY
36642: PUSH
36643: LD_INT 2
36645: ARRAY
36646: STR
36647: PUSH
36648: LD_STRING ,
36650: STR
36651: PUSH
36652: LD_VAR 0 3
36656: PUSH
36657: LD_VAR 0 2
36661: ARRAY
36662: PUSH
36663: LD_INT 3
36665: ARRAY
36666: STR
36667: PUSH
36668: LD_STRING ,
36670: STR
36671: PUSH
36672: LD_VAR 0 3
36676: PUSH
36677: LD_VAR 0 2
36681: ARRAY
36682: PUSH
36683: LD_INT 4
36685: ARRAY
36686: STR
36687: PUSH
36688: LD_STRING )
36690: STR
36691: PPUSH
36692: CALL_OW 559
36696: GO 36606
36698: POP
36699: POP
// end ; end ;
36700: LD_VAR 0 1
36704: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
36705: LD_EXP 115
36709: IFFALSE 37404
36711: GO 36713
36713: DISABLE
36714: LD_INT 0
36716: PPUSH
36717: PPUSH
36718: PPUSH
36719: PPUSH
36720: PPUSH
36721: PPUSH
36722: PPUSH
36723: PPUSH
36724: PPUSH
// begin enable ;
36725: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
36726: LD_ADDR_VAR 0 3
36730: PUSH
36731: LD_EXP 115
36735: PPUSH
36736: CALL 79497 0 1
36740: ST_TO_ADDR
// if not list then
36741: LD_VAR 0 3
36745: NOT
36746: IFFALSE 36750
// exit ;
36748: GO 37404
// for i := 1 to list do
36750: LD_ADDR_VAR 0 1
36754: PUSH
36755: DOUBLE
36756: LD_INT 1
36758: DEC
36759: ST_TO_ADDR
36760: LD_VAR 0 3
36764: PUSH
36765: FOR_TO
36766: IFFALSE 37402
// begin depot := list [ i ] [ 2 ] ;
36768: LD_ADDR_VAR 0 8
36772: PUSH
36773: LD_VAR 0 3
36777: PUSH
36778: LD_VAR 0 1
36782: ARRAY
36783: PUSH
36784: LD_INT 2
36786: ARRAY
36787: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
36788: LD_ADDR_VAR 0 5
36792: PUSH
36793: LD_VAR 0 3
36797: PUSH
36798: LD_VAR 0 1
36802: ARRAY
36803: PUSH
36804: LD_INT 1
36806: ARRAY
36807: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
36808: LD_VAR 0 8
36812: PPUSH
36813: CALL_OW 301
36817: IFTRUE 36836
36819: PUSH
36820: LD_VAR 0 5
36824: PUSH
36825: LD_VAR 0 8
36829: PPUSH
36830: CALL_OW 255
36834: NONEQUAL
36835: OR
36836: IFFALSE 36865
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
36838: LD_ADDR_EXP 115
36842: PUSH
36843: LD_EXP 115
36847: PPUSH
36848: LD_VAR 0 8
36852: PPUSH
36853: LD_INT 0
36855: PPUSH
36856: CALL_OW 1
36860: ST_TO_ADDR
// exit ;
36861: POP
36862: POP
36863: GO 37404
// end ; x := list [ i ] [ 3 ] ;
36865: LD_ADDR_VAR 0 6
36869: PUSH
36870: LD_VAR 0 3
36874: PUSH
36875: LD_VAR 0 1
36879: ARRAY
36880: PUSH
36881: LD_INT 3
36883: ARRAY
36884: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
36885: LD_ADDR_VAR 0 7
36889: PUSH
36890: LD_VAR 0 3
36894: PUSH
36895: LD_VAR 0 1
36899: ARRAY
36900: PUSH
36901: LD_INT 4
36903: ARRAY
36904: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
36905: LD_ADDR_VAR 0 9
36909: PUSH
36910: LD_VAR 0 6
36914: PPUSH
36915: LD_VAR 0 7
36919: PPUSH
36920: LD_INT 16
36922: PPUSH
36923: CALL 78071 0 3
36927: ST_TO_ADDR
// if not cratesNearbyPoint then
36928: LD_VAR 0 9
36932: NOT
36933: IFFALSE 36939
// exit ;
36935: POP
36936: POP
36937: GO 37404
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
36939: LD_ADDR_VAR 0 4
36943: PUSH
36944: LD_INT 22
36946: PUSH
36947: LD_VAR 0 5
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 3
36958: PUSH
36959: LD_INT 60
36961: PUSH
36962: EMPTY
36963: LIST
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 91
36971: PUSH
36972: LD_VAR 0 8
36976: PUSH
36977: LD_INT 6
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 2
36987: PUSH
36988: LD_INT 25
36990: PUSH
36991: LD_INT 2
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 25
37000: PUSH
37001: LD_INT 16
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: LIST
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: PPUSH
37019: CALL_OW 69
37023: PUSH
37024: LD_VAR 0 8
37028: PPUSH
37029: CALL_OW 313
37033: PPUSH
37034: LD_INT 3
37036: PUSH
37037: LD_INT 60
37039: PUSH
37040: EMPTY
37041: LIST
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 2
37049: PUSH
37050: LD_INT 25
37052: PUSH
37053: LD_INT 2
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 25
37062: PUSH
37063: LD_INT 16
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: LIST
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PPUSH
37079: CALL_OW 72
37083: UNION
37084: ST_TO_ADDR
// if tmp then
37085: LD_VAR 0 4
37089: IFFALSE 37169
// begin tmp := ShrinkArray ( tmp , 3 ) ;
37091: LD_ADDR_VAR 0 4
37095: PUSH
37096: LD_VAR 0 4
37100: PPUSH
37101: LD_INT 3
37103: PPUSH
37104: CALL 75878 0 2
37108: ST_TO_ADDR
// for j in tmp do
37109: LD_ADDR_VAR 0 2
37113: PUSH
37114: LD_VAR 0 4
37118: PUSH
37119: FOR_IN
37120: IFFALSE 37163
// begin if IsInUnit ( j ) then
37122: LD_VAR 0 2
37126: PPUSH
37127: CALL_OW 310
37131: IFFALSE 37142
// ComExit ( j ) ;
37133: LD_VAR 0 2
37137: PPUSH
37138: CALL 75961 0 1
// AddComCollect ( j , x , y ) ;
37142: LD_VAR 0 2
37146: PPUSH
37147: LD_VAR 0 6
37151: PPUSH
37152: LD_VAR 0 7
37156: PPUSH
37157: CALL_OW 177
// end ;
37161: GO 37119
37163: POP
37164: POP
// exit ;
37165: POP
37166: POP
37167: GO 37404
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
37169: LD_ADDR_VAR 0 4
37173: PUSH
37174: LD_INT 22
37176: PUSH
37177: LD_VAR 0 5
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 91
37188: PUSH
37189: LD_VAR 0 8
37193: PUSH
37194: LD_INT 8
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 2
37204: PUSH
37205: LD_INT 34
37207: PUSH
37208: LD_INT 12
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 34
37217: PUSH
37218: LD_INT 51
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 34
37227: PUSH
37228: LD_INT 32
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 34
37237: PUSH
37238: LD_INT 89
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: LIST
37256: PPUSH
37257: CALL_OW 69
37261: ST_TO_ADDR
// if tmp then
37262: LD_VAR 0 4
37266: IFFALSE 37400
// begin for j in tmp do
37268: LD_ADDR_VAR 0 2
37272: PUSH
37273: LD_VAR 0 4
37277: PUSH
37278: FOR_IN
37279: IFFALSE 37398
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
37281: LD_VAR 0 2
37285: PPUSH
37286: CALL_OW 262
37290: PUSH
37291: LD_INT 3
37293: EQUAL
37294: IFTRUE 37311
37296: PUSH
37297: LD_VAR 0 2
37301: PPUSH
37302: CALL_OW 261
37306: PUSH
37307: LD_INT 20
37309: GREATER
37310: OR
37311: IFFALSE 37325
37313: PUSH
37314: LD_VAR 0 2
37318: PPUSH
37319: CALL_OW 314
37323: NOT
37324: AND
37325: IFFALSE 37355
37327: PUSH
37328: LD_VAR 0 2
37332: PPUSH
37333: CALL_OW 263
37337: PUSH
37338: LD_INT 1
37340: NONEQUAL
37341: IFTRUE 37354
37343: PUSH
37344: LD_VAR 0 2
37348: PPUSH
37349: CALL_OW 311
37353: OR
37354: AND
37355: IFFALSE 37396
// begin ComCollect ( j , x , y ) ;
37357: LD_VAR 0 2
37361: PPUSH
37362: LD_VAR 0 6
37366: PPUSH
37367: LD_VAR 0 7
37371: PPUSH
37372: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
37376: LD_VAR 0 2
37380: PPUSH
37381: LD_VAR 0 8
37385: PPUSH
37386: CALL_OW 172
// exit ;
37390: POP
37391: POP
37392: POP
37393: POP
37394: GO 37404
// end ;
37396: GO 37278
37398: POP
37399: POP
// end ; end ;
37400: GO 36765
37402: POP
37403: POP
// end ; end_of_file end_of_file
37404: PPOPN 9
37406: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37407: LD_INT 0
37409: PPUSH
37410: PPUSH
// if exist_mode then
37411: LD_VAR 0 2
37415: IFFALSE 37461
// begin unit := CreateCharacter ( prefix & ident ) ;
37417: LD_ADDR_VAR 0 5
37421: PUSH
37422: LD_VAR 0 3
37426: PUSH
37427: LD_VAR 0 1
37431: STR
37432: PPUSH
37433: CALL_OW 34
37437: ST_TO_ADDR
// if unit then
37438: LD_VAR 0 5
37442: IFFALSE 37459
// DeleteCharacters ( prefix & ident ) ;
37444: LD_VAR 0 3
37448: PUSH
37449: LD_VAR 0 1
37453: STR
37454: PPUSH
37455: CALL_OW 40
// end else
37459: GO 37476
// unit := NewCharacter ( ident ) ;
37461: LD_ADDR_VAR 0 5
37465: PUSH
37466: LD_VAR 0 1
37470: PPUSH
37471: CALL_OW 25
37475: ST_TO_ADDR
// result := unit ;
37476: LD_ADDR_VAR 0 4
37480: PUSH
37481: LD_VAR 0 5
37485: ST_TO_ADDR
// end ;
37486: LD_VAR 0 4
37490: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
37491: LD_INT 0
37493: PPUSH
37494: PPUSH
// if exist_mode then
37495: LD_VAR 0 2
37499: IFFALSE 37524
// unit := CreateCharacter ( prefix & ident ) else
37501: LD_ADDR_VAR 0 5
37505: PUSH
37506: LD_VAR 0 3
37510: PUSH
37511: LD_VAR 0 1
37515: STR
37516: PPUSH
37517: CALL_OW 34
37521: ST_TO_ADDR
37522: GO 37539
// unit := NewCharacter ( ident ) ;
37524: LD_ADDR_VAR 0 5
37528: PUSH
37529: LD_VAR 0 1
37533: PPUSH
37534: CALL_OW 25
37538: ST_TO_ADDR
// result := unit ;
37539: LD_ADDR_VAR 0 4
37543: PUSH
37544: LD_VAR 0 5
37548: ST_TO_ADDR
// end ;
37549: LD_VAR 0 4
37553: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37554: LD_INT 0
37556: PPUSH
37557: PPUSH
// if not side or not nation then
37558: LD_VAR 0 1
37562: NOT
37563: IFTRUE 37572
37565: PUSH
37566: LD_VAR 0 2
37570: NOT
37571: OR
37572: IFFALSE 37576
// exit ;
37574: GO 38370
// case nation of nation_american :
37576: LD_VAR 0 2
37580: PUSH
37581: LD_INT 1
37583: DOUBLE
37584: EQUAL
37585: IFTRUE 37589
37587: GO 37811
37589: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
37590: LD_ADDR_VAR 0 4
37594: PUSH
37595: LD_INT 35
37597: PUSH
37598: LD_INT 45
37600: PUSH
37601: LD_INT 46
37603: PUSH
37604: LD_INT 47
37606: PUSH
37607: LD_INT 82
37609: PUSH
37610: LD_INT 83
37612: PUSH
37613: LD_INT 84
37615: PUSH
37616: LD_INT 85
37618: PUSH
37619: LD_INT 86
37621: PUSH
37622: LD_INT 1
37624: PUSH
37625: LD_INT 2
37627: PUSH
37628: LD_INT 6
37630: PUSH
37631: LD_INT 15
37633: PUSH
37634: LD_INT 16
37636: PUSH
37637: LD_INT 7
37639: PUSH
37640: LD_INT 12
37642: PUSH
37643: LD_INT 13
37645: PUSH
37646: LD_INT 10
37648: PUSH
37649: LD_INT 14
37651: PUSH
37652: LD_INT 20
37654: PUSH
37655: LD_INT 21
37657: PUSH
37658: LD_INT 22
37660: PUSH
37661: LD_INT 25
37663: PUSH
37664: LD_INT 32
37666: PUSH
37667: LD_INT 27
37669: PUSH
37670: LD_INT 36
37672: PUSH
37673: LD_INT 69
37675: PUSH
37676: LD_INT 39
37678: PUSH
37679: LD_INT 34
37681: PUSH
37682: LD_INT 40
37684: PUSH
37685: LD_INT 48
37687: PUSH
37688: LD_INT 49
37690: PUSH
37691: LD_INT 50
37693: PUSH
37694: LD_INT 51
37696: PUSH
37697: LD_INT 52
37699: PUSH
37700: LD_INT 53
37702: PUSH
37703: LD_INT 54
37705: PUSH
37706: LD_INT 55
37708: PUSH
37709: LD_INT 56
37711: PUSH
37712: LD_INT 57
37714: PUSH
37715: LD_INT 58
37717: PUSH
37718: LD_INT 59
37720: PUSH
37721: LD_INT 60
37723: PUSH
37724: LD_INT 61
37726: PUSH
37727: LD_INT 62
37729: PUSH
37730: LD_INT 80
37732: PUSH
37733: LD_INT 82
37735: PUSH
37736: LD_INT 83
37738: PUSH
37739: LD_INT 84
37741: PUSH
37742: LD_INT 85
37744: PUSH
37745: LD_INT 86
37747: PUSH
37748: LD_INT 90
37750: PUSH
37751: LD_INT 93
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: LIST
37765: LIST
37766: LIST
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: ST_TO_ADDR
37809: GO 38292
37811: LD_INT 2
37813: DOUBLE
37814: EQUAL
37815: IFTRUE 37819
37817: GO 38053
37819: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
37820: LD_ADDR_VAR 0 4
37824: PUSH
37825: LD_INT 35
37827: PUSH
37828: LD_INT 45
37830: PUSH
37831: LD_INT 46
37833: PUSH
37834: LD_INT 47
37836: PUSH
37837: LD_INT 82
37839: PUSH
37840: LD_INT 83
37842: PUSH
37843: LD_INT 84
37845: PUSH
37846: LD_INT 85
37848: PUSH
37849: LD_INT 87
37851: PUSH
37852: LD_INT 70
37854: PUSH
37855: LD_INT 1
37857: PUSH
37858: LD_INT 11
37860: PUSH
37861: LD_INT 3
37863: PUSH
37864: LD_INT 4
37866: PUSH
37867: LD_INT 5
37869: PUSH
37870: LD_INT 6
37872: PUSH
37873: LD_INT 15
37875: PUSH
37876: LD_INT 18
37878: PUSH
37879: LD_INT 7
37881: PUSH
37882: LD_INT 17
37884: PUSH
37885: LD_INT 8
37887: PUSH
37888: LD_INT 20
37890: PUSH
37891: LD_INT 21
37893: PUSH
37894: LD_INT 22
37896: PUSH
37897: LD_INT 72
37899: PUSH
37900: LD_INT 26
37902: PUSH
37903: LD_INT 69
37905: PUSH
37906: LD_INT 39
37908: PUSH
37909: LD_INT 40
37911: PUSH
37912: LD_INT 41
37914: PUSH
37915: LD_INT 42
37917: PUSH
37918: LD_INT 43
37920: PUSH
37921: LD_INT 48
37923: PUSH
37924: LD_INT 49
37926: PUSH
37927: LD_INT 50
37929: PUSH
37930: LD_INT 51
37932: PUSH
37933: LD_INT 52
37935: PUSH
37936: LD_INT 53
37938: PUSH
37939: LD_INT 54
37941: PUSH
37942: LD_INT 55
37944: PUSH
37945: LD_INT 56
37947: PUSH
37948: LD_INT 60
37950: PUSH
37951: LD_INT 61
37953: PUSH
37954: LD_INT 62
37956: PUSH
37957: LD_INT 66
37959: PUSH
37960: LD_INT 67
37962: PUSH
37963: LD_INT 68
37965: PUSH
37966: LD_INT 81
37968: PUSH
37969: LD_INT 82
37971: PUSH
37972: LD_INT 83
37974: PUSH
37975: LD_INT 84
37977: PUSH
37978: LD_INT 85
37980: PUSH
37981: LD_INT 87
37983: PUSH
37984: LD_INT 88
37986: PUSH
37987: LD_INT 92
37989: PUSH
37990: LD_INT 94
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: ST_TO_ADDR
38051: GO 38292
38053: LD_INT 3
38055: DOUBLE
38056: EQUAL
38057: IFTRUE 38061
38059: GO 38291
38061: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
38062: LD_ADDR_VAR 0 4
38066: PUSH
38067: LD_INT 46
38069: PUSH
38070: LD_INT 47
38072: PUSH
38073: LD_INT 1
38075: PUSH
38076: LD_INT 2
38078: PUSH
38079: LD_INT 82
38081: PUSH
38082: LD_INT 83
38084: PUSH
38085: LD_INT 84
38087: PUSH
38088: LD_INT 85
38090: PUSH
38091: LD_INT 86
38093: PUSH
38094: LD_INT 11
38096: PUSH
38097: LD_INT 9
38099: PUSH
38100: LD_INT 20
38102: PUSH
38103: LD_INT 19
38105: PUSH
38106: LD_INT 21
38108: PUSH
38109: LD_INT 24
38111: PUSH
38112: LD_INT 22
38114: PUSH
38115: LD_INT 25
38117: PUSH
38118: LD_INT 28
38120: PUSH
38121: LD_INT 29
38123: PUSH
38124: LD_INT 30
38126: PUSH
38127: LD_INT 31
38129: PUSH
38130: LD_INT 37
38132: PUSH
38133: LD_INT 38
38135: PUSH
38136: LD_INT 32
38138: PUSH
38139: LD_INT 27
38141: PUSH
38142: LD_INT 33
38144: PUSH
38145: LD_INT 69
38147: PUSH
38148: LD_INT 39
38150: PUSH
38151: LD_INT 34
38153: PUSH
38154: LD_INT 40
38156: PUSH
38157: LD_INT 71
38159: PUSH
38160: LD_INT 23
38162: PUSH
38163: LD_INT 44
38165: PUSH
38166: LD_INT 48
38168: PUSH
38169: LD_INT 49
38171: PUSH
38172: LD_INT 50
38174: PUSH
38175: LD_INT 51
38177: PUSH
38178: LD_INT 52
38180: PUSH
38181: LD_INT 53
38183: PUSH
38184: LD_INT 54
38186: PUSH
38187: LD_INT 55
38189: PUSH
38190: LD_INT 56
38192: PUSH
38193: LD_INT 57
38195: PUSH
38196: LD_INT 58
38198: PUSH
38199: LD_INT 59
38201: PUSH
38202: LD_INT 63
38204: PUSH
38205: LD_INT 64
38207: PUSH
38208: LD_INT 65
38210: PUSH
38211: LD_INT 82
38213: PUSH
38214: LD_INT 83
38216: PUSH
38217: LD_INT 84
38219: PUSH
38220: LD_INT 85
38222: PUSH
38223: LD_INT 86
38225: PUSH
38226: LD_INT 89
38228: PUSH
38229: LD_INT 91
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: ST_TO_ADDR
38289: GO 38292
38291: POP
// if state > - 1 and state < 3 then
38292: LD_VAR 0 3
38296: PUSH
38297: LD_INT 1
38299: NEG
38300: GREATER
38301: IFFALSE 38313
38303: PUSH
38304: LD_VAR 0 3
38308: PUSH
38309: LD_INT 3
38311: LESS
38312: AND
38313: IFFALSE 38370
// for i in result do
38315: LD_ADDR_VAR 0 5
38319: PUSH
38320: LD_VAR 0 4
38324: PUSH
38325: FOR_IN
38326: IFFALSE 38368
// if GetTech ( i , side ) <> state then
38328: LD_VAR 0 5
38332: PPUSH
38333: LD_VAR 0 1
38337: PPUSH
38338: CALL_OW 321
38342: PUSH
38343: LD_VAR 0 3
38347: NONEQUAL
38348: IFFALSE 38366
// result := result diff i ;
38350: LD_ADDR_VAR 0 4
38354: PUSH
38355: LD_VAR 0 4
38359: PUSH
38360: LD_VAR 0 5
38364: DIFF
38365: ST_TO_ADDR
38366: GO 38325
38368: POP
38369: POP
// end ;
38370: LD_VAR 0 4
38374: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38375: LD_INT 0
38377: PPUSH
38378: PPUSH
38379: PPUSH
// result := true ;
38380: LD_ADDR_VAR 0 3
38384: PUSH
38385: LD_INT 1
38387: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38388: LD_ADDR_VAR 0 5
38392: PUSH
38393: LD_VAR 0 2
38397: PPUSH
38398: CALL_OW 480
38402: ST_TO_ADDR
// if not tmp then
38403: LD_VAR 0 5
38407: NOT
38408: IFFALSE 38412
// exit ;
38410: GO 38461
// for i in tmp do
38412: LD_ADDR_VAR 0 4
38416: PUSH
38417: LD_VAR 0 5
38421: PUSH
38422: FOR_IN
38423: IFFALSE 38459
// if GetTech ( i , side ) <> state_researched then
38425: LD_VAR 0 4
38429: PPUSH
38430: LD_VAR 0 1
38434: PPUSH
38435: CALL_OW 321
38439: PUSH
38440: LD_INT 2
38442: NONEQUAL
38443: IFFALSE 38457
// begin result := false ;
38445: LD_ADDR_VAR 0 3
38449: PUSH
38450: LD_INT 0
38452: ST_TO_ADDR
// exit ;
38453: POP
38454: POP
38455: GO 38461
// end ;
38457: GO 38422
38459: POP
38460: POP
// end ;
38461: LD_VAR 0 3
38465: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38466: LD_INT 0
38468: PPUSH
38469: PPUSH
38470: PPUSH
38471: PPUSH
38472: PPUSH
38473: PPUSH
38474: PPUSH
38475: PPUSH
38476: PPUSH
38477: PPUSH
38478: PPUSH
38479: PPUSH
38480: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38481: LD_VAR 0 1
38485: NOT
38486: IFTRUE 38503
38488: PUSH
38489: LD_VAR 0 1
38493: PPUSH
38494: CALL_OW 257
38498: PUSH
38499: LD_INT 9
38501: NONEQUAL
38502: OR
38503: IFFALSE 38507
// exit ;
38505: GO 39086
// side := GetSide ( unit ) ;
38507: LD_ADDR_VAR 0 9
38511: PUSH
38512: LD_VAR 0 1
38516: PPUSH
38517: CALL_OW 255
38521: ST_TO_ADDR
// tech_space := tech_spacanom ;
38522: LD_ADDR_VAR 0 12
38526: PUSH
38527: LD_INT 29
38529: ST_TO_ADDR
// tech_time := tech_taurad ;
38530: LD_ADDR_VAR 0 13
38534: PUSH
38535: LD_INT 28
38537: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38538: LD_ADDR_VAR 0 11
38542: PUSH
38543: LD_VAR 0 1
38547: PPUSH
38548: CALL_OW 310
38552: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38553: LD_VAR 0 11
38557: PPUSH
38558: CALL_OW 247
38562: PUSH
38563: LD_INT 2
38565: EQUAL
38566: IFFALSE 38570
// exit ;
38568: GO 39086
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38570: LD_ADDR_VAR 0 8
38574: PUSH
38575: LD_INT 81
38577: PUSH
38578: LD_VAR 0 9
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 3
38589: PUSH
38590: LD_INT 21
38592: PUSH
38593: LD_INT 3
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PPUSH
38608: CALL_OW 69
38612: ST_TO_ADDR
// if not tmp then
38613: LD_VAR 0 8
38617: NOT
38618: IFFALSE 38622
// exit ;
38620: GO 39086
// if in_unit then
38622: LD_VAR 0 11
38626: IFFALSE 38650
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38628: LD_ADDR_VAR 0 10
38632: PUSH
38633: LD_VAR 0 8
38637: PPUSH
38638: LD_VAR 0 11
38642: PPUSH
38643: CALL_OW 74
38647: ST_TO_ADDR
38648: GO 38670
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38650: LD_ADDR_VAR 0 10
38654: PUSH
38655: LD_VAR 0 8
38659: PPUSH
38660: LD_VAR 0 1
38664: PPUSH
38665: CALL_OW 74
38669: ST_TO_ADDR
// if not enemy then
38670: LD_VAR 0 10
38674: NOT
38675: IFFALSE 38679
// exit ;
38677: GO 39086
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38679: LD_VAR 0 11
38683: IFFALSE 38705
38685: PUSH
38686: LD_VAR 0 11
38690: PPUSH
38691: LD_VAR 0 10
38695: PPUSH
38696: CALL_OW 296
38700: PUSH
38701: LD_INT 13
38703: GREATER
38704: AND
38705: IFTRUE 38727
38707: PUSH
38708: LD_VAR 0 1
38712: PPUSH
38713: LD_VAR 0 10
38717: PPUSH
38718: CALL_OW 296
38722: PUSH
38723: LD_INT 12
38725: GREATER
38726: OR
38727: IFFALSE 38731
// exit ;
38729: GO 39086
// missile := [ 1 ] ;
38731: LD_ADDR_VAR 0 14
38735: PUSH
38736: LD_INT 1
38738: PUSH
38739: EMPTY
38740: LIST
38741: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38742: LD_VAR 0 9
38746: PPUSH
38747: LD_VAR 0 12
38751: PPUSH
38752: CALL_OW 325
38756: IFFALSE 38785
// missile := Replace ( missile , missile + 1 , 2 ) ;
38758: LD_ADDR_VAR 0 14
38762: PUSH
38763: LD_VAR 0 14
38767: PPUSH
38768: LD_VAR 0 14
38772: PUSH
38773: LD_INT 1
38775: PLUS
38776: PPUSH
38777: LD_INT 2
38779: PPUSH
38780: CALL_OW 1
38784: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38785: LD_VAR 0 9
38789: PPUSH
38790: LD_VAR 0 13
38794: PPUSH
38795: CALL_OW 325
38799: IFFALSE 38823
38801: PUSH
38802: LD_VAR 0 10
38806: PPUSH
38807: CALL_OW 255
38811: PPUSH
38812: LD_VAR 0 13
38816: PPUSH
38817: CALL_OW 325
38821: NOT
38822: AND
38823: IFFALSE 38852
// missile := Replace ( missile , missile + 1 , 3 ) ;
38825: LD_ADDR_VAR 0 14
38829: PUSH
38830: LD_VAR 0 14
38834: PPUSH
38835: LD_VAR 0 14
38839: PUSH
38840: LD_INT 1
38842: PLUS
38843: PPUSH
38844: LD_INT 3
38846: PPUSH
38847: CALL_OW 1
38851: ST_TO_ADDR
// if missile < 2 then
38852: LD_VAR 0 14
38856: PUSH
38857: LD_INT 2
38859: LESS
38860: IFFALSE 38864
// exit ;
38862: GO 39086
// x := GetX ( enemy ) ;
38864: LD_ADDR_VAR 0 4
38868: PUSH
38869: LD_VAR 0 10
38873: PPUSH
38874: CALL_OW 250
38878: ST_TO_ADDR
// y := GetY ( enemy ) ;
38879: LD_ADDR_VAR 0 5
38883: PUSH
38884: LD_VAR 0 10
38888: PPUSH
38889: CALL_OW 251
38893: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38894: LD_ADDR_VAR 0 6
38898: PUSH
38899: LD_VAR 0 4
38903: PUSH
38904: LD_INT 1
38906: NEG
38907: PPUSH
38908: LD_INT 1
38910: PPUSH
38911: CALL_OW 12
38915: PLUS
38916: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38917: LD_ADDR_VAR 0 7
38921: PUSH
38922: LD_VAR 0 5
38926: PUSH
38927: LD_INT 1
38929: NEG
38930: PPUSH
38931: LD_INT 1
38933: PPUSH
38934: CALL_OW 12
38938: PLUS
38939: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38940: LD_VAR 0 6
38944: PPUSH
38945: LD_VAR 0 7
38949: PPUSH
38950: CALL_OW 488
38954: NOT
38955: IFFALSE 38977
// begin _x := x ;
38957: LD_ADDR_VAR 0 6
38961: PUSH
38962: LD_VAR 0 4
38966: ST_TO_ADDR
// _y := y ;
38967: LD_ADDR_VAR 0 7
38971: PUSH
38972: LD_VAR 0 5
38976: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38977: LD_ADDR_VAR 0 3
38981: PUSH
38982: LD_INT 1
38984: PPUSH
38985: LD_VAR 0 14
38989: PPUSH
38990: CALL_OW 12
38994: ST_TO_ADDR
// case i of 1 :
38995: LD_VAR 0 3
38999: PUSH
39000: LD_INT 1
39002: DOUBLE
39003: EQUAL
39004: IFTRUE 39008
39006: GO 39025
39008: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39009: LD_VAR 0 1
39013: PPUSH
39014: LD_VAR 0 10
39018: PPUSH
39019: CALL_OW 115
39023: GO 39086
39025: LD_INT 2
39027: DOUBLE
39028: EQUAL
39029: IFTRUE 39033
39031: GO 39055
39033: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39034: LD_VAR 0 1
39038: PPUSH
39039: LD_VAR 0 6
39043: PPUSH
39044: LD_VAR 0 7
39048: PPUSH
39049: CALL_OW 153
39053: GO 39086
39055: LD_INT 3
39057: DOUBLE
39058: EQUAL
39059: IFTRUE 39063
39061: GO 39085
39063: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39064: LD_VAR 0 1
39068: PPUSH
39069: LD_VAR 0 6
39073: PPUSH
39074: LD_VAR 0 7
39078: PPUSH
39079: CALL_OW 154
39083: GO 39086
39085: POP
// end ;
39086: LD_VAR 0 2
39090: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39091: LD_INT 0
39093: PPUSH
39094: PPUSH
39095: PPUSH
39096: PPUSH
39097: PPUSH
39098: PPUSH
// if not unit or not building then
39099: LD_VAR 0 1
39103: NOT
39104: IFTRUE 39113
39106: PUSH
39107: LD_VAR 0 2
39111: NOT
39112: OR
39113: IFFALSE 39117
// exit ;
39115: GO 39275
// x := GetX ( building ) ;
39117: LD_ADDR_VAR 0 5
39121: PUSH
39122: LD_VAR 0 2
39126: PPUSH
39127: CALL_OW 250
39131: ST_TO_ADDR
// y := GetY ( building ) ;
39132: LD_ADDR_VAR 0 6
39136: PUSH
39137: LD_VAR 0 2
39141: PPUSH
39142: CALL_OW 251
39146: ST_TO_ADDR
// for i := 0 to 5 do
39147: LD_ADDR_VAR 0 4
39151: PUSH
39152: DOUBLE
39153: LD_INT 0
39155: DEC
39156: ST_TO_ADDR
39157: LD_INT 5
39159: PUSH
39160: FOR_TO
39161: IFFALSE 39273
// begin _x := ShiftX ( x , i , 3 ) ;
39163: LD_ADDR_VAR 0 7
39167: PUSH
39168: LD_VAR 0 5
39172: PPUSH
39173: LD_VAR 0 4
39177: PPUSH
39178: LD_INT 3
39180: PPUSH
39181: CALL_OW 272
39185: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39186: LD_ADDR_VAR 0 8
39190: PUSH
39191: LD_VAR 0 6
39195: PPUSH
39196: LD_VAR 0 4
39200: PPUSH
39201: LD_INT 3
39203: PPUSH
39204: CALL_OW 273
39208: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39209: LD_VAR 0 7
39213: PPUSH
39214: LD_VAR 0 8
39218: PPUSH
39219: CALL_OW 488
39223: NOT
39224: IFFALSE 39228
// continue ;
39226: GO 39160
// if HexInfo ( _x , _y ) = 0 then
39228: LD_VAR 0 7
39232: PPUSH
39233: LD_VAR 0 8
39237: PPUSH
39238: CALL_OW 428
39242: PUSH
39243: LD_INT 0
39245: EQUAL
39246: IFFALSE 39271
// begin ComMoveXY ( unit , _x , _y ) ;
39248: LD_VAR 0 1
39252: PPUSH
39253: LD_VAR 0 7
39257: PPUSH
39258: LD_VAR 0 8
39262: PPUSH
39263: CALL_OW 111
// exit ;
39267: POP
39268: POP
39269: GO 39275
// end ; end ;
39271: GO 39160
39273: POP
39274: POP
// end ;
39275: LD_VAR 0 3
39279: RET
// export function ScanBase ( side , base_area ) ; begin
39280: LD_INT 0
39282: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39283: LD_ADDR_VAR 0 3
39287: PUSH
39288: LD_VAR 0 2
39292: PPUSH
39293: LD_INT 81
39295: PUSH
39296: LD_VAR 0 1
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PPUSH
39305: CALL_OW 70
39309: ST_TO_ADDR
// end ;
39310: LD_VAR 0 3
39314: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39315: LD_INT 0
39317: PPUSH
39318: PPUSH
39319: PPUSH
39320: PPUSH
// result := false ;
39321: LD_ADDR_VAR 0 2
39325: PUSH
39326: LD_INT 0
39328: ST_TO_ADDR
// side := GetSide ( unit ) ;
39329: LD_ADDR_VAR 0 3
39333: PUSH
39334: LD_VAR 0 1
39338: PPUSH
39339: CALL_OW 255
39343: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39344: LD_ADDR_VAR 0 4
39348: PUSH
39349: LD_VAR 0 1
39353: PPUSH
39354: CALL_OW 248
39358: ST_TO_ADDR
// case nat of 1 :
39359: LD_VAR 0 4
39363: PUSH
39364: LD_INT 1
39366: DOUBLE
39367: EQUAL
39368: IFTRUE 39372
39370: GO 39383
39372: POP
// tech := tech_lassight ; 2 :
39373: LD_ADDR_VAR 0 5
39377: PUSH
39378: LD_INT 12
39380: ST_TO_ADDR
39381: GO 39422
39383: LD_INT 2
39385: DOUBLE
39386: EQUAL
39387: IFTRUE 39391
39389: GO 39402
39391: POP
// tech := tech_mortar ; 3 :
39392: LD_ADDR_VAR 0 5
39396: PUSH
39397: LD_INT 41
39399: ST_TO_ADDR
39400: GO 39422
39402: LD_INT 3
39404: DOUBLE
39405: EQUAL
39406: IFTRUE 39410
39408: GO 39421
39410: POP
// tech := tech_bazooka ; end ;
39411: LD_ADDR_VAR 0 5
39415: PUSH
39416: LD_INT 44
39418: ST_TO_ADDR
39419: GO 39422
39421: POP
// if Researched ( side , tech ) then
39422: LD_VAR 0 3
39426: PPUSH
39427: LD_VAR 0 5
39431: PPUSH
39432: CALL_OW 325
39436: IFFALSE 39463
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39438: LD_ADDR_VAR 0 2
39442: PUSH
39443: LD_INT 5
39445: PUSH
39446: LD_INT 8
39448: PUSH
39449: LD_INT 9
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: LIST
39456: PUSH
39457: LD_VAR 0 4
39461: ARRAY
39462: ST_TO_ADDR
// end ;
39463: LD_VAR 0 2
39467: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39468: LD_INT 0
39470: PPUSH
39471: PPUSH
39472: PPUSH
// if not mines then
39473: LD_VAR 0 2
39477: NOT
39478: IFFALSE 39482
// exit ;
39480: GO 39626
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39482: LD_ADDR_VAR 0 5
39486: PUSH
39487: LD_INT 81
39489: PUSH
39490: LD_VAR 0 1
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 3
39501: PUSH
39502: LD_INT 21
39504: PUSH
39505: LD_INT 3
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PPUSH
39520: CALL_OW 69
39524: ST_TO_ADDR
// for i in mines do
39525: LD_ADDR_VAR 0 4
39529: PUSH
39530: LD_VAR 0 2
39534: PUSH
39535: FOR_IN
39536: IFFALSE 39624
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39538: LD_VAR 0 4
39542: PUSH
39543: LD_INT 1
39545: ARRAY
39546: PPUSH
39547: LD_VAR 0 4
39551: PUSH
39552: LD_INT 2
39554: ARRAY
39555: PPUSH
39556: CALL_OW 458
39560: NOT
39561: IFFALSE 39565
// continue ;
39563: GO 39535
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39565: LD_VAR 0 4
39569: PUSH
39570: LD_INT 1
39572: ARRAY
39573: PPUSH
39574: LD_VAR 0 4
39578: PUSH
39579: LD_INT 2
39581: ARRAY
39582: PPUSH
39583: CALL_OW 428
39587: PUSH
39588: LD_VAR 0 5
39592: IN
39593: IFFALSE 39622
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39595: LD_VAR 0 4
39599: PUSH
39600: LD_INT 1
39602: ARRAY
39603: PPUSH
39604: LD_VAR 0 4
39608: PUSH
39609: LD_INT 2
39611: ARRAY
39612: PPUSH
39613: LD_VAR 0 1
39617: PPUSH
39618: CALL_OW 456
// end ;
39622: GO 39535
39624: POP
39625: POP
// end ;
39626: LD_VAR 0 3
39630: RET
// export function Count ( array ) ; begin
39631: LD_INT 0
39633: PPUSH
// result := array + 0 ;
39634: LD_ADDR_VAR 0 2
39638: PUSH
39639: LD_VAR 0 1
39643: PUSH
39644: LD_INT 0
39646: PLUS
39647: ST_TO_ADDR
// end ;
39648: LD_VAR 0 2
39652: RET
// export function IsEmpty ( building ) ; begin
39653: LD_INT 0
39655: PPUSH
// if not building then
39656: LD_VAR 0 1
39660: NOT
39661: IFFALSE 39665
// exit ;
39663: GO 39708
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39665: LD_ADDR_VAR 0 2
39669: PUSH
39670: LD_VAR 0 1
39674: PUSH
39675: LD_INT 22
39677: PUSH
39678: LD_VAR 0 1
39682: PPUSH
39683: CALL_OW 255
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 58
39694: PUSH
39695: EMPTY
39696: LIST
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PPUSH
39702: CALL_OW 69
39706: IN
39707: ST_TO_ADDR
// end ;
39708: LD_VAR 0 2
39712: RET
// export function IsNotFull ( building ) ; var places ; begin
39713: LD_INT 0
39715: PPUSH
39716: PPUSH
// if not building then
39717: LD_VAR 0 1
39721: NOT
39722: IFFALSE 39726
// exit ;
39724: GO 39754
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
39726: LD_ADDR_VAR 0 2
39730: PUSH
39731: LD_VAR 0 1
39735: PPUSH
39736: LD_INT 3
39738: PUSH
39739: LD_INT 62
39741: PUSH
39742: EMPTY
39743: LIST
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PPUSH
39749: CALL_OW 72
39753: ST_TO_ADDR
// end ;
39754: LD_VAR 0 2
39758: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39759: LD_INT 0
39761: PPUSH
39762: PPUSH
39763: PPUSH
39764: PPUSH
// tmp := [ ] ;
39765: LD_ADDR_VAR 0 3
39769: PUSH
39770: EMPTY
39771: ST_TO_ADDR
// list := [ ] ;
39772: LD_ADDR_VAR 0 5
39776: PUSH
39777: EMPTY
39778: ST_TO_ADDR
// for i = 16 to 25 do
39779: LD_ADDR_VAR 0 4
39783: PUSH
39784: DOUBLE
39785: LD_INT 16
39787: DEC
39788: ST_TO_ADDR
39789: LD_INT 25
39791: PUSH
39792: FOR_TO
39793: IFFALSE 39866
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39795: LD_ADDR_VAR 0 3
39799: PUSH
39800: LD_VAR 0 3
39804: PUSH
39805: LD_INT 22
39807: PUSH
39808: LD_VAR 0 1
39812: PPUSH
39813: CALL_OW 255
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 91
39824: PUSH
39825: LD_VAR 0 1
39829: PUSH
39830: LD_INT 6
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 30
39840: PUSH
39841: LD_VAR 0 4
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: LIST
39854: PUSH
39855: EMPTY
39856: LIST
39857: PPUSH
39858: CALL_OW 69
39862: ADD
39863: ST_TO_ADDR
39864: GO 39792
39866: POP
39867: POP
// for i = 1 to tmp do
39868: LD_ADDR_VAR 0 4
39872: PUSH
39873: DOUBLE
39874: LD_INT 1
39876: DEC
39877: ST_TO_ADDR
39878: LD_VAR 0 3
39882: PUSH
39883: FOR_TO
39884: IFFALSE 39972
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39886: LD_ADDR_VAR 0 5
39890: PUSH
39891: LD_VAR 0 5
39895: PUSH
39896: LD_VAR 0 3
39900: PUSH
39901: LD_VAR 0 4
39905: ARRAY
39906: PPUSH
39907: CALL_OW 266
39911: PUSH
39912: LD_VAR 0 3
39916: PUSH
39917: LD_VAR 0 4
39921: ARRAY
39922: PPUSH
39923: CALL_OW 250
39927: PUSH
39928: LD_VAR 0 3
39932: PUSH
39933: LD_VAR 0 4
39937: ARRAY
39938: PPUSH
39939: CALL_OW 251
39943: PUSH
39944: LD_VAR 0 3
39948: PUSH
39949: LD_VAR 0 4
39953: ARRAY
39954: PPUSH
39955: CALL_OW 254
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: PUSH
39966: EMPTY
39967: LIST
39968: ADD
39969: ST_TO_ADDR
39970: GO 39883
39972: POP
39973: POP
// result := list ;
39974: LD_ADDR_VAR 0 2
39978: PUSH
39979: LD_VAR 0 5
39983: ST_TO_ADDR
// end ;
39984: LD_VAR 0 2
39988: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39989: LD_INT 0
39991: PPUSH
39992: PPUSH
39993: PPUSH
39994: PPUSH
39995: PPUSH
39996: PPUSH
39997: PPUSH
// if not factory then
39998: LD_VAR 0 1
40002: NOT
40003: IFFALSE 40007
// exit ;
40005: GO 40610
// if control = control_apeman then
40007: LD_VAR 0 4
40011: PUSH
40012: LD_INT 5
40014: EQUAL
40015: IFFALSE 40124
// begin tmp := UnitsInside ( factory ) ;
40017: LD_ADDR_VAR 0 8
40021: PUSH
40022: LD_VAR 0 1
40026: PPUSH
40027: CALL_OW 313
40031: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40032: LD_VAR 0 8
40036: PPUSH
40037: LD_INT 25
40039: PUSH
40040: LD_INT 12
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PPUSH
40047: CALL_OW 72
40051: NOT
40052: IFFALSE 40062
// control := control_manual ;
40054: LD_ADDR_VAR 0 4
40058: PUSH
40059: LD_INT 1
40061: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40062: LD_ADDR_VAR 0 8
40066: PUSH
40067: LD_VAR 0 1
40071: PPUSH
40072: CALL 39759 0 1
40076: ST_TO_ADDR
// if tmp then
40077: LD_VAR 0 8
40081: IFFALSE 40124
// begin for i in tmp do
40083: LD_ADDR_VAR 0 7
40087: PUSH
40088: LD_VAR 0 8
40092: PUSH
40093: FOR_IN
40094: IFFALSE 40122
// if i [ 1 ] = b_ext_radio then
40096: LD_VAR 0 7
40100: PUSH
40101: LD_INT 1
40103: ARRAY
40104: PUSH
40105: LD_INT 22
40107: EQUAL
40108: IFFALSE 40120
// begin control := control_remote ;
40110: LD_ADDR_VAR 0 4
40114: PUSH
40115: LD_INT 2
40117: ST_TO_ADDR
// break ;
40118: GO 40122
// end ;
40120: GO 40093
40122: POP
40123: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40124: LD_VAR 0 1
40128: PPUSH
40129: LD_VAR 0 2
40133: PPUSH
40134: LD_VAR 0 3
40138: PPUSH
40139: LD_VAR 0 4
40143: PPUSH
40144: LD_VAR 0 5
40148: PPUSH
40149: CALL_OW 448
40153: IFFALSE 40188
// begin result := [ chassis , engine , control , weapon ] ;
40155: LD_ADDR_VAR 0 6
40159: PUSH
40160: LD_VAR 0 2
40164: PUSH
40165: LD_VAR 0 3
40169: PUSH
40170: LD_VAR 0 4
40174: PUSH
40175: LD_VAR 0 5
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: ST_TO_ADDR
// exit ;
40186: GO 40610
// end ; _chassis := AvailableChassisList ( factory ) ;
40188: LD_ADDR_VAR 0 9
40192: PUSH
40193: LD_VAR 0 1
40197: PPUSH
40198: CALL_OW 475
40202: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40203: LD_ADDR_VAR 0 11
40207: PUSH
40208: LD_VAR 0 1
40212: PPUSH
40213: CALL_OW 476
40217: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40218: LD_ADDR_VAR 0 12
40222: PUSH
40223: LD_VAR 0 1
40227: PPUSH
40228: CALL_OW 477
40232: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40233: LD_ADDR_VAR 0 10
40237: PUSH
40238: LD_VAR 0 1
40242: PPUSH
40243: CALL_OW 478
40247: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40248: LD_VAR 0 9
40252: NOT
40253: IFTRUE 40262
40255: PUSH
40256: LD_VAR 0 11
40260: NOT
40261: OR
40262: IFTRUE 40271
40264: PUSH
40265: LD_VAR 0 12
40269: NOT
40270: OR
40271: IFTRUE 40280
40273: PUSH
40274: LD_VAR 0 10
40278: NOT
40279: OR
40280: IFFALSE 40315
// begin result := [ chassis , engine , control , weapon ] ;
40282: LD_ADDR_VAR 0 6
40286: PUSH
40287: LD_VAR 0 2
40291: PUSH
40292: LD_VAR 0 3
40296: PUSH
40297: LD_VAR 0 4
40301: PUSH
40302: LD_VAR 0 5
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: ST_TO_ADDR
// exit ;
40313: GO 40610
// end ; if not chassis in _chassis then
40315: LD_VAR 0 2
40319: PUSH
40320: LD_VAR 0 9
40324: IN
40325: NOT
40326: IFFALSE 40352
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40328: LD_ADDR_VAR 0 2
40332: PUSH
40333: LD_VAR 0 9
40337: PUSH
40338: LD_INT 1
40340: PPUSH
40341: LD_VAR 0 9
40345: PPUSH
40346: CALL_OW 12
40350: ARRAY
40351: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40352: LD_VAR 0 2
40356: PPUSH
40357: LD_VAR 0 3
40361: PPUSH
40362: CALL 40615 0 2
40366: NOT
40367: IFFALSE 40428
// repeat engine := _engine [ 1 ] ;
40369: LD_ADDR_VAR 0 3
40373: PUSH
40374: LD_VAR 0 11
40378: PUSH
40379: LD_INT 1
40381: ARRAY
40382: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40383: LD_ADDR_VAR 0 11
40387: PUSH
40388: LD_VAR 0 11
40392: PPUSH
40393: LD_INT 1
40395: PPUSH
40396: CALL_OW 3
40400: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40401: LD_VAR 0 2
40405: PPUSH
40406: LD_VAR 0 3
40410: PPUSH
40411: CALL 40615 0 2
40415: IFTRUE 40426
40417: PUSH
40418: LD_VAR 0 11
40422: PUSH
40423: EMPTY
40424: EQUAL
40425: OR
40426: IFFALSE 40369
// if not control in _control then
40428: LD_VAR 0 4
40432: PUSH
40433: LD_VAR 0 12
40437: IN
40438: NOT
40439: IFFALSE 40465
// control := _control [ rand ( 1 , _control ) ] ;
40441: LD_ADDR_VAR 0 4
40445: PUSH
40446: LD_VAR 0 12
40450: PUSH
40451: LD_INT 1
40453: PPUSH
40454: LD_VAR 0 12
40458: PPUSH
40459: CALL_OW 12
40463: ARRAY
40464: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40465: LD_VAR 0 2
40469: PPUSH
40470: LD_VAR 0 5
40474: PPUSH
40475: CALL 40837 0 2
40479: NOT
40480: IFFALSE 40541
// repeat weapon := _weapon [ 1 ] ;
40482: LD_ADDR_VAR 0 5
40486: PUSH
40487: LD_VAR 0 10
40491: PUSH
40492: LD_INT 1
40494: ARRAY
40495: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40496: LD_ADDR_VAR 0 10
40500: PUSH
40501: LD_VAR 0 10
40505: PPUSH
40506: LD_INT 1
40508: PPUSH
40509: CALL_OW 3
40513: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40514: LD_VAR 0 2
40518: PPUSH
40519: LD_VAR 0 5
40523: PPUSH
40524: CALL 40837 0 2
40528: IFTRUE 40539
40530: PUSH
40531: LD_VAR 0 10
40535: PUSH
40536: EMPTY
40537: EQUAL
40538: OR
40539: IFFALSE 40482
// result := [ ] ;
40541: LD_ADDR_VAR 0 6
40545: PUSH
40546: EMPTY
40547: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40548: LD_VAR 0 1
40552: PPUSH
40553: LD_VAR 0 2
40557: PPUSH
40558: LD_VAR 0 3
40562: PPUSH
40563: LD_VAR 0 4
40567: PPUSH
40568: LD_VAR 0 5
40572: PPUSH
40573: CALL_OW 448
40577: IFFALSE 40610
// result := [ chassis , engine , control , weapon ] ;
40579: LD_ADDR_VAR 0 6
40583: PUSH
40584: LD_VAR 0 2
40588: PUSH
40589: LD_VAR 0 3
40593: PUSH
40594: LD_VAR 0 4
40598: PUSH
40599: LD_VAR 0 5
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: ST_TO_ADDR
// end ;
40610: LD_VAR 0 6
40614: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40615: LD_INT 0
40617: PPUSH
// if not chassis or not engine then
40618: LD_VAR 0 1
40622: NOT
40623: IFTRUE 40632
40625: PUSH
40626: LD_VAR 0 2
40630: NOT
40631: OR
40632: IFFALSE 40636
// exit ;
40634: GO 40832
// case engine of engine_solar :
40636: LD_VAR 0 2
40640: PUSH
40641: LD_INT 2
40643: DOUBLE
40644: EQUAL
40645: IFTRUE 40649
40647: GO 40687
40649: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40650: LD_ADDR_VAR 0 3
40654: PUSH
40655: LD_INT 11
40657: PUSH
40658: LD_INT 12
40660: PUSH
40661: LD_INT 13
40663: PUSH
40664: LD_INT 14
40666: PUSH
40667: LD_INT 1
40669: PUSH
40670: LD_INT 2
40672: PUSH
40673: LD_INT 3
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: ST_TO_ADDR
40685: GO 40816
40687: LD_INT 1
40689: DOUBLE
40690: EQUAL
40691: IFTRUE 40695
40693: GO 40757
40695: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40696: LD_ADDR_VAR 0 3
40700: PUSH
40701: LD_INT 11
40703: PUSH
40704: LD_INT 12
40706: PUSH
40707: LD_INT 13
40709: PUSH
40710: LD_INT 14
40712: PUSH
40713: LD_INT 1
40715: PUSH
40716: LD_INT 2
40718: PUSH
40719: LD_INT 3
40721: PUSH
40722: LD_INT 4
40724: PUSH
40725: LD_INT 5
40727: PUSH
40728: LD_INT 21
40730: PUSH
40731: LD_INT 23
40733: PUSH
40734: LD_INT 22
40736: PUSH
40737: LD_INT 24
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: ST_TO_ADDR
40755: GO 40816
40757: LD_INT 3
40759: DOUBLE
40760: EQUAL
40761: IFTRUE 40765
40763: GO 40815
40765: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40766: LD_ADDR_VAR 0 3
40770: PUSH
40771: LD_INT 13
40773: PUSH
40774: LD_INT 14
40776: PUSH
40777: LD_INT 2
40779: PUSH
40780: LD_INT 3
40782: PUSH
40783: LD_INT 4
40785: PUSH
40786: LD_INT 5
40788: PUSH
40789: LD_INT 21
40791: PUSH
40792: LD_INT 22
40794: PUSH
40795: LD_INT 23
40797: PUSH
40798: LD_INT 24
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: ST_TO_ADDR
40813: GO 40816
40815: POP
// result := ( chassis in result ) ;
40816: LD_ADDR_VAR 0 3
40820: PUSH
40821: LD_VAR 0 1
40825: PUSH
40826: LD_VAR 0 3
40830: IN
40831: ST_TO_ADDR
// end ;
40832: LD_VAR 0 3
40836: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40837: LD_INT 0
40839: PPUSH
// if not chassis or not weapon then
40840: LD_VAR 0 1
40844: NOT
40845: IFTRUE 40854
40847: PUSH
40848: LD_VAR 0 2
40852: NOT
40853: OR
40854: IFFALSE 40858
// exit ;
40856: GO 41918
// case weapon of us_machine_gun :
40858: LD_VAR 0 2
40862: PUSH
40863: LD_INT 2
40865: DOUBLE
40866: EQUAL
40867: IFTRUE 40871
40869: GO 40901
40871: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40872: LD_ADDR_VAR 0 3
40876: PUSH
40877: LD_INT 1
40879: PUSH
40880: LD_INT 2
40882: PUSH
40883: LD_INT 3
40885: PUSH
40886: LD_INT 4
40888: PUSH
40889: LD_INT 5
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: ST_TO_ADDR
40899: GO 41902
40901: LD_INT 3
40903: DOUBLE
40904: EQUAL
40905: IFTRUE 40909
40907: GO 40939
40909: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40910: LD_ADDR_VAR 0 3
40914: PUSH
40915: LD_INT 1
40917: PUSH
40918: LD_INT 2
40920: PUSH
40921: LD_INT 3
40923: PUSH
40924: LD_INT 4
40926: PUSH
40927: LD_INT 5
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: ST_TO_ADDR
40937: GO 41902
40939: LD_INT 11
40941: DOUBLE
40942: EQUAL
40943: IFTRUE 40947
40945: GO 40977
40947: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40948: LD_ADDR_VAR 0 3
40952: PUSH
40953: LD_INT 1
40955: PUSH
40956: LD_INT 2
40958: PUSH
40959: LD_INT 3
40961: PUSH
40962: LD_INT 4
40964: PUSH
40965: LD_INT 5
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: ST_TO_ADDR
40975: GO 41902
40977: LD_INT 4
40979: DOUBLE
40980: EQUAL
40981: IFTRUE 40985
40983: GO 41011
40985: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40986: LD_ADDR_VAR 0 3
40990: PUSH
40991: LD_INT 2
40993: PUSH
40994: LD_INT 3
40996: PUSH
40997: LD_INT 4
40999: PUSH
41000: LD_INT 5
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: ST_TO_ADDR
41009: GO 41902
41011: LD_INT 5
41013: DOUBLE
41014: EQUAL
41015: IFTRUE 41019
41017: GO 41045
41019: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41020: LD_ADDR_VAR 0 3
41024: PUSH
41025: LD_INT 2
41027: PUSH
41028: LD_INT 3
41030: PUSH
41031: LD_INT 4
41033: PUSH
41034: LD_INT 5
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: ST_TO_ADDR
41043: GO 41902
41045: LD_INT 9
41047: DOUBLE
41048: EQUAL
41049: IFTRUE 41053
41051: GO 41079
41053: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41054: LD_ADDR_VAR 0 3
41058: PUSH
41059: LD_INT 2
41061: PUSH
41062: LD_INT 3
41064: PUSH
41065: LD_INT 4
41067: PUSH
41068: LD_INT 5
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: ST_TO_ADDR
41077: GO 41902
41079: LD_INT 7
41081: DOUBLE
41082: EQUAL
41083: IFTRUE 41087
41085: GO 41113
41087: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41088: LD_ADDR_VAR 0 3
41092: PUSH
41093: LD_INT 2
41095: PUSH
41096: LD_INT 3
41098: PUSH
41099: LD_INT 4
41101: PUSH
41102: LD_INT 5
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: ST_TO_ADDR
41111: GO 41902
41113: LD_INT 12
41115: DOUBLE
41116: EQUAL
41117: IFTRUE 41121
41119: GO 41147
41121: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41122: LD_ADDR_VAR 0 3
41126: PUSH
41127: LD_INT 2
41129: PUSH
41130: LD_INT 3
41132: PUSH
41133: LD_INT 4
41135: PUSH
41136: LD_INT 5
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: ST_TO_ADDR
41145: GO 41902
41147: LD_INT 13
41149: DOUBLE
41150: EQUAL
41151: IFTRUE 41155
41153: GO 41181
41155: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41156: LD_ADDR_VAR 0 3
41160: PUSH
41161: LD_INT 2
41163: PUSH
41164: LD_INT 3
41166: PUSH
41167: LD_INT 4
41169: PUSH
41170: LD_INT 5
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: ST_TO_ADDR
41179: GO 41902
41181: LD_INT 14
41183: DOUBLE
41184: EQUAL
41185: IFTRUE 41189
41187: GO 41207
41189: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41190: LD_ADDR_VAR 0 3
41194: PUSH
41195: LD_INT 4
41197: PUSH
41198: LD_INT 5
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: ST_TO_ADDR
41205: GO 41902
41207: LD_INT 6
41209: DOUBLE
41210: EQUAL
41211: IFTRUE 41215
41213: GO 41233
41215: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41216: LD_ADDR_VAR 0 3
41220: PUSH
41221: LD_INT 4
41223: PUSH
41224: LD_INT 5
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: ST_TO_ADDR
41231: GO 41902
41233: LD_INT 10
41235: DOUBLE
41236: EQUAL
41237: IFTRUE 41241
41239: GO 41259
41241: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41242: LD_ADDR_VAR 0 3
41246: PUSH
41247: LD_INT 4
41249: PUSH
41250: LD_INT 5
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: ST_TO_ADDR
41257: GO 41902
41259: LD_INT 22
41261: DOUBLE
41262: EQUAL
41263: IFTRUE 41267
41265: GO 41293
41267: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41268: LD_ADDR_VAR 0 3
41272: PUSH
41273: LD_INT 11
41275: PUSH
41276: LD_INT 12
41278: PUSH
41279: LD_INT 13
41281: PUSH
41282: LD_INT 14
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: ST_TO_ADDR
41291: GO 41902
41293: LD_INT 23
41295: DOUBLE
41296: EQUAL
41297: IFTRUE 41301
41299: GO 41327
41301: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41302: LD_ADDR_VAR 0 3
41306: PUSH
41307: LD_INT 11
41309: PUSH
41310: LD_INT 12
41312: PUSH
41313: LD_INT 13
41315: PUSH
41316: LD_INT 14
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: ST_TO_ADDR
41325: GO 41902
41327: LD_INT 24
41329: DOUBLE
41330: EQUAL
41331: IFTRUE 41335
41333: GO 41361
41335: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41336: LD_ADDR_VAR 0 3
41340: PUSH
41341: LD_INT 11
41343: PUSH
41344: LD_INT 12
41346: PUSH
41347: LD_INT 13
41349: PUSH
41350: LD_INT 14
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: ST_TO_ADDR
41359: GO 41902
41361: LD_INT 30
41363: DOUBLE
41364: EQUAL
41365: IFTRUE 41369
41367: GO 41395
41369: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41370: LD_ADDR_VAR 0 3
41374: PUSH
41375: LD_INT 11
41377: PUSH
41378: LD_INT 12
41380: PUSH
41381: LD_INT 13
41383: PUSH
41384: LD_INT 14
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: ST_TO_ADDR
41393: GO 41902
41395: LD_INT 25
41397: DOUBLE
41398: EQUAL
41399: IFTRUE 41403
41401: GO 41421
41403: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41404: LD_ADDR_VAR 0 3
41408: PUSH
41409: LD_INT 13
41411: PUSH
41412: LD_INT 14
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: ST_TO_ADDR
41419: GO 41902
41421: LD_INT 27
41423: DOUBLE
41424: EQUAL
41425: IFTRUE 41429
41427: GO 41447
41429: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41430: LD_ADDR_VAR 0 3
41434: PUSH
41435: LD_INT 13
41437: PUSH
41438: LD_INT 14
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: ST_TO_ADDR
41445: GO 41902
41447: LD_INT 92
41449: DOUBLE
41450: EQUAL
41451: IFTRUE 41455
41453: GO 41481
41455: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41456: LD_ADDR_VAR 0 3
41460: PUSH
41461: LD_INT 11
41463: PUSH
41464: LD_INT 12
41466: PUSH
41467: LD_INT 13
41469: PUSH
41470: LD_INT 14
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: ST_TO_ADDR
41479: GO 41902
41481: LD_INT 28
41483: DOUBLE
41484: EQUAL
41485: IFTRUE 41489
41487: GO 41507
41489: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41490: LD_ADDR_VAR 0 3
41494: PUSH
41495: LD_INT 13
41497: PUSH
41498: LD_INT 14
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: ST_TO_ADDR
41505: GO 41902
41507: LD_INT 29
41509: DOUBLE
41510: EQUAL
41511: IFTRUE 41515
41513: GO 41533
41515: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41516: LD_ADDR_VAR 0 3
41520: PUSH
41521: LD_INT 13
41523: PUSH
41524: LD_INT 14
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: ST_TO_ADDR
41531: GO 41902
41533: LD_INT 31
41535: DOUBLE
41536: EQUAL
41537: IFTRUE 41541
41539: GO 41559
41541: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41542: LD_ADDR_VAR 0 3
41546: PUSH
41547: LD_INT 13
41549: PUSH
41550: LD_INT 14
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: ST_TO_ADDR
41557: GO 41902
41559: LD_INT 26
41561: DOUBLE
41562: EQUAL
41563: IFTRUE 41567
41565: GO 41585
41567: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41568: LD_ADDR_VAR 0 3
41572: PUSH
41573: LD_INT 13
41575: PUSH
41576: LD_INT 14
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: ST_TO_ADDR
41583: GO 41902
41585: LD_INT 42
41587: DOUBLE
41588: EQUAL
41589: IFTRUE 41593
41591: GO 41619
41593: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41594: LD_ADDR_VAR 0 3
41598: PUSH
41599: LD_INT 21
41601: PUSH
41602: LD_INT 22
41604: PUSH
41605: LD_INT 23
41607: PUSH
41608: LD_INT 24
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: ST_TO_ADDR
41617: GO 41902
41619: LD_INT 43
41621: DOUBLE
41622: EQUAL
41623: IFTRUE 41627
41625: GO 41653
41627: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41628: LD_ADDR_VAR 0 3
41632: PUSH
41633: LD_INT 21
41635: PUSH
41636: LD_INT 22
41638: PUSH
41639: LD_INT 23
41641: PUSH
41642: LD_INT 24
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: ST_TO_ADDR
41651: GO 41902
41653: LD_INT 44
41655: DOUBLE
41656: EQUAL
41657: IFTRUE 41661
41659: GO 41687
41661: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41662: LD_ADDR_VAR 0 3
41666: PUSH
41667: LD_INT 21
41669: PUSH
41670: LD_INT 22
41672: PUSH
41673: LD_INT 23
41675: PUSH
41676: LD_INT 24
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: ST_TO_ADDR
41685: GO 41902
41687: LD_INT 45
41689: DOUBLE
41690: EQUAL
41691: IFTRUE 41695
41693: GO 41721
41695: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41696: LD_ADDR_VAR 0 3
41700: PUSH
41701: LD_INT 21
41703: PUSH
41704: LD_INT 22
41706: PUSH
41707: LD_INT 23
41709: PUSH
41710: LD_INT 24
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: ST_TO_ADDR
41719: GO 41902
41721: LD_INT 49
41723: DOUBLE
41724: EQUAL
41725: IFTRUE 41729
41727: GO 41755
41729: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41730: LD_ADDR_VAR 0 3
41734: PUSH
41735: LD_INT 21
41737: PUSH
41738: LD_INT 22
41740: PUSH
41741: LD_INT 23
41743: PUSH
41744: LD_INT 24
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: ST_TO_ADDR
41753: GO 41902
41755: LD_INT 51
41757: DOUBLE
41758: EQUAL
41759: IFTRUE 41763
41761: GO 41789
41763: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41764: LD_ADDR_VAR 0 3
41768: PUSH
41769: LD_INT 21
41771: PUSH
41772: LD_INT 22
41774: PUSH
41775: LD_INT 23
41777: PUSH
41778: LD_INT 24
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: ST_TO_ADDR
41787: GO 41902
41789: LD_INT 52
41791: DOUBLE
41792: EQUAL
41793: IFTRUE 41797
41795: GO 41823
41797: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41798: LD_ADDR_VAR 0 3
41802: PUSH
41803: LD_INT 21
41805: PUSH
41806: LD_INT 22
41808: PUSH
41809: LD_INT 23
41811: PUSH
41812: LD_INT 24
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: ST_TO_ADDR
41821: GO 41902
41823: LD_INT 53
41825: DOUBLE
41826: EQUAL
41827: IFTRUE 41831
41829: GO 41849
41831: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41832: LD_ADDR_VAR 0 3
41836: PUSH
41837: LD_INT 23
41839: PUSH
41840: LD_INT 24
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: ST_TO_ADDR
41847: GO 41902
41849: LD_INT 46
41851: DOUBLE
41852: EQUAL
41853: IFTRUE 41857
41855: GO 41875
41857: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41858: LD_ADDR_VAR 0 3
41862: PUSH
41863: LD_INT 23
41865: PUSH
41866: LD_INT 24
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: ST_TO_ADDR
41873: GO 41902
41875: LD_INT 47
41877: DOUBLE
41878: EQUAL
41879: IFTRUE 41883
41881: GO 41901
41883: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41884: LD_ADDR_VAR 0 3
41888: PUSH
41889: LD_INT 23
41891: PUSH
41892: LD_INT 24
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: ST_TO_ADDR
41899: GO 41902
41901: POP
// result := ( chassis in result ) ;
41902: LD_ADDR_VAR 0 3
41906: PUSH
41907: LD_VAR 0 1
41911: PUSH
41912: LD_VAR 0 3
41916: IN
41917: ST_TO_ADDR
// end ;
41918: LD_VAR 0 3
41922: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41923: LD_INT 0
41925: PPUSH
41926: PPUSH
41927: PPUSH
41928: PPUSH
41929: PPUSH
41930: PPUSH
41931: PPUSH
// result := array ;
41932: LD_ADDR_VAR 0 5
41936: PUSH
41937: LD_VAR 0 1
41941: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41942: LD_VAR 0 1
41946: NOT
41947: IFTRUE 41956
41949: PUSH
41950: LD_VAR 0 2
41954: NOT
41955: OR
41956: IFTRUE 41965
41958: PUSH
41959: LD_VAR 0 3
41963: NOT
41964: OR
41965: IFTRUE 41979
41967: PUSH
41968: LD_VAR 0 2
41972: PUSH
41973: LD_VAR 0 1
41977: GREATER
41978: OR
41979: IFTRUE 41993
41981: PUSH
41982: LD_VAR 0 3
41986: PUSH
41987: LD_VAR 0 1
41991: GREATER
41992: OR
41993: IFFALSE 41997
// exit ;
41995: GO 42293
// if direction then
41997: LD_VAR 0 4
42001: IFFALSE 42065
// begin d := 1 ;
42003: LD_ADDR_VAR 0 9
42007: PUSH
42008: LD_INT 1
42010: ST_TO_ADDR
// if i_from > i_to then
42011: LD_VAR 0 2
42015: PUSH
42016: LD_VAR 0 3
42020: GREATER
42021: IFFALSE 42047
// length := ( array - i_from ) + i_to else
42023: LD_ADDR_VAR 0 11
42027: PUSH
42028: LD_VAR 0 1
42032: PUSH
42033: LD_VAR 0 2
42037: MINUS
42038: PUSH
42039: LD_VAR 0 3
42043: PLUS
42044: ST_TO_ADDR
42045: GO 42063
// length := i_to - i_from ;
42047: LD_ADDR_VAR 0 11
42051: PUSH
42052: LD_VAR 0 3
42056: PUSH
42057: LD_VAR 0 2
42061: MINUS
42062: ST_TO_ADDR
// end else
42063: GO 42126
// begin d := - 1 ;
42065: LD_ADDR_VAR 0 9
42069: PUSH
42070: LD_INT 1
42072: NEG
42073: ST_TO_ADDR
// if i_from > i_to then
42074: LD_VAR 0 2
42078: PUSH
42079: LD_VAR 0 3
42083: GREATER
42084: IFFALSE 42104
// length := i_from - i_to else
42086: LD_ADDR_VAR 0 11
42090: PUSH
42091: LD_VAR 0 2
42095: PUSH
42096: LD_VAR 0 3
42100: MINUS
42101: ST_TO_ADDR
42102: GO 42126
// length := ( array - i_to ) + i_from ;
42104: LD_ADDR_VAR 0 11
42108: PUSH
42109: LD_VAR 0 1
42113: PUSH
42114: LD_VAR 0 3
42118: MINUS
42119: PUSH
42120: LD_VAR 0 2
42124: PLUS
42125: ST_TO_ADDR
// end ; if not length then
42126: LD_VAR 0 11
42130: NOT
42131: IFFALSE 42135
// exit ;
42133: GO 42293
// tmp := array ;
42135: LD_ADDR_VAR 0 10
42139: PUSH
42140: LD_VAR 0 1
42144: ST_TO_ADDR
// for i = 1 to length do
42145: LD_ADDR_VAR 0 6
42149: PUSH
42150: DOUBLE
42151: LD_INT 1
42153: DEC
42154: ST_TO_ADDR
42155: LD_VAR 0 11
42159: PUSH
42160: FOR_TO
42161: IFFALSE 42281
// begin for j = 1 to array do
42163: LD_ADDR_VAR 0 7
42167: PUSH
42168: DOUBLE
42169: LD_INT 1
42171: DEC
42172: ST_TO_ADDR
42173: LD_VAR 0 1
42177: PUSH
42178: FOR_TO
42179: IFFALSE 42267
// begin k := j + d ;
42181: LD_ADDR_VAR 0 8
42185: PUSH
42186: LD_VAR 0 7
42190: PUSH
42191: LD_VAR 0 9
42195: PLUS
42196: ST_TO_ADDR
// if k > array then
42197: LD_VAR 0 8
42201: PUSH
42202: LD_VAR 0 1
42206: GREATER
42207: IFFALSE 42217
// k := 1 ;
42209: LD_ADDR_VAR 0 8
42213: PUSH
42214: LD_INT 1
42216: ST_TO_ADDR
// if not k then
42217: LD_VAR 0 8
42221: NOT
42222: IFFALSE 42234
// k := array ;
42224: LD_ADDR_VAR 0 8
42228: PUSH
42229: LD_VAR 0 1
42233: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42234: LD_ADDR_VAR 0 10
42238: PUSH
42239: LD_VAR 0 10
42243: PPUSH
42244: LD_VAR 0 8
42248: PPUSH
42249: LD_VAR 0 1
42253: PUSH
42254: LD_VAR 0 7
42258: ARRAY
42259: PPUSH
42260: CALL_OW 1
42264: ST_TO_ADDR
// end ;
42265: GO 42178
42267: POP
42268: POP
// array := tmp ;
42269: LD_ADDR_VAR 0 1
42273: PUSH
42274: LD_VAR 0 10
42278: ST_TO_ADDR
// end ;
42279: GO 42160
42281: POP
42282: POP
// result := array ;
42283: LD_ADDR_VAR 0 5
42287: PUSH
42288: LD_VAR 0 1
42292: ST_TO_ADDR
// end ;
42293: LD_VAR 0 5
42297: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42298: LD_INT 0
42300: PPUSH
42301: PPUSH
// result := 0 ;
42302: LD_ADDR_VAR 0 3
42306: PUSH
42307: LD_INT 0
42309: ST_TO_ADDR
// if not array or not value in array then
42310: LD_VAR 0 1
42314: NOT
42315: IFTRUE 42330
42317: PUSH
42318: LD_VAR 0 2
42322: PUSH
42323: LD_VAR 0 1
42327: IN
42328: NOT
42329: OR
42330: IFFALSE 42334
// exit ;
42332: GO 42388
// for i = 1 to array do
42334: LD_ADDR_VAR 0 4
42338: PUSH
42339: DOUBLE
42340: LD_INT 1
42342: DEC
42343: ST_TO_ADDR
42344: LD_VAR 0 1
42348: PUSH
42349: FOR_TO
42350: IFFALSE 42386
// if value = array [ i ] then
42352: LD_VAR 0 2
42356: PUSH
42357: LD_VAR 0 1
42361: PUSH
42362: LD_VAR 0 4
42366: ARRAY
42367: EQUAL
42368: IFFALSE 42384
// begin result := i ;
42370: LD_ADDR_VAR 0 3
42374: PUSH
42375: LD_VAR 0 4
42379: ST_TO_ADDR
// exit ;
42380: POP
42381: POP
42382: GO 42388
// end ;
42384: GO 42349
42386: POP
42387: POP
// end ;
42388: LD_VAR 0 3
42392: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42393: LD_INT 0
42395: PPUSH
// vc_chassis := chassis ;
42396: LD_ADDR_OWVAR 37
42400: PUSH
42401: LD_VAR 0 1
42405: ST_TO_ADDR
// vc_engine := engine ;
42406: LD_ADDR_OWVAR 39
42410: PUSH
42411: LD_VAR 0 2
42415: ST_TO_ADDR
// vc_control := control ;
42416: LD_ADDR_OWVAR 38
42420: PUSH
42421: LD_VAR 0 3
42425: ST_TO_ADDR
// vc_weapon := weapon ;
42426: LD_ADDR_OWVAR 40
42430: PUSH
42431: LD_VAR 0 4
42435: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42436: LD_ADDR_OWVAR 41
42440: PUSH
42441: LD_VAR 0 5
42445: ST_TO_ADDR
// end ;
42446: LD_VAR 0 6
42450: RET
// export function WantPlant ( unit ) ; var task ; begin
42451: LD_INT 0
42453: PPUSH
42454: PPUSH
// result := false ;
42455: LD_ADDR_VAR 0 2
42459: PUSH
42460: LD_INT 0
42462: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42463: LD_ADDR_VAR 0 3
42467: PUSH
42468: LD_VAR 0 1
42472: PPUSH
42473: CALL_OW 437
42477: ST_TO_ADDR
// if task then
42478: LD_VAR 0 3
42482: IFFALSE 42510
// if task [ 1 ] [ 1 ] = p then
42484: LD_VAR 0 3
42488: PUSH
42489: LD_INT 1
42491: ARRAY
42492: PUSH
42493: LD_INT 1
42495: ARRAY
42496: PUSH
42497: LD_STRING p
42499: EQUAL
42500: IFFALSE 42510
// result := true ;
42502: LD_ADDR_VAR 0 2
42506: PUSH
42507: LD_INT 1
42509: ST_TO_ADDR
// end ;
42510: LD_VAR 0 2
42514: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42515: LD_INT 0
42517: PPUSH
42518: PPUSH
42519: PPUSH
42520: PPUSH
// if pos < 1 then
42521: LD_VAR 0 2
42525: PUSH
42526: LD_INT 1
42528: LESS
42529: IFFALSE 42533
// exit ;
42531: GO 42836
// if pos = 1 then
42533: LD_VAR 0 2
42537: PUSH
42538: LD_INT 1
42540: EQUAL
42541: IFFALSE 42574
// result := Replace ( arr , pos [ 1 ] , value ) else
42543: LD_ADDR_VAR 0 4
42547: PUSH
42548: LD_VAR 0 1
42552: PPUSH
42553: LD_VAR 0 2
42557: PUSH
42558: LD_INT 1
42560: ARRAY
42561: PPUSH
42562: LD_VAR 0 3
42566: PPUSH
42567: CALL_OW 1
42571: ST_TO_ADDR
42572: GO 42836
// begin tmp := arr ;
42574: LD_ADDR_VAR 0 6
42578: PUSH
42579: LD_VAR 0 1
42583: ST_TO_ADDR
// s_arr := [ tmp ] ;
42584: LD_ADDR_VAR 0 7
42588: PUSH
42589: LD_VAR 0 6
42593: PUSH
42594: EMPTY
42595: LIST
42596: ST_TO_ADDR
// for i = 1 to pos - 1 do
42597: LD_ADDR_VAR 0 5
42601: PUSH
42602: DOUBLE
42603: LD_INT 1
42605: DEC
42606: ST_TO_ADDR
42607: LD_VAR 0 2
42611: PUSH
42612: LD_INT 1
42614: MINUS
42615: PUSH
42616: FOR_TO
42617: IFFALSE 42662
// begin tmp := tmp [ pos [ i ] ] ;
42619: LD_ADDR_VAR 0 6
42623: PUSH
42624: LD_VAR 0 6
42628: PUSH
42629: LD_VAR 0 2
42633: PUSH
42634: LD_VAR 0 5
42638: ARRAY
42639: ARRAY
42640: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42641: LD_ADDR_VAR 0 7
42645: PUSH
42646: LD_VAR 0 7
42650: PUSH
42651: LD_VAR 0 6
42655: PUSH
42656: EMPTY
42657: LIST
42658: ADD
42659: ST_TO_ADDR
// end ;
42660: GO 42616
42662: POP
42663: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42664: LD_ADDR_VAR 0 6
42668: PUSH
42669: LD_VAR 0 6
42673: PPUSH
42674: LD_VAR 0 2
42678: PUSH
42679: LD_VAR 0 2
42683: ARRAY
42684: PPUSH
42685: LD_VAR 0 3
42689: PPUSH
42690: CALL_OW 1
42694: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42695: LD_ADDR_VAR 0 7
42699: PUSH
42700: LD_VAR 0 7
42704: PPUSH
42705: LD_VAR 0 7
42709: PPUSH
42710: LD_VAR 0 6
42714: PPUSH
42715: CALL_OW 1
42719: ST_TO_ADDR
// for i = s_arr downto 2 do
42720: LD_ADDR_VAR 0 5
42724: PUSH
42725: DOUBLE
42726: LD_VAR 0 7
42730: INC
42731: ST_TO_ADDR
42732: LD_INT 2
42734: PUSH
42735: FOR_DOWNTO
42736: IFFALSE 42820
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42738: LD_ADDR_VAR 0 6
42742: PUSH
42743: LD_VAR 0 7
42747: PUSH
42748: LD_VAR 0 5
42752: PUSH
42753: LD_INT 1
42755: MINUS
42756: ARRAY
42757: PPUSH
42758: LD_VAR 0 2
42762: PUSH
42763: LD_VAR 0 5
42767: PUSH
42768: LD_INT 1
42770: MINUS
42771: ARRAY
42772: PPUSH
42773: LD_VAR 0 7
42777: PUSH
42778: LD_VAR 0 5
42782: ARRAY
42783: PPUSH
42784: CALL_OW 1
42788: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42789: LD_ADDR_VAR 0 7
42793: PUSH
42794: LD_VAR 0 7
42798: PPUSH
42799: LD_VAR 0 5
42803: PUSH
42804: LD_INT 1
42806: MINUS
42807: PPUSH
42808: LD_VAR 0 6
42812: PPUSH
42813: CALL_OW 1
42817: ST_TO_ADDR
// end ;
42818: GO 42735
42820: POP
42821: POP
// result := s_arr [ 1 ] ;
42822: LD_ADDR_VAR 0 4
42826: PUSH
42827: LD_VAR 0 7
42831: PUSH
42832: LD_INT 1
42834: ARRAY
42835: ST_TO_ADDR
// end ; end ;
42836: LD_VAR 0 4
42840: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42841: LD_INT 0
42843: PPUSH
42844: PPUSH
// if not list then
42845: LD_VAR 0 1
42849: NOT
42850: IFFALSE 42854
// exit ;
42852: GO 42945
// i := list [ pos1 ] ;
42854: LD_ADDR_VAR 0 5
42858: PUSH
42859: LD_VAR 0 1
42863: PUSH
42864: LD_VAR 0 2
42868: ARRAY
42869: ST_TO_ADDR
// if not i then
42870: LD_VAR 0 5
42874: NOT
42875: IFFALSE 42879
// exit ;
42877: GO 42945
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42879: LD_ADDR_VAR 0 1
42883: PUSH
42884: LD_VAR 0 1
42888: PPUSH
42889: LD_VAR 0 2
42893: PPUSH
42894: LD_VAR 0 1
42898: PUSH
42899: LD_VAR 0 3
42903: ARRAY
42904: PPUSH
42905: CALL_OW 1
42909: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42910: LD_ADDR_VAR 0 1
42914: PUSH
42915: LD_VAR 0 1
42919: PPUSH
42920: LD_VAR 0 3
42924: PPUSH
42925: LD_VAR 0 5
42929: PPUSH
42930: CALL_OW 1
42934: ST_TO_ADDR
// result := list ;
42935: LD_ADDR_VAR 0 4
42939: PUSH
42940: LD_VAR 0 1
42944: ST_TO_ADDR
// end ;
42945: LD_VAR 0 4
42949: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42950: LD_INT 0
42952: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42953: LD_ADDR_VAR 0 5
42957: PUSH
42958: LD_VAR 0 1
42962: PPUSH
42963: CALL_OW 250
42967: PPUSH
42968: LD_VAR 0 1
42972: PPUSH
42973: CALL_OW 251
42977: PPUSH
42978: LD_VAR 0 2
42982: PPUSH
42983: LD_VAR 0 3
42987: PPUSH
42988: LD_VAR 0 4
42992: PPUSH
42993: CALL 43375 0 5
42997: ST_TO_ADDR
// end ;
42998: LD_VAR 0 5
43002: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
43003: LD_INT 0
43005: PPUSH
43006: PPUSH
43007: PPUSH
43008: PPUSH
// if not list or not unit then
43009: LD_VAR 0 2
43013: NOT
43014: IFTRUE 43023
43016: PUSH
43017: LD_VAR 0 1
43021: NOT
43022: OR
43023: IFFALSE 43027
// exit ;
43025: GO 43370
// result := [ ] ;
43027: LD_ADDR_VAR 0 5
43031: PUSH
43032: EMPTY
43033: ST_TO_ADDR
// for i in list do
43034: LD_ADDR_VAR 0 6
43038: PUSH
43039: LD_VAR 0 2
43043: PUSH
43044: FOR_IN
43045: IFFALSE 43263
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43047: LD_ADDR_VAR 0 8
43051: PUSH
43052: LD_VAR 0 1
43056: PPUSH
43057: LD_VAR 0 6
43061: PUSH
43062: LD_INT 1
43064: ARRAY
43065: PPUSH
43066: LD_VAR 0 6
43070: PUSH
43071: LD_INT 2
43073: ARRAY
43074: PPUSH
43075: CALL_OW 297
43079: ST_TO_ADDR
// if not Count ( result ) then
43080: LD_VAR 0 5
43084: PPUSH
43085: CALL 39631 0 1
43089: NOT
43090: IFFALSE 43123
// begin result := Join ( result , [ i , tmp ] ) ;
43092: LD_ADDR_VAR 0 5
43096: PUSH
43097: LD_VAR 0 5
43101: PPUSH
43102: LD_VAR 0 6
43106: PUSH
43107: LD_VAR 0 8
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PPUSH
43116: CALL 75563 0 2
43120: ST_TO_ADDR
// continue ;
43121: GO 43044
// end ; if result [ result ] [ 2 ] <= tmp then
43123: LD_VAR 0 5
43127: PUSH
43128: LD_VAR 0 5
43132: ARRAY
43133: PUSH
43134: LD_INT 2
43136: ARRAY
43137: PUSH
43138: LD_VAR 0 8
43142: LESSEQUAL
43143: IFFALSE 43176
// result := Join ( result , [ i , tmp ] ) else
43145: LD_ADDR_VAR 0 5
43149: PUSH
43150: LD_VAR 0 5
43154: PPUSH
43155: LD_VAR 0 6
43159: PUSH
43160: LD_VAR 0 8
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PPUSH
43169: CALL 75563 0 2
43173: ST_TO_ADDR
43174: GO 43261
// begin for j := 1 to Count ( result ) do
43176: LD_ADDR_VAR 0 7
43180: PUSH
43181: DOUBLE
43182: LD_INT 1
43184: DEC
43185: ST_TO_ADDR
43186: LD_VAR 0 5
43190: PPUSH
43191: CALL 39631 0 1
43195: PUSH
43196: FOR_TO
43197: IFFALSE 43259
// begin if tmp < result [ j ] [ 2 ] then
43199: LD_VAR 0 8
43203: PUSH
43204: LD_VAR 0 5
43208: PUSH
43209: LD_VAR 0 7
43213: ARRAY
43214: PUSH
43215: LD_INT 2
43217: ARRAY
43218: LESS
43219: IFFALSE 43257
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43221: LD_ADDR_VAR 0 5
43225: PUSH
43226: LD_VAR 0 5
43230: PPUSH
43231: LD_VAR 0 7
43235: PPUSH
43236: LD_VAR 0 6
43240: PUSH
43241: LD_VAR 0 8
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PPUSH
43250: CALL_OW 2
43254: ST_TO_ADDR
// break ;
43255: GO 43259
// end ; end ;
43257: GO 43196
43259: POP
43260: POP
// end ; end ;
43261: GO 43044
43263: POP
43264: POP
// if result and not asc then
43265: LD_VAR 0 5
43269: IFFALSE 43278
43271: PUSH
43272: LD_VAR 0 3
43276: NOT
43277: AND
43278: IFFALSE 43295
// result := ReverseArray ( result ) ;
43280: LD_ADDR_VAR 0 5
43284: PUSH
43285: LD_VAR 0 5
43289: PPUSH
43290: CALL 70653 0 1
43294: ST_TO_ADDR
// tmp := [ ] ;
43295: LD_ADDR_VAR 0 8
43299: PUSH
43300: EMPTY
43301: ST_TO_ADDR
// if mode then
43302: LD_VAR 0 4
43306: IFFALSE 43370
// begin for i := 1 to result do
43308: LD_ADDR_VAR 0 6
43312: PUSH
43313: DOUBLE
43314: LD_INT 1
43316: DEC
43317: ST_TO_ADDR
43318: LD_VAR 0 5
43322: PUSH
43323: FOR_TO
43324: IFFALSE 43358
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
43326: LD_ADDR_VAR 0 8
43330: PUSH
43331: LD_VAR 0 8
43335: PPUSH
43336: LD_VAR 0 5
43340: PUSH
43341: LD_VAR 0 6
43345: ARRAY
43346: PUSH
43347: LD_INT 1
43349: ARRAY
43350: PPUSH
43351: CALL 75563 0 2
43355: ST_TO_ADDR
43356: GO 43323
43358: POP
43359: POP
// result := tmp ;
43360: LD_ADDR_VAR 0 5
43364: PUSH
43365: LD_VAR 0 8
43369: ST_TO_ADDR
// end ; end ;
43370: LD_VAR 0 5
43374: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43375: LD_INT 0
43377: PPUSH
43378: PPUSH
43379: PPUSH
43380: PPUSH
// if not list then
43381: LD_VAR 0 3
43385: NOT
43386: IFFALSE 43390
// exit ;
43388: GO 43780
// result := [ ] ;
43390: LD_ADDR_VAR 0 6
43394: PUSH
43395: EMPTY
43396: ST_TO_ADDR
// for i in list do
43397: LD_ADDR_VAR 0 7
43401: PUSH
43402: LD_VAR 0 3
43406: PUSH
43407: FOR_IN
43408: IFFALSE 43610
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43410: LD_ADDR_VAR 0 9
43414: PUSH
43415: LD_VAR 0 7
43419: PPUSH
43420: LD_VAR 0 1
43424: PPUSH
43425: LD_VAR 0 2
43429: PPUSH
43430: CALL_OW 297
43434: ST_TO_ADDR
// if not result then
43435: LD_VAR 0 6
43439: NOT
43440: IFFALSE 43466
// result := [ [ i , tmp ] ] else
43442: LD_ADDR_VAR 0 6
43446: PUSH
43447: LD_VAR 0 7
43451: PUSH
43452: LD_VAR 0 9
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: EMPTY
43462: LIST
43463: ST_TO_ADDR
43464: GO 43608
// begin if result [ result ] [ 2 ] <= tmp then
43466: LD_VAR 0 6
43470: PUSH
43471: LD_VAR 0 6
43475: ARRAY
43476: PUSH
43477: LD_INT 2
43479: ARRAY
43480: PUSH
43481: LD_VAR 0 9
43485: LESSEQUAL
43486: IFFALSE 43528
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43488: LD_ADDR_VAR 0 6
43492: PUSH
43493: LD_VAR 0 6
43497: PPUSH
43498: LD_VAR 0 6
43502: PUSH
43503: LD_INT 1
43505: PLUS
43506: PPUSH
43507: LD_VAR 0 7
43511: PUSH
43512: LD_VAR 0 9
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PPUSH
43521: CALL_OW 2
43525: ST_TO_ADDR
43526: GO 43608
// for j := 1 to result do
43528: LD_ADDR_VAR 0 8
43532: PUSH
43533: DOUBLE
43534: LD_INT 1
43536: DEC
43537: ST_TO_ADDR
43538: LD_VAR 0 6
43542: PUSH
43543: FOR_TO
43544: IFFALSE 43606
// begin if tmp < result [ j ] [ 2 ] then
43546: LD_VAR 0 9
43550: PUSH
43551: LD_VAR 0 6
43555: PUSH
43556: LD_VAR 0 8
43560: ARRAY
43561: PUSH
43562: LD_INT 2
43564: ARRAY
43565: LESS
43566: IFFALSE 43604
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43568: LD_ADDR_VAR 0 6
43572: PUSH
43573: LD_VAR 0 6
43577: PPUSH
43578: LD_VAR 0 8
43582: PPUSH
43583: LD_VAR 0 7
43587: PUSH
43588: LD_VAR 0 9
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PPUSH
43597: CALL_OW 2
43601: ST_TO_ADDR
// break ;
43602: GO 43606
// end ; end ;
43604: GO 43543
43606: POP
43607: POP
// end ; end ;
43608: GO 43407
43610: POP
43611: POP
// if result and not asc then
43612: LD_VAR 0 6
43616: IFFALSE 43625
43618: PUSH
43619: LD_VAR 0 4
43623: NOT
43624: AND
43625: IFFALSE 43700
// begin tmp := result ;
43627: LD_ADDR_VAR 0 9
43631: PUSH
43632: LD_VAR 0 6
43636: ST_TO_ADDR
// for i = tmp downto 1 do
43637: LD_ADDR_VAR 0 7
43641: PUSH
43642: DOUBLE
43643: LD_VAR 0 9
43647: INC
43648: ST_TO_ADDR
43649: LD_INT 1
43651: PUSH
43652: FOR_DOWNTO
43653: IFFALSE 43698
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
43655: LD_ADDR_VAR 0 6
43659: PUSH
43660: LD_VAR 0 6
43664: PPUSH
43665: LD_VAR 0 9
43669: PUSH
43670: LD_VAR 0 7
43674: MINUS
43675: PUSH
43676: LD_INT 1
43678: PLUS
43679: PPUSH
43680: LD_VAR 0 9
43684: PUSH
43685: LD_VAR 0 7
43689: ARRAY
43690: PPUSH
43691: CALL_OW 1
43695: ST_TO_ADDR
43696: GO 43652
43698: POP
43699: POP
// end ; tmp := [ ] ;
43700: LD_ADDR_VAR 0 9
43704: PUSH
43705: EMPTY
43706: ST_TO_ADDR
// if mode then
43707: LD_VAR 0 5
43711: IFFALSE 43780
// begin for i = 1 to result do
43713: LD_ADDR_VAR 0 7
43717: PUSH
43718: DOUBLE
43719: LD_INT 1
43721: DEC
43722: ST_TO_ADDR
43723: LD_VAR 0 6
43727: PUSH
43728: FOR_TO
43729: IFFALSE 43768
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
43731: LD_ADDR_VAR 0 9
43735: PUSH
43736: LD_VAR 0 9
43740: PPUSH
43741: LD_VAR 0 7
43745: PPUSH
43746: LD_VAR 0 6
43750: PUSH
43751: LD_VAR 0 7
43755: ARRAY
43756: PUSH
43757: LD_INT 1
43759: ARRAY
43760: PPUSH
43761: CALL_OW 1
43765: ST_TO_ADDR
43766: GO 43728
43768: POP
43769: POP
// result := tmp ;
43770: LD_ADDR_VAR 0 6
43774: PUSH
43775: LD_VAR 0 9
43779: ST_TO_ADDR
// end ; end ;
43780: LD_VAR 0 6
43784: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43785: LD_INT 0
43787: PPUSH
43788: PPUSH
43789: PPUSH
43790: PPUSH
43791: PPUSH
43792: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43793: LD_ADDR_VAR 0 5
43797: PUSH
43798: LD_INT 0
43800: PUSH
43801: LD_INT 0
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: EMPTY
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: ST_TO_ADDR
// if not x or not y then
43815: LD_VAR 0 2
43819: NOT
43820: IFTRUE 43829
43822: PUSH
43823: LD_VAR 0 3
43827: NOT
43828: OR
43829: IFFALSE 43833
// exit ;
43831: GO 45489
// if not range then
43833: LD_VAR 0 4
43837: NOT
43838: IFFALSE 43848
// range := 10 ;
43840: LD_ADDR_VAR 0 4
43844: PUSH
43845: LD_INT 10
43847: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43848: LD_ADDR_VAR 0 8
43852: PUSH
43853: LD_INT 81
43855: PUSH
43856: LD_VAR 0 1
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 92
43867: PUSH
43868: LD_VAR 0 2
43872: PUSH
43873: LD_VAR 0 3
43877: PUSH
43878: LD_VAR 0 4
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 3
43891: PUSH
43892: LD_INT 21
43894: PUSH
43895: LD_INT 3
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: LIST
43910: PPUSH
43911: CALL_OW 69
43915: ST_TO_ADDR
// if not tmp then
43916: LD_VAR 0 8
43920: NOT
43921: IFFALSE 43925
// exit ;
43923: GO 45489
// for i in tmp do
43925: LD_ADDR_VAR 0 6
43929: PUSH
43930: LD_VAR 0 8
43934: PUSH
43935: FOR_IN
43936: IFFALSE 45464
// begin points := [ 0 , 0 , 0 ] ;
43938: LD_ADDR_VAR 0 9
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: LD_INT 0
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: LIST
43956: ST_TO_ADDR
// bpoints := 1 ;
43957: LD_ADDR_VAR 0 10
43961: PUSH
43962: LD_INT 1
43964: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43965: LD_VAR 0 6
43969: PPUSH
43970: CALL_OW 247
43974: PUSH
43975: LD_INT 1
43977: DOUBLE
43978: EQUAL
43979: IFTRUE 43983
43981: GO 44565
43983: POP
// begin if GetClass ( i ) = 1 then
43984: LD_VAR 0 6
43988: PPUSH
43989: CALL_OW 257
43993: PUSH
43994: LD_INT 1
43996: EQUAL
43997: IFFALSE 44018
// points := [ 10 , 5 , 3 ] ;
43999: LD_ADDR_VAR 0 9
44003: PUSH
44004: LD_INT 10
44006: PUSH
44007: LD_INT 5
44009: PUSH
44010: LD_INT 3
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: LIST
44017: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44018: LD_VAR 0 6
44022: PPUSH
44023: CALL_OW 257
44027: PUSH
44028: LD_INT 2
44030: PUSH
44031: LD_INT 3
44033: PUSH
44034: LD_INT 4
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: LIST
44041: IN
44042: IFFALSE 44063
// points := [ 3 , 2 , 1 ] ;
44044: LD_ADDR_VAR 0 9
44048: PUSH
44049: LD_INT 3
44051: PUSH
44052: LD_INT 2
44054: PUSH
44055: LD_INT 1
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: LIST
44062: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44063: LD_VAR 0 6
44067: PPUSH
44068: CALL_OW 257
44072: PUSH
44073: LD_INT 5
44075: EQUAL
44076: IFFALSE 44097
// points := [ 130 , 5 , 2 ] ;
44078: LD_ADDR_VAR 0 9
44082: PUSH
44083: LD_INT 130
44085: PUSH
44086: LD_INT 5
44088: PUSH
44089: LD_INT 2
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: LIST
44096: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44097: LD_VAR 0 6
44101: PPUSH
44102: CALL_OW 257
44106: PUSH
44107: LD_INT 8
44109: EQUAL
44110: IFFALSE 44131
// points := [ 35 , 35 , 30 ] ;
44112: LD_ADDR_VAR 0 9
44116: PUSH
44117: LD_INT 35
44119: PUSH
44120: LD_INT 35
44122: PUSH
44123: LD_INT 30
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: LIST
44130: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44131: LD_VAR 0 6
44135: PPUSH
44136: CALL_OW 257
44140: PUSH
44141: LD_INT 9
44143: EQUAL
44144: IFFALSE 44165
// points := [ 20 , 55 , 40 ] ;
44146: LD_ADDR_VAR 0 9
44150: PUSH
44151: LD_INT 20
44153: PUSH
44154: LD_INT 55
44156: PUSH
44157: LD_INT 40
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: LIST
44164: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44165: LD_VAR 0 6
44169: PPUSH
44170: CALL_OW 257
44174: PUSH
44175: LD_INT 12
44177: PUSH
44178: LD_INT 16
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: IN
44185: IFFALSE 44206
// points := [ 5 , 3 , 2 ] ;
44187: LD_ADDR_VAR 0 9
44191: PUSH
44192: LD_INT 5
44194: PUSH
44195: LD_INT 3
44197: PUSH
44198: LD_INT 2
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: LIST
44205: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44206: LD_VAR 0 6
44210: PPUSH
44211: CALL_OW 257
44215: PUSH
44216: LD_INT 17
44218: EQUAL
44219: IFFALSE 44240
// points := [ 100 , 50 , 75 ] ;
44221: LD_ADDR_VAR 0 9
44225: PUSH
44226: LD_INT 100
44228: PUSH
44229: LD_INT 50
44231: PUSH
44232: LD_INT 75
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: LIST
44239: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44240: LD_VAR 0 6
44244: PPUSH
44245: CALL_OW 257
44249: PUSH
44250: LD_INT 15
44252: EQUAL
44253: IFFALSE 44274
// points := [ 10 , 5 , 3 ] ;
44255: LD_ADDR_VAR 0 9
44259: PUSH
44260: LD_INT 10
44262: PUSH
44263: LD_INT 5
44265: PUSH
44266: LD_INT 3
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: LIST
44273: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44274: LD_VAR 0 6
44278: PPUSH
44279: CALL_OW 257
44283: PUSH
44284: LD_INT 14
44286: EQUAL
44287: IFFALSE 44308
// points := [ 10 , 0 , 0 ] ;
44289: LD_ADDR_VAR 0 9
44293: PUSH
44294: LD_INT 10
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: LIST
44307: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44308: LD_VAR 0 6
44312: PPUSH
44313: CALL_OW 257
44317: PUSH
44318: LD_INT 11
44320: EQUAL
44321: IFFALSE 44342
// points := [ 30 , 10 , 5 ] ;
44323: LD_ADDR_VAR 0 9
44327: PUSH
44328: LD_INT 30
44330: PUSH
44331: LD_INT 10
44333: PUSH
44334: LD_INT 5
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: LIST
44341: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44342: LD_VAR 0 1
44346: PPUSH
44347: LD_INT 5
44349: PPUSH
44350: CALL_OW 321
44354: PUSH
44355: LD_INT 2
44357: EQUAL
44358: IFFALSE 44375
// bpoints := bpoints * 1.8 ;
44360: LD_ADDR_VAR 0 10
44364: PUSH
44365: LD_VAR 0 10
44369: PUSH
44370: LD_REAL  1.80000000000000E+0000
44373: MUL
44374: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44375: LD_VAR 0 6
44379: PPUSH
44380: CALL_OW 257
44384: PUSH
44385: LD_INT 1
44387: PUSH
44388: LD_INT 2
44390: PUSH
44391: LD_INT 3
44393: PUSH
44394: LD_INT 4
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: IN
44403: IFFALSE 44423
44405: PUSH
44406: LD_VAR 0 1
44410: PPUSH
44411: LD_INT 51
44413: PPUSH
44414: CALL_OW 321
44418: PUSH
44419: LD_INT 2
44421: EQUAL
44422: AND
44423: IFFALSE 44440
// bpoints := bpoints * 1.2 ;
44425: LD_ADDR_VAR 0 10
44429: PUSH
44430: LD_VAR 0 10
44434: PUSH
44435: LD_REAL  1.20000000000000E+0000
44438: MUL
44439: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44440: LD_VAR 0 6
44444: PPUSH
44445: CALL_OW 257
44449: PUSH
44450: LD_INT 5
44452: PUSH
44453: LD_INT 7
44455: PUSH
44456: LD_INT 9
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: LIST
44463: IN
44464: IFFALSE 44484
44466: PUSH
44467: LD_VAR 0 1
44471: PPUSH
44472: LD_INT 52
44474: PPUSH
44475: CALL_OW 321
44479: PUSH
44480: LD_INT 2
44482: EQUAL
44483: AND
44484: IFFALSE 44501
// bpoints := bpoints * 1.5 ;
44486: LD_ADDR_VAR 0 10
44490: PUSH
44491: LD_VAR 0 10
44495: PUSH
44496: LD_REAL  1.50000000000000E+0000
44499: MUL
44500: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44501: LD_VAR 0 1
44505: PPUSH
44506: LD_INT 66
44508: PPUSH
44509: CALL_OW 321
44513: PUSH
44514: LD_INT 2
44516: EQUAL
44517: IFFALSE 44534
// bpoints := bpoints * 1.1 ;
44519: LD_ADDR_VAR 0 10
44523: PUSH
44524: LD_VAR 0 10
44528: PUSH
44529: LD_REAL  1.10000000000000E+0000
44532: MUL
44533: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44534: LD_ADDR_VAR 0 10
44538: PUSH
44539: LD_VAR 0 10
44543: PUSH
44544: LD_VAR 0 6
44548: PPUSH
44549: LD_INT 1
44551: PPUSH
44552: CALL_OW 259
44556: PUSH
44557: LD_REAL  1.15000000000000E+0000
44560: MUL
44561: MUL
44562: ST_TO_ADDR
// end ; unit_vehicle :
44563: GO 45393
44565: LD_INT 2
44567: DOUBLE
44568: EQUAL
44569: IFTRUE 44573
44571: GO 45381
44573: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44574: LD_VAR 0 6
44578: PPUSH
44579: CALL_OW 264
44583: PUSH
44584: LD_INT 2
44586: PUSH
44587: LD_INT 42
44589: PUSH
44590: LD_INT 24
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: LIST
44597: IN
44598: IFFALSE 44619
// points := [ 25 , 5 , 3 ] ;
44600: LD_ADDR_VAR 0 9
44604: PUSH
44605: LD_INT 25
44607: PUSH
44608: LD_INT 5
44610: PUSH
44611: LD_INT 3
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: LIST
44618: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
44619: LD_VAR 0 6
44623: PPUSH
44624: CALL_OW 264
44628: PUSH
44629: LD_INT 4
44631: PUSH
44632: LD_INT 43
44634: PUSH
44635: LD_INT 25
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: LIST
44642: IN
44643: IFFALSE 44664
// points := [ 40 , 15 , 5 ] ;
44645: LD_ADDR_VAR 0 9
44649: PUSH
44650: LD_INT 40
44652: PUSH
44653: LD_INT 15
44655: PUSH
44656: LD_INT 5
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: LIST
44663: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
44664: LD_VAR 0 6
44668: PPUSH
44669: CALL_OW 264
44673: PUSH
44674: LD_INT 3
44676: PUSH
44677: LD_INT 23
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: IN
44684: IFFALSE 44705
// points := [ 7 , 25 , 8 ] ;
44686: LD_ADDR_VAR 0 9
44690: PUSH
44691: LD_INT 7
44693: PUSH
44694: LD_INT 25
44696: PUSH
44697: LD_INT 8
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: LIST
44704: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
44705: LD_VAR 0 6
44709: PPUSH
44710: CALL_OW 264
44714: PUSH
44715: LD_INT 5
44717: PUSH
44718: LD_INT 27
44720: PUSH
44721: LD_INT 44
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: LIST
44728: IN
44729: IFFALSE 44750
// points := [ 14 , 50 , 16 ] ;
44731: LD_ADDR_VAR 0 9
44735: PUSH
44736: LD_INT 14
44738: PUSH
44739: LD_INT 50
44741: PUSH
44742: LD_INT 16
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: LIST
44749: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
44750: LD_VAR 0 6
44754: PPUSH
44755: CALL_OW 264
44759: PUSH
44760: LD_INT 6
44762: PUSH
44763: LD_INT 46
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: IN
44770: IFFALSE 44791
// points := [ 32 , 120 , 70 ] ;
44772: LD_ADDR_VAR 0 9
44776: PUSH
44777: LD_INT 32
44779: PUSH
44780: LD_INT 120
44782: PUSH
44783: LD_INT 70
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: LIST
44790: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
44791: LD_VAR 0 6
44795: PPUSH
44796: CALL_OW 264
44800: PUSH
44801: LD_INT 7
44803: PUSH
44804: LD_INT 28
44806: PUSH
44807: LD_INT 45
44809: PUSH
44810: LD_INT 92
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: IN
44819: IFFALSE 44840
// points := [ 35 , 20 , 45 ] ;
44821: LD_ADDR_VAR 0 9
44825: PUSH
44826: LD_INT 35
44828: PUSH
44829: LD_INT 20
44831: PUSH
44832: LD_INT 45
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: LIST
44839: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44840: LD_VAR 0 6
44844: PPUSH
44845: CALL_OW 264
44849: PUSH
44850: LD_INT 47
44852: PUSH
44853: EMPTY
44854: LIST
44855: IN
44856: IFFALSE 44877
// points := [ 67 , 45 , 75 ] ;
44858: LD_ADDR_VAR 0 9
44862: PUSH
44863: LD_INT 67
44865: PUSH
44866: LD_INT 45
44868: PUSH
44869: LD_INT 75
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: LIST
44876: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44877: LD_VAR 0 6
44881: PPUSH
44882: CALL_OW 264
44886: PUSH
44887: LD_INT 26
44889: PUSH
44890: EMPTY
44891: LIST
44892: IN
44893: IFFALSE 44914
// points := [ 120 , 30 , 80 ] ;
44895: LD_ADDR_VAR 0 9
44899: PUSH
44900: LD_INT 120
44902: PUSH
44903: LD_INT 30
44905: PUSH
44906: LD_INT 80
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: LIST
44913: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44914: LD_VAR 0 6
44918: PPUSH
44919: CALL_OW 264
44923: PUSH
44924: LD_INT 22
44926: PUSH
44927: EMPTY
44928: LIST
44929: IN
44930: IFFALSE 44951
// points := [ 40 , 1 , 1 ] ;
44932: LD_ADDR_VAR 0 9
44936: PUSH
44937: LD_INT 40
44939: PUSH
44940: LD_INT 1
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: LIST
44950: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44951: LD_VAR 0 6
44955: PPUSH
44956: CALL_OW 264
44960: PUSH
44961: LD_INT 29
44963: PUSH
44964: EMPTY
44965: LIST
44966: IN
44967: IFFALSE 44988
// points := [ 70 , 200 , 400 ] ;
44969: LD_ADDR_VAR 0 9
44973: PUSH
44974: LD_INT 70
44976: PUSH
44977: LD_INT 200
44979: PUSH
44980: LD_INT 400
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: LIST
44987: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44988: LD_VAR 0 6
44992: PPUSH
44993: CALL_OW 264
44997: PUSH
44998: LD_INT 14
45000: PUSH
45001: LD_INT 53
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: IN
45008: IFFALSE 45029
// points := [ 40 , 10 , 20 ] ;
45010: LD_ADDR_VAR 0 9
45014: PUSH
45015: LD_INT 40
45017: PUSH
45018: LD_INT 10
45020: PUSH
45021: LD_INT 20
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: LIST
45028: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45029: LD_VAR 0 6
45033: PPUSH
45034: CALL_OW 264
45038: PUSH
45039: LD_INT 9
45041: PUSH
45042: EMPTY
45043: LIST
45044: IN
45045: IFFALSE 45066
// points := [ 5 , 70 , 20 ] ;
45047: LD_ADDR_VAR 0 9
45051: PUSH
45052: LD_INT 5
45054: PUSH
45055: LD_INT 70
45057: PUSH
45058: LD_INT 20
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: LIST
45065: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45066: LD_VAR 0 6
45070: PPUSH
45071: CALL_OW 264
45075: PUSH
45076: LD_INT 10
45078: PUSH
45079: EMPTY
45080: LIST
45081: IN
45082: IFFALSE 45103
// points := [ 35 , 110 , 70 ] ;
45084: LD_ADDR_VAR 0 9
45088: PUSH
45089: LD_INT 35
45091: PUSH
45092: LD_INT 110
45094: PUSH
45095: LD_INT 70
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: LIST
45102: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45103: LD_VAR 0 6
45107: PPUSH
45108: CALL_OW 265
45112: PUSH
45113: LD_INT 25
45115: EQUAL
45116: IFFALSE 45137
// points := [ 80 , 65 , 100 ] ;
45118: LD_ADDR_VAR 0 9
45122: PUSH
45123: LD_INT 80
45125: PUSH
45126: LD_INT 65
45128: PUSH
45129: LD_INT 100
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: LIST
45136: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45137: LD_VAR 0 6
45141: PPUSH
45142: CALL_OW 263
45146: PUSH
45147: LD_INT 1
45149: EQUAL
45150: IFFALSE 45185
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45152: LD_ADDR_VAR 0 10
45156: PUSH
45157: LD_VAR 0 10
45161: PUSH
45162: LD_VAR 0 6
45166: PPUSH
45167: CALL_OW 311
45171: PPUSH
45172: LD_INT 3
45174: PPUSH
45175: CALL_OW 259
45179: PUSH
45180: LD_INT 4
45182: MUL
45183: MUL
45184: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45185: LD_VAR 0 6
45189: PPUSH
45190: CALL_OW 263
45194: PUSH
45195: LD_INT 2
45197: EQUAL
45198: IFFALSE 45249
// begin j := IsControledBy ( i ) ;
45200: LD_ADDR_VAR 0 7
45204: PUSH
45205: LD_VAR 0 6
45209: PPUSH
45210: CALL_OW 312
45214: ST_TO_ADDR
// if j then
45215: LD_VAR 0 7
45219: IFFALSE 45249
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45221: LD_ADDR_VAR 0 10
45225: PUSH
45226: LD_VAR 0 10
45230: PUSH
45231: LD_VAR 0 7
45235: PPUSH
45236: LD_INT 3
45238: PPUSH
45239: CALL_OW 259
45243: PUSH
45244: LD_INT 3
45246: MUL
45247: MUL
45248: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45249: LD_VAR 0 6
45253: PPUSH
45254: CALL_OW 264
45258: PUSH
45259: LD_INT 5
45261: PUSH
45262: LD_INT 6
45264: PUSH
45265: LD_INT 46
45267: PUSH
45268: LD_INT 44
45270: PUSH
45271: LD_INT 47
45273: PUSH
45274: LD_INT 45
45276: PUSH
45277: LD_INT 28
45279: PUSH
45280: LD_INT 7
45282: PUSH
45283: LD_INT 27
45285: PUSH
45286: LD_INT 29
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: IN
45301: IFFALSE 45321
45303: PUSH
45304: LD_VAR 0 1
45308: PPUSH
45309: LD_INT 52
45311: PPUSH
45312: CALL_OW 321
45316: PUSH
45317: LD_INT 2
45319: EQUAL
45320: AND
45321: IFFALSE 45338
// bpoints := bpoints * 1.2 ;
45323: LD_ADDR_VAR 0 10
45327: PUSH
45328: LD_VAR 0 10
45332: PUSH
45333: LD_REAL  1.20000000000000E+0000
45336: MUL
45337: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45338: LD_VAR 0 6
45342: PPUSH
45343: CALL_OW 264
45347: PUSH
45348: LD_INT 6
45350: PUSH
45351: LD_INT 46
45353: PUSH
45354: LD_INT 47
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: LIST
45361: IN
45362: IFFALSE 45379
// bpoints := bpoints * 1.2 ;
45364: LD_ADDR_VAR 0 10
45368: PUSH
45369: LD_VAR 0 10
45373: PUSH
45374: LD_REAL  1.20000000000000E+0000
45377: MUL
45378: ST_TO_ADDR
// end ; unit_building :
45379: GO 45393
45381: LD_INT 3
45383: DOUBLE
45384: EQUAL
45385: IFTRUE 45389
45387: GO 45392
45389: POP
// ; end ;
45390: GO 45393
45392: POP
// for j = 1 to 3 do
45393: LD_ADDR_VAR 0 7
45397: PUSH
45398: DOUBLE
45399: LD_INT 1
45401: DEC
45402: ST_TO_ADDR
45403: LD_INT 3
45405: PUSH
45406: FOR_TO
45407: IFFALSE 45460
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45409: LD_ADDR_VAR 0 5
45413: PUSH
45414: LD_VAR 0 5
45418: PPUSH
45419: LD_VAR 0 7
45423: PPUSH
45424: LD_VAR 0 5
45428: PUSH
45429: LD_VAR 0 7
45433: ARRAY
45434: PUSH
45435: LD_VAR 0 9
45439: PUSH
45440: LD_VAR 0 7
45444: ARRAY
45445: PUSH
45446: LD_VAR 0 10
45450: MUL
45451: PLUS
45452: PPUSH
45453: CALL_OW 1
45457: ST_TO_ADDR
45458: GO 45406
45460: POP
45461: POP
// end ;
45462: GO 43935
45464: POP
45465: POP
// result := Replace ( result , 4 , tmp ) ;
45466: LD_ADDR_VAR 0 5
45470: PUSH
45471: LD_VAR 0 5
45475: PPUSH
45476: LD_INT 4
45478: PPUSH
45479: LD_VAR 0 8
45483: PPUSH
45484: CALL_OW 1
45488: ST_TO_ADDR
// end ;
45489: LD_VAR 0 5
45493: RET
// export function DangerAtRange ( unit , range ) ; begin
45494: LD_INT 0
45496: PPUSH
// if not unit then
45497: LD_VAR 0 1
45501: NOT
45502: IFFALSE 45506
// exit ;
45504: GO 45551
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45506: LD_ADDR_VAR 0 3
45510: PUSH
45511: LD_VAR 0 1
45515: PPUSH
45516: CALL_OW 255
45520: PPUSH
45521: LD_VAR 0 1
45525: PPUSH
45526: CALL_OW 250
45530: PPUSH
45531: LD_VAR 0 1
45535: PPUSH
45536: CALL_OW 251
45540: PPUSH
45541: LD_VAR 0 2
45545: PPUSH
45546: CALL 43785 0 4
45550: ST_TO_ADDR
// end ;
45551: LD_VAR 0 3
45555: RET
// export function DangerInArea ( side , area ) ; begin
45556: LD_INT 0
45558: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45559: LD_ADDR_VAR 0 3
45563: PUSH
45564: LD_VAR 0 2
45568: PPUSH
45569: LD_INT 81
45571: PUSH
45572: LD_VAR 0 1
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PPUSH
45581: CALL_OW 70
45585: ST_TO_ADDR
// end ;
45586: LD_VAR 0 3
45590: RET
// export function IsExtension ( b ) ; begin
45591: LD_INT 0
45593: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
45594: LD_ADDR_VAR 0 2
45598: PUSH
45599: LD_VAR 0 1
45603: PUSH
45604: LD_INT 23
45606: PUSH
45607: LD_INT 20
45609: PUSH
45610: LD_INT 22
45612: PUSH
45613: LD_INT 17
45615: PUSH
45616: LD_INT 24
45618: PUSH
45619: LD_INT 21
45621: PUSH
45622: LD_INT 19
45624: PUSH
45625: LD_INT 16
45627: PUSH
45628: LD_INT 25
45630: PUSH
45631: LD_INT 18
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: IN
45646: ST_TO_ADDR
// end ;
45647: LD_VAR 0 2
45651: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
45652: LD_INT 0
45654: PPUSH
45655: PPUSH
45656: PPUSH
// result := [ ] ;
45657: LD_ADDR_VAR 0 4
45661: PUSH
45662: EMPTY
45663: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
45664: LD_ADDR_VAR 0 5
45668: PUSH
45669: LD_VAR 0 2
45673: PPUSH
45674: LD_INT 21
45676: PUSH
45677: LD_INT 3
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PPUSH
45684: CALL_OW 70
45688: ST_TO_ADDR
// if not tmp then
45689: LD_VAR 0 5
45693: NOT
45694: IFFALSE 45698
// exit ;
45696: GO 45762
// if checkLink then
45698: LD_VAR 0 3
45702: IFFALSE 45752
// begin for i in tmp do
45704: LD_ADDR_VAR 0 6
45708: PUSH
45709: LD_VAR 0 5
45713: PUSH
45714: FOR_IN
45715: IFFALSE 45750
// if GetBase ( i ) <> base then
45717: LD_VAR 0 6
45721: PPUSH
45722: CALL_OW 274
45726: PUSH
45727: LD_VAR 0 1
45731: NONEQUAL
45732: IFFALSE 45748
// ComLinkToBase ( base , i ) ;
45734: LD_VAR 0 1
45738: PPUSH
45739: LD_VAR 0 6
45743: PPUSH
45744: CALL_OW 169
45748: GO 45714
45750: POP
45751: POP
// end ; result := tmp ;
45752: LD_ADDR_VAR 0 4
45756: PUSH
45757: LD_VAR 0 5
45761: ST_TO_ADDR
// end ;
45762: LD_VAR 0 4
45766: RET
// export function ComComplete ( units , b ) ; var i ; begin
45767: LD_INT 0
45769: PPUSH
45770: PPUSH
// if not units then
45771: LD_VAR 0 1
45775: NOT
45776: IFFALSE 45780
// exit ;
45778: GO 45870
// for i in units do
45780: LD_ADDR_VAR 0 4
45784: PUSH
45785: LD_VAR 0 1
45789: PUSH
45790: FOR_IN
45791: IFFALSE 45868
// if BuildingStatus ( b ) = bs_build then
45793: LD_VAR 0 2
45797: PPUSH
45798: CALL_OW 461
45802: PUSH
45803: LD_INT 1
45805: EQUAL
45806: IFFALSE 45866
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
45808: LD_VAR 0 4
45812: PPUSH
45813: LD_STRING h
45815: PUSH
45816: LD_VAR 0 2
45820: PPUSH
45821: CALL_OW 250
45825: PUSH
45826: LD_VAR 0 2
45830: PPUSH
45831: CALL_OW 251
45835: PUSH
45836: LD_VAR 0 2
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: PUSH
45859: EMPTY
45860: LIST
45861: PPUSH
45862: CALL_OW 446
45866: GO 45790
45868: POP
45869: POP
// end ;
45870: LD_VAR 0 3
45874: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45875: LD_INT 0
45877: PPUSH
45878: PPUSH
45879: PPUSH
45880: PPUSH
45881: PPUSH
45882: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45883: LD_VAR 0 1
45887: NOT
45888: IFTRUE 45905
45890: PUSH
45891: LD_VAR 0 1
45895: PPUSH
45896: CALL_OW 263
45900: PUSH
45901: LD_INT 2
45903: NONEQUAL
45904: OR
45905: IFFALSE 45909
// exit ;
45907: GO 46225
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45909: LD_ADDR_VAR 0 6
45913: PUSH
45914: LD_INT 22
45916: PUSH
45917: LD_VAR 0 1
45921: PPUSH
45922: CALL_OW 255
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 2
45933: PUSH
45934: LD_INT 30
45936: PUSH
45937: LD_INT 36
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 34
45946: PUSH
45947: LD_INT 31
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: LIST
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PPUSH
45963: CALL_OW 69
45967: ST_TO_ADDR
// if not tmp then
45968: LD_VAR 0 6
45972: NOT
45973: IFFALSE 45977
// exit ;
45975: GO 46225
// result := [ ] ;
45977: LD_ADDR_VAR 0 2
45981: PUSH
45982: EMPTY
45983: ST_TO_ADDR
// for i in tmp do
45984: LD_ADDR_VAR 0 3
45988: PUSH
45989: LD_VAR 0 6
45993: PUSH
45994: FOR_IN
45995: IFFALSE 46066
// begin t := UnitsInside ( i ) ;
45997: LD_ADDR_VAR 0 4
46001: PUSH
46002: LD_VAR 0 3
46006: PPUSH
46007: CALL_OW 313
46011: ST_TO_ADDR
// if t then
46012: LD_VAR 0 4
46016: IFFALSE 46064
// for j in t do
46018: LD_ADDR_VAR 0 7
46022: PUSH
46023: LD_VAR 0 4
46027: PUSH
46028: FOR_IN
46029: IFFALSE 46062
// result := Replace ( result , result + 1 , j ) ;
46031: LD_ADDR_VAR 0 2
46035: PUSH
46036: LD_VAR 0 2
46040: PPUSH
46041: LD_VAR 0 2
46045: PUSH
46046: LD_INT 1
46048: PLUS
46049: PPUSH
46050: LD_VAR 0 7
46054: PPUSH
46055: CALL_OW 1
46059: ST_TO_ADDR
46060: GO 46028
46062: POP
46063: POP
// end ;
46064: GO 45994
46066: POP
46067: POP
// if not result then
46068: LD_VAR 0 2
46072: NOT
46073: IFFALSE 46077
// exit ;
46075: GO 46225
// mech := result [ 1 ] ;
46077: LD_ADDR_VAR 0 5
46081: PUSH
46082: LD_VAR 0 2
46086: PUSH
46087: LD_INT 1
46089: ARRAY
46090: ST_TO_ADDR
// if result > 1 then
46091: LD_VAR 0 2
46095: PUSH
46096: LD_INT 1
46098: GREATER
46099: IFFALSE 46211
// begin for i = 2 to result do
46101: LD_ADDR_VAR 0 3
46105: PUSH
46106: DOUBLE
46107: LD_INT 2
46109: DEC
46110: ST_TO_ADDR
46111: LD_VAR 0 2
46115: PUSH
46116: FOR_TO
46117: IFFALSE 46209
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46119: LD_ADDR_VAR 0 4
46123: PUSH
46124: LD_VAR 0 2
46128: PUSH
46129: LD_VAR 0 3
46133: ARRAY
46134: PPUSH
46135: LD_INT 3
46137: PPUSH
46138: CALL_OW 259
46142: PUSH
46143: LD_VAR 0 2
46147: PUSH
46148: LD_VAR 0 3
46152: ARRAY
46153: PPUSH
46154: CALL_OW 432
46158: MINUS
46159: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46160: LD_VAR 0 4
46164: PUSH
46165: LD_VAR 0 5
46169: PPUSH
46170: LD_INT 3
46172: PPUSH
46173: CALL_OW 259
46177: PUSH
46178: LD_VAR 0 5
46182: PPUSH
46183: CALL_OW 432
46187: MINUS
46188: GREATEREQUAL
46189: IFFALSE 46207
// mech := result [ i ] ;
46191: LD_ADDR_VAR 0 5
46195: PUSH
46196: LD_VAR 0 2
46200: PUSH
46201: LD_VAR 0 3
46205: ARRAY
46206: ST_TO_ADDR
// end ;
46207: GO 46116
46209: POP
46210: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46211: LD_VAR 0 1
46215: PPUSH
46216: LD_VAR 0 5
46220: PPUSH
46221: CALL_OW 135
// end ;
46225: LD_VAR 0 2
46229: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46230: LD_INT 0
46232: PPUSH
46233: PPUSH
46234: PPUSH
46235: PPUSH
46236: PPUSH
46237: PPUSH
46238: PPUSH
46239: PPUSH
46240: PPUSH
46241: PPUSH
46242: PPUSH
46243: PPUSH
46244: PPUSH
// result := [ ] ;
46245: LD_ADDR_VAR 0 7
46249: PUSH
46250: EMPTY
46251: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46252: LD_VAR 0 1
46256: PPUSH
46257: CALL_OW 266
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: IN
46272: NOT
46273: IFFALSE 46277
// exit ;
46275: GO 47917
// if name then
46277: LD_VAR 0 3
46281: IFFALSE 46297
// SetBName ( base_dep , name ) ;
46283: LD_VAR 0 1
46287: PPUSH
46288: LD_VAR 0 3
46292: PPUSH
46293: CALL_OW 500
// base := GetBase ( base_dep ) ;
46297: LD_ADDR_VAR 0 15
46301: PUSH
46302: LD_VAR 0 1
46306: PPUSH
46307: CALL_OW 274
46311: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46312: LD_ADDR_VAR 0 16
46316: PUSH
46317: LD_VAR 0 1
46321: PPUSH
46322: CALL_OW 255
46326: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46327: LD_ADDR_VAR 0 17
46331: PUSH
46332: LD_VAR 0 1
46336: PPUSH
46337: CALL_OW 248
46341: ST_TO_ADDR
// if sources then
46342: LD_VAR 0 5
46346: IFFALSE 46393
// for i = 1 to 3 do
46348: LD_ADDR_VAR 0 8
46352: PUSH
46353: DOUBLE
46354: LD_INT 1
46356: DEC
46357: ST_TO_ADDR
46358: LD_INT 3
46360: PUSH
46361: FOR_TO
46362: IFFALSE 46391
// AddResourceType ( base , i , sources [ i ] ) ;
46364: LD_VAR 0 15
46368: PPUSH
46369: LD_VAR 0 8
46373: PPUSH
46374: LD_VAR 0 5
46378: PUSH
46379: LD_VAR 0 8
46383: ARRAY
46384: PPUSH
46385: CALL_OW 276
46389: GO 46361
46391: POP
46392: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46393: LD_ADDR_VAR 0 18
46397: PUSH
46398: LD_VAR 0 15
46402: PPUSH
46403: LD_VAR 0 2
46407: PPUSH
46408: LD_INT 1
46410: PPUSH
46411: CALL 45652 0 3
46415: ST_TO_ADDR
// InitHc ;
46416: CALL_OW 19
// InitUc ;
46420: CALL_OW 18
// uc_side := side ;
46424: LD_ADDR_OWVAR 20
46428: PUSH
46429: LD_VAR 0 16
46433: ST_TO_ADDR
// uc_nation := nation ;
46434: LD_ADDR_OWVAR 21
46438: PUSH
46439: LD_VAR 0 17
46443: ST_TO_ADDR
// if buildings then
46444: LD_VAR 0 18
46448: IFFALSE 47776
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46450: LD_ADDR_VAR 0 19
46454: PUSH
46455: LD_VAR 0 18
46459: PPUSH
46460: LD_INT 2
46462: PUSH
46463: LD_INT 30
46465: PUSH
46466: LD_INT 29
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 30
46475: PUSH
46476: LD_INT 30
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: LIST
46487: PPUSH
46488: CALL_OW 72
46492: ST_TO_ADDR
// if tmp then
46493: LD_VAR 0 19
46497: IFFALSE 46545
// for i in tmp do
46499: LD_ADDR_VAR 0 8
46503: PUSH
46504: LD_VAR 0 19
46508: PUSH
46509: FOR_IN
46510: IFFALSE 46543
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46512: LD_VAR 0 8
46516: PPUSH
46517: CALL_OW 250
46521: PPUSH
46522: LD_VAR 0 8
46526: PPUSH
46527: CALL_OW 251
46531: PPUSH
46532: LD_VAR 0 16
46536: PPUSH
46537: CALL_OW 441
46541: GO 46509
46543: POP
46544: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46545: LD_VAR 0 18
46549: PPUSH
46550: LD_INT 2
46552: PUSH
46553: LD_INT 30
46555: PUSH
46556: LD_INT 32
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 30
46565: PUSH
46566: LD_INT 33
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: LIST
46577: PPUSH
46578: CALL_OW 72
46582: IFFALSE 46670
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46584: LD_ADDR_VAR 0 8
46588: PUSH
46589: LD_VAR 0 18
46593: PPUSH
46594: LD_INT 2
46596: PUSH
46597: LD_INT 30
46599: PUSH
46600: LD_INT 32
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 30
46609: PUSH
46610: LD_INT 33
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: LIST
46621: PPUSH
46622: CALL_OW 72
46626: PUSH
46627: FOR_IN
46628: IFFALSE 46668
// begin if not GetBWeapon ( i ) then
46630: LD_VAR 0 8
46634: PPUSH
46635: CALL_OW 269
46639: NOT
46640: IFFALSE 46666
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
46642: LD_VAR 0 8
46646: PPUSH
46647: LD_VAR 0 8
46651: PPUSH
46652: LD_VAR 0 2
46656: PPUSH
46657: CALL 47922 0 2
46661: PPUSH
46662: CALL_OW 431
// end ;
46666: GO 46627
46668: POP
46669: POP
// end ; for i = 1 to personel do
46670: LD_ADDR_VAR 0 8
46674: PUSH
46675: DOUBLE
46676: LD_INT 1
46678: DEC
46679: ST_TO_ADDR
46680: LD_VAR 0 6
46684: PUSH
46685: FOR_TO
46686: IFFALSE 47756
// begin if i > 4 then
46688: LD_VAR 0 8
46692: PUSH
46693: LD_INT 4
46695: GREATER
46696: IFFALSE 46700
// break ;
46698: GO 47756
// case i of 1 :
46700: LD_VAR 0 8
46704: PUSH
46705: LD_INT 1
46707: DOUBLE
46708: EQUAL
46709: IFTRUE 46713
46711: GO 46793
46713: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
46714: LD_ADDR_VAR 0 12
46718: PUSH
46719: LD_VAR 0 18
46723: PPUSH
46724: LD_INT 22
46726: PUSH
46727: LD_VAR 0 16
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 58
46738: PUSH
46739: EMPTY
46740: LIST
46741: PUSH
46742: LD_INT 2
46744: PUSH
46745: LD_INT 30
46747: PUSH
46748: LD_INT 32
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 30
46757: PUSH
46758: LD_INT 4
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 30
46767: PUSH
46768: LD_INT 5
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: LIST
46785: PPUSH
46786: CALL_OW 72
46790: ST_TO_ADDR
46791: GO 47015
46793: LD_INT 2
46795: DOUBLE
46796: EQUAL
46797: IFTRUE 46801
46799: GO 46863
46801: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
46802: LD_ADDR_VAR 0 12
46806: PUSH
46807: LD_VAR 0 18
46811: PPUSH
46812: LD_INT 22
46814: PUSH
46815: LD_VAR 0 16
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 2
46826: PUSH
46827: LD_INT 30
46829: PUSH
46830: LD_INT 0
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 30
46839: PUSH
46840: LD_INT 1
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: LIST
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PPUSH
46856: CALL_OW 72
46860: ST_TO_ADDR
46861: GO 47015
46863: LD_INT 3
46865: DOUBLE
46866: EQUAL
46867: IFTRUE 46871
46869: GO 46933
46871: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46872: LD_ADDR_VAR 0 12
46876: PUSH
46877: LD_VAR 0 18
46881: PPUSH
46882: LD_INT 22
46884: PUSH
46885: LD_VAR 0 16
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 2
46896: PUSH
46897: LD_INT 30
46899: PUSH
46900: LD_INT 2
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 30
46909: PUSH
46910: LD_INT 3
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: LIST
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PPUSH
46926: CALL_OW 72
46930: ST_TO_ADDR
46931: GO 47015
46933: LD_INT 4
46935: DOUBLE
46936: EQUAL
46937: IFTRUE 46941
46939: GO 47014
46941: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46942: LD_ADDR_VAR 0 12
46946: PUSH
46947: LD_VAR 0 18
46951: PPUSH
46952: LD_INT 22
46954: PUSH
46955: LD_VAR 0 16
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 2
46966: PUSH
46967: LD_INT 30
46969: PUSH
46970: LD_INT 6
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 30
46979: PUSH
46980: LD_INT 7
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 30
46989: PUSH
46990: LD_INT 8
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PPUSH
47007: CALL_OW 72
47011: ST_TO_ADDR
47012: GO 47015
47014: POP
// if i = 1 then
47015: LD_VAR 0 8
47019: PUSH
47020: LD_INT 1
47022: EQUAL
47023: IFFALSE 47134
// begin tmp := [ ] ;
47025: LD_ADDR_VAR 0 19
47029: PUSH
47030: EMPTY
47031: ST_TO_ADDR
// for j in f do
47032: LD_ADDR_VAR 0 9
47036: PUSH
47037: LD_VAR 0 12
47041: PUSH
47042: FOR_IN
47043: IFFALSE 47116
// if GetBType ( j ) = b_bunker then
47045: LD_VAR 0 9
47049: PPUSH
47050: CALL_OW 266
47054: PUSH
47055: LD_INT 32
47057: EQUAL
47058: IFFALSE 47085
// tmp := Insert ( tmp , 1 , j ) else
47060: LD_ADDR_VAR 0 19
47064: PUSH
47065: LD_VAR 0 19
47069: PPUSH
47070: LD_INT 1
47072: PPUSH
47073: LD_VAR 0 9
47077: PPUSH
47078: CALL_OW 2
47082: ST_TO_ADDR
47083: GO 47114
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47085: LD_ADDR_VAR 0 19
47089: PUSH
47090: LD_VAR 0 19
47094: PPUSH
47095: LD_VAR 0 19
47099: PUSH
47100: LD_INT 1
47102: PLUS
47103: PPUSH
47104: LD_VAR 0 9
47108: PPUSH
47109: CALL_OW 2
47113: ST_TO_ADDR
47114: GO 47042
47116: POP
47117: POP
// if tmp then
47118: LD_VAR 0 19
47122: IFFALSE 47134
// f := tmp ;
47124: LD_ADDR_VAR 0 12
47128: PUSH
47129: LD_VAR 0 19
47133: ST_TO_ADDR
// end ; x := personel [ i ] ;
47134: LD_ADDR_VAR 0 13
47138: PUSH
47139: LD_VAR 0 6
47143: PUSH
47144: LD_VAR 0 8
47148: ARRAY
47149: ST_TO_ADDR
// if x = - 1 then
47150: LD_VAR 0 13
47154: PUSH
47155: LD_INT 1
47157: NEG
47158: EQUAL
47159: IFFALSE 47370
// begin for j in f do
47161: LD_ADDR_VAR 0 9
47165: PUSH
47166: LD_VAR 0 12
47170: PUSH
47171: FOR_IN
47172: IFFALSE 47366
// repeat InitHc ;
47174: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47178: LD_VAR 0 9
47182: PPUSH
47183: CALL_OW 266
47187: PUSH
47188: LD_INT 5
47190: EQUAL
47191: IFFALSE 47261
// begin if UnitsInside ( j ) < 3 then
47193: LD_VAR 0 9
47197: PPUSH
47198: CALL_OW 313
47202: PUSH
47203: LD_INT 3
47205: LESS
47206: IFFALSE 47242
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47208: LD_INT 0
47210: PPUSH
47211: LD_INT 5
47213: PUSH
47214: LD_INT 8
47216: PUSH
47217: LD_INT 9
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: LIST
47224: PUSH
47225: LD_VAR 0 17
47229: ARRAY
47230: PPUSH
47231: LD_VAR 0 4
47235: PPUSH
47236: CALL_OW 380
47240: GO 47259
// PrepareHuman ( false , i , skill ) ;
47242: LD_INT 0
47244: PPUSH
47245: LD_VAR 0 8
47249: PPUSH
47250: LD_VAR 0 4
47254: PPUSH
47255: CALL_OW 380
// end else
47259: GO 47278
// PrepareHuman ( false , i , skill ) ;
47261: LD_INT 0
47263: PPUSH
47264: LD_VAR 0 8
47268: PPUSH
47269: LD_VAR 0 4
47273: PPUSH
47274: CALL_OW 380
// un := CreateHuman ;
47278: LD_ADDR_VAR 0 14
47282: PUSH
47283: CALL_OW 44
47287: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47288: LD_ADDR_VAR 0 7
47292: PUSH
47293: LD_VAR 0 7
47297: PPUSH
47298: LD_INT 1
47300: PPUSH
47301: LD_VAR 0 14
47305: PPUSH
47306: CALL_OW 2
47310: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47311: LD_VAR 0 14
47315: PPUSH
47316: LD_VAR 0 9
47320: PPUSH
47321: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47325: LD_VAR 0 9
47329: PPUSH
47330: CALL_OW 313
47334: PUSH
47335: LD_INT 6
47337: EQUAL
47338: IFTRUE 47362
47340: PUSH
47341: LD_VAR 0 9
47345: PPUSH
47346: CALL_OW 266
47350: PUSH
47351: LD_INT 32
47353: PUSH
47354: LD_INT 31
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: IN
47361: OR
47362: IFFALSE 47174
47364: GO 47171
47366: POP
47367: POP
// end else
47368: GO 47754
// for j = 1 to x do
47370: LD_ADDR_VAR 0 9
47374: PUSH
47375: DOUBLE
47376: LD_INT 1
47378: DEC
47379: ST_TO_ADDR
47380: LD_VAR 0 13
47384: PUSH
47385: FOR_TO
47386: IFFALSE 47752
// begin InitHc ;
47388: CALL_OW 19
// if not f then
47392: LD_VAR 0 12
47396: NOT
47397: IFFALSE 47486
// begin PrepareHuman ( false , i , skill ) ;
47399: LD_INT 0
47401: PPUSH
47402: LD_VAR 0 8
47406: PPUSH
47407: LD_VAR 0 4
47411: PPUSH
47412: CALL_OW 380
// un := CreateHuman ;
47416: LD_ADDR_VAR 0 14
47420: PUSH
47421: CALL_OW 44
47425: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47426: LD_ADDR_VAR 0 7
47430: PUSH
47431: LD_VAR 0 7
47435: PPUSH
47436: LD_INT 1
47438: PPUSH
47439: LD_VAR 0 14
47443: PPUSH
47444: CALL_OW 2
47448: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47449: LD_VAR 0 14
47453: PPUSH
47454: LD_VAR 0 1
47458: PPUSH
47459: CALL_OW 250
47463: PPUSH
47464: LD_VAR 0 1
47468: PPUSH
47469: CALL_OW 251
47473: PPUSH
47474: LD_INT 10
47476: PPUSH
47477: LD_INT 0
47479: PPUSH
47480: CALL_OW 50
// continue ;
47484: GO 47385
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47486: LD_VAR 0 12
47490: PUSH
47491: LD_INT 1
47493: ARRAY
47494: PPUSH
47495: CALL_OW 313
47499: IFFALSE 47527
47501: PUSH
47502: LD_VAR 0 12
47506: PUSH
47507: LD_INT 1
47509: ARRAY
47510: PPUSH
47511: CALL_OW 266
47515: PUSH
47516: LD_INT 32
47518: PUSH
47519: LD_INT 31
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: IN
47526: AND
47527: IFTRUE 47548
47529: PUSH
47530: LD_VAR 0 12
47534: PUSH
47535: LD_INT 1
47537: ARRAY
47538: PPUSH
47539: CALL_OW 313
47543: PUSH
47544: LD_INT 6
47546: EQUAL
47547: OR
47548: IFFALSE 47568
// f := Delete ( f , 1 ) ;
47550: LD_ADDR_VAR 0 12
47554: PUSH
47555: LD_VAR 0 12
47559: PPUSH
47560: LD_INT 1
47562: PPUSH
47563: CALL_OW 3
47567: ST_TO_ADDR
// if not f then
47568: LD_VAR 0 12
47572: NOT
47573: IFFALSE 47591
// begin x := x + 2 ;
47575: LD_ADDR_VAR 0 13
47579: PUSH
47580: LD_VAR 0 13
47584: PUSH
47585: LD_INT 2
47587: PLUS
47588: ST_TO_ADDR
// continue ;
47589: GO 47385
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47591: LD_VAR 0 12
47595: PUSH
47596: LD_INT 1
47598: ARRAY
47599: PPUSH
47600: CALL_OW 266
47604: PUSH
47605: LD_INT 5
47607: EQUAL
47608: IFFALSE 47682
// begin if UnitsInside ( f [ 1 ] ) < 3 then
47610: LD_VAR 0 12
47614: PUSH
47615: LD_INT 1
47617: ARRAY
47618: PPUSH
47619: CALL_OW 313
47623: PUSH
47624: LD_INT 3
47626: LESS
47627: IFFALSE 47663
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47629: LD_INT 0
47631: PPUSH
47632: LD_INT 5
47634: PUSH
47635: LD_INT 8
47637: PUSH
47638: LD_INT 9
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: LIST
47645: PUSH
47646: LD_VAR 0 17
47650: ARRAY
47651: PPUSH
47652: LD_VAR 0 4
47656: PPUSH
47657: CALL_OW 380
47661: GO 47680
// PrepareHuman ( false , i , skill ) ;
47663: LD_INT 0
47665: PPUSH
47666: LD_VAR 0 8
47670: PPUSH
47671: LD_VAR 0 4
47675: PPUSH
47676: CALL_OW 380
// end else
47680: GO 47699
// PrepareHuman ( false , i , skill ) ;
47682: LD_INT 0
47684: PPUSH
47685: LD_VAR 0 8
47689: PPUSH
47690: LD_VAR 0 4
47694: PPUSH
47695: CALL_OW 380
// un := CreateHuman ;
47699: LD_ADDR_VAR 0 14
47703: PUSH
47704: CALL_OW 44
47708: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47709: LD_ADDR_VAR 0 7
47713: PUSH
47714: LD_VAR 0 7
47718: PPUSH
47719: LD_INT 1
47721: PPUSH
47722: LD_VAR 0 14
47726: PPUSH
47727: CALL_OW 2
47731: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
47732: LD_VAR 0 14
47736: PPUSH
47737: LD_VAR 0 12
47741: PUSH
47742: LD_INT 1
47744: ARRAY
47745: PPUSH
47746: CALL_OW 52
// end ;
47750: GO 47385
47752: POP
47753: POP
// end ;
47754: GO 46685
47756: POP
47757: POP
// result := result ^ buildings ;
47758: LD_ADDR_VAR 0 7
47762: PUSH
47763: LD_VAR 0 7
47767: PUSH
47768: LD_VAR 0 18
47772: ADD
47773: ST_TO_ADDR
// end else
47774: GO 47917
// begin for i = 1 to personel do
47776: LD_ADDR_VAR 0 8
47780: PUSH
47781: DOUBLE
47782: LD_INT 1
47784: DEC
47785: ST_TO_ADDR
47786: LD_VAR 0 6
47790: PUSH
47791: FOR_TO
47792: IFFALSE 47915
// begin if i > 4 then
47794: LD_VAR 0 8
47798: PUSH
47799: LD_INT 4
47801: GREATER
47802: IFFALSE 47806
// break ;
47804: GO 47915
// x := personel [ i ] ;
47806: LD_ADDR_VAR 0 13
47810: PUSH
47811: LD_VAR 0 6
47815: PUSH
47816: LD_VAR 0 8
47820: ARRAY
47821: ST_TO_ADDR
// if x = - 1 then
47822: LD_VAR 0 13
47826: PUSH
47827: LD_INT 1
47829: NEG
47830: EQUAL
47831: IFFALSE 47835
// continue ;
47833: GO 47791
// PrepareHuman ( false , i , skill ) ;
47835: LD_INT 0
47837: PPUSH
47838: LD_VAR 0 8
47842: PPUSH
47843: LD_VAR 0 4
47847: PPUSH
47848: CALL_OW 380
// un := CreateHuman ;
47852: LD_ADDR_VAR 0 14
47856: PUSH
47857: CALL_OW 44
47861: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47862: LD_VAR 0 14
47866: PPUSH
47867: LD_VAR 0 1
47871: PPUSH
47872: CALL_OW 250
47876: PPUSH
47877: LD_VAR 0 1
47881: PPUSH
47882: CALL_OW 251
47886: PPUSH
47887: LD_INT 10
47889: PPUSH
47890: LD_INT 0
47892: PPUSH
47893: CALL_OW 50
// result := result ^ un ;
47897: LD_ADDR_VAR 0 7
47901: PUSH
47902: LD_VAR 0 7
47906: PUSH
47907: LD_VAR 0 14
47911: ADD
47912: ST_TO_ADDR
// end ;
47913: GO 47791
47915: POP
47916: POP
// end ; end ;
47917: LD_VAR 0 7
47921: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47922: LD_INT 0
47924: PPUSH
47925: PPUSH
47926: PPUSH
47927: PPUSH
47928: PPUSH
47929: PPUSH
47930: PPUSH
47931: PPUSH
47932: PPUSH
47933: PPUSH
47934: PPUSH
47935: PPUSH
47936: PPUSH
47937: PPUSH
47938: PPUSH
47939: PPUSH
// result := false ;
47940: LD_ADDR_VAR 0 3
47944: PUSH
47945: LD_INT 0
47947: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47948: LD_VAR 0 1
47952: NOT
47953: IFTRUE 47978
47955: PUSH
47956: LD_VAR 0 1
47960: PPUSH
47961: CALL_OW 266
47965: PUSH
47966: LD_INT 32
47968: PUSH
47969: LD_INT 33
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: IN
47976: NOT
47977: OR
47978: IFFALSE 47982
// exit ;
47980: GO 49117
// nat := GetNation ( tower ) ;
47982: LD_ADDR_VAR 0 12
47986: PUSH
47987: LD_VAR 0 1
47991: PPUSH
47992: CALL_OW 248
47996: ST_TO_ADDR
// side := GetSide ( tower ) ;
47997: LD_ADDR_VAR 0 16
48001: PUSH
48002: LD_VAR 0 1
48006: PPUSH
48007: CALL_OW 255
48011: ST_TO_ADDR
// x := GetX ( tower ) ;
48012: LD_ADDR_VAR 0 10
48016: PUSH
48017: LD_VAR 0 1
48021: PPUSH
48022: CALL_OW 250
48026: ST_TO_ADDR
// y := GetY ( tower ) ;
48027: LD_ADDR_VAR 0 11
48031: PUSH
48032: LD_VAR 0 1
48036: PPUSH
48037: CALL_OW 251
48041: ST_TO_ADDR
// if not x or not y then
48042: LD_VAR 0 10
48046: NOT
48047: IFTRUE 48056
48049: PUSH
48050: LD_VAR 0 11
48054: NOT
48055: OR
48056: IFFALSE 48060
// exit ;
48058: GO 49117
// weapon := 0 ;
48060: LD_ADDR_VAR 0 18
48064: PUSH
48065: LD_INT 0
48067: ST_TO_ADDR
// fac_list := [ ] ;
48068: LD_ADDR_VAR 0 17
48072: PUSH
48073: EMPTY
48074: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48075: LD_ADDR_VAR 0 6
48079: PUSH
48080: LD_VAR 0 1
48084: PPUSH
48085: CALL_OW 274
48089: PPUSH
48090: LD_VAR 0 2
48094: PPUSH
48095: LD_INT 0
48097: PPUSH
48098: CALL 45652 0 3
48102: PPUSH
48103: LD_INT 30
48105: PUSH
48106: LD_INT 3
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PPUSH
48113: CALL_OW 72
48117: ST_TO_ADDR
// if not factories then
48118: LD_VAR 0 6
48122: NOT
48123: IFFALSE 48127
// exit ;
48125: GO 49117
// for i in factories do
48127: LD_ADDR_VAR 0 8
48131: PUSH
48132: LD_VAR 0 6
48136: PUSH
48137: FOR_IN
48138: IFFALSE 48163
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48140: LD_ADDR_VAR 0 17
48144: PUSH
48145: LD_VAR 0 17
48149: PUSH
48150: LD_VAR 0 8
48154: PPUSH
48155: CALL_OW 478
48159: UNION
48160: ST_TO_ADDR
48161: GO 48137
48163: POP
48164: POP
// if not fac_list then
48165: LD_VAR 0 17
48169: NOT
48170: IFFALSE 48174
// exit ;
48172: GO 49117
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48174: LD_ADDR_VAR 0 5
48178: PUSH
48179: LD_INT 4
48181: PUSH
48182: LD_INT 5
48184: PUSH
48185: LD_INT 9
48187: PUSH
48188: LD_INT 10
48190: PUSH
48191: LD_INT 6
48193: PUSH
48194: LD_INT 7
48196: PUSH
48197: LD_INT 11
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 27
48211: PUSH
48212: LD_INT 28
48214: PUSH
48215: LD_INT 26
48217: PUSH
48218: LD_INT 30
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 43
48229: PUSH
48230: LD_INT 44
48232: PUSH
48233: LD_INT 46
48235: PUSH
48236: LD_INT 45
48238: PUSH
48239: LD_INT 47
48241: PUSH
48242: LD_INT 49
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: LIST
48257: PUSH
48258: LD_VAR 0 12
48262: ARRAY
48263: ST_TO_ADDR
// list := list isect fac_list ;
48264: LD_ADDR_VAR 0 5
48268: PUSH
48269: LD_VAR 0 5
48273: PUSH
48274: LD_VAR 0 17
48278: ISECT
48279: ST_TO_ADDR
// if not list then
48280: LD_VAR 0 5
48284: NOT
48285: IFFALSE 48289
// exit ;
48287: GO 49117
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48289: LD_VAR 0 12
48293: PUSH
48294: LD_INT 3
48296: EQUAL
48297: IFFALSE 48309
48299: PUSH
48300: LD_INT 49
48302: PUSH
48303: LD_VAR 0 5
48307: IN
48308: AND
48309: IFFALSE 48329
48311: PUSH
48312: LD_INT 31
48314: PPUSH
48315: LD_VAR 0 16
48319: PPUSH
48320: CALL_OW 321
48324: PUSH
48325: LD_INT 2
48327: EQUAL
48328: AND
48329: IFFALSE 48389
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48331: LD_INT 22
48333: PUSH
48334: LD_VAR 0 16
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 35
48345: PUSH
48346: LD_INT 49
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 91
48355: PUSH
48356: LD_VAR 0 1
48360: PUSH
48361: LD_INT 10
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: LIST
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: LIST
48373: PPUSH
48374: CALL_OW 69
48378: NOT
48379: IFFALSE 48389
// weapon := ru_time_lapser ;
48381: LD_ADDR_VAR 0 18
48385: PUSH
48386: LD_INT 49
48388: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48389: LD_VAR 0 12
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: LD_INT 2
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: IN
48404: IFFALSE 48428
48406: PUSH
48407: LD_INT 11
48409: PUSH
48410: LD_VAR 0 5
48414: IN
48415: IFTRUE 48427
48417: PUSH
48418: LD_INT 30
48420: PUSH
48421: LD_VAR 0 5
48425: IN
48426: OR
48427: AND
48428: IFFALSE 48448
48430: PUSH
48431: LD_INT 6
48433: PPUSH
48434: LD_VAR 0 16
48438: PPUSH
48439: CALL_OW 321
48443: PUSH
48444: LD_INT 2
48446: EQUAL
48447: AND
48448: IFFALSE 48615
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48450: LD_INT 22
48452: PUSH
48453: LD_VAR 0 16
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 2
48464: PUSH
48465: LD_INT 35
48467: PUSH
48468: LD_INT 11
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 35
48477: PUSH
48478: LD_INT 30
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 91
48492: PUSH
48493: LD_VAR 0 1
48497: PUSH
48498: LD_INT 18
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: LIST
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: LIST
48510: PPUSH
48511: CALL_OW 69
48515: NOT
48516: IFFALSE 48592
48518: PUSH
48519: LD_INT 22
48521: PUSH
48522: LD_VAR 0 16
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 2
48533: PUSH
48534: LD_INT 30
48536: PUSH
48537: LD_INT 32
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 30
48546: PUSH
48547: LD_INT 33
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 91
48561: PUSH
48562: LD_VAR 0 1
48566: PUSH
48567: LD_INT 12
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: LIST
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: LIST
48579: PUSH
48580: EMPTY
48581: LIST
48582: PPUSH
48583: CALL_OW 69
48587: PUSH
48588: LD_INT 2
48590: GREATER
48591: AND
48592: IFFALSE 48615
// weapon := [ us_radar , ar_radar ] [ nat ] ;
48594: LD_ADDR_VAR 0 18
48598: PUSH
48599: LD_INT 11
48601: PUSH
48602: LD_INT 30
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_VAR 0 12
48613: ARRAY
48614: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
48615: LD_VAR 0 18
48619: NOT
48620: IFFALSE 48640
48622: PUSH
48623: LD_INT 40
48625: PPUSH
48626: LD_VAR 0 16
48630: PPUSH
48631: CALL_OW 321
48635: PUSH
48636: LD_INT 2
48638: EQUAL
48639: AND
48640: IFFALSE 48676
48642: PUSH
48643: LD_INT 7
48645: PUSH
48646: LD_VAR 0 5
48650: IN
48651: IFTRUE 48663
48653: PUSH
48654: LD_INT 28
48656: PUSH
48657: LD_VAR 0 5
48661: IN
48662: OR
48663: IFTRUE 48675
48665: PUSH
48666: LD_INT 45
48668: PUSH
48669: LD_VAR 0 5
48673: IN
48674: OR
48675: AND
48676: IFFALSE 48930
// begin hex := GetHexInfo ( x , y ) ;
48678: LD_ADDR_VAR 0 4
48682: PUSH
48683: LD_VAR 0 10
48687: PPUSH
48688: LD_VAR 0 11
48692: PPUSH
48693: CALL_OW 546
48697: ST_TO_ADDR
// if hex [ 1 ] then
48698: LD_VAR 0 4
48702: PUSH
48703: LD_INT 1
48705: ARRAY
48706: IFFALSE 48710
// exit ;
48708: GO 49117
// height := hex [ 2 ] ;
48710: LD_ADDR_VAR 0 15
48714: PUSH
48715: LD_VAR 0 4
48719: PUSH
48720: LD_INT 2
48722: ARRAY
48723: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
48724: LD_ADDR_VAR 0 14
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: LD_INT 2
48734: PUSH
48735: LD_INT 3
48737: PUSH
48738: LD_INT 5
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: ST_TO_ADDR
// for i in tmp do
48747: LD_ADDR_VAR 0 8
48751: PUSH
48752: LD_VAR 0 14
48756: PUSH
48757: FOR_IN
48758: IFFALSE 48928
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
48760: LD_ADDR_VAR 0 9
48764: PUSH
48765: LD_VAR 0 10
48769: PPUSH
48770: LD_VAR 0 8
48774: PPUSH
48775: LD_INT 5
48777: PPUSH
48778: CALL_OW 272
48782: PUSH
48783: LD_VAR 0 11
48787: PPUSH
48788: LD_VAR 0 8
48792: PPUSH
48793: LD_INT 5
48795: PPUSH
48796: CALL_OW 273
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48805: LD_VAR 0 9
48809: PUSH
48810: LD_INT 1
48812: ARRAY
48813: PPUSH
48814: LD_VAR 0 9
48818: PUSH
48819: LD_INT 2
48821: ARRAY
48822: PPUSH
48823: CALL_OW 488
48827: IFFALSE 48926
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
48829: LD_ADDR_VAR 0 4
48833: PUSH
48834: LD_VAR 0 9
48838: PUSH
48839: LD_INT 1
48841: ARRAY
48842: PPUSH
48843: LD_VAR 0 9
48847: PUSH
48848: LD_INT 2
48850: ARRAY
48851: PPUSH
48852: CALL_OW 546
48856: ST_TO_ADDR
// if hex [ 1 ] then
48857: LD_VAR 0 4
48861: PUSH
48862: LD_INT 1
48864: ARRAY
48865: IFFALSE 48869
// continue ;
48867: GO 48757
// h := hex [ 2 ] ;
48869: LD_ADDR_VAR 0 13
48873: PUSH
48874: LD_VAR 0 4
48878: PUSH
48879: LD_INT 2
48881: ARRAY
48882: ST_TO_ADDR
// if h + 7 < height then
48883: LD_VAR 0 13
48887: PUSH
48888: LD_INT 7
48890: PLUS
48891: PUSH
48892: LD_VAR 0 15
48896: LESS
48897: IFFALSE 48926
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48899: LD_ADDR_VAR 0 18
48903: PUSH
48904: LD_INT 7
48906: PUSH
48907: LD_INT 28
48909: PUSH
48910: LD_INT 45
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: LIST
48917: PUSH
48918: LD_VAR 0 12
48922: ARRAY
48923: ST_TO_ADDR
// break ;
48924: GO 48928
// end ; end ; end ;
48926: GO 48757
48928: POP
48929: POP
// end ; if not weapon then
48930: LD_VAR 0 18
48934: NOT
48935: IFFALSE 48995
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48937: LD_ADDR_VAR 0 5
48941: PUSH
48942: LD_VAR 0 5
48946: PUSH
48947: LD_INT 11
48949: PUSH
48950: LD_INT 30
48952: PUSH
48953: LD_INT 49
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: LIST
48960: DIFF
48961: ST_TO_ADDR
// if not list then
48962: LD_VAR 0 5
48966: NOT
48967: IFFALSE 48971
// exit ;
48969: GO 49117
// weapon := list [ rand ( 1 , list ) ] ;
48971: LD_ADDR_VAR 0 18
48975: PUSH
48976: LD_VAR 0 5
48980: PUSH
48981: LD_INT 1
48983: PPUSH
48984: LD_VAR 0 5
48988: PPUSH
48989: CALL_OW 12
48993: ARRAY
48994: ST_TO_ADDR
// end ; if weapon then
48995: LD_VAR 0 18
48999: IFFALSE 49117
// begin tmp := CostOfWeapon ( weapon ) ;
49001: LD_ADDR_VAR 0 14
49005: PUSH
49006: LD_VAR 0 18
49010: PPUSH
49011: CALL_OW 451
49015: ST_TO_ADDR
// j := GetBase ( tower ) ;
49016: LD_ADDR_VAR 0 9
49020: PUSH
49021: LD_VAR 0 1
49025: PPUSH
49026: CALL_OW 274
49030: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49031: LD_VAR 0 9
49035: PPUSH
49036: LD_INT 1
49038: PPUSH
49039: CALL_OW 275
49043: PUSH
49044: LD_VAR 0 14
49048: PUSH
49049: LD_INT 1
49051: ARRAY
49052: GREATEREQUAL
49053: IFFALSE 49079
49055: PUSH
49056: LD_VAR 0 9
49060: PPUSH
49061: LD_INT 2
49063: PPUSH
49064: CALL_OW 275
49068: PUSH
49069: LD_VAR 0 14
49073: PUSH
49074: LD_INT 2
49076: ARRAY
49077: GREATEREQUAL
49078: AND
49079: IFFALSE 49105
49081: PUSH
49082: LD_VAR 0 9
49086: PPUSH
49087: LD_INT 3
49089: PPUSH
49090: CALL_OW 275
49094: PUSH
49095: LD_VAR 0 14
49099: PUSH
49100: LD_INT 3
49102: ARRAY
49103: GREATEREQUAL
49104: AND
49105: IFFALSE 49117
// result := weapon ;
49107: LD_ADDR_VAR 0 3
49111: PUSH
49112: LD_VAR 0 18
49116: ST_TO_ADDR
// end ; end ;
49117: LD_VAR 0 3
49121: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49122: LD_INT 0
49124: PPUSH
49125: PPUSH
// result := true ;
49126: LD_ADDR_VAR 0 3
49130: PUSH
49131: LD_INT 1
49133: ST_TO_ADDR
// if array1 = array2 then
49134: LD_VAR 0 1
49138: PUSH
49139: LD_VAR 0 2
49143: EQUAL
49144: IFFALSE 49204
// begin for i = 1 to array1 do
49146: LD_ADDR_VAR 0 4
49150: PUSH
49151: DOUBLE
49152: LD_INT 1
49154: DEC
49155: ST_TO_ADDR
49156: LD_VAR 0 1
49160: PUSH
49161: FOR_TO
49162: IFFALSE 49200
// if array1 [ i ] <> array2 [ i ] then
49164: LD_VAR 0 1
49168: PUSH
49169: LD_VAR 0 4
49173: ARRAY
49174: PUSH
49175: LD_VAR 0 2
49179: PUSH
49180: LD_VAR 0 4
49184: ARRAY
49185: NONEQUAL
49186: IFFALSE 49198
// begin result := false ;
49188: LD_ADDR_VAR 0 3
49192: PUSH
49193: LD_INT 0
49195: ST_TO_ADDR
// break ;
49196: GO 49200
// end ;
49198: GO 49161
49200: POP
49201: POP
// end else
49202: GO 49212
// result := false ;
49204: LD_ADDR_VAR 0 3
49208: PUSH
49209: LD_INT 0
49211: ST_TO_ADDR
// end ;
49212: LD_VAR 0 3
49216: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49217: LD_INT 0
49219: PPUSH
49220: PPUSH
// if not array1 or not array2 then
49221: LD_VAR 0 1
49225: NOT
49226: IFTRUE 49235
49228: PUSH
49229: LD_VAR 0 2
49233: NOT
49234: OR
49235: IFFALSE 49239
// exit ;
49237: GO 49303
// result := true ;
49239: LD_ADDR_VAR 0 3
49243: PUSH
49244: LD_INT 1
49246: ST_TO_ADDR
// for i = 1 to array1 do
49247: LD_ADDR_VAR 0 4
49251: PUSH
49252: DOUBLE
49253: LD_INT 1
49255: DEC
49256: ST_TO_ADDR
49257: LD_VAR 0 1
49261: PUSH
49262: FOR_TO
49263: IFFALSE 49301
// if array1 [ i ] <> array2 [ i ] then
49265: LD_VAR 0 1
49269: PUSH
49270: LD_VAR 0 4
49274: ARRAY
49275: PUSH
49276: LD_VAR 0 2
49280: PUSH
49281: LD_VAR 0 4
49285: ARRAY
49286: NONEQUAL
49287: IFFALSE 49299
// begin result := false ;
49289: LD_ADDR_VAR 0 3
49293: PUSH
49294: LD_INT 0
49296: ST_TO_ADDR
// break ;
49297: GO 49301
// end ;
49299: GO 49262
49301: POP
49302: POP
// end ;
49303: LD_VAR 0 3
49307: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49308: LD_INT 0
49310: PPUSH
49311: PPUSH
49312: PPUSH
// pom := GetBase ( fac ) ;
49313: LD_ADDR_VAR 0 5
49317: PUSH
49318: LD_VAR 0 1
49322: PPUSH
49323: CALL_OW 274
49327: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49328: LD_ADDR_VAR 0 4
49332: PUSH
49333: LD_VAR 0 2
49337: PUSH
49338: LD_INT 1
49340: ARRAY
49341: PPUSH
49342: LD_VAR 0 2
49346: PUSH
49347: LD_INT 2
49349: ARRAY
49350: PPUSH
49351: LD_VAR 0 2
49355: PUSH
49356: LD_INT 3
49358: ARRAY
49359: PPUSH
49360: LD_VAR 0 2
49364: PUSH
49365: LD_INT 4
49367: ARRAY
49368: PPUSH
49369: CALL_OW 449
49373: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49374: LD_ADDR_VAR 0 3
49378: PUSH
49379: LD_VAR 0 5
49383: PPUSH
49384: LD_INT 1
49386: PPUSH
49387: CALL_OW 275
49391: PUSH
49392: LD_VAR 0 4
49396: PUSH
49397: LD_INT 1
49399: ARRAY
49400: GREATEREQUAL
49401: IFFALSE 49427
49403: PUSH
49404: LD_VAR 0 5
49408: PPUSH
49409: LD_INT 2
49411: PPUSH
49412: CALL_OW 275
49416: PUSH
49417: LD_VAR 0 4
49421: PUSH
49422: LD_INT 2
49424: ARRAY
49425: GREATEREQUAL
49426: AND
49427: IFFALSE 49453
49429: PUSH
49430: LD_VAR 0 5
49434: PPUSH
49435: LD_INT 3
49437: PPUSH
49438: CALL_OW 275
49442: PUSH
49443: LD_VAR 0 4
49447: PUSH
49448: LD_INT 3
49450: ARRAY
49451: GREATEREQUAL
49452: AND
49453: ST_TO_ADDR
// end ;
49454: LD_VAR 0 3
49458: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49459: LD_INT 0
49461: PPUSH
49462: PPUSH
49463: PPUSH
49464: PPUSH
// pom := GetBase ( building ) ;
49465: LD_ADDR_VAR 0 3
49469: PUSH
49470: LD_VAR 0 1
49474: PPUSH
49475: CALL_OW 274
49479: ST_TO_ADDR
// if not pom then
49480: LD_VAR 0 3
49484: NOT
49485: IFFALSE 49489
// exit ;
49487: GO 49663
// btype := GetBType ( building ) ;
49489: LD_ADDR_VAR 0 5
49493: PUSH
49494: LD_VAR 0 1
49498: PPUSH
49499: CALL_OW 266
49503: ST_TO_ADDR
// if btype = b_armoury then
49504: LD_VAR 0 5
49508: PUSH
49509: LD_INT 4
49511: EQUAL
49512: IFFALSE 49522
// btype := b_barracks ;
49514: LD_ADDR_VAR 0 5
49518: PUSH
49519: LD_INT 5
49521: ST_TO_ADDR
// if btype = b_depot then
49522: LD_VAR 0 5
49526: PUSH
49527: LD_INT 0
49529: EQUAL
49530: IFFALSE 49540
// btype := b_warehouse ;
49532: LD_ADDR_VAR 0 5
49536: PUSH
49537: LD_INT 1
49539: ST_TO_ADDR
// if btype = b_workshop then
49540: LD_VAR 0 5
49544: PUSH
49545: LD_INT 2
49547: EQUAL
49548: IFFALSE 49558
// btype := b_factory ;
49550: LD_ADDR_VAR 0 5
49554: PUSH
49555: LD_INT 3
49557: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49558: LD_ADDR_VAR 0 4
49562: PUSH
49563: LD_VAR 0 5
49567: PPUSH
49568: LD_VAR 0 1
49572: PPUSH
49573: CALL_OW 248
49577: PPUSH
49578: CALL_OW 450
49582: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49583: LD_ADDR_VAR 0 2
49587: PUSH
49588: LD_VAR 0 3
49592: PPUSH
49593: LD_INT 1
49595: PPUSH
49596: CALL_OW 275
49600: PUSH
49601: LD_VAR 0 4
49605: PUSH
49606: LD_INT 1
49608: ARRAY
49609: GREATEREQUAL
49610: IFFALSE 49636
49612: PUSH
49613: LD_VAR 0 3
49617: PPUSH
49618: LD_INT 2
49620: PPUSH
49621: CALL_OW 275
49625: PUSH
49626: LD_VAR 0 4
49630: PUSH
49631: LD_INT 2
49633: ARRAY
49634: GREATEREQUAL
49635: AND
49636: IFFALSE 49662
49638: PUSH
49639: LD_VAR 0 3
49643: PPUSH
49644: LD_INT 3
49646: PPUSH
49647: CALL_OW 275
49651: PUSH
49652: LD_VAR 0 4
49656: PUSH
49657: LD_INT 3
49659: ARRAY
49660: GREATEREQUAL
49661: AND
49662: ST_TO_ADDR
// end ;
49663: LD_VAR 0 2
49667: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
49668: LD_INT 0
49670: PPUSH
49671: PPUSH
49672: PPUSH
// pom := GetBase ( building ) ;
49673: LD_ADDR_VAR 0 4
49677: PUSH
49678: LD_VAR 0 1
49682: PPUSH
49683: CALL_OW 274
49687: ST_TO_ADDR
// if not pom then
49688: LD_VAR 0 4
49692: NOT
49693: IFFALSE 49697
// exit ;
49695: GO 49802
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49697: LD_ADDR_VAR 0 5
49701: PUSH
49702: LD_VAR 0 2
49706: PPUSH
49707: LD_VAR 0 1
49711: PPUSH
49712: CALL_OW 248
49716: PPUSH
49717: CALL_OW 450
49721: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49722: LD_ADDR_VAR 0 3
49726: PUSH
49727: LD_VAR 0 4
49731: PPUSH
49732: LD_INT 1
49734: PPUSH
49735: CALL_OW 275
49739: PUSH
49740: LD_VAR 0 5
49744: PUSH
49745: LD_INT 1
49747: ARRAY
49748: GREATEREQUAL
49749: IFFALSE 49775
49751: PUSH
49752: LD_VAR 0 4
49756: PPUSH
49757: LD_INT 2
49759: PPUSH
49760: CALL_OW 275
49764: PUSH
49765: LD_VAR 0 5
49769: PUSH
49770: LD_INT 2
49772: ARRAY
49773: GREATEREQUAL
49774: AND
49775: IFFALSE 49801
49777: PUSH
49778: LD_VAR 0 4
49782: PPUSH
49783: LD_INT 3
49785: PPUSH
49786: CALL_OW 275
49790: PUSH
49791: LD_VAR 0 5
49795: PUSH
49796: LD_INT 3
49798: ARRAY
49799: GREATEREQUAL
49800: AND
49801: ST_TO_ADDR
// end ;
49802: LD_VAR 0 3
49806: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
49807: LD_INT 0
49809: PPUSH
49810: PPUSH
49811: PPUSH
49812: PPUSH
49813: PPUSH
49814: PPUSH
49815: PPUSH
49816: PPUSH
49817: PPUSH
49818: PPUSH
49819: PPUSH
// result := false ;
49820: LD_ADDR_VAR 0 8
49824: PUSH
49825: LD_INT 0
49827: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
49828: LD_VAR 0 5
49832: NOT
49833: IFTRUE 49842
49835: PUSH
49836: LD_VAR 0 1
49840: NOT
49841: OR
49842: IFTRUE 49851
49844: PUSH
49845: LD_VAR 0 2
49849: NOT
49850: OR
49851: IFTRUE 49860
49853: PUSH
49854: LD_VAR 0 3
49858: NOT
49859: OR
49860: IFFALSE 49864
// exit ;
49862: GO 50690
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
49864: LD_ADDR_VAR 0 14
49868: PUSH
49869: LD_VAR 0 1
49873: PPUSH
49874: LD_VAR 0 2
49878: PPUSH
49879: LD_VAR 0 3
49883: PPUSH
49884: LD_VAR 0 4
49888: PPUSH
49889: LD_VAR 0 5
49893: PUSH
49894: LD_INT 1
49896: ARRAY
49897: PPUSH
49898: CALL_OW 248
49902: PPUSH
49903: LD_INT 0
49905: PPUSH
49906: CALL 51971 0 6
49910: ST_TO_ADDR
// if not hexes then
49911: LD_VAR 0 14
49915: NOT
49916: IFFALSE 49920
// exit ;
49918: GO 50690
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49920: LD_ADDR_VAR 0 17
49924: PUSH
49925: LD_VAR 0 5
49929: PPUSH
49930: LD_INT 22
49932: PUSH
49933: LD_VAR 0 13
49937: PPUSH
49938: CALL_OW 255
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 2
49949: PUSH
49950: LD_INT 30
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 30
49962: PUSH
49963: LD_INT 1
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: LIST
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PPUSH
49979: CALL_OW 72
49983: ST_TO_ADDR
// for i = 1 to hexes do
49984: LD_ADDR_VAR 0 9
49988: PUSH
49989: DOUBLE
49990: LD_INT 1
49992: DEC
49993: ST_TO_ADDR
49994: LD_VAR 0 14
49998: PUSH
49999: FOR_TO
50000: IFFALSE 50688
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50002: LD_ADDR_VAR 0 13
50006: PUSH
50007: LD_VAR 0 14
50011: PUSH
50012: LD_VAR 0 9
50016: ARRAY
50017: PUSH
50018: LD_INT 1
50020: ARRAY
50021: PPUSH
50022: LD_VAR 0 14
50026: PUSH
50027: LD_VAR 0 9
50031: ARRAY
50032: PUSH
50033: LD_INT 2
50035: ARRAY
50036: PPUSH
50037: CALL_OW 428
50041: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50042: LD_VAR 0 14
50046: PUSH
50047: LD_VAR 0 9
50051: ARRAY
50052: PUSH
50053: LD_INT 1
50055: ARRAY
50056: PPUSH
50057: LD_VAR 0 14
50061: PUSH
50062: LD_VAR 0 9
50066: ARRAY
50067: PUSH
50068: LD_INT 2
50070: ARRAY
50071: PPUSH
50072: CALL_OW 351
50076: IFTRUE 50115
50078: PUSH
50079: LD_VAR 0 14
50083: PUSH
50084: LD_VAR 0 9
50088: ARRAY
50089: PUSH
50090: LD_INT 1
50092: ARRAY
50093: PPUSH
50094: LD_VAR 0 14
50098: PUSH
50099: LD_VAR 0 9
50103: ARRAY
50104: PUSH
50105: LD_INT 2
50107: ARRAY
50108: PPUSH
50109: CALL_OW 488
50113: NOT
50114: OR
50115: IFTRUE 50132
50117: PUSH
50118: LD_VAR 0 13
50122: PPUSH
50123: CALL_OW 247
50127: PUSH
50128: LD_INT 3
50130: EQUAL
50131: OR
50132: IFFALSE 50138
// exit ;
50134: POP
50135: POP
50136: GO 50690
// if not tmp then
50138: LD_VAR 0 13
50142: NOT
50143: IFFALSE 50147
// continue ;
50145: GO 49999
// result := true ;
50147: LD_ADDR_VAR 0 8
50151: PUSH
50152: LD_INT 1
50154: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50155: LD_VAR 0 6
50159: IFFALSE 50176
50161: PUSH
50162: LD_VAR 0 13
50166: PPUSH
50167: CALL_OW 247
50171: PUSH
50172: LD_INT 2
50174: EQUAL
50175: AND
50176: IFFALSE 50193
50178: PUSH
50179: LD_VAR 0 13
50183: PPUSH
50184: CALL_OW 263
50188: PUSH
50189: LD_INT 1
50191: EQUAL
50192: AND
50193: IFFALSE 50357
// begin if IsDrivenBy ( tmp ) then
50195: LD_VAR 0 13
50199: PPUSH
50200: CALL_OW 311
50204: IFFALSE 50208
// continue ;
50206: GO 49999
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50208: LD_VAR 0 6
50212: PPUSH
50213: LD_INT 3
50215: PUSH
50216: LD_INT 60
50218: PUSH
50219: EMPTY
50220: LIST
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 3
50228: PUSH
50229: LD_INT 55
50231: PUSH
50232: EMPTY
50233: LIST
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PPUSH
50243: CALL_OW 72
50247: IFFALSE 50355
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50249: LD_ADDR_VAR 0 18
50253: PUSH
50254: LD_VAR 0 6
50258: PPUSH
50259: LD_INT 3
50261: PUSH
50262: LD_INT 60
50264: PUSH
50265: EMPTY
50266: LIST
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 3
50274: PUSH
50275: LD_INT 55
50277: PUSH
50278: EMPTY
50279: LIST
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PPUSH
50289: CALL_OW 72
50293: PUSH
50294: LD_INT 1
50296: ARRAY
50297: ST_TO_ADDR
// if IsInUnit ( driver ) then
50298: LD_VAR 0 18
50302: PPUSH
50303: CALL_OW 310
50307: IFFALSE 50318
// ComExit ( driver ) ;
50309: LD_VAR 0 18
50313: PPUSH
50314: CALL 75961 0 1
// AddComEnterUnit ( driver , tmp ) ;
50318: LD_VAR 0 18
50322: PPUSH
50323: LD_VAR 0 13
50327: PPUSH
50328: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50332: LD_VAR 0 18
50336: PPUSH
50337: LD_VAR 0 7
50341: PPUSH
50342: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50346: LD_VAR 0 18
50350: PPUSH
50351: CALL_OW 181
// end ; continue ;
50355: GO 49999
// end ; if not cleaners or not tmp in cleaners then
50357: LD_VAR 0 6
50361: NOT
50362: IFTRUE 50377
50364: PUSH
50365: LD_VAR 0 13
50369: PUSH
50370: LD_VAR 0 6
50374: IN
50375: NOT
50376: OR
50377: IFFALSE 50686
// begin if dep then
50379: LD_VAR 0 17
50383: IFFALSE 50519
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50385: LD_ADDR_VAR 0 16
50389: PUSH
50390: LD_VAR 0 17
50394: PUSH
50395: LD_INT 1
50397: ARRAY
50398: PPUSH
50399: CALL_OW 250
50403: PPUSH
50404: LD_VAR 0 17
50408: PUSH
50409: LD_INT 1
50411: ARRAY
50412: PPUSH
50413: CALL_OW 254
50417: PPUSH
50418: LD_INT 5
50420: PPUSH
50421: CALL_OW 272
50425: PUSH
50426: LD_VAR 0 17
50430: PUSH
50431: LD_INT 1
50433: ARRAY
50434: PPUSH
50435: CALL_OW 251
50439: PPUSH
50440: LD_VAR 0 17
50444: PUSH
50445: LD_INT 1
50447: ARRAY
50448: PPUSH
50449: CALL_OW 254
50453: PPUSH
50454: LD_INT 5
50456: PPUSH
50457: CALL_OW 273
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50466: LD_VAR 0 16
50470: PUSH
50471: LD_INT 1
50473: ARRAY
50474: PPUSH
50475: LD_VAR 0 16
50479: PUSH
50480: LD_INT 2
50482: ARRAY
50483: PPUSH
50484: CALL_OW 488
50488: IFFALSE 50519
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50490: LD_VAR 0 13
50494: PPUSH
50495: LD_VAR 0 16
50499: PUSH
50500: LD_INT 1
50502: ARRAY
50503: PPUSH
50504: LD_VAR 0 16
50508: PUSH
50509: LD_INT 2
50511: ARRAY
50512: PPUSH
50513: CALL_OW 111
// continue ;
50517: GO 49999
// end ; end ; r := GetDir ( tmp ) ;
50519: LD_ADDR_VAR 0 15
50523: PUSH
50524: LD_VAR 0 13
50528: PPUSH
50529: CALL_OW 254
50533: ST_TO_ADDR
// if r = 5 then
50534: LD_VAR 0 15
50538: PUSH
50539: LD_INT 5
50541: EQUAL
50542: IFFALSE 50552
// r := 0 ;
50544: LD_ADDR_VAR 0 15
50548: PUSH
50549: LD_INT 0
50551: ST_TO_ADDR
// for j = r to 5 do
50552: LD_ADDR_VAR 0 10
50556: PUSH
50557: DOUBLE
50558: LD_VAR 0 15
50562: DEC
50563: ST_TO_ADDR
50564: LD_INT 5
50566: PUSH
50567: FOR_TO
50568: IFFALSE 50684
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50570: LD_ADDR_VAR 0 11
50574: PUSH
50575: LD_VAR 0 13
50579: PPUSH
50580: CALL_OW 250
50584: PPUSH
50585: LD_VAR 0 10
50589: PPUSH
50590: LD_INT 2
50592: PPUSH
50593: CALL_OW 272
50597: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50598: LD_ADDR_VAR 0 12
50602: PUSH
50603: LD_VAR 0 13
50607: PPUSH
50608: CALL_OW 251
50612: PPUSH
50613: LD_VAR 0 10
50617: PPUSH
50618: LD_INT 2
50620: PPUSH
50621: CALL_OW 273
50625: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50626: LD_VAR 0 11
50630: PPUSH
50631: LD_VAR 0 12
50635: PPUSH
50636: CALL_OW 488
50640: IFFALSE 50659
50642: PUSH
50643: LD_VAR 0 11
50647: PPUSH
50648: LD_VAR 0 12
50652: PPUSH
50653: CALL_OW 428
50657: NOT
50658: AND
50659: IFFALSE 50682
// begin ComMoveXY ( tmp , _x , _y ) ;
50661: LD_VAR 0 13
50665: PPUSH
50666: LD_VAR 0 11
50670: PPUSH
50671: LD_VAR 0 12
50675: PPUSH
50676: CALL_OW 111
// break ;
50680: GO 50684
// end ; end ;
50682: GO 50567
50684: POP
50685: POP
// end ; end ;
50686: GO 49999
50688: POP
50689: POP
// end ;
50690: LD_VAR 0 8
50694: RET
// export function BuildingTechInvented ( side , btype ) ; begin
50695: LD_INT 0
50697: PPUSH
// result := true ;
50698: LD_ADDR_VAR 0 3
50702: PUSH
50703: LD_INT 1
50705: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
50706: LD_VAR 0 2
50710: PUSH
50711: LD_INT 24
50713: DOUBLE
50714: EQUAL
50715: IFTRUE 50725
50717: LD_INT 33
50719: DOUBLE
50720: EQUAL
50721: IFTRUE 50725
50723: GO 50750
50725: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
50726: LD_ADDR_VAR 0 3
50730: PUSH
50731: LD_INT 32
50733: PPUSH
50734: LD_VAR 0 1
50738: PPUSH
50739: CALL_OW 321
50743: PUSH
50744: LD_INT 2
50746: EQUAL
50747: ST_TO_ADDR
50748: GO 51066
50750: LD_INT 20
50752: DOUBLE
50753: EQUAL
50754: IFTRUE 50758
50756: GO 50783
50758: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
50759: LD_ADDR_VAR 0 3
50763: PUSH
50764: LD_INT 6
50766: PPUSH
50767: LD_VAR 0 1
50771: PPUSH
50772: CALL_OW 321
50776: PUSH
50777: LD_INT 2
50779: EQUAL
50780: ST_TO_ADDR
50781: GO 51066
50783: LD_INT 22
50785: DOUBLE
50786: EQUAL
50787: IFTRUE 50797
50789: LD_INT 36
50791: DOUBLE
50792: EQUAL
50793: IFTRUE 50797
50795: GO 50822
50797: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
50798: LD_ADDR_VAR 0 3
50802: PUSH
50803: LD_INT 15
50805: PPUSH
50806: LD_VAR 0 1
50810: PPUSH
50811: CALL_OW 321
50815: PUSH
50816: LD_INT 2
50818: EQUAL
50819: ST_TO_ADDR
50820: GO 51066
50822: LD_INT 30
50824: DOUBLE
50825: EQUAL
50826: IFTRUE 50830
50828: GO 50855
50830: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
50831: LD_ADDR_VAR 0 3
50835: PUSH
50836: LD_INT 20
50838: PPUSH
50839: LD_VAR 0 1
50843: PPUSH
50844: CALL_OW 321
50848: PUSH
50849: LD_INT 2
50851: EQUAL
50852: ST_TO_ADDR
50853: GO 51066
50855: LD_INT 28
50857: DOUBLE
50858: EQUAL
50859: IFTRUE 50869
50861: LD_INT 21
50863: DOUBLE
50864: EQUAL
50865: IFTRUE 50869
50867: GO 50894
50869: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
50870: LD_ADDR_VAR 0 3
50874: PUSH
50875: LD_INT 21
50877: PPUSH
50878: LD_VAR 0 1
50882: PPUSH
50883: CALL_OW 321
50887: PUSH
50888: LD_INT 2
50890: EQUAL
50891: ST_TO_ADDR
50892: GO 51066
50894: LD_INT 16
50896: DOUBLE
50897: EQUAL
50898: IFTRUE 50902
50900: GO 50927
50902: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
50903: LD_ADDR_VAR 0 3
50907: PUSH
50908: LD_INT 84
50910: PPUSH
50911: LD_VAR 0 1
50915: PPUSH
50916: CALL_OW 321
50920: PUSH
50921: LD_INT 2
50923: EQUAL
50924: ST_TO_ADDR
50925: GO 51066
50927: LD_INT 19
50929: DOUBLE
50930: EQUAL
50931: IFTRUE 50941
50933: LD_INT 23
50935: DOUBLE
50936: EQUAL
50937: IFTRUE 50941
50939: GO 50966
50941: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50942: LD_ADDR_VAR 0 3
50946: PUSH
50947: LD_INT 83
50949: PPUSH
50950: LD_VAR 0 1
50954: PPUSH
50955: CALL_OW 321
50959: PUSH
50960: LD_INT 2
50962: EQUAL
50963: ST_TO_ADDR
50964: GO 51066
50966: LD_INT 17
50968: DOUBLE
50969: EQUAL
50970: IFTRUE 50974
50972: GO 50999
50974: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50975: LD_ADDR_VAR 0 3
50979: PUSH
50980: LD_INT 39
50982: PPUSH
50983: LD_VAR 0 1
50987: PPUSH
50988: CALL_OW 321
50992: PUSH
50993: LD_INT 2
50995: EQUAL
50996: ST_TO_ADDR
50997: GO 51066
50999: LD_INT 18
51001: DOUBLE
51002: EQUAL
51003: IFTRUE 51007
51005: GO 51032
51007: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51008: LD_ADDR_VAR 0 3
51012: PUSH
51013: LD_INT 40
51015: PPUSH
51016: LD_VAR 0 1
51020: PPUSH
51021: CALL_OW 321
51025: PUSH
51026: LD_INT 2
51028: EQUAL
51029: ST_TO_ADDR
51030: GO 51066
51032: LD_INT 27
51034: DOUBLE
51035: EQUAL
51036: IFTRUE 51040
51038: GO 51065
51040: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51041: LD_ADDR_VAR 0 3
51045: PUSH
51046: LD_INT 35
51048: PPUSH
51049: LD_VAR 0 1
51053: PPUSH
51054: CALL_OW 321
51058: PUSH
51059: LD_INT 2
51061: EQUAL
51062: ST_TO_ADDR
51063: GO 51066
51065: POP
// end ;
51066: LD_VAR 0 3
51070: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51071: LD_INT 0
51073: PPUSH
51074: PPUSH
51075: PPUSH
51076: PPUSH
51077: PPUSH
51078: PPUSH
51079: PPUSH
51080: PPUSH
51081: PPUSH
51082: PPUSH
51083: PPUSH
// result := false ;
51084: LD_ADDR_VAR 0 6
51088: PUSH
51089: LD_INT 0
51091: ST_TO_ADDR
// if btype = b_depot then
51092: LD_VAR 0 2
51096: PUSH
51097: LD_INT 0
51099: EQUAL
51100: IFFALSE 51112
// begin result := true ;
51102: LD_ADDR_VAR 0 6
51106: PUSH
51107: LD_INT 1
51109: ST_TO_ADDR
// exit ;
51110: GO 51966
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51112: LD_VAR 0 1
51116: NOT
51117: IFTRUE 51142
51119: PUSH
51120: LD_VAR 0 1
51124: PPUSH
51125: CALL_OW 266
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: LD_INT 1
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: IN
51140: NOT
51141: OR
51142: IFTRUE 51151
51144: PUSH
51145: LD_VAR 0 2
51149: NOT
51150: OR
51151: IFTRUE 51187
51153: PUSH
51154: LD_VAR 0 5
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: LD_INT 2
51167: PUSH
51168: LD_INT 3
51170: PUSH
51171: LD_INT 4
51173: PUSH
51174: LD_INT 5
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: IN
51185: NOT
51186: OR
51187: IFTRUE 51206
51189: PUSH
51190: LD_VAR 0 3
51194: PPUSH
51195: LD_VAR 0 4
51199: PPUSH
51200: CALL_OW 488
51204: NOT
51205: OR
51206: IFFALSE 51210
// exit ;
51208: GO 51966
// side := GetSide ( depot ) ;
51210: LD_ADDR_VAR 0 9
51214: PUSH
51215: LD_VAR 0 1
51219: PPUSH
51220: CALL_OW 255
51224: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51225: LD_VAR 0 9
51229: PPUSH
51230: LD_VAR 0 2
51234: PPUSH
51235: CALL 50695 0 2
51239: NOT
51240: IFFALSE 51244
// exit ;
51242: GO 51966
// pom := GetBase ( depot ) ;
51244: LD_ADDR_VAR 0 10
51248: PUSH
51249: LD_VAR 0 1
51253: PPUSH
51254: CALL_OW 274
51258: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51259: LD_ADDR_VAR 0 11
51263: PUSH
51264: LD_VAR 0 2
51268: PPUSH
51269: LD_VAR 0 1
51273: PPUSH
51274: CALL_OW 248
51278: PPUSH
51279: CALL_OW 450
51283: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51284: LD_VAR 0 10
51288: PPUSH
51289: LD_INT 1
51291: PPUSH
51292: CALL_OW 275
51296: PUSH
51297: LD_VAR 0 11
51301: PUSH
51302: LD_INT 1
51304: ARRAY
51305: GREATEREQUAL
51306: IFFALSE 51332
51308: PUSH
51309: LD_VAR 0 10
51313: PPUSH
51314: LD_INT 2
51316: PPUSH
51317: CALL_OW 275
51321: PUSH
51322: LD_VAR 0 11
51326: PUSH
51327: LD_INT 2
51329: ARRAY
51330: GREATEREQUAL
51331: AND
51332: IFFALSE 51358
51334: PUSH
51335: LD_VAR 0 10
51339: PPUSH
51340: LD_INT 3
51342: PPUSH
51343: CALL_OW 275
51347: PUSH
51348: LD_VAR 0 11
51352: PUSH
51353: LD_INT 3
51355: ARRAY
51356: GREATEREQUAL
51357: AND
51358: NOT
51359: IFFALSE 51363
// exit ;
51361: GO 51966
// if GetBType ( depot ) = b_depot then
51363: LD_VAR 0 1
51367: PPUSH
51368: CALL_OW 266
51372: PUSH
51373: LD_INT 0
51375: EQUAL
51376: IFFALSE 51388
// dist := 28 else
51378: LD_ADDR_VAR 0 14
51382: PUSH
51383: LD_INT 28
51385: ST_TO_ADDR
51386: GO 51396
// dist := 36 ;
51388: LD_ADDR_VAR 0 14
51392: PUSH
51393: LD_INT 36
51395: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51396: LD_VAR 0 1
51400: PPUSH
51401: LD_VAR 0 3
51405: PPUSH
51406: LD_VAR 0 4
51410: PPUSH
51411: CALL_OW 297
51415: PUSH
51416: LD_VAR 0 14
51420: GREATER
51421: IFFALSE 51425
// exit ;
51423: GO 51966
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51425: LD_ADDR_VAR 0 12
51429: PUSH
51430: LD_VAR 0 2
51434: PPUSH
51435: LD_VAR 0 3
51439: PPUSH
51440: LD_VAR 0 4
51444: PPUSH
51445: LD_VAR 0 5
51449: PPUSH
51450: LD_VAR 0 1
51454: PPUSH
51455: CALL_OW 248
51459: PPUSH
51460: LD_INT 0
51462: PPUSH
51463: CALL 51971 0 6
51467: ST_TO_ADDR
// if not hexes then
51468: LD_VAR 0 12
51472: NOT
51473: IFFALSE 51477
// exit ;
51475: GO 51966
// hex := GetHexInfo ( x , y ) ;
51477: LD_ADDR_VAR 0 15
51481: PUSH
51482: LD_VAR 0 3
51486: PPUSH
51487: LD_VAR 0 4
51491: PPUSH
51492: CALL_OW 546
51496: ST_TO_ADDR
// if hex [ 1 ] then
51497: LD_VAR 0 15
51501: PUSH
51502: LD_INT 1
51504: ARRAY
51505: IFFALSE 51509
// exit ;
51507: GO 51966
// height := hex [ 2 ] ;
51509: LD_ADDR_VAR 0 13
51513: PUSH
51514: LD_VAR 0 15
51518: PUSH
51519: LD_INT 2
51521: ARRAY
51522: ST_TO_ADDR
// for i = 1 to hexes do
51523: LD_ADDR_VAR 0 7
51527: PUSH
51528: DOUBLE
51529: LD_INT 1
51531: DEC
51532: ST_TO_ADDR
51533: LD_VAR 0 12
51537: PUSH
51538: FOR_TO
51539: IFFALSE 51883
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51541: LD_VAR 0 12
51545: PUSH
51546: LD_VAR 0 7
51550: ARRAY
51551: PUSH
51552: LD_INT 1
51554: ARRAY
51555: PPUSH
51556: LD_VAR 0 12
51560: PUSH
51561: LD_VAR 0 7
51565: ARRAY
51566: PUSH
51567: LD_INT 2
51569: ARRAY
51570: PPUSH
51571: CALL_OW 488
51575: NOT
51576: IFTRUE 51618
51578: PUSH
51579: LD_VAR 0 12
51583: PUSH
51584: LD_VAR 0 7
51588: ARRAY
51589: PUSH
51590: LD_INT 1
51592: ARRAY
51593: PPUSH
51594: LD_VAR 0 12
51598: PUSH
51599: LD_VAR 0 7
51603: ARRAY
51604: PUSH
51605: LD_INT 2
51607: ARRAY
51608: PPUSH
51609: CALL_OW 428
51613: PUSH
51614: LD_INT 0
51616: GREATER
51617: OR
51618: IFTRUE 51656
51620: PUSH
51621: LD_VAR 0 12
51625: PUSH
51626: LD_VAR 0 7
51630: ARRAY
51631: PUSH
51632: LD_INT 1
51634: ARRAY
51635: PPUSH
51636: LD_VAR 0 12
51640: PUSH
51641: LD_VAR 0 7
51645: ARRAY
51646: PUSH
51647: LD_INT 2
51649: ARRAY
51650: PPUSH
51651: CALL_OW 351
51655: OR
51656: IFFALSE 51662
// exit ;
51658: POP
51659: POP
51660: GO 51966
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51662: LD_ADDR_VAR 0 8
51666: PUSH
51667: LD_VAR 0 12
51671: PUSH
51672: LD_VAR 0 7
51676: ARRAY
51677: PUSH
51678: LD_INT 1
51680: ARRAY
51681: PPUSH
51682: LD_VAR 0 12
51686: PUSH
51687: LD_VAR 0 7
51691: ARRAY
51692: PUSH
51693: LD_INT 2
51695: ARRAY
51696: PPUSH
51697: CALL_OW 546
51701: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
51702: LD_VAR 0 8
51706: PUSH
51707: LD_INT 1
51709: ARRAY
51710: IFTRUE 51732
51712: PUSH
51713: LD_VAR 0 8
51717: PUSH
51718: LD_INT 2
51720: ARRAY
51721: PUSH
51722: LD_VAR 0 13
51726: PUSH
51727: LD_INT 2
51729: PLUS
51730: GREATER
51731: OR
51732: IFTRUE 51754
51734: PUSH
51735: LD_VAR 0 8
51739: PUSH
51740: LD_INT 2
51742: ARRAY
51743: PUSH
51744: LD_VAR 0 13
51748: PUSH
51749: LD_INT 2
51751: MINUS
51752: LESS
51753: OR
51754: IFTRUE 51822
51756: PUSH
51757: LD_VAR 0 8
51761: PUSH
51762: LD_INT 3
51764: ARRAY
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: LD_INT 8
51771: PUSH
51772: LD_INT 9
51774: PUSH
51775: LD_INT 10
51777: PUSH
51778: LD_INT 11
51780: PUSH
51781: LD_INT 12
51783: PUSH
51784: LD_INT 13
51786: PUSH
51787: LD_INT 16
51789: PUSH
51790: LD_INT 17
51792: PUSH
51793: LD_INT 18
51795: PUSH
51796: LD_INT 19
51798: PUSH
51799: LD_INT 20
51801: PUSH
51802: LD_INT 21
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: IN
51820: NOT
51821: OR
51822: IFTRUE 51835
51824: PUSH
51825: LD_VAR 0 8
51829: PUSH
51830: LD_INT 5
51832: ARRAY
51833: NOT
51834: OR
51835: IFTRUE 51875
51837: PUSH
51838: LD_VAR 0 8
51842: PUSH
51843: LD_INT 6
51845: ARRAY
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: LD_INT 2
51852: PUSH
51853: LD_INT 7
51855: PUSH
51856: LD_INT 9
51858: PUSH
51859: LD_INT 10
51861: PUSH
51862: LD_INT 11
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: IN
51873: NOT
51874: OR
51875: IFFALSE 51881
// exit ;
51877: POP
51878: POP
51879: GO 51966
// end ;
51881: GO 51538
51883: POP
51884: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
51885: LD_VAR 0 9
51889: PPUSH
51890: LD_VAR 0 3
51894: PPUSH
51895: LD_VAR 0 4
51899: PPUSH
51900: LD_INT 20
51902: PPUSH
51903: CALL 43785 0 4
51907: PUSH
51908: LD_INT 4
51910: ARRAY
51911: IFFALSE 51915
// exit ;
51913: GO 51966
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
51915: LD_VAR 0 2
51919: PUSH
51920: LD_INT 29
51922: PUSH
51923: LD_INT 30
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: IN
51930: IFFALSE 51954
51932: PUSH
51933: LD_VAR 0 3
51937: PPUSH
51938: LD_VAR 0 4
51942: PPUSH
51943: LD_VAR 0 9
51947: PPUSH
51948: CALL_OW 440
51952: NOT
51953: AND
51954: IFFALSE 51958
// exit ;
51956: GO 51966
// result := true ;
51958: LD_ADDR_VAR 0 6
51962: PUSH
51963: LD_INT 1
51965: ST_TO_ADDR
// end ;
51966: LD_VAR 0 6
51970: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51971: LD_INT 0
51973: PPUSH
51974: PPUSH
51975: PPUSH
51976: PPUSH
51977: PPUSH
51978: PPUSH
51979: PPUSH
51980: PPUSH
51981: PPUSH
51982: PPUSH
51983: PPUSH
51984: PPUSH
51985: PPUSH
51986: PPUSH
51987: PPUSH
51988: PPUSH
51989: PPUSH
51990: PPUSH
51991: PPUSH
51992: PPUSH
51993: PPUSH
51994: PPUSH
51995: PPUSH
51996: PPUSH
51997: PPUSH
51998: PPUSH
51999: PPUSH
52000: PPUSH
52001: PPUSH
52002: PPUSH
52003: PPUSH
52004: PPUSH
52005: PPUSH
52006: PPUSH
52007: PPUSH
52008: PPUSH
52009: PPUSH
52010: PPUSH
52011: PPUSH
52012: PPUSH
52013: PPUSH
52014: PPUSH
52015: PPUSH
52016: PPUSH
52017: PPUSH
52018: PPUSH
52019: PPUSH
52020: PPUSH
52021: PPUSH
52022: PPUSH
52023: PPUSH
52024: PPUSH
52025: PPUSH
52026: PPUSH
52027: PPUSH
52028: PPUSH
52029: PPUSH
52030: PPUSH
// result = [ ] ;
52031: LD_ADDR_VAR 0 7
52035: PUSH
52036: EMPTY
52037: ST_TO_ADDR
// temp_list = [ ] ;
52038: LD_ADDR_VAR 0 9
52042: PUSH
52043: EMPTY
52044: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52045: LD_VAR 0 4
52049: PUSH
52050: LD_INT 0
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: LD_INT 2
52058: PUSH
52059: LD_INT 3
52061: PUSH
52062: LD_INT 4
52064: PUSH
52065: LD_INT 5
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: IN
52076: NOT
52077: IFTRUE 52120
52079: PUSH
52080: LD_VAR 0 1
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: LD_INT 1
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: IN
52095: IFFALSE 52119
52097: PUSH
52098: LD_VAR 0 5
52102: PUSH
52103: LD_INT 1
52105: PUSH
52106: LD_INT 2
52108: PUSH
52109: LD_INT 3
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: LIST
52116: IN
52117: NOT
52118: AND
52119: OR
52120: IFFALSE 52124
// exit ;
52122: GO 70523
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52124: LD_VAR 0 1
52128: PUSH
52129: LD_INT 6
52131: PUSH
52132: LD_INT 7
52134: PUSH
52135: LD_INT 8
52137: PUSH
52138: LD_INT 13
52140: PUSH
52141: LD_INT 12
52143: PUSH
52144: LD_INT 15
52146: PUSH
52147: LD_INT 11
52149: PUSH
52150: LD_INT 14
52152: PUSH
52153: LD_INT 10
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: IN
52167: IFFALSE 52177
// btype = b_lab ;
52169: LD_ADDR_VAR 0 1
52173: PUSH
52174: LD_INT 6
52176: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52177: LD_VAR 0 6
52181: PUSH
52182: LD_INT 0
52184: PUSH
52185: LD_INT 1
52187: PUSH
52188: LD_INT 2
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: LIST
52195: IN
52196: NOT
52197: IFTRUE 52265
52199: PUSH
52200: LD_VAR 0 1
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: LD_INT 1
52210: PUSH
52211: LD_INT 2
52213: PUSH
52214: LD_INT 3
52216: PUSH
52217: LD_INT 6
52219: PUSH
52220: LD_INT 36
52222: PUSH
52223: LD_INT 4
52225: PUSH
52226: LD_INT 5
52228: PUSH
52229: LD_INT 31
52231: PUSH
52232: LD_INT 32
52234: PUSH
52235: LD_INT 33
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: IN
52251: NOT
52252: IFFALSE 52264
52254: PUSH
52255: LD_VAR 0 6
52259: PUSH
52260: LD_INT 1
52262: EQUAL
52263: AND
52264: OR
52265: IFTRUE 52297
52267: PUSH
52268: LD_VAR 0 1
52272: PUSH
52273: LD_INT 2
52275: PUSH
52276: LD_INT 3
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: IN
52283: NOT
52284: IFFALSE 52296
52286: PUSH
52287: LD_VAR 0 6
52291: PUSH
52292: LD_INT 2
52294: EQUAL
52295: AND
52296: OR
52297: IFFALSE 52307
// mode = 0 ;
52299: LD_ADDR_VAR 0 6
52303: PUSH
52304: LD_INT 0
52306: ST_TO_ADDR
// case mode of 0 :
52307: LD_VAR 0 6
52311: PUSH
52312: LD_INT 0
52314: DOUBLE
52315: EQUAL
52316: IFTRUE 52320
52318: GO 63773
52320: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52321: LD_ADDR_VAR 0 11
52325: PUSH
52326: LD_INT 0
52328: PUSH
52329: LD_INT 0
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: LD_INT 1
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 1
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 1
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 0
52369: PUSH
52370: LD_INT 1
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 1
52379: NEG
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 1
52390: NEG
52391: PUSH
52392: LD_INT 1
52394: NEG
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 1
52402: NEG
52403: PUSH
52404: LD_INT 2
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 0
52414: PUSH
52415: LD_INT 2
52417: NEG
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 1
52425: PUSH
52426: LD_INT 1
52428: NEG
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: PUSH
52437: LD_INT 2
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 0
52446: PUSH
52447: LD_INT 2
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 1
52456: NEG
52457: PUSH
52458: LD_INT 1
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 1
52467: PUSH
52468: LD_INT 3
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: LD_INT 3
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 1
52487: NEG
52488: PUSH
52489: LD_INT 2
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52514: LD_ADDR_VAR 0 12
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 1
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: LD_INT 1
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 0
52562: PUSH
52563: LD_INT 1
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 1
52572: NEG
52573: PUSH
52574: LD_INT 0
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 1
52595: PUSH
52596: LD_INT 1
52598: NEG
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 2
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 2
52616: PUSH
52617: LD_INT 1
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 1
52626: NEG
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 2
52637: NEG
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 2
52648: NEG
52649: PUSH
52650: LD_INT 1
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 2
52660: NEG
52661: PUSH
52662: LD_INT 1
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 3
52671: NEG
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 3
52682: NEG
52683: PUSH
52684: LD_INT 1
52686: NEG
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52710: LD_ADDR_VAR 0 13
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 0
52727: PUSH
52728: LD_INT 1
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 1
52738: PUSH
52739: LD_INT 0
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 1
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: LD_INT 1
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 1
52768: NEG
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: LD_INT 1
52783: NEG
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 1
52791: NEG
52792: PUSH
52793: LD_INT 2
52795: NEG
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 2
52803: PUSH
52804: LD_INT 1
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 2
52813: PUSH
52814: LD_INT 2
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 1
52823: PUSH
52824: LD_INT 2
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 2
52833: NEG
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 2
52845: NEG
52846: PUSH
52847: LD_INT 2
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 2
52857: NEG
52858: PUSH
52859: LD_INT 3
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 3
52869: NEG
52870: PUSH
52871: LD_INT 2
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 3
52881: NEG
52882: PUSH
52883: LD_INT 3
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52909: LD_ADDR_VAR 0 14
52913: PUSH
52914: LD_INT 0
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: LD_INT 1
52929: NEG
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 1
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 1
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: NEG
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 1
52978: NEG
52979: PUSH
52980: LD_INT 1
52982: NEG
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: PUSH
52992: LD_INT 2
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: LD_INT 2
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 1
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: PUSH
53025: LD_INT 2
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: LD_INT 2
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 1
53044: NEG
53045: PUSH
53046: LD_INT 1
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 1
53055: NEG
53056: PUSH
53057: LD_INT 3
53059: NEG
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 0
53067: PUSH
53068: LD_INT 3
53070: NEG
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: LD_INT 2
53081: NEG
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53105: LD_ADDR_VAR 0 15
53109: PUSH
53110: LD_INT 0
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 0
53122: PUSH
53123: LD_INT 1
53125: NEG
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 1
53143: PUSH
53144: LD_INT 1
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: LD_INT 0
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 1
53174: NEG
53175: PUSH
53176: LD_INT 1
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: LD_INT 1
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 2
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 2
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: LD_INT 1
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 2
53228: NEG
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 2
53239: NEG
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 2
53251: PUSH
53252: LD_INT 1
53254: NEG
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 3
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 3
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53298: LD_ADDR_VAR 0 16
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: LD_INT 1
53318: NEG
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 1
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 1
53336: PUSH
53337: LD_INT 1
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: LD_INT 1
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 1
53356: NEG
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 1
53367: NEG
53368: PUSH
53369: LD_INT 1
53371: NEG
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 1
53379: NEG
53380: PUSH
53381: LD_INT 2
53383: NEG
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 2
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 2
53401: PUSH
53402: LD_INT 2
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: LD_INT 2
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 2
53421: NEG
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 2
53433: NEG
53434: PUSH
53435: LD_INT 2
53437: NEG
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 3
53445: PUSH
53446: LD_INT 2
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 3
53455: PUSH
53456: LD_INT 3
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 2
53465: PUSH
53466: LD_INT 3
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53491: LD_ADDR_VAR 0 17
53495: PUSH
53496: LD_INT 0
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: LD_INT 1
53511: NEG
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 1
53519: PUSH
53520: LD_INT 0
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 1
53529: PUSH
53530: LD_INT 1
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: LD_INT 1
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 1
53549: NEG
53550: PUSH
53551: LD_INT 0
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 1
53560: NEG
53561: PUSH
53562: LD_INT 1
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 1
53572: NEG
53573: PUSH
53574: LD_INT 2
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: LD_INT 2
53587: NEG
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 1
53595: PUSH
53596: LD_INT 1
53598: NEG
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 2
53606: PUSH
53607: LD_INT 0
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 2
53616: PUSH
53617: LD_INT 1
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 2
53626: PUSH
53627: LD_INT 2
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 1
53636: PUSH
53637: LD_INT 2
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 0
53646: PUSH
53647: LD_INT 2
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 1
53656: NEG
53657: PUSH
53658: LD_INT 1
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 2
53667: NEG
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 2
53678: NEG
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 2
53690: NEG
53691: PUSH
53692: LD_INT 2
53694: NEG
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53721: LD_ADDR_VAR 0 18
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 0
53738: PUSH
53739: LD_INT 1
53741: NEG
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 1
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 1
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 0
53769: PUSH
53770: LD_INT 1
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 1
53779: NEG
53780: PUSH
53781: LD_INT 0
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 1
53790: NEG
53791: PUSH
53792: LD_INT 1
53794: NEG
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: LD_INT 2
53806: NEG
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: LD_INT 2
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 1
53825: PUSH
53826: LD_INT 1
53828: NEG
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 2
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 2
53846: PUSH
53847: LD_INT 1
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 2
53856: PUSH
53857: LD_INT 2
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 1
53866: PUSH
53867: LD_INT 2
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: LD_INT 2
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 1
53886: NEG
53887: PUSH
53888: LD_INT 1
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 2
53897: NEG
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 2
53908: NEG
53909: PUSH
53910: LD_INT 1
53912: NEG
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 2
53920: NEG
53921: PUSH
53922: LD_INT 2
53924: NEG
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53951: LD_ADDR_VAR 0 19
53955: PUSH
53956: LD_INT 0
53958: PUSH
53959: LD_INT 0
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: LD_INT 0
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: LD_INT 1
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: LD_INT 1
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 1
54009: NEG
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: LD_INT 2
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 0
54044: PUSH
54045: LD_INT 2
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: PUSH
54056: LD_INT 1
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 2
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 2
54076: PUSH
54077: LD_INT 1
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 2
54086: PUSH
54087: LD_INT 2
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: PUSH
54097: LD_INT 2
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: LD_INT 2
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: NEG
54117: PUSH
54118: LD_INT 1
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 2
54127: NEG
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 2
54138: NEG
54139: PUSH
54140: LD_INT 1
54142: NEG
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 2
54150: NEG
54151: PUSH
54152: LD_INT 2
54154: NEG
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54181: LD_ADDR_VAR 0 20
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 0
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 1
54209: PUSH
54210: LD_INT 0
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 1
54219: PUSH
54220: LD_INT 1
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: LD_INT 1
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 1
54239: NEG
54240: PUSH
54241: LD_INT 0
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 1
54250: NEG
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 1
54262: NEG
54263: PUSH
54264: LD_INT 2
54266: NEG
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 0
54274: PUSH
54275: LD_INT 2
54277: NEG
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 1
54285: PUSH
54286: LD_INT 1
54288: NEG
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 2
54296: PUSH
54297: LD_INT 0
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 2
54306: PUSH
54307: LD_INT 1
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 2
54316: PUSH
54317: LD_INT 2
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 1
54326: PUSH
54327: LD_INT 2
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: LD_INT 2
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 1
54346: NEG
54347: PUSH
54348: LD_INT 1
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 2
54357: NEG
54358: PUSH
54359: LD_INT 0
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 2
54368: NEG
54369: PUSH
54370: LD_INT 1
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 2
54380: NEG
54381: PUSH
54382: LD_INT 2
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54411: LD_ADDR_VAR 0 21
54415: PUSH
54416: LD_INT 0
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: LD_INT 1
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: PUSH
54450: LD_INT 1
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 1
54469: NEG
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 1
54492: NEG
54493: PUSH
54494: LD_INT 2
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 0
54504: PUSH
54505: LD_INT 2
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: LD_INT 1
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 2
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 2
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 2
54546: PUSH
54547: LD_INT 2
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: LD_INT 2
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: LD_INT 2
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: LD_INT 1
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 2
54587: NEG
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 2
54598: NEG
54599: PUSH
54600: LD_INT 1
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 2
54610: NEG
54611: PUSH
54612: LD_INT 2
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54641: LD_ADDR_VAR 0 22
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: LD_INT 0
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 0
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 1
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 1
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 0
54689: PUSH
54690: LD_INT 1
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 1
54699: NEG
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 1
54710: NEG
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 1
54722: NEG
54723: PUSH
54724: LD_INT 2
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: LD_INT 2
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: PUSH
54746: LD_INT 1
54748: NEG
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 2
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 2
54766: PUSH
54767: LD_INT 1
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 2
54776: PUSH
54777: LD_INT 2
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: PUSH
54787: LD_INT 2
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: LD_INT 2
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 1
54806: NEG
54807: PUSH
54808: LD_INT 1
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 2
54817: NEG
54818: PUSH
54819: LD_INT 0
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 2
54828: NEG
54829: PUSH
54830: LD_INT 1
54832: NEG
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 2
54840: NEG
54841: PUSH
54842: LD_INT 2
54844: NEG
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54871: LD_ADDR_VAR 0 23
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: LD_INT 0
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: LD_INT 1
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 1
54899: PUSH
54900: LD_INT 0
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: LD_INT 1
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: LD_INT 1
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 1
54929: NEG
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 1
54940: NEG
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: LD_INT 2
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 0
54964: PUSH
54965: LD_INT 2
54967: NEG
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: LD_INT 1
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 2
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 2
54996: PUSH
54997: LD_INT 1
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 2
55006: PUSH
55007: LD_INT 2
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 1
55016: PUSH
55017: LD_INT 2
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: LD_INT 2
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: LD_INT 1
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 2
55047: NEG
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 2
55058: NEG
55059: PUSH
55060: LD_INT 1
55062: NEG
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 2
55070: NEG
55071: PUSH
55072: LD_INT 2
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 2
55082: NEG
55083: PUSH
55084: LD_INT 3
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 1
55094: NEG
55095: PUSH
55096: LD_INT 3
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 1
55106: PUSH
55107: LD_INT 2
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 2
55117: PUSH
55118: LD_INT 1
55120: NEG
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55151: LD_ADDR_VAR 0 24
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: LD_INT 0
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: LD_INT 1
55171: NEG
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: LD_INT 0
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: LD_INT 1
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 1
55209: NEG
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: LD_INT 1
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 1
55232: NEG
55233: PUSH
55234: LD_INT 2
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 0
55244: PUSH
55245: LD_INT 2
55247: NEG
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 1
55255: PUSH
55256: LD_INT 1
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 2
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 2
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 2
55286: PUSH
55287: LD_INT 2
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 1
55296: PUSH
55297: LD_INT 2
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: LD_INT 2
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 1
55316: NEG
55317: PUSH
55318: LD_INT 1
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 2
55327: NEG
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 2
55338: NEG
55339: PUSH
55340: LD_INT 1
55342: NEG
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 2
55350: NEG
55351: PUSH
55352: LD_INT 2
55354: NEG
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 1
55362: PUSH
55363: LD_INT 2
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 2
55373: PUSH
55374: LD_INT 1
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 3
55384: PUSH
55385: LD_INT 1
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 3
55394: PUSH
55395: LD_INT 2
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55427: LD_ADDR_VAR 0 25
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 0
55444: PUSH
55445: LD_INT 1
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 1
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: LD_INT 1
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: LD_INT 1
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: NEG
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 1
55508: NEG
55509: PUSH
55510: LD_INT 2
55512: NEG
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: LD_INT 2
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 1
55531: PUSH
55532: LD_INT 1
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 2
55542: PUSH
55543: LD_INT 0
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 2
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 2
55562: PUSH
55563: LD_INT 2
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: LD_INT 2
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: LD_INT 2
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 2
55603: NEG
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 2
55614: NEG
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 2
55626: NEG
55627: PUSH
55628: LD_INT 2
55630: NEG
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 3
55638: PUSH
55639: LD_INT 1
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 3
55648: PUSH
55649: LD_INT 2
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 2
55658: PUSH
55659: LD_INT 3
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: LD_INT 3
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55701: LD_ADDR_VAR 0 26
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: LD_INT 1
55721: NEG
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 1
55729: PUSH
55730: LD_INT 0
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 1
55739: PUSH
55740: LD_INT 1
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 0
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 1
55759: NEG
55760: PUSH
55761: LD_INT 0
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: LD_INT 1
55774: NEG
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: LD_INT 2
55786: NEG
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: LD_INT 2
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 1
55805: PUSH
55806: LD_INT 1
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 2
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 2
55826: PUSH
55827: LD_INT 1
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 2
55836: PUSH
55837: LD_INT 2
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 1
55846: PUSH
55847: LD_INT 2
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: LD_INT 2
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 1
55866: NEG
55867: PUSH
55868: LD_INT 1
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 2
55877: NEG
55878: PUSH
55879: LD_INT 0
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 2
55888: NEG
55889: PUSH
55890: LD_INT 1
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 2
55900: NEG
55901: PUSH
55902: LD_INT 2
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 2
55912: PUSH
55913: LD_INT 3
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 1
55922: PUSH
55923: LD_INT 3
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: LD_INT 2
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 2
55943: NEG
55944: PUSH
55945: LD_INT 1
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55977: LD_ADDR_VAR 0 27
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 1
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: LD_INT 1
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: LD_INT 0
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: LD_INT 1
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 1
56058: NEG
56059: PUSH
56060: LD_INT 2
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: LD_INT 2
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 1
56081: PUSH
56082: LD_INT 1
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 2
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 2
56102: PUSH
56103: LD_INT 1
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 2
56112: PUSH
56113: LD_INT 2
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 1
56122: PUSH
56123: LD_INT 2
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: LD_INT 2
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 1
56142: NEG
56143: PUSH
56144: LD_INT 1
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 2
56153: NEG
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 2
56164: NEG
56165: PUSH
56166: LD_INT 1
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 2
56176: NEG
56177: PUSH
56178: LD_INT 2
56180: NEG
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 1
56188: NEG
56189: PUSH
56190: LD_INT 2
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 2
56199: NEG
56200: PUSH
56201: LD_INT 1
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 3
56210: NEG
56211: PUSH
56212: LD_INT 1
56214: NEG
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 3
56222: NEG
56223: PUSH
56224: LD_INT 2
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56257: LD_ADDR_VAR 0 28
56261: PUSH
56262: LD_INT 0
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: LD_INT 1
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 1
56285: PUSH
56286: LD_INT 0
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: LD_INT 1
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 1
56315: NEG
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 1
56326: NEG
56327: PUSH
56328: LD_INT 1
56330: NEG
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 1
56338: NEG
56339: PUSH
56340: LD_INT 2
56342: NEG
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 0
56350: PUSH
56351: LD_INT 2
56353: NEG
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 1
56361: PUSH
56362: LD_INT 1
56364: NEG
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 2
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 2
56382: PUSH
56383: LD_INT 1
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 2
56392: PUSH
56393: LD_INT 2
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: PUSH
56403: LD_INT 2
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 0
56412: PUSH
56413: LD_INT 2
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 1
56422: NEG
56423: PUSH
56424: LD_INT 1
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 2
56433: NEG
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 2
56444: NEG
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 2
56456: NEG
56457: PUSH
56458: LD_INT 2
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 2
56468: NEG
56469: PUSH
56470: LD_INT 3
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 1
56480: NEG
56481: PUSH
56482: LD_INT 3
56484: NEG
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 3
56492: NEG
56493: PUSH
56494: LD_INT 1
56496: NEG
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 3
56504: NEG
56505: PUSH
56506: LD_INT 2
56508: NEG
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56539: LD_ADDR_VAR 0 29
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 0
56556: PUSH
56557: LD_INT 1
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: LD_INT 0
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 1
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 0
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 1
56597: NEG
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: LD_INT 1
56612: NEG
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 1
56620: NEG
56621: PUSH
56622: LD_INT 2
56624: NEG
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: LD_INT 2
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 1
56643: PUSH
56644: LD_INT 1
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 2
56654: PUSH
56655: LD_INT 0
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 2
56664: PUSH
56665: LD_INT 1
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 1
56674: PUSH
56675: LD_INT 2
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: LD_INT 2
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: LD_INT 1
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 2
56705: NEG
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 2
56717: NEG
56718: PUSH
56719: LD_INT 2
56721: NEG
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 2
56729: NEG
56730: PUSH
56731: LD_INT 3
56733: NEG
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 2
56741: PUSH
56742: LD_INT 1
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 3
56752: PUSH
56753: LD_INT 1
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 1
56762: PUSH
56763: LD_INT 3
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 1
56772: NEG
56773: PUSH
56774: LD_INT 2
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 3
56783: NEG
56784: PUSH
56785: LD_INT 2
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56818: LD_ADDR_VAR 0 30
56822: PUSH
56823: LD_INT 0
56825: PUSH
56826: LD_INT 0
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 0
56835: PUSH
56836: LD_INT 1
56838: NEG
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 1
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: LD_INT 1
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: NEG
56888: PUSH
56889: LD_INT 1
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 1
56899: NEG
56900: PUSH
56901: LD_INT 2
56903: NEG
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 0
56911: PUSH
56912: LD_INT 2
56914: NEG
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: LD_INT 1
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 2
56933: PUSH
56934: LD_INT 0
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 2
56943: PUSH
56944: LD_INT 1
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 2
56953: PUSH
56954: LD_INT 2
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: LD_INT 2
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 1
56973: NEG
56974: PUSH
56975: LD_INT 1
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 2
56984: NEG
56985: PUSH
56986: LD_INT 0
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 2
56995: NEG
56996: PUSH
56997: LD_INT 1
56999: NEG
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 1
57007: NEG
57008: PUSH
57009: LD_INT 3
57011: NEG
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 1
57019: PUSH
57020: LD_INT 2
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 3
57030: PUSH
57031: LD_INT 2
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 2
57040: PUSH
57041: LD_INT 3
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 2
57050: NEG
57051: PUSH
57052: LD_INT 1
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 3
57061: NEG
57062: PUSH
57063: LD_INT 1
57065: NEG
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57096: LD_ADDR_VAR 0 31
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: LD_INT 0
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: LD_INT 1
57116: NEG
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: LD_INT 1
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: LD_INT 1
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: LD_INT 0
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 1
57165: NEG
57166: PUSH
57167: LD_INT 1
57169: NEG
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 1
57177: NEG
57178: PUSH
57179: LD_INT 2
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: LD_INT 1
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 2
57200: PUSH
57201: LD_INT 0
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 2
57210: PUSH
57211: LD_INT 1
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 2
57220: PUSH
57221: LD_INT 2
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 1
57230: PUSH
57231: LD_INT 2
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: LD_INT 2
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 1
57250: NEG
57251: PUSH
57252: LD_INT 1
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 2
57261: NEG
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 2
57273: NEG
57274: PUSH
57275: LD_INT 2
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 2
57285: NEG
57286: PUSH
57287: LD_INT 3
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 2
57297: PUSH
57298: LD_INT 1
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 3
57308: PUSH
57309: LD_INT 1
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 1
57318: PUSH
57319: LD_INT 3
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 1
57328: NEG
57329: PUSH
57330: LD_INT 2
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 3
57339: NEG
57340: PUSH
57341: LD_INT 2
57343: NEG
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57374: LD_ADDR_VAR 0 32
57378: PUSH
57379: LD_INT 0
57381: PUSH
57382: LD_INT 0
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 0
57391: PUSH
57392: LD_INT 1
57394: NEG
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 1
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 1
57412: PUSH
57413: LD_INT 1
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 0
57422: PUSH
57423: LD_INT 1
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 1
57432: NEG
57433: PUSH
57434: LD_INT 0
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 1
57443: NEG
57444: PUSH
57445: LD_INT 1
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 1
57455: NEG
57456: PUSH
57457: LD_INT 2
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 0
57467: PUSH
57468: LD_INT 2
57470: NEG
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 1
57478: PUSH
57479: LD_INT 1
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 2
57489: PUSH
57490: LD_INT 1
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 2
57499: PUSH
57500: LD_INT 2
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 1
57509: PUSH
57510: LD_INT 2
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 0
57519: PUSH
57520: LD_INT 2
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 2
57540: NEG
57541: PUSH
57542: LD_INT 0
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 2
57551: NEG
57552: PUSH
57553: LD_INT 1
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 1
57563: NEG
57564: PUSH
57565: LD_INT 3
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 1
57575: PUSH
57576: LD_INT 2
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 3
57586: PUSH
57587: LD_INT 2
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 2
57596: PUSH
57597: LD_INT 3
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 2
57606: NEG
57607: PUSH
57608: LD_INT 1
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 3
57617: NEG
57618: PUSH
57619: LD_INT 1
57621: NEG
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57652: LD_ADDR_VAR 0 33
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: LD_INT 0
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: LD_INT 1
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 1
57680: PUSH
57681: LD_INT 0
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 1
57690: PUSH
57691: LD_INT 1
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 1
57733: NEG
57734: PUSH
57735: LD_INT 2
57737: NEG
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 1
57745: PUSH
57746: LD_INT 1
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 2
57756: PUSH
57757: LD_INT 0
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 2
57766: PUSH
57767: LD_INT 1
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 1
57776: PUSH
57777: LD_INT 2
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: LD_INT 2
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 2
57807: NEG
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 2
57818: NEG
57819: PUSH
57820: LD_INT 1
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 2
57830: NEG
57831: PUSH
57832: LD_INT 2
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 2
57842: NEG
57843: PUSH
57844: LD_INT 3
57846: NEG
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 2
57854: PUSH
57855: LD_INT 1
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 3
57865: PUSH
57866: LD_INT 1
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 1
57875: PUSH
57876: LD_INT 3
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 1
57885: NEG
57886: PUSH
57887: LD_INT 2
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 3
57896: NEG
57897: PUSH
57898: LD_INT 2
57900: NEG
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57931: LD_ADDR_VAR 0 34
57935: PUSH
57936: LD_INT 0
57938: PUSH
57939: LD_INT 0
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 0
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 1
57959: PUSH
57960: LD_INT 0
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 1
57969: PUSH
57970: LD_INT 1
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: LD_INT 1
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 1
57989: NEG
57990: PUSH
57991: LD_INT 0
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 1
58000: NEG
58001: PUSH
58002: LD_INT 1
58004: NEG
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 1
58012: NEG
58013: PUSH
58014: LD_INT 2
58016: NEG
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 0
58024: PUSH
58025: LD_INT 2
58027: NEG
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 1
58035: PUSH
58036: LD_INT 1
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 2
58046: PUSH
58047: LD_INT 1
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 2
58056: PUSH
58057: LD_INT 2
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 1
58066: PUSH
58067: LD_INT 2
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: PUSH
58078: LD_INT 1
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 2
58087: NEG
58088: PUSH
58089: LD_INT 0
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 2
58098: NEG
58099: PUSH
58100: LD_INT 1
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 2
58110: NEG
58111: PUSH
58112: LD_INT 2
58114: NEG
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 1
58122: NEG
58123: PUSH
58124: LD_INT 3
58126: NEG
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 1
58134: PUSH
58135: LD_INT 2
58137: NEG
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 3
58145: PUSH
58146: LD_INT 2
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 2
58155: PUSH
58156: LD_INT 3
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 2
58165: NEG
58166: PUSH
58167: LD_INT 1
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 3
58176: NEG
58177: PUSH
58178: LD_INT 1
58180: NEG
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58211: LD_ADDR_VAR 0 35
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: LD_INT 0
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 0
58228: PUSH
58229: LD_INT 1
58231: NEG
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 1
58239: PUSH
58240: LD_INT 0
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 1
58249: PUSH
58250: LD_INT 1
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 0
58259: PUSH
58260: LD_INT 1
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 1
58269: NEG
58270: PUSH
58271: LD_INT 0
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 1
58280: NEG
58281: PUSH
58282: LD_INT 1
58284: NEG
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 2
58292: PUSH
58293: LD_INT 1
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 2
58302: NEG
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58323: LD_ADDR_VAR 0 36
58327: PUSH
58328: LD_INT 0
58330: PUSH
58331: LD_INT 0
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 0
58340: PUSH
58341: LD_INT 1
58343: NEG
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 1
58351: PUSH
58352: LD_INT 0
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 1
58361: PUSH
58362: LD_INT 1
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 0
58371: PUSH
58372: LD_INT 1
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 1
58381: NEG
58382: PUSH
58383: LD_INT 0
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 1
58392: NEG
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 1
58404: NEG
58405: PUSH
58406: LD_INT 2
58408: NEG
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 1
58416: PUSH
58417: LD_INT 2
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58435: LD_ADDR_VAR 0 37
58439: PUSH
58440: LD_INT 0
58442: PUSH
58443: LD_INT 0
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 0
58452: PUSH
58453: LD_INT 1
58455: NEG
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 1
58463: PUSH
58464: LD_INT 0
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: LD_INT 1
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 0
58483: PUSH
58484: LD_INT 1
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 1
58493: NEG
58494: PUSH
58495: LD_INT 0
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: NEG
58505: PUSH
58506: LD_INT 1
58508: NEG
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 1
58516: PUSH
58517: LD_INT 1
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 1
58527: NEG
58528: PUSH
58529: LD_INT 1
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58547: LD_ADDR_VAR 0 38
58551: PUSH
58552: LD_INT 0
58554: PUSH
58555: LD_INT 0
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 0
58564: PUSH
58565: LD_INT 1
58567: NEG
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 1
58575: PUSH
58576: LD_INT 0
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 1
58585: PUSH
58586: LD_INT 1
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 0
58595: PUSH
58596: LD_INT 1
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 1
58605: NEG
58606: PUSH
58607: LD_INT 0
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 1
58616: NEG
58617: PUSH
58618: LD_INT 1
58620: NEG
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 2
58628: PUSH
58629: LD_INT 1
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 2
58638: NEG
58639: PUSH
58640: LD_INT 1
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58659: LD_ADDR_VAR 0 39
58663: PUSH
58664: LD_INT 0
58666: PUSH
58667: LD_INT 0
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 0
58676: PUSH
58677: LD_INT 1
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 1
58687: PUSH
58688: LD_INT 0
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: LD_INT 1
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: LD_INT 1
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 1
58717: NEG
58718: PUSH
58719: LD_INT 0
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 1
58728: NEG
58729: PUSH
58730: LD_INT 1
58732: NEG
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 1
58740: NEG
58741: PUSH
58742: LD_INT 2
58744: NEG
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 1
58752: PUSH
58753: LD_INT 2
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58771: LD_ADDR_VAR 0 40
58775: PUSH
58776: LD_INT 0
58778: PUSH
58779: LD_INT 0
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 0
58788: PUSH
58789: LD_INT 1
58791: NEG
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 1
58799: PUSH
58800: LD_INT 0
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 1
58809: PUSH
58810: LD_INT 1
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 0
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 1
58829: NEG
58830: PUSH
58831: LD_INT 0
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 1
58840: NEG
58841: PUSH
58842: LD_INT 1
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 1
58852: PUSH
58853: LD_INT 1
58855: NEG
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 1
58863: NEG
58864: PUSH
58865: LD_INT 1
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58883: LD_ADDR_VAR 0 41
58887: PUSH
58888: LD_INT 0
58890: PUSH
58891: LD_INT 0
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 0
58900: PUSH
58901: LD_INT 1
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 1
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 1
58921: PUSH
58922: LD_INT 1
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 0
58931: PUSH
58932: LD_INT 1
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 1
58941: NEG
58942: PUSH
58943: LD_INT 0
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 1
58952: NEG
58953: PUSH
58954: LD_INT 1
58956: NEG
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 1
58964: NEG
58965: PUSH
58966: LD_INT 2
58968: NEG
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 1
58976: PUSH
58977: LD_INT 1
58979: NEG
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 2
58987: PUSH
58988: LD_INT 0
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 2
58997: PUSH
58998: LD_INT 1
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 2
59007: PUSH
59008: LD_INT 2
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 1
59017: PUSH
59018: LD_INT 2
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 1
59027: NEG
59028: PUSH
59029: LD_INT 1
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 2
59038: NEG
59039: PUSH
59040: LD_INT 0
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 2
59049: NEG
59050: PUSH
59051: LD_INT 1
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 2
59061: NEG
59062: PUSH
59063: LD_INT 2
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 2
59073: NEG
59074: PUSH
59075: LD_INT 3
59077: NEG
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 2
59085: PUSH
59086: LD_INT 1
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 3
59096: PUSH
59097: LD_INT 0
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 3
59106: PUSH
59107: LD_INT 1
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 3
59116: PUSH
59117: LD_INT 2
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 3
59126: PUSH
59127: LD_INT 3
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 2
59136: PUSH
59137: LD_INT 3
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 2
59146: NEG
59147: PUSH
59148: LD_INT 1
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 3
59157: NEG
59158: PUSH
59159: LD_INT 0
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 3
59168: NEG
59169: PUSH
59170: LD_INT 1
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 3
59180: NEG
59181: PUSH
59182: LD_INT 2
59184: NEG
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 3
59192: NEG
59193: PUSH
59194: LD_INT 3
59196: NEG
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59233: LD_ADDR_VAR 0 42
59237: PUSH
59238: LD_INT 0
59240: PUSH
59241: LD_INT 0
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 0
59250: PUSH
59251: LD_INT 1
59253: NEG
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 1
59261: PUSH
59262: LD_INT 0
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 1
59271: PUSH
59272: LD_INT 1
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 0
59281: PUSH
59282: LD_INT 1
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 1
59291: NEG
59292: PUSH
59293: LD_INT 0
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 1
59302: NEG
59303: PUSH
59304: LD_INT 1
59306: NEG
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 1
59314: NEG
59315: PUSH
59316: LD_INT 2
59318: NEG
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: LD_INT 2
59329: NEG
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 1
59337: PUSH
59338: LD_INT 1
59340: NEG
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 2
59348: PUSH
59349: LD_INT 1
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 2
59358: PUSH
59359: LD_INT 2
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 1
59368: PUSH
59369: LD_INT 2
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 0
59378: PUSH
59379: LD_INT 2
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 1
59388: NEG
59389: PUSH
59390: LD_INT 1
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 2
59399: NEG
59400: PUSH
59401: LD_INT 1
59403: NEG
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 2
59411: NEG
59412: PUSH
59413: LD_INT 2
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 2
59423: NEG
59424: PUSH
59425: LD_INT 3
59427: NEG
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: PUSH
59437: LD_INT 3
59439: NEG
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 0
59447: PUSH
59448: LD_INT 3
59450: NEG
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 1
59458: PUSH
59459: LD_INT 2
59461: NEG
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 3
59469: PUSH
59470: LD_INT 2
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 3
59479: PUSH
59480: LD_INT 3
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 2
59489: PUSH
59490: LD_INT 3
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 1
59499: PUSH
59500: LD_INT 3
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 0
59509: PUSH
59510: LD_INT 3
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 1
59519: NEG
59520: PUSH
59521: LD_INT 2
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 3
59530: NEG
59531: PUSH
59532: LD_INT 2
59534: NEG
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 3
59542: NEG
59543: PUSH
59544: LD_INT 3
59546: NEG
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59583: LD_ADDR_VAR 0 43
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: LD_INT 0
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 0
59600: PUSH
59601: LD_INT 1
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 1
59611: PUSH
59612: LD_INT 0
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 1
59621: PUSH
59622: LD_INT 1
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 0
59631: PUSH
59632: LD_INT 1
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 1
59641: NEG
59642: PUSH
59643: LD_INT 0
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 1
59652: NEG
59653: PUSH
59654: LD_INT 1
59656: NEG
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: LD_INT 2
59668: NEG
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 0
59676: PUSH
59677: LD_INT 2
59679: NEG
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 1
59687: PUSH
59688: LD_INT 1
59690: NEG
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 2
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 2
59708: PUSH
59709: LD_INT 1
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 1
59718: PUSH
59719: LD_INT 2
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 0
59728: PUSH
59729: LD_INT 2
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 1
59738: NEG
59739: PUSH
59740: LD_INT 1
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 2
59749: NEG
59750: PUSH
59751: LD_INT 0
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 2
59760: NEG
59761: PUSH
59762: LD_INT 1
59764: NEG
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 1
59772: NEG
59773: PUSH
59774: LD_INT 3
59776: NEG
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: LD_INT 3
59787: NEG
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 1
59795: PUSH
59796: LD_INT 2
59798: NEG
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 2
59806: PUSH
59807: LD_INT 1
59809: NEG
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 3
59817: PUSH
59818: LD_INT 0
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 3
59827: PUSH
59828: LD_INT 1
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 1
59837: PUSH
59838: LD_INT 3
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 0
59847: PUSH
59848: LD_INT 3
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 1
59857: NEG
59858: PUSH
59859: LD_INT 2
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 2
59868: NEG
59869: PUSH
59870: LD_INT 1
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 3
59879: NEG
59880: PUSH
59881: LD_INT 0
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 3
59890: NEG
59891: PUSH
59892: LD_INT 1
59894: NEG
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59931: LD_ADDR_VAR 0 44
59935: PUSH
59936: LD_INT 0
59938: PUSH
59939: LD_INT 0
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 0
59948: PUSH
59949: LD_INT 1
59951: NEG
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 1
59959: PUSH
59960: LD_INT 0
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 1
59969: PUSH
59970: LD_INT 1
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 0
59979: PUSH
59980: LD_INT 1
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 1
59989: NEG
59990: PUSH
59991: LD_INT 0
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 1
60000: NEG
60001: PUSH
60002: LD_INT 1
60004: NEG
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 1
60012: NEG
60013: PUSH
60014: LD_INT 2
60016: NEG
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 1
60024: PUSH
60025: LD_INT 1
60027: NEG
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 2
60035: PUSH
60036: LD_INT 0
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 2
60045: PUSH
60046: LD_INT 1
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 2
60055: PUSH
60056: LD_INT 2
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 1
60065: PUSH
60066: LD_INT 2
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 1
60075: NEG
60076: PUSH
60077: LD_INT 1
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 2
60086: NEG
60087: PUSH
60088: LD_INT 0
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 2
60097: NEG
60098: PUSH
60099: LD_INT 1
60101: NEG
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 2
60109: NEG
60110: PUSH
60111: LD_INT 2
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 2
60121: NEG
60122: PUSH
60123: LD_INT 3
60125: NEG
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 2
60133: PUSH
60134: LD_INT 1
60136: NEG
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 3
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 3
60154: PUSH
60155: LD_INT 1
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 3
60164: PUSH
60165: LD_INT 2
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 3
60174: PUSH
60175: LD_INT 3
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 2
60184: PUSH
60185: LD_INT 3
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 2
60194: NEG
60195: PUSH
60196: LD_INT 1
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 3
60205: NEG
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 3
60216: NEG
60217: PUSH
60218: LD_INT 1
60220: NEG
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 3
60228: NEG
60229: PUSH
60230: LD_INT 2
60232: NEG
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 3
60240: NEG
60241: PUSH
60242: LD_INT 3
60244: NEG
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60281: LD_ADDR_VAR 0 45
60285: PUSH
60286: LD_INT 0
60288: PUSH
60289: LD_INT 0
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 0
60298: PUSH
60299: LD_INT 1
60301: NEG
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 1
60309: PUSH
60310: LD_INT 0
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 1
60319: PUSH
60320: LD_INT 1
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: LD_INT 1
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: LD_INT 0
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 1
60350: NEG
60351: PUSH
60352: LD_INT 1
60354: NEG
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 1
60362: NEG
60363: PUSH
60364: LD_INT 2
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 0
60374: PUSH
60375: LD_INT 2
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 1
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 2
60396: PUSH
60397: LD_INT 1
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 2
60406: PUSH
60407: LD_INT 2
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 1
60416: PUSH
60417: LD_INT 2
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 0
60426: PUSH
60427: LD_INT 2
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 1
60436: NEG
60437: PUSH
60438: LD_INT 1
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 2
60447: NEG
60448: PUSH
60449: LD_INT 1
60451: NEG
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 2
60459: NEG
60460: PUSH
60461: LD_INT 2
60463: NEG
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 2
60471: NEG
60472: PUSH
60473: LD_INT 3
60475: NEG
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 1
60483: NEG
60484: PUSH
60485: LD_INT 3
60487: NEG
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 0
60495: PUSH
60496: LD_INT 3
60498: NEG
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 1
60506: PUSH
60507: LD_INT 2
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 3
60517: PUSH
60518: LD_INT 2
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 3
60527: PUSH
60528: LD_INT 3
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 2
60537: PUSH
60538: LD_INT 3
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 1
60547: PUSH
60548: LD_INT 3
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 0
60557: PUSH
60558: LD_INT 3
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 1
60567: NEG
60568: PUSH
60569: LD_INT 2
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 3
60578: NEG
60579: PUSH
60580: LD_INT 2
60582: NEG
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 3
60590: NEG
60591: PUSH
60592: LD_INT 3
60594: NEG
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60631: LD_ADDR_VAR 0 46
60635: PUSH
60636: LD_INT 0
60638: PUSH
60639: LD_INT 0
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 0
60648: PUSH
60649: LD_INT 1
60651: NEG
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 1
60659: PUSH
60660: LD_INT 0
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: LD_INT 1
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 0
60679: PUSH
60680: LD_INT 1
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 1
60689: NEG
60690: PUSH
60691: LD_INT 0
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 1
60700: NEG
60701: PUSH
60702: LD_INT 1
60704: NEG
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 1
60712: NEG
60713: PUSH
60714: LD_INT 2
60716: NEG
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 0
60724: PUSH
60725: LD_INT 2
60727: NEG
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 1
60735: PUSH
60736: LD_INT 1
60738: NEG
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 2
60746: PUSH
60747: LD_INT 0
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 2
60756: PUSH
60757: LD_INT 1
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: LD_INT 2
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: LD_INT 2
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 1
60786: NEG
60787: PUSH
60788: LD_INT 1
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 2
60797: NEG
60798: PUSH
60799: LD_INT 0
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 2
60808: NEG
60809: PUSH
60810: LD_INT 1
60812: NEG
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 1
60820: NEG
60821: PUSH
60822: LD_INT 3
60824: NEG
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 0
60832: PUSH
60833: LD_INT 3
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 1
60843: PUSH
60844: LD_INT 2
60846: NEG
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 2
60854: PUSH
60855: LD_INT 1
60857: NEG
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 3
60865: PUSH
60866: LD_INT 0
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 3
60875: PUSH
60876: LD_INT 1
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 1
60885: PUSH
60886: LD_INT 3
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 0
60895: PUSH
60896: LD_INT 3
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 1
60905: NEG
60906: PUSH
60907: LD_INT 2
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 2
60916: NEG
60917: PUSH
60918: LD_INT 1
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 3
60927: NEG
60928: PUSH
60929: LD_INT 0
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 3
60938: NEG
60939: PUSH
60940: LD_INT 1
60942: NEG
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60979: LD_ADDR_VAR 0 47
60983: PUSH
60984: LD_INT 0
60986: PUSH
60987: LD_INT 0
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 0
60996: PUSH
60997: LD_INT 1
60999: NEG
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 1
61007: PUSH
61008: LD_INT 0
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 1
61017: PUSH
61018: LD_INT 1
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 0
61027: PUSH
61028: LD_INT 1
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 1
61037: NEG
61038: PUSH
61039: LD_INT 0
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 1
61048: NEG
61049: PUSH
61050: LD_INT 1
61052: NEG
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 1
61060: NEG
61061: PUSH
61062: LD_INT 2
61064: NEG
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 0
61072: PUSH
61073: LD_INT 2
61075: NEG
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 1
61083: PUSH
61084: LD_INT 1
61086: NEG
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 2
61094: NEG
61095: PUSH
61096: LD_INT 1
61098: NEG
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 2
61106: NEG
61107: PUSH
61108: LD_INT 2
61110: NEG
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61130: LD_ADDR_VAR 0 48
61134: PUSH
61135: LD_INT 0
61137: PUSH
61138: LD_INT 0
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 0
61147: PUSH
61148: LD_INT 1
61150: NEG
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: LD_INT 0
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 1
61168: PUSH
61169: LD_INT 1
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 0
61178: PUSH
61179: LD_INT 1
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 1
61188: NEG
61189: PUSH
61190: LD_INT 0
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 1
61199: NEG
61200: PUSH
61201: LD_INT 1
61203: NEG
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 1
61211: NEG
61212: PUSH
61213: LD_INT 2
61215: NEG
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 0
61223: PUSH
61224: LD_INT 2
61226: NEG
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 1
61234: PUSH
61235: LD_INT 1
61237: NEG
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 2
61245: PUSH
61246: LD_INT 0
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 2
61255: PUSH
61256: LD_INT 1
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61277: LD_ADDR_VAR 0 49
61281: PUSH
61282: LD_INT 0
61284: PUSH
61285: LD_INT 0
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 0
61294: PUSH
61295: LD_INT 1
61297: NEG
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 1
61305: PUSH
61306: LD_INT 0
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 1
61315: PUSH
61316: LD_INT 1
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 0
61325: PUSH
61326: LD_INT 1
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 1
61335: NEG
61336: PUSH
61337: LD_INT 0
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 1
61346: NEG
61347: PUSH
61348: LD_INT 1
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 1
61358: PUSH
61359: LD_INT 1
61361: NEG
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 2
61369: PUSH
61370: LD_INT 0
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 2
61379: PUSH
61380: LD_INT 1
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 2
61389: PUSH
61390: LD_INT 2
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 1
61399: PUSH
61400: LD_INT 2
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61421: LD_ADDR_VAR 0 50
61425: PUSH
61426: LD_INT 0
61428: PUSH
61429: LD_INT 0
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 0
61438: PUSH
61439: LD_INT 1
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 1
61449: PUSH
61450: LD_INT 0
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 1
61459: PUSH
61460: LD_INT 1
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 0
61469: PUSH
61470: LD_INT 1
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 1
61479: NEG
61480: PUSH
61481: LD_INT 0
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 1
61490: NEG
61491: PUSH
61492: LD_INT 1
61494: NEG
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 2
61502: PUSH
61503: LD_INT 1
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 2
61512: PUSH
61513: LD_INT 2
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 1
61522: PUSH
61523: LD_INT 2
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 0
61532: PUSH
61533: LD_INT 2
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 1
61542: NEG
61543: PUSH
61544: LD_INT 1
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61565: LD_ADDR_VAR 0 51
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: LD_INT 0
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 0
61582: PUSH
61583: LD_INT 1
61585: NEG
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 1
61593: PUSH
61594: LD_INT 0
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 1
61603: PUSH
61604: LD_INT 1
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 0
61613: PUSH
61614: LD_INT 1
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 1
61623: NEG
61624: PUSH
61625: LD_INT 0
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 1
61634: NEG
61635: PUSH
61636: LD_INT 1
61638: NEG
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 1
61646: PUSH
61647: LD_INT 2
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 0
61656: PUSH
61657: LD_INT 2
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 1
61666: NEG
61667: PUSH
61668: LD_INT 1
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 2
61677: NEG
61678: PUSH
61679: LD_INT 0
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 2
61688: NEG
61689: PUSH
61690: LD_INT 1
61692: NEG
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61712: LD_ADDR_VAR 0 52
61716: PUSH
61717: LD_INT 0
61719: PUSH
61720: LD_INT 0
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 0
61729: PUSH
61730: LD_INT 1
61732: NEG
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 1
61740: PUSH
61741: LD_INT 0
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 1
61750: PUSH
61751: LD_INT 1
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 0
61760: PUSH
61761: LD_INT 1
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 1
61770: NEG
61771: PUSH
61772: LD_INT 0
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 1
61781: NEG
61782: PUSH
61783: LD_INT 1
61785: NEG
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 1
61793: NEG
61794: PUSH
61795: LD_INT 2
61797: NEG
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 1
61805: NEG
61806: PUSH
61807: LD_INT 1
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 2
61816: NEG
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 2
61827: NEG
61828: PUSH
61829: LD_INT 1
61831: NEG
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 2
61839: NEG
61840: PUSH
61841: LD_INT 2
61843: NEG
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61863: LD_ADDR_VAR 0 53
61867: PUSH
61868: LD_INT 0
61870: PUSH
61871: LD_INT 0
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 0
61880: PUSH
61881: LD_INT 1
61883: NEG
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 1
61891: PUSH
61892: LD_INT 0
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 1
61901: PUSH
61902: LD_INT 1
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 0
61911: PUSH
61912: LD_INT 1
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 1
61921: NEG
61922: PUSH
61923: LD_INT 0
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 1
61932: NEG
61933: PUSH
61934: LD_INT 1
61936: NEG
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 1
61944: NEG
61945: PUSH
61946: LD_INT 2
61948: NEG
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 0
61956: PUSH
61957: LD_INT 2
61959: NEG
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 1
61967: PUSH
61968: LD_INT 1
61970: NEG
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 2
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 2
61988: PUSH
61989: LD_INT 1
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 2
61998: PUSH
61999: LD_INT 2
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 1
62008: PUSH
62009: LD_INT 2
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 0
62018: PUSH
62019: LD_INT 2
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 1
62028: NEG
62029: PUSH
62030: LD_INT 1
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 2
62039: NEG
62040: PUSH
62041: LD_INT 0
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 2
62050: NEG
62051: PUSH
62052: LD_INT 1
62054: NEG
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 2
62062: NEG
62063: PUSH
62064: LD_INT 2
62066: NEG
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62093: LD_ADDR_VAR 0 54
62097: PUSH
62098: LD_INT 0
62100: PUSH
62101: LD_INT 0
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 0
62110: PUSH
62111: LD_INT 1
62113: NEG
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 1
62121: PUSH
62122: LD_INT 0
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 1
62131: PUSH
62132: LD_INT 1
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 0
62141: PUSH
62142: LD_INT 1
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 1
62151: NEG
62152: PUSH
62153: LD_INT 0
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 1
62162: NEG
62163: PUSH
62164: LD_INT 1
62166: NEG
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 1
62174: NEG
62175: PUSH
62176: LD_INT 2
62178: NEG
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 0
62186: PUSH
62187: LD_INT 2
62189: NEG
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 1
62197: PUSH
62198: LD_INT 1
62200: NEG
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 2
62208: PUSH
62209: LD_INT 0
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 2
62218: PUSH
62219: LD_INT 1
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 2
62228: PUSH
62229: LD_INT 2
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 1
62238: PUSH
62239: LD_INT 2
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 0
62248: PUSH
62249: LD_INT 2
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 1
62258: NEG
62259: PUSH
62260: LD_INT 1
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 2
62269: NEG
62270: PUSH
62271: LD_INT 0
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 2
62280: NEG
62281: PUSH
62282: LD_INT 1
62284: NEG
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 2
62292: NEG
62293: PUSH
62294: LD_INT 2
62296: NEG
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62323: LD_ADDR_VAR 0 55
62327: PUSH
62328: LD_INT 0
62330: PUSH
62331: LD_INT 0
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 0
62340: PUSH
62341: LD_INT 1
62343: NEG
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 1
62351: PUSH
62352: LD_INT 0
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 1
62361: PUSH
62362: LD_INT 1
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 0
62371: PUSH
62372: LD_INT 1
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 1
62381: NEG
62382: PUSH
62383: LD_INT 0
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 1
62392: NEG
62393: PUSH
62394: LD_INT 1
62396: NEG
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 1
62404: NEG
62405: PUSH
62406: LD_INT 2
62408: NEG
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 0
62416: PUSH
62417: LD_INT 2
62419: NEG
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 1
62427: PUSH
62428: LD_INT 1
62430: NEG
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 2
62438: PUSH
62439: LD_INT 0
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 2
62448: PUSH
62449: LD_INT 1
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 2
62458: PUSH
62459: LD_INT 2
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 1
62468: PUSH
62469: LD_INT 2
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 0
62478: PUSH
62479: LD_INT 2
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 1
62488: NEG
62489: PUSH
62490: LD_INT 1
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 2
62499: NEG
62500: PUSH
62501: LD_INT 0
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 2
62510: NEG
62511: PUSH
62512: LD_INT 1
62514: NEG
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 2
62522: NEG
62523: PUSH
62524: LD_INT 2
62526: NEG
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62553: LD_ADDR_VAR 0 56
62557: PUSH
62558: LD_INT 0
62560: PUSH
62561: LD_INT 0
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 0
62570: PUSH
62571: LD_INT 1
62573: NEG
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 1
62581: PUSH
62582: LD_INT 0
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 1
62591: PUSH
62592: LD_INT 1
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 0
62601: PUSH
62602: LD_INT 1
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 1
62611: NEG
62612: PUSH
62613: LD_INT 0
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 1
62622: NEG
62623: PUSH
62624: LD_INT 1
62626: NEG
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 1
62634: NEG
62635: PUSH
62636: LD_INT 2
62638: NEG
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 0
62646: PUSH
62647: LD_INT 2
62649: NEG
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 1
62657: PUSH
62658: LD_INT 1
62660: NEG
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 2
62668: PUSH
62669: LD_INT 0
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 2
62678: PUSH
62679: LD_INT 1
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 2
62688: PUSH
62689: LD_INT 2
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 1
62698: PUSH
62699: LD_INT 2
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 0
62708: PUSH
62709: LD_INT 2
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 1
62718: NEG
62719: PUSH
62720: LD_INT 1
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 2
62729: NEG
62730: PUSH
62731: LD_INT 0
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 2
62740: NEG
62741: PUSH
62742: LD_INT 1
62744: NEG
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 2
62752: NEG
62753: PUSH
62754: LD_INT 2
62756: NEG
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62783: LD_ADDR_VAR 0 57
62787: PUSH
62788: LD_INT 0
62790: PUSH
62791: LD_INT 0
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 0
62800: PUSH
62801: LD_INT 1
62803: NEG
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 1
62811: PUSH
62812: LD_INT 0
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 1
62821: PUSH
62822: LD_INT 1
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 0
62831: PUSH
62832: LD_INT 1
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 1
62841: NEG
62842: PUSH
62843: LD_INT 0
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 1
62852: NEG
62853: PUSH
62854: LD_INT 1
62856: NEG
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 1
62864: NEG
62865: PUSH
62866: LD_INT 2
62868: NEG
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 0
62876: PUSH
62877: LD_INT 2
62879: NEG
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 1
62887: PUSH
62888: LD_INT 1
62890: NEG
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 2
62898: PUSH
62899: LD_INT 0
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 2
62908: PUSH
62909: LD_INT 1
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 2
62918: PUSH
62919: LD_INT 2
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 1
62928: PUSH
62929: LD_INT 2
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 0
62938: PUSH
62939: LD_INT 2
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 1
62948: NEG
62949: PUSH
62950: LD_INT 1
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 2
62959: NEG
62960: PUSH
62961: LD_INT 0
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 2
62970: NEG
62971: PUSH
62972: LD_INT 1
62974: NEG
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 2
62982: NEG
62983: PUSH
62984: LD_INT 2
62986: NEG
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63013: LD_ADDR_VAR 0 58
63017: PUSH
63018: LD_INT 0
63020: PUSH
63021: LD_INT 0
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 0
63030: PUSH
63031: LD_INT 1
63033: NEG
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 1
63041: PUSH
63042: LD_INT 0
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 1
63051: PUSH
63052: LD_INT 1
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 0
63061: PUSH
63062: LD_INT 1
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 1
63071: NEG
63072: PUSH
63073: LD_INT 0
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 1
63082: NEG
63083: PUSH
63084: LD_INT 1
63086: NEG
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 1
63094: NEG
63095: PUSH
63096: LD_INT 2
63098: NEG
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 0
63106: PUSH
63107: LD_INT 2
63109: NEG
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 1
63117: PUSH
63118: LD_INT 1
63120: NEG
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 2
63128: PUSH
63129: LD_INT 0
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 2
63138: PUSH
63139: LD_INT 1
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 2
63148: PUSH
63149: LD_INT 2
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 1
63158: PUSH
63159: LD_INT 2
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 0
63168: PUSH
63169: LD_INT 2
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 1
63178: NEG
63179: PUSH
63180: LD_INT 1
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 2
63189: NEG
63190: PUSH
63191: LD_INT 0
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 2
63200: NEG
63201: PUSH
63202: LD_INT 1
63204: NEG
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 2
63212: NEG
63213: PUSH
63214: LD_INT 2
63216: NEG
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63243: LD_ADDR_VAR 0 59
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: LD_INT 0
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 0
63260: PUSH
63261: LD_INT 1
63263: NEG
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 1
63271: PUSH
63272: LD_INT 0
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 1
63281: PUSH
63282: LD_INT 1
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 0
63291: PUSH
63292: LD_INT 1
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 1
63301: NEG
63302: PUSH
63303: LD_INT 0
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 1
63312: NEG
63313: PUSH
63314: LD_INT 1
63316: NEG
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63331: LD_ADDR_VAR 0 60
63335: PUSH
63336: LD_INT 0
63338: PUSH
63339: LD_INT 0
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 0
63348: PUSH
63349: LD_INT 1
63351: NEG
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 1
63359: PUSH
63360: LD_INT 0
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 1
63369: PUSH
63370: LD_INT 1
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 0
63379: PUSH
63380: LD_INT 1
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 1
63389: NEG
63390: PUSH
63391: LD_INT 0
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 1
63400: NEG
63401: PUSH
63402: LD_INT 1
63404: NEG
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63419: LD_ADDR_VAR 0 61
63423: PUSH
63424: LD_INT 0
63426: PUSH
63427: LD_INT 0
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 0
63436: PUSH
63437: LD_INT 1
63439: NEG
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 1
63447: PUSH
63448: LD_INT 0
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 1
63457: PUSH
63458: LD_INT 1
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 0
63467: PUSH
63468: LD_INT 1
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 1
63477: NEG
63478: PUSH
63479: LD_INT 0
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 1
63488: NEG
63489: PUSH
63490: LD_INT 1
63492: NEG
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63507: LD_ADDR_VAR 0 62
63511: PUSH
63512: LD_INT 0
63514: PUSH
63515: LD_INT 0
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 0
63524: PUSH
63525: LD_INT 1
63527: NEG
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 1
63535: PUSH
63536: LD_INT 0
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 1
63545: PUSH
63546: LD_INT 1
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 0
63555: PUSH
63556: LD_INT 1
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 1
63565: NEG
63566: PUSH
63567: LD_INT 0
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 1
63576: NEG
63577: PUSH
63578: LD_INT 1
63580: NEG
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63595: LD_ADDR_VAR 0 63
63599: PUSH
63600: LD_INT 0
63602: PUSH
63603: LD_INT 0
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 0
63612: PUSH
63613: LD_INT 1
63615: NEG
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 1
63623: PUSH
63624: LD_INT 0
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 1
63633: PUSH
63634: LD_INT 1
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 0
63643: PUSH
63644: LD_INT 1
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 1
63653: NEG
63654: PUSH
63655: LD_INT 0
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 1
63664: NEG
63665: PUSH
63666: LD_INT 1
63668: NEG
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63683: LD_ADDR_VAR 0 64
63687: PUSH
63688: LD_INT 0
63690: PUSH
63691: LD_INT 0
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 0
63700: PUSH
63701: LD_INT 1
63703: NEG
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 1
63711: PUSH
63712: LD_INT 0
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 1
63721: PUSH
63722: LD_INT 1
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 0
63731: PUSH
63732: LD_INT 1
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 1
63741: NEG
63742: PUSH
63743: LD_INT 0
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 1
63752: NEG
63753: PUSH
63754: LD_INT 1
63756: NEG
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: ST_TO_ADDR
// end ; 1 :
63771: GO 69668
63773: LD_INT 1
63775: DOUBLE
63776: EQUAL
63777: IFTRUE 63781
63779: GO 66404
63781: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63782: LD_ADDR_VAR 0 11
63786: PUSH
63787: LD_INT 1
63789: NEG
63790: PUSH
63791: LD_INT 3
63793: NEG
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 0
63801: PUSH
63802: LD_INT 3
63804: NEG
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 1
63812: PUSH
63813: LD_INT 2
63815: NEG
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: LIST
63825: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63826: LD_ADDR_VAR 0 12
63830: PUSH
63831: LD_INT 2
63833: PUSH
63834: LD_INT 1
63836: NEG
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 3
63844: PUSH
63845: LD_INT 0
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 3
63854: PUSH
63855: LD_INT 1
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: LIST
63866: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63867: LD_ADDR_VAR 0 13
63871: PUSH
63872: LD_INT 3
63874: PUSH
63875: LD_INT 2
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 3
63884: PUSH
63885: LD_INT 3
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 2
63894: PUSH
63895: LD_INT 3
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: LIST
63906: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63907: LD_ADDR_VAR 0 14
63911: PUSH
63912: LD_INT 1
63914: PUSH
63915: LD_INT 3
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 0
63924: PUSH
63925: LD_INT 3
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 1
63934: NEG
63935: PUSH
63936: LD_INT 2
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: LIST
63947: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63948: LD_ADDR_VAR 0 15
63952: PUSH
63953: LD_INT 2
63955: NEG
63956: PUSH
63957: LD_INT 1
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 3
63966: NEG
63967: PUSH
63968: LD_INT 0
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 3
63977: NEG
63978: PUSH
63979: LD_INT 1
63981: NEG
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: LIST
63991: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63992: LD_ADDR_VAR 0 16
63996: PUSH
63997: LD_INT 2
63999: NEG
64000: PUSH
64001: LD_INT 3
64003: NEG
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 3
64011: NEG
64012: PUSH
64013: LD_INT 2
64015: NEG
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 3
64023: NEG
64024: PUSH
64025: LD_INT 3
64027: NEG
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: LIST
64037: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64038: LD_ADDR_VAR 0 17
64042: PUSH
64043: LD_INT 1
64045: NEG
64046: PUSH
64047: LD_INT 3
64049: NEG
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 0
64057: PUSH
64058: LD_INT 3
64060: NEG
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 1
64068: PUSH
64069: LD_INT 2
64071: NEG
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: LIST
64081: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64082: LD_ADDR_VAR 0 18
64086: PUSH
64087: LD_INT 2
64089: PUSH
64090: LD_INT 1
64092: NEG
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 3
64100: PUSH
64101: LD_INT 0
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 3
64110: PUSH
64111: LD_INT 1
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: LIST
64122: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64123: LD_ADDR_VAR 0 19
64127: PUSH
64128: LD_INT 3
64130: PUSH
64131: LD_INT 2
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 3
64140: PUSH
64141: LD_INT 3
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 2
64150: PUSH
64151: LD_INT 3
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: LIST
64162: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64163: LD_ADDR_VAR 0 20
64167: PUSH
64168: LD_INT 1
64170: PUSH
64171: LD_INT 3
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 0
64180: PUSH
64181: LD_INT 3
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 1
64190: NEG
64191: PUSH
64192: LD_INT 2
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: LIST
64203: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64204: LD_ADDR_VAR 0 21
64208: PUSH
64209: LD_INT 2
64211: NEG
64212: PUSH
64213: LD_INT 1
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 3
64222: NEG
64223: PUSH
64224: LD_INT 0
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 3
64233: NEG
64234: PUSH
64235: LD_INT 1
64237: NEG
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: LIST
64247: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64248: LD_ADDR_VAR 0 22
64252: PUSH
64253: LD_INT 2
64255: NEG
64256: PUSH
64257: LD_INT 3
64259: NEG
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 3
64267: NEG
64268: PUSH
64269: LD_INT 2
64271: NEG
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 3
64279: NEG
64280: PUSH
64281: LD_INT 3
64283: NEG
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: LIST
64293: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64294: LD_ADDR_VAR 0 23
64298: PUSH
64299: LD_INT 0
64301: PUSH
64302: LD_INT 3
64304: NEG
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 1
64312: NEG
64313: PUSH
64314: LD_INT 4
64316: NEG
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 1
64324: PUSH
64325: LD_INT 3
64327: NEG
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: LIST
64337: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64338: LD_ADDR_VAR 0 24
64342: PUSH
64343: LD_INT 3
64345: PUSH
64346: LD_INT 0
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 3
64355: PUSH
64356: LD_INT 1
64358: NEG
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 4
64366: PUSH
64367: LD_INT 1
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: LIST
64378: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64379: LD_ADDR_VAR 0 25
64383: PUSH
64384: LD_INT 3
64386: PUSH
64387: LD_INT 3
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 4
64396: PUSH
64397: LD_INT 3
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 3
64406: PUSH
64407: LD_INT 4
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: LIST
64418: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64419: LD_ADDR_VAR 0 26
64423: PUSH
64424: LD_INT 0
64426: PUSH
64427: LD_INT 3
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 1
64436: PUSH
64437: LD_INT 4
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 1
64446: NEG
64447: PUSH
64448: LD_INT 3
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: LIST
64459: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64460: LD_ADDR_VAR 0 27
64464: PUSH
64465: LD_INT 3
64467: NEG
64468: PUSH
64469: LD_INT 0
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 3
64478: NEG
64479: PUSH
64480: LD_INT 1
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 4
64489: NEG
64490: PUSH
64491: LD_INT 1
64493: NEG
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: LIST
64503: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64504: LD_ADDR_VAR 0 28
64508: PUSH
64509: LD_INT 3
64511: NEG
64512: PUSH
64513: LD_INT 3
64515: NEG
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 3
64523: NEG
64524: PUSH
64525: LD_INT 4
64527: NEG
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 4
64535: NEG
64536: PUSH
64537: LD_INT 3
64539: NEG
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: LIST
64549: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64550: LD_ADDR_VAR 0 29
64554: PUSH
64555: LD_INT 1
64557: NEG
64558: PUSH
64559: LD_INT 3
64561: NEG
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 0
64569: PUSH
64570: LD_INT 3
64572: NEG
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 1
64580: PUSH
64581: LD_INT 2
64583: NEG
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 1
64591: NEG
64592: PUSH
64593: LD_INT 4
64595: NEG
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 0
64603: PUSH
64604: LD_INT 4
64606: NEG
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 1
64614: PUSH
64615: LD_INT 3
64617: NEG
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 1
64625: NEG
64626: PUSH
64627: LD_INT 5
64629: NEG
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 0
64637: PUSH
64638: LD_INT 5
64640: NEG
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 1
64648: PUSH
64649: LD_INT 4
64651: NEG
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 1
64659: NEG
64660: PUSH
64661: LD_INT 6
64663: NEG
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 0
64671: PUSH
64672: LD_INT 6
64674: NEG
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 1
64682: PUSH
64683: LD_INT 5
64685: NEG
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64705: LD_ADDR_VAR 0 30
64709: PUSH
64710: LD_INT 2
64712: PUSH
64713: LD_INT 1
64715: NEG
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 3
64723: PUSH
64724: LD_INT 0
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 3
64733: PUSH
64734: LD_INT 1
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 3
64743: PUSH
64744: LD_INT 1
64746: NEG
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 4
64754: PUSH
64755: LD_INT 0
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 4
64764: PUSH
64765: LD_INT 1
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 4
64774: PUSH
64775: LD_INT 1
64777: NEG
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 5
64785: PUSH
64786: LD_INT 0
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 5
64795: PUSH
64796: LD_INT 1
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 5
64805: PUSH
64806: LD_INT 1
64808: NEG
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 6
64816: PUSH
64817: LD_INT 0
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 6
64826: PUSH
64827: LD_INT 1
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: LIST
64838: LIST
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64848: LD_ADDR_VAR 0 31
64852: PUSH
64853: LD_INT 3
64855: PUSH
64856: LD_INT 2
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 3
64865: PUSH
64866: LD_INT 3
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 2
64875: PUSH
64876: LD_INT 3
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 4
64885: PUSH
64886: LD_INT 3
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 4
64895: PUSH
64896: LD_INT 4
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 3
64905: PUSH
64906: LD_INT 4
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 5
64915: PUSH
64916: LD_INT 4
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 5
64925: PUSH
64926: LD_INT 5
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 4
64935: PUSH
64936: LD_INT 5
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 6
64945: PUSH
64946: LD_INT 5
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: LD_INT 6
64955: PUSH
64956: LD_INT 6
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 5
64965: PUSH
64966: LD_INT 6
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64987: LD_ADDR_VAR 0 32
64991: PUSH
64992: LD_INT 1
64994: PUSH
64995: LD_INT 3
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 0
65004: PUSH
65005: LD_INT 3
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 1
65014: NEG
65015: PUSH
65016: LD_INT 2
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 1
65025: PUSH
65026: LD_INT 4
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 0
65035: PUSH
65036: LD_INT 4
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: LD_INT 1
65045: NEG
65046: PUSH
65047: LD_INT 3
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 1
65056: PUSH
65057: LD_INT 5
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: LD_INT 0
65066: PUSH
65067: LD_INT 5
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: LD_INT 1
65076: NEG
65077: PUSH
65078: LD_INT 4
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 1
65087: PUSH
65088: LD_INT 6
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 0
65097: PUSH
65098: LD_INT 6
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 1
65107: NEG
65108: PUSH
65109: LD_INT 5
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65130: LD_ADDR_VAR 0 33
65134: PUSH
65135: LD_INT 2
65137: NEG
65138: PUSH
65139: LD_INT 1
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: LD_INT 3
65148: NEG
65149: PUSH
65150: LD_INT 0
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 3
65159: NEG
65160: PUSH
65161: LD_INT 1
65163: NEG
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 3
65171: NEG
65172: PUSH
65173: LD_INT 1
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 4
65182: NEG
65183: PUSH
65184: LD_INT 0
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 4
65193: NEG
65194: PUSH
65195: LD_INT 1
65197: NEG
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 4
65205: NEG
65206: PUSH
65207: LD_INT 1
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 5
65216: NEG
65217: PUSH
65218: LD_INT 0
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 5
65227: NEG
65228: PUSH
65229: LD_INT 1
65231: NEG
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 5
65239: NEG
65240: PUSH
65241: LD_INT 1
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 6
65250: NEG
65251: PUSH
65252: LD_INT 0
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 6
65261: NEG
65262: PUSH
65263: LD_INT 1
65265: NEG
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65285: LD_ADDR_VAR 0 34
65289: PUSH
65290: LD_INT 2
65292: NEG
65293: PUSH
65294: LD_INT 3
65296: NEG
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 3
65304: NEG
65305: PUSH
65306: LD_INT 2
65308: NEG
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 3
65316: NEG
65317: PUSH
65318: LD_INT 3
65320: NEG
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 3
65328: NEG
65329: PUSH
65330: LD_INT 4
65332: NEG
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 4
65340: NEG
65341: PUSH
65342: LD_INT 3
65344: NEG
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 4
65352: NEG
65353: PUSH
65354: LD_INT 4
65356: NEG
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 4
65364: NEG
65365: PUSH
65366: LD_INT 5
65368: NEG
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 5
65376: NEG
65377: PUSH
65378: LD_INT 4
65380: NEG
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 5
65388: NEG
65389: PUSH
65390: LD_INT 5
65392: NEG
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 5
65400: NEG
65401: PUSH
65402: LD_INT 6
65404: NEG
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 6
65412: NEG
65413: PUSH
65414: LD_INT 5
65416: NEG
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 6
65424: NEG
65425: PUSH
65426: LD_INT 6
65428: NEG
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65448: LD_ADDR_VAR 0 41
65452: PUSH
65453: LD_INT 0
65455: PUSH
65456: LD_INT 2
65458: NEG
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 1
65466: NEG
65467: PUSH
65468: LD_INT 3
65470: NEG
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 1
65478: PUSH
65479: LD_INT 2
65481: NEG
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: LIST
65491: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65492: LD_ADDR_VAR 0 42
65496: PUSH
65497: LD_INT 2
65499: PUSH
65500: LD_INT 0
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: LD_INT 2
65509: PUSH
65510: LD_INT 1
65512: NEG
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 3
65520: PUSH
65521: LD_INT 1
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: LIST
65532: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65533: LD_ADDR_VAR 0 43
65537: PUSH
65538: LD_INT 2
65540: PUSH
65541: LD_INT 2
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 3
65550: PUSH
65551: LD_INT 2
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 2
65560: PUSH
65561: LD_INT 3
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: LIST
65572: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65573: LD_ADDR_VAR 0 44
65577: PUSH
65578: LD_INT 0
65580: PUSH
65581: LD_INT 2
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 1
65590: PUSH
65591: LD_INT 3
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 1
65600: NEG
65601: PUSH
65602: LD_INT 2
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: LIST
65613: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65614: LD_ADDR_VAR 0 45
65618: PUSH
65619: LD_INT 2
65621: NEG
65622: PUSH
65623: LD_INT 0
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: LD_INT 2
65632: NEG
65633: PUSH
65634: LD_INT 1
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 3
65643: NEG
65644: PUSH
65645: LD_INT 1
65647: NEG
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: LIST
65657: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65658: LD_ADDR_VAR 0 46
65662: PUSH
65663: LD_INT 2
65665: NEG
65666: PUSH
65667: LD_INT 2
65669: NEG
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 2
65677: NEG
65678: PUSH
65679: LD_INT 3
65681: NEG
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 3
65689: NEG
65690: PUSH
65691: LD_INT 2
65693: NEG
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: LIST
65703: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65704: LD_ADDR_VAR 0 47
65708: PUSH
65709: LD_INT 2
65711: NEG
65712: PUSH
65713: LD_INT 3
65715: NEG
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 1
65723: NEG
65724: PUSH
65725: LD_INT 3
65727: NEG
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65737: LD_ADDR_VAR 0 48
65741: PUSH
65742: LD_INT 1
65744: PUSH
65745: LD_INT 2
65747: NEG
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 2
65755: PUSH
65756: LD_INT 1
65758: NEG
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65768: LD_ADDR_VAR 0 49
65772: PUSH
65773: LD_INT 3
65775: PUSH
65776: LD_INT 1
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 3
65785: PUSH
65786: LD_INT 2
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65797: LD_ADDR_VAR 0 50
65801: PUSH
65802: LD_INT 2
65804: PUSH
65805: LD_INT 3
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 1
65814: PUSH
65815: LD_INT 3
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65826: LD_ADDR_VAR 0 51
65830: PUSH
65831: LD_INT 1
65833: NEG
65834: PUSH
65835: LD_INT 2
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 2
65844: NEG
65845: PUSH
65846: LD_INT 1
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65857: LD_ADDR_VAR 0 52
65861: PUSH
65862: LD_INT 3
65864: NEG
65865: PUSH
65866: LD_INT 1
65868: NEG
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 3
65876: NEG
65877: PUSH
65878: LD_INT 2
65880: NEG
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65890: LD_ADDR_VAR 0 53
65894: PUSH
65895: LD_INT 1
65897: NEG
65898: PUSH
65899: LD_INT 3
65901: NEG
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 0
65909: PUSH
65910: LD_INT 3
65912: NEG
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 1
65920: PUSH
65921: LD_INT 2
65923: NEG
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: LIST
65933: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65934: LD_ADDR_VAR 0 54
65938: PUSH
65939: LD_INT 2
65941: PUSH
65942: LD_INT 1
65944: NEG
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 3
65952: PUSH
65953: LD_INT 0
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 3
65962: PUSH
65963: LD_INT 1
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: LIST
65974: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65975: LD_ADDR_VAR 0 55
65979: PUSH
65980: LD_INT 3
65982: PUSH
65983: LD_INT 2
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 3
65992: PUSH
65993: LD_INT 3
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 2
66002: PUSH
66003: LD_INT 3
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: LIST
66014: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66015: LD_ADDR_VAR 0 56
66019: PUSH
66020: LD_INT 1
66022: PUSH
66023: LD_INT 3
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 0
66032: PUSH
66033: LD_INT 3
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 1
66042: NEG
66043: PUSH
66044: LD_INT 2
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: LIST
66055: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66056: LD_ADDR_VAR 0 57
66060: PUSH
66061: LD_INT 2
66063: NEG
66064: PUSH
66065: LD_INT 1
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 3
66074: NEG
66075: PUSH
66076: LD_INT 0
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: LD_INT 3
66085: NEG
66086: PUSH
66087: LD_INT 1
66089: NEG
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: LIST
66099: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66100: LD_ADDR_VAR 0 58
66104: PUSH
66105: LD_INT 2
66107: NEG
66108: PUSH
66109: LD_INT 3
66111: NEG
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: LD_INT 3
66119: NEG
66120: PUSH
66121: LD_INT 2
66123: NEG
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 3
66131: NEG
66132: PUSH
66133: LD_INT 3
66135: NEG
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: LIST
66145: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66146: LD_ADDR_VAR 0 59
66150: PUSH
66151: LD_INT 1
66153: NEG
66154: PUSH
66155: LD_INT 2
66157: NEG
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 0
66165: PUSH
66166: LD_INT 2
66168: NEG
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 1
66176: PUSH
66177: LD_INT 1
66179: NEG
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: LIST
66189: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66190: LD_ADDR_VAR 0 60
66194: PUSH
66195: LD_INT 1
66197: PUSH
66198: LD_INT 1
66200: NEG
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 2
66208: PUSH
66209: LD_INT 0
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 2
66218: PUSH
66219: LD_INT 1
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: LIST
66230: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66231: LD_ADDR_VAR 0 61
66235: PUSH
66236: LD_INT 2
66238: PUSH
66239: LD_INT 1
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 2
66248: PUSH
66249: LD_INT 2
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: PUSH
66256: LD_INT 1
66258: PUSH
66259: LD_INT 2
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: LIST
66270: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66271: LD_ADDR_VAR 0 62
66275: PUSH
66276: LD_INT 1
66278: PUSH
66279: LD_INT 2
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 0
66288: PUSH
66289: LD_INT 2
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 1
66298: NEG
66299: PUSH
66300: LD_INT 1
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: LIST
66311: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66312: LD_ADDR_VAR 0 63
66316: PUSH
66317: LD_INT 1
66319: NEG
66320: PUSH
66321: LD_INT 1
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: LD_INT 2
66330: NEG
66331: PUSH
66332: LD_INT 0
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: LD_INT 2
66341: NEG
66342: PUSH
66343: LD_INT 1
66345: NEG
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: LIST
66355: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66356: LD_ADDR_VAR 0 64
66360: PUSH
66361: LD_INT 1
66363: NEG
66364: PUSH
66365: LD_INT 2
66367: NEG
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: LD_INT 2
66375: NEG
66376: PUSH
66377: LD_INT 1
66379: NEG
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 2
66387: NEG
66388: PUSH
66389: LD_INT 2
66391: NEG
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: LIST
66401: ST_TO_ADDR
// end ; 2 :
66402: GO 69668
66404: LD_INT 2
66406: DOUBLE
66407: EQUAL
66408: IFTRUE 66412
66410: GO 69667
66412: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66413: LD_ADDR_VAR 0 29
66417: PUSH
66418: LD_INT 4
66420: PUSH
66421: LD_INT 0
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 4
66430: PUSH
66431: LD_INT 1
66433: NEG
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: LD_INT 5
66441: PUSH
66442: LD_INT 0
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 5
66451: PUSH
66452: LD_INT 1
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: LD_INT 4
66461: PUSH
66462: LD_INT 1
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 3
66471: PUSH
66472: LD_INT 0
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 3
66481: PUSH
66482: LD_INT 1
66484: NEG
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 3
66492: PUSH
66493: LD_INT 2
66495: NEG
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 5
66503: PUSH
66504: LD_INT 2
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: LD_INT 3
66513: PUSH
66514: LD_INT 3
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: PUSH
66521: LD_INT 3
66523: PUSH
66524: LD_INT 2
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: LD_INT 4
66533: PUSH
66534: LD_INT 3
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 4
66543: PUSH
66544: LD_INT 4
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: LD_INT 3
66553: PUSH
66554: LD_INT 4
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: LD_INT 2
66563: PUSH
66564: LD_INT 3
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 2
66573: PUSH
66574: LD_INT 2
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 4
66583: PUSH
66584: LD_INT 2
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 2
66593: PUSH
66594: LD_INT 4
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 0
66603: PUSH
66604: LD_INT 4
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 0
66613: PUSH
66614: LD_INT 3
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: LD_INT 1
66623: PUSH
66624: LD_INT 4
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: LD_INT 1
66633: PUSH
66634: LD_INT 5
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: LD_INT 0
66643: PUSH
66644: LD_INT 5
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 1
66653: NEG
66654: PUSH
66655: LD_INT 4
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: LD_INT 1
66664: NEG
66665: PUSH
66666: LD_INT 3
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 2
66675: PUSH
66676: LD_INT 5
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 2
66685: NEG
66686: PUSH
66687: LD_INT 3
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 3
66696: NEG
66697: PUSH
66698: LD_INT 0
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: PUSH
66705: LD_INT 3
66707: NEG
66708: PUSH
66709: LD_INT 1
66711: NEG
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: PUSH
66717: LD_INT 2
66719: NEG
66720: PUSH
66721: LD_INT 0
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: PUSH
66728: LD_INT 2
66730: NEG
66731: PUSH
66732: LD_INT 1
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: LD_INT 3
66741: NEG
66742: PUSH
66743: LD_INT 1
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: PUSH
66750: LD_INT 4
66752: NEG
66753: PUSH
66754: LD_INT 0
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: LD_INT 4
66763: NEG
66764: PUSH
66765: LD_INT 1
66767: NEG
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: LD_INT 4
66775: NEG
66776: PUSH
66777: LD_INT 2
66779: NEG
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 2
66787: NEG
66788: PUSH
66789: LD_INT 2
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 4
66798: NEG
66799: PUSH
66800: LD_INT 4
66802: NEG
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 4
66810: NEG
66811: PUSH
66812: LD_INT 5
66814: NEG
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 3
66822: NEG
66823: PUSH
66824: LD_INT 4
66826: NEG
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PUSH
66832: LD_INT 3
66834: NEG
66835: PUSH
66836: LD_INT 3
66838: NEG
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 4
66846: NEG
66847: PUSH
66848: LD_INT 3
66850: NEG
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 5
66858: NEG
66859: PUSH
66860: LD_INT 4
66862: NEG
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: LD_INT 5
66870: NEG
66871: PUSH
66872: LD_INT 5
66874: NEG
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: LD_INT 3
66882: NEG
66883: PUSH
66884: LD_INT 5
66886: NEG
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 5
66894: NEG
66895: PUSH
66896: LD_INT 3
66898: NEG
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: LIST
66915: LIST
66916: LIST
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: LIST
66923: LIST
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66951: LD_ADDR_VAR 0 30
66955: PUSH
66956: LD_INT 4
66958: PUSH
66959: LD_INT 4
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PUSH
66966: LD_INT 4
66968: PUSH
66969: LD_INT 3
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: PUSH
66976: LD_INT 5
66978: PUSH
66979: LD_INT 4
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 5
66988: PUSH
66989: LD_INT 5
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: LD_INT 4
66998: PUSH
66999: LD_INT 5
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: PUSH
67006: LD_INT 3
67008: PUSH
67009: LD_INT 4
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: LD_INT 3
67018: PUSH
67019: LD_INT 3
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PUSH
67026: LD_INT 5
67028: PUSH
67029: LD_INT 3
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PUSH
67036: LD_INT 3
67038: PUSH
67039: LD_INT 5
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: LD_INT 0
67048: PUSH
67049: LD_INT 3
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: LD_INT 0
67058: PUSH
67059: LD_INT 2
67061: PUSH
67062: EMPTY
67063: LIST
67064: LIST
67065: PUSH
67066: LD_INT 1
67068: PUSH
67069: LD_INT 3
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: LD_INT 1
67078: PUSH
67079: LD_INT 4
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 0
67088: PUSH
67089: LD_INT 4
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 1
67098: NEG
67099: PUSH
67100: LD_INT 3
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 1
67109: NEG
67110: PUSH
67111: LD_INT 2
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: LD_INT 2
67120: PUSH
67121: LD_INT 4
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: LD_INT 2
67130: NEG
67131: PUSH
67132: LD_INT 2
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 4
67141: NEG
67142: PUSH
67143: LD_INT 0
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 4
67152: NEG
67153: PUSH
67154: LD_INT 1
67156: NEG
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: LD_INT 3
67164: NEG
67165: PUSH
67166: LD_INT 0
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: PUSH
67173: LD_INT 3
67175: NEG
67176: PUSH
67177: LD_INT 1
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: PUSH
67184: LD_INT 4
67186: NEG
67187: PUSH
67188: LD_INT 1
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: LD_INT 5
67197: NEG
67198: PUSH
67199: LD_INT 0
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 5
67208: NEG
67209: PUSH
67210: LD_INT 1
67212: NEG
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: PUSH
67218: LD_INT 5
67220: NEG
67221: PUSH
67222: LD_INT 2
67224: NEG
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: PUSH
67230: LD_INT 3
67232: NEG
67233: PUSH
67234: LD_INT 2
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: LD_INT 3
67243: NEG
67244: PUSH
67245: LD_INT 3
67247: NEG
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 3
67255: NEG
67256: PUSH
67257: LD_INT 4
67259: NEG
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 2
67267: NEG
67268: PUSH
67269: LD_INT 3
67271: NEG
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: PUSH
67277: LD_INT 2
67279: NEG
67280: PUSH
67281: LD_INT 2
67283: NEG
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 3
67291: NEG
67292: PUSH
67293: LD_INT 2
67295: NEG
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: PUSH
67301: LD_INT 4
67303: NEG
67304: PUSH
67305: LD_INT 3
67307: NEG
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_INT 4
67315: NEG
67316: PUSH
67317: LD_INT 4
67319: NEG
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 2
67327: NEG
67328: PUSH
67329: LD_INT 4
67331: NEG
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 4
67339: NEG
67340: PUSH
67341: LD_INT 2
67343: NEG
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 0
67351: PUSH
67352: LD_INT 4
67354: NEG
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: LD_INT 0
67362: PUSH
67363: LD_INT 5
67365: NEG
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 1
67373: PUSH
67374: LD_INT 4
67376: NEG
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 1
67384: PUSH
67385: LD_INT 3
67387: NEG
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: LD_INT 0
67395: PUSH
67396: LD_INT 3
67398: NEG
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: LD_INT 1
67406: NEG
67407: PUSH
67408: LD_INT 4
67410: NEG
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: PUSH
67416: LD_INT 1
67418: NEG
67419: PUSH
67420: LD_INT 5
67422: NEG
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 2
67430: PUSH
67431: LD_INT 3
67433: NEG
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 2
67441: NEG
67442: PUSH
67443: LD_INT 5
67445: NEG
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: LIST
67459: LIST
67460: LIST
67461: LIST
67462: LIST
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: LIST
67487: LIST
67488: LIST
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67498: LD_ADDR_VAR 0 31
67502: PUSH
67503: LD_INT 0
67505: PUSH
67506: LD_INT 4
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 0
67515: PUSH
67516: LD_INT 3
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: LD_INT 1
67525: PUSH
67526: LD_INT 4
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: PUSH
67533: LD_INT 1
67535: PUSH
67536: LD_INT 5
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 0
67545: PUSH
67546: LD_INT 5
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 1
67555: NEG
67556: PUSH
67557: LD_INT 4
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 1
67566: NEG
67567: PUSH
67568: LD_INT 3
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 2
67577: PUSH
67578: LD_INT 5
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 2
67587: NEG
67588: PUSH
67589: LD_INT 3
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 3
67598: NEG
67599: PUSH
67600: LD_INT 0
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: PUSH
67607: LD_INT 3
67609: NEG
67610: PUSH
67611: LD_INT 1
67613: NEG
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_INT 2
67621: NEG
67622: PUSH
67623: LD_INT 0
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 2
67632: NEG
67633: PUSH
67634: LD_INT 1
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: LD_INT 3
67643: NEG
67644: PUSH
67645: LD_INT 1
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: PUSH
67652: LD_INT 4
67654: NEG
67655: PUSH
67656: LD_INT 0
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: LD_INT 4
67665: NEG
67666: PUSH
67667: LD_INT 1
67669: NEG
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 4
67677: NEG
67678: PUSH
67679: LD_INT 2
67681: NEG
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PUSH
67687: LD_INT 2
67689: NEG
67690: PUSH
67691: LD_INT 2
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: LD_INT 4
67700: NEG
67701: PUSH
67702: LD_INT 4
67704: NEG
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 4
67712: NEG
67713: PUSH
67714: LD_INT 5
67716: NEG
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 3
67724: NEG
67725: PUSH
67726: LD_INT 4
67728: NEG
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 3
67736: NEG
67737: PUSH
67738: LD_INT 3
67740: NEG
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: LD_INT 4
67748: NEG
67749: PUSH
67750: LD_INT 3
67752: NEG
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: PUSH
67758: LD_INT 5
67760: NEG
67761: PUSH
67762: LD_INT 4
67764: NEG
67765: PUSH
67766: EMPTY
67767: LIST
67768: LIST
67769: PUSH
67770: LD_INT 5
67772: NEG
67773: PUSH
67774: LD_INT 5
67776: NEG
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 3
67784: NEG
67785: PUSH
67786: LD_INT 5
67788: NEG
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 5
67796: NEG
67797: PUSH
67798: LD_INT 3
67800: NEG
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PUSH
67806: LD_INT 0
67808: PUSH
67809: LD_INT 3
67811: NEG
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 0
67819: PUSH
67820: LD_INT 4
67822: NEG
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 1
67830: PUSH
67831: LD_INT 3
67833: NEG
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: LD_INT 1
67841: PUSH
67842: LD_INT 2
67844: NEG
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 0
67852: PUSH
67853: LD_INT 2
67855: NEG
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PUSH
67861: LD_INT 1
67863: NEG
67864: PUSH
67865: LD_INT 3
67867: NEG
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 1
67875: NEG
67876: PUSH
67877: LD_INT 4
67879: NEG
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: PUSH
67885: LD_INT 2
67887: PUSH
67888: LD_INT 2
67890: NEG
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: LD_INT 2
67898: NEG
67899: PUSH
67900: LD_INT 4
67902: NEG
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 4
67910: PUSH
67911: LD_INT 0
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 4
67920: PUSH
67921: LD_INT 1
67923: NEG
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: PUSH
67929: LD_INT 5
67931: PUSH
67932: LD_INT 0
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: PUSH
67939: LD_INT 5
67941: PUSH
67942: LD_INT 1
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PUSH
67949: LD_INT 4
67951: PUSH
67952: LD_INT 1
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 3
67961: PUSH
67962: LD_INT 0
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: PUSH
67969: LD_INT 3
67971: PUSH
67972: LD_INT 1
67974: NEG
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 3
67982: PUSH
67983: LD_INT 2
67985: NEG
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: LD_INT 5
67993: PUSH
67994: LD_INT 2
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: LIST
68010: LIST
68011: LIST
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: LIST
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: LIST
68028: LIST
68029: LIST
68030: LIST
68031: LIST
68032: LIST
68033: LIST
68034: LIST
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: LIST
68046: LIST
68047: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68048: LD_ADDR_VAR 0 32
68052: PUSH
68053: LD_INT 4
68055: NEG
68056: PUSH
68057: LD_INT 0
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: LD_INT 4
68066: NEG
68067: PUSH
68068: LD_INT 1
68070: NEG
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: LD_INT 3
68078: NEG
68079: PUSH
68080: LD_INT 0
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 3
68089: NEG
68090: PUSH
68091: LD_INT 1
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 4
68100: NEG
68101: PUSH
68102: LD_INT 1
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: LD_INT 5
68111: NEG
68112: PUSH
68113: LD_INT 0
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: LD_INT 5
68122: NEG
68123: PUSH
68124: LD_INT 1
68126: NEG
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: LD_INT 5
68134: NEG
68135: PUSH
68136: LD_INT 2
68138: NEG
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: LD_INT 3
68146: NEG
68147: PUSH
68148: LD_INT 2
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: PUSH
68155: LD_INT 3
68157: NEG
68158: PUSH
68159: LD_INT 3
68161: NEG
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PUSH
68167: LD_INT 3
68169: NEG
68170: PUSH
68171: LD_INT 4
68173: NEG
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 2
68181: NEG
68182: PUSH
68183: LD_INT 3
68185: NEG
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: PUSH
68191: LD_INT 2
68193: NEG
68194: PUSH
68195: LD_INT 2
68197: NEG
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PUSH
68203: LD_INT 3
68205: NEG
68206: PUSH
68207: LD_INT 2
68209: NEG
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: PUSH
68215: LD_INT 4
68217: NEG
68218: PUSH
68219: LD_INT 3
68221: NEG
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: LD_INT 4
68229: NEG
68230: PUSH
68231: LD_INT 4
68233: NEG
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: PUSH
68239: LD_INT 2
68241: NEG
68242: PUSH
68243: LD_INT 4
68245: NEG
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 4
68253: NEG
68254: PUSH
68255: LD_INT 2
68257: NEG
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: LD_INT 0
68265: PUSH
68266: LD_INT 4
68268: NEG
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PUSH
68274: LD_INT 0
68276: PUSH
68277: LD_INT 5
68279: NEG
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 1
68287: PUSH
68288: LD_INT 4
68290: NEG
68291: PUSH
68292: EMPTY
68293: LIST
68294: LIST
68295: PUSH
68296: LD_INT 1
68298: PUSH
68299: LD_INT 3
68301: NEG
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 0
68309: PUSH
68310: LD_INT 3
68312: NEG
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 1
68320: NEG
68321: PUSH
68322: LD_INT 4
68324: NEG
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: PUSH
68330: LD_INT 1
68332: NEG
68333: PUSH
68334: LD_INT 5
68336: NEG
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 2
68344: PUSH
68345: LD_INT 3
68347: NEG
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: LD_INT 2
68355: NEG
68356: PUSH
68357: LD_INT 5
68359: NEG
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 3
68367: PUSH
68368: LD_INT 0
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 3
68377: PUSH
68378: LD_INT 1
68380: NEG
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: PUSH
68386: LD_INT 4
68388: PUSH
68389: LD_INT 0
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: PUSH
68396: LD_INT 4
68398: PUSH
68399: LD_INT 1
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: LD_INT 3
68408: PUSH
68409: LD_INT 1
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PUSH
68416: LD_INT 2
68418: PUSH
68419: LD_INT 0
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: PUSH
68426: LD_INT 2
68428: PUSH
68429: LD_INT 1
68431: NEG
68432: PUSH
68433: EMPTY
68434: LIST
68435: LIST
68436: PUSH
68437: LD_INT 2
68439: PUSH
68440: LD_INT 2
68442: NEG
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: PUSH
68448: LD_INT 4
68450: PUSH
68451: LD_INT 2
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: PUSH
68458: LD_INT 4
68460: PUSH
68461: LD_INT 4
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 4
68470: PUSH
68471: LD_INT 3
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: PUSH
68478: LD_INT 5
68480: PUSH
68481: LD_INT 4
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: LD_INT 5
68490: PUSH
68491: LD_INT 5
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: PUSH
68498: LD_INT 4
68500: PUSH
68501: LD_INT 5
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: PUSH
68508: LD_INT 3
68510: PUSH
68511: LD_INT 4
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PUSH
68518: LD_INT 3
68520: PUSH
68521: LD_INT 3
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_INT 5
68530: PUSH
68531: LD_INT 3
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: LD_INT 3
68540: PUSH
68541: LD_INT 5
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: EMPTY
68549: LIST
68550: LIST
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: LIST
68574: LIST
68575: LIST
68576: LIST
68577: LIST
68578: LIST
68579: LIST
68580: LIST
68581: LIST
68582: LIST
68583: LIST
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: LIST
68589: LIST
68590: LIST
68591: LIST
68592: LIST
68593: LIST
68594: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68595: LD_ADDR_VAR 0 33
68599: PUSH
68600: LD_INT 4
68602: NEG
68603: PUSH
68604: LD_INT 4
68606: NEG
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: LD_INT 4
68614: NEG
68615: PUSH
68616: LD_INT 5
68618: NEG
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 3
68626: NEG
68627: PUSH
68628: LD_INT 4
68630: NEG
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 3
68638: NEG
68639: PUSH
68640: LD_INT 3
68642: NEG
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 4
68650: NEG
68651: PUSH
68652: LD_INT 3
68654: NEG
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: LD_INT 5
68662: NEG
68663: PUSH
68664: LD_INT 4
68666: NEG
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PUSH
68672: LD_INT 5
68674: NEG
68675: PUSH
68676: LD_INT 5
68678: NEG
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PUSH
68684: LD_INT 3
68686: NEG
68687: PUSH
68688: LD_INT 5
68690: NEG
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: PUSH
68696: LD_INT 5
68698: NEG
68699: PUSH
68700: LD_INT 3
68702: NEG
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: PUSH
68708: LD_INT 0
68710: PUSH
68711: LD_INT 3
68713: NEG
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PUSH
68719: LD_INT 0
68721: PUSH
68722: LD_INT 4
68724: NEG
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: LD_INT 1
68732: PUSH
68733: LD_INT 3
68735: NEG
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: LD_INT 1
68743: PUSH
68744: LD_INT 2
68746: NEG
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 0
68754: PUSH
68755: LD_INT 2
68757: NEG
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 1
68765: NEG
68766: PUSH
68767: LD_INT 3
68769: NEG
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 1
68777: NEG
68778: PUSH
68779: LD_INT 4
68781: NEG
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 2
68789: PUSH
68790: LD_INT 2
68792: NEG
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 2
68800: NEG
68801: PUSH
68802: LD_INT 4
68804: NEG
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 4
68812: PUSH
68813: LD_INT 0
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: LD_INT 4
68822: PUSH
68823: LD_INT 1
68825: NEG
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 5
68833: PUSH
68834: LD_INT 0
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PUSH
68841: LD_INT 5
68843: PUSH
68844: LD_INT 1
68846: PUSH
68847: EMPTY
68848: LIST
68849: LIST
68850: PUSH
68851: LD_INT 4
68853: PUSH
68854: LD_INT 1
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: PUSH
68861: LD_INT 3
68863: PUSH
68864: LD_INT 0
68866: PUSH
68867: EMPTY
68868: LIST
68869: LIST
68870: PUSH
68871: LD_INT 3
68873: PUSH
68874: LD_INT 1
68876: NEG
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 3
68884: PUSH
68885: LD_INT 2
68887: NEG
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PUSH
68893: LD_INT 5
68895: PUSH
68896: LD_INT 2
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: PUSH
68903: LD_INT 3
68905: PUSH
68906: LD_INT 3
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: PUSH
68913: LD_INT 3
68915: PUSH
68916: LD_INT 2
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: LD_INT 4
68925: PUSH
68926: LD_INT 3
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 4
68935: PUSH
68936: LD_INT 4
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: PUSH
68943: LD_INT 3
68945: PUSH
68946: LD_INT 4
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: LD_INT 2
68955: PUSH
68956: LD_INT 3
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: LD_INT 2
68965: PUSH
68966: LD_INT 2
68968: PUSH
68969: EMPTY
68970: LIST
68971: LIST
68972: PUSH
68973: LD_INT 4
68975: PUSH
68976: LD_INT 2
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 2
68985: PUSH
68986: LD_INT 4
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: LD_INT 0
68995: PUSH
68996: LD_INT 4
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: PUSH
69003: LD_INT 0
69005: PUSH
69006: LD_INT 3
69008: PUSH
69009: EMPTY
69010: LIST
69011: LIST
69012: PUSH
69013: LD_INT 1
69015: PUSH
69016: LD_INT 4
69018: PUSH
69019: EMPTY
69020: LIST
69021: LIST
69022: PUSH
69023: LD_INT 1
69025: PUSH
69026: LD_INT 5
69028: PUSH
69029: EMPTY
69030: LIST
69031: LIST
69032: PUSH
69033: LD_INT 0
69035: PUSH
69036: LD_INT 5
69038: PUSH
69039: EMPTY
69040: LIST
69041: LIST
69042: PUSH
69043: LD_INT 1
69045: NEG
69046: PUSH
69047: LD_INT 4
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PUSH
69054: LD_INT 1
69056: NEG
69057: PUSH
69058: LD_INT 3
69060: PUSH
69061: EMPTY
69062: LIST
69063: LIST
69064: PUSH
69065: LD_INT 2
69067: PUSH
69068: LD_INT 5
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: LD_INT 2
69077: NEG
69078: PUSH
69079: LD_INT 3
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: LIST
69090: LIST
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: LIST
69096: LIST
69097: LIST
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: LIST
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: LIST
69130: LIST
69131: LIST
69132: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69133: LD_ADDR_VAR 0 34
69137: PUSH
69138: LD_INT 0
69140: PUSH
69141: LD_INT 4
69143: NEG
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: PUSH
69149: LD_INT 0
69151: PUSH
69152: LD_INT 5
69154: NEG
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: PUSH
69160: LD_INT 1
69162: PUSH
69163: LD_INT 4
69165: NEG
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: PUSH
69171: LD_INT 1
69173: PUSH
69174: LD_INT 3
69176: NEG
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PUSH
69182: LD_INT 0
69184: PUSH
69185: LD_INT 3
69187: NEG
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 1
69195: NEG
69196: PUSH
69197: LD_INT 4
69199: NEG
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PUSH
69205: LD_INT 1
69207: NEG
69208: PUSH
69209: LD_INT 5
69211: NEG
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 2
69219: PUSH
69220: LD_INT 3
69222: NEG
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: LD_INT 2
69230: NEG
69231: PUSH
69232: LD_INT 5
69234: NEG
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: LD_INT 3
69242: PUSH
69243: LD_INT 0
69245: PUSH
69246: EMPTY
69247: LIST
69248: LIST
69249: PUSH
69250: LD_INT 3
69252: PUSH
69253: LD_INT 1
69255: NEG
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: PUSH
69261: LD_INT 4
69263: PUSH
69264: LD_INT 0
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: PUSH
69271: LD_INT 4
69273: PUSH
69274: LD_INT 1
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: PUSH
69281: LD_INT 3
69283: PUSH
69284: LD_INT 1
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: PUSH
69291: LD_INT 2
69293: PUSH
69294: LD_INT 0
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PUSH
69301: LD_INT 2
69303: PUSH
69304: LD_INT 1
69306: NEG
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: PUSH
69312: LD_INT 2
69314: PUSH
69315: LD_INT 2
69317: NEG
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: PUSH
69323: LD_INT 4
69325: PUSH
69326: LD_INT 2
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: PUSH
69333: LD_INT 4
69335: PUSH
69336: LD_INT 4
69338: PUSH
69339: EMPTY
69340: LIST
69341: LIST
69342: PUSH
69343: LD_INT 4
69345: PUSH
69346: LD_INT 3
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: PUSH
69353: LD_INT 5
69355: PUSH
69356: LD_INT 4
69358: PUSH
69359: EMPTY
69360: LIST
69361: LIST
69362: PUSH
69363: LD_INT 5
69365: PUSH
69366: LD_INT 5
69368: PUSH
69369: EMPTY
69370: LIST
69371: LIST
69372: PUSH
69373: LD_INT 4
69375: PUSH
69376: LD_INT 5
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: PUSH
69383: LD_INT 3
69385: PUSH
69386: LD_INT 4
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PUSH
69393: LD_INT 3
69395: PUSH
69396: LD_INT 3
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: PUSH
69403: LD_INT 5
69405: PUSH
69406: LD_INT 3
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PUSH
69413: LD_INT 3
69415: PUSH
69416: LD_INT 5
69418: PUSH
69419: EMPTY
69420: LIST
69421: LIST
69422: PUSH
69423: LD_INT 0
69425: PUSH
69426: LD_INT 3
69428: PUSH
69429: EMPTY
69430: LIST
69431: LIST
69432: PUSH
69433: LD_INT 0
69435: PUSH
69436: LD_INT 2
69438: PUSH
69439: EMPTY
69440: LIST
69441: LIST
69442: PUSH
69443: LD_INT 1
69445: PUSH
69446: LD_INT 3
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: PUSH
69453: LD_INT 1
69455: PUSH
69456: LD_INT 4
69458: PUSH
69459: EMPTY
69460: LIST
69461: LIST
69462: PUSH
69463: LD_INT 0
69465: PUSH
69466: LD_INT 4
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: LD_INT 1
69475: NEG
69476: PUSH
69477: LD_INT 3
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: PUSH
69484: LD_INT 1
69486: NEG
69487: PUSH
69488: LD_INT 2
69490: PUSH
69491: EMPTY
69492: LIST
69493: LIST
69494: PUSH
69495: LD_INT 2
69497: PUSH
69498: LD_INT 4
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: LD_INT 2
69507: NEG
69508: PUSH
69509: LD_INT 2
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: LD_INT 4
69518: NEG
69519: PUSH
69520: LD_INT 0
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: PUSH
69527: LD_INT 4
69529: NEG
69530: PUSH
69531: LD_INT 1
69533: NEG
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: PUSH
69539: LD_INT 3
69541: NEG
69542: PUSH
69543: LD_INT 0
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: PUSH
69550: LD_INT 3
69552: NEG
69553: PUSH
69554: LD_INT 1
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: PUSH
69561: LD_INT 4
69563: NEG
69564: PUSH
69565: LD_INT 1
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PUSH
69572: LD_INT 5
69574: NEG
69575: PUSH
69576: LD_INT 0
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PUSH
69583: LD_INT 5
69585: NEG
69586: PUSH
69587: LD_INT 1
69589: NEG
69590: PUSH
69591: EMPTY
69592: LIST
69593: LIST
69594: PUSH
69595: LD_INT 5
69597: NEG
69598: PUSH
69599: LD_INT 2
69601: NEG
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: LD_INT 3
69609: NEG
69610: PUSH
69611: LD_INT 2
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: LIST
69625: LIST
69626: LIST
69627: LIST
69628: LIST
69629: LIST
69630: LIST
69631: LIST
69632: LIST
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: LIST
69638: LIST
69639: LIST
69640: LIST
69641: LIST
69642: LIST
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: LIST
69649: LIST
69650: LIST
69651: LIST
69652: LIST
69653: LIST
69654: LIST
69655: LIST
69656: LIST
69657: LIST
69658: LIST
69659: LIST
69660: LIST
69661: LIST
69662: LIST
69663: LIST
69664: ST_TO_ADDR
// end ; end ;
69665: GO 69668
69667: POP
// case btype of b_depot , b_warehouse :
69668: LD_VAR 0 1
69672: PUSH
69673: LD_INT 0
69675: DOUBLE
69676: EQUAL
69677: IFTRUE 69687
69679: LD_INT 1
69681: DOUBLE
69682: EQUAL
69683: IFTRUE 69687
69685: GO 69888
69687: POP
// case nation of nation_american :
69688: LD_VAR 0 5
69692: PUSH
69693: LD_INT 1
69695: DOUBLE
69696: EQUAL
69697: IFTRUE 69701
69699: GO 69757
69701: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
69702: LD_ADDR_VAR 0 9
69706: PUSH
69707: LD_VAR 0 11
69711: PUSH
69712: LD_VAR 0 12
69716: PUSH
69717: LD_VAR 0 13
69721: PUSH
69722: LD_VAR 0 14
69726: PUSH
69727: LD_VAR 0 15
69731: PUSH
69732: LD_VAR 0 16
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: LIST
69741: LIST
69742: LIST
69743: LIST
69744: PUSH
69745: LD_VAR 0 4
69749: PUSH
69750: LD_INT 1
69752: PLUS
69753: ARRAY
69754: ST_TO_ADDR
69755: GO 69886
69757: LD_INT 2
69759: DOUBLE
69760: EQUAL
69761: IFTRUE 69765
69763: GO 69821
69765: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
69766: LD_ADDR_VAR 0 9
69770: PUSH
69771: LD_VAR 0 17
69775: PUSH
69776: LD_VAR 0 18
69780: PUSH
69781: LD_VAR 0 19
69785: PUSH
69786: LD_VAR 0 20
69790: PUSH
69791: LD_VAR 0 21
69795: PUSH
69796: LD_VAR 0 22
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: LIST
69805: LIST
69806: LIST
69807: LIST
69808: PUSH
69809: LD_VAR 0 4
69813: PUSH
69814: LD_INT 1
69816: PLUS
69817: ARRAY
69818: ST_TO_ADDR
69819: GO 69886
69821: LD_INT 3
69823: DOUBLE
69824: EQUAL
69825: IFTRUE 69829
69827: GO 69885
69829: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69830: LD_ADDR_VAR 0 9
69834: PUSH
69835: LD_VAR 0 23
69839: PUSH
69840: LD_VAR 0 24
69844: PUSH
69845: LD_VAR 0 25
69849: PUSH
69850: LD_VAR 0 26
69854: PUSH
69855: LD_VAR 0 27
69859: PUSH
69860: LD_VAR 0 28
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: LIST
69869: LIST
69870: LIST
69871: LIST
69872: PUSH
69873: LD_VAR 0 4
69877: PUSH
69878: LD_INT 1
69880: PLUS
69881: ARRAY
69882: ST_TO_ADDR
69883: GO 69886
69885: POP
69886: GO 70441
69888: LD_INT 2
69890: DOUBLE
69891: EQUAL
69892: IFTRUE 69902
69894: LD_INT 3
69896: DOUBLE
69897: EQUAL
69898: IFTRUE 69902
69900: GO 69958
69902: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69903: LD_ADDR_VAR 0 9
69907: PUSH
69908: LD_VAR 0 29
69912: PUSH
69913: LD_VAR 0 30
69917: PUSH
69918: LD_VAR 0 31
69922: PUSH
69923: LD_VAR 0 32
69927: PUSH
69928: LD_VAR 0 33
69932: PUSH
69933: LD_VAR 0 34
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: LIST
69942: LIST
69943: LIST
69944: LIST
69945: PUSH
69946: LD_VAR 0 4
69950: PUSH
69951: LD_INT 1
69953: PLUS
69954: ARRAY
69955: ST_TO_ADDR
69956: GO 70441
69958: LD_INT 16
69960: DOUBLE
69961: EQUAL
69962: IFTRUE 70020
69964: LD_INT 17
69966: DOUBLE
69967: EQUAL
69968: IFTRUE 70020
69970: LD_INT 18
69972: DOUBLE
69973: EQUAL
69974: IFTRUE 70020
69976: LD_INT 19
69978: DOUBLE
69979: EQUAL
69980: IFTRUE 70020
69982: LD_INT 22
69984: DOUBLE
69985: EQUAL
69986: IFTRUE 70020
69988: LD_INT 20
69990: DOUBLE
69991: EQUAL
69992: IFTRUE 70020
69994: LD_INT 21
69996: DOUBLE
69997: EQUAL
69998: IFTRUE 70020
70000: LD_INT 23
70002: DOUBLE
70003: EQUAL
70004: IFTRUE 70020
70006: LD_INT 24
70008: DOUBLE
70009: EQUAL
70010: IFTRUE 70020
70012: LD_INT 25
70014: DOUBLE
70015: EQUAL
70016: IFTRUE 70020
70018: GO 70076
70020: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70021: LD_ADDR_VAR 0 9
70025: PUSH
70026: LD_VAR 0 35
70030: PUSH
70031: LD_VAR 0 36
70035: PUSH
70036: LD_VAR 0 37
70040: PUSH
70041: LD_VAR 0 38
70045: PUSH
70046: LD_VAR 0 39
70050: PUSH
70051: LD_VAR 0 40
70055: PUSH
70056: EMPTY
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: PUSH
70064: LD_VAR 0 4
70068: PUSH
70069: LD_INT 1
70071: PLUS
70072: ARRAY
70073: ST_TO_ADDR
70074: GO 70441
70076: LD_INT 6
70078: DOUBLE
70079: EQUAL
70080: IFTRUE 70132
70082: LD_INT 7
70084: DOUBLE
70085: EQUAL
70086: IFTRUE 70132
70088: LD_INT 8
70090: DOUBLE
70091: EQUAL
70092: IFTRUE 70132
70094: LD_INT 13
70096: DOUBLE
70097: EQUAL
70098: IFTRUE 70132
70100: LD_INT 12
70102: DOUBLE
70103: EQUAL
70104: IFTRUE 70132
70106: LD_INT 15
70108: DOUBLE
70109: EQUAL
70110: IFTRUE 70132
70112: LD_INT 11
70114: DOUBLE
70115: EQUAL
70116: IFTRUE 70132
70118: LD_INT 14
70120: DOUBLE
70121: EQUAL
70122: IFTRUE 70132
70124: LD_INT 10
70126: DOUBLE
70127: EQUAL
70128: IFTRUE 70132
70130: GO 70188
70132: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70133: LD_ADDR_VAR 0 9
70137: PUSH
70138: LD_VAR 0 41
70142: PUSH
70143: LD_VAR 0 42
70147: PUSH
70148: LD_VAR 0 43
70152: PUSH
70153: LD_VAR 0 44
70157: PUSH
70158: LD_VAR 0 45
70162: PUSH
70163: LD_VAR 0 46
70167: PUSH
70168: EMPTY
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: LIST
70174: LIST
70175: PUSH
70176: LD_VAR 0 4
70180: PUSH
70181: LD_INT 1
70183: PLUS
70184: ARRAY
70185: ST_TO_ADDR
70186: GO 70441
70188: LD_INT 36
70190: DOUBLE
70191: EQUAL
70192: IFTRUE 70196
70194: GO 70252
70196: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70197: LD_ADDR_VAR 0 9
70201: PUSH
70202: LD_VAR 0 47
70206: PUSH
70207: LD_VAR 0 48
70211: PUSH
70212: LD_VAR 0 49
70216: PUSH
70217: LD_VAR 0 50
70221: PUSH
70222: LD_VAR 0 51
70226: PUSH
70227: LD_VAR 0 52
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: LIST
70236: LIST
70237: LIST
70238: LIST
70239: PUSH
70240: LD_VAR 0 4
70244: PUSH
70245: LD_INT 1
70247: PLUS
70248: ARRAY
70249: ST_TO_ADDR
70250: GO 70441
70252: LD_INT 4
70254: DOUBLE
70255: EQUAL
70256: IFTRUE 70278
70258: LD_INT 5
70260: DOUBLE
70261: EQUAL
70262: IFTRUE 70278
70264: LD_INT 34
70266: DOUBLE
70267: EQUAL
70268: IFTRUE 70278
70270: LD_INT 37
70272: DOUBLE
70273: EQUAL
70274: IFTRUE 70278
70276: GO 70334
70278: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70279: LD_ADDR_VAR 0 9
70283: PUSH
70284: LD_VAR 0 53
70288: PUSH
70289: LD_VAR 0 54
70293: PUSH
70294: LD_VAR 0 55
70298: PUSH
70299: LD_VAR 0 56
70303: PUSH
70304: LD_VAR 0 57
70308: PUSH
70309: LD_VAR 0 58
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: PUSH
70322: LD_VAR 0 4
70326: PUSH
70327: LD_INT 1
70329: PLUS
70330: ARRAY
70331: ST_TO_ADDR
70332: GO 70441
70334: LD_INT 31
70336: DOUBLE
70337: EQUAL
70338: IFTRUE 70384
70340: LD_INT 32
70342: DOUBLE
70343: EQUAL
70344: IFTRUE 70384
70346: LD_INT 33
70348: DOUBLE
70349: EQUAL
70350: IFTRUE 70384
70352: LD_INT 27
70354: DOUBLE
70355: EQUAL
70356: IFTRUE 70384
70358: LD_INT 26
70360: DOUBLE
70361: EQUAL
70362: IFTRUE 70384
70364: LD_INT 28
70366: DOUBLE
70367: EQUAL
70368: IFTRUE 70384
70370: LD_INT 29
70372: DOUBLE
70373: EQUAL
70374: IFTRUE 70384
70376: LD_INT 30
70378: DOUBLE
70379: EQUAL
70380: IFTRUE 70384
70382: GO 70440
70384: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70385: LD_ADDR_VAR 0 9
70389: PUSH
70390: LD_VAR 0 59
70394: PUSH
70395: LD_VAR 0 60
70399: PUSH
70400: LD_VAR 0 61
70404: PUSH
70405: LD_VAR 0 62
70409: PUSH
70410: LD_VAR 0 63
70414: PUSH
70415: LD_VAR 0 64
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: LIST
70424: LIST
70425: LIST
70426: LIST
70427: PUSH
70428: LD_VAR 0 4
70432: PUSH
70433: LD_INT 1
70435: PLUS
70436: ARRAY
70437: ST_TO_ADDR
70438: GO 70441
70440: POP
// temp_list2 = [ ] ;
70441: LD_ADDR_VAR 0 10
70445: PUSH
70446: EMPTY
70447: ST_TO_ADDR
// for i in temp_list do
70448: LD_ADDR_VAR 0 8
70452: PUSH
70453: LD_VAR 0 9
70457: PUSH
70458: FOR_IN
70459: IFFALSE 70511
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70461: LD_ADDR_VAR 0 10
70465: PUSH
70466: LD_VAR 0 10
70470: PUSH
70471: LD_VAR 0 8
70475: PUSH
70476: LD_INT 1
70478: ARRAY
70479: PUSH
70480: LD_VAR 0 2
70484: PLUS
70485: PUSH
70486: LD_VAR 0 8
70490: PUSH
70491: LD_INT 2
70493: ARRAY
70494: PUSH
70495: LD_VAR 0 3
70499: PLUS
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: PUSH
70505: EMPTY
70506: LIST
70507: ADD
70508: ST_TO_ADDR
70509: GO 70458
70511: POP
70512: POP
// result = temp_list2 ;
70513: LD_ADDR_VAR 0 7
70517: PUSH
70518: LD_VAR 0 10
70522: ST_TO_ADDR
// end ;
70523: LD_VAR 0 7
70527: RET
// export function EnemyInRange ( unit , dist ) ; begin
70528: LD_INT 0
70530: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70531: LD_ADDR_VAR 0 3
70535: PUSH
70536: LD_VAR 0 1
70540: PPUSH
70541: CALL_OW 255
70545: PPUSH
70546: LD_VAR 0 1
70550: PPUSH
70551: CALL_OW 250
70555: PPUSH
70556: LD_VAR 0 1
70560: PPUSH
70561: CALL_OW 251
70565: PPUSH
70566: LD_VAR 0 2
70570: PPUSH
70571: CALL 43785 0 4
70575: PUSH
70576: LD_INT 4
70578: ARRAY
70579: ST_TO_ADDR
// end ;
70580: LD_VAR 0 3
70584: RET
// export function PlayerSeeMe ( unit ) ; begin
70585: LD_INT 0
70587: PPUSH
// result := See ( your_side , unit ) ;
70588: LD_ADDR_VAR 0 2
70592: PUSH
70593: LD_OWVAR 2
70597: PPUSH
70598: LD_VAR 0 1
70602: PPUSH
70603: CALL_OW 292
70607: ST_TO_ADDR
// end ;
70608: LD_VAR 0 2
70612: RET
// export function ReverseDir ( unit ) ; begin
70613: LD_INT 0
70615: PPUSH
// if not unit then
70616: LD_VAR 0 1
70620: NOT
70621: IFFALSE 70625
// exit ;
70623: GO 70648
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70625: LD_ADDR_VAR 0 2
70629: PUSH
70630: LD_VAR 0 1
70634: PPUSH
70635: CALL_OW 254
70639: PUSH
70640: LD_INT 3
70642: PLUS
70643: PUSH
70644: LD_INT 6
70646: MOD
70647: ST_TO_ADDR
// end ;
70648: LD_VAR 0 2
70652: RET
// export function ReverseArray ( array ) ; var i ; begin
70653: LD_INT 0
70655: PPUSH
70656: PPUSH
// if not array then
70657: LD_VAR 0 1
70661: NOT
70662: IFFALSE 70666
// exit ;
70664: GO 70721
// result := [ ] ;
70666: LD_ADDR_VAR 0 2
70670: PUSH
70671: EMPTY
70672: ST_TO_ADDR
// for i := array downto 1 do
70673: LD_ADDR_VAR 0 3
70677: PUSH
70678: DOUBLE
70679: LD_VAR 0 1
70683: INC
70684: ST_TO_ADDR
70685: LD_INT 1
70687: PUSH
70688: FOR_DOWNTO
70689: IFFALSE 70719
// result := Join ( result , array [ i ] ) ;
70691: LD_ADDR_VAR 0 2
70695: PUSH
70696: LD_VAR 0 2
70700: PPUSH
70701: LD_VAR 0 1
70705: PUSH
70706: LD_VAR 0 3
70710: ARRAY
70711: PPUSH
70712: CALL 75563 0 2
70716: ST_TO_ADDR
70717: GO 70688
70719: POP
70720: POP
// end ;
70721: LD_VAR 0 2
70725: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
70726: LD_INT 0
70728: PPUSH
70729: PPUSH
70730: PPUSH
70731: PPUSH
70732: PPUSH
70733: PPUSH
// if not unit or not hexes then
70734: LD_VAR 0 1
70738: NOT
70739: IFTRUE 70748
70741: PUSH
70742: LD_VAR 0 2
70746: NOT
70747: OR
70748: IFFALSE 70752
// exit ;
70750: GO 70875
// dist := 9999 ;
70752: LD_ADDR_VAR 0 5
70756: PUSH
70757: LD_INT 9999
70759: ST_TO_ADDR
// for i = 1 to hexes do
70760: LD_ADDR_VAR 0 4
70764: PUSH
70765: DOUBLE
70766: LD_INT 1
70768: DEC
70769: ST_TO_ADDR
70770: LD_VAR 0 2
70774: PUSH
70775: FOR_TO
70776: IFFALSE 70863
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70778: LD_ADDR_VAR 0 6
70782: PUSH
70783: LD_VAR 0 1
70787: PPUSH
70788: LD_VAR 0 2
70792: PUSH
70793: LD_VAR 0 4
70797: ARRAY
70798: PUSH
70799: LD_INT 1
70801: ARRAY
70802: PPUSH
70803: LD_VAR 0 2
70807: PUSH
70808: LD_VAR 0 4
70812: ARRAY
70813: PUSH
70814: LD_INT 2
70816: ARRAY
70817: PPUSH
70818: CALL_OW 297
70822: ST_TO_ADDR
// if tdist < dist then
70823: LD_VAR 0 6
70827: PUSH
70828: LD_VAR 0 5
70832: LESS
70833: IFFALSE 70861
// begin hex := hexes [ i ] ;
70835: LD_ADDR_VAR 0 8
70839: PUSH
70840: LD_VAR 0 2
70844: PUSH
70845: LD_VAR 0 4
70849: ARRAY
70850: ST_TO_ADDR
// dist := tdist ;
70851: LD_ADDR_VAR 0 5
70855: PUSH
70856: LD_VAR 0 6
70860: ST_TO_ADDR
// end ; end ;
70861: GO 70775
70863: POP
70864: POP
// result := hex ;
70865: LD_ADDR_VAR 0 3
70869: PUSH
70870: LD_VAR 0 8
70874: ST_TO_ADDR
// end ;
70875: LD_VAR 0 3
70879: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70880: LD_INT 0
70882: PPUSH
70883: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70884: LD_VAR 0 1
70888: NOT
70889: IFTRUE 70928
70891: PUSH
70892: LD_VAR 0 1
70896: PUSH
70897: LD_INT 21
70899: PUSH
70900: LD_INT 2
70902: PUSH
70903: EMPTY
70904: LIST
70905: LIST
70906: PUSH
70907: LD_INT 23
70909: PUSH
70910: LD_INT 2
70912: PUSH
70913: EMPTY
70914: LIST
70915: LIST
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PPUSH
70921: CALL_OW 69
70925: IN
70926: NOT
70927: OR
70928: IFFALSE 70932
// exit ;
70930: GO 70979
// for i = 1 to 3 do
70932: LD_ADDR_VAR 0 3
70936: PUSH
70937: DOUBLE
70938: LD_INT 1
70940: DEC
70941: ST_TO_ADDR
70942: LD_INT 3
70944: PUSH
70945: FOR_TO
70946: IFFALSE 70977
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70948: LD_VAR 0 1
70952: PPUSH
70953: CALL_OW 250
70957: PPUSH
70958: LD_VAR 0 1
70962: PPUSH
70963: CALL_OW 251
70967: PPUSH
70968: LD_INT 1
70970: PPUSH
70971: CALL_OW 453
70975: GO 70945
70977: POP
70978: POP
// end ;
70979: LD_VAR 0 2
70983: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70984: LD_INT 0
70986: PPUSH
70987: PPUSH
70988: PPUSH
70989: PPUSH
70990: PPUSH
70991: PPUSH
// if not unit or not enemy_unit then
70992: LD_VAR 0 1
70996: NOT
70997: IFTRUE 71006
70999: PUSH
71000: LD_VAR 0 2
71004: NOT
71005: OR
71006: IFFALSE 71010
// exit ;
71008: GO 71481
// if GetLives ( i ) < 250 then
71010: LD_VAR 0 4
71014: PPUSH
71015: CALL_OW 256
71019: PUSH
71020: LD_INT 250
71022: LESS
71023: IFFALSE 71036
// begin ComAutodestruct ( i ) ;
71025: LD_VAR 0 4
71029: PPUSH
71030: CALL 70880 0 1
// exit ;
71034: GO 71481
// end ; x := GetX ( enemy_unit ) ;
71036: LD_ADDR_VAR 0 7
71040: PUSH
71041: LD_VAR 0 2
71045: PPUSH
71046: CALL_OW 250
71050: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71051: LD_ADDR_VAR 0 8
71055: PUSH
71056: LD_VAR 0 2
71060: PPUSH
71061: CALL_OW 251
71065: ST_TO_ADDR
// if not x or not y then
71066: LD_VAR 0 7
71070: NOT
71071: IFTRUE 71080
71073: PUSH
71074: LD_VAR 0 8
71078: NOT
71079: OR
71080: IFFALSE 71084
// exit ;
71082: GO 71481
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71084: LD_ADDR_VAR 0 6
71088: PUSH
71089: LD_VAR 0 7
71093: PPUSH
71094: LD_INT 0
71096: PPUSH
71097: LD_INT 4
71099: PPUSH
71100: CALL_OW 272
71104: PUSH
71105: LD_VAR 0 8
71109: PPUSH
71110: LD_INT 0
71112: PPUSH
71113: LD_INT 4
71115: PPUSH
71116: CALL_OW 273
71120: PUSH
71121: EMPTY
71122: LIST
71123: LIST
71124: PUSH
71125: LD_VAR 0 7
71129: PPUSH
71130: LD_INT 1
71132: PPUSH
71133: LD_INT 4
71135: PPUSH
71136: CALL_OW 272
71140: PUSH
71141: LD_VAR 0 8
71145: PPUSH
71146: LD_INT 1
71148: PPUSH
71149: LD_INT 4
71151: PPUSH
71152: CALL_OW 273
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: PUSH
71161: LD_VAR 0 7
71165: PPUSH
71166: LD_INT 2
71168: PPUSH
71169: LD_INT 4
71171: PPUSH
71172: CALL_OW 272
71176: PUSH
71177: LD_VAR 0 8
71181: PPUSH
71182: LD_INT 2
71184: PPUSH
71185: LD_INT 4
71187: PPUSH
71188: CALL_OW 273
71192: PUSH
71193: EMPTY
71194: LIST
71195: LIST
71196: PUSH
71197: LD_VAR 0 7
71201: PPUSH
71202: LD_INT 3
71204: PPUSH
71205: LD_INT 4
71207: PPUSH
71208: CALL_OW 272
71212: PUSH
71213: LD_VAR 0 8
71217: PPUSH
71218: LD_INT 3
71220: PPUSH
71221: LD_INT 4
71223: PPUSH
71224: CALL_OW 273
71228: PUSH
71229: EMPTY
71230: LIST
71231: LIST
71232: PUSH
71233: LD_VAR 0 7
71237: PPUSH
71238: LD_INT 4
71240: PPUSH
71241: LD_INT 4
71243: PPUSH
71244: CALL_OW 272
71248: PUSH
71249: LD_VAR 0 8
71253: PPUSH
71254: LD_INT 4
71256: PPUSH
71257: LD_INT 4
71259: PPUSH
71260: CALL_OW 273
71264: PUSH
71265: EMPTY
71266: LIST
71267: LIST
71268: PUSH
71269: LD_VAR 0 7
71273: PPUSH
71274: LD_INT 5
71276: PPUSH
71277: LD_INT 4
71279: PPUSH
71280: CALL_OW 272
71284: PUSH
71285: LD_VAR 0 8
71289: PPUSH
71290: LD_INT 5
71292: PPUSH
71293: LD_INT 4
71295: PPUSH
71296: CALL_OW 273
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: PUSH
71305: EMPTY
71306: LIST
71307: LIST
71308: LIST
71309: LIST
71310: LIST
71311: LIST
71312: ST_TO_ADDR
// for i = tmp downto 1 do
71313: LD_ADDR_VAR 0 4
71317: PUSH
71318: DOUBLE
71319: LD_VAR 0 6
71323: INC
71324: ST_TO_ADDR
71325: LD_INT 1
71327: PUSH
71328: FOR_DOWNTO
71329: IFFALSE 71432
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71331: LD_VAR 0 6
71335: PUSH
71336: LD_VAR 0 4
71340: ARRAY
71341: PUSH
71342: LD_INT 1
71344: ARRAY
71345: PPUSH
71346: LD_VAR 0 6
71350: PUSH
71351: LD_VAR 0 4
71355: ARRAY
71356: PUSH
71357: LD_INT 2
71359: ARRAY
71360: PPUSH
71361: CALL_OW 488
71365: NOT
71366: IFTRUE 71408
71368: PUSH
71369: LD_VAR 0 6
71373: PUSH
71374: LD_VAR 0 4
71378: ARRAY
71379: PUSH
71380: LD_INT 1
71382: ARRAY
71383: PPUSH
71384: LD_VAR 0 6
71388: PUSH
71389: LD_VAR 0 4
71393: ARRAY
71394: PUSH
71395: LD_INT 2
71397: ARRAY
71398: PPUSH
71399: CALL_OW 428
71403: PUSH
71404: LD_INT 0
71406: NONEQUAL
71407: OR
71408: IFFALSE 71430
// tmp := Delete ( tmp , i ) ;
71410: LD_ADDR_VAR 0 6
71414: PUSH
71415: LD_VAR 0 6
71419: PPUSH
71420: LD_VAR 0 4
71424: PPUSH
71425: CALL_OW 3
71429: ST_TO_ADDR
71430: GO 71328
71432: POP
71433: POP
// j := GetClosestHex ( unit , tmp ) ;
71434: LD_ADDR_VAR 0 5
71438: PUSH
71439: LD_VAR 0 1
71443: PPUSH
71444: LD_VAR 0 6
71448: PPUSH
71449: CALL 70726 0 2
71453: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71454: LD_VAR 0 1
71458: PPUSH
71459: LD_VAR 0 5
71463: PUSH
71464: LD_INT 1
71466: ARRAY
71467: PPUSH
71468: LD_VAR 0 5
71472: PUSH
71473: LD_INT 2
71475: ARRAY
71476: PPUSH
71477: CALL_OW 111
// end ;
71481: LD_VAR 0 3
71485: RET
// export function PrepareApemanSoldier ( ) ; begin
71486: LD_INT 0
71488: PPUSH
// uc_nation := 0 ;
71489: LD_ADDR_OWVAR 21
71493: PUSH
71494: LD_INT 0
71496: ST_TO_ADDR
// hc_sex := sex_male ;
71497: LD_ADDR_OWVAR 27
71501: PUSH
71502: LD_INT 1
71504: ST_TO_ADDR
// hc_name :=  ;
71505: LD_ADDR_OWVAR 26
71509: PUSH
71510: LD_STRING 
71512: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
71513: LD_ADDR_OWVAR 28
71517: PUSH
71518: LD_INT 15
71520: ST_TO_ADDR
// hc_gallery :=  ;
71521: LD_ADDR_OWVAR 33
71525: PUSH
71526: LD_STRING 
71528: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71529: LD_ADDR_OWVAR 31
71533: PUSH
71534: LD_INT 0
71536: PPUSH
71537: LD_INT 3
71539: PPUSH
71540: CALL_OW 12
71544: PUSH
71545: LD_INT 0
71547: PPUSH
71548: LD_INT 3
71550: PPUSH
71551: CALL_OW 12
71555: PUSH
71556: LD_INT 0
71558: PUSH
71559: LD_INT 0
71561: PUSH
71562: EMPTY
71563: LIST
71564: LIST
71565: LIST
71566: LIST
71567: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
71568: LD_ADDR_OWVAR 29
71572: PUSH
71573: LD_INT 12
71575: PUSH
71576: LD_INT 12
71578: PUSH
71579: EMPTY
71580: LIST
71581: LIST
71582: ST_TO_ADDR
// end ;
71583: LD_VAR 0 1
71587: RET
// export function PrepareApemanEngineer ( ) ; begin
71588: LD_INT 0
71590: PPUSH
// uc_nation := 0 ;
71591: LD_ADDR_OWVAR 21
71595: PUSH
71596: LD_INT 0
71598: ST_TO_ADDR
// hc_sex := sex_male ;
71599: LD_ADDR_OWVAR 27
71603: PUSH
71604: LD_INT 1
71606: ST_TO_ADDR
// hc_name :=  ;
71607: LD_ADDR_OWVAR 26
71611: PUSH
71612: LD_STRING 
71614: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
71615: LD_ADDR_OWVAR 28
71619: PUSH
71620: LD_INT 16
71622: ST_TO_ADDR
// hc_gallery :=  ;
71623: LD_ADDR_OWVAR 33
71627: PUSH
71628: LD_STRING 
71630: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71631: LD_ADDR_OWVAR 31
71635: PUSH
71636: LD_INT 0
71638: PPUSH
71639: LD_INT 3
71641: PPUSH
71642: CALL_OW 12
71646: PUSH
71647: LD_INT 0
71649: PPUSH
71650: LD_INT 3
71652: PPUSH
71653: CALL_OW 12
71657: PUSH
71658: LD_INT 0
71660: PUSH
71661: LD_INT 0
71663: PUSH
71664: EMPTY
71665: LIST
71666: LIST
71667: LIST
71668: LIST
71669: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
71670: LD_ADDR_OWVAR 29
71674: PUSH
71675: LD_INT 12
71677: PUSH
71678: LD_INT 12
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: ST_TO_ADDR
// end ;
71685: LD_VAR 0 1
71689: RET
// export function PrepareApeman ( agressivity ) ; begin
71690: LD_INT 0
71692: PPUSH
// uc_side := 0 ;
71693: LD_ADDR_OWVAR 20
71697: PUSH
71698: LD_INT 0
71700: ST_TO_ADDR
// uc_nation := 0 ;
71701: LD_ADDR_OWVAR 21
71705: PUSH
71706: LD_INT 0
71708: ST_TO_ADDR
// hc_sex := sex_male ;
71709: LD_ADDR_OWVAR 27
71713: PUSH
71714: LD_INT 1
71716: ST_TO_ADDR
// hc_class := class_apeman ;
71717: LD_ADDR_OWVAR 28
71721: PUSH
71722: LD_INT 12
71724: ST_TO_ADDR
// hc_gallery :=  ;
71725: LD_ADDR_OWVAR 33
71729: PUSH
71730: LD_STRING 
71732: ST_TO_ADDR
// hc_name :=  ;
71733: LD_ADDR_OWVAR 26
71737: PUSH
71738: LD_STRING 
71740: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
71741: LD_ADDR_OWVAR 29
71745: PUSH
71746: LD_INT 12
71748: PUSH
71749: LD_INT 12
71751: PUSH
71752: EMPTY
71753: LIST
71754: LIST
71755: ST_TO_ADDR
// if agressivity = 0 then
71756: LD_VAR 0 1
71760: PUSH
71761: LD_INT 0
71763: EQUAL
71764: IFFALSE 71776
// hc_agressivity := 0 else
71766: LD_ADDR_OWVAR 35
71770: PUSH
71771: LD_INT 0
71773: ST_TO_ADDR
71774: GO 71797
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71776: LD_ADDR_OWVAR 35
71780: PUSH
71781: LD_VAR 0 1
71785: NEG
71786: PPUSH
71787: LD_VAR 0 1
71791: PPUSH
71792: CALL_OW 12
71796: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71797: LD_ADDR_OWVAR 31
71801: PUSH
71802: LD_INT 0
71804: PPUSH
71805: LD_INT 3
71807: PPUSH
71808: CALL_OW 12
71812: PUSH
71813: LD_INT 0
71815: PPUSH
71816: LD_INT 3
71818: PPUSH
71819: CALL_OW 12
71823: PUSH
71824: LD_INT 0
71826: PUSH
71827: LD_INT 0
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: LIST
71834: LIST
71835: ST_TO_ADDR
// end ;
71836: LD_VAR 0 2
71840: RET
// export function PrepareTiger ( agressivity ) ; begin
71841: LD_INT 0
71843: PPUSH
// uc_side := 0 ;
71844: LD_ADDR_OWVAR 20
71848: PUSH
71849: LD_INT 0
71851: ST_TO_ADDR
// uc_nation := 0 ;
71852: LD_ADDR_OWVAR 21
71856: PUSH
71857: LD_INT 0
71859: ST_TO_ADDR
// InitHc ;
71860: CALL_OW 19
// hc_class := class_tiger ;
71864: LD_ADDR_OWVAR 28
71868: PUSH
71869: LD_INT 14
71871: ST_TO_ADDR
// hc_gallery :=  ;
71872: LD_ADDR_OWVAR 33
71876: PUSH
71877: LD_STRING 
71879: ST_TO_ADDR
// hc_name :=  ;
71880: LD_ADDR_OWVAR 26
71884: PUSH
71885: LD_STRING 
71887: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
71888: LD_ADDR_OWVAR 35
71892: PUSH
71893: LD_VAR 0 1
71897: NEG
71898: PPUSH
71899: LD_VAR 0 1
71903: PPUSH
71904: CALL_OW 12
71908: ST_TO_ADDR
// end ;
71909: LD_VAR 0 2
71913: RET
// export function PrepareEnchidna ( ) ; begin
71914: LD_INT 0
71916: PPUSH
// uc_side := 0 ;
71917: LD_ADDR_OWVAR 20
71921: PUSH
71922: LD_INT 0
71924: ST_TO_ADDR
// uc_nation := 0 ;
71925: LD_ADDR_OWVAR 21
71929: PUSH
71930: LD_INT 0
71932: ST_TO_ADDR
// InitHc ;
71933: CALL_OW 19
// hc_class := class_baggie ;
71937: LD_ADDR_OWVAR 28
71941: PUSH
71942: LD_INT 13
71944: ST_TO_ADDR
// hc_gallery :=  ;
71945: LD_ADDR_OWVAR 33
71949: PUSH
71950: LD_STRING 
71952: ST_TO_ADDR
// hc_name :=  ;
71953: LD_ADDR_OWVAR 26
71957: PUSH
71958: LD_STRING 
71960: ST_TO_ADDR
// end ;
71961: LD_VAR 0 1
71965: RET
// export function PrepareFrog ( ) ; begin
71966: LD_INT 0
71968: PPUSH
// uc_side := 0 ;
71969: LD_ADDR_OWVAR 20
71973: PUSH
71974: LD_INT 0
71976: ST_TO_ADDR
// uc_nation := 0 ;
71977: LD_ADDR_OWVAR 21
71981: PUSH
71982: LD_INT 0
71984: ST_TO_ADDR
// InitHc ;
71985: CALL_OW 19
// hc_class := class_frog ;
71989: LD_ADDR_OWVAR 28
71993: PUSH
71994: LD_INT 19
71996: ST_TO_ADDR
// hc_gallery :=  ;
71997: LD_ADDR_OWVAR 33
72001: PUSH
72002: LD_STRING 
72004: ST_TO_ADDR
// hc_name :=  ;
72005: LD_ADDR_OWVAR 26
72009: PUSH
72010: LD_STRING 
72012: ST_TO_ADDR
// end ;
72013: LD_VAR 0 1
72017: RET
// export function PrepareFish ( ) ; begin
72018: LD_INT 0
72020: PPUSH
// uc_side := 0 ;
72021: LD_ADDR_OWVAR 20
72025: PUSH
72026: LD_INT 0
72028: ST_TO_ADDR
// uc_nation := 0 ;
72029: LD_ADDR_OWVAR 21
72033: PUSH
72034: LD_INT 0
72036: ST_TO_ADDR
// InitHc ;
72037: CALL_OW 19
// hc_class := class_fish ;
72041: LD_ADDR_OWVAR 28
72045: PUSH
72046: LD_INT 20
72048: ST_TO_ADDR
// hc_gallery :=  ;
72049: LD_ADDR_OWVAR 33
72053: PUSH
72054: LD_STRING 
72056: ST_TO_ADDR
// hc_name :=  ;
72057: LD_ADDR_OWVAR 26
72061: PUSH
72062: LD_STRING 
72064: ST_TO_ADDR
// end ;
72065: LD_VAR 0 1
72069: RET
// export function PrepareBird ( ) ; begin
72070: LD_INT 0
72072: PPUSH
// uc_side := 0 ;
72073: LD_ADDR_OWVAR 20
72077: PUSH
72078: LD_INT 0
72080: ST_TO_ADDR
// uc_nation := 0 ;
72081: LD_ADDR_OWVAR 21
72085: PUSH
72086: LD_INT 0
72088: ST_TO_ADDR
// InitHc ;
72089: CALL_OW 19
// hc_class := class_phororhacos ;
72093: LD_ADDR_OWVAR 28
72097: PUSH
72098: LD_INT 18
72100: ST_TO_ADDR
// hc_gallery :=  ;
72101: LD_ADDR_OWVAR 33
72105: PUSH
72106: LD_STRING 
72108: ST_TO_ADDR
// hc_name :=  ;
72109: LD_ADDR_OWVAR 26
72113: PUSH
72114: LD_STRING 
72116: ST_TO_ADDR
// end ;
72117: LD_VAR 0 1
72121: RET
// export function PrepareHorse ( ) ; begin
72122: LD_INT 0
72124: PPUSH
// uc_side := 0 ;
72125: LD_ADDR_OWVAR 20
72129: PUSH
72130: LD_INT 0
72132: ST_TO_ADDR
// uc_nation := 0 ;
72133: LD_ADDR_OWVAR 21
72137: PUSH
72138: LD_INT 0
72140: ST_TO_ADDR
// InitHc ;
72141: CALL_OW 19
// hc_class := class_horse ;
72145: LD_ADDR_OWVAR 28
72149: PUSH
72150: LD_INT 21
72152: ST_TO_ADDR
// hc_gallery :=  ;
72153: LD_ADDR_OWVAR 33
72157: PUSH
72158: LD_STRING 
72160: ST_TO_ADDR
// hc_name :=  ;
72161: LD_ADDR_OWVAR 26
72165: PUSH
72166: LD_STRING 
72168: ST_TO_ADDR
// end ;
72169: LD_VAR 0 1
72173: RET
// export function PrepareMastodont ( ) ; begin
72174: LD_INT 0
72176: PPUSH
// uc_side := 0 ;
72177: LD_ADDR_OWVAR 20
72181: PUSH
72182: LD_INT 0
72184: ST_TO_ADDR
// uc_nation := 0 ;
72185: LD_ADDR_OWVAR 21
72189: PUSH
72190: LD_INT 0
72192: ST_TO_ADDR
// vc_chassis := class_mastodont ;
72193: LD_ADDR_OWVAR 37
72197: PUSH
72198: LD_INT 31
72200: ST_TO_ADDR
// vc_control := control_rider ;
72201: LD_ADDR_OWVAR 38
72205: PUSH
72206: LD_INT 4
72208: ST_TO_ADDR
// end ;
72209: LD_VAR 0 1
72213: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72214: LD_INT 0
72216: PPUSH
72217: PPUSH
72218: PPUSH
// uc_side = 0 ;
72219: LD_ADDR_OWVAR 20
72223: PUSH
72224: LD_INT 0
72226: ST_TO_ADDR
// uc_nation = 0 ;
72227: LD_ADDR_OWVAR 21
72231: PUSH
72232: LD_INT 0
72234: ST_TO_ADDR
// InitHc_All ( ) ;
72235: CALL_OW 584
// InitVc ;
72239: CALL_OW 20
// if mastodonts then
72243: LD_VAR 0 6
72247: IFFALSE 72314
// for i = 1 to mastodonts do
72249: LD_ADDR_VAR 0 11
72253: PUSH
72254: DOUBLE
72255: LD_INT 1
72257: DEC
72258: ST_TO_ADDR
72259: LD_VAR 0 6
72263: PUSH
72264: FOR_TO
72265: IFFALSE 72312
// begin vc_chassis := 31 ;
72267: LD_ADDR_OWVAR 37
72271: PUSH
72272: LD_INT 31
72274: ST_TO_ADDR
// vc_control := control_rider ;
72275: LD_ADDR_OWVAR 38
72279: PUSH
72280: LD_INT 4
72282: ST_TO_ADDR
// animal := CreateVehicle ;
72283: LD_ADDR_VAR 0 12
72287: PUSH
72288: CALL_OW 45
72292: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72293: LD_VAR 0 12
72297: PPUSH
72298: LD_VAR 0 8
72302: PPUSH
72303: LD_INT 0
72305: PPUSH
72306: CALL 74456 0 3
// end ;
72310: GO 72264
72312: POP
72313: POP
// if horses then
72314: LD_VAR 0 5
72318: IFFALSE 72385
// for i = 1 to horses do
72320: LD_ADDR_VAR 0 11
72324: PUSH
72325: DOUBLE
72326: LD_INT 1
72328: DEC
72329: ST_TO_ADDR
72330: LD_VAR 0 5
72334: PUSH
72335: FOR_TO
72336: IFFALSE 72383
// begin hc_class := 21 ;
72338: LD_ADDR_OWVAR 28
72342: PUSH
72343: LD_INT 21
72345: ST_TO_ADDR
// hc_gallery :=  ;
72346: LD_ADDR_OWVAR 33
72350: PUSH
72351: LD_STRING 
72353: ST_TO_ADDR
// animal := CreateHuman ;
72354: LD_ADDR_VAR 0 12
72358: PUSH
72359: CALL_OW 44
72363: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72364: LD_VAR 0 12
72368: PPUSH
72369: LD_VAR 0 8
72373: PPUSH
72374: LD_INT 0
72376: PPUSH
72377: CALL 74456 0 3
// end ;
72381: GO 72335
72383: POP
72384: POP
// if birds then
72385: LD_VAR 0 1
72389: IFFALSE 72456
// for i = 1 to birds do
72391: LD_ADDR_VAR 0 11
72395: PUSH
72396: DOUBLE
72397: LD_INT 1
72399: DEC
72400: ST_TO_ADDR
72401: LD_VAR 0 1
72405: PUSH
72406: FOR_TO
72407: IFFALSE 72454
// begin hc_class := 18 ;
72409: LD_ADDR_OWVAR 28
72413: PUSH
72414: LD_INT 18
72416: ST_TO_ADDR
// hc_gallery =  ;
72417: LD_ADDR_OWVAR 33
72421: PUSH
72422: LD_STRING 
72424: ST_TO_ADDR
// animal := CreateHuman ;
72425: LD_ADDR_VAR 0 12
72429: PUSH
72430: CALL_OW 44
72434: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72435: LD_VAR 0 12
72439: PPUSH
72440: LD_VAR 0 8
72444: PPUSH
72445: LD_INT 0
72447: PPUSH
72448: CALL 74456 0 3
// end ;
72452: GO 72406
72454: POP
72455: POP
// if tigers then
72456: LD_VAR 0 2
72460: IFFALSE 72544
// for i = 1 to tigers do
72462: LD_ADDR_VAR 0 11
72466: PUSH
72467: DOUBLE
72468: LD_INT 1
72470: DEC
72471: ST_TO_ADDR
72472: LD_VAR 0 2
72476: PUSH
72477: FOR_TO
72478: IFFALSE 72542
// begin hc_class = class_tiger ;
72480: LD_ADDR_OWVAR 28
72484: PUSH
72485: LD_INT 14
72487: ST_TO_ADDR
// hc_gallery =  ;
72488: LD_ADDR_OWVAR 33
72492: PUSH
72493: LD_STRING 
72495: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72496: LD_ADDR_OWVAR 35
72500: PUSH
72501: LD_INT 7
72503: NEG
72504: PPUSH
72505: LD_INT 7
72507: PPUSH
72508: CALL_OW 12
72512: ST_TO_ADDR
// animal := CreateHuman ;
72513: LD_ADDR_VAR 0 12
72517: PUSH
72518: CALL_OW 44
72522: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72523: LD_VAR 0 12
72527: PPUSH
72528: LD_VAR 0 8
72532: PPUSH
72533: LD_INT 0
72535: PPUSH
72536: CALL 74456 0 3
// end ;
72540: GO 72477
72542: POP
72543: POP
// if apemans then
72544: LD_VAR 0 3
72548: IFFALSE 72671
// for i = 1 to apemans do
72550: LD_ADDR_VAR 0 11
72554: PUSH
72555: DOUBLE
72556: LD_INT 1
72558: DEC
72559: ST_TO_ADDR
72560: LD_VAR 0 3
72564: PUSH
72565: FOR_TO
72566: IFFALSE 72669
// begin hc_class = class_apeman ;
72568: LD_ADDR_OWVAR 28
72572: PUSH
72573: LD_INT 12
72575: ST_TO_ADDR
// hc_gallery =  ;
72576: LD_ADDR_OWVAR 33
72580: PUSH
72581: LD_STRING 
72583: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72584: LD_ADDR_OWVAR 35
72588: PUSH
72589: LD_INT 2
72591: NEG
72592: PPUSH
72593: LD_INT 2
72595: PPUSH
72596: CALL_OW 12
72600: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72601: LD_ADDR_OWVAR 31
72605: PUSH
72606: LD_INT 1
72608: PPUSH
72609: LD_INT 3
72611: PPUSH
72612: CALL_OW 12
72616: PUSH
72617: LD_INT 1
72619: PPUSH
72620: LD_INT 3
72622: PPUSH
72623: CALL_OW 12
72627: PUSH
72628: LD_INT 0
72630: PUSH
72631: LD_INT 0
72633: PUSH
72634: EMPTY
72635: LIST
72636: LIST
72637: LIST
72638: LIST
72639: ST_TO_ADDR
// animal := CreateHuman ;
72640: LD_ADDR_VAR 0 12
72644: PUSH
72645: CALL_OW 44
72649: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72650: LD_VAR 0 12
72654: PPUSH
72655: LD_VAR 0 8
72659: PPUSH
72660: LD_INT 0
72662: PPUSH
72663: CALL 74456 0 3
// end ;
72667: GO 72565
72669: POP
72670: POP
// if enchidnas then
72671: LD_VAR 0 4
72675: IFFALSE 72742
// for i = 1 to enchidnas do
72677: LD_ADDR_VAR 0 11
72681: PUSH
72682: DOUBLE
72683: LD_INT 1
72685: DEC
72686: ST_TO_ADDR
72687: LD_VAR 0 4
72691: PUSH
72692: FOR_TO
72693: IFFALSE 72740
// begin hc_class = 13 ;
72695: LD_ADDR_OWVAR 28
72699: PUSH
72700: LD_INT 13
72702: ST_TO_ADDR
// hc_gallery =  ;
72703: LD_ADDR_OWVAR 33
72707: PUSH
72708: LD_STRING 
72710: ST_TO_ADDR
// animal := CreateHuman ;
72711: LD_ADDR_VAR 0 12
72715: PUSH
72716: CALL_OW 44
72720: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72721: LD_VAR 0 12
72725: PPUSH
72726: LD_VAR 0 8
72730: PPUSH
72731: LD_INT 0
72733: PPUSH
72734: CALL 74456 0 3
// end ;
72738: GO 72692
72740: POP
72741: POP
// if fishes then
72742: LD_VAR 0 7
72746: IFFALSE 72813
// for i = 1 to fishes do
72748: LD_ADDR_VAR 0 11
72752: PUSH
72753: DOUBLE
72754: LD_INT 1
72756: DEC
72757: ST_TO_ADDR
72758: LD_VAR 0 7
72762: PUSH
72763: FOR_TO
72764: IFFALSE 72811
// begin hc_class = 20 ;
72766: LD_ADDR_OWVAR 28
72770: PUSH
72771: LD_INT 20
72773: ST_TO_ADDR
// hc_gallery =  ;
72774: LD_ADDR_OWVAR 33
72778: PUSH
72779: LD_STRING 
72781: ST_TO_ADDR
// animal := CreateHuman ;
72782: LD_ADDR_VAR 0 12
72786: PUSH
72787: CALL_OW 44
72791: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72792: LD_VAR 0 12
72796: PPUSH
72797: LD_VAR 0 9
72801: PPUSH
72802: LD_INT 0
72804: PPUSH
72805: CALL 74456 0 3
// end ;
72809: GO 72763
72811: POP
72812: POP
// end ;
72813: LD_VAR 0 10
72817: RET
// export function WantHeal ( sci , unit ) ; begin
72818: LD_INT 0
72820: PPUSH
// if GetTaskList ( sci ) > 0 then
72821: LD_VAR 0 1
72825: PPUSH
72826: CALL_OW 437
72830: PUSH
72831: LD_INT 0
72833: GREATER
72834: IFFALSE 72906
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72836: LD_VAR 0 1
72840: PPUSH
72841: CALL_OW 437
72845: PUSH
72846: LD_INT 1
72848: ARRAY
72849: PUSH
72850: LD_INT 1
72852: ARRAY
72853: PUSH
72854: LD_STRING l
72856: EQUAL
72857: IFFALSE 72884
72859: PUSH
72860: LD_VAR 0 1
72864: PPUSH
72865: CALL_OW 437
72869: PUSH
72870: LD_INT 1
72872: ARRAY
72873: PUSH
72874: LD_INT 4
72876: ARRAY
72877: PUSH
72878: LD_VAR 0 2
72882: EQUAL
72883: AND
72884: IFFALSE 72896
// result := true else
72886: LD_ADDR_VAR 0 3
72890: PUSH
72891: LD_INT 1
72893: ST_TO_ADDR
72894: GO 72904
// result := false ;
72896: LD_ADDR_VAR 0 3
72900: PUSH
72901: LD_INT 0
72903: ST_TO_ADDR
// end else
72904: GO 72914
// result := false ;
72906: LD_ADDR_VAR 0 3
72910: PUSH
72911: LD_INT 0
72913: ST_TO_ADDR
// end ;
72914: LD_VAR 0 3
72918: RET
// export function HealTarget ( sci ) ; begin
72919: LD_INT 0
72921: PPUSH
// if not sci then
72922: LD_VAR 0 1
72926: NOT
72927: IFFALSE 72931
// exit ;
72929: GO 72996
// result := 0 ;
72931: LD_ADDR_VAR 0 2
72935: PUSH
72936: LD_INT 0
72938: ST_TO_ADDR
// if GetTaskList ( sci ) then
72939: LD_VAR 0 1
72943: PPUSH
72944: CALL_OW 437
72948: IFFALSE 72996
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72950: LD_VAR 0 1
72954: PPUSH
72955: CALL_OW 437
72959: PUSH
72960: LD_INT 1
72962: ARRAY
72963: PUSH
72964: LD_INT 1
72966: ARRAY
72967: PUSH
72968: LD_STRING l
72970: EQUAL
72971: IFFALSE 72996
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72973: LD_ADDR_VAR 0 2
72977: PUSH
72978: LD_VAR 0 1
72982: PPUSH
72983: CALL_OW 437
72987: PUSH
72988: LD_INT 1
72990: ARRAY
72991: PUSH
72992: LD_INT 4
72994: ARRAY
72995: ST_TO_ADDR
// end ;
72996: LD_VAR 0 2
73000: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73001: LD_INT 0
73003: PPUSH
73004: PPUSH
73005: PPUSH
73006: PPUSH
// if not base_units then
73007: LD_VAR 0 1
73011: NOT
73012: IFFALSE 73016
// exit ;
73014: GO 73103
// result := false ;
73016: LD_ADDR_VAR 0 2
73020: PUSH
73021: LD_INT 0
73023: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73024: LD_ADDR_VAR 0 5
73028: PUSH
73029: LD_VAR 0 1
73033: PPUSH
73034: LD_INT 21
73036: PUSH
73037: LD_INT 3
73039: PUSH
73040: EMPTY
73041: LIST
73042: LIST
73043: PPUSH
73044: CALL_OW 72
73048: ST_TO_ADDR
// if not tmp then
73049: LD_VAR 0 5
73053: NOT
73054: IFFALSE 73058
// exit ;
73056: GO 73103
// for i in tmp do
73058: LD_ADDR_VAR 0 3
73062: PUSH
73063: LD_VAR 0 5
73067: PUSH
73068: FOR_IN
73069: IFFALSE 73101
// begin result := EnemyInRange ( i , 22 ) ;
73071: LD_ADDR_VAR 0 2
73075: PUSH
73076: LD_VAR 0 3
73080: PPUSH
73081: LD_INT 22
73083: PPUSH
73084: CALL 70528 0 2
73088: ST_TO_ADDR
// if result then
73089: LD_VAR 0 2
73093: IFFALSE 73099
// exit ;
73095: POP
73096: POP
73097: GO 73103
// end ;
73099: GO 73068
73101: POP
73102: POP
// end ;
73103: LD_VAR 0 2
73107: RET
// export function FilterByTag ( units , tag ) ; begin
73108: LD_INT 0
73110: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73111: LD_ADDR_VAR 0 3
73115: PUSH
73116: LD_VAR 0 1
73120: PPUSH
73121: LD_INT 120
73123: PUSH
73124: LD_VAR 0 2
73128: PUSH
73129: EMPTY
73130: LIST
73131: LIST
73132: PPUSH
73133: CALL_OW 72
73137: ST_TO_ADDR
// end ;
73138: LD_VAR 0 3
73142: RET
// export function IsDriver ( un ) ; begin
73143: LD_INT 0
73145: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73146: LD_ADDR_VAR 0 2
73150: PUSH
73151: LD_VAR 0 1
73155: PUSH
73156: LD_INT 55
73158: PUSH
73159: EMPTY
73160: LIST
73161: PPUSH
73162: CALL_OW 69
73166: IN
73167: ST_TO_ADDR
// end ;
73168: LD_VAR 0 2
73172: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73173: LD_INT 0
73175: PPUSH
73176: PPUSH
// list := [ ] ;
73177: LD_ADDR_VAR 0 5
73181: PUSH
73182: EMPTY
73183: ST_TO_ADDR
// case d of 0 :
73184: LD_VAR 0 3
73188: PUSH
73189: LD_INT 0
73191: DOUBLE
73192: EQUAL
73193: IFTRUE 73197
73195: GO 73330
73197: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73198: LD_ADDR_VAR 0 5
73202: PUSH
73203: LD_VAR 0 1
73207: PUSH
73208: LD_INT 4
73210: MINUS
73211: PUSH
73212: LD_VAR 0 2
73216: PUSH
73217: LD_INT 4
73219: MINUS
73220: PUSH
73221: LD_INT 2
73223: PUSH
73224: EMPTY
73225: LIST
73226: LIST
73227: LIST
73228: PUSH
73229: LD_VAR 0 1
73233: PUSH
73234: LD_INT 3
73236: MINUS
73237: PUSH
73238: LD_VAR 0 2
73242: PUSH
73243: LD_INT 1
73245: PUSH
73246: EMPTY
73247: LIST
73248: LIST
73249: LIST
73250: PUSH
73251: LD_VAR 0 1
73255: PUSH
73256: LD_INT 4
73258: PLUS
73259: PUSH
73260: LD_VAR 0 2
73264: PUSH
73265: LD_INT 4
73267: PUSH
73268: EMPTY
73269: LIST
73270: LIST
73271: LIST
73272: PUSH
73273: LD_VAR 0 1
73277: PUSH
73278: LD_INT 3
73280: PLUS
73281: PUSH
73282: LD_VAR 0 2
73286: PUSH
73287: LD_INT 3
73289: PLUS
73290: PUSH
73291: LD_INT 5
73293: PUSH
73294: EMPTY
73295: LIST
73296: LIST
73297: LIST
73298: PUSH
73299: LD_VAR 0 1
73303: PUSH
73304: LD_VAR 0 2
73308: PUSH
73309: LD_INT 4
73311: PLUS
73312: PUSH
73313: LD_INT 0
73315: PUSH
73316: EMPTY
73317: LIST
73318: LIST
73319: LIST
73320: PUSH
73321: EMPTY
73322: LIST
73323: LIST
73324: LIST
73325: LIST
73326: LIST
73327: ST_TO_ADDR
// end ; 1 :
73328: GO 74028
73330: LD_INT 1
73332: DOUBLE
73333: EQUAL
73334: IFTRUE 73338
73336: GO 73471
73338: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73339: LD_ADDR_VAR 0 5
73343: PUSH
73344: LD_VAR 0 1
73348: PUSH
73349: LD_VAR 0 2
73353: PUSH
73354: LD_INT 4
73356: MINUS
73357: PUSH
73358: LD_INT 3
73360: PUSH
73361: EMPTY
73362: LIST
73363: LIST
73364: LIST
73365: PUSH
73366: LD_VAR 0 1
73370: PUSH
73371: LD_INT 3
73373: MINUS
73374: PUSH
73375: LD_VAR 0 2
73379: PUSH
73380: LD_INT 3
73382: MINUS
73383: PUSH
73384: LD_INT 2
73386: PUSH
73387: EMPTY
73388: LIST
73389: LIST
73390: LIST
73391: PUSH
73392: LD_VAR 0 1
73396: PUSH
73397: LD_INT 4
73399: MINUS
73400: PUSH
73401: LD_VAR 0 2
73405: PUSH
73406: LD_INT 1
73408: PUSH
73409: EMPTY
73410: LIST
73411: LIST
73412: LIST
73413: PUSH
73414: LD_VAR 0 1
73418: PUSH
73419: LD_VAR 0 2
73423: PUSH
73424: LD_INT 3
73426: PLUS
73427: PUSH
73428: LD_INT 0
73430: PUSH
73431: EMPTY
73432: LIST
73433: LIST
73434: LIST
73435: PUSH
73436: LD_VAR 0 1
73440: PUSH
73441: LD_INT 4
73443: PLUS
73444: PUSH
73445: LD_VAR 0 2
73449: PUSH
73450: LD_INT 4
73452: PLUS
73453: PUSH
73454: LD_INT 5
73456: PUSH
73457: EMPTY
73458: LIST
73459: LIST
73460: LIST
73461: PUSH
73462: EMPTY
73463: LIST
73464: LIST
73465: LIST
73466: LIST
73467: LIST
73468: ST_TO_ADDR
// end ; 2 :
73469: GO 74028
73471: LD_INT 2
73473: DOUBLE
73474: EQUAL
73475: IFTRUE 73479
73477: GO 73608
73479: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73480: LD_ADDR_VAR 0 5
73484: PUSH
73485: LD_VAR 0 1
73489: PUSH
73490: LD_VAR 0 2
73494: PUSH
73495: LD_INT 3
73497: MINUS
73498: PUSH
73499: LD_INT 3
73501: PUSH
73502: EMPTY
73503: LIST
73504: LIST
73505: LIST
73506: PUSH
73507: LD_VAR 0 1
73511: PUSH
73512: LD_INT 4
73514: PLUS
73515: PUSH
73516: LD_VAR 0 2
73520: PUSH
73521: LD_INT 4
73523: PUSH
73524: EMPTY
73525: LIST
73526: LIST
73527: LIST
73528: PUSH
73529: LD_VAR 0 1
73533: PUSH
73534: LD_VAR 0 2
73538: PUSH
73539: LD_INT 4
73541: PLUS
73542: PUSH
73543: LD_INT 0
73545: PUSH
73546: EMPTY
73547: LIST
73548: LIST
73549: LIST
73550: PUSH
73551: LD_VAR 0 1
73555: PUSH
73556: LD_INT 3
73558: MINUS
73559: PUSH
73560: LD_VAR 0 2
73564: PUSH
73565: LD_INT 1
73567: PUSH
73568: EMPTY
73569: LIST
73570: LIST
73571: LIST
73572: PUSH
73573: LD_VAR 0 1
73577: PUSH
73578: LD_INT 4
73580: MINUS
73581: PUSH
73582: LD_VAR 0 2
73586: PUSH
73587: LD_INT 4
73589: MINUS
73590: PUSH
73591: LD_INT 2
73593: PUSH
73594: EMPTY
73595: LIST
73596: LIST
73597: LIST
73598: PUSH
73599: EMPTY
73600: LIST
73601: LIST
73602: LIST
73603: LIST
73604: LIST
73605: ST_TO_ADDR
// end ; 3 :
73606: GO 74028
73608: LD_INT 3
73610: DOUBLE
73611: EQUAL
73612: IFTRUE 73616
73614: GO 73749
73616: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73617: LD_ADDR_VAR 0 5
73621: PUSH
73622: LD_VAR 0 1
73626: PUSH
73627: LD_INT 3
73629: PLUS
73630: PUSH
73631: LD_VAR 0 2
73635: PUSH
73636: LD_INT 4
73638: PUSH
73639: EMPTY
73640: LIST
73641: LIST
73642: LIST
73643: PUSH
73644: LD_VAR 0 1
73648: PUSH
73649: LD_INT 4
73651: PLUS
73652: PUSH
73653: LD_VAR 0 2
73657: PUSH
73658: LD_INT 4
73660: PLUS
73661: PUSH
73662: LD_INT 5
73664: PUSH
73665: EMPTY
73666: LIST
73667: LIST
73668: LIST
73669: PUSH
73670: LD_VAR 0 1
73674: PUSH
73675: LD_INT 4
73677: MINUS
73678: PUSH
73679: LD_VAR 0 2
73683: PUSH
73684: LD_INT 1
73686: PUSH
73687: EMPTY
73688: LIST
73689: LIST
73690: LIST
73691: PUSH
73692: LD_VAR 0 1
73696: PUSH
73697: LD_VAR 0 2
73701: PUSH
73702: LD_INT 4
73704: MINUS
73705: PUSH
73706: LD_INT 3
73708: PUSH
73709: EMPTY
73710: LIST
73711: LIST
73712: LIST
73713: PUSH
73714: LD_VAR 0 1
73718: PUSH
73719: LD_INT 3
73721: MINUS
73722: PUSH
73723: LD_VAR 0 2
73727: PUSH
73728: LD_INT 3
73730: MINUS
73731: PUSH
73732: LD_INT 2
73734: PUSH
73735: EMPTY
73736: LIST
73737: LIST
73738: LIST
73739: PUSH
73740: EMPTY
73741: LIST
73742: LIST
73743: LIST
73744: LIST
73745: LIST
73746: ST_TO_ADDR
// end ; 4 :
73747: GO 74028
73749: LD_INT 4
73751: DOUBLE
73752: EQUAL
73753: IFTRUE 73757
73755: GO 73890
73757: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73758: LD_ADDR_VAR 0 5
73762: PUSH
73763: LD_VAR 0 1
73767: PUSH
73768: LD_VAR 0 2
73772: PUSH
73773: LD_INT 4
73775: PLUS
73776: PUSH
73777: LD_INT 0
73779: PUSH
73780: EMPTY
73781: LIST
73782: LIST
73783: LIST
73784: PUSH
73785: LD_VAR 0 1
73789: PUSH
73790: LD_INT 3
73792: PLUS
73793: PUSH
73794: LD_VAR 0 2
73798: PUSH
73799: LD_INT 3
73801: PLUS
73802: PUSH
73803: LD_INT 5
73805: PUSH
73806: EMPTY
73807: LIST
73808: LIST
73809: LIST
73810: PUSH
73811: LD_VAR 0 1
73815: PUSH
73816: LD_INT 4
73818: PLUS
73819: PUSH
73820: LD_VAR 0 2
73824: PUSH
73825: LD_INT 4
73827: PUSH
73828: EMPTY
73829: LIST
73830: LIST
73831: LIST
73832: PUSH
73833: LD_VAR 0 1
73837: PUSH
73838: LD_VAR 0 2
73842: PUSH
73843: LD_INT 3
73845: MINUS
73846: PUSH
73847: LD_INT 3
73849: PUSH
73850: EMPTY
73851: LIST
73852: LIST
73853: LIST
73854: PUSH
73855: LD_VAR 0 1
73859: PUSH
73860: LD_INT 4
73862: MINUS
73863: PUSH
73864: LD_VAR 0 2
73868: PUSH
73869: LD_INT 4
73871: MINUS
73872: PUSH
73873: LD_INT 2
73875: PUSH
73876: EMPTY
73877: LIST
73878: LIST
73879: LIST
73880: PUSH
73881: EMPTY
73882: LIST
73883: LIST
73884: LIST
73885: LIST
73886: LIST
73887: ST_TO_ADDR
// end ; 5 :
73888: GO 74028
73890: LD_INT 5
73892: DOUBLE
73893: EQUAL
73894: IFTRUE 73898
73896: GO 74027
73898: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73899: LD_ADDR_VAR 0 5
73903: PUSH
73904: LD_VAR 0 1
73908: PUSH
73909: LD_INT 4
73911: MINUS
73912: PUSH
73913: LD_VAR 0 2
73917: PUSH
73918: LD_INT 1
73920: PUSH
73921: EMPTY
73922: LIST
73923: LIST
73924: LIST
73925: PUSH
73926: LD_VAR 0 1
73930: PUSH
73931: LD_VAR 0 2
73935: PUSH
73936: LD_INT 4
73938: MINUS
73939: PUSH
73940: LD_INT 3
73942: PUSH
73943: EMPTY
73944: LIST
73945: LIST
73946: LIST
73947: PUSH
73948: LD_VAR 0 1
73952: PUSH
73953: LD_INT 4
73955: PLUS
73956: PUSH
73957: LD_VAR 0 2
73961: PUSH
73962: LD_INT 4
73964: PLUS
73965: PUSH
73966: LD_INT 5
73968: PUSH
73969: EMPTY
73970: LIST
73971: LIST
73972: LIST
73973: PUSH
73974: LD_VAR 0 1
73978: PUSH
73979: LD_INT 3
73981: PLUS
73982: PUSH
73983: LD_VAR 0 2
73987: PUSH
73988: LD_INT 4
73990: PUSH
73991: EMPTY
73992: LIST
73993: LIST
73994: LIST
73995: PUSH
73996: LD_VAR 0 1
74000: PUSH
74001: LD_VAR 0 2
74005: PUSH
74006: LD_INT 3
74008: PLUS
74009: PUSH
74010: LD_INT 0
74012: PUSH
74013: EMPTY
74014: LIST
74015: LIST
74016: LIST
74017: PUSH
74018: EMPTY
74019: LIST
74020: LIST
74021: LIST
74022: LIST
74023: LIST
74024: ST_TO_ADDR
// end ; end ;
74025: GO 74028
74027: POP
// result := list ;
74028: LD_ADDR_VAR 0 4
74032: PUSH
74033: LD_VAR 0 5
74037: ST_TO_ADDR
// end ;
74038: LD_VAR 0 4
74042: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74043: LD_INT 0
74045: PPUSH
74046: PPUSH
74047: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74048: LD_VAR 0 1
74052: NOT
74053: IFTRUE 74081
74055: PUSH
74056: LD_VAR 0 2
74060: PUSH
74061: LD_INT 1
74063: PUSH
74064: LD_INT 2
74066: PUSH
74067: LD_INT 3
74069: PUSH
74070: LD_INT 4
74072: PUSH
74073: EMPTY
74074: LIST
74075: LIST
74076: LIST
74077: LIST
74078: IN
74079: NOT
74080: OR
74081: IFFALSE 74085
// exit ;
74083: GO 74168
// tmp := [ ] ;
74085: LD_ADDR_VAR 0 5
74089: PUSH
74090: EMPTY
74091: ST_TO_ADDR
// for i in units do
74092: LD_ADDR_VAR 0 4
74096: PUSH
74097: LD_VAR 0 1
74101: PUSH
74102: FOR_IN
74103: IFFALSE 74137
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
74105: LD_ADDR_VAR 0 5
74109: PUSH
74110: LD_VAR 0 5
74114: PPUSH
74115: LD_VAR 0 4
74119: PPUSH
74120: LD_VAR 0 2
74124: PPUSH
74125: CALL_OW 259
74129: PPUSH
74130: CALL 75563 0 2
74134: ST_TO_ADDR
74135: GO 74102
74137: POP
74138: POP
// if not tmp then
74139: LD_VAR 0 5
74143: NOT
74144: IFFALSE 74148
// exit ;
74146: GO 74168
// result := SortListByListDesc ( units , tmp ) ;
74148: LD_ADDR_VAR 0 3
74152: PUSH
74153: LD_VAR 0 1
74157: PPUSH
74158: LD_VAR 0 5
74162: PPUSH
74163: CALL_OW 77
74167: ST_TO_ADDR
// end ;
74168: LD_VAR 0 3
74172: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74173: LD_INT 0
74175: PPUSH
74176: PPUSH
74177: PPUSH
// result := false ;
74178: LD_ADDR_VAR 0 3
74182: PUSH
74183: LD_INT 0
74185: ST_TO_ADDR
// if not building then
74186: LD_VAR 0 2
74190: NOT
74191: IFFALSE 74195
// exit ;
74193: GO 74339
// x := GetX ( building ) ;
74195: LD_ADDR_VAR 0 4
74199: PUSH
74200: LD_VAR 0 2
74204: PPUSH
74205: CALL_OW 250
74209: ST_TO_ADDR
// y := GetY ( building ) ;
74210: LD_ADDR_VAR 0 5
74214: PUSH
74215: LD_VAR 0 2
74219: PPUSH
74220: CALL_OW 251
74224: ST_TO_ADDR
// if not x or not y then
74225: LD_VAR 0 4
74229: NOT
74230: IFTRUE 74239
74232: PUSH
74233: LD_VAR 0 5
74237: NOT
74238: OR
74239: IFFALSE 74243
// exit ;
74241: GO 74339
// if GetTaskList ( unit ) then
74243: LD_VAR 0 1
74247: PPUSH
74248: CALL_OW 437
74252: IFFALSE 74339
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74254: LD_STRING e
74256: PUSH
74257: LD_VAR 0 1
74261: PPUSH
74262: CALL_OW 437
74266: PUSH
74267: LD_INT 1
74269: ARRAY
74270: PUSH
74271: LD_INT 1
74273: ARRAY
74274: EQUAL
74275: IFFALSE 74302
74277: PUSH
74278: LD_VAR 0 4
74282: PUSH
74283: LD_VAR 0 1
74287: PPUSH
74288: CALL_OW 437
74292: PUSH
74293: LD_INT 1
74295: ARRAY
74296: PUSH
74297: LD_INT 2
74299: ARRAY
74300: EQUAL
74301: AND
74302: IFFALSE 74329
74304: PUSH
74305: LD_VAR 0 5
74309: PUSH
74310: LD_VAR 0 1
74314: PPUSH
74315: CALL_OW 437
74319: PUSH
74320: LD_INT 1
74322: ARRAY
74323: PUSH
74324: LD_INT 3
74326: ARRAY
74327: EQUAL
74328: AND
74329: IFFALSE 74339
// result := true end ;
74331: LD_ADDR_VAR 0 3
74335: PUSH
74336: LD_INT 1
74338: ST_TO_ADDR
// end ;
74339: LD_VAR 0 3
74343: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74344: LD_INT 0
74346: PPUSH
// result := false ;
74347: LD_ADDR_VAR 0 4
74351: PUSH
74352: LD_INT 0
74354: ST_TO_ADDR
// if GetTaskList ( unit ) then
74355: LD_VAR 0 1
74359: PPUSH
74360: CALL_OW 437
74364: IFFALSE 74451
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74366: LD_STRING M
74368: PUSH
74369: LD_VAR 0 1
74373: PPUSH
74374: CALL_OW 437
74378: PUSH
74379: LD_INT 1
74381: ARRAY
74382: PUSH
74383: LD_INT 1
74385: ARRAY
74386: EQUAL
74387: IFFALSE 74414
74389: PUSH
74390: LD_VAR 0 2
74394: PUSH
74395: LD_VAR 0 1
74399: PPUSH
74400: CALL_OW 437
74404: PUSH
74405: LD_INT 1
74407: ARRAY
74408: PUSH
74409: LD_INT 2
74411: ARRAY
74412: EQUAL
74413: AND
74414: IFFALSE 74441
74416: PUSH
74417: LD_VAR 0 3
74421: PUSH
74422: LD_VAR 0 1
74426: PPUSH
74427: CALL_OW 437
74431: PUSH
74432: LD_INT 1
74434: ARRAY
74435: PUSH
74436: LD_INT 3
74438: ARRAY
74439: EQUAL
74440: AND
74441: IFFALSE 74451
// result := true ;
74443: LD_ADDR_VAR 0 4
74447: PUSH
74448: LD_INT 1
74450: ST_TO_ADDR
// end ; end ;
74451: LD_VAR 0 4
74455: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74456: LD_INT 0
74458: PPUSH
74459: PPUSH
74460: PPUSH
74461: PPUSH
// if not unit or not area then
74462: LD_VAR 0 1
74466: NOT
74467: IFTRUE 74476
74469: PUSH
74470: LD_VAR 0 2
74474: NOT
74475: OR
74476: IFFALSE 74480
// exit ;
74478: GO 74656
// tmp := AreaToList ( area , i ) ;
74480: LD_ADDR_VAR 0 6
74484: PUSH
74485: LD_VAR 0 2
74489: PPUSH
74490: LD_VAR 0 5
74494: PPUSH
74495: CALL_OW 517
74499: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74500: LD_ADDR_VAR 0 5
74504: PUSH
74505: DOUBLE
74506: LD_INT 1
74508: DEC
74509: ST_TO_ADDR
74510: LD_VAR 0 6
74514: PUSH
74515: LD_INT 1
74517: ARRAY
74518: PUSH
74519: FOR_TO
74520: IFFALSE 74654
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74522: LD_ADDR_VAR 0 7
74526: PUSH
74527: LD_VAR 0 6
74531: PUSH
74532: LD_INT 1
74534: ARRAY
74535: PUSH
74536: LD_VAR 0 5
74540: ARRAY
74541: PUSH
74542: LD_VAR 0 6
74546: PUSH
74547: LD_INT 2
74549: ARRAY
74550: PUSH
74551: LD_VAR 0 5
74555: ARRAY
74556: PUSH
74557: EMPTY
74558: LIST
74559: LIST
74560: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
74561: LD_INT 92
74563: PUSH
74564: LD_VAR 0 7
74568: PUSH
74569: LD_INT 1
74571: ARRAY
74572: PUSH
74573: LD_VAR 0 7
74577: PUSH
74578: LD_INT 2
74580: ARRAY
74581: PUSH
74582: LD_INT 2
74584: PUSH
74585: EMPTY
74586: LIST
74587: LIST
74588: LIST
74589: LIST
74590: PPUSH
74591: CALL_OW 69
74595: PUSH
74596: LD_INT 0
74598: EQUAL
74599: IFFALSE 74652
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74601: LD_VAR 0 1
74605: PPUSH
74606: LD_VAR 0 7
74610: PUSH
74611: LD_INT 1
74613: ARRAY
74614: PPUSH
74615: LD_VAR 0 7
74619: PUSH
74620: LD_INT 2
74622: ARRAY
74623: PPUSH
74624: LD_VAR 0 3
74628: PPUSH
74629: CALL_OW 48
// result := IsPlaced ( unit ) ;
74633: LD_ADDR_VAR 0 4
74637: PUSH
74638: LD_VAR 0 1
74642: PPUSH
74643: CALL_OW 305
74647: ST_TO_ADDR
// exit ;
74648: POP
74649: POP
74650: GO 74656
// end ; end ;
74652: GO 74519
74654: POP
74655: POP
// end ;
74656: LD_VAR 0 4
74660: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74661: LD_INT 0
74663: PPUSH
74664: PPUSH
74665: PPUSH
// if not side or side > 8 then
74666: LD_VAR 0 1
74670: NOT
74671: IFTRUE 74683
74673: PUSH
74674: LD_VAR 0 1
74678: PUSH
74679: LD_INT 8
74681: GREATER
74682: OR
74683: IFFALSE 74687
// exit ;
74685: GO 74874
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74687: LD_ADDR_VAR 0 4
74691: PUSH
74692: LD_INT 22
74694: PUSH
74695: LD_VAR 0 1
74699: PUSH
74700: EMPTY
74701: LIST
74702: LIST
74703: PUSH
74704: LD_INT 21
74706: PUSH
74707: LD_INT 3
74709: PUSH
74710: EMPTY
74711: LIST
74712: LIST
74713: PUSH
74714: EMPTY
74715: LIST
74716: LIST
74717: PPUSH
74718: CALL_OW 69
74722: ST_TO_ADDR
// if not tmp then
74723: LD_VAR 0 4
74727: NOT
74728: IFFALSE 74732
// exit ;
74730: GO 74874
// enable_addtolog := true ;
74732: LD_ADDR_OWVAR 81
74736: PUSH
74737: LD_INT 1
74739: ST_TO_ADDR
// AddToLog ( [ ) ;
74740: LD_STRING [
74742: PPUSH
74743: CALL_OW 561
// for i in tmp do
74747: LD_ADDR_VAR 0 3
74751: PUSH
74752: LD_VAR 0 4
74756: PUSH
74757: FOR_IN
74758: IFFALSE 74865
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74760: LD_STRING [
74762: PUSH
74763: LD_VAR 0 3
74767: PPUSH
74768: CALL_OW 266
74772: STR
74773: PUSH
74774: LD_STRING , 
74776: STR
74777: PUSH
74778: LD_VAR 0 3
74782: PPUSH
74783: CALL_OW 250
74787: STR
74788: PUSH
74789: LD_STRING , 
74791: STR
74792: PUSH
74793: LD_VAR 0 3
74797: PPUSH
74798: CALL_OW 251
74802: STR
74803: PUSH
74804: LD_STRING , 
74806: STR
74807: PUSH
74808: LD_VAR 0 3
74812: PPUSH
74813: CALL_OW 254
74817: STR
74818: PUSH
74819: LD_STRING , 
74821: STR
74822: PUSH
74823: LD_VAR 0 3
74827: PPUSH
74828: LD_INT 1
74830: PPUSH
74831: CALL_OW 268
74835: STR
74836: PUSH
74837: LD_STRING , 
74839: STR
74840: PUSH
74841: LD_VAR 0 3
74845: PPUSH
74846: LD_INT 2
74848: PPUSH
74849: CALL_OW 268
74853: STR
74854: PUSH
74855: LD_STRING ],
74857: STR
74858: PPUSH
74859: CALL_OW 561
// end ;
74863: GO 74757
74865: POP
74866: POP
// AddToLog ( ]; ) ;
74867: LD_STRING ];
74869: PPUSH
74870: CALL_OW 561
// end ;
74874: LD_VAR 0 2
74878: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74879: LD_INT 0
74881: PPUSH
74882: PPUSH
74883: PPUSH
74884: PPUSH
74885: PPUSH
// if not area or not rate or not max then
74886: LD_VAR 0 1
74890: NOT
74891: IFTRUE 74900
74893: PUSH
74894: LD_VAR 0 2
74898: NOT
74899: OR
74900: IFTRUE 74909
74902: PUSH
74903: LD_VAR 0 4
74907: NOT
74908: OR
74909: IFFALSE 74913
// exit ;
74911: GO 75102
// while 1 do
74913: LD_INT 1
74915: IFFALSE 75102
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74917: LD_ADDR_VAR 0 9
74921: PUSH
74922: LD_VAR 0 1
74926: PPUSH
74927: LD_INT 1
74929: PPUSH
74930: CALL_OW 287
74934: PUSH
74935: LD_INT 10
74937: MUL
74938: ST_TO_ADDR
// r := rate / 10 ;
74939: LD_ADDR_VAR 0 7
74943: PUSH
74944: LD_VAR 0 2
74948: PUSH
74949: LD_INT 10
74951: DIVREAL
74952: ST_TO_ADDR
// time := 1 1$00 ;
74953: LD_ADDR_VAR 0 8
74957: PUSH
74958: LD_INT 2100
74960: ST_TO_ADDR
// if amount < min then
74961: LD_VAR 0 9
74965: PUSH
74966: LD_VAR 0 3
74970: LESS
74971: IFFALSE 74989
// r := r * 2 else
74973: LD_ADDR_VAR 0 7
74977: PUSH
74978: LD_VAR 0 7
74982: PUSH
74983: LD_INT 2
74985: MUL
74986: ST_TO_ADDR
74987: GO 75015
// if amount > max then
74989: LD_VAR 0 9
74993: PUSH
74994: LD_VAR 0 4
74998: GREATER
74999: IFFALSE 75015
// r := r / 2 ;
75001: LD_ADDR_VAR 0 7
75005: PUSH
75006: LD_VAR 0 7
75010: PUSH
75011: LD_INT 2
75013: DIVREAL
75014: ST_TO_ADDR
// time := time / r ;
75015: LD_ADDR_VAR 0 8
75019: PUSH
75020: LD_VAR 0 8
75024: PUSH
75025: LD_VAR 0 7
75029: DIVREAL
75030: ST_TO_ADDR
// if time < 0 then
75031: LD_VAR 0 8
75035: PUSH
75036: LD_INT 0
75038: LESS
75039: IFFALSE 75056
// time := time * - 1 ;
75041: LD_ADDR_VAR 0 8
75045: PUSH
75046: LD_VAR 0 8
75050: PUSH
75051: LD_INT 1
75053: NEG
75054: MUL
75055: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75056: LD_VAR 0 8
75060: PUSH
75061: LD_INT 35
75063: PPUSH
75064: LD_INT 875
75066: PPUSH
75067: CALL_OW 12
75071: PLUS
75072: PPUSH
75073: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75077: LD_INT 1
75079: PPUSH
75080: LD_INT 5
75082: PPUSH
75083: CALL_OW 12
75087: PPUSH
75088: LD_VAR 0 1
75092: PPUSH
75093: LD_INT 1
75095: PPUSH
75096: CALL_OW 55
// end ;
75100: GO 74913
// end ;
75102: LD_VAR 0 5
75106: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75107: LD_INT 0
75109: PPUSH
75110: PPUSH
75111: PPUSH
75112: PPUSH
75113: PPUSH
75114: PPUSH
75115: PPUSH
75116: PPUSH
// if not turrets or not factories then
75117: LD_VAR 0 1
75121: NOT
75122: IFTRUE 75131
75124: PUSH
75125: LD_VAR 0 2
75129: NOT
75130: OR
75131: IFFALSE 75135
// exit ;
75133: GO 75442
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75135: LD_ADDR_VAR 0 10
75139: PUSH
75140: LD_INT 5
75142: PUSH
75143: LD_INT 6
75145: PUSH
75146: EMPTY
75147: LIST
75148: LIST
75149: PUSH
75150: LD_INT 2
75152: PUSH
75153: LD_INT 4
75155: PUSH
75156: EMPTY
75157: LIST
75158: LIST
75159: PUSH
75160: LD_INT 3
75162: PUSH
75163: LD_INT 5
75165: PUSH
75166: EMPTY
75167: LIST
75168: LIST
75169: PUSH
75170: EMPTY
75171: LIST
75172: LIST
75173: LIST
75174: PUSH
75175: LD_INT 24
75177: PUSH
75178: LD_INT 25
75180: PUSH
75181: EMPTY
75182: LIST
75183: LIST
75184: PUSH
75185: LD_INT 23
75187: PUSH
75188: LD_INT 27
75190: PUSH
75191: EMPTY
75192: LIST
75193: LIST
75194: PUSH
75195: EMPTY
75196: LIST
75197: LIST
75198: PUSH
75199: LD_INT 42
75201: PUSH
75202: LD_INT 43
75204: PUSH
75205: EMPTY
75206: LIST
75207: LIST
75208: PUSH
75209: LD_INT 44
75211: PUSH
75212: LD_INT 46
75214: PUSH
75215: EMPTY
75216: LIST
75217: LIST
75218: PUSH
75219: LD_INT 45
75221: PUSH
75222: LD_INT 47
75224: PUSH
75225: EMPTY
75226: LIST
75227: LIST
75228: PUSH
75229: EMPTY
75230: LIST
75231: LIST
75232: LIST
75233: PUSH
75234: EMPTY
75235: LIST
75236: LIST
75237: LIST
75238: ST_TO_ADDR
// result := [ ] ;
75239: LD_ADDR_VAR 0 3
75243: PUSH
75244: EMPTY
75245: ST_TO_ADDR
// for i in turrets do
75246: LD_ADDR_VAR 0 4
75250: PUSH
75251: LD_VAR 0 1
75255: PUSH
75256: FOR_IN
75257: IFFALSE 75440
// begin nat := GetNation ( i ) ;
75259: LD_ADDR_VAR 0 7
75263: PUSH
75264: LD_VAR 0 4
75268: PPUSH
75269: CALL_OW 248
75273: ST_TO_ADDR
// weapon := 0 ;
75274: LD_ADDR_VAR 0 8
75278: PUSH
75279: LD_INT 0
75281: ST_TO_ADDR
// if not nat then
75282: LD_VAR 0 7
75286: NOT
75287: IFFALSE 75291
// continue ;
75289: GO 75256
// for j in list [ nat ] do
75291: LD_ADDR_VAR 0 5
75295: PUSH
75296: LD_VAR 0 10
75300: PUSH
75301: LD_VAR 0 7
75305: ARRAY
75306: PUSH
75307: FOR_IN
75308: IFFALSE 75349
// if GetBWeapon ( i ) = j [ 1 ] then
75310: LD_VAR 0 4
75314: PPUSH
75315: CALL_OW 269
75319: PUSH
75320: LD_VAR 0 5
75324: PUSH
75325: LD_INT 1
75327: ARRAY
75328: EQUAL
75329: IFFALSE 75347
// begin weapon := j [ 2 ] ;
75331: LD_ADDR_VAR 0 8
75335: PUSH
75336: LD_VAR 0 5
75340: PUSH
75341: LD_INT 2
75343: ARRAY
75344: ST_TO_ADDR
// break ;
75345: GO 75349
// end ;
75347: GO 75307
75349: POP
75350: POP
// if not weapon then
75351: LD_VAR 0 8
75355: NOT
75356: IFFALSE 75360
// continue ;
75358: GO 75256
// for k in factories do
75360: LD_ADDR_VAR 0 6
75364: PUSH
75365: LD_VAR 0 2
75369: PUSH
75370: FOR_IN
75371: IFFALSE 75436
// begin weapons := AvailableWeaponList ( k ) ;
75373: LD_ADDR_VAR 0 9
75377: PUSH
75378: LD_VAR 0 6
75382: PPUSH
75383: CALL_OW 478
75387: ST_TO_ADDR
// if not weapons then
75388: LD_VAR 0 9
75392: NOT
75393: IFFALSE 75397
// continue ;
75395: GO 75370
// if weapon in weapons then
75397: LD_VAR 0 8
75401: PUSH
75402: LD_VAR 0 9
75406: IN
75407: IFFALSE 75434
// begin result := [ i , weapon ] ;
75409: LD_ADDR_VAR 0 3
75413: PUSH
75414: LD_VAR 0 4
75418: PUSH
75419: LD_VAR 0 8
75423: PUSH
75424: EMPTY
75425: LIST
75426: LIST
75427: ST_TO_ADDR
// exit ;
75428: POP
75429: POP
75430: POP
75431: POP
75432: GO 75442
// end ; end ;
75434: GO 75370
75436: POP
75437: POP
// end ;
75438: GO 75256
75440: POP
75441: POP
// end ;
75442: LD_VAR 0 3
75446: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75447: LD_INT 0
75449: PPUSH
// if not side or side > 8 then
75450: LD_VAR 0 3
75454: NOT
75455: IFTRUE 75467
75457: PUSH
75458: LD_VAR 0 3
75462: PUSH
75463: LD_INT 8
75465: GREATER
75466: OR
75467: IFFALSE 75471
// exit ;
75469: GO 75530
// if not range then
75471: LD_VAR 0 4
75475: NOT
75476: IFFALSE 75487
// range := - 12 ;
75478: LD_ADDR_VAR 0 4
75482: PUSH
75483: LD_INT 12
75485: NEG
75486: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75487: LD_VAR 0 1
75491: PPUSH
75492: LD_VAR 0 2
75496: PPUSH
75497: LD_VAR 0 3
75501: PPUSH
75502: LD_VAR 0 4
75506: PPUSH
75507: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75511: LD_VAR 0 1
75515: PPUSH
75516: LD_VAR 0 2
75520: PPUSH
75521: LD_VAR 0 3
75525: PPUSH
75526: CALL_OW 331
// end ;
75530: LD_VAR 0 5
75534: RET
// export function Video ( mode ) ; begin
75535: LD_INT 0
75537: PPUSH
// ingame_video = mode ;
75538: LD_ADDR_OWVAR 52
75542: PUSH
75543: LD_VAR 0 1
75547: ST_TO_ADDR
// interface_hidden = mode ;
75548: LD_ADDR_OWVAR 54
75552: PUSH
75553: LD_VAR 0 1
75557: ST_TO_ADDR
// end ;
75558: LD_VAR 0 2
75562: RET
// export function Join ( array , element ) ; begin
75563: LD_INT 0
75565: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75566: LD_ADDR_VAR 0 3
75570: PUSH
75571: LD_VAR 0 1
75575: PPUSH
75576: LD_VAR 0 1
75580: PUSH
75581: LD_INT 1
75583: PLUS
75584: PPUSH
75585: LD_VAR 0 2
75589: PPUSH
75590: CALL_OW 1
75594: ST_TO_ADDR
// end ;
75595: LD_VAR 0 3
75599: RET
// export function JoinUnion ( array , element ) ; begin
75600: LD_INT 0
75602: PPUSH
// result := array union element ;
75603: LD_ADDR_VAR 0 3
75607: PUSH
75608: LD_VAR 0 1
75612: PUSH
75613: LD_VAR 0 2
75617: UNION
75618: ST_TO_ADDR
// end ;
75619: LD_VAR 0 3
75623: RET
// export function GetBehemoths ( side ) ; begin
75624: LD_INT 0
75626: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
75627: LD_ADDR_VAR 0 2
75631: PUSH
75632: LD_INT 22
75634: PUSH
75635: LD_VAR 0 1
75639: PUSH
75640: EMPTY
75641: LIST
75642: LIST
75643: PUSH
75644: LD_INT 31
75646: PUSH
75647: LD_INT 25
75649: PUSH
75650: EMPTY
75651: LIST
75652: LIST
75653: PUSH
75654: EMPTY
75655: LIST
75656: LIST
75657: PPUSH
75658: CALL_OW 69
75662: ST_TO_ADDR
// end ;
75663: LD_VAR 0 2
75667: RET
// export function Shuffle ( array ) ; var i , index ; begin
75668: LD_INT 0
75670: PPUSH
75671: PPUSH
75672: PPUSH
// result := [ ] ;
75673: LD_ADDR_VAR 0 2
75677: PUSH
75678: EMPTY
75679: ST_TO_ADDR
// if not array then
75680: LD_VAR 0 1
75684: NOT
75685: IFFALSE 75689
// exit ;
75687: GO 75788
// Randomize ;
75689: CALL_OW 10
// for i = array downto 1 do
75693: LD_ADDR_VAR 0 3
75697: PUSH
75698: DOUBLE
75699: LD_VAR 0 1
75703: INC
75704: ST_TO_ADDR
75705: LD_INT 1
75707: PUSH
75708: FOR_DOWNTO
75709: IFFALSE 75786
// begin index := rand ( 1 , array ) ;
75711: LD_ADDR_VAR 0 4
75715: PUSH
75716: LD_INT 1
75718: PPUSH
75719: LD_VAR 0 1
75723: PPUSH
75724: CALL_OW 12
75728: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75729: LD_ADDR_VAR 0 2
75733: PUSH
75734: LD_VAR 0 2
75738: PPUSH
75739: LD_VAR 0 2
75743: PUSH
75744: LD_INT 1
75746: PLUS
75747: PPUSH
75748: LD_VAR 0 1
75752: PUSH
75753: LD_VAR 0 4
75757: ARRAY
75758: PPUSH
75759: CALL_OW 2
75763: ST_TO_ADDR
// array := Delete ( array , index ) ;
75764: LD_ADDR_VAR 0 1
75768: PUSH
75769: LD_VAR 0 1
75773: PPUSH
75774: LD_VAR 0 4
75778: PPUSH
75779: CALL_OW 3
75783: ST_TO_ADDR
// end ;
75784: GO 75708
75786: POP
75787: POP
// end ;
75788: LD_VAR 0 2
75792: RET
// export function GetBaseMaterials ( base ) ; begin
75793: LD_INT 0
75795: PPUSH
// result := [ 0 , 0 , 0 ] ;
75796: LD_ADDR_VAR 0 2
75800: PUSH
75801: LD_INT 0
75803: PUSH
75804: LD_INT 0
75806: PUSH
75807: LD_INT 0
75809: PUSH
75810: EMPTY
75811: LIST
75812: LIST
75813: LIST
75814: ST_TO_ADDR
// if not base then
75815: LD_VAR 0 1
75819: NOT
75820: IFFALSE 75824
// exit ;
75822: GO 75873
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75824: LD_ADDR_VAR 0 2
75828: PUSH
75829: LD_VAR 0 1
75833: PPUSH
75834: LD_INT 1
75836: PPUSH
75837: CALL_OW 275
75841: PUSH
75842: LD_VAR 0 1
75846: PPUSH
75847: LD_INT 2
75849: PPUSH
75850: CALL_OW 275
75854: PUSH
75855: LD_VAR 0 1
75859: PPUSH
75860: LD_INT 3
75862: PPUSH
75863: CALL_OW 275
75867: PUSH
75868: EMPTY
75869: LIST
75870: LIST
75871: LIST
75872: ST_TO_ADDR
// end ;
75873: LD_VAR 0 2
75877: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75878: LD_INT 0
75880: PPUSH
75881: PPUSH
// result := array ;
75882: LD_ADDR_VAR 0 3
75886: PUSH
75887: LD_VAR 0 1
75891: ST_TO_ADDR
// if size >= result then
75892: LD_VAR 0 2
75896: PUSH
75897: LD_VAR 0 3
75901: GREATEREQUAL
75902: IFFALSE 75906
// exit ;
75904: GO 75956
// if size then
75906: LD_VAR 0 2
75910: IFFALSE 75956
// for i := array downto size do
75912: LD_ADDR_VAR 0 4
75916: PUSH
75917: DOUBLE
75918: LD_VAR 0 1
75922: INC
75923: ST_TO_ADDR
75924: LD_VAR 0 2
75928: PUSH
75929: FOR_DOWNTO
75930: IFFALSE 75954
// result := Delete ( result , result ) ;
75932: LD_ADDR_VAR 0 3
75936: PUSH
75937: LD_VAR 0 3
75941: PPUSH
75942: LD_VAR 0 3
75946: PPUSH
75947: CALL_OW 3
75951: ST_TO_ADDR
75952: GO 75929
75954: POP
75955: POP
// end ;
75956: LD_VAR 0 3
75960: RET
// export function ComExit ( unit ) ; var tmp ; begin
75961: LD_INT 0
75963: PPUSH
75964: PPUSH
// if not IsInUnit ( unit ) then
75965: LD_VAR 0 1
75969: PPUSH
75970: CALL_OW 310
75974: NOT
75975: IFFALSE 75979
// exit ;
75977: GO 76039
// tmp := IsInUnit ( unit ) ;
75979: LD_ADDR_VAR 0 3
75983: PUSH
75984: LD_VAR 0 1
75988: PPUSH
75989: CALL_OW 310
75993: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75994: LD_VAR 0 3
75998: PPUSH
75999: CALL_OW 247
76003: PUSH
76004: LD_INT 2
76006: EQUAL
76007: IFFALSE 76020
// ComExitVehicle ( unit ) else
76009: LD_VAR 0 1
76013: PPUSH
76014: CALL_OW 121
76018: GO 76029
// ComExitBuilding ( unit ) ;
76020: LD_VAR 0 1
76024: PPUSH
76025: CALL_OW 122
// result := tmp ;
76029: LD_ADDR_VAR 0 2
76033: PUSH
76034: LD_VAR 0 3
76038: ST_TO_ADDR
// end ;
76039: LD_VAR 0 2
76043: RET
// export function ComExitAll ( units ) ; var i ; begin
76044: LD_INT 0
76046: PPUSH
76047: PPUSH
// if not units then
76048: LD_VAR 0 1
76052: NOT
76053: IFFALSE 76057
// exit ;
76055: GO 76083
// for i in units do
76057: LD_ADDR_VAR 0 3
76061: PUSH
76062: LD_VAR 0 1
76066: PUSH
76067: FOR_IN
76068: IFFALSE 76081
// ComExit ( i ) ;
76070: LD_VAR 0 3
76074: PPUSH
76075: CALL 75961 0 1
76079: GO 76067
76081: POP
76082: POP
// end ;
76083: LD_VAR 0 2
76087: RET
// export function ResetHc ; begin
76088: LD_INT 0
76090: PPUSH
// InitHc ;
76091: CALL_OW 19
// hc_importance := 0 ;
76095: LD_ADDR_OWVAR 32
76099: PUSH
76100: LD_INT 0
76102: ST_TO_ADDR
// end ;
76103: LD_VAR 0 1
76107: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76108: LD_INT 0
76110: PPUSH
76111: PPUSH
76112: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76113: LD_ADDR_VAR 0 6
76117: PUSH
76118: LD_VAR 0 1
76122: PUSH
76123: LD_VAR 0 3
76127: PLUS
76128: PUSH
76129: LD_INT 2
76131: DIV
76132: ST_TO_ADDR
// if _x < 0 then
76133: LD_VAR 0 6
76137: PUSH
76138: LD_INT 0
76140: LESS
76141: IFFALSE 76158
// _x := _x * - 1 ;
76143: LD_ADDR_VAR 0 6
76147: PUSH
76148: LD_VAR 0 6
76152: PUSH
76153: LD_INT 1
76155: NEG
76156: MUL
76157: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76158: LD_ADDR_VAR 0 7
76162: PUSH
76163: LD_VAR 0 2
76167: PUSH
76168: LD_VAR 0 4
76172: PLUS
76173: PUSH
76174: LD_INT 2
76176: DIV
76177: ST_TO_ADDR
// if _y < 0 then
76178: LD_VAR 0 7
76182: PUSH
76183: LD_INT 0
76185: LESS
76186: IFFALSE 76203
// _y := _y * - 1 ;
76188: LD_ADDR_VAR 0 7
76192: PUSH
76193: LD_VAR 0 7
76197: PUSH
76198: LD_INT 1
76200: NEG
76201: MUL
76202: ST_TO_ADDR
// result := [ _x , _y ] ;
76203: LD_ADDR_VAR 0 5
76207: PUSH
76208: LD_VAR 0 6
76212: PUSH
76213: LD_VAR 0 7
76217: PUSH
76218: EMPTY
76219: LIST
76220: LIST
76221: ST_TO_ADDR
// end ;
76222: LD_VAR 0 5
76226: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76227: LD_INT 0
76229: PPUSH
76230: PPUSH
76231: PPUSH
76232: PPUSH
// task := GetTaskList ( unit ) ;
76233: LD_ADDR_VAR 0 7
76237: PUSH
76238: LD_VAR 0 1
76242: PPUSH
76243: CALL_OW 437
76247: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76248: LD_VAR 0 7
76252: NOT
76253: IFFALSE 76272
76255: PUSH
76256: LD_VAR 0 1
76260: PPUSH
76261: LD_VAR 0 2
76265: PPUSH
76266: CALL_OW 308
76270: NOT
76271: AND
76272: IFFALSE 76276
// exit ;
76274: GO 76394
// if IsInArea ( unit , area ) then
76276: LD_VAR 0 1
76280: PPUSH
76281: LD_VAR 0 2
76285: PPUSH
76286: CALL_OW 308
76290: IFFALSE 76308
// begin ComMoveToArea ( unit , goAway ) ;
76292: LD_VAR 0 1
76296: PPUSH
76297: LD_VAR 0 3
76301: PPUSH
76302: CALL_OW 113
// exit ;
76306: GO 76394
// end ; if task [ 1 ] [ 1 ] <> M then
76308: LD_VAR 0 7
76312: PUSH
76313: LD_INT 1
76315: ARRAY
76316: PUSH
76317: LD_INT 1
76319: ARRAY
76320: PUSH
76321: LD_STRING M
76323: NONEQUAL
76324: IFFALSE 76328
// exit ;
76326: GO 76394
// x := task [ 1 ] [ 2 ] ;
76328: LD_ADDR_VAR 0 5
76332: PUSH
76333: LD_VAR 0 7
76337: PUSH
76338: LD_INT 1
76340: ARRAY
76341: PUSH
76342: LD_INT 2
76344: ARRAY
76345: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76346: LD_ADDR_VAR 0 6
76350: PUSH
76351: LD_VAR 0 7
76355: PUSH
76356: LD_INT 1
76358: ARRAY
76359: PUSH
76360: LD_INT 3
76362: ARRAY
76363: ST_TO_ADDR
// if InArea ( x , y , area ) then
76364: LD_VAR 0 5
76368: PPUSH
76369: LD_VAR 0 6
76373: PPUSH
76374: LD_VAR 0 2
76378: PPUSH
76379: CALL_OW 309
76383: IFFALSE 76394
// ComStop ( unit ) ;
76385: LD_VAR 0 1
76389: PPUSH
76390: CALL_OW 141
// end ;
76394: LD_VAR 0 4
76398: RET
// export function Abs ( value ) ; begin
76399: LD_INT 0
76401: PPUSH
// result := value ;
76402: LD_ADDR_VAR 0 2
76406: PUSH
76407: LD_VAR 0 1
76411: ST_TO_ADDR
// if value < 0 then
76412: LD_VAR 0 1
76416: PUSH
76417: LD_INT 0
76419: LESS
76420: IFFALSE 76437
// result := value * - 1 ;
76422: LD_ADDR_VAR 0 2
76426: PUSH
76427: LD_VAR 0 1
76431: PUSH
76432: LD_INT 1
76434: NEG
76435: MUL
76436: ST_TO_ADDR
// end ;
76437: LD_VAR 0 2
76441: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76442: LD_INT 0
76444: PPUSH
76445: PPUSH
76446: PPUSH
76447: PPUSH
76448: PPUSH
76449: PPUSH
76450: PPUSH
76451: PPUSH
// if not unit or not building then
76452: LD_VAR 0 1
76456: NOT
76457: IFTRUE 76466
76459: PUSH
76460: LD_VAR 0 2
76464: NOT
76465: OR
76466: IFFALSE 76470
// exit ;
76468: GO 76698
// x := GetX ( building ) ;
76470: LD_ADDR_VAR 0 4
76474: PUSH
76475: LD_VAR 0 2
76479: PPUSH
76480: CALL_OW 250
76484: ST_TO_ADDR
// y := GetY ( building ) ;
76485: LD_ADDR_VAR 0 6
76489: PUSH
76490: LD_VAR 0 2
76494: PPUSH
76495: CALL_OW 251
76499: ST_TO_ADDR
// d := GetDir ( building ) ;
76500: LD_ADDR_VAR 0 8
76504: PUSH
76505: LD_VAR 0 2
76509: PPUSH
76510: CALL_OW 254
76514: ST_TO_ADDR
// r := 4 ;
76515: LD_ADDR_VAR 0 9
76519: PUSH
76520: LD_INT 4
76522: ST_TO_ADDR
// for i := 1 to 5 do
76523: LD_ADDR_VAR 0 10
76527: PUSH
76528: DOUBLE
76529: LD_INT 1
76531: DEC
76532: ST_TO_ADDR
76533: LD_INT 5
76535: PUSH
76536: FOR_TO
76537: IFFALSE 76696
// begin _x := ShiftX ( x , d , r + i ) ;
76539: LD_ADDR_VAR 0 5
76543: PUSH
76544: LD_VAR 0 4
76548: PPUSH
76549: LD_VAR 0 8
76553: PPUSH
76554: LD_VAR 0 9
76558: PUSH
76559: LD_VAR 0 10
76563: PLUS
76564: PPUSH
76565: CALL_OW 272
76569: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76570: LD_ADDR_VAR 0 7
76574: PUSH
76575: LD_VAR 0 6
76579: PPUSH
76580: LD_VAR 0 8
76584: PPUSH
76585: LD_VAR 0 9
76589: PUSH
76590: LD_VAR 0 10
76594: PLUS
76595: PPUSH
76596: CALL_OW 273
76600: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76601: LD_VAR 0 5
76605: PPUSH
76606: LD_VAR 0 7
76610: PPUSH
76611: CALL_OW 488
76615: IFFALSE 76650
76617: PUSH
76618: LD_VAR 0 5
76622: PPUSH
76623: LD_VAR 0 7
76627: PPUSH
76628: CALL_OW 428
76632: PPUSH
76633: CALL_OW 247
76637: PUSH
76638: LD_INT 3
76640: PUSH
76641: LD_INT 2
76643: PUSH
76644: EMPTY
76645: LIST
76646: LIST
76647: IN
76648: NOT
76649: AND
76650: IFFALSE 76694
// begin ComMoveXY ( unit , _x , _y ) ;
76652: LD_VAR 0 1
76656: PPUSH
76657: LD_VAR 0 5
76661: PPUSH
76662: LD_VAR 0 7
76666: PPUSH
76667: CALL_OW 111
// result := [ _x , _y ] ;
76671: LD_ADDR_VAR 0 3
76675: PUSH
76676: LD_VAR 0 5
76680: PUSH
76681: LD_VAR 0 7
76685: PUSH
76686: EMPTY
76687: LIST
76688: LIST
76689: ST_TO_ADDR
// exit ;
76690: POP
76691: POP
76692: GO 76698
// end ; end ;
76694: GO 76536
76696: POP
76697: POP
// end ;
76698: LD_VAR 0 3
76702: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76703: LD_INT 0
76705: PPUSH
76706: PPUSH
76707: PPUSH
// result := 0 ;
76708: LD_ADDR_VAR 0 3
76712: PUSH
76713: LD_INT 0
76715: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76716: LD_VAR 0 1
76720: PUSH
76721: LD_INT 0
76723: LESS
76724: IFTRUE 76736
76726: PUSH
76727: LD_VAR 0 1
76731: PUSH
76732: LD_INT 8
76734: GREATER
76735: OR
76736: IFTRUE 76748
76738: PUSH
76739: LD_VAR 0 2
76743: PUSH
76744: LD_INT 0
76746: LESS
76747: OR
76748: IFTRUE 76760
76750: PUSH
76751: LD_VAR 0 2
76755: PUSH
76756: LD_INT 8
76758: GREATER
76759: OR
76760: IFFALSE 76764
// exit ;
76762: GO 76839
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76764: LD_ADDR_VAR 0 4
76768: PUSH
76769: LD_INT 22
76771: PUSH
76772: LD_VAR 0 2
76776: PUSH
76777: EMPTY
76778: LIST
76779: LIST
76780: PPUSH
76781: CALL_OW 69
76785: PUSH
76786: FOR_IN
76787: IFFALSE 76837
// begin un := UnitShoot ( i ) ;
76789: LD_ADDR_VAR 0 5
76793: PUSH
76794: LD_VAR 0 4
76798: PPUSH
76799: CALL_OW 504
76803: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76804: LD_VAR 0 5
76808: PPUSH
76809: CALL_OW 255
76813: PUSH
76814: LD_VAR 0 1
76818: EQUAL
76819: IFFALSE 76835
// begin result := un ;
76821: LD_ADDR_VAR 0 3
76825: PUSH
76826: LD_VAR 0 5
76830: ST_TO_ADDR
// exit ;
76831: POP
76832: POP
76833: GO 76839
// end ; end ;
76835: GO 76786
76837: POP
76838: POP
// end ;
76839: LD_VAR 0 3
76843: RET
// export function GetCargoBay ( units ) ; begin
76844: LD_INT 0
76846: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76847: LD_ADDR_VAR 0 2
76851: PUSH
76852: LD_VAR 0 1
76856: PPUSH
76857: LD_INT 2
76859: PUSH
76860: LD_INT 34
76862: PUSH
76863: LD_INT 12
76865: PUSH
76866: EMPTY
76867: LIST
76868: LIST
76869: PUSH
76870: LD_INT 34
76872: PUSH
76873: LD_INT 51
76875: PUSH
76876: EMPTY
76877: LIST
76878: LIST
76879: PUSH
76880: LD_INT 34
76882: PUSH
76883: LD_INT 32
76885: PUSH
76886: EMPTY
76887: LIST
76888: LIST
76889: PUSH
76890: LD_INT 34
76892: PUSH
76893: LD_INT 89
76895: PUSH
76896: EMPTY
76897: LIST
76898: LIST
76899: PUSH
76900: EMPTY
76901: LIST
76902: LIST
76903: LIST
76904: LIST
76905: LIST
76906: PPUSH
76907: CALL_OW 72
76911: ST_TO_ADDR
// end ;
76912: LD_VAR 0 2
76916: RET
// export function Negate ( value ) ; begin
76917: LD_INT 0
76919: PPUSH
// result := not value ;
76920: LD_ADDR_VAR 0 2
76924: PUSH
76925: LD_VAR 0 1
76929: NOT
76930: ST_TO_ADDR
// end ;
76931: LD_VAR 0 2
76935: RET
// export function Inc ( value ) ; begin
76936: LD_INT 0
76938: PPUSH
// result := value + 1 ;
76939: LD_ADDR_VAR 0 2
76943: PUSH
76944: LD_VAR 0 1
76948: PUSH
76949: LD_INT 1
76951: PLUS
76952: ST_TO_ADDR
// end ;
76953: LD_VAR 0 2
76957: RET
// export function Dec ( value ) ; begin
76958: LD_INT 0
76960: PPUSH
// result := value - 1 ;
76961: LD_ADDR_VAR 0 2
76965: PUSH
76966: LD_VAR 0 1
76970: PUSH
76971: LD_INT 1
76973: MINUS
76974: ST_TO_ADDR
// end ;
76975: LD_VAR 0 2
76979: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76980: LD_INT 0
76982: PPUSH
76983: PPUSH
76984: PPUSH
76985: PPUSH
76986: PPUSH
76987: PPUSH
76988: PPUSH
76989: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76990: LD_VAR 0 1
76994: PPUSH
76995: LD_VAR 0 2
76999: PPUSH
77000: CALL_OW 488
77004: NOT
77005: IFTRUE 77024
77007: PUSH
77008: LD_VAR 0 3
77012: PPUSH
77013: LD_VAR 0 4
77017: PPUSH
77018: CALL_OW 488
77022: NOT
77023: OR
77024: IFFALSE 77037
// begin result := - 1 ;
77026: LD_ADDR_VAR 0 5
77030: PUSH
77031: LD_INT 1
77033: NEG
77034: ST_TO_ADDR
// exit ;
77035: GO 77272
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77037: LD_ADDR_VAR 0 12
77041: PUSH
77042: LD_VAR 0 1
77046: PPUSH
77047: LD_VAR 0 2
77051: PPUSH
77052: LD_VAR 0 3
77056: PPUSH
77057: LD_VAR 0 4
77061: PPUSH
77062: CALL 76108 0 4
77066: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77067: LD_ADDR_VAR 0 11
77071: PUSH
77072: LD_VAR 0 1
77076: PPUSH
77077: LD_VAR 0 2
77081: PPUSH
77082: LD_VAR 0 12
77086: PUSH
77087: LD_INT 1
77089: ARRAY
77090: PPUSH
77091: LD_VAR 0 12
77095: PUSH
77096: LD_INT 2
77098: ARRAY
77099: PPUSH
77100: CALL_OW 298
77104: ST_TO_ADDR
// distance := 9999 ;
77105: LD_ADDR_VAR 0 10
77109: PUSH
77110: LD_INT 9999
77112: ST_TO_ADDR
// for i := 0 to 5 do
77113: LD_ADDR_VAR 0 6
77117: PUSH
77118: DOUBLE
77119: LD_INT 0
77121: DEC
77122: ST_TO_ADDR
77123: LD_INT 5
77125: PUSH
77126: FOR_TO
77127: IFFALSE 77270
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77129: LD_ADDR_VAR 0 7
77133: PUSH
77134: LD_VAR 0 1
77138: PPUSH
77139: LD_VAR 0 6
77143: PPUSH
77144: LD_VAR 0 11
77148: PPUSH
77149: CALL_OW 272
77153: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77154: LD_ADDR_VAR 0 8
77158: PUSH
77159: LD_VAR 0 2
77163: PPUSH
77164: LD_VAR 0 6
77168: PPUSH
77169: LD_VAR 0 11
77173: PPUSH
77174: CALL_OW 273
77178: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77179: LD_VAR 0 7
77183: PPUSH
77184: LD_VAR 0 8
77188: PPUSH
77189: CALL_OW 488
77193: NOT
77194: IFFALSE 77198
// continue ;
77196: GO 77126
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77198: LD_ADDR_VAR 0 9
77202: PUSH
77203: LD_VAR 0 12
77207: PUSH
77208: LD_INT 1
77210: ARRAY
77211: PPUSH
77212: LD_VAR 0 12
77216: PUSH
77217: LD_INT 2
77219: ARRAY
77220: PPUSH
77221: LD_VAR 0 7
77225: PPUSH
77226: LD_VAR 0 8
77230: PPUSH
77231: CALL_OW 298
77235: ST_TO_ADDR
// if tmp < distance then
77236: LD_VAR 0 9
77240: PUSH
77241: LD_VAR 0 10
77245: LESS
77246: IFFALSE 77268
// begin result := i ;
77248: LD_ADDR_VAR 0 5
77252: PUSH
77253: LD_VAR 0 6
77257: ST_TO_ADDR
// distance := tmp ;
77258: LD_ADDR_VAR 0 10
77262: PUSH
77263: LD_VAR 0 9
77267: ST_TO_ADDR
// end ; end ;
77268: GO 77126
77270: POP
77271: POP
// end ;
77272: LD_VAR 0 5
77276: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77277: LD_INT 0
77279: PPUSH
77280: PPUSH
// if not driver or not IsInUnit ( driver ) then
77281: LD_VAR 0 1
77285: NOT
77286: IFTRUE 77300
77288: PUSH
77289: LD_VAR 0 1
77293: PPUSH
77294: CALL_OW 310
77298: NOT
77299: OR
77300: IFFALSE 77304
// exit ;
77302: GO 77394
// vehicle := IsInUnit ( driver ) ;
77304: LD_ADDR_VAR 0 3
77308: PUSH
77309: LD_VAR 0 1
77313: PPUSH
77314: CALL_OW 310
77318: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77319: LD_VAR 0 1
77323: PPUSH
77324: LD_STRING \
77326: PUSH
77327: LD_INT 0
77329: PUSH
77330: LD_INT 0
77332: PUSH
77333: LD_INT 0
77335: PUSH
77336: LD_INT 0
77338: PUSH
77339: LD_INT 0
77341: PUSH
77342: LD_INT 0
77344: PUSH
77345: EMPTY
77346: LIST
77347: LIST
77348: LIST
77349: LIST
77350: LIST
77351: LIST
77352: LIST
77353: PUSH
77354: LD_STRING E
77356: PUSH
77357: LD_INT 0
77359: PUSH
77360: LD_INT 0
77362: PUSH
77363: LD_VAR 0 3
77367: PUSH
77368: LD_INT 0
77370: PUSH
77371: LD_INT 0
77373: PUSH
77374: LD_INT 0
77376: PUSH
77377: EMPTY
77378: LIST
77379: LIST
77380: LIST
77381: LIST
77382: LIST
77383: LIST
77384: LIST
77385: PUSH
77386: EMPTY
77387: LIST
77388: LIST
77389: PPUSH
77390: CALL_OW 446
// end ;
77394: LD_VAR 0 2
77398: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77399: LD_INT 0
77401: PPUSH
77402: PPUSH
// if not driver or not IsInUnit ( driver ) then
77403: LD_VAR 0 1
77407: NOT
77408: IFTRUE 77422
77410: PUSH
77411: LD_VAR 0 1
77415: PPUSH
77416: CALL_OW 310
77420: NOT
77421: OR
77422: IFFALSE 77426
// exit ;
77424: GO 77516
// vehicle := IsInUnit ( driver ) ;
77426: LD_ADDR_VAR 0 3
77430: PUSH
77431: LD_VAR 0 1
77435: PPUSH
77436: CALL_OW 310
77440: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77441: LD_VAR 0 1
77445: PPUSH
77446: LD_STRING \
77448: PUSH
77449: LD_INT 0
77451: PUSH
77452: LD_INT 0
77454: PUSH
77455: LD_INT 0
77457: PUSH
77458: LD_INT 0
77460: PUSH
77461: LD_INT 0
77463: PUSH
77464: LD_INT 0
77466: PUSH
77467: EMPTY
77468: LIST
77469: LIST
77470: LIST
77471: LIST
77472: LIST
77473: LIST
77474: LIST
77475: PUSH
77476: LD_STRING E
77478: PUSH
77479: LD_INT 0
77481: PUSH
77482: LD_INT 0
77484: PUSH
77485: LD_VAR 0 3
77489: PUSH
77490: LD_INT 0
77492: PUSH
77493: LD_INT 0
77495: PUSH
77496: LD_INT 0
77498: PUSH
77499: EMPTY
77500: LIST
77501: LIST
77502: LIST
77503: LIST
77504: LIST
77505: LIST
77506: LIST
77507: PUSH
77508: EMPTY
77509: LIST
77510: LIST
77511: PPUSH
77512: CALL_OW 447
// end ;
77516: LD_VAR 0 2
77520: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77521: LD_INT 0
77523: PPUSH
77524: PPUSH
77525: PPUSH
// tmp := [ ] ;
77526: LD_ADDR_VAR 0 5
77530: PUSH
77531: EMPTY
77532: ST_TO_ADDR
// for i in units do
77533: LD_ADDR_VAR 0 4
77537: PUSH
77538: LD_VAR 0 1
77542: PUSH
77543: FOR_IN
77544: IFFALSE 77582
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77546: LD_ADDR_VAR 0 5
77550: PUSH
77551: LD_VAR 0 5
77555: PPUSH
77556: LD_VAR 0 5
77560: PUSH
77561: LD_INT 1
77563: PLUS
77564: PPUSH
77565: LD_VAR 0 4
77569: PPUSH
77570: CALL_OW 256
77574: PPUSH
77575: CALL_OW 2
77579: ST_TO_ADDR
77580: GO 77543
77582: POP
77583: POP
// if not tmp then
77584: LD_VAR 0 5
77588: NOT
77589: IFFALSE 77593
// exit ;
77591: GO 77641
// if asc then
77593: LD_VAR 0 2
77597: IFFALSE 77621
// result := SortListByListAsc ( units , tmp ) else
77599: LD_ADDR_VAR 0 3
77603: PUSH
77604: LD_VAR 0 1
77608: PPUSH
77609: LD_VAR 0 5
77613: PPUSH
77614: CALL_OW 76
77618: ST_TO_ADDR
77619: GO 77641
// result := SortListByListDesc ( units , tmp ) ;
77621: LD_ADDR_VAR 0 3
77625: PUSH
77626: LD_VAR 0 1
77630: PPUSH
77631: LD_VAR 0 5
77635: PPUSH
77636: CALL_OW 77
77640: ST_TO_ADDR
// end ;
77641: LD_VAR 0 3
77645: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77646: LD_INT 0
77648: PPUSH
77649: PPUSH
// task := GetTaskList ( mech ) ;
77650: LD_ADDR_VAR 0 4
77654: PUSH
77655: LD_VAR 0 1
77659: PPUSH
77660: CALL_OW 437
77664: ST_TO_ADDR
// if not task then
77665: LD_VAR 0 4
77669: NOT
77670: IFFALSE 77674
// exit ;
77672: GO 77718
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
77674: LD_ADDR_VAR 0 3
77678: PUSH
77679: LD_VAR 0 4
77683: PUSH
77684: LD_INT 1
77686: ARRAY
77687: PUSH
77688: LD_INT 1
77690: ARRAY
77691: PUSH
77692: LD_STRING r
77694: EQUAL
77695: IFFALSE 77717
77697: PUSH
77698: LD_VAR 0 4
77702: PUSH
77703: LD_INT 1
77705: ARRAY
77706: PUSH
77707: LD_INT 4
77709: ARRAY
77710: PUSH
77711: LD_VAR 0 2
77715: EQUAL
77716: AND
77717: ST_TO_ADDR
// end ;
77718: LD_VAR 0 3
77722: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77723: LD_INT 0
77725: PPUSH
// SetDir ( unit , d ) ;
77726: LD_VAR 0 1
77730: PPUSH
77731: LD_VAR 0 4
77735: PPUSH
77736: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
77740: LD_ADDR_VAR 0 6
77744: PUSH
77745: LD_VAR 0 1
77749: PPUSH
77750: LD_VAR 0 2
77754: PPUSH
77755: LD_VAR 0 3
77759: PPUSH
77760: LD_VAR 0 5
77764: PPUSH
77765: CALL_OW 48
77769: ST_TO_ADDR
// end ;
77770: LD_VAR 0 6
77774: RET
// export function ToNaturalNumber ( number ) ; begin
77775: LD_INT 0
77777: PPUSH
// result := number div 1 ;
77778: LD_ADDR_VAR 0 2
77782: PUSH
77783: LD_VAR 0 1
77787: PUSH
77788: LD_INT 1
77790: DIV
77791: ST_TO_ADDR
// if number < 0 then
77792: LD_VAR 0 1
77796: PUSH
77797: LD_INT 0
77799: LESS
77800: IFFALSE 77810
// result := 0 ;
77802: LD_ADDR_VAR 0 2
77806: PUSH
77807: LD_INT 0
77809: ST_TO_ADDR
// end ;
77810: LD_VAR 0 2
77814: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
77815: LD_INT 0
77817: PPUSH
77818: PPUSH
77819: PPUSH
// if not buildings then
77820: LD_VAR 0 1
77824: NOT
77825: IFFALSE 77829
// exit ;
77827: GO 77944
// tmp := [ ] ;
77829: LD_ADDR_VAR 0 5
77833: PUSH
77834: EMPTY
77835: ST_TO_ADDR
// for b in buildings do
77836: LD_ADDR_VAR 0 4
77840: PUSH
77841: LD_VAR 0 1
77845: PUSH
77846: FOR_IN
77847: IFFALSE 77885
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
77849: LD_ADDR_VAR 0 5
77853: PUSH
77854: LD_VAR 0 5
77858: PPUSH
77859: LD_VAR 0 5
77863: PUSH
77864: LD_INT 1
77866: PLUS
77867: PPUSH
77868: LD_VAR 0 4
77872: PPUSH
77873: CALL_OW 266
77877: PPUSH
77878: CALL_OW 1
77882: ST_TO_ADDR
77883: GO 77846
77885: POP
77886: POP
// if not tmp then
77887: LD_VAR 0 5
77891: NOT
77892: IFFALSE 77896
// exit ;
77894: GO 77944
// if asc then
77896: LD_VAR 0 2
77900: IFFALSE 77924
// result := SortListByListAsc ( buildings , tmp ) else
77902: LD_ADDR_VAR 0 3
77906: PUSH
77907: LD_VAR 0 1
77911: PPUSH
77912: LD_VAR 0 5
77916: PPUSH
77917: CALL_OW 76
77921: ST_TO_ADDR
77922: GO 77944
// result := SortListByListDesc ( buildings , tmp ) ;
77924: LD_ADDR_VAR 0 3
77928: PUSH
77929: LD_VAR 0 1
77933: PPUSH
77934: LD_VAR 0 5
77938: PPUSH
77939: CALL_OW 77
77943: ST_TO_ADDR
// end ;
77944: LD_VAR 0 3
77948: RET
// export function SortByClass ( units , class ) ; var un ; begin
77949: LD_INT 0
77951: PPUSH
77952: PPUSH
// if not units or not class then
77953: LD_VAR 0 1
77957: NOT
77958: IFTRUE 77967
77960: PUSH
77961: LD_VAR 0 2
77965: NOT
77966: OR
77967: IFFALSE 77971
// exit ;
77969: GO 78066
// result := [ ] ;
77971: LD_ADDR_VAR 0 3
77975: PUSH
77976: EMPTY
77977: ST_TO_ADDR
// for un in units do
77978: LD_ADDR_VAR 0 4
77982: PUSH
77983: LD_VAR 0 1
77987: PUSH
77988: FOR_IN
77989: IFFALSE 78064
// if GetClass ( un ) = class then
77991: LD_VAR 0 4
77995: PPUSH
77996: CALL_OW 257
78000: PUSH
78001: LD_VAR 0 2
78005: EQUAL
78006: IFFALSE 78033
// result := Insert ( result , 1 , un ) else
78008: LD_ADDR_VAR 0 3
78012: PUSH
78013: LD_VAR 0 3
78017: PPUSH
78018: LD_INT 1
78020: PPUSH
78021: LD_VAR 0 4
78025: PPUSH
78026: CALL_OW 2
78030: ST_TO_ADDR
78031: GO 78062
// result := Replace ( result , result + 1 , un ) ;
78033: LD_ADDR_VAR 0 3
78037: PUSH
78038: LD_VAR 0 3
78042: PPUSH
78043: LD_VAR 0 3
78047: PUSH
78048: LD_INT 1
78050: PLUS
78051: PPUSH
78052: LD_VAR 0 4
78056: PPUSH
78057: CALL_OW 1
78061: ST_TO_ADDR
78062: GO 77988
78064: POP
78065: POP
// end ;
78066: LD_VAR 0 3
78070: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78071: LD_INT 0
78073: PPUSH
78074: PPUSH
78075: PPUSH
78076: PPUSH
78077: PPUSH
78078: PPUSH
78079: PPUSH
// result := [ ] ;
78080: LD_ADDR_VAR 0 4
78084: PUSH
78085: EMPTY
78086: ST_TO_ADDR
// if x - r < 0 then
78087: LD_VAR 0 1
78091: PUSH
78092: LD_VAR 0 3
78096: MINUS
78097: PUSH
78098: LD_INT 0
78100: LESS
78101: IFFALSE 78113
// min_x := 0 else
78103: LD_ADDR_VAR 0 8
78107: PUSH
78108: LD_INT 0
78110: ST_TO_ADDR
78111: GO 78129
// min_x := x - r ;
78113: LD_ADDR_VAR 0 8
78117: PUSH
78118: LD_VAR 0 1
78122: PUSH
78123: LD_VAR 0 3
78127: MINUS
78128: ST_TO_ADDR
// if y - r < 0 then
78129: LD_VAR 0 2
78133: PUSH
78134: LD_VAR 0 3
78138: MINUS
78139: PUSH
78140: LD_INT 0
78142: LESS
78143: IFFALSE 78155
// min_y := 0 else
78145: LD_ADDR_VAR 0 7
78149: PUSH
78150: LD_INT 0
78152: ST_TO_ADDR
78153: GO 78171
// min_y := y - r ;
78155: LD_ADDR_VAR 0 7
78159: PUSH
78160: LD_VAR 0 2
78164: PUSH
78165: LD_VAR 0 3
78169: MINUS
78170: ST_TO_ADDR
// max_x := x + r ;
78171: LD_ADDR_VAR 0 9
78175: PUSH
78176: LD_VAR 0 1
78180: PUSH
78181: LD_VAR 0 3
78185: PLUS
78186: ST_TO_ADDR
// max_y := y + r ;
78187: LD_ADDR_VAR 0 10
78191: PUSH
78192: LD_VAR 0 2
78196: PUSH
78197: LD_VAR 0 3
78201: PLUS
78202: ST_TO_ADDR
// for _x = min_x to max_x do
78203: LD_ADDR_VAR 0 5
78207: PUSH
78208: DOUBLE
78209: LD_VAR 0 8
78213: DEC
78214: ST_TO_ADDR
78215: LD_VAR 0 9
78219: PUSH
78220: FOR_TO
78221: IFFALSE 78322
// for _y = min_y to max_y do
78223: LD_ADDR_VAR 0 6
78227: PUSH
78228: DOUBLE
78229: LD_VAR 0 7
78233: DEC
78234: ST_TO_ADDR
78235: LD_VAR 0 10
78239: PUSH
78240: FOR_TO
78241: IFFALSE 78318
// begin if not ValidHex ( _x , _y ) then
78243: LD_VAR 0 5
78247: PPUSH
78248: LD_VAR 0 6
78252: PPUSH
78253: CALL_OW 488
78257: NOT
78258: IFFALSE 78262
// continue ;
78260: GO 78240
// if GetResourceTypeXY ( _x , _y ) then
78262: LD_VAR 0 5
78266: PPUSH
78267: LD_VAR 0 6
78271: PPUSH
78272: CALL_OW 283
78276: IFFALSE 78316
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78278: LD_ADDR_VAR 0 4
78282: PUSH
78283: LD_VAR 0 4
78287: PPUSH
78288: LD_VAR 0 4
78292: PUSH
78293: LD_INT 1
78295: PLUS
78296: PPUSH
78297: LD_VAR 0 5
78301: PUSH
78302: LD_VAR 0 6
78306: PUSH
78307: EMPTY
78308: LIST
78309: LIST
78310: PPUSH
78311: CALL_OW 1
78315: ST_TO_ADDR
// end ;
78316: GO 78240
78318: POP
78319: POP
78320: GO 78220
78322: POP
78323: POP
// end ;
78324: LD_VAR 0 4
78328: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78329: LD_INT 0
78331: PPUSH
78332: PPUSH
78333: PPUSH
78334: PPUSH
78335: PPUSH
78336: PPUSH
78337: PPUSH
78338: PPUSH
// if not units then
78339: LD_VAR 0 1
78343: NOT
78344: IFFALSE 78348
// exit ;
78346: GO 78880
// result := UnitFilter ( units , [ f_ok ] ) ;
78348: LD_ADDR_VAR 0 3
78352: PUSH
78353: LD_VAR 0 1
78357: PPUSH
78358: LD_INT 50
78360: PUSH
78361: EMPTY
78362: LIST
78363: PPUSH
78364: CALL_OW 72
78368: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78369: LD_ADDR_VAR 0 8
78373: PUSH
78374: LD_VAR 0 1
78378: PUSH
78379: LD_INT 1
78381: ARRAY
78382: PPUSH
78383: CALL_OW 255
78387: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78388: LD_ADDR_VAR 0 10
78392: PUSH
78393: LD_INT 29
78395: PUSH
78396: LD_INT 91
78398: PUSH
78399: LD_INT 49
78401: PUSH
78402: EMPTY
78403: LIST
78404: LIST
78405: LIST
78406: ST_TO_ADDR
// if not result then
78407: LD_VAR 0 3
78411: NOT
78412: IFFALSE 78416
// exit ;
78414: GO 78880
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78416: LD_ADDR_VAR 0 5
78420: PUSH
78421: LD_INT 81
78423: PUSH
78424: LD_VAR 0 8
78428: PUSH
78429: EMPTY
78430: LIST
78431: LIST
78432: PPUSH
78433: CALL_OW 69
78437: ST_TO_ADDR
// for i in result do
78438: LD_ADDR_VAR 0 4
78442: PUSH
78443: LD_VAR 0 3
78447: PUSH
78448: FOR_IN
78449: IFFALSE 78878
// begin tag := GetTag ( i ) + 1 ;
78451: LD_ADDR_VAR 0 9
78455: PUSH
78456: LD_VAR 0 4
78460: PPUSH
78461: CALL_OW 110
78465: PUSH
78466: LD_INT 1
78468: PLUS
78469: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
78470: LD_ADDR_VAR 0 7
78474: PUSH
78475: LD_VAR 0 4
78479: PPUSH
78480: CALL_OW 250
78484: PPUSH
78485: LD_VAR 0 4
78489: PPUSH
78490: CALL_OW 251
78494: PPUSH
78495: LD_INT 4
78497: PPUSH
78498: CALL 78071 0 3
78502: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
78503: LD_VAR 0 4
78507: PPUSH
78508: CALL_OW 247
78512: PUSH
78513: LD_INT 2
78515: EQUAL
78516: IFFALSE 78528
78518: PUSH
78519: LD_VAR 0 7
78523: PUSH
78524: LD_INT 2
78526: GREATER
78527: AND
78528: IFFALSE 78548
78530: PUSH
78531: LD_VAR 0 4
78535: PPUSH
78536: CALL_OW 264
78540: PUSH
78541: LD_VAR 0 10
78545: IN
78546: NOT
78547: AND
78548: IFFALSE 78587
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78550: LD_VAR 0 4
78554: PPUSH
78555: LD_VAR 0 7
78559: PUSH
78560: LD_INT 1
78562: ARRAY
78563: PUSH
78564: LD_INT 1
78566: ARRAY
78567: PPUSH
78568: LD_VAR 0 7
78572: PUSH
78573: LD_INT 1
78575: ARRAY
78576: PUSH
78577: LD_INT 2
78579: ARRAY
78580: PPUSH
78581: CALL_OW 116
78585: GO 78876
// if path > tag then
78587: LD_VAR 0 2
78591: PUSH
78592: LD_VAR 0 9
78596: GREATER
78597: IFFALSE 78805
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
78599: LD_ADDR_VAR 0 6
78603: PUSH
78604: LD_VAR 0 5
78608: PPUSH
78609: LD_INT 91
78611: PUSH
78612: LD_VAR 0 4
78616: PUSH
78617: LD_INT 8
78619: PUSH
78620: EMPTY
78621: LIST
78622: LIST
78623: LIST
78624: PPUSH
78625: CALL_OW 72
78629: ST_TO_ADDR
// if nearEnemy then
78630: LD_VAR 0 6
78634: IFFALSE 78703
// begin if GetWeapon ( i ) = ru_time_lapser then
78636: LD_VAR 0 4
78640: PPUSH
78641: CALL_OW 264
78645: PUSH
78646: LD_INT 49
78648: EQUAL
78649: IFFALSE 78677
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78651: LD_VAR 0 4
78655: PPUSH
78656: LD_VAR 0 6
78660: PPUSH
78661: LD_VAR 0 4
78665: PPUSH
78666: CALL_OW 74
78670: PPUSH
78671: CALL_OW 112
78675: GO 78701
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
78677: LD_VAR 0 4
78681: PPUSH
78682: LD_VAR 0 6
78686: PPUSH
78687: LD_VAR 0 4
78691: PPUSH
78692: CALL_OW 74
78696: PPUSH
78697: CALL 79961 0 2
// end else
78701: GO 78803
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78703: LD_VAR 0 4
78707: PPUSH
78708: LD_VAR 0 2
78712: PUSH
78713: LD_VAR 0 9
78717: ARRAY
78718: PUSH
78719: LD_INT 1
78721: ARRAY
78722: PPUSH
78723: LD_VAR 0 2
78727: PUSH
78728: LD_VAR 0 9
78732: ARRAY
78733: PUSH
78734: LD_INT 2
78736: ARRAY
78737: PPUSH
78738: CALL_OW 297
78742: PUSH
78743: LD_INT 6
78745: GREATER
78746: IFFALSE 78789
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78748: LD_VAR 0 4
78752: PPUSH
78753: LD_VAR 0 2
78757: PUSH
78758: LD_VAR 0 9
78762: ARRAY
78763: PUSH
78764: LD_INT 1
78766: ARRAY
78767: PPUSH
78768: LD_VAR 0 2
78772: PUSH
78773: LD_VAR 0 9
78777: ARRAY
78778: PUSH
78779: LD_INT 2
78781: ARRAY
78782: PPUSH
78783: CALL_OW 114
78787: GO 78803
// SetTag ( i , tag ) ;
78789: LD_VAR 0 4
78793: PPUSH
78794: LD_VAR 0 9
78798: PPUSH
78799: CALL_OW 109
// end else
78803: GO 78876
// if enemy then
78805: LD_VAR 0 5
78809: IFFALSE 78876
// begin if GetWeapon ( i ) = ru_time_lapser then
78811: LD_VAR 0 4
78815: PPUSH
78816: CALL_OW 264
78820: PUSH
78821: LD_INT 49
78823: EQUAL
78824: IFFALSE 78852
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
78826: LD_VAR 0 4
78830: PPUSH
78831: LD_VAR 0 5
78835: PPUSH
78836: LD_VAR 0 4
78840: PPUSH
78841: CALL_OW 74
78845: PPUSH
78846: CALL_OW 112
78850: GO 78876
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
78852: LD_VAR 0 4
78856: PPUSH
78857: LD_VAR 0 5
78861: PPUSH
78862: LD_VAR 0 4
78866: PPUSH
78867: CALL_OW 74
78871: PPUSH
78872: CALL 79961 0 2
// end ; end ;
78876: GO 78448
78878: POP
78879: POP
// end ;
78880: LD_VAR 0 3
78884: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
78885: LD_INT 0
78887: PPUSH
78888: PPUSH
78889: PPUSH
// if not unit or IsInUnit ( unit ) then
78890: LD_VAR 0 1
78894: NOT
78895: IFTRUE 78908
78897: PUSH
78898: LD_VAR 0 1
78902: PPUSH
78903: CALL_OW 310
78907: OR
78908: IFFALSE 78912
// exit ;
78910: GO 79003
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
78912: LD_ADDR_VAR 0 4
78916: PUSH
78917: LD_VAR 0 1
78921: PPUSH
78922: CALL_OW 250
78926: PPUSH
78927: LD_VAR 0 2
78931: PPUSH
78932: LD_INT 1
78934: PPUSH
78935: CALL_OW 272
78939: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
78940: LD_ADDR_VAR 0 5
78944: PUSH
78945: LD_VAR 0 1
78949: PPUSH
78950: CALL_OW 251
78954: PPUSH
78955: LD_VAR 0 2
78959: PPUSH
78960: LD_INT 1
78962: PPUSH
78963: CALL_OW 273
78967: ST_TO_ADDR
// if ValidHex ( x , y ) then
78968: LD_VAR 0 4
78972: PPUSH
78973: LD_VAR 0 5
78977: PPUSH
78978: CALL_OW 488
78982: IFFALSE 79003
// ComTurnXY ( unit , x , y ) ;
78984: LD_VAR 0 1
78988: PPUSH
78989: LD_VAR 0 4
78993: PPUSH
78994: LD_VAR 0 5
78998: PPUSH
78999: CALL_OW 118
// end ;
79003: LD_VAR 0 3
79007: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79008: LD_INT 0
79010: PPUSH
79011: PPUSH
// result := false ;
79012: LD_ADDR_VAR 0 3
79016: PUSH
79017: LD_INT 0
79019: ST_TO_ADDR
// if not units then
79020: LD_VAR 0 2
79024: NOT
79025: IFFALSE 79029
// exit ;
79027: GO 79074
// for i in units do
79029: LD_ADDR_VAR 0 4
79033: PUSH
79034: LD_VAR 0 2
79038: PUSH
79039: FOR_IN
79040: IFFALSE 79072
// if See ( side , i ) then
79042: LD_VAR 0 1
79046: PPUSH
79047: LD_VAR 0 4
79051: PPUSH
79052: CALL_OW 292
79056: IFFALSE 79070
// begin result := true ;
79058: LD_ADDR_VAR 0 3
79062: PUSH
79063: LD_INT 1
79065: ST_TO_ADDR
// exit ;
79066: POP
79067: POP
79068: GO 79074
// end ;
79070: GO 79039
79072: POP
79073: POP
// end ;
79074: LD_VAR 0 3
79078: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79079: LD_INT 0
79081: PPUSH
79082: PPUSH
79083: PPUSH
79084: PPUSH
// if not unit or not points then
79085: LD_VAR 0 1
79089: NOT
79090: IFTRUE 79099
79092: PUSH
79093: LD_VAR 0 2
79097: NOT
79098: OR
79099: IFFALSE 79103
// exit ;
79101: GO 79193
// dist := 99999 ;
79103: LD_ADDR_VAR 0 5
79107: PUSH
79108: LD_INT 99999
79110: ST_TO_ADDR
// for i in points do
79111: LD_ADDR_VAR 0 4
79115: PUSH
79116: LD_VAR 0 2
79120: PUSH
79121: FOR_IN
79122: IFFALSE 79191
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79124: LD_ADDR_VAR 0 6
79128: PUSH
79129: LD_VAR 0 1
79133: PPUSH
79134: LD_VAR 0 4
79138: PUSH
79139: LD_INT 1
79141: ARRAY
79142: PPUSH
79143: LD_VAR 0 4
79147: PUSH
79148: LD_INT 2
79150: ARRAY
79151: PPUSH
79152: CALL_OW 297
79156: ST_TO_ADDR
// if tmpDist < dist then
79157: LD_VAR 0 6
79161: PUSH
79162: LD_VAR 0 5
79166: LESS
79167: IFFALSE 79189
// begin result := i ;
79169: LD_ADDR_VAR 0 3
79173: PUSH
79174: LD_VAR 0 4
79178: ST_TO_ADDR
// dist := tmpDist ;
79179: LD_ADDR_VAR 0 5
79183: PUSH
79184: LD_VAR 0 6
79188: ST_TO_ADDR
// end ; end ;
79189: GO 79121
79191: POP
79192: POP
// end ;
79193: LD_VAR 0 3
79197: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79198: LD_INT 0
79200: PPUSH
// uc_side := side ;
79201: LD_ADDR_OWVAR 20
79205: PUSH
79206: LD_VAR 0 1
79210: ST_TO_ADDR
// uc_nation := 3 ;
79211: LD_ADDR_OWVAR 21
79215: PUSH
79216: LD_INT 3
79218: ST_TO_ADDR
// vc_chassis := 25 ;
79219: LD_ADDR_OWVAR 37
79223: PUSH
79224: LD_INT 25
79226: ST_TO_ADDR
// vc_engine := engine_siberite ;
79227: LD_ADDR_OWVAR 39
79231: PUSH
79232: LD_INT 3
79234: ST_TO_ADDR
// vc_control := control_computer ;
79235: LD_ADDR_OWVAR 38
79239: PUSH
79240: LD_INT 3
79242: ST_TO_ADDR
// vc_weapon := 59 ;
79243: LD_ADDR_OWVAR 40
79247: PUSH
79248: LD_INT 59
79250: ST_TO_ADDR
// result := CreateVehicle ;
79251: LD_ADDR_VAR 0 5
79255: PUSH
79256: CALL_OW 45
79260: ST_TO_ADDR
// SetDir ( result , d ) ;
79261: LD_VAR 0 5
79265: PPUSH
79266: LD_VAR 0 4
79270: PPUSH
79271: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79275: LD_VAR 0 5
79279: PPUSH
79280: LD_VAR 0 2
79284: PPUSH
79285: LD_VAR 0 3
79289: PPUSH
79290: LD_INT 0
79292: PPUSH
79293: CALL_OW 48
// end ;
79297: LD_VAR 0 5
79301: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79302: LD_INT 0
79304: PPUSH
79305: PPUSH
79306: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79307: LD_ADDR_VAR 0 2
79311: PUSH
79312: LD_INT 0
79314: PUSH
79315: LD_INT 0
79317: PUSH
79318: LD_INT 0
79320: PUSH
79321: LD_INT 0
79323: PUSH
79324: EMPTY
79325: LIST
79326: LIST
79327: LIST
79328: LIST
79329: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79330: LD_VAR 0 1
79334: NOT
79335: IFTRUE 79368
79337: PUSH
79338: LD_VAR 0 1
79342: PPUSH
79343: CALL_OW 264
79347: PUSH
79348: LD_INT 12
79350: PUSH
79351: LD_INT 51
79353: PUSH
79354: LD_INT 32
79356: PUSH
79357: LD_INT 89
79359: PUSH
79360: EMPTY
79361: LIST
79362: LIST
79363: LIST
79364: LIST
79365: IN
79366: NOT
79367: OR
79368: IFFALSE 79372
// exit ;
79370: GO 79470
// for i := 1 to 3 do
79372: LD_ADDR_VAR 0 3
79376: PUSH
79377: DOUBLE
79378: LD_INT 1
79380: DEC
79381: ST_TO_ADDR
79382: LD_INT 3
79384: PUSH
79385: FOR_TO
79386: IFFALSE 79468
// begin tmp := GetCargo ( cargo , i ) ;
79388: LD_ADDR_VAR 0 4
79392: PUSH
79393: LD_VAR 0 1
79397: PPUSH
79398: LD_VAR 0 3
79402: PPUSH
79403: CALL_OW 289
79407: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79408: LD_ADDR_VAR 0 2
79412: PUSH
79413: LD_VAR 0 2
79417: PPUSH
79418: LD_VAR 0 3
79422: PPUSH
79423: LD_VAR 0 4
79427: PPUSH
79428: CALL_OW 1
79432: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79433: LD_ADDR_VAR 0 2
79437: PUSH
79438: LD_VAR 0 2
79442: PPUSH
79443: LD_INT 4
79445: PPUSH
79446: LD_VAR 0 2
79450: PUSH
79451: LD_INT 4
79453: ARRAY
79454: PUSH
79455: LD_VAR 0 4
79459: PLUS
79460: PPUSH
79461: CALL_OW 1
79465: ST_TO_ADDR
// end ;
79466: GO 79385
79468: POP
79469: POP
// end ;
79470: LD_VAR 0 2
79474: RET
// export function Length ( array ) ; begin
79475: LD_INT 0
79477: PPUSH
// result := array + 0 ;
79478: LD_ADDR_VAR 0 2
79482: PUSH
79483: LD_VAR 0 1
79487: PUSH
79488: LD_INT 0
79490: PLUS
79491: ST_TO_ADDR
// end ;
79492: LD_VAR 0 2
79496: RET
// export function PrepareArray ( array ) ; begin
79497: LD_INT 0
79499: PPUSH
// result := array diff 0 ;
79500: LD_ADDR_VAR 0 2
79504: PUSH
79505: LD_VAR 0 1
79509: PUSH
79510: LD_INT 0
79512: DIFF
79513: ST_TO_ADDR
// if not result [ 1 ] then
79514: LD_VAR 0 2
79518: PUSH
79519: LD_INT 1
79521: ARRAY
79522: NOT
79523: IFFALSE 79543
// result := Delete ( result , 1 ) ;
79525: LD_ADDR_VAR 0 2
79529: PUSH
79530: LD_VAR 0 2
79534: PPUSH
79535: LD_INT 1
79537: PPUSH
79538: CALL_OW 3
79542: ST_TO_ADDR
// end ;
79543: LD_VAR 0 2
79547: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
79548: LD_INT 0
79550: PPUSH
79551: PPUSH
79552: PPUSH
79553: PPUSH
// sibRocketRange := 25 ;
79554: LD_ADDR_VAR 0 6
79558: PUSH
79559: LD_INT 25
79561: ST_TO_ADDR
// result := false ;
79562: LD_ADDR_VAR 0 4
79566: PUSH
79567: LD_INT 0
79569: ST_TO_ADDR
// for i := 0 to 5 do
79570: LD_ADDR_VAR 0 5
79574: PUSH
79575: DOUBLE
79576: LD_INT 0
79578: DEC
79579: ST_TO_ADDR
79580: LD_INT 5
79582: PUSH
79583: FOR_TO
79584: IFFALSE 79651
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
79586: LD_VAR 0 1
79590: PPUSH
79591: LD_VAR 0 5
79595: PPUSH
79596: LD_VAR 0 6
79600: PPUSH
79601: CALL_OW 272
79605: PPUSH
79606: LD_VAR 0 2
79610: PPUSH
79611: LD_VAR 0 5
79615: PPUSH
79616: LD_VAR 0 6
79620: PPUSH
79621: CALL_OW 273
79625: PPUSH
79626: LD_VAR 0 3
79630: PPUSH
79631: CALL_OW 309
79635: IFFALSE 79649
// begin result := true ;
79637: LD_ADDR_VAR 0 4
79641: PUSH
79642: LD_INT 1
79644: ST_TO_ADDR
// exit ;
79645: POP
79646: POP
79647: GO 79653
// end ;
79649: GO 79583
79651: POP
79652: POP
// end ;
79653: LD_VAR 0 4
79657: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
79658: LD_INT 0
79660: PPUSH
79661: PPUSH
79662: PPUSH
// if btype = b_depot then
79663: LD_VAR 0 2
79667: PUSH
79668: LD_INT 0
79670: EQUAL
79671: IFFALSE 79683
// begin result := true ;
79673: LD_ADDR_VAR 0 3
79677: PUSH
79678: LD_INT 1
79680: ST_TO_ADDR
// exit ;
79681: GO 79803
// end ; pom := GetBase ( depot ) ;
79683: LD_ADDR_VAR 0 4
79687: PUSH
79688: LD_VAR 0 1
79692: PPUSH
79693: CALL_OW 274
79697: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
79698: LD_ADDR_VAR 0 5
79702: PUSH
79703: LD_VAR 0 2
79707: PPUSH
79708: LD_VAR 0 1
79712: PPUSH
79713: CALL_OW 248
79717: PPUSH
79718: CALL_OW 450
79722: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
79723: LD_ADDR_VAR 0 3
79727: PUSH
79728: LD_VAR 0 4
79732: PPUSH
79733: LD_INT 1
79735: PPUSH
79736: CALL_OW 275
79740: PUSH
79741: LD_VAR 0 5
79745: PUSH
79746: LD_INT 1
79748: ARRAY
79749: GREATEREQUAL
79750: IFFALSE 79776
79752: PUSH
79753: LD_VAR 0 4
79757: PPUSH
79758: LD_INT 2
79760: PPUSH
79761: CALL_OW 275
79765: PUSH
79766: LD_VAR 0 5
79770: PUSH
79771: LD_INT 2
79773: ARRAY
79774: GREATEREQUAL
79775: AND
79776: IFFALSE 79802
79778: PUSH
79779: LD_VAR 0 4
79783: PPUSH
79784: LD_INT 3
79786: PPUSH
79787: CALL_OW 275
79791: PUSH
79792: LD_VAR 0 5
79796: PUSH
79797: LD_INT 3
79799: ARRAY
79800: GREATEREQUAL
79801: AND
79802: ST_TO_ADDR
// end ;
79803: LD_VAR 0 3
79807: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
79808: LD_INT 0
79810: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
79811: LD_VAR 0 1
79815: PPUSH
79816: LD_VAR 0 2
79820: PPUSH
79821: LD_INT 0
79823: PPUSH
79824: LD_INT 0
79826: PPUSH
79827: LD_INT 1
79829: PPUSH
79830: LD_INT 0
79832: PPUSH
79833: CALL_OW 587
// end ;
79837: LD_VAR 0 3
79841: RET
// export function CenterOnNow ( unit ) ; begin
79842: LD_INT 0
79844: PPUSH
// result := IsInUnit ( unit ) ;
79845: LD_ADDR_VAR 0 2
79849: PUSH
79850: LD_VAR 0 1
79854: PPUSH
79855: CALL_OW 310
79859: ST_TO_ADDR
// if not result then
79860: LD_VAR 0 2
79864: NOT
79865: IFFALSE 79877
// result := unit ;
79867: LD_ADDR_VAR 0 2
79871: PUSH
79872: LD_VAR 0 1
79876: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
79877: LD_VAR 0 1
79881: PPUSH
79882: CALL_OW 87
// end ;
79886: LD_VAR 0 2
79890: RET
// export function ComMoveHex ( unit , hex ) ; begin
79891: LD_INT 0
79893: PPUSH
// if not hex then
79894: LD_VAR 0 2
79898: NOT
79899: IFFALSE 79903
// exit ;
79901: GO 79956
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
79903: LD_VAR 0 2
79907: PUSH
79908: LD_INT 1
79910: ARRAY
79911: PPUSH
79912: LD_VAR 0 2
79916: PUSH
79917: LD_INT 2
79919: ARRAY
79920: PPUSH
79921: CALL_OW 428
79925: IFFALSE 79929
// exit ;
79927: GO 79956
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
79929: LD_VAR 0 1
79933: PPUSH
79934: LD_VAR 0 2
79938: PUSH
79939: LD_INT 1
79941: ARRAY
79942: PPUSH
79943: LD_VAR 0 2
79947: PUSH
79948: LD_INT 2
79950: ARRAY
79951: PPUSH
79952: CALL_OW 111
// end ;
79956: LD_VAR 0 3
79960: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
79961: LD_INT 0
79963: PPUSH
79964: PPUSH
79965: PPUSH
// if not unit or not enemy then
79966: LD_VAR 0 1
79970: NOT
79971: IFTRUE 79980
79973: PUSH
79974: LD_VAR 0 2
79978: NOT
79979: OR
79980: IFFALSE 79984
// exit ;
79982: GO 80110
// x := GetX ( enemy ) ;
79984: LD_ADDR_VAR 0 4
79988: PUSH
79989: LD_VAR 0 2
79993: PPUSH
79994: CALL_OW 250
79998: ST_TO_ADDR
// y := GetY ( enemy ) ;
79999: LD_ADDR_VAR 0 5
80003: PUSH
80004: LD_VAR 0 2
80008: PPUSH
80009: CALL_OW 251
80013: ST_TO_ADDR
// if ValidHex ( x , y ) then
80014: LD_VAR 0 4
80018: PPUSH
80019: LD_VAR 0 5
80023: PPUSH
80024: CALL_OW 488
80028: IFFALSE 80110
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
80030: LD_VAR 0 2
80034: PPUSH
80035: CALL_OW 247
80039: PUSH
80040: LD_INT 3
80042: PUSH
80043: LD_INT 2
80045: PUSH
80046: EMPTY
80047: LIST
80048: LIST
80049: IN
80050: IFTRUE 80073
80052: PUSH
80053: LD_VAR 0 1
80057: PPUSH
80058: CALL_OW 255
80062: PPUSH
80063: LD_VAR 0 2
80067: PPUSH
80068: CALL_OW 292
80072: OR
80073: IFFALSE 80091
// ComAttackUnit ( unit , enemy ) else
80075: LD_VAR 0 1
80079: PPUSH
80080: LD_VAR 0 2
80084: PPUSH
80085: CALL_OW 115
80089: GO 80110
// ComAgressiveMove ( unit , x , y ) ;
80091: LD_VAR 0 1
80095: PPUSH
80096: LD_VAR 0 4
80100: PPUSH
80101: LD_VAR 0 5
80105: PPUSH
80106: CALL_OW 114
// end ;
80110: LD_VAR 0 3
80114: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
80115: LD_INT 0
80117: PPUSH
80118: PPUSH
80119: PPUSH
// list := AreaToList ( area , 0 ) ;
80120: LD_ADDR_VAR 0 5
80124: PUSH
80125: LD_VAR 0 1
80129: PPUSH
80130: LD_INT 0
80132: PPUSH
80133: CALL_OW 517
80137: ST_TO_ADDR
// if not list then
80138: LD_VAR 0 5
80142: NOT
80143: IFFALSE 80147
// exit ;
80145: GO 80277
// if all then
80147: LD_VAR 0 2
80151: IFFALSE 80239
// begin for i := 1 to list [ 1 ] do
80153: LD_ADDR_VAR 0 4
80157: PUSH
80158: DOUBLE
80159: LD_INT 1
80161: DEC
80162: ST_TO_ADDR
80163: LD_VAR 0 5
80167: PUSH
80168: LD_INT 1
80170: ARRAY
80171: PUSH
80172: FOR_TO
80173: IFFALSE 80235
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
80175: LD_ADDR_VAR 0 3
80179: PUSH
80180: LD_VAR 0 3
80184: PPUSH
80185: LD_VAR 0 3
80189: PUSH
80190: LD_INT 1
80192: PLUS
80193: PPUSH
80194: LD_VAR 0 5
80198: PUSH
80199: LD_INT 1
80201: ARRAY
80202: PUSH
80203: LD_VAR 0 4
80207: ARRAY
80208: PUSH
80209: LD_VAR 0 5
80213: PUSH
80214: LD_INT 2
80216: ARRAY
80217: PUSH
80218: LD_VAR 0 4
80222: ARRAY
80223: PUSH
80224: EMPTY
80225: LIST
80226: LIST
80227: PPUSH
80228: CALL_OW 1
80232: ST_TO_ADDR
80233: GO 80172
80235: POP
80236: POP
// exit ;
80237: GO 80277
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
80239: LD_ADDR_VAR 0 3
80243: PUSH
80244: LD_VAR 0 5
80248: PUSH
80249: LD_INT 1
80251: ARRAY
80252: PUSH
80253: LD_INT 1
80255: ARRAY
80256: PUSH
80257: LD_VAR 0 5
80261: PUSH
80262: LD_INT 2
80264: ARRAY
80265: PUSH
80266: LD_INT 1
80268: ARRAY
80269: PUSH
80270: EMPTY
80271: LIST
80272: LIST
80273: PUSH
80274: EMPTY
80275: LIST
80276: ST_TO_ADDR
// end ;
80277: LD_VAR 0 3
80281: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
80282: LD_INT 0
80284: PPUSH
80285: PPUSH
// list := AreaToList ( area , 0 ) ;
80286: LD_ADDR_VAR 0 4
80290: PUSH
80291: LD_VAR 0 1
80295: PPUSH
80296: LD_INT 0
80298: PPUSH
80299: CALL_OW 517
80303: ST_TO_ADDR
// if not list then
80304: LD_VAR 0 4
80308: NOT
80309: IFFALSE 80313
// exit ;
80311: GO 80354
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
80313: LD_ADDR_VAR 0 3
80317: PUSH
80318: LD_VAR 0 4
80322: PUSH
80323: LD_INT 1
80325: ARRAY
80326: PUSH
80327: LD_INT 1
80329: ARRAY
80330: PUSH
80331: LD_VAR 0 4
80335: PUSH
80336: LD_INT 2
80338: ARRAY
80339: PUSH
80340: LD_INT 1
80342: ARRAY
80343: PUSH
80344: LD_VAR 0 2
80348: PUSH
80349: EMPTY
80350: LIST
80351: LIST
80352: LIST
80353: ST_TO_ADDR
// end ;
80354: LD_VAR 0 3
80358: RET
// export function First ( array ) ; begin
80359: LD_INT 0
80361: PPUSH
// if not array then
80362: LD_VAR 0 1
80366: NOT
80367: IFFALSE 80371
// exit ;
80369: GO 80385
// result := array [ 1 ] ;
80371: LD_ADDR_VAR 0 2
80375: PUSH
80376: LD_VAR 0 1
80380: PUSH
80381: LD_INT 1
80383: ARRAY
80384: ST_TO_ADDR
// end ;
80385: LD_VAR 0 2
80389: RET
// export function Last ( array ) ; begin
80390: LD_INT 0
80392: PPUSH
// if not array then
80393: LD_VAR 0 1
80397: NOT
80398: IFFALSE 80402
// exit ;
80400: GO 80418
// result := array [ array ] ;
80402: LD_ADDR_VAR 0 2
80406: PUSH
80407: LD_VAR 0 1
80411: PUSH
80412: LD_VAR 0 1
80416: ARRAY
80417: ST_TO_ADDR
// end ;
80418: LD_VAR 0 2
80422: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
80423: LD_INT 0
80425: PPUSH
80426: PPUSH
// result := [ ] ;
80427: LD_ADDR_VAR 0 5
80431: PUSH
80432: EMPTY
80433: ST_TO_ADDR
// if not array then
80434: LD_VAR 0 1
80438: NOT
80439: IFFALSE 80443
// exit ;
80441: GO 80555
// for i := 1 to array do
80443: LD_ADDR_VAR 0 6
80447: PUSH
80448: DOUBLE
80449: LD_INT 1
80451: DEC
80452: ST_TO_ADDR
80453: LD_VAR 0 1
80457: PUSH
80458: FOR_TO
80459: IFFALSE 80553
// if array [ i ] [ index ] = value then
80461: LD_VAR 0 1
80465: PUSH
80466: LD_VAR 0 6
80470: ARRAY
80471: PUSH
80472: LD_VAR 0 2
80476: ARRAY
80477: PUSH
80478: LD_VAR 0 3
80482: EQUAL
80483: IFFALSE 80551
// begin if indexColumn then
80485: LD_VAR 0 4
80489: IFFALSE 80525
// result := Join ( result , array [ i ] [ indexColumn ] ) else
80491: LD_ADDR_VAR 0 5
80495: PUSH
80496: LD_VAR 0 5
80500: PPUSH
80501: LD_VAR 0 1
80505: PUSH
80506: LD_VAR 0 6
80510: ARRAY
80511: PUSH
80512: LD_VAR 0 4
80516: ARRAY
80517: PPUSH
80518: CALL 75563 0 2
80522: ST_TO_ADDR
80523: GO 80551
// result := Join ( result , array [ i ] ) ;
80525: LD_ADDR_VAR 0 5
80529: PUSH
80530: LD_VAR 0 5
80534: PPUSH
80535: LD_VAR 0 1
80539: PUSH
80540: LD_VAR 0 6
80544: ARRAY
80545: PPUSH
80546: CALL 75563 0 2
80550: ST_TO_ADDR
// end ;
80551: GO 80458
80553: POP
80554: POP
// end ;
80555: LD_VAR 0 5
80559: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
80560: LD_INT 0
80562: PPUSH
// if not vehicles or not parkingPoint then
80563: LD_VAR 0 1
80567: NOT
80568: IFTRUE 80577
80570: PUSH
80571: LD_VAR 0 2
80575: NOT
80576: OR
80577: IFFALSE 80581
// exit ;
80579: GO 80679
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
80581: LD_ADDR_VAR 0 1
80585: PUSH
80586: LD_VAR 0 1
80590: PPUSH
80591: LD_INT 50
80593: PUSH
80594: EMPTY
80595: LIST
80596: PUSH
80597: LD_INT 3
80599: PUSH
80600: LD_INT 92
80602: PUSH
80603: LD_VAR 0 2
80607: PUSH
80608: LD_INT 1
80610: ARRAY
80611: PUSH
80612: LD_VAR 0 2
80616: PUSH
80617: LD_INT 2
80619: ARRAY
80620: PUSH
80621: LD_INT 8
80623: PUSH
80624: EMPTY
80625: LIST
80626: LIST
80627: LIST
80628: LIST
80629: PUSH
80630: EMPTY
80631: LIST
80632: LIST
80633: PUSH
80634: EMPTY
80635: LIST
80636: LIST
80637: PPUSH
80638: CALL_OW 72
80642: ST_TO_ADDR
// if not vehicles then
80643: LD_VAR 0 1
80647: NOT
80648: IFFALSE 80652
// exit ;
80650: GO 80679
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
80652: LD_VAR 0 1
80656: PPUSH
80657: LD_VAR 0 2
80661: PUSH
80662: LD_INT 1
80664: ARRAY
80665: PPUSH
80666: LD_VAR 0 2
80670: PUSH
80671: LD_INT 2
80673: ARRAY
80674: PPUSH
80675: CALL_OW 111
// end ;
80679: LD_VAR 0 3
80683: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
80684: LD_INT 0
80686: PPUSH
80687: PPUSH
80688: PPUSH
// if not side or not area then
80689: LD_VAR 0 1
80693: NOT
80694: IFTRUE 80703
80696: PUSH
80697: LD_VAR 0 2
80701: NOT
80702: OR
80703: IFFALSE 80707
// exit ;
80705: GO 80826
// tmp := AreaToList ( area , 0 ) ;
80707: LD_ADDR_VAR 0 5
80711: PUSH
80712: LD_VAR 0 2
80716: PPUSH
80717: LD_INT 0
80719: PPUSH
80720: CALL_OW 517
80724: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
80725: LD_ADDR_VAR 0 4
80729: PUSH
80730: DOUBLE
80731: LD_INT 1
80733: DEC
80734: ST_TO_ADDR
80735: LD_VAR 0 5
80739: PUSH
80740: LD_INT 1
80742: ARRAY
80743: PUSH
80744: FOR_TO
80745: IFFALSE 80824
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
80747: LD_VAR 0 5
80751: PUSH
80752: LD_INT 1
80754: ARRAY
80755: PUSH
80756: LD_VAR 0 4
80760: ARRAY
80761: PPUSH
80762: LD_VAR 0 5
80766: PUSH
80767: LD_INT 2
80769: ARRAY
80770: PUSH
80771: LD_VAR 0 4
80775: ARRAY
80776: PPUSH
80777: CALL_OW 351
80781: IFFALSE 80822
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
80783: LD_VAR 0 5
80787: PUSH
80788: LD_INT 1
80790: ARRAY
80791: PUSH
80792: LD_VAR 0 4
80796: ARRAY
80797: PPUSH
80798: LD_VAR 0 5
80802: PUSH
80803: LD_INT 2
80805: ARRAY
80806: PUSH
80807: LD_VAR 0 4
80811: ARRAY
80812: PPUSH
80813: LD_VAR 0 1
80817: PPUSH
80818: CALL_OW 244
// end ;
80822: GO 80744
80824: POP
80825: POP
// end ;
80826: LD_VAR 0 3
80830: RET
// export function UniqueArray ( array ) ; var i ; begin
80831: LD_INT 0
80833: PPUSH
80834: PPUSH
// result := [ ] ;
80835: LD_ADDR_VAR 0 2
80839: PUSH
80840: EMPTY
80841: ST_TO_ADDR
// if not array then
80842: LD_VAR 0 1
80846: NOT
80847: IFFALSE 80851
// exit ;
80849: GO 80912
// for i := 1 to array do
80851: LD_ADDR_VAR 0 3
80855: PUSH
80856: DOUBLE
80857: LD_INT 1
80859: DEC
80860: ST_TO_ADDR
80861: LD_VAR 0 1
80865: PUSH
80866: FOR_TO
80867: IFFALSE 80910
// if not array [ i ] in result then
80869: LD_VAR 0 1
80873: PUSH
80874: LD_VAR 0 3
80878: ARRAY
80879: PUSH
80880: LD_VAR 0 2
80884: IN
80885: NOT
80886: IFFALSE 80908
// result := Join ( result , i ) ;
80888: LD_ADDR_VAR 0 2
80892: PUSH
80893: LD_VAR 0 2
80897: PPUSH
80898: LD_VAR 0 3
80902: PPUSH
80903: CALL 75563 0 2
80907: ST_TO_ADDR
80908: GO 80866
80910: POP
80911: POP
// end ; end_of_file
80912: LD_VAR 0 2
80916: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80917: LD_VAR 0 1
80921: PUSH
80922: LD_INT 200
80924: DOUBLE
80925: GREATEREQUAL
80926: IFFALSE 80934
80928: LD_INT 299
80930: DOUBLE
80931: LESSEQUAL
80932: IFTRUE 80936
80934: GO 80968
80936: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80937: LD_VAR 0 1
80941: PPUSH
80942: LD_VAR 0 2
80946: PPUSH
80947: LD_VAR 0 3
80951: PPUSH
80952: LD_VAR 0 4
80956: PPUSH
80957: LD_VAR 0 5
80961: PPUSH
80962: CALL 15794 0 5
80966: GO 81045
80968: LD_INT 300
80970: DOUBLE
80971: GREATEREQUAL
80972: IFFALSE 80980
80974: LD_INT 399
80976: DOUBLE
80977: LESSEQUAL
80978: IFTRUE 80982
80980: GO 81044
80982: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80983: LD_VAR 0 1
80987: PPUSH
80988: LD_VAR 0 2
80992: PPUSH
80993: LD_VAR 0 3
80997: PPUSH
80998: LD_VAR 0 4
81002: PPUSH
81003: LD_VAR 0 5
81007: PPUSH
81008: LD_VAR 0 6
81012: PPUSH
81013: LD_VAR 0 7
81017: PPUSH
81018: LD_VAR 0 8
81022: PPUSH
81023: LD_VAR 0 9
81027: PPUSH
81028: LD_VAR 0 10
81032: PPUSH
81033: LD_VAR 0 11
81037: PPUSH
81038: CALL 33960 0 11
81042: GO 81045
81044: POP
// end ;
81045: PPOPN 11
81047: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81048: LD_VAR 0 1
81052: PPUSH
81053: LD_VAR 0 2
81057: PPUSH
81058: LD_VAR 0 3
81062: PPUSH
81063: LD_VAR 0 4
81067: PPUSH
81068: LD_VAR 0 5
81072: PPUSH
81073: CALL 15175 0 5
// end ; end_of_file
81077: PPOPN 5
81079: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81080: LD_VAR 0 1
81084: PPUSH
81085: LD_VAR 0 2
81089: PPUSH
81090: LD_VAR 0 3
81094: PPUSH
81095: LD_VAR 0 4
81099: PPUSH
81100: LD_VAR 0 5
81104: PPUSH
81105: LD_VAR 0 6
81109: PPUSH
81110: CALL 21500 0 6
// end ;
81114: PPOPN 6
81116: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81117: LD_INT 0
81119: PPUSH
// begin if not units then
81120: LD_VAR 0 1
81124: NOT
81125: IFFALSE 81129
// exit ;
81127: GO 81163
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
81129: LD_VAR 0 1
81133: PPUSH
81134: LD_VAR 0 2
81138: PPUSH
81139: LD_VAR 0 3
81143: PPUSH
81144: LD_VAR 0 4
81148: PPUSH
81149: LD_VAR 0 5
81153: PPUSH
81154: LD_VAR 0 6
81158: PPUSH
81159: CALL 21301 0 6
// end ;
81163: PPOPN 7
81165: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81166: CALL 21387 0 0
// end ;
81170: PPOPN 1
81172: END
