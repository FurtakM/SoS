// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 732 0 2
// PrepareArabian ;
  31: CALL 1421 0 0
// PrepareRussian ;
  35: CALL 3019 0 0
// Action ;
  39: CALL 7563 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 210: LD_ADDR_EXP 14
 214: PUSH
 215: LD_STRING 04_1_RuLabCaptured
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 30
 225: ST_TO_ADDR
// captureCounter := 0 ;
 226: LD_ADDR_EXP 18
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 234: LD_ADDR_EXP 19
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// flamethrowerBuilt := false ;
 242: LD_ADDR_EXP 20
 246: PUSH
 247: LD_INT 0
 249: ST_TO_ADDR
// end ;
 250: LD_VAR 0 1
 254: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 255: LD_EXP 10
 259: NOT
 260: PUSH
 261: LD_EXP 9
 265: NOT
 266: AND
 267: PUSH
 268: LD_EXP 39
 272: NOT
 273: AND
 274: PUSH
 275: LD_EXP 40
 279: NOT
 280: AND
 281: IFFALSE 293
 283: GO 285
 285: DISABLE
// SetAchievement ( ACH_EXT ) ;
 286: LD_STRING ACH_EXT
 288: PPUSH
 289: CALL_OW 543
 293: END
// every 0 0$1 trigger captureCounter >= 6 do
 294: LD_EXP 18
 298: PUSH
 299: LD_INT 6
 301: GREATEREQUAL
 302: IFFALSE 314
 304: GO 306
 306: DISABLE
// SetAchievement ( ACH_KEY ) ;
 307: LD_STRING ACH_KEY
 309: PPUSH
 310: CALL_OW 543
 314: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 315: LD_EXP 19
 319: PUSH
 320: LD_INT 3
 322: GREATEREQUAL
 323: IFFALSE 335
 325: GO 327
 327: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 328: LD_STRING ACH_CHEM
 330: PPUSH
 331: CALL_OW 543
 335: END
// every 0 0$1 trigger debug do var i ;
 336: LD_EXP 1
 340: IFFALSE 424
 342: GO 344
 344: DISABLE
 345: LD_INT 0
 347: PPUSH
// begin enable ;
 348: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 349: LD_ADDR_VAR 0 1
 353: PUSH
 354: LD_INT 22
 356: PUSH
 357: LD_INT 2
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PUSH
 364: LD_INT 3
 366: PUSH
 367: LD_INT 21
 369: PUSH
 370: LD_INT 3
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: PUSH
 381: EMPTY
 382: LIST
 383: LIST
 384: PPUSH
 385: CALL_OW 69
 389: PUSH
 390: FOR_IN
 391: IFFALSE 422
// if GetLives ( i ) < 1000 then
 393: LD_VAR 0 1
 397: PPUSH
 398: CALL_OW 256
 402: PUSH
 403: LD_INT 1000
 405: LESS
 406: IFFALSE 420
// SetLives ( i , 1000 ) ;
 408: LD_VAR 0 1
 412: PPUSH
 413: LD_INT 1000
 415: PPUSH
 416: CALL_OW 234
 420: GO 390
 422: POP
 423: POP
// end ; end_of_file
 424: PPOPN 1
 426: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 427: LD_INT 0
 429: PPUSH
// uc_side := side ;
 430: LD_ADDR_OWVAR 20
 434: PUSH
 435: LD_VAR 0 1
 439: ST_TO_ADDR
// uc_nation := nation ;
 440: LD_ADDR_OWVAR 21
 444: PUSH
 445: LD_VAR 0 2
 449: ST_TO_ADDR
// vc_chassis := chassis ;
 450: LD_ADDR_OWVAR 37
 454: PUSH
 455: LD_VAR 0 3
 459: ST_TO_ADDR
// vc_engine := engine ;
 460: LD_ADDR_OWVAR 39
 464: PUSH
 465: LD_VAR 0 4
 469: ST_TO_ADDR
// vc_control := control ;
 470: LD_ADDR_OWVAR 38
 474: PUSH
 475: LD_VAR 0 5
 479: ST_TO_ADDR
// vc_weapon := weapon ;
 480: LD_ADDR_OWVAR 40
 484: PUSH
 485: LD_VAR 0 6
 489: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 490: LD_ADDR_OWVAR 41
 494: PUSH
 495: LD_VAR 0 7
 499: ST_TO_ADDR
// result := CreateVehicle ;
 500: LD_ADDR_VAR 0 8
 504: PUSH
 505: CALL_OW 45
 509: ST_TO_ADDR
// end ;
 510: LD_VAR 0 8
 514: RET
// export function SayX ( units , ident ) ; var i ; begin
 515: LD_INT 0
 517: PPUSH
 518: PPUSH
// result := false ;
 519: LD_ADDR_VAR 0 3
 523: PUSH
 524: LD_INT 0
 526: ST_TO_ADDR
// if not units then
 527: LD_VAR 0 1
 531: NOT
 532: IFFALSE 536
// exit ;
 534: GO 590
// for i in units do
 536: LD_ADDR_VAR 0 4
 540: PUSH
 541: LD_VAR 0 1
 545: PUSH
 546: FOR_IN
 547: IFFALSE 588
// if IsOk ( i ) then
 549: LD_VAR 0 4
 553: PPUSH
 554: CALL_OW 302
 558: IFFALSE 586
// begin Say ( i , ident ) ;
 560: LD_VAR 0 4
 564: PPUSH
 565: LD_VAR 0 2
 569: PPUSH
 570: CALL_OW 88
// result := i ;
 574: LD_ADDR_VAR 0 3
 578: PUSH
 579: LD_VAR 0 4
 583: ST_TO_ADDR
// break ;
 584: GO 588
// end ;
 586: GO 546
 588: POP
 589: POP
// end ;
 590: LD_VAR 0 3
 594: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 595: LD_INT 0
 597: PPUSH
 598: PPUSH
// InitUc ;
 599: CALL_OW 18
// InitHc ;
 603: CALL_OW 19
// uc_side := 0 ;
 607: LD_ADDR_OWVAR 20
 611: PUSH
 612: LD_INT 0
 614: ST_TO_ADDR
// uc_nation := 0 ;
 615: LD_ADDR_OWVAR 21
 619: PUSH
 620: LD_INT 0
 622: ST_TO_ADDR
// for i = 1 to amount do
 623: LD_ADDR_VAR 0 4
 627: PUSH
 628: DOUBLE
 629: LD_INT 1
 631: DEC
 632: ST_TO_ADDR
 633: LD_VAR 0 2
 637: PUSH
 638: FOR_TO
 639: IFFALSE 721
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 641: LD_ADDR_OWVAR 29
 645: PUSH
 646: LD_INT 9
 648: PPUSH
 649: LD_INT 12
 651: PPUSH
 652: CALL_OW 12
 656: PUSH
 657: LD_INT 9
 659: PPUSH
 660: LD_INT 12
 662: PPUSH
 663: CALL_OW 12
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 672: LD_ADDR_OWVAR 35
 676: PUSH
 677: LD_INT 1
 679: NEG
 680: PPUSH
 681: LD_INT 1
 683: PPUSH
 684: CALL_OW 12
 688: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 689: LD_INT 0
 691: PPUSH
 692: LD_INT 12
 694: PPUSH
 695: LD_INT 1
 697: PPUSH
 698: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 702: CALL_OW 44
 706: PPUSH
 707: LD_VAR 0 1
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 638
 721: POP
 722: POP
// InitHc ;
 723: CALL_OW 19
// end ;
 727: LD_VAR 0 3
 731: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 732: LD_INT 0
 734: PPUSH
 735: PPUSH
// uc_side := 0 ;
 736: LD_ADDR_OWVAR 20
 740: PUSH
 741: LD_INT 0
 743: ST_TO_ADDR
// uc_nation := 0 ;
 744: LD_ADDR_OWVAR 21
 748: PUSH
 749: LD_INT 0
 751: ST_TO_ADDR
// for i := 1 to 3 do
 752: LD_ADDR_VAR 0 4
 756: PUSH
 757: DOUBLE
 758: LD_INT 1
 760: DEC
 761: ST_TO_ADDR
 762: LD_INT 3
 764: PUSH
 765: FOR_TO
 766: IFFALSE 803
// begin hc_class := 21 ;
 768: LD_ADDR_OWVAR 28
 772: PUSH
 773: LD_INT 21
 775: ST_TO_ADDR
// hc_gallery :=  ;
 776: LD_ADDR_OWVAR 33
 780: PUSH
 781: LD_STRING 
 783: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 784: CALL_OW 44
 788: PPUSH
 789: LD_VAR 0 1
 793: PPUSH
 794: LD_INT 0
 796: PPUSH
 797: CALL_OW 49
// end ;
 801: GO 765
 803: POP
 804: POP
// for i := 1 to 3 do
 805: LD_ADDR_VAR 0 4
 809: PUSH
 810: DOUBLE
 811: LD_INT 1
 813: DEC
 814: ST_TO_ADDR
 815: LD_INT 3
 817: PUSH
 818: FOR_TO
 819: IFFALSE 856
// begin hc_class := 18 ;
 821: LD_ADDR_OWVAR 28
 825: PUSH
 826: LD_INT 18
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 837: CALL_OW 44
 841: PPUSH
 842: LD_VAR 0 1
 846: PPUSH
 847: LD_INT 0
 849: PPUSH
 850: CALL_OW 49
// end ;
 854: GO 818
 856: POP
 857: POP
// for i := 1 to 3 do
 858: LD_ADDR_VAR 0 4
 862: PUSH
 863: DOUBLE
 864: LD_INT 1
 866: DEC
 867: ST_TO_ADDR
 868: LD_INT 3
 870: PUSH
 871: FOR_TO
 872: IFFALSE 909
// begin hc_class := 13 ;
 874: LD_ADDR_OWVAR 28
 878: PUSH
 879: LD_INT 13
 881: ST_TO_ADDR
// hc_gallery :=  ;
 882: LD_ADDR_OWVAR 33
 886: PUSH
 887: LD_STRING 
 889: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 890: CALL_OW 44
 894: PPUSH
 895: LD_VAR 0 1
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: CALL_OW 49
// end ;
 907: GO 871
 909: POP
 910: POP
// for i := 1 to 4 do
 911: LD_ADDR_VAR 0 4
 915: PUSH
 916: DOUBLE
 917: LD_INT 1
 919: DEC
 920: ST_TO_ADDR
 921: LD_INT 4
 923: PUSH
 924: FOR_TO
 925: IFFALSE 962
// begin hc_class := class_frog ;
 927: LD_ADDR_OWVAR 28
 931: PUSH
 932: LD_INT 19
 934: ST_TO_ADDR
// hc_gallery :=  ;
 935: LD_ADDR_OWVAR 33
 939: PUSH
 940: LD_STRING 
 942: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 943: CALL_OW 44
 947: PPUSH
 948: LD_VAR 0 2
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: CALL_OW 49
// end ;
 960: GO 924
 962: POP
 963: POP
// end ;
 964: LD_VAR 0 3
 968: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 969: LD_INT 0
 971: PPUSH
 972: PPUSH
 973: PPUSH
// if not observer or not unit then
 974: LD_VAR 0 1
 978: NOT
 979: PUSH
 980: LD_VAR 0 2
 984: NOT
 985: OR
 986: IFFALSE 990
// exit ;
 988: GO 1038
// if not See ( GetSide ( observer ) , unit ) then
 990: LD_VAR 0 1
 994: PPUSH
 995: CALL_OW 255
 999: PPUSH
1000: LD_VAR 0 2
1004: PPUSH
1005: CALL_OW 292
1009: NOT
1010: IFFALSE 1014
// exit ;
1012: GO 1038
// result := GetDistUnits ( observer , unit ) < 12 ;
1014: LD_ADDR_VAR 0 3
1018: PUSH
1019: LD_VAR 0 1
1023: PPUSH
1024: LD_VAR 0 2
1028: PPUSH
1029: CALL_OW 296
1033: PUSH
1034: LD_INT 12
1036: LESS
1037: ST_TO_ADDR
// end ;
1038: LD_VAR 0 3
1042: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1043: LD_INT 0
1045: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1046: LD_VAR 0 2
1050: PUSH
1051: LD_INT 1
1053: ARRAY
1054: PPUSH
1055: LD_VAR 0 2
1059: PUSH
1060: LD_INT 2
1062: ARRAY
1063: PPUSH
1064: CALL_OW 488
1068: PUSH
1069: LD_VAR 0 2
1073: PUSH
1074: LD_INT 1
1076: ARRAY
1077: PPUSH
1078: LD_VAR 0 2
1082: PUSH
1083: LD_INT 2
1085: ARRAY
1086: PPUSH
1087: CALL_OW 428
1091: PUSH
1092: LD_INT 0
1094: EQUAL
1095: AND
1096: IFFALSE 1130
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1098: LD_VAR 0 1
1102: PPUSH
1103: LD_VAR 0 2
1107: PUSH
1108: LD_INT 1
1110: ARRAY
1111: PPUSH
1112: LD_VAR 0 2
1116: PUSH
1117: LD_INT 2
1119: ARRAY
1120: PPUSH
1121: LD_VAR 0 3
1125: PPUSH
1126: CALL_OW 48
// end ;
1130: LD_VAR 0 4
1134: RET
// export function ReverseArray ( array ) ; var i ; begin
1135: LD_INT 0
1137: PPUSH
1138: PPUSH
// if not array then
1139: LD_VAR 0 1
1143: NOT
1144: IFFALSE 1148
// exit ;
1146: GO 1206
// result := [ ] ;
1148: LD_ADDR_VAR 0 2
1152: PUSH
1153: EMPTY
1154: ST_TO_ADDR
// for i := 1 to array do
1155: LD_ADDR_VAR 0 3
1159: PUSH
1160: DOUBLE
1161: LD_INT 1
1163: DEC
1164: ST_TO_ADDR
1165: LD_VAR 0 1
1169: PUSH
1170: FOR_TO
1171: IFFALSE 1204
// result := Insert ( result , 1 , array [ i ] ) ;
1173: LD_ADDR_VAR 0 2
1177: PUSH
1178: LD_VAR 0 2
1182: PPUSH
1183: LD_INT 1
1185: PPUSH
1186: LD_VAR 0 1
1190: PUSH
1191: LD_VAR 0 3
1195: ARRAY
1196: PPUSH
1197: CALL_OW 2
1201: ST_TO_ADDR
1202: GO 1170
1204: POP
1205: POP
// end ;
1206: LD_VAR 0 2
1210: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1211: LD_INT 0
1213: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1214: LD_VAR 0 1
1218: PPUSH
1219: LD_VAR 0 2
1223: PPUSH
1224: LD_VAR 0 3
1228: PPUSH
1229: LD_VAR 0 4
1233: PPUSH
1234: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1238: LD_VAR 0 1
1242: PPUSH
1243: LD_VAR 0 2
1247: PPUSH
1248: LD_VAR 0 3
1252: PPUSH
1253: CALL_OW 331
// end ;
1257: LD_VAR 0 5
1261: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1262: LD_INT 0
1264: PPUSH
// if not units then
1265: LD_VAR 0 1
1269: NOT
1270: IFFALSE 1274
// exit ;
1272: GO 1353
// result := true ;
1274: LD_ADDR_VAR 0 4
1278: PUSH
1279: LD_INT 1
1281: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) , menDialog ) then
1282: LD_VAR 0 1
1286: PPUSH
1287: LD_INT 26
1289: PUSH
1290: LD_INT 1
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: PPUSH
1297: CALL_OW 72
1301: PPUSH
1302: LD_VAR 0 2
1306: PPUSH
1307: CALL_OW 88
1311: NOT
1312: IFFALSE 1353
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1314: LD_ADDR_VAR 0 4
1318: PUSH
1319: LD_VAR 0 1
1323: PPUSH
1324: LD_INT 26
1326: PUSH
1327: LD_INT 2
1329: PUSH
1330: EMPTY
1331: LIST
1332: LIST
1333: PPUSH
1334: CALL_OW 72
1338: PUSH
1339: LD_INT 1
1341: ARRAY
1342: PPUSH
1343: LD_VAR 0 3
1347: PPUSH
1348: CALL_OW 88
1352: ST_TO_ADDR
// end ;
1353: LD_VAR 0 4
1357: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1358: LD_INT 0
1360: PPUSH
1361: PPUSH
// if not group then
1362: LD_VAR 0 2
1366: NOT
1367: IFFALSE 1371
// exit ;
1369: GO 1416
// for i in group do
1371: LD_ADDR_VAR 0 4
1375: PUSH
1376: LD_VAR 0 2
1380: PUSH
1381: FOR_IN
1382: IFFALSE 1414
// if See ( side , i ) then
1384: LD_VAR 0 1
1388: PPUSH
1389: LD_VAR 0 4
1393: PPUSH
1394: CALL_OW 292
1398: IFFALSE 1412
// begin result := true ;
1400: LD_ADDR_VAR 0 3
1404: PUSH
1405: LD_INT 1
1407: ST_TO_ADDR
// exit ;
1408: POP
1409: POP
1410: GO 1416
// end ;
1412: GO 1381
1414: POP
1415: POP
// end ; end_of_file
1416: LD_VAR 0 3
1420: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1421: LD_INT 0
1423: PPUSH
1424: PPUSH
// uc_side := 2 ;
1425: LD_ADDR_OWVAR 20
1429: PUSH
1430: LD_INT 2
1432: ST_TO_ADDR
// uc_nation := 2 ;
1433: LD_ADDR_OWVAR 21
1437: PUSH
1438: LD_INT 2
1440: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1441: LD_ADDR_EXP 21
1445: PUSH
1446: LD_STRING Heike
1448: PPUSH
1449: LD_EXP 1
1453: NOT
1454: PPUSH
1455: LD_EXP 2
1459: PPUSH
1460: CALL 26489 0 3
1464: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1465: LD_ADDR_EXP 24
1469: PUSH
1470: LD_STRING Ibrahim
1472: PPUSH
1473: LD_EXP 1
1477: NOT
1478: PPUSH
1479: LD_EXP 2
1483: PPUSH
1484: CALL 26489 0 3
1488: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1489: LD_ADDR_EXP 22
1493: PUSH
1494: LD_STRING Givi
1496: PPUSH
1497: LD_EXP 1
1501: NOT
1502: PPUSH
1503: LD_EXP 2
1507: PPUSH
1508: CALL 26489 0 3
1512: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1513: LD_ADDR_EXP 25
1517: PUSH
1518: LD_STRING Kamil
1520: PPUSH
1521: LD_EXP 1
1525: NOT
1526: PPUSH
1527: LD_EXP 2
1531: PPUSH
1532: CALL 26489 0 3
1536: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1537: LD_ADDR_EXP 26
1541: PUSH
1542: LD_STRING Kaia
1544: PPUSH
1545: LD_EXP 1
1549: NOT
1550: PPUSH
1551: LD_EXP 2
1555: PPUSH
1556: CALL 26489 0 3
1560: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1561: LD_ADDR_EXP 27
1565: PUSH
1566: LD_STRING Sophia
1568: PPUSH
1569: LD_EXP 1
1573: NOT
1574: PPUSH
1575: LD_EXP 2
1579: PPUSH
1580: CALL 26489 0 3
1584: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1585: LD_ADDR_EXP 28
1589: PUSH
1590: LD_STRING Markov
1592: PPUSH
1593: LD_EXP 1
1597: NOT
1598: PPUSH
1599: LD_EXP 2
1603: PPUSH
1604: CALL 26489 0 3
1608: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1609: LD_ADDR_EXP 33
1613: PUSH
1614: LD_STRING Aviradze
1616: PPUSH
1617: LD_EXP 1
1621: NOT
1622: PPUSH
1623: LD_EXP 2
1627: PPUSH
1628: CALL 26489 0 3
1632: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1633: LD_ADDR_EXP 32
1637: PUSH
1638: LD_STRING Kurt
1640: PPUSH
1641: LD_EXP 1
1645: NOT
1646: PPUSH
1647: LD_EXP 2
1651: PPUSH
1652: CALL 26489 0 3
1656: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1657: LD_ADDR_EXP 23
1661: PUSH
1662: LD_STRING Mike
1664: PPUSH
1665: LD_EXP 1
1669: NOT
1670: PPUSH
1671: LD_EXP 2
1675: PPUSH
1676: CALL 26489 0 3
1680: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1681: LD_ADDR_EXP 30
1685: PUSH
1686: LD_STRING Olaf
1688: PPUSH
1689: LD_INT 0
1691: PPUSH
1692: LD_STRING 
1694: PPUSH
1695: CALL 26489 0 3
1699: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1700: LD_ADDR_EXP 34
1704: PUSH
1705: LD_STRING 04_2_others
1707: PPUSH
1708: CALL_OW 31
1712: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1713: LD_ADDR_EXP 36
1717: PUSH
1718: LD_STRING 04_2_apes
1720: PPUSH
1721: CALL_OW 31
1725: ST_TO_ADDR
// if hasFlamethrower then
1726: LD_EXP 3
1730: IFFALSE 1961
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1732: LD_INT 70
1734: PPUSH
1735: LD_INT 2
1737: PPUSH
1738: LD_INT 2
1740: PPUSH
1741: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 ] [ Difficulty ] ] ] ] ;
1745: LD_ADDR_EXP 35
1749: PUSH
1750: LD_INT 13
1752: PUSH
1753: LD_INT 1
1755: PUSH
1756: LD_INT 1
1758: PUSH
1759: LD_INT 27
1761: PUSH
1762: LD_INT 2
1764: PUSH
1765: LD_INT 1000
1767: PUSH
1768: LD_INT 0
1770: PUSH
1771: LD_INT 0
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: PUSH
1787: LD_INT 13
1789: PUSH
1790: LD_INT 1
1792: PUSH
1793: LD_INT 1
1795: PUSH
1796: LD_INT 25
1798: PUSH
1799: LD_INT 2
1801: PUSH
1802: LD_INT 1000
1804: PUSH
1805: LD_INT 0
1807: PUSH
1808: LD_INT 0
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: PUSH
1824: LD_INT 13
1826: PUSH
1827: LD_INT 1
1829: PUSH
1830: LD_INT 1
1832: PUSH
1833: LD_INT 26
1835: PUSH
1836: LD_INT 2
1838: PUSH
1839: LD_INT 1000
1841: PUSH
1842: LD_INT 0
1844: PUSH
1845: LD_INT 0
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: PUSH
1861: LD_INT 13
1863: PUSH
1864: LD_INT 1
1866: PUSH
1867: LD_INT 1
1869: PUSH
1870: LD_INT 27
1872: PUSH
1873: LD_INT 2
1875: PUSH
1876: LD_INT 1000
1878: PUSH
1879: LD_INT 0
1881: PUSH
1882: LD_INT 0
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: LIST
1896: LIST
1897: PUSH
1898: LD_INT 13
1900: PUSH
1901: LD_INT 1
1903: PUSH
1904: LD_INT 1
1906: PUSH
1907: LD_INT 32
1909: PUSH
1910: LD_INT 2
1912: PUSH
1913: LD_INT 1000
1915: PUSH
1916: LD_INT 0
1918: PUSH
1919: LD_INT 60
1921: PUSH
1922: LD_INT 40
1924: PUSH
1925: LD_INT 20
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: LIST
1932: PUSH
1933: LD_OWVAR 67
1937: ARRAY
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: PUSH
1943: EMPTY
1944: LIST
1945: LIST
1946: LIST
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: ST_TO_ADDR
// end else
1959: GO 2175
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 ] [ Difficulty ] ] ] ] ;
1961: LD_ADDR_EXP 35
1965: PUSH
1966: LD_INT 13
1968: PUSH
1969: LD_INT 1
1971: PUSH
1972: LD_INT 1
1974: PUSH
1975: LD_INT 25
1977: PUSH
1978: LD_INT 2
1980: PUSH
1981: LD_INT 1000
1983: PUSH
1984: LD_INT 0
1986: PUSH
1987: LD_INT 0
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: PUSH
2003: LD_INT 13
2005: PUSH
2006: LD_INT 1
2008: PUSH
2009: LD_INT 1
2011: PUSH
2012: LD_INT 27
2014: PUSH
2015: LD_INT 2
2017: PUSH
2018: LD_INT 1000
2020: PUSH
2021: LD_INT 0
2023: PUSH
2024: LD_INT 0
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: LIST
2038: LIST
2039: PUSH
2040: LD_INT 13
2042: PUSH
2043: LD_INT 1
2045: PUSH
2046: LD_INT 1
2048: PUSH
2049: LD_INT 24
2051: PUSH
2052: LD_INT 2
2054: PUSH
2055: LD_INT 1000
2057: PUSH
2058: LD_INT 0
2060: PUSH
2061: LD_INT 0
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: LIST
2075: LIST
2076: PUSH
2077: LD_INT 13
2079: PUSH
2080: LD_INT 1
2082: PUSH
2083: LD_INT 1
2085: PUSH
2086: LD_INT 27
2088: PUSH
2089: LD_INT 2
2091: PUSH
2092: LD_INT 1000
2094: PUSH
2095: LD_INT 0
2097: PUSH
2098: LD_INT 0
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: PUSH
2105: EMPTY
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: PUSH
2114: LD_INT 13
2116: PUSH
2117: LD_INT 1
2119: PUSH
2120: LD_INT 1
2122: PUSH
2123: LD_INT 32
2125: PUSH
2126: LD_INT 2
2128: PUSH
2129: LD_INT 1000
2131: PUSH
2132: LD_INT 0
2134: PUSH
2135: LD_INT 50
2137: PUSH
2138: LD_INT 30
2140: PUSH
2141: LD_INT 20
2143: PUSH
2144: EMPTY
2145: LIST
2146: LIST
2147: LIST
2148: PUSH
2149: LD_OWVAR 67
2153: ARRAY
2154: PUSH
2155: EMPTY
2156: LIST
2157: LIST
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: ST_TO_ADDR
// end ; uc_side := 5 ;
2175: LD_ADDR_OWVAR 20
2179: PUSH
2180: LD_INT 5
2182: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2183: LD_ADDR_EXP 29
2187: PUSH
2188: LD_STRING Abdul
2190: PPUSH
2191: LD_INT 0
2193: PPUSH
2194: LD_STRING 
2196: PPUSH
2197: CALL 26489 0 3
2201: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2202: LD_ADDR_EXP 31
2206: PUSH
2207: LD_STRING Omar
2209: PPUSH
2210: LD_INT 0
2212: PPUSH
2213: LD_STRING 
2215: PPUSH
2216: CALL 26489 0 3
2220: ST_TO_ADDR
// end ;
2221: LD_VAR 0 1
2225: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2226: LD_INT 0
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
// pfx := 04_1_ ;
2233: LD_ADDR_VAR 0 2
2237: PUSH
2238: LD_STRING 04_1_
2240: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2241: LD_INT 35
2243: PPUSH
2244: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
2248: LD_INT 3
2250: PPUSH
2251: LD_INT 2
2253: PPUSH
2254: CALL_OW 428
2258: NOT
2259: IFFALSE 2241
// tmp := [ ] ;
2261: LD_ADDR_VAR 0 4
2265: PUSH
2266: EMPTY
2267: ST_TO_ADDR
// uc_side := 5 ;
2268: LD_ADDR_OWVAR 20
2272: PUSH
2273: LD_INT 5
2275: ST_TO_ADDR
// uc_nation := 2 ;
2276: LD_ADDR_OWVAR 21
2280: PUSH
2281: LD_INT 2
2283: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2284: LD_ADDR_EXP 33
2288: PUSH
2289: LD_STRING Aviradze_L
2291: PPUSH
2292: LD_EXP 1
2296: NOT
2297: PPUSH
2298: LD_VAR 0 2
2302: PPUSH
2303: CALL 26489 0 3
2307: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2308: LD_EXP 33
2312: PPUSH
2313: LD_INT 2
2315: PPUSH
2316: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2320: LD_EXP 33
2324: PPUSH
2325: LD_INT 14
2327: PPUSH
2328: LD_INT 0
2330: PPUSH
2331: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
2335: LD_EXP 33
2339: PPUSH
2340: LD_INT 8
2342: PPUSH
2343: LD_INT 6
2345: PPUSH
2346: CALL_OW 111
// AddComHold ( Aviradze ) ;
2350: LD_EXP 33
2354: PPUSH
2355: CALL_OW 200
// tmp := [ Aviradze ] ;
2359: LD_ADDR_VAR 0 4
2363: PUSH
2364: LD_EXP 33
2368: PUSH
2369: EMPTY
2370: LIST
2371: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2372: LD_INT 70
2374: PPUSH
2375: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2379: LD_STRING Ibrahim_L
2381: PPUSH
2382: LD_EXP 1
2386: NOT
2387: PPUSH
2388: LD_VAR 0 2
2392: PPUSH
2393: CALL 26489 0 3
2397: IFFALSE 2497
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2399: LD_ADDR_EXP 24
2403: PUSH
2404: LD_STRING Ibrahim_L
2406: PPUSH
2407: LD_EXP 1
2411: NOT
2412: PPUSH
2413: LD_VAR 0 2
2417: PPUSH
2418: CALL 26489 0 3
2422: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2423: LD_EXP 24
2427: PPUSH
2428: LD_INT 2
2430: PPUSH
2431: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2435: LD_EXP 24
2439: PPUSH
2440: LD_INT 14
2442: PPUSH
2443: LD_INT 0
2445: PPUSH
2446: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
2450: LD_EXP 24
2454: PPUSH
2455: LD_INT 8
2457: PPUSH
2458: LD_INT 7
2460: PPUSH
2461: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2465: LD_EXP 24
2469: PPUSH
2470: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2474: LD_ADDR_VAR 0 4
2478: PUSH
2479: LD_VAR 0 4
2483: PUSH
2484: LD_EXP 24
2488: ADD
2489: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2490: LD_INT 70
2492: PPUSH
2493: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2497: LD_STRING Kaia_L
2499: PPUSH
2500: LD_EXP 1
2504: NOT
2505: PPUSH
2506: LD_VAR 0 2
2510: PPUSH
2511: CALL 26489 0 3
2515: IFFALSE 2615
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2517: LD_ADDR_EXP 26
2521: PUSH
2522: LD_STRING Kaia_L
2524: PPUSH
2525: LD_EXP 1
2529: NOT
2530: PPUSH
2531: LD_VAR 0 2
2535: PPUSH
2536: CALL 26489 0 3
2540: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2541: LD_EXP 26
2545: PPUSH
2546: LD_INT 2
2548: PPUSH
2549: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2553: LD_EXP 26
2557: PPUSH
2558: LD_INT 14
2560: PPUSH
2561: LD_INT 0
2563: PPUSH
2564: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
2568: LD_EXP 26
2572: PPUSH
2573: LD_INT 8
2575: PPUSH
2576: LD_INT 7
2578: PPUSH
2579: CALL_OW 111
// AddComHold ( Kaia ) ;
2583: LD_EXP 26
2587: PPUSH
2588: CALL_OW 200
// tmp := tmp ^ Kaia ;
2592: LD_ADDR_VAR 0 4
2596: PUSH
2597: LD_VAR 0 4
2601: PUSH
2602: LD_EXP 26
2606: ADD
2607: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2608: LD_INT 70
2610: PPUSH
2611: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2615: LD_STRING Kamil_L
2617: PPUSH
2618: LD_EXP 1
2622: NOT
2623: PPUSH
2624: LD_VAR 0 2
2628: PPUSH
2629: CALL 26489 0 3
2633: IFFALSE 2733
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2635: LD_ADDR_EXP 25
2639: PUSH
2640: LD_STRING Kamil_L
2642: PPUSH
2643: LD_EXP 1
2647: NOT
2648: PPUSH
2649: LD_VAR 0 2
2653: PPUSH
2654: CALL 26489 0 3
2658: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2659: LD_EXP 25
2663: PPUSH
2664: LD_INT 2
2666: PPUSH
2667: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2671: LD_EXP 25
2675: PPUSH
2676: LD_INT 14
2678: PPUSH
2679: LD_INT 0
2681: PPUSH
2682: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
2686: LD_EXP 25
2690: PPUSH
2691: LD_INT 8
2693: PPUSH
2694: LD_INT 7
2696: PPUSH
2697: CALL_OW 111
// AddComHold ( Kamil ) ;
2701: LD_EXP 25
2705: PPUSH
2706: CALL_OW 200
// tmp := tmp ^ Kamil ;
2710: LD_ADDR_VAR 0 4
2714: PUSH
2715: LD_VAR 0 4
2719: PUSH
2720: LD_EXP 25
2724: ADD
2725: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2726: LD_INT 70
2728: PPUSH
2729: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2733: LD_STRING Sophia_L
2735: PPUSH
2736: LD_EXP 1
2740: NOT
2741: PPUSH
2742: LD_VAR 0 2
2746: PPUSH
2747: CALL 26489 0 3
2751: IFFALSE 2851
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2753: LD_ADDR_EXP 27
2757: PUSH
2758: LD_STRING Sophia_L
2760: PPUSH
2761: LD_EXP 1
2765: NOT
2766: PPUSH
2767: LD_VAR 0 2
2771: PPUSH
2772: CALL 26489 0 3
2776: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2777: LD_EXP 27
2781: PPUSH
2782: LD_INT 2
2784: PPUSH
2785: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2789: LD_EXP 27
2793: PPUSH
2794: LD_INT 14
2796: PPUSH
2797: LD_INT 0
2799: PPUSH
2800: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
2804: LD_EXP 27
2808: PPUSH
2809: LD_INT 9
2811: PPUSH
2812: LD_INT 6
2814: PPUSH
2815: CALL_OW 111
// AddComHold ( Sophia ) ;
2819: LD_EXP 27
2823: PPUSH
2824: CALL_OW 200
// tmp := tmp ^ Sophia ;
2828: LD_ADDR_VAR 0 4
2832: PUSH
2833: LD_VAR 0 4
2837: PUSH
2838: LD_EXP 27
2842: ADD
2843: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2844: LD_INT 70
2846: PPUSH
2847: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2851: LD_ADDR_VAR 0 5
2855: PUSH
2856: LD_STRING 04_1_others_L
2858: PPUSH
2859: CALL_OW 31
2863: ST_TO_ADDR
// if tmp2 then
2864: LD_VAR 0 5
2868: IFFALSE 2965
// for i in tmp2 do
2870: LD_ADDR_VAR 0 3
2874: PUSH
2875: LD_VAR 0 5
2879: PUSH
2880: FOR_IN
2881: IFFALSE 2963
// begin SetDir ( i , 2 ) ;
2883: LD_VAR 0 3
2887: PPUSH
2888: LD_INT 2
2890: PPUSH
2891: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2895: LD_VAR 0 3
2899: PPUSH
2900: LD_INT 14
2902: PPUSH
2903: LD_INT 0
2905: PPUSH
2906: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2910: LD_ADDR_EXP 34
2914: PUSH
2915: LD_EXP 34
2919: PPUSH
2920: LD_EXP 34
2924: PUSH
2925: LD_INT 1
2927: PLUS
2928: PPUSH
2929: LD_VAR 0 3
2933: PPUSH
2934: CALL_OW 1
2938: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2939: LD_VAR 0 3
2943: PPUSH
2944: LD_INT 17
2946: PPUSH
2947: LD_INT 14
2949: PPUSH
2950: CALL_OW 111
// wait ( 0 0$2 ) ;
2954: LD_INT 70
2956: PPUSH
2957: CALL_OW 67
// end ;
2961: GO 2880
2963: POP
2964: POP
// for i in tmp union tmp2 do
2965: LD_ADDR_VAR 0 3
2969: PUSH
2970: LD_VAR 0 4
2974: PUSH
2975: LD_VAR 0 5
2979: UNION
2980: PUSH
2981: FOR_IN
2982: IFFALSE 3012
// begin SetSide ( i , 2 ) ;
2984: LD_VAR 0 3
2988: PPUSH
2989: LD_INT 2
2991: PPUSH
2992: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
2996: LD_VAR 0 3
3000: PPUSH
3001: LD_EXP 21
3005: PPUSH
3006: CALL_OW 112
// end ;
3010: GO 2981
3012: POP
3013: POP
// end ; end_of_file
3014: LD_VAR 0 1
3018: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
3019: LD_INT 0
3021: PPUSH
3022: PPUSH
3023: PPUSH
// uc_side := 3 ;
3024: LD_ADDR_OWVAR 20
3028: PUSH
3029: LD_INT 3
3031: ST_TO_ADDR
// uc_nation := 3 ;
3032: LD_ADDR_OWVAR 21
3036: PUSH
3037: LD_INT 3
3039: ST_TO_ADDR
// crossRoadGuard := [ ] ;
3040: LD_ADDR_EXP 37
3044: PUSH
3045: EMPTY
3046: ST_TO_ADDR
// oilBaseGuard := [ ] ;
3047: LD_ADDR_EXP 38
3051: PUSH
3052: EMPTY
3053: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3054: LD_ADDR_EXP 41
3058: PUSH
3059: EMPTY
3060: ST_TO_ADDR
// for i := 1 to 2 do
3061: LD_ADDR_VAR 0 2
3065: PUSH
3066: DOUBLE
3067: LD_INT 1
3069: DEC
3070: ST_TO_ADDR
3071: LD_INT 2
3073: PUSH
3074: FOR_TO
3075: IFFALSE 3210
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3077: LD_INT 0
3079: PPUSH
3080: LD_INT 1
3082: PPUSH
3083: LD_INT 3
3085: PUSH
3086: LD_INT 4
3088: PUSH
3089: LD_INT 5
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: LIST
3096: PUSH
3097: LD_OWVAR 67
3101: ARRAY
3102: PPUSH
3103: CALL_OW 380
// un := CreateHuman ;
3107: LD_ADDR_VAR 0 3
3111: PUSH
3112: CALL_OW 44
3116: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3117: LD_ADDR_EXP 37
3121: PUSH
3122: LD_EXP 37
3126: PPUSH
3127: LD_EXP 37
3131: PUSH
3132: LD_INT 1
3134: PLUS
3135: PPUSH
3136: LD_VAR 0 3
3140: PPUSH
3141: CALL_OW 1
3145: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3146: LD_VAR 0 3
3150: PPUSH
3151: LD_INT 100
3153: PPUSH
3154: LD_INT 63
3156: PPUSH
3157: LD_INT 3
3159: PPUSH
3160: LD_INT 0
3162: PPUSH
3163: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3167: LD_VAR 0 3
3171: PPUSH
3172: LD_INT 97
3174: PPUSH
3175: LD_INT 64
3177: PPUSH
3178: CALL_OW 428
3182: PUSH
3183: LD_INT 98
3185: PPUSH
3186: LD_INT 58
3188: PPUSH
3189: CALL_OW 428
3193: PUSH
3194: EMPTY
3195: LIST
3196: LIST
3197: PUSH
3198: LD_VAR 0 2
3202: ARRAY
3203: PPUSH
3204: CALL_OW 120
// end ;
3208: GO 3074
3210: POP
3211: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3212: LD_INT 51
3214: PPUSH
3215: LD_INT 77
3217: PPUSH
3218: CALL_OW 428
3222: PPUSH
3223: CALL_OW 274
3227: PPUSH
3228: LD_INT 1
3230: PPUSH
3231: LD_INT 120
3233: PPUSH
3234: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3238: LD_INT 10
3240: PPUSH
3241: CALL_OW 274
3245: PPUSH
3246: LD_INT 2
3248: PPUSH
3249: LD_INT 300
3251: PPUSH
3252: CALL_OW 277
// for i := 1 to 2 do
3256: LD_ADDR_VAR 0 2
3260: PUSH
3261: DOUBLE
3262: LD_INT 1
3264: DEC
3265: ST_TO_ADDR
3266: LD_INT 2
3268: PUSH
3269: FOR_TO
3270: IFFALSE 3384
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3272: LD_INT 0
3274: PPUSH
3275: LD_INT 1
3277: PPUSH
3278: LD_INT 3
3280: PUSH
3281: LD_INT 4
3283: PUSH
3284: LD_INT 5
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: LIST
3291: PUSH
3292: LD_OWVAR 67
3296: ARRAY
3297: PPUSH
3298: CALL_OW 380
// un := CreateHuman ;
3302: LD_ADDR_VAR 0 3
3306: PUSH
3307: CALL_OW 44
3311: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3312: LD_ADDR_EXP 38
3316: PUSH
3317: LD_EXP 38
3321: PPUSH
3322: LD_EXP 38
3326: PUSH
3327: LD_INT 1
3329: PLUS
3330: PPUSH
3331: LD_VAR 0 3
3335: PPUSH
3336: CALL_OW 1
3340: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3341: LD_VAR 0 3
3345: PPUSH
3346: LD_INT 198
3348: PPUSH
3349: LD_INT 106
3351: PPUSH
3352: CALL_OW 428
3356: PUSH
3357: LD_INT 205
3359: PPUSH
3360: LD_INT 114
3362: PPUSH
3363: CALL_OW 428
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: PUSH
3372: LD_VAR 0 2
3376: ARRAY
3377: PPUSH
3378: CALL_OW 52
// end ;
3382: GO 3269
3384: POP
3385: POP
// for i := 1 to 2 do
3386: LD_ADDR_VAR 0 2
3390: PUSH
3391: DOUBLE
3392: LD_INT 1
3394: DEC
3395: ST_TO_ADDR
3396: LD_INT 2
3398: PUSH
3399: FOR_TO
3400: IFFALSE 3477
// begin PrepareHuman ( false , 2 , 3 ) ;
3402: LD_INT 0
3404: PPUSH
3405: LD_INT 2
3407: PPUSH
3408: LD_INT 3
3410: PPUSH
3411: CALL_OW 380
// un := CreateHuman ;
3415: LD_ADDR_VAR 0 3
3419: PUSH
3420: CALL_OW 44
3424: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3425: LD_ADDR_EXP 38
3429: PUSH
3430: LD_EXP 38
3434: PPUSH
3435: LD_EXP 38
3439: PUSH
3440: LD_INT 1
3442: PLUS
3443: PPUSH
3444: LD_VAR 0 3
3448: PPUSH
3449: CALL_OW 1
3453: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3454: LD_VAR 0 3
3458: PPUSH
3459: LD_INT 204
3461: PPUSH
3462: LD_INT 108
3464: PPUSH
3465: LD_INT 2
3467: PPUSH
3468: LD_INT 0
3470: PPUSH
3471: CALL_OW 50
// end ;
3475: GO 3399
3477: POP
3478: POP
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
3479: LD_ADDR_VAR 0 2
3483: PUSH
3484: DOUBLE
3485: LD_INT 1
3487: DEC
3488: ST_TO_ADDR
3489: LD_INT 4
3491: PUSH
3492: LD_INT 5
3494: PUSH
3495: LD_INT 6
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: LIST
3502: PUSH
3503: LD_OWVAR 67
3507: ARRAY
3508: PUSH
3509: FOR_TO
3510: IFFALSE 3631
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3512: LD_INT 0
3514: PPUSH
3515: LD_INT 1
3517: PUSH
3518: LD_INT 1
3520: PUSH
3521: LD_INT 2
3523: PUSH
3524: LD_INT 4
3526: PUSH
3527: LD_INT 1
3529: PUSH
3530: EMPTY
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: PUSH
3537: LD_INT 1
3539: PPUSH
3540: LD_INT 5
3542: PPUSH
3543: CALL_OW 12
3547: ARRAY
3548: PPUSH
3549: LD_INT 3
3551: PUSH
3552: LD_INT 4
3554: PUSH
3555: LD_INT 5
3557: PUSH
3558: EMPTY
3559: LIST
3560: LIST
3561: LIST
3562: PUSH
3563: LD_OWVAR 67
3567: ARRAY
3568: PPUSH
3569: CALL_OW 380
// un := CreateHuman ;
3573: LD_ADDR_VAR 0 3
3577: PUSH
3578: CALL_OW 44
3582: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3583: LD_VAR 0 3
3587: PPUSH
3588: LD_INT 11
3590: PPUSH
3591: LD_INT 0
3593: PPUSH
3594: CALL 61273 0 3
3598: IFFALSE 3629
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3600: LD_ADDR_EXP 39
3604: PUSH
3605: LD_EXP 39
3609: PPUSH
3610: LD_EXP 39
3614: PUSH
3615: LD_INT 1
3617: PLUS
3618: PPUSH
3619: LD_VAR 0 3
3623: PPUSH
3624: CALL_OW 1
3628: ST_TO_ADDR
// end ;
3629: GO 3509
3631: POP
3632: POP
// for i := 1 to 3 do
3633: LD_ADDR_VAR 0 2
3637: PUSH
3638: DOUBLE
3639: LD_INT 1
3641: DEC
3642: ST_TO_ADDR
3643: LD_INT 3
3645: PUSH
3646: FOR_TO
3647: IFFALSE 3737
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 ] [ Difficulty ] ) ;
3649: LD_INT 0
3651: PPUSH
3652: LD_INT 1
3654: PPUSH
3655: LD_INT 3
3657: PUSH
3658: LD_INT 4
3660: PUSH
3661: LD_INT 4
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: LIST
3668: PUSH
3669: LD_OWVAR 67
3673: ARRAY
3674: PPUSH
3675: CALL_OW 380
// un := CreateHuman ;
3679: LD_ADDR_VAR 0 3
3683: PUSH
3684: CALL_OW 44
3688: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3689: LD_VAR 0 3
3693: PPUSH
3694: LD_INT 11
3696: PPUSH
3697: LD_INT 0
3699: PPUSH
3700: CALL 61273 0 3
3704: IFFALSE 3735
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3706: LD_ADDR_EXP 39
3710: PUSH
3711: LD_EXP 39
3715: PPUSH
3716: LD_EXP 39
3720: PUSH
3721: LD_INT 1
3723: PLUS
3724: PPUSH
3725: LD_VAR 0 3
3729: PPUSH
3730: CALL_OW 1
3734: ST_TO_ADDR
// end ;
3735: GO 3646
3737: POP
3738: POP
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
3739: LD_ADDR_VAR 0 2
3743: PUSH
3744: DOUBLE
3745: LD_INT 1
3747: DEC
3748: ST_TO_ADDR
3749: LD_INT 5
3751: PUSH
3752: LD_INT 6
3754: PUSH
3755: LD_INT 7
3757: PUSH
3758: EMPTY
3759: LIST
3760: LIST
3761: LIST
3762: PUSH
3763: LD_OWVAR 67
3767: ARRAY
3768: PUSH
3769: FOR_TO
3770: IFFALSE 3891
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3772: LD_INT 0
3774: PPUSH
3775: LD_INT 1
3777: PUSH
3778: LD_INT 1
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: LD_INT 4
3786: PUSH
3787: LD_INT 1
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: PUSH
3797: LD_INT 1
3799: PPUSH
3800: LD_INT 5
3802: PPUSH
3803: CALL_OW 12
3807: ARRAY
3808: PPUSH
3809: LD_INT 3
3811: PUSH
3812: LD_INT 4
3814: PUSH
3815: LD_INT 5
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: LIST
3822: PUSH
3823: LD_OWVAR 67
3827: ARRAY
3828: PPUSH
3829: CALL_OW 380
// un := CreateHuman ;
3833: LD_ADDR_VAR 0 3
3837: PUSH
3838: CALL_OW 44
3842: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3843: LD_VAR 0 3
3847: PPUSH
3848: LD_INT 15
3850: PPUSH
3851: LD_INT 0
3853: PPUSH
3854: CALL 61273 0 3
3858: IFFALSE 3889
// ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3860: LD_ADDR_EXP 40
3864: PUSH
3865: LD_EXP 40
3869: PPUSH
3870: LD_EXP 40
3874: PUSH
3875: LD_INT 1
3877: PLUS
3878: PPUSH
3879: LD_VAR 0 3
3883: PPUSH
3884: CALL_OW 1
3888: ST_TO_ADDR
// end ;
3889: GO 3769
3891: POP
3892: POP
// end ;
3893: LD_VAR 0 1
3897: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3898: LD_INT 0
3900: PPUSH
3901: PPUSH
3902: PPUSH
// uc_side := 3 ;
3903: LD_ADDR_OWVAR 20
3907: PUSH
3908: LD_INT 3
3910: ST_TO_ADDR
// uc_nation := 3 ;
3911: LD_ADDR_OWVAR 21
3915: PUSH
3916: LD_INT 3
3918: ST_TO_ADDR
// for i := 1 to 6 do
3919: LD_ADDR_VAR 0 2
3923: PUSH
3924: DOUBLE
3925: LD_INT 1
3927: DEC
3928: ST_TO_ADDR
3929: LD_INT 6
3931: PUSH
3932: FOR_TO
3933: IFFALSE 4012
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
3935: LD_INT 0
3937: PPUSH
3938: LD_INT 1
3940: PUSH
3941: LD_INT 4
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: PUSH
3948: LD_INT 1
3950: PPUSH
3951: LD_INT 2
3953: PPUSH
3954: CALL_OW 12
3958: ARRAY
3959: PPUSH
3960: LD_INT 0
3962: PPUSH
3963: CALL_OW 380
// un := CreateHuman ;
3967: LD_ADDR_VAR 0 3
3971: PUSH
3972: CALL_OW 44
3976: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
3977: LD_VAR 0 3
3981: PPUSH
3982: LD_INT 54
3984: PPUSH
3985: LD_INT 88
3987: PPUSH
3988: LD_INT 12
3990: PPUSH
3991: LD_INT 0
3993: PPUSH
3994: CALL_OW 50
// SetLives ( un , 1 ) ;
3998: LD_VAR 0 3
4002: PPUSH
4003: LD_INT 1
4005: PPUSH
4006: CALL_OW 234
// end ;
4010: GO 3932
4012: POP
4013: POP
// uc_side := 3 ;
4014: LD_ADDR_OWVAR 20
4018: PUSH
4019: LD_INT 3
4021: ST_TO_ADDR
// uc_nation := 0 ;
4022: LD_ADDR_OWVAR 21
4026: PUSH
4027: LD_INT 0
4029: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4030: LD_ADDR_EXP 42
4034: PUSH
4035: EMPTY
4036: ST_TO_ADDR
// apeEngGroup := [ ] ;
4037: LD_ADDR_EXP 43
4041: PUSH
4042: EMPTY
4043: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
4044: LD_ADDR_VAR 0 2
4048: PUSH
4049: DOUBLE
4050: LD_INT 1
4052: DEC
4053: ST_TO_ADDR
4054: LD_INT 4
4056: PUSH
4057: LD_INT 5
4059: PUSH
4060: LD_INT 6
4062: PUSH
4063: EMPTY
4064: LIST
4065: LIST
4066: LIST
4067: PUSH
4068: LD_OWVAR 67
4072: ARRAY
4073: PUSH
4074: FOR_TO
4075: IFFALSE 4189
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4077: LD_INT 0
4079: PPUSH
4080: LD_INT 15
4082: PPUSH
4083: LD_INT 3
4085: PUSH
4086: LD_INT 4
4088: PUSH
4089: LD_INT 5
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: LIST
4096: PUSH
4097: LD_OWVAR 67
4101: ARRAY
4102: PPUSH
4103: CALL_OW 380
// un := CreateHuman ;
4107: LD_ADDR_VAR 0 3
4111: PUSH
4112: CALL_OW 44
4116: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4117: LD_ADDR_EXP 42
4121: PUSH
4122: LD_EXP 42
4126: PPUSH
4127: LD_EXP 42
4131: PUSH
4132: LD_INT 1
4134: PLUS
4135: PPUSH
4136: LD_VAR 0 3
4140: PPUSH
4141: CALL_OW 1
4145: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4146: LD_VAR 0 3
4150: PPUSH
4151: LD_INT 0
4153: PPUSH
4154: LD_INT 5
4156: PPUSH
4157: CALL_OW 12
4161: PPUSH
4162: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4166: LD_VAR 0 3
4170: PPUSH
4171: LD_INT 56
4173: PPUSH
4174: LD_INT 82
4176: PPUSH
4177: LD_INT 6
4179: PPUSH
4180: LD_INT 0
4182: PPUSH
4183: CALL_OW 50
// end ;
4187: GO 4074
4189: POP
4190: POP
// for i := 1 to 2 do
4191: LD_ADDR_VAR 0 2
4195: PUSH
4196: DOUBLE
4197: LD_INT 1
4199: DEC
4200: ST_TO_ADDR
4201: LD_INT 2
4203: PUSH
4204: FOR_TO
4205: IFFALSE 4281
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4207: LD_INT 0
4209: PPUSH
4210: LD_INT 16
4212: PPUSH
4213: LD_INT 4
4215: PPUSH
4216: CALL_OW 380
// un := CreateHuman ;
4220: LD_ADDR_VAR 0 3
4224: PUSH
4225: CALL_OW 44
4229: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4230: LD_ADDR_EXP 43
4234: PUSH
4235: LD_EXP 43
4239: PPUSH
4240: LD_EXP 43
4244: PUSH
4245: LD_INT 1
4247: PLUS
4248: PPUSH
4249: LD_VAR 0 3
4253: PPUSH
4254: CALL_OW 1
4258: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4259: LD_VAR 0 3
4263: PPUSH
4264: LD_INT 51
4266: PPUSH
4267: LD_INT 77
4269: PPUSH
4270: CALL_OW 428
4274: PPUSH
4275: CALL_OW 52
// end ;
4279: GO 4204
4281: POP
4282: POP
// end ;
4283: LD_VAR 0 1
4287: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4288: LD_EXP 42
4292: PPUSH
4293: LD_INT 3
4295: PUSH
4296: LD_INT 24
4298: PUSH
4299: LD_INT 600
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PUSH
4310: LD_INT 3
4312: PUSH
4313: LD_INT 54
4315: PUSH
4316: EMPTY
4317: LIST
4318: PUSH
4319: EMPTY
4320: LIST
4321: LIST
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: PPUSH
4327: CALL_OW 72
4331: PUSH
4332: LD_INT 66
4334: PPUSH
4335: LD_INT 89
4337: PPUSH
4338: CALL_OW 428
4342: PPUSH
4343: CALL_OW 302
4347: AND
4348: IFFALSE 4433
4350: GO 4352
4352: DISABLE
4353: LD_INT 0
4355: PPUSH
// begin enable ;
4356: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4357: LD_ADDR_VAR 0 1
4361: PUSH
4362: LD_EXP 42
4366: PPUSH
4367: LD_INT 3
4369: PUSH
4370: LD_INT 24
4372: PUSH
4373: LD_INT 600
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: PUSH
4384: LD_INT 3
4386: PUSH
4387: LD_INT 54
4389: PUSH
4390: EMPTY
4391: LIST
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PPUSH
4401: CALL_OW 72
4405: PUSH
4406: FOR_IN
4407: IFFALSE 4431
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4409: LD_VAR 0 1
4413: PPUSH
4414: LD_INT 66
4416: PPUSH
4417: LD_INT 89
4419: PPUSH
4420: CALL_OW 428
4424: PPUSH
4425: CALL_OW 120
4429: GO 4406
4431: POP
4432: POP
// end ;
4433: PPOPN 1
4435: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4436: LD_INT 22
4438: PUSH
4439: LD_INT 2
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: PUSH
4446: LD_INT 92
4448: PUSH
4449: LD_INT 54
4451: PUSH
4452: LD_INT 77
4454: PUSH
4455: LD_INT 8
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: LIST
4462: LIST
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: PPUSH
4468: CALL_OW 69
4472: IFFALSE 4536
4474: GO 4476
4476: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4477: LD_EXP 43
4481: PPUSH
4482: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4486: LD_EXP 43
4490: PPUSH
4491: LD_INT 22
4493: PUSH
4494: LD_INT 2
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: PUSH
4501: LD_INT 92
4503: PUSH
4504: LD_INT 54
4506: PUSH
4507: LD_INT 77
4509: PUSH
4510: LD_INT 8
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PPUSH
4523: CALL_OW 69
4527: PUSH
4528: LD_INT 1
4530: ARRAY
4531: PPUSH
4532: CALL_OW 175
// end ;
4536: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag ; begin
4537: LD_INT 0
4539: PPUSH
4540: PPUSH
4541: PPUSH
4542: PPUSH
4543: PPUSH
4544: PPUSH
4545: PPUSH
4546: PPUSH
4547: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4548: LD_ADDR_VAR 0 3
4552: PUSH
4553: LD_INT 1
4555: PPUSH
4556: LD_INT 3
4558: PPUSH
4559: CALL_OW 12
4563: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4564: LD_ADDR_VAR 0 5
4568: PUSH
4569: LD_INT 16
4571: PUSH
4572: LD_INT 17
4574: PUSH
4575: LD_INT 19
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: LIST
4582: PUSH
4583: LD_VAR 0 3
4587: ARRAY
4588: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4589: LD_ADDR_VAR 0 7
4593: PUSH
4594: LD_INT 159
4596: PUSH
4597: LD_INT 25
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PUSH
4604: LD_INT 137
4606: PUSH
4607: LD_INT 37
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: PUSH
4614: LD_INT 123
4616: PUSH
4617: LD_INT 55
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: PUSH
4624: LD_INT 115
4626: PUSH
4627: LD_INT 71
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: PUSH
4634: LD_INT 106
4636: PUSH
4637: LD_INT 88
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: PUSH
4644: LD_INT 97
4646: PUSH
4647: LD_INT 114
4649: PUSH
4650: EMPTY
4651: LIST
4652: LIST
4653: PUSH
4654: LD_INT 75
4656: PUSH
4657: LD_INT 146
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: LIST
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: PUSH
4673: LD_INT 206
4675: PUSH
4676: LD_INT 135
4678: PUSH
4679: EMPTY
4680: LIST
4681: LIST
4682: PUSH
4683: LD_INT 184
4685: PUSH
4686: LD_INT 111
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: PUSH
4693: LD_INT 154
4695: PUSH
4696: LD_INT 97
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PUSH
4703: LD_INT 122
4705: PUSH
4706: LD_INT 80
4708: PUSH
4709: EMPTY
4710: LIST
4711: LIST
4712: PUSH
4713: LD_INT 109
4715: PUSH
4716: LD_INT 78
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: PUSH
4723: LD_INT 97
4725: PUSH
4726: LD_INT 113
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: PUSH
4733: LD_INT 75
4735: PUSH
4736: LD_INT 147
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: PUSH
4752: LD_INT 185
4754: PUSH
4755: LD_INT 72
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: PUSH
4762: LD_INT 171
4764: PUSH
4765: LD_INT 83
4767: PUSH
4768: EMPTY
4769: LIST
4770: LIST
4771: PUSH
4772: LD_INT 161
4774: PUSH
4775: LD_INT 99
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: PUSH
4782: LD_INT 125
4784: PUSH
4785: LD_INT 82
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: PUSH
4792: LD_INT 105
4794: PUSH
4795: LD_INT 90
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: LD_INT 96
4804: PUSH
4805: LD_INT 116
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: PUSH
4812: LD_INT 75
4814: PUSH
4815: LD_INT 147
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: PUSH
4836: LD_VAR 0 3
4840: ARRAY
4841: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4842: LD_ADDR_VAR 0 4
4846: PUSH
4847: LD_INT 4
4849: PUSH
4850: LD_INT 5
4852: PUSH
4853: LD_INT 3
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: PUSH
4861: LD_VAR 0 3
4865: ARRAY
4866: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4867: LD_ADDR_VAR 0 6
4871: PUSH
4872: LD_INT 22
4874: PUSH
4875: LD_INT 20
4877: PUSH
4878: LD_INT 21
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: LIST
4885: PUSH
4886: LD_VAR 0 3
4890: ARRAY
4891: ST_TO_ADDR
// for i := 1 to 2 do
4892: LD_ADDR_VAR 0 2
4896: PUSH
4897: DOUBLE
4898: LD_INT 1
4900: DEC
4901: ST_TO_ADDR
4902: LD_INT 2
4904: PUSH
4905: FOR_TO
4906: IFFALSE 4924
// EraseResourceArea ( i , outerSpawnArea ) ;
4908: LD_VAR 0 2
4912: PPUSH
4913: LD_VAR 0 6
4917: PPUSH
4918: CALL_OW 286
4922: GO 4905
4924: POP
4925: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
4926: LD_VAR 0 6
4930: PPUSH
4931: LD_INT 2
4933: PUSH
4934: LD_INT 21
4936: PUSH
4937: LD_INT 1
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: PUSH
4944: LD_INT 21
4946: PUSH
4947: LD_INT 2
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: PUSH
4954: LD_INT 21
4956: PUSH
4957: LD_INT 3
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: PPUSH
4970: CALL_OW 70
4974: IFFALSE 5189
// repeat wait ( 0 0$1 ) ;
4976: LD_INT 35
4978: PPUSH
4979: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
4983: LD_VAR 0 6
4987: PPUSH
4988: LD_INT 2
4990: PUSH
4991: LD_INT 21
4993: PUSH
4994: LD_INT 2
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: PUSH
5001: LD_INT 21
5003: PUSH
5004: LD_INT 3
5006: PUSH
5007: EMPTY
5008: LIST
5009: LIST
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: LIST
5015: PPUSH
5016: CALL_OW 70
5020: IFFALSE 5081
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5022: LD_ADDR_VAR 0 2
5026: PUSH
5027: LD_VAR 0 6
5031: PPUSH
5032: LD_INT 2
5034: PUSH
5035: LD_INT 21
5037: PUSH
5038: LD_INT 2
5040: PUSH
5041: EMPTY
5042: LIST
5043: LIST
5044: PUSH
5045: LD_INT 21
5047: PUSH
5048: LD_INT 3
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: LIST
5059: PPUSH
5060: CALL_OW 70
5064: PUSH
5065: FOR_IN
5066: IFFALSE 5079
// RemoveUnit ( i ) ;
5068: LD_VAR 0 2
5072: PPUSH
5073: CALL_OW 64
5077: GO 5065
5079: POP
5080: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5081: LD_VAR 0 6
5085: PPUSH
5086: LD_INT 21
5088: PUSH
5089: LD_INT 1
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PPUSH
5096: CALL_OW 70
5100: IFFALSE 5149
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5102: LD_ADDR_VAR 0 2
5106: PUSH
5107: LD_VAR 0 6
5111: PPUSH
5112: LD_INT 21
5114: PUSH
5115: LD_INT 1
5117: PUSH
5118: EMPTY
5119: LIST
5120: LIST
5121: PPUSH
5122: CALL_OW 70
5126: PUSH
5127: FOR_IN
5128: IFFALSE 5147
// ComMoveXY ( i , 113 , 53 ) ;
5130: LD_VAR 0 2
5134: PPUSH
5135: LD_INT 113
5137: PPUSH
5138: LD_INT 53
5140: PPUSH
5141: CALL_OW 111
5145: GO 5127
5147: POP
5148: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5149: LD_VAR 0 6
5153: PPUSH
5154: LD_INT 2
5156: PUSH
5157: LD_INT 21
5159: PUSH
5160: LD_INT 1
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PUSH
5167: LD_INT 21
5169: PUSH
5170: LD_INT 2
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: LIST
5181: PPUSH
5182: CALL_OW 70
5186: NOT
5187: IFFALSE 4976
// case convoyCounter of 1 .. 3 :
5189: LD_EXP 16
5193: PUSH
5194: LD_INT 1
5196: DOUBLE
5197: GREATEREQUAL
5198: IFFALSE 5206
5200: LD_INT 3
5202: DOUBLE
5203: LESSEQUAL
5204: IFTRUE 5208
5206: GO 5803
5208: POP
// begin uc_side := 3 ;
5209: LD_ADDR_OWVAR 20
5213: PUSH
5214: LD_INT 3
5216: ST_TO_ADDR
// uc_nation := 3 ;
5217: LD_ADDR_OWVAR 21
5221: PUSH
5222: LD_INT 3
5224: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] - convoyCounter do
5225: LD_ADDR_VAR 0 2
5229: PUSH
5230: DOUBLE
5231: LD_INT 1
5233: DEC
5234: ST_TO_ADDR
5235: LD_INT 5
5237: PUSH
5238: LD_INT 6
5240: PUSH
5241: LD_INT 7
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: LIST
5248: PUSH
5249: LD_OWVAR 67
5253: ARRAY
5254: PUSH
5255: LD_EXP 16
5259: MINUS
5260: PUSH
5261: FOR_TO
5262: IFFALSE 5449
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
5264: LD_INT 0
5266: PPUSH
5267: LD_INT 1
5269: PUSH
5270: LD_INT 1
5272: PUSH
5273: LD_INT 1
5275: PUSH
5276: LD_INT 4
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: LIST
5283: LIST
5284: PUSH
5285: LD_INT 1
5287: PPUSH
5288: LD_INT 4
5290: PPUSH
5291: CALL_OW 12
5295: ARRAY
5296: PPUSH
5297: LD_INT 4
5299: PUSH
5300: LD_INT 5
5302: PUSH
5303: LD_INT 6
5305: PUSH
5306: EMPTY
5307: LIST
5308: LIST
5309: LIST
5310: PUSH
5311: LD_OWVAR 67
5315: ARRAY
5316: PPUSH
5317: CALL_OW 380
// un := CreateHuman ;
5321: LD_ADDR_VAR 0 8
5325: PUSH
5326: CALL_OW 44
5330: ST_TO_ADDR
// SetDir ( un , dir ) ;
5331: LD_VAR 0 8
5335: PPUSH
5336: LD_VAR 0 4
5340: PPUSH
5341: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5345: LD_VAR 0 8
5349: PPUSH
5350: LD_VAR 0 5
5354: PPUSH
5355: LD_INT 0
5357: PPUSH
5358: CALL 61273 0 3
5362: IFFALSE 5447
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5364: LD_ADDR_EXP 41
5368: PUSH
5369: LD_EXP 41
5373: PPUSH
5374: LD_EXP 41
5378: PUSH
5379: LD_INT 1
5381: PLUS
5382: PPUSH
5383: LD_VAR 0 8
5387: PPUSH
5388: CALL_OW 1
5392: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5393: LD_VAR 0 8
5397: PPUSH
5398: LD_INT 1
5400: PPUSH
5401: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5405: LD_VAR 0 8
5409: PPUSH
5410: LD_VAR 0 7
5414: PUSH
5415: LD_INT 1
5417: ARRAY
5418: PUSH
5419: LD_INT 1
5421: ARRAY
5422: PPUSH
5423: LD_VAR 0 7
5427: PUSH
5428: LD_INT 1
5430: ARRAY
5431: PUSH
5432: LD_INT 2
5434: ARRAY
5435: PPUSH
5436: CALL_OW 111
// wait ( 0 0$2 ) ;
5440: LD_INT 70
5442: PPUSH
5443: CALL_OW 67
// end ; end ;
5447: GO 5261
5449: POP
5450: POP
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
5451: LD_ADDR_VAR 0 2
5455: PUSH
5456: DOUBLE
5457: LD_INT 1
5459: DEC
5460: ST_TO_ADDR
5461: LD_INT 3
5463: PUSH
5464: LD_INT 4
5466: PUSH
5467: LD_INT 4
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: LIST
5474: PUSH
5475: LD_OWVAR 67
5479: ARRAY
5480: PUSH
5481: FOR_TO
5482: IFFALSE 5799
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5484: LD_INT 3
5486: PPUSH
5487: LD_INT 3
5489: PPUSH
5490: LD_INT 21
5492: PUSH
5493: LD_INT 22
5495: PUSH
5496: LD_INT 23
5498: PUSH
5499: LD_INT 24
5501: PUSH
5502: LD_INT 24
5504: PUSH
5505: EMPTY
5506: LIST
5507: LIST
5508: LIST
5509: LIST
5510: LIST
5511: PUSH
5512: LD_OWVAR 67
5516: PPUSH
5517: LD_OWVAR 67
5521: PUSH
5522: LD_INT 2
5524: PLUS
5525: PPUSH
5526: CALL_OW 12
5530: ARRAY
5531: PPUSH
5532: LD_INT 1
5534: PPUSH
5535: LD_INT 1
5537: PPUSH
5538: LD_INT 42
5540: PUSH
5541: LD_INT 44
5543: PUSH
5544: LD_INT 43
5546: PUSH
5547: LD_INT 44
5549: PUSH
5550: LD_INT 46
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: PUSH
5560: LD_INT 1
5562: PPUSH
5563: LD_OWVAR 67
5567: PUSH
5568: LD_INT 2
5570: PLUS
5571: PPUSH
5572: CALL_OW 12
5576: ARRAY
5577: PPUSH
5578: LD_INT 90
5580: PPUSH
5581: CALL 427 0 7
// un := CreateVehicle ;
5585: LD_ADDR_VAR 0 8
5589: PUSH
5590: CALL_OW 45
5594: ST_TO_ADDR
// SetDir ( un , dir ) ;
5595: LD_VAR 0 8
5599: PPUSH
5600: LD_VAR 0 4
5604: PPUSH
5605: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5609: LD_VAR 0 8
5613: PPUSH
5614: LD_VAR 0 5
5618: PPUSH
5619: LD_INT 0
5621: PPUSH
5622: CALL 61273 0 3
5626: IFFALSE 5797
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5628: LD_ADDR_EXP 41
5632: PUSH
5633: LD_EXP 41
5637: PPUSH
5638: LD_EXP 41
5642: PUSH
5643: LD_INT 1
5645: PLUS
5646: PPUSH
5647: LD_VAR 0 8
5651: PPUSH
5652: CALL_OW 1
5656: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
5657: LD_INT 0
5659: PPUSH
5660: LD_INT 3
5662: PUSH
5663: LD_INT 4
5665: PUSH
5666: LD_INT 5
5668: PUSH
5669: EMPTY
5670: LIST
5671: LIST
5672: LIST
5673: PUSH
5674: LD_OWVAR 67
5678: ARRAY
5679: PPUSH
5680: CALL_OW 383
// un := CreateHuman ;
5684: LD_ADDR_VAR 0 8
5688: PUSH
5689: CALL_OW 44
5693: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5694: LD_VAR 0 8
5698: PPUSH
5699: LD_EXP 41
5703: PUSH
5704: LD_EXP 41
5708: ARRAY
5709: PPUSH
5710: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5714: LD_ADDR_EXP 41
5718: PUSH
5719: LD_EXP 41
5723: PPUSH
5724: LD_EXP 41
5728: PUSH
5729: LD_INT 1
5731: PLUS
5732: PPUSH
5733: LD_VAR 0 8
5737: PPUSH
5738: CALL_OW 1
5742: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5743: LD_VAR 0 8
5747: PPUSH
5748: LD_INT 1
5750: PPUSH
5751: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5755: LD_VAR 0 8
5759: PPUSH
5760: LD_VAR 0 7
5764: PUSH
5765: LD_INT 1
5767: ARRAY
5768: PUSH
5769: LD_INT 1
5771: ARRAY
5772: PPUSH
5773: LD_VAR 0 7
5777: PUSH
5778: LD_INT 1
5780: ARRAY
5781: PUSH
5782: LD_INT 2
5784: ARRAY
5785: PPUSH
5786: CALL_OW 111
// wait ( 0 0$3 ) ;
5790: LD_INT 105
5792: PPUSH
5793: CALL_OW 67
// end ; end ;
5797: GO 5481
5799: POP
5800: POP
// end ; 4 .. 7 :
5801: GO 6356
5803: LD_INT 4
5805: DOUBLE
5806: GREATEREQUAL
5807: IFFALSE 5815
5809: LD_INT 7
5811: DOUBLE
5812: LESSEQUAL
5813: IFTRUE 5817
5815: GO 6355
5817: POP
// begin uc_side := 3 ;
5818: LD_ADDR_OWVAR 20
5822: PUSH
5823: LD_INT 3
5825: ST_TO_ADDR
// uc_nation := 3 ;
5826: LD_ADDR_OWVAR 21
5830: PUSH
5831: LD_INT 3
5833: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
5834: LD_ADDR_VAR 0 2
5838: PUSH
5839: DOUBLE
5840: LD_INT 1
5842: DEC
5843: ST_TO_ADDR
5844: LD_INT 2
5846: PUSH
5847: LD_INT 3
5849: PUSH
5850: LD_INT 4
5852: PUSH
5853: EMPTY
5854: LIST
5855: LIST
5856: LIST
5857: PUSH
5858: LD_OWVAR 67
5862: ARRAY
5863: PUSH
5864: FOR_TO
5865: IFFALSE 6025
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
5867: LD_INT 0
5869: PPUSH
5870: LD_INT 1
5872: PPUSH
5873: LD_INT 4
5875: PUSH
5876: LD_INT 5
5878: PUSH
5879: LD_INT 6
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: LIST
5886: PUSH
5887: LD_OWVAR 67
5891: ARRAY
5892: PPUSH
5893: CALL_OW 380
// un := CreateHuman ;
5897: LD_ADDR_VAR 0 8
5901: PUSH
5902: CALL_OW 44
5906: ST_TO_ADDR
// SetDir ( un , dir ) ;
5907: LD_VAR 0 8
5911: PPUSH
5912: LD_VAR 0 4
5916: PPUSH
5917: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5921: LD_VAR 0 8
5925: PPUSH
5926: LD_VAR 0 5
5930: PPUSH
5931: LD_INT 0
5933: PPUSH
5934: CALL 61273 0 3
5938: IFFALSE 6023
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5940: LD_ADDR_EXP 41
5944: PUSH
5945: LD_EXP 41
5949: PPUSH
5950: LD_EXP 41
5954: PUSH
5955: LD_INT 1
5957: PLUS
5958: PPUSH
5959: LD_VAR 0 8
5963: PPUSH
5964: CALL_OW 1
5968: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5969: LD_VAR 0 8
5973: PPUSH
5974: LD_INT 1
5976: PPUSH
5977: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5981: LD_VAR 0 8
5985: PPUSH
5986: LD_VAR 0 7
5990: PUSH
5991: LD_INT 1
5993: ARRAY
5994: PUSH
5995: LD_INT 1
5997: ARRAY
5998: PPUSH
5999: LD_VAR 0 7
6003: PUSH
6004: LD_INT 1
6006: ARRAY
6007: PUSH
6008: LD_INT 2
6010: ARRAY
6011: PPUSH
6012: CALL_OW 111
// wait ( 0 0$2 ) ;
6016: LD_INT 70
6018: PPUSH
6019: CALL_OW 67
// end ; end ;
6023: GO 5864
6025: POP
6026: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
6027: LD_ADDR_VAR 0 2
6031: PUSH
6032: DOUBLE
6033: LD_INT 1
6035: DEC
6036: ST_TO_ADDR
6037: LD_INT 2
6039: PUSH
6040: LD_INT 3
6042: PUSH
6043: LD_INT 3
6045: PUSH
6046: EMPTY
6047: LIST
6048: LIST
6049: LIST
6050: PUSH
6051: LD_OWVAR 67
6055: ARRAY
6056: PUSH
6057: FOR_TO
6058: IFFALSE 6351
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6060: LD_INT 3
6062: PPUSH
6063: LD_INT 3
6065: PPUSH
6066: LD_INT 21
6068: PUSH
6069: LD_INT 22
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: PUSH
6076: LD_INT 1
6078: PPUSH
6079: LD_INT 2
6081: PPUSH
6082: CALL_OW 12
6086: ARRAY
6087: PPUSH
6088: LD_INT 1
6090: PPUSH
6091: LD_INT 1
6093: PPUSH
6094: LD_INT 42
6096: PUSH
6097: LD_INT 44
6099: PUSH
6100: LD_INT 43
6102: PUSH
6103: LD_INT 44
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: PUSH
6112: LD_INT 1
6114: PPUSH
6115: LD_OWVAR 67
6119: PUSH
6120: LD_INT 1
6122: PLUS
6123: PPUSH
6124: CALL_OW 12
6128: ARRAY
6129: PPUSH
6130: LD_INT 90
6132: PPUSH
6133: CALL 427 0 7
// un := CreateVehicle ;
6137: LD_ADDR_VAR 0 8
6141: PUSH
6142: CALL_OW 45
6146: ST_TO_ADDR
// SetDir ( un , dir ) ;
6147: LD_VAR 0 8
6151: PPUSH
6152: LD_VAR 0 4
6156: PPUSH
6157: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6161: LD_VAR 0 8
6165: PPUSH
6166: LD_VAR 0 5
6170: PPUSH
6171: LD_INT 0
6173: PPUSH
6174: CALL 61273 0 3
6178: IFFALSE 6349
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6180: LD_ADDR_EXP 41
6184: PUSH
6185: LD_EXP 41
6189: PPUSH
6190: LD_EXP 41
6194: PUSH
6195: LD_INT 1
6197: PLUS
6198: PPUSH
6199: LD_VAR 0 8
6203: PPUSH
6204: CALL_OW 1
6208: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
6209: LD_INT 0
6211: PPUSH
6212: LD_INT 3
6214: PUSH
6215: LD_INT 4
6217: PUSH
6218: LD_INT 5
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: LIST
6225: PUSH
6226: LD_OWVAR 67
6230: ARRAY
6231: PPUSH
6232: CALL_OW 383
// un := CreateHuman ;
6236: LD_ADDR_VAR 0 8
6240: PUSH
6241: CALL_OW 44
6245: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6246: LD_VAR 0 8
6250: PPUSH
6251: LD_EXP 41
6255: PUSH
6256: LD_EXP 41
6260: ARRAY
6261: PPUSH
6262: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6266: LD_ADDR_EXP 41
6270: PUSH
6271: LD_EXP 41
6275: PPUSH
6276: LD_EXP 41
6280: PUSH
6281: LD_INT 1
6283: PLUS
6284: PPUSH
6285: LD_VAR 0 8
6289: PPUSH
6290: CALL_OW 1
6294: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6295: LD_VAR 0 8
6299: PPUSH
6300: LD_INT 1
6302: PPUSH
6303: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6307: LD_VAR 0 8
6311: PPUSH
6312: LD_VAR 0 7
6316: PUSH
6317: LD_INT 1
6319: ARRAY
6320: PUSH
6321: LD_INT 1
6323: ARRAY
6324: PPUSH
6325: LD_VAR 0 7
6329: PUSH
6330: LD_INT 1
6332: ARRAY
6333: PUSH
6334: LD_INT 2
6336: ARRAY
6337: PPUSH
6338: CALL_OW 111
// wait ( 0 0$2 ) ;
6342: LD_INT 70
6344: PPUSH
6345: CALL_OW 67
// end ; end ;
6349: GO 6057
6351: POP
6352: POP
// end ; end ;
6353: GO 6356
6355: POP
// repeat wait ( 0 0$1 ) ;
6356: LD_INT 35
6358: PPUSH
6359: CALL_OW 67
// for un in ruConvoySquad do
6363: LD_ADDR_VAR 0 8
6367: PUSH
6368: LD_EXP 41
6372: PUSH
6373: FOR_IN
6374: IFFALSE 6869
// begin if IsInArea ( un , westSouthOutArea ) then
6376: LD_VAR 0 8
6380: PPUSH
6381: LD_INT 18
6383: PPUSH
6384: CALL_OW 308
6388: IFFALSE 6467
// begin if GetType ( un ) = unit_vehicle then
6390: LD_VAR 0 8
6394: PPUSH
6395: CALL_OW 247
6399: PUSH
6400: LD_INT 2
6402: EQUAL
6403: IFFALSE 6426
// ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6405: LD_ADDR_EXP 41
6409: PUSH
6410: LD_EXP 41
6414: PUSH
6415: LD_VAR 0 8
6419: PPUSH
6420: CALL_OW 311
6424: DIFF
6425: ST_TO_ADDR
// convoySavedCounter := convoySavedCounter + 1 ;
6426: LD_ADDR_EXP 15
6430: PUSH
6431: LD_EXP 15
6435: PUSH
6436: LD_INT 1
6438: PLUS
6439: ST_TO_ADDR
// RemoveUnit ( un ) ;
6440: LD_VAR 0 8
6444: PPUSH
6445: CALL_OW 64
// ruConvoySquad := ruConvoySquad diff un ;
6449: LD_ADDR_EXP 41
6453: PUSH
6454: LD_EXP 41
6458: PUSH
6459: LD_VAR 0 8
6463: DIFF
6464: ST_TO_ADDR
// break ;
6465: GO 6869
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6467: LD_VAR 0 8
6471: PPUSH
6472: CALL_OW 305
6476: NOT
6477: PUSH
6478: LD_VAR 0 8
6482: PPUSH
6483: CALL_OW 310
6487: NOT
6488: AND
6489: IFFALSE 6507
// ruConvoySquad := ruConvoySquad diff un ;
6491: LD_ADDR_EXP 41
6495: PUSH
6496: LD_EXP 41
6500: PUSH
6501: LD_VAR 0 8
6505: DIFF
6506: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6507: LD_VAR 0 8
6511: PPUSH
6512: CALL_OW 302
6516: PUSH
6517: LD_VAR 0 8
6521: PPUSH
6522: CALL_OW 314
6526: NOT
6527: AND
6528: IFFALSE 6867
// begin tag := GetTag ( un ) ;
6530: LD_ADDR_VAR 0 9
6534: PUSH
6535: LD_VAR 0 8
6539: PPUSH
6540: CALL_OW 110
6544: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6545: LD_VAR 0 8
6549: PPUSH
6550: LD_VAR 0 7
6554: PUSH
6555: LD_VAR 0 9
6559: PUSH
6560: LD_INT 1
6562: PLUS
6563: ARRAY
6564: PUSH
6565: LD_INT 1
6567: ARRAY
6568: PPUSH
6569: LD_VAR 0 7
6573: PUSH
6574: LD_VAR 0 9
6578: PUSH
6579: LD_INT 1
6581: PLUS
6582: ARRAY
6583: PUSH
6584: LD_INT 2
6586: ARRAY
6587: PPUSH
6588: CALL_OW 297
6592: PUSH
6593: LD_INT 6
6595: LESS
6596: IFFALSE 6707
// begin SetTag ( un , tag + 1 ) ;
6598: LD_VAR 0 8
6602: PPUSH
6603: LD_VAR 0 9
6607: PUSH
6608: LD_INT 1
6610: PLUS
6611: PPUSH
6612: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6616: LD_VAR 0 8
6620: PPUSH
6621: CALL_OW 247
6625: PUSH
6626: LD_INT 2
6628: EQUAL
6629: PUSH
6630: LD_VAR 0 8
6634: PPUSH
6635: CALL_OW 257
6639: PUSH
6640: LD_INT 3
6642: EQUAL
6643: OR
6644: IFFALSE 6705
// begin AddComWait ( un , 0 0$4 ) ;
6646: LD_VAR 0 8
6650: PPUSH
6651: LD_INT 140
6653: PPUSH
6654: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6658: LD_VAR 0 8
6662: PPUSH
6663: LD_VAR 0 7
6667: PUSH
6668: LD_VAR 0 9
6672: PUSH
6673: LD_INT 1
6675: PLUS
6676: ARRAY
6677: PUSH
6678: LD_INT 1
6680: ARRAY
6681: PPUSH
6682: LD_VAR 0 7
6686: PUSH
6687: LD_VAR 0 9
6691: PUSH
6692: LD_INT 1
6694: PLUS
6695: ARRAY
6696: PUSH
6697: LD_INT 2
6699: ARRAY
6700: PPUSH
6701: CALL_OW 174
// end ; end else
6705: GO 6867
// begin if GetClass ( un ) = 4 and UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6707: LD_VAR 0 8
6711: PPUSH
6712: CALL_OW 257
6716: PUSH
6717: LD_INT 4
6719: EQUAL
6720: PUSH
6721: LD_EXP 41
6725: PPUSH
6726: LD_INT 21
6728: PUSH
6729: LD_INT 1
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: PUSH
6736: LD_INT 3
6738: PUSH
6739: LD_INT 24
6741: PUSH
6742: LD_INT 1000
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PPUSH
6757: CALL_OW 72
6761: AND
6762: IFFALSE 6820
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
6764: LD_VAR 0 8
6768: PPUSH
6769: LD_EXP 41
6773: PPUSH
6774: LD_INT 21
6776: PUSH
6777: LD_INT 1
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: PUSH
6784: LD_INT 3
6786: PUSH
6787: LD_INT 24
6789: PUSH
6790: LD_INT 1000
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: PPUSH
6805: CALL_OW 72
6809: PUSH
6810: LD_INT 1
6812: ARRAY
6813: PPUSH
6814: CALL_OW 128
6818: GO 6867
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6820: LD_VAR 0 8
6824: PPUSH
6825: LD_VAR 0 7
6829: PUSH
6830: LD_VAR 0 9
6834: PUSH
6835: LD_INT 1
6837: PLUS
6838: ARRAY
6839: PUSH
6840: LD_INT 1
6842: ARRAY
6843: PPUSH
6844: LD_VAR 0 7
6848: PUSH
6849: LD_VAR 0 9
6853: PUSH
6854: LD_INT 1
6856: PLUS
6857: ARRAY
6858: PUSH
6859: LD_INT 2
6861: ARRAY
6862: PPUSH
6863: CALL_OW 114
// end ; end ; end ;
6867: GO 6373
6869: POP
6870: POP
// until not ruConvoySquad ;
6871: LD_EXP 41
6875: NOT
6876: IFFALSE 6356
// end ;
6878: LD_VAR 0 1
6882: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
6883: LD_EXP 16
6887: PUSH
6888: LD_INT 3
6890: PPUSH
6891: LD_INT 5
6893: PPUSH
6894: CALL_OW 12
6898: LESS
6899: PUSH
6900: LD_EXP 41
6904: NOT
6905: AND
6906: PUSH
6907: LD_OWVAR 67
6911: PUSH
6912: LD_INT 1
6914: GREATER
6915: AND
6916: IFFALSE 7304
6918: GO 6920
6920: DISABLE
6921: LD_INT 0
6923: PPUSH
6924: PPUSH
6925: PPUSH
// begin uc_side := 3 ;
6926: LD_ADDR_OWVAR 20
6930: PUSH
6931: LD_INT 3
6933: ST_TO_ADDR
// uc_nation := 3 ;
6934: LD_ADDR_OWVAR 21
6938: PUSH
6939: LD_INT 3
6941: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6942: LD_ADDR_VAR 0 1
6946: PUSH
6947: DOUBLE
6948: LD_INT 1
6950: DEC
6951: ST_TO_ADDR
6952: LD_INT 2
6954: PUSH
6955: LD_INT 3
6957: PUSH
6958: LD_INT 4
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: LIST
6965: PUSH
6966: LD_OWVAR 67
6970: ARRAY
6971: PUSH
6972: FOR_TO
6973: IFFALSE 7225
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
6975: LD_INT 3
6977: PPUSH
6978: LD_INT 3
6980: PPUSH
6981: LD_INT 21
6983: PUSH
6984: LD_INT 22
6986: PUSH
6987: LD_INT 23
6989: PUSH
6990: LD_INT 24
6992: PUSH
6993: LD_INT 24
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: PUSH
7003: LD_OWVAR 67
7007: PPUSH
7008: LD_OWVAR 67
7012: PUSH
7013: LD_INT 2
7015: PLUS
7016: PPUSH
7017: CALL_OW 12
7021: ARRAY
7022: PPUSH
7023: LD_INT 1
7025: PPUSH
7026: LD_INT 1
7028: PPUSH
7029: LD_INT 42
7031: PUSH
7032: LD_INT 44
7034: PUSH
7035: LD_INT 43
7037: PUSH
7038: LD_INT 44
7040: PUSH
7041: LD_INT 46
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: PUSH
7051: LD_INT 1
7053: PPUSH
7054: LD_OWVAR 67
7058: PUSH
7059: LD_INT 2
7061: PLUS
7062: PPUSH
7063: CALL_OW 12
7067: ARRAY
7068: PPUSH
7069: LD_INT 90
7071: PPUSH
7072: CALL 427 0 7
// un := CreateVehicle ;
7076: LD_ADDR_VAR 0 3
7080: PUSH
7081: CALL_OW 45
7085: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7086: LD_VAR 0 3
7090: PPUSH
7091: LD_INT 0
7093: PPUSH
7094: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7098: LD_VAR 0 3
7102: PPUSH
7103: LD_INT 23
7105: PPUSH
7106: LD_INT 0
7108: PPUSH
7109: CALL 61273 0 3
7113: IFFALSE 7223
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7115: LD_ADDR_VAR 0 2
7119: PUSH
7120: LD_VAR 0 2
7124: PPUSH
7125: LD_VAR 0 2
7129: PUSH
7130: LD_INT 1
7132: PLUS
7133: PPUSH
7134: LD_VAR 0 3
7138: PPUSH
7139: CALL_OW 1
7143: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
7144: LD_INT 0
7146: PPUSH
7147: LD_INT 3
7149: PUSH
7150: LD_INT 4
7152: PUSH
7153: LD_INT 5
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: LIST
7160: PUSH
7161: LD_OWVAR 67
7165: ARRAY
7166: PPUSH
7167: CALL_OW 383
// un := CreateHuman ;
7171: LD_ADDR_VAR 0 3
7175: PUSH
7176: CALL_OW 44
7180: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7181: LD_VAR 0 3
7185: PPUSH
7186: LD_VAR 0 2
7190: PUSH
7191: LD_VAR 0 2
7195: ARRAY
7196: PPUSH
7197: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7201: LD_VAR 0 3
7205: PPUSH
7206: LD_INT 80
7208: PPUSH
7209: LD_INT 139
7211: PPUSH
7212: CALL_OW 111
// wait ( 0 0$3 ) ;
7216: LD_INT 105
7218: PPUSH
7219: CALL_OW 67
// end ; end ;
7223: GO 6972
7225: POP
7226: POP
// for i in tmp do
7227: LD_ADDR_VAR 0 1
7231: PUSH
7232: LD_VAR 0 2
7236: PUSH
7237: FOR_IN
7238: IFFALSE 7302
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7240: LD_VAR 0 1
7244: PPUSH
7245: LD_INT 101
7247: PPUSH
7248: LD_INT 102
7250: PPUSH
7251: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7255: LD_VAR 0 1
7259: PPUSH
7260: LD_INT 110
7262: PPUSH
7263: LD_INT 78
7265: PPUSH
7266: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7270: LD_VAR 0 1
7274: PPUSH
7275: LD_INT 75
7277: PPUSH
7278: LD_INT 101
7280: PPUSH
7281: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7285: LD_VAR 0 1
7289: PPUSH
7290: LD_INT 57
7292: PPUSH
7293: LD_INT 83
7295: PPUSH
7296: CALL_OW 174
// end ;
7300: GO 7237
7302: POP
7303: POP
// end ; end_of_file
7304: PPOPN 3
7306: END
// on UnitDestroyed ( un ) do begin if un = Heike then
7307: LD_VAR 0 1
7311: PUSH
7312: LD_EXP 21
7316: EQUAL
7317: IFFALSE 7326
// YouLost ( Heike ) ;
7319: LD_STRING Heike
7321: PPUSH
7322: CALL_OW 104
// if un in apeSoldGroup then
7326: LD_VAR 0 1
7330: PUSH
7331: LD_EXP 42
7335: IN
7336: IFFALSE 7354
// apeSoldGroup := apeSoldGroup diff un ;
7338: LD_ADDR_EXP 42
7342: PUSH
7343: LD_EXP 42
7347: PUSH
7348: LD_VAR 0 1
7352: DIFF
7353: ST_TO_ADDR
// if un in apeEngGroup then
7354: LD_VAR 0 1
7358: PUSH
7359: LD_EXP 43
7363: IN
7364: IFFALSE 7382
// apeEngGroup := apeEngGroup diff un ;
7366: LD_ADDR_EXP 43
7370: PUSH
7371: LD_EXP 43
7375: PUSH
7376: LD_VAR 0 1
7380: DIFF
7381: ST_TO_ADDR
// if un in oilBaseGuard then
7382: LD_VAR 0 1
7386: PUSH
7387: LD_EXP 38
7391: IN
7392: IFFALSE 7410
// oilBaseGuard := oilBaseGuard diff un ;
7394: LD_ADDR_EXP 38
7398: PUSH
7399: LD_EXP 38
7403: PUSH
7404: LD_VAR 0 1
7408: DIFF
7409: ST_TO_ADDR
// if un in ruNorthGroup then
7410: LD_VAR 0 1
7414: PUSH
7415: LD_EXP 39
7419: IN
7420: IFFALSE 7438
// ruNorthGroup := ruNorthGroup diff un ;
7422: LD_ADDR_EXP 39
7426: PUSH
7427: LD_EXP 39
7431: PUSH
7432: LD_VAR 0 1
7436: DIFF
7437: ST_TO_ADDR
// if un in ruSouthGroup then
7438: LD_VAR 0 1
7442: PUSH
7443: LD_EXP 40
7447: IN
7448: IFFALSE 7466
// ruSouthGroup := ruSouthGroup diff un ;
7450: LD_ADDR_EXP 40
7454: PUSH
7455: LD_EXP 40
7459: PUSH
7460: LD_VAR 0 1
7464: DIFF
7465: ST_TO_ADDR
// if un in ruConvoySquad then
7466: LD_VAR 0 1
7470: PUSH
7471: LD_EXP 41
7475: IN
7476: IFFALSE 7494
// ruConvoySquad := ruConvoySquad diff un ;
7478: LD_ADDR_EXP 41
7482: PUSH
7483: LD_EXP 41
7487: PUSH
7488: LD_VAR 0 1
7492: DIFF
7493: ST_TO_ADDR
// end ;
7494: PPOPN 1
7496: END
// on VehicleConstructed ( veh , fac ) do begin if GetWeapon ( veh ) = ar_radar then
7497: LD_VAR 0 1
7501: PPUSH
7502: CALL_OW 264
7506: PUSH
7507: LD_INT 30
7509: EQUAL
7510: IFFALSE 7520
// radarConstructed := true ;
7512: LD_ADDR_EXP 13
7516: PUSH
7517: LD_INT 1
7519: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
7520: LD_VAR 0 1
7524: PPUSH
7525: CALL_OW 264
7529: PUSH
7530: LD_INT 26
7532: EQUAL
7533: IFFALSE 7543
// flamethrowerBuilt := true ;
7535: LD_ADDR_EXP 20
7539: PUSH
7540: LD_INT 1
7542: ST_TO_ADDR
// end ;
7543: PPOPN 2
7545: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
7546: LD_ADDR_EXP 18
7550: PUSH
7551: LD_EXP 18
7555: PUSH
7556: LD_INT 1
7558: PLUS
7559: ST_TO_ADDR
// end ; end_of_file
7560: PPOPN 4
7562: END
// export function Action ; var i , un , veh , tmp ; begin
7563: LD_INT 0
7565: PPUSH
7566: PPUSH
7567: PPUSH
7568: PPUSH
7569: PPUSH
// InGameOn ;
7570: CALL_OW 8
// music_nat := 2 ;
7574: LD_ADDR_OWVAR 71
7578: PUSH
7579: LD_INT 2
7581: ST_TO_ADDR
// music_class := 0 ;
7582: LD_ADDR_OWVAR 72
7586: PUSH
7587: LD_INT 0
7589: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
7590: LD_INT 7
7592: PPUSH
7593: LD_INT 6
7595: PPUSH
7596: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 20 ) ;
7600: LD_INT 7
7602: PPUSH
7603: LD_INT 6
7605: PPUSH
7606: LD_INT 2
7608: PPUSH
7609: LD_INT 20
7611: NEG
7612: PPUSH
7613: CALL 1211 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Aviradze ] ;
7617: LD_ADDR_VAR 0 5
7621: PUSH
7622: LD_EXP 21
7626: PUSH
7627: LD_EXP 22
7631: PUSH
7632: LD_EXP 23
7636: PUSH
7637: LD_EXP 24
7641: PUSH
7642: LD_EXP 25
7646: PUSH
7647: LD_EXP 26
7651: PUSH
7652: LD_EXP 27
7656: PUSH
7657: LD_EXP 28
7661: PUSH
7662: LD_EXP 33
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: ST_TO_ADDR
// tmp := tmp diff 0 ;
7678: LD_ADDR_VAR 0 5
7682: PUSH
7683: LD_VAR 0 5
7687: PUSH
7688: LD_INT 0
7690: DIFF
7691: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
7692: LD_ADDR_VAR 0 5
7696: PUSH
7697: LD_VAR 0 5
7701: PPUSH
7702: LD_INT 3
7704: PPUSH
7705: CALL 60984 0 2
7709: ST_TO_ADDR
// for i in heikeVehicles do
7710: LD_ADDR_VAR 0 2
7714: PUSH
7715: LD_EXP 35
7719: PUSH
7720: FOR_IN
7721: IFFALSE 7920
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
7723: LD_INT 5
7725: PPUSH
7726: LD_VAR 0 2
7730: PUSH
7731: LD_INT 5
7733: ARRAY
7734: PPUSH
7735: LD_VAR 0 2
7739: PUSH
7740: LD_INT 1
7742: ARRAY
7743: PPUSH
7744: LD_VAR 0 2
7748: PUSH
7749: LD_INT 2
7751: ARRAY
7752: PPUSH
7753: LD_VAR 0 2
7757: PUSH
7758: LD_INT 3
7760: ARRAY
7761: PPUSH
7762: LD_VAR 0 2
7766: PUSH
7767: LD_INT 4
7769: ARRAY
7770: PPUSH
7771: LD_INT 34
7773: PPUSH
7774: CALL 427 0 7
// veh := CreateVehicle ;
7778: LD_ADDR_VAR 0 4
7782: PUSH
7783: CALL_OW 45
7787: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
7788: LD_VAR 0 2
7792: PUSH
7793: LD_INT 4
7795: ARRAY
7796: PUSH
7797: LD_INT 51
7799: PUSH
7800: LD_INT 32
7802: PUSH
7803: LD_INT 12
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: LIST
7810: IN
7811: IFFALSE 7891
// begin if i [ 7 ] [ 1 ] then
7813: LD_VAR 0 2
7817: PUSH
7818: LD_INT 7
7820: ARRAY
7821: PUSH
7822: LD_INT 1
7824: ARRAY
7825: IFFALSE 7852
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
7827: LD_VAR 0 4
7831: PPUSH
7832: LD_INT 1
7834: PPUSH
7835: LD_VAR 0 2
7839: PUSH
7840: LD_INT 7
7842: ARRAY
7843: PUSH
7844: LD_INT 1
7846: ARRAY
7847: PPUSH
7848: CALL_OW 291
// if i [ 7 ] [ 2 ] then
7852: LD_VAR 0 2
7856: PUSH
7857: LD_INT 7
7859: ARRAY
7860: PUSH
7861: LD_INT 2
7863: ARRAY
7864: IFFALSE 7891
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
7866: LD_VAR 0 4
7870: PPUSH
7871: LD_INT 2
7873: PPUSH
7874: LD_VAR 0 2
7878: PUSH
7879: LD_INT 7
7881: ARRAY
7882: PUSH
7883: LD_INT 2
7885: ARRAY
7886: PPUSH
7887: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
7891: LD_VAR 0 4
7895: PPUSH
7896: LD_INT 2
7898: PPUSH
7899: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
7903: LD_VAR 0 4
7907: PPUSH
7908: LD_INT 4
7910: PPUSH
7911: LD_INT 0
7913: PPUSH
7914: CALL_OW 49
// end ;
7918: GO 7720
7920: POP
7921: POP
// if tmp then
7922: LD_VAR 0 5
7926: IFFALSE 7981
// for i in tmp union heikeApes do
7928: LD_ADDR_VAR 0 2
7932: PUSH
7933: LD_VAR 0 5
7937: PUSH
7938: LD_EXP 36
7942: UNION
7943: PUSH
7944: FOR_IN
7945: IFFALSE 7979
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
7947: LD_VAR 0 2
7951: PPUSH
7952: LD_INT 5
7954: PPUSH
7955: LD_INT 0
7957: PPUSH
7958: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
7962: LD_VAR 0 2
7966: PPUSH
7967: LD_INT 26
7969: PPUSH
7970: LD_INT 9
7972: PPUSH
7973: CALL_OW 118
// end ;
7977: GO 7944
7979: POP
7980: POP
// if heikeSecondSquad then
7981: LD_EXP 34
7985: IFFALSE 8034
// for i in heikeSecondSquad do
7987: LD_ADDR_VAR 0 2
7991: PUSH
7992: LD_EXP 34
7996: PUSH
7997: FOR_IN
7998: IFFALSE 8032
// begin PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8000: LD_VAR 0 2
8004: PPUSH
8005: LD_INT 6
8007: PPUSH
8008: LD_INT 0
8010: PPUSH
8011: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8015: LD_VAR 0 2
8019: PPUSH
8020: LD_INT 26
8022: PPUSH
8023: LD_INT 9
8025: PPUSH
8026: CALL_OW 118
// end ;
8030: GO 7997
8032: POP
8033: POP
// if heikeApes then
8034: LD_EXP 36
8038: IFFALSE 8081
// for i in heikeApes do
8040: LD_ADDR_VAR 0 2
8044: PUSH
8045: LD_EXP 36
8049: PUSH
8050: FOR_IN
8051: IFFALSE 8079
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
8053: LD_VAR 0 2
8057: PPUSH
8058: LD_INT 7
8060: PPUSH
8061: LD_INT 0
8063: PPUSH
8064: CALL_OW 49
// ComHold ( i ) ;
8068: LD_VAR 0 2
8072: PPUSH
8073: CALL_OW 140
// end ;
8077: GO 8050
8079: POP
8080: POP
// if Kurt then
8081: LD_EXP 32
8085: IFFALSE 8117
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
8087: LD_EXP 32
8091: PPUSH
8092: LD_INT 8
8094: PPUSH
8095: LD_INT 0
8097: PPUSH
8098: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
8102: LD_EXP 32
8106: PPUSH
8107: LD_INT 42
8109: PPUSH
8110: LD_INT 32
8112: PPUSH
8113: CALL_OW 118
// end ; Say ( Heike , DH-Start-1 ) ;
8117: LD_EXP 21
8121: PPUSH
8122: LD_STRING DH-Start-1
8124: PPUSH
8125: CALL_OW 88
// if Givi then
8129: LD_EXP 22
8133: IFFALSE 8396
// begin Say ( Givi , DG-Start-2-5 ) ;
8135: LD_EXP 22
8139: PPUSH
8140: LD_STRING DG-Start-2-5
8142: PPUSH
8143: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
8147: LD_EXP 21
8151: PPUSH
8152: LD_STRING DH-Start-3
8154: PPUSH
8155: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8159: LD_EXP 21
8163: PPUSH
8164: LD_STRING DH-Start-4
8166: PPUSH
8167: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
8171: LD_EXP 22
8175: PPUSH
8176: LD_STRING DG-Start-5
8178: PPUSH
8179: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
8183: LD_EXP 21
8187: PPUSH
8188: LD_STRING DH-Start-6
8190: PPUSH
8191: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
8195: LD_EXP 22
8199: PPUSH
8200: LD_STRING DG-Start-7
8202: PPUSH
8203: CALL_OW 88
// if Mike then
8207: LD_EXP 23
8211: IFFALSE 8384
// begin Say ( Mike , DM-Start-8 ) ;
8213: LD_EXP 23
8217: PPUSH
8218: LD_STRING DM-Start-8
8220: PPUSH
8221: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
8225: LD_EXP 23
8229: PPUSH
8230: LD_STRING DM-Start-9
8232: PPUSH
8233: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
8237: LD_EXP 22
8241: PPUSH
8242: LD_STRING DG-Start-10
8244: PPUSH
8245: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
8249: LD_EXP 22
8253: PPUSH
8254: LD_STRING DG-Start-11
8256: PPUSH
8257: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
8261: LD_EXP 21
8265: PPUSH
8266: LD_STRING DH-Start-12
8268: PPUSH
8269: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
8273: LD_EXP 22
8277: PPUSH
8278: LD_STRING DG-Start-13
8280: PPUSH
8281: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
8285: LD_EXP 22
8289: PPUSH
8290: LD_STRING DG-Start-14
8292: PPUSH
8293: CALL_OW 88
// if Kaia then
8297: LD_EXP 26
8301: IFFALSE 8384
// begin Say ( Kaia , DK-Start-15 ) ;
8303: LD_EXP 26
8307: PPUSH
8308: LD_STRING DK-Start-15
8310: PPUSH
8311: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
8315: LD_EXP 26
8319: PPUSH
8320: LD_STRING DK-Start-16
8322: PPUSH
8323: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
8327: LD_EXP 26
8331: PPUSH
8332: LD_STRING DK-Start-17
8334: PPUSH
8335: CALL_OW 88
// wait ( 0 0$0.3 ) ;
8339: LD_INT 10
8341: PPUSH
8342: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
8346: LD_EXP 22
8350: PPUSH
8351: LD_EXP 26
8355: PPUSH
8356: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
8360: LD_EXP 22
8364: PPUSH
8365: LD_STRING DG-Start-18
8367: PPUSH
8368: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
8372: LD_EXP 26
8376: PPUSH
8377: LD_STRING DK-Start-19
8379: PPUSH
8380: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
8384: LD_EXP 21
8388: PPUSH
8389: LD_STRING DH-Start-20
8391: PPUSH
8392: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
8396: LD_INT 70
8398: PPUSH
8399: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
8403: LD_EXP 29
8407: PPUSH
8408: LD_STRING DShar-Start-21
8410: PPUSH
8411: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
8415: LD_EXP 21
8419: PPUSH
8420: LD_STRING DH-Start-22
8422: PPUSH
8423: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
8427: LD_EXP 29
8431: PPUSH
8432: LD_STRING DShar-Start-23
8434: PPUSH
8435: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
8439: LD_EXP 29
8443: PPUSH
8444: LD_STRING DShar-Start-24
8446: PPUSH
8447: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
8451: LD_EXP 29
8455: PPUSH
8456: LD_STRING DShar-Start-25
8458: PPUSH
8459: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
8463: LD_EXP 29
8467: PPUSH
8468: LD_STRING DShar-Start-26
8470: PPUSH
8471: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
8475: LD_EXP 21
8479: PPUSH
8480: LD_STRING DH-Start-27
8482: PPUSH
8483: CALL_OW 88
// if Kaia then
8487: LD_EXP 26
8491: IFFALSE 8533
// begin ComTurnUnit ( Heike , Kaia ) ;
8493: LD_EXP 21
8497: PPUSH
8498: LD_EXP 26
8502: PPUSH
8503: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
8507: LD_EXP 26
8511: PPUSH
8512: LD_STRING DK-Start-28
8514: PPUSH
8515: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
8519: LD_EXP 21
8523: PPUSH
8524: LD_STRING DH-Start-29
8526: PPUSH
8527: CALL_OW 88
// end else
8531: GO 8545
// Say ( Heike , DH-Start-a-28 ) ;
8533: LD_EXP 21
8537: PPUSH
8538: LD_STRING DH-Start-a-28
8540: PPUSH
8541: CALL_OW 88
// if Givi then
8545: LD_EXP 22
8549: IFFALSE 8784
// begin ComTurnUnit ( Heike , Givi ) ;
8551: LD_EXP 21
8555: PPUSH
8556: LD_EXP 22
8560: PPUSH
8561: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
8565: LD_EXP 22
8569: PPUSH
8570: LD_EXP 21
8574: PPUSH
8575: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
8579: LD_EXP 21
8583: PPUSH
8584: LD_STRING DH-Start-30
8586: PPUSH
8587: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
8591: LD_EXP 21
8595: PPUSH
8596: LD_STRING DH-Start-31
8598: PPUSH
8599: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
8603: LD_EXP 22
8607: PPUSH
8608: LD_STRING DG-Start-32
8610: PPUSH
8611: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
8615: LD_EXP 21
8619: PPUSH
8620: LD_STRING DH-Start-33
8622: PPUSH
8623: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
8627: LD_EXP 22
8631: PPUSH
8632: LD_STRING DG-Start-34
8634: PPUSH
8635: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
8639: LD_EXP 22
8643: PPUSH
8644: LD_STRING DG-Start-35
8646: PPUSH
8647: CALL_OW 88
// if Kurt and not dialogue_skipped then
8651: LD_EXP 32
8655: PUSH
8656: LD_OWVAR 59
8660: NOT
8661: AND
8662: IFFALSE 8693
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
8664: LD_EXP 32
8668: PPUSH
8669: LD_INT 28
8671: PPUSH
8672: LD_INT 13
8674: PPUSH
8675: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
8679: LD_EXP 32
8683: PPUSH
8684: LD_EXP 21
8688: PPUSH
8689: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
8693: LD_EXP 22
8697: PPUSH
8698: LD_STRING DG-Start-36
8700: PPUSH
8701: CALL_OW 88
// if Kurt then
8705: LD_EXP 32
8709: IFFALSE 8782
// begin if not Givi then
8711: LD_EXP 22
8715: NOT
8716: IFFALSE 8732
// Say ( Kurt , DKs-Start-37-a ) else
8718: LD_EXP 32
8722: PPUSH
8723: LD_STRING DKs-Start-37-a
8725: PPUSH
8726: CALL_OW 88
8730: GO 8744
// Say ( Kurt , DKs-Start-37 ) ;
8732: LD_EXP 32
8736: PPUSH
8737: LD_STRING DKs-Start-37
8739: PPUSH
8740: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
8744: LD_EXP 32
8748: PPUSH
8749: LD_STRING DKs-Start-38
8751: PPUSH
8752: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
8756: LD_EXP 21
8760: PPUSH
8761: LD_EXP 32
8765: PPUSH
8766: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
8770: LD_EXP 21
8774: PPUSH
8775: LD_STRING DH-Start-39
8777: PPUSH
8778: CALL_OW 88
// end ; end else
8782: GO 8813
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
8784: LD_EXP 34
8788: PPUSH
8789: LD_STRING DArm-Start-a-37
8791: PPUSH
8792: LD_STRING DArf-Start-a-37
8794: PPUSH
8795: CALL 1262 0 3
8799: IFFALSE 8813
// Say ( Heike , DH-Start-39 ) ;
8801: LD_EXP 21
8805: PPUSH
8806: LD_STRING DH-Start-39
8808: PPUSH
8809: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
8813: LD_INT 44
8815: PPUSH
8816: LD_INT 25
8818: PPUSH
8819: CALL_OW 428
8823: IFFALSE 8840
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
8825: LD_INT 44
8827: PPUSH
8828: LD_INT 25
8830: PPUSH
8831: CALL_OW 428
8835: PPUSH
8836: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
8840: LD_EXP 30
8844: PPUSH
8845: LD_INT 5
8847: PPUSH
8848: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
8852: LD_EXP 30
8856: PPUSH
8857: LD_INT 44
8859: PPUSH
8860: LD_INT 25
8862: PPUSH
8863: LD_INT 0
8865: PPUSH
8866: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
8870: LD_EXP 30
8874: PPUSH
8875: LD_INT 29
8877: PPUSH
8878: LD_INT 12
8880: PPUSH
8881: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8885: LD_INT 35
8887: PPUSH
8888: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
8892: LD_OWVAR 59
8896: PUSH
8897: LD_EXP 21
8901: PPUSH
8902: LD_EXP 30
8906: PPUSH
8907: CALL_OW 296
8911: PUSH
8912: LD_INT 8
8914: LESS
8915: OR
8916: PUSH
8917: LD_EXP 30
8921: PPUSH
8922: LD_INT 26
8924: PPUSH
8925: LD_INT 9
8927: PPUSH
8928: CALL_OW 297
8932: PUSH
8933: LD_INT 6
8935: LESS
8936: OR
8937: IFFALSE 8885
// Say ( Olaf , DO-Scout-1 ) ;
8939: LD_EXP 30
8943: PPUSH
8944: LD_STRING DO-Scout-1
8946: PPUSH
8947: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
8951: LD_EXP 30
8955: PPUSH
8956: LD_EXP 21
8960: PPUSH
8961: CALL_OW 119
// for i in tmp union heikeSecondSquad do
8965: LD_ADDR_VAR 0 2
8969: PUSH
8970: LD_VAR 0 5
8974: PUSH
8975: LD_EXP 34
8979: UNION
8980: PUSH
8981: FOR_IN
8982: IFFALSE 9000
// ComTurnUnit ( i , Olaf ) ;
8984: LD_VAR 0 2
8988: PPUSH
8989: LD_EXP 30
8993: PPUSH
8994: CALL_OW 119
8998: GO 8981
9000: POP
9001: POP
// wait ( 0 0$0.3 ) ;
9002: LD_INT 10
9004: PPUSH
9005: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9009: LD_EXP 21
9013: PPUSH
9014: LD_EXP 30
9018: PPUSH
9019: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
9023: LD_EXP 21
9027: PPUSH
9028: LD_EXP 30
9032: PPUSH
9033: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
9037: LD_EXP 21
9041: PPUSH
9042: LD_STRING DH-Scout-2
9044: PPUSH
9045: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
9049: LD_EXP 30
9053: PPUSH
9054: LD_STRING DO-Scout-3
9056: PPUSH
9057: CALL_OW 88
// if Mike and Givi then
9061: LD_EXP 23
9065: PUSH
9066: LD_EXP 22
9070: AND
9071: IFFALSE 9087
// Say ( Olaf , DO-Scout-4 ) else
9073: LD_EXP 30
9077: PPUSH
9078: LD_STRING DO-Scout-4
9080: PPUSH
9081: CALL_OW 88
9085: GO 9187
// begin if Mike then
9087: LD_EXP 23
9091: IFFALSE 9119
// begin Say ( Olaf , DO-Scout-a-4 ) ;
9093: LD_EXP 30
9097: PPUSH
9098: LD_STRING DO-Scout-a-4
9100: PPUSH
9101: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
9105: LD_EXP 21
9109: PPUSH
9110: LD_STRING DH-Scout-a-5
9112: PPUSH
9113: CALL_OW 88
// end else
9117: GO 9187
// if Givi then
9119: LD_EXP 22
9123: IFFALSE 9151
// begin Say ( Olaf , DO-Scout-b-4 ) ;
9125: LD_EXP 30
9129: PPUSH
9130: LD_STRING DO-Scout-b-4
9132: PPUSH
9133: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
9137: LD_EXP 21
9141: PPUSH
9142: LD_STRING DH-Scout-b-5
9144: PPUSH
9145: CALL_OW 88
// end else
9149: GO 9187
// begin Say ( Olaf , DO-Scout-f-4 ) ;
9151: LD_EXP 30
9155: PPUSH
9156: LD_STRING DO-Scout-f-4
9158: PPUSH
9159: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
9163: LD_EXP 21
9167: PPUSH
9168: LD_STRING DH-Scout-f-5
9170: PPUSH
9171: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
9175: LD_EXP 30
9179: PPUSH
9180: LD_STRING DO-Scout-f-6
9182: PPUSH
9183: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
9187: LD_EXP 21
9191: PPUSH
9192: LD_STRING DH-Scout-5
9194: PPUSH
9195: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
9199: LD_EXP 30
9203: PPUSH
9204: LD_STRING DO-Scout-6
9206: PPUSH
9207: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
9211: LD_EXP 30
9215: PPUSH
9216: LD_STRING DO-Scout-7
9218: PPUSH
9219: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
9223: LD_EXP 21
9227: PPUSH
9228: LD_STRING DH-Scout-8
9230: PPUSH
9231: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
9235: LD_EXP 21
9239: PPUSH
9240: LD_STRING DH-Scout-9
9242: PPUSH
9243: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
9247: LD_EXP 30
9251: PPUSH
9252: LD_STRING DO-Scout-10
9254: PPUSH
9255: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
9259: LD_EXP 30
9263: PPUSH
9264: LD_STRING DO-Scout-12
9266: PPUSH
9267: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
9271: LD_EXP 30
9275: PPUSH
9276: LD_STRING DO-Scout-13
9278: PPUSH
9279: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
9283: LD_EXP 30
9287: PPUSH
9288: LD_STRING DO-Scout-14
9290: PPUSH
9291: CALL_OW 88
// if Givi then
9295: LD_EXP 22
9299: IFFALSE 9325
// begin Say ( Givi , DG-Scout-15 ) ;
9301: LD_EXP 22
9305: PPUSH
9306: LD_STRING DG-Scout-15
9308: PPUSH
9309: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
9313: LD_EXP 26
9317: PPUSH
9318: LD_STRING DK-Scout-16
9320: PPUSH
9321: CALL_OW 88
// end ; if not dialogue_skipped then
9325: LD_OWVAR 59
9329: NOT
9330: IFFALSE 9449
// begin async ;
9332: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
9333: LD_EXP 30
9337: PPUSH
9338: LD_STRING DO-Scout-17
9340: PPUSH
9341: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
9345: LD_INT 55
9347: PPUSH
9348: LD_INT 77
9350: PPUSH
9351: LD_INT 2
9353: PPUSH
9354: LD_INT 6
9356: NEG
9357: PPUSH
9358: CALL 1211 0 4
// wait ( 10 ) ;
9362: LD_INT 10
9364: PPUSH
9365: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
9369: LD_INT 55
9371: PPUSH
9372: LD_INT 77
9374: PPUSH
9375: CALL_OW 84
// wait ( 0 0$5 ) ;
9379: LD_INT 175
9381: PPUSH
9382: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
9386: LD_EXP 30
9390: PPUSH
9391: LD_STRING DO-Scout-18
9393: PPUSH
9394: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
9398: LD_INT 204
9400: PPUSH
9401: LD_INT 107
9403: PPUSH
9404: LD_INT 2
9406: PPUSH
9407: LD_INT 12
9409: NEG
9410: PPUSH
9411: CALL 1211 0 4
// wait ( 10 ) ;
9415: LD_INT 10
9417: PPUSH
9418: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
9422: LD_INT 204
9424: PPUSH
9425: LD_INT 107
9427: PPUSH
9428: CALL_OW 84
// wait ( 0 0$5 ) ;
9432: LD_INT 175
9434: PPUSH
9435: CALL_OW 67
// sync ;
9439: SYNC
// CenterNowOnUnits ( Heike ) ;
9440: LD_EXP 21
9444: PPUSH
9445: CALL_OW 87
// end ; Say ( Olaf , DO-Scout-19 ) ;
9449: LD_EXP 30
9453: PPUSH
9454: LD_STRING DO-Scout-19
9456: PPUSH
9457: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
9461: LD_EXP 30
9465: PPUSH
9466: LD_STRING DO-Scout-20
9468: PPUSH
9469: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
9473: LD_EXP 21
9477: PPUSH
9478: LD_STRING DH-Scout-21
9480: PPUSH
9481: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
9485: LD_EXP 21
9489: PPUSH
9490: LD_STRING DH-Scout-22
9492: PPUSH
9493: CALL_OW 88
// InGameOff ;
9497: CALL_OW 9
// if Givi then
9501: LD_EXP 22
9505: IFFALSE 9520
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
9507: LD_INT 13
9509: PPUSH
9510: LD_INT 2
9512: PPUSH
9513: LD_INT 1
9515: PPUSH
9516: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
9520: LD_STRING Road
9522: PPUSH
9523: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
9527: LD_ADDR_VAR 0 2
9531: PUSH
9532: LD_INT 22
9534: PUSH
9535: LD_INT 5
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PUSH
9542: LD_INT 21
9544: PUSH
9545: LD_INT 2
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: PPUSH
9556: CALL_OW 69
9560: PUSH
9561: FOR_IN
9562: IFFALSE 9578
// SetSide ( i , 2 ) ;
9564: LD_VAR 0 2
9568: PPUSH
9569: LD_INT 2
9571: PPUSH
9572: CALL_OW 235
9576: GO 9561
9578: POP
9579: POP
// SaveForQuickRestart ;
9580: CALL_OW 22
// end ;
9584: LD_VAR 0 1
9588: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
9589: LD_INT 2
9591: PPUSH
9592: LD_INT 9
9594: PPUSH
9595: CALL_OW 294
9599: IFFALSE 9966
9601: GO 9603
9603: DISABLE
// begin DialogueOn ;
9604: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
9608: LD_INT 111
9610: PPUSH
9611: LD_INT 72
9613: PPUSH
9614: LD_INT 2
9616: PPUSH
9617: LD_INT 20
9619: NEG
9620: PPUSH
9621: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
9625: LD_INT 111
9627: PPUSH
9628: LD_INT 72
9630: PPUSH
9631: LD_INT 2
9633: PPUSH
9634: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
9638: LD_INT 111
9640: PPUSH
9641: LD_INT 72
9643: PPUSH
9644: CALL_OW 86
// if IsOk ( Kamil ) then
9648: LD_EXP 25
9652: PPUSH
9653: CALL_OW 302
9657: IFFALSE 9774
// begin Say ( Kamil , DKam-Cross-1 ) ;
9659: LD_EXP 25
9663: PPUSH
9664: LD_STRING DKam-Cross-1
9666: PPUSH
9667: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
9671: LD_EXP 25
9675: PPUSH
9676: LD_STRING DKam-Cross-2
9678: PPUSH
9679: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
9683: LD_EXP 25
9687: PPUSH
9688: LD_STRING DKam-Cross-3
9690: PPUSH
9691: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
9695: LD_EXP 25
9699: PPUSH
9700: LD_STRING DKam-Cross-4
9702: PPUSH
9703: CALL_OW 88
// if IsOk ( Ibrahim ) then
9707: LD_EXP 24
9711: PPUSH
9712: CALL_OW 302
9716: IFFALSE 9772
// begin if ibrahimJoinedIn04 then
9718: LD_EXP 4
9722: IFFALSE 9736
// Say ( Ibrahim , DI-Cross-b-5 ) ;
9724: LD_EXP 24
9728: PPUSH
9729: LD_STRING DI-Cross-b-5
9731: PPUSH
9732: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
9736: LD_EXP 24
9740: PPUSH
9741: LD_STRING DI-Cross-b-6
9743: PPUSH
9744: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
9748: LD_EXP 24
9752: PPUSH
9753: LD_STRING DI-Cross-b-7
9755: PPUSH
9756: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
9760: LD_EXP 25
9764: PPUSH
9765: LD_STRING DKam-Cross-8
9767: PPUSH
9768: CALL_OW 88
// end ; end else
9772: GO 9932
// if IsOk ( Sophia ) then
9774: LD_EXP 27
9778: PPUSH
9779: CALL_OW 302
9783: IFFALSE 9900
// begin Say ( Sophia , DS-Cross-1 ) ;
9785: LD_EXP 27
9789: PPUSH
9790: LD_STRING DS-Cross-1
9792: PPUSH
9793: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
9797: LD_EXP 27
9801: PPUSH
9802: LD_STRING DS-Cross-2
9804: PPUSH
9805: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
9809: LD_EXP 27
9813: PPUSH
9814: LD_STRING DS-Cross-3
9816: PPUSH
9817: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
9821: LD_EXP 27
9825: PPUSH
9826: LD_STRING DS-Cross-4
9828: PPUSH
9829: CALL_OW 88
// if IsOk ( Ibrahim ) then
9833: LD_EXP 24
9837: PPUSH
9838: CALL_OW 302
9842: IFFALSE 9898
// begin if ibrahimJoinedIn04 then
9844: LD_EXP 4
9848: IFFALSE 9862
// Say ( Ibrahim , DI-Cross-b-5 ) ;
9850: LD_EXP 24
9854: PPUSH
9855: LD_STRING DI-Cross-b-5
9857: PPUSH
9858: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
9862: LD_EXP 24
9866: PPUSH
9867: LD_STRING DI-Cross-b-6
9869: PPUSH
9870: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
9874: LD_EXP 24
9878: PPUSH
9879: LD_STRING DI-Cross-b-7
9881: PPUSH
9882: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
9886: LD_EXP 27
9890: PPUSH
9891: LD_STRING DS-Cross-8
9893: PPUSH
9894: CALL_OW 88
// end ; end else
9898: GO 9932
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
9900: LD_EXP 34
9904: PPUSH
9905: LD_INT 50
9907: PUSH
9908: EMPTY
9909: LIST
9910: PPUSH
9911: CALL_OW 72
9915: IFFALSE 9932
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
9917: LD_EXP 34
9921: PPUSH
9922: LD_STRING DArm-Cross-c-1
9924: PPUSH
9925: LD_STRING DArf-Cross-c-1
9927: PPUSH
9928: CALL 1262 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
9932: LD_EXP 56
9936: PPUSH
9937: LD_INT 2
9939: PPUSH
9940: LD_INT 1
9942: PPUSH
9943: CALL_OW 322
// DialogueOff ;
9947: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
9951: LD_STRING Crane
9953: PPUSH
9954: CALL_OW 337
// spottedCrossRoad := true ;
9958: LD_ADDR_EXP 8
9962: PUSH
9963: LD_INT 1
9965: ST_TO_ADDR
// end ;
9966: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
9967: LD_INT 22
9969: PUSH
9970: LD_INT 2
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: PUSH
9977: LD_INT 2
9979: PUSH
9980: LD_INT 30
9982: PUSH
9983: LD_INT 0
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: PUSH
9990: LD_INT 30
9992: PUSH
9993: LD_INT 1
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: LIST
10004: PUSH
10005: EMPTY
10006: LIST
10007: LIST
10008: PPUSH
10009: CALL_OW 69
10013: PUSH
10014: LD_EXP 26
10018: PPUSH
10019: CALL_OW 302
10023: PUSH
10024: LD_EXP 34
10028: OR
10029: AND
10030: IFFALSE 10242
10032: GO 10034
10034: DISABLE
// begin DialogueOn ;
10035: CALL_OW 6
// if Kaia then
10039: LD_EXP 26
10043: IFFALSE 10056
// CenterNowOnUnits ( Kaia ) else
10045: LD_EXP 26
10049: PPUSH
10050: CALL_OW 87
10054: GO 10065
// CenterNowOnUnits ( Heike ) ;
10056: LD_EXP 21
10060: PPUSH
10061: CALL_OW 87
// if IsOk ( Kaia ) then
10065: LD_EXP 26
10069: PPUSH
10070: CALL_OW 302
10074: IFFALSE 10090
// Say ( Kaia , DK-Cam-1 ) else
10076: LD_EXP 26
10080: PPUSH
10081: LD_STRING DK-Cam-1
10083: PPUSH
10084: CALL_OW 88
10088: GO 10105
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
10090: LD_EXP 34
10094: PPUSH
10095: LD_STRING DArm-Cam-1
10097: PPUSH
10098: LD_STRING DArf-Cam-1
10100: PPUSH
10101: CALL 1262 0 3
// Say ( Heike , DH-Cam-2 ) ;
10105: LD_EXP 21
10109: PPUSH
10110: LD_STRING DH-Cam-2
10112: PPUSH
10113: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
10117: LD_EXP 21
10121: PPUSH
10122: LD_STRING DH-Cam-3
10124: PPUSH
10125: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10129: LD_EXP 21
10133: PPUSH
10134: LD_STRING DH-Cam-4
10136: PPUSH
10137: CALL_OW 88
// if IsOk ( Kaia ) then
10141: LD_EXP 26
10145: PPUSH
10146: CALL_OW 302
10150: IFFALSE 10166
// Say ( Kaia , DK-Cam-5 ) else
10152: LD_EXP 26
10156: PPUSH
10157: LD_STRING DK-Cam-5
10159: PPUSH
10160: CALL_OW 88
10164: GO 10181
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
10166: LD_EXP 34
10170: PPUSH
10171: LD_STRING DArm-Cam-5
10173: PPUSH
10174: LD_STRING DArf-Cam-5
10176: PPUSH
10177: CALL 1262 0 3
// Say ( Olaf , DO-Cam-6 ) ;
10181: LD_EXP 30
10185: PPUSH
10186: LD_STRING DO-Cam-6
10188: PPUSH
10189: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
10193: LD_EXP 30
10197: PPUSH
10198: LD_STRING DO-Cam-7
10200: PPUSH
10201: CALL_OW 88
// DialogueOff ;
10205: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
10209: LD_STRING Radar
10211: PPUSH
10212: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
10216: LD_INT 6
10218: PPUSH
10219: LD_INT 2
10221: PPUSH
10222: LD_INT 1
10224: PPUSH
10225: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
10229: LD_INT 20
10231: PPUSH
10232: LD_INT 2
10234: PPUSH
10235: LD_INT 1
10237: PPUSH
10238: CALL_OW 324
// end ;
10242: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
10243: LD_INT 22
10245: PUSH
10246: LD_INT 2
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: PUSH
10253: LD_INT 2
10255: PUSH
10256: LD_INT 34
10258: PUSH
10259: LD_INT 30
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PUSH
10266: LD_INT 35
10268: PUSH
10269: LD_INT 30
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: LIST
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: PPUSH
10285: CALL_OW 69
10289: IFFALSE 10301
10291: GO 10293
10293: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
10294: LD_STRING RadarDone
10296: PPUSH
10297: CALL_OW 337
10301: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
10302: LD_INT 22
10304: PUSH
10305: LD_INT 2
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PUSH
10312: LD_INT 34
10314: PUSH
10315: LD_EXP 50
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PPUSH
10328: CALL_OW 69
10332: IFFALSE 10344
10334: GO 10336
10336: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
10337: LD_STRING CraneDone
10339: PPUSH
10340: CALL_OW 337
10344: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
10345: LD_EXP 30
10349: PPUSH
10350: CALL_OW 302
10354: PUSH
10355: LD_EXP 33
10359: PPUSH
10360: CALL_OW 302
10364: AND
10365: PUSH
10366: LD_INT 6
10368: PPUSH
10369: LD_INT 2
10371: PPUSH
10372: CALL_OW 321
10376: PUSH
10377: LD_INT 2
10379: EQUAL
10380: AND
10381: PUSH
10382: LD_EXP 33
10386: PPUSH
10387: LD_EXP 21
10391: PPUSH
10392: CALL_OW 296
10396: PUSH
10397: LD_INT 10
10399: LESS
10400: PUSH
10401: LD_EXP 33
10405: PPUSH
10406: CALL_OW 310
10410: OR
10411: AND
10412: IFFALSE 10626
10414: GO 10416
10416: DISABLE
// begin DialogueOn ;
10417: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
10421: LD_EXP 33
10425: PPUSH
10426: LD_STRING DA-RC-1
10428: PPUSH
10429: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
10433: LD_EXP 33
10437: PPUSH
10438: LD_STRING DA-RC-2
10440: PPUSH
10441: CALL_OW 88
// if IsOk ( Kaia ) then
10445: LD_EXP 26
10449: PPUSH
10450: CALL_OW 302
10454: IFFALSE 10528
// begin Say ( Kaia , DK-RC-3 ) ;
10456: LD_EXP 26
10460: PPUSH
10461: LD_STRING DK-RC-3
10463: PPUSH
10464: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
10468: LD_EXP 33
10472: PPUSH
10473: LD_STRING DA-RC-4
10475: PPUSH
10476: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
10480: LD_EXP 26
10484: PPUSH
10485: LD_STRING DK-RC-5
10487: PPUSH
10488: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
10492: LD_EXP 33
10496: PPUSH
10497: LD_STRING DA-RC-6
10499: PPUSH
10500: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
10504: LD_EXP 26
10508: PPUSH
10509: LD_STRING DK-RC-7
10511: PPUSH
10512: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
10516: LD_EXP 33
10520: PPUSH
10521: LD_STRING DA-RC-8
10523: PPUSH
10524: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
10528: LD_EXP 21
10532: PPUSH
10533: LD_STRING DH-RC-9
10535: PPUSH
10536: CALL_OW 88
// if IsOk ( Markov ) then
10540: LD_EXP 28
10544: PPUSH
10545: CALL_OW 302
10549: IFFALSE 10577
// begin Say ( Markov , DMar-RC-10 ) ;
10551: LD_EXP 28
10555: PPUSH
10556: LD_STRING DMar-RC-10
10558: PPUSH
10559: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
10563: LD_EXP 28
10567: PPUSH
10568: LD_STRING DMar-RC-11
10570: PPUSH
10571: CALL_OW 88
// end else
10575: GO 10589
// begin Say ( Olaf , DO-RC-a-10 ) ;
10577: LD_EXP 30
10581: PPUSH
10582: LD_STRING DO-RC-a-10
10584: PPUSH
10585: CALL_OW 88
// end ; DialogueOff ;
10589: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
10593: LD_STRING RemoteControl
10595: PPUSH
10596: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
10600: LD_INT 15
10602: PPUSH
10603: LD_INT 2
10605: PPUSH
10606: LD_INT 1
10608: PPUSH
10609: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
10613: LD_INT 22
10615: PPUSH
10616: LD_INT 2
10618: PPUSH
10619: LD_INT 1
10621: PPUSH
10622: CALL_OW 324
// end ;
10626: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
10627: LD_INT 12
10629: PPUSH
10630: LD_INT 22
10632: PUSH
10633: LD_INT 2
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: PPUSH
10640: CALL_OW 70
10644: IFFALSE 11011
10646: GO 10648
10648: DISABLE
10649: LD_INT 0
10651: PPUSH
// begin PrepareWestBase ;
10652: CALL 3898 0 0
// westBaseSpotted := true ;
10656: LD_ADDR_EXP 5
10660: PUSH
10661: LD_INT 1
10663: ST_TO_ADDR
// wait ( 0 0$2 ) ;
10664: LD_INT 70
10666: PPUSH
10667: CALL_OW 67
// InGameOn ;
10671: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
10675: LD_INT 56
10677: PPUSH
10678: LD_INT 77
10680: PPUSH
10681: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
10685: LD_INT 56
10687: PPUSH
10688: LD_INT 77
10690: PPUSH
10691: LD_INT 2
10693: PPUSH
10694: LD_INT 12
10696: NEG
10697: PPUSH
10698: CALL_OW 330
// wait ( 0 0$2 ) ;
10702: LD_INT 70
10704: PPUSH
10705: CALL_OW 67
// DialogueOn ;
10709: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
10713: LD_EXP 21
10717: PPUSH
10718: LD_STRING DH-Rbase-1
10720: PPUSH
10721: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
10725: LD_EXP 26
10729: PPUSH
10730: LD_STRING DK-Rbase-2
10732: PPUSH
10733: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
10737: LD_EXP 26
10741: PPUSH
10742: LD_STRING DK-Rbase-3
10744: PPUSH
10745: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
10749: LD_EXP 26
10753: PPUSH
10754: LD_STRING DK-Rbase-4
10756: PPUSH
10757: CALL_OW 88
// DialogueOff ;
10761: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
10765: LD_INT 56
10767: PPUSH
10768: LD_INT 77
10770: PPUSH
10771: LD_INT 2
10773: PPUSH
10774: CALL_OW 331
// InGameOff ;
10778: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
10782: LD_INT 35
10784: PPUSH
10785: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
10789: LD_EXP 42
10793: NOT
10794: PUSH
10795: LD_EXP 43
10799: NOT
10800: AND
10801: IFFALSE 10782
// wait ( 0 0$2 ) ;
10803: LD_INT 70
10805: PPUSH
10806: CALL_OW 67
// if IsOk ( Kaia ) then
10810: LD_EXP 26
10814: PPUSH
10815: CALL_OW 302
10819: IFFALSE 10934
// begin DialogueOn ;
10821: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
10825: LD_INT 56
10827: PPUSH
10828: LD_INT 81
10830: PPUSH
10831: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
10835: LD_EXP 26
10839: PPUSH
10840: LD_STRING DK-Rbase-5
10842: PPUSH
10843: CALL_OW 88
// if IsOk ( Givi ) then
10847: LD_EXP 22
10851: PPUSH
10852: CALL_OW 302
10856: IFFALSE 10930
// begin Say ( Givi , DG-Rbase-6 ) ;
10858: LD_EXP 22
10862: PPUSH
10863: LD_STRING DG-Rbase-6
10865: PPUSH
10866: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
10870: LD_EXP 22
10874: PPUSH
10875: LD_STRING DG-Rbase-7
10877: PPUSH
10878: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
10882: LD_EXP 26
10886: PPUSH
10887: LD_STRING DK-Rbase-8
10889: PPUSH
10890: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
10894: LD_EXP 22
10898: PPUSH
10899: LD_STRING DG-Rbase-9
10901: PPUSH
10902: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
10906: LD_EXP 22
10910: PPUSH
10911: LD_STRING DG-Rbase-10
10913: PPUSH
10914: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
10918: LD_EXP 26
10922: PPUSH
10923: LD_STRING DK-Rbase-11
10925: PPUSH
10926: CALL_OW 88
// end ; DialogueOff ;
10930: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
10934: LD_ADDR_VAR 0 1
10938: PUSH
10939: LD_INT 12
10941: PPUSH
10942: LD_INT 22
10944: PUSH
10945: LD_INT 3
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PUSH
10952: LD_INT 21
10954: PUSH
10955: LD_INT 3
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: PPUSH
10966: CALL_OW 70
10970: PUSH
10971: FOR_IN
10972: IFFALSE 10988
// SetSide ( i , 2 ) ;
10974: LD_VAR 0 1
10978: PPUSH
10979: LD_INT 2
10981: PPUSH
10982: CALL_OW 235
10986: GO 10971
10988: POP
10989: POP
// westBaseCaptured := true ;
10990: LD_ADDR_EXP 9
10994: PUSH
10995: LD_INT 1
10997: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
10998: LD_INT 0
11000: PPUSH
11001: LD_INT 2
11003: PPUSH
11004: LD_INT 1
11006: PPUSH
11007: CALL_OW 324
// end ;
11011: PPOPN 1
11013: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
11014: LD_EXP 38
11018: NOT
11019: PUSH
11020: LD_INT 10
11022: PPUSH
11023: CALL_OW 255
11027: PUSH
11028: LD_INT 2
11030: EQUAL
11031: OR
11032: IFFALSE 11169
11034: GO 11036
11036: DISABLE
// begin DialogueOn ;
11037: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
11041: LD_EXP 21
11045: PPUSH
11046: LD_STRING DH-Goal-1
11048: PPUSH
11049: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
11053: LD_EXP 29
11057: PPUSH
11058: LD_STRING DShar-Goal-2
11060: PPUSH
11061: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
11065: LD_EXP 21
11069: PPUSH
11070: LD_STRING DH-Goal-3
11072: PPUSH
11073: CALL_OW 88
// if reinforcementsAllowed then
11077: LD_EXP 14
11081: IFFALSE 11107
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
11083: LD_EXP 29
11087: PPUSH
11088: LD_STRING DShar-Goal-4
11090: PPUSH
11091: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
11095: LD_EXP 21
11099: PPUSH
11100: LD_STRING DH-Goal-5
11102: PPUSH
11103: CALL_OW 88
// end ; DialogueOff ;
11107: CALL_OW 7
// eastBaseCaptured := true ;
11111: LD_ADDR_EXP 10
11115: PUSH
11116: LD_INT 1
11118: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
11119: LD_STRING BaseCaptured
11121: PPUSH
11122: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
11126: LD_INT 10
11128: PPUSH
11129: LD_INT 2
11131: PPUSH
11132: CALL_OW 235
// if not reinforcementsAllowed then
11136: LD_EXP 14
11140: NOT
11141: IFFALSE 11145
// exit ;
11143: GO 11169
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
11145: LD_INT 21000
11147: PUSH
11148: LD_INT 1050
11150: NEG
11151: PPUSH
11152: LD_INT 1050
11154: PPUSH
11155: CALL_OW 12
11159: PLUS
11160: PPUSH
11161: CALL_OW 67
// PrepareReinforcements ;
11165: CALL 2226 0 0
// end ;
11169: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
11170: LD_INT 22
11172: PUSH
11173: LD_INT 2
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: PUSH
11180: LD_INT 30
11182: PUSH
11183: LD_INT 13
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PPUSH
11194: CALL_OW 69
11198: IFFALSE 11215
11200: GO 11202
11202: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
11203: LD_EXP 22
11207: PPUSH
11208: LD_STRING DG-Lab-1
11210: PPUSH
11211: CALL_OW 88
// end ;
11215: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched do
11216: LD_INT 5
11218: PPUSH
11219: LD_INT 2
11221: PPUSH
11222: CALL_OW 321
11226: PUSH
11227: LD_INT 2
11229: EQUAL
11230: IFFALSE 11291
11232: GO 11234
11234: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
11235: LD_EXP 22
11239: PPUSH
11240: LD_STRING DG-Stim-1
11242: PPUSH
11243: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
11247: LD_EXP 21
11251: PPUSH
11252: LD_STRING DH-Stim-2
11254: PPUSH
11255: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
11259: LD_EXP 22
11263: PPUSH
11264: LD_STRING DG-Stim-3
11266: PPUSH
11267: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
11271: LD_EXP 21
11275: PPUSH
11276: LD_STRING DH-Stim-4
11278: PPUSH
11279: CALL_OW 88
// drugsResearched := true ;
11283: LD_ADDR_EXP 11
11287: PUSH
11288: LD_INT 1
11290: ST_TO_ADDR
// end ;
11291: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
11292: LD_EXP 11
11296: IFFALSE 11608
11298: GO 11300
11300: DISABLE
11301: LD_INT 0
11303: PPUSH
11304: PPUSH
11305: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
11306: LD_ADDR_VAR 0 2
11310: PUSH
11311: LD_EXP 21
11315: PUSH
11316: LD_EXP 22
11320: PUSH
11321: LD_EXP 30
11325: PUSH
11326: LD_EXP 28
11330: PUSH
11331: LD_EXP 26
11335: PUSH
11336: LD_EXP 27
11340: PUSH
11341: LD_EXP 32
11345: PUSH
11346: LD_EXP 25
11350: PUSH
11351: LD_EXP 23
11355: PUSH
11356: LD_EXP 24
11360: PUSH
11361: LD_EXP 33
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
11379: LD_ADDR_VAR 0 3
11383: PUSH
11384: LD_STRING H
11386: PUSH
11387: LD_STRING G
11389: PUSH
11390: LD_STRING O
11392: PUSH
11393: LD_STRING Mar
11395: PUSH
11396: LD_STRING K
11398: PUSH
11399: LD_STRING S
11401: PUSH
11402: LD_STRING Ks
11404: PUSH
11405: LD_STRING Kam
11407: PUSH
11408: LD_STRING M
11410: PUSH
11411: LD_STRING I
11413: PUSH
11414: LD_STRING A
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11430: LD_INT 35
11432: PPUSH
11433: CALL_OW 67
// for i := tmp downto 1 do
11437: LD_ADDR_VAR 0 1
11441: PUSH
11442: DOUBLE
11443: LD_VAR 0 2
11447: INC
11448: ST_TO_ADDR
11449: LD_INT 1
11451: PUSH
11452: FOR_DOWNTO
11453: IFFALSE 11599
// if GetLives ( tmp [ i ] ) < 250 then
11455: LD_VAR 0 2
11459: PUSH
11460: LD_VAR 0 1
11464: ARRAY
11465: PPUSH
11466: CALL_OW 256
11470: PUSH
11471: LD_INT 250
11473: LESS
11474: IFFALSE 11597
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
11476: LD_ADDR_EXP 19
11480: PUSH
11481: LD_EXP 19
11485: PUSH
11486: LD_INT 1
11488: PLUS
11489: ST_TO_ADDR
// DialogueOn ;
11490: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
11494: LD_VAR 0 2
11498: PUSH
11499: LD_VAR 0 1
11503: ARRAY
11504: PPUSH
11505: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
11509: LD_VAR 0 2
11513: PUSH
11514: LD_VAR 0 1
11518: ARRAY
11519: PPUSH
11520: LD_STRING D
11522: PUSH
11523: LD_VAR 0 3
11527: PUSH
11528: LD_VAR 0 1
11532: ARRAY
11533: STR
11534: PUSH
11535: LD_STRING -Stim-a-1
11537: STR
11538: PPUSH
11539: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
11543: LD_ADDR_VAR 0 2
11547: PUSH
11548: LD_VAR 0 2
11552: PPUSH
11553: LD_VAR 0 1
11557: PPUSH
11558: CALL_OW 3
11562: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
11563: LD_ADDR_VAR 0 3
11567: PUSH
11568: LD_VAR 0 3
11572: PPUSH
11573: LD_VAR 0 1
11577: PPUSH
11578: CALL_OW 3
11582: ST_TO_ADDR
// drugsTested := true ;
11583: LD_ADDR_EXP 6
11587: PUSH
11588: LD_INT 1
11590: ST_TO_ADDR
// DialogueOff ;
11591: CALL_OW 7
// break ;
11595: GO 11599
// end ;
11597: GO 11452
11599: POP
11600: POP
// until not tmp ;
11601: LD_VAR 0 2
11605: NOT
11606: IFFALSE 11430
// end ;
11608: PPOPN 3
11610: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
11611: LD_INT 22
11613: PUSH
11614: LD_INT 2
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: PUSH
11621: LD_INT 34
11623: PUSH
11624: LD_INT 31
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: PPUSH
11635: CALL_OW 69
11639: PUSH
11640: LD_INT 22
11642: PUSH
11643: LD_INT 2
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: LD_INT 33
11652: PUSH
11653: LD_INT 2
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PPUSH
11664: CALL_OW 69
11668: AND
11669: IFFALSE 11682
11671: GO 11673
11673: DISABLE
// remoteControlConstructed := true ;
11674: LD_ADDR_EXP 12
11678: PUSH
11679: LD_INT 1
11681: ST_TO_ADDR
11682: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
11683: LD_EXP 12
11687: IFFALSE 11987
11689: GO 11691
11691: DISABLE
11692: LD_INT 0
11694: PPUSH
11695: PPUSH
11696: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
11697: LD_ADDR_VAR 0 2
11701: PUSH
11702: LD_EXP 21
11706: PUSH
11707: LD_EXP 22
11711: PUSH
11712: LD_EXP 30
11716: PUSH
11717: LD_EXP 28
11721: PUSH
11722: LD_EXP 26
11726: PUSH
11727: LD_EXP 27
11731: PUSH
11732: LD_EXP 32
11736: PUSH
11737: LD_EXP 25
11741: PUSH
11742: LD_EXP 23
11746: PUSH
11747: LD_EXP 24
11751: PUSH
11752: LD_EXP 33
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
11770: LD_ADDR_VAR 0 3
11774: PUSH
11775: LD_STRING H
11777: PUSH
11778: LD_STRING G
11780: PUSH
11781: LD_STRING O
11783: PUSH
11784: LD_STRING Mar
11786: PUSH
11787: LD_STRING K
11789: PUSH
11790: LD_STRING S
11792: PUSH
11793: LD_STRING Ks
11795: PUSH
11796: LD_STRING Kam
11798: PUSH
11799: LD_STRING M
11801: PUSH
11802: LD_STRING I
11804: PUSH
11805: LD_STRING A
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11821: LD_INT 35
11823: PPUSH
11824: CALL_OW 67
// for i := tmp downto 1 do
11828: LD_ADDR_VAR 0 1
11832: PUSH
11833: DOUBLE
11834: LD_VAR 0 2
11838: INC
11839: ST_TO_ADDR
11840: LD_INT 1
11842: PUSH
11843: FOR_DOWNTO
11844: IFFALSE 11978
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
11846: LD_VAR 0 2
11850: PUSH
11851: LD_VAR 0 1
11855: ARRAY
11856: PPUSH
11857: CALL_OW 257
11861: PUSH
11862: LD_INT 3
11864: EQUAL
11865: PUSH
11866: LD_VAR 0 2
11870: PUSH
11871: LD_VAR 0 1
11875: ARRAY
11876: PPUSH
11877: CALL_OW 432
11881: AND
11882: IFFALSE 11976
// begin DialogueOn ;
11884: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
11888: LD_VAR 0 2
11892: PUSH
11893: LD_VAR 0 1
11897: ARRAY
11898: PPUSH
11899: LD_STRING D
11901: PUSH
11902: LD_VAR 0 3
11906: PUSH
11907: LD_VAR 0 1
11911: ARRAY
11912: STR
11913: PUSH
11914: LD_STRING -RC-a-1
11916: STR
11917: PPUSH
11918: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
11922: LD_ADDR_VAR 0 2
11926: PUSH
11927: LD_VAR 0 2
11931: PPUSH
11932: LD_VAR 0 1
11936: PPUSH
11937: CALL_OW 3
11941: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
11942: LD_ADDR_VAR 0 3
11946: PUSH
11947: LD_VAR 0 3
11951: PPUSH
11952: LD_VAR 0 1
11956: PPUSH
11957: CALL_OW 3
11961: ST_TO_ADDR
// DialogueOff ;
11962: CALL_OW 7
// remoteControlTested := true ;
11966: LD_ADDR_EXP 7
11970: PUSH
11971: LD_INT 1
11973: ST_TO_ADDR
// break ;
11974: GO 11978
// end ;
11976: GO 11843
11978: POP
11979: POP
// until not tmp ;
11980: LD_VAR 0 2
11984: NOT
11985: IFFALSE 11821
// end ;
11987: PPOPN 3
11989: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
11990: LD_EXP 7
11994: PUSH
11995: LD_EXP 28
11999: PPUSH
12000: CALL_OW 302
12004: AND
12005: IFFALSE 12034
12007: GO 12009
12009: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
12010: LD_EXP 28
12014: PPUSH
12015: LD_STRING DMar-RC-a-2
12017: PPUSH
12018: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
12022: LD_EXP 28
12026: PPUSH
12027: LD_STRING DMar-RC-a-3
12029: PPUSH
12030: CALL_OW 88
// end ;
12034: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
12035: LD_EXP 14
12039: PUSH
12040: LD_EXP 21
12044: PPUSH
12045: LD_EXP 33
12049: PPUSH
12050: CALL_OW 296
12054: PUSH
12055: LD_INT 8
12057: LESS
12058: AND
12059: PUSH
12060: LD_INT 2
12062: PPUSH
12063: CALL_OW 463
12067: NOT
12068: AND
12069: PUSH
12070: LD_EXP 33
12074: PPUSH
12075: CALL_OW 302
12079: AND
12080: PUSH
12081: LD_EXP 21
12085: PPUSH
12086: CALL_OW 302
12090: AND
12091: IFFALSE 12269
12093: GO 12095
12095: DISABLE
// begin if not IsInUnit ( Aviradze ) then
12096: LD_EXP 33
12100: PPUSH
12101: CALL_OW 310
12105: NOT
12106: IFFALSE 12122
// ComTurnUnit ( Aviradze , Heike ) ;
12108: LD_EXP 33
12112: PPUSH
12113: LD_EXP 21
12117: PPUSH
12118: CALL_OW 119
// if not IsInUnit ( Heike ) then
12122: LD_EXP 21
12126: PPUSH
12127: CALL_OW 310
12131: NOT
12132: IFFALSE 12148
// ComTurnUnit ( Heike , Aviradze ) ;
12134: LD_EXP 21
12138: PPUSH
12139: LD_EXP 33
12143: PPUSH
12144: CALL_OW 119
// wait ( 0 0$1 ) ;
12148: LD_INT 35
12150: PPUSH
12151: CALL_OW 67
// DialogueOn ;
12155: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
12159: LD_EXP 33
12163: PPUSH
12164: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
12168: LD_EXP 21
12172: PPUSH
12173: LD_STRING DH-Beria-1
12175: PPUSH
12176: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
12180: LD_EXP 33
12184: PPUSH
12185: LD_STRING DA-Beria-2
12187: PPUSH
12188: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
12192: LD_EXP 21
12196: PPUSH
12197: LD_STRING DH-Beria-3
12199: PPUSH
12200: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
12204: LD_EXP 33
12208: PPUSH
12209: LD_STRING DA-Beria-4
12211: PPUSH
12212: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
12216: LD_EXP 33
12220: PPUSH
12221: LD_STRING DA-Beria-5
12223: PPUSH
12224: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
12228: LD_EXP 33
12232: PPUSH
12233: LD_STRING DA-Beria-6
12235: PPUSH
12236: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
12240: LD_EXP 21
12244: PPUSH
12245: LD_STRING DA-Beria-7
12247: PPUSH
12248: CALL_OW 88
// DialogueOff ;
12252: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
12256: LD_INT 52
12258: PPUSH
12259: LD_INT 2
12261: PPUSH
12262: LD_INT 1
12264: PPUSH
12265: CALL_OW 322
// end ;
12269: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
12270: LD_EXP 26
12274: PPUSH
12275: CALL_OW 256
12279: PUSH
12280: LD_INT 10
12282: LESS
12283: IFFALSE 12320
12285: GO 12287
12287: DISABLE
// begin DialogueOn ;
12288: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
12292: LD_EXP 26
12296: PPUSH
12297: LD_STRING DK-Kdeath-1
12299: PPUSH
12300: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
12304: LD_EXP 21
12308: PPUSH
12309: LD_STRING DH-Kdeath-2
12311: PPUSH
12312: CALL_OW 88
// DialogueOff ;
12316: CALL_OW 7
// end ;
12320: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
12321: LD_INT 2
12323: PPUSH
12324: LD_EXP 39
12328: PPUSH
12329: CALL 1358 0 2
12333: IFFALSE 12350
12335: GO 12337
12337: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
12338: LD_EXP 21
12342: PPUSH
12343: LD_STRING DH-Obj-1
12345: PPUSH
12346: CALL_OW 88
12350: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
12351: LD_INT 2
12353: PPUSH
12354: LD_EXP 40
12358: PPUSH
12359: CALL 1358 0 2
12363: IFFALSE 12380
12365: GO 12367
12367: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
12368: LD_EXP 21
12372: PPUSH
12373: LD_STRING DH-Obj-a-1
12375: PPUSH
12376: CALL_OW 88
12380: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 7 7$00 , 6 6$30 , 6 6$00 ] [ Difficulty ] do
12381: LD_EXP 10
12385: PUSH
12386: LD_OWVAR 1
12390: PUSH
12391: LD_INT 14700
12393: PUSH
12394: LD_INT 13650
12396: PUSH
12397: LD_INT 12600
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: LIST
12404: PUSH
12405: LD_OWVAR 67
12409: ARRAY
12410: GREATEREQUAL
12411: OR
12412: IFFALSE 12440
12414: GO 12416
12416: DISABLE
// begin wait ( rand ( 2 2$00 , 2 2$30 ) ) ;
12417: LD_INT 4200
12419: PPUSH
12420: LD_INT 5250
12422: PPUSH
12423: CALL_OW 12
12427: PPUSH
12428: CALL_OW 67
// convoyStarted := true ;
12432: LD_ADDR_EXP 17
12436: PUSH
12437: LD_INT 1
12439: ST_TO_ADDR
// end ;
12440: END
// every 0 0$1 trigger convoyStarted do
12441: LD_EXP 17
12445: IFFALSE 12529
12447: GO 12449
12449: DISABLE
// begin DialogueOn ;
12450: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
12454: LD_EXP 29
12458: PPUSH
12459: LD_STRING DShar-Convoy-1
12461: PPUSH
12462: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
12466: LD_EXP 21
12470: PPUSH
12471: LD_STRING DH-Convoy-2
12473: PPUSH
12474: CALL_OW 88
// DialogueOff ;
12478: CALL_OW 7
// PrepareConvoy ;
12482: CALL 4537 0 0
// repeat wait ( rand ( 3 3$30 , 5 5$30 ) ) ;
12486: LD_INT 7350
12488: PPUSH
12489: LD_INT 11550
12491: PPUSH
12492: CALL_OW 12
12496: PPUSH
12497: CALL_OW 67
// PrepareConvoy ;
12501: CALL 4537 0 0
// convoyCounter := convoyCounter - 1 ;
12505: LD_ADDR_EXP 16
12509: PUSH
12510: LD_EXP 16
12514: PUSH
12515: LD_INT 1
12517: MINUS
12518: ST_TO_ADDR
// until convoyCounter <= 0 ;
12519: LD_EXP 16
12523: PUSH
12524: LD_INT 0
12526: LESSEQUAL
12527: IFFALSE 12486
// end ;
12529: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
12530: LD_EXP 15
12534: PUSH
12535: LD_INT 10
12537: GREATEREQUAL
12538: IFFALSE 12555
12540: GO 12542
12542: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
12543: LD_EXP 31
12547: PPUSH
12548: LD_STRING DOm-Fail-1
12550: PPUSH
12551: CALL_OW 94
12555: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
12556: LD_EXP 39
12560: NOT
12561: PUSH
12562: LD_EXP 40
12566: NOT
12567: AND
12568: IFFALSE 12580
12570: GO 12572
12572: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
12573: LD_STRING RaiderDone
12575: PPUSH
12576: CALL_OW 337
12580: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
12581: LD_INT 22
12583: PUSH
12584: LD_INT 2
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: PUSH
12591: LD_INT 33
12593: PUSH
12594: LD_INT 2
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PPUSH
12605: CALL_OW 69
12609: PUSH
12610: LD_INT 3
12612: GREATEREQUAL
12613: PUSH
12614: LD_INT 22
12616: PUSH
12617: LD_INT 2
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: PUSH
12624: LD_INT 34
12626: PUSH
12627: LD_INT 31
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: PPUSH
12638: CALL_OW 69
12642: PUSH
12643: LD_INT 2
12645: GREATEREQUAL
12646: AND
12647: IFFALSE 12659
12649: GO 12651
12651: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
12652: LD_STRING RemoteControlDone
12654: PPUSH
12655: CALL_OW 337
12659: END
// every 0 0$1 trigger convoyCounter = 0 and not ruConvoySquad do var tmp ;
12660: LD_EXP 16
12664: PUSH
12665: LD_INT 0
12667: EQUAL
12668: PUSH
12669: LD_EXP 41
12673: NOT
12674: AND
12675: IFFALSE 13463
12677: GO 12679
12679: DISABLE
12680: LD_INT 0
12682: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
12683: LD_STRING ReinforcementsDone
12685: PPUSH
12686: CALL_OW 337
// music_class := music_victory ;
12690: LD_ADDR_OWVAR 72
12694: PUSH
12695: LD_INT 4
12697: ST_TO_ADDR
// InGameOn ;
12698: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
12702: LD_EXP 21
12706: PPUSH
12707: LD_STRING DH-end-1
12709: PPUSH
12710: CALL_OW 88
// wait ( 0 0$2 ) ;
12714: LD_INT 70
12716: PPUSH
12717: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
12721: LD_EXP 29
12725: PPUSH
12726: LD_STRING DShar-end-2
12728: PPUSH
12729: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
12733: LD_EXP 39
12737: NOT
12738: PUSH
12739: LD_EXP 40
12743: NOT
12744: AND
12745: IFFALSE 12761
// begin Say ( Heike , DH-end-3 ) ;
12747: LD_EXP 21
12751: PPUSH
12752: LD_STRING DH-end-3
12754: PPUSH
12755: CALL_OW 88
// end else
12759: GO 12858
// begin Say ( Heike , DH-end-a-3 ) ;
12761: LD_EXP 21
12765: PPUSH
12766: LD_STRING DH-end-a-3
12768: PPUSH
12769: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
12773: LD_EXP 29
12777: PPUSH
12778: LD_STRING DShar-end-a-4
12780: PPUSH
12781: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
12785: LD_EXP 21
12789: PPUSH
12790: LD_STRING DH-end-a-5
12792: PPUSH
12793: CALL_OW 88
// InGameOff ;
12797: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
12801: LD_INT 35
12803: PPUSH
12804: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
12808: LD_INT 22
12810: PUSH
12811: LD_INT 3
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: PUSH
12818: LD_INT 21
12820: PUSH
12821: LD_INT 1
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: PPUSH
12832: CALL_OW 69
12836: PUSH
12837: LD_INT 0
12839: EQUAL
12840: IFFALSE 12801
// InGameOn ;
12842: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
12846: LD_EXP 21
12850: PPUSH
12851: LD_STRING DH-end-a-6
12853: PPUSH
12854: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
12858: LD_EXP 29
12862: PPUSH
12863: LD_STRING DShar-end-3
12865: PPUSH
12866: CALL_OW 94
// if not flamethrowerBuilt then
12870: LD_EXP 20
12874: NOT
12875: IFFALSE 12884
// SetAchievement ( ACH_FIRE ) ;
12877: LD_STRING ACH_FIRE
12879: PPUSH
12880: CALL_OW 543
// if drugsTested then
12884: LD_EXP 6
12888: IFFALSE 12902
// AddMedal ( med1 , 1 ) else
12890: LD_STRING med1
12892: PPUSH
12893: LD_INT 1
12895: PPUSH
12896: CALL_OW 101
12900: GO 12913
// AddMedal ( med1 , - 1 ) ;
12902: LD_STRING med1
12904: PPUSH
12905: LD_INT 1
12907: NEG
12908: PPUSH
12909: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 then
12913: LD_INT 22
12915: PUSH
12916: LD_INT 2
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: LD_INT 33
12925: PUSH
12926: LD_INT 2
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: PPUSH
12937: CALL_OW 69
12941: PUSH
12942: LD_INT 3
12944: GREATEREQUAL
12945: PUSH
12946: LD_INT 22
12948: PUSH
12949: LD_INT 2
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: PUSH
12956: LD_INT 34
12958: PUSH
12959: LD_INT 31
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: PPUSH
12970: CALL_OW 69
12974: PUSH
12975: LD_INT 2
12977: GREATEREQUAL
12978: AND
12979: IFFALSE 12993
// AddMedal ( med2 , 1 ) else
12981: LD_STRING med2
12983: PPUSH
12984: LD_INT 1
12986: PPUSH
12987: CALL_OW 101
12991: GO 13004
// AddMedal ( med2 , - 1 ) ;
12993: LD_STRING med2
12995: PPUSH
12996: LD_INT 1
12998: NEG
12999: PPUSH
13000: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 ] [ Difficulty ] then
13004: LD_EXP 15
13008: PUSH
13009: LD_INT 10
13011: PUSH
13012: LD_INT 8
13014: PUSH
13015: LD_INT 6
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: LIST
13022: PUSH
13023: LD_OWVAR 67
13027: ARRAY
13028: LESS
13029: IFFALSE 13043
// AddMedal ( med3 , 1 ) else
13031: LD_STRING med3
13033: PPUSH
13034: LD_INT 1
13036: PPUSH
13037: CALL_OW 101
13041: GO 13054
// AddMedal ( med3 , - 1 ) ;
13043: LD_STRING med3
13045: PPUSH
13046: LD_INT 1
13048: NEG
13049: PPUSH
13050: CALL_OW 101
// GiveMedals ( MAIN ) ;
13054: LD_STRING MAIN
13056: PPUSH
13057: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13061: LD_INT 22
13063: PUSH
13064: LD_INT 2
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PUSH
13071: LD_INT 23
13073: PUSH
13074: LD_INT 2
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: PUSH
13081: LD_INT 21
13083: PUSH
13084: LD_INT 1
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: LIST
13095: PPUSH
13096: CALL_OW 69
13100: PPUSH
13101: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
13105: LD_EXP 15
13109: PPUSH
13110: LD_STRING 05_ConvoySavedCounter
13112: PPUSH
13113: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
13117: LD_EXP 13
13121: PPUSH
13122: LD_STRING 05_Radar
13124: PPUSH
13125: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
13129: LD_EXP 6
13133: PPUSH
13134: LD_STRING 05_DrugsTested
13136: PPUSH
13137: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
13141: LD_INT 22
13143: PUSH
13144: LD_INT 2
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PUSH
13151: LD_INT 33
13153: PUSH
13154: LD_INT 2
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PPUSH
13165: CALL_OW 69
13169: PUSH
13170: LD_INT 3
13172: GREATEREQUAL
13173: PUSH
13174: LD_INT 22
13176: PUSH
13177: LD_INT 2
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: PUSH
13184: LD_INT 34
13186: PUSH
13187: LD_INT 31
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PPUSH
13198: CALL_OW 69
13202: PUSH
13203: LD_INT 2
13205: GREATEREQUAL
13206: AND
13207: PPUSH
13208: LD_STRING 05_RemoteControl
13210: PPUSH
13211: CALL_OW 39
// SaveCharacters ( Heike , 05_Heike ) ;
13215: LD_EXP 21
13219: PPUSH
13220: LD_STRING 05_Heike
13222: PPUSH
13223: CALL_OW 38
// if Aviradze then
13227: LD_EXP 33
13231: IFFALSE 13245
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
13233: LD_EXP 33
13237: PPUSH
13238: LD_STRING 05_Aviradze
13240: PPUSH
13241: CALL_OW 38
// if Ibrahim then
13245: LD_EXP 24
13249: IFFALSE 13263
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
13251: LD_EXP 24
13255: PPUSH
13256: LD_STRING 05_Ibrahim
13258: PPUSH
13259: CALL_OW 38
// if Kamil then
13263: LD_EXP 25
13267: IFFALSE 13281
// SaveCharacters ( Kamil , 05_Kamil ) ;
13269: LD_EXP 25
13273: PPUSH
13274: LD_STRING 05_Kamil
13276: PPUSH
13277: CALL_OW 38
// if Sophia then
13281: LD_EXP 27
13285: IFFALSE 13299
// SaveCharacters ( Sophia , 05_Sophia ) ;
13287: LD_EXP 27
13291: PPUSH
13292: LD_STRING 05_Sophia
13294: PPUSH
13295: CALL_OW 38
// if Kaia then
13299: LD_EXP 26
13303: IFFALSE 13317
// SaveCharacters ( Kaia , 05_Kaia ) ;
13305: LD_EXP 26
13309: PPUSH
13310: LD_STRING 05_Kaia
13312: PPUSH
13313: CALL_OW 38
// if Givi then
13317: LD_EXP 22
13321: IFFALSE 13335
// SaveCharacters ( Givi , 05_Givi ) ;
13323: LD_EXP 22
13327: PPUSH
13328: LD_STRING 05_Givi
13330: PPUSH
13331: CALL_OW 38
// if Mike then
13335: LD_EXP 23
13339: IFFALSE 13353
// SaveCharacters ( Mike , 05_Mike ) ;
13341: LD_EXP 23
13345: PPUSH
13346: LD_STRING 05_Mike
13348: PPUSH
13349: CALL_OW 38
// if Markov then
13353: LD_EXP 28
13357: IFFALSE 13371
// SaveCharacters ( Markov , 05_Markov ) ;
13359: LD_EXP 28
13363: PPUSH
13364: LD_STRING 05_Markov
13366: PPUSH
13367: CALL_OW 38
// if Kurt then
13371: LD_EXP 32
13375: IFFALSE 13389
// SaveCharacters ( Kurt , 05_Kurt ) ;
13377: LD_EXP 32
13381: PPUSH
13382: LD_STRING 05_Kurt
13384: PPUSH
13385: CALL_OW 38
// if heikeSecondSquad then
13389: LD_EXP 34
13393: IFFALSE 13407
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
13395: LD_EXP 34
13399: PPUSH
13400: LD_STRING 05_others
13402: PPUSH
13403: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
13407: LD_ADDR_VAR 0 1
13411: PUSH
13412: LD_INT 22
13414: PUSH
13415: LD_INT 2
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PUSH
13422: LD_INT 23
13424: PUSH
13425: LD_INT 0
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: PPUSH
13436: CALL_OW 69
13440: ST_TO_ADDR
// if tmp then
13441: LD_VAR 0 1
13445: IFFALSE 13459
// SaveCharacters ( tmp , 05_apes ) ;
13447: LD_VAR 0 1
13451: PPUSH
13452: LD_STRING 05_apes
13454: PPUSH
13455: CALL_OW 38
// YouWin ;
13459: CALL_OW 103
// end ; end_of_file
13463: PPOPN 1
13465: END
// every 0 0$40 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
13466: LD_EXP 9
13470: PUSH
13471: LD_INT 13
13473: PPUSH
13474: LD_INT 1
13476: PPUSH
13477: CALL_OW 287
13481: PUSH
13482: LD_INT 25
13484: LESS
13485: AND
13486: IFFALSE 13513
13488: GO 13490
13490: DISABLE
// begin enable ;
13491: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
13492: LD_INT 1
13494: PPUSH
13495: LD_INT 5
13497: PPUSH
13498: CALL_OW 12
13502: PPUSH
13503: LD_INT 13
13505: PPUSH
13506: LD_INT 1
13508: PPUSH
13509: CALL_OW 55
// end ; end_of_file
13513: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
13514: LD_INT 0
13516: PPUSH
// ar_crane := 88 ;
13517: LD_ADDR_EXP 50
13521: PUSH
13522: LD_INT 88
13524: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
13525: LD_ADDR_EXP 45
13529: PUSH
13530: LD_INT 89
13532: ST_TO_ADDR
// us_hack := 99 ;
13533: LD_ADDR_EXP 46
13537: PUSH
13538: LD_INT 99
13540: ST_TO_ADDR
// us_artillery := 97 ;
13541: LD_ADDR_EXP 47
13545: PUSH
13546: LD_INT 97
13548: ST_TO_ADDR
// ar_bio_bomb := 91 ;
13549: LD_ADDR_EXP 48
13553: PUSH
13554: LD_INT 91
13556: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
13557: LD_ADDR_EXP 49
13561: PUSH
13562: LD_INT 92
13564: ST_TO_ADDR
// ru_radar := 98 ;
13565: LD_ADDR_EXP 44
13569: PUSH
13570: LD_INT 98
13572: ST_TO_ADDR
// tech_Artillery := 80 ;
13573: LD_ADDR_EXP 51
13577: PUSH
13578: LD_INT 80
13580: ST_TO_ADDR
// tech_RadMat := 81 ;
13581: LD_ADDR_EXP 52
13585: PUSH
13586: LD_INT 81
13588: ST_TO_ADDR
// tech_BasicTools := 82 ;
13589: LD_ADDR_EXP 53
13593: PUSH
13594: LD_INT 82
13596: ST_TO_ADDR
// tech_Cargo := 83 ;
13597: LD_ADDR_EXP 54
13601: PUSH
13602: LD_INT 83
13604: ST_TO_ADDR
// tech_Track := 84 ;
13605: LD_ADDR_EXP 55
13609: PUSH
13610: LD_INT 84
13612: ST_TO_ADDR
// tech_Crane := 85 ;
13613: LD_ADDR_EXP 56
13617: PUSH
13618: LD_INT 85
13620: ST_TO_ADDR
// tech_Bulldozer := 86 ;
13621: LD_ADDR_EXP 57
13625: PUSH
13626: LD_INT 86
13628: ST_TO_ADDR
// tech_Hovercraft := 87 ;
13629: LD_ADDR_EXP 58
13633: PUSH
13634: LD_INT 87
13636: ST_TO_ADDR
// end ;
13637: LD_VAR 0 1
13641: RET
// every 1 do
13642: GO 13644
13644: DISABLE
// InitGlobalVariables ; end_of_file
13645: CALL 13514 0 0
13649: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
13650: LD_INT 0
13652: PPUSH
13653: PPUSH
13654: PPUSH
13655: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
13656: LD_VAR 0 1
13660: PPUSH
13661: CALL_OW 264
13665: PUSH
13666: LD_EXP 48
13670: EQUAL
13671: IFFALSE 13743
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
13673: LD_INT 68
13675: PPUSH
13676: LD_VAR 0 1
13680: PPUSH
13681: CALL_OW 255
13685: PPUSH
13686: CALL_OW 321
13690: PUSH
13691: LD_INT 2
13693: EQUAL
13694: IFFALSE 13706
// eff := 70 else
13696: LD_ADDR_VAR 0 4
13700: PUSH
13701: LD_INT 70
13703: ST_TO_ADDR
13704: GO 13714
// eff := 30 ;
13706: LD_ADDR_VAR 0 4
13710: PUSH
13711: LD_INT 30
13713: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
13714: LD_VAR 0 1
13718: PPUSH
13719: CALL_OW 250
13723: PPUSH
13724: LD_VAR 0 1
13728: PPUSH
13729: CALL_OW 251
13733: PPUSH
13734: LD_VAR 0 4
13738: PPUSH
13739: CALL_OW 495
// end ; end ;
13743: LD_VAR 0 2
13747: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
13748: LD_INT 0
13750: PPUSH
// end ;
13751: LD_VAR 0 4
13755: RET
// export function SOS_Command ( cmd ) ; begin
13756: LD_INT 0
13758: PPUSH
// end ;
13759: LD_VAR 0 2
13763: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
13764: LD_VAR 0 1
13768: PUSH
13769: LD_INT 254
13771: EQUAL
13772: PUSH
13773: LD_VAR 0 2
13777: PPUSH
13778: CALL_OW 264
13782: PUSH
13783: LD_EXP 46
13787: EQUAL
13788: AND
13789: PUSH
13790: LD_VAR 0 3
13794: PPUSH
13795: CALL_OW 263
13799: PUSH
13800: LD_INT 3
13802: EQUAL
13803: AND
13804: IFFALSE 13820
// HackDestroyVehicle ( unit , selectedUnit ) ;
13806: LD_VAR 0 2
13810: PPUSH
13811: LD_VAR 0 3
13815: PPUSH
13816: CALL 15327 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
13820: LD_VAR 0 1
13824: PUSH
13825: LD_INT 255
13827: EQUAL
13828: PUSH
13829: LD_VAR 0 2
13833: PPUSH
13834: CALL_OW 264
13838: PUSH
13839: LD_INT 14
13841: PUSH
13842: LD_INT 53
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: IN
13849: AND
13850: PUSH
13851: LD_VAR 0 4
13855: PPUSH
13856: LD_VAR 0 5
13860: PPUSH
13861: CALL_OW 488
13865: AND
13866: IFFALSE 13890
// CutTreeXYR ( unit , x , y , 12 ) ;
13868: LD_VAR 0 2
13872: PPUSH
13873: LD_VAR 0 4
13877: PPUSH
13878: LD_VAR 0 5
13882: PPUSH
13883: LD_INT 12
13885: PPUSH
13886: CALL 13893 0 4
// end ;
13890: PPOPN 5
13892: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
13893: LD_INT 0
13895: PPUSH
13896: PPUSH
13897: PPUSH
13898: PPUSH
13899: PPUSH
13900: PPUSH
13901: PPUSH
13902: PPUSH
13903: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
13904: LD_VAR 0 1
13908: NOT
13909: PUSH
13910: LD_VAR 0 2
13914: PPUSH
13915: LD_VAR 0 3
13919: PPUSH
13920: CALL_OW 488
13924: NOT
13925: OR
13926: PUSH
13927: LD_VAR 0 4
13931: NOT
13932: OR
13933: IFFALSE 13937
// exit ;
13935: GO 14277
// list := [ ] ;
13937: LD_ADDR_VAR 0 13
13941: PUSH
13942: EMPTY
13943: ST_TO_ADDR
// if x - r < 0 then
13944: LD_VAR 0 2
13948: PUSH
13949: LD_VAR 0 4
13953: MINUS
13954: PUSH
13955: LD_INT 0
13957: LESS
13958: IFFALSE 13970
// min_x := 0 else
13960: LD_ADDR_VAR 0 7
13964: PUSH
13965: LD_INT 0
13967: ST_TO_ADDR
13968: GO 13986
// min_x := x - r ;
13970: LD_ADDR_VAR 0 7
13974: PUSH
13975: LD_VAR 0 2
13979: PUSH
13980: LD_VAR 0 4
13984: MINUS
13985: ST_TO_ADDR
// if y - r < 0 then
13986: LD_VAR 0 3
13990: PUSH
13991: LD_VAR 0 4
13995: MINUS
13996: PUSH
13997: LD_INT 0
13999: LESS
14000: IFFALSE 14012
// min_y := 0 else
14002: LD_ADDR_VAR 0 8
14006: PUSH
14007: LD_INT 0
14009: ST_TO_ADDR
14010: GO 14028
// min_y := y - r ;
14012: LD_ADDR_VAR 0 8
14016: PUSH
14017: LD_VAR 0 3
14021: PUSH
14022: LD_VAR 0 4
14026: MINUS
14027: ST_TO_ADDR
// max_x := x + r ;
14028: LD_ADDR_VAR 0 9
14032: PUSH
14033: LD_VAR 0 2
14037: PUSH
14038: LD_VAR 0 4
14042: PLUS
14043: ST_TO_ADDR
// max_y := y + r ;
14044: LD_ADDR_VAR 0 10
14048: PUSH
14049: LD_VAR 0 3
14053: PUSH
14054: LD_VAR 0 4
14058: PLUS
14059: ST_TO_ADDR
// for _x = min_x to max_x do
14060: LD_ADDR_VAR 0 11
14064: PUSH
14065: DOUBLE
14066: LD_VAR 0 7
14070: DEC
14071: ST_TO_ADDR
14072: LD_VAR 0 9
14076: PUSH
14077: FOR_TO
14078: IFFALSE 14195
// for _y = min_y to max_y do
14080: LD_ADDR_VAR 0 12
14084: PUSH
14085: DOUBLE
14086: LD_VAR 0 8
14090: DEC
14091: ST_TO_ADDR
14092: LD_VAR 0 10
14096: PUSH
14097: FOR_TO
14098: IFFALSE 14191
// begin if not ValidHex ( _x , _y ) then
14100: LD_VAR 0 11
14104: PPUSH
14105: LD_VAR 0 12
14109: PPUSH
14110: CALL_OW 488
14114: NOT
14115: IFFALSE 14119
// continue ;
14117: GO 14097
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
14119: LD_VAR 0 11
14123: PPUSH
14124: LD_VAR 0 12
14128: PPUSH
14129: CALL_OW 351
14133: PUSH
14134: LD_VAR 0 11
14138: PPUSH
14139: LD_VAR 0 12
14143: PPUSH
14144: CALL_OW 554
14148: AND
14149: IFFALSE 14189
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
14151: LD_ADDR_VAR 0 13
14155: PUSH
14156: LD_VAR 0 13
14160: PPUSH
14161: LD_VAR 0 13
14165: PUSH
14166: LD_INT 1
14168: PLUS
14169: PPUSH
14170: LD_VAR 0 11
14174: PUSH
14175: LD_VAR 0 12
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: PPUSH
14184: CALL_OW 2
14188: ST_TO_ADDR
// end ;
14189: GO 14097
14191: POP
14192: POP
14193: GO 14077
14195: POP
14196: POP
// if not list then
14197: LD_VAR 0 13
14201: NOT
14202: IFFALSE 14206
// exit ;
14204: GO 14277
// for i in list do
14206: LD_ADDR_VAR 0 6
14210: PUSH
14211: LD_VAR 0 13
14215: PUSH
14216: FOR_IN
14217: IFFALSE 14275
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
14219: LD_VAR 0 1
14223: PPUSH
14224: LD_STRING M
14226: PUSH
14227: LD_VAR 0 6
14231: PUSH
14232: LD_INT 1
14234: ARRAY
14235: PUSH
14236: LD_VAR 0 6
14240: PUSH
14241: LD_INT 2
14243: ARRAY
14244: PUSH
14245: LD_INT 0
14247: PUSH
14248: LD_INT 0
14250: PUSH
14251: LD_INT 0
14253: PUSH
14254: LD_INT 0
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: PUSH
14266: EMPTY
14267: LIST
14268: PPUSH
14269: CALL_OW 447
14273: GO 14216
14275: POP
14276: POP
// end ;
14277: LD_VAR 0 5
14281: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
14282: LD_EXP 59
14286: NOT
14287: IFFALSE 14337
14289: GO 14291
14291: DISABLE
// begin initHack := true ;
14292: LD_ADDR_EXP 59
14296: PUSH
14297: LD_INT 1
14299: ST_TO_ADDR
// hackTanks := [ ] ;
14300: LD_ADDR_EXP 60
14304: PUSH
14305: EMPTY
14306: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
14307: LD_ADDR_EXP 61
14311: PUSH
14312: EMPTY
14313: ST_TO_ADDR
// hackLimit := 3 ;
14314: LD_ADDR_EXP 62
14318: PUSH
14319: LD_INT 3
14321: ST_TO_ADDR
// hackDist := 12 ;
14322: LD_ADDR_EXP 63
14326: PUSH
14327: LD_INT 12
14329: ST_TO_ADDR
// hackCounter := [ ] ;
14330: LD_ADDR_EXP 64
14334: PUSH
14335: EMPTY
14336: ST_TO_ADDR
// end ;
14337: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
14338: LD_EXP 59
14342: PUSH
14343: LD_INT 34
14345: PUSH
14346: LD_EXP 46
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PPUSH
14355: CALL_OW 69
14359: AND
14360: IFFALSE 14615
14362: GO 14364
14364: DISABLE
14365: LD_INT 0
14367: PPUSH
14368: PPUSH
// begin enable ;
14369: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
14370: LD_ADDR_VAR 0 1
14374: PUSH
14375: LD_INT 34
14377: PUSH
14378: LD_EXP 46
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: PPUSH
14387: CALL_OW 69
14391: PUSH
14392: FOR_IN
14393: IFFALSE 14613
// begin if not i in hackTanks then
14395: LD_VAR 0 1
14399: PUSH
14400: LD_EXP 60
14404: IN
14405: NOT
14406: IFFALSE 14489
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
14408: LD_ADDR_EXP 60
14412: PUSH
14413: LD_EXP 60
14417: PPUSH
14418: LD_EXP 60
14422: PUSH
14423: LD_INT 1
14425: PLUS
14426: PPUSH
14427: LD_VAR 0 1
14431: PPUSH
14432: CALL_OW 1
14436: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
14437: LD_ADDR_EXP 61
14441: PUSH
14442: LD_EXP 61
14446: PPUSH
14447: LD_EXP 61
14451: PUSH
14452: LD_INT 1
14454: PLUS
14455: PPUSH
14456: EMPTY
14457: PPUSH
14458: CALL_OW 1
14462: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
14463: LD_ADDR_EXP 64
14467: PUSH
14468: LD_EXP 64
14472: PPUSH
14473: LD_EXP 64
14477: PUSH
14478: LD_INT 1
14480: PLUS
14481: PPUSH
14482: EMPTY
14483: PPUSH
14484: CALL_OW 1
14488: ST_TO_ADDR
// end ; if not IsOk ( i ) then
14489: LD_VAR 0 1
14493: PPUSH
14494: CALL_OW 302
14498: NOT
14499: IFFALSE 14512
// begin HackUnlinkAll ( i ) ;
14501: LD_VAR 0 1
14505: PPUSH
14506: CALL 14618 0 1
// continue ;
14510: GO 14392
// end ; HackCheckCapturedStatus ( i ) ;
14512: LD_VAR 0 1
14516: PPUSH
14517: CALL 15061 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
14521: LD_ADDR_VAR 0 2
14525: PUSH
14526: LD_INT 81
14528: PUSH
14529: LD_VAR 0 1
14533: PPUSH
14534: CALL_OW 255
14538: PUSH
14539: EMPTY
14540: LIST
14541: LIST
14542: PUSH
14543: LD_INT 33
14545: PUSH
14546: LD_INT 3
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: PUSH
14553: LD_INT 91
14555: PUSH
14556: LD_VAR 0 1
14560: PUSH
14561: LD_EXP 63
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: LIST
14570: PUSH
14571: LD_INT 50
14573: PUSH
14574: EMPTY
14575: LIST
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: PPUSH
14583: CALL_OW 69
14587: ST_TO_ADDR
// if not tmp then
14588: LD_VAR 0 2
14592: NOT
14593: IFFALSE 14597
// continue ;
14595: GO 14392
// HackLink ( i , tmp ) ;
14597: LD_VAR 0 1
14601: PPUSH
14602: LD_VAR 0 2
14606: PPUSH
14607: CALL 14754 0 2
// end ;
14611: GO 14392
14613: POP
14614: POP
// end ;
14615: PPOPN 2
14617: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
14618: LD_INT 0
14620: PPUSH
14621: PPUSH
14622: PPUSH
// if not hack in hackTanks then
14623: LD_VAR 0 1
14627: PUSH
14628: LD_EXP 60
14632: IN
14633: NOT
14634: IFFALSE 14638
// exit ;
14636: GO 14749
// index := GetElementIndex ( hackTanks , hack ) ;
14638: LD_ADDR_VAR 0 4
14642: PUSH
14643: LD_EXP 60
14647: PPUSH
14648: LD_VAR 0 1
14652: PPUSH
14653: CALL 31220 0 2
14657: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
14658: LD_EXP 61
14662: PUSH
14663: LD_VAR 0 4
14667: ARRAY
14668: IFFALSE 14749
// begin for i in hackTanksCaptured [ index ] do
14670: LD_ADDR_VAR 0 3
14674: PUSH
14675: LD_EXP 61
14679: PUSH
14680: LD_VAR 0 4
14684: ARRAY
14685: PUSH
14686: FOR_IN
14687: IFFALSE 14713
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
14689: LD_VAR 0 3
14693: PUSH
14694: LD_INT 1
14696: ARRAY
14697: PPUSH
14698: LD_VAR 0 3
14702: PUSH
14703: LD_INT 2
14705: ARRAY
14706: PPUSH
14707: CALL_OW 235
14711: GO 14686
14713: POP
14714: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
14715: LD_ADDR_EXP 61
14719: PUSH
14720: LD_EXP 61
14724: PPUSH
14725: LD_VAR 0 4
14729: PPUSH
14730: EMPTY
14731: PPUSH
14732: CALL_OW 1
14736: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
14737: LD_VAR 0 1
14741: PPUSH
14742: LD_INT 0
14744: PPUSH
14745: CALL_OW 505
// end ; end ;
14749: LD_VAR 0 2
14753: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
14754: LD_INT 0
14756: PPUSH
14757: PPUSH
14758: PPUSH
// if not hack in hackTanks or not vehicles then
14759: LD_VAR 0 1
14763: PUSH
14764: LD_EXP 60
14768: IN
14769: NOT
14770: PUSH
14771: LD_VAR 0 2
14775: NOT
14776: OR
14777: IFFALSE 14781
// exit ;
14779: GO 15056
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
14781: LD_ADDR_VAR 0 2
14785: PUSH
14786: LD_VAR 0 1
14790: PPUSH
14791: LD_VAR 0 2
14795: PPUSH
14796: LD_INT 1
14798: PPUSH
14799: LD_INT 1
14801: PPUSH
14802: CALL 31870 0 4
14806: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
14807: LD_ADDR_VAR 0 5
14811: PUSH
14812: LD_EXP 60
14816: PPUSH
14817: LD_VAR 0 1
14821: PPUSH
14822: CALL 31220 0 2
14826: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
14827: LD_EXP 61
14831: PUSH
14832: LD_VAR 0 5
14836: ARRAY
14837: PUSH
14838: LD_EXP 62
14842: LESS
14843: IFFALSE 15032
// begin for i := 1 to vehicles do
14845: LD_ADDR_VAR 0 4
14849: PUSH
14850: DOUBLE
14851: LD_INT 1
14853: DEC
14854: ST_TO_ADDR
14855: LD_VAR 0 2
14859: PUSH
14860: FOR_TO
14861: IFFALSE 15030
// begin if hackTanksCaptured [ index ] = hackLimit then
14863: LD_EXP 61
14867: PUSH
14868: LD_VAR 0 5
14872: ARRAY
14873: PUSH
14874: LD_EXP 62
14878: EQUAL
14879: IFFALSE 14883
// break ;
14881: GO 15030
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
14883: LD_ADDR_EXP 64
14887: PUSH
14888: LD_EXP 64
14892: PPUSH
14893: LD_VAR 0 5
14897: PPUSH
14898: LD_EXP 64
14902: PUSH
14903: LD_VAR 0 5
14907: ARRAY
14908: PUSH
14909: LD_INT 1
14911: PLUS
14912: PPUSH
14913: CALL_OW 1
14917: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
14918: LD_ADDR_EXP 61
14922: PUSH
14923: LD_EXP 61
14927: PPUSH
14928: LD_VAR 0 5
14932: PUSH
14933: LD_EXP 61
14937: PUSH
14938: LD_VAR 0 5
14942: ARRAY
14943: PUSH
14944: LD_INT 1
14946: PLUS
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: PPUSH
14952: LD_VAR 0 2
14956: PUSH
14957: LD_VAR 0 4
14961: ARRAY
14962: PUSH
14963: LD_VAR 0 2
14967: PUSH
14968: LD_VAR 0 4
14972: ARRAY
14973: PPUSH
14974: CALL_OW 255
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: PPUSH
14983: CALL 31435 0 3
14987: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
14988: LD_VAR 0 2
14992: PUSH
14993: LD_VAR 0 4
14997: ARRAY
14998: PPUSH
14999: LD_VAR 0 1
15003: PPUSH
15004: CALL_OW 255
15008: PPUSH
15009: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
15013: LD_VAR 0 2
15017: PUSH
15018: LD_VAR 0 4
15022: ARRAY
15023: PPUSH
15024: CALL_OW 141
// end ;
15028: GO 14860
15030: POP
15031: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
15032: LD_VAR 0 1
15036: PPUSH
15037: LD_EXP 61
15041: PUSH
15042: LD_VAR 0 5
15046: ARRAY
15047: PUSH
15048: LD_INT 0
15050: PLUS
15051: PPUSH
15052: CALL_OW 505
// end ;
15056: LD_VAR 0 3
15060: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
15061: LD_INT 0
15063: PPUSH
15064: PPUSH
15065: PPUSH
15066: PPUSH
// if not hack in hackTanks then
15067: LD_VAR 0 1
15071: PUSH
15072: LD_EXP 60
15076: IN
15077: NOT
15078: IFFALSE 15082
// exit ;
15080: GO 15322
// index := GetElementIndex ( hackTanks , hack ) ;
15082: LD_ADDR_VAR 0 4
15086: PUSH
15087: LD_EXP 60
15091: PPUSH
15092: LD_VAR 0 1
15096: PPUSH
15097: CALL 31220 0 2
15101: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
15102: LD_ADDR_VAR 0 3
15106: PUSH
15107: DOUBLE
15108: LD_EXP 61
15112: PUSH
15113: LD_VAR 0 4
15117: ARRAY
15118: INC
15119: ST_TO_ADDR
15120: LD_INT 1
15122: PUSH
15123: FOR_DOWNTO
15124: IFFALSE 15296
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
15126: LD_ADDR_VAR 0 5
15130: PUSH
15131: LD_EXP 61
15135: PUSH
15136: LD_VAR 0 4
15140: ARRAY
15141: PUSH
15142: LD_VAR 0 3
15146: ARRAY
15147: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
15148: LD_VAR 0 5
15152: PUSH
15153: LD_INT 1
15155: ARRAY
15156: PPUSH
15157: CALL_OW 302
15161: NOT
15162: PUSH
15163: LD_VAR 0 5
15167: PUSH
15168: LD_INT 1
15170: ARRAY
15171: PPUSH
15172: CALL_OW 255
15176: PUSH
15177: LD_VAR 0 1
15181: PPUSH
15182: CALL_OW 255
15186: NONEQUAL
15187: OR
15188: IFFALSE 15294
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
15190: LD_VAR 0 5
15194: PUSH
15195: LD_INT 1
15197: ARRAY
15198: PPUSH
15199: CALL_OW 305
15203: PUSH
15204: LD_VAR 0 5
15208: PUSH
15209: LD_INT 1
15211: ARRAY
15212: PPUSH
15213: CALL_OW 255
15217: PUSH
15218: LD_VAR 0 1
15222: PPUSH
15223: CALL_OW 255
15227: EQUAL
15228: AND
15229: IFFALSE 15253
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
15231: LD_VAR 0 5
15235: PUSH
15236: LD_INT 1
15238: ARRAY
15239: PPUSH
15240: LD_VAR 0 5
15244: PUSH
15245: LD_INT 2
15247: ARRAY
15248: PPUSH
15249: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
15253: LD_ADDR_EXP 61
15257: PUSH
15258: LD_EXP 61
15262: PPUSH
15263: LD_VAR 0 4
15267: PPUSH
15268: LD_EXP 61
15272: PUSH
15273: LD_VAR 0 4
15277: ARRAY
15278: PPUSH
15279: LD_VAR 0 3
15283: PPUSH
15284: CALL_OW 3
15288: PPUSH
15289: CALL_OW 1
15293: ST_TO_ADDR
// end ; end ;
15294: GO 15123
15296: POP
15297: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
15298: LD_VAR 0 1
15302: PPUSH
15303: LD_EXP 61
15307: PUSH
15308: LD_VAR 0 4
15312: ARRAY
15313: PUSH
15314: LD_INT 0
15316: PLUS
15317: PPUSH
15318: CALL_OW 505
// end ;
15322: LD_VAR 0 2
15326: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
15327: LD_INT 0
15329: PPUSH
15330: PPUSH
15331: PPUSH
15332: PPUSH
// if not hack in hackTanks then
15333: LD_VAR 0 1
15337: PUSH
15338: LD_EXP 60
15342: IN
15343: NOT
15344: IFFALSE 15348
// exit ;
15346: GO 15433
// index := GetElementIndex ( hackTanks , hack ) ;
15348: LD_ADDR_VAR 0 5
15352: PUSH
15353: LD_EXP 60
15357: PPUSH
15358: LD_VAR 0 1
15362: PPUSH
15363: CALL 31220 0 2
15367: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
15368: LD_ADDR_VAR 0 4
15372: PUSH
15373: DOUBLE
15374: LD_INT 1
15376: DEC
15377: ST_TO_ADDR
15378: LD_EXP 61
15382: PUSH
15383: LD_VAR 0 5
15387: ARRAY
15388: PUSH
15389: FOR_TO
15390: IFFALSE 15431
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
15392: LD_EXP 61
15396: PUSH
15397: LD_VAR 0 5
15401: ARRAY
15402: PUSH
15403: LD_VAR 0 4
15407: ARRAY
15408: PUSH
15409: LD_INT 1
15411: ARRAY
15412: PUSH
15413: LD_VAR 0 2
15417: EQUAL
15418: IFFALSE 15429
// KillUnit ( vehicle ) ;
15420: LD_VAR 0 2
15424: PPUSH
15425: CALL_OW 66
15429: GO 15389
15431: POP
15432: POP
// end ; end_of_file
15433: LD_VAR 0 3
15437: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
15438: GO 15440
15440: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
15441: LD_STRING initStreamRollete();
15443: PPUSH
15444: CALL_OW 559
// InitStreamMode ;
15448: CALL 15457 0 0
// DefineStreamItems ( ) ;
15452: CALL 15897 0 0
// end ;
15456: END
// function InitStreamMode ; begin
15457: LD_INT 0
15459: PPUSH
// streamModeActive := false ;
15460: LD_ADDR_EXP 65
15464: PUSH
15465: LD_INT 0
15467: ST_TO_ADDR
// normalCounter := 36 ;
15468: LD_ADDR_EXP 66
15472: PUSH
15473: LD_INT 36
15475: ST_TO_ADDR
// hardcoreCounter := 16 ;
15476: LD_ADDR_EXP 67
15480: PUSH
15481: LD_INT 16
15483: ST_TO_ADDR
// sRocket := false ;
15484: LD_ADDR_EXP 70
15488: PUSH
15489: LD_INT 0
15491: ST_TO_ADDR
// sSpeed := false ;
15492: LD_ADDR_EXP 69
15496: PUSH
15497: LD_INT 0
15499: ST_TO_ADDR
// sEngine := false ;
15500: LD_ADDR_EXP 71
15504: PUSH
15505: LD_INT 0
15507: ST_TO_ADDR
// sSpec := false ;
15508: LD_ADDR_EXP 68
15512: PUSH
15513: LD_INT 0
15515: ST_TO_ADDR
// sLevel := false ;
15516: LD_ADDR_EXP 72
15520: PUSH
15521: LD_INT 0
15523: ST_TO_ADDR
// sArmoury := false ;
15524: LD_ADDR_EXP 73
15528: PUSH
15529: LD_INT 0
15531: ST_TO_ADDR
// sRadar := false ;
15532: LD_ADDR_EXP 74
15536: PUSH
15537: LD_INT 0
15539: ST_TO_ADDR
// sBunker := false ;
15540: LD_ADDR_EXP 75
15544: PUSH
15545: LD_INT 0
15547: ST_TO_ADDR
// sHack := false ;
15548: LD_ADDR_EXP 76
15552: PUSH
15553: LD_INT 0
15555: ST_TO_ADDR
// sFire := false ;
15556: LD_ADDR_EXP 77
15560: PUSH
15561: LD_INT 0
15563: ST_TO_ADDR
// sRefresh := false ;
15564: LD_ADDR_EXP 78
15568: PUSH
15569: LD_INT 0
15571: ST_TO_ADDR
// sExp := false ;
15572: LD_ADDR_EXP 79
15576: PUSH
15577: LD_INT 0
15579: ST_TO_ADDR
// sDepot := false ;
15580: LD_ADDR_EXP 80
15584: PUSH
15585: LD_INT 0
15587: ST_TO_ADDR
// sFlag := false ;
15588: LD_ADDR_EXP 81
15592: PUSH
15593: LD_INT 0
15595: ST_TO_ADDR
// sKamikadze := false ;
15596: LD_ADDR_EXP 89
15600: PUSH
15601: LD_INT 0
15603: ST_TO_ADDR
// sTroll := false ;
15604: LD_ADDR_EXP 90
15608: PUSH
15609: LD_INT 0
15611: ST_TO_ADDR
// sSlow := false ;
15612: LD_ADDR_EXP 91
15616: PUSH
15617: LD_INT 0
15619: ST_TO_ADDR
// sLack := false ;
15620: LD_ADDR_EXP 92
15624: PUSH
15625: LD_INT 0
15627: ST_TO_ADDR
// sTank := false ;
15628: LD_ADDR_EXP 94
15632: PUSH
15633: LD_INT 0
15635: ST_TO_ADDR
// sRemote := false ;
15636: LD_ADDR_EXP 95
15640: PUSH
15641: LD_INT 0
15643: ST_TO_ADDR
// sPowell := false ;
15644: LD_ADDR_EXP 96
15648: PUSH
15649: LD_INT 0
15651: ST_TO_ADDR
// sTeleport := false ;
15652: LD_ADDR_EXP 99
15656: PUSH
15657: LD_INT 0
15659: ST_TO_ADDR
// sOilTower := false ;
15660: LD_ADDR_EXP 101
15664: PUSH
15665: LD_INT 0
15667: ST_TO_ADDR
// sShovel := false ;
15668: LD_ADDR_EXP 102
15672: PUSH
15673: LD_INT 0
15675: ST_TO_ADDR
// sSheik := false ;
15676: LD_ADDR_EXP 103
15680: PUSH
15681: LD_INT 0
15683: ST_TO_ADDR
// sEarthquake := false ;
15684: LD_ADDR_EXP 105
15688: PUSH
15689: LD_INT 0
15691: ST_TO_ADDR
// sAI := false ;
15692: LD_ADDR_EXP 106
15696: PUSH
15697: LD_INT 0
15699: ST_TO_ADDR
// sCargo := false ;
15700: LD_ADDR_EXP 109
15704: PUSH
15705: LD_INT 0
15707: ST_TO_ADDR
// sDLaser := false ;
15708: LD_ADDR_EXP 110
15712: PUSH
15713: LD_INT 0
15715: ST_TO_ADDR
// sExchange := false ;
15716: LD_ADDR_EXP 111
15720: PUSH
15721: LD_INT 0
15723: ST_TO_ADDR
// sFac := false ;
15724: LD_ADDR_EXP 112
15728: PUSH
15729: LD_INT 0
15731: ST_TO_ADDR
// sPower := false ;
15732: LD_ADDR_EXP 113
15736: PUSH
15737: LD_INT 0
15739: ST_TO_ADDR
// sRandom := false ;
15740: LD_ADDR_EXP 114
15744: PUSH
15745: LD_INT 0
15747: ST_TO_ADDR
// sShield := false ;
15748: LD_ADDR_EXP 115
15752: PUSH
15753: LD_INT 0
15755: ST_TO_ADDR
// sTime := false ;
15756: LD_ADDR_EXP 116
15760: PUSH
15761: LD_INT 0
15763: ST_TO_ADDR
// sTools := false ;
15764: LD_ADDR_EXP 117
15768: PUSH
15769: LD_INT 0
15771: ST_TO_ADDR
// sSold := false ;
15772: LD_ADDR_EXP 82
15776: PUSH
15777: LD_INT 0
15779: ST_TO_ADDR
// sDiff := false ;
15780: LD_ADDR_EXP 83
15784: PUSH
15785: LD_INT 0
15787: ST_TO_ADDR
// sFog := false ;
15788: LD_ADDR_EXP 86
15792: PUSH
15793: LD_INT 0
15795: ST_TO_ADDR
// sReset := false ;
15796: LD_ADDR_EXP 87
15800: PUSH
15801: LD_INT 0
15803: ST_TO_ADDR
// sSun := false ;
15804: LD_ADDR_EXP 88
15808: PUSH
15809: LD_INT 0
15811: ST_TO_ADDR
// sTiger := false ;
15812: LD_ADDR_EXP 84
15816: PUSH
15817: LD_INT 0
15819: ST_TO_ADDR
// sBomb := false ;
15820: LD_ADDR_EXP 85
15824: PUSH
15825: LD_INT 0
15827: ST_TO_ADDR
// sWound := false ;
15828: LD_ADDR_EXP 93
15832: PUSH
15833: LD_INT 0
15835: ST_TO_ADDR
// sBetray := false ;
15836: LD_ADDR_EXP 97
15840: PUSH
15841: LD_INT 0
15843: ST_TO_ADDR
// sContamin := false ;
15844: LD_ADDR_EXP 98
15848: PUSH
15849: LD_INT 0
15851: ST_TO_ADDR
// sOil := false ;
15852: LD_ADDR_EXP 100
15856: PUSH
15857: LD_INT 0
15859: ST_TO_ADDR
// sStu := false ;
15860: LD_ADDR_EXP 104
15864: PUSH
15865: LD_INT 0
15867: ST_TO_ADDR
// sBazooka := false ;
15868: LD_ADDR_EXP 107
15872: PUSH
15873: LD_INT 0
15875: ST_TO_ADDR
// sMortar := false ;
15876: LD_ADDR_EXP 108
15880: PUSH
15881: LD_INT 0
15883: ST_TO_ADDR
// sRanger := false ;
15884: LD_ADDR_EXP 118
15888: PUSH
15889: LD_INT 0
15891: ST_TO_ADDR
// end ;
15892: LD_VAR 0 1
15896: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
15897: LD_INT 0
15899: PPUSH
15900: PPUSH
15901: PPUSH
15902: PPUSH
15903: PPUSH
// result := [ ] ;
15904: LD_ADDR_VAR 0 1
15908: PUSH
15909: EMPTY
15910: ST_TO_ADDR
// if campaign_id = 1 then
15911: LD_OWVAR 69
15915: PUSH
15916: LD_INT 1
15918: EQUAL
15919: IFFALSE 18857
// begin case mission_number of 1 :
15921: LD_OWVAR 70
15925: PUSH
15926: LD_INT 1
15928: DOUBLE
15929: EQUAL
15930: IFTRUE 15934
15932: GO 15998
15934: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
15935: LD_ADDR_VAR 0 1
15939: PUSH
15940: LD_INT 2
15942: PUSH
15943: LD_INT 4
15945: PUSH
15946: LD_INT 11
15948: PUSH
15949: LD_INT 12
15951: PUSH
15952: LD_INT 15
15954: PUSH
15955: LD_INT 16
15957: PUSH
15958: LD_INT 22
15960: PUSH
15961: LD_INT 23
15963: PUSH
15964: LD_INT 26
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: PUSH
15978: LD_INT 101
15980: PUSH
15981: LD_INT 102
15983: PUSH
15984: LD_INT 106
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: LIST
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: ST_TO_ADDR
15996: GO 18855
15998: LD_INT 2
16000: DOUBLE
16001: EQUAL
16002: IFTRUE 16006
16004: GO 16078
16006: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
16007: LD_ADDR_VAR 0 1
16011: PUSH
16012: LD_INT 2
16014: PUSH
16015: LD_INT 4
16017: PUSH
16018: LD_INT 11
16020: PUSH
16021: LD_INT 12
16023: PUSH
16024: LD_INT 15
16026: PUSH
16027: LD_INT 16
16029: PUSH
16030: LD_INT 22
16032: PUSH
16033: LD_INT 23
16035: PUSH
16036: LD_INT 26
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: PUSH
16050: LD_INT 101
16052: PUSH
16053: LD_INT 102
16055: PUSH
16056: LD_INT 105
16058: PUSH
16059: LD_INT 106
16061: PUSH
16062: LD_INT 108
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: ST_TO_ADDR
16076: GO 18855
16078: LD_INT 3
16080: DOUBLE
16081: EQUAL
16082: IFTRUE 16086
16084: GO 16162
16086: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
16087: LD_ADDR_VAR 0 1
16091: PUSH
16092: LD_INT 2
16094: PUSH
16095: LD_INT 4
16097: PUSH
16098: LD_INT 5
16100: PUSH
16101: LD_INT 11
16103: PUSH
16104: LD_INT 12
16106: PUSH
16107: LD_INT 15
16109: PUSH
16110: LD_INT 16
16112: PUSH
16113: LD_INT 22
16115: PUSH
16116: LD_INT 26
16118: PUSH
16119: LD_INT 36
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: PUSH
16134: LD_INT 101
16136: PUSH
16137: LD_INT 102
16139: PUSH
16140: LD_INT 105
16142: PUSH
16143: LD_INT 106
16145: PUSH
16146: LD_INT 108
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: ST_TO_ADDR
16160: GO 18855
16162: LD_INT 4
16164: DOUBLE
16165: EQUAL
16166: IFTRUE 16170
16168: GO 16254
16170: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
16171: LD_ADDR_VAR 0 1
16175: PUSH
16176: LD_INT 2
16178: PUSH
16179: LD_INT 4
16181: PUSH
16182: LD_INT 5
16184: PUSH
16185: LD_INT 8
16187: PUSH
16188: LD_INT 11
16190: PUSH
16191: LD_INT 12
16193: PUSH
16194: LD_INT 15
16196: PUSH
16197: LD_INT 16
16199: PUSH
16200: LD_INT 22
16202: PUSH
16203: LD_INT 23
16205: PUSH
16206: LD_INT 26
16208: PUSH
16209: LD_INT 36
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: PUSH
16226: LD_INT 101
16228: PUSH
16229: LD_INT 102
16231: PUSH
16232: LD_INT 105
16234: PUSH
16235: LD_INT 106
16237: PUSH
16238: LD_INT 108
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: ST_TO_ADDR
16252: GO 18855
16254: LD_INT 5
16256: DOUBLE
16257: EQUAL
16258: IFTRUE 16262
16260: GO 16362
16262: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
16263: LD_ADDR_VAR 0 1
16267: PUSH
16268: LD_INT 2
16270: PUSH
16271: LD_INT 4
16273: PUSH
16274: LD_INT 5
16276: PUSH
16277: LD_INT 6
16279: PUSH
16280: LD_INT 8
16282: PUSH
16283: LD_INT 11
16285: PUSH
16286: LD_INT 12
16288: PUSH
16289: LD_INT 15
16291: PUSH
16292: LD_INT 16
16294: PUSH
16295: LD_INT 22
16297: PUSH
16298: LD_INT 23
16300: PUSH
16301: LD_INT 25
16303: PUSH
16304: LD_INT 26
16306: PUSH
16307: LD_INT 36
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: PUSH
16326: LD_INT 101
16328: PUSH
16329: LD_INT 102
16331: PUSH
16332: LD_INT 105
16334: PUSH
16335: LD_INT 106
16337: PUSH
16338: LD_INT 108
16340: PUSH
16341: LD_INT 109
16343: PUSH
16344: LD_INT 112
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: ST_TO_ADDR
16360: GO 18855
16362: LD_INT 6
16364: DOUBLE
16365: EQUAL
16366: IFTRUE 16370
16368: GO 16490
16370: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
16371: LD_ADDR_VAR 0 1
16375: PUSH
16376: LD_INT 2
16378: PUSH
16379: LD_INT 4
16381: PUSH
16382: LD_INT 5
16384: PUSH
16385: LD_INT 6
16387: PUSH
16388: LD_INT 8
16390: PUSH
16391: LD_INT 11
16393: PUSH
16394: LD_INT 12
16396: PUSH
16397: LD_INT 15
16399: PUSH
16400: LD_INT 16
16402: PUSH
16403: LD_INT 20
16405: PUSH
16406: LD_INT 21
16408: PUSH
16409: LD_INT 22
16411: PUSH
16412: LD_INT 23
16414: PUSH
16415: LD_INT 25
16417: PUSH
16418: LD_INT 26
16420: PUSH
16421: LD_INT 30
16423: PUSH
16424: LD_INT 31
16426: PUSH
16427: LD_INT 32
16429: PUSH
16430: LD_INT 36
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: PUSH
16454: LD_INT 101
16456: PUSH
16457: LD_INT 102
16459: PUSH
16460: LD_INT 105
16462: PUSH
16463: LD_INT 106
16465: PUSH
16466: LD_INT 108
16468: PUSH
16469: LD_INT 109
16471: PUSH
16472: LD_INT 112
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: PUSH
16484: EMPTY
16485: LIST
16486: LIST
16487: ST_TO_ADDR
16488: GO 18855
16490: LD_INT 7
16492: DOUBLE
16493: EQUAL
16494: IFTRUE 16498
16496: GO 16598
16498: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
16499: LD_ADDR_VAR 0 1
16503: PUSH
16504: LD_INT 2
16506: PUSH
16507: LD_INT 4
16509: PUSH
16510: LD_INT 5
16512: PUSH
16513: LD_INT 7
16515: PUSH
16516: LD_INT 11
16518: PUSH
16519: LD_INT 12
16521: PUSH
16522: LD_INT 15
16524: PUSH
16525: LD_INT 16
16527: PUSH
16528: LD_INT 20
16530: PUSH
16531: LD_INT 21
16533: PUSH
16534: LD_INT 22
16536: PUSH
16537: LD_INT 23
16539: PUSH
16540: LD_INT 25
16542: PUSH
16543: LD_INT 26
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: PUSH
16562: LD_INT 101
16564: PUSH
16565: LD_INT 102
16567: PUSH
16568: LD_INT 103
16570: PUSH
16571: LD_INT 105
16573: PUSH
16574: LD_INT 106
16576: PUSH
16577: LD_INT 108
16579: PUSH
16580: LD_INT 112
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: ST_TO_ADDR
16596: GO 18855
16598: LD_INT 8
16600: DOUBLE
16601: EQUAL
16602: IFTRUE 16606
16604: GO 16734
16606: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
16607: LD_ADDR_VAR 0 1
16611: PUSH
16612: LD_INT 2
16614: PUSH
16615: LD_INT 4
16617: PUSH
16618: LD_INT 5
16620: PUSH
16621: LD_INT 6
16623: PUSH
16624: LD_INT 7
16626: PUSH
16627: LD_INT 8
16629: PUSH
16630: LD_INT 11
16632: PUSH
16633: LD_INT 12
16635: PUSH
16636: LD_INT 15
16638: PUSH
16639: LD_INT 16
16641: PUSH
16642: LD_INT 20
16644: PUSH
16645: LD_INT 21
16647: PUSH
16648: LD_INT 22
16650: PUSH
16651: LD_INT 23
16653: PUSH
16654: LD_INT 25
16656: PUSH
16657: LD_INT 26
16659: PUSH
16660: LD_INT 30
16662: PUSH
16663: LD_INT 31
16665: PUSH
16666: LD_INT 32
16668: PUSH
16669: LD_INT 36
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: PUSH
16694: LD_INT 101
16696: PUSH
16697: LD_INT 102
16699: PUSH
16700: LD_INT 103
16702: PUSH
16703: LD_INT 105
16705: PUSH
16706: LD_INT 106
16708: PUSH
16709: LD_INT 108
16711: PUSH
16712: LD_INT 109
16714: PUSH
16715: LD_INT 112
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: ST_TO_ADDR
16732: GO 18855
16734: LD_INT 9
16736: DOUBLE
16737: EQUAL
16738: IFTRUE 16742
16740: GO 16878
16742: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
16743: LD_ADDR_VAR 0 1
16747: PUSH
16748: LD_INT 2
16750: PUSH
16751: LD_INT 4
16753: PUSH
16754: LD_INT 5
16756: PUSH
16757: LD_INT 6
16759: PUSH
16760: LD_INT 7
16762: PUSH
16763: LD_INT 8
16765: PUSH
16766: LD_INT 11
16768: PUSH
16769: LD_INT 12
16771: PUSH
16772: LD_INT 15
16774: PUSH
16775: LD_INT 16
16777: PUSH
16778: LD_INT 20
16780: PUSH
16781: LD_INT 21
16783: PUSH
16784: LD_INT 22
16786: PUSH
16787: LD_INT 23
16789: PUSH
16790: LD_INT 25
16792: PUSH
16793: LD_INT 26
16795: PUSH
16796: LD_INT 28
16798: PUSH
16799: LD_INT 30
16801: PUSH
16802: LD_INT 31
16804: PUSH
16805: LD_INT 32
16807: PUSH
16808: LD_INT 36
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: PUSH
16834: LD_INT 101
16836: PUSH
16837: LD_INT 102
16839: PUSH
16840: LD_INT 103
16842: PUSH
16843: LD_INT 105
16845: PUSH
16846: LD_INT 106
16848: PUSH
16849: LD_INT 108
16851: PUSH
16852: LD_INT 109
16854: PUSH
16855: LD_INT 112
16857: PUSH
16858: LD_INT 114
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: ST_TO_ADDR
16876: GO 18855
16878: LD_INT 10
16880: DOUBLE
16881: EQUAL
16882: IFTRUE 16886
16884: GO 17070
16886: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
16887: LD_ADDR_VAR 0 1
16891: PUSH
16892: LD_INT 2
16894: PUSH
16895: LD_INT 4
16897: PUSH
16898: LD_INT 5
16900: PUSH
16901: LD_INT 6
16903: PUSH
16904: LD_INT 7
16906: PUSH
16907: LD_INT 8
16909: PUSH
16910: LD_INT 9
16912: PUSH
16913: LD_INT 10
16915: PUSH
16916: LD_INT 11
16918: PUSH
16919: LD_INT 12
16921: PUSH
16922: LD_INT 13
16924: PUSH
16925: LD_INT 14
16927: PUSH
16928: LD_INT 15
16930: PUSH
16931: LD_INT 16
16933: PUSH
16934: LD_INT 17
16936: PUSH
16937: LD_INT 18
16939: PUSH
16940: LD_INT 19
16942: PUSH
16943: LD_INT 20
16945: PUSH
16946: LD_INT 21
16948: PUSH
16949: LD_INT 22
16951: PUSH
16952: LD_INT 23
16954: PUSH
16955: LD_INT 24
16957: PUSH
16958: LD_INT 25
16960: PUSH
16961: LD_INT 26
16963: PUSH
16964: LD_INT 28
16966: PUSH
16967: LD_INT 30
16969: PUSH
16970: LD_INT 31
16972: PUSH
16973: LD_INT 32
16975: PUSH
16976: LD_INT 36
16978: PUSH
16979: EMPTY
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 101
17012: PUSH
17013: LD_INT 102
17015: PUSH
17016: LD_INT 103
17018: PUSH
17019: LD_INT 104
17021: PUSH
17022: LD_INT 105
17024: PUSH
17025: LD_INT 106
17027: PUSH
17028: LD_INT 107
17030: PUSH
17031: LD_INT 108
17033: PUSH
17034: LD_INT 109
17036: PUSH
17037: LD_INT 110
17039: PUSH
17040: LD_INT 111
17042: PUSH
17043: LD_INT 112
17045: PUSH
17046: LD_INT 114
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: ST_TO_ADDR
17068: GO 18855
17070: LD_INT 11
17072: DOUBLE
17073: EQUAL
17074: IFTRUE 17078
17076: GO 17270
17078: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
17079: LD_ADDR_VAR 0 1
17083: PUSH
17084: LD_INT 2
17086: PUSH
17087: LD_INT 3
17089: PUSH
17090: LD_INT 4
17092: PUSH
17093: LD_INT 5
17095: PUSH
17096: LD_INT 6
17098: PUSH
17099: LD_INT 7
17101: PUSH
17102: LD_INT 8
17104: PUSH
17105: LD_INT 9
17107: PUSH
17108: LD_INT 10
17110: PUSH
17111: LD_INT 11
17113: PUSH
17114: LD_INT 12
17116: PUSH
17117: LD_INT 13
17119: PUSH
17120: LD_INT 14
17122: PUSH
17123: LD_INT 15
17125: PUSH
17126: LD_INT 16
17128: PUSH
17129: LD_INT 17
17131: PUSH
17132: LD_INT 18
17134: PUSH
17135: LD_INT 19
17137: PUSH
17138: LD_INT 20
17140: PUSH
17141: LD_INT 21
17143: PUSH
17144: LD_INT 22
17146: PUSH
17147: LD_INT 23
17149: PUSH
17150: LD_INT 24
17152: PUSH
17153: LD_INT 25
17155: PUSH
17156: LD_INT 26
17158: PUSH
17159: LD_INT 28
17161: PUSH
17162: LD_INT 30
17164: PUSH
17165: LD_INT 31
17167: PUSH
17168: LD_INT 32
17170: PUSH
17171: LD_INT 34
17173: PUSH
17174: LD_INT 36
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: PUSH
17210: LD_INT 101
17212: PUSH
17213: LD_INT 102
17215: PUSH
17216: LD_INT 103
17218: PUSH
17219: LD_INT 104
17221: PUSH
17222: LD_INT 105
17224: PUSH
17225: LD_INT 106
17227: PUSH
17228: LD_INT 107
17230: PUSH
17231: LD_INT 108
17233: PUSH
17234: LD_INT 109
17236: PUSH
17237: LD_INT 110
17239: PUSH
17240: LD_INT 111
17242: PUSH
17243: LD_INT 112
17245: PUSH
17246: LD_INT 114
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: ST_TO_ADDR
17268: GO 18855
17270: LD_INT 12
17272: DOUBLE
17273: EQUAL
17274: IFTRUE 17278
17276: GO 17486
17278: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
17279: LD_ADDR_VAR 0 1
17283: PUSH
17284: LD_INT 1
17286: PUSH
17287: LD_INT 2
17289: PUSH
17290: LD_INT 3
17292: PUSH
17293: LD_INT 4
17295: PUSH
17296: LD_INT 5
17298: PUSH
17299: LD_INT 6
17301: PUSH
17302: LD_INT 7
17304: PUSH
17305: LD_INT 8
17307: PUSH
17308: LD_INT 9
17310: PUSH
17311: LD_INT 10
17313: PUSH
17314: LD_INT 11
17316: PUSH
17317: LD_INT 12
17319: PUSH
17320: LD_INT 13
17322: PUSH
17323: LD_INT 14
17325: PUSH
17326: LD_INT 15
17328: PUSH
17329: LD_INT 16
17331: PUSH
17332: LD_INT 17
17334: PUSH
17335: LD_INT 18
17337: PUSH
17338: LD_INT 19
17340: PUSH
17341: LD_INT 20
17343: PUSH
17344: LD_INT 21
17346: PUSH
17347: LD_INT 22
17349: PUSH
17350: LD_INT 23
17352: PUSH
17353: LD_INT 24
17355: PUSH
17356: LD_INT 25
17358: PUSH
17359: LD_INT 26
17361: PUSH
17362: LD_INT 27
17364: PUSH
17365: LD_INT 28
17367: PUSH
17368: LD_INT 30
17370: PUSH
17371: LD_INT 31
17373: PUSH
17374: LD_INT 32
17376: PUSH
17377: LD_INT 33
17379: PUSH
17380: LD_INT 34
17382: PUSH
17383: LD_INT 36
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: PUSH
17422: LD_INT 101
17424: PUSH
17425: LD_INT 102
17427: PUSH
17428: LD_INT 103
17430: PUSH
17431: LD_INT 104
17433: PUSH
17434: LD_INT 105
17436: PUSH
17437: LD_INT 106
17439: PUSH
17440: LD_INT 107
17442: PUSH
17443: LD_INT 108
17445: PUSH
17446: LD_INT 109
17448: PUSH
17449: LD_INT 110
17451: PUSH
17452: LD_INT 111
17454: PUSH
17455: LD_INT 112
17457: PUSH
17458: LD_INT 113
17460: PUSH
17461: LD_INT 114
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: ST_TO_ADDR
17484: GO 18855
17486: LD_INT 13
17488: DOUBLE
17489: EQUAL
17490: IFTRUE 17494
17492: GO 17690
17494: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
17495: LD_ADDR_VAR 0 1
17499: PUSH
17500: LD_INT 1
17502: PUSH
17503: LD_INT 2
17505: PUSH
17506: LD_INT 3
17508: PUSH
17509: LD_INT 4
17511: PUSH
17512: LD_INT 5
17514: PUSH
17515: LD_INT 8
17517: PUSH
17518: LD_INT 9
17520: PUSH
17521: LD_INT 10
17523: PUSH
17524: LD_INT 11
17526: PUSH
17527: LD_INT 12
17529: PUSH
17530: LD_INT 14
17532: PUSH
17533: LD_INT 15
17535: PUSH
17536: LD_INT 16
17538: PUSH
17539: LD_INT 17
17541: PUSH
17542: LD_INT 18
17544: PUSH
17545: LD_INT 19
17547: PUSH
17548: LD_INT 20
17550: PUSH
17551: LD_INT 21
17553: PUSH
17554: LD_INT 22
17556: PUSH
17557: LD_INT 23
17559: PUSH
17560: LD_INT 24
17562: PUSH
17563: LD_INT 25
17565: PUSH
17566: LD_INT 26
17568: PUSH
17569: LD_INT 27
17571: PUSH
17572: LD_INT 28
17574: PUSH
17575: LD_INT 30
17577: PUSH
17578: LD_INT 31
17580: PUSH
17581: LD_INT 32
17583: PUSH
17584: LD_INT 33
17586: PUSH
17587: LD_INT 34
17589: PUSH
17590: LD_INT 36
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: PUSH
17626: LD_INT 101
17628: PUSH
17629: LD_INT 102
17631: PUSH
17632: LD_INT 103
17634: PUSH
17635: LD_INT 104
17637: PUSH
17638: LD_INT 105
17640: PUSH
17641: LD_INT 106
17643: PUSH
17644: LD_INT 107
17646: PUSH
17647: LD_INT 108
17649: PUSH
17650: LD_INT 109
17652: PUSH
17653: LD_INT 110
17655: PUSH
17656: LD_INT 111
17658: PUSH
17659: LD_INT 112
17661: PUSH
17662: LD_INT 113
17664: PUSH
17665: LD_INT 114
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: ST_TO_ADDR
17688: GO 18855
17690: LD_INT 14
17692: DOUBLE
17693: EQUAL
17694: IFTRUE 17698
17696: GO 17910
17698: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
17699: LD_ADDR_VAR 0 1
17703: PUSH
17704: LD_INT 1
17706: PUSH
17707: LD_INT 2
17709: PUSH
17710: LD_INT 3
17712: PUSH
17713: LD_INT 4
17715: PUSH
17716: LD_INT 5
17718: PUSH
17719: LD_INT 6
17721: PUSH
17722: LD_INT 7
17724: PUSH
17725: LD_INT 8
17727: PUSH
17728: LD_INT 9
17730: PUSH
17731: LD_INT 10
17733: PUSH
17734: LD_INT 11
17736: PUSH
17737: LD_INT 12
17739: PUSH
17740: LD_INT 13
17742: PUSH
17743: LD_INT 14
17745: PUSH
17746: LD_INT 15
17748: PUSH
17749: LD_INT 16
17751: PUSH
17752: LD_INT 17
17754: PUSH
17755: LD_INT 18
17757: PUSH
17758: LD_INT 19
17760: PUSH
17761: LD_INT 20
17763: PUSH
17764: LD_INT 21
17766: PUSH
17767: LD_INT 22
17769: PUSH
17770: LD_INT 23
17772: PUSH
17773: LD_INT 24
17775: PUSH
17776: LD_INT 25
17778: PUSH
17779: LD_INT 26
17781: PUSH
17782: LD_INT 27
17784: PUSH
17785: LD_INT 28
17787: PUSH
17788: LD_INT 29
17790: PUSH
17791: LD_INT 30
17793: PUSH
17794: LD_INT 31
17796: PUSH
17797: LD_INT 32
17799: PUSH
17800: LD_INT 33
17802: PUSH
17803: LD_INT 34
17805: PUSH
17806: LD_INT 36
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 101
17848: PUSH
17849: LD_INT 102
17851: PUSH
17852: LD_INT 103
17854: PUSH
17855: LD_INT 104
17857: PUSH
17858: LD_INT 105
17860: PUSH
17861: LD_INT 106
17863: PUSH
17864: LD_INT 107
17866: PUSH
17867: LD_INT 108
17869: PUSH
17870: LD_INT 109
17872: PUSH
17873: LD_INT 110
17875: PUSH
17876: LD_INT 111
17878: PUSH
17879: LD_INT 112
17881: PUSH
17882: LD_INT 113
17884: PUSH
17885: LD_INT 114
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: ST_TO_ADDR
17908: GO 18855
17910: LD_INT 15
17912: DOUBLE
17913: EQUAL
17914: IFTRUE 17918
17916: GO 18130
17918: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
17919: LD_ADDR_VAR 0 1
17923: PUSH
17924: LD_INT 1
17926: PUSH
17927: LD_INT 2
17929: PUSH
17930: LD_INT 3
17932: PUSH
17933: LD_INT 4
17935: PUSH
17936: LD_INT 5
17938: PUSH
17939: LD_INT 6
17941: PUSH
17942: LD_INT 7
17944: PUSH
17945: LD_INT 8
17947: PUSH
17948: LD_INT 9
17950: PUSH
17951: LD_INT 10
17953: PUSH
17954: LD_INT 11
17956: PUSH
17957: LD_INT 12
17959: PUSH
17960: LD_INT 13
17962: PUSH
17963: LD_INT 14
17965: PUSH
17966: LD_INT 15
17968: PUSH
17969: LD_INT 16
17971: PUSH
17972: LD_INT 17
17974: PUSH
17975: LD_INT 18
17977: PUSH
17978: LD_INT 19
17980: PUSH
17981: LD_INT 20
17983: PUSH
17984: LD_INT 21
17986: PUSH
17987: LD_INT 22
17989: PUSH
17990: LD_INT 23
17992: PUSH
17993: LD_INT 24
17995: PUSH
17996: LD_INT 25
17998: PUSH
17999: LD_INT 26
18001: PUSH
18002: LD_INT 27
18004: PUSH
18005: LD_INT 28
18007: PUSH
18008: LD_INT 29
18010: PUSH
18011: LD_INT 30
18013: PUSH
18014: LD_INT 31
18016: PUSH
18017: LD_INT 32
18019: PUSH
18020: LD_INT 33
18022: PUSH
18023: LD_INT 34
18025: PUSH
18026: LD_INT 36
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: PUSH
18066: LD_INT 101
18068: PUSH
18069: LD_INT 102
18071: PUSH
18072: LD_INT 103
18074: PUSH
18075: LD_INT 104
18077: PUSH
18078: LD_INT 105
18080: PUSH
18081: LD_INT 106
18083: PUSH
18084: LD_INT 107
18086: PUSH
18087: LD_INT 108
18089: PUSH
18090: LD_INT 109
18092: PUSH
18093: LD_INT 110
18095: PUSH
18096: LD_INT 111
18098: PUSH
18099: LD_INT 112
18101: PUSH
18102: LD_INT 113
18104: PUSH
18105: LD_INT 114
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: ST_TO_ADDR
18128: GO 18855
18130: LD_INT 16
18132: DOUBLE
18133: EQUAL
18134: IFTRUE 18138
18136: GO 18262
18138: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
18139: LD_ADDR_VAR 0 1
18143: PUSH
18144: LD_INT 2
18146: PUSH
18147: LD_INT 4
18149: PUSH
18150: LD_INT 5
18152: PUSH
18153: LD_INT 7
18155: PUSH
18156: LD_INT 11
18158: PUSH
18159: LD_INT 12
18161: PUSH
18162: LD_INT 15
18164: PUSH
18165: LD_INT 16
18167: PUSH
18168: LD_INT 20
18170: PUSH
18171: LD_INT 21
18173: PUSH
18174: LD_INT 22
18176: PUSH
18177: LD_INT 23
18179: PUSH
18180: LD_INT 25
18182: PUSH
18183: LD_INT 26
18185: PUSH
18186: LD_INT 30
18188: PUSH
18189: LD_INT 31
18191: PUSH
18192: LD_INT 32
18194: PUSH
18195: LD_INT 33
18197: PUSH
18198: LD_INT 34
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 101
18224: PUSH
18225: LD_INT 102
18227: PUSH
18228: LD_INT 103
18230: PUSH
18231: LD_INT 106
18233: PUSH
18234: LD_INT 108
18236: PUSH
18237: LD_INT 112
18239: PUSH
18240: LD_INT 113
18242: PUSH
18243: LD_INT 114
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: ST_TO_ADDR
18260: GO 18855
18262: LD_INT 17
18264: DOUBLE
18265: EQUAL
18266: IFTRUE 18270
18268: GO 18482
18270: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
18271: LD_ADDR_VAR 0 1
18275: PUSH
18276: LD_INT 1
18278: PUSH
18279: LD_INT 2
18281: PUSH
18282: LD_INT 3
18284: PUSH
18285: LD_INT 4
18287: PUSH
18288: LD_INT 5
18290: PUSH
18291: LD_INT 6
18293: PUSH
18294: LD_INT 7
18296: PUSH
18297: LD_INT 8
18299: PUSH
18300: LD_INT 9
18302: PUSH
18303: LD_INT 10
18305: PUSH
18306: LD_INT 11
18308: PUSH
18309: LD_INT 12
18311: PUSH
18312: LD_INT 13
18314: PUSH
18315: LD_INT 14
18317: PUSH
18318: LD_INT 15
18320: PUSH
18321: LD_INT 16
18323: PUSH
18324: LD_INT 17
18326: PUSH
18327: LD_INT 18
18329: PUSH
18330: LD_INT 19
18332: PUSH
18333: LD_INT 20
18335: PUSH
18336: LD_INT 21
18338: PUSH
18339: LD_INT 22
18341: PUSH
18342: LD_INT 23
18344: PUSH
18345: LD_INT 24
18347: PUSH
18348: LD_INT 25
18350: PUSH
18351: LD_INT 26
18353: PUSH
18354: LD_INT 27
18356: PUSH
18357: LD_INT 28
18359: PUSH
18360: LD_INT 29
18362: PUSH
18363: LD_INT 30
18365: PUSH
18366: LD_INT 31
18368: PUSH
18369: LD_INT 32
18371: PUSH
18372: LD_INT 33
18374: PUSH
18375: LD_INT 34
18377: PUSH
18378: LD_INT 36
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 101
18420: PUSH
18421: LD_INT 102
18423: PUSH
18424: LD_INT 103
18426: PUSH
18427: LD_INT 104
18429: PUSH
18430: LD_INT 105
18432: PUSH
18433: LD_INT 106
18435: PUSH
18436: LD_INT 107
18438: PUSH
18439: LD_INT 108
18441: PUSH
18442: LD_INT 109
18444: PUSH
18445: LD_INT 110
18447: PUSH
18448: LD_INT 111
18450: PUSH
18451: LD_INT 112
18453: PUSH
18454: LD_INT 113
18456: PUSH
18457: LD_INT 114
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: ST_TO_ADDR
18480: GO 18855
18482: LD_INT 18
18484: DOUBLE
18485: EQUAL
18486: IFTRUE 18490
18488: GO 18626
18490: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
18491: LD_ADDR_VAR 0 1
18495: PUSH
18496: LD_INT 2
18498: PUSH
18499: LD_INT 4
18501: PUSH
18502: LD_INT 5
18504: PUSH
18505: LD_INT 7
18507: PUSH
18508: LD_INT 11
18510: PUSH
18511: LD_INT 12
18513: PUSH
18514: LD_INT 15
18516: PUSH
18517: LD_INT 16
18519: PUSH
18520: LD_INT 20
18522: PUSH
18523: LD_INT 21
18525: PUSH
18526: LD_INT 22
18528: PUSH
18529: LD_INT 23
18531: PUSH
18532: LD_INT 25
18534: PUSH
18535: LD_INT 26
18537: PUSH
18538: LD_INT 30
18540: PUSH
18541: LD_INT 31
18543: PUSH
18544: LD_INT 32
18546: PUSH
18547: LD_INT 33
18549: PUSH
18550: LD_INT 34
18552: PUSH
18553: LD_INT 35
18555: PUSH
18556: LD_INT 36
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: PUSH
18582: LD_INT 101
18584: PUSH
18585: LD_INT 102
18587: PUSH
18588: LD_INT 103
18590: PUSH
18591: LD_INT 106
18593: PUSH
18594: LD_INT 108
18596: PUSH
18597: LD_INT 112
18599: PUSH
18600: LD_INT 113
18602: PUSH
18603: LD_INT 114
18605: PUSH
18606: LD_INT 115
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: ST_TO_ADDR
18624: GO 18855
18626: LD_INT 19
18628: DOUBLE
18629: EQUAL
18630: IFTRUE 18634
18632: GO 18854
18634: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
18635: LD_ADDR_VAR 0 1
18639: PUSH
18640: LD_INT 1
18642: PUSH
18643: LD_INT 2
18645: PUSH
18646: LD_INT 3
18648: PUSH
18649: LD_INT 4
18651: PUSH
18652: LD_INT 5
18654: PUSH
18655: LD_INT 6
18657: PUSH
18658: LD_INT 7
18660: PUSH
18661: LD_INT 8
18663: PUSH
18664: LD_INT 9
18666: PUSH
18667: LD_INT 10
18669: PUSH
18670: LD_INT 11
18672: PUSH
18673: LD_INT 12
18675: PUSH
18676: LD_INT 13
18678: PUSH
18679: LD_INT 14
18681: PUSH
18682: LD_INT 15
18684: PUSH
18685: LD_INT 16
18687: PUSH
18688: LD_INT 17
18690: PUSH
18691: LD_INT 18
18693: PUSH
18694: LD_INT 19
18696: PUSH
18697: LD_INT 20
18699: PUSH
18700: LD_INT 21
18702: PUSH
18703: LD_INT 22
18705: PUSH
18706: LD_INT 23
18708: PUSH
18709: LD_INT 24
18711: PUSH
18712: LD_INT 25
18714: PUSH
18715: LD_INT 26
18717: PUSH
18718: LD_INT 27
18720: PUSH
18721: LD_INT 28
18723: PUSH
18724: LD_INT 29
18726: PUSH
18727: LD_INT 30
18729: PUSH
18730: LD_INT 31
18732: PUSH
18733: LD_INT 32
18735: PUSH
18736: LD_INT 33
18738: PUSH
18739: LD_INT 34
18741: PUSH
18742: LD_INT 35
18744: PUSH
18745: LD_INT 36
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 101
18788: PUSH
18789: LD_INT 102
18791: PUSH
18792: LD_INT 103
18794: PUSH
18795: LD_INT 104
18797: PUSH
18798: LD_INT 105
18800: PUSH
18801: LD_INT 106
18803: PUSH
18804: LD_INT 107
18806: PUSH
18807: LD_INT 108
18809: PUSH
18810: LD_INT 109
18812: PUSH
18813: LD_INT 110
18815: PUSH
18816: LD_INT 111
18818: PUSH
18819: LD_INT 112
18821: PUSH
18822: LD_INT 113
18824: PUSH
18825: LD_INT 114
18827: PUSH
18828: LD_INT 115
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: ST_TO_ADDR
18852: GO 18855
18854: POP
// end else
18855: GO 19074
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
18857: LD_ADDR_VAR 0 1
18861: PUSH
18862: LD_INT 1
18864: PUSH
18865: LD_INT 2
18867: PUSH
18868: LD_INT 3
18870: PUSH
18871: LD_INT 4
18873: PUSH
18874: LD_INT 5
18876: PUSH
18877: LD_INT 6
18879: PUSH
18880: LD_INT 7
18882: PUSH
18883: LD_INT 8
18885: PUSH
18886: LD_INT 9
18888: PUSH
18889: LD_INT 10
18891: PUSH
18892: LD_INT 11
18894: PUSH
18895: LD_INT 12
18897: PUSH
18898: LD_INT 13
18900: PUSH
18901: LD_INT 14
18903: PUSH
18904: LD_INT 15
18906: PUSH
18907: LD_INT 16
18909: PUSH
18910: LD_INT 17
18912: PUSH
18913: LD_INT 18
18915: PUSH
18916: LD_INT 19
18918: PUSH
18919: LD_INT 20
18921: PUSH
18922: LD_INT 21
18924: PUSH
18925: LD_INT 22
18927: PUSH
18928: LD_INT 23
18930: PUSH
18931: LD_INT 24
18933: PUSH
18934: LD_INT 25
18936: PUSH
18937: LD_INT 26
18939: PUSH
18940: LD_INT 27
18942: PUSH
18943: LD_INT 28
18945: PUSH
18946: LD_INT 29
18948: PUSH
18949: LD_INT 30
18951: PUSH
18952: LD_INT 31
18954: PUSH
18955: LD_INT 32
18957: PUSH
18958: LD_INT 33
18960: PUSH
18961: LD_INT 34
18963: PUSH
18964: LD_INT 35
18966: PUSH
18967: LD_INT 36
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 101
19010: PUSH
19011: LD_INT 102
19013: PUSH
19014: LD_INT 103
19016: PUSH
19017: LD_INT 104
19019: PUSH
19020: LD_INT 105
19022: PUSH
19023: LD_INT 106
19025: PUSH
19026: LD_INT 107
19028: PUSH
19029: LD_INT 108
19031: PUSH
19032: LD_INT 109
19034: PUSH
19035: LD_INT 110
19037: PUSH
19038: LD_INT 111
19040: PUSH
19041: LD_INT 112
19043: PUSH
19044: LD_INT 113
19046: PUSH
19047: LD_INT 114
19049: PUSH
19050: LD_INT 115
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: ST_TO_ADDR
// if result then
19074: LD_VAR 0 1
19078: IFFALSE 19367
// begin normal :=  ;
19080: LD_ADDR_VAR 0 3
19084: PUSH
19085: LD_STRING 
19087: ST_TO_ADDR
// hardcore :=  ;
19088: LD_ADDR_VAR 0 4
19092: PUSH
19093: LD_STRING 
19095: ST_TO_ADDR
// for i = 1 to normalCounter do
19096: LD_ADDR_VAR 0 5
19100: PUSH
19101: DOUBLE
19102: LD_INT 1
19104: DEC
19105: ST_TO_ADDR
19106: LD_EXP 66
19110: PUSH
19111: FOR_TO
19112: IFFALSE 19213
// begin tmp := 0 ;
19114: LD_ADDR_VAR 0 2
19118: PUSH
19119: LD_STRING 0
19121: ST_TO_ADDR
// if result [ 1 ] then
19122: LD_VAR 0 1
19126: PUSH
19127: LD_INT 1
19129: ARRAY
19130: IFFALSE 19195
// if result [ 1 ] [ 1 ] = i then
19132: LD_VAR 0 1
19136: PUSH
19137: LD_INT 1
19139: ARRAY
19140: PUSH
19141: LD_INT 1
19143: ARRAY
19144: PUSH
19145: LD_VAR 0 5
19149: EQUAL
19150: IFFALSE 19195
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19152: LD_ADDR_VAR 0 1
19156: PUSH
19157: LD_VAR 0 1
19161: PPUSH
19162: LD_INT 1
19164: PPUSH
19165: LD_VAR 0 1
19169: PUSH
19170: LD_INT 1
19172: ARRAY
19173: PPUSH
19174: LD_INT 1
19176: PPUSH
19177: CALL_OW 3
19181: PPUSH
19182: CALL_OW 1
19186: ST_TO_ADDR
// tmp := 1 ;
19187: LD_ADDR_VAR 0 2
19191: PUSH
19192: LD_STRING 1
19194: ST_TO_ADDR
// end ; normal := normal & tmp ;
19195: LD_ADDR_VAR 0 3
19199: PUSH
19200: LD_VAR 0 3
19204: PUSH
19205: LD_VAR 0 2
19209: STR
19210: ST_TO_ADDR
// end ;
19211: GO 19111
19213: POP
19214: POP
// for i = 1 to hardcoreCounter do
19215: LD_ADDR_VAR 0 5
19219: PUSH
19220: DOUBLE
19221: LD_INT 1
19223: DEC
19224: ST_TO_ADDR
19225: LD_EXP 67
19229: PUSH
19230: FOR_TO
19231: IFFALSE 19336
// begin tmp := 0 ;
19233: LD_ADDR_VAR 0 2
19237: PUSH
19238: LD_STRING 0
19240: ST_TO_ADDR
// if result [ 2 ] then
19241: LD_VAR 0 1
19245: PUSH
19246: LD_INT 2
19248: ARRAY
19249: IFFALSE 19318
// if result [ 2 ] [ 1 ] = 100 + i then
19251: LD_VAR 0 1
19255: PUSH
19256: LD_INT 2
19258: ARRAY
19259: PUSH
19260: LD_INT 1
19262: ARRAY
19263: PUSH
19264: LD_INT 100
19266: PUSH
19267: LD_VAR 0 5
19271: PLUS
19272: EQUAL
19273: IFFALSE 19318
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
19275: LD_ADDR_VAR 0 1
19279: PUSH
19280: LD_VAR 0 1
19284: PPUSH
19285: LD_INT 2
19287: PPUSH
19288: LD_VAR 0 1
19292: PUSH
19293: LD_INT 2
19295: ARRAY
19296: PPUSH
19297: LD_INT 1
19299: PPUSH
19300: CALL_OW 3
19304: PPUSH
19305: CALL_OW 1
19309: ST_TO_ADDR
// tmp := 1 ;
19310: LD_ADDR_VAR 0 2
19314: PUSH
19315: LD_STRING 1
19317: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
19318: LD_ADDR_VAR 0 4
19322: PUSH
19323: LD_VAR 0 4
19327: PUSH
19328: LD_VAR 0 2
19332: STR
19333: ST_TO_ADDR
// end ;
19334: GO 19230
19336: POP
19337: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
19338: LD_STRING getStreamItemsFromMission("
19340: PUSH
19341: LD_VAR 0 3
19345: STR
19346: PUSH
19347: LD_STRING ","
19349: STR
19350: PUSH
19351: LD_VAR 0 4
19355: STR
19356: PUSH
19357: LD_STRING ")
19359: STR
19360: PPUSH
19361: CALL_OW 559
// end else
19365: GO 19374
// ToLua ( getStreamItemsFromMission("","") ) ;
19367: LD_STRING getStreamItemsFromMission("","")
19369: PPUSH
19370: CALL_OW 559
// end ;
19374: LD_VAR 0 1
19378: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
19379: LD_VAR 0 2
19383: PUSH
19384: LD_INT 100
19386: EQUAL
19387: IFFALSE 20336
// begin if not StreamModeActive then
19389: LD_EXP 65
19393: NOT
19394: IFFALSE 19404
// StreamModeActive := true ;
19396: LD_ADDR_EXP 65
19400: PUSH
19401: LD_INT 1
19403: ST_TO_ADDR
// if p3 = 0 then
19404: LD_VAR 0 3
19408: PUSH
19409: LD_INT 0
19411: EQUAL
19412: IFFALSE 19418
// InitStreamMode ;
19414: CALL 15457 0 0
// if p3 = 1 then
19418: LD_VAR 0 3
19422: PUSH
19423: LD_INT 1
19425: EQUAL
19426: IFFALSE 19436
// sRocket := true ;
19428: LD_ADDR_EXP 70
19432: PUSH
19433: LD_INT 1
19435: ST_TO_ADDR
// if p3 = 2 then
19436: LD_VAR 0 3
19440: PUSH
19441: LD_INT 2
19443: EQUAL
19444: IFFALSE 19454
// sSpeed := true ;
19446: LD_ADDR_EXP 69
19450: PUSH
19451: LD_INT 1
19453: ST_TO_ADDR
// if p3 = 3 then
19454: LD_VAR 0 3
19458: PUSH
19459: LD_INT 3
19461: EQUAL
19462: IFFALSE 19472
// sEngine := true ;
19464: LD_ADDR_EXP 71
19468: PUSH
19469: LD_INT 1
19471: ST_TO_ADDR
// if p3 = 4 then
19472: LD_VAR 0 3
19476: PUSH
19477: LD_INT 4
19479: EQUAL
19480: IFFALSE 19490
// sSpec := true ;
19482: LD_ADDR_EXP 68
19486: PUSH
19487: LD_INT 1
19489: ST_TO_ADDR
// if p3 = 5 then
19490: LD_VAR 0 3
19494: PUSH
19495: LD_INT 5
19497: EQUAL
19498: IFFALSE 19508
// sLevel := true ;
19500: LD_ADDR_EXP 72
19504: PUSH
19505: LD_INT 1
19507: ST_TO_ADDR
// if p3 = 6 then
19508: LD_VAR 0 3
19512: PUSH
19513: LD_INT 6
19515: EQUAL
19516: IFFALSE 19526
// sArmoury := true ;
19518: LD_ADDR_EXP 73
19522: PUSH
19523: LD_INT 1
19525: ST_TO_ADDR
// if p3 = 7 then
19526: LD_VAR 0 3
19530: PUSH
19531: LD_INT 7
19533: EQUAL
19534: IFFALSE 19544
// sRadar := true ;
19536: LD_ADDR_EXP 74
19540: PUSH
19541: LD_INT 1
19543: ST_TO_ADDR
// if p3 = 8 then
19544: LD_VAR 0 3
19548: PUSH
19549: LD_INT 8
19551: EQUAL
19552: IFFALSE 19562
// sBunker := true ;
19554: LD_ADDR_EXP 75
19558: PUSH
19559: LD_INT 1
19561: ST_TO_ADDR
// if p3 = 9 then
19562: LD_VAR 0 3
19566: PUSH
19567: LD_INT 9
19569: EQUAL
19570: IFFALSE 19580
// sHack := true ;
19572: LD_ADDR_EXP 76
19576: PUSH
19577: LD_INT 1
19579: ST_TO_ADDR
// if p3 = 10 then
19580: LD_VAR 0 3
19584: PUSH
19585: LD_INT 10
19587: EQUAL
19588: IFFALSE 19598
// sFire := true ;
19590: LD_ADDR_EXP 77
19594: PUSH
19595: LD_INT 1
19597: ST_TO_ADDR
// if p3 = 11 then
19598: LD_VAR 0 3
19602: PUSH
19603: LD_INT 11
19605: EQUAL
19606: IFFALSE 19616
// sRefresh := true ;
19608: LD_ADDR_EXP 78
19612: PUSH
19613: LD_INT 1
19615: ST_TO_ADDR
// if p3 = 12 then
19616: LD_VAR 0 3
19620: PUSH
19621: LD_INT 12
19623: EQUAL
19624: IFFALSE 19634
// sExp := true ;
19626: LD_ADDR_EXP 79
19630: PUSH
19631: LD_INT 1
19633: ST_TO_ADDR
// if p3 = 13 then
19634: LD_VAR 0 3
19638: PUSH
19639: LD_INT 13
19641: EQUAL
19642: IFFALSE 19652
// sDepot := true ;
19644: LD_ADDR_EXP 80
19648: PUSH
19649: LD_INT 1
19651: ST_TO_ADDR
// if p3 = 14 then
19652: LD_VAR 0 3
19656: PUSH
19657: LD_INT 14
19659: EQUAL
19660: IFFALSE 19670
// sFlag := true ;
19662: LD_ADDR_EXP 81
19666: PUSH
19667: LD_INT 1
19669: ST_TO_ADDR
// if p3 = 15 then
19670: LD_VAR 0 3
19674: PUSH
19675: LD_INT 15
19677: EQUAL
19678: IFFALSE 19688
// sKamikadze := true ;
19680: LD_ADDR_EXP 89
19684: PUSH
19685: LD_INT 1
19687: ST_TO_ADDR
// if p3 = 16 then
19688: LD_VAR 0 3
19692: PUSH
19693: LD_INT 16
19695: EQUAL
19696: IFFALSE 19706
// sTroll := true ;
19698: LD_ADDR_EXP 90
19702: PUSH
19703: LD_INT 1
19705: ST_TO_ADDR
// if p3 = 17 then
19706: LD_VAR 0 3
19710: PUSH
19711: LD_INT 17
19713: EQUAL
19714: IFFALSE 19724
// sSlow := true ;
19716: LD_ADDR_EXP 91
19720: PUSH
19721: LD_INT 1
19723: ST_TO_ADDR
// if p3 = 18 then
19724: LD_VAR 0 3
19728: PUSH
19729: LD_INT 18
19731: EQUAL
19732: IFFALSE 19742
// sLack := true ;
19734: LD_ADDR_EXP 92
19738: PUSH
19739: LD_INT 1
19741: ST_TO_ADDR
// if p3 = 19 then
19742: LD_VAR 0 3
19746: PUSH
19747: LD_INT 19
19749: EQUAL
19750: IFFALSE 19760
// sTank := true ;
19752: LD_ADDR_EXP 94
19756: PUSH
19757: LD_INT 1
19759: ST_TO_ADDR
// if p3 = 20 then
19760: LD_VAR 0 3
19764: PUSH
19765: LD_INT 20
19767: EQUAL
19768: IFFALSE 19778
// sRemote := true ;
19770: LD_ADDR_EXP 95
19774: PUSH
19775: LD_INT 1
19777: ST_TO_ADDR
// if p3 = 21 then
19778: LD_VAR 0 3
19782: PUSH
19783: LD_INT 21
19785: EQUAL
19786: IFFALSE 19796
// sPowell := true ;
19788: LD_ADDR_EXP 96
19792: PUSH
19793: LD_INT 1
19795: ST_TO_ADDR
// if p3 = 22 then
19796: LD_VAR 0 3
19800: PUSH
19801: LD_INT 22
19803: EQUAL
19804: IFFALSE 19814
// sTeleport := true ;
19806: LD_ADDR_EXP 99
19810: PUSH
19811: LD_INT 1
19813: ST_TO_ADDR
// if p3 = 23 then
19814: LD_VAR 0 3
19818: PUSH
19819: LD_INT 23
19821: EQUAL
19822: IFFALSE 19832
// sOilTower := true ;
19824: LD_ADDR_EXP 101
19828: PUSH
19829: LD_INT 1
19831: ST_TO_ADDR
// if p3 = 24 then
19832: LD_VAR 0 3
19836: PUSH
19837: LD_INT 24
19839: EQUAL
19840: IFFALSE 19850
// sShovel := true ;
19842: LD_ADDR_EXP 102
19846: PUSH
19847: LD_INT 1
19849: ST_TO_ADDR
// if p3 = 25 then
19850: LD_VAR 0 3
19854: PUSH
19855: LD_INT 25
19857: EQUAL
19858: IFFALSE 19868
// sSheik := true ;
19860: LD_ADDR_EXP 103
19864: PUSH
19865: LD_INT 1
19867: ST_TO_ADDR
// if p3 = 26 then
19868: LD_VAR 0 3
19872: PUSH
19873: LD_INT 26
19875: EQUAL
19876: IFFALSE 19886
// sEarthquake := true ;
19878: LD_ADDR_EXP 105
19882: PUSH
19883: LD_INT 1
19885: ST_TO_ADDR
// if p3 = 27 then
19886: LD_VAR 0 3
19890: PUSH
19891: LD_INT 27
19893: EQUAL
19894: IFFALSE 19904
// sAI := true ;
19896: LD_ADDR_EXP 106
19900: PUSH
19901: LD_INT 1
19903: ST_TO_ADDR
// if p3 = 28 then
19904: LD_VAR 0 3
19908: PUSH
19909: LD_INT 28
19911: EQUAL
19912: IFFALSE 19922
// sCargo := true ;
19914: LD_ADDR_EXP 109
19918: PUSH
19919: LD_INT 1
19921: ST_TO_ADDR
// if p3 = 29 then
19922: LD_VAR 0 3
19926: PUSH
19927: LD_INT 29
19929: EQUAL
19930: IFFALSE 19940
// sDLaser := true ;
19932: LD_ADDR_EXP 110
19936: PUSH
19937: LD_INT 1
19939: ST_TO_ADDR
// if p3 = 30 then
19940: LD_VAR 0 3
19944: PUSH
19945: LD_INT 30
19947: EQUAL
19948: IFFALSE 19958
// sExchange := true ;
19950: LD_ADDR_EXP 111
19954: PUSH
19955: LD_INT 1
19957: ST_TO_ADDR
// if p3 = 31 then
19958: LD_VAR 0 3
19962: PUSH
19963: LD_INT 31
19965: EQUAL
19966: IFFALSE 19976
// sFac := true ;
19968: LD_ADDR_EXP 112
19972: PUSH
19973: LD_INT 1
19975: ST_TO_ADDR
// if p3 = 32 then
19976: LD_VAR 0 3
19980: PUSH
19981: LD_INT 32
19983: EQUAL
19984: IFFALSE 19994
// sPower := true ;
19986: LD_ADDR_EXP 113
19990: PUSH
19991: LD_INT 1
19993: ST_TO_ADDR
// if p3 = 33 then
19994: LD_VAR 0 3
19998: PUSH
19999: LD_INT 33
20001: EQUAL
20002: IFFALSE 20012
// sRandom := true ;
20004: LD_ADDR_EXP 114
20008: PUSH
20009: LD_INT 1
20011: ST_TO_ADDR
// if p3 = 34 then
20012: LD_VAR 0 3
20016: PUSH
20017: LD_INT 34
20019: EQUAL
20020: IFFALSE 20030
// sShield := true ;
20022: LD_ADDR_EXP 115
20026: PUSH
20027: LD_INT 1
20029: ST_TO_ADDR
// if p3 = 35 then
20030: LD_VAR 0 3
20034: PUSH
20035: LD_INT 35
20037: EQUAL
20038: IFFALSE 20048
// sTime := true ;
20040: LD_ADDR_EXP 116
20044: PUSH
20045: LD_INT 1
20047: ST_TO_ADDR
// if p3 = 36 then
20048: LD_VAR 0 3
20052: PUSH
20053: LD_INT 36
20055: EQUAL
20056: IFFALSE 20066
// sTools := true ;
20058: LD_ADDR_EXP 117
20062: PUSH
20063: LD_INT 1
20065: ST_TO_ADDR
// if p3 = 101 then
20066: LD_VAR 0 3
20070: PUSH
20071: LD_INT 101
20073: EQUAL
20074: IFFALSE 20084
// sSold := true ;
20076: LD_ADDR_EXP 82
20080: PUSH
20081: LD_INT 1
20083: ST_TO_ADDR
// if p3 = 102 then
20084: LD_VAR 0 3
20088: PUSH
20089: LD_INT 102
20091: EQUAL
20092: IFFALSE 20102
// sDiff := true ;
20094: LD_ADDR_EXP 83
20098: PUSH
20099: LD_INT 1
20101: ST_TO_ADDR
// if p3 = 103 then
20102: LD_VAR 0 3
20106: PUSH
20107: LD_INT 103
20109: EQUAL
20110: IFFALSE 20120
// sFog := true ;
20112: LD_ADDR_EXP 86
20116: PUSH
20117: LD_INT 1
20119: ST_TO_ADDR
// if p3 = 104 then
20120: LD_VAR 0 3
20124: PUSH
20125: LD_INT 104
20127: EQUAL
20128: IFFALSE 20138
// sReset := true ;
20130: LD_ADDR_EXP 87
20134: PUSH
20135: LD_INT 1
20137: ST_TO_ADDR
// if p3 = 105 then
20138: LD_VAR 0 3
20142: PUSH
20143: LD_INT 105
20145: EQUAL
20146: IFFALSE 20156
// sSun := true ;
20148: LD_ADDR_EXP 88
20152: PUSH
20153: LD_INT 1
20155: ST_TO_ADDR
// if p3 = 106 then
20156: LD_VAR 0 3
20160: PUSH
20161: LD_INT 106
20163: EQUAL
20164: IFFALSE 20174
// sTiger := true ;
20166: LD_ADDR_EXP 84
20170: PUSH
20171: LD_INT 1
20173: ST_TO_ADDR
// if p3 = 107 then
20174: LD_VAR 0 3
20178: PUSH
20179: LD_INT 107
20181: EQUAL
20182: IFFALSE 20192
// sBomb := true ;
20184: LD_ADDR_EXP 85
20188: PUSH
20189: LD_INT 1
20191: ST_TO_ADDR
// if p3 = 108 then
20192: LD_VAR 0 3
20196: PUSH
20197: LD_INT 108
20199: EQUAL
20200: IFFALSE 20210
// sWound := true ;
20202: LD_ADDR_EXP 93
20206: PUSH
20207: LD_INT 1
20209: ST_TO_ADDR
// if p3 = 109 then
20210: LD_VAR 0 3
20214: PUSH
20215: LD_INT 109
20217: EQUAL
20218: IFFALSE 20228
// sBetray := true ;
20220: LD_ADDR_EXP 97
20224: PUSH
20225: LD_INT 1
20227: ST_TO_ADDR
// if p3 = 110 then
20228: LD_VAR 0 3
20232: PUSH
20233: LD_INT 110
20235: EQUAL
20236: IFFALSE 20246
// sContamin := true ;
20238: LD_ADDR_EXP 98
20242: PUSH
20243: LD_INT 1
20245: ST_TO_ADDR
// if p3 = 111 then
20246: LD_VAR 0 3
20250: PUSH
20251: LD_INT 111
20253: EQUAL
20254: IFFALSE 20264
// sOil := true ;
20256: LD_ADDR_EXP 100
20260: PUSH
20261: LD_INT 1
20263: ST_TO_ADDR
// if p3 = 112 then
20264: LD_VAR 0 3
20268: PUSH
20269: LD_INT 112
20271: EQUAL
20272: IFFALSE 20282
// sStu := true ;
20274: LD_ADDR_EXP 104
20278: PUSH
20279: LD_INT 1
20281: ST_TO_ADDR
// if p3 = 113 then
20282: LD_VAR 0 3
20286: PUSH
20287: LD_INT 113
20289: EQUAL
20290: IFFALSE 20300
// sBazooka := true ;
20292: LD_ADDR_EXP 107
20296: PUSH
20297: LD_INT 1
20299: ST_TO_ADDR
// if p3 = 114 then
20300: LD_VAR 0 3
20304: PUSH
20305: LD_INT 114
20307: EQUAL
20308: IFFALSE 20318
// sMortar := true ;
20310: LD_ADDR_EXP 108
20314: PUSH
20315: LD_INT 1
20317: ST_TO_ADDR
// if p3 = 115 then
20318: LD_VAR 0 3
20322: PUSH
20323: LD_INT 115
20325: EQUAL
20326: IFFALSE 20336
// sRanger := true ;
20328: LD_ADDR_EXP 118
20332: PUSH
20333: LD_INT 1
20335: ST_TO_ADDR
// end ; end ;
20336: PPOPN 6
20338: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20339: LD_EXP 65
20343: PUSH
20344: LD_EXP 70
20348: AND
20349: IFFALSE 20473
20351: GO 20353
20353: DISABLE
20354: LD_INT 0
20356: PPUSH
20357: PPUSH
// begin enable ;
20358: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20359: LD_ADDR_VAR 0 2
20363: PUSH
20364: LD_INT 22
20366: PUSH
20367: LD_OWVAR 2
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: LD_INT 2
20378: PUSH
20379: LD_INT 34
20381: PUSH
20382: LD_INT 7
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PUSH
20389: LD_INT 34
20391: PUSH
20392: LD_INT 45
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 34
20401: PUSH
20402: LD_INT 28
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: LD_INT 34
20411: PUSH
20412: LD_INT 47
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PPUSH
20430: CALL_OW 69
20434: ST_TO_ADDR
// if not tmp then
20435: LD_VAR 0 2
20439: NOT
20440: IFFALSE 20444
// exit ;
20442: GO 20473
// for i in tmp do
20444: LD_ADDR_VAR 0 1
20448: PUSH
20449: LD_VAR 0 2
20453: PUSH
20454: FOR_IN
20455: IFFALSE 20471
// begin SetLives ( i , 0 ) ;
20457: LD_VAR 0 1
20461: PPUSH
20462: LD_INT 0
20464: PPUSH
20465: CALL_OW 234
// end ;
20469: GO 20454
20471: POP
20472: POP
// end ;
20473: PPOPN 2
20475: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20476: LD_EXP 65
20480: PUSH
20481: LD_EXP 71
20485: AND
20486: IFFALSE 20570
20488: GO 20490
20490: DISABLE
20491: LD_INT 0
20493: PPUSH
20494: PPUSH
// begin enable ;
20495: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20496: LD_ADDR_VAR 0 2
20500: PUSH
20501: LD_INT 22
20503: PUSH
20504: LD_OWVAR 2
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: PUSH
20513: LD_INT 32
20515: PUSH
20516: LD_INT 3
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PPUSH
20527: CALL_OW 69
20531: ST_TO_ADDR
// if not tmp then
20532: LD_VAR 0 2
20536: NOT
20537: IFFALSE 20541
// exit ;
20539: GO 20570
// for i in tmp do
20541: LD_ADDR_VAR 0 1
20545: PUSH
20546: LD_VAR 0 2
20550: PUSH
20551: FOR_IN
20552: IFFALSE 20568
// begin SetLives ( i , 0 ) ;
20554: LD_VAR 0 1
20558: PPUSH
20559: LD_INT 0
20561: PPUSH
20562: CALL_OW 234
// end ;
20566: GO 20551
20568: POP
20569: POP
// end ;
20570: PPOPN 2
20572: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20573: LD_EXP 65
20577: PUSH
20578: LD_EXP 68
20582: AND
20583: IFFALSE 20676
20585: GO 20587
20587: DISABLE
20588: LD_INT 0
20590: PPUSH
// begin enable ;
20591: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20592: LD_ADDR_VAR 0 1
20596: PUSH
20597: LD_INT 22
20599: PUSH
20600: LD_OWVAR 2
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 2
20611: PUSH
20612: LD_INT 25
20614: PUSH
20615: LD_INT 5
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: PUSH
20622: LD_INT 25
20624: PUSH
20625: LD_INT 9
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: LD_INT 25
20634: PUSH
20635: LD_INT 8
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PPUSH
20652: CALL_OW 69
20656: PUSH
20657: FOR_IN
20658: IFFALSE 20674
// begin SetClass ( i , 1 ) ;
20660: LD_VAR 0 1
20664: PPUSH
20665: LD_INT 1
20667: PPUSH
20668: CALL_OW 336
// end ;
20672: GO 20657
20674: POP
20675: POP
// end ;
20676: PPOPN 1
20678: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20679: LD_EXP 65
20683: PUSH
20684: LD_EXP 69
20688: AND
20689: PUSH
20690: LD_OWVAR 65
20694: PUSH
20695: LD_INT 7
20697: LESS
20698: AND
20699: IFFALSE 20713
20701: GO 20703
20703: DISABLE
// begin enable ;
20704: ENABLE
// game_speed := 7 ;
20705: LD_ADDR_OWVAR 65
20709: PUSH
20710: LD_INT 7
20712: ST_TO_ADDR
// end ;
20713: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20714: LD_EXP 65
20718: PUSH
20719: LD_EXP 72
20723: AND
20724: IFFALSE 20926
20726: GO 20728
20728: DISABLE
20729: LD_INT 0
20731: PPUSH
20732: PPUSH
20733: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20734: LD_ADDR_VAR 0 3
20738: PUSH
20739: LD_INT 81
20741: PUSH
20742: LD_OWVAR 2
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 21
20753: PUSH
20754: LD_INT 1
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: PPUSH
20765: CALL_OW 69
20769: ST_TO_ADDR
// if not tmp then
20770: LD_VAR 0 3
20774: NOT
20775: IFFALSE 20779
// exit ;
20777: GO 20926
// if tmp > 5 then
20779: LD_VAR 0 3
20783: PUSH
20784: LD_INT 5
20786: GREATER
20787: IFFALSE 20799
// k := 5 else
20789: LD_ADDR_VAR 0 2
20793: PUSH
20794: LD_INT 5
20796: ST_TO_ADDR
20797: GO 20809
// k := tmp ;
20799: LD_ADDR_VAR 0 2
20803: PUSH
20804: LD_VAR 0 3
20808: ST_TO_ADDR
// for i := 1 to k do
20809: LD_ADDR_VAR 0 1
20813: PUSH
20814: DOUBLE
20815: LD_INT 1
20817: DEC
20818: ST_TO_ADDR
20819: LD_VAR 0 2
20823: PUSH
20824: FOR_TO
20825: IFFALSE 20924
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20827: LD_VAR 0 3
20831: PUSH
20832: LD_VAR 0 1
20836: ARRAY
20837: PPUSH
20838: LD_VAR 0 1
20842: PUSH
20843: LD_INT 4
20845: MOD
20846: PUSH
20847: LD_INT 1
20849: PLUS
20850: PPUSH
20851: CALL_OW 259
20855: PUSH
20856: LD_INT 10
20858: LESS
20859: IFFALSE 20922
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20861: LD_VAR 0 3
20865: PUSH
20866: LD_VAR 0 1
20870: ARRAY
20871: PPUSH
20872: LD_VAR 0 1
20876: PUSH
20877: LD_INT 4
20879: MOD
20880: PUSH
20881: LD_INT 1
20883: PLUS
20884: PPUSH
20885: LD_VAR 0 3
20889: PUSH
20890: LD_VAR 0 1
20894: ARRAY
20895: PPUSH
20896: LD_VAR 0 1
20900: PUSH
20901: LD_INT 4
20903: MOD
20904: PUSH
20905: LD_INT 1
20907: PLUS
20908: PPUSH
20909: CALL_OW 259
20913: PUSH
20914: LD_INT 1
20916: PLUS
20917: PPUSH
20918: CALL_OW 237
20922: GO 20824
20924: POP
20925: POP
// end ;
20926: PPOPN 3
20928: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20929: LD_EXP 65
20933: PUSH
20934: LD_EXP 73
20938: AND
20939: IFFALSE 20959
20941: GO 20943
20943: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20944: LD_INT 4
20946: PPUSH
20947: LD_OWVAR 2
20951: PPUSH
20952: LD_INT 0
20954: PPUSH
20955: CALL_OW 324
20959: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20960: LD_EXP 65
20964: PUSH
20965: LD_EXP 102
20969: AND
20970: IFFALSE 20990
20972: GO 20974
20974: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20975: LD_INT 19
20977: PPUSH
20978: LD_OWVAR 2
20982: PPUSH
20983: LD_INT 0
20985: PPUSH
20986: CALL_OW 324
20990: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20991: LD_EXP 65
20995: PUSH
20996: LD_EXP 74
21000: AND
21001: IFFALSE 21103
21003: GO 21005
21005: DISABLE
21006: LD_INT 0
21008: PPUSH
21009: PPUSH
// begin enable ;
21010: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21011: LD_ADDR_VAR 0 2
21015: PUSH
21016: LD_INT 22
21018: PUSH
21019: LD_OWVAR 2
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 2
21030: PUSH
21031: LD_INT 34
21033: PUSH
21034: LD_INT 11
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 34
21043: PUSH
21044: LD_INT 30
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: LIST
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: PPUSH
21060: CALL_OW 69
21064: ST_TO_ADDR
// if not tmp then
21065: LD_VAR 0 2
21069: NOT
21070: IFFALSE 21074
// exit ;
21072: GO 21103
// for i in tmp do
21074: LD_ADDR_VAR 0 1
21078: PUSH
21079: LD_VAR 0 2
21083: PUSH
21084: FOR_IN
21085: IFFALSE 21101
// begin SetLives ( i , 0 ) ;
21087: LD_VAR 0 1
21091: PPUSH
21092: LD_INT 0
21094: PPUSH
21095: CALL_OW 234
// end ;
21099: GO 21084
21101: POP
21102: POP
// end ;
21103: PPOPN 2
21105: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21106: LD_EXP 65
21110: PUSH
21111: LD_EXP 75
21115: AND
21116: IFFALSE 21136
21118: GO 21120
21120: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21121: LD_INT 32
21123: PPUSH
21124: LD_OWVAR 2
21128: PPUSH
21129: LD_INT 0
21131: PPUSH
21132: CALL_OW 324
21136: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21137: LD_EXP 65
21141: PUSH
21142: LD_EXP 76
21146: AND
21147: IFFALSE 21328
21149: GO 21151
21151: DISABLE
21152: LD_INT 0
21154: PPUSH
21155: PPUSH
21156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21157: LD_ADDR_VAR 0 2
21161: PUSH
21162: LD_INT 22
21164: PUSH
21165: LD_OWVAR 2
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: LD_INT 33
21176: PUSH
21177: LD_INT 3
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: PPUSH
21188: CALL_OW 69
21192: ST_TO_ADDR
// if not tmp then
21193: LD_VAR 0 2
21197: NOT
21198: IFFALSE 21202
// exit ;
21200: GO 21328
// side := 0 ;
21202: LD_ADDR_VAR 0 3
21206: PUSH
21207: LD_INT 0
21209: ST_TO_ADDR
// for i := 1 to 8 do
21210: LD_ADDR_VAR 0 1
21214: PUSH
21215: DOUBLE
21216: LD_INT 1
21218: DEC
21219: ST_TO_ADDR
21220: LD_INT 8
21222: PUSH
21223: FOR_TO
21224: IFFALSE 21272
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21226: LD_OWVAR 2
21230: PUSH
21231: LD_VAR 0 1
21235: NONEQUAL
21236: PUSH
21237: LD_OWVAR 2
21241: PPUSH
21242: LD_VAR 0 1
21246: PPUSH
21247: CALL_OW 81
21251: PUSH
21252: LD_INT 2
21254: EQUAL
21255: AND
21256: IFFALSE 21270
// begin side := i ;
21258: LD_ADDR_VAR 0 3
21262: PUSH
21263: LD_VAR 0 1
21267: ST_TO_ADDR
// break ;
21268: GO 21272
// end ;
21270: GO 21223
21272: POP
21273: POP
// if not side then
21274: LD_VAR 0 3
21278: NOT
21279: IFFALSE 21283
// exit ;
21281: GO 21328
// for i := 1 to tmp do
21283: LD_ADDR_VAR 0 1
21287: PUSH
21288: DOUBLE
21289: LD_INT 1
21291: DEC
21292: ST_TO_ADDR
21293: LD_VAR 0 2
21297: PUSH
21298: FOR_TO
21299: IFFALSE 21326
// if Prob ( 60 ) then
21301: LD_INT 60
21303: PPUSH
21304: CALL_OW 13
21308: IFFALSE 21324
// SetSide ( i , side ) ;
21310: LD_VAR 0 1
21314: PPUSH
21315: LD_VAR 0 3
21319: PPUSH
21320: CALL_OW 235
21324: GO 21298
21326: POP
21327: POP
// end ;
21328: PPOPN 3
21330: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21331: LD_EXP 65
21335: PUSH
21336: LD_EXP 78
21340: AND
21341: IFFALSE 21460
21343: GO 21345
21345: DISABLE
21346: LD_INT 0
21348: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21349: LD_ADDR_VAR 0 1
21353: PUSH
21354: LD_INT 22
21356: PUSH
21357: LD_OWVAR 2
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: LD_INT 21
21368: PUSH
21369: LD_INT 1
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 3
21378: PUSH
21379: LD_INT 23
21381: PUSH
21382: LD_INT 0
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: LIST
21397: PPUSH
21398: CALL_OW 69
21402: PUSH
21403: FOR_IN
21404: IFFALSE 21458
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21406: LD_VAR 0 1
21410: PPUSH
21411: CALL_OW 257
21415: PUSH
21416: LD_INT 1
21418: PUSH
21419: LD_INT 2
21421: PUSH
21422: LD_INT 3
21424: PUSH
21425: LD_INT 4
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: IN
21434: IFFALSE 21456
// SetClass ( un , rand ( 1 , 4 ) ) ;
21436: LD_VAR 0 1
21440: PPUSH
21441: LD_INT 1
21443: PPUSH
21444: LD_INT 4
21446: PPUSH
21447: CALL_OW 12
21451: PPUSH
21452: CALL_OW 336
21456: GO 21403
21458: POP
21459: POP
// end ;
21460: PPOPN 1
21462: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21463: LD_EXP 65
21467: PUSH
21468: LD_EXP 77
21472: AND
21473: IFFALSE 21552
21475: GO 21477
21477: DISABLE
21478: LD_INT 0
21480: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21481: LD_ADDR_VAR 0 1
21485: PUSH
21486: LD_INT 22
21488: PUSH
21489: LD_OWVAR 2
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 21
21500: PUSH
21501: LD_INT 3
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PPUSH
21512: CALL_OW 69
21516: ST_TO_ADDR
// if not tmp then
21517: LD_VAR 0 1
21521: NOT
21522: IFFALSE 21526
// exit ;
21524: GO 21552
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21526: LD_VAR 0 1
21530: PUSH
21531: LD_INT 1
21533: PPUSH
21534: LD_VAR 0 1
21538: PPUSH
21539: CALL_OW 12
21543: ARRAY
21544: PPUSH
21545: LD_INT 100
21547: PPUSH
21548: CALL_OW 234
// end ;
21552: PPOPN 1
21554: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21555: LD_EXP 65
21559: PUSH
21560: LD_EXP 79
21564: AND
21565: IFFALSE 21663
21567: GO 21569
21569: DISABLE
21570: LD_INT 0
21572: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21573: LD_ADDR_VAR 0 1
21577: PUSH
21578: LD_INT 22
21580: PUSH
21581: LD_OWVAR 2
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: PUSH
21590: LD_INT 21
21592: PUSH
21593: LD_INT 1
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PPUSH
21604: CALL_OW 69
21608: ST_TO_ADDR
// if not tmp then
21609: LD_VAR 0 1
21613: NOT
21614: IFFALSE 21618
// exit ;
21616: GO 21663
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21618: LD_VAR 0 1
21622: PUSH
21623: LD_INT 1
21625: PPUSH
21626: LD_VAR 0 1
21630: PPUSH
21631: CALL_OW 12
21635: ARRAY
21636: PPUSH
21637: LD_INT 1
21639: PPUSH
21640: LD_INT 4
21642: PPUSH
21643: CALL_OW 12
21647: PPUSH
21648: LD_INT 3000
21650: PPUSH
21651: LD_INT 9000
21653: PPUSH
21654: CALL_OW 12
21658: PPUSH
21659: CALL_OW 492
// end ;
21663: PPOPN 1
21665: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21666: LD_EXP 65
21670: PUSH
21671: LD_EXP 80
21675: AND
21676: IFFALSE 21696
21678: GO 21680
21680: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21681: LD_INT 1
21683: PPUSH
21684: LD_OWVAR 2
21688: PPUSH
21689: LD_INT 0
21691: PPUSH
21692: CALL_OW 324
21696: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21697: LD_EXP 65
21701: PUSH
21702: LD_EXP 81
21706: AND
21707: IFFALSE 21790
21709: GO 21711
21711: DISABLE
21712: LD_INT 0
21714: PPUSH
21715: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21716: LD_ADDR_VAR 0 2
21720: PUSH
21721: LD_INT 22
21723: PUSH
21724: LD_OWVAR 2
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 21
21735: PUSH
21736: LD_INT 3
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PPUSH
21747: CALL_OW 69
21751: ST_TO_ADDR
// if not tmp then
21752: LD_VAR 0 2
21756: NOT
21757: IFFALSE 21761
// exit ;
21759: GO 21790
// for i in tmp do
21761: LD_ADDR_VAR 0 1
21765: PUSH
21766: LD_VAR 0 2
21770: PUSH
21771: FOR_IN
21772: IFFALSE 21788
// SetBLevel ( i , 10 ) ;
21774: LD_VAR 0 1
21778: PPUSH
21779: LD_INT 10
21781: PPUSH
21782: CALL_OW 241
21786: GO 21771
21788: POP
21789: POP
// end ;
21790: PPOPN 2
21792: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21793: LD_EXP 65
21797: PUSH
21798: LD_EXP 82
21802: AND
21803: IFFALSE 21914
21805: GO 21807
21807: DISABLE
21808: LD_INT 0
21810: PPUSH
21811: PPUSH
21812: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21813: LD_ADDR_VAR 0 3
21817: PUSH
21818: LD_INT 22
21820: PUSH
21821: LD_OWVAR 2
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: LD_INT 25
21832: PUSH
21833: LD_INT 1
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PPUSH
21844: CALL_OW 69
21848: ST_TO_ADDR
// if not tmp then
21849: LD_VAR 0 3
21853: NOT
21854: IFFALSE 21858
// exit ;
21856: GO 21914
// un := tmp [ rand ( 1 , tmp ) ] ;
21858: LD_ADDR_VAR 0 2
21862: PUSH
21863: LD_VAR 0 3
21867: PUSH
21868: LD_INT 1
21870: PPUSH
21871: LD_VAR 0 3
21875: PPUSH
21876: CALL_OW 12
21880: ARRAY
21881: ST_TO_ADDR
// if Crawls ( un ) then
21882: LD_VAR 0 2
21886: PPUSH
21887: CALL_OW 318
21891: IFFALSE 21902
// ComWalk ( un ) ;
21893: LD_VAR 0 2
21897: PPUSH
21898: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21902: LD_VAR 0 2
21906: PPUSH
21907: LD_INT 5
21909: PPUSH
21910: CALL_OW 336
// end ;
21914: PPOPN 3
21916: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
21917: LD_EXP 65
21921: PUSH
21922: LD_EXP 83
21926: AND
21927: PUSH
21928: LD_OWVAR 67
21932: PUSH
21933: LD_INT 3
21935: LESS
21936: AND
21937: IFFALSE 21956
21939: GO 21941
21941: DISABLE
// Difficulty := Difficulty + 1 ;
21942: LD_ADDR_OWVAR 67
21946: PUSH
21947: LD_OWVAR 67
21951: PUSH
21952: LD_INT 1
21954: PLUS
21955: ST_TO_ADDR
21956: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21957: LD_EXP 65
21961: PUSH
21962: LD_EXP 84
21966: AND
21967: IFFALSE 22070
21969: GO 21971
21971: DISABLE
21972: LD_INT 0
21974: PPUSH
// begin for i := 1 to 5 do
21975: LD_ADDR_VAR 0 1
21979: PUSH
21980: DOUBLE
21981: LD_INT 1
21983: DEC
21984: ST_TO_ADDR
21985: LD_INT 5
21987: PUSH
21988: FOR_TO
21989: IFFALSE 22068
// begin uc_nation := nation_nature ;
21991: LD_ADDR_OWVAR 21
21995: PUSH
21996: LD_INT 0
21998: ST_TO_ADDR
// uc_side := 0 ;
21999: LD_ADDR_OWVAR 20
22003: PUSH
22004: LD_INT 0
22006: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22007: LD_ADDR_OWVAR 29
22011: PUSH
22012: LD_INT 12
22014: PUSH
22015: LD_INT 12
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: ST_TO_ADDR
// hc_agressivity := 20 ;
22022: LD_ADDR_OWVAR 35
22026: PUSH
22027: LD_INT 20
22029: ST_TO_ADDR
// hc_class := class_tiger ;
22030: LD_ADDR_OWVAR 28
22034: PUSH
22035: LD_INT 14
22037: ST_TO_ADDR
// hc_gallery :=  ;
22038: LD_ADDR_OWVAR 33
22042: PUSH
22043: LD_STRING 
22045: ST_TO_ADDR
// hc_name :=  ;
22046: LD_ADDR_OWVAR 26
22050: PUSH
22051: LD_STRING 
22053: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22054: CALL_OW 44
22058: PPUSH
22059: LD_INT 0
22061: PPUSH
22062: CALL_OW 51
// end ;
22066: GO 21988
22068: POP
22069: POP
// end ;
22070: PPOPN 1
22072: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22073: LD_EXP 65
22077: PUSH
22078: LD_EXP 85
22082: AND
22083: IFFALSE 22092
22085: GO 22087
22087: DISABLE
// StreamSibBomb ;
22088: CALL 22093 0 0
22092: END
// export function StreamSibBomb ; var i , x , y ; begin
22093: LD_INT 0
22095: PPUSH
22096: PPUSH
22097: PPUSH
22098: PPUSH
// result := false ;
22099: LD_ADDR_VAR 0 1
22103: PUSH
22104: LD_INT 0
22106: ST_TO_ADDR
// for i := 1 to 16 do
22107: LD_ADDR_VAR 0 2
22111: PUSH
22112: DOUBLE
22113: LD_INT 1
22115: DEC
22116: ST_TO_ADDR
22117: LD_INT 16
22119: PUSH
22120: FOR_TO
22121: IFFALSE 22320
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22123: LD_ADDR_VAR 0 3
22127: PUSH
22128: LD_INT 10
22130: PUSH
22131: LD_INT 20
22133: PUSH
22134: LD_INT 30
22136: PUSH
22137: LD_INT 40
22139: PUSH
22140: LD_INT 50
22142: PUSH
22143: LD_INT 60
22145: PUSH
22146: LD_INT 70
22148: PUSH
22149: LD_INT 80
22151: PUSH
22152: LD_INT 90
22154: PUSH
22155: LD_INT 100
22157: PUSH
22158: LD_INT 110
22160: PUSH
22161: LD_INT 120
22163: PUSH
22164: LD_INT 130
22166: PUSH
22167: LD_INT 140
22169: PUSH
22170: LD_INT 150
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 1
22192: PPUSH
22193: LD_INT 15
22195: PPUSH
22196: CALL_OW 12
22200: ARRAY
22201: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22202: LD_ADDR_VAR 0 4
22206: PUSH
22207: LD_INT 10
22209: PUSH
22210: LD_INT 20
22212: PUSH
22213: LD_INT 30
22215: PUSH
22216: LD_INT 40
22218: PUSH
22219: LD_INT 50
22221: PUSH
22222: LD_INT 60
22224: PUSH
22225: LD_INT 70
22227: PUSH
22228: LD_INT 80
22230: PUSH
22231: LD_INT 90
22233: PUSH
22234: LD_INT 100
22236: PUSH
22237: LD_INT 110
22239: PUSH
22240: LD_INT 120
22242: PUSH
22243: LD_INT 130
22245: PUSH
22246: LD_INT 140
22248: PUSH
22249: LD_INT 150
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 1
22271: PPUSH
22272: LD_INT 15
22274: PPUSH
22275: CALL_OW 12
22279: ARRAY
22280: ST_TO_ADDR
// if ValidHex ( x , y ) then
22281: LD_VAR 0 3
22285: PPUSH
22286: LD_VAR 0 4
22290: PPUSH
22291: CALL_OW 488
22295: IFFALSE 22318
// begin result := [ x , y ] ;
22297: LD_ADDR_VAR 0 1
22301: PUSH
22302: LD_VAR 0 3
22306: PUSH
22307: LD_VAR 0 4
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: ST_TO_ADDR
// break ;
22316: GO 22320
// end ; end ;
22318: GO 22120
22320: POP
22321: POP
// if result then
22322: LD_VAR 0 1
22326: IFFALSE 22386
// begin ToLua ( playSibBomb() ) ;
22328: LD_STRING playSibBomb()
22330: PPUSH
22331: CALL_OW 559
// wait ( 0 0$14 ) ;
22335: LD_INT 490
22337: PPUSH
22338: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22342: LD_VAR 0 1
22346: PUSH
22347: LD_INT 1
22349: ARRAY
22350: PPUSH
22351: LD_VAR 0 1
22355: PUSH
22356: LD_INT 2
22358: ARRAY
22359: PPUSH
22360: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22364: LD_VAR 0 1
22368: PUSH
22369: LD_INT 1
22371: ARRAY
22372: PPUSH
22373: LD_VAR 0 1
22377: PUSH
22378: LD_INT 2
22380: ARRAY
22381: PPUSH
22382: CALL_OW 429
// end ; end ;
22386: LD_VAR 0 1
22390: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22391: LD_EXP 65
22395: PUSH
22396: LD_EXP 87
22400: AND
22401: IFFALSE 22413
22403: GO 22405
22405: DISABLE
// YouLost (  ) ;
22406: LD_STRING 
22408: PPUSH
22409: CALL_OW 104
22413: END
// every 0 0$1 trigger StreamModeActive and sFog do
22414: LD_EXP 65
22418: PUSH
22419: LD_EXP 86
22423: AND
22424: IFFALSE 22438
22426: GO 22428
22428: DISABLE
// FogOff ( your_side ) ;
22429: LD_OWVAR 2
22433: PPUSH
22434: CALL_OW 344
22438: END
// every 0 0$1 trigger StreamModeActive and sSun do
22439: LD_EXP 65
22443: PUSH
22444: LD_EXP 88
22448: AND
22449: IFFALSE 22477
22451: GO 22453
22453: DISABLE
// begin solar_recharge_percent := 0 ;
22454: LD_ADDR_OWVAR 79
22458: PUSH
22459: LD_INT 0
22461: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22462: LD_INT 10500
22464: PPUSH
22465: CALL_OW 67
// solar_recharge_percent := 100 ;
22469: LD_ADDR_OWVAR 79
22473: PUSH
22474: LD_INT 100
22476: ST_TO_ADDR
// end ;
22477: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22478: LD_EXP 65
22482: PUSH
22483: LD_EXP 89
22487: AND
22488: IFFALSE 22727
22490: GO 22492
22492: DISABLE
22493: LD_INT 0
22495: PPUSH
22496: PPUSH
22497: PPUSH
// begin tmp := [ ] ;
22498: LD_ADDR_VAR 0 3
22502: PUSH
22503: EMPTY
22504: ST_TO_ADDR
// for i := 1 to 6 do
22505: LD_ADDR_VAR 0 1
22509: PUSH
22510: DOUBLE
22511: LD_INT 1
22513: DEC
22514: ST_TO_ADDR
22515: LD_INT 6
22517: PUSH
22518: FOR_TO
22519: IFFALSE 22624
// begin uc_nation := nation_nature ;
22521: LD_ADDR_OWVAR 21
22525: PUSH
22526: LD_INT 0
22528: ST_TO_ADDR
// uc_side := 0 ;
22529: LD_ADDR_OWVAR 20
22533: PUSH
22534: LD_INT 0
22536: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22537: LD_ADDR_OWVAR 29
22541: PUSH
22542: LD_INT 12
22544: PUSH
22545: LD_INT 12
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: ST_TO_ADDR
// hc_agressivity := 20 ;
22552: LD_ADDR_OWVAR 35
22556: PUSH
22557: LD_INT 20
22559: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22560: LD_ADDR_OWVAR 28
22564: PUSH
22565: LD_INT 17
22567: ST_TO_ADDR
// hc_gallery :=  ;
22568: LD_ADDR_OWVAR 33
22572: PUSH
22573: LD_STRING 
22575: ST_TO_ADDR
// hc_name :=  ;
22576: LD_ADDR_OWVAR 26
22580: PUSH
22581: LD_STRING 
22583: ST_TO_ADDR
// un := CreateHuman ;
22584: LD_ADDR_VAR 0 2
22588: PUSH
22589: CALL_OW 44
22593: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22594: LD_VAR 0 2
22598: PPUSH
22599: LD_INT 1
22601: PPUSH
22602: CALL_OW 51
// tmp := tmp ^ un ;
22606: LD_ADDR_VAR 0 3
22610: PUSH
22611: LD_VAR 0 3
22615: PUSH
22616: LD_VAR 0 2
22620: ADD
22621: ST_TO_ADDR
// end ;
22622: GO 22518
22624: POP
22625: POP
// repeat wait ( 0 0$1 ) ;
22626: LD_INT 35
22628: PPUSH
22629: CALL_OW 67
// for un in tmp do
22633: LD_ADDR_VAR 0 2
22637: PUSH
22638: LD_VAR 0 3
22642: PUSH
22643: FOR_IN
22644: IFFALSE 22718
// begin if IsDead ( un ) then
22646: LD_VAR 0 2
22650: PPUSH
22651: CALL_OW 301
22655: IFFALSE 22675
// begin tmp := tmp diff un ;
22657: LD_ADDR_VAR 0 3
22661: PUSH
22662: LD_VAR 0 3
22666: PUSH
22667: LD_VAR 0 2
22671: DIFF
22672: ST_TO_ADDR
// continue ;
22673: GO 22643
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22675: LD_VAR 0 2
22679: PPUSH
22680: LD_INT 3
22682: PUSH
22683: LD_INT 22
22685: PUSH
22686: LD_INT 0
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PPUSH
22697: CALL_OW 69
22701: PPUSH
22702: LD_VAR 0 2
22706: PPUSH
22707: CALL_OW 74
22711: PPUSH
22712: CALL_OW 115
// end ;
22716: GO 22643
22718: POP
22719: POP
// until not tmp ;
22720: LD_VAR 0 3
22724: NOT
22725: IFFALSE 22626
// end ;
22727: PPOPN 3
22729: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22730: LD_EXP 65
22734: PUSH
22735: LD_EXP 90
22739: AND
22740: IFFALSE 22794
22742: GO 22744
22744: DISABLE
// begin ToLua ( displayTroll(); ) ;
22745: LD_STRING displayTroll();
22747: PPUSH
22748: CALL_OW 559
// wait ( 3 3$00 ) ;
22752: LD_INT 6300
22754: PPUSH
22755: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22759: LD_STRING hideTroll();
22761: PPUSH
22762: CALL_OW 559
// wait ( 1 1$00 ) ;
22766: LD_INT 2100
22768: PPUSH
22769: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22773: LD_STRING displayTroll();
22775: PPUSH
22776: CALL_OW 559
// wait ( 1 1$00 ) ;
22780: LD_INT 2100
22782: PPUSH
22783: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22787: LD_STRING hideTroll();
22789: PPUSH
22790: CALL_OW 559
// end ;
22794: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22795: LD_EXP 65
22799: PUSH
22800: LD_EXP 91
22804: AND
22805: IFFALSE 22868
22807: GO 22809
22809: DISABLE
22810: LD_INT 0
22812: PPUSH
// begin p := 0 ;
22813: LD_ADDR_VAR 0 1
22817: PUSH
22818: LD_INT 0
22820: ST_TO_ADDR
// repeat game_speed := 1 ;
22821: LD_ADDR_OWVAR 65
22825: PUSH
22826: LD_INT 1
22828: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22829: LD_INT 35
22831: PPUSH
22832: CALL_OW 67
// p := p + 1 ;
22836: LD_ADDR_VAR 0 1
22840: PUSH
22841: LD_VAR 0 1
22845: PUSH
22846: LD_INT 1
22848: PLUS
22849: ST_TO_ADDR
// until p >= 60 ;
22850: LD_VAR 0 1
22854: PUSH
22855: LD_INT 60
22857: GREATEREQUAL
22858: IFFALSE 22821
// game_speed := 4 ;
22860: LD_ADDR_OWVAR 65
22864: PUSH
22865: LD_INT 4
22867: ST_TO_ADDR
// end ;
22868: PPOPN 1
22870: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22871: LD_EXP 65
22875: PUSH
22876: LD_EXP 92
22880: AND
22881: IFFALSE 23027
22883: GO 22885
22885: DISABLE
22886: LD_INT 0
22888: PPUSH
22889: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22890: LD_ADDR_VAR 0 1
22894: PUSH
22895: LD_INT 22
22897: PUSH
22898: LD_OWVAR 2
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 2
22909: PUSH
22910: LD_INT 30
22912: PUSH
22913: LD_INT 0
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PUSH
22920: LD_INT 30
22922: PUSH
22923: LD_INT 1
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: LIST
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PPUSH
22939: CALL_OW 69
22943: ST_TO_ADDR
// if not depot then
22944: LD_VAR 0 1
22948: NOT
22949: IFFALSE 22953
// exit ;
22951: GO 23027
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22953: LD_ADDR_VAR 0 2
22957: PUSH
22958: LD_VAR 0 1
22962: PUSH
22963: LD_INT 1
22965: PPUSH
22966: LD_VAR 0 1
22970: PPUSH
22971: CALL_OW 12
22975: ARRAY
22976: PPUSH
22977: CALL_OW 274
22981: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22982: LD_VAR 0 2
22986: PPUSH
22987: LD_INT 1
22989: PPUSH
22990: LD_INT 0
22992: PPUSH
22993: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22997: LD_VAR 0 2
23001: PPUSH
23002: LD_INT 2
23004: PPUSH
23005: LD_INT 0
23007: PPUSH
23008: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23012: LD_VAR 0 2
23016: PPUSH
23017: LD_INT 3
23019: PPUSH
23020: LD_INT 0
23022: PPUSH
23023: CALL_OW 277
// end ;
23027: PPOPN 2
23029: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23030: LD_EXP 65
23034: PUSH
23035: LD_EXP 93
23039: AND
23040: IFFALSE 23137
23042: GO 23044
23044: DISABLE
23045: LD_INT 0
23047: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23048: LD_ADDR_VAR 0 1
23052: PUSH
23053: LD_INT 22
23055: PUSH
23056: LD_OWVAR 2
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: LD_INT 21
23067: PUSH
23068: LD_INT 1
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PUSH
23075: LD_INT 3
23077: PUSH
23078: LD_INT 23
23080: PUSH
23081: LD_INT 0
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: LIST
23096: PPUSH
23097: CALL_OW 69
23101: ST_TO_ADDR
// if not tmp then
23102: LD_VAR 0 1
23106: NOT
23107: IFFALSE 23111
// exit ;
23109: GO 23137
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23111: LD_VAR 0 1
23115: PUSH
23116: LD_INT 1
23118: PPUSH
23119: LD_VAR 0 1
23123: PPUSH
23124: CALL_OW 12
23128: ARRAY
23129: PPUSH
23130: LD_INT 200
23132: PPUSH
23133: CALL_OW 234
// end ;
23137: PPOPN 1
23139: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23140: LD_EXP 65
23144: PUSH
23145: LD_EXP 94
23149: AND
23150: IFFALSE 23229
23152: GO 23154
23154: DISABLE
23155: LD_INT 0
23157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23158: LD_ADDR_VAR 0 1
23162: PUSH
23163: LD_INT 22
23165: PUSH
23166: LD_OWVAR 2
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 21
23177: PUSH
23178: LD_INT 2
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PPUSH
23189: CALL_OW 69
23193: ST_TO_ADDR
// if not tmp then
23194: LD_VAR 0 1
23198: NOT
23199: IFFALSE 23203
// exit ;
23201: GO 23229
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23203: LD_VAR 0 1
23207: PUSH
23208: LD_INT 1
23210: PPUSH
23211: LD_VAR 0 1
23215: PPUSH
23216: CALL_OW 12
23220: ARRAY
23221: PPUSH
23222: LD_INT 60
23224: PPUSH
23225: CALL_OW 234
// end ;
23229: PPOPN 1
23231: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23232: LD_EXP 65
23236: PUSH
23237: LD_EXP 95
23241: AND
23242: IFFALSE 23341
23244: GO 23246
23246: DISABLE
23247: LD_INT 0
23249: PPUSH
23250: PPUSH
// begin enable ;
23251: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23252: LD_ADDR_VAR 0 1
23256: PUSH
23257: LD_INT 22
23259: PUSH
23260: LD_OWVAR 2
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 61
23271: PUSH
23272: EMPTY
23273: LIST
23274: PUSH
23275: LD_INT 33
23277: PUSH
23278: LD_INT 2
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: LIST
23289: PPUSH
23290: CALL_OW 69
23294: ST_TO_ADDR
// if not tmp then
23295: LD_VAR 0 1
23299: NOT
23300: IFFALSE 23304
// exit ;
23302: GO 23341
// for i in tmp do
23304: LD_ADDR_VAR 0 2
23308: PUSH
23309: LD_VAR 0 1
23313: PUSH
23314: FOR_IN
23315: IFFALSE 23339
// if IsControledBy ( i ) then
23317: LD_VAR 0 2
23321: PPUSH
23322: CALL_OW 312
23326: IFFALSE 23337
// ComUnlink ( i ) ;
23328: LD_VAR 0 2
23332: PPUSH
23333: CALL_OW 136
23337: GO 23314
23339: POP
23340: POP
// end ;
23341: PPOPN 2
23343: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23344: LD_EXP 65
23348: PUSH
23349: LD_EXP 96
23353: AND
23354: IFFALSE 23494
23356: GO 23358
23358: DISABLE
23359: LD_INT 0
23361: PPUSH
23362: PPUSH
// begin ToLua ( displayPowell(); ) ;
23363: LD_STRING displayPowell();
23365: PPUSH
23366: CALL_OW 559
// uc_side := 0 ;
23370: LD_ADDR_OWVAR 20
23374: PUSH
23375: LD_INT 0
23377: ST_TO_ADDR
// uc_nation := 2 ;
23378: LD_ADDR_OWVAR 21
23382: PUSH
23383: LD_INT 2
23385: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23386: LD_ADDR_OWVAR 37
23390: PUSH
23391: LD_INT 14
23393: ST_TO_ADDR
// vc_engine := engine_siberite ;
23394: LD_ADDR_OWVAR 39
23398: PUSH
23399: LD_INT 3
23401: ST_TO_ADDR
// vc_control := control_apeman ;
23402: LD_ADDR_OWVAR 38
23406: PUSH
23407: LD_INT 5
23409: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23410: LD_ADDR_OWVAR 40
23414: PUSH
23415: LD_INT 29
23417: ST_TO_ADDR
// un := CreateVehicle ;
23418: LD_ADDR_VAR 0 2
23422: PUSH
23423: CALL_OW 45
23427: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23428: LD_VAR 0 2
23432: PPUSH
23433: LD_INT 1
23435: PPUSH
23436: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23440: LD_INT 35
23442: PPUSH
23443: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23447: LD_VAR 0 2
23451: PPUSH
23452: LD_INT 22
23454: PUSH
23455: LD_OWVAR 2
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PPUSH
23464: CALL_OW 69
23468: PPUSH
23469: LD_VAR 0 2
23473: PPUSH
23474: CALL_OW 74
23478: PPUSH
23479: CALL_OW 115
// until IsDead ( un ) ;
23483: LD_VAR 0 2
23487: PPUSH
23488: CALL_OW 301
23492: IFFALSE 23440
// end ;
23494: PPOPN 2
23496: END
// every 0 0$1 trigger StreamModeActive and sStu do
23497: LD_EXP 65
23501: PUSH
23502: LD_EXP 104
23506: AND
23507: IFFALSE 23523
23509: GO 23511
23511: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23512: LD_STRING displayStucuk();
23514: PPUSH
23515: CALL_OW 559
// ResetFog ;
23519: CALL_OW 335
// end ;
23523: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23524: LD_EXP 65
23528: PUSH
23529: LD_EXP 97
23533: AND
23534: IFFALSE 23675
23536: GO 23538
23538: DISABLE
23539: LD_INT 0
23541: PPUSH
23542: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23543: LD_ADDR_VAR 0 2
23547: PUSH
23548: LD_INT 22
23550: PUSH
23551: LD_OWVAR 2
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PUSH
23560: LD_INT 21
23562: PUSH
23563: LD_INT 1
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PPUSH
23574: CALL_OW 69
23578: ST_TO_ADDR
// if not tmp then
23579: LD_VAR 0 2
23583: NOT
23584: IFFALSE 23588
// exit ;
23586: GO 23675
// un := tmp [ rand ( 1 , tmp ) ] ;
23588: LD_ADDR_VAR 0 1
23592: PUSH
23593: LD_VAR 0 2
23597: PUSH
23598: LD_INT 1
23600: PPUSH
23601: LD_VAR 0 2
23605: PPUSH
23606: CALL_OW 12
23610: ARRAY
23611: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23612: LD_VAR 0 1
23616: PPUSH
23617: LD_INT 0
23619: PPUSH
23620: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23624: LD_VAR 0 1
23628: PPUSH
23629: LD_OWVAR 3
23633: PUSH
23634: LD_VAR 0 1
23638: DIFF
23639: PPUSH
23640: LD_VAR 0 1
23644: PPUSH
23645: CALL_OW 74
23649: PPUSH
23650: CALL_OW 115
// wait ( 0 0$20 ) ;
23654: LD_INT 700
23656: PPUSH
23657: CALL_OW 67
// SetSide ( un , your_side ) ;
23661: LD_VAR 0 1
23665: PPUSH
23666: LD_OWVAR 2
23670: PPUSH
23671: CALL_OW 235
// end ;
23675: PPOPN 2
23677: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23678: LD_EXP 65
23682: PUSH
23683: LD_EXP 98
23687: AND
23688: IFFALSE 23794
23690: GO 23692
23692: DISABLE
23693: LD_INT 0
23695: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23696: LD_ADDR_VAR 0 1
23700: PUSH
23701: LD_INT 22
23703: PUSH
23704: LD_OWVAR 2
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: PUSH
23713: LD_INT 2
23715: PUSH
23716: LD_INT 30
23718: PUSH
23719: LD_INT 0
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PUSH
23726: LD_INT 30
23728: PUSH
23729: LD_INT 1
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: LIST
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PPUSH
23745: CALL_OW 69
23749: ST_TO_ADDR
// if not depot then
23750: LD_VAR 0 1
23754: NOT
23755: IFFALSE 23759
// exit ;
23757: GO 23794
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23759: LD_VAR 0 1
23763: PUSH
23764: LD_INT 1
23766: ARRAY
23767: PPUSH
23768: CALL_OW 250
23772: PPUSH
23773: LD_VAR 0 1
23777: PUSH
23778: LD_INT 1
23780: ARRAY
23781: PPUSH
23782: CALL_OW 251
23786: PPUSH
23787: LD_INT 70
23789: PPUSH
23790: CALL_OW 495
// end ;
23794: PPOPN 1
23796: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23797: LD_EXP 65
23801: PUSH
23802: LD_EXP 99
23806: AND
23807: IFFALSE 24018
23809: GO 23811
23811: DISABLE
23812: LD_INT 0
23814: PPUSH
23815: PPUSH
23816: PPUSH
23817: PPUSH
23818: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23819: LD_ADDR_VAR 0 5
23823: PUSH
23824: LD_INT 22
23826: PUSH
23827: LD_OWVAR 2
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PUSH
23836: LD_INT 21
23838: PUSH
23839: LD_INT 1
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PPUSH
23850: CALL_OW 69
23854: ST_TO_ADDR
// if not tmp then
23855: LD_VAR 0 5
23859: NOT
23860: IFFALSE 23864
// exit ;
23862: GO 24018
// for i in tmp do
23864: LD_ADDR_VAR 0 1
23868: PUSH
23869: LD_VAR 0 5
23873: PUSH
23874: FOR_IN
23875: IFFALSE 24016
// begin d := rand ( 0 , 5 ) ;
23877: LD_ADDR_VAR 0 4
23881: PUSH
23882: LD_INT 0
23884: PPUSH
23885: LD_INT 5
23887: PPUSH
23888: CALL_OW 12
23892: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23893: LD_ADDR_VAR 0 2
23897: PUSH
23898: LD_VAR 0 1
23902: PPUSH
23903: CALL_OW 250
23907: PPUSH
23908: LD_VAR 0 4
23912: PPUSH
23913: LD_INT 3
23915: PPUSH
23916: LD_INT 12
23918: PPUSH
23919: CALL_OW 12
23923: PPUSH
23924: CALL_OW 272
23928: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23929: LD_ADDR_VAR 0 3
23933: PUSH
23934: LD_VAR 0 1
23938: PPUSH
23939: CALL_OW 251
23943: PPUSH
23944: LD_VAR 0 4
23948: PPUSH
23949: LD_INT 3
23951: PPUSH
23952: LD_INT 12
23954: PPUSH
23955: CALL_OW 12
23959: PPUSH
23960: CALL_OW 273
23964: ST_TO_ADDR
// if ValidHex ( x , y ) then
23965: LD_VAR 0 2
23969: PPUSH
23970: LD_VAR 0 3
23974: PPUSH
23975: CALL_OW 488
23979: IFFALSE 24014
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23981: LD_VAR 0 1
23985: PPUSH
23986: LD_VAR 0 2
23990: PPUSH
23991: LD_VAR 0 3
23995: PPUSH
23996: LD_INT 3
23998: PPUSH
23999: LD_INT 6
24001: PPUSH
24002: CALL_OW 12
24006: PPUSH
24007: LD_INT 1
24009: PPUSH
24010: CALL_OW 483
// end ;
24014: GO 23874
24016: POP
24017: POP
// end ;
24018: PPOPN 5
24020: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24021: LD_EXP 65
24025: PUSH
24026: LD_EXP 100
24030: AND
24031: IFFALSE 24125
24033: GO 24035
24035: DISABLE
24036: LD_INT 0
24038: PPUSH
24039: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24040: LD_ADDR_VAR 0 2
24044: PUSH
24045: LD_INT 22
24047: PUSH
24048: LD_OWVAR 2
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 32
24059: PUSH
24060: LD_INT 1
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 21
24069: PUSH
24070: LD_INT 2
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: LIST
24081: PPUSH
24082: CALL_OW 69
24086: ST_TO_ADDR
// if not tmp then
24087: LD_VAR 0 2
24091: NOT
24092: IFFALSE 24096
// exit ;
24094: GO 24125
// for i in tmp do
24096: LD_ADDR_VAR 0 1
24100: PUSH
24101: LD_VAR 0 2
24105: PUSH
24106: FOR_IN
24107: IFFALSE 24123
// SetFuel ( i , 0 ) ;
24109: LD_VAR 0 1
24113: PPUSH
24114: LD_INT 0
24116: PPUSH
24117: CALL_OW 240
24121: GO 24106
24123: POP
24124: POP
// end ;
24125: PPOPN 2
24127: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24128: LD_EXP 65
24132: PUSH
24133: LD_EXP 101
24137: AND
24138: IFFALSE 24204
24140: GO 24142
24142: DISABLE
24143: LD_INT 0
24145: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24146: LD_ADDR_VAR 0 1
24150: PUSH
24151: LD_INT 22
24153: PUSH
24154: LD_OWVAR 2
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: LD_INT 30
24165: PUSH
24166: LD_INT 29
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PPUSH
24177: CALL_OW 69
24181: ST_TO_ADDR
// if not tmp then
24182: LD_VAR 0 1
24186: NOT
24187: IFFALSE 24191
// exit ;
24189: GO 24204
// DestroyUnit ( tmp [ 1 ] ) ;
24191: LD_VAR 0 1
24195: PUSH
24196: LD_INT 1
24198: ARRAY
24199: PPUSH
24200: CALL_OW 65
// end ;
24204: PPOPN 1
24206: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24207: LD_EXP 65
24211: PUSH
24212: LD_EXP 103
24216: AND
24217: IFFALSE 24346
24219: GO 24221
24221: DISABLE
24222: LD_INT 0
24224: PPUSH
// begin uc_side := 0 ;
24225: LD_ADDR_OWVAR 20
24229: PUSH
24230: LD_INT 0
24232: ST_TO_ADDR
// uc_nation := nation_arabian ;
24233: LD_ADDR_OWVAR 21
24237: PUSH
24238: LD_INT 2
24240: ST_TO_ADDR
// hc_gallery :=  ;
24241: LD_ADDR_OWVAR 33
24245: PUSH
24246: LD_STRING 
24248: ST_TO_ADDR
// hc_name :=  ;
24249: LD_ADDR_OWVAR 26
24253: PUSH
24254: LD_STRING 
24256: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24257: LD_INT 1
24259: PPUSH
24260: LD_INT 11
24262: PPUSH
24263: LD_INT 10
24265: PPUSH
24266: CALL_OW 380
// un := CreateHuman ;
24270: LD_ADDR_VAR 0 1
24274: PUSH
24275: CALL_OW 44
24279: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24280: LD_VAR 0 1
24284: PPUSH
24285: LD_INT 1
24287: PPUSH
24288: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24292: LD_INT 35
24294: PPUSH
24295: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24299: LD_VAR 0 1
24303: PPUSH
24304: LD_INT 22
24306: PUSH
24307: LD_OWVAR 2
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PPUSH
24316: CALL_OW 69
24320: PPUSH
24321: LD_VAR 0 1
24325: PPUSH
24326: CALL_OW 74
24330: PPUSH
24331: CALL_OW 115
// until IsDead ( un ) ;
24335: LD_VAR 0 1
24339: PPUSH
24340: CALL_OW 301
24344: IFFALSE 24292
// end ;
24346: PPOPN 1
24348: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24349: LD_EXP 65
24353: PUSH
24354: LD_EXP 105
24358: AND
24359: IFFALSE 24371
24361: GO 24363
24363: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24364: LD_STRING earthquake(getX(game), 0, 32)
24366: PPUSH
24367: CALL_OW 559
24371: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24372: LD_EXP 65
24376: PUSH
24377: LD_EXP 106
24381: AND
24382: IFFALSE 24473
24384: GO 24386
24386: DISABLE
24387: LD_INT 0
24389: PPUSH
// begin enable ;
24390: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24391: LD_ADDR_VAR 0 1
24395: PUSH
24396: LD_INT 22
24398: PUSH
24399: LD_OWVAR 2
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PUSH
24408: LD_INT 21
24410: PUSH
24411: LD_INT 2
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 33
24420: PUSH
24421: LD_INT 3
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: LIST
24432: PPUSH
24433: CALL_OW 69
24437: ST_TO_ADDR
// if not tmp then
24438: LD_VAR 0 1
24442: NOT
24443: IFFALSE 24447
// exit ;
24445: GO 24473
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24447: LD_VAR 0 1
24451: PUSH
24452: LD_INT 1
24454: PPUSH
24455: LD_VAR 0 1
24459: PPUSH
24460: CALL_OW 12
24464: ARRAY
24465: PPUSH
24466: LD_INT 1
24468: PPUSH
24469: CALL_OW 234
// end ;
24473: PPOPN 1
24475: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24476: LD_EXP 65
24480: PUSH
24481: LD_EXP 107
24485: AND
24486: IFFALSE 24627
24488: GO 24490
24490: DISABLE
24491: LD_INT 0
24493: PPUSH
24494: PPUSH
24495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24496: LD_ADDR_VAR 0 3
24500: PUSH
24501: LD_INT 22
24503: PUSH
24504: LD_OWVAR 2
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 25
24515: PUSH
24516: LD_INT 1
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PPUSH
24527: CALL_OW 69
24531: ST_TO_ADDR
// if not tmp then
24532: LD_VAR 0 3
24536: NOT
24537: IFFALSE 24541
// exit ;
24539: GO 24627
// un := tmp [ rand ( 1 , tmp ) ] ;
24541: LD_ADDR_VAR 0 2
24545: PUSH
24546: LD_VAR 0 3
24550: PUSH
24551: LD_INT 1
24553: PPUSH
24554: LD_VAR 0 3
24558: PPUSH
24559: CALL_OW 12
24563: ARRAY
24564: ST_TO_ADDR
// if Crawls ( un ) then
24565: LD_VAR 0 2
24569: PPUSH
24570: CALL_OW 318
24574: IFFALSE 24585
// ComWalk ( un ) ;
24576: LD_VAR 0 2
24580: PPUSH
24581: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24585: LD_VAR 0 2
24589: PPUSH
24590: LD_INT 9
24592: PPUSH
24593: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24597: LD_INT 28
24599: PPUSH
24600: LD_OWVAR 2
24604: PPUSH
24605: LD_INT 2
24607: PPUSH
24608: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24612: LD_INT 29
24614: PPUSH
24615: LD_OWVAR 2
24619: PPUSH
24620: LD_INT 2
24622: PPUSH
24623: CALL_OW 322
// end ;
24627: PPOPN 3
24629: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24630: LD_EXP 65
24634: PUSH
24635: LD_EXP 108
24639: AND
24640: IFFALSE 24751
24642: GO 24644
24644: DISABLE
24645: LD_INT 0
24647: PPUSH
24648: PPUSH
24649: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24650: LD_ADDR_VAR 0 3
24654: PUSH
24655: LD_INT 22
24657: PUSH
24658: LD_OWVAR 2
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 25
24669: PUSH
24670: LD_INT 1
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PPUSH
24681: CALL_OW 69
24685: ST_TO_ADDR
// if not tmp then
24686: LD_VAR 0 3
24690: NOT
24691: IFFALSE 24695
// exit ;
24693: GO 24751
// un := tmp [ rand ( 1 , tmp ) ] ;
24695: LD_ADDR_VAR 0 2
24699: PUSH
24700: LD_VAR 0 3
24704: PUSH
24705: LD_INT 1
24707: PPUSH
24708: LD_VAR 0 3
24712: PPUSH
24713: CALL_OW 12
24717: ARRAY
24718: ST_TO_ADDR
// if Crawls ( un ) then
24719: LD_VAR 0 2
24723: PPUSH
24724: CALL_OW 318
24728: IFFALSE 24739
// ComWalk ( un ) ;
24730: LD_VAR 0 2
24734: PPUSH
24735: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24739: LD_VAR 0 2
24743: PPUSH
24744: LD_INT 8
24746: PPUSH
24747: CALL_OW 336
// end ;
24751: PPOPN 3
24753: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24754: LD_EXP 65
24758: PUSH
24759: LD_EXP 109
24763: AND
24764: IFFALSE 24908
24766: GO 24768
24768: DISABLE
24769: LD_INT 0
24771: PPUSH
24772: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24773: LD_ADDR_VAR 0 2
24777: PUSH
24778: LD_INT 22
24780: PUSH
24781: LD_OWVAR 2
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 21
24792: PUSH
24793: LD_INT 2
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 2
24802: PUSH
24803: LD_INT 34
24805: PUSH
24806: LD_INT 12
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: LD_INT 34
24815: PUSH
24816: LD_INT 51
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 34
24825: PUSH
24826: LD_INT 32
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: LIST
24843: PPUSH
24844: CALL_OW 69
24848: ST_TO_ADDR
// if not tmp then
24849: LD_VAR 0 2
24853: NOT
24854: IFFALSE 24858
// exit ;
24856: GO 24908
// for i in tmp do
24858: LD_ADDR_VAR 0 1
24862: PUSH
24863: LD_VAR 0 2
24867: PUSH
24868: FOR_IN
24869: IFFALSE 24906
// if GetCargo ( i , mat_artifact ) = 0 then
24871: LD_VAR 0 1
24875: PPUSH
24876: LD_INT 4
24878: PPUSH
24879: CALL_OW 289
24883: PUSH
24884: LD_INT 0
24886: EQUAL
24887: IFFALSE 24904
// SetCargo ( i , mat_siberit , 100 ) ;
24889: LD_VAR 0 1
24893: PPUSH
24894: LD_INT 3
24896: PPUSH
24897: LD_INT 100
24899: PPUSH
24900: CALL_OW 290
24904: GO 24868
24906: POP
24907: POP
// end ;
24908: PPOPN 2
24910: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24911: LD_EXP 65
24915: PUSH
24916: LD_EXP 110
24920: AND
24921: IFFALSE 25104
24923: GO 24925
24925: DISABLE
24926: LD_INT 0
24928: PPUSH
24929: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24930: LD_ADDR_VAR 0 2
24934: PUSH
24935: LD_INT 22
24937: PUSH
24938: LD_OWVAR 2
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PPUSH
24947: CALL_OW 69
24951: ST_TO_ADDR
// if not tmp then
24952: LD_VAR 0 2
24956: NOT
24957: IFFALSE 24961
// exit ;
24959: GO 25104
// for i := 1 to 2 do
24961: LD_ADDR_VAR 0 1
24965: PUSH
24966: DOUBLE
24967: LD_INT 1
24969: DEC
24970: ST_TO_ADDR
24971: LD_INT 2
24973: PUSH
24974: FOR_TO
24975: IFFALSE 25102
// begin uc_side := your_side ;
24977: LD_ADDR_OWVAR 20
24981: PUSH
24982: LD_OWVAR 2
24986: ST_TO_ADDR
// uc_nation := nation_american ;
24987: LD_ADDR_OWVAR 21
24991: PUSH
24992: LD_INT 1
24994: ST_TO_ADDR
// vc_chassis := us_morphling ;
24995: LD_ADDR_OWVAR 37
24999: PUSH
25000: LD_INT 5
25002: ST_TO_ADDR
// vc_engine := engine_siberite ;
25003: LD_ADDR_OWVAR 39
25007: PUSH
25008: LD_INT 3
25010: ST_TO_ADDR
// vc_control := control_computer ;
25011: LD_ADDR_OWVAR 38
25015: PUSH
25016: LD_INT 3
25018: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25019: LD_ADDR_OWVAR 40
25023: PUSH
25024: LD_INT 10
25026: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25027: LD_VAR 0 2
25031: PUSH
25032: LD_INT 1
25034: ARRAY
25035: PPUSH
25036: CALL_OW 310
25040: NOT
25041: IFFALSE 25088
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25043: CALL_OW 45
25047: PPUSH
25048: LD_VAR 0 2
25052: PUSH
25053: LD_INT 1
25055: ARRAY
25056: PPUSH
25057: CALL_OW 250
25061: PPUSH
25062: LD_VAR 0 2
25066: PUSH
25067: LD_INT 1
25069: ARRAY
25070: PPUSH
25071: CALL_OW 251
25075: PPUSH
25076: LD_INT 12
25078: PPUSH
25079: LD_INT 1
25081: PPUSH
25082: CALL_OW 50
25086: GO 25100
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25088: CALL_OW 45
25092: PPUSH
25093: LD_INT 1
25095: PPUSH
25096: CALL_OW 51
// end ;
25100: GO 24974
25102: POP
25103: POP
// end ;
25104: PPOPN 2
25106: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25107: LD_EXP 65
25111: PUSH
25112: LD_EXP 111
25116: AND
25117: IFFALSE 25339
25119: GO 25121
25121: DISABLE
25122: LD_INT 0
25124: PPUSH
25125: PPUSH
25126: PPUSH
25127: PPUSH
25128: PPUSH
25129: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25130: LD_ADDR_VAR 0 6
25134: PUSH
25135: LD_INT 22
25137: PUSH
25138: LD_OWVAR 2
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 21
25149: PUSH
25150: LD_INT 1
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 3
25159: PUSH
25160: LD_INT 23
25162: PUSH
25163: LD_INT 0
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: LIST
25178: PPUSH
25179: CALL_OW 69
25183: ST_TO_ADDR
// if not tmp then
25184: LD_VAR 0 6
25188: NOT
25189: IFFALSE 25193
// exit ;
25191: GO 25339
// s1 := rand ( 1 , 4 ) ;
25193: LD_ADDR_VAR 0 2
25197: PUSH
25198: LD_INT 1
25200: PPUSH
25201: LD_INT 4
25203: PPUSH
25204: CALL_OW 12
25208: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25209: LD_ADDR_VAR 0 4
25213: PUSH
25214: LD_VAR 0 6
25218: PUSH
25219: LD_INT 1
25221: ARRAY
25222: PPUSH
25223: LD_VAR 0 2
25227: PPUSH
25228: CALL_OW 259
25232: ST_TO_ADDR
// if s1 = 1 then
25233: LD_VAR 0 2
25237: PUSH
25238: LD_INT 1
25240: EQUAL
25241: IFFALSE 25261
// s2 := rand ( 2 , 4 ) else
25243: LD_ADDR_VAR 0 3
25247: PUSH
25248: LD_INT 2
25250: PPUSH
25251: LD_INT 4
25253: PPUSH
25254: CALL_OW 12
25258: ST_TO_ADDR
25259: GO 25269
// s2 := 1 ;
25261: LD_ADDR_VAR 0 3
25265: PUSH
25266: LD_INT 1
25268: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25269: LD_ADDR_VAR 0 5
25273: PUSH
25274: LD_VAR 0 6
25278: PUSH
25279: LD_INT 1
25281: ARRAY
25282: PPUSH
25283: LD_VAR 0 3
25287: PPUSH
25288: CALL_OW 259
25292: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25293: LD_VAR 0 6
25297: PUSH
25298: LD_INT 1
25300: ARRAY
25301: PPUSH
25302: LD_VAR 0 2
25306: PPUSH
25307: LD_VAR 0 5
25311: PPUSH
25312: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25316: LD_VAR 0 6
25320: PUSH
25321: LD_INT 1
25323: ARRAY
25324: PPUSH
25325: LD_VAR 0 3
25329: PPUSH
25330: LD_VAR 0 4
25334: PPUSH
25335: CALL_OW 237
// end ;
25339: PPOPN 6
25341: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25342: LD_EXP 65
25346: PUSH
25347: LD_EXP 112
25351: AND
25352: IFFALSE 25431
25354: GO 25356
25356: DISABLE
25357: LD_INT 0
25359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25360: LD_ADDR_VAR 0 1
25364: PUSH
25365: LD_INT 22
25367: PUSH
25368: LD_OWVAR 2
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 30
25379: PUSH
25380: LD_INT 3
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PPUSH
25391: CALL_OW 69
25395: ST_TO_ADDR
// if not tmp then
25396: LD_VAR 0 1
25400: NOT
25401: IFFALSE 25405
// exit ;
25403: GO 25431
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25405: LD_VAR 0 1
25409: PUSH
25410: LD_INT 1
25412: PPUSH
25413: LD_VAR 0 1
25417: PPUSH
25418: CALL_OW 12
25422: ARRAY
25423: PPUSH
25424: LD_INT 1
25426: PPUSH
25427: CALL_OW 234
// end ;
25431: PPOPN 1
25433: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25434: LD_EXP 65
25438: PUSH
25439: LD_EXP 113
25443: AND
25444: IFFALSE 25556
25446: GO 25448
25448: DISABLE
25449: LD_INT 0
25451: PPUSH
25452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25453: LD_ADDR_VAR 0 2
25457: PUSH
25458: LD_INT 22
25460: PUSH
25461: LD_OWVAR 2
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 2
25472: PUSH
25473: LD_INT 30
25475: PUSH
25476: LD_INT 27
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: LD_INT 30
25485: PUSH
25486: LD_INT 26
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 30
25495: PUSH
25496: LD_INT 28
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PPUSH
25513: CALL_OW 69
25517: ST_TO_ADDR
// if not tmp then
25518: LD_VAR 0 2
25522: NOT
25523: IFFALSE 25527
// exit ;
25525: GO 25556
// for i in tmp do
25527: LD_ADDR_VAR 0 1
25531: PUSH
25532: LD_VAR 0 2
25536: PUSH
25537: FOR_IN
25538: IFFALSE 25554
// SetLives ( i , 1 ) ;
25540: LD_VAR 0 1
25544: PPUSH
25545: LD_INT 1
25547: PPUSH
25548: CALL_OW 234
25552: GO 25537
25554: POP
25555: POP
// end ;
25556: PPOPN 2
25558: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25559: LD_EXP 65
25563: PUSH
25564: LD_EXP 114
25568: AND
25569: IFFALSE 25843
25571: GO 25573
25573: DISABLE
25574: LD_INT 0
25576: PPUSH
25577: PPUSH
25578: PPUSH
// begin i := rand ( 1 , 7 ) ;
25579: LD_ADDR_VAR 0 1
25583: PUSH
25584: LD_INT 1
25586: PPUSH
25587: LD_INT 7
25589: PPUSH
25590: CALL_OW 12
25594: ST_TO_ADDR
// case i of 1 :
25595: LD_VAR 0 1
25599: PUSH
25600: LD_INT 1
25602: DOUBLE
25603: EQUAL
25604: IFTRUE 25608
25606: GO 25618
25608: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25609: LD_STRING earthquake(getX(game), 0, 32)
25611: PPUSH
25612: CALL_OW 559
25616: GO 25843
25618: LD_INT 2
25620: DOUBLE
25621: EQUAL
25622: IFTRUE 25626
25624: GO 25640
25626: POP
// begin ToLua ( displayStucuk(); ) ;
25627: LD_STRING displayStucuk();
25629: PPUSH
25630: CALL_OW 559
// ResetFog ;
25634: CALL_OW 335
// end ; 3 :
25638: GO 25843
25640: LD_INT 3
25642: DOUBLE
25643: EQUAL
25644: IFTRUE 25648
25646: GO 25752
25648: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25649: LD_ADDR_VAR 0 2
25653: PUSH
25654: LD_INT 22
25656: PUSH
25657: LD_OWVAR 2
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 25
25668: PUSH
25669: LD_INT 1
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PPUSH
25680: CALL_OW 69
25684: ST_TO_ADDR
// if not tmp then
25685: LD_VAR 0 2
25689: NOT
25690: IFFALSE 25694
// exit ;
25692: GO 25843
// un := tmp [ rand ( 1 , tmp ) ] ;
25694: LD_ADDR_VAR 0 3
25698: PUSH
25699: LD_VAR 0 2
25703: PUSH
25704: LD_INT 1
25706: PPUSH
25707: LD_VAR 0 2
25711: PPUSH
25712: CALL_OW 12
25716: ARRAY
25717: ST_TO_ADDR
// if Crawls ( un ) then
25718: LD_VAR 0 3
25722: PPUSH
25723: CALL_OW 318
25727: IFFALSE 25738
// ComWalk ( un ) ;
25729: LD_VAR 0 3
25733: PPUSH
25734: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25738: LD_VAR 0 3
25742: PPUSH
25743: LD_INT 8
25745: PPUSH
25746: CALL_OW 336
// end ; 4 :
25750: GO 25843
25752: LD_INT 4
25754: DOUBLE
25755: EQUAL
25756: IFTRUE 25760
25758: GO 25821
25760: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25761: LD_ADDR_VAR 0 2
25765: PUSH
25766: LD_INT 22
25768: PUSH
25769: LD_OWVAR 2
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 30
25780: PUSH
25781: LD_INT 29
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PPUSH
25792: CALL_OW 69
25796: ST_TO_ADDR
// if not tmp then
25797: LD_VAR 0 2
25801: NOT
25802: IFFALSE 25806
// exit ;
25804: GO 25843
// DestroyUnit ( tmp [ 1 ] ) ;
25806: LD_VAR 0 2
25810: PUSH
25811: LD_INT 1
25813: ARRAY
25814: PPUSH
25815: CALL_OW 65
// end ; 5 .. 7 :
25819: GO 25843
25821: LD_INT 5
25823: DOUBLE
25824: GREATEREQUAL
25825: IFFALSE 25833
25827: LD_INT 7
25829: DOUBLE
25830: LESSEQUAL
25831: IFTRUE 25835
25833: GO 25842
25835: POP
// StreamSibBomb ; end ;
25836: CALL 22093 0 0
25840: GO 25843
25842: POP
// end ;
25843: PPOPN 3
25845: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25846: LD_EXP 65
25850: PUSH
25851: LD_EXP 115
25855: AND
25856: IFFALSE 26012
25858: GO 25860
25860: DISABLE
25861: LD_INT 0
25863: PPUSH
25864: PPUSH
25865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25866: LD_ADDR_VAR 0 2
25870: PUSH
25871: LD_INT 81
25873: PUSH
25874: LD_OWVAR 2
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: LD_INT 2
25885: PUSH
25886: LD_INT 21
25888: PUSH
25889: LD_INT 1
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 21
25898: PUSH
25899: LD_INT 2
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: LIST
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PPUSH
25915: CALL_OW 69
25919: ST_TO_ADDR
// if not tmp then
25920: LD_VAR 0 2
25924: NOT
25925: IFFALSE 25929
// exit ;
25927: GO 26012
// p := 0 ;
25929: LD_ADDR_VAR 0 3
25933: PUSH
25934: LD_INT 0
25936: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25937: LD_INT 35
25939: PPUSH
25940: CALL_OW 67
// p := p + 1 ;
25944: LD_ADDR_VAR 0 3
25948: PUSH
25949: LD_VAR 0 3
25953: PUSH
25954: LD_INT 1
25956: PLUS
25957: ST_TO_ADDR
// for i in tmp do
25958: LD_ADDR_VAR 0 1
25962: PUSH
25963: LD_VAR 0 2
25967: PUSH
25968: FOR_IN
25969: IFFALSE 26000
// if GetLives ( i ) < 1000 then
25971: LD_VAR 0 1
25975: PPUSH
25976: CALL_OW 256
25980: PUSH
25981: LD_INT 1000
25983: LESS
25984: IFFALSE 25998
// SetLives ( i , 1000 ) ;
25986: LD_VAR 0 1
25990: PPUSH
25991: LD_INT 1000
25993: PPUSH
25994: CALL_OW 234
25998: GO 25968
26000: POP
26001: POP
// until p > 20 ;
26002: LD_VAR 0 3
26006: PUSH
26007: LD_INT 20
26009: GREATER
26010: IFFALSE 25937
// end ;
26012: PPOPN 3
26014: END
// every 0 0$1 trigger StreamModeActive and sTime do
26015: LD_EXP 65
26019: PUSH
26020: LD_EXP 116
26024: AND
26025: IFFALSE 26060
26027: GO 26029
26029: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26030: LD_INT 28
26032: PPUSH
26033: LD_OWVAR 2
26037: PPUSH
26038: LD_INT 2
26040: PPUSH
26041: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26045: LD_INT 30
26047: PPUSH
26048: LD_OWVAR 2
26052: PPUSH
26053: LD_INT 2
26055: PPUSH
26056: CALL_OW 322
// end ;
26060: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26061: LD_EXP 65
26065: PUSH
26066: LD_EXP 117
26070: AND
26071: IFFALSE 26192
26073: GO 26075
26075: DISABLE
26076: LD_INT 0
26078: PPUSH
26079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26080: LD_ADDR_VAR 0 2
26084: PUSH
26085: LD_INT 22
26087: PUSH
26088: LD_OWVAR 2
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 21
26099: PUSH
26100: LD_INT 1
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PUSH
26107: LD_INT 3
26109: PUSH
26110: LD_INT 23
26112: PUSH
26113: LD_INT 0
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: LIST
26128: PPUSH
26129: CALL_OW 69
26133: ST_TO_ADDR
// if not tmp then
26134: LD_VAR 0 2
26138: NOT
26139: IFFALSE 26143
// exit ;
26141: GO 26192
// for i in tmp do
26143: LD_ADDR_VAR 0 1
26147: PUSH
26148: LD_VAR 0 2
26152: PUSH
26153: FOR_IN
26154: IFFALSE 26190
// begin if Crawls ( i ) then
26156: LD_VAR 0 1
26160: PPUSH
26161: CALL_OW 318
26165: IFFALSE 26176
// ComWalk ( i ) ;
26167: LD_VAR 0 1
26171: PPUSH
26172: CALL_OW 138
// SetClass ( i , 2 ) ;
26176: LD_VAR 0 1
26180: PPUSH
26181: LD_INT 2
26183: PPUSH
26184: CALL_OW 336
// end ;
26188: GO 26153
26190: POP
26191: POP
// end ;
26192: PPOPN 2
26194: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26195: LD_EXP 65
26199: PUSH
26200: LD_EXP 118
26204: AND
26205: IFFALSE 26486
26207: GO 26209
26209: DISABLE
26210: LD_INT 0
26212: PPUSH
26213: PPUSH
26214: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26215: LD_OWVAR 2
26219: PPUSH
26220: LD_INT 9
26222: PPUSH
26223: LD_INT 1
26225: PPUSH
26226: LD_INT 1
26228: PPUSH
26229: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26233: LD_INT 9
26235: PPUSH
26236: LD_OWVAR 2
26240: PPUSH
26241: CALL_OW 343
// uc_side := 9 ;
26245: LD_ADDR_OWVAR 20
26249: PUSH
26250: LD_INT 9
26252: ST_TO_ADDR
// uc_nation := 2 ;
26253: LD_ADDR_OWVAR 21
26257: PUSH
26258: LD_INT 2
26260: ST_TO_ADDR
// hc_name := Dark Warrior ;
26261: LD_ADDR_OWVAR 26
26265: PUSH
26266: LD_STRING Dark Warrior
26268: ST_TO_ADDR
// hc_gallery :=  ;
26269: LD_ADDR_OWVAR 33
26273: PUSH
26274: LD_STRING 
26276: ST_TO_ADDR
// hc_noskilllimit := true ;
26277: LD_ADDR_OWVAR 76
26281: PUSH
26282: LD_INT 1
26284: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26285: LD_ADDR_OWVAR 31
26289: PUSH
26290: LD_INT 30
26292: PUSH
26293: LD_INT 30
26295: PUSH
26296: LD_INT 30
26298: PUSH
26299: LD_INT 30
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: ST_TO_ADDR
// un := CreateHuman ;
26308: LD_ADDR_VAR 0 3
26312: PUSH
26313: CALL_OW 44
26317: ST_TO_ADDR
// hc_noskilllimit := false ;
26318: LD_ADDR_OWVAR 76
26322: PUSH
26323: LD_INT 0
26325: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26326: LD_VAR 0 3
26330: PPUSH
26331: LD_INT 1
26333: PPUSH
26334: CALL_OW 51
// p := 0 ;
26338: LD_ADDR_VAR 0 2
26342: PUSH
26343: LD_INT 0
26345: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26346: LD_INT 35
26348: PPUSH
26349: CALL_OW 67
// p := p + 1 ;
26353: LD_ADDR_VAR 0 2
26357: PUSH
26358: LD_VAR 0 2
26362: PUSH
26363: LD_INT 1
26365: PLUS
26366: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26367: LD_VAR 0 3
26371: PPUSH
26372: CALL_OW 256
26376: PUSH
26377: LD_INT 1000
26379: LESS
26380: IFFALSE 26394
// SetLives ( un , 1000 ) ;
26382: LD_VAR 0 3
26386: PPUSH
26387: LD_INT 1000
26389: PPUSH
26390: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26394: LD_VAR 0 3
26398: PPUSH
26399: LD_INT 81
26401: PUSH
26402: LD_OWVAR 2
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PUSH
26411: LD_INT 91
26413: PUSH
26414: LD_VAR 0 3
26418: PUSH
26419: LD_INT 30
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: LIST
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PPUSH
26431: CALL_OW 69
26435: PPUSH
26436: LD_VAR 0 3
26440: PPUSH
26441: CALL_OW 74
26445: PPUSH
26446: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
26450: LD_VAR 0 2
26454: PUSH
26455: LD_INT 60
26457: GREATER
26458: PUSH
26459: LD_VAR 0 3
26463: PPUSH
26464: CALL_OW 301
26468: OR
26469: IFFALSE 26346
// if un then
26471: LD_VAR 0 3
26475: IFFALSE 26486
// RemoveUnit ( un ) ;
26477: LD_VAR 0 3
26481: PPUSH
26482: CALL_OW 64
// end ; end_of_file end_of_file
26486: PPOPN 3
26488: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26489: LD_INT 0
26491: PPUSH
26492: PPUSH
// if exist_mode then
26493: LD_VAR 0 2
26497: IFFALSE 26522
// unit := CreateCharacter ( prefix & ident ) else
26499: LD_ADDR_VAR 0 5
26503: PUSH
26504: LD_VAR 0 3
26508: PUSH
26509: LD_VAR 0 1
26513: STR
26514: PPUSH
26515: CALL_OW 34
26519: ST_TO_ADDR
26520: GO 26537
// unit := NewCharacter ( ident ) ;
26522: LD_ADDR_VAR 0 5
26526: PUSH
26527: LD_VAR 0 1
26531: PPUSH
26532: CALL_OW 25
26536: ST_TO_ADDR
// result := unit ;
26537: LD_ADDR_VAR 0 4
26541: PUSH
26542: LD_VAR 0 5
26546: ST_TO_ADDR
// end ;
26547: LD_VAR 0 4
26551: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26552: LD_INT 0
26554: PPUSH
26555: PPUSH
// if not side or not nation then
26556: LD_VAR 0 1
26560: NOT
26561: PUSH
26562: LD_VAR 0 2
26566: NOT
26567: OR
26568: IFFALSE 26572
// exit ;
26570: GO 27336
// case nation of nation_american :
26572: LD_VAR 0 2
26576: PUSH
26577: LD_INT 1
26579: DOUBLE
26580: EQUAL
26581: IFTRUE 26585
26583: GO 26799
26585: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26586: LD_ADDR_VAR 0 4
26590: PUSH
26591: LD_INT 35
26593: PUSH
26594: LD_INT 45
26596: PUSH
26597: LD_INT 46
26599: PUSH
26600: LD_INT 47
26602: PUSH
26603: LD_INT 82
26605: PUSH
26606: LD_INT 83
26608: PUSH
26609: LD_INT 84
26611: PUSH
26612: LD_INT 85
26614: PUSH
26615: LD_INT 86
26617: PUSH
26618: LD_INT 1
26620: PUSH
26621: LD_INT 2
26623: PUSH
26624: LD_INT 6
26626: PUSH
26627: LD_INT 15
26629: PUSH
26630: LD_INT 16
26632: PUSH
26633: LD_INT 7
26635: PUSH
26636: LD_INT 12
26638: PUSH
26639: LD_INT 13
26641: PUSH
26642: LD_INT 10
26644: PUSH
26645: LD_INT 14
26647: PUSH
26648: LD_INT 20
26650: PUSH
26651: LD_INT 21
26653: PUSH
26654: LD_INT 22
26656: PUSH
26657: LD_INT 25
26659: PUSH
26660: LD_INT 32
26662: PUSH
26663: LD_INT 27
26665: PUSH
26666: LD_INT 36
26668: PUSH
26669: LD_INT 69
26671: PUSH
26672: LD_INT 39
26674: PUSH
26675: LD_INT 34
26677: PUSH
26678: LD_INT 40
26680: PUSH
26681: LD_INT 48
26683: PUSH
26684: LD_INT 49
26686: PUSH
26687: LD_INT 50
26689: PUSH
26690: LD_INT 51
26692: PUSH
26693: LD_INT 52
26695: PUSH
26696: LD_INT 53
26698: PUSH
26699: LD_INT 54
26701: PUSH
26702: LD_INT 55
26704: PUSH
26705: LD_INT 56
26707: PUSH
26708: LD_INT 57
26710: PUSH
26711: LD_INT 58
26713: PUSH
26714: LD_INT 59
26716: PUSH
26717: LD_INT 60
26719: PUSH
26720: LD_INT 61
26722: PUSH
26723: LD_INT 62
26725: PUSH
26726: LD_INT 80
26728: PUSH
26729: LD_INT 82
26731: PUSH
26732: LD_INT 83
26734: PUSH
26735: LD_INT 84
26737: PUSH
26738: LD_INT 85
26740: PUSH
26741: LD_INT 86
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: ST_TO_ADDR
26797: GO 27260
26799: LD_INT 2
26801: DOUBLE
26802: EQUAL
26803: IFTRUE 26807
26805: GO 27029
26807: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
26808: LD_ADDR_VAR 0 4
26812: PUSH
26813: LD_INT 35
26815: PUSH
26816: LD_INT 45
26818: PUSH
26819: LD_INT 46
26821: PUSH
26822: LD_INT 47
26824: PUSH
26825: LD_INT 82
26827: PUSH
26828: LD_INT 83
26830: PUSH
26831: LD_INT 84
26833: PUSH
26834: LD_INT 85
26836: PUSH
26837: LD_INT 87
26839: PUSH
26840: LD_INT 70
26842: PUSH
26843: LD_INT 1
26845: PUSH
26846: LD_INT 11
26848: PUSH
26849: LD_INT 3
26851: PUSH
26852: LD_INT 4
26854: PUSH
26855: LD_INT 5
26857: PUSH
26858: LD_INT 6
26860: PUSH
26861: LD_INT 15
26863: PUSH
26864: LD_INT 18
26866: PUSH
26867: LD_INT 7
26869: PUSH
26870: LD_INT 17
26872: PUSH
26873: LD_INT 8
26875: PUSH
26876: LD_INT 20
26878: PUSH
26879: LD_INT 21
26881: PUSH
26882: LD_INT 22
26884: PUSH
26885: LD_INT 72
26887: PUSH
26888: LD_INT 26
26890: PUSH
26891: LD_INT 69
26893: PUSH
26894: LD_INT 39
26896: PUSH
26897: LD_INT 40
26899: PUSH
26900: LD_INT 41
26902: PUSH
26903: LD_INT 42
26905: PUSH
26906: LD_INT 43
26908: PUSH
26909: LD_INT 48
26911: PUSH
26912: LD_INT 49
26914: PUSH
26915: LD_INT 50
26917: PUSH
26918: LD_INT 51
26920: PUSH
26921: LD_INT 52
26923: PUSH
26924: LD_INT 53
26926: PUSH
26927: LD_INT 54
26929: PUSH
26930: LD_INT 55
26932: PUSH
26933: LD_INT 56
26935: PUSH
26936: LD_INT 60
26938: PUSH
26939: LD_INT 61
26941: PUSH
26942: LD_INT 62
26944: PUSH
26945: LD_INT 66
26947: PUSH
26948: LD_INT 67
26950: PUSH
26951: LD_INT 68
26953: PUSH
26954: LD_INT 81
26956: PUSH
26957: LD_INT 82
26959: PUSH
26960: LD_INT 83
26962: PUSH
26963: LD_INT 84
26965: PUSH
26966: LD_INT 85
26968: PUSH
26969: LD_INT 87
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: ST_TO_ADDR
27027: GO 27260
27029: LD_INT 3
27031: DOUBLE
27032: EQUAL
27033: IFTRUE 27037
27035: GO 27259
27037: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27038: LD_ADDR_VAR 0 4
27042: PUSH
27043: LD_INT 46
27045: PUSH
27046: LD_INT 47
27048: PUSH
27049: LD_INT 1
27051: PUSH
27052: LD_INT 2
27054: PUSH
27055: LD_INT 82
27057: PUSH
27058: LD_INT 83
27060: PUSH
27061: LD_INT 84
27063: PUSH
27064: LD_INT 85
27066: PUSH
27067: LD_INT 86
27069: PUSH
27070: LD_INT 11
27072: PUSH
27073: LD_INT 9
27075: PUSH
27076: LD_INT 20
27078: PUSH
27079: LD_INT 19
27081: PUSH
27082: LD_INT 21
27084: PUSH
27085: LD_INT 24
27087: PUSH
27088: LD_INT 22
27090: PUSH
27091: LD_INT 25
27093: PUSH
27094: LD_INT 28
27096: PUSH
27097: LD_INT 29
27099: PUSH
27100: LD_INT 30
27102: PUSH
27103: LD_INT 31
27105: PUSH
27106: LD_INT 37
27108: PUSH
27109: LD_INT 38
27111: PUSH
27112: LD_INT 32
27114: PUSH
27115: LD_INT 27
27117: PUSH
27118: LD_INT 33
27120: PUSH
27121: LD_INT 69
27123: PUSH
27124: LD_INT 39
27126: PUSH
27127: LD_INT 34
27129: PUSH
27130: LD_INT 40
27132: PUSH
27133: LD_INT 71
27135: PUSH
27136: LD_INT 23
27138: PUSH
27139: LD_INT 44
27141: PUSH
27142: LD_INT 48
27144: PUSH
27145: LD_INT 49
27147: PUSH
27148: LD_INT 50
27150: PUSH
27151: LD_INT 51
27153: PUSH
27154: LD_INT 52
27156: PUSH
27157: LD_INT 53
27159: PUSH
27160: LD_INT 54
27162: PUSH
27163: LD_INT 55
27165: PUSH
27166: LD_INT 56
27168: PUSH
27169: LD_INT 57
27171: PUSH
27172: LD_INT 58
27174: PUSH
27175: LD_INT 59
27177: PUSH
27178: LD_INT 63
27180: PUSH
27181: LD_INT 64
27183: PUSH
27184: LD_INT 65
27186: PUSH
27187: LD_INT 82
27189: PUSH
27190: LD_INT 83
27192: PUSH
27193: LD_INT 84
27195: PUSH
27196: LD_INT 85
27198: PUSH
27199: LD_INT 86
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: ST_TO_ADDR
27257: GO 27260
27259: POP
// if state > - 1 and state < 3 then
27260: LD_VAR 0 3
27264: PUSH
27265: LD_INT 1
27267: NEG
27268: GREATER
27269: PUSH
27270: LD_VAR 0 3
27274: PUSH
27275: LD_INT 3
27277: LESS
27278: AND
27279: IFFALSE 27336
// for i in result do
27281: LD_ADDR_VAR 0 5
27285: PUSH
27286: LD_VAR 0 4
27290: PUSH
27291: FOR_IN
27292: IFFALSE 27334
// if GetTech ( i , side ) <> state then
27294: LD_VAR 0 5
27298: PPUSH
27299: LD_VAR 0 1
27303: PPUSH
27304: CALL_OW 321
27308: PUSH
27309: LD_VAR 0 3
27313: NONEQUAL
27314: IFFALSE 27332
// result := result diff i ;
27316: LD_ADDR_VAR 0 4
27320: PUSH
27321: LD_VAR 0 4
27325: PUSH
27326: LD_VAR 0 5
27330: DIFF
27331: ST_TO_ADDR
27332: GO 27291
27334: POP
27335: POP
// end ;
27336: LD_VAR 0 4
27340: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27341: LD_INT 0
27343: PPUSH
27344: PPUSH
27345: PPUSH
// result := true ;
27346: LD_ADDR_VAR 0 3
27350: PUSH
27351: LD_INT 1
27353: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27354: LD_ADDR_VAR 0 5
27358: PUSH
27359: LD_VAR 0 2
27363: PPUSH
27364: CALL_OW 480
27368: ST_TO_ADDR
// if not tmp then
27369: LD_VAR 0 5
27373: NOT
27374: IFFALSE 27378
// exit ;
27376: GO 27427
// for i in tmp do
27378: LD_ADDR_VAR 0 4
27382: PUSH
27383: LD_VAR 0 5
27387: PUSH
27388: FOR_IN
27389: IFFALSE 27425
// if GetTech ( i , side ) <> state_researched then
27391: LD_VAR 0 4
27395: PPUSH
27396: LD_VAR 0 1
27400: PPUSH
27401: CALL_OW 321
27405: PUSH
27406: LD_INT 2
27408: NONEQUAL
27409: IFFALSE 27423
// begin result := false ;
27411: LD_ADDR_VAR 0 3
27415: PUSH
27416: LD_INT 0
27418: ST_TO_ADDR
// exit ;
27419: POP
27420: POP
27421: GO 27427
// end ;
27423: GO 27388
27425: POP
27426: POP
// end ;
27427: LD_VAR 0 3
27431: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27432: LD_INT 0
27434: PPUSH
27435: PPUSH
27436: PPUSH
27437: PPUSH
27438: PPUSH
27439: PPUSH
27440: PPUSH
27441: PPUSH
27442: PPUSH
27443: PPUSH
27444: PPUSH
27445: PPUSH
27446: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27447: LD_VAR 0 1
27451: NOT
27452: PUSH
27453: LD_VAR 0 1
27457: PPUSH
27458: CALL_OW 257
27462: PUSH
27463: LD_INT 9
27465: NONEQUAL
27466: OR
27467: IFFALSE 27471
// exit ;
27469: GO 28044
// side := GetSide ( unit ) ;
27471: LD_ADDR_VAR 0 9
27475: PUSH
27476: LD_VAR 0 1
27480: PPUSH
27481: CALL_OW 255
27485: ST_TO_ADDR
// tech_space := tech_spacanom ;
27486: LD_ADDR_VAR 0 12
27490: PUSH
27491: LD_INT 29
27493: ST_TO_ADDR
// tech_time := tech_taurad ;
27494: LD_ADDR_VAR 0 13
27498: PUSH
27499: LD_INT 28
27501: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27502: LD_ADDR_VAR 0 11
27506: PUSH
27507: LD_VAR 0 1
27511: PPUSH
27512: CALL_OW 310
27516: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27517: LD_VAR 0 11
27521: PPUSH
27522: CALL_OW 247
27526: PUSH
27527: LD_INT 2
27529: EQUAL
27530: IFFALSE 27534
// exit ;
27532: GO 28044
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27534: LD_ADDR_VAR 0 8
27538: PUSH
27539: LD_INT 81
27541: PUSH
27542: LD_VAR 0 9
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 3
27553: PUSH
27554: LD_INT 21
27556: PUSH
27557: LD_INT 3
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PPUSH
27572: CALL_OW 69
27576: ST_TO_ADDR
// if not tmp then
27577: LD_VAR 0 8
27581: NOT
27582: IFFALSE 27586
// exit ;
27584: GO 28044
// if in_unit then
27586: LD_VAR 0 11
27590: IFFALSE 27614
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27592: LD_ADDR_VAR 0 10
27596: PUSH
27597: LD_VAR 0 8
27601: PPUSH
27602: LD_VAR 0 11
27606: PPUSH
27607: CALL_OW 74
27611: ST_TO_ADDR
27612: GO 27634
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27614: LD_ADDR_VAR 0 10
27618: PUSH
27619: LD_VAR 0 8
27623: PPUSH
27624: LD_VAR 0 1
27628: PPUSH
27629: CALL_OW 74
27633: ST_TO_ADDR
// if not enemy then
27634: LD_VAR 0 10
27638: NOT
27639: IFFALSE 27643
// exit ;
27641: GO 28044
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27643: LD_VAR 0 11
27647: PUSH
27648: LD_VAR 0 11
27652: PPUSH
27653: LD_VAR 0 10
27657: PPUSH
27658: CALL_OW 296
27662: PUSH
27663: LD_INT 13
27665: GREATER
27666: AND
27667: PUSH
27668: LD_VAR 0 1
27672: PPUSH
27673: LD_VAR 0 10
27677: PPUSH
27678: CALL_OW 296
27682: PUSH
27683: LD_INT 12
27685: GREATER
27686: OR
27687: IFFALSE 27691
// exit ;
27689: GO 28044
// missile := [ 1 ] ;
27691: LD_ADDR_VAR 0 14
27695: PUSH
27696: LD_INT 1
27698: PUSH
27699: EMPTY
27700: LIST
27701: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27702: LD_VAR 0 9
27706: PPUSH
27707: LD_VAR 0 12
27711: PPUSH
27712: CALL_OW 325
27716: IFFALSE 27745
// missile := Insert ( missile , missile + 1 , 2 ) ;
27718: LD_ADDR_VAR 0 14
27722: PUSH
27723: LD_VAR 0 14
27727: PPUSH
27728: LD_VAR 0 14
27732: PUSH
27733: LD_INT 1
27735: PLUS
27736: PPUSH
27737: LD_INT 2
27739: PPUSH
27740: CALL_OW 2
27744: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27745: LD_VAR 0 9
27749: PPUSH
27750: LD_VAR 0 13
27754: PPUSH
27755: CALL_OW 325
27759: PUSH
27760: LD_VAR 0 10
27764: PPUSH
27765: CALL_OW 255
27769: PPUSH
27770: LD_VAR 0 13
27774: PPUSH
27775: CALL_OW 325
27779: NOT
27780: AND
27781: IFFALSE 27810
// missile := Insert ( missile , missile + 1 , 3 ) ;
27783: LD_ADDR_VAR 0 14
27787: PUSH
27788: LD_VAR 0 14
27792: PPUSH
27793: LD_VAR 0 14
27797: PUSH
27798: LD_INT 1
27800: PLUS
27801: PPUSH
27802: LD_INT 3
27804: PPUSH
27805: CALL_OW 2
27809: ST_TO_ADDR
// if missile < 2 then
27810: LD_VAR 0 14
27814: PUSH
27815: LD_INT 2
27817: LESS
27818: IFFALSE 27822
// exit ;
27820: GO 28044
// x := GetX ( enemy ) ;
27822: LD_ADDR_VAR 0 4
27826: PUSH
27827: LD_VAR 0 10
27831: PPUSH
27832: CALL_OW 250
27836: ST_TO_ADDR
// y := GetY ( enemy ) ;
27837: LD_ADDR_VAR 0 5
27841: PUSH
27842: LD_VAR 0 10
27846: PPUSH
27847: CALL_OW 251
27851: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27852: LD_ADDR_VAR 0 6
27856: PUSH
27857: LD_VAR 0 4
27861: PUSH
27862: LD_INT 1
27864: NEG
27865: PPUSH
27866: LD_INT 1
27868: PPUSH
27869: CALL_OW 12
27873: PLUS
27874: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27875: LD_ADDR_VAR 0 7
27879: PUSH
27880: LD_VAR 0 5
27884: PUSH
27885: LD_INT 1
27887: NEG
27888: PPUSH
27889: LD_INT 1
27891: PPUSH
27892: CALL_OW 12
27896: PLUS
27897: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27898: LD_VAR 0 6
27902: PPUSH
27903: LD_VAR 0 7
27907: PPUSH
27908: CALL_OW 488
27912: NOT
27913: IFFALSE 27935
// begin _x := x ;
27915: LD_ADDR_VAR 0 6
27919: PUSH
27920: LD_VAR 0 4
27924: ST_TO_ADDR
// _y := y ;
27925: LD_ADDR_VAR 0 7
27929: PUSH
27930: LD_VAR 0 5
27934: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27935: LD_ADDR_VAR 0 3
27939: PUSH
27940: LD_INT 1
27942: PPUSH
27943: LD_VAR 0 14
27947: PPUSH
27948: CALL_OW 12
27952: ST_TO_ADDR
// case i of 1 :
27953: LD_VAR 0 3
27957: PUSH
27958: LD_INT 1
27960: DOUBLE
27961: EQUAL
27962: IFTRUE 27966
27964: GO 27983
27966: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27967: LD_VAR 0 1
27971: PPUSH
27972: LD_VAR 0 10
27976: PPUSH
27977: CALL_OW 115
27981: GO 28044
27983: LD_INT 2
27985: DOUBLE
27986: EQUAL
27987: IFTRUE 27991
27989: GO 28013
27991: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27992: LD_VAR 0 1
27996: PPUSH
27997: LD_VAR 0 6
28001: PPUSH
28002: LD_VAR 0 7
28006: PPUSH
28007: CALL_OW 153
28011: GO 28044
28013: LD_INT 3
28015: DOUBLE
28016: EQUAL
28017: IFTRUE 28021
28019: GO 28043
28021: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28022: LD_VAR 0 1
28026: PPUSH
28027: LD_VAR 0 6
28031: PPUSH
28032: LD_VAR 0 7
28036: PPUSH
28037: CALL_OW 154
28041: GO 28044
28043: POP
// end ;
28044: LD_VAR 0 2
28048: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28049: LD_INT 0
28051: PPUSH
28052: PPUSH
28053: PPUSH
28054: PPUSH
28055: PPUSH
28056: PPUSH
// if not unit or not building then
28057: LD_VAR 0 1
28061: NOT
28062: PUSH
28063: LD_VAR 0 2
28067: NOT
28068: OR
28069: IFFALSE 28073
// exit ;
28071: GO 28231
// x := GetX ( building ) ;
28073: LD_ADDR_VAR 0 5
28077: PUSH
28078: LD_VAR 0 2
28082: PPUSH
28083: CALL_OW 250
28087: ST_TO_ADDR
// y := GetY ( building ) ;
28088: LD_ADDR_VAR 0 6
28092: PUSH
28093: LD_VAR 0 2
28097: PPUSH
28098: CALL_OW 251
28102: ST_TO_ADDR
// for i = 0 to 5 do
28103: LD_ADDR_VAR 0 4
28107: PUSH
28108: DOUBLE
28109: LD_INT 0
28111: DEC
28112: ST_TO_ADDR
28113: LD_INT 5
28115: PUSH
28116: FOR_TO
28117: IFFALSE 28229
// begin _x := ShiftX ( x , i , 3 ) ;
28119: LD_ADDR_VAR 0 7
28123: PUSH
28124: LD_VAR 0 5
28128: PPUSH
28129: LD_VAR 0 4
28133: PPUSH
28134: LD_INT 3
28136: PPUSH
28137: CALL_OW 272
28141: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28142: LD_ADDR_VAR 0 8
28146: PUSH
28147: LD_VAR 0 6
28151: PPUSH
28152: LD_VAR 0 4
28156: PPUSH
28157: LD_INT 3
28159: PPUSH
28160: CALL_OW 273
28164: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28165: LD_VAR 0 7
28169: PPUSH
28170: LD_VAR 0 8
28174: PPUSH
28175: CALL_OW 488
28179: NOT
28180: IFFALSE 28184
// continue ;
28182: GO 28116
// if HexInfo ( _x , _y ) = 0 then
28184: LD_VAR 0 7
28188: PPUSH
28189: LD_VAR 0 8
28193: PPUSH
28194: CALL_OW 428
28198: PUSH
28199: LD_INT 0
28201: EQUAL
28202: IFFALSE 28227
// begin ComMoveXY ( unit , _x , _y ) ;
28204: LD_VAR 0 1
28208: PPUSH
28209: LD_VAR 0 7
28213: PPUSH
28214: LD_VAR 0 8
28218: PPUSH
28219: CALL_OW 111
// exit ;
28223: POP
28224: POP
28225: GO 28231
// end ; end ;
28227: GO 28116
28229: POP
28230: POP
// end ;
28231: LD_VAR 0 3
28235: RET
// export function ScanBase ( side , base_area ) ; begin
28236: LD_INT 0
28238: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28239: LD_ADDR_VAR 0 3
28243: PUSH
28244: LD_VAR 0 2
28248: PPUSH
28249: LD_INT 81
28251: PUSH
28252: LD_VAR 0 1
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PPUSH
28261: CALL_OW 70
28265: ST_TO_ADDR
// end ;
28266: LD_VAR 0 3
28270: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28271: LD_INT 0
28273: PPUSH
28274: PPUSH
28275: PPUSH
28276: PPUSH
// result := false ;
28277: LD_ADDR_VAR 0 2
28281: PUSH
28282: LD_INT 0
28284: ST_TO_ADDR
// side := GetSide ( unit ) ;
28285: LD_ADDR_VAR 0 3
28289: PUSH
28290: LD_VAR 0 1
28294: PPUSH
28295: CALL_OW 255
28299: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28300: LD_ADDR_VAR 0 4
28304: PUSH
28305: LD_VAR 0 1
28309: PPUSH
28310: CALL_OW 248
28314: ST_TO_ADDR
// case nat of 1 :
28315: LD_VAR 0 4
28319: PUSH
28320: LD_INT 1
28322: DOUBLE
28323: EQUAL
28324: IFTRUE 28328
28326: GO 28339
28328: POP
// tech := tech_lassight ; 2 :
28329: LD_ADDR_VAR 0 5
28333: PUSH
28334: LD_INT 12
28336: ST_TO_ADDR
28337: GO 28378
28339: LD_INT 2
28341: DOUBLE
28342: EQUAL
28343: IFTRUE 28347
28345: GO 28358
28347: POP
// tech := tech_mortar ; 3 :
28348: LD_ADDR_VAR 0 5
28352: PUSH
28353: LD_INT 41
28355: ST_TO_ADDR
28356: GO 28378
28358: LD_INT 3
28360: DOUBLE
28361: EQUAL
28362: IFTRUE 28366
28364: GO 28377
28366: POP
// tech := tech_bazooka ; end ;
28367: LD_ADDR_VAR 0 5
28371: PUSH
28372: LD_INT 44
28374: ST_TO_ADDR
28375: GO 28378
28377: POP
// if Researched ( side , tech ) then
28378: LD_VAR 0 3
28382: PPUSH
28383: LD_VAR 0 5
28387: PPUSH
28388: CALL_OW 325
28392: IFFALSE 28419
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28394: LD_ADDR_VAR 0 2
28398: PUSH
28399: LD_INT 5
28401: PUSH
28402: LD_INT 8
28404: PUSH
28405: LD_INT 9
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: LIST
28412: PUSH
28413: LD_VAR 0 4
28417: ARRAY
28418: ST_TO_ADDR
// end ;
28419: LD_VAR 0 2
28423: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28424: LD_INT 0
28426: PPUSH
28427: PPUSH
28428: PPUSH
// if not mines then
28429: LD_VAR 0 2
28433: NOT
28434: IFFALSE 28438
// exit ;
28436: GO 28582
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28438: LD_ADDR_VAR 0 5
28442: PUSH
28443: LD_INT 81
28445: PUSH
28446: LD_VAR 0 1
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 3
28457: PUSH
28458: LD_INT 21
28460: PUSH
28461: LD_INT 3
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PPUSH
28476: CALL_OW 69
28480: ST_TO_ADDR
// for i in mines do
28481: LD_ADDR_VAR 0 4
28485: PUSH
28486: LD_VAR 0 2
28490: PUSH
28491: FOR_IN
28492: IFFALSE 28580
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28494: LD_VAR 0 4
28498: PUSH
28499: LD_INT 1
28501: ARRAY
28502: PPUSH
28503: LD_VAR 0 4
28507: PUSH
28508: LD_INT 2
28510: ARRAY
28511: PPUSH
28512: CALL_OW 458
28516: NOT
28517: IFFALSE 28521
// continue ;
28519: GO 28491
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28521: LD_VAR 0 4
28525: PUSH
28526: LD_INT 1
28528: ARRAY
28529: PPUSH
28530: LD_VAR 0 4
28534: PUSH
28535: LD_INT 2
28537: ARRAY
28538: PPUSH
28539: CALL_OW 428
28543: PUSH
28544: LD_VAR 0 5
28548: IN
28549: IFFALSE 28578
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28551: LD_VAR 0 4
28555: PUSH
28556: LD_INT 1
28558: ARRAY
28559: PPUSH
28560: LD_VAR 0 4
28564: PUSH
28565: LD_INT 2
28567: ARRAY
28568: PPUSH
28569: LD_VAR 0 1
28573: PPUSH
28574: CALL_OW 456
// end ;
28578: GO 28491
28580: POP
28581: POP
// end ;
28582: LD_VAR 0 3
28586: RET
// export function Count ( array ) ; var i ; begin
28587: LD_INT 0
28589: PPUSH
28590: PPUSH
// result := 0 ;
28591: LD_ADDR_VAR 0 2
28595: PUSH
28596: LD_INT 0
28598: ST_TO_ADDR
// for i in array do
28599: LD_ADDR_VAR 0 3
28603: PUSH
28604: LD_VAR 0 1
28608: PUSH
28609: FOR_IN
28610: IFFALSE 28634
// if i then
28612: LD_VAR 0 3
28616: IFFALSE 28632
// result := result + 1 ;
28618: LD_ADDR_VAR 0 2
28622: PUSH
28623: LD_VAR 0 2
28627: PUSH
28628: LD_INT 1
28630: PLUS
28631: ST_TO_ADDR
28632: GO 28609
28634: POP
28635: POP
// end ;
28636: LD_VAR 0 2
28640: RET
// export function IsEmpty ( building ) ; begin
28641: LD_INT 0
28643: PPUSH
// if not building then
28644: LD_VAR 0 1
28648: NOT
28649: IFFALSE 28653
// exit ;
28651: GO 28696
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28653: LD_ADDR_VAR 0 2
28657: PUSH
28658: LD_VAR 0 1
28662: PUSH
28663: LD_INT 22
28665: PUSH
28666: LD_VAR 0 1
28670: PPUSH
28671: CALL_OW 255
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 58
28682: PUSH
28683: EMPTY
28684: LIST
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PPUSH
28690: CALL_OW 69
28694: IN
28695: ST_TO_ADDR
// end ;
28696: LD_VAR 0 2
28700: RET
// export function IsNotFull ( building ) ; begin
28701: LD_INT 0
28703: PPUSH
// if not building then
28704: LD_VAR 0 1
28708: NOT
28709: IFFALSE 28713
// exit ;
28711: GO 28732
// result := UnitsInside ( building ) < 6 ;
28713: LD_ADDR_VAR 0 2
28717: PUSH
28718: LD_VAR 0 1
28722: PPUSH
28723: CALL_OW 313
28727: PUSH
28728: LD_INT 6
28730: LESS
28731: ST_TO_ADDR
// end ;
28732: LD_VAR 0 2
28736: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28737: LD_INT 0
28739: PPUSH
28740: PPUSH
28741: PPUSH
28742: PPUSH
// tmp := [ ] ;
28743: LD_ADDR_VAR 0 3
28747: PUSH
28748: EMPTY
28749: ST_TO_ADDR
// list := [ ] ;
28750: LD_ADDR_VAR 0 5
28754: PUSH
28755: EMPTY
28756: ST_TO_ADDR
// for i = 16 to 25 do
28757: LD_ADDR_VAR 0 4
28761: PUSH
28762: DOUBLE
28763: LD_INT 16
28765: DEC
28766: ST_TO_ADDR
28767: LD_INT 25
28769: PUSH
28770: FOR_TO
28771: IFFALSE 28844
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28773: LD_ADDR_VAR 0 3
28777: PUSH
28778: LD_VAR 0 3
28782: PUSH
28783: LD_INT 22
28785: PUSH
28786: LD_VAR 0 1
28790: PPUSH
28791: CALL_OW 255
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: LD_INT 91
28802: PUSH
28803: LD_VAR 0 1
28807: PUSH
28808: LD_INT 6
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: LIST
28815: PUSH
28816: LD_INT 30
28818: PUSH
28819: LD_VAR 0 4
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: LIST
28832: PUSH
28833: EMPTY
28834: LIST
28835: PPUSH
28836: CALL_OW 69
28840: ADD
28841: ST_TO_ADDR
28842: GO 28770
28844: POP
28845: POP
// for i = 1 to tmp do
28846: LD_ADDR_VAR 0 4
28850: PUSH
28851: DOUBLE
28852: LD_INT 1
28854: DEC
28855: ST_TO_ADDR
28856: LD_VAR 0 3
28860: PUSH
28861: FOR_TO
28862: IFFALSE 28950
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28864: LD_ADDR_VAR 0 5
28868: PUSH
28869: LD_VAR 0 5
28873: PUSH
28874: LD_VAR 0 3
28878: PUSH
28879: LD_VAR 0 4
28883: ARRAY
28884: PPUSH
28885: CALL_OW 266
28889: PUSH
28890: LD_VAR 0 3
28894: PUSH
28895: LD_VAR 0 4
28899: ARRAY
28900: PPUSH
28901: CALL_OW 250
28905: PUSH
28906: LD_VAR 0 3
28910: PUSH
28911: LD_VAR 0 4
28915: ARRAY
28916: PPUSH
28917: CALL_OW 251
28921: PUSH
28922: LD_VAR 0 3
28926: PUSH
28927: LD_VAR 0 4
28931: ARRAY
28932: PPUSH
28933: CALL_OW 254
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: PUSH
28944: EMPTY
28945: LIST
28946: ADD
28947: ST_TO_ADDR
28948: GO 28861
28950: POP
28951: POP
// result := list ;
28952: LD_ADDR_VAR 0 2
28956: PUSH
28957: LD_VAR 0 5
28961: ST_TO_ADDR
// end ;
28962: LD_VAR 0 2
28966: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28967: LD_INT 0
28969: PPUSH
28970: PPUSH
28971: PPUSH
28972: PPUSH
28973: PPUSH
28974: PPUSH
28975: PPUSH
// if not factory then
28976: LD_VAR 0 1
28980: NOT
28981: IFFALSE 28985
// exit ;
28983: GO 29578
// if control = control_apeman then
28985: LD_VAR 0 4
28989: PUSH
28990: LD_INT 5
28992: EQUAL
28993: IFFALSE 29102
// begin tmp := UnitsInside ( factory ) ;
28995: LD_ADDR_VAR 0 8
28999: PUSH
29000: LD_VAR 0 1
29004: PPUSH
29005: CALL_OW 313
29009: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29010: LD_VAR 0 8
29014: PPUSH
29015: LD_INT 25
29017: PUSH
29018: LD_INT 12
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PPUSH
29025: CALL_OW 72
29029: NOT
29030: IFFALSE 29040
// control := control_manual ;
29032: LD_ADDR_VAR 0 4
29036: PUSH
29037: LD_INT 1
29039: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29040: LD_ADDR_VAR 0 8
29044: PUSH
29045: LD_VAR 0 1
29049: PPUSH
29050: CALL 28737 0 1
29054: ST_TO_ADDR
// if tmp then
29055: LD_VAR 0 8
29059: IFFALSE 29102
// begin for i in tmp do
29061: LD_ADDR_VAR 0 7
29065: PUSH
29066: LD_VAR 0 8
29070: PUSH
29071: FOR_IN
29072: IFFALSE 29100
// if i [ 1 ] = b_ext_radio then
29074: LD_VAR 0 7
29078: PUSH
29079: LD_INT 1
29081: ARRAY
29082: PUSH
29083: LD_INT 22
29085: EQUAL
29086: IFFALSE 29098
// begin control := control_remote ;
29088: LD_ADDR_VAR 0 4
29092: PUSH
29093: LD_INT 2
29095: ST_TO_ADDR
// break ;
29096: GO 29100
// end ;
29098: GO 29071
29100: POP
29101: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29102: LD_VAR 0 1
29106: PPUSH
29107: LD_VAR 0 2
29111: PPUSH
29112: LD_VAR 0 3
29116: PPUSH
29117: LD_VAR 0 4
29121: PPUSH
29122: LD_VAR 0 5
29126: PPUSH
29127: CALL_OW 448
29131: IFFALSE 29166
// begin result := [ chassis , engine , control , weapon ] ;
29133: LD_ADDR_VAR 0 6
29137: PUSH
29138: LD_VAR 0 2
29142: PUSH
29143: LD_VAR 0 3
29147: PUSH
29148: LD_VAR 0 4
29152: PUSH
29153: LD_VAR 0 5
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: ST_TO_ADDR
// exit ;
29164: GO 29578
// end ; _chassis := AvailableChassisList ( factory ) ;
29166: LD_ADDR_VAR 0 9
29170: PUSH
29171: LD_VAR 0 1
29175: PPUSH
29176: CALL_OW 475
29180: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29181: LD_ADDR_VAR 0 11
29185: PUSH
29186: LD_VAR 0 1
29190: PPUSH
29191: CALL_OW 476
29195: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29196: LD_ADDR_VAR 0 12
29200: PUSH
29201: LD_VAR 0 1
29205: PPUSH
29206: CALL_OW 477
29210: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29211: LD_ADDR_VAR 0 10
29215: PUSH
29216: LD_VAR 0 1
29220: PPUSH
29221: CALL_OW 478
29225: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29226: LD_VAR 0 9
29230: NOT
29231: PUSH
29232: LD_VAR 0 11
29236: NOT
29237: OR
29238: PUSH
29239: LD_VAR 0 12
29243: NOT
29244: OR
29245: PUSH
29246: LD_VAR 0 10
29250: NOT
29251: OR
29252: IFFALSE 29287
// begin result := [ chassis , engine , control , weapon ] ;
29254: LD_ADDR_VAR 0 6
29258: PUSH
29259: LD_VAR 0 2
29263: PUSH
29264: LD_VAR 0 3
29268: PUSH
29269: LD_VAR 0 4
29273: PUSH
29274: LD_VAR 0 5
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: ST_TO_ADDR
// exit ;
29285: GO 29578
// end ; if not chassis in _chassis then
29287: LD_VAR 0 2
29291: PUSH
29292: LD_VAR 0 9
29296: IN
29297: NOT
29298: IFFALSE 29324
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29300: LD_ADDR_VAR 0 2
29304: PUSH
29305: LD_VAR 0 9
29309: PUSH
29310: LD_INT 1
29312: PPUSH
29313: LD_VAR 0 9
29317: PPUSH
29318: CALL_OW 12
29322: ARRAY
29323: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29324: LD_VAR 0 2
29328: PPUSH
29329: LD_VAR 0 3
29333: PPUSH
29334: CALL 29583 0 2
29338: NOT
29339: IFFALSE 29398
// repeat engine := _engine [ 1 ] ;
29341: LD_ADDR_VAR 0 3
29345: PUSH
29346: LD_VAR 0 11
29350: PUSH
29351: LD_INT 1
29353: ARRAY
29354: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29355: LD_ADDR_VAR 0 11
29359: PUSH
29360: LD_VAR 0 11
29364: PPUSH
29365: LD_INT 1
29367: PPUSH
29368: CALL_OW 3
29372: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29373: LD_VAR 0 2
29377: PPUSH
29378: LD_VAR 0 3
29382: PPUSH
29383: CALL 29583 0 2
29387: PUSH
29388: LD_VAR 0 11
29392: PUSH
29393: EMPTY
29394: EQUAL
29395: OR
29396: IFFALSE 29341
// if not control in _control then
29398: LD_VAR 0 4
29402: PUSH
29403: LD_VAR 0 12
29407: IN
29408: NOT
29409: IFFALSE 29435
// control := _control [ rand ( 1 , _control ) ] ;
29411: LD_ADDR_VAR 0 4
29415: PUSH
29416: LD_VAR 0 12
29420: PUSH
29421: LD_INT 1
29423: PPUSH
29424: LD_VAR 0 12
29428: PPUSH
29429: CALL_OW 12
29433: ARRAY
29434: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29435: LD_VAR 0 2
29439: PPUSH
29440: LD_VAR 0 5
29444: PPUSH
29445: CALL 29803 0 2
29449: NOT
29450: IFFALSE 29509
// repeat weapon := _weapon [ 1 ] ;
29452: LD_ADDR_VAR 0 5
29456: PUSH
29457: LD_VAR 0 10
29461: PUSH
29462: LD_INT 1
29464: ARRAY
29465: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29466: LD_ADDR_VAR 0 10
29470: PUSH
29471: LD_VAR 0 10
29475: PPUSH
29476: LD_INT 1
29478: PPUSH
29479: CALL_OW 3
29483: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29484: LD_VAR 0 2
29488: PPUSH
29489: LD_VAR 0 5
29493: PPUSH
29494: CALL 29803 0 2
29498: PUSH
29499: LD_VAR 0 10
29503: PUSH
29504: EMPTY
29505: EQUAL
29506: OR
29507: IFFALSE 29452
// result := [ ] ;
29509: LD_ADDR_VAR 0 6
29513: PUSH
29514: EMPTY
29515: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29516: LD_VAR 0 1
29520: PPUSH
29521: LD_VAR 0 2
29525: PPUSH
29526: LD_VAR 0 3
29530: PPUSH
29531: LD_VAR 0 4
29535: PPUSH
29536: LD_VAR 0 5
29540: PPUSH
29541: CALL_OW 448
29545: IFFALSE 29578
// result := [ chassis , engine , control , weapon ] ;
29547: LD_ADDR_VAR 0 6
29551: PUSH
29552: LD_VAR 0 2
29556: PUSH
29557: LD_VAR 0 3
29561: PUSH
29562: LD_VAR 0 4
29566: PUSH
29567: LD_VAR 0 5
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: ST_TO_ADDR
// end ;
29578: LD_VAR 0 6
29582: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29583: LD_INT 0
29585: PPUSH
// if not chassis or not engine then
29586: LD_VAR 0 1
29590: NOT
29591: PUSH
29592: LD_VAR 0 2
29596: NOT
29597: OR
29598: IFFALSE 29602
// exit ;
29600: GO 29798
// case engine of engine_solar :
29602: LD_VAR 0 2
29606: PUSH
29607: LD_INT 2
29609: DOUBLE
29610: EQUAL
29611: IFTRUE 29615
29613: GO 29653
29615: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29616: LD_ADDR_VAR 0 3
29620: PUSH
29621: LD_INT 11
29623: PUSH
29624: LD_INT 12
29626: PUSH
29627: LD_INT 13
29629: PUSH
29630: LD_INT 14
29632: PUSH
29633: LD_INT 1
29635: PUSH
29636: LD_INT 2
29638: PUSH
29639: LD_INT 3
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: ST_TO_ADDR
29651: GO 29782
29653: LD_INT 1
29655: DOUBLE
29656: EQUAL
29657: IFTRUE 29661
29659: GO 29723
29661: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29662: LD_ADDR_VAR 0 3
29666: PUSH
29667: LD_INT 11
29669: PUSH
29670: LD_INT 12
29672: PUSH
29673: LD_INT 13
29675: PUSH
29676: LD_INT 14
29678: PUSH
29679: LD_INT 1
29681: PUSH
29682: LD_INT 2
29684: PUSH
29685: LD_INT 3
29687: PUSH
29688: LD_INT 4
29690: PUSH
29691: LD_INT 5
29693: PUSH
29694: LD_INT 21
29696: PUSH
29697: LD_INT 23
29699: PUSH
29700: LD_INT 22
29702: PUSH
29703: LD_INT 24
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: ST_TO_ADDR
29721: GO 29782
29723: LD_INT 3
29725: DOUBLE
29726: EQUAL
29727: IFTRUE 29731
29729: GO 29781
29731: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29732: LD_ADDR_VAR 0 3
29736: PUSH
29737: LD_INT 13
29739: PUSH
29740: LD_INT 14
29742: PUSH
29743: LD_INT 2
29745: PUSH
29746: LD_INT 3
29748: PUSH
29749: LD_INT 4
29751: PUSH
29752: LD_INT 5
29754: PUSH
29755: LD_INT 21
29757: PUSH
29758: LD_INT 22
29760: PUSH
29761: LD_INT 23
29763: PUSH
29764: LD_INT 24
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: ST_TO_ADDR
29779: GO 29782
29781: POP
// result := ( chassis in result ) ;
29782: LD_ADDR_VAR 0 3
29786: PUSH
29787: LD_VAR 0 1
29791: PUSH
29792: LD_VAR 0 3
29796: IN
29797: ST_TO_ADDR
// end ;
29798: LD_VAR 0 3
29802: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29803: LD_INT 0
29805: PPUSH
// if not chassis or not weapon then
29806: LD_VAR 0 1
29810: NOT
29811: PUSH
29812: LD_VAR 0 2
29816: NOT
29817: OR
29818: IFFALSE 29822
// exit ;
29820: GO 30848
// case weapon of us_machine_gun :
29822: LD_VAR 0 2
29826: PUSH
29827: LD_INT 2
29829: DOUBLE
29830: EQUAL
29831: IFTRUE 29835
29833: GO 29865
29835: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29836: LD_ADDR_VAR 0 3
29840: PUSH
29841: LD_INT 1
29843: PUSH
29844: LD_INT 2
29846: PUSH
29847: LD_INT 3
29849: PUSH
29850: LD_INT 4
29852: PUSH
29853: LD_INT 5
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: ST_TO_ADDR
29863: GO 30832
29865: LD_INT 3
29867: DOUBLE
29868: EQUAL
29869: IFTRUE 29873
29871: GO 29903
29873: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29874: LD_ADDR_VAR 0 3
29878: PUSH
29879: LD_INT 1
29881: PUSH
29882: LD_INT 2
29884: PUSH
29885: LD_INT 3
29887: PUSH
29888: LD_INT 4
29890: PUSH
29891: LD_INT 5
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: ST_TO_ADDR
29901: GO 30832
29903: LD_INT 11
29905: DOUBLE
29906: EQUAL
29907: IFTRUE 29911
29909: GO 29941
29911: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29912: LD_ADDR_VAR 0 3
29916: PUSH
29917: LD_INT 1
29919: PUSH
29920: LD_INT 2
29922: PUSH
29923: LD_INT 3
29925: PUSH
29926: LD_INT 4
29928: PUSH
29929: LD_INT 5
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: ST_TO_ADDR
29939: GO 30832
29941: LD_INT 4
29943: DOUBLE
29944: EQUAL
29945: IFTRUE 29949
29947: GO 29975
29949: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29950: LD_ADDR_VAR 0 3
29954: PUSH
29955: LD_INT 2
29957: PUSH
29958: LD_INT 3
29960: PUSH
29961: LD_INT 4
29963: PUSH
29964: LD_INT 5
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: ST_TO_ADDR
29973: GO 30832
29975: LD_INT 5
29977: DOUBLE
29978: EQUAL
29979: IFTRUE 29983
29981: GO 30009
29983: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29984: LD_ADDR_VAR 0 3
29988: PUSH
29989: LD_INT 2
29991: PUSH
29992: LD_INT 3
29994: PUSH
29995: LD_INT 4
29997: PUSH
29998: LD_INT 5
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: ST_TO_ADDR
30007: GO 30832
30009: LD_INT 9
30011: DOUBLE
30012: EQUAL
30013: IFTRUE 30017
30015: GO 30043
30017: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30018: LD_ADDR_VAR 0 3
30022: PUSH
30023: LD_INT 2
30025: PUSH
30026: LD_INT 3
30028: PUSH
30029: LD_INT 4
30031: PUSH
30032: LD_INT 5
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: ST_TO_ADDR
30041: GO 30832
30043: LD_INT 7
30045: DOUBLE
30046: EQUAL
30047: IFTRUE 30051
30049: GO 30077
30051: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30052: LD_ADDR_VAR 0 3
30056: PUSH
30057: LD_INT 2
30059: PUSH
30060: LD_INT 3
30062: PUSH
30063: LD_INT 4
30065: PUSH
30066: LD_INT 5
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: ST_TO_ADDR
30075: GO 30832
30077: LD_INT 12
30079: DOUBLE
30080: EQUAL
30081: IFTRUE 30085
30083: GO 30111
30085: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30086: LD_ADDR_VAR 0 3
30090: PUSH
30091: LD_INT 2
30093: PUSH
30094: LD_INT 3
30096: PUSH
30097: LD_INT 4
30099: PUSH
30100: LD_INT 5
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: ST_TO_ADDR
30109: GO 30832
30111: LD_INT 13
30113: DOUBLE
30114: EQUAL
30115: IFTRUE 30119
30117: GO 30145
30119: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30120: LD_ADDR_VAR 0 3
30124: PUSH
30125: LD_INT 2
30127: PUSH
30128: LD_INT 3
30130: PUSH
30131: LD_INT 4
30133: PUSH
30134: LD_INT 5
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: ST_TO_ADDR
30143: GO 30832
30145: LD_INT 14
30147: DOUBLE
30148: EQUAL
30149: IFTRUE 30153
30151: GO 30171
30153: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30154: LD_ADDR_VAR 0 3
30158: PUSH
30159: LD_INT 4
30161: PUSH
30162: LD_INT 5
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: ST_TO_ADDR
30169: GO 30832
30171: LD_INT 6
30173: DOUBLE
30174: EQUAL
30175: IFTRUE 30179
30177: GO 30197
30179: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30180: LD_ADDR_VAR 0 3
30184: PUSH
30185: LD_INT 4
30187: PUSH
30188: LD_INT 5
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: ST_TO_ADDR
30195: GO 30832
30197: LD_INT 10
30199: DOUBLE
30200: EQUAL
30201: IFTRUE 30205
30203: GO 30223
30205: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30206: LD_ADDR_VAR 0 3
30210: PUSH
30211: LD_INT 4
30213: PUSH
30214: LD_INT 5
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: ST_TO_ADDR
30221: GO 30832
30223: LD_INT 22
30225: DOUBLE
30226: EQUAL
30227: IFTRUE 30231
30229: GO 30257
30231: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30232: LD_ADDR_VAR 0 3
30236: PUSH
30237: LD_INT 11
30239: PUSH
30240: LD_INT 12
30242: PUSH
30243: LD_INT 13
30245: PUSH
30246: LD_INT 14
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: ST_TO_ADDR
30255: GO 30832
30257: LD_INT 23
30259: DOUBLE
30260: EQUAL
30261: IFTRUE 30265
30263: GO 30291
30265: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30266: LD_ADDR_VAR 0 3
30270: PUSH
30271: LD_INT 11
30273: PUSH
30274: LD_INT 12
30276: PUSH
30277: LD_INT 13
30279: PUSH
30280: LD_INT 14
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: ST_TO_ADDR
30289: GO 30832
30291: LD_INT 24
30293: DOUBLE
30294: EQUAL
30295: IFTRUE 30299
30297: GO 30325
30299: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30300: LD_ADDR_VAR 0 3
30304: PUSH
30305: LD_INT 11
30307: PUSH
30308: LD_INT 12
30310: PUSH
30311: LD_INT 13
30313: PUSH
30314: LD_INT 14
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: ST_TO_ADDR
30323: GO 30832
30325: LD_INT 30
30327: DOUBLE
30328: EQUAL
30329: IFTRUE 30333
30331: GO 30359
30333: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30334: LD_ADDR_VAR 0 3
30338: PUSH
30339: LD_INT 11
30341: PUSH
30342: LD_INT 12
30344: PUSH
30345: LD_INT 13
30347: PUSH
30348: LD_INT 14
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: ST_TO_ADDR
30357: GO 30832
30359: LD_INT 25
30361: DOUBLE
30362: EQUAL
30363: IFTRUE 30367
30365: GO 30385
30367: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30368: LD_ADDR_VAR 0 3
30372: PUSH
30373: LD_INT 13
30375: PUSH
30376: LD_INT 14
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: ST_TO_ADDR
30383: GO 30832
30385: LD_INT 27
30387: DOUBLE
30388: EQUAL
30389: IFTRUE 30393
30391: GO 30411
30393: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30394: LD_ADDR_VAR 0 3
30398: PUSH
30399: LD_INT 13
30401: PUSH
30402: LD_INT 14
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: ST_TO_ADDR
30409: GO 30832
30411: LD_INT 28
30413: DOUBLE
30414: EQUAL
30415: IFTRUE 30419
30417: GO 30437
30419: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30420: LD_ADDR_VAR 0 3
30424: PUSH
30425: LD_INT 13
30427: PUSH
30428: LD_INT 14
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: ST_TO_ADDR
30435: GO 30832
30437: LD_INT 29
30439: DOUBLE
30440: EQUAL
30441: IFTRUE 30445
30443: GO 30463
30445: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30446: LD_ADDR_VAR 0 3
30450: PUSH
30451: LD_INT 13
30453: PUSH
30454: LD_INT 14
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: ST_TO_ADDR
30461: GO 30832
30463: LD_INT 31
30465: DOUBLE
30466: EQUAL
30467: IFTRUE 30471
30469: GO 30489
30471: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30472: LD_ADDR_VAR 0 3
30476: PUSH
30477: LD_INT 13
30479: PUSH
30480: LD_INT 14
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: ST_TO_ADDR
30487: GO 30832
30489: LD_INT 26
30491: DOUBLE
30492: EQUAL
30493: IFTRUE 30497
30495: GO 30515
30497: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30498: LD_ADDR_VAR 0 3
30502: PUSH
30503: LD_INT 13
30505: PUSH
30506: LD_INT 14
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: ST_TO_ADDR
30513: GO 30832
30515: LD_INT 42
30517: DOUBLE
30518: EQUAL
30519: IFTRUE 30523
30521: GO 30549
30523: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30524: LD_ADDR_VAR 0 3
30528: PUSH
30529: LD_INT 21
30531: PUSH
30532: LD_INT 22
30534: PUSH
30535: LD_INT 23
30537: PUSH
30538: LD_INT 24
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: ST_TO_ADDR
30547: GO 30832
30549: LD_INT 43
30551: DOUBLE
30552: EQUAL
30553: IFTRUE 30557
30555: GO 30583
30557: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30558: LD_ADDR_VAR 0 3
30562: PUSH
30563: LD_INT 21
30565: PUSH
30566: LD_INT 22
30568: PUSH
30569: LD_INT 23
30571: PUSH
30572: LD_INT 24
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: ST_TO_ADDR
30581: GO 30832
30583: LD_INT 44
30585: DOUBLE
30586: EQUAL
30587: IFTRUE 30591
30589: GO 30617
30591: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30592: LD_ADDR_VAR 0 3
30596: PUSH
30597: LD_INT 21
30599: PUSH
30600: LD_INT 22
30602: PUSH
30603: LD_INT 23
30605: PUSH
30606: LD_INT 24
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: ST_TO_ADDR
30615: GO 30832
30617: LD_INT 45
30619: DOUBLE
30620: EQUAL
30621: IFTRUE 30625
30623: GO 30651
30625: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30626: LD_ADDR_VAR 0 3
30630: PUSH
30631: LD_INT 21
30633: PUSH
30634: LD_INT 22
30636: PUSH
30637: LD_INT 23
30639: PUSH
30640: LD_INT 24
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: ST_TO_ADDR
30649: GO 30832
30651: LD_INT 49
30653: DOUBLE
30654: EQUAL
30655: IFTRUE 30659
30657: GO 30685
30659: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30660: LD_ADDR_VAR 0 3
30664: PUSH
30665: LD_INT 21
30667: PUSH
30668: LD_INT 22
30670: PUSH
30671: LD_INT 23
30673: PUSH
30674: LD_INT 24
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: ST_TO_ADDR
30683: GO 30832
30685: LD_INT 51
30687: DOUBLE
30688: EQUAL
30689: IFTRUE 30693
30691: GO 30719
30693: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30694: LD_ADDR_VAR 0 3
30698: PUSH
30699: LD_INT 21
30701: PUSH
30702: LD_INT 22
30704: PUSH
30705: LD_INT 23
30707: PUSH
30708: LD_INT 24
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: ST_TO_ADDR
30717: GO 30832
30719: LD_INT 52
30721: DOUBLE
30722: EQUAL
30723: IFTRUE 30727
30725: GO 30753
30727: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30728: LD_ADDR_VAR 0 3
30732: PUSH
30733: LD_INT 21
30735: PUSH
30736: LD_INT 22
30738: PUSH
30739: LD_INT 23
30741: PUSH
30742: LD_INT 24
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: ST_TO_ADDR
30751: GO 30832
30753: LD_INT 53
30755: DOUBLE
30756: EQUAL
30757: IFTRUE 30761
30759: GO 30779
30761: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30762: LD_ADDR_VAR 0 3
30766: PUSH
30767: LD_INT 23
30769: PUSH
30770: LD_INT 24
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: ST_TO_ADDR
30777: GO 30832
30779: LD_INT 46
30781: DOUBLE
30782: EQUAL
30783: IFTRUE 30787
30785: GO 30805
30787: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30788: LD_ADDR_VAR 0 3
30792: PUSH
30793: LD_INT 23
30795: PUSH
30796: LD_INT 24
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: ST_TO_ADDR
30803: GO 30832
30805: LD_INT 47
30807: DOUBLE
30808: EQUAL
30809: IFTRUE 30813
30811: GO 30831
30813: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30814: LD_ADDR_VAR 0 3
30818: PUSH
30819: LD_INT 23
30821: PUSH
30822: LD_INT 24
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: ST_TO_ADDR
30829: GO 30832
30831: POP
// result := ( chassis in result ) ;
30832: LD_ADDR_VAR 0 3
30836: PUSH
30837: LD_VAR 0 1
30841: PUSH
30842: LD_VAR 0 3
30846: IN
30847: ST_TO_ADDR
// end ;
30848: LD_VAR 0 3
30852: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30853: LD_INT 0
30855: PPUSH
30856: PPUSH
30857: PPUSH
30858: PPUSH
30859: PPUSH
30860: PPUSH
30861: PPUSH
// result := array ;
30862: LD_ADDR_VAR 0 5
30866: PUSH
30867: LD_VAR 0 1
30871: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30872: LD_VAR 0 1
30876: NOT
30877: PUSH
30878: LD_VAR 0 2
30882: NOT
30883: OR
30884: PUSH
30885: LD_VAR 0 3
30889: NOT
30890: OR
30891: PUSH
30892: LD_VAR 0 2
30896: PUSH
30897: LD_VAR 0 1
30901: GREATER
30902: OR
30903: PUSH
30904: LD_VAR 0 3
30908: PUSH
30909: LD_VAR 0 1
30913: GREATER
30914: OR
30915: IFFALSE 30919
// exit ;
30917: GO 31215
// if direction then
30919: LD_VAR 0 4
30923: IFFALSE 30987
// begin d := 1 ;
30925: LD_ADDR_VAR 0 9
30929: PUSH
30930: LD_INT 1
30932: ST_TO_ADDR
// if i_from > i_to then
30933: LD_VAR 0 2
30937: PUSH
30938: LD_VAR 0 3
30942: GREATER
30943: IFFALSE 30969
// length := ( array - i_from ) + i_to else
30945: LD_ADDR_VAR 0 11
30949: PUSH
30950: LD_VAR 0 1
30954: PUSH
30955: LD_VAR 0 2
30959: MINUS
30960: PUSH
30961: LD_VAR 0 3
30965: PLUS
30966: ST_TO_ADDR
30967: GO 30985
// length := i_to - i_from ;
30969: LD_ADDR_VAR 0 11
30973: PUSH
30974: LD_VAR 0 3
30978: PUSH
30979: LD_VAR 0 2
30983: MINUS
30984: ST_TO_ADDR
// end else
30985: GO 31048
// begin d := - 1 ;
30987: LD_ADDR_VAR 0 9
30991: PUSH
30992: LD_INT 1
30994: NEG
30995: ST_TO_ADDR
// if i_from > i_to then
30996: LD_VAR 0 2
31000: PUSH
31001: LD_VAR 0 3
31005: GREATER
31006: IFFALSE 31026
// length := i_from - i_to else
31008: LD_ADDR_VAR 0 11
31012: PUSH
31013: LD_VAR 0 2
31017: PUSH
31018: LD_VAR 0 3
31022: MINUS
31023: ST_TO_ADDR
31024: GO 31048
// length := ( array - i_to ) + i_from ;
31026: LD_ADDR_VAR 0 11
31030: PUSH
31031: LD_VAR 0 1
31035: PUSH
31036: LD_VAR 0 3
31040: MINUS
31041: PUSH
31042: LD_VAR 0 2
31046: PLUS
31047: ST_TO_ADDR
// end ; if not length then
31048: LD_VAR 0 11
31052: NOT
31053: IFFALSE 31057
// exit ;
31055: GO 31215
// tmp := array ;
31057: LD_ADDR_VAR 0 10
31061: PUSH
31062: LD_VAR 0 1
31066: ST_TO_ADDR
// for i = 1 to length do
31067: LD_ADDR_VAR 0 6
31071: PUSH
31072: DOUBLE
31073: LD_INT 1
31075: DEC
31076: ST_TO_ADDR
31077: LD_VAR 0 11
31081: PUSH
31082: FOR_TO
31083: IFFALSE 31203
// begin for j = 1 to array do
31085: LD_ADDR_VAR 0 7
31089: PUSH
31090: DOUBLE
31091: LD_INT 1
31093: DEC
31094: ST_TO_ADDR
31095: LD_VAR 0 1
31099: PUSH
31100: FOR_TO
31101: IFFALSE 31189
// begin k := j + d ;
31103: LD_ADDR_VAR 0 8
31107: PUSH
31108: LD_VAR 0 7
31112: PUSH
31113: LD_VAR 0 9
31117: PLUS
31118: ST_TO_ADDR
// if k > array then
31119: LD_VAR 0 8
31123: PUSH
31124: LD_VAR 0 1
31128: GREATER
31129: IFFALSE 31139
// k := 1 ;
31131: LD_ADDR_VAR 0 8
31135: PUSH
31136: LD_INT 1
31138: ST_TO_ADDR
// if not k then
31139: LD_VAR 0 8
31143: NOT
31144: IFFALSE 31156
// k := array ;
31146: LD_ADDR_VAR 0 8
31150: PUSH
31151: LD_VAR 0 1
31155: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31156: LD_ADDR_VAR 0 10
31160: PUSH
31161: LD_VAR 0 10
31165: PPUSH
31166: LD_VAR 0 8
31170: PPUSH
31171: LD_VAR 0 1
31175: PUSH
31176: LD_VAR 0 7
31180: ARRAY
31181: PPUSH
31182: CALL_OW 1
31186: ST_TO_ADDR
// end ;
31187: GO 31100
31189: POP
31190: POP
// array := tmp ;
31191: LD_ADDR_VAR 0 1
31195: PUSH
31196: LD_VAR 0 10
31200: ST_TO_ADDR
// end ;
31201: GO 31082
31203: POP
31204: POP
// result := array ;
31205: LD_ADDR_VAR 0 5
31209: PUSH
31210: LD_VAR 0 1
31214: ST_TO_ADDR
// end ;
31215: LD_VAR 0 5
31219: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31220: LD_INT 0
31222: PPUSH
31223: PPUSH
// result := 0 ;
31224: LD_ADDR_VAR 0 3
31228: PUSH
31229: LD_INT 0
31231: ST_TO_ADDR
// if not array or not value in array then
31232: LD_VAR 0 1
31236: NOT
31237: PUSH
31238: LD_VAR 0 2
31242: PUSH
31243: LD_VAR 0 1
31247: IN
31248: NOT
31249: OR
31250: IFFALSE 31254
// exit ;
31252: GO 31308
// for i = 1 to array do
31254: LD_ADDR_VAR 0 4
31258: PUSH
31259: DOUBLE
31260: LD_INT 1
31262: DEC
31263: ST_TO_ADDR
31264: LD_VAR 0 1
31268: PUSH
31269: FOR_TO
31270: IFFALSE 31306
// if value = array [ i ] then
31272: LD_VAR 0 2
31276: PUSH
31277: LD_VAR 0 1
31281: PUSH
31282: LD_VAR 0 4
31286: ARRAY
31287: EQUAL
31288: IFFALSE 31304
// begin result := i ;
31290: LD_ADDR_VAR 0 3
31294: PUSH
31295: LD_VAR 0 4
31299: ST_TO_ADDR
// exit ;
31300: POP
31301: POP
31302: GO 31308
// end ;
31304: GO 31269
31306: POP
31307: POP
// end ;
31308: LD_VAR 0 3
31312: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31313: LD_INT 0
31315: PPUSH
// vc_chassis := chassis ;
31316: LD_ADDR_OWVAR 37
31320: PUSH
31321: LD_VAR 0 1
31325: ST_TO_ADDR
// vc_engine := engine ;
31326: LD_ADDR_OWVAR 39
31330: PUSH
31331: LD_VAR 0 2
31335: ST_TO_ADDR
// vc_control := control ;
31336: LD_ADDR_OWVAR 38
31340: PUSH
31341: LD_VAR 0 3
31345: ST_TO_ADDR
// vc_weapon := weapon ;
31346: LD_ADDR_OWVAR 40
31350: PUSH
31351: LD_VAR 0 4
31355: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31356: LD_ADDR_OWVAR 41
31360: PUSH
31361: LD_VAR 0 5
31365: ST_TO_ADDR
// end ;
31366: LD_VAR 0 6
31370: RET
// export function WantPlant ( unit ) ; var task ; begin
31371: LD_INT 0
31373: PPUSH
31374: PPUSH
// result := false ;
31375: LD_ADDR_VAR 0 2
31379: PUSH
31380: LD_INT 0
31382: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31383: LD_ADDR_VAR 0 3
31387: PUSH
31388: LD_VAR 0 1
31392: PPUSH
31393: CALL_OW 437
31397: ST_TO_ADDR
// if task then
31398: LD_VAR 0 3
31402: IFFALSE 31430
// if task [ 1 ] [ 1 ] = p then
31404: LD_VAR 0 3
31408: PUSH
31409: LD_INT 1
31411: ARRAY
31412: PUSH
31413: LD_INT 1
31415: ARRAY
31416: PUSH
31417: LD_STRING p
31419: EQUAL
31420: IFFALSE 31430
// result := true ;
31422: LD_ADDR_VAR 0 2
31426: PUSH
31427: LD_INT 1
31429: ST_TO_ADDR
// end ;
31430: LD_VAR 0 2
31434: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31435: LD_INT 0
31437: PPUSH
31438: PPUSH
31439: PPUSH
31440: PPUSH
// if pos < 1 then
31441: LD_VAR 0 2
31445: PUSH
31446: LD_INT 1
31448: LESS
31449: IFFALSE 31453
// exit ;
31451: GO 31756
// if pos = 1 then
31453: LD_VAR 0 2
31457: PUSH
31458: LD_INT 1
31460: EQUAL
31461: IFFALSE 31494
// result := Replace ( arr , pos [ 1 ] , value ) else
31463: LD_ADDR_VAR 0 4
31467: PUSH
31468: LD_VAR 0 1
31472: PPUSH
31473: LD_VAR 0 2
31477: PUSH
31478: LD_INT 1
31480: ARRAY
31481: PPUSH
31482: LD_VAR 0 3
31486: PPUSH
31487: CALL_OW 1
31491: ST_TO_ADDR
31492: GO 31756
// begin tmp := arr ;
31494: LD_ADDR_VAR 0 6
31498: PUSH
31499: LD_VAR 0 1
31503: ST_TO_ADDR
// s_arr := [ tmp ] ;
31504: LD_ADDR_VAR 0 7
31508: PUSH
31509: LD_VAR 0 6
31513: PUSH
31514: EMPTY
31515: LIST
31516: ST_TO_ADDR
// for i = 1 to pos - 1 do
31517: LD_ADDR_VAR 0 5
31521: PUSH
31522: DOUBLE
31523: LD_INT 1
31525: DEC
31526: ST_TO_ADDR
31527: LD_VAR 0 2
31531: PUSH
31532: LD_INT 1
31534: MINUS
31535: PUSH
31536: FOR_TO
31537: IFFALSE 31582
// begin tmp := tmp [ pos [ i ] ] ;
31539: LD_ADDR_VAR 0 6
31543: PUSH
31544: LD_VAR 0 6
31548: PUSH
31549: LD_VAR 0 2
31553: PUSH
31554: LD_VAR 0 5
31558: ARRAY
31559: ARRAY
31560: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31561: LD_ADDR_VAR 0 7
31565: PUSH
31566: LD_VAR 0 7
31570: PUSH
31571: LD_VAR 0 6
31575: PUSH
31576: EMPTY
31577: LIST
31578: ADD
31579: ST_TO_ADDR
// end ;
31580: GO 31536
31582: POP
31583: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31584: LD_ADDR_VAR 0 6
31588: PUSH
31589: LD_VAR 0 6
31593: PPUSH
31594: LD_VAR 0 2
31598: PUSH
31599: LD_VAR 0 2
31603: ARRAY
31604: PPUSH
31605: LD_VAR 0 3
31609: PPUSH
31610: CALL_OW 1
31614: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31615: LD_ADDR_VAR 0 7
31619: PUSH
31620: LD_VAR 0 7
31624: PPUSH
31625: LD_VAR 0 7
31629: PPUSH
31630: LD_VAR 0 6
31634: PPUSH
31635: CALL_OW 1
31639: ST_TO_ADDR
// for i = s_arr downto 2 do
31640: LD_ADDR_VAR 0 5
31644: PUSH
31645: DOUBLE
31646: LD_VAR 0 7
31650: INC
31651: ST_TO_ADDR
31652: LD_INT 2
31654: PUSH
31655: FOR_DOWNTO
31656: IFFALSE 31740
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31658: LD_ADDR_VAR 0 6
31662: PUSH
31663: LD_VAR 0 7
31667: PUSH
31668: LD_VAR 0 5
31672: PUSH
31673: LD_INT 1
31675: MINUS
31676: ARRAY
31677: PPUSH
31678: LD_VAR 0 2
31682: PUSH
31683: LD_VAR 0 5
31687: PUSH
31688: LD_INT 1
31690: MINUS
31691: ARRAY
31692: PPUSH
31693: LD_VAR 0 7
31697: PUSH
31698: LD_VAR 0 5
31702: ARRAY
31703: PPUSH
31704: CALL_OW 1
31708: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31709: LD_ADDR_VAR 0 7
31713: PUSH
31714: LD_VAR 0 7
31718: PPUSH
31719: LD_VAR 0 5
31723: PUSH
31724: LD_INT 1
31726: MINUS
31727: PPUSH
31728: LD_VAR 0 6
31732: PPUSH
31733: CALL_OW 1
31737: ST_TO_ADDR
// end ;
31738: GO 31655
31740: POP
31741: POP
// result := s_arr [ 1 ] ;
31742: LD_ADDR_VAR 0 4
31746: PUSH
31747: LD_VAR 0 7
31751: PUSH
31752: LD_INT 1
31754: ARRAY
31755: ST_TO_ADDR
// end ; end ;
31756: LD_VAR 0 4
31760: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31761: LD_INT 0
31763: PPUSH
31764: PPUSH
// if not list then
31765: LD_VAR 0 1
31769: NOT
31770: IFFALSE 31774
// exit ;
31772: GO 31865
// i := list [ pos1 ] ;
31774: LD_ADDR_VAR 0 5
31778: PUSH
31779: LD_VAR 0 1
31783: PUSH
31784: LD_VAR 0 2
31788: ARRAY
31789: ST_TO_ADDR
// if not i then
31790: LD_VAR 0 5
31794: NOT
31795: IFFALSE 31799
// exit ;
31797: GO 31865
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31799: LD_ADDR_VAR 0 1
31803: PUSH
31804: LD_VAR 0 1
31808: PPUSH
31809: LD_VAR 0 2
31813: PPUSH
31814: LD_VAR 0 1
31818: PUSH
31819: LD_VAR 0 3
31823: ARRAY
31824: PPUSH
31825: CALL_OW 1
31829: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31830: LD_ADDR_VAR 0 1
31834: PUSH
31835: LD_VAR 0 1
31839: PPUSH
31840: LD_VAR 0 3
31844: PPUSH
31845: LD_VAR 0 5
31849: PPUSH
31850: CALL_OW 1
31854: ST_TO_ADDR
// result := list ;
31855: LD_ADDR_VAR 0 4
31859: PUSH
31860: LD_VAR 0 1
31864: ST_TO_ADDR
// end ;
31865: LD_VAR 0 4
31869: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31870: LD_INT 0
31872: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31873: LD_ADDR_VAR 0 5
31877: PUSH
31878: LD_VAR 0 1
31882: PPUSH
31883: CALL_OW 250
31887: PPUSH
31888: LD_VAR 0 1
31892: PPUSH
31893: CALL_OW 251
31897: PPUSH
31898: LD_VAR 0 2
31902: PPUSH
31903: LD_VAR 0 3
31907: PPUSH
31908: LD_VAR 0 4
31912: PPUSH
31913: CALL 31923 0 5
31917: ST_TO_ADDR
// end ;
31918: LD_VAR 0 5
31922: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31923: LD_INT 0
31925: PPUSH
31926: PPUSH
31927: PPUSH
31928: PPUSH
// if not list then
31929: LD_VAR 0 3
31933: NOT
31934: IFFALSE 31938
// exit ;
31936: GO 32326
// result := [ ] ;
31938: LD_ADDR_VAR 0 6
31942: PUSH
31943: EMPTY
31944: ST_TO_ADDR
// for i in list do
31945: LD_ADDR_VAR 0 7
31949: PUSH
31950: LD_VAR 0 3
31954: PUSH
31955: FOR_IN
31956: IFFALSE 32158
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31958: LD_ADDR_VAR 0 9
31962: PUSH
31963: LD_VAR 0 7
31967: PPUSH
31968: LD_VAR 0 1
31972: PPUSH
31973: LD_VAR 0 2
31977: PPUSH
31978: CALL_OW 297
31982: ST_TO_ADDR
// if not result then
31983: LD_VAR 0 6
31987: NOT
31988: IFFALSE 32014
// result := [ [ i , tmp ] ] else
31990: LD_ADDR_VAR 0 6
31994: PUSH
31995: LD_VAR 0 7
31999: PUSH
32000: LD_VAR 0 9
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: EMPTY
32010: LIST
32011: ST_TO_ADDR
32012: GO 32156
// begin if result [ result ] [ 2 ] < tmp then
32014: LD_VAR 0 6
32018: PUSH
32019: LD_VAR 0 6
32023: ARRAY
32024: PUSH
32025: LD_INT 2
32027: ARRAY
32028: PUSH
32029: LD_VAR 0 9
32033: LESS
32034: IFFALSE 32076
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32036: LD_ADDR_VAR 0 6
32040: PUSH
32041: LD_VAR 0 6
32045: PPUSH
32046: LD_VAR 0 6
32050: PUSH
32051: LD_INT 1
32053: PLUS
32054: PPUSH
32055: LD_VAR 0 7
32059: PUSH
32060: LD_VAR 0 9
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PPUSH
32069: CALL_OW 2
32073: ST_TO_ADDR
32074: GO 32156
// for j = 1 to result do
32076: LD_ADDR_VAR 0 8
32080: PUSH
32081: DOUBLE
32082: LD_INT 1
32084: DEC
32085: ST_TO_ADDR
32086: LD_VAR 0 6
32090: PUSH
32091: FOR_TO
32092: IFFALSE 32154
// begin if tmp < result [ j ] [ 2 ] then
32094: LD_VAR 0 9
32098: PUSH
32099: LD_VAR 0 6
32103: PUSH
32104: LD_VAR 0 8
32108: ARRAY
32109: PUSH
32110: LD_INT 2
32112: ARRAY
32113: LESS
32114: IFFALSE 32152
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32116: LD_ADDR_VAR 0 6
32120: PUSH
32121: LD_VAR 0 6
32125: PPUSH
32126: LD_VAR 0 8
32130: PPUSH
32131: LD_VAR 0 7
32135: PUSH
32136: LD_VAR 0 9
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PPUSH
32145: CALL_OW 2
32149: ST_TO_ADDR
// break ;
32150: GO 32154
// end ; end ;
32152: GO 32091
32154: POP
32155: POP
// end ; end ;
32156: GO 31955
32158: POP
32159: POP
// if result and not asc then
32160: LD_VAR 0 6
32164: PUSH
32165: LD_VAR 0 4
32169: NOT
32170: AND
32171: IFFALSE 32246
// begin tmp := result ;
32173: LD_ADDR_VAR 0 9
32177: PUSH
32178: LD_VAR 0 6
32182: ST_TO_ADDR
// for i = tmp downto 1 do
32183: LD_ADDR_VAR 0 7
32187: PUSH
32188: DOUBLE
32189: LD_VAR 0 9
32193: INC
32194: ST_TO_ADDR
32195: LD_INT 1
32197: PUSH
32198: FOR_DOWNTO
32199: IFFALSE 32244
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32201: LD_ADDR_VAR 0 6
32205: PUSH
32206: LD_VAR 0 6
32210: PPUSH
32211: LD_VAR 0 9
32215: PUSH
32216: LD_VAR 0 7
32220: MINUS
32221: PUSH
32222: LD_INT 1
32224: PLUS
32225: PPUSH
32226: LD_VAR 0 9
32230: PUSH
32231: LD_VAR 0 7
32235: ARRAY
32236: PPUSH
32237: CALL_OW 1
32241: ST_TO_ADDR
32242: GO 32198
32244: POP
32245: POP
// end ; tmp := [ ] ;
32246: LD_ADDR_VAR 0 9
32250: PUSH
32251: EMPTY
32252: ST_TO_ADDR
// if mode then
32253: LD_VAR 0 5
32257: IFFALSE 32326
// begin for i = 1 to result do
32259: LD_ADDR_VAR 0 7
32263: PUSH
32264: DOUBLE
32265: LD_INT 1
32267: DEC
32268: ST_TO_ADDR
32269: LD_VAR 0 6
32273: PUSH
32274: FOR_TO
32275: IFFALSE 32314
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32277: LD_ADDR_VAR 0 9
32281: PUSH
32282: LD_VAR 0 9
32286: PPUSH
32287: LD_VAR 0 7
32291: PPUSH
32292: LD_VAR 0 6
32296: PUSH
32297: LD_VAR 0 7
32301: ARRAY
32302: PUSH
32303: LD_INT 1
32305: ARRAY
32306: PPUSH
32307: CALL_OW 1
32311: ST_TO_ADDR
32312: GO 32274
32314: POP
32315: POP
// result := tmp ;
32316: LD_ADDR_VAR 0 6
32320: PUSH
32321: LD_VAR 0 9
32325: ST_TO_ADDR
// end ; end ;
32326: LD_VAR 0 6
32330: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32331: LD_INT 0
32333: PPUSH
32334: PPUSH
32335: PPUSH
32336: PPUSH
32337: PPUSH
32338: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32339: LD_ADDR_VAR 0 5
32343: PUSH
32344: LD_INT 0
32346: PUSH
32347: LD_INT 0
32349: PUSH
32350: LD_INT 0
32352: PUSH
32353: EMPTY
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: ST_TO_ADDR
// if not x or not y then
32361: LD_VAR 0 2
32365: NOT
32366: PUSH
32367: LD_VAR 0 3
32371: NOT
32372: OR
32373: IFFALSE 32377
// exit ;
32375: GO 34023
// if not range then
32377: LD_VAR 0 4
32381: NOT
32382: IFFALSE 32392
// range := 10 ;
32384: LD_ADDR_VAR 0 4
32388: PUSH
32389: LD_INT 10
32391: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32392: LD_ADDR_VAR 0 8
32396: PUSH
32397: LD_INT 81
32399: PUSH
32400: LD_VAR 0 1
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 92
32411: PUSH
32412: LD_VAR 0 2
32416: PUSH
32417: LD_VAR 0 3
32421: PUSH
32422: LD_VAR 0 4
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 3
32435: PUSH
32436: LD_INT 21
32438: PUSH
32439: LD_INT 3
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: LIST
32454: PPUSH
32455: CALL_OW 69
32459: ST_TO_ADDR
// if not tmp then
32460: LD_VAR 0 8
32464: NOT
32465: IFFALSE 32469
// exit ;
32467: GO 34023
// for i in tmp do
32469: LD_ADDR_VAR 0 6
32473: PUSH
32474: LD_VAR 0 8
32478: PUSH
32479: FOR_IN
32480: IFFALSE 33998
// begin points := [ 0 , 0 , 0 ] ;
32482: LD_ADDR_VAR 0 9
32486: PUSH
32487: LD_INT 0
32489: PUSH
32490: LD_INT 0
32492: PUSH
32493: LD_INT 0
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: LIST
32500: ST_TO_ADDR
// bpoints := 1 ;
32501: LD_ADDR_VAR 0 10
32505: PUSH
32506: LD_INT 1
32508: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32509: LD_VAR 0 6
32513: PPUSH
32514: CALL_OW 247
32518: PUSH
32519: LD_INT 1
32521: DOUBLE
32522: EQUAL
32523: IFTRUE 32527
32525: GO 33105
32527: POP
// begin if GetClass ( i ) = 1 then
32528: LD_VAR 0 6
32532: PPUSH
32533: CALL_OW 257
32537: PUSH
32538: LD_INT 1
32540: EQUAL
32541: IFFALSE 32562
// points := [ 10 , 5 , 3 ] ;
32543: LD_ADDR_VAR 0 9
32547: PUSH
32548: LD_INT 10
32550: PUSH
32551: LD_INT 5
32553: PUSH
32554: LD_INT 3
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: LIST
32561: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32562: LD_VAR 0 6
32566: PPUSH
32567: CALL_OW 257
32571: PUSH
32572: LD_INT 2
32574: PUSH
32575: LD_INT 3
32577: PUSH
32578: LD_INT 4
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: LIST
32585: IN
32586: IFFALSE 32607
// points := [ 3 , 2 , 1 ] ;
32588: LD_ADDR_VAR 0 9
32592: PUSH
32593: LD_INT 3
32595: PUSH
32596: LD_INT 2
32598: PUSH
32599: LD_INT 1
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: LIST
32606: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32607: LD_VAR 0 6
32611: PPUSH
32612: CALL_OW 257
32616: PUSH
32617: LD_INT 5
32619: EQUAL
32620: IFFALSE 32641
// points := [ 130 , 5 , 2 ] ;
32622: LD_ADDR_VAR 0 9
32626: PUSH
32627: LD_INT 130
32629: PUSH
32630: LD_INT 5
32632: PUSH
32633: LD_INT 2
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: LIST
32640: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32641: LD_VAR 0 6
32645: PPUSH
32646: CALL_OW 257
32650: PUSH
32651: LD_INT 8
32653: EQUAL
32654: IFFALSE 32675
// points := [ 35 , 35 , 30 ] ;
32656: LD_ADDR_VAR 0 9
32660: PUSH
32661: LD_INT 35
32663: PUSH
32664: LD_INT 35
32666: PUSH
32667: LD_INT 30
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: LIST
32674: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32675: LD_VAR 0 6
32679: PPUSH
32680: CALL_OW 257
32684: PUSH
32685: LD_INT 9
32687: EQUAL
32688: IFFALSE 32709
// points := [ 20 , 55 , 40 ] ;
32690: LD_ADDR_VAR 0 9
32694: PUSH
32695: LD_INT 20
32697: PUSH
32698: LD_INT 55
32700: PUSH
32701: LD_INT 40
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: LIST
32708: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32709: LD_VAR 0 6
32713: PPUSH
32714: CALL_OW 257
32718: PUSH
32719: LD_INT 12
32721: PUSH
32722: LD_INT 16
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: IN
32729: IFFALSE 32750
// points := [ 5 , 3 , 2 ] ;
32731: LD_ADDR_VAR 0 9
32735: PUSH
32736: LD_INT 5
32738: PUSH
32739: LD_INT 3
32741: PUSH
32742: LD_INT 2
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: LIST
32749: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32750: LD_VAR 0 6
32754: PPUSH
32755: CALL_OW 257
32759: PUSH
32760: LD_INT 17
32762: EQUAL
32763: IFFALSE 32784
// points := [ 100 , 50 , 75 ] ;
32765: LD_ADDR_VAR 0 9
32769: PUSH
32770: LD_INT 100
32772: PUSH
32773: LD_INT 50
32775: PUSH
32776: LD_INT 75
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: LIST
32783: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32784: LD_VAR 0 6
32788: PPUSH
32789: CALL_OW 257
32793: PUSH
32794: LD_INT 15
32796: EQUAL
32797: IFFALSE 32818
// points := [ 10 , 5 , 3 ] ;
32799: LD_ADDR_VAR 0 9
32803: PUSH
32804: LD_INT 10
32806: PUSH
32807: LD_INT 5
32809: PUSH
32810: LD_INT 3
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: LIST
32817: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32818: LD_VAR 0 6
32822: PPUSH
32823: CALL_OW 257
32827: PUSH
32828: LD_INT 14
32830: EQUAL
32831: IFFALSE 32852
// points := [ 10 , 0 , 0 ] ;
32833: LD_ADDR_VAR 0 9
32837: PUSH
32838: LD_INT 10
32840: PUSH
32841: LD_INT 0
32843: PUSH
32844: LD_INT 0
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: LIST
32851: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32852: LD_VAR 0 6
32856: PPUSH
32857: CALL_OW 257
32861: PUSH
32862: LD_INT 11
32864: EQUAL
32865: IFFALSE 32886
// points := [ 30 , 10 , 5 ] ;
32867: LD_ADDR_VAR 0 9
32871: PUSH
32872: LD_INT 30
32874: PUSH
32875: LD_INT 10
32877: PUSH
32878: LD_INT 5
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: LIST
32885: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32886: LD_VAR 0 1
32890: PPUSH
32891: LD_INT 5
32893: PPUSH
32894: CALL_OW 321
32898: PUSH
32899: LD_INT 2
32901: EQUAL
32902: IFFALSE 32919
// bpoints := bpoints * 1.8 ;
32904: LD_ADDR_VAR 0 10
32908: PUSH
32909: LD_VAR 0 10
32913: PUSH
32914: LD_REAL  1.80000000000000E+0000
32917: MUL
32918: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32919: LD_VAR 0 6
32923: PPUSH
32924: CALL_OW 257
32928: PUSH
32929: LD_INT 1
32931: PUSH
32932: LD_INT 2
32934: PUSH
32935: LD_INT 3
32937: PUSH
32938: LD_INT 4
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: IN
32947: PUSH
32948: LD_VAR 0 1
32952: PPUSH
32953: LD_INT 51
32955: PPUSH
32956: CALL_OW 321
32960: PUSH
32961: LD_INT 2
32963: EQUAL
32964: AND
32965: IFFALSE 32982
// bpoints := bpoints * 1.2 ;
32967: LD_ADDR_VAR 0 10
32971: PUSH
32972: LD_VAR 0 10
32976: PUSH
32977: LD_REAL  1.20000000000000E+0000
32980: MUL
32981: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32982: LD_VAR 0 6
32986: PPUSH
32987: CALL_OW 257
32991: PUSH
32992: LD_INT 5
32994: PUSH
32995: LD_INT 7
32997: PUSH
32998: LD_INT 9
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: LIST
33005: IN
33006: PUSH
33007: LD_VAR 0 1
33011: PPUSH
33012: LD_INT 52
33014: PPUSH
33015: CALL_OW 321
33019: PUSH
33020: LD_INT 2
33022: EQUAL
33023: AND
33024: IFFALSE 33041
// bpoints := bpoints * 1.5 ;
33026: LD_ADDR_VAR 0 10
33030: PUSH
33031: LD_VAR 0 10
33035: PUSH
33036: LD_REAL  1.50000000000000E+0000
33039: MUL
33040: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33041: LD_VAR 0 1
33045: PPUSH
33046: LD_INT 66
33048: PPUSH
33049: CALL_OW 321
33053: PUSH
33054: LD_INT 2
33056: EQUAL
33057: IFFALSE 33074
// bpoints := bpoints * 1.1 ;
33059: LD_ADDR_VAR 0 10
33063: PUSH
33064: LD_VAR 0 10
33068: PUSH
33069: LD_REAL  1.10000000000000E+0000
33072: MUL
33073: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33074: LD_ADDR_VAR 0 10
33078: PUSH
33079: LD_VAR 0 10
33083: PUSH
33084: LD_VAR 0 6
33088: PPUSH
33089: LD_INT 1
33091: PPUSH
33092: CALL_OW 259
33096: PUSH
33097: LD_REAL  1.15000000000000E+0000
33100: MUL
33101: MUL
33102: ST_TO_ADDR
// end ; unit_vehicle :
33103: GO 33927
33105: LD_INT 2
33107: DOUBLE
33108: EQUAL
33109: IFTRUE 33113
33111: GO 33915
33113: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33114: LD_VAR 0 6
33118: PPUSH
33119: CALL_OW 264
33123: PUSH
33124: LD_INT 2
33126: PUSH
33127: LD_INT 42
33129: PUSH
33130: LD_INT 24
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: LIST
33137: IN
33138: IFFALSE 33159
// points := [ 25 , 5 , 3 ] ;
33140: LD_ADDR_VAR 0 9
33144: PUSH
33145: LD_INT 25
33147: PUSH
33148: LD_INT 5
33150: PUSH
33151: LD_INT 3
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: LIST
33158: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33159: LD_VAR 0 6
33163: PPUSH
33164: CALL_OW 264
33168: PUSH
33169: LD_INT 4
33171: PUSH
33172: LD_INT 43
33174: PUSH
33175: LD_INT 25
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: LIST
33182: IN
33183: IFFALSE 33204
// points := [ 40 , 15 , 5 ] ;
33185: LD_ADDR_VAR 0 9
33189: PUSH
33190: LD_INT 40
33192: PUSH
33193: LD_INT 15
33195: PUSH
33196: LD_INT 5
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: LIST
33203: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33204: LD_VAR 0 6
33208: PPUSH
33209: CALL_OW 264
33213: PUSH
33214: LD_INT 3
33216: PUSH
33217: LD_INT 23
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: IN
33224: IFFALSE 33245
// points := [ 7 , 25 , 8 ] ;
33226: LD_ADDR_VAR 0 9
33230: PUSH
33231: LD_INT 7
33233: PUSH
33234: LD_INT 25
33236: PUSH
33237: LD_INT 8
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: LIST
33244: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33245: LD_VAR 0 6
33249: PPUSH
33250: CALL_OW 264
33254: PUSH
33255: LD_INT 5
33257: PUSH
33258: LD_INT 27
33260: PUSH
33261: LD_INT 44
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: LIST
33268: IN
33269: IFFALSE 33290
// points := [ 14 , 50 , 16 ] ;
33271: LD_ADDR_VAR 0 9
33275: PUSH
33276: LD_INT 14
33278: PUSH
33279: LD_INT 50
33281: PUSH
33282: LD_INT 16
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: LIST
33289: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33290: LD_VAR 0 6
33294: PPUSH
33295: CALL_OW 264
33299: PUSH
33300: LD_INT 6
33302: PUSH
33303: LD_INT 46
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: IN
33310: IFFALSE 33331
// points := [ 32 , 120 , 70 ] ;
33312: LD_ADDR_VAR 0 9
33316: PUSH
33317: LD_INT 32
33319: PUSH
33320: LD_INT 120
33322: PUSH
33323: LD_INT 70
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: LIST
33330: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
33331: LD_VAR 0 6
33335: PPUSH
33336: CALL_OW 264
33340: PUSH
33341: LD_INT 7
33343: PUSH
33344: LD_INT 28
33346: PUSH
33347: LD_INT 45
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: LIST
33354: IN
33355: IFFALSE 33376
// points := [ 35 , 20 , 45 ] ;
33357: LD_ADDR_VAR 0 9
33361: PUSH
33362: LD_INT 35
33364: PUSH
33365: LD_INT 20
33367: PUSH
33368: LD_INT 45
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: LIST
33375: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33376: LD_VAR 0 6
33380: PPUSH
33381: CALL_OW 264
33385: PUSH
33386: LD_INT 47
33388: PUSH
33389: EMPTY
33390: LIST
33391: IN
33392: IFFALSE 33413
// points := [ 67 , 45 , 75 ] ;
33394: LD_ADDR_VAR 0 9
33398: PUSH
33399: LD_INT 67
33401: PUSH
33402: LD_INT 45
33404: PUSH
33405: LD_INT 75
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: LIST
33412: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33413: LD_VAR 0 6
33417: PPUSH
33418: CALL_OW 264
33422: PUSH
33423: LD_INT 26
33425: PUSH
33426: EMPTY
33427: LIST
33428: IN
33429: IFFALSE 33450
// points := [ 120 , 30 , 80 ] ;
33431: LD_ADDR_VAR 0 9
33435: PUSH
33436: LD_INT 120
33438: PUSH
33439: LD_INT 30
33441: PUSH
33442: LD_INT 80
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: LIST
33449: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33450: LD_VAR 0 6
33454: PPUSH
33455: CALL_OW 264
33459: PUSH
33460: LD_INT 22
33462: PUSH
33463: EMPTY
33464: LIST
33465: IN
33466: IFFALSE 33487
// points := [ 40 , 1 , 1 ] ;
33468: LD_ADDR_VAR 0 9
33472: PUSH
33473: LD_INT 40
33475: PUSH
33476: LD_INT 1
33478: PUSH
33479: LD_INT 1
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: LIST
33486: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33487: LD_VAR 0 6
33491: PPUSH
33492: CALL_OW 264
33496: PUSH
33497: LD_INT 29
33499: PUSH
33500: EMPTY
33501: LIST
33502: IN
33503: IFFALSE 33524
// points := [ 70 , 200 , 400 ] ;
33505: LD_ADDR_VAR 0 9
33509: PUSH
33510: LD_INT 70
33512: PUSH
33513: LD_INT 200
33515: PUSH
33516: LD_INT 400
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: LIST
33523: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33524: LD_VAR 0 6
33528: PPUSH
33529: CALL_OW 264
33533: PUSH
33534: LD_INT 14
33536: PUSH
33537: LD_INT 53
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: IN
33544: IFFALSE 33565
// points := [ 40 , 10 , 20 ] ;
33546: LD_ADDR_VAR 0 9
33550: PUSH
33551: LD_INT 40
33553: PUSH
33554: LD_INT 10
33556: PUSH
33557: LD_INT 20
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: LIST
33564: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33565: LD_VAR 0 6
33569: PPUSH
33570: CALL_OW 264
33574: PUSH
33575: LD_INT 9
33577: PUSH
33578: EMPTY
33579: LIST
33580: IN
33581: IFFALSE 33602
// points := [ 5 , 70 , 20 ] ;
33583: LD_ADDR_VAR 0 9
33587: PUSH
33588: LD_INT 5
33590: PUSH
33591: LD_INT 70
33593: PUSH
33594: LD_INT 20
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: LIST
33601: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33602: LD_VAR 0 6
33606: PPUSH
33607: CALL_OW 264
33611: PUSH
33612: LD_INT 10
33614: PUSH
33615: EMPTY
33616: LIST
33617: IN
33618: IFFALSE 33639
// points := [ 35 , 110 , 70 ] ;
33620: LD_ADDR_VAR 0 9
33624: PUSH
33625: LD_INT 35
33627: PUSH
33628: LD_INT 110
33630: PUSH
33631: LD_INT 70
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: LIST
33638: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33639: LD_VAR 0 6
33643: PPUSH
33644: CALL_OW 265
33648: PUSH
33649: LD_INT 25
33651: EQUAL
33652: IFFALSE 33673
// points := [ 80 , 65 , 100 ] ;
33654: LD_ADDR_VAR 0 9
33658: PUSH
33659: LD_INT 80
33661: PUSH
33662: LD_INT 65
33664: PUSH
33665: LD_INT 100
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: LIST
33672: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33673: LD_VAR 0 6
33677: PPUSH
33678: CALL_OW 263
33682: PUSH
33683: LD_INT 1
33685: EQUAL
33686: IFFALSE 33721
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33688: LD_ADDR_VAR 0 10
33692: PUSH
33693: LD_VAR 0 10
33697: PUSH
33698: LD_VAR 0 6
33702: PPUSH
33703: CALL_OW 311
33707: PPUSH
33708: LD_INT 3
33710: PPUSH
33711: CALL_OW 259
33715: PUSH
33716: LD_INT 4
33718: MUL
33719: MUL
33720: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33721: LD_VAR 0 6
33725: PPUSH
33726: CALL_OW 263
33730: PUSH
33731: LD_INT 2
33733: EQUAL
33734: IFFALSE 33785
// begin j := IsControledBy ( i ) ;
33736: LD_ADDR_VAR 0 7
33740: PUSH
33741: LD_VAR 0 6
33745: PPUSH
33746: CALL_OW 312
33750: ST_TO_ADDR
// if j then
33751: LD_VAR 0 7
33755: IFFALSE 33785
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33757: LD_ADDR_VAR 0 10
33761: PUSH
33762: LD_VAR 0 10
33766: PUSH
33767: LD_VAR 0 7
33771: PPUSH
33772: LD_INT 3
33774: PPUSH
33775: CALL_OW 259
33779: PUSH
33780: LD_INT 3
33782: MUL
33783: MUL
33784: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33785: LD_VAR 0 6
33789: PPUSH
33790: CALL_OW 264
33794: PUSH
33795: LD_INT 5
33797: PUSH
33798: LD_INT 6
33800: PUSH
33801: LD_INT 46
33803: PUSH
33804: LD_INT 44
33806: PUSH
33807: LD_INT 47
33809: PUSH
33810: LD_INT 45
33812: PUSH
33813: LD_INT 28
33815: PUSH
33816: LD_INT 7
33818: PUSH
33819: LD_INT 27
33821: PUSH
33822: LD_INT 29
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: IN
33837: PUSH
33838: LD_VAR 0 1
33842: PPUSH
33843: LD_INT 52
33845: PPUSH
33846: CALL_OW 321
33850: PUSH
33851: LD_INT 2
33853: EQUAL
33854: AND
33855: IFFALSE 33872
// bpoints := bpoints * 1.2 ;
33857: LD_ADDR_VAR 0 10
33861: PUSH
33862: LD_VAR 0 10
33866: PUSH
33867: LD_REAL  1.20000000000000E+0000
33870: MUL
33871: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33872: LD_VAR 0 6
33876: PPUSH
33877: CALL_OW 264
33881: PUSH
33882: LD_INT 6
33884: PUSH
33885: LD_INT 46
33887: PUSH
33888: LD_INT 47
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: LIST
33895: IN
33896: IFFALSE 33913
// bpoints := bpoints * 1.2 ;
33898: LD_ADDR_VAR 0 10
33902: PUSH
33903: LD_VAR 0 10
33907: PUSH
33908: LD_REAL  1.20000000000000E+0000
33911: MUL
33912: ST_TO_ADDR
// end ; unit_building :
33913: GO 33927
33915: LD_INT 3
33917: DOUBLE
33918: EQUAL
33919: IFTRUE 33923
33921: GO 33926
33923: POP
// ; end ;
33924: GO 33927
33926: POP
// for j = 1 to 3 do
33927: LD_ADDR_VAR 0 7
33931: PUSH
33932: DOUBLE
33933: LD_INT 1
33935: DEC
33936: ST_TO_ADDR
33937: LD_INT 3
33939: PUSH
33940: FOR_TO
33941: IFFALSE 33994
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33943: LD_ADDR_VAR 0 5
33947: PUSH
33948: LD_VAR 0 5
33952: PPUSH
33953: LD_VAR 0 7
33957: PPUSH
33958: LD_VAR 0 5
33962: PUSH
33963: LD_VAR 0 7
33967: ARRAY
33968: PUSH
33969: LD_VAR 0 9
33973: PUSH
33974: LD_VAR 0 7
33978: ARRAY
33979: PUSH
33980: LD_VAR 0 10
33984: MUL
33985: PLUS
33986: PPUSH
33987: CALL_OW 1
33991: ST_TO_ADDR
33992: GO 33940
33994: POP
33995: POP
// end ;
33996: GO 32479
33998: POP
33999: POP
// result := Replace ( result , 4 , tmp ) ;
34000: LD_ADDR_VAR 0 5
34004: PUSH
34005: LD_VAR 0 5
34009: PPUSH
34010: LD_INT 4
34012: PPUSH
34013: LD_VAR 0 8
34017: PPUSH
34018: CALL_OW 1
34022: ST_TO_ADDR
// end ;
34023: LD_VAR 0 5
34027: RET
// export function DangerAtRange ( unit , range ) ; begin
34028: LD_INT 0
34030: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34031: LD_ADDR_VAR 0 3
34035: PUSH
34036: LD_VAR 0 1
34040: PPUSH
34041: CALL_OW 255
34045: PPUSH
34046: LD_VAR 0 1
34050: PPUSH
34051: CALL_OW 250
34055: PPUSH
34056: LD_VAR 0 1
34060: PPUSH
34061: CALL_OW 251
34065: PPUSH
34066: LD_VAR 0 2
34070: PPUSH
34071: CALL 32331 0 4
34075: ST_TO_ADDR
// end ;
34076: LD_VAR 0 3
34080: RET
// export function DangerInArea ( side , area ) ; begin
34081: LD_INT 0
34083: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34084: LD_ADDR_VAR 0 3
34088: PUSH
34089: LD_VAR 0 2
34093: PPUSH
34094: LD_INT 81
34096: PUSH
34097: LD_VAR 0 1
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PPUSH
34106: CALL_OW 70
34110: ST_TO_ADDR
// end ;
34111: LD_VAR 0 3
34115: RET
// export function IsExtension ( b ) ; begin
34116: LD_INT 0
34118: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34119: LD_ADDR_VAR 0 2
34123: PUSH
34124: LD_VAR 0 1
34128: PUSH
34129: LD_INT 23
34131: PUSH
34132: LD_INT 20
34134: PUSH
34135: LD_INT 22
34137: PUSH
34138: LD_INT 17
34140: PUSH
34141: LD_INT 24
34143: PUSH
34144: LD_INT 21
34146: PUSH
34147: LD_INT 19
34149: PUSH
34150: LD_INT 16
34152: PUSH
34153: LD_INT 25
34155: PUSH
34156: LD_INT 18
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: IN
34171: ST_TO_ADDR
// end ;
34172: LD_VAR 0 2
34176: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
34177: LD_INT 0
34179: PPUSH
34180: PPUSH
34181: PPUSH
// result := [ ] ;
34182: LD_ADDR_VAR 0 3
34186: PUSH
34187: EMPTY
34188: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34189: LD_ADDR_VAR 0 4
34193: PUSH
34194: LD_VAR 0 2
34198: PPUSH
34199: LD_INT 21
34201: PUSH
34202: LD_INT 3
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PPUSH
34209: CALL_OW 70
34213: ST_TO_ADDR
// if not tmp then
34214: LD_VAR 0 4
34218: NOT
34219: IFFALSE 34223
// exit ;
34221: GO 34281
// for i in tmp do
34223: LD_ADDR_VAR 0 5
34227: PUSH
34228: LD_VAR 0 4
34232: PUSH
34233: FOR_IN
34234: IFFALSE 34269
// if GetBase ( i ) <> base then
34236: LD_VAR 0 5
34240: PPUSH
34241: CALL_OW 274
34245: PUSH
34246: LD_VAR 0 1
34250: NONEQUAL
34251: IFFALSE 34267
// ComLinkToBase ( base , i ) ;
34253: LD_VAR 0 1
34257: PPUSH
34258: LD_VAR 0 5
34262: PPUSH
34263: CALL_OW 169
34267: GO 34233
34269: POP
34270: POP
// result := tmp ;
34271: LD_ADDR_VAR 0 3
34275: PUSH
34276: LD_VAR 0 4
34280: ST_TO_ADDR
// end ;
34281: LD_VAR 0 3
34285: RET
// export function ComComplete ( unit , b ) ; var i ; begin
34286: LD_INT 0
34288: PPUSH
34289: PPUSH
// if BuildingStatus ( b ) = bs_build then
34290: LD_VAR 0 2
34294: PPUSH
34295: CALL_OW 461
34299: PUSH
34300: LD_INT 1
34302: EQUAL
34303: IFFALSE 34363
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34305: LD_VAR 0 1
34309: PPUSH
34310: LD_STRING h
34312: PUSH
34313: LD_VAR 0 2
34317: PPUSH
34318: CALL_OW 250
34322: PUSH
34323: LD_VAR 0 2
34327: PPUSH
34328: CALL_OW 251
34332: PUSH
34333: LD_VAR 0 2
34337: PUSH
34338: LD_INT 0
34340: PUSH
34341: LD_INT 0
34343: PUSH
34344: LD_INT 0
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: PUSH
34356: EMPTY
34357: LIST
34358: PPUSH
34359: CALL_OW 446
// end ;
34363: LD_VAR 0 3
34367: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34368: LD_INT 0
34370: PPUSH
34371: PPUSH
34372: PPUSH
34373: PPUSH
34374: PPUSH
34375: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
34376: LD_VAR 0 1
34380: NOT
34381: PUSH
34382: LD_VAR 0 1
34386: PPUSH
34387: CALL_OW 263
34391: PUSH
34392: LD_INT 2
34394: EQUAL
34395: NOT
34396: OR
34397: IFFALSE 34401
// exit ;
34399: GO 34717
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34401: LD_ADDR_VAR 0 6
34405: PUSH
34406: LD_INT 22
34408: PUSH
34409: LD_VAR 0 1
34413: PPUSH
34414: CALL_OW 255
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 2
34425: PUSH
34426: LD_INT 30
34428: PUSH
34429: LD_INT 36
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 34
34438: PUSH
34439: LD_INT 31
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: LIST
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PPUSH
34455: CALL_OW 69
34459: ST_TO_ADDR
// if not tmp then
34460: LD_VAR 0 6
34464: NOT
34465: IFFALSE 34469
// exit ;
34467: GO 34717
// result := [ ] ;
34469: LD_ADDR_VAR 0 2
34473: PUSH
34474: EMPTY
34475: ST_TO_ADDR
// for i in tmp do
34476: LD_ADDR_VAR 0 3
34480: PUSH
34481: LD_VAR 0 6
34485: PUSH
34486: FOR_IN
34487: IFFALSE 34558
// begin t := UnitsInside ( i ) ;
34489: LD_ADDR_VAR 0 4
34493: PUSH
34494: LD_VAR 0 3
34498: PPUSH
34499: CALL_OW 313
34503: ST_TO_ADDR
// if t then
34504: LD_VAR 0 4
34508: IFFALSE 34556
// for j in t do
34510: LD_ADDR_VAR 0 7
34514: PUSH
34515: LD_VAR 0 4
34519: PUSH
34520: FOR_IN
34521: IFFALSE 34554
// result := Insert ( result , result + 1 , j ) ;
34523: LD_ADDR_VAR 0 2
34527: PUSH
34528: LD_VAR 0 2
34532: PPUSH
34533: LD_VAR 0 2
34537: PUSH
34538: LD_INT 1
34540: PLUS
34541: PPUSH
34542: LD_VAR 0 7
34546: PPUSH
34547: CALL_OW 2
34551: ST_TO_ADDR
34552: GO 34520
34554: POP
34555: POP
// end ;
34556: GO 34486
34558: POP
34559: POP
// if not result then
34560: LD_VAR 0 2
34564: NOT
34565: IFFALSE 34569
// exit ;
34567: GO 34717
// mech := result [ 1 ] ;
34569: LD_ADDR_VAR 0 5
34573: PUSH
34574: LD_VAR 0 2
34578: PUSH
34579: LD_INT 1
34581: ARRAY
34582: ST_TO_ADDR
// if result > 1 then
34583: LD_VAR 0 2
34587: PUSH
34588: LD_INT 1
34590: GREATER
34591: IFFALSE 34703
// for i = 2 to result do
34593: LD_ADDR_VAR 0 3
34597: PUSH
34598: DOUBLE
34599: LD_INT 2
34601: DEC
34602: ST_TO_ADDR
34603: LD_VAR 0 2
34607: PUSH
34608: FOR_TO
34609: IFFALSE 34701
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34611: LD_ADDR_VAR 0 4
34615: PUSH
34616: LD_VAR 0 2
34620: PUSH
34621: LD_VAR 0 3
34625: ARRAY
34626: PPUSH
34627: LD_INT 3
34629: PPUSH
34630: CALL_OW 259
34634: PUSH
34635: LD_VAR 0 2
34639: PUSH
34640: LD_VAR 0 3
34644: ARRAY
34645: PPUSH
34646: CALL_OW 432
34650: MINUS
34651: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34652: LD_VAR 0 4
34656: PUSH
34657: LD_VAR 0 5
34661: PPUSH
34662: LD_INT 3
34664: PPUSH
34665: CALL_OW 259
34669: PUSH
34670: LD_VAR 0 5
34674: PPUSH
34675: CALL_OW 432
34679: MINUS
34680: GREATEREQUAL
34681: IFFALSE 34699
// mech := result [ i ] ;
34683: LD_ADDR_VAR 0 5
34687: PUSH
34688: LD_VAR 0 2
34692: PUSH
34693: LD_VAR 0 3
34697: ARRAY
34698: ST_TO_ADDR
// end ;
34699: GO 34608
34701: POP
34702: POP
// ComLinkTo ( vehicle , mech ) ;
34703: LD_VAR 0 1
34707: PPUSH
34708: LD_VAR 0 5
34712: PPUSH
34713: CALL_OW 135
// end ;
34717: LD_VAR 0 2
34721: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34722: LD_INT 0
34724: PPUSH
34725: PPUSH
34726: PPUSH
34727: PPUSH
34728: PPUSH
34729: PPUSH
34730: PPUSH
34731: PPUSH
34732: PPUSH
34733: PPUSH
34734: PPUSH
34735: PPUSH
34736: PPUSH
// result := [ ] ;
34737: LD_ADDR_VAR 0 7
34741: PUSH
34742: EMPTY
34743: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34744: LD_VAR 0 1
34748: PPUSH
34749: CALL_OW 266
34753: PUSH
34754: LD_INT 0
34756: PUSH
34757: LD_INT 1
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: IN
34764: NOT
34765: IFFALSE 34769
// exit ;
34767: GO 36400
// if name then
34769: LD_VAR 0 3
34773: IFFALSE 34789
// SetBName ( base_dep , name ) ;
34775: LD_VAR 0 1
34779: PPUSH
34780: LD_VAR 0 3
34784: PPUSH
34785: CALL_OW 500
// base := GetBase ( base_dep ) ;
34789: LD_ADDR_VAR 0 15
34793: PUSH
34794: LD_VAR 0 1
34798: PPUSH
34799: CALL_OW 274
34803: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34804: LD_ADDR_VAR 0 16
34808: PUSH
34809: LD_VAR 0 1
34813: PPUSH
34814: CALL_OW 255
34818: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34819: LD_ADDR_VAR 0 17
34823: PUSH
34824: LD_VAR 0 1
34828: PPUSH
34829: CALL_OW 248
34833: ST_TO_ADDR
// if sources then
34834: LD_VAR 0 5
34838: IFFALSE 34885
// for i = 1 to 3 do
34840: LD_ADDR_VAR 0 8
34844: PUSH
34845: DOUBLE
34846: LD_INT 1
34848: DEC
34849: ST_TO_ADDR
34850: LD_INT 3
34852: PUSH
34853: FOR_TO
34854: IFFALSE 34883
// AddResourceType ( base , i , sources [ i ] ) ;
34856: LD_VAR 0 15
34860: PPUSH
34861: LD_VAR 0 8
34865: PPUSH
34866: LD_VAR 0 5
34870: PUSH
34871: LD_VAR 0 8
34875: ARRAY
34876: PPUSH
34877: CALL_OW 276
34881: GO 34853
34883: POP
34884: POP
// buildings := GetBaseBuildings ( base , area ) ;
34885: LD_ADDR_VAR 0 18
34889: PUSH
34890: LD_VAR 0 15
34894: PPUSH
34895: LD_VAR 0 2
34899: PPUSH
34900: CALL 34177 0 2
34904: ST_TO_ADDR
// InitHc ;
34905: CALL_OW 19
// InitUc ;
34909: CALL_OW 18
// uc_side := side ;
34913: LD_ADDR_OWVAR 20
34917: PUSH
34918: LD_VAR 0 16
34922: ST_TO_ADDR
// uc_nation := nation ;
34923: LD_ADDR_OWVAR 21
34927: PUSH
34928: LD_VAR 0 17
34932: ST_TO_ADDR
// if buildings then
34933: LD_VAR 0 18
34937: IFFALSE 36259
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34939: LD_ADDR_VAR 0 19
34943: PUSH
34944: LD_VAR 0 18
34948: PPUSH
34949: LD_INT 2
34951: PUSH
34952: LD_INT 30
34954: PUSH
34955: LD_INT 29
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 30
34964: PUSH
34965: LD_INT 30
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: LIST
34976: PPUSH
34977: CALL_OW 72
34981: ST_TO_ADDR
// if tmp then
34982: LD_VAR 0 19
34986: IFFALSE 35034
// for i in tmp do
34988: LD_ADDR_VAR 0 8
34992: PUSH
34993: LD_VAR 0 19
34997: PUSH
34998: FOR_IN
34999: IFFALSE 35032
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35001: LD_VAR 0 8
35005: PPUSH
35006: CALL_OW 250
35010: PPUSH
35011: LD_VAR 0 8
35015: PPUSH
35016: CALL_OW 251
35020: PPUSH
35021: LD_VAR 0 16
35025: PPUSH
35026: CALL_OW 441
35030: GO 34998
35032: POP
35033: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35034: LD_VAR 0 18
35038: PPUSH
35039: LD_INT 2
35041: PUSH
35042: LD_INT 30
35044: PUSH
35045: LD_INT 32
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 30
35054: PUSH
35055: LD_INT 33
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: LIST
35066: PPUSH
35067: CALL_OW 72
35071: IFFALSE 35159
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35073: LD_ADDR_VAR 0 8
35077: PUSH
35078: LD_VAR 0 18
35082: PPUSH
35083: LD_INT 2
35085: PUSH
35086: LD_INT 30
35088: PUSH
35089: LD_INT 32
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 30
35098: PUSH
35099: LD_INT 33
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: LIST
35110: PPUSH
35111: CALL_OW 72
35115: PUSH
35116: FOR_IN
35117: IFFALSE 35157
// begin if not GetBWeapon ( i ) then
35119: LD_VAR 0 8
35123: PPUSH
35124: CALL_OW 269
35128: NOT
35129: IFFALSE 35155
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35131: LD_VAR 0 8
35135: PPUSH
35136: LD_VAR 0 8
35140: PPUSH
35141: LD_VAR 0 2
35145: PPUSH
35146: CALL 36405 0 2
35150: PPUSH
35151: CALL_OW 431
// end ;
35155: GO 35116
35157: POP
35158: POP
// end ; for i = 1 to personel do
35159: LD_ADDR_VAR 0 8
35163: PUSH
35164: DOUBLE
35165: LD_INT 1
35167: DEC
35168: ST_TO_ADDR
35169: LD_VAR 0 6
35173: PUSH
35174: FOR_TO
35175: IFFALSE 36239
// begin if i > 4 then
35177: LD_VAR 0 8
35181: PUSH
35182: LD_INT 4
35184: GREATER
35185: IFFALSE 35189
// break ;
35187: GO 36239
// case i of 1 :
35189: LD_VAR 0 8
35193: PUSH
35194: LD_INT 1
35196: DOUBLE
35197: EQUAL
35198: IFTRUE 35202
35200: GO 35282
35202: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35203: LD_ADDR_VAR 0 12
35207: PUSH
35208: LD_VAR 0 18
35212: PPUSH
35213: LD_INT 22
35215: PUSH
35216: LD_VAR 0 16
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 58
35227: PUSH
35228: EMPTY
35229: LIST
35230: PUSH
35231: LD_INT 2
35233: PUSH
35234: LD_INT 30
35236: PUSH
35237: LD_INT 32
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 30
35246: PUSH
35247: LD_INT 4
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 30
35256: PUSH
35257: LD_INT 5
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: LIST
35274: PPUSH
35275: CALL_OW 72
35279: ST_TO_ADDR
35280: GO 35504
35282: LD_INT 2
35284: DOUBLE
35285: EQUAL
35286: IFTRUE 35290
35288: GO 35352
35290: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35291: LD_ADDR_VAR 0 12
35295: PUSH
35296: LD_VAR 0 18
35300: PPUSH
35301: LD_INT 22
35303: PUSH
35304: LD_VAR 0 16
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 2
35315: PUSH
35316: LD_INT 30
35318: PUSH
35319: LD_INT 0
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 30
35328: PUSH
35329: LD_INT 1
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: LIST
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PPUSH
35345: CALL_OW 72
35349: ST_TO_ADDR
35350: GO 35504
35352: LD_INT 3
35354: DOUBLE
35355: EQUAL
35356: IFTRUE 35360
35358: GO 35422
35360: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35361: LD_ADDR_VAR 0 12
35365: PUSH
35366: LD_VAR 0 18
35370: PPUSH
35371: LD_INT 22
35373: PUSH
35374: LD_VAR 0 16
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 2
35385: PUSH
35386: LD_INT 30
35388: PUSH
35389: LD_INT 2
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 30
35398: PUSH
35399: LD_INT 3
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: LIST
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PPUSH
35415: CALL_OW 72
35419: ST_TO_ADDR
35420: GO 35504
35422: LD_INT 4
35424: DOUBLE
35425: EQUAL
35426: IFTRUE 35430
35428: GO 35503
35430: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35431: LD_ADDR_VAR 0 12
35435: PUSH
35436: LD_VAR 0 18
35440: PPUSH
35441: LD_INT 22
35443: PUSH
35444: LD_VAR 0 16
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 2
35455: PUSH
35456: LD_INT 30
35458: PUSH
35459: LD_INT 6
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 30
35468: PUSH
35469: LD_INT 7
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 30
35478: PUSH
35479: LD_INT 8
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PPUSH
35496: CALL_OW 72
35500: ST_TO_ADDR
35501: GO 35504
35503: POP
// if i = 1 then
35504: LD_VAR 0 8
35508: PUSH
35509: LD_INT 1
35511: EQUAL
35512: IFFALSE 35623
// begin tmp := [ ] ;
35514: LD_ADDR_VAR 0 19
35518: PUSH
35519: EMPTY
35520: ST_TO_ADDR
// for j in f do
35521: LD_ADDR_VAR 0 9
35525: PUSH
35526: LD_VAR 0 12
35530: PUSH
35531: FOR_IN
35532: IFFALSE 35605
// if GetBType ( j ) = b_bunker then
35534: LD_VAR 0 9
35538: PPUSH
35539: CALL_OW 266
35543: PUSH
35544: LD_INT 32
35546: EQUAL
35547: IFFALSE 35574
// tmp := Insert ( tmp , 1 , j ) else
35549: LD_ADDR_VAR 0 19
35553: PUSH
35554: LD_VAR 0 19
35558: PPUSH
35559: LD_INT 1
35561: PPUSH
35562: LD_VAR 0 9
35566: PPUSH
35567: CALL_OW 2
35571: ST_TO_ADDR
35572: GO 35603
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35574: LD_ADDR_VAR 0 19
35578: PUSH
35579: LD_VAR 0 19
35583: PPUSH
35584: LD_VAR 0 19
35588: PUSH
35589: LD_INT 1
35591: PLUS
35592: PPUSH
35593: LD_VAR 0 9
35597: PPUSH
35598: CALL_OW 2
35602: ST_TO_ADDR
35603: GO 35531
35605: POP
35606: POP
// if tmp then
35607: LD_VAR 0 19
35611: IFFALSE 35623
// f := tmp ;
35613: LD_ADDR_VAR 0 12
35617: PUSH
35618: LD_VAR 0 19
35622: ST_TO_ADDR
// end ; x := personel [ i ] ;
35623: LD_ADDR_VAR 0 13
35627: PUSH
35628: LD_VAR 0 6
35632: PUSH
35633: LD_VAR 0 8
35637: ARRAY
35638: ST_TO_ADDR
// if x = - 1 then
35639: LD_VAR 0 13
35643: PUSH
35644: LD_INT 1
35646: NEG
35647: EQUAL
35648: IFFALSE 35857
// begin for j in f do
35650: LD_ADDR_VAR 0 9
35654: PUSH
35655: LD_VAR 0 12
35659: PUSH
35660: FOR_IN
35661: IFFALSE 35853
// repeat InitHc ;
35663: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35667: LD_VAR 0 9
35671: PPUSH
35672: CALL_OW 266
35676: PUSH
35677: LD_INT 5
35679: EQUAL
35680: IFFALSE 35750
// begin if UnitsInside ( j ) < 3 then
35682: LD_VAR 0 9
35686: PPUSH
35687: CALL_OW 313
35691: PUSH
35692: LD_INT 3
35694: LESS
35695: IFFALSE 35731
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35697: LD_INT 0
35699: PPUSH
35700: LD_INT 5
35702: PUSH
35703: LD_INT 8
35705: PUSH
35706: LD_INT 9
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: LIST
35713: PUSH
35714: LD_VAR 0 17
35718: ARRAY
35719: PPUSH
35720: LD_VAR 0 4
35724: PPUSH
35725: CALL_OW 380
35729: GO 35748
// PrepareHuman ( false , i , skill ) ;
35731: LD_INT 0
35733: PPUSH
35734: LD_VAR 0 8
35738: PPUSH
35739: LD_VAR 0 4
35743: PPUSH
35744: CALL_OW 380
// end else
35748: GO 35767
// PrepareHuman ( false , i , skill ) ;
35750: LD_INT 0
35752: PPUSH
35753: LD_VAR 0 8
35757: PPUSH
35758: LD_VAR 0 4
35762: PPUSH
35763: CALL_OW 380
// un := CreateHuman ;
35767: LD_ADDR_VAR 0 14
35771: PUSH
35772: CALL_OW 44
35776: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35777: LD_ADDR_VAR 0 7
35781: PUSH
35782: LD_VAR 0 7
35786: PPUSH
35787: LD_INT 1
35789: PPUSH
35790: LD_VAR 0 14
35794: PPUSH
35795: CALL_OW 2
35799: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35800: LD_VAR 0 14
35804: PPUSH
35805: LD_VAR 0 9
35809: PPUSH
35810: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35814: LD_VAR 0 9
35818: PPUSH
35819: CALL_OW 313
35823: PUSH
35824: LD_INT 6
35826: EQUAL
35827: PUSH
35828: LD_VAR 0 9
35832: PPUSH
35833: CALL_OW 266
35837: PUSH
35838: LD_INT 32
35840: PUSH
35841: LD_INT 31
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: IN
35848: OR
35849: IFFALSE 35663
35851: GO 35660
35853: POP
35854: POP
// end else
35855: GO 36237
// for j = 1 to x do
35857: LD_ADDR_VAR 0 9
35861: PUSH
35862: DOUBLE
35863: LD_INT 1
35865: DEC
35866: ST_TO_ADDR
35867: LD_VAR 0 13
35871: PUSH
35872: FOR_TO
35873: IFFALSE 36235
// begin InitHc ;
35875: CALL_OW 19
// if not f then
35879: LD_VAR 0 12
35883: NOT
35884: IFFALSE 35973
// begin PrepareHuman ( false , i , skill ) ;
35886: LD_INT 0
35888: PPUSH
35889: LD_VAR 0 8
35893: PPUSH
35894: LD_VAR 0 4
35898: PPUSH
35899: CALL_OW 380
// un := CreateHuman ;
35903: LD_ADDR_VAR 0 14
35907: PUSH
35908: CALL_OW 44
35912: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35913: LD_ADDR_VAR 0 7
35917: PUSH
35918: LD_VAR 0 7
35922: PPUSH
35923: LD_INT 1
35925: PPUSH
35926: LD_VAR 0 14
35930: PPUSH
35931: CALL_OW 2
35935: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35936: LD_VAR 0 14
35940: PPUSH
35941: LD_VAR 0 1
35945: PPUSH
35946: CALL_OW 250
35950: PPUSH
35951: LD_VAR 0 1
35955: PPUSH
35956: CALL_OW 251
35960: PPUSH
35961: LD_INT 10
35963: PPUSH
35964: LD_INT 0
35966: PPUSH
35967: CALL_OW 50
// continue ;
35971: GO 35872
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35973: LD_VAR 0 12
35977: PUSH
35978: LD_INT 1
35980: ARRAY
35981: PPUSH
35982: CALL_OW 313
35986: PUSH
35987: LD_VAR 0 12
35991: PUSH
35992: LD_INT 1
35994: ARRAY
35995: PPUSH
35996: CALL_OW 266
36000: PUSH
36001: LD_INT 32
36003: PUSH
36004: LD_INT 31
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: IN
36011: AND
36012: PUSH
36013: LD_VAR 0 12
36017: PUSH
36018: LD_INT 1
36020: ARRAY
36021: PPUSH
36022: CALL_OW 313
36026: PUSH
36027: LD_INT 6
36029: EQUAL
36030: OR
36031: IFFALSE 36051
// f := Delete ( f , 1 ) ;
36033: LD_ADDR_VAR 0 12
36037: PUSH
36038: LD_VAR 0 12
36042: PPUSH
36043: LD_INT 1
36045: PPUSH
36046: CALL_OW 3
36050: ST_TO_ADDR
// if not f then
36051: LD_VAR 0 12
36055: NOT
36056: IFFALSE 36074
// begin x := x + 2 ;
36058: LD_ADDR_VAR 0 13
36062: PUSH
36063: LD_VAR 0 13
36067: PUSH
36068: LD_INT 2
36070: PLUS
36071: ST_TO_ADDR
// continue ;
36072: GO 35872
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36074: LD_VAR 0 12
36078: PUSH
36079: LD_INT 1
36081: ARRAY
36082: PPUSH
36083: CALL_OW 266
36087: PUSH
36088: LD_INT 5
36090: EQUAL
36091: IFFALSE 36165
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36093: LD_VAR 0 12
36097: PUSH
36098: LD_INT 1
36100: ARRAY
36101: PPUSH
36102: CALL_OW 313
36106: PUSH
36107: LD_INT 3
36109: LESS
36110: IFFALSE 36146
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36112: LD_INT 0
36114: PPUSH
36115: LD_INT 5
36117: PUSH
36118: LD_INT 8
36120: PUSH
36121: LD_INT 9
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: LIST
36128: PUSH
36129: LD_VAR 0 17
36133: ARRAY
36134: PPUSH
36135: LD_VAR 0 4
36139: PPUSH
36140: CALL_OW 380
36144: GO 36163
// PrepareHuman ( false , i , skill ) ;
36146: LD_INT 0
36148: PPUSH
36149: LD_VAR 0 8
36153: PPUSH
36154: LD_VAR 0 4
36158: PPUSH
36159: CALL_OW 380
// end else
36163: GO 36182
// PrepareHuman ( false , i , skill ) ;
36165: LD_INT 0
36167: PPUSH
36168: LD_VAR 0 8
36172: PPUSH
36173: LD_VAR 0 4
36177: PPUSH
36178: CALL_OW 380
// un := CreateHuman ;
36182: LD_ADDR_VAR 0 14
36186: PUSH
36187: CALL_OW 44
36191: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36192: LD_ADDR_VAR 0 7
36196: PUSH
36197: LD_VAR 0 7
36201: PPUSH
36202: LD_INT 1
36204: PPUSH
36205: LD_VAR 0 14
36209: PPUSH
36210: CALL_OW 2
36214: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36215: LD_VAR 0 14
36219: PPUSH
36220: LD_VAR 0 12
36224: PUSH
36225: LD_INT 1
36227: ARRAY
36228: PPUSH
36229: CALL_OW 52
// end ;
36233: GO 35872
36235: POP
36236: POP
// end ;
36237: GO 35174
36239: POP
36240: POP
// result := result ^ buildings ;
36241: LD_ADDR_VAR 0 7
36245: PUSH
36246: LD_VAR 0 7
36250: PUSH
36251: LD_VAR 0 18
36255: ADD
36256: ST_TO_ADDR
// end else
36257: GO 36400
// begin for i = 1 to personel do
36259: LD_ADDR_VAR 0 8
36263: PUSH
36264: DOUBLE
36265: LD_INT 1
36267: DEC
36268: ST_TO_ADDR
36269: LD_VAR 0 6
36273: PUSH
36274: FOR_TO
36275: IFFALSE 36398
// begin if i > 4 then
36277: LD_VAR 0 8
36281: PUSH
36282: LD_INT 4
36284: GREATER
36285: IFFALSE 36289
// break ;
36287: GO 36398
// x := personel [ i ] ;
36289: LD_ADDR_VAR 0 13
36293: PUSH
36294: LD_VAR 0 6
36298: PUSH
36299: LD_VAR 0 8
36303: ARRAY
36304: ST_TO_ADDR
// if x = - 1 then
36305: LD_VAR 0 13
36309: PUSH
36310: LD_INT 1
36312: NEG
36313: EQUAL
36314: IFFALSE 36318
// continue ;
36316: GO 36274
// PrepareHuman ( false , i , skill ) ;
36318: LD_INT 0
36320: PPUSH
36321: LD_VAR 0 8
36325: PPUSH
36326: LD_VAR 0 4
36330: PPUSH
36331: CALL_OW 380
// un := CreateHuman ;
36335: LD_ADDR_VAR 0 14
36339: PUSH
36340: CALL_OW 44
36344: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36345: LD_VAR 0 14
36349: PPUSH
36350: LD_VAR 0 1
36354: PPUSH
36355: CALL_OW 250
36359: PPUSH
36360: LD_VAR 0 1
36364: PPUSH
36365: CALL_OW 251
36369: PPUSH
36370: LD_INT 10
36372: PPUSH
36373: LD_INT 0
36375: PPUSH
36376: CALL_OW 50
// result := result ^ un ;
36380: LD_ADDR_VAR 0 7
36384: PUSH
36385: LD_VAR 0 7
36389: PUSH
36390: LD_VAR 0 14
36394: ADD
36395: ST_TO_ADDR
// end ;
36396: GO 36274
36398: POP
36399: POP
// end ; end ;
36400: LD_VAR 0 7
36404: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36405: LD_INT 0
36407: PPUSH
36408: PPUSH
36409: PPUSH
36410: PPUSH
36411: PPUSH
36412: PPUSH
36413: PPUSH
36414: PPUSH
36415: PPUSH
36416: PPUSH
36417: PPUSH
36418: PPUSH
36419: PPUSH
36420: PPUSH
36421: PPUSH
36422: PPUSH
// result := false ;
36423: LD_ADDR_VAR 0 3
36427: PUSH
36428: LD_INT 0
36430: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36431: LD_VAR 0 1
36435: NOT
36436: PUSH
36437: LD_VAR 0 1
36441: PPUSH
36442: CALL_OW 266
36446: PUSH
36447: LD_INT 32
36449: PUSH
36450: LD_INT 33
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: IN
36457: NOT
36458: OR
36459: IFFALSE 36463
// exit ;
36461: GO 37599
// nat := GetNation ( tower ) ;
36463: LD_ADDR_VAR 0 12
36467: PUSH
36468: LD_VAR 0 1
36472: PPUSH
36473: CALL_OW 248
36477: ST_TO_ADDR
// side := GetSide ( tower ) ;
36478: LD_ADDR_VAR 0 16
36482: PUSH
36483: LD_VAR 0 1
36487: PPUSH
36488: CALL_OW 255
36492: ST_TO_ADDR
// x := GetX ( tower ) ;
36493: LD_ADDR_VAR 0 10
36497: PUSH
36498: LD_VAR 0 1
36502: PPUSH
36503: CALL_OW 250
36507: ST_TO_ADDR
// y := GetY ( tower ) ;
36508: LD_ADDR_VAR 0 11
36512: PUSH
36513: LD_VAR 0 1
36517: PPUSH
36518: CALL_OW 251
36522: ST_TO_ADDR
// if not x or not y then
36523: LD_VAR 0 10
36527: NOT
36528: PUSH
36529: LD_VAR 0 11
36533: NOT
36534: OR
36535: IFFALSE 36539
// exit ;
36537: GO 37599
// weapon := 0 ;
36539: LD_ADDR_VAR 0 18
36543: PUSH
36544: LD_INT 0
36546: ST_TO_ADDR
// fac_list := [ ] ;
36547: LD_ADDR_VAR 0 17
36551: PUSH
36552: EMPTY
36553: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
36554: LD_ADDR_VAR 0 6
36558: PUSH
36559: LD_VAR 0 1
36563: PPUSH
36564: CALL_OW 274
36568: PPUSH
36569: LD_VAR 0 2
36573: PPUSH
36574: CALL 34177 0 2
36578: PPUSH
36579: LD_INT 30
36581: PUSH
36582: LD_INT 3
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PPUSH
36589: CALL_OW 72
36593: ST_TO_ADDR
// if not factories then
36594: LD_VAR 0 6
36598: NOT
36599: IFFALSE 36603
// exit ;
36601: GO 37599
// for i in factories do
36603: LD_ADDR_VAR 0 8
36607: PUSH
36608: LD_VAR 0 6
36612: PUSH
36613: FOR_IN
36614: IFFALSE 36639
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36616: LD_ADDR_VAR 0 17
36620: PUSH
36621: LD_VAR 0 17
36625: PUSH
36626: LD_VAR 0 8
36630: PPUSH
36631: CALL_OW 478
36635: UNION
36636: ST_TO_ADDR
36637: GO 36613
36639: POP
36640: POP
// if not fac_list then
36641: LD_VAR 0 17
36645: NOT
36646: IFFALSE 36650
// exit ;
36648: GO 37599
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36650: LD_ADDR_VAR 0 5
36654: PUSH
36655: LD_INT 4
36657: PUSH
36658: LD_INT 5
36660: PUSH
36661: LD_INT 9
36663: PUSH
36664: LD_INT 10
36666: PUSH
36667: LD_INT 6
36669: PUSH
36670: LD_INT 7
36672: PUSH
36673: LD_INT 11
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 27
36687: PUSH
36688: LD_INT 28
36690: PUSH
36691: LD_INT 26
36693: PUSH
36694: LD_INT 30
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 43
36705: PUSH
36706: LD_INT 44
36708: PUSH
36709: LD_INT 46
36711: PUSH
36712: LD_INT 45
36714: PUSH
36715: LD_INT 47
36717: PUSH
36718: LD_INT 49
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: LIST
36733: PUSH
36734: LD_VAR 0 12
36738: ARRAY
36739: ST_TO_ADDR
// for i in list do
36740: LD_ADDR_VAR 0 8
36744: PUSH
36745: LD_VAR 0 5
36749: PUSH
36750: FOR_IN
36751: IFFALSE 36784
// if not i in fac_list then
36753: LD_VAR 0 8
36757: PUSH
36758: LD_VAR 0 17
36762: IN
36763: NOT
36764: IFFALSE 36782
// list := list diff i ;
36766: LD_ADDR_VAR 0 5
36770: PUSH
36771: LD_VAR 0 5
36775: PUSH
36776: LD_VAR 0 8
36780: DIFF
36781: ST_TO_ADDR
36782: GO 36750
36784: POP
36785: POP
// if not list then
36786: LD_VAR 0 5
36790: NOT
36791: IFFALSE 36795
// exit ;
36793: GO 37599
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36795: LD_VAR 0 12
36799: PUSH
36800: LD_INT 3
36802: EQUAL
36803: PUSH
36804: LD_INT 49
36806: PUSH
36807: LD_VAR 0 5
36811: IN
36812: AND
36813: PUSH
36814: LD_INT 31
36816: PPUSH
36817: LD_VAR 0 16
36821: PPUSH
36822: CALL_OW 321
36826: PUSH
36827: LD_INT 2
36829: EQUAL
36830: AND
36831: IFFALSE 36891
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36833: LD_INT 22
36835: PUSH
36836: LD_VAR 0 16
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 35
36847: PUSH
36848: LD_INT 49
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 91
36857: PUSH
36858: LD_VAR 0 1
36862: PUSH
36863: LD_INT 10
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: LIST
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: LIST
36875: PPUSH
36876: CALL_OW 69
36880: NOT
36881: IFFALSE 36891
// weapon := ru_time_lapser ;
36883: LD_ADDR_VAR 0 18
36887: PUSH
36888: LD_INT 49
36890: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36891: LD_VAR 0 12
36895: PUSH
36896: LD_INT 1
36898: PUSH
36899: LD_INT 2
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: IN
36906: PUSH
36907: LD_INT 11
36909: PUSH
36910: LD_VAR 0 5
36914: IN
36915: PUSH
36916: LD_INT 30
36918: PUSH
36919: LD_VAR 0 5
36923: IN
36924: OR
36925: AND
36926: PUSH
36927: LD_INT 6
36929: PPUSH
36930: LD_VAR 0 16
36934: PPUSH
36935: CALL_OW 321
36939: PUSH
36940: LD_INT 2
36942: EQUAL
36943: AND
36944: IFFALSE 37109
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36946: LD_INT 22
36948: PUSH
36949: LD_VAR 0 16
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 2
36960: PUSH
36961: LD_INT 35
36963: PUSH
36964: LD_INT 11
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 35
36973: PUSH
36974: LD_INT 30
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 91
36988: PUSH
36989: LD_VAR 0 1
36993: PUSH
36994: LD_INT 18
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: LIST
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: LIST
37006: PPUSH
37007: CALL_OW 69
37011: NOT
37012: PUSH
37013: LD_INT 22
37015: PUSH
37016: LD_VAR 0 16
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 2
37027: PUSH
37028: LD_INT 30
37030: PUSH
37031: LD_INT 32
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 30
37040: PUSH
37041: LD_INT 33
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 91
37055: PUSH
37056: LD_VAR 0 1
37060: PUSH
37061: LD_INT 12
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: LIST
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: LIST
37073: PUSH
37074: EMPTY
37075: LIST
37076: PPUSH
37077: CALL_OW 69
37081: PUSH
37082: LD_INT 2
37084: GREATER
37085: AND
37086: IFFALSE 37109
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37088: LD_ADDR_VAR 0 18
37092: PUSH
37093: LD_INT 11
37095: PUSH
37096: LD_INT 30
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_VAR 0 12
37107: ARRAY
37108: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37109: LD_VAR 0 18
37113: NOT
37114: PUSH
37115: LD_INT 40
37117: PPUSH
37118: LD_VAR 0 16
37122: PPUSH
37123: CALL_OW 321
37127: PUSH
37128: LD_INT 2
37130: EQUAL
37131: AND
37132: PUSH
37133: LD_INT 7
37135: PUSH
37136: LD_VAR 0 5
37140: IN
37141: PUSH
37142: LD_INT 28
37144: PUSH
37145: LD_VAR 0 5
37149: IN
37150: OR
37151: PUSH
37152: LD_INT 45
37154: PUSH
37155: LD_VAR 0 5
37159: IN
37160: OR
37161: AND
37162: IFFALSE 37416
// begin hex := GetHexInfo ( x , y ) ;
37164: LD_ADDR_VAR 0 4
37168: PUSH
37169: LD_VAR 0 10
37173: PPUSH
37174: LD_VAR 0 11
37178: PPUSH
37179: CALL_OW 546
37183: ST_TO_ADDR
// if hex [ 1 ] then
37184: LD_VAR 0 4
37188: PUSH
37189: LD_INT 1
37191: ARRAY
37192: IFFALSE 37196
// exit ;
37194: GO 37599
// height := hex [ 2 ] ;
37196: LD_ADDR_VAR 0 15
37200: PUSH
37201: LD_VAR 0 4
37205: PUSH
37206: LD_INT 2
37208: ARRAY
37209: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37210: LD_ADDR_VAR 0 14
37214: PUSH
37215: LD_INT 0
37217: PUSH
37218: LD_INT 2
37220: PUSH
37221: LD_INT 3
37223: PUSH
37224: LD_INT 5
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: ST_TO_ADDR
// for i in tmp do
37233: LD_ADDR_VAR 0 8
37237: PUSH
37238: LD_VAR 0 14
37242: PUSH
37243: FOR_IN
37244: IFFALSE 37414
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37246: LD_ADDR_VAR 0 9
37250: PUSH
37251: LD_VAR 0 10
37255: PPUSH
37256: LD_VAR 0 8
37260: PPUSH
37261: LD_INT 5
37263: PPUSH
37264: CALL_OW 272
37268: PUSH
37269: LD_VAR 0 11
37273: PPUSH
37274: LD_VAR 0 8
37278: PPUSH
37279: LD_INT 5
37281: PPUSH
37282: CALL_OW 273
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37291: LD_VAR 0 9
37295: PUSH
37296: LD_INT 1
37298: ARRAY
37299: PPUSH
37300: LD_VAR 0 9
37304: PUSH
37305: LD_INT 2
37307: ARRAY
37308: PPUSH
37309: CALL_OW 488
37313: IFFALSE 37412
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37315: LD_ADDR_VAR 0 4
37319: PUSH
37320: LD_VAR 0 9
37324: PUSH
37325: LD_INT 1
37327: ARRAY
37328: PPUSH
37329: LD_VAR 0 9
37333: PUSH
37334: LD_INT 2
37336: ARRAY
37337: PPUSH
37338: CALL_OW 546
37342: ST_TO_ADDR
// if hex [ 1 ] then
37343: LD_VAR 0 4
37347: PUSH
37348: LD_INT 1
37350: ARRAY
37351: IFFALSE 37355
// continue ;
37353: GO 37243
// h := hex [ 2 ] ;
37355: LD_ADDR_VAR 0 13
37359: PUSH
37360: LD_VAR 0 4
37364: PUSH
37365: LD_INT 2
37367: ARRAY
37368: ST_TO_ADDR
// if h + 7 < height then
37369: LD_VAR 0 13
37373: PUSH
37374: LD_INT 7
37376: PLUS
37377: PUSH
37378: LD_VAR 0 15
37382: LESS
37383: IFFALSE 37412
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37385: LD_ADDR_VAR 0 18
37389: PUSH
37390: LD_INT 7
37392: PUSH
37393: LD_INT 28
37395: PUSH
37396: LD_INT 45
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: LIST
37403: PUSH
37404: LD_VAR 0 12
37408: ARRAY
37409: ST_TO_ADDR
// break ;
37410: GO 37414
// end ; end ; end ;
37412: GO 37243
37414: POP
37415: POP
// end ; if not weapon then
37416: LD_VAR 0 18
37420: NOT
37421: IFFALSE 37481
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37423: LD_ADDR_VAR 0 5
37427: PUSH
37428: LD_VAR 0 5
37432: PUSH
37433: LD_INT 11
37435: PUSH
37436: LD_INT 30
37438: PUSH
37439: LD_INT 49
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: LIST
37446: DIFF
37447: ST_TO_ADDR
// if not list then
37448: LD_VAR 0 5
37452: NOT
37453: IFFALSE 37457
// exit ;
37455: GO 37599
// weapon := list [ rand ( 1 , list ) ] ;
37457: LD_ADDR_VAR 0 18
37461: PUSH
37462: LD_VAR 0 5
37466: PUSH
37467: LD_INT 1
37469: PPUSH
37470: LD_VAR 0 5
37474: PPUSH
37475: CALL_OW 12
37479: ARRAY
37480: ST_TO_ADDR
// end ; if weapon then
37481: LD_VAR 0 18
37485: IFFALSE 37599
// begin tmp := CostOfWeapon ( weapon ) ;
37487: LD_ADDR_VAR 0 14
37491: PUSH
37492: LD_VAR 0 18
37496: PPUSH
37497: CALL_OW 451
37501: ST_TO_ADDR
// j := GetBase ( tower ) ;
37502: LD_ADDR_VAR 0 9
37506: PUSH
37507: LD_VAR 0 1
37511: PPUSH
37512: CALL_OW 274
37516: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37517: LD_VAR 0 9
37521: PPUSH
37522: LD_INT 1
37524: PPUSH
37525: CALL_OW 275
37529: PUSH
37530: LD_VAR 0 14
37534: PUSH
37535: LD_INT 1
37537: ARRAY
37538: GREATEREQUAL
37539: PUSH
37540: LD_VAR 0 9
37544: PPUSH
37545: LD_INT 2
37547: PPUSH
37548: CALL_OW 275
37552: PUSH
37553: LD_VAR 0 14
37557: PUSH
37558: LD_INT 2
37560: ARRAY
37561: GREATEREQUAL
37562: AND
37563: PUSH
37564: LD_VAR 0 9
37568: PPUSH
37569: LD_INT 3
37571: PPUSH
37572: CALL_OW 275
37576: PUSH
37577: LD_VAR 0 14
37581: PUSH
37582: LD_INT 3
37584: ARRAY
37585: GREATEREQUAL
37586: AND
37587: IFFALSE 37599
// result := weapon ;
37589: LD_ADDR_VAR 0 3
37593: PUSH
37594: LD_VAR 0 18
37598: ST_TO_ADDR
// end ; end ;
37599: LD_VAR 0 3
37603: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37604: LD_INT 0
37606: PPUSH
37607: PPUSH
// result := true ;
37608: LD_ADDR_VAR 0 3
37612: PUSH
37613: LD_INT 1
37615: ST_TO_ADDR
// if array1 = array2 then
37616: LD_VAR 0 1
37620: PUSH
37621: LD_VAR 0 2
37625: EQUAL
37626: IFFALSE 37686
// begin for i = 1 to array1 do
37628: LD_ADDR_VAR 0 4
37632: PUSH
37633: DOUBLE
37634: LD_INT 1
37636: DEC
37637: ST_TO_ADDR
37638: LD_VAR 0 1
37642: PUSH
37643: FOR_TO
37644: IFFALSE 37682
// if array1 [ i ] <> array2 [ i ] then
37646: LD_VAR 0 1
37650: PUSH
37651: LD_VAR 0 4
37655: ARRAY
37656: PUSH
37657: LD_VAR 0 2
37661: PUSH
37662: LD_VAR 0 4
37666: ARRAY
37667: NONEQUAL
37668: IFFALSE 37680
// begin result := false ;
37670: LD_ADDR_VAR 0 3
37674: PUSH
37675: LD_INT 0
37677: ST_TO_ADDR
// break ;
37678: GO 37682
// end ;
37680: GO 37643
37682: POP
37683: POP
// end else
37684: GO 37694
// result := false ;
37686: LD_ADDR_VAR 0 3
37690: PUSH
37691: LD_INT 0
37693: ST_TO_ADDR
// end ;
37694: LD_VAR 0 3
37698: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37699: LD_INT 0
37701: PPUSH
37702: PPUSH
37703: PPUSH
// pom := GetBase ( fac ) ;
37704: LD_ADDR_VAR 0 5
37708: PUSH
37709: LD_VAR 0 1
37713: PPUSH
37714: CALL_OW 274
37718: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37719: LD_ADDR_VAR 0 4
37723: PUSH
37724: LD_VAR 0 2
37728: PUSH
37729: LD_INT 1
37731: ARRAY
37732: PPUSH
37733: LD_VAR 0 2
37737: PUSH
37738: LD_INT 2
37740: ARRAY
37741: PPUSH
37742: LD_VAR 0 2
37746: PUSH
37747: LD_INT 3
37749: ARRAY
37750: PPUSH
37751: LD_VAR 0 2
37755: PUSH
37756: LD_INT 4
37758: ARRAY
37759: PPUSH
37760: CALL_OW 449
37764: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37765: LD_ADDR_VAR 0 3
37769: PUSH
37770: LD_VAR 0 5
37774: PPUSH
37775: LD_INT 1
37777: PPUSH
37778: CALL_OW 275
37782: PUSH
37783: LD_VAR 0 4
37787: PUSH
37788: LD_INT 1
37790: ARRAY
37791: GREATEREQUAL
37792: PUSH
37793: LD_VAR 0 5
37797: PPUSH
37798: LD_INT 2
37800: PPUSH
37801: CALL_OW 275
37805: PUSH
37806: LD_VAR 0 4
37810: PUSH
37811: LD_INT 2
37813: ARRAY
37814: GREATEREQUAL
37815: AND
37816: PUSH
37817: LD_VAR 0 5
37821: PPUSH
37822: LD_INT 3
37824: PPUSH
37825: CALL_OW 275
37829: PUSH
37830: LD_VAR 0 4
37834: PUSH
37835: LD_INT 3
37837: ARRAY
37838: GREATEREQUAL
37839: AND
37840: ST_TO_ADDR
// end ;
37841: LD_VAR 0 3
37845: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37846: LD_INT 0
37848: PPUSH
37849: PPUSH
37850: PPUSH
37851: PPUSH
// pom := GetBase ( building ) ;
37852: LD_ADDR_VAR 0 3
37856: PUSH
37857: LD_VAR 0 1
37861: PPUSH
37862: CALL_OW 274
37866: ST_TO_ADDR
// if not pom then
37867: LD_VAR 0 3
37871: NOT
37872: IFFALSE 37876
// exit ;
37874: GO 38046
// btype := GetBType ( building ) ;
37876: LD_ADDR_VAR 0 5
37880: PUSH
37881: LD_VAR 0 1
37885: PPUSH
37886: CALL_OW 266
37890: ST_TO_ADDR
// if btype = b_armoury then
37891: LD_VAR 0 5
37895: PUSH
37896: LD_INT 4
37898: EQUAL
37899: IFFALSE 37909
// btype := b_barracks ;
37901: LD_ADDR_VAR 0 5
37905: PUSH
37906: LD_INT 5
37908: ST_TO_ADDR
// if btype = b_depot then
37909: LD_VAR 0 5
37913: PUSH
37914: LD_INT 0
37916: EQUAL
37917: IFFALSE 37927
// btype := b_warehouse ;
37919: LD_ADDR_VAR 0 5
37923: PUSH
37924: LD_INT 1
37926: ST_TO_ADDR
// if btype = b_workshop then
37927: LD_VAR 0 5
37931: PUSH
37932: LD_INT 2
37934: EQUAL
37935: IFFALSE 37945
// btype := b_factory ;
37937: LD_ADDR_VAR 0 5
37941: PUSH
37942: LD_INT 3
37944: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37945: LD_ADDR_VAR 0 4
37949: PUSH
37950: LD_VAR 0 5
37954: PPUSH
37955: LD_VAR 0 1
37959: PPUSH
37960: CALL_OW 248
37964: PPUSH
37965: CALL_OW 450
37969: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37970: LD_ADDR_VAR 0 2
37974: PUSH
37975: LD_VAR 0 3
37979: PPUSH
37980: LD_INT 1
37982: PPUSH
37983: CALL_OW 275
37987: PUSH
37988: LD_VAR 0 4
37992: PUSH
37993: LD_INT 1
37995: ARRAY
37996: GREATEREQUAL
37997: PUSH
37998: LD_VAR 0 3
38002: PPUSH
38003: LD_INT 2
38005: PPUSH
38006: CALL_OW 275
38010: PUSH
38011: LD_VAR 0 4
38015: PUSH
38016: LD_INT 2
38018: ARRAY
38019: GREATEREQUAL
38020: AND
38021: PUSH
38022: LD_VAR 0 3
38026: PPUSH
38027: LD_INT 3
38029: PPUSH
38030: CALL_OW 275
38034: PUSH
38035: LD_VAR 0 4
38039: PUSH
38040: LD_INT 3
38042: ARRAY
38043: GREATEREQUAL
38044: AND
38045: ST_TO_ADDR
// end ;
38046: LD_VAR 0 2
38050: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38051: LD_INT 0
38053: PPUSH
38054: PPUSH
38055: PPUSH
// pom := GetBase ( building ) ;
38056: LD_ADDR_VAR 0 4
38060: PUSH
38061: LD_VAR 0 1
38065: PPUSH
38066: CALL_OW 274
38070: ST_TO_ADDR
// if not pom then
38071: LD_VAR 0 4
38075: NOT
38076: IFFALSE 38080
// exit ;
38078: GO 38181
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38080: LD_ADDR_VAR 0 5
38084: PUSH
38085: LD_VAR 0 2
38089: PPUSH
38090: LD_VAR 0 1
38094: PPUSH
38095: CALL_OW 248
38099: PPUSH
38100: CALL_OW 450
38104: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38105: LD_ADDR_VAR 0 3
38109: PUSH
38110: LD_VAR 0 4
38114: PPUSH
38115: LD_INT 1
38117: PPUSH
38118: CALL_OW 275
38122: PUSH
38123: LD_VAR 0 5
38127: PUSH
38128: LD_INT 1
38130: ARRAY
38131: GREATEREQUAL
38132: PUSH
38133: LD_VAR 0 4
38137: PPUSH
38138: LD_INT 2
38140: PPUSH
38141: CALL_OW 275
38145: PUSH
38146: LD_VAR 0 5
38150: PUSH
38151: LD_INT 2
38153: ARRAY
38154: GREATEREQUAL
38155: AND
38156: PUSH
38157: LD_VAR 0 4
38161: PPUSH
38162: LD_INT 3
38164: PPUSH
38165: CALL_OW 275
38169: PUSH
38170: LD_VAR 0 5
38174: PUSH
38175: LD_INT 3
38177: ARRAY
38178: GREATEREQUAL
38179: AND
38180: ST_TO_ADDR
// end ;
38181: LD_VAR 0 3
38185: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
38186: LD_INT 0
38188: PPUSH
38189: PPUSH
38190: PPUSH
38191: PPUSH
38192: PPUSH
38193: PPUSH
38194: PPUSH
38195: PPUSH
38196: PPUSH
38197: PPUSH
// result := false ;
38198: LD_ADDR_VAR 0 6
38202: PUSH
38203: LD_INT 0
38205: ST_TO_ADDR
// if not base or not btype or not x or not y then
38206: LD_VAR 0 1
38210: NOT
38211: PUSH
38212: LD_VAR 0 2
38216: NOT
38217: OR
38218: PUSH
38219: LD_VAR 0 3
38223: NOT
38224: OR
38225: PUSH
38226: LD_VAR 0 4
38230: NOT
38231: OR
38232: IFFALSE 38236
// exit ;
38234: GO 38845
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
38236: LD_ADDR_VAR 0 12
38240: PUSH
38241: LD_VAR 0 2
38245: PPUSH
38246: LD_VAR 0 3
38250: PPUSH
38251: LD_VAR 0 4
38255: PPUSH
38256: LD_VAR 0 5
38260: PPUSH
38261: LD_VAR 0 1
38265: PUSH
38266: LD_INT 1
38268: ARRAY
38269: PPUSH
38270: CALL_OW 248
38274: PPUSH
38275: LD_INT 0
38277: PPUSH
38278: CALL 39682 0 6
38282: ST_TO_ADDR
// if not hexes then
38283: LD_VAR 0 12
38287: NOT
38288: IFFALSE 38292
// exit ;
38290: GO 38845
// for i = 1 to hexes do
38292: LD_ADDR_VAR 0 7
38296: PUSH
38297: DOUBLE
38298: LD_INT 1
38300: DEC
38301: ST_TO_ADDR
38302: LD_VAR 0 12
38306: PUSH
38307: FOR_TO
38308: IFFALSE 38843
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38310: LD_ADDR_VAR 0 11
38314: PUSH
38315: LD_VAR 0 12
38319: PUSH
38320: LD_VAR 0 7
38324: ARRAY
38325: PUSH
38326: LD_INT 1
38328: ARRAY
38329: PPUSH
38330: LD_VAR 0 12
38334: PUSH
38335: LD_VAR 0 7
38339: ARRAY
38340: PUSH
38341: LD_INT 2
38343: ARRAY
38344: PPUSH
38345: CALL_OW 428
38349: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38350: LD_VAR 0 12
38354: PUSH
38355: LD_VAR 0 7
38359: ARRAY
38360: PUSH
38361: LD_INT 1
38363: ARRAY
38364: PPUSH
38365: LD_VAR 0 12
38369: PUSH
38370: LD_VAR 0 7
38374: ARRAY
38375: PUSH
38376: LD_INT 2
38378: ARRAY
38379: PPUSH
38380: CALL_OW 351
38384: PUSH
38385: LD_VAR 0 12
38389: PUSH
38390: LD_VAR 0 7
38394: ARRAY
38395: PUSH
38396: LD_INT 1
38398: ARRAY
38399: PPUSH
38400: LD_VAR 0 12
38404: PUSH
38405: LD_VAR 0 7
38409: ARRAY
38410: PUSH
38411: LD_INT 2
38413: ARRAY
38414: PPUSH
38415: CALL_OW 488
38419: NOT
38420: OR
38421: PUSH
38422: LD_VAR 0 11
38426: PPUSH
38427: CALL_OW 247
38431: PUSH
38432: LD_INT 3
38434: EQUAL
38435: OR
38436: IFFALSE 38442
// exit ;
38438: POP
38439: POP
38440: GO 38845
// if not tmp or not tmp in base then
38442: LD_VAR 0 11
38446: NOT
38447: PUSH
38448: LD_VAR 0 11
38452: PUSH
38453: LD_VAR 0 1
38457: IN
38458: NOT
38459: OR
38460: IFFALSE 38464
// continue ;
38462: GO 38307
// result := true ;
38464: LD_ADDR_VAR 0 6
38468: PUSH
38469: LD_INT 1
38471: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38472: LD_ADDR_VAR 0 15
38476: PUSH
38477: LD_VAR 0 1
38481: PPUSH
38482: LD_INT 22
38484: PUSH
38485: LD_VAR 0 11
38489: PPUSH
38490: CALL_OW 255
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 2
38501: PUSH
38502: LD_INT 30
38504: PUSH
38505: LD_INT 0
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 30
38514: PUSH
38515: LD_INT 1
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: LIST
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PPUSH
38531: CALL_OW 72
38535: ST_TO_ADDR
// if dep then
38536: LD_VAR 0 15
38540: IFFALSE 38676
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38542: LD_ADDR_VAR 0 14
38546: PUSH
38547: LD_VAR 0 15
38551: PUSH
38552: LD_INT 1
38554: ARRAY
38555: PPUSH
38556: CALL_OW 250
38560: PPUSH
38561: LD_VAR 0 15
38565: PUSH
38566: LD_INT 1
38568: ARRAY
38569: PPUSH
38570: CALL_OW 254
38574: PPUSH
38575: LD_INT 5
38577: PPUSH
38578: CALL_OW 272
38582: PUSH
38583: LD_VAR 0 15
38587: PUSH
38588: LD_INT 1
38590: ARRAY
38591: PPUSH
38592: CALL_OW 251
38596: PPUSH
38597: LD_VAR 0 15
38601: PUSH
38602: LD_INT 1
38604: ARRAY
38605: PPUSH
38606: CALL_OW 254
38610: PPUSH
38611: LD_INT 5
38613: PPUSH
38614: CALL_OW 273
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38623: LD_VAR 0 14
38627: PUSH
38628: LD_INT 1
38630: ARRAY
38631: PPUSH
38632: LD_VAR 0 14
38636: PUSH
38637: LD_INT 2
38639: ARRAY
38640: PPUSH
38641: CALL_OW 488
38645: IFFALSE 38676
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38647: LD_VAR 0 11
38651: PPUSH
38652: LD_VAR 0 14
38656: PUSH
38657: LD_INT 1
38659: ARRAY
38660: PPUSH
38661: LD_VAR 0 14
38665: PUSH
38666: LD_INT 2
38668: ARRAY
38669: PPUSH
38670: CALL_OW 111
// continue ;
38674: GO 38307
// end ; end ; r := GetDir ( tmp ) ;
38676: LD_ADDR_VAR 0 13
38680: PUSH
38681: LD_VAR 0 11
38685: PPUSH
38686: CALL_OW 254
38690: ST_TO_ADDR
// if r = 5 then
38691: LD_VAR 0 13
38695: PUSH
38696: LD_INT 5
38698: EQUAL
38699: IFFALSE 38709
// r := 0 ;
38701: LD_ADDR_VAR 0 13
38705: PUSH
38706: LD_INT 0
38708: ST_TO_ADDR
// for j = r to 5 do
38709: LD_ADDR_VAR 0 8
38713: PUSH
38714: DOUBLE
38715: LD_VAR 0 13
38719: DEC
38720: ST_TO_ADDR
38721: LD_INT 5
38723: PUSH
38724: FOR_TO
38725: IFFALSE 38839
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38727: LD_ADDR_VAR 0 9
38731: PUSH
38732: LD_VAR 0 11
38736: PPUSH
38737: CALL_OW 250
38741: PPUSH
38742: LD_VAR 0 8
38746: PPUSH
38747: LD_INT 2
38749: PPUSH
38750: CALL_OW 272
38754: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38755: LD_ADDR_VAR 0 10
38759: PUSH
38760: LD_VAR 0 11
38764: PPUSH
38765: CALL_OW 251
38769: PPUSH
38770: LD_VAR 0 8
38774: PPUSH
38775: LD_INT 2
38777: PPUSH
38778: CALL_OW 273
38782: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38783: LD_VAR 0 9
38787: PPUSH
38788: LD_VAR 0 10
38792: PPUSH
38793: CALL_OW 488
38797: PUSH
38798: LD_VAR 0 9
38802: PPUSH
38803: LD_VAR 0 10
38807: PPUSH
38808: CALL_OW 428
38812: NOT
38813: AND
38814: IFFALSE 38837
// begin ComMoveXY ( tmp , _x , _y ) ;
38816: LD_VAR 0 11
38820: PPUSH
38821: LD_VAR 0 9
38825: PPUSH
38826: LD_VAR 0 10
38830: PPUSH
38831: CALL_OW 111
// break ;
38835: GO 38839
// end ; end ;
38837: GO 38724
38839: POP
38840: POP
// end ;
38841: GO 38307
38843: POP
38844: POP
// end ;
38845: LD_VAR 0 6
38849: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
38850: LD_INT 0
38852: PPUSH
38853: PPUSH
38854: PPUSH
38855: PPUSH
38856: PPUSH
38857: PPUSH
38858: PPUSH
38859: PPUSH
38860: PPUSH
38861: PPUSH
// result := false ;
38862: LD_ADDR_VAR 0 6
38866: PUSH
38867: LD_INT 0
38869: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38870: LD_VAR 0 1
38874: NOT
38875: PUSH
38876: LD_VAR 0 1
38880: PPUSH
38881: CALL_OW 266
38885: PUSH
38886: LD_INT 0
38888: PUSH
38889: LD_INT 1
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: IN
38896: NOT
38897: OR
38898: PUSH
38899: LD_VAR 0 2
38903: NOT
38904: OR
38905: PUSH
38906: LD_VAR 0 5
38910: PUSH
38911: LD_INT 0
38913: PUSH
38914: LD_INT 1
38916: PUSH
38917: LD_INT 2
38919: PUSH
38920: LD_INT 3
38922: PUSH
38923: LD_INT 4
38925: PUSH
38926: LD_INT 5
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: IN
38937: NOT
38938: OR
38939: PUSH
38940: LD_VAR 0 3
38944: PPUSH
38945: LD_VAR 0 4
38949: PPUSH
38950: CALL_OW 488
38954: NOT
38955: OR
38956: IFFALSE 38960
// exit ;
38958: GO 39677
// pom := GetBase ( depot ) ;
38960: LD_ADDR_VAR 0 10
38964: PUSH
38965: LD_VAR 0 1
38969: PPUSH
38970: CALL_OW 274
38974: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38975: LD_ADDR_VAR 0 11
38979: PUSH
38980: LD_VAR 0 2
38984: PPUSH
38985: LD_VAR 0 1
38989: PPUSH
38990: CALL_OW 248
38994: PPUSH
38995: CALL_OW 450
38999: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39000: LD_VAR 0 10
39004: PPUSH
39005: LD_INT 1
39007: PPUSH
39008: CALL_OW 275
39012: PUSH
39013: LD_VAR 0 11
39017: PUSH
39018: LD_INT 1
39020: ARRAY
39021: GREATEREQUAL
39022: PUSH
39023: LD_VAR 0 10
39027: PPUSH
39028: LD_INT 2
39030: PPUSH
39031: CALL_OW 275
39035: PUSH
39036: LD_VAR 0 11
39040: PUSH
39041: LD_INT 2
39043: ARRAY
39044: GREATEREQUAL
39045: AND
39046: PUSH
39047: LD_VAR 0 10
39051: PPUSH
39052: LD_INT 3
39054: PPUSH
39055: CALL_OW 275
39059: PUSH
39060: LD_VAR 0 11
39064: PUSH
39065: LD_INT 3
39067: ARRAY
39068: GREATEREQUAL
39069: AND
39070: NOT
39071: IFFALSE 39075
// exit ;
39073: GO 39677
// if GetBType ( depot ) = b_depot then
39075: LD_VAR 0 1
39079: PPUSH
39080: CALL_OW 266
39084: PUSH
39085: LD_INT 0
39087: EQUAL
39088: IFFALSE 39100
// dist := 28 else
39090: LD_ADDR_VAR 0 14
39094: PUSH
39095: LD_INT 28
39097: ST_TO_ADDR
39098: GO 39108
// dist := 36 ;
39100: LD_ADDR_VAR 0 14
39104: PUSH
39105: LD_INT 36
39107: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39108: LD_VAR 0 1
39112: PPUSH
39113: LD_VAR 0 3
39117: PPUSH
39118: LD_VAR 0 4
39122: PPUSH
39123: CALL_OW 297
39127: PUSH
39128: LD_VAR 0 14
39132: GREATER
39133: IFFALSE 39137
// exit ;
39135: GO 39677
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39137: LD_ADDR_VAR 0 12
39141: PUSH
39142: LD_VAR 0 2
39146: PPUSH
39147: LD_VAR 0 3
39151: PPUSH
39152: LD_VAR 0 4
39156: PPUSH
39157: LD_VAR 0 5
39161: PPUSH
39162: LD_VAR 0 1
39166: PPUSH
39167: CALL_OW 248
39171: PPUSH
39172: LD_INT 0
39174: PPUSH
39175: CALL 39682 0 6
39179: ST_TO_ADDR
// if not hexes then
39180: LD_VAR 0 12
39184: NOT
39185: IFFALSE 39189
// exit ;
39187: GO 39677
// hex := GetHexInfo ( x , y ) ;
39189: LD_ADDR_VAR 0 15
39193: PUSH
39194: LD_VAR 0 3
39198: PPUSH
39199: LD_VAR 0 4
39203: PPUSH
39204: CALL_OW 546
39208: ST_TO_ADDR
// if hex [ 1 ] then
39209: LD_VAR 0 15
39213: PUSH
39214: LD_INT 1
39216: ARRAY
39217: IFFALSE 39221
// exit ;
39219: GO 39677
// height := hex [ 2 ] ;
39221: LD_ADDR_VAR 0 13
39225: PUSH
39226: LD_VAR 0 15
39230: PUSH
39231: LD_INT 2
39233: ARRAY
39234: ST_TO_ADDR
// for i = 1 to hexes do
39235: LD_ADDR_VAR 0 7
39239: PUSH
39240: DOUBLE
39241: LD_INT 1
39243: DEC
39244: ST_TO_ADDR
39245: LD_VAR 0 12
39249: PUSH
39250: FOR_TO
39251: IFFALSE 39581
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39253: LD_VAR 0 12
39257: PUSH
39258: LD_VAR 0 7
39262: ARRAY
39263: PUSH
39264: LD_INT 1
39266: ARRAY
39267: PPUSH
39268: LD_VAR 0 12
39272: PUSH
39273: LD_VAR 0 7
39277: ARRAY
39278: PUSH
39279: LD_INT 2
39281: ARRAY
39282: PPUSH
39283: CALL_OW 488
39287: NOT
39288: PUSH
39289: LD_VAR 0 12
39293: PUSH
39294: LD_VAR 0 7
39298: ARRAY
39299: PUSH
39300: LD_INT 1
39302: ARRAY
39303: PPUSH
39304: LD_VAR 0 12
39308: PUSH
39309: LD_VAR 0 7
39313: ARRAY
39314: PUSH
39315: LD_INT 2
39317: ARRAY
39318: PPUSH
39319: CALL_OW 428
39323: PUSH
39324: LD_INT 0
39326: GREATER
39327: OR
39328: PUSH
39329: LD_VAR 0 12
39333: PUSH
39334: LD_VAR 0 7
39338: ARRAY
39339: PUSH
39340: LD_INT 1
39342: ARRAY
39343: PPUSH
39344: LD_VAR 0 12
39348: PUSH
39349: LD_VAR 0 7
39353: ARRAY
39354: PUSH
39355: LD_INT 2
39357: ARRAY
39358: PPUSH
39359: CALL_OW 351
39363: OR
39364: IFFALSE 39370
// exit ;
39366: POP
39367: POP
39368: GO 39677
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39370: LD_ADDR_VAR 0 8
39374: PUSH
39375: LD_VAR 0 12
39379: PUSH
39380: LD_VAR 0 7
39384: ARRAY
39385: PUSH
39386: LD_INT 1
39388: ARRAY
39389: PPUSH
39390: LD_VAR 0 12
39394: PUSH
39395: LD_VAR 0 7
39399: ARRAY
39400: PUSH
39401: LD_INT 2
39403: ARRAY
39404: PPUSH
39405: CALL_OW 546
39409: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39410: LD_VAR 0 8
39414: PUSH
39415: LD_INT 1
39417: ARRAY
39418: PUSH
39419: LD_VAR 0 8
39423: PUSH
39424: LD_INT 2
39426: ARRAY
39427: PUSH
39428: LD_VAR 0 13
39432: PUSH
39433: LD_INT 2
39435: PLUS
39436: GREATER
39437: OR
39438: PUSH
39439: LD_VAR 0 8
39443: PUSH
39444: LD_INT 2
39446: ARRAY
39447: PUSH
39448: LD_VAR 0 13
39452: PUSH
39453: LD_INT 2
39455: MINUS
39456: LESS
39457: OR
39458: PUSH
39459: LD_VAR 0 8
39463: PUSH
39464: LD_INT 3
39466: ARRAY
39467: PUSH
39468: LD_INT 0
39470: PUSH
39471: LD_INT 8
39473: PUSH
39474: LD_INT 9
39476: PUSH
39477: LD_INT 10
39479: PUSH
39480: LD_INT 11
39482: PUSH
39483: LD_INT 12
39485: PUSH
39486: LD_INT 13
39488: PUSH
39489: LD_INT 16
39491: PUSH
39492: LD_INT 17
39494: PUSH
39495: LD_INT 18
39497: PUSH
39498: LD_INT 19
39500: PUSH
39501: LD_INT 20
39503: PUSH
39504: LD_INT 21
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: IN
39522: NOT
39523: OR
39524: PUSH
39525: LD_VAR 0 8
39529: PUSH
39530: LD_INT 5
39532: ARRAY
39533: NOT
39534: OR
39535: PUSH
39536: LD_VAR 0 8
39540: PUSH
39541: LD_INT 6
39543: ARRAY
39544: PUSH
39545: LD_INT 1
39547: PUSH
39548: LD_INT 2
39550: PUSH
39551: LD_INT 7
39553: PUSH
39554: LD_INT 9
39556: PUSH
39557: LD_INT 10
39559: PUSH
39560: LD_INT 11
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: IN
39571: NOT
39572: OR
39573: IFFALSE 39579
// exit ;
39575: POP
39576: POP
39577: GO 39677
// end ;
39579: GO 39250
39581: POP
39582: POP
// side := GetSide ( depot ) ;
39583: LD_ADDR_VAR 0 9
39587: PUSH
39588: LD_VAR 0 1
39592: PPUSH
39593: CALL_OW 255
39597: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39598: LD_VAR 0 9
39602: PPUSH
39603: LD_VAR 0 3
39607: PPUSH
39608: LD_VAR 0 4
39612: PPUSH
39613: LD_INT 20
39615: PPUSH
39616: CALL 32331 0 4
39620: PUSH
39621: LD_INT 4
39623: ARRAY
39624: IFFALSE 39628
// exit ;
39626: GO 39677
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39628: LD_VAR 0 2
39632: PUSH
39633: LD_INT 29
39635: PUSH
39636: LD_INT 30
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: IN
39643: PUSH
39644: LD_VAR 0 3
39648: PPUSH
39649: LD_VAR 0 4
39653: PPUSH
39654: LD_VAR 0 9
39658: PPUSH
39659: CALL_OW 440
39663: NOT
39664: AND
39665: IFFALSE 39669
// exit ;
39667: GO 39677
// result := true ;
39669: LD_ADDR_VAR 0 6
39673: PUSH
39674: LD_INT 1
39676: ST_TO_ADDR
// end ;
39677: LD_VAR 0 6
39681: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
39682: LD_INT 0
39684: PPUSH
39685: PPUSH
39686: PPUSH
39687: PPUSH
39688: PPUSH
39689: PPUSH
39690: PPUSH
39691: PPUSH
39692: PPUSH
39693: PPUSH
39694: PPUSH
39695: PPUSH
39696: PPUSH
39697: PPUSH
39698: PPUSH
39699: PPUSH
39700: PPUSH
39701: PPUSH
39702: PPUSH
39703: PPUSH
39704: PPUSH
39705: PPUSH
39706: PPUSH
39707: PPUSH
39708: PPUSH
39709: PPUSH
39710: PPUSH
39711: PPUSH
39712: PPUSH
39713: PPUSH
39714: PPUSH
39715: PPUSH
39716: PPUSH
39717: PPUSH
39718: PPUSH
39719: PPUSH
39720: PPUSH
39721: PPUSH
39722: PPUSH
39723: PPUSH
39724: PPUSH
39725: PPUSH
39726: PPUSH
39727: PPUSH
39728: PPUSH
39729: PPUSH
39730: PPUSH
39731: PPUSH
39732: PPUSH
39733: PPUSH
39734: PPUSH
39735: PPUSH
39736: PPUSH
39737: PPUSH
39738: PPUSH
39739: PPUSH
39740: PPUSH
39741: PPUSH
// result = [ ] ;
39742: LD_ADDR_VAR 0 7
39746: PUSH
39747: EMPTY
39748: ST_TO_ADDR
// temp_list = [ ] ;
39749: LD_ADDR_VAR 0 9
39753: PUSH
39754: EMPTY
39755: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39756: LD_VAR 0 4
39760: PUSH
39761: LD_INT 0
39763: PUSH
39764: LD_INT 1
39766: PUSH
39767: LD_INT 2
39769: PUSH
39770: LD_INT 3
39772: PUSH
39773: LD_INT 4
39775: PUSH
39776: LD_INT 5
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: IN
39787: NOT
39788: PUSH
39789: LD_VAR 0 1
39793: PUSH
39794: LD_INT 0
39796: PUSH
39797: LD_INT 1
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: IN
39804: PUSH
39805: LD_VAR 0 5
39809: PUSH
39810: LD_INT 1
39812: PUSH
39813: LD_INT 2
39815: PUSH
39816: LD_INT 3
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: LIST
39823: IN
39824: NOT
39825: AND
39826: OR
39827: IFFALSE 39831
// exit ;
39829: GO 58222
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39831: LD_VAR 0 1
39835: PUSH
39836: LD_INT 6
39838: PUSH
39839: LD_INT 7
39841: PUSH
39842: LD_INT 8
39844: PUSH
39845: LD_INT 13
39847: PUSH
39848: LD_INT 12
39850: PUSH
39851: LD_INT 15
39853: PUSH
39854: LD_INT 11
39856: PUSH
39857: LD_INT 14
39859: PUSH
39860: LD_INT 10
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: IN
39874: IFFALSE 39884
// btype = b_lab ;
39876: LD_ADDR_VAR 0 1
39880: PUSH
39881: LD_INT 6
39883: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39884: LD_VAR 0 6
39888: PUSH
39889: LD_INT 0
39891: PUSH
39892: LD_INT 1
39894: PUSH
39895: LD_INT 2
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: LIST
39902: IN
39903: NOT
39904: PUSH
39905: LD_VAR 0 1
39909: PUSH
39910: LD_INT 0
39912: PUSH
39913: LD_INT 1
39915: PUSH
39916: LD_INT 2
39918: PUSH
39919: LD_INT 3
39921: PUSH
39922: LD_INT 6
39924: PUSH
39925: LD_INT 36
39927: PUSH
39928: LD_INT 4
39930: PUSH
39931: LD_INT 5
39933: PUSH
39934: LD_INT 31
39936: PUSH
39937: LD_INT 32
39939: PUSH
39940: LD_INT 33
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: IN
39956: NOT
39957: PUSH
39958: LD_VAR 0 6
39962: PUSH
39963: LD_INT 1
39965: EQUAL
39966: AND
39967: OR
39968: PUSH
39969: LD_VAR 0 1
39973: PUSH
39974: LD_INT 2
39976: PUSH
39977: LD_INT 3
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: IN
39984: NOT
39985: PUSH
39986: LD_VAR 0 6
39990: PUSH
39991: LD_INT 2
39993: EQUAL
39994: AND
39995: OR
39996: IFFALSE 40006
// mode = 0 ;
39998: LD_ADDR_VAR 0 6
40002: PUSH
40003: LD_INT 0
40005: ST_TO_ADDR
// case mode of 0 :
40006: LD_VAR 0 6
40010: PUSH
40011: LD_INT 0
40013: DOUBLE
40014: EQUAL
40015: IFTRUE 40019
40017: GO 51472
40019: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40020: LD_ADDR_VAR 0 11
40024: PUSH
40025: LD_INT 0
40027: PUSH
40028: LD_INT 0
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 0
40037: PUSH
40038: LD_INT 1
40040: NEG
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 1
40048: PUSH
40049: LD_INT 0
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 1
40058: PUSH
40059: LD_INT 1
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 0
40068: PUSH
40069: LD_INT 1
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 1
40078: NEG
40079: PUSH
40080: LD_INT 0
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 1
40089: NEG
40090: PUSH
40091: LD_INT 1
40093: NEG
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 1
40101: NEG
40102: PUSH
40103: LD_INT 2
40105: NEG
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 0
40113: PUSH
40114: LD_INT 2
40116: NEG
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 1
40124: PUSH
40125: LD_INT 1
40127: NEG
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: LD_INT 2
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 0
40145: PUSH
40146: LD_INT 2
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 1
40155: NEG
40156: PUSH
40157: LD_INT 1
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 1
40166: PUSH
40167: LD_INT 3
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 0
40176: PUSH
40177: LD_INT 3
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 1
40186: NEG
40187: PUSH
40188: LD_INT 2
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40213: LD_ADDR_VAR 0 12
40217: PUSH
40218: LD_INT 0
40220: PUSH
40221: LD_INT 0
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 0
40230: PUSH
40231: LD_INT 1
40233: NEG
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 1
40241: PUSH
40242: LD_INT 0
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 1
40251: PUSH
40252: LD_INT 1
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: LD_INT 1
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 1
40271: NEG
40272: PUSH
40273: LD_INT 0
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 1
40282: NEG
40283: PUSH
40284: LD_INT 1
40286: NEG
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 1
40294: PUSH
40295: LD_INT 1
40297: NEG
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 2
40305: PUSH
40306: LD_INT 0
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 2
40315: PUSH
40316: LD_INT 1
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 1
40325: NEG
40326: PUSH
40327: LD_INT 1
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 2
40336: NEG
40337: PUSH
40338: LD_INT 0
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 2
40347: NEG
40348: PUSH
40349: LD_INT 1
40351: NEG
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 2
40359: NEG
40360: PUSH
40361: LD_INT 1
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 3
40370: NEG
40371: PUSH
40372: LD_INT 0
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 3
40381: NEG
40382: PUSH
40383: LD_INT 1
40385: NEG
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40409: LD_ADDR_VAR 0 13
40413: PUSH
40414: LD_INT 0
40416: PUSH
40417: LD_INT 0
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 0
40426: PUSH
40427: LD_INT 1
40429: NEG
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 1
40437: PUSH
40438: LD_INT 0
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 1
40447: PUSH
40448: LD_INT 1
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 0
40457: PUSH
40458: LD_INT 1
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 1
40467: NEG
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 1
40478: NEG
40479: PUSH
40480: LD_INT 1
40482: NEG
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 1
40490: NEG
40491: PUSH
40492: LD_INT 2
40494: NEG
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 2
40502: PUSH
40503: LD_INT 1
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 2
40512: PUSH
40513: LD_INT 2
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 1
40522: PUSH
40523: LD_INT 2
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 2
40532: NEG
40533: PUSH
40534: LD_INT 1
40536: NEG
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 2
40544: NEG
40545: PUSH
40546: LD_INT 2
40548: NEG
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 2
40556: NEG
40557: PUSH
40558: LD_INT 3
40560: NEG
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 3
40568: NEG
40569: PUSH
40570: LD_INT 2
40572: NEG
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 3
40580: NEG
40581: PUSH
40582: LD_INT 3
40584: NEG
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40608: LD_ADDR_VAR 0 14
40612: PUSH
40613: LD_INT 0
40615: PUSH
40616: LD_INT 0
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: LD_INT 1
40628: NEG
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 1
40636: PUSH
40637: LD_INT 0
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 1
40646: PUSH
40647: LD_INT 1
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 0
40656: PUSH
40657: LD_INT 1
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 1
40666: NEG
40667: PUSH
40668: LD_INT 0
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 1
40677: NEG
40678: PUSH
40679: LD_INT 1
40681: NEG
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 1
40689: NEG
40690: PUSH
40691: LD_INT 2
40693: NEG
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 0
40701: PUSH
40702: LD_INT 2
40704: NEG
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 1
40712: PUSH
40713: LD_INT 1
40715: NEG
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 1
40723: PUSH
40724: LD_INT 2
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 0
40733: PUSH
40734: LD_INT 2
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 1
40743: NEG
40744: PUSH
40745: LD_INT 1
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 1
40754: NEG
40755: PUSH
40756: LD_INT 3
40758: NEG
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 0
40766: PUSH
40767: LD_INT 3
40769: NEG
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 1
40777: PUSH
40778: LD_INT 2
40780: NEG
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40804: LD_ADDR_VAR 0 15
40808: PUSH
40809: LD_INT 0
40811: PUSH
40812: LD_INT 0
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 0
40821: PUSH
40822: LD_INT 1
40824: NEG
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 1
40832: PUSH
40833: LD_INT 0
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 1
40842: PUSH
40843: LD_INT 1
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 0
40852: PUSH
40853: LD_INT 1
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 1
40862: NEG
40863: PUSH
40864: LD_INT 0
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 1
40873: NEG
40874: PUSH
40875: LD_INT 1
40877: NEG
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 1
40885: PUSH
40886: LD_INT 1
40888: NEG
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 2
40896: PUSH
40897: LD_INT 0
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 2
40906: PUSH
40907: LD_INT 1
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 1
40916: NEG
40917: PUSH
40918: LD_INT 1
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 2
40927: NEG
40928: PUSH
40929: LD_INT 0
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 2
40938: NEG
40939: PUSH
40940: LD_INT 1
40942: NEG
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 2
40950: PUSH
40951: LD_INT 1
40953: NEG
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 3
40961: PUSH
40962: LD_INT 0
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 3
40971: PUSH
40972: LD_INT 1
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40997: LD_ADDR_VAR 0 16
41001: PUSH
41002: LD_INT 0
41004: PUSH
41005: LD_INT 0
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 0
41014: PUSH
41015: LD_INT 1
41017: NEG
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 1
41025: PUSH
41026: LD_INT 0
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 1
41035: PUSH
41036: LD_INT 1
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 0
41045: PUSH
41046: LD_INT 1
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 1
41055: NEG
41056: PUSH
41057: LD_INT 0
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 1
41066: NEG
41067: PUSH
41068: LD_INT 1
41070: NEG
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 1
41078: NEG
41079: PUSH
41080: LD_INT 2
41082: NEG
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 2
41090: PUSH
41091: LD_INT 1
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 2
41100: PUSH
41101: LD_INT 2
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 1
41110: PUSH
41111: LD_INT 2
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 2
41120: NEG
41121: PUSH
41122: LD_INT 1
41124: NEG
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 2
41132: NEG
41133: PUSH
41134: LD_INT 2
41136: NEG
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 3
41144: PUSH
41145: LD_INT 2
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 3
41154: PUSH
41155: LD_INT 3
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 2
41164: PUSH
41165: LD_INT 3
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41190: LD_ADDR_VAR 0 17
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: LD_INT 0
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: LD_INT 1
41210: NEG
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 1
41218: PUSH
41219: LD_INT 0
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 1
41228: PUSH
41229: LD_INT 1
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 0
41238: PUSH
41239: LD_INT 1
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 1
41248: NEG
41249: PUSH
41250: LD_INT 0
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 1
41259: NEG
41260: PUSH
41261: LD_INT 1
41263: NEG
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 1
41271: NEG
41272: PUSH
41273: LD_INT 2
41275: NEG
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 0
41283: PUSH
41284: LD_INT 2
41286: NEG
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 1
41294: PUSH
41295: LD_INT 1
41297: NEG
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 2
41305: PUSH
41306: LD_INT 0
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 2
41315: PUSH
41316: LD_INT 1
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 2
41325: PUSH
41326: LD_INT 2
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 1
41335: PUSH
41336: LD_INT 2
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 0
41345: PUSH
41346: LD_INT 2
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 1
41355: NEG
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 2
41366: NEG
41367: PUSH
41368: LD_INT 0
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 2
41377: NEG
41378: PUSH
41379: LD_INT 1
41381: NEG
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 2
41389: NEG
41390: PUSH
41391: LD_INT 2
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41420: LD_ADDR_VAR 0 18
41424: PUSH
41425: LD_INT 0
41427: PUSH
41428: LD_INT 0
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 0
41437: PUSH
41438: LD_INT 1
41440: NEG
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 1
41448: PUSH
41449: LD_INT 0
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 1
41458: PUSH
41459: LD_INT 1
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 0
41468: PUSH
41469: LD_INT 1
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 1
41478: NEG
41479: PUSH
41480: LD_INT 0
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 1
41489: NEG
41490: PUSH
41491: LD_INT 1
41493: NEG
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 1
41501: NEG
41502: PUSH
41503: LD_INT 2
41505: NEG
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 0
41513: PUSH
41514: LD_INT 2
41516: NEG
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 1
41524: PUSH
41525: LD_INT 1
41527: NEG
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 2
41535: PUSH
41536: LD_INT 0
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 2
41545: PUSH
41546: LD_INT 1
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 2
41555: PUSH
41556: LD_INT 2
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 1
41565: PUSH
41566: LD_INT 2
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: LD_INT 2
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 1
41585: NEG
41586: PUSH
41587: LD_INT 1
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 2
41596: NEG
41597: PUSH
41598: LD_INT 0
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 2
41607: NEG
41608: PUSH
41609: LD_INT 1
41611: NEG
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 2
41619: NEG
41620: PUSH
41621: LD_INT 2
41623: NEG
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41650: LD_ADDR_VAR 0 19
41654: PUSH
41655: LD_INT 0
41657: PUSH
41658: LD_INT 0
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 0
41667: PUSH
41668: LD_INT 1
41670: NEG
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 1
41678: PUSH
41679: LD_INT 0
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 1
41688: PUSH
41689: LD_INT 1
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 0
41698: PUSH
41699: LD_INT 1
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 1
41708: NEG
41709: PUSH
41710: LD_INT 0
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 1
41719: NEG
41720: PUSH
41721: LD_INT 1
41723: NEG
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 1
41731: NEG
41732: PUSH
41733: LD_INT 2
41735: NEG
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 0
41743: PUSH
41744: LD_INT 2
41746: NEG
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 1
41754: PUSH
41755: LD_INT 1
41757: NEG
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 2
41765: PUSH
41766: LD_INT 0
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 2
41775: PUSH
41776: LD_INT 1
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 2
41785: PUSH
41786: LD_INT 2
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 1
41795: PUSH
41796: LD_INT 2
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 0
41805: PUSH
41806: LD_INT 2
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 1
41815: NEG
41816: PUSH
41817: LD_INT 1
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 2
41826: NEG
41827: PUSH
41828: LD_INT 0
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 2
41837: NEG
41838: PUSH
41839: LD_INT 1
41841: NEG
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 2
41849: NEG
41850: PUSH
41851: LD_INT 2
41853: NEG
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41880: LD_ADDR_VAR 0 20
41884: PUSH
41885: LD_INT 0
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 0
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 1
41908: PUSH
41909: LD_INT 0
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 1
41918: PUSH
41919: LD_INT 1
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 0
41928: PUSH
41929: LD_INT 1
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 1
41938: NEG
41939: PUSH
41940: LD_INT 0
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 1
41949: NEG
41950: PUSH
41951: LD_INT 1
41953: NEG
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 1
41961: NEG
41962: PUSH
41963: LD_INT 2
41965: NEG
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 0
41973: PUSH
41974: LD_INT 2
41976: NEG
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 1
41984: PUSH
41985: LD_INT 1
41987: NEG
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 2
41995: PUSH
41996: LD_INT 0
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 2
42005: PUSH
42006: LD_INT 1
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 2
42015: PUSH
42016: LD_INT 2
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 1
42025: PUSH
42026: LD_INT 2
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: LD_INT 2
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 1
42045: NEG
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 2
42056: NEG
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 2
42067: NEG
42068: PUSH
42069: LD_INT 1
42071: NEG
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 2
42079: NEG
42080: PUSH
42081: LD_INT 2
42083: NEG
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42110: LD_ADDR_VAR 0 21
42114: PUSH
42115: LD_INT 0
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 0
42127: PUSH
42128: LD_INT 1
42130: NEG
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 1
42138: PUSH
42139: LD_INT 0
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 1
42148: PUSH
42149: LD_INT 1
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: LD_INT 1
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 1
42168: NEG
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 1
42179: NEG
42180: PUSH
42181: LD_INT 1
42183: NEG
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 1
42191: NEG
42192: PUSH
42193: LD_INT 2
42195: NEG
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: LD_INT 2
42206: NEG
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 1
42214: PUSH
42215: LD_INT 1
42217: NEG
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 2
42225: PUSH
42226: LD_INT 0
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 2
42235: PUSH
42236: LD_INT 1
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 2
42245: PUSH
42246: LD_INT 2
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 1
42255: PUSH
42256: LD_INT 2
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 0
42265: PUSH
42266: LD_INT 2
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 1
42275: NEG
42276: PUSH
42277: LD_INT 1
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 2
42286: NEG
42287: PUSH
42288: LD_INT 0
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 2
42297: NEG
42298: PUSH
42299: LD_INT 1
42301: NEG
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 2
42309: NEG
42310: PUSH
42311: LD_INT 2
42313: NEG
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42340: LD_ADDR_VAR 0 22
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: LD_INT 0
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 0
42357: PUSH
42358: LD_INT 1
42360: NEG
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 1
42368: PUSH
42369: LD_INT 0
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: LD_INT 1
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 0
42388: PUSH
42389: LD_INT 1
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 1
42398: NEG
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 1
42409: NEG
42410: PUSH
42411: LD_INT 1
42413: NEG
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 1
42421: NEG
42422: PUSH
42423: LD_INT 2
42425: NEG
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 0
42433: PUSH
42434: LD_INT 2
42436: NEG
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 1
42444: PUSH
42445: LD_INT 1
42447: NEG
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 2
42455: PUSH
42456: LD_INT 0
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 2
42465: PUSH
42466: LD_INT 1
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 2
42475: PUSH
42476: LD_INT 2
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 1
42485: PUSH
42486: LD_INT 2
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 0
42495: PUSH
42496: LD_INT 2
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 1
42505: NEG
42506: PUSH
42507: LD_INT 1
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 2
42516: NEG
42517: PUSH
42518: LD_INT 0
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 2
42527: NEG
42528: PUSH
42529: LD_INT 1
42531: NEG
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 2
42539: NEG
42540: PUSH
42541: LD_INT 2
42543: NEG
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42570: LD_ADDR_VAR 0 23
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: LD_INT 0
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 0
42587: PUSH
42588: LD_INT 1
42590: NEG
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 1
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 1
42608: PUSH
42609: LD_INT 1
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 0
42618: PUSH
42619: LD_INT 1
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 1
42639: NEG
42640: PUSH
42641: LD_INT 1
42643: NEG
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 1
42651: NEG
42652: PUSH
42653: LD_INT 2
42655: NEG
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 0
42663: PUSH
42664: LD_INT 2
42666: NEG
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: LD_INT 1
42677: NEG
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 2
42685: PUSH
42686: LD_INT 0
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 2
42695: PUSH
42696: LD_INT 1
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 2
42705: PUSH
42706: LD_INT 2
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 1
42715: PUSH
42716: LD_INT 2
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 0
42725: PUSH
42726: LD_INT 2
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 1
42735: NEG
42736: PUSH
42737: LD_INT 1
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 2
42746: NEG
42747: PUSH
42748: LD_INT 0
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 2
42757: NEG
42758: PUSH
42759: LD_INT 1
42761: NEG
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 2
42769: NEG
42770: PUSH
42771: LD_INT 2
42773: NEG
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 2
42781: NEG
42782: PUSH
42783: LD_INT 3
42785: NEG
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 1
42793: NEG
42794: PUSH
42795: LD_INT 3
42797: NEG
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 1
42805: PUSH
42806: LD_INT 2
42808: NEG
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 2
42816: PUSH
42817: LD_INT 1
42819: NEG
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42850: LD_ADDR_VAR 0 24
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: LD_INT 0
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 0
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 1
42878: PUSH
42879: LD_INT 0
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 1
42888: PUSH
42889: LD_INT 1
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: LD_INT 1
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 1
42908: NEG
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 1
42919: NEG
42920: PUSH
42921: LD_INT 1
42923: NEG
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 1
42931: NEG
42932: PUSH
42933: LD_INT 2
42935: NEG
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: LD_INT 2
42946: NEG
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 1
42954: PUSH
42955: LD_INT 1
42957: NEG
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 2
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 2
42975: PUSH
42976: LD_INT 1
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 2
42985: PUSH
42986: LD_INT 2
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 1
42995: PUSH
42996: LD_INT 2
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: LD_INT 2
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: LD_INT 1
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 2
43026: NEG
43027: PUSH
43028: LD_INT 0
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 2
43037: NEG
43038: PUSH
43039: LD_INT 1
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 2
43049: NEG
43050: PUSH
43051: LD_INT 2
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 1
43061: PUSH
43062: LD_INT 2
43064: NEG
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 2
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 3
43083: PUSH
43084: LD_INT 1
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 3
43093: PUSH
43094: LD_INT 2
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43126: LD_ADDR_VAR 0 25
43130: PUSH
43131: LD_INT 0
43133: PUSH
43134: LD_INT 0
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 0
43143: PUSH
43144: LD_INT 1
43146: NEG
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 1
43154: PUSH
43155: LD_INT 0
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 1
43164: PUSH
43165: LD_INT 1
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 0
43174: PUSH
43175: LD_INT 1
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 1
43184: NEG
43185: PUSH
43186: LD_INT 0
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 1
43195: NEG
43196: PUSH
43197: LD_INT 1
43199: NEG
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 1
43207: NEG
43208: PUSH
43209: LD_INT 2
43211: NEG
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 0
43219: PUSH
43220: LD_INT 2
43222: NEG
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 1
43230: PUSH
43231: LD_INT 1
43233: NEG
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 2
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 2
43251: PUSH
43252: LD_INT 1
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 2
43261: PUSH
43262: LD_INT 2
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 1
43271: PUSH
43272: LD_INT 2
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 0
43281: PUSH
43282: LD_INT 2
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 1
43291: NEG
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 2
43302: NEG
43303: PUSH
43304: LD_INT 0
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 2
43313: NEG
43314: PUSH
43315: LD_INT 1
43317: NEG
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 2
43325: NEG
43326: PUSH
43327: LD_INT 2
43329: NEG
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 3
43337: PUSH
43338: LD_INT 1
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 3
43347: PUSH
43348: LD_INT 2
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 2
43357: PUSH
43358: LD_INT 3
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 1
43367: PUSH
43368: LD_INT 3
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43400: LD_ADDR_VAR 0 26
43404: PUSH
43405: LD_INT 0
43407: PUSH
43408: LD_INT 0
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 0
43417: PUSH
43418: LD_INT 1
43420: NEG
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 1
43428: PUSH
43429: LD_INT 0
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 1
43438: PUSH
43439: LD_INT 1
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 0
43448: PUSH
43449: LD_INT 1
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 1
43458: NEG
43459: PUSH
43460: LD_INT 0
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 1
43469: NEG
43470: PUSH
43471: LD_INT 1
43473: NEG
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 1
43481: NEG
43482: PUSH
43483: LD_INT 2
43485: NEG
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 0
43493: PUSH
43494: LD_INT 2
43496: NEG
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 1
43504: PUSH
43505: LD_INT 1
43507: NEG
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 2
43515: PUSH
43516: LD_INT 0
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 2
43525: PUSH
43526: LD_INT 1
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 2
43535: PUSH
43536: LD_INT 2
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 1
43545: PUSH
43546: LD_INT 2
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: LD_INT 2
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 1
43565: NEG
43566: PUSH
43567: LD_INT 1
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 2
43576: NEG
43577: PUSH
43578: LD_INT 0
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 2
43587: NEG
43588: PUSH
43589: LD_INT 1
43591: NEG
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 2
43599: NEG
43600: PUSH
43601: LD_INT 2
43603: NEG
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 2
43611: PUSH
43612: LD_INT 3
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 1
43621: PUSH
43622: LD_INT 3
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 1
43631: NEG
43632: PUSH
43633: LD_INT 2
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 2
43642: NEG
43643: PUSH
43644: LD_INT 1
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43676: LD_ADDR_VAR 0 27
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: LD_INT 0
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 0
43693: PUSH
43694: LD_INT 1
43696: NEG
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 1
43704: PUSH
43705: LD_INT 0
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 1
43714: PUSH
43715: LD_INT 1
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: LD_INT 1
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 1
43734: NEG
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 1
43745: NEG
43746: PUSH
43747: LD_INT 1
43749: NEG
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: LD_INT 2
43761: NEG
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: LD_INT 2
43772: NEG
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 1
43780: PUSH
43781: LD_INT 1
43783: NEG
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 2
43791: PUSH
43792: LD_INT 0
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 2
43801: PUSH
43802: LD_INT 1
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 2
43811: PUSH
43812: LD_INT 2
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 1
43821: PUSH
43822: LD_INT 2
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 0
43831: PUSH
43832: LD_INT 2
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 1
43841: NEG
43842: PUSH
43843: LD_INT 1
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 2
43852: NEG
43853: PUSH
43854: LD_INT 0
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 2
43863: NEG
43864: PUSH
43865: LD_INT 1
43867: NEG
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 2
43875: NEG
43876: PUSH
43877: LD_INT 2
43879: NEG
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 1
43887: NEG
43888: PUSH
43889: LD_INT 2
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 2
43898: NEG
43899: PUSH
43900: LD_INT 1
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 3
43909: NEG
43910: PUSH
43911: LD_INT 1
43913: NEG
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 3
43921: NEG
43922: PUSH
43923: LD_INT 2
43925: NEG
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43956: LD_ADDR_VAR 0 28
43960: PUSH
43961: LD_INT 0
43963: PUSH
43964: LD_INT 0
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 0
43973: PUSH
43974: LD_INT 1
43976: NEG
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 1
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 1
43994: PUSH
43995: LD_INT 1
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 0
44004: PUSH
44005: LD_INT 1
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 1
44014: NEG
44015: PUSH
44016: LD_INT 0
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 1
44025: NEG
44026: PUSH
44027: LD_INT 1
44029: NEG
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 1
44037: NEG
44038: PUSH
44039: LD_INT 2
44041: NEG
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: LD_INT 2
44052: NEG
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 1
44060: PUSH
44061: LD_INT 1
44063: NEG
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 2
44071: PUSH
44072: LD_INT 0
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 2
44081: PUSH
44082: LD_INT 1
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 2
44091: PUSH
44092: LD_INT 2
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 1
44101: PUSH
44102: LD_INT 2
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 0
44111: PUSH
44112: LD_INT 2
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 1
44121: NEG
44122: PUSH
44123: LD_INT 1
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 2
44132: NEG
44133: PUSH
44134: LD_INT 0
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 2
44143: NEG
44144: PUSH
44145: LD_INT 1
44147: NEG
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 2
44155: NEG
44156: PUSH
44157: LD_INT 2
44159: NEG
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 2
44167: NEG
44168: PUSH
44169: LD_INT 3
44171: NEG
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 1
44179: NEG
44180: PUSH
44181: LD_INT 3
44183: NEG
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 3
44191: NEG
44192: PUSH
44193: LD_INT 1
44195: NEG
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 3
44203: NEG
44204: PUSH
44205: LD_INT 2
44207: NEG
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44238: LD_ADDR_VAR 0 29
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: LD_INT 1
44258: NEG
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 1
44266: PUSH
44267: LD_INT 0
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: LD_INT 1
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 1
44296: NEG
44297: PUSH
44298: LD_INT 0
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 1
44319: NEG
44320: PUSH
44321: LD_INT 2
44323: NEG
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: LD_INT 2
44334: NEG
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 2
44353: PUSH
44354: LD_INT 0
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 2
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 1
44373: PUSH
44374: LD_INT 2
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 0
44383: PUSH
44384: LD_INT 2
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 1
44393: NEG
44394: PUSH
44395: LD_INT 1
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 2
44404: NEG
44405: PUSH
44406: LD_INT 1
44408: NEG
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 2
44416: NEG
44417: PUSH
44418: LD_INT 2
44420: NEG
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 2
44428: NEG
44429: PUSH
44430: LD_INT 3
44432: NEG
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 2
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 3
44451: PUSH
44452: LD_INT 1
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 1
44461: PUSH
44462: LD_INT 3
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 1
44471: NEG
44472: PUSH
44473: LD_INT 2
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 3
44482: NEG
44483: PUSH
44484: LD_INT 2
44486: NEG
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44517: LD_ADDR_VAR 0 30
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: LD_INT 0
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 0
44534: PUSH
44535: LD_INT 1
44537: NEG
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 1
44545: PUSH
44546: LD_INT 0
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 0
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 1
44575: NEG
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 1
44586: NEG
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 1
44598: NEG
44599: PUSH
44600: LD_INT 2
44602: NEG
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 0
44610: PUSH
44611: LD_INT 2
44613: NEG
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: PUSH
44622: LD_INT 1
44624: NEG
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 2
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 2
44642: PUSH
44643: LD_INT 1
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 2
44652: PUSH
44653: LD_INT 2
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 1
44662: PUSH
44663: LD_INT 2
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 1
44672: NEG
44673: PUSH
44674: LD_INT 1
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 2
44683: NEG
44684: PUSH
44685: LD_INT 0
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 2
44694: NEG
44695: PUSH
44696: LD_INT 1
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 1
44706: NEG
44707: PUSH
44708: LD_INT 3
44710: NEG
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 1
44718: PUSH
44719: LD_INT 2
44721: NEG
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 3
44729: PUSH
44730: LD_INT 2
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 2
44739: PUSH
44740: LD_INT 3
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 2
44749: NEG
44750: PUSH
44751: LD_INT 1
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 3
44760: NEG
44761: PUSH
44762: LD_INT 1
44764: NEG
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44795: LD_ADDR_VAR 0 31
44799: PUSH
44800: LD_INT 0
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: LD_INT 1
44815: NEG
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 1
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 1
44833: PUSH
44834: LD_INT 1
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: LD_INT 1
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 1
44853: NEG
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: NEG
44865: PUSH
44866: LD_INT 1
44868: NEG
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 1
44876: NEG
44877: PUSH
44878: LD_INT 2
44880: NEG
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 1
44888: PUSH
44889: LD_INT 1
44891: NEG
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 2
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 2
44909: PUSH
44910: LD_INT 1
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 2
44919: PUSH
44920: LD_INT 2
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 1
44929: PUSH
44930: LD_INT 2
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: LD_INT 2
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 1
44949: NEG
44950: PUSH
44951: LD_INT 1
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 2
44960: NEG
44961: PUSH
44962: LD_INT 1
44964: NEG
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 2
44972: NEG
44973: PUSH
44974: LD_INT 2
44976: NEG
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 2
44984: NEG
44985: PUSH
44986: LD_INT 3
44988: NEG
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 2
44996: PUSH
44997: LD_INT 1
44999: NEG
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 3
45007: PUSH
45008: LD_INT 1
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 1
45017: PUSH
45018: LD_INT 3
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 1
45027: NEG
45028: PUSH
45029: LD_INT 2
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 3
45038: NEG
45039: PUSH
45040: LD_INT 2
45042: NEG
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45073: LD_ADDR_VAR 0 32
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 1
45154: NEG
45155: PUSH
45156: LD_INT 2
45158: NEG
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: LD_INT 2
45169: NEG
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 1
45177: PUSH
45178: LD_INT 1
45180: NEG
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 2
45188: PUSH
45189: LD_INT 1
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 2
45198: PUSH
45199: LD_INT 2
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: LD_INT 2
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 0
45218: PUSH
45219: LD_INT 2
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 1
45228: NEG
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 2
45239: NEG
45240: PUSH
45241: LD_INT 0
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 2
45250: NEG
45251: PUSH
45252: LD_INT 1
45254: NEG
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 1
45262: NEG
45263: PUSH
45264: LD_INT 3
45266: NEG
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: LD_INT 2
45277: NEG
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 3
45285: PUSH
45286: LD_INT 2
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 2
45295: PUSH
45296: LD_INT 3
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 2
45305: NEG
45306: PUSH
45307: LD_INT 1
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 3
45316: NEG
45317: PUSH
45318: LD_INT 1
45320: NEG
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45351: LD_ADDR_VAR 0 33
45355: PUSH
45356: LD_INT 0
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: LD_INT 1
45371: NEG
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 1
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: LD_INT 1
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 0
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 1
45409: NEG
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 1
45420: NEG
45421: PUSH
45422: LD_INT 1
45424: NEG
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 1
45432: NEG
45433: PUSH
45434: LD_INT 2
45436: NEG
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 2
45455: PUSH
45456: LD_INT 0
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 2
45465: PUSH
45466: LD_INT 1
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 1
45475: PUSH
45476: LD_INT 2
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 0
45485: PUSH
45486: LD_INT 2
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 1
45495: NEG
45496: PUSH
45497: LD_INT 1
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 2
45506: NEG
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 2
45517: NEG
45518: PUSH
45519: LD_INT 1
45521: NEG
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 2
45529: NEG
45530: PUSH
45531: LD_INT 2
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 2
45541: NEG
45542: PUSH
45543: LD_INT 3
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 2
45553: PUSH
45554: LD_INT 1
45556: NEG
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 3
45564: PUSH
45565: LD_INT 1
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 1
45574: PUSH
45575: LD_INT 3
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 1
45584: NEG
45585: PUSH
45586: LD_INT 2
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 3
45595: NEG
45596: PUSH
45597: LD_INT 2
45599: NEG
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45630: LD_ADDR_VAR 0 34
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 0
45647: PUSH
45648: LD_INT 1
45650: NEG
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 0
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 1
45699: NEG
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: LD_INT 2
45715: NEG
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: LD_INT 2
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 2
45745: PUSH
45746: LD_INT 1
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 2
45755: PUSH
45756: LD_INT 2
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 1
45765: PUSH
45766: LD_INT 2
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: LD_INT 1
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 2
45786: NEG
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 2
45797: NEG
45798: PUSH
45799: LD_INT 1
45801: NEG
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 2
45809: NEG
45810: PUSH
45811: LD_INT 2
45813: NEG
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: PUSH
45823: LD_INT 3
45825: NEG
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 1
45833: PUSH
45834: LD_INT 2
45836: NEG
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 3
45844: PUSH
45845: LD_INT 2
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 2
45854: PUSH
45855: LD_INT 3
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 2
45864: NEG
45865: PUSH
45866: LD_INT 1
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 3
45875: NEG
45876: PUSH
45877: LD_INT 1
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45910: LD_ADDR_VAR 0 35
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: LD_INT 1
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 1
45948: PUSH
45949: LD_INT 1
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 0
45958: PUSH
45959: LD_INT 1
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: LD_INT 0
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 2
45991: PUSH
45992: LD_INT 1
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 2
46001: NEG
46002: PUSH
46003: LD_INT 1
46005: NEG
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46022: LD_ADDR_VAR 0 36
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: LD_INT 0
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: LD_INT 1
46042: NEG
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: LD_INT 1
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 0
46070: PUSH
46071: LD_INT 1
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 1
46080: NEG
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: NEG
46104: PUSH
46105: LD_INT 2
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 1
46115: PUSH
46116: LD_INT 2
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46134: LD_ADDR_VAR 0 37
46138: PUSH
46139: LD_INT 0
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 1
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: PUSH
46173: LD_INT 1
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 1
46192: NEG
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: LD_INT 1
46207: NEG
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: LD_INT 1
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: NEG
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46246: LD_ADDR_VAR 0 38
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 0
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 1
46284: PUSH
46285: LD_INT 1
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 0
46294: PUSH
46295: LD_INT 1
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: NEG
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 1
46315: NEG
46316: PUSH
46317: LD_INT 1
46319: NEG
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 2
46327: PUSH
46328: LD_INT 1
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 2
46337: NEG
46338: PUSH
46339: LD_INT 1
46341: NEG
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46358: LD_ADDR_VAR 0 39
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: LD_INT 0
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 0
46375: PUSH
46376: LD_INT 1
46378: NEG
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: LD_INT 0
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: LD_INT 1
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: LD_INT 1
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: LD_INT 0
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 1
46439: NEG
46440: PUSH
46441: LD_INT 2
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 1
46451: PUSH
46452: LD_INT 2
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46470: LD_ADDR_VAR 0 40
46474: PUSH
46475: LD_INT 0
46477: PUSH
46478: LD_INT 0
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: LD_INT 1
46490: NEG
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 1
46498: PUSH
46499: LD_INT 0
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: LD_INT 1
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 0
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: NEG
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 1
46539: NEG
46540: PUSH
46541: LD_INT 1
46543: NEG
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 1
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 1
46562: NEG
46563: PUSH
46564: LD_INT 1
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46582: LD_ADDR_VAR 0 41
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: LD_INT 0
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 0
46599: PUSH
46600: LD_INT 1
46602: NEG
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: LD_INT 1
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 1
46640: NEG
46641: PUSH
46642: LD_INT 0
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: NEG
46664: PUSH
46665: LD_INT 2
46667: NEG
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 1
46675: PUSH
46676: LD_INT 1
46678: NEG
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 2
46686: PUSH
46687: LD_INT 0
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 2
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 2
46706: PUSH
46707: LD_INT 2
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: LD_INT 2
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: LD_INT 1
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 2
46737: NEG
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 2
46748: NEG
46749: PUSH
46750: LD_INT 1
46752: NEG
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 2
46760: NEG
46761: PUSH
46762: LD_INT 2
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 2
46772: NEG
46773: PUSH
46774: LD_INT 3
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 2
46784: PUSH
46785: LD_INT 1
46787: NEG
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 3
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 3
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 3
46815: PUSH
46816: LD_INT 2
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 3
46825: PUSH
46826: LD_INT 3
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 2
46835: PUSH
46836: LD_INT 3
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 2
46845: NEG
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 3
46856: NEG
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 3
46867: NEG
46868: PUSH
46869: LD_INT 1
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 3
46879: NEG
46880: PUSH
46881: LD_INT 2
46883: NEG
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 3
46891: NEG
46892: PUSH
46893: LD_INT 3
46895: NEG
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46932: LD_ADDR_VAR 0 42
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: LD_INT 1
46952: NEG
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 1
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 1
46970: PUSH
46971: LD_INT 1
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 0
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 1
46990: NEG
46991: PUSH
46992: LD_INT 0
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: LD_INT 1
47005: NEG
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 1
47013: NEG
47014: PUSH
47015: LD_INT 2
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: LD_INT 2
47028: NEG
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 1
47036: PUSH
47037: LD_INT 1
47039: NEG
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 2
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 2
47057: PUSH
47058: LD_INT 2
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 1
47067: PUSH
47068: LD_INT 2
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 0
47077: PUSH
47078: LD_INT 2
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 1
47087: NEG
47088: PUSH
47089: LD_INT 1
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 2
47098: NEG
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 2
47110: NEG
47111: PUSH
47112: LD_INT 2
47114: NEG
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 2
47122: NEG
47123: PUSH
47124: LD_INT 3
47126: NEG
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 1
47134: NEG
47135: PUSH
47136: LD_INT 3
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: LD_INT 3
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 1
47157: PUSH
47158: LD_INT 2
47160: NEG
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 3
47168: PUSH
47169: LD_INT 2
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 3
47178: PUSH
47179: LD_INT 3
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 2
47188: PUSH
47189: LD_INT 3
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: LD_INT 3
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: LD_INT 3
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: NEG
47219: PUSH
47220: LD_INT 2
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 3
47229: NEG
47230: PUSH
47231: LD_INT 2
47233: NEG
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 3
47241: NEG
47242: PUSH
47243: LD_INT 3
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47282: LD_ADDR_VAR 0 43
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: LD_INT 1
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: LD_INT 1
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: LD_INT 1
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 1
47351: NEG
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: LD_INT 2
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: LD_INT 2
47378: NEG
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 1
47386: PUSH
47387: LD_INT 1
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 2
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 2
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: LD_INT 2
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: LD_INT 2
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 1
47437: NEG
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 2
47448: NEG
47449: PUSH
47450: LD_INT 0
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 2
47459: NEG
47460: PUSH
47461: LD_INT 1
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 1
47471: NEG
47472: PUSH
47473: LD_INT 3
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 0
47483: PUSH
47484: LD_INT 3
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 1
47494: PUSH
47495: LD_INT 2
47497: NEG
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 2
47505: PUSH
47506: LD_INT 1
47508: NEG
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 3
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 3
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: LD_INT 3
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: LD_INT 3
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: LD_INT 2
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 2
47567: NEG
47568: PUSH
47569: LD_INT 1
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 3
47578: NEG
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 3
47589: NEG
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47630: LD_ADDR_VAR 0 44
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: NEG
47689: PUSH
47690: LD_INT 0
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 1
47699: NEG
47700: PUSH
47701: LD_INT 1
47703: NEG
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: LD_INT 2
47715: NEG
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 1
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 2
47734: PUSH
47735: LD_INT 0
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 2
47744: PUSH
47745: LD_INT 1
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 2
47754: PUSH
47755: LD_INT 2
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 1
47764: PUSH
47765: LD_INT 2
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 1
47774: NEG
47775: PUSH
47776: LD_INT 1
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 2
47785: NEG
47786: PUSH
47787: LD_INT 0
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 2
47796: NEG
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 2
47808: NEG
47809: PUSH
47810: LD_INT 2
47812: NEG
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 2
47820: NEG
47821: PUSH
47822: LD_INT 3
47824: NEG
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 2
47832: PUSH
47833: LD_INT 1
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 3
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 3
47853: PUSH
47854: LD_INT 1
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 3
47863: PUSH
47864: LD_INT 2
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 3
47873: PUSH
47874: LD_INT 3
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 2
47883: PUSH
47884: LD_INT 3
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 2
47893: NEG
47894: PUSH
47895: LD_INT 1
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 3
47904: NEG
47905: PUSH
47906: LD_INT 0
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 3
47915: NEG
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 3
47927: NEG
47928: PUSH
47929: LD_INT 2
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 3
47939: NEG
47940: PUSH
47941: LD_INT 3
47943: NEG
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47980: LD_ADDR_VAR 0 45
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: LD_INT 0
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 0
47997: PUSH
47998: LD_INT 1
48000: NEG
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 1
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: LD_INT 1
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: LD_INT 1
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 1
48038: NEG
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 1
48049: NEG
48050: PUSH
48051: LD_INT 1
48053: NEG
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 1
48061: NEG
48062: PUSH
48063: LD_INT 2
48065: NEG
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: LD_INT 2
48076: NEG
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 2
48095: PUSH
48096: LD_INT 1
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 2
48105: PUSH
48106: LD_INT 2
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: LD_INT 2
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: LD_INT 2
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: NEG
48136: PUSH
48137: LD_INT 1
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 2
48146: NEG
48147: PUSH
48148: LD_INT 1
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 2
48158: NEG
48159: PUSH
48160: LD_INT 2
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 2
48170: NEG
48171: PUSH
48172: LD_INT 3
48174: NEG
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 1
48182: NEG
48183: PUSH
48184: LD_INT 3
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: LD_INT 3
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: LD_INT 2
48208: NEG
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 3
48216: PUSH
48217: LD_INT 2
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 3
48226: PUSH
48227: LD_INT 3
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 2
48236: PUSH
48237: LD_INT 3
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 1
48246: PUSH
48247: LD_INT 3
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: LD_INT 3
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 1
48266: NEG
48267: PUSH
48268: LD_INT 2
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 3
48277: NEG
48278: PUSH
48279: LD_INT 2
48281: NEG
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 3
48289: NEG
48290: PUSH
48291: LD_INT 3
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48330: LD_ADDR_VAR 0 46
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 0
48347: PUSH
48348: LD_INT 1
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 1
48358: PUSH
48359: LD_INT 0
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: PUSH
48369: LD_INT 1
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 0
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: NEG
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 1
48399: NEG
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: LD_INT 2
48415: NEG
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 0
48423: PUSH
48424: LD_INT 2
48426: NEG
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 1
48434: PUSH
48435: LD_INT 1
48437: NEG
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 2
48445: PUSH
48446: LD_INT 0
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 2
48455: PUSH
48456: LD_INT 1
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: LD_INT 2
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 0
48475: PUSH
48476: LD_INT 2
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 1
48485: NEG
48486: PUSH
48487: LD_INT 1
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 2
48496: NEG
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 2
48507: NEG
48508: PUSH
48509: LD_INT 1
48511: NEG
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: LD_INT 3
48523: NEG
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 0
48531: PUSH
48532: LD_INT 3
48534: NEG
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: LD_INT 2
48545: NEG
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 2
48553: PUSH
48554: LD_INT 1
48556: NEG
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 3
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 3
48574: PUSH
48575: LD_INT 1
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 1
48584: PUSH
48585: LD_INT 3
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 0
48594: PUSH
48595: LD_INT 3
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 1
48604: NEG
48605: PUSH
48606: LD_INT 2
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 2
48615: NEG
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 3
48626: NEG
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 3
48637: NEG
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48678: LD_ADDR_VAR 0 47
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: LD_INT 1
48698: NEG
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 1
48706: PUSH
48707: LD_INT 0
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: LD_INT 1
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 1
48736: NEG
48737: PUSH
48738: LD_INT 0
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 1
48747: NEG
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 1
48759: NEG
48760: PUSH
48761: LD_INT 2
48763: NEG
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 0
48771: PUSH
48772: LD_INT 2
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 1
48782: PUSH
48783: LD_INT 1
48785: NEG
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 2
48793: NEG
48794: PUSH
48795: LD_INT 1
48797: NEG
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 2
48805: NEG
48806: PUSH
48807: LD_INT 2
48809: NEG
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48829: LD_ADDR_VAR 0 48
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: LD_INT 1
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 1
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: LD_INT 1
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: LD_INT 2
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: LD_INT 2
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 2
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 2
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48976: LD_ADDR_VAR 0 49
48980: PUSH
48981: LD_INT 0
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: LD_INT 1
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 1
49014: PUSH
49015: LD_INT 1
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 1
49034: NEG
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: NEG
49046: PUSH
49047: LD_INT 1
49049: NEG
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 1
49057: PUSH
49058: LD_INT 1
49060: NEG
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 2
49068: PUSH
49069: LD_INT 0
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 2
49078: PUSH
49079: LD_INT 1
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 2
49088: PUSH
49089: LD_INT 2
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: LD_INT 2
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49120: LD_ADDR_VAR 0 50
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 1
49148: PUSH
49149: LD_INT 0
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 1
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 0
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 1
49178: NEG
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: LD_INT 1
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 2
49201: PUSH
49202: LD_INT 1
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 2
49211: PUSH
49212: LD_INT 2
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: LD_INT 2
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 0
49231: PUSH
49232: LD_INT 2
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: LD_INT 1
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49264: LD_ADDR_VAR 0 51
49268: PUSH
49269: LD_INT 0
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 0
49281: PUSH
49282: LD_INT 1
49284: NEG
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 1
49292: PUSH
49293: LD_INT 0
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 1
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: LD_INT 1
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 1
49322: NEG
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 1
49345: PUSH
49346: LD_INT 2
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: LD_INT 2
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 1
49365: NEG
49366: PUSH
49367: LD_INT 1
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 2
49376: NEG
49377: PUSH
49378: LD_INT 0
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 2
49387: NEG
49388: PUSH
49389: LD_INT 1
49391: NEG
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49411: LD_ADDR_VAR 0 52
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: LD_INT 0
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 0
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 1
49449: PUSH
49450: LD_INT 1
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: LD_INT 1
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 1
49469: NEG
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: LD_INT 1
49484: NEG
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: NEG
49493: PUSH
49494: LD_INT 2
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: NEG
49505: PUSH
49506: LD_INT 1
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 2
49515: NEG
49516: PUSH
49517: LD_INT 0
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 2
49526: NEG
49527: PUSH
49528: LD_INT 1
49530: NEG
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 2
49538: NEG
49539: PUSH
49540: LD_INT 2
49542: NEG
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49562: LD_ADDR_VAR 0 53
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 0
49579: PUSH
49580: LD_INT 1
49582: NEG
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 1
49590: PUSH
49591: LD_INT 0
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 1
49600: PUSH
49601: LD_INT 1
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: LD_INT 1
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 1
49620: NEG
49621: PUSH
49622: LD_INT 0
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: NEG
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 1
49643: NEG
49644: PUSH
49645: LD_INT 2
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 0
49655: PUSH
49656: LD_INT 2
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: LD_INT 1
49669: NEG
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 2
49677: PUSH
49678: LD_INT 0
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 2
49687: PUSH
49688: LD_INT 1
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 2
49697: PUSH
49698: LD_INT 2
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 1
49707: PUSH
49708: LD_INT 2
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: LD_INT 2
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 1
49727: NEG
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 2
49738: NEG
49739: PUSH
49740: LD_INT 0
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 2
49749: NEG
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 2
49761: NEG
49762: PUSH
49763: LD_INT 2
49765: NEG
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49792: LD_ADDR_VAR 0 54
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 0
49809: PUSH
49810: LD_INT 1
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 1
49830: PUSH
49831: LD_INT 1
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 0
49840: PUSH
49841: LD_INT 1
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 1
49850: NEG
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: NEG
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 1
49873: NEG
49874: PUSH
49875: LD_INT 2
49877: NEG
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: LD_INT 2
49888: NEG
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: LD_INT 1
49899: NEG
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 2
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 2
49917: PUSH
49918: LD_INT 1
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 2
49927: PUSH
49928: LD_INT 2
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 1
49937: PUSH
49938: LD_INT 2
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: LD_INT 2
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: NEG
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 2
49968: NEG
49969: PUSH
49970: LD_INT 0
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 2
49979: NEG
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 2
49991: NEG
49992: PUSH
49993: LD_INT 2
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50022: LD_ADDR_VAR 0 55
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: LD_INT 0
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: LD_INT 1
50042: NEG
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 1
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: LD_INT 1
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 1
50103: NEG
50104: PUSH
50105: LD_INT 2
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: LD_INT 2
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 1
50126: PUSH
50127: LD_INT 1
50129: NEG
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 2
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 2
50147: PUSH
50148: LD_INT 1
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 2
50157: PUSH
50158: LD_INT 2
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 1
50167: PUSH
50168: LD_INT 2
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: LD_INT 2
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 2
50198: NEG
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 2
50209: NEG
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 2
50221: NEG
50222: PUSH
50223: LD_INT 2
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50252: LD_ADDR_VAR 0 56
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: LD_INT 1
50272: NEG
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 1
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 1
50310: NEG
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 1
50321: NEG
50322: PUSH
50323: LD_INT 1
50325: NEG
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 1
50333: NEG
50334: PUSH
50335: LD_INT 2
50337: NEG
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: LD_INT 2
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 2
50367: PUSH
50368: LD_INT 0
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 2
50377: PUSH
50378: LD_INT 1
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 2
50387: PUSH
50388: LD_INT 2
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 1
50397: PUSH
50398: LD_INT 2
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: LD_INT 2
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 1
50417: NEG
50418: PUSH
50419: LD_INT 1
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 2
50428: NEG
50429: PUSH
50430: LD_INT 0
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 2
50439: NEG
50440: PUSH
50441: LD_INT 1
50443: NEG
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 2
50451: NEG
50452: PUSH
50453: LD_INT 2
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50482: LD_ADDR_VAR 0 57
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 0
50499: PUSH
50500: LD_INT 1
50502: NEG
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 1
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 1
50540: NEG
50541: PUSH
50542: LD_INT 0
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: LD_INT 1
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 1
50563: NEG
50564: PUSH
50565: LD_INT 2
50567: NEG
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: LD_INT 2
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 1
50586: PUSH
50587: LD_INT 1
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 2
50597: PUSH
50598: LD_INT 0
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 2
50607: PUSH
50608: LD_INT 1
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 2
50617: PUSH
50618: LD_INT 2
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: LD_INT 2
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 0
50637: PUSH
50638: LD_INT 2
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: LD_INT 1
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 2
50658: NEG
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 2
50669: NEG
50670: PUSH
50671: LD_INT 1
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 2
50681: NEG
50682: PUSH
50683: LD_INT 2
50685: NEG
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50712: LD_ADDR_VAR 0 58
50716: PUSH
50717: LD_INT 0
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 1
50750: PUSH
50751: LD_INT 1
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: LD_INT 1
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 1
50781: NEG
50782: PUSH
50783: LD_INT 1
50785: NEG
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 1
50793: NEG
50794: PUSH
50795: LD_INT 2
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: LD_INT 2
50808: NEG
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: LD_INT 1
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 2
50827: PUSH
50828: LD_INT 0
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 2
50837: PUSH
50838: LD_INT 1
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 2
50847: PUSH
50848: LD_INT 2
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: LD_INT 2
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: LD_INT 2
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: LD_INT 1
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 2
50888: NEG
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 2
50899: NEG
50900: PUSH
50901: LD_INT 1
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 2
50911: NEG
50912: PUSH
50913: LD_INT 2
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50942: LD_ADDR_VAR 0 59
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 0
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: LD_INT 1
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: LD_INT 1
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 1
51000: NEG
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 1
51011: NEG
51012: PUSH
51013: LD_INT 1
51015: NEG
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51030: LD_ADDR_VAR 0 60
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: LD_INT 1
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: LD_INT 1
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 1
51088: NEG
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51118: LD_ADDR_VAR 0 61
51122: PUSH
51123: LD_INT 0
51125: PUSH
51126: LD_INT 0
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: LD_INT 1
51138: NEG
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 1
51146: PUSH
51147: LD_INT 0
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: LD_INT 1
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 0
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 1
51176: NEG
51177: PUSH
51178: LD_INT 0
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: LD_INT 1
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51206: LD_ADDR_VAR 0 62
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: LD_INT 0
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 0
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: LD_INT 0
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: LD_INT 1
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: PUSH
51266: LD_INT 0
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: NEG
51276: PUSH
51277: LD_INT 1
51279: NEG
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51294: LD_ADDR_VAR 0 63
51298: PUSH
51299: LD_INT 0
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: LD_INT 1
51314: NEG
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 1
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 1
51332: PUSH
51333: LD_INT 1
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 0
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 1
51352: NEG
51353: PUSH
51354: LD_INT 0
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 1
51363: NEG
51364: PUSH
51365: LD_INT 1
51367: NEG
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51382: LD_ADDR_VAR 0 64
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 1
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 1
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 1
51440: NEG
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: ST_TO_ADDR
// end ; 1 :
51470: GO 57367
51472: LD_INT 1
51474: DOUBLE
51475: EQUAL
51476: IFTRUE 51480
51478: GO 54103
51480: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51481: LD_ADDR_VAR 0 11
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: LD_INT 3
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: LD_INT 3
51503: NEG
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: LD_INT 2
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: LIST
51524: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51525: LD_ADDR_VAR 0 12
51529: PUSH
51530: LD_INT 2
51532: PUSH
51533: LD_INT 1
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 3
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 3
51553: PUSH
51554: LD_INT 1
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: LIST
51565: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51566: LD_ADDR_VAR 0 13
51570: PUSH
51571: LD_INT 3
51573: PUSH
51574: LD_INT 2
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 3
51583: PUSH
51584: LD_INT 3
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 2
51593: PUSH
51594: LD_INT 3
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: LIST
51605: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51606: LD_ADDR_VAR 0 14
51610: PUSH
51611: LD_INT 1
51613: PUSH
51614: LD_INT 3
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 0
51623: PUSH
51624: LD_INT 3
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 1
51633: NEG
51634: PUSH
51635: LD_INT 2
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: LIST
51646: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51647: LD_ADDR_VAR 0 15
51651: PUSH
51652: LD_INT 2
51654: NEG
51655: PUSH
51656: LD_INT 1
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 3
51665: NEG
51666: PUSH
51667: LD_INT 0
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 3
51676: NEG
51677: PUSH
51678: LD_INT 1
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: LIST
51690: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51691: LD_ADDR_VAR 0 16
51695: PUSH
51696: LD_INT 2
51698: NEG
51699: PUSH
51700: LD_INT 3
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 3
51710: NEG
51711: PUSH
51712: LD_INT 2
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 3
51722: NEG
51723: PUSH
51724: LD_INT 3
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: LIST
51736: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51737: LD_ADDR_VAR 0 17
51741: PUSH
51742: LD_INT 1
51744: NEG
51745: PUSH
51746: LD_INT 3
51748: NEG
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: LD_INT 3
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 1
51767: PUSH
51768: LD_INT 2
51770: NEG
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: LIST
51780: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51781: LD_ADDR_VAR 0 18
51785: PUSH
51786: LD_INT 2
51788: PUSH
51789: LD_INT 1
51791: NEG
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 3
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 3
51809: PUSH
51810: LD_INT 1
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: LIST
51821: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51822: LD_ADDR_VAR 0 19
51826: PUSH
51827: LD_INT 3
51829: PUSH
51830: LD_INT 2
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 3
51839: PUSH
51840: LD_INT 3
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 2
51849: PUSH
51850: LD_INT 3
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: LIST
51861: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51862: LD_ADDR_VAR 0 20
51866: PUSH
51867: LD_INT 1
51869: PUSH
51870: LD_INT 3
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: LD_INT 3
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 1
51889: NEG
51890: PUSH
51891: LD_INT 2
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: LIST
51902: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51903: LD_ADDR_VAR 0 21
51907: PUSH
51908: LD_INT 2
51910: NEG
51911: PUSH
51912: LD_INT 1
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 3
51921: NEG
51922: PUSH
51923: LD_INT 0
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 3
51932: NEG
51933: PUSH
51934: LD_INT 1
51936: NEG
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: LIST
51946: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51947: LD_ADDR_VAR 0 22
51951: PUSH
51952: LD_INT 2
51954: NEG
51955: PUSH
51956: LD_INT 3
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 3
51966: NEG
51967: PUSH
51968: LD_INT 2
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 3
51978: NEG
51979: PUSH
51980: LD_INT 3
51982: NEG
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: LIST
51992: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51993: LD_ADDR_VAR 0 23
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: LD_INT 3
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: PUSH
52013: LD_INT 4
52015: NEG
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: LD_INT 3
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: LIST
52036: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52037: LD_ADDR_VAR 0 24
52041: PUSH
52042: LD_INT 3
52044: PUSH
52045: LD_INT 0
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 3
52054: PUSH
52055: LD_INT 1
52057: NEG
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 4
52065: PUSH
52066: LD_INT 1
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: LIST
52077: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52078: LD_ADDR_VAR 0 25
52082: PUSH
52083: LD_INT 3
52085: PUSH
52086: LD_INT 3
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 4
52095: PUSH
52096: LD_INT 3
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 3
52105: PUSH
52106: LD_INT 4
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: LIST
52117: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52118: LD_ADDR_VAR 0 26
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: LD_INT 3
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: LD_INT 4
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 1
52145: NEG
52146: PUSH
52147: LD_INT 3
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: LIST
52158: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52159: LD_ADDR_VAR 0 27
52163: PUSH
52164: LD_INT 3
52166: NEG
52167: PUSH
52168: LD_INT 0
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 3
52177: NEG
52178: PUSH
52179: LD_INT 1
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 4
52188: NEG
52189: PUSH
52190: LD_INT 1
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: LIST
52202: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52203: LD_ADDR_VAR 0 28
52207: PUSH
52208: LD_INT 3
52210: NEG
52211: PUSH
52212: LD_INT 3
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 3
52222: NEG
52223: PUSH
52224: LD_INT 4
52226: NEG
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 4
52234: NEG
52235: PUSH
52236: LD_INT 3
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: LIST
52248: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52249: LD_ADDR_VAR 0 29
52253: PUSH
52254: LD_INT 1
52256: NEG
52257: PUSH
52258: LD_INT 3
52260: NEG
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 0
52268: PUSH
52269: LD_INT 3
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: PUSH
52280: LD_INT 2
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: NEG
52291: PUSH
52292: LD_INT 4
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: LD_INT 4
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 1
52313: PUSH
52314: LD_INT 3
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: NEG
52325: PUSH
52326: LD_INT 5
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 0
52336: PUSH
52337: LD_INT 5
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 1
52347: PUSH
52348: LD_INT 4
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: NEG
52359: PUSH
52360: LD_INT 6
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: LD_INT 6
52373: NEG
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: LD_INT 5
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52404: LD_ADDR_VAR 0 30
52408: PUSH
52409: LD_INT 2
52411: PUSH
52412: LD_INT 1
52414: NEG
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 3
52422: PUSH
52423: LD_INT 0
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 3
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 3
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 4
52453: PUSH
52454: LD_INT 0
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 4
52463: PUSH
52464: LD_INT 1
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 4
52473: PUSH
52474: LD_INT 1
52476: NEG
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 5
52484: PUSH
52485: LD_INT 0
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 5
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 5
52504: PUSH
52505: LD_INT 1
52507: NEG
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 6
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 6
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52547: LD_ADDR_VAR 0 31
52551: PUSH
52552: LD_INT 3
52554: PUSH
52555: LD_INT 2
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 3
52564: PUSH
52565: LD_INT 3
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 2
52574: PUSH
52575: LD_INT 3
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 4
52584: PUSH
52585: LD_INT 3
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 4
52594: PUSH
52595: LD_INT 4
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 3
52604: PUSH
52605: LD_INT 4
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 5
52614: PUSH
52615: LD_INT 4
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 5
52624: PUSH
52625: LD_INT 5
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 4
52634: PUSH
52635: LD_INT 5
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 6
52644: PUSH
52645: LD_INT 5
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 6
52654: PUSH
52655: LD_INT 6
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 5
52664: PUSH
52665: LD_INT 6
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52686: LD_ADDR_VAR 0 32
52690: PUSH
52691: LD_INT 1
52693: PUSH
52694: LD_INT 3
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 0
52703: PUSH
52704: LD_INT 3
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: LD_INT 2
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: LD_INT 4
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: LD_INT 4
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: LD_INT 3
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: LD_INT 5
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: LD_INT 5
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 1
52775: NEG
52776: PUSH
52777: LD_INT 4
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: LD_INT 6
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: LD_INT 6
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: LD_INT 5
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52829: LD_ADDR_VAR 0 33
52833: PUSH
52834: LD_INT 2
52836: NEG
52837: PUSH
52838: LD_INT 1
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 3
52847: NEG
52848: PUSH
52849: LD_INT 0
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 3
52858: NEG
52859: PUSH
52860: LD_INT 1
52862: NEG
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 3
52870: NEG
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 4
52881: NEG
52882: PUSH
52883: LD_INT 0
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 4
52892: NEG
52893: PUSH
52894: LD_INT 1
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 4
52904: NEG
52905: PUSH
52906: LD_INT 1
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 5
52915: NEG
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 5
52926: NEG
52927: PUSH
52928: LD_INT 1
52930: NEG
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 5
52938: NEG
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 6
52949: NEG
52950: PUSH
52951: LD_INT 0
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 6
52960: NEG
52961: PUSH
52962: LD_INT 1
52964: NEG
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52984: LD_ADDR_VAR 0 34
52988: PUSH
52989: LD_INT 2
52991: NEG
52992: PUSH
52993: LD_INT 3
52995: NEG
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 3
53003: NEG
53004: PUSH
53005: LD_INT 2
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 3
53015: NEG
53016: PUSH
53017: LD_INT 3
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 3
53027: NEG
53028: PUSH
53029: LD_INT 4
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 4
53039: NEG
53040: PUSH
53041: LD_INT 3
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 4
53051: NEG
53052: PUSH
53053: LD_INT 4
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 4
53063: NEG
53064: PUSH
53065: LD_INT 5
53067: NEG
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 5
53075: NEG
53076: PUSH
53077: LD_INT 4
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 5
53087: NEG
53088: PUSH
53089: LD_INT 5
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 5
53099: NEG
53100: PUSH
53101: LD_INT 6
53103: NEG
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 6
53111: NEG
53112: PUSH
53113: LD_INT 5
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 6
53123: NEG
53124: PUSH
53125: LD_INT 6
53127: NEG
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53147: LD_ADDR_VAR 0 41
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: LD_INT 2
53157: NEG
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 1
53165: NEG
53166: PUSH
53167: LD_INT 3
53169: NEG
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 1
53177: PUSH
53178: LD_INT 2
53180: NEG
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: LIST
53190: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53191: LD_ADDR_VAR 0 42
53195: PUSH
53196: LD_INT 2
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 2
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 3
53219: PUSH
53220: LD_INT 1
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: LIST
53231: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53232: LD_ADDR_VAR 0 43
53236: PUSH
53237: LD_INT 2
53239: PUSH
53240: LD_INT 2
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 3
53249: PUSH
53250: LD_INT 2
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 2
53259: PUSH
53260: LD_INT 3
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: LIST
53271: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53272: LD_ADDR_VAR 0 44
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: LD_INT 2
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: LD_INT 3
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 1
53299: NEG
53300: PUSH
53301: LD_INT 2
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: LIST
53312: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53313: LD_ADDR_VAR 0 45
53317: PUSH
53318: LD_INT 2
53320: NEG
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 2
53331: NEG
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 3
53342: NEG
53343: PUSH
53344: LD_INT 1
53346: NEG
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: LIST
53356: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53357: LD_ADDR_VAR 0 46
53361: PUSH
53362: LD_INT 2
53364: NEG
53365: PUSH
53366: LD_INT 2
53368: NEG
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 2
53376: NEG
53377: PUSH
53378: LD_INT 3
53380: NEG
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 3
53388: NEG
53389: PUSH
53390: LD_INT 2
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: LIST
53402: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53403: LD_ADDR_VAR 0 47
53407: PUSH
53408: LD_INT 2
53410: NEG
53411: PUSH
53412: LD_INT 3
53414: NEG
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 1
53422: NEG
53423: PUSH
53424: LD_INT 3
53426: NEG
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53436: LD_ADDR_VAR 0 48
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: LD_INT 2
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 2
53454: PUSH
53455: LD_INT 1
53457: NEG
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53467: LD_ADDR_VAR 0 49
53471: PUSH
53472: LD_INT 3
53474: PUSH
53475: LD_INT 1
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 3
53484: PUSH
53485: LD_INT 2
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53496: LD_ADDR_VAR 0 50
53500: PUSH
53501: LD_INT 2
53503: PUSH
53504: LD_INT 3
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 1
53513: PUSH
53514: LD_INT 3
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53525: LD_ADDR_VAR 0 51
53529: PUSH
53530: LD_INT 1
53532: NEG
53533: PUSH
53534: LD_INT 2
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 2
53543: NEG
53544: PUSH
53545: LD_INT 1
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53556: LD_ADDR_VAR 0 52
53560: PUSH
53561: LD_INT 3
53563: NEG
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 3
53575: NEG
53576: PUSH
53577: LD_INT 2
53579: NEG
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53589: LD_ADDR_VAR 0 53
53593: PUSH
53594: LD_INT 1
53596: NEG
53597: PUSH
53598: LD_INT 3
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 0
53608: PUSH
53609: LD_INT 3
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 1
53619: PUSH
53620: LD_INT 2
53622: NEG
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: LIST
53632: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53633: LD_ADDR_VAR 0 54
53637: PUSH
53638: LD_INT 2
53640: PUSH
53641: LD_INT 1
53643: NEG
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 3
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 3
53661: PUSH
53662: LD_INT 1
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: LIST
53673: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53674: LD_ADDR_VAR 0 55
53678: PUSH
53679: LD_INT 3
53681: PUSH
53682: LD_INT 2
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 3
53691: PUSH
53692: LD_INT 3
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 2
53701: PUSH
53702: LD_INT 3
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: LIST
53713: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53714: LD_ADDR_VAR 0 56
53718: PUSH
53719: LD_INT 1
53721: PUSH
53722: LD_INT 3
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: LD_INT 3
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 1
53741: NEG
53742: PUSH
53743: LD_INT 2
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: LIST
53754: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53755: LD_ADDR_VAR 0 57
53759: PUSH
53760: LD_INT 2
53762: NEG
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 3
53773: NEG
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 3
53784: NEG
53785: PUSH
53786: LD_INT 1
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: LIST
53798: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53799: LD_ADDR_VAR 0 58
53803: PUSH
53804: LD_INT 2
53806: NEG
53807: PUSH
53808: LD_INT 3
53810: NEG
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 3
53818: NEG
53819: PUSH
53820: LD_INT 2
53822: NEG
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 3
53830: NEG
53831: PUSH
53832: LD_INT 3
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: LIST
53844: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53845: LD_ADDR_VAR 0 59
53849: PUSH
53850: LD_INT 1
53852: NEG
53853: PUSH
53854: LD_INT 2
53856: NEG
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: LD_INT 2
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 1
53875: PUSH
53876: LD_INT 1
53878: NEG
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: LIST
53888: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53889: LD_ADDR_VAR 0 60
53893: PUSH
53894: LD_INT 1
53896: PUSH
53897: LD_INT 1
53899: NEG
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 2
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 2
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: LIST
53929: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53930: LD_ADDR_VAR 0 61
53934: PUSH
53935: LD_INT 2
53937: PUSH
53938: LD_INT 1
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 2
53947: PUSH
53948: LD_INT 2
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: LD_INT 2
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: LIST
53969: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53970: LD_ADDR_VAR 0 62
53974: PUSH
53975: LD_INT 1
53977: PUSH
53978: LD_INT 2
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 0
53987: PUSH
53988: LD_INT 2
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 1
53997: NEG
53998: PUSH
53999: LD_INT 1
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: LIST
54010: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54011: LD_ADDR_VAR 0 63
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: PUSH
54020: LD_INT 1
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 2
54029: NEG
54030: PUSH
54031: LD_INT 0
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 2
54040: NEG
54041: PUSH
54042: LD_INT 1
54044: NEG
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: LIST
54054: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54055: LD_ADDR_VAR 0 64
54059: PUSH
54060: LD_INT 1
54062: NEG
54063: PUSH
54064: LD_INT 2
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 2
54074: NEG
54075: PUSH
54076: LD_INT 1
54078: NEG
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 2
54086: NEG
54087: PUSH
54088: LD_INT 2
54090: NEG
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: LIST
54100: ST_TO_ADDR
// end ; 2 :
54101: GO 57367
54103: LD_INT 2
54105: DOUBLE
54106: EQUAL
54107: IFTRUE 54111
54109: GO 57366
54111: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54112: LD_ADDR_VAR 0 29
54116: PUSH
54117: LD_INT 4
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 4
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 5
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 5
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 4
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 3
54170: PUSH
54171: LD_INT 0
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 3
54180: PUSH
54181: LD_INT 1
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 3
54191: PUSH
54192: LD_INT 2
54194: NEG
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 5
54202: PUSH
54203: LD_INT 2
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 3
54212: PUSH
54213: LD_INT 3
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 3
54222: PUSH
54223: LD_INT 2
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 4
54232: PUSH
54233: LD_INT 3
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 4
54242: PUSH
54243: LD_INT 4
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 3
54252: PUSH
54253: LD_INT 4
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 2
54262: PUSH
54263: LD_INT 3
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 2
54272: PUSH
54273: LD_INT 2
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 4
54282: PUSH
54283: LD_INT 2
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 2
54292: PUSH
54293: LD_INT 4
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: LD_INT 4
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: LD_INT 3
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: LD_INT 4
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 1
54332: PUSH
54333: LD_INT 5
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: LD_INT 5
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 1
54352: NEG
54353: PUSH
54354: LD_INT 4
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 1
54363: NEG
54364: PUSH
54365: LD_INT 3
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 2
54374: PUSH
54375: LD_INT 5
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 2
54384: NEG
54385: PUSH
54386: LD_INT 3
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 3
54395: NEG
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 3
54406: NEG
54407: PUSH
54408: LD_INT 1
54410: NEG
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 2
54418: NEG
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 2
54429: NEG
54430: PUSH
54431: LD_INT 1
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 3
54440: NEG
54441: PUSH
54442: LD_INT 1
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 4
54451: NEG
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 4
54462: NEG
54463: PUSH
54464: LD_INT 1
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 4
54474: NEG
54475: PUSH
54476: LD_INT 2
54478: NEG
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 2
54486: NEG
54487: PUSH
54488: LD_INT 2
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 4
54497: NEG
54498: PUSH
54499: LD_INT 4
54501: NEG
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 4
54509: NEG
54510: PUSH
54511: LD_INT 5
54513: NEG
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 3
54521: NEG
54522: PUSH
54523: LD_INT 4
54525: NEG
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 3
54533: NEG
54534: PUSH
54535: LD_INT 3
54537: NEG
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 4
54545: NEG
54546: PUSH
54547: LD_INT 3
54549: NEG
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 5
54557: NEG
54558: PUSH
54559: LD_INT 4
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 5
54569: NEG
54570: PUSH
54571: LD_INT 5
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 3
54581: NEG
54582: PUSH
54583: LD_INT 5
54585: NEG
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 5
54593: NEG
54594: PUSH
54595: LD_INT 3
54597: NEG
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54650: LD_ADDR_VAR 0 30
54654: PUSH
54655: LD_INT 4
54657: PUSH
54658: LD_INT 4
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 4
54667: PUSH
54668: LD_INT 3
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 5
54677: PUSH
54678: LD_INT 4
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 5
54687: PUSH
54688: LD_INT 5
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 4
54697: PUSH
54698: LD_INT 5
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 3
54707: PUSH
54708: LD_INT 4
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 3
54717: PUSH
54718: LD_INT 3
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 5
54727: PUSH
54728: LD_INT 3
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 3
54737: PUSH
54738: LD_INT 5
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: LD_INT 3
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: LD_INT 2
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 1
54767: PUSH
54768: LD_INT 3
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 1
54777: PUSH
54778: LD_INT 4
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 0
54787: PUSH
54788: LD_INT 4
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 1
54797: NEG
54798: PUSH
54799: LD_INT 3
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 1
54808: NEG
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 2
54819: PUSH
54820: LD_INT 4
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 2
54829: NEG
54830: PUSH
54831: LD_INT 2
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 4
54840: NEG
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 4
54851: NEG
54852: PUSH
54853: LD_INT 1
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 3
54863: NEG
54864: PUSH
54865: LD_INT 0
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 3
54874: NEG
54875: PUSH
54876: LD_INT 1
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 4
54885: NEG
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 5
54896: NEG
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 5
54907: NEG
54908: PUSH
54909: LD_INT 1
54911: NEG
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 5
54919: NEG
54920: PUSH
54921: LD_INT 2
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 3
54931: NEG
54932: PUSH
54933: LD_INT 2
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 3
54942: NEG
54943: PUSH
54944: LD_INT 3
54946: NEG
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 3
54954: NEG
54955: PUSH
54956: LD_INT 4
54958: NEG
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 2
54966: NEG
54967: PUSH
54968: LD_INT 3
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 2
54978: NEG
54979: PUSH
54980: LD_INT 2
54982: NEG
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 3
54990: NEG
54991: PUSH
54992: LD_INT 2
54994: NEG
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 4
55002: NEG
55003: PUSH
55004: LD_INT 3
55006: NEG
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 4
55014: NEG
55015: PUSH
55016: LD_INT 4
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 2
55026: NEG
55027: PUSH
55028: LD_INT 4
55030: NEG
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 4
55038: NEG
55039: PUSH
55040: LD_INT 2
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: LD_INT 4
55053: NEG
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 0
55061: PUSH
55062: LD_INT 5
55064: NEG
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 1
55072: PUSH
55073: LD_INT 4
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 1
55083: PUSH
55084: LD_INT 3
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 0
55094: PUSH
55095: LD_INT 3
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: LD_INT 4
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 1
55117: NEG
55118: PUSH
55119: LD_INT 5
55121: NEG
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 2
55129: PUSH
55130: LD_INT 3
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 2
55140: NEG
55141: PUSH
55142: LD_INT 5
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55197: LD_ADDR_VAR 0 31
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: LD_INT 4
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: LD_INT 3
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 1
55224: PUSH
55225: LD_INT 4
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: LD_INT 5
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 0
55244: PUSH
55245: LD_INT 5
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 1
55254: NEG
55255: PUSH
55256: LD_INT 4
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 1
55265: NEG
55266: PUSH
55267: LD_INT 3
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 2
55276: PUSH
55277: LD_INT 5
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 2
55286: NEG
55287: PUSH
55288: LD_INT 3
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 3
55297: NEG
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 3
55308: NEG
55309: PUSH
55310: LD_INT 1
55312: NEG
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 2
55320: NEG
55321: PUSH
55322: LD_INT 0
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 2
55331: NEG
55332: PUSH
55333: LD_INT 1
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 3
55342: NEG
55343: PUSH
55344: LD_INT 1
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 4
55353: NEG
55354: PUSH
55355: LD_INT 0
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 4
55364: NEG
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 4
55376: NEG
55377: PUSH
55378: LD_INT 2
55380: NEG
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 2
55388: NEG
55389: PUSH
55390: LD_INT 2
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 4
55399: NEG
55400: PUSH
55401: LD_INT 4
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 4
55411: NEG
55412: PUSH
55413: LD_INT 5
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 3
55423: NEG
55424: PUSH
55425: LD_INT 4
55427: NEG
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 3
55435: NEG
55436: PUSH
55437: LD_INT 3
55439: NEG
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 4
55447: NEG
55448: PUSH
55449: LD_INT 3
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 5
55459: NEG
55460: PUSH
55461: LD_INT 4
55463: NEG
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 5
55471: NEG
55472: PUSH
55473: LD_INT 5
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 3
55483: NEG
55484: PUSH
55485: LD_INT 5
55487: NEG
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 5
55495: NEG
55496: PUSH
55497: LD_INT 3
55499: NEG
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: LD_INT 3
55510: NEG
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 0
55518: PUSH
55519: LD_INT 4
55521: NEG
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: LD_INT 3
55532: NEG
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 1
55540: PUSH
55541: LD_INT 2
55543: NEG
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: LD_INT 2
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: LD_INT 3
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 1
55574: NEG
55575: PUSH
55576: LD_INT 4
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 2
55586: PUSH
55587: LD_INT 2
55589: NEG
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 2
55597: NEG
55598: PUSH
55599: LD_INT 4
55601: NEG
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 4
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 4
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 5
55630: PUSH
55631: LD_INT 0
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 5
55640: PUSH
55641: LD_INT 1
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 4
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 3
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 3
55670: PUSH
55671: LD_INT 1
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 3
55681: PUSH
55682: LD_INT 2
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 5
55692: PUSH
55693: LD_INT 2
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55747: LD_ADDR_VAR 0 32
55751: PUSH
55752: LD_INT 4
55754: NEG
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 4
55765: NEG
55766: PUSH
55767: LD_INT 1
55769: NEG
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 3
55777: NEG
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 3
55788: NEG
55789: PUSH
55790: LD_INT 1
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 4
55799: NEG
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 5
55810: NEG
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 5
55821: NEG
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 5
55833: NEG
55834: PUSH
55835: LD_INT 2
55837: NEG
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 3
55845: NEG
55846: PUSH
55847: LD_INT 2
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 3
55856: NEG
55857: PUSH
55858: LD_INT 3
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 3
55868: NEG
55869: PUSH
55870: LD_INT 4
55872: NEG
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 2
55880: NEG
55881: PUSH
55882: LD_INT 3
55884: NEG
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 2
55892: NEG
55893: PUSH
55894: LD_INT 2
55896: NEG
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 3
55904: NEG
55905: PUSH
55906: LD_INT 2
55908: NEG
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 4
55916: NEG
55917: PUSH
55918: LD_INT 3
55920: NEG
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 4
55928: NEG
55929: PUSH
55930: LD_INT 4
55932: NEG
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 2
55940: NEG
55941: PUSH
55942: LD_INT 4
55944: NEG
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 4
55952: NEG
55953: PUSH
55954: LD_INT 2
55956: NEG
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: LD_INT 4
55967: NEG
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: LD_INT 5
55978: NEG
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: LD_INT 4
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 1
55997: PUSH
55998: LD_INT 3
56000: NEG
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: LD_INT 3
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: LD_INT 4
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 1
56031: NEG
56032: PUSH
56033: LD_INT 5
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 2
56043: PUSH
56044: LD_INT 3
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 2
56054: NEG
56055: PUSH
56056: LD_INT 5
56058: NEG
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 3
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 3
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 4
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 4
56097: PUSH
56098: LD_INT 1
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 3
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 2
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 2
56127: PUSH
56128: LD_INT 1
56130: NEG
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 2
56138: PUSH
56139: LD_INT 2
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 4
56149: PUSH
56150: LD_INT 2
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 4
56159: PUSH
56160: LD_INT 4
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 4
56169: PUSH
56170: LD_INT 3
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 5
56179: PUSH
56180: LD_INT 4
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 5
56189: PUSH
56190: LD_INT 5
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 4
56199: PUSH
56200: LD_INT 5
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 3
56209: PUSH
56210: LD_INT 4
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 3
56219: PUSH
56220: LD_INT 3
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 5
56229: PUSH
56230: LD_INT 3
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 3
56239: PUSH
56240: LD_INT 5
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56294: LD_ADDR_VAR 0 33
56298: PUSH
56299: LD_INT 4
56301: NEG
56302: PUSH
56303: LD_INT 4
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 4
56313: NEG
56314: PUSH
56315: LD_INT 5
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 3
56325: NEG
56326: PUSH
56327: LD_INT 4
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 3
56337: NEG
56338: PUSH
56339: LD_INT 3
56341: NEG
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 4
56349: NEG
56350: PUSH
56351: LD_INT 3
56353: NEG
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 5
56361: NEG
56362: PUSH
56363: LD_INT 4
56365: NEG
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 5
56373: NEG
56374: PUSH
56375: LD_INT 5
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 3
56385: NEG
56386: PUSH
56387: LD_INT 5
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 5
56397: NEG
56398: PUSH
56399: LD_INT 3
56401: NEG
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 0
56409: PUSH
56410: LD_INT 3
56412: NEG
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: LD_INT 4
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: LD_INT 3
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: PUSH
56443: LD_INT 2
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: LD_INT 2
56456: NEG
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: LD_INT 3
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: LD_INT 4
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 2
56488: PUSH
56489: LD_INT 2
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 2
56499: NEG
56500: PUSH
56501: LD_INT 4
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 4
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 4
56521: PUSH
56522: LD_INT 1
56524: NEG
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 5
56532: PUSH
56533: LD_INT 0
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 5
56542: PUSH
56543: LD_INT 1
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 4
56552: PUSH
56553: LD_INT 1
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 3
56562: PUSH
56563: LD_INT 0
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 3
56572: PUSH
56573: LD_INT 1
56575: NEG
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 3
56583: PUSH
56584: LD_INT 2
56586: NEG
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 5
56594: PUSH
56595: LD_INT 2
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 3
56604: PUSH
56605: LD_INT 3
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 3
56614: PUSH
56615: LD_INT 2
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 4
56624: PUSH
56625: LD_INT 3
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 4
56634: PUSH
56635: LD_INT 4
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 3
56644: PUSH
56645: LD_INT 4
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 2
56654: PUSH
56655: LD_INT 3
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 2
56664: PUSH
56665: LD_INT 2
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 4
56674: PUSH
56675: LD_INT 2
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 2
56684: PUSH
56685: LD_INT 4
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: LD_INT 4
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: LD_INT 3
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: LD_INT 4
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 1
56724: PUSH
56725: LD_INT 5
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: LD_INT 5
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: NEG
56745: PUSH
56746: LD_INT 4
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 1
56755: NEG
56756: PUSH
56757: LD_INT 3
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 2
56766: PUSH
56767: LD_INT 5
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 2
56776: NEG
56777: PUSH
56778: LD_INT 3
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56832: LD_ADDR_VAR 0 34
56836: PUSH
56837: LD_INT 0
56839: PUSH
56840: LD_INT 4
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: LD_INT 5
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: LD_INT 4
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: LD_INT 3
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: LD_INT 3
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: NEG
56895: PUSH
56896: LD_INT 4
56898: NEG
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 1
56906: NEG
56907: PUSH
56908: LD_INT 5
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 2
56918: PUSH
56919: LD_INT 3
56921: NEG
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 2
56929: NEG
56930: PUSH
56931: LD_INT 5
56933: NEG
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 3
56941: PUSH
56942: LD_INT 0
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 3
56951: PUSH
56952: LD_INT 1
56954: NEG
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 4
56962: PUSH
56963: LD_INT 0
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 4
56972: PUSH
56973: LD_INT 1
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 3
56982: PUSH
56983: LD_INT 1
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 2
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 2
57002: PUSH
57003: LD_INT 1
57005: NEG
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 2
57013: PUSH
57014: LD_INT 2
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 4
57024: PUSH
57025: LD_INT 2
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 4
57034: PUSH
57035: LD_INT 4
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 4
57044: PUSH
57045: LD_INT 3
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 5
57054: PUSH
57055: LD_INT 4
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 5
57064: PUSH
57065: LD_INT 5
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 4
57074: PUSH
57075: LD_INT 5
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 3
57084: PUSH
57085: LD_INT 4
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 3
57094: PUSH
57095: LD_INT 3
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 5
57104: PUSH
57105: LD_INT 3
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 3
57114: PUSH
57115: LD_INT 5
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: LD_INT 3
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 0
57134: PUSH
57135: LD_INT 2
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: PUSH
57145: LD_INT 3
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 1
57154: PUSH
57155: LD_INT 4
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 0
57164: PUSH
57165: LD_INT 4
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 1
57174: NEG
57175: PUSH
57176: LD_INT 3
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 1
57185: NEG
57186: PUSH
57187: LD_INT 2
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 2
57196: PUSH
57197: LD_INT 4
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 2
57206: NEG
57207: PUSH
57208: LD_INT 2
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 4
57217: NEG
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 4
57228: NEG
57229: PUSH
57230: LD_INT 1
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 3
57240: NEG
57241: PUSH
57242: LD_INT 0
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 3
57251: NEG
57252: PUSH
57253: LD_INT 1
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 4
57262: NEG
57263: PUSH
57264: LD_INT 1
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 5
57273: NEG
57274: PUSH
57275: LD_INT 0
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 5
57284: NEG
57285: PUSH
57286: LD_INT 1
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 5
57296: NEG
57297: PUSH
57298: LD_INT 2
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 3
57308: NEG
57309: PUSH
57310: LD_INT 2
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: ST_TO_ADDR
// end ; end ;
57364: GO 57367
57366: POP
// case btype of b_depot , b_warehouse :
57367: LD_VAR 0 1
57371: PUSH
57372: LD_INT 0
57374: DOUBLE
57375: EQUAL
57376: IFTRUE 57386
57378: LD_INT 1
57380: DOUBLE
57381: EQUAL
57382: IFTRUE 57386
57384: GO 57587
57386: POP
// case nation of nation_american :
57387: LD_VAR 0 5
57391: PUSH
57392: LD_INT 1
57394: DOUBLE
57395: EQUAL
57396: IFTRUE 57400
57398: GO 57456
57400: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
57401: LD_ADDR_VAR 0 9
57405: PUSH
57406: LD_VAR 0 11
57410: PUSH
57411: LD_VAR 0 12
57415: PUSH
57416: LD_VAR 0 13
57420: PUSH
57421: LD_VAR 0 14
57425: PUSH
57426: LD_VAR 0 15
57430: PUSH
57431: LD_VAR 0 16
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: PUSH
57444: LD_VAR 0 4
57448: PUSH
57449: LD_INT 1
57451: PLUS
57452: ARRAY
57453: ST_TO_ADDR
57454: GO 57585
57456: LD_INT 2
57458: DOUBLE
57459: EQUAL
57460: IFTRUE 57464
57462: GO 57520
57464: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
57465: LD_ADDR_VAR 0 9
57469: PUSH
57470: LD_VAR 0 17
57474: PUSH
57475: LD_VAR 0 18
57479: PUSH
57480: LD_VAR 0 19
57484: PUSH
57485: LD_VAR 0 20
57489: PUSH
57490: LD_VAR 0 21
57494: PUSH
57495: LD_VAR 0 22
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: PUSH
57508: LD_VAR 0 4
57512: PUSH
57513: LD_INT 1
57515: PLUS
57516: ARRAY
57517: ST_TO_ADDR
57518: GO 57585
57520: LD_INT 3
57522: DOUBLE
57523: EQUAL
57524: IFTRUE 57528
57526: GO 57584
57528: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57529: LD_ADDR_VAR 0 9
57533: PUSH
57534: LD_VAR 0 23
57538: PUSH
57539: LD_VAR 0 24
57543: PUSH
57544: LD_VAR 0 25
57548: PUSH
57549: LD_VAR 0 26
57553: PUSH
57554: LD_VAR 0 27
57558: PUSH
57559: LD_VAR 0 28
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: PUSH
57572: LD_VAR 0 4
57576: PUSH
57577: LD_INT 1
57579: PLUS
57580: ARRAY
57581: ST_TO_ADDR
57582: GO 57585
57584: POP
57585: GO 58140
57587: LD_INT 2
57589: DOUBLE
57590: EQUAL
57591: IFTRUE 57601
57593: LD_INT 3
57595: DOUBLE
57596: EQUAL
57597: IFTRUE 57601
57599: GO 57657
57601: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57602: LD_ADDR_VAR 0 9
57606: PUSH
57607: LD_VAR 0 29
57611: PUSH
57612: LD_VAR 0 30
57616: PUSH
57617: LD_VAR 0 31
57621: PUSH
57622: LD_VAR 0 32
57626: PUSH
57627: LD_VAR 0 33
57631: PUSH
57632: LD_VAR 0 34
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: PUSH
57645: LD_VAR 0 4
57649: PUSH
57650: LD_INT 1
57652: PLUS
57653: ARRAY
57654: ST_TO_ADDR
57655: GO 58140
57657: LD_INT 16
57659: DOUBLE
57660: EQUAL
57661: IFTRUE 57719
57663: LD_INT 17
57665: DOUBLE
57666: EQUAL
57667: IFTRUE 57719
57669: LD_INT 18
57671: DOUBLE
57672: EQUAL
57673: IFTRUE 57719
57675: LD_INT 19
57677: DOUBLE
57678: EQUAL
57679: IFTRUE 57719
57681: LD_INT 22
57683: DOUBLE
57684: EQUAL
57685: IFTRUE 57719
57687: LD_INT 20
57689: DOUBLE
57690: EQUAL
57691: IFTRUE 57719
57693: LD_INT 21
57695: DOUBLE
57696: EQUAL
57697: IFTRUE 57719
57699: LD_INT 23
57701: DOUBLE
57702: EQUAL
57703: IFTRUE 57719
57705: LD_INT 24
57707: DOUBLE
57708: EQUAL
57709: IFTRUE 57719
57711: LD_INT 25
57713: DOUBLE
57714: EQUAL
57715: IFTRUE 57719
57717: GO 57775
57719: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57720: LD_ADDR_VAR 0 9
57724: PUSH
57725: LD_VAR 0 35
57729: PUSH
57730: LD_VAR 0 36
57734: PUSH
57735: LD_VAR 0 37
57739: PUSH
57740: LD_VAR 0 38
57744: PUSH
57745: LD_VAR 0 39
57749: PUSH
57750: LD_VAR 0 40
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: PUSH
57763: LD_VAR 0 4
57767: PUSH
57768: LD_INT 1
57770: PLUS
57771: ARRAY
57772: ST_TO_ADDR
57773: GO 58140
57775: LD_INT 6
57777: DOUBLE
57778: EQUAL
57779: IFTRUE 57831
57781: LD_INT 7
57783: DOUBLE
57784: EQUAL
57785: IFTRUE 57831
57787: LD_INT 8
57789: DOUBLE
57790: EQUAL
57791: IFTRUE 57831
57793: LD_INT 13
57795: DOUBLE
57796: EQUAL
57797: IFTRUE 57831
57799: LD_INT 12
57801: DOUBLE
57802: EQUAL
57803: IFTRUE 57831
57805: LD_INT 15
57807: DOUBLE
57808: EQUAL
57809: IFTRUE 57831
57811: LD_INT 11
57813: DOUBLE
57814: EQUAL
57815: IFTRUE 57831
57817: LD_INT 14
57819: DOUBLE
57820: EQUAL
57821: IFTRUE 57831
57823: LD_INT 10
57825: DOUBLE
57826: EQUAL
57827: IFTRUE 57831
57829: GO 57887
57831: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
57832: LD_ADDR_VAR 0 9
57836: PUSH
57837: LD_VAR 0 41
57841: PUSH
57842: LD_VAR 0 42
57846: PUSH
57847: LD_VAR 0 43
57851: PUSH
57852: LD_VAR 0 44
57856: PUSH
57857: LD_VAR 0 45
57861: PUSH
57862: LD_VAR 0 46
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: PUSH
57875: LD_VAR 0 4
57879: PUSH
57880: LD_INT 1
57882: PLUS
57883: ARRAY
57884: ST_TO_ADDR
57885: GO 58140
57887: LD_INT 36
57889: DOUBLE
57890: EQUAL
57891: IFTRUE 57895
57893: GO 57951
57895: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57896: LD_ADDR_VAR 0 9
57900: PUSH
57901: LD_VAR 0 47
57905: PUSH
57906: LD_VAR 0 48
57910: PUSH
57911: LD_VAR 0 49
57915: PUSH
57916: LD_VAR 0 50
57920: PUSH
57921: LD_VAR 0 51
57925: PUSH
57926: LD_VAR 0 52
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: PUSH
57939: LD_VAR 0 4
57943: PUSH
57944: LD_INT 1
57946: PLUS
57947: ARRAY
57948: ST_TO_ADDR
57949: GO 58140
57951: LD_INT 4
57953: DOUBLE
57954: EQUAL
57955: IFTRUE 57977
57957: LD_INT 5
57959: DOUBLE
57960: EQUAL
57961: IFTRUE 57977
57963: LD_INT 34
57965: DOUBLE
57966: EQUAL
57967: IFTRUE 57977
57969: LD_INT 37
57971: DOUBLE
57972: EQUAL
57973: IFTRUE 57977
57975: GO 58033
57977: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57978: LD_ADDR_VAR 0 9
57982: PUSH
57983: LD_VAR 0 53
57987: PUSH
57988: LD_VAR 0 54
57992: PUSH
57993: LD_VAR 0 55
57997: PUSH
57998: LD_VAR 0 56
58002: PUSH
58003: LD_VAR 0 57
58007: PUSH
58008: LD_VAR 0 58
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: PUSH
58021: LD_VAR 0 4
58025: PUSH
58026: LD_INT 1
58028: PLUS
58029: ARRAY
58030: ST_TO_ADDR
58031: GO 58140
58033: LD_INT 31
58035: DOUBLE
58036: EQUAL
58037: IFTRUE 58083
58039: LD_INT 32
58041: DOUBLE
58042: EQUAL
58043: IFTRUE 58083
58045: LD_INT 33
58047: DOUBLE
58048: EQUAL
58049: IFTRUE 58083
58051: LD_INT 27
58053: DOUBLE
58054: EQUAL
58055: IFTRUE 58083
58057: LD_INT 26
58059: DOUBLE
58060: EQUAL
58061: IFTRUE 58083
58063: LD_INT 28
58065: DOUBLE
58066: EQUAL
58067: IFTRUE 58083
58069: LD_INT 29
58071: DOUBLE
58072: EQUAL
58073: IFTRUE 58083
58075: LD_INT 30
58077: DOUBLE
58078: EQUAL
58079: IFTRUE 58083
58081: GO 58139
58083: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
58084: LD_ADDR_VAR 0 9
58088: PUSH
58089: LD_VAR 0 59
58093: PUSH
58094: LD_VAR 0 60
58098: PUSH
58099: LD_VAR 0 61
58103: PUSH
58104: LD_VAR 0 62
58108: PUSH
58109: LD_VAR 0 63
58113: PUSH
58114: LD_VAR 0 64
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: PUSH
58127: LD_VAR 0 4
58131: PUSH
58132: LD_INT 1
58134: PLUS
58135: ARRAY
58136: ST_TO_ADDR
58137: GO 58140
58139: POP
// temp_list2 = [ ] ;
58140: LD_ADDR_VAR 0 10
58144: PUSH
58145: EMPTY
58146: ST_TO_ADDR
// for i in temp_list do
58147: LD_ADDR_VAR 0 8
58151: PUSH
58152: LD_VAR 0 9
58156: PUSH
58157: FOR_IN
58158: IFFALSE 58210
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58160: LD_ADDR_VAR 0 10
58164: PUSH
58165: LD_VAR 0 10
58169: PUSH
58170: LD_VAR 0 8
58174: PUSH
58175: LD_INT 1
58177: ARRAY
58178: PUSH
58179: LD_VAR 0 2
58183: PLUS
58184: PUSH
58185: LD_VAR 0 8
58189: PUSH
58190: LD_INT 2
58192: ARRAY
58193: PUSH
58194: LD_VAR 0 3
58198: PLUS
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: EMPTY
58205: LIST
58206: ADD
58207: ST_TO_ADDR
58208: GO 58157
58210: POP
58211: POP
// result = temp_list2 ;
58212: LD_ADDR_VAR 0 7
58216: PUSH
58217: LD_VAR 0 10
58221: ST_TO_ADDR
// end ;
58222: LD_VAR 0 7
58226: RET
// export function EnemyInRange ( unit , dist ) ; begin
58227: LD_INT 0
58229: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58230: LD_ADDR_VAR 0 3
58234: PUSH
58235: LD_VAR 0 1
58239: PPUSH
58240: CALL_OW 255
58244: PPUSH
58245: LD_VAR 0 1
58249: PPUSH
58250: CALL_OW 250
58254: PPUSH
58255: LD_VAR 0 1
58259: PPUSH
58260: CALL_OW 251
58264: PPUSH
58265: LD_VAR 0 2
58269: PPUSH
58270: CALL 32331 0 4
58274: PUSH
58275: LD_INT 4
58277: ARRAY
58278: ST_TO_ADDR
// end ;
58279: LD_VAR 0 3
58283: RET
// export function PlayerSeeMe ( unit ) ; begin
58284: LD_INT 0
58286: PPUSH
// result := See ( your_side , unit ) ;
58287: LD_ADDR_VAR 0 2
58291: PUSH
58292: LD_OWVAR 2
58296: PPUSH
58297: LD_VAR 0 1
58301: PPUSH
58302: CALL_OW 292
58306: ST_TO_ADDR
// end ;
58307: LD_VAR 0 2
58311: RET
// export function ReverseDir ( unit ) ; begin
58312: LD_INT 0
58314: PPUSH
// if not unit then
58315: LD_VAR 0 1
58319: NOT
58320: IFFALSE 58324
// exit ;
58322: GO 58347
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58324: LD_ADDR_VAR 0 2
58328: PUSH
58329: LD_VAR 0 1
58333: PPUSH
58334: CALL_OW 254
58338: PUSH
58339: LD_INT 3
58341: PLUS
58342: PUSH
58343: LD_INT 6
58345: MOD
58346: ST_TO_ADDR
// end ;
58347: LD_VAR 0 2
58351: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
58352: LD_INT 0
58354: PPUSH
58355: PPUSH
58356: PPUSH
58357: PPUSH
58358: PPUSH
// if not hexes then
58359: LD_VAR 0 2
58363: NOT
58364: IFFALSE 58368
// exit ;
58366: GO 58516
// dist := 9999 ;
58368: LD_ADDR_VAR 0 5
58372: PUSH
58373: LD_INT 9999
58375: ST_TO_ADDR
// for i = 1 to hexes do
58376: LD_ADDR_VAR 0 4
58380: PUSH
58381: DOUBLE
58382: LD_INT 1
58384: DEC
58385: ST_TO_ADDR
58386: LD_VAR 0 2
58390: PUSH
58391: FOR_TO
58392: IFFALSE 58504
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
58394: LD_VAR 0 1
58398: PPUSH
58399: LD_VAR 0 2
58403: PUSH
58404: LD_VAR 0 4
58408: ARRAY
58409: PUSH
58410: LD_INT 1
58412: ARRAY
58413: PPUSH
58414: LD_VAR 0 2
58418: PUSH
58419: LD_VAR 0 4
58423: ARRAY
58424: PUSH
58425: LD_INT 2
58427: ARRAY
58428: PPUSH
58429: CALL_OW 297
58433: PUSH
58434: LD_VAR 0 5
58438: LESS
58439: IFFALSE 58502
// begin hex := hexes [ i ] ;
58441: LD_ADDR_VAR 0 7
58445: PUSH
58446: LD_VAR 0 2
58450: PUSH
58451: LD_VAR 0 4
58455: ARRAY
58456: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58457: LD_ADDR_VAR 0 5
58461: PUSH
58462: LD_VAR 0 1
58466: PPUSH
58467: LD_VAR 0 2
58471: PUSH
58472: LD_VAR 0 4
58476: ARRAY
58477: PUSH
58478: LD_INT 1
58480: ARRAY
58481: PPUSH
58482: LD_VAR 0 2
58486: PUSH
58487: LD_VAR 0 4
58491: ARRAY
58492: PUSH
58493: LD_INT 2
58495: ARRAY
58496: PPUSH
58497: CALL_OW 297
58501: ST_TO_ADDR
// end ; end ;
58502: GO 58391
58504: POP
58505: POP
// result := hex ;
58506: LD_ADDR_VAR 0 3
58510: PUSH
58511: LD_VAR 0 7
58515: ST_TO_ADDR
// end ;
58516: LD_VAR 0 3
58520: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58521: LD_INT 0
58523: PPUSH
58524: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58525: LD_VAR 0 1
58529: NOT
58530: PUSH
58531: LD_VAR 0 1
58535: PUSH
58536: LD_INT 21
58538: PUSH
58539: LD_INT 2
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 23
58548: PUSH
58549: LD_INT 2
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PPUSH
58560: CALL_OW 69
58564: IN
58565: NOT
58566: OR
58567: IFFALSE 58571
// exit ;
58569: GO 58618
// for i = 1 to 3 do
58571: LD_ADDR_VAR 0 3
58575: PUSH
58576: DOUBLE
58577: LD_INT 1
58579: DEC
58580: ST_TO_ADDR
58581: LD_INT 3
58583: PUSH
58584: FOR_TO
58585: IFFALSE 58616
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58587: LD_VAR 0 1
58591: PPUSH
58592: CALL_OW 250
58596: PPUSH
58597: LD_VAR 0 1
58601: PPUSH
58602: CALL_OW 251
58606: PPUSH
58607: LD_INT 1
58609: PPUSH
58610: CALL_OW 453
58614: GO 58584
58616: POP
58617: POP
// end ;
58618: LD_VAR 0 2
58622: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58623: LD_INT 0
58625: PPUSH
58626: PPUSH
58627: PPUSH
58628: PPUSH
58629: PPUSH
58630: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58631: LD_VAR 0 1
58635: NOT
58636: PUSH
58637: LD_VAR 0 2
58641: NOT
58642: OR
58643: PUSH
58644: LD_VAR 0 1
58648: PPUSH
58649: CALL_OW 314
58653: OR
58654: IFFALSE 58658
// exit ;
58656: GO 59099
// x := GetX ( enemy_unit ) ;
58658: LD_ADDR_VAR 0 7
58662: PUSH
58663: LD_VAR 0 2
58667: PPUSH
58668: CALL_OW 250
58672: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58673: LD_ADDR_VAR 0 8
58677: PUSH
58678: LD_VAR 0 2
58682: PPUSH
58683: CALL_OW 251
58687: ST_TO_ADDR
// if not x or not y then
58688: LD_VAR 0 7
58692: NOT
58693: PUSH
58694: LD_VAR 0 8
58698: NOT
58699: OR
58700: IFFALSE 58704
// exit ;
58702: GO 59099
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58704: LD_ADDR_VAR 0 6
58708: PUSH
58709: LD_VAR 0 7
58713: PPUSH
58714: LD_INT 0
58716: PPUSH
58717: LD_INT 4
58719: PPUSH
58720: CALL_OW 272
58724: PUSH
58725: LD_VAR 0 8
58729: PPUSH
58730: LD_INT 0
58732: PPUSH
58733: LD_INT 4
58735: PPUSH
58736: CALL_OW 273
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_VAR 0 7
58749: PPUSH
58750: LD_INT 1
58752: PPUSH
58753: LD_INT 4
58755: PPUSH
58756: CALL_OW 272
58760: PUSH
58761: LD_VAR 0 8
58765: PPUSH
58766: LD_INT 1
58768: PPUSH
58769: LD_INT 4
58771: PPUSH
58772: CALL_OW 273
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_VAR 0 7
58785: PPUSH
58786: LD_INT 2
58788: PPUSH
58789: LD_INT 4
58791: PPUSH
58792: CALL_OW 272
58796: PUSH
58797: LD_VAR 0 8
58801: PPUSH
58802: LD_INT 2
58804: PPUSH
58805: LD_INT 4
58807: PPUSH
58808: CALL_OW 273
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_VAR 0 7
58821: PPUSH
58822: LD_INT 3
58824: PPUSH
58825: LD_INT 4
58827: PPUSH
58828: CALL_OW 272
58832: PUSH
58833: LD_VAR 0 8
58837: PPUSH
58838: LD_INT 3
58840: PPUSH
58841: LD_INT 4
58843: PPUSH
58844: CALL_OW 273
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_VAR 0 7
58857: PPUSH
58858: LD_INT 4
58860: PPUSH
58861: LD_INT 4
58863: PPUSH
58864: CALL_OW 272
58868: PUSH
58869: LD_VAR 0 8
58873: PPUSH
58874: LD_INT 4
58876: PPUSH
58877: LD_INT 4
58879: PPUSH
58880: CALL_OW 273
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_VAR 0 7
58893: PPUSH
58894: LD_INT 5
58896: PPUSH
58897: LD_INT 4
58899: PPUSH
58900: CALL_OW 272
58904: PUSH
58905: LD_VAR 0 8
58909: PPUSH
58910: LD_INT 5
58912: PPUSH
58913: LD_INT 4
58915: PPUSH
58916: CALL_OW 273
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: ST_TO_ADDR
// for i = tmp downto 1 do
58933: LD_ADDR_VAR 0 4
58937: PUSH
58938: DOUBLE
58939: LD_VAR 0 6
58943: INC
58944: ST_TO_ADDR
58945: LD_INT 1
58947: PUSH
58948: FOR_DOWNTO
58949: IFFALSE 59050
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58951: LD_VAR 0 6
58955: PUSH
58956: LD_VAR 0 4
58960: ARRAY
58961: PUSH
58962: LD_INT 1
58964: ARRAY
58965: PPUSH
58966: LD_VAR 0 6
58970: PUSH
58971: LD_VAR 0 4
58975: ARRAY
58976: PUSH
58977: LD_INT 2
58979: ARRAY
58980: PPUSH
58981: CALL_OW 488
58985: NOT
58986: PUSH
58987: LD_VAR 0 6
58991: PUSH
58992: LD_VAR 0 4
58996: ARRAY
58997: PUSH
58998: LD_INT 1
59000: ARRAY
59001: PPUSH
59002: LD_VAR 0 6
59006: PUSH
59007: LD_VAR 0 4
59011: ARRAY
59012: PUSH
59013: LD_INT 2
59015: ARRAY
59016: PPUSH
59017: CALL_OW 428
59021: PUSH
59022: LD_INT 0
59024: NONEQUAL
59025: OR
59026: IFFALSE 59048
// tmp := Delete ( tmp , i ) ;
59028: LD_ADDR_VAR 0 6
59032: PUSH
59033: LD_VAR 0 6
59037: PPUSH
59038: LD_VAR 0 4
59042: PPUSH
59043: CALL_OW 3
59047: ST_TO_ADDR
59048: GO 58948
59050: POP
59051: POP
// j := GetClosestHex ( unit , tmp ) ;
59052: LD_ADDR_VAR 0 5
59056: PUSH
59057: LD_VAR 0 1
59061: PPUSH
59062: LD_VAR 0 6
59066: PPUSH
59067: CALL 58352 0 2
59071: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59072: LD_VAR 0 1
59076: PPUSH
59077: LD_VAR 0 5
59081: PUSH
59082: LD_INT 1
59084: ARRAY
59085: PPUSH
59086: LD_VAR 0 5
59090: PUSH
59091: LD_INT 2
59093: ARRAY
59094: PPUSH
59095: CALL_OW 111
// end ;
59099: LD_VAR 0 3
59103: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59104: LD_INT 0
59106: PPUSH
59107: PPUSH
59108: PPUSH
// uc_side = 0 ;
59109: LD_ADDR_OWVAR 20
59113: PUSH
59114: LD_INT 0
59116: ST_TO_ADDR
// uc_nation = 0 ;
59117: LD_ADDR_OWVAR 21
59121: PUSH
59122: LD_INT 0
59124: ST_TO_ADDR
// InitHc ;
59125: CALL_OW 19
// InitVc ;
59129: CALL_OW 20
// if mastodonts then
59133: LD_VAR 0 6
59137: IFFALSE 59204
// for i = 1 to mastodonts do
59139: LD_ADDR_VAR 0 11
59143: PUSH
59144: DOUBLE
59145: LD_INT 1
59147: DEC
59148: ST_TO_ADDR
59149: LD_VAR 0 6
59153: PUSH
59154: FOR_TO
59155: IFFALSE 59202
// begin vc_chassis := 31 ;
59157: LD_ADDR_OWVAR 37
59161: PUSH
59162: LD_INT 31
59164: ST_TO_ADDR
// vc_control := control_rider ;
59165: LD_ADDR_OWVAR 38
59169: PUSH
59170: LD_INT 4
59172: ST_TO_ADDR
// animal := CreateVehicle ;
59173: LD_ADDR_VAR 0 12
59177: PUSH
59178: CALL_OW 45
59182: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59183: LD_VAR 0 12
59187: PPUSH
59188: LD_VAR 0 8
59192: PPUSH
59193: LD_INT 0
59195: PPUSH
59196: CALL 61273 0 3
// end ;
59200: GO 59154
59202: POP
59203: POP
// if horses then
59204: LD_VAR 0 5
59208: IFFALSE 59275
// for i = 1 to horses do
59210: LD_ADDR_VAR 0 11
59214: PUSH
59215: DOUBLE
59216: LD_INT 1
59218: DEC
59219: ST_TO_ADDR
59220: LD_VAR 0 5
59224: PUSH
59225: FOR_TO
59226: IFFALSE 59273
// begin hc_class := 21 ;
59228: LD_ADDR_OWVAR 28
59232: PUSH
59233: LD_INT 21
59235: ST_TO_ADDR
// hc_gallery :=  ;
59236: LD_ADDR_OWVAR 33
59240: PUSH
59241: LD_STRING 
59243: ST_TO_ADDR
// animal := CreateHuman ;
59244: LD_ADDR_VAR 0 12
59248: PUSH
59249: CALL_OW 44
59253: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59254: LD_VAR 0 12
59258: PPUSH
59259: LD_VAR 0 8
59263: PPUSH
59264: LD_INT 0
59266: PPUSH
59267: CALL 61273 0 3
// end ;
59271: GO 59225
59273: POP
59274: POP
// if birds then
59275: LD_VAR 0 1
59279: IFFALSE 59346
// for i = 1 to birds do
59281: LD_ADDR_VAR 0 11
59285: PUSH
59286: DOUBLE
59287: LD_INT 1
59289: DEC
59290: ST_TO_ADDR
59291: LD_VAR 0 1
59295: PUSH
59296: FOR_TO
59297: IFFALSE 59344
// begin hc_class = 18 ;
59299: LD_ADDR_OWVAR 28
59303: PUSH
59304: LD_INT 18
59306: ST_TO_ADDR
// hc_gallery =  ;
59307: LD_ADDR_OWVAR 33
59311: PUSH
59312: LD_STRING 
59314: ST_TO_ADDR
// animal := CreateHuman ;
59315: LD_ADDR_VAR 0 12
59319: PUSH
59320: CALL_OW 44
59324: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59325: LD_VAR 0 12
59329: PPUSH
59330: LD_VAR 0 8
59334: PPUSH
59335: LD_INT 0
59337: PPUSH
59338: CALL 61273 0 3
// end ;
59342: GO 59296
59344: POP
59345: POP
// if tigers then
59346: LD_VAR 0 2
59350: IFFALSE 59434
// for i = 1 to tigers do
59352: LD_ADDR_VAR 0 11
59356: PUSH
59357: DOUBLE
59358: LD_INT 1
59360: DEC
59361: ST_TO_ADDR
59362: LD_VAR 0 2
59366: PUSH
59367: FOR_TO
59368: IFFALSE 59432
// begin hc_class = class_tiger ;
59370: LD_ADDR_OWVAR 28
59374: PUSH
59375: LD_INT 14
59377: ST_TO_ADDR
// hc_gallery =  ;
59378: LD_ADDR_OWVAR 33
59382: PUSH
59383: LD_STRING 
59385: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59386: LD_ADDR_OWVAR 35
59390: PUSH
59391: LD_INT 7
59393: NEG
59394: PPUSH
59395: LD_INT 7
59397: PPUSH
59398: CALL_OW 12
59402: ST_TO_ADDR
// animal := CreateHuman ;
59403: LD_ADDR_VAR 0 12
59407: PUSH
59408: CALL_OW 44
59412: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59413: LD_VAR 0 12
59417: PPUSH
59418: LD_VAR 0 8
59422: PPUSH
59423: LD_INT 0
59425: PPUSH
59426: CALL 61273 0 3
// end ;
59430: GO 59367
59432: POP
59433: POP
// if apemans then
59434: LD_VAR 0 3
59438: IFFALSE 59561
// for i = 1 to apemans do
59440: LD_ADDR_VAR 0 11
59444: PUSH
59445: DOUBLE
59446: LD_INT 1
59448: DEC
59449: ST_TO_ADDR
59450: LD_VAR 0 3
59454: PUSH
59455: FOR_TO
59456: IFFALSE 59559
// begin hc_class = class_apeman ;
59458: LD_ADDR_OWVAR 28
59462: PUSH
59463: LD_INT 12
59465: ST_TO_ADDR
// hc_gallery =  ;
59466: LD_ADDR_OWVAR 33
59470: PUSH
59471: LD_STRING 
59473: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
59474: LD_ADDR_OWVAR 35
59478: PUSH
59479: LD_INT 5
59481: NEG
59482: PPUSH
59483: LD_INT 5
59485: PPUSH
59486: CALL_OW 12
59490: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59491: LD_ADDR_OWVAR 31
59495: PUSH
59496: LD_INT 1
59498: PPUSH
59499: LD_INT 3
59501: PPUSH
59502: CALL_OW 12
59506: PUSH
59507: LD_INT 1
59509: PPUSH
59510: LD_INT 3
59512: PPUSH
59513: CALL_OW 12
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: LD_INT 0
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: ST_TO_ADDR
// animal := CreateHuman ;
59530: LD_ADDR_VAR 0 12
59534: PUSH
59535: CALL_OW 44
59539: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59540: LD_VAR 0 12
59544: PPUSH
59545: LD_VAR 0 8
59549: PPUSH
59550: LD_INT 0
59552: PPUSH
59553: CALL 61273 0 3
// end ;
59557: GO 59455
59559: POP
59560: POP
// if enchidnas then
59561: LD_VAR 0 4
59565: IFFALSE 59632
// for i = 1 to enchidnas do
59567: LD_ADDR_VAR 0 11
59571: PUSH
59572: DOUBLE
59573: LD_INT 1
59575: DEC
59576: ST_TO_ADDR
59577: LD_VAR 0 4
59581: PUSH
59582: FOR_TO
59583: IFFALSE 59630
// begin hc_class = 13 ;
59585: LD_ADDR_OWVAR 28
59589: PUSH
59590: LD_INT 13
59592: ST_TO_ADDR
// hc_gallery =  ;
59593: LD_ADDR_OWVAR 33
59597: PUSH
59598: LD_STRING 
59600: ST_TO_ADDR
// animal := CreateHuman ;
59601: LD_ADDR_VAR 0 12
59605: PUSH
59606: CALL_OW 44
59610: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59611: LD_VAR 0 12
59615: PPUSH
59616: LD_VAR 0 8
59620: PPUSH
59621: LD_INT 0
59623: PPUSH
59624: CALL 61273 0 3
// end ;
59628: GO 59582
59630: POP
59631: POP
// if fishes then
59632: LD_VAR 0 7
59636: IFFALSE 59703
// for i = 1 to fishes do
59638: LD_ADDR_VAR 0 11
59642: PUSH
59643: DOUBLE
59644: LD_INT 1
59646: DEC
59647: ST_TO_ADDR
59648: LD_VAR 0 7
59652: PUSH
59653: FOR_TO
59654: IFFALSE 59701
// begin hc_class = 20 ;
59656: LD_ADDR_OWVAR 28
59660: PUSH
59661: LD_INT 20
59663: ST_TO_ADDR
// hc_gallery =  ;
59664: LD_ADDR_OWVAR 33
59668: PUSH
59669: LD_STRING 
59671: ST_TO_ADDR
// animal := CreateHuman ;
59672: LD_ADDR_VAR 0 12
59676: PUSH
59677: CALL_OW 44
59681: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59682: LD_VAR 0 12
59686: PPUSH
59687: LD_VAR 0 9
59691: PPUSH
59692: LD_INT 0
59694: PPUSH
59695: CALL 61273 0 3
// end ;
59699: GO 59653
59701: POP
59702: POP
// end ;
59703: LD_VAR 0 10
59707: RET
// export function WantHeal ( sci , unit ) ; begin
59708: LD_INT 0
59710: PPUSH
// if GetTaskList ( sci ) > 0 then
59711: LD_VAR 0 1
59715: PPUSH
59716: CALL_OW 437
59720: PUSH
59721: LD_INT 0
59723: GREATER
59724: IFFALSE 59794
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59726: LD_VAR 0 1
59730: PPUSH
59731: CALL_OW 437
59735: PUSH
59736: LD_INT 1
59738: ARRAY
59739: PUSH
59740: LD_INT 1
59742: ARRAY
59743: PUSH
59744: LD_STRING l
59746: EQUAL
59747: PUSH
59748: LD_VAR 0 1
59752: PPUSH
59753: CALL_OW 437
59757: PUSH
59758: LD_INT 1
59760: ARRAY
59761: PUSH
59762: LD_INT 4
59764: ARRAY
59765: PUSH
59766: LD_VAR 0 2
59770: EQUAL
59771: AND
59772: IFFALSE 59784
// result := true else
59774: LD_ADDR_VAR 0 3
59778: PUSH
59779: LD_INT 1
59781: ST_TO_ADDR
59782: GO 59792
// result := false ;
59784: LD_ADDR_VAR 0 3
59788: PUSH
59789: LD_INT 0
59791: ST_TO_ADDR
// end else
59792: GO 59802
// result := false ;
59794: LD_ADDR_VAR 0 3
59798: PUSH
59799: LD_INT 0
59801: ST_TO_ADDR
// end ;
59802: LD_VAR 0 3
59806: RET
// export function HealTarget ( sci ) ; begin
59807: LD_INT 0
59809: PPUSH
// if not sci then
59810: LD_VAR 0 1
59814: NOT
59815: IFFALSE 59819
// exit ;
59817: GO 59884
// result := 0 ;
59819: LD_ADDR_VAR 0 2
59823: PUSH
59824: LD_INT 0
59826: ST_TO_ADDR
// if GetTaskList ( sci ) then
59827: LD_VAR 0 1
59831: PPUSH
59832: CALL_OW 437
59836: IFFALSE 59884
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59838: LD_VAR 0 1
59842: PPUSH
59843: CALL_OW 437
59847: PUSH
59848: LD_INT 1
59850: ARRAY
59851: PUSH
59852: LD_INT 1
59854: ARRAY
59855: PUSH
59856: LD_STRING l
59858: EQUAL
59859: IFFALSE 59884
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59861: LD_ADDR_VAR 0 2
59865: PUSH
59866: LD_VAR 0 1
59870: PPUSH
59871: CALL_OW 437
59875: PUSH
59876: LD_INT 1
59878: ARRAY
59879: PUSH
59880: LD_INT 4
59882: ARRAY
59883: ST_TO_ADDR
// end ;
59884: LD_VAR 0 2
59888: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59889: LD_INT 0
59891: PPUSH
59892: PPUSH
59893: PPUSH
59894: PPUSH
// if not base_units then
59895: LD_VAR 0 1
59899: NOT
59900: IFFALSE 59904
// exit ;
59902: GO 59991
// result := false ;
59904: LD_ADDR_VAR 0 2
59908: PUSH
59909: LD_INT 0
59911: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59912: LD_ADDR_VAR 0 5
59916: PUSH
59917: LD_VAR 0 1
59921: PPUSH
59922: LD_INT 21
59924: PUSH
59925: LD_INT 3
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PPUSH
59932: CALL_OW 72
59936: ST_TO_ADDR
// if not tmp then
59937: LD_VAR 0 5
59941: NOT
59942: IFFALSE 59946
// exit ;
59944: GO 59991
// for i in tmp do
59946: LD_ADDR_VAR 0 3
59950: PUSH
59951: LD_VAR 0 5
59955: PUSH
59956: FOR_IN
59957: IFFALSE 59989
// begin result := EnemyInRange ( i , 22 ) ;
59959: LD_ADDR_VAR 0 2
59963: PUSH
59964: LD_VAR 0 3
59968: PPUSH
59969: LD_INT 22
59971: PPUSH
59972: CALL 58227 0 2
59976: ST_TO_ADDR
// if result then
59977: LD_VAR 0 2
59981: IFFALSE 59987
// exit ;
59983: POP
59984: POP
59985: GO 59991
// end ;
59987: GO 59956
59989: POP
59990: POP
// end ;
59991: LD_VAR 0 2
59995: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59996: LD_INT 0
59998: PPUSH
59999: PPUSH
// if not units then
60000: LD_VAR 0 1
60004: NOT
60005: IFFALSE 60009
// exit ;
60007: GO 60079
// result := [ ] ;
60009: LD_ADDR_VAR 0 3
60013: PUSH
60014: EMPTY
60015: ST_TO_ADDR
// for i in units do
60016: LD_ADDR_VAR 0 4
60020: PUSH
60021: LD_VAR 0 1
60025: PUSH
60026: FOR_IN
60027: IFFALSE 60077
// if GetTag ( i ) = tag then
60029: LD_VAR 0 4
60033: PPUSH
60034: CALL_OW 110
60038: PUSH
60039: LD_VAR 0 2
60043: EQUAL
60044: IFFALSE 60075
// result := Insert ( result , result + 1 , i ) ;
60046: LD_ADDR_VAR 0 3
60050: PUSH
60051: LD_VAR 0 3
60055: PPUSH
60056: LD_VAR 0 3
60060: PUSH
60061: LD_INT 1
60063: PLUS
60064: PPUSH
60065: LD_VAR 0 4
60069: PPUSH
60070: CALL_OW 2
60074: ST_TO_ADDR
60075: GO 60026
60077: POP
60078: POP
// end ;
60079: LD_VAR 0 3
60083: RET
// export function IsDriver ( un ) ; begin
60084: LD_INT 0
60086: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60087: LD_ADDR_VAR 0 2
60091: PUSH
60092: LD_VAR 0 1
60096: PUSH
60097: LD_INT 55
60099: PUSH
60100: EMPTY
60101: LIST
60102: PPUSH
60103: CALL_OW 69
60107: IN
60108: ST_TO_ADDR
// end ;
60109: LD_VAR 0 2
60113: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60114: LD_INT 0
60116: PPUSH
60117: PPUSH
// list := [ ] ;
60118: LD_ADDR_VAR 0 5
60122: PUSH
60123: EMPTY
60124: ST_TO_ADDR
// case d of 0 :
60125: LD_VAR 0 3
60129: PUSH
60130: LD_INT 0
60132: DOUBLE
60133: EQUAL
60134: IFTRUE 60138
60136: GO 60271
60138: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60139: LD_ADDR_VAR 0 5
60143: PUSH
60144: LD_VAR 0 1
60148: PUSH
60149: LD_INT 4
60151: MINUS
60152: PUSH
60153: LD_VAR 0 2
60157: PUSH
60158: LD_INT 4
60160: MINUS
60161: PUSH
60162: LD_INT 2
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: LIST
60169: PUSH
60170: LD_VAR 0 1
60174: PUSH
60175: LD_INT 3
60177: MINUS
60178: PUSH
60179: LD_VAR 0 2
60183: PUSH
60184: LD_INT 1
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: LIST
60191: PUSH
60192: LD_VAR 0 1
60196: PUSH
60197: LD_INT 4
60199: PLUS
60200: PUSH
60201: LD_VAR 0 2
60205: PUSH
60206: LD_INT 4
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: LIST
60213: PUSH
60214: LD_VAR 0 1
60218: PUSH
60219: LD_INT 3
60221: PLUS
60222: PUSH
60223: LD_VAR 0 2
60227: PUSH
60228: LD_INT 3
60230: PLUS
60231: PUSH
60232: LD_INT 5
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: LIST
60239: PUSH
60240: LD_VAR 0 1
60244: PUSH
60245: LD_VAR 0 2
60249: PUSH
60250: LD_INT 4
60252: PLUS
60253: PUSH
60254: LD_INT 0
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: LIST
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: ST_TO_ADDR
// end ; 1 :
60269: GO 60969
60271: LD_INT 1
60273: DOUBLE
60274: EQUAL
60275: IFTRUE 60279
60277: GO 60412
60279: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60280: LD_ADDR_VAR 0 5
60284: PUSH
60285: LD_VAR 0 1
60289: PUSH
60290: LD_VAR 0 2
60294: PUSH
60295: LD_INT 4
60297: MINUS
60298: PUSH
60299: LD_INT 3
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: LIST
60306: PUSH
60307: LD_VAR 0 1
60311: PUSH
60312: LD_INT 3
60314: MINUS
60315: PUSH
60316: LD_VAR 0 2
60320: PUSH
60321: LD_INT 3
60323: MINUS
60324: PUSH
60325: LD_INT 2
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: LIST
60332: PUSH
60333: LD_VAR 0 1
60337: PUSH
60338: LD_INT 4
60340: MINUS
60341: PUSH
60342: LD_VAR 0 2
60346: PUSH
60347: LD_INT 1
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: LIST
60354: PUSH
60355: LD_VAR 0 1
60359: PUSH
60360: LD_VAR 0 2
60364: PUSH
60365: LD_INT 3
60367: PLUS
60368: PUSH
60369: LD_INT 0
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: LIST
60376: PUSH
60377: LD_VAR 0 1
60381: PUSH
60382: LD_INT 4
60384: PLUS
60385: PUSH
60386: LD_VAR 0 2
60390: PUSH
60391: LD_INT 4
60393: PLUS
60394: PUSH
60395: LD_INT 5
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: LIST
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: ST_TO_ADDR
// end ; 2 :
60410: GO 60969
60412: LD_INT 2
60414: DOUBLE
60415: EQUAL
60416: IFTRUE 60420
60418: GO 60549
60420: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60421: LD_ADDR_VAR 0 5
60425: PUSH
60426: LD_VAR 0 1
60430: PUSH
60431: LD_VAR 0 2
60435: PUSH
60436: LD_INT 3
60438: MINUS
60439: PUSH
60440: LD_INT 3
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: LIST
60447: PUSH
60448: LD_VAR 0 1
60452: PUSH
60453: LD_INT 4
60455: PLUS
60456: PUSH
60457: LD_VAR 0 2
60461: PUSH
60462: LD_INT 4
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: LIST
60469: PUSH
60470: LD_VAR 0 1
60474: PUSH
60475: LD_VAR 0 2
60479: PUSH
60480: LD_INT 4
60482: PLUS
60483: PUSH
60484: LD_INT 0
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: LIST
60491: PUSH
60492: LD_VAR 0 1
60496: PUSH
60497: LD_INT 3
60499: MINUS
60500: PUSH
60501: LD_VAR 0 2
60505: PUSH
60506: LD_INT 1
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: LIST
60513: PUSH
60514: LD_VAR 0 1
60518: PUSH
60519: LD_INT 4
60521: MINUS
60522: PUSH
60523: LD_VAR 0 2
60527: PUSH
60528: LD_INT 4
60530: MINUS
60531: PUSH
60532: LD_INT 2
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: LIST
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: ST_TO_ADDR
// end ; 3 :
60547: GO 60969
60549: LD_INT 3
60551: DOUBLE
60552: EQUAL
60553: IFTRUE 60557
60555: GO 60690
60557: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60558: LD_ADDR_VAR 0 5
60562: PUSH
60563: LD_VAR 0 1
60567: PUSH
60568: LD_INT 3
60570: PLUS
60571: PUSH
60572: LD_VAR 0 2
60576: PUSH
60577: LD_INT 4
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: LIST
60584: PUSH
60585: LD_VAR 0 1
60589: PUSH
60590: LD_INT 4
60592: PLUS
60593: PUSH
60594: LD_VAR 0 2
60598: PUSH
60599: LD_INT 4
60601: PLUS
60602: PUSH
60603: LD_INT 5
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: LIST
60610: PUSH
60611: LD_VAR 0 1
60615: PUSH
60616: LD_INT 4
60618: MINUS
60619: PUSH
60620: LD_VAR 0 2
60624: PUSH
60625: LD_INT 1
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: LIST
60632: PUSH
60633: LD_VAR 0 1
60637: PUSH
60638: LD_VAR 0 2
60642: PUSH
60643: LD_INT 4
60645: MINUS
60646: PUSH
60647: LD_INT 3
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: LIST
60654: PUSH
60655: LD_VAR 0 1
60659: PUSH
60660: LD_INT 3
60662: MINUS
60663: PUSH
60664: LD_VAR 0 2
60668: PUSH
60669: LD_INT 3
60671: MINUS
60672: PUSH
60673: LD_INT 2
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: LIST
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: ST_TO_ADDR
// end ; 4 :
60688: GO 60969
60690: LD_INT 4
60692: DOUBLE
60693: EQUAL
60694: IFTRUE 60698
60696: GO 60831
60698: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60699: LD_ADDR_VAR 0 5
60703: PUSH
60704: LD_VAR 0 1
60708: PUSH
60709: LD_VAR 0 2
60713: PUSH
60714: LD_INT 4
60716: PLUS
60717: PUSH
60718: LD_INT 0
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: LIST
60725: PUSH
60726: LD_VAR 0 1
60730: PUSH
60731: LD_INT 3
60733: PLUS
60734: PUSH
60735: LD_VAR 0 2
60739: PUSH
60740: LD_INT 3
60742: PLUS
60743: PUSH
60744: LD_INT 5
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: LIST
60751: PUSH
60752: LD_VAR 0 1
60756: PUSH
60757: LD_INT 4
60759: PLUS
60760: PUSH
60761: LD_VAR 0 2
60765: PUSH
60766: LD_INT 4
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: LIST
60773: PUSH
60774: LD_VAR 0 1
60778: PUSH
60779: LD_VAR 0 2
60783: PUSH
60784: LD_INT 3
60786: MINUS
60787: PUSH
60788: LD_INT 3
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: LIST
60795: PUSH
60796: LD_VAR 0 1
60800: PUSH
60801: LD_INT 4
60803: MINUS
60804: PUSH
60805: LD_VAR 0 2
60809: PUSH
60810: LD_INT 4
60812: MINUS
60813: PUSH
60814: LD_INT 2
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: LIST
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: ST_TO_ADDR
// end ; 5 :
60829: GO 60969
60831: LD_INT 5
60833: DOUBLE
60834: EQUAL
60835: IFTRUE 60839
60837: GO 60968
60839: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60840: LD_ADDR_VAR 0 5
60844: PUSH
60845: LD_VAR 0 1
60849: PUSH
60850: LD_INT 4
60852: MINUS
60853: PUSH
60854: LD_VAR 0 2
60858: PUSH
60859: LD_INT 1
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: LIST
60866: PUSH
60867: LD_VAR 0 1
60871: PUSH
60872: LD_VAR 0 2
60876: PUSH
60877: LD_INT 4
60879: MINUS
60880: PUSH
60881: LD_INT 3
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: LIST
60888: PUSH
60889: LD_VAR 0 1
60893: PUSH
60894: LD_INT 4
60896: PLUS
60897: PUSH
60898: LD_VAR 0 2
60902: PUSH
60903: LD_INT 4
60905: PLUS
60906: PUSH
60907: LD_INT 5
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: LIST
60914: PUSH
60915: LD_VAR 0 1
60919: PUSH
60920: LD_INT 3
60922: PLUS
60923: PUSH
60924: LD_VAR 0 2
60928: PUSH
60929: LD_INT 4
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: LIST
60936: PUSH
60937: LD_VAR 0 1
60941: PUSH
60942: LD_VAR 0 2
60946: PUSH
60947: LD_INT 3
60949: PLUS
60950: PUSH
60951: LD_INT 0
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: LIST
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: ST_TO_ADDR
// end ; end ;
60966: GO 60969
60968: POP
// result := list ;
60969: LD_ADDR_VAR 0 4
60973: PUSH
60974: LD_VAR 0 5
60978: ST_TO_ADDR
// end ;
60979: LD_VAR 0 4
60983: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60984: LD_INT 0
60986: PPUSH
60987: PPUSH
60988: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60989: LD_VAR 0 1
60993: NOT
60994: PUSH
60995: LD_VAR 0 2
60999: PUSH
61000: LD_INT 1
61002: PUSH
61003: LD_INT 2
61005: PUSH
61006: LD_INT 3
61008: PUSH
61009: LD_INT 4
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: IN
61018: NOT
61019: OR
61020: IFFALSE 61024
// exit ;
61022: GO 61116
// tmp := [ ] ;
61024: LD_ADDR_VAR 0 5
61028: PUSH
61029: EMPTY
61030: ST_TO_ADDR
// for i in units do
61031: LD_ADDR_VAR 0 4
61035: PUSH
61036: LD_VAR 0 1
61040: PUSH
61041: FOR_IN
61042: IFFALSE 61085
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61044: LD_ADDR_VAR 0 5
61048: PUSH
61049: LD_VAR 0 5
61053: PPUSH
61054: LD_VAR 0 5
61058: PUSH
61059: LD_INT 1
61061: PLUS
61062: PPUSH
61063: LD_VAR 0 4
61067: PPUSH
61068: LD_VAR 0 2
61072: PPUSH
61073: CALL_OW 259
61077: PPUSH
61078: CALL_OW 2
61082: ST_TO_ADDR
61083: GO 61041
61085: POP
61086: POP
// if not tmp then
61087: LD_VAR 0 5
61091: NOT
61092: IFFALSE 61096
// exit ;
61094: GO 61116
// result := SortListByListDesc ( units , tmp ) ;
61096: LD_ADDR_VAR 0 3
61100: PUSH
61101: LD_VAR 0 1
61105: PPUSH
61106: LD_VAR 0 5
61110: PPUSH
61111: CALL_OW 77
61115: ST_TO_ADDR
// end ;
61116: LD_VAR 0 3
61120: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61121: LD_INT 0
61123: PPUSH
61124: PPUSH
61125: PPUSH
// x := GetX ( building ) ;
61126: LD_ADDR_VAR 0 4
61130: PUSH
61131: LD_VAR 0 2
61135: PPUSH
61136: CALL_OW 250
61140: ST_TO_ADDR
// y := GetY ( building ) ;
61141: LD_ADDR_VAR 0 5
61145: PUSH
61146: LD_VAR 0 2
61150: PPUSH
61151: CALL_OW 251
61155: ST_TO_ADDR
// if GetTaskList ( unit ) then
61156: LD_VAR 0 1
61160: PPUSH
61161: CALL_OW 437
61165: IFFALSE 61260
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61167: LD_STRING e
61169: PUSH
61170: LD_VAR 0 1
61174: PPUSH
61175: CALL_OW 437
61179: PUSH
61180: LD_INT 1
61182: ARRAY
61183: PUSH
61184: LD_INT 1
61186: ARRAY
61187: EQUAL
61188: PUSH
61189: LD_VAR 0 4
61193: PUSH
61194: LD_VAR 0 1
61198: PPUSH
61199: CALL_OW 437
61203: PUSH
61204: LD_INT 1
61206: ARRAY
61207: PUSH
61208: LD_INT 2
61210: ARRAY
61211: EQUAL
61212: AND
61213: PUSH
61214: LD_VAR 0 5
61218: PUSH
61219: LD_VAR 0 1
61223: PPUSH
61224: CALL_OW 437
61228: PUSH
61229: LD_INT 1
61231: ARRAY
61232: PUSH
61233: LD_INT 3
61235: ARRAY
61236: EQUAL
61237: AND
61238: IFFALSE 61250
// result := true else
61240: LD_ADDR_VAR 0 3
61244: PUSH
61245: LD_INT 1
61247: ST_TO_ADDR
61248: GO 61258
// result := false ;
61250: LD_ADDR_VAR 0 3
61254: PUSH
61255: LD_INT 0
61257: ST_TO_ADDR
// end else
61258: GO 61268
// result := false ;
61260: LD_ADDR_VAR 0 3
61264: PUSH
61265: LD_INT 0
61267: ST_TO_ADDR
// end ;
61268: LD_VAR 0 3
61272: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61273: LD_INT 0
61275: PPUSH
61276: PPUSH
61277: PPUSH
61278: PPUSH
// if not unit or not area then
61279: LD_VAR 0 1
61283: NOT
61284: PUSH
61285: LD_VAR 0 2
61289: NOT
61290: OR
61291: IFFALSE 61295
// exit ;
61293: GO 61459
// tmp := AreaToList ( area , i ) ;
61295: LD_ADDR_VAR 0 6
61299: PUSH
61300: LD_VAR 0 2
61304: PPUSH
61305: LD_VAR 0 5
61309: PPUSH
61310: CALL_OW 517
61314: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61315: LD_ADDR_VAR 0 5
61319: PUSH
61320: DOUBLE
61321: LD_INT 1
61323: DEC
61324: ST_TO_ADDR
61325: LD_VAR 0 6
61329: PUSH
61330: LD_INT 1
61332: ARRAY
61333: PUSH
61334: FOR_TO
61335: IFFALSE 61457
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61337: LD_ADDR_VAR 0 7
61341: PUSH
61342: LD_VAR 0 6
61346: PUSH
61347: LD_INT 1
61349: ARRAY
61350: PUSH
61351: LD_VAR 0 5
61355: ARRAY
61356: PUSH
61357: LD_VAR 0 6
61361: PUSH
61362: LD_INT 2
61364: ARRAY
61365: PUSH
61366: LD_VAR 0 5
61370: ARRAY
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61376: LD_VAR 0 7
61380: PUSH
61381: LD_INT 1
61383: ARRAY
61384: PPUSH
61385: LD_VAR 0 7
61389: PUSH
61390: LD_INT 2
61392: ARRAY
61393: PPUSH
61394: CALL_OW 428
61398: PUSH
61399: LD_INT 0
61401: EQUAL
61402: IFFALSE 61455
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61404: LD_VAR 0 1
61408: PPUSH
61409: LD_VAR 0 7
61413: PUSH
61414: LD_INT 1
61416: ARRAY
61417: PPUSH
61418: LD_VAR 0 7
61422: PUSH
61423: LD_INT 2
61425: ARRAY
61426: PPUSH
61427: LD_VAR 0 3
61431: PPUSH
61432: CALL_OW 48
// result := IsPlaced ( unit ) ;
61436: LD_ADDR_VAR 0 4
61440: PUSH
61441: LD_VAR 0 1
61445: PPUSH
61446: CALL_OW 305
61450: ST_TO_ADDR
// exit ;
61451: POP
61452: POP
61453: GO 61459
// end ; end ;
61455: GO 61334
61457: POP
61458: POP
// end ;
61459: LD_VAR 0 4
61463: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61464: LD_INT 0
61466: PPUSH
61467: PPUSH
61468: PPUSH
// if not side or side > 8 then
61469: LD_VAR 0 1
61473: NOT
61474: PUSH
61475: LD_VAR 0 1
61479: PUSH
61480: LD_INT 8
61482: GREATER
61483: OR
61484: IFFALSE 61488
// exit ;
61486: GO 61675
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61488: LD_ADDR_VAR 0 4
61492: PUSH
61493: LD_INT 22
61495: PUSH
61496: LD_VAR 0 1
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 21
61507: PUSH
61508: LD_INT 3
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PPUSH
61519: CALL_OW 69
61523: ST_TO_ADDR
// if not tmp then
61524: LD_VAR 0 4
61528: NOT
61529: IFFALSE 61533
// exit ;
61531: GO 61675
// enable_addtolog := true ;
61533: LD_ADDR_OWVAR 81
61537: PUSH
61538: LD_INT 1
61540: ST_TO_ADDR
// AddToLog ( [ ) ;
61541: LD_STRING [
61543: PPUSH
61544: CALL_OW 561
// for i in tmp do
61548: LD_ADDR_VAR 0 3
61552: PUSH
61553: LD_VAR 0 4
61557: PUSH
61558: FOR_IN
61559: IFFALSE 61666
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61561: LD_STRING [
61563: PUSH
61564: LD_VAR 0 3
61568: PPUSH
61569: CALL_OW 266
61573: STR
61574: PUSH
61575: LD_STRING , 
61577: STR
61578: PUSH
61579: LD_VAR 0 3
61583: PPUSH
61584: CALL_OW 250
61588: STR
61589: PUSH
61590: LD_STRING , 
61592: STR
61593: PUSH
61594: LD_VAR 0 3
61598: PPUSH
61599: CALL_OW 251
61603: STR
61604: PUSH
61605: LD_STRING , 
61607: STR
61608: PUSH
61609: LD_VAR 0 3
61613: PPUSH
61614: CALL_OW 254
61618: STR
61619: PUSH
61620: LD_STRING , 
61622: STR
61623: PUSH
61624: LD_VAR 0 3
61628: PPUSH
61629: LD_INT 1
61631: PPUSH
61632: CALL_OW 268
61636: STR
61637: PUSH
61638: LD_STRING , 
61640: STR
61641: PUSH
61642: LD_VAR 0 3
61646: PPUSH
61647: LD_INT 2
61649: PPUSH
61650: CALL_OW 268
61654: STR
61655: PUSH
61656: LD_STRING ],
61658: STR
61659: PPUSH
61660: CALL_OW 561
// end ;
61664: GO 61558
61666: POP
61667: POP
// AddToLog ( ]; ) ;
61668: LD_STRING ];
61670: PPUSH
61671: CALL_OW 561
// end ;
61675: LD_VAR 0 2
61679: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61680: LD_INT 0
61682: PPUSH
61683: PPUSH
61684: PPUSH
61685: PPUSH
61686: PPUSH
// if not area or not rate or not max then
61687: LD_VAR 0 1
61691: NOT
61692: PUSH
61693: LD_VAR 0 2
61697: NOT
61698: OR
61699: PUSH
61700: LD_VAR 0 4
61704: NOT
61705: OR
61706: IFFALSE 61710
// exit ;
61708: GO 61902
// while 1 do
61710: LD_INT 1
61712: IFFALSE 61902
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61714: LD_ADDR_VAR 0 9
61718: PUSH
61719: LD_VAR 0 1
61723: PPUSH
61724: LD_INT 1
61726: PPUSH
61727: CALL_OW 287
61731: PUSH
61732: LD_INT 10
61734: MUL
61735: ST_TO_ADDR
// r := rate / 10 ;
61736: LD_ADDR_VAR 0 7
61740: PUSH
61741: LD_VAR 0 2
61745: PUSH
61746: LD_INT 10
61748: DIVREAL
61749: ST_TO_ADDR
// time := 1 1$00 ;
61750: LD_ADDR_VAR 0 8
61754: PUSH
61755: LD_INT 2100
61757: ST_TO_ADDR
// if amount < min then
61758: LD_VAR 0 9
61762: PUSH
61763: LD_VAR 0 3
61767: LESS
61768: IFFALSE 61786
// r := r * 2 else
61770: LD_ADDR_VAR 0 7
61774: PUSH
61775: LD_VAR 0 7
61779: PUSH
61780: LD_INT 2
61782: MUL
61783: ST_TO_ADDR
61784: GO 61812
// if amount > max then
61786: LD_VAR 0 9
61790: PUSH
61791: LD_VAR 0 4
61795: GREATER
61796: IFFALSE 61812
// r := r / 2 ;
61798: LD_ADDR_VAR 0 7
61802: PUSH
61803: LD_VAR 0 7
61807: PUSH
61808: LD_INT 2
61810: DIVREAL
61811: ST_TO_ADDR
// time := time / r ;
61812: LD_ADDR_VAR 0 8
61816: PUSH
61817: LD_VAR 0 8
61821: PUSH
61822: LD_VAR 0 7
61826: DIVREAL
61827: ST_TO_ADDR
// if time < 0 then
61828: LD_VAR 0 8
61832: PUSH
61833: LD_INT 0
61835: LESS
61836: IFFALSE 61853
// time := time * - 1 ;
61838: LD_ADDR_VAR 0 8
61842: PUSH
61843: LD_VAR 0 8
61847: PUSH
61848: LD_INT 1
61850: NEG
61851: MUL
61852: ST_TO_ADDR
// wait ( time ) ;
61853: LD_VAR 0 8
61857: PPUSH
61858: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61862: LD_INT 35
61864: PPUSH
61865: LD_INT 875
61867: PPUSH
61868: CALL_OW 12
61872: PPUSH
61873: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61877: LD_INT 1
61879: PPUSH
61880: LD_INT 5
61882: PPUSH
61883: CALL_OW 12
61887: PPUSH
61888: LD_VAR 0 1
61892: PPUSH
61893: LD_INT 1
61895: PPUSH
61896: CALL_OW 55
// end ;
61900: GO 61710
// end ;
61902: LD_VAR 0 5
61906: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61907: LD_INT 0
61909: PPUSH
61910: PPUSH
61911: PPUSH
61912: PPUSH
61913: PPUSH
61914: PPUSH
61915: PPUSH
61916: PPUSH
// if not turrets or not factories then
61917: LD_VAR 0 1
61921: NOT
61922: PUSH
61923: LD_VAR 0 2
61927: NOT
61928: OR
61929: IFFALSE 61933
// exit ;
61931: GO 62240
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61933: LD_ADDR_VAR 0 10
61937: PUSH
61938: LD_INT 5
61940: PUSH
61941: LD_INT 6
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 2
61950: PUSH
61951: LD_INT 4
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 3
61960: PUSH
61961: LD_INT 5
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 24
61975: PUSH
61976: LD_INT 25
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 23
61985: PUSH
61986: LD_INT 27
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 42
61999: PUSH
62000: LD_INT 43
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 44
62009: PUSH
62010: LD_INT 46
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 45
62019: PUSH
62020: LD_INT 47
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: LIST
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: LIST
62036: ST_TO_ADDR
// result := [ ] ;
62037: LD_ADDR_VAR 0 3
62041: PUSH
62042: EMPTY
62043: ST_TO_ADDR
// for i in turrets do
62044: LD_ADDR_VAR 0 4
62048: PUSH
62049: LD_VAR 0 1
62053: PUSH
62054: FOR_IN
62055: IFFALSE 62238
// begin nat := GetNation ( i ) ;
62057: LD_ADDR_VAR 0 7
62061: PUSH
62062: LD_VAR 0 4
62066: PPUSH
62067: CALL_OW 248
62071: ST_TO_ADDR
// weapon := 0 ;
62072: LD_ADDR_VAR 0 8
62076: PUSH
62077: LD_INT 0
62079: ST_TO_ADDR
// if not nat then
62080: LD_VAR 0 7
62084: NOT
62085: IFFALSE 62089
// continue ;
62087: GO 62054
// for j in list [ nat ] do
62089: LD_ADDR_VAR 0 5
62093: PUSH
62094: LD_VAR 0 10
62098: PUSH
62099: LD_VAR 0 7
62103: ARRAY
62104: PUSH
62105: FOR_IN
62106: IFFALSE 62147
// if GetBWeapon ( i ) = j [ 1 ] then
62108: LD_VAR 0 4
62112: PPUSH
62113: CALL_OW 269
62117: PUSH
62118: LD_VAR 0 5
62122: PUSH
62123: LD_INT 1
62125: ARRAY
62126: EQUAL
62127: IFFALSE 62145
// begin weapon := j [ 2 ] ;
62129: LD_ADDR_VAR 0 8
62133: PUSH
62134: LD_VAR 0 5
62138: PUSH
62139: LD_INT 2
62141: ARRAY
62142: ST_TO_ADDR
// break ;
62143: GO 62147
// end ;
62145: GO 62105
62147: POP
62148: POP
// if not weapon then
62149: LD_VAR 0 8
62153: NOT
62154: IFFALSE 62158
// continue ;
62156: GO 62054
// for k in factories do
62158: LD_ADDR_VAR 0 6
62162: PUSH
62163: LD_VAR 0 2
62167: PUSH
62168: FOR_IN
62169: IFFALSE 62234
// begin weapons := AvailableWeaponList ( k ) ;
62171: LD_ADDR_VAR 0 9
62175: PUSH
62176: LD_VAR 0 6
62180: PPUSH
62181: CALL_OW 478
62185: ST_TO_ADDR
// if not weapons then
62186: LD_VAR 0 9
62190: NOT
62191: IFFALSE 62195
// continue ;
62193: GO 62168
// if weapon in weapons then
62195: LD_VAR 0 8
62199: PUSH
62200: LD_VAR 0 9
62204: IN
62205: IFFALSE 62232
// begin result := [ i , weapon ] ;
62207: LD_ADDR_VAR 0 3
62211: PUSH
62212: LD_VAR 0 4
62216: PUSH
62217: LD_VAR 0 8
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: ST_TO_ADDR
// exit ;
62226: POP
62227: POP
62228: POP
62229: POP
62230: GO 62240
// end ; end ;
62232: GO 62168
62234: POP
62235: POP
// end ;
62236: GO 62054
62238: POP
62239: POP
// end ;
62240: LD_VAR 0 3
62244: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62245: LD_INT 0
62247: PPUSH
// if not side or side > 8 then
62248: LD_VAR 0 3
62252: NOT
62253: PUSH
62254: LD_VAR 0 3
62258: PUSH
62259: LD_INT 8
62261: GREATER
62262: OR
62263: IFFALSE 62267
// exit ;
62265: GO 62326
// if not range then
62267: LD_VAR 0 4
62271: NOT
62272: IFFALSE 62283
// range := - 12 ;
62274: LD_ADDR_VAR 0 4
62278: PUSH
62279: LD_INT 12
62281: NEG
62282: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62283: LD_VAR 0 1
62287: PPUSH
62288: LD_VAR 0 2
62292: PPUSH
62293: LD_VAR 0 3
62297: PPUSH
62298: LD_VAR 0 4
62302: PPUSH
62303: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62307: LD_VAR 0 1
62311: PPUSH
62312: LD_VAR 0 2
62316: PPUSH
62317: LD_VAR 0 3
62321: PPUSH
62322: CALL_OW 331
// end ;
62326: LD_VAR 0 5
62330: RET
// export function Video ( mode ) ; begin
62331: LD_INT 0
62333: PPUSH
// ingame_video = mode ;
62334: LD_ADDR_OWVAR 52
62338: PUSH
62339: LD_VAR 0 1
62343: ST_TO_ADDR
// interface_hidden = mode ;
62344: LD_ADDR_OWVAR 54
62348: PUSH
62349: LD_VAR 0 1
62353: ST_TO_ADDR
// end ;
62354: LD_VAR 0 2
62358: RET
// export function Join ( array , element ) ; begin
62359: LD_INT 0
62361: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62362: LD_ADDR_VAR 0 3
62366: PUSH
62367: LD_VAR 0 1
62371: PPUSH
62372: LD_VAR 0 1
62376: PUSH
62377: LD_INT 1
62379: PLUS
62380: PPUSH
62381: LD_VAR 0 2
62385: PPUSH
62386: CALL_OW 1
62390: ST_TO_ADDR
// end ;
62391: LD_VAR 0 3
62395: RET
// export function JoinUnion ( array , element ) ; begin
62396: LD_INT 0
62398: PPUSH
// result := array union element ;
62399: LD_ADDR_VAR 0 3
62403: PUSH
62404: LD_VAR 0 1
62408: PUSH
62409: LD_VAR 0 2
62413: UNION
62414: ST_TO_ADDR
// end ;
62415: LD_VAR 0 3
62419: RET
// export function GetBehemoths ( side ) ; begin
62420: LD_INT 0
62422: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62423: LD_ADDR_VAR 0 2
62427: PUSH
62428: LD_INT 22
62430: PUSH
62431: LD_VAR 0 1
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 31
62442: PUSH
62443: LD_INT 25
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PPUSH
62454: CALL_OW 69
62458: ST_TO_ADDR
// end ;
62459: LD_VAR 0 2
62463: RET
// export function Shuffle ( array ) ; var i , index ; begin
62464: LD_INT 0
62466: PPUSH
62467: PPUSH
62468: PPUSH
// result := [ ] ;
62469: LD_ADDR_VAR 0 2
62473: PUSH
62474: EMPTY
62475: ST_TO_ADDR
// if not array then
62476: LD_VAR 0 1
62480: NOT
62481: IFFALSE 62485
// exit ;
62483: GO 62584
// Randomize ;
62485: CALL_OW 10
// for i = array downto 1 do
62489: LD_ADDR_VAR 0 3
62493: PUSH
62494: DOUBLE
62495: LD_VAR 0 1
62499: INC
62500: ST_TO_ADDR
62501: LD_INT 1
62503: PUSH
62504: FOR_DOWNTO
62505: IFFALSE 62582
// begin index := rand ( 1 , array ) ;
62507: LD_ADDR_VAR 0 4
62511: PUSH
62512: LD_INT 1
62514: PPUSH
62515: LD_VAR 0 1
62519: PPUSH
62520: CALL_OW 12
62524: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62525: LD_ADDR_VAR 0 2
62529: PUSH
62530: LD_VAR 0 2
62534: PPUSH
62535: LD_VAR 0 2
62539: PUSH
62540: LD_INT 1
62542: PLUS
62543: PPUSH
62544: LD_VAR 0 1
62548: PUSH
62549: LD_VAR 0 4
62553: ARRAY
62554: PPUSH
62555: CALL_OW 2
62559: ST_TO_ADDR
// array := Delete ( array , index ) ;
62560: LD_ADDR_VAR 0 1
62564: PUSH
62565: LD_VAR 0 1
62569: PPUSH
62570: LD_VAR 0 4
62574: PPUSH
62575: CALL_OW 3
62579: ST_TO_ADDR
// end ;
62580: GO 62504
62582: POP
62583: POP
// end ;
62584: LD_VAR 0 2
62588: RET
// export function GetBaseMaterials ( base ) ; begin
62589: LD_INT 0
62591: PPUSH
// result := [ 0 , 0 , 0 ] ;
62592: LD_ADDR_VAR 0 2
62596: PUSH
62597: LD_INT 0
62599: PUSH
62600: LD_INT 0
62602: PUSH
62603: LD_INT 0
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: LIST
62610: ST_TO_ADDR
// if not base then
62611: LD_VAR 0 1
62615: NOT
62616: IFFALSE 62620
// exit ;
62618: GO 62669
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62620: LD_ADDR_VAR 0 2
62624: PUSH
62625: LD_VAR 0 1
62629: PPUSH
62630: LD_INT 1
62632: PPUSH
62633: CALL_OW 275
62637: PUSH
62638: LD_VAR 0 1
62642: PPUSH
62643: LD_INT 2
62645: PPUSH
62646: CALL_OW 275
62650: PUSH
62651: LD_VAR 0 1
62655: PPUSH
62656: LD_INT 3
62658: PPUSH
62659: CALL_OW 275
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: LIST
62668: ST_TO_ADDR
// end ;
62669: LD_VAR 0 2
62673: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62674: LD_INT 0
62676: PPUSH
62677: PPUSH
// result := array ;
62678: LD_ADDR_VAR 0 3
62682: PUSH
62683: LD_VAR 0 1
62687: ST_TO_ADDR
// if size > 0 then
62688: LD_VAR 0 2
62692: PUSH
62693: LD_INT 0
62695: GREATER
62696: IFFALSE 62742
// for i := array downto size do
62698: LD_ADDR_VAR 0 4
62702: PUSH
62703: DOUBLE
62704: LD_VAR 0 1
62708: INC
62709: ST_TO_ADDR
62710: LD_VAR 0 2
62714: PUSH
62715: FOR_DOWNTO
62716: IFFALSE 62740
// result := Delete ( result , result ) ;
62718: LD_ADDR_VAR 0 3
62722: PUSH
62723: LD_VAR 0 3
62727: PPUSH
62728: LD_VAR 0 3
62732: PPUSH
62733: CALL_OW 3
62737: ST_TO_ADDR
62738: GO 62715
62740: POP
62741: POP
// end ;
62742: LD_VAR 0 3
62746: RET
// export function ComExit ( unit ) ; var tmp ; begin
62747: LD_INT 0
62749: PPUSH
62750: PPUSH
// if not IsInUnit ( unit ) then
62751: LD_VAR 0 1
62755: PPUSH
62756: CALL_OW 310
62760: NOT
62761: IFFALSE 62765
// exit ;
62763: GO 62825
// tmp := IsInUnit ( unit ) ;
62765: LD_ADDR_VAR 0 3
62769: PUSH
62770: LD_VAR 0 1
62774: PPUSH
62775: CALL_OW 310
62779: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62780: LD_VAR 0 3
62784: PPUSH
62785: CALL_OW 247
62789: PUSH
62790: LD_INT 2
62792: EQUAL
62793: IFFALSE 62806
// ComExitVehicle ( unit ) else
62795: LD_VAR 0 1
62799: PPUSH
62800: CALL_OW 121
62804: GO 62815
// ComExitBuilding ( unit ) ;
62806: LD_VAR 0 1
62810: PPUSH
62811: CALL_OW 122
// result := tmp ;
62815: LD_ADDR_VAR 0 2
62819: PUSH
62820: LD_VAR 0 3
62824: ST_TO_ADDR
// end ;
62825: LD_VAR 0 2
62829: RET
// export function ResetHc ; begin
62830: LD_INT 0
62832: PPUSH
// InitHc ;
62833: CALL_OW 19
// hc_importance := 0 ;
62837: LD_ADDR_OWVAR 32
62841: PUSH
62842: LD_INT 0
62844: ST_TO_ADDR
// end ;
62845: LD_VAR 0 1
62849: RET
