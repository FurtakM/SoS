// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 740 0 2
// PrepareArabian ;
  31: CALL 1433 0 0
// PrepareRussian ;
  35: CALL 3031 0 0
// Action ;
  39: CALL 7665 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 210: LD_ADDR_EXP 14
 214: PUSH
 215: LD_STRING 04_1_RuLabCaptured
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 30
 225: ST_TO_ADDR
// captureCounter := 0 ;
 226: LD_ADDR_EXP 18
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 234: LD_ADDR_EXP 19
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// flamethrowerBuilt := false ;
 242: LD_ADDR_EXP 20
 246: PUSH
 247: LD_INT 0
 249: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 250: LD_ADDR_OWVAR 79
 254: PUSH
 255: LD_INT 0
 257: ST_TO_ADDR
// end ;
 258: LD_VAR 0 1
 262: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 263: LD_EXP 10
 267: NOT
 268: PUSH
 269: LD_EXP 9
 273: NOT
 274: AND
 275: PUSH
 276: LD_EXP 39
 280: NOT
 281: AND
 282: PUSH
 283: LD_EXP 40
 287: NOT
 288: AND
 289: IFFALSE 301
 291: GO 293
 293: DISABLE
// SetAchievement ( ACH_EXT ) ;
 294: LD_STRING ACH_EXT
 296: PPUSH
 297: CALL_OW 543
 301: END
// every 0 0$1 trigger captureCounter >= 6 do
 302: LD_EXP 18
 306: PUSH
 307: LD_INT 6
 309: GREATEREQUAL
 310: IFFALSE 322
 312: GO 314
 314: DISABLE
// SetAchievement ( ACH_KEY ) ;
 315: LD_STRING ACH_KEY
 317: PPUSH
 318: CALL_OW 543
 322: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 323: LD_EXP 19
 327: PUSH
 328: LD_INT 3
 330: GREATEREQUAL
 331: IFFALSE 343
 333: GO 335
 335: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 336: LD_STRING ACH_CHEM
 338: PPUSH
 339: CALL_OW 543
 343: END
// every 0 0$1 trigger debug do var i ;
 344: LD_EXP 1
 348: IFFALSE 432
 350: GO 352
 352: DISABLE
 353: LD_INT 0
 355: PPUSH
// begin enable ;
 356: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 357: LD_ADDR_VAR 0 1
 361: PUSH
 362: LD_INT 22
 364: PUSH
 365: LD_INT 2
 367: PUSH
 368: EMPTY
 369: LIST
 370: LIST
 371: PUSH
 372: LD_INT 3
 374: PUSH
 375: LD_INT 21
 377: PUSH
 378: LD_INT 3
 380: PUSH
 381: EMPTY
 382: LIST
 383: LIST
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PPUSH
 393: CALL_OW 69
 397: PUSH
 398: FOR_IN
 399: IFFALSE 430
// if GetLives ( i ) < 1000 then
 401: LD_VAR 0 1
 405: PPUSH
 406: CALL_OW 256
 410: PUSH
 411: LD_INT 1000
 413: LESS
 414: IFFALSE 428
// SetLives ( i , 1000 ) ;
 416: LD_VAR 0 1
 420: PPUSH
 421: LD_INT 1000
 423: PPUSH
 424: CALL_OW 234
 428: GO 398
 430: POP
 431: POP
// end ; end_of_file
 432: PPOPN 1
 434: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 435: LD_INT 0
 437: PPUSH
// uc_side := side ;
 438: LD_ADDR_OWVAR 20
 442: PUSH
 443: LD_VAR 0 1
 447: ST_TO_ADDR
// uc_nation := nation ;
 448: LD_ADDR_OWVAR 21
 452: PUSH
 453: LD_VAR 0 2
 457: ST_TO_ADDR
// vc_chassis := chassis ;
 458: LD_ADDR_OWVAR 37
 462: PUSH
 463: LD_VAR 0 3
 467: ST_TO_ADDR
// vc_engine := engine ;
 468: LD_ADDR_OWVAR 39
 472: PUSH
 473: LD_VAR 0 4
 477: ST_TO_ADDR
// vc_control := control ;
 478: LD_ADDR_OWVAR 38
 482: PUSH
 483: LD_VAR 0 5
 487: ST_TO_ADDR
// vc_weapon := weapon ;
 488: LD_ADDR_OWVAR 40
 492: PUSH
 493: LD_VAR 0 6
 497: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 498: LD_ADDR_OWVAR 41
 502: PUSH
 503: LD_VAR 0 7
 507: ST_TO_ADDR
// result := CreateVehicle ;
 508: LD_ADDR_VAR 0 8
 512: PUSH
 513: CALL_OW 45
 517: ST_TO_ADDR
// end ;
 518: LD_VAR 0 8
 522: RET
// export function SayX ( units , ident ) ; var i ; begin
 523: LD_INT 0
 525: PPUSH
 526: PPUSH
// result := false ;
 527: LD_ADDR_VAR 0 3
 531: PUSH
 532: LD_INT 0
 534: ST_TO_ADDR
// if not units then
 535: LD_VAR 0 1
 539: NOT
 540: IFFALSE 544
// exit ;
 542: GO 598
// for i in units do
 544: LD_ADDR_VAR 0 4
 548: PUSH
 549: LD_VAR 0 1
 553: PUSH
 554: FOR_IN
 555: IFFALSE 596
// if IsOk ( i ) then
 557: LD_VAR 0 4
 561: PPUSH
 562: CALL_OW 302
 566: IFFALSE 594
// begin Say ( i , ident ) ;
 568: LD_VAR 0 4
 572: PPUSH
 573: LD_VAR 0 2
 577: PPUSH
 578: CALL_OW 88
// result := i ;
 582: LD_ADDR_VAR 0 3
 586: PUSH
 587: LD_VAR 0 4
 591: ST_TO_ADDR
// break ;
 592: GO 596
// end ;
 594: GO 554
 596: POP
 597: POP
// end ;
 598: LD_VAR 0 3
 602: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 603: LD_INT 0
 605: PPUSH
 606: PPUSH
// InitUc ;
 607: CALL_OW 18
// InitHc ;
 611: CALL_OW 19
// uc_side := 0 ;
 615: LD_ADDR_OWVAR 20
 619: PUSH
 620: LD_INT 0
 622: ST_TO_ADDR
// uc_nation := 0 ;
 623: LD_ADDR_OWVAR 21
 627: PUSH
 628: LD_INT 0
 630: ST_TO_ADDR
// for i = 1 to amount do
 631: LD_ADDR_VAR 0 4
 635: PUSH
 636: DOUBLE
 637: LD_INT 1
 639: DEC
 640: ST_TO_ADDR
 641: LD_VAR 0 2
 645: PUSH
 646: FOR_TO
 647: IFFALSE 729
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 649: LD_ADDR_OWVAR 29
 653: PUSH
 654: LD_INT 9
 656: PPUSH
 657: LD_INT 12
 659: PPUSH
 660: CALL_OW 12
 664: PUSH
 665: LD_INT 9
 667: PPUSH
 668: LD_INT 12
 670: PPUSH
 671: CALL_OW 12
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 680: LD_ADDR_OWVAR 35
 684: PUSH
 685: LD_INT 1
 687: NEG
 688: PPUSH
 689: LD_INT 1
 691: PPUSH
 692: CALL_OW 12
 696: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 697: LD_INT 0
 699: PPUSH
 700: LD_INT 12
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 710: CALL_OW 44
 714: PPUSH
 715: LD_VAR 0 1
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL_OW 49
// end ;
 727: GO 646
 729: POP
 730: POP
// InitHc ;
 731: CALL_OW 19
// end ;
 735: LD_VAR 0 3
 739: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 740: LD_INT 0
 742: PPUSH
 743: PPUSH
// uc_side := 0 ;
 744: LD_ADDR_OWVAR 20
 748: PUSH
 749: LD_INT 0
 751: ST_TO_ADDR
// uc_nation := 0 ;
 752: LD_ADDR_OWVAR 21
 756: PUSH
 757: LD_INT 0
 759: ST_TO_ADDR
// for i := 1 to 3 do
 760: LD_ADDR_VAR 0 4
 764: PUSH
 765: DOUBLE
 766: LD_INT 1
 768: DEC
 769: ST_TO_ADDR
 770: LD_INT 3
 772: PUSH
 773: FOR_TO
 774: IFFALSE 811
// begin hc_class := 21 ;
 776: LD_ADDR_OWVAR 28
 780: PUSH
 781: LD_INT 21
 783: ST_TO_ADDR
// hc_gallery :=  ;
 784: LD_ADDR_OWVAR 33
 788: PUSH
 789: LD_STRING 
 791: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 792: CALL_OW 44
 796: PPUSH
 797: LD_VAR 0 1
 801: PPUSH
 802: LD_INT 0
 804: PPUSH
 805: CALL_OW 49
// end ;
 809: GO 773
 811: POP
 812: POP
// for i := 1 to 3 do
 813: LD_ADDR_VAR 0 4
 817: PUSH
 818: DOUBLE
 819: LD_INT 1
 821: DEC
 822: ST_TO_ADDR
 823: LD_INT 3
 825: PUSH
 826: FOR_TO
 827: IFFALSE 864
// begin hc_class := 18 ;
 829: LD_ADDR_OWVAR 28
 833: PUSH
 834: LD_INT 18
 836: ST_TO_ADDR
// hc_gallery :=  ;
 837: LD_ADDR_OWVAR 33
 841: PUSH
 842: LD_STRING 
 844: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 845: CALL_OW 44
 849: PPUSH
 850: LD_VAR 0 1
 854: PPUSH
 855: LD_INT 0
 857: PPUSH
 858: CALL_OW 49
// end ;
 862: GO 826
 864: POP
 865: POP
// for i := 1 to 3 do
 866: LD_ADDR_VAR 0 4
 870: PUSH
 871: DOUBLE
 872: LD_INT 1
 874: DEC
 875: ST_TO_ADDR
 876: LD_INT 3
 878: PUSH
 879: FOR_TO
 880: IFFALSE 917
// begin hc_class := 13 ;
 882: LD_ADDR_OWVAR 28
 886: PUSH
 887: LD_INT 13
 889: ST_TO_ADDR
// hc_gallery :=  ;
 890: LD_ADDR_OWVAR 33
 894: PUSH
 895: LD_STRING 
 897: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 898: CALL_OW 44
 902: PPUSH
 903: LD_VAR 0 1
 907: PPUSH
 908: LD_INT 0
 910: PPUSH
 911: CALL_OW 49
// end ;
 915: GO 879
 917: POP
 918: POP
// for i := 1 to 4 do
 919: LD_ADDR_VAR 0 4
 923: PUSH
 924: DOUBLE
 925: LD_INT 1
 927: DEC
 928: ST_TO_ADDR
 929: LD_INT 4
 931: PUSH
 932: FOR_TO
 933: IFFALSE 970
// begin hc_class := class_frog ;
 935: LD_ADDR_OWVAR 28
 939: PUSH
 940: LD_INT 19
 942: ST_TO_ADDR
// hc_gallery :=  ;
 943: LD_ADDR_OWVAR 33
 947: PUSH
 948: LD_STRING 
 950: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 951: CALL_OW 44
 955: PPUSH
 956: LD_VAR 0 2
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 49
// end ;
 968: GO 932
 970: POP
 971: POP
// end ;
 972: LD_VAR 0 3
 976: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 977: LD_INT 0
 979: PPUSH
 980: PPUSH
 981: PPUSH
// if not observer or not unit then
 982: LD_VAR 0 1
 986: NOT
 987: PUSH
 988: LD_VAR 0 2
 992: NOT
 993: OR
 994: IFFALSE 998
// exit ;
 996: GO 1046
// if not See ( GetSide ( observer ) , unit ) then
 998: LD_VAR 0 1
1002: PPUSH
1003: CALL_OW 255
1007: PPUSH
1008: LD_VAR 0 2
1012: PPUSH
1013: CALL_OW 292
1017: NOT
1018: IFFALSE 1022
// exit ;
1020: GO 1046
// result := GetDistUnits ( observer , unit ) < 12 ;
1022: LD_ADDR_VAR 0 3
1026: PUSH
1027: LD_VAR 0 1
1031: PPUSH
1032: LD_VAR 0 2
1036: PPUSH
1037: CALL_OW 296
1041: PUSH
1042: LD_INT 12
1044: LESS
1045: ST_TO_ADDR
// end ;
1046: LD_VAR 0 3
1050: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1051: LD_INT 0
1053: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1054: LD_VAR 0 2
1058: PUSH
1059: LD_INT 1
1061: ARRAY
1062: PPUSH
1063: LD_VAR 0 2
1067: PUSH
1068: LD_INT 2
1070: ARRAY
1071: PPUSH
1072: CALL_OW 488
1076: PUSH
1077: LD_VAR 0 2
1081: PUSH
1082: LD_INT 1
1084: ARRAY
1085: PPUSH
1086: LD_VAR 0 2
1090: PUSH
1091: LD_INT 2
1093: ARRAY
1094: PPUSH
1095: CALL_OW 428
1099: PUSH
1100: LD_INT 0
1102: EQUAL
1103: AND
1104: IFFALSE 1138
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1106: LD_VAR 0 1
1110: PPUSH
1111: LD_VAR 0 2
1115: PUSH
1116: LD_INT 1
1118: ARRAY
1119: PPUSH
1120: LD_VAR 0 2
1124: PUSH
1125: LD_INT 2
1127: ARRAY
1128: PPUSH
1129: LD_VAR 0 3
1133: PPUSH
1134: CALL_OW 48
// end ;
1138: LD_VAR 0 4
1142: RET
// export function ReverseArray ( array ) ; var i ; begin
1143: LD_INT 0
1145: PPUSH
1146: PPUSH
// if not array then
1147: LD_VAR 0 1
1151: NOT
1152: IFFALSE 1156
// exit ;
1154: GO 1214
// result := [ ] ;
1156: LD_ADDR_VAR 0 2
1160: PUSH
1161: EMPTY
1162: ST_TO_ADDR
// for i := 1 to array do
1163: LD_ADDR_VAR 0 3
1167: PUSH
1168: DOUBLE
1169: LD_INT 1
1171: DEC
1172: ST_TO_ADDR
1173: LD_VAR 0 1
1177: PUSH
1178: FOR_TO
1179: IFFALSE 1212
// result := Insert ( result , 1 , array [ i ] ) ;
1181: LD_ADDR_VAR 0 2
1185: PUSH
1186: LD_VAR 0 2
1190: PPUSH
1191: LD_INT 1
1193: PPUSH
1194: LD_VAR 0 1
1198: PUSH
1199: LD_VAR 0 3
1203: ARRAY
1204: PPUSH
1205: CALL_OW 2
1209: ST_TO_ADDR
1210: GO 1178
1212: POP
1213: POP
// end ;
1214: LD_VAR 0 2
1218: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1219: LD_INT 0
1221: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1222: LD_VAR 0 1
1226: PPUSH
1227: LD_VAR 0 2
1231: PPUSH
1232: LD_VAR 0 3
1236: PPUSH
1237: LD_VAR 0 4
1241: PPUSH
1242: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1246: LD_VAR 0 1
1250: PPUSH
1251: LD_VAR 0 2
1255: PPUSH
1256: LD_VAR 0 3
1260: PPUSH
1261: CALL_OW 331
// end ;
1265: LD_VAR 0 5
1269: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1270: LD_INT 0
1272: PPUSH
// if not units then
1273: LD_VAR 0 1
1277: NOT
1278: IFFALSE 1282
// exit ;
1280: GO 1365
// result := true ;
1282: LD_ADDR_VAR 0 4
1286: PUSH
1287: LD_INT 1
1289: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1290: LD_VAR 0 1
1294: PPUSH
1295: LD_INT 26
1297: PUSH
1298: LD_INT 1
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PPUSH
1305: CALL_OW 72
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: PPUSH
1314: LD_VAR 0 2
1318: PPUSH
1319: CALL_OW 88
1323: NOT
1324: IFFALSE 1365
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1326: LD_ADDR_VAR 0 4
1330: PUSH
1331: LD_VAR 0 1
1335: PPUSH
1336: LD_INT 26
1338: PUSH
1339: LD_INT 2
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: PPUSH
1346: CALL_OW 72
1350: PUSH
1351: LD_INT 1
1353: ARRAY
1354: PPUSH
1355: LD_VAR 0 3
1359: PPUSH
1360: CALL_OW 88
1364: ST_TO_ADDR
// end ;
1365: LD_VAR 0 4
1369: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1370: LD_INT 0
1372: PPUSH
1373: PPUSH
// if not group then
1374: LD_VAR 0 2
1378: NOT
1379: IFFALSE 1383
// exit ;
1381: GO 1428
// for i in group do
1383: LD_ADDR_VAR 0 4
1387: PUSH
1388: LD_VAR 0 2
1392: PUSH
1393: FOR_IN
1394: IFFALSE 1426
// if See ( side , i ) then
1396: LD_VAR 0 1
1400: PPUSH
1401: LD_VAR 0 4
1405: PPUSH
1406: CALL_OW 292
1410: IFFALSE 1424
// begin result := true ;
1412: LD_ADDR_VAR 0 3
1416: PUSH
1417: LD_INT 1
1419: ST_TO_ADDR
// exit ;
1420: POP
1421: POP
1422: GO 1428
// end ;
1424: GO 1393
1426: POP
1427: POP
// end ; end_of_file
1428: LD_VAR 0 3
1432: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1433: LD_INT 0
1435: PPUSH
1436: PPUSH
// uc_side := 2 ;
1437: LD_ADDR_OWVAR 20
1441: PUSH
1442: LD_INT 2
1444: ST_TO_ADDR
// uc_nation := 2 ;
1445: LD_ADDR_OWVAR 21
1449: PUSH
1450: LD_INT 2
1452: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1453: LD_ADDR_EXP 21
1457: PUSH
1458: LD_STRING Heike
1460: PPUSH
1461: LD_EXP 1
1465: NOT
1466: PPUSH
1467: LD_EXP 2
1471: PPUSH
1472: CALL 31038 0 3
1476: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1477: LD_ADDR_EXP 24
1481: PUSH
1482: LD_STRING Ibrahim
1484: PPUSH
1485: LD_EXP 1
1489: NOT
1490: PPUSH
1491: LD_EXP 2
1495: PPUSH
1496: CALL 31038 0 3
1500: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1501: LD_ADDR_EXP 22
1505: PUSH
1506: LD_STRING Givi
1508: PPUSH
1509: LD_EXP 1
1513: NOT
1514: PPUSH
1515: LD_EXP 2
1519: PPUSH
1520: CALL 31038 0 3
1524: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1525: LD_ADDR_EXP 25
1529: PUSH
1530: LD_STRING Kamil
1532: PPUSH
1533: LD_EXP 1
1537: NOT
1538: PPUSH
1539: LD_EXP 2
1543: PPUSH
1544: CALL 31038 0 3
1548: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1549: LD_ADDR_EXP 26
1553: PUSH
1554: LD_STRING Kaia
1556: PPUSH
1557: LD_EXP 1
1561: NOT
1562: PPUSH
1563: LD_EXP 2
1567: PPUSH
1568: CALL 31038 0 3
1572: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1573: LD_ADDR_EXP 27
1577: PUSH
1578: LD_STRING Sophia
1580: PPUSH
1581: LD_EXP 1
1585: NOT
1586: PPUSH
1587: LD_EXP 2
1591: PPUSH
1592: CALL 31038 0 3
1596: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1597: LD_ADDR_EXP 28
1601: PUSH
1602: LD_STRING Markov
1604: PPUSH
1605: LD_EXP 1
1609: NOT
1610: PPUSH
1611: LD_EXP 2
1615: PPUSH
1616: CALL 31038 0 3
1620: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1621: LD_ADDR_EXP 33
1625: PUSH
1626: LD_STRING Aviradze
1628: PPUSH
1629: LD_EXP 1
1633: NOT
1634: PPUSH
1635: LD_EXP 2
1639: PPUSH
1640: CALL 31038 0 3
1644: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1645: LD_ADDR_EXP 32
1649: PUSH
1650: LD_STRING Kurt
1652: PPUSH
1653: LD_EXP 1
1657: NOT
1658: PPUSH
1659: LD_EXP 2
1663: PPUSH
1664: CALL 31038 0 3
1668: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1669: LD_ADDR_EXP 23
1673: PUSH
1674: LD_STRING Mike
1676: PPUSH
1677: LD_EXP 1
1681: NOT
1682: PPUSH
1683: LD_EXP 2
1687: PPUSH
1688: CALL 31038 0 3
1692: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1693: LD_ADDR_EXP 30
1697: PUSH
1698: LD_STRING Olaf
1700: PPUSH
1701: LD_INT 0
1703: PPUSH
1704: LD_STRING 
1706: PPUSH
1707: CALL 31038 0 3
1711: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1712: LD_ADDR_EXP 34
1716: PUSH
1717: LD_STRING 04_2_others
1719: PPUSH
1720: CALL_OW 31
1724: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1725: LD_ADDR_EXP 36
1729: PUSH
1730: LD_STRING 04_2_apes
1732: PPUSH
1733: CALL_OW 31
1737: ST_TO_ADDR
// if hasFlamethrower then
1738: LD_EXP 3
1742: IFFALSE 1973
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1744: LD_INT 70
1746: PPUSH
1747: LD_INT 2
1749: PPUSH
1750: LD_INT 2
1752: PPUSH
1753: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 ] [ Difficulty ] ] ] ] ;
1757: LD_ADDR_EXP 35
1761: PUSH
1762: LD_INT 13
1764: PUSH
1765: LD_INT 1
1767: PUSH
1768: LD_INT 1
1770: PUSH
1771: LD_INT 27
1773: PUSH
1774: LD_INT 2
1776: PUSH
1777: LD_INT 1000
1779: PUSH
1780: LD_INT 0
1782: PUSH
1783: LD_INT 0
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: PUSH
1799: LD_INT 13
1801: PUSH
1802: LD_INT 1
1804: PUSH
1805: LD_INT 1
1807: PUSH
1808: LD_INT 25
1810: PUSH
1811: LD_INT 2
1813: PUSH
1814: LD_INT 1000
1816: PUSH
1817: LD_INT 0
1819: PUSH
1820: LD_INT 0
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: PUSH
1836: LD_INT 13
1838: PUSH
1839: LD_INT 1
1841: PUSH
1842: LD_INT 1
1844: PUSH
1845: LD_INT 26
1847: PUSH
1848: LD_INT 2
1850: PUSH
1851: LD_INT 1000
1853: PUSH
1854: LD_INT 0
1856: PUSH
1857: LD_INT 0
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: PUSH
1873: LD_INT 13
1875: PUSH
1876: LD_INT 1
1878: PUSH
1879: LD_INT 1
1881: PUSH
1882: LD_INT 27
1884: PUSH
1885: LD_INT 2
1887: PUSH
1888: LD_INT 1000
1890: PUSH
1891: LD_INT 0
1893: PUSH
1894: LD_INT 0
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: PUSH
1901: EMPTY
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: PUSH
1910: LD_INT 13
1912: PUSH
1913: LD_INT 1
1915: PUSH
1916: LD_INT 1
1918: PUSH
1919: LD_INT 32
1921: PUSH
1922: LD_INT 2
1924: PUSH
1925: LD_INT 1000
1927: PUSH
1928: LD_INT 0
1930: PUSH
1931: LD_INT 60
1933: PUSH
1934: LD_INT 40
1936: PUSH
1937: LD_INT 20
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: LIST
1944: PUSH
1945: LD_OWVAR 67
1949: ARRAY
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: ST_TO_ADDR
// end else
1971: GO 2187
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 ] [ Difficulty ] ] ] ] ;
1973: LD_ADDR_EXP 35
1977: PUSH
1978: LD_INT 13
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: LD_INT 1
1986: PUSH
1987: LD_INT 25
1989: PUSH
1990: LD_INT 2
1992: PUSH
1993: LD_INT 1000
1995: PUSH
1996: LD_INT 0
1998: PUSH
1999: LD_INT 0
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: PUSH
2006: EMPTY
2007: LIST
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 13
2017: PUSH
2018: LD_INT 1
2020: PUSH
2021: LD_INT 1
2023: PUSH
2024: LD_INT 27
2026: PUSH
2027: LD_INT 2
2029: PUSH
2030: LD_INT 1000
2032: PUSH
2033: LD_INT 0
2035: PUSH
2036: LD_INT 0
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PUSH
2043: EMPTY
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: PUSH
2052: LD_INT 13
2054: PUSH
2055: LD_INT 1
2057: PUSH
2058: LD_INT 1
2060: PUSH
2061: LD_INT 24
2063: PUSH
2064: LD_INT 2
2066: PUSH
2067: LD_INT 1000
2069: PUSH
2070: LD_INT 0
2072: PUSH
2073: LD_INT 0
2075: PUSH
2076: EMPTY
2077: LIST
2078: LIST
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: PUSH
2089: LD_INT 13
2091: PUSH
2092: LD_INT 1
2094: PUSH
2095: LD_INT 1
2097: PUSH
2098: LD_INT 27
2100: PUSH
2101: LD_INT 2
2103: PUSH
2104: LD_INT 1000
2106: PUSH
2107: LD_INT 0
2109: PUSH
2110: LD_INT 0
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: PUSH
2126: LD_INT 13
2128: PUSH
2129: LD_INT 1
2131: PUSH
2132: LD_INT 1
2134: PUSH
2135: LD_INT 32
2137: PUSH
2138: LD_INT 2
2140: PUSH
2141: LD_INT 1000
2143: PUSH
2144: LD_INT 0
2146: PUSH
2147: LD_INT 50
2149: PUSH
2150: LD_INT 30
2152: PUSH
2153: LD_INT 20
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: LIST
2160: PUSH
2161: LD_OWVAR 67
2165: ARRAY
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: ST_TO_ADDR
// end ; uc_side := 5 ;
2187: LD_ADDR_OWVAR 20
2191: PUSH
2192: LD_INT 5
2194: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2195: LD_ADDR_EXP 29
2199: PUSH
2200: LD_STRING Abdul
2202: PPUSH
2203: LD_INT 0
2205: PPUSH
2206: LD_STRING 
2208: PPUSH
2209: CALL 31038 0 3
2213: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2214: LD_ADDR_EXP 31
2218: PUSH
2219: LD_STRING Omar
2221: PPUSH
2222: LD_INT 0
2224: PPUSH
2225: LD_STRING 
2227: PPUSH
2228: CALL 31038 0 3
2232: ST_TO_ADDR
// end ;
2233: LD_VAR 0 1
2237: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2238: LD_INT 0
2240: PPUSH
2241: PPUSH
2242: PPUSH
2243: PPUSH
2244: PPUSH
// pfx := 04_1_ ;
2245: LD_ADDR_VAR 0 2
2249: PUSH
2250: LD_STRING 04_1_
2252: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2253: LD_INT 35
2255: PPUSH
2256: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
2260: LD_INT 3
2262: PPUSH
2263: LD_INT 2
2265: PPUSH
2266: CALL_OW 428
2270: NOT
2271: IFFALSE 2253
// tmp := [ ] ;
2273: LD_ADDR_VAR 0 4
2277: PUSH
2278: EMPTY
2279: ST_TO_ADDR
// uc_side := 5 ;
2280: LD_ADDR_OWVAR 20
2284: PUSH
2285: LD_INT 5
2287: ST_TO_ADDR
// uc_nation := 2 ;
2288: LD_ADDR_OWVAR 21
2292: PUSH
2293: LD_INT 2
2295: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2296: LD_ADDR_EXP 33
2300: PUSH
2301: LD_STRING Aviradze_L
2303: PPUSH
2304: LD_EXP 1
2308: NOT
2309: PPUSH
2310: LD_VAR 0 2
2314: PPUSH
2315: CALL 31038 0 3
2319: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2320: LD_EXP 33
2324: PPUSH
2325: LD_INT 2
2327: PPUSH
2328: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2332: LD_EXP 33
2336: PPUSH
2337: LD_INT 14
2339: PPUSH
2340: LD_INT 0
2342: PPUSH
2343: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
2347: LD_EXP 33
2351: PPUSH
2352: LD_INT 8
2354: PPUSH
2355: LD_INT 6
2357: PPUSH
2358: CALL_OW 111
// AddComHold ( Aviradze ) ;
2362: LD_EXP 33
2366: PPUSH
2367: CALL_OW 200
// tmp := [ Aviradze ] ;
2371: LD_ADDR_VAR 0 4
2375: PUSH
2376: LD_EXP 33
2380: PUSH
2381: EMPTY
2382: LIST
2383: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2384: LD_INT 70
2386: PPUSH
2387: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2391: LD_STRING Ibrahim_L
2393: PPUSH
2394: LD_EXP 1
2398: NOT
2399: PPUSH
2400: LD_VAR 0 2
2404: PPUSH
2405: CALL 31038 0 3
2409: IFFALSE 2509
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2411: LD_ADDR_EXP 24
2415: PUSH
2416: LD_STRING Ibrahim_L
2418: PPUSH
2419: LD_EXP 1
2423: NOT
2424: PPUSH
2425: LD_VAR 0 2
2429: PPUSH
2430: CALL 31038 0 3
2434: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2435: LD_EXP 24
2439: PPUSH
2440: LD_INT 2
2442: PPUSH
2443: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2447: LD_EXP 24
2451: PPUSH
2452: LD_INT 14
2454: PPUSH
2455: LD_INT 0
2457: PPUSH
2458: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
2462: LD_EXP 24
2466: PPUSH
2467: LD_INT 8
2469: PPUSH
2470: LD_INT 7
2472: PPUSH
2473: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2477: LD_EXP 24
2481: PPUSH
2482: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2486: LD_ADDR_VAR 0 4
2490: PUSH
2491: LD_VAR 0 4
2495: PUSH
2496: LD_EXP 24
2500: ADD
2501: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2502: LD_INT 70
2504: PPUSH
2505: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2509: LD_STRING Kaia_L
2511: PPUSH
2512: LD_EXP 1
2516: NOT
2517: PPUSH
2518: LD_VAR 0 2
2522: PPUSH
2523: CALL 31038 0 3
2527: IFFALSE 2627
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2529: LD_ADDR_EXP 26
2533: PUSH
2534: LD_STRING Kaia_L
2536: PPUSH
2537: LD_EXP 1
2541: NOT
2542: PPUSH
2543: LD_VAR 0 2
2547: PPUSH
2548: CALL 31038 0 3
2552: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2553: LD_EXP 26
2557: PPUSH
2558: LD_INT 2
2560: PPUSH
2561: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2565: LD_EXP 26
2569: PPUSH
2570: LD_INT 14
2572: PPUSH
2573: LD_INT 0
2575: PPUSH
2576: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
2580: LD_EXP 26
2584: PPUSH
2585: LD_INT 8
2587: PPUSH
2588: LD_INT 7
2590: PPUSH
2591: CALL_OW 111
// AddComHold ( Kaia ) ;
2595: LD_EXP 26
2599: PPUSH
2600: CALL_OW 200
// tmp := tmp ^ Kaia ;
2604: LD_ADDR_VAR 0 4
2608: PUSH
2609: LD_VAR 0 4
2613: PUSH
2614: LD_EXP 26
2618: ADD
2619: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2620: LD_INT 70
2622: PPUSH
2623: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2627: LD_STRING Kamil_L
2629: PPUSH
2630: LD_EXP 1
2634: NOT
2635: PPUSH
2636: LD_VAR 0 2
2640: PPUSH
2641: CALL 31038 0 3
2645: IFFALSE 2745
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2647: LD_ADDR_EXP 25
2651: PUSH
2652: LD_STRING Kamil_L
2654: PPUSH
2655: LD_EXP 1
2659: NOT
2660: PPUSH
2661: LD_VAR 0 2
2665: PPUSH
2666: CALL 31038 0 3
2670: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2671: LD_EXP 25
2675: PPUSH
2676: LD_INT 2
2678: PPUSH
2679: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2683: LD_EXP 25
2687: PPUSH
2688: LD_INT 14
2690: PPUSH
2691: LD_INT 0
2693: PPUSH
2694: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
2698: LD_EXP 25
2702: PPUSH
2703: LD_INT 8
2705: PPUSH
2706: LD_INT 7
2708: PPUSH
2709: CALL_OW 111
// AddComHold ( Kamil ) ;
2713: LD_EXP 25
2717: PPUSH
2718: CALL_OW 200
// tmp := tmp ^ Kamil ;
2722: LD_ADDR_VAR 0 4
2726: PUSH
2727: LD_VAR 0 4
2731: PUSH
2732: LD_EXP 25
2736: ADD
2737: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2738: LD_INT 70
2740: PPUSH
2741: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2745: LD_STRING Sophia_L
2747: PPUSH
2748: LD_EXP 1
2752: NOT
2753: PPUSH
2754: LD_VAR 0 2
2758: PPUSH
2759: CALL 31038 0 3
2763: IFFALSE 2863
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2765: LD_ADDR_EXP 27
2769: PUSH
2770: LD_STRING Sophia_L
2772: PPUSH
2773: LD_EXP 1
2777: NOT
2778: PPUSH
2779: LD_VAR 0 2
2783: PPUSH
2784: CALL 31038 0 3
2788: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2789: LD_EXP 27
2793: PPUSH
2794: LD_INT 2
2796: PPUSH
2797: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2801: LD_EXP 27
2805: PPUSH
2806: LD_INT 14
2808: PPUSH
2809: LD_INT 0
2811: PPUSH
2812: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
2816: LD_EXP 27
2820: PPUSH
2821: LD_INT 9
2823: PPUSH
2824: LD_INT 6
2826: PPUSH
2827: CALL_OW 111
// AddComHold ( Sophia ) ;
2831: LD_EXP 27
2835: PPUSH
2836: CALL_OW 200
// tmp := tmp ^ Sophia ;
2840: LD_ADDR_VAR 0 4
2844: PUSH
2845: LD_VAR 0 4
2849: PUSH
2850: LD_EXP 27
2854: ADD
2855: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2856: LD_INT 70
2858: PPUSH
2859: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2863: LD_ADDR_VAR 0 5
2867: PUSH
2868: LD_STRING 04_1_others_L
2870: PPUSH
2871: CALL_OW 31
2875: ST_TO_ADDR
// if tmp2 then
2876: LD_VAR 0 5
2880: IFFALSE 2977
// for i in tmp2 do
2882: LD_ADDR_VAR 0 3
2886: PUSH
2887: LD_VAR 0 5
2891: PUSH
2892: FOR_IN
2893: IFFALSE 2975
// begin SetDir ( i , 2 ) ;
2895: LD_VAR 0 3
2899: PPUSH
2900: LD_INT 2
2902: PPUSH
2903: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2907: LD_VAR 0 3
2911: PPUSH
2912: LD_INT 14
2914: PPUSH
2915: LD_INT 0
2917: PPUSH
2918: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2922: LD_ADDR_EXP 34
2926: PUSH
2927: LD_EXP 34
2931: PPUSH
2932: LD_EXP 34
2936: PUSH
2937: LD_INT 1
2939: PLUS
2940: PPUSH
2941: LD_VAR 0 3
2945: PPUSH
2946: CALL_OW 1
2950: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2951: LD_VAR 0 3
2955: PPUSH
2956: LD_INT 17
2958: PPUSH
2959: LD_INT 14
2961: PPUSH
2962: CALL_OW 111
// wait ( 0 0$2 ) ;
2966: LD_INT 70
2968: PPUSH
2969: CALL_OW 67
// end ;
2973: GO 2892
2975: POP
2976: POP
// for i in tmp union tmp2 do
2977: LD_ADDR_VAR 0 3
2981: PUSH
2982: LD_VAR 0 4
2986: PUSH
2987: LD_VAR 0 5
2991: UNION
2992: PUSH
2993: FOR_IN
2994: IFFALSE 3024
// begin SetSide ( i , 2 ) ;
2996: LD_VAR 0 3
3000: PPUSH
3001: LD_INT 2
3003: PPUSH
3004: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
3008: LD_VAR 0 3
3012: PPUSH
3013: LD_EXP 21
3017: PPUSH
3018: CALL_OW 112
// end ;
3022: GO 2993
3024: POP
3025: POP
// end ; end_of_file
3026: LD_VAR 0 1
3030: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
3031: LD_INT 0
3033: PPUSH
3034: PPUSH
3035: PPUSH
// uc_side := 3 ;
3036: LD_ADDR_OWVAR 20
3040: PUSH
3041: LD_INT 3
3043: ST_TO_ADDR
// uc_nation := 3 ;
3044: LD_ADDR_OWVAR 21
3048: PUSH
3049: LD_INT 3
3051: ST_TO_ADDR
// crossRoadGuard := [ ] ;
3052: LD_ADDR_EXP 37
3056: PUSH
3057: EMPTY
3058: ST_TO_ADDR
// oilBaseGuard := [ ] ;
3059: LD_ADDR_EXP 38
3063: PUSH
3064: EMPTY
3065: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3066: LD_ADDR_EXP 41
3070: PUSH
3071: EMPTY
3072: ST_TO_ADDR
// for i := 1 to 2 do
3073: LD_ADDR_VAR 0 2
3077: PUSH
3078: DOUBLE
3079: LD_INT 1
3081: DEC
3082: ST_TO_ADDR
3083: LD_INT 2
3085: PUSH
3086: FOR_TO
3087: IFFALSE 3222
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3089: LD_INT 0
3091: PPUSH
3092: LD_INT 1
3094: PPUSH
3095: LD_INT 3
3097: PUSH
3098: LD_INT 4
3100: PUSH
3101: LD_INT 5
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: LIST
3108: PUSH
3109: LD_OWVAR 67
3113: ARRAY
3114: PPUSH
3115: CALL_OW 380
// un := CreateHuman ;
3119: LD_ADDR_VAR 0 3
3123: PUSH
3124: CALL_OW 44
3128: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3129: LD_ADDR_EXP 37
3133: PUSH
3134: LD_EXP 37
3138: PPUSH
3139: LD_EXP 37
3143: PUSH
3144: LD_INT 1
3146: PLUS
3147: PPUSH
3148: LD_VAR 0 3
3152: PPUSH
3153: CALL_OW 1
3157: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3158: LD_VAR 0 3
3162: PPUSH
3163: LD_INT 100
3165: PPUSH
3166: LD_INT 63
3168: PPUSH
3169: LD_INT 3
3171: PPUSH
3172: LD_INT 0
3174: PPUSH
3175: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3179: LD_VAR 0 3
3183: PPUSH
3184: LD_INT 97
3186: PPUSH
3187: LD_INT 64
3189: PPUSH
3190: CALL_OW 428
3194: PUSH
3195: LD_INT 98
3197: PPUSH
3198: LD_INT 58
3200: PPUSH
3201: CALL_OW 428
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PUSH
3210: LD_VAR 0 2
3214: ARRAY
3215: PPUSH
3216: CALL_OW 120
// end ;
3220: GO 3086
3222: POP
3223: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3224: LD_INT 51
3226: PPUSH
3227: LD_INT 77
3229: PPUSH
3230: CALL_OW 428
3234: PPUSH
3235: CALL_OW 274
3239: PPUSH
3240: LD_INT 1
3242: PPUSH
3243: LD_INT 120
3245: PPUSH
3246: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3250: LD_INT 10
3252: PPUSH
3253: CALL_OW 274
3257: PPUSH
3258: LD_INT 2
3260: PPUSH
3261: LD_INT 300
3263: PPUSH
3264: CALL_OW 277
// for i := 1 to 2 do
3268: LD_ADDR_VAR 0 2
3272: PUSH
3273: DOUBLE
3274: LD_INT 1
3276: DEC
3277: ST_TO_ADDR
3278: LD_INT 2
3280: PUSH
3281: FOR_TO
3282: IFFALSE 3396
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3284: LD_INT 0
3286: PPUSH
3287: LD_INT 1
3289: PPUSH
3290: LD_INT 3
3292: PUSH
3293: LD_INT 4
3295: PUSH
3296: LD_INT 5
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: LIST
3303: PUSH
3304: LD_OWVAR 67
3308: ARRAY
3309: PPUSH
3310: CALL_OW 380
// un := CreateHuman ;
3314: LD_ADDR_VAR 0 3
3318: PUSH
3319: CALL_OW 44
3323: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3324: LD_ADDR_EXP 38
3328: PUSH
3329: LD_EXP 38
3333: PPUSH
3334: LD_EXP 38
3338: PUSH
3339: LD_INT 1
3341: PLUS
3342: PPUSH
3343: LD_VAR 0 3
3347: PPUSH
3348: CALL_OW 1
3352: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3353: LD_VAR 0 3
3357: PPUSH
3358: LD_INT 198
3360: PPUSH
3361: LD_INT 106
3363: PPUSH
3364: CALL_OW 428
3368: PUSH
3369: LD_INT 205
3371: PPUSH
3372: LD_INT 114
3374: PPUSH
3375: CALL_OW 428
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: PUSH
3384: LD_VAR 0 2
3388: ARRAY
3389: PPUSH
3390: CALL_OW 52
// end ;
3394: GO 3281
3396: POP
3397: POP
// for i := 1 to 2 do
3398: LD_ADDR_VAR 0 2
3402: PUSH
3403: DOUBLE
3404: LD_INT 1
3406: DEC
3407: ST_TO_ADDR
3408: LD_INT 2
3410: PUSH
3411: FOR_TO
3412: IFFALSE 3489
// begin PrepareHuman ( false , 2 , 3 ) ;
3414: LD_INT 0
3416: PPUSH
3417: LD_INT 2
3419: PPUSH
3420: LD_INT 3
3422: PPUSH
3423: CALL_OW 380
// un := CreateHuman ;
3427: LD_ADDR_VAR 0 3
3431: PUSH
3432: CALL_OW 44
3436: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3437: LD_ADDR_EXP 38
3441: PUSH
3442: LD_EXP 38
3446: PPUSH
3447: LD_EXP 38
3451: PUSH
3452: LD_INT 1
3454: PLUS
3455: PPUSH
3456: LD_VAR 0 3
3460: PPUSH
3461: CALL_OW 1
3465: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3466: LD_VAR 0 3
3470: PPUSH
3471: LD_INT 204
3473: PPUSH
3474: LD_INT 108
3476: PPUSH
3477: LD_INT 2
3479: PPUSH
3480: LD_INT 0
3482: PPUSH
3483: CALL_OW 50
// end ;
3487: GO 3411
3489: POP
3490: POP
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
3491: LD_ADDR_VAR 0 2
3495: PUSH
3496: DOUBLE
3497: LD_INT 1
3499: DEC
3500: ST_TO_ADDR
3501: LD_INT 4
3503: PUSH
3504: LD_INT 5
3506: PUSH
3507: LD_INT 6
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: LIST
3514: PUSH
3515: LD_OWVAR 67
3519: ARRAY
3520: PUSH
3521: FOR_TO
3522: IFFALSE 3643
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3524: LD_INT 0
3526: PPUSH
3527: LD_INT 1
3529: PUSH
3530: LD_INT 1
3532: PUSH
3533: LD_INT 2
3535: PUSH
3536: LD_INT 4
3538: PUSH
3539: LD_INT 1
3541: PUSH
3542: EMPTY
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: PUSH
3549: LD_INT 1
3551: PPUSH
3552: LD_INT 5
3554: PPUSH
3555: CALL_OW 12
3559: ARRAY
3560: PPUSH
3561: LD_INT 3
3563: PUSH
3564: LD_INT 4
3566: PUSH
3567: LD_INT 5
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: LIST
3574: PUSH
3575: LD_OWVAR 67
3579: ARRAY
3580: PPUSH
3581: CALL_OW 380
// un := CreateHuman ;
3585: LD_ADDR_VAR 0 3
3589: PUSH
3590: CALL_OW 44
3594: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3595: LD_VAR 0 3
3599: PPUSH
3600: LD_INT 11
3602: PPUSH
3603: LD_INT 0
3605: PPUSH
3606: CALL 65941 0 3
3610: IFFALSE 3641
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3612: LD_ADDR_EXP 39
3616: PUSH
3617: LD_EXP 39
3621: PPUSH
3622: LD_EXP 39
3626: PUSH
3627: LD_INT 1
3629: PLUS
3630: PPUSH
3631: LD_VAR 0 3
3635: PPUSH
3636: CALL_OW 1
3640: ST_TO_ADDR
// end ;
3641: GO 3521
3643: POP
3644: POP
// for i := 1 to 3 do
3645: LD_ADDR_VAR 0 2
3649: PUSH
3650: DOUBLE
3651: LD_INT 1
3653: DEC
3654: ST_TO_ADDR
3655: LD_INT 3
3657: PUSH
3658: FOR_TO
3659: IFFALSE 3749
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 ] [ Difficulty ] ) ;
3661: LD_INT 0
3663: PPUSH
3664: LD_INT 1
3666: PPUSH
3667: LD_INT 3
3669: PUSH
3670: LD_INT 4
3672: PUSH
3673: LD_INT 4
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: LIST
3680: PUSH
3681: LD_OWVAR 67
3685: ARRAY
3686: PPUSH
3687: CALL_OW 380
// un := CreateHuman ;
3691: LD_ADDR_VAR 0 3
3695: PUSH
3696: CALL_OW 44
3700: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3701: LD_VAR 0 3
3705: PPUSH
3706: LD_INT 11
3708: PPUSH
3709: LD_INT 0
3711: PPUSH
3712: CALL 65941 0 3
3716: IFFALSE 3747
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3718: LD_ADDR_EXP 39
3722: PUSH
3723: LD_EXP 39
3727: PPUSH
3728: LD_EXP 39
3732: PUSH
3733: LD_INT 1
3735: PLUS
3736: PPUSH
3737: LD_VAR 0 3
3741: PPUSH
3742: CALL_OW 1
3746: ST_TO_ADDR
// end ;
3747: GO 3658
3749: POP
3750: POP
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
3751: LD_ADDR_VAR 0 2
3755: PUSH
3756: DOUBLE
3757: LD_INT 1
3759: DEC
3760: ST_TO_ADDR
3761: LD_INT 5
3763: PUSH
3764: LD_INT 6
3766: PUSH
3767: LD_INT 7
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: LIST
3774: PUSH
3775: LD_OWVAR 67
3779: ARRAY
3780: PUSH
3781: FOR_TO
3782: IFFALSE 3903
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3784: LD_INT 0
3786: PPUSH
3787: LD_INT 1
3789: PUSH
3790: LD_INT 1
3792: PUSH
3793: LD_INT 2
3795: PUSH
3796: LD_INT 4
3798: PUSH
3799: LD_INT 1
3801: PUSH
3802: EMPTY
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: PUSH
3809: LD_INT 1
3811: PPUSH
3812: LD_INT 5
3814: PPUSH
3815: CALL_OW 12
3819: ARRAY
3820: PPUSH
3821: LD_INT 3
3823: PUSH
3824: LD_INT 4
3826: PUSH
3827: LD_INT 5
3829: PUSH
3830: EMPTY
3831: LIST
3832: LIST
3833: LIST
3834: PUSH
3835: LD_OWVAR 67
3839: ARRAY
3840: PPUSH
3841: CALL_OW 380
// un := CreateHuman ;
3845: LD_ADDR_VAR 0 3
3849: PUSH
3850: CALL_OW 44
3854: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3855: LD_VAR 0 3
3859: PPUSH
3860: LD_INT 15
3862: PPUSH
3863: LD_INT 0
3865: PPUSH
3866: CALL 65941 0 3
3870: IFFALSE 3901
// ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3872: LD_ADDR_EXP 40
3876: PUSH
3877: LD_EXP 40
3881: PPUSH
3882: LD_EXP 40
3886: PUSH
3887: LD_INT 1
3889: PLUS
3890: PPUSH
3891: LD_VAR 0 3
3895: PPUSH
3896: CALL_OW 1
3900: ST_TO_ADDR
// end ;
3901: GO 3781
3903: POP
3904: POP
// end ;
3905: LD_VAR 0 1
3909: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3910: LD_INT 0
3912: PPUSH
3913: PPUSH
3914: PPUSH
// uc_side := 3 ;
3915: LD_ADDR_OWVAR 20
3919: PUSH
3920: LD_INT 3
3922: ST_TO_ADDR
// uc_nation := 3 ;
3923: LD_ADDR_OWVAR 21
3927: PUSH
3928: LD_INT 3
3930: ST_TO_ADDR
// for i := 1 to 6 do
3931: LD_ADDR_VAR 0 2
3935: PUSH
3936: DOUBLE
3937: LD_INT 1
3939: DEC
3940: ST_TO_ADDR
3941: LD_INT 6
3943: PUSH
3944: FOR_TO
3945: IFFALSE 4024
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
3947: LD_INT 0
3949: PPUSH
3950: LD_INT 1
3952: PUSH
3953: LD_INT 4
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: PUSH
3960: LD_INT 1
3962: PPUSH
3963: LD_INT 2
3965: PPUSH
3966: CALL_OW 12
3970: ARRAY
3971: PPUSH
3972: LD_INT 0
3974: PPUSH
3975: CALL_OW 380
// un := CreateHuman ;
3979: LD_ADDR_VAR 0 3
3983: PUSH
3984: CALL_OW 44
3988: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
3989: LD_VAR 0 3
3993: PPUSH
3994: LD_INT 54
3996: PPUSH
3997: LD_INT 88
3999: PPUSH
4000: LD_INT 12
4002: PPUSH
4003: LD_INT 0
4005: PPUSH
4006: CALL_OW 50
// SetLives ( un , 1 ) ;
4010: LD_VAR 0 3
4014: PPUSH
4015: LD_INT 1
4017: PPUSH
4018: CALL_OW 234
// end ;
4022: GO 3944
4024: POP
4025: POP
// uc_side := 3 ;
4026: LD_ADDR_OWVAR 20
4030: PUSH
4031: LD_INT 3
4033: ST_TO_ADDR
// uc_nation := 0 ;
4034: LD_ADDR_OWVAR 21
4038: PUSH
4039: LD_INT 0
4041: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4042: LD_ADDR_EXP 42
4046: PUSH
4047: EMPTY
4048: ST_TO_ADDR
// apeEngGroup := [ ] ;
4049: LD_ADDR_EXP 43
4053: PUSH
4054: EMPTY
4055: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
4056: LD_ADDR_VAR 0 2
4060: PUSH
4061: DOUBLE
4062: LD_INT 1
4064: DEC
4065: ST_TO_ADDR
4066: LD_INT 4
4068: PUSH
4069: LD_INT 5
4071: PUSH
4072: LD_INT 6
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: LIST
4079: PUSH
4080: LD_OWVAR 67
4084: ARRAY
4085: PUSH
4086: FOR_TO
4087: IFFALSE 4201
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4089: LD_INT 0
4091: PPUSH
4092: LD_INT 15
4094: PPUSH
4095: LD_INT 3
4097: PUSH
4098: LD_INT 4
4100: PUSH
4101: LD_INT 5
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: PUSH
4109: LD_OWVAR 67
4113: ARRAY
4114: PPUSH
4115: CALL_OW 380
// un := CreateHuman ;
4119: LD_ADDR_VAR 0 3
4123: PUSH
4124: CALL_OW 44
4128: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4129: LD_ADDR_EXP 42
4133: PUSH
4134: LD_EXP 42
4138: PPUSH
4139: LD_EXP 42
4143: PUSH
4144: LD_INT 1
4146: PLUS
4147: PPUSH
4148: LD_VAR 0 3
4152: PPUSH
4153: CALL_OW 1
4157: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4158: LD_VAR 0 3
4162: PPUSH
4163: LD_INT 0
4165: PPUSH
4166: LD_INT 5
4168: PPUSH
4169: CALL_OW 12
4173: PPUSH
4174: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4178: LD_VAR 0 3
4182: PPUSH
4183: LD_INT 56
4185: PPUSH
4186: LD_INT 82
4188: PPUSH
4189: LD_INT 6
4191: PPUSH
4192: LD_INT 0
4194: PPUSH
4195: CALL_OW 50
// end ;
4199: GO 4086
4201: POP
4202: POP
// for i := 1 to 2 do
4203: LD_ADDR_VAR 0 2
4207: PUSH
4208: DOUBLE
4209: LD_INT 1
4211: DEC
4212: ST_TO_ADDR
4213: LD_INT 2
4215: PUSH
4216: FOR_TO
4217: IFFALSE 4293
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4219: LD_INT 0
4221: PPUSH
4222: LD_INT 16
4224: PPUSH
4225: LD_INT 4
4227: PPUSH
4228: CALL_OW 380
// un := CreateHuman ;
4232: LD_ADDR_VAR 0 3
4236: PUSH
4237: CALL_OW 44
4241: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4242: LD_ADDR_EXP 43
4246: PUSH
4247: LD_EXP 43
4251: PPUSH
4252: LD_EXP 43
4256: PUSH
4257: LD_INT 1
4259: PLUS
4260: PPUSH
4261: LD_VAR 0 3
4265: PPUSH
4266: CALL_OW 1
4270: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4271: LD_VAR 0 3
4275: PPUSH
4276: LD_INT 51
4278: PPUSH
4279: LD_INT 77
4281: PPUSH
4282: CALL_OW 428
4286: PPUSH
4287: CALL_OW 52
// end ;
4291: GO 4216
4293: POP
4294: POP
// end ;
4295: LD_VAR 0 1
4299: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4300: LD_EXP 42
4304: PPUSH
4305: LD_INT 3
4307: PUSH
4308: LD_INT 24
4310: PUSH
4311: LD_INT 600
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PUSH
4322: LD_INT 3
4324: PUSH
4325: LD_INT 54
4327: PUSH
4328: EMPTY
4329: LIST
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: PUSH
4335: EMPTY
4336: LIST
4337: LIST
4338: PPUSH
4339: CALL_OW 72
4343: PUSH
4344: LD_INT 66
4346: PPUSH
4347: LD_INT 89
4349: PPUSH
4350: CALL_OW 428
4354: PPUSH
4355: CALL_OW 302
4359: AND
4360: IFFALSE 4445
4362: GO 4364
4364: DISABLE
4365: LD_INT 0
4367: PPUSH
// begin enable ;
4368: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4369: LD_ADDR_VAR 0 1
4373: PUSH
4374: LD_EXP 42
4378: PPUSH
4379: LD_INT 3
4381: PUSH
4382: LD_INT 24
4384: PUSH
4385: LD_INT 600
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: PUSH
4396: LD_INT 3
4398: PUSH
4399: LD_INT 54
4401: PUSH
4402: EMPTY
4403: LIST
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: PPUSH
4413: CALL_OW 72
4417: PUSH
4418: FOR_IN
4419: IFFALSE 4443
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4421: LD_VAR 0 1
4425: PPUSH
4426: LD_INT 66
4428: PPUSH
4429: LD_INT 89
4431: PPUSH
4432: CALL_OW 428
4436: PPUSH
4437: CALL_OW 120
4441: GO 4418
4443: POP
4444: POP
// end ;
4445: PPOPN 1
4447: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4448: LD_INT 22
4450: PUSH
4451: LD_INT 2
4453: PUSH
4454: EMPTY
4455: LIST
4456: LIST
4457: PUSH
4458: LD_INT 92
4460: PUSH
4461: LD_INT 54
4463: PUSH
4464: LD_INT 77
4466: PUSH
4467: LD_INT 8
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 69
4484: IFFALSE 4548
4486: GO 4488
4488: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4489: LD_EXP 43
4493: PPUSH
4494: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4498: LD_EXP 43
4502: PPUSH
4503: LD_INT 22
4505: PUSH
4506: LD_INT 2
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 92
4515: PUSH
4516: LD_INT 54
4518: PUSH
4519: LD_INT 77
4521: PUSH
4522: LD_INT 8
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: PPUSH
4535: CALL_OW 69
4539: PUSH
4540: LD_INT 1
4542: ARRAY
4543: PPUSH
4544: CALL_OW 175
// end ;
4548: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag ; begin
4549: LD_INT 0
4551: PPUSH
4552: PPUSH
4553: PPUSH
4554: PPUSH
4555: PPUSH
4556: PPUSH
4557: PPUSH
4558: PPUSH
4559: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4560: LD_ADDR_VAR 0 3
4564: PUSH
4565: LD_INT 1
4567: PPUSH
4568: LD_INT 3
4570: PPUSH
4571: CALL_OW 12
4575: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4576: LD_ADDR_VAR 0 5
4580: PUSH
4581: LD_INT 16
4583: PUSH
4584: LD_INT 17
4586: PUSH
4587: LD_INT 19
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: LIST
4594: PUSH
4595: LD_VAR 0 3
4599: ARRAY
4600: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4601: LD_ADDR_VAR 0 7
4605: PUSH
4606: LD_INT 159
4608: PUSH
4609: LD_INT 25
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: PUSH
4616: LD_INT 137
4618: PUSH
4619: LD_INT 37
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PUSH
4626: LD_INT 123
4628: PUSH
4629: LD_INT 55
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: LD_INT 115
4638: PUSH
4639: LD_INT 71
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: PUSH
4646: LD_INT 106
4648: PUSH
4649: LD_INT 88
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: PUSH
4656: LD_INT 97
4658: PUSH
4659: LD_INT 114
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PUSH
4666: LD_INT 75
4668: PUSH
4669: LD_INT 146
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: PUSH
4685: LD_INT 206
4687: PUSH
4688: LD_INT 135
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: PUSH
4695: LD_INT 184
4697: PUSH
4698: LD_INT 111
4700: PUSH
4701: EMPTY
4702: LIST
4703: LIST
4704: PUSH
4705: LD_INT 154
4707: PUSH
4708: LD_INT 97
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: PUSH
4715: LD_INT 122
4717: PUSH
4718: LD_INT 80
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: PUSH
4725: LD_INT 109
4727: PUSH
4728: LD_INT 78
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: PUSH
4735: LD_INT 97
4737: PUSH
4738: LD_INT 113
4740: PUSH
4741: EMPTY
4742: LIST
4743: LIST
4744: PUSH
4745: LD_INT 75
4747: PUSH
4748: LD_INT 147
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: PUSH
4764: LD_INT 185
4766: PUSH
4767: LD_INT 72
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: PUSH
4774: LD_INT 171
4776: PUSH
4777: LD_INT 83
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: PUSH
4784: LD_INT 161
4786: PUSH
4787: LD_INT 99
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: PUSH
4794: LD_INT 125
4796: PUSH
4797: LD_INT 82
4799: PUSH
4800: EMPTY
4801: LIST
4802: LIST
4803: PUSH
4804: LD_INT 105
4806: PUSH
4807: LD_INT 90
4809: PUSH
4810: EMPTY
4811: LIST
4812: LIST
4813: PUSH
4814: LD_INT 96
4816: PUSH
4817: LD_INT 116
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: PUSH
4824: LD_INT 75
4826: PUSH
4827: LD_INT 147
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: LIST
4847: PUSH
4848: LD_VAR 0 3
4852: ARRAY
4853: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4854: LD_ADDR_VAR 0 4
4858: PUSH
4859: LD_INT 4
4861: PUSH
4862: LD_INT 5
4864: PUSH
4865: LD_INT 3
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: PUSH
4873: LD_VAR 0 3
4877: ARRAY
4878: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4879: LD_ADDR_VAR 0 6
4883: PUSH
4884: LD_INT 22
4886: PUSH
4887: LD_INT 20
4889: PUSH
4890: LD_INT 21
4892: PUSH
4893: EMPTY
4894: LIST
4895: LIST
4896: LIST
4897: PUSH
4898: LD_VAR 0 3
4902: ARRAY
4903: ST_TO_ADDR
// for i := 1 to 2 do
4904: LD_ADDR_VAR 0 2
4908: PUSH
4909: DOUBLE
4910: LD_INT 1
4912: DEC
4913: ST_TO_ADDR
4914: LD_INT 2
4916: PUSH
4917: FOR_TO
4918: IFFALSE 4936
// EraseResourceArea ( i , outerSpawnArea ) ;
4920: LD_VAR 0 2
4924: PPUSH
4925: LD_VAR 0 6
4929: PPUSH
4930: CALL_OW 286
4934: GO 4917
4936: POP
4937: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
4938: LD_VAR 0 6
4942: PPUSH
4943: LD_INT 2
4945: PUSH
4946: LD_INT 21
4948: PUSH
4949: LD_INT 1
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: PUSH
4956: LD_INT 21
4958: PUSH
4959: LD_INT 2
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: LD_INT 21
4968: PUSH
4969: LD_INT 3
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: PPUSH
4982: CALL_OW 70
4986: IFFALSE 5201
// repeat wait ( 0 0$1 ) ;
4988: LD_INT 35
4990: PPUSH
4991: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
4995: LD_VAR 0 6
4999: PPUSH
5000: LD_INT 2
5002: PUSH
5003: LD_INT 21
5005: PUSH
5006: LD_INT 2
5008: PUSH
5009: EMPTY
5010: LIST
5011: LIST
5012: PUSH
5013: LD_INT 21
5015: PUSH
5016: LD_INT 3
5018: PUSH
5019: EMPTY
5020: LIST
5021: LIST
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: LIST
5027: PPUSH
5028: CALL_OW 70
5032: IFFALSE 5093
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5034: LD_ADDR_VAR 0 2
5038: PUSH
5039: LD_VAR 0 6
5043: PPUSH
5044: LD_INT 2
5046: PUSH
5047: LD_INT 21
5049: PUSH
5050: LD_INT 2
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: LD_INT 21
5059: PUSH
5060: LD_INT 3
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: LIST
5071: PPUSH
5072: CALL_OW 70
5076: PUSH
5077: FOR_IN
5078: IFFALSE 5091
// RemoveUnit ( i ) ;
5080: LD_VAR 0 2
5084: PPUSH
5085: CALL_OW 64
5089: GO 5077
5091: POP
5092: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5093: LD_VAR 0 6
5097: PPUSH
5098: LD_INT 21
5100: PUSH
5101: LD_INT 1
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: PPUSH
5108: CALL_OW 70
5112: IFFALSE 5161
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5114: LD_ADDR_VAR 0 2
5118: PUSH
5119: LD_VAR 0 6
5123: PPUSH
5124: LD_INT 21
5126: PUSH
5127: LD_INT 1
5129: PUSH
5130: EMPTY
5131: LIST
5132: LIST
5133: PPUSH
5134: CALL_OW 70
5138: PUSH
5139: FOR_IN
5140: IFFALSE 5159
// ComMoveXY ( i , 113 , 53 ) ;
5142: LD_VAR 0 2
5146: PPUSH
5147: LD_INT 113
5149: PPUSH
5150: LD_INT 53
5152: PPUSH
5153: CALL_OW 111
5157: GO 5139
5159: POP
5160: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5161: LD_VAR 0 6
5165: PPUSH
5166: LD_INT 2
5168: PUSH
5169: LD_INT 21
5171: PUSH
5172: LD_INT 1
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: LD_INT 21
5181: PUSH
5182: LD_INT 2
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: LIST
5193: PPUSH
5194: CALL_OW 70
5198: NOT
5199: IFFALSE 4988
// case convoyCounter of 1 .. 3 :
5201: LD_EXP 16
5205: PUSH
5206: LD_INT 1
5208: DOUBLE
5209: GREATEREQUAL
5210: IFFALSE 5218
5212: LD_INT 3
5214: DOUBLE
5215: LESSEQUAL
5216: IFTRUE 5220
5218: GO 5815
5220: POP
// begin uc_side := 3 ;
5221: LD_ADDR_OWVAR 20
5225: PUSH
5226: LD_INT 3
5228: ST_TO_ADDR
// uc_nation := 3 ;
5229: LD_ADDR_OWVAR 21
5233: PUSH
5234: LD_INT 3
5236: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] - convoyCounter do
5237: LD_ADDR_VAR 0 2
5241: PUSH
5242: DOUBLE
5243: LD_INT 1
5245: DEC
5246: ST_TO_ADDR
5247: LD_INT 5
5249: PUSH
5250: LD_INT 6
5252: PUSH
5253: LD_INT 7
5255: PUSH
5256: EMPTY
5257: LIST
5258: LIST
5259: LIST
5260: PUSH
5261: LD_OWVAR 67
5265: ARRAY
5266: PUSH
5267: LD_EXP 16
5271: MINUS
5272: PUSH
5273: FOR_TO
5274: IFFALSE 5461
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
5276: LD_INT 0
5278: PPUSH
5279: LD_INT 1
5281: PUSH
5282: LD_INT 1
5284: PUSH
5285: LD_INT 1
5287: PUSH
5288: LD_INT 4
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: PUSH
5297: LD_INT 1
5299: PPUSH
5300: LD_INT 4
5302: PPUSH
5303: CALL_OW 12
5307: ARRAY
5308: PPUSH
5309: LD_INT 4
5311: PUSH
5312: LD_INT 5
5314: PUSH
5315: LD_INT 6
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: LIST
5322: PUSH
5323: LD_OWVAR 67
5327: ARRAY
5328: PPUSH
5329: CALL_OW 380
// un := CreateHuman ;
5333: LD_ADDR_VAR 0 8
5337: PUSH
5338: CALL_OW 44
5342: ST_TO_ADDR
// SetDir ( un , dir ) ;
5343: LD_VAR 0 8
5347: PPUSH
5348: LD_VAR 0 4
5352: PPUSH
5353: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5357: LD_VAR 0 8
5361: PPUSH
5362: LD_VAR 0 5
5366: PPUSH
5367: LD_INT 0
5369: PPUSH
5370: CALL 65941 0 3
5374: IFFALSE 5459
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5376: LD_ADDR_EXP 41
5380: PUSH
5381: LD_EXP 41
5385: PPUSH
5386: LD_EXP 41
5390: PUSH
5391: LD_INT 1
5393: PLUS
5394: PPUSH
5395: LD_VAR 0 8
5399: PPUSH
5400: CALL_OW 1
5404: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5405: LD_VAR 0 8
5409: PPUSH
5410: LD_INT 1
5412: PPUSH
5413: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5417: LD_VAR 0 8
5421: PPUSH
5422: LD_VAR 0 7
5426: PUSH
5427: LD_INT 1
5429: ARRAY
5430: PUSH
5431: LD_INT 1
5433: ARRAY
5434: PPUSH
5435: LD_VAR 0 7
5439: PUSH
5440: LD_INT 1
5442: ARRAY
5443: PUSH
5444: LD_INT 2
5446: ARRAY
5447: PPUSH
5448: CALL_OW 111
// wait ( 0 0$2 ) ;
5452: LD_INT 70
5454: PPUSH
5455: CALL_OW 67
// end ; end ;
5459: GO 5273
5461: POP
5462: POP
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
5463: LD_ADDR_VAR 0 2
5467: PUSH
5468: DOUBLE
5469: LD_INT 1
5471: DEC
5472: ST_TO_ADDR
5473: LD_INT 3
5475: PUSH
5476: LD_INT 4
5478: PUSH
5479: LD_INT 4
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: LIST
5486: PUSH
5487: LD_OWVAR 67
5491: ARRAY
5492: PUSH
5493: FOR_TO
5494: IFFALSE 5811
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5496: LD_INT 3
5498: PPUSH
5499: LD_INT 3
5501: PPUSH
5502: LD_INT 21
5504: PUSH
5505: LD_INT 22
5507: PUSH
5508: LD_INT 23
5510: PUSH
5511: LD_INT 24
5513: PUSH
5514: LD_INT 24
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: LIST
5521: LIST
5522: LIST
5523: PUSH
5524: LD_OWVAR 67
5528: PPUSH
5529: LD_OWVAR 67
5533: PUSH
5534: LD_INT 2
5536: PLUS
5537: PPUSH
5538: CALL_OW 12
5542: ARRAY
5543: PPUSH
5544: LD_INT 1
5546: PPUSH
5547: LD_INT 1
5549: PPUSH
5550: LD_INT 42
5552: PUSH
5553: LD_INT 44
5555: PUSH
5556: LD_INT 43
5558: PUSH
5559: LD_INT 44
5561: PUSH
5562: LD_INT 46
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: PUSH
5572: LD_INT 1
5574: PPUSH
5575: LD_OWVAR 67
5579: PUSH
5580: LD_INT 2
5582: PLUS
5583: PPUSH
5584: CALL_OW 12
5588: ARRAY
5589: PPUSH
5590: LD_INT 90
5592: PPUSH
5593: CALL 435 0 7
// un := CreateVehicle ;
5597: LD_ADDR_VAR 0 8
5601: PUSH
5602: CALL_OW 45
5606: ST_TO_ADDR
// SetDir ( un , dir ) ;
5607: LD_VAR 0 8
5611: PPUSH
5612: LD_VAR 0 4
5616: PPUSH
5617: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5621: LD_VAR 0 8
5625: PPUSH
5626: LD_VAR 0 5
5630: PPUSH
5631: LD_INT 0
5633: PPUSH
5634: CALL 65941 0 3
5638: IFFALSE 5809
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5640: LD_ADDR_EXP 41
5644: PUSH
5645: LD_EXP 41
5649: PPUSH
5650: LD_EXP 41
5654: PUSH
5655: LD_INT 1
5657: PLUS
5658: PPUSH
5659: LD_VAR 0 8
5663: PPUSH
5664: CALL_OW 1
5668: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
5669: LD_INT 0
5671: PPUSH
5672: LD_INT 3
5674: PUSH
5675: LD_INT 4
5677: PUSH
5678: LD_INT 5
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: LIST
5685: PUSH
5686: LD_OWVAR 67
5690: ARRAY
5691: PPUSH
5692: CALL_OW 383
// un := CreateHuman ;
5696: LD_ADDR_VAR 0 8
5700: PUSH
5701: CALL_OW 44
5705: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5706: LD_VAR 0 8
5710: PPUSH
5711: LD_EXP 41
5715: PUSH
5716: LD_EXP 41
5720: ARRAY
5721: PPUSH
5722: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5726: LD_ADDR_EXP 41
5730: PUSH
5731: LD_EXP 41
5735: PPUSH
5736: LD_EXP 41
5740: PUSH
5741: LD_INT 1
5743: PLUS
5744: PPUSH
5745: LD_VAR 0 8
5749: PPUSH
5750: CALL_OW 1
5754: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5755: LD_VAR 0 8
5759: PPUSH
5760: LD_INT 1
5762: PPUSH
5763: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5767: LD_VAR 0 8
5771: PPUSH
5772: LD_VAR 0 7
5776: PUSH
5777: LD_INT 1
5779: ARRAY
5780: PUSH
5781: LD_INT 1
5783: ARRAY
5784: PPUSH
5785: LD_VAR 0 7
5789: PUSH
5790: LD_INT 1
5792: ARRAY
5793: PUSH
5794: LD_INT 2
5796: ARRAY
5797: PPUSH
5798: CALL_OW 111
// wait ( 0 0$3 ) ;
5802: LD_INT 105
5804: PPUSH
5805: CALL_OW 67
// end ; end ;
5809: GO 5493
5811: POP
5812: POP
// end ; 4 .. 7 :
5813: GO 6368
5815: LD_INT 4
5817: DOUBLE
5818: GREATEREQUAL
5819: IFFALSE 5827
5821: LD_INT 7
5823: DOUBLE
5824: LESSEQUAL
5825: IFTRUE 5829
5827: GO 6367
5829: POP
// begin uc_side := 3 ;
5830: LD_ADDR_OWVAR 20
5834: PUSH
5835: LD_INT 3
5837: ST_TO_ADDR
// uc_nation := 3 ;
5838: LD_ADDR_OWVAR 21
5842: PUSH
5843: LD_INT 3
5845: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
5846: LD_ADDR_VAR 0 2
5850: PUSH
5851: DOUBLE
5852: LD_INT 1
5854: DEC
5855: ST_TO_ADDR
5856: LD_INT 2
5858: PUSH
5859: LD_INT 3
5861: PUSH
5862: LD_INT 4
5864: PUSH
5865: EMPTY
5866: LIST
5867: LIST
5868: LIST
5869: PUSH
5870: LD_OWVAR 67
5874: ARRAY
5875: PUSH
5876: FOR_TO
5877: IFFALSE 6037
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
5879: LD_INT 0
5881: PPUSH
5882: LD_INT 1
5884: PPUSH
5885: LD_INT 4
5887: PUSH
5888: LD_INT 5
5890: PUSH
5891: LD_INT 6
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: LIST
5898: PUSH
5899: LD_OWVAR 67
5903: ARRAY
5904: PPUSH
5905: CALL_OW 380
// un := CreateHuman ;
5909: LD_ADDR_VAR 0 8
5913: PUSH
5914: CALL_OW 44
5918: ST_TO_ADDR
// SetDir ( un , dir ) ;
5919: LD_VAR 0 8
5923: PPUSH
5924: LD_VAR 0 4
5928: PPUSH
5929: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5933: LD_VAR 0 8
5937: PPUSH
5938: LD_VAR 0 5
5942: PPUSH
5943: LD_INT 0
5945: PPUSH
5946: CALL 65941 0 3
5950: IFFALSE 6035
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5952: LD_ADDR_EXP 41
5956: PUSH
5957: LD_EXP 41
5961: PPUSH
5962: LD_EXP 41
5966: PUSH
5967: LD_INT 1
5969: PLUS
5970: PPUSH
5971: LD_VAR 0 8
5975: PPUSH
5976: CALL_OW 1
5980: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5981: LD_VAR 0 8
5985: PPUSH
5986: LD_INT 1
5988: PPUSH
5989: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5993: LD_VAR 0 8
5997: PPUSH
5998: LD_VAR 0 7
6002: PUSH
6003: LD_INT 1
6005: ARRAY
6006: PUSH
6007: LD_INT 1
6009: ARRAY
6010: PPUSH
6011: LD_VAR 0 7
6015: PUSH
6016: LD_INT 1
6018: ARRAY
6019: PUSH
6020: LD_INT 2
6022: ARRAY
6023: PPUSH
6024: CALL_OW 111
// wait ( 0 0$2 ) ;
6028: LD_INT 70
6030: PPUSH
6031: CALL_OW 67
// end ; end ;
6035: GO 5876
6037: POP
6038: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
6039: LD_ADDR_VAR 0 2
6043: PUSH
6044: DOUBLE
6045: LD_INT 1
6047: DEC
6048: ST_TO_ADDR
6049: LD_INT 2
6051: PUSH
6052: LD_INT 3
6054: PUSH
6055: LD_INT 3
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: LIST
6062: PUSH
6063: LD_OWVAR 67
6067: ARRAY
6068: PUSH
6069: FOR_TO
6070: IFFALSE 6363
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6072: LD_INT 3
6074: PPUSH
6075: LD_INT 3
6077: PPUSH
6078: LD_INT 21
6080: PUSH
6081: LD_INT 22
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PUSH
6088: LD_INT 1
6090: PPUSH
6091: LD_INT 2
6093: PPUSH
6094: CALL_OW 12
6098: ARRAY
6099: PPUSH
6100: LD_INT 1
6102: PPUSH
6103: LD_INT 1
6105: PPUSH
6106: LD_INT 42
6108: PUSH
6109: LD_INT 44
6111: PUSH
6112: LD_INT 43
6114: PUSH
6115: LD_INT 44
6117: PUSH
6118: EMPTY
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: PUSH
6124: LD_INT 1
6126: PPUSH
6127: LD_OWVAR 67
6131: PUSH
6132: LD_INT 1
6134: PLUS
6135: PPUSH
6136: CALL_OW 12
6140: ARRAY
6141: PPUSH
6142: LD_INT 90
6144: PPUSH
6145: CALL 435 0 7
// un := CreateVehicle ;
6149: LD_ADDR_VAR 0 8
6153: PUSH
6154: CALL_OW 45
6158: ST_TO_ADDR
// SetDir ( un , dir ) ;
6159: LD_VAR 0 8
6163: PPUSH
6164: LD_VAR 0 4
6168: PPUSH
6169: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6173: LD_VAR 0 8
6177: PPUSH
6178: LD_VAR 0 5
6182: PPUSH
6183: LD_INT 0
6185: PPUSH
6186: CALL 65941 0 3
6190: IFFALSE 6361
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6192: LD_ADDR_EXP 41
6196: PUSH
6197: LD_EXP 41
6201: PPUSH
6202: LD_EXP 41
6206: PUSH
6207: LD_INT 1
6209: PLUS
6210: PPUSH
6211: LD_VAR 0 8
6215: PPUSH
6216: CALL_OW 1
6220: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
6221: LD_INT 0
6223: PPUSH
6224: LD_INT 3
6226: PUSH
6227: LD_INT 4
6229: PUSH
6230: LD_INT 5
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: LIST
6237: PUSH
6238: LD_OWVAR 67
6242: ARRAY
6243: PPUSH
6244: CALL_OW 383
// un := CreateHuman ;
6248: LD_ADDR_VAR 0 8
6252: PUSH
6253: CALL_OW 44
6257: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6258: LD_VAR 0 8
6262: PPUSH
6263: LD_EXP 41
6267: PUSH
6268: LD_EXP 41
6272: ARRAY
6273: PPUSH
6274: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6278: LD_ADDR_EXP 41
6282: PUSH
6283: LD_EXP 41
6287: PPUSH
6288: LD_EXP 41
6292: PUSH
6293: LD_INT 1
6295: PLUS
6296: PPUSH
6297: LD_VAR 0 8
6301: PPUSH
6302: CALL_OW 1
6306: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6307: LD_VAR 0 8
6311: PPUSH
6312: LD_INT 1
6314: PPUSH
6315: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6319: LD_VAR 0 8
6323: PPUSH
6324: LD_VAR 0 7
6328: PUSH
6329: LD_INT 1
6331: ARRAY
6332: PUSH
6333: LD_INT 1
6335: ARRAY
6336: PPUSH
6337: LD_VAR 0 7
6341: PUSH
6342: LD_INT 1
6344: ARRAY
6345: PUSH
6346: LD_INT 2
6348: ARRAY
6349: PPUSH
6350: CALL_OW 111
// wait ( 0 0$2 ) ;
6354: LD_INT 70
6356: PPUSH
6357: CALL_OW 67
// end ; end ;
6361: GO 6069
6363: POP
6364: POP
// end ; end ;
6365: GO 6368
6367: POP
// repeat wait ( 0 0$1 ) ;
6368: LD_INT 35
6370: PPUSH
6371: CALL_OW 67
// for un in ruConvoySquad do
6375: LD_ADDR_VAR 0 8
6379: PUSH
6380: LD_EXP 41
6384: PUSH
6385: FOR_IN
6386: IFFALSE 6890
// begin if IsInArea ( un , westSouthOutArea ) then
6388: LD_VAR 0 8
6392: PPUSH
6393: LD_INT 18
6395: PPUSH
6396: CALL_OW 308
6400: IFFALSE 6488
// begin if GetType ( un ) = unit_vehicle then
6402: LD_VAR 0 8
6406: PPUSH
6407: CALL_OW 247
6411: PUSH
6412: LD_INT 2
6414: EQUAL
6415: IFFALSE 6447
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6417: LD_ADDR_EXP 41
6421: PUSH
6422: LD_EXP 41
6426: PUSH
6427: LD_VAR 0 8
6431: PPUSH
6432: CALL_OW 311
6436: DIFF
6437: ST_TO_ADDR
// RemoveUnit ( un ) ;
6438: LD_VAR 0 8
6442: PPUSH
6443: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6447: LD_ADDR_EXP 15
6451: PUSH
6452: LD_EXP 15
6456: PUSH
6457: LD_INT 1
6459: PLUS
6460: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6461: LD_ADDR_EXP 41
6465: PUSH
6466: LD_EXP 41
6470: PUSH
6471: LD_VAR 0 8
6475: DIFF
6476: ST_TO_ADDR
// RemoveUnit ( un ) ;
6477: LD_VAR 0 8
6481: PPUSH
6482: CALL_OW 64
// break ;
6486: GO 6890
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6488: LD_VAR 0 8
6492: PPUSH
6493: CALL_OW 305
6497: NOT
6498: PUSH
6499: LD_VAR 0 8
6503: PPUSH
6504: CALL_OW 310
6508: NOT
6509: AND
6510: IFFALSE 6528
// ruConvoySquad := ruConvoySquad diff un ;
6512: LD_ADDR_EXP 41
6516: PUSH
6517: LD_EXP 41
6521: PUSH
6522: LD_VAR 0 8
6526: DIFF
6527: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6528: LD_VAR 0 8
6532: PPUSH
6533: CALL_OW 302
6537: PUSH
6538: LD_VAR 0 8
6542: PPUSH
6543: CALL_OW 314
6547: NOT
6548: AND
6549: IFFALSE 6888
// begin tag := GetTag ( un ) ;
6551: LD_ADDR_VAR 0 9
6555: PUSH
6556: LD_VAR 0 8
6560: PPUSH
6561: CALL_OW 110
6565: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6566: LD_VAR 0 8
6570: PPUSH
6571: LD_VAR 0 7
6575: PUSH
6576: LD_VAR 0 9
6580: PUSH
6581: LD_INT 1
6583: PLUS
6584: ARRAY
6585: PUSH
6586: LD_INT 1
6588: ARRAY
6589: PPUSH
6590: LD_VAR 0 7
6594: PUSH
6595: LD_VAR 0 9
6599: PUSH
6600: LD_INT 1
6602: PLUS
6603: ARRAY
6604: PUSH
6605: LD_INT 2
6607: ARRAY
6608: PPUSH
6609: CALL_OW 297
6613: PUSH
6614: LD_INT 6
6616: LESS
6617: IFFALSE 6728
// begin SetTag ( un , tag + 1 ) ;
6619: LD_VAR 0 8
6623: PPUSH
6624: LD_VAR 0 9
6628: PUSH
6629: LD_INT 1
6631: PLUS
6632: PPUSH
6633: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6637: LD_VAR 0 8
6641: PPUSH
6642: CALL_OW 247
6646: PUSH
6647: LD_INT 2
6649: EQUAL
6650: PUSH
6651: LD_VAR 0 8
6655: PPUSH
6656: CALL_OW 257
6660: PUSH
6661: LD_INT 3
6663: EQUAL
6664: OR
6665: IFFALSE 6726
// begin AddComWait ( un , 0 0$4 ) ;
6667: LD_VAR 0 8
6671: PPUSH
6672: LD_INT 140
6674: PPUSH
6675: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6679: LD_VAR 0 8
6683: PPUSH
6684: LD_VAR 0 7
6688: PUSH
6689: LD_VAR 0 9
6693: PUSH
6694: LD_INT 1
6696: PLUS
6697: ARRAY
6698: PUSH
6699: LD_INT 1
6701: ARRAY
6702: PPUSH
6703: LD_VAR 0 7
6707: PUSH
6708: LD_VAR 0 9
6712: PUSH
6713: LD_INT 1
6715: PLUS
6716: ARRAY
6717: PUSH
6718: LD_INT 2
6720: ARRAY
6721: PPUSH
6722: CALL_OW 174
// end ; end else
6726: GO 6888
// begin if GetClass ( un ) = 4 and UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6728: LD_VAR 0 8
6732: PPUSH
6733: CALL_OW 257
6737: PUSH
6738: LD_INT 4
6740: EQUAL
6741: PUSH
6742: LD_EXP 41
6746: PPUSH
6747: LD_INT 21
6749: PUSH
6750: LD_INT 1
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: LD_INT 3
6759: PUSH
6760: LD_INT 24
6762: PUSH
6763: LD_INT 1000
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PPUSH
6778: CALL_OW 72
6782: AND
6783: IFFALSE 6841
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
6785: LD_VAR 0 8
6789: PPUSH
6790: LD_EXP 41
6794: PPUSH
6795: LD_INT 21
6797: PUSH
6798: LD_INT 1
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: PUSH
6805: LD_INT 3
6807: PUSH
6808: LD_INT 24
6810: PUSH
6811: LD_INT 1000
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PPUSH
6826: CALL_OW 72
6830: PUSH
6831: LD_INT 1
6833: ARRAY
6834: PPUSH
6835: CALL_OW 128
6839: GO 6888
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6841: LD_VAR 0 8
6845: PPUSH
6846: LD_VAR 0 7
6850: PUSH
6851: LD_VAR 0 9
6855: PUSH
6856: LD_INT 1
6858: PLUS
6859: ARRAY
6860: PUSH
6861: LD_INT 1
6863: ARRAY
6864: PPUSH
6865: LD_VAR 0 7
6869: PUSH
6870: LD_VAR 0 9
6874: PUSH
6875: LD_INT 1
6877: PLUS
6878: ARRAY
6879: PUSH
6880: LD_INT 2
6882: ARRAY
6883: PPUSH
6884: CALL_OW 114
// end ; end ; end ;
6888: GO 6385
6890: POP
6891: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
6892: LD_EXP 41
6896: PPUSH
6897: LD_INT 52
6899: PUSH
6900: EMPTY
6901: LIST
6902: PUSH
6903: LD_INT 21
6905: PUSH
6906: LD_INT 1
6908: PUSH
6909: EMPTY
6910: LIST
6911: LIST
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: PPUSH
6917: CALL_OW 72
6921: NOT
6922: IFFALSE 6368
// end ;
6924: LD_VAR 0 1
6928: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
6929: LD_EXP 16
6933: PUSH
6934: LD_INT 3
6936: PPUSH
6937: LD_INT 5
6939: PPUSH
6940: CALL_OW 12
6944: LESS
6945: PUSH
6946: LD_EXP 41
6950: NOT
6951: AND
6952: PUSH
6953: LD_OWVAR 67
6957: PUSH
6958: LD_INT 1
6960: GREATER
6961: AND
6962: IFFALSE 7350
6964: GO 6966
6966: DISABLE
6967: LD_INT 0
6969: PPUSH
6970: PPUSH
6971: PPUSH
// begin uc_side := 3 ;
6972: LD_ADDR_OWVAR 20
6976: PUSH
6977: LD_INT 3
6979: ST_TO_ADDR
// uc_nation := 3 ;
6980: LD_ADDR_OWVAR 21
6984: PUSH
6985: LD_INT 3
6987: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6988: LD_ADDR_VAR 0 1
6992: PUSH
6993: DOUBLE
6994: LD_INT 1
6996: DEC
6997: ST_TO_ADDR
6998: LD_INT 2
7000: PUSH
7001: LD_INT 3
7003: PUSH
7004: LD_INT 4
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: LIST
7011: PUSH
7012: LD_OWVAR 67
7016: ARRAY
7017: PUSH
7018: FOR_TO
7019: IFFALSE 7271
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7021: LD_INT 3
7023: PPUSH
7024: LD_INT 3
7026: PPUSH
7027: LD_INT 21
7029: PUSH
7030: LD_INT 22
7032: PUSH
7033: LD_INT 23
7035: PUSH
7036: LD_INT 24
7038: PUSH
7039: LD_INT 24
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: PUSH
7049: LD_OWVAR 67
7053: PPUSH
7054: LD_OWVAR 67
7058: PUSH
7059: LD_INT 2
7061: PLUS
7062: PPUSH
7063: CALL_OW 12
7067: ARRAY
7068: PPUSH
7069: LD_INT 1
7071: PPUSH
7072: LD_INT 1
7074: PPUSH
7075: LD_INT 42
7077: PUSH
7078: LD_INT 44
7080: PUSH
7081: LD_INT 43
7083: PUSH
7084: LD_INT 44
7086: PUSH
7087: LD_INT 46
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: PUSH
7097: LD_INT 1
7099: PPUSH
7100: LD_OWVAR 67
7104: PUSH
7105: LD_INT 2
7107: PLUS
7108: PPUSH
7109: CALL_OW 12
7113: ARRAY
7114: PPUSH
7115: LD_INT 90
7117: PPUSH
7118: CALL 435 0 7
// un := CreateVehicle ;
7122: LD_ADDR_VAR 0 3
7126: PUSH
7127: CALL_OW 45
7131: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7132: LD_VAR 0 3
7136: PPUSH
7137: LD_INT 0
7139: PPUSH
7140: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7144: LD_VAR 0 3
7148: PPUSH
7149: LD_INT 23
7151: PPUSH
7152: LD_INT 0
7154: PPUSH
7155: CALL 65941 0 3
7159: IFFALSE 7269
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7161: LD_ADDR_VAR 0 2
7165: PUSH
7166: LD_VAR 0 2
7170: PPUSH
7171: LD_VAR 0 2
7175: PUSH
7176: LD_INT 1
7178: PLUS
7179: PPUSH
7180: LD_VAR 0 3
7184: PPUSH
7185: CALL_OW 1
7189: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
7190: LD_INT 0
7192: PPUSH
7193: LD_INT 3
7195: PUSH
7196: LD_INT 4
7198: PUSH
7199: LD_INT 5
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: LIST
7206: PUSH
7207: LD_OWVAR 67
7211: ARRAY
7212: PPUSH
7213: CALL_OW 383
// un := CreateHuman ;
7217: LD_ADDR_VAR 0 3
7221: PUSH
7222: CALL_OW 44
7226: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7227: LD_VAR 0 3
7231: PPUSH
7232: LD_VAR 0 2
7236: PUSH
7237: LD_VAR 0 2
7241: ARRAY
7242: PPUSH
7243: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7247: LD_VAR 0 3
7251: PPUSH
7252: LD_INT 80
7254: PPUSH
7255: LD_INT 139
7257: PPUSH
7258: CALL_OW 111
// wait ( 0 0$3 ) ;
7262: LD_INT 105
7264: PPUSH
7265: CALL_OW 67
// end ; end ;
7269: GO 7018
7271: POP
7272: POP
// for i in tmp do
7273: LD_ADDR_VAR 0 1
7277: PUSH
7278: LD_VAR 0 2
7282: PUSH
7283: FOR_IN
7284: IFFALSE 7348
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7286: LD_VAR 0 1
7290: PPUSH
7291: LD_INT 101
7293: PPUSH
7294: LD_INT 102
7296: PPUSH
7297: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7301: LD_VAR 0 1
7305: PPUSH
7306: LD_INT 110
7308: PPUSH
7309: LD_INT 78
7311: PPUSH
7312: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7316: LD_VAR 0 1
7320: PPUSH
7321: LD_INT 75
7323: PPUSH
7324: LD_INT 101
7326: PPUSH
7327: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7331: LD_VAR 0 1
7335: PPUSH
7336: LD_INT 57
7338: PPUSH
7339: LD_INT 83
7341: PPUSH
7342: CALL_OW 174
// end ;
7346: GO 7283
7348: POP
7349: POP
// end ; end_of_file
7350: PPOPN 3
7352: END
// on UnitDestroyed ( un ) do begin if un = Heike then
7353: LD_VAR 0 1
7357: PUSH
7358: LD_EXP 21
7362: EQUAL
7363: IFFALSE 7372
// YouLost ( Heike ) ;
7365: LD_STRING Heike
7367: PPUSH
7368: CALL_OW 104
// if un in apeSoldGroup then
7372: LD_VAR 0 1
7376: PUSH
7377: LD_EXP 42
7381: IN
7382: IFFALSE 7400
// apeSoldGroup := apeSoldGroup diff un ;
7384: LD_ADDR_EXP 42
7388: PUSH
7389: LD_EXP 42
7393: PUSH
7394: LD_VAR 0 1
7398: DIFF
7399: ST_TO_ADDR
// if un in apeEngGroup then
7400: LD_VAR 0 1
7404: PUSH
7405: LD_EXP 43
7409: IN
7410: IFFALSE 7428
// apeEngGroup := apeEngGroup diff un ;
7412: LD_ADDR_EXP 43
7416: PUSH
7417: LD_EXP 43
7421: PUSH
7422: LD_VAR 0 1
7426: DIFF
7427: ST_TO_ADDR
// if un in oilBaseGuard then
7428: LD_VAR 0 1
7432: PUSH
7433: LD_EXP 38
7437: IN
7438: IFFALSE 7456
// oilBaseGuard := oilBaseGuard diff un ;
7440: LD_ADDR_EXP 38
7444: PUSH
7445: LD_EXP 38
7449: PUSH
7450: LD_VAR 0 1
7454: DIFF
7455: ST_TO_ADDR
// if un in ruNorthGroup then
7456: LD_VAR 0 1
7460: PUSH
7461: LD_EXP 39
7465: IN
7466: IFFALSE 7484
// ruNorthGroup := ruNorthGroup diff un ;
7468: LD_ADDR_EXP 39
7472: PUSH
7473: LD_EXP 39
7477: PUSH
7478: LD_VAR 0 1
7482: DIFF
7483: ST_TO_ADDR
// if un in ruSouthGroup then
7484: LD_VAR 0 1
7488: PUSH
7489: LD_EXP 40
7493: IN
7494: IFFALSE 7512
// ruSouthGroup := ruSouthGroup diff un ;
7496: LD_ADDR_EXP 40
7500: PUSH
7501: LD_EXP 40
7505: PUSH
7506: LD_VAR 0 1
7510: DIFF
7511: ST_TO_ADDR
// if un in ruConvoySquad then
7512: LD_VAR 0 1
7516: PUSH
7517: LD_EXP 41
7521: IN
7522: IFFALSE 7540
// ruConvoySquad := ruConvoySquad diff un ;
7524: LD_ADDR_EXP 41
7528: PUSH
7529: LD_EXP 41
7533: PUSH
7534: LD_VAR 0 1
7538: DIFF
7539: ST_TO_ADDR
// end ;
7540: PPOPN 1
7542: END
// on VehicleConstructed ( veh , fac ) do begin if GetWeapon ( veh ) = ar_radar then
7543: LD_VAR 0 1
7547: PPUSH
7548: CALL_OW 264
7552: PUSH
7553: LD_INT 30
7555: EQUAL
7556: IFFALSE 7566
// radarConstructed := true ;
7558: LD_ADDR_EXP 13
7562: PUSH
7563: LD_INT 1
7565: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
7566: LD_VAR 0 1
7570: PPUSH
7571: CALL_OW 264
7575: PUSH
7576: LD_INT 26
7578: EQUAL
7579: IFFALSE 7589
// flamethrowerBuilt := true ;
7581: LD_ADDR_EXP 20
7585: PUSH
7586: LD_INT 1
7588: ST_TO_ADDR
// end ;
7589: PPOPN 2
7591: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
7592: LD_ADDR_EXP 18
7596: PUSH
7597: LD_EXP 18
7601: PUSH
7602: LD_INT 1
7604: PLUS
7605: ST_TO_ADDR
// if oldId in ruConvoySquad then
7606: LD_VAR 0 2
7610: PUSH
7611: LD_EXP 41
7615: IN
7616: IFFALSE 7634
// ruConvoySquad := ruConvoySquad diff oldId ;
7618: LD_ADDR_EXP 41
7622: PUSH
7623: LD_EXP 41
7627: PUSH
7628: LD_VAR 0 2
7632: DIFF
7633: ST_TO_ADDR
// if newId in ruConvoySquad then
7634: LD_VAR 0 1
7638: PUSH
7639: LD_EXP 41
7643: IN
7644: IFFALSE 7662
// ruConvoySquad := ruConvoySquad diff newId ;
7646: LD_ADDR_EXP 41
7650: PUSH
7651: LD_EXP 41
7655: PUSH
7656: LD_VAR 0 1
7660: DIFF
7661: ST_TO_ADDR
// end ; end_of_file
7662: PPOPN 4
7664: END
// export function Action ; var i , un , veh , tmp ; begin
7665: LD_INT 0
7667: PPUSH
7668: PPUSH
7669: PPUSH
7670: PPUSH
7671: PPUSH
// InGameOn ;
7672: CALL_OW 8
// music_nat := 2 ;
7676: LD_ADDR_OWVAR 71
7680: PUSH
7681: LD_INT 2
7683: ST_TO_ADDR
// music_class := 0 ;
7684: LD_ADDR_OWVAR 72
7688: PUSH
7689: LD_INT 0
7691: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
7692: LD_INT 7
7694: PPUSH
7695: LD_INT 6
7697: PPUSH
7698: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 20 ) ;
7702: LD_INT 7
7704: PPUSH
7705: LD_INT 6
7707: PPUSH
7708: LD_INT 2
7710: PPUSH
7711: LD_INT 20
7713: NEG
7714: PPUSH
7715: CALL 1219 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Aviradze ] ;
7719: LD_ADDR_VAR 0 5
7723: PUSH
7724: LD_EXP 21
7728: PUSH
7729: LD_EXP 22
7733: PUSH
7734: LD_EXP 23
7738: PUSH
7739: LD_EXP 24
7743: PUSH
7744: LD_EXP 25
7748: PUSH
7749: LD_EXP 26
7753: PUSH
7754: LD_EXP 27
7758: PUSH
7759: LD_EXP 28
7763: PUSH
7764: LD_EXP 33
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: ST_TO_ADDR
// tmp := tmp diff 0 ;
7780: LD_ADDR_VAR 0 5
7784: PUSH
7785: LD_VAR 0 5
7789: PUSH
7790: LD_INT 0
7792: DIFF
7793: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
7794: LD_ADDR_VAR 0 5
7798: PUSH
7799: LD_VAR 0 5
7803: PPUSH
7804: LD_INT 3
7806: PPUSH
7807: CALL 65533 0 2
7811: ST_TO_ADDR
// for i in heikeVehicles do
7812: LD_ADDR_VAR 0 2
7816: PUSH
7817: LD_EXP 35
7821: PUSH
7822: FOR_IN
7823: IFFALSE 8022
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
7825: LD_INT 5
7827: PPUSH
7828: LD_VAR 0 2
7832: PUSH
7833: LD_INT 5
7835: ARRAY
7836: PPUSH
7837: LD_VAR 0 2
7841: PUSH
7842: LD_INT 1
7844: ARRAY
7845: PPUSH
7846: LD_VAR 0 2
7850: PUSH
7851: LD_INT 2
7853: ARRAY
7854: PPUSH
7855: LD_VAR 0 2
7859: PUSH
7860: LD_INT 3
7862: ARRAY
7863: PPUSH
7864: LD_VAR 0 2
7868: PUSH
7869: LD_INT 4
7871: ARRAY
7872: PPUSH
7873: LD_INT 34
7875: PPUSH
7876: CALL 435 0 7
// veh := CreateVehicle ;
7880: LD_ADDR_VAR 0 4
7884: PUSH
7885: CALL_OW 45
7889: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
7890: LD_VAR 0 2
7894: PUSH
7895: LD_INT 4
7897: ARRAY
7898: PUSH
7899: LD_INT 51
7901: PUSH
7902: LD_INT 32
7904: PUSH
7905: LD_INT 12
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: LIST
7912: IN
7913: IFFALSE 7993
// begin if i [ 7 ] [ 1 ] then
7915: LD_VAR 0 2
7919: PUSH
7920: LD_INT 7
7922: ARRAY
7923: PUSH
7924: LD_INT 1
7926: ARRAY
7927: IFFALSE 7954
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
7929: LD_VAR 0 4
7933: PPUSH
7934: LD_INT 1
7936: PPUSH
7937: LD_VAR 0 2
7941: PUSH
7942: LD_INT 7
7944: ARRAY
7945: PUSH
7946: LD_INT 1
7948: ARRAY
7949: PPUSH
7950: CALL_OW 291
// if i [ 7 ] [ 2 ] then
7954: LD_VAR 0 2
7958: PUSH
7959: LD_INT 7
7961: ARRAY
7962: PUSH
7963: LD_INT 2
7965: ARRAY
7966: IFFALSE 7993
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
7968: LD_VAR 0 4
7972: PPUSH
7973: LD_INT 2
7975: PPUSH
7976: LD_VAR 0 2
7980: PUSH
7981: LD_INT 7
7983: ARRAY
7984: PUSH
7985: LD_INT 2
7987: ARRAY
7988: PPUSH
7989: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
7993: LD_VAR 0 4
7997: PPUSH
7998: LD_INT 2
8000: PPUSH
8001: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8005: LD_VAR 0 4
8009: PPUSH
8010: LD_INT 4
8012: PPUSH
8013: LD_INT 0
8015: PPUSH
8016: CALL_OW 49
// end ;
8020: GO 7822
8022: POP
8023: POP
// if tmp then
8024: LD_VAR 0 5
8028: IFFALSE 8083
// for i in tmp union heikeApes do
8030: LD_ADDR_VAR 0 2
8034: PUSH
8035: LD_VAR 0 5
8039: PUSH
8040: LD_EXP 36
8044: UNION
8045: PUSH
8046: FOR_IN
8047: IFFALSE 8081
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
8049: LD_VAR 0 2
8053: PPUSH
8054: LD_INT 5
8056: PPUSH
8057: LD_INT 0
8059: PPUSH
8060: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8064: LD_VAR 0 2
8068: PPUSH
8069: LD_INT 26
8071: PPUSH
8072: LD_INT 9
8074: PPUSH
8075: CALL_OW 118
// end ;
8079: GO 8046
8081: POP
8082: POP
// if heikeSecondSquad then
8083: LD_EXP 34
8087: IFFALSE 8136
// for i in heikeSecondSquad do
8089: LD_ADDR_VAR 0 2
8093: PUSH
8094: LD_EXP 34
8098: PUSH
8099: FOR_IN
8100: IFFALSE 8134
// begin PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8102: LD_VAR 0 2
8106: PPUSH
8107: LD_INT 6
8109: PPUSH
8110: LD_INT 0
8112: PPUSH
8113: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8117: LD_VAR 0 2
8121: PPUSH
8122: LD_INT 26
8124: PPUSH
8125: LD_INT 9
8127: PPUSH
8128: CALL_OW 118
// end ;
8132: GO 8099
8134: POP
8135: POP
// if heikeApes then
8136: LD_EXP 36
8140: IFFALSE 8183
// for i in heikeApes do
8142: LD_ADDR_VAR 0 2
8146: PUSH
8147: LD_EXP 36
8151: PUSH
8152: FOR_IN
8153: IFFALSE 8181
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
8155: LD_VAR 0 2
8159: PPUSH
8160: LD_INT 7
8162: PPUSH
8163: LD_INT 0
8165: PPUSH
8166: CALL_OW 49
// ComHold ( i ) ;
8170: LD_VAR 0 2
8174: PPUSH
8175: CALL_OW 140
// end ;
8179: GO 8152
8181: POP
8182: POP
// if Kurt then
8183: LD_EXP 32
8187: IFFALSE 8219
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
8189: LD_EXP 32
8193: PPUSH
8194: LD_INT 8
8196: PPUSH
8197: LD_INT 0
8199: PPUSH
8200: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
8204: LD_EXP 32
8208: PPUSH
8209: LD_INT 42
8211: PPUSH
8212: LD_INT 32
8214: PPUSH
8215: CALL_OW 118
// end ; Say ( Heike , DH-Start-1 ) ;
8219: LD_EXP 21
8223: PPUSH
8224: LD_STRING DH-Start-1
8226: PPUSH
8227: CALL_OW 88
// if Givi then
8231: LD_EXP 22
8235: IFFALSE 8498
// begin Say ( Givi , DG-Start-2-5 ) ;
8237: LD_EXP 22
8241: PPUSH
8242: LD_STRING DG-Start-2-5
8244: PPUSH
8245: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
8249: LD_EXP 21
8253: PPUSH
8254: LD_STRING DH-Start-3
8256: PPUSH
8257: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8261: LD_EXP 21
8265: PPUSH
8266: LD_STRING DH-Start-4
8268: PPUSH
8269: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
8273: LD_EXP 22
8277: PPUSH
8278: LD_STRING DG-Start-5
8280: PPUSH
8281: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
8285: LD_EXP 21
8289: PPUSH
8290: LD_STRING DH-Start-6
8292: PPUSH
8293: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
8297: LD_EXP 22
8301: PPUSH
8302: LD_STRING DG-Start-7
8304: PPUSH
8305: CALL_OW 88
// if Mike then
8309: LD_EXP 23
8313: IFFALSE 8486
// begin Say ( Mike , DM-Start-8 ) ;
8315: LD_EXP 23
8319: PPUSH
8320: LD_STRING DM-Start-8
8322: PPUSH
8323: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
8327: LD_EXP 23
8331: PPUSH
8332: LD_STRING DM-Start-9
8334: PPUSH
8335: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
8339: LD_EXP 22
8343: PPUSH
8344: LD_STRING DG-Start-10
8346: PPUSH
8347: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
8351: LD_EXP 22
8355: PPUSH
8356: LD_STRING DG-Start-11
8358: PPUSH
8359: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
8363: LD_EXP 21
8367: PPUSH
8368: LD_STRING DH-Start-12
8370: PPUSH
8371: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
8375: LD_EXP 22
8379: PPUSH
8380: LD_STRING DG-Start-13
8382: PPUSH
8383: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
8387: LD_EXP 22
8391: PPUSH
8392: LD_STRING DG-Start-14
8394: PPUSH
8395: CALL_OW 88
// if Kaia then
8399: LD_EXP 26
8403: IFFALSE 8486
// begin Say ( Kaia , DK-Start-15 ) ;
8405: LD_EXP 26
8409: PPUSH
8410: LD_STRING DK-Start-15
8412: PPUSH
8413: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
8417: LD_EXP 26
8421: PPUSH
8422: LD_STRING DK-Start-16
8424: PPUSH
8425: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
8429: LD_EXP 26
8433: PPUSH
8434: LD_STRING DK-Start-17
8436: PPUSH
8437: CALL_OW 88
// wait ( 0 0$0.3 ) ;
8441: LD_INT 10
8443: PPUSH
8444: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
8448: LD_EXP 22
8452: PPUSH
8453: LD_EXP 26
8457: PPUSH
8458: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
8462: LD_EXP 22
8466: PPUSH
8467: LD_STRING DG-Start-18
8469: PPUSH
8470: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
8474: LD_EXP 26
8478: PPUSH
8479: LD_STRING DK-Start-19
8481: PPUSH
8482: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
8486: LD_EXP 21
8490: PPUSH
8491: LD_STRING DH-Start-20
8493: PPUSH
8494: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
8498: LD_INT 70
8500: PPUSH
8501: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
8505: LD_EXP 29
8509: PPUSH
8510: LD_STRING DShar-Start-21
8512: PPUSH
8513: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
8517: LD_EXP 21
8521: PPUSH
8522: LD_STRING DH-Start-22
8524: PPUSH
8525: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
8529: LD_EXP 29
8533: PPUSH
8534: LD_STRING DShar-Start-23
8536: PPUSH
8537: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
8541: LD_EXP 29
8545: PPUSH
8546: LD_STRING DShar-Start-24
8548: PPUSH
8549: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
8553: LD_EXP 29
8557: PPUSH
8558: LD_STRING DShar-Start-25
8560: PPUSH
8561: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
8565: LD_EXP 29
8569: PPUSH
8570: LD_STRING DShar-Start-26
8572: PPUSH
8573: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
8577: LD_EXP 21
8581: PPUSH
8582: LD_STRING DH-Start-27
8584: PPUSH
8585: CALL_OW 88
// if Kaia then
8589: LD_EXP 26
8593: IFFALSE 8635
// begin ComTurnUnit ( Heike , Kaia ) ;
8595: LD_EXP 21
8599: PPUSH
8600: LD_EXP 26
8604: PPUSH
8605: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
8609: LD_EXP 26
8613: PPUSH
8614: LD_STRING DK-Start-28
8616: PPUSH
8617: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
8621: LD_EXP 21
8625: PPUSH
8626: LD_STRING DH-Start-29
8628: PPUSH
8629: CALL_OW 88
// end else
8633: GO 8647
// Say ( Heike , DH-Start-a-28 ) ;
8635: LD_EXP 21
8639: PPUSH
8640: LD_STRING DH-Start-a-28
8642: PPUSH
8643: CALL_OW 88
// if Givi then
8647: LD_EXP 22
8651: IFFALSE 8886
// begin ComTurnUnit ( Heike , Givi ) ;
8653: LD_EXP 21
8657: PPUSH
8658: LD_EXP 22
8662: PPUSH
8663: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
8667: LD_EXP 22
8671: PPUSH
8672: LD_EXP 21
8676: PPUSH
8677: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
8681: LD_EXP 21
8685: PPUSH
8686: LD_STRING DH-Start-30
8688: PPUSH
8689: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
8693: LD_EXP 21
8697: PPUSH
8698: LD_STRING DH-Start-31
8700: PPUSH
8701: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
8705: LD_EXP 22
8709: PPUSH
8710: LD_STRING DG-Start-32
8712: PPUSH
8713: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
8717: LD_EXP 21
8721: PPUSH
8722: LD_STRING DH-Start-33
8724: PPUSH
8725: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
8729: LD_EXP 22
8733: PPUSH
8734: LD_STRING DG-Start-34
8736: PPUSH
8737: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
8741: LD_EXP 22
8745: PPUSH
8746: LD_STRING DG-Start-35
8748: PPUSH
8749: CALL_OW 88
// if Kurt and not dialogue_skipped then
8753: LD_EXP 32
8757: PUSH
8758: LD_OWVAR 59
8762: NOT
8763: AND
8764: IFFALSE 8795
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
8766: LD_EXP 32
8770: PPUSH
8771: LD_INT 28
8773: PPUSH
8774: LD_INT 13
8776: PPUSH
8777: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
8781: LD_EXP 32
8785: PPUSH
8786: LD_EXP 21
8790: PPUSH
8791: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
8795: LD_EXP 22
8799: PPUSH
8800: LD_STRING DG-Start-36
8802: PPUSH
8803: CALL_OW 88
// if Kurt then
8807: LD_EXP 32
8811: IFFALSE 8884
// begin if not Givi then
8813: LD_EXP 22
8817: NOT
8818: IFFALSE 8834
// Say ( Kurt , DKs-Start-37-a ) else
8820: LD_EXP 32
8824: PPUSH
8825: LD_STRING DKs-Start-37-a
8827: PPUSH
8828: CALL_OW 88
8832: GO 8846
// Say ( Kurt , DKs-Start-37 ) ;
8834: LD_EXP 32
8838: PPUSH
8839: LD_STRING DKs-Start-37
8841: PPUSH
8842: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
8846: LD_EXP 32
8850: PPUSH
8851: LD_STRING DKs-Start-38
8853: PPUSH
8854: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
8858: LD_EXP 21
8862: PPUSH
8863: LD_EXP 32
8867: PPUSH
8868: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
8872: LD_EXP 21
8876: PPUSH
8877: LD_STRING DH-Start-39
8879: PPUSH
8880: CALL_OW 88
// end ; end else
8884: GO 8915
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
8886: LD_EXP 34
8890: PPUSH
8891: LD_STRING DArm-Start-a-37
8893: PPUSH
8894: LD_STRING DArf-Start-a-37
8896: PPUSH
8897: CALL 1270 0 3
8901: IFFALSE 8915
// Say ( Heike , DH-Start-39 ) ;
8903: LD_EXP 21
8907: PPUSH
8908: LD_STRING DH-Start-39
8910: PPUSH
8911: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
8915: LD_INT 44
8917: PPUSH
8918: LD_INT 25
8920: PPUSH
8921: CALL_OW 428
8925: IFFALSE 8942
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
8927: LD_INT 44
8929: PPUSH
8930: LD_INT 25
8932: PPUSH
8933: CALL_OW 428
8937: PPUSH
8938: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
8942: LD_EXP 30
8946: PPUSH
8947: LD_INT 5
8949: PPUSH
8950: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
8954: LD_EXP 30
8958: PPUSH
8959: LD_INT 44
8961: PPUSH
8962: LD_INT 25
8964: PPUSH
8965: LD_INT 0
8967: PPUSH
8968: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
8972: LD_EXP 30
8976: PPUSH
8977: LD_INT 29
8979: PPUSH
8980: LD_INT 12
8982: PPUSH
8983: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8987: LD_INT 35
8989: PPUSH
8990: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
8994: LD_OWVAR 59
8998: PUSH
8999: LD_EXP 21
9003: PPUSH
9004: LD_EXP 30
9008: PPUSH
9009: CALL_OW 296
9013: PUSH
9014: LD_INT 8
9016: LESS
9017: OR
9018: PUSH
9019: LD_EXP 30
9023: PPUSH
9024: LD_INT 26
9026: PPUSH
9027: LD_INT 9
9029: PPUSH
9030: CALL_OW 297
9034: PUSH
9035: LD_INT 6
9037: LESS
9038: OR
9039: IFFALSE 8987
// Say ( Olaf , DO-Scout-1 ) ;
9041: LD_EXP 30
9045: PPUSH
9046: LD_STRING DO-Scout-1
9048: PPUSH
9049: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9053: LD_EXP 30
9057: PPUSH
9058: LD_EXP 21
9062: PPUSH
9063: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9067: LD_ADDR_VAR 0 2
9071: PUSH
9072: LD_VAR 0 5
9076: PUSH
9077: LD_EXP 34
9081: UNION
9082: PUSH
9083: FOR_IN
9084: IFFALSE 9102
// ComTurnUnit ( i , Olaf ) ;
9086: LD_VAR 0 2
9090: PPUSH
9091: LD_EXP 30
9095: PPUSH
9096: CALL_OW 119
9100: GO 9083
9102: POP
9103: POP
// wait ( 0 0$0.3 ) ;
9104: LD_INT 10
9106: PPUSH
9107: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9111: LD_EXP 21
9115: PPUSH
9116: LD_EXP 30
9120: PPUSH
9121: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
9125: LD_EXP 21
9129: PPUSH
9130: LD_EXP 30
9134: PPUSH
9135: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
9139: LD_EXP 21
9143: PPUSH
9144: LD_STRING DH-Scout-2
9146: PPUSH
9147: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
9151: LD_EXP 30
9155: PPUSH
9156: LD_STRING DO-Scout-3
9158: PPUSH
9159: CALL_OW 88
// if Mike and Givi then
9163: LD_EXP 23
9167: PUSH
9168: LD_EXP 22
9172: AND
9173: IFFALSE 9189
// Say ( Olaf , DO-Scout-4 ) else
9175: LD_EXP 30
9179: PPUSH
9180: LD_STRING DO-Scout-4
9182: PPUSH
9183: CALL_OW 88
9187: GO 9289
// begin if Mike then
9189: LD_EXP 23
9193: IFFALSE 9221
// begin Say ( Olaf , DO-Scout-a-4 ) ;
9195: LD_EXP 30
9199: PPUSH
9200: LD_STRING DO-Scout-a-4
9202: PPUSH
9203: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
9207: LD_EXP 21
9211: PPUSH
9212: LD_STRING DH-Scout-a-5
9214: PPUSH
9215: CALL_OW 88
// end else
9219: GO 9289
// if Givi then
9221: LD_EXP 22
9225: IFFALSE 9253
// begin Say ( Olaf , DO-Scout-b-4 ) ;
9227: LD_EXP 30
9231: PPUSH
9232: LD_STRING DO-Scout-b-4
9234: PPUSH
9235: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
9239: LD_EXP 21
9243: PPUSH
9244: LD_STRING DH-Scout-b-5
9246: PPUSH
9247: CALL_OW 88
// end else
9251: GO 9289
// begin Say ( Olaf , DO-Scout-f-4 ) ;
9253: LD_EXP 30
9257: PPUSH
9258: LD_STRING DO-Scout-f-4
9260: PPUSH
9261: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
9265: LD_EXP 21
9269: PPUSH
9270: LD_STRING DH-Scout-f-5
9272: PPUSH
9273: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
9277: LD_EXP 30
9281: PPUSH
9282: LD_STRING DO-Scout-f-6
9284: PPUSH
9285: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
9289: LD_EXP 21
9293: PPUSH
9294: LD_STRING DH-Scout-5
9296: PPUSH
9297: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
9301: LD_EXP 30
9305: PPUSH
9306: LD_STRING DO-Scout-6
9308: PPUSH
9309: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
9313: LD_EXP 30
9317: PPUSH
9318: LD_STRING DO-Scout-7
9320: PPUSH
9321: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
9325: LD_EXP 21
9329: PPUSH
9330: LD_STRING DH-Scout-8
9332: PPUSH
9333: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
9337: LD_EXP 21
9341: PPUSH
9342: LD_STRING DH-Scout-9
9344: PPUSH
9345: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
9349: LD_EXP 30
9353: PPUSH
9354: LD_STRING DO-Scout-10
9356: PPUSH
9357: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
9361: LD_EXP 30
9365: PPUSH
9366: LD_STRING DO-Scout-12
9368: PPUSH
9369: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
9373: LD_EXP 30
9377: PPUSH
9378: LD_STRING DO-Scout-13
9380: PPUSH
9381: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
9385: LD_EXP 30
9389: PPUSH
9390: LD_STRING DO-Scout-14
9392: PPUSH
9393: CALL_OW 88
// if Givi then
9397: LD_EXP 22
9401: IFFALSE 9427
// begin Say ( Givi , DG-Scout-15 ) ;
9403: LD_EXP 22
9407: PPUSH
9408: LD_STRING DG-Scout-15
9410: PPUSH
9411: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
9415: LD_EXP 26
9419: PPUSH
9420: LD_STRING DK-Scout-16
9422: PPUSH
9423: CALL_OW 88
// end ; if not dialogue_skipped then
9427: LD_OWVAR 59
9431: NOT
9432: IFFALSE 9553
// begin async ;
9434: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
9435: LD_EXP 30
9439: PPUSH
9440: LD_STRING DO-Scout-17
9442: PPUSH
9443: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
9447: LD_INT 55
9449: PPUSH
9450: LD_INT 77
9452: PPUSH
9453: LD_INT 2
9455: PPUSH
9456: LD_INT 6
9458: NEG
9459: PPUSH
9460: CALL 1219 0 4
// wait ( 10 ) ;
9464: LD_INT 10
9466: PPUSH
9467: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
9471: LD_INT 55
9473: PPUSH
9474: LD_INT 77
9476: PPUSH
9477: CALL_OW 84
// wait ( 0 0$5 ) ;
9481: LD_INT 175
9483: PPUSH
9484: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
9488: LD_EXP 30
9492: PPUSH
9493: LD_STRING DO-Scout-18
9495: PPUSH
9496: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
9500: LD_INT 204
9502: PPUSH
9503: LD_INT 107
9505: PPUSH
9506: LD_INT 2
9508: PPUSH
9509: LD_INT 12
9511: NEG
9512: PPUSH
9513: CALL 1219 0 4
// wait ( 10 ) ;
9517: LD_INT 10
9519: PPUSH
9520: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
9524: LD_INT 204
9526: PPUSH
9527: LD_INT 107
9529: PPUSH
9530: CALL_OW 84
// wait ( 0 0$5 ) ;
9534: LD_INT 175
9536: PPUSH
9537: CALL_OW 67
// sync ;
9541: SYNC
// CenterNowOnUnits ( Heike ) ;
9542: LD_EXP 21
9546: PPUSH
9547: CALL_OW 87
// end else
9551: GO 9587
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
9553: LD_INT 55
9555: PPUSH
9556: LD_INT 77
9558: PPUSH
9559: LD_INT 2
9561: PPUSH
9562: LD_INT 6
9564: NEG
9565: PPUSH
9566: CALL 1219 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
9570: LD_INT 204
9572: PPUSH
9573: LD_INT 107
9575: PPUSH
9576: LD_INT 2
9578: PPUSH
9579: LD_INT 12
9581: NEG
9582: PPUSH
9583: CALL 1219 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
9587: LD_EXP 30
9591: PPUSH
9592: LD_STRING DO-Scout-19
9594: PPUSH
9595: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
9599: LD_EXP 30
9603: PPUSH
9604: LD_STRING DO-Scout-20
9606: PPUSH
9607: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
9611: LD_EXP 21
9615: PPUSH
9616: LD_STRING DH-Scout-21
9618: PPUSH
9619: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
9623: LD_EXP 21
9627: PPUSH
9628: LD_STRING DH-Scout-22
9630: PPUSH
9631: CALL_OW 88
// InGameOff ;
9635: CALL_OW 9
// if Givi then
9639: LD_EXP 22
9643: IFFALSE 9658
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
9645: LD_INT 13
9647: PPUSH
9648: LD_INT 2
9650: PPUSH
9651: LD_INT 1
9653: PPUSH
9654: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
9658: LD_STRING Road
9660: PPUSH
9661: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
9665: LD_ADDR_VAR 0 2
9669: PUSH
9670: LD_INT 22
9672: PUSH
9673: LD_INT 5
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: PUSH
9680: LD_INT 21
9682: PUSH
9683: LD_INT 2
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: PPUSH
9694: CALL_OW 69
9698: PUSH
9699: FOR_IN
9700: IFFALSE 9716
// SetSide ( i , 2 ) ;
9702: LD_VAR 0 2
9706: PPUSH
9707: LD_INT 2
9709: PPUSH
9710: CALL_OW 235
9714: GO 9699
9716: POP
9717: POP
// SaveForQuickRestart ;
9718: CALL_OW 22
// end ;
9722: LD_VAR 0 1
9726: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
9727: LD_INT 2
9729: PPUSH
9730: LD_INT 9
9732: PPUSH
9733: CALL_OW 294
9737: IFFALSE 10104
9739: GO 9741
9741: DISABLE
// begin DialogueOn ;
9742: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
9746: LD_INT 111
9748: PPUSH
9749: LD_INT 72
9751: PPUSH
9752: LD_INT 2
9754: PPUSH
9755: LD_INT 20
9757: NEG
9758: PPUSH
9759: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
9763: LD_INT 111
9765: PPUSH
9766: LD_INT 72
9768: PPUSH
9769: LD_INT 2
9771: PPUSH
9772: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
9776: LD_INT 111
9778: PPUSH
9779: LD_INT 72
9781: PPUSH
9782: CALL_OW 86
// if IsOk ( Kamil ) then
9786: LD_EXP 25
9790: PPUSH
9791: CALL_OW 302
9795: IFFALSE 9912
// begin Say ( Kamil , DKam-Cross-1 ) ;
9797: LD_EXP 25
9801: PPUSH
9802: LD_STRING DKam-Cross-1
9804: PPUSH
9805: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
9809: LD_EXP 25
9813: PPUSH
9814: LD_STRING DKam-Cross-2
9816: PPUSH
9817: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
9821: LD_EXP 25
9825: PPUSH
9826: LD_STRING DKam-Cross-3
9828: PPUSH
9829: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
9833: LD_EXP 25
9837: PPUSH
9838: LD_STRING DKam-Cross-4
9840: PPUSH
9841: CALL_OW 88
// if IsOk ( Ibrahim ) then
9845: LD_EXP 24
9849: PPUSH
9850: CALL_OW 302
9854: IFFALSE 9910
// begin if ibrahimJoinedIn04 then
9856: LD_EXP 4
9860: IFFALSE 9874
// Say ( Ibrahim , DI-Cross-b-5 ) ;
9862: LD_EXP 24
9866: PPUSH
9867: LD_STRING DI-Cross-b-5
9869: PPUSH
9870: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
9874: LD_EXP 24
9878: PPUSH
9879: LD_STRING DI-Cross-b-6
9881: PPUSH
9882: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
9886: LD_EXP 24
9890: PPUSH
9891: LD_STRING DI-Cross-b-7
9893: PPUSH
9894: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
9898: LD_EXP 25
9902: PPUSH
9903: LD_STRING DKam-Cross-8
9905: PPUSH
9906: CALL_OW 88
// end ; end else
9910: GO 10070
// if IsOk ( Sophia ) then
9912: LD_EXP 27
9916: PPUSH
9917: CALL_OW 302
9921: IFFALSE 10038
// begin Say ( Sophia , DS-Cross-1 ) ;
9923: LD_EXP 27
9927: PPUSH
9928: LD_STRING DS-Cross-1
9930: PPUSH
9931: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
9935: LD_EXP 27
9939: PPUSH
9940: LD_STRING DS-Cross-2
9942: PPUSH
9943: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
9947: LD_EXP 27
9951: PPUSH
9952: LD_STRING DS-Cross-3
9954: PPUSH
9955: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
9959: LD_EXP 27
9963: PPUSH
9964: LD_STRING DS-Cross-4
9966: PPUSH
9967: CALL_OW 88
// if IsOk ( Ibrahim ) then
9971: LD_EXP 24
9975: PPUSH
9976: CALL_OW 302
9980: IFFALSE 10036
// begin if ibrahimJoinedIn04 then
9982: LD_EXP 4
9986: IFFALSE 10000
// Say ( Ibrahim , DI-Cross-b-5 ) ;
9988: LD_EXP 24
9992: PPUSH
9993: LD_STRING DI-Cross-b-5
9995: PPUSH
9996: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10000: LD_EXP 24
10004: PPUSH
10005: LD_STRING DI-Cross-b-6
10007: PPUSH
10008: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10012: LD_EXP 24
10016: PPUSH
10017: LD_STRING DI-Cross-b-7
10019: PPUSH
10020: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10024: LD_EXP 27
10028: PPUSH
10029: LD_STRING DS-Cross-8
10031: PPUSH
10032: CALL_OW 88
// end ; end else
10036: GO 10070
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10038: LD_EXP 34
10042: PPUSH
10043: LD_INT 50
10045: PUSH
10046: EMPTY
10047: LIST
10048: PPUSH
10049: CALL_OW 72
10053: IFFALSE 10070
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10055: LD_EXP 34
10059: PPUSH
10060: LD_STRING DArm-Cross-c-1
10062: PPUSH
10063: LD_STRING DArf-Cross-c-1
10065: PPUSH
10066: CALL 1270 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10070: LD_EXP 57
10074: PPUSH
10075: LD_INT 2
10077: PPUSH
10078: LD_INT 1
10080: PPUSH
10081: CALL_OW 322
// DialogueOff ;
10085: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
10089: LD_STRING Crane
10091: PPUSH
10092: CALL_OW 337
// spottedCrossRoad := true ;
10096: LD_ADDR_EXP 8
10100: PUSH
10101: LD_INT 1
10103: ST_TO_ADDR
// end ;
10104: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
10105: LD_INT 22
10107: PUSH
10108: LD_INT 2
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: PUSH
10115: LD_INT 2
10117: PUSH
10118: LD_INT 30
10120: PUSH
10121: LD_INT 0
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: PUSH
10128: LD_INT 30
10130: PUSH
10131: LD_INT 1
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: LIST
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: PPUSH
10147: CALL_OW 69
10151: PUSH
10152: LD_EXP 26
10156: PPUSH
10157: CALL_OW 302
10161: PUSH
10162: LD_EXP 34
10166: OR
10167: AND
10168: IFFALSE 10380
10170: GO 10172
10172: DISABLE
// begin DialogueOn ;
10173: CALL_OW 6
// if Kaia then
10177: LD_EXP 26
10181: IFFALSE 10194
// CenterNowOnUnits ( Kaia ) else
10183: LD_EXP 26
10187: PPUSH
10188: CALL_OW 87
10192: GO 10203
// CenterNowOnUnits ( Heike ) ;
10194: LD_EXP 21
10198: PPUSH
10199: CALL_OW 87
// if IsOk ( Kaia ) then
10203: LD_EXP 26
10207: PPUSH
10208: CALL_OW 302
10212: IFFALSE 10228
// Say ( Kaia , DK-Cam-1 ) else
10214: LD_EXP 26
10218: PPUSH
10219: LD_STRING DK-Cam-1
10221: PPUSH
10222: CALL_OW 88
10226: GO 10243
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
10228: LD_EXP 34
10232: PPUSH
10233: LD_STRING DArm-Cam-1
10235: PPUSH
10236: LD_STRING DArf-Cam-1
10238: PPUSH
10239: CALL 1270 0 3
// Say ( Heike , DH-Cam-2 ) ;
10243: LD_EXP 21
10247: PPUSH
10248: LD_STRING DH-Cam-2
10250: PPUSH
10251: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
10255: LD_EXP 21
10259: PPUSH
10260: LD_STRING DH-Cam-3
10262: PPUSH
10263: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10267: LD_EXP 21
10271: PPUSH
10272: LD_STRING DH-Cam-4
10274: PPUSH
10275: CALL_OW 88
// if IsOk ( Kaia ) then
10279: LD_EXP 26
10283: PPUSH
10284: CALL_OW 302
10288: IFFALSE 10304
// Say ( Kaia , DK-Cam-5 ) else
10290: LD_EXP 26
10294: PPUSH
10295: LD_STRING DK-Cam-5
10297: PPUSH
10298: CALL_OW 88
10302: GO 10319
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
10304: LD_EXP 34
10308: PPUSH
10309: LD_STRING DArm-Cam-5
10311: PPUSH
10312: LD_STRING DArf-Cam-5
10314: PPUSH
10315: CALL 1270 0 3
// Say ( Olaf , DO-Cam-6 ) ;
10319: LD_EXP 30
10323: PPUSH
10324: LD_STRING DO-Cam-6
10326: PPUSH
10327: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
10331: LD_EXP 30
10335: PPUSH
10336: LD_STRING DO-Cam-7
10338: PPUSH
10339: CALL_OW 88
// DialogueOff ;
10343: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
10347: LD_STRING Radar
10349: PPUSH
10350: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
10354: LD_INT 6
10356: PPUSH
10357: LD_INT 2
10359: PPUSH
10360: LD_INT 1
10362: PPUSH
10363: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
10367: LD_INT 20
10369: PPUSH
10370: LD_INT 2
10372: PPUSH
10373: LD_INT 1
10375: PPUSH
10376: CALL_OW 324
// end ;
10380: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
10381: LD_INT 22
10383: PUSH
10384: LD_INT 2
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: PUSH
10391: LD_INT 2
10393: PUSH
10394: LD_INT 34
10396: PUSH
10397: LD_INT 30
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PUSH
10404: LD_INT 35
10406: PUSH
10407: LD_INT 30
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: PUSH
10414: EMPTY
10415: LIST
10416: LIST
10417: LIST
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: PPUSH
10423: CALL_OW 69
10427: IFFALSE 10439
10429: GO 10431
10431: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
10432: LD_STRING RadarDone
10434: PPUSH
10435: CALL_OW 337
10439: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
10440: LD_INT 22
10442: PUSH
10443: LD_INT 2
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PUSH
10450: LD_INT 34
10452: PUSH
10453: LD_EXP 50
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PPUSH
10466: CALL_OW 69
10470: IFFALSE 10482
10472: GO 10474
10474: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
10475: LD_STRING CraneDone
10477: PPUSH
10478: CALL_OW 337
10482: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
10483: LD_EXP 30
10487: PPUSH
10488: CALL_OW 302
10492: PUSH
10493: LD_EXP 33
10497: PPUSH
10498: CALL_OW 302
10502: AND
10503: PUSH
10504: LD_INT 6
10506: PPUSH
10507: LD_INT 2
10509: PPUSH
10510: CALL_OW 321
10514: PUSH
10515: LD_INT 2
10517: EQUAL
10518: AND
10519: PUSH
10520: LD_EXP 33
10524: PPUSH
10525: LD_EXP 21
10529: PPUSH
10530: CALL_OW 296
10534: PUSH
10535: LD_INT 10
10537: LESS
10538: PUSH
10539: LD_EXP 33
10543: PPUSH
10544: CALL_OW 310
10548: OR
10549: AND
10550: IFFALSE 10764
10552: GO 10554
10554: DISABLE
// begin DialogueOn ;
10555: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
10559: LD_EXP 33
10563: PPUSH
10564: LD_STRING DA-RC-1
10566: PPUSH
10567: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
10571: LD_EXP 33
10575: PPUSH
10576: LD_STRING DA-RC-2
10578: PPUSH
10579: CALL_OW 88
// if IsOk ( Kaia ) then
10583: LD_EXP 26
10587: PPUSH
10588: CALL_OW 302
10592: IFFALSE 10666
// begin Say ( Kaia , DK-RC-3 ) ;
10594: LD_EXP 26
10598: PPUSH
10599: LD_STRING DK-RC-3
10601: PPUSH
10602: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
10606: LD_EXP 33
10610: PPUSH
10611: LD_STRING DA-RC-4
10613: PPUSH
10614: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
10618: LD_EXP 26
10622: PPUSH
10623: LD_STRING DK-RC-5
10625: PPUSH
10626: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
10630: LD_EXP 33
10634: PPUSH
10635: LD_STRING DA-RC-6
10637: PPUSH
10638: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
10642: LD_EXP 26
10646: PPUSH
10647: LD_STRING DK-RC-7
10649: PPUSH
10650: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
10654: LD_EXP 33
10658: PPUSH
10659: LD_STRING DA-RC-8
10661: PPUSH
10662: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
10666: LD_EXP 21
10670: PPUSH
10671: LD_STRING DH-RC-9
10673: PPUSH
10674: CALL_OW 88
// if IsOk ( Markov ) then
10678: LD_EXP 28
10682: PPUSH
10683: CALL_OW 302
10687: IFFALSE 10715
// begin Say ( Markov , DMar-RC-10 ) ;
10689: LD_EXP 28
10693: PPUSH
10694: LD_STRING DMar-RC-10
10696: PPUSH
10697: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
10701: LD_EXP 28
10705: PPUSH
10706: LD_STRING DMar-RC-11
10708: PPUSH
10709: CALL_OW 88
// end else
10713: GO 10727
// begin Say ( Olaf , DO-RC-a-10 ) ;
10715: LD_EXP 30
10719: PPUSH
10720: LD_STRING DO-RC-a-10
10722: PPUSH
10723: CALL_OW 88
// end ; DialogueOff ;
10727: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
10731: LD_STRING RemoteControl
10733: PPUSH
10734: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
10738: LD_INT 15
10740: PPUSH
10741: LD_INT 2
10743: PPUSH
10744: LD_INT 1
10746: PPUSH
10747: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
10751: LD_INT 22
10753: PPUSH
10754: LD_INT 2
10756: PPUSH
10757: LD_INT 1
10759: PPUSH
10760: CALL_OW 324
// end ;
10764: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
10765: LD_INT 12
10767: PPUSH
10768: LD_INT 22
10770: PUSH
10771: LD_INT 2
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PPUSH
10778: CALL_OW 70
10782: IFFALSE 11149
10784: GO 10786
10786: DISABLE
10787: LD_INT 0
10789: PPUSH
// begin PrepareWestBase ;
10790: CALL 3910 0 0
// westBaseSpotted := true ;
10794: LD_ADDR_EXP 5
10798: PUSH
10799: LD_INT 1
10801: ST_TO_ADDR
// wait ( 0 0$2 ) ;
10802: LD_INT 70
10804: PPUSH
10805: CALL_OW 67
// InGameOn ;
10809: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
10813: LD_INT 56
10815: PPUSH
10816: LD_INT 77
10818: PPUSH
10819: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
10823: LD_INT 56
10825: PPUSH
10826: LD_INT 77
10828: PPUSH
10829: LD_INT 2
10831: PPUSH
10832: LD_INT 12
10834: NEG
10835: PPUSH
10836: CALL_OW 330
// wait ( 0 0$2 ) ;
10840: LD_INT 70
10842: PPUSH
10843: CALL_OW 67
// DialogueOn ;
10847: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
10851: LD_EXP 21
10855: PPUSH
10856: LD_STRING DH-Rbase-1
10858: PPUSH
10859: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
10863: LD_EXP 26
10867: PPUSH
10868: LD_STRING DK-Rbase-2
10870: PPUSH
10871: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
10875: LD_EXP 26
10879: PPUSH
10880: LD_STRING DK-Rbase-3
10882: PPUSH
10883: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
10887: LD_EXP 26
10891: PPUSH
10892: LD_STRING DK-Rbase-4
10894: PPUSH
10895: CALL_OW 88
// DialogueOff ;
10899: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
10903: LD_INT 56
10905: PPUSH
10906: LD_INT 77
10908: PPUSH
10909: LD_INT 2
10911: PPUSH
10912: CALL_OW 331
// InGameOff ;
10916: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
10920: LD_INT 35
10922: PPUSH
10923: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
10927: LD_EXP 42
10931: NOT
10932: PUSH
10933: LD_EXP 43
10937: NOT
10938: AND
10939: IFFALSE 10920
// wait ( 0 0$2 ) ;
10941: LD_INT 70
10943: PPUSH
10944: CALL_OW 67
// if IsOk ( Kaia ) then
10948: LD_EXP 26
10952: PPUSH
10953: CALL_OW 302
10957: IFFALSE 11072
// begin DialogueOn ;
10959: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
10963: LD_INT 56
10965: PPUSH
10966: LD_INT 81
10968: PPUSH
10969: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
10973: LD_EXP 26
10977: PPUSH
10978: LD_STRING DK-Rbase-5
10980: PPUSH
10981: CALL_OW 88
// if IsOk ( Givi ) then
10985: LD_EXP 22
10989: PPUSH
10990: CALL_OW 302
10994: IFFALSE 11068
// begin Say ( Givi , DG-Rbase-6 ) ;
10996: LD_EXP 22
11000: PPUSH
11001: LD_STRING DG-Rbase-6
11003: PPUSH
11004: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11008: LD_EXP 22
11012: PPUSH
11013: LD_STRING DG-Rbase-7
11015: PPUSH
11016: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11020: LD_EXP 26
11024: PPUSH
11025: LD_STRING DK-Rbase-8
11027: PPUSH
11028: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11032: LD_EXP 22
11036: PPUSH
11037: LD_STRING DG-Rbase-9
11039: PPUSH
11040: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11044: LD_EXP 22
11048: PPUSH
11049: LD_STRING DG-Rbase-10
11051: PPUSH
11052: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11056: LD_EXP 26
11060: PPUSH
11061: LD_STRING DK-Rbase-11
11063: PPUSH
11064: CALL_OW 88
// end ; DialogueOff ;
11068: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11072: LD_ADDR_VAR 0 1
11076: PUSH
11077: LD_INT 12
11079: PPUSH
11080: LD_INT 22
11082: PUSH
11083: LD_INT 3
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: PUSH
11090: LD_INT 21
11092: PUSH
11093: LD_INT 3
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: PPUSH
11104: CALL_OW 70
11108: PUSH
11109: FOR_IN
11110: IFFALSE 11126
// SetSide ( i , 2 ) ;
11112: LD_VAR 0 1
11116: PPUSH
11117: LD_INT 2
11119: PPUSH
11120: CALL_OW 235
11124: GO 11109
11126: POP
11127: POP
// westBaseCaptured := true ;
11128: LD_ADDR_EXP 9
11132: PUSH
11133: LD_INT 1
11135: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
11136: LD_INT 0
11138: PPUSH
11139: LD_INT 2
11141: PPUSH
11142: LD_INT 1
11144: PPUSH
11145: CALL_OW 324
// end ;
11149: PPOPN 1
11151: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
11152: LD_EXP 38
11156: NOT
11157: PUSH
11158: LD_INT 10
11160: PPUSH
11161: CALL_OW 255
11165: PUSH
11166: LD_INT 2
11168: EQUAL
11169: OR
11170: IFFALSE 11307
11172: GO 11174
11174: DISABLE
// begin DialogueOn ;
11175: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
11179: LD_EXP 21
11183: PPUSH
11184: LD_STRING DH-Goal-1
11186: PPUSH
11187: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
11191: LD_EXP 29
11195: PPUSH
11196: LD_STRING DShar-Goal-2
11198: PPUSH
11199: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
11203: LD_EXP 21
11207: PPUSH
11208: LD_STRING DH-Goal-3
11210: PPUSH
11211: CALL_OW 88
// if reinforcementsAllowed then
11215: LD_EXP 14
11219: IFFALSE 11245
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
11221: LD_EXP 29
11225: PPUSH
11226: LD_STRING DShar-Goal-4
11228: PPUSH
11229: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
11233: LD_EXP 21
11237: PPUSH
11238: LD_STRING DH-Goal-5
11240: PPUSH
11241: CALL_OW 88
// end ; DialogueOff ;
11245: CALL_OW 7
// eastBaseCaptured := true ;
11249: LD_ADDR_EXP 10
11253: PUSH
11254: LD_INT 1
11256: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
11257: LD_STRING BaseCaptured
11259: PPUSH
11260: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
11264: LD_INT 10
11266: PPUSH
11267: LD_INT 2
11269: PPUSH
11270: CALL_OW 235
// if not reinforcementsAllowed then
11274: LD_EXP 14
11278: NOT
11279: IFFALSE 11283
// exit ;
11281: GO 11307
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
11283: LD_INT 21000
11285: PUSH
11286: LD_INT 1050
11288: NEG
11289: PPUSH
11290: LD_INT 1050
11292: PPUSH
11293: CALL_OW 12
11297: PLUS
11298: PPUSH
11299: CALL_OW 67
// PrepareReinforcements ;
11303: CALL 2238 0 0
// end ;
11307: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
11308: LD_INT 22
11310: PUSH
11311: LD_INT 2
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: PUSH
11318: LD_INT 30
11320: PUSH
11321: LD_INT 13
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: PPUSH
11332: CALL_OW 69
11336: IFFALSE 11353
11338: GO 11340
11340: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
11341: LD_EXP 22
11345: PPUSH
11346: LD_STRING DG-Lab-1
11348: PPUSH
11349: CALL_OW 88
// end ;
11353: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
11354: LD_INT 5
11356: PPUSH
11357: LD_INT 2
11359: PPUSH
11360: CALL_OW 321
11364: PUSH
11365: LD_INT 2
11367: EQUAL
11368: PUSH
11369: LD_EXP 22
11373: PPUSH
11374: CALL_OW 302
11378: AND
11379: IFFALSE 11440
11381: GO 11383
11383: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
11384: LD_EXP 22
11388: PPUSH
11389: LD_STRING DG-Stim-1
11391: PPUSH
11392: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
11396: LD_EXP 21
11400: PPUSH
11401: LD_STRING DH-Stim-2
11403: PPUSH
11404: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
11408: LD_EXP 22
11412: PPUSH
11413: LD_STRING DG-Stim-3
11415: PPUSH
11416: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
11420: LD_EXP 21
11424: PPUSH
11425: LD_STRING DH-Stim-4
11427: PPUSH
11428: CALL_OW 88
// drugsResearched := true ;
11432: LD_ADDR_EXP 11
11436: PUSH
11437: LD_INT 1
11439: ST_TO_ADDR
// end ;
11440: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
11441: LD_EXP 11
11445: IFFALSE 11757
11447: GO 11449
11449: DISABLE
11450: LD_INT 0
11452: PPUSH
11453: PPUSH
11454: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
11455: LD_ADDR_VAR 0 2
11459: PUSH
11460: LD_EXP 21
11464: PUSH
11465: LD_EXP 22
11469: PUSH
11470: LD_EXP 30
11474: PUSH
11475: LD_EXP 28
11479: PUSH
11480: LD_EXP 26
11484: PUSH
11485: LD_EXP 27
11489: PUSH
11490: LD_EXP 32
11494: PUSH
11495: LD_EXP 25
11499: PUSH
11500: LD_EXP 23
11504: PUSH
11505: LD_EXP 24
11509: PUSH
11510: LD_EXP 33
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
11528: LD_ADDR_VAR 0 3
11532: PUSH
11533: LD_STRING H
11535: PUSH
11536: LD_STRING G
11538: PUSH
11539: LD_STRING O
11541: PUSH
11542: LD_STRING Mar
11544: PUSH
11545: LD_STRING K
11547: PUSH
11548: LD_STRING S
11550: PUSH
11551: LD_STRING Ks
11553: PUSH
11554: LD_STRING Kam
11556: PUSH
11557: LD_STRING M
11559: PUSH
11560: LD_STRING I
11562: PUSH
11563: LD_STRING A
11565: PUSH
11566: EMPTY
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11579: LD_INT 35
11581: PPUSH
11582: CALL_OW 67
// for i := tmp downto 1 do
11586: LD_ADDR_VAR 0 1
11590: PUSH
11591: DOUBLE
11592: LD_VAR 0 2
11596: INC
11597: ST_TO_ADDR
11598: LD_INT 1
11600: PUSH
11601: FOR_DOWNTO
11602: IFFALSE 11748
// if GetLives ( tmp [ i ] ) < 250 then
11604: LD_VAR 0 2
11608: PUSH
11609: LD_VAR 0 1
11613: ARRAY
11614: PPUSH
11615: CALL_OW 256
11619: PUSH
11620: LD_INT 250
11622: LESS
11623: IFFALSE 11746
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
11625: LD_ADDR_EXP 19
11629: PUSH
11630: LD_EXP 19
11634: PUSH
11635: LD_INT 1
11637: PLUS
11638: ST_TO_ADDR
// DialogueOn ;
11639: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
11643: LD_VAR 0 2
11647: PUSH
11648: LD_VAR 0 1
11652: ARRAY
11653: PPUSH
11654: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
11658: LD_VAR 0 2
11662: PUSH
11663: LD_VAR 0 1
11667: ARRAY
11668: PPUSH
11669: LD_STRING D
11671: PUSH
11672: LD_VAR 0 3
11676: PUSH
11677: LD_VAR 0 1
11681: ARRAY
11682: STR
11683: PUSH
11684: LD_STRING -Stim-a-1
11686: STR
11687: PPUSH
11688: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
11692: LD_ADDR_VAR 0 2
11696: PUSH
11697: LD_VAR 0 2
11701: PPUSH
11702: LD_VAR 0 1
11706: PPUSH
11707: CALL_OW 3
11711: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
11712: LD_ADDR_VAR 0 3
11716: PUSH
11717: LD_VAR 0 3
11721: PPUSH
11722: LD_VAR 0 1
11726: PPUSH
11727: CALL_OW 3
11731: ST_TO_ADDR
// drugsTested := true ;
11732: LD_ADDR_EXP 6
11736: PUSH
11737: LD_INT 1
11739: ST_TO_ADDR
// DialogueOff ;
11740: CALL_OW 7
// break ;
11744: GO 11748
// end ;
11746: GO 11601
11748: POP
11749: POP
// until not tmp ;
11750: LD_VAR 0 2
11754: NOT
11755: IFFALSE 11579
// end ;
11757: PPOPN 3
11759: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
11760: LD_INT 22
11762: PUSH
11763: LD_INT 2
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: PUSH
11770: LD_INT 34
11772: PUSH
11773: LD_INT 31
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PPUSH
11784: CALL_OW 69
11788: PUSH
11789: LD_INT 22
11791: PUSH
11792: LD_INT 2
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: PUSH
11799: LD_INT 33
11801: PUSH
11802: LD_INT 2
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: PUSH
11809: EMPTY
11810: LIST
11811: LIST
11812: PPUSH
11813: CALL_OW 69
11817: AND
11818: IFFALSE 11831
11820: GO 11822
11822: DISABLE
// remoteControlConstructed := true ;
11823: LD_ADDR_EXP 12
11827: PUSH
11828: LD_INT 1
11830: ST_TO_ADDR
11831: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
11832: LD_EXP 12
11836: IFFALSE 12136
11838: GO 11840
11840: DISABLE
11841: LD_INT 0
11843: PPUSH
11844: PPUSH
11845: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
11846: LD_ADDR_VAR 0 2
11850: PUSH
11851: LD_EXP 21
11855: PUSH
11856: LD_EXP 22
11860: PUSH
11861: LD_EXP 30
11865: PUSH
11866: LD_EXP 28
11870: PUSH
11871: LD_EXP 26
11875: PUSH
11876: LD_EXP 27
11880: PUSH
11881: LD_EXP 32
11885: PUSH
11886: LD_EXP 25
11890: PUSH
11891: LD_EXP 23
11895: PUSH
11896: LD_EXP 24
11900: PUSH
11901: LD_EXP 33
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
11919: LD_ADDR_VAR 0 3
11923: PUSH
11924: LD_STRING H
11926: PUSH
11927: LD_STRING G
11929: PUSH
11930: LD_STRING O
11932: PUSH
11933: LD_STRING Mar
11935: PUSH
11936: LD_STRING K
11938: PUSH
11939: LD_STRING S
11941: PUSH
11942: LD_STRING Ks
11944: PUSH
11945: LD_STRING Kam
11947: PUSH
11948: LD_STRING M
11950: PUSH
11951: LD_STRING I
11953: PUSH
11954: LD_STRING A
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11970: LD_INT 35
11972: PPUSH
11973: CALL_OW 67
// for i := tmp downto 1 do
11977: LD_ADDR_VAR 0 1
11981: PUSH
11982: DOUBLE
11983: LD_VAR 0 2
11987: INC
11988: ST_TO_ADDR
11989: LD_INT 1
11991: PUSH
11992: FOR_DOWNTO
11993: IFFALSE 12127
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
11995: LD_VAR 0 2
11999: PUSH
12000: LD_VAR 0 1
12004: ARRAY
12005: PPUSH
12006: CALL_OW 257
12010: PUSH
12011: LD_INT 3
12013: EQUAL
12014: PUSH
12015: LD_VAR 0 2
12019: PUSH
12020: LD_VAR 0 1
12024: ARRAY
12025: PPUSH
12026: CALL_OW 432
12030: AND
12031: IFFALSE 12125
// begin DialogueOn ;
12033: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12037: LD_VAR 0 2
12041: PUSH
12042: LD_VAR 0 1
12046: ARRAY
12047: PPUSH
12048: LD_STRING D
12050: PUSH
12051: LD_VAR 0 3
12055: PUSH
12056: LD_VAR 0 1
12060: ARRAY
12061: STR
12062: PUSH
12063: LD_STRING -RC-a-1
12065: STR
12066: PPUSH
12067: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12071: LD_ADDR_VAR 0 2
12075: PUSH
12076: LD_VAR 0 2
12080: PPUSH
12081: LD_VAR 0 1
12085: PPUSH
12086: CALL_OW 3
12090: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12091: LD_ADDR_VAR 0 3
12095: PUSH
12096: LD_VAR 0 3
12100: PPUSH
12101: LD_VAR 0 1
12105: PPUSH
12106: CALL_OW 3
12110: ST_TO_ADDR
// DialogueOff ;
12111: CALL_OW 7
// remoteControlTested := true ;
12115: LD_ADDR_EXP 7
12119: PUSH
12120: LD_INT 1
12122: ST_TO_ADDR
// break ;
12123: GO 12127
// end ;
12125: GO 11992
12127: POP
12128: POP
// until not tmp ;
12129: LD_VAR 0 2
12133: NOT
12134: IFFALSE 11970
// end ;
12136: PPOPN 3
12138: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
12139: LD_EXP 7
12143: PUSH
12144: LD_EXP 28
12148: PPUSH
12149: CALL_OW 302
12153: AND
12154: IFFALSE 12183
12156: GO 12158
12158: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
12159: LD_EXP 28
12163: PPUSH
12164: LD_STRING DMar-RC-a-2
12166: PPUSH
12167: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
12171: LD_EXP 28
12175: PPUSH
12176: LD_STRING DMar-RC-a-3
12178: PPUSH
12179: CALL_OW 88
// end ;
12183: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
12184: LD_EXP 14
12188: PUSH
12189: LD_EXP 21
12193: PPUSH
12194: LD_EXP 33
12198: PPUSH
12199: CALL_OW 296
12203: PUSH
12204: LD_INT 8
12206: LESS
12207: AND
12208: PUSH
12209: LD_INT 2
12211: PPUSH
12212: CALL_OW 463
12216: NOT
12217: AND
12218: PUSH
12219: LD_EXP 33
12223: PPUSH
12224: CALL_OW 302
12228: AND
12229: PUSH
12230: LD_EXP 21
12234: PPUSH
12235: CALL_OW 302
12239: AND
12240: IFFALSE 12418
12242: GO 12244
12244: DISABLE
// begin if not IsInUnit ( Aviradze ) then
12245: LD_EXP 33
12249: PPUSH
12250: CALL_OW 310
12254: NOT
12255: IFFALSE 12271
// ComTurnUnit ( Aviradze , Heike ) ;
12257: LD_EXP 33
12261: PPUSH
12262: LD_EXP 21
12266: PPUSH
12267: CALL_OW 119
// if not IsInUnit ( Heike ) then
12271: LD_EXP 21
12275: PPUSH
12276: CALL_OW 310
12280: NOT
12281: IFFALSE 12297
// ComTurnUnit ( Heike , Aviradze ) ;
12283: LD_EXP 21
12287: PPUSH
12288: LD_EXP 33
12292: PPUSH
12293: CALL_OW 119
// wait ( 0 0$1 ) ;
12297: LD_INT 35
12299: PPUSH
12300: CALL_OW 67
// DialogueOn ;
12304: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
12308: LD_EXP 33
12312: PPUSH
12313: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
12317: LD_EXP 21
12321: PPUSH
12322: LD_STRING DH-Beria-1
12324: PPUSH
12325: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
12329: LD_EXP 33
12333: PPUSH
12334: LD_STRING DA-Beria-2
12336: PPUSH
12337: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
12341: LD_EXP 21
12345: PPUSH
12346: LD_STRING DH-Beria-3
12348: PPUSH
12349: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
12353: LD_EXP 33
12357: PPUSH
12358: LD_STRING DA-Beria-4
12360: PPUSH
12361: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
12365: LD_EXP 33
12369: PPUSH
12370: LD_STRING DA-Beria-5
12372: PPUSH
12373: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
12377: LD_EXP 33
12381: PPUSH
12382: LD_STRING DA-Beria-6
12384: PPUSH
12385: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
12389: LD_EXP 21
12393: PPUSH
12394: LD_STRING DA-Beria-7
12396: PPUSH
12397: CALL_OW 88
// DialogueOff ;
12401: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
12405: LD_INT 52
12407: PPUSH
12408: LD_INT 2
12410: PPUSH
12411: LD_INT 1
12413: PPUSH
12414: CALL_OW 322
// end ;
12418: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
12419: LD_EXP 26
12423: PPUSH
12424: CALL_OW 300
12428: PUSH
12429: LD_EXP 26
12433: PPUSH
12434: CALL_OW 256
12438: PUSH
12439: LD_INT 10
12441: LESS
12442: AND
12443: IFFALSE 12480
12445: GO 12447
12447: DISABLE
// begin DialogueOn ;
12448: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
12452: LD_EXP 26
12456: PPUSH
12457: LD_STRING DK-Kdeath-1
12459: PPUSH
12460: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
12464: LD_EXP 21
12468: PPUSH
12469: LD_STRING DH-Kdeath-2
12471: PPUSH
12472: CALL_OW 88
// DialogueOff ;
12476: CALL_OW 7
// end ;
12480: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
12481: LD_INT 2
12483: PPUSH
12484: LD_EXP 39
12488: PPUSH
12489: CALL 1370 0 2
12493: IFFALSE 12510
12495: GO 12497
12497: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
12498: LD_EXP 21
12502: PPUSH
12503: LD_STRING DH-Obj-1
12505: PPUSH
12506: CALL_OW 88
12510: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
12511: LD_INT 2
12513: PPUSH
12514: LD_EXP 40
12518: PPUSH
12519: CALL 1370 0 2
12523: IFFALSE 12540
12525: GO 12527
12527: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
12528: LD_EXP 21
12532: PPUSH
12533: LD_STRING DH-Obj-a-1
12535: PPUSH
12536: CALL_OW 88
12540: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 7 7$00 , 6 6$30 , 6 6$00 ] [ Difficulty ] do
12541: LD_EXP 10
12545: PUSH
12546: LD_OWVAR 1
12550: PUSH
12551: LD_INT 14700
12553: PUSH
12554: LD_INT 13650
12556: PUSH
12557: LD_INT 12600
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: LIST
12564: PUSH
12565: LD_OWVAR 67
12569: ARRAY
12570: GREATEREQUAL
12571: OR
12572: IFFALSE 12600
12574: GO 12576
12576: DISABLE
// begin wait ( rand ( 2 2$00 , 2 2$30 ) ) ;
12577: LD_INT 4200
12579: PPUSH
12580: LD_INT 5250
12582: PPUSH
12583: CALL_OW 12
12587: PPUSH
12588: CALL_OW 67
// convoyStarted := true ;
12592: LD_ADDR_EXP 17
12596: PUSH
12597: LD_INT 1
12599: ST_TO_ADDR
// end ;
12600: END
// every 0 0$1 trigger convoyStarted do
12601: LD_EXP 17
12605: IFFALSE 12689
12607: GO 12609
12609: DISABLE
// begin DialogueOn ;
12610: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
12614: LD_EXP 29
12618: PPUSH
12619: LD_STRING DShar-Convoy-1
12621: PPUSH
12622: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
12626: LD_EXP 21
12630: PPUSH
12631: LD_STRING DH-Convoy-2
12633: PPUSH
12634: CALL_OW 88
// DialogueOff ;
12638: CALL_OW 7
// PrepareConvoy ;
12642: CALL 4549 0 0
// repeat wait ( rand ( 2 2$30 , 5 5$30 ) ) ;
12646: LD_INT 5250
12648: PPUSH
12649: LD_INT 11550
12651: PPUSH
12652: CALL_OW 12
12656: PPUSH
12657: CALL_OW 67
// PrepareConvoy ;
12661: CALL 4549 0 0
// convoyCounter := convoyCounter - 1 ;
12665: LD_ADDR_EXP 16
12669: PUSH
12670: LD_EXP 16
12674: PUSH
12675: LD_INT 1
12677: MINUS
12678: ST_TO_ADDR
// until convoyCounter <= 0 ;
12679: LD_EXP 16
12683: PUSH
12684: LD_INT 0
12686: LESSEQUAL
12687: IFFALSE 12646
// end ;
12689: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
12690: LD_EXP 15
12694: PUSH
12695: LD_INT 10
12697: GREATEREQUAL
12698: IFFALSE 12715
12700: GO 12702
12702: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
12703: LD_EXP 31
12707: PPUSH
12708: LD_STRING DOm-Fail-1
12710: PPUSH
12711: CALL_OW 94
12715: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
12716: LD_EXP 39
12720: NOT
12721: PUSH
12722: LD_EXP 40
12726: NOT
12727: AND
12728: IFFALSE 12740
12730: GO 12732
12732: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
12733: LD_STRING RaiderDone
12735: PPUSH
12736: CALL_OW 337
12740: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
12741: LD_INT 22
12743: PUSH
12744: LD_INT 2
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: PUSH
12751: LD_INT 33
12753: PUSH
12754: LD_INT 2
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: PPUSH
12765: CALL_OW 69
12769: PUSH
12770: LD_INT 3
12772: GREATEREQUAL
12773: PUSH
12774: LD_INT 22
12776: PUSH
12777: LD_INT 2
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: PUSH
12784: LD_INT 34
12786: PUSH
12787: LD_INT 31
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: PPUSH
12798: CALL_OW 69
12802: PUSH
12803: LD_INT 2
12805: GREATEREQUAL
12806: AND
12807: IFFALSE 12819
12809: GO 12811
12811: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
12812: LD_STRING RemoteControlDone
12814: PPUSH
12815: CALL_OW 337
12819: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var tmp ;
12820: LD_EXP 16
12824: PUSH
12825: LD_INT 1
12827: LESS
12828: PUSH
12829: LD_EXP 41
12833: PPUSH
12834: LD_INT 52
12836: PUSH
12837: EMPTY
12838: LIST
12839: PUSH
12840: LD_INT 21
12842: PUSH
12843: LD_INT 1
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: PPUSH
12854: CALL_OW 72
12858: NOT
12859: AND
12860: PUSH
12861: LD_OWVAR 1
12865: PUSH
12866: LD_INT 126000
12868: GREATEREQUAL
12869: OR
12870: IFFALSE 13687
12872: GO 12874
12874: DISABLE
12875: LD_INT 0
12877: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
12878: LD_STRING ReinforcementsDone
12880: PPUSH
12881: CALL_OW 337
// music_class := music_victory ;
12885: LD_ADDR_OWVAR 72
12889: PUSH
12890: LD_INT 4
12892: ST_TO_ADDR
// InGameOn ;
12893: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
12897: LD_EXP 21
12901: PPUSH
12902: LD_STRING DH-end-1
12904: PPUSH
12905: CALL_OW 88
// wait ( 0 0$2 ) ;
12909: LD_INT 70
12911: PPUSH
12912: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
12916: LD_EXP 29
12920: PPUSH
12921: LD_STRING DShar-end-2
12923: PPUSH
12924: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
12928: LD_EXP 39
12932: NOT
12933: PUSH
12934: LD_EXP 40
12938: NOT
12939: AND
12940: IFFALSE 12956
// begin Say ( Heike , DH-end-3 ) ;
12942: LD_EXP 21
12946: PPUSH
12947: LD_STRING DH-end-3
12949: PPUSH
12950: CALL_OW 88
// end else
12954: GO 13053
// begin Say ( Heike , DH-end-a-3 ) ;
12956: LD_EXP 21
12960: PPUSH
12961: LD_STRING DH-end-a-3
12963: PPUSH
12964: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
12968: LD_EXP 29
12972: PPUSH
12973: LD_STRING DShar-end-a-4
12975: PPUSH
12976: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
12980: LD_EXP 21
12984: PPUSH
12985: LD_STRING DH-end-a-5
12987: PPUSH
12988: CALL_OW 88
// InGameOff ;
12992: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
12996: LD_INT 35
12998: PPUSH
12999: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
13003: LD_INT 22
13005: PUSH
13006: LD_INT 3
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: PUSH
13013: LD_INT 21
13015: PUSH
13016: LD_INT 1
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: PPUSH
13027: CALL_OW 69
13031: PUSH
13032: LD_INT 0
13034: EQUAL
13035: IFFALSE 12996
// InGameOn ;
13037: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
13041: LD_EXP 21
13045: PPUSH
13046: LD_STRING DH-end-a-6
13048: PPUSH
13049: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
13053: LD_EXP 29
13057: PPUSH
13058: LD_STRING DShar-end-3
13060: PPUSH
13061: CALL_OW 94
// if not flamethrowerBuilt then
13065: LD_EXP 20
13069: NOT
13070: IFFALSE 13079
// SetAchievement ( ACH_FIRE ) ;
13072: LD_STRING ACH_FIRE
13074: PPUSH
13075: CALL_OW 543
// if drugsTested then
13079: LD_EXP 6
13083: IFFALSE 13097
// AddMedal ( med1 , 1 ) else
13085: LD_STRING med1
13087: PPUSH
13088: LD_INT 1
13090: PPUSH
13091: CALL_OW 101
13095: GO 13137
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
13097: LD_INT 5
13099: PPUSH
13100: LD_INT 2
13102: PPUSH
13103: CALL_OW 321
13107: PUSH
13108: LD_INT 2
13110: EQUAL
13111: IFFALSE 13126
// AddMedal ( med1 , - 1 ) else
13113: LD_STRING med1
13115: PPUSH
13116: LD_INT 1
13118: NEG
13119: PPUSH
13120: CALL_OW 101
13124: GO 13137
// AddMedal ( med1 , - 2 ) ;
13126: LD_STRING med1
13128: PPUSH
13129: LD_INT 2
13131: NEG
13132: PPUSH
13133: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
13137: LD_INT 22
13139: PUSH
13140: LD_INT 2
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PUSH
13147: LD_INT 33
13149: PUSH
13150: LD_INT 2
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: PPUSH
13161: CALL_OW 69
13165: PUSH
13166: LD_INT 3
13168: GREATEREQUAL
13169: PUSH
13170: LD_INT 22
13172: PUSH
13173: LD_INT 2
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: PUSH
13180: LD_INT 34
13182: PUSH
13183: LD_INT 31
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PPUSH
13194: CALL_OW 69
13198: PUSH
13199: LD_INT 1
13201: GREATEREQUAL
13202: AND
13203: IFFALSE 13217
// AddMedal ( med2 , 1 ) else
13205: LD_STRING med2
13207: PPUSH
13208: LD_INT 1
13210: PPUSH
13211: CALL_OW 101
13215: GO 13228
// AddMedal ( med2 , - 1 ) ;
13217: LD_STRING med2
13219: PPUSH
13220: LD_INT 1
13222: NEG
13223: PPUSH
13224: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 ] [ Difficulty ] then
13228: LD_EXP 15
13232: PUSH
13233: LD_INT 10
13235: PUSH
13236: LD_INT 8
13238: PUSH
13239: LD_INT 6
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: LIST
13246: PUSH
13247: LD_OWVAR 67
13251: ARRAY
13252: LESS
13253: IFFALSE 13267
// AddMedal ( med3 , 1 ) else
13255: LD_STRING med3
13257: PPUSH
13258: LD_INT 1
13260: PPUSH
13261: CALL_OW 101
13265: GO 13278
// AddMedal ( med3 , - 1 ) ;
13267: LD_STRING med3
13269: PPUSH
13270: LD_INT 1
13272: NEG
13273: PPUSH
13274: CALL_OW 101
// GiveMedals ( MAIN ) ;
13278: LD_STRING MAIN
13280: PPUSH
13281: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13285: LD_INT 22
13287: PUSH
13288: LD_INT 2
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: PUSH
13295: LD_INT 23
13297: PUSH
13298: LD_INT 2
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: PUSH
13305: LD_INT 21
13307: PUSH
13308: LD_INT 1
13310: PUSH
13311: EMPTY
13312: LIST
13313: LIST
13314: PUSH
13315: EMPTY
13316: LIST
13317: LIST
13318: LIST
13319: PPUSH
13320: CALL_OW 69
13324: PPUSH
13325: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
13329: LD_EXP 15
13333: PPUSH
13334: LD_STRING 05_ConvoySavedCounter
13336: PPUSH
13337: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
13341: LD_EXP 13
13345: PPUSH
13346: LD_STRING 05_Radar
13348: PPUSH
13349: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
13353: LD_EXP 6
13357: PPUSH
13358: LD_STRING 05_DrugsTested
13360: PPUSH
13361: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
13365: LD_INT 22
13367: PUSH
13368: LD_INT 2
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: LD_INT 33
13377: PUSH
13378: LD_INT 2
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PPUSH
13389: CALL_OW 69
13393: PUSH
13394: LD_INT 3
13396: GREATEREQUAL
13397: PUSH
13398: LD_INT 22
13400: PUSH
13401: LD_INT 2
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: PUSH
13408: LD_INT 34
13410: PUSH
13411: LD_INT 31
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PPUSH
13422: CALL_OW 69
13426: PUSH
13427: LD_INT 2
13429: GREATEREQUAL
13430: AND
13431: PPUSH
13432: LD_STRING 05_RemoteControl
13434: PPUSH
13435: CALL_OW 39
// SaveCharacters ( Heike , 05_Heike ) ;
13439: LD_EXP 21
13443: PPUSH
13444: LD_STRING 05_Heike
13446: PPUSH
13447: CALL_OW 38
// if Aviradze then
13451: LD_EXP 33
13455: IFFALSE 13469
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
13457: LD_EXP 33
13461: PPUSH
13462: LD_STRING 05_Aviradze
13464: PPUSH
13465: CALL_OW 38
// if Ibrahim then
13469: LD_EXP 24
13473: IFFALSE 13487
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
13475: LD_EXP 24
13479: PPUSH
13480: LD_STRING 05_Ibrahim
13482: PPUSH
13483: CALL_OW 38
// if Kamil then
13487: LD_EXP 25
13491: IFFALSE 13505
// SaveCharacters ( Kamil , 05_Kamil ) ;
13493: LD_EXP 25
13497: PPUSH
13498: LD_STRING 05_Kamil
13500: PPUSH
13501: CALL_OW 38
// if Sophia then
13505: LD_EXP 27
13509: IFFALSE 13523
// SaveCharacters ( Sophia , 05_Sophia ) ;
13511: LD_EXP 27
13515: PPUSH
13516: LD_STRING 05_Sophia
13518: PPUSH
13519: CALL_OW 38
// if Kaia then
13523: LD_EXP 26
13527: IFFALSE 13541
// SaveCharacters ( Kaia , 05_Kaia ) ;
13529: LD_EXP 26
13533: PPUSH
13534: LD_STRING 05_Kaia
13536: PPUSH
13537: CALL_OW 38
// if Givi then
13541: LD_EXP 22
13545: IFFALSE 13559
// SaveCharacters ( Givi , 05_Givi ) ;
13547: LD_EXP 22
13551: PPUSH
13552: LD_STRING 05_Givi
13554: PPUSH
13555: CALL_OW 38
// if Mike then
13559: LD_EXP 23
13563: IFFALSE 13577
// SaveCharacters ( Mike , 05_Mike ) ;
13565: LD_EXP 23
13569: PPUSH
13570: LD_STRING 05_Mike
13572: PPUSH
13573: CALL_OW 38
// if Markov then
13577: LD_EXP 28
13581: IFFALSE 13595
// SaveCharacters ( Markov , 05_Markov ) ;
13583: LD_EXP 28
13587: PPUSH
13588: LD_STRING 05_Markov
13590: PPUSH
13591: CALL_OW 38
// if Kurt then
13595: LD_EXP 32
13599: IFFALSE 13613
// SaveCharacters ( Kurt , 05_Kurt ) ;
13601: LD_EXP 32
13605: PPUSH
13606: LD_STRING 05_Kurt
13608: PPUSH
13609: CALL_OW 38
// if heikeSecondSquad then
13613: LD_EXP 34
13617: IFFALSE 13631
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
13619: LD_EXP 34
13623: PPUSH
13624: LD_STRING 05_others
13626: PPUSH
13627: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
13631: LD_ADDR_VAR 0 1
13635: PUSH
13636: LD_INT 22
13638: PUSH
13639: LD_INT 2
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: PUSH
13646: LD_INT 23
13648: PUSH
13649: LD_INT 0
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: PPUSH
13660: CALL_OW 69
13664: ST_TO_ADDR
// if tmp then
13665: LD_VAR 0 1
13669: IFFALSE 13683
// SaveCharacters ( tmp , 05_apes ) ;
13671: LD_VAR 0 1
13675: PPUSH
13676: LD_STRING 05_apes
13678: PPUSH
13679: CALL_OW 38
// YouWin ;
13683: CALL_OW 103
// end ; end_of_file
13687: PPOPN 1
13689: END
// every 0 0$40 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
13690: LD_EXP 9
13694: PUSH
13695: LD_INT 13
13697: PPUSH
13698: LD_INT 1
13700: PPUSH
13701: CALL_OW 287
13705: PUSH
13706: LD_INT 25
13708: LESS
13709: AND
13710: IFFALSE 13737
13712: GO 13714
13714: DISABLE
// begin enable ;
13715: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
13716: LD_INT 1
13718: PPUSH
13719: LD_INT 5
13721: PPUSH
13722: CALL_OW 12
13726: PPUSH
13727: LD_INT 13
13729: PPUSH
13730: LD_INT 1
13732: PPUSH
13733: CALL_OW 55
// end ; end_of_file
13737: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
13738: LD_INT 0
13740: PPUSH
// ar_miner := 81 ;
13741: LD_ADDR_EXP 51
13745: PUSH
13746: LD_INT 81
13748: ST_TO_ADDR
// ar_crane := 88 ;
13749: LD_ADDR_EXP 50
13753: PUSH
13754: LD_INT 88
13756: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
13757: LD_ADDR_EXP 45
13761: PUSH
13762: LD_INT 89
13764: ST_TO_ADDR
// us_hack := 99 ;
13765: LD_ADDR_EXP 46
13769: PUSH
13770: LD_INT 99
13772: ST_TO_ADDR
// us_artillery := 97 ;
13773: LD_ADDR_EXP 47
13777: PUSH
13778: LD_INT 97
13780: ST_TO_ADDR
// ar_bio_bomb := 91 ;
13781: LD_ADDR_EXP 48
13785: PUSH
13786: LD_INT 91
13788: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
13789: LD_ADDR_EXP 49
13793: PUSH
13794: LD_INT 92
13796: ST_TO_ADDR
// ru_radar := 98 ;
13797: LD_ADDR_EXP 44
13801: PUSH
13802: LD_INT 98
13804: ST_TO_ADDR
// tech_Artillery := 80 ;
13805: LD_ADDR_EXP 52
13809: PUSH
13810: LD_INT 80
13812: ST_TO_ADDR
// tech_RadMat := 81 ;
13813: LD_ADDR_EXP 53
13817: PUSH
13818: LD_INT 81
13820: ST_TO_ADDR
// tech_BasicTools := 82 ;
13821: LD_ADDR_EXP 54
13825: PUSH
13826: LD_INT 82
13828: ST_TO_ADDR
// tech_Cargo := 83 ;
13829: LD_ADDR_EXP 55
13833: PUSH
13834: LD_INT 83
13836: ST_TO_ADDR
// tech_Track := 84 ;
13837: LD_ADDR_EXP 56
13841: PUSH
13842: LD_INT 84
13844: ST_TO_ADDR
// tech_Crane := 85 ;
13845: LD_ADDR_EXP 57
13849: PUSH
13850: LD_INT 85
13852: ST_TO_ADDR
// tech_Bulldozer := 86 ;
13853: LD_ADDR_EXP 58
13857: PUSH
13858: LD_INT 86
13860: ST_TO_ADDR
// tech_Hovercraft := 87 ;
13861: LD_ADDR_EXP 59
13865: PUSH
13866: LD_INT 87
13868: ST_TO_ADDR
// end ;
13869: LD_VAR 0 1
13873: RET
// every 1 do
13874: GO 13876
13876: DISABLE
// InitGlobalVariables ; end_of_file
13877: CALL 13738 0 0
13881: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
13882: LD_INT 0
13884: PPUSH
13885: PPUSH
13886: PPUSH
13887: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
13888: LD_VAR 0 1
13892: PPUSH
13893: CALL_OW 264
13897: PUSH
13898: LD_EXP 48
13902: EQUAL
13903: IFFALSE 13975
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
13905: LD_INT 68
13907: PPUSH
13908: LD_VAR 0 1
13912: PPUSH
13913: CALL_OW 255
13917: PPUSH
13918: CALL_OW 321
13922: PUSH
13923: LD_INT 2
13925: EQUAL
13926: IFFALSE 13938
// eff := 70 else
13928: LD_ADDR_VAR 0 4
13932: PUSH
13933: LD_INT 70
13935: ST_TO_ADDR
13936: GO 13946
// eff := 30 ;
13938: LD_ADDR_VAR 0 4
13942: PUSH
13943: LD_INT 30
13945: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
13946: LD_VAR 0 1
13950: PPUSH
13951: CALL_OW 250
13955: PPUSH
13956: LD_VAR 0 1
13960: PPUSH
13961: CALL_OW 251
13965: PPUSH
13966: LD_VAR 0 4
13970: PPUSH
13971: CALL_OW 495
// end ; end ;
13975: LD_VAR 0 2
13979: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
13980: LD_INT 0
13982: PPUSH
// end ;
13983: LD_VAR 0 4
13987: RET
// export function SOS_Command ( cmd ) ; begin
13988: LD_INT 0
13990: PPUSH
// end ;
13991: LD_VAR 0 2
13995: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
13996: LD_INT 0
13998: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
13999: LD_VAR 0 1
14003: PUSH
14004: LD_INT 250
14006: EQUAL
14007: PUSH
14008: LD_VAR 0 2
14012: PPUSH
14013: CALL_OW 264
14017: PUSH
14018: LD_EXP 51
14022: EQUAL
14023: AND
14024: IFFALSE 14045
// MinerPlaceMine ( unit , x , y ) ;
14026: LD_VAR 0 2
14030: PPUSH
14031: LD_VAR 0 4
14035: PPUSH
14036: LD_VAR 0 5
14040: PPUSH
14041: CALL 16386 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
14045: LD_VAR 0 1
14049: PUSH
14050: LD_INT 251
14052: EQUAL
14053: PUSH
14054: LD_VAR 0 2
14058: PPUSH
14059: CALL_OW 264
14063: PUSH
14064: LD_EXP 51
14068: EQUAL
14069: AND
14070: IFFALSE 14091
// MinerDetonateMine ( unit , x , y ) ;
14072: LD_VAR 0 2
14076: PPUSH
14077: LD_VAR 0 4
14081: PPUSH
14082: LD_VAR 0 5
14086: PPUSH
14087: CALL 16663 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
14091: LD_VAR 0 1
14095: PUSH
14096: LD_INT 252
14098: EQUAL
14099: PUSH
14100: LD_VAR 0 2
14104: PPUSH
14105: CALL_OW 264
14109: PUSH
14110: LD_EXP 51
14114: EQUAL
14115: AND
14116: IFFALSE 14137
// MinerCreateMinefield ( unit , x , y ) ;
14118: LD_VAR 0 2
14122: PPUSH
14123: LD_VAR 0 4
14127: PPUSH
14128: LD_VAR 0 5
14132: PPUSH
14133: CALL 17080 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
14137: LD_VAR 0 1
14141: PUSH
14142: LD_INT 253
14144: EQUAL
14145: PUSH
14146: LD_VAR 0 2
14150: PPUSH
14151: CALL_OW 257
14155: PUSH
14156: LD_INT 5
14158: EQUAL
14159: AND
14160: IFFALSE 14181
// ComBinocular ( unit , x , y ) ;
14162: LD_VAR 0 2
14166: PPUSH
14167: LD_VAR 0 4
14171: PPUSH
14172: LD_VAR 0 5
14176: PPUSH
14177: CALL 17451 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
14181: LD_VAR 0 1
14185: PUSH
14186: LD_INT 254
14188: EQUAL
14189: PUSH
14190: LD_VAR 0 2
14194: PPUSH
14195: CALL_OW 264
14199: PUSH
14200: LD_EXP 46
14204: EQUAL
14205: AND
14206: PUSH
14207: LD_VAR 0 3
14211: PPUSH
14212: CALL_OW 263
14216: PUSH
14217: LD_INT 3
14219: EQUAL
14220: AND
14221: IFFALSE 14237
// HackDestroyVehicle ( unit , selectedUnit ) ;
14223: LD_VAR 0 2
14227: PPUSH
14228: LD_VAR 0 3
14232: PPUSH
14233: CALL 15746 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
14237: LD_VAR 0 1
14241: PUSH
14242: LD_INT 255
14244: EQUAL
14245: PUSH
14246: LD_VAR 0 2
14250: PPUSH
14251: CALL_OW 264
14255: PUSH
14256: LD_INT 14
14258: PUSH
14259: LD_INT 53
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: IN
14266: AND
14267: PUSH
14268: LD_VAR 0 4
14272: PPUSH
14273: LD_VAR 0 5
14277: PPUSH
14278: CALL_OW 488
14282: AND
14283: IFFALSE 14307
// CutTreeXYR ( unit , x , y , 12 ) ;
14285: LD_VAR 0 2
14289: PPUSH
14290: LD_VAR 0 4
14294: PPUSH
14295: LD_VAR 0 5
14299: PPUSH
14300: LD_INT 12
14302: PPUSH
14303: CALL 14312 0 4
// end ;
14307: LD_VAR 0 6
14311: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
14312: LD_INT 0
14314: PPUSH
14315: PPUSH
14316: PPUSH
14317: PPUSH
14318: PPUSH
14319: PPUSH
14320: PPUSH
14321: PPUSH
14322: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
14323: LD_VAR 0 1
14327: NOT
14328: PUSH
14329: LD_VAR 0 2
14333: PPUSH
14334: LD_VAR 0 3
14338: PPUSH
14339: CALL_OW 488
14343: NOT
14344: OR
14345: PUSH
14346: LD_VAR 0 4
14350: NOT
14351: OR
14352: IFFALSE 14356
// exit ;
14354: GO 14696
// list := [ ] ;
14356: LD_ADDR_VAR 0 13
14360: PUSH
14361: EMPTY
14362: ST_TO_ADDR
// if x - r < 0 then
14363: LD_VAR 0 2
14367: PUSH
14368: LD_VAR 0 4
14372: MINUS
14373: PUSH
14374: LD_INT 0
14376: LESS
14377: IFFALSE 14389
// min_x := 0 else
14379: LD_ADDR_VAR 0 7
14383: PUSH
14384: LD_INT 0
14386: ST_TO_ADDR
14387: GO 14405
// min_x := x - r ;
14389: LD_ADDR_VAR 0 7
14393: PUSH
14394: LD_VAR 0 2
14398: PUSH
14399: LD_VAR 0 4
14403: MINUS
14404: ST_TO_ADDR
// if y - r < 0 then
14405: LD_VAR 0 3
14409: PUSH
14410: LD_VAR 0 4
14414: MINUS
14415: PUSH
14416: LD_INT 0
14418: LESS
14419: IFFALSE 14431
// min_y := 0 else
14421: LD_ADDR_VAR 0 8
14425: PUSH
14426: LD_INT 0
14428: ST_TO_ADDR
14429: GO 14447
// min_y := y - r ;
14431: LD_ADDR_VAR 0 8
14435: PUSH
14436: LD_VAR 0 3
14440: PUSH
14441: LD_VAR 0 4
14445: MINUS
14446: ST_TO_ADDR
// max_x := x + r ;
14447: LD_ADDR_VAR 0 9
14451: PUSH
14452: LD_VAR 0 2
14456: PUSH
14457: LD_VAR 0 4
14461: PLUS
14462: ST_TO_ADDR
// max_y := y + r ;
14463: LD_ADDR_VAR 0 10
14467: PUSH
14468: LD_VAR 0 3
14472: PUSH
14473: LD_VAR 0 4
14477: PLUS
14478: ST_TO_ADDR
// for _x = min_x to max_x do
14479: LD_ADDR_VAR 0 11
14483: PUSH
14484: DOUBLE
14485: LD_VAR 0 7
14489: DEC
14490: ST_TO_ADDR
14491: LD_VAR 0 9
14495: PUSH
14496: FOR_TO
14497: IFFALSE 14614
// for _y = min_y to max_y do
14499: LD_ADDR_VAR 0 12
14503: PUSH
14504: DOUBLE
14505: LD_VAR 0 8
14509: DEC
14510: ST_TO_ADDR
14511: LD_VAR 0 10
14515: PUSH
14516: FOR_TO
14517: IFFALSE 14610
// begin if not ValidHex ( _x , _y ) then
14519: LD_VAR 0 11
14523: PPUSH
14524: LD_VAR 0 12
14528: PPUSH
14529: CALL_OW 488
14533: NOT
14534: IFFALSE 14538
// continue ;
14536: GO 14516
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
14538: LD_VAR 0 11
14542: PPUSH
14543: LD_VAR 0 12
14547: PPUSH
14548: CALL_OW 351
14552: PUSH
14553: LD_VAR 0 11
14557: PPUSH
14558: LD_VAR 0 12
14562: PPUSH
14563: CALL_OW 554
14567: AND
14568: IFFALSE 14608
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
14570: LD_ADDR_VAR 0 13
14574: PUSH
14575: LD_VAR 0 13
14579: PPUSH
14580: LD_VAR 0 13
14584: PUSH
14585: LD_INT 1
14587: PLUS
14588: PPUSH
14589: LD_VAR 0 11
14593: PUSH
14594: LD_VAR 0 12
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: PPUSH
14603: CALL_OW 2
14607: ST_TO_ADDR
// end ;
14608: GO 14516
14610: POP
14611: POP
14612: GO 14496
14614: POP
14615: POP
// if not list then
14616: LD_VAR 0 13
14620: NOT
14621: IFFALSE 14625
// exit ;
14623: GO 14696
// for i in list do
14625: LD_ADDR_VAR 0 6
14629: PUSH
14630: LD_VAR 0 13
14634: PUSH
14635: FOR_IN
14636: IFFALSE 14694
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
14638: LD_VAR 0 1
14642: PPUSH
14643: LD_STRING M
14645: PUSH
14646: LD_VAR 0 6
14650: PUSH
14651: LD_INT 1
14653: ARRAY
14654: PUSH
14655: LD_VAR 0 6
14659: PUSH
14660: LD_INT 2
14662: ARRAY
14663: PUSH
14664: LD_INT 0
14666: PUSH
14667: LD_INT 0
14669: PUSH
14670: LD_INT 0
14672: PUSH
14673: LD_INT 0
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: PUSH
14685: EMPTY
14686: LIST
14687: PPUSH
14688: CALL_OW 447
14692: GO 14635
14694: POP
14695: POP
// end ;
14696: LD_VAR 0 5
14700: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
14701: LD_EXP 60
14705: NOT
14706: IFFALSE 14756
14708: GO 14710
14710: DISABLE
// begin initHack := true ;
14711: LD_ADDR_EXP 60
14715: PUSH
14716: LD_INT 1
14718: ST_TO_ADDR
// hackTanks := [ ] ;
14719: LD_ADDR_EXP 61
14723: PUSH
14724: EMPTY
14725: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
14726: LD_ADDR_EXP 62
14730: PUSH
14731: EMPTY
14732: ST_TO_ADDR
// hackLimit := 3 ;
14733: LD_ADDR_EXP 63
14737: PUSH
14738: LD_INT 3
14740: ST_TO_ADDR
// hackDist := 12 ;
14741: LD_ADDR_EXP 64
14745: PUSH
14746: LD_INT 12
14748: ST_TO_ADDR
// hackCounter := [ ] ;
14749: LD_ADDR_EXP 65
14753: PUSH
14754: EMPTY
14755: ST_TO_ADDR
// end ;
14756: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
14757: LD_EXP 60
14761: PUSH
14762: LD_INT 34
14764: PUSH
14765: LD_EXP 46
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PPUSH
14774: CALL_OW 69
14778: AND
14779: IFFALSE 15034
14781: GO 14783
14783: DISABLE
14784: LD_INT 0
14786: PPUSH
14787: PPUSH
// begin enable ;
14788: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
14789: LD_ADDR_VAR 0 1
14793: PUSH
14794: LD_INT 34
14796: PUSH
14797: LD_EXP 46
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: PPUSH
14806: CALL_OW 69
14810: PUSH
14811: FOR_IN
14812: IFFALSE 15032
// begin if not i in hackTanks then
14814: LD_VAR 0 1
14818: PUSH
14819: LD_EXP 61
14823: IN
14824: NOT
14825: IFFALSE 14908
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
14827: LD_ADDR_EXP 61
14831: PUSH
14832: LD_EXP 61
14836: PPUSH
14837: LD_EXP 61
14841: PUSH
14842: LD_INT 1
14844: PLUS
14845: PPUSH
14846: LD_VAR 0 1
14850: PPUSH
14851: CALL_OW 1
14855: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
14856: LD_ADDR_EXP 62
14860: PUSH
14861: LD_EXP 62
14865: PPUSH
14866: LD_EXP 62
14870: PUSH
14871: LD_INT 1
14873: PLUS
14874: PPUSH
14875: EMPTY
14876: PPUSH
14877: CALL_OW 1
14881: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
14882: LD_ADDR_EXP 65
14886: PUSH
14887: LD_EXP 65
14891: PPUSH
14892: LD_EXP 65
14896: PUSH
14897: LD_INT 1
14899: PLUS
14900: PPUSH
14901: EMPTY
14902: PPUSH
14903: CALL_OW 1
14907: ST_TO_ADDR
// end ; if not IsOk ( i ) then
14908: LD_VAR 0 1
14912: PPUSH
14913: CALL_OW 302
14917: NOT
14918: IFFALSE 14931
// begin HackUnlinkAll ( i ) ;
14920: LD_VAR 0 1
14924: PPUSH
14925: CALL 15037 0 1
// continue ;
14929: GO 14811
// end ; HackCheckCapturedStatus ( i ) ;
14931: LD_VAR 0 1
14935: PPUSH
14936: CALL 15480 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
14940: LD_ADDR_VAR 0 2
14944: PUSH
14945: LD_INT 81
14947: PUSH
14948: LD_VAR 0 1
14952: PPUSH
14953: CALL_OW 255
14957: PUSH
14958: EMPTY
14959: LIST
14960: LIST
14961: PUSH
14962: LD_INT 33
14964: PUSH
14965: LD_INT 3
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PUSH
14972: LD_INT 91
14974: PUSH
14975: LD_VAR 0 1
14979: PUSH
14980: LD_EXP 64
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: LIST
14989: PUSH
14990: LD_INT 50
14992: PUSH
14993: EMPTY
14994: LIST
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: PPUSH
15002: CALL_OW 69
15006: ST_TO_ADDR
// if not tmp then
15007: LD_VAR 0 2
15011: NOT
15012: IFFALSE 15016
// continue ;
15014: GO 14811
// HackLink ( i , tmp ) ;
15016: LD_VAR 0 1
15020: PPUSH
15021: LD_VAR 0 2
15025: PPUSH
15026: CALL 15173 0 2
// end ;
15030: GO 14811
15032: POP
15033: POP
// end ;
15034: PPOPN 2
15036: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
15037: LD_INT 0
15039: PPUSH
15040: PPUSH
15041: PPUSH
// if not hack in hackTanks then
15042: LD_VAR 0 1
15046: PUSH
15047: LD_EXP 61
15051: IN
15052: NOT
15053: IFFALSE 15057
// exit ;
15055: GO 15168
// index := GetElementIndex ( hackTanks , hack ) ;
15057: LD_ADDR_VAR 0 4
15061: PUSH
15062: LD_EXP 61
15066: PPUSH
15067: LD_VAR 0 1
15071: PPUSH
15072: CALL 35769 0 2
15076: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
15077: LD_EXP 62
15081: PUSH
15082: LD_VAR 0 4
15086: ARRAY
15087: IFFALSE 15168
// begin for i in hackTanksCaptured [ index ] do
15089: LD_ADDR_VAR 0 3
15093: PUSH
15094: LD_EXP 62
15098: PUSH
15099: LD_VAR 0 4
15103: ARRAY
15104: PUSH
15105: FOR_IN
15106: IFFALSE 15132
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
15108: LD_VAR 0 3
15112: PUSH
15113: LD_INT 1
15115: ARRAY
15116: PPUSH
15117: LD_VAR 0 3
15121: PUSH
15122: LD_INT 2
15124: ARRAY
15125: PPUSH
15126: CALL_OW 235
15130: GO 15105
15132: POP
15133: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
15134: LD_ADDR_EXP 62
15138: PUSH
15139: LD_EXP 62
15143: PPUSH
15144: LD_VAR 0 4
15148: PPUSH
15149: EMPTY
15150: PPUSH
15151: CALL_OW 1
15155: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
15156: LD_VAR 0 1
15160: PPUSH
15161: LD_INT 0
15163: PPUSH
15164: CALL_OW 505
// end ; end ;
15168: LD_VAR 0 2
15172: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
15173: LD_INT 0
15175: PPUSH
15176: PPUSH
15177: PPUSH
// if not hack in hackTanks or not vehicles then
15178: LD_VAR 0 1
15182: PUSH
15183: LD_EXP 61
15187: IN
15188: NOT
15189: PUSH
15190: LD_VAR 0 2
15194: NOT
15195: OR
15196: IFFALSE 15200
// exit ;
15198: GO 15475
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
15200: LD_ADDR_VAR 0 2
15204: PUSH
15205: LD_VAR 0 1
15209: PPUSH
15210: LD_VAR 0 2
15214: PPUSH
15215: LD_INT 1
15217: PPUSH
15218: LD_INT 1
15220: PPUSH
15221: CALL 36419 0 4
15225: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
15226: LD_ADDR_VAR 0 5
15230: PUSH
15231: LD_EXP 61
15235: PPUSH
15236: LD_VAR 0 1
15240: PPUSH
15241: CALL 35769 0 2
15245: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
15246: LD_EXP 62
15250: PUSH
15251: LD_VAR 0 5
15255: ARRAY
15256: PUSH
15257: LD_EXP 63
15261: LESS
15262: IFFALSE 15451
// begin for i := 1 to vehicles do
15264: LD_ADDR_VAR 0 4
15268: PUSH
15269: DOUBLE
15270: LD_INT 1
15272: DEC
15273: ST_TO_ADDR
15274: LD_VAR 0 2
15278: PUSH
15279: FOR_TO
15280: IFFALSE 15449
// begin if hackTanksCaptured [ index ] = hackLimit then
15282: LD_EXP 62
15286: PUSH
15287: LD_VAR 0 5
15291: ARRAY
15292: PUSH
15293: LD_EXP 63
15297: EQUAL
15298: IFFALSE 15302
// break ;
15300: GO 15449
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
15302: LD_ADDR_EXP 65
15306: PUSH
15307: LD_EXP 65
15311: PPUSH
15312: LD_VAR 0 5
15316: PPUSH
15317: LD_EXP 65
15321: PUSH
15322: LD_VAR 0 5
15326: ARRAY
15327: PUSH
15328: LD_INT 1
15330: PLUS
15331: PPUSH
15332: CALL_OW 1
15336: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
15337: LD_ADDR_EXP 62
15341: PUSH
15342: LD_EXP 62
15346: PPUSH
15347: LD_VAR 0 5
15351: PUSH
15352: LD_EXP 62
15356: PUSH
15357: LD_VAR 0 5
15361: ARRAY
15362: PUSH
15363: LD_INT 1
15365: PLUS
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PPUSH
15371: LD_VAR 0 2
15375: PUSH
15376: LD_VAR 0 4
15380: ARRAY
15381: PUSH
15382: LD_VAR 0 2
15386: PUSH
15387: LD_VAR 0 4
15391: ARRAY
15392: PPUSH
15393: CALL_OW 255
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: PPUSH
15402: CALL 35984 0 3
15406: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
15407: LD_VAR 0 2
15411: PUSH
15412: LD_VAR 0 4
15416: ARRAY
15417: PPUSH
15418: LD_VAR 0 1
15422: PPUSH
15423: CALL_OW 255
15427: PPUSH
15428: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
15432: LD_VAR 0 2
15436: PUSH
15437: LD_VAR 0 4
15441: ARRAY
15442: PPUSH
15443: CALL_OW 141
// end ;
15447: GO 15279
15449: POP
15450: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
15451: LD_VAR 0 1
15455: PPUSH
15456: LD_EXP 62
15460: PUSH
15461: LD_VAR 0 5
15465: ARRAY
15466: PUSH
15467: LD_INT 0
15469: PLUS
15470: PPUSH
15471: CALL_OW 505
// end ;
15475: LD_VAR 0 3
15479: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
15480: LD_INT 0
15482: PPUSH
15483: PPUSH
15484: PPUSH
15485: PPUSH
// if not hack in hackTanks then
15486: LD_VAR 0 1
15490: PUSH
15491: LD_EXP 61
15495: IN
15496: NOT
15497: IFFALSE 15501
// exit ;
15499: GO 15741
// index := GetElementIndex ( hackTanks , hack ) ;
15501: LD_ADDR_VAR 0 4
15505: PUSH
15506: LD_EXP 61
15510: PPUSH
15511: LD_VAR 0 1
15515: PPUSH
15516: CALL 35769 0 2
15520: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
15521: LD_ADDR_VAR 0 3
15525: PUSH
15526: DOUBLE
15527: LD_EXP 62
15531: PUSH
15532: LD_VAR 0 4
15536: ARRAY
15537: INC
15538: ST_TO_ADDR
15539: LD_INT 1
15541: PUSH
15542: FOR_DOWNTO
15543: IFFALSE 15715
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
15545: LD_ADDR_VAR 0 5
15549: PUSH
15550: LD_EXP 62
15554: PUSH
15555: LD_VAR 0 4
15559: ARRAY
15560: PUSH
15561: LD_VAR 0 3
15565: ARRAY
15566: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
15567: LD_VAR 0 5
15571: PUSH
15572: LD_INT 1
15574: ARRAY
15575: PPUSH
15576: CALL_OW 302
15580: NOT
15581: PUSH
15582: LD_VAR 0 5
15586: PUSH
15587: LD_INT 1
15589: ARRAY
15590: PPUSH
15591: CALL_OW 255
15595: PUSH
15596: LD_VAR 0 1
15600: PPUSH
15601: CALL_OW 255
15605: NONEQUAL
15606: OR
15607: IFFALSE 15713
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
15609: LD_VAR 0 5
15613: PUSH
15614: LD_INT 1
15616: ARRAY
15617: PPUSH
15618: CALL_OW 305
15622: PUSH
15623: LD_VAR 0 5
15627: PUSH
15628: LD_INT 1
15630: ARRAY
15631: PPUSH
15632: CALL_OW 255
15636: PUSH
15637: LD_VAR 0 1
15641: PPUSH
15642: CALL_OW 255
15646: EQUAL
15647: AND
15648: IFFALSE 15672
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
15650: LD_VAR 0 5
15654: PUSH
15655: LD_INT 1
15657: ARRAY
15658: PPUSH
15659: LD_VAR 0 5
15663: PUSH
15664: LD_INT 2
15666: ARRAY
15667: PPUSH
15668: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
15672: LD_ADDR_EXP 62
15676: PUSH
15677: LD_EXP 62
15681: PPUSH
15682: LD_VAR 0 4
15686: PPUSH
15687: LD_EXP 62
15691: PUSH
15692: LD_VAR 0 4
15696: ARRAY
15697: PPUSH
15698: LD_VAR 0 3
15702: PPUSH
15703: CALL_OW 3
15707: PPUSH
15708: CALL_OW 1
15712: ST_TO_ADDR
// end ; end ;
15713: GO 15542
15715: POP
15716: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
15717: LD_VAR 0 1
15721: PPUSH
15722: LD_EXP 62
15726: PUSH
15727: LD_VAR 0 4
15731: ARRAY
15732: PUSH
15733: LD_INT 0
15735: PLUS
15736: PPUSH
15737: CALL_OW 505
// end ;
15741: LD_VAR 0 2
15745: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
15746: LD_INT 0
15748: PPUSH
15749: PPUSH
15750: PPUSH
15751: PPUSH
// if not hack in hackTanks then
15752: LD_VAR 0 1
15756: PUSH
15757: LD_EXP 61
15761: IN
15762: NOT
15763: IFFALSE 15767
// exit ;
15765: GO 15852
// index := GetElementIndex ( hackTanks , hack ) ;
15767: LD_ADDR_VAR 0 5
15771: PUSH
15772: LD_EXP 61
15776: PPUSH
15777: LD_VAR 0 1
15781: PPUSH
15782: CALL 35769 0 2
15786: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
15787: LD_ADDR_VAR 0 4
15791: PUSH
15792: DOUBLE
15793: LD_INT 1
15795: DEC
15796: ST_TO_ADDR
15797: LD_EXP 62
15801: PUSH
15802: LD_VAR 0 5
15806: ARRAY
15807: PUSH
15808: FOR_TO
15809: IFFALSE 15850
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
15811: LD_EXP 62
15815: PUSH
15816: LD_VAR 0 5
15820: ARRAY
15821: PUSH
15822: LD_VAR 0 4
15826: ARRAY
15827: PUSH
15828: LD_INT 1
15830: ARRAY
15831: PUSH
15832: LD_VAR 0 2
15836: EQUAL
15837: IFFALSE 15848
// KillUnit ( vehicle ) ;
15839: LD_VAR 0 2
15843: PPUSH
15844: CALL_OW 66
15848: GO 15808
15850: POP
15851: POP
// end ;
15852: LD_VAR 0 3
15856: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
15857: LD_EXP 66
15861: NOT
15862: IFFALSE 15897
15864: GO 15866
15866: DISABLE
// begin initMiner := true ;
15867: LD_ADDR_EXP 66
15871: PUSH
15872: LD_INT 1
15874: ST_TO_ADDR
// minersList := [ ] ;
15875: LD_ADDR_EXP 67
15879: PUSH
15880: EMPTY
15881: ST_TO_ADDR
// minerMinesList := [ ] ;
15882: LD_ADDR_EXP 68
15886: PUSH
15887: EMPTY
15888: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
15889: LD_ADDR_EXP 69
15893: PUSH
15894: LD_INT 5
15896: ST_TO_ADDR
// end ;
15897: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
15898: LD_EXP 66
15902: PUSH
15903: LD_INT 34
15905: PUSH
15906: LD_EXP 51
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PPUSH
15915: CALL_OW 69
15919: AND
15920: IFFALSE 16383
15922: GO 15924
15924: DISABLE
15925: LD_INT 0
15927: PPUSH
15928: PPUSH
15929: PPUSH
15930: PPUSH
// begin enable ;
15931: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
15932: LD_ADDR_VAR 0 1
15936: PUSH
15937: LD_INT 34
15939: PUSH
15940: LD_EXP 51
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: PPUSH
15949: CALL_OW 69
15953: PUSH
15954: FOR_IN
15955: IFFALSE 16027
// begin if not i in minersList then
15957: LD_VAR 0 1
15961: PUSH
15962: LD_EXP 67
15966: IN
15967: NOT
15968: IFFALSE 16025
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
15970: LD_ADDR_EXP 67
15974: PUSH
15975: LD_EXP 67
15979: PPUSH
15980: LD_EXP 67
15984: PUSH
15985: LD_INT 1
15987: PLUS
15988: PPUSH
15989: LD_VAR 0 1
15993: PPUSH
15994: CALL_OW 1
15998: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
15999: LD_ADDR_EXP 68
16003: PUSH
16004: LD_EXP 68
16008: PPUSH
16009: LD_EXP 68
16013: PUSH
16014: LD_INT 1
16016: PLUS
16017: PPUSH
16018: EMPTY
16019: PPUSH
16020: CALL_OW 1
16024: ST_TO_ADDR
// end end ;
16025: GO 15954
16027: POP
16028: POP
// for i := minerMinesList downto 1 do
16029: LD_ADDR_VAR 0 1
16033: PUSH
16034: DOUBLE
16035: LD_EXP 68
16039: INC
16040: ST_TO_ADDR
16041: LD_INT 1
16043: PUSH
16044: FOR_DOWNTO
16045: IFFALSE 16381
// begin if IsLive ( minersList [ i ] ) then
16047: LD_EXP 67
16051: PUSH
16052: LD_VAR 0 1
16056: ARRAY
16057: PPUSH
16058: CALL_OW 300
16062: IFFALSE 16090
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
16064: LD_EXP 67
16068: PUSH
16069: LD_VAR 0 1
16073: ARRAY
16074: PPUSH
16075: LD_EXP 68
16079: PUSH
16080: LD_VAR 0 1
16084: ARRAY
16085: PPUSH
16086: CALL_OW 505
// if not minerMinesList [ i ] then
16090: LD_EXP 68
16094: PUSH
16095: LD_VAR 0 1
16099: ARRAY
16100: NOT
16101: IFFALSE 16105
// continue ;
16103: GO 16044
// for j := minerMinesList [ i ] downto 1 do
16105: LD_ADDR_VAR 0 2
16109: PUSH
16110: DOUBLE
16111: LD_EXP 68
16115: PUSH
16116: LD_VAR 0 1
16120: ARRAY
16121: INC
16122: ST_TO_ADDR
16123: LD_INT 1
16125: PUSH
16126: FOR_DOWNTO
16127: IFFALSE 16377
// begin side := GetSide ( minersList [ i ] ) ;
16129: LD_ADDR_VAR 0 3
16133: PUSH
16134: LD_EXP 67
16138: PUSH
16139: LD_VAR 0 1
16143: ARRAY
16144: PPUSH
16145: CALL_OW 255
16149: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
16150: LD_ADDR_VAR 0 4
16154: PUSH
16155: LD_EXP 68
16159: PUSH
16160: LD_VAR 0 1
16164: ARRAY
16165: PUSH
16166: LD_VAR 0 2
16170: ARRAY
16171: PUSH
16172: LD_INT 1
16174: ARRAY
16175: PPUSH
16176: LD_EXP 68
16180: PUSH
16181: LD_VAR 0 1
16185: ARRAY
16186: PUSH
16187: LD_VAR 0 2
16191: ARRAY
16192: PUSH
16193: LD_INT 2
16195: ARRAY
16196: PPUSH
16197: CALL_OW 428
16201: ST_TO_ADDR
// if not tmp then
16202: LD_VAR 0 4
16206: NOT
16207: IFFALSE 16211
// continue ;
16209: GO 16126
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
16211: LD_VAR 0 4
16215: PUSH
16216: LD_INT 81
16218: PUSH
16219: LD_VAR 0 3
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: PPUSH
16228: CALL_OW 69
16232: IN
16233: PUSH
16234: LD_EXP 68
16238: PUSH
16239: LD_VAR 0 1
16243: ARRAY
16244: PUSH
16245: LD_VAR 0 2
16249: ARRAY
16250: PUSH
16251: LD_INT 1
16253: ARRAY
16254: PPUSH
16255: LD_EXP 68
16259: PUSH
16260: LD_VAR 0 1
16264: ARRAY
16265: PUSH
16266: LD_VAR 0 2
16270: ARRAY
16271: PUSH
16272: LD_INT 2
16274: ARRAY
16275: PPUSH
16276: CALL_OW 458
16280: AND
16281: IFFALSE 16375
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
16283: LD_EXP 68
16287: PUSH
16288: LD_VAR 0 1
16292: ARRAY
16293: PUSH
16294: LD_VAR 0 2
16298: ARRAY
16299: PUSH
16300: LD_INT 1
16302: ARRAY
16303: PPUSH
16304: LD_EXP 68
16308: PUSH
16309: LD_VAR 0 1
16313: ARRAY
16314: PUSH
16315: LD_VAR 0 2
16319: ARRAY
16320: PUSH
16321: LD_INT 2
16323: ARRAY
16324: PPUSH
16325: LD_VAR 0 3
16329: PPUSH
16330: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
16334: LD_ADDR_EXP 68
16338: PUSH
16339: LD_EXP 68
16343: PPUSH
16344: LD_VAR 0 1
16348: PPUSH
16349: LD_EXP 68
16353: PUSH
16354: LD_VAR 0 1
16358: ARRAY
16359: PPUSH
16360: LD_VAR 0 2
16364: PPUSH
16365: CALL_OW 3
16369: PPUSH
16370: CALL_OW 1
16374: ST_TO_ADDR
// end ; end ;
16375: GO 16126
16377: POP
16378: POP
// end ;
16379: GO 16044
16381: POP
16382: POP
// end ;
16383: PPOPN 4
16385: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
16386: LD_INT 0
16388: PPUSH
16389: PPUSH
// result := false ;
16390: LD_ADDR_VAR 0 4
16394: PUSH
16395: LD_INT 0
16397: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
16398: LD_VAR 0 1
16402: PPUSH
16403: CALL_OW 264
16407: PUSH
16408: LD_EXP 51
16412: EQUAL
16413: NOT
16414: IFFALSE 16418
// exit ;
16416: GO 16658
// index := GetElementIndex ( minersList , unit ) ;
16418: LD_ADDR_VAR 0 5
16422: PUSH
16423: LD_EXP 67
16427: PPUSH
16428: LD_VAR 0 1
16432: PPUSH
16433: CALL 35769 0 2
16437: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
16438: LD_EXP 68
16442: PUSH
16443: LD_VAR 0 5
16447: ARRAY
16448: PUSH
16449: LD_EXP 69
16453: GREATEREQUAL
16454: IFFALSE 16458
// exit ;
16456: GO 16658
// ComMoveXY ( unit , x , y ) ;
16458: LD_VAR 0 1
16462: PPUSH
16463: LD_VAR 0 2
16467: PPUSH
16468: LD_VAR 0 3
16472: PPUSH
16473: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16477: LD_INT 35
16479: PPUSH
16480: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
16484: LD_VAR 0 1
16488: PPUSH
16489: LD_VAR 0 2
16493: PPUSH
16494: LD_VAR 0 3
16498: PPUSH
16499: CALL 65833 0 3
16503: NOT
16504: PUSH
16505: LD_VAR 0 1
16509: PPUSH
16510: CALL_OW 314
16514: AND
16515: IFFALSE 16519
// exit ;
16517: GO 16658
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
16519: LD_VAR 0 2
16523: PPUSH
16524: LD_VAR 0 3
16528: PPUSH
16529: CALL_OW 428
16533: PUSH
16534: LD_VAR 0 1
16538: EQUAL
16539: PUSH
16540: LD_VAR 0 1
16544: PPUSH
16545: CALL_OW 314
16549: NOT
16550: AND
16551: IFFALSE 16477
// PlaySoundXY ( x , y , PlantMine ) ;
16553: LD_VAR 0 2
16557: PPUSH
16558: LD_VAR 0 3
16562: PPUSH
16563: LD_STRING PlantMine
16565: PPUSH
16566: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
16570: LD_VAR 0 2
16574: PPUSH
16575: LD_VAR 0 3
16579: PPUSH
16580: LD_VAR 0 1
16584: PPUSH
16585: CALL_OW 255
16589: PPUSH
16590: LD_INT 0
16592: PPUSH
16593: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
16597: LD_ADDR_EXP 68
16601: PUSH
16602: LD_EXP 68
16606: PPUSH
16607: LD_VAR 0 5
16611: PUSH
16612: LD_EXP 68
16616: PUSH
16617: LD_VAR 0 5
16621: ARRAY
16622: PUSH
16623: LD_INT 1
16625: PLUS
16626: PUSH
16627: EMPTY
16628: LIST
16629: LIST
16630: PPUSH
16631: LD_VAR 0 2
16635: PUSH
16636: LD_VAR 0 3
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: PPUSH
16645: CALL 35984 0 3
16649: ST_TO_ADDR
// result := true ;
16650: LD_ADDR_VAR 0 4
16654: PUSH
16655: LD_INT 1
16657: ST_TO_ADDR
// end ;
16658: LD_VAR 0 4
16662: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
16663: LD_INT 0
16665: PPUSH
16666: PPUSH
16667: PPUSH
// if not unit in minersList then
16668: LD_VAR 0 1
16672: PUSH
16673: LD_EXP 67
16677: IN
16678: NOT
16679: IFFALSE 16683
// exit ;
16681: GO 17075
// index := GetElementIndex ( minersList , unit ) ;
16683: LD_ADDR_VAR 0 6
16687: PUSH
16688: LD_EXP 67
16692: PPUSH
16693: LD_VAR 0 1
16697: PPUSH
16698: CALL 35769 0 2
16702: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
16703: LD_ADDR_VAR 0 5
16707: PUSH
16708: DOUBLE
16709: LD_EXP 68
16713: PUSH
16714: LD_VAR 0 6
16718: ARRAY
16719: INC
16720: ST_TO_ADDR
16721: LD_INT 1
16723: PUSH
16724: FOR_DOWNTO
16725: IFFALSE 16886
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
16727: LD_EXP 68
16731: PUSH
16732: LD_VAR 0 6
16736: ARRAY
16737: PUSH
16738: LD_VAR 0 5
16742: ARRAY
16743: PUSH
16744: LD_INT 1
16746: ARRAY
16747: PUSH
16748: LD_VAR 0 2
16752: EQUAL
16753: PUSH
16754: LD_EXP 68
16758: PUSH
16759: LD_VAR 0 6
16763: ARRAY
16764: PUSH
16765: LD_VAR 0 5
16769: ARRAY
16770: PUSH
16771: LD_INT 2
16773: ARRAY
16774: PUSH
16775: LD_VAR 0 3
16779: EQUAL
16780: AND
16781: IFFALSE 16884
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
16783: LD_EXP 68
16787: PUSH
16788: LD_VAR 0 6
16792: ARRAY
16793: PUSH
16794: LD_VAR 0 5
16798: ARRAY
16799: PUSH
16800: LD_INT 1
16802: ARRAY
16803: PPUSH
16804: LD_EXP 68
16808: PUSH
16809: LD_VAR 0 6
16813: ARRAY
16814: PUSH
16815: LD_VAR 0 5
16819: ARRAY
16820: PUSH
16821: LD_INT 2
16823: ARRAY
16824: PPUSH
16825: LD_VAR 0 1
16829: PPUSH
16830: CALL_OW 255
16834: PPUSH
16835: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
16839: LD_ADDR_EXP 68
16843: PUSH
16844: LD_EXP 68
16848: PPUSH
16849: LD_VAR 0 6
16853: PPUSH
16854: LD_EXP 68
16858: PUSH
16859: LD_VAR 0 6
16863: ARRAY
16864: PPUSH
16865: LD_VAR 0 5
16869: PPUSH
16870: CALL_OW 3
16874: PPUSH
16875: CALL_OW 1
16879: ST_TO_ADDR
// exit ;
16880: POP
16881: POP
16882: GO 17075
// end ; end ;
16884: GO 16724
16886: POP
16887: POP
// for i := minerMinesList [ index ] downto 1 do
16888: LD_ADDR_VAR 0 5
16892: PUSH
16893: DOUBLE
16894: LD_EXP 68
16898: PUSH
16899: LD_VAR 0 6
16903: ARRAY
16904: INC
16905: ST_TO_ADDR
16906: LD_INT 1
16908: PUSH
16909: FOR_DOWNTO
16910: IFFALSE 17073
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
16912: LD_EXP 68
16916: PUSH
16917: LD_VAR 0 6
16921: ARRAY
16922: PUSH
16923: LD_VAR 0 5
16927: ARRAY
16928: PUSH
16929: LD_INT 1
16931: ARRAY
16932: PPUSH
16933: LD_EXP 68
16937: PUSH
16938: LD_VAR 0 6
16942: ARRAY
16943: PUSH
16944: LD_VAR 0 5
16948: ARRAY
16949: PUSH
16950: LD_INT 2
16952: ARRAY
16953: PPUSH
16954: LD_VAR 0 2
16958: PPUSH
16959: LD_VAR 0 3
16963: PPUSH
16964: CALL_OW 298
16968: PUSH
16969: LD_INT 6
16971: LESS
16972: IFFALSE 17071
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
16974: LD_EXP 68
16978: PUSH
16979: LD_VAR 0 6
16983: ARRAY
16984: PUSH
16985: LD_VAR 0 5
16989: ARRAY
16990: PUSH
16991: LD_INT 1
16993: ARRAY
16994: PPUSH
16995: LD_EXP 68
16999: PUSH
17000: LD_VAR 0 6
17004: ARRAY
17005: PUSH
17006: LD_VAR 0 5
17010: ARRAY
17011: PUSH
17012: LD_INT 2
17014: ARRAY
17015: PPUSH
17016: LD_VAR 0 1
17020: PPUSH
17021: CALL_OW 255
17025: PPUSH
17026: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17030: LD_ADDR_EXP 68
17034: PUSH
17035: LD_EXP 68
17039: PPUSH
17040: LD_VAR 0 6
17044: PPUSH
17045: LD_EXP 68
17049: PUSH
17050: LD_VAR 0 6
17054: ARRAY
17055: PPUSH
17056: LD_VAR 0 5
17060: PPUSH
17061: CALL_OW 3
17065: PPUSH
17066: CALL_OW 1
17070: ST_TO_ADDR
// end ; end ;
17071: GO 16909
17073: POP
17074: POP
// end ;
17075: LD_VAR 0 4
17079: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
17080: LD_INT 0
17082: PPUSH
17083: PPUSH
17084: PPUSH
17085: PPUSH
17086: PPUSH
17087: PPUSH
17088: PPUSH
17089: PPUSH
17090: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
17091: LD_VAR 0 1
17095: PPUSH
17096: CALL_OW 264
17100: PUSH
17101: LD_EXP 51
17105: EQUAL
17106: NOT
17107: PUSH
17108: LD_VAR 0 1
17112: PUSH
17113: LD_EXP 67
17117: IN
17118: NOT
17119: OR
17120: IFFALSE 17124
// exit ;
17122: GO 17446
// index := GetElementIndex ( minersList , unit ) ;
17124: LD_ADDR_VAR 0 6
17128: PUSH
17129: LD_EXP 67
17133: PPUSH
17134: LD_VAR 0 1
17138: PPUSH
17139: CALL 35769 0 2
17143: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
17144: LD_ADDR_VAR 0 8
17148: PUSH
17149: LD_EXP 69
17153: PUSH
17154: LD_EXP 68
17158: PUSH
17159: LD_VAR 0 6
17163: ARRAY
17164: MINUS
17165: ST_TO_ADDR
// if not minesFreeAmount then
17166: LD_VAR 0 8
17170: NOT
17171: IFFALSE 17175
// exit ;
17173: GO 17446
// tmp := [ ] ;
17175: LD_ADDR_VAR 0 7
17179: PUSH
17180: EMPTY
17181: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
17182: LD_ADDR_VAR 0 5
17186: PUSH
17187: DOUBLE
17188: LD_INT 1
17190: DEC
17191: ST_TO_ADDR
17192: LD_VAR 0 8
17196: PUSH
17197: FOR_TO
17198: IFFALSE 17393
// begin _d := rand ( 0 , 5 ) ;
17200: LD_ADDR_VAR 0 11
17204: PUSH
17205: LD_INT 0
17207: PPUSH
17208: LD_INT 5
17210: PPUSH
17211: CALL_OW 12
17215: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
17216: LD_ADDR_VAR 0 12
17220: PUSH
17221: LD_INT 2
17223: PPUSH
17224: LD_INT 6
17226: PPUSH
17227: CALL_OW 12
17231: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
17232: LD_ADDR_VAR 0 9
17236: PUSH
17237: LD_VAR 0 2
17241: PPUSH
17242: LD_VAR 0 11
17246: PPUSH
17247: LD_VAR 0 12
17251: PPUSH
17252: CALL_OW 272
17256: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
17257: LD_ADDR_VAR 0 10
17261: PUSH
17262: LD_VAR 0 3
17266: PPUSH
17267: LD_VAR 0 11
17271: PPUSH
17272: LD_VAR 0 12
17276: PPUSH
17277: CALL_OW 273
17281: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
17282: LD_VAR 0 9
17286: PPUSH
17287: LD_VAR 0 10
17291: PPUSH
17292: CALL_OW 488
17296: PUSH
17297: LD_VAR 0 9
17301: PUSH
17302: LD_VAR 0 10
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: LD_VAR 0 7
17315: IN
17316: NOT
17317: AND
17318: PUSH
17319: LD_VAR 0 9
17323: PPUSH
17324: LD_VAR 0 10
17328: PPUSH
17329: CALL_OW 458
17333: NOT
17334: AND
17335: IFFALSE 17377
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
17337: LD_ADDR_VAR 0 7
17341: PUSH
17342: LD_VAR 0 7
17346: PPUSH
17347: LD_VAR 0 7
17351: PUSH
17352: LD_INT 1
17354: PLUS
17355: PPUSH
17356: LD_VAR 0 9
17360: PUSH
17361: LD_VAR 0 10
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PPUSH
17370: CALL_OW 1
17374: ST_TO_ADDR
17375: GO 17391
// i := i - 1 ;
17377: LD_ADDR_VAR 0 5
17381: PUSH
17382: LD_VAR 0 5
17386: PUSH
17387: LD_INT 1
17389: MINUS
17390: ST_TO_ADDR
// end ;
17391: GO 17197
17393: POP
17394: POP
// for i in tmp do
17395: LD_ADDR_VAR 0 5
17399: PUSH
17400: LD_VAR 0 7
17404: PUSH
17405: FOR_IN
17406: IFFALSE 17444
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
17408: LD_VAR 0 1
17412: PPUSH
17413: LD_VAR 0 5
17417: PUSH
17418: LD_INT 1
17420: ARRAY
17421: PPUSH
17422: LD_VAR 0 5
17426: PUSH
17427: LD_INT 2
17429: ARRAY
17430: PPUSH
17431: CALL 16386 0 3
17435: NOT
17436: IFFALSE 17442
// exit ;
17438: POP
17439: POP
17440: GO 17446
17442: GO 17405
17444: POP
17445: POP
// end ;
17446: LD_VAR 0 4
17450: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
17451: LD_INT 0
17453: PPUSH
17454: PPUSH
17455: PPUSH
17456: PPUSH
17457: PPUSH
17458: PPUSH
17459: PPUSH
// if not GetClass ( unit ) = class_sniper then
17460: LD_VAR 0 1
17464: PPUSH
17465: CALL_OW 257
17469: PUSH
17470: LD_INT 5
17472: EQUAL
17473: NOT
17474: IFFALSE 17478
// exit ;
17476: GO 17866
// dist := 8 ;
17478: LD_ADDR_VAR 0 5
17482: PUSH
17483: LD_INT 8
17485: ST_TO_ADDR
// viewRange := 12 ;
17486: LD_ADDR_VAR 0 7
17490: PUSH
17491: LD_INT 12
17493: ST_TO_ADDR
// side := GetSide ( unit ) ;
17494: LD_ADDR_VAR 0 6
17498: PUSH
17499: LD_VAR 0 1
17503: PPUSH
17504: CALL_OW 255
17508: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
17509: LD_INT 61
17511: PPUSH
17512: LD_VAR 0 6
17516: PPUSH
17517: CALL_OW 321
17521: PUSH
17522: LD_INT 2
17524: EQUAL
17525: IFFALSE 17535
// viewRange := 16 ;
17527: LD_ADDR_VAR 0 7
17531: PUSH
17532: LD_INT 16
17534: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
17535: LD_VAR 0 1
17539: PPUSH
17540: LD_VAR 0 2
17544: PPUSH
17545: LD_VAR 0 3
17549: PPUSH
17550: CALL_OW 297
17554: PUSH
17555: LD_VAR 0 5
17559: GREATER
17560: IFFALSE 17639
// begin ComMoveXY ( unit , x , y ) ;
17562: LD_VAR 0 1
17566: PPUSH
17567: LD_VAR 0 2
17571: PPUSH
17572: LD_VAR 0 3
17576: PPUSH
17577: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17581: LD_INT 35
17583: PPUSH
17584: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
17588: LD_VAR 0 1
17592: PPUSH
17593: LD_VAR 0 2
17597: PPUSH
17598: LD_VAR 0 3
17602: PPUSH
17603: CALL 65833 0 3
17607: NOT
17608: IFFALSE 17612
// exit ;
17610: GO 17866
// until GetDistUnitXY ( unit , x , y ) < dist ;
17612: LD_VAR 0 1
17616: PPUSH
17617: LD_VAR 0 2
17621: PPUSH
17622: LD_VAR 0 3
17626: PPUSH
17627: CALL_OW 297
17631: PUSH
17632: LD_VAR 0 5
17636: LESS
17637: IFFALSE 17581
// end ; ComTurnXY ( unit , x , y ) ;
17639: LD_VAR 0 1
17643: PPUSH
17644: LD_VAR 0 2
17648: PPUSH
17649: LD_VAR 0 3
17653: PPUSH
17654: CALL_OW 118
// wait ( 5 ) ;
17658: LD_INT 5
17660: PPUSH
17661: CALL_OW 67
// _d := GetDir ( unit ) ;
17665: LD_ADDR_VAR 0 10
17669: PUSH
17670: LD_VAR 0 1
17674: PPUSH
17675: CALL_OW 254
17679: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
17680: LD_ADDR_VAR 0 8
17684: PUSH
17685: LD_VAR 0 1
17689: PPUSH
17690: CALL_OW 250
17694: PPUSH
17695: LD_VAR 0 10
17699: PPUSH
17700: LD_VAR 0 5
17704: PPUSH
17705: CALL_OW 272
17709: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
17710: LD_ADDR_VAR 0 9
17714: PUSH
17715: LD_VAR 0 1
17719: PPUSH
17720: CALL_OW 251
17724: PPUSH
17725: LD_VAR 0 10
17729: PPUSH
17730: LD_VAR 0 5
17734: PPUSH
17735: CALL_OW 273
17739: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17740: LD_VAR 0 8
17744: PPUSH
17745: LD_VAR 0 9
17749: PPUSH
17750: CALL_OW 488
17754: NOT
17755: IFFALSE 17759
// exit ;
17757: GO 17866
// ComAnimCustom ( unit , 1 ) ;
17759: LD_VAR 0 1
17763: PPUSH
17764: LD_INT 1
17766: PPUSH
17767: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
17771: LD_VAR 0 8
17775: PPUSH
17776: LD_VAR 0 9
17780: PPUSH
17781: LD_VAR 0 6
17785: PPUSH
17786: LD_VAR 0 7
17790: PPUSH
17791: CALL_OW 330
// repeat wait ( 1 ) ;
17795: LD_INT 1
17797: PPUSH
17798: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
17802: LD_VAR 0 1
17806: PPUSH
17807: CALL_OW 316
17811: PUSH
17812: LD_VAR 0 1
17816: PPUSH
17817: CALL_OW 314
17821: OR
17822: PUSH
17823: LD_VAR 0 1
17827: PPUSH
17828: CALL_OW 302
17832: NOT
17833: OR
17834: PUSH
17835: LD_VAR 0 1
17839: PPUSH
17840: CALL_OW 301
17844: OR
17845: IFFALSE 17795
// RemoveSeeing ( _x , _y , side ) ;
17847: LD_VAR 0 8
17851: PPUSH
17852: LD_VAR 0 9
17856: PPUSH
17857: LD_VAR 0 6
17861: PPUSH
17862: CALL_OW 331
// end ; end_of_file
17866: LD_VAR 0 4
17870: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
17871: LD_VAR 0 2
17875: PUSH
17876: LD_INT 100
17878: EQUAL
17879: IFFALSE 18828
// begin if not StreamModeActive then
17881: LD_EXP 70
17885: NOT
17886: IFFALSE 17896
// StreamModeActive := true ;
17888: LD_ADDR_EXP 70
17892: PUSH
17893: LD_INT 1
17895: ST_TO_ADDR
// if p3 = 0 then
17896: LD_VAR 0 3
17900: PUSH
17901: LD_INT 0
17903: EQUAL
17904: IFFALSE 17910
// InitStreamMode ;
17906: CALL 18986 0 0
// if p3 = 1 then
17910: LD_VAR 0 3
17914: PUSH
17915: LD_INT 1
17917: EQUAL
17918: IFFALSE 17928
// sRocket := true ;
17920: LD_ADDR_EXP 75
17924: PUSH
17925: LD_INT 1
17927: ST_TO_ADDR
// if p3 = 2 then
17928: LD_VAR 0 3
17932: PUSH
17933: LD_INT 2
17935: EQUAL
17936: IFFALSE 17946
// sSpeed := true ;
17938: LD_ADDR_EXP 74
17942: PUSH
17943: LD_INT 1
17945: ST_TO_ADDR
// if p3 = 3 then
17946: LD_VAR 0 3
17950: PUSH
17951: LD_INT 3
17953: EQUAL
17954: IFFALSE 17964
// sEngine := true ;
17956: LD_ADDR_EXP 76
17960: PUSH
17961: LD_INT 1
17963: ST_TO_ADDR
// if p3 = 4 then
17964: LD_VAR 0 3
17968: PUSH
17969: LD_INT 4
17971: EQUAL
17972: IFFALSE 17982
// sSpec := true ;
17974: LD_ADDR_EXP 73
17978: PUSH
17979: LD_INT 1
17981: ST_TO_ADDR
// if p3 = 5 then
17982: LD_VAR 0 3
17986: PUSH
17987: LD_INT 5
17989: EQUAL
17990: IFFALSE 18000
// sLevel := true ;
17992: LD_ADDR_EXP 77
17996: PUSH
17997: LD_INT 1
17999: ST_TO_ADDR
// if p3 = 6 then
18000: LD_VAR 0 3
18004: PUSH
18005: LD_INT 6
18007: EQUAL
18008: IFFALSE 18018
// sArmoury := true ;
18010: LD_ADDR_EXP 78
18014: PUSH
18015: LD_INT 1
18017: ST_TO_ADDR
// if p3 = 7 then
18018: LD_VAR 0 3
18022: PUSH
18023: LD_INT 7
18025: EQUAL
18026: IFFALSE 18036
// sRadar := true ;
18028: LD_ADDR_EXP 79
18032: PUSH
18033: LD_INT 1
18035: ST_TO_ADDR
// if p3 = 8 then
18036: LD_VAR 0 3
18040: PUSH
18041: LD_INT 8
18043: EQUAL
18044: IFFALSE 18054
// sBunker := true ;
18046: LD_ADDR_EXP 80
18050: PUSH
18051: LD_INT 1
18053: ST_TO_ADDR
// if p3 = 9 then
18054: LD_VAR 0 3
18058: PUSH
18059: LD_INT 9
18061: EQUAL
18062: IFFALSE 18072
// sHack := true ;
18064: LD_ADDR_EXP 81
18068: PUSH
18069: LD_INT 1
18071: ST_TO_ADDR
// if p3 = 10 then
18072: LD_VAR 0 3
18076: PUSH
18077: LD_INT 10
18079: EQUAL
18080: IFFALSE 18090
// sFire := true ;
18082: LD_ADDR_EXP 82
18086: PUSH
18087: LD_INT 1
18089: ST_TO_ADDR
// if p3 = 11 then
18090: LD_VAR 0 3
18094: PUSH
18095: LD_INT 11
18097: EQUAL
18098: IFFALSE 18108
// sRefresh := true ;
18100: LD_ADDR_EXP 83
18104: PUSH
18105: LD_INT 1
18107: ST_TO_ADDR
// if p3 = 12 then
18108: LD_VAR 0 3
18112: PUSH
18113: LD_INT 12
18115: EQUAL
18116: IFFALSE 18126
// sExp := true ;
18118: LD_ADDR_EXP 84
18122: PUSH
18123: LD_INT 1
18125: ST_TO_ADDR
// if p3 = 13 then
18126: LD_VAR 0 3
18130: PUSH
18131: LD_INT 13
18133: EQUAL
18134: IFFALSE 18144
// sDepot := true ;
18136: LD_ADDR_EXP 85
18140: PUSH
18141: LD_INT 1
18143: ST_TO_ADDR
// if p3 = 14 then
18144: LD_VAR 0 3
18148: PUSH
18149: LD_INT 14
18151: EQUAL
18152: IFFALSE 18162
// sFlag := true ;
18154: LD_ADDR_EXP 86
18158: PUSH
18159: LD_INT 1
18161: ST_TO_ADDR
// if p3 = 15 then
18162: LD_VAR 0 3
18166: PUSH
18167: LD_INT 15
18169: EQUAL
18170: IFFALSE 18180
// sKamikadze := true ;
18172: LD_ADDR_EXP 94
18176: PUSH
18177: LD_INT 1
18179: ST_TO_ADDR
// if p3 = 16 then
18180: LD_VAR 0 3
18184: PUSH
18185: LD_INT 16
18187: EQUAL
18188: IFFALSE 18198
// sTroll := true ;
18190: LD_ADDR_EXP 95
18194: PUSH
18195: LD_INT 1
18197: ST_TO_ADDR
// if p3 = 17 then
18198: LD_VAR 0 3
18202: PUSH
18203: LD_INT 17
18205: EQUAL
18206: IFFALSE 18216
// sSlow := true ;
18208: LD_ADDR_EXP 96
18212: PUSH
18213: LD_INT 1
18215: ST_TO_ADDR
// if p3 = 18 then
18216: LD_VAR 0 3
18220: PUSH
18221: LD_INT 18
18223: EQUAL
18224: IFFALSE 18234
// sLack := true ;
18226: LD_ADDR_EXP 97
18230: PUSH
18231: LD_INT 1
18233: ST_TO_ADDR
// if p3 = 19 then
18234: LD_VAR 0 3
18238: PUSH
18239: LD_INT 19
18241: EQUAL
18242: IFFALSE 18252
// sTank := true ;
18244: LD_ADDR_EXP 99
18248: PUSH
18249: LD_INT 1
18251: ST_TO_ADDR
// if p3 = 20 then
18252: LD_VAR 0 3
18256: PUSH
18257: LD_INT 20
18259: EQUAL
18260: IFFALSE 18270
// sRemote := true ;
18262: LD_ADDR_EXP 100
18266: PUSH
18267: LD_INT 1
18269: ST_TO_ADDR
// if p3 = 21 then
18270: LD_VAR 0 3
18274: PUSH
18275: LD_INT 21
18277: EQUAL
18278: IFFALSE 18288
// sPowell := true ;
18280: LD_ADDR_EXP 101
18284: PUSH
18285: LD_INT 1
18287: ST_TO_ADDR
// if p3 = 22 then
18288: LD_VAR 0 3
18292: PUSH
18293: LD_INT 22
18295: EQUAL
18296: IFFALSE 18306
// sTeleport := true ;
18298: LD_ADDR_EXP 104
18302: PUSH
18303: LD_INT 1
18305: ST_TO_ADDR
// if p3 = 23 then
18306: LD_VAR 0 3
18310: PUSH
18311: LD_INT 23
18313: EQUAL
18314: IFFALSE 18324
// sOilTower := true ;
18316: LD_ADDR_EXP 106
18320: PUSH
18321: LD_INT 1
18323: ST_TO_ADDR
// if p3 = 24 then
18324: LD_VAR 0 3
18328: PUSH
18329: LD_INT 24
18331: EQUAL
18332: IFFALSE 18342
// sShovel := true ;
18334: LD_ADDR_EXP 107
18338: PUSH
18339: LD_INT 1
18341: ST_TO_ADDR
// if p3 = 25 then
18342: LD_VAR 0 3
18346: PUSH
18347: LD_INT 25
18349: EQUAL
18350: IFFALSE 18360
// sSheik := true ;
18352: LD_ADDR_EXP 108
18356: PUSH
18357: LD_INT 1
18359: ST_TO_ADDR
// if p3 = 26 then
18360: LD_VAR 0 3
18364: PUSH
18365: LD_INT 26
18367: EQUAL
18368: IFFALSE 18378
// sEarthquake := true ;
18370: LD_ADDR_EXP 110
18374: PUSH
18375: LD_INT 1
18377: ST_TO_ADDR
// if p3 = 27 then
18378: LD_VAR 0 3
18382: PUSH
18383: LD_INT 27
18385: EQUAL
18386: IFFALSE 18396
// sAI := true ;
18388: LD_ADDR_EXP 111
18392: PUSH
18393: LD_INT 1
18395: ST_TO_ADDR
// if p3 = 28 then
18396: LD_VAR 0 3
18400: PUSH
18401: LD_INT 28
18403: EQUAL
18404: IFFALSE 18414
// sCargo := true ;
18406: LD_ADDR_EXP 114
18410: PUSH
18411: LD_INT 1
18413: ST_TO_ADDR
// if p3 = 29 then
18414: LD_VAR 0 3
18418: PUSH
18419: LD_INT 29
18421: EQUAL
18422: IFFALSE 18432
// sDLaser := true ;
18424: LD_ADDR_EXP 115
18428: PUSH
18429: LD_INT 1
18431: ST_TO_ADDR
// if p3 = 30 then
18432: LD_VAR 0 3
18436: PUSH
18437: LD_INT 30
18439: EQUAL
18440: IFFALSE 18450
// sExchange := true ;
18442: LD_ADDR_EXP 116
18446: PUSH
18447: LD_INT 1
18449: ST_TO_ADDR
// if p3 = 31 then
18450: LD_VAR 0 3
18454: PUSH
18455: LD_INT 31
18457: EQUAL
18458: IFFALSE 18468
// sFac := true ;
18460: LD_ADDR_EXP 117
18464: PUSH
18465: LD_INT 1
18467: ST_TO_ADDR
// if p3 = 32 then
18468: LD_VAR 0 3
18472: PUSH
18473: LD_INT 32
18475: EQUAL
18476: IFFALSE 18486
// sPower := true ;
18478: LD_ADDR_EXP 118
18482: PUSH
18483: LD_INT 1
18485: ST_TO_ADDR
// if p3 = 33 then
18486: LD_VAR 0 3
18490: PUSH
18491: LD_INT 33
18493: EQUAL
18494: IFFALSE 18504
// sRandom := true ;
18496: LD_ADDR_EXP 119
18500: PUSH
18501: LD_INT 1
18503: ST_TO_ADDR
// if p3 = 34 then
18504: LD_VAR 0 3
18508: PUSH
18509: LD_INT 34
18511: EQUAL
18512: IFFALSE 18522
// sShield := true ;
18514: LD_ADDR_EXP 120
18518: PUSH
18519: LD_INT 1
18521: ST_TO_ADDR
// if p3 = 35 then
18522: LD_VAR 0 3
18526: PUSH
18527: LD_INT 35
18529: EQUAL
18530: IFFALSE 18540
// sTime := true ;
18532: LD_ADDR_EXP 121
18536: PUSH
18537: LD_INT 1
18539: ST_TO_ADDR
// if p3 = 36 then
18540: LD_VAR 0 3
18544: PUSH
18545: LD_INT 36
18547: EQUAL
18548: IFFALSE 18558
// sTools := true ;
18550: LD_ADDR_EXP 122
18554: PUSH
18555: LD_INT 1
18557: ST_TO_ADDR
// if p3 = 101 then
18558: LD_VAR 0 3
18562: PUSH
18563: LD_INT 101
18565: EQUAL
18566: IFFALSE 18576
// sSold := true ;
18568: LD_ADDR_EXP 87
18572: PUSH
18573: LD_INT 1
18575: ST_TO_ADDR
// if p3 = 102 then
18576: LD_VAR 0 3
18580: PUSH
18581: LD_INT 102
18583: EQUAL
18584: IFFALSE 18594
// sDiff := true ;
18586: LD_ADDR_EXP 88
18590: PUSH
18591: LD_INT 1
18593: ST_TO_ADDR
// if p3 = 103 then
18594: LD_VAR 0 3
18598: PUSH
18599: LD_INT 103
18601: EQUAL
18602: IFFALSE 18612
// sFog := true ;
18604: LD_ADDR_EXP 91
18608: PUSH
18609: LD_INT 1
18611: ST_TO_ADDR
// if p3 = 104 then
18612: LD_VAR 0 3
18616: PUSH
18617: LD_INT 104
18619: EQUAL
18620: IFFALSE 18630
// sReset := true ;
18622: LD_ADDR_EXP 92
18626: PUSH
18627: LD_INT 1
18629: ST_TO_ADDR
// if p3 = 105 then
18630: LD_VAR 0 3
18634: PUSH
18635: LD_INT 105
18637: EQUAL
18638: IFFALSE 18648
// sSun := true ;
18640: LD_ADDR_EXP 93
18644: PUSH
18645: LD_INT 1
18647: ST_TO_ADDR
// if p3 = 106 then
18648: LD_VAR 0 3
18652: PUSH
18653: LD_INT 106
18655: EQUAL
18656: IFFALSE 18666
// sTiger := true ;
18658: LD_ADDR_EXP 89
18662: PUSH
18663: LD_INT 1
18665: ST_TO_ADDR
// if p3 = 107 then
18666: LD_VAR 0 3
18670: PUSH
18671: LD_INT 107
18673: EQUAL
18674: IFFALSE 18684
// sBomb := true ;
18676: LD_ADDR_EXP 90
18680: PUSH
18681: LD_INT 1
18683: ST_TO_ADDR
// if p3 = 108 then
18684: LD_VAR 0 3
18688: PUSH
18689: LD_INT 108
18691: EQUAL
18692: IFFALSE 18702
// sWound := true ;
18694: LD_ADDR_EXP 98
18698: PUSH
18699: LD_INT 1
18701: ST_TO_ADDR
// if p3 = 109 then
18702: LD_VAR 0 3
18706: PUSH
18707: LD_INT 109
18709: EQUAL
18710: IFFALSE 18720
// sBetray := true ;
18712: LD_ADDR_EXP 102
18716: PUSH
18717: LD_INT 1
18719: ST_TO_ADDR
// if p3 = 110 then
18720: LD_VAR 0 3
18724: PUSH
18725: LD_INT 110
18727: EQUAL
18728: IFFALSE 18738
// sContamin := true ;
18730: LD_ADDR_EXP 103
18734: PUSH
18735: LD_INT 1
18737: ST_TO_ADDR
// if p3 = 111 then
18738: LD_VAR 0 3
18742: PUSH
18743: LD_INT 111
18745: EQUAL
18746: IFFALSE 18756
// sOil := true ;
18748: LD_ADDR_EXP 105
18752: PUSH
18753: LD_INT 1
18755: ST_TO_ADDR
// if p3 = 112 then
18756: LD_VAR 0 3
18760: PUSH
18761: LD_INT 112
18763: EQUAL
18764: IFFALSE 18774
// sStu := true ;
18766: LD_ADDR_EXP 109
18770: PUSH
18771: LD_INT 1
18773: ST_TO_ADDR
// if p3 = 113 then
18774: LD_VAR 0 3
18778: PUSH
18779: LD_INT 113
18781: EQUAL
18782: IFFALSE 18792
// sBazooka := true ;
18784: LD_ADDR_EXP 112
18788: PUSH
18789: LD_INT 1
18791: ST_TO_ADDR
// if p3 = 114 then
18792: LD_VAR 0 3
18796: PUSH
18797: LD_INT 114
18799: EQUAL
18800: IFFALSE 18810
// sMortar := true ;
18802: LD_ADDR_EXP 113
18806: PUSH
18807: LD_INT 1
18809: ST_TO_ADDR
// if p3 = 115 then
18810: LD_VAR 0 3
18814: PUSH
18815: LD_INT 115
18817: EQUAL
18818: IFFALSE 18828
// sRanger := true ;
18820: LD_ADDR_EXP 123
18824: PUSH
18825: LD_INT 1
18827: ST_TO_ADDR
// end ; if p2 = 101 then
18828: LD_VAR 0 2
18832: PUSH
18833: LD_INT 101
18835: EQUAL
18836: IFFALSE 18964
// begin case p3 of 1 :
18838: LD_VAR 0 3
18842: PUSH
18843: LD_INT 1
18845: DOUBLE
18846: EQUAL
18847: IFTRUE 18851
18849: GO 18858
18851: POP
// hHackUnlimitedResources ; 2 :
18852: CALL 29999 0 0
18856: GO 18964
18858: LD_INT 2
18860: DOUBLE
18861: EQUAL
18862: IFTRUE 18866
18864: GO 18873
18866: POP
// hHackSetLevel10 ; 3 :
18867: CALL 30132 0 0
18871: GO 18964
18873: LD_INT 3
18875: DOUBLE
18876: EQUAL
18877: IFTRUE 18881
18879: GO 18888
18881: POP
// hHackSetLevel10YourUnits ; 4 :
18882: CALL 30217 0 0
18886: GO 18964
18888: LD_INT 4
18890: DOUBLE
18891: EQUAL
18892: IFTRUE 18896
18894: GO 18903
18896: POP
// hHackInvincible ; 5 :
18897: CALL 30665 0 0
18901: GO 18964
18903: LD_INT 5
18905: DOUBLE
18906: EQUAL
18907: IFTRUE 18911
18909: GO 18918
18911: POP
// hHackInvisible ; 6 :
18912: CALL 30776 0 0
18916: GO 18964
18918: LD_INT 6
18920: DOUBLE
18921: EQUAL
18922: IFTRUE 18926
18924: GO 18933
18926: POP
// hHackChangeYourSide ; 7 :
18927: CALL 30833 0 0
18931: GO 18964
18933: LD_INT 7
18935: DOUBLE
18936: EQUAL
18937: IFTRUE 18941
18939: GO 18948
18941: POP
// hHackChangeUnitSide ; 8 :
18942: CALL 30875 0 0
18946: GO 18964
18948: LD_INT 8
18950: DOUBLE
18951: EQUAL
18952: IFTRUE 18956
18954: GO 18963
18956: POP
// hHackFog ; end ;
18957: CALL 30976 0 0
18961: GO 18964
18963: POP
// end ; end ;
18964: PPOPN 6
18966: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
18967: GO 18969
18969: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
18970: LD_STRING initStreamRollete();
18972: PPUSH
18973: CALL_OW 559
// InitStreamMode ;
18977: CALL 18986 0 0
// DefineStreamItems ( ) ;
18981: CALL 19426 0 0
// end ;
18985: END
// function InitStreamMode ; begin
18986: LD_INT 0
18988: PPUSH
// streamModeActive := false ;
18989: LD_ADDR_EXP 70
18993: PUSH
18994: LD_INT 0
18996: ST_TO_ADDR
// normalCounter := 36 ;
18997: LD_ADDR_EXP 71
19001: PUSH
19002: LD_INT 36
19004: ST_TO_ADDR
// hardcoreCounter := 16 ;
19005: LD_ADDR_EXP 72
19009: PUSH
19010: LD_INT 16
19012: ST_TO_ADDR
// sRocket := false ;
19013: LD_ADDR_EXP 75
19017: PUSH
19018: LD_INT 0
19020: ST_TO_ADDR
// sSpeed := false ;
19021: LD_ADDR_EXP 74
19025: PUSH
19026: LD_INT 0
19028: ST_TO_ADDR
// sEngine := false ;
19029: LD_ADDR_EXP 76
19033: PUSH
19034: LD_INT 0
19036: ST_TO_ADDR
// sSpec := false ;
19037: LD_ADDR_EXP 73
19041: PUSH
19042: LD_INT 0
19044: ST_TO_ADDR
// sLevel := false ;
19045: LD_ADDR_EXP 77
19049: PUSH
19050: LD_INT 0
19052: ST_TO_ADDR
// sArmoury := false ;
19053: LD_ADDR_EXP 78
19057: PUSH
19058: LD_INT 0
19060: ST_TO_ADDR
// sRadar := false ;
19061: LD_ADDR_EXP 79
19065: PUSH
19066: LD_INT 0
19068: ST_TO_ADDR
// sBunker := false ;
19069: LD_ADDR_EXP 80
19073: PUSH
19074: LD_INT 0
19076: ST_TO_ADDR
// sHack := false ;
19077: LD_ADDR_EXP 81
19081: PUSH
19082: LD_INT 0
19084: ST_TO_ADDR
// sFire := false ;
19085: LD_ADDR_EXP 82
19089: PUSH
19090: LD_INT 0
19092: ST_TO_ADDR
// sRefresh := false ;
19093: LD_ADDR_EXP 83
19097: PUSH
19098: LD_INT 0
19100: ST_TO_ADDR
// sExp := false ;
19101: LD_ADDR_EXP 84
19105: PUSH
19106: LD_INT 0
19108: ST_TO_ADDR
// sDepot := false ;
19109: LD_ADDR_EXP 85
19113: PUSH
19114: LD_INT 0
19116: ST_TO_ADDR
// sFlag := false ;
19117: LD_ADDR_EXP 86
19121: PUSH
19122: LD_INT 0
19124: ST_TO_ADDR
// sKamikadze := false ;
19125: LD_ADDR_EXP 94
19129: PUSH
19130: LD_INT 0
19132: ST_TO_ADDR
// sTroll := false ;
19133: LD_ADDR_EXP 95
19137: PUSH
19138: LD_INT 0
19140: ST_TO_ADDR
// sSlow := false ;
19141: LD_ADDR_EXP 96
19145: PUSH
19146: LD_INT 0
19148: ST_TO_ADDR
// sLack := false ;
19149: LD_ADDR_EXP 97
19153: PUSH
19154: LD_INT 0
19156: ST_TO_ADDR
// sTank := false ;
19157: LD_ADDR_EXP 99
19161: PUSH
19162: LD_INT 0
19164: ST_TO_ADDR
// sRemote := false ;
19165: LD_ADDR_EXP 100
19169: PUSH
19170: LD_INT 0
19172: ST_TO_ADDR
// sPowell := false ;
19173: LD_ADDR_EXP 101
19177: PUSH
19178: LD_INT 0
19180: ST_TO_ADDR
// sTeleport := false ;
19181: LD_ADDR_EXP 104
19185: PUSH
19186: LD_INT 0
19188: ST_TO_ADDR
// sOilTower := false ;
19189: LD_ADDR_EXP 106
19193: PUSH
19194: LD_INT 0
19196: ST_TO_ADDR
// sShovel := false ;
19197: LD_ADDR_EXP 107
19201: PUSH
19202: LD_INT 0
19204: ST_TO_ADDR
// sSheik := false ;
19205: LD_ADDR_EXP 108
19209: PUSH
19210: LD_INT 0
19212: ST_TO_ADDR
// sEarthquake := false ;
19213: LD_ADDR_EXP 110
19217: PUSH
19218: LD_INT 0
19220: ST_TO_ADDR
// sAI := false ;
19221: LD_ADDR_EXP 111
19225: PUSH
19226: LD_INT 0
19228: ST_TO_ADDR
// sCargo := false ;
19229: LD_ADDR_EXP 114
19233: PUSH
19234: LD_INT 0
19236: ST_TO_ADDR
// sDLaser := false ;
19237: LD_ADDR_EXP 115
19241: PUSH
19242: LD_INT 0
19244: ST_TO_ADDR
// sExchange := false ;
19245: LD_ADDR_EXP 116
19249: PUSH
19250: LD_INT 0
19252: ST_TO_ADDR
// sFac := false ;
19253: LD_ADDR_EXP 117
19257: PUSH
19258: LD_INT 0
19260: ST_TO_ADDR
// sPower := false ;
19261: LD_ADDR_EXP 118
19265: PUSH
19266: LD_INT 0
19268: ST_TO_ADDR
// sRandom := false ;
19269: LD_ADDR_EXP 119
19273: PUSH
19274: LD_INT 0
19276: ST_TO_ADDR
// sShield := false ;
19277: LD_ADDR_EXP 120
19281: PUSH
19282: LD_INT 0
19284: ST_TO_ADDR
// sTime := false ;
19285: LD_ADDR_EXP 121
19289: PUSH
19290: LD_INT 0
19292: ST_TO_ADDR
// sTools := false ;
19293: LD_ADDR_EXP 122
19297: PUSH
19298: LD_INT 0
19300: ST_TO_ADDR
// sSold := false ;
19301: LD_ADDR_EXP 87
19305: PUSH
19306: LD_INT 0
19308: ST_TO_ADDR
// sDiff := false ;
19309: LD_ADDR_EXP 88
19313: PUSH
19314: LD_INT 0
19316: ST_TO_ADDR
// sFog := false ;
19317: LD_ADDR_EXP 91
19321: PUSH
19322: LD_INT 0
19324: ST_TO_ADDR
// sReset := false ;
19325: LD_ADDR_EXP 92
19329: PUSH
19330: LD_INT 0
19332: ST_TO_ADDR
// sSun := false ;
19333: LD_ADDR_EXP 93
19337: PUSH
19338: LD_INT 0
19340: ST_TO_ADDR
// sTiger := false ;
19341: LD_ADDR_EXP 89
19345: PUSH
19346: LD_INT 0
19348: ST_TO_ADDR
// sBomb := false ;
19349: LD_ADDR_EXP 90
19353: PUSH
19354: LD_INT 0
19356: ST_TO_ADDR
// sWound := false ;
19357: LD_ADDR_EXP 98
19361: PUSH
19362: LD_INT 0
19364: ST_TO_ADDR
// sBetray := false ;
19365: LD_ADDR_EXP 102
19369: PUSH
19370: LD_INT 0
19372: ST_TO_ADDR
// sContamin := false ;
19373: LD_ADDR_EXP 103
19377: PUSH
19378: LD_INT 0
19380: ST_TO_ADDR
// sOil := false ;
19381: LD_ADDR_EXP 105
19385: PUSH
19386: LD_INT 0
19388: ST_TO_ADDR
// sStu := false ;
19389: LD_ADDR_EXP 109
19393: PUSH
19394: LD_INT 0
19396: ST_TO_ADDR
// sBazooka := false ;
19397: LD_ADDR_EXP 112
19401: PUSH
19402: LD_INT 0
19404: ST_TO_ADDR
// sMortar := false ;
19405: LD_ADDR_EXP 113
19409: PUSH
19410: LD_INT 0
19412: ST_TO_ADDR
// sRanger := false ;
19413: LD_ADDR_EXP 123
19417: PUSH
19418: LD_INT 0
19420: ST_TO_ADDR
// end ;
19421: LD_VAR 0 1
19425: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
19426: LD_INT 0
19428: PPUSH
19429: PPUSH
19430: PPUSH
19431: PPUSH
19432: PPUSH
// result := [ ] ;
19433: LD_ADDR_VAR 0 1
19437: PUSH
19438: EMPTY
19439: ST_TO_ADDR
// if campaign_id = 1 then
19440: LD_OWVAR 69
19444: PUSH
19445: LD_INT 1
19447: EQUAL
19448: IFFALSE 22386
// begin case mission_number of 1 :
19450: LD_OWVAR 70
19454: PUSH
19455: LD_INT 1
19457: DOUBLE
19458: EQUAL
19459: IFTRUE 19463
19461: GO 19527
19463: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
19464: LD_ADDR_VAR 0 1
19468: PUSH
19469: LD_INT 2
19471: PUSH
19472: LD_INT 4
19474: PUSH
19475: LD_INT 11
19477: PUSH
19478: LD_INT 12
19480: PUSH
19481: LD_INT 15
19483: PUSH
19484: LD_INT 16
19486: PUSH
19487: LD_INT 22
19489: PUSH
19490: LD_INT 23
19492: PUSH
19493: LD_INT 26
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: PUSH
19507: LD_INT 101
19509: PUSH
19510: LD_INT 102
19512: PUSH
19513: LD_INT 106
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: LIST
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: ST_TO_ADDR
19525: GO 22384
19527: LD_INT 2
19529: DOUBLE
19530: EQUAL
19531: IFTRUE 19535
19533: GO 19607
19535: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
19536: LD_ADDR_VAR 0 1
19540: PUSH
19541: LD_INT 2
19543: PUSH
19544: LD_INT 4
19546: PUSH
19547: LD_INT 11
19549: PUSH
19550: LD_INT 12
19552: PUSH
19553: LD_INT 15
19555: PUSH
19556: LD_INT 16
19558: PUSH
19559: LD_INT 22
19561: PUSH
19562: LD_INT 23
19564: PUSH
19565: LD_INT 26
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 101
19581: PUSH
19582: LD_INT 102
19584: PUSH
19585: LD_INT 105
19587: PUSH
19588: LD_INT 106
19590: PUSH
19591: LD_INT 108
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: ST_TO_ADDR
19605: GO 22384
19607: LD_INT 3
19609: DOUBLE
19610: EQUAL
19611: IFTRUE 19615
19613: GO 19691
19615: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
19616: LD_ADDR_VAR 0 1
19620: PUSH
19621: LD_INT 2
19623: PUSH
19624: LD_INT 4
19626: PUSH
19627: LD_INT 5
19629: PUSH
19630: LD_INT 11
19632: PUSH
19633: LD_INT 12
19635: PUSH
19636: LD_INT 15
19638: PUSH
19639: LD_INT 16
19641: PUSH
19642: LD_INT 22
19644: PUSH
19645: LD_INT 26
19647: PUSH
19648: LD_INT 36
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 101
19665: PUSH
19666: LD_INT 102
19668: PUSH
19669: LD_INT 105
19671: PUSH
19672: LD_INT 106
19674: PUSH
19675: LD_INT 108
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: ST_TO_ADDR
19689: GO 22384
19691: LD_INT 4
19693: DOUBLE
19694: EQUAL
19695: IFTRUE 19699
19697: GO 19783
19699: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
19700: LD_ADDR_VAR 0 1
19704: PUSH
19705: LD_INT 2
19707: PUSH
19708: LD_INT 4
19710: PUSH
19711: LD_INT 5
19713: PUSH
19714: LD_INT 8
19716: PUSH
19717: LD_INT 11
19719: PUSH
19720: LD_INT 12
19722: PUSH
19723: LD_INT 15
19725: PUSH
19726: LD_INT 16
19728: PUSH
19729: LD_INT 22
19731: PUSH
19732: LD_INT 23
19734: PUSH
19735: LD_INT 26
19737: PUSH
19738: LD_INT 36
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 101
19757: PUSH
19758: LD_INT 102
19760: PUSH
19761: LD_INT 105
19763: PUSH
19764: LD_INT 106
19766: PUSH
19767: LD_INT 108
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: ST_TO_ADDR
19781: GO 22384
19783: LD_INT 5
19785: DOUBLE
19786: EQUAL
19787: IFTRUE 19791
19789: GO 19891
19791: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
19792: LD_ADDR_VAR 0 1
19796: PUSH
19797: LD_INT 2
19799: PUSH
19800: LD_INT 4
19802: PUSH
19803: LD_INT 5
19805: PUSH
19806: LD_INT 6
19808: PUSH
19809: LD_INT 8
19811: PUSH
19812: LD_INT 11
19814: PUSH
19815: LD_INT 12
19817: PUSH
19818: LD_INT 15
19820: PUSH
19821: LD_INT 16
19823: PUSH
19824: LD_INT 22
19826: PUSH
19827: LD_INT 23
19829: PUSH
19830: LD_INT 25
19832: PUSH
19833: LD_INT 26
19835: PUSH
19836: LD_INT 36
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 101
19857: PUSH
19858: LD_INT 102
19860: PUSH
19861: LD_INT 105
19863: PUSH
19864: LD_INT 106
19866: PUSH
19867: LD_INT 108
19869: PUSH
19870: LD_INT 109
19872: PUSH
19873: LD_INT 112
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: ST_TO_ADDR
19889: GO 22384
19891: LD_INT 6
19893: DOUBLE
19894: EQUAL
19895: IFTRUE 19899
19897: GO 20019
19899: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
19900: LD_ADDR_VAR 0 1
19904: PUSH
19905: LD_INT 2
19907: PUSH
19908: LD_INT 4
19910: PUSH
19911: LD_INT 5
19913: PUSH
19914: LD_INT 6
19916: PUSH
19917: LD_INT 8
19919: PUSH
19920: LD_INT 11
19922: PUSH
19923: LD_INT 12
19925: PUSH
19926: LD_INT 15
19928: PUSH
19929: LD_INT 16
19931: PUSH
19932: LD_INT 20
19934: PUSH
19935: LD_INT 21
19937: PUSH
19938: LD_INT 22
19940: PUSH
19941: LD_INT 23
19943: PUSH
19944: LD_INT 25
19946: PUSH
19947: LD_INT 26
19949: PUSH
19950: LD_INT 30
19952: PUSH
19953: LD_INT 31
19955: PUSH
19956: LD_INT 32
19958: PUSH
19959: LD_INT 36
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 101
19985: PUSH
19986: LD_INT 102
19988: PUSH
19989: LD_INT 105
19991: PUSH
19992: LD_INT 106
19994: PUSH
19995: LD_INT 108
19997: PUSH
19998: LD_INT 109
20000: PUSH
20001: LD_INT 112
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: ST_TO_ADDR
20017: GO 22384
20019: LD_INT 7
20021: DOUBLE
20022: EQUAL
20023: IFTRUE 20027
20025: GO 20127
20027: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
20028: LD_ADDR_VAR 0 1
20032: PUSH
20033: LD_INT 2
20035: PUSH
20036: LD_INT 4
20038: PUSH
20039: LD_INT 5
20041: PUSH
20042: LD_INT 7
20044: PUSH
20045: LD_INT 11
20047: PUSH
20048: LD_INT 12
20050: PUSH
20051: LD_INT 15
20053: PUSH
20054: LD_INT 16
20056: PUSH
20057: LD_INT 20
20059: PUSH
20060: LD_INT 21
20062: PUSH
20063: LD_INT 22
20065: PUSH
20066: LD_INT 23
20068: PUSH
20069: LD_INT 25
20071: PUSH
20072: LD_INT 26
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: PUSH
20091: LD_INT 101
20093: PUSH
20094: LD_INT 102
20096: PUSH
20097: LD_INT 103
20099: PUSH
20100: LD_INT 105
20102: PUSH
20103: LD_INT 106
20105: PUSH
20106: LD_INT 108
20108: PUSH
20109: LD_INT 112
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: ST_TO_ADDR
20125: GO 22384
20127: LD_INT 8
20129: DOUBLE
20130: EQUAL
20131: IFTRUE 20135
20133: GO 20263
20135: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
20136: LD_ADDR_VAR 0 1
20140: PUSH
20141: LD_INT 2
20143: PUSH
20144: LD_INT 4
20146: PUSH
20147: LD_INT 5
20149: PUSH
20150: LD_INT 6
20152: PUSH
20153: LD_INT 7
20155: PUSH
20156: LD_INT 8
20158: PUSH
20159: LD_INT 11
20161: PUSH
20162: LD_INT 12
20164: PUSH
20165: LD_INT 15
20167: PUSH
20168: LD_INT 16
20170: PUSH
20171: LD_INT 20
20173: PUSH
20174: LD_INT 21
20176: PUSH
20177: LD_INT 22
20179: PUSH
20180: LD_INT 23
20182: PUSH
20183: LD_INT 25
20185: PUSH
20186: LD_INT 26
20188: PUSH
20189: LD_INT 30
20191: PUSH
20192: LD_INT 31
20194: PUSH
20195: LD_INT 32
20197: PUSH
20198: LD_INT 36
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 101
20225: PUSH
20226: LD_INT 102
20228: PUSH
20229: LD_INT 103
20231: PUSH
20232: LD_INT 105
20234: PUSH
20235: LD_INT 106
20237: PUSH
20238: LD_INT 108
20240: PUSH
20241: LD_INT 109
20243: PUSH
20244: LD_INT 112
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: ST_TO_ADDR
20261: GO 22384
20263: LD_INT 9
20265: DOUBLE
20266: EQUAL
20267: IFTRUE 20271
20269: GO 20407
20271: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
20272: LD_ADDR_VAR 0 1
20276: PUSH
20277: LD_INT 2
20279: PUSH
20280: LD_INT 4
20282: PUSH
20283: LD_INT 5
20285: PUSH
20286: LD_INT 6
20288: PUSH
20289: LD_INT 7
20291: PUSH
20292: LD_INT 8
20294: PUSH
20295: LD_INT 11
20297: PUSH
20298: LD_INT 12
20300: PUSH
20301: LD_INT 15
20303: PUSH
20304: LD_INT 16
20306: PUSH
20307: LD_INT 20
20309: PUSH
20310: LD_INT 21
20312: PUSH
20313: LD_INT 22
20315: PUSH
20316: LD_INT 23
20318: PUSH
20319: LD_INT 25
20321: PUSH
20322: LD_INT 26
20324: PUSH
20325: LD_INT 28
20327: PUSH
20328: LD_INT 30
20330: PUSH
20331: LD_INT 31
20333: PUSH
20334: LD_INT 32
20336: PUSH
20337: LD_INT 36
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: PUSH
20363: LD_INT 101
20365: PUSH
20366: LD_INT 102
20368: PUSH
20369: LD_INT 103
20371: PUSH
20372: LD_INT 105
20374: PUSH
20375: LD_INT 106
20377: PUSH
20378: LD_INT 108
20380: PUSH
20381: LD_INT 109
20383: PUSH
20384: LD_INT 112
20386: PUSH
20387: LD_INT 114
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: ST_TO_ADDR
20405: GO 22384
20407: LD_INT 10
20409: DOUBLE
20410: EQUAL
20411: IFTRUE 20415
20413: GO 20599
20415: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
20416: LD_ADDR_VAR 0 1
20420: PUSH
20421: LD_INT 2
20423: PUSH
20424: LD_INT 4
20426: PUSH
20427: LD_INT 5
20429: PUSH
20430: LD_INT 6
20432: PUSH
20433: LD_INT 7
20435: PUSH
20436: LD_INT 8
20438: PUSH
20439: LD_INT 9
20441: PUSH
20442: LD_INT 10
20444: PUSH
20445: LD_INT 11
20447: PUSH
20448: LD_INT 12
20450: PUSH
20451: LD_INT 13
20453: PUSH
20454: LD_INT 14
20456: PUSH
20457: LD_INT 15
20459: PUSH
20460: LD_INT 16
20462: PUSH
20463: LD_INT 17
20465: PUSH
20466: LD_INT 18
20468: PUSH
20469: LD_INT 19
20471: PUSH
20472: LD_INT 20
20474: PUSH
20475: LD_INT 21
20477: PUSH
20478: LD_INT 22
20480: PUSH
20481: LD_INT 23
20483: PUSH
20484: LD_INT 24
20486: PUSH
20487: LD_INT 25
20489: PUSH
20490: LD_INT 26
20492: PUSH
20493: LD_INT 28
20495: PUSH
20496: LD_INT 30
20498: PUSH
20499: LD_INT 31
20501: PUSH
20502: LD_INT 32
20504: PUSH
20505: LD_INT 36
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: PUSH
20539: LD_INT 101
20541: PUSH
20542: LD_INT 102
20544: PUSH
20545: LD_INT 103
20547: PUSH
20548: LD_INT 104
20550: PUSH
20551: LD_INT 105
20553: PUSH
20554: LD_INT 106
20556: PUSH
20557: LD_INT 107
20559: PUSH
20560: LD_INT 108
20562: PUSH
20563: LD_INT 109
20565: PUSH
20566: LD_INT 110
20568: PUSH
20569: LD_INT 111
20571: PUSH
20572: LD_INT 112
20574: PUSH
20575: LD_INT 114
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: ST_TO_ADDR
20597: GO 22384
20599: LD_INT 11
20601: DOUBLE
20602: EQUAL
20603: IFTRUE 20607
20605: GO 20799
20607: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
20608: LD_ADDR_VAR 0 1
20612: PUSH
20613: LD_INT 2
20615: PUSH
20616: LD_INT 3
20618: PUSH
20619: LD_INT 4
20621: PUSH
20622: LD_INT 5
20624: PUSH
20625: LD_INT 6
20627: PUSH
20628: LD_INT 7
20630: PUSH
20631: LD_INT 8
20633: PUSH
20634: LD_INT 9
20636: PUSH
20637: LD_INT 10
20639: PUSH
20640: LD_INT 11
20642: PUSH
20643: LD_INT 12
20645: PUSH
20646: LD_INT 13
20648: PUSH
20649: LD_INT 14
20651: PUSH
20652: LD_INT 15
20654: PUSH
20655: LD_INT 16
20657: PUSH
20658: LD_INT 17
20660: PUSH
20661: LD_INT 18
20663: PUSH
20664: LD_INT 19
20666: PUSH
20667: LD_INT 20
20669: PUSH
20670: LD_INT 21
20672: PUSH
20673: LD_INT 22
20675: PUSH
20676: LD_INT 23
20678: PUSH
20679: LD_INT 24
20681: PUSH
20682: LD_INT 25
20684: PUSH
20685: LD_INT 26
20687: PUSH
20688: LD_INT 28
20690: PUSH
20691: LD_INT 30
20693: PUSH
20694: LD_INT 31
20696: PUSH
20697: LD_INT 32
20699: PUSH
20700: LD_INT 34
20702: PUSH
20703: LD_INT 36
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: PUSH
20739: LD_INT 101
20741: PUSH
20742: LD_INT 102
20744: PUSH
20745: LD_INT 103
20747: PUSH
20748: LD_INT 104
20750: PUSH
20751: LD_INT 105
20753: PUSH
20754: LD_INT 106
20756: PUSH
20757: LD_INT 107
20759: PUSH
20760: LD_INT 108
20762: PUSH
20763: LD_INT 109
20765: PUSH
20766: LD_INT 110
20768: PUSH
20769: LD_INT 111
20771: PUSH
20772: LD_INT 112
20774: PUSH
20775: LD_INT 114
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: ST_TO_ADDR
20797: GO 22384
20799: LD_INT 12
20801: DOUBLE
20802: EQUAL
20803: IFTRUE 20807
20805: GO 21015
20807: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
20808: LD_ADDR_VAR 0 1
20812: PUSH
20813: LD_INT 1
20815: PUSH
20816: LD_INT 2
20818: PUSH
20819: LD_INT 3
20821: PUSH
20822: LD_INT 4
20824: PUSH
20825: LD_INT 5
20827: PUSH
20828: LD_INT 6
20830: PUSH
20831: LD_INT 7
20833: PUSH
20834: LD_INT 8
20836: PUSH
20837: LD_INT 9
20839: PUSH
20840: LD_INT 10
20842: PUSH
20843: LD_INT 11
20845: PUSH
20846: LD_INT 12
20848: PUSH
20849: LD_INT 13
20851: PUSH
20852: LD_INT 14
20854: PUSH
20855: LD_INT 15
20857: PUSH
20858: LD_INT 16
20860: PUSH
20861: LD_INT 17
20863: PUSH
20864: LD_INT 18
20866: PUSH
20867: LD_INT 19
20869: PUSH
20870: LD_INT 20
20872: PUSH
20873: LD_INT 21
20875: PUSH
20876: LD_INT 22
20878: PUSH
20879: LD_INT 23
20881: PUSH
20882: LD_INT 24
20884: PUSH
20885: LD_INT 25
20887: PUSH
20888: LD_INT 26
20890: PUSH
20891: LD_INT 27
20893: PUSH
20894: LD_INT 28
20896: PUSH
20897: LD_INT 30
20899: PUSH
20900: LD_INT 31
20902: PUSH
20903: LD_INT 32
20905: PUSH
20906: LD_INT 33
20908: PUSH
20909: LD_INT 34
20911: PUSH
20912: LD_INT 36
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 101
20953: PUSH
20954: LD_INT 102
20956: PUSH
20957: LD_INT 103
20959: PUSH
20960: LD_INT 104
20962: PUSH
20963: LD_INT 105
20965: PUSH
20966: LD_INT 106
20968: PUSH
20969: LD_INT 107
20971: PUSH
20972: LD_INT 108
20974: PUSH
20975: LD_INT 109
20977: PUSH
20978: LD_INT 110
20980: PUSH
20981: LD_INT 111
20983: PUSH
20984: LD_INT 112
20986: PUSH
20987: LD_INT 113
20989: PUSH
20990: LD_INT 114
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: ST_TO_ADDR
21013: GO 22384
21015: LD_INT 13
21017: DOUBLE
21018: EQUAL
21019: IFTRUE 21023
21021: GO 21219
21023: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
21024: LD_ADDR_VAR 0 1
21028: PUSH
21029: LD_INT 1
21031: PUSH
21032: LD_INT 2
21034: PUSH
21035: LD_INT 3
21037: PUSH
21038: LD_INT 4
21040: PUSH
21041: LD_INT 5
21043: PUSH
21044: LD_INT 8
21046: PUSH
21047: LD_INT 9
21049: PUSH
21050: LD_INT 10
21052: PUSH
21053: LD_INT 11
21055: PUSH
21056: LD_INT 12
21058: PUSH
21059: LD_INT 14
21061: PUSH
21062: LD_INT 15
21064: PUSH
21065: LD_INT 16
21067: PUSH
21068: LD_INT 17
21070: PUSH
21071: LD_INT 18
21073: PUSH
21074: LD_INT 19
21076: PUSH
21077: LD_INT 20
21079: PUSH
21080: LD_INT 21
21082: PUSH
21083: LD_INT 22
21085: PUSH
21086: LD_INT 23
21088: PUSH
21089: LD_INT 24
21091: PUSH
21092: LD_INT 25
21094: PUSH
21095: LD_INT 26
21097: PUSH
21098: LD_INT 27
21100: PUSH
21101: LD_INT 28
21103: PUSH
21104: LD_INT 30
21106: PUSH
21107: LD_INT 31
21109: PUSH
21110: LD_INT 32
21112: PUSH
21113: LD_INT 33
21115: PUSH
21116: LD_INT 34
21118: PUSH
21119: LD_INT 36
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 101
21157: PUSH
21158: LD_INT 102
21160: PUSH
21161: LD_INT 103
21163: PUSH
21164: LD_INT 104
21166: PUSH
21167: LD_INT 105
21169: PUSH
21170: LD_INT 106
21172: PUSH
21173: LD_INT 107
21175: PUSH
21176: LD_INT 108
21178: PUSH
21179: LD_INT 109
21181: PUSH
21182: LD_INT 110
21184: PUSH
21185: LD_INT 111
21187: PUSH
21188: LD_INT 112
21190: PUSH
21191: LD_INT 113
21193: PUSH
21194: LD_INT 114
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: ST_TO_ADDR
21217: GO 22384
21219: LD_INT 14
21221: DOUBLE
21222: EQUAL
21223: IFTRUE 21227
21225: GO 21439
21227: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
21228: LD_ADDR_VAR 0 1
21232: PUSH
21233: LD_INT 1
21235: PUSH
21236: LD_INT 2
21238: PUSH
21239: LD_INT 3
21241: PUSH
21242: LD_INT 4
21244: PUSH
21245: LD_INT 5
21247: PUSH
21248: LD_INT 6
21250: PUSH
21251: LD_INT 7
21253: PUSH
21254: LD_INT 8
21256: PUSH
21257: LD_INT 9
21259: PUSH
21260: LD_INT 10
21262: PUSH
21263: LD_INT 11
21265: PUSH
21266: LD_INT 12
21268: PUSH
21269: LD_INT 13
21271: PUSH
21272: LD_INT 14
21274: PUSH
21275: LD_INT 15
21277: PUSH
21278: LD_INT 16
21280: PUSH
21281: LD_INT 17
21283: PUSH
21284: LD_INT 18
21286: PUSH
21287: LD_INT 19
21289: PUSH
21290: LD_INT 20
21292: PUSH
21293: LD_INT 21
21295: PUSH
21296: LD_INT 22
21298: PUSH
21299: LD_INT 23
21301: PUSH
21302: LD_INT 24
21304: PUSH
21305: LD_INT 25
21307: PUSH
21308: LD_INT 26
21310: PUSH
21311: LD_INT 27
21313: PUSH
21314: LD_INT 28
21316: PUSH
21317: LD_INT 29
21319: PUSH
21320: LD_INT 30
21322: PUSH
21323: LD_INT 31
21325: PUSH
21326: LD_INT 32
21328: PUSH
21329: LD_INT 33
21331: PUSH
21332: LD_INT 34
21334: PUSH
21335: LD_INT 36
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 101
21377: PUSH
21378: LD_INT 102
21380: PUSH
21381: LD_INT 103
21383: PUSH
21384: LD_INT 104
21386: PUSH
21387: LD_INT 105
21389: PUSH
21390: LD_INT 106
21392: PUSH
21393: LD_INT 107
21395: PUSH
21396: LD_INT 108
21398: PUSH
21399: LD_INT 109
21401: PUSH
21402: LD_INT 110
21404: PUSH
21405: LD_INT 111
21407: PUSH
21408: LD_INT 112
21410: PUSH
21411: LD_INT 113
21413: PUSH
21414: LD_INT 114
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: ST_TO_ADDR
21437: GO 22384
21439: LD_INT 15
21441: DOUBLE
21442: EQUAL
21443: IFTRUE 21447
21445: GO 21659
21447: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
21448: LD_ADDR_VAR 0 1
21452: PUSH
21453: LD_INT 1
21455: PUSH
21456: LD_INT 2
21458: PUSH
21459: LD_INT 3
21461: PUSH
21462: LD_INT 4
21464: PUSH
21465: LD_INT 5
21467: PUSH
21468: LD_INT 6
21470: PUSH
21471: LD_INT 7
21473: PUSH
21474: LD_INT 8
21476: PUSH
21477: LD_INT 9
21479: PUSH
21480: LD_INT 10
21482: PUSH
21483: LD_INT 11
21485: PUSH
21486: LD_INT 12
21488: PUSH
21489: LD_INT 13
21491: PUSH
21492: LD_INT 14
21494: PUSH
21495: LD_INT 15
21497: PUSH
21498: LD_INT 16
21500: PUSH
21501: LD_INT 17
21503: PUSH
21504: LD_INT 18
21506: PUSH
21507: LD_INT 19
21509: PUSH
21510: LD_INT 20
21512: PUSH
21513: LD_INT 21
21515: PUSH
21516: LD_INT 22
21518: PUSH
21519: LD_INT 23
21521: PUSH
21522: LD_INT 24
21524: PUSH
21525: LD_INT 25
21527: PUSH
21528: LD_INT 26
21530: PUSH
21531: LD_INT 27
21533: PUSH
21534: LD_INT 28
21536: PUSH
21537: LD_INT 29
21539: PUSH
21540: LD_INT 30
21542: PUSH
21543: LD_INT 31
21545: PUSH
21546: LD_INT 32
21548: PUSH
21549: LD_INT 33
21551: PUSH
21552: LD_INT 34
21554: PUSH
21555: LD_INT 36
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: PUSH
21595: LD_INT 101
21597: PUSH
21598: LD_INT 102
21600: PUSH
21601: LD_INT 103
21603: PUSH
21604: LD_INT 104
21606: PUSH
21607: LD_INT 105
21609: PUSH
21610: LD_INT 106
21612: PUSH
21613: LD_INT 107
21615: PUSH
21616: LD_INT 108
21618: PUSH
21619: LD_INT 109
21621: PUSH
21622: LD_INT 110
21624: PUSH
21625: LD_INT 111
21627: PUSH
21628: LD_INT 112
21630: PUSH
21631: LD_INT 113
21633: PUSH
21634: LD_INT 114
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: ST_TO_ADDR
21657: GO 22384
21659: LD_INT 16
21661: DOUBLE
21662: EQUAL
21663: IFTRUE 21667
21665: GO 21791
21667: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
21668: LD_ADDR_VAR 0 1
21672: PUSH
21673: LD_INT 2
21675: PUSH
21676: LD_INT 4
21678: PUSH
21679: LD_INT 5
21681: PUSH
21682: LD_INT 7
21684: PUSH
21685: LD_INT 11
21687: PUSH
21688: LD_INT 12
21690: PUSH
21691: LD_INT 15
21693: PUSH
21694: LD_INT 16
21696: PUSH
21697: LD_INT 20
21699: PUSH
21700: LD_INT 21
21702: PUSH
21703: LD_INT 22
21705: PUSH
21706: LD_INT 23
21708: PUSH
21709: LD_INT 25
21711: PUSH
21712: LD_INT 26
21714: PUSH
21715: LD_INT 30
21717: PUSH
21718: LD_INT 31
21720: PUSH
21721: LD_INT 32
21723: PUSH
21724: LD_INT 33
21726: PUSH
21727: LD_INT 34
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: PUSH
21751: LD_INT 101
21753: PUSH
21754: LD_INT 102
21756: PUSH
21757: LD_INT 103
21759: PUSH
21760: LD_INT 106
21762: PUSH
21763: LD_INT 108
21765: PUSH
21766: LD_INT 112
21768: PUSH
21769: LD_INT 113
21771: PUSH
21772: LD_INT 114
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: ST_TO_ADDR
21789: GO 22384
21791: LD_INT 17
21793: DOUBLE
21794: EQUAL
21795: IFTRUE 21799
21797: GO 22011
21799: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
21800: LD_ADDR_VAR 0 1
21804: PUSH
21805: LD_INT 1
21807: PUSH
21808: LD_INT 2
21810: PUSH
21811: LD_INT 3
21813: PUSH
21814: LD_INT 4
21816: PUSH
21817: LD_INT 5
21819: PUSH
21820: LD_INT 6
21822: PUSH
21823: LD_INT 7
21825: PUSH
21826: LD_INT 8
21828: PUSH
21829: LD_INT 9
21831: PUSH
21832: LD_INT 10
21834: PUSH
21835: LD_INT 11
21837: PUSH
21838: LD_INT 12
21840: PUSH
21841: LD_INT 13
21843: PUSH
21844: LD_INT 14
21846: PUSH
21847: LD_INT 15
21849: PUSH
21850: LD_INT 16
21852: PUSH
21853: LD_INT 17
21855: PUSH
21856: LD_INT 18
21858: PUSH
21859: LD_INT 19
21861: PUSH
21862: LD_INT 20
21864: PUSH
21865: LD_INT 21
21867: PUSH
21868: LD_INT 22
21870: PUSH
21871: LD_INT 23
21873: PUSH
21874: LD_INT 24
21876: PUSH
21877: LD_INT 25
21879: PUSH
21880: LD_INT 26
21882: PUSH
21883: LD_INT 27
21885: PUSH
21886: LD_INT 28
21888: PUSH
21889: LD_INT 29
21891: PUSH
21892: LD_INT 30
21894: PUSH
21895: LD_INT 31
21897: PUSH
21898: LD_INT 32
21900: PUSH
21901: LD_INT 33
21903: PUSH
21904: LD_INT 34
21906: PUSH
21907: LD_INT 36
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: PUSH
21947: LD_INT 101
21949: PUSH
21950: LD_INT 102
21952: PUSH
21953: LD_INT 103
21955: PUSH
21956: LD_INT 104
21958: PUSH
21959: LD_INT 105
21961: PUSH
21962: LD_INT 106
21964: PUSH
21965: LD_INT 107
21967: PUSH
21968: LD_INT 108
21970: PUSH
21971: LD_INT 109
21973: PUSH
21974: LD_INT 110
21976: PUSH
21977: LD_INT 111
21979: PUSH
21980: LD_INT 112
21982: PUSH
21983: LD_INT 113
21985: PUSH
21986: LD_INT 114
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: ST_TO_ADDR
22009: GO 22384
22011: LD_INT 18
22013: DOUBLE
22014: EQUAL
22015: IFTRUE 22019
22017: GO 22155
22019: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
22020: LD_ADDR_VAR 0 1
22024: PUSH
22025: LD_INT 2
22027: PUSH
22028: LD_INT 4
22030: PUSH
22031: LD_INT 5
22033: PUSH
22034: LD_INT 7
22036: PUSH
22037: LD_INT 11
22039: PUSH
22040: LD_INT 12
22042: PUSH
22043: LD_INT 15
22045: PUSH
22046: LD_INT 16
22048: PUSH
22049: LD_INT 20
22051: PUSH
22052: LD_INT 21
22054: PUSH
22055: LD_INT 22
22057: PUSH
22058: LD_INT 23
22060: PUSH
22061: LD_INT 25
22063: PUSH
22064: LD_INT 26
22066: PUSH
22067: LD_INT 30
22069: PUSH
22070: LD_INT 31
22072: PUSH
22073: LD_INT 32
22075: PUSH
22076: LD_INT 33
22078: PUSH
22079: LD_INT 34
22081: PUSH
22082: LD_INT 35
22084: PUSH
22085: LD_INT 36
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: PUSH
22111: LD_INT 101
22113: PUSH
22114: LD_INT 102
22116: PUSH
22117: LD_INT 103
22119: PUSH
22120: LD_INT 106
22122: PUSH
22123: LD_INT 108
22125: PUSH
22126: LD_INT 112
22128: PUSH
22129: LD_INT 113
22131: PUSH
22132: LD_INT 114
22134: PUSH
22135: LD_INT 115
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: ST_TO_ADDR
22153: GO 22384
22155: LD_INT 19
22157: DOUBLE
22158: EQUAL
22159: IFTRUE 22163
22161: GO 22383
22163: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
22164: LD_ADDR_VAR 0 1
22168: PUSH
22169: LD_INT 1
22171: PUSH
22172: LD_INT 2
22174: PUSH
22175: LD_INT 3
22177: PUSH
22178: LD_INT 4
22180: PUSH
22181: LD_INT 5
22183: PUSH
22184: LD_INT 6
22186: PUSH
22187: LD_INT 7
22189: PUSH
22190: LD_INT 8
22192: PUSH
22193: LD_INT 9
22195: PUSH
22196: LD_INT 10
22198: PUSH
22199: LD_INT 11
22201: PUSH
22202: LD_INT 12
22204: PUSH
22205: LD_INT 13
22207: PUSH
22208: LD_INT 14
22210: PUSH
22211: LD_INT 15
22213: PUSH
22214: LD_INT 16
22216: PUSH
22217: LD_INT 17
22219: PUSH
22220: LD_INT 18
22222: PUSH
22223: LD_INT 19
22225: PUSH
22226: LD_INT 20
22228: PUSH
22229: LD_INT 21
22231: PUSH
22232: LD_INT 22
22234: PUSH
22235: LD_INT 23
22237: PUSH
22238: LD_INT 24
22240: PUSH
22241: LD_INT 25
22243: PUSH
22244: LD_INT 26
22246: PUSH
22247: LD_INT 27
22249: PUSH
22250: LD_INT 28
22252: PUSH
22253: LD_INT 29
22255: PUSH
22256: LD_INT 30
22258: PUSH
22259: LD_INT 31
22261: PUSH
22262: LD_INT 32
22264: PUSH
22265: LD_INT 33
22267: PUSH
22268: LD_INT 34
22270: PUSH
22271: LD_INT 35
22273: PUSH
22274: LD_INT 36
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: PUSH
22315: LD_INT 101
22317: PUSH
22318: LD_INT 102
22320: PUSH
22321: LD_INT 103
22323: PUSH
22324: LD_INT 104
22326: PUSH
22327: LD_INT 105
22329: PUSH
22330: LD_INT 106
22332: PUSH
22333: LD_INT 107
22335: PUSH
22336: LD_INT 108
22338: PUSH
22339: LD_INT 109
22341: PUSH
22342: LD_INT 110
22344: PUSH
22345: LD_INT 111
22347: PUSH
22348: LD_INT 112
22350: PUSH
22351: LD_INT 113
22353: PUSH
22354: LD_INT 114
22356: PUSH
22357: LD_INT 115
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: ST_TO_ADDR
22381: GO 22384
22383: POP
// end else
22384: GO 22603
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
22386: LD_ADDR_VAR 0 1
22390: PUSH
22391: LD_INT 1
22393: PUSH
22394: LD_INT 2
22396: PUSH
22397: LD_INT 3
22399: PUSH
22400: LD_INT 4
22402: PUSH
22403: LD_INT 5
22405: PUSH
22406: LD_INT 6
22408: PUSH
22409: LD_INT 7
22411: PUSH
22412: LD_INT 8
22414: PUSH
22415: LD_INT 9
22417: PUSH
22418: LD_INT 10
22420: PUSH
22421: LD_INT 11
22423: PUSH
22424: LD_INT 12
22426: PUSH
22427: LD_INT 13
22429: PUSH
22430: LD_INT 14
22432: PUSH
22433: LD_INT 15
22435: PUSH
22436: LD_INT 16
22438: PUSH
22439: LD_INT 17
22441: PUSH
22442: LD_INT 18
22444: PUSH
22445: LD_INT 19
22447: PUSH
22448: LD_INT 20
22450: PUSH
22451: LD_INT 21
22453: PUSH
22454: LD_INT 22
22456: PUSH
22457: LD_INT 23
22459: PUSH
22460: LD_INT 24
22462: PUSH
22463: LD_INT 25
22465: PUSH
22466: LD_INT 26
22468: PUSH
22469: LD_INT 27
22471: PUSH
22472: LD_INT 28
22474: PUSH
22475: LD_INT 29
22477: PUSH
22478: LD_INT 30
22480: PUSH
22481: LD_INT 31
22483: PUSH
22484: LD_INT 32
22486: PUSH
22487: LD_INT 33
22489: PUSH
22490: LD_INT 34
22492: PUSH
22493: LD_INT 35
22495: PUSH
22496: LD_INT 36
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: PUSH
22537: LD_INT 101
22539: PUSH
22540: LD_INT 102
22542: PUSH
22543: LD_INT 103
22545: PUSH
22546: LD_INT 104
22548: PUSH
22549: LD_INT 105
22551: PUSH
22552: LD_INT 106
22554: PUSH
22555: LD_INT 107
22557: PUSH
22558: LD_INT 108
22560: PUSH
22561: LD_INT 109
22563: PUSH
22564: LD_INT 110
22566: PUSH
22567: LD_INT 111
22569: PUSH
22570: LD_INT 112
22572: PUSH
22573: LD_INT 113
22575: PUSH
22576: LD_INT 114
22578: PUSH
22579: LD_INT 115
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: ST_TO_ADDR
// if result then
22603: LD_VAR 0 1
22607: IFFALSE 22896
// begin normal :=  ;
22609: LD_ADDR_VAR 0 3
22613: PUSH
22614: LD_STRING 
22616: ST_TO_ADDR
// hardcore :=  ;
22617: LD_ADDR_VAR 0 4
22621: PUSH
22622: LD_STRING 
22624: ST_TO_ADDR
// for i = 1 to normalCounter do
22625: LD_ADDR_VAR 0 5
22629: PUSH
22630: DOUBLE
22631: LD_INT 1
22633: DEC
22634: ST_TO_ADDR
22635: LD_EXP 71
22639: PUSH
22640: FOR_TO
22641: IFFALSE 22742
// begin tmp := 0 ;
22643: LD_ADDR_VAR 0 2
22647: PUSH
22648: LD_STRING 0
22650: ST_TO_ADDR
// if result [ 1 ] then
22651: LD_VAR 0 1
22655: PUSH
22656: LD_INT 1
22658: ARRAY
22659: IFFALSE 22724
// if result [ 1 ] [ 1 ] = i then
22661: LD_VAR 0 1
22665: PUSH
22666: LD_INT 1
22668: ARRAY
22669: PUSH
22670: LD_INT 1
22672: ARRAY
22673: PUSH
22674: LD_VAR 0 5
22678: EQUAL
22679: IFFALSE 22724
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22681: LD_ADDR_VAR 0 1
22685: PUSH
22686: LD_VAR 0 1
22690: PPUSH
22691: LD_INT 1
22693: PPUSH
22694: LD_VAR 0 1
22698: PUSH
22699: LD_INT 1
22701: ARRAY
22702: PPUSH
22703: LD_INT 1
22705: PPUSH
22706: CALL_OW 3
22710: PPUSH
22711: CALL_OW 1
22715: ST_TO_ADDR
// tmp := 1 ;
22716: LD_ADDR_VAR 0 2
22720: PUSH
22721: LD_STRING 1
22723: ST_TO_ADDR
// end ; normal := normal & tmp ;
22724: LD_ADDR_VAR 0 3
22728: PUSH
22729: LD_VAR 0 3
22733: PUSH
22734: LD_VAR 0 2
22738: STR
22739: ST_TO_ADDR
// end ;
22740: GO 22640
22742: POP
22743: POP
// for i = 1 to hardcoreCounter do
22744: LD_ADDR_VAR 0 5
22748: PUSH
22749: DOUBLE
22750: LD_INT 1
22752: DEC
22753: ST_TO_ADDR
22754: LD_EXP 72
22758: PUSH
22759: FOR_TO
22760: IFFALSE 22865
// begin tmp := 0 ;
22762: LD_ADDR_VAR 0 2
22766: PUSH
22767: LD_STRING 0
22769: ST_TO_ADDR
// if result [ 2 ] then
22770: LD_VAR 0 1
22774: PUSH
22775: LD_INT 2
22777: ARRAY
22778: IFFALSE 22847
// if result [ 2 ] [ 1 ] = 100 + i then
22780: LD_VAR 0 1
22784: PUSH
22785: LD_INT 2
22787: ARRAY
22788: PUSH
22789: LD_INT 1
22791: ARRAY
22792: PUSH
22793: LD_INT 100
22795: PUSH
22796: LD_VAR 0 5
22800: PLUS
22801: EQUAL
22802: IFFALSE 22847
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22804: LD_ADDR_VAR 0 1
22808: PUSH
22809: LD_VAR 0 1
22813: PPUSH
22814: LD_INT 2
22816: PPUSH
22817: LD_VAR 0 1
22821: PUSH
22822: LD_INT 2
22824: ARRAY
22825: PPUSH
22826: LD_INT 1
22828: PPUSH
22829: CALL_OW 3
22833: PPUSH
22834: CALL_OW 1
22838: ST_TO_ADDR
// tmp := 1 ;
22839: LD_ADDR_VAR 0 2
22843: PUSH
22844: LD_STRING 1
22846: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22847: LD_ADDR_VAR 0 4
22851: PUSH
22852: LD_VAR 0 4
22856: PUSH
22857: LD_VAR 0 2
22861: STR
22862: ST_TO_ADDR
// end ;
22863: GO 22759
22865: POP
22866: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
22867: LD_STRING getStreamItemsFromMission("
22869: PUSH
22870: LD_VAR 0 3
22874: STR
22875: PUSH
22876: LD_STRING ","
22878: STR
22879: PUSH
22880: LD_VAR 0 4
22884: STR
22885: PUSH
22886: LD_STRING ")
22888: STR
22889: PPUSH
22890: CALL_OW 559
// end else
22894: GO 22903
// ToLua ( getStreamItemsFromMission("","") ) ;
22896: LD_STRING getStreamItemsFromMission("","")
22898: PPUSH
22899: CALL_OW 559
// end ;
22903: LD_VAR 0 1
22907: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
22908: LD_EXP 70
22912: PUSH
22913: LD_EXP 75
22917: AND
22918: IFFALSE 23042
22920: GO 22922
22922: DISABLE
22923: LD_INT 0
22925: PPUSH
22926: PPUSH
// begin enable ;
22927: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
22928: LD_ADDR_VAR 0 2
22932: PUSH
22933: LD_INT 22
22935: PUSH
22936: LD_OWVAR 2
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 2
22947: PUSH
22948: LD_INT 34
22950: PUSH
22951: LD_INT 7
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 34
22960: PUSH
22961: LD_INT 45
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 34
22970: PUSH
22971: LD_INT 28
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 34
22980: PUSH
22981: LD_INT 47
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: PPUSH
22999: CALL_OW 69
23003: ST_TO_ADDR
// if not tmp then
23004: LD_VAR 0 2
23008: NOT
23009: IFFALSE 23013
// exit ;
23011: GO 23042
// for i in tmp do
23013: LD_ADDR_VAR 0 1
23017: PUSH
23018: LD_VAR 0 2
23022: PUSH
23023: FOR_IN
23024: IFFALSE 23040
// begin SetLives ( i , 0 ) ;
23026: LD_VAR 0 1
23030: PPUSH
23031: LD_INT 0
23033: PPUSH
23034: CALL_OW 234
// end ;
23038: GO 23023
23040: POP
23041: POP
// end ;
23042: PPOPN 2
23044: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23045: LD_EXP 70
23049: PUSH
23050: LD_EXP 76
23054: AND
23055: IFFALSE 23139
23057: GO 23059
23059: DISABLE
23060: LD_INT 0
23062: PPUSH
23063: PPUSH
// begin enable ;
23064: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23065: LD_ADDR_VAR 0 2
23069: PUSH
23070: LD_INT 22
23072: PUSH
23073: LD_OWVAR 2
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 32
23084: PUSH
23085: LD_INT 3
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PPUSH
23096: CALL_OW 69
23100: ST_TO_ADDR
// if not tmp then
23101: LD_VAR 0 2
23105: NOT
23106: IFFALSE 23110
// exit ;
23108: GO 23139
// for i in tmp do
23110: LD_ADDR_VAR 0 1
23114: PUSH
23115: LD_VAR 0 2
23119: PUSH
23120: FOR_IN
23121: IFFALSE 23137
// begin SetLives ( i , 0 ) ;
23123: LD_VAR 0 1
23127: PPUSH
23128: LD_INT 0
23130: PPUSH
23131: CALL_OW 234
// end ;
23135: GO 23120
23137: POP
23138: POP
// end ;
23139: PPOPN 2
23141: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23142: LD_EXP 70
23146: PUSH
23147: LD_EXP 73
23151: AND
23152: IFFALSE 23245
23154: GO 23156
23156: DISABLE
23157: LD_INT 0
23159: PPUSH
// begin enable ;
23160: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23161: LD_ADDR_VAR 0 1
23165: PUSH
23166: LD_INT 22
23168: PUSH
23169: LD_OWVAR 2
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 2
23180: PUSH
23181: LD_INT 25
23183: PUSH
23184: LD_INT 5
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 25
23193: PUSH
23194: LD_INT 9
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: LD_INT 25
23203: PUSH
23204: LD_INT 8
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PPUSH
23221: CALL_OW 69
23225: PUSH
23226: FOR_IN
23227: IFFALSE 23243
// begin SetClass ( i , 1 ) ;
23229: LD_VAR 0 1
23233: PPUSH
23234: LD_INT 1
23236: PPUSH
23237: CALL_OW 336
// end ;
23241: GO 23226
23243: POP
23244: POP
// end ;
23245: PPOPN 1
23247: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23248: LD_EXP 70
23252: PUSH
23253: LD_EXP 74
23257: AND
23258: PUSH
23259: LD_OWVAR 65
23263: PUSH
23264: LD_INT 7
23266: LESS
23267: AND
23268: IFFALSE 23282
23270: GO 23272
23272: DISABLE
// begin enable ;
23273: ENABLE
// game_speed := 7 ;
23274: LD_ADDR_OWVAR 65
23278: PUSH
23279: LD_INT 7
23281: ST_TO_ADDR
// end ;
23282: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23283: LD_EXP 70
23287: PUSH
23288: LD_EXP 77
23292: AND
23293: IFFALSE 23495
23295: GO 23297
23297: DISABLE
23298: LD_INT 0
23300: PPUSH
23301: PPUSH
23302: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23303: LD_ADDR_VAR 0 3
23307: PUSH
23308: LD_INT 81
23310: PUSH
23311: LD_OWVAR 2
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PUSH
23320: LD_INT 21
23322: PUSH
23323: LD_INT 1
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PPUSH
23334: CALL_OW 69
23338: ST_TO_ADDR
// if not tmp then
23339: LD_VAR 0 3
23343: NOT
23344: IFFALSE 23348
// exit ;
23346: GO 23495
// if tmp > 5 then
23348: LD_VAR 0 3
23352: PUSH
23353: LD_INT 5
23355: GREATER
23356: IFFALSE 23368
// k := 5 else
23358: LD_ADDR_VAR 0 2
23362: PUSH
23363: LD_INT 5
23365: ST_TO_ADDR
23366: GO 23378
// k := tmp ;
23368: LD_ADDR_VAR 0 2
23372: PUSH
23373: LD_VAR 0 3
23377: ST_TO_ADDR
// for i := 1 to k do
23378: LD_ADDR_VAR 0 1
23382: PUSH
23383: DOUBLE
23384: LD_INT 1
23386: DEC
23387: ST_TO_ADDR
23388: LD_VAR 0 2
23392: PUSH
23393: FOR_TO
23394: IFFALSE 23493
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23396: LD_VAR 0 3
23400: PUSH
23401: LD_VAR 0 1
23405: ARRAY
23406: PPUSH
23407: LD_VAR 0 1
23411: PUSH
23412: LD_INT 4
23414: MOD
23415: PUSH
23416: LD_INT 1
23418: PLUS
23419: PPUSH
23420: CALL_OW 259
23424: PUSH
23425: LD_INT 10
23427: LESS
23428: IFFALSE 23491
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23430: LD_VAR 0 3
23434: PUSH
23435: LD_VAR 0 1
23439: ARRAY
23440: PPUSH
23441: LD_VAR 0 1
23445: PUSH
23446: LD_INT 4
23448: MOD
23449: PUSH
23450: LD_INT 1
23452: PLUS
23453: PPUSH
23454: LD_VAR 0 3
23458: PUSH
23459: LD_VAR 0 1
23463: ARRAY
23464: PPUSH
23465: LD_VAR 0 1
23469: PUSH
23470: LD_INT 4
23472: MOD
23473: PUSH
23474: LD_INT 1
23476: PLUS
23477: PPUSH
23478: CALL_OW 259
23482: PUSH
23483: LD_INT 1
23485: PLUS
23486: PPUSH
23487: CALL_OW 237
23491: GO 23393
23493: POP
23494: POP
// end ;
23495: PPOPN 3
23497: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23498: LD_EXP 70
23502: PUSH
23503: LD_EXP 78
23507: AND
23508: IFFALSE 23528
23510: GO 23512
23512: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23513: LD_INT 4
23515: PPUSH
23516: LD_OWVAR 2
23520: PPUSH
23521: LD_INT 0
23523: PPUSH
23524: CALL_OW 324
23528: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23529: LD_EXP 70
23533: PUSH
23534: LD_EXP 107
23538: AND
23539: IFFALSE 23559
23541: GO 23543
23543: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23544: LD_INT 19
23546: PPUSH
23547: LD_OWVAR 2
23551: PPUSH
23552: LD_INT 0
23554: PPUSH
23555: CALL_OW 324
23559: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23560: LD_EXP 70
23564: PUSH
23565: LD_EXP 79
23569: AND
23570: IFFALSE 23672
23572: GO 23574
23574: DISABLE
23575: LD_INT 0
23577: PPUSH
23578: PPUSH
// begin enable ;
23579: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23580: LD_ADDR_VAR 0 2
23584: PUSH
23585: LD_INT 22
23587: PUSH
23588: LD_OWVAR 2
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 2
23599: PUSH
23600: LD_INT 34
23602: PUSH
23603: LD_INT 11
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: PUSH
23610: LD_INT 34
23612: PUSH
23613: LD_INT 30
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: LIST
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PPUSH
23629: CALL_OW 69
23633: ST_TO_ADDR
// if not tmp then
23634: LD_VAR 0 2
23638: NOT
23639: IFFALSE 23643
// exit ;
23641: GO 23672
// for i in tmp do
23643: LD_ADDR_VAR 0 1
23647: PUSH
23648: LD_VAR 0 2
23652: PUSH
23653: FOR_IN
23654: IFFALSE 23670
// begin SetLives ( i , 0 ) ;
23656: LD_VAR 0 1
23660: PPUSH
23661: LD_INT 0
23663: PPUSH
23664: CALL_OW 234
// end ;
23668: GO 23653
23670: POP
23671: POP
// end ;
23672: PPOPN 2
23674: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23675: LD_EXP 70
23679: PUSH
23680: LD_EXP 80
23684: AND
23685: IFFALSE 23705
23687: GO 23689
23689: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23690: LD_INT 32
23692: PPUSH
23693: LD_OWVAR 2
23697: PPUSH
23698: LD_INT 0
23700: PPUSH
23701: CALL_OW 324
23705: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23706: LD_EXP 70
23710: PUSH
23711: LD_EXP 81
23715: AND
23716: IFFALSE 23897
23718: GO 23720
23720: DISABLE
23721: LD_INT 0
23723: PPUSH
23724: PPUSH
23725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23726: LD_ADDR_VAR 0 2
23730: PUSH
23731: LD_INT 22
23733: PUSH
23734: LD_OWVAR 2
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: LD_INT 33
23745: PUSH
23746: LD_INT 3
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: PPUSH
23757: CALL_OW 69
23761: ST_TO_ADDR
// if not tmp then
23762: LD_VAR 0 2
23766: NOT
23767: IFFALSE 23771
// exit ;
23769: GO 23897
// side := 0 ;
23771: LD_ADDR_VAR 0 3
23775: PUSH
23776: LD_INT 0
23778: ST_TO_ADDR
// for i := 1 to 8 do
23779: LD_ADDR_VAR 0 1
23783: PUSH
23784: DOUBLE
23785: LD_INT 1
23787: DEC
23788: ST_TO_ADDR
23789: LD_INT 8
23791: PUSH
23792: FOR_TO
23793: IFFALSE 23841
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23795: LD_OWVAR 2
23799: PUSH
23800: LD_VAR 0 1
23804: NONEQUAL
23805: PUSH
23806: LD_OWVAR 2
23810: PPUSH
23811: LD_VAR 0 1
23815: PPUSH
23816: CALL_OW 81
23820: PUSH
23821: LD_INT 2
23823: EQUAL
23824: AND
23825: IFFALSE 23839
// begin side := i ;
23827: LD_ADDR_VAR 0 3
23831: PUSH
23832: LD_VAR 0 1
23836: ST_TO_ADDR
// break ;
23837: GO 23841
// end ;
23839: GO 23792
23841: POP
23842: POP
// if not side then
23843: LD_VAR 0 3
23847: NOT
23848: IFFALSE 23852
// exit ;
23850: GO 23897
// for i := 1 to tmp do
23852: LD_ADDR_VAR 0 1
23856: PUSH
23857: DOUBLE
23858: LD_INT 1
23860: DEC
23861: ST_TO_ADDR
23862: LD_VAR 0 2
23866: PUSH
23867: FOR_TO
23868: IFFALSE 23895
// if Prob ( 60 ) then
23870: LD_INT 60
23872: PPUSH
23873: CALL_OW 13
23877: IFFALSE 23893
// SetSide ( i , side ) ;
23879: LD_VAR 0 1
23883: PPUSH
23884: LD_VAR 0 3
23888: PPUSH
23889: CALL_OW 235
23893: GO 23867
23895: POP
23896: POP
// end ;
23897: PPOPN 3
23899: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
23900: LD_EXP 70
23904: PUSH
23905: LD_EXP 83
23909: AND
23910: IFFALSE 24029
23912: GO 23914
23914: DISABLE
23915: LD_INT 0
23917: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
23918: LD_ADDR_VAR 0 1
23922: PUSH
23923: LD_INT 22
23925: PUSH
23926: LD_OWVAR 2
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 21
23937: PUSH
23938: LD_INT 1
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 3
23947: PUSH
23948: LD_INT 23
23950: PUSH
23951: LD_INT 0
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: LIST
23966: PPUSH
23967: CALL_OW 69
23971: PUSH
23972: FOR_IN
23973: IFFALSE 24027
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
23975: LD_VAR 0 1
23979: PPUSH
23980: CALL_OW 257
23984: PUSH
23985: LD_INT 1
23987: PUSH
23988: LD_INT 2
23990: PUSH
23991: LD_INT 3
23993: PUSH
23994: LD_INT 4
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: IN
24003: IFFALSE 24025
// SetClass ( un , rand ( 1 , 4 ) ) ;
24005: LD_VAR 0 1
24009: PPUSH
24010: LD_INT 1
24012: PPUSH
24013: LD_INT 4
24015: PPUSH
24016: CALL_OW 12
24020: PPUSH
24021: CALL_OW 336
24025: GO 23972
24027: POP
24028: POP
// end ;
24029: PPOPN 1
24031: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24032: LD_EXP 70
24036: PUSH
24037: LD_EXP 82
24041: AND
24042: IFFALSE 24121
24044: GO 24046
24046: DISABLE
24047: LD_INT 0
24049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24050: LD_ADDR_VAR 0 1
24054: PUSH
24055: LD_INT 22
24057: PUSH
24058: LD_OWVAR 2
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 21
24069: PUSH
24070: LD_INT 3
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PPUSH
24081: CALL_OW 69
24085: ST_TO_ADDR
// if not tmp then
24086: LD_VAR 0 1
24090: NOT
24091: IFFALSE 24095
// exit ;
24093: GO 24121
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24095: LD_VAR 0 1
24099: PUSH
24100: LD_INT 1
24102: PPUSH
24103: LD_VAR 0 1
24107: PPUSH
24108: CALL_OW 12
24112: ARRAY
24113: PPUSH
24114: LD_INT 100
24116: PPUSH
24117: CALL_OW 234
// end ;
24121: PPOPN 1
24123: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24124: LD_EXP 70
24128: PUSH
24129: LD_EXP 84
24133: AND
24134: IFFALSE 24232
24136: GO 24138
24138: DISABLE
24139: LD_INT 0
24141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24142: LD_ADDR_VAR 0 1
24146: PUSH
24147: LD_INT 22
24149: PUSH
24150: LD_OWVAR 2
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: LD_INT 21
24161: PUSH
24162: LD_INT 1
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PPUSH
24173: CALL_OW 69
24177: ST_TO_ADDR
// if not tmp then
24178: LD_VAR 0 1
24182: NOT
24183: IFFALSE 24187
// exit ;
24185: GO 24232
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24187: LD_VAR 0 1
24191: PUSH
24192: LD_INT 1
24194: PPUSH
24195: LD_VAR 0 1
24199: PPUSH
24200: CALL_OW 12
24204: ARRAY
24205: PPUSH
24206: LD_INT 1
24208: PPUSH
24209: LD_INT 4
24211: PPUSH
24212: CALL_OW 12
24216: PPUSH
24217: LD_INT 3000
24219: PPUSH
24220: LD_INT 9000
24222: PPUSH
24223: CALL_OW 12
24227: PPUSH
24228: CALL_OW 492
// end ;
24232: PPOPN 1
24234: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24235: LD_EXP 70
24239: PUSH
24240: LD_EXP 85
24244: AND
24245: IFFALSE 24265
24247: GO 24249
24249: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24250: LD_INT 1
24252: PPUSH
24253: LD_OWVAR 2
24257: PPUSH
24258: LD_INT 0
24260: PPUSH
24261: CALL_OW 324
24265: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24266: LD_EXP 70
24270: PUSH
24271: LD_EXP 86
24275: AND
24276: IFFALSE 24359
24278: GO 24280
24280: DISABLE
24281: LD_INT 0
24283: PPUSH
24284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24285: LD_ADDR_VAR 0 2
24289: PUSH
24290: LD_INT 22
24292: PUSH
24293: LD_OWVAR 2
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 21
24304: PUSH
24305: LD_INT 3
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PPUSH
24316: CALL_OW 69
24320: ST_TO_ADDR
// if not tmp then
24321: LD_VAR 0 2
24325: NOT
24326: IFFALSE 24330
// exit ;
24328: GO 24359
// for i in tmp do
24330: LD_ADDR_VAR 0 1
24334: PUSH
24335: LD_VAR 0 2
24339: PUSH
24340: FOR_IN
24341: IFFALSE 24357
// SetBLevel ( i , 10 ) ;
24343: LD_VAR 0 1
24347: PPUSH
24348: LD_INT 10
24350: PPUSH
24351: CALL_OW 241
24355: GO 24340
24357: POP
24358: POP
// end ;
24359: PPOPN 2
24361: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24362: LD_EXP 70
24366: PUSH
24367: LD_EXP 87
24371: AND
24372: IFFALSE 24483
24374: GO 24376
24376: DISABLE
24377: LD_INT 0
24379: PPUSH
24380: PPUSH
24381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24382: LD_ADDR_VAR 0 3
24386: PUSH
24387: LD_INT 22
24389: PUSH
24390: LD_OWVAR 2
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: PUSH
24399: LD_INT 25
24401: PUSH
24402: LD_INT 1
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PPUSH
24413: CALL_OW 69
24417: ST_TO_ADDR
// if not tmp then
24418: LD_VAR 0 3
24422: NOT
24423: IFFALSE 24427
// exit ;
24425: GO 24483
// un := tmp [ rand ( 1 , tmp ) ] ;
24427: LD_ADDR_VAR 0 2
24431: PUSH
24432: LD_VAR 0 3
24436: PUSH
24437: LD_INT 1
24439: PPUSH
24440: LD_VAR 0 3
24444: PPUSH
24445: CALL_OW 12
24449: ARRAY
24450: ST_TO_ADDR
// if Crawls ( un ) then
24451: LD_VAR 0 2
24455: PPUSH
24456: CALL_OW 318
24460: IFFALSE 24471
// ComWalk ( un ) ;
24462: LD_VAR 0 2
24466: PPUSH
24467: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24471: LD_VAR 0 2
24475: PPUSH
24476: LD_INT 5
24478: PPUSH
24479: CALL_OW 336
// end ;
24483: PPOPN 3
24485: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
24486: LD_EXP 70
24490: PUSH
24491: LD_EXP 88
24495: AND
24496: PUSH
24497: LD_OWVAR 67
24501: PUSH
24502: LD_INT 3
24504: LESS
24505: AND
24506: IFFALSE 24525
24508: GO 24510
24510: DISABLE
// Difficulty := Difficulty + 1 ;
24511: LD_ADDR_OWVAR 67
24515: PUSH
24516: LD_OWVAR 67
24520: PUSH
24521: LD_INT 1
24523: PLUS
24524: ST_TO_ADDR
24525: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24526: LD_EXP 70
24530: PUSH
24531: LD_EXP 89
24535: AND
24536: IFFALSE 24639
24538: GO 24540
24540: DISABLE
24541: LD_INT 0
24543: PPUSH
// begin for i := 1 to 5 do
24544: LD_ADDR_VAR 0 1
24548: PUSH
24549: DOUBLE
24550: LD_INT 1
24552: DEC
24553: ST_TO_ADDR
24554: LD_INT 5
24556: PUSH
24557: FOR_TO
24558: IFFALSE 24637
// begin uc_nation := nation_nature ;
24560: LD_ADDR_OWVAR 21
24564: PUSH
24565: LD_INT 0
24567: ST_TO_ADDR
// uc_side := 0 ;
24568: LD_ADDR_OWVAR 20
24572: PUSH
24573: LD_INT 0
24575: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24576: LD_ADDR_OWVAR 29
24580: PUSH
24581: LD_INT 12
24583: PUSH
24584: LD_INT 12
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: ST_TO_ADDR
// hc_agressivity := 20 ;
24591: LD_ADDR_OWVAR 35
24595: PUSH
24596: LD_INT 20
24598: ST_TO_ADDR
// hc_class := class_tiger ;
24599: LD_ADDR_OWVAR 28
24603: PUSH
24604: LD_INT 14
24606: ST_TO_ADDR
// hc_gallery :=  ;
24607: LD_ADDR_OWVAR 33
24611: PUSH
24612: LD_STRING 
24614: ST_TO_ADDR
// hc_name :=  ;
24615: LD_ADDR_OWVAR 26
24619: PUSH
24620: LD_STRING 
24622: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24623: CALL_OW 44
24627: PPUSH
24628: LD_INT 0
24630: PPUSH
24631: CALL_OW 51
// end ;
24635: GO 24557
24637: POP
24638: POP
// end ;
24639: PPOPN 1
24641: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24642: LD_EXP 70
24646: PUSH
24647: LD_EXP 90
24651: AND
24652: IFFALSE 24661
24654: GO 24656
24656: DISABLE
// StreamSibBomb ;
24657: CALL 24662 0 0
24661: END
// export function StreamSibBomb ; var i , x , y ; begin
24662: LD_INT 0
24664: PPUSH
24665: PPUSH
24666: PPUSH
24667: PPUSH
// result := false ;
24668: LD_ADDR_VAR 0 1
24672: PUSH
24673: LD_INT 0
24675: ST_TO_ADDR
// for i := 1 to 16 do
24676: LD_ADDR_VAR 0 2
24680: PUSH
24681: DOUBLE
24682: LD_INT 1
24684: DEC
24685: ST_TO_ADDR
24686: LD_INT 16
24688: PUSH
24689: FOR_TO
24690: IFFALSE 24889
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24692: LD_ADDR_VAR 0 3
24696: PUSH
24697: LD_INT 10
24699: PUSH
24700: LD_INT 20
24702: PUSH
24703: LD_INT 30
24705: PUSH
24706: LD_INT 40
24708: PUSH
24709: LD_INT 50
24711: PUSH
24712: LD_INT 60
24714: PUSH
24715: LD_INT 70
24717: PUSH
24718: LD_INT 80
24720: PUSH
24721: LD_INT 90
24723: PUSH
24724: LD_INT 100
24726: PUSH
24727: LD_INT 110
24729: PUSH
24730: LD_INT 120
24732: PUSH
24733: LD_INT 130
24735: PUSH
24736: LD_INT 140
24738: PUSH
24739: LD_INT 150
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 1
24761: PPUSH
24762: LD_INT 15
24764: PPUSH
24765: CALL_OW 12
24769: ARRAY
24770: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24771: LD_ADDR_VAR 0 4
24775: PUSH
24776: LD_INT 10
24778: PUSH
24779: LD_INT 20
24781: PUSH
24782: LD_INT 30
24784: PUSH
24785: LD_INT 40
24787: PUSH
24788: LD_INT 50
24790: PUSH
24791: LD_INT 60
24793: PUSH
24794: LD_INT 70
24796: PUSH
24797: LD_INT 80
24799: PUSH
24800: LD_INT 90
24802: PUSH
24803: LD_INT 100
24805: PUSH
24806: LD_INT 110
24808: PUSH
24809: LD_INT 120
24811: PUSH
24812: LD_INT 130
24814: PUSH
24815: LD_INT 140
24817: PUSH
24818: LD_INT 150
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 1
24840: PPUSH
24841: LD_INT 15
24843: PPUSH
24844: CALL_OW 12
24848: ARRAY
24849: ST_TO_ADDR
// if ValidHex ( x , y ) then
24850: LD_VAR 0 3
24854: PPUSH
24855: LD_VAR 0 4
24859: PPUSH
24860: CALL_OW 488
24864: IFFALSE 24887
// begin result := [ x , y ] ;
24866: LD_ADDR_VAR 0 1
24870: PUSH
24871: LD_VAR 0 3
24875: PUSH
24876: LD_VAR 0 4
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: ST_TO_ADDR
// break ;
24885: GO 24889
// end ; end ;
24887: GO 24689
24889: POP
24890: POP
// if result then
24891: LD_VAR 0 1
24895: IFFALSE 24955
// begin ToLua ( playSibBomb() ) ;
24897: LD_STRING playSibBomb()
24899: PPUSH
24900: CALL_OW 559
// wait ( 0 0$14 ) ;
24904: LD_INT 490
24906: PPUSH
24907: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
24911: LD_VAR 0 1
24915: PUSH
24916: LD_INT 1
24918: ARRAY
24919: PPUSH
24920: LD_VAR 0 1
24924: PUSH
24925: LD_INT 2
24927: ARRAY
24928: PPUSH
24929: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
24933: LD_VAR 0 1
24937: PUSH
24938: LD_INT 1
24940: ARRAY
24941: PPUSH
24942: LD_VAR 0 1
24946: PUSH
24947: LD_INT 2
24949: ARRAY
24950: PPUSH
24951: CALL_OW 429
// end ; end ;
24955: LD_VAR 0 1
24959: RET
// every 0 0$1 trigger StreamModeActive and sReset do
24960: LD_EXP 70
24964: PUSH
24965: LD_EXP 92
24969: AND
24970: IFFALSE 24982
24972: GO 24974
24974: DISABLE
// YouLost (  ) ;
24975: LD_STRING 
24977: PPUSH
24978: CALL_OW 104
24982: END
// every 0 0$1 trigger StreamModeActive and sFog do
24983: LD_EXP 70
24987: PUSH
24988: LD_EXP 91
24992: AND
24993: IFFALSE 25007
24995: GO 24997
24997: DISABLE
// FogOff ( your_side ) ;
24998: LD_OWVAR 2
25002: PPUSH
25003: CALL_OW 344
25007: END
// every 0 0$1 trigger StreamModeActive and sSun do
25008: LD_EXP 70
25012: PUSH
25013: LD_EXP 93
25017: AND
25018: IFFALSE 25046
25020: GO 25022
25022: DISABLE
// begin solar_recharge_percent := 0 ;
25023: LD_ADDR_OWVAR 79
25027: PUSH
25028: LD_INT 0
25030: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25031: LD_INT 10500
25033: PPUSH
25034: CALL_OW 67
// solar_recharge_percent := 100 ;
25038: LD_ADDR_OWVAR 79
25042: PUSH
25043: LD_INT 100
25045: ST_TO_ADDR
// end ;
25046: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25047: LD_EXP 70
25051: PUSH
25052: LD_EXP 94
25056: AND
25057: IFFALSE 25296
25059: GO 25061
25061: DISABLE
25062: LD_INT 0
25064: PPUSH
25065: PPUSH
25066: PPUSH
// begin tmp := [ ] ;
25067: LD_ADDR_VAR 0 3
25071: PUSH
25072: EMPTY
25073: ST_TO_ADDR
// for i := 1 to 6 do
25074: LD_ADDR_VAR 0 1
25078: PUSH
25079: DOUBLE
25080: LD_INT 1
25082: DEC
25083: ST_TO_ADDR
25084: LD_INT 6
25086: PUSH
25087: FOR_TO
25088: IFFALSE 25193
// begin uc_nation := nation_nature ;
25090: LD_ADDR_OWVAR 21
25094: PUSH
25095: LD_INT 0
25097: ST_TO_ADDR
// uc_side := 0 ;
25098: LD_ADDR_OWVAR 20
25102: PUSH
25103: LD_INT 0
25105: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25106: LD_ADDR_OWVAR 29
25110: PUSH
25111: LD_INT 12
25113: PUSH
25114: LD_INT 12
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: ST_TO_ADDR
// hc_agressivity := 20 ;
25121: LD_ADDR_OWVAR 35
25125: PUSH
25126: LD_INT 20
25128: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25129: LD_ADDR_OWVAR 28
25133: PUSH
25134: LD_INT 17
25136: ST_TO_ADDR
// hc_gallery :=  ;
25137: LD_ADDR_OWVAR 33
25141: PUSH
25142: LD_STRING 
25144: ST_TO_ADDR
// hc_name :=  ;
25145: LD_ADDR_OWVAR 26
25149: PUSH
25150: LD_STRING 
25152: ST_TO_ADDR
// un := CreateHuman ;
25153: LD_ADDR_VAR 0 2
25157: PUSH
25158: CALL_OW 44
25162: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25163: LD_VAR 0 2
25167: PPUSH
25168: LD_INT 1
25170: PPUSH
25171: CALL_OW 51
// tmp := tmp ^ un ;
25175: LD_ADDR_VAR 0 3
25179: PUSH
25180: LD_VAR 0 3
25184: PUSH
25185: LD_VAR 0 2
25189: ADD
25190: ST_TO_ADDR
// end ;
25191: GO 25087
25193: POP
25194: POP
// repeat wait ( 0 0$1 ) ;
25195: LD_INT 35
25197: PPUSH
25198: CALL_OW 67
// for un in tmp do
25202: LD_ADDR_VAR 0 2
25206: PUSH
25207: LD_VAR 0 3
25211: PUSH
25212: FOR_IN
25213: IFFALSE 25287
// begin if IsDead ( un ) then
25215: LD_VAR 0 2
25219: PPUSH
25220: CALL_OW 301
25224: IFFALSE 25244
// begin tmp := tmp diff un ;
25226: LD_ADDR_VAR 0 3
25230: PUSH
25231: LD_VAR 0 3
25235: PUSH
25236: LD_VAR 0 2
25240: DIFF
25241: ST_TO_ADDR
// continue ;
25242: GO 25212
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25244: LD_VAR 0 2
25248: PPUSH
25249: LD_INT 3
25251: PUSH
25252: LD_INT 22
25254: PUSH
25255: LD_INT 0
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: PPUSH
25266: CALL_OW 69
25270: PPUSH
25271: LD_VAR 0 2
25275: PPUSH
25276: CALL_OW 74
25280: PPUSH
25281: CALL_OW 115
// end ;
25285: GO 25212
25287: POP
25288: POP
// until not tmp ;
25289: LD_VAR 0 3
25293: NOT
25294: IFFALSE 25195
// end ;
25296: PPOPN 3
25298: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25299: LD_EXP 70
25303: PUSH
25304: LD_EXP 95
25308: AND
25309: IFFALSE 25363
25311: GO 25313
25313: DISABLE
// begin ToLua ( displayTroll(); ) ;
25314: LD_STRING displayTroll();
25316: PPUSH
25317: CALL_OW 559
// wait ( 3 3$00 ) ;
25321: LD_INT 6300
25323: PPUSH
25324: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25328: LD_STRING hideTroll();
25330: PPUSH
25331: CALL_OW 559
// wait ( 1 1$00 ) ;
25335: LD_INT 2100
25337: PPUSH
25338: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25342: LD_STRING displayTroll();
25344: PPUSH
25345: CALL_OW 559
// wait ( 1 1$00 ) ;
25349: LD_INT 2100
25351: PPUSH
25352: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25356: LD_STRING hideTroll();
25358: PPUSH
25359: CALL_OW 559
// end ;
25363: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25364: LD_EXP 70
25368: PUSH
25369: LD_EXP 96
25373: AND
25374: IFFALSE 25437
25376: GO 25378
25378: DISABLE
25379: LD_INT 0
25381: PPUSH
// begin p := 0 ;
25382: LD_ADDR_VAR 0 1
25386: PUSH
25387: LD_INT 0
25389: ST_TO_ADDR
// repeat game_speed := 1 ;
25390: LD_ADDR_OWVAR 65
25394: PUSH
25395: LD_INT 1
25397: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25398: LD_INT 35
25400: PPUSH
25401: CALL_OW 67
// p := p + 1 ;
25405: LD_ADDR_VAR 0 1
25409: PUSH
25410: LD_VAR 0 1
25414: PUSH
25415: LD_INT 1
25417: PLUS
25418: ST_TO_ADDR
// until p >= 60 ;
25419: LD_VAR 0 1
25423: PUSH
25424: LD_INT 60
25426: GREATEREQUAL
25427: IFFALSE 25390
// game_speed := 4 ;
25429: LD_ADDR_OWVAR 65
25433: PUSH
25434: LD_INT 4
25436: ST_TO_ADDR
// end ;
25437: PPOPN 1
25439: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25440: LD_EXP 70
25444: PUSH
25445: LD_EXP 97
25449: AND
25450: IFFALSE 25596
25452: GO 25454
25454: DISABLE
25455: LD_INT 0
25457: PPUSH
25458: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25459: LD_ADDR_VAR 0 1
25463: PUSH
25464: LD_INT 22
25466: PUSH
25467: LD_OWVAR 2
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 2
25478: PUSH
25479: LD_INT 30
25481: PUSH
25482: LD_INT 0
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 30
25491: PUSH
25492: LD_INT 1
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: LIST
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PPUSH
25508: CALL_OW 69
25512: ST_TO_ADDR
// if not depot then
25513: LD_VAR 0 1
25517: NOT
25518: IFFALSE 25522
// exit ;
25520: GO 25596
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25522: LD_ADDR_VAR 0 2
25526: PUSH
25527: LD_VAR 0 1
25531: PUSH
25532: LD_INT 1
25534: PPUSH
25535: LD_VAR 0 1
25539: PPUSH
25540: CALL_OW 12
25544: ARRAY
25545: PPUSH
25546: CALL_OW 274
25550: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25551: LD_VAR 0 2
25555: PPUSH
25556: LD_INT 1
25558: PPUSH
25559: LD_INT 0
25561: PPUSH
25562: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25566: LD_VAR 0 2
25570: PPUSH
25571: LD_INT 2
25573: PPUSH
25574: LD_INT 0
25576: PPUSH
25577: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25581: LD_VAR 0 2
25585: PPUSH
25586: LD_INT 3
25588: PPUSH
25589: LD_INT 0
25591: PPUSH
25592: CALL_OW 277
// end ;
25596: PPOPN 2
25598: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25599: LD_EXP 70
25603: PUSH
25604: LD_EXP 98
25608: AND
25609: IFFALSE 25706
25611: GO 25613
25613: DISABLE
25614: LD_INT 0
25616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25617: LD_ADDR_VAR 0 1
25621: PUSH
25622: LD_INT 22
25624: PUSH
25625: LD_OWVAR 2
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: LD_INT 21
25636: PUSH
25637: LD_INT 1
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PUSH
25644: LD_INT 3
25646: PUSH
25647: LD_INT 23
25649: PUSH
25650: LD_INT 0
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: LIST
25665: PPUSH
25666: CALL_OW 69
25670: ST_TO_ADDR
// if not tmp then
25671: LD_VAR 0 1
25675: NOT
25676: IFFALSE 25680
// exit ;
25678: GO 25706
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25680: LD_VAR 0 1
25684: PUSH
25685: LD_INT 1
25687: PPUSH
25688: LD_VAR 0 1
25692: PPUSH
25693: CALL_OW 12
25697: ARRAY
25698: PPUSH
25699: LD_INT 200
25701: PPUSH
25702: CALL_OW 234
// end ;
25706: PPOPN 1
25708: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25709: LD_EXP 70
25713: PUSH
25714: LD_EXP 99
25718: AND
25719: IFFALSE 25798
25721: GO 25723
25723: DISABLE
25724: LD_INT 0
25726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25727: LD_ADDR_VAR 0 1
25731: PUSH
25732: LD_INT 22
25734: PUSH
25735: LD_OWVAR 2
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 21
25746: PUSH
25747: LD_INT 2
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PPUSH
25758: CALL_OW 69
25762: ST_TO_ADDR
// if not tmp then
25763: LD_VAR 0 1
25767: NOT
25768: IFFALSE 25772
// exit ;
25770: GO 25798
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25772: LD_VAR 0 1
25776: PUSH
25777: LD_INT 1
25779: PPUSH
25780: LD_VAR 0 1
25784: PPUSH
25785: CALL_OW 12
25789: ARRAY
25790: PPUSH
25791: LD_INT 60
25793: PPUSH
25794: CALL_OW 234
// end ;
25798: PPOPN 1
25800: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
25801: LD_EXP 70
25805: PUSH
25806: LD_EXP 100
25810: AND
25811: IFFALSE 25910
25813: GO 25815
25815: DISABLE
25816: LD_INT 0
25818: PPUSH
25819: PPUSH
// begin enable ;
25820: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
25821: LD_ADDR_VAR 0 1
25825: PUSH
25826: LD_INT 22
25828: PUSH
25829: LD_OWVAR 2
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 61
25840: PUSH
25841: EMPTY
25842: LIST
25843: PUSH
25844: LD_INT 33
25846: PUSH
25847: LD_INT 2
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: LIST
25858: PPUSH
25859: CALL_OW 69
25863: ST_TO_ADDR
// if not tmp then
25864: LD_VAR 0 1
25868: NOT
25869: IFFALSE 25873
// exit ;
25871: GO 25910
// for i in tmp do
25873: LD_ADDR_VAR 0 2
25877: PUSH
25878: LD_VAR 0 1
25882: PUSH
25883: FOR_IN
25884: IFFALSE 25908
// if IsControledBy ( i ) then
25886: LD_VAR 0 2
25890: PPUSH
25891: CALL_OW 312
25895: IFFALSE 25906
// ComUnlink ( i ) ;
25897: LD_VAR 0 2
25901: PPUSH
25902: CALL_OW 136
25906: GO 25883
25908: POP
25909: POP
// end ;
25910: PPOPN 2
25912: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
25913: LD_EXP 70
25917: PUSH
25918: LD_EXP 101
25922: AND
25923: IFFALSE 26063
25925: GO 25927
25927: DISABLE
25928: LD_INT 0
25930: PPUSH
25931: PPUSH
// begin ToLua ( displayPowell(); ) ;
25932: LD_STRING displayPowell();
25934: PPUSH
25935: CALL_OW 559
// uc_side := 0 ;
25939: LD_ADDR_OWVAR 20
25943: PUSH
25944: LD_INT 0
25946: ST_TO_ADDR
// uc_nation := 2 ;
25947: LD_ADDR_OWVAR 21
25951: PUSH
25952: LD_INT 2
25954: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
25955: LD_ADDR_OWVAR 37
25959: PUSH
25960: LD_INT 14
25962: ST_TO_ADDR
// vc_engine := engine_siberite ;
25963: LD_ADDR_OWVAR 39
25967: PUSH
25968: LD_INT 3
25970: ST_TO_ADDR
// vc_control := control_apeman ;
25971: LD_ADDR_OWVAR 38
25975: PUSH
25976: LD_INT 5
25978: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25979: LD_ADDR_OWVAR 40
25983: PUSH
25984: LD_INT 29
25986: ST_TO_ADDR
// un := CreateVehicle ;
25987: LD_ADDR_VAR 0 2
25991: PUSH
25992: CALL_OW 45
25996: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25997: LD_VAR 0 2
26001: PPUSH
26002: LD_INT 1
26004: PPUSH
26005: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26009: LD_INT 35
26011: PPUSH
26012: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26016: LD_VAR 0 2
26020: PPUSH
26021: LD_INT 22
26023: PUSH
26024: LD_OWVAR 2
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PPUSH
26033: CALL_OW 69
26037: PPUSH
26038: LD_VAR 0 2
26042: PPUSH
26043: CALL_OW 74
26047: PPUSH
26048: CALL_OW 115
// until IsDead ( un ) ;
26052: LD_VAR 0 2
26056: PPUSH
26057: CALL_OW 301
26061: IFFALSE 26009
// end ;
26063: PPOPN 2
26065: END
// every 0 0$1 trigger StreamModeActive and sStu do
26066: LD_EXP 70
26070: PUSH
26071: LD_EXP 109
26075: AND
26076: IFFALSE 26092
26078: GO 26080
26080: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26081: LD_STRING displayStucuk();
26083: PPUSH
26084: CALL_OW 559
// ResetFog ;
26088: CALL_OW 335
// end ;
26092: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26093: LD_EXP 70
26097: PUSH
26098: LD_EXP 102
26102: AND
26103: IFFALSE 26244
26105: GO 26107
26107: DISABLE
26108: LD_INT 0
26110: PPUSH
26111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26112: LD_ADDR_VAR 0 2
26116: PUSH
26117: LD_INT 22
26119: PUSH
26120: LD_OWVAR 2
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 21
26131: PUSH
26132: LD_INT 1
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PPUSH
26143: CALL_OW 69
26147: ST_TO_ADDR
// if not tmp then
26148: LD_VAR 0 2
26152: NOT
26153: IFFALSE 26157
// exit ;
26155: GO 26244
// un := tmp [ rand ( 1 , tmp ) ] ;
26157: LD_ADDR_VAR 0 1
26161: PUSH
26162: LD_VAR 0 2
26166: PUSH
26167: LD_INT 1
26169: PPUSH
26170: LD_VAR 0 2
26174: PPUSH
26175: CALL_OW 12
26179: ARRAY
26180: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26181: LD_VAR 0 1
26185: PPUSH
26186: LD_INT 0
26188: PPUSH
26189: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26193: LD_VAR 0 1
26197: PPUSH
26198: LD_OWVAR 3
26202: PUSH
26203: LD_VAR 0 1
26207: DIFF
26208: PPUSH
26209: LD_VAR 0 1
26213: PPUSH
26214: CALL_OW 74
26218: PPUSH
26219: CALL_OW 115
// wait ( 0 0$20 ) ;
26223: LD_INT 700
26225: PPUSH
26226: CALL_OW 67
// SetSide ( un , your_side ) ;
26230: LD_VAR 0 1
26234: PPUSH
26235: LD_OWVAR 2
26239: PPUSH
26240: CALL_OW 235
// end ;
26244: PPOPN 2
26246: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26247: LD_EXP 70
26251: PUSH
26252: LD_EXP 103
26256: AND
26257: IFFALSE 26363
26259: GO 26261
26261: DISABLE
26262: LD_INT 0
26264: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26265: LD_ADDR_VAR 0 1
26269: PUSH
26270: LD_INT 22
26272: PUSH
26273: LD_OWVAR 2
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 2
26284: PUSH
26285: LD_INT 30
26287: PUSH
26288: LD_INT 0
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 30
26297: PUSH
26298: LD_INT 1
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: LIST
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PPUSH
26314: CALL_OW 69
26318: ST_TO_ADDR
// if not depot then
26319: LD_VAR 0 1
26323: NOT
26324: IFFALSE 26328
// exit ;
26326: GO 26363
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26328: LD_VAR 0 1
26332: PUSH
26333: LD_INT 1
26335: ARRAY
26336: PPUSH
26337: CALL_OW 250
26341: PPUSH
26342: LD_VAR 0 1
26346: PUSH
26347: LD_INT 1
26349: ARRAY
26350: PPUSH
26351: CALL_OW 251
26355: PPUSH
26356: LD_INT 70
26358: PPUSH
26359: CALL_OW 495
// end ;
26363: PPOPN 1
26365: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26366: LD_EXP 70
26370: PUSH
26371: LD_EXP 104
26375: AND
26376: IFFALSE 26587
26378: GO 26380
26380: DISABLE
26381: LD_INT 0
26383: PPUSH
26384: PPUSH
26385: PPUSH
26386: PPUSH
26387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26388: LD_ADDR_VAR 0 5
26392: PUSH
26393: LD_INT 22
26395: PUSH
26396: LD_OWVAR 2
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 21
26407: PUSH
26408: LD_INT 1
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PPUSH
26419: CALL_OW 69
26423: ST_TO_ADDR
// if not tmp then
26424: LD_VAR 0 5
26428: NOT
26429: IFFALSE 26433
// exit ;
26431: GO 26587
// for i in tmp do
26433: LD_ADDR_VAR 0 1
26437: PUSH
26438: LD_VAR 0 5
26442: PUSH
26443: FOR_IN
26444: IFFALSE 26585
// begin d := rand ( 0 , 5 ) ;
26446: LD_ADDR_VAR 0 4
26450: PUSH
26451: LD_INT 0
26453: PPUSH
26454: LD_INT 5
26456: PPUSH
26457: CALL_OW 12
26461: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26462: LD_ADDR_VAR 0 2
26466: PUSH
26467: LD_VAR 0 1
26471: PPUSH
26472: CALL_OW 250
26476: PPUSH
26477: LD_VAR 0 4
26481: PPUSH
26482: LD_INT 3
26484: PPUSH
26485: LD_INT 12
26487: PPUSH
26488: CALL_OW 12
26492: PPUSH
26493: CALL_OW 272
26497: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26498: LD_ADDR_VAR 0 3
26502: PUSH
26503: LD_VAR 0 1
26507: PPUSH
26508: CALL_OW 251
26512: PPUSH
26513: LD_VAR 0 4
26517: PPUSH
26518: LD_INT 3
26520: PPUSH
26521: LD_INT 12
26523: PPUSH
26524: CALL_OW 12
26528: PPUSH
26529: CALL_OW 273
26533: ST_TO_ADDR
// if ValidHex ( x , y ) then
26534: LD_VAR 0 2
26538: PPUSH
26539: LD_VAR 0 3
26543: PPUSH
26544: CALL_OW 488
26548: IFFALSE 26583
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26550: LD_VAR 0 1
26554: PPUSH
26555: LD_VAR 0 2
26559: PPUSH
26560: LD_VAR 0 3
26564: PPUSH
26565: LD_INT 3
26567: PPUSH
26568: LD_INT 6
26570: PPUSH
26571: CALL_OW 12
26575: PPUSH
26576: LD_INT 1
26578: PPUSH
26579: CALL_OW 483
// end ;
26583: GO 26443
26585: POP
26586: POP
// end ;
26587: PPOPN 5
26589: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26590: LD_EXP 70
26594: PUSH
26595: LD_EXP 105
26599: AND
26600: IFFALSE 26694
26602: GO 26604
26604: DISABLE
26605: LD_INT 0
26607: PPUSH
26608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26609: LD_ADDR_VAR 0 2
26613: PUSH
26614: LD_INT 22
26616: PUSH
26617: LD_OWVAR 2
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 32
26628: PUSH
26629: LD_INT 1
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 21
26638: PUSH
26639: LD_INT 2
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: LIST
26650: PPUSH
26651: CALL_OW 69
26655: ST_TO_ADDR
// if not tmp then
26656: LD_VAR 0 2
26660: NOT
26661: IFFALSE 26665
// exit ;
26663: GO 26694
// for i in tmp do
26665: LD_ADDR_VAR 0 1
26669: PUSH
26670: LD_VAR 0 2
26674: PUSH
26675: FOR_IN
26676: IFFALSE 26692
// SetFuel ( i , 0 ) ;
26678: LD_VAR 0 1
26682: PPUSH
26683: LD_INT 0
26685: PPUSH
26686: CALL_OW 240
26690: GO 26675
26692: POP
26693: POP
// end ;
26694: PPOPN 2
26696: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26697: LD_EXP 70
26701: PUSH
26702: LD_EXP 106
26706: AND
26707: IFFALSE 26773
26709: GO 26711
26711: DISABLE
26712: LD_INT 0
26714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26715: LD_ADDR_VAR 0 1
26719: PUSH
26720: LD_INT 22
26722: PUSH
26723: LD_OWVAR 2
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 30
26734: PUSH
26735: LD_INT 29
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PPUSH
26746: CALL_OW 69
26750: ST_TO_ADDR
// if not tmp then
26751: LD_VAR 0 1
26755: NOT
26756: IFFALSE 26760
// exit ;
26758: GO 26773
// DestroyUnit ( tmp [ 1 ] ) ;
26760: LD_VAR 0 1
26764: PUSH
26765: LD_INT 1
26767: ARRAY
26768: PPUSH
26769: CALL_OW 65
// end ;
26773: PPOPN 1
26775: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
26776: LD_EXP 70
26780: PUSH
26781: LD_EXP 108
26785: AND
26786: IFFALSE 26915
26788: GO 26790
26790: DISABLE
26791: LD_INT 0
26793: PPUSH
// begin uc_side := 0 ;
26794: LD_ADDR_OWVAR 20
26798: PUSH
26799: LD_INT 0
26801: ST_TO_ADDR
// uc_nation := nation_arabian ;
26802: LD_ADDR_OWVAR 21
26806: PUSH
26807: LD_INT 2
26809: ST_TO_ADDR
// hc_gallery :=  ;
26810: LD_ADDR_OWVAR 33
26814: PUSH
26815: LD_STRING 
26817: ST_TO_ADDR
// hc_name :=  ;
26818: LD_ADDR_OWVAR 26
26822: PUSH
26823: LD_STRING 
26825: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
26826: LD_INT 1
26828: PPUSH
26829: LD_INT 11
26831: PPUSH
26832: LD_INT 10
26834: PPUSH
26835: CALL_OW 380
// un := CreateHuman ;
26839: LD_ADDR_VAR 0 1
26843: PUSH
26844: CALL_OW 44
26848: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26849: LD_VAR 0 1
26853: PPUSH
26854: LD_INT 1
26856: PPUSH
26857: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26861: LD_INT 35
26863: PPUSH
26864: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26868: LD_VAR 0 1
26872: PPUSH
26873: LD_INT 22
26875: PUSH
26876: LD_OWVAR 2
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PPUSH
26885: CALL_OW 69
26889: PPUSH
26890: LD_VAR 0 1
26894: PPUSH
26895: CALL_OW 74
26899: PPUSH
26900: CALL_OW 115
// until IsDead ( un ) ;
26904: LD_VAR 0 1
26908: PPUSH
26909: CALL_OW 301
26913: IFFALSE 26861
// end ;
26915: PPOPN 1
26917: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
26918: LD_EXP 70
26922: PUSH
26923: LD_EXP 110
26927: AND
26928: IFFALSE 26940
26930: GO 26932
26932: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
26933: LD_STRING earthquake(getX(game), 0, 32)
26935: PPUSH
26936: CALL_OW 559
26940: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
26941: LD_EXP 70
26945: PUSH
26946: LD_EXP 111
26950: AND
26951: IFFALSE 27042
26953: GO 26955
26955: DISABLE
26956: LD_INT 0
26958: PPUSH
// begin enable ;
26959: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26960: LD_ADDR_VAR 0 1
26964: PUSH
26965: LD_INT 22
26967: PUSH
26968: LD_OWVAR 2
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 21
26979: PUSH
26980: LD_INT 2
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 33
26989: PUSH
26990: LD_INT 3
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: LIST
27001: PPUSH
27002: CALL_OW 69
27006: ST_TO_ADDR
// if not tmp then
27007: LD_VAR 0 1
27011: NOT
27012: IFFALSE 27016
// exit ;
27014: GO 27042
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27016: LD_VAR 0 1
27020: PUSH
27021: LD_INT 1
27023: PPUSH
27024: LD_VAR 0 1
27028: PPUSH
27029: CALL_OW 12
27033: ARRAY
27034: PPUSH
27035: LD_INT 1
27037: PPUSH
27038: CALL_OW 234
// end ;
27042: PPOPN 1
27044: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27045: LD_EXP 70
27049: PUSH
27050: LD_EXP 112
27054: AND
27055: IFFALSE 27196
27057: GO 27059
27059: DISABLE
27060: LD_INT 0
27062: PPUSH
27063: PPUSH
27064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27065: LD_ADDR_VAR 0 3
27069: PUSH
27070: LD_INT 22
27072: PUSH
27073: LD_OWVAR 2
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: LD_INT 25
27084: PUSH
27085: LD_INT 1
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PPUSH
27096: CALL_OW 69
27100: ST_TO_ADDR
// if not tmp then
27101: LD_VAR 0 3
27105: NOT
27106: IFFALSE 27110
// exit ;
27108: GO 27196
// un := tmp [ rand ( 1 , tmp ) ] ;
27110: LD_ADDR_VAR 0 2
27114: PUSH
27115: LD_VAR 0 3
27119: PUSH
27120: LD_INT 1
27122: PPUSH
27123: LD_VAR 0 3
27127: PPUSH
27128: CALL_OW 12
27132: ARRAY
27133: ST_TO_ADDR
// if Crawls ( un ) then
27134: LD_VAR 0 2
27138: PPUSH
27139: CALL_OW 318
27143: IFFALSE 27154
// ComWalk ( un ) ;
27145: LD_VAR 0 2
27149: PPUSH
27150: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27154: LD_VAR 0 2
27158: PPUSH
27159: LD_INT 9
27161: PPUSH
27162: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27166: LD_INT 28
27168: PPUSH
27169: LD_OWVAR 2
27173: PPUSH
27174: LD_INT 2
27176: PPUSH
27177: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27181: LD_INT 29
27183: PPUSH
27184: LD_OWVAR 2
27188: PPUSH
27189: LD_INT 2
27191: PPUSH
27192: CALL_OW 322
// end ;
27196: PPOPN 3
27198: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27199: LD_EXP 70
27203: PUSH
27204: LD_EXP 113
27208: AND
27209: IFFALSE 27320
27211: GO 27213
27213: DISABLE
27214: LD_INT 0
27216: PPUSH
27217: PPUSH
27218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27219: LD_ADDR_VAR 0 3
27223: PUSH
27224: LD_INT 22
27226: PUSH
27227: LD_OWVAR 2
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 25
27238: PUSH
27239: LD_INT 1
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PPUSH
27250: CALL_OW 69
27254: ST_TO_ADDR
// if not tmp then
27255: LD_VAR 0 3
27259: NOT
27260: IFFALSE 27264
// exit ;
27262: GO 27320
// un := tmp [ rand ( 1 , tmp ) ] ;
27264: LD_ADDR_VAR 0 2
27268: PUSH
27269: LD_VAR 0 3
27273: PUSH
27274: LD_INT 1
27276: PPUSH
27277: LD_VAR 0 3
27281: PPUSH
27282: CALL_OW 12
27286: ARRAY
27287: ST_TO_ADDR
// if Crawls ( un ) then
27288: LD_VAR 0 2
27292: PPUSH
27293: CALL_OW 318
27297: IFFALSE 27308
// ComWalk ( un ) ;
27299: LD_VAR 0 2
27303: PPUSH
27304: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27308: LD_VAR 0 2
27312: PPUSH
27313: LD_INT 8
27315: PPUSH
27316: CALL_OW 336
// end ;
27320: PPOPN 3
27322: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27323: LD_EXP 70
27327: PUSH
27328: LD_EXP 114
27332: AND
27333: IFFALSE 27477
27335: GO 27337
27337: DISABLE
27338: LD_INT 0
27340: PPUSH
27341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27342: LD_ADDR_VAR 0 2
27346: PUSH
27347: LD_INT 22
27349: PUSH
27350: LD_OWVAR 2
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 21
27361: PUSH
27362: LD_INT 2
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: LD_INT 2
27371: PUSH
27372: LD_INT 34
27374: PUSH
27375: LD_INT 12
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 34
27384: PUSH
27385: LD_INT 51
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: LD_INT 34
27394: PUSH
27395: LD_INT 32
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: LIST
27412: PPUSH
27413: CALL_OW 69
27417: ST_TO_ADDR
// if not tmp then
27418: LD_VAR 0 2
27422: NOT
27423: IFFALSE 27427
// exit ;
27425: GO 27477
// for i in tmp do
27427: LD_ADDR_VAR 0 1
27431: PUSH
27432: LD_VAR 0 2
27436: PUSH
27437: FOR_IN
27438: IFFALSE 27475
// if GetCargo ( i , mat_artifact ) = 0 then
27440: LD_VAR 0 1
27444: PPUSH
27445: LD_INT 4
27447: PPUSH
27448: CALL_OW 289
27452: PUSH
27453: LD_INT 0
27455: EQUAL
27456: IFFALSE 27473
// SetCargo ( i , mat_siberit , 100 ) ;
27458: LD_VAR 0 1
27462: PPUSH
27463: LD_INT 3
27465: PPUSH
27466: LD_INT 100
27468: PPUSH
27469: CALL_OW 290
27473: GO 27437
27475: POP
27476: POP
// end ;
27477: PPOPN 2
27479: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27480: LD_EXP 70
27484: PUSH
27485: LD_EXP 115
27489: AND
27490: IFFALSE 27673
27492: GO 27494
27494: DISABLE
27495: LD_INT 0
27497: PPUSH
27498: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27499: LD_ADDR_VAR 0 2
27503: PUSH
27504: LD_INT 22
27506: PUSH
27507: LD_OWVAR 2
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PPUSH
27516: CALL_OW 69
27520: ST_TO_ADDR
// if not tmp then
27521: LD_VAR 0 2
27525: NOT
27526: IFFALSE 27530
// exit ;
27528: GO 27673
// for i := 1 to 2 do
27530: LD_ADDR_VAR 0 1
27534: PUSH
27535: DOUBLE
27536: LD_INT 1
27538: DEC
27539: ST_TO_ADDR
27540: LD_INT 2
27542: PUSH
27543: FOR_TO
27544: IFFALSE 27671
// begin uc_side := your_side ;
27546: LD_ADDR_OWVAR 20
27550: PUSH
27551: LD_OWVAR 2
27555: ST_TO_ADDR
// uc_nation := nation_american ;
27556: LD_ADDR_OWVAR 21
27560: PUSH
27561: LD_INT 1
27563: ST_TO_ADDR
// vc_chassis := us_morphling ;
27564: LD_ADDR_OWVAR 37
27568: PUSH
27569: LD_INT 5
27571: ST_TO_ADDR
// vc_engine := engine_siberite ;
27572: LD_ADDR_OWVAR 39
27576: PUSH
27577: LD_INT 3
27579: ST_TO_ADDR
// vc_control := control_computer ;
27580: LD_ADDR_OWVAR 38
27584: PUSH
27585: LD_INT 3
27587: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27588: LD_ADDR_OWVAR 40
27592: PUSH
27593: LD_INT 10
27595: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27596: LD_VAR 0 2
27600: PUSH
27601: LD_INT 1
27603: ARRAY
27604: PPUSH
27605: CALL_OW 310
27609: NOT
27610: IFFALSE 27657
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27612: CALL_OW 45
27616: PPUSH
27617: LD_VAR 0 2
27621: PUSH
27622: LD_INT 1
27624: ARRAY
27625: PPUSH
27626: CALL_OW 250
27630: PPUSH
27631: LD_VAR 0 2
27635: PUSH
27636: LD_INT 1
27638: ARRAY
27639: PPUSH
27640: CALL_OW 251
27644: PPUSH
27645: LD_INT 12
27647: PPUSH
27648: LD_INT 1
27650: PPUSH
27651: CALL_OW 50
27655: GO 27669
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27657: CALL_OW 45
27661: PPUSH
27662: LD_INT 1
27664: PPUSH
27665: CALL_OW 51
// end ;
27669: GO 27543
27671: POP
27672: POP
// end ;
27673: PPOPN 2
27675: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27676: LD_EXP 70
27680: PUSH
27681: LD_EXP 116
27685: AND
27686: IFFALSE 27908
27688: GO 27690
27690: DISABLE
27691: LD_INT 0
27693: PPUSH
27694: PPUSH
27695: PPUSH
27696: PPUSH
27697: PPUSH
27698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27699: LD_ADDR_VAR 0 6
27703: PUSH
27704: LD_INT 22
27706: PUSH
27707: LD_OWVAR 2
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 21
27718: PUSH
27719: LD_INT 1
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 3
27728: PUSH
27729: LD_INT 23
27731: PUSH
27732: LD_INT 0
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: LIST
27747: PPUSH
27748: CALL_OW 69
27752: ST_TO_ADDR
// if not tmp then
27753: LD_VAR 0 6
27757: NOT
27758: IFFALSE 27762
// exit ;
27760: GO 27908
// s1 := rand ( 1 , 4 ) ;
27762: LD_ADDR_VAR 0 2
27766: PUSH
27767: LD_INT 1
27769: PPUSH
27770: LD_INT 4
27772: PPUSH
27773: CALL_OW 12
27777: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
27778: LD_ADDR_VAR 0 4
27782: PUSH
27783: LD_VAR 0 6
27787: PUSH
27788: LD_INT 1
27790: ARRAY
27791: PPUSH
27792: LD_VAR 0 2
27796: PPUSH
27797: CALL_OW 259
27801: ST_TO_ADDR
// if s1 = 1 then
27802: LD_VAR 0 2
27806: PUSH
27807: LD_INT 1
27809: EQUAL
27810: IFFALSE 27830
// s2 := rand ( 2 , 4 ) else
27812: LD_ADDR_VAR 0 3
27816: PUSH
27817: LD_INT 2
27819: PPUSH
27820: LD_INT 4
27822: PPUSH
27823: CALL_OW 12
27827: ST_TO_ADDR
27828: GO 27838
// s2 := 1 ;
27830: LD_ADDR_VAR 0 3
27834: PUSH
27835: LD_INT 1
27837: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
27838: LD_ADDR_VAR 0 5
27842: PUSH
27843: LD_VAR 0 6
27847: PUSH
27848: LD_INT 1
27850: ARRAY
27851: PPUSH
27852: LD_VAR 0 3
27856: PPUSH
27857: CALL_OW 259
27861: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
27862: LD_VAR 0 6
27866: PUSH
27867: LD_INT 1
27869: ARRAY
27870: PPUSH
27871: LD_VAR 0 2
27875: PPUSH
27876: LD_VAR 0 5
27880: PPUSH
27881: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
27885: LD_VAR 0 6
27889: PUSH
27890: LD_INT 1
27892: ARRAY
27893: PPUSH
27894: LD_VAR 0 3
27898: PPUSH
27899: LD_VAR 0 4
27903: PPUSH
27904: CALL_OW 237
// end ;
27908: PPOPN 6
27910: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
27911: LD_EXP 70
27915: PUSH
27916: LD_EXP 117
27920: AND
27921: IFFALSE 28000
27923: GO 27925
27925: DISABLE
27926: LD_INT 0
27928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
27929: LD_ADDR_VAR 0 1
27933: PUSH
27934: LD_INT 22
27936: PUSH
27937: LD_OWVAR 2
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 30
27948: PUSH
27949: LD_INT 3
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PPUSH
27960: CALL_OW 69
27964: ST_TO_ADDR
// if not tmp then
27965: LD_VAR 0 1
27969: NOT
27970: IFFALSE 27974
// exit ;
27972: GO 28000
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27974: LD_VAR 0 1
27978: PUSH
27979: LD_INT 1
27981: PPUSH
27982: LD_VAR 0 1
27986: PPUSH
27987: CALL_OW 12
27991: ARRAY
27992: PPUSH
27993: LD_INT 1
27995: PPUSH
27996: CALL_OW 234
// end ;
28000: PPOPN 1
28002: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28003: LD_EXP 70
28007: PUSH
28008: LD_EXP 118
28012: AND
28013: IFFALSE 28125
28015: GO 28017
28017: DISABLE
28018: LD_INT 0
28020: PPUSH
28021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28022: LD_ADDR_VAR 0 2
28026: PUSH
28027: LD_INT 22
28029: PUSH
28030: LD_OWVAR 2
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 2
28041: PUSH
28042: LD_INT 30
28044: PUSH
28045: LD_INT 27
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: LD_INT 30
28054: PUSH
28055: LD_INT 26
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 30
28064: PUSH
28065: LD_INT 28
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PPUSH
28082: CALL_OW 69
28086: ST_TO_ADDR
// if not tmp then
28087: LD_VAR 0 2
28091: NOT
28092: IFFALSE 28096
// exit ;
28094: GO 28125
// for i in tmp do
28096: LD_ADDR_VAR 0 1
28100: PUSH
28101: LD_VAR 0 2
28105: PUSH
28106: FOR_IN
28107: IFFALSE 28123
// SetLives ( i , 1 ) ;
28109: LD_VAR 0 1
28113: PPUSH
28114: LD_INT 1
28116: PPUSH
28117: CALL_OW 234
28121: GO 28106
28123: POP
28124: POP
// end ;
28125: PPOPN 2
28127: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28128: LD_EXP 70
28132: PUSH
28133: LD_EXP 119
28137: AND
28138: IFFALSE 28412
28140: GO 28142
28142: DISABLE
28143: LD_INT 0
28145: PPUSH
28146: PPUSH
28147: PPUSH
// begin i := rand ( 1 , 7 ) ;
28148: LD_ADDR_VAR 0 1
28152: PUSH
28153: LD_INT 1
28155: PPUSH
28156: LD_INT 7
28158: PPUSH
28159: CALL_OW 12
28163: ST_TO_ADDR
// case i of 1 :
28164: LD_VAR 0 1
28168: PUSH
28169: LD_INT 1
28171: DOUBLE
28172: EQUAL
28173: IFTRUE 28177
28175: GO 28187
28177: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28178: LD_STRING earthquake(getX(game), 0, 32)
28180: PPUSH
28181: CALL_OW 559
28185: GO 28412
28187: LD_INT 2
28189: DOUBLE
28190: EQUAL
28191: IFTRUE 28195
28193: GO 28209
28195: POP
// begin ToLua ( displayStucuk(); ) ;
28196: LD_STRING displayStucuk();
28198: PPUSH
28199: CALL_OW 559
// ResetFog ;
28203: CALL_OW 335
// end ; 3 :
28207: GO 28412
28209: LD_INT 3
28211: DOUBLE
28212: EQUAL
28213: IFTRUE 28217
28215: GO 28321
28217: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28218: LD_ADDR_VAR 0 2
28222: PUSH
28223: LD_INT 22
28225: PUSH
28226: LD_OWVAR 2
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 25
28237: PUSH
28238: LD_INT 1
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PPUSH
28249: CALL_OW 69
28253: ST_TO_ADDR
// if not tmp then
28254: LD_VAR 0 2
28258: NOT
28259: IFFALSE 28263
// exit ;
28261: GO 28412
// un := tmp [ rand ( 1 , tmp ) ] ;
28263: LD_ADDR_VAR 0 3
28267: PUSH
28268: LD_VAR 0 2
28272: PUSH
28273: LD_INT 1
28275: PPUSH
28276: LD_VAR 0 2
28280: PPUSH
28281: CALL_OW 12
28285: ARRAY
28286: ST_TO_ADDR
// if Crawls ( un ) then
28287: LD_VAR 0 3
28291: PPUSH
28292: CALL_OW 318
28296: IFFALSE 28307
// ComWalk ( un ) ;
28298: LD_VAR 0 3
28302: PPUSH
28303: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28307: LD_VAR 0 3
28311: PPUSH
28312: LD_INT 8
28314: PPUSH
28315: CALL_OW 336
// end ; 4 :
28319: GO 28412
28321: LD_INT 4
28323: DOUBLE
28324: EQUAL
28325: IFTRUE 28329
28327: GO 28390
28329: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28330: LD_ADDR_VAR 0 2
28334: PUSH
28335: LD_INT 22
28337: PUSH
28338: LD_OWVAR 2
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 30
28349: PUSH
28350: LD_INT 29
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PPUSH
28361: CALL_OW 69
28365: ST_TO_ADDR
// if not tmp then
28366: LD_VAR 0 2
28370: NOT
28371: IFFALSE 28375
// exit ;
28373: GO 28412
// DestroyUnit ( tmp [ 1 ] ) ;
28375: LD_VAR 0 2
28379: PUSH
28380: LD_INT 1
28382: ARRAY
28383: PPUSH
28384: CALL_OW 65
// end ; 5 .. 7 :
28388: GO 28412
28390: LD_INT 5
28392: DOUBLE
28393: GREATEREQUAL
28394: IFFALSE 28402
28396: LD_INT 7
28398: DOUBLE
28399: LESSEQUAL
28400: IFTRUE 28404
28402: GO 28411
28404: POP
// StreamSibBomb ; end ;
28405: CALL 24662 0 0
28409: GO 28412
28411: POP
// end ;
28412: PPOPN 3
28414: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28415: LD_EXP 70
28419: PUSH
28420: LD_EXP 120
28424: AND
28425: IFFALSE 28581
28427: GO 28429
28429: DISABLE
28430: LD_INT 0
28432: PPUSH
28433: PPUSH
28434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28435: LD_ADDR_VAR 0 2
28439: PUSH
28440: LD_INT 81
28442: PUSH
28443: LD_OWVAR 2
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 2
28454: PUSH
28455: LD_INT 21
28457: PUSH
28458: LD_INT 1
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 21
28467: PUSH
28468: LD_INT 2
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: LIST
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PPUSH
28484: CALL_OW 69
28488: ST_TO_ADDR
// if not tmp then
28489: LD_VAR 0 2
28493: NOT
28494: IFFALSE 28498
// exit ;
28496: GO 28581
// p := 0 ;
28498: LD_ADDR_VAR 0 3
28502: PUSH
28503: LD_INT 0
28505: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28506: LD_INT 35
28508: PPUSH
28509: CALL_OW 67
// p := p + 1 ;
28513: LD_ADDR_VAR 0 3
28517: PUSH
28518: LD_VAR 0 3
28522: PUSH
28523: LD_INT 1
28525: PLUS
28526: ST_TO_ADDR
// for i in tmp do
28527: LD_ADDR_VAR 0 1
28531: PUSH
28532: LD_VAR 0 2
28536: PUSH
28537: FOR_IN
28538: IFFALSE 28569
// if GetLives ( i ) < 1000 then
28540: LD_VAR 0 1
28544: PPUSH
28545: CALL_OW 256
28549: PUSH
28550: LD_INT 1000
28552: LESS
28553: IFFALSE 28567
// SetLives ( i , 1000 ) ;
28555: LD_VAR 0 1
28559: PPUSH
28560: LD_INT 1000
28562: PPUSH
28563: CALL_OW 234
28567: GO 28537
28569: POP
28570: POP
// until p > 20 ;
28571: LD_VAR 0 3
28575: PUSH
28576: LD_INT 20
28578: GREATER
28579: IFFALSE 28506
// end ;
28581: PPOPN 3
28583: END
// every 0 0$1 trigger StreamModeActive and sTime do
28584: LD_EXP 70
28588: PUSH
28589: LD_EXP 121
28593: AND
28594: IFFALSE 28629
28596: GO 28598
28598: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28599: LD_INT 28
28601: PPUSH
28602: LD_OWVAR 2
28606: PPUSH
28607: LD_INT 2
28609: PPUSH
28610: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28614: LD_INT 30
28616: PPUSH
28617: LD_OWVAR 2
28621: PPUSH
28622: LD_INT 2
28624: PPUSH
28625: CALL_OW 322
// end ;
28629: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28630: LD_EXP 70
28634: PUSH
28635: LD_EXP 122
28639: AND
28640: IFFALSE 28761
28642: GO 28644
28644: DISABLE
28645: LD_INT 0
28647: PPUSH
28648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28649: LD_ADDR_VAR 0 2
28653: PUSH
28654: LD_INT 22
28656: PUSH
28657: LD_OWVAR 2
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: LD_INT 21
28668: PUSH
28669: LD_INT 1
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 3
28678: PUSH
28679: LD_INT 23
28681: PUSH
28682: LD_INT 0
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: LIST
28697: PPUSH
28698: CALL_OW 69
28702: ST_TO_ADDR
// if not tmp then
28703: LD_VAR 0 2
28707: NOT
28708: IFFALSE 28712
// exit ;
28710: GO 28761
// for i in tmp do
28712: LD_ADDR_VAR 0 1
28716: PUSH
28717: LD_VAR 0 2
28721: PUSH
28722: FOR_IN
28723: IFFALSE 28759
// begin if Crawls ( i ) then
28725: LD_VAR 0 1
28729: PPUSH
28730: CALL_OW 318
28734: IFFALSE 28745
// ComWalk ( i ) ;
28736: LD_VAR 0 1
28740: PPUSH
28741: CALL_OW 138
// SetClass ( i , 2 ) ;
28745: LD_VAR 0 1
28749: PPUSH
28750: LD_INT 2
28752: PPUSH
28753: CALL_OW 336
// end ;
28757: GO 28722
28759: POP
28760: POP
// end ;
28761: PPOPN 2
28763: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
28764: LD_EXP 70
28768: PUSH
28769: LD_EXP 123
28773: AND
28774: IFFALSE 29055
28776: GO 28778
28778: DISABLE
28779: LD_INT 0
28781: PPUSH
28782: PPUSH
28783: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
28784: LD_OWVAR 2
28788: PPUSH
28789: LD_INT 9
28791: PPUSH
28792: LD_INT 1
28794: PPUSH
28795: LD_INT 1
28797: PPUSH
28798: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
28802: LD_INT 9
28804: PPUSH
28805: LD_OWVAR 2
28809: PPUSH
28810: CALL_OW 343
// uc_side := 9 ;
28814: LD_ADDR_OWVAR 20
28818: PUSH
28819: LD_INT 9
28821: ST_TO_ADDR
// uc_nation := 2 ;
28822: LD_ADDR_OWVAR 21
28826: PUSH
28827: LD_INT 2
28829: ST_TO_ADDR
// hc_name := Dark Warrior ;
28830: LD_ADDR_OWVAR 26
28834: PUSH
28835: LD_STRING Dark Warrior
28837: ST_TO_ADDR
// hc_gallery :=  ;
28838: LD_ADDR_OWVAR 33
28842: PUSH
28843: LD_STRING 
28845: ST_TO_ADDR
// hc_noskilllimit := true ;
28846: LD_ADDR_OWVAR 76
28850: PUSH
28851: LD_INT 1
28853: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
28854: LD_ADDR_OWVAR 31
28858: PUSH
28859: LD_INT 30
28861: PUSH
28862: LD_INT 30
28864: PUSH
28865: LD_INT 30
28867: PUSH
28868: LD_INT 30
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: ST_TO_ADDR
// un := CreateHuman ;
28877: LD_ADDR_VAR 0 3
28881: PUSH
28882: CALL_OW 44
28886: ST_TO_ADDR
// hc_noskilllimit := false ;
28887: LD_ADDR_OWVAR 76
28891: PUSH
28892: LD_INT 0
28894: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28895: LD_VAR 0 3
28899: PPUSH
28900: LD_INT 1
28902: PPUSH
28903: CALL_OW 51
// p := 0 ;
28907: LD_ADDR_VAR 0 2
28911: PUSH
28912: LD_INT 0
28914: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28915: LD_INT 35
28917: PPUSH
28918: CALL_OW 67
// p := p + 1 ;
28922: LD_ADDR_VAR 0 2
28926: PUSH
28927: LD_VAR 0 2
28931: PUSH
28932: LD_INT 1
28934: PLUS
28935: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28936: LD_VAR 0 3
28940: PPUSH
28941: CALL_OW 256
28945: PUSH
28946: LD_INT 1000
28948: LESS
28949: IFFALSE 28963
// SetLives ( un , 1000 ) ;
28951: LD_VAR 0 3
28955: PPUSH
28956: LD_INT 1000
28958: PPUSH
28959: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28963: LD_VAR 0 3
28967: PPUSH
28968: LD_INT 81
28970: PUSH
28971: LD_OWVAR 2
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 91
28982: PUSH
28983: LD_VAR 0 3
28987: PUSH
28988: LD_INT 30
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: LIST
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PPUSH
29000: CALL_OW 69
29004: PPUSH
29005: LD_VAR 0 3
29009: PPUSH
29010: CALL_OW 74
29014: PPUSH
29015: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
29019: LD_VAR 0 2
29023: PUSH
29024: LD_INT 60
29026: GREATER
29027: PUSH
29028: LD_VAR 0 3
29032: PPUSH
29033: CALL_OW 301
29037: OR
29038: IFFALSE 28915
// if un then
29040: LD_VAR 0 3
29044: IFFALSE 29055
// RemoveUnit ( un ) ;
29046: LD_VAR 0 3
29050: PPUSH
29051: CALL_OW 64
// end ;
29055: PPOPN 3
29057: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29058: LD_INT 0
29060: PPUSH
// case cmd of 301 :
29061: LD_VAR 0 1
29065: PUSH
29066: LD_INT 301
29068: DOUBLE
29069: EQUAL
29070: IFTRUE 29074
29072: GO 29106
29074: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29075: LD_VAR 0 6
29079: PPUSH
29080: LD_VAR 0 7
29084: PPUSH
29085: LD_VAR 0 8
29089: PPUSH
29090: LD_VAR 0 4
29094: PPUSH
29095: LD_VAR 0 5
29099: PPUSH
29100: CALL 30307 0 5
29104: GO 29227
29106: LD_INT 302
29108: DOUBLE
29109: EQUAL
29110: IFTRUE 29114
29112: GO 29151
29114: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29115: LD_VAR 0 6
29119: PPUSH
29120: LD_VAR 0 7
29124: PPUSH
29125: LD_VAR 0 8
29129: PPUSH
29130: LD_VAR 0 9
29134: PPUSH
29135: LD_VAR 0 4
29139: PPUSH
29140: LD_VAR 0 5
29144: PPUSH
29145: CALL 30398 0 6
29149: GO 29227
29151: LD_INT 303
29153: DOUBLE
29154: EQUAL
29155: IFTRUE 29159
29157: GO 29196
29159: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29160: LD_VAR 0 6
29164: PPUSH
29165: LD_VAR 0 7
29169: PPUSH
29170: LD_VAR 0 8
29174: PPUSH
29175: LD_VAR 0 9
29179: PPUSH
29180: LD_VAR 0 4
29184: PPUSH
29185: LD_VAR 0 5
29189: PPUSH
29190: CALL 29232 0 6
29194: GO 29227
29196: LD_INT 304
29198: DOUBLE
29199: EQUAL
29200: IFTRUE 29204
29202: GO 29226
29204: POP
// hHackTeleport ( unit , x , y ) ; end ;
29205: LD_VAR 0 2
29209: PPUSH
29210: LD_VAR 0 4
29214: PPUSH
29215: LD_VAR 0 5
29219: PPUSH
29220: CALL 30991 0 3
29224: GO 29227
29226: POP
// end ;
29227: LD_VAR 0 12
29231: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29232: LD_INT 0
29234: PPUSH
29235: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29236: LD_VAR 0 1
29240: PUSH
29241: LD_INT 1
29243: LESS
29244: PUSH
29245: LD_VAR 0 1
29249: PUSH
29250: LD_INT 3
29252: GREATER
29253: OR
29254: PUSH
29255: LD_VAR 0 5
29259: PPUSH
29260: LD_VAR 0 6
29264: PPUSH
29265: CALL_OW 428
29269: OR
29270: IFFALSE 29274
// exit ;
29272: GO 29994
// uc_side := your_side ;
29274: LD_ADDR_OWVAR 20
29278: PUSH
29279: LD_OWVAR 2
29283: ST_TO_ADDR
// uc_nation := nation ;
29284: LD_ADDR_OWVAR 21
29288: PUSH
29289: LD_VAR 0 1
29293: ST_TO_ADDR
// bc_level = 1 ;
29294: LD_ADDR_OWVAR 43
29298: PUSH
29299: LD_INT 1
29301: ST_TO_ADDR
// case btype of 1 :
29302: LD_VAR 0 2
29306: PUSH
29307: LD_INT 1
29309: DOUBLE
29310: EQUAL
29311: IFTRUE 29315
29313: GO 29326
29315: POP
// bc_type := b_depot ; 2 :
29316: LD_ADDR_OWVAR 42
29320: PUSH
29321: LD_INT 0
29323: ST_TO_ADDR
29324: GO 29938
29326: LD_INT 2
29328: DOUBLE
29329: EQUAL
29330: IFTRUE 29334
29332: GO 29345
29334: POP
// bc_type := b_warehouse ; 3 :
29335: LD_ADDR_OWVAR 42
29339: PUSH
29340: LD_INT 1
29342: ST_TO_ADDR
29343: GO 29938
29345: LD_INT 3
29347: DOUBLE
29348: EQUAL
29349: IFTRUE 29353
29351: GO 29364
29353: POP
// bc_type := b_lab ; 4 .. 9 :
29354: LD_ADDR_OWVAR 42
29358: PUSH
29359: LD_INT 6
29361: ST_TO_ADDR
29362: GO 29938
29364: LD_INT 4
29366: DOUBLE
29367: GREATEREQUAL
29368: IFFALSE 29376
29370: LD_INT 9
29372: DOUBLE
29373: LESSEQUAL
29374: IFTRUE 29378
29376: GO 29430
29378: POP
// begin bc_type := b_lab_half ;
29379: LD_ADDR_OWVAR 42
29383: PUSH
29384: LD_INT 7
29386: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29387: LD_ADDR_OWVAR 44
29391: PUSH
29392: LD_INT 10
29394: PUSH
29395: LD_INT 11
29397: PUSH
29398: LD_INT 12
29400: PUSH
29401: LD_INT 15
29403: PUSH
29404: LD_INT 14
29406: PUSH
29407: LD_INT 13
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: PUSH
29418: LD_VAR 0 2
29422: PUSH
29423: LD_INT 3
29425: MINUS
29426: ARRAY
29427: ST_TO_ADDR
// end ; 10 .. 13 :
29428: GO 29938
29430: LD_INT 10
29432: DOUBLE
29433: GREATEREQUAL
29434: IFFALSE 29442
29436: LD_INT 13
29438: DOUBLE
29439: LESSEQUAL
29440: IFTRUE 29444
29442: GO 29521
29444: POP
// begin bc_type := b_lab_full ;
29445: LD_ADDR_OWVAR 42
29449: PUSH
29450: LD_INT 8
29452: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
29453: LD_ADDR_OWVAR 44
29457: PUSH
29458: LD_INT 10
29460: PUSH
29461: LD_INT 12
29463: PUSH
29464: LD_INT 14
29466: PUSH
29467: LD_INT 13
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: PUSH
29476: LD_VAR 0 2
29480: PUSH
29481: LD_INT 9
29483: MINUS
29484: ARRAY
29485: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
29486: LD_ADDR_OWVAR 45
29490: PUSH
29491: LD_INT 11
29493: PUSH
29494: LD_INT 15
29496: PUSH
29497: LD_INT 12
29499: PUSH
29500: LD_INT 15
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: PUSH
29509: LD_VAR 0 2
29513: PUSH
29514: LD_INT 9
29516: MINUS
29517: ARRAY
29518: ST_TO_ADDR
// end ; 14 :
29519: GO 29938
29521: LD_INT 14
29523: DOUBLE
29524: EQUAL
29525: IFTRUE 29529
29527: GO 29540
29529: POP
// bc_type := b_workshop ; 15 :
29530: LD_ADDR_OWVAR 42
29534: PUSH
29535: LD_INT 2
29537: ST_TO_ADDR
29538: GO 29938
29540: LD_INT 15
29542: DOUBLE
29543: EQUAL
29544: IFTRUE 29548
29546: GO 29559
29548: POP
// bc_type := b_factory ; 16 :
29549: LD_ADDR_OWVAR 42
29553: PUSH
29554: LD_INT 3
29556: ST_TO_ADDR
29557: GO 29938
29559: LD_INT 16
29561: DOUBLE
29562: EQUAL
29563: IFTRUE 29567
29565: GO 29578
29567: POP
// bc_type := b_ext_gun ; 17 :
29568: LD_ADDR_OWVAR 42
29572: PUSH
29573: LD_INT 17
29575: ST_TO_ADDR
29576: GO 29938
29578: LD_INT 17
29580: DOUBLE
29581: EQUAL
29582: IFTRUE 29586
29584: GO 29614
29586: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
29587: LD_ADDR_OWVAR 42
29591: PUSH
29592: LD_INT 19
29594: PUSH
29595: LD_INT 23
29597: PUSH
29598: LD_INT 19
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: LIST
29605: PUSH
29606: LD_VAR 0 1
29610: ARRAY
29611: ST_TO_ADDR
29612: GO 29938
29614: LD_INT 18
29616: DOUBLE
29617: EQUAL
29618: IFTRUE 29622
29620: GO 29633
29622: POP
// bc_type := b_ext_radar ; 19 :
29623: LD_ADDR_OWVAR 42
29627: PUSH
29628: LD_INT 20
29630: ST_TO_ADDR
29631: GO 29938
29633: LD_INT 19
29635: DOUBLE
29636: EQUAL
29637: IFTRUE 29641
29639: GO 29652
29641: POP
// bc_type := b_ext_radio ; 20 :
29642: LD_ADDR_OWVAR 42
29646: PUSH
29647: LD_INT 22
29649: ST_TO_ADDR
29650: GO 29938
29652: LD_INT 20
29654: DOUBLE
29655: EQUAL
29656: IFTRUE 29660
29658: GO 29671
29660: POP
// bc_type := b_ext_siberium ; 21 :
29661: LD_ADDR_OWVAR 42
29665: PUSH
29666: LD_INT 21
29668: ST_TO_ADDR
29669: GO 29938
29671: LD_INT 21
29673: DOUBLE
29674: EQUAL
29675: IFTRUE 29679
29677: GO 29690
29679: POP
// bc_type := b_ext_computer ; 22 :
29680: LD_ADDR_OWVAR 42
29684: PUSH
29685: LD_INT 24
29687: ST_TO_ADDR
29688: GO 29938
29690: LD_INT 22
29692: DOUBLE
29693: EQUAL
29694: IFTRUE 29698
29696: GO 29709
29698: POP
// bc_type := b_ext_track ; 23 :
29699: LD_ADDR_OWVAR 42
29703: PUSH
29704: LD_INT 16
29706: ST_TO_ADDR
29707: GO 29938
29709: LD_INT 23
29711: DOUBLE
29712: EQUAL
29713: IFTRUE 29717
29715: GO 29728
29717: POP
// bc_type := b_ext_laser ; 24 :
29718: LD_ADDR_OWVAR 42
29722: PUSH
29723: LD_INT 25
29725: ST_TO_ADDR
29726: GO 29938
29728: LD_INT 24
29730: DOUBLE
29731: EQUAL
29732: IFTRUE 29736
29734: GO 29747
29736: POP
// bc_type := b_control_tower ; 25 :
29737: LD_ADDR_OWVAR 42
29741: PUSH
29742: LD_INT 36
29744: ST_TO_ADDR
29745: GO 29938
29747: LD_INT 25
29749: DOUBLE
29750: EQUAL
29751: IFTRUE 29755
29753: GO 29766
29755: POP
// bc_type := b_breastwork ; 26 :
29756: LD_ADDR_OWVAR 42
29760: PUSH
29761: LD_INT 31
29763: ST_TO_ADDR
29764: GO 29938
29766: LD_INT 26
29768: DOUBLE
29769: EQUAL
29770: IFTRUE 29774
29772: GO 29785
29774: POP
// bc_type := b_bunker ; 27 :
29775: LD_ADDR_OWVAR 42
29779: PUSH
29780: LD_INT 32
29782: ST_TO_ADDR
29783: GO 29938
29785: LD_INT 27
29787: DOUBLE
29788: EQUAL
29789: IFTRUE 29793
29791: GO 29804
29793: POP
// bc_type := b_turret ; 28 :
29794: LD_ADDR_OWVAR 42
29798: PUSH
29799: LD_INT 33
29801: ST_TO_ADDR
29802: GO 29938
29804: LD_INT 28
29806: DOUBLE
29807: EQUAL
29808: IFTRUE 29812
29810: GO 29823
29812: POP
// bc_type := b_armoury ; 29 :
29813: LD_ADDR_OWVAR 42
29817: PUSH
29818: LD_INT 4
29820: ST_TO_ADDR
29821: GO 29938
29823: LD_INT 29
29825: DOUBLE
29826: EQUAL
29827: IFTRUE 29831
29829: GO 29842
29831: POP
// bc_type := b_barracks ; 30 :
29832: LD_ADDR_OWVAR 42
29836: PUSH
29837: LD_INT 5
29839: ST_TO_ADDR
29840: GO 29938
29842: LD_INT 30
29844: DOUBLE
29845: EQUAL
29846: IFTRUE 29850
29848: GO 29861
29850: POP
// bc_type := b_solar_power ; 31 :
29851: LD_ADDR_OWVAR 42
29855: PUSH
29856: LD_INT 27
29858: ST_TO_ADDR
29859: GO 29938
29861: LD_INT 31
29863: DOUBLE
29864: EQUAL
29865: IFTRUE 29869
29867: GO 29880
29869: POP
// bc_type := b_oil_power ; 32 :
29870: LD_ADDR_OWVAR 42
29874: PUSH
29875: LD_INT 26
29877: ST_TO_ADDR
29878: GO 29938
29880: LD_INT 32
29882: DOUBLE
29883: EQUAL
29884: IFTRUE 29888
29886: GO 29899
29888: POP
// bc_type := b_siberite_power ; 33 :
29889: LD_ADDR_OWVAR 42
29893: PUSH
29894: LD_INT 28
29896: ST_TO_ADDR
29897: GO 29938
29899: LD_INT 33
29901: DOUBLE
29902: EQUAL
29903: IFTRUE 29907
29905: GO 29918
29907: POP
// bc_type := b_oil_mine ; 34 :
29908: LD_ADDR_OWVAR 42
29912: PUSH
29913: LD_INT 29
29915: ST_TO_ADDR
29916: GO 29938
29918: LD_INT 34
29920: DOUBLE
29921: EQUAL
29922: IFTRUE 29926
29924: GO 29937
29926: POP
// bc_type := b_siberite_mine ; end ;
29927: LD_ADDR_OWVAR 42
29931: PUSH
29932: LD_INT 30
29934: ST_TO_ADDR
29935: GO 29938
29937: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29938: LD_ADDR_VAR 0 8
29942: PUSH
29943: LD_VAR 0 5
29947: PPUSH
29948: LD_VAR 0 6
29952: PPUSH
29953: LD_VAR 0 3
29957: PPUSH
29958: CALL_OW 47
29962: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29963: LD_OWVAR 42
29967: PUSH
29968: LD_INT 32
29970: PUSH
29971: LD_INT 33
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: IN
29978: IFFALSE 29994
// PlaceWeaponTurret ( b , weapon ) ;
29980: LD_VAR 0 8
29984: PPUSH
29985: LD_VAR 0 4
29989: PPUSH
29990: CALL_OW 431
// end ;
29994: LD_VAR 0 7
29998: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29999: LD_INT 0
30001: PPUSH
30002: PPUSH
30003: PPUSH
30004: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30005: LD_ADDR_VAR 0 4
30009: PUSH
30010: LD_INT 22
30012: PUSH
30013: LD_OWVAR 2
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 2
30024: PUSH
30025: LD_INT 30
30027: PUSH
30028: LD_INT 0
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 30
30037: PUSH
30038: LD_INT 1
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: LIST
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PPUSH
30054: CALL_OW 69
30058: ST_TO_ADDR
// if not tmp then
30059: LD_VAR 0 4
30063: NOT
30064: IFFALSE 30068
// exit ;
30066: GO 30127
// for i in tmp do
30068: LD_ADDR_VAR 0 2
30072: PUSH
30073: LD_VAR 0 4
30077: PUSH
30078: FOR_IN
30079: IFFALSE 30125
// for j = 1 to 3 do
30081: LD_ADDR_VAR 0 3
30085: PUSH
30086: DOUBLE
30087: LD_INT 1
30089: DEC
30090: ST_TO_ADDR
30091: LD_INT 3
30093: PUSH
30094: FOR_TO
30095: IFFALSE 30121
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30097: LD_VAR 0 2
30101: PPUSH
30102: CALL_OW 274
30106: PPUSH
30107: LD_VAR 0 3
30111: PPUSH
30112: LD_INT 99999
30114: PPUSH
30115: CALL_OW 277
30119: GO 30094
30121: POP
30122: POP
30123: GO 30078
30125: POP
30126: POP
// end ;
30127: LD_VAR 0 1
30131: RET
// export function hHackSetLevel10 ; var i , j ; begin
30132: LD_INT 0
30134: PPUSH
30135: PPUSH
30136: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30137: LD_ADDR_VAR 0 2
30141: PUSH
30142: LD_INT 21
30144: PUSH
30145: LD_INT 1
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PPUSH
30152: CALL_OW 69
30156: PUSH
30157: FOR_IN
30158: IFFALSE 30210
// if IsSelected ( i ) then
30160: LD_VAR 0 2
30164: PPUSH
30165: CALL_OW 306
30169: IFFALSE 30208
// begin for j := 1 to 4 do
30171: LD_ADDR_VAR 0 3
30175: PUSH
30176: DOUBLE
30177: LD_INT 1
30179: DEC
30180: ST_TO_ADDR
30181: LD_INT 4
30183: PUSH
30184: FOR_TO
30185: IFFALSE 30206
// SetSkill ( i , j , 10 ) ;
30187: LD_VAR 0 2
30191: PPUSH
30192: LD_VAR 0 3
30196: PPUSH
30197: LD_INT 10
30199: PPUSH
30200: CALL_OW 237
30204: GO 30184
30206: POP
30207: POP
// end ;
30208: GO 30157
30210: POP
30211: POP
// end ;
30212: LD_VAR 0 1
30216: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30217: LD_INT 0
30219: PPUSH
30220: PPUSH
30221: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30222: LD_ADDR_VAR 0 2
30226: PUSH
30227: LD_INT 22
30229: PUSH
30230: LD_OWVAR 2
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 21
30241: PUSH
30242: LD_INT 1
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PPUSH
30253: CALL_OW 69
30257: PUSH
30258: FOR_IN
30259: IFFALSE 30300
// begin for j := 1 to 4 do
30261: LD_ADDR_VAR 0 3
30265: PUSH
30266: DOUBLE
30267: LD_INT 1
30269: DEC
30270: ST_TO_ADDR
30271: LD_INT 4
30273: PUSH
30274: FOR_TO
30275: IFFALSE 30296
// SetSkill ( i , j , 10 ) ;
30277: LD_VAR 0 2
30281: PPUSH
30282: LD_VAR 0 3
30286: PPUSH
30287: LD_INT 10
30289: PPUSH
30290: CALL_OW 237
30294: GO 30274
30296: POP
30297: POP
// end ;
30298: GO 30258
30300: POP
30301: POP
// end ;
30302: LD_VAR 0 1
30306: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30307: LD_INT 0
30309: PPUSH
// uc_side := your_side ;
30310: LD_ADDR_OWVAR 20
30314: PUSH
30315: LD_OWVAR 2
30319: ST_TO_ADDR
// uc_nation := nation ;
30320: LD_ADDR_OWVAR 21
30324: PUSH
30325: LD_VAR 0 1
30329: ST_TO_ADDR
// InitHc ;
30330: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30334: LD_INT 0
30336: PPUSH
30337: LD_VAR 0 2
30341: PPUSH
30342: LD_VAR 0 3
30346: PPUSH
30347: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30351: LD_VAR 0 4
30355: PPUSH
30356: LD_VAR 0 5
30360: PPUSH
30361: CALL_OW 428
30365: PUSH
30366: LD_INT 0
30368: EQUAL
30369: IFFALSE 30393
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30371: CALL_OW 44
30375: PPUSH
30376: LD_VAR 0 4
30380: PPUSH
30381: LD_VAR 0 5
30385: PPUSH
30386: LD_INT 1
30388: PPUSH
30389: CALL_OW 48
// end ;
30393: LD_VAR 0 6
30397: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30398: LD_INT 0
30400: PPUSH
30401: PPUSH
// uc_side := your_side ;
30402: LD_ADDR_OWVAR 20
30406: PUSH
30407: LD_OWVAR 2
30411: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30412: LD_VAR 0 1
30416: PUSH
30417: LD_INT 1
30419: PUSH
30420: LD_INT 2
30422: PUSH
30423: LD_INT 3
30425: PUSH
30426: LD_INT 4
30428: PUSH
30429: LD_INT 5
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: IN
30439: IFFALSE 30451
// uc_nation := nation_american else
30441: LD_ADDR_OWVAR 21
30445: PUSH
30446: LD_INT 1
30448: ST_TO_ADDR
30449: GO 30494
// if chassis in [ 11 , 12 , 13 , 14 ] then
30451: LD_VAR 0 1
30455: PUSH
30456: LD_INT 11
30458: PUSH
30459: LD_INT 12
30461: PUSH
30462: LD_INT 13
30464: PUSH
30465: LD_INT 14
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: IN
30474: IFFALSE 30486
// uc_nation := nation_arabian else
30476: LD_ADDR_OWVAR 21
30480: PUSH
30481: LD_INT 2
30483: ST_TO_ADDR
30484: GO 30494
// uc_nation := nation_russian ;
30486: LD_ADDR_OWVAR 21
30490: PUSH
30491: LD_INT 3
30493: ST_TO_ADDR
// vc_chassis := chassis ;
30494: LD_ADDR_OWVAR 37
30498: PUSH
30499: LD_VAR 0 1
30503: ST_TO_ADDR
// vc_engine := engine ;
30504: LD_ADDR_OWVAR 39
30508: PUSH
30509: LD_VAR 0 2
30513: ST_TO_ADDR
// vc_control := control ;
30514: LD_ADDR_OWVAR 38
30518: PUSH
30519: LD_VAR 0 3
30523: ST_TO_ADDR
// vc_weapon := weapon ;
30524: LD_ADDR_OWVAR 40
30528: PUSH
30529: LD_VAR 0 4
30533: ST_TO_ADDR
// un := CreateVehicle ;
30534: LD_ADDR_VAR 0 8
30538: PUSH
30539: CALL_OW 45
30543: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30544: LD_VAR 0 8
30548: PPUSH
30549: LD_INT 0
30551: PPUSH
30552: LD_INT 5
30554: PPUSH
30555: CALL_OW 12
30559: PPUSH
30560: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
30564: LD_VAR 0 8
30568: PPUSH
30569: LD_VAR 0 5
30573: PPUSH
30574: LD_VAR 0 6
30578: PPUSH
30579: LD_INT 1
30581: PPUSH
30582: CALL_OW 48
// end ;
30586: LD_VAR 0 7
30590: RET
// export hInvincible ; every 1 do
30591: GO 30593
30593: DISABLE
// hInvincible := [ ] ;
30594: LD_ADDR_EXP 124
30598: PUSH
30599: EMPTY
30600: ST_TO_ADDR
30601: END
// every 10 do var i ;
30602: GO 30604
30604: DISABLE
30605: LD_INT 0
30607: PPUSH
// begin enable ;
30608: ENABLE
// if not hInvincible then
30609: LD_EXP 124
30613: NOT
30614: IFFALSE 30618
// exit ;
30616: GO 30662
// for i in hInvincible do
30618: LD_ADDR_VAR 0 1
30622: PUSH
30623: LD_EXP 124
30627: PUSH
30628: FOR_IN
30629: IFFALSE 30660
// if GetLives ( i ) < 1000 then
30631: LD_VAR 0 1
30635: PPUSH
30636: CALL_OW 256
30640: PUSH
30641: LD_INT 1000
30643: LESS
30644: IFFALSE 30658
// SetLives ( i , 1000 ) ;
30646: LD_VAR 0 1
30650: PPUSH
30651: LD_INT 1000
30653: PPUSH
30654: CALL_OW 234
30658: GO 30628
30660: POP
30661: POP
// end ;
30662: PPOPN 1
30664: END
// export function hHackInvincible ; var i ; begin
30665: LD_INT 0
30667: PPUSH
30668: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30669: LD_ADDR_VAR 0 2
30673: PUSH
30674: LD_INT 2
30676: PUSH
30677: LD_INT 21
30679: PUSH
30680: LD_INT 1
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: LD_INT 21
30689: PUSH
30690: LD_INT 2
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: LIST
30701: PPUSH
30702: CALL_OW 69
30706: PUSH
30707: FOR_IN
30708: IFFALSE 30769
// if IsSelected ( i ) then
30710: LD_VAR 0 2
30714: PPUSH
30715: CALL_OW 306
30719: IFFALSE 30767
// begin if i in hInvincible then
30721: LD_VAR 0 2
30725: PUSH
30726: LD_EXP 124
30730: IN
30731: IFFALSE 30751
// hInvincible := hInvincible diff i else
30733: LD_ADDR_EXP 124
30737: PUSH
30738: LD_EXP 124
30742: PUSH
30743: LD_VAR 0 2
30747: DIFF
30748: ST_TO_ADDR
30749: GO 30767
// hInvincible := hInvincible union i ;
30751: LD_ADDR_EXP 124
30755: PUSH
30756: LD_EXP 124
30760: PUSH
30761: LD_VAR 0 2
30765: UNION
30766: ST_TO_ADDR
// end ;
30767: GO 30707
30769: POP
30770: POP
// end ;
30771: LD_VAR 0 1
30775: RET
// export function hHackInvisible ; var i , j ; begin
30776: LD_INT 0
30778: PPUSH
30779: PPUSH
30780: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30781: LD_ADDR_VAR 0 2
30785: PUSH
30786: LD_INT 21
30788: PUSH
30789: LD_INT 1
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PPUSH
30796: CALL_OW 69
30800: PUSH
30801: FOR_IN
30802: IFFALSE 30826
// if IsSelected ( i ) then
30804: LD_VAR 0 2
30808: PPUSH
30809: CALL_OW 306
30813: IFFALSE 30824
// ComForceInvisible ( i ) ;
30815: LD_VAR 0 2
30819: PPUSH
30820: CALL_OW 496
30824: GO 30801
30826: POP
30827: POP
// end ;
30828: LD_VAR 0 1
30832: RET
// export function hHackChangeYourSide ; begin
30833: LD_INT 0
30835: PPUSH
// if your_side = 8 then
30836: LD_OWVAR 2
30840: PUSH
30841: LD_INT 8
30843: EQUAL
30844: IFFALSE 30856
// your_side := 0 else
30846: LD_ADDR_OWVAR 2
30850: PUSH
30851: LD_INT 0
30853: ST_TO_ADDR
30854: GO 30870
// your_side := your_side + 1 ;
30856: LD_ADDR_OWVAR 2
30860: PUSH
30861: LD_OWVAR 2
30865: PUSH
30866: LD_INT 1
30868: PLUS
30869: ST_TO_ADDR
// end ;
30870: LD_VAR 0 1
30874: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30875: LD_INT 0
30877: PPUSH
30878: PPUSH
30879: PPUSH
// for i in all_units do
30880: LD_ADDR_VAR 0 2
30884: PUSH
30885: LD_OWVAR 3
30889: PUSH
30890: FOR_IN
30891: IFFALSE 30969
// if IsSelected ( i ) then
30893: LD_VAR 0 2
30897: PPUSH
30898: CALL_OW 306
30902: IFFALSE 30967
// begin j := GetSide ( i ) ;
30904: LD_ADDR_VAR 0 3
30908: PUSH
30909: LD_VAR 0 2
30913: PPUSH
30914: CALL_OW 255
30918: ST_TO_ADDR
// if j = 8 then
30919: LD_VAR 0 3
30923: PUSH
30924: LD_INT 8
30926: EQUAL
30927: IFFALSE 30939
// j := 0 else
30929: LD_ADDR_VAR 0 3
30933: PUSH
30934: LD_INT 0
30936: ST_TO_ADDR
30937: GO 30953
// j := j + 1 ;
30939: LD_ADDR_VAR 0 3
30943: PUSH
30944: LD_VAR 0 3
30948: PUSH
30949: LD_INT 1
30951: PLUS
30952: ST_TO_ADDR
// SetSide ( i , j ) ;
30953: LD_VAR 0 2
30957: PPUSH
30958: LD_VAR 0 3
30962: PPUSH
30963: CALL_OW 235
// end ;
30967: GO 30890
30969: POP
30970: POP
// end ;
30971: LD_VAR 0 1
30975: RET
// export function hHackFog ; begin
30976: LD_INT 0
30978: PPUSH
// FogOff ( true ) ;
30979: LD_INT 1
30981: PPUSH
30982: CALL_OW 344
// end ;
30986: LD_VAR 0 1
30990: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30991: LD_INT 0
30993: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30994: LD_VAR 0 1
30998: PPUSH
30999: LD_VAR 0 2
31003: PPUSH
31004: LD_VAR 0 3
31008: PPUSH
31009: LD_INT 1
31011: PPUSH
31012: LD_INT 1
31014: PPUSH
31015: CALL_OW 483
// CenterOnXY ( x , y ) ;
31019: LD_VAR 0 2
31023: PPUSH
31024: LD_VAR 0 3
31028: PPUSH
31029: CALL_OW 84
// end ; end_of_file end_of_file
31033: LD_VAR 0 4
31037: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31038: LD_INT 0
31040: PPUSH
31041: PPUSH
// if exist_mode then
31042: LD_VAR 0 2
31046: IFFALSE 31071
// unit := CreateCharacter ( prefix & ident ) else
31048: LD_ADDR_VAR 0 5
31052: PUSH
31053: LD_VAR 0 3
31057: PUSH
31058: LD_VAR 0 1
31062: STR
31063: PPUSH
31064: CALL_OW 34
31068: ST_TO_ADDR
31069: GO 31086
// unit := NewCharacter ( ident ) ;
31071: LD_ADDR_VAR 0 5
31075: PUSH
31076: LD_VAR 0 1
31080: PPUSH
31081: CALL_OW 25
31085: ST_TO_ADDR
// result := unit ;
31086: LD_ADDR_VAR 0 4
31090: PUSH
31091: LD_VAR 0 5
31095: ST_TO_ADDR
// end ;
31096: LD_VAR 0 4
31100: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31101: LD_INT 0
31103: PPUSH
31104: PPUSH
// if not side or not nation then
31105: LD_VAR 0 1
31109: NOT
31110: PUSH
31111: LD_VAR 0 2
31115: NOT
31116: OR
31117: IFFALSE 31121
// exit ;
31119: GO 31885
// case nation of nation_american :
31121: LD_VAR 0 2
31125: PUSH
31126: LD_INT 1
31128: DOUBLE
31129: EQUAL
31130: IFTRUE 31134
31132: GO 31348
31134: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31135: LD_ADDR_VAR 0 4
31139: PUSH
31140: LD_INT 35
31142: PUSH
31143: LD_INT 45
31145: PUSH
31146: LD_INT 46
31148: PUSH
31149: LD_INT 47
31151: PUSH
31152: LD_INT 82
31154: PUSH
31155: LD_INT 83
31157: PUSH
31158: LD_INT 84
31160: PUSH
31161: LD_INT 85
31163: PUSH
31164: LD_INT 86
31166: PUSH
31167: LD_INT 1
31169: PUSH
31170: LD_INT 2
31172: PUSH
31173: LD_INT 6
31175: PUSH
31176: LD_INT 15
31178: PUSH
31179: LD_INT 16
31181: PUSH
31182: LD_INT 7
31184: PUSH
31185: LD_INT 12
31187: PUSH
31188: LD_INT 13
31190: PUSH
31191: LD_INT 10
31193: PUSH
31194: LD_INT 14
31196: PUSH
31197: LD_INT 20
31199: PUSH
31200: LD_INT 21
31202: PUSH
31203: LD_INT 22
31205: PUSH
31206: LD_INT 25
31208: PUSH
31209: LD_INT 32
31211: PUSH
31212: LD_INT 27
31214: PUSH
31215: LD_INT 36
31217: PUSH
31218: LD_INT 69
31220: PUSH
31221: LD_INT 39
31223: PUSH
31224: LD_INT 34
31226: PUSH
31227: LD_INT 40
31229: PUSH
31230: LD_INT 48
31232: PUSH
31233: LD_INT 49
31235: PUSH
31236: LD_INT 50
31238: PUSH
31239: LD_INT 51
31241: PUSH
31242: LD_INT 52
31244: PUSH
31245: LD_INT 53
31247: PUSH
31248: LD_INT 54
31250: PUSH
31251: LD_INT 55
31253: PUSH
31254: LD_INT 56
31256: PUSH
31257: LD_INT 57
31259: PUSH
31260: LD_INT 58
31262: PUSH
31263: LD_INT 59
31265: PUSH
31266: LD_INT 60
31268: PUSH
31269: LD_INT 61
31271: PUSH
31272: LD_INT 62
31274: PUSH
31275: LD_INT 80
31277: PUSH
31278: LD_INT 82
31280: PUSH
31281: LD_INT 83
31283: PUSH
31284: LD_INT 84
31286: PUSH
31287: LD_INT 85
31289: PUSH
31290: LD_INT 86
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: ST_TO_ADDR
31346: GO 31809
31348: LD_INT 2
31350: DOUBLE
31351: EQUAL
31352: IFTRUE 31356
31354: GO 31578
31356: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
31357: LD_ADDR_VAR 0 4
31361: PUSH
31362: LD_INT 35
31364: PUSH
31365: LD_INT 45
31367: PUSH
31368: LD_INT 46
31370: PUSH
31371: LD_INT 47
31373: PUSH
31374: LD_INT 82
31376: PUSH
31377: LD_INT 83
31379: PUSH
31380: LD_INT 84
31382: PUSH
31383: LD_INT 85
31385: PUSH
31386: LD_INT 87
31388: PUSH
31389: LD_INT 70
31391: PUSH
31392: LD_INT 1
31394: PUSH
31395: LD_INT 11
31397: PUSH
31398: LD_INT 3
31400: PUSH
31401: LD_INT 4
31403: PUSH
31404: LD_INT 5
31406: PUSH
31407: LD_INT 6
31409: PUSH
31410: LD_INT 15
31412: PUSH
31413: LD_INT 18
31415: PUSH
31416: LD_INT 7
31418: PUSH
31419: LD_INT 17
31421: PUSH
31422: LD_INT 8
31424: PUSH
31425: LD_INT 20
31427: PUSH
31428: LD_INT 21
31430: PUSH
31431: LD_INT 22
31433: PUSH
31434: LD_INT 72
31436: PUSH
31437: LD_INT 26
31439: PUSH
31440: LD_INT 69
31442: PUSH
31443: LD_INT 39
31445: PUSH
31446: LD_INT 40
31448: PUSH
31449: LD_INT 41
31451: PUSH
31452: LD_INT 42
31454: PUSH
31455: LD_INT 43
31457: PUSH
31458: LD_INT 48
31460: PUSH
31461: LD_INT 49
31463: PUSH
31464: LD_INT 50
31466: PUSH
31467: LD_INT 51
31469: PUSH
31470: LD_INT 52
31472: PUSH
31473: LD_INT 53
31475: PUSH
31476: LD_INT 54
31478: PUSH
31479: LD_INT 55
31481: PUSH
31482: LD_INT 56
31484: PUSH
31485: LD_INT 60
31487: PUSH
31488: LD_INT 61
31490: PUSH
31491: LD_INT 62
31493: PUSH
31494: LD_INT 66
31496: PUSH
31497: LD_INT 67
31499: PUSH
31500: LD_INT 68
31502: PUSH
31503: LD_INT 81
31505: PUSH
31506: LD_INT 82
31508: PUSH
31509: LD_INT 83
31511: PUSH
31512: LD_INT 84
31514: PUSH
31515: LD_INT 85
31517: PUSH
31518: LD_INT 87
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: ST_TO_ADDR
31576: GO 31809
31578: LD_INT 3
31580: DOUBLE
31581: EQUAL
31582: IFTRUE 31586
31584: GO 31808
31586: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31587: LD_ADDR_VAR 0 4
31591: PUSH
31592: LD_INT 46
31594: PUSH
31595: LD_INT 47
31597: PUSH
31598: LD_INT 1
31600: PUSH
31601: LD_INT 2
31603: PUSH
31604: LD_INT 82
31606: PUSH
31607: LD_INT 83
31609: PUSH
31610: LD_INT 84
31612: PUSH
31613: LD_INT 85
31615: PUSH
31616: LD_INT 86
31618: PUSH
31619: LD_INT 11
31621: PUSH
31622: LD_INT 9
31624: PUSH
31625: LD_INT 20
31627: PUSH
31628: LD_INT 19
31630: PUSH
31631: LD_INT 21
31633: PUSH
31634: LD_INT 24
31636: PUSH
31637: LD_INT 22
31639: PUSH
31640: LD_INT 25
31642: PUSH
31643: LD_INT 28
31645: PUSH
31646: LD_INT 29
31648: PUSH
31649: LD_INT 30
31651: PUSH
31652: LD_INT 31
31654: PUSH
31655: LD_INT 37
31657: PUSH
31658: LD_INT 38
31660: PUSH
31661: LD_INT 32
31663: PUSH
31664: LD_INT 27
31666: PUSH
31667: LD_INT 33
31669: PUSH
31670: LD_INT 69
31672: PUSH
31673: LD_INT 39
31675: PUSH
31676: LD_INT 34
31678: PUSH
31679: LD_INT 40
31681: PUSH
31682: LD_INT 71
31684: PUSH
31685: LD_INT 23
31687: PUSH
31688: LD_INT 44
31690: PUSH
31691: LD_INT 48
31693: PUSH
31694: LD_INT 49
31696: PUSH
31697: LD_INT 50
31699: PUSH
31700: LD_INT 51
31702: PUSH
31703: LD_INT 52
31705: PUSH
31706: LD_INT 53
31708: PUSH
31709: LD_INT 54
31711: PUSH
31712: LD_INT 55
31714: PUSH
31715: LD_INT 56
31717: PUSH
31718: LD_INT 57
31720: PUSH
31721: LD_INT 58
31723: PUSH
31724: LD_INT 59
31726: PUSH
31727: LD_INT 63
31729: PUSH
31730: LD_INT 64
31732: PUSH
31733: LD_INT 65
31735: PUSH
31736: LD_INT 82
31738: PUSH
31739: LD_INT 83
31741: PUSH
31742: LD_INT 84
31744: PUSH
31745: LD_INT 85
31747: PUSH
31748: LD_INT 86
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: ST_TO_ADDR
31806: GO 31809
31808: POP
// if state > - 1 and state < 3 then
31809: LD_VAR 0 3
31813: PUSH
31814: LD_INT 1
31816: NEG
31817: GREATER
31818: PUSH
31819: LD_VAR 0 3
31823: PUSH
31824: LD_INT 3
31826: LESS
31827: AND
31828: IFFALSE 31885
// for i in result do
31830: LD_ADDR_VAR 0 5
31834: PUSH
31835: LD_VAR 0 4
31839: PUSH
31840: FOR_IN
31841: IFFALSE 31883
// if GetTech ( i , side ) <> state then
31843: LD_VAR 0 5
31847: PPUSH
31848: LD_VAR 0 1
31852: PPUSH
31853: CALL_OW 321
31857: PUSH
31858: LD_VAR 0 3
31862: NONEQUAL
31863: IFFALSE 31881
// result := result diff i ;
31865: LD_ADDR_VAR 0 4
31869: PUSH
31870: LD_VAR 0 4
31874: PUSH
31875: LD_VAR 0 5
31879: DIFF
31880: ST_TO_ADDR
31881: GO 31840
31883: POP
31884: POP
// end ;
31885: LD_VAR 0 4
31889: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31890: LD_INT 0
31892: PPUSH
31893: PPUSH
31894: PPUSH
// result := true ;
31895: LD_ADDR_VAR 0 3
31899: PUSH
31900: LD_INT 1
31902: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31903: LD_ADDR_VAR 0 5
31907: PUSH
31908: LD_VAR 0 2
31912: PPUSH
31913: CALL_OW 480
31917: ST_TO_ADDR
// if not tmp then
31918: LD_VAR 0 5
31922: NOT
31923: IFFALSE 31927
// exit ;
31925: GO 31976
// for i in tmp do
31927: LD_ADDR_VAR 0 4
31931: PUSH
31932: LD_VAR 0 5
31936: PUSH
31937: FOR_IN
31938: IFFALSE 31974
// if GetTech ( i , side ) <> state_researched then
31940: LD_VAR 0 4
31944: PPUSH
31945: LD_VAR 0 1
31949: PPUSH
31950: CALL_OW 321
31954: PUSH
31955: LD_INT 2
31957: NONEQUAL
31958: IFFALSE 31972
// begin result := false ;
31960: LD_ADDR_VAR 0 3
31964: PUSH
31965: LD_INT 0
31967: ST_TO_ADDR
// exit ;
31968: POP
31969: POP
31970: GO 31976
// end ;
31972: GO 31937
31974: POP
31975: POP
// end ;
31976: LD_VAR 0 3
31980: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31981: LD_INT 0
31983: PPUSH
31984: PPUSH
31985: PPUSH
31986: PPUSH
31987: PPUSH
31988: PPUSH
31989: PPUSH
31990: PPUSH
31991: PPUSH
31992: PPUSH
31993: PPUSH
31994: PPUSH
31995: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31996: LD_VAR 0 1
32000: NOT
32001: PUSH
32002: LD_VAR 0 1
32006: PPUSH
32007: CALL_OW 257
32011: PUSH
32012: LD_INT 9
32014: NONEQUAL
32015: OR
32016: IFFALSE 32020
// exit ;
32018: GO 32593
// side := GetSide ( unit ) ;
32020: LD_ADDR_VAR 0 9
32024: PUSH
32025: LD_VAR 0 1
32029: PPUSH
32030: CALL_OW 255
32034: ST_TO_ADDR
// tech_space := tech_spacanom ;
32035: LD_ADDR_VAR 0 12
32039: PUSH
32040: LD_INT 29
32042: ST_TO_ADDR
// tech_time := tech_taurad ;
32043: LD_ADDR_VAR 0 13
32047: PUSH
32048: LD_INT 28
32050: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32051: LD_ADDR_VAR 0 11
32055: PUSH
32056: LD_VAR 0 1
32060: PPUSH
32061: CALL_OW 310
32065: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32066: LD_VAR 0 11
32070: PPUSH
32071: CALL_OW 247
32075: PUSH
32076: LD_INT 2
32078: EQUAL
32079: IFFALSE 32083
// exit ;
32081: GO 32593
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32083: LD_ADDR_VAR 0 8
32087: PUSH
32088: LD_INT 81
32090: PUSH
32091: LD_VAR 0 9
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: LD_INT 3
32102: PUSH
32103: LD_INT 21
32105: PUSH
32106: LD_INT 3
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PPUSH
32121: CALL_OW 69
32125: ST_TO_ADDR
// if not tmp then
32126: LD_VAR 0 8
32130: NOT
32131: IFFALSE 32135
// exit ;
32133: GO 32593
// if in_unit then
32135: LD_VAR 0 11
32139: IFFALSE 32163
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32141: LD_ADDR_VAR 0 10
32145: PUSH
32146: LD_VAR 0 8
32150: PPUSH
32151: LD_VAR 0 11
32155: PPUSH
32156: CALL_OW 74
32160: ST_TO_ADDR
32161: GO 32183
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32163: LD_ADDR_VAR 0 10
32167: PUSH
32168: LD_VAR 0 8
32172: PPUSH
32173: LD_VAR 0 1
32177: PPUSH
32178: CALL_OW 74
32182: ST_TO_ADDR
// if not enemy then
32183: LD_VAR 0 10
32187: NOT
32188: IFFALSE 32192
// exit ;
32190: GO 32593
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32192: LD_VAR 0 11
32196: PUSH
32197: LD_VAR 0 11
32201: PPUSH
32202: LD_VAR 0 10
32206: PPUSH
32207: CALL_OW 296
32211: PUSH
32212: LD_INT 13
32214: GREATER
32215: AND
32216: PUSH
32217: LD_VAR 0 1
32221: PPUSH
32222: LD_VAR 0 10
32226: PPUSH
32227: CALL_OW 296
32231: PUSH
32232: LD_INT 12
32234: GREATER
32235: OR
32236: IFFALSE 32240
// exit ;
32238: GO 32593
// missile := [ 1 ] ;
32240: LD_ADDR_VAR 0 14
32244: PUSH
32245: LD_INT 1
32247: PUSH
32248: EMPTY
32249: LIST
32250: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32251: LD_VAR 0 9
32255: PPUSH
32256: LD_VAR 0 12
32260: PPUSH
32261: CALL_OW 325
32265: IFFALSE 32294
// missile := Insert ( missile , missile + 1 , 2 ) ;
32267: LD_ADDR_VAR 0 14
32271: PUSH
32272: LD_VAR 0 14
32276: PPUSH
32277: LD_VAR 0 14
32281: PUSH
32282: LD_INT 1
32284: PLUS
32285: PPUSH
32286: LD_INT 2
32288: PPUSH
32289: CALL_OW 2
32293: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32294: LD_VAR 0 9
32298: PPUSH
32299: LD_VAR 0 13
32303: PPUSH
32304: CALL_OW 325
32308: PUSH
32309: LD_VAR 0 10
32313: PPUSH
32314: CALL_OW 255
32318: PPUSH
32319: LD_VAR 0 13
32323: PPUSH
32324: CALL_OW 325
32328: NOT
32329: AND
32330: IFFALSE 32359
// missile := Insert ( missile , missile + 1 , 3 ) ;
32332: LD_ADDR_VAR 0 14
32336: PUSH
32337: LD_VAR 0 14
32341: PPUSH
32342: LD_VAR 0 14
32346: PUSH
32347: LD_INT 1
32349: PLUS
32350: PPUSH
32351: LD_INT 3
32353: PPUSH
32354: CALL_OW 2
32358: ST_TO_ADDR
// if missile < 2 then
32359: LD_VAR 0 14
32363: PUSH
32364: LD_INT 2
32366: LESS
32367: IFFALSE 32371
// exit ;
32369: GO 32593
// x := GetX ( enemy ) ;
32371: LD_ADDR_VAR 0 4
32375: PUSH
32376: LD_VAR 0 10
32380: PPUSH
32381: CALL_OW 250
32385: ST_TO_ADDR
// y := GetY ( enemy ) ;
32386: LD_ADDR_VAR 0 5
32390: PUSH
32391: LD_VAR 0 10
32395: PPUSH
32396: CALL_OW 251
32400: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32401: LD_ADDR_VAR 0 6
32405: PUSH
32406: LD_VAR 0 4
32410: PUSH
32411: LD_INT 1
32413: NEG
32414: PPUSH
32415: LD_INT 1
32417: PPUSH
32418: CALL_OW 12
32422: PLUS
32423: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32424: LD_ADDR_VAR 0 7
32428: PUSH
32429: LD_VAR 0 5
32433: PUSH
32434: LD_INT 1
32436: NEG
32437: PPUSH
32438: LD_INT 1
32440: PPUSH
32441: CALL_OW 12
32445: PLUS
32446: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32447: LD_VAR 0 6
32451: PPUSH
32452: LD_VAR 0 7
32456: PPUSH
32457: CALL_OW 488
32461: NOT
32462: IFFALSE 32484
// begin _x := x ;
32464: LD_ADDR_VAR 0 6
32468: PUSH
32469: LD_VAR 0 4
32473: ST_TO_ADDR
// _y := y ;
32474: LD_ADDR_VAR 0 7
32478: PUSH
32479: LD_VAR 0 5
32483: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32484: LD_ADDR_VAR 0 3
32488: PUSH
32489: LD_INT 1
32491: PPUSH
32492: LD_VAR 0 14
32496: PPUSH
32497: CALL_OW 12
32501: ST_TO_ADDR
// case i of 1 :
32502: LD_VAR 0 3
32506: PUSH
32507: LD_INT 1
32509: DOUBLE
32510: EQUAL
32511: IFTRUE 32515
32513: GO 32532
32515: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32516: LD_VAR 0 1
32520: PPUSH
32521: LD_VAR 0 10
32525: PPUSH
32526: CALL_OW 115
32530: GO 32593
32532: LD_INT 2
32534: DOUBLE
32535: EQUAL
32536: IFTRUE 32540
32538: GO 32562
32540: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32541: LD_VAR 0 1
32545: PPUSH
32546: LD_VAR 0 6
32550: PPUSH
32551: LD_VAR 0 7
32555: PPUSH
32556: CALL_OW 153
32560: GO 32593
32562: LD_INT 3
32564: DOUBLE
32565: EQUAL
32566: IFTRUE 32570
32568: GO 32592
32570: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32571: LD_VAR 0 1
32575: PPUSH
32576: LD_VAR 0 6
32580: PPUSH
32581: LD_VAR 0 7
32585: PPUSH
32586: CALL_OW 154
32590: GO 32593
32592: POP
// end ;
32593: LD_VAR 0 2
32597: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32598: LD_INT 0
32600: PPUSH
32601: PPUSH
32602: PPUSH
32603: PPUSH
32604: PPUSH
32605: PPUSH
// if not unit or not building then
32606: LD_VAR 0 1
32610: NOT
32611: PUSH
32612: LD_VAR 0 2
32616: NOT
32617: OR
32618: IFFALSE 32622
// exit ;
32620: GO 32780
// x := GetX ( building ) ;
32622: LD_ADDR_VAR 0 5
32626: PUSH
32627: LD_VAR 0 2
32631: PPUSH
32632: CALL_OW 250
32636: ST_TO_ADDR
// y := GetY ( building ) ;
32637: LD_ADDR_VAR 0 6
32641: PUSH
32642: LD_VAR 0 2
32646: PPUSH
32647: CALL_OW 251
32651: ST_TO_ADDR
// for i = 0 to 5 do
32652: LD_ADDR_VAR 0 4
32656: PUSH
32657: DOUBLE
32658: LD_INT 0
32660: DEC
32661: ST_TO_ADDR
32662: LD_INT 5
32664: PUSH
32665: FOR_TO
32666: IFFALSE 32778
// begin _x := ShiftX ( x , i , 3 ) ;
32668: LD_ADDR_VAR 0 7
32672: PUSH
32673: LD_VAR 0 5
32677: PPUSH
32678: LD_VAR 0 4
32682: PPUSH
32683: LD_INT 3
32685: PPUSH
32686: CALL_OW 272
32690: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32691: LD_ADDR_VAR 0 8
32695: PUSH
32696: LD_VAR 0 6
32700: PPUSH
32701: LD_VAR 0 4
32705: PPUSH
32706: LD_INT 3
32708: PPUSH
32709: CALL_OW 273
32713: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32714: LD_VAR 0 7
32718: PPUSH
32719: LD_VAR 0 8
32723: PPUSH
32724: CALL_OW 488
32728: NOT
32729: IFFALSE 32733
// continue ;
32731: GO 32665
// if HexInfo ( _x , _y ) = 0 then
32733: LD_VAR 0 7
32737: PPUSH
32738: LD_VAR 0 8
32742: PPUSH
32743: CALL_OW 428
32747: PUSH
32748: LD_INT 0
32750: EQUAL
32751: IFFALSE 32776
// begin ComMoveXY ( unit , _x , _y ) ;
32753: LD_VAR 0 1
32757: PPUSH
32758: LD_VAR 0 7
32762: PPUSH
32763: LD_VAR 0 8
32767: PPUSH
32768: CALL_OW 111
// exit ;
32772: POP
32773: POP
32774: GO 32780
// end ; end ;
32776: GO 32665
32778: POP
32779: POP
// end ;
32780: LD_VAR 0 3
32784: RET
// export function ScanBase ( side , base_area ) ; begin
32785: LD_INT 0
32787: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32788: LD_ADDR_VAR 0 3
32792: PUSH
32793: LD_VAR 0 2
32797: PPUSH
32798: LD_INT 81
32800: PUSH
32801: LD_VAR 0 1
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PPUSH
32810: CALL_OW 70
32814: ST_TO_ADDR
// end ;
32815: LD_VAR 0 3
32819: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32820: LD_INT 0
32822: PPUSH
32823: PPUSH
32824: PPUSH
32825: PPUSH
// result := false ;
32826: LD_ADDR_VAR 0 2
32830: PUSH
32831: LD_INT 0
32833: ST_TO_ADDR
// side := GetSide ( unit ) ;
32834: LD_ADDR_VAR 0 3
32838: PUSH
32839: LD_VAR 0 1
32843: PPUSH
32844: CALL_OW 255
32848: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32849: LD_ADDR_VAR 0 4
32853: PUSH
32854: LD_VAR 0 1
32858: PPUSH
32859: CALL_OW 248
32863: ST_TO_ADDR
// case nat of 1 :
32864: LD_VAR 0 4
32868: PUSH
32869: LD_INT 1
32871: DOUBLE
32872: EQUAL
32873: IFTRUE 32877
32875: GO 32888
32877: POP
// tech := tech_lassight ; 2 :
32878: LD_ADDR_VAR 0 5
32882: PUSH
32883: LD_INT 12
32885: ST_TO_ADDR
32886: GO 32927
32888: LD_INT 2
32890: DOUBLE
32891: EQUAL
32892: IFTRUE 32896
32894: GO 32907
32896: POP
// tech := tech_mortar ; 3 :
32897: LD_ADDR_VAR 0 5
32901: PUSH
32902: LD_INT 41
32904: ST_TO_ADDR
32905: GO 32927
32907: LD_INT 3
32909: DOUBLE
32910: EQUAL
32911: IFTRUE 32915
32913: GO 32926
32915: POP
// tech := tech_bazooka ; end ;
32916: LD_ADDR_VAR 0 5
32920: PUSH
32921: LD_INT 44
32923: ST_TO_ADDR
32924: GO 32927
32926: POP
// if Researched ( side , tech ) then
32927: LD_VAR 0 3
32931: PPUSH
32932: LD_VAR 0 5
32936: PPUSH
32937: CALL_OW 325
32941: IFFALSE 32968
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32943: LD_ADDR_VAR 0 2
32947: PUSH
32948: LD_INT 5
32950: PUSH
32951: LD_INT 8
32953: PUSH
32954: LD_INT 9
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: LIST
32961: PUSH
32962: LD_VAR 0 4
32966: ARRAY
32967: ST_TO_ADDR
// end ;
32968: LD_VAR 0 2
32972: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32973: LD_INT 0
32975: PPUSH
32976: PPUSH
32977: PPUSH
// if not mines then
32978: LD_VAR 0 2
32982: NOT
32983: IFFALSE 32987
// exit ;
32985: GO 33131
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32987: LD_ADDR_VAR 0 5
32991: PUSH
32992: LD_INT 81
32994: PUSH
32995: LD_VAR 0 1
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 3
33006: PUSH
33007: LD_INT 21
33009: PUSH
33010: LD_INT 3
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PPUSH
33025: CALL_OW 69
33029: ST_TO_ADDR
// for i in mines do
33030: LD_ADDR_VAR 0 4
33034: PUSH
33035: LD_VAR 0 2
33039: PUSH
33040: FOR_IN
33041: IFFALSE 33129
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33043: LD_VAR 0 4
33047: PUSH
33048: LD_INT 1
33050: ARRAY
33051: PPUSH
33052: LD_VAR 0 4
33056: PUSH
33057: LD_INT 2
33059: ARRAY
33060: PPUSH
33061: CALL_OW 458
33065: NOT
33066: IFFALSE 33070
// continue ;
33068: GO 33040
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33070: LD_VAR 0 4
33074: PUSH
33075: LD_INT 1
33077: ARRAY
33078: PPUSH
33079: LD_VAR 0 4
33083: PUSH
33084: LD_INT 2
33086: ARRAY
33087: PPUSH
33088: CALL_OW 428
33092: PUSH
33093: LD_VAR 0 5
33097: IN
33098: IFFALSE 33127
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33100: LD_VAR 0 4
33104: PUSH
33105: LD_INT 1
33107: ARRAY
33108: PPUSH
33109: LD_VAR 0 4
33113: PUSH
33114: LD_INT 2
33116: ARRAY
33117: PPUSH
33118: LD_VAR 0 1
33122: PPUSH
33123: CALL_OW 456
// end ;
33127: GO 33040
33129: POP
33130: POP
// end ;
33131: LD_VAR 0 3
33135: RET
// export function Count ( array ) ; var i ; begin
33136: LD_INT 0
33138: PPUSH
33139: PPUSH
// result := 0 ;
33140: LD_ADDR_VAR 0 2
33144: PUSH
33145: LD_INT 0
33147: ST_TO_ADDR
// for i in array do
33148: LD_ADDR_VAR 0 3
33152: PUSH
33153: LD_VAR 0 1
33157: PUSH
33158: FOR_IN
33159: IFFALSE 33183
// if i then
33161: LD_VAR 0 3
33165: IFFALSE 33181
// result := result + 1 ;
33167: LD_ADDR_VAR 0 2
33171: PUSH
33172: LD_VAR 0 2
33176: PUSH
33177: LD_INT 1
33179: PLUS
33180: ST_TO_ADDR
33181: GO 33158
33183: POP
33184: POP
// end ;
33185: LD_VAR 0 2
33189: RET
// export function IsEmpty ( building ) ; begin
33190: LD_INT 0
33192: PPUSH
// if not building then
33193: LD_VAR 0 1
33197: NOT
33198: IFFALSE 33202
// exit ;
33200: GO 33245
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33202: LD_ADDR_VAR 0 2
33206: PUSH
33207: LD_VAR 0 1
33211: PUSH
33212: LD_INT 22
33214: PUSH
33215: LD_VAR 0 1
33219: PPUSH
33220: CALL_OW 255
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 58
33231: PUSH
33232: EMPTY
33233: LIST
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PPUSH
33239: CALL_OW 69
33243: IN
33244: ST_TO_ADDR
// end ;
33245: LD_VAR 0 2
33249: RET
// export function IsNotFull ( building ) ; begin
33250: LD_INT 0
33252: PPUSH
// if not building then
33253: LD_VAR 0 1
33257: NOT
33258: IFFALSE 33262
// exit ;
33260: GO 33281
// result := UnitsInside ( building ) < 6 ;
33262: LD_ADDR_VAR 0 2
33266: PUSH
33267: LD_VAR 0 1
33271: PPUSH
33272: CALL_OW 313
33276: PUSH
33277: LD_INT 6
33279: LESS
33280: ST_TO_ADDR
// end ;
33281: LD_VAR 0 2
33285: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33286: LD_INT 0
33288: PPUSH
33289: PPUSH
33290: PPUSH
33291: PPUSH
// tmp := [ ] ;
33292: LD_ADDR_VAR 0 3
33296: PUSH
33297: EMPTY
33298: ST_TO_ADDR
// list := [ ] ;
33299: LD_ADDR_VAR 0 5
33303: PUSH
33304: EMPTY
33305: ST_TO_ADDR
// for i = 16 to 25 do
33306: LD_ADDR_VAR 0 4
33310: PUSH
33311: DOUBLE
33312: LD_INT 16
33314: DEC
33315: ST_TO_ADDR
33316: LD_INT 25
33318: PUSH
33319: FOR_TO
33320: IFFALSE 33393
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33322: LD_ADDR_VAR 0 3
33326: PUSH
33327: LD_VAR 0 3
33331: PUSH
33332: LD_INT 22
33334: PUSH
33335: LD_VAR 0 1
33339: PPUSH
33340: CALL_OW 255
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 91
33351: PUSH
33352: LD_VAR 0 1
33356: PUSH
33357: LD_INT 6
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 30
33367: PUSH
33368: LD_VAR 0 4
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: LIST
33381: PUSH
33382: EMPTY
33383: LIST
33384: PPUSH
33385: CALL_OW 69
33389: ADD
33390: ST_TO_ADDR
33391: GO 33319
33393: POP
33394: POP
// for i = 1 to tmp do
33395: LD_ADDR_VAR 0 4
33399: PUSH
33400: DOUBLE
33401: LD_INT 1
33403: DEC
33404: ST_TO_ADDR
33405: LD_VAR 0 3
33409: PUSH
33410: FOR_TO
33411: IFFALSE 33499
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33413: LD_ADDR_VAR 0 5
33417: PUSH
33418: LD_VAR 0 5
33422: PUSH
33423: LD_VAR 0 3
33427: PUSH
33428: LD_VAR 0 4
33432: ARRAY
33433: PPUSH
33434: CALL_OW 266
33438: PUSH
33439: LD_VAR 0 3
33443: PUSH
33444: LD_VAR 0 4
33448: ARRAY
33449: PPUSH
33450: CALL_OW 250
33454: PUSH
33455: LD_VAR 0 3
33459: PUSH
33460: LD_VAR 0 4
33464: ARRAY
33465: PPUSH
33466: CALL_OW 251
33470: PUSH
33471: LD_VAR 0 3
33475: PUSH
33476: LD_VAR 0 4
33480: ARRAY
33481: PPUSH
33482: CALL_OW 254
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: PUSH
33493: EMPTY
33494: LIST
33495: ADD
33496: ST_TO_ADDR
33497: GO 33410
33499: POP
33500: POP
// result := list ;
33501: LD_ADDR_VAR 0 2
33505: PUSH
33506: LD_VAR 0 5
33510: ST_TO_ADDR
// end ;
33511: LD_VAR 0 2
33515: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33516: LD_INT 0
33518: PPUSH
33519: PPUSH
33520: PPUSH
33521: PPUSH
33522: PPUSH
33523: PPUSH
33524: PPUSH
// if not factory then
33525: LD_VAR 0 1
33529: NOT
33530: IFFALSE 33534
// exit ;
33532: GO 34127
// if control = control_apeman then
33534: LD_VAR 0 4
33538: PUSH
33539: LD_INT 5
33541: EQUAL
33542: IFFALSE 33651
// begin tmp := UnitsInside ( factory ) ;
33544: LD_ADDR_VAR 0 8
33548: PUSH
33549: LD_VAR 0 1
33553: PPUSH
33554: CALL_OW 313
33558: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33559: LD_VAR 0 8
33563: PPUSH
33564: LD_INT 25
33566: PUSH
33567: LD_INT 12
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PPUSH
33574: CALL_OW 72
33578: NOT
33579: IFFALSE 33589
// control := control_manual ;
33581: LD_ADDR_VAR 0 4
33585: PUSH
33586: LD_INT 1
33588: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33589: LD_ADDR_VAR 0 8
33593: PUSH
33594: LD_VAR 0 1
33598: PPUSH
33599: CALL 33286 0 1
33603: ST_TO_ADDR
// if tmp then
33604: LD_VAR 0 8
33608: IFFALSE 33651
// begin for i in tmp do
33610: LD_ADDR_VAR 0 7
33614: PUSH
33615: LD_VAR 0 8
33619: PUSH
33620: FOR_IN
33621: IFFALSE 33649
// if i [ 1 ] = b_ext_radio then
33623: LD_VAR 0 7
33627: PUSH
33628: LD_INT 1
33630: ARRAY
33631: PUSH
33632: LD_INT 22
33634: EQUAL
33635: IFFALSE 33647
// begin control := control_remote ;
33637: LD_ADDR_VAR 0 4
33641: PUSH
33642: LD_INT 2
33644: ST_TO_ADDR
// break ;
33645: GO 33649
// end ;
33647: GO 33620
33649: POP
33650: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33651: LD_VAR 0 1
33655: PPUSH
33656: LD_VAR 0 2
33660: PPUSH
33661: LD_VAR 0 3
33665: PPUSH
33666: LD_VAR 0 4
33670: PPUSH
33671: LD_VAR 0 5
33675: PPUSH
33676: CALL_OW 448
33680: IFFALSE 33715
// begin result := [ chassis , engine , control , weapon ] ;
33682: LD_ADDR_VAR 0 6
33686: PUSH
33687: LD_VAR 0 2
33691: PUSH
33692: LD_VAR 0 3
33696: PUSH
33697: LD_VAR 0 4
33701: PUSH
33702: LD_VAR 0 5
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: ST_TO_ADDR
// exit ;
33713: GO 34127
// end ; _chassis := AvailableChassisList ( factory ) ;
33715: LD_ADDR_VAR 0 9
33719: PUSH
33720: LD_VAR 0 1
33724: PPUSH
33725: CALL_OW 475
33729: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33730: LD_ADDR_VAR 0 11
33734: PUSH
33735: LD_VAR 0 1
33739: PPUSH
33740: CALL_OW 476
33744: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33745: LD_ADDR_VAR 0 12
33749: PUSH
33750: LD_VAR 0 1
33754: PPUSH
33755: CALL_OW 477
33759: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33760: LD_ADDR_VAR 0 10
33764: PUSH
33765: LD_VAR 0 1
33769: PPUSH
33770: CALL_OW 478
33774: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33775: LD_VAR 0 9
33779: NOT
33780: PUSH
33781: LD_VAR 0 11
33785: NOT
33786: OR
33787: PUSH
33788: LD_VAR 0 12
33792: NOT
33793: OR
33794: PUSH
33795: LD_VAR 0 10
33799: NOT
33800: OR
33801: IFFALSE 33836
// begin result := [ chassis , engine , control , weapon ] ;
33803: LD_ADDR_VAR 0 6
33807: PUSH
33808: LD_VAR 0 2
33812: PUSH
33813: LD_VAR 0 3
33817: PUSH
33818: LD_VAR 0 4
33822: PUSH
33823: LD_VAR 0 5
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: ST_TO_ADDR
// exit ;
33834: GO 34127
// end ; if not chassis in _chassis then
33836: LD_VAR 0 2
33840: PUSH
33841: LD_VAR 0 9
33845: IN
33846: NOT
33847: IFFALSE 33873
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33849: LD_ADDR_VAR 0 2
33853: PUSH
33854: LD_VAR 0 9
33858: PUSH
33859: LD_INT 1
33861: PPUSH
33862: LD_VAR 0 9
33866: PPUSH
33867: CALL_OW 12
33871: ARRAY
33872: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33873: LD_VAR 0 2
33877: PPUSH
33878: LD_VAR 0 3
33882: PPUSH
33883: CALL 34132 0 2
33887: NOT
33888: IFFALSE 33947
// repeat engine := _engine [ 1 ] ;
33890: LD_ADDR_VAR 0 3
33894: PUSH
33895: LD_VAR 0 11
33899: PUSH
33900: LD_INT 1
33902: ARRAY
33903: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33904: LD_ADDR_VAR 0 11
33908: PUSH
33909: LD_VAR 0 11
33913: PPUSH
33914: LD_INT 1
33916: PPUSH
33917: CALL_OW 3
33921: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33922: LD_VAR 0 2
33926: PPUSH
33927: LD_VAR 0 3
33931: PPUSH
33932: CALL 34132 0 2
33936: PUSH
33937: LD_VAR 0 11
33941: PUSH
33942: EMPTY
33943: EQUAL
33944: OR
33945: IFFALSE 33890
// if not control in _control then
33947: LD_VAR 0 4
33951: PUSH
33952: LD_VAR 0 12
33956: IN
33957: NOT
33958: IFFALSE 33984
// control := _control [ rand ( 1 , _control ) ] ;
33960: LD_ADDR_VAR 0 4
33964: PUSH
33965: LD_VAR 0 12
33969: PUSH
33970: LD_INT 1
33972: PPUSH
33973: LD_VAR 0 12
33977: PPUSH
33978: CALL_OW 12
33982: ARRAY
33983: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33984: LD_VAR 0 2
33988: PPUSH
33989: LD_VAR 0 5
33993: PPUSH
33994: CALL 34352 0 2
33998: NOT
33999: IFFALSE 34058
// repeat weapon := _weapon [ 1 ] ;
34001: LD_ADDR_VAR 0 5
34005: PUSH
34006: LD_VAR 0 10
34010: PUSH
34011: LD_INT 1
34013: ARRAY
34014: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34015: LD_ADDR_VAR 0 10
34019: PUSH
34020: LD_VAR 0 10
34024: PPUSH
34025: LD_INT 1
34027: PPUSH
34028: CALL_OW 3
34032: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34033: LD_VAR 0 2
34037: PPUSH
34038: LD_VAR 0 5
34042: PPUSH
34043: CALL 34352 0 2
34047: PUSH
34048: LD_VAR 0 10
34052: PUSH
34053: EMPTY
34054: EQUAL
34055: OR
34056: IFFALSE 34001
// result := [ ] ;
34058: LD_ADDR_VAR 0 6
34062: PUSH
34063: EMPTY
34064: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34065: LD_VAR 0 1
34069: PPUSH
34070: LD_VAR 0 2
34074: PPUSH
34075: LD_VAR 0 3
34079: PPUSH
34080: LD_VAR 0 4
34084: PPUSH
34085: LD_VAR 0 5
34089: PPUSH
34090: CALL_OW 448
34094: IFFALSE 34127
// result := [ chassis , engine , control , weapon ] ;
34096: LD_ADDR_VAR 0 6
34100: PUSH
34101: LD_VAR 0 2
34105: PUSH
34106: LD_VAR 0 3
34110: PUSH
34111: LD_VAR 0 4
34115: PUSH
34116: LD_VAR 0 5
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: ST_TO_ADDR
// end ;
34127: LD_VAR 0 6
34131: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34132: LD_INT 0
34134: PPUSH
// if not chassis or not engine then
34135: LD_VAR 0 1
34139: NOT
34140: PUSH
34141: LD_VAR 0 2
34145: NOT
34146: OR
34147: IFFALSE 34151
// exit ;
34149: GO 34347
// case engine of engine_solar :
34151: LD_VAR 0 2
34155: PUSH
34156: LD_INT 2
34158: DOUBLE
34159: EQUAL
34160: IFTRUE 34164
34162: GO 34202
34164: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34165: LD_ADDR_VAR 0 3
34169: PUSH
34170: LD_INT 11
34172: PUSH
34173: LD_INT 12
34175: PUSH
34176: LD_INT 13
34178: PUSH
34179: LD_INT 14
34181: PUSH
34182: LD_INT 1
34184: PUSH
34185: LD_INT 2
34187: PUSH
34188: LD_INT 3
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: ST_TO_ADDR
34200: GO 34331
34202: LD_INT 1
34204: DOUBLE
34205: EQUAL
34206: IFTRUE 34210
34208: GO 34272
34210: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34211: LD_ADDR_VAR 0 3
34215: PUSH
34216: LD_INT 11
34218: PUSH
34219: LD_INT 12
34221: PUSH
34222: LD_INT 13
34224: PUSH
34225: LD_INT 14
34227: PUSH
34228: LD_INT 1
34230: PUSH
34231: LD_INT 2
34233: PUSH
34234: LD_INT 3
34236: PUSH
34237: LD_INT 4
34239: PUSH
34240: LD_INT 5
34242: PUSH
34243: LD_INT 21
34245: PUSH
34246: LD_INT 23
34248: PUSH
34249: LD_INT 22
34251: PUSH
34252: LD_INT 24
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: ST_TO_ADDR
34270: GO 34331
34272: LD_INT 3
34274: DOUBLE
34275: EQUAL
34276: IFTRUE 34280
34278: GO 34330
34280: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34281: LD_ADDR_VAR 0 3
34285: PUSH
34286: LD_INT 13
34288: PUSH
34289: LD_INT 14
34291: PUSH
34292: LD_INT 2
34294: PUSH
34295: LD_INT 3
34297: PUSH
34298: LD_INT 4
34300: PUSH
34301: LD_INT 5
34303: PUSH
34304: LD_INT 21
34306: PUSH
34307: LD_INT 22
34309: PUSH
34310: LD_INT 23
34312: PUSH
34313: LD_INT 24
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: ST_TO_ADDR
34328: GO 34331
34330: POP
// result := ( chassis in result ) ;
34331: LD_ADDR_VAR 0 3
34335: PUSH
34336: LD_VAR 0 1
34340: PUSH
34341: LD_VAR 0 3
34345: IN
34346: ST_TO_ADDR
// end ;
34347: LD_VAR 0 3
34351: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34352: LD_INT 0
34354: PPUSH
// if not chassis or not weapon then
34355: LD_VAR 0 1
34359: NOT
34360: PUSH
34361: LD_VAR 0 2
34365: NOT
34366: OR
34367: IFFALSE 34371
// exit ;
34369: GO 35397
// case weapon of us_machine_gun :
34371: LD_VAR 0 2
34375: PUSH
34376: LD_INT 2
34378: DOUBLE
34379: EQUAL
34380: IFTRUE 34384
34382: GO 34414
34384: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34385: LD_ADDR_VAR 0 3
34389: PUSH
34390: LD_INT 1
34392: PUSH
34393: LD_INT 2
34395: PUSH
34396: LD_INT 3
34398: PUSH
34399: LD_INT 4
34401: PUSH
34402: LD_INT 5
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: ST_TO_ADDR
34412: GO 35381
34414: LD_INT 3
34416: DOUBLE
34417: EQUAL
34418: IFTRUE 34422
34420: GO 34452
34422: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34423: LD_ADDR_VAR 0 3
34427: PUSH
34428: LD_INT 1
34430: PUSH
34431: LD_INT 2
34433: PUSH
34434: LD_INT 3
34436: PUSH
34437: LD_INT 4
34439: PUSH
34440: LD_INT 5
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: ST_TO_ADDR
34450: GO 35381
34452: LD_INT 11
34454: DOUBLE
34455: EQUAL
34456: IFTRUE 34460
34458: GO 34490
34460: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34461: LD_ADDR_VAR 0 3
34465: PUSH
34466: LD_INT 1
34468: PUSH
34469: LD_INT 2
34471: PUSH
34472: LD_INT 3
34474: PUSH
34475: LD_INT 4
34477: PUSH
34478: LD_INT 5
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: ST_TO_ADDR
34488: GO 35381
34490: LD_INT 4
34492: DOUBLE
34493: EQUAL
34494: IFTRUE 34498
34496: GO 34524
34498: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34499: LD_ADDR_VAR 0 3
34503: PUSH
34504: LD_INT 2
34506: PUSH
34507: LD_INT 3
34509: PUSH
34510: LD_INT 4
34512: PUSH
34513: LD_INT 5
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: ST_TO_ADDR
34522: GO 35381
34524: LD_INT 5
34526: DOUBLE
34527: EQUAL
34528: IFTRUE 34532
34530: GO 34558
34532: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34533: LD_ADDR_VAR 0 3
34537: PUSH
34538: LD_INT 2
34540: PUSH
34541: LD_INT 3
34543: PUSH
34544: LD_INT 4
34546: PUSH
34547: LD_INT 5
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: ST_TO_ADDR
34556: GO 35381
34558: LD_INT 9
34560: DOUBLE
34561: EQUAL
34562: IFTRUE 34566
34564: GO 34592
34566: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34567: LD_ADDR_VAR 0 3
34571: PUSH
34572: LD_INT 2
34574: PUSH
34575: LD_INT 3
34577: PUSH
34578: LD_INT 4
34580: PUSH
34581: LD_INT 5
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: ST_TO_ADDR
34590: GO 35381
34592: LD_INT 7
34594: DOUBLE
34595: EQUAL
34596: IFTRUE 34600
34598: GO 34626
34600: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34601: LD_ADDR_VAR 0 3
34605: PUSH
34606: LD_INT 2
34608: PUSH
34609: LD_INT 3
34611: PUSH
34612: LD_INT 4
34614: PUSH
34615: LD_INT 5
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: ST_TO_ADDR
34624: GO 35381
34626: LD_INT 12
34628: DOUBLE
34629: EQUAL
34630: IFTRUE 34634
34632: GO 34660
34634: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34635: LD_ADDR_VAR 0 3
34639: PUSH
34640: LD_INT 2
34642: PUSH
34643: LD_INT 3
34645: PUSH
34646: LD_INT 4
34648: PUSH
34649: LD_INT 5
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: ST_TO_ADDR
34658: GO 35381
34660: LD_INT 13
34662: DOUBLE
34663: EQUAL
34664: IFTRUE 34668
34666: GO 34694
34668: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34669: LD_ADDR_VAR 0 3
34673: PUSH
34674: LD_INT 2
34676: PUSH
34677: LD_INT 3
34679: PUSH
34680: LD_INT 4
34682: PUSH
34683: LD_INT 5
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: ST_TO_ADDR
34692: GO 35381
34694: LD_INT 14
34696: DOUBLE
34697: EQUAL
34698: IFTRUE 34702
34700: GO 34720
34702: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34703: LD_ADDR_VAR 0 3
34707: PUSH
34708: LD_INT 4
34710: PUSH
34711: LD_INT 5
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: ST_TO_ADDR
34718: GO 35381
34720: LD_INT 6
34722: DOUBLE
34723: EQUAL
34724: IFTRUE 34728
34726: GO 34746
34728: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34729: LD_ADDR_VAR 0 3
34733: PUSH
34734: LD_INT 4
34736: PUSH
34737: LD_INT 5
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: ST_TO_ADDR
34744: GO 35381
34746: LD_INT 10
34748: DOUBLE
34749: EQUAL
34750: IFTRUE 34754
34752: GO 34772
34754: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34755: LD_ADDR_VAR 0 3
34759: PUSH
34760: LD_INT 4
34762: PUSH
34763: LD_INT 5
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: ST_TO_ADDR
34770: GO 35381
34772: LD_INT 22
34774: DOUBLE
34775: EQUAL
34776: IFTRUE 34780
34778: GO 34806
34780: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34781: LD_ADDR_VAR 0 3
34785: PUSH
34786: LD_INT 11
34788: PUSH
34789: LD_INT 12
34791: PUSH
34792: LD_INT 13
34794: PUSH
34795: LD_INT 14
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: ST_TO_ADDR
34804: GO 35381
34806: LD_INT 23
34808: DOUBLE
34809: EQUAL
34810: IFTRUE 34814
34812: GO 34840
34814: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34815: LD_ADDR_VAR 0 3
34819: PUSH
34820: LD_INT 11
34822: PUSH
34823: LD_INT 12
34825: PUSH
34826: LD_INT 13
34828: PUSH
34829: LD_INT 14
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: ST_TO_ADDR
34838: GO 35381
34840: LD_INT 24
34842: DOUBLE
34843: EQUAL
34844: IFTRUE 34848
34846: GO 34874
34848: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34849: LD_ADDR_VAR 0 3
34853: PUSH
34854: LD_INT 11
34856: PUSH
34857: LD_INT 12
34859: PUSH
34860: LD_INT 13
34862: PUSH
34863: LD_INT 14
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: ST_TO_ADDR
34872: GO 35381
34874: LD_INT 30
34876: DOUBLE
34877: EQUAL
34878: IFTRUE 34882
34880: GO 34908
34882: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34883: LD_ADDR_VAR 0 3
34887: PUSH
34888: LD_INT 11
34890: PUSH
34891: LD_INT 12
34893: PUSH
34894: LD_INT 13
34896: PUSH
34897: LD_INT 14
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: ST_TO_ADDR
34906: GO 35381
34908: LD_INT 25
34910: DOUBLE
34911: EQUAL
34912: IFTRUE 34916
34914: GO 34934
34916: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34917: LD_ADDR_VAR 0 3
34921: PUSH
34922: LD_INT 13
34924: PUSH
34925: LD_INT 14
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: ST_TO_ADDR
34932: GO 35381
34934: LD_INT 27
34936: DOUBLE
34937: EQUAL
34938: IFTRUE 34942
34940: GO 34960
34942: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34943: LD_ADDR_VAR 0 3
34947: PUSH
34948: LD_INT 13
34950: PUSH
34951: LD_INT 14
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: ST_TO_ADDR
34958: GO 35381
34960: LD_INT 28
34962: DOUBLE
34963: EQUAL
34964: IFTRUE 34968
34966: GO 34986
34968: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34969: LD_ADDR_VAR 0 3
34973: PUSH
34974: LD_INT 13
34976: PUSH
34977: LD_INT 14
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: ST_TO_ADDR
34984: GO 35381
34986: LD_INT 29
34988: DOUBLE
34989: EQUAL
34990: IFTRUE 34994
34992: GO 35012
34994: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34995: LD_ADDR_VAR 0 3
34999: PUSH
35000: LD_INT 13
35002: PUSH
35003: LD_INT 14
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: ST_TO_ADDR
35010: GO 35381
35012: LD_INT 31
35014: DOUBLE
35015: EQUAL
35016: IFTRUE 35020
35018: GO 35038
35020: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35021: LD_ADDR_VAR 0 3
35025: PUSH
35026: LD_INT 13
35028: PUSH
35029: LD_INT 14
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: ST_TO_ADDR
35036: GO 35381
35038: LD_INT 26
35040: DOUBLE
35041: EQUAL
35042: IFTRUE 35046
35044: GO 35064
35046: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35047: LD_ADDR_VAR 0 3
35051: PUSH
35052: LD_INT 13
35054: PUSH
35055: LD_INT 14
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: ST_TO_ADDR
35062: GO 35381
35064: LD_INT 42
35066: DOUBLE
35067: EQUAL
35068: IFTRUE 35072
35070: GO 35098
35072: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35073: LD_ADDR_VAR 0 3
35077: PUSH
35078: LD_INT 21
35080: PUSH
35081: LD_INT 22
35083: PUSH
35084: LD_INT 23
35086: PUSH
35087: LD_INT 24
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: ST_TO_ADDR
35096: GO 35381
35098: LD_INT 43
35100: DOUBLE
35101: EQUAL
35102: IFTRUE 35106
35104: GO 35132
35106: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35107: LD_ADDR_VAR 0 3
35111: PUSH
35112: LD_INT 21
35114: PUSH
35115: LD_INT 22
35117: PUSH
35118: LD_INT 23
35120: PUSH
35121: LD_INT 24
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: ST_TO_ADDR
35130: GO 35381
35132: LD_INT 44
35134: DOUBLE
35135: EQUAL
35136: IFTRUE 35140
35138: GO 35166
35140: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35141: LD_ADDR_VAR 0 3
35145: PUSH
35146: LD_INT 21
35148: PUSH
35149: LD_INT 22
35151: PUSH
35152: LD_INT 23
35154: PUSH
35155: LD_INT 24
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: ST_TO_ADDR
35164: GO 35381
35166: LD_INT 45
35168: DOUBLE
35169: EQUAL
35170: IFTRUE 35174
35172: GO 35200
35174: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35175: LD_ADDR_VAR 0 3
35179: PUSH
35180: LD_INT 21
35182: PUSH
35183: LD_INT 22
35185: PUSH
35186: LD_INT 23
35188: PUSH
35189: LD_INT 24
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: ST_TO_ADDR
35198: GO 35381
35200: LD_INT 49
35202: DOUBLE
35203: EQUAL
35204: IFTRUE 35208
35206: GO 35234
35208: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35209: LD_ADDR_VAR 0 3
35213: PUSH
35214: LD_INT 21
35216: PUSH
35217: LD_INT 22
35219: PUSH
35220: LD_INT 23
35222: PUSH
35223: LD_INT 24
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: ST_TO_ADDR
35232: GO 35381
35234: LD_INT 51
35236: DOUBLE
35237: EQUAL
35238: IFTRUE 35242
35240: GO 35268
35242: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35243: LD_ADDR_VAR 0 3
35247: PUSH
35248: LD_INT 21
35250: PUSH
35251: LD_INT 22
35253: PUSH
35254: LD_INT 23
35256: PUSH
35257: LD_INT 24
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: ST_TO_ADDR
35266: GO 35381
35268: LD_INT 52
35270: DOUBLE
35271: EQUAL
35272: IFTRUE 35276
35274: GO 35302
35276: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35277: LD_ADDR_VAR 0 3
35281: PUSH
35282: LD_INT 21
35284: PUSH
35285: LD_INT 22
35287: PUSH
35288: LD_INT 23
35290: PUSH
35291: LD_INT 24
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: ST_TO_ADDR
35300: GO 35381
35302: LD_INT 53
35304: DOUBLE
35305: EQUAL
35306: IFTRUE 35310
35308: GO 35328
35310: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35311: LD_ADDR_VAR 0 3
35315: PUSH
35316: LD_INT 23
35318: PUSH
35319: LD_INT 24
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: ST_TO_ADDR
35326: GO 35381
35328: LD_INT 46
35330: DOUBLE
35331: EQUAL
35332: IFTRUE 35336
35334: GO 35354
35336: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35337: LD_ADDR_VAR 0 3
35341: PUSH
35342: LD_INT 23
35344: PUSH
35345: LD_INT 24
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: ST_TO_ADDR
35352: GO 35381
35354: LD_INT 47
35356: DOUBLE
35357: EQUAL
35358: IFTRUE 35362
35360: GO 35380
35362: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35363: LD_ADDR_VAR 0 3
35367: PUSH
35368: LD_INT 23
35370: PUSH
35371: LD_INT 24
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: ST_TO_ADDR
35378: GO 35381
35380: POP
// result := ( chassis in result ) ;
35381: LD_ADDR_VAR 0 3
35385: PUSH
35386: LD_VAR 0 1
35390: PUSH
35391: LD_VAR 0 3
35395: IN
35396: ST_TO_ADDR
// end ;
35397: LD_VAR 0 3
35401: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35402: LD_INT 0
35404: PPUSH
35405: PPUSH
35406: PPUSH
35407: PPUSH
35408: PPUSH
35409: PPUSH
35410: PPUSH
// result := array ;
35411: LD_ADDR_VAR 0 5
35415: PUSH
35416: LD_VAR 0 1
35420: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35421: LD_VAR 0 1
35425: NOT
35426: PUSH
35427: LD_VAR 0 2
35431: NOT
35432: OR
35433: PUSH
35434: LD_VAR 0 3
35438: NOT
35439: OR
35440: PUSH
35441: LD_VAR 0 2
35445: PUSH
35446: LD_VAR 0 1
35450: GREATER
35451: OR
35452: PUSH
35453: LD_VAR 0 3
35457: PUSH
35458: LD_VAR 0 1
35462: GREATER
35463: OR
35464: IFFALSE 35468
// exit ;
35466: GO 35764
// if direction then
35468: LD_VAR 0 4
35472: IFFALSE 35536
// begin d := 1 ;
35474: LD_ADDR_VAR 0 9
35478: PUSH
35479: LD_INT 1
35481: ST_TO_ADDR
// if i_from > i_to then
35482: LD_VAR 0 2
35486: PUSH
35487: LD_VAR 0 3
35491: GREATER
35492: IFFALSE 35518
// length := ( array - i_from ) + i_to else
35494: LD_ADDR_VAR 0 11
35498: PUSH
35499: LD_VAR 0 1
35503: PUSH
35504: LD_VAR 0 2
35508: MINUS
35509: PUSH
35510: LD_VAR 0 3
35514: PLUS
35515: ST_TO_ADDR
35516: GO 35534
// length := i_to - i_from ;
35518: LD_ADDR_VAR 0 11
35522: PUSH
35523: LD_VAR 0 3
35527: PUSH
35528: LD_VAR 0 2
35532: MINUS
35533: ST_TO_ADDR
// end else
35534: GO 35597
// begin d := - 1 ;
35536: LD_ADDR_VAR 0 9
35540: PUSH
35541: LD_INT 1
35543: NEG
35544: ST_TO_ADDR
// if i_from > i_to then
35545: LD_VAR 0 2
35549: PUSH
35550: LD_VAR 0 3
35554: GREATER
35555: IFFALSE 35575
// length := i_from - i_to else
35557: LD_ADDR_VAR 0 11
35561: PUSH
35562: LD_VAR 0 2
35566: PUSH
35567: LD_VAR 0 3
35571: MINUS
35572: ST_TO_ADDR
35573: GO 35597
// length := ( array - i_to ) + i_from ;
35575: LD_ADDR_VAR 0 11
35579: PUSH
35580: LD_VAR 0 1
35584: PUSH
35585: LD_VAR 0 3
35589: MINUS
35590: PUSH
35591: LD_VAR 0 2
35595: PLUS
35596: ST_TO_ADDR
// end ; if not length then
35597: LD_VAR 0 11
35601: NOT
35602: IFFALSE 35606
// exit ;
35604: GO 35764
// tmp := array ;
35606: LD_ADDR_VAR 0 10
35610: PUSH
35611: LD_VAR 0 1
35615: ST_TO_ADDR
// for i = 1 to length do
35616: LD_ADDR_VAR 0 6
35620: PUSH
35621: DOUBLE
35622: LD_INT 1
35624: DEC
35625: ST_TO_ADDR
35626: LD_VAR 0 11
35630: PUSH
35631: FOR_TO
35632: IFFALSE 35752
// begin for j = 1 to array do
35634: LD_ADDR_VAR 0 7
35638: PUSH
35639: DOUBLE
35640: LD_INT 1
35642: DEC
35643: ST_TO_ADDR
35644: LD_VAR 0 1
35648: PUSH
35649: FOR_TO
35650: IFFALSE 35738
// begin k := j + d ;
35652: LD_ADDR_VAR 0 8
35656: PUSH
35657: LD_VAR 0 7
35661: PUSH
35662: LD_VAR 0 9
35666: PLUS
35667: ST_TO_ADDR
// if k > array then
35668: LD_VAR 0 8
35672: PUSH
35673: LD_VAR 0 1
35677: GREATER
35678: IFFALSE 35688
// k := 1 ;
35680: LD_ADDR_VAR 0 8
35684: PUSH
35685: LD_INT 1
35687: ST_TO_ADDR
// if not k then
35688: LD_VAR 0 8
35692: NOT
35693: IFFALSE 35705
// k := array ;
35695: LD_ADDR_VAR 0 8
35699: PUSH
35700: LD_VAR 0 1
35704: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35705: LD_ADDR_VAR 0 10
35709: PUSH
35710: LD_VAR 0 10
35714: PPUSH
35715: LD_VAR 0 8
35719: PPUSH
35720: LD_VAR 0 1
35724: PUSH
35725: LD_VAR 0 7
35729: ARRAY
35730: PPUSH
35731: CALL_OW 1
35735: ST_TO_ADDR
// end ;
35736: GO 35649
35738: POP
35739: POP
// array := tmp ;
35740: LD_ADDR_VAR 0 1
35744: PUSH
35745: LD_VAR 0 10
35749: ST_TO_ADDR
// end ;
35750: GO 35631
35752: POP
35753: POP
// result := array ;
35754: LD_ADDR_VAR 0 5
35758: PUSH
35759: LD_VAR 0 1
35763: ST_TO_ADDR
// end ;
35764: LD_VAR 0 5
35768: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35769: LD_INT 0
35771: PPUSH
35772: PPUSH
// result := 0 ;
35773: LD_ADDR_VAR 0 3
35777: PUSH
35778: LD_INT 0
35780: ST_TO_ADDR
// if not array or not value in array then
35781: LD_VAR 0 1
35785: NOT
35786: PUSH
35787: LD_VAR 0 2
35791: PUSH
35792: LD_VAR 0 1
35796: IN
35797: NOT
35798: OR
35799: IFFALSE 35803
// exit ;
35801: GO 35857
// for i = 1 to array do
35803: LD_ADDR_VAR 0 4
35807: PUSH
35808: DOUBLE
35809: LD_INT 1
35811: DEC
35812: ST_TO_ADDR
35813: LD_VAR 0 1
35817: PUSH
35818: FOR_TO
35819: IFFALSE 35855
// if value = array [ i ] then
35821: LD_VAR 0 2
35825: PUSH
35826: LD_VAR 0 1
35830: PUSH
35831: LD_VAR 0 4
35835: ARRAY
35836: EQUAL
35837: IFFALSE 35853
// begin result := i ;
35839: LD_ADDR_VAR 0 3
35843: PUSH
35844: LD_VAR 0 4
35848: ST_TO_ADDR
// exit ;
35849: POP
35850: POP
35851: GO 35857
// end ;
35853: GO 35818
35855: POP
35856: POP
// end ;
35857: LD_VAR 0 3
35861: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35862: LD_INT 0
35864: PPUSH
// vc_chassis := chassis ;
35865: LD_ADDR_OWVAR 37
35869: PUSH
35870: LD_VAR 0 1
35874: ST_TO_ADDR
// vc_engine := engine ;
35875: LD_ADDR_OWVAR 39
35879: PUSH
35880: LD_VAR 0 2
35884: ST_TO_ADDR
// vc_control := control ;
35885: LD_ADDR_OWVAR 38
35889: PUSH
35890: LD_VAR 0 3
35894: ST_TO_ADDR
// vc_weapon := weapon ;
35895: LD_ADDR_OWVAR 40
35899: PUSH
35900: LD_VAR 0 4
35904: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35905: LD_ADDR_OWVAR 41
35909: PUSH
35910: LD_VAR 0 5
35914: ST_TO_ADDR
// end ;
35915: LD_VAR 0 6
35919: RET
// export function WantPlant ( unit ) ; var task ; begin
35920: LD_INT 0
35922: PPUSH
35923: PPUSH
// result := false ;
35924: LD_ADDR_VAR 0 2
35928: PUSH
35929: LD_INT 0
35931: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35932: LD_ADDR_VAR 0 3
35936: PUSH
35937: LD_VAR 0 1
35941: PPUSH
35942: CALL_OW 437
35946: ST_TO_ADDR
// if task then
35947: LD_VAR 0 3
35951: IFFALSE 35979
// if task [ 1 ] [ 1 ] = p then
35953: LD_VAR 0 3
35957: PUSH
35958: LD_INT 1
35960: ARRAY
35961: PUSH
35962: LD_INT 1
35964: ARRAY
35965: PUSH
35966: LD_STRING p
35968: EQUAL
35969: IFFALSE 35979
// result := true ;
35971: LD_ADDR_VAR 0 2
35975: PUSH
35976: LD_INT 1
35978: ST_TO_ADDR
// end ;
35979: LD_VAR 0 2
35983: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35984: LD_INT 0
35986: PPUSH
35987: PPUSH
35988: PPUSH
35989: PPUSH
// if pos < 1 then
35990: LD_VAR 0 2
35994: PUSH
35995: LD_INT 1
35997: LESS
35998: IFFALSE 36002
// exit ;
36000: GO 36305
// if pos = 1 then
36002: LD_VAR 0 2
36006: PUSH
36007: LD_INT 1
36009: EQUAL
36010: IFFALSE 36043
// result := Replace ( arr , pos [ 1 ] , value ) else
36012: LD_ADDR_VAR 0 4
36016: PUSH
36017: LD_VAR 0 1
36021: PPUSH
36022: LD_VAR 0 2
36026: PUSH
36027: LD_INT 1
36029: ARRAY
36030: PPUSH
36031: LD_VAR 0 3
36035: PPUSH
36036: CALL_OW 1
36040: ST_TO_ADDR
36041: GO 36305
// begin tmp := arr ;
36043: LD_ADDR_VAR 0 6
36047: PUSH
36048: LD_VAR 0 1
36052: ST_TO_ADDR
// s_arr := [ tmp ] ;
36053: LD_ADDR_VAR 0 7
36057: PUSH
36058: LD_VAR 0 6
36062: PUSH
36063: EMPTY
36064: LIST
36065: ST_TO_ADDR
// for i = 1 to pos - 1 do
36066: LD_ADDR_VAR 0 5
36070: PUSH
36071: DOUBLE
36072: LD_INT 1
36074: DEC
36075: ST_TO_ADDR
36076: LD_VAR 0 2
36080: PUSH
36081: LD_INT 1
36083: MINUS
36084: PUSH
36085: FOR_TO
36086: IFFALSE 36131
// begin tmp := tmp [ pos [ i ] ] ;
36088: LD_ADDR_VAR 0 6
36092: PUSH
36093: LD_VAR 0 6
36097: PUSH
36098: LD_VAR 0 2
36102: PUSH
36103: LD_VAR 0 5
36107: ARRAY
36108: ARRAY
36109: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36110: LD_ADDR_VAR 0 7
36114: PUSH
36115: LD_VAR 0 7
36119: PUSH
36120: LD_VAR 0 6
36124: PUSH
36125: EMPTY
36126: LIST
36127: ADD
36128: ST_TO_ADDR
// end ;
36129: GO 36085
36131: POP
36132: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36133: LD_ADDR_VAR 0 6
36137: PUSH
36138: LD_VAR 0 6
36142: PPUSH
36143: LD_VAR 0 2
36147: PUSH
36148: LD_VAR 0 2
36152: ARRAY
36153: PPUSH
36154: LD_VAR 0 3
36158: PPUSH
36159: CALL_OW 1
36163: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36164: LD_ADDR_VAR 0 7
36168: PUSH
36169: LD_VAR 0 7
36173: PPUSH
36174: LD_VAR 0 7
36178: PPUSH
36179: LD_VAR 0 6
36183: PPUSH
36184: CALL_OW 1
36188: ST_TO_ADDR
// for i = s_arr downto 2 do
36189: LD_ADDR_VAR 0 5
36193: PUSH
36194: DOUBLE
36195: LD_VAR 0 7
36199: INC
36200: ST_TO_ADDR
36201: LD_INT 2
36203: PUSH
36204: FOR_DOWNTO
36205: IFFALSE 36289
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36207: LD_ADDR_VAR 0 6
36211: PUSH
36212: LD_VAR 0 7
36216: PUSH
36217: LD_VAR 0 5
36221: PUSH
36222: LD_INT 1
36224: MINUS
36225: ARRAY
36226: PPUSH
36227: LD_VAR 0 2
36231: PUSH
36232: LD_VAR 0 5
36236: PUSH
36237: LD_INT 1
36239: MINUS
36240: ARRAY
36241: PPUSH
36242: LD_VAR 0 7
36246: PUSH
36247: LD_VAR 0 5
36251: ARRAY
36252: PPUSH
36253: CALL_OW 1
36257: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36258: LD_ADDR_VAR 0 7
36262: PUSH
36263: LD_VAR 0 7
36267: PPUSH
36268: LD_VAR 0 5
36272: PUSH
36273: LD_INT 1
36275: MINUS
36276: PPUSH
36277: LD_VAR 0 6
36281: PPUSH
36282: CALL_OW 1
36286: ST_TO_ADDR
// end ;
36287: GO 36204
36289: POP
36290: POP
// result := s_arr [ 1 ] ;
36291: LD_ADDR_VAR 0 4
36295: PUSH
36296: LD_VAR 0 7
36300: PUSH
36301: LD_INT 1
36303: ARRAY
36304: ST_TO_ADDR
// end ; end ;
36305: LD_VAR 0 4
36309: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36310: LD_INT 0
36312: PPUSH
36313: PPUSH
// if not list then
36314: LD_VAR 0 1
36318: NOT
36319: IFFALSE 36323
// exit ;
36321: GO 36414
// i := list [ pos1 ] ;
36323: LD_ADDR_VAR 0 5
36327: PUSH
36328: LD_VAR 0 1
36332: PUSH
36333: LD_VAR 0 2
36337: ARRAY
36338: ST_TO_ADDR
// if not i then
36339: LD_VAR 0 5
36343: NOT
36344: IFFALSE 36348
// exit ;
36346: GO 36414
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36348: LD_ADDR_VAR 0 1
36352: PUSH
36353: LD_VAR 0 1
36357: PPUSH
36358: LD_VAR 0 2
36362: PPUSH
36363: LD_VAR 0 1
36367: PUSH
36368: LD_VAR 0 3
36372: ARRAY
36373: PPUSH
36374: CALL_OW 1
36378: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36379: LD_ADDR_VAR 0 1
36383: PUSH
36384: LD_VAR 0 1
36388: PPUSH
36389: LD_VAR 0 3
36393: PPUSH
36394: LD_VAR 0 5
36398: PPUSH
36399: CALL_OW 1
36403: ST_TO_ADDR
// result := list ;
36404: LD_ADDR_VAR 0 4
36408: PUSH
36409: LD_VAR 0 1
36413: ST_TO_ADDR
// end ;
36414: LD_VAR 0 4
36418: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36419: LD_INT 0
36421: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36422: LD_ADDR_VAR 0 5
36426: PUSH
36427: LD_VAR 0 1
36431: PPUSH
36432: CALL_OW 250
36436: PPUSH
36437: LD_VAR 0 1
36441: PPUSH
36442: CALL_OW 251
36446: PPUSH
36447: LD_VAR 0 2
36451: PPUSH
36452: LD_VAR 0 3
36456: PPUSH
36457: LD_VAR 0 4
36461: PPUSH
36462: CALL 36472 0 5
36466: ST_TO_ADDR
// end ;
36467: LD_VAR 0 5
36471: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36472: LD_INT 0
36474: PPUSH
36475: PPUSH
36476: PPUSH
36477: PPUSH
// if not list then
36478: LD_VAR 0 3
36482: NOT
36483: IFFALSE 36487
// exit ;
36485: GO 36875
// result := [ ] ;
36487: LD_ADDR_VAR 0 6
36491: PUSH
36492: EMPTY
36493: ST_TO_ADDR
// for i in list do
36494: LD_ADDR_VAR 0 7
36498: PUSH
36499: LD_VAR 0 3
36503: PUSH
36504: FOR_IN
36505: IFFALSE 36707
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36507: LD_ADDR_VAR 0 9
36511: PUSH
36512: LD_VAR 0 7
36516: PPUSH
36517: LD_VAR 0 1
36521: PPUSH
36522: LD_VAR 0 2
36526: PPUSH
36527: CALL_OW 297
36531: ST_TO_ADDR
// if not result then
36532: LD_VAR 0 6
36536: NOT
36537: IFFALSE 36563
// result := [ [ i , tmp ] ] else
36539: LD_ADDR_VAR 0 6
36543: PUSH
36544: LD_VAR 0 7
36548: PUSH
36549: LD_VAR 0 9
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: EMPTY
36559: LIST
36560: ST_TO_ADDR
36561: GO 36705
// begin if result [ result ] [ 2 ] < tmp then
36563: LD_VAR 0 6
36567: PUSH
36568: LD_VAR 0 6
36572: ARRAY
36573: PUSH
36574: LD_INT 2
36576: ARRAY
36577: PUSH
36578: LD_VAR 0 9
36582: LESS
36583: IFFALSE 36625
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36585: LD_ADDR_VAR 0 6
36589: PUSH
36590: LD_VAR 0 6
36594: PPUSH
36595: LD_VAR 0 6
36599: PUSH
36600: LD_INT 1
36602: PLUS
36603: PPUSH
36604: LD_VAR 0 7
36608: PUSH
36609: LD_VAR 0 9
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PPUSH
36618: CALL_OW 2
36622: ST_TO_ADDR
36623: GO 36705
// for j = 1 to result do
36625: LD_ADDR_VAR 0 8
36629: PUSH
36630: DOUBLE
36631: LD_INT 1
36633: DEC
36634: ST_TO_ADDR
36635: LD_VAR 0 6
36639: PUSH
36640: FOR_TO
36641: IFFALSE 36703
// begin if tmp < result [ j ] [ 2 ] then
36643: LD_VAR 0 9
36647: PUSH
36648: LD_VAR 0 6
36652: PUSH
36653: LD_VAR 0 8
36657: ARRAY
36658: PUSH
36659: LD_INT 2
36661: ARRAY
36662: LESS
36663: IFFALSE 36701
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36665: LD_ADDR_VAR 0 6
36669: PUSH
36670: LD_VAR 0 6
36674: PPUSH
36675: LD_VAR 0 8
36679: PPUSH
36680: LD_VAR 0 7
36684: PUSH
36685: LD_VAR 0 9
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PPUSH
36694: CALL_OW 2
36698: ST_TO_ADDR
// break ;
36699: GO 36703
// end ; end ;
36701: GO 36640
36703: POP
36704: POP
// end ; end ;
36705: GO 36504
36707: POP
36708: POP
// if result and not asc then
36709: LD_VAR 0 6
36713: PUSH
36714: LD_VAR 0 4
36718: NOT
36719: AND
36720: IFFALSE 36795
// begin tmp := result ;
36722: LD_ADDR_VAR 0 9
36726: PUSH
36727: LD_VAR 0 6
36731: ST_TO_ADDR
// for i = tmp downto 1 do
36732: LD_ADDR_VAR 0 7
36736: PUSH
36737: DOUBLE
36738: LD_VAR 0 9
36742: INC
36743: ST_TO_ADDR
36744: LD_INT 1
36746: PUSH
36747: FOR_DOWNTO
36748: IFFALSE 36793
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36750: LD_ADDR_VAR 0 6
36754: PUSH
36755: LD_VAR 0 6
36759: PPUSH
36760: LD_VAR 0 9
36764: PUSH
36765: LD_VAR 0 7
36769: MINUS
36770: PUSH
36771: LD_INT 1
36773: PLUS
36774: PPUSH
36775: LD_VAR 0 9
36779: PUSH
36780: LD_VAR 0 7
36784: ARRAY
36785: PPUSH
36786: CALL_OW 1
36790: ST_TO_ADDR
36791: GO 36747
36793: POP
36794: POP
// end ; tmp := [ ] ;
36795: LD_ADDR_VAR 0 9
36799: PUSH
36800: EMPTY
36801: ST_TO_ADDR
// if mode then
36802: LD_VAR 0 5
36806: IFFALSE 36875
// begin for i = 1 to result do
36808: LD_ADDR_VAR 0 7
36812: PUSH
36813: DOUBLE
36814: LD_INT 1
36816: DEC
36817: ST_TO_ADDR
36818: LD_VAR 0 6
36822: PUSH
36823: FOR_TO
36824: IFFALSE 36863
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36826: LD_ADDR_VAR 0 9
36830: PUSH
36831: LD_VAR 0 9
36835: PPUSH
36836: LD_VAR 0 7
36840: PPUSH
36841: LD_VAR 0 6
36845: PUSH
36846: LD_VAR 0 7
36850: ARRAY
36851: PUSH
36852: LD_INT 1
36854: ARRAY
36855: PPUSH
36856: CALL_OW 1
36860: ST_TO_ADDR
36861: GO 36823
36863: POP
36864: POP
// result := tmp ;
36865: LD_ADDR_VAR 0 6
36869: PUSH
36870: LD_VAR 0 9
36874: ST_TO_ADDR
// end ; end ;
36875: LD_VAR 0 6
36879: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36880: LD_INT 0
36882: PPUSH
36883: PPUSH
36884: PPUSH
36885: PPUSH
36886: PPUSH
36887: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36888: LD_ADDR_VAR 0 5
36892: PUSH
36893: LD_INT 0
36895: PUSH
36896: LD_INT 0
36898: PUSH
36899: LD_INT 0
36901: PUSH
36902: EMPTY
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: ST_TO_ADDR
// if not x or not y then
36910: LD_VAR 0 2
36914: NOT
36915: PUSH
36916: LD_VAR 0 3
36920: NOT
36921: OR
36922: IFFALSE 36926
// exit ;
36924: GO 38572
// if not range then
36926: LD_VAR 0 4
36930: NOT
36931: IFFALSE 36941
// range := 10 ;
36933: LD_ADDR_VAR 0 4
36937: PUSH
36938: LD_INT 10
36940: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36941: LD_ADDR_VAR 0 8
36945: PUSH
36946: LD_INT 81
36948: PUSH
36949: LD_VAR 0 1
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 92
36960: PUSH
36961: LD_VAR 0 2
36965: PUSH
36966: LD_VAR 0 3
36970: PUSH
36971: LD_VAR 0 4
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 3
36984: PUSH
36985: LD_INT 21
36987: PUSH
36988: LD_INT 3
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: LIST
37003: PPUSH
37004: CALL_OW 69
37008: ST_TO_ADDR
// if not tmp then
37009: LD_VAR 0 8
37013: NOT
37014: IFFALSE 37018
// exit ;
37016: GO 38572
// for i in tmp do
37018: LD_ADDR_VAR 0 6
37022: PUSH
37023: LD_VAR 0 8
37027: PUSH
37028: FOR_IN
37029: IFFALSE 38547
// begin points := [ 0 , 0 , 0 ] ;
37031: LD_ADDR_VAR 0 9
37035: PUSH
37036: LD_INT 0
37038: PUSH
37039: LD_INT 0
37041: PUSH
37042: LD_INT 0
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: LIST
37049: ST_TO_ADDR
// bpoints := 1 ;
37050: LD_ADDR_VAR 0 10
37054: PUSH
37055: LD_INT 1
37057: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37058: LD_VAR 0 6
37062: PPUSH
37063: CALL_OW 247
37067: PUSH
37068: LD_INT 1
37070: DOUBLE
37071: EQUAL
37072: IFTRUE 37076
37074: GO 37654
37076: POP
// begin if GetClass ( i ) = 1 then
37077: LD_VAR 0 6
37081: PPUSH
37082: CALL_OW 257
37086: PUSH
37087: LD_INT 1
37089: EQUAL
37090: IFFALSE 37111
// points := [ 10 , 5 , 3 ] ;
37092: LD_ADDR_VAR 0 9
37096: PUSH
37097: LD_INT 10
37099: PUSH
37100: LD_INT 5
37102: PUSH
37103: LD_INT 3
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: LIST
37110: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37111: LD_VAR 0 6
37115: PPUSH
37116: CALL_OW 257
37120: PUSH
37121: LD_INT 2
37123: PUSH
37124: LD_INT 3
37126: PUSH
37127: LD_INT 4
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: LIST
37134: IN
37135: IFFALSE 37156
// points := [ 3 , 2 , 1 ] ;
37137: LD_ADDR_VAR 0 9
37141: PUSH
37142: LD_INT 3
37144: PUSH
37145: LD_INT 2
37147: PUSH
37148: LD_INT 1
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: LIST
37155: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37156: LD_VAR 0 6
37160: PPUSH
37161: CALL_OW 257
37165: PUSH
37166: LD_INT 5
37168: EQUAL
37169: IFFALSE 37190
// points := [ 130 , 5 , 2 ] ;
37171: LD_ADDR_VAR 0 9
37175: PUSH
37176: LD_INT 130
37178: PUSH
37179: LD_INT 5
37181: PUSH
37182: LD_INT 2
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: LIST
37189: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37190: LD_VAR 0 6
37194: PPUSH
37195: CALL_OW 257
37199: PUSH
37200: LD_INT 8
37202: EQUAL
37203: IFFALSE 37224
// points := [ 35 , 35 , 30 ] ;
37205: LD_ADDR_VAR 0 9
37209: PUSH
37210: LD_INT 35
37212: PUSH
37213: LD_INT 35
37215: PUSH
37216: LD_INT 30
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: LIST
37223: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37224: LD_VAR 0 6
37228: PPUSH
37229: CALL_OW 257
37233: PUSH
37234: LD_INT 9
37236: EQUAL
37237: IFFALSE 37258
// points := [ 20 , 55 , 40 ] ;
37239: LD_ADDR_VAR 0 9
37243: PUSH
37244: LD_INT 20
37246: PUSH
37247: LD_INT 55
37249: PUSH
37250: LD_INT 40
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: LIST
37257: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37258: LD_VAR 0 6
37262: PPUSH
37263: CALL_OW 257
37267: PUSH
37268: LD_INT 12
37270: PUSH
37271: LD_INT 16
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: IN
37278: IFFALSE 37299
// points := [ 5 , 3 , 2 ] ;
37280: LD_ADDR_VAR 0 9
37284: PUSH
37285: LD_INT 5
37287: PUSH
37288: LD_INT 3
37290: PUSH
37291: LD_INT 2
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: LIST
37298: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37299: LD_VAR 0 6
37303: PPUSH
37304: CALL_OW 257
37308: PUSH
37309: LD_INT 17
37311: EQUAL
37312: IFFALSE 37333
// points := [ 100 , 50 , 75 ] ;
37314: LD_ADDR_VAR 0 9
37318: PUSH
37319: LD_INT 100
37321: PUSH
37322: LD_INT 50
37324: PUSH
37325: LD_INT 75
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: LIST
37332: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37333: LD_VAR 0 6
37337: PPUSH
37338: CALL_OW 257
37342: PUSH
37343: LD_INT 15
37345: EQUAL
37346: IFFALSE 37367
// points := [ 10 , 5 , 3 ] ;
37348: LD_ADDR_VAR 0 9
37352: PUSH
37353: LD_INT 10
37355: PUSH
37356: LD_INT 5
37358: PUSH
37359: LD_INT 3
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: LIST
37366: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37367: LD_VAR 0 6
37371: PPUSH
37372: CALL_OW 257
37376: PUSH
37377: LD_INT 14
37379: EQUAL
37380: IFFALSE 37401
// points := [ 10 , 0 , 0 ] ;
37382: LD_ADDR_VAR 0 9
37386: PUSH
37387: LD_INT 10
37389: PUSH
37390: LD_INT 0
37392: PUSH
37393: LD_INT 0
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: LIST
37400: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37401: LD_VAR 0 6
37405: PPUSH
37406: CALL_OW 257
37410: PUSH
37411: LD_INT 11
37413: EQUAL
37414: IFFALSE 37435
// points := [ 30 , 10 , 5 ] ;
37416: LD_ADDR_VAR 0 9
37420: PUSH
37421: LD_INT 30
37423: PUSH
37424: LD_INT 10
37426: PUSH
37427: LD_INT 5
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: LIST
37434: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37435: LD_VAR 0 1
37439: PPUSH
37440: LD_INT 5
37442: PPUSH
37443: CALL_OW 321
37447: PUSH
37448: LD_INT 2
37450: EQUAL
37451: IFFALSE 37468
// bpoints := bpoints * 1.8 ;
37453: LD_ADDR_VAR 0 10
37457: PUSH
37458: LD_VAR 0 10
37462: PUSH
37463: LD_REAL  1.80000000000000E+0000
37466: MUL
37467: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37468: LD_VAR 0 6
37472: PPUSH
37473: CALL_OW 257
37477: PUSH
37478: LD_INT 1
37480: PUSH
37481: LD_INT 2
37483: PUSH
37484: LD_INT 3
37486: PUSH
37487: LD_INT 4
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: IN
37496: PUSH
37497: LD_VAR 0 1
37501: PPUSH
37502: LD_INT 51
37504: PPUSH
37505: CALL_OW 321
37509: PUSH
37510: LD_INT 2
37512: EQUAL
37513: AND
37514: IFFALSE 37531
// bpoints := bpoints * 1.2 ;
37516: LD_ADDR_VAR 0 10
37520: PUSH
37521: LD_VAR 0 10
37525: PUSH
37526: LD_REAL  1.20000000000000E+0000
37529: MUL
37530: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37531: LD_VAR 0 6
37535: PPUSH
37536: CALL_OW 257
37540: PUSH
37541: LD_INT 5
37543: PUSH
37544: LD_INT 7
37546: PUSH
37547: LD_INT 9
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: LIST
37554: IN
37555: PUSH
37556: LD_VAR 0 1
37560: PPUSH
37561: LD_INT 52
37563: PPUSH
37564: CALL_OW 321
37568: PUSH
37569: LD_INT 2
37571: EQUAL
37572: AND
37573: IFFALSE 37590
// bpoints := bpoints * 1.5 ;
37575: LD_ADDR_VAR 0 10
37579: PUSH
37580: LD_VAR 0 10
37584: PUSH
37585: LD_REAL  1.50000000000000E+0000
37588: MUL
37589: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37590: LD_VAR 0 1
37594: PPUSH
37595: LD_INT 66
37597: PPUSH
37598: CALL_OW 321
37602: PUSH
37603: LD_INT 2
37605: EQUAL
37606: IFFALSE 37623
// bpoints := bpoints * 1.1 ;
37608: LD_ADDR_VAR 0 10
37612: PUSH
37613: LD_VAR 0 10
37617: PUSH
37618: LD_REAL  1.10000000000000E+0000
37621: MUL
37622: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37623: LD_ADDR_VAR 0 10
37627: PUSH
37628: LD_VAR 0 10
37632: PUSH
37633: LD_VAR 0 6
37637: PPUSH
37638: LD_INT 1
37640: PPUSH
37641: CALL_OW 259
37645: PUSH
37646: LD_REAL  1.15000000000000E+0000
37649: MUL
37650: MUL
37651: ST_TO_ADDR
// end ; unit_vehicle :
37652: GO 38476
37654: LD_INT 2
37656: DOUBLE
37657: EQUAL
37658: IFTRUE 37662
37660: GO 38464
37662: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37663: LD_VAR 0 6
37667: PPUSH
37668: CALL_OW 264
37672: PUSH
37673: LD_INT 2
37675: PUSH
37676: LD_INT 42
37678: PUSH
37679: LD_INT 24
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: LIST
37686: IN
37687: IFFALSE 37708
// points := [ 25 , 5 , 3 ] ;
37689: LD_ADDR_VAR 0 9
37693: PUSH
37694: LD_INT 25
37696: PUSH
37697: LD_INT 5
37699: PUSH
37700: LD_INT 3
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: LIST
37707: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37708: LD_VAR 0 6
37712: PPUSH
37713: CALL_OW 264
37717: PUSH
37718: LD_INT 4
37720: PUSH
37721: LD_INT 43
37723: PUSH
37724: LD_INT 25
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: LIST
37731: IN
37732: IFFALSE 37753
// points := [ 40 , 15 , 5 ] ;
37734: LD_ADDR_VAR 0 9
37738: PUSH
37739: LD_INT 40
37741: PUSH
37742: LD_INT 15
37744: PUSH
37745: LD_INT 5
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: LIST
37752: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37753: LD_VAR 0 6
37757: PPUSH
37758: CALL_OW 264
37762: PUSH
37763: LD_INT 3
37765: PUSH
37766: LD_INT 23
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: IN
37773: IFFALSE 37794
// points := [ 7 , 25 , 8 ] ;
37775: LD_ADDR_VAR 0 9
37779: PUSH
37780: LD_INT 7
37782: PUSH
37783: LD_INT 25
37785: PUSH
37786: LD_INT 8
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: LIST
37793: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37794: LD_VAR 0 6
37798: PPUSH
37799: CALL_OW 264
37803: PUSH
37804: LD_INT 5
37806: PUSH
37807: LD_INT 27
37809: PUSH
37810: LD_INT 44
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: LIST
37817: IN
37818: IFFALSE 37839
// points := [ 14 , 50 , 16 ] ;
37820: LD_ADDR_VAR 0 9
37824: PUSH
37825: LD_INT 14
37827: PUSH
37828: LD_INT 50
37830: PUSH
37831: LD_INT 16
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: LIST
37838: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37839: LD_VAR 0 6
37843: PPUSH
37844: CALL_OW 264
37848: PUSH
37849: LD_INT 6
37851: PUSH
37852: LD_INT 46
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: IN
37859: IFFALSE 37880
// points := [ 32 , 120 , 70 ] ;
37861: LD_ADDR_VAR 0 9
37865: PUSH
37866: LD_INT 32
37868: PUSH
37869: LD_INT 120
37871: PUSH
37872: LD_INT 70
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: LIST
37879: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
37880: LD_VAR 0 6
37884: PPUSH
37885: CALL_OW 264
37889: PUSH
37890: LD_INT 7
37892: PUSH
37893: LD_INT 28
37895: PUSH
37896: LD_INT 45
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: LIST
37903: IN
37904: IFFALSE 37925
// points := [ 35 , 20 , 45 ] ;
37906: LD_ADDR_VAR 0 9
37910: PUSH
37911: LD_INT 35
37913: PUSH
37914: LD_INT 20
37916: PUSH
37917: LD_INT 45
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: LIST
37924: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37925: LD_VAR 0 6
37929: PPUSH
37930: CALL_OW 264
37934: PUSH
37935: LD_INT 47
37937: PUSH
37938: EMPTY
37939: LIST
37940: IN
37941: IFFALSE 37962
// points := [ 67 , 45 , 75 ] ;
37943: LD_ADDR_VAR 0 9
37947: PUSH
37948: LD_INT 67
37950: PUSH
37951: LD_INT 45
37953: PUSH
37954: LD_INT 75
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: LIST
37961: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37962: LD_VAR 0 6
37966: PPUSH
37967: CALL_OW 264
37971: PUSH
37972: LD_INT 26
37974: PUSH
37975: EMPTY
37976: LIST
37977: IN
37978: IFFALSE 37999
// points := [ 120 , 30 , 80 ] ;
37980: LD_ADDR_VAR 0 9
37984: PUSH
37985: LD_INT 120
37987: PUSH
37988: LD_INT 30
37990: PUSH
37991: LD_INT 80
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: LIST
37998: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37999: LD_VAR 0 6
38003: PPUSH
38004: CALL_OW 264
38008: PUSH
38009: LD_INT 22
38011: PUSH
38012: EMPTY
38013: LIST
38014: IN
38015: IFFALSE 38036
// points := [ 40 , 1 , 1 ] ;
38017: LD_ADDR_VAR 0 9
38021: PUSH
38022: LD_INT 40
38024: PUSH
38025: LD_INT 1
38027: PUSH
38028: LD_INT 1
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: LIST
38035: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38036: LD_VAR 0 6
38040: PPUSH
38041: CALL_OW 264
38045: PUSH
38046: LD_INT 29
38048: PUSH
38049: EMPTY
38050: LIST
38051: IN
38052: IFFALSE 38073
// points := [ 70 , 200 , 400 ] ;
38054: LD_ADDR_VAR 0 9
38058: PUSH
38059: LD_INT 70
38061: PUSH
38062: LD_INT 200
38064: PUSH
38065: LD_INT 400
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: LIST
38072: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38073: LD_VAR 0 6
38077: PPUSH
38078: CALL_OW 264
38082: PUSH
38083: LD_INT 14
38085: PUSH
38086: LD_INT 53
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: IN
38093: IFFALSE 38114
// points := [ 40 , 10 , 20 ] ;
38095: LD_ADDR_VAR 0 9
38099: PUSH
38100: LD_INT 40
38102: PUSH
38103: LD_INT 10
38105: PUSH
38106: LD_INT 20
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: LIST
38113: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38114: LD_VAR 0 6
38118: PPUSH
38119: CALL_OW 264
38123: PUSH
38124: LD_INT 9
38126: PUSH
38127: EMPTY
38128: LIST
38129: IN
38130: IFFALSE 38151
// points := [ 5 , 70 , 20 ] ;
38132: LD_ADDR_VAR 0 9
38136: PUSH
38137: LD_INT 5
38139: PUSH
38140: LD_INT 70
38142: PUSH
38143: LD_INT 20
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: LIST
38150: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38151: LD_VAR 0 6
38155: PPUSH
38156: CALL_OW 264
38160: PUSH
38161: LD_INT 10
38163: PUSH
38164: EMPTY
38165: LIST
38166: IN
38167: IFFALSE 38188
// points := [ 35 , 110 , 70 ] ;
38169: LD_ADDR_VAR 0 9
38173: PUSH
38174: LD_INT 35
38176: PUSH
38177: LD_INT 110
38179: PUSH
38180: LD_INT 70
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: LIST
38187: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38188: LD_VAR 0 6
38192: PPUSH
38193: CALL_OW 265
38197: PUSH
38198: LD_INT 25
38200: EQUAL
38201: IFFALSE 38222
// points := [ 80 , 65 , 100 ] ;
38203: LD_ADDR_VAR 0 9
38207: PUSH
38208: LD_INT 80
38210: PUSH
38211: LD_INT 65
38213: PUSH
38214: LD_INT 100
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: LIST
38221: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38222: LD_VAR 0 6
38226: PPUSH
38227: CALL_OW 263
38231: PUSH
38232: LD_INT 1
38234: EQUAL
38235: IFFALSE 38270
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38237: LD_ADDR_VAR 0 10
38241: PUSH
38242: LD_VAR 0 10
38246: PUSH
38247: LD_VAR 0 6
38251: PPUSH
38252: CALL_OW 311
38256: PPUSH
38257: LD_INT 3
38259: PPUSH
38260: CALL_OW 259
38264: PUSH
38265: LD_INT 4
38267: MUL
38268: MUL
38269: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38270: LD_VAR 0 6
38274: PPUSH
38275: CALL_OW 263
38279: PUSH
38280: LD_INT 2
38282: EQUAL
38283: IFFALSE 38334
// begin j := IsControledBy ( i ) ;
38285: LD_ADDR_VAR 0 7
38289: PUSH
38290: LD_VAR 0 6
38294: PPUSH
38295: CALL_OW 312
38299: ST_TO_ADDR
// if j then
38300: LD_VAR 0 7
38304: IFFALSE 38334
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38306: LD_ADDR_VAR 0 10
38310: PUSH
38311: LD_VAR 0 10
38315: PUSH
38316: LD_VAR 0 7
38320: PPUSH
38321: LD_INT 3
38323: PPUSH
38324: CALL_OW 259
38328: PUSH
38329: LD_INT 3
38331: MUL
38332: MUL
38333: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38334: LD_VAR 0 6
38338: PPUSH
38339: CALL_OW 264
38343: PUSH
38344: LD_INT 5
38346: PUSH
38347: LD_INT 6
38349: PUSH
38350: LD_INT 46
38352: PUSH
38353: LD_INT 44
38355: PUSH
38356: LD_INT 47
38358: PUSH
38359: LD_INT 45
38361: PUSH
38362: LD_INT 28
38364: PUSH
38365: LD_INT 7
38367: PUSH
38368: LD_INT 27
38370: PUSH
38371: LD_INT 29
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: IN
38386: PUSH
38387: LD_VAR 0 1
38391: PPUSH
38392: LD_INT 52
38394: PPUSH
38395: CALL_OW 321
38399: PUSH
38400: LD_INT 2
38402: EQUAL
38403: AND
38404: IFFALSE 38421
// bpoints := bpoints * 1.2 ;
38406: LD_ADDR_VAR 0 10
38410: PUSH
38411: LD_VAR 0 10
38415: PUSH
38416: LD_REAL  1.20000000000000E+0000
38419: MUL
38420: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38421: LD_VAR 0 6
38425: PPUSH
38426: CALL_OW 264
38430: PUSH
38431: LD_INT 6
38433: PUSH
38434: LD_INT 46
38436: PUSH
38437: LD_INT 47
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: LIST
38444: IN
38445: IFFALSE 38462
// bpoints := bpoints * 1.2 ;
38447: LD_ADDR_VAR 0 10
38451: PUSH
38452: LD_VAR 0 10
38456: PUSH
38457: LD_REAL  1.20000000000000E+0000
38460: MUL
38461: ST_TO_ADDR
// end ; unit_building :
38462: GO 38476
38464: LD_INT 3
38466: DOUBLE
38467: EQUAL
38468: IFTRUE 38472
38470: GO 38475
38472: POP
// ; end ;
38473: GO 38476
38475: POP
// for j = 1 to 3 do
38476: LD_ADDR_VAR 0 7
38480: PUSH
38481: DOUBLE
38482: LD_INT 1
38484: DEC
38485: ST_TO_ADDR
38486: LD_INT 3
38488: PUSH
38489: FOR_TO
38490: IFFALSE 38543
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38492: LD_ADDR_VAR 0 5
38496: PUSH
38497: LD_VAR 0 5
38501: PPUSH
38502: LD_VAR 0 7
38506: PPUSH
38507: LD_VAR 0 5
38511: PUSH
38512: LD_VAR 0 7
38516: ARRAY
38517: PUSH
38518: LD_VAR 0 9
38522: PUSH
38523: LD_VAR 0 7
38527: ARRAY
38528: PUSH
38529: LD_VAR 0 10
38533: MUL
38534: PLUS
38535: PPUSH
38536: CALL_OW 1
38540: ST_TO_ADDR
38541: GO 38489
38543: POP
38544: POP
// end ;
38545: GO 37028
38547: POP
38548: POP
// result := Replace ( result , 4 , tmp ) ;
38549: LD_ADDR_VAR 0 5
38553: PUSH
38554: LD_VAR 0 5
38558: PPUSH
38559: LD_INT 4
38561: PPUSH
38562: LD_VAR 0 8
38566: PPUSH
38567: CALL_OW 1
38571: ST_TO_ADDR
// end ;
38572: LD_VAR 0 5
38576: RET
// export function DangerAtRange ( unit , range ) ; begin
38577: LD_INT 0
38579: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38580: LD_ADDR_VAR 0 3
38584: PUSH
38585: LD_VAR 0 1
38589: PPUSH
38590: CALL_OW 255
38594: PPUSH
38595: LD_VAR 0 1
38599: PPUSH
38600: CALL_OW 250
38604: PPUSH
38605: LD_VAR 0 1
38609: PPUSH
38610: CALL_OW 251
38614: PPUSH
38615: LD_VAR 0 2
38619: PPUSH
38620: CALL 36880 0 4
38624: ST_TO_ADDR
// end ;
38625: LD_VAR 0 3
38629: RET
// export function DangerInArea ( side , area ) ; begin
38630: LD_INT 0
38632: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38633: LD_ADDR_VAR 0 3
38637: PUSH
38638: LD_VAR 0 2
38642: PPUSH
38643: LD_INT 81
38645: PUSH
38646: LD_VAR 0 1
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PPUSH
38655: CALL_OW 70
38659: ST_TO_ADDR
// end ;
38660: LD_VAR 0 3
38664: RET
// export function IsExtension ( b ) ; begin
38665: LD_INT 0
38667: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38668: LD_ADDR_VAR 0 2
38672: PUSH
38673: LD_VAR 0 1
38677: PUSH
38678: LD_INT 23
38680: PUSH
38681: LD_INT 20
38683: PUSH
38684: LD_INT 22
38686: PUSH
38687: LD_INT 17
38689: PUSH
38690: LD_INT 24
38692: PUSH
38693: LD_INT 21
38695: PUSH
38696: LD_INT 19
38698: PUSH
38699: LD_INT 16
38701: PUSH
38702: LD_INT 25
38704: PUSH
38705: LD_INT 18
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: IN
38720: ST_TO_ADDR
// end ;
38721: LD_VAR 0 2
38725: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
38726: LD_INT 0
38728: PPUSH
38729: PPUSH
38730: PPUSH
// result := [ ] ;
38731: LD_ADDR_VAR 0 3
38735: PUSH
38736: EMPTY
38737: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38738: LD_ADDR_VAR 0 4
38742: PUSH
38743: LD_VAR 0 2
38747: PPUSH
38748: LD_INT 21
38750: PUSH
38751: LD_INT 3
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PPUSH
38758: CALL_OW 70
38762: ST_TO_ADDR
// if not tmp then
38763: LD_VAR 0 4
38767: NOT
38768: IFFALSE 38772
// exit ;
38770: GO 38830
// for i in tmp do
38772: LD_ADDR_VAR 0 5
38776: PUSH
38777: LD_VAR 0 4
38781: PUSH
38782: FOR_IN
38783: IFFALSE 38818
// if GetBase ( i ) <> base then
38785: LD_VAR 0 5
38789: PPUSH
38790: CALL_OW 274
38794: PUSH
38795: LD_VAR 0 1
38799: NONEQUAL
38800: IFFALSE 38816
// ComLinkToBase ( base , i ) ;
38802: LD_VAR 0 1
38806: PPUSH
38807: LD_VAR 0 5
38811: PPUSH
38812: CALL_OW 169
38816: GO 38782
38818: POP
38819: POP
// result := tmp ;
38820: LD_ADDR_VAR 0 3
38824: PUSH
38825: LD_VAR 0 4
38829: ST_TO_ADDR
// end ;
38830: LD_VAR 0 3
38834: RET
// export function ComComplete ( unit , b ) ; var i ; begin
38835: LD_INT 0
38837: PPUSH
38838: PPUSH
// if BuildingStatus ( b ) = bs_build then
38839: LD_VAR 0 2
38843: PPUSH
38844: CALL_OW 461
38848: PUSH
38849: LD_INT 1
38851: EQUAL
38852: IFFALSE 38912
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38854: LD_VAR 0 1
38858: PPUSH
38859: LD_STRING h
38861: PUSH
38862: LD_VAR 0 2
38866: PPUSH
38867: CALL_OW 250
38871: PUSH
38872: LD_VAR 0 2
38876: PPUSH
38877: CALL_OW 251
38881: PUSH
38882: LD_VAR 0 2
38886: PUSH
38887: LD_INT 0
38889: PUSH
38890: LD_INT 0
38892: PUSH
38893: LD_INT 0
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: PUSH
38905: EMPTY
38906: LIST
38907: PPUSH
38908: CALL_OW 446
// end ;
38912: LD_VAR 0 3
38916: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38917: LD_INT 0
38919: PPUSH
38920: PPUSH
38921: PPUSH
38922: PPUSH
38923: PPUSH
38924: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
38925: LD_VAR 0 1
38929: NOT
38930: PUSH
38931: LD_VAR 0 1
38935: PPUSH
38936: CALL_OW 263
38940: PUSH
38941: LD_INT 2
38943: EQUAL
38944: NOT
38945: OR
38946: IFFALSE 38950
// exit ;
38948: GO 39266
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38950: LD_ADDR_VAR 0 6
38954: PUSH
38955: LD_INT 22
38957: PUSH
38958: LD_VAR 0 1
38962: PPUSH
38963: CALL_OW 255
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 2
38974: PUSH
38975: LD_INT 30
38977: PUSH
38978: LD_INT 36
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 34
38987: PUSH
38988: LD_INT 31
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: LIST
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PPUSH
39004: CALL_OW 69
39008: ST_TO_ADDR
// if not tmp then
39009: LD_VAR 0 6
39013: NOT
39014: IFFALSE 39018
// exit ;
39016: GO 39266
// result := [ ] ;
39018: LD_ADDR_VAR 0 2
39022: PUSH
39023: EMPTY
39024: ST_TO_ADDR
// for i in tmp do
39025: LD_ADDR_VAR 0 3
39029: PUSH
39030: LD_VAR 0 6
39034: PUSH
39035: FOR_IN
39036: IFFALSE 39107
// begin t := UnitsInside ( i ) ;
39038: LD_ADDR_VAR 0 4
39042: PUSH
39043: LD_VAR 0 3
39047: PPUSH
39048: CALL_OW 313
39052: ST_TO_ADDR
// if t then
39053: LD_VAR 0 4
39057: IFFALSE 39105
// for j in t do
39059: LD_ADDR_VAR 0 7
39063: PUSH
39064: LD_VAR 0 4
39068: PUSH
39069: FOR_IN
39070: IFFALSE 39103
// result := Insert ( result , result + 1 , j ) ;
39072: LD_ADDR_VAR 0 2
39076: PUSH
39077: LD_VAR 0 2
39081: PPUSH
39082: LD_VAR 0 2
39086: PUSH
39087: LD_INT 1
39089: PLUS
39090: PPUSH
39091: LD_VAR 0 7
39095: PPUSH
39096: CALL_OW 2
39100: ST_TO_ADDR
39101: GO 39069
39103: POP
39104: POP
// end ;
39105: GO 39035
39107: POP
39108: POP
// if not result then
39109: LD_VAR 0 2
39113: NOT
39114: IFFALSE 39118
// exit ;
39116: GO 39266
// mech := result [ 1 ] ;
39118: LD_ADDR_VAR 0 5
39122: PUSH
39123: LD_VAR 0 2
39127: PUSH
39128: LD_INT 1
39130: ARRAY
39131: ST_TO_ADDR
// if result > 1 then
39132: LD_VAR 0 2
39136: PUSH
39137: LD_INT 1
39139: GREATER
39140: IFFALSE 39252
// for i = 2 to result do
39142: LD_ADDR_VAR 0 3
39146: PUSH
39147: DOUBLE
39148: LD_INT 2
39150: DEC
39151: ST_TO_ADDR
39152: LD_VAR 0 2
39156: PUSH
39157: FOR_TO
39158: IFFALSE 39250
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39160: LD_ADDR_VAR 0 4
39164: PUSH
39165: LD_VAR 0 2
39169: PUSH
39170: LD_VAR 0 3
39174: ARRAY
39175: PPUSH
39176: LD_INT 3
39178: PPUSH
39179: CALL_OW 259
39183: PUSH
39184: LD_VAR 0 2
39188: PUSH
39189: LD_VAR 0 3
39193: ARRAY
39194: PPUSH
39195: CALL_OW 432
39199: MINUS
39200: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39201: LD_VAR 0 4
39205: PUSH
39206: LD_VAR 0 5
39210: PPUSH
39211: LD_INT 3
39213: PPUSH
39214: CALL_OW 259
39218: PUSH
39219: LD_VAR 0 5
39223: PPUSH
39224: CALL_OW 432
39228: MINUS
39229: GREATEREQUAL
39230: IFFALSE 39248
// mech := result [ i ] ;
39232: LD_ADDR_VAR 0 5
39236: PUSH
39237: LD_VAR 0 2
39241: PUSH
39242: LD_VAR 0 3
39246: ARRAY
39247: ST_TO_ADDR
// end ;
39248: GO 39157
39250: POP
39251: POP
// ComLinkTo ( vehicle , mech ) ;
39252: LD_VAR 0 1
39256: PPUSH
39257: LD_VAR 0 5
39261: PPUSH
39262: CALL_OW 135
// end ;
39266: LD_VAR 0 2
39270: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39271: LD_INT 0
39273: PPUSH
39274: PPUSH
39275: PPUSH
39276: PPUSH
39277: PPUSH
39278: PPUSH
39279: PPUSH
39280: PPUSH
39281: PPUSH
39282: PPUSH
39283: PPUSH
39284: PPUSH
39285: PPUSH
// result := [ ] ;
39286: LD_ADDR_VAR 0 7
39290: PUSH
39291: EMPTY
39292: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39293: LD_VAR 0 1
39297: PPUSH
39298: CALL_OW 266
39302: PUSH
39303: LD_INT 0
39305: PUSH
39306: LD_INT 1
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: IN
39313: NOT
39314: IFFALSE 39318
// exit ;
39316: GO 40949
// if name then
39318: LD_VAR 0 3
39322: IFFALSE 39338
// SetBName ( base_dep , name ) ;
39324: LD_VAR 0 1
39328: PPUSH
39329: LD_VAR 0 3
39333: PPUSH
39334: CALL_OW 500
// base := GetBase ( base_dep ) ;
39338: LD_ADDR_VAR 0 15
39342: PUSH
39343: LD_VAR 0 1
39347: PPUSH
39348: CALL_OW 274
39352: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39353: LD_ADDR_VAR 0 16
39357: PUSH
39358: LD_VAR 0 1
39362: PPUSH
39363: CALL_OW 255
39367: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39368: LD_ADDR_VAR 0 17
39372: PUSH
39373: LD_VAR 0 1
39377: PPUSH
39378: CALL_OW 248
39382: ST_TO_ADDR
// if sources then
39383: LD_VAR 0 5
39387: IFFALSE 39434
// for i = 1 to 3 do
39389: LD_ADDR_VAR 0 8
39393: PUSH
39394: DOUBLE
39395: LD_INT 1
39397: DEC
39398: ST_TO_ADDR
39399: LD_INT 3
39401: PUSH
39402: FOR_TO
39403: IFFALSE 39432
// AddResourceType ( base , i , sources [ i ] ) ;
39405: LD_VAR 0 15
39409: PPUSH
39410: LD_VAR 0 8
39414: PPUSH
39415: LD_VAR 0 5
39419: PUSH
39420: LD_VAR 0 8
39424: ARRAY
39425: PPUSH
39426: CALL_OW 276
39430: GO 39402
39432: POP
39433: POP
// buildings := GetBaseBuildings ( base , area ) ;
39434: LD_ADDR_VAR 0 18
39438: PUSH
39439: LD_VAR 0 15
39443: PPUSH
39444: LD_VAR 0 2
39448: PPUSH
39449: CALL 38726 0 2
39453: ST_TO_ADDR
// InitHc ;
39454: CALL_OW 19
// InitUc ;
39458: CALL_OW 18
// uc_side := side ;
39462: LD_ADDR_OWVAR 20
39466: PUSH
39467: LD_VAR 0 16
39471: ST_TO_ADDR
// uc_nation := nation ;
39472: LD_ADDR_OWVAR 21
39476: PUSH
39477: LD_VAR 0 17
39481: ST_TO_ADDR
// if buildings then
39482: LD_VAR 0 18
39486: IFFALSE 40808
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39488: LD_ADDR_VAR 0 19
39492: PUSH
39493: LD_VAR 0 18
39497: PPUSH
39498: LD_INT 2
39500: PUSH
39501: LD_INT 30
39503: PUSH
39504: LD_INT 29
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 30
39513: PUSH
39514: LD_INT 30
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: LIST
39525: PPUSH
39526: CALL_OW 72
39530: ST_TO_ADDR
// if tmp then
39531: LD_VAR 0 19
39535: IFFALSE 39583
// for i in tmp do
39537: LD_ADDR_VAR 0 8
39541: PUSH
39542: LD_VAR 0 19
39546: PUSH
39547: FOR_IN
39548: IFFALSE 39581
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39550: LD_VAR 0 8
39554: PPUSH
39555: CALL_OW 250
39559: PPUSH
39560: LD_VAR 0 8
39564: PPUSH
39565: CALL_OW 251
39569: PPUSH
39570: LD_VAR 0 16
39574: PPUSH
39575: CALL_OW 441
39579: GO 39547
39581: POP
39582: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39583: LD_VAR 0 18
39587: PPUSH
39588: LD_INT 2
39590: PUSH
39591: LD_INT 30
39593: PUSH
39594: LD_INT 32
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 30
39603: PUSH
39604: LD_INT 33
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: LIST
39615: PPUSH
39616: CALL_OW 72
39620: IFFALSE 39708
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39622: LD_ADDR_VAR 0 8
39626: PUSH
39627: LD_VAR 0 18
39631: PPUSH
39632: LD_INT 2
39634: PUSH
39635: LD_INT 30
39637: PUSH
39638: LD_INT 32
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 30
39647: PUSH
39648: LD_INT 33
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: LIST
39659: PPUSH
39660: CALL_OW 72
39664: PUSH
39665: FOR_IN
39666: IFFALSE 39706
// begin if not GetBWeapon ( i ) then
39668: LD_VAR 0 8
39672: PPUSH
39673: CALL_OW 269
39677: NOT
39678: IFFALSE 39704
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39680: LD_VAR 0 8
39684: PPUSH
39685: LD_VAR 0 8
39689: PPUSH
39690: LD_VAR 0 2
39694: PPUSH
39695: CALL 40954 0 2
39699: PPUSH
39700: CALL_OW 431
// end ;
39704: GO 39665
39706: POP
39707: POP
// end ; for i = 1 to personel do
39708: LD_ADDR_VAR 0 8
39712: PUSH
39713: DOUBLE
39714: LD_INT 1
39716: DEC
39717: ST_TO_ADDR
39718: LD_VAR 0 6
39722: PUSH
39723: FOR_TO
39724: IFFALSE 40788
// begin if i > 4 then
39726: LD_VAR 0 8
39730: PUSH
39731: LD_INT 4
39733: GREATER
39734: IFFALSE 39738
// break ;
39736: GO 40788
// case i of 1 :
39738: LD_VAR 0 8
39742: PUSH
39743: LD_INT 1
39745: DOUBLE
39746: EQUAL
39747: IFTRUE 39751
39749: GO 39831
39751: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39752: LD_ADDR_VAR 0 12
39756: PUSH
39757: LD_VAR 0 18
39761: PPUSH
39762: LD_INT 22
39764: PUSH
39765: LD_VAR 0 16
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 58
39776: PUSH
39777: EMPTY
39778: LIST
39779: PUSH
39780: LD_INT 2
39782: PUSH
39783: LD_INT 30
39785: PUSH
39786: LD_INT 32
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 30
39795: PUSH
39796: LD_INT 4
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 30
39805: PUSH
39806: LD_INT 5
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: LIST
39823: PPUSH
39824: CALL_OW 72
39828: ST_TO_ADDR
39829: GO 40053
39831: LD_INT 2
39833: DOUBLE
39834: EQUAL
39835: IFTRUE 39839
39837: GO 39901
39839: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39840: LD_ADDR_VAR 0 12
39844: PUSH
39845: LD_VAR 0 18
39849: PPUSH
39850: LD_INT 22
39852: PUSH
39853: LD_VAR 0 16
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 2
39864: PUSH
39865: LD_INT 30
39867: PUSH
39868: LD_INT 0
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 30
39877: PUSH
39878: LD_INT 1
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: LIST
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PPUSH
39894: CALL_OW 72
39898: ST_TO_ADDR
39899: GO 40053
39901: LD_INT 3
39903: DOUBLE
39904: EQUAL
39905: IFTRUE 39909
39907: GO 39971
39909: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39910: LD_ADDR_VAR 0 12
39914: PUSH
39915: LD_VAR 0 18
39919: PPUSH
39920: LD_INT 22
39922: PUSH
39923: LD_VAR 0 16
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 2
39934: PUSH
39935: LD_INT 30
39937: PUSH
39938: LD_INT 2
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 30
39947: PUSH
39948: LD_INT 3
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: LIST
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PPUSH
39964: CALL_OW 72
39968: ST_TO_ADDR
39969: GO 40053
39971: LD_INT 4
39973: DOUBLE
39974: EQUAL
39975: IFTRUE 39979
39977: GO 40052
39979: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39980: LD_ADDR_VAR 0 12
39984: PUSH
39985: LD_VAR 0 18
39989: PPUSH
39990: LD_INT 22
39992: PUSH
39993: LD_VAR 0 16
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 2
40004: PUSH
40005: LD_INT 30
40007: PUSH
40008: LD_INT 6
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 30
40017: PUSH
40018: LD_INT 7
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 30
40027: PUSH
40028: LD_INT 8
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PPUSH
40045: CALL_OW 72
40049: ST_TO_ADDR
40050: GO 40053
40052: POP
// if i = 1 then
40053: LD_VAR 0 8
40057: PUSH
40058: LD_INT 1
40060: EQUAL
40061: IFFALSE 40172
// begin tmp := [ ] ;
40063: LD_ADDR_VAR 0 19
40067: PUSH
40068: EMPTY
40069: ST_TO_ADDR
// for j in f do
40070: LD_ADDR_VAR 0 9
40074: PUSH
40075: LD_VAR 0 12
40079: PUSH
40080: FOR_IN
40081: IFFALSE 40154
// if GetBType ( j ) = b_bunker then
40083: LD_VAR 0 9
40087: PPUSH
40088: CALL_OW 266
40092: PUSH
40093: LD_INT 32
40095: EQUAL
40096: IFFALSE 40123
// tmp := Insert ( tmp , 1 , j ) else
40098: LD_ADDR_VAR 0 19
40102: PUSH
40103: LD_VAR 0 19
40107: PPUSH
40108: LD_INT 1
40110: PPUSH
40111: LD_VAR 0 9
40115: PPUSH
40116: CALL_OW 2
40120: ST_TO_ADDR
40121: GO 40152
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40123: LD_ADDR_VAR 0 19
40127: PUSH
40128: LD_VAR 0 19
40132: PPUSH
40133: LD_VAR 0 19
40137: PUSH
40138: LD_INT 1
40140: PLUS
40141: PPUSH
40142: LD_VAR 0 9
40146: PPUSH
40147: CALL_OW 2
40151: ST_TO_ADDR
40152: GO 40080
40154: POP
40155: POP
// if tmp then
40156: LD_VAR 0 19
40160: IFFALSE 40172
// f := tmp ;
40162: LD_ADDR_VAR 0 12
40166: PUSH
40167: LD_VAR 0 19
40171: ST_TO_ADDR
// end ; x := personel [ i ] ;
40172: LD_ADDR_VAR 0 13
40176: PUSH
40177: LD_VAR 0 6
40181: PUSH
40182: LD_VAR 0 8
40186: ARRAY
40187: ST_TO_ADDR
// if x = - 1 then
40188: LD_VAR 0 13
40192: PUSH
40193: LD_INT 1
40195: NEG
40196: EQUAL
40197: IFFALSE 40406
// begin for j in f do
40199: LD_ADDR_VAR 0 9
40203: PUSH
40204: LD_VAR 0 12
40208: PUSH
40209: FOR_IN
40210: IFFALSE 40402
// repeat InitHc ;
40212: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40216: LD_VAR 0 9
40220: PPUSH
40221: CALL_OW 266
40225: PUSH
40226: LD_INT 5
40228: EQUAL
40229: IFFALSE 40299
// begin if UnitsInside ( j ) < 3 then
40231: LD_VAR 0 9
40235: PPUSH
40236: CALL_OW 313
40240: PUSH
40241: LD_INT 3
40243: LESS
40244: IFFALSE 40280
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40246: LD_INT 0
40248: PPUSH
40249: LD_INT 5
40251: PUSH
40252: LD_INT 8
40254: PUSH
40255: LD_INT 9
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: LIST
40262: PUSH
40263: LD_VAR 0 17
40267: ARRAY
40268: PPUSH
40269: LD_VAR 0 4
40273: PPUSH
40274: CALL_OW 380
40278: GO 40297
// PrepareHuman ( false , i , skill ) ;
40280: LD_INT 0
40282: PPUSH
40283: LD_VAR 0 8
40287: PPUSH
40288: LD_VAR 0 4
40292: PPUSH
40293: CALL_OW 380
// end else
40297: GO 40316
// PrepareHuman ( false , i , skill ) ;
40299: LD_INT 0
40301: PPUSH
40302: LD_VAR 0 8
40306: PPUSH
40307: LD_VAR 0 4
40311: PPUSH
40312: CALL_OW 380
// un := CreateHuman ;
40316: LD_ADDR_VAR 0 14
40320: PUSH
40321: CALL_OW 44
40325: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40326: LD_ADDR_VAR 0 7
40330: PUSH
40331: LD_VAR 0 7
40335: PPUSH
40336: LD_INT 1
40338: PPUSH
40339: LD_VAR 0 14
40343: PPUSH
40344: CALL_OW 2
40348: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40349: LD_VAR 0 14
40353: PPUSH
40354: LD_VAR 0 9
40358: PPUSH
40359: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40363: LD_VAR 0 9
40367: PPUSH
40368: CALL_OW 313
40372: PUSH
40373: LD_INT 6
40375: EQUAL
40376: PUSH
40377: LD_VAR 0 9
40381: PPUSH
40382: CALL_OW 266
40386: PUSH
40387: LD_INT 32
40389: PUSH
40390: LD_INT 31
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: IN
40397: OR
40398: IFFALSE 40212
40400: GO 40209
40402: POP
40403: POP
// end else
40404: GO 40786
// for j = 1 to x do
40406: LD_ADDR_VAR 0 9
40410: PUSH
40411: DOUBLE
40412: LD_INT 1
40414: DEC
40415: ST_TO_ADDR
40416: LD_VAR 0 13
40420: PUSH
40421: FOR_TO
40422: IFFALSE 40784
// begin InitHc ;
40424: CALL_OW 19
// if not f then
40428: LD_VAR 0 12
40432: NOT
40433: IFFALSE 40522
// begin PrepareHuman ( false , i , skill ) ;
40435: LD_INT 0
40437: PPUSH
40438: LD_VAR 0 8
40442: PPUSH
40443: LD_VAR 0 4
40447: PPUSH
40448: CALL_OW 380
// un := CreateHuman ;
40452: LD_ADDR_VAR 0 14
40456: PUSH
40457: CALL_OW 44
40461: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40462: LD_ADDR_VAR 0 7
40466: PUSH
40467: LD_VAR 0 7
40471: PPUSH
40472: LD_INT 1
40474: PPUSH
40475: LD_VAR 0 14
40479: PPUSH
40480: CALL_OW 2
40484: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40485: LD_VAR 0 14
40489: PPUSH
40490: LD_VAR 0 1
40494: PPUSH
40495: CALL_OW 250
40499: PPUSH
40500: LD_VAR 0 1
40504: PPUSH
40505: CALL_OW 251
40509: PPUSH
40510: LD_INT 10
40512: PPUSH
40513: LD_INT 0
40515: PPUSH
40516: CALL_OW 50
// continue ;
40520: GO 40421
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40522: LD_VAR 0 12
40526: PUSH
40527: LD_INT 1
40529: ARRAY
40530: PPUSH
40531: CALL_OW 313
40535: PUSH
40536: LD_VAR 0 12
40540: PUSH
40541: LD_INT 1
40543: ARRAY
40544: PPUSH
40545: CALL_OW 266
40549: PUSH
40550: LD_INT 32
40552: PUSH
40553: LD_INT 31
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: IN
40560: AND
40561: PUSH
40562: LD_VAR 0 12
40566: PUSH
40567: LD_INT 1
40569: ARRAY
40570: PPUSH
40571: CALL_OW 313
40575: PUSH
40576: LD_INT 6
40578: EQUAL
40579: OR
40580: IFFALSE 40600
// f := Delete ( f , 1 ) ;
40582: LD_ADDR_VAR 0 12
40586: PUSH
40587: LD_VAR 0 12
40591: PPUSH
40592: LD_INT 1
40594: PPUSH
40595: CALL_OW 3
40599: ST_TO_ADDR
// if not f then
40600: LD_VAR 0 12
40604: NOT
40605: IFFALSE 40623
// begin x := x + 2 ;
40607: LD_ADDR_VAR 0 13
40611: PUSH
40612: LD_VAR 0 13
40616: PUSH
40617: LD_INT 2
40619: PLUS
40620: ST_TO_ADDR
// continue ;
40621: GO 40421
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40623: LD_VAR 0 12
40627: PUSH
40628: LD_INT 1
40630: ARRAY
40631: PPUSH
40632: CALL_OW 266
40636: PUSH
40637: LD_INT 5
40639: EQUAL
40640: IFFALSE 40714
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40642: LD_VAR 0 12
40646: PUSH
40647: LD_INT 1
40649: ARRAY
40650: PPUSH
40651: CALL_OW 313
40655: PUSH
40656: LD_INT 3
40658: LESS
40659: IFFALSE 40695
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40661: LD_INT 0
40663: PPUSH
40664: LD_INT 5
40666: PUSH
40667: LD_INT 8
40669: PUSH
40670: LD_INT 9
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: LIST
40677: PUSH
40678: LD_VAR 0 17
40682: ARRAY
40683: PPUSH
40684: LD_VAR 0 4
40688: PPUSH
40689: CALL_OW 380
40693: GO 40712
// PrepareHuman ( false , i , skill ) ;
40695: LD_INT 0
40697: PPUSH
40698: LD_VAR 0 8
40702: PPUSH
40703: LD_VAR 0 4
40707: PPUSH
40708: CALL_OW 380
// end else
40712: GO 40731
// PrepareHuman ( false , i , skill ) ;
40714: LD_INT 0
40716: PPUSH
40717: LD_VAR 0 8
40721: PPUSH
40722: LD_VAR 0 4
40726: PPUSH
40727: CALL_OW 380
// un := CreateHuman ;
40731: LD_ADDR_VAR 0 14
40735: PUSH
40736: CALL_OW 44
40740: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40741: LD_ADDR_VAR 0 7
40745: PUSH
40746: LD_VAR 0 7
40750: PPUSH
40751: LD_INT 1
40753: PPUSH
40754: LD_VAR 0 14
40758: PPUSH
40759: CALL_OW 2
40763: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40764: LD_VAR 0 14
40768: PPUSH
40769: LD_VAR 0 12
40773: PUSH
40774: LD_INT 1
40776: ARRAY
40777: PPUSH
40778: CALL_OW 52
// end ;
40782: GO 40421
40784: POP
40785: POP
// end ;
40786: GO 39723
40788: POP
40789: POP
// result := result ^ buildings ;
40790: LD_ADDR_VAR 0 7
40794: PUSH
40795: LD_VAR 0 7
40799: PUSH
40800: LD_VAR 0 18
40804: ADD
40805: ST_TO_ADDR
// end else
40806: GO 40949
// begin for i = 1 to personel do
40808: LD_ADDR_VAR 0 8
40812: PUSH
40813: DOUBLE
40814: LD_INT 1
40816: DEC
40817: ST_TO_ADDR
40818: LD_VAR 0 6
40822: PUSH
40823: FOR_TO
40824: IFFALSE 40947
// begin if i > 4 then
40826: LD_VAR 0 8
40830: PUSH
40831: LD_INT 4
40833: GREATER
40834: IFFALSE 40838
// break ;
40836: GO 40947
// x := personel [ i ] ;
40838: LD_ADDR_VAR 0 13
40842: PUSH
40843: LD_VAR 0 6
40847: PUSH
40848: LD_VAR 0 8
40852: ARRAY
40853: ST_TO_ADDR
// if x = - 1 then
40854: LD_VAR 0 13
40858: PUSH
40859: LD_INT 1
40861: NEG
40862: EQUAL
40863: IFFALSE 40867
// continue ;
40865: GO 40823
// PrepareHuman ( false , i , skill ) ;
40867: LD_INT 0
40869: PPUSH
40870: LD_VAR 0 8
40874: PPUSH
40875: LD_VAR 0 4
40879: PPUSH
40880: CALL_OW 380
// un := CreateHuman ;
40884: LD_ADDR_VAR 0 14
40888: PUSH
40889: CALL_OW 44
40893: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40894: LD_VAR 0 14
40898: PPUSH
40899: LD_VAR 0 1
40903: PPUSH
40904: CALL_OW 250
40908: PPUSH
40909: LD_VAR 0 1
40913: PPUSH
40914: CALL_OW 251
40918: PPUSH
40919: LD_INT 10
40921: PPUSH
40922: LD_INT 0
40924: PPUSH
40925: CALL_OW 50
// result := result ^ un ;
40929: LD_ADDR_VAR 0 7
40933: PUSH
40934: LD_VAR 0 7
40938: PUSH
40939: LD_VAR 0 14
40943: ADD
40944: ST_TO_ADDR
// end ;
40945: GO 40823
40947: POP
40948: POP
// end ; end ;
40949: LD_VAR 0 7
40953: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40954: LD_INT 0
40956: PPUSH
40957: PPUSH
40958: PPUSH
40959: PPUSH
40960: PPUSH
40961: PPUSH
40962: PPUSH
40963: PPUSH
40964: PPUSH
40965: PPUSH
40966: PPUSH
40967: PPUSH
40968: PPUSH
40969: PPUSH
40970: PPUSH
40971: PPUSH
// result := false ;
40972: LD_ADDR_VAR 0 3
40976: PUSH
40977: LD_INT 0
40979: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40980: LD_VAR 0 1
40984: NOT
40985: PUSH
40986: LD_VAR 0 1
40990: PPUSH
40991: CALL_OW 266
40995: PUSH
40996: LD_INT 32
40998: PUSH
40999: LD_INT 33
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: IN
41006: NOT
41007: OR
41008: IFFALSE 41012
// exit ;
41010: GO 42148
// nat := GetNation ( tower ) ;
41012: LD_ADDR_VAR 0 12
41016: PUSH
41017: LD_VAR 0 1
41021: PPUSH
41022: CALL_OW 248
41026: ST_TO_ADDR
// side := GetSide ( tower ) ;
41027: LD_ADDR_VAR 0 16
41031: PUSH
41032: LD_VAR 0 1
41036: PPUSH
41037: CALL_OW 255
41041: ST_TO_ADDR
// x := GetX ( tower ) ;
41042: LD_ADDR_VAR 0 10
41046: PUSH
41047: LD_VAR 0 1
41051: PPUSH
41052: CALL_OW 250
41056: ST_TO_ADDR
// y := GetY ( tower ) ;
41057: LD_ADDR_VAR 0 11
41061: PUSH
41062: LD_VAR 0 1
41066: PPUSH
41067: CALL_OW 251
41071: ST_TO_ADDR
// if not x or not y then
41072: LD_VAR 0 10
41076: NOT
41077: PUSH
41078: LD_VAR 0 11
41082: NOT
41083: OR
41084: IFFALSE 41088
// exit ;
41086: GO 42148
// weapon := 0 ;
41088: LD_ADDR_VAR 0 18
41092: PUSH
41093: LD_INT 0
41095: ST_TO_ADDR
// fac_list := [ ] ;
41096: LD_ADDR_VAR 0 17
41100: PUSH
41101: EMPTY
41102: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
41103: LD_ADDR_VAR 0 6
41107: PUSH
41108: LD_VAR 0 1
41112: PPUSH
41113: CALL_OW 274
41117: PPUSH
41118: LD_VAR 0 2
41122: PPUSH
41123: CALL 38726 0 2
41127: PPUSH
41128: LD_INT 30
41130: PUSH
41131: LD_INT 3
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PPUSH
41138: CALL_OW 72
41142: ST_TO_ADDR
// if not factories then
41143: LD_VAR 0 6
41147: NOT
41148: IFFALSE 41152
// exit ;
41150: GO 42148
// for i in factories do
41152: LD_ADDR_VAR 0 8
41156: PUSH
41157: LD_VAR 0 6
41161: PUSH
41162: FOR_IN
41163: IFFALSE 41188
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41165: LD_ADDR_VAR 0 17
41169: PUSH
41170: LD_VAR 0 17
41174: PUSH
41175: LD_VAR 0 8
41179: PPUSH
41180: CALL_OW 478
41184: UNION
41185: ST_TO_ADDR
41186: GO 41162
41188: POP
41189: POP
// if not fac_list then
41190: LD_VAR 0 17
41194: NOT
41195: IFFALSE 41199
// exit ;
41197: GO 42148
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41199: LD_ADDR_VAR 0 5
41203: PUSH
41204: LD_INT 4
41206: PUSH
41207: LD_INT 5
41209: PUSH
41210: LD_INT 9
41212: PUSH
41213: LD_INT 10
41215: PUSH
41216: LD_INT 6
41218: PUSH
41219: LD_INT 7
41221: PUSH
41222: LD_INT 11
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 27
41236: PUSH
41237: LD_INT 28
41239: PUSH
41240: LD_INT 26
41242: PUSH
41243: LD_INT 30
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 43
41254: PUSH
41255: LD_INT 44
41257: PUSH
41258: LD_INT 46
41260: PUSH
41261: LD_INT 45
41263: PUSH
41264: LD_INT 47
41266: PUSH
41267: LD_INT 49
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: LIST
41282: PUSH
41283: LD_VAR 0 12
41287: ARRAY
41288: ST_TO_ADDR
// for i in list do
41289: LD_ADDR_VAR 0 8
41293: PUSH
41294: LD_VAR 0 5
41298: PUSH
41299: FOR_IN
41300: IFFALSE 41333
// if not i in fac_list then
41302: LD_VAR 0 8
41306: PUSH
41307: LD_VAR 0 17
41311: IN
41312: NOT
41313: IFFALSE 41331
// list := list diff i ;
41315: LD_ADDR_VAR 0 5
41319: PUSH
41320: LD_VAR 0 5
41324: PUSH
41325: LD_VAR 0 8
41329: DIFF
41330: ST_TO_ADDR
41331: GO 41299
41333: POP
41334: POP
// if not list then
41335: LD_VAR 0 5
41339: NOT
41340: IFFALSE 41344
// exit ;
41342: GO 42148
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41344: LD_VAR 0 12
41348: PUSH
41349: LD_INT 3
41351: EQUAL
41352: PUSH
41353: LD_INT 49
41355: PUSH
41356: LD_VAR 0 5
41360: IN
41361: AND
41362: PUSH
41363: LD_INT 31
41365: PPUSH
41366: LD_VAR 0 16
41370: PPUSH
41371: CALL_OW 321
41375: PUSH
41376: LD_INT 2
41378: EQUAL
41379: AND
41380: IFFALSE 41440
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41382: LD_INT 22
41384: PUSH
41385: LD_VAR 0 16
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 35
41396: PUSH
41397: LD_INT 49
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 91
41406: PUSH
41407: LD_VAR 0 1
41411: PUSH
41412: LD_INT 10
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: LIST
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: LIST
41424: PPUSH
41425: CALL_OW 69
41429: NOT
41430: IFFALSE 41440
// weapon := ru_time_lapser ;
41432: LD_ADDR_VAR 0 18
41436: PUSH
41437: LD_INT 49
41439: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41440: LD_VAR 0 12
41444: PUSH
41445: LD_INT 1
41447: PUSH
41448: LD_INT 2
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: IN
41455: PUSH
41456: LD_INT 11
41458: PUSH
41459: LD_VAR 0 5
41463: IN
41464: PUSH
41465: LD_INT 30
41467: PUSH
41468: LD_VAR 0 5
41472: IN
41473: OR
41474: AND
41475: PUSH
41476: LD_INT 6
41478: PPUSH
41479: LD_VAR 0 16
41483: PPUSH
41484: CALL_OW 321
41488: PUSH
41489: LD_INT 2
41491: EQUAL
41492: AND
41493: IFFALSE 41658
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41495: LD_INT 22
41497: PUSH
41498: LD_VAR 0 16
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 2
41509: PUSH
41510: LD_INT 35
41512: PUSH
41513: LD_INT 11
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 35
41522: PUSH
41523: LD_INT 30
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 91
41537: PUSH
41538: LD_VAR 0 1
41542: PUSH
41543: LD_INT 18
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: LIST
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: LIST
41555: PPUSH
41556: CALL_OW 69
41560: NOT
41561: PUSH
41562: LD_INT 22
41564: PUSH
41565: LD_VAR 0 16
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 2
41576: PUSH
41577: LD_INT 30
41579: PUSH
41580: LD_INT 32
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 30
41589: PUSH
41590: LD_INT 33
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 91
41604: PUSH
41605: LD_VAR 0 1
41609: PUSH
41610: LD_INT 12
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: LIST
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: LIST
41622: PUSH
41623: EMPTY
41624: LIST
41625: PPUSH
41626: CALL_OW 69
41630: PUSH
41631: LD_INT 2
41633: GREATER
41634: AND
41635: IFFALSE 41658
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41637: LD_ADDR_VAR 0 18
41641: PUSH
41642: LD_INT 11
41644: PUSH
41645: LD_INT 30
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_VAR 0 12
41656: ARRAY
41657: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41658: LD_VAR 0 18
41662: NOT
41663: PUSH
41664: LD_INT 40
41666: PPUSH
41667: LD_VAR 0 16
41671: PPUSH
41672: CALL_OW 321
41676: PUSH
41677: LD_INT 2
41679: EQUAL
41680: AND
41681: PUSH
41682: LD_INT 7
41684: PUSH
41685: LD_VAR 0 5
41689: IN
41690: PUSH
41691: LD_INT 28
41693: PUSH
41694: LD_VAR 0 5
41698: IN
41699: OR
41700: PUSH
41701: LD_INT 45
41703: PUSH
41704: LD_VAR 0 5
41708: IN
41709: OR
41710: AND
41711: IFFALSE 41965
// begin hex := GetHexInfo ( x , y ) ;
41713: LD_ADDR_VAR 0 4
41717: PUSH
41718: LD_VAR 0 10
41722: PPUSH
41723: LD_VAR 0 11
41727: PPUSH
41728: CALL_OW 546
41732: ST_TO_ADDR
// if hex [ 1 ] then
41733: LD_VAR 0 4
41737: PUSH
41738: LD_INT 1
41740: ARRAY
41741: IFFALSE 41745
// exit ;
41743: GO 42148
// height := hex [ 2 ] ;
41745: LD_ADDR_VAR 0 15
41749: PUSH
41750: LD_VAR 0 4
41754: PUSH
41755: LD_INT 2
41757: ARRAY
41758: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41759: LD_ADDR_VAR 0 14
41763: PUSH
41764: LD_INT 0
41766: PUSH
41767: LD_INT 2
41769: PUSH
41770: LD_INT 3
41772: PUSH
41773: LD_INT 5
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: ST_TO_ADDR
// for i in tmp do
41782: LD_ADDR_VAR 0 8
41786: PUSH
41787: LD_VAR 0 14
41791: PUSH
41792: FOR_IN
41793: IFFALSE 41963
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41795: LD_ADDR_VAR 0 9
41799: PUSH
41800: LD_VAR 0 10
41804: PPUSH
41805: LD_VAR 0 8
41809: PPUSH
41810: LD_INT 5
41812: PPUSH
41813: CALL_OW 272
41817: PUSH
41818: LD_VAR 0 11
41822: PPUSH
41823: LD_VAR 0 8
41827: PPUSH
41828: LD_INT 5
41830: PPUSH
41831: CALL_OW 273
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41840: LD_VAR 0 9
41844: PUSH
41845: LD_INT 1
41847: ARRAY
41848: PPUSH
41849: LD_VAR 0 9
41853: PUSH
41854: LD_INT 2
41856: ARRAY
41857: PPUSH
41858: CALL_OW 488
41862: IFFALSE 41961
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41864: LD_ADDR_VAR 0 4
41868: PUSH
41869: LD_VAR 0 9
41873: PUSH
41874: LD_INT 1
41876: ARRAY
41877: PPUSH
41878: LD_VAR 0 9
41882: PUSH
41883: LD_INT 2
41885: ARRAY
41886: PPUSH
41887: CALL_OW 546
41891: ST_TO_ADDR
// if hex [ 1 ] then
41892: LD_VAR 0 4
41896: PUSH
41897: LD_INT 1
41899: ARRAY
41900: IFFALSE 41904
// continue ;
41902: GO 41792
// h := hex [ 2 ] ;
41904: LD_ADDR_VAR 0 13
41908: PUSH
41909: LD_VAR 0 4
41913: PUSH
41914: LD_INT 2
41916: ARRAY
41917: ST_TO_ADDR
// if h + 7 < height then
41918: LD_VAR 0 13
41922: PUSH
41923: LD_INT 7
41925: PLUS
41926: PUSH
41927: LD_VAR 0 15
41931: LESS
41932: IFFALSE 41961
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41934: LD_ADDR_VAR 0 18
41938: PUSH
41939: LD_INT 7
41941: PUSH
41942: LD_INT 28
41944: PUSH
41945: LD_INT 45
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: LIST
41952: PUSH
41953: LD_VAR 0 12
41957: ARRAY
41958: ST_TO_ADDR
// break ;
41959: GO 41963
// end ; end ; end ;
41961: GO 41792
41963: POP
41964: POP
// end ; if not weapon then
41965: LD_VAR 0 18
41969: NOT
41970: IFFALSE 42030
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41972: LD_ADDR_VAR 0 5
41976: PUSH
41977: LD_VAR 0 5
41981: PUSH
41982: LD_INT 11
41984: PUSH
41985: LD_INT 30
41987: PUSH
41988: LD_INT 49
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: LIST
41995: DIFF
41996: ST_TO_ADDR
// if not list then
41997: LD_VAR 0 5
42001: NOT
42002: IFFALSE 42006
// exit ;
42004: GO 42148
// weapon := list [ rand ( 1 , list ) ] ;
42006: LD_ADDR_VAR 0 18
42010: PUSH
42011: LD_VAR 0 5
42015: PUSH
42016: LD_INT 1
42018: PPUSH
42019: LD_VAR 0 5
42023: PPUSH
42024: CALL_OW 12
42028: ARRAY
42029: ST_TO_ADDR
// end ; if weapon then
42030: LD_VAR 0 18
42034: IFFALSE 42148
// begin tmp := CostOfWeapon ( weapon ) ;
42036: LD_ADDR_VAR 0 14
42040: PUSH
42041: LD_VAR 0 18
42045: PPUSH
42046: CALL_OW 451
42050: ST_TO_ADDR
// j := GetBase ( tower ) ;
42051: LD_ADDR_VAR 0 9
42055: PUSH
42056: LD_VAR 0 1
42060: PPUSH
42061: CALL_OW 274
42065: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42066: LD_VAR 0 9
42070: PPUSH
42071: LD_INT 1
42073: PPUSH
42074: CALL_OW 275
42078: PUSH
42079: LD_VAR 0 14
42083: PUSH
42084: LD_INT 1
42086: ARRAY
42087: GREATEREQUAL
42088: PUSH
42089: LD_VAR 0 9
42093: PPUSH
42094: LD_INT 2
42096: PPUSH
42097: CALL_OW 275
42101: PUSH
42102: LD_VAR 0 14
42106: PUSH
42107: LD_INT 2
42109: ARRAY
42110: GREATEREQUAL
42111: AND
42112: PUSH
42113: LD_VAR 0 9
42117: PPUSH
42118: LD_INT 3
42120: PPUSH
42121: CALL_OW 275
42125: PUSH
42126: LD_VAR 0 14
42130: PUSH
42131: LD_INT 3
42133: ARRAY
42134: GREATEREQUAL
42135: AND
42136: IFFALSE 42148
// result := weapon ;
42138: LD_ADDR_VAR 0 3
42142: PUSH
42143: LD_VAR 0 18
42147: ST_TO_ADDR
// end ; end ;
42148: LD_VAR 0 3
42152: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42153: LD_INT 0
42155: PPUSH
42156: PPUSH
// result := true ;
42157: LD_ADDR_VAR 0 3
42161: PUSH
42162: LD_INT 1
42164: ST_TO_ADDR
// if array1 = array2 then
42165: LD_VAR 0 1
42169: PUSH
42170: LD_VAR 0 2
42174: EQUAL
42175: IFFALSE 42235
// begin for i = 1 to array1 do
42177: LD_ADDR_VAR 0 4
42181: PUSH
42182: DOUBLE
42183: LD_INT 1
42185: DEC
42186: ST_TO_ADDR
42187: LD_VAR 0 1
42191: PUSH
42192: FOR_TO
42193: IFFALSE 42231
// if array1 [ i ] <> array2 [ i ] then
42195: LD_VAR 0 1
42199: PUSH
42200: LD_VAR 0 4
42204: ARRAY
42205: PUSH
42206: LD_VAR 0 2
42210: PUSH
42211: LD_VAR 0 4
42215: ARRAY
42216: NONEQUAL
42217: IFFALSE 42229
// begin result := false ;
42219: LD_ADDR_VAR 0 3
42223: PUSH
42224: LD_INT 0
42226: ST_TO_ADDR
// break ;
42227: GO 42231
// end ;
42229: GO 42192
42231: POP
42232: POP
// end else
42233: GO 42243
// result := false ;
42235: LD_ADDR_VAR 0 3
42239: PUSH
42240: LD_INT 0
42242: ST_TO_ADDR
// end ;
42243: LD_VAR 0 3
42247: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42248: LD_INT 0
42250: PPUSH
42251: PPUSH
42252: PPUSH
// pom := GetBase ( fac ) ;
42253: LD_ADDR_VAR 0 5
42257: PUSH
42258: LD_VAR 0 1
42262: PPUSH
42263: CALL_OW 274
42267: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42268: LD_ADDR_VAR 0 4
42272: PUSH
42273: LD_VAR 0 2
42277: PUSH
42278: LD_INT 1
42280: ARRAY
42281: PPUSH
42282: LD_VAR 0 2
42286: PUSH
42287: LD_INT 2
42289: ARRAY
42290: PPUSH
42291: LD_VAR 0 2
42295: PUSH
42296: LD_INT 3
42298: ARRAY
42299: PPUSH
42300: LD_VAR 0 2
42304: PUSH
42305: LD_INT 4
42307: ARRAY
42308: PPUSH
42309: CALL_OW 449
42313: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42314: LD_ADDR_VAR 0 3
42318: PUSH
42319: LD_VAR 0 5
42323: PPUSH
42324: LD_INT 1
42326: PPUSH
42327: CALL_OW 275
42331: PUSH
42332: LD_VAR 0 4
42336: PUSH
42337: LD_INT 1
42339: ARRAY
42340: GREATEREQUAL
42341: PUSH
42342: LD_VAR 0 5
42346: PPUSH
42347: LD_INT 2
42349: PPUSH
42350: CALL_OW 275
42354: PUSH
42355: LD_VAR 0 4
42359: PUSH
42360: LD_INT 2
42362: ARRAY
42363: GREATEREQUAL
42364: AND
42365: PUSH
42366: LD_VAR 0 5
42370: PPUSH
42371: LD_INT 3
42373: PPUSH
42374: CALL_OW 275
42378: PUSH
42379: LD_VAR 0 4
42383: PUSH
42384: LD_INT 3
42386: ARRAY
42387: GREATEREQUAL
42388: AND
42389: ST_TO_ADDR
// end ;
42390: LD_VAR 0 3
42394: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42395: LD_INT 0
42397: PPUSH
42398: PPUSH
42399: PPUSH
42400: PPUSH
// pom := GetBase ( building ) ;
42401: LD_ADDR_VAR 0 3
42405: PUSH
42406: LD_VAR 0 1
42410: PPUSH
42411: CALL_OW 274
42415: ST_TO_ADDR
// if not pom then
42416: LD_VAR 0 3
42420: NOT
42421: IFFALSE 42425
// exit ;
42423: GO 42595
// btype := GetBType ( building ) ;
42425: LD_ADDR_VAR 0 5
42429: PUSH
42430: LD_VAR 0 1
42434: PPUSH
42435: CALL_OW 266
42439: ST_TO_ADDR
// if btype = b_armoury then
42440: LD_VAR 0 5
42444: PUSH
42445: LD_INT 4
42447: EQUAL
42448: IFFALSE 42458
// btype := b_barracks ;
42450: LD_ADDR_VAR 0 5
42454: PUSH
42455: LD_INT 5
42457: ST_TO_ADDR
// if btype = b_depot then
42458: LD_VAR 0 5
42462: PUSH
42463: LD_INT 0
42465: EQUAL
42466: IFFALSE 42476
// btype := b_warehouse ;
42468: LD_ADDR_VAR 0 5
42472: PUSH
42473: LD_INT 1
42475: ST_TO_ADDR
// if btype = b_workshop then
42476: LD_VAR 0 5
42480: PUSH
42481: LD_INT 2
42483: EQUAL
42484: IFFALSE 42494
// btype := b_factory ;
42486: LD_ADDR_VAR 0 5
42490: PUSH
42491: LD_INT 3
42493: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42494: LD_ADDR_VAR 0 4
42498: PUSH
42499: LD_VAR 0 5
42503: PPUSH
42504: LD_VAR 0 1
42508: PPUSH
42509: CALL_OW 248
42513: PPUSH
42514: CALL_OW 450
42518: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42519: LD_ADDR_VAR 0 2
42523: PUSH
42524: LD_VAR 0 3
42528: PPUSH
42529: LD_INT 1
42531: PPUSH
42532: CALL_OW 275
42536: PUSH
42537: LD_VAR 0 4
42541: PUSH
42542: LD_INT 1
42544: ARRAY
42545: GREATEREQUAL
42546: PUSH
42547: LD_VAR 0 3
42551: PPUSH
42552: LD_INT 2
42554: PPUSH
42555: CALL_OW 275
42559: PUSH
42560: LD_VAR 0 4
42564: PUSH
42565: LD_INT 2
42567: ARRAY
42568: GREATEREQUAL
42569: AND
42570: PUSH
42571: LD_VAR 0 3
42575: PPUSH
42576: LD_INT 3
42578: PPUSH
42579: CALL_OW 275
42583: PUSH
42584: LD_VAR 0 4
42588: PUSH
42589: LD_INT 3
42591: ARRAY
42592: GREATEREQUAL
42593: AND
42594: ST_TO_ADDR
// end ;
42595: LD_VAR 0 2
42599: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42600: LD_INT 0
42602: PPUSH
42603: PPUSH
42604: PPUSH
// pom := GetBase ( building ) ;
42605: LD_ADDR_VAR 0 4
42609: PUSH
42610: LD_VAR 0 1
42614: PPUSH
42615: CALL_OW 274
42619: ST_TO_ADDR
// if not pom then
42620: LD_VAR 0 4
42624: NOT
42625: IFFALSE 42629
// exit ;
42627: GO 42730
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42629: LD_ADDR_VAR 0 5
42633: PUSH
42634: LD_VAR 0 2
42638: PPUSH
42639: LD_VAR 0 1
42643: PPUSH
42644: CALL_OW 248
42648: PPUSH
42649: CALL_OW 450
42653: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42654: LD_ADDR_VAR 0 3
42658: PUSH
42659: LD_VAR 0 4
42663: PPUSH
42664: LD_INT 1
42666: PPUSH
42667: CALL_OW 275
42671: PUSH
42672: LD_VAR 0 5
42676: PUSH
42677: LD_INT 1
42679: ARRAY
42680: GREATEREQUAL
42681: PUSH
42682: LD_VAR 0 4
42686: PPUSH
42687: LD_INT 2
42689: PPUSH
42690: CALL_OW 275
42694: PUSH
42695: LD_VAR 0 5
42699: PUSH
42700: LD_INT 2
42702: ARRAY
42703: GREATEREQUAL
42704: AND
42705: PUSH
42706: LD_VAR 0 4
42710: PPUSH
42711: LD_INT 3
42713: PPUSH
42714: CALL_OW 275
42718: PUSH
42719: LD_VAR 0 5
42723: PUSH
42724: LD_INT 3
42726: ARRAY
42727: GREATEREQUAL
42728: AND
42729: ST_TO_ADDR
// end ;
42730: LD_VAR 0 3
42734: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
42735: LD_INT 0
42737: PPUSH
42738: PPUSH
42739: PPUSH
42740: PPUSH
42741: PPUSH
42742: PPUSH
42743: PPUSH
42744: PPUSH
42745: PPUSH
42746: PPUSH
// result := false ;
42747: LD_ADDR_VAR 0 6
42751: PUSH
42752: LD_INT 0
42754: ST_TO_ADDR
// if not base or not btype or not x or not y then
42755: LD_VAR 0 1
42759: NOT
42760: PUSH
42761: LD_VAR 0 2
42765: NOT
42766: OR
42767: PUSH
42768: LD_VAR 0 3
42772: NOT
42773: OR
42774: PUSH
42775: LD_VAR 0 4
42779: NOT
42780: OR
42781: IFFALSE 42785
// exit ;
42783: GO 43394
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
42785: LD_ADDR_VAR 0 12
42789: PUSH
42790: LD_VAR 0 2
42794: PPUSH
42795: LD_VAR 0 3
42799: PPUSH
42800: LD_VAR 0 4
42804: PPUSH
42805: LD_VAR 0 5
42809: PPUSH
42810: LD_VAR 0 1
42814: PUSH
42815: LD_INT 1
42817: ARRAY
42818: PPUSH
42819: CALL_OW 248
42823: PPUSH
42824: LD_INT 0
42826: PPUSH
42827: CALL 44231 0 6
42831: ST_TO_ADDR
// if not hexes then
42832: LD_VAR 0 12
42836: NOT
42837: IFFALSE 42841
// exit ;
42839: GO 43394
// for i = 1 to hexes do
42841: LD_ADDR_VAR 0 7
42845: PUSH
42846: DOUBLE
42847: LD_INT 1
42849: DEC
42850: ST_TO_ADDR
42851: LD_VAR 0 12
42855: PUSH
42856: FOR_TO
42857: IFFALSE 43392
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42859: LD_ADDR_VAR 0 11
42863: PUSH
42864: LD_VAR 0 12
42868: PUSH
42869: LD_VAR 0 7
42873: ARRAY
42874: PUSH
42875: LD_INT 1
42877: ARRAY
42878: PPUSH
42879: LD_VAR 0 12
42883: PUSH
42884: LD_VAR 0 7
42888: ARRAY
42889: PUSH
42890: LD_INT 2
42892: ARRAY
42893: PPUSH
42894: CALL_OW 428
42898: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42899: LD_VAR 0 12
42903: PUSH
42904: LD_VAR 0 7
42908: ARRAY
42909: PUSH
42910: LD_INT 1
42912: ARRAY
42913: PPUSH
42914: LD_VAR 0 12
42918: PUSH
42919: LD_VAR 0 7
42923: ARRAY
42924: PUSH
42925: LD_INT 2
42927: ARRAY
42928: PPUSH
42929: CALL_OW 351
42933: PUSH
42934: LD_VAR 0 12
42938: PUSH
42939: LD_VAR 0 7
42943: ARRAY
42944: PUSH
42945: LD_INT 1
42947: ARRAY
42948: PPUSH
42949: LD_VAR 0 12
42953: PUSH
42954: LD_VAR 0 7
42958: ARRAY
42959: PUSH
42960: LD_INT 2
42962: ARRAY
42963: PPUSH
42964: CALL_OW 488
42968: NOT
42969: OR
42970: PUSH
42971: LD_VAR 0 11
42975: PPUSH
42976: CALL_OW 247
42980: PUSH
42981: LD_INT 3
42983: EQUAL
42984: OR
42985: IFFALSE 42991
// exit ;
42987: POP
42988: POP
42989: GO 43394
// if not tmp or not tmp in base then
42991: LD_VAR 0 11
42995: NOT
42996: PUSH
42997: LD_VAR 0 11
43001: PUSH
43002: LD_VAR 0 1
43006: IN
43007: NOT
43008: OR
43009: IFFALSE 43013
// continue ;
43011: GO 42856
// result := true ;
43013: LD_ADDR_VAR 0 6
43017: PUSH
43018: LD_INT 1
43020: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43021: LD_ADDR_VAR 0 15
43025: PUSH
43026: LD_VAR 0 1
43030: PPUSH
43031: LD_INT 22
43033: PUSH
43034: LD_VAR 0 11
43038: PPUSH
43039: CALL_OW 255
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 2
43050: PUSH
43051: LD_INT 30
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 30
43063: PUSH
43064: LD_INT 1
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: LIST
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PPUSH
43080: CALL_OW 72
43084: ST_TO_ADDR
// if dep then
43085: LD_VAR 0 15
43089: IFFALSE 43225
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43091: LD_ADDR_VAR 0 14
43095: PUSH
43096: LD_VAR 0 15
43100: PUSH
43101: LD_INT 1
43103: ARRAY
43104: PPUSH
43105: CALL_OW 250
43109: PPUSH
43110: LD_VAR 0 15
43114: PUSH
43115: LD_INT 1
43117: ARRAY
43118: PPUSH
43119: CALL_OW 254
43123: PPUSH
43124: LD_INT 5
43126: PPUSH
43127: CALL_OW 272
43131: PUSH
43132: LD_VAR 0 15
43136: PUSH
43137: LD_INT 1
43139: ARRAY
43140: PPUSH
43141: CALL_OW 251
43145: PPUSH
43146: LD_VAR 0 15
43150: PUSH
43151: LD_INT 1
43153: ARRAY
43154: PPUSH
43155: CALL_OW 254
43159: PPUSH
43160: LD_INT 5
43162: PPUSH
43163: CALL_OW 273
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43172: LD_VAR 0 14
43176: PUSH
43177: LD_INT 1
43179: ARRAY
43180: PPUSH
43181: LD_VAR 0 14
43185: PUSH
43186: LD_INT 2
43188: ARRAY
43189: PPUSH
43190: CALL_OW 488
43194: IFFALSE 43225
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43196: LD_VAR 0 11
43200: PPUSH
43201: LD_VAR 0 14
43205: PUSH
43206: LD_INT 1
43208: ARRAY
43209: PPUSH
43210: LD_VAR 0 14
43214: PUSH
43215: LD_INT 2
43217: ARRAY
43218: PPUSH
43219: CALL_OW 111
// continue ;
43223: GO 42856
// end ; end ; r := GetDir ( tmp ) ;
43225: LD_ADDR_VAR 0 13
43229: PUSH
43230: LD_VAR 0 11
43234: PPUSH
43235: CALL_OW 254
43239: ST_TO_ADDR
// if r = 5 then
43240: LD_VAR 0 13
43244: PUSH
43245: LD_INT 5
43247: EQUAL
43248: IFFALSE 43258
// r := 0 ;
43250: LD_ADDR_VAR 0 13
43254: PUSH
43255: LD_INT 0
43257: ST_TO_ADDR
// for j = r to 5 do
43258: LD_ADDR_VAR 0 8
43262: PUSH
43263: DOUBLE
43264: LD_VAR 0 13
43268: DEC
43269: ST_TO_ADDR
43270: LD_INT 5
43272: PUSH
43273: FOR_TO
43274: IFFALSE 43388
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43276: LD_ADDR_VAR 0 9
43280: PUSH
43281: LD_VAR 0 11
43285: PPUSH
43286: CALL_OW 250
43290: PPUSH
43291: LD_VAR 0 8
43295: PPUSH
43296: LD_INT 2
43298: PPUSH
43299: CALL_OW 272
43303: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43304: LD_ADDR_VAR 0 10
43308: PUSH
43309: LD_VAR 0 11
43313: PPUSH
43314: CALL_OW 251
43318: PPUSH
43319: LD_VAR 0 8
43323: PPUSH
43324: LD_INT 2
43326: PPUSH
43327: CALL_OW 273
43331: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43332: LD_VAR 0 9
43336: PPUSH
43337: LD_VAR 0 10
43341: PPUSH
43342: CALL_OW 488
43346: PUSH
43347: LD_VAR 0 9
43351: PPUSH
43352: LD_VAR 0 10
43356: PPUSH
43357: CALL_OW 428
43361: NOT
43362: AND
43363: IFFALSE 43386
// begin ComMoveXY ( tmp , _x , _y ) ;
43365: LD_VAR 0 11
43369: PPUSH
43370: LD_VAR 0 9
43374: PPUSH
43375: LD_VAR 0 10
43379: PPUSH
43380: CALL_OW 111
// break ;
43384: GO 43388
// end ; end ;
43386: GO 43273
43388: POP
43389: POP
// end ;
43390: GO 42856
43392: POP
43393: POP
// end ;
43394: LD_VAR 0 6
43398: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
43399: LD_INT 0
43401: PPUSH
43402: PPUSH
43403: PPUSH
43404: PPUSH
43405: PPUSH
43406: PPUSH
43407: PPUSH
43408: PPUSH
43409: PPUSH
43410: PPUSH
// result := false ;
43411: LD_ADDR_VAR 0 6
43415: PUSH
43416: LD_INT 0
43418: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43419: LD_VAR 0 1
43423: NOT
43424: PUSH
43425: LD_VAR 0 1
43429: PPUSH
43430: CALL_OW 266
43434: PUSH
43435: LD_INT 0
43437: PUSH
43438: LD_INT 1
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: IN
43445: NOT
43446: OR
43447: PUSH
43448: LD_VAR 0 2
43452: NOT
43453: OR
43454: PUSH
43455: LD_VAR 0 5
43459: PUSH
43460: LD_INT 0
43462: PUSH
43463: LD_INT 1
43465: PUSH
43466: LD_INT 2
43468: PUSH
43469: LD_INT 3
43471: PUSH
43472: LD_INT 4
43474: PUSH
43475: LD_INT 5
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: IN
43486: NOT
43487: OR
43488: PUSH
43489: LD_VAR 0 3
43493: PPUSH
43494: LD_VAR 0 4
43498: PPUSH
43499: CALL_OW 488
43503: NOT
43504: OR
43505: IFFALSE 43509
// exit ;
43507: GO 44226
// pom := GetBase ( depot ) ;
43509: LD_ADDR_VAR 0 10
43513: PUSH
43514: LD_VAR 0 1
43518: PPUSH
43519: CALL_OW 274
43523: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43524: LD_ADDR_VAR 0 11
43528: PUSH
43529: LD_VAR 0 2
43533: PPUSH
43534: LD_VAR 0 1
43538: PPUSH
43539: CALL_OW 248
43543: PPUSH
43544: CALL_OW 450
43548: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43549: LD_VAR 0 10
43553: PPUSH
43554: LD_INT 1
43556: PPUSH
43557: CALL_OW 275
43561: PUSH
43562: LD_VAR 0 11
43566: PUSH
43567: LD_INT 1
43569: ARRAY
43570: GREATEREQUAL
43571: PUSH
43572: LD_VAR 0 10
43576: PPUSH
43577: LD_INT 2
43579: PPUSH
43580: CALL_OW 275
43584: PUSH
43585: LD_VAR 0 11
43589: PUSH
43590: LD_INT 2
43592: ARRAY
43593: GREATEREQUAL
43594: AND
43595: PUSH
43596: LD_VAR 0 10
43600: PPUSH
43601: LD_INT 3
43603: PPUSH
43604: CALL_OW 275
43608: PUSH
43609: LD_VAR 0 11
43613: PUSH
43614: LD_INT 3
43616: ARRAY
43617: GREATEREQUAL
43618: AND
43619: NOT
43620: IFFALSE 43624
// exit ;
43622: GO 44226
// if GetBType ( depot ) = b_depot then
43624: LD_VAR 0 1
43628: PPUSH
43629: CALL_OW 266
43633: PUSH
43634: LD_INT 0
43636: EQUAL
43637: IFFALSE 43649
// dist := 28 else
43639: LD_ADDR_VAR 0 14
43643: PUSH
43644: LD_INT 28
43646: ST_TO_ADDR
43647: GO 43657
// dist := 36 ;
43649: LD_ADDR_VAR 0 14
43653: PUSH
43654: LD_INT 36
43656: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43657: LD_VAR 0 1
43661: PPUSH
43662: LD_VAR 0 3
43666: PPUSH
43667: LD_VAR 0 4
43671: PPUSH
43672: CALL_OW 297
43676: PUSH
43677: LD_VAR 0 14
43681: GREATER
43682: IFFALSE 43686
// exit ;
43684: GO 44226
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43686: LD_ADDR_VAR 0 12
43690: PUSH
43691: LD_VAR 0 2
43695: PPUSH
43696: LD_VAR 0 3
43700: PPUSH
43701: LD_VAR 0 4
43705: PPUSH
43706: LD_VAR 0 5
43710: PPUSH
43711: LD_VAR 0 1
43715: PPUSH
43716: CALL_OW 248
43720: PPUSH
43721: LD_INT 0
43723: PPUSH
43724: CALL 44231 0 6
43728: ST_TO_ADDR
// if not hexes then
43729: LD_VAR 0 12
43733: NOT
43734: IFFALSE 43738
// exit ;
43736: GO 44226
// hex := GetHexInfo ( x , y ) ;
43738: LD_ADDR_VAR 0 15
43742: PUSH
43743: LD_VAR 0 3
43747: PPUSH
43748: LD_VAR 0 4
43752: PPUSH
43753: CALL_OW 546
43757: ST_TO_ADDR
// if hex [ 1 ] then
43758: LD_VAR 0 15
43762: PUSH
43763: LD_INT 1
43765: ARRAY
43766: IFFALSE 43770
// exit ;
43768: GO 44226
// height := hex [ 2 ] ;
43770: LD_ADDR_VAR 0 13
43774: PUSH
43775: LD_VAR 0 15
43779: PUSH
43780: LD_INT 2
43782: ARRAY
43783: ST_TO_ADDR
// for i = 1 to hexes do
43784: LD_ADDR_VAR 0 7
43788: PUSH
43789: DOUBLE
43790: LD_INT 1
43792: DEC
43793: ST_TO_ADDR
43794: LD_VAR 0 12
43798: PUSH
43799: FOR_TO
43800: IFFALSE 44130
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43802: LD_VAR 0 12
43806: PUSH
43807: LD_VAR 0 7
43811: ARRAY
43812: PUSH
43813: LD_INT 1
43815: ARRAY
43816: PPUSH
43817: LD_VAR 0 12
43821: PUSH
43822: LD_VAR 0 7
43826: ARRAY
43827: PUSH
43828: LD_INT 2
43830: ARRAY
43831: PPUSH
43832: CALL_OW 488
43836: NOT
43837: PUSH
43838: LD_VAR 0 12
43842: PUSH
43843: LD_VAR 0 7
43847: ARRAY
43848: PUSH
43849: LD_INT 1
43851: ARRAY
43852: PPUSH
43853: LD_VAR 0 12
43857: PUSH
43858: LD_VAR 0 7
43862: ARRAY
43863: PUSH
43864: LD_INT 2
43866: ARRAY
43867: PPUSH
43868: CALL_OW 428
43872: PUSH
43873: LD_INT 0
43875: GREATER
43876: OR
43877: PUSH
43878: LD_VAR 0 12
43882: PUSH
43883: LD_VAR 0 7
43887: ARRAY
43888: PUSH
43889: LD_INT 1
43891: ARRAY
43892: PPUSH
43893: LD_VAR 0 12
43897: PUSH
43898: LD_VAR 0 7
43902: ARRAY
43903: PUSH
43904: LD_INT 2
43906: ARRAY
43907: PPUSH
43908: CALL_OW 351
43912: OR
43913: IFFALSE 43919
// exit ;
43915: POP
43916: POP
43917: GO 44226
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43919: LD_ADDR_VAR 0 8
43923: PUSH
43924: LD_VAR 0 12
43928: PUSH
43929: LD_VAR 0 7
43933: ARRAY
43934: PUSH
43935: LD_INT 1
43937: ARRAY
43938: PPUSH
43939: LD_VAR 0 12
43943: PUSH
43944: LD_VAR 0 7
43948: ARRAY
43949: PUSH
43950: LD_INT 2
43952: ARRAY
43953: PPUSH
43954: CALL_OW 546
43958: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43959: LD_VAR 0 8
43963: PUSH
43964: LD_INT 1
43966: ARRAY
43967: PUSH
43968: LD_VAR 0 8
43972: PUSH
43973: LD_INT 2
43975: ARRAY
43976: PUSH
43977: LD_VAR 0 13
43981: PUSH
43982: LD_INT 2
43984: PLUS
43985: GREATER
43986: OR
43987: PUSH
43988: LD_VAR 0 8
43992: PUSH
43993: LD_INT 2
43995: ARRAY
43996: PUSH
43997: LD_VAR 0 13
44001: PUSH
44002: LD_INT 2
44004: MINUS
44005: LESS
44006: OR
44007: PUSH
44008: LD_VAR 0 8
44012: PUSH
44013: LD_INT 3
44015: ARRAY
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: LD_INT 8
44022: PUSH
44023: LD_INT 9
44025: PUSH
44026: LD_INT 10
44028: PUSH
44029: LD_INT 11
44031: PUSH
44032: LD_INT 12
44034: PUSH
44035: LD_INT 13
44037: PUSH
44038: LD_INT 16
44040: PUSH
44041: LD_INT 17
44043: PUSH
44044: LD_INT 18
44046: PUSH
44047: LD_INT 19
44049: PUSH
44050: LD_INT 20
44052: PUSH
44053: LD_INT 21
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: IN
44071: NOT
44072: OR
44073: PUSH
44074: LD_VAR 0 8
44078: PUSH
44079: LD_INT 5
44081: ARRAY
44082: NOT
44083: OR
44084: PUSH
44085: LD_VAR 0 8
44089: PUSH
44090: LD_INT 6
44092: ARRAY
44093: PUSH
44094: LD_INT 1
44096: PUSH
44097: LD_INT 2
44099: PUSH
44100: LD_INT 7
44102: PUSH
44103: LD_INT 9
44105: PUSH
44106: LD_INT 10
44108: PUSH
44109: LD_INT 11
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: IN
44120: NOT
44121: OR
44122: IFFALSE 44128
// exit ;
44124: POP
44125: POP
44126: GO 44226
// end ;
44128: GO 43799
44130: POP
44131: POP
// side := GetSide ( depot ) ;
44132: LD_ADDR_VAR 0 9
44136: PUSH
44137: LD_VAR 0 1
44141: PPUSH
44142: CALL_OW 255
44146: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44147: LD_VAR 0 9
44151: PPUSH
44152: LD_VAR 0 3
44156: PPUSH
44157: LD_VAR 0 4
44161: PPUSH
44162: LD_INT 20
44164: PPUSH
44165: CALL 36880 0 4
44169: PUSH
44170: LD_INT 4
44172: ARRAY
44173: IFFALSE 44177
// exit ;
44175: GO 44226
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44177: LD_VAR 0 2
44181: PUSH
44182: LD_INT 29
44184: PUSH
44185: LD_INT 30
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: IN
44192: PUSH
44193: LD_VAR 0 3
44197: PPUSH
44198: LD_VAR 0 4
44202: PPUSH
44203: LD_VAR 0 9
44207: PPUSH
44208: CALL_OW 440
44212: NOT
44213: AND
44214: IFFALSE 44218
// exit ;
44216: GO 44226
// result := true ;
44218: LD_ADDR_VAR 0 6
44222: PUSH
44223: LD_INT 1
44225: ST_TO_ADDR
// end ;
44226: LD_VAR 0 6
44230: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44231: LD_INT 0
44233: PPUSH
44234: PPUSH
44235: PPUSH
44236: PPUSH
44237: PPUSH
44238: PPUSH
44239: PPUSH
44240: PPUSH
44241: PPUSH
44242: PPUSH
44243: PPUSH
44244: PPUSH
44245: PPUSH
44246: PPUSH
44247: PPUSH
44248: PPUSH
44249: PPUSH
44250: PPUSH
44251: PPUSH
44252: PPUSH
44253: PPUSH
44254: PPUSH
44255: PPUSH
44256: PPUSH
44257: PPUSH
44258: PPUSH
44259: PPUSH
44260: PPUSH
44261: PPUSH
44262: PPUSH
44263: PPUSH
44264: PPUSH
44265: PPUSH
44266: PPUSH
44267: PPUSH
44268: PPUSH
44269: PPUSH
44270: PPUSH
44271: PPUSH
44272: PPUSH
44273: PPUSH
44274: PPUSH
44275: PPUSH
44276: PPUSH
44277: PPUSH
44278: PPUSH
44279: PPUSH
44280: PPUSH
44281: PPUSH
44282: PPUSH
44283: PPUSH
44284: PPUSH
44285: PPUSH
44286: PPUSH
44287: PPUSH
44288: PPUSH
44289: PPUSH
44290: PPUSH
// result = [ ] ;
44291: LD_ADDR_VAR 0 7
44295: PUSH
44296: EMPTY
44297: ST_TO_ADDR
// temp_list = [ ] ;
44298: LD_ADDR_VAR 0 9
44302: PUSH
44303: EMPTY
44304: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44305: LD_VAR 0 4
44309: PUSH
44310: LD_INT 0
44312: PUSH
44313: LD_INT 1
44315: PUSH
44316: LD_INT 2
44318: PUSH
44319: LD_INT 3
44321: PUSH
44322: LD_INT 4
44324: PUSH
44325: LD_INT 5
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: IN
44336: NOT
44337: PUSH
44338: LD_VAR 0 1
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: IN
44353: PUSH
44354: LD_VAR 0 5
44358: PUSH
44359: LD_INT 1
44361: PUSH
44362: LD_INT 2
44364: PUSH
44365: LD_INT 3
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: LIST
44372: IN
44373: NOT
44374: AND
44375: OR
44376: IFFALSE 44380
// exit ;
44378: GO 62771
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44380: LD_VAR 0 1
44384: PUSH
44385: LD_INT 6
44387: PUSH
44388: LD_INT 7
44390: PUSH
44391: LD_INT 8
44393: PUSH
44394: LD_INT 13
44396: PUSH
44397: LD_INT 12
44399: PUSH
44400: LD_INT 15
44402: PUSH
44403: LD_INT 11
44405: PUSH
44406: LD_INT 14
44408: PUSH
44409: LD_INT 10
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: IN
44423: IFFALSE 44433
// btype = b_lab ;
44425: LD_ADDR_VAR 0 1
44429: PUSH
44430: LD_INT 6
44432: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44433: LD_VAR 0 6
44437: PUSH
44438: LD_INT 0
44440: PUSH
44441: LD_INT 1
44443: PUSH
44444: LD_INT 2
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: LIST
44451: IN
44452: NOT
44453: PUSH
44454: LD_VAR 0 1
44458: PUSH
44459: LD_INT 0
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: LD_INT 2
44467: PUSH
44468: LD_INT 3
44470: PUSH
44471: LD_INT 6
44473: PUSH
44474: LD_INT 36
44476: PUSH
44477: LD_INT 4
44479: PUSH
44480: LD_INT 5
44482: PUSH
44483: LD_INT 31
44485: PUSH
44486: LD_INT 32
44488: PUSH
44489: LD_INT 33
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: IN
44505: NOT
44506: PUSH
44507: LD_VAR 0 6
44511: PUSH
44512: LD_INT 1
44514: EQUAL
44515: AND
44516: OR
44517: PUSH
44518: LD_VAR 0 1
44522: PUSH
44523: LD_INT 2
44525: PUSH
44526: LD_INT 3
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: IN
44533: NOT
44534: PUSH
44535: LD_VAR 0 6
44539: PUSH
44540: LD_INT 2
44542: EQUAL
44543: AND
44544: OR
44545: IFFALSE 44555
// mode = 0 ;
44547: LD_ADDR_VAR 0 6
44551: PUSH
44552: LD_INT 0
44554: ST_TO_ADDR
// case mode of 0 :
44555: LD_VAR 0 6
44559: PUSH
44560: LD_INT 0
44562: DOUBLE
44563: EQUAL
44564: IFTRUE 44568
44566: GO 56021
44568: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44569: LD_ADDR_VAR 0 11
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 0
44586: PUSH
44587: LD_INT 1
44589: NEG
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 1
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 1
44607: PUSH
44608: LD_INT 1
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 0
44617: PUSH
44618: LD_INT 1
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 1
44627: NEG
44628: PUSH
44629: LD_INT 0
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: LD_INT 1
44642: NEG
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 1
44650: NEG
44651: PUSH
44652: LD_INT 2
44654: NEG
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 0
44662: PUSH
44663: LD_INT 2
44665: NEG
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: LD_INT 1
44676: NEG
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 1
44684: PUSH
44685: LD_INT 2
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: LD_INT 2
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 1
44704: NEG
44705: PUSH
44706: LD_INT 1
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 1
44715: PUSH
44716: LD_INT 3
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: LD_INT 3
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 1
44735: NEG
44736: PUSH
44737: LD_INT 2
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44762: LD_ADDR_VAR 0 12
44766: PUSH
44767: LD_INT 0
44769: PUSH
44770: LD_INT 0
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: LD_INT 1
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 1
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 1
44800: PUSH
44801: LD_INT 1
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 0
44810: PUSH
44811: LD_INT 1
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 1
44820: NEG
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 1
44831: NEG
44832: PUSH
44833: LD_INT 1
44835: NEG
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 1
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 2
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 2
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 1
44874: NEG
44875: PUSH
44876: LD_INT 1
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 2
44885: NEG
44886: PUSH
44887: LD_INT 0
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 2
44896: NEG
44897: PUSH
44898: LD_INT 1
44900: NEG
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 2
44908: NEG
44909: PUSH
44910: LD_INT 1
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 3
44919: NEG
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 3
44930: NEG
44931: PUSH
44932: LD_INT 1
44934: NEG
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44958: LD_ADDR_VAR 0 13
44962: PUSH
44963: LD_INT 0
44965: PUSH
44966: LD_INT 0
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 0
44975: PUSH
44976: LD_INT 1
44978: NEG
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: LD_INT 0
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 1
44996: PUSH
44997: LD_INT 1
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 0
45006: PUSH
45007: LD_INT 1
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: LD_INT 0
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 1
45027: NEG
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: LD_INT 2
45043: NEG
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 2
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 2
45061: PUSH
45062: LD_INT 2
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: LD_INT 2
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 2
45081: NEG
45082: PUSH
45083: LD_INT 1
45085: NEG
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 2
45093: NEG
45094: PUSH
45095: LD_INT 2
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 2
45105: NEG
45106: PUSH
45107: LD_INT 3
45109: NEG
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 3
45117: NEG
45118: PUSH
45119: LD_INT 2
45121: NEG
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 3
45129: NEG
45130: PUSH
45131: LD_INT 3
45133: NEG
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45157: LD_ADDR_VAR 0 14
45161: PUSH
45162: LD_INT 0
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 0
45174: PUSH
45175: LD_INT 1
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: LD_INT 0
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: LD_INT 1
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 1
45226: NEG
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: LD_INT 2
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: LD_INT 2
45253: NEG
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 1
45261: PUSH
45262: LD_INT 1
45264: NEG
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 1
45272: PUSH
45273: LD_INT 2
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: LD_INT 2
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: NEG
45293: PUSH
45294: LD_INT 1
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 1
45303: NEG
45304: PUSH
45305: LD_INT 3
45307: NEG
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 0
45315: PUSH
45316: LD_INT 3
45318: NEG
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 1
45326: PUSH
45327: LD_INT 2
45329: NEG
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45353: LD_ADDR_VAR 0 15
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 1
45381: PUSH
45382: LD_INT 0
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: LD_INT 1
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: NEG
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: PUSH
45435: LD_INT 1
45437: NEG
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 2
45445: PUSH
45446: LD_INT 0
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 2
45455: PUSH
45456: LD_INT 1
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: NEG
45466: PUSH
45467: LD_INT 1
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 2
45476: NEG
45477: PUSH
45478: LD_INT 0
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 2
45487: NEG
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 2
45499: PUSH
45500: LD_INT 1
45502: NEG
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 3
45510: PUSH
45511: LD_INT 0
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 3
45520: PUSH
45521: LD_INT 1
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45546: LD_ADDR_VAR 0 16
45550: PUSH
45551: LD_INT 0
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 0
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 1
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 1
45584: PUSH
45585: LD_INT 1
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: NEG
45605: PUSH
45606: LD_INT 0
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 1
45615: NEG
45616: PUSH
45617: LD_INT 1
45619: NEG
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 1
45627: NEG
45628: PUSH
45629: LD_INT 2
45631: NEG
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 2
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 2
45649: PUSH
45650: LD_INT 2
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 1
45659: PUSH
45660: LD_INT 2
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 2
45669: NEG
45670: PUSH
45671: LD_INT 1
45673: NEG
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 2
45681: NEG
45682: PUSH
45683: LD_INT 2
45685: NEG
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 3
45693: PUSH
45694: LD_INT 2
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 3
45703: PUSH
45704: LD_INT 3
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 2
45713: PUSH
45714: LD_INT 3
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45739: LD_ADDR_VAR 0 17
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: LD_INT 0
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: PUSH
45778: LD_INT 1
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: LD_INT 1
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: LD_INT 0
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 1
45808: NEG
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 1
45820: NEG
45821: PUSH
45822: LD_INT 2
45824: NEG
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: LD_INT 2
45835: NEG
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 1
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 2
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 2
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 2
45874: PUSH
45875: LD_INT 2
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: LD_INT 2
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 0
45894: PUSH
45895: LD_INT 2
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 1
45904: NEG
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 2
45915: NEG
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 2
45926: NEG
45927: PUSH
45928: LD_INT 1
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 2
45938: NEG
45939: PUSH
45940: LD_INT 2
45942: NEG
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45969: LD_ADDR_VAR 0 18
45973: PUSH
45974: LD_INT 0
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: LD_INT 1
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 1
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 1
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: LD_INT 0
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 1
46038: NEG
46039: PUSH
46040: LD_INT 1
46042: NEG
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: LD_INT 2
46054: NEG
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 0
46062: PUSH
46063: LD_INT 2
46065: NEG
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 1
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 2
46084: PUSH
46085: LD_INT 0
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 2
46094: PUSH
46095: LD_INT 1
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 2
46104: PUSH
46105: LD_INT 2
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 1
46114: PUSH
46115: LD_INT 2
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 0
46124: PUSH
46125: LD_INT 2
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: NEG
46135: PUSH
46136: LD_INT 1
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 2
46145: NEG
46146: PUSH
46147: LD_INT 0
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 2
46156: NEG
46157: PUSH
46158: LD_INT 1
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 2
46168: NEG
46169: PUSH
46170: LD_INT 2
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46199: LD_ADDR_VAR 0 19
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 0
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: PUSH
46228: LD_INT 0
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: LD_INT 1
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: LD_INT 0
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 1
46268: NEG
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: LD_INT 2
46284: NEG
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 0
46292: PUSH
46293: LD_INT 2
46295: NEG
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: LD_INT 1
46306: NEG
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 2
46314: PUSH
46315: LD_INT 0
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 2
46324: PUSH
46325: LD_INT 1
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 2
46334: PUSH
46335: LD_INT 2
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 1
46344: PUSH
46345: LD_INT 2
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: LD_INT 2
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 1
46364: NEG
46365: PUSH
46366: LD_INT 1
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 2
46375: NEG
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 2
46386: NEG
46387: PUSH
46388: LD_INT 1
46390: NEG
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 2
46398: NEG
46399: PUSH
46400: LD_INT 2
46402: NEG
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46429: LD_ADDR_VAR 0 20
46433: PUSH
46434: LD_INT 0
46436: PUSH
46437: LD_INT 0
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 0
46446: PUSH
46447: LD_INT 1
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 1
46457: PUSH
46458: LD_INT 0
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 1
46467: PUSH
46468: LD_INT 1
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 0
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 1
46487: NEG
46488: PUSH
46489: LD_INT 0
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 1
46498: NEG
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: LD_INT 2
46514: NEG
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 0
46522: PUSH
46523: LD_INT 2
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: PUSH
46534: LD_INT 1
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 2
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 2
46554: PUSH
46555: LD_INT 1
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 2
46564: PUSH
46565: LD_INT 2
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 1
46574: PUSH
46575: LD_INT 2
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 0
46584: PUSH
46585: LD_INT 2
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 1
46594: NEG
46595: PUSH
46596: LD_INT 1
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 2
46605: NEG
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 2
46616: NEG
46617: PUSH
46618: LD_INT 1
46620: NEG
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 2
46628: NEG
46629: PUSH
46630: LD_INT 2
46632: NEG
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46659: LD_ADDR_VAR 0 21
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: LD_INT 0
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: PUSH
46698: LD_INT 1
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 1
46717: NEG
46718: PUSH
46719: LD_INT 0
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 1
46740: NEG
46741: PUSH
46742: LD_INT 2
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: LD_INT 2
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 1
46763: PUSH
46764: LD_INT 1
46766: NEG
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 2
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 2
46784: PUSH
46785: LD_INT 1
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 2
46794: PUSH
46795: LD_INT 2
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 1
46804: PUSH
46805: LD_INT 2
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 0
46814: PUSH
46815: LD_INT 2
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: NEG
46825: PUSH
46826: LD_INT 1
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 2
46835: NEG
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 2
46846: NEG
46847: PUSH
46848: LD_INT 1
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 2
46858: NEG
46859: PUSH
46860: LD_INT 2
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46889: LD_ADDR_VAR 0 22
46893: PUSH
46894: LD_INT 0
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 1
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 1
46927: PUSH
46928: LD_INT 1
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 1
46947: NEG
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 1
46958: NEG
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 1
46970: NEG
46971: PUSH
46972: LD_INT 2
46974: NEG
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 0
46982: PUSH
46983: LD_INT 2
46985: NEG
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 1
46993: PUSH
46994: LD_INT 1
46996: NEG
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 2
47004: PUSH
47005: LD_INT 0
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 2
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 2
47024: PUSH
47025: LD_INT 2
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 1
47034: PUSH
47035: LD_INT 2
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 0
47044: PUSH
47045: LD_INT 2
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 1
47054: NEG
47055: PUSH
47056: LD_INT 1
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 2
47065: NEG
47066: PUSH
47067: LD_INT 0
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 2
47076: NEG
47077: PUSH
47078: LD_INT 1
47080: NEG
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 2
47088: NEG
47089: PUSH
47090: LD_INT 2
47092: NEG
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47119: LD_ADDR_VAR 0 23
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 1
47157: PUSH
47158: LD_INT 1
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 0
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 1
47177: NEG
47178: PUSH
47179: LD_INT 0
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: NEG
47189: PUSH
47190: LD_INT 1
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: LD_INT 2
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 0
47212: PUSH
47213: LD_INT 2
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: LD_INT 1
47226: NEG
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 2
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 2
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 2
47254: PUSH
47255: LD_INT 2
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 1
47264: PUSH
47265: LD_INT 2
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 0
47274: PUSH
47275: LD_INT 2
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: LD_INT 1
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 2
47295: NEG
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 2
47306: NEG
47307: PUSH
47308: LD_INT 1
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 2
47318: NEG
47319: PUSH
47320: LD_INT 2
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 2
47330: NEG
47331: PUSH
47332: LD_INT 3
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 1
47342: NEG
47343: PUSH
47344: LD_INT 3
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 1
47354: PUSH
47355: LD_INT 2
47357: NEG
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 2
47365: PUSH
47366: LD_INT 1
47368: NEG
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47399: LD_ADDR_VAR 0 24
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: LD_INT 0
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 0
47416: PUSH
47417: LD_INT 1
47419: NEG
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 1
47437: PUSH
47438: LD_INT 1
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: LD_INT 1
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 1
47457: NEG
47458: PUSH
47459: LD_INT 0
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: NEG
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 1
47480: NEG
47481: PUSH
47482: LD_INT 2
47484: NEG
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: LD_INT 2
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 1
47503: PUSH
47504: LD_INT 1
47506: NEG
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 2
47514: PUSH
47515: LD_INT 0
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 2
47524: PUSH
47525: LD_INT 1
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 2
47534: PUSH
47535: LD_INT 2
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 1
47544: PUSH
47545: LD_INT 2
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 0
47554: PUSH
47555: LD_INT 2
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 2
47575: NEG
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 2
47586: NEG
47587: PUSH
47588: LD_INT 1
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 2
47598: NEG
47599: PUSH
47600: LD_INT 2
47602: NEG
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: LD_INT 2
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 2
47621: PUSH
47622: LD_INT 1
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 3
47632: PUSH
47633: LD_INT 1
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 3
47642: PUSH
47643: LD_INT 2
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47675: LD_ADDR_VAR 0 25
47679: PUSH
47680: LD_INT 0
47682: PUSH
47683: LD_INT 0
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 0
47692: PUSH
47693: LD_INT 1
47695: NEG
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 1
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: LD_INT 1
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 1
47733: NEG
47734: PUSH
47735: LD_INT 0
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 1
47744: NEG
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: NEG
47757: PUSH
47758: LD_INT 2
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 0
47768: PUSH
47769: LD_INT 2
47771: NEG
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: LD_INT 1
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 2
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 2
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 2
47810: PUSH
47811: LD_INT 2
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: PUSH
47821: LD_INT 2
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 0
47830: PUSH
47831: LD_INT 2
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 1
47840: NEG
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 2
47851: NEG
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 2
47862: NEG
47863: PUSH
47864: LD_INT 1
47866: NEG
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 2
47874: NEG
47875: PUSH
47876: LD_INT 2
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 3
47886: PUSH
47887: LD_INT 1
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 3
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 2
47906: PUSH
47907: LD_INT 3
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 1
47916: PUSH
47917: LD_INT 3
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47949: LD_ADDR_VAR 0 26
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: LD_INT 0
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 0
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: LD_INT 1
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 0
47997: PUSH
47998: LD_INT 1
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: LD_INT 1
48022: NEG
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 1
48030: NEG
48031: PUSH
48032: LD_INT 2
48034: NEG
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: LD_INT 2
48045: NEG
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 1
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 2
48064: PUSH
48065: LD_INT 0
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 2
48074: PUSH
48075: LD_INT 1
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 2
48084: PUSH
48085: LD_INT 2
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: LD_INT 2
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: LD_INT 2
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 1
48114: NEG
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 2
48125: NEG
48126: PUSH
48127: LD_INT 0
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 2
48136: NEG
48137: PUSH
48138: LD_INT 1
48140: NEG
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 2
48148: NEG
48149: PUSH
48150: LD_INT 2
48152: NEG
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 2
48160: PUSH
48161: LD_INT 3
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: LD_INT 3
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 1
48180: NEG
48181: PUSH
48182: LD_INT 2
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 2
48191: NEG
48192: PUSH
48193: LD_INT 1
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48225: LD_ADDR_VAR 0 27
48229: PUSH
48230: LD_INT 0
48232: PUSH
48233: LD_INT 0
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 0
48242: PUSH
48243: LD_INT 1
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: LD_INT 1
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 0
48273: PUSH
48274: LD_INT 1
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: NEG
48284: PUSH
48285: LD_INT 0
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 1
48294: NEG
48295: PUSH
48296: LD_INT 1
48298: NEG
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 1
48306: NEG
48307: PUSH
48308: LD_INT 2
48310: NEG
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: LD_INT 2
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: LD_INT 1
48332: NEG
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 2
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 2
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 2
48360: PUSH
48361: LD_INT 2
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: PUSH
48371: LD_INT 2
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 0
48380: PUSH
48381: LD_INT 2
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 1
48390: NEG
48391: PUSH
48392: LD_INT 1
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 2
48401: NEG
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 2
48412: NEG
48413: PUSH
48414: LD_INT 1
48416: NEG
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 2
48424: NEG
48425: PUSH
48426: LD_INT 2
48428: NEG
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 1
48436: NEG
48437: PUSH
48438: LD_INT 2
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 2
48447: NEG
48448: PUSH
48449: LD_INT 1
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 3
48458: NEG
48459: PUSH
48460: LD_INT 1
48462: NEG
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 3
48470: NEG
48471: PUSH
48472: LD_INT 2
48474: NEG
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48505: LD_ADDR_VAR 0 28
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: LD_INT 1
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: LD_INT 1
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 1
48563: NEG
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 1
48574: NEG
48575: PUSH
48576: LD_INT 1
48578: NEG
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: LD_INT 2
48590: NEG
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: LD_INT 2
48601: NEG
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: LD_INT 1
48612: NEG
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 2
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 2
48630: PUSH
48631: LD_INT 1
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 2
48640: PUSH
48641: LD_INT 2
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: LD_INT 2
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: LD_INT 2
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 1
48670: NEG
48671: PUSH
48672: LD_INT 1
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 2
48681: NEG
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 2
48692: NEG
48693: PUSH
48694: LD_INT 1
48696: NEG
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 2
48704: NEG
48705: PUSH
48706: LD_INT 2
48708: NEG
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 2
48716: NEG
48717: PUSH
48718: LD_INT 3
48720: NEG
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 1
48728: NEG
48729: PUSH
48730: LD_INT 3
48732: NEG
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 3
48740: NEG
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 3
48752: NEG
48753: PUSH
48754: LD_INT 2
48756: NEG
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48787: LD_ADDR_VAR 0 29
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: LD_INT 1
48807: NEG
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 1
48815: PUSH
48816: LD_INT 0
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: LD_INT 1
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: LD_INT 1
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: LD_INT 0
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 1
48856: NEG
48857: PUSH
48858: LD_INT 1
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: NEG
48869: PUSH
48870: LD_INT 2
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 0
48880: PUSH
48881: LD_INT 2
48883: NEG
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: LD_INT 1
48894: NEG
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 2
48902: PUSH
48903: LD_INT 0
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 2
48912: PUSH
48913: LD_INT 1
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 1
48922: PUSH
48923: LD_INT 2
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: LD_INT 2
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 1
48942: NEG
48943: PUSH
48944: LD_INT 1
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 2
48953: NEG
48954: PUSH
48955: LD_INT 1
48957: NEG
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 2
48965: NEG
48966: PUSH
48967: LD_INT 2
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 2
48977: NEG
48978: PUSH
48979: LD_INT 3
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 2
48989: PUSH
48990: LD_INT 1
48992: NEG
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 3
49000: PUSH
49001: LD_INT 1
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 1
49010: PUSH
49011: LD_INT 3
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: LD_INT 2
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 3
49031: NEG
49032: PUSH
49033: LD_INT 2
49035: NEG
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49066: LD_ADDR_VAR 0 30
49070: PUSH
49071: LD_INT 0
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 0
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: LD_INT 1
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: LD_INT 1
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 1
49124: NEG
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 1
49135: NEG
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 1
49147: NEG
49148: PUSH
49149: LD_INT 2
49151: NEG
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: LD_INT 2
49162: NEG
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: LD_INT 1
49173: NEG
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 2
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 2
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 2
49201: PUSH
49202: LD_INT 2
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: LD_INT 2
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 1
49221: NEG
49222: PUSH
49223: LD_INT 1
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 2
49232: NEG
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 2
49243: NEG
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 1
49255: NEG
49256: PUSH
49257: LD_INT 3
49259: NEG
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 1
49267: PUSH
49268: LD_INT 2
49270: NEG
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 3
49278: PUSH
49279: LD_INT 2
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 2
49288: PUSH
49289: LD_INT 3
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 2
49298: NEG
49299: PUSH
49300: LD_INT 1
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 3
49309: NEG
49310: PUSH
49311: LD_INT 1
49313: NEG
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49344: LD_ADDR_VAR 0 31
49348: PUSH
49349: LD_INT 0
49351: PUSH
49352: LD_INT 0
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 1
49382: PUSH
49383: LD_INT 1
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 1
49402: NEG
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 1
49413: NEG
49414: PUSH
49415: LD_INT 1
49417: NEG
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 1
49425: NEG
49426: PUSH
49427: LD_INT 2
49429: NEG
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 1
49437: PUSH
49438: LD_INT 1
49440: NEG
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 2
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 2
49458: PUSH
49459: LD_INT 1
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 2
49468: PUSH
49469: LD_INT 2
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 1
49478: PUSH
49479: LD_INT 2
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: LD_INT 2
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: LD_INT 1
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 2
49509: NEG
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 2
49521: NEG
49522: PUSH
49523: LD_INT 2
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 2
49533: NEG
49534: PUSH
49535: LD_INT 3
49537: NEG
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 2
49545: PUSH
49546: LD_INT 1
49548: NEG
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 3
49556: PUSH
49557: LD_INT 1
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 1
49566: PUSH
49567: LD_INT 3
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 1
49576: NEG
49577: PUSH
49578: LD_INT 2
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 3
49587: NEG
49588: PUSH
49589: LD_INT 2
49591: NEG
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49622: LD_ADDR_VAR 0 32
49626: PUSH
49627: LD_INT 0
49629: PUSH
49630: LD_INT 0
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: LD_INT 1
49642: NEG
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 1
49650: PUSH
49651: LD_INT 0
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: LD_INT 1
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 0
49670: PUSH
49671: LD_INT 1
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 1
49680: NEG
49681: PUSH
49682: LD_INT 0
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 1
49691: NEG
49692: PUSH
49693: LD_INT 1
49695: NEG
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 1
49703: NEG
49704: PUSH
49705: LD_INT 2
49707: NEG
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: LD_INT 2
49718: NEG
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 1
49726: PUSH
49727: LD_INT 1
49729: NEG
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 2
49737: PUSH
49738: LD_INT 1
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 2
49747: PUSH
49748: LD_INT 2
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: LD_INT 2
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: LD_INT 2
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 1
49777: NEG
49778: PUSH
49779: LD_INT 1
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 2
49788: NEG
49789: PUSH
49790: LD_INT 0
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 2
49799: NEG
49800: PUSH
49801: LD_INT 1
49803: NEG
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 1
49811: NEG
49812: PUSH
49813: LD_INT 3
49815: NEG
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 1
49823: PUSH
49824: LD_INT 2
49826: NEG
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 3
49834: PUSH
49835: LD_INT 2
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: LD_INT 3
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 2
49854: NEG
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 3
49865: NEG
49866: PUSH
49867: LD_INT 1
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49900: LD_ADDR_VAR 0 33
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: LD_INT 1
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 1
49928: PUSH
49929: LD_INT 0
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: PUSH
49939: LD_INT 1
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 0
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 1
49958: NEG
49959: PUSH
49960: LD_INT 0
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 1
49969: NEG
49970: PUSH
49971: LD_INT 1
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: NEG
49982: PUSH
49983: LD_INT 2
49985: NEG
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 1
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 2
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 2
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: LD_INT 2
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: LD_INT 2
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: LD_INT 1
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 2
50055: NEG
50056: PUSH
50057: LD_INT 0
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 2
50066: NEG
50067: PUSH
50068: LD_INT 1
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 2
50078: NEG
50079: PUSH
50080: LD_INT 2
50082: NEG
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 2
50090: NEG
50091: PUSH
50092: LD_INT 3
50094: NEG
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 2
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 3
50113: PUSH
50114: LD_INT 1
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: LD_INT 3
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 1
50133: NEG
50134: PUSH
50135: LD_INT 2
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 3
50144: NEG
50145: PUSH
50146: LD_INT 2
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50179: LD_ADDR_VAR 0 34
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: LD_INT 0
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 0
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: LD_INT 0
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: LD_INT 1
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: LD_INT 1
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 1
50237: NEG
50238: PUSH
50239: LD_INT 0
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: LD_INT 1
50252: NEG
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: LD_INT 2
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: LD_INT 2
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 2
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 2
50304: PUSH
50305: LD_INT 2
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: LD_INT 2
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: LD_INT 1
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 2
50335: NEG
50336: PUSH
50337: LD_INT 0
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 2
50346: NEG
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 2
50358: NEG
50359: PUSH
50360: LD_INT 2
50362: NEG
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 1
50370: NEG
50371: PUSH
50372: LD_INT 3
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: LD_INT 2
50385: NEG
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 3
50393: PUSH
50394: LD_INT 2
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 2
50403: PUSH
50404: LD_INT 3
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 2
50413: NEG
50414: PUSH
50415: LD_INT 1
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 3
50424: NEG
50425: PUSH
50426: LD_INT 1
50428: NEG
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50459: LD_ADDR_VAR 0 35
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 1
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: LD_INT 1
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 1
50517: NEG
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 1
50528: NEG
50529: PUSH
50530: LD_INT 1
50532: NEG
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 2
50540: PUSH
50541: LD_INT 1
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 2
50550: NEG
50551: PUSH
50552: LD_INT 1
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50571: LD_ADDR_VAR 0 36
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: LD_INT 0
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: LD_INT 1
50591: NEG
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: LD_INT 1
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: LD_INT 1
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: LD_INT 0
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: NEG
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: NEG
50653: PUSH
50654: LD_INT 2
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: LD_INT 2
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50683: LD_ADDR_VAR 0 37
50687: PUSH
50688: LD_INT 0
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: LD_INT 1
50703: NEG
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 1
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: LD_INT 1
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: LD_INT 1
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 1
50741: NEG
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 1
50752: NEG
50753: PUSH
50754: LD_INT 1
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: PUSH
50765: LD_INT 1
50767: NEG
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: LD_INT 1
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50795: LD_ADDR_VAR 0 38
50799: PUSH
50800: LD_INT 0
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 0
50812: PUSH
50813: LD_INT 1
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 1
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 1
50833: PUSH
50834: LD_INT 1
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: LD_INT 1
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 1
50853: NEG
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 1
50864: NEG
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 2
50876: PUSH
50877: LD_INT 1
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 2
50886: NEG
50887: PUSH
50888: LD_INT 1
50890: NEG
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50907: LD_ADDR_VAR 0 39
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: LD_INT 0
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: LD_INT 1
50927: NEG
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 1
50935: PUSH
50936: LD_INT 0
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: LD_INT 1
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: LD_INT 1
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 1
50965: NEG
50966: PUSH
50967: LD_INT 0
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: NEG
50977: PUSH
50978: LD_INT 1
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 1
50988: NEG
50989: PUSH
50990: LD_INT 2
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 1
51000: PUSH
51001: LD_INT 2
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51019: LD_ADDR_VAR 0 40
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: LD_INT 0
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 0
51036: PUSH
51037: LD_INT 1
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: LD_INT 0
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: LD_INT 1
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 0
51067: PUSH
51068: LD_INT 1
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: NEG
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 1
51088: NEG
51089: PUSH
51090: LD_INT 1
51092: NEG
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 1
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51131: LD_ADDR_VAR 0 41
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 1
51159: PUSH
51160: LD_INT 0
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: LD_INT 1
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 1
51189: NEG
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: LD_INT 1
51204: NEG
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 1
51212: NEG
51213: PUSH
51214: LD_INT 2
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: LD_INT 1
51227: NEG
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 2
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 2
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 2
51255: PUSH
51256: LD_INT 2
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: LD_INT 2
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: NEG
51276: PUSH
51277: LD_INT 1
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 2
51286: NEG
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 2
51297: NEG
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 2
51309: NEG
51310: PUSH
51311: LD_INT 2
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 2
51321: NEG
51322: PUSH
51323: LD_INT 3
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 2
51333: PUSH
51334: LD_INT 1
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 3
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 3
51354: PUSH
51355: LD_INT 1
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 3
51364: PUSH
51365: LD_INT 2
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 3
51374: PUSH
51375: LD_INT 3
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 2
51384: PUSH
51385: LD_INT 3
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 2
51394: NEG
51395: PUSH
51396: LD_INT 1
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 3
51405: NEG
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 3
51416: NEG
51417: PUSH
51418: LD_INT 1
51420: NEG
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 3
51428: NEG
51429: PUSH
51430: LD_INT 2
51432: NEG
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 3
51440: NEG
51441: PUSH
51442: LD_INT 3
51444: NEG
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51481: LD_ADDR_VAR 0 42
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: LD_INT 1
51501: NEG
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 1
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 1
51519: PUSH
51520: LD_INT 1
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 0
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 1
51550: NEG
51551: PUSH
51552: LD_INT 1
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 1
51562: NEG
51563: PUSH
51564: LD_INT 2
51566: NEG
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: LD_INT 2
51577: NEG
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 1
51585: PUSH
51586: LD_INT 1
51588: NEG
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 2
51596: PUSH
51597: LD_INT 1
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 2
51606: PUSH
51607: LD_INT 2
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: LD_INT 2
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: LD_INT 2
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 1
51636: NEG
51637: PUSH
51638: LD_INT 1
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 2
51647: NEG
51648: PUSH
51649: LD_INT 1
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 2
51659: NEG
51660: PUSH
51661: LD_INT 2
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 2
51671: NEG
51672: PUSH
51673: LD_INT 3
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: LD_INT 3
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 0
51695: PUSH
51696: LD_INT 3
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 1
51706: PUSH
51707: LD_INT 2
51709: NEG
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 3
51717: PUSH
51718: LD_INT 2
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 3
51727: PUSH
51728: LD_INT 3
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 2
51737: PUSH
51738: LD_INT 3
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 1
51747: PUSH
51748: LD_INT 3
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 0
51757: PUSH
51758: LD_INT 3
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 1
51767: NEG
51768: PUSH
51769: LD_INT 2
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 3
51778: NEG
51779: PUSH
51780: LD_INT 2
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 3
51790: NEG
51791: PUSH
51792: LD_INT 3
51794: NEG
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51831: LD_ADDR_VAR 0 43
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 0
51848: PUSH
51849: LD_INT 1
51851: NEG
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 1
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 1
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: LD_INT 1
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 1
51889: NEG
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 1
51900: NEG
51901: PUSH
51902: LD_INT 1
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: NEG
51913: PUSH
51914: LD_INT 2
51916: NEG
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 0
51924: PUSH
51925: LD_INT 2
51927: NEG
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 1
51935: PUSH
51936: LD_INT 1
51938: NEG
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 2
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 2
51956: PUSH
51957: LD_INT 1
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: LD_INT 2
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: LD_INT 2
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 1
51986: NEG
51987: PUSH
51988: LD_INT 1
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 2
51997: NEG
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 2
52008: NEG
52009: PUSH
52010: LD_INT 1
52012: NEG
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 1
52020: NEG
52021: PUSH
52022: LD_INT 3
52024: NEG
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: LD_INT 3
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: LD_INT 2
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 2
52054: PUSH
52055: LD_INT 1
52057: NEG
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 3
52065: PUSH
52066: LD_INT 0
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 3
52075: PUSH
52076: LD_INT 1
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 1
52085: PUSH
52086: LD_INT 3
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: LD_INT 3
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 1
52105: NEG
52106: PUSH
52107: LD_INT 2
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 2
52116: NEG
52117: PUSH
52118: LD_INT 1
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 3
52127: NEG
52128: PUSH
52129: LD_INT 0
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 3
52138: NEG
52139: PUSH
52140: LD_INT 1
52142: NEG
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52179: LD_ADDR_VAR 0 44
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: LD_INT 1
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 1
52237: NEG
52238: PUSH
52239: LD_INT 0
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: LD_INT 1
52252: NEG
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 1
52260: NEG
52261: PUSH
52262: LD_INT 2
52264: NEG
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 1
52272: PUSH
52273: LD_INT 1
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 2
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 2
52293: PUSH
52294: LD_INT 1
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 2
52303: PUSH
52304: LD_INT 2
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 1
52313: PUSH
52314: LD_INT 2
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 1
52323: NEG
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 2
52334: NEG
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 2
52345: NEG
52346: PUSH
52347: LD_INT 1
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 2
52357: NEG
52358: PUSH
52359: LD_INT 2
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 2
52369: NEG
52370: PUSH
52371: LD_INT 3
52373: NEG
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 2
52381: PUSH
52382: LD_INT 1
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 3
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 3
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 3
52412: PUSH
52413: LD_INT 2
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 3
52422: PUSH
52423: LD_INT 3
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 2
52432: PUSH
52433: LD_INT 3
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 2
52442: NEG
52443: PUSH
52444: LD_INT 1
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 3
52453: NEG
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 3
52464: NEG
52465: PUSH
52466: LD_INT 1
52468: NEG
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 3
52476: NEG
52477: PUSH
52478: LD_INT 2
52480: NEG
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 3
52488: NEG
52489: PUSH
52490: LD_INT 3
52492: NEG
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52529: LD_ADDR_VAR 0 45
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: LD_INT 1
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 1
52567: PUSH
52568: LD_INT 1
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 1
52598: NEG
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 1
52610: NEG
52611: PUSH
52612: LD_INT 2
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: LD_INT 2
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 2
52644: PUSH
52645: LD_INT 1
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 2
52654: PUSH
52655: LD_INT 2
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 1
52664: PUSH
52665: LD_INT 2
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 0
52674: PUSH
52675: LD_INT 2
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 1
52684: NEG
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 2
52695: NEG
52696: PUSH
52697: LD_INT 1
52699: NEG
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 2
52707: NEG
52708: PUSH
52709: LD_INT 2
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 2
52719: NEG
52720: PUSH
52721: LD_INT 3
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: LD_INT 3
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 0
52743: PUSH
52744: LD_INT 3
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: LD_INT 2
52757: NEG
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 3
52765: PUSH
52766: LD_INT 2
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 3
52775: PUSH
52776: LD_INT 3
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 2
52785: PUSH
52786: LD_INT 3
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: PUSH
52796: LD_INT 3
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 0
52805: PUSH
52806: LD_INT 3
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 1
52815: NEG
52816: PUSH
52817: LD_INT 2
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 3
52826: NEG
52827: PUSH
52828: LD_INT 2
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 3
52838: NEG
52839: PUSH
52840: LD_INT 3
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52879: LD_ADDR_VAR 0 46
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 0
52896: PUSH
52897: LD_INT 1
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 1
52907: PUSH
52908: LD_INT 0
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 1
52917: PUSH
52918: LD_INT 1
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 0
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 1
52937: NEG
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 1
52948: NEG
52949: PUSH
52950: LD_INT 1
52952: NEG
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: LD_INT 2
52964: NEG
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: LD_INT 2
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: LD_INT 1
52986: NEG
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 2
52994: PUSH
52995: LD_INT 0
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 2
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 1
53014: PUSH
53015: LD_INT 2
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: LD_INT 2
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 1
53034: NEG
53035: PUSH
53036: LD_INT 1
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 2
53045: NEG
53046: PUSH
53047: LD_INT 0
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 2
53056: NEG
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: NEG
53069: PUSH
53070: LD_INT 3
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: LD_INT 3
53083: NEG
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: LD_INT 2
53094: NEG
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 2
53102: PUSH
53103: LD_INT 1
53105: NEG
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 3
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 3
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: LD_INT 3
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 0
53143: PUSH
53144: LD_INT 3
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 1
53153: NEG
53154: PUSH
53155: LD_INT 2
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 2
53164: NEG
53165: PUSH
53166: LD_INT 1
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 3
53175: NEG
53176: PUSH
53177: LD_INT 0
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 3
53186: NEG
53187: PUSH
53188: LD_INT 1
53190: NEG
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53227: LD_ADDR_VAR 0 47
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: LD_INT 1
53247: NEG
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 1
53265: PUSH
53266: LD_INT 1
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 0
53275: PUSH
53276: LD_INT 1
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 1
53285: NEG
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: LD_INT 1
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 1
53308: NEG
53309: PUSH
53310: LD_INT 2
53312: NEG
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 0
53320: PUSH
53321: LD_INT 2
53323: NEG
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 1
53331: PUSH
53332: LD_INT 1
53334: NEG
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 2
53342: NEG
53343: PUSH
53344: LD_INT 1
53346: NEG
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 2
53354: NEG
53355: PUSH
53356: LD_INT 2
53358: NEG
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53378: LD_ADDR_VAR 0 48
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: LD_INT 0
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 0
53395: PUSH
53396: LD_INT 1
53398: NEG
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 1
53406: PUSH
53407: LD_INT 0
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 1
53416: PUSH
53417: LD_INT 1
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: LD_INT 1
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 1
53436: NEG
53437: PUSH
53438: LD_INT 0
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 1
53447: NEG
53448: PUSH
53449: LD_INT 1
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 1
53459: NEG
53460: PUSH
53461: LD_INT 2
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 0
53471: PUSH
53472: LD_INT 2
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 1
53482: PUSH
53483: LD_INT 1
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 2
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 2
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53525: LD_ADDR_VAR 0 49
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: LD_INT 1
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: LD_INT 1
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: PUSH
53585: LD_INT 0
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 1
53594: NEG
53595: PUSH
53596: LD_INT 1
53598: NEG
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 2
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 2
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 2
53637: PUSH
53638: LD_INT 2
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 1
53647: PUSH
53648: LD_INT 2
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53669: LD_ADDR_VAR 0 50
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 1
53727: NEG
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 2
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 2
53760: PUSH
53761: LD_INT 2
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 1
53770: PUSH
53771: LD_INT 2
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: LD_INT 2
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 1
53790: NEG
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53813: LD_ADDR_VAR 0 51
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: LD_INT 0
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 0
53830: PUSH
53831: LD_INT 1
53833: NEG
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 1
53841: PUSH
53842: LD_INT 0
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 1
53851: PUSH
53852: LD_INT 1
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 0
53861: PUSH
53862: LD_INT 1
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: NEG
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: PUSH
53884: LD_INT 1
53886: NEG
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 1
53894: PUSH
53895: LD_INT 2
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: LD_INT 2
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: LD_INT 1
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 2
53925: NEG
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 2
53936: NEG
53937: PUSH
53938: LD_INT 1
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53960: LD_ADDR_VAR 0 52
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: LD_INT 1
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: LD_INT 1
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 1
54029: NEG
54030: PUSH
54031: LD_INT 1
54033: NEG
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 1
54041: NEG
54042: PUSH
54043: LD_INT 2
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: LD_INT 1
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 2
54064: NEG
54065: PUSH
54066: LD_INT 0
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 2
54075: NEG
54076: PUSH
54077: LD_INT 1
54079: NEG
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 2
54087: NEG
54088: PUSH
54089: LD_INT 2
54091: NEG
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54111: LD_ADDR_VAR 0 53
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: LD_INT 1
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 1
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 1
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: LD_INT 1
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 1
54169: NEG
54170: PUSH
54171: LD_INT 0
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 1
54180: NEG
54181: PUSH
54182: LD_INT 1
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: LD_INT 2
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: LD_INT 2
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 1
54215: PUSH
54216: LD_INT 1
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 2
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 2
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 2
54246: PUSH
54247: LD_INT 2
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 1
54256: PUSH
54257: LD_INT 2
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 0
54266: PUSH
54267: LD_INT 2
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 1
54276: NEG
54277: PUSH
54278: LD_INT 1
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 2
54287: NEG
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 2
54298: NEG
54299: PUSH
54300: LD_INT 1
54302: NEG
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 2
54310: NEG
54311: PUSH
54312: LD_INT 2
54314: NEG
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54341: LD_ADDR_VAR 0 54
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 1
54399: NEG
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 1
54410: NEG
54411: PUSH
54412: LD_INT 1
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: LD_INT 2
54426: NEG
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: LD_INT 2
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: LD_INT 1
54448: NEG
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 2
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 2
54466: PUSH
54467: LD_INT 1
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 2
54476: PUSH
54477: LD_INT 2
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 1
54486: PUSH
54487: LD_INT 2
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 0
54496: PUSH
54497: LD_INT 2
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 1
54506: NEG
54507: PUSH
54508: LD_INT 1
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 2
54517: NEG
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 2
54528: NEG
54529: PUSH
54530: LD_INT 1
54532: NEG
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 2
54540: NEG
54541: PUSH
54542: LD_INT 2
54544: NEG
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54571: LD_ADDR_VAR 0 55
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 1
54599: PUSH
54600: LD_INT 0
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 1
54609: PUSH
54610: LD_INT 1
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: LD_INT 1
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: LD_INT 0
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 1
54640: NEG
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: LD_INT 2
54656: NEG
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: LD_INT 2
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 1
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 2
54686: PUSH
54687: LD_INT 0
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 2
54696: PUSH
54697: LD_INT 1
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 2
54706: PUSH
54707: LD_INT 2
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 1
54716: PUSH
54717: LD_INT 2
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 0
54726: PUSH
54727: LD_INT 2
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: NEG
54737: PUSH
54738: LD_INT 1
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 2
54747: NEG
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 2
54758: NEG
54759: PUSH
54760: LD_INT 1
54762: NEG
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 2
54770: NEG
54771: PUSH
54772: LD_INT 2
54774: NEG
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54801: LD_ADDR_VAR 0 56
54805: PUSH
54806: LD_INT 0
54808: PUSH
54809: LD_INT 0
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: LD_INT 1
54821: NEG
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 1
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 1
54839: PUSH
54840: LD_INT 1
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: LD_INT 1
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 1
54859: NEG
54860: PUSH
54861: LD_INT 0
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 1
54870: NEG
54871: PUSH
54872: LD_INT 1
54874: NEG
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 1
54882: NEG
54883: PUSH
54884: LD_INT 2
54886: NEG
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 0
54894: PUSH
54895: LD_INT 2
54897: NEG
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 1
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 2
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 2
54926: PUSH
54927: LD_INT 1
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 2
54936: PUSH
54937: LD_INT 2
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 1
54946: PUSH
54947: LD_INT 2
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 0
54956: PUSH
54957: LD_INT 2
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 1
54966: NEG
54967: PUSH
54968: LD_INT 1
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 2
54977: NEG
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 2
54988: NEG
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 2
55000: NEG
55001: PUSH
55002: LD_INT 2
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55031: LD_ADDR_VAR 0 57
55035: PUSH
55036: LD_INT 0
55038: PUSH
55039: LD_INT 0
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: LD_INT 1
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 1
55059: PUSH
55060: LD_INT 0
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: PUSH
55070: LD_INT 1
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 0
55079: PUSH
55080: LD_INT 1
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 1
55089: NEG
55090: PUSH
55091: LD_INT 0
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 1
55100: NEG
55101: PUSH
55102: LD_INT 1
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 1
55112: NEG
55113: PUSH
55114: LD_INT 2
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 0
55124: PUSH
55125: LD_INT 2
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 1
55135: PUSH
55136: LD_INT 1
55138: NEG
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 2
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 2
55156: PUSH
55157: LD_INT 1
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 2
55166: PUSH
55167: LD_INT 2
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: LD_INT 2
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: LD_INT 2
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: NEG
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 2
55207: NEG
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 2
55218: NEG
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 2
55230: NEG
55231: PUSH
55232: LD_INT 2
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55261: LD_ADDR_VAR 0 58
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: LD_INT 0
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: LD_INT 1
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 1
55330: NEG
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: NEG
55343: PUSH
55344: LD_INT 2
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 0
55354: PUSH
55355: LD_INT 2
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 2
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 2
55386: PUSH
55387: LD_INT 1
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 2
55396: PUSH
55397: LD_INT 2
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 1
55406: PUSH
55407: LD_INT 2
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: LD_INT 2
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 1
55426: NEG
55427: PUSH
55428: LD_INT 1
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 2
55437: NEG
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 2
55448: NEG
55449: PUSH
55450: LD_INT 1
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 2
55460: NEG
55461: PUSH
55462: LD_INT 2
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55491: LD_ADDR_VAR 0 59
55495: PUSH
55496: LD_INT 0
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 0
55508: PUSH
55509: LD_INT 1
55511: NEG
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 1
55519: PUSH
55520: LD_INT 0
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: LD_INT 1
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 0
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 1
55549: NEG
55550: PUSH
55551: LD_INT 0
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 1
55560: NEG
55561: PUSH
55562: LD_INT 1
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55579: LD_ADDR_VAR 0 60
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: LD_INT 1
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: LD_INT 1
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 1
55648: NEG
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55667: LD_ADDR_VAR 0 61
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 0
55684: PUSH
55685: LD_INT 1
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: LD_INT 0
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: LD_INT 1
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 1
55725: NEG
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 1
55736: NEG
55737: PUSH
55738: LD_INT 1
55740: NEG
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55755: LD_ADDR_VAR 0 62
55759: PUSH
55760: LD_INT 0
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: LD_INT 1
55775: NEG
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 1
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: LD_INT 1
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: LD_INT 1
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 1
55813: NEG
55814: PUSH
55815: LD_INT 0
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 1
55824: NEG
55825: PUSH
55826: LD_INT 1
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55843: LD_ADDR_VAR 0 63
55847: PUSH
55848: LD_INT 0
55850: PUSH
55851: LD_INT 0
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: LD_INT 1
55863: NEG
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 1
55871: PUSH
55872: LD_INT 0
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: LD_INT 1
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 0
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: LD_INT 0
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: LD_INT 1
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55931: LD_ADDR_VAR 0 64
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: LD_INT 1
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 1
55969: PUSH
55970: LD_INT 1
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 0
55979: PUSH
55980: LD_INT 1
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 1
55989: NEG
55990: PUSH
55991: LD_INT 0
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 1
56000: NEG
56001: PUSH
56002: LD_INT 1
56004: NEG
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: ST_TO_ADDR
// end ; 1 :
56019: GO 61916
56021: LD_INT 1
56023: DOUBLE
56024: EQUAL
56025: IFTRUE 56029
56027: GO 58652
56029: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56030: LD_ADDR_VAR 0 11
56034: PUSH
56035: LD_INT 1
56037: NEG
56038: PUSH
56039: LD_INT 3
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 0
56049: PUSH
56050: LD_INT 3
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 1
56060: PUSH
56061: LD_INT 2
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: LIST
56073: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56074: LD_ADDR_VAR 0 12
56078: PUSH
56079: LD_INT 2
56081: PUSH
56082: LD_INT 1
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 3
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 3
56102: PUSH
56103: LD_INT 1
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: LIST
56114: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56115: LD_ADDR_VAR 0 13
56119: PUSH
56120: LD_INT 3
56122: PUSH
56123: LD_INT 2
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 3
56132: PUSH
56133: LD_INT 3
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 2
56142: PUSH
56143: LD_INT 3
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: LIST
56154: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56155: LD_ADDR_VAR 0 14
56159: PUSH
56160: LD_INT 1
56162: PUSH
56163: LD_INT 3
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 0
56172: PUSH
56173: LD_INT 3
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 1
56182: NEG
56183: PUSH
56184: LD_INT 2
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: LIST
56195: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56196: LD_ADDR_VAR 0 15
56200: PUSH
56201: LD_INT 2
56203: NEG
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 3
56214: NEG
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 3
56225: NEG
56226: PUSH
56227: LD_INT 1
56229: NEG
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: LIST
56239: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56240: LD_ADDR_VAR 0 16
56244: PUSH
56245: LD_INT 2
56247: NEG
56248: PUSH
56249: LD_INT 3
56251: NEG
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 3
56259: NEG
56260: PUSH
56261: LD_INT 2
56263: NEG
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 3
56271: NEG
56272: PUSH
56273: LD_INT 3
56275: NEG
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: LIST
56285: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56286: LD_ADDR_VAR 0 17
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: LD_INT 3
56297: NEG
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: LD_INT 3
56308: NEG
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 1
56316: PUSH
56317: LD_INT 2
56319: NEG
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: LIST
56329: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56330: LD_ADDR_VAR 0 18
56334: PUSH
56335: LD_INT 2
56337: PUSH
56338: LD_INT 1
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 3
56348: PUSH
56349: LD_INT 0
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 3
56358: PUSH
56359: LD_INT 1
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: LIST
56370: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56371: LD_ADDR_VAR 0 19
56375: PUSH
56376: LD_INT 3
56378: PUSH
56379: LD_INT 2
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 3
56388: PUSH
56389: LD_INT 3
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 2
56398: PUSH
56399: LD_INT 3
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: LIST
56410: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56411: LD_ADDR_VAR 0 20
56415: PUSH
56416: LD_INT 1
56418: PUSH
56419: LD_INT 3
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: LD_INT 3
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 1
56438: NEG
56439: PUSH
56440: LD_INT 2
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: LIST
56451: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56452: LD_ADDR_VAR 0 21
56456: PUSH
56457: LD_INT 2
56459: NEG
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 3
56470: NEG
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 3
56481: NEG
56482: PUSH
56483: LD_INT 1
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: LIST
56495: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56496: LD_ADDR_VAR 0 22
56500: PUSH
56501: LD_INT 2
56503: NEG
56504: PUSH
56505: LD_INT 3
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 3
56515: NEG
56516: PUSH
56517: LD_INT 2
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 3
56527: NEG
56528: PUSH
56529: LD_INT 3
56531: NEG
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: LIST
56541: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56542: LD_ADDR_VAR 0 23
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: LD_INT 3
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 1
56560: NEG
56561: PUSH
56562: LD_INT 4
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 1
56572: PUSH
56573: LD_INT 3
56575: NEG
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: LIST
56585: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56586: LD_ADDR_VAR 0 24
56590: PUSH
56591: LD_INT 3
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 3
56603: PUSH
56604: LD_INT 1
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 4
56614: PUSH
56615: LD_INT 1
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: LIST
56626: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56627: LD_ADDR_VAR 0 25
56631: PUSH
56632: LD_INT 3
56634: PUSH
56635: LD_INT 3
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 4
56644: PUSH
56645: LD_INT 3
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 3
56654: PUSH
56655: LD_INT 4
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: LIST
56666: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56667: LD_ADDR_VAR 0 26
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: LD_INT 3
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: LD_INT 4
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: LD_INT 3
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: LIST
56707: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56708: LD_ADDR_VAR 0 27
56712: PUSH
56713: LD_INT 3
56715: NEG
56716: PUSH
56717: LD_INT 0
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 3
56726: NEG
56727: PUSH
56728: LD_INT 1
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 4
56737: NEG
56738: PUSH
56739: LD_INT 1
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: LIST
56751: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56752: LD_ADDR_VAR 0 28
56756: PUSH
56757: LD_INT 3
56759: NEG
56760: PUSH
56761: LD_INT 3
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 3
56771: NEG
56772: PUSH
56773: LD_INT 4
56775: NEG
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 4
56783: NEG
56784: PUSH
56785: LD_INT 3
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: LIST
56797: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56798: LD_ADDR_VAR 0 29
56802: PUSH
56803: LD_INT 1
56805: NEG
56806: PUSH
56807: LD_INT 3
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 0
56817: PUSH
56818: LD_INT 3
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: PUSH
56829: LD_INT 2
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 1
56839: NEG
56840: PUSH
56841: LD_INT 4
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: LD_INT 4
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 1
56862: PUSH
56863: LD_INT 3
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 1
56873: NEG
56874: PUSH
56875: LD_INT 5
56877: NEG
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 0
56885: PUSH
56886: LD_INT 5
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 1
56896: PUSH
56897: LD_INT 4
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: NEG
56908: PUSH
56909: LD_INT 6
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 0
56919: PUSH
56920: LD_INT 6
56922: NEG
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 1
56930: PUSH
56931: LD_INT 5
56933: NEG
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56953: LD_ADDR_VAR 0 30
56957: PUSH
56958: LD_INT 2
56960: PUSH
56961: LD_INT 1
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 3
56971: PUSH
56972: LD_INT 0
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 3
56981: PUSH
56982: LD_INT 1
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 3
56991: PUSH
56992: LD_INT 1
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 4
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 4
57012: PUSH
57013: LD_INT 1
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 4
57022: PUSH
57023: LD_INT 1
57025: NEG
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 5
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 5
57043: PUSH
57044: LD_INT 1
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 5
57053: PUSH
57054: LD_INT 1
57056: NEG
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 6
57064: PUSH
57065: LD_INT 0
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 6
57074: PUSH
57075: LD_INT 1
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57096: LD_ADDR_VAR 0 31
57100: PUSH
57101: LD_INT 3
57103: PUSH
57104: LD_INT 2
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 3
57113: PUSH
57114: LD_INT 3
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 2
57123: PUSH
57124: LD_INT 3
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 4
57133: PUSH
57134: LD_INT 3
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 4
57143: PUSH
57144: LD_INT 4
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 3
57153: PUSH
57154: LD_INT 4
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 5
57163: PUSH
57164: LD_INT 4
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 5
57173: PUSH
57174: LD_INT 5
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 4
57183: PUSH
57184: LD_INT 5
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 6
57193: PUSH
57194: LD_INT 5
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 6
57203: PUSH
57204: LD_INT 6
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 5
57213: PUSH
57214: LD_INT 6
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57235: LD_ADDR_VAR 0 32
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: LD_INT 3
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 0
57252: PUSH
57253: LD_INT 3
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 1
57262: NEG
57263: PUSH
57264: LD_INT 2
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 1
57273: PUSH
57274: LD_INT 4
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: LD_INT 4
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 1
57293: NEG
57294: PUSH
57295: LD_INT 3
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 1
57304: PUSH
57305: LD_INT 5
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 0
57314: PUSH
57315: LD_INT 5
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: LD_INT 4
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 1
57335: PUSH
57336: LD_INT 6
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: LD_INT 6
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 1
57355: NEG
57356: PUSH
57357: LD_INT 5
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57378: LD_ADDR_VAR 0 33
57382: PUSH
57383: LD_INT 2
57385: NEG
57386: PUSH
57387: LD_INT 1
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 3
57396: NEG
57397: PUSH
57398: LD_INT 0
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 3
57407: NEG
57408: PUSH
57409: LD_INT 1
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 3
57419: NEG
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 4
57430: NEG
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 4
57441: NEG
57442: PUSH
57443: LD_INT 1
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 4
57453: NEG
57454: PUSH
57455: LD_INT 1
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 5
57464: NEG
57465: PUSH
57466: LD_INT 0
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 5
57475: NEG
57476: PUSH
57477: LD_INT 1
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 5
57487: NEG
57488: PUSH
57489: LD_INT 1
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 6
57498: NEG
57499: PUSH
57500: LD_INT 0
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 6
57509: NEG
57510: PUSH
57511: LD_INT 1
57513: NEG
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57533: LD_ADDR_VAR 0 34
57537: PUSH
57538: LD_INT 2
57540: NEG
57541: PUSH
57542: LD_INT 3
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 3
57552: NEG
57553: PUSH
57554: LD_INT 2
57556: NEG
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 3
57564: NEG
57565: PUSH
57566: LD_INT 3
57568: NEG
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 3
57576: NEG
57577: PUSH
57578: LD_INT 4
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 4
57588: NEG
57589: PUSH
57590: LD_INT 3
57592: NEG
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 4
57600: NEG
57601: PUSH
57602: LD_INT 4
57604: NEG
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 4
57612: NEG
57613: PUSH
57614: LD_INT 5
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 5
57624: NEG
57625: PUSH
57626: LD_INT 4
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 5
57636: NEG
57637: PUSH
57638: LD_INT 5
57640: NEG
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 5
57648: NEG
57649: PUSH
57650: LD_INT 6
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 6
57660: NEG
57661: PUSH
57662: LD_INT 5
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 6
57672: NEG
57673: PUSH
57674: LD_INT 6
57676: NEG
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57696: LD_ADDR_VAR 0 41
57700: PUSH
57701: LD_INT 0
57703: PUSH
57704: LD_INT 2
57706: NEG
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 1
57714: NEG
57715: PUSH
57716: LD_INT 3
57718: NEG
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 1
57726: PUSH
57727: LD_INT 2
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: LIST
57739: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57740: LD_ADDR_VAR 0 42
57744: PUSH
57745: LD_INT 2
57747: PUSH
57748: LD_INT 0
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 2
57757: PUSH
57758: LD_INT 1
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 3
57768: PUSH
57769: LD_INT 1
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: LIST
57780: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57781: LD_ADDR_VAR 0 43
57785: PUSH
57786: LD_INT 2
57788: PUSH
57789: LD_INT 2
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 3
57798: PUSH
57799: LD_INT 2
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 2
57808: PUSH
57809: LD_INT 3
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: LIST
57820: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57821: LD_ADDR_VAR 0 44
57825: PUSH
57826: LD_INT 0
57828: PUSH
57829: LD_INT 2
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 1
57838: PUSH
57839: LD_INT 3
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 1
57848: NEG
57849: PUSH
57850: LD_INT 2
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: LIST
57861: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57862: LD_ADDR_VAR 0 45
57866: PUSH
57867: LD_INT 2
57869: NEG
57870: PUSH
57871: LD_INT 0
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 2
57880: NEG
57881: PUSH
57882: LD_INT 1
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 3
57891: NEG
57892: PUSH
57893: LD_INT 1
57895: NEG
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: LIST
57905: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57906: LD_ADDR_VAR 0 46
57910: PUSH
57911: LD_INT 2
57913: NEG
57914: PUSH
57915: LD_INT 2
57917: NEG
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 2
57925: NEG
57926: PUSH
57927: LD_INT 3
57929: NEG
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 3
57937: NEG
57938: PUSH
57939: LD_INT 2
57941: NEG
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: LIST
57951: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57952: LD_ADDR_VAR 0 47
57956: PUSH
57957: LD_INT 2
57959: NEG
57960: PUSH
57961: LD_INT 3
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 1
57971: NEG
57972: PUSH
57973: LD_INT 3
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57985: LD_ADDR_VAR 0 48
57989: PUSH
57990: LD_INT 1
57992: PUSH
57993: LD_INT 2
57995: NEG
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 2
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58016: LD_ADDR_VAR 0 49
58020: PUSH
58021: LD_INT 3
58023: PUSH
58024: LD_INT 1
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 3
58033: PUSH
58034: LD_INT 2
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58045: LD_ADDR_VAR 0 50
58049: PUSH
58050: LD_INT 2
58052: PUSH
58053: LD_INT 3
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 1
58062: PUSH
58063: LD_INT 3
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58074: LD_ADDR_VAR 0 51
58078: PUSH
58079: LD_INT 1
58081: NEG
58082: PUSH
58083: LD_INT 2
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 2
58092: NEG
58093: PUSH
58094: LD_INT 1
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58105: LD_ADDR_VAR 0 52
58109: PUSH
58110: LD_INT 3
58112: NEG
58113: PUSH
58114: LD_INT 1
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 3
58124: NEG
58125: PUSH
58126: LD_INT 2
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58138: LD_ADDR_VAR 0 53
58142: PUSH
58143: LD_INT 1
58145: NEG
58146: PUSH
58147: LD_INT 3
58149: NEG
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 0
58157: PUSH
58158: LD_INT 3
58160: NEG
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 1
58168: PUSH
58169: LD_INT 2
58171: NEG
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: LIST
58181: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58182: LD_ADDR_VAR 0 54
58186: PUSH
58187: LD_INT 2
58189: PUSH
58190: LD_INT 1
58192: NEG
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 3
58200: PUSH
58201: LD_INT 0
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 3
58210: PUSH
58211: LD_INT 1
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: LIST
58222: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58223: LD_ADDR_VAR 0 55
58227: PUSH
58228: LD_INT 3
58230: PUSH
58231: LD_INT 2
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 3
58240: PUSH
58241: LD_INT 3
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 2
58250: PUSH
58251: LD_INT 3
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: LIST
58262: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58263: LD_ADDR_VAR 0 56
58267: PUSH
58268: LD_INT 1
58270: PUSH
58271: LD_INT 3
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 0
58280: PUSH
58281: LD_INT 3
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 1
58290: NEG
58291: PUSH
58292: LD_INT 2
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: LIST
58303: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58304: LD_ADDR_VAR 0 57
58308: PUSH
58309: LD_INT 2
58311: NEG
58312: PUSH
58313: LD_INT 1
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 3
58322: NEG
58323: PUSH
58324: LD_INT 0
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 3
58333: NEG
58334: PUSH
58335: LD_INT 1
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: LIST
58347: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58348: LD_ADDR_VAR 0 58
58352: PUSH
58353: LD_INT 2
58355: NEG
58356: PUSH
58357: LD_INT 3
58359: NEG
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 3
58367: NEG
58368: PUSH
58369: LD_INT 2
58371: NEG
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 3
58379: NEG
58380: PUSH
58381: LD_INT 3
58383: NEG
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: LIST
58393: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58394: LD_ADDR_VAR 0 59
58398: PUSH
58399: LD_INT 1
58401: NEG
58402: PUSH
58403: LD_INT 2
58405: NEG
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 0
58413: PUSH
58414: LD_INT 2
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: LD_INT 1
58427: NEG
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: LIST
58437: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58438: LD_ADDR_VAR 0 60
58442: PUSH
58443: LD_INT 1
58445: PUSH
58446: LD_INT 1
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 2
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 2
58466: PUSH
58467: LD_INT 1
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: LIST
58478: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58479: LD_ADDR_VAR 0 61
58483: PUSH
58484: LD_INT 2
58486: PUSH
58487: LD_INT 1
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 2
58496: PUSH
58497: LD_INT 2
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: LD_INT 2
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: LIST
58518: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58519: LD_ADDR_VAR 0 62
58523: PUSH
58524: LD_INT 1
58526: PUSH
58527: LD_INT 2
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 0
58536: PUSH
58537: LD_INT 2
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 1
58546: NEG
58547: PUSH
58548: LD_INT 1
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: LIST
58559: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58560: LD_ADDR_VAR 0 63
58564: PUSH
58565: LD_INT 1
58567: NEG
58568: PUSH
58569: LD_INT 1
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 2
58578: NEG
58579: PUSH
58580: LD_INT 0
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 2
58589: NEG
58590: PUSH
58591: LD_INT 1
58593: NEG
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: LIST
58603: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58604: LD_ADDR_VAR 0 64
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: LD_INT 2
58615: NEG
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 2
58623: NEG
58624: PUSH
58625: LD_INT 1
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 2
58635: NEG
58636: PUSH
58637: LD_INT 2
58639: NEG
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: LIST
58649: ST_TO_ADDR
// end ; 2 :
58650: GO 61916
58652: LD_INT 2
58654: DOUBLE
58655: EQUAL
58656: IFTRUE 58660
58658: GO 61915
58660: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58661: LD_ADDR_VAR 0 29
58665: PUSH
58666: LD_INT 4
58668: PUSH
58669: LD_INT 0
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 4
58678: PUSH
58679: LD_INT 1
58681: NEG
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 5
58689: PUSH
58690: LD_INT 0
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 5
58699: PUSH
58700: LD_INT 1
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 4
58709: PUSH
58710: LD_INT 1
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 3
58719: PUSH
58720: LD_INT 0
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 3
58729: PUSH
58730: LD_INT 1
58732: NEG
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 3
58740: PUSH
58741: LD_INT 2
58743: NEG
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 5
58751: PUSH
58752: LD_INT 2
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 3
58761: PUSH
58762: LD_INT 3
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 3
58771: PUSH
58772: LD_INT 2
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 4
58781: PUSH
58782: LD_INT 3
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 4
58791: PUSH
58792: LD_INT 4
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 3
58801: PUSH
58802: LD_INT 4
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 2
58811: PUSH
58812: LD_INT 3
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 2
58821: PUSH
58822: LD_INT 2
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 4
58831: PUSH
58832: LD_INT 2
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 2
58841: PUSH
58842: LD_INT 4
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 0
58851: PUSH
58852: LD_INT 4
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 0
58861: PUSH
58862: LD_INT 3
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 1
58871: PUSH
58872: LD_INT 4
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 1
58881: PUSH
58882: LD_INT 5
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 0
58891: PUSH
58892: LD_INT 5
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 1
58901: NEG
58902: PUSH
58903: LD_INT 4
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 1
58912: NEG
58913: PUSH
58914: LD_INT 3
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 2
58923: PUSH
58924: LD_INT 5
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 2
58933: NEG
58934: PUSH
58935: LD_INT 3
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 3
58944: NEG
58945: PUSH
58946: LD_INT 0
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 3
58955: NEG
58956: PUSH
58957: LD_INT 1
58959: NEG
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 2
58967: NEG
58968: PUSH
58969: LD_INT 0
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 2
58978: NEG
58979: PUSH
58980: LD_INT 1
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 3
58989: NEG
58990: PUSH
58991: LD_INT 1
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 4
59000: NEG
59001: PUSH
59002: LD_INT 0
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 4
59011: NEG
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 4
59023: NEG
59024: PUSH
59025: LD_INT 2
59027: NEG
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 2
59035: NEG
59036: PUSH
59037: LD_INT 2
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 4
59046: NEG
59047: PUSH
59048: LD_INT 4
59050: NEG
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 4
59058: NEG
59059: PUSH
59060: LD_INT 5
59062: NEG
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 3
59070: NEG
59071: PUSH
59072: LD_INT 4
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 3
59082: NEG
59083: PUSH
59084: LD_INT 3
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 4
59094: NEG
59095: PUSH
59096: LD_INT 3
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 5
59106: NEG
59107: PUSH
59108: LD_INT 4
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 5
59118: NEG
59119: PUSH
59120: LD_INT 5
59122: NEG
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 3
59130: NEG
59131: PUSH
59132: LD_INT 5
59134: NEG
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 5
59142: NEG
59143: PUSH
59144: LD_INT 3
59146: NEG
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59199: LD_ADDR_VAR 0 30
59203: PUSH
59204: LD_INT 4
59206: PUSH
59207: LD_INT 4
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 4
59216: PUSH
59217: LD_INT 3
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 5
59226: PUSH
59227: LD_INT 4
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 5
59236: PUSH
59237: LD_INT 5
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 4
59246: PUSH
59247: LD_INT 5
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 3
59256: PUSH
59257: LD_INT 4
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 3
59266: PUSH
59267: LD_INT 3
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 5
59276: PUSH
59277: LD_INT 3
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 3
59286: PUSH
59287: LD_INT 5
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: LD_INT 3
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 0
59306: PUSH
59307: LD_INT 2
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 1
59316: PUSH
59317: LD_INT 3
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 1
59326: PUSH
59327: LD_INT 4
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 0
59336: PUSH
59337: LD_INT 4
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 1
59346: NEG
59347: PUSH
59348: LD_INT 3
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 1
59357: NEG
59358: PUSH
59359: LD_INT 2
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 2
59368: PUSH
59369: LD_INT 4
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 2
59378: NEG
59379: PUSH
59380: LD_INT 2
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 4
59389: NEG
59390: PUSH
59391: LD_INT 0
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 4
59400: NEG
59401: PUSH
59402: LD_INT 1
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 3
59412: NEG
59413: PUSH
59414: LD_INT 0
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 3
59423: NEG
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 4
59434: NEG
59435: PUSH
59436: LD_INT 1
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 5
59445: NEG
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 5
59456: NEG
59457: PUSH
59458: LD_INT 1
59460: NEG
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 5
59468: NEG
59469: PUSH
59470: LD_INT 2
59472: NEG
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 3
59480: NEG
59481: PUSH
59482: LD_INT 2
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 3
59491: NEG
59492: PUSH
59493: LD_INT 3
59495: NEG
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 3
59503: NEG
59504: PUSH
59505: LD_INT 4
59507: NEG
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 2
59515: NEG
59516: PUSH
59517: LD_INT 3
59519: NEG
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 2
59527: NEG
59528: PUSH
59529: LD_INT 2
59531: NEG
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 3
59539: NEG
59540: PUSH
59541: LD_INT 2
59543: NEG
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 4
59551: NEG
59552: PUSH
59553: LD_INT 3
59555: NEG
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 4
59563: NEG
59564: PUSH
59565: LD_INT 4
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 2
59575: NEG
59576: PUSH
59577: LD_INT 4
59579: NEG
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 4
59587: NEG
59588: PUSH
59589: LD_INT 2
59591: NEG
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 0
59599: PUSH
59600: LD_INT 4
59602: NEG
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 0
59610: PUSH
59611: LD_INT 5
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 1
59621: PUSH
59622: LD_INT 4
59624: NEG
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 1
59632: PUSH
59633: LD_INT 3
59635: NEG
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 0
59643: PUSH
59644: LD_INT 3
59646: NEG
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 1
59654: NEG
59655: PUSH
59656: LD_INT 4
59658: NEG
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 1
59666: NEG
59667: PUSH
59668: LD_INT 5
59670: NEG
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 2
59678: PUSH
59679: LD_INT 3
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 2
59689: NEG
59690: PUSH
59691: LD_INT 5
59693: NEG
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59746: LD_ADDR_VAR 0 31
59750: PUSH
59751: LD_INT 0
59753: PUSH
59754: LD_INT 4
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 0
59763: PUSH
59764: LD_INT 3
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 1
59773: PUSH
59774: LD_INT 4
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 1
59783: PUSH
59784: LD_INT 5
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 0
59793: PUSH
59794: LD_INT 5
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 1
59803: NEG
59804: PUSH
59805: LD_INT 4
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 1
59814: NEG
59815: PUSH
59816: LD_INT 3
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 2
59825: PUSH
59826: LD_INT 5
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 2
59835: NEG
59836: PUSH
59837: LD_INT 3
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 3
59846: NEG
59847: PUSH
59848: LD_INT 0
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 3
59857: NEG
59858: PUSH
59859: LD_INT 1
59861: NEG
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 2
59869: NEG
59870: PUSH
59871: LD_INT 0
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 2
59880: NEG
59881: PUSH
59882: LD_INT 1
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 3
59891: NEG
59892: PUSH
59893: LD_INT 1
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 4
59902: NEG
59903: PUSH
59904: LD_INT 0
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 4
59913: NEG
59914: PUSH
59915: LD_INT 1
59917: NEG
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 4
59925: NEG
59926: PUSH
59927: LD_INT 2
59929: NEG
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 2
59937: NEG
59938: PUSH
59939: LD_INT 2
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 4
59948: NEG
59949: PUSH
59950: LD_INT 4
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 4
59960: NEG
59961: PUSH
59962: LD_INT 5
59964: NEG
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 3
59972: NEG
59973: PUSH
59974: LD_INT 4
59976: NEG
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 3
59984: NEG
59985: PUSH
59986: LD_INT 3
59988: NEG
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 4
59996: NEG
59997: PUSH
59998: LD_INT 3
60000: NEG
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 5
60008: NEG
60009: PUSH
60010: LD_INT 4
60012: NEG
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 5
60020: NEG
60021: PUSH
60022: LD_INT 5
60024: NEG
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 3
60032: NEG
60033: PUSH
60034: LD_INT 5
60036: NEG
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 5
60044: NEG
60045: PUSH
60046: LD_INT 3
60048: NEG
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 0
60056: PUSH
60057: LD_INT 3
60059: NEG
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 0
60067: PUSH
60068: LD_INT 4
60070: NEG
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 1
60078: PUSH
60079: LD_INT 3
60081: NEG
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 1
60089: PUSH
60090: LD_INT 2
60092: NEG
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 0
60100: PUSH
60101: LD_INT 2
60103: NEG
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 1
60111: NEG
60112: PUSH
60113: LD_INT 3
60115: NEG
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 1
60123: NEG
60124: PUSH
60125: LD_INT 4
60127: NEG
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 2
60135: PUSH
60136: LD_INT 2
60138: NEG
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 2
60146: NEG
60147: PUSH
60148: LD_INT 4
60150: NEG
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 4
60158: PUSH
60159: LD_INT 0
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 4
60168: PUSH
60169: LD_INT 1
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 5
60179: PUSH
60180: LD_INT 0
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 5
60189: PUSH
60190: LD_INT 1
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 4
60199: PUSH
60200: LD_INT 1
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 3
60209: PUSH
60210: LD_INT 0
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 3
60219: PUSH
60220: LD_INT 1
60222: NEG
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 3
60230: PUSH
60231: LD_INT 2
60233: NEG
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 5
60241: PUSH
60242: LD_INT 2
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60296: LD_ADDR_VAR 0 32
60300: PUSH
60301: LD_INT 4
60303: NEG
60304: PUSH
60305: LD_INT 0
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 4
60314: NEG
60315: PUSH
60316: LD_INT 1
60318: NEG
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 3
60326: NEG
60327: PUSH
60328: LD_INT 0
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 3
60337: NEG
60338: PUSH
60339: LD_INT 1
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 4
60348: NEG
60349: PUSH
60350: LD_INT 1
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 5
60359: NEG
60360: PUSH
60361: LD_INT 0
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 5
60370: NEG
60371: PUSH
60372: LD_INT 1
60374: NEG
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 5
60382: NEG
60383: PUSH
60384: LD_INT 2
60386: NEG
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 3
60394: NEG
60395: PUSH
60396: LD_INT 2
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 3
60405: NEG
60406: PUSH
60407: LD_INT 3
60409: NEG
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 3
60417: NEG
60418: PUSH
60419: LD_INT 4
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 2
60429: NEG
60430: PUSH
60431: LD_INT 3
60433: NEG
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 2
60441: NEG
60442: PUSH
60443: LD_INT 2
60445: NEG
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 3
60453: NEG
60454: PUSH
60455: LD_INT 2
60457: NEG
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 4
60465: NEG
60466: PUSH
60467: LD_INT 3
60469: NEG
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 4
60477: NEG
60478: PUSH
60479: LD_INT 4
60481: NEG
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 2
60489: NEG
60490: PUSH
60491: LD_INT 4
60493: NEG
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 4
60501: NEG
60502: PUSH
60503: LD_INT 2
60505: NEG
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: LD_INT 4
60516: NEG
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 0
60524: PUSH
60525: LD_INT 5
60527: NEG
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 1
60535: PUSH
60536: LD_INT 4
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 1
60546: PUSH
60547: LD_INT 3
60549: NEG
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 0
60557: PUSH
60558: LD_INT 3
60560: NEG
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 1
60568: NEG
60569: PUSH
60570: LD_INT 4
60572: NEG
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 1
60580: NEG
60581: PUSH
60582: LD_INT 5
60584: NEG
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 2
60592: PUSH
60593: LD_INT 3
60595: NEG
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 2
60603: NEG
60604: PUSH
60605: LD_INT 5
60607: NEG
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 3
60615: PUSH
60616: LD_INT 0
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 3
60625: PUSH
60626: LD_INT 1
60628: NEG
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 4
60636: PUSH
60637: LD_INT 0
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 4
60646: PUSH
60647: LD_INT 1
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 3
60656: PUSH
60657: LD_INT 1
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 2
60666: PUSH
60667: LD_INT 0
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 2
60676: PUSH
60677: LD_INT 1
60679: NEG
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 2
60687: PUSH
60688: LD_INT 2
60690: NEG
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 4
60698: PUSH
60699: LD_INT 2
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 4
60708: PUSH
60709: LD_INT 4
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 4
60718: PUSH
60719: LD_INT 3
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 5
60728: PUSH
60729: LD_INT 4
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 5
60738: PUSH
60739: LD_INT 5
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 4
60748: PUSH
60749: LD_INT 5
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 3
60758: PUSH
60759: LD_INT 4
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 3
60768: PUSH
60769: LD_INT 3
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 5
60778: PUSH
60779: LD_INT 3
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 3
60788: PUSH
60789: LD_INT 5
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60843: LD_ADDR_VAR 0 33
60847: PUSH
60848: LD_INT 4
60850: NEG
60851: PUSH
60852: LD_INT 4
60854: NEG
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 4
60862: NEG
60863: PUSH
60864: LD_INT 5
60866: NEG
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 3
60874: NEG
60875: PUSH
60876: LD_INT 4
60878: NEG
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 3
60886: NEG
60887: PUSH
60888: LD_INT 3
60890: NEG
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 4
60898: NEG
60899: PUSH
60900: LD_INT 3
60902: NEG
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 5
60910: NEG
60911: PUSH
60912: LD_INT 4
60914: NEG
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 5
60922: NEG
60923: PUSH
60924: LD_INT 5
60926: NEG
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 3
60934: NEG
60935: PUSH
60936: LD_INT 5
60938: NEG
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 5
60946: NEG
60947: PUSH
60948: LD_INT 3
60950: NEG
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 0
60958: PUSH
60959: LD_INT 3
60961: NEG
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 0
60969: PUSH
60970: LD_INT 4
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 1
60980: PUSH
60981: LD_INT 3
60983: NEG
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 1
60991: PUSH
60992: LD_INT 2
60994: NEG
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 0
61002: PUSH
61003: LD_INT 2
61005: NEG
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 1
61013: NEG
61014: PUSH
61015: LD_INT 3
61017: NEG
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 1
61025: NEG
61026: PUSH
61027: LD_INT 4
61029: NEG
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 2
61037: PUSH
61038: LD_INT 2
61040: NEG
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 2
61048: NEG
61049: PUSH
61050: LD_INT 4
61052: NEG
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 4
61060: PUSH
61061: LD_INT 0
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 4
61070: PUSH
61071: LD_INT 1
61073: NEG
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 5
61081: PUSH
61082: LD_INT 0
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 5
61091: PUSH
61092: LD_INT 1
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 4
61101: PUSH
61102: LD_INT 1
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 3
61111: PUSH
61112: LD_INT 0
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 3
61121: PUSH
61122: LD_INT 1
61124: NEG
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 3
61132: PUSH
61133: LD_INT 2
61135: NEG
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 5
61143: PUSH
61144: LD_INT 2
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 3
61153: PUSH
61154: LD_INT 3
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 3
61163: PUSH
61164: LD_INT 2
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 4
61173: PUSH
61174: LD_INT 3
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 4
61183: PUSH
61184: LD_INT 4
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 3
61193: PUSH
61194: LD_INT 4
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 2
61203: PUSH
61204: LD_INT 3
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 2
61213: PUSH
61214: LD_INT 2
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 4
61223: PUSH
61224: LD_INT 2
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 2
61233: PUSH
61234: LD_INT 4
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 0
61243: PUSH
61244: LD_INT 4
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 0
61253: PUSH
61254: LD_INT 3
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 1
61263: PUSH
61264: LD_INT 4
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 1
61273: PUSH
61274: LD_INT 5
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 0
61283: PUSH
61284: LD_INT 5
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 1
61293: NEG
61294: PUSH
61295: LD_INT 4
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 1
61304: NEG
61305: PUSH
61306: LD_INT 3
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 2
61315: PUSH
61316: LD_INT 5
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 2
61325: NEG
61326: PUSH
61327: LD_INT 3
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61381: LD_ADDR_VAR 0 34
61385: PUSH
61386: LD_INT 0
61388: PUSH
61389: LD_INT 4
61391: NEG
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 0
61399: PUSH
61400: LD_INT 5
61402: NEG
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 1
61410: PUSH
61411: LD_INT 4
61413: NEG
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 1
61421: PUSH
61422: LD_INT 3
61424: NEG
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 0
61432: PUSH
61433: LD_INT 3
61435: NEG
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 1
61443: NEG
61444: PUSH
61445: LD_INT 4
61447: NEG
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 1
61455: NEG
61456: PUSH
61457: LD_INT 5
61459: NEG
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 2
61467: PUSH
61468: LD_INT 3
61470: NEG
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 2
61478: NEG
61479: PUSH
61480: LD_INT 5
61482: NEG
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 3
61490: PUSH
61491: LD_INT 0
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 3
61500: PUSH
61501: LD_INT 1
61503: NEG
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 4
61511: PUSH
61512: LD_INT 0
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 4
61521: PUSH
61522: LD_INT 1
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 3
61531: PUSH
61532: LD_INT 1
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 2
61541: PUSH
61542: LD_INT 0
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 2
61551: PUSH
61552: LD_INT 1
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 2
61562: PUSH
61563: LD_INT 2
61565: NEG
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 4
61573: PUSH
61574: LD_INT 2
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 4
61583: PUSH
61584: LD_INT 4
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 4
61593: PUSH
61594: LD_INT 3
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 5
61603: PUSH
61604: LD_INT 4
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 5
61613: PUSH
61614: LD_INT 5
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 4
61623: PUSH
61624: LD_INT 5
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 3
61633: PUSH
61634: LD_INT 4
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 3
61643: PUSH
61644: LD_INT 3
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 5
61653: PUSH
61654: LD_INT 3
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 3
61663: PUSH
61664: LD_INT 5
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 0
61673: PUSH
61674: LD_INT 3
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 0
61683: PUSH
61684: LD_INT 2
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 1
61693: PUSH
61694: LD_INT 3
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 1
61703: PUSH
61704: LD_INT 4
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 0
61713: PUSH
61714: LD_INT 4
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 1
61723: NEG
61724: PUSH
61725: LD_INT 3
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 1
61734: NEG
61735: PUSH
61736: LD_INT 2
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 2
61745: PUSH
61746: LD_INT 4
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 2
61755: NEG
61756: PUSH
61757: LD_INT 2
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 4
61766: NEG
61767: PUSH
61768: LD_INT 0
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 4
61777: NEG
61778: PUSH
61779: LD_INT 1
61781: NEG
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 3
61789: NEG
61790: PUSH
61791: LD_INT 0
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 3
61800: NEG
61801: PUSH
61802: LD_INT 1
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 4
61811: NEG
61812: PUSH
61813: LD_INT 1
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 5
61822: NEG
61823: PUSH
61824: LD_INT 0
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 5
61833: NEG
61834: PUSH
61835: LD_INT 1
61837: NEG
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 5
61845: NEG
61846: PUSH
61847: LD_INT 2
61849: NEG
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 3
61857: NEG
61858: PUSH
61859: LD_INT 2
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: ST_TO_ADDR
// end ; end ;
61913: GO 61916
61915: POP
// case btype of b_depot , b_warehouse :
61916: LD_VAR 0 1
61920: PUSH
61921: LD_INT 0
61923: DOUBLE
61924: EQUAL
61925: IFTRUE 61935
61927: LD_INT 1
61929: DOUBLE
61930: EQUAL
61931: IFTRUE 61935
61933: GO 62136
61935: POP
// case nation of nation_american :
61936: LD_VAR 0 5
61940: PUSH
61941: LD_INT 1
61943: DOUBLE
61944: EQUAL
61945: IFTRUE 61949
61947: GO 62005
61949: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61950: LD_ADDR_VAR 0 9
61954: PUSH
61955: LD_VAR 0 11
61959: PUSH
61960: LD_VAR 0 12
61964: PUSH
61965: LD_VAR 0 13
61969: PUSH
61970: LD_VAR 0 14
61974: PUSH
61975: LD_VAR 0 15
61979: PUSH
61980: LD_VAR 0 16
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: PUSH
61993: LD_VAR 0 4
61997: PUSH
61998: LD_INT 1
62000: PLUS
62001: ARRAY
62002: ST_TO_ADDR
62003: GO 62134
62005: LD_INT 2
62007: DOUBLE
62008: EQUAL
62009: IFTRUE 62013
62011: GO 62069
62013: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62014: LD_ADDR_VAR 0 9
62018: PUSH
62019: LD_VAR 0 17
62023: PUSH
62024: LD_VAR 0 18
62028: PUSH
62029: LD_VAR 0 19
62033: PUSH
62034: LD_VAR 0 20
62038: PUSH
62039: LD_VAR 0 21
62043: PUSH
62044: LD_VAR 0 22
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: PUSH
62057: LD_VAR 0 4
62061: PUSH
62062: LD_INT 1
62064: PLUS
62065: ARRAY
62066: ST_TO_ADDR
62067: GO 62134
62069: LD_INT 3
62071: DOUBLE
62072: EQUAL
62073: IFTRUE 62077
62075: GO 62133
62077: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62078: LD_ADDR_VAR 0 9
62082: PUSH
62083: LD_VAR 0 23
62087: PUSH
62088: LD_VAR 0 24
62092: PUSH
62093: LD_VAR 0 25
62097: PUSH
62098: LD_VAR 0 26
62102: PUSH
62103: LD_VAR 0 27
62107: PUSH
62108: LD_VAR 0 28
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: PUSH
62121: LD_VAR 0 4
62125: PUSH
62126: LD_INT 1
62128: PLUS
62129: ARRAY
62130: ST_TO_ADDR
62131: GO 62134
62133: POP
62134: GO 62689
62136: LD_INT 2
62138: DOUBLE
62139: EQUAL
62140: IFTRUE 62150
62142: LD_INT 3
62144: DOUBLE
62145: EQUAL
62146: IFTRUE 62150
62148: GO 62206
62150: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62151: LD_ADDR_VAR 0 9
62155: PUSH
62156: LD_VAR 0 29
62160: PUSH
62161: LD_VAR 0 30
62165: PUSH
62166: LD_VAR 0 31
62170: PUSH
62171: LD_VAR 0 32
62175: PUSH
62176: LD_VAR 0 33
62180: PUSH
62181: LD_VAR 0 34
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: PUSH
62194: LD_VAR 0 4
62198: PUSH
62199: LD_INT 1
62201: PLUS
62202: ARRAY
62203: ST_TO_ADDR
62204: GO 62689
62206: LD_INT 16
62208: DOUBLE
62209: EQUAL
62210: IFTRUE 62268
62212: LD_INT 17
62214: DOUBLE
62215: EQUAL
62216: IFTRUE 62268
62218: LD_INT 18
62220: DOUBLE
62221: EQUAL
62222: IFTRUE 62268
62224: LD_INT 19
62226: DOUBLE
62227: EQUAL
62228: IFTRUE 62268
62230: LD_INT 22
62232: DOUBLE
62233: EQUAL
62234: IFTRUE 62268
62236: LD_INT 20
62238: DOUBLE
62239: EQUAL
62240: IFTRUE 62268
62242: LD_INT 21
62244: DOUBLE
62245: EQUAL
62246: IFTRUE 62268
62248: LD_INT 23
62250: DOUBLE
62251: EQUAL
62252: IFTRUE 62268
62254: LD_INT 24
62256: DOUBLE
62257: EQUAL
62258: IFTRUE 62268
62260: LD_INT 25
62262: DOUBLE
62263: EQUAL
62264: IFTRUE 62268
62266: GO 62324
62268: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62269: LD_ADDR_VAR 0 9
62273: PUSH
62274: LD_VAR 0 35
62278: PUSH
62279: LD_VAR 0 36
62283: PUSH
62284: LD_VAR 0 37
62288: PUSH
62289: LD_VAR 0 38
62293: PUSH
62294: LD_VAR 0 39
62298: PUSH
62299: LD_VAR 0 40
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: PUSH
62312: LD_VAR 0 4
62316: PUSH
62317: LD_INT 1
62319: PLUS
62320: ARRAY
62321: ST_TO_ADDR
62322: GO 62689
62324: LD_INT 6
62326: DOUBLE
62327: EQUAL
62328: IFTRUE 62380
62330: LD_INT 7
62332: DOUBLE
62333: EQUAL
62334: IFTRUE 62380
62336: LD_INT 8
62338: DOUBLE
62339: EQUAL
62340: IFTRUE 62380
62342: LD_INT 13
62344: DOUBLE
62345: EQUAL
62346: IFTRUE 62380
62348: LD_INT 12
62350: DOUBLE
62351: EQUAL
62352: IFTRUE 62380
62354: LD_INT 15
62356: DOUBLE
62357: EQUAL
62358: IFTRUE 62380
62360: LD_INT 11
62362: DOUBLE
62363: EQUAL
62364: IFTRUE 62380
62366: LD_INT 14
62368: DOUBLE
62369: EQUAL
62370: IFTRUE 62380
62372: LD_INT 10
62374: DOUBLE
62375: EQUAL
62376: IFTRUE 62380
62378: GO 62436
62380: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62381: LD_ADDR_VAR 0 9
62385: PUSH
62386: LD_VAR 0 41
62390: PUSH
62391: LD_VAR 0 42
62395: PUSH
62396: LD_VAR 0 43
62400: PUSH
62401: LD_VAR 0 44
62405: PUSH
62406: LD_VAR 0 45
62410: PUSH
62411: LD_VAR 0 46
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: PUSH
62424: LD_VAR 0 4
62428: PUSH
62429: LD_INT 1
62431: PLUS
62432: ARRAY
62433: ST_TO_ADDR
62434: GO 62689
62436: LD_INT 36
62438: DOUBLE
62439: EQUAL
62440: IFTRUE 62444
62442: GO 62500
62444: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62445: LD_ADDR_VAR 0 9
62449: PUSH
62450: LD_VAR 0 47
62454: PUSH
62455: LD_VAR 0 48
62459: PUSH
62460: LD_VAR 0 49
62464: PUSH
62465: LD_VAR 0 50
62469: PUSH
62470: LD_VAR 0 51
62474: PUSH
62475: LD_VAR 0 52
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: PUSH
62488: LD_VAR 0 4
62492: PUSH
62493: LD_INT 1
62495: PLUS
62496: ARRAY
62497: ST_TO_ADDR
62498: GO 62689
62500: LD_INT 4
62502: DOUBLE
62503: EQUAL
62504: IFTRUE 62526
62506: LD_INT 5
62508: DOUBLE
62509: EQUAL
62510: IFTRUE 62526
62512: LD_INT 34
62514: DOUBLE
62515: EQUAL
62516: IFTRUE 62526
62518: LD_INT 37
62520: DOUBLE
62521: EQUAL
62522: IFTRUE 62526
62524: GO 62582
62526: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62527: LD_ADDR_VAR 0 9
62531: PUSH
62532: LD_VAR 0 53
62536: PUSH
62537: LD_VAR 0 54
62541: PUSH
62542: LD_VAR 0 55
62546: PUSH
62547: LD_VAR 0 56
62551: PUSH
62552: LD_VAR 0 57
62556: PUSH
62557: LD_VAR 0 58
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: PUSH
62570: LD_VAR 0 4
62574: PUSH
62575: LD_INT 1
62577: PLUS
62578: ARRAY
62579: ST_TO_ADDR
62580: GO 62689
62582: LD_INT 31
62584: DOUBLE
62585: EQUAL
62586: IFTRUE 62632
62588: LD_INT 32
62590: DOUBLE
62591: EQUAL
62592: IFTRUE 62632
62594: LD_INT 33
62596: DOUBLE
62597: EQUAL
62598: IFTRUE 62632
62600: LD_INT 27
62602: DOUBLE
62603: EQUAL
62604: IFTRUE 62632
62606: LD_INT 26
62608: DOUBLE
62609: EQUAL
62610: IFTRUE 62632
62612: LD_INT 28
62614: DOUBLE
62615: EQUAL
62616: IFTRUE 62632
62618: LD_INT 29
62620: DOUBLE
62621: EQUAL
62622: IFTRUE 62632
62624: LD_INT 30
62626: DOUBLE
62627: EQUAL
62628: IFTRUE 62632
62630: GO 62688
62632: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62633: LD_ADDR_VAR 0 9
62637: PUSH
62638: LD_VAR 0 59
62642: PUSH
62643: LD_VAR 0 60
62647: PUSH
62648: LD_VAR 0 61
62652: PUSH
62653: LD_VAR 0 62
62657: PUSH
62658: LD_VAR 0 63
62662: PUSH
62663: LD_VAR 0 64
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: PUSH
62676: LD_VAR 0 4
62680: PUSH
62681: LD_INT 1
62683: PLUS
62684: ARRAY
62685: ST_TO_ADDR
62686: GO 62689
62688: POP
// temp_list2 = [ ] ;
62689: LD_ADDR_VAR 0 10
62693: PUSH
62694: EMPTY
62695: ST_TO_ADDR
// for i in temp_list do
62696: LD_ADDR_VAR 0 8
62700: PUSH
62701: LD_VAR 0 9
62705: PUSH
62706: FOR_IN
62707: IFFALSE 62759
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62709: LD_ADDR_VAR 0 10
62713: PUSH
62714: LD_VAR 0 10
62718: PUSH
62719: LD_VAR 0 8
62723: PUSH
62724: LD_INT 1
62726: ARRAY
62727: PUSH
62728: LD_VAR 0 2
62732: PLUS
62733: PUSH
62734: LD_VAR 0 8
62738: PUSH
62739: LD_INT 2
62741: ARRAY
62742: PUSH
62743: LD_VAR 0 3
62747: PLUS
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: EMPTY
62754: LIST
62755: ADD
62756: ST_TO_ADDR
62757: GO 62706
62759: POP
62760: POP
// result = temp_list2 ;
62761: LD_ADDR_VAR 0 7
62765: PUSH
62766: LD_VAR 0 10
62770: ST_TO_ADDR
// end ;
62771: LD_VAR 0 7
62775: RET
// export function EnemyInRange ( unit , dist ) ; begin
62776: LD_INT 0
62778: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62779: LD_ADDR_VAR 0 3
62783: PUSH
62784: LD_VAR 0 1
62788: PPUSH
62789: CALL_OW 255
62793: PPUSH
62794: LD_VAR 0 1
62798: PPUSH
62799: CALL_OW 250
62803: PPUSH
62804: LD_VAR 0 1
62808: PPUSH
62809: CALL_OW 251
62813: PPUSH
62814: LD_VAR 0 2
62818: PPUSH
62819: CALL 36880 0 4
62823: PUSH
62824: LD_INT 4
62826: ARRAY
62827: ST_TO_ADDR
// end ;
62828: LD_VAR 0 3
62832: RET
// export function PlayerSeeMe ( unit ) ; begin
62833: LD_INT 0
62835: PPUSH
// result := See ( your_side , unit ) ;
62836: LD_ADDR_VAR 0 2
62840: PUSH
62841: LD_OWVAR 2
62845: PPUSH
62846: LD_VAR 0 1
62850: PPUSH
62851: CALL_OW 292
62855: ST_TO_ADDR
// end ;
62856: LD_VAR 0 2
62860: RET
// export function ReverseDir ( unit ) ; begin
62861: LD_INT 0
62863: PPUSH
// if not unit then
62864: LD_VAR 0 1
62868: NOT
62869: IFFALSE 62873
// exit ;
62871: GO 62896
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62873: LD_ADDR_VAR 0 2
62877: PUSH
62878: LD_VAR 0 1
62882: PPUSH
62883: CALL_OW 254
62887: PUSH
62888: LD_INT 3
62890: PLUS
62891: PUSH
62892: LD_INT 6
62894: MOD
62895: ST_TO_ADDR
// end ;
62896: LD_VAR 0 2
62900: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62901: LD_INT 0
62903: PPUSH
62904: PPUSH
62905: PPUSH
62906: PPUSH
62907: PPUSH
// if not hexes then
62908: LD_VAR 0 2
62912: NOT
62913: IFFALSE 62917
// exit ;
62915: GO 63065
// dist := 9999 ;
62917: LD_ADDR_VAR 0 5
62921: PUSH
62922: LD_INT 9999
62924: ST_TO_ADDR
// for i = 1 to hexes do
62925: LD_ADDR_VAR 0 4
62929: PUSH
62930: DOUBLE
62931: LD_INT 1
62933: DEC
62934: ST_TO_ADDR
62935: LD_VAR 0 2
62939: PUSH
62940: FOR_TO
62941: IFFALSE 63053
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62943: LD_VAR 0 1
62947: PPUSH
62948: LD_VAR 0 2
62952: PUSH
62953: LD_VAR 0 4
62957: ARRAY
62958: PUSH
62959: LD_INT 1
62961: ARRAY
62962: PPUSH
62963: LD_VAR 0 2
62967: PUSH
62968: LD_VAR 0 4
62972: ARRAY
62973: PUSH
62974: LD_INT 2
62976: ARRAY
62977: PPUSH
62978: CALL_OW 297
62982: PUSH
62983: LD_VAR 0 5
62987: LESS
62988: IFFALSE 63051
// begin hex := hexes [ i ] ;
62990: LD_ADDR_VAR 0 7
62994: PUSH
62995: LD_VAR 0 2
62999: PUSH
63000: LD_VAR 0 4
63004: ARRAY
63005: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63006: LD_ADDR_VAR 0 5
63010: PUSH
63011: LD_VAR 0 1
63015: PPUSH
63016: LD_VAR 0 2
63020: PUSH
63021: LD_VAR 0 4
63025: ARRAY
63026: PUSH
63027: LD_INT 1
63029: ARRAY
63030: PPUSH
63031: LD_VAR 0 2
63035: PUSH
63036: LD_VAR 0 4
63040: ARRAY
63041: PUSH
63042: LD_INT 2
63044: ARRAY
63045: PPUSH
63046: CALL_OW 297
63050: ST_TO_ADDR
// end ; end ;
63051: GO 62940
63053: POP
63054: POP
// result := hex ;
63055: LD_ADDR_VAR 0 3
63059: PUSH
63060: LD_VAR 0 7
63064: ST_TO_ADDR
// end ;
63065: LD_VAR 0 3
63069: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63070: LD_INT 0
63072: PPUSH
63073: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63074: LD_VAR 0 1
63078: NOT
63079: PUSH
63080: LD_VAR 0 1
63084: PUSH
63085: LD_INT 21
63087: PUSH
63088: LD_INT 2
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 23
63097: PUSH
63098: LD_INT 2
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PPUSH
63109: CALL_OW 69
63113: IN
63114: NOT
63115: OR
63116: IFFALSE 63120
// exit ;
63118: GO 63167
// for i = 1 to 3 do
63120: LD_ADDR_VAR 0 3
63124: PUSH
63125: DOUBLE
63126: LD_INT 1
63128: DEC
63129: ST_TO_ADDR
63130: LD_INT 3
63132: PUSH
63133: FOR_TO
63134: IFFALSE 63165
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63136: LD_VAR 0 1
63140: PPUSH
63141: CALL_OW 250
63145: PPUSH
63146: LD_VAR 0 1
63150: PPUSH
63151: CALL_OW 251
63155: PPUSH
63156: LD_INT 1
63158: PPUSH
63159: CALL_OW 453
63163: GO 63133
63165: POP
63166: POP
// end ;
63167: LD_VAR 0 2
63171: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63172: LD_INT 0
63174: PPUSH
63175: PPUSH
63176: PPUSH
63177: PPUSH
63178: PPUSH
63179: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63180: LD_VAR 0 1
63184: NOT
63185: PUSH
63186: LD_VAR 0 2
63190: NOT
63191: OR
63192: PUSH
63193: LD_VAR 0 1
63197: PPUSH
63198: CALL_OW 314
63202: OR
63203: IFFALSE 63207
// exit ;
63205: GO 63648
// x := GetX ( enemy_unit ) ;
63207: LD_ADDR_VAR 0 7
63211: PUSH
63212: LD_VAR 0 2
63216: PPUSH
63217: CALL_OW 250
63221: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63222: LD_ADDR_VAR 0 8
63226: PUSH
63227: LD_VAR 0 2
63231: PPUSH
63232: CALL_OW 251
63236: ST_TO_ADDR
// if not x or not y then
63237: LD_VAR 0 7
63241: NOT
63242: PUSH
63243: LD_VAR 0 8
63247: NOT
63248: OR
63249: IFFALSE 63253
// exit ;
63251: GO 63648
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63253: LD_ADDR_VAR 0 6
63257: PUSH
63258: LD_VAR 0 7
63262: PPUSH
63263: LD_INT 0
63265: PPUSH
63266: LD_INT 4
63268: PPUSH
63269: CALL_OW 272
63273: PUSH
63274: LD_VAR 0 8
63278: PPUSH
63279: LD_INT 0
63281: PPUSH
63282: LD_INT 4
63284: PPUSH
63285: CALL_OW 273
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_VAR 0 7
63298: PPUSH
63299: LD_INT 1
63301: PPUSH
63302: LD_INT 4
63304: PPUSH
63305: CALL_OW 272
63309: PUSH
63310: LD_VAR 0 8
63314: PPUSH
63315: LD_INT 1
63317: PPUSH
63318: LD_INT 4
63320: PPUSH
63321: CALL_OW 273
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_VAR 0 7
63334: PPUSH
63335: LD_INT 2
63337: PPUSH
63338: LD_INT 4
63340: PPUSH
63341: CALL_OW 272
63345: PUSH
63346: LD_VAR 0 8
63350: PPUSH
63351: LD_INT 2
63353: PPUSH
63354: LD_INT 4
63356: PPUSH
63357: CALL_OW 273
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_VAR 0 7
63370: PPUSH
63371: LD_INT 3
63373: PPUSH
63374: LD_INT 4
63376: PPUSH
63377: CALL_OW 272
63381: PUSH
63382: LD_VAR 0 8
63386: PPUSH
63387: LD_INT 3
63389: PPUSH
63390: LD_INT 4
63392: PPUSH
63393: CALL_OW 273
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_VAR 0 7
63406: PPUSH
63407: LD_INT 4
63409: PPUSH
63410: LD_INT 4
63412: PPUSH
63413: CALL_OW 272
63417: PUSH
63418: LD_VAR 0 8
63422: PPUSH
63423: LD_INT 4
63425: PPUSH
63426: LD_INT 4
63428: PPUSH
63429: CALL_OW 273
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_VAR 0 7
63442: PPUSH
63443: LD_INT 5
63445: PPUSH
63446: LD_INT 4
63448: PPUSH
63449: CALL_OW 272
63453: PUSH
63454: LD_VAR 0 8
63458: PPUSH
63459: LD_INT 5
63461: PPUSH
63462: LD_INT 4
63464: PPUSH
63465: CALL_OW 273
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: ST_TO_ADDR
// for i = tmp downto 1 do
63482: LD_ADDR_VAR 0 4
63486: PUSH
63487: DOUBLE
63488: LD_VAR 0 6
63492: INC
63493: ST_TO_ADDR
63494: LD_INT 1
63496: PUSH
63497: FOR_DOWNTO
63498: IFFALSE 63599
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63500: LD_VAR 0 6
63504: PUSH
63505: LD_VAR 0 4
63509: ARRAY
63510: PUSH
63511: LD_INT 1
63513: ARRAY
63514: PPUSH
63515: LD_VAR 0 6
63519: PUSH
63520: LD_VAR 0 4
63524: ARRAY
63525: PUSH
63526: LD_INT 2
63528: ARRAY
63529: PPUSH
63530: CALL_OW 488
63534: NOT
63535: PUSH
63536: LD_VAR 0 6
63540: PUSH
63541: LD_VAR 0 4
63545: ARRAY
63546: PUSH
63547: LD_INT 1
63549: ARRAY
63550: PPUSH
63551: LD_VAR 0 6
63555: PUSH
63556: LD_VAR 0 4
63560: ARRAY
63561: PUSH
63562: LD_INT 2
63564: ARRAY
63565: PPUSH
63566: CALL_OW 428
63570: PUSH
63571: LD_INT 0
63573: NONEQUAL
63574: OR
63575: IFFALSE 63597
// tmp := Delete ( tmp , i ) ;
63577: LD_ADDR_VAR 0 6
63581: PUSH
63582: LD_VAR 0 6
63586: PPUSH
63587: LD_VAR 0 4
63591: PPUSH
63592: CALL_OW 3
63596: ST_TO_ADDR
63597: GO 63497
63599: POP
63600: POP
// j := GetClosestHex ( unit , tmp ) ;
63601: LD_ADDR_VAR 0 5
63605: PUSH
63606: LD_VAR 0 1
63610: PPUSH
63611: LD_VAR 0 6
63615: PPUSH
63616: CALL 62901 0 2
63620: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63621: LD_VAR 0 1
63625: PPUSH
63626: LD_VAR 0 5
63630: PUSH
63631: LD_INT 1
63633: ARRAY
63634: PPUSH
63635: LD_VAR 0 5
63639: PUSH
63640: LD_INT 2
63642: ARRAY
63643: PPUSH
63644: CALL_OW 111
// end ;
63648: LD_VAR 0 3
63652: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63653: LD_INT 0
63655: PPUSH
63656: PPUSH
63657: PPUSH
// uc_side = 0 ;
63658: LD_ADDR_OWVAR 20
63662: PUSH
63663: LD_INT 0
63665: ST_TO_ADDR
// uc_nation = 0 ;
63666: LD_ADDR_OWVAR 21
63670: PUSH
63671: LD_INT 0
63673: ST_TO_ADDR
// InitHc_All ( ) ;
63674: CALL_OW 584
// InitVc ;
63678: CALL_OW 20
// if mastodonts then
63682: LD_VAR 0 6
63686: IFFALSE 63753
// for i = 1 to mastodonts do
63688: LD_ADDR_VAR 0 11
63692: PUSH
63693: DOUBLE
63694: LD_INT 1
63696: DEC
63697: ST_TO_ADDR
63698: LD_VAR 0 6
63702: PUSH
63703: FOR_TO
63704: IFFALSE 63751
// begin vc_chassis := 31 ;
63706: LD_ADDR_OWVAR 37
63710: PUSH
63711: LD_INT 31
63713: ST_TO_ADDR
// vc_control := control_rider ;
63714: LD_ADDR_OWVAR 38
63718: PUSH
63719: LD_INT 4
63721: ST_TO_ADDR
// animal := CreateVehicle ;
63722: LD_ADDR_VAR 0 12
63726: PUSH
63727: CALL_OW 45
63731: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63732: LD_VAR 0 12
63736: PPUSH
63737: LD_VAR 0 8
63741: PPUSH
63742: LD_INT 0
63744: PPUSH
63745: CALL 65941 0 3
// end ;
63749: GO 63703
63751: POP
63752: POP
// if horses then
63753: LD_VAR 0 5
63757: IFFALSE 63824
// for i = 1 to horses do
63759: LD_ADDR_VAR 0 11
63763: PUSH
63764: DOUBLE
63765: LD_INT 1
63767: DEC
63768: ST_TO_ADDR
63769: LD_VAR 0 5
63773: PUSH
63774: FOR_TO
63775: IFFALSE 63822
// begin hc_class := 21 ;
63777: LD_ADDR_OWVAR 28
63781: PUSH
63782: LD_INT 21
63784: ST_TO_ADDR
// hc_gallery :=  ;
63785: LD_ADDR_OWVAR 33
63789: PUSH
63790: LD_STRING 
63792: ST_TO_ADDR
// animal := CreateHuman ;
63793: LD_ADDR_VAR 0 12
63797: PUSH
63798: CALL_OW 44
63802: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63803: LD_VAR 0 12
63807: PPUSH
63808: LD_VAR 0 8
63812: PPUSH
63813: LD_INT 0
63815: PPUSH
63816: CALL 65941 0 3
// end ;
63820: GO 63774
63822: POP
63823: POP
// if birds then
63824: LD_VAR 0 1
63828: IFFALSE 63895
// for i = 1 to birds do
63830: LD_ADDR_VAR 0 11
63834: PUSH
63835: DOUBLE
63836: LD_INT 1
63838: DEC
63839: ST_TO_ADDR
63840: LD_VAR 0 1
63844: PUSH
63845: FOR_TO
63846: IFFALSE 63893
// begin hc_class = 18 ;
63848: LD_ADDR_OWVAR 28
63852: PUSH
63853: LD_INT 18
63855: ST_TO_ADDR
// hc_gallery =  ;
63856: LD_ADDR_OWVAR 33
63860: PUSH
63861: LD_STRING 
63863: ST_TO_ADDR
// animal := CreateHuman ;
63864: LD_ADDR_VAR 0 12
63868: PUSH
63869: CALL_OW 44
63873: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63874: LD_VAR 0 12
63878: PPUSH
63879: LD_VAR 0 8
63883: PPUSH
63884: LD_INT 0
63886: PPUSH
63887: CALL 65941 0 3
// end ;
63891: GO 63845
63893: POP
63894: POP
// if tigers then
63895: LD_VAR 0 2
63899: IFFALSE 63983
// for i = 1 to tigers do
63901: LD_ADDR_VAR 0 11
63905: PUSH
63906: DOUBLE
63907: LD_INT 1
63909: DEC
63910: ST_TO_ADDR
63911: LD_VAR 0 2
63915: PUSH
63916: FOR_TO
63917: IFFALSE 63981
// begin hc_class = class_tiger ;
63919: LD_ADDR_OWVAR 28
63923: PUSH
63924: LD_INT 14
63926: ST_TO_ADDR
// hc_gallery =  ;
63927: LD_ADDR_OWVAR 33
63931: PUSH
63932: LD_STRING 
63934: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63935: LD_ADDR_OWVAR 35
63939: PUSH
63940: LD_INT 7
63942: NEG
63943: PPUSH
63944: LD_INT 7
63946: PPUSH
63947: CALL_OW 12
63951: ST_TO_ADDR
// animal := CreateHuman ;
63952: LD_ADDR_VAR 0 12
63956: PUSH
63957: CALL_OW 44
63961: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63962: LD_VAR 0 12
63966: PPUSH
63967: LD_VAR 0 8
63971: PPUSH
63972: LD_INT 0
63974: PPUSH
63975: CALL 65941 0 3
// end ;
63979: GO 63916
63981: POP
63982: POP
// if apemans then
63983: LD_VAR 0 3
63987: IFFALSE 64110
// for i = 1 to apemans do
63989: LD_ADDR_VAR 0 11
63993: PUSH
63994: DOUBLE
63995: LD_INT 1
63997: DEC
63998: ST_TO_ADDR
63999: LD_VAR 0 3
64003: PUSH
64004: FOR_TO
64005: IFFALSE 64108
// begin hc_class = class_apeman ;
64007: LD_ADDR_OWVAR 28
64011: PUSH
64012: LD_INT 12
64014: ST_TO_ADDR
// hc_gallery =  ;
64015: LD_ADDR_OWVAR 33
64019: PUSH
64020: LD_STRING 
64022: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
64023: LD_ADDR_OWVAR 35
64027: PUSH
64028: LD_INT 5
64030: NEG
64031: PPUSH
64032: LD_INT 5
64034: PPUSH
64035: CALL_OW 12
64039: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64040: LD_ADDR_OWVAR 31
64044: PUSH
64045: LD_INT 1
64047: PPUSH
64048: LD_INT 3
64050: PPUSH
64051: CALL_OW 12
64055: PUSH
64056: LD_INT 1
64058: PPUSH
64059: LD_INT 3
64061: PPUSH
64062: CALL_OW 12
64066: PUSH
64067: LD_INT 0
64069: PUSH
64070: LD_INT 0
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: ST_TO_ADDR
// animal := CreateHuman ;
64079: LD_ADDR_VAR 0 12
64083: PUSH
64084: CALL_OW 44
64088: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64089: LD_VAR 0 12
64093: PPUSH
64094: LD_VAR 0 8
64098: PPUSH
64099: LD_INT 0
64101: PPUSH
64102: CALL 65941 0 3
// end ;
64106: GO 64004
64108: POP
64109: POP
// if enchidnas then
64110: LD_VAR 0 4
64114: IFFALSE 64181
// for i = 1 to enchidnas do
64116: LD_ADDR_VAR 0 11
64120: PUSH
64121: DOUBLE
64122: LD_INT 1
64124: DEC
64125: ST_TO_ADDR
64126: LD_VAR 0 4
64130: PUSH
64131: FOR_TO
64132: IFFALSE 64179
// begin hc_class = 13 ;
64134: LD_ADDR_OWVAR 28
64138: PUSH
64139: LD_INT 13
64141: ST_TO_ADDR
// hc_gallery =  ;
64142: LD_ADDR_OWVAR 33
64146: PUSH
64147: LD_STRING 
64149: ST_TO_ADDR
// animal := CreateHuman ;
64150: LD_ADDR_VAR 0 12
64154: PUSH
64155: CALL_OW 44
64159: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64160: LD_VAR 0 12
64164: PPUSH
64165: LD_VAR 0 8
64169: PPUSH
64170: LD_INT 0
64172: PPUSH
64173: CALL 65941 0 3
// end ;
64177: GO 64131
64179: POP
64180: POP
// if fishes then
64181: LD_VAR 0 7
64185: IFFALSE 64252
// for i = 1 to fishes do
64187: LD_ADDR_VAR 0 11
64191: PUSH
64192: DOUBLE
64193: LD_INT 1
64195: DEC
64196: ST_TO_ADDR
64197: LD_VAR 0 7
64201: PUSH
64202: FOR_TO
64203: IFFALSE 64250
// begin hc_class = 20 ;
64205: LD_ADDR_OWVAR 28
64209: PUSH
64210: LD_INT 20
64212: ST_TO_ADDR
// hc_gallery =  ;
64213: LD_ADDR_OWVAR 33
64217: PUSH
64218: LD_STRING 
64220: ST_TO_ADDR
// animal := CreateHuman ;
64221: LD_ADDR_VAR 0 12
64225: PUSH
64226: CALL_OW 44
64230: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64231: LD_VAR 0 12
64235: PPUSH
64236: LD_VAR 0 9
64240: PPUSH
64241: LD_INT 0
64243: PPUSH
64244: CALL 65941 0 3
// end ;
64248: GO 64202
64250: POP
64251: POP
// end ;
64252: LD_VAR 0 10
64256: RET
// export function WantHeal ( sci , unit ) ; begin
64257: LD_INT 0
64259: PPUSH
// if GetTaskList ( sci ) > 0 then
64260: LD_VAR 0 1
64264: PPUSH
64265: CALL_OW 437
64269: PUSH
64270: LD_INT 0
64272: GREATER
64273: IFFALSE 64343
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64275: LD_VAR 0 1
64279: PPUSH
64280: CALL_OW 437
64284: PUSH
64285: LD_INT 1
64287: ARRAY
64288: PUSH
64289: LD_INT 1
64291: ARRAY
64292: PUSH
64293: LD_STRING l
64295: EQUAL
64296: PUSH
64297: LD_VAR 0 1
64301: PPUSH
64302: CALL_OW 437
64306: PUSH
64307: LD_INT 1
64309: ARRAY
64310: PUSH
64311: LD_INT 4
64313: ARRAY
64314: PUSH
64315: LD_VAR 0 2
64319: EQUAL
64320: AND
64321: IFFALSE 64333
// result := true else
64323: LD_ADDR_VAR 0 3
64327: PUSH
64328: LD_INT 1
64330: ST_TO_ADDR
64331: GO 64341
// result := false ;
64333: LD_ADDR_VAR 0 3
64337: PUSH
64338: LD_INT 0
64340: ST_TO_ADDR
// end else
64341: GO 64351
// result := false ;
64343: LD_ADDR_VAR 0 3
64347: PUSH
64348: LD_INT 0
64350: ST_TO_ADDR
// end ;
64351: LD_VAR 0 3
64355: RET
// export function HealTarget ( sci ) ; begin
64356: LD_INT 0
64358: PPUSH
// if not sci then
64359: LD_VAR 0 1
64363: NOT
64364: IFFALSE 64368
// exit ;
64366: GO 64433
// result := 0 ;
64368: LD_ADDR_VAR 0 2
64372: PUSH
64373: LD_INT 0
64375: ST_TO_ADDR
// if GetTaskList ( sci ) then
64376: LD_VAR 0 1
64380: PPUSH
64381: CALL_OW 437
64385: IFFALSE 64433
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64387: LD_VAR 0 1
64391: PPUSH
64392: CALL_OW 437
64396: PUSH
64397: LD_INT 1
64399: ARRAY
64400: PUSH
64401: LD_INT 1
64403: ARRAY
64404: PUSH
64405: LD_STRING l
64407: EQUAL
64408: IFFALSE 64433
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64410: LD_ADDR_VAR 0 2
64414: PUSH
64415: LD_VAR 0 1
64419: PPUSH
64420: CALL_OW 437
64424: PUSH
64425: LD_INT 1
64427: ARRAY
64428: PUSH
64429: LD_INT 4
64431: ARRAY
64432: ST_TO_ADDR
// end ;
64433: LD_VAR 0 2
64437: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64438: LD_INT 0
64440: PPUSH
64441: PPUSH
64442: PPUSH
64443: PPUSH
// if not base_units then
64444: LD_VAR 0 1
64448: NOT
64449: IFFALSE 64453
// exit ;
64451: GO 64540
// result := false ;
64453: LD_ADDR_VAR 0 2
64457: PUSH
64458: LD_INT 0
64460: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64461: LD_ADDR_VAR 0 5
64465: PUSH
64466: LD_VAR 0 1
64470: PPUSH
64471: LD_INT 21
64473: PUSH
64474: LD_INT 3
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PPUSH
64481: CALL_OW 72
64485: ST_TO_ADDR
// if not tmp then
64486: LD_VAR 0 5
64490: NOT
64491: IFFALSE 64495
// exit ;
64493: GO 64540
// for i in tmp do
64495: LD_ADDR_VAR 0 3
64499: PUSH
64500: LD_VAR 0 5
64504: PUSH
64505: FOR_IN
64506: IFFALSE 64538
// begin result := EnemyInRange ( i , 22 ) ;
64508: LD_ADDR_VAR 0 2
64512: PUSH
64513: LD_VAR 0 3
64517: PPUSH
64518: LD_INT 22
64520: PPUSH
64521: CALL 62776 0 2
64525: ST_TO_ADDR
// if result then
64526: LD_VAR 0 2
64530: IFFALSE 64536
// exit ;
64532: POP
64533: POP
64534: GO 64540
// end ;
64536: GO 64505
64538: POP
64539: POP
// end ;
64540: LD_VAR 0 2
64544: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
64545: LD_INT 0
64547: PPUSH
64548: PPUSH
// if not units then
64549: LD_VAR 0 1
64553: NOT
64554: IFFALSE 64558
// exit ;
64556: GO 64628
// result := [ ] ;
64558: LD_ADDR_VAR 0 3
64562: PUSH
64563: EMPTY
64564: ST_TO_ADDR
// for i in units do
64565: LD_ADDR_VAR 0 4
64569: PUSH
64570: LD_VAR 0 1
64574: PUSH
64575: FOR_IN
64576: IFFALSE 64626
// if GetTag ( i ) = tag then
64578: LD_VAR 0 4
64582: PPUSH
64583: CALL_OW 110
64587: PUSH
64588: LD_VAR 0 2
64592: EQUAL
64593: IFFALSE 64624
// result := Insert ( result , result + 1 , i ) ;
64595: LD_ADDR_VAR 0 3
64599: PUSH
64600: LD_VAR 0 3
64604: PPUSH
64605: LD_VAR 0 3
64609: PUSH
64610: LD_INT 1
64612: PLUS
64613: PPUSH
64614: LD_VAR 0 4
64618: PPUSH
64619: CALL_OW 2
64623: ST_TO_ADDR
64624: GO 64575
64626: POP
64627: POP
// end ;
64628: LD_VAR 0 3
64632: RET
// export function IsDriver ( un ) ; begin
64633: LD_INT 0
64635: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64636: LD_ADDR_VAR 0 2
64640: PUSH
64641: LD_VAR 0 1
64645: PUSH
64646: LD_INT 55
64648: PUSH
64649: EMPTY
64650: LIST
64651: PPUSH
64652: CALL_OW 69
64656: IN
64657: ST_TO_ADDR
// end ;
64658: LD_VAR 0 2
64662: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64663: LD_INT 0
64665: PPUSH
64666: PPUSH
// list := [ ] ;
64667: LD_ADDR_VAR 0 5
64671: PUSH
64672: EMPTY
64673: ST_TO_ADDR
// case d of 0 :
64674: LD_VAR 0 3
64678: PUSH
64679: LD_INT 0
64681: DOUBLE
64682: EQUAL
64683: IFTRUE 64687
64685: GO 64820
64687: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64688: LD_ADDR_VAR 0 5
64692: PUSH
64693: LD_VAR 0 1
64697: PUSH
64698: LD_INT 4
64700: MINUS
64701: PUSH
64702: LD_VAR 0 2
64706: PUSH
64707: LD_INT 4
64709: MINUS
64710: PUSH
64711: LD_INT 2
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: LIST
64718: PUSH
64719: LD_VAR 0 1
64723: PUSH
64724: LD_INT 3
64726: MINUS
64727: PUSH
64728: LD_VAR 0 2
64732: PUSH
64733: LD_INT 1
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: LIST
64740: PUSH
64741: LD_VAR 0 1
64745: PUSH
64746: LD_INT 4
64748: PLUS
64749: PUSH
64750: LD_VAR 0 2
64754: PUSH
64755: LD_INT 4
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: LIST
64762: PUSH
64763: LD_VAR 0 1
64767: PUSH
64768: LD_INT 3
64770: PLUS
64771: PUSH
64772: LD_VAR 0 2
64776: PUSH
64777: LD_INT 3
64779: PLUS
64780: PUSH
64781: LD_INT 5
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: LIST
64788: PUSH
64789: LD_VAR 0 1
64793: PUSH
64794: LD_VAR 0 2
64798: PUSH
64799: LD_INT 4
64801: PLUS
64802: PUSH
64803: LD_INT 0
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: LIST
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: ST_TO_ADDR
// end ; 1 :
64818: GO 65518
64820: LD_INT 1
64822: DOUBLE
64823: EQUAL
64824: IFTRUE 64828
64826: GO 64961
64828: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64829: LD_ADDR_VAR 0 5
64833: PUSH
64834: LD_VAR 0 1
64838: PUSH
64839: LD_VAR 0 2
64843: PUSH
64844: LD_INT 4
64846: MINUS
64847: PUSH
64848: LD_INT 3
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: LIST
64855: PUSH
64856: LD_VAR 0 1
64860: PUSH
64861: LD_INT 3
64863: MINUS
64864: PUSH
64865: LD_VAR 0 2
64869: PUSH
64870: LD_INT 3
64872: MINUS
64873: PUSH
64874: LD_INT 2
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: LIST
64881: PUSH
64882: LD_VAR 0 1
64886: PUSH
64887: LD_INT 4
64889: MINUS
64890: PUSH
64891: LD_VAR 0 2
64895: PUSH
64896: LD_INT 1
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: LIST
64903: PUSH
64904: LD_VAR 0 1
64908: PUSH
64909: LD_VAR 0 2
64913: PUSH
64914: LD_INT 3
64916: PLUS
64917: PUSH
64918: LD_INT 0
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: LIST
64925: PUSH
64926: LD_VAR 0 1
64930: PUSH
64931: LD_INT 4
64933: PLUS
64934: PUSH
64935: LD_VAR 0 2
64939: PUSH
64940: LD_INT 4
64942: PLUS
64943: PUSH
64944: LD_INT 5
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: LIST
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: ST_TO_ADDR
// end ; 2 :
64959: GO 65518
64961: LD_INT 2
64963: DOUBLE
64964: EQUAL
64965: IFTRUE 64969
64967: GO 65098
64969: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64970: LD_ADDR_VAR 0 5
64974: PUSH
64975: LD_VAR 0 1
64979: PUSH
64980: LD_VAR 0 2
64984: PUSH
64985: LD_INT 3
64987: MINUS
64988: PUSH
64989: LD_INT 3
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: LIST
64996: PUSH
64997: LD_VAR 0 1
65001: PUSH
65002: LD_INT 4
65004: PLUS
65005: PUSH
65006: LD_VAR 0 2
65010: PUSH
65011: LD_INT 4
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: LIST
65018: PUSH
65019: LD_VAR 0 1
65023: PUSH
65024: LD_VAR 0 2
65028: PUSH
65029: LD_INT 4
65031: PLUS
65032: PUSH
65033: LD_INT 0
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: LIST
65040: PUSH
65041: LD_VAR 0 1
65045: PUSH
65046: LD_INT 3
65048: MINUS
65049: PUSH
65050: LD_VAR 0 2
65054: PUSH
65055: LD_INT 1
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: LIST
65062: PUSH
65063: LD_VAR 0 1
65067: PUSH
65068: LD_INT 4
65070: MINUS
65071: PUSH
65072: LD_VAR 0 2
65076: PUSH
65077: LD_INT 4
65079: MINUS
65080: PUSH
65081: LD_INT 2
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: LIST
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: ST_TO_ADDR
// end ; 3 :
65096: GO 65518
65098: LD_INT 3
65100: DOUBLE
65101: EQUAL
65102: IFTRUE 65106
65104: GO 65239
65106: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65107: LD_ADDR_VAR 0 5
65111: PUSH
65112: LD_VAR 0 1
65116: PUSH
65117: LD_INT 3
65119: PLUS
65120: PUSH
65121: LD_VAR 0 2
65125: PUSH
65126: LD_INT 4
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: LIST
65133: PUSH
65134: LD_VAR 0 1
65138: PUSH
65139: LD_INT 4
65141: PLUS
65142: PUSH
65143: LD_VAR 0 2
65147: PUSH
65148: LD_INT 4
65150: PLUS
65151: PUSH
65152: LD_INT 5
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: LIST
65159: PUSH
65160: LD_VAR 0 1
65164: PUSH
65165: LD_INT 4
65167: MINUS
65168: PUSH
65169: LD_VAR 0 2
65173: PUSH
65174: LD_INT 1
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: LIST
65181: PUSH
65182: LD_VAR 0 1
65186: PUSH
65187: LD_VAR 0 2
65191: PUSH
65192: LD_INT 4
65194: MINUS
65195: PUSH
65196: LD_INT 3
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: LIST
65203: PUSH
65204: LD_VAR 0 1
65208: PUSH
65209: LD_INT 3
65211: MINUS
65212: PUSH
65213: LD_VAR 0 2
65217: PUSH
65218: LD_INT 3
65220: MINUS
65221: PUSH
65222: LD_INT 2
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: LIST
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: ST_TO_ADDR
// end ; 4 :
65237: GO 65518
65239: LD_INT 4
65241: DOUBLE
65242: EQUAL
65243: IFTRUE 65247
65245: GO 65380
65247: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65248: LD_ADDR_VAR 0 5
65252: PUSH
65253: LD_VAR 0 1
65257: PUSH
65258: LD_VAR 0 2
65262: PUSH
65263: LD_INT 4
65265: PLUS
65266: PUSH
65267: LD_INT 0
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: LIST
65274: PUSH
65275: LD_VAR 0 1
65279: PUSH
65280: LD_INT 3
65282: PLUS
65283: PUSH
65284: LD_VAR 0 2
65288: PUSH
65289: LD_INT 3
65291: PLUS
65292: PUSH
65293: LD_INT 5
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: LIST
65300: PUSH
65301: LD_VAR 0 1
65305: PUSH
65306: LD_INT 4
65308: PLUS
65309: PUSH
65310: LD_VAR 0 2
65314: PUSH
65315: LD_INT 4
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: LIST
65322: PUSH
65323: LD_VAR 0 1
65327: PUSH
65328: LD_VAR 0 2
65332: PUSH
65333: LD_INT 3
65335: MINUS
65336: PUSH
65337: LD_INT 3
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: LIST
65344: PUSH
65345: LD_VAR 0 1
65349: PUSH
65350: LD_INT 4
65352: MINUS
65353: PUSH
65354: LD_VAR 0 2
65358: PUSH
65359: LD_INT 4
65361: MINUS
65362: PUSH
65363: LD_INT 2
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: LIST
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: ST_TO_ADDR
// end ; 5 :
65378: GO 65518
65380: LD_INT 5
65382: DOUBLE
65383: EQUAL
65384: IFTRUE 65388
65386: GO 65517
65388: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65389: LD_ADDR_VAR 0 5
65393: PUSH
65394: LD_VAR 0 1
65398: PUSH
65399: LD_INT 4
65401: MINUS
65402: PUSH
65403: LD_VAR 0 2
65407: PUSH
65408: LD_INT 1
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: LIST
65415: PUSH
65416: LD_VAR 0 1
65420: PUSH
65421: LD_VAR 0 2
65425: PUSH
65426: LD_INT 4
65428: MINUS
65429: PUSH
65430: LD_INT 3
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: LIST
65437: PUSH
65438: LD_VAR 0 1
65442: PUSH
65443: LD_INT 4
65445: PLUS
65446: PUSH
65447: LD_VAR 0 2
65451: PUSH
65452: LD_INT 4
65454: PLUS
65455: PUSH
65456: LD_INT 5
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: LIST
65463: PUSH
65464: LD_VAR 0 1
65468: PUSH
65469: LD_INT 3
65471: PLUS
65472: PUSH
65473: LD_VAR 0 2
65477: PUSH
65478: LD_INT 4
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: LIST
65485: PUSH
65486: LD_VAR 0 1
65490: PUSH
65491: LD_VAR 0 2
65495: PUSH
65496: LD_INT 3
65498: PLUS
65499: PUSH
65500: LD_INT 0
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: LIST
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: ST_TO_ADDR
// end ; end ;
65515: GO 65518
65517: POP
// result := list ;
65518: LD_ADDR_VAR 0 4
65522: PUSH
65523: LD_VAR 0 5
65527: ST_TO_ADDR
// end ;
65528: LD_VAR 0 4
65532: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65533: LD_INT 0
65535: PPUSH
65536: PPUSH
65537: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65538: LD_VAR 0 1
65542: NOT
65543: PUSH
65544: LD_VAR 0 2
65548: PUSH
65549: LD_INT 1
65551: PUSH
65552: LD_INT 2
65554: PUSH
65555: LD_INT 3
65557: PUSH
65558: LD_INT 4
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: IN
65567: NOT
65568: OR
65569: IFFALSE 65573
// exit ;
65571: GO 65665
// tmp := [ ] ;
65573: LD_ADDR_VAR 0 5
65577: PUSH
65578: EMPTY
65579: ST_TO_ADDR
// for i in units do
65580: LD_ADDR_VAR 0 4
65584: PUSH
65585: LD_VAR 0 1
65589: PUSH
65590: FOR_IN
65591: IFFALSE 65634
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65593: LD_ADDR_VAR 0 5
65597: PUSH
65598: LD_VAR 0 5
65602: PPUSH
65603: LD_VAR 0 5
65607: PUSH
65608: LD_INT 1
65610: PLUS
65611: PPUSH
65612: LD_VAR 0 4
65616: PPUSH
65617: LD_VAR 0 2
65621: PPUSH
65622: CALL_OW 259
65626: PPUSH
65627: CALL_OW 2
65631: ST_TO_ADDR
65632: GO 65590
65634: POP
65635: POP
// if not tmp then
65636: LD_VAR 0 5
65640: NOT
65641: IFFALSE 65645
// exit ;
65643: GO 65665
// result := SortListByListDesc ( units , tmp ) ;
65645: LD_ADDR_VAR 0 3
65649: PUSH
65650: LD_VAR 0 1
65654: PPUSH
65655: LD_VAR 0 5
65659: PPUSH
65660: CALL_OW 77
65664: ST_TO_ADDR
// end ;
65665: LD_VAR 0 3
65669: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65670: LD_INT 0
65672: PPUSH
65673: PPUSH
65674: PPUSH
// result := false ;
65675: LD_ADDR_VAR 0 3
65679: PUSH
65680: LD_INT 0
65682: ST_TO_ADDR
// x := GetX ( building ) ;
65683: LD_ADDR_VAR 0 4
65687: PUSH
65688: LD_VAR 0 2
65692: PPUSH
65693: CALL_OW 250
65697: ST_TO_ADDR
// y := GetY ( building ) ;
65698: LD_ADDR_VAR 0 5
65702: PUSH
65703: LD_VAR 0 2
65707: PPUSH
65708: CALL_OW 251
65712: ST_TO_ADDR
// if not building or not x or not y then
65713: LD_VAR 0 2
65717: NOT
65718: PUSH
65719: LD_VAR 0 4
65723: NOT
65724: OR
65725: PUSH
65726: LD_VAR 0 5
65730: NOT
65731: OR
65732: IFFALSE 65736
// exit ;
65734: GO 65828
// if GetTaskList ( unit ) then
65736: LD_VAR 0 1
65740: PPUSH
65741: CALL_OW 437
65745: IFFALSE 65828
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65747: LD_STRING e
65749: PUSH
65750: LD_VAR 0 1
65754: PPUSH
65755: CALL_OW 437
65759: PUSH
65760: LD_INT 1
65762: ARRAY
65763: PUSH
65764: LD_INT 1
65766: ARRAY
65767: EQUAL
65768: PUSH
65769: LD_VAR 0 4
65773: PUSH
65774: LD_VAR 0 1
65778: PPUSH
65779: CALL_OW 437
65783: PUSH
65784: LD_INT 1
65786: ARRAY
65787: PUSH
65788: LD_INT 2
65790: ARRAY
65791: EQUAL
65792: AND
65793: PUSH
65794: LD_VAR 0 5
65798: PUSH
65799: LD_VAR 0 1
65803: PPUSH
65804: CALL_OW 437
65808: PUSH
65809: LD_INT 1
65811: ARRAY
65812: PUSH
65813: LD_INT 3
65815: ARRAY
65816: EQUAL
65817: AND
65818: IFFALSE 65828
// result := true end ;
65820: LD_ADDR_VAR 0 3
65824: PUSH
65825: LD_INT 1
65827: ST_TO_ADDR
// end ;
65828: LD_VAR 0 3
65832: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65833: LD_INT 0
65835: PPUSH
// result := false ;
65836: LD_ADDR_VAR 0 4
65840: PUSH
65841: LD_INT 0
65843: ST_TO_ADDR
// if GetTaskList ( unit ) then
65844: LD_VAR 0 1
65848: PPUSH
65849: CALL_OW 437
65853: IFFALSE 65936
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65855: LD_STRING M
65857: PUSH
65858: LD_VAR 0 1
65862: PPUSH
65863: CALL_OW 437
65867: PUSH
65868: LD_INT 1
65870: ARRAY
65871: PUSH
65872: LD_INT 1
65874: ARRAY
65875: EQUAL
65876: PUSH
65877: LD_VAR 0 2
65881: PUSH
65882: LD_VAR 0 1
65886: PPUSH
65887: CALL_OW 437
65891: PUSH
65892: LD_INT 1
65894: ARRAY
65895: PUSH
65896: LD_INT 2
65898: ARRAY
65899: EQUAL
65900: AND
65901: PUSH
65902: LD_VAR 0 3
65906: PUSH
65907: LD_VAR 0 1
65911: PPUSH
65912: CALL_OW 437
65916: PUSH
65917: LD_INT 1
65919: ARRAY
65920: PUSH
65921: LD_INT 3
65923: ARRAY
65924: EQUAL
65925: AND
65926: IFFALSE 65936
// result := true ;
65928: LD_ADDR_VAR 0 4
65932: PUSH
65933: LD_INT 1
65935: ST_TO_ADDR
// end ; end ;
65936: LD_VAR 0 4
65940: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65941: LD_INT 0
65943: PPUSH
65944: PPUSH
65945: PPUSH
65946: PPUSH
// if not unit or not area then
65947: LD_VAR 0 1
65951: NOT
65952: PUSH
65953: LD_VAR 0 2
65957: NOT
65958: OR
65959: IFFALSE 65963
// exit ;
65961: GO 66127
// tmp := AreaToList ( area , i ) ;
65963: LD_ADDR_VAR 0 6
65967: PUSH
65968: LD_VAR 0 2
65972: PPUSH
65973: LD_VAR 0 5
65977: PPUSH
65978: CALL_OW 517
65982: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65983: LD_ADDR_VAR 0 5
65987: PUSH
65988: DOUBLE
65989: LD_INT 1
65991: DEC
65992: ST_TO_ADDR
65993: LD_VAR 0 6
65997: PUSH
65998: LD_INT 1
66000: ARRAY
66001: PUSH
66002: FOR_TO
66003: IFFALSE 66125
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66005: LD_ADDR_VAR 0 7
66009: PUSH
66010: LD_VAR 0 6
66014: PUSH
66015: LD_INT 1
66017: ARRAY
66018: PUSH
66019: LD_VAR 0 5
66023: ARRAY
66024: PUSH
66025: LD_VAR 0 6
66029: PUSH
66030: LD_INT 2
66032: ARRAY
66033: PUSH
66034: LD_VAR 0 5
66038: ARRAY
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66044: LD_VAR 0 7
66048: PUSH
66049: LD_INT 1
66051: ARRAY
66052: PPUSH
66053: LD_VAR 0 7
66057: PUSH
66058: LD_INT 2
66060: ARRAY
66061: PPUSH
66062: CALL_OW 428
66066: PUSH
66067: LD_INT 0
66069: EQUAL
66070: IFFALSE 66123
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66072: LD_VAR 0 1
66076: PPUSH
66077: LD_VAR 0 7
66081: PUSH
66082: LD_INT 1
66084: ARRAY
66085: PPUSH
66086: LD_VAR 0 7
66090: PUSH
66091: LD_INT 2
66093: ARRAY
66094: PPUSH
66095: LD_VAR 0 3
66099: PPUSH
66100: CALL_OW 48
// result := IsPlaced ( unit ) ;
66104: LD_ADDR_VAR 0 4
66108: PUSH
66109: LD_VAR 0 1
66113: PPUSH
66114: CALL_OW 305
66118: ST_TO_ADDR
// exit ;
66119: POP
66120: POP
66121: GO 66127
// end ; end ;
66123: GO 66002
66125: POP
66126: POP
// end ;
66127: LD_VAR 0 4
66131: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66132: LD_INT 0
66134: PPUSH
66135: PPUSH
66136: PPUSH
// if not side or side > 8 then
66137: LD_VAR 0 1
66141: NOT
66142: PUSH
66143: LD_VAR 0 1
66147: PUSH
66148: LD_INT 8
66150: GREATER
66151: OR
66152: IFFALSE 66156
// exit ;
66154: GO 66343
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66156: LD_ADDR_VAR 0 4
66160: PUSH
66161: LD_INT 22
66163: PUSH
66164: LD_VAR 0 1
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 21
66175: PUSH
66176: LD_INT 3
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PPUSH
66187: CALL_OW 69
66191: ST_TO_ADDR
// if not tmp then
66192: LD_VAR 0 4
66196: NOT
66197: IFFALSE 66201
// exit ;
66199: GO 66343
// enable_addtolog := true ;
66201: LD_ADDR_OWVAR 81
66205: PUSH
66206: LD_INT 1
66208: ST_TO_ADDR
// AddToLog ( [ ) ;
66209: LD_STRING [
66211: PPUSH
66212: CALL_OW 561
// for i in tmp do
66216: LD_ADDR_VAR 0 3
66220: PUSH
66221: LD_VAR 0 4
66225: PUSH
66226: FOR_IN
66227: IFFALSE 66334
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66229: LD_STRING [
66231: PUSH
66232: LD_VAR 0 3
66236: PPUSH
66237: CALL_OW 266
66241: STR
66242: PUSH
66243: LD_STRING , 
66245: STR
66246: PUSH
66247: LD_VAR 0 3
66251: PPUSH
66252: CALL_OW 250
66256: STR
66257: PUSH
66258: LD_STRING , 
66260: STR
66261: PUSH
66262: LD_VAR 0 3
66266: PPUSH
66267: CALL_OW 251
66271: STR
66272: PUSH
66273: LD_STRING , 
66275: STR
66276: PUSH
66277: LD_VAR 0 3
66281: PPUSH
66282: CALL_OW 254
66286: STR
66287: PUSH
66288: LD_STRING , 
66290: STR
66291: PUSH
66292: LD_VAR 0 3
66296: PPUSH
66297: LD_INT 1
66299: PPUSH
66300: CALL_OW 268
66304: STR
66305: PUSH
66306: LD_STRING , 
66308: STR
66309: PUSH
66310: LD_VAR 0 3
66314: PPUSH
66315: LD_INT 2
66317: PPUSH
66318: CALL_OW 268
66322: STR
66323: PUSH
66324: LD_STRING ],
66326: STR
66327: PPUSH
66328: CALL_OW 561
// end ;
66332: GO 66226
66334: POP
66335: POP
// AddToLog ( ]; ) ;
66336: LD_STRING ];
66338: PPUSH
66339: CALL_OW 561
// end ;
66343: LD_VAR 0 2
66347: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66348: LD_INT 0
66350: PPUSH
66351: PPUSH
66352: PPUSH
66353: PPUSH
66354: PPUSH
// if not area or not rate or not max then
66355: LD_VAR 0 1
66359: NOT
66360: PUSH
66361: LD_VAR 0 2
66365: NOT
66366: OR
66367: PUSH
66368: LD_VAR 0 4
66372: NOT
66373: OR
66374: IFFALSE 66378
// exit ;
66376: GO 66570
// while 1 do
66378: LD_INT 1
66380: IFFALSE 66570
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66382: LD_ADDR_VAR 0 9
66386: PUSH
66387: LD_VAR 0 1
66391: PPUSH
66392: LD_INT 1
66394: PPUSH
66395: CALL_OW 287
66399: PUSH
66400: LD_INT 10
66402: MUL
66403: ST_TO_ADDR
// r := rate / 10 ;
66404: LD_ADDR_VAR 0 7
66408: PUSH
66409: LD_VAR 0 2
66413: PUSH
66414: LD_INT 10
66416: DIVREAL
66417: ST_TO_ADDR
// time := 1 1$00 ;
66418: LD_ADDR_VAR 0 8
66422: PUSH
66423: LD_INT 2100
66425: ST_TO_ADDR
// if amount < min then
66426: LD_VAR 0 9
66430: PUSH
66431: LD_VAR 0 3
66435: LESS
66436: IFFALSE 66454
// r := r * 2 else
66438: LD_ADDR_VAR 0 7
66442: PUSH
66443: LD_VAR 0 7
66447: PUSH
66448: LD_INT 2
66450: MUL
66451: ST_TO_ADDR
66452: GO 66480
// if amount > max then
66454: LD_VAR 0 9
66458: PUSH
66459: LD_VAR 0 4
66463: GREATER
66464: IFFALSE 66480
// r := r / 2 ;
66466: LD_ADDR_VAR 0 7
66470: PUSH
66471: LD_VAR 0 7
66475: PUSH
66476: LD_INT 2
66478: DIVREAL
66479: ST_TO_ADDR
// time := time / r ;
66480: LD_ADDR_VAR 0 8
66484: PUSH
66485: LD_VAR 0 8
66489: PUSH
66490: LD_VAR 0 7
66494: DIVREAL
66495: ST_TO_ADDR
// if time < 0 then
66496: LD_VAR 0 8
66500: PUSH
66501: LD_INT 0
66503: LESS
66504: IFFALSE 66521
// time := time * - 1 ;
66506: LD_ADDR_VAR 0 8
66510: PUSH
66511: LD_VAR 0 8
66515: PUSH
66516: LD_INT 1
66518: NEG
66519: MUL
66520: ST_TO_ADDR
// wait ( time ) ;
66521: LD_VAR 0 8
66525: PPUSH
66526: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
66530: LD_INT 35
66532: PPUSH
66533: LD_INT 875
66535: PPUSH
66536: CALL_OW 12
66540: PPUSH
66541: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66545: LD_INT 1
66547: PPUSH
66548: LD_INT 5
66550: PPUSH
66551: CALL_OW 12
66555: PPUSH
66556: LD_VAR 0 1
66560: PPUSH
66561: LD_INT 1
66563: PPUSH
66564: CALL_OW 55
// end ;
66568: GO 66378
// end ;
66570: LD_VAR 0 5
66574: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66575: LD_INT 0
66577: PPUSH
66578: PPUSH
66579: PPUSH
66580: PPUSH
66581: PPUSH
66582: PPUSH
66583: PPUSH
66584: PPUSH
// if not turrets or not factories then
66585: LD_VAR 0 1
66589: NOT
66590: PUSH
66591: LD_VAR 0 2
66595: NOT
66596: OR
66597: IFFALSE 66601
// exit ;
66599: GO 66908
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66601: LD_ADDR_VAR 0 10
66605: PUSH
66606: LD_INT 5
66608: PUSH
66609: LD_INT 6
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 2
66618: PUSH
66619: LD_INT 4
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 3
66628: PUSH
66629: LD_INT 5
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: LIST
66640: PUSH
66641: LD_INT 24
66643: PUSH
66644: LD_INT 25
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 23
66653: PUSH
66654: LD_INT 27
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 42
66667: PUSH
66668: LD_INT 43
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: LD_INT 44
66677: PUSH
66678: LD_INT 46
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: LD_INT 45
66687: PUSH
66688: LD_INT 47
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: LIST
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: LIST
66704: ST_TO_ADDR
// result := [ ] ;
66705: LD_ADDR_VAR 0 3
66709: PUSH
66710: EMPTY
66711: ST_TO_ADDR
// for i in turrets do
66712: LD_ADDR_VAR 0 4
66716: PUSH
66717: LD_VAR 0 1
66721: PUSH
66722: FOR_IN
66723: IFFALSE 66906
// begin nat := GetNation ( i ) ;
66725: LD_ADDR_VAR 0 7
66729: PUSH
66730: LD_VAR 0 4
66734: PPUSH
66735: CALL_OW 248
66739: ST_TO_ADDR
// weapon := 0 ;
66740: LD_ADDR_VAR 0 8
66744: PUSH
66745: LD_INT 0
66747: ST_TO_ADDR
// if not nat then
66748: LD_VAR 0 7
66752: NOT
66753: IFFALSE 66757
// continue ;
66755: GO 66722
// for j in list [ nat ] do
66757: LD_ADDR_VAR 0 5
66761: PUSH
66762: LD_VAR 0 10
66766: PUSH
66767: LD_VAR 0 7
66771: ARRAY
66772: PUSH
66773: FOR_IN
66774: IFFALSE 66815
// if GetBWeapon ( i ) = j [ 1 ] then
66776: LD_VAR 0 4
66780: PPUSH
66781: CALL_OW 269
66785: PUSH
66786: LD_VAR 0 5
66790: PUSH
66791: LD_INT 1
66793: ARRAY
66794: EQUAL
66795: IFFALSE 66813
// begin weapon := j [ 2 ] ;
66797: LD_ADDR_VAR 0 8
66801: PUSH
66802: LD_VAR 0 5
66806: PUSH
66807: LD_INT 2
66809: ARRAY
66810: ST_TO_ADDR
// break ;
66811: GO 66815
// end ;
66813: GO 66773
66815: POP
66816: POP
// if not weapon then
66817: LD_VAR 0 8
66821: NOT
66822: IFFALSE 66826
// continue ;
66824: GO 66722
// for k in factories do
66826: LD_ADDR_VAR 0 6
66830: PUSH
66831: LD_VAR 0 2
66835: PUSH
66836: FOR_IN
66837: IFFALSE 66902
// begin weapons := AvailableWeaponList ( k ) ;
66839: LD_ADDR_VAR 0 9
66843: PUSH
66844: LD_VAR 0 6
66848: PPUSH
66849: CALL_OW 478
66853: ST_TO_ADDR
// if not weapons then
66854: LD_VAR 0 9
66858: NOT
66859: IFFALSE 66863
// continue ;
66861: GO 66836
// if weapon in weapons then
66863: LD_VAR 0 8
66867: PUSH
66868: LD_VAR 0 9
66872: IN
66873: IFFALSE 66900
// begin result := [ i , weapon ] ;
66875: LD_ADDR_VAR 0 3
66879: PUSH
66880: LD_VAR 0 4
66884: PUSH
66885: LD_VAR 0 8
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: ST_TO_ADDR
// exit ;
66894: POP
66895: POP
66896: POP
66897: POP
66898: GO 66908
// end ; end ;
66900: GO 66836
66902: POP
66903: POP
// end ;
66904: GO 66722
66906: POP
66907: POP
// end ;
66908: LD_VAR 0 3
66912: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66913: LD_INT 0
66915: PPUSH
// if not side or side > 8 then
66916: LD_VAR 0 3
66920: NOT
66921: PUSH
66922: LD_VAR 0 3
66926: PUSH
66927: LD_INT 8
66929: GREATER
66930: OR
66931: IFFALSE 66935
// exit ;
66933: GO 66994
// if not range then
66935: LD_VAR 0 4
66939: NOT
66940: IFFALSE 66951
// range := - 12 ;
66942: LD_ADDR_VAR 0 4
66946: PUSH
66947: LD_INT 12
66949: NEG
66950: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66951: LD_VAR 0 1
66955: PPUSH
66956: LD_VAR 0 2
66960: PPUSH
66961: LD_VAR 0 3
66965: PPUSH
66966: LD_VAR 0 4
66970: PPUSH
66971: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66975: LD_VAR 0 1
66979: PPUSH
66980: LD_VAR 0 2
66984: PPUSH
66985: LD_VAR 0 3
66989: PPUSH
66990: CALL_OW 331
// end ;
66994: LD_VAR 0 5
66998: RET
// export function Video ( mode ) ; begin
66999: LD_INT 0
67001: PPUSH
// ingame_video = mode ;
67002: LD_ADDR_OWVAR 52
67006: PUSH
67007: LD_VAR 0 1
67011: ST_TO_ADDR
// interface_hidden = mode ;
67012: LD_ADDR_OWVAR 54
67016: PUSH
67017: LD_VAR 0 1
67021: ST_TO_ADDR
// end ;
67022: LD_VAR 0 2
67026: RET
// export function Join ( array , element ) ; begin
67027: LD_INT 0
67029: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67030: LD_ADDR_VAR 0 3
67034: PUSH
67035: LD_VAR 0 1
67039: PPUSH
67040: LD_VAR 0 1
67044: PUSH
67045: LD_INT 1
67047: PLUS
67048: PPUSH
67049: LD_VAR 0 2
67053: PPUSH
67054: CALL_OW 1
67058: ST_TO_ADDR
// end ;
67059: LD_VAR 0 3
67063: RET
// export function JoinUnion ( array , element ) ; begin
67064: LD_INT 0
67066: PPUSH
// result := array union element ;
67067: LD_ADDR_VAR 0 3
67071: PUSH
67072: LD_VAR 0 1
67076: PUSH
67077: LD_VAR 0 2
67081: UNION
67082: ST_TO_ADDR
// end ;
67083: LD_VAR 0 3
67087: RET
// export function GetBehemoths ( side ) ; begin
67088: LD_INT 0
67090: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
67091: LD_ADDR_VAR 0 2
67095: PUSH
67096: LD_INT 22
67098: PUSH
67099: LD_VAR 0 1
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 31
67110: PUSH
67111: LD_INT 25
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PPUSH
67122: CALL_OW 69
67126: ST_TO_ADDR
// end ;
67127: LD_VAR 0 2
67131: RET
// export function Shuffle ( array ) ; var i , index ; begin
67132: LD_INT 0
67134: PPUSH
67135: PPUSH
67136: PPUSH
// result := [ ] ;
67137: LD_ADDR_VAR 0 2
67141: PUSH
67142: EMPTY
67143: ST_TO_ADDR
// if not array then
67144: LD_VAR 0 1
67148: NOT
67149: IFFALSE 67153
// exit ;
67151: GO 67252
// Randomize ;
67153: CALL_OW 10
// for i = array downto 1 do
67157: LD_ADDR_VAR 0 3
67161: PUSH
67162: DOUBLE
67163: LD_VAR 0 1
67167: INC
67168: ST_TO_ADDR
67169: LD_INT 1
67171: PUSH
67172: FOR_DOWNTO
67173: IFFALSE 67250
// begin index := rand ( 1 , array ) ;
67175: LD_ADDR_VAR 0 4
67179: PUSH
67180: LD_INT 1
67182: PPUSH
67183: LD_VAR 0 1
67187: PPUSH
67188: CALL_OW 12
67192: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67193: LD_ADDR_VAR 0 2
67197: PUSH
67198: LD_VAR 0 2
67202: PPUSH
67203: LD_VAR 0 2
67207: PUSH
67208: LD_INT 1
67210: PLUS
67211: PPUSH
67212: LD_VAR 0 1
67216: PUSH
67217: LD_VAR 0 4
67221: ARRAY
67222: PPUSH
67223: CALL_OW 2
67227: ST_TO_ADDR
// array := Delete ( array , index ) ;
67228: LD_ADDR_VAR 0 1
67232: PUSH
67233: LD_VAR 0 1
67237: PPUSH
67238: LD_VAR 0 4
67242: PPUSH
67243: CALL_OW 3
67247: ST_TO_ADDR
// end ;
67248: GO 67172
67250: POP
67251: POP
// end ;
67252: LD_VAR 0 2
67256: RET
// export function GetBaseMaterials ( base ) ; begin
67257: LD_INT 0
67259: PPUSH
// result := [ 0 , 0 , 0 ] ;
67260: LD_ADDR_VAR 0 2
67264: PUSH
67265: LD_INT 0
67267: PUSH
67268: LD_INT 0
67270: PUSH
67271: LD_INT 0
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: LIST
67278: ST_TO_ADDR
// if not base then
67279: LD_VAR 0 1
67283: NOT
67284: IFFALSE 67288
// exit ;
67286: GO 67337
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67288: LD_ADDR_VAR 0 2
67292: PUSH
67293: LD_VAR 0 1
67297: PPUSH
67298: LD_INT 1
67300: PPUSH
67301: CALL_OW 275
67305: PUSH
67306: LD_VAR 0 1
67310: PPUSH
67311: LD_INT 2
67313: PPUSH
67314: CALL_OW 275
67318: PUSH
67319: LD_VAR 0 1
67323: PPUSH
67324: LD_INT 3
67326: PPUSH
67327: CALL_OW 275
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: LIST
67336: ST_TO_ADDR
// end ;
67337: LD_VAR 0 2
67341: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67342: LD_INT 0
67344: PPUSH
67345: PPUSH
// result := array ;
67346: LD_ADDR_VAR 0 3
67350: PUSH
67351: LD_VAR 0 1
67355: ST_TO_ADDR
// if size > 0 then
67356: LD_VAR 0 2
67360: PUSH
67361: LD_INT 0
67363: GREATER
67364: IFFALSE 67410
// for i := array downto size do
67366: LD_ADDR_VAR 0 4
67370: PUSH
67371: DOUBLE
67372: LD_VAR 0 1
67376: INC
67377: ST_TO_ADDR
67378: LD_VAR 0 2
67382: PUSH
67383: FOR_DOWNTO
67384: IFFALSE 67408
// result := Delete ( result , result ) ;
67386: LD_ADDR_VAR 0 3
67390: PUSH
67391: LD_VAR 0 3
67395: PPUSH
67396: LD_VAR 0 3
67400: PPUSH
67401: CALL_OW 3
67405: ST_TO_ADDR
67406: GO 67383
67408: POP
67409: POP
// end ;
67410: LD_VAR 0 3
67414: RET
// export function ComExit ( unit ) ; var tmp ; begin
67415: LD_INT 0
67417: PPUSH
67418: PPUSH
// if not IsInUnit ( unit ) then
67419: LD_VAR 0 1
67423: PPUSH
67424: CALL_OW 310
67428: NOT
67429: IFFALSE 67433
// exit ;
67431: GO 67493
// tmp := IsInUnit ( unit ) ;
67433: LD_ADDR_VAR 0 3
67437: PUSH
67438: LD_VAR 0 1
67442: PPUSH
67443: CALL_OW 310
67447: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67448: LD_VAR 0 3
67452: PPUSH
67453: CALL_OW 247
67457: PUSH
67458: LD_INT 2
67460: EQUAL
67461: IFFALSE 67474
// ComExitVehicle ( unit ) else
67463: LD_VAR 0 1
67467: PPUSH
67468: CALL_OW 121
67472: GO 67483
// ComExitBuilding ( unit ) ;
67474: LD_VAR 0 1
67478: PPUSH
67479: CALL_OW 122
// result := tmp ;
67483: LD_ADDR_VAR 0 2
67487: PUSH
67488: LD_VAR 0 3
67492: ST_TO_ADDR
// end ;
67493: LD_VAR 0 2
67497: RET
// export function ResetHc ; begin
67498: LD_INT 0
67500: PPUSH
// InitHc ;
67501: CALL_OW 19
// hc_importance := 0 ;
67505: LD_ADDR_OWVAR 32
67509: PUSH
67510: LD_INT 0
67512: ST_TO_ADDR
// end ;
67513: LD_VAR 0 1
67517: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67518: LD_INT 0
67520: PPUSH
67521: PPUSH
67522: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67523: LD_ADDR_VAR 0 6
67527: PUSH
67528: LD_VAR 0 1
67532: PUSH
67533: LD_VAR 0 3
67537: PLUS
67538: PUSH
67539: LD_INT 2
67541: DIV
67542: ST_TO_ADDR
// if _x < 0 then
67543: LD_VAR 0 6
67547: PUSH
67548: LD_INT 0
67550: LESS
67551: IFFALSE 67568
// _x := _x * - 1 ;
67553: LD_ADDR_VAR 0 6
67557: PUSH
67558: LD_VAR 0 6
67562: PUSH
67563: LD_INT 1
67565: NEG
67566: MUL
67567: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67568: LD_ADDR_VAR 0 7
67572: PUSH
67573: LD_VAR 0 2
67577: PUSH
67578: LD_VAR 0 4
67582: PLUS
67583: PUSH
67584: LD_INT 2
67586: DIV
67587: ST_TO_ADDR
// if _y < 0 then
67588: LD_VAR 0 7
67592: PUSH
67593: LD_INT 0
67595: LESS
67596: IFFALSE 67613
// _y := _y * - 1 ;
67598: LD_ADDR_VAR 0 7
67602: PUSH
67603: LD_VAR 0 7
67607: PUSH
67608: LD_INT 1
67610: NEG
67611: MUL
67612: ST_TO_ADDR
// result := [ _x , _y ] ;
67613: LD_ADDR_VAR 0 5
67617: PUSH
67618: LD_VAR 0 6
67622: PUSH
67623: LD_VAR 0 7
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: ST_TO_ADDR
// end ;
67632: LD_VAR 0 5
67636: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67637: LD_INT 0
67639: PPUSH
67640: PPUSH
67641: PPUSH
67642: PPUSH
// task := GetTaskList ( unit ) ;
67643: LD_ADDR_VAR 0 7
67647: PUSH
67648: LD_VAR 0 1
67652: PPUSH
67653: CALL_OW 437
67657: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67658: LD_VAR 0 7
67662: NOT
67663: PUSH
67664: LD_VAR 0 1
67668: PPUSH
67669: LD_VAR 0 2
67673: PPUSH
67674: CALL_OW 308
67678: NOT
67679: AND
67680: IFFALSE 67684
// exit ;
67682: GO 67802
// if IsInArea ( unit , area ) then
67684: LD_VAR 0 1
67688: PPUSH
67689: LD_VAR 0 2
67693: PPUSH
67694: CALL_OW 308
67698: IFFALSE 67716
// begin ComMoveToArea ( unit , goAway ) ;
67700: LD_VAR 0 1
67704: PPUSH
67705: LD_VAR 0 3
67709: PPUSH
67710: CALL_OW 113
// exit ;
67714: GO 67802
// end ; if task [ 1 ] [ 1 ] <> M then
67716: LD_VAR 0 7
67720: PUSH
67721: LD_INT 1
67723: ARRAY
67724: PUSH
67725: LD_INT 1
67727: ARRAY
67728: PUSH
67729: LD_STRING M
67731: NONEQUAL
67732: IFFALSE 67736
// exit ;
67734: GO 67802
// x := task [ 1 ] [ 2 ] ;
67736: LD_ADDR_VAR 0 5
67740: PUSH
67741: LD_VAR 0 7
67745: PUSH
67746: LD_INT 1
67748: ARRAY
67749: PUSH
67750: LD_INT 2
67752: ARRAY
67753: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67754: LD_ADDR_VAR 0 6
67758: PUSH
67759: LD_VAR 0 7
67763: PUSH
67764: LD_INT 1
67766: ARRAY
67767: PUSH
67768: LD_INT 3
67770: ARRAY
67771: ST_TO_ADDR
// if InArea ( x , y , area ) then
67772: LD_VAR 0 5
67776: PPUSH
67777: LD_VAR 0 6
67781: PPUSH
67782: LD_VAR 0 2
67786: PPUSH
67787: CALL_OW 309
67791: IFFALSE 67802
// ComStop ( unit ) ;
67793: LD_VAR 0 1
67797: PPUSH
67798: CALL_OW 141
// end ;
67802: LD_VAR 0 4
67806: RET
// export function Abs ( value ) ; begin
67807: LD_INT 0
67809: PPUSH
// result := value ;
67810: LD_ADDR_VAR 0 2
67814: PUSH
67815: LD_VAR 0 1
67819: ST_TO_ADDR
// if value < 0 then
67820: LD_VAR 0 1
67824: PUSH
67825: LD_INT 0
67827: LESS
67828: IFFALSE 67845
// result := value * - 1 ;
67830: LD_ADDR_VAR 0 2
67834: PUSH
67835: LD_VAR 0 1
67839: PUSH
67840: LD_INT 1
67842: NEG
67843: MUL
67844: ST_TO_ADDR
// end ;
67845: LD_VAR 0 2
67849: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67850: LD_INT 0
67852: PPUSH
67853: PPUSH
67854: PPUSH
67855: PPUSH
67856: PPUSH
67857: PPUSH
67858: PPUSH
67859: PPUSH
// if not unit or not building then
67860: LD_VAR 0 1
67864: NOT
67865: PUSH
67866: LD_VAR 0 2
67870: NOT
67871: OR
67872: IFFALSE 67876
// exit ;
67874: GO 68102
// x := GetX ( building ) ;
67876: LD_ADDR_VAR 0 4
67880: PUSH
67881: LD_VAR 0 2
67885: PPUSH
67886: CALL_OW 250
67890: ST_TO_ADDR
// y := GetY ( building ) ;
67891: LD_ADDR_VAR 0 6
67895: PUSH
67896: LD_VAR 0 2
67900: PPUSH
67901: CALL_OW 251
67905: ST_TO_ADDR
// d := GetDir ( building ) ;
67906: LD_ADDR_VAR 0 8
67910: PUSH
67911: LD_VAR 0 2
67915: PPUSH
67916: CALL_OW 254
67920: ST_TO_ADDR
// r := 4 ;
67921: LD_ADDR_VAR 0 9
67925: PUSH
67926: LD_INT 4
67928: ST_TO_ADDR
// for i := 1 to 5 do
67929: LD_ADDR_VAR 0 10
67933: PUSH
67934: DOUBLE
67935: LD_INT 1
67937: DEC
67938: ST_TO_ADDR
67939: LD_INT 5
67941: PUSH
67942: FOR_TO
67943: IFFALSE 68100
// begin _x := ShiftX ( x , d , r + i ) ;
67945: LD_ADDR_VAR 0 5
67949: PUSH
67950: LD_VAR 0 4
67954: PPUSH
67955: LD_VAR 0 8
67959: PPUSH
67960: LD_VAR 0 9
67964: PUSH
67965: LD_VAR 0 10
67969: PLUS
67970: PPUSH
67971: CALL_OW 272
67975: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67976: LD_ADDR_VAR 0 7
67980: PUSH
67981: LD_VAR 0 6
67985: PPUSH
67986: LD_VAR 0 8
67990: PPUSH
67991: LD_VAR 0 9
67995: PUSH
67996: LD_VAR 0 10
68000: PLUS
68001: PPUSH
68002: CALL_OW 273
68006: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68007: LD_VAR 0 5
68011: PPUSH
68012: LD_VAR 0 7
68016: PPUSH
68017: CALL_OW 488
68021: PUSH
68022: LD_VAR 0 5
68026: PPUSH
68027: LD_VAR 0 7
68031: PPUSH
68032: CALL_OW 428
68036: PPUSH
68037: CALL_OW 247
68041: PUSH
68042: LD_INT 3
68044: PUSH
68045: LD_INT 2
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: IN
68052: NOT
68053: AND
68054: IFFALSE 68098
// begin ComMoveXY ( unit , _x , _y ) ;
68056: LD_VAR 0 1
68060: PPUSH
68061: LD_VAR 0 5
68065: PPUSH
68066: LD_VAR 0 7
68070: PPUSH
68071: CALL_OW 111
// result := [ _x , _y ] ;
68075: LD_ADDR_VAR 0 3
68079: PUSH
68080: LD_VAR 0 5
68084: PUSH
68085: LD_VAR 0 7
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: ST_TO_ADDR
// exit ;
68094: POP
68095: POP
68096: GO 68102
// end ; end ;
68098: GO 67942
68100: POP
68101: POP
// end ; end_of_file
68102: LD_VAR 0 3
68106: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68107: LD_VAR 0 1
68111: PUSH
68112: LD_INT 200
68114: DOUBLE
68115: GREATEREQUAL
68116: IFFALSE 68124
68118: LD_INT 299
68120: DOUBLE
68121: LESSEQUAL
68122: IFTRUE 68126
68124: GO 68158
68126: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68127: LD_VAR 0 1
68131: PPUSH
68132: LD_VAR 0 2
68136: PPUSH
68137: LD_VAR 0 3
68141: PPUSH
68142: LD_VAR 0 4
68146: PPUSH
68147: LD_VAR 0 5
68151: PPUSH
68152: CALL 13996 0 5
68156: GO 68235
68158: LD_INT 300
68160: DOUBLE
68161: GREATEREQUAL
68162: IFFALSE 68170
68164: LD_INT 399
68166: DOUBLE
68167: LESSEQUAL
68168: IFTRUE 68172
68170: GO 68234
68172: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68173: LD_VAR 0 1
68177: PPUSH
68178: LD_VAR 0 2
68182: PPUSH
68183: LD_VAR 0 3
68187: PPUSH
68188: LD_VAR 0 4
68192: PPUSH
68193: LD_VAR 0 5
68197: PPUSH
68198: LD_VAR 0 6
68202: PPUSH
68203: LD_VAR 0 7
68207: PPUSH
68208: LD_VAR 0 8
68212: PPUSH
68213: LD_VAR 0 9
68217: PPUSH
68218: LD_VAR 0 10
68222: PPUSH
68223: LD_VAR 0 11
68227: PPUSH
68228: CALL 29058 0 11
68232: GO 68235
68234: POP
// end ;
68235: PPOPN 11
68237: END
