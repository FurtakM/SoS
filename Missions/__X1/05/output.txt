// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 744 0 2
// PrepareArabian ;
  31: CALL 1361 0 0
// PrepareRussian ;
  35: CALL 2967 0 0
// Action ;
  39: CALL 8248 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: LD_INT 7
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_STRING 04_1_RuLabCaptured
 221: PPUSH
 222: LD_INT 0
 224: PPUSH
 225: CALL_OW 30
 229: ST_TO_ADDR
// captureCounter := 0 ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// flamethrowerBuilt := false ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 254: LD_ADDR_OWVAR 79
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// end ;
 262: LD_VAR 0 1
 266: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 267: LD_EXP 10
 271: NOT
 272: PUSH
 273: LD_EXP 9
 277: NOT
 278: AND
 279: PUSH
 280: LD_EXP 39
 284: NOT
 285: AND
 286: PUSH
 287: LD_EXP 40
 291: NOT
 292: AND
 293: IFFALSE 305
 295: GO 297
 297: DISABLE
// SetAchievement ( ACH_EXT ) ;
 298: LD_STRING ACH_EXT
 300: PPUSH
 301: CALL_OW 543
 305: END
// every 0 0$1 trigger captureCounter >= 6 do
 306: LD_EXP 18
 310: PUSH
 311: LD_INT 6
 313: GREATEREQUAL
 314: IFFALSE 326
 316: GO 318
 318: DISABLE
// SetAchievement ( ACH_KEY ) ;
 319: LD_STRING ACH_KEY
 321: PPUSH
 322: CALL_OW 543
 326: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 327: LD_EXP 19
 331: PUSH
 332: LD_INT 3
 334: GREATEREQUAL
 335: IFFALSE 347
 337: GO 339
 339: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 340: LD_STRING ACH_CHEM
 342: PPUSH
 343: CALL_OW 543
 347: END
// every 0 0$1 trigger debug do var i ;
 348: LD_EXP 1
 352: IFFALSE 436
 354: GO 356
 356: DISABLE
 357: LD_INT 0
 359: PPUSH
// begin enable ;
 360: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 361: LD_ADDR_VAR 0 1
 365: PUSH
 366: LD_INT 22
 368: PUSH
 369: LD_INT 2
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 3
 378: PUSH
 379: LD_INT 21
 381: PUSH
 382: LD_INT 3
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 434
// if GetLives ( i ) < 1000 then
 405: LD_VAR 0 1
 409: PPUSH
 410: CALL_OW 256
 414: PUSH
 415: LD_INT 1000
 417: LESS
 418: IFFALSE 432
// SetLives ( i , 1000 ) ;
 420: LD_VAR 0 1
 424: PPUSH
 425: LD_INT 1000
 427: PPUSH
 428: CALL_OW 234
 432: GO 402
 434: POP
 435: POP
// end ; end_of_file
 436: PPOPN 1
 438: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 439: LD_INT 0
 441: PPUSH
// uc_side := side ;
 442: LD_ADDR_OWVAR 20
 446: PUSH
 447: LD_VAR 0 1
 451: ST_TO_ADDR
// uc_nation := nation ;
 452: LD_ADDR_OWVAR 21
 456: PUSH
 457: LD_VAR 0 2
 461: ST_TO_ADDR
// vc_chassis := chassis ;
 462: LD_ADDR_OWVAR 37
 466: PUSH
 467: LD_VAR 0 3
 471: ST_TO_ADDR
// vc_engine := engine ;
 472: LD_ADDR_OWVAR 39
 476: PUSH
 477: LD_VAR 0 4
 481: ST_TO_ADDR
// vc_control := control ;
 482: LD_ADDR_OWVAR 38
 486: PUSH
 487: LD_VAR 0 5
 491: ST_TO_ADDR
// vc_weapon := weapon ;
 492: LD_ADDR_OWVAR 40
 496: PUSH
 497: LD_VAR 0 6
 501: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 502: LD_ADDR_OWVAR 41
 506: PUSH
 507: LD_VAR 0 7
 511: ST_TO_ADDR
// result := CreateVehicle ;
 512: LD_ADDR_VAR 0 8
 516: PUSH
 517: CALL_OW 45
 521: ST_TO_ADDR
// end ;
 522: LD_VAR 0 8
 526: RET
// export function SayX ( units , ident ) ; var i ; begin
 527: LD_INT 0
 529: PPUSH
 530: PPUSH
// result := false ;
 531: LD_ADDR_VAR 0 3
 535: PUSH
 536: LD_INT 0
 538: ST_TO_ADDR
// if not units then
 539: LD_VAR 0 1
 543: NOT
 544: IFFALSE 548
// exit ;
 546: GO 602
// for i in units do
 548: LD_ADDR_VAR 0 4
 552: PUSH
 553: LD_VAR 0 1
 557: PUSH
 558: FOR_IN
 559: IFFALSE 600
// if IsOk ( i ) then
 561: LD_VAR 0 4
 565: PPUSH
 566: CALL_OW 302
 570: IFFALSE 598
// begin Say ( i , ident ) ;
 572: LD_VAR 0 4
 576: PPUSH
 577: LD_VAR 0 2
 581: PPUSH
 582: CALL_OW 88
// result := i ;
 586: LD_ADDR_VAR 0 3
 590: PUSH
 591: LD_VAR 0 4
 595: ST_TO_ADDR
// break ;
 596: GO 600
// end ;
 598: GO 558
 600: POP
 601: POP
// end ;
 602: LD_VAR 0 3
 606: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 607: LD_INT 0
 609: PPUSH
 610: PPUSH
// InitUc ;
 611: CALL_OW 18
// InitHc ;
 615: CALL_OW 19
// uc_side := 0 ;
 619: LD_ADDR_OWVAR 20
 623: PUSH
 624: LD_INT 0
 626: ST_TO_ADDR
// uc_nation := 0 ;
 627: LD_ADDR_OWVAR 21
 631: PUSH
 632: LD_INT 0
 634: ST_TO_ADDR
// for i = 1 to amount do
 635: LD_ADDR_VAR 0 4
 639: PUSH
 640: DOUBLE
 641: LD_INT 1
 643: DEC
 644: ST_TO_ADDR
 645: LD_VAR 0 2
 649: PUSH
 650: FOR_TO
 651: IFFALSE 733
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 653: LD_ADDR_OWVAR 29
 657: PUSH
 658: LD_INT 9
 660: PPUSH
 661: LD_INT 12
 663: PPUSH
 664: CALL_OW 12
 668: PUSH
 669: LD_INT 9
 671: PPUSH
 672: LD_INT 12
 674: PPUSH
 675: CALL_OW 12
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 684: LD_ADDR_OWVAR 35
 688: PUSH
 689: LD_INT 1
 691: NEG
 692: PPUSH
 693: LD_INT 1
 695: PPUSH
 696: CALL_OW 12
 700: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 701: LD_INT 0
 703: PPUSH
 704: LD_INT 12
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 714: CALL_OW 44
 718: PPUSH
 719: LD_VAR 0 1
 723: PPUSH
 724: LD_INT 0
 726: PPUSH
 727: CALL_OW 49
// end ;
 731: GO 650
 733: POP
 734: POP
// InitHc ;
 735: CALL_OW 19
// end ;
 739: LD_VAR 0 3
 743: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 744: LD_INT 0
 746: PPUSH
 747: PPUSH
// uc_side := 0 ;
 748: LD_ADDR_OWVAR 20
 752: PUSH
 753: LD_INT 0
 755: ST_TO_ADDR
// uc_nation := 0 ;
 756: LD_ADDR_OWVAR 21
 760: PUSH
 761: LD_INT 0
 763: ST_TO_ADDR
// for i := 1 to 3 do
 764: LD_ADDR_VAR 0 4
 768: PUSH
 769: DOUBLE
 770: LD_INT 1
 772: DEC
 773: ST_TO_ADDR
 774: LD_INT 3
 776: PUSH
 777: FOR_TO
 778: IFFALSE 815
// begin hc_class := 21 ;
 780: LD_ADDR_OWVAR 28
 784: PUSH
 785: LD_INT 21
 787: ST_TO_ADDR
// hc_gallery :=  ;
 788: LD_ADDR_OWVAR 33
 792: PUSH
 793: LD_STRING 
 795: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 796: CALL_OW 44
 800: PPUSH
 801: LD_VAR 0 1
 805: PPUSH
 806: LD_INT 0
 808: PPUSH
 809: CALL_OW 49
// end ;
 813: GO 777
 815: POP
 816: POP
// for i := 1 to 3 do
 817: LD_ADDR_VAR 0 4
 821: PUSH
 822: DOUBLE
 823: LD_INT 1
 825: DEC
 826: ST_TO_ADDR
 827: LD_INT 3
 829: PUSH
 830: FOR_TO
 831: IFFALSE 868
// begin hc_class := 18 ;
 833: LD_ADDR_OWVAR 28
 837: PUSH
 838: LD_INT 18
 840: ST_TO_ADDR
// hc_gallery :=  ;
 841: LD_ADDR_OWVAR 33
 845: PUSH
 846: LD_STRING 
 848: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 849: CALL_OW 44
 853: PPUSH
 854: LD_VAR 0 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// end ;
 866: GO 830
 868: POP
 869: POP
// for i := 1 to 3 do
 870: LD_ADDR_VAR 0 4
 874: PUSH
 875: DOUBLE
 876: LD_INT 1
 878: DEC
 879: ST_TO_ADDR
 880: LD_INT 3
 882: PUSH
 883: FOR_TO
 884: IFFALSE 921
// begin hc_class := 13 ;
 886: LD_ADDR_OWVAR 28
 890: PUSH
 891: LD_INT 13
 893: ST_TO_ADDR
// hc_gallery :=  ;
 894: LD_ADDR_OWVAR 33
 898: PUSH
 899: LD_STRING 
 901: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 902: CALL_OW 44
 906: PPUSH
 907: LD_VAR 0 1
 911: PPUSH
 912: LD_INT 0
 914: PPUSH
 915: CALL_OW 49
// end ;
 919: GO 883
 921: POP
 922: POP
// for i := 1 to 4 do
 923: LD_ADDR_VAR 0 4
 927: PUSH
 928: DOUBLE
 929: LD_INT 1
 931: DEC
 932: ST_TO_ADDR
 933: LD_INT 4
 935: PUSH
 936: FOR_TO
 937: IFFALSE 974
// begin hc_class := class_frog ;
 939: LD_ADDR_OWVAR 28
 943: PUSH
 944: LD_INT 19
 946: ST_TO_ADDR
// hc_gallery :=  ;
 947: LD_ADDR_OWVAR 33
 951: PUSH
 952: LD_STRING 
 954: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 955: CALL_OW 44
 959: PPUSH
 960: LD_VAR 0 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ;
 972: GO 936
 974: POP
 975: POP
// end ;
 976: LD_VAR 0 3
 980: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 981: LD_INT 0
 983: PPUSH
 984: PPUSH
 985: PPUSH
// if not observer or not unit then
 986: LD_VAR 0 1
 990: NOT
 991: PUSH
 992: LD_VAR 0 2
 996: NOT
 997: OR
 998: IFFALSE 1002
// exit ;
1000: GO 1050
// if not See ( GetSide ( observer ) , unit ) then
1002: LD_VAR 0 1
1006: PPUSH
1007: CALL_OW 255
1011: PPUSH
1012: LD_VAR 0 2
1016: PPUSH
1017: CALL_OW 292
1021: NOT
1022: IFFALSE 1026
// exit ;
1024: GO 1050
// result := GetDistUnits ( observer , unit ) < 12 ;
1026: LD_ADDR_VAR 0 3
1030: PUSH
1031: LD_VAR 0 1
1035: PPUSH
1036: LD_VAR 0 2
1040: PPUSH
1041: CALL_OW 296
1045: PUSH
1046: LD_INT 12
1048: LESS
1049: ST_TO_ADDR
// end ;
1050: LD_VAR 0 3
1054: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1055: LD_INT 0
1057: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1058: LD_VAR 0 2
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PPUSH
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 2
1074: ARRAY
1075: PPUSH
1076: CALL_OW 488
1080: PUSH
1081: LD_VAR 0 2
1085: PUSH
1086: LD_INT 1
1088: ARRAY
1089: PPUSH
1090: LD_VAR 0 2
1094: PUSH
1095: LD_INT 2
1097: ARRAY
1098: PPUSH
1099: CALL_OW 428
1103: PUSH
1104: LD_INT 0
1106: EQUAL
1107: AND
1108: IFFALSE 1142
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1110: LD_VAR 0 1
1114: PPUSH
1115: LD_VAR 0 2
1119: PUSH
1120: LD_INT 1
1122: ARRAY
1123: PPUSH
1124: LD_VAR 0 2
1128: PUSH
1129: LD_INT 2
1131: ARRAY
1132: PPUSH
1133: LD_VAR 0 3
1137: PPUSH
1138: CALL_OW 48
// end ;
1142: LD_VAR 0 4
1146: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1147: LD_INT 0
1149: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1150: LD_VAR 0 1
1154: PPUSH
1155: LD_VAR 0 2
1159: PPUSH
1160: LD_VAR 0 3
1164: PPUSH
1165: LD_VAR 0 4
1169: PPUSH
1170: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1174: LD_VAR 0 1
1178: PPUSH
1179: LD_VAR 0 2
1183: PPUSH
1184: LD_VAR 0 3
1188: PPUSH
1189: CALL_OW 331
// end ;
1193: LD_VAR 0 5
1197: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1198: LD_INT 0
1200: PPUSH
// if not units then
1201: LD_VAR 0 1
1205: NOT
1206: IFFALSE 1210
// exit ;
1208: GO 1293
// result := true ;
1210: LD_ADDR_VAR 0 4
1214: PUSH
1215: LD_INT 1
1217: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1218: LD_VAR 0 1
1222: PPUSH
1223: LD_INT 26
1225: PUSH
1226: LD_INT 1
1228: PUSH
1229: EMPTY
1230: LIST
1231: LIST
1232: PPUSH
1233: CALL_OW 72
1237: PUSH
1238: LD_INT 1
1240: ARRAY
1241: PPUSH
1242: LD_VAR 0 2
1246: PPUSH
1247: CALL_OW 88
1251: NOT
1252: IFFALSE 1293
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1254: LD_ADDR_VAR 0 4
1258: PUSH
1259: LD_VAR 0 1
1263: PPUSH
1264: LD_INT 26
1266: PUSH
1267: LD_INT 2
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: PPUSH
1274: CALL_OW 72
1278: PUSH
1279: LD_INT 1
1281: ARRAY
1282: PPUSH
1283: LD_VAR 0 3
1287: PPUSH
1288: CALL_OW 88
1292: ST_TO_ADDR
// end ;
1293: LD_VAR 0 4
1297: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1298: LD_INT 0
1300: PPUSH
1301: PPUSH
// if not group then
1302: LD_VAR 0 2
1306: NOT
1307: IFFALSE 1311
// exit ;
1309: GO 1356
// for i in group do
1311: LD_ADDR_VAR 0 4
1315: PUSH
1316: LD_VAR 0 2
1320: PUSH
1321: FOR_IN
1322: IFFALSE 1354
// if See ( side , i ) then
1324: LD_VAR 0 1
1328: PPUSH
1329: LD_VAR 0 4
1333: PPUSH
1334: CALL_OW 292
1338: IFFALSE 1352
// begin result := true ;
1340: LD_ADDR_VAR 0 3
1344: PUSH
1345: LD_INT 1
1347: ST_TO_ADDR
// exit ;
1348: POP
1349: POP
1350: GO 1356
// end ;
1352: GO 1321
1354: POP
1355: POP
// end ; end_of_file
1356: LD_VAR 0 3
1360: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1361: LD_INT 0
1363: PPUSH
1364: PPUSH
// uc_side := 2 ;
1365: LD_ADDR_OWVAR 20
1369: PUSH
1370: LD_INT 2
1372: ST_TO_ADDR
// uc_nation := 2 ;
1373: LD_ADDR_OWVAR 21
1377: PUSH
1378: LD_INT 2
1380: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1381: LD_ADDR_EXP 21
1385: PUSH
1386: LD_STRING Heike
1388: PPUSH
1389: LD_EXP 1
1393: NOT
1394: PPUSH
1395: LD_EXP 2
1399: PPUSH
1400: CALL 34756 0 3
1404: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1405: LD_ADDR_EXP 24
1409: PUSH
1410: LD_STRING Ibrahim
1412: PPUSH
1413: LD_EXP 1
1417: NOT
1418: PPUSH
1419: LD_EXP 2
1423: PPUSH
1424: CALL 34756 0 3
1428: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1429: LD_ADDR_EXP 22
1433: PUSH
1434: LD_STRING Givi
1436: PPUSH
1437: LD_EXP 1
1441: NOT
1442: PPUSH
1443: LD_EXP 2
1447: PPUSH
1448: CALL 34756 0 3
1452: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1453: LD_ADDR_EXP 25
1457: PUSH
1458: LD_STRING Kamil
1460: PPUSH
1461: LD_EXP 1
1465: NOT
1466: PPUSH
1467: LD_EXP 2
1471: PPUSH
1472: CALL 34756 0 3
1476: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1477: LD_ADDR_EXP 26
1481: PUSH
1482: LD_STRING Kaia
1484: PPUSH
1485: LD_EXP 1
1489: NOT
1490: PPUSH
1491: LD_EXP 2
1495: PPUSH
1496: CALL 34756 0 3
1500: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1501: LD_ADDR_EXP 27
1505: PUSH
1506: LD_STRING Sophia
1508: PPUSH
1509: LD_EXP 1
1513: NOT
1514: PPUSH
1515: LD_EXP 2
1519: PPUSH
1520: CALL 34756 0 3
1524: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1525: LD_ADDR_EXP 28
1529: PUSH
1530: LD_STRING Markov
1532: PPUSH
1533: LD_EXP 1
1537: NOT
1538: PPUSH
1539: LD_EXP 2
1543: PPUSH
1544: CALL 34756 0 3
1548: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1549: LD_ADDR_EXP 33
1553: PUSH
1554: LD_STRING Aviradze
1556: PPUSH
1557: LD_EXP 1
1561: NOT
1562: PPUSH
1563: LD_EXP 2
1567: PPUSH
1568: CALL 34756 0 3
1572: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1573: LD_ADDR_EXP 32
1577: PUSH
1578: LD_STRING Kurt
1580: PPUSH
1581: LD_EXP 1
1585: NOT
1586: PPUSH
1587: LD_EXP 2
1591: PPUSH
1592: CALL 34756 0 3
1596: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1597: LD_ADDR_EXP 23
1601: PUSH
1602: LD_STRING Mike
1604: PPUSH
1605: LD_EXP 1
1609: NOT
1610: PPUSH
1611: LD_EXP 2
1615: PPUSH
1616: CALL 34756 0 3
1620: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1621: LD_ADDR_EXP 30
1625: PUSH
1626: LD_STRING Olaf
1628: PPUSH
1629: LD_INT 0
1631: PPUSH
1632: LD_STRING 
1634: PPUSH
1635: CALL 34756 0 3
1639: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1640: LD_ADDR_EXP 34
1644: PUSH
1645: LD_STRING 04_2_others
1647: PPUSH
1648: CALL_OW 31
1652: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1653: LD_ADDR_EXP 36
1657: PUSH
1658: LD_STRING 04_2_apes
1660: PPUSH
1661: CALL_OW 31
1665: ST_TO_ADDR
// if hasFlamethrower then
1666: LD_EXP 3
1670: IFFALSE 1905
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1672: LD_INT 70
1674: PPUSH
1675: LD_INT 2
1677: PPUSH
1678: LD_INT 2
1680: PPUSH
1681: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1685: LD_ADDR_EXP 35
1689: PUSH
1690: LD_INT 13
1692: PUSH
1693: LD_INT 1
1695: PUSH
1696: LD_INT 1
1698: PUSH
1699: LD_INT 27
1701: PUSH
1702: LD_INT 2
1704: PUSH
1705: LD_INT 1000
1707: PUSH
1708: LD_INT 0
1710: PUSH
1711: LD_INT 0
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: PUSH
1727: LD_INT 13
1729: PUSH
1730: LD_INT 1
1732: PUSH
1733: LD_INT 1
1735: PUSH
1736: LD_INT 25
1738: PUSH
1739: LD_INT 2
1741: PUSH
1742: LD_INT 1000
1744: PUSH
1745: LD_INT 0
1747: PUSH
1748: LD_INT 0
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: LIST
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: LD_INT 13
1766: PUSH
1767: LD_INT 1
1769: PUSH
1770: LD_INT 1
1772: PUSH
1773: LD_INT 26
1775: PUSH
1776: LD_INT 2
1778: PUSH
1779: LD_INT 1000
1781: PUSH
1782: LD_INT 0
1784: PUSH
1785: LD_INT 0
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 13
1803: PUSH
1804: LD_INT 1
1806: PUSH
1807: LD_INT 1
1809: PUSH
1810: LD_INT 27
1812: PUSH
1813: LD_INT 2
1815: PUSH
1816: LD_INT 1000
1818: PUSH
1819: LD_INT 0
1821: PUSH
1822: LD_INT 0
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: PUSH
1838: LD_INT 13
1840: PUSH
1841: LD_INT 1
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: LD_INT 32
1849: PUSH
1850: LD_INT 2
1852: PUSH
1853: LD_INT 1000
1855: PUSH
1856: LD_INT 0
1858: PUSH
1859: LD_INT 60
1861: PUSH
1862: LD_INT 40
1864: PUSH
1865: LD_INT 20
1867: PUSH
1868: LD_INT 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_OWVAR 67
1881: ARRAY
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: ST_TO_ADDR
// end else
1903: GO 2123
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1905: LD_ADDR_EXP 35
1909: PUSH
1910: LD_INT 13
1912: PUSH
1913: LD_INT 1
1915: PUSH
1916: LD_INT 1
1918: PUSH
1919: LD_INT 25
1921: PUSH
1922: LD_INT 2
1924: PUSH
1925: LD_INT 1000
1927: PUSH
1928: LD_INT 0
1930: PUSH
1931: LD_INT 0
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: PUSH
1947: LD_INT 13
1949: PUSH
1950: LD_INT 1
1952: PUSH
1953: LD_INT 1
1955: PUSH
1956: LD_INT 27
1958: PUSH
1959: LD_INT 2
1961: PUSH
1962: LD_INT 1000
1964: PUSH
1965: LD_INT 0
1967: PUSH
1968: LD_INT 0
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_INT 13
1986: PUSH
1987: LD_INT 1
1989: PUSH
1990: LD_INT 1
1992: PUSH
1993: LD_INT 24
1995: PUSH
1996: LD_INT 2
1998: PUSH
1999: LD_INT 1000
2001: PUSH
2002: LD_INT 0
2004: PUSH
2005: LD_INT 0
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 13
2023: PUSH
2024: LD_INT 1
2026: PUSH
2027: LD_INT 1
2029: PUSH
2030: LD_INT 27
2032: PUSH
2033: LD_INT 2
2035: PUSH
2036: LD_INT 1000
2038: PUSH
2039: LD_INT 0
2041: PUSH
2042: LD_INT 0
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: PUSH
2058: LD_INT 13
2060: PUSH
2061: LD_INT 1
2063: PUSH
2064: LD_INT 1
2066: PUSH
2067: LD_INT 32
2069: PUSH
2070: LD_INT 2
2072: PUSH
2073: LD_INT 1000
2075: PUSH
2076: LD_INT 0
2078: PUSH
2079: LD_INT 50
2081: PUSH
2082: LD_INT 30
2084: PUSH
2085: LD_INT 20
2087: PUSH
2088: LD_INT 10
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_OWVAR 67
2101: ARRAY
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: ST_TO_ADDR
// end ; uc_side := 5 ;
2123: LD_ADDR_OWVAR 20
2127: PUSH
2128: LD_INT 5
2130: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2131: LD_ADDR_EXP 29
2135: PUSH
2136: LD_STRING Abdul
2138: PPUSH
2139: LD_INT 0
2141: PPUSH
2142: LD_STRING 
2144: PPUSH
2145: CALL 34756 0 3
2149: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2150: LD_ADDR_EXP 31
2154: PUSH
2155: LD_STRING Omar
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: LD_STRING 
2163: PPUSH
2164: CALL 34756 0 3
2168: ST_TO_ADDR
// end ;
2169: LD_VAR 0 1
2173: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2174: LD_INT 0
2176: PPUSH
2177: PPUSH
2178: PPUSH
2179: PPUSH
2180: PPUSH
// pfx := 04_1_ ;
2181: LD_ADDR_VAR 0 2
2185: PUSH
2186: LD_STRING 04_1_
2188: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2189: LD_INT 35
2191: PPUSH
2192: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
2196: LD_INT 3
2198: PPUSH
2199: LD_INT 2
2201: PPUSH
2202: CALL_OW 428
2206: NOT
2207: IFFALSE 2189
// tmp := [ ] ;
2209: LD_ADDR_VAR 0 4
2213: PUSH
2214: EMPTY
2215: ST_TO_ADDR
// uc_side := 5 ;
2216: LD_ADDR_OWVAR 20
2220: PUSH
2221: LD_INT 5
2223: ST_TO_ADDR
// uc_nation := 2 ;
2224: LD_ADDR_OWVAR 21
2228: PUSH
2229: LD_INT 2
2231: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2232: LD_ADDR_EXP 33
2236: PUSH
2237: LD_STRING Aviradze_L
2239: PPUSH
2240: LD_EXP 1
2244: NOT
2245: PPUSH
2246: LD_VAR 0 2
2250: PPUSH
2251: CALL 34756 0 3
2255: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2256: LD_EXP 33
2260: PPUSH
2261: LD_INT 2
2263: PPUSH
2264: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2268: LD_EXP 33
2272: PPUSH
2273: LD_INT 14
2275: PPUSH
2276: LD_INT 0
2278: PPUSH
2279: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
2283: LD_EXP 33
2287: PPUSH
2288: LD_INT 8
2290: PPUSH
2291: LD_INT 6
2293: PPUSH
2294: CALL_OW 111
// AddComHold ( Aviradze ) ;
2298: LD_EXP 33
2302: PPUSH
2303: CALL_OW 200
// tmp := [ Aviradze ] ;
2307: LD_ADDR_VAR 0 4
2311: PUSH
2312: LD_EXP 33
2316: PUSH
2317: EMPTY
2318: LIST
2319: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2320: LD_INT 70
2322: PPUSH
2323: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2327: LD_STRING Ibrahim_L
2329: PPUSH
2330: LD_EXP 1
2334: NOT
2335: PPUSH
2336: LD_VAR 0 2
2340: PPUSH
2341: CALL 34756 0 3
2345: IFFALSE 2445
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2347: LD_ADDR_EXP 24
2351: PUSH
2352: LD_STRING Ibrahim_L
2354: PPUSH
2355: LD_EXP 1
2359: NOT
2360: PPUSH
2361: LD_VAR 0 2
2365: PPUSH
2366: CALL 34756 0 3
2370: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2371: LD_EXP 24
2375: PPUSH
2376: LD_INT 2
2378: PPUSH
2379: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2383: LD_EXP 24
2387: PPUSH
2388: LD_INT 14
2390: PPUSH
2391: LD_INT 0
2393: PPUSH
2394: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
2398: LD_EXP 24
2402: PPUSH
2403: LD_INT 8
2405: PPUSH
2406: LD_INT 7
2408: PPUSH
2409: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2413: LD_EXP 24
2417: PPUSH
2418: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2422: LD_ADDR_VAR 0 4
2426: PUSH
2427: LD_VAR 0 4
2431: PUSH
2432: LD_EXP 24
2436: ADD
2437: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2438: LD_INT 70
2440: PPUSH
2441: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2445: LD_STRING Kaia_L
2447: PPUSH
2448: LD_EXP 1
2452: NOT
2453: PPUSH
2454: LD_VAR 0 2
2458: PPUSH
2459: CALL 34756 0 3
2463: IFFALSE 2563
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2465: LD_ADDR_EXP 26
2469: PUSH
2470: LD_STRING Kaia_L
2472: PPUSH
2473: LD_EXP 1
2477: NOT
2478: PPUSH
2479: LD_VAR 0 2
2483: PPUSH
2484: CALL 34756 0 3
2488: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2489: LD_EXP 26
2493: PPUSH
2494: LD_INT 2
2496: PPUSH
2497: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2501: LD_EXP 26
2505: PPUSH
2506: LD_INT 14
2508: PPUSH
2509: LD_INT 0
2511: PPUSH
2512: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
2516: LD_EXP 26
2520: PPUSH
2521: LD_INT 8
2523: PPUSH
2524: LD_INT 7
2526: PPUSH
2527: CALL_OW 111
// AddComHold ( Kaia ) ;
2531: LD_EXP 26
2535: PPUSH
2536: CALL_OW 200
// tmp := tmp ^ Kaia ;
2540: LD_ADDR_VAR 0 4
2544: PUSH
2545: LD_VAR 0 4
2549: PUSH
2550: LD_EXP 26
2554: ADD
2555: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2556: LD_INT 70
2558: PPUSH
2559: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2563: LD_STRING Kamil_L
2565: PPUSH
2566: LD_EXP 1
2570: NOT
2571: PPUSH
2572: LD_VAR 0 2
2576: PPUSH
2577: CALL 34756 0 3
2581: IFFALSE 2681
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2583: LD_ADDR_EXP 25
2587: PUSH
2588: LD_STRING Kamil_L
2590: PPUSH
2591: LD_EXP 1
2595: NOT
2596: PPUSH
2597: LD_VAR 0 2
2601: PPUSH
2602: CALL 34756 0 3
2606: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2607: LD_EXP 25
2611: PPUSH
2612: LD_INT 2
2614: PPUSH
2615: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2619: LD_EXP 25
2623: PPUSH
2624: LD_INT 14
2626: PPUSH
2627: LD_INT 0
2629: PPUSH
2630: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
2634: LD_EXP 25
2638: PPUSH
2639: LD_INT 8
2641: PPUSH
2642: LD_INT 7
2644: PPUSH
2645: CALL_OW 111
// AddComHold ( Kamil ) ;
2649: LD_EXP 25
2653: PPUSH
2654: CALL_OW 200
// tmp := tmp ^ Kamil ;
2658: LD_ADDR_VAR 0 4
2662: PUSH
2663: LD_VAR 0 4
2667: PUSH
2668: LD_EXP 25
2672: ADD
2673: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2674: LD_INT 70
2676: PPUSH
2677: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2681: LD_STRING Sophia_L
2683: PPUSH
2684: LD_EXP 1
2688: NOT
2689: PPUSH
2690: LD_VAR 0 2
2694: PPUSH
2695: CALL 34756 0 3
2699: IFFALSE 2799
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2701: LD_ADDR_EXP 27
2705: PUSH
2706: LD_STRING Sophia_L
2708: PPUSH
2709: LD_EXP 1
2713: NOT
2714: PPUSH
2715: LD_VAR 0 2
2719: PPUSH
2720: CALL 34756 0 3
2724: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2725: LD_EXP 27
2729: PPUSH
2730: LD_INT 2
2732: PPUSH
2733: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2737: LD_EXP 27
2741: PPUSH
2742: LD_INT 14
2744: PPUSH
2745: LD_INT 0
2747: PPUSH
2748: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
2752: LD_EXP 27
2756: PPUSH
2757: LD_INT 9
2759: PPUSH
2760: LD_INT 6
2762: PPUSH
2763: CALL_OW 111
// AddComHold ( Sophia ) ;
2767: LD_EXP 27
2771: PPUSH
2772: CALL_OW 200
// tmp := tmp ^ Sophia ;
2776: LD_ADDR_VAR 0 4
2780: PUSH
2781: LD_VAR 0 4
2785: PUSH
2786: LD_EXP 27
2790: ADD
2791: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2792: LD_INT 70
2794: PPUSH
2795: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2799: LD_ADDR_VAR 0 5
2803: PUSH
2804: LD_STRING 04_1_others_L
2806: PPUSH
2807: CALL_OW 31
2811: ST_TO_ADDR
// if tmp2 then
2812: LD_VAR 0 5
2816: IFFALSE 2913
// for i in tmp2 do
2818: LD_ADDR_VAR 0 3
2822: PUSH
2823: LD_VAR 0 5
2827: PUSH
2828: FOR_IN
2829: IFFALSE 2911
// begin SetDir ( i , 2 ) ;
2831: LD_VAR 0 3
2835: PPUSH
2836: LD_INT 2
2838: PPUSH
2839: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2843: LD_VAR 0 3
2847: PPUSH
2848: LD_INT 14
2850: PPUSH
2851: LD_INT 0
2853: PPUSH
2854: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2858: LD_ADDR_EXP 34
2862: PUSH
2863: LD_EXP 34
2867: PPUSH
2868: LD_EXP 34
2872: PUSH
2873: LD_INT 1
2875: PLUS
2876: PPUSH
2877: LD_VAR 0 3
2881: PPUSH
2882: CALL_OW 1
2886: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2887: LD_VAR 0 3
2891: PPUSH
2892: LD_INT 17
2894: PPUSH
2895: LD_INT 14
2897: PPUSH
2898: CALL_OW 111
// wait ( 0 0$2 ) ;
2902: LD_INT 70
2904: PPUSH
2905: CALL_OW 67
// end ;
2909: GO 2828
2911: POP
2912: POP
// for i in tmp union tmp2 do
2913: LD_ADDR_VAR 0 3
2917: PUSH
2918: LD_VAR 0 4
2922: PUSH
2923: LD_VAR 0 5
2927: UNION
2928: PUSH
2929: FOR_IN
2930: IFFALSE 2960
// begin SetSide ( i , 2 ) ;
2932: LD_VAR 0 3
2936: PPUSH
2937: LD_INT 2
2939: PPUSH
2940: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
2944: LD_VAR 0 3
2948: PPUSH
2949: LD_EXP 21
2953: PPUSH
2954: CALL_OW 112
// end ;
2958: GO 2929
2960: POP
2961: POP
// end ; end_of_file
2962: LD_VAR 0 1
2966: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
2967: LD_INT 0
2969: PPUSH
2970: PPUSH
2971: PPUSH
// uc_side := 3 ;
2972: LD_ADDR_OWVAR 20
2976: PUSH
2977: LD_INT 3
2979: ST_TO_ADDR
// uc_nation := 3 ;
2980: LD_ADDR_OWVAR 21
2984: PUSH
2985: LD_INT 3
2987: ST_TO_ADDR
// crossRoadGuard := [ ] ;
2988: LD_ADDR_EXP 37
2992: PUSH
2993: EMPTY
2994: ST_TO_ADDR
// oilBaseGuard := [ ] ;
2995: LD_ADDR_EXP 38
2999: PUSH
3000: EMPTY
3001: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3002: LD_ADDR_EXP 41
3006: PUSH
3007: EMPTY
3008: ST_TO_ADDR
// for i := 1 to 2 do
3009: LD_ADDR_VAR 0 2
3013: PUSH
3014: DOUBLE
3015: LD_INT 1
3017: DEC
3018: ST_TO_ADDR
3019: LD_INT 2
3021: PUSH
3022: FOR_TO
3023: IFFALSE 3162
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3025: LD_INT 0
3027: PPUSH
3028: LD_INT 1
3030: PPUSH
3031: LD_INT 3
3033: PUSH
3034: LD_INT 4
3036: PUSH
3037: LD_INT 5
3039: PUSH
3040: LD_INT 6
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: PUSH
3049: LD_OWVAR 67
3053: ARRAY
3054: PPUSH
3055: CALL_OW 380
// un := CreateHuman ;
3059: LD_ADDR_VAR 0 3
3063: PUSH
3064: CALL_OW 44
3068: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3069: LD_ADDR_EXP 37
3073: PUSH
3074: LD_EXP 37
3078: PPUSH
3079: LD_EXP 37
3083: PUSH
3084: LD_INT 1
3086: PLUS
3087: PPUSH
3088: LD_VAR 0 3
3092: PPUSH
3093: CALL_OW 1
3097: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3098: LD_VAR 0 3
3102: PPUSH
3103: LD_INT 100
3105: PPUSH
3106: LD_INT 63
3108: PPUSH
3109: LD_INT 3
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3119: LD_VAR 0 3
3123: PPUSH
3124: LD_INT 97
3126: PPUSH
3127: LD_INT 64
3129: PPUSH
3130: CALL_OW 428
3134: PUSH
3135: LD_INT 98
3137: PPUSH
3138: LD_INT 58
3140: PPUSH
3141: CALL_OW 428
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: PUSH
3150: LD_VAR 0 2
3154: ARRAY
3155: PPUSH
3156: CALL_OW 120
// end ;
3160: GO 3022
3162: POP
3163: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3164: LD_INT 51
3166: PPUSH
3167: LD_INT 77
3169: PPUSH
3170: CALL_OW 428
3174: PPUSH
3175: CALL_OW 274
3179: PPUSH
3180: LD_INT 1
3182: PPUSH
3183: LD_INT 120
3185: PPUSH
3186: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3190: LD_INT 10
3192: PPUSH
3193: CALL_OW 274
3197: PPUSH
3198: LD_INT 2
3200: PPUSH
3201: LD_INT 300
3203: PPUSH
3204: CALL_OW 277
// for i := 1 to 2 do
3208: LD_ADDR_VAR 0 2
3212: PUSH
3213: DOUBLE
3214: LD_INT 1
3216: DEC
3217: ST_TO_ADDR
3218: LD_INT 2
3220: PUSH
3221: FOR_TO
3222: IFFALSE 3340
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3224: LD_INT 0
3226: PPUSH
3227: LD_INT 1
3229: PPUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 4
3235: PUSH
3236: LD_INT 5
3238: PUSH
3239: LD_INT 6
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: PUSH
3248: LD_OWVAR 67
3252: ARRAY
3253: PPUSH
3254: CALL_OW 380
// un := CreateHuman ;
3258: LD_ADDR_VAR 0 3
3262: PUSH
3263: CALL_OW 44
3267: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3268: LD_ADDR_EXP 38
3272: PUSH
3273: LD_EXP 38
3277: PPUSH
3278: LD_EXP 38
3282: PUSH
3283: LD_INT 1
3285: PLUS
3286: PPUSH
3287: LD_VAR 0 3
3291: PPUSH
3292: CALL_OW 1
3296: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3297: LD_VAR 0 3
3301: PPUSH
3302: LD_INT 198
3304: PPUSH
3305: LD_INT 106
3307: PPUSH
3308: CALL_OW 428
3312: PUSH
3313: LD_INT 205
3315: PPUSH
3316: LD_INT 114
3318: PPUSH
3319: CALL_OW 428
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PUSH
3328: LD_VAR 0 2
3332: ARRAY
3333: PPUSH
3334: CALL_OW 52
// end ;
3338: GO 3221
3340: POP
3341: POP
// for i := 1 to 2 do
3342: LD_ADDR_VAR 0 2
3346: PUSH
3347: DOUBLE
3348: LD_INT 1
3350: DEC
3351: ST_TO_ADDR
3352: LD_INT 2
3354: PUSH
3355: FOR_TO
3356: IFFALSE 3433
// begin PrepareHuman ( false , 2 , 3 ) ;
3358: LD_INT 0
3360: PPUSH
3361: LD_INT 2
3363: PPUSH
3364: LD_INT 3
3366: PPUSH
3367: CALL_OW 380
// un := CreateHuman ;
3371: LD_ADDR_VAR 0 3
3375: PUSH
3376: CALL_OW 44
3380: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3381: LD_ADDR_EXP 38
3385: PUSH
3386: LD_EXP 38
3390: PPUSH
3391: LD_EXP 38
3395: PUSH
3396: LD_INT 1
3398: PLUS
3399: PPUSH
3400: LD_VAR 0 3
3404: PPUSH
3405: CALL_OW 1
3409: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3410: LD_VAR 0 3
3414: PPUSH
3415: LD_INT 204
3417: PPUSH
3418: LD_INT 108
3420: PPUSH
3421: LD_INT 2
3423: PPUSH
3424: LD_INT 0
3426: PPUSH
3427: CALL_OW 50
// end ;
3431: GO 3355
3433: POP
3434: POP
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
3435: LD_ADDR_VAR 0 2
3439: PUSH
3440: DOUBLE
3441: LD_INT 1
3443: DEC
3444: ST_TO_ADDR
3445: LD_INT 4
3447: PUSH
3448: LD_INT 5
3450: PUSH
3451: LD_INT 6
3453: PUSH
3454: LD_INT 7
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: PUSH
3463: LD_OWVAR 67
3467: ARRAY
3468: PUSH
3469: FOR_TO
3470: IFFALSE 3616
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3472: LD_INT 0
3474: PPUSH
3475: LD_INT 1
3477: PUSH
3478: LD_INT 1
3480: PUSH
3481: LD_INT 2
3483: PUSH
3484: LD_INT 4
3486: PUSH
3487: LD_INT 1
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: PUSH
3497: LD_INT 1
3499: PPUSH
3500: LD_INT 5
3502: PPUSH
3503: CALL_OW 12
3507: ARRAY
3508: PPUSH
3509: LD_INT 3
3511: PUSH
3512: LD_INT 4
3514: PUSH
3515: LD_INT 5
3517: PUSH
3518: LD_INT 5
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: PUSH
3527: LD_OWVAR 67
3531: ARRAY
3532: PPUSH
3533: CALL_OW 380
// un := CreateHuman ;
3537: LD_ADDR_VAR 0 3
3541: PUSH
3542: CALL_OW 44
3546: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroupArea , false ) then
3547: LD_VAR 0 3
3551: PPUSH
3552: LD_INT 10
3554: PPUSH
3555: LD_INT 0
3557: PPUSH
3558: CALL 71141 0 3
3562: IFFALSE 3614
// begin ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3564: LD_ADDR_EXP 39
3568: PUSH
3569: LD_EXP 39
3573: PPUSH
3574: LD_EXP 39
3578: PUSH
3579: LD_INT 1
3581: PLUS
3582: PPUSH
3583: LD_VAR 0 3
3587: PPUSH
3588: CALL_OW 1
3592: ST_TO_ADDR
// if Prob ( 50 ) then
3593: LD_INT 50
3595: PPUSH
3596: CALL_OW 13
3600: IFFALSE 3614
// ForceSleep ( un , true ) ;
3602: LD_VAR 0 3
3606: PPUSH
3607: LD_INT 1
3609: PPUSH
3610: CALL_OW 585
// end ; end ;
3614: GO 3469
3616: POP
3617: POP
// for i := 1 to 3 do
3618: LD_ADDR_VAR 0 2
3622: PUSH
3623: DOUBLE
3624: LD_INT 1
3626: DEC
3627: ST_TO_ADDR
3628: LD_INT 3
3630: PUSH
3631: FOR_TO
3632: IFFALSE 3726
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
3634: LD_INT 0
3636: PPUSH
3637: LD_INT 1
3639: PPUSH
3640: LD_INT 3
3642: PUSH
3643: LD_INT 4
3645: PUSH
3646: LD_INT 4
3648: PUSH
3649: LD_INT 5
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: PUSH
3658: LD_OWVAR 67
3662: ARRAY
3663: PPUSH
3664: CALL_OW 380
// un := CreateHuman ;
3668: LD_ADDR_VAR 0 3
3672: PUSH
3673: CALL_OW 44
3677: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3678: LD_VAR 0 3
3682: PPUSH
3683: LD_INT 11
3685: PPUSH
3686: LD_INT 0
3688: PPUSH
3689: CALL 71141 0 3
3693: IFFALSE 3724
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3695: LD_ADDR_EXP 39
3699: PUSH
3700: LD_EXP 39
3704: PPUSH
3705: LD_EXP 39
3709: PUSH
3710: LD_INT 1
3712: PLUS
3713: PPUSH
3714: LD_VAR 0 3
3718: PPUSH
3719: CALL_OW 1
3723: ST_TO_ADDR
// end ;
3724: GO 3631
3726: POP
3727: POP
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3728: LD_ADDR_VAR 0 2
3732: PUSH
3733: DOUBLE
3734: LD_INT 1
3736: DEC
3737: ST_TO_ADDR
3738: LD_INT 5
3740: PUSH
3741: LD_INT 6
3743: PUSH
3744: LD_INT 7
3746: PUSH
3747: LD_INT 8
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: LIST
3754: LIST
3755: PUSH
3756: LD_OWVAR 67
3760: ARRAY
3761: PUSH
3762: FOR_TO
3763: IFFALSE 3909
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3765: LD_INT 0
3767: PPUSH
3768: LD_INT 1
3770: PUSH
3771: LD_INT 1
3773: PUSH
3774: LD_INT 2
3776: PUSH
3777: LD_INT 4
3779: PUSH
3780: LD_INT 1
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: PUSH
3790: LD_INT 1
3792: PPUSH
3793: LD_INT 5
3795: PPUSH
3796: CALL_OW 12
3800: ARRAY
3801: PPUSH
3802: LD_INT 3
3804: PUSH
3805: LD_INT 4
3807: PUSH
3808: LD_INT 5
3810: PUSH
3811: LD_INT 5
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: PUSH
3820: LD_OWVAR 67
3824: ARRAY
3825: PPUSH
3826: CALL_OW 380
// un := CreateHuman ;
3830: LD_ADDR_VAR 0 3
3834: PUSH
3835: CALL_OW 44
3839: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3840: LD_VAR 0 3
3844: PPUSH
3845: LD_INT 15
3847: PPUSH
3848: LD_INT 0
3850: PPUSH
3851: CALL 71141 0 3
3855: IFFALSE 3907
// begin ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3857: LD_ADDR_EXP 40
3861: PUSH
3862: LD_EXP 40
3866: PPUSH
3867: LD_EXP 40
3871: PUSH
3872: LD_INT 1
3874: PLUS
3875: PPUSH
3876: LD_VAR 0 3
3880: PPUSH
3881: CALL_OW 1
3885: ST_TO_ADDR
// if Prob ( 50 ) then
3886: LD_INT 50
3888: PPUSH
3889: CALL_OW 13
3893: IFFALSE 3907
// ForceSleep ( un , true ) ;
3895: LD_VAR 0 3
3899: PPUSH
3900: LD_INT 1
3902: PPUSH
3903: CALL_OW 585
// end ; end ;
3907: GO 3762
3909: POP
3910: POP
// end ;
3911: LD_VAR 0 1
3915: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3916: LD_INT 0
3918: PPUSH
3919: PPUSH
3920: PPUSH
// uc_side := 3 ;
3921: LD_ADDR_OWVAR 20
3925: PUSH
3926: LD_INT 3
3928: ST_TO_ADDR
// uc_nation := 3 ;
3929: LD_ADDR_OWVAR 21
3933: PUSH
3934: LD_INT 3
3936: ST_TO_ADDR
// for i := 1 to 6 do
3937: LD_ADDR_VAR 0 2
3941: PUSH
3942: DOUBLE
3943: LD_INT 1
3945: DEC
3946: ST_TO_ADDR
3947: LD_INT 6
3949: PUSH
3950: FOR_TO
3951: IFFALSE 4030
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
3953: LD_INT 0
3955: PPUSH
3956: LD_INT 1
3958: PUSH
3959: LD_INT 4
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PUSH
3966: LD_INT 1
3968: PPUSH
3969: LD_INT 2
3971: PPUSH
3972: CALL_OW 12
3976: ARRAY
3977: PPUSH
3978: LD_INT 0
3980: PPUSH
3981: CALL_OW 380
// un := CreateHuman ;
3985: LD_ADDR_VAR 0 3
3989: PUSH
3990: CALL_OW 44
3994: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
3995: LD_VAR 0 3
3999: PPUSH
4000: LD_INT 54
4002: PPUSH
4003: LD_INT 88
4005: PPUSH
4006: LD_INT 12
4008: PPUSH
4009: LD_INT 0
4011: PPUSH
4012: CALL_OW 50
// SetLives ( un , 1 ) ;
4016: LD_VAR 0 3
4020: PPUSH
4021: LD_INT 1
4023: PPUSH
4024: CALL_OW 234
// end ;
4028: GO 3950
4030: POP
4031: POP
// uc_side := 3 ;
4032: LD_ADDR_OWVAR 20
4036: PUSH
4037: LD_INT 3
4039: ST_TO_ADDR
// uc_nation := 0 ;
4040: LD_ADDR_OWVAR 21
4044: PUSH
4045: LD_INT 0
4047: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4048: LD_ADDR_EXP 42
4052: PUSH
4053: EMPTY
4054: ST_TO_ADDR
// apeEngGroup := [ ] ;
4055: LD_ADDR_EXP 43
4059: PUSH
4060: EMPTY
4061: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
4062: LD_ADDR_VAR 0 2
4066: PUSH
4067: DOUBLE
4068: LD_INT 1
4070: DEC
4071: ST_TO_ADDR
4072: LD_INT 4
4074: PUSH
4075: LD_INT 5
4077: PUSH
4078: LD_INT 6
4080: PUSH
4081: LD_INT 7
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: PUSH
4090: LD_OWVAR 67
4094: ARRAY
4095: PUSH
4096: FOR_TO
4097: IFFALSE 4215
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
4099: LD_INT 0
4101: PPUSH
4102: LD_INT 15
4104: PPUSH
4105: LD_INT 3
4107: PUSH
4108: LD_INT 4
4110: PUSH
4111: LD_INT 5
4113: PUSH
4114: LD_INT 6
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: PUSH
4123: LD_OWVAR 67
4127: ARRAY
4128: PPUSH
4129: CALL_OW 380
// un := CreateHuman ;
4133: LD_ADDR_VAR 0 3
4137: PUSH
4138: CALL_OW 44
4142: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4143: LD_ADDR_EXP 42
4147: PUSH
4148: LD_EXP 42
4152: PPUSH
4153: LD_EXP 42
4157: PUSH
4158: LD_INT 1
4160: PLUS
4161: PPUSH
4162: LD_VAR 0 3
4166: PPUSH
4167: CALL_OW 1
4171: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4172: LD_VAR 0 3
4176: PPUSH
4177: LD_INT 0
4179: PPUSH
4180: LD_INT 5
4182: PPUSH
4183: CALL_OW 12
4187: PPUSH
4188: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4192: LD_VAR 0 3
4196: PPUSH
4197: LD_INT 56
4199: PPUSH
4200: LD_INT 82
4202: PPUSH
4203: LD_INT 6
4205: PPUSH
4206: LD_INT 0
4208: PPUSH
4209: CALL_OW 50
// end ;
4213: GO 4096
4215: POP
4216: POP
// for i := 1 to 2 do
4217: LD_ADDR_VAR 0 2
4221: PUSH
4222: DOUBLE
4223: LD_INT 1
4225: DEC
4226: ST_TO_ADDR
4227: LD_INT 2
4229: PUSH
4230: FOR_TO
4231: IFFALSE 4307
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4233: LD_INT 0
4235: PPUSH
4236: LD_INT 16
4238: PPUSH
4239: LD_INT 4
4241: PPUSH
4242: CALL_OW 380
// un := CreateHuman ;
4246: LD_ADDR_VAR 0 3
4250: PUSH
4251: CALL_OW 44
4255: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4256: LD_ADDR_EXP 43
4260: PUSH
4261: LD_EXP 43
4265: PPUSH
4266: LD_EXP 43
4270: PUSH
4271: LD_INT 1
4273: PLUS
4274: PPUSH
4275: LD_VAR 0 3
4279: PPUSH
4280: CALL_OW 1
4284: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4285: LD_VAR 0 3
4289: PPUSH
4290: LD_INT 51
4292: PPUSH
4293: LD_INT 77
4295: PPUSH
4296: CALL_OW 428
4300: PPUSH
4301: CALL_OW 52
// end ;
4305: GO 4230
4307: POP
4308: POP
// end ;
4309: LD_VAR 0 1
4313: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4314: LD_EXP 42
4318: PPUSH
4319: LD_INT 3
4321: PUSH
4322: LD_INT 24
4324: PUSH
4325: LD_INT 600
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: PUSH
4336: LD_INT 3
4338: PUSH
4339: LD_INT 54
4341: PUSH
4342: EMPTY
4343: LIST
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: PUSH
4349: EMPTY
4350: LIST
4351: LIST
4352: PPUSH
4353: CALL_OW 72
4357: PUSH
4358: LD_INT 66
4360: PPUSH
4361: LD_INT 89
4363: PPUSH
4364: CALL_OW 428
4368: PPUSH
4369: CALL_OW 302
4373: AND
4374: IFFALSE 4459
4376: GO 4378
4378: DISABLE
4379: LD_INT 0
4381: PPUSH
// begin enable ;
4382: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4383: LD_ADDR_VAR 0 1
4387: PUSH
4388: LD_EXP 42
4392: PPUSH
4393: LD_INT 3
4395: PUSH
4396: LD_INT 24
4398: PUSH
4399: LD_INT 600
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: PUSH
4410: LD_INT 3
4412: PUSH
4413: LD_INT 54
4415: PUSH
4416: EMPTY
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PPUSH
4427: CALL_OW 72
4431: PUSH
4432: FOR_IN
4433: IFFALSE 4457
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4435: LD_VAR 0 1
4439: PPUSH
4440: LD_INT 66
4442: PPUSH
4443: LD_INT 89
4445: PPUSH
4446: CALL_OW 428
4450: PPUSH
4451: CALL_OW 120
4455: GO 4432
4457: POP
4458: POP
// end ;
4459: PPOPN 1
4461: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4462: LD_INT 22
4464: PUSH
4465: LD_INT 2
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 92
4474: PUSH
4475: LD_INT 54
4477: PUSH
4478: LD_INT 77
4480: PUSH
4481: LD_INT 8
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: PPUSH
4494: CALL_OW 69
4498: IFFALSE 4562
4500: GO 4502
4502: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4503: LD_EXP 43
4507: PPUSH
4508: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4512: LD_EXP 43
4516: PPUSH
4517: LD_INT 22
4519: PUSH
4520: LD_INT 2
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PUSH
4527: LD_INT 92
4529: PUSH
4530: LD_INT 54
4532: PUSH
4533: LD_INT 77
4535: PUSH
4536: LD_INT 8
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: PPUSH
4549: CALL_OW 69
4553: PUSH
4554: LD_INT 1
4556: ARRAY
4557: PPUSH
4558: CALL_OW 175
// end ;
4562: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag , enemy ; begin
4563: LD_INT 0
4565: PPUSH
4566: PPUSH
4567: PPUSH
4568: PPUSH
4569: PPUSH
4570: PPUSH
4571: PPUSH
4572: PPUSH
4573: PPUSH
4574: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4575: LD_ADDR_VAR 0 3
4579: PUSH
4580: LD_INT 1
4582: PPUSH
4583: LD_INT 3
4585: PPUSH
4586: CALL_OW 12
4590: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4591: LD_ADDR_VAR 0 5
4595: PUSH
4596: LD_INT 16
4598: PUSH
4599: LD_INT 17
4601: PUSH
4602: LD_INT 19
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: LIST
4609: PUSH
4610: LD_VAR 0 3
4614: ARRAY
4615: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4616: LD_ADDR_VAR 0 7
4620: PUSH
4621: LD_INT 159
4623: PUSH
4624: LD_INT 25
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: PUSH
4631: LD_INT 137
4633: PUSH
4634: LD_INT 37
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: PUSH
4641: LD_INT 123
4643: PUSH
4644: LD_INT 55
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PUSH
4651: LD_INT 115
4653: PUSH
4654: LD_INT 71
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: PUSH
4661: LD_INT 106
4663: PUSH
4664: LD_INT 88
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 97
4673: PUSH
4674: LD_INT 114
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: LD_INT 75
4683: PUSH
4684: LD_INT 146
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: PUSH
4700: LD_INT 206
4702: PUSH
4703: LD_INT 135
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: PUSH
4710: LD_INT 184
4712: PUSH
4713: LD_INT 111
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: PUSH
4720: LD_INT 154
4722: PUSH
4723: LD_INT 97
4725: PUSH
4726: EMPTY
4727: LIST
4728: LIST
4729: PUSH
4730: LD_INT 122
4732: PUSH
4733: LD_INT 80
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PUSH
4740: LD_INT 109
4742: PUSH
4743: LD_INT 78
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: PUSH
4750: LD_INT 97
4752: PUSH
4753: LD_INT 113
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: PUSH
4760: LD_INT 75
4762: PUSH
4763: LD_INT 147
4765: PUSH
4766: EMPTY
4767: LIST
4768: LIST
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: PUSH
4779: LD_INT 185
4781: PUSH
4782: LD_INT 72
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: PUSH
4789: LD_INT 171
4791: PUSH
4792: LD_INT 83
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PUSH
4799: LD_INT 161
4801: PUSH
4802: LD_INT 99
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: LD_INT 125
4811: PUSH
4812: LD_INT 82
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: PUSH
4819: LD_INT 105
4821: PUSH
4822: LD_INT 90
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: PUSH
4829: LD_INT 96
4831: PUSH
4832: LD_INT 116
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: PUSH
4839: LD_INT 75
4841: PUSH
4842: LD_INT 147
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: LD_VAR 0 3
4867: ARRAY
4868: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4869: LD_ADDR_VAR 0 4
4873: PUSH
4874: LD_INT 4
4876: PUSH
4877: LD_INT 5
4879: PUSH
4880: LD_INT 3
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: LIST
4887: PUSH
4888: LD_VAR 0 3
4892: ARRAY
4893: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4894: LD_ADDR_VAR 0 6
4898: PUSH
4899: LD_INT 22
4901: PUSH
4902: LD_INT 20
4904: PUSH
4905: LD_INT 21
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: LIST
4912: PUSH
4913: LD_VAR 0 3
4917: ARRAY
4918: ST_TO_ADDR
// for i := 1 to 2 do
4919: LD_ADDR_VAR 0 2
4923: PUSH
4924: DOUBLE
4925: LD_INT 1
4927: DEC
4928: ST_TO_ADDR
4929: LD_INT 2
4931: PUSH
4932: FOR_TO
4933: IFFALSE 4951
// EraseResourceArea ( i , outerSpawnArea ) ;
4935: LD_VAR 0 2
4939: PPUSH
4940: LD_VAR 0 6
4944: PPUSH
4945: CALL_OW 286
4949: GO 4932
4951: POP
4952: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
4953: LD_VAR 0 6
4957: PPUSH
4958: LD_INT 2
4960: PUSH
4961: LD_INT 21
4963: PUSH
4964: LD_INT 1
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: PUSH
4971: LD_INT 21
4973: PUSH
4974: LD_INT 2
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PUSH
4981: LD_INT 21
4983: PUSH
4984: LD_INT 3
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: PPUSH
4997: CALL_OW 70
5001: IFFALSE 5216
// repeat wait ( 0 0$1 ) ;
5003: LD_INT 35
5005: PPUSH
5006: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5010: LD_VAR 0 6
5014: PPUSH
5015: LD_INT 2
5017: PUSH
5018: LD_INT 21
5020: PUSH
5021: LD_INT 2
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: PUSH
5028: LD_INT 21
5030: PUSH
5031: LD_INT 3
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: LIST
5042: PPUSH
5043: CALL_OW 70
5047: IFFALSE 5108
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5049: LD_ADDR_VAR 0 2
5053: PUSH
5054: LD_VAR 0 6
5058: PPUSH
5059: LD_INT 2
5061: PUSH
5062: LD_INT 21
5064: PUSH
5065: LD_INT 2
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: PUSH
5072: LD_INT 21
5074: PUSH
5075: LD_INT 3
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: LIST
5086: PPUSH
5087: CALL_OW 70
5091: PUSH
5092: FOR_IN
5093: IFFALSE 5106
// RemoveUnit ( i ) ;
5095: LD_VAR 0 2
5099: PPUSH
5100: CALL_OW 64
5104: GO 5092
5106: POP
5107: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5108: LD_VAR 0 6
5112: PPUSH
5113: LD_INT 21
5115: PUSH
5116: LD_INT 1
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: PPUSH
5123: CALL_OW 70
5127: IFFALSE 5176
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5129: LD_ADDR_VAR 0 2
5133: PUSH
5134: LD_VAR 0 6
5138: PPUSH
5139: LD_INT 21
5141: PUSH
5142: LD_INT 1
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PPUSH
5149: CALL_OW 70
5153: PUSH
5154: FOR_IN
5155: IFFALSE 5174
// ComMoveXY ( i , 113 , 53 ) ;
5157: LD_VAR 0 2
5161: PPUSH
5162: LD_INT 113
5164: PPUSH
5165: LD_INT 53
5167: PPUSH
5168: CALL_OW 111
5172: GO 5154
5174: POP
5175: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5176: LD_VAR 0 6
5180: PPUSH
5181: LD_INT 2
5183: PUSH
5184: LD_INT 21
5186: PUSH
5187: LD_INT 1
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: PUSH
5194: LD_INT 21
5196: PUSH
5197: LD_INT 2
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: LIST
5208: PPUSH
5209: CALL_OW 70
5213: NOT
5214: IFFALSE 5003
// case convoyCounter of 1 .. 3 :
5216: LD_EXP 16
5220: PUSH
5221: LD_INT 1
5223: DOUBLE
5224: GREATEREQUAL
5225: IFFALSE 5233
5227: LD_INT 3
5229: DOUBLE
5230: LESSEQUAL
5231: IFTRUE 5235
5233: GO 5870
5235: POP
// begin for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] - convoyCounter do
5236: LD_ADDR_VAR 0 2
5240: PUSH
5241: DOUBLE
5242: LD_INT 1
5244: DEC
5245: ST_TO_ADDR
5246: LD_INT 5
5248: PUSH
5249: LD_INT 6
5251: PUSH
5252: LD_INT 7
5254: PUSH
5255: LD_INT 8
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: PUSH
5264: LD_OWVAR 67
5268: ARRAY
5269: PUSH
5270: LD_EXP 16
5274: MINUS
5275: PUSH
5276: FOR_TO
5277: IFFALSE 5484
// begin uc_side := 3 ;
5279: LD_ADDR_OWVAR 20
5283: PUSH
5284: LD_INT 3
5286: ST_TO_ADDR
// uc_nation := 3 ;
5287: LD_ADDR_OWVAR 21
5291: PUSH
5292: LD_INT 3
5294: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5295: LD_INT 0
5297: PPUSH
5298: LD_INT 1
5300: PUSH
5301: LD_INT 1
5303: PUSH
5304: LD_INT 1
5306: PUSH
5307: LD_INT 4
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: PUSH
5316: LD_INT 1
5318: PPUSH
5319: LD_INT 4
5321: PPUSH
5322: CALL_OW 12
5326: ARRAY
5327: PPUSH
5328: LD_INT 4
5330: PUSH
5331: LD_INT 5
5333: PUSH
5334: LD_INT 6
5336: PUSH
5337: LD_INT 7
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: PUSH
5346: LD_OWVAR 67
5350: ARRAY
5351: PPUSH
5352: CALL_OW 380
// un := CreateHuman ;
5356: LD_ADDR_VAR 0 8
5360: PUSH
5361: CALL_OW 44
5365: ST_TO_ADDR
// SetDir ( un , dir ) ;
5366: LD_VAR 0 8
5370: PPUSH
5371: LD_VAR 0 4
5375: PPUSH
5376: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5380: LD_VAR 0 8
5384: PPUSH
5385: LD_VAR 0 5
5389: PPUSH
5390: LD_INT 0
5392: PPUSH
5393: CALL 71141 0 3
5397: IFFALSE 5482
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5399: LD_ADDR_EXP 41
5403: PUSH
5404: LD_EXP 41
5408: PPUSH
5409: LD_EXP 41
5413: PUSH
5414: LD_INT 1
5416: PLUS
5417: PPUSH
5418: LD_VAR 0 8
5422: PPUSH
5423: CALL_OW 1
5427: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5428: LD_VAR 0 8
5432: PPUSH
5433: LD_INT 1
5435: PPUSH
5436: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5440: LD_VAR 0 8
5444: PPUSH
5445: LD_VAR 0 7
5449: PUSH
5450: LD_INT 1
5452: ARRAY
5453: PUSH
5454: LD_INT 1
5456: ARRAY
5457: PPUSH
5458: LD_VAR 0 7
5462: PUSH
5463: LD_INT 1
5465: ARRAY
5466: PUSH
5467: LD_INT 2
5469: ARRAY
5470: PPUSH
5471: CALL_OW 111
// wait ( 0 0$2 ) ;
5475: LD_INT 70
5477: PPUSH
5478: CALL_OW 67
// end ; end ;
5482: GO 5276
5484: POP
5485: POP
// for i := 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
5486: LD_ADDR_VAR 0 2
5490: PUSH
5491: DOUBLE
5492: LD_INT 1
5494: DEC
5495: ST_TO_ADDR
5496: LD_INT 3
5498: PUSH
5499: LD_INT 4
5501: PUSH
5502: LD_INT 4
5504: PUSH
5505: LD_INT 4
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: PUSH
5514: LD_OWVAR 67
5518: ARRAY
5519: PUSH
5520: FOR_TO
5521: IFFALSE 5866
// begin uc_side := 3 ;
5523: LD_ADDR_OWVAR 20
5527: PUSH
5528: LD_INT 3
5530: ST_TO_ADDR
// uc_nation := 3 ;
5531: LD_ADDR_OWVAR 21
5535: PUSH
5536: LD_INT 3
5538: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5539: LD_INT 3
5541: PPUSH
5542: LD_INT 3
5544: PPUSH
5545: LD_INT 21
5547: PUSH
5548: LD_INT 22
5550: PUSH
5551: LD_INT 23
5553: PUSH
5554: LD_INT 24
5556: PUSH
5557: LD_INT 24
5559: PUSH
5560: LD_INT 24
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: PUSH
5571: LD_OWVAR 67
5575: PPUSH
5576: LD_OWVAR 67
5580: PUSH
5581: LD_INT 2
5583: PLUS
5584: PPUSH
5585: CALL_OW 12
5589: ARRAY
5590: PPUSH
5591: LD_INT 1
5593: PPUSH
5594: LD_INT 1
5596: PPUSH
5597: LD_INT 42
5599: PUSH
5600: LD_INT 44
5602: PUSH
5603: LD_INT 43
5605: PUSH
5606: LD_INT 44
5608: PUSH
5609: LD_INT 46
5611: PUSH
5612: LD_INT 46
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: PUSH
5623: LD_INT 1
5625: PPUSH
5626: LD_OWVAR 67
5630: PUSH
5631: LD_INT 2
5633: PLUS
5634: PPUSH
5635: CALL_OW 12
5639: ARRAY
5640: PPUSH
5641: LD_INT 90
5643: PPUSH
5644: CALL 439 0 7
// un := CreateVehicle ;
5648: LD_ADDR_VAR 0 8
5652: PUSH
5653: CALL_OW 45
5657: ST_TO_ADDR
// SetDir ( un , dir ) ;
5658: LD_VAR 0 8
5662: PPUSH
5663: LD_VAR 0 4
5667: PPUSH
5668: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5672: LD_VAR 0 8
5676: PPUSH
5677: LD_VAR 0 5
5681: PPUSH
5682: LD_INT 0
5684: PPUSH
5685: CALL 71141 0 3
5689: IFFALSE 5864
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5691: LD_ADDR_EXP 41
5695: PUSH
5696: LD_EXP 41
5700: PPUSH
5701: LD_EXP 41
5705: PUSH
5706: LD_INT 1
5708: PLUS
5709: PPUSH
5710: LD_VAR 0 8
5714: PPUSH
5715: CALL_OW 1
5719: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
5720: LD_INT 0
5722: PPUSH
5723: LD_INT 3
5725: PUSH
5726: LD_INT 4
5728: PUSH
5729: LD_INT 5
5731: PUSH
5732: LD_INT 6
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: PUSH
5741: LD_OWVAR 67
5745: ARRAY
5746: PPUSH
5747: CALL_OW 383
// un := CreateHuman ;
5751: LD_ADDR_VAR 0 8
5755: PUSH
5756: CALL_OW 44
5760: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5761: LD_VAR 0 8
5765: PPUSH
5766: LD_EXP 41
5770: PUSH
5771: LD_EXP 41
5775: ARRAY
5776: PPUSH
5777: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5781: LD_ADDR_EXP 41
5785: PUSH
5786: LD_EXP 41
5790: PPUSH
5791: LD_EXP 41
5795: PUSH
5796: LD_INT 1
5798: PLUS
5799: PPUSH
5800: LD_VAR 0 8
5804: PPUSH
5805: CALL_OW 1
5809: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5810: LD_VAR 0 8
5814: PPUSH
5815: LD_INT 1
5817: PPUSH
5818: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5822: LD_VAR 0 8
5826: PPUSH
5827: LD_VAR 0 7
5831: PUSH
5832: LD_INT 1
5834: ARRAY
5835: PUSH
5836: LD_INT 1
5838: ARRAY
5839: PPUSH
5840: LD_VAR 0 7
5844: PUSH
5845: LD_INT 1
5847: ARRAY
5848: PUSH
5849: LD_INT 2
5851: ARRAY
5852: PPUSH
5853: CALL_OW 111
// wait ( 0 0$3 ) ;
5857: LD_INT 105
5859: PPUSH
5860: CALL_OW 67
// end ; end ;
5864: GO 5520
5866: POP
5867: POP
// end ; 4 .. 7 :
5868: GO 6475
5870: LD_INT 4
5872: DOUBLE
5873: GREATEREQUAL
5874: IFFALSE 5882
5876: LD_INT 7
5878: DOUBLE
5879: LESSEQUAL
5880: IFTRUE 5884
5882: GO 6474
5884: POP
// begin for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
5885: LD_ADDR_VAR 0 2
5889: PUSH
5890: DOUBLE
5891: LD_INT 1
5893: DEC
5894: ST_TO_ADDR
5895: LD_INT 2
5897: PUSH
5898: LD_INT 3
5900: PUSH
5901: LD_INT 4
5903: PUSH
5904: LD_INT 4
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: PUSH
5913: LD_OWVAR 67
5917: ARRAY
5918: PUSH
5919: FOR_TO
5920: IFFALSE 6100
// begin uc_side := 3 ;
5922: LD_ADDR_OWVAR 20
5926: PUSH
5927: LD_INT 3
5929: ST_TO_ADDR
// uc_nation := 3 ;
5930: LD_ADDR_OWVAR 21
5934: PUSH
5935: LD_INT 3
5937: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5938: LD_INT 0
5940: PPUSH
5941: LD_INT 1
5943: PPUSH
5944: LD_INT 4
5946: PUSH
5947: LD_INT 5
5949: PUSH
5950: LD_INT 6
5952: PUSH
5953: LD_INT 7
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: LIST
5960: LIST
5961: PUSH
5962: LD_OWVAR 67
5966: ARRAY
5967: PPUSH
5968: CALL_OW 380
// un := CreateHuman ;
5972: LD_ADDR_VAR 0 8
5976: PUSH
5977: CALL_OW 44
5981: ST_TO_ADDR
// SetDir ( un , dir ) ;
5982: LD_VAR 0 8
5986: PPUSH
5987: LD_VAR 0 4
5991: PPUSH
5992: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5996: LD_VAR 0 8
6000: PPUSH
6001: LD_VAR 0 5
6005: PPUSH
6006: LD_INT 0
6008: PPUSH
6009: CALL 71141 0 3
6013: IFFALSE 6098
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6015: LD_ADDR_EXP 41
6019: PUSH
6020: LD_EXP 41
6024: PPUSH
6025: LD_EXP 41
6029: PUSH
6030: LD_INT 1
6032: PLUS
6033: PPUSH
6034: LD_VAR 0 8
6038: PPUSH
6039: CALL_OW 1
6043: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6044: LD_VAR 0 8
6048: PPUSH
6049: LD_INT 1
6051: PPUSH
6052: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6056: LD_VAR 0 8
6060: PPUSH
6061: LD_VAR 0 7
6065: PUSH
6066: LD_INT 1
6068: ARRAY
6069: PUSH
6070: LD_INT 1
6072: ARRAY
6073: PPUSH
6074: LD_VAR 0 7
6078: PUSH
6079: LD_INT 1
6081: ARRAY
6082: PUSH
6083: LD_INT 2
6085: ARRAY
6086: PPUSH
6087: CALL_OW 111
// wait ( 0 0$2 ) ;
6091: LD_INT 70
6093: PPUSH
6094: CALL_OW 67
// end ; end ;
6098: GO 5919
6100: POP
6101: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
6102: LD_ADDR_VAR 0 2
6106: PUSH
6107: DOUBLE
6108: LD_INT 1
6110: DEC
6111: ST_TO_ADDR
6112: LD_INT 2
6114: PUSH
6115: LD_INT 3
6117: PUSH
6118: LD_INT 3
6120: PUSH
6121: LD_INT 4
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: PUSH
6130: LD_OWVAR 67
6134: ARRAY
6135: PUSH
6136: FOR_TO
6137: IFFALSE 6470
// begin uc_side := 3 ;
6139: LD_ADDR_OWVAR 20
6143: PUSH
6144: LD_INT 3
6146: ST_TO_ADDR
// uc_nation := 3 ;
6147: LD_ADDR_OWVAR 21
6151: PUSH
6152: LD_INT 3
6154: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6155: LD_INT 3
6157: PPUSH
6158: LD_INT 3
6160: PPUSH
6161: LD_INT 21
6163: PUSH
6164: LD_INT 22
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: LD_INT 1
6173: PPUSH
6174: LD_INT 2
6176: PPUSH
6177: CALL_OW 12
6181: ARRAY
6182: PPUSH
6183: LD_INT 1
6185: PPUSH
6186: LD_INT 1
6188: PPUSH
6189: LD_INT 42
6191: PUSH
6192: LD_INT 44
6194: PUSH
6195: LD_INT 43
6197: PUSH
6198: LD_INT 44
6200: PUSH
6201: LD_INT 44
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: PUSH
6211: LD_INT 1
6213: PPUSH
6214: LD_OWVAR 67
6218: PUSH
6219: LD_INT 1
6221: PLUS
6222: PPUSH
6223: CALL_OW 12
6227: ARRAY
6228: PPUSH
6229: LD_INT 90
6231: PPUSH
6232: CALL 439 0 7
// un := CreateVehicle ;
6236: LD_ADDR_VAR 0 8
6240: PUSH
6241: CALL_OW 45
6245: ST_TO_ADDR
// SetDir ( un , dir ) ;
6246: LD_VAR 0 8
6250: PPUSH
6251: LD_VAR 0 4
6255: PPUSH
6256: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6260: LD_VAR 0 8
6264: PPUSH
6265: LD_VAR 0 5
6269: PPUSH
6270: LD_INT 0
6272: PPUSH
6273: CALL 71141 0 3
6277: IFFALSE 6468
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6279: LD_ADDR_EXP 41
6283: PUSH
6284: LD_EXP 41
6288: PPUSH
6289: LD_EXP 41
6293: PUSH
6294: LD_INT 1
6296: PLUS
6297: PPUSH
6298: LD_VAR 0 8
6302: PPUSH
6303: CALL_OW 1
6307: ST_TO_ADDR
// uc_side := 3 ;
6308: LD_ADDR_OWVAR 20
6312: PUSH
6313: LD_INT 3
6315: ST_TO_ADDR
// uc_nation := 3 ;
6316: LD_ADDR_OWVAR 21
6320: PUSH
6321: LD_INT 3
6323: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
6324: LD_INT 0
6326: PPUSH
6327: LD_INT 3
6329: PUSH
6330: LD_INT 4
6332: PUSH
6333: LD_INT 5
6335: PUSH
6336: LD_INT 6
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: PUSH
6345: LD_OWVAR 67
6349: ARRAY
6350: PPUSH
6351: CALL_OW 383
// un := CreateHuman ;
6355: LD_ADDR_VAR 0 8
6359: PUSH
6360: CALL_OW 44
6364: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6365: LD_VAR 0 8
6369: PPUSH
6370: LD_EXP 41
6374: PUSH
6375: LD_EXP 41
6379: ARRAY
6380: PPUSH
6381: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6385: LD_ADDR_EXP 41
6389: PUSH
6390: LD_EXP 41
6394: PPUSH
6395: LD_EXP 41
6399: PUSH
6400: LD_INT 1
6402: PLUS
6403: PPUSH
6404: LD_VAR 0 8
6408: PPUSH
6409: CALL_OW 1
6413: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6414: LD_VAR 0 8
6418: PPUSH
6419: LD_INT 1
6421: PPUSH
6422: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6426: LD_VAR 0 8
6430: PPUSH
6431: LD_VAR 0 7
6435: PUSH
6436: LD_INT 1
6438: ARRAY
6439: PUSH
6440: LD_INT 1
6442: ARRAY
6443: PPUSH
6444: LD_VAR 0 7
6448: PUSH
6449: LD_INT 1
6451: ARRAY
6452: PUSH
6453: LD_INT 2
6455: ARRAY
6456: PPUSH
6457: CALL_OW 111
// wait ( 0 0$2 ) ;
6461: LD_INT 70
6463: PPUSH
6464: CALL_OW 67
// end ; end ;
6468: GO 6136
6470: POP
6471: POP
// end ; end ;
6472: GO 6475
6474: POP
// repeat wait ( 0 0$1 ) ;
6475: LD_INT 35
6477: PPUSH
6478: CALL_OW 67
// for un in ruConvoySquad do
6482: LD_ADDR_VAR 0 8
6486: PUSH
6487: LD_EXP 41
6491: PUSH
6492: FOR_IN
6493: IFFALSE 7117
// begin if IsInArea ( un , westSouthOutArea ) then
6495: LD_VAR 0 8
6499: PPUSH
6500: LD_INT 18
6502: PPUSH
6503: CALL_OW 308
6507: IFFALSE 6595
// begin if GetType ( un ) = unit_vehicle then
6509: LD_VAR 0 8
6513: PPUSH
6514: CALL_OW 247
6518: PUSH
6519: LD_INT 2
6521: EQUAL
6522: IFFALSE 6554
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6524: LD_ADDR_EXP 41
6528: PUSH
6529: LD_EXP 41
6533: PUSH
6534: LD_VAR 0 8
6538: PPUSH
6539: CALL_OW 311
6543: DIFF
6544: ST_TO_ADDR
// RemoveUnit ( un ) ;
6545: LD_VAR 0 8
6549: PPUSH
6550: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6554: LD_ADDR_EXP 15
6558: PUSH
6559: LD_EXP 15
6563: PUSH
6564: LD_INT 1
6566: PLUS
6567: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6568: LD_ADDR_EXP 41
6572: PUSH
6573: LD_EXP 41
6577: PUSH
6578: LD_VAR 0 8
6582: DIFF
6583: ST_TO_ADDR
// RemoveUnit ( un ) ;
6584: LD_VAR 0 8
6588: PPUSH
6589: CALL_OW 64
// break ;
6593: GO 7117
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6595: LD_VAR 0 8
6599: PPUSH
6600: CALL_OW 305
6604: NOT
6605: PUSH
6606: LD_VAR 0 8
6610: PPUSH
6611: CALL_OW 310
6615: NOT
6616: AND
6617: IFFALSE 6635
// ruConvoySquad := ruConvoySquad diff un ;
6619: LD_ADDR_EXP 41
6623: PUSH
6624: LD_EXP 41
6628: PUSH
6629: LD_VAR 0 8
6633: DIFF
6634: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6635: LD_VAR 0 8
6639: PPUSH
6640: CALL_OW 302
6644: PUSH
6645: LD_VAR 0 8
6649: PPUSH
6650: CALL_OW 314
6654: NOT
6655: AND
6656: IFFALSE 7115
// begin tag := GetTag ( un ) ;
6658: LD_ADDR_VAR 0 9
6662: PUSH
6663: LD_VAR 0 8
6667: PPUSH
6668: CALL_OW 110
6672: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6673: LD_VAR 0 8
6677: PPUSH
6678: LD_VAR 0 7
6682: PUSH
6683: LD_VAR 0 9
6687: PUSH
6688: LD_INT 1
6690: PLUS
6691: ARRAY
6692: PUSH
6693: LD_INT 1
6695: ARRAY
6696: PPUSH
6697: LD_VAR 0 7
6701: PUSH
6702: LD_VAR 0 9
6706: PUSH
6707: LD_INT 1
6709: PLUS
6710: ARRAY
6711: PUSH
6712: LD_INT 2
6714: ARRAY
6715: PPUSH
6716: CALL_OW 297
6720: PUSH
6721: LD_INT 6
6723: LESS
6724: IFFALSE 6907
// begin SetTag ( un , tag + 1 ) ;
6726: LD_VAR 0 8
6730: PPUSH
6731: LD_VAR 0 9
6735: PUSH
6736: LD_INT 1
6738: PLUS
6739: PPUSH
6740: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6744: LD_VAR 0 8
6748: PPUSH
6749: CALL_OW 247
6753: PUSH
6754: LD_INT 2
6756: EQUAL
6757: PUSH
6758: LD_VAR 0 8
6762: PPUSH
6763: CALL_OW 257
6767: PUSH
6768: LD_INT 3
6770: EQUAL
6771: OR
6772: IFFALSE 6905
// begin enemy := FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , un , 8 ] ] ) ;
6774: LD_ADDR_VAR 0 10
6778: PUSH
6779: LD_INT 22
6781: PUSH
6782: LD_INT 2
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: PUSH
6789: LD_INT 91
6791: PUSH
6792: LD_VAR 0 8
6796: PUSH
6797: LD_INT 8
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: LIST
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: PPUSH
6809: CALL_OW 69
6813: ST_TO_ADDR
// if enemy then
6814: LD_VAR 0 10
6818: IFFALSE 6846
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) else
6820: LD_VAR 0 8
6824: PPUSH
6825: LD_VAR 0 10
6829: PPUSH
6830: LD_VAR 0 8
6834: PPUSH
6835: CALL_OW 74
6839: PPUSH
6840: CALL_OW 115
6844: GO 6905
// begin AddComWait ( un , 0 0$4 ) ;
6846: LD_VAR 0 8
6850: PPUSH
6851: LD_INT 140
6853: PPUSH
6854: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6858: LD_VAR 0 8
6862: PPUSH
6863: LD_VAR 0 7
6867: PUSH
6868: LD_VAR 0 9
6872: PUSH
6873: LD_INT 1
6875: PLUS
6876: ARRAY
6877: PUSH
6878: LD_INT 1
6880: ARRAY
6881: PPUSH
6882: LD_VAR 0 7
6886: PUSH
6887: LD_VAR 0 9
6891: PUSH
6892: LD_INT 1
6894: PLUS
6895: ARRAY
6896: PUSH
6897: LD_INT 2
6899: ARRAY
6900: PPUSH
6901: CALL_OW 174
// end ; end ; end else
6905: GO 7115
// begin if GetClass ( un ) = 4 then
6907: LD_VAR 0 8
6911: PPUSH
6912: CALL_OW 257
6916: PUSH
6917: LD_INT 4
6919: EQUAL
6920: IFFALSE 7068
// begin if UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6922: LD_EXP 41
6926: PPUSH
6927: LD_INT 21
6929: PUSH
6930: LD_INT 1
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: LD_INT 3
6939: PUSH
6940: LD_INT 24
6942: PUSH
6943: LD_INT 1000
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PPUSH
6958: CALL_OW 72
6962: IFFALSE 7020
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
6964: LD_VAR 0 8
6968: PPUSH
6969: LD_EXP 41
6973: PPUSH
6974: LD_INT 21
6976: PUSH
6977: LD_INT 1
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 3
6986: PUSH
6987: LD_INT 24
6989: PUSH
6990: LD_INT 1000
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PPUSH
7005: CALL_OW 72
7009: PUSH
7010: LD_INT 1
7012: ARRAY
7013: PPUSH
7014: CALL_OW 128
7018: GO 7066
// ComMoveUnit ( un , NearestUnitToUnit ( UnitFilter ( ruConvoySquad , [ f_not , [ f_class , 4 ] ] ) , un ) ) end else
7020: LD_VAR 0 8
7024: PPUSH
7025: LD_EXP 41
7029: PPUSH
7030: LD_INT 3
7032: PUSH
7033: LD_INT 25
7035: PUSH
7036: LD_INT 4
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PPUSH
7047: CALL_OW 72
7051: PPUSH
7052: LD_VAR 0 8
7056: PPUSH
7057: CALL_OW 74
7061: PPUSH
7062: CALL_OW 112
7066: GO 7115
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7068: LD_VAR 0 8
7072: PPUSH
7073: LD_VAR 0 7
7077: PUSH
7078: LD_VAR 0 9
7082: PUSH
7083: LD_INT 1
7085: PLUS
7086: ARRAY
7087: PUSH
7088: LD_INT 1
7090: ARRAY
7091: PPUSH
7092: LD_VAR 0 7
7096: PUSH
7097: LD_VAR 0 9
7101: PUSH
7102: LD_INT 1
7104: PLUS
7105: ARRAY
7106: PUSH
7107: LD_INT 2
7109: ARRAY
7110: PPUSH
7111: CALL_OW 114
// end ; end ; end ;
7115: GO 6492
7117: POP
7118: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
7119: LD_EXP 41
7123: PPUSH
7124: LD_INT 52
7126: PUSH
7127: EMPTY
7128: LIST
7129: PUSH
7130: LD_INT 21
7132: PUSH
7133: LD_INT 1
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PPUSH
7144: CALL_OW 72
7148: NOT
7149: IFFALSE 6475
// end ;
7151: LD_VAR 0 1
7155: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
7156: LD_EXP 16
7160: PUSH
7161: LD_INT 3
7163: PPUSH
7164: LD_INT 5
7166: PPUSH
7167: CALL_OW 12
7171: LESS
7172: PUSH
7173: LD_EXP 41
7177: NOT
7178: AND
7179: PUSH
7180: LD_OWVAR 67
7184: PUSH
7185: LD_INT 1
7187: GREATER
7188: AND
7189: IFFALSE 7609
7191: GO 7193
7193: DISABLE
7194: LD_INT 0
7196: PPUSH
7197: PPUSH
7198: PPUSH
// begin for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
7199: LD_ADDR_VAR 0 1
7203: PUSH
7204: DOUBLE
7205: LD_INT 1
7207: DEC
7208: ST_TO_ADDR
7209: LD_INT 2
7211: PUSH
7212: LD_INT 3
7214: PUSH
7215: LD_INT 4
7217: PUSH
7218: LD_INT 5
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: PUSH
7227: LD_OWVAR 67
7231: ARRAY
7232: PUSH
7233: FOR_TO
7234: IFFALSE 7530
// begin uc_side := 3 ;
7236: LD_ADDR_OWVAR 20
7240: PUSH
7241: LD_INT 3
7243: ST_TO_ADDR
// uc_nation := 3 ;
7244: LD_ADDR_OWVAR 21
7248: PUSH
7249: LD_INT 3
7251: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7252: LD_INT 3
7254: PPUSH
7255: LD_INT 3
7257: PPUSH
7258: LD_INT 21
7260: PUSH
7261: LD_INT 22
7263: PUSH
7264: LD_INT 23
7266: PUSH
7267: LD_INT 24
7269: PUSH
7270: LD_INT 24
7272: PUSH
7273: LD_INT 24
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: LIST
7283: PUSH
7284: LD_OWVAR 67
7288: PPUSH
7289: LD_OWVAR 67
7293: PUSH
7294: LD_INT 2
7296: PLUS
7297: PPUSH
7298: CALL_OW 12
7302: ARRAY
7303: PPUSH
7304: LD_INT 1
7306: PPUSH
7307: LD_INT 1
7309: PPUSH
7310: LD_INT 42
7312: PUSH
7313: LD_INT 44
7315: PUSH
7316: LD_INT 43
7318: PUSH
7319: LD_INT 44
7321: PUSH
7322: LD_INT 46
7324: PUSH
7325: LD_INT 46
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: PUSH
7336: LD_INT 1
7338: PPUSH
7339: LD_OWVAR 67
7343: PUSH
7344: LD_INT 2
7346: PLUS
7347: PPUSH
7348: CALL_OW 12
7352: ARRAY
7353: PPUSH
7354: LD_INT 90
7356: PPUSH
7357: CALL 439 0 7
// un := CreateVehicle ;
7361: LD_ADDR_VAR 0 3
7365: PUSH
7366: CALL_OW 45
7370: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7371: LD_VAR 0 3
7375: PPUSH
7376: LD_INT 0
7378: PPUSH
7379: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7383: LD_VAR 0 3
7387: PPUSH
7388: LD_INT 23
7390: PPUSH
7391: LD_INT 0
7393: PPUSH
7394: CALL 71141 0 3
7398: IFFALSE 7528
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7400: LD_ADDR_VAR 0 2
7404: PUSH
7405: LD_VAR 0 2
7409: PPUSH
7410: LD_VAR 0 2
7414: PUSH
7415: LD_INT 1
7417: PLUS
7418: PPUSH
7419: LD_VAR 0 3
7423: PPUSH
7424: CALL_OW 1
7428: ST_TO_ADDR
// uc_side := 3 ;
7429: LD_ADDR_OWVAR 20
7433: PUSH
7434: LD_INT 3
7436: ST_TO_ADDR
// uc_nation := 3 ;
7437: LD_ADDR_OWVAR 21
7441: PUSH
7442: LD_INT 3
7444: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
7445: LD_INT 0
7447: PPUSH
7448: LD_INT 3
7450: PUSH
7451: LD_INT 4
7453: PUSH
7454: LD_INT 5
7456: PUSH
7457: LD_INT 6
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: PUSH
7466: LD_OWVAR 67
7470: ARRAY
7471: PPUSH
7472: CALL_OW 383
// un := CreateHuman ;
7476: LD_ADDR_VAR 0 3
7480: PUSH
7481: CALL_OW 44
7485: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7486: LD_VAR 0 3
7490: PPUSH
7491: LD_VAR 0 2
7495: PUSH
7496: LD_VAR 0 2
7500: ARRAY
7501: PPUSH
7502: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7506: LD_VAR 0 3
7510: PPUSH
7511: LD_INT 80
7513: PPUSH
7514: LD_INT 139
7516: PPUSH
7517: CALL_OW 111
// wait ( 0 0$3 ) ;
7521: LD_INT 105
7523: PPUSH
7524: CALL_OW 67
// end ; end ;
7528: GO 7233
7530: POP
7531: POP
// for i in tmp do
7532: LD_ADDR_VAR 0 1
7536: PUSH
7537: LD_VAR 0 2
7541: PUSH
7542: FOR_IN
7543: IFFALSE 7607
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7545: LD_VAR 0 1
7549: PPUSH
7550: LD_INT 101
7552: PPUSH
7553: LD_INT 102
7555: PPUSH
7556: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7560: LD_VAR 0 1
7564: PPUSH
7565: LD_INT 110
7567: PPUSH
7568: LD_INT 78
7570: PPUSH
7571: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7575: LD_VAR 0 1
7579: PPUSH
7580: LD_INT 75
7582: PPUSH
7583: LD_INT 101
7585: PPUSH
7586: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7590: LD_VAR 0 1
7594: PPUSH
7595: LD_INT 57
7597: PPUSH
7598: LD_INT 83
7600: PPUSH
7601: CALL_OW 174
// end ;
7605: GO 7542
7607: POP
7608: POP
// end ;
7609: PPOPN 3
7611: END
// every 0 0$1 trigger UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) or UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do var i ;
7612: LD_EXP 39
7616: PPUSH
7617: LD_INT 3
7619: PUSH
7620: LD_INT 24
7622: PUSH
7623: LD_INT 1000
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PPUSH
7634: CALL_OW 72
7638: PUSH
7639: LD_EXP 40
7643: PPUSH
7644: LD_INT 3
7646: PUSH
7647: LD_INT 24
7649: PUSH
7650: LD_INT 1000
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PPUSH
7661: CALL_OW 72
7665: OR
7666: IFFALSE 7765
7668: GO 7670
7670: DISABLE
7671: LD_INT 0
7673: PPUSH
// begin enable ;
7674: ENABLE
// for i in UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) union UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do
7675: LD_ADDR_VAR 0 1
7679: PUSH
7680: LD_EXP 39
7684: PPUSH
7685: LD_INT 3
7687: PUSH
7688: LD_INT 24
7690: PUSH
7691: LD_INT 1000
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PPUSH
7702: CALL_OW 72
7706: PUSH
7707: LD_EXP 40
7711: PPUSH
7712: LD_INT 3
7714: PUSH
7715: LD_INT 24
7717: PUSH
7718: LD_INT 1000
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: PPUSH
7729: CALL_OW 72
7733: UNION
7734: PUSH
7735: FOR_IN
7736: IFFALSE 7763
// if IsSleeping ( i ) then
7738: LD_VAR 0 1
7742: PPUSH
7743: CALL_OW 555
7747: IFFALSE 7761
// ForceSleep ( i , false ) ;
7749: LD_VAR 0 1
7753: PPUSH
7754: LD_INT 0
7756: PPUSH
7757: CALL_OW 585
7761: GO 7735
7763: POP
7764: POP
// end ;
7765: PPOPN 1
7767: END
// every 0 0$1 trigger UnitFilter ( oilBaseGuard , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_inarea , eastBaseArea ] ] ] ) do var i , tmp ;
7768: LD_EXP 38
7772: PPUSH
7773: LD_INT 1
7775: PUSH
7776: LD_INT 3
7778: PUSH
7779: LD_INT 54
7781: PUSH
7782: EMPTY
7783: LIST
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: PUSH
7789: LD_INT 3
7791: PUSH
7792: LD_INT 95
7794: PUSH
7795: LD_INT 26
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: LIST
7810: PPUSH
7811: CALL_OW 72
7815: IFFALSE 7910
7817: GO 7819
7819: DISABLE
7820: LD_INT 0
7822: PPUSH
7823: PPUSH
// begin enable ;
7824: ENABLE
// tmp := UnitFilter ( oilBaseGuard , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_inarea , eastBaseArea ] ] ] ) ;
7825: LD_ADDR_VAR 0 2
7829: PUSH
7830: LD_EXP 38
7834: PPUSH
7835: LD_INT 1
7837: PUSH
7838: LD_INT 3
7840: PUSH
7841: LD_INT 54
7843: PUSH
7844: EMPTY
7845: LIST
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PUSH
7851: LD_INT 3
7853: PUSH
7854: LD_INT 95
7856: PUSH
7857: LD_INT 26
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: LIST
7872: PPUSH
7873: CALL_OW 72
7877: ST_TO_ADDR
// for i in tmp do
7878: LD_ADDR_VAR 0 1
7882: PUSH
7883: LD_VAR 0 2
7887: PUSH
7888: FOR_IN
7889: IFFALSE 7908
// ComMoveXY ( i , 206 , 110 ) ;
7891: LD_VAR 0 1
7895: PPUSH
7896: LD_INT 206
7898: PPUSH
7899: LD_INT 110
7901: PPUSH
7902: CALL_OW 111
7906: GO 7888
7908: POP
7909: POP
// end ; end_of_file
7910: PPOPN 2
7912: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7913: LD_VAR 0 1
7917: PPUSH
7918: CALL 14673 0 1
// if un = Heike then
7922: LD_VAR 0 1
7926: PUSH
7927: LD_EXP 21
7931: EQUAL
7932: IFFALSE 7941
// YouLost ( Heike ) ;
7934: LD_STRING Heike
7936: PPUSH
7937: CALL_OW 104
// if un in apeSoldGroup then
7941: LD_VAR 0 1
7945: PUSH
7946: LD_EXP 42
7950: IN
7951: IFFALSE 7969
// apeSoldGroup := apeSoldGroup diff un ;
7953: LD_ADDR_EXP 42
7957: PUSH
7958: LD_EXP 42
7962: PUSH
7963: LD_VAR 0 1
7967: DIFF
7968: ST_TO_ADDR
// if un in apeEngGroup then
7969: LD_VAR 0 1
7973: PUSH
7974: LD_EXP 43
7978: IN
7979: IFFALSE 7997
// apeEngGroup := apeEngGroup diff un ;
7981: LD_ADDR_EXP 43
7985: PUSH
7986: LD_EXP 43
7990: PUSH
7991: LD_VAR 0 1
7995: DIFF
7996: ST_TO_ADDR
// if un in oilBaseGuard then
7997: LD_VAR 0 1
8001: PUSH
8002: LD_EXP 38
8006: IN
8007: IFFALSE 8025
// oilBaseGuard := oilBaseGuard diff un ;
8009: LD_ADDR_EXP 38
8013: PUSH
8014: LD_EXP 38
8018: PUSH
8019: LD_VAR 0 1
8023: DIFF
8024: ST_TO_ADDR
// if un in ruNorthGroup then
8025: LD_VAR 0 1
8029: PUSH
8030: LD_EXP 39
8034: IN
8035: IFFALSE 8053
// ruNorthGroup := ruNorthGroup diff un ;
8037: LD_ADDR_EXP 39
8041: PUSH
8042: LD_EXP 39
8046: PUSH
8047: LD_VAR 0 1
8051: DIFF
8052: ST_TO_ADDR
// if un in ruSouthGroup then
8053: LD_VAR 0 1
8057: PUSH
8058: LD_EXP 40
8062: IN
8063: IFFALSE 8081
// ruSouthGroup := ruSouthGroup diff un ;
8065: LD_ADDR_EXP 40
8069: PUSH
8070: LD_EXP 40
8074: PUSH
8075: LD_VAR 0 1
8079: DIFF
8080: ST_TO_ADDR
// if un in ruConvoySquad then
8081: LD_VAR 0 1
8085: PUSH
8086: LD_EXP 41
8090: IN
8091: IFFALSE 8109
// ruConvoySquad := ruConvoySquad diff un ;
8093: LD_ADDR_EXP 41
8097: PUSH
8098: LD_EXP 41
8102: PUSH
8103: LD_VAR 0 1
8107: DIFF
8108: ST_TO_ADDR
// end ;
8109: PPOPN 1
8111: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8112: LD_VAR 0 1
8116: PPUSH
8117: LD_VAR 0 2
8121: PPUSH
8122: CALL 14793 0 2
// if GetWeapon ( veh ) = ar_radar then
8126: LD_VAR 0 1
8130: PPUSH
8131: CALL_OW 264
8135: PUSH
8136: LD_INT 30
8138: EQUAL
8139: IFFALSE 8149
// radarConstructed := true ;
8141: LD_ADDR_EXP 13
8145: PUSH
8146: LD_INT 1
8148: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
8149: LD_VAR 0 1
8153: PPUSH
8154: CALL_OW 264
8158: PUSH
8159: LD_INT 26
8161: EQUAL
8162: IFFALSE 8172
// flamethrowerBuilt := true ;
8164: LD_ADDR_EXP 20
8168: PUSH
8169: LD_INT 1
8171: ST_TO_ADDR
// end ;
8172: PPOPN 2
8174: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
8175: LD_ADDR_EXP 18
8179: PUSH
8180: LD_EXP 18
8184: PUSH
8185: LD_INT 1
8187: PLUS
8188: ST_TO_ADDR
// if oldId in ruConvoySquad then
8189: LD_VAR 0 2
8193: PUSH
8194: LD_EXP 41
8198: IN
8199: IFFALSE 8217
// ruConvoySquad := ruConvoySquad diff oldId ;
8201: LD_ADDR_EXP 41
8205: PUSH
8206: LD_EXP 41
8210: PUSH
8211: LD_VAR 0 2
8215: DIFF
8216: ST_TO_ADDR
// if newId in ruConvoySquad then
8217: LD_VAR 0 1
8221: PUSH
8222: LD_EXP 41
8226: IN
8227: IFFALSE 8245
// ruConvoySquad := ruConvoySquad diff newId ;
8229: LD_ADDR_EXP 41
8233: PUSH
8234: LD_EXP 41
8238: PUSH
8239: LD_VAR 0 1
8243: DIFF
8244: ST_TO_ADDR
// end ; end_of_file
8245: PPOPN 4
8247: END
// export function Action ; var i , p , un , veh , tmp ; begin
8248: LD_INT 0
8250: PPUSH
8251: PPUSH
8252: PPUSH
8253: PPUSH
8254: PPUSH
8255: PPUSH
// InGameOn ;
8256: CALL_OW 8
// music_nat := 2 ;
8260: LD_ADDR_OWVAR 71
8264: PUSH
8265: LD_INT 2
8267: ST_TO_ADDR
// music_class := music_recon ;
8268: LD_ADDR_OWVAR 72
8272: PUSH
8273: LD_INT 3
8275: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
8276: LD_INT 7
8278: PPUSH
8279: LD_INT 6
8281: PPUSH
8282: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 30 ) ;
8286: LD_INT 7
8288: PPUSH
8289: LD_INT 6
8291: PPUSH
8292: LD_INT 2
8294: PPUSH
8295: LD_INT 30
8297: NEG
8298: PPUSH
8299: CALL 1147 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Markov , Aviradze , Sophia ] ;
8303: LD_ADDR_VAR 0 6
8307: PUSH
8308: LD_EXP 21
8312: PUSH
8313: LD_EXP 22
8317: PUSH
8318: LD_EXP 23
8322: PUSH
8323: LD_EXP 24
8327: PUSH
8328: LD_EXP 25
8332: PUSH
8333: LD_EXP 26
8337: PUSH
8338: LD_EXP 28
8342: PUSH
8343: LD_EXP 33
8347: PUSH
8348: LD_EXP 27
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: ST_TO_ADDR
// tmp := tmp diff 0 ;
8364: LD_ADDR_VAR 0 6
8368: PUSH
8369: LD_VAR 0 6
8373: PUSH
8374: LD_INT 0
8376: DIFF
8377: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
8378: LD_ADDR_VAR 0 6
8382: PUSH
8383: LD_VAR 0 6
8387: PPUSH
8388: LD_INT 3
8390: PPUSH
8391: CALL 70740 0 2
8395: ST_TO_ADDR
// for i in heikeVehicles do
8396: LD_ADDR_VAR 0 2
8400: PUSH
8401: LD_EXP 35
8405: PUSH
8406: FOR_IN
8407: IFFALSE 8606
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
8409: LD_INT 5
8411: PPUSH
8412: LD_VAR 0 2
8416: PUSH
8417: LD_INT 5
8419: ARRAY
8420: PPUSH
8421: LD_VAR 0 2
8425: PUSH
8426: LD_INT 1
8428: ARRAY
8429: PPUSH
8430: LD_VAR 0 2
8434: PUSH
8435: LD_INT 2
8437: ARRAY
8438: PPUSH
8439: LD_VAR 0 2
8443: PUSH
8444: LD_INT 3
8446: ARRAY
8447: PPUSH
8448: LD_VAR 0 2
8452: PUSH
8453: LD_INT 4
8455: ARRAY
8456: PPUSH
8457: LD_INT 34
8459: PPUSH
8460: CALL 439 0 7
// veh := CreateVehicle ;
8464: LD_ADDR_VAR 0 5
8468: PUSH
8469: CALL_OW 45
8473: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
8474: LD_VAR 0 2
8478: PUSH
8479: LD_INT 4
8481: ARRAY
8482: PUSH
8483: LD_INT 51
8485: PUSH
8486: LD_INT 32
8488: PUSH
8489: LD_INT 12
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: LIST
8496: IN
8497: IFFALSE 8577
// begin if i [ 7 ] [ 1 ] then
8499: LD_VAR 0 2
8503: PUSH
8504: LD_INT 7
8506: ARRAY
8507: PUSH
8508: LD_INT 1
8510: ARRAY
8511: IFFALSE 8538
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
8513: LD_VAR 0 5
8517: PPUSH
8518: LD_INT 1
8520: PPUSH
8521: LD_VAR 0 2
8525: PUSH
8526: LD_INT 7
8528: ARRAY
8529: PUSH
8530: LD_INT 1
8532: ARRAY
8533: PPUSH
8534: CALL_OW 291
// if i [ 7 ] [ 2 ] then
8538: LD_VAR 0 2
8542: PUSH
8543: LD_INT 7
8545: ARRAY
8546: PUSH
8547: LD_INT 2
8549: ARRAY
8550: IFFALSE 8577
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
8552: LD_VAR 0 5
8556: PPUSH
8557: LD_INT 2
8559: PPUSH
8560: LD_VAR 0 2
8564: PUSH
8565: LD_INT 7
8567: ARRAY
8568: PUSH
8569: LD_INT 2
8571: ARRAY
8572: PPUSH
8573: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8577: LD_VAR 0 5
8581: PPUSH
8582: LD_INT 2
8584: PPUSH
8585: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8589: LD_VAR 0 5
8593: PPUSH
8594: LD_INT 4
8596: PPUSH
8597: LD_INT 0
8599: PPUSH
8600: CALL_OW 49
// end ;
8604: GO 8406
8606: POP
8607: POP
// if tmp then
8608: LD_VAR 0 6
8612: IFFALSE 8722
// begin p := 0 ;
8614: LD_ADDR_VAR 0 3
8618: PUSH
8619: LD_INT 0
8621: ST_TO_ADDR
// for i in tmp do
8622: LD_ADDR_VAR 0 2
8626: PUSH
8627: LD_VAR 0 6
8631: PUSH
8632: FOR_IN
8633: IFFALSE 8720
// begin p := p + 1 ;
8635: LD_ADDR_VAR 0 3
8639: PUSH
8640: LD_VAR 0 3
8644: PUSH
8645: LD_INT 1
8647: PLUS
8648: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHumanArea , false ) ;
8649: LD_VAR 0 2
8653: PPUSH
8654: LD_INT 5
8656: PPUSH
8657: LD_INT 0
8659: PPUSH
8660: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8664: LD_VAR 0 2
8668: PPUSH
8669: LD_INT 26
8671: PPUSH
8672: LD_INT 9
8674: PPUSH
8675: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8679: LD_VAR 0 3
8683: PUSH
8684: LD_EXP 35
8688: GREATEREQUAL
8689: PUSH
8690: LD_VAR 0 2
8694: PPUSH
8695: CALL_OW 257
8699: PUSH
8700: LD_INT 3
8702: EQUAL
8703: AND
8704: IFFALSE 8718
// SetClass ( i , 1 ) ;
8706: LD_VAR 0 2
8710: PPUSH
8711: LD_INT 1
8713: PPUSH
8714: CALL_OW 336
// end ;
8718: GO 8632
8720: POP
8721: POP
// end ; if heikeSecondSquad then
8722: LD_EXP 34
8726: IFFALSE 8840
// for i in heikeSecondSquad do
8728: LD_ADDR_VAR 0 2
8732: PUSH
8733: LD_EXP 34
8737: PUSH
8738: FOR_IN
8739: IFFALSE 8838
// begin p := p + 1 ;
8741: LD_ADDR_VAR 0 3
8745: PUSH
8746: LD_VAR 0 3
8750: PUSH
8751: LD_INT 1
8753: PLUS
8754: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8755: LD_VAR 0 2
8759: PPUSH
8760: LD_INT 6
8762: PPUSH
8763: LD_INT 0
8765: PPUSH
8766: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8770: LD_VAR 0 2
8774: PPUSH
8775: LD_INT 26
8777: PPUSH
8778: LD_INT 9
8780: PPUSH
8781: CALL_OW 118
// ForceSleep ( i , true ) ;
8785: LD_VAR 0 2
8789: PPUSH
8790: LD_INT 1
8792: PPUSH
8793: CALL_OW 585
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8797: LD_VAR 0 3
8801: PUSH
8802: LD_EXP 35
8806: GREATEREQUAL
8807: PUSH
8808: LD_VAR 0 2
8812: PPUSH
8813: CALL_OW 257
8817: PUSH
8818: LD_INT 3
8820: EQUAL
8821: AND
8822: IFFALSE 8836
// SetClass ( i , 1 ) ;
8824: LD_VAR 0 2
8828: PPUSH
8829: LD_INT 1
8831: PPUSH
8832: CALL_OW 336
// end ;
8836: GO 8738
8838: POP
8839: POP
// if heikeApes then
8840: LD_EXP 36
8844: IFFALSE 8887
// for i in heikeApes do
8846: LD_ADDR_VAR 0 2
8850: PUSH
8851: LD_EXP 36
8855: PUSH
8856: FOR_IN
8857: IFFALSE 8885
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
8859: LD_VAR 0 2
8863: PPUSH
8864: LD_INT 7
8866: PPUSH
8867: LD_INT 0
8869: PPUSH
8870: CALL_OW 49
// ComHold ( i ) ;
8874: LD_VAR 0 2
8878: PPUSH
8879: CALL_OW 140
// end ;
8883: GO 8856
8885: POP
8886: POP
// if Kurt then
8887: LD_EXP 32
8891: IFFALSE 8923
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
8893: LD_EXP 32
8897: PPUSH
8898: LD_INT 8
8900: PPUSH
8901: LD_INT 0
8903: PPUSH
8904: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
8908: LD_EXP 32
8912: PPUSH
8913: LD_INT 42
8915: PPUSH
8916: LD_INT 32
8918: PPUSH
8919: CALL_OW 118
// end ; wait ( 0 0$2 ) ;
8923: LD_INT 70
8925: PPUSH
8926: CALL_OW 67
// Say ( Heike , DH-Start-1 ) ;
8930: LD_EXP 21
8934: PPUSH
8935: LD_STRING DH-Start-1
8937: PPUSH
8938: CALL_OW 88
// if Givi then
8942: LD_EXP 22
8946: IFFALSE 9209
// begin Say ( Givi , DG-Start-2-5 ) ;
8948: LD_EXP 22
8952: PPUSH
8953: LD_STRING DG-Start-2-5
8955: PPUSH
8956: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
8960: LD_EXP 21
8964: PPUSH
8965: LD_STRING DH-Start-3
8967: PPUSH
8968: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8972: LD_EXP 21
8976: PPUSH
8977: LD_STRING DH-Start-4
8979: PPUSH
8980: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
8984: LD_EXP 22
8988: PPUSH
8989: LD_STRING DG-Start-5
8991: PPUSH
8992: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
8996: LD_EXP 21
9000: PPUSH
9001: LD_STRING DH-Start-6
9003: PPUSH
9004: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
9008: LD_EXP 22
9012: PPUSH
9013: LD_STRING DG-Start-7
9015: PPUSH
9016: CALL_OW 88
// if Mike then
9020: LD_EXP 23
9024: IFFALSE 9197
// begin Say ( Mike , DM-Start-8 ) ;
9026: LD_EXP 23
9030: PPUSH
9031: LD_STRING DM-Start-8
9033: PPUSH
9034: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
9038: LD_EXP 23
9042: PPUSH
9043: LD_STRING DM-Start-9
9045: PPUSH
9046: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
9050: LD_EXP 22
9054: PPUSH
9055: LD_STRING DG-Start-10
9057: PPUSH
9058: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
9062: LD_EXP 22
9066: PPUSH
9067: LD_STRING DG-Start-11
9069: PPUSH
9070: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
9074: LD_EXP 21
9078: PPUSH
9079: LD_STRING DH-Start-12
9081: PPUSH
9082: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
9086: LD_EXP 22
9090: PPUSH
9091: LD_STRING DG-Start-13
9093: PPUSH
9094: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
9098: LD_EXP 22
9102: PPUSH
9103: LD_STRING DG-Start-14
9105: PPUSH
9106: CALL_OW 88
// if Kaia then
9110: LD_EXP 26
9114: IFFALSE 9197
// begin Say ( Kaia , DK-Start-15 ) ;
9116: LD_EXP 26
9120: PPUSH
9121: LD_STRING DK-Start-15
9123: PPUSH
9124: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
9128: LD_EXP 26
9132: PPUSH
9133: LD_STRING DK-Start-16
9135: PPUSH
9136: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
9140: LD_EXP 26
9144: PPUSH
9145: LD_STRING DK-Start-17
9147: PPUSH
9148: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9152: LD_INT 10
9154: PPUSH
9155: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
9159: LD_EXP 22
9163: PPUSH
9164: LD_EXP 26
9168: PPUSH
9169: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
9173: LD_EXP 22
9177: PPUSH
9178: LD_STRING DG-Start-18
9180: PPUSH
9181: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
9185: LD_EXP 26
9189: PPUSH
9190: LD_STRING DK-Start-19
9192: PPUSH
9193: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
9197: LD_EXP 21
9201: PPUSH
9202: LD_STRING DH-Start-20
9204: PPUSH
9205: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
9209: LD_INT 70
9211: PPUSH
9212: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
9216: LD_EXP 29
9220: PPUSH
9221: LD_STRING DShar-Start-21
9223: PPUSH
9224: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
9228: LD_EXP 21
9232: PPUSH
9233: LD_STRING DH-Start-22
9235: PPUSH
9236: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
9240: LD_EXP 29
9244: PPUSH
9245: LD_STRING DShar-Start-23
9247: PPUSH
9248: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
9252: LD_EXP 29
9256: PPUSH
9257: LD_STRING DShar-Start-24
9259: PPUSH
9260: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
9264: LD_EXP 29
9268: PPUSH
9269: LD_STRING DShar-Start-25
9271: PPUSH
9272: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
9276: LD_EXP 29
9280: PPUSH
9281: LD_STRING DShar-Start-26
9283: PPUSH
9284: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
9288: LD_EXP 21
9292: PPUSH
9293: LD_STRING DH-Start-27
9295: PPUSH
9296: CALL_OW 88
// if Kaia then
9300: LD_EXP 26
9304: IFFALSE 9346
// begin ComTurnUnit ( Heike , Kaia ) ;
9306: LD_EXP 21
9310: PPUSH
9311: LD_EXP 26
9315: PPUSH
9316: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
9320: LD_EXP 26
9324: PPUSH
9325: LD_STRING DK-Start-28
9327: PPUSH
9328: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
9332: LD_EXP 21
9336: PPUSH
9337: LD_STRING DH-Start-29
9339: PPUSH
9340: CALL_OW 88
// end else
9344: GO 9358
// Say ( Heike , DH-Start-a-28 ) ;
9346: LD_EXP 21
9350: PPUSH
9351: LD_STRING DH-Start-a-28
9353: PPUSH
9354: CALL_OW 88
// if Givi then
9358: LD_EXP 22
9362: IFFALSE 9597
// begin ComTurnUnit ( Heike , Givi ) ;
9364: LD_EXP 21
9368: PPUSH
9369: LD_EXP 22
9373: PPUSH
9374: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
9378: LD_EXP 22
9382: PPUSH
9383: LD_EXP 21
9387: PPUSH
9388: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
9392: LD_EXP 21
9396: PPUSH
9397: LD_STRING DH-Start-30
9399: PPUSH
9400: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
9404: LD_EXP 21
9408: PPUSH
9409: LD_STRING DH-Start-31
9411: PPUSH
9412: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
9416: LD_EXP 22
9420: PPUSH
9421: LD_STRING DG-Start-32
9423: PPUSH
9424: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
9428: LD_EXP 21
9432: PPUSH
9433: LD_STRING DH-Start-33
9435: PPUSH
9436: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
9440: LD_EXP 22
9444: PPUSH
9445: LD_STRING DG-Start-34
9447: PPUSH
9448: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
9452: LD_EXP 22
9456: PPUSH
9457: LD_STRING DG-Start-35
9459: PPUSH
9460: CALL_OW 88
// if Kurt and not dialogue_skipped then
9464: LD_EXP 32
9468: PUSH
9469: LD_OWVAR 59
9473: NOT
9474: AND
9475: IFFALSE 9506
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
9477: LD_EXP 32
9481: PPUSH
9482: LD_INT 28
9484: PPUSH
9485: LD_INT 13
9487: PPUSH
9488: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
9492: LD_EXP 32
9496: PPUSH
9497: LD_EXP 21
9501: PPUSH
9502: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
9506: LD_EXP 22
9510: PPUSH
9511: LD_STRING DG-Start-36
9513: PPUSH
9514: CALL_OW 88
// if Kurt then
9518: LD_EXP 32
9522: IFFALSE 9595
// begin if not Givi then
9524: LD_EXP 22
9528: NOT
9529: IFFALSE 9545
// Say ( Kurt , DKs-Start-37-a ) else
9531: LD_EXP 32
9535: PPUSH
9536: LD_STRING DKs-Start-37-a
9538: PPUSH
9539: CALL_OW 88
9543: GO 9557
// Say ( Kurt , DKs-Start-37 ) ;
9545: LD_EXP 32
9549: PPUSH
9550: LD_STRING DKs-Start-37
9552: PPUSH
9553: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
9557: LD_EXP 32
9561: PPUSH
9562: LD_STRING DKs-Start-38
9564: PPUSH
9565: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
9569: LD_EXP 21
9573: PPUSH
9574: LD_EXP 32
9578: PPUSH
9579: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
9583: LD_EXP 21
9587: PPUSH
9588: LD_STRING DH-Start-39
9590: PPUSH
9591: CALL_OW 88
// end ; end else
9595: GO 9626
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
9597: LD_EXP 34
9601: PPUSH
9602: LD_STRING DArm-Start-a-37
9604: PPUSH
9605: LD_STRING DArf-Start-a-37
9607: PPUSH
9608: CALL 1198 0 3
9612: IFFALSE 9626
// Say ( Heike , DH-Start-39 ) ;
9614: LD_EXP 21
9618: PPUSH
9619: LD_STRING DH-Start-39
9621: PPUSH
9622: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
9626: LD_INT 44
9628: PPUSH
9629: LD_INT 25
9631: PPUSH
9632: CALL_OW 428
9636: IFFALSE 9653
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
9638: LD_INT 44
9640: PPUSH
9641: LD_INT 25
9643: PPUSH
9644: CALL_OW 428
9648: PPUSH
9649: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
9653: LD_EXP 30
9657: PPUSH
9658: LD_INT 5
9660: PPUSH
9661: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
9665: LD_EXP 30
9669: PPUSH
9670: LD_INT 44
9672: PPUSH
9673: LD_INT 25
9675: PPUSH
9676: LD_INT 0
9678: PPUSH
9679: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
9683: LD_EXP 30
9687: PPUSH
9688: LD_INT 29
9690: PPUSH
9691: LD_INT 12
9693: PPUSH
9694: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9698: LD_INT 35
9700: PPUSH
9701: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9705: LD_OWVAR 59
9709: PUSH
9710: LD_EXP 21
9714: PPUSH
9715: LD_EXP 30
9719: PPUSH
9720: CALL_OW 296
9724: PUSH
9725: LD_INT 8
9727: LESS
9728: OR
9729: PUSH
9730: LD_EXP 30
9734: PPUSH
9735: LD_INT 26
9737: PPUSH
9738: LD_INT 9
9740: PPUSH
9741: CALL_OW 297
9745: PUSH
9746: LD_INT 6
9748: LESS
9749: OR
9750: IFFALSE 9698
// Say ( Olaf , DO-Scout-1 ) ;
9752: LD_EXP 30
9756: PPUSH
9757: LD_STRING DO-Scout-1
9759: PPUSH
9760: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9764: LD_EXP 30
9768: PPUSH
9769: LD_EXP 21
9773: PPUSH
9774: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9778: LD_ADDR_VAR 0 2
9782: PUSH
9783: LD_VAR 0 6
9787: PUSH
9788: LD_EXP 34
9792: UNION
9793: PUSH
9794: FOR_IN
9795: IFFALSE 9813
// ComTurnUnit ( i , Olaf ) ;
9797: LD_VAR 0 2
9801: PPUSH
9802: LD_EXP 30
9806: PPUSH
9807: CALL_OW 119
9811: GO 9794
9813: POP
9814: POP
// wait ( 0 0$0.3 ) ;
9815: LD_INT 10
9817: PPUSH
9818: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9822: LD_EXP 21
9826: PPUSH
9827: LD_EXP 30
9831: PPUSH
9832: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
9836: LD_EXP 21
9840: PPUSH
9841: LD_EXP 30
9845: PPUSH
9846: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
9850: LD_EXP 21
9854: PPUSH
9855: LD_STRING DH-Scout-2
9857: PPUSH
9858: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
9862: LD_EXP 30
9866: PPUSH
9867: LD_STRING DO-Scout-3
9869: PPUSH
9870: CALL_OW 88
// if Mike and Givi then
9874: LD_EXP 23
9878: PUSH
9879: LD_EXP 22
9883: AND
9884: IFFALSE 9900
// Say ( Olaf , DO-Scout-4 ) else
9886: LD_EXP 30
9890: PPUSH
9891: LD_STRING DO-Scout-4
9893: PPUSH
9894: CALL_OW 88
9898: GO 10000
// begin if Mike then
9900: LD_EXP 23
9904: IFFALSE 9932
// begin Say ( Olaf , DO-Scout-a-4 ) ;
9906: LD_EXP 30
9910: PPUSH
9911: LD_STRING DO-Scout-a-4
9913: PPUSH
9914: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
9918: LD_EXP 21
9922: PPUSH
9923: LD_STRING DH-Scout-a-5
9925: PPUSH
9926: CALL_OW 88
// end else
9930: GO 10000
// if Givi then
9932: LD_EXP 22
9936: IFFALSE 9964
// begin Say ( Olaf , DO-Scout-b-4 ) ;
9938: LD_EXP 30
9942: PPUSH
9943: LD_STRING DO-Scout-b-4
9945: PPUSH
9946: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
9950: LD_EXP 21
9954: PPUSH
9955: LD_STRING DH-Scout-b-5
9957: PPUSH
9958: CALL_OW 88
// end else
9962: GO 10000
// begin Say ( Olaf , DO-Scout-f-4 ) ;
9964: LD_EXP 30
9968: PPUSH
9969: LD_STRING DO-Scout-f-4
9971: PPUSH
9972: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
9976: LD_EXP 21
9980: PPUSH
9981: LD_STRING DH-Scout-f-5
9983: PPUSH
9984: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
9988: LD_EXP 30
9992: PPUSH
9993: LD_STRING DO-Scout-f-6
9995: PPUSH
9996: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
10000: LD_EXP 21
10004: PPUSH
10005: LD_STRING DH-Scout-5
10007: PPUSH
10008: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
10012: LD_EXP 30
10016: PPUSH
10017: LD_STRING DO-Scout-6
10019: PPUSH
10020: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
10024: LD_EXP 30
10028: PPUSH
10029: LD_STRING DO-Scout-7
10031: PPUSH
10032: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
10036: LD_EXP 21
10040: PPUSH
10041: LD_STRING DH-Scout-8
10043: PPUSH
10044: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
10048: LD_EXP 21
10052: PPUSH
10053: LD_STRING DH-Scout-9
10055: PPUSH
10056: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
10060: LD_EXP 30
10064: PPUSH
10065: LD_STRING DO-Scout-10
10067: PPUSH
10068: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
10072: LD_EXP 30
10076: PPUSH
10077: LD_STRING DO-Scout-12
10079: PPUSH
10080: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
10084: LD_EXP 30
10088: PPUSH
10089: LD_STRING DO-Scout-13
10091: PPUSH
10092: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
10096: LD_EXP 30
10100: PPUSH
10101: LD_STRING DO-Scout-14
10103: PPUSH
10104: CALL_OW 88
// if Givi then
10108: LD_EXP 22
10112: IFFALSE 10138
// begin Say ( Givi , DG-Scout-15 ) ;
10114: LD_EXP 22
10118: PPUSH
10119: LD_STRING DG-Scout-15
10121: PPUSH
10122: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
10126: LD_EXP 26
10130: PPUSH
10131: LD_STRING DK-Scout-16
10133: PPUSH
10134: CALL_OW 88
// end ; if not dialogue_skipped then
10138: LD_OWVAR 59
10142: NOT
10143: IFFALSE 10264
// begin async ;
10145: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
10146: LD_EXP 30
10150: PPUSH
10151: LD_STRING DO-Scout-17
10153: PPUSH
10154: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10158: LD_INT 55
10160: PPUSH
10161: LD_INT 77
10163: PPUSH
10164: LD_INT 2
10166: PPUSH
10167: LD_INT 6
10169: NEG
10170: PPUSH
10171: CALL 1147 0 4
// wait ( 10 ) ;
10175: LD_INT 10
10177: PPUSH
10178: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
10182: LD_INT 55
10184: PPUSH
10185: LD_INT 77
10187: PPUSH
10188: CALL_OW 84
// wait ( 0 0$10 ) ;
10192: LD_INT 350
10194: PPUSH
10195: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
10199: LD_EXP 30
10203: PPUSH
10204: LD_STRING DO-Scout-18
10206: PPUSH
10207: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10211: LD_INT 204
10213: PPUSH
10214: LD_INT 107
10216: PPUSH
10217: LD_INT 2
10219: PPUSH
10220: LD_INT 12
10222: NEG
10223: PPUSH
10224: CALL 1147 0 4
// wait ( 10 ) ;
10228: LD_INT 10
10230: PPUSH
10231: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
10235: LD_INT 204
10237: PPUSH
10238: LD_INT 107
10240: PPUSH
10241: CALL_OW 84
// wait ( 0 0$10 ) ;
10245: LD_INT 350
10247: PPUSH
10248: CALL_OW 67
// sync ;
10252: SYNC
// CenterNowOnUnits ( Heike ) ;
10253: LD_EXP 21
10257: PPUSH
10258: CALL_OW 87
// end else
10262: GO 10298
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10264: LD_INT 55
10266: PPUSH
10267: LD_INT 77
10269: PPUSH
10270: LD_INT 2
10272: PPUSH
10273: LD_INT 6
10275: NEG
10276: PPUSH
10277: CALL 1147 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10281: LD_INT 204
10283: PPUSH
10284: LD_INT 107
10286: PPUSH
10287: LD_INT 2
10289: PPUSH
10290: LD_INT 12
10292: NEG
10293: PPUSH
10294: CALL 1147 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
10298: LD_EXP 30
10302: PPUSH
10303: LD_STRING DO-Scout-19
10305: PPUSH
10306: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
10310: LD_EXP 30
10314: PPUSH
10315: LD_STRING DO-Scout-20
10317: PPUSH
10318: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
10322: LD_EXP 21
10326: PPUSH
10327: LD_STRING DH-Scout-21
10329: PPUSH
10330: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
10334: LD_EXP 21
10338: PPUSH
10339: LD_STRING DH-Scout-22
10341: PPUSH
10342: CALL_OW 88
// InGameOff ;
10346: CALL_OW 9
// if heikeSecondSquad then
10350: LD_EXP 34
10354: IFFALSE 10368
// ForceSleep ( heikeSecondSquad , false ) ;
10356: LD_EXP 34
10360: PPUSH
10361: LD_INT 0
10363: PPUSH
10364: CALL_OW 585
// if Givi then
10368: LD_EXP 22
10372: IFFALSE 10387
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
10374: LD_INT 13
10376: PPUSH
10377: LD_INT 2
10379: PPUSH
10380: LD_INT 1
10382: PPUSH
10383: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
10387: LD_STRING Road
10389: PPUSH
10390: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
10394: LD_ADDR_VAR 0 2
10398: PUSH
10399: LD_INT 22
10401: PUSH
10402: LD_INT 5
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: PUSH
10409: LD_INT 21
10411: PUSH
10412: LD_INT 2
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: PPUSH
10423: CALL_OW 69
10427: PUSH
10428: FOR_IN
10429: IFFALSE 10445
// SetSide ( i , 2 ) ;
10431: LD_VAR 0 2
10435: PPUSH
10436: LD_INT 2
10438: PPUSH
10439: CALL_OW 235
10443: GO 10428
10445: POP
10446: POP
// SaveForQuickRestart ;
10447: CALL_OW 22
// music_class := music_auto ;
10451: LD_ADDR_OWVAR 72
10455: PUSH
10456: LD_INT 0
10458: ST_TO_ADDR
// end ;
10459: LD_VAR 0 1
10463: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
10464: LD_INT 2
10466: PPUSH
10467: LD_INT 9
10469: PPUSH
10470: CALL_OW 294
10474: IFFALSE 10839
10476: GO 10478
10478: DISABLE
// begin DialogueOn ;
10479: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
10483: LD_INT 111
10485: PPUSH
10486: LD_INT 72
10488: PPUSH
10489: LD_INT 2
10491: PPUSH
10492: LD_INT 20
10494: NEG
10495: PPUSH
10496: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
10500: LD_INT 111
10502: PPUSH
10503: LD_INT 72
10505: PPUSH
10506: LD_INT 2
10508: PPUSH
10509: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
10513: LD_INT 111
10515: PPUSH
10516: LD_INT 72
10518: PPUSH
10519: CALL_OW 86
// if IsOk ( Kamil ) then
10523: LD_EXP 25
10527: PPUSH
10528: CALL_OW 302
10532: IFFALSE 10649
// begin Say ( Kamil , DKam-Cross-1 ) ;
10534: LD_EXP 25
10538: PPUSH
10539: LD_STRING DKam-Cross-1
10541: PPUSH
10542: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
10546: LD_EXP 25
10550: PPUSH
10551: LD_STRING DKam-Cross-2
10553: PPUSH
10554: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
10558: LD_EXP 25
10562: PPUSH
10563: LD_STRING DKam-Cross-3
10565: PPUSH
10566: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
10570: LD_EXP 25
10574: PPUSH
10575: LD_STRING DKam-Cross-4
10577: PPUSH
10578: CALL_OW 88
// if IsOk ( Ibrahim ) then
10582: LD_EXP 24
10586: PPUSH
10587: CALL_OW 302
10591: IFFALSE 10647
// begin if ibrahimJoinedIn04 then
10593: LD_EXP 4
10597: IFFALSE 10611
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10599: LD_EXP 24
10603: PPUSH
10604: LD_STRING DI-Cross-b-5
10606: PPUSH
10607: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10611: LD_EXP 24
10615: PPUSH
10616: LD_STRING DI-Cross-b-6
10618: PPUSH
10619: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10623: LD_EXP 24
10627: PPUSH
10628: LD_STRING DI-Cross-b-7
10630: PPUSH
10631: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
10635: LD_EXP 25
10639: PPUSH
10640: LD_STRING DKam-Cross-8
10642: PPUSH
10643: CALL_OW 88
// end ; end else
10647: GO 10807
// if IsOk ( Sophia ) then
10649: LD_EXP 27
10653: PPUSH
10654: CALL_OW 302
10658: IFFALSE 10775
// begin Say ( Sophia , DS-Cross-1 ) ;
10660: LD_EXP 27
10664: PPUSH
10665: LD_STRING DS-Cross-1
10667: PPUSH
10668: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
10672: LD_EXP 27
10676: PPUSH
10677: LD_STRING DS-Cross-2
10679: PPUSH
10680: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
10684: LD_EXP 27
10688: PPUSH
10689: LD_STRING DS-Cross-3
10691: PPUSH
10692: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
10696: LD_EXP 27
10700: PPUSH
10701: LD_STRING DS-Cross-4
10703: PPUSH
10704: CALL_OW 88
// if IsOk ( Ibrahim ) then
10708: LD_EXP 24
10712: PPUSH
10713: CALL_OW 302
10717: IFFALSE 10773
// begin if ibrahimJoinedIn04 then
10719: LD_EXP 4
10723: IFFALSE 10737
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10725: LD_EXP 24
10729: PPUSH
10730: LD_STRING DI-Cross-b-5
10732: PPUSH
10733: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10737: LD_EXP 24
10741: PPUSH
10742: LD_STRING DI-Cross-b-6
10744: PPUSH
10745: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10749: LD_EXP 24
10753: PPUSH
10754: LD_STRING DI-Cross-b-7
10756: PPUSH
10757: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10761: LD_EXP 27
10765: PPUSH
10766: LD_STRING DS-Cross-8
10768: PPUSH
10769: CALL_OW 88
// end ; end else
10773: GO 10807
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10775: LD_EXP 34
10779: PPUSH
10780: LD_INT 50
10782: PUSH
10783: EMPTY
10784: LIST
10785: PPUSH
10786: CALL_OW 72
10790: IFFALSE 10807
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10792: LD_EXP 34
10796: PPUSH
10797: LD_STRING DArm-Cross-c-1
10799: PPUSH
10800: LD_STRING DArf-Cross-c-1
10802: PPUSH
10803: CALL 1198 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10807: LD_INT 85
10809: PPUSH
10810: LD_INT 2
10812: PPUSH
10813: LD_INT 1
10815: PPUSH
10816: CALL_OW 322
// DialogueOff ;
10820: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
10824: LD_STRING Crane
10826: PPUSH
10827: CALL_OW 337
// spottedCrossRoad := true ;
10831: LD_ADDR_EXP 8
10835: PUSH
10836: LD_INT 1
10838: ST_TO_ADDR
// end ;
10839: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
10840: LD_INT 22
10842: PUSH
10843: LD_INT 2
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PUSH
10850: LD_INT 2
10852: PUSH
10853: LD_INT 30
10855: PUSH
10856: LD_INT 0
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PUSH
10863: LD_INT 30
10865: PUSH
10866: LD_INT 1
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: LIST
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: PPUSH
10882: CALL_OW 69
10886: PUSH
10887: LD_EXP 26
10891: PPUSH
10892: CALL_OW 302
10896: PUSH
10897: LD_EXP 34
10901: OR
10902: AND
10903: IFFALSE 11115
10905: GO 10907
10907: DISABLE
// begin DialogueOn ;
10908: CALL_OW 6
// if Kaia then
10912: LD_EXP 26
10916: IFFALSE 10929
// CenterNowOnUnits ( Kaia ) else
10918: LD_EXP 26
10922: PPUSH
10923: CALL_OW 87
10927: GO 10938
// CenterNowOnUnits ( Heike ) ;
10929: LD_EXP 21
10933: PPUSH
10934: CALL_OW 87
// if IsOk ( Kaia ) then
10938: LD_EXP 26
10942: PPUSH
10943: CALL_OW 302
10947: IFFALSE 10963
// Say ( Kaia , DK-Cam-1 ) else
10949: LD_EXP 26
10953: PPUSH
10954: LD_STRING DK-Cam-1
10956: PPUSH
10957: CALL_OW 88
10961: GO 10978
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
10963: LD_EXP 34
10967: PPUSH
10968: LD_STRING DArm-Cam-1
10970: PPUSH
10971: LD_STRING DArf-Cam-1
10973: PPUSH
10974: CALL 1198 0 3
// Say ( Heike , DH-Cam-2 ) ;
10978: LD_EXP 21
10982: PPUSH
10983: LD_STRING DH-Cam-2
10985: PPUSH
10986: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
10990: LD_EXP 21
10994: PPUSH
10995: LD_STRING DH-Cam-3
10997: PPUSH
10998: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11002: LD_EXP 21
11006: PPUSH
11007: LD_STRING DH-Cam-4
11009: PPUSH
11010: CALL_OW 88
// if IsOk ( Kaia ) then
11014: LD_EXP 26
11018: PPUSH
11019: CALL_OW 302
11023: IFFALSE 11039
// Say ( Kaia , DK-Cam-5 ) else
11025: LD_EXP 26
11029: PPUSH
11030: LD_STRING DK-Cam-5
11032: PPUSH
11033: CALL_OW 88
11037: GO 11054
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
11039: LD_EXP 34
11043: PPUSH
11044: LD_STRING DArm-Cam-5
11046: PPUSH
11047: LD_STRING DArf-Cam-5
11049: PPUSH
11050: CALL 1198 0 3
// Say ( Olaf , DO-Cam-6 ) ;
11054: LD_EXP 30
11058: PPUSH
11059: LD_STRING DO-Cam-6
11061: PPUSH
11062: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
11066: LD_EXP 30
11070: PPUSH
11071: LD_STRING DO-Cam-7
11073: PPUSH
11074: CALL_OW 88
// DialogueOff ;
11078: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
11082: LD_STRING Radar
11084: PPUSH
11085: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
11089: LD_INT 6
11091: PPUSH
11092: LD_INT 2
11094: PPUSH
11095: LD_INT 1
11097: PPUSH
11098: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
11102: LD_INT 20
11104: PPUSH
11105: LD_INT 2
11107: PPUSH
11108: LD_INT 1
11110: PPUSH
11111: CALL_OW 324
// end ;
11115: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
11116: LD_INT 22
11118: PUSH
11119: LD_INT 2
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PUSH
11126: LD_INT 2
11128: PUSH
11129: LD_INT 34
11131: PUSH
11132: LD_INT 30
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: LD_INT 35
11141: PUSH
11142: LD_INT 30
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: LIST
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: PPUSH
11158: CALL_OW 69
11162: IFFALSE 11174
11164: GO 11166
11166: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
11167: LD_STRING RadarDone
11169: PPUSH
11170: CALL_OW 337
11174: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
11175: LD_INT 22
11177: PUSH
11178: LD_INT 2
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: PUSH
11185: LD_INT 34
11187: PUSH
11188: LD_INT 88
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: PPUSH
11199: CALL_OW 69
11203: IFFALSE 11215
11205: GO 11207
11207: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
11208: LD_STRING CraneDone
11210: PPUSH
11211: CALL_OW 337
11215: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
11216: LD_EXP 30
11220: PPUSH
11221: CALL_OW 302
11225: PUSH
11226: LD_EXP 33
11230: PPUSH
11231: CALL_OW 302
11235: AND
11236: PUSH
11237: LD_INT 6
11239: PPUSH
11240: LD_INT 2
11242: PPUSH
11243: CALL_OW 321
11247: PUSH
11248: LD_INT 2
11250: EQUAL
11251: AND
11252: PUSH
11253: LD_EXP 33
11257: PPUSH
11258: LD_EXP 21
11262: PPUSH
11263: CALL_OW 296
11267: PUSH
11268: LD_INT 10
11270: LESS
11271: PUSH
11272: LD_EXP 33
11276: PPUSH
11277: CALL_OW 310
11281: OR
11282: AND
11283: IFFALSE 11497
11285: GO 11287
11287: DISABLE
// begin DialogueOn ;
11288: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
11292: LD_EXP 33
11296: PPUSH
11297: LD_STRING DA-RC-1
11299: PPUSH
11300: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
11304: LD_EXP 33
11308: PPUSH
11309: LD_STRING DA-RC-2
11311: PPUSH
11312: CALL_OW 88
// if IsOk ( Kaia ) then
11316: LD_EXP 26
11320: PPUSH
11321: CALL_OW 302
11325: IFFALSE 11399
// begin Say ( Kaia , DK-RC-3 ) ;
11327: LD_EXP 26
11331: PPUSH
11332: LD_STRING DK-RC-3
11334: PPUSH
11335: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
11339: LD_EXP 33
11343: PPUSH
11344: LD_STRING DA-RC-4
11346: PPUSH
11347: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
11351: LD_EXP 26
11355: PPUSH
11356: LD_STRING DK-RC-5
11358: PPUSH
11359: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
11363: LD_EXP 33
11367: PPUSH
11368: LD_STRING DA-RC-6
11370: PPUSH
11371: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
11375: LD_EXP 26
11379: PPUSH
11380: LD_STRING DK-RC-7
11382: PPUSH
11383: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
11387: LD_EXP 33
11391: PPUSH
11392: LD_STRING DA-RC-8
11394: PPUSH
11395: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
11399: LD_EXP 21
11403: PPUSH
11404: LD_STRING DH-RC-9
11406: PPUSH
11407: CALL_OW 88
// if IsOk ( Markov ) then
11411: LD_EXP 28
11415: PPUSH
11416: CALL_OW 302
11420: IFFALSE 11448
// begin Say ( Markov , DMar-RC-10 ) ;
11422: LD_EXP 28
11426: PPUSH
11427: LD_STRING DMar-RC-10
11429: PPUSH
11430: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
11434: LD_EXP 28
11438: PPUSH
11439: LD_STRING DMar-RC-11
11441: PPUSH
11442: CALL_OW 88
// end else
11446: GO 11460
// begin Say ( Olaf , DO-RC-a-10 ) ;
11448: LD_EXP 30
11452: PPUSH
11453: LD_STRING DO-RC-a-10
11455: PPUSH
11456: CALL_OW 88
// end ; DialogueOff ;
11460: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
11464: LD_STRING RemoteControl
11466: PPUSH
11467: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
11471: LD_INT 15
11473: PPUSH
11474: LD_INT 2
11476: PPUSH
11477: LD_INT 1
11479: PPUSH
11480: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
11484: LD_INT 22
11486: PPUSH
11487: LD_INT 2
11489: PPUSH
11490: LD_INT 1
11492: PPUSH
11493: CALL_OW 324
// end ;
11497: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
11498: LD_INT 12
11500: PPUSH
11501: LD_INT 22
11503: PUSH
11504: LD_INT 2
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PPUSH
11511: CALL_OW 70
11515: IFFALSE 11882
11517: GO 11519
11519: DISABLE
11520: LD_INT 0
11522: PPUSH
// begin PrepareWestBase ;
11523: CALL 3916 0 0
// westBaseSpotted := true ;
11527: LD_ADDR_EXP 5
11531: PUSH
11532: LD_INT 1
11534: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11535: LD_INT 70
11537: PPUSH
11538: CALL_OW 67
// InGameOn ;
11542: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
11546: LD_INT 56
11548: PPUSH
11549: LD_INT 77
11551: PPUSH
11552: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
11556: LD_INT 56
11558: PPUSH
11559: LD_INT 77
11561: PPUSH
11562: LD_INT 2
11564: PPUSH
11565: LD_INT 12
11567: NEG
11568: PPUSH
11569: CALL_OW 330
// wait ( 0 0$2 ) ;
11573: LD_INT 70
11575: PPUSH
11576: CALL_OW 67
// DialogueOn ;
11580: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
11584: LD_EXP 21
11588: PPUSH
11589: LD_STRING DH-Rbase-1
11591: PPUSH
11592: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
11596: LD_EXP 26
11600: PPUSH
11601: LD_STRING DK-Rbase-2
11603: PPUSH
11604: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
11608: LD_EXP 26
11612: PPUSH
11613: LD_STRING DK-Rbase-3
11615: PPUSH
11616: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
11620: LD_EXP 26
11624: PPUSH
11625: LD_STRING DK-Rbase-4
11627: PPUSH
11628: CALL_OW 88
// DialogueOff ;
11632: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
11636: LD_INT 56
11638: PPUSH
11639: LD_INT 77
11641: PPUSH
11642: LD_INT 2
11644: PPUSH
11645: CALL_OW 331
// InGameOff ;
11649: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
11653: LD_INT 35
11655: PPUSH
11656: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
11660: LD_EXP 42
11664: NOT
11665: PUSH
11666: LD_EXP 43
11670: NOT
11671: AND
11672: IFFALSE 11653
// wait ( 0 0$2 ) ;
11674: LD_INT 70
11676: PPUSH
11677: CALL_OW 67
// if IsOk ( Kaia ) then
11681: LD_EXP 26
11685: PPUSH
11686: CALL_OW 302
11690: IFFALSE 11805
// begin DialogueOn ;
11692: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
11696: LD_INT 56
11698: PPUSH
11699: LD_INT 81
11701: PPUSH
11702: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11706: LD_EXP 26
11710: PPUSH
11711: LD_STRING DK-Rbase-5
11713: PPUSH
11714: CALL_OW 88
// if IsOk ( Givi ) then
11718: LD_EXP 22
11722: PPUSH
11723: CALL_OW 302
11727: IFFALSE 11801
// begin Say ( Givi , DG-Rbase-6 ) ;
11729: LD_EXP 22
11733: PPUSH
11734: LD_STRING DG-Rbase-6
11736: PPUSH
11737: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11741: LD_EXP 22
11745: PPUSH
11746: LD_STRING DG-Rbase-7
11748: PPUSH
11749: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11753: LD_EXP 26
11757: PPUSH
11758: LD_STRING DK-Rbase-8
11760: PPUSH
11761: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11765: LD_EXP 22
11769: PPUSH
11770: LD_STRING DG-Rbase-9
11772: PPUSH
11773: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11777: LD_EXP 22
11781: PPUSH
11782: LD_STRING DG-Rbase-10
11784: PPUSH
11785: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11789: LD_EXP 26
11793: PPUSH
11794: LD_STRING DK-Rbase-11
11796: PPUSH
11797: CALL_OW 88
// end ; DialogueOff ;
11801: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11805: LD_ADDR_VAR 0 1
11809: PUSH
11810: LD_INT 12
11812: PPUSH
11813: LD_INT 22
11815: PUSH
11816: LD_INT 3
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: PUSH
11823: LD_INT 21
11825: PUSH
11826: LD_INT 3
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: PPUSH
11837: CALL_OW 70
11841: PUSH
11842: FOR_IN
11843: IFFALSE 11859
// SetSide ( i , 2 ) ;
11845: LD_VAR 0 1
11849: PPUSH
11850: LD_INT 2
11852: PPUSH
11853: CALL_OW 235
11857: GO 11842
11859: POP
11860: POP
// westBaseCaptured := true ;
11861: LD_ADDR_EXP 9
11865: PUSH
11866: LD_INT 1
11868: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
11869: LD_INT 0
11871: PPUSH
11872: LD_INT 2
11874: PPUSH
11875: LD_INT 1
11877: PPUSH
11878: CALL_OW 324
// end ;
11882: PPOPN 1
11884: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
11885: LD_EXP 38
11889: NOT
11890: PUSH
11891: LD_INT 10
11893: PPUSH
11894: CALL_OW 255
11898: PUSH
11899: LD_INT 2
11901: EQUAL
11902: OR
11903: IFFALSE 12040
11905: GO 11907
11907: DISABLE
// begin DialogueOn ;
11908: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
11912: LD_EXP 21
11916: PPUSH
11917: LD_STRING DH-Goal-1
11919: PPUSH
11920: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
11924: LD_EXP 29
11928: PPUSH
11929: LD_STRING DShar-Goal-2
11931: PPUSH
11932: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
11936: LD_EXP 21
11940: PPUSH
11941: LD_STRING DH-Goal-3
11943: PPUSH
11944: CALL_OW 88
// if reinforcementsAllowed then
11948: LD_EXP 14
11952: IFFALSE 11978
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
11954: LD_EXP 29
11958: PPUSH
11959: LD_STRING DShar-Goal-4
11961: PPUSH
11962: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
11966: LD_EXP 21
11970: PPUSH
11971: LD_STRING DH-Goal-5
11973: PPUSH
11974: CALL_OW 88
// end ; DialogueOff ;
11978: CALL_OW 7
// eastBaseCaptured := true ;
11982: LD_ADDR_EXP 10
11986: PUSH
11987: LD_INT 1
11989: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
11990: LD_STRING BaseCaptured
11992: PPUSH
11993: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
11997: LD_INT 10
11999: PPUSH
12000: LD_INT 2
12002: PPUSH
12003: CALL_OW 235
// if not reinforcementsAllowed then
12007: LD_EXP 14
12011: NOT
12012: IFFALSE 12016
// exit ;
12014: GO 12040
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
12016: LD_INT 21000
12018: PUSH
12019: LD_INT 1050
12021: NEG
12022: PPUSH
12023: LD_INT 1050
12025: PPUSH
12026: CALL_OW 12
12030: PLUS
12031: PPUSH
12032: CALL_OW 67
// PrepareReinforcements ;
12036: CALL 2174 0 0
// end ;
12040: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
12041: LD_INT 22
12043: PUSH
12044: LD_INT 2
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: PUSH
12051: LD_INT 30
12053: PUSH
12054: LD_INT 13
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PPUSH
12065: CALL_OW 69
12069: IFFALSE 12086
12071: GO 12073
12073: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
12074: LD_EXP 22
12078: PPUSH
12079: LD_STRING DG-Lab-1
12081: PPUSH
12082: CALL_OW 88
// end ;
12086: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
12087: LD_INT 5
12089: PPUSH
12090: LD_INT 2
12092: PPUSH
12093: CALL_OW 321
12097: PUSH
12098: LD_INT 2
12100: EQUAL
12101: PUSH
12102: LD_EXP 22
12106: PPUSH
12107: CALL_OW 302
12111: AND
12112: IFFALSE 12173
12114: GO 12116
12116: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
12117: LD_EXP 22
12121: PPUSH
12122: LD_STRING DG-Stim-1
12124: PPUSH
12125: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
12129: LD_EXP 21
12133: PPUSH
12134: LD_STRING DH-Stim-2
12136: PPUSH
12137: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
12141: LD_EXP 22
12145: PPUSH
12146: LD_STRING DG-Stim-3
12148: PPUSH
12149: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
12153: LD_EXP 21
12157: PPUSH
12158: LD_STRING DH-Stim-4
12160: PPUSH
12161: CALL_OW 88
// drugsResearched := true ;
12165: LD_ADDR_EXP 11
12169: PUSH
12170: LD_INT 1
12172: ST_TO_ADDR
// end ;
12173: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
12174: LD_EXP 11
12178: IFFALSE 12490
12180: GO 12182
12182: DISABLE
12183: LD_INT 0
12185: PPUSH
12186: PPUSH
12187: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12188: LD_ADDR_VAR 0 2
12192: PUSH
12193: LD_EXP 21
12197: PUSH
12198: LD_EXP 22
12202: PUSH
12203: LD_EXP 30
12207: PUSH
12208: LD_EXP 28
12212: PUSH
12213: LD_EXP 26
12217: PUSH
12218: LD_EXP 27
12222: PUSH
12223: LD_EXP 32
12227: PUSH
12228: LD_EXP 25
12232: PUSH
12233: LD_EXP 23
12237: PUSH
12238: LD_EXP 24
12242: PUSH
12243: LD_EXP 33
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12261: LD_ADDR_VAR 0 3
12265: PUSH
12266: LD_STRING H
12268: PUSH
12269: LD_STRING G
12271: PUSH
12272: LD_STRING O
12274: PUSH
12275: LD_STRING Mar
12277: PUSH
12278: LD_STRING K
12280: PUSH
12281: LD_STRING S
12283: PUSH
12284: LD_STRING Ks
12286: PUSH
12287: LD_STRING Kam
12289: PUSH
12290: LD_STRING M
12292: PUSH
12293: LD_STRING I
12295: PUSH
12296: LD_STRING A
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12312: LD_INT 35
12314: PPUSH
12315: CALL_OW 67
// for i := tmp downto 1 do
12319: LD_ADDR_VAR 0 1
12323: PUSH
12324: DOUBLE
12325: LD_VAR 0 2
12329: INC
12330: ST_TO_ADDR
12331: LD_INT 1
12333: PUSH
12334: FOR_DOWNTO
12335: IFFALSE 12481
// if GetLives ( tmp [ i ] ) < 250 then
12337: LD_VAR 0 2
12341: PUSH
12342: LD_VAR 0 1
12346: ARRAY
12347: PPUSH
12348: CALL_OW 256
12352: PUSH
12353: LD_INT 250
12355: LESS
12356: IFFALSE 12479
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
12358: LD_ADDR_EXP 19
12362: PUSH
12363: LD_EXP 19
12367: PUSH
12368: LD_INT 1
12370: PLUS
12371: ST_TO_ADDR
// DialogueOn ;
12372: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
12376: LD_VAR 0 2
12380: PUSH
12381: LD_VAR 0 1
12385: ARRAY
12386: PPUSH
12387: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
12391: LD_VAR 0 2
12395: PUSH
12396: LD_VAR 0 1
12400: ARRAY
12401: PPUSH
12402: LD_STRING D
12404: PUSH
12405: LD_VAR 0 3
12409: PUSH
12410: LD_VAR 0 1
12414: ARRAY
12415: STR
12416: PUSH
12417: LD_STRING -Stim-a-1
12419: STR
12420: PPUSH
12421: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
12425: LD_ADDR_VAR 0 2
12429: PUSH
12430: LD_VAR 0 2
12434: PPUSH
12435: LD_VAR 0 1
12439: PPUSH
12440: CALL_OW 3
12444: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12445: LD_ADDR_VAR 0 3
12449: PUSH
12450: LD_VAR 0 3
12454: PPUSH
12455: LD_VAR 0 1
12459: PPUSH
12460: CALL_OW 3
12464: ST_TO_ADDR
// drugsTested := true ;
12465: LD_ADDR_EXP 6
12469: PUSH
12470: LD_INT 1
12472: ST_TO_ADDR
// DialogueOff ;
12473: CALL_OW 7
// break ;
12477: GO 12481
// end ;
12479: GO 12334
12481: POP
12482: POP
// until not tmp ;
12483: LD_VAR 0 2
12487: NOT
12488: IFFALSE 12312
// end ;
12490: PPOPN 3
12492: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
12493: LD_INT 22
12495: PUSH
12496: LD_INT 2
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: PUSH
12503: LD_INT 34
12505: PUSH
12506: LD_INT 31
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: PPUSH
12517: CALL_OW 69
12521: PUSH
12522: LD_INT 22
12524: PUSH
12525: LD_INT 2
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PUSH
12532: LD_INT 33
12534: PUSH
12535: LD_INT 2
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: PPUSH
12546: CALL_OW 69
12550: AND
12551: IFFALSE 12564
12553: GO 12555
12555: DISABLE
// remoteControlConstructed := true ;
12556: LD_ADDR_EXP 12
12560: PUSH
12561: LD_INT 1
12563: ST_TO_ADDR
12564: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
12565: LD_EXP 12
12569: IFFALSE 12869
12571: GO 12573
12573: DISABLE
12574: LD_INT 0
12576: PPUSH
12577: PPUSH
12578: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12579: LD_ADDR_VAR 0 2
12583: PUSH
12584: LD_EXP 21
12588: PUSH
12589: LD_EXP 22
12593: PUSH
12594: LD_EXP 30
12598: PUSH
12599: LD_EXP 28
12603: PUSH
12604: LD_EXP 26
12608: PUSH
12609: LD_EXP 27
12613: PUSH
12614: LD_EXP 32
12618: PUSH
12619: LD_EXP 25
12623: PUSH
12624: LD_EXP 23
12628: PUSH
12629: LD_EXP 24
12633: PUSH
12634: LD_EXP 33
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12652: LD_ADDR_VAR 0 3
12656: PUSH
12657: LD_STRING H
12659: PUSH
12660: LD_STRING G
12662: PUSH
12663: LD_STRING O
12665: PUSH
12666: LD_STRING Mar
12668: PUSH
12669: LD_STRING K
12671: PUSH
12672: LD_STRING S
12674: PUSH
12675: LD_STRING Ks
12677: PUSH
12678: LD_STRING Kam
12680: PUSH
12681: LD_STRING M
12683: PUSH
12684: LD_STRING I
12686: PUSH
12687: LD_STRING A
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12703: LD_INT 35
12705: PPUSH
12706: CALL_OW 67
// for i := tmp downto 1 do
12710: LD_ADDR_VAR 0 1
12714: PUSH
12715: DOUBLE
12716: LD_VAR 0 2
12720: INC
12721: ST_TO_ADDR
12722: LD_INT 1
12724: PUSH
12725: FOR_DOWNTO
12726: IFFALSE 12860
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
12728: LD_VAR 0 2
12732: PUSH
12733: LD_VAR 0 1
12737: ARRAY
12738: PPUSH
12739: CALL_OW 257
12743: PUSH
12744: LD_INT 3
12746: EQUAL
12747: PUSH
12748: LD_VAR 0 2
12752: PUSH
12753: LD_VAR 0 1
12757: ARRAY
12758: PPUSH
12759: CALL_OW 432
12763: AND
12764: IFFALSE 12858
// begin DialogueOn ;
12766: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12770: LD_VAR 0 2
12774: PUSH
12775: LD_VAR 0 1
12779: ARRAY
12780: PPUSH
12781: LD_STRING D
12783: PUSH
12784: LD_VAR 0 3
12788: PUSH
12789: LD_VAR 0 1
12793: ARRAY
12794: STR
12795: PUSH
12796: LD_STRING -RC-a-1
12798: STR
12799: PPUSH
12800: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12804: LD_ADDR_VAR 0 2
12808: PUSH
12809: LD_VAR 0 2
12813: PPUSH
12814: LD_VAR 0 1
12818: PPUSH
12819: CALL_OW 3
12823: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12824: LD_ADDR_VAR 0 3
12828: PUSH
12829: LD_VAR 0 3
12833: PPUSH
12834: LD_VAR 0 1
12838: PPUSH
12839: CALL_OW 3
12843: ST_TO_ADDR
// DialogueOff ;
12844: CALL_OW 7
// remoteControlTested := true ;
12848: LD_ADDR_EXP 7
12852: PUSH
12853: LD_INT 1
12855: ST_TO_ADDR
// break ;
12856: GO 12860
// end ;
12858: GO 12725
12860: POP
12861: POP
// until not tmp ;
12862: LD_VAR 0 2
12866: NOT
12867: IFFALSE 12703
// end ;
12869: PPOPN 3
12871: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
12872: LD_EXP 7
12876: PUSH
12877: LD_EXP 28
12881: PPUSH
12882: CALL_OW 302
12886: AND
12887: IFFALSE 12916
12889: GO 12891
12891: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
12892: LD_EXP 28
12896: PPUSH
12897: LD_STRING DMar-RC-a-2
12899: PPUSH
12900: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
12904: LD_EXP 28
12908: PPUSH
12909: LD_STRING DMar-RC-a-3
12911: PPUSH
12912: CALL_OW 88
// end ;
12916: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
12917: LD_EXP 14
12921: PUSH
12922: LD_EXP 21
12926: PPUSH
12927: LD_EXP 33
12931: PPUSH
12932: CALL_OW 296
12936: PUSH
12937: LD_INT 8
12939: LESS
12940: AND
12941: PUSH
12942: LD_INT 2
12944: PPUSH
12945: CALL_OW 463
12949: NOT
12950: AND
12951: PUSH
12952: LD_EXP 33
12956: PPUSH
12957: CALL_OW 302
12961: AND
12962: PUSH
12963: LD_EXP 21
12967: PPUSH
12968: CALL_OW 302
12972: AND
12973: IFFALSE 13151
12975: GO 12977
12977: DISABLE
// begin if not IsInUnit ( Aviradze ) then
12978: LD_EXP 33
12982: PPUSH
12983: CALL_OW 310
12987: NOT
12988: IFFALSE 13004
// ComTurnUnit ( Aviradze , Heike ) ;
12990: LD_EXP 33
12994: PPUSH
12995: LD_EXP 21
12999: PPUSH
13000: CALL_OW 119
// if not IsInUnit ( Heike ) then
13004: LD_EXP 21
13008: PPUSH
13009: CALL_OW 310
13013: NOT
13014: IFFALSE 13030
// ComTurnUnit ( Heike , Aviradze ) ;
13016: LD_EXP 21
13020: PPUSH
13021: LD_EXP 33
13025: PPUSH
13026: CALL_OW 119
// wait ( 0 0$1 ) ;
13030: LD_INT 35
13032: PPUSH
13033: CALL_OW 67
// DialogueOn ;
13037: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
13041: LD_EXP 33
13045: PPUSH
13046: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
13050: LD_EXP 21
13054: PPUSH
13055: LD_STRING DH-Beria-1
13057: PPUSH
13058: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
13062: LD_EXP 33
13066: PPUSH
13067: LD_STRING DA-Beria-2
13069: PPUSH
13070: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
13074: LD_EXP 21
13078: PPUSH
13079: LD_STRING DH-Beria-3
13081: PPUSH
13082: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
13086: LD_EXP 33
13090: PPUSH
13091: LD_STRING DA-Beria-4
13093: PPUSH
13094: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
13098: LD_EXP 33
13102: PPUSH
13103: LD_STRING DA-Beria-5
13105: PPUSH
13106: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
13110: LD_EXP 33
13114: PPUSH
13115: LD_STRING DA-Beria-6
13117: PPUSH
13118: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
13122: LD_EXP 21
13126: PPUSH
13127: LD_STRING DA-Beria-7
13129: PPUSH
13130: CALL_OW 88
// DialogueOff ;
13134: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
13138: LD_INT 52
13140: PPUSH
13141: LD_INT 2
13143: PPUSH
13144: LD_INT 1
13146: PPUSH
13147: CALL_OW 322
// end ;
13151: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
13152: LD_EXP 26
13156: PPUSH
13157: CALL_OW 300
13161: PUSH
13162: LD_EXP 26
13166: PPUSH
13167: CALL_OW 256
13171: PUSH
13172: LD_INT 10
13174: LESS
13175: AND
13176: IFFALSE 13213
13178: GO 13180
13180: DISABLE
// begin DialogueOn ;
13181: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
13185: LD_EXP 26
13189: PPUSH
13190: LD_STRING DK-Kdeath-1
13192: PPUSH
13193: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
13197: LD_EXP 21
13201: PPUSH
13202: LD_STRING DH-Kdeath-2
13204: PPUSH
13205: CALL_OW 88
// DialogueOff ;
13209: CALL_OW 7
// end ;
13213: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
13214: LD_INT 2
13216: PPUSH
13217: LD_EXP 39
13221: PPUSH
13222: CALL 1298 0 2
13226: IFFALSE 13243
13228: GO 13230
13230: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
13231: LD_EXP 21
13235: PPUSH
13236: LD_STRING DH-Obj-1
13238: PPUSH
13239: CALL_OW 88
13243: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
13244: LD_INT 2
13246: PPUSH
13247: LD_EXP 40
13251: PPUSH
13252: CALL 1298 0 2
13256: IFFALSE 13273
13258: GO 13260
13260: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
13261: LD_EXP 21
13265: PPUSH
13266: LD_STRING DH-Obj-a-1
13268: PPUSH
13269: CALL_OW 88
13273: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 11 11$00 , 10 10$30 , 10 10$00 , 9 9$30 ] [ Difficulty ] do
13274: LD_EXP 10
13278: PUSH
13279: LD_OWVAR 1
13283: PUSH
13284: LD_INT 23100
13286: PUSH
13287: LD_INT 22050
13289: PUSH
13290: LD_INT 21000
13292: PUSH
13293: LD_INT 19950
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: PUSH
13302: LD_OWVAR 67
13306: ARRAY
13307: GREATEREQUAL
13308: OR
13309: IFFALSE 13335
13311: GO 13313
13313: DISABLE
// begin if eastBaseCaptured then
13314: LD_EXP 10
13318: IFFALSE 13327
// wait ( 2 2$00 ) ;
13320: LD_INT 4200
13322: PPUSH
13323: CALL_OW 67
// convoyStarted := true ;
13327: LD_ADDR_EXP 17
13331: PUSH
13332: LD_INT 1
13334: ST_TO_ADDR
// end ;
13335: END
// every 0 0$1 trigger convoyStarted do
13336: LD_EXP 17
13340: IFFALSE 13431
13342: GO 13344
13344: DISABLE
// begin DialogueOn ;
13345: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
13349: LD_EXP 29
13353: PPUSH
13354: LD_STRING DShar-Convoy-1
13356: PPUSH
13357: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
13361: LD_EXP 21
13365: PPUSH
13366: LD_STRING DH-Convoy-2
13368: PPUSH
13369: CALL_OW 88
// DialogueOff ;
13373: CALL_OW 7
// wait ( 0 0$10 ) ;
13377: LD_INT 350
13379: PPUSH
13380: CALL_OW 67
// PrepareConvoy ;
13384: CALL 4563 0 0
// repeat wait ( rand ( 2 2$30 , 5 5$30 ) ) ;
13388: LD_INT 5250
13390: PPUSH
13391: LD_INT 11550
13393: PPUSH
13394: CALL_OW 12
13398: PPUSH
13399: CALL_OW 67
// PrepareConvoy ;
13403: CALL 4563 0 0
// convoyCounter := convoyCounter - 1 ;
13407: LD_ADDR_EXP 16
13411: PUSH
13412: LD_EXP 16
13416: PUSH
13417: LD_INT 1
13419: MINUS
13420: ST_TO_ADDR
// until convoyCounter <= 0 ;
13421: LD_EXP 16
13425: PUSH
13426: LD_INT 0
13428: LESSEQUAL
13429: IFFALSE 13388
// end ;
13431: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
13432: LD_EXP 15
13436: PUSH
13437: LD_INT 10
13439: GREATEREQUAL
13440: IFFALSE 13457
13442: GO 13444
13444: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
13445: LD_EXP 31
13449: PPUSH
13450: LD_STRING DOm-Fail-1
13452: PPUSH
13453: CALL_OW 94
13457: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
13458: LD_EXP 39
13462: NOT
13463: PUSH
13464: LD_EXP 40
13468: NOT
13469: AND
13470: IFFALSE 13482
13472: GO 13474
13474: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
13475: LD_STRING RaiderDone
13477: PPUSH
13478: CALL_OW 337
13482: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
13483: LD_INT 22
13485: PUSH
13486: LD_INT 2
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: LD_INT 33
13495: PUSH
13496: LD_INT 2
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PPUSH
13507: CALL_OW 69
13511: PUSH
13512: LD_INT 3
13514: GREATEREQUAL
13515: PUSH
13516: LD_INT 22
13518: PUSH
13519: LD_INT 2
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: PUSH
13526: LD_INT 34
13528: PUSH
13529: LD_INT 31
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PPUSH
13540: CALL_OW 69
13544: PUSH
13545: LD_INT 2
13547: GREATEREQUAL
13548: AND
13549: IFFALSE 13561
13551: GO 13553
13553: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
13554: LD_STRING RemoteControlDone
13556: PPUSH
13557: CALL_OW 337
13561: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var i , tmp , tmp2 ;
13562: LD_EXP 16
13566: PUSH
13567: LD_INT 1
13569: LESS
13570: PUSH
13571: LD_EXP 41
13575: PPUSH
13576: LD_INT 52
13578: PUSH
13579: EMPTY
13580: LIST
13581: PUSH
13582: LD_INT 21
13584: PUSH
13585: LD_INT 1
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PPUSH
13596: CALL_OW 72
13600: NOT
13601: AND
13602: PUSH
13603: LD_OWVAR 1
13607: PUSH
13608: LD_INT 126000
13610: GREATEREQUAL
13611: OR
13612: IFFALSE 14622
13614: GO 13616
13616: DISABLE
13617: LD_INT 0
13619: PPUSH
13620: PPUSH
13621: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
13622: LD_STRING ReinforcementsDone
13624: PPUSH
13625: CALL_OW 337
// music_class := music_victory ;
13629: LD_ADDR_OWVAR 72
13633: PUSH
13634: LD_INT 4
13636: ST_TO_ADDR
// InGameOn ;
13637: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
13641: LD_EXP 21
13645: PPUSH
13646: LD_STRING DH-end-1
13648: PPUSH
13649: CALL_OW 88
// wait ( 0 0$2 ) ;
13653: LD_INT 70
13655: PPUSH
13656: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
13660: LD_EXP 29
13664: PPUSH
13665: LD_STRING DShar-end-2
13667: PPUSH
13668: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
13672: LD_EXP 39
13676: NOT
13677: PUSH
13678: LD_EXP 40
13682: NOT
13683: AND
13684: IFFALSE 13700
// begin Say ( Heike , DH-end-3 ) ;
13686: LD_EXP 21
13690: PPUSH
13691: LD_STRING DH-end-3
13693: PPUSH
13694: CALL_OW 88
// end else
13698: GO 13797
// begin Say ( Heike , DH-end-a-3 ) ;
13700: LD_EXP 21
13704: PPUSH
13705: LD_STRING DH-end-a-3
13707: PPUSH
13708: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
13712: LD_EXP 29
13716: PPUSH
13717: LD_STRING DShar-end-a-4
13719: PPUSH
13720: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
13724: LD_EXP 21
13728: PPUSH
13729: LD_STRING DH-end-a-5
13731: PPUSH
13732: CALL_OW 88
// InGameOff ;
13736: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
13740: LD_INT 35
13742: PPUSH
13743: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
13747: LD_INT 22
13749: PUSH
13750: LD_INT 3
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: PUSH
13757: LD_INT 21
13759: PUSH
13760: LD_INT 1
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: PPUSH
13771: CALL_OW 69
13775: PUSH
13776: LD_INT 0
13778: EQUAL
13779: IFFALSE 13740
// InGameOn ;
13781: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
13785: LD_EXP 21
13789: PPUSH
13790: LD_STRING DH-end-a-6
13792: PPUSH
13793: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
13797: LD_EXP 29
13801: PPUSH
13802: LD_STRING DShar-end-3
13804: PPUSH
13805: CALL_OW 94
// if not flamethrowerBuilt then
13809: LD_EXP 20
13813: NOT
13814: IFFALSE 13823
// SetAchievement ( ACH_FIRE ) ;
13816: LD_STRING ACH_FIRE
13818: PPUSH
13819: CALL_OW 543
// if drugsTested then
13823: LD_EXP 6
13827: IFFALSE 13841
// AddMedal ( med1 , 1 ) else
13829: LD_STRING med1
13831: PPUSH
13832: LD_INT 1
13834: PPUSH
13835: CALL_OW 101
13839: GO 13881
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
13841: LD_INT 5
13843: PPUSH
13844: LD_INT 2
13846: PPUSH
13847: CALL_OW 321
13851: PUSH
13852: LD_INT 2
13854: EQUAL
13855: IFFALSE 13870
// AddMedal ( med1 , - 1 ) else
13857: LD_STRING med1
13859: PPUSH
13860: LD_INT 1
13862: NEG
13863: PPUSH
13864: CALL_OW 101
13868: GO 13881
// AddMedal ( med1 , - 2 ) ;
13870: LD_STRING med1
13872: PPUSH
13873: LD_INT 2
13875: NEG
13876: PPUSH
13877: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
13881: LD_INT 22
13883: PUSH
13884: LD_INT 2
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: PUSH
13891: LD_INT 33
13893: PUSH
13894: LD_INT 2
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PPUSH
13905: CALL_OW 69
13909: PUSH
13910: LD_INT 3
13912: GREATEREQUAL
13913: PUSH
13914: LD_INT 22
13916: PUSH
13917: LD_INT 2
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: PUSH
13924: LD_INT 34
13926: PUSH
13927: LD_INT 31
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: PPUSH
13938: CALL_OW 69
13942: PUSH
13943: LD_INT 1
13945: GREATEREQUAL
13946: AND
13947: IFFALSE 13961
// AddMedal ( med2 , 1 ) else
13949: LD_STRING med2
13951: PPUSH
13952: LD_INT 1
13954: PPUSH
13955: CALL_OW 101
13959: GO 13972
// AddMedal ( med2 , - 1 ) ;
13961: LD_STRING med2
13963: PPUSH
13964: LD_INT 1
13966: NEG
13967: PPUSH
13968: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
13972: LD_EXP 15
13976: PUSH
13977: LD_INT 10
13979: PUSH
13980: LD_INT 8
13982: PUSH
13983: LD_INT 6
13985: PUSH
13986: LD_INT 5
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: PUSH
13995: LD_OWVAR 67
13999: ARRAY
14000: LESS
14001: IFFALSE 14015
// AddMedal ( med3 , 1 ) else
14003: LD_STRING med3
14005: PPUSH
14006: LD_INT 1
14008: PPUSH
14009: CALL_OW 101
14013: GO 14026
// AddMedal ( med3 , - 1 ) ;
14015: LD_STRING med3
14017: PPUSH
14018: LD_INT 1
14020: NEG
14021: PPUSH
14022: CALL_OW 101
// GiveMedals ( MAIN ) ;
14026: LD_STRING MAIN
14028: PPUSH
14029: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
14033: LD_INT 22
14035: PUSH
14036: LD_INT 2
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: PUSH
14043: LD_INT 23
14045: PUSH
14046: LD_INT 2
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: PUSH
14053: LD_INT 21
14055: PUSH
14056: LD_INT 1
14058: PUSH
14059: EMPTY
14060: LIST
14061: LIST
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: LIST
14067: PPUSH
14068: CALL_OW 69
14072: PPUSH
14073: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
14077: LD_EXP 15
14081: PPUSH
14082: LD_STRING 05_ConvoySavedCounter
14084: PPUSH
14085: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
14089: LD_EXP 13
14093: PPUSH
14094: LD_STRING 05_Radar
14096: PPUSH
14097: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
14101: LD_EXP 6
14105: PPUSH
14106: LD_STRING 05_DrugsTested
14108: PPUSH
14109: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
14113: LD_INT 22
14115: PUSH
14116: LD_INT 2
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: PUSH
14123: LD_INT 33
14125: PUSH
14126: LD_INT 2
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PPUSH
14137: CALL_OW 69
14141: PUSH
14142: LD_INT 3
14144: GREATEREQUAL
14145: PUSH
14146: LD_INT 22
14148: PUSH
14149: LD_INT 2
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PUSH
14156: LD_INT 34
14158: PUSH
14159: LD_INT 31
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: PPUSH
14170: CALL_OW 69
14174: PUSH
14175: LD_INT 2
14177: GREATEREQUAL
14178: AND
14179: PPUSH
14180: LD_STRING 05_RemoteControl
14182: PPUSH
14183: CALL_OW 39
// tmp := FilterUnitsInArea ( saveBuildingsArea , [ f_type , unit_building ] ) ;
14187: LD_ADDR_VAR 0 2
14191: PUSH
14192: LD_INT 25
14194: PPUSH
14195: LD_INT 21
14197: PUSH
14198: LD_INT 3
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PPUSH
14205: CALL_OW 70
14209: ST_TO_ADDR
// tmp2 := [ ] ;
14210: LD_ADDR_VAR 0 3
14214: PUSH
14215: EMPTY
14216: ST_TO_ADDR
// if tmp then
14217: LD_VAR 0 2
14221: IFFALSE 14374
// begin for i in tmp do
14223: LD_ADDR_VAR 0 1
14227: PUSH
14228: LD_VAR 0 2
14232: PUSH
14233: FOR_IN
14234: IFFALSE 14360
// tmp2 := Join ( tmp2 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetNation ( i ) , GetBLevel ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ) ;
14236: LD_ADDR_VAR 0 3
14240: PUSH
14241: LD_VAR 0 3
14245: PPUSH
14246: LD_VAR 0 1
14250: PPUSH
14251: CALL_OW 266
14255: PUSH
14256: LD_VAR 0 1
14260: PPUSH
14261: CALL_OW 250
14265: PUSH
14266: LD_VAR 0 1
14270: PPUSH
14271: CALL_OW 251
14275: PUSH
14276: LD_VAR 0 1
14280: PPUSH
14281: CALL_OW 254
14285: PUSH
14286: LD_VAR 0 1
14290: PPUSH
14291: CALL_OW 248
14295: PUSH
14296: LD_VAR 0 1
14300: PPUSH
14301: CALL_OW 267
14305: PUSH
14306: LD_VAR 0 1
14310: PPUSH
14311: LD_INT 1
14313: PPUSH
14314: CALL_OW 268
14318: PUSH
14319: LD_VAR 0 1
14323: PPUSH
14324: LD_INT 2
14326: PPUSH
14327: CALL_OW 268
14331: PUSH
14332: LD_VAR 0 1
14336: PPUSH
14337: CALL_OW 269
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: PPUSH
14353: CALL 72224 0 2
14357: ST_TO_ADDR
14358: GO 14233
14360: POP
14361: POP
// SaveVariable ( tmp2 , 05_Buildings ) ;
14362: LD_VAR 0 3
14366: PPUSH
14367: LD_STRING 05_Buildings
14369: PPUSH
14370: CALL_OW 39
// end ; SaveCharacters ( Heike , 05_Heike ) ;
14374: LD_EXP 21
14378: PPUSH
14379: LD_STRING 05_Heike
14381: PPUSH
14382: CALL_OW 38
// if Aviradze then
14386: LD_EXP 33
14390: IFFALSE 14404
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
14392: LD_EXP 33
14396: PPUSH
14397: LD_STRING 05_Aviradze
14399: PPUSH
14400: CALL_OW 38
// if Ibrahim then
14404: LD_EXP 24
14408: IFFALSE 14422
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
14410: LD_EXP 24
14414: PPUSH
14415: LD_STRING 05_Ibrahim
14417: PPUSH
14418: CALL_OW 38
// if Kamil then
14422: LD_EXP 25
14426: IFFALSE 14440
// SaveCharacters ( Kamil , 05_Kamil ) ;
14428: LD_EXP 25
14432: PPUSH
14433: LD_STRING 05_Kamil
14435: PPUSH
14436: CALL_OW 38
// if Sophia then
14440: LD_EXP 27
14444: IFFALSE 14458
// SaveCharacters ( Sophia , 05_Sophia ) ;
14446: LD_EXP 27
14450: PPUSH
14451: LD_STRING 05_Sophia
14453: PPUSH
14454: CALL_OW 38
// if Kaia then
14458: LD_EXP 26
14462: IFFALSE 14476
// SaveCharacters ( Kaia , 05_Kaia ) ;
14464: LD_EXP 26
14468: PPUSH
14469: LD_STRING 05_Kaia
14471: PPUSH
14472: CALL_OW 38
// if Givi then
14476: LD_EXP 22
14480: IFFALSE 14494
// SaveCharacters ( Givi , 05_Givi ) ;
14482: LD_EXP 22
14486: PPUSH
14487: LD_STRING 05_Givi
14489: PPUSH
14490: CALL_OW 38
// if Mike then
14494: LD_EXP 23
14498: IFFALSE 14512
// SaveCharacters ( Mike , 05_Mike ) ;
14500: LD_EXP 23
14504: PPUSH
14505: LD_STRING 05_Mike
14507: PPUSH
14508: CALL_OW 38
// if Markov then
14512: LD_EXP 28
14516: IFFALSE 14530
// SaveCharacters ( Markov , 05_Markov ) ;
14518: LD_EXP 28
14522: PPUSH
14523: LD_STRING 05_Markov
14525: PPUSH
14526: CALL_OW 38
// if Kurt then
14530: LD_EXP 32
14534: IFFALSE 14548
// SaveCharacters ( Kurt , 05_Kurt ) ;
14536: LD_EXP 32
14540: PPUSH
14541: LD_STRING 05_Kurt
14543: PPUSH
14544: CALL_OW 38
// if heikeSecondSquad then
14548: LD_EXP 34
14552: IFFALSE 14566
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
14554: LD_EXP 34
14558: PPUSH
14559: LD_STRING 05_others
14561: PPUSH
14562: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14566: LD_ADDR_VAR 0 2
14570: PUSH
14571: LD_INT 22
14573: PUSH
14574: LD_INT 2
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: PUSH
14581: LD_INT 23
14583: PUSH
14584: LD_INT 0
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: PPUSH
14595: CALL_OW 69
14599: ST_TO_ADDR
// if tmp then
14600: LD_VAR 0 2
14604: IFFALSE 14618
// SaveCharacters ( tmp , 05_apes ) ;
14606: LD_VAR 0 2
14610: PPUSH
14611: LD_STRING 05_apes
14613: PPUSH
14614: CALL_OW 38
// YouWin ;
14618: CALL_OW 103
// end ; end_of_file
14622: PPOPN 3
14624: END
// every 0 0$35 + 0 0$20 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
14625: LD_EXP 9
14629: PUSH
14630: LD_INT 13
14632: PPUSH
14633: LD_INT 1
14635: PPUSH
14636: CALL_OW 287
14640: PUSH
14641: LD_INT 25
14643: LESS
14644: AND
14645: IFFALSE 14672
14647: GO 14649
14649: DISABLE
// begin enable ;
14650: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
14651: LD_INT 1
14653: PPUSH
14654: LD_INT 5
14656: PPUSH
14657: CALL_OW 12
14661: PPUSH
14662: LD_INT 13
14664: PPUSH
14665: LD_INT 1
14667: PPUSH
14668: CALL_OW 55
// end ; end_of_file
14672: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
14673: LD_INT 0
14675: PPUSH
14676: PPUSH
14677: PPUSH
14678: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
14679: LD_VAR 0 1
14683: PPUSH
14684: CALL_OW 264
14688: PUSH
14689: LD_INT 91
14691: EQUAL
14692: IFFALSE 14764
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
14694: LD_INT 68
14696: PPUSH
14697: LD_VAR 0 1
14701: PPUSH
14702: CALL_OW 255
14706: PPUSH
14707: CALL_OW 321
14711: PUSH
14712: LD_INT 2
14714: EQUAL
14715: IFFALSE 14727
// eff := 70 else
14717: LD_ADDR_VAR 0 4
14721: PUSH
14722: LD_INT 70
14724: ST_TO_ADDR
14725: GO 14735
// eff := 30 ;
14727: LD_ADDR_VAR 0 4
14731: PUSH
14732: LD_INT 30
14734: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
14735: LD_VAR 0 1
14739: PPUSH
14740: CALL_OW 250
14744: PPUSH
14745: LD_VAR 0 1
14749: PPUSH
14750: CALL_OW 251
14754: PPUSH
14755: LD_VAR 0 4
14759: PPUSH
14760: CALL_OW 495
// end ; end ;
14764: LD_VAR 0 2
14768: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
14769: LD_INT 0
14771: PPUSH
// end ;
14772: LD_VAR 0 4
14776: RET
// export function SOS_Command ( cmd ) ; begin
14777: LD_INT 0
14779: PPUSH
// end ;
14780: LD_VAR 0 2
14784: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
14785: LD_INT 0
14787: PPUSH
// end ;
14788: LD_VAR 0 6
14792: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
14793: LD_INT 0
14795: PPUSH
14796: PPUSH
// if not vehicle or not factory then
14797: LD_VAR 0 1
14801: NOT
14802: PUSH
14803: LD_VAR 0 2
14807: NOT
14808: OR
14809: IFFALSE 14813
// exit ;
14811: GO 15044
// if factoryWaypoints >= factory then
14813: LD_EXP 113
14817: PUSH
14818: LD_VAR 0 2
14822: GREATEREQUAL
14823: IFFALSE 15044
// if factoryWaypoints [ factory ] then
14825: LD_EXP 113
14829: PUSH
14830: LD_VAR 0 2
14834: ARRAY
14835: IFFALSE 15044
// begin if GetControl ( vehicle ) = control_manual then
14837: LD_VAR 0 1
14841: PPUSH
14842: CALL_OW 263
14846: PUSH
14847: LD_INT 1
14849: EQUAL
14850: IFFALSE 14931
// begin driver := IsDrivenBy ( vehicle ) ;
14852: LD_ADDR_VAR 0 4
14856: PUSH
14857: LD_VAR 0 1
14861: PPUSH
14862: CALL_OW 311
14866: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14867: LD_VAR 0 4
14871: PPUSH
14872: LD_EXP 113
14876: PUSH
14877: LD_VAR 0 2
14881: ARRAY
14882: PUSH
14883: LD_INT 3
14885: ARRAY
14886: PPUSH
14887: LD_EXP 113
14891: PUSH
14892: LD_VAR 0 2
14896: ARRAY
14897: PUSH
14898: LD_INT 4
14900: ARRAY
14901: PPUSH
14902: CALL_OW 171
// AddComExitVehicle ( driver ) ;
14906: LD_VAR 0 4
14910: PPUSH
14911: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
14915: LD_VAR 0 4
14919: PPUSH
14920: LD_VAR 0 2
14924: PPUSH
14925: CALL_OW 180
// end else
14929: GO 15044
// if GetControl ( vehicle ) = control_remote then
14931: LD_VAR 0 1
14935: PPUSH
14936: CALL_OW 263
14940: PUSH
14941: LD_INT 2
14943: EQUAL
14944: IFFALSE 15005
// begin wait ( 0 0$2 ) ;
14946: LD_INT 70
14948: PPUSH
14949: CALL_OW 67
// if Connect ( vehicle ) then
14953: LD_VAR 0 1
14957: PPUSH
14958: CALL 42862 0 1
14962: IFFALSE 15003
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14964: LD_VAR 0 1
14968: PPUSH
14969: LD_EXP 113
14973: PUSH
14974: LD_VAR 0 2
14978: ARRAY
14979: PUSH
14980: LD_INT 3
14982: ARRAY
14983: PPUSH
14984: LD_EXP 113
14988: PUSH
14989: LD_VAR 0 2
14993: ARRAY
14994: PUSH
14995: LD_INT 4
14997: ARRAY
14998: PPUSH
14999: CALL_OW 171
// end else
15003: GO 15044
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
15005: LD_VAR 0 1
15009: PPUSH
15010: LD_EXP 113
15014: PUSH
15015: LD_VAR 0 2
15019: ARRAY
15020: PUSH
15021: LD_INT 3
15023: ARRAY
15024: PPUSH
15025: LD_EXP 113
15029: PUSH
15030: LD_VAR 0 2
15034: ARRAY
15035: PUSH
15036: LD_INT 4
15038: ARRAY
15039: PPUSH
15040: CALL_OW 171
// end ; end ;
15044: LD_VAR 0 3
15048: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
15049: LD_INT 0
15051: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
15052: LD_VAR 0 1
15056: PUSH
15057: LD_INT 250
15059: EQUAL
15060: PUSH
15061: LD_VAR 0 2
15065: PPUSH
15066: CALL_OW 264
15070: PUSH
15071: LD_INT 81
15073: EQUAL
15074: AND
15075: IFFALSE 15096
// MinerPlaceMine ( unit , x , y ) ;
15077: LD_VAR 0 2
15081: PPUSH
15082: LD_VAR 0 4
15086: PPUSH
15087: LD_VAR 0 5
15091: PPUSH
15092: CALL 17481 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
15096: LD_VAR 0 1
15100: PUSH
15101: LD_INT 251
15103: EQUAL
15104: PUSH
15105: LD_VAR 0 2
15109: PPUSH
15110: CALL_OW 264
15114: PUSH
15115: LD_INT 81
15117: EQUAL
15118: AND
15119: IFFALSE 15140
// MinerDetonateMine ( unit , x , y ) ;
15121: LD_VAR 0 2
15125: PPUSH
15126: LD_VAR 0 4
15130: PPUSH
15131: LD_VAR 0 5
15135: PPUSH
15136: CALL 17756 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
15140: LD_VAR 0 1
15144: PUSH
15145: LD_INT 252
15147: EQUAL
15148: PUSH
15149: LD_VAR 0 2
15153: PPUSH
15154: CALL_OW 264
15158: PUSH
15159: LD_INT 81
15161: EQUAL
15162: AND
15163: IFFALSE 15184
// MinerCreateMinefield ( unit , x , y ) ;
15165: LD_VAR 0 2
15169: PPUSH
15170: LD_VAR 0 4
15174: PPUSH
15175: LD_VAR 0 5
15179: PPUSH
15180: CALL 18173 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
15184: LD_VAR 0 1
15188: PUSH
15189: LD_INT 253
15191: EQUAL
15192: PUSH
15193: LD_VAR 0 2
15197: PPUSH
15198: CALL_OW 257
15202: PUSH
15203: LD_INT 5
15205: EQUAL
15206: AND
15207: IFFALSE 15228
// ComBinocular ( unit , x , y ) ;
15209: LD_VAR 0 2
15213: PPUSH
15214: LD_VAR 0 4
15218: PPUSH
15219: LD_VAR 0 5
15223: PPUSH
15224: CALL 18542 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
15228: LD_VAR 0 1
15232: PUSH
15233: LD_INT 254
15235: EQUAL
15236: PUSH
15237: LD_VAR 0 2
15241: PPUSH
15242: CALL_OW 264
15246: PUSH
15247: LD_INT 99
15249: EQUAL
15250: AND
15251: PUSH
15252: LD_VAR 0 3
15256: PPUSH
15257: CALL_OW 263
15261: PUSH
15262: LD_INT 3
15264: EQUAL
15265: AND
15266: IFFALSE 15282
// HackDestroyVehicle ( unit , selectedUnit ) ;
15268: LD_VAR 0 2
15272: PPUSH
15273: LD_VAR 0 3
15277: PPUSH
15278: CALL 16845 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
15282: LD_VAR 0 1
15286: PUSH
15287: LD_INT 255
15289: EQUAL
15290: PUSH
15291: LD_VAR 0 2
15295: PPUSH
15296: CALL_OW 264
15300: PUSH
15301: LD_INT 14
15303: PUSH
15304: LD_INT 53
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: IN
15311: AND
15312: PUSH
15313: LD_VAR 0 4
15317: PPUSH
15318: LD_VAR 0 5
15322: PPUSH
15323: CALL_OW 488
15327: AND
15328: IFFALSE 15352
// CutTreeXYR ( unit , x , y , 12 ) ;
15330: LD_VAR 0 2
15334: PPUSH
15335: LD_VAR 0 4
15339: PPUSH
15340: LD_VAR 0 5
15344: PPUSH
15345: LD_INT 12
15347: PPUSH
15348: CALL 15415 0 4
// if cmd = 256 then
15352: LD_VAR 0 1
15356: PUSH
15357: LD_INT 256
15359: EQUAL
15360: IFFALSE 15381
// SetFactoryWaypoint ( unit , x , y ) ;
15362: LD_VAR 0 2
15366: PPUSH
15367: LD_VAR 0 4
15371: PPUSH
15372: LD_VAR 0 5
15376: PPUSH
15377: CALL 33445 0 3
// if cmd = 257 then
15381: LD_VAR 0 1
15385: PUSH
15386: LD_INT 257
15388: EQUAL
15389: IFFALSE 15410
// SetWarehouseGatheringPoint ( unit , x , y ) ;
15391: LD_VAR 0 2
15395: PPUSH
15396: LD_VAR 0 4
15400: PPUSH
15401: LD_VAR 0 5
15405: PPUSH
15406: CALL 33807 0 3
// end ;
15410: LD_VAR 0 6
15414: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15415: LD_INT 0
15417: PPUSH
15418: PPUSH
15419: PPUSH
15420: PPUSH
15421: PPUSH
15422: PPUSH
15423: PPUSH
15424: PPUSH
15425: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15426: LD_VAR 0 1
15430: NOT
15431: PUSH
15432: LD_VAR 0 2
15436: PPUSH
15437: LD_VAR 0 3
15441: PPUSH
15442: CALL_OW 488
15446: NOT
15447: OR
15448: PUSH
15449: LD_VAR 0 4
15453: NOT
15454: OR
15455: IFFALSE 15459
// exit ;
15457: GO 15799
// list := [ ] ;
15459: LD_ADDR_VAR 0 13
15463: PUSH
15464: EMPTY
15465: ST_TO_ADDR
// if x - r < 0 then
15466: LD_VAR 0 2
15470: PUSH
15471: LD_VAR 0 4
15475: MINUS
15476: PUSH
15477: LD_INT 0
15479: LESS
15480: IFFALSE 15492
// min_x := 0 else
15482: LD_ADDR_VAR 0 7
15486: PUSH
15487: LD_INT 0
15489: ST_TO_ADDR
15490: GO 15508
// min_x := x - r ;
15492: LD_ADDR_VAR 0 7
15496: PUSH
15497: LD_VAR 0 2
15501: PUSH
15502: LD_VAR 0 4
15506: MINUS
15507: ST_TO_ADDR
// if y - r < 0 then
15508: LD_VAR 0 3
15512: PUSH
15513: LD_VAR 0 4
15517: MINUS
15518: PUSH
15519: LD_INT 0
15521: LESS
15522: IFFALSE 15534
// min_y := 0 else
15524: LD_ADDR_VAR 0 8
15528: PUSH
15529: LD_INT 0
15531: ST_TO_ADDR
15532: GO 15550
// min_y := y - r ;
15534: LD_ADDR_VAR 0 8
15538: PUSH
15539: LD_VAR 0 3
15543: PUSH
15544: LD_VAR 0 4
15548: MINUS
15549: ST_TO_ADDR
// max_x := x + r ;
15550: LD_ADDR_VAR 0 9
15554: PUSH
15555: LD_VAR 0 2
15559: PUSH
15560: LD_VAR 0 4
15564: PLUS
15565: ST_TO_ADDR
// max_y := y + r ;
15566: LD_ADDR_VAR 0 10
15570: PUSH
15571: LD_VAR 0 3
15575: PUSH
15576: LD_VAR 0 4
15580: PLUS
15581: ST_TO_ADDR
// for _x = min_x to max_x do
15582: LD_ADDR_VAR 0 11
15586: PUSH
15587: DOUBLE
15588: LD_VAR 0 7
15592: DEC
15593: ST_TO_ADDR
15594: LD_VAR 0 9
15598: PUSH
15599: FOR_TO
15600: IFFALSE 15717
// for _y = min_y to max_y do
15602: LD_ADDR_VAR 0 12
15606: PUSH
15607: DOUBLE
15608: LD_VAR 0 8
15612: DEC
15613: ST_TO_ADDR
15614: LD_VAR 0 10
15618: PUSH
15619: FOR_TO
15620: IFFALSE 15713
// begin if not ValidHex ( _x , _y ) then
15622: LD_VAR 0 11
15626: PPUSH
15627: LD_VAR 0 12
15631: PPUSH
15632: CALL_OW 488
15636: NOT
15637: IFFALSE 15641
// continue ;
15639: GO 15619
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15641: LD_VAR 0 11
15645: PPUSH
15646: LD_VAR 0 12
15650: PPUSH
15651: CALL_OW 351
15655: PUSH
15656: LD_VAR 0 11
15660: PPUSH
15661: LD_VAR 0 12
15665: PPUSH
15666: CALL_OW 554
15670: AND
15671: IFFALSE 15711
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15673: LD_ADDR_VAR 0 13
15677: PUSH
15678: LD_VAR 0 13
15682: PPUSH
15683: LD_VAR 0 13
15687: PUSH
15688: LD_INT 1
15690: PLUS
15691: PPUSH
15692: LD_VAR 0 11
15696: PUSH
15697: LD_VAR 0 12
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PPUSH
15706: CALL_OW 2
15710: ST_TO_ADDR
// end ;
15711: GO 15619
15713: POP
15714: POP
15715: GO 15599
15717: POP
15718: POP
// if not list then
15719: LD_VAR 0 13
15723: NOT
15724: IFFALSE 15728
// exit ;
15726: GO 15799
// for i in list do
15728: LD_ADDR_VAR 0 6
15732: PUSH
15733: LD_VAR 0 13
15737: PUSH
15738: FOR_IN
15739: IFFALSE 15797
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
15741: LD_VAR 0 1
15745: PPUSH
15746: LD_STRING M
15748: PUSH
15749: LD_VAR 0 6
15753: PUSH
15754: LD_INT 1
15756: ARRAY
15757: PUSH
15758: LD_VAR 0 6
15762: PUSH
15763: LD_INT 2
15765: ARRAY
15766: PUSH
15767: LD_INT 0
15769: PUSH
15770: LD_INT 0
15772: PUSH
15773: LD_INT 0
15775: PUSH
15776: LD_INT 0
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: PUSH
15788: EMPTY
15789: LIST
15790: PPUSH
15791: CALL_OW 447
15795: GO 15738
15797: POP
15798: POP
// end ;
15799: LD_VAR 0 5
15803: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
15804: LD_EXP 44
15808: NOT
15809: IFFALSE 15859
15811: GO 15813
15813: DISABLE
// begin initHack := true ;
15814: LD_ADDR_EXP 44
15818: PUSH
15819: LD_INT 1
15821: ST_TO_ADDR
// hackTanks := [ ] ;
15822: LD_ADDR_EXP 45
15826: PUSH
15827: EMPTY
15828: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
15829: LD_ADDR_EXP 46
15833: PUSH
15834: EMPTY
15835: ST_TO_ADDR
// hackLimit := 3 ;
15836: LD_ADDR_EXP 47
15840: PUSH
15841: LD_INT 3
15843: ST_TO_ADDR
// hackDist := 12 ;
15844: LD_ADDR_EXP 48
15848: PUSH
15849: LD_INT 12
15851: ST_TO_ADDR
// hackCounter := [ ] ;
15852: LD_ADDR_EXP 49
15856: PUSH
15857: EMPTY
15858: ST_TO_ADDR
// end ;
15859: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
15860: LD_EXP 44
15864: PUSH
15865: LD_INT 34
15867: PUSH
15868: LD_INT 99
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PPUSH
15875: CALL_OW 69
15879: AND
15880: IFFALSE 16133
15882: GO 15884
15884: DISABLE
15885: LD_INT 0
15887: PPUSH
15888: PPUSH
// begin enable ;
15889: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
15890: LD_ADDR_VAR 0 1
15894: PUSH
15895: LD_INT 34
15897: PUSH
15898: LD_INT 99
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: PPUSH
15905: CALL_OW 69
15909: PUSH
15910: FOR_IN
15911: IFFALSE 16131
// begin if not i in hackTanks then
15913: LD_VAR 0 1
15917: PUSH
15918: LD_EXP 45
15922: IN
15923: NOT
15924: IFFALSE 16007
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
15926: LD_ADDR_EXP 45
15930: PUSH
15931: LD_EXP 45
15935: PPUSH
15936: LD_EXP 45
15940: PUSH
15941: LD_INT 1
15943: PLUS
15944: PPUSH
15945: LD_VAR 0 1
15949: PPUSH
15950: CALL_OW 1
15954: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
15955: LD_ADDR_EXP 46
15959: PUSH
15960: LD_EXP 46
15964: PPUSH
15965: LD_EXP 46
15969: PUSH
15970: LD_INT 1
15972: PLUS
15973: PPUSH
15974: EMPTY
15975: PPUSH
15976: CALL_OW 1
15980: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
15981: LD_ADDR_EXP 49
15985: PUSH
15986: LD_EXP 49
15990: PPUSH
15991: LD_EXP 49
15995: PUSH
15996: LD_INT 1
15998: PLUS
15999: PPUSH
16000: EMPTY
16001: PPUSH
16002: CALL_OW 1
16006: ST_TO_ADDR
// end ; if not IsOk ( i ) then
16007: LD_VAR 0 1
16011: PPUSH
16012: CALL_OW 302
16016: NOT
16017: IFFALSE 16030
// begin HackUnlinkAll ( i ) ;
16019: LD_VAR 0 1
16023: PPUSH
16024: CALL 16136 0 1
// continue ;
16028: GO 15910
// end ; HackCheckCapturedStatus ( i ) ;
16030: LD_VAR 0 1
16034: PPUSH
16035: CALL 16579 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
16039: LD_ADDR_VAR 0 2
16043: PUSH
16044: LD_INT 81
16046: PUSH
16047: LD_VAR 0 1
16051: PPUSH
16052: CALL_OW 255
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: PUSH
16061: LD_INT 33
16063: PUSH
16064: LD_INT 3
16066: PUSH
16067: EMPTY
16068: LIST
16069: LIST
16070: PUSH
16071: LD_INT 91
16073: PUSH
16074: LD_VAR 0 1
16078: PUSH
16079: LD_EXP 48
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: LIST
16088: PUSH
16089: LD_INT 50
16091: PUSH
16092: EMPTY
16093: LIST
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: PPUSH
16101: CALL_OW 69
16105: ST_TO_ADDR
// if not tmp then
16106: LD_VAR 0 2
16110: NOT
16111: IFFALSE 16115
// continue ;
16113: GO 15910
// HackLink ( i , tmp ) ;
16115: LD_VAR 0 1
16119: PPUSH
16120: LD_VAR 0 2
16124: PPUSH
16125: CALL 16272 0 2
// end ;
16129: GO 15910
16131: POP
16132: POP
// end ;
16133: PPOPN 2
16135: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
16136: LD_INT 0
16138: PPUSH
16139: PPUSH
16140: PPUSH
// if not hack in hackTanks then
16141: LD_VAR 0 1
16145: PUSH
16146: LD_EXP 45
16150: IN
16151: NOT
16152: IFFALSE 16156
// exit ;
16154: GO 16267
// index := GetElementIndex ( hackTanks , hack ) ;
16156: LD_ADDR_VAR 0 4
16160: PUSH
16161: LD_EXP 45
16165: PPUSH
16166: LD_VAR 0 1
16170: PPUSH
16171: CALL 39678 0 2
16175: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
16176: LD_EXP 46
16180: PUSH
16181: LD_VAR 0 4
16185: ARRAY
16186: IFFALSE 16267
// begin for i in hackTanksCaptured [ index ] do
16188: LD_ADDR_VAR 0 3
16192: PUSH
16193: LD_EXP 46
16197: PUSH
16198: LD_VAR 0 4
16202: ARRAY
16203: PUSH
16204: FOR_IN
16205: IFFALSE 16231
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
16207: LD_VAR 0 3
16211: PUSH
16212: LD_INT 1
16214: ARRAY
16215: PPUSH
16216: LD_VAR 0 3
16220: PUSH
16221: LD_INT 2
16223: ARRAY
16224: PPUSH
16225: CALL_OW 235
16229: GO 16204
16231: POP
16232: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
16233: LD_ADDR_EXP 46
16237: PUSH
16238: LD_EXP 46
16242: PPUSH
16243: LD_VAR 0 4
16247: PPUSH
16248: EMPTY
16249: PPUSH
16250: CALL_OW 1
16254: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
16255: LD_VAR 0 1
16259: PPUSH
16260: LD_INT 0
16262: PPUSH
16263: CALL_OW 505
// end ; end ;
16267: LD_VAR 0 2
16271: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
16272: LD_INT 0
16274: PPUSH
16275: PPUSH
16276: PPUSH
// if not hack in hackTanks or not vehicles then
16277: LD_VAR 0 1
16281: PUSH
16282: LD_EXP 45
16286: IN
16287: NOT
16288: PUSH
16289: LD_VAR 0 2
16293: NOT
16294: OR
16295: IFFALSE 16299
// exit ;
16297: GO 16574
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
16299: LD_ADDR_VAR 0 2
16303: PUSH
16304: LD_VAR 0 1
16308: PPUSH
16309: LD_VAR 0 2
16313: PPUSH
16314: LD_INT 1
16316: PPUSH
16317: LD_INT 1
16319: PPUSH
16320: CALL 40328 0 4
16324: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
16325: LD_ADDR_VAR 0 5
16329: PUSH
16330: LD_EXP 45
16334: PPUSH
16335: LD_VAR 0 1
16339: PPUSH
16340: CALL 39678 0 2
16344: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
16345: LD_EXP 46
16349: PUSH
16350: LD_VAR 0 5
16354: ARRAY
16355: PUSH
16356: LD_EXP 47
16360: LESS
16361: IFFALSE 16550
// begin for i := 1 to vehicles do
16363: LD_ADDR_VAR 0 4
16367: PUSH
16368: DOUBLE
16369: LD_INT 1
16371: DEC
16372: ST_TO_ADDR
16373: LD_VAR 0 2
16377: PUSH
16378: FOR_TO
16379: IFFALSE 16548
// begin if hackTanksCaptured [ index ] = hackLimit then
16381: LD_EXP 46
16385: PUSH
16386: LD_VAR 0 5
16390: ARRAY
16391: PUSH
16392: LD_EXP 47
16396: EQUAL
16397: IFFALSE 16401
// break ;
16399: GO 16548
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
16401: LD_ADDR_EXP 49
16405: PUSH
16406: LD_EXP 49
16410: PPUSH
16411: LD_VAR 0 5
16415: PPUSH
16416: LD_EXP 49
16420: PUSH
16421: LD_VAR 0 5
16425: ARRAY
16426: PUSH
16427: LD_INT 1
16429: PLUS
16430: PPUSH
16431: CALL_OW 1
16435: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
16436: LD_ADDR_EXP 46
16440: PUSH
16441: LD_EXP 46
16445: PPUSH
16446: LD_VAR 0 5
16450: PUSH
16451: LD_EXP 46
16455: PUSH
16456: LD_VAR 0 5
16460: ARRAY
16461: PUSH
16462: LD_INT 1
16464: PLUS
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PPUSH
16470: LD_VAR 0 2
16474: PUSH
16475: LD_VAR 0 4
16479: ARRAY
16480: PUSH
16481: LD_VAR 0 2
16485: PUSH
16486: LD_VAR 0 4
16490: ARRAY
16491: PPUSH
16492: CALL_OW 255
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PPUSH
16501: CALL 39893 0 3
16505: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
16506: LD_VAR 0 2
16510: PUSH
16511: LD_VAR 0 4
16515: ARRAY
16516: PPUSH
16517: LD_VAR 0 1
16521: PPUSH
16522: CALL_OW 255
16526: PPUSH
16527: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
16531: LD_VAR 0 2
16535: PUSH
16536: LD_VAR 0 4
16540: ARRAY
16541: PPUSH
16542: CALL_OW 141
// end ;
16546: GO 16378
16548: POP
16549: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16550: LD_VAR 0 1
16554: PPUSH
16555: LD_EXP 46
16559: PUSH
16560: LD_VAR 0 5
16564: ARRAY
16565: PUSH
16566: LD_INT 0
16568: PLUS
16569: PPUSH
16570: CALL_OW 505
// end ;
16574: LD_VAR 0 3
16578: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
16579: LD_INT 0
16581: PPUSH
16582: PPUSH
16583: PPUSH
16584: PPUSH
// if not hack in hackTanks then
16585: LD_VAR 0 1
16589: PUSH
16590: LD_EXP 45
16594: IN
16595: NOT
16596: IFFALSE 16600
// exit ;
16598: GO 16840
// index := GetElementIndex ( hackTanks , hack ) ;
16600: LD_ADDR_VAR 0 4
16604: PUSH
16605: LD_EXP 45
16609: PPUSH
16610: LD_VAR 0 1
16614: PPUSH
16615: CALL 39678 0 2
16619: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
16620: LD_ADDR_VAR 0 3
16624: PUSH
16625: DOUBLE
16626: LD_EXP 46
16630: PUSH
16631: LD_VAR 0 4
16635: ARRAY
16636: INC
16637: ST_TO_ADDR
16638: LD_INT 1
16640: PUSH
16641: FOR_DOWNTO
16642: IFFALSE 16814
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
16644: LD_ADDR_VAR 0 5
16648: PUSH
16649: LD_EXP 46
16653: PUSH
16654: LD_VAR 0 4
16658: ARRAY
16659: PUSH
16660: LD_VAR 0 3
16664: ARRAY
16665: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
16666: LD_VAR 0 5
16670: PUSH
16671: LD_INT 1
16673: ARRAY
16674: PPUSH
16675: CALL_OW 302
16679: NOT
16680: PUSH
16681: LD_VAR 0 5
16685: PUSH
16686: LD_INT 1
16688: ARRAY
16689: PPUSH
16690: CALL_OW 255
16694: PUSH
16695: LD_VAR 0 1
16699: PPUSH
16700: CALL_OW 255
16704: NONEQUAL
16705: OR
16706: IFFALSE 16812
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
16708: LD_VAR 0 5
16712: PUSH
16713: LD_INT 1
16715: ARRAY
16716: PPUSH
16717: CALL_OW 305
16721: PUSH
16722: LD_VAR 0 5
16726: PUSH
16727: LD_INT 1
16729: ARRAY
16730: PPUSH
16731: CALL_OW 255
16735: PUSH
16736: LD_VAR 0 1
16740: PPUSH
16741: CALL_OW 255
16745: EQUAL
16746: AND
16747: IFFALSE 16771
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
16749: LD_VAR 0 5
16753: PUSH
16754: LD_INT 1
16756: ARRAY
16757: PPUSH
16758: LD_VAR 0 5
16762: PUSH
16763: LD_INT 2
16765: ARRAY
16766: PPUSH
16767: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
16771: LD_ADDR_EXP 46
16775: PUSH
16776: LD_EXP 46
16780: PPUSH
16781: LD_VAR 0 4
16785: PPUSH
16786: LD_EXP 46
16790: PUSH
16791: LD_VAR 0 4
16795: ARRAY
16796: PPUSH
16797: LD_VAR 0 3
16801: PPUSH
16802: CALL_OW 3
16806: PPUSH
16807: CALL_OW 1
16811: ST_TO_ADDR
// end ; end ;
16812: GO 16641
16814: POP
16815: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16816: LD_VAR 0 1
16820: PPUSH
16821: LD_EXP 46
16825: PUSH
16826: LD_VAR 0 4
16830: ARRAY
16831: PUSH
16832: LD_INT 0
16834: PLUS
16835: PPUSH
16836: CALL_OW 505
// end ;
16840: LD_VAR 0 2
16844: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
16845: LD_INT 0
16847: PPUSH
16848: PPUSH
16849: PPUSH
16850: PPUSH
// if not hack in hackTanks then
16851: LD_VAR 0 1
16855: PUSH
16856: LD_EXP 45
16860: IN
16861: NOT
16862: IFFALSE 16866
// exit ;
16864: GO 16951
// index := GetElementIndex ( hackTanks , hack ) ;
16866: LD_ADDR_VAR 0 5
16870: PUSH
16871: LD_EXP 45
16875: PPUSH
16876: LD_VAR 0 1
16880: PPUSH
16881: CALL 39678 0 2
16885: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
16886: LD_ADDR_VAR 0 4
16890: PUSH
16891: DOUBLE
16892: LD_INT 1
16894: DEC
16895: ST_TO_ADDR
16896: LD_EXP 46
16900: PUSH
16901: LD_VAR 0 5
16905: ARRAY
16906: PUSH
16907: FOR_TO
16908: IFFALSE 16949
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
16910: LD_EXP 46
16914: PUSH
16915: LD_VAR 0 5
16919: ARRAY
16920: PUSH
16921: LD_VAR 0 4
16925: ARRAY
16926: PUSH
16927: LD_INT 1
16929: ARRAY
16930: PUSH
16931: LD_VAR 0 2
16935: EQUAL
16936: IFFALSE 16947
// KillUnit ( vehicle ) ;
16938: LD_VAR 0 2
16942: PPUSH
16943: CALL_OW 66
16947: GO 16907
16949: POP
16950: POP
// end ;
16951: LD_VAR 0 3
16955: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
16956: LD_EXP 50
16960: NOT
16961: IFFALSE 16996
16963: GO 16965
16965: DISABLE
// begin initMiner := true ;
16966: LD_ADDR_EXP 50
16970: PUSH
16971: LD_INT 1
16973: ST_TO_ADDR
// minersList := [ ] ;
16974: LD_ADDR_EXP 51
16978: PUSH
16979: EMPTY
16980: ST_TO_ADDR
// minerMinesList := [ ] ;
16981: LD_ADDR_EXP 52
16985: PUSH
16986: EMPTY
16987: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
16988: LD_ADDR_EXP 53
16992: PUSH
16993: LD_INT 5
16995: ST_TO_ADDR
// end ;
16996: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
16997: LD_EXP 50
17001: PUSH
17002: LD_INT 34
17004: PUSH
17005: LD_INT 81
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: PPUSH
17012: CALL_OW 69
17016: AND
17017: IFFALSE 17478
17019: GO 17021
17021: DISABLE
17022: LD_INT 0
17024: PPUSH
17025: PPUSH
17026: PPUSH
17027: PPUSH
// begin enable ;
17028: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
17029: LD_ADDR_VAR 0 1
17033: PUSH
17034: LD_INT 34
17036: PUSH
17037: LD_INT 81
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PPUSH
17044: CALL_OW 69
17048: PUSH
17049: FOR_IN
17050: IFFALSE 17122
// begin if not i in minersList then
17052: LD_VAR 0 1
17056: PUSH
17057: LD_EXP 51
17061: IN
17062: NOT
17063: IFFALSE 17120
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
17065: LD_ADDR_EXP 51
17069: PUSH
17070: LD_EXP 51
17074: PPUSH
17075: LD_EXP 51
17079: PUSH
17080: LD_INT 1
17082: PLUS
17083: PPUSH
17084: LD_VAR 0 1
17088: PPUSH
17089: CALL_OW 1
17093: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17094: LD_ADDR_EXP 52
17098: PUSH
17099: LD_EXP 52
17103: PPUSH
17104: LD_EXP 52
17108: PUSH
17109: LD_INT 1
17111: PLUS
17112: PPUSH
17113: EMPTY
17114: PPUSH
17115: CALL_OW 1
17119: ST_TO_ADDR
// end end ;
17120: GO 17049
17122: POP
17123: POP
// for i := minerMinesList downto 1 do
17124: LD_ADDR_VAR 0 1
17128: PUSH
17129: DOUBLE
17130: LD_EXP 52
17134: INC
17135: ST_TO_ADDR
17136: LD_INT 1
17138: PUSH
17139: FOR_DOWNTO
17140: IFFALSE 17476
// begin if IsLive ( minersList [ i ] ) then
17142: LD_EXP 51
17146: PUSH
17147: LD_VAR 0 1
17151: ARRAY
17152: PPUSH
17153: CALL_OW 300
17157: IFFALSE 17185
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
17159: LD_EXP 51
17163: PUSH
17164: LD_VAR 0 1
17168: ARRAY
17169: PPUSH
17170: LD_EXP 52
17174: PUSH
17175: LD_VAR 0 1
17179: ARRAY
17180: PPUSH
17181: CALL_OW 505
// if not minerMinesList [ i ] then
17185: LD_EXP 52
17189: PUSH
17190: LD_VAR 0 1
17194: ARRAY
17195: NOT
17196: IFFALSE 17200
// continue ;
17198: GO 17139
// for j := minerMinesList [ i ] downto 1 do
17200: LD_ADDR_VAR 0 2
17204: PUSH
17205: DOUBLE
17206: LD_EXP 52
17210: PUSH
17211: LD_VAR 0 1
17215: ARRAY
17216: INC
17217: ST_TO_ADDR
17218: LD_INT 1
17220: PUSH
17221: FOR_DOWNTO
17222: IFFALSE 17472
// begin side := GetSide ( minersList [ i ] ) ;
17224: LD_ADDR_VAR 0 3
17228: PUSH
17229: LD_EXP 51
17233: PUSH
17234: LD_VAR 0 1
17238: ARRAY
17239: PPUSH
17240: CALL_OW 255
17244: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
17245: LD_ADDR_VAR 0 4
17249: PUSH
17250: LD_EXP 52
17254: PUSH
17255: LD_VAR 0 1
17259: ARRAY
17260: PUSH
17261: LD_VAR 0 2
17265: ARRAY
17266: PUSH
17267: LD_INT 1
17269: ARRAY
17270: PPUSH
17271: LD_EXP 52
17275: PUSH
17276: LD_VAR 0 1
17280: ARRAY
17281: PUSH
17282: LD_VAR 0 2
17286: ARRAY
17287: PUSH
17288: LD_INT 2
17290: ARRAY
17291: PPUSH
17292: CALL_OW 428
17296: ST_TO_ADDR
// if not tmp then
17297: LD_VAR 0 4
17301: NOT
17302: IFFALSE 17306
// continue ;
17304: GO 17221
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
17306: LD_VAR 0 4
17310: PUSH
17311: LD_INT 81
17313: PUSH
17314: LD_VAR 0 3
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PPUSH
17323: CALL_OW 69
17327: IN
17328: PUSH
17329: LD_EXP 52
17333: PUSH
17334: LD_VAR 0 1
17338: ARRAY
17339: PUSH
17340: LD_VAR 0 2
17344: ARRAY
17345: PUSH
17346: LD_INT 1
17348: ARRAY
17349: PPUSH
17350: LD_EXP 52
17354: PUSH
17355: LD_VAR 0 1
17359: ARRAY
17360: PUSH
17361: LD_VAR 0 2
17365: ARRAY
17366: PUSH
17367: LD_INT 2
17369: ARRAY
17370: PPUSH
17371: CALL_OW 458
17375: AND
17376: IFFALSE 17470
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
17378: LD_EXP 52
17382: PUSH
17383: LD_VAR 0 1
17387: ARRAY
17388: PUSH
17389: LD_VAR 0 2
17393: ARRAY
17394: PUSH
17395: LD_INT 1
17397: ARRAY
17398: PPUSH
17399: LD_EXP 52
17403: PUSH
17404: LD_VAR 0 1
17408: ARRAY
17409: PUSH
17410: LD_VAR 0 2
17414: ARRAY
17415: PUSH
17416: LD_INT 2
17418: ARRAY
17419: PPUSH
17420: LD_VAR 0 3
17424: PPUSH
17425: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
17429: LD_ADDR_EXP 52
17433: PUSH
17434: LD_EXP 52
17438: PPUSH
17439: LD_VAR 0 1
17443: PPUSH
17444: LD_EXP 52
17448: PUSH
17449: LD_VAR 0 1
17453: ARRAY
17454: PPUSH
17455: LD_VAR 0 2
17459: PPUSH
17460: CALL_OW 3
17464: PPUSH
17465: CALL_OW 1
17469: ST_TO_ADDR
// end ; end ;
17470: GO 17221
17472: POP
17473: POP
// end ;
17474: GO 17139
17476: POP
17477: POP
// end ;
17478: PPOPN 4
17480: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
17481: LD_INT 0
17483: PPUSH
17484: PPUSH
// result := false ;
17485: LD_ADDR_VAR 0 4
17489: PUSH
17490: LD_INT 0
17492: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
17493: LD_VAR 0 1
17497: PPUSH
17498: CALL_OW 264
17502: PUSH
17503: LD_INT 81
17505: EQUAL
17506: NOT
17507: IFFALSE 17511
// exit ;
17509: GO 17751
// index := GetElementIndex ( minersList , unit ) ;
17511: LD_ADDR_VAR 0 5
17515: PUSH
17516: LD_EXP 51
17520: PPUSH
17521: LD_VAR 0 1
17525: PPUSH
17526: CALL 39678 0 2
17530: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
17531: LD_EXP 52
17535: PUSH
17536: LD_VAR 0 5
17540: ARRAY
17541: PUSH
17542: LD_EXP 53
17546: GREATEREQUAL
17547: IFFALSE 17551
// exit ;
17549: GO 17751
// ComMoveXY ( unit , x , y ) ;
17551: LD_VAR 0 1
17555: PPUSH
17556: LD_VAR 0 2
17560: PPUSH
17561: LD_VAR 0 3
17565: PPUSH
17566: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17570: LD_INT 35
17572: PPUSH
17573: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
17577: LD_VAR 0 1
17581: PPUSH
17582: LD_VAR 0 2
17586: PPUSH
17587: LD_VAR 0 3
17591: PPUSH
17592: CALL 71033 0 3
17596: NOT
17597: PUSH
17598: LD_VAR 0 1
17602: PPUSH
17603: CALL_OW 314
17607: AND
17608: IFFALSE 17612
// exit ;
17610: GO 17751
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
17612: LD_VAR 0 2
17616: PPUSH
17617: LD_VAR 0 3
17621: PPUSH
17622: CALL_OW 428
17626: PUSH
17627: LD_VAR 0 1
17631: EQUAL
17632: PUSH
17633: LD_VAR 0 1
17637: PPUSH
17638: CALL_OW 314
17642: NOT
17643: AND
17644: IFFALSE 17570
// PlaySoundXY ( x , y , PlantMine ) ;
17646: LD_VAR 0 2
17650: PPUSH
17651: LD_VAR 0 3
17655: PPUSH
17656: LD_STRING PlantMine
17658: PPUSH
17659: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
17663: LD_VAR 0 2
17667: PPUSH
17668: LD_VAR 0 3
17672: PPUSH
17673: LD_VAR 0 1
17677: PPUSH
17678: CALL_OW 255
17682: PPUSH
17683: LD_INT 0
17685: PPUSH
17686: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17690: LD_ADDR_EXP 52
17694: PUSH
17695: LD_EXP 52
17699: PPUSH
17700: LD_VAR 0 5
17704: PUSH
17705: LD_EXP 52
17709: PUSH
17710: LD_VAR 0 5
17714: ARRAY
17715: PUSH
17716: LD_INT 1
17718: PLUS
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PPUSH
17724: LD_VAR 0 2
17728: PUSH
17729: LD_VAR 0 3
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PPUSH
17738: CALL 39893 0 3
17742: ST_TO_ADDR
// result := true ;
17743: LD_ADDR_VAR 0 4
17747: PUSH
17748: LD_INT 1
17750: ST_TO_ADDR
// end ;
17751: LD_VAR 0 4
17755: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
17756: LD_INT 0
17758: PPUSH
17759: PPUSH
17760: PPUSH
// if not unit in minersList then
17761: LD_VAR 0 1
17765: PUSH
17766: LD_EXP 51
17770: IN
17771: NOT
17772: IFFALSE 17776
// exit ;
17774: GO 18168
// index := GetElementIndex ( minersList , unit ) ;
17776: LD_ADDR_VAR 0 6
17780: PUSH
17781: LD_EXP 51
17785: PPUSH
17786: LD_VAR 0 1
17790: PPUSH
17791: CALL 39678 0 2
17795: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
17796: LD_ADDR_VAR 0 5
17800: PUSH
17801: DOUBLE
17802: LD_EXP 52
17806: PUSH
17807: LD_VAR 0 6
17811: ARRAY
17812: INC
17813: ST_TO_ADDR
17814: LD_INT 1
17816: PUSH
17817: FOR_DOWNTO
17818: IFFALSE 17979
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
17820: LD_EXP 52
17824: PUSH
17825: LD_VAR 0 6
17829: ARRAY
17830: PUSH
17831: LD_VAR 0 5
17835: ARRAY
17836: PUSH
17837: LD_INT 1
17839: ARRAY
17840: PUSH
17841: LD_VAR 0 2
17845: EQUAL
17846: PUSH
17847: LD_EXP 52
17851: PUSH
17852: LD_VAR 0 6
17856: ARRAY
17857: PUSH
17858: LD_VAR 0 5
17862: ARRAY
17863: PUSH
17864: LD_INT 2
17866: ARRAY
17867: PUSH
17868: LD_VAR 0 3
17872: EQUAL
17873: AND
17874: IFFALSE 17977
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17876: LD_EXP 52
17880: PUSH
17881: LD_VAR 0 6
17885: ARRAY
17886: PUSH
17887: LD_VAR 0 5
17891: ARRAY
17892: PUSH
17893: LD_INT 1
17895: ARRAY
17896: PPUSH
17897: LD_EXP 52
17901: PUSH
17902: LD_VAR 0 6
17906: ARRAY
17907: PUSH
17908: LD_VAR 0 5
17912: ARRAY
17913: PUSH
17914: LD_INT 2
17916: ARRAY
17917: PPUSH
17918: LD_VAR 0 1
17922: PPUSH
17923: CALL_OW 255
17927: PPUSH
17928: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17932: LD_ADDR_EXP 52
17936: PUSH
17937: LD_EXP 52
17941: PPUSH
17942: LD_VAR 0 6
17946: PPUSH
17947: LD_EXP 52
17951: PUSH
17952: LD_VAR 0 6
17956: ARRAY
17957: PPUSH
17958: LD_VAR 0 5
17962: PPUSH
17963: CALL_OW 3
17967: PPUSH
17968: CALL_OW 1
17972: ST_TO_ADDR
// exit ;
17973: POP
17974: POP
17975: GO 18168
// end ; end ;
17977: GO 17817
17979: POP
17980: POP
// for i := minerMinesList [ index ] downto 1 do
17981: LD_ADDR_VAR 0 5
17985: PUSH
17986: DOUBLE
17987: LD_EXP 52
17991: PUSH
17992: LD_VAR 0 6
17996: ARRAY
17997: INC
17998: ST_TO_ADDR
17999: LD_INT 1
18001: PUSH
18002: FOR_DOWNTO
18003: IFFALSE 18166
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
18005: LD_EXP 52
18009: PUSH
18010: LD_VAR 0 6
18014: ARRAY
18015: PUSH
18016: LD_VAR 0 5
18020: ARRAY
18021: PUSH
18022: LD_INT 1
18024: ARRAY
18025: PPUSH
18026: LD_EXP 52
18030: PUSH
18031: LD_VAR 0 6
18035: ARRAY
18036: PUSH
18037: LD_VAR 0 5
18041: ARRAY
18042: PUSH
18043: LD_INT 2
18045: ARRAY
18046: PPUSH
18047: LD_VAR 0 2
18051: PPUSH
18052: LD_VAR 0 3
18056: PPUSH
18057: CALL_OW 298
18061: PUSH
18062: LD_INT 6
18064: LESS
18065: IFFALSE 18164
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18067: LD_EXP 52
18071: PUSH
18072: LD_VAR 0 6
18076: ARRAY
18077: PUSH
18078: LD_VAR 0 5
18082: ARRAY
18083: PUSH
18084: LD_INT 1
18086: ARRAY
18087: PPUSH
18088: LD_EXP 52
18092: PUSH
18093: LD_VAR 0 6
18097: ARRAY
18098: PUSH
18099: LD_VAR 0 5
18103: ARRAY
18104: PUSH
18105: LD_INT 2
18107: ARRAY
18108: PPUSH
18109: LD_VAR 0 1
18113: PPUSH
18114: CALL_OW 255
18118: PPUSH
18119: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18123: LD_ADDR_EXP 52
18127: PUSH
18128: LD_EXP 52
18132: PPUSH
18133: LD_VAR 0 6
18137: PPUSH
18138: LD_EXP 52
18142: PUSH
18143: LD_VAR 0 6
18147: ARRAY
18148: PPUSH
18149: LD_VAR 0 5
18153: PPUSH
18154: CALL_OW 3
18158: PPUSH
18159: CALL_OW 1
18163: ST_TO_ADDR
// end ; end ;
18164: GO 18002
18166: POP
18167: POP
// end ;
18168: LD_VAR 0 4
18172: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
18173: LD_INT 0
18175: PPUSH
18176: PPUSH
18177: PPUSH
18178: PPUSH
18179: PPUSH
18180: PPUSH
18181: PPUSH
18182: PPUSH
18183: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
18184: LD_VAR 0 1
18188: PPUSH
18189: CALL_OW 264
18193: PUSH
18194: LD_INT 81
18196: EQUAL
18197: NOT
18198: PUSH
18199: LD_VAR 0 1
18203: PUSH
18204: LD_EXP 51
18208: IN
18209: NOT
18210: OR
18211: IFFALSE 18215
// exit ;
18213: GO 18537
// index := GetElementIndex ( minersList , unit ) ;
18215: LD_ADDR_VAR 0 6
18219: PUSH
18220: LD_EXP 51
18224: PPUSH
18225: LD_VAR 0 1
18229: PPUSH
18230: CALL 39678 0 2
18234: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
18235: LD_ADDR_VAR 0 8
18239: PUSH
18240: LD_EXP 53
18244: PUSH
18245: LD_EXP 52
18249: PUSH
18250: LD_VAR 0 6
18254: ARRAY
18255: MINUS
18256: ST_TO_ADDR
// if not minesFreeAmount then
18257: LD_VAR 0 8
18261: NOT
18262: IFFALSE 18266
// exit ;
18264: GO 18537
// tmp := [ ] ;
18266: LD_ADDR_VAR 0 7
18270: PUSH
18271: EMPTY
18272: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
18273: LD_ADDR_VAR 0 5
18277: PUSH
18278: DOUBLE
18279: LD_INT 1
18281: DEC
18282: ST_TO_ADDR
18283: LD_VAR 0 8
18287: PUSH
18288: FOR_TO
18289: IFFALSE 18484
// begin _d := rand ( 0 , 5 ) ;
18291: LD_ADDR_VAR 0 11
18295: PUSH
18296: LD_INT 0
18298: PPUSH
18299: LD_INT 5
18301: PPUSH
18302: CALL_OW 12
18306: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
18307: LD_ADDR_VAR 0 12
18311: PUSH
18312: LD_INT 2
18314: PPUSH
18315: LD_INT 6
18317: PPUSH
18318: CALL_OW 12
18322: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
18323: LD_ADDR_VAR 0 9
18327: PUSH
18328: LD_VAR 0 2
18332: PPUSH
18333: LD_VAR 0 11
18337: PPUSH
18338: LD_VAR 0 12
18342: PPUSH
18343: CALL_OW 272
18347: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
18348: LD_ADDR_VAR 0 10
18352: PUSH
18353: LD_VAR 0 3
18357: PPUSH
18358: LD_VAR 0 11
18362: PPUSH
18363: LD_VAR 0 12
18367: PPUSH
18368: CALL_OW 273
18372: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
18373: LD_VAR 0 9
18377: PPUSH
18378: LD_VAR 0 10
18382: PPUSH
18383: CALL_OW 488
18387: PUSH
18388: LD_VAR 0 9
18392: PUSH
18393: LD_VAR 0 10
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_VAR 0 7
18406: IN
18407: NOT
18408: AND
18409: PUSH
18410: LD_VAR 0 9
18414: PPUSH
18415: LD_VAR 0 10
18419: PPUSH
18420: CALL_OW 458
18424: NOT
18425: AND
18426: IFFALSE 18468
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
18428: LD_ADDR_VAR 0 7
18432: PUSH
18433: LD_VAR 0 7
18437: PPUSH
18438: LD_VAR 0 7
18442: PUSH
18443: LD_INT 1
18445: PLUS
18446: PPUSH
18447: LD_VAR 0 9
18451: PUSH
18452: LD_VAR 0 10
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PPUSH
18461: CALL_OW 1
18465: ST_TO_ADDR
18466: GO 18482
// i := i - 1 ;
18468: LD_ADDR_VAR 0 5
18472: PUSH
18473: LD_VAR 0 5
18477: PUSH
18478: LD_INT 1
18480: MINUS
18481: ST_TO_ADDR
// end ;
18482: GO 18288
18484: POP
18485: POP
// for i in tmp do
18486: LD_ADDR_VAR 0 5
18490: PUSH
18491: LD_VAR 0 7
18495: PUSH
18496: FOR_IN
18497: IFFALSE 18535
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
18499: LD_VAR 0 1
18503: PPUSH
18504: LD_VAR 0 5
18508: PUSH
18509: LD_INT 1
18511: ARRAY
18512: PPUSH
18513: LD_VAR 0 5
18517: PUSH
18518: LD_INT 2
18520: ARRAY
18521: PPUSH
18522: CALL 17481 0 3
18526: NOT
18527: IFFALSE 18533
// exit ;
18529: POP
18530: POP
18531: GO 18537
18533: GO 18496
18535: POP
18536: POP
// end ;
18537: LD_VAR 0 4
18541: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
18542: LD_INT 0
18544: PPUSH
18545: PPUSH
18546: PPUSH
18547: PPUSH
18548: PPUSH
18549: PPUSH
18550: PPUSH
// if not GetClass ( unit ) = class_sniper then
18551: LD_VAR 0 1
18555: PPUSH
18556: CALL_OW 257
18560: PUSH
18561: LD_INT 5
18563: EQUAL
18564: NOT
18565: IFFALSE 18569
// exit ;
18567: GO 18957
// dist := 8 ;
18569: LD_ADDR_VAR 0 5
18573: PUSH
18574: LD_INT 8
18576: ST_TO_ADDR
// viewRange := 12 ;
18577: LD_ADDR_VAR 0 7
18581: PUSH
18582: LD_INT 12
18584: ST_TO_ADDR
// side := GetSide ( unit ) ;
18585: LD_ADDR_VAR 0 6
18589: PUSH
18590: LD_VAR 0 1
18594: PPUSH
18595: CALL_OW 255
18599: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
18600: LD_INT 61
18602: PPUSH
18603: LD_VAR 0 6
18607: PPUSH
18608: CALL_OW 321
18612: PUSH
18613: LD_INT 2
18615: EQUAL
18616: IFFALSE 18626
// viewRange := 16 ;
18618: LD_ADDR_VAR 0 7
18622: PUSH
18623: LD_INT 16
18625: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
18626: LD_VAR 0 1
18630: PPUSH
18631: LD_VAR 0 2
18635: PPUSH
18636: LD_VAR 0 3
18640: PPUSH
18641: CALL_OW 297
18645: PUSH
18646: LD_VAR 0 5
18650: GREATER
18651: IFFALSE 18730
// begin ComMoveXY ( unit , x , y ) ;
18653: LD_VAR 0 1
18657: PPUSH
18658: LD_VAR 0 2
18662: PPUSH
18663: LD_VAR 0 3
18667: PPUSH
18668: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18672: LD_INT 35
18674: PPUSH
18675: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
18679: LD_VAR 0 1
18683: PPUSH
18684: LD_VAR 0 2
18688: PPUSH
18689: LD_VAR 0 3
18693: PPUSH
18694: CALL 71033 0 3
18698: NOT
18699: IFFALSE 18703
// exit ;
18701: GO 18957
// until GetDistUnitXY ( unit , x , y ) < dist ;
18703: LD_VAR 0 1
18707: PPUSH
18708: LD_VAR 0 2
18712: PPUSH
18713: LD_VAR 0 3
18717: PPUSH
18718: CALL_OW 297
18722: PUSH
18723: LD_VAR 0 5
18727: LESS
18728: IFFALSE 18672
// end ; ComTurnXY ( unit , x , y ) ;
18730: LD_VAR 0 1
18734: PPUSH
18735: LD_VAR 0 2
18739: PPUSH
18740: LD_VAR 0 3
18744: PPUSH
18745: CALL_OW 118
// wait ( 5 ) ;
18749: LD_INT 5
18751: PPUSH
18752: CALL_OW 67
// _d := GetDir ( unit ) ;
18756: LD_ADDR_VAR 0 10
18760: PUSH
18761: LD_VAR 0 1
18765: PPUSH
18766: CALL_OW 254
18770: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
18771: LD_ADDR_VAR 0 8
18775: PUSH
18776: LD_VAR 0 1
18780: PPUSH
18781: CALL_OW 250
18785: PPUSH
18786: LD_VAR 0 10
18790: PPUSH
18791: LD_VAR 0 5
18795: PPUSH
18796: CALL_OW 272
18800: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
18801: LD_ADDR_VAR 0 9
18805: PUSH
18806: LD_VAR 0 1
18810: PPUSH
18811: CALL_OW 251
18815: PPUSH
18816: LD_VAR 0 10
18820: PPUSH
18821: LD_VAR 0 5
18825: PPUSH
18826: CALL_OW 273
18830: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18831: LD_VAR 0 8
18835: PPUSH
18836: LD_VAR 0 9
18840: PPUSH
18841: CALL_OW 488
18845: NOT
18846: IFFALSE 18850
// exit ;
18848: GO 18957
// ComAnimCustom ( unit , 1 ) ;
18850: LD_VAR 0 1
18854: PPUSH
18855: LD_INT 1
18857: PPUSH
18858: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
18862: LD_VAR 0 8
18866: PPUSH
18867: LD_VAR 0 9
18871: PPUSH
18872: LD_VAR 0 6
18876: PPUSH
18877: LD_VAR 0 7
18881: PPUSH
18882: CALL_OW 330
// repeat wait ( 1 ) ;
18886: LD_INT 1
18888: PPUSH
18889: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
18893: LD_VAR 0 1
18897: PPUSH
18898: CALL_OW 316
18902: PUSH
18903: LD_VAR 0 1
18907: PPUSH
18908: CALL_OW 314
18912: OR
18913: PUSH
18914: LD_VAR 0 1
18918: PPUSH
18919: CALL_OW 302
18923: NOT
18924: OR
18925: PUSH
18926: LD_VAR 0 1
18930: PPUSH
18931: CALL_OW 301
18935: OR
18936: IFFALSE 18886
// RemoveSeeing ( _x , _y , side ) ;
18938: LD_VAR 0 8
18942: PPUSH
18943: LD_VAR 0 9
18947: PPUSH
18948: LD_VAR 0 6
18952: PPUSH
18953: CALL_OW 331
// end ; end_of_file
18957: LD_VAR 0 4
18961: RET
// export globalGameSaveCounter ; every 0 0$1 do
18962: GO 18964
18964: DISABLE
// begin enable ;
18965: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18966: LD_STRING updateTimer(
18968: PUSH
18969: LD_OWVAR 1
18973: STR
18974: PUSH
18975: LD_STRING );
18977: STR
18978: PPUSH
18979: CALL_OW 559
// end ;
18983: END
// every 0 0$1 do
18984: GO 18986
18986: DISABLE
// begin globalGameSaveCounter := 0 ;
18987: LD_ADDR_EXP 54
18991: PUSH
18992: LD_INT 0
18994: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
18995: LD_STRING setGameSaveCounter(0)
18997: PPUSH
18998: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19002: LD_STRING initStreamRollete();
19004: PPUSH
19005: CALL_OW 559
// InitStreamMode ;
19009: CALL 20335 0 0
// DefineStreamItems ( false ) ;
19013: LD_INT 0
19015: PPUSH
19016: CALL 20799 0 1
// end ;
19020: END
// export function SOS_MapStart ( ) ; begin
19021: LD_INT 0
19023: PPUSH
// if streamModeActive then
19024: LD_EXP 55
19028: IFFALSE 19037
// DefineStreamItems ( true ) ;
19030: LD_INT 1
19032: PPUSH
19033: CALL 20799 0 1
// UpdateLuaVariables ( ) ;
19037: CALL 19054 0 0
// UpdateFactoryWaypoints ( ) ;
19041: CALL 33660 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19045: CALL 33917 0 0
// end ;
19049: LD_VAR 0 1
19053: RET
// function UpdateLuaVariables ( ) ; begin
19054: LD_INT 0
19056: PPUSH
// if globalGameSaveCounter then
19057: LD_EXP 54
19061: IFFALSE 19095
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19063: LD_ADDR_EXP 54
19067: PUSH
19068: LD_EXP 54
19072: PPUSH
19073: CALL 73585 0 1
19077: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19078: LD_STRING setGameSaveCounter(
19080: PUSH
19081: LD_EXP 54
19085: STR
19086: PUSH
19087: LD_STRING )
19089: STR
19090: PPUSH
19091: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19095: LD_STRING setGameDifficulty(
19097: PUSH
19098: LD_OWVAR 67
19102: STR
19103: PUSH
19104: LD_STRING )
19106: STR
19107: PPUSH
19108: CALL_OW 559
// end ;
19112: LD_VAR 0 1
19116: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19117: LD_INT 0
19119: PPUSH
// if p2 = stream_mode then
19120: LD_VAR 0 2
19124: PUSH
19125: LD_INT 100
19127: EQUAL
19128: IFFALSE 20131
// begin if not StreamModeActive then
19130: LD_EXP 55
19134: NOT
19135: IFFALSE 19145
// StreamModeActive := true ;
19137: LD_ADDR_EXP 55
19141: PUSH
19142: LD_INT 1
19144: ST_TO_ADDR
// if p3 = 0 then
19145: LD_VAR 0 3
19149: PUSH
19150: LD_INT 0
19152: EQUAL
19153: IFFALSE 19159
// InitStreamMode ;
19155: CALL 20335 0 0
// if p3 = 1 then
19159: LD_VAR 0 3
19163: PUSH
19164: LD_INT 1
19166: EQUAL
19167: IFFALSE 19177
// sRocket := true ;
19169: LD_ADDR_EXP 60
19173: PUSH
19174: LD_INT 1
19176: ST_TO_ADDR
// if p3 = 2 then
19177: LD_VAR 0 3
19181: PUSH
19182: LD_INT 2
19184: EQUAL
19185: IFFALSE 19195
// sSpeed := true ;
19187: LD_ADDR_EXP 59
19191: PUSH
19192: LD_INT 1
19194: ST_TO_ADDR
// if p3 = 3 then
19195: LD_VAR 0 3
19199: PUSH
19200: LD_INT 3
19202: EQUAL
19203: IFFALSE 19213
// sEngine := true ;
19205: LD_ADDR_EXP 61
19209: PUSH
19210: LD_INT 1
19212: ST_TO_ADDR
// if p3 = 4 then
19213: LD_VAR 0 3
19217: PUSH
19218: LD_INT 4
19220: EQUAL
19221: IFFALSE 19231
// sSpec := true ;
19223: LD_ADDR_EXP 58
19227: PUSH
19228: LD_INT 1
19230: ST_TO_ADDR
// if p3 = 5 then
19231: LD_VAR 0 3
19235: PUSH
19236: LD_INT 5
19238: EQUAL
19239: IFFALSE 19249
// sLevel := true ;
19241: LD_ADDR_EXP 62
19245: PUSH
19246: LD_INT 1
19248: ST_TO_ADDR
// if p3 = 6 then
19249: LD_VAR 0 3
19253: PUSH
19254: LD_INT 6
19256: EQUAL
19257: IFFALSE 19267
// sArmoury := true ;
19259: LD_ADDR_EXP 63
19263: PUSH
19264: LD_INT 1
19266: ST_TO_ADDR
// if p3 = 7 then
19267: LD_VAR 0 3
19271: PUSH
19272: LD_INT 7
19274: EQUAL
19275: IFFALSE 19285
// sRadar := true ;
19277: LD_ADDR_EXP 64
19281: PUSH
19282: LD_INT 1
19284: ST_TO_ADDR
// if p3 = 8 then
19285: LD_VAR 0 3
19289: PUSH
19290: LD_INT 8
19292: EQUAL
19293: IFFALSE 19303
// sBunker := true ;
19295: LD_ADDR_EXP 65
19299: PUSH
19300: LD_INT 1
19302: ST_TO_ADDR
// if p3 = 9 then
19303: LD_VAR 0 3
19307: PUSH
19308: LD_INT 9
19310: EQUAL
19311: IFFALSE 19321
// sHack := true ;
19313: LD_ADDR_EXP 66
19317: PUSH
19318: LD_INT 1
19320: ST_TO_ADDR
// if p3 = 10 then
19321: LD_VAR 0 3
19325: PUSH
19326: LD_INT 10
19328: EQUAL
19329: IFFALSE 19339
// sFire := true ;
19331: LD_ADDR_EXP 67
19335: PUSH
19336: LD_INT 1
19338: ST_TO_ADDR
// if p3 = 11 then
19339: LD_VAR 0 3
19343: PUSH
19344: LD_INT 11
19346: EQUAL
19347: IFFALSE 19357
// sRefresh := true ;
19349: LD_ADDR_EXP 68
19353: PUSH
19354: LD_INT 1
19356: ST_TO_ADDR
// if p3 = 12 then
19357: LD_VAR 0 3
19361: PUSH
19362: LD_INT 12
19364: EQUAL
19365: IFFALSE 19375
// sExp := true ;
19367: LD_ADDR_EXP 69
19371: PUSH
19372: LD_INT 1
19374: ST_TO_ADDR
// if p3 = 13 then
19375: LD_VAR 0 3
19379: PUSH
19380: LD_INT 13
19382: EQUAL
19383: IFFALSE 19393
// sDepot := true ;
19385: LD_ADDR_EXP 70
19389: PUSH
19390: LD_INT 1
19392: ST_TO_ADDR
// if p3 = 14 then
19393: LD_VAR 0 3
19397: PUSH
19398: LD_INT 14
19400: EQUAL
19401: IFFALSE 19411
// sFlag := true ;
19403: LD_ADDR_EXP 71
19407: PUSH
19408: LD_INT 1
19410: ST_TO_ADDR
// if p3 = 15 then
19411: LD_VAR 0 3
19415: PUSH
19416: LD_INT 15
19418: EQUAL
19419: IFFALSE 19429
// sKamikadze := true ;
19421: LD_ADDR_EXP 79
19425: PUSH
19426: LD_INT 1
19428: ST_TO_ADDR
// if p3 = 16 then
19429: LD_VAR 0 3
19433: PUSH
19434: LD_INT 16
19436: EQUAL
19437: IFFALSE 19447
// sTroll := true ;
19439: LD_ADDR_EXP 80
19443: PUSH
19444: LD_INT 1
19446: ST_TO_ADDR
// if p3 = 17 then
19447: LD_VAR 0 3
19451: PUSH
19452: LD_INT 17
19454: EQUAL
19455: IFFALSE 19465
// sSlow := true ;
19457: LD_ADDR_EXP 81
19461: PUSH
19462: LD_INT 1
19464: ST_TO_ADDR
// if p3 = 18 then
19465: LD_VAR 0 3
19469: PUSH
19470: LD_INT 18
19472: EQUAL
19473: IFFALSE 19483
// sLack := true ;
19475: LD_ADDR_EXP 82
19479: PUSH
19480: LD_INT 1
19482: ST_TO_ADDR
// if p3 = 19 then
19483: LD_VAR 0 3
19487: PUSH
19488: LD_INT 19
19490: EQUAL
19491: IFFALSE 19501
// sTank := true ;
19493: LD_ADDR_EXP 84
19497: PUSH
19498: LD_INT 1
19500: ST_TO_ADDR
// if p3 = 20 then
19501: LD_VAR 0 3
19505: PUSH
19506: LD_INT 20
19508: EQUAL
19509: IFFALSE 19519
// sRemote := true ;
19511: LD_ADDR_EXP 85
19515: PUSH
19516: LD_INT 1
19518: ST_TO_ADDR
// if p3 = 21 then
19519: LD_VAR 0 3
19523: PUSH
19524: LD_INT 21
19526: EQUAL
19527: IFFALSE 19537
// sPowell := true ;
19529: LD_ADDR_EXP 86
19533: PUSH
19534: LD_INT 1
19536: ST_TO_ADDR
// if p3 = 22 then
19537: LD_VAR 0 3
19541: PUSH
19542: LD_INT 22
19544: EQUAL
19545: IFFALSE 19555
// sTeleport := true ;
19547: LD_ADDR_EXP 89
19551: PUSH
19552: LD_INT 1
19554: ST_TO_ADDR
// if p3 = 23 then
19555: LD_VAR 0 3
19559: PUSH
19560: LD_INT 23
19562: EQUAL
19563: IFFALSE 19573
// sOilTower := true ;
19565: LD_ADDR_EXP 91
19569: PUSH
19570: LD_INT 1
19572: ST_TO_ADDR
// if p3 = 24 then
19573: LD_VAR 0 3
19577: PUSH
19578: LD_INT 24
19580: EQUAL
19581: IFFALSE 19591
// sShovel := true ;
19583: LD_ADDR_EXP 92
19587: PUSH
19588: LD_INT 1
19590: ST_TO_ADDR
// if p3 = 25 then
19591: LD_VAR 0 3
19595: PUSH
19596: LD_INT 25
19598: EQUAL
19599: IFFALSE 19609
// sSheik := true ;
19601: LD_ADDR_EXP 93
19605: PUSH
19606: LD_INT 1
19608: ST_TO_ADDR
// if p3 = 26 then
19609: LD_VAR 0 3
19613: PUSH
19614: LD_INT 26
19616: EQUAL
19617: IFFALSE 19627
// sEarthquake := true ;
19619: LD_ADDR_EXP 95
19623: PUSH
19624: LD_INT 1
19626: ST_TO_ADDR
// if p3 = 27 then
19627: LD_VAR 0 3
19631: PUSH
19632: LD_INT 27
19634: EQUAL
19635: IFFALSE 19645
// sAI := true ;
19637: LD_ADDR_EXP 96
19641: PUSH
19642: LD_INT 1
19644: ST_TO_ADDR
// if p3 = 28 then
19645: LD_VAR 0 3
19649: PUSH
19650: LD_INT 28
19652: EQUAL
19653: IFFALSE 19663
// sCargo := true ;
19655: LD_ADDR_EXP 99
19659: PUSH
19660: LD_INT 1
19662: ST_TO_ADDR
// if p3 = 29 then
19663: LD_VAR 0 3
19667: PUSH
19668: LD_INT 29
19670: EQUAL
19671: IFFALSE 19681
// sDLaser := true ;
19673: LD_ADDR_EXP 100
19677: PUSH
19678: LD_INT 1
19680: ST_TO_ADDR
// if p3 = 30 then
19681: LD_VAR 0 3
19685: PUSH
19686: LD_INT 30
19688: EQUAL
19689: IFFALSE 19699
// sExchange := true ;
19691: LD_ADDR_EXP 101
19695: PUSH
19696: LD_INT 1
19698: ST_TO_ADDR
// if p3 = 31 then
19699: LD_VAR 0 3
19703: PUSH
19704: LD_INT 31
19706: EQUAL
19707: IFFALSE 19717
// sFac := true ;
19709: LD_ADDR_EXP 102
19713: PUSH
19714: LD_INT 1
19716: ST_TO_ADDR
// if p3 = 32 then
19717: LD_VAR 0 3
19721: PUSH
19722: LD_INT 32
19724: EQUAL
19725: IFFALSE 19735
// sPower := true ;
19727: LD_ADDR_EXP 103
19731: PUSH
19732: LD_INT 1
19734: ST_TO_ADDR
// if p3 = 33 then
19735: LD_VAR 0 3
19739: PUSH
19740: LD_INT 33
19742: EQUAL
19743: IFFALSE 19753
// sRandom := true ;
19745: LD_ADDR_EXP 104
19749: PUSH
19750: LD_INT 1
19752: ST_TO_ADDR
// if p3 = 34 then
19753: LD_VAR 0 3
19757: PUSH
19758: LD_INT 34
19760: EQUAL
19761: IFFALSE 19771
// sShield := true ;
19763: LD_ADDR_EXP 105
19767: PUSH
19768: LD_INT 1
19770: ST_TO_ADDR
// if p3 = 35 then
19771: LD_VAR 0 3
19775: PUSH
19776: LD_INT 35
19778: EQUAL
19779: IFFALSE 19789
// sTime := true ;
19781: LD_ADDR_EXP 106
19785: PUSH
19786: LD_INT 1
19788: ST_TO_ADDR
// if p3 = 36 then
19789: LD_VAR 0 3
19793: PUSH
19794: LD_INT 36
19796: EQUAL
19797: IFFALSE 19807
// sTools := true ;
19799: LD_ADDR_EXP 107
19803: PUSH
19804: LD_INT 1
19806: ST_TO_ADDR
// if p3 = 101 then
19807: LD_VAR 0 3
19811: PUSH
19812: LD_INT 101
19814: EQUAL
19815: IFFALSE 19825
// sSold := true ;
19817: LD_ADDR_EXP 72
19821: PUSH
19822: LD_INT 1
19824: ST_TO_ADDR
// if p3 = 102 then
19825: LD_VAR 0 3
19829: PUSH
19830: LD_INT 102
19832: EQUAL
19833: IFFALSE 19843
// sDiff := true ;
19835: LD_ADDR_EXP 73
19839: PUSH
19840: LD_INT 1
19842: ST_TO_ADDR
// if p3 = 103 then
19843: LD_VAR 0 3
19847: PUSH
19848: LD_INT 103
19850: EQUAL
19851: IFFALSE 19861
// sFog := true ;
19853: LD_ADDR_EXP 76
19857: PUSH
19858: LD_INT 1
19860: ST_TO_ADDR
// if p3 = 104 then
19861: LD_VAR 0 3
19865: PUSH
19866: LD_INT 104
19868: EQUAL
19869: IFFALSE 19879
// sReset := true ;
19871: LD_ADDR_EXP 77
19875: PUSH
19876: LD_INT 1
19878: ST_TO_ADDR
// if p3 = 105 then
19879: LD_VAR 0 3
19883: PUSH
19884: LD_INT 105
19886: EQUAL
19887: IFFALSE 19897
// sSun := true ;
19889: LD_ADDR_EXP 78
19893: PUSH
19894: LD_INT 1
19896: ST_TO_ADDR
// if p3 = 106 then
19897: LD_VAR 0 3
19901: PUSH
19902: LD_INT 106
19904: EQUAL
19905: IFFALSE 19915
// sTiger := true ;
19907: LD_ADDR_EXP 74
19911: PUSH
19912: LD_INT 1
19914: ST_TO_ADDR
// if p3 = 107 then
19915: LD_VAR 0 3
19919: PUSH
19920: LD_INT 107
19922: EQUAL
19923: IFFALSE 19933
// sBomb := true ;
19925: LD_ADDR_EXP 75
19929: PUSH
19930: LD_INT 1
19932: ST_TO_ADDR
// if p3 = 108 then
19933: LD_VAR 0 3
19937: PUSH
19938: LD_INT 108
19940: EQUAL
19941: IFFALSE 19951
// sWound := true ;
19943: LD_ADDR_EXP 83
19947: PUSH
19948: LD_INT 1
19950: ST_TO_ADDR
// if p3 = 109 then
19951: LD_VAR 0 3
19955: PUSH
19956: LD_INT 109
19958: EQUAL
19959: IFFALSE 19969
// sBetray := true ;
19961: LD_ADDR_EXP 87
19965: PUSH
19966: LD_INT 1
19968: ST_TO_ADDR
// if p3 = 110 then
19969: LD_VAR 0 3
19973: PUSH
19974: LD_INT 110
19976: EQUAL
19977: IFFALSE 19987
// sContamin := true ;
19979: LD_ADDR_EXP 88
19983: PUSH
19984: LD_INT 1
19986: ST_TO_ADDR
// if p3 = 111 then
19987: LD_VAR 0 3
19991: PUSH
19992: LD_INT 111
19994: EQUAL
19995: IFFALSE 20005
// sOil := true ;
19997: LD_ADDR_EXP 90
20001: PUSH
20002: LD_INT 1
20004: ST_TO_ADDR
// if p3 = 112 then
20005: LD_VAR 0 3
20009: PUSH
20010: LD_INT 112
20012: EQUAL
20013: IFFALSE 20023
// sStu := true ;
20015: LD_ADDR_EXP 94
20019: PUSH
20020: LD_INT 1
20022: ST_TO_ADDR
// if p3 = 113 then
20023: LD_VAR 0 3
20027: PUSH
20028: LD_INT 113
20030: EQUAL
20031: IFFALSE 20041
// sBazooka := true ;
20033: LD_ADDR_EXP 97
20037: PUSH
20038: LD_INT 1
20040: ST_TO_ADDR
// if p3 = 114 then
20041: LD_VAR 0 3
20045: PUSH
20046: LD_INT 114
20048: EQUAL
20049: IFFALSE 20059
// sMortar := true ;
20051: LD_ADDR_EXP 98
20055: PUSH
20056: LD_INT 1
20058: ST_TO_ADDR
// if p3 = 115 then
20059: LD_VAR 0 3
20063: PUSH
20064: LD_INT 115
20066: EQUAL
20067: IFFALSE 20077
// sRanger := true ;
20069: LD_ADDR_EXP 108
20073: PUSH
20074: LD_INT 1
20076: ST_TO_ADDR
// if p3 = 116 then
20077: LD_VAR 0 3
20081: PUSH
20082: LD_INT 116
20084: EQUAL
20085: IFFALSE 20095
// sComputer := true ;
20087: LD_ADDR_EXP 109
20091: PUSH
20092: LD_INT 1
20094: ST_TO_ADDR
// if p3 = 117 then
20095: LD_VAR 0 3
20099: PUSH
20100: LD_INT 117
20102: EQUAL
20103: IFFALSE 20113
// s30 := true ;
20105: LD_ADDR_EXP 110
20109: PUSH
20110: LD_INT 1
20112: ST_TO_ADDR
// if p3 = 118 then
20113: LD_VAR 0 3
20117: PUSH
20118: LD_INT 118
20120: EQUAL
20121: IFFALSE 20131
// s60 := true ;
20123: LD_ADDR_EXP 111
20127: PUSH
20128: LD_INT 1
20130: ST_TO_ADDR
// end ; if p2 = hack_mode then
20131: LD_VAR 0 2
20135: PUSH
20136: LD_INT 101
20138: EQUAL
20139: IFFALSE 20267
// begin case p3 of 1 :
20141: LD_VAR 0 3
20145: PUSH
20146: LD_INT 1
20148: DOUBLE
20149: EQUAL
20150: IFTRUE 20154
20152: GO 20161
20154: POP
// hHackUnlimitedResources ; 2 :
20155: CALL 32406 0 0
20159: GO 20267
20161: LD_INT 2
20163: DOUBLE
20164: EQUAL
20165: IFTRUE 20169
20167: GO 20176
20169: POP
// hHackSetLevel10 ; 3 :
20170: CALL 32539 0 0
20174: GO 20267
20176: LD_INT 3
20178: DOUBLE
20179: EQUAL
20180: IFTRUE 20184
20182: GO 20191
20184: POP
// hHackSetLevel10YourUnits ; 4 :
20185: CALL 32624 0 0
20189: GO 20267
20191: LD_INT 4
20193: DOUBLE
20194: EQUAL
20195: IFTRUE 20199
20197: GO 20206
20199: POP
// hHackInvincible ; 5 :
20200: CALL 33072 0 0
20204: GO 20267
20206: LD_INT 5
20208: DOUBLE
20209: EQUAL
20210: IFTRUE 20214
20212: GO 20221
20214: POP
// hHackInvisible ; 6 :
20215: CALL 33183 0 0
20219: GO 20267
20221: LD_INT 6
20223: DOUBLE
20224: EQUAL
20225: IFTRUE 20229
20227: GO 20236
20229: POP
// hHackChangeYourSide ; 7 :
20230: CALL 33240 0 0
20234: GO 20267
20236: LD_INT 7
20238: DOUBLE
20239: EQUAL
20240: IFTRUE 20244
20242: GO 20251
20244: POP
// hHackChangeUnitSide ; 8 :
20245: CALL 33282 0 0
20249: GO 20267
20251: LD_INT 8
20253: DOUBLE
20254: EQUAL
20255: IFTRUE 20259
20257: GO 20266
20259: POP
// hHackFog ; end ;
20260: CALL 33383 0 0
20264: GO 20267
20266: POP
// end ; if p2 = game_save_mode then
20267: LD_VAR 0 2
20271: PUSH
20272: LD_INT 102
20274: EQUAL
20275: IFFALSE 20330
// begin if p3 = 1 then
20277: LD_VAR 0 3
20281: PUSH
20282: LD_INT 1
20284: EQUAL
20285: IFFALSE 20297
// globalGameSaveCounter := p4 ;
20287: LD_ADDR_EXP 54
20291: PUSH
20292: LD_VAR 0 4
20296: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20297: LD_VAR 0 3
20301: PUSH
20302: LD_INT 2
20304: EQUAL
20305: PUSH
20306: LD_EXP 54
20310: AND
20311: IFFALSE 20330
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20313: LD_STRING setGameSaveCounter(
20315: PUSH
20316: LD_EXP 54
20320: STR
20321: PUSH
20322: LD_STRING )
20324: STR
20325: PPUSH
20326: CALL_OW 559
// end ; end ;
20330: LD_VAR 0 7
20334: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20335: LD_INT 0
20337: PPUSH
// streamModeActive := false ;
20338: LD_ADDR_EXP 55
20342: PUSH
20343: LD_INT 0
20345: ST_TO_ADDR
// normalCounter := 36 ;
20346: LD_ADDR_EXP 56
20350: PUSH
20351: LD_INT 36
20353: ST_TO_ADDR
// hardcoreCounter := 18 ;
20354: LD_ADDR_EXP 57
20358: PUSH
20359: LD_INT 18
20361: ST_TO_ADDR
// sRocket := false ;
20362: LD_ADDR_EXP 60
20366: PUSH
20367: LD_INT 0
20369: ST_TO_ADDR
// sSpeed := false ;
20370: LD_ADDR_EXP 59
20374: PUSH
20375: LD_INT 0
20377: ST_TO_ADDR
// sEngine := false ;
20378: LD_ADDR_EXP 61
20382: PUSH
20383: LD_INT 0
20385: ST_TO_ADDR
// sSpec := false ;
20386: LD_ADDR_EXP 58
20390: PUSH
20391: LD_INT 0
20393: ST_TO_ADDR
// sLevel := false ;
20394: LD_ADDR_EXP 62
20398: PUSH
20399: LD_INT 0
20401: ST_TO_ADDR
// sArmoury := false ;
20402: LD_ADDR_EXP 63
20406: PUSH
20407: LD_INT 0
20409: ST_TO_ADDR
// sRadar := false ;
20410: LD_ADDR_EXP 64
20414: PUSH
20415: LD_INT 0
20417: ST_TO_ADDR
// sBunker := false ;
20418: LD_ADDR_EXP 65
20422: PUSH
20423: LD_INT 0
20425: ST_TO_ADDR
// sHack := false ;
20426: LD_ADDR_EXP 66
20430: PUSH
20431: LD_INT 0
20433: ST_TO_ADDR
// sFire := false ;
20434: LD_ADDR_EXP 67
20438: PUSH
20439: LD_INT 0
20441: ST_TO_ADDR
// sRefresh := false ;
20442: LD_ADDR_EXP 68
20446: PUSH
20447: LD_INT 0
20449: ST_TO_ADDR
// sExp := false ;
20450: LD_ADDR_EXP 69
20454: PUSH
20455: LD_INT 0
20457: ST_TO_ADDR
// sDepot := false ;
20458: LD_ADDR_EXP 70
20462: PUSH
20463: LD_INT 0
20465: ST_TO_ADDR
// sFlag := false ;
20466: LD_ADDR_EXP 71
20470: PUSH
20471: LD_INT 0
20473: ST_TO_ADDR
// sKamikadze := false ;
20474: LD_ADDR_EXP 79
20478: PUSH
20479: LD_INT 0
20481: ST_TO_ADDR
// sTroll := false ;
20482: LD_ADDR_EXP 80
20486: PUSH
20487: LD_INT 0
20489: ST_TO_ADDR
// sSlow := false ;
20490: LD_ADDR_EXP 81
20494: PUSH
20495: LD_INT 0
20497: ST_TO_ADDR
// sLack := false ;
20498: LD_ADDR_EXP 82
20502: PUSH
20503: LD_INT 0
20505: ST_TO_ADDR
// sTank := false ;
20506: LD_ADDR_EXP 84
20510: PUSH
20511: LD_INT 0
20513: ST_TO_ADDR
// sRemote := false ;
20514: LD_ADDR_EXP 85
20518: PUSH
20519: LD_INT 0
20521: ST_TO_ADDR
// sPowell := false ;
20522: LD_ADDR_EXP 86
20526: PUSH
20527: LD_INT 0
20529: ST_TO_ADDR
// sTeleport := false ;
20530: LD_ADDR_EXP 89
20534: PUSH
20535: LD_INT 0
20537: ST_TO_ADDR
// sOilTower := false ;
20538: LD_ADDR_EXP 91
20542: PUSH
20543: LD_INT 0
20545: ST_TO_ADDR
// sShovel := false ;
20546: LD_ADDR_EXP 92
20550: PUSH
20551: LD_INT 0
20553: ST_TO_ADDR
// sSheik := false ;
20554: LD_ADDR_EXP 93
20558: PUSH
20559: LD_INT 0
20561: ST_TO_ADDR
// sEarthquake := false ;
20562: LD_ADDR_EXP 95
20566: PUSH
20567: LD_INT 0
20569: ST_TO_ADDR
// sAI := false ;
20570: LD_ADDR_EXP 96
20574: PUSH
20575: LD_INT 0
20577: ST_TO_ADDR
// sCargo := false ;
20578: LD_ADDR_EXP 99
20582: PUSH
20583: LD_INT 0
20585: ST_TO_ADDR
// sDLaser := false ;
20586: LD_ADDR_EXP 100
20590: PUSH
20591: LD_INT 0
20593: ST_TO_ADDR
// sExchange := false ;
20594: LD_ADDR_EXP 101
20598: PUSH
20599: LD_INT 0
20601: ST_TO_ADDR
// sFac := false ;
20602: LD_ADDR_EXP 102
20606: PUSH
20607: LD_INT 0
20609: ST_TO_ADDR
// sPower := false ;
20610: LD_ADDR_EXP 103
20614: PUSH
20615: LD_INT 0
20617: ST_TO_ADDR
// sRandom := false ;
20618: LD_ADDR_EXP 104
20622: PUSH
20623: LD_INT 0
20625: ST_TO_ADDR
// sShield := false ;
20626: LD_ADDR_EXP 105
20630: PUSH
20631: LD_INT 0
20633: ST_TO_ADDR
// sTime := false ;
20634: LD_ADDR_EXP 106
20638: PUSH
20639: LD_INT 0
20641: ST_TO_ADDR
// sTools := false ;
20642: LD_ADDR_EXP 107
20646: PUSH
20647: LD_INT 0
20649: ST_TO_ADDR
// sSold := false ;
20650: LD_ADDR_EXP 72
20654: PUSH
20655: LD_INT 0
20657: ST_TO_ADDR
// sDiff := false ;
20658: LD_ADDR_EXP 73
20662: PUSH
20663: LD_INT 0
20665: ST_TO_ADDR
// sFog := false ;
20666: LD_ADDR_EXP 76
20670: PUSH
20671: LD_INT 0
20673: ST_TO_ADDR
// sReset := false ;
20674: LD_ADDR_EXP 77
20678: PUSH
20679: LD_INT 0
20681: ST_TO_ADDR
// sSun := false ;
20682: LD_ADDR_EXP 78
20686: PUSH
20687: LD_INT 0
20689: ST_TO_ADDR
// sTiger := false ;
20690: LD_ADDR_EXP 74
20694: PUSH
20695: LD_INT 0
20697: ST_TO_ADDR
// sBomb := false ;
20698: LD_ADDR_EXP 75
20702: PUSH
20703: LD_INT 0
20705: ST_TO_ADDR
// sWound := false ;
20706: LD_ADDR_EXP 83
20710: PUSH
20711: LD_INT 0
20713: ST_TO_ADDR
// sBetray := false ;
20714: LD_ADDR_EXP 87
20718: PUSH
20719: LD_INT 0
20721: ST_TO_ADDR
// sContamin := false ;
20722: LD_ADDR_EXP 88
20726: PUSH
20727: LD_INT 0
20729: ST_TO_ADDR
// sOil := false ;
20730: LD_ADDR_EXP 90
20734: PUSH
20735: LD_INT 0
20737: ST_TO_ADDR
// sStu := false ;
20738: LD_ADDR_EXP 94
20742: PUSH
20743: LD_INT 0
20745: ST_TO_ADDR
// sBazooka := false ;
20746: LD_ADDR_EXP 97
20750: PUSH
20751: LD_INT 0
20753: ST_TO_ADDR
// sMortar := false ;
20754: LD_ADDR_EXP 98
20758: PUSH
20759: LD_INT 0
20761: ST_TO_ADDR
// sRanger := false ;
20762: LD_ADDR_EXP 108
20766: PUSH
20767: LD_INT 0
20769: ST_TO_ADDR
// sComputer := false ;
20770: LD_ADDR_EXP 109
20774: PUSH
20775: LD_INT 0
20777: ST_TO_ADDR
// s30 := false ;
20778: LD_ADDR_EXP 110
20782: PUSH
20783: LD_INT 0
20785: ST_TO_ADDR
// s60 := false ;
20786: LD_ADDR_EXP 111
20790: PUSH
20791: LD_INT 0
20793: ST_TO_ADDR
// end ;
20794: LD_VAR 0 1
20798: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20799: LD_INT 0
20801: PPUSH
20802: PPUSH
20803: PPUSH
20804: PPUSH
20805: PPUSH
20806: PPUSH
20807: PPUSH
// result := [ ] ;
20808: LD_ADDR_VAR 0 2
20812: PUSH
20813: EMPTY
20814: ST_TO_ADDR
// if campaign_id = 1 then
20815: LD_OWVAR 69
20819: PUSH
20820: LD_INT 1
20822: EQUAL
20823: IFFALSE 23989
// begin case mission_number of 1 :
20825: LD_OWVAR 70
20829: PUSH
20830: LD_INT 1
20832: DOUBLE
20833: EQUAL
20834: IFTRUE 20838
20836: GO 20914
20838: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20839: LD_ADDR_VAR 0 2
20843: PUSH
20844: LD_INT 2
20846: PUSH
20847: LD_INT 4
20849: PUSH
20850: LD_INT 11
20852: PUSH
20853: LD_INT 12
20855: PUSH
20856: LD_INT 15
20858: PUSH
20859: LD_INT 16
20861: PUSH
20862: LD_INT 22
20864: PUSH
20865: LD_INT 23
20867: PUSH
20868: LD_INT 26
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 101
20884: PUSH
20885: LD_INT 102
20887: PUSH
20888: LD_INT 106
20890: PUSH
20891: LD_INT 116
20893: PUSH
20894: LD_INT 117
20896: PUSH
20897: LD_INT 118
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: ST_TO_ADDR
20912: GO 23987
20914: LD_INT 2
20916: DOUBLE
20917: EQUAL
20918: IFTRUE 20922
20920: GO 21006
20922: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20923: LD_ADDR_VAR 0 2
20927: PUSH
20928: LD_INT 2
20930: PUSH
20931: LD_INT 4
20933: PUSH
20934: LD_INT 11
20936: PUSH
20937: LD_INT 12
20939: PUSH
20940: LD_INT 15
20942: PUSH
20943: LD_INT 16
20945: PUSH
20946: LD_INT 22
20948: PUSH
20949: LD_INT 23
20951: PUSH
20952: LD_INT 26
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: PUSH
20966: LD_INT 101
20968: PUSH
20969: LD_INT 102
20971: PUSH
20972: LD_INT 105
20974: PUSH
20975: LD_INT 106
20977: PUSH
20978: LD_INT 108
20980: PUSH
20981: LD_INT 116
20983: PUSH
20984: LD_INT 117
20986: PUSH
20987: LD_INT 118
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: ST_TO_ADDR
21004: GO 23987
21006: LD_INT 3
21008: DOUBLE
21009: EQUAL
21010: IFTRUE 21014
21012: GO 21102
21014: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21015: LD_ADDR_VAR 0 2
21019: PUSH
21020: LD_INT 2
21022: PUSH
21023: LD_INT 4
21025: PUSH
21026: LD_INT 5
21028: PUSH
21029: LD_INT 11
21031: PUSH
21032: LD_INT 12
21034: PUSH
21035: LD_INT 15
21037: PUSH
21038: LD_INT 16
21040: PUSH
21041: LD_INT 22
21043: PUSH
21044: LD_INT 26
21046: PUSH
21047: LD_INT 36
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: PUSH
21062: LD_INT 101
21064: PUSH
21065: LD_INT 102
21067: PUSH
21068: LD_INT 105
21070: PUSH
21071: LD_INT 106
21073: PUSH
21074: LD_INT 108
21076: PUSH
21077: LD_INT 116
21079: PUSH
21080: LD_INT 117
21082: PUSH
21083: LD_INT 118
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: ST_TO_ADDR
21100: GO 23987
21102: LD_INT 4
21104: DOUBLE
21105: EQUAL
21106: IFTRUE 21110
21108: GO 21206
21110: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21111: LD_ADDR_VAR 0 2
21115: PUSH
21116: LD_INT 2
21118: PUSH
21119: LD_INT 4
21121: PUSH
21122: LD_INT 5
21124: PUSH
21125: LD_INT 8
21127: PUSH
21128: LD_INT 11
21130: PUSH
21131: LD_INT 12
21133: PUSH
21134: LD_INT 15
21136: PUSH
21137: LD_INT 16
21139: PUSH
21140: LD_INT 22
21142: PUSH
21143: LD_INT 23
21145: PUSH
21146: LD_INT 26
21148: PUSH
21149: LD_INT 36
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: PUSH
21166: LD_INT 101
21168: PUSH
21169: LD_INT 102
21171: PUSH
21172: LD_INT 105
21174: PUSH
21175: LD_INT 106
21177: PUSH
21178: LD_INT 108
21180: PUSH
21181: LD_INT 116
21183: PUSH
21184: LD_INT 117
21186: PUSH
21187: LD_INT 118
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: ST_TO_ADDR
21204: GO 23987
21206: LD_INT 5
21208: DOUBLE
21209: EQUAL
21210: IFTRUE 21214
21212: GO 21326
21214: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21215: LD_ADDR_VAR 0 2
21219: PUSH
21220: LD_INT 2
21222: PUSH
21223: LD_INT 4
21225: PUSH
21226: LD_INT 5
21228: PUSH
21229: LD_INT 6
21231: PUSH
21232: LD_INT 8
21234: PUSH
21235: LD_INT 11
21237: PUSH
21238: LD_INT 12
21240: PUSH
21241: LD_INT 15
21243: PUSH
21244: LD_INT 16
21246: PUSH
21247: LD_INT 22
21249: PUSH
21250: LD_INT 23
21252: PUSH
21253: LD_INT 25
21255: PUSH
21256: LD_INT 26
21258: PUSH
21259: LD_INT 36
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: PUSH
21278: LD_INT 101
21280: PUSH
21281: LD_INT 102
21283: PUSH
21284: LD_INT 105
21286: PUSH
21287: LD_INT 106
21289: PUSH
21290: LD_INT 108
21292: PUSH
21293: LD_INT 109
21295: PUSH
21296: LD_INT 112
21298: PUSH
21299: LD_INT 116
21301: PUSH
21302: LD_INT 117
21304: PUSH
21305: LD_INT 118
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: ST_TO_ADDR
21324: GO 23987
21326: LD_INT 6
21328: DOUBLE
21329: EQUAL
21330: IFTRUE 21334
21332: GO 21466
21334: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21335: LD_ADDR_VAR 0 2
21339: PUSH
21340: LD_INT 2
21342: PUSH
21343: LD_INT 4
21345: PUSH
21346: LD_INT 5
21348: PUSH
21349: LD_INT 6
21351: PUSH
21352: LD_INT 8
21354: PUSH
21355: LD_INT 11
21357: PUSH
21358: LD_INT 12
21360: PUSH
21361: LD_INT 15
21363: PUSH
21364: LD_INT 16
21366: PUSH
21367: LD_INT 20
21369: PUSH
21370: LD_INT 21
21372: PUSH
21373: LD_INT 22
21375: PUSH
21376: LD_INT 23
21378: PUSH
21379: LD_INT 25
21381: PUSH
21382: LD_INT 26
21384: PUSH
21385: LD_INT 30
21387: PUSH
21388: LD_INT 31
21390: PUSH
21391: LD_INT 32
21393: PUSH
21394: LD_INT 36
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: PUSH
21418: LD_INT 101
21420: PUSH
21421: LD_INT 102
21423: PUSH
21424: LD_INT 105
21426: PUSH
21427: LD_INT 106
21429: PUSH
21430: LD_INT 108
21432: PUSH
21433: LD_INT 109
21435: PUSH
21436: LD_INT 112
21438: PUSH
21439: LD_INT 116
21441: PUSH
21442: LD_INT 117
21444: PUSH
21445: LD_INT 118
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: ST_TO_ADDR
21464: GO 23987
21466: LD_INT 7
21468: DOUBLE
21469: EQUAL
21470: IFTRUE 21474
21472: GO 21586
21474: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21475: LD_ADDR_VAR 0 2
21479: PUSH
21480: LD_INT 2
21482: PUSH
21483: LD_INT 4
21485: PUSH
21486: LD_INT 5
21488: PUSH
21489: LD_INT 7
21491: PUSH
21492: LD_INT 11
21494: PUSH
21495: LD_INT 12
21497: PUSH
21498: LD_INT 15
21500: PUSH
21501: LD_INT 16
21503: PUSH
21504: LD_INT 20
21506: PUSH
21507: LD_INT 21
21509: PUSH
21510: LD_INT 22
21512: PUSH
21513: LD_INT 23
21515: PUSH
21516: LD_INT 25
21518: PUSH
21519: LD_INT 26
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 101
21540: PUSH
21541: LD_INT 102
21543: PUSH
21544: LD_INT 103
21546: PUSH
21547: LD_INT 105
21549: PUSH
21550: LD_INT 106
21552: PUSH
21553: LD_INT 108
21555: PUSH
21556: LD_INT 112
21558: PUSH
21559: LD_INT 116
21561: PUSH
21562: LD_INT 117
21564: PUSH
21565: LD_INT 118
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: ST_TO_ADDR
21584: GO 23987
21586: LD_INT 8
21588: DOUBLE
21589: EQUAL
21590: IFTRUE 21594
21592: GO 21734
21594: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21595: LD_ADDR_VAR 0 2
21599: PUSH
21600: LD_INT 2
21602: PUSH
21603: LD_INT 4
21605: PUSH
21606: LD_INT 5
21608: PUSH
21609: LD_INT 6
21611: PUSH
21612: LD_INT 7
21614: PUSH
21615: LD_INT 8
21617: PUSH
21618: LD_INT 11
21620: PUSH
21621: LD_INT 12
21623: PUSH
21624: LD_INT 15
21626: PUSH
21627: LD_INT 16
21629: PUSH
21630: LD_INT 20
21632: PUSH
21633: LD_INT 21
21635: PUSH
21636: LD_INT 22
21638: PUSH
21639: LD_INT 23
21641: PUSH
21642: LD_INT 25
21644: PUSH
21645: LD_INT 26
21647: PUSH
21648: LD_INT 30
21650: PUSH
21651: LD_INT 31
21653: PUSH
21654: LD_INT 32
21656: PUSH
21657: LD_INT 36
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: PUSH
21682: LD_INT 101
21684: PUSH
21685: LD_INT 102
21687: PUSH
21688: LD_INT 103
21690: PUSH
21691: LD_INT 105
21693: PUSH
21694: LD_INT 106
21696: PUSH
21697: LD_INT 108
21699: PUSH
21700: LD_INT 109
21702: PUSH
21703: LD_INT 112
21705: PUSH
21706: LD_INT 116
21708: PUSH
21709: LD_INT 117
21711: PUSH
21712: LD_INT 118
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: ST_TO_ADDR
21732: GO 23987
21734: LD_INT 9
21736: DOUBLE
21737: EQUAL
21738: IFTRUE 21742
21740: GO 21890
21742: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21743: LD_ADDR_VAR 0 2
21747: PUSH
21748: LD_INT 2
21750: PUSH
21751: LD_INT 4
21753: PUSH
21754: LD_INT 5
21756: PUSH
21757: LD_INT 6
21759: PUSH
21760: LD_INT 7
21762: PUSH
21763: LD_INT 8
21765: PUSH
21766: LD_INT 11
21768: PUSH
21769: LD_INT 12
21771: PUSH
21772: LD_INT 15
21774: PUSH
21775: LD_INT 16
21777: PUSH
21778: LD_INT 20
21780: PUSH
21781: LD_INT 21
21783: PUSH
21784: LD_INT 22
21786: PUSH
21787: LD_INT 23
21789: PUSH
21790: LD_INT 25
21792: PUSH
21793: LD_INT 26
21795: PUSH
21796: LD_INT 28
21798: PUSH
21799: LD_INT 30
21801: PUSH
21802: LD_INT 31
21804: PUSH
21805: LD_INT 32
21807: PUSH
21808: LD_INT 36
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 101
21836: PUSH
21837: LD_INT 102
21839: PUSH
21840: LD_INT 103
21842: PUSH
21843: LD_INT 105
21845: PUSH
21846: LD_INT 106
21848: PUSH
21849: LD_INT 108
21851: PUSH
21852: LD_INT 109
21854: PUSH
21855: LD_INT 112
21857: PUSH
21858: LD_INT 114
21860: PUSH
21861: LD_INT 116
21863: PUSH
21864: LD_INT 117
21866: PUSH
21867: LD_INT 118
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: ST_TO_ADDR
21888: GO 23987
21890: LD_INT 10
21892: DOUBLE
21893: EQUAL
21894: IFTRUE 21898
21896: GO 22094
21898: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21899: LD_ADDR_VAR 0 2
21903: PUSH
21904: LD_INT 2
21906: PUSH
21907: LD_INT 4
21909: PUSH
21910: LD_INT 5
21912: PUSH
21913: LD_INT 6
21915: PUSH
21916: LD_INT 7
21918: PUSH
21919: LD_INT 8
21921: PUSH
21922: LD_INT 9
21924: PUSH
21925: LD_INT 10
21927: PUSH
21928: LD_INT 11
21930: PUSH
21931: LD_INT 12
21933: PUSH
21934: LD_INT 13
21936: PUSH
21937: LD_INT 14
21939: PUSH
21940: LD_INT 15
21942: PUSH
21943: LD_INT 16
21945: PUSH
21946: LD_INT 17
21948: PUSH
21949: LD_INT 18
21951: PUSH
21952: LD_INT 19
21954: PUSH
21955: LD_INT 20
21957: PUSH
21958: LD_INT 21
21960: PUSH
21961: LD_INT 22
21963: PUSH
21964: LD_INT 23
21966: PUSH
21967: LD_INT 24
21969: PUSH
21970: LD_INT 25
21972: PUSH
21973: LD_INT 26
21975: PUSH
21976: LD_INT 28
21978: PUSH
21979: LD_INT 30
21981: PUSH
21982: LD_INT 31
21984: PUSH
21985: LD_INT 32
21987: PUSH
21988: LD_INT 36
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: PUSH
22022: LD_INT 101
22024: PUSH
22025: LD_INT 102
22027: PUSH
22028: LD_INT 103
22030: PUSH
22031: LD_INT 104
22033: PUSH
22034: LD_INT 105
22036: PUSH
22037: LD_INT 106
22039: PUSH
22040: LD_INT 107
22042: PUSH
22043: LD_INT 108
22045: PUSH
22046: LD_INT 109
22048: PUSH
22049: LD_INT 110
22051: PUSH
22052: LD_INT 111
22054: PUSH
22055: LD_INT 112
22057: PUSH
22058: LD_INT 114
22060: PUSH
22061: LD_INT 116
22063: PUSH
22064: LD_INT 117
22066: PUSH
22067: LD_INT 118
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: ST_TO_ADDR
22092: GO 23987
22094: LD_INT 11
22096: DOUBLE
22097: EQUAL
22098: IFTRUE 22102
22100: GO 22306
22102: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22103: LD_ADDR_VAR 0 2
22107: PUSH
22108: LD_INT 2
22110: PUSH
22111: LD_INT 3
22113: PUSH
22114: LD_INT 4
22116: PUSH
22117: LD_INT 5
22119: PUSH
22120: LD_INT 6
22122: PUSH
22123: LD_INT 7
22125: PUSH
22126: LD_INT 8
22128: PUSH
22129: LD_INT 9
22131: PUSH
22132: LD_INT 10
22134: PUSH
22135: LD_INT 11
22137: PUSH
22138: LD_INT 12
22140: PUSH
22141: LD_INT 13
22143: PUSH
22144: LD_INT 14
22146: PUSH
22147: LD_INT 15
22149: PUSH
22150: LD_INT 16
22152: PUSH
22153: LD_INT 17
22155: PUSH
22156: LD_INT 18
22158: PUSH
22159: LD_INT 19
22161: PUSH
22162: LD_INT 20
22164: PUSH
22165: LD_INT 21
22167: PUSH
22168: LD_INT 22
22170: PUSH
22171: LD_INT 23
22173: PUSH
22174: LD_INT 24
22176: PUSH
22177: LD_INT 25
22179: PUSH
22180: LD_INT 26
22182: PUSH
22183: LD_INT 28
22185: PUSH
22186: LD_INT 30
22188: PUSH
22189: LD_INT 31
22191: PUSH
22192: LD_INT 32
22194: PUSH
22195: LD_INT 34
22197: PUSH
22198: LD_INT 36
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 101
22236: PUSH
22237: LD_INT 102
22239: PUSH
22240: LD_INT 103
22242: PUSH
22243: LD_INT 104
22245: PUSH
22246: LD_INT 105
22248: PUSH
22249: LD_INT 106
22251: PUSH
22252: LD_INT 107
22254: PUSH
22255: LD_INT 108
22257: PUSH
22258: LD_INT 109
22260: PUSH
22261: LD_INT 110
22263: PUSH
22264: LD_INT 111
22266: PUSH
22267: LD_INT 112
22269: PUSH
22270: LD_INT 114
22272: PUSH
22273: LD_INT 116
22275: PUSH
22276: LD_INT 117
22278: PUSH
22279: LD_INT 118
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: ST_TO_ADDR
22304: GO 23987
22306: LD_INT 12
22308: DOUBLE
22309: EQUAL
22310: IFTRUE 22314
22312: GO 22534
22314: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22315: LD_ADDR_VAR 0 2
22319: PUSH
22320: LD_INT 1
22322: PUSH
22323: LD_INT 2
22325: PUSH
22326: LD_INT 3
22328: PUSH
22329: LD_INT 4
22331: PUSH
22332: LD_INT 5
22334: PUSH
22335: LD_INT 6
22337: PUSH
22338: LD_INT 7
22340: PUSH
22341: LD_INT 8
22343: PUSH
22344: LD_INT 9
22346: PUSH
22347: LD_INT 10
22349: PUSH
22350: LD_INT 11
22352: PUSH
22353: LD_INT 12
22355: PUSH
22356: LD_INT 13
22358: PUSH
22359: LD_INT 14
22361: PUSH
22362: LD_INT 15
22364: PUSH
22365: LD_INT 16
22367: PUSH
22368: LD_INT 17
22370: PUSH
22371: LD_INT 18
22373: PUSH
22374: LD_INT 19
22376: PUSH
22377: LD_INT 20
22379: PUSH
22380: LD_INT 21
22382: PUSH
22383: LD_INT 22
22385: PUSH
22386: LD_INT 23
22388: PUSH
22389: LD_INT 24
22391: PUSH
22392: LD_INT 25
22394: PUSH
22395: LD_INT 26
22397: PUSH
22398: LD_INT 27
22400: PUSH
22401: LD_INT 28
22403: PUSH
22404: LD_INT 30
22406: PUSH
22407: LD_INT 31
22409: PUSH
22410: LD_INT 32
22412: PUSH
22413: LD_INT 33
22415: PUSH
22416: LD_INT 34
22418: PUSH
22419: LD_INT 36
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: PUSH
22458: LD_INT 101
22460: PUSH
22461: LD_INT 102
22463: PUSH
22464: LD_INT 103
22466: PUSH
22467: LD_INT 104
22469: PUSH
22470: LD_INT 105
22472: PUSH
22473: LD_INT 106
22475: PUSH
22476: LD_INT 107
22478: PUSH
22479: LD_INT 108
22481: PUSH
22482: LD_INT 109
22484: PUSH
22485: LD_INT 110
22487: PUSH
22488: LD_INT 111
22490: PUSH
22491: LD_INT 112
22493: PUSH
22494: LD_INT 113
22496: PUSH
22497: LD_INT 114
22499: PUSH
22500: LD_INT 116
22502: PUSH
22503: LD_INT 117
22505: PUSH
22506: LD_INT 118
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: ST_TO_ADDR
22532: GO 23987
22534: LD_INT 13
22536: DOUBLE
22537: EQUAL
22538: IFTRUE 22542
22540: GO 22750
22542: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22543: LD_ADDR_VAR 0 2
22547: PUSH
22548: LD_INT 1
22550: PUSH
22551: LD_INT 2
22553: PUSH
22554: LD_INT 3
22556: PUSH
22557: LD_INT 4
22559: PUSH
22560: LD_INT 5
22562: PUSH
22563: LD_INT 8
22565: PUSH
22566: LD_INT 9
22568: PUSH
22569: LD_INT 10
22571: PUSH
22572: LD_INT 11
22574: PUSH
22575: LD_INT 12
22577: PUSH
22578: LD_INT 14
22580: PUSH
22581: LD_INT 15
22583: PUSH
22584: LD_INT 16
22586: PUSH
22587: LD_INT 17
22589: PUSH
22590: LD_INT 18
22592: PUSH
22593: LD_INT 19
22595: PUSH
22596: LD_INT 20
22598: PUSH
22599: LD_INT 21
22601: PUSH
22602: LD_INT 22
22604: PUSH
22605: LD_INT 23
22607: PUSH
22608: LD_INT 24
22610: PUSH
22611: LD_INT 25
22613: PUSH
22614: LD_INT 26
22616: PUSH
22617: LD_INT 27
22619: PUSH
22620: LD_INT 28
22622: PUSH
22623: LD_INT 30
22625: PUSH
22626: LD_INT 31
22628: PUSH
22629: LD_INT 32
22631: PUSH
22632: LD_INT 33
22634: PUSH
22635: LD_INT 34
22637: PUSH
22638: LD_INT 36
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: PUSH
22674: LD_INT 101
22676: PUSH
22677: LD_INT 102
22679: PUSH
22680: LD_INT 103
22682: PUSH
22683: LD_INT 104
22685: PUSH
22686: LD_INT 105
22688: PUSH
22689: LD_INT 106
22691: PUSH
22692: LD_INT 107
22694: PUSH
22695: LD_INT 108
22697: PUSH
22698: LD_INT 109
22700: PUSH
22701: LD_INT 110
22703: PUSH
22704: LD_INT 111
22706: PUSH
22707: LD_INT 112
22709: PUSH
22710: LD_INT 113
22712: PUSH
22713: LD_INT 114
22715: PUSH
22716: LD_INT 116
22718: PUSH
22719: LD_INT 117
22721: PUSH
22722: LD_INT 118
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: ST_TO_ADDR
22748: GO 23987
22750: LD_INT 14
22752: DOUBLE
22753: EQUAL
22754: IFTRUE 22758
22756: GO 22982
22758: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22759: LD_ADDR_VAR 0 2
22763: PUSH
22764: LD_INT 1
22766: PUSH
22767: LD_INT 2
22769: PUSH
22770: LD_INT 3
22772: PUSH
22773: LD_INT 4
22775: PUSH
22776: LD_INT 5
22778: PUSH
22779: LD_INT 6
22781: PUSH
22782: LD_INT 7
22784: PUSH
22785: LD_INT 8
22787: PUSH
22788: LD_INT 9
22790: PUSH
22791: LD_INT 10
22793: PUSH
22794: LD_INT 11
22796: PUSH
22797: LD_INT 12
22799: PUSH
22800: LD_INT 13
22802: PUSH
22803: LD_INT 14
22805: PUSH
22806: LD_INT 15
22808: PUSH
22809: LD_INT 16
22811: PUSH
22812: LD_INT 17
22814: PUSH
22815: LD_INT 18
22817: PUSH
22818: LD_INT 19
22820: PUSH
22821: LD_INT 20
22823: PUSH
22824: LD_INT 21
22826: PUSH
22827: LD_INT 22
22829: PUSH
22830: LD_INT 23
22832: PUSH
22833: LD_INT 24
22835: PUSH
22836: LD_INT 25
22838: PUSH
22839: LD_INT 26
22841: PUSH
22842: LD_INT 27
22844: PUSH
22845: LD_INT 28
22847: PUSH
22848: LD_INT 29
22850: PUSH
22851: LD_INT 30
22853: PUSH
22854: LD_INT 31
22856: PUSH
22857: LD_INT 32
22859: PUSH
22860: LD_INT 33
22862: PUSH
22863: LD_INT 34
22865: PUSH
22866: LD_INT 36
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: PUSH
22906: LD_INT 101
22908: PUSH
22909: LD_INT 102
22911: PUSH
22912: LD_INT 103
22914: PUSH
22915: LD_INT 104
22917: PUSH
22918: LD_INT 105
22920: PUSH
22921: LD_INT 106
22923: PUSH
22924: LD_INT 107
22926: PUSH
22927: LD_INT 108
22929: PUSH
22930: LD_INT 109
22932: PUSH
22933: LD_INT 110
22935: PUSH
22936: LD_INT 111
22938: PUSH
22939: LD_INT 112
22941: PUSH
22942: LD_INT 113
22944: PUSH
22945: LD_INT 114
22947: PUSH
22948: LD_INT 116
22950: PUSH
22951: LD_INT 117
22953: PUSH
22954: LD_INT 118
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: ST_TO_ADDR
22980: GO 23987
22982: LD_INT 15
22984: DOUBLE
22985: EQUAL
22986: IFTRUE 22990
22988: GO 23214
22990: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22991: LD_ADDR_VAR 0 2
22995: PUSH
22996: LD_INT 1
22998: PUSH
22999: LD_INT 2
23001: PUSH
23002: LD_INT 3
23004: PUSH
23005: LD_INT 4
23007: PUSH
23008: LD_INT 5
23010: PUSH
23011: LD_INT 6
23013: PUSH
23014: LD_INT 7
23016: PUSH
23017: LD_INT 8
23019: PUSH
23020: LD_INT 9
23022: PUSH
23023: LD_INT 10
23025: PUSH
23026: LD_INT 11
23028: PUSH
23029: LD_INT 12
23031: PUSH
23032: LD_INT 13
23034: PUSH
23035: LD_INT 14
23037: PUSH
23038: LD_INT 15
23040: PUSH
23041: LD_INT 16
23043: PUSH
23044: LD_INT 17
23046: PUSH
23047: LD_INT 18
23049: PUSH
23050: LD_INT 19
23052: PUSH
23053: LD_INT 20
23055: PUSH
23056: LD_INT 21
23058: PUSH
23059: LD_INT 22
23061: PUSH
23062: LD_INT 23
23064: PUSH
23065: LD_INT 24
23067: PUSH
23068: LD_INT 25
23070: PUSH
23071: LD_INT 26
23073: PUSH
23074: LD_INT 27
23076: PUSH
23077: LD_INT 28
23079: PUSH
23080: LD_INT 29
23082: PUSH
23083: LD_INT 30
23085: PUSH
23086: LD_INT 31
23088: PUSH
23089: LD_INT 32
23091: PUSH
23092: LD_INT 33
23094: PUSH
23095: LD_INT 34
23097: PUSH
23098: LD_INT 36
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: PUSH
23138: LD_INT 101
23140: PUSH
23141: LD_INT 102
23143: PUSH
23144: LD_INT 103
23146: PUSH
23147: LD_INT 104
23149: PUSH
23150: LD_INT 105
23152: PUSH
23153: LD_INT 106
23155: PUSH
23156: LD_INT 107
23158: PUSH
23159: LD_INT 108
23161: PUSH
23162: LD_INT 109
23164: PUSH
23165: LD_INT 110
23167: PUSH
23168: LD_INT 111
23170: PUSH
23171: LD_INT 112
23173: PUSH
23174: LD_INT 113
23176: PUSH
23177: LD_INT 114
23179: PUSH
23180: LD_INT 116
23182: PUSH
23183: LD_INT 117
23185: PUSH
23186: LD_INT 118
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: ST_TO_ADDR
23212: GO 23987
23214: LD_INT 16
23216: DOUBLE
23217: EQUAL
23218: IFTRUE 23222
23220: GO 23358
23222: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23223: LD_ADDR_VAR 0 2
23227: PUSH
23228: LD_INT 2
23230: PUSH
23231: LD_INT 4
23233: PUSH
23234: LD_INT 5
23236: PUSH
23237: LD_INT 7
23239: PUSH
23240: LD_INT 11
23242: PUSH
23243: LD_INT 12
23245: PUSH
23246: LD_INT 15
23248: PUSH
23249: LD_INT 16
23251: PUSH
23252: LD_INT 20
23254: PUSH
23255: LD_INT 21
23257: PUSH
23258: LD_INT 22
23260: PUSH
23261: LD_INT 23
23263: PUSH
23264: LD_INT 25
23266: PUSH
23267: LD_INT 26
23269: PUSH
23270: LD_INT 30
23272: PUSH
23273: LD_INT 31
23275: PUSH
23276: LD_INT 32
23278: PUSH
23279: LD_INT 33
23281: PUSH
23282: LD_INT 34
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: PUSH
23306: LD_INT 101
23308: PUSH
23309: LD_INT 102
23311: PUSH
23312: LD_INT 103
23314: PUSH
23315: LD_INT 106
23317: PUSH
23318: LD_INT 108
23320: PUSH
23321: LD_INT 112
23323: PUSH
23324: LD_INT 113
23326: PUSH
23327: LD_INT 114
23329: PUSH
23330: LD_INT 116
23332: PUSH
23333: LD_INT 117
23335: PUSH
23336: LD_INT 118
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: ST_TO_ADDR
23356: GO 23987
23358: LD_INT 17
23360: DOUBLE
23361: EQUAL
23362: IFTRUE 23366
23364: GO 23590
23366: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23367: LD_ADDR_VAR 0 2
23371: PUSH
23372: LD_INT 1
23374: PUSH
23375: LD_INT 2
23377: PUSH
23378: LD_INT 3
23380: PUSH
23381: LD_INT 4
23383: PUSH
23384: LD_INT 5
23386: PUSH
23387: LD_INT 6
23389: PUSH
23390: LD_INT 7
23392: PUSH
23393: LD_INT 8
23395: PUSH
23396: LD_INT 9
23398: PUSH
23399: LD_INT 10
23401: PUSH
23402: LD_INT 11
23404: PUSH
23405: LD_INT 12
23407: PUSH
23408: LD_INT 13
23410: PUSH
23411: LD_INT 14
23413: PUSH
23414: LD_INT 15
23416: PUSH
23417: LD_INT 16
23419: PUSH
23420: LD_INT 17
23422: PUSH
23423: LD_INT 18
23425: PUSH
23426: LD_INT 19
23428: PUSH
23429: LD_INT 20
23431: PUSH
23432: LD_INT 21
23434: PUSH
23435: LD_INT 22
23437: PUSH
23438: LD_INT 23
23440: PUSH
23441: LD_INT 24
23443: PUSH
23444: LD_INT 25
23446: PUSH
23447: LD_INT 26
23449: PUSH
23450: LD_INT 27
23452: PUSH
23453: LD_INT 28
23455: PUSH
23456: LD_INT 29
23458: PUSH
23459: LD_INT 30
23461: PUSH
23462: LD_INT 31
23464: PUSH
23465: LD_INT 32
23467: PUSH
23468: LD_INT 33
23470: PUSH
23471: LD_INT 34
23473: PUSH
23474: LD_INT 36
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 101
23516: PUSH
23517: LD_INT 102
23519: PUSH
23520: LD_INT 103
23522: PUSH
23523: LD_INT 104
23525: PUSH
23526: LD_INT 105
23528: PUSH
23529: LD_INT 106
23531: PUSH
23532: LD_INT 107
23534: PUSH
23535: LD_INT 108
23537: PUSH
23538: LD_INT 109
23540: PUSH
23541: LD_INT 110
23543: PUSH
23544: LD_INT 111
23546: PUSH
23547: LD_INT 112
23549: PUSH
23550: LD_INT 113
23552: PUSH
23553: LD_INT 114
23555: PUSH
23556: LD_INT 116
23558: PUSH
23559: LD_INT 117
23561: PUSH
23562: LD_INT 118
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: ST_TO_ADDR
23588: GO 23987
23590: LD_INT 18
23592: DOUBLE
23593: EQUAL
23594: IFTRUE 23598
23596: GO 23746
23598: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23599: LD_ADDR_VAR 0 2
23603: PUSH
23604: LD_INT 2
23606: PUSH
23607: LD_INT 4
23609: PUSH
23610: LD_INT 5
23612: PUSH
23613: LD_INT 7
23615: PUSH
23616: LD_INT 11
23618: PUSH
23619: LD_INT 12
23621: PUSH
23622: LD_INT 15
23624: PUSH
23625: LD_INT 16
23627: PUSH
23628: LD_INT 20
23630: PUSH
23631: LD_INT 21
23633: PUSH
23634: LD_INT 22
23636: PUSH
23637: LD_INT 23
23639: PUSH
23640: LD_INT 25
23642: PUSH
23643: LD_INT 26
23645: PUSH
23646: LD_INT 30
23648: PUSH
23649: LD_INT 31
23651: PUSH
23652: LD_INT 32
23654: PUSH
23655: LD_INT 33
23657: PUSH
23658: LD_INT 34
23660: PUSH
23661: LD_INT 35
23663: PUSH
23664: LD_INT 36
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 101
23692: PUSH
23693: LD_INT 102
23695: PUSH
23696: LD_INT 103
23698: PUSH
23699: LD_INT 106
23701: PUSH
23702: LD_INT 108
23704: PUSH
23705: LD_INT 112
23707: PUSH
23708: LD_INT 113
23710: PUSH
23711: LD_INT 114
23713: PUSH
23714: LD_INT 115
23716: PUSH
23717: LD_INT 116
23719: PUSH
23720: LD_INT 117
23722: PUSH
23723: LD_INT 118
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: ST_TO_ADDR
23744: GO 23987
23746: LD_INT 19
23748: DOUBLE
23749: EQUAL
23750: IFTRUE 23754
23752: GO 23986
23754: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23755: LD_ADDR_VAR 0 2
23759: PUSH
23760: LD_INT 1
23762: PUSH
23763: LD_INT 2
23765: PUSH
23766: LD_INT 3
23768: PUSH
23769: LD_INT 4
23771: PUSH
23772: LD_INT 5
23774: PUSH
23775: LD_INT 6
23777: PUSH
23778: LD_INT 7
23780: PUSH
23781: LD_INT 8
23783: PUSH
23784: LD_INT 9
23786: PUSH
23787: LD_INT 10
23789: PUSH
23790: LD_INT 11
23792: PUSH
23793: LD_INT 12
23795: PUSH
23796: LD_INT 13
23798: PUSH
23799: LD_INT 14
23801: PUSH
23802: LD_INT 15
23804: PUSH
23805: LD_INT 16
23807: PUSH
23808: LD_INT 17
23810: PUSH
23811: LD_INT 18
23813: PUSH
23814: LD_INT 19
23816: PUSH
23817: LD_INT 20
23819: PUSH
23820: LD_INT 21
23822: PUSH
23823: LD_INT 22
23825: PUSH
23826: LD_INT 23
23828: PUSH
23829: LD_INT 24
23831: PUSH
23832: LD_INT 25
23834: PUSH
23835: LD_INT 26
23837: PUSH
23838: LD_INT 27
23840: PUSH
23841: LD_INT 28
23843: PUSH
23844: LD_INT 29
23846: PUSH
23847: LD_INT 30
23849: PUSH
23850: LD_INT 31
23852: PUSH
23853: LD_INT 32
23855: PUSH
23856: LD_INT 33
23858: PUSH
23859: LD_INT 34
23861: PUSH
23862: LD_INT 35
23864: PUSH
23865: LD_INT 36
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 101
23908: PUSH
23909: LD_INT 102
23911: PUSH
23912: LD_INT 103
23914: PUSH
23915: LD_INT 104
23917: PUSH
23918: LD_INT 105
23920: PUSH
23921: LD_INT 106
23923: PUSH
23924: LD_INT 107
23926: PUSH
23927: LD_INT 108
23929: PUSH
23930: LD_INT 109
23932: PUSH
23933: LD_INT 110
23935: PUSH
23936: LD_INT 111
23938: PUSH
23939: LD_INT 112
23941: PUSH
23942: LD_INT 113
23944: PUSH
23945: LD_INT 114
23947: PUSH
23948: LD_INT 115
23950: PUSH
23951: LD_INT 116
23953: PUSH
23954: LD_INT 117
23956: PUSH
23957: LD_INT 118
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: ST_TO_ADDR
23984: GO 23987
23986: POP
// end else
23987: GO 24218
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23989: LD_ADDR_VAR 0 2
23993: PUSH
23994: LD_INT 1
23996: PUSH
23997: LD_INT 2
23999: PUSH
24000: LD_INT 3
24002: PUSH
24003: LD_INT 4
24005: PUSH
24006: LD_INT 5
24008: PUSH
24009: LD_INT 6
24011: PUSH
24012: LD_INT 7
24014: PUSH
24015: LD_INT 8
24017: PUSH
24018: LD_INT 9
24020: PUSH
24021: LD_INT 10
24023: PUSH
24024: LD_INT 11
24026: PUSH
24027: LD_INT 12
24029: PUSH
24030: LD_INT 13
24032: PUSH
24033: LD_INT 14
24035: PUSH
24036: LD_INT 15
24038: PUSH
24039: LD_INT 16
24041: PUSH
24042: LD_INT 17
24044: PUSH
24045: LD_INT 18
24047: PUSH
24048: LD_INT 19
24050: PUSH
24051: LD_INT 20
24053: PUSH
24054: LD_INT 21
24056: PUSH
24057: LD_INT 22
24059: PUSH
24060: LD_INT 23
24062: PUSH
24063: LD_INT 24
24065: PUSH
24066: LD_INT 25
24068: PUSH
24069: LD_INT 26
24071: PUSH
24072: LD_INT 27
24074: PUSH
24075: LD_INT 28
24077: PUSH
24078: LD_INT 29
24080: PUSH
24081: LD_INT 30
24083: PUSH
24084: LD_INT 31
24086: PUSH
24087: LD_INT 32
24089: PUSH
24090: LD_INT 33
24092: PUSH
24093: LD_INT 34
24095: PUSH
24096: LD_INT 35
24098: PUSH
24099: LD_INT 36
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: PUSH
24140: LD_INT 101
24142: PUSH
24143: LD_INT 102
24145: PUSH
24146: LD_INT 103
24148: PUSH
24149: LD_INT 104
24151: PUSH
24152: LD_INT 105
24154: PUSH
24155: LD_INT 106
24157: PUSH
24158: LD_INT 107
24160: PUSH
24161: LD_INT 108
24163: PUSH
24164: LD_INT 109
24166: PUSH
24167: LD_INT 110
24169: PUSH
24170: LD_INT 111
24172: PUSH
24173: LD_INT 112
24175: PUSH
24176: LD_INT 113
24178: PUSH
24179: LD_INT 114
24181: PUSH
24182: LD_INT 115
24184: PUSH
24185: LD_INT 116
24187: PUSH
24188: LD_INT 117
24190: PUSH
24191: LD_INT 118
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: ST_TO_ADDR
// if result then
24218: LD_VAR 0 2
24222: IFFALSE 25008
// begin normal :=  ;
24224: LD_ADDR_VAR 0 5
24228: PUSH
24229: LD_STRING 
24231: ST_TO_ADDR
// hardcore :=  ;
24232: LD_ADDR_VAR 0 6
24236: PUSH
24237: LD_STRING 
24239: ST_TO_ADDR
// active :=  ;
24240: LD_ADDR_VAR 0 7
24244: PUSH
24245: LD_STRING 
24247: ST_TO_ADDR
// for i = 1 to normalCounter do
24248: LD_ADDR_VAR 0 8
24252: PUSH
24253: DOUBLE
24254: LD_INT 1
24256: DEC
24257: ST_TO_ADDR
24258: LD_EXP 56
24262: PUSH
24263: FOR_TO
24264: IFFALSE 24365
// begin tmp := 0 ;
24266: LD_ADDR_VAR 0 3
24270: PUSH
24271: LD_STRING 0
24273: ST_TO_ADDR
// if result [ 1 ] then
24274: LD_VAR 0 2
24278: PUSH
24279: LD_INT 1
24281: ARRAY
24282: IFFALSE 24347
// if result [ 1 ] [ 1 ] = i then
24284: LD_VAR 0 2
24288: PUSH
24289: LD_INT 1
24291: ARRAY
24292: PUSH
24293: LD_INT 1
24295: ARRAY
24296: PUSH
24297: LD_VAR 0 8
24301: EQUAL
24302: IFFALSE 24347
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24304: LD_ADDR_VAR 0 2
24308: PUSH
24309: LD_VAR 0 2
24313: PPUSH
24314: LD_INT 1
24316: PPUSH
24317: LD_VAR 0 2
24321: PUSH
24322: LD_INT 1
24324: ARRAY
24325: PPUSH
24326: LD_INT 1
24328: PPUSH
24329: CALL_OW 3
24333: PPUSH
24334: CALL_OW 1
24338: ST_TO_ADDR
// tmp := 1 ;
24339: LD_ADDR_VAR 0 3
24343: PUSH
24344: LD_STRING 1
24346: ST_TO_ADDR
// end ; normal := normal & tmp ;
24347: LD_ADDR_VAR 0 5
24351: PUSH
24352: LD_VAR 0 5
24356: PUSH
24357: LD_VAR 0 3
24361: STR
24362: ST_TO_ADDR
// end ;
24363: GO 24263
24365: POP
24366: POP
// for i = 1 to hardcoreCounter do
24367: LD_ADDR_VAR 0 8
24371: PUSH
24372: DOUBLE
24373: LD_INT 1
24375: DEC
24376: ST_TO_ADDR
24377: LD_EXP 57
24381: PUSH
24382: FOR_TO
24383: IFFALSE 24488
// begin tmp := 0 ;
24385: LD_ADDR_VAR 0 3
24389: PUSH
24390: LD_STRING 0
24392: ST_TO_ADDR
// if result [ 2 ] then
24393: LD_VAR 0 2
24397: PUSH
24398: LD_INT 2
24400: ARRAY
24401: IFFALSE 24470
// if result [ 2 ] [ 1 ] = 100 + i then
24403: LD_VAR 0 2
24407: PUSH
24408: LD_INT 2
24410: ARRAY
24411: PUSH
24412: LD_INT 1
24414: ARRAY
24415: PUSH
24416: LD_INT 100
24418: PUSH
24419: LD_VAR 0 8
24423: PLUS
24424: EQUAL
24425: IFFALSE 24470
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24427: LD_ADDR_VAR 0 2
24431: PUSH
24432: LD_VAR 0 2
24436: PPUSH
24437: LD_INT 2
24439: PPUSH
24440: LD_VAR 0 2
24444: PUSH
24445: LD_INT 2
24447: ARRAY
24448: PPUSH
24449: LD_INT 1
24451: PPUSH
24452: CALL_OW 3
24456: PPUSH
24457: CALL_OW 1
24461: ST_TO_ADDR
// tmp := 1 ;
24462: LD_ADDR_VAR 0 3
24466: PUSH
24467: LD_STRING 1
24469: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24470: LD_ADDR_VAR 0 6
24474: PUSH
24475: LD_VAR 0 6
24479: PUSH
24480: LD_VAR 0 3
24484: STR
24485: ST_TO_ADDR
// end ;
24486: GO 24382
24488: POP
24489: POP
// if isGameLoad then
24490: LD_VAR 0 1
24494: IFFALSE 24969
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24496: LD_ADDR_VAR 0 4
24500: PUSH
24501: LD_EXP 60
24505: PUSH
24506: LD_EXP 59
24510: PUSH
24511: LD_EXP 61
24515: PUSH
24516: LD_EXP 58
24520: PUSH
24521: LD_EXP 62
24525: PUSH
24526: LD_EXP 63
24530: PUSH
24531: LD_EXP 64
24535: PUSH
24536: LD_EXP 65
24540: PUSH
24541: LD_EXP 66
24545: PUSH
24546: LD_EXP 67
24550: PUSH
24551: LD_EXP 68
24555: PUSH
24556: LD_EXP 69
24560: PUSH
24561: LD_EXP 70
24565: PUSH
24566: LD_EXP 71
24570: PUSH
24571: LD_EXP 79
24575: PUSH
24576: LD_EXP 80
24580: PUSH
24581: LD_EXP 81
24585: PUSH
24586: LD_EXP 82
24590: PUSH
24591: LD_EXP 84
24595: PUSH
24596: LD_EXP 85
24600: PUSH
24601: LD_EXP 86
24605: PUSH
24606: LD_EXP 89
24610: PUSH
24611: LD_EXP 91
24615: PUSH
24616: LD_EXP 92
24620: PUSH
24621: LD_EXP 93
24625: PUSH
24626: LD_EXP 95
24630: PUSH
24631: LD_EXP 96
24635: PUSH
24636: LD_EXP 99
24640: PUSH
24641: LD_EXP 100
24645: PUSH
24646: LD_EXP 101
24650: PUSH
24651: LD_EXP 102
24655: PUSH
24656: LD_EXP 103
24660: PUSH
24661: LD_EXP 104
24665: PUSH
24666: LD_EXP 105
24670: PUSH
24671: LD_EXP 106
24675: PUSH
24676: LD_EXP 107
24680: PUSH
24681: LD_EXP 72
24685: PUSH
24686: LD_EXP 73
24690: PUSH
24691: LD_EXP 76
24695: PUSH
24696: LD_EXP 77
24700: PUSH
24701: LD_EXP 78
24705: PUSH
24706: LD_EXP 74
24710: PUSH
24711: LD_EXP 75
24715: PUSH
24716: LD_EXP 83
24720: PUSH
24721: LD_EXP 87
24725: PUSH
24726: LD_EXP 88
24730: PUSH
24731: LD_EXP 90
24735: PUSH
24736: LD_EXP 94
24740: PUSH
24741: LD_EXP 97
24745: PUSH
24746: LD_EXP 98
24750: PUSH
24751: LD_EXP 108
24755: PUSH
24756: LD_EXP 109
24760: PUSH
24761: LD_EXP 110
24765: PUSH
24766: LD_EXP 111
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: ST_TO_ADDR
// tmp :=  ;
24827: LD_ADDR_VAR 0 3
24831: PUSH
24832: LD_STRING 
24834: ST_TO_ADDR
// for i = 1 to normalCounter do
24835: LD_ADDR_VAR 0 8
24839: PUSH
24840: DOUBLE
24841: LD_INT 1
24843: DEC
24844: ST_TO_ADDR
24845: LD_EXP 56
24849: PUSH
24850: FOR_TO
24851: IFFALSE 24887
// begin if flags [ i ] then
24853: LD_VAR 0 4
24857: PUSH
24858: LD_VAR 0 8
24862: ARRAY
24863: IFFALSE 24885
// tmp := tmp & i & ; ;
24865: LD_ADDR_VAR 0 3
24869: PUSH
24870: LD_VAR 0 3
24874: PUSH
24875: LD_VAR 0 8
24879: STR
24880: PUSH
24881: LD_STRING ;
24883: STR
24884: ST_TO_ADDR
// end ;
24885: GO 24850
24887: POP
24888: POP
// for i = 1 to hardcoreCounter do
24889: LD_ADDR_VAR 0 8
24893: PUSH
24894: DOUBLE
24895: LD_INT 1
24897: DEC
24898: ST_TO_ADDR
24899: LD_EXP 57
24903: PUSH
24904: FOR_TO
24905: IFFALSE 24951
// begin if flags [ normalCounter + i ] then
24907: LD_VAR 0 4
24911: PUSH
24912: LD_EXP 56
24916: PUSH
24917: LD_VAR 0 8
24921: PLUS
24922: ARRAY
24923: IFFALSE 24949
// tmp := tmp & ( 100 + i ) & ; ;
24925: LD_ADDR_VAR 0 3
24929: PUSH
24930: LD_VAR 0 3
24934: PUSH
24935: LD_INT 100
24937: PUSH
24938: LD_VAR 0 8
24942: PLUS
24943: STR
24944: PUSH
24945: LD_STRING ;
24947: STR
24948: ST_TO_ADDR
// end ;
24949: GO 24904
24951: POP
24952: POP
// if tmp then
24953: LD_VAR 0 3
24957: IFFALSE 24969
// active := tmp ;
24959: LD_ADDR_VAR 0 7
24963: PUSH
24964: LD_VAR 0 3
24968: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24969: LD_STRING getStreamItemsFromMission("
24971: PUSH
24972: LD_VAR 0 5
24976: STR
24977: PUSH
24978: LD_STRING ","
24980: STR
24981: PUSH
24982: LD_VAR 0 6
24986: STR
24987: PUSH
24988: LD_STRING ","
24990: STR
24991: PUSH
24992: LD_VAR 0 7
24996: STR
24997: PUSH
24998: LD_STRING ")
25000: STR
25001: PPUSH
25002: CALL_OW 559
// end else
25006: GO 25015
// ToLua ( getStreamItemsFromMission("","","") ) ;
25008: LD_STRING getStreamItemsFromMission("","","")
25010: PPUSH
25011: CALL_OW 559
// end ;
25015: LD_VAR 0 2
25019: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25020: LD_EXP 55
25024: PUSH
25025: LD_EXP 60
25029: AND
25030: IFFALSE 25154
25032: GO 25034
25034: DISABLE
25035: LD_INT 0
25037: PPUSH
25038: PPUSH
// begin enable ;
25039: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25040: LD_ADDR_VAR 0 2
25044: PUSH
25045: LD_INT 22
25047: PUSH
25048: LD_OWVAR 2
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 2
25059: PUSH
25060: LD_INT 34
25062: PUSH
25063: LD_INT 7
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: PUSH
25070: LD_INT 34
25072: PUSH
25073: LD_INT 45
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 34
25082: PUSH
25083: LD_INT 28
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 34
25092: PUSH
25093: LD_INT 47
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PPUSH
25111: CALL_OW 69
25115: ST_TO_ADDR
// if not tmp then
25116: LD_VAR 0 2
25120: NOT
25121: IFFALSE 25125
// exit ;
25123: GO 25154
// for i in tmp do
25125: LD_ADDR_VAR 0 1
25129: PUSH
25130: LD_VAR 0 2
25134: PUSH
25135: FOR_IN
25136: IFFALSE 25152
// begin SetLives ( i , 0 ) ;
25138: LD_VAR 0 1
25142: PPUSH
25143: LD_INT 0
25145: PPUSH
25146: CALL_OW 234
// end ;
25150: GO 25135
25152: POP
25153: POP
// end ;
25154: PPOPN 2
25156: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25157: LD_EXP 55
25161: PUSH
25162: LD_EXP 61
25166: AND
25167: IFFALSE 25251
25169: GO 25171
25171: DISABLE
25172: LD_INT 0
25174: PPUSH
25175: PPUSH
// begin enable ;
25176: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25177: LD_ADDR_VAR 0 2
25181: PUSH
25182: LD_INT 22
25184: PUSH
25185: LD_OWVAR 2
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 32
25196: PUSH
25197: LD_INT 3
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PPUSH
25208: CALL_OW 69
25212: ST_TO_ADDR
// if not tmp then
25213: LD_VAR 0 2
25217: NOT
25218: IFFALSE 25222
// exit ;
25220: GO 25251
// for i in tmp do
25222: LD_ADDR_VAR 0 1
25226: PUSH
25227: LD_VAR 0 2
25231: PUSH
25232: FOR_IN
25233: IFFALSE 25249
// begin SetLives ( i , 0 ) ;
25235: LD_VAR 0 1
25239: PPUSH
25240: LD_INT 0
25242: PPUSH
25243: CALL_OW 234
// end ;
25247: GO 25232
25249: POP
25250: POP
// end ;
25251: PPOPN 2
25253: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25254: LD_EXP 55
25258: PUSH
25259: LD_EXP 58
25263: AND
25264: IFFALSE 25357
25266: GO 25268
25268: DISABLE
25269: LD_INT 0
25271: PPUSH
// begin enable ;
25272: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25273: LD_ADDR_VAR 0 1
25277: PUSH
25278: LD_INT 22
25280: PUSH
25281: LD_OWVAR 2
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 2
25292: PUSH
25293: LD_INT 25
25295: PUSH
25296: LD_INT 5
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 25
25305: PUSH
25306: LD_INT 9
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 25
25315: PUSH
25316: LD_INT 8
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PPUSH
25333: CALL_OW 69
25337: PUSH
25338: FOR_IN
25339: IFFALSE 25355
// begin SetClass ( i , 1 ) ;
25341: LD_VAR 0 1
25345: PPUSH
25346: LD_INT 1
25348: PPUSH
25349: CALL_OW 336
// end ;
25353: GO 25338
25355: POP
25356: POP
// end ;
25357: PPOPN 1
25359: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25360: LD_EXP 55
25364: PUSH
25365: LD_EXP 59
25369: AND
25370: PUSH
25371: LD_OWVAR 65
25375: PUSH
25376: LD_INT 7
25378: LESS
25379: AND
25380: IFFALSE 25394
25382: GO 25384
25384: DISABLE
// begin enable ;
25385: ENABLE
// game_speed := 7 ;
25386: LD_ADDR_OWVAR 65
25390: PUSH
25391: LD_INT 7
25393: ST_TO_ADDR
// end ;
25394: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25395: LD_EXP 55
25399: PUSH
25400: LD_EXP 62
25404: AND
25405: IFFALSE 25607
25407: GO 25409
25409: DISABLE
25410: LD_INT 0
25412: PPUSH
25413: PPUSH
25414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25415: LD_ADDR_VAR 0 3
25419: PUSH
25420: LD_INT 81
25422: PUSH
25423: LD_OWVAR 2
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 21
25434: PUSH
25435: LD_INT 1
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PPUSH
25446: CALL_OW 69
25450: ST_TO_ADDR
// if not tmp then
25451: LD_VAR 0 3
25455: NOT
25456: IFFALSE 25460
// exit ;
25458: GO 25607
// if tmp > 5 then
25460: LD_VAR 0 3
25464: PUSH
25465: LD_INT 5
25467: GREATER
25468: IFFALSE 25480
// k := 5 else
25470: LD_ADDR_VAR 0 2
25474: PUSH
25475: LD_INT 5
25477: ST_TO_ADDR
25478: GO 25490
// k := tmp ;
25480: LD_ADDR_VAR 0 2
25484: PUSH
25485: LD_VAR 0 3
25489: ST_TO_ADDR
// for i := 1 to k do
25490: LD_ADDR_VAR 0 1
25494: PUSH
25495: DOUBLE
25496: LD_INT 1
25498: DEC
25499: ST_TO_ADDR
25500: LD_VAR 0 2
25504: PUSH
25505: FOR_TO
25506: IFFALSE 25605
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25508: LD_VAR 0 3
25512: PUSH
25513: LD_VAR 0 1
25517: ARRAY
25518: PPUSH
25519: LD_VAR 0 1
25523: PUSH
25524: LD_INT 4
25526: MOD
25527: PUSH
25528: LD_INT 1
25530: PLUS
25531: PPUSH
25532: CALL_OW 259
25536: PUSH
25537: LD_INT 10
25539: LESS
25540: IFFALSE 25603
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25542: LD_VAR 0 3
25546: PUSH
25547: LD_VAR 0 1
25551: ARRAY
25552: PPUSH
25553: LD_VAR 0 1
25557: PUSH
25558: LD_INT 4
25560: MOD
25561: PUSH
25562: LD_INT 1
25564: PLUS
25565: PPUSH
25566: LD_VAR 0 3
25570: PUSH
25571: LD_VAR 0 1
25575: ARRAY
25576: PPUSH
25577: LD_VAR 0 1
25581: PUSH
25582: LD_INT 4
25584: MOD
25585: PUSH
25586: LD_INT 1
25588: PLUS
25589: PPUSH
25590: CALL_OW 259
25594: PUSH
25595: LD_INT 1
25597: PLUS
25598: PPUSH
25599: CALL_OW 237
25603: GO 25505
25605: POP
25606: POP
// end ;
25607: PPOPN 3
25609: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25610: LD_EXP 55
25614: PUSH
25615: LD_EXP 63
25619: AND
25620: IFFALSE 25640
25622: GO 25624
25624: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25625: LD_INT 4
25627: PPUSH
25628: LD_OWVAR 2
25632: PPUSH
25633: LD_INT 0
25635: PPUSH
25636: CALL_OW 324
25640: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25641: LD_EXP 55
25645: PUSH
25646: LD_EXP 92
25650: AND
25651: IFFALSE 25671
25653: GO 25655
25655: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25656: LD_INT 19
25658: PPUSH
25659: LD_OWVAR 2
25663: PPUSH
25664: LD_INT 0
25666: PPUSH
25667: CALL_OW 324
25671: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25672: LD_EXP 55
25676: PUSH
25677: LD_EXP 64
25681: AND
25682: IFFALSE 25784
25684: GO 25686
25686: DISABLE
25687: LD_INT 0
25689: PPUSH
25690: PPUSH
// begin enable ;
25691: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25692: LD_ADDR_VAR 0 2
25696: PUSH
25697: LD_INT 22
25699: PUSH
25700: LD_OWVAR 2
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 2
25711: PUSH
25712: LD_INT 34
25714: PUSH
25715: LD_INT 11
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 34
25724: PUSH
25725: LD_INT 30
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: LIST
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PPUSH
25741: CALL_OW 69
25745: ST_TO_ADDR
// if not tmp then
25746: LD_VAR 0 2
25750: NOT
25751: IFFALSE 25755
// exit ;
25753: GO 25784
// for i in tmp do
25755: LD_ADDR_VAR 0 1
25759: PUSH
25760: LD_VAR 0 2
25764: PUSH
25765: FOR_IN
25766: IFFALSE 25782
// begin SetLives ( i , 0 ) ;
25768: LD_VAR 0 1
25772: PPUSH
25773: LD_INT 0
25775: PPUSH
25776: CALL_OW 234
// end ;
25780: GO 25765
25782: POP
25783: POP
// end ;
25784: PPOPN 2
25786: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25787: LD_EXP 55
25791: PUSH
25792: LD_EXP 65
25796: AND
25797: IFFALSE 25817
25799: GO 25801
25801: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25802: LD_INT 32
25804: PPUSH
25805: LD_OWVAR 2
25809: PPUSH
25810: LD_INT 0
25812: PPUSH
25813: CALL_OW 324
25817: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25818: LD_EXP 55
25822: PUSH
25823: LD_EXP 66
25827: AND
25828: IFFALSE 26009
25830: GO 25832
25832: DISABLE
25833: LD_INT 0
25835: PPUSH
25836: PPUSH
25837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25838: LD_ADDR_VAR 0 2
25842: PUSH
25843: LD_INT 22
25845: PUSH
25846: LD_OWVAR 2
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 33
25857: PUSH
25858: LD_INT 3
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PPUSH
25869: CALL_OW 69
25873: ST_TO_ADDR
// if not tmp then
25874: LD_VAR 0 2
25878: NOT
25879: IFFALSE 25883
// exit ;
25881: GO 26009
// side := 0 ;
25883: LD_ADDR_VAR 0 3
25887: PUSH
25888: LD_INT 0
25890: ST_TO_ADDR
// for i := 1 to 8 do
25891: LD_ADDR_VAR 0 1
25895: PUSH
25896: DOUBLE
25897: LD_INT 1
25899: DEC
25900: ST_TO_ADDR
25901: LD_INT 8
25903: PUSH
25904: FOR_TO
25905: IFFALSE 25953
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25907: LD_OWVAR 2
25911: PUSH
25912: LD_VAR 0 1
25916: NONEQUAL
25917: PUSH
25918: LD_OWVAR 2
25922: PPUSH
25923: LD_VAR 0 1
25927: PPUSH
25928: CALL_OW 81
25932: PUSH
25933: LD_INT 2
25935: EQUAL
25936: AND
25937: IFFALSE 25951
// begin side := i ;
25939: LD_ADDR_VAR 0 3
25943: PUSH
25944: LD_VAR 0 1
25948: ST_TO_ADDR
// break ;
25949: GO 25953
// end ;
25951: GO 25904
25953: POP
25954: POP
// if not side then
25955: LD_VAR 0 3
25959: NOT
25960: IFFALSE 25964
// exit ;
25962: GO 26009
// for i := 1 to tmp do
25964: LD_ADDR_VAR 0 1
25968: PUSH
25969: DOUBLE
25970: LD_INT 1
25972: DEC
25973: ST_TO_ADDR
25974: LD_VAR 0 2
25978: PUSH
25979: FOR_TO
25980: IFFALSE 26007
// if Prob ( 60 ) then
25982: LD_INT 60
25984: PPUSH
25985: CALL_OW 13
25989: IFFALSE 26005
// SetSide ( i , side ) ;
25991: LD_VAR 0 1
25995: PPUSH
25996: LD_VAR 0 3
26000: PPUSH
26001: CALL_OW 235
26005: GO 25979
26007: POP
26008: POP
// end ;
26009: PPOPN 3
26011: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26012: LD_EXP 55
26016: PUSH
26017: LD_EXP 68
26021: AND
26022: IFFALSE 26141
26024: GO 26026
26026: DISABLE
26027: LD_INT 0
26029: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26030: LD_ADDR_VAR 0 1
26034: PUSH
26035: LD_INT 22
26037: PUSH
26038: LD_OWVAR 2
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 21
26049: PUSH
26050: LD_INT 1
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 3
26059: PUSH
26060: LD_INT 23
26062: PUSH
26063: LD_INT 0
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: LIST
26078: PPUSH
26079: CALL_OW 69
26083: PUSH
26084: FOR_IN
26085: IFFALSE 26139
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26087: LD_VAR 0 1
26091: PPUSH
26092: CALL_OW 257
26096: PUSH
26097: LD_INT 1
26099: PUSH
26100: LD_INT 2
26102: PUSH
26103: LD_INT 3
26105: PUSH
26106: LD_INT 4
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: IN
26115: IFFALSE 26137
// SetClass ( un , rand ( 1 , 4 ) ) ;
26117: LD_VAR 0 1
26121: PPUSH
26122: LD_INT 1
26124: PPUSH
26125: LD_INT 4
26127: PPUSH
26128: CALL_OW 12
26132: PPUSH
26133: CALL_OW 336
26137: GO 26084
26139: POP
26140: POP
// end ;
26141: PPOPN 1
26143: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26144: LD_EXP 55
26148: PUSH
26149: LD_EXP 67
26153: AND
26154: IFFALSE 26233
26156: GO 26158
26158: DISABLE
26159: LD_INT 0
26161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26162: LD_ADDR_VAR 0 1
26166: PUSH
26167: LD_INT 22
26169: PUSH
26170: LD_OWVAR 2
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 21
26181: PUSH
26182: LD_INT 3
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PPUSH
26193: CALL_OW 69
26197: ST_TO_ADDR
// if not tmp then
26198: LD_VAR 0 1
26202: NOT
26203: IFFALSE 26207
// exit ;
26205: GO 26233
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26207: LD_VAR 0 1
26211: PUSH
26212: LD_INT 1
26214: PPUSH
26215: LD_VAR 0 1
26219: PPUSH
26220: CALL_OW 12
26224: ARRAY
26225: PPUSH
26226: LD_INT 100
26228: PPUSH
26229: CALL_OW 234
// end ;
26233: PPOPN 1
26235: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26236: LD_EXP 55
26240: PUSH
26241: LD_EXP 69
26245: AND
26246: IFFALSE 26344
26248: GO 26250
26250: DISABLE
26251: LD_INT 0
26253: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26254: LD_ADDR_VAR 0 1
26258: PUSH
26259: LD_INT 22
26261: PUSH
26262: LD_OWVAR 2
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 21
26273: PUSH
26274: LD_INT 1
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PPUSH
26285: CALL_OW 69
26289: ST_TO_ADDR
// if not tmp then
26290: LD_VAR 0 1
26294: NOT
26295: IFFALSE 26299
// exit ;
26297: GO 26344
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26299: LD_VAR 0 1
26303: PUSH
26304: LD_INT 1
26306: PPUSH
26307: LD_VAR 0 1
26311: PPUSH
26312: CALL_OW 12
26316: ARRAY
26317: PPUSH
26318: LD_INT 1
26320: PPUSH
26321: LD_INT 4
26323: PPUSH
26324: CALL_OW 12
26328: PPUSH
26329: LD_INT 3000
26331: PPUSH
26332: LD_INT 9000
26334: PPUSH
26335: CALL_OW 12
26339: PPUSH
26340: CALL_OW 492
// end ;
26344: PPOPN 1
26346: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26347: LD_EXP 55
26351: PUSH
26352: LD_EXP 70
26356: AND
26357: IFFALSE 26377
26359: GO 26361
26361: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26362: LD_INT 1
26364: PPUSH
26365: LD_OWVAR 2
26369: PPUSH
26370: LD_INT 0
26372: PPUSH
26373: CALL_OW 324
26377: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26378: LD_EXP 55
26382: PUSH
26383: LD_EXP 71
26387: AND
26388: IFFALSE 26471
26390: GO 26392
26392: DISABLE
26393: LD_INT 0
26395: PPUSH
26396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26397: LD_ADDR_VAR 0 2
26401: PUSH
26402: LD_INT 22
26404: PUSH
26405: LD_OWVAR 2
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 21
26416: PUSH
26417: LD_INT 3
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PPUSH
26428: CALL_OW 69
26432: ST_TO_ADDR
// if not tmp then
26433: LD_VAR 0 2
26437: NOT
26438: IFFALSE 26442
// exit ;
26440: GO 26471
// for i in tmp do
26442: LD_ADDR_VAR 0 1
26446: PUSH
26447: LD_VAR 0 2
26451: PUSH
26452: FOR_IN
26453: IFFALSE 26469
// SetBLevel ( i , 10 ) ;
26455: LD_VAR 0 1
26459: PPUSH
26460: LD_INT 10
26462: PPUSH
26463: CALL_OW 241
26467: GO 26452
26469: POP
26470: POP
// end ;
26471: PPOPN 2
26473: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26474: LD_EXP 55
26478: PUSH
26479: LD_EXP 72
26483: AND
26484: IFFALSE 26595
26486: GO 26488
26488: DISABLE
26489: LD_INT 0
26491: PPUSH
26492: PPUSH
26493: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26494: LD_ADDR_VAR 0 3
26498: PUSH
26499: LD_INT 22
26501: PUSH
26502: LD_OWVAR 2
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 25
26513: PUSH
26514: LD_INT 1
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PPUSH
26525: CALL_OW 69
26529: ST_TO_ADDR
// if not tmp then
26530: LD_VAR 0 3
26534: NOT
26535: IFFALSE 26539
// exit ;
26537: GO 26595
// un := tmp [ rand ( 1 , tmp ) ] ;
26539: LD_ADDR_VAR 0 2
26543: PUSH
26544: LD_VAR 0 3
26548: PUSH
26549: LD_INT 1
26551: PPUSH
26552: LD_VAR 0 3
26556: PPUSH
26557: CALL_OW 12
26561: ARRAY
26562: ST_TO_ADDR
// if Crawls ( un ) then
26563: LD_VAR 0 2
26567: PPUSH
26568: CALL_OW 318
26572: IFFALSE 26583
// ComWalk ( un ) ;
26574: LD_VAR 0 2
26578: PPUSH
26579: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26583: LD_VAR 0 2
26587: PPUSH
26588: LD_INT 5
26590: PPUSH
26591: CALL_OW 336
// end ;
26595: PPOPN 3
26597: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26598: LD_EXP 55
26602: PUSH
26603: LD_EXP 73
26607: AND
26608: PUSH
26609: LD_OWVAR 67
26613: PUSH
26614: LD_INT 4
26616: LESS
26617: AND
26618: IFFALSE 26637
26620: GO 26622
26622: DISABLE
// begin Difficulty := Difficulty + 1 ;
26623: LD_ADDR_OWVAR 67
26627: PUSH
26628: LD_OWVAR 67
26632: PUSH
26633: LD_INT 1
26635: PLUS
26636: ST_TO_ADDR
// end ;
26637: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26638: LD_EXP 55
26642: PUSH
26643: LD_EXP 74
26647: AND
26648: IFFALSE 26751
26650: GO 26652
26652: DISABLE
26653: LD_INT 0
26655: PPUSH
// begin for i := 1 to 5 do
26656: LD_ADDR_VAR 0 1
26660: PUSH
26661: DOUBLE
26662: LD_INT 1
26664: DEC
26665: ST_TO_ADDR
26666: LD_INT 5
26668: PUSH
26669: FOR_TO
26670: IFFALSE 26749
// begin uc_nation := nation_nature ;
26672: LD_ADDR_OWVAR 21
26676: PUSH
26677: LD_INT 0
26679: ST_TO_ADDR
// uc_side := 0 ;
26680: LD_ADDR_OWVAR 20
26684: PUSH
26685: LD_INT 0
26687: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26688: LD_ADDR_OWVAR 29
26692: PUSH
26693: LD_INT 12
26695: PUSH
26696: LD_INT 12
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: ST_TO_ADDR
// hc_agressivity := 20 ;
26703: LD_ADDR_OWVAR 35
26707: PUSH
26708: LD_INT 20
26710: ST_TO_ADDR
// hc_class := class_tiger ;
26711: LD_ADDR_OWVAR 28
26715: PUSH
26716: LD_INT 14
26718: ST_TO_ADDR
// hc_gallery :=  ;
26719: LD_ADDR_OWVAR 33
26723: PUSH
26724: LD_STRING 
26726: ST_TO_ADDR
// hc_name :=  ;
26727: LD_ADDR_OWVAR 26
26731: PUSH
26732: LD_STRING 
26734: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26735: CALL_OW 44
26739: PPUSH
26740: LD_INT 0
26742: PPUSH
26743: CALL_OW 51
// end ;
26747: GO 26669
26749: POP
26750: POP
// end ;
26751: PPOPN 1
26753: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26754: LD_EXP 55
26758: PUSH
26759: LD_EXP 75
26763: AND
26764: IFFALSE 26773
26766: GO 26768
26768: DISABLE
// StreamSibBomb ;
26769: CALL 26774 0 0
26773: END
// export function StreamSibBomb ; var i , x , y ; begin
26774: LD_INT 0
26776: PPUSH
26777: PPUSH
26778: PPUSH
26779: PPUSH
// result := false ;
26780: LD_ADDR_VAR 0 1
26784: PUSH
26785: LD_INT 0
26787: ST_TO_ADDR
// for i := 1 to 16 do
26788: LD_ADDR_VAR 0 2
26792: PUSH
26793: DOUBLE
26794: LD_INT 1
26796: DEC
26797: ST_TO_ADDR
26798: LD_INT 16
26800: PUSH
26801: FOR_TO
26802: IFFALSE 27001
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26804: LD_ADDR_VAR 0 3
26808: PUSH
26809: LD_INT 10
26811: PUSH
26812: LD_INT 20
26814: PUSH
26815: LD_INT 30
26817: PUSH
26818: LD_INT 40
26820: PUSH
26821: LD_INT 50
26823: PUSH
26824: LD_INT 60
26826: PUSH
26827: LD_INT 70
26829: PUSH
26830: LD_INT 80
26832: PUSH
26833: LD_INT 90
26835: PUSH
26836: LD_INT 100
26838: PUSH
26839: LD_INT 110
26841: PUSH
26842: LD_INT 120
26844: PUSH
26845: LD_INT 130
26847: PUSH
26848: LD_INT 140
26850: PUSH
26851: LD_INT 150
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 1
26873: PPUSH
26874: LD_INT 15
26876: PPUSH
26877: CALL_OW 12
26881: ARRAY
26882: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26883: LD_ADDR_VAR 0 4
26887: PUSH
26888: LD_INT 10
26890: PUSH
26891: LD_INT 20
26893: PUSH
26894: LD_INT 30
26896: PUSH
26897: LD_INT 40
26899: PUSH
26900: LD_INT 50
26902: PUSH
26903: LD_INT 60
26905: PUSH
26906: LD_INT 70
26908: PUSH
26909: LD_INT 80
26911: PUSH
26912: LD_INT 90
26914: PUSH
26915: LD_INT 100
26917: PUSH
26918: LD_INT 110
26920: PUSH
26921: LD_INT 120
26923: PUSH
26924: LD_INT 130
26926: PUSH
26927: LD_INT 140
26929: PUSH
26930: LD_INT 150
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 1
26952: PPUSH
26953: LD_INT 15
26955: PPUSH
26956: CALL_OW 12
26960: ARRAY
26961: ST_TO_ADDR
// if ValidHex ( x , y ) then
26962: LD_VAR 0 3
26966: PPUSH
26967: LD_VAR 0 4
26971: PPUSH
26972: CALL_OW 488
26976: IFFALSE 26999
// begin result := [ x , y ] ;
26978: LD_ADDR_VAR 0 1
26982: PUSH
26983: LD_VAR 0 3
26987: PUSH
26988: LD_VAR 0 4
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: ST_TO_ADDR
// break ;
26997: GO 27001
// end ; end ;
26999: GO 26801
27001: POP
27002: POP
// if result then
27003: LD_VAR 0 1
27007: IFFALSE 27067
// begin ToLua ( playSibBomb() ) ;
27009: LD_STRING playSibBomb()
27011: PPUSH
27012: CALL_OW 559
// wait ( 0 0$14 ) ;
27016: LD_INT 490
27018: PPUSH
27019: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27023: LD_VAR 0 1
27027: PUSH
27028: LD_INT 1
27030: ARRAY
27031: PPUSH
27032: LD_VAR 0 1
27036: PUSH
27037: LD_INT 2
27039: ARRAY
27040: PPUSH
27041: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27045: LD_VAR 0 1
27049: PUSH
27050: LD_INT 1
27052: ARRAY
27053: PPUSH
27054: LD_VAR 0 1
27058: PUSH
27059: LD_INT 2
27061: ARRAY
27062: PPUSH
27063: CALL_OW 429
// end ; end ;
27067: LD_VAR 0 1
27071: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27072: LD_EXP 55
27076: PUSH
27077: LD_EXP 77
27081: AND
27082: IFFALSE 27094
27084: GO 27086
27086: DISABLE
// YouLost (  ) ;
27087: LD_STRING 
27089: PPUSH
27090: CALL_OW 104
27094: END
// every 0 0$1 trigger StreamModeActive and sFog do
27095: LD_EXP 55
27099: PUSH
27100: LD_EXP 76
27104: AND
27105: IFFALSE 27119
27107: GO 27109
27109: DISABLE
// FogOff ( your_side ) ;
27110: LD_OWVAR 2
27114: PPUSH
27115: CALL_OW 344
27119: END
// every 0 0$1 trigger StreamModeActive and sSun do
27120: LD_EXP 55
27124: PUSH
27125: LD_EXP 78
27129: AND
27130: IFFALSE 27158
27132: GO 27134
27134: DISABLE
// begin solar_recharge_percent := 0 ;
27135: LD_ADDR_OWVAR 79
27139: PUSH
27140: LD_INT 0
27142: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27143: LD_INT 10500
27145: PPUSH
27146: CALL_OW 67
// solar_recharge_percent := 100 ;
27150: LD_ADDR_OWVAR 79
27154: PUSH
27155: LD_INT 100
27157: ST_TO_ADDR
// end ;
27158: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27159: LD_EXP 55
27163: PUSH
27164: LD_EXP 79
27168: AND
27169: IFFALSE 27408
27171: GO 27173
27173: DISABLE
27174: LD_INT 0
27176: PPUSH
27177: PPUSH
27178: PPUSH
// begin tmp := [ ] ;
27179: LD_ADDR_VAR 0 3
27183: PUSH
27184: EMPTY
27185: ST_TO_ADDR
// for i := 1 to 6 do
27186: LD_ADDR_VAR 0 1
27190: PUSH
27191: DOUBLE
27192: LD_INT 1
27194: DEC
27195: ST_TO_ADDR
27196: LD_INT 6
27198: PUSH
27199: FOR_TO
27200: IFFALSE 27305
// begin uc_nation := nation_nature ;
27202: LD_ADDR_OWVAR 21
27206: PUSH
27207: LD_INT 0
27209: ST_TO_ADDR
// uc_side := 0 ;
27210: LD_ADDR_OWVAR 20
27214: PUSH
27215: LD_INT 0
27217: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27218: LD_ADDR_OWVAR 29
27222: PUSH
27223: LD_INT 12
27225: PUSH
27226: LD_INT 12
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: ST_TO_ADDR
// hc_agressivity := 20 ;
27233: LD_ADDR_OWVAR 35
27237: PUSH
27238: LD_INT 20
27240: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27241: LD_ADDR_OWVAR 28
27245: PUSH
27246: LD_INT 17
27248: ST_TO_ADDR
// hc_gallery :=  ;
27249: LD_ADDR_OWVAR 33
27253: PUSH
27254: LD_STRING 
27256: ST_TO_ADDR
// hc_name :=  ;
27257: LD_ADDR_OWVAR 26
27261: PUSH
27262: LD_STRING 
27264: ST_TO_ADDR
// un := CreateHuman ;
27265: LD_ADDR_VAR 0 2
27269: PUSH
27270: CALL_OW 44
27274: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27275: LD_VAR 0 2
27279: PPUSH
27280: LD_INT 1
27282: PPUSH
27283: CALL_OW 51
// tmp := tmp ^ un ;
27287: LD_ADDR_VAR 0 3
27291: PUSH
27292: LD_VAR 0 3
27296: PUSH
27297: LD_VAR 0 2
27301: ADD
27302: ST_TO_ADDR
// end ;
27303: GO 27199
27305: POP
27306: POP
// repeat wait ( 0 0$1 ) ;
27307: LD_INT 35
27309: PPUSH
27310: CALL_OW 67
// for un in tmp do
27314: LD_ADDR_VAR 0 2
27318: PUSH
27319: LD_VAR 0 3
27323: PUSH
27324: FOR_IN
27325: IFFALSE 27399
// begin if IsDead ( un ) then
27327: LD_VAR 0 2
27331: PPUSH
27332: CALL_OW 301
27336: IFFALSE 27356
// begin tmp := tmp diff un ;
27338: LD_ADDR_VAR 0 3
27342: PUSH
27343: LD_VAR 0 3
27347: PUSH
27348: LD_VAR 0 2
27352: DIFF
27353: ST_TO_ADDR
// continue ;
27354: GO 27324
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27356: LD_VAR 0 2
27360: PPUSH
27361: LD_INT 3
27363: PUSH
27364: LD_INT 22
27366: PUSH
27367: LD_INT 0
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PPUSH
27378: CALL_OW 69
27382: PPUSH
27383: LD_VAR 0 2
27387: PPUSH
27388: CALL_OW 74
27392: PPUSH
27393: CALL_OW 115
// end ;
27397: GO 27324
27399: POP
27400: POP
// until not tmp ;
27401: LD_VAR 0 3
27405: NOT
27406: IFFALSE 27307
// end ;
27408: PPOPN 3
27410: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27411: LD_EXP 55
27415: PUSH
27416: LD_EXP 80
27420: AND
27421: IFFALSE 27475
27423: GO 27425
27425: DISABLE
// begin ToLua ( displayTroll(); ) ;
27426: LD_STRING displayTroll();
27428: PPUSH
27429: CALL_OW 559
// wait ( 3 3$00 ) ;
27433: LD_INT 6300
27435: PPUSH
27436: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27440: LD_STRING hideTroll();
27442: PPUSH
27443: CALL_OW 559
// wait ( 1 1$00 ) ;
27447: LD_INT 2100
27449: PPUSH
27450: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27454: LD_STRING displayTroll();
27456: PPUSH
27457: CALL_OW 559
// wait ( 1 1$00 ) ;
27461: LD_INT 2100
27463: PPUSH
27464: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27468: LD_STRING hideTroll();
27470: PPUSH
27471: CALL_OW 559
// end ;
27475: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27476: LD_EXP 55
27480: PUSH
27481: LD_EXP 81
27485: AND
27486: IFFALSE 27549
27488: GO 27490
27490: DISABLE
27491: LD_INT 0
27493: PPUSH
// begin p := 0 ;
27494: LD_ADDR_VAR 0 1
27498: PUSH
27499: LD_INT 0
27501: ST_TO_ADDR
// repeat game_speed := 1 ;
27502: LD_ADDR_OWVAR 65
27506: PUSH
27507: LD_INT 1
27509: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27510: LD_INT 35
27512: PPUSH
27513: CALL_OW 67
// p := p + 1 ;
27517: LD_ADDR_VAR 0 1
27521: PUSH
27522: LD_VAR 0 1
27526: PUSH
27527: LD_INT 1
27529: PLUS
27530: ST_TO_ADDR
// until p >= 60 ;
27531: LD_VAR 0 1
27535: PUSH
27536: LD_INT 60
27538: GREATEREQUAL
27539: IFFALSE 27502
// game_speed := 4 ;
27541: LD_ADDR_OWVAR 65
27545: PUSH
27546: LD_INT 4
27548: ST_TO_ADDR
// end ;
27549: PPOPN 1
27551: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27552: LD_EXP 55
27556: PUSH
27557: LD_EXP 82
27561: AND
27562: IFFALSE 27708
27564: GO 27566
27566: DISABLE
27567: LD_INT 0
27569: PPUSH
27570: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27571: LD_ADDR_VAR 0 1
27575: PUSH
27576: LD_INT 22
27578: PUSH
27579: LD_OWVAR 2
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 2
27590: PUSH
27591: LD_INT 30
27593: PUSH
27594: LD_INT 0
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 30
27603: PUSH
27604: LD_INT 1
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: LIST
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PPUSH
27620: CALL_OW 69
27624: ST_TO_ADDR
// if not depot then
27625: LD_VAR 0 1
27629: NOT
27630: IFFALSE 27634
// exit ;
27632: GO 27708
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27634: LD_ADDR_VAR 0 2
27638: PUSH
27639: LD_VAR 0 1
27643: PUSH
27644: LD_INT 1
27646: PPUSH
27647: LD_VAR 0 1
27651: PPUSH
27652: CALL_OW 12
27656: ARRAY
27657: PPUSH
27658: CALL_OW 274
27662: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27663: LD_VAR 0 2
27667: PPUSH
27668: LD_INT 1
27670: PPUSH
27671: LD_INT 0
27673: PPUSH
27674: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27678: LD_VAR 0 2
27682: PPUSH
27683: LD_INT 2
27685: PPUSH
27686: LD_INT 0
27688: PPUSH
27689: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27693: LD_VAR 0 2
27697: PPUSH
27698: LD_INT 3
27700: PPUSH
27701: LD_INT 0
27703: PPUSH
27704: CALL_OW 277
// end ;
27708: PPOPN 2
27710: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27711: LD_EXP 55
27715: PUSH
27716: LD_EXP 83
27720: AND
27721: IFFALSE 27818
27723: GO 27725
27725: DISABLE
27726: LD_INT 0
27728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27729: LD_ADDR_VAR 0 1
27733: PUSH
27734: LD_INT 22
27736: PUSH
27737: LD_OWVAR 2
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 21
27748: PUSH
27749: LD_INT 1
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 3
27758: PUSH
27759: LD_INT 23
27761: PUSH
27762: LD_INT 0
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: LIST
27777: PPUSH
27778: CALL_OW 69
27782: ST_TO_ADDR
// if not tmp then
27783: LD_VAR 0 1
27787: NOT
27788: IFFALSE 27792
// exit ;
27790: GO 27818
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27792: LD_VAR 0 1
27796: PUSH
27797: LD_INT 1
27799: PPUSH
27800: LD_VAR 0 1
27804: PPUSH
27805: CALL_OW 12
27809: ARRAY
27810: PPUSH
27811: LD_INT 200
27813: PPUSH
27814: CALL_OW 234
// end ;
27818: PPOPN 1
27820: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27821: LD_EXP 55
27825: PUSH
27826: LD_EXP 84
27830: AND
27831: IFFALSE 27910
27833: GO 27835
27835: DISABLE
27836: LD_INT 0
27838: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27839: LD_ADDR_VAR 0 1
27843: PUSH
27844: LD_INT 22
27846: PUSH
27847: LD_OWVAR 2
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: LD_INT 21
27858: PUSH
27859: LD_INT 2
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PPUSH
27870: CALL_OW 69
27874: ST_TO_ADDR
// if not tmp then
27875: LD_VAR 0 1
27879: NOT
27880: IFFALSE 27884
// exit ;
27882: GO 27910
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27884: LD_VAR 0 1
27888: PUSH
27889: LD_INT 1
27891: PPUSH
27892: LD_VAR 0 1
27896: PPUSH
27897: CALL_OW 12
27901: ARRAY
27902: PPUSH
27903: LD_INT 60
27905: PPUSH
27906: CALL_OW 234
// end ;
27910: PPOPN 1
27912: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27913: LD_EXP 55
27917: PUSH
27918: LD_EXP 85
27922: AND
27923: IFFALSE 28022
27925: GO 27927
27927: DISABLE
27928: LD_INT 0
27930: PPUSH
27931: PPUSH
// begin enable ;
27932: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27933: LD_ADDR_VAR 0 1
27937: PUSH
27938: LD_INT 22
27940: PUSH
27941: LD_OWVAR 2
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 61
27952: PUSH
27953: EMPTY
27954: LIST
27955: PUSH
27956: LD_INT 33
27958: PUSH
27959: LD_INT 2
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: LIST
27970: PPUSH
27971: CALL_OW 69
27975: ST_TO_ADDR
// if not tmp then
27976: LD_VAR 0 1
27980: NOT
27981: IFFALSE 27985
// exit ;
27983: GO 28022
// for i in tmp do
27985: LD_ADDR_VAR 0 2
27989: PUSH
27990: LD_VAR 0 1
27994: PUSH
27995: FOR_IN
27996: IFFALSE 28020
// if IsControledBy ( i ) then
27998: LD_VAR 0 2
28002: PPUSH
28003: CALL_OW 312
28007: IFFALSE 28018
// ComUnlink ( i ) ;
28009: LD_VAR 0 2
28013: PPUSH
28014: CALL_OW 136
28018: GO 27995
28020: POP
28021: POP
// end ;
28022: PPOPN 2
28024: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28025: LD_EXP 55
28029: PUSH
28030: LD_EXP 86
28034: AND
28035: IFFALSE 28175
28037: GO 28039
28039: DISABLE
28040: LD_INT 0
28042: PPUSH
28043: PPUSH
// begin ToLua ( displayPowell(); ) ;
28044: LD_STRING displayPowell();
28046: PPUSH
28047: CALL_OW 559
// uc_side := 0 ;
28051: LD_ADDR_OWVAR 20
28055: PUSH
28056: LD_INT 0
28058: ST_TO_ADDR
// uc_nation := 2 ;
28059: LD_ADDR_OWVAR 21
28063: PUSH
28064: LD_INT 2
28066: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28067: LD_ADDR_OWVAR 37
28071: PUSH
28072: LD_INT 14
28074: ST_TO_ADDR
// vc_engine := engine_siberite ;
28075: LD_ADDR_OWVAR 39
28079: PUSH
28080: LD_INT 3
28082: ST_TO_ADDR
// vc_control := control_apeman ;
28083: LD_ADDR_OWVAR 38
28087: PUSH
28088: LD_INT 5
28090: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28091: LD_ADDR_OWVAR 40
28095: PUSH
28096: LD_INT 29
28098: ST_TO_ADDR
// un := CreateVehicle ;
28099: LD_ADDR_VAR 0 2
28103: PUSH
28104: CALL_OW 45
28108: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28109: LD_VAR 0 2
28113: PPUSH
28114: LD_INT 1
28116: PPUSH
28117: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28121: LD_INT 35
28123: PPUSH
28124: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28128: LD_VAR 0 2
28132: PPUSH
28133: LD_INT 22
28135: PUSH
28136: LD_OWVAR 2
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PPUSH
28145: CALL_OW 69
28149: PPUSH
28150: LD_VAR 0 2
28154: PPUSH
28155: CALL_OW 74
28159: PPUSH
28160: CALL_OW 115
// until IsDead ( un ) ;
28164: LD_VAR 0 2
28168: PPUSH
28169: CALL_OW 301
28173: IFFALSE 28121
// end ;
28175: PPOPN 2
28177: END
// every 0 0$1 trigger StreamModeActive and sStu do
28178: LD_EXP 55
28182: PUSH
28183: LD_EXP 94
28187: AND
28188: IFFALSE 28204
28190: GO 28192
28192: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28193: LD_STRING displayStucuk();
28195: PPUSH
28196: CALL_OW 559
// ResetFog ;
28200: CALL_OW 335
// end ;
28204: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28205: LD_EXP 55
28209: PUSH
28210: LD_EXP 87
28214: AND
28215: IFFALSE 28356
28217: GO 28219
28219: DISABLE
28220: LD_INT 0
28222: PPUSH
28223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28224: LD_ADDR_VAR 0 2
28228: PUSH
28229: LD_INT 22
28231: PUSH
28232: LD_OWVAR 2
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 21
28243: PUSH
28244: LD_INT 1
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PPUSH
28255: CALL_OW 69
28259: ST_TO_ADDR
// if not tmp then
28260: LD_VAR 0 2
28264: NOT
28265: IFFALSE 28269
// exit ;
28267: GO 28356
// un := tmp [ rand ( 1 , tmp ) ] ;
28269: LD_ADDR_VAR 0 1
28273: PUSH
28274: LD_VAR 0 2
28278: PUSH
28279: LD_INT 1
28281: PPUSH
28282: LD_VAR 0 2
28286: PPUSH
28287: CALL_OW 12
28291: ARRAY
28292: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28293: LD_VAR 0 1
28297: PPUSH
28298: LD_INT 0
28300: PPUSH
28301: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28305: LD_VAR 0 1
28309: PPUSH
28310: LD_OWVAR 3
28314: PUSH
28315: LD_VAR 0 1
28319: DIFF
28320: PPUSH
28321: LD_VAR 0 1
28325: PPUSH
28326: CALL_OW 74
28330: PPUSH
28331: CALL_OW 115
// wait ( 0 0$20 ) ;
28335: LD_INT 700
28337: PPUSH
28338: CALL_OW 67
// SetSide ( un , your_side ) ;
28342: LD_VAR 0 1
28346: PPUSH
28347: LD_OWVAR 2
28351: PPUSH
28352: CALL_OW 235
// end ;
28356: PPOPN 2
28358: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28359: LD_EXP 55
28363: PUSH
28364: LD_EXP 88
28368: AND
28369: IFFALSE 28475
28371: GO 28373
28373: DISABLE
28374: LD_INT 0
28376: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28377: LD_ADDR_VAR 0 1
28381: PUSH
28382: LD_INT 22
28384: PUSH
28385: LD_OWVAR 2
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 2
28396: PUSH
28397: LD_INT 30
28399: PUSH
28400: LD_INT 0
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 30
28409: PUSH
28410: LD_INT 1
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: LIST
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PPUSH
28426: CALL_OW 69
28430: ST_TO_ADDR
// if not depot then
28431: LD_VAR 0 1
28435: NOT
28436: IFFALSE 28440
// exit ;
28438: GO 28475
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28440: LD_VAR 0 1
28444: PUSH
28445: LD_INT 1
28447: ARRAY
28448: PPUSH
28449: CALL_OW 250
28453: PPUSH
28454: LD_VAR 0 1
28458: PUSH
28459: LD_INT 1
28461: ARRAY
28462: PPUSH
28463: CALL_OW 251
28467: PPUSH
28468: LD_INT 70
28470: PPUSH
28471: CALL_OW 495
// end ;
28475: PPOPN 1
28477: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28478: LD_EXP 55
28482: PUSH
28483: LD_EXP 89
28487: AND
28488: IFFALSE 28699
28490: GO 28492
28492: DISABLE
28493: LD_INT 0
28495: PPUSH
28496: PPUSH
28497: PPUSH
28498: PPUSH
28499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28500: LD_ADDR_VAR 0 5
28504: PUSH
28505: LD_INT 22
28507: PUSH
28508: LD_OWVAR 2
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: LD_INT 21
28519: PUSH
28520: LD_INT 1
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PPUSH
28531: CALL_OW 69
28535: ST_TO_ADDR
// if not tmp then
28536: LD_VAR 0 5
28540: NOT
28541: IFFALSE 28545
// exit ;
28543: GO 28699
// for i in tmp do
28545: LD_ADDR_VAR 0 1
28549: PUSH
28550: LD_VAR 0 5
28554: PUSH
28555: FOR_IN
28556: IFFALSE 28697
// begin d := rand ( 0 , 5 ) ;
28558: LD_ADDR_VAR 0 4
28562: PUSH
28563: LD_INT 0
28565: PPUSH
28566: LD_INT 5
28568: PPUSH
28569: CALL_OW 12
28573: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28574: LD_ADDR_VAR 0 2
28578: PUSH
28579: LD_VAR 0 1
28583: PPUSH
28584: CALL_OW 250
28588: PPUSH
28589: LD_VAR 0 4
28593: PPUSH
28594: LD_INT 3
28596: PPUSH
28597: LD_INT 12
28599: PPUSH
28600: CALL_OW 12
28604: PPUSH
28605: CALL_OW 272
28609: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28610: LD_ADDR_VAR 0 3
28614: PUSH
28615: LD_VAR 0 1
28619: PPUSH
28620: CALL_OW 251
28624: PPUSH
28625: LD_VAR 0 4
28629: PPUSH
28630: LD_INT 3
28632: PPUSH
28633: LD_INT 12
28635: PPUSH
28636: CALL_OW 12
28640: PPUSH
28641: CALL_OW 273
28645: ST_TO_ADDR
// if ValidHex ( x , y ) then
28646: LD_VAR 0 2
28650: PPUSH
28651: LD_VAR 0 3
28655: PPUSH
28656: CALL_OW 488
28660: IFFALSE 28695
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28662: LD_VAR 0 1
28666: PPUSH
28667: LD_VAR 0 2
28671: PPUSH
28672: LD_VAR 0 3
28676: PPUSH
28677: LD_INT 3
28679: PPUSH
28680: LD_INT 6
28682: PPUSH
28683: CALL_OW 12
28687: PPUSH
28688: LD_INT 1
28690: PPUSH
28691: CALL_OW 483
// end ;
28695: GO 28555
28697: POP
28698: POP
// end ;
28699: PPOPN 5
28701: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28702: LD_EXP 55
28706: PUSH
28707: LD_EXP 90
28711: AND
28712: IFFALSE 28806
28714: GO 28716
28716: DISABLE
28717: LD_INT 0
28719: PPUSH
28720: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28721: LD_ADDR_VAR 0 2
28725: PUSH
28726: LD_INT 22
28728: PUSH
28729: LD_OWVAR 2
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 32
28740: PUSH
28741: LD_INT 1
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 21
28750: PUSH
28751: LD_INT 2
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: LIST
28762: PPUSH
28763: CALL_OW 69
28767: ST_TO_ADDR
// if not tmp then
28768: LD_VAR 0 2
28772: NOT
28773: IFFALSE 28777
// exit ;
28775: GO 28806
// for i in tmp do
28777: LD_ADDR_VAR 0 1
28781: PUSH
28782: LD_VAR 0 2
28786: PUSH
28787: FOR_IN
28788: IFFALSE 28804
// SetFuel ( i , 0 ) ;
28790: LD_VAR 0 1
28794: PPUSH
28795: LD_INT 0
28797: PPUSH
28798: CALL_OW 240
28802: GO 28787
28804: POP
28805: POP
// end ;
28806: PPOPN 2
28808: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28809: LD_EXP 55
28813: PUSH
28814: LD_EXP 91
28818: AND
28819: IFFALSE 28885
28821: GO 28823
28823: DISABLE
28824: LD_INT 0
28826: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28827: LD_ADDR_VAR 0 1
28831: PUSH
28832: LD_INT 22
28834: PUSH
28835: LD_OWVAR 2
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 30
28846: PUSH
28847: LD_INT 29
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PPUSH
28858: CALL_OW 69
28862: ST_TO_ADDR
// if not tmp then
28863: LD_VAR 0 1
28867: NOT
28868: IFFALSE 28872
// exit ;
28870: GO 28885
// DestroyUnit ( tmp [ 1 ] ) ;
28872: LD_VAR 0 1
28876: PUSH
28877: LD_INT 1
28879: ARRAY
28880: PPUSH
28881: CALL_OW 65
// end ;
28885: PPOPN 1
28887: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28888: LD_EXP 55
28892: PUSH
28893: LD_EXP 93
28897: AND
28898: IFFALSE 29027
28900: GO 28902
28902: DISABLE
28903: LD_INT 0
28905: PPUSH
// begin uc_side := 0 ;
28906: LD_ADDR_OWVAR 20
28910: PUSH
28911: LD_INT 0
28913: ST_TO_ADDR
// uc_nation := nation_arabian ;
28914: LD_ADDR_OWVAR 21
28918: PUSH
28919: LD_INT 2
28921: ST_TO_ADDR
// hc_gallery :=  ;
28922: LD_ADDR_OWVAR 33
28926: PUSH
28927: LD_STRING 
28929: ST_TO_ADDR
// hc_name :=  ;
28930: LD_ADDR_OWVAR 26
28934: PUSH
28935: LD_STRING 
28937: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28938: LD_INT 1
28940: PPUSH
28941: LD_INT 11
28943: PPUSH
28944: LD_INT 10
28946: PPUSH
28947: CALL_OW 380
// un := CreateHuman ;
28951: LD_ADDR_VAR 0 1
28955: PUSH
28956: CALL_OW 44
28960: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28961: LD_VAR 0 1
28965: PPUSH
28966: LD_INT 1
28968: PPUSH
28969: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28973: LD_INT 35
28975: PPUSH
28976: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28980: LD_VAR 0 1
28984: PPUSH
28985: LD_INT 22
28987: PUSH
28988: LD_OWVAR 2
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PPUSH
28997: CALL_OW 69
29001: PPUSH
29002: LD_VAR 0 1
29006: PPUSH
29007: CALL_OW 74
29011: PPUSH
29012: CALL_OW 115
// until IsDead ( un ) ;
29016: LD_VAR 0 1
29020: PPUSH
29021: CALL_OW 301
29025: IFFALSE 28973
// end ;
29027: PPOPN 1
29029: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29030: LD_EXP 55
29034: PUSH
29035: LD_EXP 95
29039: AND
29040: IFFALSE 29052
29042: GO 29044
29044: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29045: LD_STRING earthquake(getX(game), 0, 32)
29047: PPUSH
29048: CALL_OW 559
29052: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29053: LD_EXP 55
29057: PUSH
29058: LD_EXP 96
29062: AND
29063: IFFALSE 29154
29065: GO 29067
29067: DISABLE
29068: LD_INT 0
29070: PPUSH
// begin enable ;
29071: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29072: LD_ADDR_VAR 0 1
29076: PUSH
29077: LD_INT 22
29079: PUSH
29080: LD_OWVAR 2
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: PUSH
29089: LD_INT 21
29091: PUSH
29092: LD_INT 2
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: PUSH
29099: LD_INT 33
29101: PUSH
29102: LD_INT 3
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: LIST
29113: PPUSH
29114: CALL_OW 69
29118: ST_TO_ADDR
// if not tmp then
29119: LD_VAR 0 1
29123: NOT
29124: IFFALSE 29128
// exit ;
29126: GO 29154
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29128: LD_VAR 0 1
29132: PUSH
29133: LD_INT 1
29135: PPUSH
29136: LD_VAR 0 1
29140: PPUSH
29141: CALL_OW 12
29145: ARRAY
29146: PPUSH
29147: LD_INT 1
29149: PPUSH
29150: CALL_OW 234
// end ;
29154: PPOPN 1
29156: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29157: LD_EXP 55
29161: PUSH
29162: LD_EXP 97
29166: AND
29167: IFFALSE 29308
29169: GO 29171
29171: DISABLE
29172: LD_INT 0
29174: PPUSH
29175: PPUSH
29176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29177: LD_ADDR_VAR 0 3
29181: PUSH
29182: LD_INT 22
29184: PUSH
29185: LD_OWVAR 2
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 25
29196: PUSH
29197: LD_INT 1
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PPUSH
29208: CALL_OW 69
29212: ST_TO_ADDR
// if not tmp then
29213: LD_VAR 0 3
29217: NOT
29218: IFFALSE 29222
// exit ;
29220: GO 29308
// un := tmp [ rand ( 1 , tmp ) ] ;
29222: LD_ADDR_VAR 0 2
29226: PUSH
29227: LD_VAR 0 3
29231: PUSH
29232: LD_INT 1
29234: PPUSH
29235: LD_VAR 0 3
29239: PPUSH
29240: CALL_OW 12
29244: ARRAY
29245: ST_TO_ADDR
// if Crawls ( un ) then
29246: LD_VAR 0 2
29250: PPUSH
29251: CALL_OW 318
29255: IFFALSE 29266
// ComWalk ( un ) ;
29257: LD_VAR 0 2
29261: PPUSH
29262: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29266: LD_VAR 0 2
29270: PPUSH
29271: LD_INT 9
29273: PPUSH
29274: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29278: LD_INT 28
29280: PPUSH
29281: LD_OWVAR 2
29285: PPUSH
29286: LD_INT 2
29288: PPUSH
29289: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29293: LD_INT 29
29295: PPUSH
29296: LD_OWVAR 2
29300: PPUSH
29301: LD_INT 2
29303: PPUSH
29304: CALL_OW 322
// end ;
29308: PPOPN 3
29310: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29311: LD_EXP 55
29315: PUSH
29316: LD_EXP 98
29320: AND
29321: IFFALSE 29432
29323: GO 29325
29325: DISABLE
29326: LD_INT 0
29328: PPUSH
29329: PPUSH
29330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29331: LD_ADDR_VAR 0 3
29335: PUSH
29336: LD_INT 22
29338: PUSH
29339: LD_OWVAR 2
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 25
29350: PUSH
29351: LD_INT 1
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PPUSH
29362: CALL_OW 69
29366: ST_TO_ADDR
// if not tmp then
29367: LD_VAR 0 3
29371: NOT
29372: IFFALSE 29376
// exit ;
29374: GO 29432
// un := tmp [ rand ( 1 , tmp ) ] ;
29376: LD_ADDR_VAR 0 2
29380: PUSH
29381: LD_VAR 0 3
29385: PUSH
29386: LD_INT 1
29388: PPUSH
29389: LD_VAR 0 3
29393: PPUSH
29394: CALL_OW 12
29398: ARRAY
29399: ST_TO_ADDR
// if Crawls ( un ) then
29400: LD_VAR 0 2
29404: PPUSH
29405: CALL_OW 318
29409: IFFALSE 29420
// ComWalk ( un ) ;
29411: LD_VAR 0 2
29415: PPUSH
29416: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29420: LD_VAR 0 2
29424: PPUSH
29425: LD_INT 8
29427: PPUSH
29428: CALL_OW 336
// end ;
29432: PPOPN 3
29434: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29435: LD_EXP 55
29439: PUSH
29440: LD_EXP 99
29444: AND
29445: IFFALSE 29589
29447: GO 29449
29449: DISABLE
29450: LD_INT 0
29452: PPUSH
29453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29454: LD_ADDR_VAR 0 2
29458: PUSH
29459: LD_INT 22
29461: PUSH
29462: LD_OWVAR 2
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: LD_INT 21
29473: PUSH
29474: LD_INT 2
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 2
29483: PUSH
29484: LD_INT 34
29486: PUSH
29487: LD_INT 12
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 34
29496: PUSH
29497: LD_INT 51
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 34
29506: PUSH
29507: LD_INT 32
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: LIST
29524: PPUSH
29525: CALL_OW 69
29529: ST_TO_ADDR
// if not tmp then
29530: LD_VAR 0 2
29534: NOT
29535: IFFALSE 29539
// exit ;
29537: GO 29589
// for i in tmp do
29539: LD_ADDR_VAR 0 1
29543: PUSH
29544: LD_VAR 0 2
29548: PUSH
29549: FOR_IN
29550: IFFALSE 29587
// if GetCargo ( i , mat_artifact ) = 0 then
29552: LD_VAR 0 1
29556: PPUSH
29557: LD_INT 4
29559: PPUSH
29560: CALL_OW 289
29564: PUSH
29565: LD_INT 0
29567: EQUAL
29568: IFFALSE 29585
// SetCargo ( i , mat_siberit , 100 ) ;
29570: LD_VAR 0 1
29574: PPUSH
29575: LD_INT 3
29577: PPUSH
29578: LD_INT 100
29580: PPUSH
29581: CALL_OW 290
29585: GO 29549
29587: POP
29588: POP
// end ;
29589: PPOPN 2
29591: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29592: LD_EXP 55
29596: PUSH
29597: LD_EXP 100
29601: AND
29602: IFFALSE 29785
29604: GO 29606
29606: DISABLE
29607: LD_INT 0
29609: PPUSH
29610: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29611: LD_ADDR_VAR 0 2
29615: PUSH
29616: LD_INT 22
29618: PUSH
29619: LD_OWVAR 2
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PPUSH
29628: CALL_OW 69
29632: ST_TO_ADDR
// if not tmp then
29633: LD_VAR 0 2
29637: NOT
29638: IFFALSE 29642
// exit ;
29640: GO 29785
// for i := 1 to 2 do
29642: LD_ADDR_VAR 0 1
29646: PUSH
29647: DOUBLE
29648: LD_INT 1
29650: DEC
29651: ST_TO_ADDR
29652: LD_INT 2
29654: PUSH
29655: FOR_TO
29656: IFFALSE 29783
// begin uc_side := your_side ;
29658: LD_ADDR_OWVAR 20
29662: PUSH
29663: LD_OWVAR 2
29667: ST_TO_ADDR
// uc_nation := nation_american ;
29668: LD_ADDR_OWVAR 21
29672: PUSH
29673: LD_INT 1
29675: ST_TO_ADDR
// vc_chassis := us_morphling ;
29676: LD_ADDR_OWVAR 37
29680: PUSH
29681: LD_INT 5
29683: ST_TO_ADDR
// vc_engine := engine_siberite ;
29684: LD_ADDR_OWVAR 39
29688: PUSH
29689: LD_INT 3
29691: ST_TO_ADDR
// vc_control := control_computer ;
29692: LD_ADDR_OWVAR 38
29696: PUSH
29697: LD_INT 3
29699: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29700: LD_ADDR_OWVAR 40
29704: PUSH
29705: LD_INT 10
29707: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29708: LD_VAR 0 2
29712: PUSH
29713: LD_INT 1
29715: ARRAY
29716: PPUSH
29717: CALL_OW 310
29721: NOT
29722: IFFALSE 29769
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29724: CALL_OW 45
29728: PPUSH
29729: LD_VAR 0 2
29733: PUSH
29734: LD_INT 1
29736: ARRAY
29737: PPUSH
29738: CALL_OW 250
29742: PPUSH
29743: LD_VAR 0 2
29747: PUSH
29748: LD_INT 1
29750: ARRAY
29751: PPUSH
29752: CALL_OW 251
29756: PPUSH
29757: LD_INT 12
29759: PPUSH
29760: LD_INT 1
29762: PPUSH
29763: CALL_OW 50
29767: GO 29781
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29769: CALL_OW 45
29773: PPUSH
29774: LD_INT 1
29776: PPUSH
29777: CALL_OW 51
// end ;
29781: GO 29655
29783: POP
29784: POP
// end ;
29785: PPOPN 2
29787: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29788: LD_EXP 55
29792: PUSH
29793: LD_EXP 101
29797: AND
29798: IFFALSE 30020
29800: GO 29802
29802: DISABLE
29803: LD_INT 0
29805: PPUSH
29806: PPUSH
29807: PPUSH
29808: PPUSH
29809: PPUSH
29810: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29811: LD_ADDR_VAR 0 6
29815: PUSH
29816: LD_INT 22
29818: PUSH
29819: LD_OWVAR 2
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 21
29830: PUSH
29831: LD_INT 1
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 3
29840: PUSH
29841: LD_INT 23
29843: PUSH
29844: LD_INT 0
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: LIST
29859: PPUSH
29860: CALL_OW 69
29864: ST_TO_ADDR
// if not tmp then
29865: LD_VAR 0 6
29869: NOT
29870: IFFALSE 29874
// exit ;
29872: GO 30020
// s1 := rand ( 1 , 4 ) ;
29874: LD_ADDR_VAR 0 2
29878: PUSH
29879: LD_INT 1
29881: PPUSH
29882: LD_INT 4
29884: PPUSH
29885: CALL_OW 12
29889: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29890: LD_ADDR_VAR 0 4
29894: PUSH
29895: LD_VAR 0 6
29899: PUSH
29900: LD_INT 1
29902: ARRAY
29903: PPUSH
29904: LD_VAR 0 2
29908: PPUSH
29909: CALL_OW 259
29913: ST_TO_ADDR
// if s1 = 1 then
29914: LD_VAR 0 2
29918: PUSH
29919: LD_INT 1
29921: EQUAL
29922: IFFALSE 29942
// s2 := rand ( 2 , 4 ) else
29924: LD_ADDR_VAR 0 3
29928: PUSH
29929: LD_INT 2
29931: PPUSH
29932: LD_INT 4
29934: PPUSH
29935: CALL_OW 12
29939: ST_TO_ADDR
29940: GO 29950
// s2 := 1 ;
29942: LD_ADDR_VAR 0 3
29946: PUSH
29947: LD_INT 1
29949: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29950: LD_ADDR_VAR 0 5
29954: PUSH
29955: LD_VAR 0 6
29959: PUSH
29960: LD_INT 1
29962: ARRAY
29963: PPUSH
29964: LD_VAR 0 3
29968: PPUSH
29969: CALL_OW 259
29973: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29974: LD_VAR 0 6
29978: PUSH
29979: LD_INT 1
29981: ARRAY
29982: PPUSH
29983: LD_VAR 0 2
29987: PPUSH
29988: LD_VAR 0 5
29992: PPUSH
29993: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29997: LD_VAR 0 6
30001: PUSH
30002: LD_INT 1
30004: ARRAY
30005: PPUSH
30006: LD_VAR 0 3
30010: PPUSH
30011: LD_VAR 0 4
30015: PPUSH
30016: CALL_OW 237
// end ;
30020: PPOPN 6
30022: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30023: LD_EXP 55
30027: PUSH
30028: LD_EXP 102
30032: AND
30033: IFFALSE 30112
30035: GO 30037
30037: DISABLE
30038: LD_INT 0
30040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30041: LD_ADDR_VAR 0 1
30045: PUSH
30046: LD_INT 22
30048: PUSH
30049: LD_OWVAR 2
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 30
30060: PUSH
30061: LD_INT 3
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PPUSH
30072: CALL_OW 69
30076: ST_TO_ADDR
// if not tmp then
30077: LD_VAR 0 1
30081: NOT
30082: IFFALSE 30086
// exit ;
30084: GO 30112
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30086: LD_VAR 0 1
30090: PUSH
30091: LD_INT 1
30093: PPUSH
30094: LD_VAR 0 1
30098: PPUSH
30099: CALL_OW 12
30103: ARRAY
30104: PPUSH
30105: LD_INT 1
30107: PPUSH
30108: CALL_OW 234
// end ;
30112: PPOPN 1
30114: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30115: LD_EXP 55
30119: PUSH
30120: LD_EXP 103
30124: AND
30125: IFFALSE 30237
30127: GO 30129
30129: DISABLE
30130: LD_INT 0
30132: PPUSH
30133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30134: LD_ADDR_VAR 0 2
30138: PUSH
30139: LD_INT 22
30141: PUSH
30142: LD_OWVAR 2
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 2
30153: PUSH
30154: LD_INT 30
30156: PUSH
30157: LD_INT 27
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 30
30166: PUSH
30167: LD_INT 26
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 30
30176: PUSH
30177: LD_INT 28
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PPUSH
30194: CALL_OW 69
30198: ST_TO_ADDR
// if not tmp then
30199: LD_VAR 0 2
30203: NOT
30204: IFFALSE 30208
// exit ;
30206: GO 30237
// for i in tmp do
30208: LD_ADDR_VAR 0 1
30212: PUSH
30213: LD_VAR 0 2
30217: PUSH
30218: FOR_IN
30219: IFFALSE 30235
// SetLives ( i , 1 ) ;
30221: LD_VAR 0 1
30225: PPUSH
30226: LD_INT 1
30228: PPUSH
30229: CALL_OW 234
30233: GO 30218
30235: POP
30236: POP
// end ;
30237: PPOPN 2
30239: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30240: LD_EXP 55
30244: PUSH
30245: LD_EXP 104
30249: AND
30250: IFFALSE 30537
30252: GO 30254
30254: DISABLE
30255: LD_INT 0
30257: PPUSH
30258: PPUSH
30259: PPUSH
// begin i := rand ( 1 , 7 ) ;
30260: LD_ADDR_VAR 0 1
30264: PUSH
30265: LD_INT 1
30267: PPUSH
30268: LD_INT 7
30270: PPUSH
30271: CALL_OW 12
30275: ST_TO_ADDR
// case i of 1 :
30276: LD_VAR 0 1
30280: PUSH
30281: LD_INT 1
30283: DOUBLE
30284: EQUAL
30285: IFTRUE 30289
30287: GO 30299
30289: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30290: LD_STRING earthquake(getX(game), 0, 32)
30292: PPUSH
30293: CALL_OW 559
30297: GO 30537
30299: LD_INT 2
30301: DOUBLE
30302: EQUAL
30303: IFTRUE 30307
30305: GO 30321
30307: POP
// begin ToLua ( displayStucuk(); ) ;
30308: LD_STRING displayStucuk();
30310: PPUSH
30311: CALL_OW 559
// ResetFog ;
30315: CALL_OW 335
// end ; 3 :
30319: GO 30537
30321: LD_INT 3
30323: DOUBLE
30324: EQUAL
30325: IFTRUE 30329
30327: GO 30433
30329: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30330: LD_ADDR_VAR 0 2
30334: PUSH
30335: LD_INT 22
30337: PUSH
30338: LD_OWVAR 2
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 25
30349: PUSH
30350: LD_INT 1
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PPUSH
30361: CALL_OW 69
30365: ST_TO_ADDR
// if not tmp then
30366: LD_VAR 0 2
30370: NOT
30371: IFFALSE 30375
// exit ;
30373: GO 30537
// un := tmp [ rand ( 1 , tmp ) ] ;
30375: LD_ADDR_VAR 0 3
30379: PUSH
30380: LD_VAR 0 2
30384: PUSH
30385: LD_INT 1
30387: PPUSH
30388: LD_VAR 0 2
30392: PPUSH
30393: CALL_OW 12
30397: ARRAY
30398: ST_TO_ADDR
// if Crawls ( un ) then
30399: LD_VAR 0 3
30403: PPUSH
30404: CALL_OW 318
30408: IFFALSE 30419
// ComWalk ( un ) ;
30410: LD_VAR 0 3
30414: PPUSH
30415: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30419: LD_VAR 0 3
30423: PPUSH
30424: LD_INT 8
30426: PPUSH
30427: CALL_OW 336
// end ; 4 :
30431: GO 30537
30433: LD_INT 4
30435: DOUBLE
30436: EQUAL
30437: IFTRUE 30441
30439: GO 30515
30441: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30442: LD_ADDR_VAR 0 2
30446: PUSH
30447: LD_INT 22
30449: PUSH
30450: LD_OWVAR 2
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 30
30461: PUSH
30462: LD_INT 29
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PPUSH
30473: CALL_OW 69
30477: ST_TO_ADDR
// if not tmp then
30478: LD_VAR 0 2
30482: NOT
30483: IFFALSE 30487
// exit ;
30485: GO 30537
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30487: LD_VAR 0 2
30491: PUSH
30492: LD_INT 1
30494: ARRAY
30495: PPUSH
30496: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30500: LD_VAR 0 2
30504: PUSH
30505: LD_INT 1
30507: ARRAY
30508: PPUSH
30509: CALL_OW 65
// end ; 5 .. 7 :
30513: GO 30537
30515: LD_INT 5
30517: DOUBLE
30518: GREATEREQUAL
30519: IFFALSE 30527
30521: LD_INT 7
30523: DOUBLE
30524: LESSEQUAL
30525: IFTRUE 30529
30527: GO 30536
30529: POP
// StreamSibBomb ; end ;
30530: CALL 26774 0 0
30534: GO 30537
30536: POP
// end ;
30537: PPOPN 3
30539: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30540: LD_EXP 55
30544: PUSH
30545: LD_EXP 105
30549: AND
30550: IFFALSE 30706
30552: GO 30554
30554: DISABLE
30555: LD_INT 0
30557: PPUSH
30558: PPUSH
30559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30560: LD_ADDR_VAR 0 2
30564: PUSH
30565: LD_INT 81
30567: PUSH
30568: LD_OWVAR 2
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 2
30579: PUSH
30580: LD_INT 21
30582: PUSH
30583: LD_INT 1
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 21
30592: PUSH
30593: LD_INT 2
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: LIST
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PPUSH
30609: CALL_OW 69
30613: ST_TO_ADDR
// if not tmp then
30614: LD_VAR 0 2
30618: NOT
30619: IFFALSE 30623
// exit ;
30621: GO 30706
// p := 0 ;
30623: LD_ADDR_VAR 0 3
30627: PUSH
30628: LD_INT 0
30630: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30631: LD_INT 35
30633: PPUSH
30634: CALL_OW 67
// p := p + 1 ;
30638: LD_ADDR_VAR 0 3
30642: PUSH
30643: LD_VAR 0 3
30647: PUSH
30648: LD_INT 1
30650: PLUS
30651: ST_TO_ADDR
// for i in tmp do
30652: LD_ADDR_VAR 0 1
30656: PUSH
30657: LD_VAR 0 2
30661: PUSH
30662: FOR_IN
30663: IFFALSE 30694
// if GetLives ( i ) < 1000 then
30665: LD_VAR 0 1
30669: PPUSH
30670: CALL_OW 256
30674: PUSH
30675: LD_INT 1000
30677: LESS
30678: IFFALSE 30692
// SetLives ( i , 1000 ) ;
30680: LD_VAR 0 1
30684: PPUSH
30685: LD_INT 1000
30687: PPUSH
30688: CALL_OW 234
30692: GO 30662
30694: POP
30695: POP
// until p > 20 ;
30696: LD_VAR 0 3
30700: PUSH
30701: LD_INT 20
30703: GREATER
30704: IFFALSE 30631
// end ;
30706: PPOPN 3
30708: END
// every 0 0$1 trigger StreamModeActive and sTime do
30709: LD_EXP 55
30713: PUSH
30714: LD_EXP 106
30718: AND
30719: IFFALSE 30754
30721: GO 30723
30723: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30724: LD_INT 28
30726: PPUSH
30727: LD_OWVAR 2
30731: PPUSH
30732: LD_INT 2
30734: PPUSH
30735: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30739: LD_INT 30
30741: PPUSH
30742: LD_OWVAR 2
30746: PPUSH
30747: LD_INT 2
30749: PPUSH
30750: CALL_OW 322
// end ;
30754: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30755: LD_EXP 55
30759: PUSH
30760: LD_EXP 107
30764: AND
30765: IFFALSE 30886
30767: GO 30769
30769: DISABLE
30770: LD_INT 0
30772: PPUSH
30773: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30774: LD_ADDR_VAR 0 2
30778: PUSH
30779: LD_INT 22
30781: PUSH
30782: LD_OWVAR 2
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 21
30793: PUSH
30794: LD_INT 1
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 3
30803: PUSH
30804: LD_INT 23
30806: PUSH
30807: LD_INT 0
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: LIST
30822: PPUSH
30823: CALL_OW 69
30827: ST_TO_ADDR
// if not tmp then
30828: LD_VAR 0 2
30832: NOT
30833: IFFALSE 30837
// exit ;
30835: GO 30886
// for i in tmp do
30837: LD_ADDR_VAR 0 1
30841: PUSH
30842: LD_VAR 0 2
30846: PUSH
30847: FOR_IN
30848: IFFALSE 30884
// begin if Crawls ( i ) then
30850: LD_VAR 0 1
30854: PPUSH
30855: CALL_OW 318
30859: IFFALSE 30870
// ComWalk ( i ) ;
30861: LD_VAR 0 1
30865: PPUSH
30866: CALL_OW 138
// SetClass ( i , 2 ) ;
30870: LD_VAR 0 1
30874: PPUSH
30875: LD_INT 2
30877: PPUSH
30878: CALL_OW 336
// end ;
30882: GO 30847
30884: POP
30885: POP
// end ;
30886: PPOPN 2
30888: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30889: LD_EXP 55
30893: PUSH
30894: LD_EXP 108
30898: AND
30899: IFFALSE 31187
30901: GO 30903
30903: DISABLE
30904: LD_INT 0
30906: PPUSH
30907: PPUSH
30908: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30909: LD_OWVAR 2
30913: PPUSH
30914: LD_INT 9
30916: PPUSH
30917: LD_INT 1
30919: PPUSH
30920: LD_INT 1
30922: PPUSH
30923: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30927: LD_INT 9
30929: PPUSH
30930: LD_OWVAR 2
30934: PPUSH
30935: CALL_OW 343
// uc_side := 9 ;
30939: LD_ADDR_OWVAR 20
30943: PUSH
30944: LD_INT 9
30946: ST_TO_ADDR
// uc_nation := 2 ;
30947: LD_ADDR_OWVAR 21
30951: PUSH
30952: LD_INT 2
30954: ST_TO_ADDR
// hc_name := Dark Warrior ;
30955: LD_ADDR_OWVAR 26
30959: PUSH
30960: LD_STRING Dark Warrior
30962: ST_TO_ADDR
// hc_gallery :=  ;
30963: LD_ADDR_OWVAR 33
30967: PUSH
30968: LD_STRING 
30970: ST_TO_ADDR
// hc_noskilllimit := true ;
30971: LD_ADDR_OWVAR 76
30975: PUSH
30976: LD_INT 1
30978: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30979: LD_ADDR_OWVAR 31
30983: PUSH
30984: LD_INT 30
30986: PUSH
30987: LD_INT 30
30989: PUSH
30990: LD_INT 30
30992: PUSH
30993: LD_INT 30
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: ST_TO_ADDR
// un := CreateHuman ;
31002: LD_ADDR_VAR 0 3
31006: PUSH
31007: CALL_OW 44
31011: ST_TO_ADDR
// hc_noskilllimit := false ;
31012: LD_ADDR_OWVAR 76
31016: PUSH
31017: LD_INT 0
31019: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31020: LD_VAR 0 3
31024: PPUSH
31025: LD_INT 1
31027: PPUSH
31028: CALL_OW 51
// ToLua ( playRanger() ) ;
31032: LD_STRING playRanger()
31034: PPUSH
31035: CALL_OW 559
// p := 0 ;
31039: LD_ADDR_VAR 0 2
31043: PUSH
31044: LD_INT 0
31046: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31047: LD_INT 35
31049: PPUSH
31050: CALL_OW 67
// p := p + 1 ;
31054: LD_ADDR_VAR 0 2
31058: PUSH
31059: LD_VAR 0 2
31063: PUSH
31064: LD_INT 1
31066: PLUS
31067: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31068: LD_VAR 0 3
31072: PPUSH
31073: CALL_OW 256
31077: PUSH
31078: LD_INT 1000
31080: LESS
31081: IFFALSE 31095
// SetLives ( un , 1000 ) ;
31083: LD_VAR 0 3
31087: PPUSH
31088: LD_INT 1000
31090: PPUSH
31091: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31095: LD_VAR 0 3
31099: PPUSH
31100: LD_INT 81
31102: PUSH
31103: LD_OWVAR 2
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 91
31114: PUSH
31115: LD_VAR 0 3
31119: PUSH
31120: LD_INT 30
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: LIST
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PPUSH
31132: CALL_OW 69
31136: PPUSH
31137: LD_VAR 0 3
31141: PPUSH
31142: CALL_OW 74
31146: PPUSH
31147: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31151: LD_VAR 0 2
31155: PUSH
31156: LD_INT 80
31158: GREATER
31159: PUSH
31160: LD_VAR 0 3
31164: PPUSH
31165: CALL_OW 301
31169: OR
31170: IFFALSE 31047
// if un then
31172: LD_VAR 0 3
31176: IFFALSE 31187
// RemoveUnit ( un ) ;
31178: LD_VAR 0 3
31182: PPUSH
31183: CALL_OW 64
// end ;
31187: PPOPN 3
31189: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31190: LD_EXP 109
31194: IFFALSE 31310
31196: GO 31198
31198: DISABLE
31199: LD_INT 0
31201: PPUSH
31202: PPUSH
31203: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31204: LD_ADDR_VAR 0 2
31208: PUSH
31209: LD_INT 81
31211: PUSH
31212: LD_OWVAR 2
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 21
31223: PUSH
31224: LD_INT 1
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PPUSH
31235: CALL_OW 69
31239: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31240: LD_STRING playComputer()
31242: PPUSH
31243: CALL_OW 559
// if not tmp then
31247: LD_VAR 0 2
31251: NOT
31252: IFFALSE 31256
// exit ;
31254: GO 31310
// for i in tmp do
31256: LD_ADDR_VAR 0 1
31260: PUSH
31261: LD_VAR 0 2
31265: PUSH
31266: FOR_IN
31267: IFFALSE 31308
// for j := 1 to 4 do
31269: LD_ADDR_VAR 0 3
31273: PUSH
31274: DOUBLE
31275: LD_INT 1
31277: DEC
31278: ST_TO_ADDR
31279: LD_INT 4
31281: PUSH
31282: FOR_TO
31283: IFFALSE 31304
// SetSkill ( i , j , 10 ) ;
31285: LD_VAR 0 1
31289: PPUSH
31290: LD_VAR 0 3
31294: PPUSH
31295: LD_INT 10
31297: PPUSH
31298: CALL_OW 237
31302: GO 31282
31304: POP
31305: POP
31306: GO 31266
31308: POP
31309: POP
// end ;
31310: PPOPN 3
31312: END
// every 0 0$1 trigger s30 do var i , tmp ;
31313: LD_EXP 110
31317: IFFALSE 31386
31319: GO 31321
31321: DISABLE
31322: LD_INT 0
31324: PPUSH
31325: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31326: LD_ADDR_VAR 0 2
31330: PUSH
31331: LD_INT 22
31333: PUSH
31334: LD_OWVAR 2
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PPUSH
31343: CALL_OW 69
31347: ST_TO_ADDR
// if not tmp then
31348: LD_VAR 0 2
31352: NOT
31353: IFFALSE 31357
// exit ;
31355: GO 31386
// for i in tmp do
31357: LD_ADDR_VAR 0 1
31361: PUSH
31362: LD_VAR 0 2
31366: PUSH
31367: FOR_IN
31368: IFFALSE 31384
// SetLives ( i , 300 ) ;
31370: LD_VAR 0 1
31374: PPUSH
31375: LD_INT 300
31377: PPUSH
31378: CALL_OW 234
31382: GO 31367
31384: POP
31385: POP
// end ;
31386: PPOPN 2
31388: END
// every 0 0$1 trigger s60 do var i , tmp ;
31389: LD_EXP 111
31393: IFFALSE 31462
31395: GO 31397
31397: DISABLE
31398: LD_INT 0
31400: PPUSH
31401: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31402: LD_ADDR_VAR 0 2
31406: PUSH
31407: LD_INT 22
31409: PUSH
31410: LD_OWVAR 2
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PPUSH
31419: CALL_OW 69
31423: ST_TO_ADDR
// if not tmp then
31424: LD_VAR 0 2
31428: NOT
31429: IFFALSE 31433
// exit ;
31431: GO 31462
// for i in tmp do
31433: LD_ADDR_VAR 0 1
31437: PUSH
31438: LD_VAR 0 2
31442: PUSH
31443: FOR_IN
31444: IFFALSE 31460
// SetLives ( i , 600 ) ;
31446: LD_VAR 0 1
31450: PPUSH
31451: LD_INT 600
31453: PPUSH
31454: CALL_OW 234
31458: GO 31443
31460: POP
31461: POP
// end ;
31462: PPOPN 2
31464: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31465: LD_INT 0
31467: PPUSH
// case cmd of 301 :
31468: LD_VAR 0 1
31472: PUSH
31473: LD_INT 301
31475: DOUBLE
31476: EQUAL
31477: IFTRUE 31481
31479: GO 31513
31481: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31482: LD_VAR 0 6
31486: PPUSH
31487: LD_VAR 0 7
31491: PPUSH
31492: LD_VAR 0 8
31496: PPUSH
31497: LD_VAR 0 4
31501: PPUSH
31502: LD_VAR 0 5
31506: PPUSH
31507: CALL 32714 0 5
31511: GO 31634
31513: LD_INT 302
31515: DOUBLE
31516: EQUAL
31517: IFTRUE 31521
31519: GO 31558
31521: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31522: LD_VAR 0 6
31526: PPUSH
31527: LD_VAR 0 7
31531: PPUSH
31532: LD_VAR 0 8
31536: PPUSH
31537: LD_VAR 0 9
31541: PPUSH
31542: LD_VAR 0 4
31546: PPUSH
31547: LD_VAR 0 5
31551: PPUSH
31552: CALL 32805 0 6
31556: GO 31634
31558: LD_INT 303
31560: DOUBLE
31561: EQUAL
31562: IFTRUE 31566
31564: GO 31603
31566: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31567: LD_VAR 0 6
31571: PPUSH
31572: LD_VAR 0 7
31576: PPUSH
31577: LD_VAR 0 8
31581: PPUSH
31582: LD_VAR 0 9
31586: PPUSH
31587: LD_VAR 0 4
31591: PPUSH
31592: LD_VAR 0 5
31596: PPUSH
31597: CALL 31639 0 6
31601: GO 31634
31603: LD_INT 304
31605: DOUBLE
31606: EQUAL
31607: IFTRUE 31611
31609: GO 31633
31611: POP
// hHackTeleport ( unit , x , y ) ; end ;
31612: LD_VAR 0 2
31616: PPUSH
31617: LD_VAR 0 4
31621: PPUSH
31622: LD_VAR 0 5
31626: PPUSH
31627: CALL 33398 0 3
31631: GO 31634
31633: POP
// end ;
31634: LD_VAR 0 12
31638: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31639: LD_INT 0
31641: PPUSH
31642: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31643: LD_VAR 0 1
31647: PUSH
31648: LD_INT 1
31650: LESS
31651: PUSH
31652: LD_VAR 0 1
31656: PUSH
31657: LD_INT 3
31659: GREATER
31660: OR
31661: PUSH
31662: LD_VAR 0 5
31666: PPUSH
31667: LD_VAR 0 6
31671: PPUSH
31672: CALL_OW 428
31676: OR
31677: IFFALSE 31681
// exit ;
31679: GO 32401
// uc_side := your_side ;
31681: LD_ADDR_OWVAR 20
31685: PUSH
31686: LD_OWVAR 2
31690: ST_TO_ADDR
// uc_nation := nation ;
31691: LD_ADDR_OWVAR 21
31695: PUSH
31696: LD_VAR 0 1
31700: ST_TO_ADDR
// bc_level = 1 ;
31701: LD_ADDR_OWVAR 43
31705: PUSH
31706: LD_INT 1
31708: ST_TO_ADDR
// case btype of 1 :
31709: LD_VAR 0 2
31713: PUSH
31714: LD_INT 1
31716: DOUBLE
31717: EQUAL
31718: IFTRUE 31722
31720: GO 31733
31722: POP
// bc_type := b_depot ; 2 :
31723: LD_ADDR_OWVAR 42
31727: PUSH
31728: LD_INT 0
31730: ST_TO_ADDR
31731: GO 32345
31733: LD_INT 2
31735: DOUBLE
31736: EQUAL
31737: IFTRUE 31741
31739: GO 31752
31741: POP
// bc_type := b_warehouse ; 3 :
31742: LD_ADDR_OWVAR 42
31746: PUSH
31747: LD_INT 1
31749: ST_TO_ADDR
31750: GO 32345
31752: LD_INT 3
31754: DOUBLE
31755: EQUAL
31756: IFTRUE 31760
31758: GO 31771
31760: POP
// bc_type := b_lab ; 4 .. 9 :
31761: LD_ADDR_OWVAR 42
31765: PUSH
31766: LD_INT 6
31768: ST_TO_ADDR
31769: GO 32345
31771: LD_INT 4
31773: DOUBLE
31774: GREATEREQUAL
31775: IFFALSE 31783
31777: LD_INT 9
31779: DOUBLE
31780: LESSEQUAL
31781: IFTRUE 31785
31783: GO 31837
31785: POP
// begin bc_type := b_lab_half ;
31786: LD_ADDR_OWVAR 42
31790: PUSH
31791: LD_INT 7
31793: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31794: LD_ADDR_OWVAR 44
31798: PUSH
31799: LD_INT 10
31801: PUSH
31802: LD_INT 11
31804: PUSH
31805: LD_INT 12
31807: PUSH
31808: LD_INT 15
31810: PUSH
31811: LD_INT 14
31813: PUSH
31814: LD_INT 13
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: PUSH
31825: LD_VAR 0 2
31829: PUSH
31830: LD_INT 3
31832: MINUS
31833: ARRAY
31834: ST_TO_ADDR
// end ; 10 .. 13 :
31835: GO 32345
31837: LD_INT 10
31839: DOUBLE
31840: GREATEREQUAL
31841: IFFALSE 31849
31843: LD_INT 13
31845: DOUBLE
31846: LESSEQUAL
31847: IFTRUE 31851
31849: GO 31928
31851: POP
// begin bc_type := b_lab_full ;
31852: LD_ADDR_OWVAR 42
31856: PUSH
31857: LD_INT 8
31859: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31860: LD_ADDR_OWVAR 44
31864: PUSH
31865: LD_INT 10
31867: PUSH
31868: LD_INT 12
31870: PUSH
31871: LD_INT 14
31873: PUSH
31874: LD_INT 13
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: PUSH
31883: LD_VAR 0 2
31887: PUSH
31888: LD_INT 9
31890: MINUS
31891: ARRAY
31892: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31893: LD_ADDR_OWVAR 45
31897: PUSH
31898: LD_INT 11
31900: PUSH
31901: LD_INT 15
31903: PUSH
31904: LD_INT 12
31906: PUSH
31907: LD_INT 15
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: PUSH
31916: LD_VAR 0 2
31920: PUSH
31921: LD_INT 9
31923: MINUS
31924: ARRAY
31925: ST_TO_ADDR
// end ; 14 :
31926: GO 32345
31928: LD_INT 14
31930: DOUBLE
31931: EQUAL
31932: IFTRUE 31936
31934: GO 31947
31936: POP
// bc_type := b_workshop ; 15 :
31937: LD_ADDR_OWVAR 42
31941: PUSH
31942: LD_INT 2
31944: ST_TO_ADDR
31945: GO 32345
31947: LD_INT 15
31949: DOUBLE
31950: EQUAL
31951: IFTRUE 31955
31953: GO 31966
31955: POP
// bc_type := b_factory ; 16 :
31956: LD_ADDR_OWVAR 42
31960: PUSH
31961: LD_INT 3
31963: ST_TO_ADDR
31964: GO 32345
31966: LD_INT 16
31968: DOUBLE
31969: EQUAL
31970: IFTRUE 31974
31972: GO 31985
31974: POP
// bc_type := b_ext_gun ; 17 :
31975: LD_ADDR_OWVAR 42
31979: PUSH
31980: LD_INT 17
31982: ST_TO_ADDR
31983: GO 32345
31985: LD_INT 17
31987: DOUBLE
31988: EQUAL
31989: IFTRUE 31993
31991: GO 32021
31993: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31994: LD_ADDR_OWVAR 42
31998: PUSH
31999: LD_INT 19
32001: PUSH
32002: LD_INT 23
32004: PUSH
32005: LD_INT 19
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: LIST
32012: PUSH
32013: LD_VAR 0 1
32017: ARRAY
32018: ST_TO_ADDR
32019: GO 32345
32021: LD_INT 18
32023: DOUBLE
32024: EQUAL
32025: IFTRUE 32029
32027: GO 32040
32029: POP
// bc_type := b_ext_radar ; 19 :
32030: LD_ADDR_OWVAR 42
32034: PUSH
32035: LD_INT 20
32037: ST_TO_ADDR
32038: GO 32345
32040: LD_INT 19
32042: DOUBLE
32043: EQUAL
32044: IFTRUE 32048
32046: GO 32059
32048: POP
// bc_type := b_ext_radio ; 20 :
32049: LD_ADDR_OWVAR 42
32053: PUSH
32054: LD_INT 22
32056: ST_TO_ADDR
32057: GO 32345
32059: LD_INT 20
32061: DOUBLE
32062: EQUAL
32063: IFTRUE 32067
32065: GO 32078
32067: POP
// bc_type := b_ext_siberium ; 21 :
32068: LD_ADDR_OWVAR 42
32072: PUSH
32073: LD_INT 21
32075: ST_TO_ADDR
32076: GO 32345
32078: LD_INT 21
32080: DOUBLE
32081: EQUAL
32082: IFTRUE 32086
32084: GO 32097
32086: POP
// bc_type := b_ext_computer ; 22 :
32087: LD_ADDR_OWVAR 42
32091: PUSH
32092: LD_INT 24
32094: ST_TO_ADDR
32095: GO 32345
32097: LD_INT 22
32099: DOUBLE
32100: EQUAL
32101: IFTRUE 32105
32103: GO 32116
32105: POP
// bc_type := b_ext_track ; 23 :
32106: LD_ADDR_OWVAR 42
32110: PUSH
32111: LD_INT 16
32113: ST_TO_ADDR
32114: GO 32345
32116: LD_INT 23
32118: DOUBLE
32119: EQUAL
32120: IFTRUE 32124
32122: GO 32135
32124: POP
// bc_type := b_ext_laser ; 24 :
32125: LD_ADDR_OWVAR 42
32129: PUSH
32130: LD_INT 25
32132: ST_TO_ADDR
32133: GO 32345
32135: LD_INT 24
32137: DOUBLE
32138: EQUAL
32139: IFTRUE 32143
32141: GO 32154
32143: POP
// bc_type := b_control_tower ; 25 :
32144: LD_ADDR_OWVAR 42
32148: PUSH
32149: LD_INT 36
32151: ST_TO_ADDR
32152: GO 32345
32154: LD_INT 25
32156: DOUBLE
32157: EQUAL
32158: IFTRUE 32162
32160: GO 32173
32162: POP
// bc_type := b_breastwork ; 26 :
32163: LD_ADDR_OWVAR 42
32167: PUSH
32168: LD_INT 31
32170: ST_TO_ADDR
32171: GO 32345
32173: LD_INT 26
32175: DOUBLE
32176: EQUAL
32177: IFTRUE 32181
32179: GO 32192
32181: POP
// bc_type := b_bunker ; 27 :
32182: LD_ADDR_OWVAR 42
32186: PUSH
32187: LD_INT 32
32189: ST_TO_ADDR
32190: GO 32345
32192: LD_INT 27
32194: DOUBLE
32195: EQUAL
32196: IFTRUE 32200
32198: GO 32211
32200: POP
// bc_type := b_turret ; 28 :
32201: LD_ADDR_OWVAR 42
32205: PUSH
32206: LD_INT 33
32208: ST_TO_ADDR
32209: GO 32345
32211: LD_INT 28
32213: DOUBLE
32214: EQUAL
32215: IFTRUE 32219
32217: GO 32230
32219: POP
// bc_type := b_armoury ; 29 :
32220: LD_ADDR_OWVAR 42
32224: PUSH
32225: LD_INT 4
32227: ST_TO_ADDR
32228: GO 32345
32230: LD_INT 29
32232: DOUBLE
32233: EQUAL
32234: IFTRUE 32238
32236: GO 32249
32238: POP
// bc_type := b_barracks ; 30 :
32239: LD_ADDR_OWVAR 42
32243: PUSH
32244: LD_INT 5
32246: ST_TO_ADDR
32247: GO 32345
32249: LD_INT 30
32251: DOUBLE
32252: EQUAL
32253: IFTRUE 32257
32255: GO 32268
32257: POP
// bc_type := b_solar_power ; 31 :
32258: LD_ADDR_OWVAR 42
32262: PUSH
32263: LD_INT 27
32265: ST_TO_ADDR
32266: GO 32345
32268: LD_INT 31
32270: DOUBLE
32271: EQUAL
32272: IFTRUE 32276
32274: GO 32287
32276: POP
// bc_type := b_oil_power ; 32 :
32277: LD_ADDR_OWVAR 42
32281: PUSH
32282: LD_INT 26
32284: ST_TO_ADDR
32285: GO 32345
32287: LD_INT 32
32289: DOUBLE
32290: EQUAL
32291: IFTRUE 32295
32293: GO 32306
32295: POP
// bc_type := b_siberite_power ; 33 :
32296: LD_ADDR_OWVAR 42
32300: PUSH
32301: LD_INT 28
32303: ST_TO_ADDR
32304: GO 32345
32306: LD_INT 33
32308: DOUBLE
32309: EQUAL
32310: IFTRUE 32314
32312: GO 32325
32314: POP
// bc_type := b_oil_mine ; 34 :
32315: LD_ADDR_OWVAR 42
32319: PUSH
32320: LD_INT 29
32322: ST_TO_ADDR
32323: GO 32345
32325: LD_INT 34
32327: DOUBLE
32328: EQUAL
32329: IFTRUE 32333
32331: GO 32344
32333: POP
// bc_type := b_siberite_mine ; end ;
32334: LD_ADDR_OWVAR 42
32338: PUSH
32339: LD_INT 30
32341: ST_TO_ADDR
32342: GO 32345
32344: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32345: LD_ADDR_VAR 0 8
32349: PUSH
32350: LD_VAR 0 5
32354: PPUSH
32355: LD_VAR 0 6
32359: PPUSH
32360: LD_VAR 0 3
32364: PPUSH
32365: CALL_OW 47
32369: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32370: LD_OWVAR 42
32374: PUSH
32375: LD_INT 32
32377: PUSH
32378: LD_INT 33
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: IN
32385: IFFALSE 32401
// PlaceWeaponTurret ( b , weapon ) ;
32387: LD_VAR 0 8
32391: PPUSH
32392: LD_VAR 0 4
32396: PPUSH
32397: CALL_OW 431
// end ;
32401: LD_VAR 0 7
32405: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32406: LD_INT 0
32408: PPUSH
32409: PPUSH
32410: PPUSH
32411: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32412: LD_ADDR_VAR 0 4
32416: PUSH
32417: LD_INT 22
32419: PUSH
32420: LD_OWVAR 2
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 2
32431: PUSH
32432: LD_INT 30
32434: PUSH
32435: LD_INT 0
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 30
32444: PUSH
32445: LD_INT 1
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: LIST
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PPUSH
32461: CALL_OW 69
32465: ST_TO_ADDR
// if not tmp then
32466: LD_VAR 0 4
32470: NOT
32471: IFFALSE 32475
// exit ;
32473: GO 32534
// for i in tmp do
32475: LD_ADDR_VAR 0 2
32479: PUSH
32480: LD_VAR 0 4
32484: PUSH
32485: FOR_IN
32486: IFFALSE 32532
// for j = 1 to 3 do
32488: LD_ADDR_VAR 0 3
32492: PUSH
32493: DOUBLE
32494: LD_INT 1
32496: DEC
32497: ST_TO_ADDR
32498: LD_INT 3
32500: PUSH
32501: FOR_TO
32502: IFFALSE 32528
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32504: LD_VAR 0 2
32508: PPUSH
32509: CALL_OW 274
32513: PPUSH
32514: LD_VAR 0 3
32518: PPUSH
32519: LD_INT 99999
32521: PPUSH
32522: CALL_OW 277
32526: GO 32501
32528: POP
32529: POP
32530: GO 32485
32532: POP
32533: POP
// end ;
32534: LD_VAR 0 1
32538: RET
// export function hHackSetLevel10 ; var i , j ; begin
32539: LD_INT 0
32541: PPUSH
32542: PPUSH
32543: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32544: LD_ADDR_VAR 0 2
32548: PUSH
32549: LD_INT 21
32551: PUSH
32552: LD_INT 1
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PPUSH
32559: CALL_OW 69
32563: PUSH
32564: FOR_IN
32565: IFFALSE 32617
// if IsSelected ( i ) then
32567: LD_VAR 0 2
32571: PPUSH
32572: CALL_OW 306
32576: IFFALSE 32615
// begin for j := 1 to 4 do
32578: LD_ADDR_VAR 0 3
32582: PUSH
32583: DOUBLE
32584: LD_INT 1
32586: DEC
32587: ST_TO_ADDR
32588: LD_INT 4
32590: PUSH
32591: FOR_TO
32592: IFFALSE 32613
// SetSkill ( i , j , 10 ) ;
32594: LD_VAR 0 2
32598: PPUSH
32599: LD_VAR 0 3
32603: PPUSH
32604: LD_INT 10
32606: PPUSH
32607: CALL_OW 237
32611: GO 32591
32613: POP
32614: POP
// end ;
32615: GO 32564
32617: POP
32618: POP
// end ;
32619: LD_VAR 0 1
32623: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32624: LD_INT 0
32626: PPUSH
32627: PPUSH
32628: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32629: LD_ADDR_VAR 0 2
32633: PUSH
32634: LD_INT 22
32636: PUSH
32637: LD_OWVAR 2
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 21
32648: PUSH
32649: LD_INT 1
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PPUSH
32660: CALL_OW 69
32664: PUSH
32665: FOR_IN
32666: IFFALSE 32707
// begin for j := 1 to 4 do
32668: LD_ADDR_VAR 0 3
32672: PUSH
32673: DOUBLE
32674: LD_INT 1
32676: DEC
32677: ST_TO_ADDR
32678: LD_INT 4
32680: PUSH
32681: FOR_TO
32682: IFFALSE 32703
// SetSkill ( i , j , 10 ) ;
32684: LD_VAR 0 2
32688: PPUSH
32689: LD_VAR 0 3
32693: PPUSH
32694: LD_INT 10
32696: PPUSH
32697: CALL_OW 237
32701: GO 32681
32703: POP
32704: POP
// end ;
32705: GO 32665
32707: POP
32708: POP
// end ;
32709: LD_VAR 0 1
32713: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32714: LD_INT 0
32716: PPUSH
// uc_side := your_side ;
32717: LD_ADDR_OWVAR 20
32721: PUSH
32722: LD_OWVAR 2
32726: ST_TO_ADDR
// uc_nation := nation ;
32727: LD_ADDR_OWVAR 21
32731: PUSH
32732: LD_VAR 0 1
32736: ST_TO_ADDR
// InitHc ;
32737: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32741: LD_INT 0
32743: PPUSH
32744: LD_VAR 0 2
32748: PPUSH
32749: LD_VAR 0 3
32753: PPUSH
32754: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32758: LD_VAR 0 4
32762: PPUSH
32763: LD_VAR 0 5
32767: PPUSH
32768: CALL_OW 428
32772: PUSH
32773: LD_INT 0
32775: EQUAL
32776: IFFALSE 32800
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32778: CALL_OW 44
32782: PPUSH
32783: LD_VAR 0 4
32787: PPUSH
32788: LD_VAR 0 5
32792: PPUSH
32793: LD_INT 1
32795: PPUSH
32796: CALL_OW 48
// end ;
32800: LD_VAR 0 6
32804: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32805: LD_INT 0
32807: PPUSH
32808: PPUSH
// uc_side := your_side ;
32809: LD_ADDR_OWVAR 20
32813: PUSH
32814: LD_OWVAR 2
32818: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32819: LD_VAR 0 1
32823: PUSH
32824: LD_INT 1
32826: PUSH
32827: LD_INT 2
32829: PUSH
32830: LD_INT 3
32832: PUSH
32833: LD_INT 4
32835: PUSH
32836: LD_INT 5
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: IN
32846: IFFALSE 32858
// uc_nation := nation_american else
32848: LD_ADDR_OWVAR 21
32852: PUSH
32853: LD_INT 1
32855: ST_TO_ADDR
32856: GO 32901
// if chassis in [ 11 , 12 , 13 , 14 ] then
32858: LD_VAR 0 1
32862: PUSH
32863: LD_INT 11
32865: PUSH
32866: LD_INT 12
32868: PUSH
32869: LD_INT 13
32871: PUSH
32872: LD_INT 14
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: IN
32881: IFFALSE 32893
// uc_nation := nation_arabian else
32883: LD_ADDR_OWVAR 21
32887: PUSH
32888: LD_INT 2
32890: ST_TO_ADDR
32891: GO 32901
// uc_nation := nation_russian ;
32893: LD_ADDR_OWVAR 21
32897: PUSH
32898: LD_INT 3
32900: ST_TO_ADDR
// vc_chassis := chassis ;
32901: LD_ADDR_OWVAR 37
32905: PUSH
32906: LD_VAR 0 1
32910: ST_TO_ADDR
// vc_engine := engine ;
32911: LD_ADDR_OWVAR 39
32915: PUSH
32916: LD_VAR 0 2
32920: ST_TO_ADDR
// vc_control := control ;
32921: LD_ADDR_OWVAR 38
32925: PUSH
32926: LD_VAR 0 3
32930: ST_TO_ADDR
// vc_weapon := weapon ;
32931: LD_ADDR_OWVAR 40
32935: PUSH
32936: LD_VAR 0 4
32940: ST_TO_ADDR
// un := CreateVehicle ;
32941: LD_ADDR_VAR 0 8
32945: PUSH
32946: CALL_OW 45
32950: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32951: LD_VAR 0 8
32955: PPUSH
32956: LD_INT 0
32958: PPUSH
32959: LD_INT 5
32961: PPUSH
32962: CALL_OW 12
32966: PPUSH
32967: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32971: LD_VAR 0 8
32975: PPUSH
32976: LD_VAR 0 5
32980: PPUSH
32981: LD_VAR 0 6
32985: PPUSH
32986: LD_INT 1
32988: PPUSH
32989: CALL_OW 48
// end ;
32993: LD_VAR 0 7
32997: RET
// export hInvincible ; every 1 do
32998: GO 33000
33000: DISABLE
// hInvincible := [ ] ;
33001: LD_ADDR_EXP 112
33005: PUSH
33006: EMPTY
33007: ST_TO_ADDR
33008: END
// every 10 do var i ;
33009: GO 33011
33011: DISABLE
33012: LD_INT 0
33014: PPUSH
// begin enable ;
33015: ENABLE
// if not hInvincible then
33016: LD_EXP 112
33020: NOT
33021: IFFALSE 33025
// exit ;
33023: GO 33069
// for i in hInvincible do
33025: LD_ADDR_VAR 0 1
33029: PUSH
33030: LD_EXP 112
33034: PUSH
33035: FOR_IN
33036: IFFALSE 33067
// if GetLives ( i ) < 1000 then
33038: LD_VAR 0 1
33042: PPUSH
33043: CALL_OW 256
33047: PUSH
33048: LD_INT 1000
33050: LESS
33051: IFFALSE 33065
// SetLives ( i , 1000 ) ;
33053: LD_VAR 0 1
33057: PPUSH
33058: LD_INT 1000
33060: PPUSH
33061: CALL_OW 234
33065: GO 33035
33067: POP
33068: POP
// end ;
33069: PPOPN 1
33071: END
// export function hHackInvincible ; var i ; begin
33072: LD_INT 0
33074: PPUSH
33075: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33076: LD_ADDR_VAR 0 2
33080: PUSH
33081: LD_INT 2
33083: PUSH
33084: LD_INT 21
33086: PUSH
33087: LD_INT 1
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 21
33096: PUSH
33097: LD_INT 2
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: LIST
33108: PPUSH
33109: CALL_OW 69
33113: PUSH
33114: FOR_IN
33115: IFFALSE 33176
// if IsSelected ( i ) then
33117: LD_VAR 0 2
33121: PPUSH
33122: CALL_OW 306
33126: IFFALSE 33174
// begin if i in hInvincible then
33128: LD_VAR 0 2
33132: PUSH
33133: LD_EXP 112
33137: IN
33138: IFFALSE 33158
// hInvincible := hInvincible diff i else
33140: LD_ADDR_EXP 112
33144: PUSH
33145: LD_EXP 112
33149: PUSH
33150: LD_VAR 0 2
33154: DIFF
33155: ST_TO_ADDR
33156: GO 33174
// hInvincible := hInvincible union i ;
33158: LD_ADDR_EXP 112
33162: PUSH
33163: LD_EXP 112
33167: PUSH
33168: LD_VAR 0 2
33172: UNION
33173: ST_TO_ADDR
// end ;
33174: GO 33114
33176: POP
33177: POP
// end ;
33178: LD_VAR 0 1
33182: RET
// export function hHackInvisible ; var i , j ; begin
33183: LD_INT 0
33185: PPUSH
33186: PPUSH
33187: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33188: LD_ADDR_VAR 0 2
33192: PUSH
33193: LD_INT 21
33195: PUSH
33196: LD_INT 1
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PPUSH
33203: CALL_OW 69
33207: PUSH
33208: FOR_IN
33209: IFFALSE 33233
// if IsSelected ( i ) then
33211: LD_VAR 0 2
33215: PPUSH
33216: CALL_OW 306
33220: IFFALSE 33231
// ComForceInvisible ( i ) ;
33222: LD_VAR 0 2
33226: PPUSH
33227: CALL_OW 496
33231: GO 33208
33233: POP
33234: POP
// end ;
33235: LD_VAR 0 1
33239: RET
// export function hHackChangeYourSide ; begin
33240: LD_INT 0
33242: PPUSH
// if your_side = 8 then
33243: LD_OWVAR 2
33247: PUSH
33248: LD_INT 8
33250: EQUAL
33251: IFFALSE 33263
// your_side := 0 else
33253: LD_ADDR_OWVAR 2
33257: PUSH
33258: LD_INT 0
33260: ST_TO_ADDR
33261: GO 33277
// your_side := your_side + 1 ;
33263: LD_ADDR_OWVAR 2
33267: PUSH
33268: LD_OWVAR 2
33272: PUSH
33273: LD_INT 1
33275: PLUS
33276: ST_TO_ADDR
// end ;
33277: LD_VAR 0 1
33281: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33282: LD_INT 0
33284: PPUSH
33285: PPUSH
33286: PPUSH
// for i in all_units do
33287: LD_ADDR_VAR 0 2
33291: PUSH
33292: LD_OWVAR 3
33296: PUSH
33297: FOR_IN
33298: IFFALSE 33376
// if IsSelected ( i ) then
33300: LD_VAR 0 2
33304: PPUSH
33305: CALL_OW 306
33309: IFFALSE 33374
// begin j := GetSide ( i ) ;
33311: LD_ADDR_VAR 0 3
33315: PUSH
33316: LD_VAR 0 2
33320: PPUSH
33321: CALL_OW 255
33325: ST_TO_ADDR
// if j = 8 then
33326: LD_VAR 0 3
33330: PUSH
33331: LD_INT 8
33333: EQUAL
33334: IFFALSE 33346
// j := 0 else
33336: LD_ADDR_VAR 0 3
33340: PUSH
33341: LD_INT 0
33343: ST_TO_ADDR
33344: GO 33360
// j := j + 1 ;
33346: LD_ADDR_VAR 0 3
33350: PUSH
33351: LD_VAR 0 3
33355: PUSH
33356: LD_INT 1
33358: PLUS
33359: ST_TO_ADDR
// SetSide ( i , j ) ;
33360: LD_VAR 0 2
33364: PPUSH
33365: LD_VAR 0 3
33369: PPUSH
33370: CALL_OW 235
// end ;
33374: GO 33297
33376: POP
33377: POP
// end ;
33378: LD_VAR 0 1
33382: RET
// export function hHackFog ; begin
33383: LD_INT 0
33385: PPUSH
// FogOff ( true ) ;
33386: LD_INT 1
33388: PPUSH
33389: CALL_OW 344
// end ;
33393: LD_VAR 0 1
33397: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33398: LD_INT 0
33400: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33401: LD_VAR 0 1
33405: PPUSH
33406: LD_VAR 0 2
33410: PPUSH
33411: LD_VAR 0 3
33415: PPUSH
33416: LD_INT 1
33418: PPUSH
33419: LD_INT 1
33421: PPUSH
33422: CALL_OW 483
// CenterOnXY ( x , y ) ;
33426: LD_VAR 0 2
33430: PPUSH
33431: LD_VAR 0 3
33435: PPUSH
33436: CALL_OW 84
// end ;
33440: LD_VAR 0 4
33444: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33445: LD_INT 0
33447: PPUSH
33448: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33449: LD_VAR 0 1
33453: NOT
33454: PUSH
33455: LD_VAR 0 2
33459: PPUSH
33460: LD_VAR 0 3
33464: PPUSH
33465: CALL_OW 488
33469: NOT
33470: OR
33471: PUSH
33472: LD_VAR 0 1
33476: PPUSH
33477: CALL_OW 266
33481: PUSH
33482: LD_INT 3
33484: NONEQUAL
33485: PUSH
33486: LD_VAR 0 1
33490: PPUSH
33491: CALL_OW 247
33495: PUSH
33496: LD_INT 1
33498: EQUAL
33499: NOT
33500: AND
33501: OR
33502: IFFALSE 33506
// exit ;
33504: GO 33655
// if GetType ( factory ) = unit_human then
33506: LD_VAR 0 1
33510: PPUSH
33511: CALL_OW 247
33515: PUSH
33516: LD_INT 1
33518: EQUAL
33519: IFFALSE 33536
// factory := IsInUnit ( factory ) ;
33521: LD_ADDR_VAR 0 1
33525: PUSH
33526: LD_VAR 0 1
33530: PPUSH
33531: CALL_OW 310
33535: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33536: LD_VAR 0 1
33540: PPUSH
33541: CALL_OW 266
33545: PUSH
33546: LD_INT 3
33548: NONEQUAL
33549: IFFALSE 33553
// exit ;
33551: GO 33655
// if HexInfo ( x , y ) = factory then
33553: LD_VAR 0 2
33557: PPUSH
33558: LD_VAR 0 3
33562: PPUSH
33563: CALL_OW 428
33567: PUSH
33568: LD_VAR 0 1
33572: EQUAL
33573: IFFALSE 33600
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33575: LD_ADDR_EXP 113
33579: PUSH
33580: LD_EXP 113
33584: PPUSH
33585: LD_VAR 0 1
33589: PPUSH
33590: LD_INT 0
33592: PPUSH
33593: CALL_OW 1
33597: ST_TO_ADDR
33598: GO 33651
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33600: LD_ADDR_EXP 113
33604: PUSH
33605: LD_EXP 113
33609: PPUSH
33610: LD_VAR 0 1
33614: PPUSH
33615: LD_VAR 0 1
33619: PPUSH
33620: CALL_OW 255
33624: PUSH
33625: LD_VAR 0 1
33629: PUSH
33630: LD_VAR 0 2
33634: PUSH
33635: LD_VAR 0 3
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: PPUSH
33646: CALL_OW 1
33650: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33651: CALL 33660 0 0
// end ;
33655: LD_VAR 0 4
33659: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33660: LD_INT 0
33662: PPUSH
33663: PPUSH
33664: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33665: LD_STRING resetFactoryWaypoint();
33667: PPUSH
33668: CALL_OW 559
// if factoryWaypoints then
33672: LD_EXP 113
33676: IFFALSE 33802
// begin list := PrepareArray ( factoryWaypoints ) ;
33678: LD_ADDR_VAR 0 3
33682: PUSH
33683: LD_EXP 113
33687: PPUSH
33688: CALL 75982 0 1
33692: ST_TO_ADDR
// for i := 1 to list do
33693: LD_ADDR_VAR 0 2
33697: PUSH
33698: DOUBLE
33699: LD_INT 1
33701: DEC
33702: ST_TO_ADDR
33703: LD_VAR 0 3
33707: PUSH
33708: FOR_TO
33709: IFFALSE 33800
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33711: LD_STRING setFactoryWaypointXY(
33713: PUSH
33714: LD_VAR 0 3
33718: PUSH
33719: LD_VAR 0 2
33723: ARRAY
33724: PUSH
33725: LD_INT 1
33727: ARRAY
33728: STR
33729: PUSH
33730: LD_STRING ,
33732: STR
33733: PUSH
33734: LD_VAR 0 3
33738: PUSH
33739: LD_VAR 0 2
33743: ARRAY
33744: PUSH
33745: LD_INT 2
33747: ARRAY
33748: STR
33749: PUSH
33750: LD_STRING ,
33752: STR
33753: PUSH
33754: LD_VAR 0 3
33758: PUSH
33759: LD_VAR 0 2
33763: ARRAY
33764: PUSH
33765: LD_INT 3
33767: ARRAY
33768: STR
33769: PUSH
33770: LD_STRING ,
33772: STR
33773: PUSH
33774: LD_VAR 0 3
33778: PUSH
33779: LD_VAR 0 2
33783: ARRAY
33784: PUSH
33785: LD_INT 4
33787: ARRAY
33788: STR
33789: PUSH
33790: LD_STRING )
33792: STR
33793: PPUSH
33794: CALL_OW 559
33798: GO 33708
33800: POP
33801: POP
// end ; end ;
33802: LD_VAR 0 1
33806: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33807: LD_INT 0
33809: PPUSH
// if HexInfo ( x , y ) = warehouse then
33810: LD_VAR 0 2
33814: PPUSH
33815: LD_VAR 0 3
33819: PPUSH
33820: CALL_OW 428
33824: PUSH
33825: LD_VAR 0 1
33829: EQUAL
33830: IFFALSE 33857
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33832: LD_ADDR_EXP 114
33836: PUSH
33837: LD_EXP 114
33841: PPUSH
33842: LD_VAR 0 1
33846: PPUSH
33847: LD_INT 0
33849: PPUSH
33850: CALL_OW 1
33854: ST_TO_ADDR
33855: GO 33908
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33857: LD_ADDR_EXP 114
33861: PUSH
33862: LD_EXP 114
33866: PPUSH
33867: LD_VAR 0 1
33871: PPUSH
33872: LD_VAR 0 1
33876: PPUSH
33877: CALL_OW 255
33881: PUSH
33882: LD_VAR 0 1
33886: PUSH
33887: LD_VAR 0 2
33891: PUSH
33892: LD_VAR 0 3
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: PPUSH
33903: CALL_OW 1
33907: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33908: CALL 33917 0 0
// end ;
33912: LD_VAR 0 4
33916: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33917: LD_INT 0
33919: PPUSH
33920: PPUSH
33921: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33922: LD_STRING resetWarehouseGatheringPoints();
33924: PPUSH
33925: CALL_OW 559
// if warehouseGatheringPoints then
33929: LD_EXP 114
33933: IFFALSE 34059
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33935: LD_ADDR_VAR 0 3
33939: PUSH
33940: LD_EXP 114
33944: PPUSH
33945: CALL 75982 0 1
33949: ST_TO_ADDR
// for i := 1 to list do
33950: LD_ADDR_VAR 0 2
33954: PUSH
33955: DOUBLE
33956: LD_INT 1
33958: DEC
33959: ST_TO_ADDR
33960: LD_VAR 0 3
33964: PUSH
33965: FOR_TO
33966: IFFALSE 34057
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33968: LD_STRING setWarehouseGatheringPointXY(
33970: PUSH
33971: LD_VAR 0 3
33975: PUSH
33976: LD_VAR 0 2
33980: ARRAY
33981: PUSH
33982: LD_INT 1
33984: ARRAY
33985: STR
33986: PUSH
33987: LD_STRING ,
33989: STR
33990: PUSH
33991: LD_VAR 0 3
33995: PUSH
33996: LD_VAR 0 2
34000: ARRAY
34001: PUSH
34002: LD_INT 2
34004: ARRAY
34005: STR
34006: PUSH
34007: LD_STRING ,
34009: STR
34010: PUSH
34011: LD_VAR 0 3
34015: PUSH
34016: LD_VAR 0 2
34020: ARRAY
34021: PUSH
34022: LD_INT 3
34024: ARRAY
34025: STR
34026: PUSH
34027: LD_STRING ,
34029: STR
34030: PUSH
34031: LD_VAR 0 3
34035: PUSH
34036: LD_VAR 0 2
34040: ARRAY
34041: PUSH
34042: LD_INT 4
34044: ARRAY
34045: STR
34046: PUSH
34047: LD_STRING )
34049: STR
34050: PPUSH
34051: CALL_OW 559
34055: GO 33965
34057: POP
34058: POP
// end ; end ;
34059: LD_VAR 0 1
34063: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34064: LD_EXP 114
34068: IFFALSE 34753
34070: GO 34072
34072: DISABLE
34073: LD_INT 0
34075: PPUSH
34076: PPUSH
34077: PPUSH
34078: PPUSH
34079: PPUSH
34080: PPUSH
34081: PPUSH
34082: PPUSH
34083: PPUSH
// begin enable ;
34084: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34085: LD_ADDR_VAR 0 3
34089: PUSH
34090: LD_EXP 114
34094: PPUSH
34095: CALL 75982 0 1
34099: ST_TO_ADDR
// if not list then
34100: LD_VAR 0 3
34104: NOT
34105: IFFALSE 34109
// exit ;
34107: GO 34753
// for i := 1 to list do
34109: LD_ADDR_VAR 0 1
34113: PUSH
34114: DOUBLE
34115: LD_INT 1
34117: DEC
34118: ST_TO_ADDR
34119: LD_VAR 0 3
34123: PUSH
34124: FOR_TO
34125: IFFALSE 34751
// begin depot := list [ i ] [ 2 ] ;
34127: LD_ADDR_VAR 0 8
34131: PUSH
34132: LD_VAR 0 3
34136: PUSH
34137: LD_VAR 0 1
34141: ARRAY
34142: PUSH
34143: LD_INT 2
34145: ARRAY
34146: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34147: LD_ADDR_VAR 0 5
34151: PUSH
34152: LD_VAR 0 3
34156: PUSH
34157: LD_VAR 0 1
34161: ARRAY
34162: PUSH
34163: LD_INT 1
34165: ARRAY
34166: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34167: LD_VAR 0 8
34171: PPUSH
34172: CALL_OW 301
34176: PUSH
34177: LD_VAR 0 5
34181: PUSH
34182: LD_VAR 0 8
34186: PPUSH
34187: CALL_OW 255
34191: NONEQUAL
34192: OR
34193: IFFALSE 34222
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34195: LD_ADDR_EXP 114
34199: PUSH
34200: LD_EXP 114
34204: PPUSH
34205: LD_VAR 0 8
34209: PPUSH
34210: LD_INT 0
34212: PPUSH
34213: CALL_OW 1
34217: ST_TO_ADDR
// exit ;
34218: POP
34219: POP
34220: GO 34753
// end ; x := list [ i ] [ 3 ] ;
34222: LD_ADDR_VAR 0 6
34226: PUSH
34227: LD_VAR 0 3
34231: PUSH
34232: LD_VAR 0 1
34236: ARRAY
34237: PUSH
34238: LD_INT 3
34240: ARRAY
34241: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34242: LD_ADDR_VAR 0 7
34246: PUSH
34247: LD_VAR 0 3
34251: PUSH
34252: LD_VAR 0 1
34256: ARRAY
34257: PUSH
34258: LD_INT 4
34260: ARRAY
34261: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34262: LD_ADDR_VAR 0 9
34266: PUSH
34267: LD_VAR 0 6
34271: PPUSH
34272: LD_VAR 0 7
34276: PPUSH
34277: LD_INT 16
34279: PPUSH
34280: CALL 74570 0 3
34284: ST_TO_ADDR
// if not cratesNearbyPoint then
34285: LD_VAR 0 9
34289: NOT
34290: IFFALSE 34296
// exit ;
34292: POP
34293: POP
34294: GO 34753
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34296: LD_ADDR_VAR 0 4
34300: PUSH
34301: LD_INT 22
34303: PUSH
34304: LD_VAR 0 5
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 3
34315: PUSH
34316: LD_INT 60
34318: PUSH
34319: EMPTY
34320: LIST
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 91
34328: PUSH
34329: LD_VAR 0 8
34333: PUSH
34334: LD_INT 6
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 2
34344: PUSH
34345: LD_INT 25
34347: PUSH
34348: LD_INT 2
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 25
34357: PUSH
34358: LD_INT 16
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: LIST
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: PPUSH
34376: CALL_OW 69
34380: PUSH
34381: LD_VAR 0 8
34385: PPUSH
34386: CALL_OW 313
34390: PPUSH
34391: LD_INT 3
34393: PUSH
34394: LD_INT 60
34396: PUSH
34397: EMPTY
34398: LIST
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 2
34406: PUSH
34407: LD_INT 25
34409: PUSH
34410: LD_INT 2
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 25
34419: PUSH
34420: LD_INT 16
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: LIST
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PPUSH
34436: CALL_OW 72
34440: UNION
34441: ST_TO_ADDR
// if tmp then
34442: LD_VAR 0 4
34446: IFFALSE 34526
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34448: LD_ADDR_VAR 0 4
34452: PUSH
34453: LD_VAR 0 4
34457: PPUSH
34458: LD_INT 3
34460: PPUSH
34461: CALL 72539 0 2
34465: ST_TO_ADDR
// for j in tmp do
34466: LD_ADDR_VAR 0 2
34470: PUSH
34471: LD_VAR 0 4
34475: PUSH
34476: FOR_IN
34477: IFFALSE 34520
// begin if IsInUnit ( j ) then
34479: LD_VAR 0 2
34483: PPUSH
34484: CALL_OW 310
34488: IFFALSE 34499
// ComExit ( j ) ;
34490: LD_VAR 0 2
34494: PPUSH
34495: CALL 72622 0 1
// AddComCollect ( j , x , y ) ;
34499: LD_VAR 0 2
34503: PPUSH
34504: LD_VAR 0 6
34508: PPUSH
34509: LD_VAR 0 7
34513: PPUSH
34514: CALL_OW 177
// end ;
34518: GO 34476
34520: POP
34521: POP
// exit ;
34522: POP
34523: POP
34524: GO 34753
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34526: LD_ADDR_VAR 0 4
34530: PUSH
34531: LD_INT 22
34533: PUSH
34534: LD_VAR 0 5
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: PUSH
34543: LD_INT 91
34545: PUSH
34546: LD_VAR 0 8
34550: PUSH
34551: LD_INT 8
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 2
34561: PUSH
34562: LD_INT 34
34564: PUSH
34565: LD_INT 12
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 34
34574: PUSH
34575: LD_INT 51
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 34
34584: PUSH
34585: LD_INT 32
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 34
34594: PUSH
34595: LD_INT 89
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: LIST
34613: PPUSH
34614: CALL_OW 69
34618: ST_TO_ADDR
// if tmp then
34619: LD_VAR 0 4
34623: IFFALSE 34749
// begin for j in tmp do
34625: LD_ADDR_VAR 0 2
34629: PUSH
34630: LD_VAR 0 4
34634: PUSH
34635: FOR_IN
34636: IFFALSE 34747
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34638: LD_VAR 0 2
34642: PPUSH
34643: CALL_OW 262
34647: PUSH
34648: LD_INT 3
34650: EQUAL
34651: PUSH
34652: LD_VAR 0 2
34656: PPUSH
34657: CALL_OW 261
34661: PUSH
34662: LD_INT 20
34664: GREATER
34665: OR
34666: PUSH
34667: LD_VAR 0 2
34671: PPUSH
34672: CALL_OW 314
34676: NOT
34677: AND
34678: PUSH
34679: LD_VAR 0 2
34683: PPUSH
34684: CALL_OW 263
34688: PUSH
34689: LD_INT 1
34691: NONEQUAL
34692: PUSH
34693: LD_VAR 0 2
34697: PPUSH
34698: CALL_OW 311
34702: OR
34703: AND
34704: IFFALSE 34745
// begin ComCollect ( j , x , y ) ;
34706: LD_VAR 0 2
34710: PPUSH
34711: LD_VAR 0 6
34715: PPUSH
34716: LD_VAR 0 7
34720: PPUSH
34721: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34725: LD_VAR 0 2
34729: PPUSH
34730: LD_VAR 0 8
34734: PPUSH
34735: CALL_OW 172
// exit ;
34739: POP
34740: POP
34741: POP
34742: POP
34743: GO 34753
// end ;
34745: GO 34635
34747: POP
34748: POP
// end ; end ;
34749: GO 34124
34751: POP
34752: POP
// end ; end_of_file end_of_file
34753: PPOPN 9
34755: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
34756: LD_INT 0
34758: PPUSH
34759: PPUSH
// if exist_mode then
34760: LD_VAR 0 2
34764: IFFALSE 34789
// unit := CreateCharacter ( prefix & ident ) else
34766: LD_ADDR_VAR 0 5
34770: PUSH
34771: LD_VAR 0 3
34775: PUSH
34776: LD_VAR 0 1
34780: STR
34781: PPUSH
34782: CALL_OW 34
34786: ST_TO_ADDR
34787: GO 34804
// unit := NewCharacter ( ident ) ;
34789: LD_ADDR_VAR 0 5
34793: PUSH
34794: LD_VAR 0 1
34798: PPUSH
34799: CALL_OW 25
34803: ST_TO_ADDR
// result := unit ;
34804: LD_ADDR_VAR 0 4
34808: PUSH
34809: LD_VAR 0 5
34813: ST_TO_ADDR
// end ;
34814: LD_VAR 0 4
34818: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
34819: LD_INT 0
34821: PPUSH
34822: PPUSH
// if not side or not nation then
34823: LD_VAR 0 1
34827: NOT
34828: PUSH
34829: LD_VAR 0 2
34833: NOT
34834: OR
34835: IFFALSE 34839
// exit ;
34837: GO 35607
// case nation of nation_american :
34839: LD_VAR 0 2
34843: PUSH
34844: LD_INT 1
34846: DOUBLE
34847: EQUAL
34848: IFTRUE 34852
34850: GO 35066
34852: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
34853: LD_ADDR_VAR 0 4
34857: PUSH
34858: LD_INT 35
34860: PUSH
34861: LD_INT 45
34863: PUSH
34864: LD_INT 46
34866: PUSH
34867: LD_INT 47
34869: PUSH
34870: LD_INT 82
34872: PUSH
34873: LD_INT 83
34875: PUSH
34876: LD_INT 84
34878: PUSH
34879: LD_INT 85
34881: PUSH
34882: LD_INT 86
34884: PUSH
34885: LD_INT 1
34887: PUSH
34888: LD_INT 2
34890: PUSH
34891: LD_INT 6
34893: PUSH
34894: LD_INT 15
34896: PUSH
34897: LD_INT 16
34899: PUSH
34900: LD_INT 7
34902: PUSH
34903: LD_INT 12
34905: PUSH
34906: LD_INT 13
34908: PUSH
34909: LD_INT 10
34911: PUSH
34912: LD_INT 14
34914: PUSH
34915: LD_INT 20
34917: PUSH
34918: LD_INT 21
34920: PUSH
34921: LD_INT 22
34923: PUSH
34924: LD_INT 25
34926: PUSH
34927: LD_INT 32
34929: PUSH
34930: LD_INT 27
34932: PUSH
34933: LD_INT 36
34935: PUSH
34936: LD_INT 69
34938: PUSH
34939: LD_INT 39
34941: PUSH
34942: LD_INT 34
34944: PUSH
34945: LD_INT 40
34947: PUSH
34948: LD_INT 48
34950: PUSH
34951: LD_INT 49
34953: PUSH
34954: LD_INT 50
34956: PUSH
34957: LD_INT 51
34959: PUSH
34960: LD_INT 52
34962: PUSH
34963: LD_INT 53
34965: PUSH
34966: LD_INT 54
34968: PUSH
34969: LD_INT 55
34971: PUSH
34972: LD_INT 56
34974: PUSH
34975: LD_INT 57
34977: PUSH
34978: LD_INT 58
34980: PUSH
34981: LD_INT 59
34983: PUSH
34984: LD_INT 60
34986: PUSH
34987: LD_INT 61
34989: PUSH
34990: LD_INT 62
34992: PUSH
34993: LD_INT 80
34995: PUSH
34996: LD_INT 82
34998: PUSH
34999: LD_INT 83
35001: PUSH
35002: LD_INT 84
35004: PUSH
35005: LD_INT 85
35007: PUSH
35008: LD_INT 86
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: ST_TO_ADDR
35064: GO 35531
35066: LD_INT 2
35068: DOUBLE
35069: EQUAL
35070: IFTRUE 35074
35072: GO 35300
35074: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
35075: LD_ADDR_VAR 0 4
35079: PUSH
35080: LD_INT 35
35082: PUSH
35083: LD_INT 45
35085: PUSH
35086: LD_INT 46
35088: PUSH
35089: LD_INT 47
35091: PUSH
35092: LD_INT 82
35094: PUSH
35095: LD_INT 83
35097: PUSH
35098: LD_INT 84
35100: PUSH
35101: LD_INT 85
35103: PUSH
35104: LD_INT 87
35106: PUSH
35107: LD_INT 70
35109: PUSH
35110: LD_INT 1
35112: PUSH
35113: LD_INT 11
35115: PUSH
35116: LD_INT 3
35118: PUSH
35119: LD_INT 4
35121: PUSH
35122: LD_INT 5
35124: PUSH
35125: LD_INT 6
35127: PUSH
35128: LD_INT 15
35130: PUSH
35131: LD_INT 18
35133: PUSH
35134: LD_INT 7
35136: PUSH
35137: LD_INT 17
35139: PUSH
35140: LD_INT 8
35142: PUSH
35143: LD_INT 20
35145: PUSH
35146: LD_INT 21
35148: PUSH
35149: LD_INT 22
35151: PUSH
35152: LD_INT 72
35154: PUSH
35155: LD_INT 26
35157: PUSH
35158: LD_INT 69
35160: PUSH
35161: LD_INT 39
35163: PUSH
35164: LD_INT 40
35166: PUSH
35167: LD_INT 41
35169: PUSH
35170: LD_INT 42
35172: PUSH
35173: LD_INT 43
35175: PUSH
35176: LD_INT 48
35178: PUSH
35179: LD_INT 49
35181: PUSH
35182: LD_INT 50
35184: PUSH
35185: LD_INT 51
35187: PUSH
35188: LD_INT 52
35190: PUSH
35191: LD_INT 53
35193: PUSH
35194: LD_INT 54
35196: PUSH
35197: LD_INT 55
35199: PUSH
35200: LD_INT 56
35202: PUSH
35203: LD_INT 60
35205: PUSH
35206: LD_INT 61
35208: PUSH
35209: LD_INT 62
35211: PUSH
35212: LD_INT 66
35214: PUSH
35215: LD_INT 67
35217: PUSH
35218: LD_INT 68
35220: PUSH
35221: LD_INT 81
35223: PUSH
35224: LD_INT 82
35226: PUSH
35227: LD_INT 83
35229: PUSH
35230: LD_INT 84
35232: PUSH
35233: LD_INT 85
35235: PUSH
35236: LD_INT 87
35238: PUSH
35239: LD_INT 88
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: ST_TO_ADDR
35298: GO 35531
35300: LD_INT 3
35302: DOUBLE
35303: EQUAL
35304: IFTRUE 35308
35306: GO 35530
35308: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
35309: LD_ADDR_VAR 0 4
35313: PUSH
35314: LD_INT 46
35316: PUSH
35317: LD_INT 47
35319: PUSH
35320: LD_INT 1
35322: PUSH
35323: LD_INT 2
35325: PUSH
35326: LD_INT 82
35328: PUSH
35329: LD_INT 83
35331: PUSH
35332: LD_INT 84
35334: PUSH
35335: LD_INT 85
35337: PUSH
35338: LD_INT 86
35340: PUSH
35341: LD_INT 11
35343: PUSH
35344: LD_INT 9
35346: PUSH
35347: LD_INT 20
35349: PUSH
35350: LD_INT 19
35352: PUSH
35353: LD_INT 21
35355: PUSH
35356: LD_INT 24
35358: PUSH
35359: LD_INT 22
35361: PUSH
35362: LD_INT 25
35364: PUSH
35365: LD_INT 28
35367: PUSH
35368: LD_INT 29
35370: PUSH
35371: LD_INT 30
35373: PUSH
35374: LD_INT 31
35376: PUSH
35377: LD_INT 37
35379: PUSH
35380: LD_INT 38
35382: PUSH
35383: LD_INT 32
35385: PUSH
35386: LD_INT 27
35388: PUSH
35389: LD_INT 33
35391: PUSH
35392: LD_INT 69
35394: PUSH
35395: LD_INT 39
35397: PUSH
35398: LD_INT 34
35400: PUSH
35401: LD_INT 40
35403: PUSH
35404: LD_INT 71
35406: PUSH
35407: LD_INT 23
35409: PUSH
35410: LD_INT 44
35412: PUSH
35413: LD_INT 48
35415: PUSH
35416: LD_INT 49
35418: PUSH
35419: LD_INT 50
35421: PUSH
35422: LD_INT 51
35424: PUSH
35425: LD_INT 52
35427: PUSH
35428: LD_INT 53
35430: PUSH
35431: LD_INT 54
35433: PUSH
35434: LD_INT 55
35436: PUSH
35437: LD_INT 56
35439: PUSH
35440: LD_INT 57
35442: PUSH
35443: LD_INT 58
35445: PUSH
35446: LD_INT 59
35448: PUSH
35449: LD_INT 63
35451: PUSH
35452: LD_INT 64
35454: PUSH
35455: LD_INT 65
35457: PUSH
35458: LD_INT 82
35460: PUSH
35461: LD_INT 83
35463: PUSH
35464: LD_INT 84
35466: PUSH
35467: LD_INT 85
35469: PUSH
35470: LD_INT 86
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: ST_TO_ADDR
35528: GO 35531
35530: POP
// if state > - 1 and state < 3 then
35531: LD_VAR 0 3
35535: PUSH
35536: LD_INT 1
35538: NEG
35539: GREATER
35540: PUSH
35541: LD_VAR 0 3
35545: PUSH
35546: LD_INT 3
35548: LESS
35549: AND
35550: IFFALSE 35607
// for i in result do
35552: LD_ADDR_VAR 0 5
35556: PUSH
35557: LD_VAR 0 4
35561: PUSH
35562: FOR_IN
35563: IFFALSE 35605
// if GetTech ( i , side ) <> state then
35565: LD_VAR 0 5
35569: PPUSH
35570: LD_VAR 0 1
35574: PPUSH
35575: CALL_OW 321
35579: PUSH
35580: LD_VAR 0 3
35584: NONEQUAL
35585: IFFALSE 35603
// result := result diff i ;
35587: LD_ADDR_VAR 0 4
35591: PUSH
35592: LD_VAR 0 4
35596: PUSH
35597: LD_VAR 0 5
35601: DIFF
35602: ST_TO_ADDR
35603: GO 35562
35605: POP
35606: POP
// end ;
35607: LD_VAR 0 4
35611: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35612: LD_INT 0
35614: PPUSH
35615: PPUSH
35616: PPUSH
// result := true ;
35617: LD_ADDR_VAR 0 3
35621: PUSH
35622: LD_INT 1
35624: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35625: LD_ADDR_VAR 0 5
35629: PUSH
35630: LD_VAR 0 2
35634: PPUSH
35635: CALL_OW 480
35639: ST_TO_ADDR
// if not tmp then
35640: LD_VAR 0 5
35644: NOT
35645: IFFALSE 35649
// exit ;
35647: GO 35698
// for i in tmp do
35649: LD_ADDR_VAR 0 4
35653: PUSH
35654: LD_VAR 0 5
35658: PUSH
35659: FOR_IN
35660: IFFALSE 35696
// if GetTech ( i , side ) <> state_researched then
35662: LD_VAR 0 4
35666: PPUSH
35667: LD_VAR 0 1
35671: PPUSH
35672: CALL_OW 321
35676: PUSH
35677: LD_INT 2
35679: NONEQUAL
35680: IFFALSE 35694
// begin result := false ;
35682: LD_ADDR_VAR 0 3
35686: PUSH
35687: LD_INT 0
35689: ST_TO_ADDR
// exit ;
35690: POP
35691: POP
35692: GO 35698
// end ;
35694: GO 35659
35696: POP
35697: POP
// end ;
35698: LD_VAR 0 3
35702: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
35703: LD_INT 0
35705: PPUSH
35706: PPUSH
35707: PPUSH
35708: PPUSH
35709: PPUSH
35710: PPUSH
35711: PPUSH
35712: PPUSH
35713: PPUSH
35714: PPUSH
35715: PPUSH
35716: PPUSH
35717: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
35718: LD_VAR 0 1
35722: NOT
35723: PUSH
35724: LD_VAR 0 1
35728: PPUSH
35729: CALL_OW 257
35733: PUSH
35734: LD_INT 9
35736: NONEQUAL
35737: OR
35738: IFFALSE 35742
// exit ;
35740: GO 36315
// side := GetSide ( unit ) ;
35742: LD_ADDR_VAR 0 9
35746: PUSH
35747: LD_VAR 0 1
35751: PPUSH
35752: CALL_OW 255
35756: ST_TO_ADDR
// tech_space := tech_spacanom ;
35757: LD_ADDR_VAR 0 12
35761: PUSH
35762: LD_INT 29
35764: ST_TO_ADDR
// tech_time := tech_taurad ;
35765: LD_ADDR_VAR 0 13
35769: PUSH
35770: LD_INT 28
35772: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
35773: LD_ADDR_VAR 0 11
35777: PUSH
35778: LD_VAR 0 1
35782: PPUSH
35783: CALL_OW 310
35787: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
35788: LD_VAR 0 11
35792: PPUSH
35793: CALL_OW 247
35797: PUSH
35798: LD_INT 2
35800: EQUAL
35801: IFFALSE 35805
// exit ;
35803: GO 36315
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35805: LD_ADDR_VAR 0 8
35809: PUSH
35810: LD_INT 81
35812: PUSH
35813: LD_VAR 0 9
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 3
35824: PUSH
35825: LD_INT 21
35827: PUSH
35828: LD_INT 3
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PPUSH
35843: CALL_OW 69
35847: ST_TO_ADDR
// if not tmp then
35848: LD_VAR 0 8
35852: NOT
35853: IFFALSE 35857
// exit ;
35855: GO 36315
// if in_unit then
35857: LD_VAR 0 11
35861: IFFALSE 35885
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
35863: LD_ADDR_VAR 0 10
35867: PUSH
35868: LD_VAR 0 8
35872: PPUSH
35873: LD_VAR 0 11
35877: PPUSH
35878: CALL_OW 74
35882: ST_TO_ADDR
35883: GO 35905
// enemy := NearestUnitToUnit ( tmp , unit ) ;
35885: LD_ADDR_VAR 0 10
35889: PUSH
35890: LD_VAR 0 8
35894: PPUSH
35895: LD_VAR 0 1
35899: PPUSH
35900: CALL_OW 74
35904: ST_TO_ADDR
// if not enemy then
35905: LD_VAR 0 10
35909: NOT
35910: IFFALSE 35914
// exit ;
35912: GO 36315
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
35914: LD_VAR 0 11
35918: PUSH
35919: LD_VAR 0 11
35923: PPUSH
35924: LD_VAR 0 10
35928: PPUSH
35929: CALL_OW 296
35933: PUSH
35934: LD_INT 13
35936: GREATER
35937: AND
35938: PUSH
35939: LD_VAR 0 1
35943: PPUSH
35944: LD_VAR 0 10
35948: PPUSH
35949: CALL_OW 296
35953: PUSH
35954: LD_INT 12
35956: GREATER
35957: OR
35958: IFFALSE 35962
// exit ;
35960: GO 36315
// missile := [ 1 ] ;
35962: LD_ADDR_VAR 0 14
35966: PUSH
35967: LD_INT 1
35969: PUSH
35970: EMPTY
35971: LIST
35972: ST_TO_ADDR
// if Researched ( side , tech_space ) then
35973: LD_VAR 0 9
35977: PPUSH
35978: LD_VAR 0 12
35982: PPUSH
35983: CALL_OW 325
35987: IFFALSE 36016
// missile := Replace ( missile , missile + 1 , 2 ) ;
35989: LD_ADDR_VAR 0 14
35993: PUSH
35994: LD_VAR 0 14
35998: PPUSH
35999: LD_VAR 0 14
36003: PUSH
36004: LD_INT 1
36006: PLUS
36007: PPUSH
36008: LD_INT 2
36010: PPUSH
36011: CALL_OW 1
36015: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
36016: LD_VAR 0 9
36020: PPUSH
36021: LD_VAR 0 13
36025: PPUSH
36026: CALL_OW 325
36030: PUSH
36031: LD_VAR 0 10
36035: PPUSH
36036: CALL_OW 255
36040: PPUSH
36041: LD_VAR 0 13
36045: PPUSH
36046: CALL_OW 325
36050: NOT
36051: AND
36052: IFFALSE 36081
// missile := Replace ( missile , missile + 1 , 3 ) ;
36054: LD_ADDR_VAR 0 14
36058: PUSH
36059: LD_VAR 0 14
36063: PPUSH
36064: LD_VAR 0 14
36068: PUSH
36069: LD_INT 1
36071: PLUS
36072: PPUSH
36073: LD_INT 3
36075: PPUSH
36076: CALL_OW 1
36080: ST_TO_ADDR
// if missile < 2 then
36081: LD_VAR 0 14
36085: PUSH
36086: LD_INT 2
36088: LESS
36089: IFFALSE 36093
// exit ;
36091: GO 36315
// x := GetX ( enemy ) ;
36093: LD_ADDR_VAR 0 4
36097: PUSH
36098: LD_VAR 0 10
36102: PPUSH
36103: CALL_OW 250
36107: ST_TO_ADDR
// y := GetY ( enemy ) ;
36108: LD_ADDR_VAR 0 5
36112: PUSH
36113: LD_VAR 0 10
36117: PPUSH
36118: CALL_OW 251
36122: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
36123: LD_ADDR_VAR 0 6
36127: PUSH
36128: LD_VAR 0 4
36132: PUSH
36133: LD_INT 1
36135: NEG
36136: PPUSH
36137: LD_INT 1
36139: PPUSH
36140: CALL_OW 12
36144: PLUS
36145: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
36146: LD_ADDR_VAR 0 7
36150: PUSH
36151: LD_VAR 0 5
36155: PUSH
36156: LD_INT 1
36158: NEG
36159: PPUSH
36160: LD_INT 1
36162: PPUSH
36163: CALL_OW 12
36167: PLUS
36168: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36169: LD_VAR 0 6
36173: PPUSH
36174: LD_VAR 0 7
36178: PPUSH
36179: CALL_OW 488
36183: NOT
36184: IFFALSE 36206
// begin _x := x ;
36186: LD_ADDR_VAR 0 6
36190: PUSH
36191: LD_VAR 0 4
36195: ST_TO_ADDR
// _y := y ;
36196: LD_ADDR_VAR 0 7
36200: PUSH
36201: LD_VAR 0 5
36205: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
36206: LD_ADDR_VAR 0 3
36210: PUSH
36211: LD_INT 1
36213: PPUSH
36214: LD_VAR 0 14
36218: PPUSH
36219: CALL_OW 12
36223: ST_TO_ADDR
// case i of 1 :
36224: LD_VAR 0 3
36228: PUSH
36229: LD_INT 1
36231: DOUBLE
36232: EQUAL
36233: IFTRUE 36237
36235: GO 36254
36237: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
36238: LD_VAR 0 1
36242: PPUSH
36243: LD_VAR 0 10
36247: PPUSH
36248: CALL_OW 115
36252: GO 36315
36254: LD_INT 2
36256: DOUBLE
36257: EQUAL
36258: IFTRUE 36262
36260: GO 36284
36262: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
36263: LD_VAR 0 1
36267: PPUSH
36268: LD_VAR 0 6
36272: PPUSH
36273: LD_VAR 0 7
36277: PPUSH
36278: CALL_OW 153
36282: GO 36315
36284: LD_INT 3
36286: DOUBLE
36287: EQUAL
36288: IFTRUE 36292
36290: GO 36314
36292: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
36293: LD_VAR 0 1
36297: PPUSH
36298: LD_VAR 0 6
36302: PPUSH
36303: LD_VAR 0 7
36307: PPUSH
36308: CALL_OW 154
36312: GO 36315
36314: POP
// end ;
36315: LD_VAR 0 2
36319: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
36320: LD_INT 0
36322: PPUSH
36323: PPUSH
36324: PPUSH
36325: PPUSH
36326: PPUSH
36327: PPUSH
// if not unit or not building then
36328: LD_VAR 0 1
36332: NOT
36333: PUSH
36334: LD_VAR 0 2
36338: NOT
36339: OR
36340: IFFALSE 36344
// exit ;
36342: GO 36502
// x := GetX ( building ) ;
36344: LD_ADDR_VAR 0 5
36348: PUSH
36349: LD_VAR 0 2
36353: PPUSH
36354: CALL_OW 250
36358: ST_TO_ADDR
// y := GetY ( building ) ;
36359: LD_ADDR_VAR 0 6
36363: PUSH
36364: LD_VAR 0 2
36368: PPUSH
36369: CALL_OW 251
36373: ST_TO_ADDR
// for i = 0 to 5 do
36374: LD_ADDR_VAR 0 4
36378: PUSH
36379: DOUBLE
36380: LD_INT 0
36382: DEC
36383: ST_TO_ADDR
36384: LD_INT 5
36386: PUSH
36387: FOR_TO
36388: IFFALSE 36500
// begin _x := ShiftX ( x , i , 3 ) ;
36390: LD_ADDR_VAR 0 7
36394: PUSH
36395: LD_VAR 0 5
36399: PPUSH
36400: LD_VAR 0 4
36404: PPUSH
36405: LD_INT 3
36407: PPUSH
36408: CALL_OW 272
36412: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
36413: LD_ADDR_VAR 0 8
36417: PUSH
36418: LD_VAR 0 6
36422: PPUSH
36423: LD_VAR 0 4
36427: PPUSH
36428: LD_INT 3
36430: PPUSH
36431: CALL_OW 273
36435: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36436: LD_VAR 0 7
36440: PPUSH
36441: LD_VAR 0 8
36445: PPUSH
36446: CALL_OW 488
36450: NOT
36451: IFFALSE 36455
// continue ;
36453: GO 36387
// if HexInfo ( _x , _y ) = 0 then
36455: LD_VAR 0 7
36459: PPUSH
36460: LD_VAR 0 8
36464: PPUSH
36465: CALL_OW 428
36469: PUSH
36470: LD_INT 0
36472: EQUAL
36473: IFFALSE 36498
// begin ComMoveXY ( unit , _x , _y ) ;
36475: LD_VAR 0 1
36479: PPUSH
36480: LD_VAR 0 7
36484: PPUSH
36485: LD_VAR 0 8
36489: PPUSH
36490: CALL_OW 111
// exit ;
36494: POP
36495: POP
36496: GO 36502
// end ; end ;
36498: GO 36387
36500: POP
36501: POP
// end ;
36502: LD_VAR 0 3
36506: RET
// export function ScanBase ( side , base_area ) ; begin
36507: LD_INT 0
36509: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
36510: LD_ADDR_VAR 0 3
36514: PUSH
36515: LD_VAR 0 2
36519: PPUSH
36520: LD_INT 81
36522: PUSH
36523: LD_VAR 0 1
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PPUSH
36532: CALL_OW 70
36536: ST_TO_ADDR
// end ;
36537: LD_VAR 0 3
36541: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
36542: LD_INT 0
36544: PPUSH
36545: PPUSH
36546: PPUSH
36547: PPUSH
// result := false ;
36548: LD_ADDR_VAR 0 2
36552: PUSH
36553: LD_INT 0
36555: ST_TO_ADDR
// side := GetSide ( unit ) ;
36556: LD_ADDR_VAR 0 3
36560: PUSH
36561: LD_VAR 0 1
36565: PPUSH
36566: CALL_OW 255
36570: ST_TO_ADDR
// nat := GetNation ( unit ) ;
36571: LD_ADDR_VAR 0 4
36575: PUSH
36576: LD_VAR 0 1
36580: PPUSH
36581: CALL_OW 248
36585: ST_TO_ADDR
// case nat of 1 :
36586: LD_VAR 0 4
36590: PUSH
36591: LD_INT 1
36593: DOUBLE
36594: EQUAL
36595: IFTRUE 36599
36597: GO 36610
36599: POP
// tech := tech_lassight ; 2 :
36600: LD_ADDR_VAR 0 5
36604: PUSH
36605: LD_INT 12
36607: ST_TO_ADDR
36608: GO 36649
36610: LD_INT 2
36612: DOUBLE
36613: EQUAL
36614: IFTRUE 36618
36616: GO 36629
36618: POP
// tech := tech_mortar ; 3 :
36619: LD_ADDR_VAR 0 5
36623: PUSH
36624: LD_INT 41
36626: ST_TO_ADDR
36627: GO 36649
36629: LD_INT 3
36631: DOUBLE
36632: EQUAL
36633: IFTRUE 36637
36635: GO 36648
36637: POP
// tech := tech_bazooka ; end ;
36638: LD_ADDR_VAR 0 5
36642: PUSH
36643: LD_INT 44
36645: ST_TO_ADDR
36646: GO 36649
36648: POP
// if Researched ( side , tech ) then
36649: LD_VAR 0 3
36653: PPUSH
36654: LD_VAR 0 5
36658: PPUSH
36659: CALL_OW 325
36663: IFFALSE 36690
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
36665: LD_ADDR_VAR 0 2
36669: PUSH
36670: LD_INT 5
36672: PUSH
36673: LD_INT 8
36675: PUSH
36676: LD_INT 9
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: LIST
36683: PUSH
36684: LD_VAR 0 4
36688: ARRAY
36689: ST_TO_ADDR
// end ;
36690: LD_VAR 0 2
36694: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
36695: LD_INT 0
36697: PPUSH
36698: PPUSH
36699: PPUSH
// if not mines then
36700: LD_VAR 0 2
36704: NOT
36705: IFFALSE 36709
// exit ;
36707: GO 36853
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36709: LD_ADDR_VAR 0 5
36713: PUSH
36714: LD_INT 81
36716: PUSH
36717: LD_VAR 0 1
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 3
36728: PUSH
36729: LD_INT 21
36731: PUSH
36732: LD_INT 3
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PPUSH
36747: CALL_OW 69
36751: ST_TO_ADDR
// for i in mines do
36752: LD_ADDR_VAR 0 4
36756: PUSH
36757: LD_VAR 0 2
36761: PUSH
36762: FOR_IN
36763: IFFALSE 36851
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
36765: LD_VAR 0 4
36769: PUSH
36770: LD_INT 1
36772: ARRAY
36773: PPUSH
36774: LD_VAR 0 4
36778: PUSH
36779: LD_INT 2
36781: ARRAY
36782: PPUSH
36783: CALL_OW 458
36787: NOT
36788: IFFALSE 36792
// continue ;
36790: GO 36762
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
36792: LD_VAR 0 4
36796: PUSH
36797: LD_INT 1
36799: ARRAY
36800: PPUSH
36801: LD_VAR 0 4
36805: PUSH
36806: LD_INT 2
36808: ARRAY
36809: PPUSH
36810: CALL_OW 428
36814: PUSH
36815: LD_VAR 0 5
36819: IN
36820: IFFALSE 36849
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
36822: LD_VAR 0 4
36826: PUSH
36827: LD_INT 1
36829: ARRAY
36830: PPUSH
36831: LD_VAR 0 4
36835: PUSH
36836: LD_INT 2
36838: ARRAY
36839: PPUSH
36840: LD_VAR 0 1
36844: PPUSH
36845: CALL_OW 456
// end ;
36849: GO 36762
36851: POP
36852: POP
// end ;
36853: LD_VAR 0 3
36857: RET
// export function Count ( array ) ; var i ; begin
36858: LD_INT 0
36860: PPUSH
36861: PPUSH
// result := 0 ;
36862: LD_ADDR_VAR 0 2
36866: PUSH
36867: LD_INT 0
36869: ST_TO_ADDR
// for i in array do
36870: LD_ADDR_VAR 0 3
36874: PUSH
36875: LD_VAR 0 1
36879: PUSH
36880: FOR_IN
36881: IFFALSE 36905
// if i then
36883: LD_VAR 0 3
36887: IFFALSE 36903
// result := result + 1 ;
36889: LD_ADDR_VAR 0 2
36893: PUSH
36894: LD_VAR 0 2
36898: PUSH
36899: LD_INT 1
36901: PLUS
36902: ST_TO_ADDR
36903: GO 36880
36905: POP
36906: POP
// end ;
36907: LD_VAR 0 2
36911: RET
// export function IsEmpty ( building ) ; begin
36912: LD_INT 0
36914: PPUSH
// if not building then
36915: LD_VAR 0 1
36919: NOT
36920: IFFALSE 36924
// exit ;
36922: GO 36967
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
36924: LD_ADDR_VAR 0 2
36928: PUSH
36929: LD_VAR 0 1
36933: PUSH
36934: LD_INT 22
36936: PUSH
36937: LD_VAR 0 1
36941: PPUSH
36942: CALL_OW 255
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 58
36953: PUSH
36954: EMPTY
36955: LIST
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PPUSH
36961: CALL_OW 69
36965: IN
36966: ST_TO_ADDR
// end ;
36967: LD_VAR 0 2
36971: RET
// export function IsNotFull ( building ) ; var places ; begin
36972: LD_INT 0
36974: PPUSH
36975: PPUSH
// if not building then
36976: LD_VAR 0 1
36980: NOT
36981: IFFALSE 36985
// exit ;
36983: GO 37156
// result := false ;
36985: LD_ADDR_VAR 0 2
36989: PUSH
36990: LD_INT 0
36992: ST_TO_ADDR
// places := 0 ;
36993: LD_ADDR_VAR 0 3
36997: PUSH
36998: LD_INT 0
37000: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
37001: LD_VAR 0 1
37005: PPUSH
37006: CALL_OW 266
37010: PUSH
37011: LD_INT 0
37013: DOUBLE
37014: EQUAL
37015: IFTRUE 37073
37017: LD_INT 1
37019: DOUBLE
37020: EQUAL
37021: IFTRUE 37073
37023: LD_INT 6
37025: DOUBLE
37026: EQUAL
37027: IFTRUE 37073
37029: LD_INT 7
37031: DOUBLE
37032: EQUAL
37033: IFTRUE 37073
37035: LD_INT 8
37037: DOUBLE
37038: EQUAL
37039: IFTRUE 37073
37041: LD_INT 4
37043: DOUBLE
37044: EQUAL
37045: IFTRUE 37073
37047: LD_INT 5
37049: DOUBLE
37050: EQUAL
37051: IFTRUE 37073
37053: LD_INT 2
37055: DOUBLE
37056: EQUAL
37057: IFTRUE 37073
37059: LD_INT 3
37061: DOUBLE
37062: EQUAL
37063: IFTRUE 37073
37065: LD_INT 35
37067: DOUBLE
37068: EQUAL
37069: IFTRUE 37073
37071: GO 37084
37073: POP
// places := 6 ; b_bunker , b_breastwork :
37074: LD_ADDR_VAR 0 3
37078: PUSH
37079: LD_INT 6
37081: ST_TO_ADDR
37082: GO 37129
37084: LD_INT 32
37086: DOUBLE
37087: EQUAL
37088: IFTRUE 37098
37090: LD_INT 31
37092: DOUBLE
37093: EQUAL
37094: IFTRUE 37098
37096: GO 37109
37098: POP
// places := 1 ; b_control_tower :
37099: LD_ADDR_VAR 0 3
37103: PUSH
37104: LD_INT 1
37106: ST_TO_ADDR
37107: GO 37129
37109: LD_INT 36
37111: DOUBLE
37112: EQUAL
37113: IFTRUE 37117
37115: GO 37128
37117: POP
// places := 3 ; end ;
37118: LD_ADDR_VAR 0 3
37122: PUSH
37123: LD_INT 3
37125: ST_TO_ADDR
37126: GO 37129
37128: POP
// if places then
37129: LD_VAR 0 3
37133: IFFALSE 37156
// result := UnitsInside ( building ) < places ;
37135: LD_ADDR_VAR 0 2
37139: PUSH
37140: LD_VAR 0 1
37144: PPUSH
37145: CALL_OW 313
37149: PUSH
37150: LD_VAR 0 3
37154: LESS
37155: ST_TO_ADDR
// end ;
37156: LD_VAR 0 2
37160: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
37161: LD_INT 0
37163: PPUSH
37164: PPUSH
37165: PPUSH
37166: PPUSH
// tmp := [ ] ;
37167: LD_ADDR_VAR 0 3
37171: PUSH
37172: EMPTY
37173: ST_TO_ADDR
// list := [ ] ;
37174: LD_ADDR_VAR 0 5
37178: PUSH
37179: EMPTY
37180: ST_TO_ADDR
// for i = 16 to 25 do
37181: LD_ADDR_VAR 0 4
37185: PUSH
37186: DOUBLE
37187: LD_INT 16
37189: DEC
37190: ST_TO_ADDR
37191: LD_INT 25
37193: PUSH
37194: FOR_TO
37195: IFFALSE 37268
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
37197: LD_ADDR_VAR 0 3
37201: PUSH
37202: LD_VAR 0 3
37206: PUSH
37207: LD_INT 22
37209: PUSH
37210: LD_VAR 0 1
37214: PPUSH
37215: CALL_OW 255
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 91
37226: PUSH
37227: LD_VAR 0 1
37231: PUSH
37232: LD_INT 6
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 30
37242: PUSH
37243: LD_VAR 0 4
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: LIST
37256: PUSH
37257: EMPTY
37258: LIST
37259: PPUSH
37260: CALL_OW 69
37264: ADD
37265: ST_TO_ADDR
37266: GO 37194
37268: POP
37269: POP
// for i = 1 to tmp do
37270: LD_ADDR_VAR 0 4
37274: PUSH
37275: DOUBLE
37276: LD_INT 1
37278: DEC
37279: ST_TO_ADDR
37280: LD_VAR 0 3
37284: PUSH
37285: FOR_TO
37286: IFFALSE 37374
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
37288: LD_ADDR_VAR 0 5
37292: PUSH
37293: LD_VAR 0 5
37297: PUSH
37298: LD_VAR 0 3
37302: PUSH
37303: LD_VAR 0 4
37307: ARRAY
37308: PPUSH
37309: CALL_OW 266
37313: PUSH
37314: LD_VAR 0 3
37318: PUSH
37319: LD_VAR 0 4
37323: ARRAY
37324: PPUSH
37325: CALL_OW 250
37329: PUSH
37330: LD_VAR 0 3
37334: PUSH
37335: LD_VAR 0 4
37339: ARRAY
37340: PPUSH
37341: CALL_OW 251
37345: PUSH
37346: LD_VAR 0 3
37350: PUSH
37351: LD_VAR 0 4
37355: ARRAY
37356: PPUSH
37357: CALL_OW 254
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: PUSH
37368: EMPTY
37369: LIST
37370: ADD
37371: ST_TO_ADDR
37372: GO 37285
37374: POP
37375: POP
// result := list ;
37376: LD_ADDR_VAR 0 2
37380: PUSH
37381: LD_VAR 0 5
37385: ST_TO_ADDR
// end ;
37386: LD_VAR 0 2
37390: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
37391: LD_INT 0
37393: PPUSH
37394: PPUSH
37395: PPUSH
37396: PPUSH
37397: PPUSH
37398: PPUSH
37399: PPUSH
// if not factory then
37400: LD_VAR 0 1
37404: NOT
37405: IFFALSE 37409
// exit ;
37407: GO 38002
// if control = control_apeman then
37409: LD_VAR 0 4
37413: PUSH
37414: LD_INT 5
37416: EQUAL
37417: IFFALSE 37526
// begin tmp := UnitsInside ( factory ) ;
37419: LD_ADDR_VAR 0 8
37423: PUSH
37424: LD_VAR 0 1
37428: PPUSH
37429: CALL_OW 313
37433: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
37434: LD_VAR 0 8
37438: PPUSH
37439: LD_INT 25
37441: PUSH
37442: LD_INT 12
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PPUSH
37449: CALL_OW 72
37453: NOT
37454: IFFALSE 37464
// control := control_manual ;
37456: LD_ADDR_VAR 0 4
37460: PUSH
37461: LD_INT 1
37463: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
37464: LD_ADDR_VAR 0 8
37468: PUSH
37469: LD_VAR 0 1
37473: PPUSH
37474: CALL 37161 0 1
37478: ST_TO_ADDR
// if tmp then
37479: LD_VAR 0 8
37483: IFFALSE 37526
// begin for i in tmp do
37485: LD_ADDR_VAR 0 7
37489: PUSH
37490: LD_VAR 0 8
37494: PUSH
37495: FOR_IN
37496: IFFALSE 37524
// if i [ 1 ] = b_ext_radio then
37498: LD_VAR 0 7
37502: PUSH
37503: LD_INT 1
37505: ARRAY
37506: PUSH
37507: LD_INT 22
37509: EQUAL
37510: IFFALSE 37522
// begin control := control_remote ;
37512: LD_ADDR_VAR 0 4
37516: PUSH
37517: LD_INT 2
37519: ST_TO_ADDR
// break ;
37520: GO 37524
// end ;
37522: GO 37495
37524: POP
37525: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37526: LD_VAR 0 1
37530: PPUSH
37531: LD_VAR 0 2
37535: PPUSH
37536: LD_VAR 0 3
37540: PPUSH
37541: LD_VAR 0 4
37545: PPUSH
37546: LD_VAR 0 5
37550: PPUSH
37551: CALL_OW 448
37555: IFFALSE 37590
// begin result := [ chassis , engine , control , weapon ] ;
37557: LD_ADDR_VAR 0 6
37561: PUSH
37562: LD_VAR 0 2
37566: PUSH
37567: LD_VAR 0 3
37571: PUSH
37572: LD_VAR 0 4
37576: PUSH
37577: LD_VAR 0 5
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: ST_TO_ADDR
// exit ;
37588: GO 38002
// end ; _chassis := AvailableChassisList ( factory ) ;
37590: LD_ADDR_VAR 0 9
37594: PUSH
37595: LD_VAR 0 1
37599: PPUSH
37600: CALL_OW 475
37604: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
37605: LD_ADDR_VAR 0 11
37609: PUSH
37610: LD_VAR 0 1
37614: PPUSH
37615: CALL_OW 476
37619: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
37620: LD_ADDR_VAR 0 12
37624: PUSH
37625: LD_VAR 0 1
37629: PPUSH
37630: CALL_OW 477
37634: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
37635: LD_ADDR_VAR 0 10
37639: PUSH
37640: LD_VAR 0 1
37644: PPUSH
37645: CALL_OW 478
37649: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
37650: LD_VAR 0 9
37654: NOT
37655: PUSH
37656: LD_VAR 0 11
37660: NOT
37661: OR
37662: PUSH
37663: LD_VAR 0 12
37667: NOT
37668: OR
37669: PUSH
37670: LD_VAR 0 10
37674: NOT
37675: OR
37676: IFFALSE 37711
// begin result := [ chassis , engine , control , weapon ] ;
37678: LD_ADDR_VAR 0 6
37682: PUSH
37683: LD_VAR 0 2
37687: PUSH
37688: LD_VAR 0 3
37692: PUSH
37693: LD_VAR 0 4
37697: PUSH
37698: LD_VAR 0 5
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: ST_TO_ADDR
// exit ;
37709: GO 38002
// end ; if not chassis in _chassis then
37711: LD_VAR 0 2
37715: PUSH
37716: LD_VAR 0 9
37720: IN
37721: NOT
37722: IFFALSE 37748
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
37724: LD_ADDR_VAR 0 2
37728: PUSH
37729: LD_VAR 0 9
37733: PUSH
37734: LD_INT 1
37736: PPUSH
37737: LD_VAR 0 9
37741: PPUSH
37742: CALL_OW 12
37746: ARRAY
37747: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
37748: LD_VAR 0 2
37752: PPUSH
37753: LD_VAR 0 3
37757: PPUSH
37758: CALL 38007 0 2
37762: NOT
37763: IFFALSE 37822
// repeat engine := _engine [ 1 ] ;
37765: LD_ADDR_VAR 0 3
37769: PUSH
37770: LD_VAR 0 11
37774: PUSH
37775: LD_INT 1
37777: ARRAY
37778: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
37779: LD_ADDR_VAR 0 11
37783: PUSH
37784: LD_VAR 0 11
37788: PPUSH
37789: LD_INT 1
37791: PPUSH
37792: CALL_OW 3
37796: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
37797: LD_VAR 0 2
37801: PPUSH
37802: LD_VAR 0 3
37806: PPUSH
37807: CALL 38007 0 2
37811: PUSH
37812: LD_VAR 0 11
37816: PUSH
37817: EMPTY
37818: EQUAL
37819: OR
37820: IFFALSE 37765
// if not control in _control then
37822: LD_VAR 0 4
37826: PUSH
37827: LD_VAR 0 12
37831: IN
37832: NOT
37833: IFFALSE 37859
// control := _control [ rand ( 1 , _control ) ] ;
37835: LD_ADDR_VAR 0 4
37839: PUSH
37840: LD_VAR 0 12
37844: PUSH
37845: LD_INT 1
37847: PPUSH
37848: LD_VAR 0 12
37852: PPUSH
37853: CALL_OW 12
37857: ARRAY
37858: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
37859: LD_VAR 0 2
37863: PPUSH
37864: LD_VAR 0 5
37868: PPUSH
37869: CALL 38227 0 2
37873: NOT
37874: IFFALSE 37933
// repeat weapon := _weapon [ 1 ] ;
37876: LD_ADDR_VAR 0 5
37880: PUSH
37881: LD_VAR 0 10
37885: PUSH
37886: LD_INT 1
37888: ARRAY
37889: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
37890: LD_ADDR_VAR 0 10
37894: PUSH
37895: LD_VAR 0 10
37899: PPUSH
37900: LD_INT 1
37902: PPUSH
37903: CALL_OW 3
37907: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
37908: LD_VAR 0 2
37912: PPUSH
37913: LD_VAR 0 5
37917: PPUSH
37918: CALL 38227 0 2
37922: PUSH
37923: LD_VAR 0 10
37927: PUSH
37928: EMPTY
37929: EQUAL
37930: OR
37931: IFFALSE 37876
// result := [ ] ;
37933: LD_ADDR_VAR 0 6
37937: PUSH
37938: EMPTY
37939: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37940: LD_VAR 0 1
37944: PPUSH
37945: LD_VAR 0 2
37949: PPUSH
37950: LD_VAR 0 3
37954: PPUSH
37955: LD_VAR 0 4
37959: PPUSH
37960: LD_VAR 0 5
37964: PPUSH
37965: CALL_OW 448
37969: IFFALSE 38002
// result := [ chassis , engine , control , weapon ] ;
37971: LD_ADDR_VAR 0 6
37975: PUSH
37976: LD_VAR 0 2
37980: PUSH
37981: LD_VAR 0 3
37985: PUSH
37986: LD_VAR 0 4
37990: PUSH
37991: LD_VAR 0 5
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: ST_TO_ADDR
// end ;
38002: LD_VAR 0 6
38006: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38007: LD_INT 0
38009: PPUSH
// if not chassis or not engine then
38010: LD_VAR 0 1
38014: NOT
38015: PUSH
38016: LD_VAR 0 2
38020: NOT
38021: OR
38022: IFFALSE 38026
// exit ;
38024: GO 38222
// case engine of engine_solar :
38026: LD_VAR 0 2
38030: PUSH
38031: LD_INT 2
38033: DOUBLE
38034: EQUAL
38035: IFTRUE 38039
38037: GO 38077
38039: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38040: LD_ADDR_VAR 0 3
38044: PUSH
38045: LD_INT 11
38047: PUSH
38048: LD_INT 12
38050: PUSH
38051: LD_INT 13
38053: PUSH
38054: LD_INT 14
38056: PUSH
38057: LD_INT 1
38059: PUSH
38060: LD_INT 2
38062: PUSH
38063: LD_INT 3
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: ST_TO_ADDR
38075: GO 38206
38077: LD_INT 1
38079: DOUBLE
38080: EQUAL
38081: IFTRUE 38085
38083: GO 38147
38085: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38086: LD_ADDR_VAR 0 3
38090: PUSH
38091: LD_INT 11
38093: PUSH
38094: LD_INT 12
38096: PUSH
38097: LD_INT 13
38099: PUSH
38100: LD_INT 14
38102: PUSH
38103: LD_INT 1
38105: PUSH
38106: LD_INT 2
38108: PUSH
38109: LD_INT 3
38111: PUSH
38112: LD_INT 4
38114: PUSH
38115: LD_INT 5
38117: PUSH
38118: LD_INT 21
38120: PUSH
38121: LD_INT 23
38123: PUSH
38124: LD_INT 22
38126: PUSH
38127: LD_INT 24
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: ST_TO_ADDR
38145: GO 38206
38147: LD_INT 3
38149: DOUBLE
38150: EQUAL
38151: IFTRUE 38155
38153: GO 38205
38155: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38156: LD_ADDR_VAR 0 3
38160: PUSH
38161: LD_INT 13
38163: PUSH
38164: LD_INT 14
38166: PUSH
38167: LD_INT 2
38169: PUSH
38170: LD_INT 3
38172: PUSH
38173: LD_INT 4
38175: PUSH
38176: LD_INT 5
38178: PUSH
38179: LD_INT 21
38181: PUSH
38182: LD_INT 22
38184: PUSH
38185: LD_INT 23
38187: PUSH
38188: LD_INT 24
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: ST_TO_ADDR
38203: GO 38206
38205: POP
// result := ( chassis in result ) ;
38206: LD_ADDR_VAR 0 3
38210: PUSH
38211: LD_VAR 0 1
38215: PUSH
38216: LD_VAR 0 3
38220: IN
38221: ST_TO_ADDR
// end ;
38222: LD_VAR 0 3
38226: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
38227: LD_INT 0
38229: PPUSH
// if not chassis or not weapon then
38230: LD_VAR 0 1
38234: NOT
38235: PUSH
38236: LD_VAR 0 2
38240: NOT
38241: OR
38242: IFFALSE 38246
// exit ;
38244: GO 39306
// case weapon of us_machine_gun :
38246: LD_VAR 0 2
38250: PUSH
38251: LD_INT 2
38253: DOUBLE
38254: EQUAL
38255: IFTRUE 38259
38257: GO 38289
38259: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
38260: LD_ADDR_VAR 0 3
38264: PUSH
38265: LD_INT 1
38267: PUSH
38268: LD_INT 2
38270: PUSH
38271: LD_INT 3
38273: PUSH
38274: LD_INT 4
38276: PUSH
38277: LD_INT 5
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: ST_TO_ADDR
38287: GO 39290
38289: LD_INT 3
38291: DOUBLE
38292: EQUAL
38293: IFTRUE 38297
38295: GO 38327
38297: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
38298: LD_ADDR_VAR 0 3
38302: PUSH
38303: LD_INT 1
38305: PUSH
38306: LD_INT 2
38308: PUSH
38309: LD_INT 3
38311: PUSH
38312: LD_INT 4
38314: PUSH
38315: LD_INT 5
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: ST_TO_ADDR
38325: GO 39290
38327: LD_INT 11
38329: DOUBLE
38330: EQUAL
38331: IFTRUE 38335
38333: GO 38365
38335: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
38336: LD_ADDR_VAR 0 3
38340: PUSH
38341: LD_INT 1
38343: PUSH
38344: LD_INT 2
38346: PUSH
38347: LD_INT 3
38349: PUSH
38350: LD_INT 4
38352: PUSH
38353: LD_INT 5
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: ST_TO_ADDR
38363: GO 39290
38365: LD_INT 4
38367: DOUBLE
38368: EQUAL
38369: IFTRUE 38373
38371: GO 38399
38373: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
38374: LD_ADDR_VAR 0 3
38378: PUSH
38379: LD_INT 2
38381: PUSH
38382: LD_INT 3
38384: PUSH
38385: LD_INT 4
38387: PUSH
38388: LD_INT 5
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: ST_TO_ADDR
38397: GO 39290
38399: LD_INT 5
38401: DOUBLE
38402: EQUAL
38403: IFTRUE 38407
38405: GO 38433
38407: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
38408: LD_ADDR_VAR 0 3
38412: PUSH
38413: LD_INT 2
38415: PUSH
38416: LD_INT 3
38418: PUSH
38419: LD_INT 4
38421: PUSH
38422: LD_INT 5
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: ST_TO_ADDR
38431: GO 39290
38433: LD_INT 9
38435: DOUBLE
38436: EQUAL
38437: IFTRUE 38441
38439: GO 38467
38441: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
38442: LD_ADDR_VAR 0 3
38446: PUSH
38447: LD_INT 2
38449: PUSH
38450: LD_INT 3
38452: PUSH
38453: LD_INT 4
38455: PUSH
38456: LD_INT 5
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: ST_TO_ADDR
38465: GO 39290
38467: LD_INT 7
38469: DOUBLE
38470: EQUAL
38471: IFTRUE 38475
38473: GO 38501
38475: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
38476: LD_ADDR_VAR 0 3
38480: PUSH
38481: LD_INT 2
38483: PUSH
38484: LD_INT 3
38486: PUSH
38487: LD_INT 4
38489: PUSH
38490: LD_INT 5
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: ST_TO_ADDR
38499: GO 39290
38501: LD_INT 12
38503: DOUBLE
38504: EQUAL
38505: IFTRUE 38509
38507: GO 38535
38509: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
38510: LD_ADDR_VAR 0 3
38514: PUSH
38515: LD_INT 2
38517: PUSH
38518: LD_INT 3
38520: PUSH
38521: LD_INT 4
38523: PUSH
38524: LD_INT 5
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: ST_TO_ADDR
38533: GO 39290
38535: LD_INT 13
38537: DOUBLE
38538: EQUAL
38539: IFTRUE 38543
38541: GO 38569
38543: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
38544: LD_ADDR_VAR 0 3
38548: PUSH
38549: LD_INT 2
38551: PUSH
38552: LD_INT 3
38554: PUSH
38555: LD_INT 4
38557: PUSH
38558: LD_INT 5
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: ST_TO_ADDR
38567: GO 39290
38569: LD_INT 14
38571: DOUBLE
38572: EQUAL
38573: IFTRUE 38577
38575: GO 38595
38577: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
38578: LD_ADDR_VAR 0 3
38582: PUSH
38583: LD_INT 4
38585: PUSH
38586: LD_INT 5
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: ST_TO_ADDR
38593: GO 39290
38595: LD_INT 6
38597: DOUBLE
38598: EQUAL
38599: IFTRUE 38603
38601: GO 38621
38603: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
38604: LD_ADDR_VAR 0 3
38608: PUSH
38609: LD_INT 4
38611: PUSH
38612: LD_INT 5
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: ST_TO_ADDR
38619: GO 39290
38621: LD_INT 10
38623: DOUBLE
38624: EQUAL
38625: IFTRUE 38629
38627: GO 38647
38629: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
38630: LD_ADDR_VAR 0 3
38634: PUSH
38635: LD_INT 4
38637: PUSH
38638: LD_INT 5
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: ST_TO_ADDR
38645: GO 39290
38647: LD_INT 22
38649: DOUBLE
38650: EQUAL
38651: IFTRUE 38655
38653: GO 38681
38655: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
38656: LD_ADDR_VAR 0 3
38660: PUSH
38661: LD_INT 11
38663: PUSH
38664: LD_INT 12
38666: PUSH
38667: LD_INT 13
38669: PUSH
38670: LD_INT 14
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: ST_TO_ADDR
38679: GO 39290
38681: LD_INT 23
38683: DOUBLE
38684: EQUAL
38685: IFTRUE 38689
38687: GO 38715
38689: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
38690: LD_ADDR_VAR 0 3
38694: PUSH
38695: LD_INT 11
38697: PUSH
38698: LD_INT 12
38700: PUSH
38701: LD_INT 13
38703: PUSH
38704: LD_INT 14
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: ST_TO_ADDR
38713: GO 39290
38715: LD_INT 24
38717: DOUBLE
38718: EQUAL
38719: IFTRUE 38723
38721: GO 38749
38723: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
38724: LD_ADDR_VAR 0 3
38728: PUSH
38729: LD_INT 11
38731: PUSH
38732: LD_INT 12
38734: PUSH
38735: LD_INT 13
38737: PUSH
38738: LD_INT 14
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: ST_TO_ADDR
38747: GO 39290
38749: LD_INT 30
38751: DOUBLE
38752: EQUAL
38753: IFTRUE 38757
38755: GO 38783
38757: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
38758: LD_ADDR_VAR 0 3
38762: PUSH
38763: LD_INT 11
38765: PUSH
38766: LD_INT 12
38768: PUSH
38769: LD_INT 13
38771: PUSH
38772: LD_INT 14
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: ST_TO_ADDR
38781: GO 39290
38783: LD_INT 25
38785: DOUBLE
38786: EQUAL
38787: IFTRUE 38791
38789: GO 38809
38791: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
38792: LD_ADDR_VAR 0 3
38796: PUSH
38797: LD_INT 13
38799: PUSH
38800: LD_INT 14
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: ST_TO_ADDR
38807: GO 39290
38809: LD_INT 27
38811: DOUBLE
38812: EQUAL
38813: IFTRUE 38817
38815: GO 38835
38817: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
38818: LD_ADDR_VAR 0 3
38822: PUSH
38823: LD_INT 13
38825: PUSH
38826: LD_INT 14
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: ST_TO_ADDR
38833: GO 39290
38835: LD_INT 92
38837: DOUBLE
38838: EQUAL
38839: IFTRUE 38843
38841: GO 38869
38843: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
38844: LD_ADDR_VAR 0 3
38848: PUSH
38849: LD_INT 11
38851: PUSH
38852: LD_INT 12
38854: PUSH
38855: LD_INT 13
38857: PUSH
38858: LD_INT 14
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: ST_TO_ADDR
38867: GO 39290
38869: LD_INT 28
38871: DOUBLE
38872: EQUAL
38873: IFTRUE 38877
38875: GO 38895
38877: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
38878: LD_ADDR_VAR 0 3
38882: PUSH
38883: LD_INT 13
38885: PUSH
38886: LD_INT 14
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: ST_TO_ADDR
38893: GO 39290
38895: LD_INT 29
38897: DOUBLE
38898: EQUAL
38899: IFTRUE 38903
38901: GO 38921
38903: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
38904: LD_ADDR_VAR 0 3
38908: PUSH
38909: LD_INT 13
38911: PUSH
38912: LD_INT 14
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: ST_TO_ADDR
38919: GO 39290
38921: LD_INT 31
38923: DOUBLE
38924: EQUAL
38925: IFTRUE 38929
38927: GO 38947
38929: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
38930: LD_ADDR_VAR 0 3
38934: PUSH
38935: LD_INT 13
38937: PUSH
38938: LD_INT 14
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: ST_TO_ADDR
38945: GO 39290
38947: LD_INT 26
38949: DOUBLE
38950: EQUAL
38951: IFTRUE 38955
38953: GO 38973
38955: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
38956: LD_ADDR_VAR 0 3
38960: PUSH
38961: LD_INT 13
38963: PUSH
38964: LD_INT 14
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: ST_TO_ADDR
38971: GO 39290
38973: LD_INT 42
38975: DOUBLE
38976: EQUAL
38977: IFTRUE 38981
38979: GO 39007
38981: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
38982: LD_ADDR_VAR 0 3
38986: PUSH
38987: LD_INT 21
38989: PUSH
38990: LD_INT 22
38992: PUSH
38993: LD_INT 23
38995: PUSH
38996: LD_INT 24
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: ST_TO_ADDR
39005: GO 39290
39007: LD_INT 43
39009: DOUBLE
39010: EQUAL
39011: IFTRUE 39015
39013: GO 39041
39015: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39016: LD_ADDR_VAR 0 3
39020: PUSH
39021: LD_INT 21
39023: PUSH
39024: LD_INT 22
39026: PUSH
39027: LD_INT 23
39029: PUSH
39030: LD_INT 24
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: ST_TO_ADDR
39039: GO 39290
39041: LD_INT 44
39043: DOUBLE
39044: EQUAL
39045: IFTRUE 39049
39047: GO 39075
39049: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39050: LD_ADDR_VAR 0 3
39054: PUSH
39055: LD_INT 21
39057: PUSH
39058: LD_INT 22
39060: PUSH
39061: LD_INT 23
39063: PUSH
39064: LD_INT 24
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: ST_TO_ADDR
39073: GO 39290
39075: LD_INT 45
39077: DOUBLE
39078: EQUAL
39079: IFTRUE 39083
39081: GO 39109
39083: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39084: LD_ADDR_VAR 0 3
39088: PUSH
39089: LD_INT 21
39091: PUSH
39092: LD_INT 22
39094: PUSH
39095: LD_INT 23
39097: PUSH
39098: LD_INT 24
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: ST_TO_ADDR
39107: GO 39290
39109: LD_INT 49
39111: DOUBLE
39112: EQUAL
39113: IFTRUE 39117
39115: GO 39143
39117: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39118: LD_ADDR_VAR 0 3
39122: PUSH
39123: LD_INT 21
39125: PUSH
39126: LD_INT 22
39128: PUSH
39129: LD_INT 23
39131: PUSH
39132: LD_INT 24
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: ST_TO_ADDR
39141: GO 39290
39143: LD_INT 51
39145: DOUBLE
39146: EQUAL
39147: IFTRUE 39151
39149: GO 39177
39151: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39152: LD_ADDR_VAR 0 3
39156: PUSH
39157: LD_INT 21
39159: PUSH
39160: LD_INT 22
39162: PUSH
39163: LD_INT 23
39165: PUSH
39166: LD_INT 24
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: ST_TO_ADDR
39175: GO 39290
39177: LD_INT 52
39179: DOUBLE
39180: EQUAL
39181: IFTRUE 39185
39183: GO 39211
39185: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
39186: LD_ADDR_VAR 0 3
39190: PUSH
39191: LD_INT 21
39193: PUSH
39194: LD_INT 22
39196: PUSH
39197: LD_INT 23
39199: PUSH
39200: LD_INT 24
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: ST_TO_ADDR
39209: GO 39290
39211: LD_INT 53
39213: DOUBLE
39214: EQUAL
39215: IFTRUE 39219
39217: GO 39237
39219: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
39220: LD_ADDR_VAR 0 3
39224: PUSH
39225: LD_INT 23
39227: PUSH
39228: LD_INT 24
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: ST_TO_ADDR
39235: GO 39290
39237: LD_INT 46
39239: DOUBLE
39240: EQUAL
39241: IFTRUE 39245
39243: GO 39263
39245: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
39246: LD_ADDR_VAR 0 3
39250: PUSH
39251: LD_INT 23
39253: PUSH
39254: LD_INT 24
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: ST_TO_ADDR
39261: GO 39290
39263: LD_INT 47
39265: DOUBLE
39266: EQUAL
39267: IFTRUE 39271
39269: GO 39289
39271: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39272: LD_ADDR_VAR 0 3
39276: PUSH
39277: LD_INT 23
39279: PUSH
39280: LD_INT 24
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: ST_TO_ADDR
39287: GO 39290
39289: POP
// result := ( chassis in result ) ;
39290: LD_ADDR_VAR 0 3
39294: PUSH
39295: LD_VAR 0 1
39299: PUSH
39300: LD_VAR 0 3
39304: IN
39305: ST_TO_ADDR
// end ;
39306: LD_VAR 0 3
39310: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
39311: LD_INT 0
39313: PPUSH
39314: PPUSH
39315: PPUSH
39316: PPUSH
39317: PPUSH
39318: PPUSH
39319: PPUSH
// result := array ;
39320: LD_ADDR_VAR 0 5
39324: PUSH
39325: LD_VAR 0 1
39329: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
39330: LD_VAR 0 1
39334: NOT
39335: PUSH
39336: LD_VAR 0 2
39340: NOT
39341: OR
39342: PUSH
39343: LD_VAR 0 3
39347: NOT
39348: OR
39349: PUSH
39350: LD_VAR 0 2
39354: PUSH
39355: LD_VAR 0 1
39359: GREATER
39360: OR
39361: PUSH
39362: LD_VAR 0 3
39366: PUSH
39367: LD_VAR 0 1
39371: GREATER
39372: OR
39373: IFFALSE 39377
// exit ;
39375: GO 39673
// if direction then
39377: LD_VAR 0 4
39381: IFFALSE 39445
// begin d := 1 ;
39383: LD_ADDR_VAR 0 9
39387: PUSH
39388: LD_INT 1
39390: ST_TO_ADDR
// if i_from > i_to then
39391: LD_VAR 0 2
39395: PUSH
39396: LD_VAR 0 3
39400: GREATER
39401: IFFALSE 39427
// length := ( array - i_from ) + i_to else
39403: LD_ADDR_VAR 0 11
39407: PUSH
39408: LD_VAR 0 1
39412: PUSH
39413: LD_VAR 0 2
39417: MINUS
39418: PUSH
39419: LD_VAR 0 3
39423: PLUS
39424: ST_TO_ADDR
39425: GO 39443
// length := i_to - i_from ;
39427: LD_ADDR_VAR 0 11
39431: PUSH
39432: LD_VAR 0 3
39436: PUSH
39437: LD_VAR 0 2
39441: MINUS
39442: ST_TO_ADDR
// end else
39443: GO 39506
// begin d := - 1 ;
39445: LD_ADDR_VAR 0 9
39449: PUSH
39450: LD_INT 1
39452: NEG
39453: ST_TO_ADDR
// if i_from > i_to then
39454: LD_VAR 0 2
39458: PUSH
39459: LD_VAR 0 3
39463: GREATER
39464: IFFALSE 39484
// length := i_from - i_to else
39466: LD_ADDR_VAR 0 11
39470: PUSH
39471: LD_VAR 0 2
39475: PUSH
39476: LD_VAR 0 3
39480: MINUS
39481: ST_TO_ADDR
39482: GO 39506
// length := ( array - i_to ) + i_from ;
39484: LD_ADDR_VAR 0 11
39488: PUSH
39489: LD_VAR 0 1
39493: PUSH
39494: LD_VAR 0 3
39498: MINUS
39499: PUSH
39500: LD_VAR 0 2
39504: PLUS
39505: ST_TO_ADDR
// end ; if not length then
39506: LD_VAR 0 11
39510: NOT
39511: IFFALSE 39515
// exit ;
39513: GO 39673
// tmp := array ;
39515: LD_ADDR_VAR 0 10
39519: PUSH
39520: LD_VAR 0 1
39524: ST_TO_ADDR
// for i = 1 to length do
39525: LD_ADDR_VAR 0 6
39529: PUSH
39530: DOUBLE
39531: LD_INT 1
39533: DEC
39534: ST_TO_ADDR
39535: LD_VAR 0 11
39539: PUSH
39540: FOR_TO
39541: IFFALSE 39661
// begin for j = 1 to array do
39543: LD_ADDR_VAR 0 7
39547: PUSH
39548: DOUBLE
39549: LD_INT 1
39551: DEC
39552: ST_TO_ADDR
39553: LD_VAR 0 1
39557: PUSH
39558: FOR_TO
39559: IFFALSE 39647
// begin k := j + d ;
39561: LD_ADDR_VAR 0 8
39565: PUSH
39566: LD_VAR 0 7
39570: PUSH
39571: LD_VAR 0 9
39575: PLUS
39576: ST_TO_ADDR
// if k > array then
39577: LD_VAR 0 8
39581: PUSH
39582: LD_VAR 0 1
39586: GREATER
39587: IFFALSE 39597
// k := 1 ;
39589: LD_ADDR_VAR 0 8
39593: PUSH
39594: LD_INT 1
39596: ST_TO_ADDR
// if not k then
39597: LD_VAR 0 8
39601: NOT
39602: IFFALSE 39614
// k := array ;
39604: LD_ADDR_VAR 0 8
39608: PUSH
39609: LD_VAR 0 1
39613: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
39614: LD_ADDR_VAR 0 10
39618: PUSH
39619: LD_VAR 0 10
39623: PPUSH
39624: LD_VAR 0 8
39628: PPUSH
39629: LD_VAR 0 1
39633: PUSH
39634: LD_VAR 0 7
39638: ARRAY
39639: PPUSH
39640: CALL_OW 1
39644: ST_TO_ADDR
// end ;
39645: GO 39558
39647: POP
39648: POP
// array := tmp ;
39649: LD_ADDR_VAR 0 1
39653: PUSH
39654: LD_VAR 0 10
39658: ST_TO_ADDR
// end ;
39659: GO 39540
39661: POP
39662: POP
// result := array ;
39663: LD_ADDR_VAR 0 5
39667: PUSH
39668: LD_VAR 0 1
39672: ST_TO_ADDR
// end ;
39673: LD_VAR 0 5
39677: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
39678: LD_INT 0
39680: PPUSH
39681: PPUSH
// result := 0 ;
39682: LD_ADDR_VAR 0 3
39686: PUSH
39687: LD_INT 0
39689: ST_TO_ADDR
// if not array or not value in array then
39690: LD_VAR 0 1
39694: NOT
39695: PUSH
39696: LD_VAR 0 2
39700: PUSH
39701: LD_VAR 0 1
39705: IN
39706: NOT
39707: OR
39708: IFFALSE 39712
// exit ;
39710: GO 39766
// for i = 1 to array do
39712: LD_ADDR_VAR 0 4
39716: PUSH
39717: DOUBLE
39718: LD_INT 1
39720: DEC
39721: ST_TO_ADDR
39722: LD_VAR 0 1
39726: PUSH
39727: FOR_TO
39728: IFFALSE 39764
// if value = array [ i ] then
39730: LD_VAR 0 2
39734: PUSH
39735: LD_VAR 0 1
39739: PUSH
39740: LD_VAR 0 4
39744: ARRAY
39745: EQUAL
39746: IFFALSE 39762
// begin result := i ;
39748: LD_ADDR_VAR 0 3
39752: PUSH
39753: LD_VAR 0 4
39757: ST_TO_ADDR
// exit ;
39758: POP
39759: POP
39760: GO 39766
// end ;
39762: GO 39727
39764: POP
39765: POP
// end ;
39766: LD_VAR 0 3
39770: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
39771: LD_INT 0
39773: PPUSH
// vc_chassis := chassis ;
39774: LD_ADDR_OWVAR 37
39778: PUSH
39779: LD_VAR 0 1
39783: ST_TO_ADDR
// vc_engine := engine ;
39784: LD_ADDR_OWVAR 39
39788: PUSH
39789: LD_VAR 0 2
39793: ST_TO_ADDR
// vc_control := control ;
39794: LD_ADDR_OWVAR 38
39798: PUSH
39799: LD_VAR 0 3
39803: ST_TO_ADDR
// vc_weapon := weapon ;
39804: LD_ADDR_OWVAR 40
39808: PUSH
39809: LD_VAR 0 4
39813: ST_TO_ADDR
// vc_fuel_battery := fuel ;
39814: LD_ADDR_OWVAR 41
39818: PUSH
39819: LD_VAR 0 5
39823: ST_TO_ADDR
// end ;
39824: LD_VAR 0 6
39828: RET
// export function WantPlant ( unit ) ; var task ; begin
39829: LD_INT 0
39831: PPUSH
39832: PPUSH
// result := false ;
39833: LD_ADDR_VAR 0 2
39837: PUSH
39838: LD_INT 0
39840: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
39841: LD_ADDR_VAR 0 3
39845: PUSH
39846: LD_VAR 0 1
39850: PPUSH
39851: CALL_OW 437
39855: ST_TO_ADDR
// if task then
39856: LD_VAR 0 3
39860: IFFALSE 39888
// if task [ 1 ] [ 1 ] = p then
39862: LD_VAR 0 3
39866: PUSH
39867: LD_INT 1
39869: ARRAY
39870: PUSH
39871: LD_INT 1
39873: ARRAY
39874: PUSH
39875: LD_STRING p
39877: EQUAL
39878: IFFALSE 39888
// result := true ;
39880: LD_ADDR_VAR 0 2
39884: PUSH
39885: LD_INT 1
39887: ST_TO_ADDR
// end ;
39888: LD_VAR 0 2
39892: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
39893: LD_INT 0
39895: PPUSH
39896: PPUSH
39897: PPUSH
39898: PPUSH
// if pos < 1 then
39899: LD_VAR 0 2
39903: PUSH
39904: LD_INT 1
39906: LESS
39907: IFFALSE 39911
// exit ;
39909: GO 40214
// if pos = 1 then
39911: LD_VAR 0 2
39915: PUSH
39916: LD_INT 1
39918: EQUAL
39919: IFFALSE 39952
// result := Replace ( arr , pos [ 1 ] , value ) else
39921: LD_ADDR_VAR 0 4
39925: PUSH
39926: LD_VAR 0 1
39930: PPUSH
39931: LD_VAR 0 2
39935: PUSH
39936: LD_INT 1
39938: ARRAY
39939: PPUSH
39940: LD_VAR 0 3
39944: PPUSH
39945: CALL_OW 1
39949: ST_TO_ADDR
39950: GO 40214
// begin tmp := arr ;
39952: LD_ADDR_VAR 0 6
39956: PUSH
39957: LD_VAR 0 1
39961: ST_TO_ADDR
// s_arr := [ tmp ] ;
39962: LD_ADDR_VAR 0 7
39966: PUSH
39967: LD_VAR 0 6
39971: PUSH
39972: EMPTY
39973: LIST
39974: ST_TO_ADDR
// for i = 1 to pos - 1 do
39975: LD_ADDR_VAR 0 5
39979: PUSH
39980: DOUBLE
39981: LD_INT 1
39983: DEC
39984: ST_TO_ADDR
39985: LD_VAR 0 2
39989: PUSH
39990: LD_INT 1
39992: MINUS
39993: PUSH
39994: FOR_TO
39995: IFFALSE 40040
// begin tmp := tmp [ pos [ i ] ] ;
39997: LD_ADDR_VAR 0 6
40001: PUSH
40002: LD_VAR 0 6
40006: PUSH
40007: LD_VAR 0 2
40011: PUSH
40012: LD_VAR 0 5
40016: ARRAY
40017: ARRAY
40018: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40019: LD_ADDR_VAR 0 7
40023: PUSH
40024: LD_VAR 0 7
40028: PUSH
40029: LD_VAR 0 6
40033: PUSH
40034: EMPTY
40035: LIST
40036: ADD
40037: ST_TO_ADDR
// end ;
40038: GO 39994
40040: POP
40041: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40042: LD_ADDR_VAR 0 6
40046: PUSH
40047: LD_VAR 0 6
40051: PPUSH
40052: LD_VAR 0 2
40056: PUSH
40057: LD_VAR 0 2
40061: ARRAY
40062: PPUSH
40063: LD_VAR 0 3
40067: PPUSH
40068: CALL_OW 1
40072: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40073: LD_ADDR_VAR 0 7
40077: PUSH
40078: LD_VAR 0 7
40082: PPUSH
40083: LD_VAR 0 7
40087: PPUSH
40088: LD_VAR 0 6
40092: PPUSH
40093: CALL_OW 1
40097: ST_TO_ADDR
// for i = s_arr downto 2 do
40098: LD_ADDR_VAR 0 5
40102: PUSH
40103: DOUBLE
40104: LD_VAR 0 7
40108: INC
40109: ST_TO_ADDR
40110: LD_INT 2
40112: PUSH
40113: FOR_DOWNTO
40114: IFFALSE 40198
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40116: LD_ADDR_VAR 0 6
40120: PUSH
40121: LD_VAR 0 7
40125: PUSH
40126: LD_VAR 0 5
40130: PUSH
40131: LD_INT 1
40133: MINUS
40134: ARRAY
40135: PPUSH
40136: LD_VAR 0 2
40140: PUSH
40141: LD_VAR 0 5
40145: PUSH
40146: LD_INT 1
40148: MINUS
40149: ARRAY
40150: PPUSH
40151: LD_VAR 0 7
40155: PUSH
40156: LD_VAR 0 5
40160: ARRAY
40161: PPUSH
40162: CALL_OW 1
40166: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40167: LD_ADDR_VAR 0 7
40171: PUSH
40172: LD_VAR 0 7
40176: PPUSH
40177: LD_VAR 0 5
40181: PUSH
40182: LD_INT 1
40184: MINUS
40185: PPUSH
40186: LD_VAR 0 6
40190: PPUSH
40191: CALL_OW 1
40195: ST_TO_ADDR
// end ;
40196: GO 40113
40198: POP
40199: POP
// result := s_arr [ 1 ] ;
40200: LD_ADDR_VAR 0 4
40204: PUSH
40205: LD_VAR 0 7
40209: PUSH
40210: LD_INT 1
40212: ARRAY
40213: ST_TO_ADDR
// end ; end ;
40214: LD_VAR 0 4
40218: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
40219: LD_INT 0
40221: PPUSH
40222: PPUSH
// if not list then
40223: LD_VAR 0 1
40227: NOT
40228: IFFALSE 40232
// exit ;
40230: GO 40323
// i := list [ pos1 ] ;
40232: LD_ADDR_VAR 0 5
40236: PUSH
40237: LD_VAR 0 1
40241: PUSH
40242: LD_VAR 0 2
40246: ARRAY
40247: ST_TO_ADDR
// if not i then
40248: LD_VAR 0 5
40252: NOT
40253: IFFALSE 40257
// exit ;
40255: GO 40323
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
40257: LD_ADDR_VAR 0 1
40261: PUSH
40262: LD_VAR 0 1
40266: PPUSH
40267: LD_VAR 0 2
40271: PPUSH
40272: LD_VAR 0 1
40276: PUSH
40277: LD_VAR 0 3
40281: ARRAY
40282: PPUSH
40283: CALL_OW 1
40287: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
40288: LD_ADDR_VAR 0 1
40292: PUSH
40293: LD_VAR 0 1
40297: PPUSH
40298: LD_VAR 0 3
40302: PPUSH
40303: LD_VAR 0 5
40307: PPUSH
40308: CALL_OW 1
40312: ST_TO_ADDR
// result := list ;
40313: LD_ADDR_VAR 0 4
40317: PUSH
40318: LD_VAR 0 1
40322: ST_TO_ADDR
// end ;
40323: LD_VAR 0 4
40327: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
40328: LD_INT 0
40330: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
40331: LD_ADDR_VAR 0 5
40335: PUSH
40336: LD_VAR 0 1
40340: PPUSH
40341: CALL_OW 250
40345: PPUSH
40346: LD_VAR 0 1
40350: PPUSH
40351: CALL_OW 251
40355: PPUSH
40356: LD_VAR 0 2
40360: PPUSH
40361: LD_VAR 0 3
40365: PPUSH
40366: LD_VAR 0 4
40370: PPUSH
40371: CALL 40381 0 5
40375: ST_TO_ADDR
// end ;
40376: LD_VAR 0 5
40380: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
40381: LD_INT 0
40383: PPUSH
40384: PPUSH
40385: PPUSH
40386: PPUSH
// if not list then
40387: LD_VAR 0 3
40391: NOT
40392: IFFALSE 40396
// exit ;
40394: GO 40784
// result := [ ] ;
40396: LD_ADDR_VAR 0 6
40400: PUSH
40401: EMPTY
40402: ST_TO_ADDR
// for i in list do
40403: LD_ADDR_VAR 0 7
40407: PUSH
40408: LD_VAR 0 3
40412: PUSH
40413: FOR_IN
40414: IFFALSE 40616
// begin tmp := GetDistUnitXY ( i , x , y ) ;
40416: LD_ADDR_VAR 0 9
40420: PUSH
40421: LD_VAR 0 7
40425: PPUSH
40426: LD_VAR 0 1
40430: PPUSH
40431: LD_VAR 0 2
40435: PPUSH
40436: CALL_OW 297
40440: ST_TO_ADDR
// if not result then
40441: LD_VAR 0 6
40445: NOT
40446: IFFALSE 40472
// result := [ [ i , tmp ] ] else
40448: LD_ADDR_VAR 0 6
40452: PUSH
40453: LD_VAR 0 7
40457: PUSH
40458: LD_VAR 0 9
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: EMPTY
40468: LIST
40469: ST_TO_ADDR
40470: GO 40614
// begin if result [ result ] [ 2 ] < tmp then
40472: LD_VAR 0 6
40476: PUSH
40477: LD_VAR 0 6
40481: ARRAY
40482: PUSH
40483: LD_INT 2
40485: ARRAY
40486: PUSH
40487: LD_VAR 0 9
40491: LESS
40492: IFFALSE 40534
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
40494: LD_ADDR_VAR 0 6
40498: PUSH
40499: LD_VAR 0 6
40503: PPUSH
40504: LD_VAR 0 6
40508: PUSH
40509: LD_INT 1
40511: PLUS
40512: PPUSH
40513: LD_VAR 0 7
40517: PUSH
40518: LD_VAR 0 9
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PPUSH
40527: CALL_OW 2
40531: ST_TO_ADDR
40532: GO 40614
// for j = 1 to result do
40534: LD_ADDR_VAR 0 8
40538: PUSH
40539: DOUBLE
40540: LD_INT 1
40542: DEC
40543: ST_TO_ADDR
40544: LD_VAR 0 6
40548: PUSH
40549: FOR_TO
40550: IFFALSE 40612
// begin if tmp < result [ j ] [ 2 ] then
40552: LD_VAR 0 9
40556: PUSH
40557: LD_VAR 0 6
40561: PUSH
40562: LD_VAR 0 8
40566: ARRAY
40567: PUSH
40568: LD_INT 2
40570: ARRAY
40571: LESS
40572: IFFALSE 40610
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40574: LD_ADDR_VAR 0 6
40578: PUSH
40579: LD_VAR 0 6
40583: PPUSH
40584: LD_VAR 0 8
40588: PPUSH
40589: LD_VAR 0 7
40593: PUSH
40594: LD_VAR 0 9
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PPUSH
40603: CALL_OW 2
40607: ST_TO_ADDR
// break ;
40608: GO 40612
// end ; end ;
40610: GO 40549
40612: POP
40613: POP
// end ; end ;
40614: GO 40413
40616: POP
40617: POP
// if result and not asc then
40618: LD_VAR 0 6
40622: PUSH
40623: LD_VAR 0 4
40627: NOT
40628: AND
40629: IFFALSE 40704
// begin tmp := result ;
40631: LD_ADDR_VAR 0 9
40635: PUSH
40636: LD_VAR 0 6
40640: ST_TO_ADDR
// for i = tmp downto 1 do
40641: LD_ADDR_VAR 0 7
40645: PUSH
40646: DOUBLE
40647: LD_VAR 0 9
40651: INC
40652: ST_TO_ADDR
40653: LD_INT 1
40655: PUSH
40656: FOR_DOWNTO
40657: IFFALSE 40702
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
40659: LD_ADDR_VAR 0 6
40663: PUSH
40664: LD_VAR 0 6
40668: PPUSH
40669: LD_VAR 0 9
40673: PUSH
40674: LD_VAR 0 7
40678: MINUS
40679: PUSH
40680: LD_INT 1
40682: PLUS
40683: PPUSH
40684: LD_VAR 0 9
40688: PUSH
40689: LD_VAR 0 7
40693: ARRAY
40694: PPUSH
40695: CALL_OW 1
40699: ST_TO_ADDR
40700: GO 40656
40702: POP
40703: POP
// end ; tmp := [ ] ;
40704: LD_ADDR_VAR 0 9
40708: PUSH
40709: EMPTY
40710: ST_TO_ADDR
// if mode then
40711: LD_VAR 0 5
40715: IFFALSE 40784
// begin for i = 1 to result do
40717: LD_ADDR_VAR 0 7
40721: PUSH
40722: DOUBLE
40723: LD_INT 1
40725: DEC
40726: ST_TO_ADDR
40727: LD_VAR 0 6
40731: PUSH
40732: FOR_TO
40733: IFFALSE 40772
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
40735: LD_ADDR_VAR 0 9
40739: PUSH
40740: LD_VAR 0 9
40744: PPUSH
40745: LD_VAR 0 7
40749: PPUSH
40750: LD_VAR 0 6
40754: PUSH
40755: LD_VAR 0 7
40759: ARRAY
40760: PUSH
40761: LD_INT 1
40763: ARRAY
40764: PPUSH
40765: CALL_OW 1
40769: ST_TO_ADDR
40770: GO 40732
40772: POP
40773: POP
// result := tmp ;
40774: LD_ADDR_VAR 0 6
40778: PUSH
40779: LD_VAR 0 9
40783: ST_TO_ADDR
// end ; end ;
40784: LD_VAR 0 6
40788: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40789: LD_INT 0
40791: PPUSH
40792: PPUSH
40793: PPUSH
40794: PPUSH
40795: PPUSH
40796: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40797: LD_ADDR_VAR 0 5
40801: PUSH
40802: LD_INT 0
40804: PUSH
40805: LD_INT 0
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: EMPTY
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: ST_TO_ADDR
// if not x or not y then
40819: LD_VAR 0 2
40823: NOT
40824: PUSH
40825: LD_VAR 0 3
40829: NOT
40830: OR
40831: IFFALSE 40835
// exit ;
40833: GO 42485
// if not range then
40835: LD_VAR 0 4
40839: NOT
40840: IFFALSE 40850
// range := 10 ;
40842: LD_ADDR_VAR 0 4
40846: PUSH
40847: LD_INT 10
40849: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40850: LD_ADDR_VAR 0 8
40854: PUSH
40855: LD_INT 81
40857: PUSH
40858: LD_VAR 0 1
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 92
40869: PUSH
40870: LD_VAR 0 2
40874: PUSH
40875: LD_VAR 0 3
40879: PUSH
40880: LD_VAR 0 4
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 3
40893: PUSH
40894: LD_INT 21
40896: PUSH
40897: LD_INT 3
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: LIST
40912: PPUSH
40913: CALL_OW 69
40917: ST_TO_ADDR
// if not tmp then
40918: LD_VAR 0 8
40922: NOT
40923: IFFALSE 40927
// exit ;
40925: GO 42485
// for i in tmp do
40927: LD_ADDR_VAR 0 6
40931: PUSH
40932: LD_VAR 0 8
40936: PUSH
40937: FOR_IN
40938: IFFALSE 42460
// begin points := [ 0 , 0 , 0 ] ;
40940: LD_ADDR_VAR 0 9
40944: PUSH
40945: LD_INT 0
40947: PUSH
40948: LD_INT 0
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: LIST
40958: ST_TO_ADDR
// bpoints := 1 ;
40959: LD_ADDR_VAR 0 10
40963: PUSH
40964: LD_INT 1
40966: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40967: LD_VAR 0 6
40971: PPUSH
40972: CALL_OW 247
40976: PUSH
40977: LD_INT 1
40979: DOUBLE
40980: EQUAL
40981: IFTRUE 40985
40983: GO 41563
40985: POP
// begin if GetClass ( i ) = 1 then
40986: LD_VAR 0 6
40990: PPUSH
40991: CALL_OW 257
40995: PUSH
40996: LD_INT 1
40998: EQUAL
40999: IFFALSE 41020
// points := [ 10 , 5 , 3 ] ;
41001: LD_ADDR_VAR 0 9
41005: PUSH
41006: LD_INT 10
41008: PUSH
41009: LD_INT 5
41011: PUSH
41012: LD_INT 3
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: LIST
41019: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41020: LD_VAR 0 6
41024: PPUSH
41025: CALL_OW 257
41029: PUSH
41030: LD_INT 2
41032: PUSH
41033: LD_INT 3
41035: PUSH
41036: LD_INT 4
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: LIST
41043: IN
41044: IFFALSE 41065
// points := [ 3 , 2 , 1 ] ;
41046: LD_ADDR_VAR 0 9
41050: PUSH
41051: LD_INT 3
41053: PUSH
41054: LD_INT 2
41056: PUSH
41057: LD_INT 1
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: LIST
41064: ST_TO_ADDR
// if GetClass ( i ) = 5 then
41065: LD_VAR 0 6
41069: PPUSH
41070: CALL_OW 257
41074: PUSH
41075: LD_INT 5
41077: EQUAL
41078: IFFALSE 41099
// points := [ 130 , 5 , 2 ] ;
41080: LD_ADDR_VAR 0 9
41084: PUSH
41085: LD_INT 130
41087: PUSH
41088: LD_INT 5
41090: PUSH
41091: LD_INT 2
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: LIST
41098: ST_TO_ADDR
// if GetClass ( i ) = 8 then
41099: LD_VAR 0 6
41103: PPUSH
41104: CALL_OW 257
41108: PUSH
41109: LD_INT 8
41111: EQUAL
41112: IFFALSE 41133
// points := [ 35 , 35 , 30 ] ;
41114: LD_ADDR_VAR 0 9
41118: PUSH
41119: LD_INT 35
41121: PUSH
41122: LD_INT 35
41124: PUSH
41125: LD_INT 30
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: LIST
41132: ST_TO_ADDR
// if GetClass ( i ) = 9 then
41133: LD_VAR 0 6
41137: PPUSH
41138: CALL_OW 257
41142: PUSH
41143: LD_INT 9
41145: EQUAL
41146: IFFALSE 41167
// points := [ 20 , 55 , 40 ] ;
41148: LD_ADDR_VAR 0 9
41152: PUSH
41153: LD_INT 20
41155: PUSH
41156: LD_INT 55
41158: PUSH
41159: LD_INT 40
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: LIST
41166: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
41167: LD_VAR 0 6
41171: PPUSH
41172: CALL_OW 257
41176: PUSH
41177: LD_INT 12
41179: PUSH
41180: LD_INT 16
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: IN
41187: IFFALSE 41208
// points := [ 5 , 3 , 2 ] ;
41189: LD_ADDR_VAR 0 9
41193: PUSH
41194: LD_INT 5
41196: PUSH
41197: LD_INT 3
41199: PUSH
41200: LD_INT 2
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: LIST
41207: ST_TO_ADDR
// if GetClass ( i ) = 17 then
41208: LD_VAR 0 6
41212: PPUSH
41213: CALL_OW 257
41217: PUSH
41218: LD_INT 17
41220: EQUAL
41221: IFFALSE 41242
// points := [ 100 , 50 , 75 ] ;
41223: LD_ADDR_VAR 0 9
41227: PUSH
41228: LD_INT 100
41230: PUSH
41231: LD_INT 50
41233: PUSH
41234: LD_INT 75
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: LIST
41241: ST_TO_ADDR
// if GetClass ( i ) = 15 then
41242: LD_VAR 0 6
41246: PPUSH
41247: CALL_OW 257
41251: PUSH
41252: LD_INT 15
41254: EQUAL
41255: IFFALSE 41276
// points := [ 10 , 5 , 3 ] ;
41257: LD_ADDR_VAR 0 9
41261: PUSH
41262: LD_INT 10
41264: PUSH
41265: LD_INT 5
41267: PUSH
41268: LD_INT 3
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: LIST
41275: ST_TO_ADDR
// if GetClass ( i ) = 14 then
41276: LD_VAR 0 6
41280: PPUSH
41281: CALL_OW 257
41285: PUSH
41286: LD_INT 14
41288: EQUAL
41289: IFFALSE 41310
// points := [ 10 , 0 , 0 ] ;
41291: LD_ADDR_VAR 0 9
41295: PUSH
41296: LD_INT 10
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: LD_INT 0
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: LIST
41309: ST_TO_ADDR
// if GetClass ( i ) = 11 then
41310: LD_VAR 0 6
41314: PPUSH
41315: CALL_OW 257
41319: PUSH
41320: LD_INT 11
41322: EQUAL
41323: IFFALSE 41344
// points := [ 30 , 10 , 5 ] ;
41325: LD_ADDR_VAR 0 9
41329: PUSH
41330: LD_INT 30
41332: PUSH
41333: LD_INT 10
41335: PUSH
41336: LD_INT 5
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: LIST
41343: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
41344: LD_VAR 0 1
41348: PPUSH
41349: LD_INT 5
41351: PPUSH
41352: CALL_OW 321
41356: PUSH
41357: LD_INT 2
41359: EQUAL
41360: IFFALSE 41377
// bpoints := bpoints * 1.8 ;
41362: LD_ADDR_VAR 0 10
41366: PUSH
41367: LD_VAR 0 10
41371: PUSH
41372: LD_REAL  1.80000000000000E+0000
41375: MUL
41376: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
41377: LD_VAR 0 6
41381: PPUSH
41382: CALL_OW 257
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: LD_INT 2
41392: PUSH
41393: LD_INT 3
41395: PUSH
41396: LD_INT 4
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: IN
41405: PUSH
41406: LD_VAR 0 1
41410: PPUSH
41411: LD_INT 51
41413: PPUSH
41414: CALL_OW 321
41418: PUSH
41419: LD_INT 2
41421: EQUAL
41422: AND
41423: IFFALSE 41440
// bpoints := bpoints * 1.2 ;
41425: LD_ADDR_VAR 0 10
41429: PUSH
41430: LD_VAR 0 10
41434: PUSH
41435: LD_REAL  1.20000000000000E+0000
41438: MUL
41439: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
41440: LD_VAR 0 6
41444: PPUSH
41445: CALL_OW 257
41449: PUSH
41450: LD_INT 5
41452: PUSH
41453: LD_INT 7
41455: PUSH
41456: LD_INT 9
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: LIST
41463: IN
41464: PUSH
41465: LD_VAR 0 1
41469: PPUSH
41470: LD_INT 52
41472: PPUSH
41473: CALL_OW 321
41477: PUSH
41478: LD_INT 2
41480: EQUAL
41481: AND
41482: IFFALSE 41499
// bpoints := bpoints * 1.5 ;
41484: LD_ADDR_VAR 0 10
41488: PUSH
41489: LD_VAR 0 10
41493: PUSH
41494: LD_REAL  1.50000000000000E+0000
41497: MUL
41498: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
41499: LD_VAR 0 1
41503: PPUSH
41504: LD_INT 66
41506: PPUSH
41507: CALL_OW 321
41511: PUSH
41512: LD_INT 2
41514: EQUAL
41515: IFFALSE 41532
// bpoints := bpoints * 1.1 ;
41517: LD_ADDR_VAR 0 10
41521: PUSH
41522: LD_VAR 0 10
41526: PUSH
41527: LD_REAL  1.10000000000000E+0000
41530: MUL
41531: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
41532: LD_ADDR_VAR 0 10
41536: PUSH
41537: LD_VAR 0 10
41541: PUSH
41542: LD_VAR 0 6
41546: PPUSH
41547: LD_INT 1
41549: PPUSH
41550: CALL_OW 259
41554: PUSH
41555: LD_REAL  1.15000000000000E+0000
41558: MUL
41559: MUL
41560: ST_TO_ADDR
// end ; unit_vehicle :
41561: GO 42389
41563: LD_INT 2
41565: DOUBLE
41566: EQUAL
41567: IFTRUE 41571
41569: GO 42377
41571: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
41572: LD_VAR 0 6
41576: PPUSH
41577: CALL_OW 264
41581: PUSH
41582: LD_INT 2
41584: PUSH
41585: LD_INT 42
41587: PUSH
41588: LD_INT 24
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: LIST
41595: IN
41596: IFFALSE 41617
// points := [ 25 , 5 , 3 ] ;
41598: LD_ADDR_VAR 0 9
41602: PUSH
41603: LD_INT 25
41605: PUSH
41606: LD_INT 5
41608: PUSH
41609: LD_INT 3
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: LIST
41616: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
41617: LD_VAR 0 6
41621: PPUSH
41622: CALL_OW 264
41626: PUSH
41627: LD_INT 4
41629: PUSH
41630: LD_INT 43
41632: PUSH
41633: LD_INT 25
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: LIST
41640: IN
41641: IFFALSE 41662
// points := [ 40 , 15 , 5 ] ;
41643: LD_ADDR_VAR 0 9
41647: PUSH
41648: LD_INT 40
41650: PUSH
41651: LD_INT 15
41653: PUSH
41654: LD_INT 5
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: LIST
41661: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
41662: LD_VAR 0 6
41666: PPUSH
41667: CALL_OW 264
41671: PUSH
41672: LD_INT 3
41674: PUSH
41675: LD_INT 23
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: IN
41682: IFFALSE 41703
// points := [ 7 , 25 , 8 ] ;
41684: LD_ADDR_VAR 0 9
41688: PUSH
41689: LD_INT 7
41691: PUSH
41692: LD_INT 25
41694: PUSH
41695: LD_INT 8
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: LIST
41702: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
41703: LD_VAR 0 6
41707: PPUSH
41708: CALL_OW 264
41712: PUSH
41713: LD_INT 5
41715: PUSH
41716: LD_INT 27
41718: PUSH
41719: LD_INT 44
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: LIST
41726: IN
41727: IFFALSE 41748
// points := [ 14 , 50 , 16 ] ;
41729: LD_ADDR_VAR 0 9
41733: PUSH
41734: LD_INT 14
41736: PUSH
41737: LD_INT 50
41739: PUSH
41740: LD_INT 16
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: LIST
41747: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
41748: LD_VAR 0 6
41752: PPUSH
41753: CALL_OW 264
41757: PUSH
41758: LD_INT 6
41760: PUSH
41761: LD_INT 46
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: IN
41768: IFFALSE 41789
// points := [ 32 , 120 , 70 ] ;
41770: LD_ADDR_VAR 0 9
41774: PUSH
41775: LD_INT 32
41777: PUSH
41778: LD_INT 120
41780: PUSH
41781: LD_INT 70
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: LIST
41788: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
41789: LD_VAR 0 6
41793: PPUSH
41794: CALL_OW 264
41798: PUSH
41799: LD_INT 7
41801: PUSH
41802: LD_INT 28
41804: PUSH
41805: LD_INT 45
41807: PUSH
41808: LD_INT 92
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: IN
41817: IFFALSE 41838
// points := [ 35 , 20 , 45 ] ;
41819: LD_ADDR_VAR 0 9
41823: PUSH
41824: LD_INT 35
41826: PUSH
41827: LD_INT 20
41829: PUSH
41830: LD_INT 45
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: LIST
41837: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
41838: LD_VAR 0 6
41842: PPUSH
41843: CALL_OW 264
41847: PUSH
41848: LD_INT 47
41850: PUSH
41851: EMPTY
41852: LIST
41853: IN
41854: IFFALSE 41875
// points := [ 67 , 45 , 75 ] ;
41856: LD_ADDR_VAR 0 9
41860: PUSH
41861: LD_INT 67
41863: PUSH
41864: LD_INT 45
41866: PUSH
41867: LD_INT 75
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: LIST
41874: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41875: LD_VAR 0 6
41879: PPUSH
41880: CALL_OW 264
41884: PUSH
41885: LD_INT 26
41887: PUSH
41888: EMPTY
41889: LIST
41890: IN
41891: IFFALSE 41912
// points := [ 120 , 30 , 80 ] ;
41893: LD_ADDR_VAR 0 9
41897: PUSH
41898: LD_INT 120
41900: PUSH
41901: LD_INT 30
41903: PUSH
41904: LD_INT 80
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: LIST
41911: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41912: LD_VAR 0 6
41916: PPUSH
41917: CALL_OW 264
41921: PUSH
41922: LD_INT 22
41924: PUSH
41925: EMPTY
41926: LIST
41927: IN
41928: IFFALSE 41949
// points := [ 40 , 1 , 1 ] ;
41930: LD_ADDR_VAR 0 9
41934: PUSH
41935: LD_INT 40
41937: PUSH
41938: LD_INT 1
41940: PUSH
41941: LD_INT 1
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: LIST
41948: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41949: LD_VAR 0 6
41953: PPUSH
41954: CALL_OW 264
41958: PUSH
41959: LD_INT 29
41961: PUSH
41962: EMPTY
41963: LIST
41964: IN
41965: IFFALSE 41986
// points := [ 70 , 200 , 400 ] ;
41967: LD_ADDR_VAR 0 9
41971: PUSH
41972: LD_INT 70
41974: PUSH
41975: LD_INT 200
41977: PUSH
41978: LD_INT 400
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: LIST
41985: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41986: LD_VAR 0 6
41990: PPUSH
41991: CALL_OW 264
41995: PUSH
41996: LD_INT 14
41998: PUSH
41999: LD_INT 53
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: IN
42006: IFFALSE 42027
// points := [ 40 , 10 , 20 ] ;
42008: LD_ADDR_VAR 0 9
42012: PUSH
42013: LD_INT 40
42015: PUSH
42016: LD_INT 10
42018: PUSH
42019: LD_INT 20
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: LIST
42026: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42027: LD_VAR 0 6
42031: PPUSH
42032: CALL_OW 264
42036: PUSH
42037: LD_INT 9
42039: PUSH
42040: EMPTY
42041: LIST
42042: IN
42043: IFFALSE 42064
// points := [ 5 , 70 , 20 ] ;
42045: LD_ADDR_VAR 0 9
42049: PUSH
42050: LD_INT 5
42052: PUSH
42053: LD_INT 70
42055: PUSH
42056: LD_INT 20
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: LIST
42063: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
42064: LD_VAR 0 6
42068: PPUSH
42069: CALL_OW 264
42073: PUSH
42074: LD_INT 10
42076: PUSH
42077: EMPTY
42078: LIST
42079: IN
42080: IFFALSE 42101
// points := [ 35 , 110 , 70 ] ;
42082: LD_ADDR_VAR 0 9
42086: PUSH
42087: LD_INT 35
42089: PUSH
42090: LD_INT 110
42092: PUSH
42093: LD_INT 70
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: LIST
42100: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
42101: LD_VAR 0 6
42105: PPUSH
42106: CALL_OW 265
42110: PUSH
42111: LD_INT 25
42113: EQUAL
42114: IFFALSE 42135
// points := [ 80 , 65 , 100 ] ;
42116: LD_ADDR_VAR 0 9
42120: PUSH
42121: LD_INT 80
42123: PUSH
42124: LD_INT 65
42126: PUSH
42127: LD_INT 100
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: LIST
42134: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
42135: LD_VAR 0 6
42139: PPUSH
42140: CALL_OW 263
42144: PUSH
42145: LD_INT 1
42147: EQUAL
42148: IFFALSE 42183
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
42150: LD_ADDR_VAR 0 10
42154: PUSH
42155: LD_VAR 0 10
42159: PUSH
42160: LD_VAR 0 6
42164: PPUSH
42165: CALL_OW 311
42169: PPUSH
42170: LD_INT 3
42172: PPUSH
42173: CALL_OW 259
42177: PUSH
42178: LD_INT 4
42180: MUL
42181: MUL
42182: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
42183: LD_VAR 0 6
42187: PPUSH
42188: CALL_OW 263
42192: PUSH
42193: LD_INT 2
42195: EQUAL
42196: IFFALSE 42247
// begin j := IsControledBy ( i ) ;
42198: LD_ADDR_VAR 0 7
42202: PUSH
42203: LD_VAR 0 6
42207: PPUSH
42208: CALL_OW 312
42212: ST_TO_ADDR
// if j then
42213: LD_VAR 0 7
42217: IFFALSE 42247
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
42219: LD_ADDR_VAR 0 10
42223: PUSH
42224: LD_VAR 0 10
42228: PUSH
42229: LD_VAR 0 7
42233: PPUSH
42234: LD_INT 3
42236: PPUSH
42237: CALL_OW 259
42241: PUSH
42242: LD_INT 3
42244: MUL
42245: MUL
42246: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
42247: LD_VAR 0 6
42251: PPUSH
42252: CALL_OW 264
42256: PUSH
42257: LD_INT 5
42259: PUSH
42260: LD_INT 6
42262: PUSH
42263: LD_INT 46
42265: PUSH
42266: LD_INT 44
42268: PUSH
42269: LD_INT 47
42271: PUSH
42272: LD_INT 45
42274: PUSH
42275: LD_INT 28
42277: PUSH
42278: LD_INT 7
42280: PUSH
42281: LD_INT 27
42283: PUSH
42284: LD_INT 29
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: IN
42299: PUSH
42300: LD_VAR 0 1
42304: PPUSH
42305: LD_INT 52
42307: PPUSH
42308: CALL_OW 321
42312: PUSH
42313: LD_INT 2
42315: EQUAL
42316: AND
42317: IFFALSE 42334
// bpoints := bpoints * 1.2 ;
42319: LD_ADDR_VAR 0 10
42323: PUSH
42324: LD_VAR 0 10
42328: PUSH
42329: LD_REAL  1.20000000000000E+0000
42332: MUL
42333: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
42334: LD_VAR 0 6
42338: PPUSH
42339: CALL_OW 264
42343: PUSH
42344: LD_INT 6
42346: PUSH
42347: LD_INT 46
42349: PUSH
42350: LD_INT 47
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: LIST
42357: IN
42358: IFFALSE 42375
// bpoints := bpoints * 1.2 ;
42360: LD_ADDR_VAR 0 10
42364: PUSH
42365: LD_VAR 0 10
42369: PUSH
42370: LD_REAL  1.20000000000000E+0000
42373: MUL
42374: ST_TO_ADDR
// end ; unit_building :
42375: GO 42389
42377: LD_INT 3
42379: DOUBLE
42380: EQUAL
42381: IFTRUE 42385
42383: GO 42388
42385: POP
// ; end ;
42386: GO 42389
42388: POP
// for j = 1 to 3 do
42389: LD_ADDR_VAR 0 7
42393: PUSH
42394: DOUBLE
42395: LD_INT 1
42397: DEC
42398: ST_TO_ADDR
42399: LD_INT 3
42401: PUSH
42402: FOR_TO
42403: IFFALSE 42456
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
42405: LD_ADDR_VAR 0 5
42409: PUSH
42410: LD_VAR 0 5
42414: PPUSH
42415: LD_VAR 0 7
42419: PPUSH
42420: LD_VAR 0 5
42424: PUSH
42425: LD_VAR 0 7
42429: ARRAY
42430: PUSH
42431: LD_VAR 0 9
42435: PUSH
42436: LD_VAR 0 7
42440: ARRAY
42441: PUSH
42442: LD_VAR 0 10
42446: MUL
42447: PLUS
42448: PPUSH
42449: CALL_OW 1
42453: ST_TO_ADDR
42454: GO 42402
42456: POP
42457: POP
// end ;
42458: GO 40937
42460: POP
42461: POP
// result := Replace ( result , 4 , tmp ) ;
42462: LD_ADDR_VAR 0 5
42466: PUSH
42467: LD_VAR 0 5
42471: PPUSH
42472: LD_INT 4
42474: PPUSH
42475: LD_VAR 0 8
42479: PPUSH
42480: CALL_OW 1
42484: ST_TO_ADDR
// end ;
42485: LD_VAR 0 5
42489: RET
// export function DangerAtRange ( unit , range ) ; begin
42490: LD_INT 0
42492: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
42493: LD_ADDR_VAR 0 3
42497: PUSH
42498: LD_VAR 0 1
42502: PPUSH
42503: CALL_OW 255
42507: PPUSH
42508: LD_VAR 0 1
42512: PPUSH
42513: CALL_OW 250
42517: PPUSH
42518: LD_VAR 0 1
42522: PPUSH
42523: CALL_OW 251
42527: PPUSH
42528: LD_VAR 0 2
42532: PPUSH
42533: CALL 40789 0 4
42537: ST_TO_ADDR
// end ;
42538: LD_VAR 0 3
42542: RET
// export function DangerInArea ( side , area ) ; begin
42543: LD_INT 0
42545: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
42546: LD_ADDR_VAR 0 3
42550: PUSH
42551: LD_VAR 0 2
42555: PPUSH
42556: LD_INT 81
42558: PUSH
42559: LD_VAR 0 1
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PPUSH
42568: CALL_OW 70
42572: ST_TO_ADDR
// end ;
42573: LD_VAR 0 3
42577: RET
// export function IsExtension ( b ) ; begin
42578: LD_INT 0
42580: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
42581: LD_ADDR_VAR 0 2
42585: PUSH
42586: LD_VAR 0 1
42590: PUSH
42591: LD_INT 23
42593: PUSH
42594: LD_INT 20
42596: PUSH
42597: LD_INT 22
42599: PUSH
42600: LD_INT 17
42602: PUSH
42603: LD_INT 24
42605: PUSH
42606: LD_INT 21
42608: PUSH
42609: LD_INT 19
42611: PUSH
42612: LD_INT 16
42614: PUSH
42615: LD_INT 25
42617: PUSH
42618: LD_INT 18
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: IN
42633: ST_TO_ADDR
// end ;
42634: LD_VAR 0 2
42638: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
42639: LD_INT 0
42641: PPUSH
42642: PPUSH
42643: PPUSH
// result := [ ] ;
42644: LD_ADDR_VAR 0 4
42648: PUSH
42649: EMPTY
42650: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
42651: LD_ADDR_VAR 0 5
42655: PUSH
42656: LD_VAR 0 2
42660: PPUSH
42661: LD_INT 21
42663: PUSH
42664: LD_INT 3
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PPUSH
42671: CALL_OW 70
42675: ST_TO_ADDR
// if not tmp then
42676: LD_VAR 0 5
42680: NOT
42681: IFFALSE 42685
// exit ;
42683: GO 42749
// if checkLink then
42685: LD_VAR 0 3
42689: IFFALSE 42739
// begin for i in tmp do
42691: LD_ADDR_VAR 0 6
42695: PUSH
42696: LD_VAR 0 5
42700: PUSH
42701: FOR_IN
42702: IFFALSE 42737
// if GetBase ( i ) <> base then
42704: LD_VAR 0 6
42708: PPUSH
42709: CALL_OW 274
42713: PUSH
42714: LD_VAR 0 1
42718: NONEQUAL
42719: IFFALSE 42735
// ComLinkToBase ( base , i ) ;
42721: LD_VAR 0 1
42725: PPUSH
42726: LD_VAR 0 6
42730: PPUSH
42731: CALL_OW 169
42735: GO 42701
42737: POP
42738: POP
// end ; result := tmp ;
42739: LD_ADDR_VAR 0 4
42743: PUSH
42744: LD_VAR 0 5
42748: ST_TO_ADDR
// end ;
42749: LD_VAR 0 4
42753: RET
// export function ComComplete ( units , b ) ; var i ; begin
42754: LD_INT 0
42756: PPUSH
42757: PPUSH
// if not units then
42758: LD_VAR 0 1
42762: NOT
42763: IFFALSE 42767
// exit ;
42765: GO 42857
// for i in units do
42767: LD_ADDR_VAR 0 4
42771: PUSH
42772: LD_VAR 0 1
42776: PUSH
42777: FOR_IN
42778: IFFALSE 42855
// if BuildingStatus ( b ) = bs_build then
42780: LD_VAR 0 2
42784: PPUSH
42785: CALL_OW 461
42789: PUSH
42790: LD_INT 1
42792: EQUAL
42793: IFFALSE 42853
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42795: LD_VAR 0 4
42799: PPUSH
42800: LD_STRING h
42802: PUSH
42803: LD_VAR 0 2
42807: PPUSH
42808: CALL_OW 250
42812: PUSH
42813: LD_VAR 0 2
42817: PPUSH
42818: CALL_OW 251
42822: PUSH
42823: LD_VAR 0 2
42827: PUSH
42828: LD_INT 0
42830: PUSH
42831: LD_INT 0
42833: PUSH
42834: LD_INT 0
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: PUSH
42846: EMPTY
42847: LIST
42848: PPUSH
42849: CALL_OW 446
42853: GO 42777
42855: POP
42856: POP
// end ;
42857: LD_VAR 0 3
42861: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42862: LD_INT 0
42864: PPUSH
42865: PPUSH
42866: PPUSH
42867: PPUSH
42868: PPUSH
42869: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
42870: LD_VAR 0 1
42874: NOT
42875: PUSH
42876: LD_VAR 0 1
42880: PPUSH
42881: CALL_OW 263
42885: PUSH
42886: LD_INT 2
42888: NONEQUAL
42889: OR
42890: IFFALSE 42894
// exit ;
42892: GO 43210
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42894: LD_ADDR_VAR 0 6
42898: PUSH
42899: LD_INT 22
42901: PUSH
42902: LD_VAR 0 1
42906: PPUSH
42907: CALL_OW 255
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 2
42918: PUSH
42919: LD_INT 30
42921: PUSH
42922: LD_INT 36
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 34
42931: PUSH
42932: LD_INT 31
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: LIST
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PPUSH
42948: CALL_OW 69
42952: ST_TO_ADDR
// if not tmp then
42953: LD_VAR 0 6
42957: NOT
42958: IFFALSE 42962
// exit ;
42960: GO 43210
// result := [ ] ;
42962: LD_ADDR_VAR 0 2
42966: PUSH
42967: EMPTY
42968: ST_TO_ADDR
// for i in tmp do
42969: LD_ADDR_VAR 0 3
42973: PUSH
42974: LD_VAR 0 6
42978: PUSH
42979: FOR_IN
42980: IFFALSE 43051
// begin t := UnitsInside ( i ) ;
42982: LD_ADDR_VAR 0 4
42986: PUSH
42987: LD_VAR 0 3
42991: PPUSH
42992: CALL_OW 313
42996: ST_TO_ADDR
// if t then
42997: LD_VAR 0 4
43001: IFFALSE 43049
// for j in t do
43003: LD_ADDR_VAR 0 7
43007: PUSH
43008: LD_VAR 0 4
43012: PUSH
43013: FOR_IN
43014: IFFALSE 43047
// result := Replace ( result , result + 1 , j ) ;
43016: LD_ADDR_VAR 0 2
43020: PUSH
43021: LD_VAR 0 2
43025: PPUSH
43026: LD_VAR 0 2
43030: PUSH
43031: LD_INT 1
43033: PLUS
43034: PPUSH
43035: LD_VAR 0 7
43039: PPUSH
43040: CALL_OW 1
43044: ST_TO_ADDR
43045: GO 43013
43047: POP
43048: POP
// end ;
43049: GO 42979
43051: POP
43052: POP
// if not result then
43053: LD_VAR 0 2
43057: NOT
43058: IFFALSE 43062
// exit ;
43060: GO 43210
// mech := result [ 1 ] ;
43062: LD_ADDR_VAR 0 5
43066: PUSH
43067: LD_VAR 0 2
43071: PUSH
43072: LD_INT 1
43074: ARRAY
43075: ST_TO_ADDR
// if result > 1 then
43076: LD_VAR 0 2
43080: PUSH
43081: LD_INT 1
43083: GREATER
43084: IFFALSE 43196
// begin for i = 2 to result do
43086: LD_ADDR_VAR 0 3
43090: PUSH
43091: DOUBLE
43092: LD_INT 2
43094: DEC
43095: ST_TO_ADDR
43096: LD_VAR 0 2
43100: PUSH
43101: FOR_TO
43102: IFFALSE 43194
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
43104: LD_ADDR_VAR 0 4
43108: PUSH
43109: LD_VAR 0 2
43113: PUSH
43114: LD_VAR 0 3
43118: ARRAY
43119: PPUSH
43120: LD_INT 3
43122: PPUSH
43123: CALL_OW 259
43127: PUSH
43128: LD_VAR 0 2
43132: PUSH
43133: LD_VAR 0 3
43137: ARRAY
43138: PPUSH
43139: CALL_OW 432
43143: MINUS
43144: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
43145: LD_VAR 0 4
43149: PUSH
43150: LD_VAR 0 5
43154: PPUSH
43155: LD_INT 3
43157: PPUSH
43158: CALL_OW 259
43162: PUSH
43163: LD_VAR 0 5
43167: PPUSH
43168: CALL_OW 432
43172: MINUS
43173: GREATEREQUAL
43174: IFFALSE 43192
// mech := result [ i ] ;
43176: LD_ADDR_VAR 0 5
43180: PUSH
43181: LD_VAR 0 2
43185: PUSH
43186: LD_VAR 0 3
43190: ARRAY
43191: ST_TO_ADDR
// end ;
43192: GO 43101
43194: POP
43195: POP
// end ; ComLinkTo ( vehicle , mech ) ;
43196: LD_VAR 0 1
43200: PPUSH
43201: LD_VAR 0 5
43205: PPUSH
43206: CALL_OW 135
// end ;
43210: LD_VAR 0 2
43214: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
43215: LD_INT 0
43217: PPUSH
43218: PPUSH
43219: PPUSH
43220: PPUSH
43221: PPUSH
43222: PPUSH
43223: PPUSH
43224: PPUSH
43225: PPUSH
43226: PPUSH
43227: PPUSH
43228: PPUSH
43229: PPUSH
// result := [ ] ;
43230: LD_ADDR_VAR 0 7
43234: PUSH
43235: EMPTY
43236: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
43237: LD_VAR 0 1
43241: PPUSH
43242: CALL_OW 266
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: IN
43257: NOT
43258: IFFALSE 43262
// exit ;
43260: GO 44896
// if name then
43262: LD_VAR 0 3
43266: IFFALSE 43282
// SetBName ( base_dep , name ) ;
43268: LD_VAR 0 1
43272: PPUSH
43273: LD_VAR 0 3
43277: PPUSH
43278: CALL_OW 500
// base := GetBase ( base_dep ) ;
43282: LD_ADDR_VAR 0 15
43286: PUSH
43287: LD_VAR 0 1
43291: PPUSH
43292: CALL_OW 274
43296: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
43297: LD_ADDR_VAR 0 16
43301: PUSH
43302: LD_VAR 0 1
43306: PPUSH
43307: CALL_OW 255
43311: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
43312: LD_ADDR_VAR 0 17
43316: PUSH
43317: LD_VAR 0 1
43321: PPUSH
43322: CALL_OW 248
43326: ST_TO_ADDR
// if sources then
43327: LD_VAR 0 5
43331: IFFALSE 43378
// for i = 1 to 3 do
43333: LD_ADDR_VAR 0 8
43337: PUSH
43338: DOUBLE
43339: LD_INT 1
43341: DEC
43342: ST_TO_ADDR
43343: LD_INT 3
43345: PUSH
43346: FOR_TO
43347: IFFALSE 43376
// AddResourceType ( base , i , sources [ i ] ) ;
43349: LD_VAR 0 15
43353: PPUSH
43354: LD_VAR 0 8
43358: PPUSH
43359: LD_VAR 0 5
43363: PUSH
43364: LD_VAR 0 8
43368: ARRAY
43369: PPUSH
43370: CALL_OW 276
43374: GO 43346
43376: POP
43377: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
43378: LD_ADDR_VAR 0 18
43382: PUSH
43383: LD_VAR 0 15
43387: PPUSH
43388: LD_VAR 0 2
43392: PPUSH
43393: LD_INT 1
43395: PPUSH
43396: CALL 42639 0 3
43400: ST_TO_ADDR
// InitHc ;
43401: CALL_OW 19
// InitUc ;
43405: CALL_OW 18
// uc_side := side ;
43409: LD_ADDR_OWVAR 20
43413: PUSH
43414: LD_VAR 0 16
43418: ST_TO_ADDR
// uc_nation := nation ;
43419: LD_ADDR_OWVAR 21
43423: PUSH
43424: LD_VAR 0 17
43428: ST_TO_ADDR
// if buildings then
43429: LD_VAR 0 18
43433: IFFALSE 44755
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
43435: LD_ADDR_VAR 0 19
43439: PUSH
43440: LD_VAR 0 18
43444: PPUSH
43445: LD_INT 2
43447: PUSH
43448: LD_INT 30
43450: PUSH
43451: LD_INT 29
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 30
43460: PUSH
43461: LD_INT 30
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: LIST
43472: PPUSH
43473: CALL_OW 72
43477: ST_TO_ADDR
// if tmp then
43478: LD_VAR 0 19
43482: IFFALSE 43530
// for i in tmp do
43484: LD_ADDR_VAR 0 8
43488: PUSH
43489: LD_VAR 0 19
43493: PUSH
43494: FOR_IN
43495: IFFALSE 43528
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
43497: LD_VAR 0 8
43501: PPUSH
43502: CALL_OW 250
43506: PPUSH
43507: LD_VAR 0 8
43511: PPUSH
43512: CALL_OW 251
43516: PPUSH
43517: LD_VAR 0 16
43521: PPUSH
43522: CALL_OW 441
43526: GO 43494
43528: POP
43529: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
43530: LD_VAR 0 18
43534: PPUSH
43535: LD_INT 2
43537: PUSH
43538: LD_INT 30
43540: PUSH
43541: LD_INT 32
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 30
43550: PUSH
43551: LD_INT 33
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: LIST
43562: PPUSH
43563: CALL_OW 72
43567: IFFALSE 43655
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
43569: LD_ADDR_VAR 0 8
43573: PUSH
43574: LD_VAR 0 18
43578: PPUSH
43579: LD_INT 2
43581: PUSH
43582: LD_INT 30
43584: PUSH
43585: LD_INT 32
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 30
43594: PUSH
43595: LD_INT 33
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: LIST
43606: PPUSH
43607: CALL_OW 72
43611: PUSH
43612: FOR_IN
43613: IFFALSE 43653
// begin if not GetBWeapon ( i ) then
43615: LD_VAR 0 8
43619: PPUSH
43620: CALL_OW 269
43624: NOT
43625: IFFALSE 43651
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
43627: LD_VAR 0 8
43631: PPUSH
43632: LD_VAR 0 8
43636: PPUSH
43637: LD_VAR 0 2
43641: PPUSH
43642: CALL 44901 0 2
43646: PPUSH
43647: CALL_OW 431
// end ;
43651: GO 43612
43653: POP
43654: POP
// end ; for i = 1 to personel do
43655: LD_ADDR_VAR 0 8
43659: PUSH
43660: DOUBLE
43661: LD_INT 1
43663: DEC
43664: ST_TO_ADDR
43665: LD_VAR 0 6
43669: PUSH
43670: FOR_TO
43671: IFFALSE 44735
// begin if i > 4 then
43673: LD_VAR 0 8
43677: PUSH
43678: LD_INT 4
43680: GREATER
43681: IFFALSE 43685
// break ;
43683: GO 44735
// case i of 1 :
43685: LD_VAR 0 8
43689: PUSH
43690: LD_INT 1
43692: DOUBLE
43693: EQUAL
43694: IFTRUE 43698
43696: GO 43778
43698: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
43699: LD_ADDR_VAR 0 12
43703: PUSH
43704: LD_VAR 0 18
43708: PPUSH
43709: LD_INT 22
43711: PUSH
43712: LD_VAR 0 16
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 58
43723: PUSH
43724: EMPTY
43725: LIST
43726: PUSH
43727: LD_INT 2
43729: PUSH
43730: LD_INT 30
43732: PUSH
43733: LD_INT 32
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 30
43742: PUSH
43743: LD_INT 4
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 30
43752: PUSH
43753: LD_INT 5
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: LIST
43770: PPUSH
43771: CALL_OW 72
43775: ST_TO_ADDR
43776: GO 44000
43778: LD_INT 2
43780: DOUBLE
43781: EQUAL
43782: IFTRUE 43786
43784: GO 43848
43786: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43787: LD_ADDR_VAR 0 12
43791: PUSH
43792: LD_VAR 0 18
43796: PPUSH
43797: LD_INT 22
43799: PUSH
43800: LD_VAR 0 16
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 2
43811: PUSH
43812: LD_INT 30
43814: PUSH
43815: LD_INT 0
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 30
43824: PUSH
43825: LD_INT 1
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: LIST
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PPUSH
43841: CALL_OW 72
43845: ST_TO_ADDR
43846: GO 44000
43848: LD_INT 3
43850: DOUBLE
43851: EQUAL
43852: IFTRUE 43856
43854: GO 43918
43856: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43857: LD_ADDR_VAR 0 12
43861: PUSH
43862: LD_VAR 0 18
43866: PPUSH
43867: LD_INT 22
43869: PUSH
43870: LD_VAR 0 16
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 2
43881: PUSH
43882: LD_INT 30
43884: PUSH
43885: LD_INT 2
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 30
43894: PUSH
43895: LD_INT 3
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: LIST
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PPUSH
43911: CALL_OW 72
43915: ST_TO_ADDR
43916: GO 44000
43918: LD_INT 4
43920: DOUBLE
43921: EQUAL
43922: IFTRUE 43926
43924: GO 43999
43926: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43927: LD_ADDR_VAR 0 12
43931: PUSH
43932: LD_VAR 0 18
43936: PPUSH
43937: LD_INT 22
43939: PUSH
43940: LD_VAR 0 16
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 2
43951: PUSH
43952: LD_INT 30
43954: PUSH
43955: LD_INT 6
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 30
43964: PUSH
43965: LD_INT 7
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 30
43974: PUSH
43975: LD_INT 8
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PPUSH
43992: CALL_OW 72
43996: ST_TO_ADDR
43997: GO 44000
43999: POP
// if i = 1 then
44000: LD_VAR 0 8
44004: PUSH
44005: LD_INT 1
44007: EQUAL
44008: IFFALSE 44119
// begin tmp := [ ] ;
44010: LD_ADDR_VAR 0 19
44014: PUSH
44015: EMPTY
44016: ST_TO_ADDR
// for j in f do
44017: LD_ADDR_VAR 0 9
44021: PUSH
44022: LD_VAR 0 12
44026: PUSH
44027: FOR_IN
44028: IFFALSE 44101
// if GetBType ( j ) = b_bunker then
44030: LD_VAR 0 9
44034: PPUSH
44035: CALL_OW 266
44039: PUSH
44040: LD_INT 32
44042: EQUAL
44043: IFFALSE 44070
// tmp := Insert ( tmp , 1 , j ) else
44045: LD_ADDR_VAR 0 19
44049: PUSH
44050: LD_VAR 0 19
44054: PPUSH
44055: LD_INT 1
44057: PPUSH
44058: LD_VAR 0 9
44062: PPUSH
44063: CALL_OW 2
44067: ST_TO_ADDR
44068: GO 44099
// tmp := Insert ( tmp , tmp + 1 , j ) ;
44070: LD_ADDR_VAR 0 19
44074: PUSH
44075: LD_VAR 0 19
44079: PPUSH
44080: LD_VAR 0 19
44084: PUSH
44085: LD_INT 1
44087: PLUS
44088: PPUSH
44089: LD_VAR 0 9
44093: PPUSH
44094: CALL_OW 2
44098: ST_TO_ADDR
44099: GO 44027
44101: POP
44102: POP
// if tmp then
44103: LD_VAR 0 19
44107: IFFALSE 44119
// f := tmp ;
44109: LD_ADDR_VAR 0 12
44113: PUSH
44114: LD_VAR 0 19
44118: ST_TO_ADDR
// end ; x := personel [ i ] ;
44119: LD_ADDR_VAR 0 13
44123: PUSH
44124: LD_VAR 0 6
44128: PUSH
44129: LD_VAR 0 8
44133: ARRAY
44134: ST_TO_ADDR
// if x = - 1 then
44135: LD_VAR 0 13
44139: PUSH
44140: LD_INT 1
44142: NEG
44143: EQUAL
44144: IFFALSE 44353
// begin for j in f do
44146: LD_ADDR_VAR 0 9
44150: PUSH
44151: LD_VAR 0 12
44155: PUSH
44156: FOR_IN
44157: IFFALSE 44349
// repeat InitHc ;
44159: CALL_OW 19
// if GetBType ( j ) = b_barracks then
44163: LD_VAR 0 9
44167: PPUSH
44168: CALL_OW 266
44172: PUSH
44173: LD_INT 5
44175: EQUAL
44176: IFFALSE 44246
// begin if UnitsInside ( j ) < 3 then
44178: LD_VAR 0 9
44182: PPUSH
44183: CALL_OW 313
44187: PUSH
44188: LD_INT 3
44190: LESS
44191: IFFALSE 44227
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44193: LD_INT 0
44195: PPUSH
44196: LD_INT 5
44198: PUSH
44199: LD_INT 8
44201: PUSH
44202: LD_INT 9
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: LIST
44209: PUSH
44210: LD_VAR 0 17
44214: ARRAY
44215: PPUSH
44216: LD_VAR 0 4
44220: PPUSH
44221: CALL_OW 380
44225: GO 44244
// PrepareHuman ( false , i , skill ) ;
44227: LD_INT 0
44229: PPUSH
44230: LD_VAR 0 8
44234: PPUSH
44235: LD_VAR 0 4
44239: PPUSH
44240: CALL_OW 380
// end else
44244: GO 44263
// PrepareHuman ( false , i , skill ) ;
44246: LD_INT 0
44248: PPUSH
44249: LD_VAR 0 8
44253: PPUSH
44254: LD_VAR 0 4
44258: PPUSH
44259: CALL_OW 380
// un := CreateHuman ;
44263: LD_ADDR_VAR 0 14
44267: PUSH
44268: CALL_OW 44
44272: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44273: LD_ADDR_VAR 0 7
44277: PUSH
44278: LD_VAR 0 7
44282: PPUSH
44283: LD_INT 1
44285: PPUSH
44286: LD_VAR 0 14
44290: PPUSH
44291: CALL_OW 2
44295: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
44296: LD_VAR 0 14
44300: PPUSH
44301: LD_VAR 0 9
44305: PPUSH
44306: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
44310: LD_VAR 0 9
44314: PPUSH
44315: CALL_OW 313
44319: PUSH
44320: LD_INT 6
44322: EQUAL
44323: PUSH
44324: LD_VAR 0 9
44328: PPUSH
44329: CALL_OW 266
44333: PUSH
44334: LD_INT 32
44336: PUSH
44337: LD_INT 31
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: IN
44344: OR
44345: IFFALSE 44159
44347: GO 44156
44349: POP
44350: POP
// end else
44351: GO 44733
// for j = 1 to x do
44353: LD_ADDR_VAR 0 9
44357: PUSH
44358: DOUBLE
44359: LD_INT 1
44361: DEC
44362: ST_TO_ADDR
44363: LD_VAR 0 13
44367: PUSH
44368: FOR_TO
44369: IFFALSE 44731
// begin InitHc ;
44371: CALL_OW 19
// if not f then
44375: LD_VAR 0 12
44379: NOT
44380: IFFALSE 44469
// begin PrepareHuman ( false , i , skill ) ;
44382: LD_INT 0
44384: PPUSH
44385: LD_VAR 0 8
44389: PPUSH
44390: LD_VAR 0 4
44394: PPUSH
44395: CALL_OW 380
// un := CreateHuman ;
44399: LD_ADDR_VAR 0 14
44403: PUSH
44404: CALL_OW 44
44408: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44409: LD_ADDR_VAR 0 7
44413: PUSH
44414: LD_VAR 0 7
44418: PPUSH
44419: LD_INT 1
44421: PPUSH
44422: LD_VAR 0 14
44426: PPUSH
44427: CALL_OW 2
44431: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44432: LD_VAR 0 14
44436: PPUSH
44437: LD_VAR 0 1
44441: PPUSH
44442: CALL_OW 250
44446: PPUSH
44447: LD_VAR 0 1
44451: PPUSH
44452: CALL_OW 251
44456: PPUSH
44457: LD_INT 10
44459: PPUSH
44460: LD_INT 0
44462: PPUSH
44463: CALL_OW 50
// continue ;
44467: GO 44368
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
44469: LD_VAR 0 12
44473: PUSH
44474: LD_INT 1
44476: ARRAY
44477: PPUSH
44478: CALL_OW 313
44482: PUSH
44483: LD_VAR 0 12
44487: PUSH
44488: LD_INT 1
44490: ARRAY
44491: PPUSH
44492: CALL_OW 266
44496: PUSH
44497: LD_INT 32
44499: PUSH
44500: LD_INT 31
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: IN
44507: AND
44508: PUSH
44509: LD_VAR 0 12
44513: PUSH
44514: LD_INT 1
44516: ARRAY
44517: PPUSH
44518: CALL_OW 313
44522: PUSH
44523: LD_INT 6
44525: EQUAL
44526: OR
44527: IFFALSE 44547
// f := Delete ( f , 1 ) ;
44529: LD_ADDR_VAR 0 12
44533: PUSH
44534: LD_VAR 0 12
44538: PPUSH
44539: LD_INT 1
44541: PPUSH
44542: CALL_OW 3
44546: ST_TO_ADDR
// if not f then
44547: LD_VAR 0 12
44551: NOT
44552: IFFALSE 44570
// begin x := x + 2 ;
44554: LD_ADDR_VAR 0 13
44558: PUSH
44559: LD_VAR 0 13
44563: PUSH
44564: LD_INT 2
44566: PLUS
44567: ST_TO_ADDR
// continue ;
44568: GO 44368
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
44570: LD_VAR 0 12
44574: PUSH
44575: LD_INT 1
44577: ARRAY
44578: PPUSH
44579: CALL_OW 266
44583: PUSH
44584: LD_INT 5
44586: EQUAL
44587: IFFALSE 44661
// begin if UnitsInside ( f [ 1 ] ) < 3 then
44589: LD_VAR 0 12
44593: PUSH
44594: LD_INT 1
44596: ARRAY
44597: PPUSH
44598: CALL_OW 313
44602: PUSH
44603: LD_INT 3
44605: LESS
44606: IFFALSE 44642
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44608: LD_INT 0
44610: PPUSH
44611: LD_INT 5
44613: PUSH
44614: LD_INT 8
44616: PUSH
44617: LD_INT 9
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: LIST
44624: PUSH
44625: LD_VAR 0 17
44629: ARRAY
44630: PPUSH
44631: LD_VAR 0 4
44635: PPUSH
44636: CALL_OW 380
44640: GO 44659
// PrepareHuman ( false , i , skill ) ;
44642: LD_INT 0
44644: PPUSH
44645: LD_VAR 0 8
44649: PPUSH
44650: LD_VAR 0 4
44654: PPUSH
44655: CALL_OW 380
// end else
44659: GO 44678
// PrepareHuman ( false , i , skill ) ;
44661: LD_INT 0
44663: PPUSH
44664: LD_VAR 0 8
44668: PPUSH
44669: LD_VAR 0 4
44673: PPUSH
44674: CALL_OW 380
// un := CreateHuman ;
44678: LD_ADDR_VAR 0 14
44682: PUSH
44683: CALL_OW 44
44687: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44688: LD_ADDR_VAR 0 7
44692: PUSH
44693: LD_VAR 0 7
44697: PPUSH
44698: LD_INT 1
44700: PPUSH
44701: LD_VAR 0 14
44705: PPUSH
44706: CALL_OW 2
44710: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
44711: LD_VAR 0 14
44715: PPUSH
44716: LD_VAR 0 12
44720: PUSH
44721: LD_INT 1
44723: ARRAY
44724: PPUSH
44725: CALL_OW 52
// end ;
44729: GO 44368
44731: POP
44732: POP
// end ;
44733: GO 43670
44735: POP
44736: POP
// result := result ^ buildings ;
44737: LD_ADDR_VAR 0 7
44741: PUSH
44742: LD_VAR 0 7
44746: PUSH
44747: LD_VAR 0 18
44751: ADD
44752: ST_TO_ADDR
// end else
44753: GO 44896
// begin for i = 1 to personel do
44755: LD_ADDR_VAR 0 8
44759: PUSH
44760: DOUBLE
44761: LD_INT 1
44763: DEC
44764: ST_TO_ADDR
44765: LD_VAR 0 6
44769: PUSH
44770: FOR_TO
44771: IFFALSE 44894
// begin if i > 4 then
44773: LD_VAR 0 8
44777: PUSH
44778: LD_INT 4
44780: GREATER
44781: IFFALSE 44785
// break ;
44783: GO 44894
// x := personel [ i ] ;
44785: LD_ADDR_VAR 0 13
44789: PUSH
44790: LD_VAR 0 6
44794: PUSH
44795: LD_VAR 0 8
44799: ARRAY
44800: ST_TO_ADDR
// if x = - 1 then
44801: LD_VAR 0 13
44805: PUSH
44806: LD_INT 1
44808: NEG
44809: EQUAL
44810: IFFALSE 44814
// continue ;
44812: GO 44770
// PrepareHuman ( false , i , skill ) ;
44814: LD_INT 0
44816: PPUSH
44817: LD_VAR 0 8
44821: PPUSH
44822: LD_VAR 0 4
44826: PPUSH
44827: CALL_OW 380
// un := CreateHuman ;
44831: LD_ADDR_VAR 0 14
44835: PUSH
44836: CALL_OW 44
44840: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44841: LD_VAR 0 14
44845: PPUSH
44846: LD_VAR 0 1
44850: PPUSH
44851: CALL_OW 250
44855: PPUSH
44856: LD_VAR 0 1
44860: PPUSH
44861: CALL_OW 251
44865: PPUSH
44866: LD_INT 10
44868: PPUSH
44869: LD_INT 0
44871: PPUSH
44872: CALL_OW 50
// result := result ^ un ;
44876: LD_ADDR_VAR 0 7
44880: PUSH
44881: LD_VAR 0 7
44885: PUSH
44886: LD_VAR 0 14
44890: ADD
44891: ST_TO_ADDR
// end ;
44892: GO 44770
44894: POP
44895: POP
// end ; end ;
44896: LD_VAR 0 7
44900: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44901: LD_INT 0
44903: PPUSH
44904: PPUSH
44905: PPUSH
44906: PPUSH
44907: PPUSH
44908: PPUSH
44909: PPUSH
44910: PPUSH
44911: PPUSH
44912: PPUSH
44913: PPUSH
44914: PPUSH
44915: PPUSH
44916: PPUSH
44917: PPUSH
44918: PPUSH
// result := false ;
44919: LD_ADDR_VAR 0 3
44923: PUSH
44924: LD_INT 0
44926: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44927: LD_VAR 0 1
44931: NOT
44932: PUSH
44933: LD_VAR 0 1
44937: PPUSH
44938: CALL_OW 266
44942: PUSH
44943: LD_INT 32
44945: PUSH
44946: LD_INT 33
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: IN
44953: NOT
44954: OR
44955: IFFALSE 44959
// exit ;
44957: GO 46068
// nat := GetNation ( tower ) ;
44959: LD_ADDR_VAR 0 12
44963: PUSH
44964: LD_VAR 0 1
44968: PPUSH
44969: CALL_OW 248
44973: ST_TO_ADDR
// side := GetSide ( tower ) ;
44974: LD_ADDR_VAR 0 16
44978: PUSH
44979: LD_VAR 0 1
44983: PPUSH
44984: CALL_OW 255
44988: ST_TO_ADDR
// x := GetX ( tower ) ;
44989: LD_ADDR_VAR 0 10
44993: PUSH
44994: LD_VAR 0 1
44998: PPUSH
44999: CALL_OW 250
45003: ST_TO_ADDR
// y := GetY ( tower ) ;
45004: LD_ADDR_VAR 0 11
45008: PUSH
45009: LD_VAR 0 1
45013: PPUSH
45014: CALL_OW 251
45018: ST_TO_ADDR
// if not x or not y then
45019: LD_VAR 0 10
45023: NOT
45024: PUSH
45025: LD_VAR 0 11
45029: NOT
45030: OR
45031: IFFALSE 45035
// exit ;
45033: GO 46068
// weapon := 0 ;
45035: LD_ADDR_VAR 0 18
45039: PUSH
45040: LD_INT 0
45042: ST_TO_ADDR
// fac_list := [ ] ;
45043: LD_ADDR_VAR 0 17
45047: PUSH
45048: EMPTY
45049: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
45050: LD_ADDR_VAR 0 6
45054: PUSH
45055: LD_VAR 0 1
45059: PPUSH
45060: CALL_OW 274
45064: PPUSH
45065: LD_VAR 0 2
45069: PPUSH
45070: LD_INT 0
45072: PPUSH
45073: CALL 42639 0 3
45077: PPUSH
45078: LD_INT 30
45080: PUSH
45081: LD_INT 3
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PPUSH
45088: CALL_OW 72
45092: ST_TO_ADDR
// if not factories then
45093: LD_VAR 0 6
45097: NOT
45098: IFFALSE 45102
// exit ;
45100: GO 46068
// for i in factories do
45102: LD_ADDR_VAR 0 8
45106: PUSH
45107: LD_VAR 0 6
45111: PUSH
45112: FOR_IN
45113: IFFALSE 45138
// fac_list := fac_list union AvailableWeaponList ( i ) ;
45115: LD_ADDR_VAR 0 17
45119: PUSH
45120: LD_VAR 0 17
45124: PUSH
45125: LD_VAR 0 8
45129: PPUSH
45130: CALL_OW 478
45134: UNION
45135: ST_TO_ADDR
45136: GO 45112
45138: POP
45139: POP
// if not fac_list then
45140: LD_VAR 0 17
45144: NOT
45145: IFFALSE 45149
// exit ;
45147: GO 46068
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
45149: LD_ADDR_VAR 0 5
45153: PUSH
45154: LD_INT 4
45156: PUSH
45157: LD_INT 5
45159: PUSH
45160: LD_INT 9
45162: PUSH
45163: LD_INT 10
45165: PUSH
45166: LD_INT 6
45168: PUSH
45169: LD_INT 7
45171: PUSH
45172: LD_INT 11
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 27
45186: PUSH
45187: LD_INT 28
45189: PUSH
45190: LD_INT 26
45192: PUSH
45193: LD_INT 30
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 43
45204: PUSH
45205: LD_INT 44
45207: PUSH
45208: LD_INT 46
45210: PUSH
45211: LD_INT 45
45213: PUSH
45214: LD_INT 47
45216: PUSH
45217: LD_INT 49
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: LIST
45232: PUSH
45233: LD_VAR 0 12
45237: ARRAY
45238: ST_TO_ADDR
// list := list isect fac_list ;
45239: LD_ADDR_VAR 0 5
45243: PUSH
45244: LD_VAR 0 5
45248: PUSH
45249: LD_VAR 0 17
45253: ISECT
45254: ST_TO_ADDR
// if not list then
45255: LD_VAR 0 5
45259: NOT
45260: IFFALSE 45264
// exit ;
45262: GO 46068
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
45264: LD_VAR 0 12
45268: PUSH
45269: LD_INT 3
45271: EQUAL
45272: PUSH
45273: LD_INT 49
45275: PUSH
45276: LD_VAR 0 5
45280: IN
45281: AND
45282: PUSH
45283: LD_INT 31
45285: PPUSH
45286: LD_VAR 0 16
45290: PPUSH
45291: CALL_OW 321
45295: PUSH
45296: LD_INT 2
45298: EQUAL
45299: AND
45300: IFFALSE 45360
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
45302: LD_INT 22
45304: PUSH
45305: LD_VAR 0 16
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 35
45316: PUSH
45317: LD_INT 49
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 91
45326: PUSH
45327: LD_VAR 0 1
45331: PUSH
45332: LD_INT 10
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: LIST
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: LIST
45344: PPUSH
45345: CALL_OW 69
45349: NOT
45350: IFFALSE 45360
// weapon := ru_time_lapser ;
45352: LD_ADDR_VAR 0 18
45356: PUSH
45357: LD_INT 49
45359: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
45360: LD_VAR 0 12
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: LD_INT 2
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: IN
45375: PUSH
45376: LD_INT 11
45378: PUSH
45379: LD_VAR 0 5
45383: IN
45384: PUSH
45385: LD_INT 30
45387: PUSH
45388: LD_VAR 0 5
45392: IN
45393: OR
45394: AND
45395: PUSH
45396: LD_INT 6
45398: PPUSH
45399: LD_VAR 0 16
45403: PPUSH
45404: CALL_OW 321
45408: PUSH
45409: LD_INT 2
45411: EQUAL
45412: AND
45413: IFFALSE 45578
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
45415: LD_INT 22
45417: PUSH
45418: LD_VAR 0 16
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 2
45429: PUSH
45430: LD_INT 35
45432: PUSH
45433: LD_INT 11
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 35
45442: PUSH
45443: LD_INT 30
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 91
45457: PUSH
45458: LD_VAR 0 1
45462: PUSH
45463: LD_INT 18
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: LIST
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: LIST
45475: PPUSH
45476: CALL_OW 69
45480: NOT
45481: PUSH
45482: LD_INT 22
45484: PUSH
45485: LD_VAR 0 16
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 2
45496: PUSH
45497: LD_INT 30
45499: PUSH
45500: LD_INT 32
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 30
45509: PUSH
45510: LD_INT 33
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 91
45524: PUSH
45525: LD_VAR 0 1
45529: PUSH
45530: LD_INT 12
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: LIST
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: LIST
45542: PUSH
45543: EMPTY
45544: LIST
45545: PPUSH
45546: CALL_OW 69
45550: PUSH
45551: LD_INT 2
45553: GREATER
45554: AND
45555: IFFALSE 45578
// weapon := [ us_radar , ar_radar ] [ nat ] ;
45557: LD_ADDR_VAR 0 18
45561: PUSH
45562: LD_INT 11
45564: PUSH
45565: LD_INT 30
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_VAR 0 12
45576: ARRAY
45577: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
45578: LD_VAR 0 18
45582: NOT
45583: PUSH
45584: LD_INT 40
45586: PPUSH
45587: LD_VAR 0 16
45591: PPUSH
45592: CALL_OW 321
45596: PUSH
45597: LD_INT 2
45599: EQUAL
45600: AND
45601: PUSH
45602: LD_INT 7
45604: PUSH
45605: LD_VAR 0 5
45609: IN
45610: PUSH
45611: LD_INT 28
45613: PUSH
45614: LD_VAR 0 5
45618: IN
45619: OR
45620: PUSH
45621: LD_INT 45
45623: PUSH
45624: LD_VAR 0 5
45628: IN
45629: OR
45630: AND
45631: IFFALSE 45885
// begin hex := GetHexInfo ( x , y ) ;
45633: LD_ADDR_VAR 0 4
45637: PUSH
45638: LD_VAR 0 10
45642: PPUSH
45643: LD_VAR 0 11
45647: PPUSH
45648: CALL_OW 546
45652: ST_TO_ADDR
// if hex [ 1 ] then
45653: LD_VAR 0 4
45657: PUSH
45658: LD_INT 1
45660: ARRAY
45661: IFFALSE 45665
// exit ;
45663: GO 46068
// height := hex [ 2 ] ;
45665: LD_ADDR_VAR 0 15
45669: PUSH
45670: LD_VAR 0 4
45674: PUSH
45675: LD_INT 2
45677: ARRAY
45678: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
45679: LD_ADDR_VAR 0 14
45683: PUSH
45684: LD_INT 0
45686: PUSH
45687: LD_INT 2
45689: PUSH
45690: LD_INT 3
45692: PUSH
45693: LD_INT 5
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: ST_TO_ADDR
// for i in tmp do
45702: LD_ADDR_VAR 0 8
45706: PUSH
45707: LD_VAR 0 14
45711: PUSH
45712: FOR_IN
45713: IFFALSE 45883
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
45715: LD_ADDR_VAR 0 9
45719: PUSH
45720: LD_VAR 0 10
45724: PPUSH
45725: LD_VAR 0 8
45729: PPUSH
45730: LD_INT 5
45732: PPUSH
45733: CALL_OW 272
45737: PUSH
45738: LD_VAR 0 11
45742: PPUSH
45743: LD_VAR 0 8
45747: PPUSH
45748: LD_INT 5
45750: PPUSH
45751: CALL_OW 273
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45760: LD_VAR 0 9
45764: PUSH
45765: LD_INT 1
45767: ARRAY
45768: PPUSH
45769: LD_VAR 0 9
45773: PUSH
45774: LD_INT 2
45776: ARRAY
45777: PPUSH
45778: CALL_OW 488
45782: IFFALSE 45881
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45784: LD_ADDR_VAR 0 4
45788: PUSH
45789: LD_VAR 0 9
45793: PUSH
45794: LD_INT 1
45796: ARRAY
45797: PPUSH
45798: LD_VAR 0 9
45802: PUSH
45803: LD_INT 2
45805: ARRAY
45806: PPUSH
45807: CALL_OW 546
45811: ST_TO_ADDR
// if hex [ 1 ] then
45812: LD_VAR 0 4
45816: PUSH
45817: LD_INT 1
45819: ARRAY
45820: IFFALSE 45824
// continue ;
45822: GO 45712
// h := hex [ 2 ] ;
45824: LD_ADDR_VAR 0 13
45828: PUSH
45829: LD_VAR 0 4
45833: PUSH
45834: LD_INT 2
45836: ARRAY
45837: ST_TO_ADDR
// if h + 7 < height then
45838: LD_VAR 0 13
45842: PUSH
45843: LD_INT 7
45845: PLUS
45846: PUSH
45847: LD_VAR 0 15
45851: LESS
45852: IFFALSE 45881
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45854: LD_ADDR_VAR 0 18
45858: PUSH
45859: LD_INT 7
45861: PUSH
45862: LD_INT 28
45864: PUSH
45865: LD_INT 45
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: LIST
45872: PUSH
45873: LD_VAR 0 12
45877: ARRAY
45878: ST_TO_ADDR
// break ;
45879: GO 45883
// end ; end ; end ;
45881: GO 45712
45883: POP
45884: POP
// end ; if not weapon then
45885: LD_VAR 0 18
45889: NOT
45890: IFFALSE 45950
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45892: LD_ADDR_VAR 0 5
45896: PUSH
45897: LD_VAR 0 5
45901: PUSH
45902: LD_INT 11
45904: PUSH
45905: LD_INT 30
45907: PUSH
45908: LD_INT 49
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: LIST
45915: DIFF
45916: ST_TO_ADDR
// if not list then
45917: LD_VAR 0 5
45921: NOT
45922: IFFALSE 45926
// exit ;
45924: GO 46068
// weapon := list [ rand ( 1 , list ) ] ;
45926: LD_ADDR_VAR 0 18
45930: PUSH
45931: LD_VAR 0 5
45935: PUSH
45936: LD_INT 1
45938: PPUSH
45939: LD_VAR 0 5
45943: PPUSH
45944: CALL_OW 12
45948: ARRAY
45949: ST_TO_ADDR
// end ; if weapon then
45950: LD_VAR 0 18
45954: IFFALSE 46068
// begin tmp := CostOfWeapon ( weapon ) ;
45956: LD_ADDR_VAR 0 14
45960: PUSH
45961: LD_VAR 0 18
45965: PPUSH
45966: CALL_OW 451
45970: ST_TO_ADDR
// j := GetBase ( tower ) ;
45971: LD_ADDR_VAR 0 9
45975: PUSH
45976: LD_VAR 0 1
45980: PPUSH
45981: CALL_OW 274
45985: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45986: LD_VAR 0 9
45990: PPUSH
45991: LD_INT 1
45993: PPUSH
45994: CALL_OW 275
45998: PUSH
45999: LD_VAR 0 14
46003: PUSH
46004: LD_INT 1
46006: ARRAY
46007: GREATEREQUAL
46008: PUSH
46009: LD_VAR 0 9
46013: PPUSH
46014: LD_INT 2
46016: PPUSH
46017: CALL_OW 275
46021: PUSH
46022: LD_VAR 0 14
46026: PUSH
46027: LD_INT 2
46029: ARRAY
46030: GREATEREQUAL
46031: AND
46032: PUSH
46033: LD_VAR 0 9
46037: PPUSH
46038: LD_INT 3
46040: PPUSH
46041: CALL_OW 275
46045: PUSH
46046: LD_VAR 0 14
46050: PUSH
46051: LD_INT 3
46053: ARRAY
46054: GREATEREQUAL
46055: AND
46056: IFFALSE 46068
// result := weapon ;
46058: LD_ADDR_VAR 0 3
46062: PUSH
46063: LD_VAR 0 18
46067: ST_TO_ADDR
// end ; end ;
46068: LD_VAR 0 3
46072: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
46073: LD_INT 0
46075: PPUSH
46076: PPUSH
// result := true ;
46077: LD_ADDR_VAR 0 3
46081: PUSH
46082: LD_INT 1
46084: ST_TO_ADDR
// if array1 = array2 then
46085: LD_VAR 0 1
46089: PUSH
46090: LD_VAR 0 2
46094: EQUAL
46095: IFFALSE 46155
// begin for i = 1 to array1 do
46097: LD_ADDR_VAR 0 4
46101: PUSH
46102: DOUBLE
46103: LD_INT 1
46105: DEC
46106: ST_TO_ADDR
46107: LD_VAR 0 1
46111: PUSH
46112: FOR_TO
46113: IFFALSE 46151
// if array1 [ i ] <> array2 [ i ] then
46115: LD_VAR 0 1
46119: PUSH
46120: LD_VAR 0 4
46124: ARRAY
46125: PUSH
46126: LD_VAR 0 2
46130: PUSH
46131: LD_VAR 0 4
46135: ARRAY
46136: NONEQUAL
46137: IFFALSE 46149
// begin result := false ;
46139: LD_ADDR_VAR 0 3
46143: PUSH
46144: LD_INT 0
46146: ST_TO_ADDR
// break ;
46147: GO 46151
// end ;
46149: GO 46112
46151: POP
46152: POP
// end else
46153: GO 46163
// result := false ;
46155: LD_ADDR_VAR 0 3
46159: PUSH
46160: LD_INT 0
46162: ST_TO_ADDR
// end ;
46163: LD_VAR 0 3
46167: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
46168: LD_INT 0
46170: PPUSH
46171: PPUSH
// if not array1 or not array2 then
46172: LD_VAR 0 1
46176: NOT
46177: PUSH
46178: LD_VAR 0 2
46182: NOT
46183: OR
46184: IFFALSE 46188
// exit ;
46186: GO 46252
// result := true ;
46188: LD_ADDR_VAR 0 3
46192: PUSH
46193: LD_INT 1
46195: ST_TO_ADDR
// for i = 1 to array1 do
46196: LD_ADDR_VAR 0 4
46200: PUSH
46201: DOUBLE
46202: LD_INT 1
46204: DEC
46205: ST_TO_ADDR
46206: LD_VAR 0 1
46210: PUSH
46211: FOR_TO
46212: IFFALSE 46250
// if array1 [ i ] <> array2 [ i ] then
46214: LD_VAR 0 1
46218: PUSH
46219: LD_VAR 0 4
46223: ARRAY
46224: PUSH
46225: LD_VAR 0 2
46229: PUSH
46230: LD_VAR 0 4
46234: ARRAY
46235: NONEQUAL
46236: IFFALSE 46248
// begin result := false ;
46238: LD_ADDR_VAR 0 3
46242: PUSH
46243: LD_INT 0
46245: ST_TO_ADDR
// break ;
46246: GO 46250
// end ;
46248: GO 46211
46250: POP
46251: POP
// end ;
46252: LD_VAR 0 3
46256: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
46257: LD_INT 0
46259: PPUSH
46260: PPUSH
46261: PPUSH
// pom := GetBase ( fac ) ;
46262: LD_ADDR_VAR 0 5
46266: PUSH
46267: LD_VAR 0 1
46271: PPUSH
46272: CALL_OW 274
46276: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
46277: LD_ADDR_VAR 0 4
46281: PUSH
46282: LD_VAR 0 2
46286: PUSH
46287: LD_INT 1
46289: ARRAY
46290: PPUSH
46291: LD_VAR 0 2
46295: PUSH
46296: LD_INT 2
46298: ARRAY
46299: PPUSH
46300: LD_VAR 0 2
46304: PUSH
46305: LD_INT 3
46307: ARRAY
46308: PPUSH
46309: LD_VAR 0 2
46313: PUSH
46314: LD_INT 4
46316: ARRAY
46317: PPUSH
46318: CALL_OW 449
46322: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46323: LD_ADDR_VAR 0 3
46327: PUSH
46328: LD_VAR 0 5
46332: PPUSH
46333: LD_INT 1
46335: PPUSH
46336: CALL_OW 275
46340: PUSH
46341: LD_VAR 0 4
46345: PUSH
46346: LD_INT 1
46348: ARRAY
46349: GREATEREQUAL
46350: PUSH
46351: LD_VAR 0 5
46355: PPUSH
46356: LD_INT 2
46358: PPUSH
46359: CALL_OW 275
46363: PUSH
46364: LD_VAR 0 4
46368: PUSH
46369: LD_INT 2
46371: ARRAY
46372: GREATEREQUAL
46373: AND
46374: PUSH
46375: LD_VAR 0 5
46379: PPUSH
46380: LD_INT 3
46382: PPUSH
46383: CALL_OW 275
46387: PUSH
46388: LD_VAR 0 4
46392: PUSH
46393: LD_INT 3
46395: ARRAY
46396: GREATEREQUAL
46397: AND
46398: ST_TO_ADDR
// end ;
46399: LD_VAR 0 3
46403: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
46404: LD_INT 0
46406: PPUSH
46407: PPUSH
46408: PPUSH
46409: PPUSH
// pom := GetBase ( building ) ;
46410: LD_ADDR_VAR 0 3
46414: PUSH
46415: LD_VAR 0 1
46419: PPUSH
46420: CALL_OW 274
46424: ST_TO_ADDR
// if not pom then
46425: LD_VAR 0 3
46429: NOT
46430: IFFALSE 46434
// exit ;
46432: GO 46604
// btype := GetBType ( building ) ;
46434: LD_ADDR_VAR 0 5
46438: PUSH
46439: LD_VAR 0 1
46443: PPUSH
46444: CALL_OW 266
46448: ST_TO_ADDR
// if btype = b_armoury then
46449: LD_VAR 0 5
46453: PUSH
46454: LD_INT 4
46456: EQUAL
46457: IFFALSE 46467
// btype := b_barracks ;
46459: LD_ADDR_VAR 0 5
46463: PUSH
46464: LD_INT 5
46466: ST_TO_ADDR
// if btype = b_depot then
46467: LD_VAR 0 5
46471: PUSH
46472: LD_INT 0
46474: EQUAL
46475: IFFALSE 46485
// btype := b_warehouse ;
46477: LD_ADDR_VAR 0 5
46481: PUSH
46482: LD_INT 1
46484: ST_TO_ADDR
// if btype = b_workshop then
46485: LD_VAR 0 5
46489: PUSH
46490: LD_INT 2
46492: EQUAL
46493: IFFALSE 46503
// btype := b_factory ;
46495: LD_ADDR_VAR 0 5
46499: PUSH
46500: LD_INT 3
46502: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46503: LD_ADDR_VAR 0 4
46507: PUSH
46508: LD_VAR 0 5
46512: PPUSH
46513: LD_VAR 0 1
46517: PPUSH
46518: CALL_OW 248
46522: PPUSH
46523: CALL_OW 450
46527: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46528: LD_ADDR_VAR 0 2
46532: PUSH
46533: LD_VAR 0 3
46537: PPUSH
46538: LD_INT 1
46540: PPUSH
46541: CALL_OW 275
46545: PUSH
46546: LD_VAR 0 4
46550: PUSH
46551: LD_INT 1
46553: ARRAY
46554: GREATEREQUAL
46555: PUSH
46556: LD_VAR 0 3
46560: PPUSH
46561: LD_INT 2
46563: PPUSH
46564: CALL_OW 275
46568: PUSH
46569: LD_VAR 0 4
46573: PUSH
46574: LD_INT 2
46576: ARRAY
46577: GREATEREQUAL
46578: AND
46579: PUSH
46580: LD_VAR 0 3
46584: PPUSH
46585: LD_INT 3
46587: PPUSH
46588: CALL_OW 275
46592: PUSH
46593: LD_VAR 0 4
46597: PUSH
46598: LD_INT 3
46600: ARRAY
46601: GREATEREQUAL
46602: AND
46603: ST_TO_ADDR
// end ;
46604: LD_VAR 0 2
46608: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
46609: LD_INT 0
46611: PPUSH
46612: PPUSH
46613: PPUSH
// pom := GetBase ( building ) ;
46614: LD_ADDR_VAR 0 4
46618: PUSH
46619: LD_VAR 0 1
46623: PPUSH
46624: CALL_OW 274
46628: ST_TO_ADDR
// if not pom then
46629: LD_VAR 0 4
46633: NOT
46634: IFFALSE 46638
// exit ;
46636: GO 46739
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46638: LD_ADDR_VAR 0 5
46642: PUSH
46643: LD_VAR 0 2
46647: PPUSH
46648: LD_VAR 0 1
46652: PPUSH
46653: CALL_OW 248
46657: PPUSH
46658: CALL_OW 450
46662: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46663: LD_ADDR_VAR 0 3
46667: PUSH
46668: LD_VAR 0 4
46672: PPUSH
46673: LD_INT 1
46675: PPUSH
46676: CALL_OW 275
46680: PUSH
46681: LD_VAR 0 5
46685: PUSH
46686: LD_INT 1
46688: ARRAY
46689: GREATEREQUAL
46690: PUSH
46691: LD_VAR 0 4
46695: PPUSH
46696: LD_INT 2
46698: PPUSH
46699: CALL_OW 275
46703: PUSH
46704: LD_VAR 0 5
46708: PUSH
46709: LD_INT 2
46711: ARRAY
46712: GREATEREQUAL
46713: AND
46714: PUSH
46715: LD_VAR 0 4
46719: PPUSH
46720: LD_INT 3
46722: PPUSH
46723: CALL_OW 275
46727: PUSH
46728: LD_VAR 0 5
46732: PUSH
46733: LD_INT 3
46735: ARRAY
46736: GREATEREQUAL
46737: AND
46738: ST_TO_ADDR
// end ;
46739: LD_VAR 0 3
46743: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
46744: LD_INT 0
46746: PPUSH
46747: PPUSH
46748: PPUSH
46749: PPUSH
46750: PPUSH
46751: PPUSH
46752: PPUSH
46753: PPUSH
46754: PPUSH
46755: PPUSH
46756: PPUSH
// result := false ;
46757: LD_ADDR_VAR 0 8
46761: PUSH
46762: LD_INT 0
46764: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
46765: LD_VAR 0 5
46769: NOT
46770: PUSH
46771: LD_VAR 0 1
46775: NOT
46776: OR
46777: PUSH
46778: LD_VAR 0 2
46782: NOT
46783: OR
46784: PUSH
46785: LD_VAR 0 3
46789: NOT
46790: OR
46791: IFFALSE 46795
// exit ;
46793: GO 47609
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46795: LD_ADDR_VAR 0 14
46799: PUSH
46800: LD_VAR 0 1
46804: PPUSH
46805: LD_VAR 0 2
46809: PPUSH
46810: LD_VAR 0 3
46814: PPUSH
46815: LD_VAR 0 4
46819: PPUSH
46820: LD_VAR 0 5
46824: PUSH
46825: LD_INT 1
46827: ARRAY
46828: PPUSH
46829: CALL_OW 248
46833: PPUSH
46834: LD_INT 0
46836: PPUSH
46837: CALL 48842 0 6
46841: ST_TO_ADDR
// if not hexes then
46842: LD_VAR 0 14
46846: NOT
46847: IFFALSE 46851
// exit ;
46849: GO 47609
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46851: LD_ADDR_VAR 0 17
46855: PUSH
46856: LD_VAR 0 5
46860: PPUSH
46861: LD_INT 22
46863: PUSH
46864: LD_VAR 0 13
46868: PPUSH
46869: CALL_OW 255
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 2
46880: PUSH
46881: LD_INT 30
46883: PUSH
46884: LD_INT 0
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 30
46893: PUSH
46894: LD_INT 1
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: LIST
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PPUSH
46910: CALL_OW 72
46914: ST_TO_ADDR
// for i = 1 to hexes do
46915: LD_ADDR_VAR 0 9
46919: PUSH
46920: DOUBLE
46921: LD_INT 1
46923: DEC
46924: ST_TO_ADDR
46925: LD_VAR 0 14
46929: PUSH
46930: FOR_TO
46931: IFFALSE 47607
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46933: LD_ADDR_VAR 0 13
46937: PUSH
46938: LD_VAR 0 14
46942: PUSH
46943: LD_VAR 0 9
46947: ARRAY
46948: PUSH
46949: LD_INT 1
46951: ARRAY
46952: PPUSH
46953: LD_VAR 0 14
46957: PUSH
46958: LD_VAR 0 9
46962: ARRAY
46963: PUSH
46964: LD_INT 2
46966: ARRAY
46967: PPUSH
46968: CALL_OW 428
46972: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46973: LD_VAR 0 14
46977: PUSH
46978: LD_VAR 0 9
46982: ARRAY
46983: PUSH
46984: LD_INT 1
46986: ARRAY
46987: PPUSH
46988: LD_VAR 0 14
46992: PUSH
46993: LD_VAR 0 9
46997: ARRAY
46998: PUSH
46999: LD_INT 2
47001: ARRAY
47002: PPUSH
47003: CALL_OW 351
47007: PUSH
47008: LD_VAR 0 14
47012: PUSH
47013: LD_VAR 0 9
47017: ARRAY
47018: PUSH
47019: LD_INT 1
47021: ARRAY
47022: PPUSH
47023: LD_VAR 0 14
47027: PUSH
47028: LD_VAR 0 9
47032: ARRAY
47033: PUSH
47034: LD_INT 2
47036: ARRAY
47037: PPUSH
47038: CALL_OW 488
47042: NOT
47043: OR
47044: PUSH
47045: LD_VAR 0 13
47049: PPUSH
47050: CALL_OW 247
47054: PUSH
47055: LD_INT 3
47057: EQUAL
47058: OR
47059: IFFALSE 47065
// exit ;
47061: POP
47062: POP
47063: GO 47609
// if not tmp then
47065: LD_VAR 0 13
47069: NOT
47070: IFFALSE 47074
// continue ;
47072: GO 46930
// result := true ;
47074: LD_ADDR_VAR 0 8
47078: PUSH
47079: LD_INT 1
47081: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
47082: LD_VAR 0 6
47086: PUSH
47087: LD_VAR 0 13
47091: PPUSH
47092: CALL_OW 247
47096: PUSH
47097: LD_INT 2
47099: EQUAL
47100: AND
47101: PUSH
47102: LD_VAR 0 13
47106: PPUSH
47107: CALL_OW 263
47111: PUSH
47112: LD_INT 1
47114: EQUAL
47115: AND
47116: IFFALSE 47280
// begin if IsDrivenBy ( tmp ) then
47118: LD_VAR 0 13
47122: PPUSH
47123: CALL_OW 311
47127: IFFALSE 47131
// continue ;
47129: GO 46930
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
47131: LD_VAR 0 6
47135: PPUSH
47136: LD_INT 3
47138: PUSH
47139: LD_INT 60
47141: PUSH
47142: EMPTY
47143: LIST
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 3
47151: PUSH
47152: LD_INT 55
47154: PUSH
47155: EMPTY
47156: LIST
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PPUSH
47166: CALL_OW 72
47170: IFFALSE 47278
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
47172: LD_ADDR_VAR 0 18
47176: PUSH
47177: LD_VAR 0 6
47181: PPUSH
47182: LD_INT 3
47184: PUSH
47185: LD_INT 60
47187: PUSH
47188: EMPTY
47189: LIST
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 3
47197: PUSH
47198: LD_INT 55
47200: PUSH
47201: EMPTY
47202: LIST
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PPUSH
47212: CALL_OW 72
47216: PUSH
47217: LD_INT 1
47219: ARRAY
47220: ST_TO_ADDR
// if IsInUnit ( driver ) then
47221: LD_VAR 0 18
47225: PPUSH
47226: CALL_OW 310
47230: IFFALSE 47241
// ComExit ( driver ) ;
47232: LD_VAR 0 18
47236: PPUSH
47237: CALL 72622 0 1
// AddComEnterUnit ( driver , tmp ) ;
47241: LD_VAR 0 18
47245: PPUSH
47246: LD_VAR 0 13
47250: PPUSH
47251: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
47255: LD_VAR 0 18
47259: PPUSH
47260: LD_VAR 0 7
47264: PPUSH
47265: CALL_OW 173
// AddComExitVehicle ( driver ) ;
47269: LD_VAR 0 18
47273: PPUSH
47274: CALL_OW 181
// end ; continue ;
47278: GO 46930
// end ; if not cleaners or not tmp in cleaners then
47280: LD_VAR 0 6
47284: NOT
47285: PUSH
47286: LD_VAR 0 13
47290: PUSH
47291: LD_VAR 0 6
47295: IN
47296: NOT
47297: OR
47298: IFFALSE 47605
// begin if dep then
47300: LD_VAR 0 17
47304: IFFALSE 47440
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47306: LD_ADDR_VAR 0 16
47310: PUSH
47311: LD_VAR 0 17
47315: PUSH
47316: LD_INT 1
47318: ARRAY
47319: PPUSH
47320: CALL_OW 250
47324: PPUSH
47325: LD_VAR 0 17
47329: PUSH
47330: LD_INT 1
47332: ARRAY
47333: PPUSH
47334: CALL_OW 254
47338: PPUSH
47339: LD_INT 5
47341: PPUSH
47342: CALL_OW 272
47346: PUSH
47347: LD_VAR 0 17
47351: PUSH
47352: LD_INT 1
47354: ARRAY
47355: PPUSH
47356: CALL_OW 251
47360: PPUSH
47361: LD_VAR 0 17
47365: PUSH
47366: LD_INT 1
47368: ARRAY
47369: PPUSH
47370: CALL_OW 254
47374: PPUSH
47375: LD_INT 5
47377: PPUSH
47378: CALL_OW 273
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
47387: LD_VAR 0 16
47391: PUSH
47392: LD_INT 1
47394: ARRAY
47395: PPUSH
47396: LD_VAR 0 16
47400: PUSH
47401: LD_INT 2
47403: ARRAY
47404: PPUSH
47405: CALL_OW 488
47409: IFFALSE 47440
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
47411: LD_VAR 0 13
47415: PPUSH
47416: LD_VAR 0 16
47420: PUSH
47421: LD_INT 1
47423: ARRAY
47424: PPUSH
47425: LD_VAR 0 16
47429: PUSH
47430: LD_INT 2
47432: ARRAY
47433: PPUSH
47434: CALL_OW 111
// continue ;
47438: GO 46930
// end ; end ; r := GetDir ( tmp ) ;
47440: LD_ADDR_VAR 0 15
47444: PUSH
47445: LD_VAR 0 13
47449: PPUSH
47450: CALL_OW 254
47454: ST_TO_ADDR
// if r = 5 then
47455: LD_VAR 0 15
47459: PUSH
47460: LD_INT 5
47462: EQUAL
47463: IFFALSE 47473
// r := 0 ;
47465: LD_ADDR_VAR 0 15
47469: PUSH
47470: LD_INT 0
47472: ST_TO_ADDR
// for j = r to 5 do
47473: LD_ADDR_VAR 0 10
47477: PUSH
47478: DOUBLE
47479: LD_VAR 0 15
47483: DEC
47484: ST_TO_ADDR
47485: LD_INT 5
47487: PUSH
47488: FOR_TO
47489: IFFALSE 47603
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
47491: LD_ADDR_VAR 0 11
47495: PUSH
47496: LD_VAR 0 13
47500: PPUSH
47501: CALL_OW 250
47505: PPUSH
47506: LD_VAR 0 10
47510: PPUSH
47511: LD_INT 2
47513: PPUSH
47514: CALL_OW 272
47518: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47519: LD_ADDR_VAR 0 12
47523: PUSH
47524: LD_VAR 0 13
47528: PPUSH
47529: CALL_OW 251
47533: PPUSH
47534: LD_VAR 0 10
47538: PPUSH
47539: LD_INT 2
47541: PPUSH
47542: CALL_OW 273
47546: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47547: LD_VAR 0 11
47551: PPUSH
47552: LD_VAR 0 12
47556: PPUSH
47557: CALL_OW 488
47561: PUSH
47562: LD_VAR 0 11
47566: PPUSH
47567: LD_VAR 0 12
47571: PPUSH
47572: CALL_OW 428
47576: NOT
47577: AND
47578: IFFALSE 47601
// begin ComMoveXY ( tmp , _x , _y ) ;
47580: LD_VAR 0 13
47584: PPUSH
47585: LD_VAR 0 11
47589: PPUSH
47590: LD_VAR 0 12
47594: PPUSH
47595: CALL_OW 111
// break ;
47599: GO 47603
// end ; end ;
47601: GO 47488
47603: POP
47604: POP
// end ; end ;
47605: GO 46930
47607: POP
47608: POP
// end ;
47609: LD_VAR 0 8
47613: RET
// export function BuildingTechInvented ( side , btype ) ; begin
47614: LD_INT 0
47616: PPUSH
// result := true ;
47617: LD_ADDR_VAR 0 3
47621: PUSH
47622: LD_INT 1
47624: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
47625: LD_VAR 0 2
47629: PUSH
47630: LD_INT 24
47632: DOUBLE
47633: EQUAL
47634: IFTRUE 47644
47636: LD_INT 33
47638: DOUBLE
47639: EQUAL
47640: IFTRUE 47644
47642: GO 47669
47644: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
47645: LD_ADDR_VAR 0 3
47649: PUSH
47650: LD_INT 32
47652: PPUSH
47653: LD_VAR 0 1
47657: PPUSH
47658: CALL_OW 321
47662: PUSH
47663: LD_INT 2
47665: EQUAL
47666: ST_TO_ADDR
47667: GO 47985
47669: LD_INT 20
47671: DOUBLE
47672: EQUAL
47673: IFTRUE 47677
47675: GO 47702
47677: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
47678: LD_ADDR_VAR 0 3
47682: PUSH
47683: LD_INT 6
47685: PPUSH
47686: LD_VAR 0 1
47690: PPUSH
47691: CALL_OW 321
47695: PUSH
47696: LD_INT 2
47698: EQUAL
47699: ST_TO_ADDR
47700: GO 47985
47702: LD_INT 22
47704: DOUBLE
47705: EQUAL
47706: IFTRUE 47716
47708: LD_INT 36
47710: DOUBLE
47711: EQUAL
47712: IFTRUE 47716
47714: GO 47741
47716: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
47717: LD_ADDR_VAR 0 3
47721: PUSH
47722: LD_INT 15
47724: PPUSH
47725: LD_VAR 0 1
47729: PPUSH
47730: CALL_OW 321
47734: PUSH
47735: LD_INT 2
47737: EQUAL
47738: ST_TO_ADDR
47739: GO 47985
47741: LD_INT 30
47743: DOUBLE
47744: EQUAL
47745: IFTRUE 47749
47747: GO 47774
47749: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
47750: LD_ADDR_VAR 0 3
47754: PUSH
47755: LD_INT 20
47757: PPUSH
47758: LD_VAR 0 1
47762: PPUSH
47763: CALL_OW 321
47767: PUSH
47768: LD_INT 2
47770: EQUAL
47771: ST_TO_ADDR
47772: GO 47985
47774: LD_INT 28
47776: DOUBLE
47777: EQUAL
47778: IFTRUE 47788
47780: LD_INT 21
47782: DOUBLE
47783: EQUAL
47784: IFTRUE 47788
47786: GO 47813
47788: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47789: LD_ADDR_VAR 0 3
47793: PUSH
47794: LD_INT 21
47796: PPUSH
47797: LD_VAR 0 1
47801: PPUSH
47802: CALL_OW 321
47806: PUSH
47807: LD_INT 2
47809: EQUAL
47810: ST_TO_ADDR
47811: GO 47985
47813: LD_INT 16
47815: DOUBLE
47816: EQUAL
47817: IFTRUE 47821
47819: GO 47846
47821: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47822: LD_ADDR_VAR 0 3
47826: PUSH
47827: LD_INT 84
47829: PPUSH
47830: LD_VAR 0 1
47834: PPUSH
47835: CALL_OW 321
47839: PUSH
47840: LD_INT 2
47842: EQUAL
47843: ST_TO_ADDR
47844: GO 47985
47846: LD_INT 19
47848: DOUBLE
47849: EQUAL
47850: IFTRUE 47860
47852: LD_INT 23
47854: DOUBLE
47855: EQUAL
47856: IFTRUE 47860
47858: GO 47885
47860: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47861: LD_ADDR_VAR 0 3
47865: PUSH
47866: LD_INT 83
47868: PPUSH
47869: LD_VAR 0 1
47873: PPUSH
47874: CALL_OW 321
47878: PUSH
47879: LD_INT 2
47881: EQUAL
47882: ST_TO_ADDR
47883: GO 47985
47885: LD_INT 17
47887: DOUBLE
47888: EQUAL
47889: IFTRUE 47893
47891: GO 47918
47893: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47894: LD_ADDR_VAR 0 3
47898: PUSH
47899: LD_INT 39
47901: PPUSH
47902: LD_VAR 0 1
47906: PPUSH
47907: CALL_OW 321
47911: PUSH
47912: LD_INT 2
47914: EQUAL
47915: ST_TO_ADDR
47916: GO 47985
47918: LD_INT 18
47920: DOUBLE
47921: EQUAL
47922: IFTRUE 47926
47924: GO 47951
47926: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47927: LD_ADDR_VAR 0 3
47931: PUSH
47932: LD_INT 40
47934: PPUSH
47935: LD_VAR 0 1
47939: PPUSH
47940: CALL_OW 321
47944: PUSH
47945: LD_INT 2
47947: EQUAL
47948: ST_TO_ADDR
47949: GO 47985
47951: LD_INT 27
47953: DOUBLE
47954: EQUAL
47955: IFTRUE 47959
47957: GO 47984
47959: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47960: LD_ADDR_VAR 0 3
47964: PUSH
47965: LD_INT 35
47967: PPUSH
47968: LD_VAR 0 1
47972: PPUSH
47973: CALL_OW 321
47977: PUSH
47978: LD_INT 2
47980: EQUAL
47981: ST_TO_ADDR
47982: GO 47985
47984: POP
// end ;
47985: LD_VAR 0 3
47989: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47990: LD_INT 0
47992: PPUSH
47993: PPUSH
47994: PPUSH
47995: PPUSH
47996: PPUSH
47997: PPUSH
47998: PPUSH
47999: PPUSH
48000: PPUSH
48001: PPUSH
48002: PPUSH
// result := false ;
48003: LD_ADDR_VAR 0 6
48007: PUSH
48008: LD_INT 0
48010: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48011: LD_VAR 0 1
48015: NOT
48016: PUSH
48017: LD_VAR 0 1
48021: PPUSH
48022: CALL_OW 266
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: LD_INT 1
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: IN
48037: NOT
48038: OR
48039: PUSH
48040: LD_VAR 0 2
48044: NOT
48045: OR
48046: PUSH
48047: LD_VAR 0 5
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: LD_INT 2
48060: PUSH
48061: LD_INT 3
48063: PUSH
48064: LD_INT 4
48066: PUSH
48067: LD_INT 5
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: IN
48078: NOT
48079: OR
48080: PUSH
48081: LD_VAR 0 3
48085: PPUSH
48086: LD_VAR 0 4
48090: PPUSH
48091: CALL_OW 488
48095: NOT
48096: OR
48097: IFFALSE 48101
// exit ;
48099: GO 48837
// side := GetSide ( depot ) ;
48101: LD_ADDR_VAR 0 9
48105: PUSH
48106: LD_VAR 0 1
48110: PPUSH
48111: CALL_OW 255
48115: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
48116: LD_VAR 0 9
48120: PPUSH
48121: LD_VAR 0 2
48125: PPUSH
48126: CALL 47614 0 2
48130: NOT
48131: IFFALSE 48135
// exit ;
48133: GO 48837
// pom := GetBase ( depot ) ;
48135: LD_ADDR_VAR 0 10
48139: PUSH
48140: LD_VAR 0 1
48144: PPUSH
48145: CALL_OW 274
48149: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48150: LD_ADDR_VAR 0 11
48154: PUSH
48155: LD_VAR 0 2
48159: PPUSH
48160: LD_VAR 0 1
48164: PPUSH
48165: CALL_OW 248
48169: PPUSH
48170: CALL_OW 450
48174: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48175: LD_VAR 0 10
48179: PPUSH
48180: LD_INT 1
48182: PPUSH
48183: CALL_OW 275
48187: PUSH
48188: LD_VAR 0 11
48192: PUSH
48193: LD_INT 1
48195: ARRAY
48196: GREATEREQUAL
48197: PUSH
48198: LD_VAR 0 10
48202: PPUSH
48203: LD_INT 2
48205: PPUSH
48206: CALL_OW 275
48210: PUSH
48211: LD_VAR 0 11
48215: PUSH
48216: LD_INT 2
48218: ARRAY
48219: GREATEREQUAL
48220: AND
48221: PUSH
48222: LD_VAR 0 10
48226: PPUSH
48227: LD_INT 3
48229: PPUSH
48230: CALL_OW 275
48234: PUSH
48235: LD_VAR 0 11
48239: PUSH
48240: LD_INT 3
48242: ARRAY
48243: GREATEREQUAL
48244: AND
48245: NOT
48246: IFFALSE 48250
// exit ;
48248: GO 48837
// if GetBType ( depot ) = b_depot then
48250: LD_VAR 0 1
48254: PPUSH
48255: CALL_OW 266
48259: PUSH
48260: LD_INT 0
48262: EQUAL
48263: IFFALSE 48275
// dist := 28 else
48265: LD_ADDR_VAR 0 14
48269: PUSH
48270: LD_INT 28
48272: ST_TO_ADDR
48273: GO 48283
// dist := 36 ;
48275: LD_ADDR_VAR 0 14
48279: PUSH
48280: LD_INT 36
48282: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48283: LD_VAR 0 1
48287: PPUSH
48288: LD_VAR 0 3
48292: PPUSH
48293: LD_VAR 0 4
48297: PPUSH
48298: CALL_OW 297
48302: PUSH
48303: LD_VAR 0 14
48307: GREATER
48308: IFFALSE 48312
// exit ;
48310: GO 48837
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48312: LD_ADDR_VAR 0 12
48316: PUSH
48317: LD_VAR 0 2
48321: PPUSH
48322: LD_VAR 0 3
48326: PPUSH
48327: LD_VAR 0 4
48331: PPUSH
48332: LD_VAR 0 5
48336: PPUSH
48337: LD_VAR 0 1
48341: PPUSH
48342: CALL_OW 248
48346: PPUSH
48347: LD_INT 0
48349: PPUSH
48350: CALL 48842 0 6
48354: ST_TO_ADDR
// if not hexes then
48355: LD_VAR 0 12
48359: NOT
48360: IFFALSE 48364
// exit ;
48362: GO 48837
// hex := GetHexInfo ( x , y ) ;
48364: LD_ADDR_VAR 0 15
48368: PUSH
48369: LD_VAR 0 3
48373: PPUSH
48374: LD_VAR 0 4
48378: PPUSH
48379: CALL_OW 546
48383: ST_TO_ADDR
// if hex [ 1 ] then
48384: LD_VAR 0 15
48388: PUSH
48389: LD_INT 1
48391: ARRAY
48392: IFFALSE 48396
// exit ;
48394: GO 48837
// height := hex [ 2 ] ;
48396: LD_ADDR_VAR 0 13
48400: PUSH
48401: LD_VAR 0 15
48405: PUSH
48406: LD_INT 2
48408: ARRAY
48409: ST_TO_ADDR
// for i = 1 to hexes do
48410: LD_ADDR_VAR 0 7
48414: PUSH
48415: DOUBLE
48416: LD_INT 1
48418: DEC
48419: ST_TO_ADDR
48420: LD_VAR 0 12
48424: PUSH
48425: FOR_TO
48426: IFFALSE 48756
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48428: LD_VAR 0 12
48432: PUSH
48433: LD_VAR 0 7
48437: ARRAY
48438: PUSH
48439: LD_INT 1
48441: ARRAY
48442: PPUSH
48443: LD_VAR 0 12
48447: PUSH
48448: LD_VAR 0 7
48452: ARRAY
48453: PUSH
48454: LD_INT 2
48456: ARRAY
48457: PPUSH
48458: CALL_OW 488
48462: NOT
48463: PUSH
48464: LD_VAR 0 12
48468: PUSH
48469: LD_VAR 0 7
48473: ARRAY
48474: PUSH
48475: LD_INT 1
48477: ARRAY
48478: PPUSH
48479: LD_VAR 0 12
48483: PUSH
48484: LD_VAR 0 7
48488: ARRAY
48489: PUSH
48490: LD_INT 2
48492: ARRAY
48493: PPUSH
48494: CALL_OW 428
48498: PUSH
48499: LD_INT 0
48501: GREATER
48502: OR
48503: PUSH
48504: LD_VAR 0 12
48508: PUSH
48509: LD_VAR 0 7
48513: ARRAY
48514: PUSH
48515: LD_INT 1
48517: ARRAY
48518: PPUSH
48519: LD_VAR 0 12
48523: PUSH
48524: LD_VAR 0 7
48528: ARRAY
48529: PUSH
48530: LD_INT 2
48532: ARRAY
48533: PPUSH
48534: CALL_OW 351
48538: OR
48539: IFFALSE 48545
// exit ;
48541: POP
48542: POP
48543: GO 48837
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48545: LD_ADDR_VAR 0 8
48549: PUSH
48550: LD_VAR 0 12
48554: PUSH
48555: LD_VAR 0 7
48559: ARRAY
48560: PUSH
48561: LD_INT 1
48563: ARRAY
48564: PPUSH
48565: LD_VAR 0 12
48569: PUSH
48570: LD_VAR 0 7
48574: ARRAY
48575: PUSH
48576: LD_INT 2
48578: ARRAY
48579: PPUSH
48580: CALL_OW 546
48584: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48585: LD_VAR 0 8
48589: PUSH
48590: LD_INT 1
48592: ARRAY
48593: PUSH
48594: LD_VAR 0 8
48598: PUSH
48599: LD_INT 2
48601: ARRAY
48602: PUSH
48603: LD_VAR 0 13
48607: PUSH
48608: LD_INT 2
48610: PLUS
48611: GREATER
48612: OR
48613: PUSH
48614: LD_VAR 0 8
48618: PUSH
48619: LD_INT 2
48621: ARRAY
48622: PUSH
48623: LD_VAR 0 13
48627: PUSH
48628: LD_INT 2
48630: MINUS
48631: LESS
48632: OR
48633: PUSH
48634: LD_VAR 0 8
48638: PUSH
48639: LD_INT 3
48641: ARRAY
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: LD_INT 8
48648: PUSH
48649: LD_INT 9
48651: PUSH
48652: LD_INT 10
48654: PUSH
48655: LD_INT 11
48657: PUSH
48658: LD_INT 12
48660: PUSH
48661: LD_INT 13
48663: PUSH
48664: LD_INT 16
48666: PUSH
48667: LD_INT 17
48669: PUSH
48670: LD_INT 18
48672: PUSH
48673: LD_INT 19
48675: PUSH
48676: LD_INT 20
48678: PUSH
48679: LD_INT 21
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: IN
48697: NOT
48698: OR
48699: PUSH
48700: LD_VAR 0 8
48704: PUSH
48705: LD_INT 5
48707: ARRAY
48708: NOT
48709: OR
48710: PUSH
48711: LD_VAR 0 8
48715: PUSH
48716: LD_INT 6
48718: ARRAY
48719: PUSH
48720: LD_INT 1
48722: PUSH
48723: LD_INT 2
48725: PUSH
48726: LD_INT 7
48728: PUSH
48729: LD_INT 9
48731: PUSH
48732: LD_INT 10
48734: PUSH
48735: LD_INT 11
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: IN
48746: NOT
48747: OR
48748: IFFALSE 48754
// exit ;
48750: POP
48751: POP
48752: GO 48837
// end ;
48754: GO 48425
48756: POP
48757: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48758: LD_VAR 0 9
48762: PPUSH
48763: LD_VAR 0 3
48767: PPUSH
48768: LD_VAR 0 4
48772: PPUSH
48773: LD_INT 20
48775: PPUSH
48776: CALL 40789 0 4
48780: PUSH
48781: LD_INT 4
48783: ARRAY
48784: IFFALSE 48788
// exit ;
48786: GO 48837
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48788: LD_VAR 0 2
48792: PUSH
48793: LD_INT 29
48795: PUSH
48796: LD_INT 30
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: IN
48803: PUSH
48804: LD_VAR 0 3
48808: PPUSH
48809: LD_VAR 0 4
48813: PPUSH
48814: LD_VAR 0 9
48818: PPUSH
48819: CALL_OW 440
48823: NOT
48824: AND
48825: IFFALSE 48829
// exit ;
48827: GO 48837
// result := true ;
48829: LD_ADDR_VAR 0 6
48833: PUSH
48834: LD_INT 1
48836: ST_TO_ADDR
// end ;
48837: LD_VAR 0 6
48841: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48842: LD_INT 0
48844: PPUSH
48845: PPUSH
48846: PPUSH
48847: PPUSH
48848: PPUSH
48849: PPUSH
48850: PPUSH
48851: PPUSH
48852: PPUSH
48853: PPUSH
48854: PPUSH
48855: PPUSH
48856: PPUSH
48857: PPUSH
48858: PPUSH
48859: PPUSH
48860: PPUSH
48861: PPUSH
48862: PPUSH
48863: PPUSH
48864: PPUSH
48865: PPUSH
48866: PPUSH
48867: PPUSH
48868: PPUSH
48869: PPUSH
48870: PPUSH
48871: PPUSH
48872: PPUSH
48873: PPUSH
48874: PPUSH
48875: PPUSH
48876: PPUSH
48877: PPUSH
48878: PPUSH
48879: PPUSH
48880: PPUSH
48881: PPUSH
48882: PPUSH
48883: PPUSH
48884: PPUSH
48885: PPUSH
48886: PPUSH
48887: PPUSH
48888: PPUSH
48889: PPUSH
48890: PPUSH
48891: PPUSH
48892: PPUSH
48893: PPUSH
48894: PPUSH
48895: PPUSH
48896: PPUSH
48897: PPUSH
48898: PPUSH
48899: PPUSH
48900: PPUSH
48901: PPUSH
// result = [ ] ;
48902: LD_ADDR_VAR 0 7
48906: PUSH
48907: EMPTY
48908: ST_TO_ADDR
// temp_list = [ ] ;
48909: LD_ADDR_VAR 0 9
48913: PUSH
48914: EMPTY
48915: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48916: LD_VAR 0 4
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: LD_INT 2
48929: PUSH
48930: LD_INT 3
48932: PUSH
48933: LD_INT 4
48935: PUSH
48936: LD_INT 5
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: IN
48947: NOT
48948: PUSH
48949: LD_VAR 0 1
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: LD_INT 1
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: IN
48964: PUSH
48965: LD_VAR 0 5
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: LD_INT 2
48975: PUSH
48976: LD_INT 3
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: LIST
48983: IN
48984: NOT
48985: AND
48986: OR
48987: IFFALSE 48991
// exit ;
48989: GO 67382
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48991: LD_VAR 0 1
48995: PUSH
48996: LD_INT 6
48998: PUSH
48999: LD_INT 7
49001: PUSH
49002: LD_INT 8
49004: PUSH
49005: LD_INT 13
49007: PUSH
49008: LD_INT 12
49010: PUSH
49011: LD_INT 15
49013: PUSH
49014: LD_INT 11
49016: PUSH
49017: LD_INT 14
49019: PUSH
49020: LD_INT 10
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: IN
49034: IFFALSE 49044
// btype = b_lab ;
49036: LD_ADDR_VAR 0 1
49040: PUSH
49041: LD_INT 6
49043: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49044: LD_VAR 0 6
49048: PUSH
49049: LD_INT 0
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: LD_INT 2
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: LIST
49062: IN
49063: NOT
49064: PUSH
49065: LD_VAR 0 1
49069: PUSH
49070: LD_INT 0
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: LD_INT 2
49078: PUSH
49079: LD_INT 3
49081: PUSH
49082: LD_INT 6
49084: PUSH
49085: LD_INT 36
49087: PUSH
49088: LD_INT 4
49090: PUSH
49091: LD_INT 5
49093: PUSH
49094: LD_INT 31
49096: PUSH
49097: LD_INT 32
49099: PUSH
49100: LD_INT 33
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: IN
49116: NOT
49117: PUSH
49118: LD_VAR 0 6
49122: PUSH
49123: LD_INT 1
49125: EQUAL
49126: AND
49127: OR
49128: PUSH
49129: LD_VAR 0 1
49133: PUSH
49134: LD_INT 2
49136: PUSH
49137: LD_INT 3
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: IN
49144: NOT
49145: PUSH
49146: LD_VAR 0 6
49150: PUSH
49151: LD_INT 2
49153: EQUAL
49154: AND
49155: OR
49156: IFFALSE 49166
// mode = 0 ;
49158: LD_ADDR_VAR 0 6
49162: PUSH
49163: LD_INT 0
49165: ST_TO_ADDR
// case mode of 0 :
49166: LD_VAR 0 6
49170: PUSH
49171: LD_INT 0
49173: DOUBLE
49174: EQUAL
49175: IFTRUE 49179
49177: GO 60632
49179: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49180: LD_ADDR_VAR 0 11
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 0
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 1
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 0
49228: PUSH
49229: LD_INT 1
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 1
49238: NEG
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: LD_INT 1
49253: NEG
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 1
49261: NEG
49262: PUSH
49263: LD_INT 2
49265: NEG
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: LD_INT 2
49276: NEG
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: LD_INT 1
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: PUSH
49296: LD_INT 2
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 0
49305: PUSH
49306: LD_INT 2
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: LD_INT 1
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 1
49326: PUSH
49327: LD_INT 3
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: LD_INT 3
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 1
49346: NEG
49347: PUSH
49348: LD_INT 2
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49373: LD_ADDR_VAR 0 12
49377: PUSH
49378: LD_INT 0
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 0
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 0
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 1
49442: NEG
49443: PUSH
49444: LD_INT 1
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: PUSH
49455: LD_INT 1
49457: NEG
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 2
49465: PUSH
49466: LD_INT 0
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 2
49475: PUSH
49476: LD_INT 1
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 1
49485: NEG
49486: PUSH
49487: LD_INT 1
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 2
49496: NEG
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 2
49507: NEG
49508: PUSH
49509: LD_INT 1
49511: NEG
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 2
49519: NEG
49520: PUSH
49521: LD_INT 1
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 3
49530: NEG
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 3
49541: NEG
49542: PUSH
49543: LD_INT 1
49545: NEG
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49569: LD_ADDR_VAR 0 13
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: LD_INT 0
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: LD_INT 1
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 1
49607: PUSH
49608: LD_INT 1
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 0
49617: PUSH
49618: LD_INT 1
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 1
49627: NEG
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 1
49638: NEG
49639: PUSH
49640: LD_INT 1
49642: NEG
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 1
49650: NEG
49651: PUSH
49652: LD_INT 2
49654: NEG
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 2
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 2
49672: PUSH
49673: LD_INT 2
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: LD_INT 2
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 2
49692: NEG
49693: PUSH
49694: LD_INT 1
49696: NEG
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 2
49704: NEG
49705: PUSH
49706: LD_INT 2
49708: NEG
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 2
49716: NEG
49717: PUSH
49718: LD_INT 3
49720: NEG
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 3
49728: NEG
49729: PUSH
49730: LD_INT 2
49732: NEG
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 3
49740: NEG
49741: PUSH
49742: LD_INT 3
49744: NEG
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49768: LD_ADDR_VAR 0 14
49772: PUSH
49773: LD_INT 0
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 0
49785: PUSH
49786: LD_INT 1
49788: NEG
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 1
49806: PUSH
49807: LD_INT 1
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 0
49816: PUSH
49817: LD_INT 1
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 1
49826: NEG
49827: PUSH
49828: LD_INT 0
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 1
49837: NEG
49838: PUSH
49839: LD_INT 1
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: LD_INT 2
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 0
49861: PUSH
49862: LD_INT 2
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 1
49872: PUSH
49873: LD_INT 1
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: LD_INT 2
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 0
49893: PUSH
49894: LD_INT 2
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 1
49903: NEG
49904: PUSH
49905: LD_INT 1
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 1
49914: NEG
49915: PUSH
49916: LD_INT 3
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: LD_INT 3
49929: NEG
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 1
49937: PUSH
49938: LD_INT 2
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49964: LD_ADDR_VAR 0 15
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: LD_INT 1
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: LD_INT 1
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: NEG
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: LD_INT 1
50048: NEG
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 2
50056: PUSH
50057: LD_INT 0
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 2
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: LD_INT 1
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 2
50087: NEG
50088: PUSH
50089: LD_INT 0
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 2
50098: NEG
50099: PUSH
50100: LD_INT 1
50102: NEG
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 2
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 3
50121: PUSH
50122: LD_INT 0
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 3
50131: PUSH
50132: LD_INT 1
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50157: LD_ADDR_VAR 0 16
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: LD_INT 0
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: PUSH
50196: LD_INT 1
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 1
50215: NEG
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: LD_INT 1
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: LD_INT 2
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 2
50250: PUSH
50251: LD_INT 1
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 2
50260: PUSH
50261: LD_INT 2
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 1
50270: PUSH
50271: LD_INT 2
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 2
50280: NEG
50281: PUSH
50282: LD_INT 1
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 2
50292: NEG
50293: PUSH
50294: LD_INT 2
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 3
50304: PUSH
50305: LD_INT 2
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 3
50314: PUSH
50315: LD_INT 3
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 2
50324: PUSH
50325: LD_INT 3
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50350: LD_ADDR_VAR 0 17
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: LD_INT 1
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 1
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: PUSH
50389: LD_INT 1
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: LD_INT 1
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: LD_INT 1
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: LD_INT 2
50435: NEG
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 0
50443: PUSH
50444: LD_INT 2
50446: NEG
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: LD_INT 1
50457: NEG
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 2
50465: PUSH
50466: LD_INT 0
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 2
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 2
50485: PUSH
50486: LD_INT 2
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 1
50495: PUSH
50496: LD_INT 2
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: LD_INT 2
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: LD_INT 1
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 2
50526: NEG
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 2
50537: NEG
50538: PUSH
50539: LD_INT 1
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 2
50549: NEG
50550: PUSH
50551: LD_INT 2
50553: NEG
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50580: LD_ADDR_VAR 0 18
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: LD_INT 1
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 1
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 1
50618: PUSH
50619: LD_INT 1
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: LD_INT 1
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 1
50638: NEG
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: LD_INT 1
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: LD_INT 2
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 0
50673: PUSH
50674: LD_INT 2
50676: NEG
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 1
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 2
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 2
50705: PUSH
50706: LD_INT 1
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 2
50715: PUSH
50716: LD_INT 2
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: LD_INT 2
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 0
50735: PUSH
50736: LD_INT 2
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: NEG
50746: PUSH
50747: LD_INT 1
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 2
50756: NEG
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 2
50767: NEG
50768: PUSH
50769: LD_INT 1
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 2
50779: NEG
50780: PUSH
50781: LD_INT 2
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50810: LD_ADDR_VAR 0 19
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: LD_INT 1
50830: NEG
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 1
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: PUSH
50849: LD_INT 1
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: LD_INT 0
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: LD_INT 1
50883: NEG
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 1
50891: NEG
50892: PUSH
50893: LD_INT 2
50895: NEG
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 0
50903: PUSH
50904: LD_INT 2
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 2
50925: PUSH
50926: LD_INT 0
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 2
50935: PUSH
50936: LD_INT 1
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 2
50945: PUSH
50946: LD_INT 2
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: LD_INT 2
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: LD_INT 2
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: NEG
50976: PUSH
50977: LD_INT 1
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 2
50986: NEG
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 2
50997: NEG
50998: PUSH
50999: LD_INT 1
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 2
51009: NEG
51010: PUSH
51011: LD_INT 2
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51040: LD_ADDR_VAR 0 20
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: LD_INT 0
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: LD_INT 0
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: LD_INT 1
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 0
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 1
51098: NEG
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 1
51109: NEG
51110: PUSH
51111: LD_INT 1
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 1
51121: NEG
51122: PUSH
51123: LD_INT 2
51125: NEG
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: LD_INT 2
51136: NEG
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 1
51144: PUSH
51145: LD_INT 1
51147: NEG
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 2
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 2
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 2
51175: PUSH
51176: LD_INT 2
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: LD_INT 2
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: LD_INT 2
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: NEG
51206: PUSH
51207: LD_INT 1
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 2
51216: NEG
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 2
51227: NEG
51228: PUSH
51229: LD_INT 1
51231: NEG
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 2
51239: NEG
51240: PUSH
51241: LD_INT 2
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51270: LD_ADDR_VAR 0 21
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: LD_INT 0
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 1
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: LD_INT 1
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 1
51328: NEG
51329: PUSH
51330: LD_INT 0
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 1
51339: NEG
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 1
51351: NEG
51352: PUSH
51353: LD_INT 2
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 0
51363: PUSH
51364: LD_INT 2
51366: NEG
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: LD_INT 1
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 2
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 2
51395: PUSH
51396: LD_INT 1
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 2
51405: PUSH
51406: LD_INT 2
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 1
51415: PUSH
51416: LD_INT 2
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 0
51425: PUSH
51426: LD_INT 2
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 1
51435: NEG
51436: PUSH
51437: LD_INT 1
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 2
51446: NEG
51447: PUSH
51448: LD_INT 0
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 2
51457: NEG
51458: PUSH
51459: LD_INT 1
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 2
51469: NEG
51470: PUSH
51471: LD_INT 2
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51500: LD_ADDR_VAR 0 22
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: LD_INT 1
51520: NEG
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: LD_INT 1
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: LD_INT 1
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 1
51558: NEG
51559: PUSH
51560: LD_INT 0
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 1
51569: NEG
51570: PUSH
51571: LD_INT 1
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 1
51581: NEG
51582: PUSH
51583: LD_INT 2
51585: NEG
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 0
51593: PUSH
51594: LD_INT 2
51596: NEG
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: LD_INT 1
51607: NEG
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 2
51615: PUSH
51616: LD_INT 0
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 2
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 2
51635: PUSH
51636: LD_INT 2
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: LD_INT 2
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: LD_INT 2
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 2
51676: NEG
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 2
51687: NEG
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 2
51699: NEG
51700: PUSH
51701: LD_INT 2
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51730: LD_ADDR_VAR 0 23
51734: PUSH
51735: LD_INT 0
51737: PUSH
51738: LD_INT 0
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 0
51747: PUSH
51748: LD_INT 1
51750: NEG
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: LD_INT 0
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: LD_INT 1
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 0
51778: PUSH
51779: LD_INT 1
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 1
51788: NEG
51789: PUSH
51790: LD_INT 0
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 1
51799: NEG
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: NEG
51812: PUSH
51813: LD_INT 2
51815: NEG
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 0
51823: PUSH
51824: LD_INT 2
51826: NEG
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 1
51834: PUSH
51835: LD_INT 1
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 2
51845: PUSH
51846: LD_INT 0
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 2
51855: PUSH
51856: LD_INT 1
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 2
51865: PUSH
51866: LD_INT 2
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: PUSH
51876: LD_INT 2
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 0
51885: PUSH
51886: LD_INT 2
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 1
51895: NEG
51896: PUSH
51897: LD_INT 1
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 2
51906: NEG
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 2
51917: NEG
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 2
51929: NEG
51930: PUSH
51931: LD_INT 2
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 2
51941: NEG
51942: PUSH
51943: LD_INT 3
51945: NEG
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 1
51953: NEG
51954: PUSH
51955: LD_INT 3
51957: NEG
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: LD_INT 2
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 2
51976: PUSH
51977: LD_INT 1
51979: NEG
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52010: LD_ADDR_VAR 0 24
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: LD_INT 1
52030: NEG
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: LD_INT 0
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 1
52079: NEG
52080: PUSH
52081: LD_INT 1
52083: NEG
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: NEG
52092: PUSH
52093: LD_INT 2
52095: NEG
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 0
52103: PUSH
52104: LD_INT 2
52106: NEG
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: PUSH
52115: LD_INT 1
52117: NEG
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 2
52125: PUSH
52126: LD_INT 0
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 2
52135: PUSH
52136: LD_INT 1
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 2
52145: PUSH
52146: LD_INT 2
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 1
52155: PUSH
52156: LD_INT 2
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: LD_INT 2
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 1
52175: NEG
52176: PUSH
52177: LD_INT 1
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 2
52186: NEG
52187: PUSH
52188: LD_INT 0
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 2
52197: NEG
52198: PUSH
52199: LD_INT 1
52201: NEG
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 2
52209: NEG
52210: PUSH
52211: LD_INT 2
52213: NEG
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 1
52221: PUSH
52222: LD_INT 2
52224: NEG
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 2
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 3
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 3
52253: PUSH
52254: LD_INT 2
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52286: LD_ADDR_VAR 0 25
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 0
52303: PUSH
52304: LD_INT 1
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 0
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: NEG
52345: PUSH
52346: LD_INT 0
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: LD_INT 1
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: LD_INT 2
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: LD_INT 2
52382: NEG
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: LD_INT 1
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 2
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 2
52411: PUSH
52412: LD_INT 1
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 2
52421: PUSH
52422: LD_INT 2
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: LD_INT 2
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: LD_INT 2
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: LD_INT 1
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 2
52462: NEG
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 2
52473: NEG
52474: PUSH
52475: LD_INT 1
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 2
52485: NEG
52486: PUSH
52487: LD_INT 2
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 3
52497: PUSH
52498: LD_INT 1
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 3
52507: PUSH
52508: LD_INT 2
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 2
52517: PUSH
52518: LD_INT 3
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: LD_INT 3
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52560: LD_ADDR_VAR 0 26
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: LD_INT 1
52580: NEG
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 1
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 1
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 1
52618: NEG
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 1
52629: NEG
52630: PUSH
52631: LD_INT 1
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 1
52641: NEG
52642: PUSH
52643: LD_INT 2
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: LD_INT 2
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 1
52664: PUSH
52665: LD_INT 1
52667: NEG
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 2
52675: PUSH
52676: LD_INT 0
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 2
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 2
52695: PUSH
52696: LD_INT 2
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: LD_INT 2
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: LD_INT 2
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 1
52725: NEG
52726: PUSH
52727: LD_INT 1
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 2
52736: NEG
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 2
52747: NEG
52748: PUSH
52749: LD_INT 1
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 2
52759: NEG
52760: PUSH
52761: LD_INT 2
52763: NEG
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 2
52771: PUSH
52772: LD_INT 3
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: LD_INT 3
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 1
52791: NEG
52792: PUSH
52793: LD_INT 2
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 2
52802: NEG
52803: PUSH
52804: LD_INT 1
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52836: LD_ADDR_VAR 0 27
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 1
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 1
52917: NEG
52918: PUSH
52919: LD_INT 2
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: LD_INT 2
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: LD_INT 1
52943: NEG
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 2
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 2
52971: PUSH
52972: LD_INT 2
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: LD_INT 2
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: LD_INT 2
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 2
53012: NEG
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 2
53023: NEG
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 2
53035: NEG
53036: PUSH
53037: LD_INT 2
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 1
53047: NEG
53048: PUSH
53049: LD_INT 2
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 2
53058: NEG
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 3
53069: NEG
53070: PUSH
53071: LD_INT 1
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 3
53081: NEG
53082: PUSH
53083: LD_INT 2
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53116: LD_ADDR_VAR 0 28
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: LD_INT 1
53136: NEG
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: LD_INT 1
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 1
53174: NEG
53175: PUSH
53176: LD_INT 0
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 1
53185: NEG
53186: PUSH
53187: LD_INT 1
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: LD_INT 2
53201: NEG
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: LD_INT 2
53212: NEG
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: LD_INT 1
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 2
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 2
53241: PUSH
53242: LD_INT 1
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 2
53251: PUSH
53252: LD_INT 2
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 1
53261: PUSH
53262: LD_INT 2
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: LD_INT 2
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: LD_INT 1
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 2
53292: NEG
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 2
53303: NEG
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 2
53315: NEG
53316: PUSH
53317: LD_INT 2
53319: NEG
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 2
53327: NEG
53328: PUSH
53329: LD_INT 3
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 1
53339: NEG
53340: PUSH
53341: LD_INT 3
53343: NEG
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 3
53351: NEG
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 3
53363: NEG
53364: PUSH
53365: LD_INT 2
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53398: LD_ADDR_VAR 0 29
53402: PUSH
53403: LD_INT 0
53405: PUSH
53406: LD_INT 0
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: LD_INT 1
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 1
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 1
53436: PUSH
53437: LD_INT 1
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: LD_INT 1
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 1
53456: NEG
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 1
53467: NEG
53468: PUSH
53469: LD_INT 1
53471: NEG
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 1
53479: NEG
53480: PUSH
53481: LD_INT 2
53483: NEG
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: LD_INT 2
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 1
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 2
53513: PUSH
53514: LD_INT 0
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 2
53523: PUSH
53524: LD_INT 1
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 1
53533: PUSH
53534: LD_INT 2
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 0
53543: PUSH
53544: LD_INT 2
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: LD_INT 1
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 2
53564: NEG
53565: PUSH
53566: LD_INT 1
53568: NEG
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 2
53576: NEG
53577: PUSH
53578: LD_INT 2
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 2
53588: NEG
53589: PUSH
53590: LD_INT 3
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 2
53600: PUSH
53601: LD_INT 1
53603: NEG
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 3
53611: PUSH
53612: LD_INT 1
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 1
53621: PUSH
53622: LD_INT 3
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: NEG
53632: PUSH
53633: LD_INT 2
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 3
53642: NEG
53643: PUSH
53644: LD_INT 2
53646: NEG
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53677: LD_ADDR_VAR 0 30
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: LD_INT 0
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 0
53694: PUSH
53695: LD_INT 1
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: LD_INT 0
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 1
53715: PUSH
53716: LD_INT 1
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: LD_INT 1
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 1
53735: NEG
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 1
53758: NEG
53759: PUSH
53760: LD_INT 2
53762: NEG
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: LD_INT 2
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 1
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 2
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 2
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 2
53812: PUSH
53813: LD_INT 2
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: LD_INT 2
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 1
53832: NEG
53833: PUSH
53834: LD_INT 1
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 2
53843: NEG
53844: PUSH
53845: LD_INT 0
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 2
53854: NEG
53855: PUSH
53856: LD_INT 1
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 1
53866: NEG
53867: PUSH
53868: LD_INT 3
53870: NEG
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 1
53878: PUSH
53879: LD_INT 2
53881: NEG
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 3
53889: PUSH
53890: LD_INT 2
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 2
53899: PUSH
53900: LD_INT 3
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 2
53909: NEG
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 3
53920: NEG
53921: PUSH
53922: LD_INT 1
53924: NEG
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53955: LD_ADDR_VAR 0 31
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 0
53972: PUSH
53973: LD_INT 1
53975: NEG
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 1
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 1
53993: PUSH
53994: LD_INT 1
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 0
54003: PUSH
54004: LD_INT 1
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 1
54013: NEG
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: LD_INT 1
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 1
54036: NEG
54037: PUSH
54038: LD_INT 2
54040: NEG
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 1
54048: PUSH
54049: LD_INT 1
54051: NEG
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 2
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 2
54069: PUSH
54070: LD_INT 1
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 2
54079: PUSH
54080: LD_INT 2
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 1
54089: PUSH
54090: LD_INT 2
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: LD_INT 2
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 1
54109: NEG
54110: PUSH
54111: LD_INT 1
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 2
54120: NEG
54121: PUSH
54122: LD_INT 1
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 2
54132: NEG
54133: PUSH
54134: LD_INT 2
54136: NEG
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 2
54144: NEG
54145: PUSH
54146: LD_INT 3
54148: NEG
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 2
54156: PUSH
54157: LD_INT 1
54159: NEG
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 3
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: LD_INT 3
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 1
54187: NEG
54188: PUSH
54189: LD_INT 2
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 3
54198: NEG
54199: PUSH
54200: LD_INT 2
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54233: LD_ADDR_VAR 0 32
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: LD_INT 0
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: LD_INT 1
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: LD_INT 1
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: LD_INT 1
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: NEG
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 1
54314: NEG
54315: PUSH
54316: LD_INT 2
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: LD_INT 2
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 1
54337: PUSH
54338: LD_INT 1
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 2
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 2
54358: PUSH
54359: LD_INT 2
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: LD_INT 2
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 0
54378: PUSH
54379: LD_INT 2
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 1
54388: NEG
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 2
54399: NEG
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 2
54410: NEG
54411: PUSH
54412: LD_INT 1
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: LD_INT 3
54426: NEG
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 1
54434: PUSH
54435: LD_INT 2
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 3
54445: PUSH
54446: LD_INT 2
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 2
54455: PUSH
54456: LD_INT 3
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 2
54465: NEG
54466: PUSH
54467: LD_INT 1
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 3
54476: NEG
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54511: LD_ADDR_VAR 0 33
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: LD_INT 2
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 1
54604: PUSH
54605: LD_INT 1
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 2
54615: PUSH
54616: LD_INT 0
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 2
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: LD_INT 2
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 0
54645: PUSH
54646: LD_INT 2
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: LD_INT 1
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 2
54666: NEG
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 2
54677: NEG
54678: PUSH
54679: LD_INT 1
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 2
54689: NEG
54690: PUSH
54691: LD_INT 2
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 2
54701: NEG
54702: PUSH
54703: LD_INT 3
54705: NEG
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 2
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 3
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 1
54734: PUSH
54735: LD_INT 3
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: NEG
54745: PUSH
54746: LD_INT 2
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 3
54755: NEG
54756: PUSH
54757: LD_INT 2
54759: NEG
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54790: LD_ADDR_VAR 0 34
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 0
54807: PUSH
54808: LD_INT 1
54810: NEG
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 1
54818: PUSH
54819: LD_INT 0
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 1
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 0
54838: PUSH
54839: LD_INT 1
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: NEG
54849: PUSH
54850: LD_INT 0
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 1
54859: NEG
54860: PUSH
54861: LD_INT 1
54863: NEG
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 1
54871: NEG
54872: PUSH
54873: LD_INT 2
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: LD_INT 2
54886: NEG
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 1
54894: PUSH
54895: LD_INT 1
54897: NEG
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 2
54905: PUSH
54906: LD_INT 1
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 2
54915: PUSH
54916: LD_INT 2
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 1
54925: PUSH
54926: LD_INT 2
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 1
54935: NEG
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 2
54946: NEG
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 2
54957: NEG
54958: PUSH
54959: LD_INT 1
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 2
54969: NEG
54970: PUSH
54971: LD_INT 2
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 1
54981: NEG
54982: PUSH
54983: LD_INT 3
54985: NEG
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 1
54993: PUSH
54994: LD_INT 2
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 3
55004: PUSH
55005: LD_INT 2
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 2
55014: PUSH
55015: LD_INT 3
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 2
55024: NEG
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 3
55035: NEG
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55070: LD_ADDR_VAR 0 35
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: LD_INT 1
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: LD_INT 0
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 1
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: LD_INT 1
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: LD_INT 0
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 1
55139: NEG
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 2
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 2
55161: NEG
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55182: LD_ADDR_VAR 0 36
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: LD_INT 1
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 1
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 1
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 0
55230: PUSH
55231: LD_INT 1
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 1
55240: NEG
55241: PUSH
55242: LD_INT 0
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 1
55251: NEG
55252: PUSH
55253: LD_INT 1
55255: NEG
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 1
55263: NEG
55264: PUSH
55265: LD_INT 2
55267: NEG
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: LD_INT 2
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55294: LD_ADDR_VAR 0 37
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: LD_INT 0
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: LD_INT 1
55314: NEG
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 1
55332: PUSH
55333: LD_INT 1
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: LD_INT 1
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 1
55352: NEG
55353: PUSH
55354: LD_INT 0
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 1
55363: NEG
55364: PUSH
55365: LD_INT 1
55367: NEG
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: LD_INT 1
55378: NEG
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 1
55386: NEG
55387: PUSH
55388: LD_INT 1
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55406: LD_ADDR_VAR 0 38
55410: PUSH
55411: LD_INT 0
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: LD_INT 1
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 1
55444: PUSH
55445: LD_INT 1
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 0
55454: PUSH
55455: LD_INT 1
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 1
55464: NEG
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 1
55475: NEG
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 2
55487: PUSH
55488: LD_INT 1
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 2
55497: NEG
55498: PUSH
55499: LD_INT 1
55501: NEG
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55518: LD_ADDR_VAR 0 39
55522: PUSH
55523: LD_INT 0
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 0
55535: PUSH
55536: LD_INT 1
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 1
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 1
55556: PUSH
55557: LD_INT 1
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: LD_INT 1
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 1
55576: NEG
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 1
55587: NEG
55588: PUSH
55589: LD_INT 1
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 1
55599: NEG
55600: PUSH
55601: LD_INT 2
55603: NEG
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: PUSH
55612: LD_INT 2
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55630: LD_ADDR_VAR 0 40
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: LD_INT 1
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: LD_INT 0
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: LD_INT 1
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 1
55699: NEG
55700: PUSH
55701: LD_INT 1
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 1
55711: PUSH
55712: LD_INT 1
55714: NEG
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 1
55722: NEG
55723: PUSH
55724: LD_INT 1
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55742: LD_ADDR_VAR 0 41
55746: PUSH
55747: LD_INT 0
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: LD_INT 1
55762: NEG
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: PUSH
55781: LD_INT 1
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 0
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 1
55800: NEG
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 1
55811: NEG
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: LD_INT 2
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: PUSH
55836: LD_INT 1
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 2
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 2
55856: PUSH
55857: LD_INT 1
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 2
55866: PUSH
55867: LD_INT 2
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 1
55876: PUSH
55877: LD_INT 2
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 1
55886: NEG
55887: PUSH
55888: LD_INT 1
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 2
55897: NEG
55898: PUSH
55899: LD_INT 0
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 2
55908: NEG
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 2
55920: NEG
55921: PUSH
55922: LD_INT 2
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 2
55932: NEG
55933: PUSH
55934: LD_INT 3
55936: NEG
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: LD_INT 1
55947: NEG
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 3
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 3
55965: PUSH
55966: LD_INT 1
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 3
55975: PUSH
55976: LD_INT 2
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 3
55985: PUSH
55986: LD_INT 3
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 2
55995: PUSH
55996: LD_INT 3
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 2
56005: NEG
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 3
56016: NEG
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 3
56027: NEG
56028: PUSH
56029: LD_INT 1
56031: NEG
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 3
56039: NEG
56040: PUSH
56041: LD_INT 2
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 3
56051: NEG
56052: PUSH
56053: LD_INT 3
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56092: LD_ADDR_VAR 0 42
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: LD_INT 0
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: LD_INT 1
56112: NEG
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 1
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 1
56130: PUSH
56131: LD_INT 1
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 1
56150: NEG
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 1
56161: NEG
56162: PUSH
56163: LD_INT 1
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 1
56173: NEG
56174: PUSH
56175: LD_INT 2
56177: NEG
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: LD_INT 2
56188: NEG
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 1
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 2
56207: PUSH
56208: LD_INT 1
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 2
56217: PUSH
56218: LD_INT 2
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 1
56227: PUSH
56228: LD_INT 2
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: LD_INT 2
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 1
56247: NEG
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 2
56258: NEG
56259: PUSH
56260: LD_INT 1
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 2
56270: NEG
56271: PUSH
56272: LD_INT 2
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 2
56282: NEG
56283: PUSH
56284: LD_INT 3
56286: NEG
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 1
56294: NEG
56295: PUSH
56296: LD_INT 3
56298: NEG
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: LD_INT 3
56309: NEG
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 1
56317: PUSH
56318: LD_INT 2
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 3
56328: PUSH
56329: LD_INT 2
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 3
56338: PUSH
56339: LD_INT 3
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 2
56348: PUSH
56349: LD_INT 3
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: LD_INT 3
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: LD_INT 3
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: LD_INT 2
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 3
56389: NEG
56390: PUSH
56391: LD_INT 2
56393: NEG
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 3
56401: NEG
56402: PUSH
56403: LD_INT 3
56405: NEG
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56442: LD_ADDR_VAR 0 43
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: LD_INT 0
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 0
56459: PUSH
56460: LD_INT 1
56462: NEG
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 1
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 1
56480: PUSH
56481: LD_INT 1
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: LD_INT 1
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 1
56500: NEG
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 1
56511: NEG
56512: PUSH
56513: LD_INT 1
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 1
56523: NEG
56524: PUSH
56525: LD_INT 2
56527: NEG
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 0
56535: PUSH
56536: LD_INT 2
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 1
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 2
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 2
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 1
56577: PUSH
56578: LD_INT 2
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 0
56587: PUSH
56588: LD_INT 2
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 1
56597: NEG
56598: PUSH
56599: LD_INT 1
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 2
56608: NEG
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 2
56619: NEG
56620: PUSH
56621: LD_INT 1
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: NEG
56632: PUSH
56633: LD_INT 3
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 0
56643: PUSH
56644: LD_INT 3
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 1
56654: PUSH
56655: LD_INT 2
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 2
56665: PUSH
56666: LD_INT 1
56668: NEG
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 3
56676: PUSH
56677: LD_INT 0
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 3
56686: PUSH
56687: LD_INT 1
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 1
56696: PUSH
56697: LD_INT 3
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: LD_INT 3
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 1
56716: NEG
56717: PUSH
56718: LD_INT 2
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 2
56727: NEG
56728: PUSH
56729: LD_INT 1
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 3
56738: NEG
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 3
56749: NEG
56750: PUSH
56751: LD_INT 1
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56790: LD_ADDR_VAR 0 44
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: LD_INT 1
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 1
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: PUSH
56829: LD_INT 1
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: LD_INT 1
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 1
56848: NEG
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 1
56859: NEG
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 1
56871: NEG
56872: PUSH
56873: LD_INT 2
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: LD_INT 1
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 2
56894: PUSH
56895: LD_INT 0
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 2
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 2
56914: PUSH
56915: LD_INT 2
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 1
56924: PUSH
56925: LD_INT 2
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 1
56934: NEG
56935: PUSH
56936: LD_INT 1
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 2
56945: NEG
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 2
56956: NEG
56957: PUSH
56958: LD_INT 1
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 2
56968: NEG
56969: PUSH
56970: LD_INT 2
56972: NEG
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 2
56980: NEG
56981: PUSH
56982: LD_INT 3
56984: NEG
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 2
56992: PUSH
56993: LD_INT 1
56995: NEG
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 3
57003: PUSH
57004: LD_INT 0
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 3
57013: PUSH
57014: LD_INT 1
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 3
57023: PUSH
57024: LD_INT 2
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 3
57033: PUSH
57034: LD_INT 3
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 2
57043: PUSH
57044: LD_INT 3
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 2
57053: NEG
57054: PUSH
57055: LD_INT 1
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 3
57064: NEG
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 3
57075: NEG
57076: PUSH
57077: LD_INT 1
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 3
57087: NEG
57088: PUSH
57089: LD_INT 2
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 3
57099: NEG
57100: PUSH
57101: LD_INT 3
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57140: LD_ADDR_VAR 0 45
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: LD_INT 0
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 0
57157: PUSH
57158: LD_INT 1
57160: NEG
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 1
57168: PUSH
57169: LD_INT 0
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 1
57178: PUSH
57179: LD_INT 1
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 0
57188: PUSH
57189: LD_INT 1
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 1
57198: NEG
57199: PUSH
57200: LD_INT 0
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 1
57209: NEG
57210: PUSH
57211: LD_INT 1
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 1
57221: NEG
57222: PUSH
57223: LD_INT 2
57225: NEG
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 0
57233: PUSH
57234: LD_INT 2
57236: NEG
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: LD_INT 1
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 2
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 2
57265: PUSH
57266: LD_INT 2
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 1
57275: PUSH
57276: LD_INT 2
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: LD_INT 2
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 1
57295: NEG
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 2
57306: NEG
57307: PUSH
57308: LD_INT 1
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 2
57318: NEG
57319: PUSH
57320: LD_INT 2
57322: NEG
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 2
57330: NEG
57331: PUSH
57332: LD_INT 3
57334: NEG
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 1
57342: NEG
57343: PUSH
57344: LD_INT 3
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: LD_INT 3
57357: NEG
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 1
57365: PUSH
57366: LD_INT 2
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 3
57376: PUSH
57377: LD_INT 2
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 3
57386: PUSH
57387: LD_INT 3
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 2
57396: PUSH
57397: LD_INT 3
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 1
57406: PUSH
57407: LD_INT 3
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: LD_INT 3
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: NEG
57427: PUSH
57428: LD_INT 2
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 3
57437: NEG
57438: PUSH
57439: LD_INT 2
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 3
57449: NEG
57450: PUSH
57451: LD_INT 3
57453: NEG
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57490: LD_ADDR_VAR 0 46
57494: PUSH
57495: LD_INT 0
57497: PUSH
57498: LD_INT 0
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 0
57507: PUSH
57508: LD_INT 1
57510: NEG
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 1
57518: PUSH
57519: LD_INT 0
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 1
57528: PUSH
57529: LD_INT 1
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 0
57538: PUSH
57539: LD_INT 1
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 1
57548: NEG
57549: PUSH
57550: LD_INT 0
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 1
57559: NEG
57560: PUSH
57561: LD_INT 1
57563: NEG
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 1
57571: NEG
57572: PUSH
57573: LD_INT 2
57575: NEG
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 0
57583: PUSH
57584: LD_INT 2
57586: NEG
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 1
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 2
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 2
57615: PUSH
57616: LD_INT 1
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 1
57625: PUSH
57626: LD_INT 2
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: LD_INT 2
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 1
57645: NEG
57646: PUSH
57647: LD_INT 1
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 2
57656: NEG
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 2
57667: NEG
57668: PUSH
57669: LD_INT 1
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 1
57679: NEG
57680: PUSH
57681: LD_INT 3
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 0
57691: PUSH
57692: LD_INT 3
57694: NEG
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 1
57702: PUSH
57703: LD_INT 2
57705: NEG
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 2
57713: PUSH
57714: LD_INT 1
57716: NEG
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 3
57724: PUSH
57725: LD_INT 0
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 3
57734: PUSH
57735: LD_INT 1
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 1
57744: PUSH
57745: LD_INT 3
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 0
57754: PUSH
57755: LD_INT 3
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 1
57764: NEG
57765: PUSH
57766: LD_INT 2
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 2
57775: NEG
57776: PUSH
57777: LD_INT 1
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 3
57786: NEG
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 3
57797: NEG
57798: PUSH
57799: LD_INT 1
57801: NEG
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57838: LD_ADDR_VAR 0 47
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: LD_INT 0
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 0
57855: PUSH
57856: LD_INT 1
57858: NEG
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 1
57866: PUSH
57867: LD_INT 0
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 1
57876: PUSH
57877: LD_INT 1
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 0
57886: PUSH
57887: LD_INT 1
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 1
57896: NEG
57897: PUSH
57898: LD_INT 0
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 1
57907: NEG
57908: PUSH
57909: LD_INT 1
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 1
57919: NEG
57920: PUSH
57921: LD_INT 2
57923: NEG
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 0
57931: PUSH
57932: LD_INT 2
57934: NEG
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: LD_INT 1
57945: NEG
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 2
57953: NEG
57954: PUSH
57955: LD_INT 1
57957: NEG
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 2
57965: NEG
57966: PUSH
57967: LD_INT 2
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57989: LD_ADDR_VAR 0 48
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: LD_INT 0
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 1
58017: PUSH
58018: LD_INT 0
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: LD_INT 1
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 0
58037: PUSH
58038: LD_INT 1
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: NEG
58048: PUSH
58049: LD_INT 0
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 1
58058: NEG
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 1
58070: NEG
58071: PUSH
58072: LD_INT 2
58074: NEG
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 0
58082: PUSH
58083: LD_INT 2
58085: NEG
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 1
58093: PUSH
58094: LD_INT 1
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 2
58104: PUSH
58105: LD_INT 0
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 2
58114: PUSH
58115: LD_INT 1
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58136: LD_ADDR_VAR 0 49
58140: PUSH
58141: LD_INT 0
58143: PUSH
58144: LD_INT 0
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 0
58153: PUSH
58154: LD_INT 1
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 1
58164: PUSH
58165: LD_INT 0
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 1
58174: PUSH
58175: LD_INT 1
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 0
58184: PUSH
58185: LD_INT 1
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 1
58194: NEG
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 1
58205: NEG
58206: PUSH
58207: LD_INT 1
58209: NEG
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 1
58217: PUSH
58218: LD_INT 1
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 2
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 2
58238: PUSH
58239: LD_INT 1
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 2
58248: PUSH
58249: LD_INT 2
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: LD_INT 2
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58280: LD_ADDR_VAR 0 50
58284: PUSH
58285: LD_INT 0
58287: PUSH
58288: LD_INT 0
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 0
58297: PUSH
58298: LD_INT 1
58300: NEG
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 1
58308: PUSH
58309: LD_INT 0
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 1
58318: PUSH
58319: LD_INT 1
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 0
58328: PUSH
58329: LD_INT 1
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 1
58338: NEG
58339: PUSH
58340: LD_INT 0
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 1
58349: NEG
58350: PUSH
58351: LD_INT 1
58353: NEG
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 2
58361: PUSH
58362: LD_INT 1
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 2
58371: PUSH
58372: LD_INT 2
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 1
58381: PUSH
58382: LD_INT 2
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 0
58391: PUSH
58392: LD_INT 2
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 1
58401: NEG
58402: PUSH
58403: LD_INT 1
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58424: LD_ADDR_VAR 0 51
58428: PUSH
58429: LD_INT 0
58431: PUSH
58432: LD_INT 0
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 0
58441: PUSH
58442: LD_INT 1
58444: NEG
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 1
58452: PUSH
58453: LD_INT 0
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 1
58462: PUSH
58463: LD_INT 1
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 0
58472: PUSH
58473: LD_INT 1
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 1
58482: NEG
58483: PUSH
58484: LD_INT 0
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 1
58493: NEG
58494: PUSH
58495: LD_INT 1
58497: NEG
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 1
58505: PUSH
58506: LD_INT 2
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 0
58515: PUSH
58516: LD_INT 2
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 1
58525: NEG
58526: PUSH
58527: LD_INT 1
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 2
58536: NEG
58537: PUSH
58538: LD_INT 0
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 2
58547: NEG
58548: PUSH
58549: LD_INT 1
58551: NEG
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58571: LD_ADDR_VAR 0 52
58575: PUSH
58576: LD_INT 0
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 0
58588: PUSH
58589: LD_INT 1
58591: NEG
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 1
58599: PUSH
58600: LD_INT 0
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 1
58609: PUSH
58610: LD_INT 1
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 0
58619: PUSH
58620: LD_INT 1
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 1
58629: NEG
58630: PUSH
58631: LD_INT 0
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 1
58640: NEG
58641: PUSH
58642: LD_INT 1
58644: NEG
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 1
58652: NEG
58653: PUSH
58654: LD_INT 2
58656: NEG
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 1
58664: NEG
58665: PUSH
58666: LD_INT 1
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 2
58675: NEG
58676: PUSH
58677: LD_INT 0
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 2
58686: NEG
58687: PUSH
58688: LD_INT 1
58690: NEG
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 2
58698: NEG
58699: PUSH
58700: LD_INT 2
58702: NEG
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58722: LD_ADDR_VAR 0 53
58726: PUSH
58727: LD_INT 0
58729: PUSH
58730: LD_INT 0
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 0
58739: PUSH
58740: LD_INT 1
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 1
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 1
58760: PUSH
58761: LD_INT 1
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 0
58770: PUSH
58771: LD_INT 1
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 1
58780: NEG
58781: PUSH
58782: LD_INT 0
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 1
58791: NEG
58792: PUSH
58793: LD_INT 1
58795: NEG
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 1
58803: NEG
58804: PUSH
58805: LD_INT 2
58807: NEG
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 0
58815: PUSH
58816: LD_INT 2
58818: NEG
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 1
58826: PUSH
58827: LD_INT 1
58829: NEG
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 2
58837: PUSH
58838: LD_INT 0
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 2
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 2
58857: PUSH
58858: LD_INT 2
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 1
58867: PUSH
58868: LD_INT 2
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 0
58877: PUSH
58878: LD_INT 2
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 1
58887: NEG
58888: PUSH
58889: LD_INT 1
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 2
58898: NEG
58899: PUSH
58900: LD_INT 0
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 2
58909: NEG
58910: PUSH
58911: LD_INT 1
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 2
58921: NEG
58922: PUSH
58923: LD_INT 2
58925: NEG
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58952: LD_ADDR_VAR 0 54
58956: PUSH
58957: LD_INT 0
58959: PUSH
58960: LD_INT 0
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 0
58969: PUSH
58970: LD_INT 1
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: LD_INT 0
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 1
58990: PUSH
58991: LD_INT 1
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 0
59000: PUSH
59001: LD_INT 1
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 1
59010: NEG
59011: PUSH
59012: LD_INT 0
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 1
59021: NEG
59022: PUSH
59023: LD_INT 1
59025: NEG
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 1
59033: NEG
59034: PUSH
59035: LD_INT 2
59037: NEG
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 0
59045: PUSH
59046: LD_INT 2
59048: NEG
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 1
59056: PUSH
59057: LD_INT 1
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 2
59067: PUSH
59068: LD_INT 0
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 2
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 2
59087: PUSH
59088: LD_INT 2
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 1
59097: PUSH
59098: LD_INT 2
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 0
59107: PUSH
59108: LD_INT 2
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 1
59117: NEG
59118: PUSH
59119: LD_INT 1
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 2
59128: NEG
59129: PUSH
59130: LD_INT 0
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 2
59139: NEG
59140: PUSH
59141: LD_INT 1
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 2
59151: NEG
59152: PUSH
59153: LD_INT 2
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59182: LD_ADDR_VAR 0 55
59186: PUSH
59187: LD_INT 0
59189: PUSH
59190: LD_INT 0
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 0
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 1
59210: PUSH
59211: LD_INT 0
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 1
59220: PUSH
59221: LD_INT 1
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 0
59230: PUSH
59231: LD_INT 1
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 1
59240: NEG
59241: PUSH
59242: LD_INT 0
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: NEG
59252: PUSH
59253: LD_INT 1
59255: NEG
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 1
59263: NEG
59264: PUSH
59265: LD_INT 2
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 0
59275: PUSH
59276: LD_INT 2
59278: NEG
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: LD_INT 1
59289: NEG
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 2
59297: PUSH
59298: LD_INT 0
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 2
59307: PUSH
59308: LD_INT 1
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 2
59317: PUSH
59318: LD_INT 2
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 1
59327: PUSH
59328: LD_INT 2
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 0
59337: PUSH
59338: LD_INT 2
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 1
59347: NEG
59348: PUSH
59349: LD_INT 1
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 2
59358: NEG
59359: PUSH
59360: LD_INT 0
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 2
59369: NEG
59370: PUSH
59371: LD_INT 1
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 2
59381: NEG
59382: PUSH
59383: LD_INT 2
59385: NEG
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59412: LD_ADDR_VAR 0 56
59416: PUSH
59417: LD_INT 0
59419: PUSH
59420: LD_INT 0
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 0
59429: PUSH
59430: LD_INT 1
59432: NEG
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 1
59440: PUSH
59441: LD_INT 0
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 1
59450: PUSH
59451: LD_INT 1
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 0
59460: PUSH
59461: LD_INT 1
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 1
59470: NEG
59471: PUSH
59472: LD_INT 0
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 1
59481: NEG
59482: PUSH
59483: LD_INT 1
59485: NEG
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 1
59493: NEG
59494: PUSH
59495: LD_INT 2
59497: NEG
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 0
59505: PUSH
59506: LD_INT 2
59508: NEG
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 1
59516: PUSH
59517: LD_INT 1
59519: NEG
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 2
59527: PUSH
59528: LD_INT 0
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 2
59537: PUSH
59538: LD_INT 1
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 2
59547: PUSH
59548: LD_INT 2
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 1
59557: PUSH
59558: LD_INT 2
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 0
59567: PUSH
59568: LD_INT 2
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 1
59577: NEG
59578: PUSH
59579: LD_INT 1
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 2
59588: NEG
59589: PUSH
59590: LD_INT 0
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 2
59599: NEG
59600: PUSH
59601: LD_INT 1
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 2
59611: NEG
59612: PUSH
59613: LD_INT 2
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59642: LD_ADDR_VAR 0 57
59646: PUSH
59647: LD_INT 0
59649: PUSH
59650: LD_INT 0
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 0
59659: PUSH
59660: LD_INT 1
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 1
59670: PUSH
59671: LD_INT 0
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 1
59680: PUSH
59681: LD_INT 1
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 0
59690: PUSH
59691: LD_INT 1
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 1
59700: NEG
59701: PUSH
59702: LD_INT 0
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 1
59711: NEG
59712: PUSH
59713: LD_INT 1
59715: NEG
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 1
59723: NEG
59724: PUSH
59725: LD_INT 2
59727: NEG
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 0
59735: PUSH
59736: LD_INT 2
59738: NEG
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 1
59746: PUSH
59747: LD_INT 1
59749: NEG
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 2
59757: PUSH
59758: LD_INT 0
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 2
59767: PUSH
59768: LD_INT 1
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 2
59777: PUSH
59778: LD_INT 2
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 1
59787: PUSH
59788: LD_INT 2
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 0
59797: PUSH
59798: LD_INT 2
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 1
59807: NEG
59808: PUSH
59809: LD_INT 1
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 2
59818: NEG
59819: PUSH
59820: LD_INT 0
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 2
59829: NEG
59830: PUSH
59831: LD_INT 1
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 2
59841: NEG
59842: PUSH
59843: LD_INT 2
59845: NEG
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59872: LD_ADDR_VAR 0 58
59876: PUSH
59877: LD_INT 0
59879: PUSH
59880: LD_INT 0
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 0
59889: PUSH
59890: LD_INT 1
59892: NEG
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 1
59900: PUSH
59901: LD_INT 0
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 1
59910: PUSH
59911: LD_INT 1
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 0
59920: PUSH
59921: LD_INT 1
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 1
59930: NEG
59931: PUSH
59932: LD_INT 0
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 1
59941: NEG
59942: PUSH
59943: LD_INT 1
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 1
59953: NEG
59954: PUSH
59955: LD_INT 2
59957: NEG
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 0
59965: PUSH
59966: LD_INT 2
59968: NEG
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 1
59976: PUSH
59977: LD_INT 1
59979: NEG
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 2
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 2
59997: PUSH
59998: LD_INT 1
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 2
60007: PUSH
60008: LD_INT 2
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 1
60017: PUSH
60018: LD_INT 2
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 0
60027: PUSH
60028: LD_INT 2
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 1
60037: NEG
60038: PUSH
60039: LD_INT 1
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 2
60048: NEG
60049: PUSH
60050: LD_INT 0
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 2
60059: NEG
60060: PUSH
60061: LD_INT 1
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 2
60071: NEG
60072: PUSH
60073: LD_INT 2
60075: NEG
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60102: LD_ADDR_VAR 0 59
60106: PUSH
60107: LD_INT 0
60109: PUSH
60110: LD_INT 0
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 0
60119: PUSH
60120: LD_INT 1
60122: NEG
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 1
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 1
60140: PUSH
60141: LD_INT 1
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 0
60150: PUSH
60151: LD_INT 1
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 1
60160: NEG
60161: PUSH
60162: LD_INT 0
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 1
60171: NEG
60172: PUSH
60173: LD_INT 1
60175: NEG
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60190: LD_ADDR_VAR 0 60
60194: PUSH
60195: LD_INT 0
60197: PUSH
60198: LD_INT 0
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 0
60207: PUSH
60208: LD_INT 1
60210: NEG
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 1
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 1
60228: PUSH
60229: LD_INT 1
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 0
60238: PUSH
60239: LD_INT 1
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 1
60248: NEG
60249: PUSH
60250: LD_INT 0
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 1
60259: NEG
60260: PUSH
60261: LD_INT 1
60263: NEG
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60278: LD_ADDR_VAR 0 61
60282: PUSH
60283: LD_INT 0
60285: PUSH
60286: LD_INT 0
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 0
60295: PUSH
60296: LD_INT 1
60298: NEG
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 1
60306: PUSH
60307: LD_INT 0
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 1
60316: PUSH
60317: LD_INT 1
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: LD_INT 1
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 1
60336: NEG
60337: PUSH
60338: LD_INT 0
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 1
60347: NEG
60348: PUSH
60349: LD_INT 1
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60366: LD_ADDR_VAR 0 62
60370: PUSH
60371: LD_INT 0
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 0
60383: PUSH
60384: LD_INT 1
60386: NEG
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 1
60394: PUSH
60395: LD_INT 0
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 1
60404: PUSH
60405: LD_INT 1
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 0
60414: PUSH
60415: LD_INT 1
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 1
60424: NEG
60425: PUSH
60426: LD_INT 0
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 1
60435: NEG
60436: PUSH
60437: LD_INT 1
60439: NEG
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60454: LD_ADDR_VAR 0 63
60458: PUSH
60459: LD_INT 0
60461: PUSH
60462: LD_INT 0
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 0
60471: PUSH
60472: LD_INT 1
60474: NEG
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 1
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 1
60492: PUSH
60493: LD_INT 1
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 0
60502: PUSH
60503: LD_INT 1
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 1
60512: NEG
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: NEG
60524: PUSH
60525: LD_INT 1
60527: NEG
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60542: LD_ADDR_VAR 0 64
60546: PUSH
60547: LD_INT 0
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 0
60559: PUSH
60560: LD_INT 1
60562: NEG
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 1
60570: PUSH
60571: LD_INT 0
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 1
60580: PUSH
60581: LD_INT 1
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 0
60590: PUSH
60591: LD_INT 1
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 1
60600: NEG
60601: PUSH
60602: LD_INT 0
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 1
60611: NEG
60612: PUSH
60613: LD_INT 1
60615: NEG
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: ST_TO_ADDR
// end ; 1 :
60630: GO 66527
60632: LD_INT 1
60634: DOUBLE
60635: EQUAL
60636: IFTRUE 60640
60638: GO 63263
60640: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60641: LD_ADDR_VAR 0 11
60645: PUSH
60646: LD_INT 1
60648: NEG
60649: PUSH
60650: LD_INT 3
60652: NEG
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 0
60660: PUSH
60661: LD_INT 3
60663: NEG
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 1
60671: PUSH
60672: LD_INT 2
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: LIST
60684: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60685: LD_ADDR_VAR 0 12
60689: PUSH
60690: LD_INT 2
60692: PUSH
60693: LD_INT 1
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 3
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 3
60713: PUSH
60714: LD_INT 1
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: LIST
60725: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60726: LD_ADDR_VAR 0 13
60730: PUSH
60731: LD_INT 3
60733: PUSH
60734: LD_INT 2
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 3
60743: PUSH
60744: LD_INT 3
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 2
60753: PUSH
60754: LD_INT 3
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: LIST
60765: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60766: LD_ADDR_VAR 0 14
60770: PUSH
60771: LD_INT 1
60773: PUSH
60774: LD_INT 3
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 0
60783: PUSH
60784: LD_INT 3
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 1
60793: NEG
60794: PUSH
60795: LD_INT 2
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: LIST
60806: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60807: LD_ADDR_VAR 0 15
60811: PUSH
60812: LD_INT 2
60814: NEG
60815: PUSH
60816: LD_INT 1
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 3
60825: NEG
60826: PUSH
60827: LD_INT 0
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 3
60836: NEG
60837: PUSH
60838: LD_INT 1
60840: NEG
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: LIST
60850: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60851: LD_ADDR_VAR 0 16
60855: PUSH
60856: LD_INT 2
60858: NEG
60859: PUSH
60860: LD_INT 3
60862: NEG
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 3
60870: NEG
60871: PUSH
60872: LD_INT 2
60874: NEG
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 3
60882: NEG
60883: PUSH
60884: LD_INT 3
60886: NEG
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: LIST
60896: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60897: LD_ADDR_VAR 0 17
60901: PUSH
60902: LD_INT 1
60904: NEG
60905: PUSH
60906: LD_INT 3
60908: NEG
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: LD_INT 3
60919: NEG
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 1
60927: PUSH
60928: LD_INT 2
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: LIST
60940: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60941: LD_ADDR_VAR 0 18
60945: PUSH
60946: LD_INT 2
60948: PUSH
60949: LD_INT 1
60951: NEG
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 3
60959: PUSH
60960: LD_INT 0
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 3
60969: PUSH
60970: LD_INT 1
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: LIST
60981: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60982: LD_ADDR_VAR 0 19
60986: PUSH
60987: LD_INT 3
60989: PUSH
60990: LD_INT 2
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 3
60999: PUSH
61000: LD_INT 3
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 2
61009: PUSH
61010: LD_INT 3
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: LIST
61021: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61022: LD_ADDR_VAR 0 20
61026: PUSH
61027: LD_INT 1
61029: PUSH
61030: LD_INT 3
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 0
61039: PUSH
61040: LD_INT 3
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 1
61049: NEG
61050: PUSH
61051: LD_INT 2
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: LIST
61062: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61063: LD_ADDR_VAR 0 21
61067: PUSH
61068: LD_INT 2
61070: NEG
61071: PUSH
61072: LD_INT 1
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 3
61081: NEG
61082: PUSH
61083: LD_INT 0
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 3
61092: NEG
61093: PUSH
61094: LD_INT 1
61096: NEG
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: LIST
61106: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61107: LD_ADDR_VAR 0 22
61111: PUSH
61112: LD_INT 2
61114: NEG
61115: PUSH
61116: LD_INT 3
61118: NEG
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 3
61126: NEG
61127: PUSH
61128: LD_INT 2
61130: NEG
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 3
61138: NEG
61139: PUSH
61140: LD_INT 3
61142: NEG
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: LIST
61152: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61153: LD_ADDR_VAR 0 23
61157: PUSH
61158: LD_INT 0
61160: PUSH
61161: LD_INT 3
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 1
61171: NEG
61172: PUSH
61173: LD_INT 4
61175: NEG
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 1
61183: PUSH
61184: LD_INT 3
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: LIST
61196: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61197: LD_ADDR_VAR 0 24
61201: PUSH
61202: LD_INT 3
61204: PUSH
61205: LD_INT 0
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 3
61214: PUSH
61215: LD_INT 1
61217: NEG
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 4
61225: PUSH
61226: LD_INT 1
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: LIST
61237: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61238: LD_ADDR_VAR 0 25
61242: PUSH
61243: LD_INT 3
61245: PUSH
61246: LD_INT 3
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 4
61255: PUSH
61256: LD_INT 3
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 3
61265: PUSH
61266: LD_INT 4
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: LIST
61277: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61278: LD_ADDR_VAR 0 26
61282: PUSH
61283: LD_INT 0
61285: PUSH
61286: LD_INT 3
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 1
61295: PUSH
61296: LD_INT 4
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 1
61305: NEG
61306: PUSH
61307: LD_INT 3
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: LIST
61318: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61319: LD_ADDR_VAR 0 27
61323: PUSH
61324: LD_INT 3
61326: NEG
61327: PUSH
61328: LD_INT 0
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 3
61337: NEG
61338: PUSH
61339: LD_INT 1
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 4
61348: NEG
61349: PUSH
61350: LD_INT 1
61352: NEG
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: LIST
61362: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61363: LD_ADDR_VAR 0 28
61367: PUSH
61368: LD_INT 3
61370: NEG
61371: PUSH
61372: LD_INT 3
61374: NEG
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 3
61382: NEG
61383: PUSH
61384: LD_INT 4
61386: NEG
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 4
61394: NEG
61395: PUSH
61396: LD_INT 3
61398: NEG
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: LIST
61408: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61409: LD_ADDR_VAR 0 29
61413: PUSH
61414: LD_INT 1
61416: NEG
61417: PUSH
61418: LD_INT 3
61420: NEG
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 0
61428: PUSH
61429: LD_INT 3
61431: NEG
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 1
61439: PUSH
61440: LD_INT 2
61442: NEG
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 1
61450: NEG
61451: PUSH
61452: LD_INT 4
61454: NEG
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 0
61462: PUSH
61463: LD_INT 4
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 1
61473: PUSH
61474: LD_INT 3
61476: NEG
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 1
61484: NEG
61485: PUSH
61486: LD_INT 5
61488: NEG
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: LD_INT 5
61499: NEG
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 1
61507: PUSH
61508: LD_INT 4
61510: NEG
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 1
61518: NEG
61519: PUSH
61520: LD_INT 6
61522: NEG
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 0
61530: PUSH
61531: LD_INT 6
61533: NEG
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 1
61541: PUSH
61542: LD_INT 5
61544: NEG
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61564: LD_ADDR_VAR 0 30
61568: PUSH
61569: LD_INT 2
61571: PUSH
61572: LD_INT 1
61574: NEG
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 3
61582: PUSH
61583: LD_INT 0
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 3
61592: PUSH
61593: LD_INT 1
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 3
61602: PUSH
61603: LD_INT 1
61605: NEG
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 4
61613: PUSH
61614: LD_INT 0
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 4
61623: PUSH
61624: LD_INT 1
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 4
61633: PUSH
61634: LD_INT 1
61636: NEG
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 5
61644: PUSH
61645: LD_INT 0
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 5
61654: PUSH
61655: LD_INT 1
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 5
61664: PUSH
61665: LD_INT 1
61667: NEG
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 6
61675: PUSH
61676: LD_INT 0
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 6
61685: PUSH
61686: LD_INT 1
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61707: LD_ADDR_VAR 0 31
61711: PUSH
61712: LD_INT 3
61714: PUSH
61715: LD_INT 2
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 3
61724: PUSH
61725: LD_INT 3
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 2
61734: PUSH
61735: LD_INT 3
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 4
61744: PUSH
61745: LD_INT 3
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 4
61754: PUSH
61755: LD_INT 4
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 3
61764: PUSH
61765: LD_INT 4
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 5
61774: PUSH
61775: LD_INT 4
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 5
61784: PUSH
61785: LD_INT 5
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 4
61794: PUSH
61795: LD_INT 5
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 6
61804: PUSH
61805: LD_INT 5
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 6
61814: PUSH
61815: LD_INT 6
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 5
61824: PUSH
61825: LD_INT 6
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61846: LD_ADDR_VAR 0 32
61850: PUSH
61851: LD_INT 1
61853: PUSH
61854: LD_INT 3
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 0
61863: PUSH
61864: LD_INT 3
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 1
61873: NEG
61874: PUSH
61875: LD_INT 2
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 1
61884: PUSH
61885: LD_INT 4
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 0
61894: PUSH
61895: LD_INT 4
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 1
61904: NEG
61905: PUSH
61906: LD_INT 3
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 1
61915: PUSH
61916: LD_INT 5
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 0
61925: PUSH
61926: LD_INT 5
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 1
61935: NEG
61936: PUSH
61937: LD_INT 4
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 1
61946: PUSH
61947: LD_INT 6
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 0
61956: PUSH
61957: LD_INT 6
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 1
61966: NEG
61967: PUSH
61968: LD_INT 5
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61989: LD_ADDR_VAR 0 33
61993: PUSH
61994: LD_INT 2
61996: NEG
61997: PUSH
61998: LD_INT 1
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 3
62007: NEG
62008: PUSH
62009: LD_INT 0
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 3
62018: NEG
62019: PUSH
62020: LD_INT 1
62022: NEG
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 3
62030: NEG
62031: PUSH
62032: LD_INT 1
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 4
62041: NEG
62042: PUSH
62043: LD_INT 0
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 4
62052: NEG
62053: PUSH
62054: LD_INT 1
62056: NEG
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 4
62064: NEG
62065: PUSH
62066: LD_INT 1
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 5
62075: NEG
62076: PUSH
62077: LD_INT 0
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 5
62086: NEG
62087: PUSH
62088: LD_INT 1
62090: NEG
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 5
62098: NEG
62099: PUSH
62100: LD_INT 1
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 6
62109: NEG
62110: PUSH
62111: LD_INT 0
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 6
62120: NEG
62121: PUSH
62122: LD_INT 1
62124: NEG
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62144: LD_ADDR_VAR 0 34
62148: PUSH
62149: LD_INT 2
62151: NEG
62152: PUSH
62153: LD_INT 3
62155: NEG
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 3
62163: NEG
62164: PUSH
62165: LD_INT 2
62167: NEG
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 3
62175: NEG
62176: PUSH
62177: LD_INT 3
62179: NEG
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 3
62187: NEG
62188: PUSH
62189: LD_INT 4
62191: NEG
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 4
62199: NEG
62200: PUSH
62201: LD_INT 3
62203: NEG
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 4
62211: NEG
62212: PUSH
62213: LD_INT 4
62215: NEG
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 4
62223: NEG
62224: PUSH
62225: LD_INT 5
62227: NEG
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 5
62235: NEG
62236: PUSH
62237: LD_INT 4
62239: NEG
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 5
62247: NEG
62248: PUSH
62249: LD_INT 5
62251: NEG
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 5
62259: NEG
62260: PUSH
62261: LD_INT 6
62263: NEG
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 6
62271: NEG
62272: PUSH
62273: LD_INT 5
62275: NEG
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 6
62283: NEG
62284: PUSH
62285: LD_INT 6
62287: NEG
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62307: LD_ADDR_VAR 0 41
62311: PUSH
62312: LD_INT 0
62314: PUSH
62315: LD_INT 2
62317: NEG
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 1
62325: NEG
62326: PUSH
62327: LD_INT 3
62329: NEG
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 1
62337: PUSH
62338: LD_INT 2
62340: NEG
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: LIST
62350: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62351: LD_ADDR_VAR 0 42
62355: PUSH
62356: LD_INT 2
62358: PUSH
62359: LD_INT 0
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 2
62368: PUSH
62369: LD_INT 1
62371: NEG
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 3
62379: PUSH
62380: LD_INT 1
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: LIST
62391: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62392: LD_ADDR_VAR 0 43
62396: PUSH
62397: LD_INT 2
62399: PUSH
62400: LD_INT 2
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 3
62409: PUSH
62410: LD_INT 2
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 2
62419: PUSH
62420: LD_INT 3
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: LIST
62431: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62432: LD_ADDR_VAR 0 44
62436: PUSH
62437: LD_INT 0
62439: PUSH
62440: LD_INT 2
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 1
62449: PUSH
62450: LD_INT 3
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 1
62459: NEG
62460: PUSH
62461: LD_INT 2
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: LIST
62472: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62473: LD_ADDR_VAR 0 45
62477: PUSH
62478: LD_INT 2
62480: NEG
62481: PUSH
62482: LD_INT 0
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 2
62491: NEG
62492: PUSH
62493: LD_INT 1
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 3
62502: NEG
62503: PUSH
62504: LD_INT 1
62506: NEG
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: LIST
62516: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62517: LD_ADDR_VAR 0 46
62521: PUSH
62522: LD_INT 2
62524: NEG
62525: PUSH
62526: LD_INT 2
62528: NEG
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 2
62536: NEG
62537: PUSH
62538: LD_INT 3
62540: NEG
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 3
62548: NEG
62549: PUSH
62550: LD_INT 2
62552: NEG
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: LIST
62562: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62563: LD_ADDR_VAR 0 47
62567: PUSH
62568: LD_INT 2
62570: NEG
62571: PUSH
62572: LD_INT 3
62574: NEG
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 1
62582: NEG
62583: PUSH
62584: LD_INT 3
62586: NEG
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62596: LD_ADDR_VAR 0 48
62600: PUSH
62601: LD_INT 1
62603: PUSH
62604: LD_INT 2
62606: NEG
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 2
62614: PUSH
62615: LD_INT 1
62617: NEG
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62627: LD_ADDR_VAR 0 49
62631: PUSH
62632: LD_INT 3
62634: PUSH
62635: LD_INT 1
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 3
62644: PUSH
62645: LD_INT 2
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62656: LD_ADDR_VAR 0 50
62660: PUSH
62661: LD_INT 2
62663: PUSH
62664: LD_INT 3
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 1
62673: PUSH
62674: LD_INT 3
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62685: LD_ADDR_VAR 0 51
62689: PUSH
62690: LD_INT 1
62692: NEG
62693: PUSH
62694: LD_INT 2
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 2
62703: NEG
62704: PUSH
62705: LD_INT 1
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62716: LD_ADDR_VAR 0 52
62720: PUSH
62721: LD_INT 3
62723: NEG
62724: PUSH
62725: LD_INT 1
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 3
62735: NEG
62736: PUSH
62737: LD_INT 2
62739: NEG
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62749: LD_ADDR_VAR 0 53
62753: PUSH
62754: LD_INT 1
62756: NEG
62757: PUSH
62758: LD_INT 3
62760: NEG
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 0
62768: PUSH
62769: LD_INT 3
62771: NEG
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 1
62779: PUSH
62780: LD_INT 2
62782: NEG
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: LIST
62792: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62793: LD_ADDR_VAR 0 54
62797: PUSH
62798: LD_INT 2
62800: PUSH
62801: LD_INT 1
62803: NEG
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 3
62811: PUSH
62812: LD_INT 0
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 3
62821: PUSH
62822: LD_INT 1
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: LIST
62833: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62834: LD_ADDR_VAR 0 55
62838: PUSH
62839: LD_INT 3
62841: PUSH
62842: LD_INT 2
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 3
62851: PUSH
62852: LD_INT 3
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 2
62861: PUSH
62862: LD_INT 3
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: LIST
62873: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62874: LD_ADDR_VAR 0 56
62878: PUSH
62879: LD_INT 1
62881: PUSH
62882: LD_INT 3
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 0
62891: PUSH
62892: LD_INT 3
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 1
62901: NEG
62902: PUSH
62903: LD_INT 2
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: LIST
62914: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62915: LD_ADDR_VAR 0 57
62919: PUSH
62920: LD_INT 2
62922: NEG
62923: PUSH
62924: LD_INT 1
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 3
62933: NEG
62934: PUSH
62935: LD_INT 0
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 3
62944: NEG
62945: PUSH
62946: LD_INT 1
62948: NEG
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: LIST
62958: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62959: LD_ADDR_VAR 0 58
62963: PUSH
62964: LD_INT 2
62966: NEG
62967: PUSH
62968: LD_INT 3
62970: NEG
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 3
62978: NEG
62979: PUSH
62980: LD_INT 2
62982: NEG
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 3
62990: NEG
62991: PUSH
62992: LD_INT 3
62994: NEG
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: LIST
63004: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63005: LD_ADDR_VAR 0 59
63009: PUSH
63010: LD_INT 1
63012: NEG
63013: PUSH
63014: LD_INT 2
63016: NEG
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 0
63024: PUSH
63025: LD_INT 2
63027: NEG
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 1
63035: PUSH
63036: LD_INT 1
63038: NEG
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: LIST
63048: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63049: LD_ADDR_VAR 0 60
63053: PUSH
63054: LD_INT 1
63056: PUSH
63057: LD_INT 1
63059: NEG
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 2
63067: PUSH
63068: LD_INT 0
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: LD_INT 2
63077: PUSH
63078: LD_INT 1
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: LIST
63089: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63090: LD_ADDR_VAR 0 61
63094: PUSH
63095: LD_INT 2
63097: PUSH
63098: LD_INT 1
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 2
63107: PUSH
63108: LD_INT 2
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 1
63117: PUSH
63118: LD_INT 2
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: LIST
63129: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63130: LD_ADDR_VAR 0 62
63134: PUSH
63135: LD_INT 1
63137: PUSH
63138: LD_INT 2
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 0
63147: PUSH
63148: LD_INT 2
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 1
63157: NEG
63158: PUSH
63159: LD_INT 1
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: LIST
63170: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63171: LD_ADDR_VAR 0 63
63175: PUSH
63176: LD_INT 1
63178: NEG
63179: PUSH
63180: LD_INT 1
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 2
63189: NEG
63190: PUSH
63191: LD_INT 0
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 2
63200: NEG
63201: PUSH
63202: LD_INT 1
63204: NEG
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: LIST
63214: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63215: LD_ADDR_VAR 0 64
63219: PUSH
63220: LD_INT 1
63222: NEG
63223: PUSH
63224: LD_INT 2
63226: NEG
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 2
63234: NEG
63235: PUSH
63236: LD_INT 1
63238: NEG
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 2
63246: NEG
63247: PUSH
63248: LD_INT 2
63250: NEG
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: LIST
63260: ST_TO_ADDR
// end ; 2 :
63261: GO 66527
63263: LD_INT 2
63265: DOUBLE
63266: EQUAL
63267: IFTRUE 63271
63269: GO 66526
63271: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63272: LD_ADDR_VAR 0 29
63276: PUSH
63277: LD_INT 4
63279: PUSH
63280: LD_INT 0
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 4
63289: PUSH
63290: LD_INT 1
63292: NEG
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 5
63300: PUSH
63301: LD_INT 0
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 5
63310: PUSH
63311: LD_INT 1
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 4
63320: PUSH
63321: LD_INT 1
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 3
63330: PUSH
63331: LD_INT 0
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 3
63340: PUSH
63341: LD_INT 1
63343: NEG
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 3
63351: PUSH
63352: LD_INT 2
63354: NEG
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 5
63362: PUSH
63363: LD_INT 2
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 3
63372: PUSH
63373: LD_INT 3
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 3
63382: PUSH
63383: LD_INT 2
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 4
63392: PUSH
63393: LD_INT 3
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 4
63402: PUSH
63403: LD_INT 4
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 3
63412: PUSH
63413: LD_INT 4
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 2
63422: PUSH
63423: LD_INT 3
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 2
63432: PUSH
63433: LD_INT 2
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 4
63442: PUSH
63443: LD_INT 2
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 2
63452: PUSH
63453: LD_INT 4
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 0
63462: PUSH
63463: LD_INT 4
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 0
63472: PUSH
63473: LD_INT 3
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 1
63482: PUSH
63483: LD_INT 4
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: LD_INT 1
63492: PUSH
63493: LD_INT 5
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 0
63502: PUSH
63503: LD_INT 5
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 1
63512: NEG
63513: PUSH
63514: LD_INT 4
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 1
63523: NEG
63524: PUSH
63525: LD_INT 3
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 2
63534: PUSH
63535: LD_INT 5
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 2
63544: NEG
63545: PUSH
63546: LD_INT 3
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 3
63555: NEG
63556: PUSH
63557: LD_INT 0
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 3
63566: NEG
63567: PUSH
63568: LD_INT 1
63570: NEG
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 2
63578: NEG
63579: PUSH
63580: LD_INT 0
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 2
63589: NEG
63590: PUSH
63591: LD_INT 1
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 3
63600: NEG
63601: PUSH
63602: LD_INT 1
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 4
63611: NEG
63612: PUSH
63613: LD_INT 0
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 4
63622: NEG
63623: PUSH
63624: LD_INT 1
63626: NEG
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 4
63634: NEG
63635: PUSH
63636: LD_INT 2
63638: NEG
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 2
63646: NEG
63647: PUSH
63648: LD_INT 2
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 4
63657: NEG
63658: PUSH
63659: LD_INT 4
63661: NEG
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 4
63669: NEG
63670: PUSH
63671: LD_INT 5
63673: NEG
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 3
63681: NEG
63682: PUSH
63683: LD_INT 4
63685: NEG
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 3
63693: NEG
63694: PUSH
63695: LD_INT 3
63697: NEG
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 4
63705: NEG
63706: PUSH
63707: LD_INT 3
63709: NEG
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 5
63717: NEG
63718: PUSH
63719: LD_INT 4
63721: NEG
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 5
63729: NEG
63730: PUSH
63731: LD_INT 5
63733: NEG
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 3
63741: NEG
63742: PUSH
63743: LD_INT 5
63745: NEG
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 5
63753: NEG
63754: PUSH
63755: LD_INT 3
63757: NEG
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: LIST
63783: LIST
63784: LIST
63785: LIST
63786: LIST
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: LIST
63801: LIST
63802: LIST
63803: LIST
63804: LIST
63805: LIST
63806: LIST
63807: LIST
63808: LIST
63809: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63810: LD_ADDR_VAR 0 30
63814: PUSH
63815: LD_INT 4
63817: PUSH
63818: LD_INT 4
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 4
63827: PUSH
63828: LD_INT 3
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 5
63837: PUSH
63838: LD_INT 4
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 5
63847: PUSH
63848: LD_INT 5
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 4
63857: PUSH
63858: LD_INT 5
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 3
63867: PUSH
63868: LD_INT 4
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 3
63877: PUSH
63878: LD_INT 3
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 5
63887: PUSH
63888: LD_INT 3
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 3
63897: PUSH
63898: LD_INT 5
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 0
63907: PUSH
63908: LD_INT 3
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 0
63917: PUSH
63918: LD_INT 2
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 1
63927: PUSH
63928: LD_INT 3
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 1
63937: PUSH
63938: LD_INT 4
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 0
63947: PUSH
63948: LD_INT 4
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 1
63957: NEG
63958: PUSH
63959: LD_INT 3
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 1
63968: NEG
63969: PUSH
63970: LD_INT 2
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 2
63979: PUSH
63980: LD_INT 4
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 2
63989: NEG
63990: PUSH
63991: LD_INT 2
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 4
64000: NEG
64001: PUSH
64002: LD_INT 0
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 4
64011: NEG
64012: PUSH
64013: LD_INT 1
64015: NEG
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 3
64023: NEG
64024: PUSH
64025: LD_INT 0
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 3
64034: NEG
64035: PUSH
64036: LD_INT 1
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 4
64045: NEG
64046: PUSH
64047: LD_INT 1
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 5
64056: NEG
64057: PUSH
64058: LD_INT 0
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 5
64067: NEG
64068: PUSH
64069: LD_INT 1
64071: NEG
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 5
64079: NEG
64080: PUSH
64081: LD_INT 2
64083: NEG
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PUSH
64089: LD_INT 3
64091: NEG
64092: PUSH
64093: LD_INT 2
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 3
64102: NEG
64103: PUSH
64104: LD_INT 3
64106: NEG
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 3
64114: NEG
64115: PUSH
64116: LD_INT 4
64118: NEG
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 2
64126: NEG
64127: PUSH
64128: LD_INT 3
64130: NEG
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 2
64138: NEG
64139: PUSH
64140: LD_INT 2
64142: NEG
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 3
64150: NEG
64151: PUSH
64152: LD_INT 2
64154: NEG
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 4
64162: NEG
64163: PUSH
64164: LD_INT 3
64166: NEG
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 4
64174: NEG
64175: PUSH
64176: LD_INT 4
64178: NEG
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 2
64186: NEG
64187: PUSH
64188: LD_INT 4
64190: NEG
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 4
64198: NEG
64199: PUSH
64200: LD_INT 2
64202: NEG
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 0
64210: PUSH
64211: LD_INT 4
64213: NEG
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 0
64221: PUSH
64222: LD_INT 5
64224: NEG
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 1
64232: PUSH
64233: LD_INT 4
64235: NEG
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 1
64243: PUSH
64244: LD_INT 3
64246: NEG
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 0
64254: PUSH
64255: LD_INT 3
64257: NEG
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: LD_INT 1
64265: NEG
64266: PUSH
64267: LD_INT 4
64269: NEG
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: LD_INT 1
64277: NEG
64278: PUSH
64279: LD_INT 5
64281: NEG
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 2
64289: PUSH
64290: LD_INT 3
64292: NEG
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 2
64300: NEG
64301: PUSH
64302: LD_INT 5
64304: NEG
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64357: LD_ADDR_VAR 0 31
64361: PUSH
64362: LD_INT 0
64364: PUSH
64365: LD_INT 4
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 0
64374: PUSH
64375: LD_INT 3
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 1
64384: PUSH
64385: LD_INT 4
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 1
64394: PUSH
64395: LD_INT 5
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 0
64404: PUSH
64405: LD_INT 5
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 1
64414: NEG
64415: PUSH
64416: LD_INT 4
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 1
64425: NEG
64426: PUSH
64427: LD_INT 3
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 2
64436: PUSH
64437: LD_INT 5
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 2
64446: NEG
64447: PUSH
64448: LD_INT 3
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 3
64457: NEG
64458: PUSH
64459: LD_INT 0
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 3
64468: NEG
64469: PUSH
64470: LD_INT 1
64472: NEG
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 2
64480: NEG
64481: PUSH
64482: LD_INT 0
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 2
64491: NEG
64492: PUSH
64493: LD_INT 1
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 3
64502: NEG
64503: PUSH
64504: LD_INT 1
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 4
64513: NEG
64514: PUSH
64515: LD_INT 0
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 4
64524: NEG
64525: PUSH
64526: LD_INT 1
64528: NEG
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 4
64536: NEG
64537: PUSH
64538: LD_INT 2
64540: NEG
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 2
64548: NEG
64549: PUSH
64550: LD_INT 2
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 4
64559: NEG
64560: PUSH
64561: LD_INT 4
64563: NEG
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 4
64571: NEG
64572: PUSH
64573: LD_INT 5
64575: NEG
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 3
64583: NEG
64584: PUSH
64585: LD_INT 4
64587: NEG
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 3
64595: NEG
64596: PUSH
64597: LD_INT 3
64599: NEG
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 4
64607: NEG
64608: PUSH
64609: LD_INT 3
64611: NEG
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 5
64619: NEG
64620: PUSH
64621: LD_INT 4
64623: NEG
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 5
64631: NEG
64632: PUSH
64633: LD_INT 5
64635: NEG
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: LD_INT 3
64643: NEG
64644: PUSH
64645: LD_INT 5
64647: NEG
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 5
64655: NEG
64656: PUSH
64657: LD_INT 3
64659: NEG
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 0
64667: PUSH
64668: LD_INT 3
64670: NEG
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 0
64678: PUSH
64679: LD_INT 4
64681: NEG
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 1
64689: PUSH
64690: LD_INT 3
64692: NEG
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 1
64700: PUSH
64701: LD_INT 2
64703: NEG
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 0
64711: PUSH
64712: LD_INT 2
64714: NEG
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 1
64722: NEG
64723: PUSH
64724: LD_INT 3
64726: NEG
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 1
64734: NEG
64735: PUSH
64736: LD_INT 4
64738: NEG
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 2
64746: PUSH
64747: LD_INT 2
64749: NEG
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 2
64757: NEG
64758: PUSH
64759: LD_INT 4
64761: NEG
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 4
64769: PUSH
64770: LD_INT 0
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 4
64779: PUSH
64780: LD_INT 1
64782: NEG
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 5
64790: PUSH
64791: LD_INT 0
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 5
64800: PUSH
64801: LD_INT 1
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 4
64810: PUSH
64811: LD_INT 1
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: LD_INT 3
64820: PUSH
64821: LD_INT 0
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: PUSH
64828: LD_INT 3
64830: PUSH
64831: LD_INT 1
64833: NEG
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 3
64841: PUSH
64842: LD_INT 2
64844: NEG
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 5
64852: PUSH
64853: LD_INT 2
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: LIST
64864: LIST
64865: LIST
64866: LIST
64867: LIST
64868: LIST
64869: LIST
64870: LIST
64871: LIST
64872: LIST
64873: LIST
64874: LIST
64875: LIST
64876: LIST
64877: LIST
64878: LIST
64879: LIST
64880: LIST
64881: LIST
64882: LIST
64883: LIST
64884: LIST
64885: LIST
64886: LIST
64887: LIST
64888: LIST
64889: LIST
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64907: LD_ADDR_VAR 0 32
64911: PUSH
64912: LD_INT 4
64914: NEG
64915: PUSH
64916: LD_INT 0
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 4
64925: NEG
64926: PUSH
64927: LD_INT 1
64929: NEG
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 3
64937: NEG
64938: PUSH
64939: LD_INT 0
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 3
64948: NEG
64949: PUSH
64950: LD_INT 1
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 4
64959: NEG
64960: PUSH
64961: LD_INT 1
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: LD_INT 5
64970: NEG
64971: PUSH
64972: LD_INT 0
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 5
64981: NEG
64982: PUSH
64983: LD_INT 1
64985: NEG
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: LD_INT 5
64993: NEG
64994: PUSH
64995: LD_INT 2
64997: NEG
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 3
65005: NEG
65006: PUSH
65007: LD_INT 2
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 3
65016: NEG
65017: PUSH
65018: LD_INT 3
65020: NEG
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: LD_INT 3
65028: NEG
65029: PUSH
65030: LD_INT 4
65032: NEG
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 2
65040: NEG
65041: PUSH
65042: LD_INT 3
65044: NEG
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 2
65052: NEG
65053: PUSH
65054: LD_INT 2
65056: NEG
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 3
65064: NEG
65065: PUSH
65066: LD_INT 2
65068: NEG
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: LD_INT 4
65076: NEG
65077: PUSH
65078: LD_INT 3
65080: NEG
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 4
65088: NEG
65089: PUSH
65090: LD_INT 4
65092: NEG
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 2
65100: NEG
65101: PUSH
65102: LD_INT 4
65104: NEG
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 4
65112: NEG
65113: PUSH
65114: LD_INT 2
65116: NEG
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 0
65124: PUSH
65125: LD_INT 4
65127: NEG
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 0
65135: PUSH
65136: LD_INT 5
65138: NEG
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 1
65146: PUSH
65147: LD_INT 4
65149: NEG
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 1
65157: PUSH
65158: LD_INT 3
65160: NEG
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 0
65168: PUSH
65169: LD_INT 3
65171: NEG
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 1
65179: NEG
65180: PUSH
65181: LD_INT 4
65183: NEG
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 1
65191: NEG
65192: PUSH
65193: LD_INT 5
65195: NEG
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 2
65203: PUSH
65204: LD_INT 3
65206: NEG
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 2
65214: NEG
65215: PUSH
65216: LD_INT 5
65218: NEG
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 3
65226: PUSH
65227: LD_INT 0
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 3
65236: PUSH
65237: LD_INT 1
65239: NEG
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 4
65247: PUSH
65248: LD_INT 0
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 4
65257: PUSH
65258: LD_INT 1
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 3
65267: PUSH
65268: LD_INT 1
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 2
65277: PUSH
65278: LD_INT 0
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: LD_INT 2
65287: PUSH
65288: LD_INT 1
65290: NEG
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 2
65298: PUSH
65299: LD_INT 2
65301: NEG
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PUSH
65307: LD_INT 4
65309: PUSH
65310: LD_INT 2
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 4
65319: PUSH
65320: LD_INT 4
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 4
65329: PUSH
65330: LD_INT 3
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 5
65339: PUSH
65340: LD_INT 4
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 5
65349: PUSH
65350: LD_INT 5
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 4
65359: PUSH
65360: LD_INT 5
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 3
65369: PUSH
65370: LD_INT 4
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 3
65379: PUSH
65380: LD_INT 3
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 5
65389: PUSH
65390: LD_INT 3
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 3
65399: PUSH
65400: LD_INT 5
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: LIST
65411: LIST
65412: LIST
65413: LIST
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: LIST
65420: LIST
65421: LIST
65422: LIST
65423: LIST
65424: LIST
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65454: LD_ADDR_VAR 0 33
65458: PUSH
65459: LD_INT 4
65461: NEG
65462: PUSH
65463: LD_INT 4
65465: NEG
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: LD_INT 4
65473: NEG
65474: PUSH
65475: LD_INT 5
65477: NEG
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 3
65485: NEG
65486: PUSH
65487: LD_INT 4
65489: NEG
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 3
65497: NEG
65498: PUSH
65499: LD_INT 3
65501: NEG
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: LD_INT 4
65509: NEG
65510: PUSH
65511: LD_INT 3
65513: NEG
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 5
65521: NEG
65522: PUSH
65523: LD_INT 4
65525: NEG
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: LD_INT 5
65533: NEG
65534: PUSH
65535: LD_INT 5
65537: NEG
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 3
65545: NEG
65546: PUSH
65547: LD_INT 5
65549: NEG
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: LD_INT 5
65557: NEG
65558: PUSH
65559: LD_INT 3
65561: NEG
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 0
65569: PUSH
65570: LD_INT 3
65572: NEG
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 0
65580: PUSH
65581: LD_INT 4
65583: NEG
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 1
65591: PUSH
65592: LD_INT 3
65594: NEG
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 1
65602: PUSH
65603: LD_INT 2
65605: NEG
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 0
65613: PUSH
65614: LD_INT 2
65616: NEG
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 1
65624: NEG
65625: PUSH
65626: LD_INT 3
65628: NEG
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: LD_INT 1
65636: NEG
65637: PUSH
65638: LD_INT 4
65640: NEG
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 2
65648: PUSH
65649: LD_INT 2
65651: NEG
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 2
65659: NEG
65660: PUSH
65661: LD_INT 4
65663: NEG
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 4
65671: PUSH
65672: LD_INT 0
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 4
65681: PUSH
65682: LD_INT 1
65684: NEG
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: LD_INT 5
65692: PUSH
65693: LD_INT 0
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 5
65702: PUSH
65703: LD_INT 1
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 4
65712: PUSH
65713: LD_INT 1
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: PUSH
65720: LD_INT 3
65722: PUSH
65723: LD_INT 0
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 3
65732: PUSH
65733: LD_INT 1
65735: NEG
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 3
65743: PUSH
65744: LD_INT 2
65746: NEG
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: LD_INT 5
65754: PUSH
65755: LD_INT 2
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: LD_INT 3
65764: PUSH
65765: LD_INT 3
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: LD_INT 3
65774: PUSH
65775: LD_INT 2
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 4
65784: PUSH
65785: LD_INT 3
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 4
65794: PUSH
65795: LD_INT 4
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 3
65804: PUSH
65805: LD_INT 4
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 2
65814: PUSH
65815: LD_INT 3
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: LD_INT 2
65824: PUSH
65825: LD_INT 2
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 4
65834: PUSH
65835: LD_INT 2
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 2
65844: PUSH
65845: LD_INT 4
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 0
65854: PUSH
65855: LD_INT 4
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 0
65864: PUSH
65865: LD_INT 3
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 1
65874: PUSH
65875: LD_INT 4
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 1
65884: PUSH
65885: LD_INT 5
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 0
65894: PUSH
65895: LD_INT 5
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 1
65904: NEG
65905: PUSH
65906: LD_INT 4
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 1
65915: NEG
65916: PUSH
65917: LD_INT 3
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 2
65926: PUSH
65927: LD_INT 5
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: LD_INT 2
65936: NEG
65937: PUSH
65938: LD_INT 3
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: LIST
65949: LIST
65950: LIST
65951: LIST
65952: LIST
65953: LIST
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: LIST
65988: LIST
65989: LIST
65990: LIST
65991: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65992: LD_ADDR_VAR 0 34
65996: PUSH
65997: LD_INT 0
65999: PUSH
66000: LD_INT 4
66002: NEG
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 0
66010: PUSH
66011: LD_INT 5
66013: NEG
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: LD_INT 1
66021: PUSH
66022: LD_INT 4
66024: NEG
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 1
66032: PUSH
66033: LD_INT 3
66035: NEG
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 0
66043: PUSH
66044: LD_INT 3
66046: NEG
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 1
66054: NEG
66055: PUSH
66056: LD_INT 4
66058: NEG
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: PUSH
66064: LD_INT 1
66066: NEG
66067: PUSH
66068: LD_INT 5
66070: NEG
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: PUSH
66076: LD_INT 2
66078: PUSH
66079: LD_INT 3
66081: NEG
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 2
66089: NEG
66090: PUSH
66091: LD_INT 5
66093: NEG
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 3
66101: PUSH
66102: LD_INT 0
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 3
66111: PUSH
66112: LD_INT 1
66114: NEG
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: LD_INT 4
66122: PUSH
66123: LD_INT 0
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: LD_INT 4
66132: PUSH
66133: LD_INT 1
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 3
66142: PUSH
66143: LD_INT 1
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 2
66152: PUSH
66153: LD_INT 0
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 2
66162: PUSH
66163: LD_INT 1
66165: NEG
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: LD_INT 2
66173: PUSH
66174: LD_INT 2
66176: NEG
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: PUSH
66182: LD_INT 4
66184: PUSH
66185: LD_INT 2
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 4
66194: PUSH
66195: LD_INT 4
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 4
66204: PUSH
66205: LD_INT 3
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: LD_INT 5
66214: PUSH
66215: LD_INT 4
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: LD_INT 5
66224: PUSH
66225: LD_INT 5
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 4
66234: PUSH
66235: LD_INT 5
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: LD_INT 3
66244: PUSH
66245: LD_INT 4
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 3
66254: PUSH
66255: LD_INT 3
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 5
66264: PUSH
66265: LD_INT 3
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 3
66274: PUSH
66275: LD_INT 5
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 0
66284: PUSH
66285: LD_INT 3
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 0
66294: PUSH
66295: LD_INT 2
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 1
66304: PUSH
66305: LD_INT 3
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 1
66314: PUSH
66315: LD_INT 4
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 0
66324: PUSH
66325: LD_INT 4
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 1
66334: NEG
66335: PUSH
66336: LD_INT 3
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: PUSH
66343: LD_INT 1
66345: NEG
66346: PUSH
66347: LD_INT 2
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: LD_INT 2
66356: PUSH
66357: LD_INT 4
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 2
66366: NEG
66367: PUSH
66368: LD_INT 2
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 4
66377: NEG
66378: PUSH
66379: LD_INT 0
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 4
66388: NEG
66389: PUSH
66390: LD_INT 1
66392: NEG
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 3
66400: NEG
66401: PUSH
66402: LD_INT 0
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 3
66411: NEG
66412: PUSH
66413: LD_INT 1
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: LD_INT 4
66422: NEG
66423: PUSH
66424: LD_INT 1
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 5
66433: NEG
66434: PUSH
66435: LD_INT 0
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 5
66444: NEG
66445: PUSH
66446: LD_INT 1
66448: NEG
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 5
66456: NEG
66457: PUSH
66458: LD_INT 2
66460: NEG
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: PUSH
66466: LD_INT 3
66468: NEG
66469: PUSH
66470: LD_INT 2
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: LIST
66493: LIST
66494: LIST
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: LIST
66501: LIST
66502: LIST
66503: LIST
66504: LIST
66505: LIST
66506: LIST
66507: LIST
66508: LIST
66509: LIST
66510: LIST
66511: LIST
66512: LIST
66513: LIST
66514: LIST
66515: LIST
66516: LIST
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: LIST
66523: ST_TO_ADDR
// end ; end ;
66524: GO 66527
66526: POP
// case btype of b_depot , b_warehouse :
66527: LD_VAR 0 1
66531: PUSH
66532: LD_INT 0
66534: DOUBLE
66535: EQUAL
66536: IFTRUE 66546
66538: LD_INT 1
66540: DOUBLE
66541: EQUAL
66542: IFTRUE 66546
66544: GO 66747
66546: POP
// case nation of nation_american :
66547: LD_VAR 0 5
66551: PUSH
66552: LD_INT 1
66554: DOUBLE
66555: EQUAL
66556: IFTRUE 66560
66558: GO 66616
66560: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66561: LD_ADDR_VAR 0 9
66565: PUSH
66566: LD_VAR 0 11
66570: PUSH
66571: LD_VAR 0 12
66575: PUSH
66576: LD_VAR 0 13
66580: PUSH
66581: LD_VAR 0 14
66585: PUSH
66586: LD_VAR 0 15
66590: PUSH
66591: LD_VAR 0 16
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: LIST
66602: LIST
66603: PUSH
66604: LD_VAR 0 4
66608: PUSH
66609: LD_INT 1
66611: PLUS
66612: ARRAY
66613: ST_TO_ADDR
66614: GO 66745
66616: LD_INT 2
66618: DOUBLE
66619: EQUAL
66620: IFTRUE 66624
66622: GO 66680
66624: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66625: LD_ADDR_VAR 0 9
66629: PUSH
66630: LD_VAR 0 17
66634: PUSH
66635: LD_VAR 0 18
66639: PUSH
66640: LD_VAR 0 19
66644: PUSH
66645: LD_VAR 0 20
66649: PUSH
66650: LD_VAR 0 21
66654: PUSH
66655: LD_VAR 0 22
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: PUSH
66668: LD_VAR 0 4
66672: PUSH
66673: LD_INT 1
66675: PLUS
66676: ARRAY
66677: ST_TO_ADDR
66678: GO 66745
66680: LD_INT 3
66682: DOUBLE
66683: EQUAL
66684: IFTRUE 66688
66686: GO 66744
66688: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66689: LD_ADDR_VAR 0 9
66693: PUSH
66694: LD_VAR 0 23
66698: PUSH
66699: LD_VAR 0 24
66703: PUSH
66704: LD_VAR 0 25
66708: PUSH
66709: LD_VAR 0 26
66713: PUSH
66714: LD_VAR 0 27
66718: PUSH
66719: LD_VAR 0 28
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: PUSH
66732: LD_VAR 0 4
66736: PUSH
66737: LD_INT 1
66739: PLUS
66740: ARRAY
66741: ST_TO_ADDR
66742: GO 66745
66744: POP
66745: GO 67300
66747: LD_INT 2
66749: DOUBLE
66750: EQUAL
66751: IFTRUE 66761
66753: LD_INT 3
66755: DOUBLE
66756: EQUAL
66757: IFTRUE 66761
66759: GO 66817
66761: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66762: LD_ADDR_VAR 0 9
66766: PUSH
66767: LD_VAR 0 29
66771: PUSH
66772: LD_VAR 0 30
66776: PUSH
66777: LD_VAR 0 31
66781: PUSH
66782: LD_VAR 0 32
66786: PUSH
66787: LD_VAR 0 33
66791: PUSH
66792: LD_VAR 0 34
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: PUSH
66805: LD_VAR 0 4
66809: PUSH
66810: LD_INT 1
66812: PLUS
66813: ARRAY
66814: ST_TO_ADDR
66815: GO 67300
66817: LD_INT 16
66819: DOUBLE
66820: EQUAL
66821: IFTRUE 66879
66823: LD_INT 17
66825: DOUBLE
66826: EQUAL
66827: IFTRUE 66879
66829: LD_INT 18
66831: DOUBLE
66832: EQUAL
66833: IFTRUE 66879
66835: LD_INT 19
66837: DOUBLE
66838: EQUAL
66839: IFTRUE 66879
66841: LD_INT 22
66843: DOUBLE
66844: EQUAL
66845: IFTRUE 66879
66847: LD_INT 20
66849: DOUBLE
66850: EQUAL
66851: IFTRUE 66879
66853: LD_INT 21
66855: DOUBLE
66856: EQUAL
66857: IFTRUE 66879
66859: LD_INT 23
66861: DOUBLE
66862: EQUAL
66863: IFTRUE 66879
66865: LD_INT 24
66867: DOUBLE
66868: EQUAL
66869: IFTRUE 66879
66871: LD_INT 25
66873: DOUBLE
66874: EQUAL
66875: IFTRUE 66879
66877: GO 66935
66879: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66880: LD_ADDR_VAR 0 9
66884: PUSH
66885: LD_VAR 0 35
66889: PUSH
66890: LD_VAR 0 36
66894: PUSH
66895: LD_VAR 0 37
66899: PUSH
66900: LD_VAR 0 38
66904: PUSH
66905: LD_VAR 0 39
66909: PUSH
66910: LD_VAR 0 40
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: PUSH
66923: LD_VAR 0 4
66927: PUSH
66928: LD_INT 1
66930: PLUS
66931: ARRAY
66932: ST_TO_ADDR
66933: GO 67300
66935: LD_INT 6
66937: DOUBLE
66938: EQUAL
66939: IFTRUE 66991
66941: LD_INT 7
66943: DOUBLE
66944: EQUAL
66945: IFTRUE 66991
66947: LD_INT 8
66949: DOUBLE
66950: EQUAL
66951: IFTRUE 66991
66953: LD_INT 13
66955: DOUBLE
66956: EQUAL
66957: IFTRUE 66991
66959: LD_INT 12
66961: DOUBLE
66962: EQUAL
66963: IFTRUE 66991
66965: LD_INT 15
66967: DOUBLE
66968: EQUAL
66969: IFTRUE 66991
66971: LD_INT 11
66973: DOUBLE
66974: EQUAL
66975: IFTRUE 66991
66977: LD_INT 14
66979: DOUBLE
66980: EQUAL
66981: IFTRUE 66991
66983: LD_INT 10
66985: DOUBLE
66986: EQUAL
66987: IFTRUE 66991
66989: GO 67047
66991: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66992: LD_ADDR_VAR 0 9
66996: PUSH
66997: LD_VAR 0 41
67001: PUSH
67002: LD_VAR 0 42
67006: PUSH
67007: LD_VAR 0 43
67011: PUSH
67012: LD_VAR 0 44
67016: PUSH
67017: LD_VAR 0 45
67021: PUSH
67022: LD_VAR 0 46
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: LIST
67031: LIST
67032: LIST
67033: LIST
67034: PUSH
67035: LD_VAR 0 4
67039: PUSH
67040: LD_INT 1
67042: PLUS
67043: ARRAY
67044: ST_TO_ADDR
67045: GO 67300
67047: LD_INT 36
67049: DOUBLE
67050: EQUAL
67051: IFTRUE 67055
67053: GO 67111
67055: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67056: LD_ADDR_VAR 0 9
67060: PUSH
67061: LD_VAR 0 47
67065: PUSH
67066: LD_VAR 0 48
67070: PUSH
67071: LD_VAR 0 49
67075: PUSH
67076: LD_VAR 0 50
67080: PUSH
67081: LD_VAR 0 51
67085: PUSH
67086: LD_VAR 0 52
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: PUSH
67099: LD_VAR 0 4
67103: PUSH
67104: LD_INT 1
67106: PLUS
67107: ARRAY
67108: ST_TO_ADDR
67109: GO 67300
67111: LD_INT 4
67113: DOUBLE
67114: EQUAL
67115: IFTRUE 67137
67117: LD_INT 5
67119: DOUBLE
67120: EQUAL
67121: IFTRUE 67137
67123: LD_INT 34
67125: DOUBLE
67126: EQUAL
67127: IFTRUE 67137
67129: LD_INT 37
67131: DOUBLE
67132: EQUAL
67133: IFTRUE 67137
67135: GO 67193
67137: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67138: LD_ADDR_VAR 0 9
67142: PUSH
67143: LD_VAR 0 53
67147: PUSH
67148: LD_VAR 0 54
67152: PUSH
67153: LD_VAR 0 55
67157: PUSH
67158: LD_VAR 0 56
67162: PUSH
67163: LD_VAR 0 57
67167: PUSH
67168: LD_VAR 0 58
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: PUSH
67181: LD_VAR 0 4
67185: PUSH
67186: LD_INT 1
67188: PLUS
67189: ARRAY
67190: ST_TO_ADDR
67191: GO 67300
67193: LD_INT 31
67195: DOUBLE
67196: EQUAL
67197: IFTRUE 67243
67199: LD_INT 32
67201: DOUBLE
67202: EQUAL
67203: IFTRUE 67243
67205: LD_INT 33
67207: DOUBLE
67208: EQUAL
67209: IFTRUE 67243
67211: LD_INT 27
67213: DOUBLE
67214: EQUAL
67215: IFTRUE 67243
67217: LD_INT 26
67219: DOUBLE
67220: EQUAL
67221: IFTRUE 67243
67223: LD_INT 28
67225: DOUBLE
67226: EQUAL
67227: IFTRUE 67243
67229: LD_INT 29
67231: DOUBLE
67232: EQUAL
67233: IFTRUE 67243
67235: LD_INT 30
67237: DOUBLE
67238: EQUAL
67239: IFTRUE 67243
67241: GO 67299
67243: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67244: LD_ADDR_VAR 0 9
67248: PUSH
67249: LD_VAR 0 59
67253: PUSH
67254: LD_VAR 0 60
67258: PUSH
67259: LD_VAR 0 61
67263: PUSH
67264: LD_VAR 0 62
67268: PUSH
67269: LD_VAR 0 63
67273: PUSH
67274: LD_VAR 0 64
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: PUSH
67287: LD_VAR 0 4
67291: PUSH
67292: LD_INT 1
67294: PLUS
67295: ARRAY
67296: ST_TO_ADDR
67297: GO 67300
67299: POP
// temp_list2 = [ ] ;
67300: LD_ADDR_VAR 0 10
67304: PUSH
67305: EMPTY
67306: ST_TO_ADDR
// for i in temp_list do
67307: LD_ADDR_VAR 0 8
67311: PUSH
67312: LD_VAR 0 9
67316: PUSH
67317: FOR_IN
67318: IFFALSE 67370
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67320: LD_ADDR_VAR 0 10
67324: PUSH
67325: LD_VAR 0 10
67329: PUSH
67330: LD_VAR 0 8
67334: PUSH
67335: LD_INT 1
67337: ARRAY
67338: PUSH
67339: LD_VAR 0 2
67343: PLUS
67344: PUSH
67345: LD_VAR 0 8
67349: PUSH
67350: LD_INT 2
67352: ARRAY
67353: PUSH
67354: LD_VAR 0 3
67358: PLUS
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: EMPTY
67365: LIST
67366: ADD
67367: ST_TO_ADDR
67368: GO 67317
67370: POP
67371: POP
// result = temp_list2 ;
67372: LD_ADDR_VAR 0 7
67376: PUSH
67377: LD_VAR 0 10
67381: ST_TO_ADDR
// end ;
67382: LD_VAR 0 7
67386: RET
// export function EnemyInRange ( unit , dist ) ; begin
67387: LD_INT 0
67389: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67390: LD_ADDR_VAR 0 3
67394: PUSH
67395: LD_VAR 0 1
67399: PPUSH
67400: CALL_OW 255
67404: PPUSH
67405: LD_VAR 0 1
67409: PPUSH
67410: CALL_OW 250
67414: PPUSH
67415: LD_VAR 0 1
67419: PPUSH
67420: CALL_OW 251
67424: PPUSH
67425: LD_VAR 0 2
67429: PPUSH
67430: CALL 40789 0 4
67434: PUSH
67435: LD_INT 4
67437: ARRAY
67438: ST_TO_ADDR
// end ;
67439: LD_VAR 0 3
67443: RET
// export function PlayerSeeMe ( unit ) ; begin
67444: LD_INT 0
67446: PPUSH
// result := See ( your_side , unit ) ;
67447: LD_ADDR_VAR 0 2
67451: PUSH
67452: LD_OWVAR 2
67456: PPUSH
67457: LD_VAR 0 1
67461: PPUSH
67462: CALL_OW 292
67466: ST_TO_ADDR
// end ;
67467: LD_VAR 0 2
67471: RET
// export function ReverseDir ( unit ) ; begin
67472: LD_INT 0
67474: PPUSH
// if not unit then
67475: LD_VAR 0 1
67479: NOT
67480: IFFALSE 67484
// exit ;
67482: GO 67507
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67484: LD_ADDR_VAR 0 2
67488: PUSH
67489: LD_VAR 0 1
67493: PPUSH
67494: CALL_OW 254
67498: PUSH
67499: LD_INT 3
67501: PLUS
67502: PUSH
67503: LD_INT 6
67505: MOD
67506: ST_TO_ADDR
// end ;
67507: LD_VAR 0 2
67511: RET
// export function ReverseArray ( array ) ; var i ; begin
67512: LD_INT 0
67514: PPUSH
67515: PPUSH
// if not array then
67516: LD_VAR 0 1
67520: NOT
67521: IFFALSE 67525
// exit ;
67523: GO 67580
// result := [ ] ;
67525: LD_ADDR_VAR 0 2
67529: PUSH
67530: EMPTY
67531: ST_TO_ADDR
// for i := array downto 1 do
67532: LD_ADDR_VAR 0 3
67536: PUSH
67537: DOUBLE
67538: LD_VAR 0 1
67542: INC
67543: ST_TO_ADDR
67544: LD_INT 1
67546: PUSH
67547: FOR_DOWNTO
67548: IFFALSE 67578
// result := Join ( result , array [ i ] ) ;
67550: LD_ADDR_VAR 0 2
67554: PUSH
67555: LD_VAR 0 2
67559: PPUSH
67560: LD_VAR 0 1
67564: PUSH
67565: LD_VAR 0 3
67569: ARRAY
67570: PPUSH
67571: CALL 72224 0 2
67575: ST_TO_ADDR
67576: GO 67547
67578: POP
67579: POP
// end ;
67580: LD_VAR 0 2
67584: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
67585: LD_INT 0
67587: PPUSH
67588: PPUSH
67589: PPUSH
67590: PPUSH
67591: PPUSH
67592: PPUSH
// if not unit or not hexes then
67593: LD_VAR 0 1
67597: NOT
67598: PUSH
67599: LD_VAR 0 2
67603: NOT
67604: OR
67605: IFFALSE 67609
// exit ;
67607: GO 67732
// dist := 9999 ;
67609: LD_ADDR_VAR 0 5
67613: PUSH
67614: LD_INT 9999
67616: ST_TO_ADDR
// for i = 1 to hexes do
67617: LD_ADDR_VAR 0 4
67621: PUSH
67622: DOUBLE
67623: LD_INT 1
67625: DEC
67626: ST_TO_ADDR
67627: LD_VAR 0 2
67631: PUSH
67632: FOR_TO
67633: IFFALSE 67720
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67635: LD_ADDR_VAR 0 6
67639: PUSH
67640: LD_VAR 0 1
67644: PPUSH
67645: LD_VAR 0 2
67649: PUSH
67650: LD_VAR 0 4
67654: ARRAY
67655: PUSH
67656: LD_INT 1
67658: ARRAY
67659: PPUSH
67660: LD_VAR 0 2
67664: PUSH
67665: LD_VAR 0 4
67669: ARRAY
67670: PUSH
67671: LD_INT 2
67673: ARRAY
67674: PPUSH
67675: CALL_OW 297
67679: ST_TO_ADDR
// if tdist < dist then
67680: LD_VAR 0 6
67684: PUSH
67685: LD_VAR 0 5
67689: LESS
67690: IFFALSE 67718
// begin hex := hexes [ i ] ;
67692: LD_ADDR_VAR 0 8
67696: PUSH
67697: LD_VAR 0 2
67701: PUSH
67702: LD_VAR 0 4
67706: ARRAY
67707: ST_TO_ADDR
// dist := tdist ;
67708: LD_ADDR_VAR 0 5
67712: PUSH
67713: LD_VAR 0 6
67717: ST_TO_ADDR
// end ; end ;
67718: GO 67632
67720: POP
67721: POP
// result := hex ;
67722: LD_ADDR_VAR 0 3
67726: PUSH
67727: LD_VAR 0 8
67731: ST_TO_ADDR
// end ;
67732: LD_VAR 0 3
67736: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67737: LD_INT 0
67739: PPUSH
67740: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67741: LD_VAR 0 1
67745: NOT
67746: PUSH
67747: LD_VAR 0 1
67751: PUSH
67752: LD_INT 21
67754: PUSH
67755: LD_INT 2
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: PUSH
67762: LD_INT 23
67764: PUSH
67765: LD_INT 2
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PPUSH
67776: CALL_OW 69
67780: IN
67781: NOT
67782: OR
67783: IFFALSE 67787
// exit ;
67785: GO 67834
// for i = 1 to 3 do
67787: LD_ADDR_VAR 0 3
67791: PUSH
67792: DOUBLE
67793: LD_INT 1
67795: DEC
67796: ST_TO_ADDR
67797: LD_INT 3
67799: PUSH
67800: FOR_TO
67801: IFFALSE 67832
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67803: LD_VAR 0 1
67807: PPUSH
67808: CALL_OW 250
67812: PPUSH
67813: LD_VAR 0 1
67817: PPUSH
67818: CALL_OW 251
67822: PPUSH
67823: LD_INT 1
67825: PPUSH
67826: CALL_OW 453
67830: GO 67800
67832: POP
67833: POP
// end ;
67834: LD_VAR 0 2
67838: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67839: LD_INT 0
67841: PPUSH
67842: PPUSH
67843: PPUSH
67844: PPUSH
67845: PPUSH
67846: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
67847: LD_VAR 0 1
67851: NOT
67852: PUSH
67853: LD_VAR 0 2
67857: NOT
67858: OR
67859: PUSH
67860: LD_VAR 0 1
67864: PPUSH
67865: CALL_OW 314
67869: OR
67870: IFFALSE 67874
// exit ;
67872: GO 68341
// if GetLives ( i ) < 250 then
67874: LD_VAR 0 4
67878: PPUSH
67879: CALL_OW 256
67883: PUSH
67884: LD_INT 250
67886: LESS
67887: IFFALSE 67900
// begin ComAutodestruct ( i ) ;
67889: LD_VAR 0 4
67893: PPUSH
67894: CALL 67737 0 1
// exit ;
67898: GO 68341
// end ; x := GetX ( enemy_unit ) ;
67900: LD_ADDR_VAR 0 7
67904: PUSH
67905: LD_VAR 0 2
67909: PPUSH
67910: CALL_OW 250
67914: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67915: LD_ADDR_VAR 0 8
67919: PUSH
67920: LD_VAR 0 2
67924: PPUSH
67925: CALL_OW 251
67929: ST_TO_ADDR
// if not x or not y then
67930: LD_VAR 0 7
67934: NOT
67935: PUSH
67936: LD_VAR 0 8
67940: NOT
67941: OR
67942: IFFALSE 67946
// exit ;
67944: GO 68341
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67946: LD_ADDR_VAR 0 6
67950: PUSH
67951: LD_VAR 0 7
67955: PPUSH
67956: LD_INT 0
67958: PPUSH
67959: LD_INT 4
67961: PPUSH
67962: CALL_OW 272
67966: PUSH
67967: LD_VAR 0 8
67971: PPUSH
67972: LD_INT 0
67974: PPUSH
67975: LD_INT 4
67977: PPUSH
67978: CALL_OW 273
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: LD_VAR 0 7
67991: PPUSH
67992: LD_INT 1
67994: PPUSH
67995: LD_INT 4
67997: PPUSH
67998: CALL_OW 272
68002: PUSH
68003: LD_VAR 0 8
68007: PPUSH
68008: LD_INT 1
68010: PPUSH
68011: LD_INT 4
68013: PPUSH
68014: CALL_OW 273
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_VAR 0 7
68027: PPUSH
68028: LD_INT 2
68030: PPUSH
68031: LD_INT 4
68033: PPUSH
68034: CALL_OW 272
68038: PUSH
68039: LD_VAR 0 8
68043: PPUSH
68044: LD_INT 2
68046: PPUSH
68047: LD_INT 4
68049: PPUSH
68050: CALL_OW 273
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: LD_VAR 0 7
68063: PPUSH
68064: LD_INT 3
68066: PPUSH
68067: LD_INT 4
68069: PPUSH
68070: CALL_OW 272
68074: PUSH
68075: LD_VAR 0 8
68079: PPUSH
68080: LD_INT 3
68082: PPUSH
68083: LD_INT 4
68085: PPUSH
68086: CALL_OW 273
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_VAR 0 7
68099: PPUSH
68100: LD_INT 4
68102: PPUSH
68103: LD_INT 4
68105: PPUSH
68106: CALL_OW 272
68110: PUSH
68111: LD_VAR 0 8
68115: PPUSH
68116: LD_INT 4
68118: PPUSH
68119: LD_INT 4
68121: PPUSH
68122: CALL_OW 273
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_VAR 0 7
68135: PPUSH
68136: LD_INT 5
68138: PPUSH
68139: LD_INT 4
68141: PPUSH
68142: CALL_OW 272
68146: PUSH
68147: LD_VAR 0 8
68151: PPUSH
68152: LD_INT 5
68154: PPUSH
68155: LD_INT 4
68157: PPUSH
68158: CALL_OW 273
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: LIST
68171: LIST
68172: LIST
68173: LIST
68174: ST_TO_ADDR
// for i = tmp downto 1 do
68175: LD_ADDR_VAR 0 4
68179: PUSH
68180: DOUBLE
68181: LD_VAR 0 6
68185: INC
68186: ST_TO_ADDR
68187: LD_INT 1
68189: PUSH
68190: FOR_DOWNTO
68191: IFFALSE 68292
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68193: LD_VAR 0 6
68197: PUSH
68198: LD_VAR 0 4
68202: ARRAY
68203: PUSH
68204: LD_INT 1
68206: ARRAY
68207: PPUSH
68208: LD_VAR 0 6
68212: PUSH
68213: LD_VAR 0 4
68217: ARRAY
68218: PUSH
68219: LD_INT 2
68221: ARRAY
68222: PPUSH
68223: CALL_OW 488
68227: NOT
68228: PUSH
68229: LD_VAR 0 6
68233: PUSH
68234: LD_VAR 0 4
68238: ARRAY
68239: PUSH
68240: LD_INT 1
68242: ARRAY
68243: PPUSH
68244: LD_VAR 0 6
68248: PUSH
68249: LD_VAR 0 4
68253: ARRAY
68254: PUSH
68255: LD_INT 2
68257: ARRAY
68258: PPUSH
68259: CALL_OW 428
68263: PUSH
68264: LD_INT 0
68266: NONEQUAL
68267: OR
68268: IFFALSE 68290
// tmp := Delete ( tmp , i ) ;
68270: LD_ADDR_VAR 0 6
68274: PUSH
68275: LD_VAR 0 6
68279: PPUSH
68280: LD_VAR 0 4
68284: PPUSH
68285: CALL_OW 3
68289: ST_TO_ADDR
68290: GO 68190
68292: POP
68293: POP
// j := GetClosestHex ( unit , tmp ) ;
68294: LD_ADDR_VAR 0 5
68298: PUSH
68299: LD_VAR 0 1
68303: PPUSH
68304: LD_VAR 0 6
68308: PPUSH
68309: CALL 67585 0 2
68313: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68314: LD_VAR 0 1
68318: PPUSH
68319: LD_VAR 0 5
68323: PUSH
68324: LD_INT 1
68326: ARRAY
68327: PPUSH
68328: LD_VAR 0 5
68332: PUSH
68333: LD_INT 2
68335: ARRAY
68336: PPUSH
68337: CALL_OW 111
// end ;
68341: LD_VAR 0 3
68345: RET
// export function PrepareApemanSoldier ( ) ; begin
68346: LD_INT 0
68348: PPUSH
// uc_nation := 0 ;
68349: LD_ADDR_OWVAR 21
68353: PUSH
68354: LD_INT 0
68356: ST_TO_ADDR
// hc_sex := sex_male ;
68357: LD_ADDR_OWVAR 27
68361: PUSH
68362: LD_INT 1
68364: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
68365: LD_ADDR_OWVAR 28
68369: PUSH
68370: LD_INT 15
68372: ST_TO_ADDR
// hc_gallery :=  ;
68373: LD_ADDR_OWVAR 33
68377: PUSH
68378: LD_STRING 
68380: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68381: LD_ADDR_OWVAR 31
68385: PUSH
68386: LD_INT 0
68388: PPUSH
68389: LD_INT 3
68391: PPUSH
68392: CALL_OW 12
68396: PUSH
68397: LD_INT 0
68399: PPUSH
68400: LD_INT 3
68402: PPUSH
68403: CALL_OW 12
68407: PUSH
68408: LD_INT 0
68410: PUSH
68411: LD_INT 0
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: ST_TO_ADDR
// end ;
68420: LD_VAR 0 1
68424: RET
// export function PrepareApemanEngineer ( ) ; begin
68425: LD_INT 0
68427: PPUSH
// uc_nation := 0 ;
68428: LD_ADDR_OWVAR 21
68432: PUSH
68433: LD_INT 0
68435: ST_TO_ADDR
// hc_sex := sex_male ;
68436: LD_ADDR_OWVAR 27
68440: PUSH
68441: LD_INT 1
68443: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
68444: LD_ADDR_OWVAR 28
68448: PUSH
68449: LD_INT 16
68451: ST_TO_ADDR
// hc_gallery :=  ;
68452: LD_ADDR_OWVAR 33
68456: PUSH
68457: LD_STRING 
68459: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68460: LD_ADDR_OWVAR 31
68464: PUSH
68465: LD_INT 0
68467: PPUSH
68468: LD_INT 3
68470: PPUSH
68471: CALL_OW 12
68475: PUSH
68476: LD_INT 0
68478: PPUSH
68479: LD_INT 3
68481: PPUSH
68482: CALL_OW 12
68486: PUSH
68487: LD_INT 0
68489: PUSH
68490: LD_INT 0
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: ST_TO_ADDR
// end ;
68499: LD_VAR 0 1
68503: RET
// export function PrepareApeman ( agressivity ) ; begin
68504: LD_INT 0
68506: PPUSH
// uc_side := 0 ;
68507: LD_ADDR_OWVAR 20
68511: PUSH
68512: LD_INT 0
68514: ST_TO_ADDR
// uc_nation := 0 ;
68515: LD_ADDR_OWVAR 21
68519: PUSH
68520: LD_INT 0
68522: ST_TO_ADDR
// hc_sex := sex_male ;
68523: LD_ADDR_OWVAR 27
68527: PUSH
68528: LD_INT 1
68530: ST_TO_ADDR
// hc_class := class_apeman ;
68531: LD_ADDR_OWVAR 28
68535: PUSH
68536: LD_INT 12
68538: ST_TO_ADDR
// hc_gallery :=  ;
68539: LD_ADDR_OWVAR 33
68543: PUSH
68544: LD_STRING 
68546: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68547: LD_ADDR_OWVAR 35
68551: PUSH
68552: LD_VAR 0 1
68556: NEG
68557: PPUSH
68558: LD_VAR 0 1
68562: PPUSH
68563: CALL_OW 12
68567: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68568: LD_ADDR_OWVAR 31
68572: PUSH
68573: LD_INT 0
68575: PPUSH
68576: LD_INT 3
68578: PPUSH
68579: CALL_OW 12
68583: PUSH
68584: LD_INT 0
68586: PPUSH
68587: LD_INT 3
68589: PPUSH
68590: CALL_OW 12
68594: PUSH
68595: LD_INT 0
68597: PUSH
68598: LD_INT 0
68600: PUSH
68601: EMPTY
68602: LIST
68603: LIST
68604: LIST
68605: LIST
68606: ST_TO_ADDR
// end ;
68607: LD_VAR 0 2
68611: RET
// export function PrepareTiger ( agressivity ) ; begin
68612: LD_INT 0
68614: PPUSH
// uc_side := 0 ;
68615: LD_ADDR_OWVAR 20
68619: PUSH
68620: LD_INT 0
68622: ST_TO_ADDR
// uc_nation := 0 ;
68623: LD_ADDR_OWVAR 21
68627: PUSH
68628: LD_INT 0
68630: ST_TO_ADDR
// hc_class := class_tiger ;
68631: LD_ADDR_OWVAR 28
68635: PUSH
68636: LD_INT 14
68638: ST_TO_ADDR
// hc_gallery :=  ;
68639: LD_ADDR_OWVAR 33
68643: PUSH
68644: LD_STRING 
68646: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68647: LD_ADDR_OWVAR 35
68651: PUSH
68652: LD_VAR 0 1
68656: NEG
68657: PPUSH
68658: LD_VAR 0 1
68662: PPUSH
68663: CALL_OW 12
68667: ST_TO_ADDR
// end ;
68668: LD_VAR 0 2
68672: RET
// export function PrepareEnchidna ( ) ; begin
68673: LD_INT 0
68675: PPUSH
// uc_side := 0 ;
68676: LD_ADDR_OWVAR 20
68680: PUSH
68681: LD_INT 0
68683: ST_TO_ADDR
// uc_nation := 0 ;
68684: LD_ADDR_OWVAR 21
68688: PUSH
68689: LD_INT 0
68691: ST_TO_ADDR
// hc_class := class_baggie ;
68692: LD_ADDR_OWVAR 28
68696: PUSH
68697: LD_INT 13
68699: ST_TO_ADDR
// hc_gallery :=  ;
68700: LD_ADDR_OWVAR 33
68704: PUSH
68705: LD_STRING 
68707: ST_TO_ADDR
// end ;
68708: LD_VAR 0 1
68712: RET
// export function PrepareFrog ( ) ; begin
68713: LD_INT 0
68715: PPUSH
// uc_side := 0 ;
68716: LD_ADDR_OWVAR 20
68720: PUSH
68721: LD_INT 0
68723: ST_TO_ADDR
// uc_nation := 0 ;
68724: LD_ADDR_OWVAR 21
68728: PUSH
68729: LD_INT 0
68731: ST_TO_ADDR
// hc_class := class_frog ;
68732: LD_ADDR_OWVAR 28
68736: PUSH
68737: LD_INT 19
68739: ST_TO_ADDR
// hc_gallery :=  ;
68740: LD_ADDR_OWVAR 33
68744: PUSH
68745: LD_STRING 
68747: ST_TO_ADDR
// end ;
68748: LD_VAR 0 1
68752: RET
// export function PrepareFish ( ) ; begin
68753: LD_INT 0
68755: PPUSH
// uc_side := 0 ;
68756: LD_ADDR_OWVAR 20
68760: PUSH
68761: LD_INT 0
68763: ST_TO_ADDR
// uc_nation := 0 ;
68764: LD_ADDR_OWVAR 21
68768: PUSH
68769: LD_INT 0
68771: ST_TO_ADDR
// hc_class := class_fish ;
68772: LD_ADDR_OWVAR 28
68776: PUSH
68777: LD_INT 20
68779: ST_TO_ADDR
// hc_gallery :=  ;
68780: LD_ADDR_OWVAR 33
68784: PUSH
68785: LD_STRING 
68787: ST_TO_ADDR
// end ;
68788: LD_VAR 0 1
68792: RET
// export function PrepareBird ( ) ; begin
68793: LD_INT 0
68795: PPUSH
// uc_side := 0 ;
68796: LD_ADDR_OWVAR 20
68800: PUSH
68801: LD_INT 0
68803: ST_TO_ADDR
// uc_nation := 0 ;
68804: LD_ADDR_OWVAR 21
68808: PUSH
68809: LD_INT 0
68811: ST_TO_ADDR
// hc_class := class_phororhacos ;
68812: LD_ADDR_OWVAR 28
68816: PUSH
68817: LD_INT 18
68819: ST_TO_ADDR
// hc_gallery :=  ;
68820: LD_ADDR_OWVAR 33
68824: PUSH
68825: LD_STRING 
68827: ST_TO_ADDR
// end ;
68828: LD_VAR 0 1
68832: RET
// export function PrepareHorse ( ) ; begin
68833: LD_INT 0
68835: PPUSH
// uc_side := 0 ;
68836: LD_ADDR_OWVAR 20
68840: PUSH
68841: LD_INT 0
68843: ST_TO_ADDR
// uc_nation := 0 ;
68844: LD_ADDR_OWVAR 21
68848: PUSH
68849: LD_INT 0
68851: ST_TO_ADDR
// hc_class := class_horse ;
68852: LD_ADDR_OWVAR 28
68856: PUSH
68857: LD_INT 21
68859: ST_TO_ADDR
// hc_gallery :=  ;
68860: LD_ADDR_OWVAR 33
68864: PUSH
68865: LD_STRING 
68867: ST_TO_ADDR
// end ;
68868: LD_VAR 0 1
68872: RET
// export function PrepareMastodont ( ) ; begin
68873: LD_INT 0
68875: PPUSH
// uc_side := 0 ;
68876: LD_ADDR_OWVAR 20
68880: PUSH
68881: LD_INT 0
68883: ST_TO_ADDR
// uc_nation := 0 ;
68884: LD_ADDR_OWVAR 21
68888: PUSH
68889: LD_INT 0
68891: ST_TO_ADDR
// vc_chassis := class_mastodont ;
68892: LD_ADDR_OWVAR 37
68896: PUSH
68897: LD_INT 31
68899: ST_TO_ADDR
// vc_control := control_rider ;
68900: LD_ADDR_OWVAR 38
68904: PUSH
68905: LD_INT 4
68907: ST_TO_ADDR
// end ;
68908: LD_VAR 0 1
68912: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68913: LD_INT 0
68915: PPUSH
68916: PPUSH
68917: PPUSH
// uc_side = 0 ;
68918: LD_ADDR_OWVAR 20
68922: PUSH
68923: LD_INT 0
68925: ST_TO_ADDR
// uc_nation = 0 ;
68926: LD_ADDR_OWVAR 21
68930: PUSH
68931: LD_INT 0
68933: ST_TO_ADDR
// InitHc_All ( ) ;
68934: CALL_OW 584
// InitVc ;
68938: CALL_OW 20
// if mastodonts then
68942: LD_VAR 0 6
68946: IFFALSE 69013
// for i = 1 to mastodonts do
68948: LD_ADDR_VAR 0 11
68952: PUSH
68953: DOUBLE
68954: LD_INT 1
68956: DEC
68957: ST_TO_ADDR
68958: LD_VAR 0 6
68962: PUSH
68963: FOR_TO
68964: IFFALSE 69011
// begin vc_chassis := 31 ;
68966: LD_ADDR_OWVAR 37
68970: PUSH
68971: LD_INT 31
68973: ST_TO_ADDR
// vc_control := control_rider ;
68974: LD_ADDR_OWVAR 38
68978: PUSH
68979: LD_INT 4
68981: ST_TO_ADDR
// animal := CreateVehicle ;
68982: LD_ADDR_VAR 0 12
68986: PUSH
68987: CALL_OW 45
68991: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68992: LD_VAR 0 12
68996: PPUSH
68997: LD_VAR 0 8
69001: PPUSH
69002: LD_INT 0
69004: PPUSH
69005: CALL 71141 0 3
// end ;
69009: GO 68963
69011: POP
69012: POP
// if horses then
69013: LD_VAR 0 5
69017: IFFALSE 69084
// for i = 1 to horses do
69019: LD_ADDR_VAR 0 11
69023: PUSH
69024: DOUBLE
69025: LD_INT 1
69027: DEC
69028: ST_TO_ADDR
69029: LD_VAR 0 5
69033: PUSH
69034: FOR_TO
69035: IFFALSE 69082
// begin hc_class := 21 ;
69037: LD_ADDR_OWVAR 28
69041: PUSH
69042: LD_INT 21
69044: ST_TO_ADDR
// hc_gallery :=  ;
69045: LD_ADDR_OWVAR 33
69049: PUSH
69050: LD_STRING 
69052: ST_TO_ADDR
// animal := CreateHuman ;
69053: LD_ADDR_VAR 0 12
69057: PUSH
69058: CALL_OW 44
69062: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69063: LD_VAR 0 12
69067: PPUSH
69068: LD_VAR 0 8
69072: PPUSH
69073: LD_INT 0
69075: PPUSH
69076: CALL 71141 0 3
// end ;
69080: GO 69034
69082: POP
69083: POP
// if birds then
69084: LD_VAR 0 1
69088: IFFALSE 69155
// for i = 1 to birds do
69090: LD_ADDR_VAR 0 11
69094: PUSH
69095: DOUBLE
69096: LD_INT 1
69098: DEC
69099: ST_TO_ADDR
69100: LD_VAR 0 1
69104: PUSH
69105: FOR_TO
69106: IFFALSE 69153
// begin hc_class = 18 ;
69108: LD_ADDR_OWVAR 28
69112: PUSH
69113: LD_INT 18
69115: ST_TO_ADDR
// hc_gallery =  ;
69116: LD_ADDR_OWVAR 33
69120: PUSH
69121: LD_STRING 
69123: ST_TO_ADDR
// animal := CreateHuman ;
69124: LD_ADDR_VAR 0 12
69128: PUSH
69129: CALL_OW 44
69133: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69134: LD_VAR 0 12
69138: PPUSH
69139: LD_VAR 0 8
69143: PPUSH
69144: LD_INT 0
69146: PPUSH
69147: CALL 71141 0 3
// end ;
69151: GO 69105
69153: POP
69154: POP
// if tigers then
69155: LD_VAR 0 2
69159: IFFALSE 69243
// for i = 1 to tigers do
69161: LD_ADDR_VAR 0 11
69165: PUSH
69166: DOUBLE
69167: LD_INT 1
69169: DEC
69170: ST_TO_ADDR
69171: LD_VAR 0 2
69175: PUSH
69176: FOR_TO
69177: IFFALSE 69241
// begin hc_class = class_tiger ;
69179: LD_ADDR_OWVAR 28
69183: PUSH
69184: LD_INT 14
69186: ST_TO_ADDR
// hc_gallery =  ;
69187: LD_ADDR_OWVAR 33
69191: PUSH
69192: LD_STRING 
69194: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69195: LD_ADDR_OWVAR 35
69199: PUSH
69200: LD_INT 7
69202: NEG
69203: PPUSH
69204: LD_INT 7
69206: PPUSH
69207: CALL_OW 12
69211: ST_TO_ADDR
// animal := CreateHuman ;
69212: LD_ADDR_VAR 0 12
69216: PUSH
69217: CALL_OW 44
69221: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69222: LD_VAR 0 12
69226: PPUSH
69227: LD_VAR 0 8
69231: PPUSH
69232: LD_INT 0
69234: PPUSH
69235: CALL 71141 0 3
// end ;
69239: GO 69176
69241: POP
69242: POP
// if apemans then
69243: LD_VAR 0 3
69247: IFFALSE 69370
// for i = 1 to apemans do
69249: LD_ADDR_VAR 0 11
69253: PUSH
69254: DOUBLE
69255: LD_INT 1
69257: DEC
69258: ST_TO_ADDR
69259: LD_VAR 0 3
69263: PUSH
69264: FOR_TO
69265: IFFALSE 69368
// begin hc_class = class_apeman ;
69267: LD_ADDR_OWVAR 28
69271: PUSH
69272: LD_INT 12
69274: ST_TO_ADDR
// hc_gallery =  ;
69275: LD_ADDR_OWVAR 33
69279: PUSH
69280: LD_STRING 
69282: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
69283: LD_ADDR_OWVAR 35
69287: PUSH
69288: LD_INT 2
69290: NEG
69291: PPUSH
69292: LD_INT 2
69294: PPUSH
69295: CALL_OW 12
69299: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69300: LD_ADDR_OWVAR 31
69304: PUSH
69305: LD_INT 1
69307: PPUSH
69308: LD_INT 3
69310: PPUSH
69311: CALL_OW 12
69315: PUSH
69316: LD_INT 1
69318: PPUSH
69319: LD_INT 3
69321: PPUSH
69322: CALL_OW 12
69326: PUSH
69327: LD_INT 0
69329: PUSH
69330: LD_INT 0
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: LIST
69337: LIST
69338: ST_TO_ADDR
// animal := CreateHuman ;
69339: LD_ADDR_VAR 0 12
69343: PUSH
69344: CALL_OW 44
69348: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69349: LD_VAR 0 12
69353: PPUSH
69354: LD_VAR 0 8
69358: PPUSH
69359: LD_INT 0
69361: PPUSH
69362: CALL 71141 0 3
// end ;
69366: GO 69264
69368: POP
69369: POP
// if enchidnas then
69370: LD_VAR 0 4
69374: IFFALSE 69441
// for i = 1 to enchidnas do
69376: LD_ADDR_VAR 0 11
69380: PUSH
69381: DOUBLE
69382: LD_INT 1
69384: DEC
69385: ST_TO_ADDR
69386: LD_VAR 0 4
69390: PUSH
69391: FOR_TO
69392: IFFALSE 69439
// begin hc_class = 13 ;
69394: LD_ADDR_OWVAR 28
69398: PUSH
69399: LD_INT 13
69401: ST_TO_ADDR
// hc_gallery =  ;
69402: LD_ADDR_OWVAR 33
69406: PUSH
69407: LD_STRING 
69409: ST_TO_ADDR
// animal := CreateHuman ;
69410: LD_ADDR_VAR 0 12
69414: PUSH
69415: CALL_OW 44
69419: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69420: LD_VAR 0 12
69424: PPUSH
69425: LD_VAR 0 8
69429: PPUSH
69430: LD_INT 0
69432: PPUSH
69433: CALL 71141 0 3
// end ;
69437: GO 69391
69439: POP
69440: POP
// if fishes then
69441: LD_VAR 0 7
69445: IFFALSE 69512
// for i = 1 to fishes do
69447: LD_ADDR_VAR 0 11
69451: PUSH
69452: DOUBLE
69453: LD_INT 1
69455: DEC
69456: ST_TO_ADDR
69457: LD_VAR 0 7
69461: PUSH
69462: FOR_TO
69463: IFFALSE 69510
// begin hc_class = 20 ;
69465: LD_ADDR_OWVAR 28
69469: PUSH
69470: LD_INT 20
69472: ST_TO_ADDR
// hc_gallery =  ;
69473: LD_ADDR_OWVAR 33
69477: PUSH
69478: LD_STRING 
69480: ST_TO_ADDR
// animal := CreateHuman ;
69481: LD_ADDR_VAR 0 12
69485: PUSH
69486: CALL_OW 44
69490: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69491: LD_VAR 0 12
69495: PPUSH
69496: LD_VAR 0 9
69500: PPUSH
69501: LD_INT 0
69503: PPUSH
69504: CALL 71141 0 3
// end ;
69508: GO 69462
69510: POP
69511: POP
// end ;
69512: LD_VAR 0 10
69516: RET
// export function WantHeal ( sci , unit ) ; begin
69517: LD_INT 0
69519: PPUSH
// if GetTaskList ( sci ) > 0 then
69520: LD_VAR 0 1
69524: PPUSH
69525: CALL_OW 437
69529: PUSH
69530: LD_INT 0
69532: GREATER
69533: IFFALSE 69603
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69535: LD_VAR 0 1
69539: PPUSH
69540: CALL_OW 437
69544: PUSH
69545: LD_INT 1
69547: ARRAY
69548: PUSH
69549: LD_INT 1
69551: ARRAY
69552: PUSH
69553: LD_STRING l
69555: EQUAL
69556: PUSH
69557: LD_VAR 0 1
69561: PPUSH
69562: CALL_OW 437
69566: PUSH
69567: LD_INT 1
69569: ARRAY
69570: PUSH
69571: LD_INT 4
69573: ARRAY
69574: PUSH
69575: LD_VAR 0 2
69579: EQUAL
69580: AND
69581: IFFALSE 69593
// result := true else
69583: LD_ADDR_VAR 0 3
69587: PUSH
69588: LD_INT 1
69590: ST_TO_ADDR
69591: GO 69601
// result := false ;
69593: LD_ADDR_VAR 0 3
69597: PUSH
69598: LD_INT 0
69600: ST_TO_ADDR
// end else
69601: GO 69611
// result := false ;
69603: LD_ADDR_VAR 0 3
69607: PUSH
69608: LD_INT 0
69610: ST_TO_ADDR
// end ;
69611: LD_VAR 0 3
69615: RET
// export function HealTarget ( sci ) ; begin
69616: LD_INT 0
69618: PPUSH
// if not sci then
69619: LD_VAR 0 1
69623: NOT
69624: IFFALSE 69628
// exit ;
69626: GO 69693
// result := 0 ;
69628: LD_ADDR_VAR 0 2
69632: PUSH
69633: LD_INT 0
69635: ST_TO_ADDR
// if GetTaskList ( sci ) then
69636: LD_VAR 0 1
69640: PPUSH
69641: CALL_OW 437
69645: IFFALSE 69693
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69647: LD_VAR 0 1
69651: PPUSH
69652: CALL_OW 437
69656: PUSH
69657: LD_INT 1
69659: ARRAY
69660: PUSH
69661: LD_INT 1
69663: ARRAY
69664: PUSH
69665: LD_STRING l
69667: EQUAL
69668: IFFALSE 69693
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69670: LD_ADDR_VAR 0 2
69674: PUSH
69675: LD_VAR 0 1
69679: PPUSH
69680: CALL_OW 437
69684: PUSH
69685: LD_INT 1
69687: ARRAY
69688: PUSH
69689: LD_INT 4
69691: ARRAY
69692: ST_TO_ADDR
// end ;
69693: LD_VAR 0 2
69697: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69698: LD_INT 0
69700: PPUSH
69701: PPUSH
69702: PPUSH
69703: PPUSH
// if not base_units then
69704: LD_VAR 0 1
69708: NOT
69709: IFFALSE 69713
// exit ;
69711: GO 69800
// result := false ;
69713: LD_ADDR_VAR 0 2
69717: PUSH
69718: LD_INT 0
69720: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69721: LD_ADDR_VAR 0 5
69725: PUSH
69726: LD_VAR 0 1
69730: PPUSH
69731: LD_INT 21
69733: PUSH
69734: LD_INT 3
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PPUSH
69741: CALL_OW 72
69745: ST_TO_ADDR
// if not tmp then
69746: LD_VAR 0 5
69750: NOT
69751: IFFALSE 69755
// exit ;
69753: GO 69800
// for i in tmp do
69755: LD_ADDR_VAR 0 3
69759: PUSH
69760: LD_VAR 0 5
69764: PUSH
69765: FOR_IN
69766: IFFALSE 69798
// begin result := EnemyInRange ( i , 22 ) ;
69768: LD_ADDR_VAR 0 2
69772: PUSH
69773: LD_VAR 0 3
69777: PPUSH
69778: LD_INT 22
69780: PPUSH
69781: CALL 67387 0 2
69785: ST_TO_ADDR
// if result then
69786: LD_VAR 0 2
69790: IFFALSE 69796
// exit ;
69792: POP
69793: POP
69794: GO 69800
// end ;
69796: GO 69765
69798: POP
69799: POP
// end ;
69800: LD_VAR 0 2
69804: RET
// export function FilterByTag ( units , tag ) ; begin
69805: LD_INT 0
69807: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
69808: LD_ADDR_VAR 0 3
69812: PUSH
69813: LD_VAR 0 1
69817: PPUSH
69818: LD_INT 120
69820: PUSH
69821: LD_VAR 0 2
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: PPUSH
69830: CALL_OW 72
69834: ST_TO_ADDR
// end ;
69835: LD_VAR 0 3
69839: RET
// export function IsDriver ( un ) ; begin
69840: LD_INT 0
69842: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69843: LD_ADDR_VAR 0 2
69847: PUSH
69848: LD_VAR 0 1
69852: PUSH
69853: LD_INT 55
69855: PUSH
69856: EMPTY
69857: LIST
69858: PPUSH
69859: CALL_OW 69
69863: IN
69864: ST_TO_ADDR
// end ;
69865: LD_VAR 0 2
69869: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69870: LD_INT 0
69872: PPUSH
69873: PPUSH
// list := [ ] ;
69874: LD_ADDR_VAR 0 5
69878: PUSH
69879: EMPTY
69880: ST_TO_ADDR
// case d of 0 :
69881: LD_VAR 0 3
69885: PUSH
69886: LD_INT 0
69888: DOUBLE
69889: EQUAL
69890: IFTRUE 69894
69892: GO 70027
69894: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69895: LD_ADDR_VAR 0 5
69899: PUSH
69900: LD_VAR 0 1
69904: PUSH
69905: LD_INT 4
69907: MINUS
69908: PUSH
69909: LD_VAR 0 2
69913: PUSH
69914: LD_INT 4
69916: MINUS
69917: PUSH
69918: LD_INT 2
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: LIST
69925: PUSH
69926: LD_VAR 0 1
69930: PUSH
69931: LD_INT 3
69933: MINUS
69934: PUSH
69935: LD_VAR 0 2
69939: PUSH
69940: LD_INT 1
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: LIST
69947: PUSH
69948: LD_VAR 0 1
69952: PUSH
69953: LD_INT 4
69955: PLUS
69956: PUSH
69957: LD_VAR 0 2
69961: PUSH
69962: LD_INT 4
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: LIST
69969: PUSH
69970: LD_VAR 0 1
69974: PUSH
69975: LD_INT 3
69977: PLUS
69978: PUSH
69979: LD_VAR 0 2
69983: PUSH
69984: LD_INT 3
69986: PLUS
69987: PUSH
69988: LD_INT 5
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: LIST
69995: PUSH
69996: LD_VAR 0 1
70000: PUSH
70001: LD_VAR 0 2
70005: PUSH
70006: LD_INT 4
70008: PLUS
70009: PUSH
70010: LD_INT 0
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: LIST
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: LIST
70022: LIST
70023: LIST
70024: ST_TO_ADDR
// end ; 1 :
70025: GO 70725
70027: LD_INT 1
70029: DOUBLE
70030: EQUAL
70031: IFTRUE 70035
70033: GO 70168
70035: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70036: LD_ADDR_VAR 0 5
70040: PUSH
70041: LD_VAR 0 1
70045: PUSH
70046: LD_VAR 0 2
70050: PUSH
70051: LD_INT 4
70053: MINUS
70054: PUSH
70055: LD_INT 3
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: LIST
70062: PUSH
70063: LD_VAR 0 1
70067: PUSH
70068: LD_INT 3
70070: MINUS
70071: PUSH
70072: LD_VAR 0 2
70076: PUSH
70077: LD_INT 3
70079: MINUS
70080: PUSH
70081: LD_INT 2
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: LIST
70088: PUSH
70089: LD_VAR 0 1
70093: PUSH
70094: LD_INT 4
70096: MINUS
70097: PUSH
70098: LD_VAR 0 2
70102: PUSH
70103: LD_INT 1
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: LIST
70110: PUSH
70111: LD_VAR 0 1
70115: PUSH
70116: LD_VAR 0 2
70120: PUSH
70121: LD_INT 3
70123: PLUS
70124: PUSH
70125: LD_INT 0
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: LIST
70132: PUSH
70133: LD_VAR 0 1
70137: PUSH
70138: LD_INT 4
70140: PLUS
70141: PUSH
70142: LD_VAR 0 2
70146: PUSH
70147: LD_INT 4
70149: PLUS
70150: PUSH
70151: LD_INT 5
70153: PUSH
70154: EMPTY
70155: LIST
70156: LIST
70157: LIST
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: LIST
70163: LIST
70164: LIST
70165: ST_TO_ADDR
// end ; 2 :
70166: GO 70725
70168: LD_INT 2
70170: DOUBLE
70171: EQUAL
70172: IFTRUE 70176
70174: GO 70305
70176: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70177: LD_ADDR_VAR 0 5
70181: PUSH
70182: LD_VAR 0 1
70186: PUSH
70187: LD_VAR 0 2
70191: PUSH
70192: LD_INT 3
70194: MINUS
70195: PUSH
70196: LD_INT 3
70198: PUSH
70199: EMPTY
70200: LIST
70201: LIST
70202: LIST
70203: PUSH
70204: LD_VAR 0 1
70208: PUSH
70209: LD_INT 4
70211: PLUS
70212: PUSH
70213: LD_VAR 0 2
70217: PUSH
70218: LD_INT 4
70220: PUSH
70221: EMPTY
70222: LIST
70223: LIST
70224: LIST
70225: PUSH
70226: LD_VAR 0 1
70230: PUSH
70231: LD_VAR 0 2
70235: PUSH
70236: LD_INT 4
70238: PLUS
70239: PUSH
70240: LD_INT 0
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: LIST
70247: PUSH
70248: LD_VAR 0 1
70252: PUSH
70253: LD_INT 3
70255: MINUS
70256: PUSH
70257: LD_VAR 0 2
70261: PUSH
70262: LD_INT 1
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: LIST
70269: PUSH
70270: LD_VAR 0 1
70274: PUSH
70275: LD_INT 4
70277: MINUS
70278: PUSH
70279: LD_VAR 0 2
70283: PUSH
70284: LD_INT 4
70286: MINUS
70287: PUSH
70288: LD_INT 2
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: LIST
70295: PUSH
70296: EMPTY
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: ST_TO_ADDR
// end ; 3 :
70303: GO 70725
70305: LD_INT 3
70307: DOUBLE
70308: EQUAL
70309: IFTRUE 70313
70311: GO 70446
70313: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70314: LD_ADDR_VAR 0 5
70318: PUSH
70319: LD_VAR 0 1
70323: PUSH
70324: LD_INT 3
70326: PLUS
70327: PUSH
70328: LD_VAR 0 2
70332: PUSH
70333: LD_INT 4
70335: PUSH
70336: EMPTY
70337: LIST
70338: LIST
70339: LIST
70340: PUSH
70341: LD_VAR 0 1
70345: PUSH
70346: LD_INT 4
70348: PLUS
70349: PUSH
70350: LD_VAR 0 2
70354: PUSH
70355: LD_INT 4
70357: PLUS
70358: PUSH
70359: LD_INT 5
70361: PUSH
70362: EMPTY
70363: LIST
70364: LIST
70365: LIST
70366: PUSH
70367: LD_VAR 0 1
70371: PUSH
70372: LD_INT 4
70374: MINUS
70375: PUSH
70376: LD_VAR 0 2
70380: PUSH
70381: LD_INT 1
70383: PUSH
70384: EMPTY
70385: LIST
70386: LIST
70387: LIST
70388: PUSH
70389: LD_VAR 0 1
70393: PUSH
70394: LD_VAR 0 2
70398: PUSH
70399: LD_INT 4
70401: MINUS
70402: PUSH
70403: LD_INT 3
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: LIST
70410: PUSH
70411: LD_VAR 0 1
70415: PUSH
70416: LD_INT 3
70418: MINUS
70419: PUSH
70420: LD_VAR 0 2
70424: PUSH
70425: LD_INT 3
70427: MINUS
70428: PUSH
70429: LD_INT 2
70431: PUSH
70432: EMPTY
70433: LIST
70434: LIST
70435: LIST
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: LIST
70441: LIST
70442: LIST
70443: ST_TO_ADDR
// end ; 4 :
70444: GO 70725
70446: LD_INT 4
70448: DOUBLE
70449: EQUAL
70450: IFTRUE 70454
70452: GO 70587
70454: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70455: LD_ADDR_VAR 0 5
70459: PUSH
70460: LD_VAR 0 1
70464: PUSH
70465: LD_VAR 0 2
70469: PUSH
70470: LD_INT 4
70472: PLUS
70473: PUSH
70474: LD_INT 0
70476: PUSH
70477: EMPTY
70478: LIST
70479: LIST
70480: LIST
70481: PUSH
70482: LD_VAR 0 1
70486: PUSH
70487: LD_INT 3
70489: PLUS
70490: PUSH
70491: LD_VAR 0 2
70495: PUSH
70496: LD_INT 3
70498: PLUS
70499: PUSH
70500: LD_INT 5
70502: PUSH
70503: EMPTY
70504: LIST
70505: LIST
70506: LIST
70507: PUSH
70508: LD_VAR 0 1
70512: PUSH
70513: LD_INT 4
70515: PLUS
70516: PUSH
70517: LD_VAR 0 2
70521: PUSH
70522: LD_INT 4
70524: PUSH
70525: EMPTY
70526: LIST
70527: LIST
70528: LIST
70529: PUSH
70530: LD_VAR 0 1
70534: PUSH
70535: LD_VAR 0 2
70539: PUSH
70540: LD_INT 3
70542: MINUS
70543: PUSH
70544: LD_INT 3
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: LIST
70551: PUSH
70552: LD_VAR 0 1
70556: PUSH
70557: LD_INT 4
70559: MINUS
70560: PUSH
70561: LD_VAR 0 2
70565: PUSH
70566: LD_INT 4
70568: MINUS
70569: PUSH
70570: LD_INT 2
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: LIST
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: LIST
70582: LIST
70583: LIST
70584: ST_TO_ADDR
// end ; 5 :
70585: GO 70725
70587: LD_INT 5
70589: DOUBLE
70590: EQUAL
70591: IFTRUE 70595
70593: GO 70724
70595: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70596: LD_ADDR_VAR 0 5
70600: PUSH
70601: LD_VAR 0 1
70605: PUSH
70606: LD_INT 4
70608: MINUS
70609: PUSH
70610: LD_VAR 0 2
70614: PUSH
70615: LD_INT 1
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: LIST
70622: PUSH
70623: LD_VAR 0 1
70627: PUSH
70628: LD_VAR 0 2
70632: PUSH
70633: LD_INT 4
70635: MINUS
70636: PUSH
70637: LD_INT 3
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: LIST
70644: PUSH
70645: LD_VAR 0 1
70649: PUSH
70650: LD_INT 4
70652: PLUS
70653: PUSH
70654: LD_VAR 0 2
70658: PUSH
70659: LD_INT 4
70661: PLUS
70662: PUSH
70663: LD_INT 5
70665: PUSH
70666: EMPTY
70667: LIST
70668: LIST
70669: LIST
70670: PUSH
70671: LD_VAR 0 1
70675: PUSH
70676: LD_INT 3
70678: PLUS
70679: PUSH
70680: LD_VAR 0 2
70684: PUSH
70685: LD_INT 4
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: LIST
70692: PUSH
70693: LD_VAR 0 1
70697: PUSH
70698: LD_VAR 0 2
70702: PUSH
70703: LD_INT 3
70705: PLUS
70706: PUSH
70707: LD_INT 0
70709: PUSH
70710: EMPTY
70711: LIST
70712: LIST
70713: LIST
70714: PUSH
70715: EMPTY
70716: LIST
70717: LIST
70718: LIST
70719: LIST
70720: LIST
70721: ST_TO_ADDR
// end ; end ;
70722: GO 70725
70724: POP
// result := list ;
70725: LD_ADDR_VAR 0 4
70729: PUSH
70730: LD_VAR 0 5
70734: ST_TO_ADDR
// end ;
70735: LD_VAR 0 4
70739: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70740: LD_INT 0
70742: PPUSH
70743: PPUSH
70744: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70745: LD_VAR 0 1
70749: NOT
70750: PUSH
70751: LD_VAR 0 2
70755: PUSH
70756: LD_INT 1
70758: PUSH
70759: LD_INT 2
70761: PUSH
70762: LD_INT 3
70764: PUSH
70765: LD_INT 4
70767: PUSH
70768: EMPTY
70769: LIST
70770: LIST
70771: LIST
70772: LIST
70773: IN
70774: NOT
70775: OR
70776: IFFALSE 70780
// exit ;
70778: GO 70863
// tmp := [ ] ;
70780: LD_ADDR_VAR 0 5
70784: PUSH
70785: EMPTY
70786: ST_TO_ADDR
// for i in units do
70787: LD_ADDR_VAR 0 4
70791: PUSH
70792: LD_VAR 0 1
70796: PUSH
70797: FOR_IN
70798: IFFALSE 70832
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
70800: LD_ADDR_VAR 0 5
70804: PUSH
70805: LD_VAR 0 5
70809: PPUSH
70810: LD_VAR 0 4
70814: PPUSH
70815: LD_VAR 0 2
70819: PPUSH
70820: CALL_OW 259
70824: PPUSH
70825: CALL 72224 0 2
70829: ST_TO_ADDR
70830: GO 70797
70832: POP
70833: POP
// if not tmp then
70834: LD_VAR 0 5
70838: NOT
70839: IFFALSE 70843
// exit ;
70841: GO 70863
// result := SortListByListDesc ( units , tmp ) ;
70843: LD_ADDR_VAR 0 3
70847: PUSH
70848: LD_VAR 0 1
70852: PPUSH
70853: LD_VAR 0 5
70857: PPUSH
70858: CALL_OW 77
70862: ST_TO_ADDR
// end ;
70863: LD_VAR 0 3
70867: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70868: LD_INT 0
70870: PPUSH
70871: PPUSH
70872: PPUSH
// result := false ;
70873: LD_ADDR_VAR 0 3
70877: PUSH
70878: LD_INT 0
70880: ST_TO_ADDR
// if not building then
70881: LD_VAR 0 2
70885: NOT
70886: IFFALSE 70890
// exit ;
70888: GO 71028
// x := GetX ( building ) ;
70890: LD_ADDR_VAR 0 4
70894: PUSH
70895: LD_VAR 0 2
70899: PPUSH
70900: CALL_OW 250
70904: ST_TO_ADDR
// y := GetY ( building ) ;
70905: LD_ADDR_VAR 0 5
70909: PUSH
70910: LD_VAR 0 2
70914: PPUSH
70915: CALL_OW 251
70919: ST_TO_ADDR
// if not x or not y then
70920: LD_VAR 0 4
70924: NOT
70925: PUSH
70926: LD_VAR 0 5
70930: NOT
70931: OR
70932: IFFALSE 70936
// exit ;
70934: GO 71028
// if GetTaskList ( unit ) then
70936: LD_VAR 0 1
70940: PPUSH
70941: CALL_OW 437
70945: IFFALSE 71028
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70947: LD_STRING e
70949: PUSH
70950: LD_VAR 0 1
70954: PPUSH
70955: CALL_OW 437
70959: PUSH
70960: LD_INT 1
70962: ARRAY
70963: PUSH
70964: LD_INT 1
70966: ARRAY
70967: EQUAL
70968: PUSH
70969: LD_VAR 0 4
70973: PUSH
70974: LD_VAR 0 1
70978: PPUSH
70979: CALL_OW 437
70983: PUSH
70984: LD_INT 1
70986: ARRAY
70987: PUSH
70988: LD_INT 2
70990: ARRAY
70991: EQUAL
70992: AND
70993: PUSH
70994: LD_VAR 0 5
70998: PUSH
70999: LD_VAR 0 1
71003: PPUSH
71004: CALL_OW 437
71008: PUSH
71009: LD_INT 1
71011: ARRAY
71012: PUSH
71013: LD_INT 3
71015: ARRAY
71016: EQUAL
71017: AND
71018: IFFALSE 71028
// result := true end ;
71020: LD_ADDR_VAR 0 3
71024: PUSH
71025: LD_INT 1
71027: ST_TO_ADDR
// end ;
71028: LD_VAR 0 3
71032: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71033: LD_INT 0
71035: PPUSH
// result := false ;
71036: LD_ADDR_VAR 0 4
71040: PUSH
71041: LD_INT 0
71043: ST_TO_ADDR
// if GetTaskList ( unit ) then
71044: LD_VAR 0 1
71048: PPUSH
71049: CALL_OW 437
71053: IFFALSE 71136
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71055: LD_STRING M
71057: PUSH
71058: LD_VAR 0 1
71062: PPUSH
71063: CALL_OW 437
71067: PUSH
71068: LD_INT 1
71070: ARRAY
71071: PUSH
71072: LD_INT 1
71074: ARRAY
71075: EQUAL
71076: PUSH
71077: LD_VAR 0 2
71081: PUSH
71082: LD_VAR 0 1
71086: PPUSH
71087: CALL_OW 437
71091: PUSH
71092: LD_INT 1
71094: ARRAY
71095: PUSH
71096: LD_INT 2
71098: ARRAY
71099: EQUAL
71100: AND
71101: PUSH
71102: LD_VAR 0 3
71106: PUSH
71107: LD_VAR 0 1
71111: PPUSH
71112: CALL_OW 437
71116: PUSH
71117: LD_INT 1
71119: ARRAY
71120: PUSH
71121: LD_INT 3
71123: ARRAY
71124: EQUAL
71125: AND
71126: IFFALSE 71136
// result := true ;
71128: LD_ADDR_VAR 0 4
71132: PUSH
71133: LD_INT 1
71135: ST_TO_ADDR
// end ; end ;
71136: LD_VAR 0 4
71140: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71141: LD_INT 0
71143: PPUSH
71144: PPUSH
71145: PPUSH
71146: PPUSH
// if not unit or not area then
71147: LD_VAR 0 1
71151: NOT
71152: PUSH
71153: LD_VAR 0 2
71157: NOT
71158: OR
71159: IFFALSE 71163
// exit ;
71161: GO 71327
// tmp := AreaToList ( area , i ) ;
71163: LD_ADDR_VAR 0 6
71167: PUSH
71168: LD_VAR 0 2
71172: PPUSH
71173: LD_VAR 0 5
71177: PPUSH
71178: CALL_OW 517
71182: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71183: LD_ADDR_VAR 0 5
71187: PUSH
71188: DOUBLE
71189: LD_INT 1
71191: DEC
71192: ST_TO_ADDR
71193: LD_VAR 0 6
71197: PUSH
71198: LD_INT 1
71200: ARRAY
71201: PUSH
71202: FOR_TO
71203: IFFALSE 71325
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71205: LD_ADDR_VAR 0 7
71209: PUSH
71210: LD_VAR 0 6
71214: PUSH
71215: LD_INT 1
71217: ARRAY
71218: PUSH
71219: LD_VAR 0 5
71223: ARRAY
71224: PUSH
71225: LD_VAR 0 6
71229: PUSH
71230: LD_INT 2
71232: ARRAY
71233: PUSH
71234: LD_VAR 0 5
71238: ARRAY
71239: PUSH
71240: EMPTY
71241: LIST
71242: LIST
71243: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71244: LD_VAR 0 7
71248: PUSH
71249: LD_INT 1
71251: ARRAY
71252: PPUSH
71253: LD_VAR 0 7
71257: PUSH
71258: LD_INT 2
71260: ARRAY
71261: PPUSH
71262: CALL_OW 428
71266: PUSH
71267: LD_INT 0
71269: EQUAL
71270: IFFALSE 71323
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71272: LD_VAR 0 1
71276: PPUSH
71277: LD_VAR 0 7
71281: PUSH
71282: LD_INT 1
71284: ARRAY
71285: PPUSH
71286: LD_VAR 0 7
71290: PUSH
71291: LD_INT 2
71293: ARRAY
71294: PPUSH
71295: LD_VAR 0 3
71299: PPUSH
71300: CALL_OW 48
// result := IsPlaced ( unit ) ;
71304: LD_ADDR_VAR 0 4
71308: PUSH
71309: LD_VAR 0 1
71313: PPUSH
71314: CALL_OW 305
71318: ST_TO_ADDR
// exit ;
71319: POP
71320: POP
71321: GO 71327
// end ; end ;
71323: GO 71202
71325: POP
71326: POP
// end ;
71327: LD_VAR 0 4
71331: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71332: LD_INT 0
71334: PPUSH
71335: PPUSH
71336: PPUSH
// if not side or side > 8 then
71337: LD_VAR 0 1
71341: NOT
71342: PUSH
71343: LD_VAR 0 1
71347: PUSH
71348: LD_INT 8
71350: GREATER
71351: OR
71352: IFFALSE 71356
// exit ;
71354: GO 71543
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71356: LD_ADDR_VAR 0 4
71360: PUSH
71361: LD_INT 22
71363: PUSH
71364: LD_VAR 0 1
71368: PUSH
71369: EMPTY
71370: LIST
71371: LIST
71372: PUSH
71373: LD_INT 21
71375: PUSH
71376: LD_INT 3
71378: PUSH
71379: EMPTY
71380: LIST
71381: LIST
71382: PUSH
71383: EMPTY
71384: LIST
71385: LIST
71386: PPUSH
71387: CALL_OW 69
71391: ST_TO_ADDR
// if not tmp then
71392: LD_VAR 0 4
71396: NOT
71397: IFFALSE 71401
// exit ;
71399: GO 71543
// enable_addtolog := true ;
71401: LD_ADDR_OWVAR 81
71405: PUSH
71406: LD_INT 1
71408: ST_TO_ADDR
// AddToLog ( [ ) ;
71409: LD_STRING [
71411: PPUSH
71412: CALL_OW 561
// for i in tmp do
71416: LD_ADDR_VAR 0 3
71420: PUSH
71421: LD_VAR 0 4
71425: PUSH
71426: FOR_IN
71427: IFFALSE 71534
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71429: LD_STRING [
71431: PUSH
71432: LD_VAR 0 3
71436: PPUSH
71437: CALL_OW 266
71441: STR
71442: PUSH
71443: LD_STRING , 
71445: STR
71446: PUSH
71447: LD_VAR 0 3
71451: PPUSH
71452: CALL_OW 250
71456: STR
71457: PUSH
71458: LD_STRING , 
71460: STR
71461: PUSH
71462: LD_VAR 0 3
71466: PPUSH
71467: CALL_OW 251
71471: STR
71472: PUSH
71473: LD_STRING , 
71475: STR
71476: PUSH
71477: LD_VAR 0 3
71481: PPUSH
71482: CALL_OW 254
71486: STR
71487: PUSH
71488: LD_STRING , 
71490: STR
71491: PUSH
71492: LD_VAR 0 3
71496: PPUSH
71497: LD_INT 1
71499: PPUSH
71500: CALL_OW 268
71504: STR
71505: PUSH
71506: LD_STRING , 
71508: STR
71509: PUSH
71510: LD_VAR 0 3
71514: PPUSH
71515: LD_INT 2
71517: PPUSH
71518: CALL_OW 268
71522: STR
71523: PUSH
71524: LD_STRING ],
71526: STR
71527: PPUSH
71528: CALL_OW 561
// end ;
71532: GO 71426
71534: POP
71535: POP
// AddToLog ( ]; ) ;
71536: LD_STRING ];
71538: PPUSH
71539: CALL_OW 561
// end ;
71543: LD_VAR 0 2
71547: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71548: LD_INT 0
71550: PPUSH
71551: PPUSH
71552: PPUSH
71553: PPUSH
71554: PPUSH
// if not area or not rate or not max then
71555: LD_VAR 0 1
71559: NOT
71560: PUSH
71561: LD_VAR 0 2
71565: NOT
71566: OR
71567: PUSH
71568: LD_VAR 0 4
71572: NOT
71573: OR
71574: IFFALSE 71578
// exit ;
71576: GO 71767
// while 1 do
71578: LD_INT 1
71580: IFFALSE 71767
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71582: LD_ADDR_VAR 0 9
71586: PUSH
71587: LD_VAR 0 1
71591: PPUSH
71592: LD_INT 1
71594: PPUSH
71595: CALL_OW 287
71599: PUSH
71600: LD_INT 10
71602: MUL
71603: ST_TO_ADDR
// r := rate / 10 ;
71604: LD_ADDR_VAR 0 7
71608: PUSH
71609: LD_VAR 0 2
71613: PUSH
71614: LD_INT 10
71616: DIVREAL
71617: ST_TO_ADDR
// time := 1 1$00 ;
71618: LD_ADDR_VAR 0 8
71622: PUSH
71623: LD_INT 2100
71625: ST_TO_ADDR
// if amount < min then
71626: LD_VAR 0 9
71630: PUSH
71631: LD_VAR 0 3
71635: LESS
71636: IFFALSE 71654
// r := r * 2 else
71638: LD_ADDR_VAR 0 7
71642: PUSH
71643: LD_VAR 0 7
71647: PUSH
71648: LD_INT 2
71650: MUL
71651: ST_TO_ADDR
71652: GO 71680
// if amount > max then
71654: LD_VAR 0 9
71658: PUSH
71659: LD_VAR 0 4
71663: GREATER
71664: IFFALSE 71680
// r := r / 2 ;
71666: LD_ADDR_VAR 0 7
71670: PUSH
71671: LD_VAR 0 7
71675: PUSH
71676: LD_INT 2
71678: DIVREAL
71679: ST_TO_ADDR
// time := time / r ;
71680: LD_ADDR_VAR 0 8
71684: PUSH
71685: LD_VAR 0 8
71689: PUSH
71690: LD_VAR 0 7
71694: DIVREAL
71695: ST_TO_ADDR
// if time < 0 then
71696: LD_VAR 0 8
71700: PUSH
71701: LD_INT 0
71703: LESS
71704: IFFALSE 71721
// time := time * - 1 ;
71706: LD_ADDR_VAR 0 8
71710: PUSH
71711: LD_VAR 0 8
71715: PUSH
71716: LD_INT 1
71718: NEG
71719: MUL
71720: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
71721: LD_VAR 0 8
71725: PUSH
71726: LD_INT 35
71728: PPUSH
71729: LD_INT 875
71731: PPUSH
71732: CALL_OW 12
71736: PLUS
71737: PPUSH
71738: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71742: LD_INT 1
71744: PPUSH
71745: LD_INT 5
71747: PPUSH
71748: CALL_OW 12
71752: PPUSH
71753: LD_VAR 0 1
71757: PPUSH
71758: LD_INT 1
71760: PPUSH
71761: CALL_OW 55
// end ;
71765: GO 71578
// end ;
71767: LD_VAR 0 5
71771: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71772: LD_INT 0
71774: PPUSH
71775: PPUSH
71776: PPUSH
71777: PPUSH
71778: PPUSH
71779: PPUSH
71780: PPUSH
71781: PPUSH
// if not turrets or not factories then
71782: LD_VAR 0 1
71786: NOT
71787: PUSH
71788: LD_VAR 0 2
71792: NOT
71793: OR
71794: IFFALSE 71798
// exit ;
71796: GO 72105
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71798: LD_ADDR_VAR 0 10
71802: PUSH
71803: LD_INT 5
71805: PUSH
71806: LD_INT 6
71808: PUSH
71809: EMPTY
71810: LIST
71811: LIST
71812: PUSH
71813: LD_INT 2
71815: PUSH
71816: LD_INT 4
71818: PUSH
71819: EMPTY
71820: LIST
71821: LIST
71822: PUSH
71823: LD_INT 3
71825: PUSH
71826: LD_INT 5
71828: PUSH
71829: EMPTY
71830: LIST
71831: LIST
71832: PUSH
71833: EMPTY
71834: LIST
71835: LIST
71836: LIST
71837: PUSH
71838: LD_INT 24
71840: PUSH
71841: LD_INT 25
71843: PUSH
71844: EMPTY
71845: LIST
71846: LIST
71847: PUSH
71848: LD_INT 23
71850: PUSH
71851: LD_INT 27
71853: PUSH
71854: EMPTY
71855: LIST
71856: LIST
71857: PUSH
71858: EMPTY
71859: LIST
71860: LIST
71861: PUSH
71862: LD_INT 42
71864: PUSH
71865: LD_INT 43
71867: PUSH
71868: EMPTY
71869: LIST
71870: LIST
71871: PUSH
71872: LD_INT 44
71874: PUSH
71875: LD_INT 46
71877: PUSH
71878: EMPTY
71879: LIST
71880: LIST
71881: PUSH
71882: LD_INT 45
71884: PUSH
71885: LD_INT 47
71887: PUSH
71888: EMPTY
71889: LIST
71890: LIST
71891: PUSH
71892: EMPTY
71893: LIST
71894: LIST
71895: LIST
71896: PUSH
71897: EMPTY
71898: LIST
71899: LIST
71900: LIST
71901: ST_TO_ADDR
// result := [ ] ;
71902: LD_ADDR_VAR 0 3
71906: PUSH
71907: EMPTY
71908: ST_TO_ADDR
// for i in turrets do
71909: LD_ADDR_VAR 0 4
71913: PUSH
71914: LD_VAR 0 1
71918: PUSH
71919: FOR_IN
71920: IFFALSE 72103
// begin nat := GetNation ( i ) ;
71922: LD_ADDR_VAR 0 7
71926: PUSH
71927: LD_VAR 0 4
71931: PPUSH
71932: CALL_OW 248
71936: ST_TO_ADDR
// weapon := 0 ;
71937: LD_ADDR_VAR 0 8
71941: PUSH
71942: LD_INT 0
71944: ST_TO_ADDR
// if not nat then
71945: LD_VAR 0 7
71949: NOT
71950: IFFALSE 71954
// continue ;
71952: GO 71919
// for j in list [ nat ] do
71954: LD_ADDR_VAR 0 5
71958: PUSH
71959: LD_VAR 0 10
71963: PUSH
71964: LD_VAR 0 7
71968: ARRAY
71969: PUSH
71970: FOR_IN
71971: IFFALSE 72012
// if GetBWeapon ( i ) = j [ 1 ] then
71973: LD_VAR 0 4
71977: PPUSH
71978: CALL_OW 269
71982: PUSH
71983: LD_VAR 0 5
71987: PUSH
71988: LD_INT 1
71990: ARRAY
71991: EQUAL
71992: IFFALSE 72010
// begin weapon := j [ 2 ] ;
71994: LD_ADDR_VAR 0 8
71998: PUSH
71999: LD_VAR 0 5
72003: PUSH
72004: LD_INT 2
72006: ARRAY
72007: ST_TO_ADDR
// break ;
72008: GO 72012
// end ;
72010: GO 71970
72012: POP
72013: POP
// if not weapon then
72014: LD_VAR 0 8
72018: NOT
72019: IFFALSE 72023
// continue ;
72021: GO 71919
// for k in factories do
72023: LD_ADDR_VAR 0 6
72027: PUSH
72028: LD_VAR 0 2
72032: PUSH
72033: FOR_IN
72034: IFFALSE 72099
// begin weapons := AvailableWeaponList ( k ) ;
72036: LD_ADDR_VAR 0 9
72040: PUSH
72041: LD_VAR 0 6
72045: PPUSH
72046: CALL_OW 478
72050: ST_TO_ADDR
// if not weapons then
72051: LD_VAR 0 9
72055: NOT
72056: IFFALSE 72060
// continue ;
72058: GO 72033
// if weapon in weapons then
72060: LD_VAR 0 8
72064: PUSH
72065: LD_VAR 0 9
72069: IN
72070: IFFALSE 72097
// begin result := [ i , weapon ] ;
72072: LD_ADDR_VAR 0 3
72076: PUSH
72077: LD_VAR 0 4
72081: PUSH
72082: LD_VAR 0 8
72086: PUSH
72087: EMPTY
72088: LIST
72089: LIST
72090: ST_TO_ADDR
// exit ;
72091: POP
72092: POP
72093: POP
72094: POP
72095: GO 72105
// end ; end ;
72097: GO 72033
72099: POP
72100: POP
// end ;
72101: GO 71919
72103: POP
72104: POP
// end ;
72105: LD_VAR 0 3
72109: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72110: LD_INT 0
72112: PPUSH
// if not side or side > 8 then
72113: LD_VAR 0 3
72117: NOT
72118: PUSH
72119: LD_VAR 0 3
72123: PUSH
72124: LD_INT 8
72126: GREATER
72127: OR
72128: IFFALSE 72132
// exit ;
72130: GO 72191
// if not range then
72132: LD_VAR 0 4
72136: NOT
72137: IFFALSE 72148
// range := - 12 ;
72139: LD_ADDR_VAR 0 4
72143: PUSH
72144: LD_INT 12
72146: NEG
72147: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72148: LD_VAR 0 1
72152: PPUSH
72153: LD_VAR 0 2
72157: PPUSH
72158: LD_VAR 0 3
72162: PPUSH
72163: LD_VAR 0 4
72167: PPUSH
72168: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72172: LD_VAR 0 1
72176: PPUSH
72177: LD_VAR 0 2
72181: PPUSH
72182: LD_VAR 0 3
72186: PPUSH
72187: CALL_OW 331
// end ;
72191: LD_VAR 0 5
72195: RET
// export function Video ( mode ) ; begin
72196: LD_INT 0
72198: PPUSH
// ingame_video = mode ;
72199: LD_ADDR_OWVAR 52
72203: PUSH
72204: LD_VAR 0 1
72208: ST_TO_ADDR
// interface_hidden = mode ;
72209: LD_ADDR_OWVAR 54
72213: PUSH
72214: LD_VAR 0 1
72218: ST_TO_ADDR
// end ;
72219: LD_VAR 0 2
72223: RET
// export function Join ( array , element ) ; begin
72224: LD_INT 0
72226: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72227: LD_ADDR_VAR 0 3
72231: PUSH
72232: LD_VAR 0 1
72236: PPUSH
72237: LD_VAR 0 1
72241: PUSH
72242: LD_INT 1
72244: PLUS
72245: PPUSH
72246: LD_VAR 0 2
72250: PPUSH
72251: CALL_OW 1
72255: ST_TO_ADDR
// end ;
72256: LD_VAR 0 3
72260: RET
// export function JoinUnion ( array , element ) ; begin
72261: LD_INT 0
72263: PPUSH
// result := array union element ;
72264: LD_ADDR_VAR 0 3
72268: PUSH
72269: LD_VAR 0 1
72273: PUSH
72274: LD_VAR 0 2
72278: UNION
72279: ST_TO_ADDR
// end ;
72280: LD_VAR 0 3
72284: RET
// export function GetBehemoths ( side ) ; begin
72285: LD_INT 0
72287: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
72288: LD_ADDR_VAR 0 2
72292: PUSH
72293: LD_INT 22
72295: PUSH
72296: LD_VAR 0 1
72300: PUSH
72301: EMPTY
72302: LIST
72303: LIST
72304: PUSH
72305: LD_INT 31
72307: PUSH
72308: LD_INT 25
72310: PUSH
72311: EMPTY
72312: LIST
72313: LIST
72314: PUSH
72315: EMPTY
72316: LIST
72317: LIST
72318: PPUSH
72319: CALL_OW 69
72323: ST_TO_ADDR
// end ;
72324: LD_VAR 0 2
72328: RET
// export function Shuffle ( array ) ; var i , index ; begin
72329: LD_INT 0
72331: PPUSH
72332: PPUSH
72333: PPUSH
// result := [ ] ;
72334: LD_ADDR_VAR 0 2
72338: PUSH
72339: EMPTY
72340: ST_TO_ADDR
// if not array then
72341: LD_VAR 0 1
72345: NOT
72346: IFFALSE 72350
// exit ;
72348: GO 72449
// Randomize ;
72350: CALL_OW 10
// for i = array downto 1 do
72354: LD_ADDR_VAR 0 3
72358: PUSH
72359: DOUBLE
72360: LD_VAR 0 1
72364: INC
72365: ST_TO_ADDR
72366: LD_INT 1
72368: PUSH
72369: FOR_DOWNTO
72370: IFFALSE 72447
// begin index := rand ( 1 , array ) ;
72372: LD_ADDR_VAR 0 4
72376: PUSH
72377: LD_INT 1
72379: PPUSH
72380: LD_VAR 0 1
72384: PPUSH
72385: CALL_OW 12
72389: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72390: LD_ADDR_VAR 0 2
72394: PUSH
72395: LD_VAR 0 2
72399: PPUSH
72400: LD_VAR 0 2
72404: PUSH
72405: LD_INT 1
72407: PLUS
72408: PPUSH
72409: LD_VAR 0 1
72413: PUSH
72414: LD_VAR 0 4
72418: ARRAY
72419: PPUSH
72420: CALL_OW 2
72424: ST_TO_ADDR
// array := Delete ( array , index ) ;
72425: LD_ADDR_VAR 0 1
72429: PUSH
72430: LD_VAR 0 1
72434: PPUSH
72435: LD_VAR 0 4
72439: PPUSH
72440: CALL_OW 3
72444: ST_TO_ADDR
// end ;
72445: GO 72369
72447: POP
72448: POP
// end ;
72449: LD_VAR 0 2
72453: RET
// export function GetBaseMaterials ( base ) ; begin
72454: LD_INT 0
72456: PPUSH
// result := [ 0 , 0 , 0 ] ;
72457: LD_ADDR_VAR 0 2
72461: PUSH
72462: LD_INT 0
72464: PUSH
72465: LD_INT 0
72467: PUSH
72468: LD_INT 0
72470: PUSH
72471: EMPTY
72472: LIST
72473: LIST
72474: LIST
72475: ST_TO_ADDR
// if not base then
72476: LD_VAR 0 1
72480: NOT
72481: IFFALSE 72485
// exit ;
72483: GO 72534
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72485: LD_ADDR_VAR 0 2
72489: PUSH
72490: LD_VAR 0 1
72494: PPUSH
72495: LD_INT 1
72497: PPUSH
72498: CALL_OW 275
72502: PUSH
72503: LD_VAR 0 1
72507: PPUSH
72508: LD_INT 2
72510: PPUSH
72511: CALL_OW 275
72515: PUSH
72516: LD_VAR 0 1
72520: PPUSH
72521: LD_INT 3
72523: PPUSH
72524: CALL_OW 275
72528: PUSH
72529: EMPTY
72530: LIST
72531: LIST
72532: LIST
72533: ST_TO_ADDR
// end ;
72534: LD_VAR 0 2
72538: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72539: LD_INT 0
72541: PPUSH
72542: PPUSH
// result := array ;
72543: LD_ADDR_VAR 0 3
72547: PUSH
72548: LD_VAR 0 1
72552: ST_TO_ADDR
// if size >= result then
72553: LD_VAR 0 2
72557: PUSH
72558: LD_VAR 0 3
72562: GREATEREQUAL
72563: IFFALSE 72567
// exit ;
72565: GO 72617
// if size then
72567: LD_VAR 0 2
72571: IFFALSE 72617
// for i := array downto size do
72573: LD_ADDR_VAR 0 4
72577: PUSH
72578: DOUBLE
72579: LD_VAR 0 1
72583: INC
72584: ST_TO_ADDR
72585: LD_VAR 0 2
72589: PUSH
72590: FOR_DOWNTO
72591: IFFALSE 72615
// result := Delete ( result , result ) ;
72593: LD_ADDR_VAR 0 3
72597: PUSH
72598: LD_VAR 0 3
72602: PPUSH
72603: LD_VAR 0 3
72607: PPUSH
72608: CALL_OW 3
72612: ST_TO_ADDR
72613: GO 72590
72615: POP
72616: POP
// end ;
72617: LD_VAR 0 3
72621: RET
// export function ComExit ( unit ) ; var tmp ; begin
72622: LD_INT 0
72624: PPUSH
72625: PPUSH
// if not IsInUnit ( unit ) then
72626: LD_VAR 0 1
72630: PPUSH
72631: CALL_OW 310
72635: NOT
72636: IFFALSE 72640
// exit ;
72638: GO 72700
// tmp := IsInUnit ( unit ) ;
72640: LD_ADDR_VAR 0 3
72644: PUSH
72645: LD_VAR 0 1
72649: PPUSH
72650: CALL_OW 310
72654: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72655: LD_VAR 0 3
72659: PPUSH
72660: CALL_OW 247
72664: PUSH
72665: LD_INT 2
72667: EQUAL
72668: IFFALSE 72681
// ComExitVehicle ( unit ) else
72670: LD_VAR 0 1
72674: PPUSH
72675: CALL_OW 121
72679: GO 72690
// ComExitBuilding ( unit ) ;
72681: LD_VAR 0 1
72685: PPUSH
72686: CALL_OW 122
// result := tmp ;
72690: LD_ADDR_VAR 0 2
72694: PUSH
72695: LD_VAR 0 3
72699: ST_TO_ADDR
// end ;
72700: LD_VAR 0 2
72704: RET
// export function ComExitAll ( units ) ; var i ; begin
72705: LD_INT 0
72707: PPUSH
72708: PPUSH
// if not units then
72709: LD_VAR 0 1
72713: NOT
72714: IFFALSE 72718
// exit ;
72716: GO 72744
// for i in units do
72718: LD_ADDR_VAR 0 3
72722: PUSH
72723: LD_VAR 0 1
72727: PUSH
72728: FOR_IN
72729: IFFALSE 72742
// ComExit ( i ) ;
72731: LD_VAR 0 3
72735: PPUSH
72736: CALL 72622 0 1
72740: GO 72728
72742: POP
72743: POP
// end ;
72744: LD_VAR 0 2
72748: RET
// export function ResetHc ; begin
72749: LD_INT 0
72751: PPUSH
// InitHc ;
72752: CALL_OW 19
// hc_importance := 0 ;
72756: LD_ADDR_OWVAR 32
72760: PUSH
72761: LD_INT 0
72763: ST_TO_ADDR
// end ;
72764: LD_VAR 0 1
72768: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72769: LD_INT 0
72771: PPUSH
72772: PPUSH
72773: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72774: LD_ADDR_VAR 0 6
72778: PUSH
72779: LD_VAR 0 1
72783: PUSH
72784: LD_VAR 0 3
72788: PLUS
72789: PUSH
72790: LD_INT 2
72792: DIV
72793: ST_TO_ADDR
// if _x < 0 then
72794: LD_VAR 0 6
72798: PUSH
72799: LD_INT 0
72801: LESS
72802: IFFALSE 72819
// _x := _x * - 1 ;
72804: LD_ADDR_VAR 0 6
72808: PUSH
72809: LD_VAR 0 6
72813: PUSH
72814: LD_INT 1
72816: NEG
72817: MUL
72818: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72819: LD_ADDR_VAR 0 7
72823: PUSH
72824: LD_VAR 0 2
72828: PUSH
72829: LD_VAR 0 4
72833: PLUS
72834: PUSH
72835: LD_INT 2
72837: DIV
72838: ST_TO_ADDR
// if _y < 0 then
72839: LD_VAR 0 7
72843: PUSH
72844: LD_INT 0
72846: LESS
72847: IFFALSE 72864
// _y := _y * - 1 ;
72849: LD_ADDR_VAR 0 7
72853: PUSH
72854: LD_VAR 0 7
72858: PUSH
72859: LD_INT 1
72861: NEG
72862: MUL
72863: ST_TO_ADDR
// result := [ _x , _y ] ;
72864: LD_ADDR_VAR 0 5
72868: PUSH
72869: LD_VAR 0 6
72873: PUSH
72874: LD_VAR 0 7
72878: PUSH
72879: EMPTY
72880: LIST
72881: LIST
72882: ST_TO_ADDR
// end ;
72883: LD_VAR 0 5
72887: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72888: LD_INT 0
72890: PPUSH
72891: PPUSH
72892: PPUSH
72893: PPUSH
// task := GetTaskList ( unit ) ;
72894: LD_ADDR_VAR 0 7
72898: PUSH
72899: LD_VAR 0 1
72903: PPUSH
72904: CALL_OW 437
72908: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72909: LD_VAR 0 7
72913: NOT
72914: PUSH
72915: LD_VAR 0 1
72919: PPUSH
72920: LD_VAR 0 2
72924: PPUSH
72925: CALL_OW 308
72929: NOT
72930: AND
72931: IFFALSE 72935
// exit ;
72933: GO 73053
// if IsInArea ( unit , area ) then
72935: LD_VAR 0 1
72939: PPUSH
72940: LD_VAR 0 2
72944: PPUSH
72945: CALL_OW 308
72949: IFFALSE 72967
// begin ComMoveToArea ( unit , goAway ) ;
72951: LD_VAR 0 1
72955: PPUSH
72956: LD_VAR 0 3
72960: PPUSH
72961: CALL_OW 113
// exit ;
72965: GO 73053
// end ; if task [ 1 ] [ 1 ] <> M then
72967: LD_VAR 0 7
72971: PUSH
72972: LD_INT 1
72974: ARRAY
72975: PUSH
72976: LD_INT 1
72978: ARRAY
72979: PUSH
72980: LD_STRING M
72982: NONEQUAL
72983: IFFALSE 72987
// exit ;
72985: GO 73053
// x := task [ 1 ] [ 2 ] ;
72987: LD_ADDR_VAR 0 5
72991: PUSH
72992: LD_VAR 0 7
72996: PUSH
72997: LD_INT 1
72999: ARRAY
73000: PUSH
73001: LD_INT 2
73003: ARRAY
73004: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73005: LD_ADDR_VAR 0 6
73009: PUSH
73010: LD_VAR 0 7
73014: PUSH
73015: LD_INT 1
73017: ARRAY
73018: PUSH
73019: LD_INT 3
73021: ARRAY
73022: ST_TO_ADDR
// if InArea ( x , y , area ) then
73023: LD_VAR 0 5
73027: PPUSH
73028: LD_VAR 0 6
73032: PPUSH
73033: LD_VAR 0 2
73037: PPUSH
73038: CALL_OW 309
73042: IFFALSE 73053
// ComStop ( unit ) ;
73044: LD_VAR 0 1
73048: PPUSH
73049: CALL_OW 141
// end ;
73053: LD_VAR 0 4
73057: RET
// export function Abs ( value ) ; begin
73058: LD_INT 0
73060: PPUSH
// result := value ;
73061: LD_ADDR_VAR 0 2
73065: PUSH
73066: LD_VAR 0 1
73070: ST_TO_ADDR
// if value < 0 then
73071: LD_VAR 0 1
73075: PUSH
73076: LD_INT 0
73078: LESS
73079: IFFALSE 73096
// result := value * - 1 ;
73081: LD_ADDR_VAR 0 2
73085: PUSH
73086: LD_VAR 0 1
73090: PUSH
73091: LD_INT 1
73093: NEG
73094: MUL
73095: ST_TO_ADDR
// end ;
73096: LD_VAR 0 2
73100: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73101: LD_INT 0
73103: PPUSH
73104: PPUSH
73105: PPUSH
73106: PPUSH
73107: PPUSH
73108: PPUSH
73109: PPUSH
73110: PPUSH
// if not unit or not building then
73111: LD_VAR 0 1
73115: NOT
73116: PUSH
73117: LD_VAR 0 2
73121: NOT
73122: OR
73123: IFFALSE 73127
// exit ;
73125: GO 73353
// x := GetX ( building ) ;
73127: LD_ADDR_VAR 0 4
73131: PUSH
73132: LD_VAR 0 2
73136: PPUSH
73137: CALL_OW 250
73141: ST_TO_ADDR
// y := GetY ( building ) ;
73142: LD_ADDR_VAR 0 6
73146: PUSH
73147: LD_VAR 0 2
73151: PPUSH
73152: CALL_OW 251
73156: ST_TO_ADDR
// d := GetDir ( building ) ;
73157: LD_ADDR_VAR 0 8
73161: PUSH
73162: LD_VAR 0 2
73166: PPUSH
73167: CALL_OW 254
73171: ST_TO_ADDR
// r := 4 ;
73172: LD_ADDR_VAR 0 9
73176: PUSH
73177: LD_INT 4
73179: ST_TO_ADDR
// for i := 1 to 5 do
73180: LD_ADDR_VAR 0 10
73184: PUSH
73185: DOUBLE
73186: LD_INT 1
73188: DEC
73189: ST_TO_ADDR
73190: LD_INT 5
73192: PUSH
73193: FOR_TO
73194: IFFALSE 73351
// begin _x := ShiftX ( x , d , r + i ) ;
73196: LD_ADDR_VAR 0 5
73200: PUSH
73201: LD_VAR 0 4
73205: PPUSH
73206: LD_VAR 0 8
73210: PPUSH
73211: LD_VAR 0 9
73215: PUSH
73216: LD_VAR 0 10
73220: PLUS
73221: PPUSH
73222: CALL_OW 272
73226: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73227: LD_ADDR_VAR 0 7
73231: PUSH
73232: LD_VAR 0 6
73236: PPUSH
73237: LD_VAR 0 8
73241: PPUSH
73242: LD_VAR 0 9
73246: PUSH
73247: LD_VAR 0 10
73251: PLUS
73252: PPUSH
73253: CALL_OW 273
73257: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73258: LD_VAR 0 5
73262: PPUSH
73263: LD_VAR 0 7
73267: PPUSH
73268: CALL_OW 488
73272: PUSH
73273: LD_VAR 0 5
73277: PPUSH
73278: LD_VAR 0 7
73282: PPUSH
73283: CALL_OW 428
73287: PPUSH
73288: CALL_OW 247
73292: PUSH
73293: LD_INT 3
73295: PUSH
73296: LD_INT 2
73298: PUSH
73299: EMPTY
73300: LIST
73301: LIST
73302: IN
73303: NOT
73304: AND
73305: IFFALSE 73349
// begin ComMoveXY ( unit , _x , _y ) ;
73307: LD_VAR 0 1
73311: PPUSH
73312: LD_VAR 0 5
73316: PPUSH
73317: LD_VAR 0 7
73321: PPUSH
73322: CALL_OW 111
// result := [ _x , _y ] ;
73326: LD_ADDR_VAR 0 3
73330: PUSH
73331: LD_VAR 0 5
73335: PUSH
73336: LD_VAR 0 7
73340: PUSH
73341: EMPTY
73342: LIST
73343: LIST
73344: ST_TO_ADDR
// exit ;
73345: POP
73346: POP
73347: GO 73353
// end ; end ;
73349: GO 73193
73351: POP
73352: POP
// end ;
73353: LD_VAR 0 3
73357: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73358: LD_INT 0
73360: PPUSH
73361: PPUSH
73362: PPUSH
// result := 0 ;
73363: LD_ADDR_VAR 0 3
73367: PUSH
73368: LD_INT 0
73370: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73371: LD_VAR 0 1
73375: PUSH
73376: LD_INT 0
73378: LESS
73379: PUSH
73380: LD_VAR 0 1
73384: PUSH
73385: LD_INT 8
73387: GREATER
73388: OR
73389: PUSH
73390: LD_VAR 0 2
73394: PUSH
73395: LD_INT 0
73397: LESS
73398: OR
73399: PUSH
73400: LD_VAR 0 2
73404: PUSH
73405: LD_INT 8
73407: GREATER
73408: OR
73409: IFFALSE 73413
// exit ;
73411: GO 73488
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73413: LD_ADDR_VAR 0 4
73417: PUSH
73418: LD_INT 22
73420: PUSH
73421: LD_VAR 0 2
73425: PUSH
73426: EMPTY
73427: LIST
73428: LIST
73429: PPUSH
73430: CALL_OW 69
73434: PUSH
73435: FOR_IN
73436: IFFALSE 73486
// begin un := UnitShoot ( i ) ;
73438: LD_ADDR_VAR 0 5
73442: PUSH
73443: LD_VAR 0 4
73447: PPUSH
73448: CALL_OW 504
73452: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73453: LD_VAR 0 5
73457: PPUSH
73458: CALL_OW 255
73462: PUSH
73463: LD_VAR 0 1
73467: EQUAL
73468: IFFALSE 73484
// begin result := un ;
73470: LD_ADDR_VAR 0 3
73474: PUSH
73475: LD_VAR 0 5
73479: ST_TO_ADDR
// exit ;
73480: POP
73481: POP
73482: GO 73488
// end ; end ;
73484: GO 73435
73486: POP
73487: POP
// end ;
73488: LD_VAR 0 3
73492: RET
// export function GetCargoBay ( units ) ; begin
73493: LD_INT 0
73495: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73496: LD_ADDR_VAR 0 2
73500: PUSH
73501: LD_VAR 0 1
73505: PPUSH
73506: LD_INT 2
73508: PUSH
73509: LD_INT 34
73511: PUSH
73512: LD_INT 12
73514: PUSH
73515: EMPTY
73516: LIST
73517: LIST
73518: PUSH
73519: LD_INT 34
73521: PUSH
73522: LD_INT 51
73524: PUSH
73525: EMPTY
73526: LIST
73527: LIST
73528: PUSH
73529: LD_INT 34
73531: PUSH
73532: LD_INT 32
73534: PUSH
73535: EMPTY
73536: LIST
73537: LIST
73538: PUSH
73539: LD_INT 34
73541: PUSH
73542: LD_INT 89
73544: PUSH
73545: EMPTY
73546: LIST
73547: LIST
73548: PUSH
73549: EMPTY
73550: LIST
73551: LIST
73552: LIST
73553: LIST
73554: LIST
73555: PPUSH
73556: CALL_OW 72
73560: ST_TO_ADDR
// end ;
73561: LD_VAR 0 2
73565: RET
// export function Negate ( value ) ; begin
73566: LD_INT 0
73568: PPUSH
// result := not value ;
73569: LD_ADDR_VAR 0 2
73573: PUSH
73574: LD_VAR 0 1
73578: NOT
73579: ST_TO_ADDR
// end ;
73580: LD_VAR 0 2
73584: RET
// export function Inc ( value ) ; begin
73585: LD_INT 0
73587: PPUSH
// result := value + 1 ;
73588: LD_ADDR_VAR 0 2
73592: PUSH
73593: LD_VAR 0 1
73597: PUSH
73598: LD_INT 1
73600: PLUS
73601: ST_TO_ADDR
// end ;
73602: LD_VAR 0 2
73606: RET
// export function Dec ( value ) ; begin
73607: LD_INT 0
73609: PPUSH
// result := value - 1 ;
73610: LD_ADDR_VAR 0 2
73614: PUSH
73615: LD_VAR 0 1
73619: PUSH
73620: LD_INT 1
73622: MINUS
73623: ST_TO_ADDR
// end ;
73624: LD_VAR 0 2
73628: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73629: LD_INT 0
73631: PPUSH
73632: PPUSH
73633: PPUSH
73634: PPUSH
73635: PPUSH
73636: PPUSH
73637: PPUSH
73638: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73639: LD_VAR 0 1
73643: PPUSH
73644: LD_VAR 0 2
73648: PPUSH
73649: CALL_OW 488
73653: NOT
73654: PUSH
73655: LD_VAR 0 3
73659: PPUSH
73660: LD_VAR 0 4
73664: PPUSH
73665: CALL_OW 488
73669: NOT
73670: OR
73671: IFFALSE 73684
// begin result := - 1 ;
73673: LD_ADDR_VAR 0 5
73677: PUSH
73678: LD_INT 1
73680: NEG
73681: ST_TO_ADDR
// exit ;
73682: GO 73919
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
73684: LD_ADDR_VAR 0 12
73688: PUSH
73689: LD_VAR 0 1
73693: PPUSH
73694: LD_VAR 0 2
73698: PPUSH
73699: LD_VAR 0 3
73703: PPUSH
73704: LD_VAR 0 4
73708: PPUSH
73709: CALL 72769 0 4
73713: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
73714: LD_ADDR_VAR 0 11
73718: PUSH
73719: LD_VAR 0 1
73723: PPUSH
73724: LD_VAR 0 2
73728: PPUSH
73729: LD_VAR 0 12
73733: PUSH
73734: LD_INT 1
73736: ARRAY
73737: PPUSH
73738: LD_VAR 0 12
73742: PUSH
73743: LD_INT 2
73745: ARRAY
73746: PPUSH
73747: CALL_OW 298
73751: ST_TO_ADDR
// distance := 9999 ;
73752: LD_ADDR_VAR 0 10
73756: PUSH
73757: LD_INT 9999
73759: ST_TO_ADDR
// for i := 0 to 5 do
73760: LD_ADDR_VAR 0 6
73764: PUSH
73765: DOUBLE
73766: LD_INT 0
73768: DEC
73769: ST_TO_ADDR
73770: LD_INT 5
73772: PUSH
73773: FOR_TO
73774: IFFALSE 73917
// begin _x := ShiftX ( x1 , i , centerDist ) ;
73776: LD_ADDR_VAR 0 7
73780: PUSH
73781: LD_VAR 0 1
73785: PPUSH
73786: LD_VAR 0 6
73790: PPUSH
73791: LD_VAR 0 11
73795: PPUSH
73796: CALL_OW 272
73800: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
73801: LD_ADDR_VAR 0 8
73805: PUSH
73806: LD_VAR 0 2
73810: PPUSH
73811: LD_VAR 0 6
73815: PPUSH
73816: LD_VAR 0 11
73820: PPUSH
73821: CALL_OW 273
73825: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73826: LD_VAR 0 7
73830: PPUSH
73831: LD_VAR 0 8
73835: PPUSH
73836: CALL_OW 488
73840: NOT
73841: IFFALSE 73845
// continue ;
73843: GO 73773
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
73845: LD_ADDR_VAR 0 9
73849: PUSH
73850: LD_VAR 0 12
73854: PUSH
73855: LD_INT 1
73857: ARRAY
73858: PPUSH
73859: LD_VAR 0 12
73863: PUSH
73864: LD_INT 2
73866: ARRAY
73867: PPUSH
73868: LD_VAR 0 7
73872: PPUSH
73873: LD_VAR 0 8
73877: PPUSH
73878: CALL_OW 298
73882: ST_TO_ADDR
// if tmp < distance then
73883: LD_VAR 0 9
73887: PUSH
73888: LD_VAR 0 10
73892: LESS
73893: IFFALSE 73915
// begin result := i ;
73895: LD_ADDR_VAR 0 5
73899: PUSH
73900: LD_VAR 0 6
73904: ST_TO_ADDR
// distance := tmp ;
73905: LD_ADDR_VAR 0 10
73909: PUSH
73910: LD_VAR 0 9
73914: ST_TO_ADDR
// end ; end ;
73915: GO 73773
73917: POP
73918: POP
// end ;
73919: LD_VAR 0 5
73923: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73924: LD_INT 0
73926: PPUSH
73927: PPUSH
// if not driver or not IsInUnit ( driver ) then
73928: LD_VAR 0 1
73932: NOT
73933: PUSH
73934: LD_VAR 0 1
73938: PPUSH
73939: CALL_OW 310
73943: NOT
73944: OR
73945: IFFALSE 73949
// exit ;
73947: GO 74039
// vehicle := IsInUnit ( driver ) ;
73949: LD_ADDR_VAR 0 3
73953: PUSH
73954: LD_VAR 0 1
73958: PPUSH
73959: CALL_OW 310
73963: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73964: LD_VAR 0 1
73968: PPUSH
73969: LD_STRING \
73971: PUSH
73972: LD_INT 0
73974: PUSH
73975: LD_INT 0
73977: PUSH
73978: LD_INT 0
73980: PUSH
73981: LD_INT 0
73983: PUSH
73984: LD_INT 0
73986: PUSH
73987: LD_INT 0
73989: PUSH
73990: EMPTY
73991: LIST
73992: LIST
73993: LIST
73994: LIST
73995: LIST
73996: LIST
73997: LIST
73998: PUSH
73999: LD_STRING E
74001: PUSH
74002: LD_INT 0
74004: PUSH
74005: LD_INT 0
74007: PUSH
74008: LD_VAR 0 3
74012: PUSH
74013: LD_INT 0
74015: PUSH
74016: LD_INT 0
74018: PUSH
74019: LD_INT 0
74021: PUSH
74022: EMPTY
74023: LIST
74024: LIST
74025: LIST
74026: LIST
74027: LIST
74028: LIST
74029: LIST
74030: PUSH
74031: EMPTY
74032: LIST
74033: LIST
74034: PPUSH
74035: CALL_OW 446
// end ;
74039: LD_VAR 0 2
74043: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74044: LD_INT 0
74046: PPUSH
74047: PPUSH
// if not driver or not IsInUnit ( driver ) then
74048: LD_VAR 0 1
74052: NOT
74053: PUSH
74054: LD_VAR 0 1
74058: PPUSH
74059: CALL_OW 310
74063: NOT
74064: OR
74065: IFFALSE 74069
// exit ;
74067: GO 74159
// vehicle := IsInUnit ( driver ) ;
74069: LD_ADDR_VAR 0 3
74073: PUSH
74074: LD_VAR 0 1
74078: PPUSH
74079: CALL_OW 310
74083: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74084: LD_VAR 0 1
74088: PPUSH
74089: LD_STRING \
74091: PUSH
74092: LD_INT 0
74094: PUSH
74095: LD_INT 0
74097: PUSH
74098: LD_INT 0
74100: PUSH
74101: LD_INT 0
74103: PUSH
74104: LD_INT 0
74106: PUSH
74107: LD_INT 0
74109: PUSH
74110: EMPTY
74111: LIST
74112: LIST
74113: LIST
74114: LIST
74115: LIST
74116: LIST
74117: LIST
74118: PUSH
74119: LD_STRING E
74121: PUSH
74122: LD_INT 0
74124: PUSH
74125: LD_INT 0
74127: PUSH
74128: LD_VAR 0 3
74132: PUSH
74133: LD_INT 0
74135: PUSH
74136: LD_INT 0
74138: PUSH
74139: LD_INT 0
74141: PUSH
74142: EMPTY
74143: LIST
74144: LIST
74145: LIST
74146: LIST
74147: LIST
74148: LIST
74149: LIST
74150: PUSH
74151: EMPTY
74152: LIST
74153: LIST
74154: PPUSH
74155: CALL_OW 447
// end ;
74159: LD_VAR 0 2
74163: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74164: LD_INT 0
74166: PPUSH
74167: PPUSH
74168: PPUSH
// tmp := [ ] ;
74169: LD_ADDR_VAR 0 5
74173: PUSH
74174: EMPTY
74175: ST_TO_ADDR
// for i in units do
74176: LD_ADDR_VAR 0 4
74180: PUSH
74181: LD_VAR 0 1
74185: PUSH
74186: FOR_IN
74187: IFFALSE 74225
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74189: LD_ADDR_VAR 0 5
74193: PUSH
74194: LD_VAR 0 5
74198: PPUSH
74199: LD_VAR 0 5
74203: PUSH
74204: LD_INT 1
74206: PLUS
74207: PPUSH
74208: LD_VAR 0 4
74212: PPUSH
74213: CALL_OW 256
74217: PPUSH
74218: CALL_OW 2
74222: ST_TO_ADDR
74223: GO 74186
74225: POP
74226: POP
// if not tmp then
74227: LD_VAR 0 5
74231: NOT
74232: IFFALSE 74236
// exit ;
74234: GO 74284
// if asc then
74236: LD_VAR 0 2
74240: IFFALSE 74264
// result := SortListByListAsc ( units , tmp ) else
74242: LD_ADDR_VAR 0 3
74246: PUSH
74247: LD_VAR 0 1
74251: PPUSH
74252: LD_VAR 0 5
74256: PPUSH
74257: CALL_OW 76
74261: ST_TO_ADDR
74262: GO 74284
// result := SortListByListDesc ( units , tmp ) ;
74264: LD_ADDR_VAR 0 3
74268: PUSH
74269: LD_VAR 0 1
74273: PPUSH
74274: LD_VAR 0 5
74278: PPUSH
74279: CALL_OW 77
74283: ST_TO_ADDR
// end ;
74284: LD_VAR 0 3
74288: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74289: LD_INT 0
74291: PPUSH
74292: PPUSH
// task := GetTaskList ( mech ) ;
74293: LD_ADDR_VAR 0 4
74297: PUSH
74298: LD_VAR 0 1
74302: PPUSH
74303: CALL_OW 437
74307: ST_TO_ADDR
// if not task then
74308: LD_VAR 0 4
74312: NOT
74313: IFFALSE 74317
// exit ;
74315: GO 74359
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74317: LD_ADDR_VAR 0 3
74321: PUSH
74322: LD_VAR 0 4
74326: PUSH
74327: LD_INT 1
74329: ARRAY
74330: PUSH
74331: LD_INT 1
74333: ARRAY
74334: PUSH
74335: LD_STRING r
74337: EQUAL
74338: PUSH
74339: LD_VAR 0 4
74343: PUSH
74344: LD_INT 1
74346: ARRAY
74347: PUSH
74348: LD_INT 4
74350: ARRAY
74351: PUSH
74352: LD_VAR 0 2
74356: EQUAL
74357: AND
74358: ST_TO_ADDR
// end ;
74359: LD_VAR 0 3
74363: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
74364: LD_INT 0
74366: PPUSH
// SetDir ( unit , d ) ;
74367: LD_VAR 0 1
74371: PPUSH
74372: LD_VAR 0 4
74376: PPUSH
74377: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
74381: LD_VAR 0 1
74385: PPUSH
74386: LD_VAR 0 2
74390: PPUSH
74391: LD_VAR 0 3
74395: PPUSH
74396: LD_VAR 0 5
74400: PPUSH
74401: CALL_OW 48
// end ;
74405: LD_VAR 0 6
74409: RET
// export function ToNaturalNumber ( number ) ; begin
74410: LD_INT 0
74412: PPUSH
// result := number div 1 ;
74413: LD_ADDR_VAR 0 2
74417: PUSH
74418: LD_VAR 0 1
74422: PUSH
74423: LD_INT 1
74425: DIV
74426: ST_TO_ADDR
// if number < 0 then
74427: LD_VAR 0 1
74431: PUSH
74432: LD_INT 0
74434: LESS
74435: IFFALSE 74445
// result := 0 ;
74437: LD_ADDR_VAR 0 2
74441: PUSH
74442: LD_INT 0
74444: ST_TO_ADDR
// end ;
74445: LD_VAR 0 2
74449: RET
// export function SortByClass ( units , class ) ; var un ; begin
74450: LD_INT 0
74452: PPUSH
74453: PPUSH
// if not units or not class then
74454: LD_VAR 0 1
74458: NOT
74459: PUSH
74460: LD_VAR 0 2
74464: NOT
74465: OR
74466: IFFALSE 74470
// exit ;
74468: GO 74565
// result := [ ] ;
74470: LD_ADDR_VAR 0 3
74474: PUSH
74475: EMPTY
74476: ST_TO_ADDR
// for un in units do
74477: LD_ADDR_VAR 0 4
74481: PUSH
74482: LD_VAR 0 1
74486: PUSH
74487: FOR_IN
74488: IFFALSE 74563
// if GetClass ( un ) = class then
74490: LD_VAR 0 4
74494: PPUSH
74495: CALL_OW 257
74499: PUSH
74500: LD_VAR 0 2
74504: EQUAL
74505: IFFALSE 74532
// result := Insert ( result , 1 , un ) else
74507: LD_ADDR_VAR 0 3
74511: PUSH
74512: LD_VAR 0 3
74516: PPUSH
74517: LD_INT 1
74519: PPUSH
74520: LD_VAR 0 4
74524: PPUSH
74525: CALL_OW 2
74529: ST_TO_ADDR
74530: GO 74561
// result := Replace ( result , result + 1 , un ) ;
74532: LD_ADDR_VAR 0 3
74536: PUSH
74537: LD_VAR 0 3
74541: PPUSH
74542: LD_VAR 0 3
74546: PUSH
74547: LD_INT 1
74549: PLUS
74550: PPUSH
74551: LD_VAR 0 4
74555: PPUSH
74556: CALL_OW 1
74560: ST_TO_ADDR
74561: GO 74487
74563: POP
74564: POP
// end ;
74565: LD_VAR 0 3
74569: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74570: LD_INT 0
74572: PPUSH
74573: PPUSH
74574: PPUSH
74575: PPUSH
74576: PPUSH
74577: PPUSH
74578: PPUSH
// result := [ ] ;
74579: LD_ADDR_VAR 0 4
74583: PUSH
74584: EMPTY
74585: ST_TO_ADDR
// if x - r < 0 then
74586: LD_VAR 0 1
74590: PUSH
74591: LD_VAR 0 3
74595: MINUS
74596: PUSH
74597: LD_INT 0
74599: LESS
74600: IFFALSE 74612
// min_x := 0 else
74602: LD_ADDR_VAR 0 8
74606: PUSH
74607: LD_INT 0
74609: ST_TO_ADDR
74610: GO 74628
// min_x := x - r ;
74612: LD_ADDR_VAR 0 8
74616: PUSH
74617: LD_VAR 0 1
74621: PUSH
74622: LD_VAR 0 3
74626: MINUS
74627: ST_TO_ADDR
// if y - r < 0 then
74628: LD_VAR 0 2
74632: PUSH
74633: LD_VAR 0 3
74637: MINUS
74638: PUSH
74639: LD_INT 0
74641: LESS
74642: IFFALSE 74654
// min_y := 0 else
74644: LD_ADDR_VAR 0 7
74648: PUSH
74649: LD_INT 0
74651: ST_TO_ADDR
74652: GO 74670
// min_y := y - r ;
74654: LD_ADDR_VAR 0 7
74658: PUSH
74659: LD_VAR 0 2
74663: PUSH
74664: LD_VAR 0 3
74668: MINUS
74669: ST_TO_ADDR
// max_x := x + r ;
74670: LD_ADDR_VAR 0 9
74674: PUSH
74675: LD_VAR 0 1
74679: PUSH
74680: LD_VAR 0 3
74684: PLUS
74685: ST_TO_ADDR
// max_y := y + r ;
74686: LD_ADDR_VAR 0 10
74690: PUSH
74691: LD_VAR 0 2
74695: PUSH
74696: LD_VAR 0 3
74700: PLUS
74701: ST_TO_ADDR
// for _x = min_x to max_x do
74702: LD_ADDR_VAR 0 5
74706: PUSH
74707: DOUBLE
74708: LD_VAR 0 8
74712: DEC
74713: ST_TO_ADDR
74714: LD_VAR 0 9
74718: PUSH
74719: FOR_TO
74720: IFFALSE 74821
// for _y = min_y to max_y do
74722: LD_ADDR_VAR 0 6
74726: PUSH
74727: DOUBLE
74728: LD_VAR 0 7
74732: DEC
74733: ST_TO_ADDR
74734: LD_VAR 0 10
74738: PUSH
74739: FOR_TO
74740: IFFALSE 74817
// begin if not ValidHex ( _x , _y ) then
74742: LD_VAR 0 5
74746: PPUSH
74747: LD_VAR 0 6
74751: PPUSH
74752: CALL_OW 488
74756: NOT
74757: IFFALSE 74761
// continue ;
74759: GO 74739
// if GetResourceTypeXY ( _x , _y ) then
74761: LD_VAR 0 5
74765: PPUSH
74766: LD_VAR 0 6
74770: PPUSH
74771: CALL_OW 283
74775: IFFALSE 74815
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
74777: LD_ADDR_VAR 0 4
74781: PUSH
74782: LD_VAR 0 4
74786: PPUSH
74787: LD_VAR 0 4
74791: PUSH
74792: LD_INT 1
74794: PLUS
74795: PPUSH
74796: LD_VAR 0 5
74800: PUSH
74801: LD_VAR 0 6
74805: PUSH
74806: EMPTY
74807: LIST
74808: LIST
74809: PPUSH
74810: CALL_OW 1
74814: ST_TO_ADDR
// end ;
74815: GO 74739
74817: POP
74818: POP
74819: GO 74719
74821: POP
74822: POP
// end ;
74823: LD_VAR 0 4
74827: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
74828: LD_INT 0
74830: PPUSH
74831: PPUSH
74832: PPUSH
74833: PPUSH
74834: PPUSH
74835: PPUSH
74836: PPUSH
74837: PPUSH
// if not units then
74838: LD_VAR 0 1
74842: NOT
74843: IFFALSE 74847
// exit ;
74845: GO 75371
// result := UnitFilter ( units , [ f_ok ] ) ;
74847: LD_ADDR_VAR 0 3
74851: PUSH
74852: LD_VAR 0 1
74856: PPUSH
74857: LD_INT 50
74859: PUSH
74860: EMPTY
74861: LIST
74862: PPUSH
74863: CALL_OW 72
74867: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74868: LD_ADDR_VAR 0 8
74872: PUSH
74873: LD_VAR 0 1
74877: PUSH
74878: LD_INT 1
74880: ARRAY
74881: PPUSH
74882: CALL_OW 255
74886: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
74887: LD_ADDR_VAR 0 10
74891: PUSH
74892: LD_INT 29
74894: PUSH
74895: LD_INT 91
74897: PUSH
74898: LD_INT 49
74900: PUSH
74901: EMPTY
74902: LIST
74903: LIST
74904: LIST
74905: ST_TO_ADDR
// if not result then
74906: LD_VAR 0 3
74910: NOT
74911: IFFALSE 74915
// exit ;
74913: GO 75371
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74915: LD_ADDR_VAR 0 5
74919: PUSH
74920: LD_INT 81
74922: PUSH
74923: LD_VAR 0 8
74927: PUSH
74928: EMPTY
74929: LIST
74930: LIST
74931: PPUSH
74932: CALL_OW 69
74936: ST_TO_ADDR
// for i in result do
74937: LD_ADDR_VAR 0 4
74941: PUSH
74942: LD_VAR 0 3
74946: PUSH
74947: FOR_IN
74948: IFFALSE 75369
// begin tag := GetTag ( i ) + 1 ;
74950: LD_ADDR_VAR 0 9
74954: PUSH
74955: LD_VAR 0 4
74959: PPUSH
74960: CALL_OW 110
74964: PUSH
74965: LD_INT 1
74967: PLUS
74968: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
74969: LD_ADDR_VAR 0 7
74973: PUSH
74974: LD_VAR 0 4
74978: PPUSH
74979: CALL_OW 250
74983: PPUSH
74984: LD_VAR 0 4
74988: PPUSH
74989: CALL_OW 251
74993: PPUSH
74994: LD_INT 6
74996: PPUSH
74997: CALL 74570 0 3
75001: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
75002: LD_VAR 0 4
75006: PPUSH
75007: CALL_OW 247
75011: PUSH
75012: LD_INT 2
75014: EQUAL
75015: PUSH
75016: LD_VAR 0 7
75020: AND
75021: PUSH
75022: LD_VAR 0 4
75026: PPUSH
75027: CALL_OW 264
75031: PUSH
75032: LD_VAR 0 10
75036: IN
75037: NOT
75038: AND
75039: IFFALSE 75078
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
75041: LD_VAR 0 4
75045: PPUSH
75046: LD_VAR 0 7
75050: PUSH
75051: LD_INT 1
75053: ARRAY
75054: PUSH
75055: LD_INT 1
75057: ARRAY
75058: PPUSH
75059: LD_VAR 0 7
75063: PUSH
75064: LD_INT 1
75066: ARRAY
75067: PUSH
75068: LD_INT 2
75070: ARRAY
75071: PPUSH
75072: CALL_OW 116
75076: GO 75367
// if path > tag then
75078: LD_VAR 0 2
75082: PUSH
75083: LD_VAR 0 9
75087: GREATER
75088: IFFALSE 75296
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
75090: LD_ADDR_VAR 0 6
75094: PUSH
75095: LD_VAR 0 5
75099: PPUSH
75100: LD_INT 91
75102: PUSH
75103: LD_VAR 0 4
75107: PUSH
75108: LD_INT 8
75110: PUSH
75111: EMPTY
75112: LIST
75113: LIST
75114: LIST
75115: PPUSH
75116: CALL_OW 72
75120: ST_TO_ADDR
// if nearEnemy then
75121: LD_VAR 0 6
75125: IFFALSE 75194
// begin if GetWeapon ( i ) = ru_time_lapser then
75127: LD_VAR 0 4
75131: PPUSH
75132: CALL_OW 264
75136: PUSH
75137: LD_INT 49
75139: EQUAL
75140: IFFALSE 75168
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
75142: LD_VAR 0 4
75146: PPUSH
75147: LD_VAR 0 6
75151: PPUSH
75152: LD_VAR 0 4
75156: PPUSH
75157: CALL_OW 74
75161: PPUSH
75162: CALL_OW 112
75166: GO 75192
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
75168: LD_VAR 0 4
75172: PPUSH
75173: LD_VAR 0 6
75177: PPUSH
75178: LD_VAR 0 4
75182: PPUSH
75183: CALL_OW 74
75187: PPUSH
75188: CALL_OW 115
// end else
75192: GO 75294
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75194: LD_VAR 0 4
75198: PPUSH
75199: LD_VAR 0 2
75203: PUSH
75204: LD_VAR 0 9
75208: ARRAY
75209: PUSH
75210: LD_INT 1
75212: ARRAY
75213: PPUSH
75214: LD_VAR 0 2
75218: PUSH
75219: LD_VAR 0 9
75223: ARRAY
75224: PUSH
75225: LD_INT 2
75227: ARRAY
75228: PPUSH
75229: CALL_OW 297
75233: PUSH
75234: LD_INT 6
75236: GREATER
75237: IFFALSE 75280
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75239: LD_VAR 0 4
75243: PPUSH
75244: LD_VAR 0 2
75248: PUSH
75249: LD_VAR 0 9
75253: ARRAY
75254: PUSH
75255: LD_INT 1
75257: ARRAY
75258: PPUSH
75259: LD_VAR 0 2
75263: PUSH
75264: LD_VAR 0 9
75268: ARRAY
75269: PUSH
75270: LD_INT 2
75272: ARRAY
75273: PPUSH
75274: CALL_OW 114
75278: GO 75294
// SetTag ( i , tag ) ;
75280: LD_VAR 0 4
75284: PPUSH
75285: LD_VAR 0 9
75289: PPUSH
75290: CALL_OW 109
// end else
75294: GO 75367
// if enemy then
75296: LD_VAR 0 5
75300: IFFALSE 75367
// begin if GetWeapon ( i ) = ru_time_lapser then
75302: LD_VAR 0 4
75306: PPUSH
75307: CALL_OW 264
75311: PUSH
75312: LD_INT 49
75314: EQUAL
75315: IFFALSE 75343
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
75317: LD_VAR 0 4
75321: PPUSH
75322: LD_VAR 0 5
75326: PPUSH
75327: LD_VAR 0 4
75331: PPUSH
75332: CALL_OW 74
75336: PPUSH
75337: CALL_OW 112
75341: GO 75367
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
75343: LD_VAR 0 4
75347: PPUSH
75348: LD_VAR 0 5
75352: PPUSH
75353: LD_VAR 0 4
75357: PPUSH
75358: CALL_OW 74
75362: PPUSH
75363: CALL_OW 115
// end ; end ;
75367: GO 74947
75369: POP
75370: POP
// end ;
75371: LD_VAR 0 3
75375: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
75376: LD_INT 0
75378: PPUSH
75379: PPUSH
75380: PPUSH
// if not unit or IsInUnit ( unit ) then
75381: LD_VAR 0 1
75385: NOT
75386: PUSH
75387: LD_VAR 0 1
75391: PPUSH
75392: CALL_OW 310
75396: OR
75397: IFFALSE 75401
// exit ;
75399: GO 75492
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
75401: LD_ADDR_VAR 0 4
75405: PUSH
75406: LD_VAR 0 1
75410: PPUSH
75411: CALL_OW 250
75415: PPUSH
75416: LD_VAR 0 2
75420: PPUSH
75421: LD_INT 1
75423: PPUSH
75424: CALL_OW 272
75428: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
75429: LD_ADDR_VAR 0 5
75433: PUSH
75434: LD_VAR 0 1
75438: PPUSH
75439: CALL_OW 251
75443: PPUSH
75444: LD_VAR 0 2
75448: PPUSH
75449: LD_INT 1
75451: PPUSH
75452: CALL_OW 273
75456: ST_TO_ADDR
// if ValidHex ( x , y ) then
75457: LD_VAR 0 4
75461: PPUSH
75462: LD_VAR 0 5
75466: PPUSH
75467: CALL_OW 488
75471: IFFALSE 75492
// ComTurnXY ( unit , x , y ) ;
75473: LD_VAR 0 1
75477: PPUSH
75478: LD_VAR 0 4
75482: PPUSH
75483: LD_VAR 0 5
75487: PPUSH
75488: CALL_OW 118
// end ;
75492: LD_VAR 0 3
75496: RET
// export function SeeUnits ( side , units ) ; var i ; begin
75497: LD_INT 0
75499: PPUSH
75500: PPUSH
// result := false ;
75501: LD_ADDR_VAR 0 3
75505: PUSH
75506: LD_INT 0
75508: ST_TO_ADDR
// if not units then
75509: LD_VAR 0 2
75513: NOT
75514: IFFALSE 75518
// exit ;
75516: GO 75563
// for i in units do
75518: LD_ADDR_VAR 0 4
75522: PUSH
75523: LD_VAR 0 2
75527: PUSH
75528: FOR_IN
75529: IFFALSE 75561
// if See ( side , i ) then
75531: LD_VAR 0 1
75535: PPUSH
75536: LD_VAR 0 4
75540: PPUSH
75541: CALL_OW 292
75545: IFFALSE 75559
// begin result := true ;
75547: LD_ADDR_VAR 0 3
75551: PUSH
75552: LD_INT 1
75554: ST_TO_ADDR
// exit ;
75555: POP
75556: POP
75557: GO 75563
// end ;
75559: GO 75528
75561: POP
75562: POP
// end ;
75563: LD_VAR 0 3
75567: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75568: LD_INT 0
75570: PPUSH
75571: PPUSH
75572: PPUSH
75573: PPUSH
// if not unit or not points then
75574: LD_VAR 0 1
75578: NOT
75579: PUSH
75580: LD_VAR 0 2
75584: NOT
75585: OR
75586: IFFALSE 75590
// exit ;
75588: GO 75680
// dist := 99999 ;
75590: LD_ADDR_VAR 0 5
75594: PUSH
75595: LD_INT 99999
75597: ST_TO_ADDR
// for i in points do
75598: LD_ADDR_VAR 0 4
75602: PUSH
75603: LD_VAR 0 2
75607: PUSH
75608: FOR_IN
75609: IFFALSE 75678
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75611: LD_ADDR_VAR 0 6
75615: PUSH
75616: LD_VAR 0 1
75620: PPUSH
75621: LD_VAR 0 4
75625: PUSH
75626: LD_INT 1
75628: ARRAY
75629: PPUSH
75630: LD_VAR 0 4
75634: PUSH
75635: LD_INT 2
75637: ARRAY
75638: PPUSH
75639: CALL_OW 297
75643: ST_TO_ADDR
// if tmpDist < dist then
75644: LD_VAR 0 6
75648: PUSH
75649: LD_VAR 0 5
75653: LESS
75654: IFFALSE 75676
// begin result := i ;
75656: LD_ADDR_VAR 0 3
75660: PUSH
75661: LD_VAR 0 4
75665: ST_TO_ADDR
// dist := tmpDist ;
75666: LD_ADDR_VAR 0 5
75670: PUSH
75671: LD_VAR 0 6
75675: ST_TO_ADDR
// end ; end ;
75676: GO 75608
75678: POP
75679: POP
// end ;
75680: LD_VAR 0 3
75684: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
75685: LD_INT 0
75687: PPUSH
// uc_side := side ;
75688: LD_ADDR_OWVAR 20
75692: PUSH
75693: LD_VAR 0 1
75697: ST_TO_ADDR
// uc_nation := 3 ;
75698: LD_ADDR_OWVAR 21
75702: PUSH
75703: LD_INT 3
75705: ST_TO_ADDR
// vc_chassis := 25 ;
75706: LD_ADDR_OWVAR 37
75710: PUSH
75711: LD_INT 25
75713: ST_TO_ADDR
// vc_engine := engine_siberite ;
75714: LD_ADDR_OWVAR 39
75718: PUSH
75719: LD_INT 3
75721: ST_TO_ADDR
// vc_control := control_computer ;
75722: LD_ADDR_OWVAR 38
75726: PUSH
75727: LD_INT 3
75729: ST_TO_ADDR
// vc_weapon := 59 ;
75730: LD_ADDR_OWVAR 40
75734: PUSH
75735: LD_INT 59
75737: ST_TO_ADDR
// result := CreateVehicle ;
75738: LD_ADDR_VAR 0 5
75742: PUSH
75743: CALL_OW 45
75747: ST_TO_ADDR
// SetDir ( result , d ) ;
75748: LD_VAR 0 5
75752: PPUSH
75753: LD_VAR 0 4
75757: PPUSH
75758: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
75762: LD_VAR 0 5
75766: PPUSH
75767: LD_VAR 0 2
75771: PPUSH
75772: LD_VAR 0 3
75776: PPUSH
75777: LD_INT 0
75779: PPUSH
75780: CALL_OW 48
// end ;
75784: LD_VAR 0 5
75788: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
75789: LD_INT 0
75791: PPUSH
75792: PPUSH
75793: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
75794: LD_ADDR_VAR 0 2
75798: PUSH
75799: LD_INT 0
75801: PUSH
75802: LD_INT 0
75804: PUSH
75805: LD_INT 0
75807: PUSH
75808: LD_INT 0
75810: PUSH
75811: EMPTY
75812: LIST
75813: LIST
75814: LIST
75815: LIST
75816: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
75817: LD_VAR 0 1
75821: NOT
75822: PUSH
75823: LD_VAR 0 1
75827: PPUSH
75828: CALL_OW 264
75832: PUSH
75833: LD_INT 12
75835: PUSH
75836: LD_INT 51
75838: PUSH
75839: LD_INT 32
75841: PUSH
75842: LD_INT 89
75844: PUSH
75845: EMPTY
75846: LIST
75847: LIST
75848: LIST
75849: LIST
75850: IN
75851: NOT
75852: OR
75853: IFFALSE 75857
// exit ;
75855: GO 75955
// for i := 1 to 3 do
75857: LD_ADDR_VAR 0 3
75861: PUSH
75862: DOUBLE
75863: LD_INT 1
75865: DEC
75866: ST_TO_ADDR
75867: LD_INT 3
75869: PUSH
75870: FOR_TO
75871: IFFALSE 75953
// begin tmp := GetCargo ( cargo , i ) ;
75873: LD_ADDR_VAR 0 4
75877: PUSH
75878: LD_VAR 0 1
75882: PPUSH
75883: LD_VAR 0 3
75887: PPUSH
75888: CALL_OW 289
75892: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
75893: LD_ADDR_VAR 0 2
75897: PUSH
75898: LD_VAR 0 2
75902: PPUSH
75903: LD_VAR 0 3
75907: PPUSH
75908: LD_VAR 0 4
75912: PPUSH
75913: CALL_OW 1
75917: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
75918: LD_ADDR_VAR 0 2
75922: PUSH
75923: LD_VAR 0 2
75927: PPUSH
75928: LD_INT 4
75930: PPUSH
75931: LD_VAR 0 2
75935: PUSH
75936: LD_INT 4
75938: ARRAY
75939: PUSH
75940: LD_VAR 0 4
75944: PLUS
75945: PPUSH
75946: CALL_OW 1
75950: ST_TO_ADDR
// end ;
75951: GO 75870
75953: POP
75954: POP
// end ;
75955: LD_VAR 0 2
75959: RET
// export function Length ( array ) ; begin
75960: LD_INT 0
75962: PPUSH
// result := array + 0 ;
75963: LD_ADDR_VAR 0 2
75967: PUSH
75968: LD_VAR 0 1
75972: PUSH
75973: LD_INT 0
75975: PLUS
75976: ST_TO_ADDR
// end ;
75977: LD_VAR 0 2
75981: RET
// export function PrepareArray ( array ) ; begin
75982: LD_INT 0
75984: PPUSH
// result := array diff 0 ;
75985: LD_ADDR_VAR 0 2
75989: PUSH
75990: LD_VAR 0 1
75994: PUSH
75995: LD_INT 0
75997: DIFF
75998: ST_TO_ADDR
// if not result [ 1 ] then
75999: LD_VAR 0 2
76003: PUSH
76004: LD_INT 1
76006: ARRAY
76007: NOT
76008: IFFALSE 76028
// result := Delete ( result , 1 ) ;
76010: LD_ADDR_VAR 0 2
76014: PUSH
76015: LD_VAR 0 2
76019: PPUSH
76020: LD_INT 1
76022: PPUSH
76023: CALL_OW 3
76027: ST_TO_ADDR
// end ;
76028: LD_VAR 0 2
76032: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
76033: LD_INT 0
76035: PPUSH
76036: PPUSH
76037: PPUSH
76038: PPUSH
// sibRocketRange := 25 ;
76039: LD_ADDR_VAR 0 6
76043: PUSH
76044: LD_INT 25
76046: ST_TO_ADDR
// result := false ;
76047: LD_ADDR_VAR 0 4
76051: PUSH
76052: LD_INT 0
76054: ST_TO_ADDR
// for i := 0 to 5 do
76055: LD_ADDR_VAR 0 5
76059: PUSH
76060: DOUBLE
76061: LD_INT 0
76063: DEC
76064: ST_TO_ADDR
76065: LD_INT 5
76067: PUSH
76068: FOR_TO
76069: IFFALSE 76136
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
76071: LD_VAR 0 1
76075: PPUSH
76076: LD_VAR 0 5
76080: PPUSH
76081: LD_VAR 0 6
76085: PPUSH
76086: CALL_OW 272
76090: PPUSH
76091: LD_VAR 0 2
76095: PPUSH
76096: LD_VAR 0 5
76100: PPUSH
76101: LD_VAR 0 6
76105: PPUSH
76106: CALL_OW 273
76110: PPUSH
76111: LD_VAR 0 3
76115: PPUSH
76116: CALL_OW 309
76120: IFFALSE 76134
// begin result := true ;
76122: LD_ADDR_VAR 0 4
76126: PUSH
76127: LD_INT 1
76129: ST_TO_ADDR
// exit ;
76130: POP
76131: POP
76132: GO 76138
// end ;
76134: GO 76068
76136: POP
76137: POP
// end ;
76138: LD_VAR 0 4
76142: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
76143: LD_INT 0
76145: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
76146: LD_VAR 0 1
76150: PPUSH
76151: LD_VAR 0 2
76155: PPUSH
76156: LD_INT 0
76158: PPUSH
76159: LD_INT 0
76161: PPUSH
76162: LD_INT 1
76164: PPUSH
76165: LD_INT 0
76167: PPUSH
76168: CALL_OW 587
// end ; end_of_file
76172: LD_VAR 0 3
76176: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76177: LD_VAR 0 1
76181: PUSH
76182: LD_INT 200
76184: DOUBLE
76185: GREATEREQUAL
76186: IFFALSE 76194
76188: LD_INT 299
76190: DOUBLE
76191: LESSEQUAL
76192: IFTRUE 76196
76194: GO 76228
76196: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76197: LD_VAR 0 1
76201: PPUSH
76202: LD_VAR 0 2
76206: PPUSH
76207: LD_VAR 0 3
76211: PPUSH
76212: LD_VAR 0 4
76216: PPUSH
76217: LD_VAR 0 5
76221: PPUSH
76222: CALL 15049 0 5
76226: GO 76305
76228: LD_INT 300
76230: DOUBLE
76231: GREATEREQUAL
76232: IFFALSE 76240
76234: LD_INT 399
76236: DOUBLE
76237: LESSEQUAL
76238: IFTRUE 76242
76240: GO 76304
76242: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76243: LD_VAR 0 1
76247: PPUSH
76248: LD_VAR 0 2
76252: PPUSH
76253: LD_VAR 0 3
76257: PPUSH
76258: LD_VAR 0 4
76262: PPUSH
76263: LD_VAR 0 5
76267: PPUSH
76268: LD_VAR 0 6
76272: PPUSH
76273: LD_VAR 0 7
76277: PPUSH
76278: LD_VAR 0 8
76282: PPUSH
76283: LD_VAR 0 9
76287: PPUSH
76288: LD_VAR 0 10
76292: PPUSH
76293: LD_VAR 0 11
76297: PPUSH
76298: CALL 31465 0 11
76302: GO 76305
76304: POP
// end ;
76305: PPOPN 11
76307: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76308: LD_VAR 0 1
76312: PPUSH
76313: LD_VAR 0 2
76317: PPUSH
76318: LD_VAR 0 3
76322: PPUSH
76323: LD_VAR 0 4
76327: PPUSH
76328: LD_VAR 0 5
76332: PPUSH
76333: CALL 14785 0 5
// end ; end_of_file
76337: PPOPN 5
76339: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76340: LD_VAR 0 1
76344: PPUSH
76345: LD_VAR 0 2
76349: PPUSH
76350: LD_VAR 0 3
76354: PPUSH
76355: LD_VAR 0 4
76359: PPUSH
76360: LD_VAR 0 5
76364: PPUSH
76365: LD_VAR 0 6
76369: PPUSH
76370: CALL 19117 0 6
// end ;
76374: PPOPN 6
76376: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76377: LD_INT 0
76379: PPUSH
// begin if not units then
76380: LD_VAR 0 1
76384: NOT
76385: IFFALSE 76389
// exit ;
76387: GO 76389
// end ;
76389: PPOPN 7
76391: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76392: CALL 19021 0 0
// end ;
76396: PPOPN 1
76398: END
