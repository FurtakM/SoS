// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 752 0 2
// PrepareArabian ;
  31: CALL 1369 0 0
// PrepareRussian ;
  35: CALL 3020 0 0
// Action ;
  39: CALL 8440 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: LD_INT 7
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_STRING 04_1_RuLabCaptured
 221: PPUSH
 222: LD_INT 0
 224: PPUSH
 225: CALL_OW 30
 229: ST_TO_ADDR
// captureCounter := 0 ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// flamethrowerBuilt := false ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 254: LD_ADDR_OWVAR 79
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// solar_recharge_amount := 0 ;
 262: LD_ADDR_OWVAR 82
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// end ;
 270: LD_VAR 0 1
 274: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 275: LD_EXP 10
 279: NOT
 280: PUSH
 281: LD_EXP 9
 285: NOT
 286: AND
 287: PUSH
 288: LD_EXP 39
 292: NOT
 293: AND
 294: PUSH
 295: LD_EXP 40
 299: NOT
 300: AND
 301: IFFALSE 313
 303: GO 305
 305: DISABLE
// SetAchievement ( ACH_EXT ) ;
 306: LD_STRING ACH_EXT
 308: PPUSH
 309: CALL_OW 543
 313: END
// every 0 0$1 trigger captureCounter >= 6 do
 314: LD_EXP 18
 318: PUSH
 319: LD_INT 6
 321: GREATEREQUAL
 322: IFFALSE 334
 324: GO 326
 326: DISABLE
// SetAchievement ( ACH_KEY ) ;
 327: LD_STRING ACH_KEY
 329: PPUSH
 330: CALL_OW 543
 334: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 335: LD_EXP 19
 339: PUSH
 340: LD_INT 3
 342: GREATEREQUAL
 343: IFFALSE 355
 345: GO 347
 347: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 348: LD_STRING ACH_CHEM
 350: PPUSH
 351: CALL_OW 543
 355: END
// every 0 0$1 trigger debug do var i ;
 356: LD_EXP 1
 360: IFFALSE 444
 362: GO 364
 364: DISABLE
 365: LD_INT 0
 367: PPUSH
// begin enable ;
 368: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 369: LD_ADDR_VAR 0 1
 373: PUSH
 374: LD_INT 22
 376: PUSH
 377: LD_INT 2
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: LD_INT 3
 386: PUSH
 387: LD_INT 21
 389: PUSH
 390: LD_INT 3
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: PPUSH
 405: CALL_OW 69
 409: PUSH
 410: FOR_IN
 411: IFFALSE 442
// if GetLives ( i ) < 1000 then
 413: LD_VAR 0 1
 417: PPUSH
 418: CALL_OW 256
 422: PUSH
 423: LD_INT 1000
 425: LESS
 426: IFFALSE 440
// SetLives ( i , 1000 ) ;
 428: LD_VAR 0 1
 432: PPUSH
 433: LD_INT 1000
 435: PPUSH
 436: CALL_OW 234
 440: GO 410
 442: POP
 443: POP
// end ; end_of_file
 444: PPOPN 1
 446: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 447: LD_INT 0
 449: PPUSH
// uc_side := side ;
 450: LD_ADDR_OWVAR 20
 454: PUSH
 455: LD_VAR 0 1
 459: ST_TO_ADDR
// uc_nation := nation ;
 460: LD_ADDR_OWVAR 21
 464: PUSH
 465: LD_VAR 0 2
 469: ST_TO_ADDR
// vc_chassis := chassis ;
 470: LD_ADDR_OWVAR 37
 474: PUSH
 475: LD_VAR 0 3
 479: ST_TO_ADDR
// vc_engine := engine ;
 480: LD_ADDR_OWVAR 39
 484: PUSH
 485: LD_VAR 0 4
 489: ST_TO_ADDR
// vc_control := control ;
 490: LD_ADDR_OWVAR 38
 494: PUSH
 495: LD_VAR 0 5
 499: ST_TO_ADDR
// vc_weapon := weapon ;
 500: LD_ADDR_OWVAR 40
 504: PUSH
 505: LD_VAR 0 6
 509: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 510: LD_ADDR_OWVAR 41
 514: PUSH
 515: LD_VAR 0 7
 519: ST_TO_ADDR
// result := CreateVehicle ;
 520: LD_ADDR_VAR 0 8
 524: PUSH
 525: CALL_OW 45
 529: ST_TO_ADDR
// end ;
 530: LD_VAR 0 8
 534: RET
// export function SayX ( units , ident ) ; var i ; begin
 535: LD_INT 0
 537: PPUSH
 538: PPUSH
// result := false ;
 539: LD_ADDR_VAR 0 3
 543: PUSH
 544: LD_INT 0
 546: ST_TO_ADDR
// if not units then
 547: LD_VAR 0 1
 551: NOT
 552: IFFALSE 556
// exit ;
 554: GO 610
// for i in units do
 556: LD_ADDR_VAR 0 4
 560: PUSH
 561: LD_VAR 0 1
 565: PUSH
 566: FOR_IN
 567: IFFALSE 608
// if IsOk ( i ) then
 569: LD_VAR 0 4
 573: PPUSH
 574: CALL_OW 302
 578: IFFALSE 606
// begin Say ( i , ident ) ;
 580: LD_VAR 0 4
 584: PPUSH
 585: LD_VAR 0 2
 589: PPUSH
 590: CALL_OW 88
// result := i ;
 594: LD_ADDR_VAR 0 3
 598: PUSH
 599: LD_VAR 0 4
 603: ST_TO_ADDR
// break ;
 604: GO 608
// end ;
 606: GO 566
 608: POP
 609: POP
// end ;
 610: LD_VAR 0 3
 614: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 615: LD_INT 0
 617: PPUSH
 618: PPUSH
// InitUc ;
 619: CALL_OW 18
// InitHc ;
 623: CALL_OW 19
// uc_side := 0 ;
 627: LD_ADDR_OWVAR 20
 631: PUSH
 632: LD_INT 0
 634: ST_TO_ADDR
// uc_nation := 0 ;
 635: LD_ADDR_OWVAR 21
 639: PUSH
 640: LD_INT 0
 642: ST_TO_ADDR
// for i = 1 to amount do
 643: LD_ADDR_VAR 0 4
 647: PUSH
 648: DOUBLE
 649: LD_INT 1
 651: DEC
 652: ST_TO_ADDR
 653: LD_VAR 0 2
 657: PUSH
 658: FOR_TO
 659: IFFALSE 741
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 661: LD_ADDR_OWVAR 29
 665: PUSH
 666: LD_INT 9
 668: PPUSH
 669: LD_INT 12
 671: PPUSH
 672: CALL_OW 12
 676: PUSH
 677: LD_INT 9
 679: PPUSH
 680: LD_INT 12
 682: PPUSH
 683: CALL_OW 12
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 692: LD_ADDR_OWVAR 35
 696: PUSH
 697: LD_INT 1
 699: NEG
 700: PPUSH
 701: LD_INT 1
 703: PPUSH
 704: CALL_OW 12
 708: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 709: LD_INT 0
 711: PPUSH
 712: LD_INT 12
 714: PPUSH
 715: LD_INT 1
 717: PPUSH
 718: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 722: CALL_OW 44
 726: PPUSH
 727: LD_VAR 0 1
 731: PPUSH
 732: LD_INT 0
 734: PPUSH
 735: CALL_OW 49
// end ;
 739: GO 658
 741: POP
 742: POP
// InitHc ;
 743: CALL_OW 19
// end ;
 747: LD_VAR 0 3
 751: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 752: LD_INT 0
 754: PPUSH
 755: PPUSH
// uc_side := 0 ;
 756: LD_ADDR_OWVAR 20
 760: PUSH
 761: LD_INT 0
 763: ST_TO_ADDR
// uc_nation := 0 ;
 764: LD_ADDR_OWVAR 21
 768: PUSH
 769: LD_INT 0
 771: ST_TO_ADDR
// for i := 1 to 3 do
 772: LD_ADDR_VAR 0 4
 776: PUSH
 777: DOUBLE
 778: LD_INT 1
 780: DEC
 781: ST_TO_ADDR
 782: LD_INT 3
 784: PUSH
 785: FOR_TO
 786: IFFALSE 823
// begin hc_class := 21 ;
 788: LD_ADDR_OWVAR 28
 792: PUSH
 793: LD_INT 21
 795: ST_TO_ADDR
// hc_gallery :=  ;
 796: LD_ADDR_OWVAR 33
 800: PUSH
 801: LD_STRING 
 803: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 804: CALL_OW 44
 808: PPUSH
 809: LD_VAR 0 1
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 49
// end ;
 821: GO 785
 823: POP
 824: POP
// for i := 1 to 3 do
 825: LD_ADDR_VAR 0 4
 829: PUSH
 830: DOUBLE
 831: LD_INT 1
 833: DEC
 834: ST_TO_ADDR
 835: LD_INT 3
 837: PUSH
 838: FOR_TO
 839: IFFALSE 876
// begin hc_class := 18 ;
 841: LD_ADDR_OWVAR 28
 845: PUSH
 846: LD_INT 18
 848: ST_TO_ADDR
// hc_gallery :=  ;
 849: LD_ADDR_OWVAR 33
 853: PUSH
 854: LD_STRING 
 856: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 857: CALL_OW 44
 861: PPUSH
 862: LD_VAR 0 1
 866: PPUSH
 867: LD_INT 0
 869: PPUSH
 870: CALL_OW 49
// end ;
 874: GO 838
 876: POP
 877: POP
// for i := 1 to 3 do
 878: LD_ADDR_VAR 0 4
 882: PUSH
 883: DOUBLE
 884: LD_INT 1
 886: DEC
 887: ST_TO_ADDR
 888: LD_INT 3
 890: PUSH
 891: FOR_TO
 892: IFFALSE 929
// begin hc_class := 13 ;
 894: LD_ADDR_OWVAR 28
 898: PUSH
 899: LD_INT 13
 901: ST_TO_ADDR
// hc_gallery :=  ;
 902: LD_ADDR_OWVAR 33
 906: PUSH
 907: LD_STRING 
 909: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 910: CALL_OW 44
 914: PPUSH
 915: LD_VAR 0 1
 919: PPUSH
 920: LD_INT 0
 922: PPUSH
 923: CALL_OW 49
// end ;
 927: GO 891
 929: POP
 930: POP
// for i := 1 to 4 do
 931: LD_ADDR_VAR 0 4
 935: PUSH
 936: DOUBLE
 937: LD_INT 1
 939: DEC
 940: ST_TO_ADDR
 941: LD_INT 4
 943: PUSH
 944: FOR_TO
 945: IFFALSE 982
// begin hc_class := class_frog ;
 947: LD_ADDR_OWVAR 28
 951: PUSH
 952: LD_INT 19
 954: ST_TO_ADDR
// hc_gallery :=  ;
 955: LD_ADDR_OWVAR 33
 959: PUSH
 960: LD_STRING 
 962: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 963: CALL_OW 44
 967: PPUSH
 968: LD_VAR 0 2
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: CALL_OW 49
// end ;
 980: GO 944
 982: POP
 983: POP
// end ;
 984: LD_VAR 0 3
 988: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 989: LD_INT 0
 991: PPUSH
 992: PPUSH
 993: PPUSH
// if not observer or not unit then
 994: LD_VAR 0 1
 998: NOT
 999: PUSH
1000: LD_VAR 0 2
1004: NOT
1005: OR
1006: IFFALSE 1010
// exit ;
1008: GO 1058
// if not See ( GetSide ( observer ) , unit ) then
1010: LD_VAR 0 1
1014: PPUSH
1015: CALL_OW 255
1019: PPUSH
1020: LD_VAR 0 2
1024: PPUSH
1025: CALL_OW 292
1029: NOT
1030: IFFALSE 1034
// exit ;
1032: GO 1058
// result := GetDistUnits ( observer , unit ) < 12 ;
1034: LD_ADDR_VAR 0 3
1038: PUSH
1039: LD_VAR 0 1
1043: PPUSH
1044: LD_VAR 0 2
1048: PPUSH
1049: CALL_OW 296
1053: PUSH
1054: LD_INT 12
1056: LESS
1057: ST_TO_ADDR
// end ;
1058: LD_VAR 0 3
1062: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1063: LD_INT 0
1065: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1066: LD_VAR 0 2
1070: PUSH
1071: LD_INT 1
1073: ARRAY
1074: PPUSH
1075: LD_VAR 0 2
1079: PUSH
1080: LD_INT 2
1082: ARRAY
1083: PPUSH
1084: CALL_OW 488
1088: PUSH
1089: LD_VAR 0 2
1093: PUSH
1094: LD_INT 1
1096: ARRAY
1097: PPUSH
1098: LD_VAR 0 2
1102: PUSH
1103: LD_INT 2
1105: ARRAY
1106: PPUSH
1107: CALL_OW 428
1111: PUSH
1112: LD_INT 0
1114: EQUAL
1115: AND
1116: IFFALSE 1150
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1118: LD_VAR 0 1
1122: PPUSH
1123: LD_VAR 0 2
1127: PUSH
1128: LD_INT 1
1130: ARRAY
1131: PPUSH
1132: LD_VAR 0 2
1136: PUSH
1137: LD_INT 2
1139: ARRAY
1140: PPUSH
1141: LD_VAR 0 3
1145: PPUSH
1146: CALL_OW 48
// end ;
1150: LD_VAR 0 4
1154: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1155: LD_INT 0
1157: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1158: LD_VAR 0 1
1162: PPUSH
1163: LD_VAR 0 2
1167: PPUSH
1168: LD_VAR 0 3
1172: PPUSH
1173: LD_VAR 0 4
1177: PPUSH
1178: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1182: LD_VAR 0 1
1186: PPUSH
1187: LD_VAR 0 2
1191: PPUSH
1192: LD_VAR 0 3
1196: PPUSH
1197: CALL_OW 331
// end ;
1201: LD_VAR 0 5
1205: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1206: LD_INT 0
1208: PPUSH
// if not units then
1209: LD_VAR 0 1
1213: NOT
1214: IFFALSE 1218
// exit ;
1216: GO 1301
// result := true ;
1218: LD_ADDR_VAR 0 4
1222: PUSH
1223: LD_INT 1
1225: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1226: LD_VAR 0 1
1230: PPUSH
1231: LD_INT 26
1233: PUSH
1234: LD_INT 1
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PPUSH
1241: CALL_OW 72
1245: PUSH
1246: LD_INT 1
1248: ARRAY
1249: PPUSH
1250: LD_VAR 0 2
1254: PPUSH
1255: CALL_OW 88
1259: NOT
1260: IFFALSE 1301
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1262: LD_ADDR_VAR 0 4
1266: PUSH
1267: LD_VAR 0 1
1271: PPUSH
1272: LD_INT 26
1274: PUSH
1275: LD_INT 2
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PPUSH
1282: CALL_OW 72
1286: PUSH
1287: LD_INT 1
1289: ARRAY
1290: PPUSH
1291: LD_VAR 0 3
1295: PPUSH
1296: CALL_OW 88
1300: ST_TO_ADDR
// end ;
1301: LD_VAR 0 4
1305: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1306: LD_INT 0
1308: PPUSH
1309: PPUSH
// if not group then
1310: LD_VAR 0 2
1314: NOT
1315: IFFALSE 1319
// exit ;
1317: GO 1364
// for i in group do
1319: LD_ADDR_VAR 0 4
1323: PUSH
1324: LD_VAR 0 2
1328: PUSH
1329: FOR_IN
1330: IFFALSE 1362
// if See ( side , i ) then
1332: LD_VAR 0 1
1336: PPUSH
1337: LD_VAR 0 4
1341: PPUSH
1342: CALL_OW 292
1346: IFFALSE 1360
// begin result := true ;
1348: LD_ADDR_VAR 0 3
1352: PUSH
1353: LD_INT 1
1355: ST_TO_ADDR
// exit ;
1356: POP
1357: POP
1358: GO 1364
// end ;
1360: GO 1329
1362: POP
1363: POP
// end ; end_of_file
1364: LD_VAR 0 3
1368: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1369: LD_INT 0
1371: PPUSH
1372: PPUSH
// uc_side := 2 ;
1373: LD_ADDR_OWVAR 20
1377: PUSH
1378: LD_INT 2
1380: ST_TO_ADDR
// uc_nation := 2 ;
1381: LD_ADDR_OWVAR 21
1385: PUSH
1386: LD_INT 2
1388: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1389: LD_ADDR_EXP 21
1393: PUSH
1394: LD_STRING Heike
1396: PPUSH
1397: LD_EXP 1
1401: NOT
1402: PPUSH
1403: LD_EXP 2
1407: PPUSH
1408: CALL 36276 0 3
1412: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1413: LD_ADDR_EXP 24
1417: PUSH
1418: LD_STRING Ibrahim
1420: PPUSH
1421: LD_EXP 1
1425: NOT
1426: PPUSH
1427: LD_EXP 2
1431: PPUSH
1432: CALL 36276 0 3
1436: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1437: LD_ADDR_EXP 22
1441: PUSH
1442: LD_STRING Givi
1444: PPUSH
1445: LD_EXP 1
1449: NOT
1450: PPUSH
1451: LD_EXP 2
1455: PPUSH
1456: CALL 36276 0 3
1460: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1461: LD_ADDR_EXP 25
1465: PUSH
1466: LD_STRING Kamil
1468: PPUSH
1469: LD_EXP 1
1473: NOT
1474: PPUSH
1475: LD_EXP 2
1479: PPUSH
1480: CALL 36276 0 3
1484: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1485: LD_ADDR_EXP 26
1489: PUSH
1490: LD_STRING Kaia
1492: PPUSH
1493: LD_EXP 1
1497: NOT
1498: PPUSH
1499: LD_EXP 2
1503: PPUSH
1504: CALL 36276 0 3
1508: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1509: LD_ADDR_EXP 27
1513: PUSH
1514: LD_STRING Sophia
1516: PPUSH
1517: LD_EXP 1
1521: NOT
1522: PPUSH
1523: LD_EXP 2
1527: PPUSH
1528: CALL 36276 0 3
1532: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1533: LD_ADDR_EXP 28
1537: PUSH
1538: LD_STRING Markov
1540: PPUSH
1541: LD_EXP 1
1545: NOT
1546: PPUSH
1547: LD_EXP 2
1551: PPUSH
1552: CALL 36276 0 3
1556: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1557: LD_ADDR_EXP 33
1561: PUSH
1562: LD_STRING Aviradze
1564: PPUSH
1565: LD_EXP 1
1569: NOT
1570: PPUSH
1571: LD_EXP 2
1575: PPUSH
1576: CALL 36276 0 3
1580: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1581: LD_ADDR_EXP 32
1585: PUSH
1586: LD_STRING Kurt
1588: PPUSH
1589: LD_EXP 1
1593: NOT
1594: PPUSH
1595: LD_EXP 2
1599: PPUSH
1600: CALL 36276 0 3
1604: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1605: LD_ADDR_EXP 23
1609: PUSH
1610: LD_STRING Mike
1612: PPUSH
1613: LD_EXP 1
1617: NOT
1618: PPUSH
1619: LD_EXP 2
1623: PPUSH
1624: CALL 36276 0 3
1628: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1629: LD_ADDR_EXP 30
1633: PUSH
1634: LD_STRING Olaf
1636: PPUSH
1637: LD_INT 0
1639: PPUSH
1640: LD_STRING 
1642: PPUSH
1643: CALL 36276 0 3
1647: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1648: LD_ADDR_EXP 34
1652: PUSH
1653: LD_STRING 04_2_others
1655: PPUSH
1656: CALL_OW 31
1660: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1661: LD_ADDR_EXP 36
1665: PUSH
1666: LD_STRING 04_2_apes
1668: PPUSH
1669: CALL_OW 31
1673: ST_TO_ADDR
// if hasFlamethrower then
1674: LD_EXP 3
1678: IFFALSE 1913
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1680: LD_INT 70
1682: PPUSH
1683: LD_INT 2
1685: PPUSH
1686: LD_INT 2
1688: PPUSH
1689: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1693: LD_ADDR_EXP 35
1697: PUSH
1698: LD_INT 13
1700: PUSH
1701: LD_INT 1
1703: PUSH
1704: LD_INT 1
1706: PUSH
1707: LD_INT 27
1709: PUSH
1710: LD_INT 2
1712: PUSH
1713: LD_INT 1000
1715: PUSH
1716: LD_INT 0
1718: PUSH
1719: LD_INT 0
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: PUSH
1735: LD_INT 13
1737: PUSH
1738: LD_INT 1
1740: PUSH
1741: LD_INT 1
1743: PUSH
1744: LD_INT 25
1746: PUSH
1747: LD_INT 2
1749: PUSH
1750: LD_INT 1000
1752: PUSH
1753: LD_INT 0
1755: PUSH
1756: LD_INT 0
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: PUSH
1772: LD_INT 13
1774: PUSH
1775: LD_INT 1
1777: PUSH
1778: LD_INT 1
1780: PUSH
1781: LD_INT 26
1783: PUSH
1784: LD_INT 2
1786: PUSH
1787: LD_INT 1000
1789: PUSH
1790: LD_INT 0
1792: PUSH
1793: LD_INT 0
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: PUSH
1809: LD_INT 13
1811: PUSH
1812: LD_INT 1
1814: PUSH
1815: LD_INT 1
1817: PUSH
1818: LD_INT 27
1820: PUSH
1821: LD_INT 2
1823: PUSH
1824: LD_INT 1000
1826: PUSH
1827: LD_INT 0
1829: PUSH
1830: LD_INT 0
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: PUSH
1846: LD_INT 13
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: LD_INT 1
1854: PUSH
1855: LD_INT 32
1857: PUSH
1858: LD_INT 2
1860: PUSH
1861: LD_INT 1000
1863: PUSH
1864: LD_INT 0
1866: PUSH
1867: LD_INT 60
1869: PUSH
1870: LD_INT 40
1872: PUSH
1873: LD_INT 20
1875: PUSH
1876: LD_INT 10
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: PUSH
1885: LD_OWVAR 67
1889: ARRAY
1890: PUSH
1891: EMPTY
1892: LIST
1893: LIST
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: ST_TO_ADDR
// end else
1911: GO 2131
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1913: LD_ADDR_EXP 35
1917: PUSH
1918: LD_INT 13
1920: PUSH
1921: LD_INT 1
1923: PUSH
1924: LD_INT 1
1926: PUSH
1927: LD_INT 25
1929: PUSH
1930: LD_INT 2
1932: PUSH
1933: LD_INT 1000
1935: PUSH
1936: LD_INT 0
1938: PUSH
1939: LD_INT 0
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: PUSH
1955: LD_INT 13
1957: PUSH
1958: LD_INT 1
1960: PUSH
1961: LD_INT 1
1963: PUSH
1964: LD_INT 27
1966: PUSH
1967: LD_INT 2
1969: PUSH
1970: LD_INT 1000
1972: PUSH
1973: LD_INT 0
1975: PUSH
1976: LD_INT 0
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: PUSH
1992: LD_INT 13
1994: PUSH
1995: LD_INT 1
1997: PUSH
1998: LD_INT 1
2000: PUSH
2001: LD_INT 24
2003: PUSH
2004: LD_INT 2
2006: PUSH
2007: LD_INT 1000
2009: PUSH
2010: LD_INT 0
2012: PUSH
2013: LD_INT 0
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: LIST
2025: LIST
2026: LIST
2027: LIST
2028: PUSH
2029: LD_INT 13
2031: PUSH
2032: LD_INT 1
2034: PUSH
2035: LD_INT 1
2037: PUSH
2038: LD_INT 27
2040: PUSH
2041: LD_INT 2
2043: PUSH
2044: LD_INT 1000
2046: PUSH
2047: LD_INT 0
2049: PUSH
2050: LD_INT 0
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: PUSH
2066: LD_INT 13
2068: PUSH
2069: LD_INT 1
2071: PUSH
2072: LD_INT 1
2074: PUSH
2075: LD_INT 32
2077: PUSH
2078: LD_INT 2
2080: PUSH
2081: LD_INT 1000
2083: PUSH
2084: LD_INT 0
2086: PUSH
2087: LD_INT 50
2089: PUSH
2090: LD_INT 30
2092: PUSH
2093: LD_INT 20
2095: PUSH
2096: LD_INT 10
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: PUSH
2105: LD_OWVAR 67
2109: ARRAY
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: ST_TO_ADDR
// end ; uc_side := 5 ;
2131: LD_ADDR_OWVAR 20
2135: PUSH
2136: LD_INT 5
2138: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2139: LD_ADDR_EXP 29
2143: PUSH
2144: LD_STRING Abdul
2146: PPUSH
2147: LD_INT 0
2149: PPUSH
2150: LD_STRING 
2152: PPUSH
2153: CALL 36276 0 3
2157: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2158: LD_ADDR_EXP 31
2162: PUSH
2163: LD_STRING Omar
2165: PPUSH
2166: LD_INT 0
2168: PPUSH
2169: LD_STRING 
2171: PPUSH
2172: CALL 36276 0 3
2176: ST_TO_ADDR
// end ;
2177: LD_VAR 0 1
2181: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2182: LD_INT 0
2184: PPUSH
2185: PPUSH
2186: PPUSH
2187: PPUSH
2188: PPUSH
// pfx := 04_1_ ;
2189: LD_ADDR_VAR 0 2
2193: PUSH
2194: LD_STRING 04_1_
2196: ST_TO_ADDR
// if HexInfo ( 10 , 16 ) then
2197: LD_INT 10
2199: PPUSH
2200: LD_INT 16
2202: PPUSH
2203: CALL_OW 428
2207: IFFALSE 2232
// ComMoveXY ( HexInfo ( 10 , 16 ) , 18 , 18 ) else
2209: LD_INT 10
2211: PPUSH
2212: LD_INT 16
2214: PPUSH
2215: CALL_OW 428
2219: PPUSH
2220: LD_INT 18
2222: PPUSH
2223: LD_INT 18
2225: PPUSH
2226: CALL_OW 111
2230: GO 2242
// EraseResourceArea ( mat_cans , westSpawnPointArea ) ;
2232: LD_INT 1
2234: PPUSH
2235: LD_INT 14
2237: PPUSH
2238: CALL_OW 286
// repeat wait ( 0 0$1 ) ;
2242: LD_INT 35
2244: PPUSH
2245: CALL_OW 67
// until not HexInfo ( 10 , 16 ) ;
2249: LD_INT 10
2251: PPUSH
2252: LD_INT 16
2254: PPUSH
2255: CALL_OW 428
2259: NOT
2260: IFFALSE 2242
// tmp := [ ] ;
2262: LD_ADDR_VAR 0 4
2266: PUSH
2267: EMPTY
2268: ST_TO_ADDR
// uc_side := 5 ;
2269: LD_ADDR_OWVAR 20
2273: PUSH
2274: LD_INT 5
2276: ST_TO_ADDR
// uc_nation := 2 ;
2277: LD_ADDR_OWVAR 21
2281: PUSH
2282: LD_INT 2
2284: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2285: LD_ADDR_EXP 33
2289: PUSH
2290: LD_STRING Aviradze_L
2292: PPUSH
2293: LD_EXP 1
2297: NOT
2298: PPUSH
2299: LD_VAR 0 2
2303: PPUSH
2304: CALL 36276 0 3
2308: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2309: LD_EXP 33
2313: PPUSH
2314: LD_INT 2
2316: PPUSH
2317: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2321: LD_EXP 33
2325: PPUSH
2326: LD_INT 14
2328: PPUSH
2329: LD_INT 0
2331: PPUSH
2332: CALL_OW 49
// ComMoveXY ( Aviradze , 25 , 19 ) ;
2336: LD_EXP 33
2340: PPUSH
2341: LD_INT 25
2343: PPUSH
2344: LD_INT 19
2346: PPUSH
2347: CALL_OW 111
// AddComHold ( Aviradze ) ;
2351: LD_EXP 33
2355: PPUSH
2356: CALL_OW 200
// tmp := [ Aviradze ] ;
2360: LD_ADDR_VAR 0 4
2364: PUSH
2365: LD_EXP 33
2369: PUSH
2370: EMPTY
2371: LIST
2372: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2373: LD_INT 70
2375: PPUSH
2376: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2380: LD_STRING Ibrahim_L
2382: PPUSH
2383: LD_EXP 1
2387: NOT
2388: PPUSH
2389: LD_VAR 0 2
2393: PPUSH
2394: CALL 36276 0 3
2398: IFFALSE 2498
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2400: LD_ADDR_EXP 24
2404: PUSH
2405: LD_STRING Ibrahim_L
2407: PPUSH
2408: LD_EXP 1
2412: NOT
2413: PPUSH
2414: LD_VAR 0 2
2418: PPUSH
2419: CALL 36276 0 3
2423: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2424: LD_EXP 24
2428: PPUSH
2429: LD_INT 2
2431: PPUSH
2432: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2436: LD_EXP 24
2440: PPUSH
2441: LD_INT 14
2443: PPUSH
2444: LD_INT 0
2446: PPUSH
2447: CALL_OW 49
// ComMoveXY ( Ibrahim , 25 , 19 ) ;
2451: LD_EXP 24
2455: PPUSH
2456: LD_INT 25
2458: PPUSH
2459: LD_INT 19
2461: PPUSH
2462: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2466: LD_EXP 24
2470: PPUSH
2471: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2475: LD_ADDR_VAR 0 4
2479: PUSH
2480: LD_VAR 0 4
2484: PUSH
2485: LD_EXP 24
2489: ADD
2490: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2491: LD_INT 70
2493: PPUSH
2494: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2498: LD_STRING Kaia_L
2500: PPUSH
2501: LD_EXP 1
2505: NOT
2506: PPUSH
2507: LD_VAR 0 2
2511: PPUSH
2512: CALL 36276 0 3
2516: IFFALSE 2616
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2518: LD_ADDR_EXP 26
2522: PUSH
2523: LD_STRING Kaia_L
2525: PPUSH
2526: LD_EXP 1
2530: NOT
2531: PPUSH
2532: LD_VAR 0 2
2536: PPUSH
2537: CALL 36276 0 3
2541: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2542: LD_EXP 26
2546: PPUSH
2547: LD_INT 2
2549: PPUSH
2550: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2554: LD_EXP 26
2558: PPUSH
2559: LD_INT 14
2561: PPUSH
2562: LD_INT 0
2564: PPUSH
2565: CALL_OW 49
// ComMoveXY ( Kaia , 25 , 19 ) ;
2569: LD_EXP 26
2573: PPUSH
2574: LD_INT 25
2576: PPUSH
2577: LD_INT 19
2579: PPUSH
2580: CALL_OW 111
// AddComHold ( Kaia ) ;
2584: LD_EXP 26
2588: PPUSH
2589: CALL_OW 200
// tmp := tmp ^ Kaia ;
2593: LD_ADDR_VAR 0 4
2597: PUSH
2598: LD_VAR 0 4
2602: PUSH
2603: LD_EXP 26
2607: ADD
2608: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2609: LD_INT 70
2611: PPUSH
2612: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2616: LD_STRING Kamil_L
2618: PPUSH
2619: LD_EXP 1
2623: NOT
2624: PPUSH
2625: LD_VAR 0 2
2629: PPUSH
2630: CALL 36276 0 3
2634: IFFALSE 2734
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2636: LD_ADDR_EXP 25
2640: PUSH
2641: LD_STRING Kamil_L
2643: PPUSH
2644: LD_EXP 1
2648: NOT
2649: PPUSH
2650: LD_VAR 0 2
2654: PPUSH
2655: CALL 36276 0 3
2659: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2660: LD_EXP 25
2664: PPUSH
2665: LD_INT 2
2667: PPUSH
2668: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2672: LD_EXP 25
2676: PPUSH
2677: LD_INT 14
2679: PPUSH
2680: LD_INT 0
2682: PPUSH
2683: CALL_OW 49
// ComMoveXY ( Kamil , 25 , 19 ) ;
2687: LD_EXP 25
2691: PPUSH
2692: LD_INT 25
2694: PPUSH
2695: LD_INT 19
2697: PPUSH
2698: CALL_OW 111
// AddComHold ( Kamil ) ;
2702: LD_EXP 25
2706: PPUSH
2707: CALL_OW 200
// tmp := tmp ^ Kamil ;
2711: LD_ADDR_VAR 0 4
2715: PUSH
2716: LD_VAR 0 4
2720: PUSH
2721: LD_EXP 25
2725: ADD
2726: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2727: LD_INT 70
2729: PPUSH
2730: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2734: LD_STRING Sophia_L
2736: PPUSH
2737: LD_EXP 1
2741: NOT
2742: PPUSH
2743: LD_VAR 0 2
2747: PPUSH
2748: CALL 36276 0 3
2752: IFFALSE 2852
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2754: LD_ADDR_EXP 27
2758: PUSH
2759: LD_STRING Sophia_L
2761: PPUSH
2762: LD_EXP 1
2766: NOT
2767: PPUSH
2768: LD_VAR 0 2
2772: PPUSH
2773: CALL 36276 0 3
2777: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2778: LD_EXP 27
2782: PPUSH
2783: LD_INT 2
2785: PPUSH
2786: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2790: LD_EXP 27
2794: PPUSH
2795: LD_INT 14
2797: PPUSH
2798: LD_INT 0
2800: PPUSH
2801: CALL_OW 49
// ComMoveXY ( Sophia , 25 , 19 ) ;
2805: LD_EXP 27
2809: PPUSH
2810: LD_INT 25
2812: PPUSH
2813: LD_INT 19
2815: PPUSH
2816: CALL_OW 111
// AddComHold ( Sophia ) ;
2820: LD_EXP 27
2824: PPUSH
2825: CALL_OW 200
// tmp := tmp ^ Sophia ;
2829: LD_ADDR_VAR 0 4
2833: PUSH
2834: LD_VAR 0 4
2838: PUSH
2839: LD_EXP 27
2843: ADD
2844: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2845: LD_INT 70
2847: PPUSH
2848: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2852: LD_ADDR_VAR 0 5
2856: PUSH
2857: LD_STRING 04_1_others_L
2859: PPUSH
2860: CALL_OW 31
2864: ST_TO_ADDR
// if tmp2 then
2865: LD_VAR 0 5
2869: IFFALSE 2966
// for i in tmp2 do
2871: LD_ADDR_VAR 0 3
2875: PUSH
2876: LD_VAR 0 5
2880: PUSH
2881: FOR_IN
2882: IFFALSE 2964
// begin SetDir ( i , 2 ) ;
2884: LD_VAR 0 3
2888: PPUSH
2889: LD_INT 2
2891: PPUSH
2892: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2896: LD_VAR 0 3
2900: PPUSH
2901: LD_INT 14
2903: PPUSH
2904: LD_INT 0
2906: PPUSH
2907: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2911: LD_ADDR_EXP 34
2915: PUSH
2916: LD_EXP 34
2920: PPUSH
2921: LD_EXP 34
2925: PUSH
2926: LD_INT 1
2928: PLUS
2929: PPUSH
2930: LD_VAR 0 3
2934: PPUSH
2935: CALL_OW 1
2939: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2940: LD_VAR 0 3
2944: PPUSH
2945: LD_INT 17
2947: PPUSH
2948: LD_INT 14
2950: PPUSH
2951: CALL_OW 111
// wait ( 0 0$2 ) ;
2955: LD_INT 70
2957: PPUSH
2958: CALL_OW 67
// end ;
2962: GO 2881
2964: POP
2965: POP
// for i in tmp union tmp2 do
2966: LD_ADDR_VAR 0 3
2970: PUSH
2971: LD_VAR 0 4
2975: PUSH
2976: LD_VAR 0 5
2980: UNION
2981: PUSH
2982: FOR_IN
2983: IFFALSE 3013
// begin SetSide ( i , 2 ) ;
2985: LD_VAR 0 3
2989: PPUSH
2990: LD_INT 2
2992: PPUSH
2993: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
2997: LD_VAR 0 3
3001: PPUSH
3002: LD_EXP 21
3006: PPUSH
3007: CALL_OW 112
// end ;
3011: GO 2982
3013: POP
3014: POP
// end ; end_of_file
3015: LD_VAR 0 1
3019: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
3020: LD_INT 0
3022: PPUSH
3023: PPUSH
3024: PPUSH
// uc_side := 3 ;
3025: LD_ADDR_OWVAR 20
3029: PUSH
3030: LD_INT 3
3032: ST_TO_ADDR
// uc_nation := 3 ;
3033: LD_ADDR_OWVAR 21
3037: PUSH
3038: LD_INT 3
3040: ST_TO_ADDR
// crossRoadGuard := [ ] ;
3041: LD_ADDR_EXP 37
3045: PUSH
3046: EMPTY
3047: ST_TO_ADDR
// oilBaseGuard := [ ] ;
3048: LD_ADDR_EXP 38
3052: PUSH
3053: EMPTY
3054: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3055: LD_ADDR_EXP 41
3059: PUSH
3060: EMPTY
3061: ST_TO_ADDR
// for i := 1 to 2 do
3062: LD_ADDR_VAR 0 2
3066: PUSH
3067: DOUBLE
3068: LD_INT 1
3070: DEC
3071: ST_TO_ADDR
3072: LD_INT 2
3074: PUSH
3075: FOR_TO
3076: IFFALSE 3215
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3078: LD_INT 0
3080: PPUSH
3081: LD_INT 1
3083: PPUSH
3084: LD_INT 3
3086: PUSH
3087: LD_INT 4
3089: PUSH
3090: LD_INT 5
3092: PUSH
3093: LD_INT 6
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: LIST
3100: LIST
3101: PUSH
3102: LD_OWVAR 67
3106: ARRAY
3107: PPUSH
3108: CALL_OW 380
// un := CreateHuman ;
3112: LD_ADDR_VAR 0 3
3116: PUSH
3117: CALL_OW 44
3121: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3122: LD_ADDR_EXP 37
3126: PUSH
3127: LD_EXP 37
3131: PPUSH
3132: LD_EXP 37
3136: PUSH
3137: LD_INT 1
3139: PLUS
3140: PPUSH
3141: LD_VAR 0 3
3145: PPUSH
3146: CALL_OW 1
3150: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3151: LD_VAR 0 3
3155: PPUSH
3156: LD_INT 100
3158: PPUSH
3159: LD_INT 63
3161: PPUSH
3162: LD_INT 3
3164: PPUSH
3165: LD_INT 0
3167: PPUSH
3168: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3172: LD_VAR 0 3
3176: PPUSH
3177: LD_INT 97
3179: PPUSH
3180: LD_INT 64
3182: PPUSH
3183: CALL_OW 428
3187: PUSH
3188: LD_INT 98
3190: PPUSH
3191: LD_INT 58
3193: PPUSH
3194: CALL_OW 428
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: LD_VAR 0 2
3207: ARRAY
3208: PPUSH
3209: CALL_OW 120
// end ;
3213: GO 3075
3215: POP
3216: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3217: LD_INT 51
3219: PPUSH
3220: LD_INT 77
3222: PPUSH
3223: CALL_OW 428
3227: PPUSH
3228: CALL_OW 274
3232: PPUSH
3233: LD_INT 1
3235: PPUSH
3236: LD_INT 120
3238: PPUSH
3239: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3243: LD_INT 10
3245: PPUSH
3246: CALL_OW 274
3250: PPUSH
3251: LD_INT 2
3253: PPUSH
3254: LD_INT 300
3256: PPUSH
3257: CALL_OW 277
// for i := 1 to 2 do
3261: LD_ADDR_VAR 0 2
3265: PUSH
3266: DOUBLE
3267: LD_INT 1
3269: DEC
3270: ST_TO_ADDR
3271: LD_INT 2
3273: PUSH
3274: FOR_TO
3275: IFFALSE 3393
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3277: LD_INT 0
3279: PPUSH
3280: LD_INT 1
3282: PPUSH
3283: LD_INT 3
3285: PUSH
3286: LD_INT 4
3288: PUSH
3289: LD_INT 5
3291: PUSH
3292: LD_INT 6
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: PUSH
3301: LD_OWVAR 67
3305: ARRAY
3306: PPUSH
3307: CALL_OW 380
// un := CreateHuman ;
3311: LD_ADDR_VAR 0 3
3315: PUSH
3316: CALL_OW 44
3320: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3321: LD_ADDR_EXP 38
3325: PUSH
3326: LD_EXP 38
3330: PPUSH
3331: LD_EXP 38
3335: PUSH
3336: LD_INT 1
3338: PLUS
3339: PPUSH
3340: LD_VAR 0 3
3344: PPUSH
3345: CALL_OW 1
3349: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3350: LD_VAR 0 3
3354: PPUSH
3355: LD_INT 198
3357: PPUSH
3358: LD_INT 106
3360: PPUSH
3361: CALL_OW 428
3365: PUSH
3366: LD_INT 205
3368: PPUSH
3369: LD_INT 114
3371: PPUSH
3372: CALL_OW 428
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: PUSH
3381: LD_VAR 0 2
3385: ARRAY
3386: PPUSH
3387: CALL_OW 52
// end ;
3391: GO 3274
3393: POP
3394: POP
// for i := 1 to 2 do
3395: LD_ADDR_VAR 0 2
3399: PUSH
3400: DOUBLE
3401: LD_INT 1
3403: DEC
3404: ST_TO_ADDR
3405: LD_INT 2
3407: PUSH
3408: FOR_TO
3409: IFFALSE 3486
// begin PrepareHuman ( false , 2 , 3 ) ;
3411: LD_INT 0
3413: PPUSH
3414: LD_INT 2
3416: PPUSH
3417: LD_INT 3
3419: PPUSH
3420: CALL_OW 380
// un := CreateHuman ;
3424: LD_ADDR_VAR 0 3
3428: PUSH
3429: CALL_OW 44
3433: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3434: LD_ADDR_EXP 38
3438: PUSH
3439: LD_EXP 38
3443: PPUSH
3444: LD_EXP 38
3448: PUSH
3449: LD_INT 1
3451: PLUS
3452: PPUSH
3453: LD_VAR 0 3
3457: PPUSH
3458: CALL_OW 1
3462: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3463: LD_VAR 0 3
3467: PPUSH
3468: LD_INT 204
3470: PPUSH
3471: LD_INT 108
3473: PPUSH
3474: LD_INT 2
3476: PPUSH
3477: LD_INT 0
3479: PPUSH
3480: CALL_OW 50
// end ;
3484: GO 3408
3486: POP
3487: POP
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
3488: LD_ADDR_VAR 0 2
3492: PUSH
3493: DOUBLE
3494: LD_INT 1
3496: DEC
3497: ST_TO_ADDR
3498: LD_INT 4
3500: PUSH
3501: LD_INT 5
3503: PUSH
3504: LD_INT 6
3506: PUSH
3507: LD_INT 7
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: PUSH
3516: LD_OWVAR 67
3520: ARRAY
3521: PUSH
3522: FOR_TO
3523: IFFALSE 3669
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3525: LD_INT 0
3527: PPUSH
3528: LD_INT 1
3530: PUSH
3531: LD_INT 1
3533: PUSH
3534: LD_INT 2
3536: PUSH
3537: LD_INT 4
3539: PUSH
3540: LD_INT 1
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: PUSH
3550: LD_INT 1
3552: PPUSH
3553: LD_INT 5
3555: PPUSH
3556: CALL_OW 12
3560: ARRAY
3561: PPUSH
3562: LD_INT 3
3564: PUSH
3565: LD_INT 4
3567: PUSH
3568: LD_INT 5
3570: PUSH
3571: LD_INT 5
3573: PUSH
3574: EMPTY
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: PUSH
3580: LD_OWVAR 67
3584: ARRAY
3585: PPUSH
3586: CALL_OW 380
// un := CreateHuman ;
3590: LD_ADDR_VAR 0 3
3594: PUSH
3595: CALL_OW 44
3599: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroupArea , false ) then
3600: LD_VAR 0 3
3604: PPUSH
3605: LD_INT 10
3607: PPUSH
3608: LD_INT 0
3610: PPUSH
3611: CALL 72913 0 3
3615: IFFALSE 3667
// begin ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3617: LD_ADDR_EXP 39
3621: PUSH
3622: LD_EXP 39
3626: PPUSH
3627: LD_EXP 39
3631: PUSH
3632: LD_INT 1
3634: PLUS
3635: PPUSH
3636: LD_VAR 0 3
3640: PPUSH
3641: CALL_OW 1
3645: ST_TO_ADDR
// if Prob ( 50 ) then
3646: LD_INT 50
3648: PPUSH
3649: CALL_OW 13
3653: IFFALSE 3667
// ForceSleep ( un , true ) ;
3655: LD_VAR 0 3
3659: PPUSH
3660: LD_INT 1
3662: PPUSH
3663: CALL_OW 585
// end ; end ;
3667: GO 3522
3669: POP
3670: POP
// for i := 1 to 3 do
3671: LD_ADDR_VAR 0 2
3675: PUSH
3676: DOUBLE
3677: LD_INT 1
3679: DEC
3680: ST_TO_ADDR
3681: LD_INT 3
3683: PUSH
3684: FOR_TO
3685: IFFALSE 3779
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
3687: LD_INT 0
3689: PPUSH
3690: LD_INT 1
3692: PPUSH
3693: LD_INT 3
3695: PUSH
3696: LD_INT 4
3698: PUSH
3699: LD_INT 4
3701: PUSH
3702: LD_INT 5
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: PUSH
3711: LD_OWVAR 67
3715: ARRAY
3716: PPUSH
3717: CALL_OW 380
// un := CreateHuman ;
3721: LD_ADDR_VAR 0 3
3725: PUSH
3726: CALL_OW 44
3730: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3731: LD_VAR 0 3
3735: PPUSH
3736: LD_INT 11
3738: PPUSH
3739: LD_INT 0
3741: PPUSH
3742: CALL 72913 0 3
3746: IFFALSE 3777
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3748: LD_ADDR_EXP 39
3752: PUSH
3753: LD_EXP 39
3757: PPUSH
3758: LD_EXP 39
3762: PUSH
3763: LD_INT 1
3765: PLUS
3766: PPUSH
3767: LD_VAR 0 3
3771: PPUSH
3772: CALL_OW 1
3776: ST_TO_ADDR
// end ;
3777: GO 3684
3779: POP
3780: POP
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3781: LD_ADDR_VAR 0 2
3785: PUSH
3786: DOUBLE
3787: LD_INT 1
3789: DEC
3790: ST_TO_ADDR
3791: LD_INT 5
3793: PUSH
3794: LD_INT 6
3796: PUSH
3797: LD_INT 7
3799: PUSH
3800: LD_INT 8
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: PUSH
3809: LD_OWVAR 67
3813: ARRAY
3814: PUSH
3815: FOR_TO
3816: IFFALSE 3962
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3818: LD_INT 0
3820: PPUSH
3821: LD_INT 1
3823: PUSH
3824: LD_INT 1
3826: PUSH
3827: LD_INT 2
3829: PUSH
3830: LD_INT 4
3832: PUSH
3833: LD_INT 1
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: PUSH
3843: LD_INT 1
3845: PPUSH
3846: LD_INT 5
3848: PPUSH
3849: CALL_OW 12
3853: ARRAY
3854: PPUSH
3855: LD_INT 3
3857: PUSH
3858: LD_INT 4
3860: PUSH
3861: LD_INT 5
3863: PUSH
3864: LD_INT 5
3866: PUSH
3867: EMPTY
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: PUSH
3873: LD_OWVAR 67
3877: ARRAY
3878: PPUSH
3879: CALL_OW 380
// un := CreateHuman ;
3883: LD_ADDR_VAR 0 3
3887: PUSH
3888: CALL_OW 44
3892: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3893: LD_VAR 0 3
3897: PPUSH
3898: LD_INT 15
3900: PPUSH
3901: LD_INT 0
3903: PPUSH
3904: CALL 72913 0 3
3908: IFFALSE 3960
// begin ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3910: LD_ADDR_EXP 40
3914: PUSH
3915: LD_EXP 40
3919: PPUSH
3920: LD_EXP 40
3924: PUSH
3925: LD_INT 1
3927: PLUS
3928: PPUSH
3929: LD_VAR 0 3
3933: PPUSH
3934: CALL_OW 1
3938: ST_TO_ADDR
// if Prob ( 50 ) then
3939: LD_INT 50
3941: PPUSH
3942: CALL_OW 13
3946: IFFALSE 3960
// ForceSleep ( un , true ) ;
3948: LD_VAR 0 3
3952: PPUSH
3953: LD_INT 1
3955: PPUSH
3956: CALL_OW 585
// end ; end ;
3960: GO 3815
3962: POP
3963: POP
// end ;
3964: LD_VAR 0 1
3968: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3969: LD_INT 0
3971: PPUSH
3972: PPUSH
3973: PPUSH
// uc_side := 3 ;
3974: LD_ADDR_OWVAR 20
3978: PUSH
3979: LD_INT 3
3981: ST_TO_ADDR
// uc_nation := 3 ;
3982: LD_ADDR_OWVAR 21
3986: PUSH
3987: LD_INT 3
3989: ST_TO_ADDR
// for i := 1 to 6 do
3990: LD_ADDR_VAR 0 2
3994: PUSH
3995: DOUBLE
3996: LD_INT 1
3998: DEC
3999: ST_TO_ADDR
4000: LD_INT 6
4002: PUSH
4003: FOR_TO
4004: IFFALSE 4083
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
4006: LD_INT 0
4008: PPUSH
4009: LD_INT 1
4011: PUSH
4012: LD_INT 4
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: PUSH
4019: LD_INT 1
4021: PPUSH
4022: LD_INT 2
4024: PPUSH
4025: CALL_OW 12
4029: ARRAY
4030: PPUSH
4031: LD_INT 0
4033: PPUSH
4034: CALL_OW 380
// un := CreateHuman ;
4038: LD_ADDR_VAR 0 3
4042: PUSH
4043: CALL_OW 44
4047: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
4048: LD_VAR 0 3
4052: PPUSH
4053: LD_INT 54
4055: PPUSH
4056: LD_INT 88
4058: PPUSH
4059: LD_INT 12
4061: PPUSH
4062: LD_INT 0
4064: PPUSH
4065: CALL_OW 50
// SetLives ( un , 1 ) ;
4069: LD_VAR 0 3
4073: PPUSH
4074: LD_INT 1
4076: PPUSH
4077: CALL_OW 234
// end ;
4081: GO 4003
4083: POP
4084: POP
// uc_side := 3 ;
4085: LD_ADDR_OWVAR 20
4089: PUSH
4090: LD_INT 3
4092: ST_TO_ADDR
// uc_nation := 0 ;
4093: LD_ADDR_OWVAR 21
4097: PUSH
4098: LD_INT 0
4100: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4101: LD_ADDR_EXP 42
4105: PUSH
4106: EMPTY
4107: ST_TO_ADDR
// apeEngGroup := [ ] ;
4108: LD_ADDR_EXP 43
4112: PUSH
4113: EMPTY
4114: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
4115: LD_ADDR_VAR 0 2
4119: PUSH
4120: DOUBLE
4121: LD_INT 1
4123: DEC
4124: ST_TO_ADDR
4125: LD_INT 4
4127: PUSH
4128: LD_INT 5
4130: PUSH
4131: LD_INT 6
4133: PUSH
4134: LD_INT 7
4136: PUSH
4137: EMPTY
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: PUSH
4143: LD_OWVAR 67
4147: ARRAY
4148: PUSH
4149: FOR_TO
4150: IFFALSE 4268
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
4152: LD_INT 0
4154: PPUSH
4155: LD_INT 15
4157: PPUSH
4158: LD_INT 3
4160: PUSH
4161: LD_INT 4
4163: PUSH
4164: LD_INT 5
4166: PUSH
4167: LD_INT 6
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: PUSH
4176: LD_OWVAR 67
4180: ARRAY
4181: PPUSH
4182: CALL_OW 380
// un := CreateHuman ;
4186: LD_ADDR_VAR 0 3
4190: PUSH
4191: CALL_OW 44
4195: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4196: LD_ADDR_EXP 42
4200: PUSH
4201: LD_EXP 42
4205: PPUSH
4206: LD_EXP 42
4210: PUSH
4211: LD_INT 1
4213: PLUS
4214: PPUSH
4215: LD_VAR 0 3
4219: PPUSH
4220: CALL_OW 1
4224: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4225: LD_VAR 0 3
4229: PPUSH
4230: LD_INT 0
4232: PPUSH
4233: LD_INT 5
4235: PPUSH
4236: CALL_OW 12
4240: PPUSH
4241: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4245: LD_VAR 0 3
4249: PPUSH
4250: LD_INT 56
4252: PPUSH
4253: LD_INT 82
4255: PPUSH
4256: LD_INT 6
4258: PPUSH
4259: LD_INT 0
4261: PPUSH
4262: CALL_OW 50
// end ;
4266: GO 4149
4268: POP
4269: POP
// for i := 1 to 2 do
4270: LD_ADDR_VAR 0 2
4274: PUSH
4275: DOUBLE
4276: LD_INT 1
4278: DEC
4279: ST_TO_ADDR
4280: LD_INT 2
4282: PUSH
4283: FOR_TO
4284: IFFALSE 4360
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4286: LD_INT 0
4288: PPUSH
4289: LD_INT 16
4291: PPUSH
4292: LD_INT 4
4294: PPUSH
4295: CALL_OW 380
// un := CreateHuman ;
4299: LD_ADDR_VAR 0 3
4303: PUSH
4304: CALL_OW 44
4308: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4309: LD_ADDR_EXP 43
4313: PUSH
4314: LD_EXP 43
4318: PPUSH
4319: LD_EXP 43
4323: PUSH
4324: LD_INT 1
4326: PLUS
4327: PPUSH
4328: LD_VAR 0 3
4332: PPUSH
4333: CALL_OW 1
4337: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4338: LD_VAR 0 3
4342: PPUSH
4343: LD_INT 51
4345: PPUSH
4346: LD_INT 77
4348: PPUSH
4349: CALL_OW 428
4353: PPUSH
4354: CALL_OW 52
// end ;
4358: GO 4283
4360: POP
4361: POP
// end ;
4362: LD_VAR 0 1
4366: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4367: LD_EXP 42
4371: PPUSH
4372: LD_INT 3
4374: PUSH
4375: LD_INT 24
4377: PUSH
4378: LD_INT 600
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: PUSH
4389: LD_INT 3
4391: PUSH
4392: LD_INT 54
4394: PUSH
4395: EMPTY
4396: LIST
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PPUSH
4406: CALL_OW 72
4410: PUSH
4411: LD_INT 66
4413: PPUSH
4414: LD_INT 89
4416: PPUSH
4417: CALL_OW 428
4421: PPUSH
4422: CALL_OW 302
4426: AND
4427: IFFALSE 4512
4429: GO 4431
4431: DISABLE
4432: LD_INT 0
4434: PPUSH
// begin enable ;
4435: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4436: LD_ADDR_VAR 0 1
4440: PUSH
4441: LD_EXP 42
4445: PPUSH
4446: LD_INT 3
4448: PUSH
4449: LD_INT 24
4451: PUSH
4452: LD_INT 600
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PUSH
4463: LD_INT 3
4465: PUSH
4466: LD_INT 54
4468: PUSH
4469: EMPTY
4470: LIST
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 72
4484: PUSH
4485: FOR_IN
4486: IFFALSE 4510
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4488: LD_VAR 0 1
4492: PPUSH
4493: LD_INT 66
4495: PPUSH
4496: LD_INT 89
4498: PPUSH
4499: CALL_OW 428
4503: PPUSH
4504: CALL_OW 120
4508: GO 4485
4510: POP
4511: POP
// end ;
4512: PPOPN 1
4514: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4515: LD_INT 22
4517: PUSH
4518: LD_INT 2
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: PUSH
4525: LD_INT 92
4527: PUSH
4528: LD_INT 54
4530: PUSH
4531: LD_INT 77
4533: PUSH
4534: LD_INT 8
4536: PUSH
4537: EMPTY
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: PPUSH
4547: CALL_OW 69
4551: IFFALSE 4615
4553: GO 4555
4555: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4556: LD_EXP 43
4560: PPUSH
4561: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4565: LD_EXP 43
4569: PPUSH
4570: LD_INT 22
4572: PUSH
4573: LD_INT 2
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: PUSH
4580: LD_INT 92
4582: PUSH
4583: LD_INT 54
4585: PUSH
4586: LD_INT 77
4588: PUSH
4589: LD_INT 8
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: PUSH
4598: EMPTY
4599: LIST
4600: LIST
4601: PPUSH
4602: CALL_OW 69
4606: PUSH
4607: LD_INT 1
4609: ARRAY
4610: PPUSH
4611: CALL_OW 175
// end ;
4615: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag , enemy ; begin
4616: LD_INT 0
4618: PPUSH
4619: PPUSH
4620: PPUSH
4621: PPUSH
4622: PPUSH
4623: PPUSH
4624: PPUSH
4625: PPUSH
4626: PPUSH
4627: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4628: LD_ADDR_VAR 0 3
4632: PUSH
4633: LD_INT 1
4635: PPUSH
4636: LD_INT 3
4638: PPUSH
4639: CALL_OW 12
4643: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4644: LD_ADDR_VAR 0 5
4648: PUSH
4649: LD_INT 16
4651: PUSH
4652: LD_INT 17
4654: PUSH
4655: LD_INT 19
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: LIST
4662: PUSH
4663: LD_VAR 0 3
4667: ARRAY
4668: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4669: LD_ADDR_VAR 0 7
4673: PUSH
4674: LD_INT 159
4676: PUSH
4677: LD_INT 25
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PUSH
4684: LD_INT 137
4686: PUSH
4687: LD_INT 37
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: PUSH
4694: LD_INT 123
4696: PUSH
4697: LD_INT 55
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: PUSH
4704: LD_INT 115
4706: PUSH
4707: LD_INT 71
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: PUSH
4714: LD_INT 106
4716: PUSH
4717: LD_INT 88
4719: PUSH
4720: EMPTY
4721: LIST
4722: LIST
4723: PUSH
4724: LD_INT 97
4726: PUSH
4727: LD_INT 114
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: PUSH
4734: LD_INT 75
4736: PUSH
4737: LD_INT 146
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 206
4755: PUSH
4756: LD_INT 135
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: LD_INT 184
4765: PUSH
4766: LD_INT 111
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: PUSH
4773: LD_INT 154
4775: PUSH
4776: LD_INT 97
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: PUSH
4783: LD_INT 122
4785: PUSH
4786: LD_INT 80
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PUSH
4793: LD_INT 109
4795: PUSH
4796: LD_INT 78
4798: PUSH
4799: EMPTY
4800: LIST
4801: LIST
4802: PUSH
4803: LD_INT 97
4805: PUSH
4806: LD_INT 113
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: PUSH
4813: LD_INT 75
4815: PUSH
4816: LD_INT 147
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: PUSH
4832: LD_INT 185
4834: PUSH
4835: LD_INT 72
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: PUSH
4842: LD_INT 171
4844: PUSH
4845: LD_INT 83
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PUSH
4852: LD_INT 161
4854: PUSH
4855: LD_INT 99
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 125
4864: PUSH
4865: LD_INT 82
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: LD_INT 105
4874: PUSH
4875: LD_INT 90
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PUSH
4882: LD_INT 96
4884: PUSH
4885: LD_INT 116
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PUSH
4892: LD_INT 75
4894: PUSH
4895: LD_INT 147
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: PUSH
4916: LD_VAR 0 3
4920: ARRAY
4921: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4922: LD_ADDR_VAR 0 4
4926: PUSH
4927: LD_INT 4
4929: PUSH
4930: LD_INT 5
4932: PUSH
4933: LD_INT 3
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: LIST
4940: PUSH
4941: LD_VAR 0 3
4945: ARRAY
4946: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4947: LD_ADDR_VAR 0 6
4951: PUSH
4952: LD_INT 22
4954: PUSH
4955: LD_INT 20
4957: PUSH
4958: LD_INT 21
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: LIST
4965: PUSH
4966: LD_VAR 0 3
4970: ARRAY
4971: ST_TO_ADDR
// for i := 1 to 2 do
4972: LD_ADDR_VAR 0 2
4976: PUSH
4977: DOUBLE
4978: LD_INT 1
4980: DEC
4981: ST_TO_ADDR
4982: LD_INT 2
4984: PUSH
4985: FOR_TO
4986: IFFALSE 5004
// EraseResourceArea ( i , outerSpawnArea ) ;
4988: LD_VAR 0 2
4992: PPUSH
4993: LD_VAR 0 6
4997: PPUSH
4998: CALL_OW 286
5002: GO 4985
5004: POP
5005: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5006: LD_VAR 0 6
5010: PPUSH
5011: LD_INT 2
5013: PUSH
5014: LD_INT 21
5016: PUSH
5017: LD_INT 1
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PUSH
5024: LD_INT 21
5026: PUSH
5027: LD_INT 2
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: PUSH
5034: LD_INT 21
5036: PUSH
5037: LD_INT 3
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: PPUSH
5050: CALL_OW 70
5054: IFFALSE 5269
// repeat wait ( 0 0$1 ) ;
5056: LD_INT 35
5058: PPUSH
5059: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5063: LD_VAR 0 6
5067: PPUSH
5068: LD_INT 2
5070: PUSH
5071: LD_INT 21
5073: PUSH
5074: LD_INT 2
5076: PUSH
5077: EMPTY
5078: LIST
5079: LIST
5080: PUSH
5081: LD_INT 21
5083: PUSH
5084: LD_INT 3
5086: PUSH
5087: EMPTY
5088: LIST
5089: LIST
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: LIST
5095: PPUSH
5096: CALL_OW 70
5100: IFFALSE 5161
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5102: LD_ADDR_VAR 0 2
5106: PUSH
5107: LD_VAR 0 6
5111: PPUSH
5112: LD_INT 2
5114: PUSH
5115: LD_INT 21
5117: PUSH
5118: LD_INT 2
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: PUSH
5125: LD_INT 21
5127: PUSH
5128: LD_INT 3
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: LIST
5139: PPUSH
5140: CALL_OW 70
5144: PUSH
5145: FOR_IN
5146: IFFALSE 5159
// RemoveUnit ( i ) ;
5148: LD_VAR 0 2
5152: PPUSH
5153: CALL_OW 64
5157: GO 5145
5159: POP
5160: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5161: LD_VAR 0 6
5165: PPUSH
5166: LD_INT 21
5168: PUSH
5169: LD_INT 1
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: PPUSH
5176: CALL_OW 70
5180: IFFALSE 5229
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5182: LD_ADDR_VAR 0 2
5186: PUSH
5187: LD_VAR 0 6
5191: PPUSH
5192: LD_INT 21
5194: PUSH
5195: LD_INT 1
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: PPUSH
5202: CALL_OW 70
5206: PUSH
5207: FOR_IN
5208: IFFALSE 5227
// ComMoveXY ( i , 113 , 53 ) ;
5210: LD_VAR 0 2
5214: PPUSH
5215: LD_INT 113
5217: PPUSH
5218: LD_INT 53
5220: PPUSH
5221: CALL_OW 111
5225: GO 5207
5227: POP
5228: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5229: LD_VAR 0 6
5233: PPUSH
5234: LD_INT 2
5236: PUSH
5237: LD_INT 21
5239: PUSH
5240: LD_INT 1
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: LD_INT 21
5249: PUSH
5250: LD_INT 2
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: LIST
5261: PPUSH
5262: CALL_OW 70
5266: NOT
5267: IFFALSE 5056
// case convoyCounter of 1 .. 3 :
5269: LD_EXP 16
5273: PUSH
5274: LD_INT 1
5276: DOUBLE
5277: GREATEREQUAL
5278: IFFALSE 5286
5280: LD_INT 3
5282: DOUBLE
5283: LESSEQUAL
5284: IFTRUE 5288
5286: GO 5923
5288: POP
// begin for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] - convoyCounter do
5289: LD_ADDR_VAR 0 2
5293: PUSH
5294: DOUBLE
5295: LD_INT 1
5297: DEC
5298: ST_TO_ADDR
5299: LD_INT 5
5301: PUSH
5302: LD_INT 6
5304: PUSH
5305: LD_INT 7
5307: PUSH
5308: LD_INT 8
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: PUSH
5317: LD_OWVAR 67
5321: ARRAY
5322: PUSH
5323: LD_EXP 16
5327: MINUS
5328: PUSH
5329: FOR_TO
5330: IFFALSE 5537
// begin uc_side := 3 ;
5332: LD_ADDR_OWVAR 20
5336: PUSH
5337: LD_INT 3
5339: ST_TO_ADDR
// uc_nation := 3 ;
5340: LD_ADDR_OWVAR 21
5344: PUSH
5345: LD_INT 3
5347: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5348: LD_INT 0
5350: PPUSH
5351: LD_INT 1
5353: PUSH
5354: LD_INT 1
5356: PUSH
5357: LD_INT 1
5359: PUSH
5360: LD_INT 4
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: PUSH
5369: LD_INT 1
5371: PPUSH
5372: LD_INT 4
5374: PPUSH
5375: CALL_OW 12
5379: ARRAY
5380: PPUSH
5381: LD_INT 4
5383: PUSH
5384: LD_INT 5
5386: PUSH
5387: LD_INT 6
5389: PUSH
5390: LD_INT 7
5392: PUSH
5393: EMPTY
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: PUSH
5399: LD_OWVAR 67
5403: ARRAY
5404: PPUSH
5405: CALL_OW 380
// un := CreateHuman ;
5409: LD_ADDR_VAR 0 8
5413: PUSH
5414: CALL_OW 44
5418: ST_TO_ADDR
// SetDir ( un , dir ) ;
5419: LD_VAR 0 8
5423: PPUSH
5424: LD_VAR 0 4
5428: PPUSH
5429: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5433: LD_VAR 0 8
5437: PPUSH
5438: LD_VAR 0 5
5442: PPUSH
5443: LD_INT 0
5445: PPUSH
5446: CALL 72913 0 3
5450: IFFALSE 5535
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5452: LD_ADDR_EXP 41
5456: PUSH
5457: LD_EXP 41
5461: PPUSH
5462: LD_EXP 41
5466: PUSH
5467: LD_INT 1
5469: PLUS
5470: PPUSH
5471: LD_VAR 0 8
5475: PPUSH
5476: CALL_OW 1
5480: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5481: LD_VAR 0 8
5485: PPUSH
5486: LD_INT 1
5488: PPUSH
5489: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5493: LD_VAR 0 8
5497: PPUSH
5498: LD_VAR 0 7
5502: PUSH
5503: LD_INT 1
5505: ARRAY
5506: PUSH
5507: LD_INT 1
5509: ARRAY
5510: PPUSH
5511: LD_VAR 0 7
5515: PUSH
5516: LD_INT 1
5518: ARRAY
5519: PUSH
5520: LD_INT 2
5522: ARRAY
5523: PPUSH
5524: CALL_OW 111
// wait ( 0 0$2 ) ;
5528: LD_INT 70
5530: PPUSH
5531: CALL_OW 67
// end ; end ;
5535: GO 5329
5537: POP
5538: POP
// for i := 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
5539: LD_ADDR_VAR 0 2
5543: PUSH
5544: DOUBLE
5545: LD_INT 1
5547: DEC
5548: ST_TO_ADDR
5549: LD_INT 3
5551: PUSH
5552: LD_INT 4
5554: PUSH
5555: LD_INT 4
5557: PUSH
5558: LD_INT 4
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: PUSH
5567: LD_OWVAR 67
5571: ARRAY
5572: PUSH
5573: FOR_TO
5574: IFFALSE 5919
// begin uc_side := 3 ;
5576: LD_ADDR_OWVAR 20
5580: PUSH
5581: LD_INT 3
5583: ST_TO_ADDR
// uc_nation := 3 ;
5584: LD_ADDR_OWVAR 21
5588: PUSH
5589: LD_INT 3
5591: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5592: LD_INT 3
5594: PPUSH
5595: LD_INT 3
5597: PPUSH
5598: LD_INT 21
5600: PUSH
5601: LD_INT 22
5603: PUSH
5604: LD_INT 23
5606: PUSH
5607: LD_INT 24
5609: PUSH
5610: LD_INT 24
5612: PUSH
5613: LD_INT 24
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: PUSH
5624: LD_OWVAR 67
5628: PPUSH
5629: LD_OWVAR 67
5633: PUSH
5634: LD_INT 2
5636: PLUS
5637: PPUSH
5638: CALL_OW 12
5642: ARRAY
5643: PPUSH
5644: LD_INT 1
5646: PPUSH
5647: LD_INT 1
5649: PPUSH
5650: LD_INT 42
5652: PUSH
5653: LD_INT 44
5655: PUSH
5656: LD_INT 43
5658: PUSH
5659: LD_INT 44
5661: PUSH
5662: LD_INT 46
5664: PUSH
5665: LD_INT 46
5667: PUSH
5668: EMPTY
5669: LIST
5670: LIST
5671: LIST
5672: LIST
5673: LIST
5674: LIST
5675: PUSH
5676: LD_INT 1
5678: PPUSH
5679: LD_OWVAR 67
5683: PUSH
5684: LD_INT 2
5686: PLUS
5687: PPUSH
5688: CALL_OW 12
5692: ARRAY
5693: PPUSH
5694: LD_INT 90
5696: PPUSH
5697: CALL 447 0 7
// un := CreateVehicle ;
5701: LD_ADDR_VAR 0 8
5705: PUSH
5706: CALL_OW 45
5710: ST_TO_ADDR
// SetDir ( un , dir ) ;
5711: LD_VAR 0 8
5715: PPUSH
5716: LD_VAR 0 4
5720: PPUSH
5721: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5725: LD_VAR 0 8
5729: PPUSH
5730: LD_VAR 0 5
5734: PPUSH
5735: LD_INT 0
5737: PPUSH
5738: CALL 72913 0 3
5742: IFFALSE 5917
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5744: LD_ADDR_EXP 41
5748: PUSH
5749: LD_EXP 41
5753: PPUSH
5754: LD_EXP 41
5758: PUSH
5759: LD_INT 1
5761: PLUS
5762: PPUSH
5763: LD_VAR 0 8
5767: PPUSH
5768: CALL_OW 1
5772: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
5773: LD_INT 0
5775: PPUSH
5776: LD_INT 3
5778: PUSH
5779: LD_INT 4
5781: PUSH
5782: LD_INT 5
5784: PUSH
5785: LD_INT 6
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: PUSH
5794: LD_OWVAR 67
5798: ARRAY
5799: PPUSH
5800: CALL_OW 383
// un := CreateHuman ;
5804: LD_ADDR_VAR 0 8
5808: PUSH
5809: CALL_OW 44
5813: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5814: LD_VAR 0 8
5818: PPUSH
5819: LD_EXP 41
5823: PUSH
5824: LD_EXP 41
5828: ARRAY
5829: PPUSH
5830: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5834: LD_ADDR_EXP 41
5838: PUSH
5839: LD_EXP 41
5843: PPUSH
5844: LD_EXP 41
5848: PUSH
5849: LD_INT 1
5851: PLUS
5852: PPUSH
5853: LD_VAR 0 8
5857: PPUSH
5858: CALL_OW 1
5862: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5863: LD_VAR 0 8
5867: PPUSH
5868: LD_INT 1
5870: PPUSH
5871: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5875: LD_VAR 0 8
5879: PPUSH
5880: LD_VAR 0 7
5884: PUSH
5885: LD_INT 1
5887: ARRAY
5888: PUSH
5889: LD_INT 1
5891: ARRAY
5892: PPUSH
5893: LD_VAR 0 7
5897: PUSH
5898: LD_INT 1
5900: ARRAY
5901: PUSH
5902: LD_INT 2
5904: ARRAY
5905: PPUSH
5906: CALL_OW 111
// wait ( 0 0$3 ) ;
5910: LD_INT 105
5912: PPUSH
5913: CALL_OW 67
// end ; end ;
5917: GO 5573
5919: POP
5920: POP
// end ; 4 .. 7 :
5921: GO 6528
5923: LD_INT 4
5925: DOUBLE
5926: GREATEREQUAL
5927: IFFALSE 5935
5929: LD_INT 7
5931: DOUBLE
5932: LESSEQUAL
5933: IFTRUE 5937
5935: GO 6527
5937: POP
// begin for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
5938: LD_ADDR_VAR 0 2
5942: PUSH
5943: DOUBLE
5944: LD_INT 1
5946: DEC
5947: ST_TO_ADDR
5948: LD_INT 2
5950: PUSH
5951: LD_INT 3
5953: PUSH
5954: LD_INT 4
5956: PUSH
5957: LD_INT 4
5959: PUSH
5960: EMPTY
5961: LIST
5962: LIST
5963: LIST
5964: LIST
5965: PUSH
5966: LD_OWVAR 67
5970: ARRAY
5971: PUSH
5972: FOR_TO
5973: IFFALSE 6153
// begin uc_side := 3 ;
5975: LD_ADDR_OWVAR 20
5979: PUSH
5980: LD_INT 3
5982: ST_TO_ADDR
// uc_nation := 3 ;
5983: LD_ADDR_OWVAR 21
5987: PUSH
5988: LD_INT 3
5990: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5991: LD_INT 0
5993: PPUSH
5994: LD_INT 1
5996: PPUSH
5997: LD_INT 4
5999: PUSH
6000: LD_INT 5
6002: PUSH
6003: LD_INT 6
6005: PUSH
6006: LD_INT 7
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: PUSH
6015: LD_OWVAR 67
6019: ARRAY
6020: PPUSH
6021: CALL_OW 380
// un := CreateHuman ;
6025: LD_ADDR_VAR 0 8
6029: PUSH
6030: CALL_OW 44
6034: ST_TO_ADDR
// SetDir ( un , dir ) ;
6035: LD_VAR 0 8
6039: PPUSH
6040: LD_VAR 0 4
6044: PPUSH
6045: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6049: LD_VAR 0 8
6053: PPUSH
6054: LD_VAR 0 5
6058: PPUSH
6059: LD_INT 0
6061: PPUSH
6062: CALL 72913 0 3
6066: IFFALSE 6151
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6068: LD_ADDR_EXP 41
6072: PUSH
6073: LD_EXP 41
6077: PPUSH
6078: LD_EXP 41
6082: PUSH
6083: LD_INT 1
6085: PLUS
6086: PPUSH
6087: LD_VAR 0 8
6091: PPUSH
6092: CALL_OW 1
6096: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6097: LD_VAR 0 8
6101: PPUSH
6102: LD_INT 1
6104: PPUSH
6105: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6109: LD_VAR 0 8
6113: PPUSH
6114: LD_VAR 0 7
6118: PUSH
6119: LD_INT 1
6121: ARRAY
6122: PUSH
6123: LD_INT 1
6125: ARRAY
6126: PPUSH
6127: LD_VAR 0 7
6131: PUSH
6132: LD_INT 1
6134: ARRAY
6135: PUSH
6136: LD_INT 2
6138: ARRAY
6139: PPUSH
6140: CALL_OW 111
// wait ( 0 0$2 ) ;
6144: LD_INT 70
6146: PPUSH
6147: CALL_OW 67
// end ; end ;
6151: GO 5972
6153: POP
6154: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
6155: LD_ADDR_VAR 0 2
6159: PUSH
6160: DOUBLE
6161: LD_INT 1
6163: DEC
6164: ST_TO_ADDR
6165: LD_INT 2
6167: PUSH
6168: LD_INT 3
6170: PUSH
6171: LD_INT 3
6173: PUSH
6174: LD_INT 4
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: PUSH
6183: LD_OWVAR 67
6187: ARRAY
6188: PUSH
6189: FOR_TO
6190: IFFALSE 6523
// begin uc_side := 3 ;
6192: LD_ADDR_OWVAR 20
6196: PUSH
6197: LD_INT 3
6199: ST_TO_ADDR
// uc_nation := 3 ;
6200: LD_ADDR_OWVAR 21
6204: PUSH
6205: LD_INT 3
6207: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6208: LD_INT 3
6210: PPUSH
6211: LD_INT 3
6213: PPUSH
6214: LD_INT 21
6216: PUSH
6217: LD_INT 22
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 1
6226: PPUSH
6227: LD_INT 2
6229: PPUSH
6230: CALL_OW 12
6234: ARRAY
6235: PPUSH
6236: LD_INT 1
6238: PPUSH
6239: LD_INT 1
6241: PPUSH
6242: LD_INT 42
6244: PUSH
6245: LD_INT 44
6247: PUSH
6248: LD_INT 43
6250: PUSH
6251: LD_INT 44
6253: PUSH
6254: LD_INT 44
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: PUSH
6264: LD_INT 1
6266: PPUSH
6267: LD_OWVAR 67
6271: PUSH
6272: LD_INT 1
6274: PLUS
6275: PPUSH
6276: CALL_OW 12
6280: ARRAY
6281: PPUSH
6282: LD_INT 90
6284: PPUSH
6285: CALL 447 0 7
// un := CreateVehicle ;
6289: LD_ADDR_VAR 0 8
6293: PUSH
6294: CALL_OW 45
6298: ST_TO_ADDR
// SetDir ( un , dir ) ;
6299: LD_VAR 0 8
6303: PPUSH
6304: LD_VAR 0 4
6308: PPUSH
6309: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6313: LD_VAR 0 8
6317: PPUSH
6318: LD_VAR 0 5
6322: PPUSH
6323: LD_INT 0
6325: PPUSH
6326: CALL 72913 0 3
6330: IFFALSE 6521
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6332: LD_ADDR_EXP 41
6336: PUSH
6337: LD_EXP 41
6341: PPUSH
6342: LD_EXP 41
6346: PUSH
6347: LD_INT 1
6349: PLUS
6350: PPUSH
6351: LD_VAR 0 8
6355: PPUSH
6356: CALL_OW 1
6360: ST_TO_ADDR
// uc_side := 3 ;
6361: LD_ADDR_OWVAR 20
6365: PUSH
6366: LD_INT 3
6368: ST_TO_ADDR
// uc_nation := 3 ;
6369: LD_ADDR_OWVAR 21
6373: PUSH
6374: LD_INT 3
6376: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
6377: LD_INT 0
6379: PPUSH
6380: LD_INT 3
6382: PUSH
6383: LD_INT 4
6385: PUSH
6386: LD_INT 5
6388: PUSH
6389: LD_INT 6
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: PUSH
6398: LD_OWVAR 67
6402: ARRAY
6403: PPUSH
6404: CALL_OW 383
// un := CreateHuman ;
6408: LD_ADDR_VAR 0 8
6412: PUSH
6413: CALL_OW 44
6417: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6418: LD_VAR 0 8
6422: PPUSH
6423: LD_EXP 41
6427: PUSH
6428: LD_EXP 41
6432: ARRAY
6433: PPUSH
6434: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6438: LD_ADDR_EXP 41
6442: PUSH
6443: LD_EXP 41
6447: PPUSH
6448: LD_EXP 41
6452: PUSH
6453: LD_INT 1
6455: PLUS
6456: PPUSH
6457: LD_VAR 0 8
6461: PPUSH
6462: CALL_OW 1
6466: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6467: LD_VAR 0 8
6471: PPUSH
6472: LD_INT 1
6474: PPUSH
6475: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6479: LD_VAR 0 8
6483: PPUSH
6484: LD_VAR 0 7
6488: PUSH
6489: LD_INT 1
6491: ARRAY
6492: PUSH
6493: LD_INT 1
6495: ARRAY
6496: PPUSH
6497: LD_VAR 0 7
6501: PUSH
6502: LD_INT 1
6504: ARRAY
6505: PUSH
6506: LD_INT 2
6508: ARRAY
6509: PPUSH
6510: CALL_OW 111
// wait ( 0 0$2 ) ;
6514: LD_INT 70
6516: PPUSH
6517: CALL_OW 67
// end ; end ;
6521: GO 6189
6523: POP
6524: POP
// end ; end ;
6525: GO 6528
6527: POP
// repeat wait ( 0 0$1 ) ;
6528: LD_INT 35
6530: PPUSH
6531: CALL_OW 67
// for un in ruConvoySquad do
6535: LD_ADDR_VAR 0 8
6539: PUSH
6540: LD_EXP 41
6544: PUSH
6545: FOR_IN
6546: IFFALSE 7170
// begin if IsInArea ( un , westSouthOutArea ) then
6548: LD_VAR 0 8
6552: PPUSH
6553: LD_INT 18
6555: PPUSH
6556: CALL_OW 308
6560: IFFALSE 6648
// begin if GetType ( un ) = unit_vehicle then
6562: LD_VAR 0 8
6566: PPUSH
6567: CALL_OW 247
6571: PUSH
6572: LD_INT 2
6574: EQUAL
6575: IFFALSE 6607
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6577: LD_ADDR_EXP 41
6581: PUSH
6582: LD_EXP 41
6586: PUSH
6587: LD_VAR 0 8
6591: PPUSH
6592: CALL_OW 311
6596: DIFF
6597: ST_TO_ADDR
// RemoveUnit ( un ) ;
6598: LD_VAR 0 8
6602: PPUSH
6603: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6607: LD_ADDR_EXP 15
6611: PUSH
6612: LD_EXP 15
6616: PUSH
6617: LD_INT 1
6619: PLUS
6620: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6621: LD_ADDR_EXP 41
6625: PUSH
6626: LD_EXP 41
6630: PUSH
6631: LD_VAR 0 8
6635: DIFF
6636: ST_TO_ADDR
// RemoveUnit ( un ) ;
6637: LD_VAR 0 8
6641: PPUSH
6642: CALL_OW 64
// break ;
6646: GO 7170
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6648: LD_VAR 0 8
6652: PPUSH
6653: CALL_OW 305
6657: NOT
6658: PUSH
6659: LD_VAR 0 8
6663: PPUSH
6664: CALL_OW 310
6668: NOT
6669: AND
6670: IFFALSE 6688
// ruConvoySquad := ruConvoySquad diff un ;
6672: LD_ADDR_EXP 41
6676: PUSH
6677: LD_EXP 41
6681: PUSH
6682: LD_VAR 0 8
6686: DIFF
6687: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6688: LD_VAR 0 8
6692: PPUSH
6693: CALL_OW 302
6697: PUSH
6698: LD_VAR 0 8
6702: PPUSH
6703: CALL_OW 314
6707: NOT
6708: AND
6709: IFFALSE 7168
// begin tag := GetTag ( un ) ;
6711: LD_ADDR_VAR 0 9
6715: PUSH
6716: LD_VAR 0 8
6720: PPUSH
6721: CALL_OW 110
6725: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6726: LD_VAR 0 8
6730: PPUSH
6731: LD_VAR 0 7
6735: PUSH
6736: LD_VAR 0 9
6740: PUSH
6741: LD_INT 1
6743: PLUS
6744: ARRAY
6745: PUSH
6746: LD_INT 1
6748: ARRAY
6749: PPUSH
6750: LD_VAR 0 7
6754: PUSH
6755: LD_VAR 0 9
6759: PUSH
6760: LD_INT 1
6762: PLUS
6763: ARRAY
6764: PUSH
6765: LD_INT 2
6767: ARRAY
6768: PPUSH
6769: CALL_OW 297
6773: PUSH
6774: LD_INT 6
6776: LESS
6777: IFFALSE 6960
// begin SetTag ( un , tag + 1 ) ;
6779: LD_VAR 0 8
6783: PPUSH
6784: LD_VAR 0 9
6788: PUSH
6789: LD_INT 1
6791: PLUS
6792: PPUSH
6793: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6797: LD_VAR 0 8
6801: PPUSH
6802: CALL_OW 247
6806: PUSH
6807: LD_INT 2
6809: EQUAL
6810: PUSH
6811: LD_VAR 0 8
6815: PPUSH
6816: CALL_OW 257
6820: PUSH
6821: LD_INT 3
6823: EQUAL
6824: OR
6825: IFFALSE 6958
// begin enemy := FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , un , 8 ] ] ) ;
6827: LD_ADDR_VAR 0 10
6831: PUSH
6832: LD_INT 22
6834: PUSH
6835: LD_INT 2
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: PUSH
6842: LD_INT 91
6844: PUSH
6845: LD_VAR 0 8
6849: PUSH
6850: LD_INT 8
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: LIST
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: PPUSH
6862: CALL_OW 69
6866: ST_TO_ADDR
// if enemy then
6867: LD_VAR 0 10
6871: IFFALSE 6899
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) else
6873: LD_VAR 0 8
6877: PPUSH
6878: LD_VAR 0 10
6882: PPUSH
6883: LD_VAR 0 8
6887: PPUSH
6888: CALL_OW 74
6892: PPUSH
6893: CALL_OW 115
6897: GO 6958
// begin AddComWait ( un , 0 0$4 ) ;
6899: LD_VAR 0 8
6903: PPUSH
6904: LD_INT 140
6906: PPUSH
6907: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6911: LD_VAR 0 8
6915: PPUSH
6916: LD_VAR 0 7
6920: PUSH
6921: LD_VAR 0 9
6925: PUSH
6926: LD_INT 1
6928: PLUS
6929: ARRAY
6930: PUSH
6931: LD_INT 1
6933: ARRAY
6934: PPUSH
6935: LD_VAR 0 7
6939: PUSH
6940: LD_VAR 0 9
6944: PUSH
6945: LD_INT 1
6947: PLUS
6948: ARRAY
6949: PUSH
6950: LD_INT 2
6952: ARRAY
6953: PPUSH
6954: CALL_OW 174
// end ; end ; end else
6958: GO 7168
// begin if GetClass ( un ) = 4 then
6960: LD_VAR 0 8
6964: PPUSH
6965: CALL_OW 257
6969: PUSH
6970: LD_INT 4
6972: EQUAL
6973: IFFALSE 7121
// begin if UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6975: LD_EXP 41
6979: PPUSH
6980: LD_INT 21
6982: PUSH
6983: LD_INT 1
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 3
6992: PUSH
6993: LD_INT 24
6995: PUSH
6996: LD_INT 1000
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PPUSH
7011: CALL_OW 72
7015: IFFALSE 7073
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
7017: LD_VAR 0 8
7021: PPUSH
7022: LD_EXP 41
7026: PPUSH
7027: LD_INT 21
7029: PUSH
7030: LD_INT 1
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PUSH
7037: LD_INT 3
7039: PUSH
7040: LD_INT 24
7042: PUSH
7043: LD_INT 1000
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PPUSH
7058: CALL_OW 72
7062: PUSH
7063: LD_INT 1
7065: ARRAY
7066: PPUSH
7067: CALL_OW 128
7071: GO 7119
// ComMoveUnit ( un , NearestUnitToUnit ( UnitFilter ( ruConvoySquad , [ f_not , [ f_class , 4 ] ] ) , un ) ) end else
7073: LD_VAR 0 8
7077: PPUSH
7078: LD_EXP 41
7082: PPUSH
7083: LD_INT 3
7085: PUSH
7086: LD_INT 25
7088: PUSH
7089: LD_INT 4
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PPUSH
7100: CALL_OW 72
7104: PPUSH
7105: LD_VAR 0 8
7109: PPUSH
7110: CALL_OW 74
7114: PPUSH
7115: CALL_OW 112
7119: GO 7168
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7121: LD_VAR 0 8
7125: PPUSH
7126: LD_VAR 0 7
7130: PUSH
7131: LD_VAR 0 9
7135: PUSH
7136: LD_INT 1
7138: PLUS
7139: ARRAY
7140: PUSH
7141: LD_INT 1
7143: ARRAY
7144: PPUSH
7145: LD_VAR 0 7
7149: PUSH
7150: LD_VAR 0 9
7154: PUSH
7155: LD_INT 1
7157: PLUS
7158: ARRAY
7159: PUSH
7160: LD_INT 2
7162: ARRAY
7163: PPUSH
7164: CALL_OW 114
// end ; end ; end ;
7168: GO 6545
7170: POP
7171: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
7172: LD_EXP 41
7176: PPUSH
7177: LD_INT 52
7179: PUSH
7180: EMPTY
7181: LIST
7182: PUSH
7183: LD_INT 21
7185: PUSH
7186: LD_INT 1
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PPUSH
7197: CALL_OW 72
7201: NOT
7202: IFFALSE 6528
// end ;
7204: LD_VAR 0 1
7208: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
7209: LD_EXP 16
7213: PUSH
7214: LD_INT 3
7216: PPUSH
7217: LD_INT 5
7219: PPUSH
7220: CALL_OW 12
7224: LESS
7225: PUSH
7226: LD_EXP 41
7230: NOT
7231: AND
7232: PUSH
7233: LD_OWVAR 67
7237: PUSH
7238: LD_INT 1
7240: GREATER
7241: AND
7242: IFFALSE 7662
7244: GO 7246
7246: DISABLE
7247: LD_INT 0
7249: PPUSH
7250: PPUSH
7251: PPUSH
// begin for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
7252: LD_ADDR_VAR 0 1
7256: PUSH
7257: DOUBLE
7258: LD_INT 1
7260: DEC
7261: ST_TO_ADDR
7262: LD_INT 2
7264: PUSH
7265: LD_INT 3
7267: PUSH
7268: LD_INT 4
7270: PUSH
7271: LD_INT 5
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: PUSH
7280: LD_OWVAR 67
7284: ARRAY
7285: PUSH
7286: FOR_TO
7287: IFFALSE 7583
// begin uc_side := 3 ;
7289: LD_ADDR_OWVAR 20
7293: PUSH
7294: LD_INT 3
7296: ST_TO_ADDR
// uc_nation := 3 ;
7297: LD_ADDR_OWVAR 21
7301: PUSH
7302: LD_INT 3
7304: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7305: LD_INT 3
7307: PPUSH
7308: LD_INT 3
7310: PPUSH
7311: LD_INT 21
7313: PUSH
7314: LD_INT 22
7316: PUSH
7317: LD_INT 23
7319: PUSH
7320: LD_INT 24
7322: PUSH
7323: LD_INT 24
7325: PUSH
7326: LD_INT 24
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: PUSH
7337: LD_OWVAR 67
7341: PPUSH
7342: LD_OWVAR 67
7346: PUSH
7347: LD_INT 2
7349: PLUS
7350: PPUSH
7351: CALL_OW 12
7355: ARRAY
7356: PPUSH
7357: LD_INT 1
7359: PPUSH
7360: LD_INT 1
7362: PPUSH
7363: LD_INT 42
7365: PUSH
7366: LD_INT 44
7368: PUSH
7369: LD_INT 43
7371: PUSH
7372: LD_INT 44
7374: PUSH
7375: LD_INT 46
7377: PUSH
7378: LD_INT 46
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: PUSH
7389: LD_INT 1
7391: PPUSH
7392: LD_OWVAR 67
7396: PUSH
7397: LD_INT 2
7399: PLUS
7400: PPUSH
7401: CALL_OW 12
7405: ARRAY
7406: PPUSH
7407: LD_INT 90
7409: PPUSH
7410: CALL 447 0 7
// un := CreateVehicle ;
7414: LD_ADDR_VAR 0 3
7418: PUSH
7419: CALL_OW 45
7423: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7424: LD_VAR 0 3
7428: PPUSH
7429: LD_INT 0
7431: PPUSH
7432: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7436: LD_VAR 0 3
7440: PPUSH
7441: LD_INT 23
7443: PPUSH
7444: LD_INT 0
7446: PPUSH
7447: CALL 72913 0 3
7451: IFFALSE 7581
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7453: LD_ADDR_VAR 0 2
7457: PUSH
7458: LD_VAR 0 2
7462: PPUSH
7463: LD_VAR 0 2
7467: PUSH
7468: LD_INT 1
7470: PLUS
7471: PPUSH
7472: LD_VAR 0 3
7476: PPUSH
7477: CALL_OW 1
7481: ST_TO_ADDR
// uc_side := 3 ;
7482: LD_ADDR_OWVAR 20
7486: PUSH
7487: LD_INT 3
7489: ST_TO_ADDR
// uc_nation := 3 ;
7490: LD_ADDR_OWVAR 21
7494: PUSH
7495: LD_INT 3
7497: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
7498: LD_INT 0
7500: PPUSH
7501: LD_INT 3
7503: PUSH
7504: LD_INT 4
7506: PUSH
7507: LD_INT 5
7509: PUSH
7510: LD_INT 6
7512: PUSH
7513: EMPTY
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: PUSH
7519: LD_OWVAR 67
7523: ARRAY
7524: PPUSH
7525: CALL_OW 383
// un := CreateHuman ;
7529: LD_ADDR_VAR 0 3
7533: PUSH
7534: CALL_OW 44
7538: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7539: LD_VAR 0 3
7543: PPUSH
7544: LD_VAR 0 2
7548: PUSH
7549: LD_VAR 0 2
7553: ARRAY
7554: PPUSH
7555: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7559: LD_VAR 0 3
7563: PPUSH
7564: LD_INT 80
7566: PPUSH
7567: LD_INT 139
7569: PPUSH
7570: CALL_OW 111
// wait ( 0 0$3 ) ;
7574: LD_INT 105
7576: PPUSH
7577: CALL_OW 67
// end ; end ;
7581: GO 7286
7583: POP
7584: POP
// for i in tmp do
7585: LD_ADDR_VAR 0 1
7589: PUSH
7590: LD_VAR 0 2
7594: PUSH
7595: FOR_IN
7596: IFFALSE 7660
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7598: LD_VAR 0 1
7602: PPUSH
7603: LD_INT 101
7605: PPUSH
7606: LD_INT 102
7608: PPUSH
7609: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7613: LD_VAR 0 1
7617: PPUSH
7618: LD_INT 110
7620: PPUSH
7621: LD_INT 78
7623: PPUSH
7624: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7628: LD_VAR 0 1
7632: PPUSH
7633: LD_INT 75
7635: PPUSH
7636: LD_INT 101
7638: PPUSH
7639: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7643: LD_VAR 0 1
7647: PPUSH
7648: LD_INT 57
7650: PPUSH
7651: LD_INT 83
7653: PPUSH
7654: CALL_OW 174
// end ;
7658: GO 7595
7660: POP
7661: POP
// end ;
7662: PPOPN 3
7664: END
// every 0 0$1 trigger UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) or UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do var i ;
7665: LD_EXP 39
7669: PPUSH
7670: LD_INT 3
7672: PUSH
7673: LD_INT 24
7675: PUSH
7676: LD_INT 1000
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: PPUSH
7687: CALL_OW 72
7691: PUSH
7692: LD_EXP 40
7696: PPUSH
7697: LD_INT 3
7699: PUSH
7700: LD_INT 24
7702: PUSH
7703: LD_INT 1000
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PPUSH
7714: CALL_OW 72
7718: OR
7719: IFFALSE 7818
7721: GO 7723
7723: DISABLE
7724: LD_INT 0
7726: PPUSH
// begin enable ;
7727: ENABLE
// for i in UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) union UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do
7728: LD_ADDR_VAR 0 1
7732: PUSH
7733: LD_EXP 39
7737: PPUSH
7738: LD_INT 3
7740: PUSH
7741: LD_INT 24
7743: PUSH
7744: LD_INT 1000
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PPUSH
7755: CALL_OW 72
7759: PUSH
7760: LD_EXP 40
7764: PPUSH
7765: LD_INT 3
7767: PUSH
7768: LD_INT 24
7770: PUSH
7771: LD_INT 1000
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: PPUSH
7782: CALL_OW 72
7786: UNION
7787: PUSH
7788: FOR_IN
7789: IFFALSE 7816
// if IsSleeping ( i ) then
7791: LD_VAR 0 1
7795: PPUSH
7796: CALL_OW 555
7800: IFFALSE 7814
// ForceSleep ( i , false ) ;
7802: LD_VAR 0 1
7806: PPUSH
7807: LD_INT 0
7809: PPUSH
7810: CALL_OW 585
7814: GO 7788
7816: POP
7817: POP
// end ;
7818: PPOPN 1
7820: END
// every 0 0$1 trigger UnitFilter ( oilBaseGuard , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_inarea , eastBaseArea ] ] ] ) do var i , tmp ;
7821: LD_EXP 38
7825: PPUSH
7826: LD_INT 1
7828: PUSH
7829: LD_INT 3
7831: PUSH
7832: LD_INT 54
7834: PUSH
7835: EMPTY
7836: LIST
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PUSH
7842: LD_INT 3
7844: PUSH
7845: LD_INT 95
7847: PUSH
7848: LD_INT 26
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PUSH
7859: EMPTY
7860: LIST
7861: LIST
7862: LIST
7863: PPUSH
7864: CALL_OW 72
7868: IFFALSE 7963
7870: GO 7872
7872: DISABLE
7873: LD_INT 0
7875: PPUSH
7876: PPUSH
// begin enable ;
7877: ENABLE
// tmp := UnitFilter ( oilBaseGuard , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_inarea , eastBaseArea ] ] ] ) ;
7878: LD_ADDR_VAR 0 2
7882: PUSH
7883: LD_EXP 38
7887: PPUSH
7888: LD_INT 1
7890: PUSH
7891: LD_INT 3
7893: PUSH
7894: LD_INT 54
7896: PUSH
7897: EMPTY
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PUSH
7904: LD_INT 3
7906: PUSH
7907: LD_INT 95
7909: PUSH
7910: LD_INT 26
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: PUSH
7917: EMPTY
7918: LIST
7919: LIST
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: LIST
7925: PPUSH
7926: CALL_OW 72
7930: ST_TO_ADDR
// for i in tmp do
7931: LD_ADDR_VAR 0 1
7935: PUSH
7936: LD_VAR 0 2
7940: PUSH
7941: FOR_IN
7942: IFFALSE 7961
// ComMoveXY ( i , 206 , 110 ) ;
7944: LD_VAR 0 1
7948: PPUSH
7949: LD_INT 206
7951: PPUSH
7952: LD_INT 110
7954: PPUSH
7955: CALL_OW 111
7959: GO 7941
7961: POP
7962: POP
// end ;
7963: PPOPN 2
7965: END
// every 0 0$5 trigger FilterUnitsInArea ( eastBaseArea , [ f_side , 2 ] ) and FilterUnitsInArea ( eastBaseArea , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) do var i ;
7966: LD_INT 26
7968: PPUSH
7969: LD_INT 22
7971: PUSH
7972: LD_INT 2
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: PPUSH
7979: CALL_OW 70
7983: PUSH
7984: LD_INT 26
7986: PPUSH
7987: LD_INT 22
7989: PUSH
7990: LD_INT 3
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: PUSH
7997: LD_INT 30
7999: PUSH
8000: LD_INT 32
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: PUSH
8007: LD_INT 50
8009: PUSH
8010: EMPTY
8011: LIST
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: LIST
8017: PPUSH
8018: CALL_OW 70
8022: AND
8023: IFFALSE 8102
8025: GO 8027
8027: DISABLE
8028: LD_INT 0
8030: PPUSH
// begin for i in FilterUnitsInArea ( eastBaseArea , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) do
8031: LD_ADDR_VAR 0 1
8035: PUSH
8036: LD_INT 26
8038: PPUSH
8039: LD_INT 22
8041: PUSH
8042: LD_INT 3
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: PUSH
8049: LD_INT 30
8051: PUSH
8052: LD_INT 32
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: PUSH
8059: LD_INT 50
8061: PUSH
8062: EMPTY
8063: LIST
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: LIST
8069: PPUSH
8070: CALL_OW 70
8074: PUSH
8075: FOR_IN
8076: IFFALSE 8100
// if IsInUnit ( i ) then
8078: LD_VAR 0 1
8082: PPUSH
8083: CALL_OW 310
8087: IFFALSE 8098
// ComExitBuilding ( i ) ;
8089: LD_VAR 0 1
8093: PPUSH
8094: CALL_OW 122
8098: GO 8075
8100: POP
8101: POP
// end ; end_of_file
8102: PPOPN 1
8104: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
8105: LD_VAR 0 1
8109: PPUSH
8110: CALL 15045 0 1
// if un = Heike then
8114: LD_VAR 0 1
8118: PUSH
8119: LD_EXP 21
8123: EQUAL
8124: IFFALSE 8133
// YouLost ( Heike ) ;
8126: LD_STRING Heike
8128: PPUSH
8129: CALL_OW 104
// if un in apeSoldGroup then
8133: LD_VAR 0 1
8137: PUSH
8138: LD_EXP 42
8142: IN
8143: IFFALSE 8161
// apeSoldGroup := apeSoldGroup diff un ;
8145: LD_ADDR_EXP 42
8149: PUSH
8150: LD_EXP 42
8154: PUSH
8155: LD_VAR 0 1
8159: DIFF
8160: ST_TO_ADDR
// if un in apeEngGroup then
8161: LD_VAR 0 1
8165: PUSH
8166: LD_EXP 43
8170: IN
8171: IFFALSE 8189
// apeEngGroup := apeEngGroup diff un ;
8173: LD_ADDR_EXP 43
8177: PUSH
8178: LD_EXP 43
8182: PUSH
8183: LD_VAR 0 1
8187: DIFF
8188: ST_TO_ADDR
// if un in oilBaseGuard then
8189: LD_VAR 0 1
8193: PUSH
8194: LD_EXP 38
8198: IN
8199: IFFALSE 8217
// oilBaseGuard := oilBaseGuard diff un ;
8201: LD_ADDR_EXP 38
8205: PUSH
8206: LD_EXP 38
8210: PUSH
8211: LD_VAR 0 1
8215: DIFF
8216: ST_TO_ADDR
// if un in ruNorthGroup then
8217: LD_VAR 0 1
8221: PUSH
8222: LD_EXP 39
8226: IN
8227: IFFALSE 8245
// ruNorthGroup := ruNorthGroup diff un ;
8229: LD_ADDR_EXP 39
8233: PUSH
8234: LD_EXP 39
8238: PUSH
8239: LD_VAR 0 1
8243: DIFF
8244: ST_TO_ADDR
// if un in ruSouthGroup then
8245: LD_VAR 0 1
8249: PUSH
8250: LD_EXP 40
8254: IN
8255: IFFALSE 8273
// ruSouthGroup := ruSouthGroup diff un ;
8257: LD_ADDR_EXP 40
8261: PUSH
8262: LD_EXP 40
8266: PUSH
8267: LD_VAR 0 1
8271: DIFF
8272: ST_TO_ADDR
// if un in ruConvoySquad then
8273: LD_VAR 0 1
8277: PUSH
8278: LD_EXP 41
8282: IN
8283: IFFALSE 8301
// ruConvoySquad := ruConvoySquad diff un ;
8285: LD_ADDR_EXP 41
8289: PUSH
8290: LD_EXP 41
8294: PUSH
8295: LD_VAR 0 1
8299: DIFF
8300: ST_TO_ADDR
// end ;
8301: PPOPN 1
8303: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8304: LD_VAR 0 1
8308: PPUSH
8309: LD_VAR 0 2
8313: PPUSH
8314: CALL 15103 0 2
// if GetWeapon ( veh ) = ar_radar then
8318: LD_VAR 0 1
8322: PPUSH
8323: CALL_OW 264
8327: PUSH
8328: LD_INT 30
8330: EQUAL
8331: IFFALSE 8341
// radarConstructed := true ;
8333: LD_ADDR_EXP 13
8337: PUSH
8338: LD_INT 1
8340: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
8341: LD_VAR 0 1
8345: PPUSH
8346: CALL_OW 264
8350: PUSH
8351: LD_INT 26
8353: EQUAL
8354: IFFALSE 8364
// flamethrowerBuilt := true ;
8356: LD_ADDR_EXP 20
8360: PUSH
8361: LD_INT 1
8363: ST_TO_ADDR
// end ;
8364: PPOPN 2
8366: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
8367: LD_ADDR_EXP 18
8371: PUSH
8372: LD_EXP 18
8376: PUSH
8377: LD_INT 1
8379: PLUS
8380: ST_TO_ADDR
// if oldId in ruConvoySquad then
8381: LD_VAR 0 2
8385: PUSH
8386: LD_EXP 41
8390: IN
8391: IFFALSE 8409
// ruConvoySquad := ruConvoySquad diff oldId ;
8393: LD_ADDR_EXP 41
8397: PUSH
8398: LD_EXP 41
8402: PUSH
8403: LD_VAR 0 2
8407: DIFF
8408: ST_TO_ADDR
// if newId in ruConvoySquad then
8409: LD_VAR 0 1
8413: PUSH
8414: LD_EXP 41
8418: IN
8419: IFFALSE 8437
// ruConvoySquad := ruConvoySquad diff newId ;
8421: LD_ADDR_EXP 41
8425: PUSH
8426: LD_EXP 41
8430: PUSH
8431: LD_VAR 0 1
8435: DIFF
8436: ST_TO_ADDR
// end ; end_of_file
8437: PPOPN 4
8439: END
// export function Action ; var i , p , un , veh , tmp ; begin
8440: LD_INT 0
8442: PPUSH
8443: PPUSH
8444: PPUSH
8445: PPUSH
8446: PPUSH
8447: PPUSH
// InGameOn ;
8448: CALL_OW 8
// music_nat := 2 ;
8452: LD_ADDR_OWVAR 71
8456: PUSH
8457: LD_INT 2
8459: ST_TO_ADDR
// music_class := music_recon ;
8460: LD_ADDR_OWVAR 72
8464: PUSH
8465: LD_INT 3
8467: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
8468: LD_INT 7
8470: PPUSH
8471: LD_INT 6
8473: PPUSH
8474: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 30 ) ;
8478: LD_INT 7
8480: PPUSH
8481: LD_INT 6
8483: PPUSH
8484: LD_INT 2
8486: PPUSH
8487: LD_INT 30
8489: NEG
8490: PPUSH
8491: CALL 1155 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Markov , Aviradze , Sophia ] ;
8495: LD_ADDR_VAR 0 6
8499: PUSH
8500: LD_EXP 21
8504: PUSH
8505: LD_EXP 22
8509: PUSH
8510: LD_EXP 23
8514: PUSH
8515: LD_EXP 24
8519: PUSH
8520: LD_EXP 25
8524: PUSH
8525: LD_EXP 26
8529: PUSH
8530: LD_EXP 28
8534: PUSH
8535: LD_EXP 33
8539: PUSH
8540: LD_EXP 27
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: ST_TO_ADDR
// tmp := tmp diff 0 ;
8556: LD_ADDR_VAR 0 6
8560: PUSH
8561: LD_VAR 0 6
8565: PUSH
8566: LD_INT 0
8568: DIFF
8569: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
8570: LD_ADDR_VAR 0 6
8574: PUSH
8575: LD_VAR 0 6
8579: PPUSH
8580: LD_INT 3
8582: PPUSH
8583: CALL 72512 0 2
8587: ST_TO_ADDR
// for i in heikeVehicles do
8588: LD_ADDR_VAR 0 2
8592: PUSH
8593: LD_EXP 35
8597: PUSH
8598: FOR_IN
8599: IFFALSE 8798
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
8601: LD_INT 5
8603: PPUSH
8604: LD_VAR 0 2
8608: PUSH
8609: LD_INT 5
8611: ARRAY
8612: PPUSH
8613: LD_VAR 0 2
8617: PUSH
8618: LD_INT 1
8620: ARRAY
8621: PPUSH
8622: LD_VAR 0 2
8626: PUSH
8627: LD_INT 2
8629: ARRAY
8630: PPUSH
8631: LD_VAR 0 2
8635: PUSH
8636: LD_INT 3
8638: ARRAY
8639: PPUSH
8640: LD_VAR 0 2
8644: PUSH
8645: LD_INT 4
8647: ARRAY
8648: PPUSH
8649: LD_INT 34
8651: PPUSH
8652: CALL 447 0 7
// veh := CreateVehicle ;
8656: LD_ADDR_VAR 0 5
8660: PUSH
8661: CALL_OW 45
8665: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
8666: LD_VAR 0 2
8670: PUSH
8671: LD_INT 4
8673: ARRAY
8674: PUSH
8675: LD_INT 51
8677: PUSH
8678: LD_INT 32
8680: PUSH
8681: LD_INT 12
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: LIST
8688: IN
8689: IFFALSE 8769
// begin if i [ 7 ] [ 1 ] then
8691: LD_VAR 0 2
8695: PUSH
8696: LD_INT 7
8698: ARRAY
8699: PUSH
8700: LD_INT 1
8702: ARRAY
8703: IFFALSE 8730
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
8705: LD_VAR 0 5
8709: PPUSH
8710: LD_INT 1
8712: PPUSH
8713: LD_VAR 0 2
8717: PUSH
8718: LD_INT 7
8720: ARRAY
8721: PUSH
8722: LD_INT 1
8724: ARRAY
8725: PPUSH
8726: CALL_OW 291
// if i [ 7 ] [ 2 ] then
8730: LD_VAR 0 2
8734: PUSH
8735: LD_INT 7
8737: ARRAY
8738: PUSH
8739: LD_INT 2
8741: ARRAY
8742: IFFALSE 8769
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
8744: LD_VAR 0 5
8748: PPUSH
8749: LD_INT 2
8751: PPUSH
8752: LD_VAR 0 2
8756: PUSH
8757: LD_INT 7
8759: ARRAY
8760: PUSH
8761: LD_INT 2
8763: ARRAY
8764: PPUSH
8765: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8769: LD_VAR 0 5
8773: PPUSH
8774: LD_INT 2
8776: PPUSH
8777: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8781: LD_VAR 0 5
8785: PPUSH
8786: LD_INT 4
8788: PPUSH
8789: LD_INT 0
8791: PPUSH
8792: CALL_OW 49
// end ;
8796: GO 8598
8798: POP
8799: POP
// if tmp then
8800: LD_VAR 0 6
8804: IFFALSE 8914
// begin p := 0 ;
8806: LD_ADDR_VAR 0 3
8810: PUSH
8811: LD_INT 0
8813: ST_TO_ADDR
// for i in tmp do
8814: LD_ADDR_VAR 0 2
8818: PUSH
8819: LD_VAR 0 6
8823: PUSH
8824: FOR_IN
8825: IFFALSE 8912
// begin p := p + 1 ;
8827: LD_ADDR_VAR 0 3
8831: PUSH
8832: LD_VAR 0 3
8836: PUSH
8837: LD_INT 1
8839: PLUS
8840: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHumanArea , false ) ;
8841: LD_VAR 0 2
8845: PPUSH
8846: LD_INT 5
8848: PPUSH
8849: LD_INT 0
8851: PPUSH
8852: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8856: LD_VAR 0 2
8860: PPUSH
8861: LD_INT 26
8863: PPUSH
8864: LD_INT 9
8866: PPUSH
8867: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8871: LD_VAR 0 3
8875: PUSH
8876: LD_EXP 35
8880: GREATEREQUAL
8881: PUSH
8882: LD_VAR 0 2
8886: PPUSH
8887: CALL_OW 257
8891: PUSH
8892: LD_INT 3
8894: EQUAL
8895: AND
8896: IFFALSE 8910
// SetClass ( i , 1 ) ;
8898: LD_VAR 0 2
8902: PPUSH
8903: LD_INT 1
8905: PPUSH
8906: CALL_OW 336
// end ;
8910: GO 8824
8912: POP
8913: POP
// end ; if heikeSecondSquad then
8914: LD_EXP 34
8918: IFFALSE 9020
// for i in heikeSecondSquad do
8920: LD_ADDR_VAR 0 2
8924: PUSH
8925: LD_EXP 34
8929: PUSH
8930: FOR_IN
8931: IFFALSE 9018
// begin p := p + 1 ;
8933: LD_ADDR_VAR 0 3
8937: PUSH
8938: LD_VAR 0 3
8942: PUSH
8943: LD_INT 1
8945: PLUS
8946: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8947: LD_VAR 0 2
8951: PPUSH
8952: LD_INT 6
8954: PPUSH
8955: LD_INT 0
8957: PPUSH
8958: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8962: LD_VAR 0 2
8966: PPUSH
8967: LD_INT 26
8969: PPUSH
8970: LD_INT 9
8972: PPUSH
8973: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8977: LD_VAR 0 3
8981: PUSH
8982: LD_EXP 35
8986: GREATEREQUAL
8987: PUSH
8988: LD_VAR 0 2
8992: PPUSH
8993: CALL_OW 257
8997: PUSH
8998: LD_INT 3
9000: EQUAL
9001: AND
9002: IFFALSE 9016
// SetClass ( i , 1 ) ;
9004: LD_VAR 0 2
9008: PPUSH
9009: LD_INT 1
9011: PPUSH
9012: CALL_OW 336
// end ;
9016: GO 8930
9018: POP
9019: POP
// if heikeApes then
9020: LD_EXP 36
9024: IFFALSE 9067
// for i in heikeApes do
9026: LD_ADDR_VAR 0 2
9030: PUSH
9031: LD_EXP 36
9035: PUSH
9036: FOR_IN
9037: IFFALSE 9065
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
9039: LD_VAR 0 2
9043: PPUSH
9044: LD_INT 7
9046: PPUSH
9047: LD_INT 0
9049: PPUSH
9050: CALL_OW 49
// ComHold ( i ) ;
9054: LD_VAR 0 2
9058: PPUSH
9059: CALL_OW 140
// end ;
9063: GO 9036
9065: POP
9066: POP
// if Kurt then
9067: LD_EXP 32
9071: IFFALSE 9103
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
9073: LD_EXP 32
9077: PPUSH
9078: LD_INT 8
9080: PPUSH
9081: LD_INT 0
9083: PPUSH
9084: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
9088: LD_EXP 32
9092: PPUSH
9093: LD_INT 42
9095: PPUSH
9096: LD_INT 32
9098: PPUSH
9099: CALL_OW 118
// end ; wait ( 0 0$2 ) ;
9103: LD_INT 70
9105: PPUSH
9106: CALL_OW 67
// Say ( Heike , DH-Start-1 ) ;
9110: LD_EXP 21
9114: PPUSH
9115: LD_STRING DH-Start-1
9117: PPUSH
9118: CALL_OW 88
// if Givi then
9122: LD_EXP 22
9126: IFFALSE 9389
// begin Say ( Givi , DG-Start-2-5 ) ;
9128: LD_EXP 22
9132: PPUSH
9133: LD_STRING DG-Start-2-5
9135: PPUSH
9136: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
9140: LD_EXP 21
9144: PPUSH
9145: LD_STRING DH-Start-3
9147: PPUSH
9148: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9152: LD_EXP 21
9156: PPUSH
9157: LD_STRING DH-Start-4
9159: PPUSH
9160: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
9164: LD_EXP 22
9168: PPUSH
9169: LD_STRING DG-Start-5
9171: PPUSH
9172: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
9176: LD_EXP 21
9180: PPUSH
9181: LD_STRING DH-Start-6
9183: PPUSH
9184: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
9188: LD_EXP 22
9192: PPUSH
9193: LD_STRING DG-Start-7
9195: PPUSH
9196: CALL_OW 88
// if Mike then
9200: LD_EXP 23
9204: IFFALSE 9377
// begin Say ( Mike , DM-Start-8 ) ;
9206: LD_EXP 23
9210: PPUSH
9211: LD_STRING DM-Start-8
9213: PPUSH
9214: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
9218: LD_EXP 23
9222: PPUSH
9223: LD_STRING DM-Start-9
9225: PPUSH
9226: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
9230: LD_EXP 22
9234: PPUSH
9235: LD_STRING DG-Start-10
9237: PPUSH
9238: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
9242: LD_EXP 22
9246: PPUSH
9247: LD_STRING DG-Start-11
9249: PPUSH
9250: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
9254: LD_EXP 21
9258: PPUSH
9259: LD_STRING DH-Start-12
9261: PPUSH
9262: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
9266: LD_EXP 22
9270: PPUSH
9271: LD_STRING DG-Start-13
9273: PPUSH
9274: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
9278: LD_EXP 22
9282: PPUSH
9283: LD_STRING DG-Start-14
9285: PPUSH
9286: CALL_OW 88
// if Kaia then
9290: LD_EXP 26
9294: IFFALSE 9377
// begin Say ( Kaia , DK-Start-15 ) ;
9296: LD_EXP 26
9300: PPUSH
9301: LD_STRING DK-Start-15
9303: PPUSH
9304: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
9308: LD_EXP 26
9312: PPUSH
9313: LD_STRING DK-Start-16
9315: PPUSH
9316: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
9320: LD_EXP 26
9324: PPUSH
9325: LD_STRING DK-Start-17
9327: PPUSH
9328: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9332: LD_INT 10
9334: PPUSH
9335: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
9339: LD_EXP 22
9343: PPUSH
9344: LD_EXP 26
9348: PPUSH
9349: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
9353: LD_EXP 22
9357: PPUSH
9358: LD_STRING DG-Start-18
9360: PPUSH
9361: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
9365: LD_EXP 26
9369: PPUSH
9370: LD_STRING DK-Start-19
9372: PPUSH
9373: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
9377: LD_EXP 21
9381: PPUSH
9382: LD_STRING DH-Start-20
9384: PPUSH
9385: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
9389: LD_INT 70
9391: PPUSH
9392: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
9396: LD_EXP 29
9400: PPUSH
9401: LD_STRING DShar-Start-21
9403: PPUSH
9404: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
9408: LD_EXP 21
9412: PPUSH
9413: LD_STRING DH-Start-22
9415: PPUSH
9416: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
9420: LD_EXP 29
9424: PPUSH
9425: LD_STRING DShar-Start-23
9427: PPUSH
9428: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
9432: LD_EXP 29
9436: PPUSH
9437: LD_STRING DShar-Start-24
9439: PPUSH
9440: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
9444: LD_EXP 29
9448: PPUSH
9449: LD_STRING DShar-Start-25
9451: PPUSH
9452: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
9456: LD_EXP 29
9460: PPUSH
9461: LD_STRING DShar-Start-26
9463: PPUSH
9464: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
9468: LD_EXP 21
9472: PPUSH
9473: LD_STRING DH-Start-27
9475: PPUSH
9476: CALL_OW 88
// if Kaia then
9480: LD_EXP 26
9484: IFFALSE 9526
// begin ComTurnUnit ( Heike , Kaia ) ;
9486: LD_EXP 21
9490: PPUSH
9491: LD_EXP 26
9495: PPUSH
9496: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
9500: LD_EXP 26
9504: PPUSH
9505: LD_STRING DK-Start-28
9507: PPUSH
9508: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
9512: LD_EXP 21
9516: PPUSH
9517: LD_STRING DH-Start-29
9519: PPUSH
9520: CALL_OW 88
// end else
9524: GO 9538
// Say ( Heike , DH-Start-a-28 ) ;
9526: LD_EXP 21
9530: PPUSH
9531: LD_STRING DH-Start-a-28
9533: PPUSH
9534: CALL_OW 88
// if Givi then
9538: LD_EXP 22
9542: IFFALSE 9777
// begin ComTurnUnit ( Heike , Givi ) ;
9544: LD_EXP 21
9548: PPUSH
9549: LD_EXP 22
9553: PPUSH
9554: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
9558: LD_EXP 22
9562: PPUSH
9563: LD_EXP 21
9567: PPUSH
9568: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
9572: LD_EXP 21
9576: PPUSH
9577: LD_STRING DH-Start-30
9579: PPUSH
9580: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
9584: LD_EXP 21
9588: PPUSH
9589: LD_STRING DH-Start-31
9591: PPUSH
9592: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
9596: LD_EXP 22
9600: PPUSH
9601: LD_STRING DG-Start-32
9603: PPUSH
9604: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
9608: LD_EXP 21
9612: PPUSH
9613: LD_STRING DH-Start-33
9615: PPUSH
9616: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
9620: LD_EXP 22
9624: PPUSH
9625: LD_STRING DG-Start-34
9627: PPUSH
9628: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
9632: LD_EXP 22
9636: PPUSH
9637: LD_STRING DG-Start-35
9639: PPUSH
9640: CALL_OW 88
// if Kurt and not dialogue_skipped then
9644: LD_EXP 32
9648: PUSH
9649: LD_OWVAR 59
9653: NOT
9654: AND
9655: IFFALSE 9686
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
9657: LD_EXP 32
9661: PPUSH
9662: LD_INT 28
9664: PPUSH
9665: LD_INT 13
9667: PPUSH
9668: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
9672: LD_EXP 32
9676: PPUSH
9677: LD_EXP 21
9681: PPUSH
9682: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
9686: LD_EXP 22
9690: PPUSH
9691: LD_STRING DG-Start-36
9693: PPUSH
9694: CALL_OW 88
// if Kurt then
9698: LD_EXP 32
9702: IFFALSE 9775
// begin if not Givi then
9704: LD_EXP 22
9708: NOT
9709: IFFALSE 9725
// Say ( Kurt , DKs-Start-37-a ) else
9711: LD_EXP 32
9715: PPUSH
9716: LD_STRING DKs-Start-37-a
9718: PPUSH
9719: CALL_OW 88
9723: GO 9737
// Say ( Kurt , DKs-Start-37 ) ;
9725: LD_EXP 32
9729: PPUSH
9730: LD_STRING DKs-Start-37
9732: PPUSH
9733: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
9737: LD_EXP 32
9741: PPUSH
9742: LD_STRING DKs-Start-38
9744: PPUSH
9745: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
9749: LD_EXP 21
9753: PPUSH
9754: LD_EXP 32
9758: PPUSH
9759: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
9763: LD_EXP 21
9767: PPUSH
9768: LD_STRING DH-Start-39
9770: PPUSH
9771: CALL_OW 88
// end ; end else
9775: GO 9806
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
9777: LD_EXP 34
9781: PPUSH
9782: LD_STRING DArm-Start-a-37
9784: PPUSH
9785: LD_STRING DArf-Start-a-37
9787: PPUSH
9788: CALL 1206 0 3
9792: IFFALSE 9806
// Say ( Heike , DH-Start-39 ) ;
9794: LD_EXP 21
9798: PPUSH
9799: LD_STRING DH-Start-39
9801: PPUSH
9802: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
9806: LD_INT 44
9808: PPUSH
9809: LD_INT 25
9811: PPUSH
9812: CALL_OW 428
9816: IFFALSE 9833
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
9818: LD_INT 44
9820: PPUSH
9821: LD_INT 25
9823: PPUSH
9824: CALL_OW 428
9828: PPUSH
9829: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
9833: LD_EXP 30
9837: PPUSH
9838: LD_INT 5
9840: PPUSH
9841: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
9845: LD_EXP 30
9849: PPUSH
9850: LD_INT 44
9852: PPUSH
9853: LD_INT 25
9855: PPUSH
9856: LD_INT 0
9858: PPUSH
9859: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
9863: LD_EXP 30
9867: PPUSH
9868: LD_INT 29
9870: PPUSH
9871: LD_INT 12
9873: PPUSH
9874: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9878: LD_INT 35
9880: PPUSH
9881: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9885: LD_OWVAR 59
9889: PUSH
9890: LD_EXP 21
9894: PPUSH
9895: LD_EXP 30
9899: PPUSH
9900: CALL_OW 296
9904: PUSH
9905: LD_INT 8
9907: LESS
9908: OR
9909: PUSH
9910: LD_EXP 30
9914: PPUSH
9915: LD_INT 26
9917: PPUSH
9918: LD_INT 9
9920: PPUSH
9921: CALL_OW 297
9925: PUSH
9926: LD_INT 6
9928: LESS
9929: OR
9930: IFFALSE 9878
// Say ( Olaf , DO-Scout-1 ) ;
9932: LD_EXP 30
9936: PPUSH
9937: LD_STRING DO-Scout-1
9939: PPUSH
9940: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9944: LD_EXP 30
9948: PPUSH
9949: LD_EXP 21
9953: PPUSH
9954: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9958: LD_ADDR_VAR 0 2
9962: PUSH
9963: LD_VAR 0 6
9967: PUSH
9968: LD_EXP 34
9972: UNION
9973: PUSH
9974: FOR_IN
9975: IFFALSE 9993
// ComTurnUnit ( i , Olaf ) ;
9977: LD_VAR 0 2
9981: PPUSH
9982: LD_EXP 30
9986: PPUSH
9987: CALL_OW 119
9991: GO 9974
9993: POP
9994: POP
// wait ( 0 0$0.3 ) ;
9995: LD_INT 10
9997: PPUSH
9998: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
10002: LD_EXP 21
10006: PPUSH
10007: LD_EXP 30
10011: PPUSH
10012: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
10016: LD_EXP 21
10020: PPUSH
10021: LD_EXP 30
10025: PPUSH
10026: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
10030: LD_EXP 21
10034: PPUSH
10035: LD_STRING DH-Scout-2
10037: PPUSH
10038: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
10042: LD_EXP 30
10046: PPUSH
10047: LD_STRING DO-Scout-3
10049: PPUSH
10050: CALL_OW 88
// if Mike and Givi then
10054: LD_EXP 23
10058: PUSH
10059: LD_EXP 22
10063: AND
10064: IFFALSE 10080
// Say ( Olaf , DO-Scout-4 ) else
10066: LD_EXP 30
10070: PPUSH
10071: LD_STRING DO-Scout-4
10073: PPUSH
10074: CALL_OW 88
10078: GO 10180
// begin if Mike then
10080: LD_EXP 23
10084: IFFALSE 10112
// begin Say ( Olaf , DO-Scout-a-4 ) ;
10086: LD_EXP 30
10090: PPUSH
10091: LD_STRING DO-Scout-a-4
10093: PPUSH
10094: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
10098: LD_EXP 21
10102: PPUSH
10103: LD_STRING DH-Scout-a-5
10105: PPUSH
10106: CALL_OW 88
// end else
10110: GO 10180
// if Givi then
10112: LD_EXP 22
10116: IFFALSE 10144
// begin Say ( Olaf , DO-Scout-b-4 ) ;
10118: LD_EXP 30
10122: PPUSH
10123: LD_STRING DO-Scout-b-4
10125: PPUSH
10126: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
10130: LD_EXP 21
10134: PPUSH
10135: LD_STRING DH-Scout-b-5
10137: PPUSH
10138: CALL_OW 88
// end else
10142: GO 10180
// begin Say ( Olaf , DO-Scout-f-4 ) ;
10144: LD_EXP 30
10148: PPUSH
10149: LD_STRING DO-Scout-f-4
10151: PPUSH
10152: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
10156: LD_EXP 21
10160: PPUSH
10161: LD_STRING DH-Scout-f-5
10163: PPUSH
10164: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
10168: LD_EXP 30
10172: PPUSH
10173: LD_STRING DO-Scout-f-6
10175: PPUSH
10176: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
10180: LD_EXP 21
10184: PPUSH
10185: LD_STRING DH-Scout-5
10187: PPUSH
10188: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
10192: LD_EXP 30
10196: PPUSH
10197: LD_STRING DO-Scout-6
10199: PPUSH
10200: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
10204: LD_EXP 30
10208: PPUSH
10209: LD_STRING DO-Scout-7
10211: PPUSH
10212: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
10216: LD_EXP 21
10220: PPUSH
10221: LD_STRING DH-Scout-8
10223: PPUSH
10224: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
10228: LD_EXP 21
10232: PPUSH
10233: LD_STRING DH-Scout-9
10235: PPUSH
10236: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
10240: LD_EXP 30
10244: PPUSH
10245: LD_STRING DO-Scout-10
10247: PPUSH
10248: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
10252: LD_EXP 30
10256: PPUSH
10257: LD_STRING DO-Scout-12
10259: PPUSH
10260: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
10264: LD_EXP 30
10268: PPUSH
10269: LD_STRING DO-Scout-13
10271: PPUSH
10272: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
10276: LD_EXP 30
10280: PPUSH
10281: LD_STRING DO-Scout-14
10283: PPUSH
10284: CALL_OW 88
// if Givi then
10288: LD_EXP 22
10292: IFFALSE 10318
// begin Say ( Givi , DG-Scout-15 ) ;
10294: LD_EXP 22
10298: PPUSH
10299: LD_STRING DG-Scout-15
10301: PPUSH
10302: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
10306: LD_EXP 26
10310: PPUSH
10311: LD_STRING DK-Scout-16
10313: PPUSH
10314: CALL_OW 88
// end ; if not dialogue_skipped then
10318: LD_OWVAR 59
10322: NOT
10323: IFFALSE 10444
// begin async ;
10325: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
10326: LD_EXP 30
10330: PPUSH
10331: LD_STRING DO-Scout-17
10333: PPUSH
10334: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10338: LD_INT 55
10340: PPUSH
10341: LD_INT 77
10343: PPUSH
10344: LD_INT 2
10346: PPUSH
10347: LD_INT 6
10349: NEG
10350: PPUSH
10351: CALL 1155 0 4
// wait ( 10 ) ;
10355: LD_INT 10
10357: PPUSH
10358: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
10362: LD_INT 55
10364: PPUSH
10365: LD_INT 77
10367: PPUSH
10368: CALL_OW 84
// wait ( 0 0$10 ) ;
10372: LD_INT 350
10374: PPUSH
10375: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
10379: LD_EXP 30
10383: PPUSH
10384: LD_STRING DO-Scout-18
10386: PPUSH
10387: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10391: LD_INT 204
10393: PPUSH
10394: LD_INT 107
10396: PPUSH
10397: LD_INT 2
10399: PPUSH
10400: LD_INT 12
10402: NEG
10403: PPUSH
10404: CALL 1155 0 4
// wait ( 10 ) ;
10408: LD_INT 10
10410: PPUSH
10411: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
10415: LD_INT 204
10417: PPUSH
10418: LD_INT 107
10420: PPUSH
10421: CALL_OW 84
// wait ( 0 0$10 ) ;
10425: LD_INT 350
10427: PPUSH
10428: CALL_OW 67
// sync ;
10432: SYNC
// CenterNowOnUnits ( Heike ) ;
10433: LD_EXP 21
10437: PPUSH
10438: CALL_OW 87
// end else
10442: GO 10478
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10444: LD_INT 55
10446: PPUSH
10447: LD_INT 77
10449: PPUSH
10450: LD_INT 2
10452: PPUSH
10453: LD_INT 6
10455: NEG
10456: PPUSH
10457: CALL 1155 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10461: LD_INT 204
10463: PPUSH
10464: LD_INT 107
10466: PPUSH
10467: LD_INT 2
10469: PPUSH
10470: LD_INT 12
10472: NEG
10473: PPUSH
10474: CALL 1155 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
10478: LD_EXP 30
10482: PPUSH
10483: LD_STRING DO-Scout-19
10485: PPUSH
10486: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
10490: LD_EXP 30
10494: PPUSH
10495: LD_STRING DO-Scout-20
10497: PPUSH
10498: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
10502: LD_EXP 21
10506: PPUSH
10507: LD_STRING DH-Scout-21
10509: PPUSH
10510: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
10514: LD_EXP 21
10518: PPUSH
10519: LD_STRING DH-Scout-22
10521: PPUSH
10522: CALL_OW 88
// InGameOff ;
10526: CALL_OW 9
// if heikeSecondSquad then
10530: LD_EXP 34
10534: IFFALSE 10548
// ForceSleep ( heikeSecondSquad , false ) ;
10536: LD_EXP 34
10540: PPUSH
10541: LD_INT 0
10543: PPUSH
10544: CALL_OW 585
// if Givi then
10548: LD_EXP 22
10552: IFFALSE 10567
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
10554: LD_INT 13
10556: PPUSH
10557: LD_INT 2
10559: PPUSH
10560: LD_INT 1
10562: PPUSH
10563: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
10567: LD_STRING Road
10569: PPUSH
10570: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
10574: LD_ADDR_VAR 0 2
10578: PUSH
10579: LD_INT 22
10581: PUSH
10582: LD_INT 5
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PUSH
10589: LD_INT 21
10591: PUSH
10592: LD_INT 2
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PPUSH
10603: CALL_OW 69
10607: PUSH
10608: FOR_IN
10609: IFFALSE 10625
// SetSide ( i , 2 ) ;
10611: LD_VAR 0 2
10615: PPUSH
10616: LD_INT 2
10618: PPUSH
10619: CALL_OW 235
10623: GO 10608
10625: POP
10626: POP
// SaveForQuickRestart ;
10627: CALL_OW 22
// music_class := music_auto ;
10631: LD_ADDR_OWVAR 72
10635: PUSH
10636: LD_INT 0
10638: ST_TO_ADDR
// end ;
10639: LD_VAR 0 1
10643: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
10644: LD_INT 2
10646: PPUSH
10647: LD_INT 9
10649: PPUSH
10650: CALL_OW 294
10654: IFFALSE 11019
10656: GO 10658
10658: DISABLE
// begin DialogueOn ;
10659: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
10663: LD_INT 111
10665: PPUSH
10666: LD_INT 72
10668: PPUSH
10669: LD_INT 2
10671: PPUSH
10672: LD_INT 20
10674: NEG
10675: PPUSH
10676: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
10680: LD_INT 111
10682: PPUSH
10683: LD_INT 72
10685: PPUSH
10686: LD_INT 2
10688: PPUSH
10689: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
10693: LD_INT 111
10695: PPUSH
10696: LD_INT 72
10698: PPUSH
10699: CALL_OW 86
// if IsOk ( Kamil ) then
10703: LD_EXP 25
10707: PPUSH
10708: CALL_OW 302
10712: IFFALSE 10829
// begin Say ( Kamil , DKam-Cross-1 ) ;
10714: LD_EXP 25
10718: PPUSH
10719: LD_STRING DKam-Cross-1
10721: PPUSH
10722: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
10726: LD_EXP 25
10730: PPUSH
10731: LD_STRING DKam-Cross-2
10733: PPUSH
10734: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
10738: LD_EXP 25
10742: PPUSH
10743: LD_STRING DKam-Cross-3
10745: PPUSH
10746: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
10750: LD_EXP 25
10754: PPUSH
10755: LD_STRING DKam-Cross-4
10757: PPUSH
10758: CALL_OW 88
// if IsOk ( Ibrahim ) then
10762: LD_EXP 24
10766: PPUSH
10767: CALL_OW 302
10771: IFFALSE 10827
// begin if ibrahimJoinedIn04 then
10773: LD_EXP 4
10777: IFFALSE 10791
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10779: LD_EXP 24
10783: PPUSH
10784: LD_STRING DI-Cross-b-5
10786: PPUSH
10787: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10791: LD_EXP 24
10795: PPUSH
10796: LD_STRING DI-Cross-b-6
10798: PPUSH
10799: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10803: LD_EXP 24
10807: PPUSH
10808: LD_STRING DI-Cross-b-7
10810: PPUSH
10811: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
10815: LD_EXP 25
10819: PPUSH
10820: LD_STRING DKam-Cross-8
10822: PPUSH
10823: CALL_OW 88
// end ; end else
10827: GO 10987
// if IsOk ( Sophia ) then
10829: LD_EXP 27
10833: PPUSH
10834: CALL_OW 302
10838: IFFALSE 10955
// begin Say ( Sophia , DS-Cross-1 ) ;
10840: LD_EXP 27
10844: PPUSH
10845: LD_STRING DS-Cross-1
10847: PPUSH
10848: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
10852: LD_EXP 27
10856: PPUSH
10857: LD_STRING DS-Cross-2
10859: PPUSH
10860: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
10864: LD_EXP 27
10868: PPUSH
10869: LD_STRING DS-Cross-3
10871: PPUSH
10872: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
10876: LD_EXP 27
10880: PPUSH
10881: LD_STRING DS-Cross-4
10883: PPUSH
10884: CALL_OW 88
// if IsOk ( Ibrahim ) then
10888: LD_EXP 24
10892: PPUSH
10893: CALL_OW 302
10897: IFFALSE 10953
// begin if ibrahimJoinedIn04 then
10899: LD_EXP 4
10903: IFFALSE 10917
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10905: LD_EXP 24
10909: PPUSH
10910: LD_STRING DI-Cross-b-5
10912: PPUSH
10913: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10917: LD_EXP 24
10921: PPUSH
10922: LD_STRING DI-Cross-b-6
10924: PPUSH
10925: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10929: LD_EXP 24
10933: PPUSH
10934: LD_STRING DI-Cross-b-7
10936: PPUSH
10937: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10941: LD_EXP 27
10945: PPUSH
10946: LD_STRING DS-Cross-8
10948: PPUSH
10949: CALL_OW 88
// end ; end else
10953: GO 10987
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10955: LD_EXP 34
10959: PPUSH
10960: LD_INT 50
10962: PUSH
10963: EMPTY
10964: LIST
10965: PPUSH
10966: CALL_OW 72
10970: IFFALSE 10987
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10972: LD_EXP 34
10976: PPUSH
10977: LD_STRING DArm-Cross-c-1
10979: PPUSH
10980: LD_STRING DArf-Cross-c-1
10982: PPUSH
10983: CALL 1206 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10987: LD_INT 85
10989: PPUSH
10990: LD_INT 2
10992: PPUSH
10993: LD_INT 1
10995: PPUSH
10996: CALL_OW 322
// DialogueOff ;
11000: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
11004: LD_STRING Crane
11006: PPUSH
11007: CALL_OW 337
// spottedCrossRoad := true ;
11011: LD_ADDR_EXP 8
11015: PUSH
11016: LD_INT 1
11018: ST_TO_ADDR
// end ;
11019: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
11020: LD_INT 22
11022: PUSH
11023: LD_INT 2
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PUSH
11030: LD_INT 2
11032: PUSH
11033: LD_INT 30
11035: PUSH
11036: LD_INT 0
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 30
11045: PUSH
11046: LD_INT 1
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: LIST
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: PPUSH
11062: CALL_OW 69
11066: PUSH
11067: LD_EXP 26
11071: PPUSH
11072: CALL_OW 302
11076: PUSH
11077: LD_EXP 34
11081: OR
11082: AND
11083: IFFALSE 11295
11085: GO 11087
11087: DISABLE
// begin DialogueOn ;
11088: CALL_OW 6
// if Kaia then
11092: LD_EXP 26
11096: IFFALSE 11109
// CenterNowOnUnits ( Kaia ) else
11098: LD_EXP 26
11102: PPUSH
11103: CALL_OW 87
11107: GO 11118
// CenterNowOnUnits ( Heike ) ;
11109: LD_EXP 21
11113: PPUSH
11114: CALL_OW 87
// if IsOk ( Kaia ) then
11118: LD_EXP 26
11122: PPUSH
11123: CALL_OW 302
11127: IFFALSE 11143
// Say ( Kaia , DK-Cam-1 ) else
11129: LD_EXP 26
11133: PPUSH
11134: LD_STRING DK-Cam-1
11136: PPUSH
11137: CALL_OW 88
11141: GO 11158
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
11143: LD_EXP 34
11147: PPUSH
11148: LD_STRING DArm-Cam-1
11150: PPUSH
11151: LD_STRING DArf-Cam-1
11153: PPUSH
11154: CALL 1206 0 3
// Say ( Heike , DH-Cam-2 ) ;
11158: LD_EXP 21
11162: PPUSH
11163: LD_STRING DH-Cam-2
11165: PPUSH
11166: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
11170: LD_EXP 21
11174: PPUSH
11175: LD_STRING DH-Cam-3
11177: PPUSH
11178: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11182: LD_EXP 21
11186: PPUSH
11187: LD_STRING DH-Cam-4
11189: PPUSH
11190: CALL_OW 88
// if IsOk ( Kaia ) then
11194: LD_EXP 26
11198: PPUSH
11199: CALL_OW 302
11203: IFFALSE 11219
// Say ( Kaia , DK-Cam-5 ) else
11205: LD_EXP 26
11209: PPUSH
11210: LD_STRING DK-Cam-5
11212: PPUSH
11213: CALL_OW 88
11217: GO 11234
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
11219: LD_EXP 34
11223: PPUSH
11224: LD_STRING DArm-Cam-5
11226: PPUSH
11227: LD_STRING DArf-Cam-5
11229: PPUSH
11230: CALL 1206 0 3
// Say ( Olaf , DO-Cam-6 ) ;
11234: LD_EXP 30
11238: PPUSH
11239: LD_STRING DO-Cam-6
11241: PPUSH
11242: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
11246: LD_EXP 30
11250: PPUSH
11251: LD_STRING DO-Cam-7
11253: PPUSH
11254: CALL_OW 88
// DialogueOff ;
11258: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
11262: LD_STRING Radar
11264: PPUSH
11265: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
11269: LD_INT 6
11271: PPUSH
11272: LD_INT 2
11274: PPUSH
11275: LD_INT 1
11277: PPUSH
11278: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
11282: LD_INT 20
11284: PPUSH
11285: LD_INT 2
11287: PPUSH
11288: LD_INT 1
11290: PPUSH
11291: CALL_OW 324
// end ;
11295: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
11296: LD_INT 22
11298: PUSH
11299: LD_INT 2
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: LD_INT 2
11308: PUSH
11309: LD_INT 34
11311: PUSH
11312: LD_INT 30
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: PUSH
11319: LD_INT 35
11321: PUSH
11322: LD_INT 30
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: LIST
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PPUSH
11338: CALL_OW 69
11342: IFFALSE 11354
11344: GO 11346
11346: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
11347: LD_STRING RadarDone
11349: PPUSH
11350: CALL_OW 337
11354: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
11355: LD_INT 22
11357: PUSH
11358: LD_INT 2
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: LD_INT 34
11367: PUSH
11368: LD_INT 88
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PPUSH
11379: CALL_OW 69
11383: IFFALSE 11395
11385: GO 11387
11387: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
11388: LD_STRING CraneDone
11390: PPUSH
11391: CALL_OW 337
11395: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
11396: LD_EXP 30
11400: PPUSH
11401: CALL_OW 302
11405: PUSH
11406: LD_EXP 33
11410: PPUSH
11411: CALL_OW 302
11415: AND
11416: PUSH
11417: LD_INT 6
11419: PPUSH
11420: LD_INT 2
11422: PPUSH
11423: CALL_OW 321
11427: PUSH
11428: LD_INT 2
11430: EQUAL
11431: AND
11432: PUSH
11433: LD_EXP 33
11437: PPUSH
11438: LD_EXP 21
11442: PPUSH
11443: CALL_OW 296
11447: PUSH
11448: LD_INT 10
11450: LESS
11451: PUSH
11452: LD_EXP 33
11456: PPUSH
11457: CALL_OW 310
11461: OR
11462: AND
11463: IFFALSE 11677
11465: GO 11467
11467: DISABLE
// begin DialogueOn ;
11468: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
11472: LD_EXP 33
11476: PPUSH
11477: LD_STRING DA-RC-1
11479: PPUSH
11480: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
11484: LD_EXP 33
11488: PPUSH
11489: LD_STRING DA-RC-2
11491: PPUSH
11492: CALL_OW 88
// if IsOk ( Kaia ) then
11496: LD_EXP 26
11500: PPUSH
11501: CALL_OW 302
11505: IFFALSE 11579
// begin Say ( Kaia , DK-RC-3 ) ;
11507: LD_EXP 26
11511: PPUSH
11512: LD_STRING DK-RC-3
11514: PPUSH
11515: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
11519: LD_EXP 33
11523: PPUSH
11524: LD_STRING DA-RC-4
11526: PPUSH
11527: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
11531: LD_EXP 26
11535: PPUSH
11536: LD_STRING DK-RC-5
11538: PPUSH
11539: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
11543: LD_EXP 33
11547: PPUSH
11548: LD_STRING DA-RC-6
11550: PPUSH
11551: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
11555: LD_EXP 26
11559: PPUSH
11560: LD_STRING DK-RC-7
11562: PPUSH
11563: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
11567: LD_EXP 33
11571: PPUSH
11572: LD_STRING DA-RC-8
11574: PPUSH
11575: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
11579: LD_EXP 21
11583: PPUSH
11584: LD_STRING DH-RC-9
11586: PPUSH
11587: CALL_OW 88
// if IsOk ( Markov ) then
11591: LD_EXP 28
11595: PPUSH
11596: CALL_OW 302
11600: IFFALSE 11628
// begin Say ( Markov , DMar-RC-10 ) ;
11602: LD_EXP 28
11606: PPUSH
11607: LD_STRING DMar-RC-10
11609: PPUSH
11610: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
11614: LD_EXP 28
11618: PPUSH
11619: LD_STRING DMar-RC-11
11621: PPUSH
11622: CALL_OW 88
// end else
11626: GO 11640
// begin Say ( Olaf , DO-RC-a-10 ) ;
11628: LD_EXP 30
11632: PPUSH
11633: LD_STRING DO-RC-a-10
11635: PPUSH
11636: CALL_OW 88
// end ; DialogueOff ;
11640: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
11644: LD_STRING RemoteControl
11646: PPUSH
11647: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
11651: LD_INT 15
11653: PPUSH
11654: LD_INT 2
11656: PPUSH
11657: LD_INT 1
11659: PPUSH
11660: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
11664: LD_INT 22
11666: PPUSH
11667: LD_INT 2
11669: PPUSH
11670: LD_INT 1
11672: PPUSH
11673: CALL_OW 324
// end ;
11677: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
11678: LD_INT 12
11680: PPUSH
11681: LD_INT 22
11683: PUSH
11684: LD_INT 2
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: PPUSH
11691: CALL_OW 70
11695: IFFALSE 12062
11697: GO 11699
11699: DISABLE
11700: LD_INT 0
11702: PPUSH
// begin PrepareWestBase ;
11703: CALL 3969 0 0
// westBaseSpotted := true ;
11707: LD_ADDR_EXP 5
11711: PUSH
11712: LD_INT 1
11714: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11715: LD_INT 70
11717: PPUSH
11718: CALL_OW 67
// InGameOn ;
11722: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
11726: LD_INT 56
11728: PPUSH
11729: LD_INT 77
11731: PPUSH
11732: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
11736: LD_INT 56
11738: PPUSH
11739: LD_INT 77
11741: PPUSH
11742: LD_INT 2
11744: PPUSH
11745: LD_INT 12
11747: NEG
11748: PPUSH
11749: CALL_OW 330
// wait ( 0 0$2 ) ;
11753: LD_INT 70
11755: PPUSH
11756: CALL_OW 67
// DialogueOn ;
11760: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
11764: LD_EXP 21
11768: PPUSH
11769: LD_STRING DH-Rbase-1
11771: PPUSH
11772: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
11776: LD_EXP 26
11780: PPUSH
11781: LD_STRING DK-Rbase-2
11783: PPUSH
11784: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
11788: LD_EXP 26
11792: PPUSH
11793: LD_STRING DK-Rbase-3
11795: PPUSH
11796: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
11800: LD_EXP 26
11804: PPUSH
11805: LD_STRING DK-Rbase-4
11807: PPUSH
11808: CALL_OW 88
// DialogueOff ;
11812: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
11816: LD_INT 56
11818: PPUSH
11819: LD_INT 77
11821: PPUSH
11822: LD_INT 2
11824: PPUSH
11825: CALL_OW 331
// InGameOff ;
11829: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
11833: LD_INT 35
11835: PPUSH
11836: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
11840: LD_EXP 42
11844: NOT
11845: PUSH
11846: LD_EXP 43
11850: NOT
11851: AND
11852: IFFALSE 11833
// wait ( 0 0$2 ) ;
11854: LD_INT 70
11856: PPUSH
11857: CALL_OW 67
// if IsOk ( Kaia ) then
11861: LD_EXP 26
11865: PPUSH
11866: CALL_OW 302
11870: IFFALSE 11985
// begin DialogueOn ;
11872: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
11876: LD_INT 56
11878: PPUSH
11879: LD_INT 81
11881: PPUSH
11882: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11886: LD_EXP 26
11890: PPUSH
11891: LD_STRING DK-Rbase-5
11893: PPUSH
11894: CALL_OW 88
// if IsOk ( Givi ) then
11898: LD_EXP 22
11902: PPUSH
11903: CALL_OW 302
11907: IFFALSE 11981
// begin Say ( Givi , DG-Rbase-6 ) ;
11909: LD_EXP 22
11913: PPUSH
11914: LD_STRING DG-Rbase-6
11916: PPUSH
11917: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11921: LD_EXP 22
11925: PPUSH
11926: LD_STRING DG-Rbase-7
11928: PPUSH
11929: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11933: LD_EXP 26
11937: PPUSH
11938: LD_STRING DK-Rbase-8
11940: PPUSH
11941: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11945: LD_EXP 22
11949: PPUSH
11950: LD_STRING DG-Rbase-9
11952: PPUSH
11953: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11957: LD_EXP 22
11961: PPUSH
11962: LD_STRING DG-Rbase-10
11964: PPUSH
11965: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11969: LD_EXP 26
11973: PPUSH
11974: LD_STRING DK-Rbase-11
11976: PPUSH
11977: CALL_OW 88
// end ; DialogueOff ;
11981: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11985: LD_ADDR_VAR 0 1
11989: PUSH
11990: LD_INT 12
11992: PPUSH
11993: LD_INT 22
11995: PUSH
11996: LD_INT 3
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PUSH
12003: LD_INT 21
12005: PUSH
12006: LD_INT 3
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: PPUSH
12017: CALL_OW 70
12021: PUSH
12022: FOR_IN
12023: IFFALSE 12039
// SetSide ( i , 2 ) ;
12025: LD_VAR 0 1
12029: PPUSH
12030: LD_INT 2
12032: PPUSH
12033: CALL_OW 235
12037: GO 12022
12039: POP
12040: POP
// westBaseCaptured := true ;
12041: LD_ADDR_EXP 9
12045: PUSH
12046: LD_INT 1
12048: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
12049: LD_INT 0
12051: PPUSH
12052: LD_INT 2
12054: PPUSH
12055: LD_INT 1
12057: PPUSH
12058: CALL_OW 324
// end ;
12062: PPOPN 1
12064: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 or tick > 15 15$00 do
12065: LD_EXP 38
12069: NOT
12070: PUSH
12071: LD_INT 10
12073: PPUSH
12074: CALL_OW 255
12078: PUSH
12079: LD_INT 2
12081: EQUAL
12082: OR
12083: PUSH
12084: LD_OWVAR 1
12088: PUSH
12089: LD_INT 31500
12091: GREATER
12092: OR
12093: IFFALSE 12230
12095: GO 12097
12097: DISABLE
// begin DialogueOn ;
12098: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
12102: LD_EXP 21
12106: PPUSH
12107: LD_STRING DH-Goal-1
12109: PPUSH
12110: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
12114: LD_EXP 29
12118: PPUSH
12119: LD_STRING DShar-Goal-2
12121: PPUSH
12122: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
12126: LD_EXP 21
12130: PPUSH
12131: LD_STRING DH-Goal-3
12133: PPUSH
12134: CALL_OW 88
// if reinforcementsAllowed then
12138: LD_EXP 14
12142: IFFALSE 12168
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
12144: LD_EXP 29
12148: PPUSH
12149: LD_STRING DShar-Goal-4
12151: PPUSH
12152: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
12156: LD_EXP 21
12160: PPUSH
12161: LD_STRING DH-Goal-5
12163: PPUSH
12164: CALL_OW 88
// end ; DialogueOff ;
12168: CALL_OW 7
// eastBaseCaptured := true ;
12172: LD_ADDR_EXP 10
12176: PUSH
12177: LD_INT 1
12179: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
12180: LD_STRING BaseCaptured
12182: PPUSH
12183: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
12187: LD_INT 10
12189: PPUSH
12190: LD_INT 2
12192: PPUSH
12193: CALL_OW 235
// if not reinforcementsAllowed then
12197: LD_EXP 14
12201: NOT
12202: IFFALSE 12206
// exit ;
12204: GO 12230
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
12206: LD_INT 21000
12208: PUSH
12209: LD_INT 1050
12211: NEG
12212: PPUSH
12213: LD_INT 1050
12215: PPUSH
12216: CALL_OW 12
12220: PLUS
12221: PPUSH
12222: CALL_OW 67
// PrepareReinforcements ;
12226: CALL 2182 0 0
// end ;
12230: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
12231: LD_INT 22
12233: PUSH
12234: LD_INT 2
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: PUSH
12241: LD_INT 30
12243: PUSH
12244: LD_INT 13
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PPUSH
12255: CALL_OW 69
12259: IFFALSE 12276
12261: GO 12263
12263: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
12264: LD_EXP 22
12268: PPUSH
12269: LD_STRING DG-Lab-1
12271: PPUSH
12272: CALL_OW 88
// end ;
12276: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
12277: LD_INT 5
12279: PPUSH
12280: LD_INT 2
12282: PPUSH
12283: CALL_OW 321
12287: PUSH
12288: LD_INT 2
12290: EQUAL
12291: PUSH
12292: LD_EXP 22
12296: PPUSH
12297: CALL_OW 302
12301: AND
12302: IFFALSE 12363
12304: GO 12306
12306: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
12307: LD_EXP 22
12311: PPUSH
12312: LD_STRING DG-Stim-1
12314: PPUSH
12315: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
12319: LD_EXP 21
12323: PPUSH
12324: LD_STRING DH-Stim-2
12326: PPUSH
12327: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
12331: LD_EXP 22
12335: PPUSH
12336: LD_STRING DG-Stim-3
12338: PPUSH
12339: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
12343: LD_EXP 21
12347: PPUSH
12348: LD_STRING DH-Stim-4
12350: PPUSH
12351: CALL_OW 88
// drugsResearched := true ;
12355: LD_ADDR_EXP 11
12359: PUSH
12360: LD_INT 1
12362: ST_TO_ADDR
// end ;
12363: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
12364: LD_EXP 11
12368: IFFALSE 12680
12370: GO 12372
12372: DISABLE
12373: LD_INT 0
12375: PPUSH
12376: PPUSH
12377: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12378: LD_ADDR_VAR 0 2
12382: PUSH
12383: LD_EXP 21
12387: PUSH
12388: LD_EXP 22
12392: PUSH
12393: LD_EXP 30
12397: PUSH
12398: LD_EXP 28
12402: PUSH
12403: LD_EXP 26
12407: PUSH
12408: LD_EXP 27
12412: PUSH
12413: LD_EXP 32
12417: PUSH
12418: LD_EXP 25
12422: PUSH
12423: LD_EXP 23
12427: PUSH
12428: LD_EXP 24
12432: PUSH
12433: LD_EXP 33
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12451: LD_ADDR_VAR 0 3
12455: PUSH
12456: LD_STRING H
12458: PUSH
12459: LD_STRING G
12461: PUSH
12462: LD_STRING O
12464: PUSH
12465: LD_STRING Mar
12467: PUSH
12468: LD_STRING K
12470: PUSH
12471: LD_STRING S
12473: PUSH
12474: LD_STRING Ks
12476: PUSH
12477: LD_STRING Kam
12479: PUSH
12480: LD_STRING M
12482: PUSH
12483: LD_STRING I
12485: PUSH
12486: LD_STRING A
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12502: LD_INT 35
12504: PPUSH
12505: CALL_OW 67
// for i := tmp downto 1 do
12509: LD_ADDR_VAR 0 1
12513: PUSH
12514: DOUBLE
12515: LD_VAR 0 2
12519: INC
12520: ST_TO_ADDR
12521: LD_INT 1
12523: PUSH
12524: FOR_DOWNTO
12525: IFFALSE 12671
// if GetLives ( tmp [ i ] ) < 250 then
12527: LD_VAR 0 2
12531: PUSH
12532: LD_VAR 0 1
12536: ARRAY
12537: PPUSH
12538: CALL_OW 256
12542: PUSH
12543: LD_INT 250
12545: LESS
12546: IFFALSE 12669
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
12548: LD_ADDR_EXP 19
12552: PUSH
12553: LD_EXP 19
12557: PUSH
12558: LD_INT 1
12560: PLUS
12561: ST_TO_ADDR
// DialogueOn ;
12562: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
12566: LD_VAR 0 2
12570: PUSH
12571: LD_VAR 0 1
12575: ARRAY
12576: PPUSH
12577: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
12581: LD_VAR 0 2
12585: PUSH
12586: LD_VAR 0 1
12590: ARRAY
12591: PPUSH
12592: LD_STRING D
12594: PUSH
12595: LD_VAR 0 3
12599: PUSH
12600: LD_VAR 0 1
12604: ARRAY
12605: STR
12606: PUSH
12607: LD_STRING -Stim-a-1
12609: STR
12610: PPUSH
12611: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
12615: LD_ADDR_VAR 0 2
12619: PUSH
12620: LD_VAR 0 2
12624: PPUSH
12625: LD_VAR 0 1
12629: PPUSH
12630: CALL_OW 3
12634: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12635: LD_ADDR_VAR 0 3
12639: PUSH
12640: LD_VAR 0 3
12644: PPUSH
12645: LD_VAR 0 1
12649: PPUSH
12650: CALL_OW 3
12654: ST_TO_ADDR
// drugsTested := true ;
12655: LD_ADDR_EXP 6
12659: PUSH
12660: LD_INT 1
12662: ST_TO_ADDR
// DialogueOff ;
12663: CALL_OW 7
// break ;
12667: GO 12671
// end ;
12669: GO 12524
12671: POP
12672: POP
// until not tmp ;
12673: LD_VAR 0 2
12677: NOT
12678: IFFALSE 12502
// end ;
12680: PPOPN 3
12682: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
12683: LD_INT 22
12685: PUSH
12686: LD_INT 2
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: PUSH
12693: LD_INT 34
12695: PUSH
12696: LD_INT 31
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: PPUSH
12707: CALL_OW 69
12711: PUSH
12712: LD_INT 22
12714: PUSH
12715: LD_INT 2
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PUSH
12722: LD_INT 33
12724: PUSH
12725: LD_INT 2
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PPUSH
12736: CALL_OW 69
12740: AND
12741: IFFALSE 12754
12743: GO 12745
12745: DISABLE
// remoteControlConstructed := true ;
12746: LD_ADDR_EXP 12
12750: PUSH
12751: LD_INT 1
12753: ST_TO_ADDR
12754: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
12755: LD_EXP 12
12759: IFFALSE 13059
12761: GO 12763
12763: DISABLE
12764: LD_INT 0
12766: PPUSH
12767: PPUSH
12768: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12769: LD_ADDR_VAR 0 2
12773: PUSH
12774: LD_EXP 21
12778: PUSH
12779: LD_EXP 22
12783: PUSH
12784: LD_EXP 30
12788: PUSH
12789: LD_EXP 28
12793: PUSH
12794: LD_EXP 26
12798: PUSH
12799: LD_EXP 27
12803: PUSH
12804: LD_EXP 32
12808: PUSH
12809: LD_EXP 25
12813: PUSH
12814: LD_EXP 23
12818: PUSH
12819: LD_EXP 24
12823: PUSH
12824: LD_EXP 33
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12842: LD_ADDR_VAR 0 3
12846: PUSH
12847: LD_STRING H
12849: PUSH
12850: LD_STRING G
12852: PUSH
12853: LD_STRING O
12855: PUSH
12856: LD_STRING Mar
12858: PUSH
12859: LD_STRING K
12861: PUSH
12862: LD_STRING S
12864: PUSH
12865: LD_STRING Ks
12867: PUSH
12868: LD_STRING Kam
12870: PUSH
12871: LD_STRING M
12873: PUSH
12874: LD_STRING I
12876: PUSH
12877: LD_STRING A
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12893: LD_INT 35
12895: PPUSH
12896: CALL_OW 67
// for i := tmp downto 1 do
12900: LD_ADDR_VAR 0 1
12904: PUSH
12905: DOUBLE
12906: LD_VAR 0 2
12910: INC
12911: ST_TO_ADDR
12912: LD_INT 1
12914: PUSH
12915: FOR_DOWNTO
12916: IFFALSE 13050
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
12918: LD_VAR 0 2
12922: PUSH
12923: LD_VAR 0 1
12927: ARRAY
12928: PPUSH
12929: CALL_OW 257
12933: PUSH
12934: LD_INT 3
12936: EQUAL
12937: PUSH
12938: LD_VAR 0 2
12942: PUSH
12943: LD_VAR 0 1
12947: ARRAY
12948: PPUSH
12949: CALL_OW 432
12953: AND
12954: IFFALSE 13048
// begin DialogueOn ;
12956: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12960: LD_VAR 0 2
12964: PUSH
12965: LD_VAR 0 1
12969: ARRAY
12970: PPUSH
12971: LD_STRING D
12973: PUSH
12974: LD_VAR 0 3
12978: PUSH
12979: LD_VAR 0 1
12983: ARRAY
12984: STR
12985: PUSH
12986: LD_STRING -RC-a-1
12988: STR
12989: PPUSH
12990: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12994: LD_ADDR_VAR 0 2
12998: PUSH
12999: LD_VAR 0 2
13003: PPUSH
13004: LD_VAR 0 1
13008: PPUSH
13009: CALL_OW 3
13013: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
13014: LD_ADDR_VAR 0 3
13018: PUSH
13019: LD_VAR 0 3
13023: PPUSH
13024: LD_VAR 0 1
13028: PPUSH
13029: CALL_OW 3
13033: ST_TO_ADDR
// DialogueOff ;
13034: CALL_OW 7
// remoteControlTested := true ;
13038: LD_ADDR_EXP 7
13042: PUSH
13043: LD_INT 1
13045: ST_TO_ADDR
// break ;
13046: GO 13050
// end ;
13048: GO 12915
13050: POP
13051: POP
// until not tmp ;
13052: LD_VAR 0 2
13056: NOT
13057: IFFALSE 12893
// end ;
13059: PPOPN 3
13061: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
13062: LD_EXP 7
13066: PUSH
13067: LD_EXP 28
13071: PPUSH
13072: CALL_OW 302
13076: AND
13077: IFFALSE 13106
13079: GO 13081
13081: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
13082: LD_EXP 28
13086: PPUSH
13087: LD_STRING DMar-RC-a-2
13089: PPUSH
13090: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
13094: LD_EXP 28
13098: PPUSH
13099: LD_STRING DMar-RC-a-3
13101: PPUSH
13102: CALL_OW 88
// end ;
13106: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
13107: LD_EXP 14
13111: PUSH
13112: LD_EXP 21
13116: PPUSH
13117: LD_EXP 33
13121: PPUSH
13122: CALL_OW 296
13126: PUSH
13127: LD_INT 8
13129: LESS
13130: AND
13131: PUSH
13132: LD_INT 2
13134: PPUSH
13135: CALL_OW 463
13139: NOT
13140: AND
13141: PUSH
13142: LD_EXP 33
13146: PPUSH
13147: CALL_OW 302
13151: AND
13152: PUSH
13153: LD_EXP 21
13157: PPUSH
13158: CALL_OW 302
13162: AND
13163: IFFALSE 13341
13165: GO 13167
13167: DISABLE
// begin if not IsInUnit ( Aviradze ) then
13168: LD_EXP 33
13172: PPUSH
13173: CALL_OW 310
13177: NOT
13178: IFFALSE 13194
// ComTurnUnit ( Aviradze , Heike ) ;
13180: LD_EXP 33
13184: PPUSH
13185: LD_EXP 21
13189: PPUSH
13190: CALL_OW 119
// if not IsInUnit ( Heike ) then
13194: LD_EXP 21
13198: PPUSH
13199: CALL_OW 310
13203: NOT
13204: IFFALSE 13220
// ComTurnUnit ( Heike , Aviradze ) ;
13206: LD_EXP 21
13210: PPUSH
13211: LD_EXP 33
13215: PPUSH
13216: CALL_OW 119
// wait ( 0 0$1 ) ;
13220: LD_INT 35
13222: PPUSH
13223: CALL_OW 67
// DialogueOn ;
13227: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
13231: LD_EXP 33
13235: PPUSH
13236: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
13240: LD_EXP 21
13244: PPUSH
13245: LD_STRING DH-Beria-1
13247: PPUSH
13248: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
13252: LD_EXP 33
13256: PPUSH
13257: LD_STRING DA-Beria-2
13259: PPUSH
13260: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
13264: LD_EXP 21
13268: PPUSH
13269: LD_STRING DH-Beria-3
13271: PPUSH
13272: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
13276: LD_EXP 33
13280: PPUSH
13281: LD_STRING DA-Beria-4
13283: PPUSH
13284: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
13288: LD_EXP 33
13292: PPUSH
13293: LD_STRING DA-Beria-5
13295: PPUSH
13296: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
13300: LD_EXP 33
13304: PPUSH
13305: LD_STRING DA-Beria-6
13307: PPUSH
13308: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
13312: LD_EXP 21
13316: PPUSH
13317: LD_STRING DA-Beria-7
13319: PPUSH
13320: CALL_OW 88
// DialogueOff ;
13324: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
13328: LD_INT 52
13330: PPUSH
13331: LD_INT 2
13333: PPUSH
13334: LD_INT 1
13336: PPUSH
13337: CALL_OW 322
// end ;
13341: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
13342: LD_EXP 26
13346: PPUSH
13347: CALL_OW 300
13351: PUSH
13352: LD_EXP 26
13356: PPUSH
13357: CALL_OW 256
13361: PUSH
13362: LD_INT 10
13364: LESS
13365: AND
13366: IFFALSE 13403
13368: GO 13370
13370: DISABLE
// begin DialogueOn ;
13371: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
13375: LD_EXP 26
13379: PPUSH
13380: LD_STRING DK-Kdeath-1
13382: PPUSH
13383: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
13387: LD_EXP 21
13391: PPUSH
13392: LD_STRING DH-Kdeath-2
13394: PPUSH
13395: CALL_OW 88
// DialogueOff ;
13399: CALL_OW 7
// end ;
13403: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
13404: LD_INT 2
13406: PPUSH
13407: LD_EXP 39
13411: PPUSH
13412: CALL 1306 0 2
13416: IFFALSE 13433
13418: GO 13420
13420: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
13421: LD_EXP 21
13425: PPUSH
13426: LD_STRING DH-Obj-1
13428: PPUSH
13429: CALL_OW 88
13433: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
13434: LD_INT 2
13436: PPUSH
13437: LD_EXP 40
13441: PPUSH
13442: CALL 1306 0 2
13446: IFFALSE 13463
13448: GO 13450
13450: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
13451: LD_EXP 21
13455: PPUSH
13456: LD_STRING DH-Obj-a-1
13458: PPUSH
13459: CALL_OW 88
13463: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 11 11$00 , 10 10$30 , 10 10$00 , 9 9$30 ] [ Difficulty ] do
13464: LD_EXP 10
13468: PUSH
13469: LD_OWVAR 1
13473: PUSH
13474: LD_INT 23100
13476: PUSH
13477: LD_INT 22050
13479: PUSH
13480: LD_INT 21000
13482: PUSH
13483: LD_INT 19950
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: PUSH
13492: LD_OWVAR 67
13496: ARRAY
13497: GREATEREQUAL
13498: OR
13499: IFFALSE 13525
13501: GO 13503
13503: DISABLE
// begin if eastBaseCaptured then
13504: LD_EXP 10
13508: IFFALSE 13517
// wait ( 2 2$00 ) ;
13510: LD_INT 4200
13512: PPUSH
13513: CALL_OW 67
// convoyStarted := true ;
13517: LD_ADDR_EXP 17
13521: PUSH
13522: LD_INT 1
13524: ST_TO_ADDR
// end ;
13525: END
// every 0 0$1 trigger convoyStarted do
13526: LD_EXP 17
13530: IFFALSE 13621
13532: GO 13534
13534: DISABLE
// begin DialogueOn ;
13535: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
13539: LD_EXP 29
13543: PPUSH
13544: LD_STRING DShar-Convoy-1
13546: PPUSH
13547: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
13551: LD_EXP 21
13555: PPUSH
13556: LD_STRING DH-Convoy-2
13558: PPUSH
13559: CALL_OW 88
// DialogueOff ;
13563: CALL_OW 7
// wait ( 0 0$10 ) ;
13567: LD_INT 350
13569: PPUSH
13570: CALL_OW 67
// PrepareConvoy ;
13574: CALL 4616 0 0
// repeat wait ( rand ( 2 2$30 , 5 5$30 ) ) ;
13578: LD_INT 5250
13580: PPUSH
13581: LD_INT 11550
13583: PPUSH
13584: CALL_OW 12
13588: PPUSH
13589: CALL_OW 67
// PrepareConvoy ;
13593: CALL 4616 0 0
// convoyCounter := convoyCounter - 1 ;
13597: LD_ADDR_EXP 16
13601: PUSH
13602: LD_EXP 16
13606: PUSH
13607: LD_INT 1
13609: MINUS
13610: ST_TO_ADDR
// until convoyCounter <= 0 ;
13611: LD_EXP 16
13615: PUSH
13616: LD_INT 0
13618: LESSEQUAL
13619: IFFALSE 13578
// end ;
13621: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
13622: LD_EXP 15
13626: PUSH
13627: LD_INT 10
13629: GREATEREQUAL
13630: IFFALSE 13647
13632: GO 13634
13634: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
13635: LD_EXP 31
13639: PPUSH
13640: LD_STRING DOm-Fail-1
13642: PPUSH
13643: CALL_OW 94
13647: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
13648: LD_EXP 39
13652: NOT
13653: PUSH
13654: LD_EXP 40
13658: NOT
13659: AND
13660: IFFALSE 13672
13662: GO 13664
13664: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
13665: LD_STRING RaiderDone
13667: PPUSH
13668: CALL_OW 337
13672: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
13673: LD_INT 22
13675: PUSH
13676: LD_INT 2
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PUSH
13683: LD_INT 33
13685: PUSH
13686: LD_INT 2
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: PPUSH
13697: CALL_OW 69
13701: PUSH
13702: LD_INT 3
13704: GREATEREQUAL
13705: PUSH
13706: LD_INT 22
13708: PUSH
13709: LD_INT 2
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 34
13718: PUSH
13719: LD_INT 31
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PPUSH
13730: CALL_OW 69
13734: PUSH
13735: LD_INT 2
13737: GREATEREQUAL
13738: AND
13739: IFFALSE 13751
13741: GO 13743
13743: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
13744: LD_STRING RemoteControlDone
13746: PPUSH
13747: CALL_OW 337
13751: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var i , tmp , tmp2 , vehs ;
13752: LD_EXP 16
13756: PUSH
13757: LD_INT 1
13759: LESS
13760: PUSH
13761: LD_EXP 41
13765: PPUSH
13766: LD_INT 52
13768: PUSH
13769: EMPTY
13770: LIST
13771: PUSH
13772: LD_INT 21
13774: PUSH
13775: LD_INT 1
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: PPUSH
13786: CALL_OW 72
13790: NOT
13791: AND
13792: PUSH
13793: LD_OWVAR 1
13797: PUSH
13798: LD_INT 126000
13800: GREATEREQUAL
13801: OR
13802: IFFALSE 14994
13804: GO 13806
13806: DISABLE
13807: LD_INT 0
13809: PPUSH
13810: PPUSH
13811: PPUSH
13812: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
13813: LD_STRING ReinforcementsDone
13815: PPUSH
13816: CALL_OW 337
// music_class := music_victory ;
13820: LD_ADDR_OWVAR 72
13824: PUSH
13825: LD_INT 4
13827: ST_TO_ADDR
// if tick <= 45 45$00 then
13828: LD_OWVAR 1
13832: PUSH
13833: LD_INT 94500
13835: LESSEQUAL
13836: IFFALSE 13845
// SetAchievement ( ACH_HSPEED_5 ) ;
13838: LD_STRING ACH_HSPEED_5
13840: PPUSH
13841: CALL_OW 543
// InGameOn ;
13845: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
13849: LD_EXP 21
13853: PPUSH
13854: LD_STRING DH-end-1
13856: PPUSH
13857: CALL_OW 88
// wait ( 0 0$2 ) ;
13861: LD_INT 70
13863: PPUSH
13864: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
13868: LD_EXP 29
13872: PPUSH
13873: LD_STRING DShar-end-2
13875: PPUSH
13876: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
13880: LD_EXP 39
13884: NOT
13885: PUSH
13886: LD_EXP 40
13890: NOT
13891: AND
13892: IFFALSE 13908
// begin Say ( Heike , DH-end-3 ) ;
13894: LD_EXP 21
13898: PPUSH
13899: LD_STRING DH-end-3
13901: PPUSH
13902: CALL_OW 88
// end else
13906: GO 14012
// begin Say ( Heike , DH-end-a-3 ) ;
13908: LD_EXP 21
13912: PPUSH
13913: LD_STRING DH-end-a-3
13915: PPUSH
13916: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
13920: LD_EXP 29
13924: PPUSH
13925: LD_STRING DShar-end-a-4
13927: PPUSH
13928: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
13932: LD_EXP 21
13936: PPUSH
13937: LD_STRING DH-end-a-5
13939: PPUSH
13940: CALL_OW 88
// InGameOff ;
13944: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
13948: LD_INT 35
13950: PPUSH
13951: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_type , unit_human ] ] ) = 0 ;
13955: LD_INT 22
13957: PUSH
13958: LD_INT 3
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: PUSH
13965: LD_INT 50
13967: PUSH
13968: EMPTY
13969: LIST
13970: PUSH
13971: LD_INT 21
13973: PUSH
13974: LD_INT 1
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: LIST
13985: PPUSH
13986: CALL_OW 69
13990: PUSH
13991: LD_INT 0
13993: EQUAL
13994: IFFALSE 13948
// InGameOn ;
13996: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
14000: LD_EXP 21
14004: PPUSH
14005: LD_STRING DH-end-a-6
14007: PPUSH
14008: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
14012: LD_EXP 29
14016: PPUSH
14017: LD_STRING DShar-end-3
14019: PPUSH
14020: CALL_OW 94
// if not flamethrowerBuilt then
14024: LD_EXP 20
14028: NOT
14029: IFFALSE 14038
// SetAchievement ( ACH_FIRE ) ;
14031: LD_STRING ACH_FIRE
14033: PPUSH
14034: CALL_OW 543
// if drugsTested then
14038: LD_EXP 6
14042: IFFALSE 14056
// AddMedal ( med1 , 1 ) else
14044: LD_STRING med1
14046: PPUSH
14047: LD_INT 1
14049: PPUSH
14050: CALL_OW 101
14054: GO 14096
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
14056: LD_INT 5
14058: PPUSH
14059: LD_INT 2
14061: PPUSH
14062: CALL_OW 321
14066: PUSH
14067: LD_INT 2
14069: EQUAL
14070: IFFALSE 14085
// AddMedal ( med1 , - 1 ) else
14072: LD_STRING med1
14074: PPUSH
14075: LD_INT 1
14077: NEG
14078: PPUSH
14079: CALL_OW 101
14083: GO 14096
// AddMedal ( med1 , - 2 ) ;
14085: LD_STRING med1
14087: PPUSH
14088: LD_INT 2
14090: NEG
14091: PPUSH
14092: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
14096: LD_INT 22
14098: PUSH
14099: LD_INT 2
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: LD_INT 33
14108: PUSH
14109: LD_INT 2
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PPUSH
14120: CALL_OW 69
14124: PUSH
14125: LD_INT 3
14127: GREATEREQUAL
14128: PUSH
14129: LD_INT 22
14131: PUSH
14132: LD_INT 2
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 34
14141: PUSH
14142: LD_INT 31
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: PPUSH
14153: CALL_OW 69
14157: PUSH
14158: LD_INT 1
14160: GREATEREQUAL
14161: AND
14162: IFFALSE 14176
// AddMedal ( med2 , 1 ) else
14164: LD_STRING med2
14166: PPUSH
14167: LD_INT 1
14169: PPUSH
14170: CALL_OW 101
14174: GO 14187
// AddMedal ( med2 , - 1 ) ;
14176: LD_STRING med2
14178: PPUSH
14179: LD_INT 1
14181: NEG
14182: PPUSH
14183: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
14187: LD_EXP 15
14191: PUSH
14192: LD_INT 10
14194: PUSH
14195: LD_INT 8
14197: PUSH
14198: LD_INT 6
14200: PUSH
14201: LD_INT 5
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: PUSH
14210: LD_OWVAR 67
14214: ARRAY
14215: LESS
14216: IFFALSE 14230
// AddMedal ( med3 , 1 ) else
14218: LD_STRING med3
14220: PPUSH
14221: LD_INT 1
14223: PPUSH
14224: CALL_OW 101
14228: GO 14241
// AddMedal ( med3 , - 1 ) ;
14230: LD_STRING med3
14232: PPUSH
14233: LD_INT 1
14235: NEG
14236: PPUSH
14237: CALL_OW 101
// GiveMedals ( MAIN ) ;
14241: LD_STRING MAIN
14243: PPUSH
14244: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
14248: LD_INT 22
14250: PUSH
14251: LD_INT 2
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 23
14260: PUSH
14261: LD_INT 2
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: LD_INT 21
14270: PUSH
14271: LD_INT 1
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: LIST
14282: PPUSH
14283: CALL_OW 69
14287: PPUSH
14288: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
14292: LD_EXP 15
14296: PPUSH
14297: LD_STRING 05_ConvoySavedCounter
14299: PPUSH
14300: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
14304: LD_EXP 13
14308: PPUSH
14309: LD_STRING 05_Radar
14311: PPUSH
14312: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
14316: LD_EXP 6
14320: PPUSH
14321: LD_STRING 05_DrugsTested
14323: PPUSH
14324: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
14328: LD_INT 22
14330: PUSH
14331: LD_INT 2
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: LD_INT 33
14340: PUSH
14341: LD_INT 2
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PPUSH
14352: CALL_OW 69
14356: PUSH
14357: LD_INT 3
14359: GREATEREQUAL
14360: PUSH
14361: LD_INT 22
14363: PUSH
14364: LD_INT 2
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: LD_INT 34
14373: PUSH
14374: LD_INT 31
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PPUSH
14385: CALL_OW 69
14389: PUSH
14390: LD_INT 2
14392: GREATEREQUAL
14393: AND
14394: PPUSH
14395: LD_STRING 05_RemoteControl
14397: PPUSH
14398: CALL_OW 39
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
14402: LD_ADDR_VAR 0 2
14406: PUSH
14407: LD_INT 22
14409: PUSH
14410: LD_INT 2
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: LD_INT 21
14419: PUSH
14420: LD_INT 2
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: PPUSH
14431: CALL_OW 69
14435: ST_TO_ADDR
// if tmp then
14436: LD_VAR 0 2
14440: IFFALSE 14559
// begin vehs := [ ] ;
14442: LD_ADDR_VAR 0 4
14446: PUSH
14447: EMPTY
14448: ST_TO_ADDR
// for i in tmp do
14449: LD_ADDR_VAR 0 1
14453: PUSH
14454: LD_VAR 0 2
14458: PUSH
14459: FOR_IN
14460: IFFALSE 14545
// vehs := Replace ( vehs , vehs + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) ] ) ;
14462: LD_ADDR_VAR 0 4
14466: PUSH
14467: LD_VAR 0 4
14471: PPUSH
14472: LD_VAR 0 4
14476: PUSH
14477: LD_INT 1
14479: PLUS
14480: PPUSH
14481: LD_VAR 0 1
14485: PPUSH
14486: CALL_OW 265
14490: PUSH
14491: LD_VAR 0 1
14495: PPUSH
14496: CALL_OW 262
14500: PUSH
14501: LD_VAR 0 1
14505: PPUSH
14506: CALL_OW 263
14510: PUSH
14511: LD_VAR 0 1
14515: PPUSH
14516: CALL_OW 264
14520: PUSH
14521: LD_VAR 0 1
14525: PPUSH
14526: CALL_OW 248
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: PPUSH
14538: CALL_OW 1
14542: ST_TO_ADDR
14543: GO 14459
14545: POP
14546: POP
// SaveVariable ( vehs , 05_Vehicles ) ;
14547: LD_VAR 0 4
14551: PPUSH
14552: LD_STRING 05_Vehicles
14554: PPUSH
14555: CALL_OW 39
// end ; tmp := FilterUnitsInArea ( saveBuildingsArea , [ f_type , unit_building ] ) ;
14559: LD_ADDR_VAR 0 2
14563: PUSH
14564: LD_INT 25
14566: PPUSH
14567: LD_INT 21
14569: PUSH
14570: LD_INT 3
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PPUSH
14577: CALL_OW 70
14581: ST_TO_ADDR
// tmp2 := [ ] ;
14582: LD_ADDR_VAR 0 3
14586: PUSH
14587: EMPTY
14588: ST_TO_ADDR
// if tmp then
14589: LD_VAR 0 2
14593: IFFALSE 14746
// begin for i in tmp do
14595: LD_ADDR_VAR 0 1
14599: PUSH
14600: LD_VAR 0 2
14604: PUSH
14605: FOR_IN
14606: IFFALSE 14732
// tmp2 := Join ( tmp2 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetNation ( i ) , GetBLevel ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ) ;
14608: LD_ADDR_VAR 0 3
14612: PUSH
14613: LD_VAR 0 3
14617: PPUSH
14618: LD_VAR 0 1
14622: PPUSH
14623: CALL_OW 266
14627: PUSH
14628: LD_VAR 0 1
14632: PPUSH
14633: CALL_OW 250
14637: PUSH
14638: LD_VAR 0 1
14642: PPUSH
14643: CALL_OW 251
14647: PUSH
14648: LD_VAR 0 1
14652: PPUSH
14653: CALL_OW 254
14657: PUSH
14658: LD_VAR 0 1
14662: PPUSH
14663: CALL_OW 248
14667: PUSH
14668: LD_VAR 0 1
14672: PPUSH
14673: CALL_OW 267
14677: PUSH
14678: LD_VAR 0 1
14682: PPUSH
14683: LD_INT 1
14685: PPUSH
14686: CALL_OW 268
14690: PUSH
14691: LD_VAR 0 1
14695: PPUSH
14696: LD_INT 2
14698: PPUSH
14699: CALL_OW 268
14703: PUSH
14704: LD_VAR 0 1
14708: PPUSH
14709: CALL_OW 269
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: PPUSH
14725: CALL 74008 0 2
14729: ST_TO_ADDR
14730: GO 14605
14732: POP
14733: POP
// SaveVariable ( tmp2 , 05_Buildings ) ;
14734: LD_VAR 0 3
14738: PPUSH
14739: LD_STRING 05_Buildings
14741: PPUSH
14742: CALL_OW 39
// end ; SaveCharacters ( Heike , 05_Heike ) ;
14746: LD_EXP 21
14750: PPUSH
14751: LD_STRING 05_Heike
14753: PPUSH
14754: CALL_OW 38
// if Aviradze then
14758: LD_EXP 33
14762: IFFALSE 14776
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
14764: LD_EXP 33
14768: PPUSH
14769: LD_STRING 05_Aviradze
14771: PPUSH
14772: CALL_OW 38
// if Ibrahim then
14776: LD_EXP 24
14780: IFFALSE 14794
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
14782: LD_EXP 24
14786: PPUSH
14787: LD_STRING 05_Ibrahim
14789: PPUSH
14790: CALL_OW 38
// if Kamil then
14794: LD_EXP 25
14798: IFFALSE 14812
// SaveCharacters ( Kamil , 05_Kamil ) ;
14800: LD_EXP 25
14804: PPUSH
14805: LD_STRING 05_Kamil
14807: PPUSH
14808: CALL_OW 38
// if Sophia then
14812: LD_EXP 27
14816: IFFALSE 14830
// SaveCharacters ( Sophia , 05_Sophia ) ;
14818: LD_EXP 27
14822: PPUSH
14823: LD_STRING 05_Sophia
14825: PPUSH
14826: CALL_OW 38
// if Kaia then
14830: LD_EXP 26
14834: IFFALSE 14848
// SaveCharacters ( Kaia , 05_Kaia ) ;
14836: LD_EXP 26
14840: PPUSH
14841: LD_STRING 05_Kaia
14843: PPUSH
14844: CALL_OW 38
// if Givi then
14848: LD_EXP 22
14852: IFFALSE 14866
// SaveCharacters ( Givi , 05_Givi ) ;
14854: LD_EXP 22
14858: PPUSH
14859: LD_STRING 05_Givi
14861: PPUSH
14862: CALL_OW 38
// if Mike then
14866: LD_EXP 23
14870: IFFALSE 14884
// SaveCharacters ( Mike , 05_Mike ) ;
14872: LD_EXP 23
14876: PPUSH
14877: LD_STRING 05_Mike
14879: PPUSH
14880: CALL_OW 38
// if Markov then
14884: LD_EXP 28
14888: IFFALSE 14902
// SaveCharacters ( Markov , 05_Markov ) ;
14890: LD_EXP 28
14894: PPUSH
14895: LD_STRING 05_Markov
14897: PPUSH
14898: CALL_OW 38
// if Kurt then
14902: LD_EXP 32
14906: IFFALSE 14920
// SaveCharacters ( Kurt , 05_Kurt ) ;
14908: LD_EXP 32
14912: PPUSH
14913: LD_STRING 05_Kurt
14915: PPUSH
14916: CALL_OW 38
// if heikeSecondSquad then
14920: LD_EXP 34
14924: IFFALSE 14938
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
14926: LD_EXP 34
14930: PPUSH
14931: LD_STRING 05_others
14933: PPUSH
14934: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14938: LD_ADDR_VAR 0 2
14942: PUSH
14943: LD_INT 22
14945: PUSH
14946: LD_INT 2
14948: PUSH
14949: EMPTY
14950: LIST
14951: LIST
14952: PUSH
14953: LD_INT 23
14955: PUSH
14956: LD_INT 0
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PPUSH
14967: CALL_OW 69
14971: ST_TO_ADDR
// if tmp then
14972: LD_VAR 0 2
14976: IFFALSE 14990
// SaveCharacters ( tmp , 05_apes ) ;
14978: LD_VAR 0 2
14982: PPUSH
14983: LD_STRING 05_apes
14985: PPUSH
14986: CALL_OW 38
// YouWin ;
14990: CALL_OW 103
// end ; end_of_file
14994: PPOPN 4
14996: END
// every 0 0$35 + 0 0$20 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
14997: LD_EXP 9
15001: PUSH
15002: LD_INT 13
15004: PPUSH
15005: LD_INT 1
15007: PPUSH
15008: CALL_OW 287
15012: PUSH
15013: LD_INT 25
15015: LESS
15016: AND
15017: IFFALSE 15044
15019: GO 15021
15021: DISABLE
// begin enable ;
15022: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
15023: LD_INT 1
15025: PPUSH
15026: LD_INT 5
15028: PPUSH
15029: CALL_OW 12
15033: PPUSH
15034: LD_INT 13
15036: PPUSH
15037: LD_INT 1
15039: PPUSH
15040: CALL_OW 55
// end ; end_of_file
15044: END
// export function SOS_UnitDestroyed ( un ) ; begin
15045: LD_INT 0
15047: PPUSH
// ComRadiation ( un ) ;
15048: LD_VAR 0 1
15052: PPUSH
15053: CALL 16034 0 1
// end ;
15057: LD_VAR 0 2
15061: RET
// export function SOS_UnitKamikazed ( un ) ; begin
15062: LD_INT 0
15064: PPUSH
// ComRadiation ( un ) ;
15065: LD_VAR 0 1
15069: PPUSH
15070: CALL 16034 0 1
// end ;
15074: LD_VAR 0 2
15078: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15079: LD_INT 0
15081: PPUSH
// end ;
15082: LD_VAR 0 4
15086: RET
// export function SOS_Command ( cmd ) ; begin
15087: LD_INT 0
15089: PPUSH
// end ;
15090: LD_VAR 0 2
15094: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
15095: LD_INT 0
15097: PPUSH
// end ;
15098: LD_VAR 0 6
15102: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
15103: LD_INT 0
15105: PPUSH
15106: PPUSH
15107: PPUSH
15108: PPUSH
15109: PPUSH
// if not vehicle or not factory then
15110: LD_VAR 0 1
15114: NOT
15115: PUSH
15116: LD_VAR 0 2
15120: NOT
15121: OR
15122: IFFALSE 15126
// exit ;
15124: GO 15625
// if not factoryWaypoints then
15126: LD_EXP 113
15130: NOT
15131: IFFALSE 15135
// exit ;
15133: GO 15625
// for i := 1 to Count ( factoryWaypoints ) do
15135: LD_ADDR_VAR 0 4
15139: PUSH
15140: DOUBLE
15141: LD_INT 1
15143: DEC
15144: ST_TO_ADDR
15145: LD_EXP 113
15149: PPUSH
15150: CALL 38399 0 1
15154: PUSH
15155: FOR_TO
15156: IFFALSE 15623
// if factoryWaypoints [ i ] [ 2 ] = factory then
15158: LD_EXP 113
15162: PUSH
15163: LD_VAR 0 4
15167: ARRAY
15168: PUSH
15169: LD_INT 2
15171: ARRAY
15172: PUSH
15173: LD_VAR 0 2
15177: EQUAL
15178: IFFALSE 15621
// begin if GetControl ( vehicle ) = control_manual then
15180: LD_VAR 0 1
15184: PPUSH
15185: CALL_OW 263
15189: PUSH
15190: LD_INT 1
15192: EQUAL
15193: IFFALSE 15504
// begin driver := IsDrivenBy ( vehicle ) ;
15195: LD_ADDR_VAR 0 6
15199: PUSH
15200: LD_VAR 0 1
15204: PPUSH
15205: CALL_OW 311
15209: ST_TO_ADDR
// tag := GetTag ( driver ) ;
15210: LD_ADDR_VAR 0 5
15214: PUSH
15215: LD_VAR 0 6
15219: PPUSH
15220: CALL_OW 110
15224: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
15225: LD_VAR 0 5
15229: PUSH
15230: LD_INT 501
15232: EQUAL
15233: PUSH
15234: LD_VAR 0 1
15238: PPUSH
15239: CALL_OW 110
15243: PUSH
15244: LD_INT 501
15246: EQUAL
15247: OR
15248: IFFALSE 15254
// exit ;
15250: POP
15251: POP
15252: GO 15625
// if not HasTask ( driver ) then
15254: LD_VAR 0 6
15258: PPUSH
15259: CALL_OW 314
15263: NOT
15264: IFFALSE 15502
// begin SetTag ( driver , tDriver ) ;
15266: LD_VAR 0 6
15270: PPUSH
15271: LD_INT 501
15273: PPUSH
15274: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
15278: LD_VAR 0 1
15282: PPUSH
15283: LD_INT 501
15285: PPUSH
15286: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
15290: LD_ADDR_VAR 0 7
15294: PUSH
15295: LD_EXP 113
15299: PUSH
15300: LD_VAR 0 4
15304: ARRAY
15305: PUSH
15306: LD_INT 3
15308: ARRAY
15309: PPUSH
15310: LD_EXP 113
15314: PUSH
15315: LD_VAR 0 4
15319: ARRAY
15320: PUSH
15321: LD_INT 4
15323: ARRAY
15324: PPUSH
15325: CALL_OW 428
15329: ST_TO_ADDR
// if hex then
15330: LD_VAR 0 7
15334: IFFALSE 15352
// ComMoveUnit ( driver , hex ) else
15336: LD_VAR 0 6
15340: PPUSH
15341: LD_VAR 0 7
15345: PPUSH
15346: CALL_OW 112
15350: GO 15391
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
15352: LD_VAR 0 6
15356: PPUSH
15357: LD_EXP 113
15361: PUSH
15362: LD_VAR 0 4
15366: ARRAY
15367: PUSH
15368: LD_INT 3
15370: ARRAY
15371: PPUSH
15372: LD_EXP 113
15376: PUSH
15377: LD_VAR 0 4
15381: ARRAY
15382: PUSH
15383: LD_INT 4
15385: ARRAY
15386: PPUSH
15387: CALL_OW 111
// AddComExitVehicle ( driver ) ;
15391: LD_VAR 0 6
15395: PPUSH
15396: CALL_OW 181
// if Multiplayer then
15400: LD_OWVAR 4
15404: IFFALSE 15453
// begin repeat wait ( 10 ) ;
15406: LD_INT 10
15408: PPUSH
15409: CALL_OW 67
// until not IsInUnit ( driver ) ;
15413: LD_VAR 0 6
15417: PPUSH
15418: CALL_OW 310
15422: NOT
15423: IFFALSE 15406
// if not HasTask ( driver ) then
15425: LD_VAR 0 6
15429: PPUSH
15430: CALL_OW 314
15434: NOT
15435: IFFALSE 15451
// ComEnterUnit ( driver , factory ) ;
15437: LD_VAR 0 6
15441: PPUSH
15442: LD_VAR 0 2
15446: PPUSH
15447: CALL_OW 120
// end else
15451: GO 15467
// AddComEnterUnit ( driver , factory ) ;
15453: LD_VAR 0 6
15457: PPUSH
15458: LD_VAR 0 2
15462: PPUSH
15463: CALL_OW 180
// wait ( 0 0$1 ) ;
15467: LD_INT 35
15469: PPUSH
15470: CALL_OW 67
// SetTag ( driver , tag ) ;
15474: LD_VAR 0 6
15478: PPUSH
15479: LD_VAR 0 5
15483: PPUSH
15484: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
15488: LD_VAR 0 1
15492: PPUSH
15493: LD_INT 0
15495: PPUSH
15496: CALL_OW 109
// break ;
15500: GO 15623
// end ; end else
15502: GO 15621
// if GetControl ( vehicle ) = control_remote then
15504: LD_VAR 0 1
15508: PPUSH
15509: CALL_OW 263
15513: PUSH
15514: LD_INT 2
15516: EQUAL
15517: IFFALSE 15580
// begin wait ( 0 0$2 ) ;
15519: LD_INT 70
15521: PPUSH
15522: CALL_OW 67
// if Connect ( vehicle ) then
15526: LD_VAR 0 1
15530: PPUSH
15531: CALL 44605 0 1
15535: IFFALSE 15576
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
15537: LD_VAR 0 1
15541: PPUSH
15542: LD_EXP 113
15546: PUSH
15547: LD_VAR 0 4
15551: ARRAY
15552: PUSH
15553: LD_INT 3
15555: ARRAY
15556: PPUSH
15557: LD_EXP 113
15561: PUSH
15562: LD_VAR 0 4
15566: ARRAY
15567: PUSH
15568: LD_INT 4
15570: ARRAY
15571: PPUSH
15572: CALL_OW 171
// break ;
15576: GO 15623
// end else
15578: GO 15621
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
15580: LD_VAR 0 1
15584: PPUSH
15585: LD_EXP 113
15589: PUSH
15590: LD_VAR 0 4
15594: ARRAY
15595: PUSH
15596: LD_INT 3
15598: ARRAY
15599: PPUSH
15600: LD_EXP 113
15604: PUSH
15605: LD_VAR 0 4
15609: ARRAY
15610: PUSH
15611: LD_INT 4
15613: ARRAY
15614: PPUSH
15615: CALL_OW 171
// break ;
15619: GO 15623
// end ; end ;
15621: GO 15155
15623: POP
15624: POP
// end ;
15625: LD_VAR 0 3
15629: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
15630: LD_INT 0
15632: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
15633: LD_VAR 0 1
15637: PUSH
15638: LD_INT 250
15640: EQUAL
15641: PUSH
15642: LD_VAR 0 2
15646: PPUSH
15647: CALL_OW 264
15651: PUSH
15652: LD_INT 81
15654: EQUAL
15655: AND
15656: IFFALSE 15677
// MinerPlaceMine ( unit , x , y ) ;
15658: LD_VAR 0 2
15662: PPUSH
15663: LD_VAR 0 4
15667: PPUSH
15668: LD_VAR 0 5
15672: PPUSH
15673: CALL 18769 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
15677: LD_VAR 0 1
15681: PUSH
15682: LD_INT 251
15684: EQUAL
15685: PUSH
15686: LD_VAR 0 2
15690: PPUSH
15691: CALL_OW 264
15695: PUSH
15696: LD_INT 81
15698: EQUAL
15699: AND
15700: IFFALSE 15721
// MinerDetonateMine ( unit , x , y ) ;
15702: LD_VAR 0 2
15706: PPUSH
15707: LD_VAR 0 4
15711: PPUSH
15712: LD_VAR 0 5
15716: PPUSH
15717: CALL 19044 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
15721: LD_VAR 0 1
15725: PUSH
15726: LD_INT 252
15728: EQUAL
15729: PUSH
15730: LD_VAR 0 2
15734: PPUSH
15735: CALL_OW 264
15739: PUSH
15740: LD_INT 81
15742: EQUAL
15743: AND
15744: IFFALSE 15765
// MinerCreateMinefield ( unit , x , y ) ;
15746: LD_VAR 0 2
15750: PPUSH
15751: LD_VAR 0 4
15755: PPUSH
15756: LD_VAR 0 5
15760: PPUSH
15761: CALL 19461 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
15765: LD_VAR 0 1
15769: PUSH
15770: LD_INT 253
15772: EQUAL
15773: PUSH
15774: LD_VAR 0 2
15778: PPUSH
15779: CALL_OW 257
15783: PUSH
15784: LD_INT 5
15786: EQUAL
15787: AND
15788: IFFALSE 15809
// ComBinocular ( unit , x , y ) ;
15790: LD_VAR 0 2
15794: PPUSH
15795: LD_VAR 0 4
15799: PPUSH
15800: LD_VAR 0 5
15804: PPUSH
15805: CALL 19830 0 3
// if selectedUnit then
15809: LD_VAR 0 3
15813: IFFALSE 15869
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
15815: LD_VAR 0 1
15819: PUSH
15820: LD_INT 254
15822: EQUAL
15823: PUSH
15824: LD_VAR 0 2
15828: PPUSH
15829: CALL_OW 264
15833: PUSH
15834: LD_INT 99
15836: EQUAL
15837: AND
15838: PUSH
15839: LD_VAR 0 3
15843: PPUSH
15844: CALL_OW 263
15848: PUSH
15849: LD_INT 3
15851: EQUAL
15852: AND
15853: IFFALSE 15869
// HackDestroyVehicle ( unit , selectedUnit ) ;
15855: LD_VAR 0 2
15859: PPUSH
15860: LD_VAR 0 3
15864: PPUSH
15865: CALL 18133 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
15869: LD_VAR 0 1
15873: PUSH
15874: LD_INT 255
15876: EQUAL
15877: PUSH
15878: LD_VAR 0 2
15882: PPUSH
15883: CALL_OW 264
15887: PUSH
15888: LD_INT 14
15890: PUSH
15891: LD_INT 53
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: IN
15898: AND
15899: PUSH
15900: LD_VAR 0 4
15904: PPUSH
15905: LD_VAR 0 5
15909: PPUSH
15910: CALL_OW 488
15914: AND
15915: IFFALSE 15939
// CutTreeXYR ( unit , x , y , 12 ) ;
15917: LD_VAR 0 2
15921: PPUSH
15922: LD_VAR 0 4
15926: PPUSH
15927: LD_VAR 0 5
15931: PPUSH
15932: LD_INT 12
15934: PPUSH
15935: CALL 16130 0 4
// if cmd = 256 then
15939: LD_VAR 0 1
15943: PUSH
15944: LD_INT 256
15946: EQUAL
15947: IFFALSE 15968
// SetFactoryWaypoint ( unit , x , y ) ;
15949: LD_VAR 0 2
15953: PPUSH
15954: LD_VAR 0 4
15958: PPUSH
15959: LD_VAR 0 5
15963: PPUSH
15964: CALL 34837 0 3
// if cmd = 257 then
15968: LD_VAR 0 1
15972: PUSH
15973: LD_INT 257
15975: EQUAL
15976: IFFALSE 15997
// SetWarehouseGatheringPoint ( unit , x , y ) ;
15978: LD_VAR 0 2
15982: PPUSH
15983: LD_VAR 0 4
15987: PPUSH
15988: LD_VAR 0 5
15992: PPUSH
15993: CALL 35327 0 3
// if cmd = 258 then
15997: LD_VAR 0 1
16001: PUSH
16002: LD_INT 258
16004: EQUAL
16005: IFFALSE 16029
// BurnTreeXYR ( unit , x , y , 8 ) ;
16007: LD_VAR 0 2
16011: PPUSH
16012: LD_VAR 0 4
16016: PPUSH
16017: LD_VAR 0 5
16021: PPUSH
16022: LD_INT 8
16024: PPUSH
16025: CALL 16524 0 4
// end ;
16029: LD_VAR 0 6
16033: RET
// export function ComRadiation ( un ) ; var eff ; begin
16034: LD_INT 0
16036: PPUSH
16037: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
16038: LD_VAR 0 1
16042: PPUSH
16043: CALL_OW 264
16047: PUSH
16048: LD_INT 91
16050: NONEQUAL
16051: IFFALSE 16055
// exit ;
16053: GO 16125
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
16055: LD_INT 68
16057: PPUSH
16058: LD_VAR 0 1
16062: PPUSH
16063: CALL_OW 255
16067: PPUSH
16068: CALL_OW 321
16072: PUSH
16073: LD_INT 2
16075: EQUAL
16076: IFFALSE 16088
// eff := 70 else
16078: LD_ADDR_VAR 0 3
16082: PUSH
16083: LD_INT 70
16085: ST_TO_ADDR
16086: GO 16096
// eff := 30 ;
16088: LD_ADDR_VAR 0 3
16092: PUSH
16093: LD_INT 30
16095: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
16096: LD_VAR 0 1
16100: PPUSH
16101: CALL_OW 250
16105: PPUSH
16106: LD_VAR 0 1
16110: PPUSH
16111: CALL_OW 251
16115: PPUSH
16116: LD_VAR 0 3
16120: PPUSH
16121: CALL_OW 495
// end ;
16125: LD_VAR 0 2
16129: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
16130: LD_INT 0
16132: PPUSH
16133: PPUSH
16134: PPUSH
16135: PPUSH
16136: PPUSH
16137: PPUSH
16138: PPUSH
16139: PPUSH
16140: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
16141: LD_VAR 0 1
16145: PPUSH
16146: CALL_OW 302
16150: NOT
16151: PUSH
16152: LD_VAR 0 2
16156: PPUSH
16157: LD_VAR 0 3
16161: PPUSH
16162: CALL_OW 488
16166: NOT
16167: OR
16168: PUSH
16169: LD_VAR 0 4
16173: NOT
16174: OR
16175: IFFALSE 16179
// exit ;
16177: GO 16519
// list := [ ] ;
16179: LD_ADDR_VAR 0 13
16183: PUSH
16184: EMPTY
16185: ST_TO_ADDR
// if x - r < 0 then
16186: LD_VAR 0 2
16190: PUSH
16191: LD_VAR 0 4
16195: MINUS
16196: PUSH
16197: LD_INT 0
16199: LESS
16200: IFFALSE 16212
// min_x := 0 else
16202: LD_ADDR_VAR 0 7
16206: PUSH
16207: LD_INT 0
16209: ST_TO_ADDR
16210: GO 16228
// min_x := x - r ;
16212: LD_ADDR_VAR 0 7
16216: PUSH
16217: LD_VAR 0 2
16221: PUSH
16222: LD_VAR 0 4
16226: MINUS
16227: ST_TO_ADDR
// if y - r < 0 then
16228: LD_VAR 0 3
16232: PUSH
16233: LD_VAR 0 4
16237: MINUS
16238: PUSH
16239: LD_INT 0
16241: LESS
16242: IFFALSE 16254
// min_y := 0 else
16244: LD_ADDR_VAR 0 8
16248: PUSH
16249: LD_INT 0
16251: ST_TO_ADDR
16252: GO 16270
// min_y := y - r ;
16254: LD_ADDR_VAR 0 8
16258: PUSH
16259: LD_VAR 0 3
16263: PUSH
16264: LD_VAR 0 4
16268: MINUS
16269: ST_TO_ADDR
// max_x := x + r ;
16270: LD_ADDR_VAR 0 9
16274: PUSH
16275: LD_VAR 0 2
16279: PUSH
16280: LD_VAR 0 4
16284: PLUS
16285: ST_TO_ADDR
// max_y := y + r ;
16286: LD_ADDR_VAR 0 10
16290: PUSH
16291: LD_VAR 0 3
16295: PUSH
16296: LD_VAR 0 4
16300: PLUS
16301: ST_TO_ADDR
// for _x = min_x to max_x do
16302: LD_ADDR_VAR 0 11
16306: PUSH
16307: DOUBLE
16308: LD_VAR 0 7
16312: DEC
16313: ST_TO_ADDR
16314: LD_VAR 0 9
16318: PUSH
16319: FOR_TO
16320: IFFALSE 16437
// for _y = min_y to max_y do
16322: LD_ADDR_VAR 0 12
16326: PUSH
16327: DOUBLE
16328: LD_VAR 0 8
16332: DEC
16333: ST_TO_ADDR
16334: LD_VAR 0 10
16338: PUSH
16339: FOR_TO
16340: IFFALSE 16433
// begin if not ValidHex ( _x , _y ) then
16342: LD_VAR 0 11
16346: PPUSH
16347: LD_VAR 0 12
16351: PPUSH
16352: CALL_OW 488
16356: NOT
16357: IFFALSE 16361
// continue ;
16359: GO 16339
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16361: LD_VAR 0 11
16365: PPUSH
16366: LD_VAR 0 12
16370: PPUSH
16371: CALL_OW 351
16375: PUSH
16376: LD_VAR 0 11
16380: PPUSH
16381: LD_VAR 0 12
16385: PPUSH
16386: CALL_OW 554
16390: AND
16391: IFFALSE 16431
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16393: LD_ADDR_VAR 0 13
16397: PUSH
16398: LD_VAR 0 13
16402: PPUSH
16403: LD_VAR 0 13
16407: PUSH
16408: LD_INT 1
16410: PLUS
16411: PPUSH
16412: LD_VAR 0 11
16416: PUSH
16417: LD_VAR 0 12
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: PPUSH
16426: CALL_OW 2
16430: ST_TO_ADDR
// end ;
16431: GO 16339
16433: POP
16434: POP
16435: GO 16319
16437: POP
16438: POP
// if not list then
16439: LD_VAR 0 13
16443: NOT
16444: IFFALSE 16448
// exit ;
16446: GO 16519
// for i in list do
16448: LD_ADDR_VAR 0 6
16452: PUSH
16453: LD_VAR 0 13
16457: PUSH
16458: FOR_IN
16459: IFFALSE 16517
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16461: LD_VAR 0 1
16465: PPUSH
16466: LD_STRING M
16468: PUSH
16469: LD_VAR 0 6
16473: PUSH
16474: LD_INT 1
16476: ARRAY
16477: PUSH
16478: LD_VAR 0 6
16482: PUSH
16483: LD_INT 2
16485: ARRAY
16486: PUSH
16487: LD_INT 0
16489: PUSH
16490: LD_INT 0
16492: PUSH
16493: LD_INT 0
16495: PUSH
16496: LD_INT 0
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: PUSH
16508: EMPTY
16509: LIST
16510: PPUSH
16511: CALL_OW 447
16515: GO 16458
16517: POP
16518: POP
// end ;
16519: LD_VAR 0 5
16523: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
16524: LD_INT 0
16526: PPUSH
16527: PPUSH
16528: PPUSH
16529: PPUSH
16530: PPUSH
16531: PPUSH
16532: PPUSH
16533: PPUSH
16534: PPUSH
16535: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
16536: LD_VAR 0 1
16540: PPUSH
16541: CALL_OW 302
16545: NOT
16546: PUSH
16547: LD_VAR 0 2
16551: PPUSH
16552: LD_VAR 0 3
16556: PPUSH
16557: CALL_OW 488
16561: NOT
16562: OR
16563: PUSH
16564: LD_VAR 0 4
16568: NOT
16569: OR
16570: IFFALSE 16574
// exit ;
16572: GO 17087
// list := [ ] ;
16574: LD_ADDR_VAR 0 13
16578: PUSH
16579: EMPTY
16580: ST_TO_ADDR
// if x - r < 0 then
16581: LD_VAR 0 2
16585: PUSH
16586: LD_VAR 0 4
16590: MINUS
16591: PUSH
16592: LD_INT 0
16594: LESS
16595: IFFALSE 16607
// min_x := 0 else
16597: LD_ADDR_VAR 0 7
16601: PUSH
16602: LD_INT 0
16604: ST_TO_ADDR
16605: GO 16623
// min_x := x - r ;
16607: LD_ADDR_VAR 0 7
16611: PUSH
16612: LD_VAR 0 2
16616: PUSH
16617: LD_VAR 0 4
16621: MINUS
16622: ST_TO_ADDR
// if y - r < 0 then
16623: LD_VAR 0 3
16627: PUSH
16628: LD_VAR 0 4
16632: MINUS
16633: PUSH
16634: LD_INT 0
16636: LESS
16637: IFFALSE 16649
// min_y := 0 else
16639: LD_ADDR_VAR 0 8
16643: PUSH
16644: LD_INT 0
16646: ST_TO_ADDR
16647: GO 16665
// min_y := y - r ;
16649: LD_ADDR_VAR 0 8
16653: PUSH
16654: LD_VAR 0 3
16658: PUSH
16659: LD_VAR 0 4
16663: MINUS
16664: ST_TO_ADDR
// max_x := x + r ;
16665: LD_ADDR_VAR 0 9
16669: PUSH
16670: LD_VAR 0 2
16674: PUSH
16675: LD_VAR 0 4
16679: PLUS
16680: ST_TO_ADDR
// max_y := y + r ;
16681: LD_ADDR_VAR 0 10
16685: PUSH
16686: LD_VAR 0 3
16690: PUSH
16691: LD_VAR 0 4
16695: PLUS
16696: ST_TO_ADDR
// for _x = min_x to max_x do
16697: LD_ADDR_VAR 0 11
16701: PUSH
16702: DOUBLE
16703: LD_VAR 0 7
16707: DEC
16708: ST_TO_ADDR
16709: LD_VAR 0 9
16713: PUSH
16714: FOR_TO
16715: IFFALSE 16832
// for _y = min_y to max_y do
16717: LD_ADDR_VAR 0 12
16721: PUSH
16722: DOUBLE
16723: LD_VAR 0 8
16727: DEC
16728: ST_TO_ADDR
16729: LD_VAR 0 10
16733: PUSH
16734: FOR_TO
16735: IFFALSE 16828
// begin if not ValidHex ( _x , _y ) then
16737: LD_VAR 0 11
16741: PPUSH
16742: LD_VAR 0 12
16746: PPUSH
16747: CALL_OW 488
16751: NOT
16752: IFFALSE 16756
// continue ;
16754: GO 16734
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16756: LD_VAR 0 11
16760: PPUSH
16761: LD_VAR 0 12
16765: PPUSH
16766: CALL_OW 351
16770: PUSH
16771: LD_VAR 0 11
16775: PPUSH
16776: LD_VAR 0 12
16780: PPUSH
16781: CALL_OW 554
16785: AND
16786: IFFALSE 16826
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16788: LD_ADDR_VAR 0 13
16792: PUSH
16793: LD_VAR 0 13
16797: PPUSH
16798: LD_VAR 0 13
16802: PUSH
16803: LD_INT 1
16805: PLUS
16806: PPUSH
16807: LD_VAR 0 11
16811: PUSH
16812: LD_VAR 0 12
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PPUSH
16821: CALL_OW 2
16825: ST_TO_ADDR
// end ;
16826: GO 16734
16828: POP
16829: POP
16830: GO 16714
16832: POP
16833: POP
// if not list then
16834: LD_VAR 0 13
16838: NOT
16839: IFFALSE 16843
// exit ;
16841: GO 17087
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
16843: LD_ADDR_VAR 0 13
16847: PUSH
16848: LD_VAR 0 1
16852: PPUSH
16853: LD_VAR 0 13
16857: PPUSH
16858: LD_INT 1
16860: PPUSH
16861: LD_INT 1
16863: PPUSH
16864: CALL 41747 0 4
16868: ST_TO_ADDR
// ComStop ( flame ) ;
16869: LD_VAR 0 1
16873: PPUSH
16874: CALL_OW 141
// for i in list do
16878: LD_ADDR_VAR 0 6
16882: PUSH
16883: LD_VAR 0 13
16887: PUSH
16888: FOR_IN
16889: IFFALSE 16920
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
16891: LD_VAR 0 1
16895: PPUSH
16896: LD_VAR 0 6
16900: PUSH
16901: LD_INT 1
16903: ARRAY
16904: PPUSH
16905: LD_VAR 0 6
16909: PUSH
16910: LD_INT 2
16912: ARRAY
16913: PPUSH
16914: CALL_OW 176
16918: GO 16888
16920: POP
16921: POP
// repeat wait ( 0 0$1 ) ;
16922: LD_INT 35
16924: PPUSH
16925: CALL_OW 67
// task := GetTaskList ( flame ) ;
16929: LD_ADDR_VAR 0 14
16933: PUSH
16934: LD_VAR 0 1
16938: PPUSH
16939: CALL_OW 437
16943: ST_TO_ADDR
// if not task then
16944: LD_VAR 0 14
16948: NOT
16949: IFFALSE 16953
// exit ;
16951: GO 17087
// if task [ 1 ] [ 1 ] <> | then
16953: LD_VAR 0 14
16957: PUSH
16958: LD_INT 1
16960: ARRAY
16961: PUSH
16962: LD_INT 1
16964: ARRAY
16965: PUSH
16966: LD_STRING |
16968: NONEQUAL
16969: IFFALSE 16973
// exit ;
16971: GO 17087
// _x := task [ 1 ] [ 2 ] ;
16973: LD_ADDR_VAR 0 11
16977: PUSH
16978: LD_VAR 0 14
16982: PUSH
16983: LD_INT 1
16985: ARRAY
16986: PUSH
16987: LD_INT 2
16989: ARRAY
16990: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
16991: LD_ADDR_VAR 0 12
16995: PUSH
16996: LD_VAR 0 14
17000: PUSH
17001: LD_INT 1
17003: ARRAY
17004: PUSH
17005: LD_INT 3
17007: ARRAY
17008: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
17009: LD_VAR 0 11
17013: PPUSH
17014: LD_VAR 0 12
17018: PPUSH
17019: CALL_OW 351
17023: NOT
17024: PUSH
17025: LD_VAR 0 11
17029: PPUSH
17030: LD_VAR 0 12
17034: PPUSH
17035: CALL_OW 554
17039: NOT
17040: OR
17041: IFFALSE 17075
// begin task := Delete ( task , 1 ) ;
17043: LD_ADDR_VAR 0 14
17047: PUSH
17048: LD_VAR 0 14
17052: PPUSH
17053: LD_INT 1
17055: PPUSH
17056: CALL_OW 3
17060: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
17061: LD_VAR 0 1
17065: PPUSH
17066: LD_VAR 0 14
17070: PPUSH
17071: CALL_OW 446
// end ; until not HasTask ( flame ) ;
17075: LD_VAR 0 1
17079: PPUSH
17080: CALL_OW 314
17084: NOT
17085: IFFALSE 16922
// end ;
17087: LD_VAR 0 5
17091: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
17092: LD_EXP 44
17096: NOT
17097: IFFALSE 17147
17099: GO 17101
17101: DISABLE
// begin initHack := true ;
17102: LD_ADDR_EXP 44
17106: PUSH
17107: LD_INT 1
17109: ST_TO_ADDR
// hackTanks := [ ] ;
17110: LD_ADDR_EXP 45
17114: PUSH
17115: EMPTY
17116: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
17117: LD_ADDR_EXP 46
17121: PUSH
17122: EMPTY
17123: ST_TO_ADDR
// hackLimit := 3 ;
17124: LD_ADDR_EXP 47
17128: PUSH
17129: LD_INT 3
17131: ST_TO_ADDR
// hackDist := 12 ;
17132: LD_ADDR_EXP 48
17136: PUSH
17137: LD_INT 12
17139: ST_TO_ADDR
// hackCounter := [ ] ;
17140: LD_ADDR_EXP 49
17144: PUSH
17145: EMPTY
17146: ST_TO_ADDR
// end ;
17147: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
17148: LD_EXP 44
17152: PUSH
17153: LD_INT 34
17155: PUSH
17156: LD_INT 99
17158: PUSH
17159: EMPTY
17160: LIST
17161: LIST
17162: PPUSH
17163: CALL_OW 69
17167: AND
17168: IFFALSE 17421
17170: GO 17172
17172: DISABLE
17173: LD_INT 0
17175: PPUSH
17176: PPUSH
// begin enable ;
17177: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
17178: LD_ADDR_VAR 0 1
17182: PUSH
17183: LD_INT 34
17185: PUSH
17186: LD_INT 99
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: PPUSH
17193: CALL_OW 69
17197: PUSH
17198: FOR_IN
17199: IFFALSE 17419
// begin if not i in hackTanks then
17201: LD_VAR 0 1
17205: PUSH
17206: LD_EXP 45
17210: IN
17211: NOT
17212: IFFALSE 17295
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
17214: LD_ADDR_EXP 45
17218: PUSH
17219: LD_EXP 45
17223: PPUSH
17224: LD_EXP 45
17228: PUSH
17229: LD_INT 1
17231: PLUS
17232: PPUSH
17233: LD_VAR 0 1
17237: PPUSH
17238: CALL_OW 1
17242: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
17243: LD_ADDR_EXP 46
17247: PUSH
17248: LD_EXP 46
17252: PPUSH
17253: LD_EXP 46
17257: PUSH
17258: LD_INT 1
17260: PLUS
17261: PPUSH
17262: EMPTY
17263: PPUSH
17264: CALL_OW 1
17268: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
17269: LD_ADDR_EXP 49
17273: PUSH
17274: LD_EXP 49
17278: PPUSH
17279: LD_EXP 49
17283: PUSH
17284: LD_INT 1
17286: PLUS
17287: PPUSH
17288: EMPTY
17289: PPUSH
17290: CALL_OW 1
17294: ST_TO_ADDR
// end ; if not IsOk ( i ) then
17295: LD_VAR 0 1
17299: PPUSH
17300: CALL_OW 302
17304: NOT
17305: IFFALSE 17318
// begin HackUnlinkAll ( i ) ;
17307: LD_VAR 0 1
17311: PPUSH
17312: CALL 17424 0 1
// continue ;
17316: GO 17198
// end ; HackCheckCapturedStatus ( i ) ;
17318: LD_VAR 0 1
17322: PPUSH
17323: CALL 17867 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
17327: LD_ADDR_VAR 0 2
17331: PUSH
17332: LD_INT 81
17334: PUSH
17335: LD_VAR 0 1
17339: PPUSH
17340: CALL_OW 255
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PUSH
17349: LD_INT 33
17351: PUSH
17352: LD_INT 3
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PUSH
17359: LD_INT 91
17361: PUSH
17362: LD_VAR 0 1
17366: PUSH
17367: LD_EXP 48
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: LIST
17376: PUSH
17377: LD_INT 50
17379: PUSH
17380: EMPTY
17381: LIST
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: PPUSH
17389: CALL_OW 69
17393: ST_TO_ADDR
// if not tmp then
17394: LD_VAR 0 2
17398: NOT
17399: IFFALSE 17403
// continue ;
17401: GO 17198
// HackLink ( i , tmp ) ;
17403: LD_VAR 0 1
17407: PPUSH
17408: LD_VAR 0 2
17412: PPUSH
17413: CALL 17560 0 2
// end ;
17417: GO 17198
17419: POP
17420: POP
// end ;
17421: PPOPN 2
17423: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
17424: LD_INT 0
17426: PPUSH
17427: PPUSH
17428: PPUSH
// if not hack in hackTanks then
17429: LD_VAR 0 1
17433: PUSH
17434: LD_EXP 45
17438: IN
17439: NOT
17440: IFFALSE 17444
// exit ;
17442: GO 17555
// index := GetElementIndex ( hackTanks , hack ) ;
17444: LD_ADDR_VAR 0 4
17448: PUSH
17449: LD_EXP 45
17453: PPUSH
17454: LD_VAR 0 1
17458: PPUSH
17459: CALL 41044 0 2
17463: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
17464: LD_EXP 46
17468: PUSH
17469: LD_VAR 0 4
17473: ARRAY
17474: IFFALSE 17555
// begin for i in hackTanksCaptured [ index ] do
17476: LD_ADDR_VAR 0 3
17480: PUSH
17481: LD_EXP 46
17485: PUSH
17486: LD_VAR 0 4
17490: ARRAY
17491: PUSH
17492: FOR_IN
17493: IFFALSE 17519
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
17495: LD_VAR 0 3
17499: PUSH
17500: LD_INT 1
17502: ARRAY
17503: PPUSH
17504: LD_VAR 0 3
17508: PUSH
17509: LD_INT 2
17511: ARRAY
17512: PPUSH
17513: CALL_OW 235
17517: GO 17492
17519: POP
17520: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
17521: LD_ADDR_EXP 46
17525: PUSH
17526: LD_EXP 46
17530: PPUSH
17531: LD_VAR 0 4
17535: PPUSH
17536: EMPTY
17537: PPUSH
17538: CALL_OW 1
17542: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
17543: LD_VAR 0 1
17547: PPUSH
17548: LD_INT 0
17550: PPUSH
17551: CALL_OW 505
// end ; end ;
17555: LD_VAR 0 2
17559: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
17560: LD_INT 0
17562: PPUSH
17563: PPUSH
17564: PPUSH
// if not hack in hackTanks or not vehicles then
17565: LD_VAR 0 1
17569: PUSH
17570: LD_EXP 45
17574: IN
17575: NOT
17576: PUSH
17577: LD_VAR 0 2
17581: NOT
17582: OR
17583: IFFALSE 17587
// exit ;
17585: GO 17862
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
17587: LD_ADDR_VAR 0 2
17591: PUSH
17592: LD_VAR 0 1
17596: PPUSH
17597: LD_VAR 0 2
17601: PPUSH
17602: LD_INT 1
17604: PPUSH
17605: LD_INT 1
17607: PPUSH
17608: CALL 41694 0 4
17612: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
17613: LD_ADDR_VAR 0 5
17617: PUSH
17618: LD_EXP 45
17622: PPUSH
17623: LD_VAR 0 1
17627: PPUSH
17628: CALL 41044 0 2
17632: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
17633: LD_EXP 46
17637: PUSH
17638: LD_VAR 0 5
17642: ARRAY
17643: PUSH
17644: LD_EXP 47
17648: LESS
17649: IFFALSE 17838
// begin for i := 1 to vehicles do
17651: LD_ADDR_VAR 0 4
17655: PUSH
17656: DOUBLE
17657: LD_INT 1
17659: DEC
17660: ST_TO_ADDR
17661: LD_VAR 0 2
17665: PUSH
17666: FOR_TO
17667: IFFALSE 17836
// begin if hackTanksCaptured [ index ] = hackLimit then
17669: LD_EXP 46
17673: PUSH
17674: LD_VAR 0 5
17678: ARRAY
17679: PUSH
17680: LD_EXP 47
17684: EQUAL
17685: IFFALSE 17689
// break ;
17687: GO 17836
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
17689: LD_ADDR_EXP 49
17693: PUSH
17694: LD_EXP 49
17698: PPUSH
17699: LD_VAR 0 5
17703: PPUSH
17704: LD_EXP 49
17708: PUSH
17709: LD_VAR 0 5
17713: ARRAY
17714: PUSH
17715: LD_INT 1
17717: PLUS
17718: PPUSH
17719: CALL_OW 1
17723: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
17724: LD_ADDR_EXP 46
17728: PUSH
17729: LD_EXP 46
17733: PPUSH
17734: LD_VAR 0 5
17738: PUSH
17739: LD_EXP 46
17743: PUSH
17744: LD_VAR 0 5
17748: ARRAY
17749: PUSH
17750: LD_INT 1
17752: PLUS
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PPUSH
17758: LD_VAR 0 2
17762: PUSH
17763: LD_VAR 0 4
17767: ARRAY
17768: PUSH
17769: LD_VAR 0 2
17773: PUSH
17774: LD_VAR 0 4
17778: ARRAY
17779: PPUSH
17780: CALL_OW 255
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PPUSH
17789: CALL 41259 0 3
17793: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
17794: LD_VAR 0 2
17798: PUSH
17799: LD_VAR 0 4
17803: ARRAY
17804: PPUSH
17805: LD_VAR 0 1
17809: PPUSH
17810: CALL_OW 255
17814: PPUSH
17815: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
17819: LD_VAR 0 2
17823: PUSH
17824: LD_VAR 0 4
17828: ARRAY
17829: PPUSH
17830: CALL_OW 141
// end ;
17834: GO 17666
17836: POP
17837: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17838: LD_VAR 0 1
17842: PPUSH
17843: LD_EXP 46
17847: PUSH
17848: LD_VAR 0 5
17852: ARRAY
17853: PUSH
17854: LD_INT 0
17856: PLUS
17857: PPUSH
17858: CALL_OW 505
// end ;
17862: LD_VAR 0 3
17866: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
17867: LD_INT 0
17869: PPUSH
17870: PPUSH
17871: PPUSH
17872: PPUSH
// if not hack in hackTanks then
17873: LD_VAR 0 1
17877: PUSH
17878: LD_EXP 45
17882: IN
17883: NOT
17884: IFFALSE 17888
// exit ;
17886: GO 18128
// index := GetElementIndex ( hackTanks , hack ) ;
17888: LD_ADDR_VAR 0 4
17892: PUSH
17893: LD_EXP 45
17897: PPUSH
17898: LD_VAR 0 1
17902: PPUSH
17903: CALL 41044 0 2
17907: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
17908: LD_ADDR_VAR 0 3
17912: PUSH
17913: DOUBLE
17914: LD_EXP 46
17918: PUSH
17919: LD_VAR 0 4
17923: ARRAY
17924: INC
17925: ST_TO_ADDR
17926: LD_INT 1
17928: PUSH
17929: FOR_DOWNTO
17930: IFFALSE 18102
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
17932: LD_ADDR_VAR 0 5
17936: PUSH
17937: LD_EXP 46
17941: PUSH
17942: LD_VAR 0 4
17946: ARRAY
17947: PUSH
17948: LD_VAR 0 3
17952: ARRAY
17953: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
17954: LD_VAR 0 5
17958: PUSH
17959: LD_INT 1
17961: ARRAY
17962: PPUSH
17963: CALL_OW 302
17967: NOT
17968: PUSH
17969: LD_VAR 0 5
17973: PUSH
17974: LD_INT 1
17976: ARRAY
17977: PPUSH
17978: CALL_OW 255
17982: PUSH
17983: LD_VAR 0 1
17987: PPUSH
17988: CALL_OW 255
17992: NONEQUAL
17993: OR
17994: IFFALSE 18100
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
17996: LD_VAR 0 5
18000: PUSH
18001: LD_INT 1
18003: ARRAY
18004: PPUSH
18005: CALL_OW 305
18009: PUSH
18010: LD_VAR 0 5
18014: PUSH
18015: LD_INT 1
18017: ARRAY
18018: PPUSH
18019: CALL_OW 255
18023: PUSH
18024: LD_VAR 0 1
18028: PPUSH
18029: CALL_OW 255
18033: EQUAL
18034: AND
18035: IFFALSE 18059
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
18037: LD_VAR 0 5
18041: PUSH
18042: LD_INT 1
18044: ARRAY
18045: PPUSH
18046: LD_VAR 0 5
18050: PUSH
18051: LD_INT 2
18053: ARRAY
18054: PPUSH
18055: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
18059: LD_ADDR_EXP 46
18063: PUSH
18064: LD_EXP 46
18068: PPUSH
18069: LD_VAR 0 4
18073: PPUSH
18074: LD_EXP 46
18078: PUSH
18079: LD_VAR 0 4
18083: ARRAY
18084: PPUSH
18085: LD_VAR 0 3
18089: PPUSH
18090: CALL_OW 3
18094: PPUSH
18095: CALL_OW 1
18099: ST_TO_ADDR
// end ; end ;
18100: GO 17929
18102: POP
18103: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18104: LD_VAR 0 1
18108: PPUSH
18109: LD_EXP 46
18113: PUSH
18114: LD_VAR 0 4
18118: ARRAY
18119: PUSH
18120: LD_INT 0
18122: PLUS
18123: PPUSH
18124: CALL_OW 505
// end ;
18128: LD_VAR 0 2
18132: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
18133: LD_INT 0
18135: PPUSH
18136: PPUSH
18137: PPUSH
18138: PPUSH
// if not hack in hackTanks then
18139: LD_VAR 0 1
18143: PUSH
18144: LD_EXP 45
18148: IN
18149: NOT
18150: IFFALSE 18154
// exit ;
18152: GO 18239
// index := GetElementIndex ( hackTanks , hack ) ;
18154: LD_ADDR_VAR 0 5
18158: PUSH
18159: LD_EXP 45
18163: PPUSH
18164: LD_VAR 0 1
18168: PPUSH
18169: CALL 41044 0 2
18173: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
18174: LD_ADDR_VAR 0 4
18178: PUSH
18179: DOUBLE
18180: LD_INT 1
18182: DEC
18183: ST_TO_ADDR
18184: LD_EXP 46
18188: PUSH
18189: LD_VAR 0 5
18193: ARRAY
18194: PUSH
18195: FOR_TO
18196: IFFALSE 18237
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
18198: LD_EXP 46
18202: PUSH
18203: LD_VAR 0 5
18207: ARRAY
18208: PUSH
18209: LD_VAR 0 4
18213: ARRAY
18214: PUSH
18215: LD_INT 1
18217: ARRAY
18218: PUSH
18219: LD_VAR 0 2
18223: EQUAL
18224: IFFALSE 18235
// KillUnit ( vehicle ) ;
18226: LD_VAR 0 2
18230: PPUSH
18231: CALL_OW 66
18235: GO 18195
18237: POP
18238: POP
// end ;
18239: LD_VAR 0 3
18243: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
18244: LD_EXP 50
18248: NOT
18249: IFFALSE 18284
18251: GO 18253
18253: DISABLE
// begin initMiner := true ;
18254: LD_ADDR_EXP 50
18258: PUSH
18259: LD_INT 1
18261: ST_TO_ADDR
// minersList := [ ] ;
18262: LD_ADDR_EXP 51
18266: PUSH
18267: EMPTY
18268: ST_TO_ADDR
// minerMinesList := [ ] ;
18269: LD_ADDR_EXP 52
18273: PUSH
18274: EMPTY
18275: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
18276: LD_ADDR_EXP 53
18280: PUSH
18281: LD_INT 5
18283: ST_TO_ADDR
// end ;
18284: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
18285: LD_EXP 50
18289: PUSH
18290: LD_INT 34
18292: PUSH
18293: LD_INT 81
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PPUSH
18300: CALL_OW 69
18304: AND
18305: IFFALSE 18766
18307: GO 18309
18309: DISABLE
18310: LD_INT 0
18312: PPUSH
18313: PPUSH
18314: PPUSH
18315: PPUSH
// begin enable ;
18316: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
18317: LD_ADDR_VAR 0 1
18321: PUSH
18322: LD_INT 34
18324: PUSH
18325: LD_INT 81
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PPUSH
18332: CALL_OW 69
18336: PUSH
18337: FOR_IN
18338: IFFALSE 18410
// begin if not i in minersList then
18340: LD_VAR 0 1
18344: PUSH
18345: LD_EXP 51
18349: IN
18350: NOT
18351: IFFALSE 18408
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
18353: LD_ADDR_EXP 51
18357: PUSH
18358: LD_EXP 51
18362: PPUSH
18363: LD_EXP 51
18367: PUSH
18368: LD_INT 1
18370: PLUS
18371: PPUSH
18372: LD_VAR 0 1
18376: PPUSH
18377: CALL_OW 1
18381: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
18382: LD_ADDR_EXP 52
18386: PUSH
18387: LD_EXP 52
18391: PPUSH
18392: LD_EXP 52
18396: PUSH
18397: LD_INT 1
18399: PLUS
18400: PPUSH
18401: EMPTY
18402: PPUSH
18403: CALL_OW 1
18407: ST_TO_ADDR
// end end ;
18408: GO 18337
18410: POP
18411: POP
// for i := minerMinesList downto 1 do
18412: LD_ADDR_VAR 0 1
18416: PUSH
18417: DOUBLE
18418: LD_EXP 52
18422: INC
18423: ST_TO_ADDR
18424: LD_INT 1
18426: PUSH
18427: FOR_DOWNTO
18428: IFFALSE 18764
// begin if IsLive ( minersList [ i ] ) then
18430: LD_EXP 51
18434: PUSH
18435: LD_VAR 0 1
18439: ARRAY
18440: PPUSH
18441: CALL_OW 300
18445: IFFALSE 18473
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
18447: LD_EXP 51
18451: PUSH
18452: LD_VAR 0 1
18456: ARRAY
18457: PPUSH
18458: LD_EXP 52
18462: PUSH
18463: LD_VAR 0 1
18467: ARRAY
18468: PPUSH
18469: CALL_OW 505
// if not minerMinesList [ i ] then
18473: LD_EXP 52
18477: PUSH
18478: LD_VAR 0 1
18482: ARRAY
18483: NOT
18484: IFFALSE 18488
// continue ;
18486: GO 18427
// for j := minerMinesList [ i ] downto 1 do
18488: LD_ADDR_VAR 0 2
18492: PUSH
18493: DOUBLE
18494: LD_EXP 52
18498: PUSH
18499: LD_VAR 0 1
18503: ARRAY
18504: INC
18505: ST_TO_ADDR
18506: LD_INT 1
18508: PUSH
18509: FOR_DOWNTO
18510: IFFALSE 18760
// begin side := GetSide ( minersList [ i ] ) ;
18512: LD_ADDR_VAR 0 3
18516: PUSH
18517: LD_EXP 51
18521: PUSH
18522: LD_VAR 0 1
18526: ARRAY
18527: PPUSH
18528: CALL_OW 255
18532: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
18533: LD_ADDR_VAR 0 4
18537: PUSH
18538: LD_EXP 52
18542: PUSH
18543: LD_VAR 0 1
18547: ARRAY
18548: PUSH
18549: LD_VAR 0 2
18553: ARRAY
18554: PUSH
18555: LD_INT 1
18557: ARRAY
18558: PPUSH
18559: LD_EXP 52
18563: PUSH
18564: LD_VAR 0 1
18568: ARRAY
18569: PUSH
18570: LD_VAR 0 2
18574: ARRAY
18575: PUSH
18576: LD_INT 2
18578: ARRAY
18579: PPUSH
18580: CALL_OW 428
18584: ST_TO_ADDR
// if not tmp then
18585: LD_VAR 0 4
18589: NOT
18590: IFFALSE 18594
// continue ;
18592: GO 18509
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
18594: LD_VAR 0 4
18598: PUSH
18599: LD_INT 81
18601: PUSH
18602: LD_VAR 0 3
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PPUSH
18611: CALL_OW 69
18615: IN
18616: PUSH
18617: LD_EXP 52
18621: PUSH
18622: LD_VAR 0 1
18626: ARRAY
18627: PUSH
18628: LD_VAR 0 2
18632: ARRAY
18633: PUSH
18634: LD_INT 1
18636: ARRAY
18637: PPUSH
18638: LD_EXP 52
18642: PUSH
18643: LD_VAR 0 1
18647: ARRAY
18648: PUSH
18649: LD_VAR 0 2
18653: ARRAY
18654: PUSH
18655: LD_INT 2
18657: ARRAY
18658: PPUSH
18659: CALL_OW 458
18663: AND
18664: IFFALSE 18758
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
18666: LD_EXP 52
18670: PUSH
18671: LD_VAR 0 1
18675: ARRAY
18676: PUSH
18677: LD_VAR 0 2
18681: ARRAY
18682: PUSH
18683: LD_INT 1
18685: ARRAY
18686: PPUSH
18687: LD_EXP 52
18691: PUSH
18692: LD_VAR 0 1
18696: ARRAY
18697: PUSH
18698: LD_VAR 0 2
18702: ARRAY
18703: PUSH
18704: LD_INT 2
18706: ARRAY
18707: PPUSH
18708: LD_VAR 0 3
18712: PPUSH
18713: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
18717: LD_ADDR_EXP 52
18721: PUSH
18722: LD_EXP 52
18726: PPUSH
18727: LD_VAR 0 1
18731: PPUSH
18732: LD_EXP 52
18736: PUSH
18737: LD_VAR 0 1
18741: ARRAY
18742: PPUSH
18743: LD_VAR 0 2
18747: PPUSH
18748: CALL_OW 3
18752: PPUSH
18753: CALL_OW 1
18757: ST_TO_ADDR
// end ; end ;
18758: GO 18509
18760: POP
18761: POP
// end ;
18762: GO 18427
18764: POP
18765: POP
// end ;
18766: PPOPN 4
18768: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
18769: LD_INT 0
18771: PPUSH
18772: PPUSH
// result := false ;
18773: LD_ADDR_VAR 0 4
18777: PUSH
18778: LD_INT 0
18780: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
18781: LD_VAR 0 1
18785: PPUSH
18786: CALL_OW 264
18790: PUSH
18791: LD_INT 81
18793: EQUAL
18794: NOT
18795: IFFALSE 18799
// exit ;
18797: GO 19039
// index := GetElementIndex ( minersList , unit ) ;
18799: LD_ADDR_VAR 0 5
18803: PUSH
18804: LD_EXP 51
18808: PPUSH
18809: LD_VAR 0 1
18813: PPUSH
18814: CALL 41044 0 2
18818: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
18819: LD_EXP 52
18823: PUSH
18824: LD_VAR 0 5
18828: ARRAY
18829: PUSH
18830: LD_EXP 53
18834: GREATEREQUAL
18835: IFFALSE 18839
// exit ;
18837: GO 19039
// ComMoveXY ( unit , x , y ) ;
18839: LD_VAR 0 1
18843: PPUSH
18844: LD_VAR 0 2
18848: PPUSH
18849: LD_VAR 0 3
18853: PPUSH
18854: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18858: LD_INT 35
18860: PPUSH
18861: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
18865: LD_VAR 0 1
18869: PPUSH
18870: LD_VAR 0 2
18874: PPUSH
18875: LD_VAR 0 3
18879: PPUSH
18880: CALL 72805 0 3
18884: NOT
18885: PUSH
18886: LD_VAR 0 1
18890: PPUSH
18891: CALL_OW 314
18895: AND
18896: IFFALSE 18900
// exit ;
18898: GO 19039
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
18900: LD_VAR 0 2
18904: PPUSH
18905: LD_VAR 0 3
18909: PPUSH
18910: CALL_OW 428
18914: PUSH
18915: LD_VAR 0 1
18919: EQUAL
18920: PUSH
18921: LD_VAR 0 1
18925: PPUSH
18926: CALL_OW 314
18930: NOT
18931: AND
18932: IFFALSE 18858
// PlaySoundXY ( x , y , PlantMine ) ;
18934: LD_VAR 0 2
18938: PPUSH
18939: LD_VAR 0 3
18943: PPUSH
18944: LD_STRING PlantMine
18946: PPUSH
18947: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
18951: LD_VAR 0 2
18955: PPUSH
18956: LD_VAR 0 3
18960: PPUSH
18961: LD_VAR 0 1
18965: PPUSH
18966: CALL_OW 255
18970: PPUSH
18971: LD_INT 0
18973: PPUSH
18974: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
18978: LD_ADDR_EXP 52
18982: PUSH
18983: LD_EXP 52
18987: PPUSH
18988: LD_VAR 0 5
18992: PUSH
18993: LD_EXP 52
18997: PUSH
18998: LD_VAR 0 5
19002: ARRAY
19003: PUSH
19004: LD_INT 1
19006: PLUS
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PPUSH
19012: LD_VAR 0 2
19016: PUSH
19017: LD_VAR 0 3
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PPUSH
19026: CALL 41259 0 3
19030: ST_TO_ADDR
// result := true ;
19031: LD_ADDR_VAR 0 4
19035: PUSH
19036: LD_INT 1
19038: ST_TO_ADDR
// end ;
19039: LD_VAR 0 4
19043: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
19044: LD_INT 0
19046: PPUSH
19047: PPUSH
19048: PPUSH
// if not unit in minersList then
19049: LD_VAR 0 1
19053: PUSH
19054: LD_EXP 51
19058: IN
19059: NOT
19060: IFFALSE 19064
// exit ;
19062: GO 19456
// index := GetElementIndex ( minersList , unit ) ;
19064: LD_ADDR_VAR 0 6
19068: PUSH
19069: LD_EXP 51
19073: PPUSH
19074: LD_VAR 0 1
19078: PPUSH
19079: CALL 41044 0 2
19083: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
19084: LD_ADDR_VAR 0 5
19088: PUSH
19089: DOUBLE
19090: LD_EXP 52
19094: PUSH
19095: LD_VAR 0 6
19099: ARRAY
19100: INC
19101: ST_TO_ADDR
19102: LD_INT 1
19104: PUSH
19105: FOR_DOWNTO
19106: IFFALSE 19267
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
19108: LD_EXP 52
19112: PUSH
19113: LD_VAR 0 6
19117: ARRAY
19118: PUSH
19119: LD_VAR 0 5
19123: ARRAY
19124: PUSH
19125: LD_INT 1
19127: ARRAY
19128: PUSH
19129: LD_VAR 0 2
19133: EQUAL
19134: PUSH
19135: LD_EXP 52
19139: PUSH
19140: LD_VAR 0 6
19144: ARRAY
19145: PUSH
19146: LD_VAR 0 5
19150: ARRAY
19151: PUSH
19152: LD_INT 2
19154: ARRAY
19155: PUSH
19156: LD_VAR 0 3
19160: EQUAL
19161: AND
19162: IFFALSE 19265
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
19164: LD_EXP 52
19168: PUSH
19169: LD_VAR 0 6
19173: ARRAY
19174: PUSH
19175: LD_VAR 0 5
19179: ARRAY
19180: PUSH
19181: LD_INT 1
19183: ARRAY
19184: PPUSH
19185: LD_EXP 52
19189: PUSH
19190: LD_VAR 0 6
19194: ARRAY
19195: PUSH
19196: LD_VAR 0 5
19200: ARRAY
19201: PUSH
19202: LD_INT 2
19204: ARRAY
19205: PPUSH
19206: LD_VAR 0 1
19210: PPUSH
19211: CALL_OW 255
19215: PPUSH
19216: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
19220: LD_ADDR_EXP 52
19224: PUSH
19225: LD_EXP 52
19229: PPUSH
19230: LD_VAR 0 6
19234: PPUSH
19235: LD_EXP 52
19239: PUSH
19240: LD_VAR 0 6
19244: ARRAY
19245: PPUSH
19246: LD_VAR 0 5
19250: PPUSH
19251: CALL_OW 3
19255: PPUSH
19256: CALL_OW 1
19260: ST_TO_ADDR
// exit ;
19261: POP
19262: POP
19263: GO 19456
// end ; end ;
19265: GO 19105
19267: POP
19268: POP
// for i := minerMinesList [ index ] downto 1 do
19269: LD_ADDR_VAR 0 5
19273: PUSH
19274: DOUBLE
19275: LD_EXP 52
19279: PUSH
19280: LD_VAR 0 6
19284: ARRAY
19285: INC
19286: ST_TO_ADDR
19287: LD_INT 1
19289: PUSH
19290: FOR_DOWNTO
19291: IFFALSE 19454
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
19293: LD_EXP 52
19297: PUSH
19298: LD_VAR 0 6
19302: ARRAY
19303: PUSH
19304: LD_VAR 0 5
19308: ARRAY
19309: PUSH
19310: LD_INT 1
19312: ARRAY
19313: PPUSH
19314: LD_EXP 52
19318: PUSH
19319: LD_VAR 0 6
19323: ARRAY
19324: PUSH
19325: LD_VAR 0 5
19329: ARRAY
19330: PUSH
19331: LD_INT 2
19333: ARRAY
19334: PPUSH
19335: LD_VAR 0 2
19339: PPUSH
19340: LD_VAR 0 3
19344: PPUSH
19345: CALL_OW 298
19349: PUSH
19350: LD_INT 6
19352: LESS
19353: IFFALSE 19452
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
19355: LD_EXP 52
19359: PUSH
19360: LD_VAR 0 6
19364: ARRAY
19365: PUSH
19366: LD_VAR 0 5
19370: ARRAY
19371: PUSH
19372: LD_INT 1
19374: ARRAY
19375: PPUSH
19376: LD_EXP 52
19380: PUSH
19381: LD_VAR 0 6
19385: ARRAY
19386: PUSH
19387: LD_VAR 0 5
19391: ARRAY
19392: PUSH
19393: LD_INT 2
19395: ARRAY
19396: PPUSH
19397: LD_VAR 0 1
19401: PPUSH
19402: CALL_OW 255
19406: PPUSH
19407: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
19411: LD_ADDR_EXP 52
19415: PUSH
19416: LD_EXP 52
19420: PPUSH
19421: LD_VAR 0 6
19425: PPUSH
19426: LD_EXP 52
19430: PUSH
19431: LD_VAR 0 6
19435: ARRAY
19436: PPUSH
19437: LD_VAR 0 5
19441: PPUSH
19442: CALL_OW 3
19446: PPUSH
19447: CALL_OW 1
19451: ST_TO_ADDR
// end ; end ;
19452: GO 19290
19454: POP
19455: POP
// end ;
19456: LD_VAR 0 4
19460: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
19461: LD_INT 0
19463: PPUSH
19464: PPUSH
19465: PPUSH
19466: PPUSH
19467: PPUSH
19468: PPUSH
19469: PPUSH
19470: PPUSH
19471: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
19472: LD_VAR 0 1
19476: PPUSH
19477: CALL_OW 264
19481: PUSH
19482: LD_INT 81
19484: EQUAL
19485: NOT
19486: PUSH
19487: LD_VAR 0 1
19491: PUSH
19492: LD_EXP 51
19496: IN
19497: NOT
19498: OR
19499: IFFALSE 19503
// exit ;
19501: GO 19825
// index := GetElementIndex ( minersList , unit ) ;
19503: LD_ADDR_VAR 0 6
19507: PUSH
19508: LD_EXP 51
19512: PPUSH
19513: LD_VAR 0 1
19517: PPUSH
19518: CALL 41044 0 2
19522: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
19523: LD_ADDR_VAR 0 8
19527: PUSH
19528: LD_EXP 53
19532: PUSH
19533: LD_EXP 52
19537: PUSH
19538: LD_VAR 0 6
19542: ARRAY
19543: MINUS
19544: ST_TO_ADDR
// if not minesFreeAmount then
19545: LD_VAR 0 8
19549: NOT
19550: IFFALSE 19554
// exit ;
19552: GO 19825
// tmp := [ ] ;
19554: LD_ADDR_VAR 0 7
19558: PUSH
19559: EMPTY
19560: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
19561: LD_ADDR_VAR 0 5
19565: PUSH
19566: DOUBLE
19567: LD_INT 1
19569: DEC
19570: ST_TO_ADDR
19571: LD_VAR 0 8
19575: PUSH
19576: FOR_TO
19577: IFFALSE 19772
// begin _d := rand ( 0 , 5 ) ;
19579: LD_ADDR_VAR 0 11
19583: PUSH
19584: LD_INT 0
19586: PPUSH
19587: LD_INT 5
19589: PPUSH
19590: CALL_OW 12
19594: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
19595: LD_ADDR_VAR 0 12
19599: PUSH
19600: LD_INT 2
19602: PPUSH
19603: LD_INT 6
19605: PPUSH
19606: CALL_OW 12
19610: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
19611: LD_ADDR_VAR 0 9
19615: PUSH
19616: LD_VAR 0 2
19620: PPUSH
19621: LD_VAR 0 11
19625: PPUSH
19626: LD_VAR 0 12
19630: PPUSH
19631: CALL_OW 272
19635: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
19636: LD_ADDR_VAR 0 10
19640: PUSH
19641: LD_VAR 0 3
19645: PPUSH
19646: LD_VAR 0 11
19650: PPUSH
19651: LD_VAR 0 12
19655: PPUSH
19656: CALL_OW 273
19660: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
19661: LD_VAR 0 9
19665: PPUSH
19666: LD_VAR 0 10
19670: PPUSH
19671: CALL_OW 488
19675: PUSH
19676: LD_VAR 0 9
19680: PUSH
19681: LD_VAR 0 10
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: LD_VAR 0 7
19694: IN
19695: NOT
19696: AND
19697: PUSH
19698: LD_VAR 0 9
19702: PPUSH
19703: LD_VAR 0 10
19707: PPUSH
19708: CALL_OW 458
19712: NOT
19713: AND
19714: IFFALSE 19756
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
19716: LD_ADDR_VAR 0 7
19720: PUSH
19721: LD_VAR 0 7
19725: PPUSH
19726: LD_VAR 0 7
19730: PUSH
19731: LD_INT 1
19733: PLUS
19734: PPUSH
19735: LD_VAR 0 9
19739: PUSH
19740: LD_VAR 0 10
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PPUSH
19749: CALL_OW 1
19753: ST_TO_ADDR
19754: GO 19770
// i := i - 1 ;
19756: LD_ADDR_VAR 0 5
19760: PUSH
19761: LD_VAR 0 5
19765: PUSH
19766: LD_INT 1
19768: MINUS
19769: ST_TO_ADDR
// end ;
19770: GO 19576
19772: POP
19773: POP
// for i in tmp do
19774: LD_ADDR_VAR 0 5
19778: PUSH
19779: LD_VAR 0 7
19783: PUSH
19784: FOR_IN
19785: IFFALSE 19823
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
19787: LD_VAR 0 1
19791: PPUSH
19792: LD_VAR 0 5
19796: PUSH
19797: LD_INT 1
19799: ARRAY
19800: PPUSH
19801: LD_VAR 0 5
19805: PUSH
19806: LD_INT 2
19808: ARRAY
19809: PPUSH
19810: CALL 18769 0 3
19814: NOT
19815: IFFALSE 19821
// exit ;
19817: POP
19818: POP
19819: GO 19825
19821: GO 19784
19823: POP
19824: POP
// end ;
19825: LD_VAR 0 4
19829: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
19830: LD_INT 0
19832: PPUSH
19833: PPUSH
19834: PPUSH
19835: PPUSH
19836: PPUSH
19837: PPUSH
19838: PPUSH
19839: PPUSH
19840: PPUSH
// if GetClass ( unit ) <> class_sniper then
19841: LD_VAR 0 1
19845: PPUSH
19846: CALL_OW 257
19850: PUSH
19851: LD_INT 5
19853: NONEQUAL
19854: IFFALSE 19858
// exit ;
19856: GO 20324
// dist := 8 ;
19858: LD_ADDR_VAR 0 5
19862: PUSH
19863: LD_INT 8
19865: ST_TO_ADDR
// viewRange := 12 ;
19866: LD_ADDR_VAR 0 8
19870: PUSH
19871: LD_INT 12
19873: ST_TO_ADDR
// side := GetSide ( unit ) ;
19874: LD_ADDR_VAR 0 6
19878: PUSH
19879: LD_VAR 0 1
19883: PPUSH
19884: CALL_OW 255
19888: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
19889: LD_INT 61
19891: PPUSH
19892: LD_VAR 0 6
19896: PPUSH
19897: CALL_OW 321
19901: PUSH
19902: LD_INT 2
19904: EQUAL
19905: IFFALSE 19915
// viewRange := 16 ;
19907: LD_ADDR_VAR 0 8
19911: PUSH
19912: LD_INT 16
19914: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
19915: LD_VAR 0 1
19919: PPUSH
19920: LD_VAR 0 2
19924: PPUSH
19925: LD_VAR 0 3
19929: PPUSH
19930: CALL_OW 297
19934: PUSH
19935: LD_VAR 0 5
19939: GREATER
19940: IFFALSE 20019
// begin ComMoveXY ( unit , x , y ) ;
19942: LD_VAR 0 1
19946: PPUSH
19947: LD_VAR 0 2
19951: PPUSH
19952: LD_VAR 0 3
19956: PPUSH
19957: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19961: LD_INT 35
19963: PPUSH
19964: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
19968: LD_VAR 0 1
19972: PPUSH
19973: LD_VAR 0 2
19977: PPUSH
19978: LD_VAR 0 3
19982: PPUSH
19983: CALL 72805 0 3
19987: NOT
19988: IFFALSE 19992
// exit ;
19990: GO 20324
// until GetDistUnitXY ( unit , x , y ) < dist ;
19992: LD_VAR 0 1
19996: PPUSH
19997: LD_VAR 0 2
20001: PPUSH
20002: LD_VAR 0 3
20006: PPUSH
20007: CALL_OW 297
20011: PUSH
20012: LD_VAR 0 5
20016: LESS
20017: IFFALSE 19961
// end ; ComTurnXY ( unit , x , y ) ;
20019: LD_VAR 0 1
20023: PPUSH
20024: LD_VAR 0 2
20028: PPUSH
20029: LD_VAR 0 3
20033: PPUSH
20034: CALL_OW 118
// repeat if Multiplayer then
20038: LD_OWVAR 4
20042: IFFALSE 20053
// wait ( 35 ) else
20044: LD_INT 35
20046: PPUSH
20047: CALL_OW 67
20051: GO 20060
// wait ( 5 ) ;
20053: LD_INT 5
20055: PPUSH
20056: CALL_OW 67
// _d := GetDir ( unit ) ;
20060: LD_ADDR_VAR 0 11
20064: PUSH
20065: LD_VAR 0 1
20069: PPUSH
20070: CALL_OW 254
20074: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
20075: LD_ADDR_VAR 0 7
20079: PUSH
20080: LD_VAR 0 1
20084: PPUSH
20085: CALL_OW 250
20089: PPUSH
20090: LD_VAR 0 1
20094: PPUSH
20095: CALL_OW 251
20099: PPUSH
20100: LD_VAR 0 2
20104: PPUSH
20105: LD_VAR 0 3
20109: PPUSH
20110: CALL 75413 0 4
20114: ST_TO_ADDR
// until dir = _d ;
20115: LD_VAR 0 7
20119: PUSH
20120: LD_VAR 0 11
20124: EQUAL
20125: IFFALSE 20038
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
20127: LD_ADDR_VAR 0 9
20131: PUSH
20132: LD_VAR 0 1
20136: PPUSH
20137: CALL_OW 250
20141: PPUSH
20142: LD_VAR 0 7
20146: PPUSH
20147: LD_VAR 0 5
20151: PPUSH
20152: CALL_OW 272
20156: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
20157: LD_ADDR_VAR 0 10
20161: PUSH
20162: LD_VAR 0 1
20166: PPUSH
20167: CALL_OW 251
20171: PPUSH
20172: LD_VAR 0 7
20176: PPUSH
20177: LD_VAR 0 5
20181: PPUSH
20182: CALL_OW 273
20186: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20187: LD_VAR 0 9
20191: PPUSH
20192: LD_VAR 0 10
20196: PPUSH
20197: CALL_OW 488
20201: NOT
20202: IFFALSE 20206
// exit ;
20204: GO 20324
// ComAnimCustom ( unit , 1 ) ;
20206: LD_VAR 0 1
20210: PPUSH
20211: LD_INT 1
20213: PPUSH
20214: CALL_OW 592
// p := 0 ;
20218: LD_ADDR_VAR 0 12
20222: PUSH
20223: LD_INT 0
20225: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
20226: LD_VAR 0 9
20230: PPUSH
20231: LD_VAR 0 10
20235: PPUSH
20236: LD_VAR 0 6
20240: PPUSH
20241: LD_VAR 0 8
20245: PPUSH
20246: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
20250: LD_INT 35
20252: PPUSH
20253: CALL_OW 67
// p := Inc ( p ) ;
20257: LD_ADDR_VAR 0 12
20261: PUSH
20262: LD_VAR 0 12
20266: PPUSH
20267: CALL 75369 0 1
20271: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
20272: LD_VAR 0 12
20276: PUSH
20277: LD_INT 3
20279: EQUAL
20280: PUSH
20281: LD_VAR 0 1
20285: PPUSH
20286: CALL_OW 302
20290: NOT
20291: OR
20292: PUSH
20293: LD_VAR 0 1
20297: PPUSH
20298: CALL_OW 301
20302: OR
20303: IFFALSE 20250
// RemoveSeeing ( _x , _y , side ) ;
20305: LD_VAR 0 9
20309: PPUSH
20310: LD_VAR 0 10
20314: PPUSH
20315: LD_VAR 0 6
20319: PPUSH
20320: CALL_OW 331
// end ; end_of_file
20324: LD_VAR 0 4
20328: RET
// export globalGameSaveCounter ; every 0 0$1 do
20329: GO 20331
20331: DISABLE
// begin enable ;
20332: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20333: LD_STRING updateTimer(
20335: PUSH
20336: LD_OWVAR 1
20340: STR
20341: PUSH
20342: LD_STRING );
20344: STR
20345: PPUSH
20346: CALL_OW 559
// end ;
20350: END
// every 0 0$1 do
20351: GO 20353
20353: DISABLE
// begin globalGameSaveCounter := 0 ;
20354: LD_ADDR_EXP 54
20358: PUSH
20359: LD_INT 0
20361: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20362: LD_STRING setGameSaveCounter(0)
20364: PPUSH
20365: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20369: LD_STRING initStreamRollete();
20371: PPUSH
20372: CALL_OW 559
// InitStreamMode ;
20376: CALL 21719 0 0
// DefineStreamItems ( false ) ;
20380: LD_INT 0
20382: PPUSH
20383: CALL 22183 0 1
// end ;
20387: END
// export function SOS_MapStart ( ) ; begin
20388: LD_INT 0
20390: PPUSH
// if streamModeActive then
20391: LD_EXP 55
20395: IFFALSE 20404
// DefineStreamItems ( true ) ;
20397: LD_INT 1
20399: PPUSH
20400: CALL 22183 0 1
// UpdateLuaVariables ( ) ;
20404: CALL 20421 0 0
// UpdateFactoryWaypoints ( ) ;
20408: CALL 35185 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20412: CALL 35437 0 0
// end ;
20416: LD_VAR 0 1
20420: RET
// function UpdateLuaVariables ( ) ; begin
20421: LD_INT 0
20423: PPUSH
// if globalGameSaveCounter then
20424: LD_EXP 54
20428: IFFALSE 20462
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20430: LD_ADDR_EXP 54
20434: PUSH
20435: LD_EXP 54
20439: PPUSH
20440: CALL 75369 0 1
20444: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20445: LD_STRING setGameSaveCounter(
20447: PUSH
20448: LD_EXP 54
20452: STR
20453: PUSH
20454: LD_STRING )
20456: STR
20457: PPUSH
20458: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20462: LD_STRING setGameDifficulty(
20464: PUSH
20465: LD_OWVAR 67
20469: STR
20470: PUSH
20471: LD_STRING )
20473: STR
20474: PPUSH
20475: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
20479: LD_STRING displayDifficulty(
20481: PUSH
20482: LD_OWVAR 67
20486: STR
20487: PUSH
20488: LD_STRING )
20490: STR
20491: PPUSH
20492: CALL_OW 559
// end ;
20496: LD_VAR 0 1
20500: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20501: LD_INT 0
20503: PPUSH
// if p2 = stream_mode then
20504: LD_VAR 0 2
20508: PUSH
20509: LD_INT 100
20511: EQUAL
20512: IFFALSE 21515
// begin if not StreamModeActive then
20514: LD_EXP 55
20518: NOT
20519: IFFALSE 20529
// StreamModeActive := true ;
20521: LD_ADDR_EXP 55
20525: PUSH
20526: LD_INT 1
20528: ST_TO_ADDR
// if p3 = 0 then
20529: LD_VAR 0 3
20533: PUSH
20534: LD_INT 0
20536: EQUAL
20537: IFFALSE 20543
// InitStreamMode ;
20539: CALL 21719 0 0
// if p3 = 1 then
20543: LD_VAR 0 3
20547: PUSH
20548: LD_INT 1
20550: EQUAL
20551: IFFALSE 20561
// sRocket := true ;
20553: LD_ADDR_EXP 60
20557: PUSH
20558: LD_INT 1
20560: ST_TO_ADDR
// if p3 = 2 then
20561: LD_VAR 0 3
20565: PUSH
20566: LD_INT 2
20568: EQUAL
20569: IFFALSE 20579
// sSpeed := true ;
20571: LD_ADDR_EXP 59
20575: PUSH
20576: LD_INT 1
20578: ST_TO_ADDR
// if p3 = 3 then
20579: LD_VAR 0 3
20583: PUSH
20584: LD_INT 3
20586: EQUAL
20587: IFFALSE 20597
// sEngine := true ;
20589: LD_ADDR_EXP 61
20593: PUSH
20594: LD_INT 1
20596: ST_TO_ADDR
// if p3 = 4 then
20597: LD_VAR 0 3
20601: PUSH
20602: LD_INT 4
20604: EQUAL
20605: IFFALSE 20615
// sSpec := true ;
20607: LD_ADDR_EXP 58
20611: PUSH
20612: LD_INT 1
20614: ST_TO_ADDR
// if p3 = 5 then
20615: LD_VAR 0 3
20619: PUSH
20620: LD_INT 5
20622: EQUAL
20623: IFFALSE 20633
// sLevel := true ;
20625: LD_ADDR_EXP 62
20629: PUSH
20630: LD_INT 1
20632: ST_TO_ADDR
// if p3 = 6 then
20633: LD_VAR 0 3
20637: PUSH
20638: LD_INT 6
20640: EQUAL
20641: IFFALSE 20651
// sArmoury := true ;
20643: LD_ADDR_EXP 63
20647: PUSH
20648: LD_INT 1
20650: ST_TO_ADDR
// if p3 = 7 then
20651: LD_VAR 0 3
20655: PUSH
20656: LD_INT 7
20658: EQUAL
20659: IFFALSE 20669
// sRadar := true ;
20661: LD_ADDR_EXP 64
20665: PUSH
20666: LD_INT 1
20668: ST_TO_ADDR
// if p3 = 8 then
20669: LD_VAR 0 3
20673: PUSH
20674: LD_INT 8
20676: EQUAL
20677: IFFALSE 20687
// sBunker := true ;
20679: LD_ADDR_EXP 65
20683: PUSH
20684: LD_INT 1
20686: ST_TO_ADDR
// if p3 = 9 then
20687: LD_VAR 0 3
20691: PUSH
20692: LD_INT 9
20694: EQUAL
20695: IFFALSE 20705
// sHack := true ;
20697: LD_ADDR_EXP 66
20701: PUSH
20702: LD_INT 1
20704: ST_TO_ADDR
// if p3 = 10 then
20705: LD_VAR 0 3
20709: PUSH
20710: LD_INT 10
20712: EQUAL
20713: IFFALSE 20723
// sFire := true ;
20715: LD_ADDR_EXP 67
20719: PUSH
20720: LD_INT 1
20722: ST_TO_ADDR
// if p3 = 11 then
20723: LD_VAR 0 3
20727: PUSH
20728: LD_INT 11
20730: EQUAL
20731: IFFALSE 20741
// sRefresh := true ;
20733: LD_ADDR_EXP 68
20737: PUSH
20738: LD_INT 1
20740: ST_TO_ADDR
// if p3 = 12 then
20741: LD_VAR 0 3
20745: PUSH
20746: LD_INT 12
20748: EQUAL
20749: IFFALSE 20759
// sExp := true ;
20751: LD_ADDR_EXP 69
20755: PUSH
20756: LD_INT 1
20758: ST_TO_ADDR
// if p3 = 13 then
20759: LD_VAR 0 3
20763: PUSH
20764: LD_INT 13
20766: EQUAL
20767: IFFALSE 20777
// sDepot := true ;
20769: LD_ADDR_EXP 70
20773: PUSH
20774: LD_INT 1
20776: ST_TO_ADDR
// if p3 = 14 then
20777: LD_VAR 0 3
20781: PUSH
20782: LD_INT 14
20784: EQUAL
20785: IFFALSE 20795
// sFlag := true ;
20787: LD_ADDR_EXP 71
20791: PUSH
20792: LD_INT 1
20794: ST_TO_ADDR
// if p3 = 15 then
20795: LD_VAR 0 3
20799: PUSH
20800: LD_INT 15
20802: EQUAL
20803: IFFALSE 20813
// sKamikadze := true ;
20805: LD_ADDR_EXP 79
20809: PUSH
20810: LD_INT 1
20812: ST_TO_ADDR
// if p3 = 16 then
20813: LD_VAR 0 3
20817: PUSH
20818: LD_INT 16
20820: EQUAL
20821: IFFALSE 20831
// sTroll := true ;
20823: LD_ADDR_EXP 80
20827: PUSH
20828: LD_INT 1
20830: ST_TO_ADDR
// if p3 = 17 then
20831: LD_VAR 0 3
20835: PUSH
20836: LD_INT 17
20838: EQUAL
20839: IFFALSE 20849
// sSlow := true ;
20841: LD_ADDR_EXP 81
20845: PUSH
20846: LD_INT 1
20848: ST_TO_ADDR
// if p3 = 18 then
20849: LD_VAR 0 3
20853: PUSH
20854: LD_INT 18
20856: EQUAL
20857: IFFALSE 20867
// sLack := true ;
20859: LD_ADDR_EXP 82
20863: PUSH
20864: LD_INT 1
20866: ST_TO_ADDR
// if p3 = 19 then
20867: LD_VAR 0 3
20871: PUSH
20872: LD_INT 19
20874: EQUAL
20875: IFFALSE 20885
// sTank := true ;
20877: LD_ADDR_EXP 84
20881: PUSH
20882: LD_INT 1
20884: ST_TO_ADDR
// if p3 = 20 then
20885: LD_VAR 0 3
20889: PUSH
20890: LD_INT 20
20892: EQUAL
20893: IFFALSE 20903
// sRemote := true ;
20895: LD_ADDR_EXP 85
20899: PUSH
20900: LD_INT 1
20902: ST_TO_ADDR
// if p3 = 21 then
20903: LD_VAR 0 3
20907: PUSH
20908: LD_INT 21
20910: EQUAL
20911: IFFALSE 20921
// sPowell := true ;
20913: LD_ADDR_EXP 86
20917: PUSH
20918: LD_INT 1
20920: ST_TO_ADDR
// if p3 = 22 then
20921: LD_VAR 0 3
20925: PUSH
20926: LD_INT 22
20928: EQUAL
20929: IFFALSE 20939
// sTeleport := true ;
20931: LD_ADDR_EXP 89
20935: PUSH
20936: LD_INT 1
20938: ST_TO_ADDR
// if p3 = 23 then
20939: LD_VAR 0 3
20943: PUSH
20944: LD_INT 23
20946: EQUAL
20947: IFFALSE 20957
// sOilTower := true ;
20949: LD_ADDR_EXP 91
20953: PUSH
20954: LD_INT 1
20956: ST_TO_ADDR
// if p3 = 24 then
20957: LD_VAR 0 3
20961: PUSH
20962: LD_INT 24
20964: EQUAL
20965: IFFALSE 20975
// sShovel := true ;
20967: LD_ADDR_EXP 92
20971: PUSH
20972: LD_INT 1
20974: ST_TO_ADDR
// if p3 = 25 then
20975: LD_VAR 0 3
20979: PUSH
20980: LD_INT 25
20982: EQUAL
20983: IFFALSE 20993
// sSheik := true ;
20985: LD_ADDR_EXP 93
20989: PUSH
20990: LD_INT 1
20992: ST_TO_ADDR
// if p3 = 26 then
20993: LD_VAR 0 3
20997: PUSH
20998: LD_INT 26
21000: EQUAL
21001: IFFALSE 21011
// sEarthquake := true ;
21003: LD_ADDR_EXP 95
21007: PUSH
21008: LD_INT 1
21010: ST_TO_ADDR
// if p3 = 27 then
21011: LD_VAR 0 3
21015: PUSH
21016: LD_INT 27
21018: EQUAL
21019: IFFALSE 21029
// sAI := true ;
21021: LD_ADDR_EXP 96
21025: PUSH
21026: LD_INT 1
21028: ST_TO_ADDR
// if p3 = 28 then
21029: LD_VAR 0 3
21033: PUSH
21034: LD_INT 28
21036: EQUAL
21037: IFFALSE 21047
// sCargo := true ;
21039: LD_ADDR_EXP 99
21043: PUSH
21044: LD_INT 1
21046: ST_TO_ADDR
// if p3 = 29 then
21047: LD_VAR 0 3
21051: PUSH
21052: LD_INT 29
21054: EQUAL
21055: IFFALSE 21065
// sDLaser := true ;
21057: LD_ADDR_EXP 100
21061: PUSH
21062: LD_INT 1
21064: ST_TO_ADDR
// if p3 = 30 then
21065: LD_VAR 0 3
21069: PUSH
21070: LD_INT 30
21072: EQUAL
21073: IFFALSE 21083
// sExchange := true ;
21075: LD_ADDR_EXP 101
21079: PUSH
21080: LD_INT 1
21082: ST_TO_ADDR
// if p3 = 31 then
21083: LD_VAR 0 3
21087: PUSH
21088: LD_INT 31
21090: EQUAL
21091: IFFALSE 21101
// sFac := true ;
21093: LD_ADDR_EXP 102
21097: PUSH
21098: LD_INT 1
21100: ST_TO_ADDR
// if p3 = 32 then
21101: LD_VAR 0 3
21105: PUSH
21106: LD_INT 32
21108: EQUAL
21109: IFFALSE 21119
// sPower := true ;
21111: LD_ADDR_EXP 103
21115: PUSH
21116: LD_INT 1
21118: ST_TO_ADDR
// if p3 = 33 then
21119: LD_VAR 0 3
21123: PUSH
21124: LD_INT 33
21126: EQUAL
21127: IFFALSE 21137
// sRandom := true ;
21129: LD_ADDR_EXP 104
21133: PUSH
21134: LD_INT 1
21136: ST_TO_ADDR
// if p3 = 34 then
21137: LD_VAR 0 3
21141: PUSH
21142: LD_INT 34
21144: EQUAL
21145: IFFALSE 21155
// sShield := true ;
21147: LD_ADDR_EXP 105
21151: PUSH
21152: LD_INT 1
21154: ST_TO_ADDR
// if p3 = 35 then
21155: LD_VAR 0 3
21159: PUSH
21160: LD_INT 35
21162: EQUAL
21163: IFFALSE 21173
// sTime := true ;
21165: LD_ADDR_EXP 106
21169: PUSH
21170: LD_INT 1
21172: ST_TO_ADDR
// if p3 = 36 then
21173: LD_VAR 0 3
21177: PUSH
21178: LD_INT 36
21180: EQUAL
21181: IFFALSE 21191
// sTools := true ;
21183: LD_ADDR_EXP 107
21187: PUSH
21188: LD_INT 1
21190: ST_TO_ADDR
// if p3 = 101 then
21191: LD_VAR 0 3
21195: PUSH
21196: LD_INT 101
21198: EQUAL
21199: IFFALSE 21209
// sSold := true ;
21201: LD_ADDR_EXP 72
21205: PUSH
21206: LD_INT 1
21208: ST_TO_ADDR
// if p3 = 102 then
21209: LD_VAR 0 3
21213: PUSH
21214: LD_INT 102
21216: EQUAL
21217: IFFALSE 21227
// sDiff := true ;
21219: LD_ADDR_EXP 73
21223: PUSH
21224: LD_INT 1
21226: ST_TO_ADDR
// if p3 = 103 then
21227: LD_VAR 0 3
21231: PUSH
21232: LD_INT 103
21234: EQUAL
21235: IFFALSE 21245
// sFog := true ;
21237: LD_ADDR_EXP 76
21241: PUSH
21242: LD_INT 1
21244: ST_TO_ADDR
// if p3 = 104 then
21245: LD_VAR 0 3
21249: PUSH
21250: LD_INT 104
21252: EQUAL
21253: IFFALSE 21263
// sReset := true ;
21255: LD_ADDR_EXP 77
21259: PUSH
21260: LD_INT 1
21262: ST_TO_ADDR
// if p3 = 105 then
21263: LD_VAR 0 3
21267: PUSH
21268: LD_INT 105
21270: EQUAL
21271: IFFALSE 21281
// sSun := true ;
21273: LD_ADDR_EXP 78
21277: PUSH
21278: LD_INT 1
21280: ST_TO_ADDR
// if p3 = 106 then
21281: LD_VAR 0 3
21285: PUSH
21286: LD_INT 106
21288: EQUAL
21289: IFFALSE 21299
// sTiger := true ;
21291: LD_ADDR_EXP 74
21295: PUSH
21296: LD_INT 1
21298: ST_TO_ADDR
// if p3 = 107 then
21299: LD_VAR 0 3
21303: PUSH
21304: LD_INT 107
21306: EQUAL
21307: IFFALSE 21317
// sBomb := true ;
21309: LD_ADDR_EXP 75
21313: PUSH
21314: LD_INT 1
21316: ST_TO_ADDR
// if p3 = 108 then
21317: LD_VAR 0 3
21321: PUSH
21322: LD_INT 108
21324: EQUAL
21325: IFFALSE 21335
// sWound := true ;
21327: LD_ADDR_EXP 83
21331: PUSH
21332: LD_INT 1
21334: ST_TO_ADDR
// if p3 = 109 then
21335: LD_VAR 0 3
21339: PUSH
21340: LD_INT 109
21342: EQUAL
21343: IFFALSE 21353
// sBetray := true ;
21345: LD_ADDR_EXP 87
21349: PUSH
21350: LD_INT 1
21352: ST_TO_ADDR
// if p3 = 110 then
21353: LD_VAR 0 3
21357: PUSH
21358: LD_INT 110
21360: EQUAL
21361: IFFALSE 21371
// sContamin := true ;
21363: LD_ADDR_EXP 88
21367: PUSH
21368: LD_INT 1
21370: ST_TO_ADDR
// if p3 = 111 then
21371: LD_VAR 0 3
21375: PUSH
21376: LD_INT 111
21378: EQUAL
21379: IFFALSE 21389
// sOil := true ;
21381: LD_ADDR_EXP 90
21385: PUSH
21386: LD_INT 1
21388: ST_TO_ADDR
// if p3 = 112 then
21389: LD_VAR 0 3
21393: PUSH
21394: LD_INT 112
21396: EQUAL
21397: IFFALSE 21407
// sStu := true ;
21399: LD_ADDR_EXP 94
21403: PUSH
21404: LD_INT 1
21406: ST_TO_ADDR
// if p3 = 113 then
21407: LD_VAR 0 3
21411: PUSH
21412: LD_INT 113
21414: EQUAL
21415: IFFALSE 21425
// sBazooka := true ;
21417: LD_ADDR_EXP 97
21421: PUSH
21422: LD_INT 1
21424: ST_TO_ADDR
// if p3 = 114 then
21425: LD_VAR 0 3
21429: PUSH
21430: LD_INT 114
21432: EQUAL
21433: IFFALSE 21443
// sMortar := true ;
21435: LD_ADDR_EXP 98
21439: PUSH
21440: LD_INT 1
21442: ST_TO_ADDR
// if p3 = 115 then
21443: LD_VAR 0 3
21447: PUSH
21448: LD_INT 115
21450: EQUAL
21451: IFFALSE 21461
// sRanger := true ;
21453: LD_ADDR_EXP 108
21457: PUSH
21458: LD_INT 1
21460: ST_TO_ADDR
// if p3 = 116 then
21461: LD_VAR 0 3
21465: PUSH
21466: LD_INT 116
21468: EQUAL
21469: IFFALSE 21479
// sComputer := true ;
21471: LD_ADDR_EXP 109
21475: PUSH
21476: LD_INT 1
21478: ST_TO_ADDR
// if p3 = 117 then
21479: LD_VAR 0 3
21483: PUSH
21484: LD_INT 117
21486: EQUAL
21487: IFFALSE 21497
// s30 := true ;
21489: LD_ADDR_EXP 110
21493: PUSH
21494: LD_INT 1
21496: ST_TO_ADDR
// if p3 = 118 then
21497: LD_VAR 0 3
21501: PUSH
21502: LD_INT 118
21504: EQUAL
21505: IFFALSE 21515
// s60 := true ;
21507: LD_ADDR_EXP 111
21511: PUSH
21512: LD_INT 1
21514: ST_TO_ADDR
// end ; if p2 = hack_mode then
21515: LD_VAR 0 2
21519: PUSH
21520: LD_INT 101
21522: EQUAL
21523: IFFALSE 21651
// begin case p3 of 1 :
21525: LD_VAR 0 3
21529: PUSH
21530: LD_INT 1
21532: DOUBLE
21533: EQUAL
21534: IFTRUE 21538
21536: GO 21545
21538: POP
// hHackUnlimitedResources ; 2 :
21539: CALL 33798 0 0
21543: GO 21651
21545: LD_INT 2
21547: DOUBLE
21548: EQUAL
21549: IFTRUE 21553
21551: GO 21560
21553: POP
// hHackSetLevel10 ; 3 :
21554: CALL 33931 0 0
21558: GO 21651
21560: LD_INT 3
21562: DOUBLE
21563: EQUAL
21564: IFTRUE 21568
21566: GO 21575
21568: POP
// hHackSetLevel10YourUnits ; 4 :
21569: CALL 34016 0 0
21573: GO 21651
21575: LD_INT 4
21577: DOUBLE
21578: EQUAL
21579: IFTRUE 21583
21581: GO 21590
21583: POP
// hHackInvincible ; 5 :
21584: CALL 34464 0 0
21588: GO 21651
21590: LD_INT 5
21592: DOUBLE
21593: EQUAL
21594: IFTRUE 21598
21596: GO 21605
21598: POP
// hHackInvisible ; 6 :
21599: CALL 34575 0 0
21603: GO 21651
21605: LD_INT 6
21607: DOUBLE
21608: EQUAL
21609: IFTRUE 21613
21611: GO 21620
21613: POP
// hHackChangeYourSide ; 7 :
21614: CALL 34632 0 0
21618: GO 21651
21620: LD_INT 7
21622: DOUBLE
21623: EQUAL
21624: IFTRUE 21628
21626: GO 21635
21628: POP
// hHackChangeUnitSide ; 8 :
21629: CALL 34674 0 0
21633: GO 21651
21635: LD_INT 8
21637: DOUBLE
21638: EQUAL
21639: IFTRUE 21643
21641: GO 21650
21643: POP
// hHackFog ; end ;
21644: CALL 34775 0 0
21648: GO 21651
21650: POP
// end ; if p2 = game_save_mode then
21651: LD_VAR 0 2
21655: PUSH
21656: LD_INT 102
21658: EQUAL
21659: IFFALSE 21714
// begin if p3 = 1 then
21661: LD_VAR 0 3
21665: PUSH
21666: LD_INT 1
21668: EQUAL
21669: IFFALSE 21681
// globalGameSaveCounter := p4 ;
21671: LD_ADDR_EXP 54
21675: PUSH
21676: LD_VAR 0 4
21680: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21681: LD_VAR 0 3
21685: PUSH
21686: LD_INT 2
21688: EQUAL
21689: PUSH
21690: LD_EXP 54
21694: AND
21695: IFFALSE 21714
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21697: LD_STRING setGameSaveCounter(
21699: PUSH
21700: LD_EXP 54
21704: STR
21705: PUSH
21706: LD_STRING )
21708: STR
21709: PPUSH
21710: CALL_OW 559
// end ; end ;
21714: LD_VAR 0 7
21718: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21719: LD_INT 0
21721: PPUSH
// streamModeActive := false ;
21722: LD_ADDR_EXP 55
21726: PUSH
21727: LD_INT 0
21729: ST_TO_ADDR
// normalCounter := 36 ;
21730: LD_ADDR_EXP 56
21734: PUSH
21735: LD_INT 36
21737: ST_TO_ADDR
// hardcoreCounter := 18 ;
21738: LD_ADDR_EXP 57
21742: PUSH
21743: LD_INT 18
21745: ST_TO_ADDR
// sRocket := false ;
21746: LD_ADDR_EXP 60
21750: PUSH
21751: LD_INT 0
21753: ST_TO_ADDR
// sSpeed := false ;
21754: LD_ADDR_EXP 59
21758: PUSH
21759: LD_INT 0
21761: ST_TO_ADDR
// sEngine := false ;
21762: LD_ADDR_EXP 61
21766: PUSH
21767: LD_INT 0
21769: ST_TO_ADDR
// sSpec := false ;
21770: LD_ADDR_EXP 58
21774: PUSH
21775: LD_INT 0
21777: ST_TO_ADDR
// sLevel := false ;
21778: LD_ADDR_EXP 62
21782: PUSH
21783: LD_INT 0
21785: ST_TO_ADDR
// sArmoury := false ;
21786: LD_ADDR_EXP 63
21790: PUSH
21791: LD_INT 0
21793: ST_TO_ADDR
// sRadar := false ;
21794: LD_ADDR_EXP 64
21798: PUSH
21799: LD_INT 0
21801: ST_TO_ADDR
// sBunker := false ;
21802: LD_ADDR_EXP 65
21806: PUSH
21807: LD_INT 0
21809: ST_TO_ADDR
// sHack := false ;
21810: LD_ADDR_EXP 66
21814: PUSH
21815: LD_INT 0
21817: ST_TO_ADDR
// sFire := false ;
21818: LD_ADDR_EXP 67
21822: PUSH
21823: LD_INT 0
21825: ST_TO_ADDR
// sRefresh := false ;
21826: LD_ADDR_EXP 68
21830: PUSH
21831: LD_INT 0
21833: ST_TO_ADDR
// sExp := false ;
21834: LD_ADDR_EXP 69
21838: PUSH
21839: LD_INT 0
21841: ST_TO_ADDR
// sDepot := false ;
21842: LD_ADDR_EXP 70
21846: PUSH
21847: LD_INT 0
21849: ST_TO_ADDR
// sFlag := false ;
21850: LD_ADDR_EXP 71
21854: PUSH
21855: LD_INT 0
21857: ST_TO_ADDR
// sKamikadze := false ;
21858: LD_ADDR_EXP 79
21862: PUSH
21863: LD_INT 0
21865: ST_TO_ADDR
// sTroll := false ;
21866: LD_ADDR_EXP 80
21870: PUSH
21871: LD_INT 0
21873: ST_TO_ADDR
// sSlow := false ;
21874: LD_ADDR_EXP 81
21878: PUSH
21879: LD_INT 0
21881: ST_TO_ADDR
// sLack := false ;
21882: LD_ADDR_EXP 82
21886: PUSH
21887: LD_INT 0
21889: ST_TO_ADDR
// sTank := false ;
21890: LD_ADDR_EXP 84
21894: PUSH
21895: LD_INT 0
21897: ST_TO_ADDR
// sRemote := false ;
21898: LD_ADDR_EXP 85
21902: PUSH
21903: LD_INT 0
21905: ST_TO_ADDR
// sPowell := false ;
21906: LD_ADDR_EXP 86
21910: PUSH
21911: LD_INT 0
21913: ST_TO_ADDR
// sTeleport := false ;
21914: LD_ADDR_EXP 89
21918: PUSH
21919: LD_INT 0
21921: ST_TO_ADDR
// sOilTower := false ;
21922: LD_ADDR_EXP 91
21926: PUSH
21927: LD_INT 0
21929: ST_TO_ADDR
// sShovel := false ;
21930: LD_ADDR_EXP 92
21934: PUSH
21935: LD_INT 0
21937: ST_TO_ADDR
// sSheik := false ;
21938: LD_ADDR_EXP 93
21942: PUSH
21943: LD_INT 0
21945: ST_TO_ADDR
// sEarthquake := false ;
21946: LD_ADDR_EXP 95
21950: PUSH
21951: LD_INT 0
21953: ST_TO_ADDR
// sAI := false ;
21954: LD_ADDR_EXP 96
21958: PUSH
21959: LD_INT 0
21961: ST_TO_ADDR
// sCargo := false ;
21962: LD_ADDR_EXP 99
21966: PUSH
21967: LD_INT 0
21969: ST_TO_ADDR
// sDLaser := false ;
21970: LD_ADDR_EXP 100
21974: PUSH
21975: LD_INT 0
21977: ST_TO_ADDR
// sExchange := false ;
21978: LD_ADDR_EXP 101
21982: PUSH
21983: LD_INT 0
21985: ST_TO_ADDR
// sFac := false ;
21986: LD_ADDR_EXP 102
21990: PUSH
21991: LD_INT 0
21993: ST_TO_ADDR
// sPower := false ;
21994: LD_ADDR_EXP 103
21998: PUSH
21999: LD_INT 0
22001: ST_TO_ADDR
// sRandom := false ;
22002: LD_ADDR_EXP 104
22006: PUSH
22007: LD_INT 0
22009: ST_TO_ADDR
// sShield := false ;
22010: LD_ADDR_EXP 105
22014: PUSH
22015: LD_INT 0
22017: ST_TO_ADDR
// sTime := false ;
22018: LD_ADDR_EXP 106
22022: PUSH
22023: LD_INT 0
22025: ST_TO_ADDR
// sTools := false ;
22026: LD_ADDR_EXP 107
22030: PUSH
22031: LD_INT 0
22033: ST_TO_ADDR
// sSold := false ;
22034: LD_ADDR_EXP 72
22038: PUSH
22039: LD_INT 0
22041: ST_TO_ADDR
// sDiff := false ;
22042: LD_ADDR_EXP 73
22046: PUSH
22047: LD_INT 0
22049: ST_TO_ADDR
// sFog := false ;
22050: LD_ADDR_EXP 76
22054: PUSH
22055: LD_INT 0
22057: ST_TO_ADDR
// sReset := false ;
22058: LD_ADDR_EXP 77
22062: PUSH
22063: LD_INT 0
22065: ST_TO_ADDR
// sSun := false ;
22066: LD_ADDR_EXP 78
22070: PUSH
22071: LD_INT 0
22073: ST_TO_ADDR
// sTiger := false ;
22074: LD_ADDR_EXP 74
22078: PUSH
22079: LD_INT 0
22081: ST_TO_ADDR
// sBomb := false ;
22082: LD_ADDR_EXP 75
22086: PUSH
22087: LD_INT 0
22089: ST_TO_ADDR
// sWound := false ;
22090: LD_ADDR_EXP 83
22094: PUSH
22095: LD_INT 0
22097: ST_TO_ADDR
// sBetray := false ;
22098: LD_ADDR_EXP 87
22102: PUSH
22103: LD_INT 0
22105: ST_TO_ADDR
// sContamin := false ;
22106: LD_ADDR_EXP 88
22110: PUSH
22111: LD_INT 0
22113: ST_TO_ADDR
// sOil := false ;
22114: LD_ADDR_EXP 90
22118: PUSH
22119: LD_INT 0
22121: ST_TO_ADDR
// sStu := false ;
22122: LD_ADDR_EXP 94
22126: PUSH
22127: LD_INT 0
22129: ST_TO_ADDR
// sBazooka := false ;
22130: LD_ADDR_EXP 97
22134: PUSH
22135: LD_INT 0
22137: ST_TO_ADDR
// sMortar := false ;
22138: LD_ADDR_EXP 98
22142: PUSH
22143: LD_INT 0
22145: ST_TO_ADDR
// sRanger := false ;
22146: LD_ADDR_EXP 108
22150: PUSH
22151: LD_INT 0
22153: ST_TO_ADDR
// sComputer := false ;
22154: LD_ADDR_EXP 109
22158: PUSH
22159: LD_INT 0
22161: ST_TO_ADDR
// s30 := false ;
22162: LD_ADDR_EXP 110
22166: PUSH
22167: LD_INT 0
22169: ST_TO_ADDR
// s60 := false ;
22170: LD_ADDR_EXP 111
22174: PUSH
22175: LD_INT 0
22177: ST_TO_ADDR
// end ;
22178: LD_VAR 0 1
22182: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22183: LD_INT 0
22185: PPUSH
22186: PPUSH
22187: PPUSH
22188: PPUSH
22189: PPUSH
22190: PPUSH
22191: PPUSH
// result := [ ] ;
22192: LD_ADDR_VAR 0 2
22196: PUSH
22197: EMPTY
22198: ST_TO_ADDR
// if campaign_id = 1 then
22199: LD_OWVAR 69
22203: PUSH
22204: LD_INT 1
22206: EQUAL
22207: IFFALSE 25373
// begin case mission_number of 1 :
22209: LD_OWVAR 70
22213: PUSH
22214: LD_INT 1
22216: DOUBLE
22217: EQUAL
22218: IFTRUE 22222
22220: GO 22298
22222: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22223: LD_ADDR_VAR 0 2
22227: PUSH
22228: LD_INT 2
22230: PUSH
22231: LD_INT 4
22233: PUSH
22234: LD_INT 11
22236: PUSH
22237: LD_INT 12
22239: PUSH
22240: LD_INT 15
22242: PUSH
22243: LD_INT 16
22245: PUSH
22246: LD_INT 22
22248: PUSH
22249: LD_INT 23
22251: PUSH
22252: LD_INT 26
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 101
22268: PUSH
22269: LD_INT 102
22271: PUSH
22272: LD_INT 106
22274: PUSH
22275: LD_INT 116
22277: PUSH
22278: LD_INT 117
22280: PUSH
22281: LD_INT 118
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: ST_TO_ADDR
22296: GO 25371
22298: LD_INT 2
22300: DOUBLE
22301: EQUAL
22302: IFTRUE 22306
22304: GO 22390
22306: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22307: LD_ADDR_VAR 0 2
22311: PUSH
22312: LD_INT 2
22314: PUSH
22315: LD_INT 4
22317: PUSH
22318: LD_INT 11
22320: PUSH
22321: LD_INT 12
22323: PUSH
22324: LD_INT 15
22326: PUSH
22327: LD_INT 16
22329: PUSH
22330: LD_INT 22
22332: PUSH
22333: LD_INT 23
22335: PUSH
22336: LD_INT 26
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: PUSH
22350: LD_INT 101
22352: PUSH
22353: LD_INT 102
22355: PUSH
22356: LD_INT 105
22358: PUSH
22359: LD_INT 106
22361: PUSH
22362: LD_INT 108
22364: PUSH
22365: LD_INT 116
22367: PUSH
22368: LD_INT 117
22370: PUSH
22371: LD_INT 118
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: ST_TO_ADDR
22388: GO 25371
22390: LD_INT 3
22392: DOUBLE
22393: EQUAL
22394: IFTRUE 22398
22396: GO 22486
22398: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22399: LD_ADDR_VAR 0 2
22403: PUSH
22404: LD_INT 2
22406: PUSH
22407: LD_INT 4
22409: PUSH
22410: LD_INT 5
22412: PUSH
22413: LD_INT 11
22415: PUSH
22416: LD_INT 12
22418: PUSH
22419: LD_INT 15
22421: PUSH
22422: LD_INT 16
22424: PUSH
22425: LD_INT 22
22427: PUSH
22428: LD_INT 26
22430: PUSH
22431: LD_INT 36
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 101
22448: PUSH
22449: LD_INT 102
22451: PUSH
22452: LD_INT 105
22454: PUSH
22455: LD_INT 106
22457: PUSH
22458: LD_INT 108
22460: PUSH
22461: LD_INT 116
22463: PUSH
22464: LD_INT 117
22466: PUSH
22467: LD_INT 118
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: ST_TO_ADDR
22484: GO 25371
22486: LD_INT 4
22488: DOUBLE
22489: EQUAL
22490: IFTRUE 22494
22492: GO 22590
22494: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22495: LD_ADDR_VAR 0 2
22499: PUSH
22500: LD_INT 2
22502: PUSH
22503: LD_INT 4
22505: PUSH
22506: LD_INT 5
22508: PUSH
22509: LD_INT 8
22511: PUSH
22512: LD_INT 11
22514: PUSH
22515: LD_INT 12
22517: PUSH
22518: LD_INT 15
22520: PUSH
22521: LD_INT 16
22523: PUSH
22524: LD_INT 22
22526: PUSH
22527: LD_INT 23
22529: PUSH
22530: LD_INT 26
22532: PUSH
22533: LD_INT 36
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 101
22552: PUSH
22553: LD_INT 102
22555: PUSH
22556: LD_INT 105
22558: PUSH
22559: LD_INT 106
22561: PUSH
22562: LD_INT 108
22564: PUSH
22565: LD_INT 116
22567: PUSH
22568: LD_INT 117
22570: PUSH
22571: LD_INT 118
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: ST_TO_ADDR
22588: GO 25371
22590: LD_INT 5
22592: DOUBLE
22593: EQUAL
22594: IFTRUE 22598
22596: GO 22710
22598: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22599: LD_ADDR_VAR 0 2
22603: PUSH
22604: LD_INT 2
22606: PUSH
22607: LD_INT 4
22609: PUSH
22610: LD_INT 5
22612: PUSH
22613: LD_INT 6
22615: PUSH
22616: LD_INT 8
22618: PUSH
22619: LD_INT 11
22621: PUSH
22622: LD_INT 12
22624: PUSH
22625: LD_INT 15
22627: PUSH
22628: LD_INT 16
22630: PUSH
22631: LD_INT 22
22633: PUSH
22634: LD_INT 23
22636: PUSH
22637: LD_INT 25
22639: PUSH
22640: LD_INT 26
22642: PUSH
22643: LD_INT 36
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 101
22664: PUSH
22665: LD_INT 102
22667: PUSH
22668: LD_INT 105
22670: PUSH
22671: LD_INT 106
22673: PUSH
22674: LD_INT 108
22676: PUSH
22677: LD_INT 109
22679: PUSH
22680: LD_INT 112
22682: PUSH
22683: LD_INT 116
22685: PUSH
22686: LD_INT 117
22688: PUSH
22689: LD_INT 118
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: ST_TO_ADDR
22708: GO 25371
22710: LD_INT 6
22712: DOUBLE
22713: EQUAL
22714: IFTRUE 22718
22716: GO 22850
22718: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22719: LD_ADDR_VAR 0 2
22723: PUSH
22724: LD_INT 2
22726: PUSH
22727: LD_INT 4
22729: PUSH
22730: LD_INT 5
22732: PUSH
22733: LD_INT 6
22735: PUSH
22736: LD_INT 8
22738: PUSH
22739: LD_INT 11
22741: PUSH
22742: LD_INT 12
22744: PUSH
22745: LD_INT 15
22747: PUSH
22748: LD_INT 16
22750: PUSH
22751: LD_INT 20
22753: PUSH
22754: LD_INT 21
22756: PUSH
22757: LD_INT 22
22759: PUSH
22760: LD_INT 23
22762: PUSH
22763: LD_INT 25
22765: PUSH
22766: LD_INT 26
22768: PUSH
22769: LD_INT 30
22771: PUSH
22772: LD_INT 31
22774: PUSH
22775: LD_INT 32
22777: PUSH
22778: LD_INT 36
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 101
22804: PUSH
22805: LD_INT 102
22807: PUSH
22808: LD_INT 105
22810: PUSH
22811: LD_INT 106
22813: PUSH
22814: LD_INT 108
22816: PUSH
22817: LD_INT 109
22819: PUSH
22820: LD_INT 112
22822: PUSH
22823: LD_INT 116
22825: PUSH
22826: LD_INT 117
22828: PUSH
22829: LD_INT 118
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: ST_TO_ADDR
22848: GO 25371
22850: LD_INT 7
22852: DOUBLE
22853: EQUAL
22854: IFTRUE 22858
22856: GO 22970
22858: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22859: LD_ADDR_VAR 0 2
22863: PUSH
22864: LD_INT 2
22866: PUSH
22867: LD_INT 4
22869: PUSH
22870: LD_INT 5
22872: PUSH
22873: LD_INT 7
22875: PUSH
22876: LD_INT 11
22878: PUSH
22879: LD_INT 12
22881: PUSH
22882: LD_INT 15
22884: PUSH
22885: LD_INT 16
22887: PUSH
22888: LD_INT 20
22890: PUSH
22891: LD_INT 21
22893: PUSH
22894: LD_INT 22
22896: PUSH
22897: LD_INT 23
22899: PUSH
22900: LD_INT 25
22902: PUSH
22903: LD_INT 26
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 101
22924: PUSH
22925: LD_INT 102
22927: PUSH
22928: LD_INT 103
22930: PUSH
22931: LD_INT 105
22933: PUSH
22934: LD_INT 106
22936: PUSH
22937: LD_INT 108
22939: PUSH
22940: LD_INT 112
22942: PUSH
22943: LD_INT 116
22945: PUSH
22946: LD_INT 117
22948: PUSH
22949: LD_INT 118
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: ST_TO_ADDR
22968: GO 25371
22970: LD_INT 8
22972: DOUBLE
22973: EQUAL
22974: IFTRUE 22978
22976: GO 23118
22978: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22979: LD_ADDR_VAR 0 2
22983: PUSH
22984: LD_INT 2
22986: PUSH
22987: LD_INT 4
22989: PUSH
22990: LD_INT 5
22992: PUSH
22993: LD_INT 6
22995: PUSH
22996: LD_INT 7
22998: PUSH
22999: LD_INT 8
23001: PUSH
23002: LD_INT 11
23004: PUSH
23005: LD_INT 12
23007: PUSH
23008: LD_INT 15
23010: PUSH
23011: LD_INT 16
23013: PUSH
23014: LD_INT 20
23016: PUSH
23017: LD_INT 21
23019: PUSH
23020: LD_INT 22
23022: PUSH
23023: LD_INT 23
23025: PUSH
23026: LD_INT 25
23028: PUSH
23029: LD_INT 26
23031: PUSH
23032: LD_INT 30
23034: PUSH
23035: LD_INT 31
23037: PUSH
23038: LD_INT 32
23040: PUSH
23041: LD_INT 36
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 101
23068: PUSH
23069: LD_INT 102
23071: PUSH
23072: LD_INT 103
23074: PUSH
23075: LD_INT 105
23077: PUSH
23078: LD_INT 106
23080: PUSH
23081: LD_INT 108
23083: PUSH
23084: LD_INT 109
23086: PUSH
23087: LD_INT 112
23089: PUSH
23090: LD_INT 116
23092: PUSH
23093: LD_INT 117
23095: PUSH
23096: LD_INT 118
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: ST_TO_ADDR
23116: GO 25371
23118: LD_INT 9
23120: DOUBLE
23121: EQUAL
23122: IFTRUE 23126
23124: GO 23274
23126: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23127: LD_ADDR_VAR 0 2
23131: PUSH
23132: LD_INT 2
23134: PUSH
23135: LD_INT 4
23137: PUSH
23138: LD_INT 5
23140: PUSH
23141: LD_INT 6
23143: PUSH
23144: LD_INT 7
23146: PUSH
23147: LD_INT 8
23149: PUSH
23150: LD_INT 11
23152: PUSH
23153: LD_INT 12
23155: PUSH
23156: LD_INT 15
23158: PUSH
23159: LD_INT 16
23161: PUSH
23162: LD_INT 20
23164: PUSH
23165: LD_INT 21
23167: PUSH
23168: LD_INT 22
23170: PUSH
23171: LD_INT 23
23173: PUSH
23174: LD_INT 25
23176: PUSH
23177: LD_INT 26
23179: PUSH
23180: LD_INT 28
23182: PUSH
23183: LD_INT 30
23185: PUSH
23186: LD_INT 31
23188: PUSH
23189: LD_INT 32
23191: PUSH
23192: LD_INT 36
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 101
23220: PUSH
23221: LD_INT 102
23223: PUSH
23224: LD_INT 103
23226: PUSH
23227: LD_INT 105
23229: PUSH
23230: LD_INT 106
23232: PUSH
23233: LD_INT 108
23235: PUSH
23236: LD_INT 109
23238: PUSH
23239: LD_INT 112
23241: PUSH
23242: LD_INT 114
23244: PUSH
23245: LD_INT 116
23247: PUSH
23248: LD_INT 117
23250: PUSH
23251: LD_INT 118
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: ST_TO_ADDR
23272: GO 25371
23274: LD_INT 10
23276: DOUBLE
23277: EQUAL
23278: IFTRUE 23282
23280: GO 23478
23282: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23283: LD_ADDR_VAR 0 2
23287: PUSH
23288: LD_INT 2
23290: PUSH
23291: LD_INT 4
23293: PUSH
23294: LD_INT 5
23296: PUSH
23297: LD_INT 6
23299: PUSH
23300: LD_INT 7
23302: PUSH
23303: LD_INT 8
23305: PUSH
23306: LD_INT 9
23308: PUSH
23309: LD_INT 10
23311: PUSH
23312: LD_INT 11
23314: PUSH
23315: LD_INT 12
23317: PUSH
23318: LD_INT 13
23320: PUSH
23321: LD_INT 14
23323: PUSH
23324: LD_INT 15
23326: PUSH
23327: LD_INT 16
23329: PUSH
23330: LD_INT 17
23332: PUSH
23333: LD_INT 18
23335: PUSH
23336: LD_INT 19
23338: PUSH
23339: LD_INT 20
23341: PUSH
23342: LD_INT 21
23344: PUSH
23345: LD_INT 22
23347: PUSH
23348: LD_INT 23
23350: PUSH
23351: LD_INT 24
23353: PUSH
23354: LD_INT 25
23356: PUSH
23357: LD_INT 26
23359: PUSH
23360: LD_INT 28
23362: PUSH
23363: LD_INT 30
23365: PUSH
23366: LD_INT 31
23368: PUSH
23369: LD_INT 32
23371: PUSH
23372: LD_INT 36
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 101
23408: PUSH
23409: LD_INT 102
23411: PUSH
23412: LD_INT 103
23414: PUSH
23415: LD_INT 104
23417: PUSH
23418: LD_INT 105
23420: PUSH
23421: LD_INT 106
23423: PUSH
23424: LD_INT 107
23426: PUSH
23427: LD_INT 108
23429: PUSH
23430: LD_INT 109
23432: PUSH
23433: LD_INT 110
23435: PUSH
23436: LD_INT 111
23438: PUSH
23439: LD_INT 112
23441: PUSH
23442: LD_INT 114
23444: PUSH
23445: LD_INT 116
23447: PUSH
23448: LD_INT 117
23450: PUSH
23451: LD_INT 118
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: ST_TO_ADDR
23476: GO 25371
23478: LD_INT 11
23480: DOUBLE
23481: EQUAL
23482: IFTRUE 23486
23484: GO 23690
23486: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23487: LD_ADDR_VAR 0 2
23491: PUSH
23492: LD_INT 2
23494: PUSH
23495: LD_INT 3
23497: PUSH
23498: LD_INT 4
23500: PUSH
23501: LD_INT 5
23503: PUSH
23504: LD_INT 6
23506: PUSH
23507: LD_INT 7
23509: PUSH
23510: LD_INT 8
23512: PUSH
23513: LD_INT 9
23515: PUSH
23516: LD_INT 10
23518: PUSH
23519: LD_INT 11
23521: PUSH
23522: LD_INT 12
23524: PUSH
23525: LD_INT 13
23527: PUSH
23528: LD_INT 14
23530: PUSH
23531: LD_INT 15
23533: PUSH
23534: LD_INT 16
23536: PUSH
23537: LD_INT 17
23539: PUSH
23540: LD_INT 18
23542: PUSH
23543: LD_INT 19
23545: PUSH
23546: LD_INT 20
23548: PUSH
23549: LD_INT 21
23551: PUSH
23552: LD_INT 22
23554: PUSH
23555: LD_INT 23
23557: PUSH
23558: LD_INT 24
23560: PUSH
23561: LD_INT 25
23563: PUSH
23564: LD_INT 26
23566: PUSH
23567: LD_INT 28
23569: PUSH
23570: LD_INT 30
23572: PUSH
23573: LD_INT 31
23575: PUSH
23576: LD_INT 32
23578: PUSH
23579: LD_INT 34
23581: PUSH
23582: LD_INT 36
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: PUSH
23618: LD_INT 101
23620: PUSH
23621: LD_INT 102
23623: PUSH
23624: LD_INT 103
23626: PUSH
23627: LD_INT 104
23629: PUSH
23630: LD_INT 105
23632: PUSH
23633: LD_INT 106
23635: PUSH
23636: LD_INT 107
23638: PUSH
23639: LD_INT 108
23641: PUSH
23642: LD_INT 109
23644: PUSH
23645: LD_INT 110
23647: PUSH
23648: LD_INT 111
23650: PUSH
23651: LD_INT 112
23653: PUSH
23654: LD_INT 114
23656: PUSH
23657: LD_INT 116
23659: PUSH
23660: LD_INT 117
23662: PUSH
23663: LD_INT 118
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: ST_TO_ADDR
23688: GO 25371
23690: LD_INT 12
23692: DOUBLE
23693: EQUAL
23694: IFTRUE 23698
23696: GO 23918
23698: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23699: LD_ADDR_VAR 0 2
23703: PUSH
23704: LD_INT 1
23706: PUSH
23707: LD_INT 2
23709: PUSH
23710: LD_INT 3
23712: PUSH
23713: LD_INT 4
23715: PUSH
23716: LD_INT 5
23718: PUSH
23719: LD_INT 6
23721: PUSH
23722: LD_INT 7
23724: PUSH
23725: LD_INT 8
23727: PUSH
23728: LD_INT 9
23730: PUSH
23731: LD_INT 10
23733: PUSH
23734: LD_INT 11
23736: PUSH
23737: LD_INT 12
23739: PUSH
23740: LD_INT 13
23742: PUSH
23743: LD_INT 14
23745: PUSH
23746: LD_INT 15
23748: PUSH
23749: LD_INT 16
23751: PUSH
23752: LD_INT 17
23754: PUSH
23755: LD_INT 18
23757: PUSH
23758: LD_INT 19
23760: PUSH
23761: LD_INT 20
23763: PUSH
23764: LD_INT 21
23766: PUSH
23767: LD_INT 22
23769: PUSH
23770: LD_INT 23
23772: PUSH
23773: LD_INT 24
23775: PUSH
23776: LD_INT 25
23778: PUSH
23779: LD_INT 26
23781: PUSH
23782: LD_INT 27
23784: PUSH
23785: LD_INT 28
23787: PUSH
23788: LD_INT 30
23790: PUSH
23791: LD_INT 31
23793: PUSH
23794: LD_INT 32
23796: PUSH
23797: LD_INT 33
23799: PUSH
23800: LD_INT 34
23802: PUSH
23803: LD_INT 36
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 101
23844: PUSH
23845: LD_INT 102
23847: PUSH
23848: LD_INT 103
23850: PUSH
23851: LD_INT 104
23853: PUSH
23854: LD_INT 105
23856: PUSH
23857: LD_INT 106
23859: PUSH
23860: LD_INT 107
23862: PUSH
23863: LD_INT 108
23865: PUSH
23866: LD_INT 109
23868: PUSH
23869: LD_INT 110
23871: PUSH
23872: LD_INT 111
23874: PUSH
23875: LD_INT 112
23877: PUSH
23878: LD_INT 113
23880: PUSH
23881: LD_INT 114
23883: PUSH
23884: LD_INT 116
23886: PUSH
23887: LD_INT 117
23889: PUSH
23890: LD_INT 118
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: ST_TO_ADDR
23916: GO 25371
23918: LD_INT 13
23920: DOUBLE
23921: EQUAL
23922: IFTRUE 23926
23924: GO 24134
23926: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23927: LD_ADDR_VAR 0 2
23931: PUSH
23932: LD_INT 1
23934: PUSH
23935: LD_INT 2
23937: PUSH
23938: LD_INT 3
23940: PUSH
23941: LD_INT 4
23943: PUSH
23944: LD_INT 5
23946: PUSH
23947: LD_INT 8
23949: PUSH
23950: LD_INT 9
23952: PUSH
23953: LD_INT 10
23955: PUSH
23956: LD_INT 11
23958: PUSH
23959: LD_INT 12
23961: PUSH
23962: LD_INT 14
23964: PUSH
23965: LD_INT 15
23967: PUSH
23968: LD_INT 16
23970: PUSH
23971: LD_INT 17
23973: PUSH
23974: LD_INT 18
23976: PUSH
23977: LD_INT 19
23979: PUSH
23980: LD_INT 20
23982: PUSH
23983: LD_INT 21
23985: PUSH
23986: LD_INT 22
23988: PUSH
23989: LD_INT 23
23991: PUSH
23992: LD_INT 24
23994: PUSH
23995: LD_INT 25
23997: PUSH
23998: LD_INT 26
24000: PUSH
24001: LD_INT 27
24003: PUSH
24004: LD_INT 28
24006: PUSH
24007: LD_INT 30
24009: PUSH
24010: LD_INT 31
24012: PUSH
24013: LD_INT 32
24015: PUSH
24016: LD_INT 33
24018: PUSH
24019: LD_INT 34
24021: PUSH
24022: LD_INT 36
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 101
24060: PUSH
24061: LD_INT 102
24063: PUSH
24064: LD_INT 103
24066: PUSH
24067: LD_INT 104
24069: PUSH
24070: LD_INT 105
24072: PUSH
24073: LD_INT 106
24075: PUSH
24076: LD_INT 107
24078: PUSH
24079: LD_INT 108
24081: PUSH
24082: LD_INT 109
24084: PUSH
24085: LD_INT 110
24087: PUSH
24088: LD_INT 111
24090: PUSH
24091: LD_INT 112
24093: PUSH
24094: LD_INT 113
24096: PUSH
24097: LD_INT 114
24099: PUSH
24100: LD_INT 116
24102: PUSH
24103: LD_INT 117
24105: PUSH
24106: LD_INT 118
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: ST_TO_ADDR
24132: GO 25371
24134: LD_INT 14
24136: DOUBLE
24137: EQUAL
24138: IFTRUE 24142
24140: GO 24366
24142: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24143: LD_ADDR_VAR 0 2
24147: PUSH
24148: LD_INT 1
24150: PUSH
24151: LD_INT 2
24153: PUSH
24154: LD_INT 3
24156: PUSH
24157: LD_INT 4
24159: PUSH
24160: LD_INT 5
24162: PUSH
24163: LD_INT 6
24165: PUSH
24166: LD_INT 7
24168: PUSH
24169: LD_INT 8
24171: PUSH
24172: LD_INT 9
24174: PUSH
24175: LD_INT 10
24177: PUSH
24178: LD_INT 11
24180: PUSH
24181: LD_INT 12
24183: PUSH
24184: LD_INT 13
24186: PUSH
24187: LD_INT 14
24189: PUSH
24190: LD_INT 15
24192: PUSH
24193: LD_INT 16
24195: PUSH
24196: LD_INT 17
24198: PUSH
24199: LD_INT 18
24201: PUSH
24202: LD_INT 19
24204: PUSH
24205: LD_INT 20
24207: PUSH
24208: LD_INT 21
24210: PUSH
24211: LD_INT 22
24213: PUSH
24214: LD_INT 23
24216: PUSH
24217: LD_INT 24
24219: PUSH
24220: LD_INT 25
24222: PUSH
24223: LD_INT 26
24225: PUSH
24226: LD_INT 27
24228: PUSH
24229: LD_INT 28
24231: PUSH
24232: LD_INT 29
24234: PUSH
24235: LD_INT 30
24237: PUSH
24238: LD_INT 31
24240: PUSH
24241: LD_INT 32
24243: PUSH
24244: LD_INT 33
24246: PUSH
24247: LD_INT 34
24249: PUSH
24250: LD_INT 36
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 101
24292: PUSH
24293: LD_INT 102
24295: PUSH
24296: LD_INT 103
24298: PUSH
24299: LD_INT 104
24301: PUSH
24302: LD_INT 105
24304: PUSH
24305: LD_INT 106
24307: PUSH
24308: LD_INT 107
24310: PUSH
24311: LD_INT 108
24313: PUSH
24314: LD_INT 109
24316: PUSH
24317: LD_INT 110
24319: PUSH
24320: LD_INT 111
24322: PUSH
24323: LD_INT 112
24325: PUSH
24326: LD_INT 113
24328: PUSH
24329: LD_INT 114
24331: PUSH
24332: LD_INT 116
24334: PUSH
24335: LD_INT 117
24337: PUSH
24338: LD_INT 118
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: ST_TO_ADDR
24364: GO 25371
24366: LD_INT 15
24368: DOUBLE
24369: EQUAL
24370: IFTRUE 24374
24372: GO 24598
24374: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24375: LD_ADDR_VAR 0 2
24379: PUSH
24380: LD_INT 1
24382: PUSH
24383: LD_INT 2
24385: PUSH
24386: LD_INT 3
24388: PUSH
24389: LD_INT 4
24391: PUSH
24392: LD_INT 5
24394: PUSH
24395: LD_INT 6
24397: PUSH
24398: LD_INT 7
24400: PUSH
24401: LD_INT 8
24403: PUSH
24404: LD_INT 9
24406: PUSH
24407: LD_INT 10
24409: PUSH
24410: LD_INT 11
24412: PUSH
24413: LD_INT 12
24415: PUSH
24416: LD_INT 13
24418: PUSH
24419: LD_INT 14
24421: PUSH
24422: LD_INT 15
24424: PUSH
24425: LD_INT 16
24427: PUSH
24428: LD_INT 17
24430: PUSH
24431: LD_INT 18
24433: PUSH
24434: LD_INT 19
24436: PUSH
24437: LD_INT 20
24439: PUSH
24440: LD_INT 21
24442: PUSH
24443: LD_INT 22
24445: PUSH
24446: LD_INT 23
24448: PUSH
24449: LD_INT 24
24451: PUSH
24452: LD_INT 25
24454: PUSH
24455: LD_INT 26
24457: PUSH
24458: LD_INT 27
24460: PUSH
24461: LD_INT 28
24463: PUSH
24464: LD_INT 29
24466: PUSH
24467: LD_INT 30
24469: PUSH
24470: LD_INT 31
24472: PUSH
24473: LD_INT 32
24475: PUSH
24476: LD_INT 33
24478: PUSH
24479: LD_INT 34
24481: PUSH
24482: LD_INT 36
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 101
24524: PUSH
24525: LD_INT 102
24527: PUSH
24528: LD_INT 103
24530: PUSH
24531: LD_INT 104
24533: PUSH
24534: LD_INT 105
24536: PUSH
24537: LD_INT 106
24539: PUSH
24540: LD_INT 107
24542: PUSH
24543: LD_INT 108
24545: PUSH
24546: LD_INT 109
24548: PUSH
24549: LD_INT 110
24551: PUSH
24552: LD_INT 111
24554: PUSH
24555: LD_INT 112
24557: PUSH
24558: LD_INT 113
24560: PUSH
24561: LD_INT 114
24563: PUSH
24564: LD_INT 116
24566: PUSH
24567: LD_INT 117
24569: PUSH
24570: LD_INT 118
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: ST_TO_ADDR
24596: GO 25371
24598: LD_INT 16
24600: DOUBLE
24601: EQUAL
24602: IFTRUE 24606
24604: GO 24742
24606: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24607: LD_ADDR_VAR 0 2
24611: PUSH
24612: LD_INT 2
24614: PUSH
24615: LD_INT 4
24617: PUSH
24618: LD_INT 5
24620: PUSH
24621: LD_INT 7
24623: PUSH
24624: LD_INT 11
24626: PUSH
24627: LD_INT 12
24629: PUSH
24630: LD_INT 15
24632: PUSH
24633: LD_INT 16
24635: PUSH
24636: LD_INT 20
24638: PUSH
24639: LD_INT 21
24641: PUSH
24642: LD_INT 22
24644: PUSH
24645: LD_INT 23
24647: PUSH
24648: LD_INT 25
24650: PUSH
24651: LD_INT 26
24653: PUSH
24654: LD_INT 30
24656: PUSH
24657: LD_INT 31
24659: PUSH
24660: LD_INT 32
24662: PUSH
24663: LD_INT 33
24665: PUSH
24666: LD_INT 34
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 101
24692: PUSH
24693: LD_INT 102
24695: PUSH
24696: LD_INT 103
24698: PUSH
24699: LD_INT 106
24701: PUSH
24702: LD_INT 108
24704: PUSH
24705: LD_INT 112
24707: PUSH
24708: LD_INT 113
24710: PUSH
24711: LD_INT 114
24713: PUSH
24714: LD_INT 116
24716: PUSH
24717: LD_INT 117
24719: PUSH
24720: LD_INT 118
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: ST_TO_ADDR
24740: GO 25371
24742: LD_INT 17
24744: DOUBLE
24745: EQUAL
24746: IFTRUE 24750
24748: GO 24974
24750: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24751: LD_ADDR_VAR 0 2
24755: PUSH
24756: LD_INT 1
24758: PUSH
24759: LD_INT 2
24761: PUSH
24762: LD_INT 3
24764: PUSH
24765: LD_INT 4
24767: PUSH
24768: LD_INT 5
24770: PUSH
24771: LD_INT 6
24773: PUSH
24774: LD_INT 7
24776: PUSH
24777: LD_INT 8
24779: PUSH
24780: LD_INT 9
24782: PUSH
24783: LD_INT 10
24785: PUSH
24786: LD_INT 11
24788: PUSH
24789: LD_INT 12
24791: PUSH
24792: LD_INT 13
24794: PUSH
24795: LD_INT 14
24797: PUSH
24798: LD_INT 15
24800: PUSH
24801: LD_INT 16
24803: PUSH
24804: LD_INT 17
24806: PUSH
24807: LD_INT 18
24809: PUSH
24810: LD_INT 19
24812: PUSH
24813: LD_INT 20
24815: PUSH
24816: LD_INT 21
24818: PUSH
24819: LD_INT 22
24821: PUSH
24822: LD_INT 23
24824: PUSH
24825: LD_INT 24
24827: PUSH
24828: LD_INT 25
24830: PUSH
24831: LD_INT 26
24833: PUSH
24834: LD_INT 27
24836: PUSH
24837: LD_INT 28
24839: PUSH
24840: LD_INT 29
24842: PUSH
24843: LD_INT 30
24845: PUSH
24846: LD_INT 31
24848: PUSH
24849: LD_INT 32
24851: PUSH
24852: LD_INT 33
24854: PUSH
24855: LD_INT 34
24857: PUSH
24858: LD_INT 36
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: PUSH
24898: LD_INT 101
24900: PUSH
24901: LD_INT 102
24903: PUSH
24904: LD_INT 103
24906: PUSH
24907: LD_INT 104
24909: PUSH
24910: LD_INT 105
24912: PUSH
24913: LD_INT 106
24915: PUSH
24916: LD_INT 107
24918: PUSH
24919: LD_INT 108
24921: PUSH
24922: LD_INT 109
24924: PUSH
24925: LD_INT 110
24927: PUSH
24928: LD_INT 111
24930: PUSH
24931: LD_INT 112
24933: PUSH
24934: LD_INT 113
24936: PUSH
24937: LD_INT 114
24939: PUSH
24940: LD_INT 116
24942: PUSH
24943: LD_INT 117
24945: PUSH
24946: LD_INT 118
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: ST_TO_ADDR
24972: GO 25371
24974: LD_INT 18
24976: DOUBLE
24977: EQUAL
24978: IFTRUE 24982
24980: GO 25130
24982: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24983: LD_ADDR_VAR 0 2
24987: PUSH
24988: LD_INT 2
24990: PUSH
24991: LD_INT 4
24993: PUSH
24994: LD_INT 5
24996: PUSH
24997: LD_INT 7
24999: PUSH
25000: LD_INT 11
25002: PUSH
25003: LD_INT 12
25005: PUSH
25006: LD_INT 15
25008: PUSH
25009: LD_INT 16
25011: PUSH
25012: LD_INT 20
25014: PUSH
25015: LD_INT 21
25017: PUSH
25018: LD_INT 22
25020: PUSH
25021: LD_INT 23
25023: PUSH
25024: LD_INT 25
25026: PUSH
25027: LD_INT 26
25029: PUSH
25030: LD_INT 30
25032: PUSH
25033: LD_INT 31
25035: PUSH
25036: LD_INT 32
25038: PUSH
25039: LD_INT 33
25041: PUSH
25042: LD_INT 34
25044: PUSH
25045: LD_INT 35
25047: PUSH
25048: LD_INT 36
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 101
25076: PUSH
25077: LD_INT 102
25079: PUSH
25080: LD_INT 103
25082: PUSH
25083: LD_INT 106
25085: PUSH
25086: LD_INT 108
25088: PUSH
25089: LD_INT 112
25091: PUSH
25092: LD_INT 113
25094: PUSH
25095: LD_INT 114
25097: PUSH
25098: LD_INT 115
25100: PUSH
25101: LD_INT 116
25103: PUSH
25104: LD_INT 117
25106: PUSH
25107: LD_INT 118
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: ST_TO_ADDR
25128: GO 25371
25130: LD_INT 19
25132: DOUBLE
25133: EQUAL
25134: IFTRUE 25138
25136: GO 25370
25138: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25139: LD_ADDR_VAR 0 2
25143: PUSH
25144: LD_INT 1
25146: PUSH
25147: LD_INT 2
25149: PUSH
25150: LD_INT 3
25152: PUSH
25153: LD_INT 4
25155: PUSH
25156: LD_INT 5
25158: PUSH
25159: LD_INT 6
25161: PUSH
25162: LD_INT 7
25164: PUSH
25165: LD_INT 8
25167: PUSH
25168: LD_INT 9
25170: PUSH
25171: LD_INT 10
25173: PUSH
25174: LD_INT 11
25176: PUSH
25177: LD_INT 12
25179: PUSH
25180: LD_INT 13
25182: PUSH
25183: LD_INT 14
25185: PUSH
25186: LD_INT 15
25188: PUSH
25189: LD_INT 16
25191: PUSH
25192: LD_INT 17
25194: PUSH
25195: LD_INT 18
25197: PUSH
25198: LD_INT 19
25200: PUSH
25201: LD_INT 20
25203: PUSH
25204: LD_INT 21
25206: PUSH
25207: LD_INT 22
25209: PUSH
25210: LD_INT 23
25212: PUSH
25213: LD_INT 24
25215: PUSH
25216: LD_INT 25
25218: PUSH
25219: LD_INT 26
25221: PUSH
25222: LD_INT 27
25224: PUSH
25225: LD_INT 28
25227: PUSH
25228: LD_INT 29
25230: PUSH
25231: LD_INT 30
25233: PUSH
25234: LD_INT 31
25236: PUSH
25237: LD_INT 32
25239: PUSH
25240: LD_INT 33
25242: PUSH
25243: LD_INT 34
25245: PUSH
25246: LD_INT 35
25248: PUSH
25249: LD_INT 36
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 101
25292: PUSH
25293: LD_INT 102
25295: PUSH
25296: LD_INT 103
25298: PUSH
25299: LD_INT 104
25301: PUSH
25302: LD_INT 105
25304: PUSH
25305: LD_INT 106
25307: PUSH
25308: LD_INT 107
25310: PUSH
25311: LD_INT 108
25313: PUSH
25314: LD_INT 109
25316: PUSH
25317: LD_INT 110
25319: PUSH
25320: LD_INT 111
25322: PUSH
25323: LD_INT 112
25325: PUSH
25326: LD_INT 113
25328: PUSH
25329: LD_INT 114
25331: PUSH
25332: LD_INT 115
25334: PUSH
25335: LD_INT 116
25337: PUSH
25338: LD_INT 117
25340: PUSH
25341: LD_INT 118
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: ST_TO_ADDR
25368: GO 25371
25370: POP
// end else
25371: GO 25602
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25373: LD_ADDR_VAR 0 2
25377: PUSH
25378: LD_INT 1
25380: PUSH
25381: LD_INT 2
25383: PUSH
25384: LD_INT 3
25386: PUSH
25387: LD_INT 4
25389: PUSH
25390: LD_INT 5
25392: PUSH
25393: LD_INT 6
25395: PUSH
25396: LD_INT 7
25398: PUSH
25399: LD_INT 8
25401: PUSH
25402: LD_INT 9
25404: PUSH
25405: LD_INT 10
25407: PUSH
25408: LD_INT 11
25410: PUSH
25411: LD_INT 12
25413: PUSH
25414: LD_INT 13
25416: PUSH
25417: LD_INT 14
25419: PUSH
25420: LD_INT 15
25422: PUSH
25423: LD_INT 16
25425: PUSH
25426: LD_INT 17
25428: PUSH
25429: LD_INT 18
25431: PUSH
25432: LD_INT 19
25434: PUSH
25435: LD_INT 20
25437: PUSH
25438: LD_INT 21
25440: PUSH
25441: LD_INT 22
25443: PUSH
25444: LD_INT 23
25446: PUSH
25447: LD_INT 24
25449: PUSH
25450: LD_INT 25
25452: PUSH
25453: LD_INT 26
25455: PUSH
25456: LD_INT 27
25458: PUSH
25459: LD_INT 28
25461: PUSH
25462: LD_INT 29
25464: PUSH
25465: LD_INT 30
25467: PUSH
25468: LD_INT 31
25470: PUSH
25471: LD_INT 32
25473: PUSH
25474: LD_INT 33
25476: PUSH
25477: LD_INT 34
25479: PUSH
25480: LD_INT 35
25482: PUSH
25483: LD_INT 36
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 101
25526: PUSH
25527: LD_INT 102
25529: PUSH
25530: LD_INT 103
25532: PUSH
25533: LD_INT 104
25535: PUSH
25536: LD_INT 105
25538: PUSH
25539: LD_INT 106
25541: PUSH
25542: LD_INT 107
25544: PUSH
25545: LD_INT 108
25547: PUSH
25548: LD_INT 109
25550: PUSH
25551: LD_INT 110
25553: PUSH
25554: LD_INT 111
25556: PUSH
25557: LD_INT 112
25559: PUSH
25560: LD_INT 113
25562: PUSH
25563: LD_INT 114
25565: PUSH
25566: LD_INT 115
25568: PUSH
25569: LD_INT 116
25571: PUSH
25572: LD_INT 117
25574: PUSH
25575: LD_INT 118
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: ST_TO_ADDR
// if result then
25602: LD_VAR 0 2
25606: IFFALSE 26392
// begin normal :=  ;
25608: LD_ADDR_VAR 0 5
25612: PUSH
25613: LD_STRING 
25615: ST_TO_ADDR
// hardcore :=  ;
25616: LD_ADDR_VAR 0 6
25620: PUSH
25621: LD_STRING 
25623: ST_TO_ADDR
// active :=  ;
25624: LD_ADDR_VAR 0 7
25628: PUSH
25629: LD_STRING 
25631: ST_TO_ADDR
// for i = 1 to normalCounter do
25632: LD_ADDR_VAR 0 8
25636: PUSH
25637: DOUBLE
25638: LD_INT 1
25640: DEC
25641: ST_TO_ADDR
25642: LD_EXP 56
25646: PUSH
25647: FOR_TO
25648: IFFALSE 25749
// begin tmp := 0 ;
25650: LD_ADDR_VAR 0 3
25654: PUSH
25655: LD_STRING 0
25657: ST_TO_ADDR
// if result [ 1 ] then
25658: LD_VAR 0 2
25662: PUSH
25663: LD_INT 1
25665: ARRAY
25666: IFFALSE 25731
// if result [ 1 ] [ 1 ] = i then
25668: LD_VAR 0 2
25672: PUSH
25673: LD_INT 1
25675: ARRAY
25676: PUSH
25677: LD_INT 1
25679: ARRAY
25680: PUSH
25681: LD_VAR 0 8
25685: EQUAL
25686: IFFALSE 25731
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25688: LD_ADDR_VAR 0 2
25692: PUSH
25693: LD_VAR 0 2
25697: PPUSH
25698: LD_INT 1
25700: PPUSH
25701: LD_VAR 0 2
25705: PUSH
25706: LD_INT 1
25708: ARRAY
25709: PPUSH
25710: LD_INT 1
25712: PPUSH
25713: CALL_OW 3
25717: PPUSH
25718: CALL_OW 1
25722: ST_TO_ADDR
// tmp := 1 ;
25723: LD_ADDR_VAR 0 3
25727: PUSH
25728: LD_STRING 1
25730: ST_TO_ADDR
// end ; normal := normal & tmp ;
25731: LD_ADDR_VAR 0 5
25735: PUSH
25736: LD_VAR 0 5
25740: PUSH
25741: LD_VAR 0 3
25745: STR
25746: ST_TO_ADDR
// end ;
25747: GO 25647
25749: POP
25750: POP
// for i = 1 to hardcoreCounter do
25751: LD_ADDR_VAR 0 8
25755: PUSH
25756: DOUBLE
25757: LD_INT 1
25759: DEC
25760: ST_TO_ADDR
25761: LD_EXP 57
25765: PUSH
25766: FOR_TO
25767: IFFALSE 25872
// begin tmp := 0 ;
25769: LD_ADDR_VAR 0 3
25773: PUSH
25774: LD_STRING 0
25776: ST_TO_ADDR
// if result [ 2 ] then
25777: LD_VAR 0 2
25781: PUSH
25782: LD_INT 2
25784: ARRAY
25785: IFFALSE 25854
// if result [ 2 ] [ 1 ] = 100 + i then
25787: LD_VAR 0 2
25791: PUSH
25792: LD_INT 2
25794: ARRAY
25795: PUSH
25796: LD_INT 1
25798: ARRAY
25799: PUSH
25800: LD_INT 100
25802: PUSH
25803: LD_VAR 0 8
25807: PLUS
25808: EQUAL
25809: IFFALSE 25854
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25811: LD_ADDR_VAR 0 2
25815: PUSH
25816: LD_VAR 0 2
25820: PPUSH
25821: LD_INT 2
25823: PPUSH
25824: LD_VAR 0 2
25828: PUSH
25829: LD_INT 2
25831: ARRAY
25832: PPUSH
25833: LD_INT 1
25835: PPUSH
25836: CALL_OW 3
25840: PPUSH
25841: CALL_OW 1
25845: ST_TO_ADDR
// tmp := 1 ;
25846: LD_ADDR_VAR 0 3
25850: PUSH
25851: LD_STRING 1
25853: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25854: LD_ADDR_VAR 0 6
25858: PUSH
25859: LD_VAR 0 6
25863: PUSH
25864: LD_VAR 0 3
25868: STR
25869: ST_TO_ADDR
// end ;
25870: GO 25766
25872: POP
25873: POP
// if isGameLoad then
25874: LD_VAR 0 1
25878: IFFALSE 26353
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25880: LD_ADDR_VAR 0 4
25884: PUSH
25885: LD_EXP 60
25889: PUSH
25890: LD_EXP 59
25894: PUSH
25895: LD_EXP 61
25899: PUSH
25900: LD_EXP 58
25904: PUSH
25905: LD_EXP 62
25909: PUSH
25910: LD_EXP 63
25914: PUSH
25915: LD_EXP 64
25919: PUSH
25920: LD_EXP 65
25924: PUSH
25925: LD_EXP 66
25929: PUSH
25930: LD_EXP 67
25934: PUSH
25935: LD_EXP 68
25939: PUSH
25940: LD_EXP 69
25944: PUSH
25945: LD_EXP 70
25949: PUSH
25950: LD_EXP 71
25954: PUSH
25955: LD_EXP 79
25959: PUSH
25960: LD_EXP 80
25964: PUSH
25965: LD_EXP 81
25969: PUSH
25970: LD_EXP 82
25974: PUSH
25975: LD_EXP 84
25979: PUSH
25980: LD_EXP 85
25984: PUSH
25985: LD_EXP 86
25989: PUSH
25990: LD_EXP 89
25994: PUSH
25995: LD_EXP 91
25999: PUSH
26000: LD_EXP 92
26004: PUSH
26005: LD_EXP 93
26009: PUSH
26010: LD_EXP 95
26014: PUSH
26015: LD_EXP 96
26019: PUSH
26020: LD_EXP 99
26024: PUSH
26025: LD_EXP 100
26029: PUSH
26030: LD_EXP 101
26034: PUSH
26035: LD_EXP 102
26039: PUSH
26040: LD_EXP 103
26044: PUSH
26045: LD_EXP 104
26049: PUSH
26050: LD_EXP 105
26054: PUSH
26055: LD_EXP 106
26059: PUSH
26060: LD_EXP 107
26064: PUSH
26065: LD_EXP 72
26069: PUSH
26070: LD_EXP 73
26074: PUSH
26075: LD_EXP 76
26079: PUSH
26080: LD_EXP 77
26084: PUSH
26085: LD_EXP 78
26089: PUSH
26090: LD_EXP 74
26094: PUSH
26095: LD_EXP 75
26099: PUSH
26100: LD_EXP 83
26104: PUSH
26105: LD_EXP 87
26109: PUSH
26110: LD_EXP 88
26114: PUSH
26115: LD_EXP 90
26119: PUSH
26120: LD_EXP 94
26124: PUSH
26125: LD_EXP 97
26129: PUSH
26130: LD_EXP 98
26134: PUSH
26135: LD_EXP 108
26139: PUSH
26140: LD_EXP 109
26144: PUSH
26145: LD_EXP 110
26149: PUSH
26150: LD_EXP 111
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: ST_TO_ADDR
// tmp :=  ;
26211: LD_ADDR_VAR 0 3
26215: PUSH
26216: LD_STRING 
26218: ST_TO_ADDR
// for i = 1 to normalCounter do
26219: LD_ADDR_VAR 0 8
26223: PUSH
26224: DOUBLE
26225: LD_INT 1
26227: DEC
26228: ST_TO_ADDR
26229: LD_EXP 56
26233: PUSH
26234: FOR_TO
26235: IFFALSE 26271
// begin if flags [ i ] then
26237: LD_VAR 0 4
26241: PUSH
26242: LD_VAR 0 8
26246: ARRAY
26247: IFFALSE 26269
// tmp := tmp & i & ; ;
26249: LD_ADDR_VAR 0 3
26253: PUSH
26254: LD_VAR 0 3
26258: PUSH
26259: LD_VAR 0 8
26263: STR
26264: PUSH
26265: LD_STRING ;
26267: STR
26268: ST_TO_ADDR
// end ;
26269: GO 26234
26271: POP
26272: POP
// for i = 1 to hardcoreCounter do
26273: LD_ADDR_VAR 0 8
26277: PUSH
26278: DOUBLE
26279: LD_INT 1
26281: DEC
26282: ST_TO_ADDR
26283: LD_EXP 57
26287: PUSH
26288: FOR_TO
26289: IFFALSE 26335
// begin if flags [ normalCounter + i ] then
26291: LD_VAR 0 4
26295: PUSH
26296: LD_EXP 56
26300: PUSH
26301: LD_VAR 0 8
26305: PLUS
26306: ARRAY
26307: IFFALSE 26333
// tmp := tmp & ( 100 + i ) & ; ;
26309: LD_ADDR_VAR 0 3
26313: PUSH
26314: LD_VAR 0 3
26318: PUSH
26319: LD_INT 100
26321: PUSH
26322: LD_VAR 0 8
26326: PLUS
26327: STR
26328: PUSH
26329: LD_STRING ;
26331: STR
26332: ST_TO_ADDR
// end ;
26333: GO 26288
26335: POP
26336: POP
// if tmp then
26337: LD_VAR 0 3
26341: IFFALSE 26353
// active := tmp ;
26343: LD_ADDR_VAR 0 7
26347: PUSH
26348: LD_VAR 0 3
26352: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26353: LD_STRING getStreamItemsFromMission("
26355: PUSH
26356: LD_VAR 0 5
26360: STR
26361: PUSH
26362: LD_STRING ","
26364: STR
26365: PUSH
26366: LD_VAR 0 6
26370: STR
26371: PUSH
26372: LD_STRING ","
26374: STR
26375: PUSH
26376: LD_VAR 0 7
26380: STR
26381: PUSH
26382: LD_STRING ")
26384: STR
26385: PPUSH
26386: CALL_OW 559
// end else
26390: GO 26399
// ToLua ( getStreamItemsFromMission("","","") ) ;
26392: LD_STRING getStreamItemsFromMission("","","")
26394: PPUSH
26395: CALL_OW 559
// end ;
26399: LD_VAR 0 2
26403: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26404: LD_EXP 55
26408: PUSH
26409: LD_EXP 60
26413: AND
26414: IFFALSE 26538
26416: GO 26418
26418: DISABLE
26419: LD_INT 0
26421: PPUSH
26422: PPUSH
// begin enable ;
26423: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26424: LD_ADDR_VAR 0 2
26428: PUSH
26429: LD_INT 22
26431: PUSH
26432: LD_OWVAR 2
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 2
26443: PUSH
26444: LD_INT 34
26446: PUSH
26447: LD_INT 7
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 34
26456: PUSH
26457: LD_INT 45
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 34
26466: PUSH
26467: LD_INT 28
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 34
26476: PUSH
26477: LD_INT 47
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PPUSH
26495: CALL_OW 69
26499: ST_TO_ADDR
// if not tmp then
26500: LD_VAR 0 2
26504: NOT
26505: IFFALSE 26509
// exit ;
26507: GO 26538
// for i in tmp do
26509: LD_ADDR_VAR 0 1
26513: PUSH
26514: LD_VAR 0 2
26518: PUSH
26519: FOR_IN
26520: IFFALSE 26536
// begin SetLives ( i , 0 ) ;
26522: LD_VAR 0 1
26526: PPUSH
26527: LD_INT 0
26529: PPUSH
26530: CALL_OW 234
// end ;
26534: GO 26519
26536: POP
26537: POP
// end ;
26538: PPOPN 2
26540: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26541: LD_EXP 55
26545: PUSH
26546: LD_EXP 61
26550: AND
26551: IFFALSE 26635
26553: GO 26555
26555: DISABLE
26556: LD_INT 0
26558: PPUSH
26559: PPUSH
// begin enable ;
26560: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26561: LD_ADDR_VAR 0 2
26565: PUSH
26566: LD_INT 22
26568: PUSH
26569: LD_OWVAR 2
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 32
26580: PUSH
26581: LD_INT 3
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PPUSH
26592: CALL_OW 69
26596: ST_TO_ADDR
// if not tmp then
26597: LD_VAR 0 2
26601: NOT
26602: IFFALSE 26606
// exit ;
26604: GO 26635
// for i in tmp do
26606: LD_ADDR_VAR 0 1
26610: PUSH
26611: LD_VAR 0 2
26615: PUSH
26616: FOR_IN
26617: IFFALSE 26633
// begin SetLives ( i , 0 ) ;
26619: LD_VAR 0 1
26623: PPUSH
26624: LD_INT 0
26626: PPUSH
26627: CALL_OW 234
// end ;
26631: GO 26616
26633: POP
26634: POP
// end ;
26635: PPOPN 2
26637: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26638: LD_EXP 55
26642: PUSH
26643: LD_EXP 58
26647: AND
26648: IFFALSE 26741
26650: GO 26652
26652: DISABLE
26653: LD_INT 0
26655: PPUSH
// begin enable ;
26656: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26657: LD_ADDR_VAR 0 1
26661: PUSH
26662: LD_INT 22
26664: PUSH
26665: LD_OWVAR 2
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 2
26676: PUSH
26677: LD_INT 25
26679: PUSH
26680: LD_INT 5
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 25
26689: PUSH
26690: LD_INT 9
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 25
26699: PUSH
26700: LD_INT 8
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PPUSH
26717: CALL_OW 69
26721: PUSH
26722: FOR_IN
26723: IFFALSE 26739
// begin SetClass ( i , 1 ) ;
26725: LD_VAR 0 1
26729: PPUSH
26730: LD_INT 1
26732: PPUSH
26733: CALL_OW 336
// end ;
26737: GO 26722
26739: POP
26740: POP
// end ;
26741: PPOPN 1
26743: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26744: LD_EXP 55
26748: PUSH
26749: LD_EXP 59
26753: AND
26754: PUSH
26755: LD_OWVAR 65
26759: PUSH
26760: LD_INT 7
26762: LESS
26763: AND
26764: IFFALSE 26778
26766: GO 26768
26768: DISABLE
// begin enable ;
26769: ENABLE
// game_speed := 7 ;
26770: LD_ADDR_OWVAR 65
26774: PUSH
26775: LD_INT 7
26777: ST_TO_ADDR
// end ;
26778: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26779: LD_EXP 55
26783: PUSH
26784: LD_EXP 62
26788: AND
26789: IFFALSE 26991
26791: GO 26793
26793: DISABLE
26794: LD_INT 0
26796: PPUSH
26797: PPUSH
26798: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26799: LD_ADDR_VAR 0 3
26803: PUSH
26804: LD_INT 81
26806: PUSH
26807: LD_OWVAR 2
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 21
26818: PUSH
26819: LD_INT 1
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PPUSH
26830: CALL_OW 69
26834: ST_TO_ADDR
// if not tmp then
26835: LD_VAR 0 3
26839: NOT
26840: IFFALSE 26844
// exit ;
26842: GO 26991
// if tmp > 5 then
26844: LD_VAR 0 3
26848: PUSH
26849: LD_INT 5
26851: GREATER
26852: IFFALSE 26864
// k := 5 else
26854: LD_ADDR_VAR 0 2
26858: PUSH
26859: LD_INT 5
26861: ST_TO_ADDR
26862: GO 26874
// k := tmp ;
26864: LD_ADDR_VAR 0 2
26868: PUSH
26869: LD_VAR 0 3
26873: ST_TO_ADDR
// for i := 1 to k do
26874: LD_ADDR_VAR 0 1
26878: PUSH
26879: DOUBLE
26880: LD_INT 1
26882: DEC
26883: ST_TO_ADDR
26884: LD_VAR 0 2
26888: PUSH
26889: FOR_TO
26890: IFFALSE 26989
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26892: LD_VAR 0 3
26896: PUSH
26897: LD_VAR 0 1
26901: ARRAY
26902: PPUSH
26903: LD_VAR 0 1
26907: PUSH
26908: LD_INT 4
26910: MOD
26911: PUSH
26912: LD_INT 1
26914: PLUS
26915: PPUSH
26916: CALL_OW 259
26920: PUSH
26921: LD_INT 10
26923: LESS
26924: IFFALSE 26987
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26926: LD_VAR 0 3
26930: PUSH
26931: LD_VAR 0 1
26935: ARRAY
26936: PPUSH
26937: LD_VAR 0 1
26941: PUSH
26942: LD_INT 4
26944: MOD
26945: PUSH
26946: LD_INT 1
26948: PLUS
26949: PPUSH
26950: LD_VAR 0 3
26954: PUSH
26955: LD_VAR 0 1
26959: ARRAY
26960: PPUSH
26961: LD_VAR 0 1
26965: PUSH
26966: LD_INT 4
26968: MOD
26969: PUSH
26970: LD_INT 1
26972: PLUS
26973: PPUSH
26974: CALL_OW 259
26978: PUSH
26979: LD_INT 1
26981: PLUS
26982: PPUSH
26983: CALL_OW 237
26987: GO 26889
26989: POP
26990: POP
// end ;
26991: PPOPN 3
26993: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26994: LD_EXP 55
26998: PUSH
26999: LD_EXP 63
27003: AND
27004: IFFALSE 27024
27006: GO 27008
27008: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
27009: LD_INT 4
27011: PPUSH
27012: LD_OWVAR 2
27016: PPUSH
27017: LD_INT 0
27019: PPUSH
27020: CALL_OW 324
27024: END
// every 0 0$1 trigger StreamModeActive and sShovel do
27025: LD_EXP 55
27029: PUSH
27030: LD_EXP 92
27034: AND
27035: IFFALSE 27055
27037: GO 27039
27039: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
27040: LD_INT 19
27042: PPUSH
27043: LD_OWVAR 2
27047: PPUSH
27048: LD_INT 0
27050: PPUSH
27051: CALL_OW 324
27055: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
27056: LD_EXP 55
27060: PUSH
27061: LD_EXP 64
27065: AND
27066: IFFALSE 27168
27068: GO 27070
27070: DISABLE
27071: LD_INT 0
27073: PPUSH
27074: PPUSH
// begin enable ;
27075: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
27076: LD_ADDR_VAR 0 2
27080: PUSH
27081: LD_INT 22
27083: PUSH
27084: LD_OWVAR 2
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 2
27095: PUSH
27096: LD_INT 34
27098: PUSH
27099: LD_INT 11
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 34
27108: PUSH
27109: LD_INT 30
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: LIST
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PPUSH
27125: CALL_OW 69
27129: ST_TO_ADDR
// if not tmp then
27130: LD_VAR 0 2
27134: NOT
27135: IFFALSE 27139
// exit ;
27137: GO 27168
// for i in tmp do
27139: LD_ADDR_VAR 0 1
27143: PUSH
27144: LD_VAR 0 2
27148: PUSH
27149: FOR_IN
27150: IFFALSE 27166
// begin SetLives ( i , 0 ) ;
27152: LD_VAR 0 1
27156: PPUSH
27157: LD_INT 0
27159: PPUSH
27160: CALL_OW 234
// end ;
27164: GO 27149
27166: POP
27167: POP
// end ;
27168: PPOPN 2
27170: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27171: LD_EXP 55
27175: PUSH
27176: LD_EXP 65
27180: AND
27181: IFFALSE 27201
27183: GO 27185
27185: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27186: LD_INT 32
27188: PPUSH
27189: LD_OWVAR 2
27193: PPUSH
27194: LD_INT 0
27196: PPUSH
27197: CALL_OW 324
27201: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27202: LD_EXP 55
27206: PUSH
27207: LD_EXP 66
27211: AND
27212: IFFALSE 27393
27214: GO 27216
27216: DISABLE
27217: LD_INT 0
27219: PPUSH
27220: PPUSH
27221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27222: LD_ADDR_VAR 0 2
27226: PUSH
27227: LD_INT 22
27229: PUSH
27230: LD_OWVAR 2
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 33
27241: PUSH
27242: LD_INT 3
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PPUSH
27253: CALL_OW 69
27257: ST_TO_ADDR
// if not tmp then
27258: LD_VAR 0 2
27262: NOT
27263: IFFALSE 27267
// exit ;
27265: GO 27393
// side := 0 ;
27267: LD_ADDR_VAR 0 3
27271: PUSH
27272: LD_INT 0
27274: ST_TO_ADDR
// for i := 1 to 8 do
27275: LD_ADDR_VAR 0 1
27279: PUSH
27280: DOUBLE
27281: LD_INT 1
27283: DEC
27284: ST_TO_ADDR
27285: LD_INT 8
27287: PUSH
27288: FOR_TO
27289: IFFALSE 27337
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27291: LD_OWVAR 2
27295: PUSH
27296: LD_VAR 0 1
27300: NONEQUAL
27301: PUSH
27302: LD_OWVAR 2
27306: PPUSH
27307: LD_VAR 0 1
27311: PPUSH
27312: CALL_OW 81
27316: PUSH
27317: LD_INT 2
27319: EQUAL
27320: AND
27321: IFFALSE 27335
// begin side := i ;
27323: LD_ADDR_VAR 0 3
27327: PUSH
27328: LD_VAR 0 1
27332: ST_TO_ADDR
// break ;
27333: GO 27337
// end ;
27335: GO 27288
27337: POP
27338: POP
// if not side then
27339: LD_VAR 0 3
27343: NOT
27344: IFFALSE 27348
// exit ;
27346: GO 27393
// for i := 1 to tmp do
27348: LD_ADDR_VAR 0 1
27352: PUSH
27353: DOUBLE
27354: LD_INT 1
27356: DEC
27357: ST_TO_ADDR
27358: LD_VAR 0 2
27362: PUSH
27363: FOR_TO
27364: IFFALSE 27391
// if Prob ( 60 ) then
27366: LD_INT 60
27368: PPUSH
27369: CALL_OW 13
27373: IFFALSE 27389
// SetSide ( i , side ) ;
27375: LD_VAR 0 1
27379: PPUSH
27380: LD_VAR 0 3
27384: PPUSH
27385: CALL_OW 235
27389: GO 27363
27391: POP
27392: POP
// end ;
27393: PPOPN 3
27395: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27396: LD_EXP 55
27400: PUSH
27401: LD_EXP 68
27405: AND
27406: IFFALSE 27525
27408: GO 27410
27410: DISABLE
27411: LD_INT 0
27413: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27414: LD_ADDR_VAR 0 1
27418: PUSH
27419: LD_INT 22
27421: PUSH
27422: LD_OWVAR 2
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: LD_INT 21
27433: PUSH
27434: LD_INT 1
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: LD_INT 3
27443: PUSH
27444: LD_INT 23
27446: PUSH
27447: LD_INT 0
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: LIST
27462: PPUSH
27463: CALL_OW 69
27467: PUSH
27468: FOR_IN
27469: IFFALSE 27523
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27471: LD_VAR 0 1
27475: PPUSH
27476: CALL_OW 257
27480: PUSH
27481: LD_INT 1
27483: PUSH
27484: LD_INT 2
27486: PUSH
27487: LD_INT 3
27489: PUSH
27490: LD_INT 4
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: IN
27499: IFFALSE 27521
// SetClass ( un , rand ( 1 , 4 ) ) ;
27501: LD_VAR 0 1
27505: PPUSH
27506: LD_INT 1
27508: PPUSH
27509: LD_INT 4
27511: PPUSH
27512: CALL_OW 12
27516: PPUSH
27517: CALL_OW 336
27521: GO 27468
27523: POP
27524: POP
// end ;
27525: PPOPN 1
27527: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27528: LD_EXP 55
27532: PUSH
27533: LD_EXP 67
27537: AND
27538: IFFALSE 27617
27540: GO 27542
27542: DISABLE
27543: LD_INT 0
27545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27546: LD_ADDR_VAR 0 1
27550: PUSH
27551: LD_INT 22
27553: PUSH
27554: LD_OWVAR 2
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: LD_INT 21
27565: PUSH
27566: LD_INT 3
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PPUSH
27577: CALL_OW 69
27581: ST_TO_ADDR
// if not tmp then
27582: LD_VAR 0 1
27586: NOT
27587: IFFALSE 27591
// exit ;
27589: GO 27617
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27591: LD_VAR 0 1
27595: PUSH
27596: LD_INT 1
27598: PPUSH
27599: LD_VAR 0 1
27603: PPUSH
27604: CALL_OW 12
27608: ARRAY
27609: PPUSH
27610: LD_INT 100
27612: PPUSH
27613: CALL_OW 234
// end ;
27617: PPOPN 1
27619: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27620: LD_EXP 55
27624: PUSH
27625: LD_EXP 69
27629: AND
27630: IFFALSE 27728
27632: GO 27634
27634: DISABLE
27635: LD_INT 0
27637: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27638: LD_ADDR_VAR 0 1
27642: PUSH
27643: LD_INT 22
27645: PUSH
27646: LD_OWVAR 2
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 21
27657: PUSH
27658: LD_INT 1
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PPUSH
27669: CALL_OW 69
27673: ST_TO_ADDR
// if not tmp then
27674: LD_VAR 0 1
27678: NOT
27679: IFFALSE 27683
// exit ;
27681: GO 27728
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27683: LD_VAR 0 1
27687: PUSH
27688: LD_INT 1
27690: PPUSH
27691: LD_VAR 0 1
27695: PPUSH
27696: CALL_OW 12
27700: ARRAY
27701: PPUSH
27702: LD_INT 1
27704: PPUSH
27705: LD_INT 4
27707: PPUSH
27708: CALL_OW 12
27712: PPUSH
27713: LD_INT 3000
27715: PPUSH
27716: LD_INT 9000
27718: PPUSH
27719: CALL_OW 12
27723: PPUSH
27724: CALL_OW 492
// end ;
27728: PPOPN 1
27730: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27731: LD_EXP 55
27735: PUSH
27736: LD_EXP 70
27740: AND
27741: IFFALSE 27761
27743: GO 27745
27745: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27746: LD_INT 1
27748: PPUSH
27749: LD_OWVAR 2
27753: PPUSH
27754: LD_INT 0
27756: PPUSH
27757: CALL_OW 324
27761: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27762: LD_EXP 55
27766: PUSH
27767: LD_EXP 71
27771: AND
27772: IFFALSE 27855
27774: GO 27776
27776: DISABLE
27777: LD_INT 0
27779: PPUSH
27780: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27781: LD_ADDR_VAR 0 2
27785: PUSH
27786: LD_INT 22
27788: PUSH
27789: LD_OWVAR 2
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 21
27800: PUSH
27801: LD_INT 3
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PPUSH
27812: CALL_OW 69
27816: ST_TO_ADDR
// if not tmp then
27817: LD_VAR 0 2
27821: NOT
27822: IFFALSE 27826
// exit ;
27824: GO 27855
// for i in tmp do
27826: LD_ADDR_VAR 0 1
27830: PUSH
27831: LD_VAR 0 2
27835: PUSH
27836: FOR_IN
27837: IFFALSE 27853
// SetBLevel ( i , 10 ) ;
27839: LD_VAR 0 1
27843: PPUSH
27844: LD_INT 10
27846: PPUSH
27847: CALL_OW 241
27851: GO 27836
27853: POP
27854: POP
// end ;
27855: PPOPN 2
27857: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27858: LD_EXP 55
27862: PUSH
27863: LD_EXP 72
27867: AND
27868: IFFALSE 27979
27870: GO 27872
27872: DISABLE
27873: LD_INT 0
27875: PPUSH
27876: PPUSH
27877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27878: LD_ADDR_VAR 0 3
27882: PUSH
27883: LD_INT 22
27885: PUSH
27886: LD_OWVAR 2
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 25
27897: PUSH
27898: LD_INT 1
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PPUSH
27909: CALL_OW 69
27913: ST_TO_ADDR
// if not tmp then
27914: LD_VAR 0 3
27918: NOT
27919: IFFALSE 27923
// exit ;
27921: GO 27979
// un := tmp [ rand ( 1 , tmp ) ] ;
27923: LD_ADDR_VAR 0 2
27927: PUSH
27928: LD_VAR 0 3
27932: PUSH
27933: LD_INT 1
27935: PPUSH
27936: LD_VAR 0 3
27940: PPUSH
27941: CALL_OW 12
27945: ARRAY
27946: ST_TO_ADDR
// if Crawls ( un ) then
27947: LD_VAR 0 2
27951: PPUSH
27952: CALL_OW 318
27956: IFFALSE 27967
// ComWalk ( un ) ;
27958: LD_VAR 0 2
27962: PPUSH
27963: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27967: LD_VAR 0 2
27971: PPUSH
27972: LD_INT 5
27974: PPUSH
27975: CALL_OW 336
// end ;
27979: PPOPN 3
27981: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27982: LD_EXP 55
27986: PUSH
27987: LD_EXP 73
27991: AND
27992: PUSH
27993: LD_OWVAR 67
27997: PUSH
27998: LD_INT 4
28000: LESS
28001: AND
28002: IFFALSE 28021
28004: GO 28006
28006: DISABLE
// begin Difficulty := Difficulty + 1 ;
28007: LD_ADDR_OWVAR 67
28011: PUSH
28012: LD_OWVAR 67
28016: PUSH
28017: LD_INT 1
28019: PLUS
28020: ST_TO_ADDR
// end ;
28021: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
28022: LD_EXP 55
28026: PUSH
28027: LD_EXP 74
28031: AND
28032: IFFALSE 28135
28034: GO 28036
28036: DISABLE
28037: LD_INT 0
28039: PPUSH
// begin for i := 1 to 5 do
28040: LD_ADDR_VAR 0 1
28044: PUSH
28045: DOUBLE
28046: LD_INT 1
28048: DEC
28049: ST_TO_ADDR
28050: LD_INT 5
28052: PUSH
28053: FOR_TO
28054: IFFALSE 28133
// begin uc_nation := nation_nature ;
28056: LD_ADDR_OWVAR 21
28060: PUSH
28061: LD_INT 0
28063: ST_TO_ADDR
// uc_side := 0 ;
28064: LD_ADDR_OWVAR 20
28068: PUSH
28069: LD_INT 0
28071: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28072: LD_ADDR_OWVAR 29
28076: PUSH
28077: LD_INT 12
28079: PUSH
28080: LD_INT 12
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: ST_TO_ADDR
// hc_agressivity := 20 ;
28087: LD_ADDR_OWVAR 35
28091: PUSH
28092: LD_INT 20
28094: ST_TO_ADDR
// hc_class := class_tiger ;
28095: LD_ADDR_OWVAR 28
28099: PUSH
28100: LD_INT 14
28102: ST_TO_ADDR
// hc_gallery :=  ;
28103: LD_ADDR_OWVAR 33
28107: PUSH
28108: LD_STRING 
28110: ST_TO_ADDR
// hc_name :=  ;
28111: LD_ADDR_OWVAR 26
28115: PUSH
28116: LD_STRING 
28118: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
28119: CALL_OW 44
28123: PPUSH
28124: LD_INT 0
28126: PPUSH
28127: CALL_OW 51
// end ;
28131: GO 28053
28133: POP
28134: POP
// end ;
28135: PPOPN 1
28137: END
// every 0 0$1 trigger StreamModeActive and sBomb do
28138: LD_EXP 55
28142: PUSH
28143: LD_EXP 75
28147: AND
28148: IFFALSE 28157
28150: GO 28152
28152: DISABLE
// StreamSibBomb ;
28153: CALL 28158 0 0
28157: END
// export function StreamSibBomb ; var i , x , y ; begin
28158: LD_INT 0
28160: PPUSH
28161: PPUSH
28162: PPUSH
28163: PPUSH
// result := false ;
28164: LD_ADDR_VAR 0 1
28168: PUSH
28169: LD_INT 0
28171: ST_TO_ADDR
// for i := 1 to 16 do
28172: LD_ADDR_VAR 0 2
28176: PUSH
28177: DOUBLE
28178: LD_INT 1
28180: DEC
28181: ST_TO_ADDR
28182: LD_INT 16
28184: PUSH
28185: FOR_TO
28186: IFFALSE 28385
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28188: LD_ADDR_VAR 0 3
28192: PUSH
28193: LD_INT 10
28195: PUSH
28196: LD_INT 20
28198: PUSH
28199: LD_INT 30
28201: PUSH
28202: LD_INT 40
28204: PUSH
28205: LD_INT 50
28207: PUSH
28208: LD_INT 60
28210: PUSH
28211: LD_INT 70
28213: PUSH
28214: LD_INT 80
28216: PUSH
28217: LD_INT 90
28219: PUSH
28220: LD_INT 100
28222: PUSH
28223: LD_INT 110
28225: PUSH
28226: LD_INT 120
28228: PUSH
28229: LD_INT 130
28231: PUSH
28232: LD_INT 140
28234: PUSH
28235: LD_INT 150
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 1
28257: PPUSH
28258: LD_INT 15
28260: PPUSH
28261: CALL_OW 12
28265: ARRAY
28266: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28267: LD_ADDR_VAR 0 4
28271: PUSH
28272: LD_INT 10
28274: PUSH
28275: LD_INT 20
28277: PUSH
28278: LD_INT 30
28280: PUSH
28281: LD_INT 40
28283: PUSH
28284: LD_INT 50
28286: PUSH
28287: LD_INT 60
28289: PUSH
28290: LD_INT 70
28292: PUSH
28293: LD_INT 80
28295: PUSH
28296: LD_INT 90
28298: PUSH
28299: LD_INT 100
28301: PUSH
28302: LD_INT 110
28304: PUSH
28305: LD_INT 120
28307: PUSH
28308: LD_INT 130
28310: PUSH
28311: LD_INT 140
28313: PUSH
28314: LD_INT 150
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 1
28336: PPUSH
28337: LD_INT 15
28339: PPUSH
28340: CALL_OW 12
28344: ARRAY
28345: ST_TO_ADDR
// if ValidHex ( x , y ) then
28346: LD_VAR 0 3
28350: PPUSH
28351: LD_VAR 0 4
28355: PPUSH
28356: CALL_OW 488
28360: IFFALSE 28383
// begin result := [ x , y ] ;
28362: LD_ADDR_VAR 0 1
28366: PUSH
28367: LD_VAR 0 3
28371: PUSH
28372: LD_VAR 0 4
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: ST_TO_ADDR
// break ;
28381: GO 28385
// end ; end ;
28383: GO 28185
28385: POP
28386: POP
// if result then
28387: LD_VAR 0 1
28391: IFFALSE 28451
// begin ToLua ( playSibBomb() ) ;
28393: LD_STRING playSibBomb()
28395: PPUSH
28396: CALL_OW 559
// wait ( 0 0$14 ) ;
28400: LD_INT 490
28402: PPUSH
28403: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28407: LD_VAR 0 1
28411: PUSH
28412: LD_INT 1
28414: ARRAY
28415: PPUSH
28416: LD_VAR 0 1
28420: PUSH
28421: LD_INT 2
28423: ARRAY
28424: PPUSH
28425: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28429: LD_VAR 0 1
28433: PUSH
28434: LD_INT 1
28436: ARRAY
28437: PPUSH
28438: LD_VAR 0 1
28442: PUSH
28443: LD_INT 2
28445: ARRAY
28446: PPUSH
28447: CALL_OW 429
// end ; end ;
28451: LD_VAR 0 1
28455: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28456: LD_EXP 55
28460: PUSH
28461: LD_EXP 77
28465: AND
28466: IFFALSE 28478
28468: GO 28470
28470: DISABLE
// YouLost (  ) ;
28471: LD_STRING 
28473: PPUSH
28474: CALL_OW 104
28478: END
// every 0 0$1 trigger StreamModeActive and sFog do
28479: LD_EXP 55
28483: PUSH
28484: LD_EXP 76
28488: AND
28489: IFFALSE 28503
28491: GO 28493
28493: DISABLE
// FogOff ( your_side ) ;
28494: LD_OWVAR 2
28498: PPUSH
28499: CALL_OW 344
28503: END
// every 0 0$1 trigger StreamModeActive and sSun do
28504: LD_EXP 55
28508: PUSH
28509: LD_EXP 78
28513: AND
28514: IFFALSE 28542
28516: GO 28518
28518: DISABLE
// begin solar_recharge_percent := 0 ;
28519: LD_ADDR_OWVAR 79
28523: PUSH
28524: LD_INT 0
28526: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28527: LD_INT 10500
28529: PPUSH
28530: CALL_OW 67
// solar_recharge_percent := 100 ;
28534: LD_ADDR_OWVAR 79
28538: PUSH
28539: LD_INT 100
28541: ST_TO_ADDR
// end ;
28542: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28543: LD_EXP 55
28547: PUSH
28548: LD_EXP 79
28552: AND
28553: IFFALSE 28792
28555: GO 28557
28557: DISABLE
28558: LD_INT 0
28560: PPUSH
28561: PPUSH
28562: PPUSH
// begin tmp := [ ] ;
28563: LD_ADDR_VAR 0 3
28567: PUSH
28568: EMPTY
28569: ST_TO_ADDR
// for i := 1 to 6 do
28570: LD_ADDR_VAR 0 1
28574: PUSH
28575: DOUBLE
28576: LD_INT 1
28578: DEC
28579: ST_TO_ADDR
28580: LD_INT 6
28582: PUSH
28583: FOR_TO
28584: IFFALSE 28689
// begin uc_nation := nation_nature ;
28586: LD_ADDR_OWVAR 21
28590: PUSH
28591: LD_INT 0
28593: ST_TO_ADDR
// uc_side := 0 ;
28594: LD_ADDR_OWVAR 20
28598: PUSH
28599: LD_INT 0
28601: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28602: LD_ADDR_OWVAR 29
28606: PUSH
28607: LD_INT 12
28609: PUSH
28610: LD_INT 12
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: ST_TO_ADDR
// hc_agressivity := 20 ;
28617: LD_ADDR_OWVAR 35
28621: PUSH
28622: LD_INT 20
28624: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28625: LD_ADDR_OWVAR 28
28629: PUSH
28630: LD_INT 17
28632: ST_TO_ADDR
// hc_gallery :=  ;
28633: LD_ADDR_OWVAR 33
28637: PUSH
28638: LD_STRING 
28640: ST_TO_ADDR
// hc_name :=  ;
28641: LD_ADDR_OWVAR 26
28645: PUSH
28646: LD_STRING 
28648: ST_TO_ADDR
// un := CreateHuman ;
28649: LD_ADDR_VAR 0 2
28653: PUSH
28654: CALL_OW 44
28658: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28659: LD_VAR 0 2
28663: PPUSH
28664: LD_INT 1
28666: PPUSH
28667: CALL_OW 51
// tmp := tmp ^ un ;
28671: LD_ADDR_VAR 0 3
28675: PUSH
28676: LD_VAR 0 3
28680: PUSH
28681: LD_VAR 0 2
28685: ADD
28686: ST_TO_ADDR
// end ;
28687: GO 28583
28689: POP
28690: POP
// repeat wait ( 0 0$1 ) ;
28691: LD_INT 35
28693: PPUSH
28694: CALL_OW 67
// for un in tmp do
28698: LD_ADDR_VAR 0 2
28702: PUSH
28703: LD_VAR 0 3
28707: PUSH
28708: FOR_IN
28709: IFFALSE 28783
// begin if IsDead ( un ) then
28711: LD_VAR 0 2
28715: PPUSH
28716: CALL_OW 301
28720: IFFALSE 28740
// begin tmp := tmp diff un ;
28722: LD_ADDR_VAR 0 3
28726: PUSH
28727: LD_VAR 0 3
28731: PUSH
28732: LD_VAR 0 2
28736: DIFF
28737: ST_TO_ADDR
// continue ;
28738: GO 28708
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28740: LD_VAR 0 2
28744: PPUSH
28745: LD_INT 3
28747: PUSH
28748: LD_INT 22
28750: PUSH
28751: LD_INT 0
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PPUSH
28762: CALL_OW 69
28766: PPUSH
28767: LD_VAR 0 2
28771: PPUSH
28772: CALL_OW 74
28776: PPUSH
28777: CALL_OW 115
// end ;
28781: GO 28708
28783: POP
28784: POP
// until not tmp ;
28785: LD_VAR 0 3
28789: NOT
28790: IFFALSE 28691
// end ;
28792: PPOPN 3
28794: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28795: LD_EXP 55
28799: PUSH
28800: LD_EXP 80
28804: AND
28805: IFFALSE 28859
28807: GO 28809
28809: DISABLE
// begin ToLua ( displayTroll(); ) ;
28810: LD_STRING displayTroll();
28812: PPUSH
28813: CALL_OW 559
// wait ( 3 3$00 ) ;
28817: LD_INT 6300
28819: PPUSH
28820: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28824: LD_STRING hideTroll();
28826: PPUSH
28827: CALL_OW 559
// wait ( 1 1$00 ) ;
28831: LD_INT 2100
28833: PPUSH
28834: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28838: LD_STRING displayTroll();
28840: PPUSH
28841: CALL_OW 559
// wait ( 1 1$00 ) ;
28845: LD_INT 2100
28847: PPUSH
28848: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28852: LD_STRING hideTroll();
28854: PPUSH
28855: CALL_OW 559
// end ;
28859: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28860: LD_EXP 55
28864: PUSH
28865: LD_EXP 81
28869: AND
28870: IFFALSE 28933
28872: GO 28874
28874: DISABLE
28875: LD_INT 0
28877: PPUSH
// begin p := 0 ;
28878: LD_ADDR_VAR 0 1
28882: PUSH
28883: LD_INT 0
28885: ST_TO_ADDR
// repeat game_speed := 1 ;
28886: LD_ADDR_OWVAR 65
28890: PUSH
28891: LD_INT 1
28893: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28894: LD_INT 35
28896: PPUSH
28897: CALL_OW 67
// p := p + 1 ;
28901: LD_ADDR_VAR 0 1
28905: PUSH
28906: LD_VAR 0 1
28910: PUSH
28911: LD_INT 1
28913: PLUS
28914: ST_TO_ADDR
// until p >= 60 ;
28915: LD_VAR 0 1
28919: PUSH
28920: LD_INT 60
28922: GREATEREQUAL
28923: IFFALSE 28886
// game_speed := 4 ;
28925: LD_ADDR_OWVAR 65
28929: PUSH
28930: LD_INT 4
28932: ST_TO_ADDR
// end ;
28933: PPOPN 1
28935: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28936: LD_EXP 55
28940: PUSH
28941: LD_EXP 82
28945: AND
28946: IFFALSE 29092
28948: GO 28950
28950: DISABLE
28951: LD_INT 0
28953: PPUSH
28954: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28955: LD_ADDR_VAR 0 1
28959: PUSH
28960: LD_INT 22
28962: PUSH
28963: LD_OWVAR 2
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: LD_INT 2
28974: PUSH
28975: LD_INT 30
28977: PUSH
28978: LD_INT 0
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 30
28987: PUSH
28988: LD_INT 1
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: LIST
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PPUSH
29004: CALL_OW 69
29008: ST_TO_ADDR
// if not depot then
29009: LD_VAR 0 1
29013: NOT
29014: IFFALSE 29018
// exit ;
29016: GO 29092
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
29018: LD_ADDR_VAR 0 2
29022: PUSH
29023: LD_VAR 0 1
29027: PUSH
29028: LD_INT 1
29030: PPUSH
29031: LD_VAR 0 1
29035: PPUSH
29036: CALL_OW 12
29040: ARRAY
29041: PPUSH
29042: CALL_OW 274
29046: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
29047: LD_VAR 0 2
29051: PPUSH
29052: LD_INT 1
29054: PPUSH
29055: LD_INT 0
29057: PPUSH
29058: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
29062: LD_VAR 0 2
29066: PPUSH
29067: LD_INT 2
29069: PPUSH
29070: LD_INT 0
29072: PPUSH
29073: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
29077: LD_VAR 0 2
29081: PPUSH
29082: LD_INT 3
29084: PPUSH
29085: LD_INT 0
29087: PPUSH
29088: CALL_OW 277
// end ;
29092: PPOPN 2
29094: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
29095: LD_EXP 55
29099: PUSH
29100: LD_EXP 83
29104: AND
29105: IFFALSE 29202
29107: GO 29109
29109: DISABLE
29110: LD_INT 0
29112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29113: LD_ADDR_VAR 0 1
29117: PUSH
29118: LD_INT 22
29120: PUSH
29121: LD_OWVAR 2
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 21
29132: PUSH
29133: LD_INT 1
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 3
29142: PUSH
29143: LD_INT 23
29145: PUSH
29146: LD_INT 0
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: LIST
29161: PPUSH
29162: CALL_OW 69
29166: ST_TO_ADDR
// if not tmp then
29167: LD_VAR 0 1
29171: NOT
29172: IFFALSE 29176
// exit ;
29174: GO 29202
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29176: LD_VAR 0 1
29180: PUSH
29181: LD_INT 1
29183: PPUSH
29184: LD_VAR 0 1
29188: PPUSH
29189: CALL_OW 12
29193: ARRAY
29194: PPUSH
29195: LD_INT 200
29197: PPUSH
29198: CALL_OW 234
// end ;
29202: PPOPN 1
29204: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29205: LD_EXP 55
29209: PUSH
29210: LD_EXP 84
29214: AND
29215: IFFALSE 29294
29217: GO 29219
29219: DISABLE
29220: LD_INT 0
29222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29223: LD_ADDR_VAR 0 1
29227: PUSH
29228: LD_INT 22
29230: PUSH
29231: LD_OWVAR 2
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 21
29242: PUSH
29243: LD_INT 2
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PPUSH
29254: CALL_OW 69
29258: ST_TO_ADDR
// if not tmp then
29259: LD_VAR 0 1
29263: NOT
29264: IFFALSE 29268
// exit ;
29266: GO 29294
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29268: LD_VAR 0 1
29272: PUSH
29273: LD_INT 1
29275: PPUSH
29276: LD_VAR 0 1
29280: PPUSH
29281: CALL_OW 12
29285: ARRAY
29286: PPUSH
29287: LD_INT 60
29289: PPUSH
29290: CALL_OW 234
// end ;
29294: PPOPN 1
29296: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29297: LD_EXP 55
29301: PUSH
29302: LD_EXP 85
29306: AND
29307: IFFALSE 29406
29309: GO 29311
29311: DISABLE
29312: LD_INT 0
29314: PPUSH
29315: PPUSH
// begin enable ;
29316: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29317: LD_ADDR_VAR 0 1
29321: PUSH
29322: LD_INT 22
29324: PUSH
29325: LD_OWVAR 2
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: LD_INT 61
29336: PUSH
29337: EMPTY
29338: LIST
29339: PUSH
29340: LD_INT 33
29342: PUSH
29343: LD_INT 2
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: LIST
29354: PPUSH
29355: CALL_OW 69
29359: ST_TO_ADDR
// if not tmp then
29360: LD_VAR 0 1
29364: NOT
29365: IFFALSE 29369
// exit ;
29367: GO 29406
// for i in tmp do
29369: LD_ADDR_VAR 0 2
29373: PUSH
29374: LD_VAR 0 1
29378: PUSH
29379: FOR_IN
29380: IFFALSE 29404
// if IsControledBy ( i ) then
29382: LD_VAR 0 2
29386: PPUSH
29387: CALL_OW 312
29391: IFFALSE 29402
// ComUnlink ( i ) ;
29393: LD_VAR 0 2
29397: PPUSH
29398: CALL_OW 136
29402: GO 29379
29404: POP
29405: POP
// end ;
29406: PPOPN 2
29408: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29409: LD_EXP 55
29413: PUSH
29414: LD_EXP 86
29418: AND
29419: IFFALSE 29559
29421: GO 29423
29423: DISABLE
29424: LD_INT 0
29426: PPUSH
29427: PPUSH
// begin ToLua ( displayPowell(); ) ;
29428: LD_STRING displayPowell();
29430: PPUSH
29431: CALL_OW 559
// uc_side := 0 ;
29435: LD_ADDR_OWVAR 20
29439: PUSH
29440: LD_INT 0
29442: ST_TO_ADDR
// uc_nation := 2 ;
29443: LD_ADDR_OWVAR 21
29447: PUSH
29448: LD_INT 2
29450: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29451: LD_ADDR_OWVAR 37
29455: PUSH
29456: LD_INT 14
29458: ST_TO_ADDR
// vc_engine := engine_siberite ;
29459: LD_ADDR_OWVAR 39
29463: PUSH
29464: LD_INT 3
29466: ST_TO_ADDR
// vc_control := control_apeman ;
29467: LD_ADDR_OWVAR 38
29471: PUSH
29472: LD_INT 5
29474: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29475: LD_ADDR_OWVAR 40
29479: PUSH
29480: LD_INT 29
29482: ST_TO_ADDR
// un := CreateVehicle ;
29483: LD_ADDR_VAR 0 2
29487: PUSH
29488: CALL_OW 45
29492: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29493: LD_VAR 0 2
29497: PPUSH
29498: LD_INT 1
29500: PPUSH
29501: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29505: LD_INT 35
29507: PPUSH
29508: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29512: LD_VAR 0 2
29516: PPUSH
29517: LD_INT 22
29519: PUSH
29520: LD_OWVAR 2
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PPUSH
29529: CALL_OW 69
29533: PPUSH
29534: LD_VAR 0 2
29538: PPUSH
29539: CALL_OW 74
29543: PPUSH
29544: CALL_OW 115
// until IsDead ( un ) ;
29548: LD_VAR 0 2
29552: PPUSH
29553: CALL_OW 301
29557: IFFALSE 29505
// end ;
29559: PPOPN 2
29561: END
// every 0 0$1 trigger StreamModeActive and sStu do
29562: LD_EXP 55
29566: PUSH
29567: LD_EXP 94
29571: AND
29572: IFFALSE 29588
29574: GO 29576
29576: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29577: LD_STRING displayStucuk();
29579: PPUSH
29580: CALL_OW 559
// ResetFog ;
29584: CALL_OW 335
// end ;
29588: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29589: LD_EXP 55
29593: PUSH
29594: LD_EXP 87
29598: AND
29599: IFFALSE 29740
29601: GO 29603
29603: DISABLE
29604: LD_INT 0
29606: PPUSH
29607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29608: LD_ADDR_VAR 0 2
29612: PUSH
29613: LD_INT 22
29615: PUSH
29616: LD_OWVAR 2
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 21
29627: PUSH
29628: LD_INT 1
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PPUSH
29639: CALL_OW 69
29643: ST_TO_ADDR
// if not tmp then
29644: LD_VAR 0 2
29648: NOT
29649: IFFALSE 29653
// exit ;
29651: GO 29740
// un := tmp [ rand ( 1 , tmp ) ] ;
29653: LD_ADDR_VAR 0 1
29657: PUSH
29658: LD_VAR 0 2
29662: PUSH
29663: LD_INT 1
29665: PPUSH
29666: LD_VAR 0 2
29670: PPUSH
29671: CALL_OW 12
29675: ARRAY
29676: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29677: LD_VAR 0 1
29681: PPUSH
29682: LD_INT 0
29684: PPUSH
29685: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29689: LD_VAR 0 1
29693: PPUSH
29694: LD_OWVAR 3
29698: PUSH
29699: LD_VAR 0 1
29703: DIFF
29704: PPUSH
29705: LD_VAR 0 1
29709: PPUSH
29710: CALL_OW 74
29714: PPUSH
29715: CALL_OW 115
// wait ( 0 0$20 ) ;
29719: LD_INT 700
29721: PPUSH
29722: CALL_OW 67
// SetSide ( un , your_side ) ;
29726: LD_VAR 0 1
29730: PPUSH
29731: LD_OWVAR 2
29735: PPUSH
29736: CALL_OW 235
// end ;
29740: PPOPN 2
29742: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29743: LD_EXP 55
29747: PUSH
29748: LD_EXP 88
29752: AND
29753: IFFALSE 29859
29755: GO 29757
29757: DISABLE
29758: LD_INT 0
29760: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29761: LD_ADDR_VAR 0 1
29765: PUSH
29766: LD_INT 22
29768: PUSH
29769: LD_OWVAR 2
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 2
29780: PUSH
29781: LD_INT 30
29783: PUSH
29784: LD_INT 0
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 30
29793: PUSH
29794: LD_INT 1
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: LIST
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PPUSH
29810: CALL_OW 69
29814: ST_TO_ADDR
// if not depot then
29815: LD_VAR 0 1
29819: NOT
29820: IFFALSE 29824
// exit ;
29822: GO 29859
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29824: LD_VAR 0 1
29828: PUSH
29829: LD_INT 1
29831: ARRAY
29832: PPUSH
29833: CALL_OW 250
29837: PPUSH
29838: LD_VAR 0 1
29842: PUSH
29843: LD_INT 1
29845: ARRAY
29846: PPUSH
29847: CALL_OW 251
29851: PPUSH
29852: LD_INT 70
29854: PPUSH
29855: CALL_OW 495
// end ;
29859: PPOPN 1
29861: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29862: LD_EXP 55
29866: PUSH
29867: LD_EXP 89
29871: AND
29872: IFFALSE 30083
29874: GO 29876
29876: DISABLE
29877: LD_INT 0
29879: PPUSH
29880: PPUSH
29881: PPUSH
29882: PPUSH
29883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29884: LD_ADDR_VAR 0 5
29888: PUSH
29889: LD_INT 22
29891: PUSH
29892: LD_OWVAR 2
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: LD_INT 21
29903: PUSH
29904: LD_INT 1
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PPUSH
29915: CALL_OW 69
29919: ST_TO_ADDR
// if not tmp then
29920: LD_VAR 0 5
29924: NOT
29925: IFFALSE 29929
// exit ;
29927: GO 30083
// for i in tmp do
29929: LD_ADDR_VAR 0 1
29933: PUSH
29934: LD_VAR 0 5
29938: PUSH
29939: FOR_IN
29940: IFFALSE 30081
// begin d := rand ( 0 , 5 ) ;
29942: LD_ADDR_VAR 0 4
29946: PUSH
29947: LD_INT 0
29949: PPUSH
29950: LD_INT 5
29952: PPUSH
29953: CALL_OW 12
29957: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29958: LD_ADDR_VAR 0 2
29962: PUSH
29963: LD_VAR 0 1
29967: PPUSH
29968: CALL_OW 250
29972: PPUSH
29973: LD_VAR 0 4
29977: PPUSH
29978: LD_INT 3
29980: PPUSH
29981: LD_INT 12
29983: PPUSH
29984: CALL_OW 12
29988: PPUSH
29989: CALL_OW 272
29993: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29994: LD_ADDR_VAR 0 3
29998: PUSH
29999: LD_VAR 0 1
30003: PPUSH
30004: CALL_OW 251
30008: PPUSH
30009: LD_VAR 0 4
30013: PPUSH
30014: LD_INT 3
30016: PPUSH
30017: LD_INT 12
30019: PPUSH
30020: CALL_OW 12
30024: PPUSH
30025: CALL_OW 273
30029: ST_TO_ADDR
// if ValidHex ( x , y ) then
30030: LD_VAR 0 2
30034: PPUSH
30035: LD_VAR 0 3
30039: PPUSH
30040: CALL_OW 488
30044: IFFALSE 30079
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
30046: LD_VAR 0 1
30050: PPUSH
30051: LD_VAR 0 2
30055: PPUSH
30056: LD_VAR 0 3
30060: PPUSH
30061: LD_INT 3
30063: PPUSH
30064: LD_INT 6
30066: PPUSH
30067: CALL_OW 12
30071: PPUSH
30072: LD_INT 1
30074: PPUSH
30075: CALL_OW 483
// end ;
30079: GO 29939
30081: POP
30082: POP
// end ;
30083: PPOPN 5
30085: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
30086: LD_EXP 55
30090: PUSH
30091: LD_EXP 90
30095: AND
30096: IFFALSE 30190
30098: GO 30100
30100: DISABLE
30101: LD_INT 0
30103: PPUSH
30104: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
30105: LD_ADDR_VAR 0 2
30109: PUSH
30110: LD_INT 22
30112: PUSH
30113: LD_OWVAR 2
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 32
30124: PUSH
30125: LD_INT 1
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 21
30134: PUSH
30135: LD_INT 2
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: LIST
30146: PPUSH
30147: CALL_OW 69
30151: ST_TO_ADDR
// if not tmp then
30152: LD_VAR 0 2
30156: NOT
30157: IFFALSE 30161
// exit ;
30159: GO 30190
// for i in tmp do
30161: LD_ADDR_VAR 0 1
30165: PUSH
30166: LD_VAR 0 2
30170: PUSH
30171: FOR_IN
30172: IFFALSE 30188
// SetFuel ( i , 0 ) ;
30174: LD_VAR 0 1
30178: PPUSH
30179: LD_INT 0
30181: PPUSH
30182: CALL_OW 240
30186: GO 30171
30188: POP
30189: POP
// end ;
30190: PPOPN 2
30192: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30193: LD_EXP 55
30197: PUSH
30198: LD_EXP 91
30202: AND
30203: IFFALSE 30269
30205: GO 30207
30207: DISABLE
30208: LD_INT 0
30210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30211: LD_ADDR_VAR 0 1
30215: PUSH
30216: LD_INT 22
30218: PUSH
30219: LD_OWVAR 2
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 30
30230: PUSH
30231: LD_INT 29
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PPUSH
30242: CALL_OW 69
30246: ST_TO_ADDR
// if not tmp then
30247: LD_VAR 0 1
30251: NOT
30252: IFFALSE 30256
// exit ;
30254: GO 30269
// DestroyUnit ( tmp [ 1 ] ) ;
30256: LD_VAR 0 1
30260: PUSH
30261: LD_INT 1
30263: ARRAY
30264: PPUSH
30265: CALL_OW 65
// end ;
30269: PPOPN 1
30271: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30272: LD_EXP 55
30276: PUSH
30277: LD_EXP 93
30281: AND
30282: IFFALSE 30411
30284: GO 30286
30286: DISABLE
30287: LD_INT 0
30289: PPUSH
// begin uc_side := 0 ;
30290: LD_ADDR_OWVAR 20
30294: PUSH
30295: LD_INT 0
30297: ST_TO_ADDR
// uc_nation := nation_arabian ;
30298: LD_ADDR_OWVAR 21
30302: PUSH
30303: LD_INT 2
30305: ST_TO_ADDR
// hc_gallery :=  ;
30306: LD_ADDR_OWVAR 33
30310: PUSH
30311: LD_STRING 
30313: ST_TO_ADDR
// hc_name :=  ;
30314: LD_ADDR_OWVAR 26
30318: PUSH
30319: LD_STRING 
30321: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30322: LD_INT 1
30324: PPUSH
30325: LD_INT 11
30327: PPUSH
30328: LD_INT 10
30330: PPUSH
30331: CALL_OW 380
// un := CreateHuman ;
30335: LD_ADDR_VAR 0 1
30339: PUSH
30340: CALL_OW 44
30344: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30345: LD_VAR 0 1
30349: PPUSH
30350: LD_INT 1
30352: PPUSH
30353: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30357: LD_INT 35
30359: PPUSH
30360: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30364: LD_VAR 0 1
30368: PPUSH
30369: LD_INT 22
30371: PUSH
30372: LD_OWVAR 2
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PPUSH
30381: CALL_OW 69
30385: PPUSH
30386: LD_VAR 0 1
30390: PPUSH
30391: CALL_OW 74
30395: PPUSH
30396: CALL_OW 115
// until IsDead ( un ) ;
30400: LD_VAR 0 1
30404: PPUSH
30405: CALL_OW 301
30409: IFFALSE 30357
// end ;
30411: PPOPN 1
30413: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30414: LD_EXP 55
30418: PUSH
30419: LD_EXP 95
30423: AND
30424: IFFALSE 30436
30426: GO 30428
30428: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30429: LD_STRING earthquake(getX(game), 0, 32)
30431: PPUSH
30432: CALL_OW 559
30436: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30437: LD_EXP 55
30441: PUSH
30442: LD_EXP 96
30446: AND
30447: IFFALSE 30538
30449: GO 30451
30451: DISABLE
30452: LD_INT 0
30454: PPUSH
// begin enable ;
30455: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30456: LD_ADDR_VAR 0 1
30460: PUSH
30461: LD_INT 22
30463: PUSH
30464: LD_OWVAR 2
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 21
30475: PUSH
30476: LD_INT 2
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 33
30485: PUSH
30486: LD_INT 3
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: LIST
30497: PPUSH
30498: CALL_OW 69
30502: ST_TO_ADDR
// if not tmp then
30503: LD_VAR 0 1
30507: NOT
30508: IFFALSE 30512
// exit ;
30510: GO 30538
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30512: LD_VAR 0 1
30516: PUSH
30517: LD_INT 1
30519: PPUSH
30520: LD_VAR 0 1
30524: PPUSH
30525: CALL_OW 12
30529: ARRAY
30530: PPUSH
30531: LD_INT 1
30533: PPUSH
30534: CALL_OW 234
// end ;
30538: PPOPN 1
30540: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30541: LD_EXP 55
30545: PUSH
30546: LD_EXP 97
30550: AND
30551: IFFALSE 30692
30553: GO 30555
30555: DISABLE
30556: LD_INT 0
30558: PPUSH
30559: PPUSH
30560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30561: LD_ADDR_VAR 0 3
30565: PUSH
30566: LD_INT 22
30568: PUSH
30569: LD_OWVAR 2
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: LD_INT 25
30580: PUSH
30581: LD_INT 1
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PPUSH
30592: CALL_OW 69
30596: ST_TO_ADDR
// if not tmp then
30597: LD_VAR 0 3
30601: NOT
30602: IFFALSE 30606
// exit ;
30604: GO 30692
// un := tmp [ rand ( 1 , tmp ) ] ;
30606: LD_ADDR_VAR 0 2
30610: PUSH
30611: LD_VAR 0 3
30615: PUSH
30616: LD_INT 1
30618: PPUSH
30619: LD_VAR 0 3
30623: PPUSH
30624: CALL_OW 12
30628: ARRAY
30629: ST_TO_ADDR
// if Crawls ( un ) then
30630: LD_VAR 0 2
30634: PPUSH
30635: CALL_OW 318
30639: IFFALSE 30650
// ComWalk ( un ) ;
30641: LD_VAR 0 2
30645: PPUSH
30646: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30650: LD_VAR 0 2
30654: PPUSH
30655: LD_INT 9
30657: PPUSH
30658: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30662: LD_INT 28
30664: PPUSH
30665: LD_OWVAR 2
30669: PPUSH
30670: LD_INT 2
30672: PPUSH
30673: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30677: LD_INT 29
30679: PPUSH
30680: LD_OWVAR 2
30684: PPUSH
30685: LD_INT 2
30687: PPUSH
30688: CALL_OW 322
// end ;
30692: PPOPN 3
30694: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30695: LD_EXP 55
30699: PUSH
30700: LD_EXP 98
30704: AND
30705: IFFALSE 30816
30707: GO 30709
30709: DISABLE
30710: LD_INT 0
30712: PPUSH
30713: PPUSH
30714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30715: LD_ADDR_VAR 0 3
30719: PUSH
30720: LD_INT 22
30722: PUSH
30723: LD_OWVAR 2
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 25
30734: PUSH
30735: LD_INT 1
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PPUSH
30746: CALL_OW 69
30750: ST_TO_ADDR
// if not tmp then
30751: LD_VAR 0 3
30755: NOT
30756: IFFALSE 30760
// exit ;
30758: GO 30816
// un := tmp [ rand ( 1 , tmp ) ] ;
30760: LD_ADDR_VAR 0 2
30764: PUSH
30765: LD_VAR 0 3
30769: PUSH
30770: LD_INT 1
30772: PPUSH
30773: LD_VAR 0 3
30777: PPUSH
30778: CALL_OW 12
30782: ARRAY
30783: ST_TO_ADDR
// if Crawls ( un ) then
30784: LD_VAR 0 2
30788: PPUSH
30789: CALL_OW 318
30793: IFFALSE 30804
// ComWalk ( un ) ;
30795: LD_VAR 0 2
30799: PPUSH
30800: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30804: LD_VAR 0 2
30808: PPUSH
30809: LD_INT 8
30811: PPUSH
30812: CALL_OW 336
// end ;
30816: PPOPN 3
30818: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30819: LD_EXP 55
30823: PUSH
30824: LD_EXP 99
30828: AND
30829: IFFALSE 30973
30831: GO 30833
30833: DISABLE
30834: LD_INT 0
30836: PPUSH
30837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30838: LD_ADDR_VAR 0 2
30842: PUSH
30843: LD_INT 22
30845: PUSH
30846: LD_OWVAR 2
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 21
30857: PUSH
30858: LD_INT 2
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 2
30867: PUSH
30868: LD_INT 34
30870: PUSH
30871: LD_INT 12
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 34
30880: PUSH
30881: LD_INT 51
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 34
30890: PUSH
30891: LD_INT 32
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: LIST
30908: PPUSH
30909: CALL_OW 69
30913: ST_TO_ADDR
// if not tmp then
30914: LD_VAR 0 2
30918: NOT
30919: IFFALSE 30923
// exit ;
30921: GO 30973
// for i in tmp do
30923: LD_ADDR_VAR 0 1
30927: PUSH
30928: LD_VAR 0 2
30932: PUSH
30933: FOR_IN
30934: IFFALSE 30971
// if GetCargo ( i , mat_artifact ) = 0 then
30936: LD_VAR 0 1
30940: PPUSH
30941: LD_INT 4
30943: PPUSH
30944: CALL_OW 289
30948: PUSH
30949: LD_INT 0
30951: EQUAL
30952: IFFALSE 30969
// SetCargo ( i , mat_siberit , 100 ) ;
30954: LD_VAR 0 1
30958: PPUSH
30959: LD_INT 3
30961: PPUSH
30962: LD_INT 100
30964: PPUSH
30965: CALL_OW 290
30969: GO 30933
30971: POP
30972: POP
// end ;
30973: PPOPN 2
30975: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30976: LD_EXP 55
30980: PUSH
30981: LD_EXP 100
30985: AND
30986: IFFALSE 31169
30988: GO 30990
30990: DISABLE
30991: LD_INT 0
30993: PPUSH
30994: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30995: LD_ADDR_VAR 0 2
30999: PUSH
31000: LD_INT 22
31002: PUSH
31003: LD_OWVAR 2
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PPUSH
31012: CALL_OW 69
31016: ST_TO_ADDR
// if not tmp then
31017: LD_VAR 0 2
31021: NOT
31022: IFFALSE 31026
// exit ;
31024: GO 31169
// for i := 1 to 2 do
31026: LD_ADDR_VAR 0 1
31030: PUSH
31031: DOUBLE
31032: LD_INT 1
31034: DEC
31035: ST_TO_ADDR
31036: LD_INT 2
31038: PUSH
31039: FOR_TO
31040: IFFALSE 31167
// begin uc_side := your_side ;
31042: LD_ADDR_OWVAR 20
31046: PUSH
31047: LD_OWVAR 2
31051: ST_TO_ADDR
// uc_nation := nation_american ;
31052: LD_ADDR_OWVAR 21
31056: PUSH
31057: LD_INT 1
31059: ST_TO_ADDR
// vc_chassis := us_morphling ;
31060: LD_ADDR_OWVAR 37
31064: PUSH
31065: LD_INT 5
31067: ST_TO_ADDR
// vc_engine := engine_siberite ;
31068: LD_ADDR_OWVAR 39
31072: PUSH
31073: LD_INT 3
31075: ST_TO_ADDR
// vc_control := control_computer ;
31076: LD_ADDR_OWVAR 38
31080: PUSH
31081: LD_INT 3
31083: ST_TO_ADDR
// vc_weapon := us_double_laser ;
31084: LD_ADDR_OWVAR 40
31088: PUSH
31089: LD_INT 10
31091: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
31092: LD_VAR 0 2
31096: PUSH
31097: LD_INT 1
31099: ARRAY
31100: PPUSH
31101: CALL_OW 310
31105: NOT
31106: IFFALSE 31153
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
31108: CALL_OW 45
31112: PPUSH
31113: LD_VAR 0 2
31117: PUSH
31118: LD_INT 1
31120: ARRAY
31121: PPUSH
31122: CALL_OW 250
31126: PPUSH
31127: LD_VAR 0 2
31131: PUSH
31132: LD_INT 1
31134: ARRAY
31135: PPUSH
31136: CALL_OW 251
31140: PPUSH
31141: LD_INT 12
31143: PPUSH
31144: LD_INT 1
31146: PPUSH
31147: CALL_OW 50
31151: GO 31165
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31153: CALL_OW 45
31157: PPUSH
31158: LD_INT 1
31160: PPUSH
31161: CALL_OW 51
// end ;
31165: GO 31039
31167: POP
31168: POP
// end ;
31169: PPOPN 2
31171: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31172: LD_EXP 55
31176: PUSH
31177: LD_EXP 101
31181: AND
31182: IFFALSE 31404
31184: GO 31186
31186: DISABLE
31187: LD_INT 0
31189: PPUSH
31190: PPUSH
31191: PPUSH
31192: PPUSH
31193: PPUSH
31194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31195: LD_ADDR_VAR 0 6
31199: PUSH
31200: LD_INT 22
31202: PUSH
31203: LD_OWVAR 2
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 21
31214: PUSH
31215: LD_INT 1
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 3
31224: PUSH
31225: LD_INT 23
31227: PUSH
31228: LD_INT 0
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: LIST
31243: PPUSH
31244: CALL_OW 69
31248: ST_TO_ADDR
// if not tmp then
31249: LD_VAR 0 6
31253: NOT
31254: IFFALSE 31258
// exit ;
31256: GO 31404
// s1 := rand ( 1 , 4 ) ;
31258: LD_ADDR_VAR 0 2
31262: PUSH
31263: LD_INT 1
31265: PPUSH
31266: LD_INT 4
31268: PPUSH
31269: CALL_OW 12
31273: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31274: LD_ADDR_VAR 0 4
31278: PUSH
31279: LD_VAR 0 6
31283: PUSH
31284: LD_INT 1
31286: ARRAY
31287: PPUSH
31288: LD_VAR 0 2
31292: PPUSH
31293: CALL_OW 259
31297: ST_TO_ADDR
// if s1 = 1 then
31298: LD_VAR 0 2
31302: PUSH
31303: LD_INT 1
31305: EQUAL
31306: IFFALSE 31326
// s2 := rand ( 2 , 4 ) else
31308: LD_ADDR_VAR 0 3
31312: PUSH
31313: LD_INT 2
31315: PPUSH
31316: LD_INT 4
31318: PPUSH
31319: CALL_OW 12
31323: ST_TO_ADDR
31324: GO 31334
// s2 := 1 ;
31326: LD_ADDR_VAR 0 3
31330: PUSH
31331: LD_INT 1
31333: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31334: LD_ADDR_VAR 0 5
31338: PUSH
31339: LD_VAR 0 6
31343: PUSH
31344: LD_INT 1
31346: ARRAY
31347: PPUSH
31348: LD_VAR 0 3
31352: PPUSH
31353: CALL_OW 259
31357: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31358: LD_VAR 0 6
31362: PUSH
31363: LD_INT 1
31365: ARRAY
31366: PPUSH
31367: LD_VAR 0 2
31371: PPUSH
31372: LD_VAR 0 5
31376: PPUSH
31377: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31381: LD_VAR 0 6
31385: PUSH
31386: LD_INT 1
31388: ARRAY
31389: PPUSH
31390: LD_VAR 0 3
31394: PPUSH
31395: LD_VAR 0 4
31399: PPUSH
31400: CALL_OW 237
// end ;
31404: PPOPN 6
31406: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31407: LD_EXP 55
31411: PUSH
31412: LD_EXP 102
31416: AND
31417: IFFALSE 31496
31419: GO 31421
31421: DISABLE
31422: LD_INT 0
31424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31425: LD_ADDR_VAR 0 1
31429: PUSH
31430: LD_INT 22
31432: PUSH
31433: LD_OWVAR 2
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 30
31444: PUSH
31445: LD_INT 3
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PPUSH
31456: CALL_OW 69
31460: ST_TO_ADDR
// if not tmp then
31461: LD_VAR 0 1
31465: NOT
31466: IFFALSE 31470
// exit ;
31468: GO 31496
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31470: LD_VAR 0 1
31474: PUSH
31475: LD_INT 1
31477: PPUSH
31478: LD_VAR 0 1
31482: PPUSH
31483: CALL_OW 12
31487: ARRAY
31488: PPUSH
31489: LD_INT 1
31491: PPUSH
31492: CALL_OW 234
// end ;
31496: PPOPN 1
31498: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31499: LD_EXP 55
31503: PUSH
31504: LD_EXP 103
31508: AND
31509: IFFALSE 31621
31511: GO 31513
31513: DISABLE
31514: LD_INT 0
31516: PPUSH
31517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31518: LD_ADDR_VAR 0 2
31522: PUSH
31523: LD_INT 22
31525: PUSH
31526: LD_OWVAR 2
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 2
31537: PUSH
31538: LD_INT 30
31540: PUSH
31541: LD_INT 27
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 30
31550: PUSH
31551: LD_INT 26
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 30
31560: PUSH
31561: LD_INT 28
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PPUSH
31578: CALL_OW 69
31582: ST_TO_ADDR
// if not tmp then
31583: LD_VAR 0 2
31587: NOT
31588: IFFALSE 31592
// exit ;
31590: GO 31621
// for i in tmp do
31592: LD_ADDR_VAR 0 1
31596: PUSH
31597: LD_VAR 0 2
31601: PUSH
31602: FOR_IN
31603: IFFALSE 31619
// SetLives ( i , 1 ) ;
31605: LD_VAR 0 1
31609: PPUSH
31610: LD_INT 1
31612: PPUSH
31613: CALL_OW 234
31617: GO 31602
31619: POP
31620: POP
// end ;
31621: PPOPN 2
31623: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31624: LD_EXP 55
31628: PUSH
31629: LD_EXP 104
31633: AND
31634: IFFALSE 31921
31636: GO 31638
31638: DISABLE
31639: LD_INT 0
31641: PPUSH
31642: PPUSH
31643: PPUSH
// begin i := rand ( 1 , 7 ) ;
31644: LD_ADDR_VAR 0 1
31648: PUSH
31649: LD_INT 1
31651: PPUSH
31652: LD_INT 7
31654: PPUSH
31655: CALL_OW 12
31659: ST_TO_ADDR
// case i of 1 :
31660: LD_VAR 0 1
31664: PUSH
31665: LD_INT 1
31667: DOUBLE
31668: EQUAL
31669: IFTRUE 31673
31671: GO 31683
31673: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31674: LD_STRING earthquake(getX(game), 0, 32)
31676: PPUSH
31677: CALL_OW 559
31681: GO 31921
31683: LD_INT 2
31685: DOUBLE
31686: EQUAL
31687: IFTRUE 31691
31689: GO 31705
31691: POP
// begin ToLua ( displayStucuk(); ) ;
31692: LD_STRING displayStucuk();
31694: PPUSH
31695: CALL_OW 559
// ResetFog ;
31699: CALL_OW 335
// end ; 3 :
31703: GO 31921
31705: LD_INT 3
31707: DOUBLE
31708: EQUAL
31709: IFTRUE 31713
31711: GO 31817
31713: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31714: LD_ADDR_VAR 0 2
31718: PUSH
31719: LD_INT 22
31721: PUSH
31722: LD_OWVAR 2
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 25
31733: PUSH
31734: LD_INT 1
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PPUSH
31745: CALL_OW 69
31749: ST_TO_ADDR
// if not tmp then
31750: LD_VAR 0 2
31754: NOT
31755: IFFALSE 31759
// exit ;
31757: GO 31921
// un := tmp [ rand ( 1 , tmp ) ] ;
31759: LD_ADDR_VAR 0 3
31763: PUSH
31764: LD_VAR 0 2
31768: PUSH
31769: LD_INT 1
31771: PPUSH
31772: LD_VAR 0 2
31776: PPUSH
31777: CALL_OW 12
31781: ARRAY
31782: ST_TO_ADDR
// if Crawls ( un ) then
31783: LD_VAR 0 3
31787: PPUSH
31788: CALL_OW 318
31792: IFFALSE 31803
// ComWalk ( un ) ;
31794: LD_VAR 0 3
31798: PPUSH
31799: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31803: LD_VAR 0 3
31807: PPUSH
31808: LD_INT 8
31810: PPUSH
31811: CALL_OW 336
// end ; 4 :
31815: GO 31921
31817: LD_INT 4
31819: DOUBLE
31820: EQUAL
31821: IFTRUE 31825
31823: GO 31899
31825: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31826: LD_ADDR_VAR 0 2
31830: PUSH
31831: LD_INT 22
31833: PUSH
31834: LD_OWVAR 2
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 30
31845: PUSH
31846: LD_INT 29
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PPUSH
31857: CALL_OW 69
31861: ST_TO_ADDR
// if not tmp then
31862: LD_VAR 0 2
31866: NOT
31867: IFFALSE 31871
// exit ;
31869: GO 31921
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31871: LD_VAR 0 2
31875: PUSH
31876: LD_INT 1
31878: ARRAY
31879: PPUSH
31880: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31884: LD_VAR 0 2
31888: PUSH
31889: LD_INT 1
31891: ARRAY
31892: PPUSH
31893: CALL_OW 65
// end ; 5 .. 7 :
31897: GO 31921
31899: LD_INT 5
31901: DOUBLE
31902: GREATEREQUAL
31903: IFFALSE 31911
31905: LD_INT 7
31907: DOUBLE
31908: LESSEQUAL
31909: IFTRUE 31913
31911: GO 31920
31913: POP
// StreamSibBomb ; end ;
31914: CALL 28158 0 0
31918: GO 31921
31920: POP
// end ;
31921: PPOPN 3
31923: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31924: LD_EXP 55
31928: PUSH
31929: LD_EXP 105
31933: AND
31934: IFFALSE 32090
31936: GO 31938
31938: DISABLE
31939: LD_INT 0
31941: PPUSH
31942: PPUSH
31943: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31944: LD_ADDR_VAR 0 2
31948: PUSH
31949: LD_INT 81
31951: PUSH
31952: LD_OWVAR 2
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 2
31963: PUSH
31964: LD_INT 21
31966: PUSH
31967: LD_INT 1
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 21
31976: PUSH
31977: LD_INT 2
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: LIST
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PPUSH
31993: CALL_OW 69
31997: ST_TO_ADDR
// if not tmp then
31998: LD_VAR 0 2
32002: NOT
32003: IFFALSE 32007
// exit ;
32005: GO 32090
// p := 0 ;
32007: LD_ADDR_VAR 0 3
32011: PUSH
32012: LD_INT 0
32014: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32015: LD_INT 35
32017: PPUSH
32018: CALL_OW 67
// p := p + 1 ;
32022: LD_ADDR_VAR 0 3
32026: PUSH
32027: LD_VAR 0 3
32031: PUSH
32032: LD_INT 1
32034: PLUS
32035: ST_TO_ADDR
// for i in tmp do
32036: LD_ADDR_VAR 0 1
32040: PUSH
32041: LD_VAR 0 2
32045: PUSH
32046: FOR_IN
32047: IFFALSE 32078
// if GetLives ( i ) < 1000 then
32049: LD_VAR 0 1
32053: PPUSH
32054: CALL_OW 256
32058: PUSH
32059: LD_INT 1000
32061: LESS
32062: IFFALSE 32076
// SetLives ( i , 1000 ) ;
32064: LD_VAR 0 1
32068: PPUSH
32069: LD_INT 1000
32071: PPUSH
32072: CALL_OW 234
32076: GO 32046
32078: POP
32079: POP
// until p > 20 ;
32080: LD_VAR 0 3
32084: PUSH
32085: LD_INT 20
32087: GREATER
32088: IFFALSE 32015
// end ;
32090: PPOPN 3
32092: END
// every 0 0$1 trigger StreamModeActive and sTime do
32093: LD_EXP 55
32097: PUSH
32098: LD_EXP 106
32102: AND
32103: IFFALSE 32138
32105: GO 32107
32107: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
32108: LD_INT 28
32110: PPUSH
32111: LD_OWVAR 2
32115: PPUSH
32116: LD_INT 2
32118: PPUSH
32119: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32123: LD_INT 30
32125: PPUSH
32126: LD_OWVAR 2
32130: PPUSH
32131: LD_INT 2
32133: PPUSH
32134: CALL_OW 322
// end ;
32138: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32139: LD_EXP 55
32143: PUSH
32144: LD_EXP 107
32148: AND
32149: IFFALSE 32270
32151: GO 32153
32153: DISABLE
32154: LD_INT 0
32156: PPUSH
32157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32158: LD_ADDR_VAR 0 2
32162: PUSH
32163: LD_INT 22
32165: PUSH
32166: LD_OWVAR 2
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 21
32177: PUSH
32178: LD_INT 1
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 3
32187: PUSH
32188: LD_INT 23
32190: PUSH
32191: LD_INT 0
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: LIST
32206: PPUSH
32207: CALL_OW 69
32211: ST_TO_ADDR
// if not tmp then
32212: LD_VAR 0 2
32216: NOT
32217: IFFALSE 32221
// exit ;
32219: GO 32270
// for i in tmp do
32221: LD_ADDR_VAR 0 1
32225: PUSH
32226: LD_VAR 0 2
32230: PUSH
32231: FOR_IN
32232: IFFALSE 32268
// begin if Crawls ( i ) then
32234: LD_VAR 0 1
32238: PPUSH
32239: CALL_OW 318
32243: IFFALSE 32254
// ComWalk ( i ) ;
32245: LD_VAR 0 1
32249: PPUSH
32250: CALL_OW 138
// SetClass ( i , 2 ) ;
32254: LD_VAR 0 1
32258: PPUSH
32259: LD_INT 2
32261: PPUSH
32262: CALL_OW 336
// end ;
32266: GO 32231
32268: POP
32269: POP
// end ;
32270: PPOPN 2
32272: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32273: LD_EXP 55
32277: PUSH
32278: LD_EXP 108
32282: AND
32283: IFFALSE 32571
32285: GO 32287
32287: DISABLE
32288: LD_INT 0
32290: PPUSH
32291: PPUSH
32292: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32293: LD_OWVAR 2
32297: PPUSH
32298: LD_INT 9
32300: PPUSH
32301: LD_INT 1
32303: PPUSH
32304: LD_INT 1
32306: PPUSH
32307: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32311: LD_INT 9
32313: PPUSH
32314: LD_OWVAR 2
32318: PPUSH
32319: CALL_OW 343
// uc_side := 9 ;
32323: LD_ADDR_OWVAR 20
32327: PUSH
32328: LD_INT 9
32330: ST_TO_ADDR
// uc_nation := 2 ;
32331: LD_ADDR_OWVAR 21
32335: PUSH
32336: LD_INT 2
32338: ST_TO_ADDR
// hc_name := Dark Warrior ;
32339: LD_ADDR_OWVAR 26
32343: PUSH
32344: LD_STRING Dark Warrior
32346: ST_TO_ADDR
// hc_gallery :=  ;
32347: LD_ADDR_OWVAR 33
32351: PUSH
32352: LD_STRING 
32354: ST_TO_ADDR
// hc_noskilllimit := true ;
32355: LD_ADDR_OWVAR 76
32359: PUSH
32360: LD_INT 1
32362: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32363: LD_ADDR_OWVAR 31
32367: PUSH
32368: LD_INT 30
32370: PUSH
32371: LD_INT 30
32373: PUSH
32374: LD_INT 30
32376: PUSH
32377: LD_INT 30
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: ST_TO_ADDR
// un := CreateHuman ;
32386: LD_ADDR_VAR 0 3
32390: PUSH
32391: CALL_OW 44
32395: ST_TO_ADDR
// hc_noskilllimit := false ;
32396: LD_ADDR_OWVAR 76
32400: PUSH
32401: LD_INT 0
32403: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32404: LD_VAR 0 3
32408: PPUSH
32409: LD_INT 1
32411: PPUSH
32412: CALL_OW 51
// ToLua ( playRanger() ) ;
32416: LD_STRING playRanger()
32418: PPUSH
32419: CALL_OW 559
// p := 0 ;
32423: LD_ADDR_VAR 0 2
32427: PUSH
32428: LD_INT 0
32430: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32431: LD_INT 35
32433: PPUSH
32434: CALL_OW 67
// p := p + 1 ;
32438: LD_ADDR_VAR 0 2
32442: PUSH
32443: LD_VAR 0 2
32447: PUSH
32448: LD_INT 1
32450: PLUS
32451: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32452: LD_VAR 0 3
32456: PPUSH
32457: CALL_OW 256
32461: PUSH
32462: LD_INT 1000
32464: LESS
32465: IFFALSE 32479
// SetLives ( un , 1000 ) ;
32467: LD_VAR 0 3
32471: PPUSH
32472: LD_INT 1000
32474: PPUSH
32475: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32479: LD_VAR 0 3
32483: PPUSH
32484: LD_INT 81
32486: PUSH
32487: LD_OWVAR 2
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 91
32498: PUSH
32499: LD_VAR 0 3
32503: PUSH
32504: LD_INT 30
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: LIST
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PPUSH
32516: CALL_OW 69
32520: PPUSH
32521: LD_VAR 0 3
32525: PPUSH
32526: CALL_OW 74
32530: PPUSH
32531: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32535: LD_VAR 0 2
32539: PUSH
32540: LD_INT 80
32542: GREATER
32543: PUSH
32544: LD_VAR 0 3
32548: PPUSH
32549: CALL_OW 301
32553: OR
32554: IFFALSE 32431
// if un then
32556: LD_VAR 0 3
32560: IFFALSE 32571
// RemoveUnit ( un ) ;
32562: LD_VAR 0 3
32566: PPUSH
32567: CALL_OW 64
// end ;
32571: PPOPN 3
32573: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32574: LD_EXP 109
32578: IFFALSE 32694
32580: GO 32582
32582: DISABLE
32583: LD_INT 0
32585: PPUSH
32586: PPUSH
32587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32588: LD_ADDR_VAR 0 2
32592: PUSH
32593: LD_INT 81
32595: PUSH
32596: LD_OWVAR 2
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 21
32607: PUSH
32608: LD_INT 1
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PPUSH
32619: CALL_OW 69
32623: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32624: LD_STRING playComputer()
32626: PPUSH
32627: CALL_OW 559
// if not tmp then
32631: LD_VAR 0 2
32635: NOT
32636: IFFALSE 32640
// exit ;
32638: GO 32694
// for i in tmp do
32640: LD_ADDR_VAR 0 1
32644: PUSH
32645: LD_VAR 0 2
32649: PUSH
32650: FOR_IN
32651: IFFALSE 32692
// for j := 1 to 4 do
32653: LD_ADDR_VAR 0 3
32657: PUSH
32658: DOUBLE
32659: LD_INT 1
32661: DEC
32662: ST_TO_ADDR
32663: LD_INT 4
32665: PUSH
32666: FOR_TO
32667: IFFALSE 32688
// SetSkill ( i , j , 10 ) ;
32669: LD_VAR 0 1
32673: PPUSH
32674: LD_VAR 0 3
32678: PPUSH
32679: LD_INT 10
32681: PPUSH
32682: CALL_OW 237
32686: GO 32666
32688: POP
32689: POP
32690: GO 32650
32692: POP
32693: POP
// end ;
32694: PPOPN 3
32696: END
// every 0 0$1 trigger s30 do var i , tmp ;
32697: LD_EXP 110
32701: IFFALSE 32770
32703: GO 32705
32705: DISABLE
32706: LD_INT 0
32708: PPUSH
32709: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32710: LD_ADDR_VAR 0 2
32714: PUSH
32715: LD_INT 22
32717: PUSH
32718: LD_OWVAR 2
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PPUSH
32727: CALL_OW 69
32731: ST_TO_ADDR
// if not tmp then
32732: LD_VAR 0 2
32736: NOT
32737: IFFALSE 32741
// exit ;
32739: GO 32770
// for i in tmp do
32741: LD_ADDR_VAR 0 1
32745: PUSH
32746: LD_VAR 0 2
32750: PUSH
32751: FOR_IN
32752: IFFALSE 32768
// SetLives ( i , 300 ) ;
32754: LD_VAR 0 1
32758: PPUSH
32759: LD_INT 300
32761: PPUSH
32762: CALL_OW 234
32766: GO 32751
32768: POP
32769: POP
// end ;
32770: PPOPN 2
32772: END
// every 0 0$1 trigger s60 do var i , tmp ;
32773: LD_EXP 111
32777: IFFALSE 32846
32779: GO 32781
32781: DISABLE
32782: LD_INT 0
32784: PPUSH
32785: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32786: LD_ADDR_VAR 0 2
32790: PUSH
32791: LD_INT 22
32793: PUSH
32794: LD_OWVAR 2
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PPUSH
32803: CALL_OW 69
32807: ST_TO_ADDR
// if not tmp then
32808: LD_VAR 0 2
32812: NOT
32813: IFFALSE 32817
// exit ;
32815: GO 32846
// for i in tmp do
32817: LD_ADDR_VAR 0 1
32821: PUSH
32822: LD_VAR 0 2
32826: PUSH
32827: FOR_IN
32828: IFFALSE 32844
// SetLives ( i , 600 ) ;
32830: LD_VAR 0 1
32834: PPUSH
32835: LD_INT 600
32837: PPUSH
32838: CALL_OW 234
32842: GO 32827
32844: POP
32845: POP
// end ;
32846: PPOPN 2
32848: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32849: LD_INT 0
32851: PPUSH
// case cmd of 301 :
32852: LD_VAR 0 1
32856: PUSH
32857: LD_INT 301
32859: DOUBLE
32860: EQUAL
32861: IFTRUE 32865
32863: GO 32897
32865: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32866: LD_VAR 0 6
32870: PPUSH
32871: LD_VAR 0 7
32875: PPUSH
32876: LD_VAR 0 8
32880: PPUSH
32881: LD_VAR 0 4
32885: PPUSH
32886: LD_VAR 0 5
32890: PPUSH
32891: CALL 34106 0 5
32895: GO 33018
32897: LD_INT 302
32899: DOUBLE
32900: EQUAL
32901: IFTRUE 32905
32903: GO 32942
32905: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32906: LD_VAR 0 6
32910: PPUSH
32911: LD_VAR 0 7
32915: PPUSH
32916: LD_VAR 0 8
32920: PPUSH
32921: LD_VAR 0 9
32925: PPUSH
32926: LD_VAR 0 4
32930: PPUSH
32931: LD_VAR 0 5
32935: PPUSH
32936: CALL 34197 0 6
32940: GO 33018
32942: LD_INT 303
32944: DOUBLE
32945: EQUAL
32946: IFTRUE 32950
32948: GO 32987
32950: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32951: LD_VAR 0 6
32955: PPUSH
32956: LD_VAR 0 7
32960: PPUSH
32961: LD_VAR 0 8
32965: PPUSH
32966: LD_VAR 0 9
32970: PPUSH
32971: LD_VAR 0 4
32975: PPUSH
32976: LD_VAR 0 5
32980: PPUSH
32981: CALL 33023 0 6
32985: GO 33018
32987: LD_INT 304
32989: DOUBLE
32990: EQUAL
32991: IFTRUE 32995
32993: GO 33017
32995: POP
// hHackTeleport ( unit , x , y ) ; end ;
32996: LD_VAR 0 2
33000: PPUSH
33001: LD_VAR 0 4
33005: PPUSH
33006: LD_VAR 0 5
33010: PPUSH
33011: CALL 34790 0 3
33015: GO 33018
33017: POP
// end ;
33018: LD_VAR 0 12
33022: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
33023: LD_INT 0
33025: PPUSH
33026: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
33027: LD_VAR 0 1
33031: PUSH
33032: LD_INT 1
33034: LESS
33035: PUSH
33036: LD_VAR 0 1
33040: PUSH
33041: LD_INT 3
33043: GREATER
33044: OR
33045: PUSH
33046: LD_VAR 0 5
33050: PPUSH
33051: LD_VAR 0 6
33055: PPUSH
33056: CALL_OW 428
33060: OR
33061: IFFALSE 33065
// exit ;
33063: GO 33793
// uc_side := your_side ;
33065: LD_ADDR_OWVAR 20
33069: PUSH
33070: LD_OWVAR 2
33074: ST_TO_ADDR
// uc_nation := nation ;
33075: LD_ADDR_OWVAR 21
33079: PUSH
33080: LD_VAR 0 1
33084: ST_TO_ADDR
// bc_level = 1 ;
33085: LD_ADDR_OWVAR 43
33089: PUSH
33090: LD_INT 1
33092: ST_TO_ADDR
// case btype of 1 :
33093: LD_VAR 0 2
33097: PUSH
33098: LD_INT 1
33100: DOUBLE
33101: EQUAL
33102: IFTRUE 33106
33104: GO 33117
33106: POP
// bc_type := b_depot ; 2 :
33107: LD_ADDR_OWVAR 42
33111: PUSH
33112: LD_INT 0
33114: ST_TO_ADDR
33115: GO 33737
33117: LD_INT 2
33119: DOUBLE
33120: EQUAL
33121: IFTRUE 33125
33123: GO 33136
33125: POP
// bc_type := b_warehouse ; 3 :
33126: LD_ADDR_OWVAR 42
33130: PUSH
33131: LD_INT 1
33133: ST_TO_ADDR
33134: GO 33737
33136: LD_INT 3
33138: DOUBLE
33139: EQUAL
33140: IFTRUE 33144
33142: GO 33155
33144: POP
// bc_type := b_lab ; 4 .. 9 :
33145: LD_ADDR_OWVAR 42
33149: PUSH
33150: LD_INT 6
33152: ST_TO_ADDR
33153: GO 33737
33155: LD_INT 4
33157: DOUBLE
33158: GREATEREQUAL
33159: IFFALSE 33167
33161: LD_INT 9
33163: DOUBLE
33164: LESSEQUAL
33165: IFTRUE 33169
33167: GO 33229
33169: POP
// begin bc_type := b_lab_half ;
33170: LD_ADDR_OWVAR 42
33174: PUSH
33175: LD_INT 7
33177: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33178: LD_ADDR_OWVAR 44
33182: PUSH
33183: LD_INT 10
33185: PUSH
33186: LD_INT 11
33188: PUSH
33189: LD_INT 12
33191: PUSH
33192: LD_INT 15
33194: PUSH
33195: LD_INT 14
33197: PUSH
33198: LD_INT 13
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: PUSH
33209: LD_VAR 0 2
33213: PUSH
33214: LD_INT 3
33216: MINUS
33217: ARRAY
33218: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
33219: LD_ADDR_OWVAR 45
33223: PUSH
33224: LD_INT 9
33226: ST_TO_ADDR
// end ; 10 .. 13 :
33227: GO 33737
33229: LD_INT 10
33231: DOUBLE
33232: GREATEREQUAL
33233: IFFALSE 33241
33235: LD_INT 13
33237: DOUBLE
33238: LESSEQUAL
33239: IFTRUE 33243
33241: GO 33320
33243: POP
// begin bc_type := b_lab_full ;
33244: LD_ADDR_OWVAR 42
33248: PUSH
33249: LD_INT 8
33251: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33252: LD_ADDR_OWVAR 44
33256: PUSH
33257: LD_INT 10
33259: PUSH
33260: LD_INT 12
33262: PUSH
33263: LD_INT 14
33265: PUSH
33266: LD_INT 13
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: PUSH
33275: LD_VAR 0 2
33279: PUSH
33280: LD_INT 9
33282: MINUS
33283: ARRAY
33284: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33285: LD_ADDR_OWVAR 45
33289: PUSH
33290: LD_INT 11
33292: PUSH
33293: LD_INT 15
33295: PUSH
33296: LD_INT 12
33298: PUSH
33299: LD_INT 15
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: PUSH
33308: LD_VAR 0 2
33312: PUSH
33313: LD_INT 9
33315: MINUS
33316: ARRAY
33317: ST_TO_ADDR
// end ; 14 :
33318: GO 33737
33320: LD_INT 14
33322: DOUBLE
33323: EQUAL
33324: IFTRUE 33328
33326: GO 33339
33328: POP
// bc_type := b_workshop ; 15 :
33329: LD_ADDR_OWVAR 42
33333: PUSH
33334: LD_INT 2
33336: ST_TO_ADDR
33337: GO 33737
33339: LD_INT 15
33341: DOUBLE
33342: EQUAL
33343: IFTRUE 33347
33345: GO 33358
33347: POP
// bc_type := b_factory ; 16 :
33348: LD_ADDR_OWVAR 42
33352: PUSH
33353: LD_INT 3
33355: ST_TO_ADDR
33356: GO 33737
33358: LD_INT 16
33360: DOUBLE
33361: EQUAL
33362: IFTRUE 33366
33364: GO 33377
33366: POP
// bc_type := b_ext_gun ; 17 :
33367: LD_ADDR_OWVAR 42
33371: PUSH
33372: LD_INT 17
33374: ST_TO_ADDR
33375: GO 33737
33377: LD_INT 17
33379: DOUBLE
33380: EQUAL
33381: IFTRUE 33385
33383: GO 33413
33385: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33386: LD_ADDR_OWVAR 42
33390: PUSH
33391: LD_INT 19
33393: PUSH
33394: LD_INT 23
33396: PUSH
33397: LD_INT 19
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: LIST
33404: PUSH
33405: LD_VAR 0 1
33409: ARRAY
33410: ST_TO_ADDR
33411: GO 33737
33413: LD_INT 18
33415: DOUBLE
33416: EQUAL
33417: IFTRUE 33421
33419: GO 33432
33421: POP
// bc_type := b_ext_radar ; 19 :
33422: LD_ADDR_OWVAR 42
33426: PUSH
33427: LD_INT 20
33429: ST_TO_ADDR
33430: GO 33737
33432: LD_INT 19
33434: DOUBLE
33435: EQUAL
33436: IFTRUE 33440
33438: GO 33451
33440: POP
// bc_type := b_ext_radio ; 20 :
33441: LD_ADDR_OWVAR 42
33445: PUSH
33446: LD_INT 22
33448: ST_TO_ADDR
33449: GO 33737
33451: LD_INT 20
33453: DOUBLE
33454: EQUAL
33455: IFTRUE 33459
33457: GO 33470
33459: POP
// bc_type := b_ext_siberium ; 21 :
33460: LD_ADDR_OWVAR 42
33464: PUSH
33465: LD_INT 21
33467: ST_TO_ADDR
33468: GO 33737
33470: LD_INT 21
33472: DOUBLE
33473: EQUAL
33474: IFTRUE 33478
33476: GO 33489
33478: POP
// bc_type := b_ext_computer ; 22 :
33479: LD_ADDR_OWVAR 42
33483: PUSH
33484: LD_INT 24
33486: ST_TO_ADDR
33487: GO 33737
33489: LD_INT 22
33491: DOUBLE
33492: EQUAL
33493: IFTRUE 33497
33495: GO 33508
33497: POP
// bc_type := b_ext_track ; 23 :
33498: LD_ADDR_OWVAR 42
33502: PUSH
33503: LD_INT 16
33505: ST_TO_ADDR
33506: GO 33737
33508: LD_INT 23
33510: DOUBLE
33511: EQUAL
33512: IFTRUE 33516
33514: GO 33527
33516: POP
// bc_type := b_ext_laser ; 24 :
33517: LD_ADDR_OWVAR 42
33521: PUSH
33522: LD_INT 25
33524: ST_TO_ADDR
33525: GO 33737
33527: LD_INT 24
33529: DOUBLE
33530: EQUAL
33531: IFTRUE 33535
33533: GO 33546
33535: POP
// bc_type := b_control_tower ; 25 :
33536: LD_ADDR_OWVAR 42
33540: PUSH
33541: LD_INT 36
33543: ST_TO_ADDR
33544: GO 33737
33546: LD_INT 25
33548: DOUBLE
33549: EQUAL
33550: IFTRUE 33554
33552: GO 33565
33554: POP
// bc_type := b_breastwork ; 26 :
33555: LD_ADDR_OWVAR 42
33559: PUSH
33560: LD_INT 31
33562: ST_TO_ADDR
33563: GO 33737
33565: LD_INT 26
33567: DOUBLE
33568: EQUAL
33569: IFTRUE 33573
33571: GO 33584
33573: POP
// bc_type := b_bunker ; 27 :
33574: LD_ADDR_OWVAR 42
33578: PUSH
33579: LD_INT 32
33581: ST_TO_ADDR
33582: GO 33737
33584: LD_INT 27
33586: DOUBLE
33587: EQUAL
33588: IFTRUE 33592
33590: GO 33603
33592: POP
// bc_type := b_turret ; 28 :
33593: LD_ADDR_OWVAR 42
33597: PUSH
33598: LD_INT 33
33600: ST_TO_ADDR
33601: GO 33737
33603: LD_INT 28
33605: DOUBLE
33606: EQUAL
33607: IFTRUE 33611
33609: GO 33622
33611: POP
// bc_type := b_armoury ; 29 :
33612: LD_ADDR_OWVAR 42
33616: PUSH
33617: LD_INT 4
33619: ST_TO_ADDR
33620: GO 33737
33622: LD_INT 29
33624: DOUBLE
33625: EQUAL
33626: IFTRUE 33630
33628: GO 33641
33630: POP
// bc_type := b_barracks ; 30 :
33631: LD_ADDR_OWVAR 42
33635: PUSH
33636: LD_INT 5
33638: ST_TO_ADDR
33639: GO 33737
33641: LD_INT 30
33643: DOUBLE
33644: EQUAL
33645: IFTRUE 33649
33647: GO 33660
33649: POP
// bc_type := b_solar_power ; 31 :
33650: LD_ADDR_OWVAR 42
33654: PUSH
33655: LD_INT 27
33657: ST_TO_ADDR
33658: GO 33737
33660: LD_INT 31
33662: DOUBLE
33663: EQUAL
33664: IFTRUE 33668
33666: GO 33679
33668: POP
// bc_type := b_oil_power ; 32 :
33669: LD_ADDR_OWVAR 42
33673: PUSH
33674: LD_INT 26
33676: ST_TO_ADDR
33677: GO 33737
33679: LD_INT 32
33681: DOUBLE
33682: EQUAL
33683: IFTRUE 33687
33685: GO 33698
33687: POP
// bc_type := b_siberite_power ; 33 :
33688: LD_ADDR_OWVAR 42
33692: PUSH
33693: LD_INT 28
33695: ST_TO_ADDR
33696: GO 33737
33698: LD_INT 33
33700: DOUBLE
33701: EQUAL
33702: IFTRUE 33706
33704: GO 33717
33706: POP
// bc_type := b_oil_mine ; 34 :
33707: LD_ADDR_OWVAR 42
33711: PUSH
33712: LD_INT 29
33714: ST_TO_ADDR
33715: GO 33737
33717: LD_INT 34
33719: DOUBLE
33720: EQUAL
33721: IFTRUE 33725
33723: GO 33736
33725: POP
// bc_type := b_siberite_mine ; end ;
33726: LD_ADDR_OWVAR 42
33730: PUSH
33731: LD_INT 30
33733: ST_TO_ADDR
33734: GO 33737
33736: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33737: LD_ADDR_VAR 0 8
33741: PUSH
33742: LD_VAR 0 5
33746: PPUSH
33747: LD_VAR 0 6
33751: PPUSH
33752: LD_VAR 0 3
33756: PPUSH
33757: CALL_OW 47
33761: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33762: LD_OWVAR 42
33766: PUSH
33767: LD_INT 32
33769: PUSH
33770: LD_INT 33
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: IN
33777: IFFALSE 33793
// PlaceWeaponTurret ( b , weapon ) ;
33779: LD_VAR 0 8
33783: PPUSH
33784: LD_VAR 0 4
33788: PPUSH
33789: CALL_OW 431
// end ;
33793: LD_VAR 0 7
33797: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33798: LD_INT 0
33800: PPUSH
33801: PPUSH
33802: PPUSH
33803: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33804: LD_ADDR_VAR 0 4
33808: PUSH
33809: LD_INT 22
33811: PUSH
33812: LD_OWVAR 2
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 2
33823: PUSH
33824: LD_INT 30
33826: PUSH
33827: LD_INT 0
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 30
33836: PUSH
33837: LD_INT 1
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: LIST
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PPUSH
33853: CALL_OW 69
33857: ST_TO_ADDR
// if not tmp then
33858: LD_VAR 0 4
33862: NOT
33863: IFFALSE 33867
// exit ;
33865: GO 33926
// for i in tmp do
33867: LD_ADDR_VAR 0 2
33871: PUSH
33872: LD_VAR 0 4
33876: PUSH
33877: FOR_IN
33878: IFFALSE 33924
// for j = 1 to 3 do
33880: LD_ADDR_VAR 0 3
33884: PUSH
33885: DOUBLE
33886: LD_INT 1
33888: DEC
33889: ST_TO_ADDR
33890: LD_INT 3
33892: PUSH
33893: FOR_TO
33894: IFFALSE 33920
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33896: LD_VAR 0 2
33900: PPUSH
33901: CALL_OW 274
33905: PPUSH
33906: LD_VAR 0 3
33910: PPUSH
33911: LD_INT 99999
33913: PPUSH
33914: CALL_OW 277
33918: GO 33893
33920: POP
33921: POP
33922: GO 33877
33924: POP
33925: POP
// end ;
33926: LD_VAR 0 1
33930: RET
// export function hHackSetLevel10 ; var i , j ; begin
33931: LD_INT 0
33933: PPUSH
33934: PPUSH
33935: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33936: LD_ADDR_VAR 0 2
33940: PUSH
33941: LD_INT 21
33943: PUSH
33944: LD_INT 1
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PPUSH
33951: CALL_OW 69
33955: PUSH
33956: FOR_IN
33957: IFFALSE 34009
// if IsSelected ( i ) then
33959: LD_VAR 0 2
33963: PPUSH
33964: CALL_OW 306
33968: IFFALSE 34007
// begin for j := 1 to 4 do
33970: LD_ADDR_VAR 0 3
33974: PUSH
33975: DOUBLE
33976: LD_INT 1
33978: DEC
33979: ST_TO_ADDR
33980: LD_INT 4
33982: PUSH
33983: FOR_TO
33984: IFFALSE 34005
// SetSkill ( i , j , 10 ) ;
33986: LD_VAR 0 2
33990: PPUSH
33991: LD_VAR 0 3
33995: PPUSH
33996: LD_INT 10
33998: PPUSH
33999: CALL_OW 237
34003: GO 33983
34005: POP
34006: POP
// end ;
34007: GO 33956
34009: POP
34010: POP
// end ;
34011: LD_VAR 0 1
34015: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34016: LD_INT 0
34018: PPUSH
34019: PPUSH
34020: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34021: LD_ADDR_VAR 0 2
34025: PUSH
34026: LD_INT 22
34028: PUSH
34029: LD_OWVAR 2
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 21
34040: PUSH
34041: LD_INT 1
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PPUSH
34052: CALL_OW 69
34056: PUSH
34057: FOR_IN
34058: IFFALSE 34099
// begin for j := 1 to 4 do
34060: LD_ADDR_VAR 0 3
34064: PUSH
34065: DOUBLE
34066: LD_INT 1
34068: DEC
34069: ST_TO_ADDR
34070: LD_INT 4
34072: PUSH
34073: FOR_TO
34074: IFFALSE 34095
// SetSkill ( i , j , 10 ) ;
34076: LD_VAR 0 2
34080: PPUSH
34081: LD_VAR 0 3
34085: PPUSH
34086: LD_INT 10
34088: PPUSH
34089: CALL_OW 237
34093: GO 34073
34095: POP
34096: POP
// end ;
34097: GO 34057
34099: POP
34100: POP
// end ;
34101: LD_VAR 0 1
34105: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
34106: LD_INT 0
34108: PPUSH
// uc_side := your_side ;
34109: LD_ADDR_OWVAR 20
34113: PUSH
34114: LD_OWVAR 2
34118: ST_TO_ADDR
// uc_nation := nation ;
34119: LD_ADDR_OWVAR 21
34123: PUSH
34124: LD_VAR 0 1
34128: ST_TO_ADDR
// InitHc ;
34129: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34133: LD_INT 0
34135: PPUSH
34136: LD_VAR 0 2
34140: PPUSH
34141: LD_VAR 0 3
34145: PPUSH
34146: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
34150: LD_VAR 0 4
34154: PPUSH
34155: LD_VAR 0 5
34159: PPUSH
34160: CALL_OW 428
34164: PUSH
34165: LD_INT 0
34167: EQUAL
34168: IFFALSE 34192
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34170: CALL_OW 44
34174: PPUSH
34175: LD_VAR 0 4
34179: PPUSH
34180: LD_VAR 0 5
34184: PPUSH
34185: LD_INT 1
34187: PPUSH
34188: CALL_OW 48
// end ;
34192: LD_VAR 0 6
34196: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34197: LD_INT 0
34199: PPUSH
34200: PPUSH
// uc_side := your_side ;
34201: LD_ADDR_OWVAR 20
34205: PUSH
34206: LD_OWVAR 2
34210: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34211: LD_VAR 0 1
34215: PUSH
34216: LD_INT 1
34218: PUSH
34219: LD_INT 2
34221: PUSH
34222: LD_INT 3
34224: PUSH
34225: LD_INT 4
34227: PUSH
34228: LD_INT 5
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: IN
34238: IFFALSE 34250
// uc_nation := nation_american else
34240: LD_ADDR_OWVAR 21
34244: PUSH
34245: LD_INT 1
34247: ST_TO_ADDR
34248: GO 34293
// if chassis in [ 11 , 12 , 13 , 14 ] then
34250: LD_VAR 0 1
34254: PUSH
34255: LD_INT 11
34257: PUSH
34258: LD_INT 12
34260: PUSH
34261: LD_INT 13
34263: PUSH
34264: LD_INT 14
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: IN
34273: IFFALSE 34285
// uc_nation := nation_arabian else
34275: LD_ADDR_OWVAR 21
34279: PUSH
34280: LD_INT 2
34282: ST_TO_ADDR
34283: GO 34293
// uc_nation := nation_russian ;
34285: LD_ADDR_OWVAR 21
34289: PUSH
34290: LD_INT 3
34292: ST_TO_ADDR
// vc_chassis := chassis ;
34293: LD_ADDR_OWVAR 37
34297: PUSH
34298: LD_VAR 0 1
34302: ST_TO_ADDR
// vc_engine := engine ;
34303: LD_ADDR_OWVAR 39
34307: PUSH
34308: LD_VAR 0 2
34312: ST_TO_ADDR
// vc_control := control ;
34313: LD_ADDR_OWVAR 38
34317: PUSH
34318: LD_VAR 0 3
34322: ST_TO_ADDR
// vc_weapon := weapon ;
34323: LD_ADDR_OWVAR 40
34327: PUSH
34328: LD_VAR 0 4
34332: ST_TO_ADDR
// un := CreateVehicle ;
34333: LD_ADDR_VAR 0 8
34337: PUSH
34338: CALL_OW 45
34342: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34343: LD_VAR 0 8
34347: PPUSH
34348: LD_INT 0
34350: PPUSH
34351: LD_INT 5
34353: PPUSH
34354: CALL_OW 12
34358: PPUSH
34359: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34363: LD_VAR 0 8
34367: PPUSH
34368: LD_VAR 0 5
34372: PPUSH
34373: LD_VAR 0 6
34377: PPUSH
34378: LD_INT 1
34380: PPUSH
34381: CALL_OW 48
// end ;
34385: LD_VAR 0 7
34389: RET
// export hInvincible ; every 1 do
34390: GO 34392
34392: DISABLE
// hInvincible := [ ] ;
34393: LD_ADDR_EXP 112
34397: PUSH
34398: EMPTY
34399: ST_TO_ADDR
34400: END
// every 10 do var i ;
34401: GO 34403
34403: DISABLE
34404: LD_INT 0
34406: PPUSH
// begin enable ;
34407: ENABLE
// if not hInvincible then
34408: LD_EXP 112
34412: NOT
34413: IFFALSE 34417
// exit ;
34415: GO 34461
// for i in hInvincible do
34417: LD_ADDR_VAR 0 1
34421: PUSH
34422: LD_EXP 112
34426: PUSH
34427: FOR_IN
34428: IFFALSE 34459
// if GetLives ( i ) < 1000 then
34430: LD_VAR 0 1
34434: PPUSH
34435: CALL_OW 256
34439: PUSH
34440: LD_INT 1000
34442: LESS
34443: IFFALSE 34457
// SetLives ( i , 1000 ) ;
34445: LD_VAR 0 1
34449: PPUSH
34450: LD_INT 1000
34452: PPUSH
34453: CALL_OW 234
34457: GO 34427
34459: POP
34460: POP
// end ;
34461: PPOPN 1
34463: END
// export function hHackInvincible ; var i ; begin
34464: LD_INT 0
34466: PPUSH
34467: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34468: LD_ADDR_VAR 0 2
34472: PUSH
34473: LD_INT 2
34475: PUSH
34476: LD_INT 21
34478: PUSH
34479: LD_INT 1
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 21
34488: PUSH
34489: LD_INT 2
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: LIST
34500: PPUSH
34501: CALL_OW 69
34505: PUSH
34506: FOR_IN
34507: IFFALSE 34568
// if IsSelected ( i ) then
34509: LD_VAR 0 2
34513: PPUSH
34514: CALL_OW 306
34518: IFFALSE 34566
// begin if i in hInvincible then
34520: LD_VAR 0 2
34524: PUSH
34525: LD_EXP 112
34529: IN
34530: IFFALSE 34550
// hInvincible := hInvincible diff i else
34532: LD_ADDR_EXP 112
34536: PUSH
34537: LD_EXP 112
34541: PUSH
34542: LD_VAR 0 2
34546: DIFF
34547: ST_TO_ADDR
34548: GO 34566
// hInvincible := hInvincible union i ;
34550: LD_ADDR_EXP 112
34554: PUSH
34555: LD_EXP 112
34559: PUSH
34560: LD_VAR 0 2
34564: UNION
34565: ST_TO_ADDR
// end ;
34566: GO 34506
34568: POP
34569: POP
// end ;
34570: LD_VAR 0 1
34574: RET
// export function hHackInvisible ; var i , j ; begin
34575: LD_INT 0
34577: PPUSH
34578: PPUSH
34579: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34580: LD_ADDR_VAR 0 2
34584: PUSH
34585: LD_INT 21
34587: PUSH
34588: LD_INT 1
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PPUSH
34595: CALL_OW 69
34599: PUSH
34600: FOR_IN
34601: IFFALSE 34625
// if IsSelected ( i ) then
34603: LD_VAR 0 2
34607: PPUSH
34608: CALL_OW 306
34612: IFFALSE 34623
// ComForceInvisible ( i ) ;
34614: LD_VAR 0 2
34618: PPUSH
34619: CALL_OW 496
34623: GO 34600
34625: POP
34626: POP
// end ;
34627: LD_VAR 0 1
34631: RET
// export function hHackChangeYourSide ; begin
34632: LD_INT 0
34634: PPUSH
// if your_side = 8 then
34635: LD_OWVAR 2
34639: PUSH
34640: LD_INT 8
34642: EQUAL
34643: IFFALSE 34655
// your_side := 0 else
34645: LD_ADDR_OWVAR 2
34649: PUSH
34650: LD_INT 0
34652: ST_TO_ADDR
34653: GO 34669
// your_side := your_side + 1 ;
34655: LD_ADDR_OWVAR 2
34659: PUSH
34660: LD_OWVAR 2
34664: PUSH
34665: LD_INT 1
34667: PLUS
34668: ST_TO_ADDR
// end ;
34669: LD_VAR 0 1
34673: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34674: LD_INT 0
34676: PPUSH
34677: PPUSH
34678: PPUSH
// for i in all_units do
34679: LD_ADDR_VAR 0 2
34683: PUSH
34684: LD_OWVAR 3
34688: PUSH
34689: FOR_IN
34690: IFFALSE 34768
// if IsSelected ( i ) then
34692: LD_VAR 0 2
34696: PPUSH
34697: CALL_OW 306
34701: IFFALSE 34766
// begin j := GetSide ( i ) ;
34703: LD_ADDR_VAR 0 3
34707: PUSH
34708: LD_VAR 0 2
34712: PPUSH
34713: CALL_OW 255
34717: ST_TO_ADDR
// if j = 8 then
34718: LD_VAR 0 3
34722: PUSH
34723: LD_INT 8
34725: EQUAL
34726: IFFALSE 34738
// j := 0 else
34728: LD_ADDR_VAR 0 3
34732: PUSH
34733: LD_INT 0
34735: ST_TO_ADDR
34736: GO 34752
// j := j + 1 ;
34738: LD_ADDR_VAR 0 3
34742: PUSH
34743: LD_VAR 0 3
34747: PUSH
34748: LD_INT 1
34750: PLUS
34751: ST_TO_ADDR
// SetSide ( i , j ) ;
34752: LD_VAR 0 2
34756: PPUSH
34757: LD_VAR 0 3
34761: PPUSH
34762: CALL_OW 235
// end ;
34766: GO 34689
34768: POP
34769: POP
// end ;
34770: LD_VAR 0 1
34774: RET
// export function hHackFog ; begin
34775: LD_INT 0
34777: PPUSH
// FogOff ( true ) ;
34778: LD_INT 1
34780: PPUSH
34781: CALL_OW 344
// end ;
34785: LD_VAR 0 1
34789: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34790: LD_INT 0
34792: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34793: LD_VAR 0 1
34797: PPUSH
34798: LD_VAR 0 2
34802: PPUSH
34803: LD_VAR 0 3
34807: PPUSH
34808: LD_INT 1
34810: PPUSH
34811: LD_INT 1
34813: PPUSH
34814: CALL_OW 483
// CenterOnXY ( x , y ) ;
34818: LD_VAR 0 2
34822: PPUSH
34823: LD_VAR 0 3
34827: PPUSH
34828: CALL_OW 84
// end ;
34832: LD_VAR 0 4
34836: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34837: LD_INT 0
34839: PPUSH
34840: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34841: LD_VAR 0 1
34845: NOT
34846: PUSH
34847: LD_VAR 0 2
34851: PPUSH
34852: LD_VAR 0 3
34856: PPUSH
34857: CALL_OW 488
34861: NOT
34862: OR
34863: PUSH
34864: LD_VAR 0 1
34868: PPUSH
34869: CALL_OW 266
34873: PUSH
34874: LD_INT 3
34876: NONEQUAL
34877: PUSH
34878: LD_VAR 0 1
34882: PPUSH
34883: CALL_OW 247
34887: PUSH
34888: LD_INT 1
34890: EQUAL
34891: NOT
34892: AND
34893: OR
34894: IFFALSE 34898
// exit ;
34896: GO 35180
// if GetType ( factory ) = unit_human then
34898: LD_VAR 0 1
34902: PPUSH
34903: CALL_OW 247
34907: PUSH
34908: LD_INT 1
34910: EQUAL
34911: IFFALSE 34928
// factory := IsInUnit ( factory ) ;
34913: LD_ADDR_VAR 0 1
34917: PUSH
34918: LD_VAR 0 1
34922: PPUSH
34923: CALL_OW 310
34927: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34928: LD_VAR 0 1
34932: PPUSH
34933: CALL_OW 266
34937: PUSH
34938: LD_INT 3
34940: NONEQUAL
34941: IFFALSE 34945
// exit ;
34943: GO 35180
// for i := 1 to Count ( factoryWaypoints ) do
34945: LD_ADDR_VAR 0 5
34949: PUSH
34950: DOUBLE
34951: LD_INT 1
34953: DEC
34954: ST_TO_ADDR
34955: LD_EXP 113
34959: PPUSH
34960: CALL 38399 0 1
34964: PUSH
34965: FOR_TO
34966: IFFALSE 35128
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
34968: LD_VAR 0 2
34972: PPUSH
34973: LD_VAR 0 3
34977: PPUSH
34978: CALL_OW 428
34982: PUSH
34983: LD_EXP 113
34987: PUSH
34988: LD_VAR 0 5
34992: ARRAY
34993: PUSH
34994: LD_INT 2
34996: ARRAY
34997: EQUAL
34998: IFFALSE 35030
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
35000: LD_ADDR_EXP 113
35004: PUSH
35005: LD_EXP 113
35009: PPUSH
35010: LD_VAR 0 5
35014: PPUSH
35015: CALL_OW 3
35019: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35020: CALL 35185 0 0
// exit ;
35024: POP
35025: POP
35026: GO 35180
// end else
35028: GO 35126
// if factory = factoryWaypoints [ i ] [ 2 ] then
35030: LD_VAR 0 1
35034: PUSH
35035: LD_EXP 113
35039: PUSH
35040: LD_VAR 0 5
35044: ARRAY
35045: PUSH
35046: LD_INT 2
35048: ARRAY
35049: EQUAL
35050: IFFALSE 35126
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
35052: LD_ADDR_EXP 113
35056: PUSH
35057: LD_EXP 113
35061: PPUSH
35062: LD_VAR 0 5
35066: PPUSH
35067: CALL_OW 3
35071: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
35072: LD_ADDR_EXP 113
35076: PUSH
35077: LD_EXP 113
35081: PPUSH
35082: LD_VAR 0 1
35086: PPUSH
35087: CALL_OW 255
35091: PUSH
35092: LD_VAR 0 1
35096: PUSH
35097: LD_VAR 0 2
35101: PUSH
35102: LD_VAR 0 3
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: PPUSH
35113: CALL 74008 0 2
35117: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35118: CALL 35185 0 0
// exit ;
35122: POP
35123: POP
35124: GO 35180
// end ; end ;
35126: GO 34965
35128: POP
35129: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
35130: LD_ADDR_EXP 113
35134: PUSH
35135: LD_EXP 113
35139: PPUSH
35140: LD_VAR 0 1
35144: PPUSH
35145: CALL_OW 255
35149: PUSH
35150: LD_VAR 0 1
35154: PUSH
35155: LD_VAR 0 2
35159: PUSH
35160: LD_VAR 0 3
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: PPUSH
35171: CALL 74008 0 2
35175: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35176: CALL 35185 0 0
// end ;
35180: LD_VAR 0 4
35184: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
35185: LD_INT 0
35187: PPUSH
35188: PPUSH
35189: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35190: LD_STRING resetFactoryWaypoint();
35192: PPUSH
35193: CALL_OW 559
// if factoryWaypoints then
35197: LD_EXP 113
35201: IFFALSE 35322
// begin list := factoryWaypoints ;
35203: LD_ADDR_VAR 0 3
35207: PUSH
35208: LD_EXP 113
35212: ST_TO_ADDR
// for i := 1 to list do
35213: LD_ADDR_VAR 0 2
35217: PUSH
35218: DOUBLE
35219: LD_INT 1
35221: DEC
35222: ST_TO_ADDR
35223: LD_VAR 0 3
35227: PUSH
35228: FOR_TO
35229: IFFALSE 35320
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35231: LD_STRING setFactoryWaypointXY(
35233: PUSH
35234: LD_VAR 0 3
35238: PUSH
35239: LD_VAR 0 2
35243: ARRAY
35244: PUSH
35245: LD_INT 1
35247: ARRAY
35248: STR
35249: PUSH
35250: LD_STRING ,
35252: STR
35253: PUSH
35254: LD_VAR 0 3
35258: PUSH
35259: LD_VAR 0 2
35263: ARRAY
35264: PUSH
35265: LD_INT 2
35267: ARRAY
35268: STR
35269: PUSH
35270: LD_STRING ,
35272: STR
35273: PUSH
35274: LD_VAR 0 3
35278: PUSH
35279: LD_VAR 0 2
35283: ARRAY
35284: PUSH
35285: LD_INT 3
35287: ARRAY
35288: STR
35289: PUSH
35290: LD_STRING ,
35292: STR
35293: PUSH
35294: LD_VAR 0 3
35298: PUSH
35299: LD_VAR 0 2
35303: ARRAY
35304: PUSH
35305: LD_INT 4
35307: ARRAY
35308: STR
35309: PUSH
35310: LD_STRING )
35312: STR
35313: PPUSH
35314: CALL_OW 559
35318: GO 35228
35320: POP
35321: POP
// end ; end ;
35322: LD_VAR 0 1
35326: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35327: LD_INT 0
35329: PPUSH
// if HexInfo ( x , y ) = warehouse then
35330: LD_VAR 0 2
35334: PPUSH
35335: LD_VAR 0 3
35339: PPUSH
35340: CALL_OW 428
35344: PUSH
35345: LD_VAR 0 1
35349: EQUAL
35350: IFFALSE 35377
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35352: LD_ADDR_EXP 114
35356: PUSH
35357: LD_EXP 114
35361: PPUSH
35362: LD_VAR 0 1
35366: PPUSH
35367: LD_INT 0
35369: PPUSH
35370: CALL_OW 1
35374: ST_TO_ADDR
35375: GO 35428
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35377: LD_ADDR_EXP 114
35381: PUSH
35382: LD_EXP 114
35386: PPUSH
35387: LD_VAR 0 1
35391: PPUSH
35392: LD_VAR 0 1
35396: PPUSH
35397: CALL_OW 255
35401: PUSH
35402: LD_VAR 0 1
35406: PUSH
35407: LD_VAR 0 2
35411: PUSH
35412: LD_VAR 0 3
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: PPUSH
35423: CALL_OW 1
35427: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35428: CALL 35437 0 0
// end ;
35432: LD_VAR 0 4
35436: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35437: LD_INT 0
35439: PPUSH
35440: PPUSH
35441: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35442: LD_STRING resetWarehouseGatheringPoints();
35444: PPUSH
35445: CALL_OW 559
// if warehouseGatheringPoints then
35449: LD_EXP 114
35453: IFFALSE 35579
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35455: LD_ADDR_VAR 0 3
35459: PUSH
35460: LD_EXP 114
35464: PPUSH
35465: CALL 77770 0 1
35469: ST_TO_ADDR
// for i := 1 to list do
35470: LD_ADDR_VAR 0 2
35474: PUSH
35475: DOUBLE
35476: LD_INT 1
35478: DEC
35479: ST_TO_ADDR
35480: LD_VAR 0 3
35484: PUSH
35485: FOR_TO
35486: IFFALSE 35577
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35488: LD_STRING setWarehouseGatheringPointXY(
35490: PUSH
35491: LD_VAR 0 3
35495: PUSH
35496: LD_VAR 0 2
35500: ARRAY
35501: PUSH
35502: LD_INT 1
35504: ARRAY
35505: STR
35506: PUSH
35507: LD_STRING ,
35509: STR
35510: PUSH
35511: LD_VAR 0 3
35515: PUSH
35516: LD_VAR 0 2
35520: ARRAY
35521: PUSH
35522: LD_INT 2
35524: ARRAY
35525: STR
35526: PUSH
35527: LD_STRING ,
35529: STR
35530: PUSH
35531: LD_VAR 0 3
35535: PUSH
35536: LD_VAR 0 2
35540: ARRAY
35541: PUSH
35542: LD_INT 3
35544: ARRAY
35545: STR
35546: PUSH
35547: LD_STRING ,
35549: STR
35550: PUSH
35551: LD_VAR 0 3
35555: PUSH
35556: LD_VAR 0 2
35560: ARRAY
35561: PUSH
35562: LD_INT 4
35564: ARRAY
35565: STR
35566: PUSH
35567: LD_STRING )
35569: STR
35570: PPUSH
35571: CALL_OW 559
35575: GO 35485
35577: POP
35578: POP
// end ; end ;
35579: LD_VAR 0 1
35583: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35584: LD_EXP 114
35588: IFFALSE 36273
35590: GO 35592
35592: DISABLE
35593: LD_INT 0
35595: PPUSH
35596: PPUSH
35597: PPUSH
35598: PPUSH
35599: PPUSH
35600: PPUSH
35601: PPUSH
35602: PPUSH
35603: PPUSH
// begin enable ;
35604: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35605: LD_ADDR_VAR 0 3
35609: PUSH
35610: LD_EXP 114
35614: PPUSH
35615: CALL 77770 0 1
35619: ST_TO_ADDR
// if not list then
35620: LD_VAR 0 3
35624: NOT
35625: IFFALSE 35629
// exit ;
35627: GO 36273
// for i := 1 to list do
35629: LD_ADDR_VAR 0 1
35633: PUSH
35634: DOUBLE
35635: LD_INT 1
35637: DEC
35638: ST_TO_ADDR
35639: LD_VAR 0 3
35643: PUSH
35644: FOR_TO
35645: IFFALSE 36271
// begin depot := list [ i ] [ 2 ] ;
35647: LD_ADDR_VAR 0 8
35651: PUSH
35652: LD_VAR 0 3
35656: PUSH
35657: LD_VAR 0 1
35661: ARRAY
35662: PUSH
35663: LD_INT 2
35665: ARRAY
35666: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35667: LD_ADDR_VAR 0 5
35671: PUSH
35672: LD_VAR 0 3
35676: PUSH
35677: LD_VAR 0 1
35681: ARRAY
35682: PUSH
35683: LD_INT 1
35685: ARRAY
35686: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35687: LD_VAR 0 8
35691: PPUSH
35692: CALL_OW 301
35696: PUSH
35697: LD_VAR 0 5
35701: PUSH
35702: LD_VAR 0 8
35706: PPUSH
35707: CALL_OW 255
35711: NONEQUAL
35712: OR
35713: IFFALSE 35742
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35715: LD_ADDR_EXP 114
35719: PUSH
35720: LD_EXP 114
35724: PPUSH
35725: LD_VAR 0 8
35729: PPUSH
35730: LD_INT 0
35732: PPUSH
35733: CALL_OW 1
35737: ST_TO_ADDR
// exit ;
35738: POP
35739: POP
35740: GO 36273
// end ; x := list [ i ] [ 3 ] ;
35742: LD_ADDR_VAR 0 6
35746: PUSH
35747: LD_VAR 0 3
35751: PUSH
35752: LD_VAR 0 1
35756: ARRAY
35757: PUSH
35758: LD_INT 3
35760: ARRAY
35761: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35762: LD_ADDR_VAR 0 7
35766: PUSH
35767: LD_VAR 0 3
35771: PUSH
35772: LD_VAR 0 1
35776: ARRAY
35777: PUSH
35778: LD_INT 4
35780: ARRAY
35781: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35782: LD_ADDR_VAR 0 9
35786: PUSH
35787: LD_VAR 0 6
35791: PPUSH
35792: LD_VAR 0 7
35796: PPUSH
35797: LD_INT 16
35799: PPUSH
35800: CALL 76354 0 3
35804: ST_TO_ADDR
// if not cratesNearbyPoint then
35805: LD_VAR 0 9
35809: NOT
35810: IFFALSE 35816
// exit ;
35812: POP
35813: POP
35814: GO 36273
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35816: LD_ADDR_VAR 0 4
35820: PUSH
35821: LD_INT 22
35823: PUSH
35824: LD_VAR 0 5
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 3
35835: PUSH
35836: LD_INT 60
35838: PUSH
35839: EMPTY
35840: LIST
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 91
35848: PUSH
35849: LD_VAR 0 8
35853: PUSH
35854: LD_INT 6
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 2
35864: PUSH
35865: LD_INT 25
35867: PUSH
35868: LD_INT 2
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 25
35877: PUSH
35878: LD_INT 16
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: LIST
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: PPUSH
35896: CALL_OW 69
35900: PUSH
35901: LD_VAR 0 8
35905: PPUSH
35906: CALL_OW 313
35910: PPUSH
35911: LD_INT 3
35913: PUSH
35914: LD_INT 60
35916: PUSH
35917: EMPTY
35918: LIST
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 2
35926: PUSH
35927: LD_INT 25
35929: PUSH
35930: LD_INT 2
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 25
35939: PUSH
35940: LD_INT 16
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: LIST
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PPUSH
35956: CALL_OW 72
35960: UNION
35961: ST_TO_ADDR
// if tmp then
35962: LD_VAR 0 4
35966: IFFALSE 36046
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35968: LD_ADDR_VAR 0 4
35972: PUSH
35973: LD_VAR 0 4
35977: PPUSH
35978: LD_INT 3
35980: PPUSH
35981: CALL 74323 0 2
35985: ST_TO_ADDR
// for j in tmp do
35986: LD_ADDR_VAR 0 2
35990: PUSH
35991: LD_VAR 0 4
35995: PUSH
35996: FOR_IN
35997: IFFALSE 36040
// begin if IsInUnit ( j ) then
35999: LD_VAR 0 2
36003: PPUSH
36004: CALL_OW 310
36008: IFFALSE 36019
// ComExit ( j ) ;
36010: LD_VAR 0 2
36014: PPUSH
36015: CALL 74406 0 1
// AddComCollect ( j , x , y ) ;
36019: LD_VAR 0 2
36023: PPUSH
36024: LD_VAR 0 6
36028: PPUSH
36029: LD_VAR 0 7
36033: PPUSH
36034: CALL_OW 177
// end ;
36038: GO 35996
36040: POP
36041: POP
// exit ;
36042: POP
36043: POP
36044: GO 36273
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
36046: LD_ADDR_VAR 0 4
36050: PUSH
36051: LD_INT 22
36053: PUSH
36054: LD_VAR 0 5
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 91
36065: PUSH
36066: LD_VAR 0 8
36070: PUSH
36071: LD_INT 8
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 2
36081: PUSH
36082: LD_INT 34
36084: PUSH
36085: LD_INT 12
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 34
36094: PUSH
36095: LD_INT 51
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 34
36104: PUSH
36105: LD_INT 32
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 34
36114: PUSH
36115: LD_INT 89
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: LIST
36133: PPUSH
36134: CALL_OW 69
36138: ST_TO_ADDR
// if tmp then
36139: LD_VAR 0 4
36143: IFFALSE 36269
// begin for j in tmp do
36145: LD_ADDR_VAR 0 2
36149: PUSH
36150: LD_VAR 0 4
36154: PUSH
36155: FOR_IN
36156: IFFALSE 36267
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
36158: LD_VAR 0 2
36162: PPUSH
36163: CALL_OW 262
36167: PUSH
36168: LD_INT 3
36170: EQUAL
36171: PUSH
36172: LD_VAR 0 2
36176: PPUSH
36177: CALL_OW 261
36181: PUSH
36182: LD_INT 20
36184: GREATER
36185: OR
36186: PUSH
36187: LD_VAR 0 2
36191: PPUSH
36192: CALL_OW 314
36196: NOT
36197: AND
36198: PUSH
36199: LD_VAR 0 2
36203: PPUSH
36204: CALL_OW 263
36208: PUSH
36209: LD_INT 1
36211: NONEQUAL
36212: PUSH
36213: LD_VAR 0 2
36217: PPUSH
36218: CALL_OW 311
36222: OR
36223: AND
36224: IFFALSE 36265
// begin ComCollect ( j , x , y ) ;
36226: LD_VAR 0 2
36230: PPUSH
36231: LD_VAR 0 6
36235: PPUSH
36236: LD_VAR 0 7
36240: PPUSH
36241: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36245: LD_VAR 0 2
36249: PPUSH
36250: LD_VAR 0 8
36254: PPUSH
36255: CALL_OW 172
// exit ;
36259: POP
36260: POP
36261: POP
36262: POP
36263: GO 36273
// end ;
36265: GO 36155
36267: POP
36268: POP
// end ; end ;
36269: GO 35644
36271: POP
36272: POP
// end ; end_of_file end_of_file
36273: PPOPN 9
36275: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36276: LD_INT 0
36278: PPUSH
36279: PPUSH
// if exist_mode then
36280: LD_VAR 0 2
36284: IFFALSE 36330
// begin unit := CreateCharacter ( prefix & ident ) ;
36286: LD_ADDR_VAR 0 5
36290: PUSH
36291: LD_VAR 0 3
36295: PUSH
36296: LD_VAR 0 1
36300: STR
36301: PPUSH
36302: CALL_OW 34
36306: ST_TO_ADDR
// if unit then
36307: LD_VAR 0 5
36311: IFFALSE 36328
// DeleteCharacters ( prefix & ident ) ;
36313: LD_VAR 0 3
36317: PUSH
36318: LD_VAR 0 1
36322: STR
36323: PPUSH
36324: CALL_OW 40
// end else
36328: GO 36345
// unit := NewCharacter ( ident ) ;
36330: LD_ADDR_VAR 0 5
36334: PUSH
36335: LD_VAR 0 1
36339: PPUSH
36340: CALL_OW 25
36344: ST_TO_ADDR
// result := unit ;
36345: LD_ADDR_VAR 0 4
36349: PUSH
36350: LD_VAR 0 5
36354: ST_TO_ADDR
// end ;
36355: LD_VAR 0 4
36359: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36360: LD_INT 0
36362: PPUSH
36363: PPUSH
// if not side or not nation then
36364: LD_VAR 0 1
36368: NOT
36369: PUSH
36370: LD_VAR 0 2
36374: NOT
36375: OR
36376: IFFALSE 36380
// exit ;
36378: GO 37148
// case nation of nation_american :
36380: LD_VAR 0 2
36384: PUSH
36385: LD_INT 1
36387: DOUBLE
36388: EQUAL
36389: IFTRUE 36393
36391: GO 36607
36393: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36394: LD_ADDR_VAR 0 4
36398: PUSH
36399: LD_INT 35
36401: PUSH
36402: LD_INT 45
36404: PUSH
36405: LD_INT 46
36407: PUSH
36408: LD_INT 47
36410: PUSH
36411: LD_INT 82
36413: PUSH
36414: LD_INT 83
36416: PUSH
36417: LD_INT 84
36419: PUSH
36420: LD_INT 85
36422: PUSH
36423: LD_INT 86
36425: PUSH
36426: LD_INT 1
36428: PUSH
36429: LD_INT 2
36431: PUSH
36432: LD_INT 6
36434: PUSH
36435: LD_INT 15
36437: PUSH
36438: LD_INT 16
36440: PUSH
36441: LD_INT 7
36443: PUSH
36444: LD_INT 12
36446: PUSH
36447: LD_INT 13
36449: PUSH
36450: LD_INT 10
36452: PUSH
36453: LD_INT 14
36455: PUSH
36456: LD_INT 20
36458: PUSH
36459: LD_INT 21
36461: PUSH
36462: LD_INT 22
36464: PUSH
36465: LD_INT 25
36467: PUSH
36468: LD_INT 32
36470: PUSH
36471: LD_INT 27
36473: PUSH
36474: LD_INT 36
36476: PUSH
36477: LD_INT 69
36479: PUSH
36480: LD_INT 39
36482: PUSH
36483: LD_INT 34
36485: PUSH
36486: LD_INT 40
36488: PUSH
36489: LD_INT 48
36491: PUSH
36492: LD_INT 49
36494: PUSH
36495: LD_INT 50
36497: PUSH
36498: LD_INT 51
36500: PUSH
36501: LD_INT 52
36503: PUSH
36504: LD_INT 53
36506: PUSH
36507: LD_INT 54
36509: PUSH
36510: LD_INT 55
36512: PUSH
36513: LD_INT 56
36515: PUSH
36516: LD_INT 57
36518: PUSH
36519: LD_INT 58
36521: PUSH
36522: LD_INT 59
36524: PUSH
36525: LD_INT 60
36527: PUSH
36528: LD_INT 61
36530: PUSH
36531: LD_INT 62
36533: PUSH
36534: LD_INT 80
36536: PUSH
36537: LD_INT 82
36539: PUSH
36540: LD_INT 83
36542: PUSH
36543: LD_INT 84
36545: PUSH
36546: LD_INT 85
36548: PUSH
36549: LD_INT 86
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: ST_TO_ADDR
36605: GO 37072
36607: LD_INT 2
36609: DOUBLE
36610: EQUAL
36611: IFTRUE 36615
36613: GO 36841
36615: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
36616: LD_ADDR_VAR 0 4
36620: PUSH
36621: LD_INT 35
36623: PUSH
36624: LD_INT 45
36626: PUSH
36627: LD_INT 46
36629: PUSH
36630: LD_INT 47
36632: PUSH
36633: LD_INT 82
36635: PUSH
36636: LD_INT 83
36638: PUSH
36639: LD_INT 84
36641: PUSH
36642: LD_INT 85
36644: PUSH
36645: LD_INT 87
36647: PUSH
36648: LD_INT 70
36650: PUSH
36651: LD_INT 1
36653: PUSH
36654: LD_INT 11
36656: PUSH
36657: LD_INT 3
36659: PUSH
36660: LD_INT 4
36662: PUSH
36663: LD_INT 5
36665: PUSH
36666: LD_INT 6
36668: PUSH
36669: LD_INT 15
36671: PUSH
36672: LD_INT 18
36674: PUSH
36675: LD_INT 7
36677: PUSH
36678: LD_INT 17
36680: PUSH
36681: LD_INT 8
36683: PUSH
36684: LD_INT 20
36686: PUSH
36687: LD_INT 21
36689: PUSH
36690: LD_INT 22
36692: PUSH
36693: LD_INT 72
36695: PUSH
36696: LD_INT 26
36698: PUSH
36699: LD_INT 69
36701: PUSH
36702: LD_INT 39
36704: PUSH
36705: LD_INT 40
36707: PUSH
36708: LD_INT 41
36710: PUSH
36711: LD_INT 42
36713: PUSH
36714: LD_INT 43
36716: PUSH
36717: LD_INT 48
36719: PUSH
36720: LD_INT 49
36722: PUSH
36723: LD_INT 50
36725: PUSH
36726: LD_INT 51
36728: PUSH
36729: LD_INT 52
36731: PUSH
36732: LD_INT 53
36734: PUSH
36735: LD_INT 54
36737: PUSH
36738: LD_INT 55
36740: PUSH
36741: LD_INT 56
36743: PUSH
36744: LD_INT 60
36746: PUSH
36747: LD_INT 61
36749: PUSH
36750: LD_INT 62
36752: PUSH
36753: LD_INT 66
36755: PUSH
36756: LD_INT 67
36758: PUSH
36759: LD_INT 68
36761: PUSH
36762: LD_INT 81
36764: PUSH
36765: LD_INT 82
36767: PUSH
36768: LD_INT 83
36770: PUSH
36771: LD_INT 84
36773: PUSH
36774: LD_INT 85
36776: PUSH
36777: LD_INT 87
36779: PUSH
36780: LD_INT 88
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: ST_TO_ADDR
36839: GO 37072
36841: LD_INT 3
36843: DOUBLE
36844: EQUAL
36845: IFTRUE 36849
36847: GO 37071
36849: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36850: LD_ADDR_VAR 0 4
36854: PUSH
36855: LD_INT 46
36857: PUSH
36858: LD_INT 47
36860: PUSH
36861: LD_INT 1
36863: PUSH
36864: LD_INT 2
36866: PUSH
36867: LD_INT 82
36869: PUSH
36870: LD_INT 83
36872: PUSH
36873: LD_INT 84
36875: PUSH
36876: LD_INT 85
36878: PUSH
36879: LD_INT 86
36881: PUSH
36882: LD_INT 11
36884: PUSH
36885: LD_INT 9
36887: PUSH
36888: LD_INT 20
36890: PUSH
36891: LD_INT 19
36893: PUSH
36894: LD_INT 21
36896: PUSH
36897: LD_INT 24
36899: PUSH
36900: LD_INT 22
36902: PUSH
36903: LD_INT 25
36905: PUSH
36906: LD_INT 28
36908: PUSH
36909: LD_INT 29
36911: PUSH
36912: LD_INT 30
36914: PUSH
36915: LD_INT 31
36917: PUSH
36918: LD_INT 37
36920: PUSH
36921: LD_INT 38
36923: PUSH
36924: LD_INT 32
36926: PUSH
36927: LD_INT 27
36929: PUSH
36930: LD_INT 33
36932: PUSH
36933: LD_INT 69
36935: PUSH
36936: LD_INT 39
36938: PUSH
36939: LD_INT 34
36941: PUSH
36942: LD_INT 40
36944: PUSH
36945: LD_INT 71
36947: PUSH
36948: LD_INT 23
36950: PUSH
36951: LD_INT 44
36953: PUSH
36954: LD_INT 48
36956: PUSH
36957: LD_INT 49
36959: PUSH
36960: LD_INT 50
36962: PUSH
36963: LD_INT 51
36965: PUSH
36966: LD_INT 52
36968: PUSH
36969: LD_INT 53
36971: PUSH
36972: LD_INT 54
36974: PUSH
36975: LD_INT 55
36977: PUSH
36978: LD_INT 56
36980: PUSH
36981: LD_INT 57
36983: PUSH
36984: LD_INT 58
36986: PUSH
36987: LD_INT 59
36989: PUSH
36990: LD_INT 63
36992: PUSH
36993: LD_INT 64
36995: PUSH
36996: LD_INT 65
36998: PUSH
36999: LD_INT 82
37001: PUSH
37002: LD_INT 83
37004: PUSH
37005: LD_INT 84
37007: PUSH
37008: LD_INT 85
37010: PUSH
37011: LD_INT 86
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: ST_TO_ADDR
37069: GO 37072
37071: POP
// if state > - 1 and state < 3 then
37072: LD_VAR 0 3
37076: PUSH
37077: LD_INT 1
37079: NEG
37080: GREATER
37081: PUSH
37082: LD_VAR 0 3
37086: PUSH
37087: LD_INT 3
37089: LESS
37090: AND
37091: IFFALSE 37148
// for i in result do
37093: LD_ADDR_VAR 0 5
37097: PUSH
37098: LD_VAR 0 4
37102: PUSH
37103: FOR_IN
37104: IFFALSE 37146
// if GetTech ( i , side ) <> state then
37106: LD_VAR 0 5
37110: PPUSH
37111: LD_VAR 0 1
37115: PPUSH
37116: CALL_OW 321
37120: PUSH
37121: LD_VAR 0 3
37125: NONEQUAL
37126: IFFALSE 37144
// result := result diff i ;
37128: LD_ADDR_VAR 0 4
37132: PUSH
37133: LD_VAR 0 4
37137: PUSH
37138: LD_VAR 0 5
37142: DIFF
37143: ST_TO_ADDR
37144: GO 37103
37146: POP
37147: POP
// end ;
37148: LD_VAR 0 4
37152: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37153: LD_INT 0
37155: PPUSH
37156: PPUSH
37157: PPUSH
// result := true ;
37158: LD_ADDR_VAR 0 3
37162: PUSH
37163: LD_INT 1
37165: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37166: LD_ADDR_VAR 0 5
37170: PUSH
37171: LD_VAR 0 2
37175: PPUSH
37176: CALL_OW 480
37180: ST_TO_ADDR
// if not tmp then
37181: LD_VAR 0 5
37185: NOT
37186: IFFALSE 37190
// exit ;
37188: GO 37239
// for i in tmp do
37190: LD_ADDR_VAR 0 4
37194: PUSH
37195: LD_VAR 0 5
37199: PUSH
37200: FOR_IN
37201: IFFALSE 37237
// if GetTech ( i , side ) <> state_researched then
37203: LD_VAR 0 4
37207: PPUSH
37208: LD_VAR 0 1
37212: PPUSH
37213: CALL_OW 321
37217: PUSH
37218: LD_INT 2
37220: NONEQUAL
37221: IFFALSE 37235
// begin result := false ;
37223: LD_ADDR_VAR 0 3
37227: PUSH
37228: LD_INT 0
37230: ST_TO_ADDR
// exit ;
37231: POP
37232: POP
37233: GO 37239
// end ;
37235: GO 37200
37237: POP
37238: POP
// end ;
37239: LD_VAR 0 3
37243: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37244: LD_INT 0
37246: PPUSH
37247: PPUSH
37248: PPUSH
37249: PPUSH
37250: PPUSH
37251: PPUSH
37252: PPUSH
37253: PPUSH
37254: PPUSH
37255: PPUSH
37256: PPUSH
37257: PPUSH
37258: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37259: LD_VAR 0 1
37263: NOT
37264: PUSH
37265: LD_VAR 0 1
37269: PPUSH
37270: CALL_OW 257
37274: PUSH
37275: LD_INT 9
37277: NONEQUAL
37278: OR
37279: IFFALSE 37283
// exit ;
37281: GO 37856
// side := GetSide ( unit ) ;
37283: LD_ADDR_VAR 0 9
37287: PUSH
37288: LD_VAR 0 1
37292: PPUSH
37293: CALL_OW 255
37297: ST_TO_ADDR
// tech_space := tech_spacanom ;
37298: LD_ADDR_VAR 0 12
37302: PUSH
37303: LD_INT 29
37305: ST_TO_ADDR
// tech_time := tech_taurad ;
37306: LD_ADDR_VAR 0 13
37310: PUSH
37311: LD_INT 28
37313: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37314: LD_ADDR_VAR 0 11
37318: PUSH
37319: LD_VAR 0 1
37323: PPUSH
37324: CALL_OW 310
37328: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37329: LD_VAR 0 11
37333: PPUSH
37334: CALL_OW 247
37338: PUSH
37339: LD_INT 2
37341: EQUAL
37342: IFFALSE 37346
// exit ;
37344: GO 37856
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37346: LD_ADDR_VAR 0 8
37350: PUSH
37351: LD_INT 81
37353: PUSH
37354: LD_VAR 0 9
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 3
37365: PUSH
37366: LD_INT 21
37368: PUSH
37369: LD_INT 3
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PPUSH
37384: CALL_OW 69
37388: ST_TO_ADDR
// if not tmp then
37389: LD_VAR 0 8
37393: NOT
37394: IFFALSE 37398
// exit ;
37396: GO 37856
// if in_unit then
37398: LD_VAR 0 11
37402: IFFALSE 37426
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37404: LD_ADDR_VAR 0 10
37408: PUSH
37409: LD_VAR 0 8
37413: PPUSH
37414: LD_VAR 0 11
37418: PPUSH
37419: CALL_OW 74
37423: ST_TO_ADDR
37424: GO 37446
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37426: LD_ADDR_VAR 0 10
37430: PUSH
37431: LD_VAR 0 8
37435: PPUSH
37436: LD_VAR 0 1
37440: PPUSH
37441: CALL_OW 74
37445: ST_TO_ADDR
// if not enemy then
37446: LD_VAR 0 10
37450: NOT
37451: IFFALSE 37455
// exit ;
37453: GO 37856
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37455: LD_VAR 0 11
37459: PUSH
37460: LD_VAR 0 11
37464: PPUSH
37465: LD_VAR 0 10
37469: PPUSH
37470: CALL_OW 296
37474: PUSH
37475: LD_INT 13
37477: GREATER
37478: AND
37479: PUSH
37480: LD_VAR 0 1
37484: PPUSH
37485: LD_VAR 0 10
37489: PPUSH
37490: CALL_OW 296
37494: PUSH
37495: LD_INT 12
37497: GREATER
37498: OR
37499: IFFALSE 37503
// exit ;
37501: GO 37856
// missile := [ 1 ] ;
37503: LD_ADDR_VAR 0 14
37507: PUSH
37508: LD_INT 1
37510: PUSH
37511: EMPTY
37512: LIST
37513: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37514: LD_VAR 0 9
37518: PPUSH
37519: LD_VAR 0 12
37523: PPUSH
37524: CALL_OW 325
37528: IFFALSE 37557
// missile := Replace ( missile , missile + 1 , 2 ) ;
37530: LD_ADDR_VAR 0 14
37534: PUSH
37535: LD_VAR 0 14
37539: PPUSH
37540: LD_VAR 0 14
37544: PUSH
37545: LD_INT 1
37547: PLUS
37548: PPUSH
37549: LD_INT 2
37551: PPUSH
37552: CALL_OW 1
37556: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37557: LD_VAR 0 9
37561: PPUSH
37562: LD_VAR 0 13
37566: PPUSH
37567: CALL_OW 325
37571: PUSH
37572: LD_VAR 0 10
37576: PPUSH
37577: CALL_OW 255
37581: PPUSH
37582: LD_VAR 0 13
37586: PPUSH
37587: CALL_OW 325
37591: NOT
37592: AND
37593: IFFALSE 37622
// missile := Replace ( missile , missile + 1 , 3 ) ;
37595: LD_ADDR_VAR 0 14
37599: PUSH
37600: LD_VAR 0 14
37604: PPUSH
37605: LD_VAR 0 14
37609: PUSH
37610: LD_INT 1
37612: PLUS
37613: PPUSH
37614: LD_INT 3
37616: PPUSH
37617: CALL_OW 1
37621: ST_TO_ADDR
// if missile < 2 then
37622: LD_VAR 0 14
37626: PUSH
37627: LD_INT 2
37629: LESS
37630: IFFALSE 37634
// exit ;
37632: GO 37856
// x := GetX ( enemy ) ;
37634: LD_ADDR_VAR 0 4
37638: PUSH
37639: LD_VAR 0 10
37643: PPUSH
37644: CALL_OW 250
37648: ST_TO_ADDR
// y := GetY ( enemy ) ;
37649: LD_ADDR_VAR 0 5
37653: PUSH
37654: LD_VAR 0 10
37658: PPUSH
37659: CALL_OW 251
37663: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37664: LD_ADDR_VAR 0 6
37668: PUSH
37669: LD_VAR 0 4
37673: PUSH
37674: LD_INT 1
37676: NEG
37677: PPUSH
37678: LD_INT 1
37680: PPUSH
37681: CALL_OW 12
37685: PLUS
37686: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37687: LD_ADDR_VAR 0 7
37691: PUSH
37692: LD_VAR 0 5
37696: PUSH
37697: LD_INT 1
37699: NEG
37700: PPUSH
37701: LD_INT 1
37703: PPUSH
37704: CALL_OW 12
37708: PLUS
37709: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37710: LD_VAR 0 6
37714: PPUSH
37715: LD_VAR 0 7
37719: PPUSH
37720: CALL_OW 488
37724: NOT
37725: IFFALSE 37747
// begin _x := x ;
37727: LD_ADDR_VAR 0 6
37731: PUSH
37732: LD_VAR 0 4
37736: ST_TO_ADDR
// _y := y ;
37737: LD_ADDR_VAR 0 7
37741: PUSH
37742: LD_VAR 0 5
37746: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37747: LD_ADDR_VAR 0 3
37751: PUSH
37752: LD_INT 1
37754: PPUSH
37755: LD_VAR 0 14
37759: PPUSH
37760: CALL_OW 12
37764: ST_TO_ADDR
// case i of 1 :
37765: LD_VAR 0 3
37769: PUSH
37770: LD_INT 1
37772: DOUBLE
37773: EQUAL
37774: IFTRUE 37778
37776: GO 37795
37778: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37779: LD_VAR 0 1
37783: PPUSH
37784: LD_VAR 0 10
37788: PPUSH
37789: CALL_OW 115
37793: GO 37856
37795: LD_INT 2
37797: DOUBLE
37798: EQUAL
37799: IFTRUE 37803
37801: GO 37825
37803: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37804: LD_VAR 0 1
37808: PPUSH
37809: LD_VAR 0 6
37813: PPUSH
37814: LD_VAR 0 7
37818: PPUSH
37819: CALL_OW 153
37823: GO 37856
37825: LD_INT 3
37827: DOUBLE
37828: EQUAL
37829: IFTRUE 37833
37831: GO 37855
37833: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37834: LD_VAR 0 1
37838: PPUSH
37839: LD_VAR 0 6
37843: PPUSH
37844: LD_VAR 0 7
37848: PPUSH
37849: CALL_OW 154
37853: GO 37856
37855: POP
// end ;
37856: LD_VAR 0 2
37860: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37861: LD_INT 0
37863: PPUSH
37864: PPUSH
37865: PPUSH
37866: PPUSH
37867: PPUSH
37868: PPUSH
// if not unit or not building then
37869: LD_VAR 0 1
37873: NOT
37874: PUSH
37875: LD_VAR 0 2
37879: NOT
37880: OR
37881: IFFALSE 37885
// exit ;
37883: GO 38043
// x := GetX ( building ) ;
37885: LD_ADDR_VAR 0 5
37889: PUSH
37890: LD_VAR 0 2
37894: PPUSH
37895: CALL_OW 250
37899: ST_TO_ADDR
// y := GetY ( building ) ;
37900: LD_ADDR_VAR 0 6
37904: PUSH
37905: LD_VAR 0 2
37909: PPUSH
37910: CALL_OW 251
37914: ST_TO_ADDR
// for i = 0 to 5 do
37915: LD_ADDR_VAR 0 4
37919: PUSH
37920: DOUBLE
37921: LD_INT 0
37923: DEC
37924: ST_TO_ADDR
37925: LD_INT 5
37927: PUSH
37928: FOR_TO
37929: IFFALSE 38041
// begin _x := ShiftX ( x , i , 3 ) ;
37931: LD_ADDR_VAR 0 7
37935: PUSH
37936: LD_VAR 0 5
37940: PPUSH
37941: LD_VAR 0 4
37945: PPUSH
37946: LD_INT 3
37948: PPUSH
37949: CALL_OW 272
37953: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37954: LD_ADDR_VAR 0 8
37958: PUSH
37959: LD_VAR 0 6
37963: PPUSH
37964: LD_VAR 0 4
37968: PPUSH
37969: LD_INT 3
37971: PPUSH
37972: CALL_OW 273
37976: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37977: LD_VAR 0 7
37981: PPUSH
37982: LD_VAR 0 8
37986: PPUSH
37987: CALL_OW 488
37991: NOT
37992: IFFALSE 37996
// continue ;
37994: GO 37928
// if HexInfo ( _x , _y ) = 0 then
37996: LD_VAR 0 7
38000: PPUSH
38001: LD_VAR 0 8
38005: PPUSH
38006: CALL_OW 428
38010: PUSH
38011: LD_INT 0
38013: EQUAL
38014: IFFALSE 38039
// begin ComMoveXY ( unit , _x , _y ) ;
38016: LD_VAR 0 1
38020: PPUSH
38021: LD_VAR 0 7
38025: PPUSH
38026: LD_VAR 0 8
38030: PPUSH
38031: CALL_OW 111
// exit ;
38035: POP
38036: POP
38037: GO 38043
// end ; end ;
38039: GO 37928
38041: POP
38042: POP
// end ;
38043: LD_VAR 0 3
38047: RET
// export function ScanBase ( side , base_area ) ; begin
38048: LD_INT 0
38050: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38051: LD_ADDR_VAR 0 3
38055: PUSH
38056: LD_VAR 0 2
38060: PPUSH
38061: LD_INT 81
38063: PUSH
38064: LD_VAR 0 1
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PPUSH
38073: CALL_OW 70
38077: ST_TO_ADDR
// end ;
38078: LD_VAR 0 3
38082: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38083: LD_INT 0
38085: PPUSH
38086: PPUSH
38087: PPUSH
38088: PPUSH
// result := false ;
38089: LD_ADDR_VAR 0 2
38093: PUSH
38094: LD_INT 0
38096: ST_TO_ADDR
// side := GetSide ( unit ) ;
38097: LD_ADDR_VAR 0 3
38101: PUSH
38102: LD_VAR 0 1
38106: PPUSH
38107: CALL_OW 255
38111: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38112: LD_ADDR_VAR 0 4
38116: PUSH
38117: LD_VAR 0 1
38121: PPUSH
38122: CALL_OW 248
38126: ST_TO_ADDR
// case nat of 1 :
38127: LD_VAR 0 4
38131: PUSH
38132: LD_INT 1
38134: DOUBLE
38135: EQUAL
38136: IFTRUE 38140
38138: GO 38151
38140: POP
// tech := tech_lassight ; 2 :
38141: LD_ADDR_VAR 0 5
38145: PUSH
38146: LD_INT 12
38148: ST_TO_ADDR
38149: GO 38190
38151: LD_INT 2
38153: DOUBLE
38154: EQUAL
38155: IFTRUE 38159
38157: GO 38170
38159: POP
// tech := tech_mortar ; 3 :
38160: LD_ADDR_VAR 0 5
38164: PUSH
38165: LD_INT 41
38167: ST_TO_ADDR
38168: GO 38190
38170: LD_INT 3
38172: DOUBLE
38173: EQUAL
38174: IFTRUE 38178
38176: GO 38189
38178: POP
// tech := tech_bazooka ; end ;
38179: LD_ADDR_VAR 0 5
38183: PUSH
38184: LD_INT 44
38186: ST_TO_ADDR
38187: GO 38190
38189: POP
// if Researched ( side , tech ) then
38190: LD_VAR 0 3
38194: PPUSH
38195: LD_VAR 0 5
38199: PPUSH
38200: CALL_OW 325
38204: IFFALSE 38231
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38206: LD_ADDR_VAR 0 2
38210: PUSH
38211: LD_INT 5
38213: PUSH
38214: LD_INT 8
38216: PUSH
38217: LD_INT 9
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: LIST
38224: PUSH
38225: LD_VAR 0 4
38229: ARRAY
38230: ST_TO_ADDR
// end ;
38231: LD_VAR 0 2
38235: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38236: LD_INT 0
38238: PPUSH
38239: PPUSH
38240: PPUSH
// if not mines then
38241: LD_VAR 0 2
38245: NOT
38246: IFFALSE 38250
// exit ;
38248: GO 38394
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38250: LD_ADDR_VAR 0 5
38254: PUSH
38255: LD_INT 81
38257: PUSH
38258: LD_VAR 0 1
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 3
38269: PUSH
38270: LD_INT 21
38272: PUSH
38273: LD_INT 3
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PPUSH
38288: CALL_OW 69
38292: ST_TO_ADDR
// for i in mines do
38293: LD_ADDR_VAR 0 4
38297: PUSH
38298: LD_VAR 0 2
38302: PUSH
38303: FOR_IN
38304: IFFALSE 38392
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38306: LD_VAR 0 4
38310: PUSH
38311: LD_INT 1
38313: ARRAY
38314: PPUSH
38315: LD_VAR 0 4
38319: PUSH
38320: LD_INT 2
38322: ARRAY
38323: PPUSH
38324: CALL_OW 458
38328: NOT
38329: IFFALSE 38333
// continue ;
38331: GO 38303
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38333: LD_VAR 0 4
38337: PUSH
38338: LD_INT 1
38340: ARRAY
38341: PPUSH
38342: LD_VAR 0 4
38346: PUSH
38347: LD_INT 2
38349: ARRAY
38350: PPUSH
38351: CALL_OW 428
38355: PUSH
38356: LD_VAR 0 5
38360: IN
38361: IFFALSE 38390
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38363: LD_VAR 0 4
38367: PUSH
38368: LD_INT 1
38370: ARRAY
38371: PPUSH
38372: LD_VAR 0 4
38376: PUSH
38377: LD_INT 2
38379: ARRAY
38380: PPUSH
38381: LD_VAR 0 1
38385: PPUSH
38386: CALL_OW 456
// end ;
38390: GO 38303
38392: POP
38393: POP
// end ;
38394: LD_VAR 0 3
38398: RET
// export function Count ( array ) ; begin
38399: LD_INT 0
38401: PPUSH
// result := array + 0 ;
38402: LD_ADDR_VAR 0 2
38406: PUSH
38407: LD_VAR 0 1
38411: PUSH
38412: LD_INT 0
38414: PLUS
38415: ST_TO_ADDR
// end ;
38416: LD_VAR 0 2
38420: RET
// export function IsEmpty ( building ) ; begin
38421: LD_INT 0
38423: PPUSH
// if not building then
38424: LD_VAR 0 1
38428: NOT
38429: IFFALSE 38433
// exit ;
38431: GO 38476
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38433: LD_ADDR_VAR 0 2
38437: PUSH
38438: LD_VAR 0 1
38442: PUSH
38443: LD_INT 22
38445: PUSH
38446: LD_VAR 0 1
38450: PPUSH
38451: CALL_OW 255
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 58
38462: PUSH
38463: EMPTY
38464: LIST
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PPUSH
38470: CALL_OW 69
38474: IN
38475: ST_TO_ADDR
// end ;
38476: LD_VAR 0 2
38480: RET
// export function IsNotFull ( building ) ; var places ; begin
38481: LD_INT 0
38483: PPUSH
38484: PPUSH
// if not building then
38485: LD_VAR 0 1
38489: NOT
38490: IFFALSE 38494
// exit ;
38492: GO 38522
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
38494: LD_ADDR_VAR 0 2
38498: PUSH
38499: LD_VAR 0 1
38503: PPUSH
38504: LD_INT 3
38506: PUSH
38507: LD_INT 62
38509: PUSH
38510: EMPTY
38511: LIST
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PPUSH
38517: CALL_OW 72
38521: ST_TO_ADDR
// end ;
38522: LD_VAR 0 2
38526: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38527: LD_INT 0
38529: PPUSH
38530: PPUSH
38531: PPUSH
38532: PPUSH
// tmp := [ ] ;
38533: LD_ADDR_VAR 0 3
38537: PUSH
38538: EMPTY
38539: ST_TO_ADDR
// list := [ ] ;
38540: LD_ADDR_VAR 0 5
38544: PUSH
38545: EMPTY
38546: ST_TO_ADDR
// for i = 16 to 25 do
38547: LD_ADDR_VAR 0 4
38551: PUSH
38552: DOUBLE
38553: LD_INT 16
38555: DEC
38556: ST_TO_ADDR
38557: LD_INT 25
38559: PUSH
38560: FOR_TO
38561: IFFALSE 38634
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38563: LD_ADDR_VAR 0 3
38567: PUSH
38568: LD_VAR 0 3
38572: PUSH
38573: LD_INT 22
38575: PUSH
38576: LD_VAR 0 1
38580: PPUSH
38581: CALL_OW 255
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 91
38592: PUSH
38593: LD_VAR 0 1
38597: PUSH
38598: LD_INT 6
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 30
38608: PUSH
38609: LD_VAR 0 4
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: LIST
38622: PUSH
38623: EMPTY
38624: LIST
38625: PPUSH
38626: CALL_OW 69
38630: ADD
38631: ST_TO_ADDR
38632: GO 38560
38634: POP
38635: POP
// for i = 1 to tmp do
38636: LD_ADDR_VAR 0 4
38640: PUSH
38641: DOUBLE
38642: LD_INT 1
38644: DEC
38645: ST_TO_ADDR
38646: LD_VAR 0 3
38650: PUSH
38651: FOR_TO
38652: IFFALSE 38740
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38654: LD_ADDR_VAR 0 5
38658: PUSH
38659: LD_VAR 0 5
38663: PUSH
38664: LD_VAR 0 3
38668: PUSH
38669: LD_VAR 0 4
38673: ARRAY
38674: PPUSH
38675: CALL_OW 266
38679: PUSH
38680: LD_VAR 0 3
38684: PUSH
38685: LD_VAR 0 4
38689: ARRAY
38690: PPUSH
38691: CALL_OW 250
38695: PUSH
38696: LD_VAR 0 3
38700: PUSH
38701: LD_VAR 0 4
38705: ARRAY
38706: PPUSH
38707: CALL_OW 251
38711: PUSH
38712: LD_VAR 0 3
38716: PUSH
38717: LD_VAR 0 4
38721: ARRAY
38722: PPUSH
38723: CALL_OW 254
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: PUSH
38734: EMPTY
38735: LIST
38736: ADD
38737: ST_TO_ADDR
38738: GO 38651
38740: POP
38741: POP
// result := list ;
38742: LD_ADDR_VAR 0 2
38746: PUSH
38747: LD_VAR 0 5
38751: ST_TO_ADDR
// end ;
38752: LD_VAR 0 2
38756: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38757: LD_INT 0
38759: PPUSH
38760: PPUSH
38761: PPUSH
38762: PPUSH
38763: PPUSH
38764: PPUSH
38765: PPUSH
// if not factory then
38766: LD_VAR 0 1
38770: NOT
38771: IFFALSE 38775
// exit ;
38773: GO 39368
// if control = control_apeman then
38775: LD_VAR 0 4
38779: PUSH
38780: LD_INT 5
38782: EQUAL
38783: IFFALSE 38892
// begin tmp := UnitsInside ( factory ) ;
38785: LD_ADDR_VAR 0 8
38789: PUSH
38790: LD_VAR 0 1
38794: PPUSH
38795: CALL_OW 313
38799: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38800: LD_VAR 0 8
38804: PPUSH
38805: LD_INT 25
38807: PUSH
38808: LD_INT 12
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PPUSH
38815: CALL_OW 72
38819: NOT
38820: IFFALSE 38830
// control := control_manual ;
38822: LD_ADDR_VAR 0 4
38826: PUSH
38827: LD_INT 1
38829: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38830: LD_ADDR_VAR 0 8
38834: PUSH
38835: LD_VAR 0 1
38839: PPUSH
38840: CALL 38527 0 1
38844: ST_TO_ADDR
// if tmp then
38845: LD_VAR 0 8
38849: IFFALSE 38892
// begin for i in tmp do
38851: LD_ADDR_VAR 0 7
38855: PUSH
38856: LD_VAR 0 8
38860: PUSH
38861: FOR_IN
38862: IFFALSE 38890
// if i [ 1 ] = b_ext_radio then
38864: LD_VAR 0 7
38868: PUSH
38869: LD_INT 1
38871: ARRAY
38872: PUSH
38873: LD_INT 22
38875: EQUAL
38876: IFFALSE 38888
// begin control := control_remote ;
38878: LD_ADDR_VAR 0 4
38882: PUSH
38883: LD_INT 2
38885: ST_TO_ADDR
// break ;
38886: GO 38890
// end ;
38888: GO 38861
38890: POP
38891: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38892: LD_VAR 0 1
38896: PPUSH
38897: LD_VAR 0 2
38901: PPUSH
38902: LD_VAR 0 3
38906: PPUSH
38907: LD_VAR 0 4
38911: PPUSH
38912: LD_VAR 0 5
38916: PPUSH
38917: CALL_OW 448
38921: IFFALSE 38956
// begin result := [ chassis , engine , control , weapon ] ;
38923: LD_ADDR_VAR 0 6
38927: PUSH
38928: LD_VAR 0 2
38932: PUSH
38933: LD_VAR 0 3
38937: PUSH
38938: LD_VAR 0 4
38942: PUSH
38943: LD_VAR 0 5
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: ST_TO_ADDR
// exit ;
38954: GO 39368
// end ; _chassis := AvailableChassisList ( factory ) ;
38956: LD_ADDR_VAR 0 9
38960: PUSH
38961: LD_VAR 0 1
38965: PPUSH
38966: CALL_OW 475
38970: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38971: LD_ADDR_VAR 0 11
38975: PUSH
38976: LD_VAR 0 1
38980: PPUSH
38981: CALL_OW 476
38985: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38986: LD_ADDR_VAR 0 12
38990: PUSH
38991: LD_VAR 0 1
38995: PPUSH
38996: CALL_OW 477
39000: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39001: LD_ADDR_VAR 0 10
39005: PUSH
39006: LD_VAR 0 1
39010: PPUSH
39011: CALL_OW 478
39015: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39016: LD_VAR 0 9
39020: NOT
39021: PUSH
39022: LD_VAR 0 11
39026: NOT
39027: OR
39028: PUSH
39029: LD_VAR 0 12
39033: NOT
39034: OR
39035: PUSH
39036: LD_VAR 0 10
39040: NOT
39041: OR
39042: IFFALSE 39077
// begin result := [ chassis , engine , control , weapon ] ;
39044: LD_ADDR_VAR 0 6
39048: PUSH
39049: LD_VAR 0 2
39053: PUSH
39054: LD_VAR 0 3
39058: PUSH
39059: LD_VAR 0 4
39063: PUSH
39064: LD_VAR 0 5
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: ST_TO_ADDR
// exit ;
39075: GO 39368
// end ; if not chassis in _chassis then
39077: LD_VAR 0 2
39081: PUSH
39082: LD_VAR 0 9
39086: IN
39087: NOT
39088: IFFALSE 39114
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39090: LD_ADDR_VAR 0 2
39094: PUSH
39095: LD_VAR 0 9
39099: PUSH
39100: LD_INT 1
39102: PPUSH
39103: LD_VAR 0 9
39107: PPUSH
39108: CALL_OW 12
39112: ARRAY
39113: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39114: LD_VAR 0 2
39118: PPUSH
39119: LD_VAR 0 3
39123: PPUSH
39124: CALL 39373 0 2
39128: NOT
39129: IFFALSE 39188
// repeat engine := _engine [ 1 ] ;
39131: LD_ADDR_VAR 0 3
39135: PUSH
39136: LD_VAR 0 11
39140: PUSH
39141: LD_INT 1
39143: ARRAY
39144: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39145: LD_ADDR_VAR 0 11
39149: PUSH
39150: LD_VAR 0 11
39154: PPUSH
39155: LD_INT 1
39157: PPUSH
39158: CALL_OW 3
39162: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39163: LD_VAR 0 2
39167: PPUSH
39168: LD_VAR 0 3
39172: PPUSH
39173: CALL 39373 0 2
39177: PUSH
39178: LD_VAR 0 11
39182: PUSH
39183: EMPTY
39184: EQUAL
39185: OR
39186: IFFALSE 39131
// if not control in _control then
39188: LD_VAR 0 4
39192: PUSH
39193: LD_VAR 0 12
39197: IN
39198: NOT
39199: IFFALSE 39225
// control := _control [ rand ( 1 , _control ) ] ;
39201: LD_ADDR_VAR 0 4
39205: PUSH
39206: LD_VAR 0 12
39210: PUSH
39211: LD_INT 1
39213: PPUSH
39214: LD_VAR 0 12
39218: PPUSH
39219: CALL_OW 12
39223: ARRAY
39224: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39225: LD_VAR 0 2
39229: PPUSH
39230: LD_VAR 0 5
39234: PPUSH
39235: CALL 39593 0 2
39239: NOT
39240: IFFALSE 39299
// repeat weapon := _weapon [ 1 ] ;
39242: LD_ADDR_VAR 0 5
39246: PUSH
39247: LD_VAR 0 10
39251: PUSH
39252: LD_INT 1
39254: ARRAY
39255: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39256: LD_ADDR_VAR 0 10
39260: PUSH
39261: LD_VAR 0 10
39265: PPUSH
39266: LD_INT 1
39268: PPUSH
39269: CALL_OW 3
39273: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39274: LD_VAR 0 2
39278: PPUSH
39279: LD_VAR 0 5
39283: PPUSH
39284: CALL 39593 0 2
39288: PUSH
39289: LD_VAR 0 10
39293: PUSH
39294: EMPTY
39295: EQUAL
39296: OR
39297: IFFALSE 39242
// result := [ ] ;
39299: LD_ADDR_VAR 0 6
39303: PUSH
39304: EMPTY
39305: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39306: LD_VAR 0 1
39310: PPUSH
39311: LD_VAR 0 2
39315: PPUSH
39316: LD_VAR 0 3
39320: PPUSH
39321: LD_VAR 0 4
39325: PPUSH
39326: LD_VAR 0 5
39330: PPUSH
39331: CALL_OW 448
39335: IFFALSE 39368
// result := [ chassis , engine , control , weapon ] ;
39337: LD_ADDR_VAR 0 6
39341: PUSH
39342: LD_VAR 0 2
39346: PUSH
39347: LD_VAR 0 3
39351: PUSH
39352: LD_VAR 0 4
39356: PUSH
39357: LD_VAR 0 5
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: ST_TO_ADDR
// end ;
39368: LD_VAR 0 6
39372: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39373: LD_INT 0
39375: PPUSH
// if not chassis or not engine then
39376: LD_VAR 0 1
39380: NOT
39381: PUSH
39382: LD_VAR 0 2
39386: NOT
39387: OR
39388: IFFALSE 39392
// exit ;
39390: GO 39588
// case engine of engine_solar :
39392: LD_VAR 0 2
39396: PUSH
39397: LD_INT 2
39399: DOUBLE
39400: EQUAL
39401: IFTRUE 39405
39403: GO 39443
39405: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39406: LD_ADDR_VAR 0 3
39410: PUSH
39411: LD_INT 11
39413: PUSH
39414: LD_INT 12
39416: PUSH
39417: LD_INT 13
39419: PUSH
39420: LD_INT 14
39422: PUSH
39423: LD_INT 1
39425: PUSH
39426: LD_INT 2
39428: PUSH
39429: LD_INT 3
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: ST_TO_ADDR
39441: GO 39572
39443: LD_INT 1
39445: DOUBLE
39446: EQUAL
39447: IFTRUE 39451
39449: GO 39513
39451: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39452: LD_ADDR_VAR 0 3
39456: PUSH
39457: LD_INT 11
39459: PUSH
39460: LD_INT 12
39462: PUSH
39463: LD_INT 13
39465: PUSH
39466: LD_INT 14
39468: PUSH
39469: LD_INT 1
39471: PUSH
39472: LD_INT 2
39474: PUSH
39475: LD_INT 3
39477: PUSH
39478: LD_INT 4
39480: PUSH
39481: LD_INT 5
39483: PUSH
39484: LD_INT 21
39486: PUSH
39487: LD_INT 23
39489: PUSH
39490: LD_INT 22
39492: PUSH
39493: LD_INT 24
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: ST_TO_ADDR
39511: GO 39572
39513: LD_INT 3
39515: DOUBLE
39516: EQUAL
39517: IFTRUE 39521
39519: GO 39571
39521: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39522: LD_ADDR_VAR 0 3
39526: PUSH
39527: LD_INT 13
39529: PUSH
39530: LD_INT 14
39532: PUSH
39533: LD_INT 2
39535: PUSH
39536: LD_INT 3
39538: PUSH
39539: LD_INT 4
39541: PUSH
39542: LD_INT 5
39544: PUSH
39545: LD_INT 21
39547: PUSH
39548: LD_INT 22
39550: PUSH
39551: LD_INT 23
39553: PUSH
39554: LD_INT 24
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: ST_TO_ADDR
39569: GO 39572
39571: POP
// result := ( chassis in result ) ;
39572: LD_ADDR_VAR 0 3
39576: PUSH
39577: LD_VAR 0 1
39581: PUSH
39582: LD_VAR 0 3
39586: IN
39587: ST_TO_ADDR
// end ;
39588: LD_VAR 0 3
39592: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39593: LD_INT 0
39595: PPUSH
// if not chassis or not weapon then
39596: LD_VAR 0 1
39600: NOT
39601: PUSH
39602: LD_VAR 0 2
39606: NOT
39607: OR
39608: IFFALSE 39612
// exit ;
39610: GO 40672
// case weapon of us_machine_gun :
39612: LD_VAR 0 2
39616: PUSH
39617: LD_INT 2
39619: DOUBLE
39620: EQUAL
39621: IFTRUE 39625
39623: GO 39655
39625: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39626: LD_ADDR_VAR 0 3
39630: PUSH
39631: LD_INT 1
39633: PUSH
39634: LD_INT 2
39636: PUSH
39637: LD_INT 3
39639: PUSH
39640: LD_INT 4
39642: PUSH
39643: LD_INT 5
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: ST_TO_ADDR
39653: GO 40656
39655: LD_INT 3
39657: DOUBLE
39658: EQUAL
39659: IFTRUE 39663
39661: GO 39693
39663: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39664: LD_ADDR_VAR 0 3
39668: PUSH
39669: LD_INT 1
39671: PUSH
39672: LD_INT 2
39674: PUSH
39675: LD_INT 3
39677: PUSH
39678: LD_INT 4
39680: PUSH
39681: LD_INT 5
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: ST_TO_ADDR
39691: GO 40656
39693: LD_INT 11
39695: DOUBLE
39696: EQUAL
39697: IFTRUE 39701
39699: GO 39731
39701: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39702: LD_ADDR_VAR 0 3
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: LD_INT 2
39712: PUSH
39713: LD_INT 3
39715: PUSH
39716: LD_INT 4
39718: PUSH
39719: LD_INT 5
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: ST_TO_ADDR
39729: GO 40656
39731: LD_INT 4
39733: DOUBLE
39734: EQUAL
39735: IFTRUE 39739
39737: GO 39765
39739: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39740: LD_ADDR_VAR 0 3
39744: PUSH
39745: LD_INT 2
39747: PUSH
39748: LD_INT 3
39750: PUSH
39751: LD_INT 4
39753: PUSH
39754: LD_INT 5
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: ST_TO_ADDR
39763: GO 40656
39765: LD_INT 5
39767: DOUBLE
39768: EQUAL
39769: IFTRUE 39773
39771: GO 39799
39773: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39774: LD_ADDR_VAR 0 3
39778: PUSH
39779: LD_INT 2
39781: PUSH
39782: LD_INT 3
39784: PUSH
39785: LD_INT 4
39787: PUSH
39788: LD_INT 5
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: ST_TO_ADDR
39797: GO 40656
39799: LD_INT 9
39801: DOUBLE
39802: EQUAL
39803: IFTRUE 39807
39805: GO 39833
39807: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39808: LD_ADDR_VAR 0 3
39812: PUSH
39813: LD_INT 2
39815: PUSH
39816: LD_INT 3
39818: PUSH
39819: LD_INT 4
39821: PUSH
39822: LD_INT 5
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: ST_TO_ADDR
39831: GO 40656
39833: LD_INT 7
39835: DOUBLE
39836: EQUAL
39837: IFTRUE 39841
39839: GO 39867
39841: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39842: LD_ADDR_VAR 0 3
39846: PUSH
39847: LD_INT 2
39849: PUSH
39850: LD_INT 3
39852: PUSH
39853: LD_INT 4
39855: PUSH
39856: LD_INT 5
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: ST_TO_ADDR
39865: GO 40656
39867: LD_INT 12
39869: DOUBLE
39870: EQUAL
39871: IFTRUE 39875
39873: GO 39901
39875: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39876: LD_ADDR_VAR 0 3
39880: PUSH
39881: LD_INT 2
39883: PUSH
39884: LD_INT 3
39886: PUSH
39887: LD_INT 4
39889: PUSH
39890: LD_INT 5
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: ST_TO_ADDR
39899: GO 40656
39901: LD_INT 13
39903: DOUBLE
39904: EQUAL
39905: IFTRUE 39909
39907: GO 39935
39909: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39910: LD_ADDR_VAR 0 3
39914: PUSH
39915: LD_INT 2
39917: PUSH
39918: LD_INT 3
39920: PUSH
39921: LD_INT 4
39923: PUSH
39924: LD_INT 5
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: ST_TO_ADDR
39933: GO 40656
39935: LD_INT 14
39937: DOUBLE
39938: EQUAL
39939: IFTRUE 39943
39941: GO 39961
39943: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39944: LD_ADDR_VAR 0 3
39948: PUSH
39949: LD_INT 4
39951: PUSH
39952: LD_INT 5
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: ST_TO_ADDR
39959: GO 40656
39961: LD_INT 6
39963: DOUBLE
39964: EQUAL
39965: IFTRUE 39969
39967: GO 39987
39969: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39970: LD_ADDR_VAR 0 3
39974: PUSH
39975: LD_INT 4
39977: PUSH
39978: LD_INT 5
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: ST_TO_ADDR
39985: GO 40656
39987: LD_INT 10
39989: DOUBLE
39990: EQUAL
39991: IFTRUE 39995
39993: GO 40013
39995: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39996: LD_ADDR_VAR 0 3
40000: PUSH
40001: LD_INT 4
40003: PUSH
40004: LD_INT 5
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: ST_TO_ADDR
40011: GO 40656
40013: LD_INT 22
40015: DOUBLE
40016: EQUAL
40017: IFTRUE 40021
40019: GO 40047
40021: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40022: LD_ADDR_VAR 0 3
40026: PUSH
40027: LD_INT 11
40029: PUSH
40030: LD_INT 12
40032: PUSH
40033: LD_INT 13
40035: PUSH
40036: LD_INT 14
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: ST_TO_ADDR
40045: GO 40656
40047: LD_INT 23
40049: DOUBLE
40050: EQUAL
40051: IFTRUE 40055
40053: GO 40081
40055: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40056: LD_ADDR_VAR 0 3
40060: PUSH
40061: LD_INT 11
40063: PUSH
40064: LD_INT 12
40066: PUSH
40067: LD_INT 13
40069: PUSH
40070: LD_INT 14
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: ST_TO_ADDR
40079: GO 40656
40081: LD_INT 24
40083: DOUBLE
40084: EQUAL
40085: IFTRUE 40089
40087: GO 40115
40089: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40090: LD_ADDR_VAR 0 3
40094: PUSH
40095: LD_INT 11
40097: PUSH
40098: LD_INT 12
40100: PUSH
40101: LD_INT 13
40103: PUSH
40104: LD_INT 14
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: ST_TO_ADDR
40113: GO 40656
40115: LD_INT 30
40117: DOUBLE
40118: EQUAL
40119: IFTRUE 40123
40121: GO 40149
40123: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40124: LD_ADDR_VAR 0 3
40128: PUSH
40129: LD_INT 11
40131: PUSH
40132: LD_INT 12
40134: PUSH
40135: LD_INT 13
40137: PUSH
40138: LD_INT 14
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: ST_TO_ADDR
40147: GO 40656
40149: LD_INT 25
40151: DOUBLE
40152: EQUAL
40153: IFTRUE 40157
40155: GO 40175
40157: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40158: LD_ADDR_VAR 0 3
40162: PUSH
40163: LD_INT 13
40165: PUSH
40166: LD_INT 14
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: ST_TO_ADDR
40173: GO 40656
40175: LD_INT 27
40177: DOUBLE
40178: EQUAL
40179: IFTRUE 40183
40181: GO 40201
40183: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40184: LD_ADDR_VAR 0 3
40188: PUSH
40189: LD_INT 13
40191: PUSH
40192: LD_INT 14
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: ST_TO_ADDR
40199: GO 40656
40201: LD_INT 92
40203: DOUBLE
40204: EQUAL
40205: IFTRUE 40209
40207: GO 40235
40209: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40210: LD_ADDR_VAR 0 3
40214: PUSH
40215: LD_INT 11
40217: PUSH
40218: LD_INT 12
40220: PUSH
40221: LD_INT 13
40223: PUSH
40224: LD_INT 14
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: ST_TO_ADDR
40233: GO 40656
40235: LD_INT 28
40237: DOUBLE
40238: EQUAL
40239: IFTRUE 40243
40241: GO 40261
40243: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40244: LD_ADDR_VAR 0 3
40248: PUSH
40249: LD_INT 13
40251: PUSH
40252: LD_INT 14
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: ST_TO_ADDR
40259: GO 40656
40261: LD_INT 29
40263: DOUBLE
40264: EQUAL
40265: IFTRUE 40269
40267: GO 40287
40269: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40270: LD_ADDR_VAR 0 3
40274: PUSH
40275: LD_INT 13
40277: PUSH
40278: LD_INT 14
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: ST_TO_ADDR
40285: GO 40656
40287: LD_INT 31
40289: DOUBLE
40290: EQUAL
40291: IFTRUE 40295
40293: GO 40313
40295: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40296: LD_ADDR_VAR 0 3
40300: PUSH
40301: LD_INT 13
40303: PUSH
40304: LD_INT 14
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: ST_TO_ADDR
40311: GO 40656
40313: LD_INT 26
40315: DOUBLE
40316: EQUAL
40317: IFTRUE 40321
40319: GO 40339
40321: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40322: LD_ADDR_VAR 0 3
40326: PUSH
40327: LD_INT 13
40329: PUSH
40330: LD_INT 14
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: ST_TO_ADDR
40337: GO 40656
40339: LD_INT 42
40341: DOUBLE
40342: EQUAL
40343: IFTRUE 40347
40345: GO 40373
40347: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40348: LD_ADDR_VAR 0 3
40352: PUSH
40353: LD_INT 21
40355: PUSH
40356: LD_INT 22
40358: PUSH
40359: LD_INT 23
40361: PUSH
40362: LD_INT 24
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: ST_TO_ADDR
40371: GO 40656
40373: LD_INT 43
40375: DOUBLE
40376: EQUAL
40377: IFTRUE 40381
40379: GO 40407
40381: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40382: LD_ADDR_VAR 0 3
40386: PUSH
40387: LD_INT 21
40389: PUSH
40390: LD_INT 22
40392: PUSH
40393: LD_INT 23
40395: PUSH
40396: LD_INT 24
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: ST_TO_ADDR
40405: GO 40656
40407: LD_INT 44
40409: DOUBLE
40410: EQUAL
40411: IFTRUE 40415
40413: GO 40441
40415: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40416: LD_ADDR_VAR 0 3
40420: PUSH
40421: LD_INT 21
40423: PUSH
40424: LD_INT 22
40426: PUSH
40427: LD_INT 23
40429: PUSH
40430: LD_INT 24
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: ST_TO_ADDR
40439: GO 40656
40441: LD_INT 45
40443: DOUBLE
40444: EQUAL
40445: IFTRUE 40449
40447: GO 40475
40449: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40450: LD_ADDR_VAR 0 3
40454: PUSH
40455: LD_INT 21
40457: PUSH
40458: LD_INT 22
40460: PUSH
40461: LD_INT 23
40463: PUSH
40464: LD_INT 24
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: ST_TO_ADDR
40473: GO 40656
40475: LD_INT 49
40477: DOUBLE
40478: EQUAL
40479: IFTRUE 40483
40481: GO 40509
40483: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40484: LD_ADDR_VAR 0 3
40488: PUSH
40489: LD_INT 21
40491: PUSH
40492: LD_INT 22
40494: PUSH
40495: LD_INT 23
40497: PUSH
40498: LD_INT 24
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: ST_TO_ADDR
40507: GO 40656
40509: LD_INT 51
40511: DOUBLE
40512: EQUAL
40513: IFTRUE 40517
40515: GO 40543
40517: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40518: LD_ADDR_VAR 0 3
40522: PUSH
40523: LD_INT 21
40525: PUSH
40526: LD_INT 22
40528: PUSH
40529: LD_INT 23
40531: PUSH
40532: LD_INT 24
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: ST_TO_ADDR
40541: GO 40656
40543: LD_INT 52
40545: DOUBLE
40546: EQUAL
40547: IFTRUE 40551
40549: GO 40577
40551: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40552: LD_ADDR_VAR 0 3
40556: PUSH
40557: LD_INT 21
40559: PUSH
40560: LD_INT 22
40562: PUSH
40563: LD_INT 23
40565: PUSH
40566: LD_INT 24
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: ST_TO_ADDR
40575: GO 40656
40577: LD_INT 53
40579: DOUBLE
40580: EQUAL
40581: IFTRUE 40585
40583: GO 40603
40585: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40586: LD_ADDR_VAR 0 3
40590: PUSH
40591: LD_INT 23
40593: PUSH
40594: LD_INT 24
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: ST_TO_ADDR
40601: GO 40656
40603: LD_INT 46
40605: DOUBLE
40606: EQUAL
40607: IFTRUE 40611
40609: GO 40629
40611: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40612: LD_ADDR_VAR 0 3
40616: PUSH
40617: LD_INT 23
40619: PUSH
40620: LD_INT 24
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: ST_TO_ADDR
40627: GO 40656
40629: LD_INT 47
40631: DOUBLE
40632: EQUAL
40633: IFTRUE 40637
40635: GO 40655
40637: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40638: LD_ADDR_VAR 0 3
40642: PUSH
40643: LD_INT 23
40645: PUSH
40646: LD_INT 24
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: ST_TO_ADDR
40653: GO 40656
40655: POP
// result := ( chassis in result ) ;
40656: LD_ADDR_VAR 0 3
40660: PUSH
40661: LD_VAR 0 1
40665: PUSH
40666: LD_VAR 0 3
40670: IN
40671: ST_TO_ADDR
// end ;
40672: LD_VAR 0 3
40676: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40677: LD_INT 0
40679: PPUSH
40680: PPUSH
40681: PPUSH
40682: PPUSH
40683: PPUSH
40684: PPUSH
40685: PPUSH
// result := array ;
40686: LD_ADDR_VAR 0 5
40690: PUSH
40691: LD_VAR 0 1
40695: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40696: LD_VAR 0 1
40700: NOT
40701: PUSH
40702: LD_VAR 0 2
40706: NOT
40707: OR
40708: PUSH
40709: LD_VAR 0 3
40713: NOT
40714: OR
40715: PUSH
40716: LD_VAR 0 2
40720: PUSH
40721: LD_VAR 0 1
40725: GREATER
40726: OR
40727: PUSH
40728: LD_VAR 0 3
40732: PUSH
40733: LD_VAR 0 1
40737: GREATER
40738: OR
40739: IFFALSE 40743
// exit ;
40741: GO 41039
// if direction then
40743: LD_VAR 0 4
40747: IFFALSE 40811
// begin d := 1 ;
40749: LD_ADDR_VAR 0 9
40753: PUSH
40754: LD_INT 1
40756: ST_TO_ADDR
// if i_from > i_to then
40757: LD_VAR 0 2
40761: PUSH
40762: LD_VAR 0 3
40766: GREATER
40767: IFFALSE 40793
// length := ( array - i_from ) + i_to else
40769: LD_ADDR_VAR 0 11
40773: PUSH
40774: LD_VAR 0 1
40778: PUSH
40779: LD_VAR 0 2
40783: MINUS
40784: PUSH
40785: LD_VAR 0 3
40789: PLUS
40790: ST_TO_ADDR
40791: GO 40809
// length := i_to - i_from ;
40793: LD_ADDR_VAR 0 11
40797: PUSH
40798: LD_VAR 0 3
40802: PUSH
40803: LD_VAR 0 2
40807: MINUS
40808: ST_TO_ADDR
// end else
40809: GO 40872
// begin d := - 1 ;
40811: LD_ADDR_VAR 0 9
40815: PUSH
40816: LD_INT 1
40818: NEG
40819: ST_TO_ADDR
// if i_from > i_to then
40820: LD_VAR 0 2
40824: PUSH
40825: LD_VAR 0 3
40829: GREATER
40830: IFFALSE 40850
// length := i_from - i_to else
40832: LD_ADDR_VAR 0 11
40836: PUSH
40837: LD_VAR 0 2
40841: PUSH
40842: LD_VAR 0 3
40846: MINUS
40847: ST_TO_ADDR
40848: GO 40872
// length := ( array - i_to ) + i_from ;
40850: LD_ADDR_VAR 0 11
40854: PUSH
40855: LD_VAR 0 1
40859: PUSH
40860: LD_VAR 0 3
40864: MINUS
40865: PUSH
40866: LD_VAR 0 2
40870: PLUS
40871: ST_TO_ADDR
// end ; if not length then
40872: LD_VAR 0 11
40876: NOT
40877: IFFALSE 40881
// exit ;
40879: GO 41039
// tmp := array ;
40881: LD_ADDR_VAR 0 10
40885: PUSH
40886: LD_VAR 0 1
40890: ST_TO_ADDR
// for i = 1 to length do
40891: LD_ADDR_VAR 0 6
40895: PUSH
40896: DOUBLE
40897: LD_INT 1
40899: DEC
40900: ST_TO_ADDR
40901: LD_VAR 0 11
40905: PUSH
40906: FOR_TO
40907: IFFALSE 41027
// begin for j = 1 to array do
40909: LD_ADDR_VAR 0 7
40913: PUSH
40914: DOUBLE
40915: LD_INT 1
40917: DEC
40918: ST_TO_ADDR
40919: LD_VAR 0 1
40923: PUSH
40924: FOR_TO
40925: IFFALSE 41013
// begin k := j + d ;
40927: LD_ADDR_VAR 0 8
40931: PUSH
40932: LD_VAR 0 7
40936: PUSH
40937: LD_VAR 0 9
40941: PLUS
40942: ST_TO_ADDR
// if k > array then
40943: LD_VAR 0 8
40947: PUSH
40948: LD_VAR 0 1
40952: GREATER
40953: IFFALSE 40963
// k := 1 ;
40955: LD_ADDR_VAR 0 8
40959: PUSH
40960: LD_INT 1
40962: ST_TO_ADDR
// if not k then
40963: LD_VAR 0 8
40967: NOT
40968: IFFALSE 40980
// k := array ;
40970: LD_ADDR_VAR 0 8
40974: PUSH
40975: LD_VAR 0 1
40979: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40980: LD_ADDR_VAR 0 10
40984: PUSH
40985: LD_VAR 0 10
40989: PPUSH
40990: LD_VAR 0 8
40994: PPUSH
40995: LD_VAR 0 1
40999: PUSH
41000: LD_VAR 0 7
41004: ARRAY
41005: PPUSH
41006: CALL_OW 1
41010: ST_TO_ADDR
// end ;
41011: GO 40924
41013: POP
41014: POP
// array := tmp ;
41015: LD_ADDR_VAR 0 1
41019: PUSH
41020: LD_VAR 0 10
41024: ST_TO_ADDR
// end ;
41025: GO 40906
41027: POP
41028: POP
// result := array ;
41029: LD_ADDR_VAR 0 5
41033: PUSH
41034: LD_VAR 0 1
41038: ST_TO_ADDR
// end ;
41039: LD_VAR 0 5
41043: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41044: LD_INT 0
41046: PPUSH
41047: PPUSH
// result := 0 ;
41048: LD_ADDR_VAR 0 3
41052: PUSH
41053: LD_INT 0
41055: ST_TO_ADDR
// if not array or not value in array then
41056: LD_VAR 0 1
41060: NOT
41061: PUSH
41062: LD_VAR 0 2
41066: PUSH
41067: LD_VAR 0 1
41071: IN
41072: NOT
41073: OR
41074: IFFALSE 41078
// exit ;
41076: GO 41132
// for i = 1 to array do
41078: LD_ADDR_VAR 0 4
41082: PUSH
41083: DOUBLE
41084: LD_INT 1
41086: DEC
41087: ST_TO_ADDR
41088: LD_VAR 0 1
41092: PUSH
41093: FOR_TO
41094: IFFALSE 41130
// if value = array [ i ] then
41096: LD_VAR 0 2
41100: PUSH
41101: LD_VAR 0 1
41105: PUSH
41106: LD_VAR 0 4
41110: ARRAY
41111: EQUAL
41112: IFFALSE 41128
// begin result := i ;
41114: LD_ADDR_VAR 0 3
41118: PUSH
41119: LD_VAR 0 4
41123: ST_TO_ADDR
// exit ;
41124: POP
41125: POP
41126: GO 41132
// end ;
41128: GO 41093
41130: POP
41131: POP
// end ;
41132: LD_VAR 0 3
41136: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41137: LD_INT 0
41139: PPUSH
// vc_chassis := chassis ;
41140: LD_ADDR_OWVAR 37
41144: PUSH
41145: LD_VAR 0 1
41149: ST_TO_ADDR
// vc_engine := engine ;
41150: LD_ADDR_OWVAR 39
41154: PUSH
41155: LD_VAR 0 2
41159: ST_TO_ADDR
// vc_control := control ;
41160: LD_ADDR_OWVAR 38
41164: PUSH
41165: LD_VAR 0 3
41169: ST_TO_ADDR
// vc_weapon := weapon ;
41170: LD_ADDR_OWVAR 40
41174: PUSH
41175: LD_VAR 0 4
41179: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41180: LD_ADDR_OWVAR 41
41184: PUSH
41185: LD_VAR 0 5
41189: ST_TO_ADDR
// end ;
41190: LD_VAR 0 6
41194: RET
// export function WantPlant ( unit ) ; var task ; begin
41195: LD_INT 0
41197: PPUSH
41198: PPUSH
// result := false ;
41199: LD_ADDR_VAR 0 2
41203: PUSH
41204: LD_INT 0
41206: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41207: LD_ADDR_VAR 0 3
41211: PUSH
41212: LD_VAR 0 1
41216: PPUSH
41217: CALL_OW 437
41221: ST_TO_ADDR
// if task then
41222: LD_VAR 0 3
41226: IFFALSE 41254
// if task [ 1 ] [ 1 ] = p then
41228: LD_VAR 0 3
41232: PUSH
41233: LD_INT 1
41235: ARRAY
41236: PUSH
41237: LD_INT 1
41239: ARRAY
41240: PUSH
41241: LD_STRING p
41243: EQUAL
41244: IFFALSE 41254
// result := true ;
41246: LD_ADDR_VAR 0 2
41250: PUSH
41251: LD_INT 1
41253: ST_TO_ADDR
// end ;
41254: LD_VAR 0 2
41258: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41259: LD_INT 0
41261: PPUSH
41262: PPUSH
41263: PPUSH
41264: PPUSH
// if pos < 1 then
41265: LD_VAR 0 2
41269: PUSH
41270: LD_INT 1
41272: LESS
41273: IFFALSE 41277
// exit ;
41275: GO 41580
// if pos = 1 then
41277: LD_VAR 0 2
41281: PUSH
41282: LD_INT 1
41284: EQUAL
41285: IFFALSE 41318
// result := Replace ( arr , pos [ 1 ] , value ) else
41287: LD_ADDR_VAR 0 4
41291: PUSH
41292: LD_VAR 0 1
41296: PPUSH
41297: LD_VAR 0 2
41301: PUSH
41302: LD_INT 1
41304: ARRAY
41305: PPUSH
41306: LD_VAR 0 3
41310: PPUSH
41311: CALL_OW 1
41315: ST_TO_ADDR
41316: GO 41580
// begin tmp := arr ;
41318: LD_ADDR_VAR 0 6
41322: PUSH
41323: LD_VAR 0 1
41327: ST_TO_ADDR
// s_arr := [ tmp ] ;
41328: LD_ADDR_VAR 0 7
41332: PUSH
41333: LD_VAR 0 6
41337: PUSH
41338: EMPTY
41339: LIST
41340: ST_TO_ADDR
// for i = 1 to pos - 1 do
41341: LD_ADDR_VAR 0 5
41345: PUSH
41346: DOUBLE
41347: LD_INT 1
41349: DEC
41350: ST_TO_ADDR
41351: LD_VAR 0 2
41355: PUSH
41356: LD_INT 1
41358: MINUS
41359: PUSH
41360: FOR_TO
41361: IFFALSE 41406
// begin tmp := tmp [ pos [ i ] ] ;
41363: LD_ADDR_VAR 0 6
41367: PUSH
41368: LD_VAR 0 6
41372: PUSH
41373: LD_VAR 0 2
41377: PUSH
41378: LD_VAR 0 5
41382: ARRAY
41383: ARRAY
41384: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41385: LD_ADDR_VAR 0 7
41389: PUSH
41390: LD_VAR 0 7
41394: PUSH
41395: LD_VAR 0 6
41399: PUSH
41400: EMPTY
41401: LIST
41402: ADD
41403: ST_TO_ADDR
// end ;
41404: GO 41360
41406: POP
41407: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41408: LD_ADDR_VAR 0 6
41412: PUSH
41413: LD_VAR 0 6
41417: PPUSH
41418: LD_VAR 0 2
41422: PUSH
41423: LD_VAR 0 2
41427: ARRAY
41428: PPUSH
41429: LD_VAR 0 3
41433: PPUSH
41434: CALL_OW 1
41438: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41439: LD_ADDR_VAR 0 7
41443: PUSH
41444: LD_VAR 0 7
41448: PPUSH
41449: LD_VAR 0 7
41453: PPUSH
41454: LD_VAR 0 6
41458: PPUSH
41459: CALL_OW 1
41463: ST_TO_ADDR
// for i = s_arr downto 2 do
41464: LD_ADDR_VAR 0 5
41468: PUSH
41469: DOUBLE
41470: LD_VAR 0 7
41474: INC
41475: ST_TO_ADDR
41476: LD_INT 2
41478: PUSH
41479: FOR_DOWNTO
41480: IFFALSE 41564
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41482: LD_ADDR_VAR 0 6
41486: PUSH
41487: LD_VAR 0 7
41491: PUSH
41492: LD_VAR 0 5
41496: PUSH
41497: LD_INT 1
41499: MINUS
41500: ARRAY
41501: PPUSH
41502: LD_VAR 0 2
41506: PUSH
41507: LD_VAR 0 5
41511: PUSH
41512: LD_INT 1
41514: MINUS
41515: ARRAY
41516: PPUSH
41517: LD_VAR 0 7
41521: PUSH
41522: LD_VAR 0 5
41526: ARRAY
41527: PPUSH
41528: CALL_OW 1
41532: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41533: LD_ADDR_VAR 0 7
41537: PUSH
41538: LD_VAR 0 7
41542: PPUSH
41543: LD_VAR 0 5
41547: PUSH
41548: LD_INT 1
41550: MINUS
41551: PPUSH
41552: LD_VAR 0 6
41556: PPUSH
41557: CALL_OW 1
41561: ST_TO_ADDR
// end ;
41562: GO 41479
41564: POP
41565: POP
// result := s_arr [ 1 ] ;
41566: LD_ADDR_VAR 0 4
41570: PUSH
41571: LD_VAR 0 7
41575: PUSH
41576: LD_INT 1
41578: ARRAY
41579: ST_TO_ADDR
// end ; end ;
41580: LD_VAR 0 4
41584: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41585: LD_INT 0
41587: PPUSH
41588: PPUSH
// if not list then
41589: LD_VAR 0 1
41593: NOT
41594: IFFALSE 41598
// exit ;
41596: GO 41689
// i := list [ pos1 ] ;
41598: LD_ADDR_VAR 0 5
41602: PUSH
41603: LD_VAR 0 1
41607: PUSH
41608: LD_VAR 0 2
41612: ARRAY
41613: ST_TO_ADDR
// if not i then
41614: LD_VAR 0 5
41618: NOT
41619: IFFALSE 41623
// exit ;
41621: GO 41689
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41623: LD_ADDR_VAR 0 1
41627: PUSH
41628: LD_VAR 0 1
41632: PPUSH
41633: LD_VAR 0 2
41637: PPUSH
41638: LD_VAR 0 1
41642: PUSH
41643: LD_VAR 0 3
41647: ARRAY
41648: PPUSH
41649: CALL_OW 1
41653: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41654: LD_ADDR_VAR 0 1
41658: PUSH
41659: LD_VAR 0 1
41663: PPUSH
41664: LD_VAR 0 3
41668: PPUSH
41669: LD_VAR 0 5
41673: PPUSH
41674: CALL_OW 1
41678: ST_TO_ADDR
// result := list ;
41679: LD_ADDR_VAR 0 4
41683: PUSH
41684: LD_VAR 0 1
41688: ST_TO_ADDR
// end ;
41689: LD_VAR 0 4
41693: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41694: LD_INT 0
41696: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41697: LD_ADDR_VAR 0 5
41701: PUSH
41702: LD_VAR 0 1
41706: PPUSH
41707: CALL_OW 250
41711: PPUSH
41712: LD_VAR 0 1
41716: PPUSH
41717: CALL_OW 251
41721: PPUSH
41722: LD_VAR 0 2
41726: PPUSH
41727: LD_VAR 0 3
41731: PPUSH
41732: LD_VAR 0 4
41736: PPUSH
41737: CALL 42115 0 5
41741: ST_TO_ADDR
// end ;
41742: LD_VAR 0 5
41746: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
41747: LD_INT 0
41749: PPUSH
41750: PPUSH
41751: PPUSH
41752: PPUSH
// if not list or not unit then
41753: LD_VAR 0 2
41757: NOT
41758: PUSH
41759: LD_VAR 0 1
41763: NOT
41764: OR
41765: IFFALSE 41769
// exit ;
41767: GO 42110
// result := [ ] ;
41769: LD_ADDR_VAR 0 5
41773: PUSH
41774: EMPTY
41775: ST_TO_ADDR
// for i in list do
41776: LD_ADDR_VAR 0 6
41780: PUSH
41781: LD_VAR 0 2
41785: PUSH
41786: FOR_IN
41787: IFFALSE 42005
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41789: LD_ADDR_VAR 0 8
41793: PUSH
41794: LD_VAR 0 1
41798: PPUSH
41799: LD_VAR 0 6
41803: PUSH
41804: LD_INT 1
41806: ARRAY
41807: PPUSH
41808: LD_VAR 0 6
41812: PUSH
41813: LD_INT 2
41815: ARRAY
41816: PPUSH
41817: CALL_OW 297
41821: ST_TO_ADDR
// if not Count ( result ) then
41822: LD_VAR 0 5
41826: PPUSH
41827: CALL 38399 0 1
41831: NOT
41832: IFFALSE 41865
// begin result := Join ( result , [ i , tmp ] ) ;
41834: LD_ADDR_VAR 0 5
41838: PUSH
41839: LD_VAR 0 5
41843: PPUSH
41844: LD_VAR 0 6
41848: PUSH
41849: LD_VAR 0 8
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PPUSH
41858: CALL 74008 0 2
41862: ST_TO_ADDR
// continue ;
41863: GO 41786
// end ; if result [ result ] [ 2 ] <= tmp then
41865: LD_VAR 0 5
41869: PUSH
41870: LD_VAR 0 5
41874: ARRAY
41875: PUSH
41876: LD_INT 2
41878: ARRAY
41879: PUSH
41880: LD_VAR 0 8
41884: LESSEQUAL
41885: IFFALSE 41918
// result := Join ( result , [ i , tmp ] ) else
41887: LD_ADDR_VAR 0 5
41891: PUSH
41892: LD_VAR 0 5
41896: PPUSH
41897: LD_VAR 0 6
41901: PUSH
41902: LD_VAR 0 8
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PPUSH
41911: CALL 74008 0 2
41915: ST_TO_ADDR
41916: GO 42003
// begin for j := 1 to Count ( result ) do
41918: LD_ADDR_VAR 0 7
41922: PUSH
41923: DOUBLE
41924: LD_INT 1
41926: DEC
41927: ST_TO_ADDR
41928: LD_VAR 0 5
41932: PPUSH
41933: CALL 38399 0 1
41937: PUSH
41938: FOR_TO
41939: IFFALSE 42001
// begin if tmp < result [ j ] [ 2 ] then
41941: LD_VAR 0 8
41945: PUSH
41946: LD_VAR 0 5
41950: PUSH
41951: LD_VAR 0 7
41955: ARRAY
41956: PUSH
41957: LD_INT 2
41959: ARRAY
41960: LESS
41961: IFFALSE 41999
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41963: LD_ADDR_VAR 0 5
41967: PUSH
41968: LD_VAR 0 5
41972: PPUSH
41973: LD_VAR 0 7
41977: PPUSH
41978: LD_VAR 0 6
41982: PUSH
41983: LD_VAR 0 8
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PPUSH
41992: CALL_OW 2
41996: ST_TO_ADDR
// break ;
41997: GO 42001
// end ; end ;
41999: GO 41938
42001: POP
42002: POP
// end ; end ;
42003: GO 41786
42005: POP
42006: POP
// if result and not asc then
42007: LD_VAR 0 5
42011: PUSH
42012: LD_VAR 0 3
42016: NOT
42017: AND
42018: IFFALSE 42035
// result := ReverseArray ( result ) ;
42020: LD_ADDR_VAR 0 5
42024: PUSH
42025: LD_VAR 0 5
42029: PPUSH
42030: CALL 69275 0 1
42034: ST_TO_ADDR
// tmp := [ ] ;
42035: LD_ADDR_VAR 0 8
42039: PUSH
42040: EMPTY
42041: ST_TO_ADDR
// if mode then
42042: LD_VAR 0 4
42046: IFFALSE 42110
// begin for i := 1 to result do
42048: LD_ADDR_VAR 0 6
42052: PUSH
42053: DOUBLE
42054: LD_INT 1
42056: DEC
42057: ST_TO_ADDR
42058: LD_VAR 0 5
42062: PUSH
42063: FOR_TO
42064: IFFALSE 42098
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
42066: LD_ADDR_VAR 0 8
42070: PUSH
42071: LD_VAR 0 8
42075: PPUSH
42076: LD_VAR 0 5
42080: PUSH
42081: LD_VAR 0 6
42085: ARRAY
42086: PUSH
42087: LD_INT 1
42089: ARRAY
42090: PPUSH
42091: CALL 74008 0 2
42095: ST_TO_ADDR
42096: GO 42063
42098: POP
42099: POP
// result := tmp ;
42100: LD_ADDR_VAR 0 5
42104: PUSH
42105: LD_VAR 0 8
42109: ST_TO_ADDR
// end ; end ;
42110: LD_VAR 0 5
42114: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42115: LD_INT 0
42117: PPUSH
42118: PPUSH
42119: PPUSH
42120: PPUSH
// if not list then
42121: LD_VAR 0 3
42125: NOT
42126: IFFALSE 42130
// exit ;
42128: GO 42518
// result := [ ] ;
42130: LD_ADDR_VAR 0 6
42134: PUSH
42135: EMPTY
42136: ST_TO_ADDR
// for i in list do
42137: LD_ADDR_VAR 0 7
42141: PUSH
42142: LD_VAR 0 3
42146: PUSH
42147: FOR_IN
42148: IFFALSE 42350
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42150: LD_ADDR_VAR 0 9
42154: PUSH
42155: LD_VAR 0 7
42159: PPUSH
42160: LD_VAR 0 1
42164: PPUSH
42165: LD_VAR 0 2
42169: PPUSH
42170: CALL_OW 297
42174: ST_TO_ADDR
// if not result then
42175: LD_VAR 0 6
42179: NOT
42180: IFFALSE 42206
// result := [ [ i , tmp ] ] else
42182: LD_ADDR_VAR 0 6
42186: PUSH
42187: LD_VAR 0 7
42191: PUSH
42192: LD_VAR 0 9
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: EMPTY
42202: LIST
42203: ST_TO_ADDR
42204: GO 42348
// begin if result [ result ] [ 2 ] <= tmp then
42206: LD_VAR 0 6
42210: PUSH
42211: LD_VAR 0 6
42215: ARRAY
42216: PUSH
42217: LD_INT 2
42219: ARRAY
42220: PUSH
42221: LD_VAR 0 9
42225: LESSEQUAL
42226: IFFALSE 42268
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42228: LD_ADDR_VAR 0 6
42232: PUSH
42233: LD_VAR 0 6
42237: PPUSH
42238: LD_VAR 0 6
42242: PUSH
42243: LD_INT 1
42245: PLUS
42246: PPUSH
42247: LD_VAR 0 7
42251: PUSH
42252: LD_VAR 0 9
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PPUSH
42261: CALL_OW 2
42265: ST_TO_ADDR
42266: GO 42348
// for j := 1 to result do
42268: LD_ADDR_VAR 0 8
42272: PUSH
42273: DOUBLE
42274: LD_INT 1
42276: DEC
42277: ST_TO_ADDR
42278: LD_VAR 0 6
42282: PUSH
42283: FOR_TO
42284: IFFALSE 42346
// begin if tmp < result [ j ] [ 2 ] then
42286: LD_VAR 0 9
42290: PUSH
42291: LD_VAR 0 6
42295: PUSH
42296: LD_VAR 0 8
42300: ARRAY
42301: PUSH
42302: LD_INT 2
42304: ARRAY
42305: LESS
42306: IFFALSE 42344
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42308: LD_ADDR_VAR 0 6
42312: PUSH
42313: LD_VAR 0 6
42317: PPUSH
42318: LD_VAR 0 8
42322: PPUSH
42323: LD_VAR 0 7
42327: PUSH
42328: LD_VAR 0 9
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PPUSH
42337: CALL_OW 2
42341: ST_TO_ADDR
// break ;
42342: GO 42346
// end ; end ;
42344: GO 42283
42346: POP
42347: POP
// end ; end ;
42348: GO 42147
42350: POP
42351: POP
// if result and not asc then
42352: LD_VAR 0 6
42356: PUSH
42357: LD_VAR 0 4
42361: NOT
42362: AND
42363: IFFALSE 42438
// begin tmp := result ;
42365: LD_ADDR_VAR 0 9
42369: PUSH
42370: LD_VAR 0 6
42374: ST_TO_ADDR
// for i = tmp downto 1 do
42375: LD_ADDR_VAR 0 7
42379: PUSH
42380: DOUBLE
42381: LD_VAR 0 9
42385: INC
42386: ST_TO_ADDR
42387: LD_INT 1
42389: PUSH
42390: FOR_DOWNTO
42391: IFFALSE 42436
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42393: LD_ADDR_VAR 0 6
42397: PUSH
42398: LD_VAR 0 6
42402: PPUSH
42403: LD_VAR 0 9
42407: PUSH
42408: LD_VAR 0 7
42412: MINUS
42413: PUSH
42414: LD_INT 1
42416: PLUS
42417: PPUSH
42418: LD_VAR 0 9
42422: PUSH
42423: LD_VAR 0 7
42427: ARRAY
42428: PPUSH
42429: CALL_OW 1
42433: ST_TO_ADDR
42434: GO 42390
42436: POP
42437: POP
// end ; tmp := [ ] ;
42438: LD_ADDR_VAR 0 9
42442: PUSH
42443: EMPTY
42444: ST_TO_ADDR
// if mode then
42445: LD_VAR 0 5
42449: IFFALSE 42518
// begin for i = 1 to result do
42451: LD_ADDR_VAR 0 7
42455: PUSH
42456: DOUBLE
42457: LD_INT 1
42459: DEC
42460: ST_TO_ADDR
42461: LD_VAR 0 6
42465: PUSH
42466: FOR_TO
42467: IFFALSE 42506
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42469: LD_ADDR_VAR 0 9
42473: PUSH
42474: LD_VAR 0 9
42478: PPUSH
42479: LD_VAR 0 7
42483: PPUSH
42484: LD_VAR 0 6
42488: PUSH
42489: LD_VAR 0 7
42493: ARRAY
42494: PUSH
42495: LD_INT 1
42497: ARRAY
42498: PPUSH
42499: CALL_OW 1
42503: ST_TO_ADDR
42504: GO 42466
42506: POP
42507: POP
// result := tmp ;
42508: LD_ADDR_VAR 0 6
42512: PUSH
42513: LD_VAR 0 9
42517: ST_TO_ADDR
// end ; end ;
42518: LD_VAR 0 6
42522: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42523: LD_INT 0
42525: PPUSH
42526: PPUSH
42527: PPUSH
42528: PPUSH
42529: PPUSH
42530: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42531: LD_ADDR_VAR 0 5
42535: PUSH
42536: LD_INT 0
42538: PUSH
42539: LD_INT 0
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: EMPTY
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: ST_TO_ADDR
// if not x or not y then
42553: LD_VAR 0 2
42557: NOT
42558: PUSH
42559: LD_VAR 0 3
42563: NOT
42564: OR
42565: IFFALSE 42569
// exit ;
42567: GO 44219
// if not range then
42569: LD_VAR 0 4
42573: NOT
42574: IFFALSE 42584
// range := 10 ;
42576: LD_ADDR_VAR 0 4
42580: PUSH
42581: LD_INT 10
42583: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42584: LD_ADDR_VAR 0 8
42588: PUSH
42589: LD_INT 81
42591: PUSH
42592: LD_VAR 0 1
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 92
42603: PUSH
42604: LD_VAR 0 2
42608: PUSH
42609: LD_VAR 0 3
42613: PUSH
42614: LD_VAR 0 4
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 3
42627: PUSH
42628: LD_INT 21
42630: PUSH
42631: LD_INT 3
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: LIST
42646: PPUSH
42647: CALL_OW 69
42651: ST_TO_ADDR
// if not tmp then
42652: LD_VAR 0 8
42656: NOT
42657: IFFALSE 42661
// exit ;
42659: GO 44219
// for i in tmp do
42661: LD_ADDR_VAR 0 6
42665: PUSH
42666: LD_VAR 0 8
42670: PUSH
42671: FOR_IN
42672: IFFALSE 44194
// begin points := [ 0 , 0 , 0 ] ;
42674: LD_ADDR_VAR 0 9
42678: PUSH
42679: LD_INT 0
42681: PUSH
42682: LD_INT 0
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: LIST
42692: ST_TO_ADDR
// bpoints := 1 ;
42693: LD_ADDR_VAR 0 10
42697: PUSH
42698: LD_INT 1
42700: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42701: LD_VAR 0 6
42705: PPUSH
42706: CALL_OW 247
42710: PUSH
42711: LD_INT 1
42713: DOUBLE
42714: EQUAL
42715: IFTRUE 42719
42717: GO 43297
42719: POP
// begin if GetClass ( i ) = 1 then
42720: LD_VAR 0 6
42724: PPUSH
42725: CALL_OW 257
42729: PUSH
42730: LD_INT 1
42732: EQUAL
42733: IFFALSE 42754
// points := [ 10 , 5 , 3 ] ;
42735: LD_ADDR_VAR 0 9
42739: PUSH
42740: LD_INT 10
42742: PUSH
42743: LD_INT 5
42745: PUSH
42746: LD_INT 3
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: LIST
42753: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42754: LD_VAR 0 6
42758: PPUSH
42759: CALL_OW 257
42763: PUSH
42764: LD_INT 2
42766: PUSH
42767: LD_INT 3
42769: PUSH
42770: LD_INT 4
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: LIST
42777: IN
42778: IFFALSE 42799
// points := [ 3 , 2 , 1 ] ;
42780: LD_ADDR_VAR 0 9
42784: PUSH
42785: LD_INT 3
42787: PUSH
42788: LD_INT 2
42790: PUSH
42791: LD_INT 1
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: LIST
42798: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42799: LD_VAR 0 6
42803: PPUSH
42804: CALL_OW 257
42808: PUSH
42809: LD_INT 5
42811: EQUAL
42812: IFFALSE 42833
// points := [ 130 , 5 , 2 ] ;
42814: LD_ADDR_VAR 0 9
42818: PUSH
42819: LD_INT 130
42821: PUSH
42822: LD_INT 5
42824: PUSH
42825: LD_INT 2
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: LIST
42832: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42833: LD_VAR 0 6
42837: PPUSH
42838: CALL_OW 257
42842: PUSH
42843: LD_INT 8
42845: EQUAL
42846: IFFALSE 42867
// points := [ 35 , 35 , 30 ] ;
42848: LD_ADDR_VAR 0 9
42852: PUSH
42853: LD_INT 35
42855: PUSH
42856: LD_INT 35
42858: PUSH
42859: LD_INT 30
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: LIST
42866: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42867: LD_VAR 0 6
42871: PPUSH
42872: CALL_OW 257
42876: PUSH
42877: LD_INT 9
42879: EQUAL
42880: IFFALSE 42901
// points := [ 20 , 55 , 40 ] ;
42882: LD_ADDR_VAR 0 9
42886: PUSH
42887: LD_INT 20
42889: PUSH
42890: LD_INT 55
42892: PUSH
42893: LD_INT 40
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: LIST
42900: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42901: LD_VAR 0 6
42905: PPUSH
42906: CALL_OW 257
42910: PUSH
42911: LD_INT 12
42913: PUSH
42914: LD_INT 16
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: IN
42921: IFFALSE 42942
// points := [ 5 , 3 , 2 ] ;
42923: LD_ADDR_VAR 0 9
42927: PUSH
42928: LD_INT 5
42930: PUSH
42931: LD_INT 3
42933: PUSH
42934: LD_INT 2
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: LIST
42941: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42942: LD_VAR 0 6
42946: PPUSH
42947: CALL_OW 257
42951: PUSH
42952: LD_INT 17
42954: EQUAL
42955: IFFALSE 42976
// points := [ 100 , 50 , 75 ] ;
42957: LD_ADDR_VAR 0 9
42961: PUSH
42962: LD_INT 100
42964: PUSH
42965: LD_INT 50
42967: PUSH
42968: LD_INT 75
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: LIST
42975: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42976: LD_VAR 0 6
42980: PPUSH
42981: CALL_OW 257
42985: PUSH
42986: LD_INT 15
42988: EQUAL
42989: IFFALSE 43010
// points := [ 10 , 5 , 3 ] ;
42991: LD_ADDR_VAR 0 9
42995: PUSH
42996: LD_INT 10
42998: PUSH
42999: LD_INT 5
43001: PUSH
43002: LD_INT 3
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: LIST
43009: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43010: LD_VAR 0 6
43014: PPUSH
43015: CALL_OW 257
43019: PUSH
43020: LD_INT 14
43022: EQUAL
43023: IFFALSE 43044
// points := [ 10 , 0 , 0 ] ;
43025: LD_ADDR_VAR 0 9
43029: PUSH
43030: LD_INT 10
43032: PUSH
43033: LD_INT 0
43035: PUSH
43036: LD_INT 0
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: LIST
43043: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43044: LD_VAR 0 6
43048: PPUSH
43049: CALL_OW 257
43053: PUSH
43054: LD_INT 11
43056: EQUAL
43057: IFFALSE 43078
// points := [ 30 , 10 , 5 ] ;
43059: LD_ADDR_VAR 0 9
43063: PUSH
43064: LD_INT 30
43066: PUSH
43067: LD_INT 10
43069: PUSH
43070: LD_INT 5
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: LIST
43077: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43078: LD_VAR 0 1
43082: PPUSH
43083: LD_INT 5
43085: PPUSH
43086: CALL_OW 321
43090: PUSH
43091: LD_INT 2
43093: EQUAL
43094: IFFALSE 43111
// bpoints := bpoints * 1.8 ;
43096: LD_ADDR_VAR 0 10
43100: PUSH
43101: LD_VAR 0 10
43105: PUSH
43106: LD_REAL  1.80000000000000E+0000
43109: MUL
43110: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43111: LD_VAR 0 6
43115: PPUSH
43116: CALL_OW 257
43120: PUSH
43121: LD_INT 1
43123: PUSH
43124: LD_INT 2
43126: PUSH
43127: LD_INT 3
43129: PUSH
43130: LD_INT 4
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: IN
43139: PUSH
43140: LD_VAR 0 1
43144: PPUSH
43145: LD_INT 51
43147: PPUSH
43148: CALL_OW 321
43152: PUSH
43153: LD_INT 2
43155: EQUAL
43156: AND
43157: IFFALSE 43174
// bpoints := bpoints * 1.2 ;
43159: LD_ADDR_VAR 0 10
43163: PUSH
43164: LD_VAR 0 10
43168: PUSH
43169: LD_REAL  1.20000000000000E+0000
43172: MUL
43173: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43174: LD_VAR 0 6
43178: PPUSH
43179: CALL_OW 257
43183: PUSH
43184: LD_INT 5
43186: PUSH
43187: LD_INT 7
43189: PUSH
43190: LD_INT 9
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: LIST
43197: IN
43198: PUSH
43199: LD_VAR 0 1
43203: PPUSH
43204: LD_INT 52
43206: PPUSH
43207: CALL_OW 321
43211: PUSH
43212: LD_INT 2
43214: EQUAL
43215: AND
43216: IFFALSE 43233
// bpoints := bpoints * 1.5 ;
43218: LD_ADDR_VAR 0 10
43222: PUSH
43223: LD_VAR 0 10
43227: PUSH
43228: LD_REAL  1.50000000000000E+0000
43231: MUL
43232: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43233: LD_VAR 0 1
43237: PPUSH
43238: LD_INT 66
43240: PPUSH
43241: CALL_OW 321
43245: PUSH
43246: LD_INT 2
43248: EQUAL
43249: IFFALSE 43266
// bpoints := bpoints * 1.1 ;
43251: LD_ADDR_VAR 0 10
43255: PUSH
43256: LD_VAR 0 10
43260: PUSH
43261: LD_REAL  1.10000000000000E+0000
43264: MUL
43265: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43266: LD_ADDR_VAR 0 10
43270: PUSH
43271: LD_VAR 0 10
43275: PUSH
43276: LD_VAR 0 6
43280: PPUSH
43281: LD_INT 1
43283: PPUSH
43284: CALL_OW 259
43288: PUSH
43289: LD_REAL  1.15000000000000E+0000
43292: MUL
43293: MUL
43294: ST_TO_ADDR
// end ; unit_vehicle :
43295: GO 44123
43297: LD_INT 2
43299: DOUBLE
43300: EQUAL
43301: IFTRUE 43305
43303: GO 44111
43305: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43306: LD_VAR 0 6
43310: PPUSH
43311: CALL_OW 264
43315: PUSH
43316: LD_INT 2
43318: PUSH
43319: LD_INT 42
43321: PUSH
43322: LD_INT 24
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: LIST
43329: IN
43330: IFFALSE 43351
// points := [ 25 , 5 , 3 ] ;
43332: LD_ADDR_VAR 0 9
43336: PUSH
43337: LD_INT 25
43339: PUSH
43340: LD_INT 5
43342: PUSH
43343: LD_INT 3
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: LIST
43350: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43351: LD_VAR 0 6
43355: PPUSH
43356: CALL_OW 264
43360: PUSH
43361: LD_INT 4
43363: PUSH
43364: LD_INT 43
43366: PUSH
43367: LD_INT 25
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: LIST
43374: IN
43375: IFFALSE 43396
// points := [ 40 , 15 , 5 ] ;
43377: LD_ADDR_VAR 0 9
43381: PUSH
43382: LD_INT 40
43384: PUSH
43385: LD_INT 15
43387: PUSH
43388: LD_INT 5
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: LIST
43395: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43396: LD_VAR 0 6
43400: PPUSH
43401: CALL_OW 264
43405: PUSH
43406: LD_INT 3
43408: PUSH
43409: LD_INT 23
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: IN
43416: IFFALSE 43437
// points := [ 7 , 25 , 8 ] ;
43418: LD_ADDR_VAR 0 9
43422: PUSH
43423: LD_INT 7
43425: PUSH
43426: LD_INT 25
43428: PUSH
43429: LD_INT 8
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: LIST
43436: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43437: LD_VAR 0 6
43441: PPUSH
43442: CALL_OW 264
43446: PUSH
43447: LD_INT 5
43449: PUSH
43450: LD_INT 27
43452: PUSH
43453: LD_INT 44
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: LIST
43460: IN
43461: IFFALSE 43482
// points := [ 14 , 50 , 16 ] ;
43463: LD_ADDR_VAR 0 9
43467: PUSH
43468: LD_INT 14
43470: PUSH
43471: LD_INT 50
43473: PUSH
43474: LD_INT 16
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: LIST
43481: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43482: LD_VAR 0 6
43486: PPUSH
43487: CALL_OW 264
43491: PUSH
43492: LD_INT 6
43494: PUSH
43495: LD_INT 46
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: IN
43502: IFFALSE 43523
// points := [ 32 , 120 , 70 ] ;
43504: LD_ADDR_VAR 0 9
43508: PUSH
43509: LD_INT 32
43511: PUSH
43512: LD_INT 120
43514: PUSH
43515: LD_INT 70
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: LIST
43522: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43523: LD_VAR 0 6
43527: PPUSH
43528: CALL_OW 264
43532: PUSH
43533: LD_INT 7
43535: PUSH
43536: LD_INT 28
43538: PUSH
43539: LD_INT 45
43541: PUSH
43542: LD_INT 92
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: IN
43551: IFFALSE 43572
// points := [ 35 , 20 , 45 ] ;
43553: LD_ADDR_VAR 0 9
43557: PUSH
43558: LD_INT 35
43560: PUSH
43561: LD_INT 20
43563: PUSH
43564: LD_INT 45
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: LIST
43571: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43572: LD_VAR 0 6
43576: PPUSH
43577: CALL_OW 264
43581: PUSH
43582: LD_INT 47
43584: PUSH
43585: EMPTY
43586: LIST
43587: IN
43588: IFFALSE 43609
// points := [ 67 , 45 , 75 ] ;
43590: LD_ADDR_VAR 0 9
43594: PUSH
43595: LD_INT 67
43597: PUSH
43598: LD_INT 45
43600: PUSH
43601: LD_INT 75
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: LIST
43608: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43609: LD_VAR 0 6
43613: PPUSH
43614: CALL_OW 264
43618: PUSH
43619: LD_INT 26
43621: PUSH
43622: EMPTY
43623: LIST
43624: IN
43625: IFFALSE 43646
// points := [ 120 , 30 , 80 ] ;
43627: LD_ADDR_VAR 0 9
43631: PUSH
43632: LD_INT 120
43634: PUSH
43635: LD_INT 30
43637: PUSH
43638: LD_INT 80
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: LIST
43645: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43646: LD_VAR 0 6
43650: PPUSH
43651: CALL_OW 264
43655: PUSH
43656: LD_INT 22
43658: PUSH
43659: EMPTY
43660: LIST
43661: IN
43662: IFFALSE 43683
// points := [ 40 , 1 , 1 ] ;
43664: LD_ADDR_VAR 0 9
43668: PUSH
43669: LD_INT 40
43671: PUSH
43672: LD_INT 1
43674: PUSH
43675: LD_INT 1
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: LIST
43682: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43683: LD_VAR 0 6
43687: PPUSH
43688: CALL_OW 264
43692: PUSH
43693: LD_INT 29
43695: PUSH
43696: EMPTY
43697: LIST
43698: IN
43699: IFFALSE 43720
// points := [ 70 , 200 , 400 ] ;
43701: LD_ADDR_VAR 0 9
43705: PUSH
43706: LD_INT 70
43708: PUSH
43709: LD_INT 200
43711: PUSH
43712: LD_INT 400
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: LIST
43719: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43720: LD_VAR 0 6
43724: PPUSH
43725: CALL_OW 264
43729: PUSH
43730: LD_INT 14
43732: PUSH
43733: LD_INT 53
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: IN
43740: IFFALSE 43761
// points := [ 40 , 10 , 20 ] ;
43742: LD_ADDR_VAR 0 9
43746: PUSH
43747: LD_INT 40
43749: PUSH
43750: LD_INT 10
43752: PUSH
43753: LD_INT 20
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: LIST
43760: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43761: LD_VAR 0 6
43765: PPUSH
43766: CALL_OW 264
43770: PUSH
43771: LD_INT 9
43773: PUSH
43774: EMPTY
43775: LIST
43776: IN
43777: IFFALSE 43798
// points := [ 5 , 70 , 20 ] ;
43779: LD_ADDR_VAR 0 9
43783: PUSH
43784: LD_INT 5
43786: PUSH
43787: LD_INT 70
43789: PUSH
43790: LD_INT 20
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: LIST
43797: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43798: LD_VAR 0 6
43802: PPUSH
43803: CALL_OW 264
43807: PUSH
43808: LD_INT 10
43810: PUSH
43811: EMPTY
43812: LIST
43813: IN
43814: IFFALSE 43835
// points := [ 35 , 110 , 70 ] ;
43816: LD_ADDR_VAR 0 9
43820: PUSH
43821: LD_INT 35
43823: PUSH
43824: LD_INT 110
43826: PUSH
43827: LD_INT 70
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: LIST
43834: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43835: LD_VAR 0 6
43839: PPUSH
43840: CALL_OW 265
43844: PUSH
43845: LD_INT 25
43847: EQUAL
43848: IFFALSE 43869
// points := [ 80 , 65 , 100 ] ;
43850: LD_ADDR_VAR 0 9
43854: PUSH
43855: LD_INT 80
43857: PUSH
43858: LD_INT 65
43860: PUSH
43861: LD_INT 100
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: LIST
43868: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43869: LD_VAR 0 6
43873: PPUSH
43874: CALL_OW 263
43878: PUSH
43879: LD_INT 1
43881: EQUAL
43882: IFFALSE 43917
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43884: LD_ADDR_VAR 0 10
43888: PUSH
43889: LD_VAR 0 10
43893: PUSH
43894: LD_VAR 0 6
43898: PPUSH
43899: CALL_OW 311
43903: PPUSH
43904: LD_INT 3
43906: PPUSH
43907: CALL_OW 259
43911: PUSH
43912: LD_INT 4
43914: MUL
43915: MUL
43916: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43917: LD_VAR 0 6
43921: PPUSH
43922: CALL_OW 263
43926: PUSH
43927: LD_INT 2
43929: EQUAL
43930: IFFALSE 43981
// begin j := IsControledBy ( i ) ;
43932: LD_ADDR_VAR 0 7
43936: PUSH
43937: LD_VAR 0 6
43941: PPUSH
43942: CALL_OW 312
43946: ST_TO_ADDR
// if j then
43947: LD_VAR 0 7
43951: IFFALSE 43981
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43953: LD_ADDR_VAR 0 10
43957: PUSH
43958: LD_VAR 0 10
43962: PUSH
43963: LD_VAR 0 7
43967: PPUSH
43968: LD_INT 3
43970: PPUSH
43971: CALL_OW 259
43975: PUSH
43976: LD_INT 3
43978: MUL
43979: MUL
43980: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43981: LD_VAR 0 6
43985: PPUSH
43986: CALL_OW 264
43990: PUSH
43991: LD_INT 5
43993: PUSH
43994: LD_INT 6
43996: PUSH
43997: LD_INT 46
43999: PUSH
44000: LD_INT 44
44002: PUSH
44003: LD_INT 47
44005: PUSH
44006: LD_INT 45
44008: PUSH
44009: LD_INT 28
44011: PUSH
44012: LD_INT 7
44014: PUSH
44015: LD_INT 27
44017: PUSH
44018: LD_INT 29
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: IN
44033: PUSH
44034: LD_VAR 0 1
44038: PPUSH
44039: LD_INT 52
44041: PPUSH
44042: CALL_OW 321
44046: PUSH
44047: LD_INT 2
44049: EQUAL
44050: AND
44051: IFFALSE 44068
// bpoints := bpoints * 1.2 ;
44053: LD_ADDR_VAR 0 10
44057: PUSH
44058: LD_VAR 0 10
44062: PUSH
44063: LD_REAL  1.20000000000000E+0000
44066: MUL
44067: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44068: LD_VAR 0 6
44072: PPUSH
44073: CALL_OW 264
44077: PUSH
44078: LD_INT 6
44080: PUSH
44081: LD_INT 46
44083: PUSH
44084: LD_INT 47
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: LIST
44091: IN
44092: IFFALSE 44109
// bpoints := bpoints * 1.2 ;
44094: LD_ADDR_VAR 0 10
44098: PUSH
44099: LD_VAR 0 10
44103: PUSH
44104: LD_REAL  1.20000000000000E+0000
44107: MUL
44108: ST_TO_ADDR
// end ; unit_building :
44109: GO 44123
44111: LD_INT 3
44113: DOUBLE
44114: EQUAL
44115: IFTRUE 44119
44117: GO 44122
44119: POP
// ; end ;
44120: GO 44123
44122: POP
// for j = 1 to 3 do
44123: LD_ADDR_VAR 0 7
44127: PUSH
44128: DOUBLE
44129: LD_INT 1
44131: DEC
44132: ST_TO_ADDR
44133: LD_INT 3
44135: PUSH
44136: FOR_TO
44137: IFFALSE 44190
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44139: LD_ADDR_VAR 0 5
44143: PUSH
44144: LD_VAR 0 5
44148: PPUSH
44149: LD_VAR 0 7
44153: PPUSH
44154: LD_VAR 0 5
44158: PUSH
44159: LD_VAR 0 7
44163: ARRAY
44164: PUSH
44165: LD_VAR 0 9
44169: PUSH
44170: LD_VAR 0 7
44174: ARRAY
44175: PUSH
44176: LD_VAR 0 10
44180: MUL
44181: PLUS
44182: PPUSH
44183: CALL_OW 1
44187: ST_TO_ADDR
44188: GO 44136
44190: POP
44191: POP
// end ;
44192: GO 42671
44194: POP
44195: POP
// result := Replace ( result , 4 , tmp ) ;
44196: LD_ADDR_VAR 0 5
44200: PUSH
44201: LD_VAR 0 5
44205: PPUSH
44206: LD_INT 4
44208: PPUSH
44209: LD_VAR 0 8
44213: PPUSH
44214: CALL_OW 1
44218: ST_TO_ADDR
// end ;
44219: LD_VAR 0 5
44223: RET
// export function DangerAtRange ( unit , range ) ; begin
44224: LD_INT 0
44226: PPUSH
// if not unit then
44227: LD_VAR 0 1
44231: NOT
44232: IFFALSE 44236
// exit ;
44234: GO 44281
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44236: LD_ADDR_VAR 0 3
44240: PUSH
44241: LD_VAR 0 1
44245: PPUSH
44246: CALL_OW 255
44250: PPUSH
44251: LD_VAR 0 1
44255: PPUSH
44256: CALL_OW 250
44260: PPUSH
44261: LD_VAR 0 1
44265: PPUSH
44266: CALL_OW 251
44270: PPUSH
44271: LD_VAR 0 2
44275: PPUSH
44276: CALL 42523 0 4
44280: ST_TO_ADDR
// end ;
44281: LD_VAR 0 3
44285: RET
// export function DangerInArea ( side , area ) ; begin
44286: LD_INT 0
44288: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44289: LD_ADDR_VAR 0 3
44293: PUSH
44294: LD_VAR 0 2
44298: PPUSH
44299: LD_INT 81
44301: PUSH
44302: LD_VAR 0 1
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PPUSH
44311: CALL_OW 70
44315: ST_TO_ADDR
// end ;
44316: LD_VAR 0 3
44320: RET
// export function IsExtension ( b ) ; begin
44321: LD_INT 0
44323: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44324: LD_ADDR_VAR 0 2
44328: PUSH
44329: LD_VAR 0 1
44333: PUSH
44334: LD_INT 23
44336: PUSH
44337: LD_INT 20
44339: PUSH
44340: LD_INT 22
44342: PUSH
44343: LD_INT 17
44345: PUSH
44346: LD_INT 24
44348: PUSH
44349: LD_INT 21
44351: PUSH
44352: LD_INT 19
44354: PUSH
44355: LD_INT 16
44357: PUSH
44358: LD_INT 25
44360: PUSH
44361: LD_INT 18
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: IN
44376: ST_TO_ADDR
// end ;
44377: LD_VAR 0 2
44381: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44382: LD_INT 0
44384: PPUSH
44385: PPUSH
44386: PPUSH
// result := [ ] ;
44387: LD_ADDR_VAR 0 4
44391: PUSH
44392: EMPTY
44393: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44394: LD_ADDR_VAR 0 5
44398: PUSH
44399: LD_VAR 0 2
44403: PPUSH
44404: LD_INT 21
44406: PUSH
44407: LD_INT 3
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PPUSH
44414: CALL_OW 70
44418: ST_TO_ADDR
// if not tmp then
44419: LD_VAR 0 5
44423: NOT
44424: IFFALSE 44428
// exit ;
44426: GO 44492
// if checkLink then
44428: LD_VAR 0 3
44432: IFFALSE 44482
// begin for i in tmp do
44434: LD_ADDR_VAR 0 6
44438: PUSH
44439: LD_VAR 0 5
44443: PUSH
44444: FOR_IN
44445: IFFALSE 44480
// if GetBase ( i ) <> base then
44447: LD_VAR 0 6
44451: PPUSH
44452: CALL_OW 274
44456: PUSH
44457: LD_VAR 0 1
44461: NONEQUAL
44462: IFFALSE 44478
// ComLinkToBase ( base , i ) ;
44464: LD_VAR 0 1
44468: PPUSH
44469: LD_VAR 0 6
44473: PPUSH
44474: CALL_OW 169
44478: GO 44444
44480: POP
44481: POP
// end ; result := tmp ;
44482: LD_ADDR_VAR 0 4
44486: PUSH
44487: LD_VAR 0 5
44491: ST_TO_ADDR
// end ;
44492: LD_VAR 0 4
44496: RET
// export function ComComplete ( units , b ) ; var i ; begin
44497: LD_INT 0
44499: PPUSH
44500: PPUSH
// if not units then
44501: LD_VAR 0 1
44505: NOT
44506: IFFALSE 44510
// exit ;
44508: GO 44600
// for i in units do
44510: LD_ADDR_VAR 0 4
44514: PUSH
44515: LD_VAR 0 1
44519: PUSH
44520: FOR_IN
44521: IFFALSE 44598
// if BuildingStatus ( b ) = bs_build then
44523: LD_VAR 0 2
44527: PPUSH
44528: CALL_OW 461
44532: PUSH
44533: LD_INT 1
44535: EQUAL
44536: IFFALSE 44596
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44538: LD_VAR 0 4
44542: PPUSH
44543: LD_STRING h
44545: PUSH
44546: LD_VAR 0 2
44550: PPUSH
44551: CALL_OW 250
44555: PUSH
44556: LD_VAR 0 2
44560: PPUSH
44561: CALL_OW 251
44565: PUSH
44566: LD_VAR 0 2
44570: PUSH
44571: LD_INT 0
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: PUSH
44589: EMPTY
44590: LIST
44591: PPUSH
44592: CALL_OW 446
44596: GO 44520
44598: POP
44599: POP
// end ;
44600: LD_VAR 0 3
44604: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44605: LD_INT 0
44607: PPUSH
44608: PPUSH
44609: PPUSH
44610: PPUSH
44611: PPUSH
44612: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44613: LD_VAR 0 1
44617: NOT
44618: PUSH
44619: LD_VAR 0 1
44623: PPUSH
44624: CALL_OW 263
44628: PUSH
44629: LD_INT 2
44631: NONEQUAL
44632: OR
44633: IFFALSE 44637
// exit ;
44635: GO 44953
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44637: LD_ADDR_VAR 0 6
44641: PUSH
44642: LD_INT 22
44644: PUSH
44645: LD_VAR 0 1
44649: PPUSH
44650: CALL_OW 255
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 2
44661: PUSH
44662: LD_INT 30
44664: PUSH
44665: LD_INT 36
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 34
44674: PUSH
44675: LD_INT 31
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: LIST
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PPUSH
44691: CALL_OW 69
44695: ST_TO_ADDR
// if not tmp then
44696: LD_VAR 0 6
44700: NOT
44701: IFFALSE 44705
// exit ;
44703: GO 44953
// result := [ ] ;
44705: LD_ADDR_VAR 0 2
44709: PUSH
44710: EMPTY
44711: ST_TO_ADDR
// for i in tmp do
44712: LD_ADDR_VAR 0 3
44716: PUSH
44717: LD_VAR 0 6
44721: PUSH
44722: FOR_IN
44723: IFFALSE 44794
// begin t := UnitsInside ( i ) ;
44725: LD_ADDR_VAR 0 4
44729: PUSH
44730: LD_VAR 0 3
44734: PPUSH
44735: CALL_OW 313
44739: ST_TO_ADDR
// if t then
44740: LD_VAR 0 4
44744: IFFALSE 44792
// for j in t do
44746: LD_ADDR_VAR 0 7
44750: PUSH
44751: LD_VAR 0 4
44755: PUSH
44756: FOR_IN
44757: IFFALSE 44790
// result := Replace ( result , result + 1 , j ) ;
44759: LD_ADDR_VAR 0 2
44763: PUSH
44764: LD_VAR 0 2
44768: PPUSH
44769: LD_VAR 0 2
44773: PUSH
44774: LD_INT 1
44776: PLUS
44777: PPUSH
44778: LD_VAR 0 7
44782: PPUSH
44783: CALL_OW 1
44787: ST_TO_ADDR
44788: GO 44756
44790: POP
44791: POP
// end ;
44792: GO 44722
44794: POP
44795: POP
// if not result then
44796: LD_VAR 0 2
44800: NOT
44801: IFFALSE 44805
// exit ;
44803: GO 44953
// mech := result [ 1 ] ;
44805: LD_ADDR_VAR 0 5
44809: PUSH
44810: LD_VAR 0 2
44814: PUSH
44815: LD_INT 1
44817: ARRAY
44818: ST_TO_ADDR
// if result > 1 then
44819: LD_VAR 0 2
44823: PUSH
44824: LD_INT 1
44826: GREATER
44827: IFFALSE 44939
// begin for i = 2 to result do
44829: LD_ADDR_VAR 0 3
44833: PUSH
44834: DOUBLE
44835: LD_INT 2
44837: DEC
44838: ST_TO_ADDR
44839: LD_VAR 0 2
44843: PUSH
44844: FOR_TO
44845: IFFALSE 44937
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44847: LD_ADDR_VAR 0 4
44851: PUSH
44852: LD_VAR 0 2
44856: PUSH
44857: LD_VAR 0 3
44861: ARRAY
44862: PPUSH
44863: LD_INT 3
44865: PPUSH
44866: CALL_OW 259
44870: PUSH
44871: LD_VAR 0 2
44875: PUSH
44876: LD_VAR 0 3
44880: ARRAY
44881: PPUSH
44882: CALL_OW 432
44886: MINUS
44887: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44888: LD_VAR 0 4
44892: PUSH
44893: LD_VAR 0 5
44897: PPUSH
44898: LD_INT 3
44900: PPUSH
44901: CALL_OW 259
44905: PUSH
44906: LD_VAR 0 5
44910: PPUSH
44911: CALL_OW 432
44915: MINUS
44916: GREATEREQUAL
44917: IFFALSE 44935
// mech := result [ i ] ;
44919: LD_ADDR_VAR 0 5
44923: PUSH
44924: LD_VAR 0 2
44928: PUSH
44929: LD_VAR 0 3
44933: ARRAY
44934: ST_TO_ADDR
// end ;
44935: GO 44844
44937: POP
44938: POP
// end ; ComLinkTo ( vehicle , mech ) ;
44939: LD_VAR 0 1
44943: PPUSH
44944: LD_VAR 0 5
44948: PPUSH
44949: CALL_OW 135
// end ;
44953: LD_VAR 0 2
44957: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44958: LD_INT 0
44960: PPUSH
44961: PPUSH
44962: PPUSH
44963: PPUSH
44964: PPUSH
44965: PPUSH
44966: PPUSH
44967: PPUSH
44968: PPUSH
44969: PPUSH
44970: PPUSH
44971: PPUSH
44972: PPUSH
// result := [ ] ;
44973: LD_ADDR_VAR 0 7
44977: PUSH
44978: EMPTY
44979: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44980: LD_VAR 0 1
44984: PPUSH
44985: CALL_OW 266
44989: PUSH
44990: LD_INT 0
44992: PUSH
44993: LD_INT 1
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: IN
45000: NOT
45001: IFFALSE 45005
// exit ;
45003: GO 46639
// if name then
45005: LD_VAR 0 3
45009: IFFALSE 45025
// SetBName ( base_dep , name ) ;
45011: LD_VAR 0 1
45015: PPUSH
45016: LD_VAR 0 3
45020: PPUSH
45021: CALL_OW 500
// base := GetBase ( base_dep ) ;
45025: LD_ADDR_VAR 0 15
45029: PUSH
45030: LD_VAR 0 1
45034: PPUSH
45035: CALL_OW 274
45039: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45040: LD_ADDR_VAR 0 16
45044: PUSH
45045: LD_VAR 0 1
45049: PPUSH
45050: CALL_OW 255
45054: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45055: LD_ADDR_VAR 0 17
45059: PUSH
45060: LD_VAR 0 1
45064: PPUSH
45065: CALL_OW 248
45069: ST_TO_ADDR
// if sources then
45070: LD_VAR 0 5
45074: IFFALSE 45121
// for i = 1 to 3 do
45076: LD_ADDR_VAR 0 8
45080: PUSH
45081: DOUBLE
45082: LD_INT 1
45084: DEC
45085: ST_TO_ADDR
45086: LD_INT 3
45088: PUSH
45089: FOR_TO
45090: IFFALSE 45119
// AddResourceType ( base , i , sources [ i ] ) ;
45092: LD_VAR 0 15
45096: PPUSH
45097: LD_VAR 0 8
45101: PPUSH
45102: LD_VAR 0 5
45106: PUSH
45107: LD_VAR 0 8
45111: ARRAY
45112: PPUSH
45113: CALL_OW 276
45117: GO 45089
45119: POP
45120: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45121: LD_ADDR_VAR 0 18
45125: PUSH
45126: LD_VAR 0 15
45130: PPUSH
45131: LD_VAR 0 2
45135: PPUSH
45136: LD_INT 1
45138: PPUSH
45139: CALL 44382 0 3
45143: ST_TO_ADDR
// InitHc ;
45144: CALL_OW 19
// InitUc ;
45148: CALL_OW 18
// uc_side := side ;
45152: LD_ADDR_OWVAR 20
45156: PUSH
45157: LD_VAR 0 16
45161: ST_TO_ADDR
// uc_nation := nation ;
45162: LD_ADDR_OWVAR 21
45166: PUSH
45167: LD_VAR 0 17
45171: ST_TO_ADDR
// if buildings then
45172: LD_VAR 0 18
45176: IFFALSE 46498
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45178: LD_ADDR_VAR 0 19
45182: PUSH
45183: LD_VAR 0 18
45187: PPUSH
45188: LD_INT 2
45190: PUSH
45191: LD_INT 30
45193: PUSH
45194: LD_INT 29
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 30
45203: PUSH
45204: LD_INT 30
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: LIST
45215: PPUSH
45216: CALL_OW 72
45220: ST_TO_ADDR
// if tmp then
45221: LD_VAR 0 19
45225: IFFALSE 45273
// for i in tmp do
45227: LD_ADDR_VAR 0 8
45231: PUSH
45232: LD_VAR 0 19
45236: PUSH
45237: FOR_IN
45238: IFFALSE 45271
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45240: LD_VAR 0 8
45244: PPUSH
45245: CALL_OW 250
45249: PPUSH
45250: LD_VAR 0 8
45254: PPUSH
45255: CALL_OW 251
45259: PPUSH
45260: LD_VAR 0 16
45264: PPUSH
45265: CALL_OW 441
45269: GO 45237
45271: POP
45272: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45273: LD_VAR 0 18
45277: PPUSH
45278: LD_INT 2
45280: PUSH
45281: LD_INT 30
45283: PUSH
45284: LD_INT 32
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 30
45293: PUSH
45294: LD_INT 33
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: LIST
45305: PPUSH
45306: CALL_OW 72
45310: IFFALSE 45398
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45312: LD_ADDR_VAR 0 8
45316: PUSH
45317: LD_VAR 0 18
45321: PPUSH
45322: LD_INT 2
45324: PUSH
45325: LD_INT 30
45327: PUSH
45328: LD_INT 32
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 30
45337: PUSH
45338: LD_INT 33
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: LIST
45349: PPUSH
45350: CALL_OW 72
45354: PUSH
45355: FOR_IN
45356: IFFALSE 45396
// begin if not GetBWeapon ( i ) then
45358: LD_VAR 0 8
45362: PPUSH
45363: CALL_OW 269
45367: NOT
45368: IFFALSE 45394
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45370: LD_VAR 0 8
45374: PPUSH
45375: LD_VAR 0 8
45379: PPUSH
45380: LD_VAR 0 2
45384: PPUSH
45385: CALL 46644 0 2
45389: PPUSH
45390: CALL_OW 431
// end ;
45394: GO 45355
45396: POP
45397: POP
// end ; for i = 1 to personel do
45398: LD_ADDR_VAR 0 8
45402: PUSH
45403: DOUBLE
45404: LD_INT 1
45406: DEC
45407: ST_TO_ADDR
45408: LD_VAR 0 6
45412: PUSH
45413: FOR_TO
45414: IFFALSE 46478
// begin if i > 4 then
45416: LD_VAR 0 8
45420: PUSH
45421: LD_INT 4
45423: GREATER
45424: IFFALSE 45428
// break ;
45426: GO 46478
// case i of 1 :
45428: LD_VAR 0 8
45432: PUSH
45433: LD_INT 1
45435: DOUBLE
45436: EQUAL
45437: IFTRUE 45441
45439: GO 45521
45441: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45442: LD_ADDR_VAR 0 12
45446: PUSH
45447: LD_VAR 0 18
45451: PPUSH
45452: LD_INT 22
45454: PUSH
45455: LD_VAR 0 16
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 58
45466: PUSH
45467: EMPTY
45468: LIST
45469: PUSH
45470: LD_INT 2
45472: PUSH
45473: LD_INT 30
45475: PUSH
45476: LD_INT 32
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 30
45485: PUSH
45486: LD_INT 4
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 30
45495: PUSH
45496: LD_INT 5
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: LIST
45513: PPUSH
45514: CALL_OW 72
45518: ST_TO_ADDR
45519: GO 45743
45521: LD_INT 2
45523: DOUBLE
45524: EQUAL
45525: IFTRUE 45529
45527: GO 45591
45529: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45530: LD_ADDR_VAR 0 12
45534: PUSH
45535: LD_VAR 0 18
45539: PPUSH
45540: LD_INT 22
45542: PUSH
45543: LD_VAR 0 16
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 2
45554: PUSH
45555: LD_INT 30
45557: PUSH
45558: LD_INT 0
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 30
45567: PUSH
45568: LD_INT 1
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: LIST
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PPUSH
45584: CALL_OW 72
45588: ST_TO_ADDR
45589: GO 45743
45591: LD_INT 3
45593: DOUBLE
45594: EQUAL
45595: IFTRUE 45599
45597: GO 45661
45599: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45600: LD_ADDR_VAR 0 12
45604: PUSH
45605: LD_VAR 0 18
45609: PPUSH
45610: LD_INT 22
45612: PUSH
45613: LD_VAR 0 16
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: LD_INT 30
45627: PUSH
45628: LD_INT 2
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 30
45637: PUSH
45638: LD_INT 3
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: LIST
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PPUSH
45654: CALL_OW 72
45658: ST_TO_ADDR
45659: GO 45743
45661: LD_INT 4
45663: DOUBLE
45664: EQUAL
45665: IFTRUE 45669
45667: GO 45742
45669: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45670: LD_ADDR_VAR 0 12
45674: PUSH
45675: LD_VAR 0 18
45679: PPUSH
45680: LD_INT 22
45682: PUSH
45683: LD_VAR 0 16
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 2
45694: PUSH
45695: LD_INT 30
45697: PUSH
45698: LD_INT 6
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 30
45707: PUSH
45708: LD_INT 7
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 30
45717: PUSH
45718: LD_INT 8
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PPUSH
45735: CALL_OW 72
45739: ST_TO_ADDR
45740: GO 45743
45742: POP
// if i = 1 then
45743: LD_VAR 0 8
45747: PUSH
45748: LD_INT 1
45750: EQUAL
45751: IFFALSE 45862
// begin tmp := [ ] ;
45753: LD_ADDR_VAR 0 19
45757: PUSH
45758: EMPTY
45759: ST_TO_ADDR
// for j in f do
45760: LD_ADDR_VAR 0 9
45764: PUSH
45765: LD_VAR 0 12
45769: PUSH
45770: FOR_IN
45771: IFFALSE 45844
// if GetBType ( j ) = b_bunker then
45773: LD_VAR 0 9
45777: PPUSH
45778: CALL_OW 266
45782: PUSH
45783: LD_INT 32
45785: EQUAL
45786: IFFALSE 45813
// tmp := Insert ( tmp , 1 , j ) else
45788: LD_ADDR_VAR 0 19
45792: PUSH
45793: LD_VAR 0 19
45797: PPUSH
45798: LD_INT 1
45800: PPUSH
45801: LD_VAR 0 9
45805: PPUSH
45806: CALL_OW 2
45810: ST_TO_ADDR
45811: GO 45842
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45813: LD_ADDR_VAR 0 19
45817: PUSH
45818: LD_VAR 0 19
45822: PPUSH
45823: LD_VAR 0 19
45827: PUSH
45828: LD_INT 1
45830: PLUS
45831: PPUSH
45832: LD_VAR 0 9
45836: PPUSH
45837: CALL_OW 2
45841: ST_TO_ADDR
45842: GO 45770
45844: POP
45845: POP
// if tmp then
45846: LD_VAR 0 19
45850: IFFALSE 45862
// f := tmp ;
45852: LD_ADDR_VAR 0 12
45856: PUSH
45857: LD_VAR 0 19
45861: ST_TO_ADDR
// end ; x := personel [ i ] ;
45862: LD_ADDR_VAR 0 13
45866: PUSH
45867: LD_VAR 0 6
45871: PUSH
45872: LD_VAR 0 8
45876: ARRAY
45877: ST_TO_ADDR
// if x = - 1 then
45878: LD_VAR 0 13
45882: PUSH
45883: LD_INT 1
45885: NEG
45886: EQUAL
45887: IFFALSE 46096
// begin for j in f do
45889: LD_ADDR_VAR 0 9
45893: PUSH
45894: LD_VAR 0 12
45898: PUSH
45899: FOR_IN
45900: IFFALSE 46092
// repeat InitHc ;
45902: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45906: LD_VAR 0 9
45910: PPUSH
45911: CALL_OW 266
45915: PUSH
45916: LD_INT 5
45918: EQUAL
45919: IFFALSE 45989
// begin if UnitsInside ( j ) < 3 then
45921: LD_VAR 0 9
45925: PPUSH
45926: CALL_OW 313
45930: PUSH
45931: LD_INT 3
45933: LESS
45934: IFFALSE 45970
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45936: LD_INT 0
45938: PPUSH
45939: LD_INT 5
45941: PUSH
45942: LD_INT 8
45944: PUSH
45945: LD_INT 9
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: LIST
45952: PUSH
45953: LD_VAR 0 17
45957: ARRAY
45958: PPUSH
45959: LD_VAR 0 4
45963: PPUSH
45964: CALL_OW 380
45968: GO 45987
// PrepareHuman ( false , i , skill ) ;
45970: LD_INT 0
45972: PPUSH
45973: LD_VAR 0 8
45977: PPUSH
45978: LD_VAR 0 4
45982: PPUSH
45983: CALL_OW 380
// end else
45987: GO 46006
// PrepareHuman ( false , i , skill ) ;
45989: LD_INT 0
45991: PPUSH
45992: LD_VAR 0 8
45996: PPUSH
45997: LD_VAR 0 4
46001: PPUSH
46002: CALL_OW 380
// un := CreateHuman ;
46006: LD_ADDR_VAR 0 14
46010: PUSH
46011: CALL_OW 44
46015: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46016: LD_ADDR_VAR 0 7
46020: PUSH
46021: LD_VAR 0 7
46025: PPUSH
46026: LD_INT 1
46028: PPUSH
46029: LD_VAR 0 14
46033: PPUSH
46034: CALL_OW 2
46038: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46039: LD_VAR 0 14
46043: PPUSH
46044: LD_VAR 0 9
46048: PPUSH
46049: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46053: LD_VAR 0 9
46057: PPUSH
46058: CALL_OW 313
46062: PUSH
46063: LD_INT 6
46065: EQUAL
46066: PUSH
46067: LD_VAR 0 9
46071: PPUSH
46072: CALL_OW 266
46076: PUSH
46077: LD_INT 32
46079: PUSH
46080: LD_INT 31
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: IN
46087: OR
46088: IFFALSE 45902
46090: GO 45899
46092: POP
46093: POP
// end else
46094: GO 46476
// for j = 1 to x do
46096: LD_ADDR_VAR 0 9
46100: PUSH
46101: DOUBLE
46102: LD_INT 1
46104: DEC
46105: ST_TO_ADDR
46106: LD_VAR 0 13
46110: PUSH
46111: FOR_TO
46112: IFFALSE 46474
// begin InitHc ;
46114: CALL_OW 19
// if not f then
46118: LD_VAR 0 12
46122: NOT
46123: IFFALSE 46212
// begin PrepareHuman ( false , i , skill ) ;
46125: LD_INT 0
46127: PPUSH
46128: LD_VAR 0 8
46132: PPUSH
46133: LD_VAR 0 4
46137: PPUSH
46138: CALL_OW 380
// un := CreateHuman ;
46142: LD_ADDR_VAR 0 14
46146: PUSH
46147: CALL_OW 44
46151: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46152: LD_ADDR_VAR 0 7
46156: PUSH
46157: LD_VAR 0 7
46161: PPUSH
46162: LD_INT 1
46164: PPUSH
46165: LD_VAR 0 14
46169: PPUSH
46170: CALL_OW 2
46174: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46175: LD_VAR 0 14
46179: PPUSH
46180: LD_VAR 0 1
46184: PPUSH
46185: CALL_OW 250
46189: PPUSH
46190: LD_VAR 0 1
46194: PPUSH
46195: CALL_OW 251
46199: PPUSH
46200: LD_INT 10
46202: PPUSH
46203: LD_INT 0
46205: PPUSH
46206: CALL_OW 50
// continue ;
46210: GO 46111
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46212: LD_VAR 0 12
46216: PUSH
46217: LD_INT 1
46219: ARRAY
46220: PPUSH
46221: CALL_OW 313
46225: PUSH
46226: LD_VAR 0 12
46230: PUSH
46231: LD_INT 1
46233: ARRAY
46234: PPUSH
46235: CALL_OW 266
46239: PUSH
46240: LD_INT 32
46242: PUSH
46243: LD_INT 31
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: IN
46250: AND
46251: PUSH
46252: LD_VAR 0 12
46256: PUSH
46257: LD_INT 1
46259: ARRAY
46260: PPUSH
46261: CALL_OW 313
46265: PUSH
46266: LD_INT 6
46268: EQUAL
46269: OR
46270: IFFALSE 46290
// f := Delete ( f , 1 ) ;
46272: LD_ADDR_VAR 0 12
46276: PUSH
46277: LD_VAR 0 12
46281: PPUSH
46282: LD_INT 1
46284: PPUSH
46285: CALL_OW 3
46289: ST_TO_ADDR
// if not f then
46290: LD_VAR 0 12
46294: NOT
46295: IFFALSE 46313
// begin x := x + 2 ;
46297: LD_ADDR_VAR 0 13
46301: PUSH
46302: LD_VAR 0 13
46306: PUSH
46307: LD_INT 2
46309: PLUS
46310: ST_TO_ADDR
// continue ;
46311: GO 46111
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46313: LD_VAR 0 12
46317: PUSH
46318: LD_INT 1
46320: ARRAY
46321: PPUSH
46322: CALL_OW 266
46326: PUSH
46327: LD_INT 5
46329: EQUAL
46330: IFFALSE 46404
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46332: LD_VAR 0 12
46336: PUSH
46337: LD_INT 1
46339: ARRAY
46340: PPUSH
46341: CALL_OW 313
46345: PUSH
46346: LD_INT 3
46348: LESS
46349: IFFALSE 46385
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46351: LD_INT 0
46353: PPUSH
46354: LD_INT 5
46356: PUSH
46357: LD_INT 8
46359: PUSH
46360: LD_INT 9
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: LIST
46367: PUSH
46368: LD_VAR 0 17
46372: ARRAY
46373: PPUSH
46374: LD_VAR 0 4
46378: PPUSH
46379: CALL_OW 380
46383: GO 46402
// PrepareHuman ( false , i , skill ) ;
46385: LD_INT 0
46387: PPUSH
46388: LD_VAR 0 8
46392: PPUSH
46393: LD_VAR 0 4
46397: PPUSH
46398: CALL_OW 380
// end else
46402: GO 46421
// PrepareHuman ( false , i , skill ) ;
46404: LD_INT 0
46406: PPUSH
46407: LD_VAR 0 8
46411: PPUSH
46412: LD_VAR 0 4
46416: PPUSH
46417: CALL_OW 380
// un := CreateHuman ;
46421: LD_ADDR_VAR 0 14
46425: PUSH
46426: CALL_OW 44
46430: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46431: LD_ADDR_VAR 0 7
46435: PUSH
46436: LD_VAR 0 7
46440: PPUSH
46441: LD_INT 1
46443: PPUSH
46444: LD_VAR 0 14
46448: PPUSH
46449: CALL_OW 2
46453: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46454: LD_VAR 0 14
46458: PPUSH
46459: LD_VAR 0 12
46463: PUSH
46464: LD_INT 1
46466: ARRAY
46467: PPUSH
46468: CALL_OW 52
// end ;
46472: GO 46111
46474: POP
46475: POP
// end ;
46476: GO 45413
46478: POP
46479: POP
// result := result ^ buildings ;
46480: LD_ADDR_VAR 0 7
46484: PUSH
46485: LD_VAR 0 7
46489: PUSH
46490: LD_VAR 0 18
46494: ADD
46495: ST_TO_ADDR
// end else
46496: GO 46639
// begin for i = 1 to personel do
46498: LD_ADDR_VAR 0 8
46502: PUSH
46503: DOUBLE
46504: LD_INT 1
46506: DEC
46507: ST_TO_ADDR
46508: LD_VAR 0 6
46512: PUSH
46513: FOR_TO
46514: IFFALSE 46637
// begin if i > 4 then
46516: LD_VAR 0 8
46520: PUSH
46521: LD_INT 4
46523: GREATER
46524: IFFALSE 46528
// break ;
46526: GO 46637
// x := personel [ i ] ;
46528: LD_ADDR_VAR 0 13
46532: PUSH
46533: LD_VAR 0 6
46537: PUSH
46538: LD_VAR 0 8
46542: ARRAY
46543: ST_TO_ADDR
// if x = - 1 then
46544: LD_VAR 0 13
46548: PUSH
46549: LD_INT 1
46551: NEG
46552: EQUAL
46553: IFFALSE 46557
// continue ;
46555: GO 46513
// PrepareHuman ( false , i , skill ) ;
46557: LD_INT 0
46559: PPUSH
46560: LD_VAR 0 8
46564: PPUSH
46565: LD_VAR 0 4
46569: PPUSH
46570: CALL_OW 380
// un := CreateHuman ;
46574: LD_ADDR_VAR 0 14
46578: PUSH
46579: CALL_OW 44
46583: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46584: LD_VAR 0 14
46588: PPUSH
46589: LD_VAR 0 1
46593: PPUSH
46594: CALL_OW 250
46598: PPUSH
46599: LD_VAR 0 1
46603: PPUSH
46604: CALL_OW 251
46608: PPUSH
46609: LD_INT 10
46611: PPUSH
46612: LD_INT 0
46614: PPUSH
46615: CALL_OW 50
// result := result ^ un ;
46619: LD_ADDR_VAR 0 7
46623: PUSH
46624: LD_VAR 0 7
46628: PUSH
46629: LD_VAR 0 14
46633: ADD
46634: ST_TO_ADDR
// end ;
46635: GO 46513
46637: POP
46638: POP
// end ; end ;
46639: LD_VAR 0 7
46643: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46644: LD_INT 0
46646: PPUSH
46647: PPUSH
46648: PPUSH
46649: PPUSH
46650: PPUSH
46651: PPUSH
46652: PPUSH
46653: PPUSH
46654: PPUSH
46655: PPUSH
46656: PPUSH
46657: PPUSH
46658: PPUSH
46659: PPUSH
46660: PPUSH
46661: PPUSH
// result := false ;
46662: LD_ADDR_VAR 0 3
46666: PUSH
46667: LD_INT 0
46669: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46670: LD_VAR 0 1
46674: NOT
46675: PUSH
46676: LD_VAR 0 1
46680: PPUSH
46681: CALL_OW 266
46685: PUSH
46686: LD_INT 32
46688: PUSH
46689: LD_INT 33
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: IN
46696: NOT
46697: OR
46698: IFFALSE 46702
// exit ;
46700: GO 47811
// nat := GetNation ( tower ) ;
46702: LD_ADDR_VAR 0 12
46706: PUSH
46707: LD_VAR 0 1
46711: PPUSH
46712: CALL_OW 248
46716: ST_TO_ADDR
// side := GetSide ( tower ) ;
46717: LD_ADDR_VAR 0 16
46721: PUSH
46722: LD_VAR 0 1
46726: PPUSH
46727: CALL_OW 255
46731: ST_TO_ADDR
// x := GetX ( tower ) ;
46732: LD_ADDR_VAR 0 10
46736: PUSH
46737: LD_VAR 0 1
46741: PPUSH
46742: CALL_OW 250
46746: ST_TO_ADDR
// y := GetY ( tower ) ;
46747: LD_ADDR_VAR 0 11
46751: PUSH
46752: LD_VAR 0 1
46756: PPUSH
46757: CALL_OW 251
46761: ST_TO_ADDR
// if not x or not y then
46762: LD_VAR 0 10
46766: NOT
46767: PUSH
46768: LD_VAR 0 11
46772: NOT
46773: OR
46774: IFFALSE 46778
// exit ;
46776: GO 47811
// weapon := 0 ;
46778: LD_ADDR_VAR 0 18
46782: PUSH
46783: LD_INT 0
46785: ST_TO_ADDR
// fac_list := [ ] ;
46786: LD_ADDR_VAR 0 17
46790: PUSH
46791: EMPTY
46792: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46793: LD_ADDR_VAR 0 6
46797: PUSH
46798: LD_VAR 0 1
46802: PPUSH
46803: CALL_OW 274
46807: PPUSH
46808: LD_VAR 0 2
46812: PPUSH
46813: LD_INT 0
46815: PPUSH
46816: CALL 44382 0 3
46820: PPUSH
46821: LD_INT 30
46823: PUSH
46824: LD_INT 3
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PPUSH
46831: CALL_OW 72
46835: ST_TO_ADDR
// if not factories then
46836: LD_VAR 0 6
46840: NOT
46841: IFFALSE 46845
// exit ;
46843: GO 47811
// for i in factories do
46845: LD_ADDR_VAR 0 8
46849: PUSH
46850: LD_VAR 0 6
46854: PUSH
46855: FOR_IN
46856: IFFALSE 46881
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46858: LD_ADDR_VAR 0 17
46862: PUSH
46863: LD_VAR 0 17
46867: PUSH
46868: LD_VAR 0 8
46872: PPUSH
46873: CALL_OW 478
46877: UNION
46878: ST_TO_ADDR
46879: GO 46855
46881: POP
46882: POP
// if not fac_list then
46883: LD_VAR 0 17
46887: NOT
46888: IFFALSE 46892
// exit ;
46890: GO 47811
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46892: LD_ADDR_VAR 0 5
46896: PUSH
46897: LD_INT 4
46899: PUSH
46900: LD_INT 5
46902: PUSH
46903: LD_INT 9
46905: PUSH
46906: LD_INT 10
46908: PUSH
46909: LD_INT 6
46911: PUSH
46912: LD_INT 7
46914: PUSH
46915: LD_INT 11
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 27
46929: PUSH
46930: LD_INT 28
46932: PUSH
46933: LD_INT 26
46935: PUSH
46936: LD_INT 30
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 43
46947: PUSH
46948: LD_INT 44
46950: PUSH
46951: LD_INT 46
46953: PUSH
46954: LD_INT 45
46956: PUSH
46957: LD_INT 47
46959: PUSH
46960: LD_INT 49
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: LIST
46975: PUSH
46976: LD_VAR 0 12
46980: ARRAY
46981: ST_TO_ADDR
// list := list isect fac_list ;
46982: LD_ADDR_VAR 0 5
46986: PUSH
46987: LD_VAR 0 5
46991: PUSH
46992: LD_VAR 0 17
46996: ISECT
46997: ST_TO_ADDR
// if not list then
46998: LD_VAR 0 5
47002: NOT
47003: IFFALSE 47007
// exit ;
47005: GO 47811
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47007: LD_VAR 0 12
47011: PUSH
47012: LD_INT 3
47014: EQUAL
47015: PUSH
47016: LD_INT 49
47018: PUSH
47019: LD_VAR 0 5
47023: IN
47024: AND
47025: PUSH
47026: LD_INT 31
47028: PPUSH
47029: LD_VAR 0 16
47033: PPUSH
47034: CALL_OW 321
47038: PUSH
47039: LD_INT 2
47041: EQUAL
47042: AND
47043: IFFALSE 47103
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47045: LD_INT 22
47047: PUSH
47048: LD_VAR 0 16
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 35
47059: PUSH
47060: LD_INT 49
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 91
47069: PUSH
47070: LD_VAR 0 1
47074: PUSH
47075: LD_INT 10
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: LIST
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: LIST
47087: PPUSH
47088: CALL_OW 69
47092: NOT
47093: IFFALSE 47103
// weapon := ru_time_lapser ;
47095: LD_ADDR_VAR 0 18
47099: PUSH
47100: LD_INT 49
47102: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47103: LD_VAR 0 12
47107: PUSH
47108: LD_INT 1
47110: PUSH
47111: LD_INT 2
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: IN
47118: PUSH
47119: LD_INT 11
47121: PUSH
47122: LD_VAR 0 5
47126: IN
47127: PUSH
47128: LD_INT 30
47130: PUSH
47131: LD_VAR 0 5
47135: IN
47136: OR
47137: AND
47138: PUSH
47139: LD_INT 6
47141: PPUSH
47142: LD_VAR 0 16
47146: PPUSH
47147: CALL_OW 321
47151: PUSH
47152: LD_INT 2
47154: EQUAL
47155: AND
47156: IFFALSE 47321
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47158: LD_INT 22
47160: PUSH
47161: LD_VAR 0 16
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 2
47172: PUSH
47173: LD_INT 35
47175: PUSH
47176: LD_INT 11
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 35
47185: PUSH
47186: LD_INT 30
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 91
47200: PUSH
47201: LD_VAR 0 1
47205: PUSH
47206: LD_INT 18
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: LIST
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: LIST
47218: PPUSH
47219: CALL_OW 69
47223: NOT
47224: PUSH
47225: LD_INT 22
47227: PUSH
47228: LD_VAR 0 16
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 2
47239: PUSH
47240: LD_INT 30
47242: PUSH
47243: LD_INT 32
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 30
47252: PUSH
47253: LD_INT 33
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 91
47267: PUSH
47268: LD_VAR 0 1
47272: PUSH
47273: LD_INT 12
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: LIST
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: LIST
47285: PUSH
47286: EMPTY
47287: LIST
47288: PPUSH
47289: CALL_OW 69
47293: PUSH
47294: LD_INT 2
47296: GREATER
47297: AND
47298: IFFALSE 47321
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47300: LD_ADDR_VAR 0 18
47304: PUSH
47305: LD_INT 11
47307: PUSH
47308: LD_INT 30
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_VAR 0 12
47319: ARRAY
47320: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47321: LD_VAR 0 18
47325: NOT
47326: PUSH
47327: LD_INT 40
47329: PPUSH
47330: LD_VAR 0 16
47334: PPUSH
47335: CALL_OW 321
47339: PUSH
47340: LD_INT 2
47342: EQUAL
47343: AND
47344: PUSH
47345: LD_INT 7
47347: PUSH
47348: LD_VAR 0 5
47352: IN
47353: PUSH
47354: LD_INT 28
47356: PUSH
47357: LD_VAR 0 5
47361: IN
47362: OR
47363: PUSH
47364: LD_INT 45
47366: PUSH
47367: LD_VAR 0 5
47371: IN
47372: OR
47373: AND
47374: IFFALSE 47628
// begin hex := GetHexInfo ( x , y ) ;
47376: LD_ADDR_VAR 0 4
47380: PUSH
47381: LD_VAR 0 10
47385: PPUSH
47386: LD_VAR 0 11
47390: PPUSH
47391: CALL_OW 546
47395: ST_TO_ADDR
// if hex [ 1 ] then
47396: LD_VAR 0 4
47400: PUSH
47401: LD_INT 1
47403: ARRAY
47404: IFFALSE 47408
// exit ;
47406: GO 47811
// height := hex [ 2 ] ;
47408: LD_ADDR_VAR 0 15
47412: PUSH
47413: LD_VAR 0 4
47417: PUSH
47418: LD_INT 2
47420: ARRAY
47421: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47422: LD_ADDR_VAR 0 14
47426: PUSH
47427: LD_INT 0
47429: PUSH
47430: LD_INT 2
47432: PUSH
47433: LD_INT 3
47435: PUSH
47436: LD_INT 5
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: ST_TO_ADDR
// for i in tmp do
47445: LD_ADDR_VAR 0 8
47449: PUSH
47450: LD_VAR 0 14
47454: PUSH
47455: FOR_IN
47456: IFFALSE 47626
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47458: LD_ADDR_VAR 0 9
47462: PUSH
47463: LD_VAR 0 10
47467: PPUSH
47468: LD_VAR 0 8
47472: PPUSH
47473: LD_INT 5
47475: PPUSH
47476: CALL_OW 272
47480: PUSH
47481: LD_VAR 0 11
47485: PPUSH
47486: LD_VAR 0 8
47490: PPUSH
47491: LD_INT 5
47493: PPUSH
47494: CALL_OW 273
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47503: LD_VAR 0 9
47507: PUSH
47508: LD_INT 1
47510: ARRAY
47511: PPUSH
47512: LD_VAR 0 9
47516: PUSH
47517: LD_INT 2
47519: ARRAY
47520: PPUSH
47521: CALL_OW 488
47525: IFFALSE 47624
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47527: LD_ADDR_VAR 0 4
47531: PUSH
47532: LD_VAR 0 9
47536: PUSH
47537: LD_INT 1
47539: ARRAY
47540: PPUSH
47541: LD_VAR 0 9
47545: PUSH
47546: LD_INT 2
47548: ARRAY
47549: PPUSH
47550: CALL_OW 546
47554: ST_TO_ADDR
// if hex [ 1 ] then
47555: LD_VAR 0 4
47559: PUSH
47560: LD_INT 1
47562: ARRAY
47563: IFFALSE 47567
// continue ;
47565: GO 47455
// h := hex [ 2 ] ;
47567: LD_ADDR_VAR 0 13
47571: PUSH
47572: LD_VAR 0 4
47576: PUSH
47577: LD_INT 2
47579: ARRAY
47580: ST_TO_ADDR
// if h + 7 < height then
47581: LD_VAR 0 13
47585: PUSH
47586: LD_INT 7
47588: PLUS
47589: PUSH
47590: LD_VAR 0 15
47594: LESS
47595: IFFALSE 47624
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47597: LD_ADDR_VAR 0 18
47601: PUSH
47602: LD_INT 7
47604: PUSH
47605: LD_INT 28
47607: PUSH
47608: LD_INT 45
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: LIST
47615: PUSH
47616: LD_VAR 0 12
47620: ARRAY
47621: ST_TO_ADDR
// break ;
47622: GO 47626
// end ; end ; end ;
47624: GO 47455
47626: POP
47627: POP
// end ; if not weapon then
47628: LD_VAR 0 18
47632: NOT
47633: IFFALSE 47693
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47635: LD_ADDR_VAR 0 5
47639: PUSH
47640: LD_VAR 0 5
47644: PUSH
47645: LD_INT 11
47647: PUSH
47648: LD_INT 30
47650: PUSH
47651: LD_INT 49
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: LIST
47658: DIFF
47659: ST_TO_ADDR
// if not list then
47660: LD_VAR 0 5
47664: NOT
47665: IFFALSE 47669
// exit ;
47667: GO 47811
// weapon := list [ rand ( 1 , list ) ] ;
47669: LD_ADDR_VAR 0 18
47673: PUSH
47674: LD_VAR 0 5
47678: PUSH
47679: LD_INT 1
47681: PPUSH
47682: LD_VAR 0 5
47686: PPUSH
47687: CALL_OW 12
47691: ARRAY
47692: ST_TO_ADDR
// end ; if weapon then
47693: LD_VAR 0 18
47697: IFFALSE 47811
// begin tmp := CostOfWeapon ( weapon ) ;
47699: LD_ADDR_VAR 0 14
47703: PUSH
47704: LD_VAR 0 18
47708: PPUSH
47709: CALL_OW 451
47713: ST_TO_ADDR
// j := GetBase ( tower ) ;
47714: LD_ADDR_VAR 0 9
47718: PUSH
47719: LD_VAR 0 1
47723: PPUSH
47724: CALL_OW 274
47728: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47729: LD_VAR 0 9
47733: PPUSH
47734: LD_INT 1
47736: PPUSH
47737: CALL_OW 275
47741: PUSH
47742: LD_VAR 0 14
47746: PUSH
47747: LD_INT 1
47749: ARRAY
47750: GREATEREQUAL
47751: PUSH
47752: LD_VAR 0 9
47756: PPUSH
47757: LD_INT 2
47759: PPUSH
47760: CALL_OW 275
47764: PUSH
47765: LD_VAR 0 14
47769: PUSH
47770: LD_INT 2
47772: ARRAY
47773: GREATEREQUAL
47774: AND
47775: PUSH
47776: LD_VAR 0 9
47780: PPUSH
47781: LD_INT 3
47783: PPUSH
47784: CALL_OW 275
47788: PUSH
47789: LD_VAR 0 14
47793: PUSH
47794: LD_INT 3
47796: ARRAY
47797: GREATEREQUAL
47798: AND
47799: IFFALSE 47811
// result := weapon ;
47801: LD_ADDR_VAR 0 3
47805: PUSH
47806: LD_VAR 0 18
47810: ST_TO_ADDR
// end ; end ;
47811: LD_VAR 0 3
47815: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47816: LD_INT 0
47818: PPUSH
47819: PPUSH
// result := true ;
47820: LD_ADDR_VAR 0 3
47824: PUSH
47825: LD_INT 1
47827: ST_TO_ADDR
// if array1 = array2 then
47828: LD_VAR 0 1
47832: PUSH
47833: LD_VAR 0 2
47837: EQUAL
47838: IFFALSE 47898
// begin for i = 1 to array1 do
47840: LD_ADDR_VAR 0 4
47844: PUSH
47845: DOUBLE
47846: LD_INT 1
47848: DEC
47849: ST_TO_ADDR
47850: LD_VAR 0 1
47854: PUSH
47855: FOR_TO
47856: IFFALSE 47894
// if array1 [ i ] <> array2 [ i ] then
47858: LD_VAR 0 1
47862: PUSH
47863: LD_VAR 0 4
47867: ARRAY
47868: PUSH
47869: LD_VAR 0 2
47873: PUSH
47874: LD_VAR 0 4
47878: ARRAY
47879: NONEQUAL
47880: IFFALSE 47892
// begin result := false ;
47882: LD_ADDR_VAR 0 3
47886: PUSH
47887: LD_INT 0
47889: ST_TO_ADDR
// break ;
47890: GO 47894
// end ;
47892: GO 47855
47894: POP
47895: POP
// end else
47896: GO 47906
// result := false ;
47898: LD_ADDR_VAR 0 3
47902: PUSH
47903: LD_INT 0
47905: ST_TO_ADDR
// end ;
47906: LD_VAR 0 3
47910: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47911: LD_INT 0
47913: PPUSH
47914: PPUSH
// if not array1 or not array2 then
47915: LD_VAR 0 1
47919: NOT
47920: PUSH
47921: LD_VAR 0 2
47925: NOT
47926: OR
47927: IFFALSE 47931
// exit ;
47929: GO 47995
// result := true ;
47931: LD_ADDR_VAR 0 3
47935: PUSH
47936: LD_INT 1
47938: ST_TO_ADDR
// for i = 1 to array1 do
47939: LD_ADDR_VAR 0 4
47943: PUSH
47944: DOUBLE
47945: LD_INT 1
47947: DEC
47948: ST_TO_ADDR
47949: LD_VAR 0 1
47953: PUSH
47954: FOR_TO
47955: IFFALSE 47993
// if array1 [ i ] <> array2 [ i ] then
47957: LD_VAR 0 1
47961: PUSH
47962: LD_VAR 0 4
47966: ARRAY
47967: PUSH
47968: LD_VAR 0 2
47972: PUSH
47973: LD_VAR 0 4
47977: ARRAY
47978: NONEQUAL
47979: IFFALSE 47991
// begin result := false ;
47981: LD_ADDR_VAR 0 3
47985: PUSH
47986: LD_INT 0
47988: ST_TO_ADDR
// break ;
47989: GO 47993
// end ;
47991: GO 47954
47993: POP
47994: POP
// end ;
47995: LD_VAR 0 3
47999: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48000: LD_INT 0
48002: PPUSH
48003: PPUSH
48004: PPUSH
// pom := GetBase ( fac ) ;
48005: LD_ADDR_VAR 0 5
48009: PUSH
48010: LD_VAR 0 1
48014: PPUSH
48015: CALL_OW 274
48019: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48020: LD_ADDR_VAR 0 4
48024: PUSH
48025: LD_VAR 0 2
48029: PUSH
48030: LD_INT 1
48032: ARRAY
48033: PPUSH
48034: LD_VAR 0 2
48038: PUSH
48039: LD_INT 2
48041: ARRAY
48042: PPUSH
48043: LD_VAR 0 2
48047: PUSH
48048: LD_INT 3
48050: ARRAY
48051: PPUSH
48052: LD_VAR 0 2
48056: PUSH
48057: LD_INT 4
48059: ARRAY
48060: PPUSH
48061: CALL_OW 449
48065: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48066: LD_ADDR_VAR 0 3
48070: PUSH
48071: LD_VAR 0 5
48075: PPUSH
48076: LD_INT 1
48078: PPUSH
48079: CALL_OW 275
48083: PUSH
48084: LD_VAR 0 4
48088: PUSH
48089: LD_INT 1
48091: ARRAY
48092: GREATEREQUAL
48093: PUSH
48094: LD_VAR 0 5
48098: PPUSH
48099: LD_INT 2
48101: PPUSH
48102: CALL_OW 275
48106: PUSH
48107: LD_VAR 0 4
48111: PUSH
48112: LD_INT 2
48114: ARRAY
48115: GREATEREQUAL
48116: AND
48117: PUSH
48118: LD_VAR 0 5
48122: PPUSH
48123: LD_INT 3
48125: PPUSH
48126: CALL_OW 275
48130: PUSH
48131: LD_VAR 0 4
48135: PUSH
48136: LD_INT 3
48138: ARRAY
48139: GREATEREQUAL
48140: AND
48141: ST_TO_ADDR
// end ;
48142: LD_VAR 0 3
48146: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48147: LD_INT 0
48149: PPUSH
48150: PPUSH
48151: PPUSH
48152: PPUSH
// pom := GetBase ( building ) ;
48153: LD_ADDR_VAR 0 3
48157: PUSH
48158: LD_VAR 0 1
48162: PPUSH
48163: CALL_OW 274
48167: ST_TO_ADDR
// if not pom then
48168: LD_VAR 0 3
48172: NOT
48173: IFFALSE 48177
// exit ;
48175: GO 48347
// btype := GetBType ( building ) ;
48177: LD_ADDR_VAR 0 5
48181: PUSH
48182: LD_VAR 0 1
48186: PPUSH
48187: CALL_OW 266
48191: ST_TO_ADDR
// if btype = b_armoury then
48192: LD_VAR 0 5
48196: PUSH
48197: LD_INT 4
48199: EQUAL
48200: IFFALSE 48210
// btype := b_barracks ;
48202: LD_ADDR_VAR 0 5
48206: PUSH
48207: LD_INT 5
48209: ST_TO_ADDR
// if btype = b_depot then
48210: LD_VAR 0 5
48214: PUSH
48215: LD_INT 0
48217: EQUAL
48218: IFFALSE 48228
// btype := b_warehouse ;
48220: LD_ADDR_VAR 0 5
48224: PUSH
48225: LD_INT 1
48227: ST_TO_ADDR
// if btype = b_workshop then
48228: LD_VAR 0 5
48232: PUSH
48233: LD_INT 2
48235: EQUAL
48236: IFFALSE 48246
// btype := b_factory ;
48238: LD_ADDR_VAR 0 5
48242: PUSH
48243: LD_INT 3
48245: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48246: LD_ADDR_VAR 0 4
48250: PUSH
48251: LD_VAR 0 5
48255: PPUSH
48256: LD_VAR 0 1
48260: PPUSH
48261: CALL_OW 248
48265: PPUSH
48266: CALL_OW 450
48270: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48271: LD_ADDR_VAR 0 2
48275: PUSH
48276: LD_VAR 0 3
48280: PPUSH
48281: LD_INT 1
48283: PPUSH
48284: CALL_OW 275
48288: PUSH
48289: LD_VAR 0 4
48293: PUSH
48294: LD_INT 1
48296: ARRAY
48297: GREATEREQUAL
48298: PUSH
48299: LD_VAR 0 3
48303: PPUSH
48304: LD_INT 2
48306: PPUSH
48307: CALL_OW 275
48311: PUSH
48312: LD_VAR 0 4
48316: PUSH
48317: LD_INT 2
48319: ARRAY
48320: GREATEREQUAL
48321: AND
48322: PUSH
48323: LD_VAR 0 3
48327: PPUSH
48328: LD_INT 3
48330: PPUSH
48331: CALL_OW 275
48335: PUSH
48336: LD_VAR 0 4
48340: PUSH
48341: LD_INT 3
48343: ARRAY
48344: GREATEREQUAL
48345: AND
48346: ST_TO_ADDR
// end ;
48347: LD_VAR 0 2
48351: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48352: LD_INT 0
48354: PPUSH
48355: PPUSH
48356: PPUSH
// pom := GetBase ( building ) ;
48357: LD_ADDR_VAR 0 4
48361: PUSH
48362: LD_VAR 0 1
48366: PPUSH
48367: CALL_OW 274
48371: ST_TO_ADDR
// if not pom then
48372: LD_VAR 0 4
48376: NOT
48377: IFFALSE 48381
// exit ;
48379: GO 48482
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48381: LD_ADDR_VAR 0 5
48385: PUSH
48386: LD_VAR 0 2
48390: PPUSH
48391: LD_VAR 0 1
48395: PPUSH
48396: CALL_OW 248
48400: PPUSH
48401: CALL_OW 450
48405: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48406: LD_ADDR_VAR 0 3
48410: PUSH
48411: LD_VAR 0 4
48415: PPUSH
48416: LD_INT 1
48418: PPUSH
48419: CALL_OW 275
48423: PUSH
48424: LD_VAR 0 5
48428: PUSH
48429: LD_INT 1
48431: ARRAY
48432: GREATEREQUAL
48433: PUSH
48434: LD_VAR 0 4
48438: PPUSH
48439: LD_INT 2
48441: PPUSH
48442: CALL_OW 275
48446: PUSH
48447: LD_VAR 0 5
48451: PUSH
48452: LD_INT 2
48454: ARRAY
48455: GREATEREQUAL
48456: AND
48457: PUSH
48458: LD_VAR 0 4
48462: PPUSH
48463: LD_INT 3
48465: PPUSH
48466: CALL_OW 275
48470: PUSH
48471: LD_VAR 0 5
48475: PUSH
48476: LD_INT 3
48478: ARRAY
48479: GREATEREQUAL
48480: AND
48481: ST_TO_ADDR
// end ;
48482: LD_VAR 0 3
48486: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48487: LD_INT 0
48489: PPUSH
48490: PPUSH
48491: PPUSH
48492: PPUSH
48493: PPUSH
48494: PPUSH
48495: PPUSH
48496: PPUSH
48497: PPUSH
48498: PPUSH
48499: PPUSH
// result := false ;
48500: LD_ADDR_VAR 0 8
48504: PUSH
48505: LD_INT 0
48507: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48508: LD_VAR 0 5
48512: NOT
48513: PUSH
48514: LD_VAR 0 1
48518: NOT
48519: OR
48520: PUSH
48521: LD_VAR 0 2
48525: NOT
48526: OR
48527: PUSH
48528: LD_VAR 0 3
48532: NOT
48533: OR
48534: IFFALSE 48538
// exit ;
48536: GO 49352
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48538: LD_ADDR_VAR 0 14
48542: PUSH
48543: LD_VAR 0 1
48547: PPUSH
48548: LD_VAR 0 2
48552: PPUSH
48553: LD_VAR 0 3
48557: PPUSH
48558: LD_VAR 0 4
48562: PPUSH
48563: LD_VAR 0 5
48567: PUSH
48568: LD_INT 1
48570: ARRAY
48571: PPUSH
48572: CALL_OW 248
48576: PPUSH
48577: LD_INT 0
48579: PPUSH
48580: CALL 50605 0 6
48584: ST_TO_ADDR
// if not hexes then
48585: LD_VAR 0 14
48589: NOT
48590: IFFALSE 48594
// exit ;
48592: GO 49352
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48594: LD_ADDR_VAR 0 17
48598: PUSH
48599: LD_VAR 0 5
48603: PPUSH
48604: LD_INT 22
48606: PUSH
48607: LD_VAR 0 13
48611: PPUSH
48612: CALL_OW 255
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 2
48623: PUSH
48624: LD_INT 30
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 30
48636: PUSH
48637: LD_INT 1
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: LIST
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PPUSH
48653: CALL_OW 72
48657: ST_TO_ADDR
// for i = 1 to hexes do
48658: LD_ADDR_VAR 0 9
48662: PUSH
48663: DOUBLE
48664: LD_INT 1
48666: DEC
48667: ST_TO_ADDR
48668: LD_VAR 0 14
48672: PUSH
48673: FOR_TO
48674: IFFALSE 49350
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48676: LD_ADDR_VAR 0 13
48680: PUSH
48681: LD_VAR 0 14
48685: PUSH
48686: LD_VAR 0 9
48690: ARRAY
48691: PUSH
48692: LD_INT 1
48694: ARRAY
48695: PPUSH
48696: LD_VAR 0 14
48700: PUSH
48701: LD_VAR 0 9
48705: ARRAY
48706: PUSH
48707: LD_INT 2
48709: ARRAY
48710: PPUSH
48711: CALL_OW 428
48715: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48716: LD_VAR 0 14
48720: PUSH
48721: LD_VAR 0 9
48725: ARRAY
48726: PUSH
48727: LD_INT 1
48729: ARRAY
48730: PPUSH
48731: LD_VAR 0 14
48735: PUSH
48736: LD_VAR 0 9
48740: ARRAY
48741: PUSH
48742: LD_INT 2
48744: ARRAY
48745: PPUSH
48746: CALL_OW 351
48750: PUSH
48751: LD_VAR 0 14
48755: PUSH
48756: LD_VAR 0 9
48760: ARRAY
48761: PUSH
48762: LD_INT 1
48764: ARRAY
48765: PPUSH
48766: LD_VAR 0 14
48770: PUSH
48771: LD_VAR 0 9
48775: ARRAY
48776: PUSH
48777: LD_INT 2
48779: ARRAY
48780: PPUSH
48781: CALL_OW 488
48785: NOT
48786: OR
48787: PUSH
48788: LD_VAR 0 13
48792: PPUSH
48793: CALL_OW 247
48797: PUSH
48798: LD_INT 3
48800: EQUAL
48801: OR
48802: IFFALSE 48808
// exit ;
48804: POP
48805: POP
48806: GO 49352
// if not tmp then
48808: LD_VAR 0 13
48812: NOT
48813: IFFALSE 48817
// continue ;
48815: GO 48673
// result := true ;
48817: LD_ADDR_VAR 0 8
48821: PUSH
48822: LD_INT 1
48824: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48825: LD_VAR 0 6
48829: PUSH
48830: LD_VAR 0 13
48834: PPUSH
48835: CALL_OW 247
48839: PUSH
48840: LD_INT 2
48842: EQUAL
48843: AND
48844: PUSH
48845: LD_VAR 0 13
48849: PPUSH
48850: CALL_OW 263
48854: PUSH
48855: LD_INT 1
48857: EQUAL
48858: AND
48859: IFFALSE 49023
// begin if IsDrivenBy ( tmp ) then
48861: LD_VAR 0 13
48865: PPUSH
48866: CALL_OW 311
48870: IFFALSE 48874
// continue ;
48872: GO 48673
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48874: LD_VAR 0 6
48878: PPUSH
48879: LD_INT 3
48881: PUSH
48882: LD_INT 60
48884: PUSH
48885: EMPTY
48886: LIST
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 3
48894: PUSH
48895: LD_INT 55
48897: PUSH
48898: EMPTY
48899: LIST
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PPUSH
48909: CALL_OW 72
48913: IFFALSE 49021
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48915: LD_ADDR_VAR 0 18
48919: PUSH
48920: LD_VAR 0 6
48924: PPUSH
48925: LD_INT 3
48927: PUSH
48928: LD_INT 60
48930: PUSH
48931: EMPTY
48932: LIST
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 3
48940: PUSH
48941: LD_INT 55
48943: PUSH
48944: EMPTY
48945: LIST
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PPUSH
48955: CALL_OW 72
48959: PUSH
48960: LD_INT 1
48962: ARRAY
48963: ST_TO_ADDR
// if IsInUnit ( driver ) then
48964: LD_VAR 0 18
48968: PPUSH
48969: CALL_OW 310
48973: IFFALSE 48984
// ComExit ( driver ) ;
48975: LD_VAR 0 18
48979: PPUSH
48980: CALL 74406 0 1
// AddComEnterUnit ( driver , tmp ) ;
48984: LD_VAR 0 18
48988: PPUSH
48989: LD_VAR 0 13
48993: PPUSH
48994: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48998: LD_VAR 0 18
49002: PPUSH
49003: LD_VAR 0 7
49007: PPUSH
49008: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49012: LD_VAR 0 18
49016: PPUSH
49017: CALL_OW 181
// end ; continue ;
49021: GO 48673
// end ; if not cleaners or not tmp in cleaners then
49023: LD_VAR 0 6
49027: NOT
49028: PUSH
49029: LD_VAR 0 13
49033: PUSH
49034: LD_VAR 0 6
49038: IN
49039: NOT
49040: OR
49041: IFFALSE 49348
// begin if dep then
49043: LD_VAR 0 17
49047: IFFALSE 49183
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49049: LD_ADDR_VAR 0 16
49053: PUSH
49054: LD_VAR 0 17
49058: PUSH
49059: LD_INT 1
49061: ARRAY
49062: PPUSH
49063: CALL_OW 250
49067: PPUSH
49068: LD_VAR 0 17
49072: PUSH
49073: LD_INT 1
49075: ARRAY
49076: PPUSH
49077: CALL_OW 254
49081: PPUSH
49082: LD_INT 5
49084: PPUSH
49085: CALL_OW 272
49089: PUSH
49090: LD_VAR 0 17
49094: PUSH
49095: LD_INT 1
49097: ARRAY
49098: PPUSH
49099: CALL_OW 251
49103: PPUSH
49104: LD_VAR 0 17
49108: PUSH
49109: LD_INT 1
49111: ARRAY
49112: PPUSH
49113: CALL_OW 254
49117: PPUSH
49118: LD_INT 5
49120: PPUSH
49121: CALL_OW 273
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49130: LD_VAR 0 16
49134: PUSH
49135: LD_INT 1
49137: ARRAY
49138: PPUSH
49139: LD_VAR 0 16
49143: PUSH
49144: LD_INT 2
49146: ARRAY
49147: PPUSH
49148: CALL_OW 488
49152: IFFALSE 49183
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49154: LD_VAR 0 13
49158: PPUSH
49159: LD_VAR 0 16
49163: PUSH
49164: LD_INT 1
49166: ARRAY
49167: PPUSH
49168: LD_VAR 0 16
49172: PUSH
49173: LD_INT 2
49175: ARRAY
49176: PPUSH
49177: CALL_OW 111
// continue ;
49181: GO 48673
// end ; end ; r := GetDir ( tmp ) ;
49183: LD_ADDR_VAR 0 15
49187: PUSH
49188: LD_VAR 0 13
49192: PPUSH
49193: CALL_OW 254
49197: ST_TO_ADDR
// if r = 5 then
49198: LD_VAR 0 15
49202: PUSH
49203: LD_INT 5
49205: EQUAL
49206: IFFALSE 49216
// r := 0 ;
49208: LD_ADDR_VAR 0 15
49212: PUSH
49213: LD_INT 0
49215: ST_TO_ADDR
// for j = r to 5 do
49216: LD_ADDR_VAR 0 10
49220: PUSH
49221: DOUBLE
49222: LD_VAR 0 15
49226: DEC
49227: ST_TO_ADDR
49228: LD_INT 5
49230: PUSH
49231: FOR_TO
49232: IFFALSE 49346
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49234: LD_ADDR_VAR 0 11
49238: PUSH
49239: LD_VAR 0 13
49243: PPUSH
49244: CALL_OW 250
49248: PPUSH
49249: LD_VAR 0 10
49253: PPUSH
49254: LD_INT 2
49256: PPUSH
49257: CALL_OW 272
49261: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49262: LD_ADDR_VAR 0 12
49266: PUSH
49267: LD_VAR 0 13
49271: PPUSH
49272: CALL_OW 251
49276: PPUSH
49277: LD_VAR 0 10
49281: PPUSH
49282: LD_INT 2
49284: PPUSH
49285: CALL_OW 273
49289: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49290: LD_VAR 0 11
49294: PPUSH
49295: LD_VAR 0 12
49299: PPUSH
49300: CALL_OW 488
49304: PUSH
49305: LD_VAR 0 11
49309: PPUSH
49310: LD_VAR 0 12
49314: PPUSH
49315: CALL_OW 428
49319: NOT
49320: AND
49321: IFFALSE 49344
// begin ComMoveXY ( tmp , _x , _y ) ;
49323: LD_VAR 0 13
49327: PPUSH
49328: LD_VAR 0 11
49332: PPUSH
49333: LD_VAR 0 12
49337: PPUSH
49338: CALL_OW 111
// break ;
49342: GO 49346
// end ; end ;
49344: GO 49231
49346: POP
49347: POP
// end ; end ;
49348: GO 48673
49350: POP
49351: POP
// end ;
49352: LD_VAR 0 8
49356: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49357: LD_INT 0
49359: PPUSH
// result := true ;
49360: LD_ADDR_VAR 0 3
49364: PUSH
49365: LD_INT 1
49367: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49368: LD_VAR 0 2
49372: PUSH
49373: LD_INT 24
49375: DOUBLE
49376: EQUAL
49377: IFTRUE 49387
49379: LD_INT 33
49381: DOUBLE
49382: EQUAL
49383: IFTRUE 49387
49385: GO 49412
49387: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49388: LD_ADDR_VAR 0 3
49392: PUSH
49393: LD_INT 32
49395: PPUSH
49396: LD_VAR 0 1
49400: PPUSH
49401: CALL_OW 321
49405: PUSH
49406: LD_INT 2
49408: EQUAL
49409: ST_TO_ADDR
49410: GO 49728
49412: LD_INT 20
49414: DOUBLE
49415: EQUAL
49416: IFTRUE 49420
49418: GO 49445
49420: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49421: LD_ADDR_VAR 0 3
49425: PUSH
49426: LD_INT 6
49428: PPUSH
49429: LD_VAR 0 1
49433: PPUSH
49434: CALL_OW 321
49438: PUSH
49439: LD_INT 2
49441: EQUAL
49442: ST_TO_ADDR
49443: GO 49728
49445: LD_INT 22
49447: DOUBLE
49448: EQUAL
49449: IFTRUE 49459
49451: LD_INT 36
49453: DOUBLE
49454: EQUAL
49455: IFTRUE 49459
49457: GO 49484
49459: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49460: LD_ADDR_VAR 0 3
49464: PUSH
49465: LD_INT 15
49467: PPUSH
49468: LD_VAR 0 1
49472: PPUSH
49473: CALL_OW 321
49477: PUSH
49478: LD_INT 2
49480: EQUAL
49481: ST_TO_ADDR
49482: GO 49728
49484: LD_INT 30
49486: DOUBLE
49487: EQUAL
49488: IFTRUE 49492
49490: GO 49517
49492: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49493: LD_ADDR_VAR 0 3
49497: PUSH
49498: LD_INT 20
49500: PPUSH
49501: LD_VAR 0 1
49505: PPUSH
49506: CALL_OW 321
49510: PUSH
49511: LD_INT 2
49513: EQUAL
49514: ST_TO_ADDR
49515: GO 49728
49517: LD_INT 28
49519: DOUBLE
49520: EQUAL
49521: IFTRUE 49531
49523: LD_INT 21
49525: DOUBLE
49526: EQUAL
49527: IFTRUE 49531
49529: GO 49556
49531: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49532: LD_ADDR_VAR 0 3
49536: PUSH
49537: LD_INT 21
49539: PPUSH
49540: LD_VAR 0 1
49544: PPUSH
49545: CALL_OW 321
49549: PUSH
49550: LD_INT 2
49552: EQUAL
49553: ST_TO_ADDR
49554: GO 49728
49556: LD_INT 16
49558: DOUBLE
49559: EQUAL
49560: IFTRUE 49564
49562: GO 49589
49564: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49565: LD_ADDR_VAR 0 3
49569: PUSH
49570: LD_INT 84
49572: PPUSH
49573: LD_VAR 0 1
49577: PPUSH
49578: CALL_OW 321
49582: PUSH
49583: LD_INT 2
49585: EQUAL
49586: ST_TO_ADDR
49587: GO 49728
49589: LD_INT 19
49591: DOUBLE
49592: EQUAL
49593: IFTRUE 49603
49595: LD_INT 23
49597: DOUBLE
49598: EQUAL
49599: IFTRUE 49603
49601: GO 49628
49603: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49604: LD_ADDR_VAR 0 3
49608: PUSH
49609: LD_INT 83
49611: PPUSH
49612: LD_VAR 0 1
49616: PPUSH
49617: CALL_OW 321
49621: PUSH
49622: LD_INT 2
49624: EQUAL
49625: ST_TO_ADDR
49626: GO 49728
49628: LD_INT 17
49630: DOUBLE
49631: EQUAL
49632: IFTRUE 49636
49634: GO 49661
49636: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49637: LD_ADDR_VAR 0 3
49641: PUSH
49642: LD_INT 39
49644: PPUSH
49645: LD_VAR 0 1
49649: PPUSH
49650: CALL_OW 321
49654: PUSH
49655: LD_INT 2
49657: EQUAL
49658: ST_TO_ADDR
49659: GO 49728
49661: LD_INT 18
49663: DOUBLE
49664: EQUAL
49665: IFTRUE 49669
49667: GO 49694
49669: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49670: LD_ADDR_VAR 0 3
49674: PUSH
49675: LD_INT 40
49677: PPUSH
49678: LD_VAR 0 1
49682: PPUSH
49683: CALL_OW 321
49687: PUSH
49688: LD_INT 2
49690: EQUAL
49691: ST_TO_ADDR
49692: GO 49728
49694: LD_INT 27
49696: DOUBLE
49697: EQUAL
49698: IFTRUE 49702
49700: GO 49727
49702: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49703: LD_ADDR_VAR 0 3
49707: PUSH
49708: LD_INT 35
49710: PPUSH
49711: LD_VAR 0 1
49715: PPUSH
49716: CALL_OW 321
49720: PUSH
49721: LD_INT 2
49723: EQUAL
49724: ST_TO_ADDR
49725: GO 49728
49727: POP
// end ;
49728: LD_VAR 0 3
49732: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49733: LD_INT 0
49735: PPUSH
49736: PPUSH
49737: PPUSH
49738: PPUSH
49739: PPUSH
49740: PPUSH
49741: PPUSH
49742: PPUSH
49743: PPUSH
49744: PPUSH
49745: PPUSH
// result := false ;
49746: LD_ADDR_VAR 0 6
49750: PUSH
49751: LD_INT 0
49753: ST_TO_ADDR
// if btype = b_depot then
49754: LD_VAR 0 2
49758: PUSH
49759: LD_INT 0
49761: EQUAL
49762: IFFALSE 49774
// begin result := true ;
49764: LD_ADDR_VAR 0 6
49768: PUSH
49769: LD_INT 1
49771: ST_TO_ADDR
// exit ;
49772: GO 50600
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49774: LD_VAR 0 1
49778: NOT
49779: PUSH
49780: LD_VAR 0 1
49784: PPUSH
49785: CALL_OW 266
49789: PUSH
49790: LD_INT 0
49792: PUSH
49793: LD_INT 1
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: IN
49800: NOT
49801: OR
49802: PUSH
49803: LD_VAR 0 2
49807: NOT
49808: OR
49809: PUSH
49810: LD_VAR 0 5
49814: PUSH
49815: LD_INT 0
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: LD_INT 2
49823: PUSH
49824: LD_INT 3
49826: PUSH
49827: LD_INT 4
49829: PUSH
49830: LD_INT 5
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: IN
49841: NOT
49842: OR
49843: PUSH
49844: LD_VAR 0 3
49848: PPUSH
49849: LD_VAR 0 4
49853: PPUSH
49854: CALL_OW 488
49858: NOT
49859: OR
49860: IFFALSE 49864
// exit ;
49862: GO 50600
// side := GetSide ( depot ) ;
49864: LD_ADDR_VAR 0 9
49868: PUSH
49869: LD_VAR 0 1
49873: PPUSH
49874: CALL_OW 255
49878: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49879: LD_VAR 0 9
49883: PPUSH
49884: LD_VAR 0 2
49888: PPUSH
49889: CALL 49357 0 2
49893: NOT
49894: IFFALSE 49898
// exit ;
49896: GO 50600
// pom := GetBase ( depot ) ;
49898: LD_ADDR_VAR 0 10
49902: PUSH
49903: LD_VAR 0 1
49907: PPUSH
49908: CALL_OW 274
49912: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49913: LD_ADDR_VAR 0 11
49917: PUSH
49918: LD_VAR 0 2
49922: PPUSH
49923: LD_VAR 0 1
49927: PPUSH
49928: CALL_OW 248
49932: PPUSH
49933: CALL_OW 450
49937: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49938: LD_VAR 0 10
49942: PPUSH
49943: LD_INT 1
49945: PPUSH
49946: CALL_OW 275
49950: PUSH
49951: LD_VAR 0 11
49955: PUSH
49956: LD_INT 1
49958: ARRAY
49959: GREATEREQUAL
49960: PUSH
49961: LD_VAR 0 10
49965: PPUSH
49966: LD_INT 2
49968: PPUSH
49969: CALL_OW 275
49973: PUSH
49974: LD_VAR 0 11
49978: PUSH
49979: LD_INT 2
49981: ARRAY
49982: GREATEREQUAL
49983: AND
49984: PUSH
49985: LD_VAR 0 10
49989: PPUSH
49990: LD_INT 3
49992: PPUSH
49993: CALL_OW 275
49997: PUSH
49998: LD_VAR 0 11
50002: PUSH
50003: LD_INT 3
50005: ARRAY
50006: GREATEREQUAL
50007: AND
50008: NOT
50009: IFFALSE 50013
// exit ;
50011: GO 50600
// if GetBType ( depot ) = b_depot then
50013: LD_VAR 0 1
50017: PPUSH
50018: CALL_OW 266
50022: PUSH
50023: LD_INT 0
50025: EQUAL
50026: IFFALSE 50038
// dist := 28 else
50028: LD_ADDR_VAR 0 14
50032: PUSH
50033: LD_INT 28
50035: ST_TO_ADDR
50036: GO 50046
// dist := 36 ;
50038: LD_ADDR_VAR 0 14
50042: PUSH
50043: LD_INT 36
50045: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50046: LD_VAR 0 1
50050: PPUSH
50051: LD_VAR 0 3
50055: PPUSH
50056: LD_VAR 0 4
50060: PPUSH
50061: CALL_OW 297
50065: PUSH
50066: LD_VAR 0 14
50070: GREATER
50071: IFFALSE 50075
// exit ;
50073: GO 50600
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50075: LD_ADDR_VAR 0 12
50079: PUSH
50080: LD_VAR 0 2
50084: PPUSH
50085: LD_VAR 0 3
50089: PPUSH
50090: LD_VAR 0 4
50094: PPUSH
50095: LD_VAR 0 5
50099: PPUSH
50100: LD_VAR 0 1
50104: PPUSH
50105: CALL_OW 248
50109: PPUSH
50110: LD_INT 0
50112: PPUSH
50113: CALL 50605 0 6
50117: ST_TO_ADDR
// if not hexes then
50118: LD_VAR 0 12
50122: NOT
50123: IFFALSE 50127
// exit ;
50125: GO 50600
// hex := GetHexInfo ( x , y ) ;
50127: LD_ADDR_VAR 0 15
50131: PUSH
50132: LD_VAR 0 3
50136: PPUSH
50137: LD_VAR 0 4
50141: PPUSH
50142: CALL_OW 546
50146: ST_TO_ADDR
// if hex [ 1 ] then
50147: LD_VAR 0 15
50151: PUSH
50152: LD_INT 1
50154: ARRAY
50155: IFFALSE 50159
// exit ;
50157: GO 50600
// height := hex [ 2 ] ;
50159: LD_ADDR_VAR 0 13
50163: PUSH
50164: LD_VAR 0 15
50168: PUSH
50169: LD_INT 2
50171: ARRAY
50172: ST_TO_ADDR
// for i = 1 to hexes do
50173: LD_ADDR_VAR 0 7
50177: PUSH
50178: DOUBLE
50179: LD_INT 1
50181: DEC
50182: ST_TO_ADDR
50183: LD_VAR 0 12
50187: PUSH
50188: FOR_TO
50189: IFFALSE 50519
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50191: LD_VAR 0 12
50195: PUSH
50196: LD_VAR 0 7
50200: ARRAY
50201: PUSH
50202: LD_INT 1
50204: ARRAY
50205: PPUSH
50206: LD_VAR 0 12
50210: PUSH
50211: LD_VAR 0 7
50215: ARRAY
50216: PUSH
50217: LD_INT 2
50219: ARRAY
50220: PPUSH
50221: CALL_OW 488
50225: NOT
50226: PUSH
50227: LD_VAR 0 12
50231: PUSH
50232: LD_VAR 0 7
50236: ARRAY
50237: PUSH
50238: LD_INT 1
50240: ARRAY
50241: PPUSH
50242: LD_VAR 0 12
50246: PUSH
50247: LD_VAR 0 7
50251: ARRAY
50252: PUSH
50253: LD_INT 2
50255: ARRAY
50256: PPUSH
50257: CALL_OW 428
50261: PUSH
50262: LD_INT 0
50264: GREATER
50265: OR
50266: PUSH
50267: LD_VAR 0 12
50271: PUSH
50272: LD_VAR 0 7
50276: ARRAY
50277: PUSH
50278: LD_INT 1
50280: ARRAY
50281: PPUSH
50282: LD_VAR 0 12
50286: PUSH
50287: LD_VAR 0 7
50291: ARRAY
50292: PUSH
50293: LD_INT 2
50295: ARRAY
50296: PPUSH
50297: CALL_OW 351
50301: OR
50302: IFFALSE 50308
// exit ;
50304: POP
50305: POP
50306: GO 50600
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50308: LD_ADDR_VAR 0 8
50312: PUSH
50313: LD_VAR 0 12
50317: PUSH
50318: LD_VAR 0 7
50322: ARRAY
50323: PUSH
50324: LD_INT 1
50326: ARRAY
50327: PPUSH
50328: LD_VAR 0 12
50332: PUSH
50333: LD_VAR 0 7
50337: ARRAY
50338: PUSH
50339: LD_INT 2
50341: ARRAY
50342: PPUSH
50343: CALL_OW 546
50347: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50348: LD_VAR 0 8
50352: PUSH
50353: LD_INT 1
50355: ARRAY
50356: PUSH
50357: LD_VAR 0 8
50361: PUSH
50362: LD_INT 2
50364: ARRAY
50365: PUSH
50366: LD_VAR 0 13
50370: PUSH
50371: LD_INT 2
50373: PLUS
50374: GREATER
50375: OR
50376: PUSH
50377: LD_VAR 0 8
50381: PUSH
50382: LD_INT 2
50384: ARRAY
50385: PUSH
50386: LD_VAR 0 13
50390: PUSH
50391: LD_INT 2
50393: MINUS
50394: LESS
50395: OR
50396: PUSH
50397: LD_VAR 0 8
50401: PUSH
50402: LD_INT 3
50404: ARRAY
50405: PUSH
50406: LD_INT 0
50408: PUSH
50409: LD_INT 8
50411: PUSH
50412: LD_INT 9
50414: PUSH
50415: LD_INT 10
50417: PUSH
50418: LD_INT 11
50420: PUSH
50421: LD_INT 12
50423: PUSH
50424: LD_INT 13
50426: PUSH
50427: LD_INT 16
50429: PUSH
50430: LD_INT 17
50432: PUSH
50433: LD_INT 18
50435: PUSH
50436: LD_INT 19
50438: PUSH
50439: LD_INT 20
50441: PUSH
50442: LD_INT 21
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: IN
50460: NOT
50461: OR
50462: PUSH
50463: LD_VAR 0 8
50467: PUSH
50468: LD_INT 5
50470: ARRAY
50471: NOT
50472: OR
50473: PUSH
50474: LD_VAR 0 8
50478: PUSH
50479: LD_INT 6
50481: ARRAY
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: LD_INT 2
50488: PUSH
50489: LD_INT 7
50491: PUSH
50492: LD_INT 9
50494: PUSH
50495: LD_INT 10
50497: PUSH
50498: LD_INT 11
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: IN
50509: NOT
50510: OR
50511: IFFALSE 50517
// exit ;
50513: POP
50514: POP
50515: GO 50600
// end ;
50517: GO 50188
50519: POP
50520: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50521: LD_VAR 0 9
50525: PPUSH
50526: LD_VAR 0 3
50530: PPUSH
50531: LD_VAR 0 4
50535: PPUSH
50536: LD_INT 20
50538: PPUSH
50539: CALL 42523 0 4
50543: PUSH
50544: LD_INT 4
50546: ARRAY
50547: IFFALSE 50551
// exit ;
50549: GO 50600
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50551: LD_VAR 0 2
50555: PUSH
50556: LD_INT 29
50558: PUSH
50559: LD_INT 30
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: IN
50566: PUSH
50567: LD_VAR 0 3
50571: PPUSH
50572: LD_VAR 0 4
50576: PPUSH
50577: LD_VAR 0 9
50581: PPUSH
50582: CALL_OW 440
50586: NOT
50587: AND
50588: IFFALSE 50592
// exit ;
50590: GO 50600
// result := true ;
50592: LD_ADDR_VAR 0 6
50596: PUSH
50597: LD_INT 1
50599: ST_TO_ADDR
// end ;
50600: LD_VAR 0 6
50604: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50605: LD_INT 0
50607: PPUSH
50608: PPUSH
50609: PPUSH
50610: PPUSH
50611: PPUSH
50612: PPUSH
50613: PPUSH
50614: PPUSH
50615: PPUSH
50616: PPUSH
50617: PPUSH
50618: PPUSH
50619: PPUSH
50620: PPUSH
50621: PPUSH
50622: PPUSH
50623: PPUSH
50624: PPUSH
50625: PPUSH
50626: PPUSH
50627: PPUSH
50628: PPUSH
50629: PPUSH
50630: PPUSH
50631: PPUSH
50632: PPUSH
50633: PPUSH
50634: PPUSH
50635: PPUSH
50636: PPUSH
50637: PPUSH
50638: PPUSH
50639: PPUSH
50640: PPUSH
50641: PPUSH
50642: PPUSH
50643: PPUSH
50644: PPUSH
50645: PPUSH
50646: PPUSH
50647: PPUSH
50648: PPUSH
50649: PPUSH
50650: PPUSH
50651: PPUSH
50652: PPUSH
50653: PPUSH
50654: PPUSH
50655: PPUSH
50656: PPUSH
50657: PPUSH
50658: PPUSH
50659: PPUSH
50660: PPUSH
50661: PPUSH
50662: PPUSH
50663: PPUSH
50664: PPUSH
// result = [ ] ;
50665: LD_ADDR_VAR 0 7
50669: PUSH
50670: EMPTY
50671: ST_TO_ADDR
// temp_list = [ ] ;
50672: LD_ADDR_VAR 0 9
50676: PUSH
50677: EMPTY
50678: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50679: LD_VAR 0 4
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: LD_INT 1
50689: PUSH
50690: LD_INT 2
50692: PUSH
50693: LD_INT 3
50695: PUSH
50696: LD_INT 4
50698: PUSH
50699: LD_INT 5
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: IN
50710: NOT
50711: PUSH
50712: LD_VAR 0 1
50716: PUSH
50717: LD_INT 0
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: IN
50727: PUSH
50728: LD_VAR 0 5
50732: PUSH
50733: LD_INT 1
50735: PUSH
50736: LD_INT 2
50738: PUSH
50739: LD_INT 3
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: LIST
50746: IN
50747: NOT
50748: AND
50749: OR
50750: IFFALSE 50754
// exit ;
50752: GO 69145
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50754: LD_VAR 0 1
50758: PUSH
50759: LD_INT 6
50761: PUSH
50762: LD_INT 7
50764: PUSH
50765: LD_INT 8
50767: PUSH
50768: LD_INT 13
50770: PUSH
50771: LD_INT 12
50773: PUSH
50774: LD_INT 15
50776: PUSH
50777: LD_INT 11
50779: PUSH
50780: LD_INT 14
50782: PUSH
50783: LD_INT 10
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: IN
50797: IFFALSE 50807
// btype = b_lab ;
50799: LD_ADDR_VAR 0 1
50803: PUSH
50804: LD_INT 6
50806: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50807: LD_VAR 0 6
50811: PUSH
50812: LD_INT 0
50814: PUSH
50815: LD_INT 1
50817: PUSH
50818: LD_INT 2
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: LIST
50825: IN
50826: NOT
50827: PUSH
50828: LD_VAR 0 1
50832: PUSH
50833: LD_INT 0
50835: PUSH
50836: LD_INT 1
50838: PUSH
50839: LD_INT 2
50841: PUSH
50842: LD_INT 3
50844: PUSH
50845: LD_INT 6
50847: PUSH
50848: LD_INT 36
50850: PUSH
50851: LD_INT 4
50853: PUSH
50854: LD_INT 5
50856: PUSH
50857: LD_INT 31
50859: PUSH
50860: LD_INT 32
50862: PUSH
50863: LD_INT 33
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: IN
50879: NOT
50880: PUSH
50881: LD_VAR 0 6
50885: PUSH
50886: LD_INT 1
50888: EQUAL
50889: AND
50890: OR
50891: PUSH
50892: LD_VAR 0 1
50896: PUSH
50897: LD_INT 2
50899: PUSH
50900: LD_INT 3
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: IN
50907: NOT
50908: PUSH
50909: LD_VAR 0 6
50913: PUSH
50914: LD_INT 2
50916: EQUAL
50917: AND
50918: OR
50919: IFFALSE 50929
// mode = 0 ;
50921: LD_ADDR_VAR 0 6
50925: PUSH
50926: LD_INT 0
50928: ST_TO_ADDR
// case mode of 0 :
50929: LD_VAR 0 6
50933: PUSH
50934: LD_INT 0
50936: DOUBLE
50937: EQUAL
50938: IFTRUE 50942
50940: GO 62395
50942: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50943: LD_ADDR_VAR 0 11
50947: PUSH
50948: LD_INT 0
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 0
50960: PUSH
50961: LD_INT 1
50963: NEG
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 1
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 1
50981: PUSH
50982: LD_INT 1
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 0
50991: PUSH
50992: LD_INT 1
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 1
51001: NEG
51002: PUSH
51003: LD_INT 0
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: LD_INT 1
51016: NEG
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 1
51024: NEG
51025: PUSH
51026: LD_INT 2
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 0
51036: PUSH
51037: LD_INT 2
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: LD_INT 2
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 0
51068: PUSH
51069: LD_INT 2
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: NEG
51079: PUSH
51080: LD_INT 1
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 1
51089: PUSH
51090: LD_INT 3
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 0
51099: PUSH
51100: LD_INT 3
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 1
51109: NEG
51110: PUSH
51111: LD_INT 2
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51136: LD_ADDR_VAR 0 12
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 1
51174: PUSH
51175: LD_INT 1
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: LD_INT 1
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 1
51194: NEG
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: NEG
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 1
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 2
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 2
51238: PUSH
51239: LD_INT 1
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 2
51259: NEG
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 2
51270: NEG
51271: PUSH
51272: LD_INT 1
51274: NEG
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 2
51282: NEG
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 3
51293: NEG
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 3
51304: NEG
51305: PUSH
51306: LD_INT 1
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51332: LD_ADDR_VAR 0 13
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: LD_INT 0
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: LD_INT 1
51352: NEG
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 1
51360: PUSH
51361: LD_INT 0
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 1
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 0
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 1
51390: NEG
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: LD_INT 1
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 1
51413: NEG
51414: PUSH
51415: LD_INT 2
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 2
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 2
51435: PUSH
51436: LD_INT 2
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: LD_INT 2
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 2
51455: NEG
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 2
51467: NEG
51468: PUSH
51469: LD_INT 2
51471: NEG
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 2
51479: NEG
51480: PUSH
51481: LD_INT 3
51483: NEG
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 3
51491: NEG
51492: PUSH
51493: LD_INT 2
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 3
51503: NEG
51504: PUSH
51505: LD_INT 3
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51531: LD_ADDR_VAR 0 14
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: LD_INT 0
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: LD_INT 1
51551: NEG
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 1
51559: PUSH
51560: LD_INT 0
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 1
51569: PUSH
51570: LD_INT 1
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: LD_INT 1
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: LD_INT 0
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 1
51600: NEG
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 1
51612: NEG
51613: PUSH
51614: LD_INT 2
51616: NEG
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: LD_INT 2
51627: NEG
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 1
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 1
51646: PUSH
51647: LD_INT 2
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: LD_INT 2
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 1
51666: NEG
51667: PUSH
51668: LD_INT 1
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: LD_INT 3
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: LD_INT 3
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: LD_INT 2
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51727: LD_ADDR_VAR 0 15
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: LD_INT 0
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 0
51744: PUSH
51745: LD_INT 1
51747: NEG
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: LD_INT 0
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 1
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: LD_INT 1
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 1
51785: NEG
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 1
51796: NEG
51797: PUSH
51798: LD_INT 1
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: LD_INT 1
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 2
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 2
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 1
51839: NEG
51840: PUSH
51841: LD_INT 1
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 2
51850: NEG
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 2
51861: NEG
51862: PUSH
51863: LD_INT 1
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 2
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 3
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 3
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51920: LD_ADDR_VAR 0 16
51924: PUSH
51925: LD_INT 0
51927: PUSH
51928: LD_INT 0
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 0
51937: PUSH
51938: LD_INT 1
51940: NEG
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: LD_INT 1
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 1
51978: NEG
51979: PUSH
51980: LD_INT 0
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 1
51989: NEG
51990: PUSH
51991: LD_INT 1
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 1
52001: NEG
52002: PUSH
52003: LD_INT 2
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 2
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 2
52023: PUSH
52024: LD_INT 2
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 1
52033: PUSH
52034: LD_INT 2
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 2
52043: NEG
52044: PUSH
52045: LD_INT 1
52047: NEG
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 2
52055: NEG
52056: PUSH
52057: LD_INT 2
52059: NEG
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 3
52067: PUSH
52068: LD_INT 2
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 3
52077: PUSH
52078: LD_INT 3
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 2
52087: PUSH
52088: LD_INT 3
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52113: LD_ADDR_VAR 0 17
52117: PUSH
52118: LD_INT 0
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 0
52130: PUSH
52131: LD_INT 1
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 1
52141: PUSH
52142: LD_INT 0
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 1
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: LD_INT 1
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: NEG
52172: PUSH
52173: LD_INT 0
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: LD_INT 1
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 1
52194: NEG
52195: PUSH
52196: LD_INT 2
52198: NEG
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: LD_INT 2
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 2
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 2
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 2
52248: PUSH
52249: LD_INT 2
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 1
52258: PUSH
52259: LD_INT 2
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 0
52268: PUSH
52269: LD_INT 2
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 1
52278: NEG
52279: PUSH
52280: LD_INT 1
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 2
52289: NEG
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 2
52300: NEG
52301: PUSH
52302: LD_INT 1
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 2
52312: NEG
52313: PUSH
52314: LD_INT 2
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52343: LD_ADDR_VAR 0 18
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: LD_INT 0
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 0
52360: PUSH
52361: LD_INT 1
52363: NEG
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 1
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 0
52391: PUSH
52392: LD_INT 1
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 1
52401: NEG
52402: PUSH
52403: LD_INT 0
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: LD_INT 2
52428: NEG
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: LD_INT 2
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: LD_INT 1
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 2
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 2
52468: PUSH
52469: LD_INT 1
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 2
52478: PUSH
52479: LD_INT 2
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 1
52488: PUSH
52489: LD_INT 2
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 0
52498: PUSH
52499: LD_INT 2
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 1
52508: NEG
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 2
52519: NEG
52520: PUSH
52521: LD_INT 0
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 2
52530: NEG
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 2
52542: NEG
52543: PUSH
52544: LD_INT 2
52546: NEG
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52573: LD_ADDR_VAR 0 19
52577: PUSH
52578: LD_INT 0
52580: PUSH
52581: LD_INT 0
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 0
52590: PUSH
52591: LD_INT 1
52593: NEG
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: LD_INT 0
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: LD_INT 1
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 1
52631: NEG
52632: PUSH
52633: LD_INT 0
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 1
52642: NEG
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 1
52654: NEG
52655: PUSH
52656: LD_INT 2
52658: NEG
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 0
52666: PUSH
52667: LD_INT 2
52669: NEG
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 1
52677: PUSH
52678: LD_INT 1
52680: NEG
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 2
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 2
52698: PUSH
52699: LD_INT 1
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 2
52708: PUSH
52709: LD_INT 2
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: LD_INT 2
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 0
52728: PUSH
52729: LD_INT 2
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 1
52738: NEG
52739: PUSH
52740: LD_INT 1
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 2
52749: NEG
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 2
52760: NEG
52761: PUSH
52762: LD_INT 1
52764: NEG
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 2
52772: NEG
52773: PUSH
52774: LD_INT 2
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52803: LD_ADDR_VAR 0 20
52807: PUSH
52808: LD_INT 0
52810: PUSH
52811: LD_INT 0
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 0
52820: PUSH
52821: LD_INT 1
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: LD_INT 0
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 1
52841: PUSH
52842: LD_INT 1
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 0
52851: PUSH
52852: LD_INT 1
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 1
52861: NEG
52862: PUSH
52863: LD_INT 0
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: LD_INT 1
52876: NEG
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: LD_INT 2
52888: NEG
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 0
52896: PUSH
52897: LD_INT 2
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 1
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 2
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 2
52928: PUSH
52929: LD_INT 1
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 2
52938: PUSH
52939: LD_INT 2
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 1
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: LD_INT 2
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 1
52968: NEG
52969: PUSH
52970: LD_INT 1
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 2
52979: NEG
52980: PUSH
52981: LD_INT 0
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 2
52990: NEG
52991: PUSH
52992: LD_INT 1
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 2
53002: NEG
53003: PUSH
53004: LD_INT 2
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53033: LD_ADDR_VAR 0 21
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 0
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: NEG
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: LD_INT 1
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: LD_INT 2
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: LD_INT 2
53129: NEG
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 2
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 2
53158: PUSH
53159: LD_INT 1
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 2
53168: PUSH
53169: LD_INT 2
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 1
53178: PUSH
53179: LD_INT 2
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 0
53188: PUSH
53189: LD_INT 2
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 1
53198: NEG
53199: PUSH
53200: LD_INT 1
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 2
53209: NEG
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 2
53220: NEG
53221: PUSH
53222: LD_INT 1
53224: NEG
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 2
53232: NEG
53233: PUSH
53234: LD_INT 2
53236: NEG
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53263: LD_ADDR_VAR 0 22
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: LD_INT 0
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 0
53280: PUSH
53281: LD_INT 1
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 1
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: LD_INT 1
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 0
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 1
53321: NEG
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: LD_INT 1
53336: NEG
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 1
53344: NEG
53345: PUSH
53346: LD_INT 2
53348: NEG
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 0
53356: PUSH
53357: LD_INT 2
53359: NEG
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 1
53367: PUSH
53368: LD_INT 1
53370: NEG
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 2
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 2
53388: PUSH
53389: LD_INT 1
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 2
53398: PUSH
53399: LD_INT 2
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 1
53408: PUSH
53409: LD_INT 2
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: LD_INT 2
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: LD_INT 1
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 2
53439: NEG
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 2
53450: NEG
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 2
53462: NEG
53463: PUSH
53464: LD_INT 2
53466: NEG
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53493: LD_ADDR_VAR 0 23
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: LD_INT 0
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 0
53510: PUSH
53511: LD_INT 1
53513: NEG
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: LD_INT 1
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: LD_INT 1
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 1
53551: NEG
53552: PUSH
53553: LD_INT 0
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 1
53562: NEG
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 1
53574: NEG
53575: PUSH
53576: LD_INT 2
53578: NEG
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 0
53586: PUSH
53587: LD_INT 2
53589: NEG
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 1
53597: PUSH
53598: LD_INT 1
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 2
53608: PUSH
53609: LD_INT 0
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 2
53618: PUSH
53619: LD_INT 1
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 2
53628: PUSH
53629: LD_INT 2
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: LD_INT 2
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: LD_INT 2
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: LD_INT 1
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 2
53669: NEG
53670: PUSH
53671: LD_INT 0
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 2
53680: NEG
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 2
53692: NEG
53693: PUSH
53694: LD_INT 2
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 2
53704: NEG
53705: PUSH
53706: LD_INT 3
53708: NEG
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 1
53716: NEG
53717: PUSH
53718: LD_INT 3
53720: NEG
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 1
53728: PUSH
53729: LD_INT 2
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 2
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53773: LD_ADDR_VAR 0 24
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: LD_INT 0
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 0
53790: PUSH
53791: LD_INT 1
53793: NEG
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: LD_INT 0
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 1
53811: PUSH
53812: LD_INT 1
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 0
53821: PUSH
53822: LD_INT 1
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 1
53831: NEG
53832: PUSH
53833: LD_INT 0
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 1
53842: NEG
53843: PUSH
53844: LD_INT 1
53846: NEG
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 1
53854: NEG
53855: PUSH
53856: LD_INT 2
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: LD_INT 2
53869: NEG
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 1
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 2
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 2
53898: PUSH
53899: LD_INT 1
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 2
53908: PUSH
53909: LD_INT 2
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 1
53918: PUSH
53919: LD_INT 2
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 0
53928: PUSH
53929: LD_INT 2
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 1
53938: NEG
53939: PUSH
53940: LD_INT 1
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 2
53949: NEG
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 2
53960: NEG
53961: PUSH
53962: LD_INT 1
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 2
53972: NEG
53973: PUSH
53974: LD_INT 2
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 1
53984: PUSH
53985: LD_INT 2
53987: NEG
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 2
53995: PUSH
53996: LD_INT 1
53998: NEG
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 3
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 3
54016: PUSH
54017: LD_INT 2
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54049: LD_ADDR_VAR 0 25
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: LD_INT 1
54069: NEG
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 1
54077: PUSH
54078: LD_INT 0
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: LD_INT 1
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 0
54097: PUSH
54098: LD_INT 1
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 1
54107: NEG
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 1
54118: NEG
54119: PUSH
54120: LD_INT 1
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 1
54130: NEG
54131: PUSH
54132: LD_INT 2
54134: NEG
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: LD_INT 2
54145: NEG
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 2
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 2
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 2
54184: PUSH
54185: LD_INT 2
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: LD_INT 2
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: LD_INT 2
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 1
54214: NEG
54215: PUSH
54216: LD_INT 1
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 2
54225: NEG
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 2
54236: NEG
54237: PUSH
54238: LD_INT 1
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 2
54248: NEG
54249: PUSH
54250: LD_INT 2
54252: NEG
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 3
54260: PUSH
54261: LD_INT 1
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 3
54270: PUSH
54271: LD_INT 2
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 2
54280: PUSH
54281: LD_INT 3
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 1
54290: PUSH
54291: LD_INT 3
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54323: LD_ADDR_VAR 0 26
54327: PUSH
54328: LD_INT 0
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: LD_INT 1
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: LD_INT 0
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: LD_INT 1
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: LD_INT 1
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 1
54381: NEG
54382: PUSH
54383: LD_INT 0
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: NEG
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: LD_INT 2
54408: NEG
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 0
54416: PUSH
54417: LD_INT 2
54419: NEG
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 1
54427: PUSH
54428: LD_INT 1
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 2
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 2
54448: PUSH
54449: LD_INT 1
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 2
54458: PUSH
54459: LD_INT 2
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 1
54468: PUSH
54469: LD_INT 2
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: LD_INT 2
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 1
54488: NEG
54489: PUSH
54490: LD_INT 1
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 2
54499: NEG
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 2
54510: NEG
54511: PUSH
54512: LD_INT 1
54514: NEG
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 2
54522: NEG
54523: PUSH
54524: LD_INT 2
54526: NEG
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 2
54534: PUSH
54535: LD_INT 3
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: LD_INT 3
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: LD_INT 2
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 2
54565: NEG
54566: PUSH
54567: LD_INT 1
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54599: LD_ADDR_VAR 0 27
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: LD_INT 1
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: LD_INT 0
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: LD_INT 1
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 0
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 1
54657: NEG
54658: PUSH
54659: LD_INT 0
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 1
54668: NEG
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 1
54680: NEG
54681: PUSH
54682: LD_INT 2
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: LD_INT 2
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: LD_INT 1
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 2
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 2
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 2
54734: PUSH
54735: LD_INT 2
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: LD_INT 2
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: LD_INT 2
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 1
54764: NEG
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 2
54775: NEG
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 2
54786: NEG
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 2
54798: NEG
54799: PUSH
54800: LD_INT 2
54802: NEG
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 1
54810: NEG
54811: PUSH
54812: LD_INT 2
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 2
54821: NEG
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 3
54832: NEG
54833: PUSH
54834: LD_INT 1
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 3
54844: NEG
54845: PUSH
54846: LD_INT 2
54848: NEG
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54879: LD_ADDR_VAR 0 28
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 0
54896: PUSH
54897: LD_INT 1
54899: NEG
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 1
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 1
54917: PUSH
54918: LD_INT 1
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: LD_INT 1
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 1
54960: NEG
54961: PUSH
54962: LD_INT 2
54964: NEG
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 0
54972: PUSH
54973: LD_INT 2
54975: NEG
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 2
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 2
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 2
55014: PUSH
55015: LD_INT 2
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 1
55024: PUSH
55025: LD_INT 2
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: LD_INT 2
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 1
55044: NEG
55045: PUSH
55046: LD_INT 1
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 2
55055: NEG
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 2
55066: NEG
55067: PUSH
55068: LD_INT 1
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 2
55078: NEG
55079: PUSH
55080: LD_INT 2
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 2
55090: NEG
55091: PUSH
55092: LD_INT 3
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: LD_INT 3
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 3
55114: NEG
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 3
55126: NEG
55127: PUSH
55128: LD_INT 2
55130: NEG
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55161: LD_ADDR_VAR 0 29
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: LD_INT 0
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: LD_INT 1
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: NEG
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 1
55230: NEG
55231: PUSH
55232: LD_INT 1
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 1
55242: NEG
55243: PUSH
55244: LD_INT 2
55246: NEG
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 0
55254: PUSH
55255: LD_INT 2
55257: NEG
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 1
55265: PUSH
55266: LD_INT 1
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 2
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 2
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 1
55296: PUSH
55297: LD_INT 2
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: LD_INT 2
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 1
55316: NEG
55317: PUSH
55318: LD_INT 1
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 2
55327: NEG
55328: PUSH
55329: LD_INT 1
55331: NEG
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 2
55339: NEG
55340: PUSH
55341: LD_INT 2
55343: NEG
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 2
55351: NEG
55352: PUSH
55353: LD_INT 3
55355: NEG
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 2
55363: PUSH
55364: LD_INT 1
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 3
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 1
55384: PUSH
55385: LD_INT 3
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 1
55394: NEG
55395: PUSH
55396: LD_INT 2
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 3
55405: NEG
55406: PUSH
55407: LD_INT 2
55409: NEG
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55440: LD_ADDR_VAR 0 30
55444: PUSH
55445: LD_INT 0
55447: PUSH
55448: LD_INT 0
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 0
55457: PUSH
55458: LD_INT 1
55460: NEG
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 1
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 1
55478: PUSH
55479: LD_INT 1
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 0
55488: PUSH
55489: LD_INT 1
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 1
55498: NEG
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 1
55509: NEG
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 1
55521: NEG
55522: PUSH
55523: LD_INT 2
55525: NEG
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: LD_INT 2
55536: NEG
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 1
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 2
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 2
55565: PUSH
55566: LD_INT 1
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 2
55575: PUSH
55576: LD_INT 2
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 1
55585: PUSH
55586: LD_INT 2
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 1
55595: NEG
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 2
55606: NEG
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 2
55617: NEG
55618: PUSH
55619: LD_INT 1
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: LD_INT 3
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 1
55641: PUSH
55642: LD_INT 2
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 3
55652: PUSH
55653: LD_INT 2
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 2
55662: PUSH
55663: LD_INT 3
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 2
55672: NEG
55673: PUSH
55674: LD_INT 1
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 3
55683: NEG
55684: PUSH
55685: LD_INT 1
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55718: LD_ADDR_VAR 0 31
55722: PUSH
55723: LD_INT 0
55725: PUSH
55726: LD_INT 0
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 0
55735: PUSH
55736: LD_INT 1
55738: NEG
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: LD_INT 0
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 1
55756: PUSH
55757: LD_INT 1
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 0
55766: PUSH
55767: LD_INT 1
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 1
55776: NEG
55777: PUSH
55778: LD_INT 0
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 1
55787: NEG
55788: PUSH
55789: LD_INT 1
55791: NEG
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 1
55799: NEG
55800: PUSH
55801: LD_INT 2
55803: NEG
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 1
55811: PUSH
55812: LD_INT 1
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 2
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 2
55832: PUSH
55833: LD_INT 1
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 2
55842: PUSH
55843: LD_INT 2
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 1
55852: PUSH
55853: LD_INT 2
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 0
55862: PUSH
55863: LD_INT 2
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 1
55872: NEG
55873: PUSH
55874: LD_INT 1
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 2
55883: NEG
55884: PUSH
55885: LD_INT 1
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 2
55895: NEG
55896: PUSH
55897: LD_INT 2
55899: NEG
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 2
55907: NEG
55908: PUSH
55909: LD_INT 3
55911: NEG
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 2
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 3
55930: PUSH
55931: LD_INT 1
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 1
55940: PUSH
55941: LD_INT 3
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 1
55950: NEG
55951: PUSH
55952: LD_INT 2
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 3
55961: NEG
55962: PUSH
55963: LD_INT 2
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55996: LD_ADDR_VAR 0 32
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: LD_INT 0
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 0
56013: PUSH
56014: LD_INT 1
56016: NEG
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: LD_INT 0
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 1
56034: PUSH
56035: LD_INT 1
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 0
56044: PUSH
56045: LD_INT 1
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 1
56054: NEG
56055: PUSH
56056: LD_INT 0
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: LD_INT 1
56069: NEG
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 1
56077: NEG
56078: PUSH
56079: LD_INT 2
56081: NEG
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 0
56089: PUSH
56090: LD_INT 2
56092: NEG
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 1
56100: PUSH
56101: LD_INT 1
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 2
56111: PUSH
56112: LD_INT 1
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 2
56121: PUSH
56122: LD_INT 2
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: LD_INT 2
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 0
56141: PUSH
56142: LD_INT 2
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: LD_INT 1
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 2
56162: NEG
56163: PUSH
56164: LD_INT 0
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 2
56173: NEG
56174: PUSH
56175: LD_INT 1
56177: NEG
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: LD_INT 3
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: LD_INT 2
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 3
56208: PUSH
56209: LD_INT 2
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 2
56218: PUSH
56219: LD_INT 3
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 2
56228: NEG
56229: PUSH
56230: LD_INT 1
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 3
56239: NEG
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56274: LD_ADDR_VAR 0 33
56278: PUSH
56279: LD_INT 0
56281: PUSH
56282: LD_INT 0
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 0
56291: PUSH
56292: LD_INT 1
56294: NEG
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 1
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 1
56312: PUSH
56313: LD_INT 1
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 0
56322: PUSH
56323: LD_INT 1
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 1
56332: NEG
56333: PUSH
56334: LD_INT 0
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 1
56343: NEG
56344: PUSH
56345: LD_INT 1
56347: NEG
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: LD_INT 2
56359: NEG
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 1
56367: PUSH
56368: LD_INT 1
56370: NEG
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 2
56378: PUSH
56379: LD_INT 0
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 2
56388: PUSH
56389: LD_INT 1
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 1
56398: PUSH
56399: LD_INT 2
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 0
56408: PUSH
56409: LD_INT 2
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 1
56418: NEG
56419: PUSH
56420: LD_INT 1
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 2
56429: NEG
56430: PUSH
56431: LD_INT 0
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 2
56440: NEG
56441: PUSH
56442: LD_INT 1
56444: NEG
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 2
56452: NEG
56453: PUSH
56454: LD_INT 2
56456: NEG
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 2
56464: NEG
56465: PUSH
56466: LD_INT 3
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 2
56476: PUSH
56477: LD_INT 1
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 3
56487: PUSH
56488: LD_INT 1
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: LD_INT 3
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 1
56507: NEG
56508: PUSH
56509: LD_INT 2
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 3
56518: NEG
56519: PUSH
56520: LD_INT 2
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56553: LD_ADDR_VAR 0 34
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: LD_INT 0
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 0
56570: PUSH
56571: LD_INT 1
56573: NEG
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 1
56581: PUSH
56582: LD_INT 0
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: LD_INT 1
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: LD_INT 1
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 1
56611: NEG
56612: PUSH
56613: LD_INT 0
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 1
56622: NEG
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 1
56634: NEG
56635: PUSH
56636: LD_INT 2
56638: NEG
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: LD_INT 2
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: LD_INT 1
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 2
56668: PUSH
56669: LD_INT 1
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 2
56678: PUSH
56679: LD_INT 2
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 1
56688: PUSH
56689: LD_INT 2
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 2
56709: NEG
56710: PUSH
56711: LD_INT 0
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 2
56720: NEG
56721: PUSH
56722: LD_INT 1
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 2
56732: NEG
56733: PUSH
56734: LD_INT 2
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: NEG
56745: PUSH
56746: LD_INT 3
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 1
56756: PUSH
56757: LD_INT 2
56759: NEG
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 3
56767: PUSH
56768: LD_INT 2
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 2
56777: PUSH
56778: LD_INT 3
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 2
56787: NEG
56788: PUSH
56789: LD_INT 1
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 3
56798: NEG
56799: PUSH
56800: LD_INT 1
56802: NEG
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56833: LD_ADDR_VAR 0 35
56837: PUSH
56838: LD_INT 0
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: LD_INT 1
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: LD_INT 0
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 1
56871: PUSH
56872: LD_INT 1
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 0
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 1
56891: NEG
56892: PUSH
56893: LD_INT 0
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 1
56902: NEG
56903: PUSH
56904: LD_INT 1
56906: NEG
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 2
56914: PUSH
56915: LD_INT 1
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 2
56924: NEG
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56945: LD_ADDR_VAR 0 36
56949: PUSH
56950: LD_INT 0
56952: PUSH
56953: LD_INT 0
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: LD_INT 1
56965: NEG
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 1
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: LD_INT 1
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 0
56993: PUSH
56994: LD_INT 1
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 1
57003: NEG
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 1
57014: NEG
57015: PUSH
57016: LD_INT 1
57018: NEG
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 1
57026: NEG
57027: PUSH
57028: LD_INT 2
57030: NEG
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 1
57038: PUSH
57039: LD_INT 2
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57057: LD_ADDR_VAR 0 37
57061: PUSH
57062: LD_INT 0
57064: PUSH
57065: LD_INT 0
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 0
57074: PUSH
57075: LD_INT 1
57077: NEG
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 1
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 1
57095: PUSH
57096: LD_INT 1
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: LD_INT 1
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 1
57115: NEG
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 1
57126: NEG
57127: PUSH
57128: LD_INT 1
57130: NEG
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 1
57138: PUSH
57139: LD_INT 1
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 1
57149: NEG
57150: PUSH
57151: LD_INT 1
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57169: LD_ADDR_VAR 0 38
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: LD_INT 0
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: LD_INT 1
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 1
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 1
57207: PUSH
57208: LD_INT 1
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 0
57217: PUSH
57218: LD_INT 1
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 1
57227: NEG
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 1
57238: NEG
57239: PUSH
57240: LD_INT 1
57242: NEG
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 2
57250: PUSH
57251: LD_INT 1
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 2
57260: NEG
57261: PUSH
57262: LD_INT 1
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57281: LD_ADDR_VAR 0 39
57285: PUSH
57286: LD_INT 0
57288: PUSH
57289: LD_INT 0
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 0
57298: PUSH
57299: LD_INT 1
57301: NEG
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 1
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 1
57319: PUSH
57320: LD_INT 1
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 0
57329: PUSH
57330: LD_INT 1
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 1
57339: NEG
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: LD_INT 1
57354: NEG
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 1
57362: NEG
57363: PUSH
57364: LD_INT 2
57366: NEG
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: PUSH
57375: LD_INT 2
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57393: LD_ADDR_VAR 0 40
57397: PUSH
57398: LD_INT 0
57400: PUSH
57401: LD_INT 0
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 0
57410: PUSH
57411: LD_INT 1
57413: NEG
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 1
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 1
57431: PUSH
57432: LD_INT 1
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 0
57441: PUSH
57442: LD_INT 1
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 1
57451: NEG
57452: PUSH
57453: LD_INT 0
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 1
57462: NEG
57463: PUSH
57464: LD_INT 1
57466: NEG
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 1
57474: PUSH
57475: LD_INT 1
57477: NEG
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 1
57485: NEG
57486: PUSH
57487: LD_INT 1
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57505: LD_ADDR_VAR 0 41
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: LD_INT 0
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: LD_INT 1
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 1
57563: NEG
57564: PUSH
57565: LD_INT 0
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: NEG
57575: PUSH
57576: LD_INT 1
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 1
57586: NEG
57587: PUSH
57588: LD_INT 2
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: LD_INT 1
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 2
57609: PUSH
57610: LD_INT 0
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 2
57619: PUSH
57620: LD_INT 1
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 2
57629: PUSH
57630: LD_INT 2
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 1
57639: PUSH
57640: LD_INT 2
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 1
57649: NEG
57650: PUSH
57651: LD_INT 1
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 2
57660: NEG
57661: PUSH
57662: LD_INT 0
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 2
57671: NEG
57672: PUSH
57673: LD_INT 1
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 2
57683: NEG
57684: PUSH
57685: LD_INT 2
57687: NEG
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 2
57695: NEG
57696: PUSH
57697: LD_INT 3
57699: NEG
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 2
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 3
57718: PUSH
57719: LD_INT 0
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 3
57728: PUSH
57729: LD_INT 1
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 3
57738: PUSH
57739: LD_INT 2
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 3
57748: PUSH
57749: LD_INT 3
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 2
57758: PUSH
57759: LD_INT 3
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 2
57768: NEG
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 3
57779: NEG
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 3
57790: NEG
57791: PUSH
57792: LD_INT 1
57794: NEG
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 3
57802: NEG
57803: PUSH
57804: LD_INT 2
57806: NEG
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 3
57814: NEG
57815: PUSH
57816: LD_INT 3
57818: NEG
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57855: LD_ADDR_VAR 0 42
57859: PUSH
57860: LD_INT 0
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 0
57872: PUSH
57873: LD_INT 1
57875: NEG
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 1
57883: PUSH
57884: LD_INT 0
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 1
57893: PUSH
57894: LD_INT 1
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 0
57903: PUSH
57904: LD_INT 1
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 1
57913: NEG
57914: PUSH
57915: LD_INT 0
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 1
57924: NEG
57925: PUSH
57926: LD_INT 1
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 1
57936: NEG
57937: PUSH
57938: LD_INT 2
57940: NEG
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 0
57948: PUSH
57949: LD_INT 2
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 1
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 2
57970: PUSH
57971: LD_INT 1
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 2
57980: PUSH
57981: LD_INT 2
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 1
57990: PUSH
57991: LD_INT 2
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 0
58000: PUSH
58001: LD_INT 2
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 1
58010: NEG
58011: PUSH
58012: LD_INT 1
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 2
58021: NEG
58022: PUSH
58023: LD_INT 1
58025: NEG
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 2
58033: NEG
58034: PUSH
58035: LD_INT 2
58037: NEG
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 2
58045: NEG
58046: PUSH
58047: LD_INT 3
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: NEG
58058: PUSH
58059: LD_INT 3
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 0
58069: PUSH
58070: LD_INT 3
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 1
58080: PUSH
58081: LD_INT 2
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 3
58091: PUSH
58092: LD_INT 2
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 3
58101: PUSH
58102: LD_INT 3
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 2
58111: PUSH
58112: LD_INT 3
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 1
58121: PUSH
58122: LD_INT 3
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 0
58131: PUSH
58132: LD_INT 3
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 1
58141: NEG
58142: PUSH
58143: LD_INT 2
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 3
58152: NEG
58153: PUSH
58154: LD_INT 2
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 3
58164: NEG
58165: PUSH
58166: LD_INT 3
58168: NEG
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58205: LD_ADDR_VAR 0 43
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 0
58222: PUSH
58223: LD_INT 1
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 1
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 1
58243: PUSH
58244: LD_INT 1
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: LD_INT 1
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: LD_INT 0
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: NEG
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 1
58286: NEG
58287: PUSH
58288: LD_INT 2
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: LD_INT 2
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 1
58309: PUSH
58310: LD_INT 1
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 2
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 2
58330: PUSH
58331: LD_INT 1
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 1
58340: PUSH
58341: LD_INT 2
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 0
58350: PUSH
58351: LD_INT 2
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 1
58360: NEG
58361: PUSH
58362: LD_INT 1
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 2
58371: NEG
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 2
58382: NEG
58383: PUSH
58384: LD_INT 1
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 1
58394: NEG
58395: PUSH
58396: LD_INT 3
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 0
58406: PUSH
58407: LD_INT 3
58409: NEG
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 1
58417: PUSH
58418: LD_INT 2
58420: NEG
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 2
58428: PUSH
58429: LD_INT 1
58431: NEG
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 3
58439: PUSH
58440: LD_INT 0
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 3
58449: PUSH
58450: LD_INT 1
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 1
58459: PUSH
58460: LD_INT 3
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 0
58469: PUSH
58470: LD_INT 3
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 1
58479: NEG
58480: PUSH
58481: LD_INT 2
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 2
58490: NEG
58491: PUSH
58492: LD_INT 1
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 3
58501: NEG
58502: PUSH
58503: LD_INT 0
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 3
58512: NEG
58513: PUSH
58514: LD_INT 1
58516: NEG
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58553: LD_ADDR_VAR 0 44
58557: PUSH
58558: LD_INT 0
58560: PUSH
58561: LD_INT 0
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 0
58570: PUSH
58571: LD_INT 1
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 1
58581: PUSH
58582: LD_INT 0
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 1
58591: PUSH
58592: LD_INT 1
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 0
58601: PUSH
58602: LD_INT 1
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: LD_INT 0
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 1
58622: NEG
58623: PUSH
58624: LD_INT 1
58626: NEG
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 1
58634: NEG
58635: PUSH
58636: LD_INT 2
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 1
58646: PUSH
58647: LD_INT 1
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 2
58657: PUSH
58658: LD_INT 0
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 2
58667: PUSH
58668: LD_INT 1
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 2
58677: PUSH
58678: LD_INT 2
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 1
58687: PUSH
58688: LD_INT 2
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: NEG
58698: PUSH
58699: LD_INT 1
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 2
58708: NEG
58709: PUSH
58710: LD_INT 0
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 2
58719: NEG
58720: PUSH
58721: LD_INT 1
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 2
58731: NEG
58732: PUSH
58733: LD_INT 2
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 2
58743: NEG
58744: PUSH
58745: LD_INT 3
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 2
58755: PUSH
58756: LD_INT 1
58758: NEG
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 3
58766: PUSH
58767: LD_INT 0
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 3
58776: PUSH
58777: LD_INT 1
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 3
58786: PUSH
58787: LD_INT 2
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 3
58796: PUSH
58797: LD_INT 3
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 2
58806: PUSH
58807: LD_INT 3
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 2
58816: NEG
58817: PUSH
58818: LD_INT 1
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 3
58827: NEG
58828: PUSH
58829: LD_INT 0
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 3
58838: NEG
58839: PUSH
58840: LD_INT 1
58842: NEG
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 3
58850: NEG
58851: PUSH
58852: LD_INT 2
58854: NEG
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 3
58862: NEG
58863: PUSH
58864: LD_INT 3
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58903: LD_ADDR_VAR 0 45
58907: PUSH
58908: LD_INT 0
58910: PUSH
58911: LD_INT 0
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 0
58920: PUSH
58921: LD_INT 1
58923: NEG
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 1
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 1
58941: PUSH
58942: LD_INT 1
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 0
58951: PUSH
58952: LD_INT 1
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 1
58961: NEG
58962: PUSH
58963: LD_INT 0
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 1
58972: NEG
58973: PUSH
58974: LD_INT 1
58976: NEG
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 1
58984: NEG
58985: PUSH
58986: LD_INT 2
58988: NEG
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 0
58996: PUSH
58997: LD_INT 2
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 1
59007: PUSH
59008: LD_INT 1
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 2
59018: PUSH
59019: LD_INT 1
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 2
59028: PUSH
59029: LD_INT 2
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 1
59038: PUSH
59039: LD_INT 2
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: LD_INT 2
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 1
59058: NEG
59059: PUSH
59060: LD_INT 1
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 2
59069: NEG
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 2
59081: NEG
59082: PUSH
59083: LD_INT 2
59085: NEG
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 2
59093: NEG
59094: PUSH
59095: LD_INT 3
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 1
59105: NEG
59106: PUSH
59107: LD_INT 3
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 0
59117: PUSH
59118: LD_INT 3
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 1
59128: PUSH
59129: LD_INT 2
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 3
59139: PUSH
59140: LD_INT 2
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 3
59149: PUSH
59150: LD_INT 3
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 2
59159: PUSH
59160: LD_INT 3
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 1
59169: PUSH
59170: LD_INT 3
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 0
59179: PUSH
59180: LD_INT 3
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 1
59189: NEG
59190: PUSH
59191: LD_INT 2
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 3
59200: NEG
59201: PUSH
59202: LD_INT 2
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 3
59212: NEG
59213: PUSH
59214: LD_INT 3
59216: NEG
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59253: LD_ADDR_VAR 0 46
59257: PUSH
59258: LD_INT 0
59260: PUSH
59261: LD_INT 0
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 0
59270: PUSH
59271: LD_INT 1
59273: NEG
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 1
59281: PUSH
59282: LD_INT 0
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 1
59291: PUSH
59292: LD_INT 1
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 0
59301: PUSH
59302: LD_INT 1
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 1
59311: NEG
59312: PUSH
59313: LD_INT 0
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 1
59322: NEG
59323: PUSH
59324: LD_INT 1
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 1
59334: NEG
59335: PUSH
59336: LD_INT 2
59338: NEG
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 0
59346: PUSH
59347: LD_INT 2
59349: NEG
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 1
59357: PUSH
59358: LD_INT 1
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 2
59368: PUSH
59369: LD_INT 0
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 2
59378: PUSH
59379: LD_INT 1
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 1
59388: PUSH
59389: LD_INT 2
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 0
59398: PUSH
59399: LD_INT 2
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 1
59408: NEG
59409: PUSH
59410: LD_INT 1
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 2
59419: NEG
59420: PUSH
59421: LD_INT 0
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 2
59430: NEG
59431: PUSH
59432: LD_INT 1
59434: NEG
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 1
59442: NEG
59443: PUSH
59444: LD_INT 3
59446: NEG
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 0
59454: PUSH
59455: LD_INT 3
59457: NEG
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 1
59465: PUSH
59466: LD_INT 2
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 2
59476: PUSH
59477: LD_INT 1
59479: NEG
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 3
59487: PUSH
59488: LD_INT 0
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 3
59497: PUSH
59498: LD_INT 1
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 1
59507: PUSH
59508: LD_INT 3
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 0
59517: PUSH
59518: LD_INT 3
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 1
59527: NEG
59528: PUSH
59529: LD_INT 2
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 2
59538: NEG
59539: PUSH
59540: LD_INT 1
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 3
59549: NEG
59550: PUSH
59551: LD_INT 0
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 3
59560: NEG
59561: PUSH
59562: LD_INT 1
59564: NEG
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59601: LD_ADDR_VAR 0 47
59605: PUSH
59606: LD_INT 0
59608: PUSH
59609: LD_INT 0
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: LD_INT 1
59621: NEG
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 1
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 1
59639: PUSH
59640: LD_INT 1
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 0
59649: PUSH
59650: LD_INT 1
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 1
59659: NEG
59660: PUSH
59661: LD_INT 0
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 1
59670: NEG
59671: PUSH
59672: LD_INT 1
59674: NEG
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 1
59682: NEG
59683: PUSH
59684: LD_INT 2
59686: NEG
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 0
59694: PUSH
59695: LD_INT 2
59697: NEG
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 1
59705: PUSH
59706: LD_INT 1
59708: NEG
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 2
59716: NEG
59717: PUSH
59718: LD_INT 1
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 2
59728: NEG
59729: PUSH
59730: LD_INT 2
59732: NEG
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59752: LD_ADDR_VAR 0 48
59756: PUSH
59757: LD_INT 0
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 0
59769: PUSH
59770: LD_INT 1
59772: NEG
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: LD_INT 0
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 1
59790: PUSH
59791: LD_INT 1
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 0
59800: PUSH
59801: LD_INT 1
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 1
59810: NEG
59811: PUSH
59812: LD_INT 0
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 1
59821: NEG
59822: PUSH
59823: LD_INT 1
59825: NEG
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 1
59833: NEG
59834: PUSH
59835: LD_INT 2
59837: NEG
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 0
59845: PUSH
59846: LD_INT 2
59848: NEG
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 1
59856: PUSH
59857: LD_INT 1
59859: NEG
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 2
59867: PUSH
59868: LD_INT 0
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 2
59877: PUSH
59878: LD_INT 1
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59899: LD_ADDR_VAR 0 49
59903: PUSH
59904: LD_INT 0
59906: PUSH
59907: LD_INT 0
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 0
59916: PUSH
59917: LD_INT 1
59919: NEG
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 1
59927: PUSH
59928: LD_INT 0
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 1
59937: PUSH
59938: LD_INT 1
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 0
59947: PUSH
59948: LD_INT 1
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 1
59957: NEG
59958: PUSH
59959: LD_INT 0
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 1
59968: NEG
59969: PUSH
59970: LD_INT 1
59972: NEG
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 1
59980: PUSH
59981: LD_INT 1
59983: NEG
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 2
59991: PUSH
59992: LD_INT 0
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 2
60001: PUSH
60002: LD_INT 1
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 2
60011: PUSH
60012: LD_INT 2
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 1
60021: PUSH
60022: LD_INT 2
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60043: LD_ADDR_VAR 0 50
60047: PUSH
60048: LD_INT 0
60050: PUSH
60051: LD_INT 0
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 0
60060: PUSH
60061: LD_INT 1
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 1
60071: PUSH
60072: LD_INT 0
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 1
60081: PUSH
60082: LD_INT 1
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 0
60091: PUSH
60092: LD_INT 1
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 1
60101: NEG
60102: PUSH
60103: LD_INT 0
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 1
60112: NEG
60113: PUSH
60114: LD_INT 1
60116: NEG
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 2
60124: PUSH
60125: LD_INT 1
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 2
60134: PUSH
60135: LD_INT 2
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 1
60144: PUSH
60145: LD_INT 2
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 0
60154: PUSH
60155: LD_INT 2
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 1
60164: NEG
60165: PUSH
60166: LD_INT 1
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60187: LD_ADDR_VAR 0 51
60191: PUSH
60192: LD_INT 0
60194: PUSH
60195: LD_INT 0
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 0
60204: PUSH
60205: LD_INT 1
60207: NEG
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 1
60215: PUSH
60216: LD_INT 0
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 1
60225: PUSH
60226: LD_INT 1
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 0
60235: PUSH
60236: LD_INT 1
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 1
60245: NEG
60246: PUSH
60247: LD_INT 0
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 1
60256: NEG
60257: PUSH
60258: LD_INT 1
60260: NEG
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 1
60268: PUSH
60269: LD_INT 2
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 0
60278: PUSH
60279: LD_INT 2
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 1
60288: NEG
60289: PUSH
60290: LD_INT 1
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 2
60299: NEG
60300: PUSH
60301: LD_INT 0
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 2
60310: NEG
60311: PUSH
60312: LD_INT 1
60314: NEG
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60334: LD_ADDR_VAR 0 52
60338: PUSH
60339: LD_INT 0
60341: PUSH
60342: LD_INT 0
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 0
60351: PUSH
60352: LD_INT 1
60354: NEG
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 1
60362: PUSH
60363: LD_INT 0
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 1
60372: PUSH
60373: LD_INT 1
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 0
60382: PUSH
60383: LD_INT 1
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 1
60392: NEG
60393: PUSH
60394: LD_INT 0
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 1
60403: NEG
60404: PUSH
60405: LD_INT 1
60407: NEG
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 1
60415: NEG
60416: PUSH
60417: LD_INT 2
60419: NEG
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: LD_INT 1
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 2
60438: NEG
60439: PUSH
60440: LD_INT 0
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 2
60449: NEG
60450: PUSH
60451: LD_INT 1
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 2
60461: NEG
60462: PUSH
60463: LD_INT 2
60465: NEG
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60485: LD_ADDR_VAR 0 53
60489: PUSH
60490: LD_INT 0
60492: PUSH
60493: LD_INT 0
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 0
60502: PUSH
60503: LD_INT 1
60505: NEG
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 1
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: PUSH
60524: LD_INT 1
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 0
60533: PUSH
60534: LD_INT 1
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 1
60543: NEG
60544: PUSH
60545: LD_INT 0
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 1
60554: NEG
60555: PUSH
60556: LD_INT 1
60558: NEG
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 1
60566: NEG
60567: PUSH
60568: LD_INT 2
60570: NEG
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 0
60578: PUSH
60579: LD_INT 2
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 1
60589: PUSH
60590: LD_INT 1
60592: NEG
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 2
60600: PUSH
60601: LD_INT 0
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 2
60610: PUSH
60611: LD_INT 1
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 2
60620: PUSH
60621: LD_INT 2
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 1
60630: PUSH
60631: LD_INT 2
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 0
60640: PUSH
60641: LD_INT 2
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 1
60650: NEG
60651: PUSH
60652: LD_INT 1
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 2
60661: NEG
60662: PUSH
60663: LD_INT 0
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 2
60672: NEG
60673: PUSH
60674: LD_INT 1
60676: NEG
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 2
60684: NEG
60685: PUSH
60686: LD_INT 2
60688: NEG
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60715: LD_ADDR_VAR 0 54
60719: PUSH
60720: LD_INT 0
60722: PUSH
60723: LD_INT 0
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 0
60732: PUSH
60733: LD_INT 1
60735: NEG
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 1
60743: PUSH
60744: LD_INT 0
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 1
60753: PUSH
60754: LD_INT 1
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 0
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 1
60773: NEG
60774: PUSH
60775: LD_INT 0
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 1
60784: NEG
60785: PUSH
60786: LD_INT 1
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 1
60796: NEG
60797: PUSH
60798: LD_INT 2
60800: NEG
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 0
60808: PUSH
60809: LD_INT 2
60811: NEG
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 1
60819: PUSH
60820: LD_INT 1
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 2
60830: PUSH
60831: LD_INT 0
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 2
60840: PUSH
60841: LD_INT 1
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 2
60850: PUSH
60851: LD_INT 2
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 1
60860: PUSH
60861: LD_INT 2
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: LD_INT 2
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 1
60880: NEG
60881: PUSH
60882: LD_INT 1
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 2
60891: NEG
60892: PUSH
60893: LD_INT 0
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 2
60902: NEG
60903: PUSH
60904: LD_INT 1
60906: NEG
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 2
60914: NEG
60915: PUSH
60916: LD_INT 2
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60945: LD_ADDR_VAR 0 55
60949: PUSH
60950: LD_INT 0
60952: PUSH
60953: LD_INT 0
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 0
60962: PUSH
60963: LD_INT 1
60965: NEG
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 1
60973: PUSH
60974: LD_INT 0
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 1
60983: PUSH
60984: LD_INT 1
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 0
60993: PUSH
60994: LD_INT 1
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 1
61003: NEG
61004: PUSH
61005: LD_INT 0
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: LD_INT 1
61018: NEG
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 1
61026: NEG
61027: PUSH
61028: LD_INT 2
61030: NEG
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 0
61038: PUSH
61039: LD_INT 2
61041: NEG
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 1
61049: PUSH
61050: LD_INT 1
61052: NEG
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 2
61060: PUSH
61061: LD_INT 0
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 2
61070: PUSH
61071: LD_INT 1
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 2
61080: PUSH
61081: LD_INT 2
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 1
61090: PUSH
61091: LD_INT 2
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 0
61100: PUSH
61101: LD_INT 2
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 1
61110: NEG
61111: PUSH
61112: LD_INT 1
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 2
61121: NEG
61122: PUSH
61123: LD_INT 0
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 2
61132: NEG
61133: PUSH
61134: LD_INT 1
61136: NEG
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 2
61144: NEG
61145: PUSH
61146: LD_INT 2
61148: NEG
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61175: LD_ADDR_VAR 0 56
61179: PUSH
61180: LD_INT 0
61182: PUSH
61183: LD_INT 0
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 0
61192: PUSH
61193: LD_INT 1
61195: NEG
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 1
61203: PUSH
61204: LD_INT 0
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 1
61213: PUSH
61214: LD_INT 1
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 0
61223: PUSH
61224: LD_INT 1
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 1
61233: NEG
61234: PUSH
61235: LD_INT 0
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 1
61244: NEG
61245: PUSH
61246: LD_INT 1
61248: NEG
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 1
61256: NEG
61257: PUSH
61258: LD_INT 2
61260: NEG
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 0
61268: PUSH
61269: LD_INT 2
61271: NEG
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 1
61279: PUSH
61280: LD_INT 1
61282: NEG
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 2
61290: PUSH
61291: LD_INT 0
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 2
61300: PUSH
61301: LD_INT 1
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 2
61310: PUSH
61311: LD_INT 2
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 1
61320: PUSH
61321: LD_INT 2
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 0
61330: PUSH
61331: LD_INT 2
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 1
61340: NEG
61341: PUSH
61342: LD_INT 1
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 2
61351: NEG
61352: PUSH
61353: LD_INT 0
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 2
61362: NEG
61363: PUSH
61364: LD_INT 1
61366: NEG
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 2
61374: NEG
61375: PUSH
61376: LD_INT 2
61378: NEG
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61405: LD_ADDR_VAR 0 57
61409: PUSH
61410: LD_INT 0
61412: PUSH
61413: LD_INT 0
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 0
61422: PUSH
61423: LD_INT 1
61425: NEG
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 1
61433: PUSH
61434: LD_INT 0
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 1
61443: PUSH
61444: LD_INT 1
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 0
61453: PUSH
61454: LD_INT 1
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 1
61463: NEG
61464: PUSH
61465: LD_INT 0
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 1
61474: NEG
61475: PUSH
61476: LD_INT 1
61478: NEG
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 1
61486: NEG
61487: PUSH
61488: LD_INT 2
61490: NEG
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 0
61498: PUSH
61499: LD_INT 2
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 1
61509: PUSH
61510: LD_INT 1
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 2
61520: PUSH
61521: LD_INT 0
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 2
61530: PUSH
61531: LD_INT 1
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 2
61540: PUSH
61541: LD_INT 2
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 1
61550: PUSH
61551: LD_INT 2
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 0
61560: PUSH
61561: LD_INT 2
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 1
61570: NEG
61571: PUSH
61572: LD_INT 1
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 2
61581: NEG
61582: PUSH
61583: LD_INT 0
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 2
61592: NEG
61593: PUSH
61594: LD_INT 1
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 2
61604: NEG
61605: PUSH
61606: LD_INT 2
61608: NEG
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61635: LD_ADDR_VAR 0 58
61639: PUSH
61640: LD_INT 0
61642: PUSH
61643: LD_INT 0
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 0
61652: PUSH
61653: LD_INT 1
61655: NEG
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 1
61663: PUSH
61664: LD_INT 0
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 1
61673: PUSH
61674: LD_INT 1
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 0
61683: PUSH
61684: LD_INT 1
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 1
61693: NEG
61694: PUSH
61695: LD_INT 0
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 1
61704: NEG
61705: PUSH
61706: LD_INT 1
61708: NEG
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 1
61716: NEG
61717: PUSH
61718: LD_INT 2
61720: NEG
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 0
61728: PUSH
61729: LD_INT 2
61731: NEG
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 1
61739: PUSH
61740: LD_INT 1
61742: NEG
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 2
61750: PUSH
61751: LD_INT 0
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 2
61760: PUSH
61761: LD_INT 1
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 2
61770: PUSH
61771: LD_INT 2
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 1
61780: PUSH
61781: LD_INT 2
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 0
61790: PUSH
61791: LD_INT 2
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 1
61800: NEG
61801: PUSH
61802: LD_INT 1
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 2
61811: NEG
61812: PUSH
61813: LD_INT 0
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 2
61822: NEG
61823: PUSH
61824: LD_INT 1
61826: NEG
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 2
61834: NEG
61835: PUSH
61836: LD_INT 2
61838: NEG
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61865: LD_ADDR_VAR 0 59
61869: PUSH
61870: LD_INT 0
61872: PUSH
61873: LD_INT 0
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 0
61882: PUSH
61883: LD_INT 1
61885: NEG
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 1
61893: PUSH
61894: LD_INT 0
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 1
61903: PUSH
61904: LD_INT 1
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 0
61913: PUSH
61914: LD_INT 1
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 1
61923: NEG
61924: PUSH
61925: LD_INT 0
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 1
61934: NEG
61935: PUSH
61936: LD_INT 1
61938: NEG
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61953: LD_ADDR_VAR 0 60
61957: PUSH
61958: LD_INT 0
61960: PUSH
61961: LD_INT 0
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 0
61970: PUSH
61971: LD_INT 1
61973: NEG
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 1
61981: PUSH
61982: LD_INT 0
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 1
61991: PUSH
61992: LD_INT 1
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 0
62001: PUSH
62002: LD_INT 1
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 1
62011: NEG
62012: PUSH
62013: LD_INT 0
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_INT 1
62022: NEG
62023: PUSH
62024: LD_INT 1
62026: NEG
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62041: LD_ADDR_VAR 0 61
62045: PUSH
62046: LD_INT 0
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 0
62058: PUSH
62059: LD_INT 1
62061: NEG
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 1
62069: PUSH
62070: LD_INT 0
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 1
62079: PUSH
62080: LD_INT 1
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 0
62089: PUSH
62090: LD_INT 1
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 1
62099: NEG
62100: PUSH
62101: LD_INT 0
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 1
62110: NEG
62111: PUSH
62112: LD_INT 1
62114: NEG
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62129: LD_ADDR_VAR 0 62
62133: PUSH
62134: LD_INT 0
62136: PUSH
62137: LD_INT 0
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 0
62146: PUSH
62147: LD_INT 1
62149: NEG
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 1
62157: PUSH
62158: LD_INT 0
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 1
62167: PUSH
62168: LD_INT 1
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 0
62177: PUSH
62178: LD_INT 1
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 1
62187: NEG
62188: PUSH
62189: LD_INT 0
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 1
62198: NEG
62199: PUSH
62200: LD_INT 1
62202: NEG
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62217: LD_ADDR_VAR 0 63
62221: PUSH
62222: LD_INT 0
62224: PUSH
62225: LD_INT 0
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 0
62234: PUSH
62235: LD_INT 1
62237: NEG
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 1
62245: PUSH
62246: LD_INT 0
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 1
62255: PUSH
62256: LD_INT 1
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 0
62265: PUSH
62266: LD_INT 1
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 1
62275: NEG
62276: PUSH
62277: LD_INT 0
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 1
62286: NEG
62287: PUSH
62288: LD_INT 1
62290: NEG
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62305: LD_ADDR_VAR 0 64
62309: PUSH
62310: LD_INT 0
62312: PUSH
62313: LD_INT 0
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 0
62322: PUSH
62323: LD_INT 1
62325: NEG
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 1
62333: PUSH
62334: LD_INT 0
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 1
62343: PUSH
62344: LD_INT 1
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 0
62353: PUSH
62354: LD_INT 1
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 1
62363: NEG
62364: PUSH
62365: LD_INT 0
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 1
62374: NEG
62375: PUSH
62376: LD_INT 1
62378: NEG
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: ST_TO_ADDR
// end ; 1 :
62393: GO 68290
62395: LD_INT 1
62397: DOUBLE
62398: EQUAL
62399: IFTRUE 62403
62401: GO 65026
62403: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62404: LD_ADDR_VAR 0 11
62408: PUSH
62409: LD_INT 1
62411: NEG
62412: PUSH
62413: LD_INT 3
62415: NEG
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 0
62423: PUSH
62424: LD_INT 3
62426: NEG
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 1
62434: PUSH
62435: LD_INT 2
62437: NEG
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: LIST
62447: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62448: LD_ADDR_VAR 0 12
62452: PUSH
62453: LD_INT 2
62455: PUSH
62456: LD_INT 1
62458: NEG
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 3
62466: PUSH
62467: LD_INT 0
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 3
62476: PUSH
62477: LD_INT 1
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: LIST
62488: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62489: LD_ADDR_VAR 0 13
62493: PUSH
62494: LD_INT 3
62496: PUSH
62497: LD_INT 2
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 3
62506: PUSH
62507: LD_INT 3
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 2
62516: PUSH
62517: LD_INT 3
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: LIST
62528: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62529: LD_ADDR_VAR 0 14
62533: PUSH
62534: LD_INT 1
62536: PUSH
62537: LD_INT 3
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 0
62546: PUSH
62547: LD_INT 3
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 1
62556: NEG
62557: PUSH
62558: LD_INT 2
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: LIST
62569: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62570: LD_ADDR_VAR 0 15
62574: PUSH
62575: LD_INT 2
62577: NEG
62578: PUSH
62579: LD_INT 1
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 3
62588: NEG
62589: PUSH
62590: LD_INT 0
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 3
62599: NEG
62600: PUSH
62601: LD_INT 1
62603: NEG
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: LIST
62613: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62614: LD_ADDR_VAR 0 16
62618: PUSH
62619: LD_INT 2
62621: NEG
62622: PUSH
62623: LD_INT 3
62625: NEG
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 3
62633: NEG
62634: PUSH
62635: LD_INT 2
62637: NEG
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 3
62645: NEG
62646: PUSH
62647: LD_INT 3
62649: NEG
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: LIST
62659: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62660: LD_ADDR_VAR 0 17
62664: PUSH
62665: LD_INT 1
62667: NEG
62668: PUSH
62669: LD_INT 3
62671: NEG
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: LD_INT 3
62682: NEG
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 1
62690: PUSH
62691: LD_INT 2
62693: NEG
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: LIST
62703: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62704: LD_ADDR_VAR 0 18
62708: PUSH
62709: LD_INT 2
62711: PUSH
62712: LD_INT 1
62714: NEG
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 3
62722: PUSH
62723: LD_INT 0
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 3
62732: PUSH
62733: LD_INT 1
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: LIST
62744: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62745: LD_ADDR_VAR 0 19
62749: PUSH
62750: LD_INT 3
62752: PUSH
62753: LD_INT 2
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 3
62762: PUSH
62763: LD_INT 3
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 2
62772: PUSH
62773: LD_INT 3
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: LIST
62784: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62785: LD_ADDR_VAR 0 20
62789: PUSH
62790: LD_INT 1
62792: PUSH
62793: LD_INT 3
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 0
62802: PUSH
62803: LD_INT 3
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 1
62812: NEG
62813: PUSH
62814: LD_INT 2
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: LIST
62825: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62826: LD_ADDR_VAR 0 21
62830: PUSH
62831: LD_INT 2
62833: NEG
62834: PUSH
62835: LD_INT 1
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 3
62844: NEG
62845: PUSH
62846: LD_INT 0
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 3
62855: NEG
62856: PUSH
62857: LD_INT 1
62859: NEG
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: LIST
62869: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62870: LD_ADDR_VAR 0 22
62874: PUSH
62875: LD_INT 2
62877: NEG
62878: PUSH
62879: LD_INT 3
62881: NEG
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 3
62889: NEG
62890: PUSH
62891: LD_INT 2
62893: NEG
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 3
62901: NEG
62902: PUSH
62903: LD_INT 3
62905: NEG
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: LIST
62915: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62916: LD_ADDR_VAR 0 23
62920: PUSH
62921: LD_INT 0
62923: PUSH
62924: LD_INT 3
62926: NEG
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 1
62934: NEG
62935: PUSH
62936: LD_INT 4
62938: NEG
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 1
62946: PUSH
62947: LD_INT 3
62949: NEG
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: LIST
62959: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62960: LD_ADDR_VAR 0 24
62964: PUSH
62965: LD_INT 3
62967: PUSH
62968: LD_INT 0
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 3
62977: PUSH
62978: LD_INT 1
62980: NEG
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 4
62988: PUSH
62989: LD_INT 1
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: LIST
63000: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63001: LD_ADDR_VAR 0 25
63005: PUSH
63006: LD_INT 3
63008: PUSH
63009: LD_INT 3
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 4
63018: PUSH
63019: LD_INT 3
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 3
63028: PUSH
63029: LD_INT 4
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: LIST
63040: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63041: LD_ADDR_VAR 0 26
63045: PUSH
63046: LD_INT 0
63048: PUSH
63049: LD_INT 3
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 1
63058: PUSH
63059: LD_INT 4
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 1
63068: NEG
63069: PUSH
63070: LD_INT 3
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: LIST
63081: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63082: LD_ADDR_VAR 0 27
63086: PUSH
63087: LD_INT 3
63089: NEG
63090: PUSH
63091: LD_INT 0
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 3
63100: NEG
63101: PUSH
63102: LD_INT 1
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 4
63111: NEG
63112: PUSH
63113: LD_INT 1
63115: NEG
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: LIST
63125: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63126: LD_ADDR_VAR 0 28
63130: PUSH
63131: LD_INT 3
63133: NEG
63134: PUSH
63135: LD_INT 3
63137: NEG
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 3
63145: NEG
63146: PUSH
63147: LD_INT 4
63149: NEG
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 4
63157: NEG
63158: PUSH
63159: LD_INT 3
63161: NEG
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: LIST
63171: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63172: LD_ADDR_VAR 0 29
63176: PUSH
63177: LD_INT 1
63179: NEG
63180: PUSH
63181: LD_INT 3
63183: NEG
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: LD_INT 0
63191: PUSH
63192: LD_INT 3
63194: NEG
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 1
63202: PUSH
63203: LD_INT 2
63205: NEG
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 1
63213: NEG
63214: PUSH
63215: LD_INT 4
63217: NEG
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 0
63225: PUSH
63226: LD_INT 4
63228: NEG
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 1
63236: PUSH
63237: LD_INT 3
63239: NEG
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 1
63247: NEG
63248: PUSH
63249: LD_INT 5
63251: NEG
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 0
63259: PUSH
63260: LD_INT 5
63262: NEG
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 1
63270: PUSH
63271: LD_INT 4
63273: NEG
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 1
63281: NEG
63282: PUSH
63283: LD_INT 6
63285: NEG
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 0
63293: PUSH
63294: LD_INT 6
63296: NEG
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 1
63304: PUSH
63305: LD_INT 5
63307: NEG
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63327: LD_ADDR_VAR 0 30
63331: PUSH
63332: LD_INT 2
63334: PUSH
63335: LD_INT 1
63337: NEG
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 3
63345: PUSH
63346: LD_INT 0
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 3
63355: PUSH
63356: LD_INT 1
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: LD_INT 3
63365: PUSH
63366: LD_INT 1
63368: NEG
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 4
63376: PUSH
63377: LD_INT 0
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 4
63386: PUSH
63387: LD_INT 1
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: LD_INT 4
63396: PUSH
63397: LD_INT 1
63399: NEG
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 5
63407: PUSH
63408: LD_INT 0
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 5
63417: PUSH
63418: LD_INT 1
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 5
63427: PUSH
63428: LD_INT 1
63430: NEG
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 6
63438: PUSH
63439: LD_INT 0
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 6
63448: PUSH
63449: LD_INT 1
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63470: LD_ADDR_VAR 0 31
63474: PUSH
63475: LD_INT 3
63477: PUSH
63478: LD_INT 2
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 3
63487: PUSH
63488: LD_INT 3
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 2
63497: PUSH
63498: LD_INT 3
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 4
63507: PUSH
63508: LD_INT 3
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 4
63517: PUSH
63518: LD_INT 4
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 3
63527: PUSH
63528: LD_INT 4
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 5
63537: PUSH
63538: LD_INT 4
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 5
63547: PUSH
63548: LD_INT 5
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 4
63557: PUSH
63558: LD_INT 5
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 6
63567: PUSH
63568: LD_INT 5
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 6
63577: PUSH
63578: LD_INT 6
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 5
63587: PUSH
63588: LD_INT 6
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63609: LD_ADDR_VAR 0 32
63613: PUSH
63614: LD_INT 1
63616: PUSH
63617: LD_INT 3
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 0
63626: PUSH
63627: LD_INT 3
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 1
63636: NEG
63637: PUSH
63638: LD_INT 2
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 1
63647: PUSH
63648: LD_INT 4
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 0
63657: PUSH
63658: LD_INT 4
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 1
63667: NEG
63668: PUSH
63669: LD_INT 3
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 1
63678: PUSH
63679: LD_INT 5
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 0
63688: PUSH
63689: LD_INT 5
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 1
63698: NEG
63699: PUSH
63700: LD_INT 4
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 1
63709: PUSH
63710: LD_INT 6
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 0
63719: PUSH
63720: LD_INT 6
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 1
63729: NEG
63730: PUSH
63731: LD_INT 5
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63752: LD_ADDR_VAR 0 33
63756: PUSH
63757: LD_INT 2
63759: NEG
63760: PUSH
63761: LD_INT 1
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 3
63770: NEG
63771: PUSH
63772: LD_INT 0
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 3
63781: NEG
63782: PUSH
63783: LD_INT 1
63785: NEG
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 3
63793: NEG
63794: PUSH
63795: LD_INT 1
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 4
63804: NEG
63805: PUSH
63806: LD_INT 0
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 4
63815: NEG
63816: PUSH
63817: LD_INT 1
63819: NEG
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 4
63827: NEG
63828: PUSH
63829: LD_INT 1
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 5
63838: NEG
63839: PUSH
63840: LD_INT 0
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 5
63849: NEG
63850: PUSH
63851: LD_INT 1
63853: NEG
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 5
63861: NEG
63862: PUSH
63863: LD_INT 1
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 6
63872: NEG
63873: PUSH
63874: LD_INT 0
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 6
63883: NEG
63884: PUSH
63885: LD_INT 1
63887: NEG
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63907: LD_ADDR_VAR 0 34
63911: PUSH
63912: LD_INT 2
63914: NEG
63915: PUSH
63916: LD_INT 3
63918: NEG
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 3
63926: NEG
63927: PUSH
63928: LD_INT 2
63930: NEG
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 3
63938: NEG
63939: PUSH
63940: LD_INT 3
63942: NEG
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 3
63950: NEG
63951: PUSH
63952: LD_INT 4
63954: NEG
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 4
63962: NEG
63963: PUSH
63964: LD_INT 3
63966: NEG
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 4
63974: NEG
63975: PUSH
63976: LD_INT 4
63978: NEG
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 4
63986: NEG
63987: PUSH
63988: LD_INT 5
63990: NEG
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 5
63998: NEG
63999: PUSH
64000: LD_INT 4
64002: NEG
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 5
64010: NEG
64011: PUSH
64012: LD_INT 5
64014: NEG
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 5
64022: NEG
64023: PUSH
64024: LD_INT 6
64026: NEG
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 6
64034: NEG
64035: PUSH
64036: LD_INT 5
64038: NEG
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 6
64046: NEG
64047: PUSH
64048: LD_INT 6
64050: NEG
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64070: LD_ADDR_VAR 0 41
64074: PUSH
64075: LD_INT 0
64077: PUSH
64078: LD_INT 2
64080: NEG
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 1
64088: NEG
64089: PUSH
64090: LD_INT 3
64092: NEG
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 1
64100: PUSH
64101: LD_INT 2
64103: NEG
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: LIST
64113: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64114: LD_ADDR_VAR 0 42
64118: PUSH
64119: LD_INT 2
64121: PUSH
64122: LD_INT 0
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 2
64131: PUSH
64132: LD_INT 1
64134: NEG
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 3
64142: PUSH
64143: LD_INT 1
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: LIST
64154: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64155: LD_ADDR_VAR 0 43
64159: PUSH
64160: LD_INT 2
64162: PUSH
64163: LD_INT 2
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 3
64172: PUSH
64173: LD_INT 2
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 2
64182: PUSH
64183: LD_INT 3
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: LIST
64194: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64195: LD_ADDR_VAR 0 44
64199: PUSH
64200: LD_INT 0
64202: PUSH
64203: LD_INT 2
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 1
64212: PUSH
64213: LD_INT 3
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 1
64222: NEG
64223: PUSH
64224: LD_INT 2
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: LIST
64235: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64236: LD_ADDR_VAR 0 45
64240: PUSH
64241: LD_INT 2
64243: NEG
64244: PUSH
64245: LD_INT 0
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 2
64254: NEG
64255: PUSH
64256: LD_INT 1
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: LD_INT 3
64265: NEG
64266: PUSH
64267: LD_INT 1
64269: NEG
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: LIST
64279: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64280: LD_ADDR_VAR 0 46
64284: PUSH
64285: LD_INT 2
64287: NEG
64288: PUSH
64289: LD_INT 2
64291: NEG
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 2
64299: NEG
64300: PUSH
64301: LD_INT 3
64303: NEG
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 3
64311: NEG
64312: PUSH
64313: LD_INT 2
64315: NEG
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: LIST
64325: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64326: LD_ADDR_VAR 0 47
64330: PUSH
64331: LD_INT 2
64333: NEG
64334: PUSH
64335: LD_INT 3
64337: NEG
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 1
64345: NEG
64346: PUSH
64347: LD_INT 3
64349: NEG
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64359: LD_ADDR_VAR 0 48
64363: PUSH
64364: LD_INT 1
64366: PUSH
64367: LD_INT 2
64369: NEG
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 2
64377: PUSH
64378: LD_INT 1
64380: NEG
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64390: LD_ADDR_VAR 0 49
64394: PUSH
64395: LD_INT 3
64397: PUSH
64398: LD_INT 1
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 3
64407: PUSH
64408: LD_INT 2
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64419: LD_ADDR_VAR 0 50
64423: PUSH
64424: LD_INT 2
64426: PUSH
64427: LD_INT 3
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 1
64436: PUSH
64437: LD_INT 3
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64448: LD_ADDR_VAR 0 51
64452: PUSH
64453: LD_INT 1
64455: NEG
64456: PUSH
64457: LD_INT 2
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 2
64466: NEG
64467: PUSH
64468: LD_INT 1
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64479: LD_ADDR_VAR 0 52
64483: PUSH
64484: LD_INT 3
64486: NEG
64487: PUSH
64488: LD_INT 1
64490: NEG
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 3
64498: NEG
64499: PUSH
64500: LD_INT 2
64502: NEG
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64512: LD_ADDR_VAR 0 53
64516: PUSH
64517: LD_INT 1
64519: NEG
64520: PUSH
64521: LD_INT 3
64523: NEG
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 0
64531: PUSH
64532: LD_INT 3
64534: NEG
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 1
64542: PUSH
64543: LD_INT 2
64545: NEG
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: LIST
64555: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64556: LD_ADDR_VAR 0 54
64560: PUSH
64561: LD_INT 2
64563: PUSH
64564: LD_INT 1
64566: NEG
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 3
64574: PUSH
64575: LD_INT 0
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 3
64584: PUSH
64585: LD_INT 1
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: LIST
64596: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64597: LD_ADDR_VAR 0 55
64601: PUSH
64602: LD_INT 3
64604: PUSH
64605: LD_INT 2
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 3
64614: PUSH
64615: LD_INT 3
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 2
64624: PUSH
64625: LD_INT 3
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: LIST
64636: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64637: LD_ADDR_VAR 0 56
64641: PUSH
64642: LD_INT 1
64644: PUSH
64645: LD_INT 3
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 0
64654: PUSH
64655: LD_INT 3
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 1
64664: NEG
64665: PUSH
64666: LD_INT 2
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: LIST
64677: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64678: LD_ADDR_VAR 0 57
64682: PUSH
64683: LD_INT 2
64685: NEG
64686: PUSH
64687: LD_INT 1
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 3
64696: NEG
64697: PUSH
64698: LD_INT 0
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 3
64707: NEG
64708: PUSH
64709: LD_INT 1
64711: NEG
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: LIST
64721: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64722: LD_ADDR_VAR 0 58
64726: PUSH
64727: LD_INT 2
64729: NEG
64730: PUSH
64731: LD_INT 3
64733: NEG
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 3
64741: NEG
64742: PUSH
64743: LD_INT 2
64745: NEG
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 3
64753: NEG
64754: PUSH
64755: LD_INT 3
64757: NEG
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: LIST
64767: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64768: LD_ADDR_VAR 0 59
64772: PUSH
64773: LD_INT 1
64775: NEG
64776: PUSH
64777: LD_INT 2
64779: NEG
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 0
64787: PUSH
64788: LD_INT 2
64790: NEG
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 1
64798: PUSH
64799: LD_INT 1
64801: NEG
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: LIST
64811: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64812: LD_ADDR_VAR 0 60
64816: PUSH
64817: LD_INT 1
64819: PUSH
64820: LD_INT 1
64822: NEG
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: PUSH
64828: LD_INT 2
64830: PUSH
64831: LD_INT 0
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 2
64840: PUSH
64841: LD_INT 1
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: LIST
64852: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64853: LD_ADDR_VAR 0 61
64857: PUSH
64858: LD_INT 2
64860: PUSH
64861: LD_INT 1
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 2
64870: PUSH
64871: LD_INT 2
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 1
64880: PUSH
64881: LD_INT 2
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: LIST
64892: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64893: LD_ADDR_VAR 0 62
64897: PUSH
64898: LD_INT 1
64900: PUSH
64901: LD_INT 2
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 0
64910: PUSH
64911: LD_INT 2
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 1
64920: NEG
64921: PUSH
64922: LD_INT 1
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: LIST
64933: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64934: LD_ADDR_VAR 0 63
64938: PUSH
64939: LD_INT 1
64941: NEG
64942: PUSH
64943: LD_INT 1
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 2
64952: NEG
64953: PUSH
64954: LD_INT 0
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 2
64963: NEG
64964: PUSH
64965: LD_INT 1
64967: NEG
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: LIST
64977: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64978: LD_ADDR_VAR 0 64
64982: PUSH
64983: LD_INT 1
64985: NEG
64986: PUSH
64987: LD_INT 2
64989: NEG
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 2
64997: NEG
64998: PUSH
64999: LD_INT 1
65001: NEG
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 2
65009: NEG
65010: PUSH
65011: LD_INT 2
65013: NEG
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: LIST
65023: ST_TO_ADDR
// end ; 2 :
65024: GO 68290
65026: LD_INT 2
65028: DOUBLE
65029: EQUAL
65030: IFTRUE 65034
65032: GO 68289
65034: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65035: LD_ADDR_VAR 0 29
65039: PUSH
65040: LD_INT 4
65042: PUSH
65043: LD_INT 0
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 4
65052: PUSH
65053: LD_INT 1
65055: NEG
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 5
65063: PUSH
65064: LD_INT 0
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 5
65073: PUSH
65074: LD_INT 1
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 4
65083: PUSH
65084: LD_INT 1
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 3
65093: PUSH
65094: LD_INT 0
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 3
65103: PUSH
65104: LD_INT 1
65106: NEG
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 3
65114: PUSH
65115: LD_INT 2
65117: NEG
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 5
65125: PUSH
65126: LD_INT 2
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 3
65135: PUSH
65136: LD_INT 3
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 3
65145: PUSH
65146: LD_INT 2
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: LD_INT 4
65155: PUSH
65156: LD_INT 3
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 4
65165: PUSH
65166: LD_INT 4
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 3
65175: PUSH
65176: LD_INT 4
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 2
65185: PUSH
65186: LD_INT 3
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 2
65195: PUSH
65196: LD_INT 2
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 4
65205: PUSH
65206: LD_INT 2
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 2
65215: PUSH
65216: LD_INT 4
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 0
65225: PUSH
65226: LD_INT 4
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 0
65235: PUSH
65236: LD_INT 3
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 1
65245: PUSH
65246: LD_INT 4
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 1
65255: PUSH
65256: LD_INT 5
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 0
65265: PUSH
65266: LD_INT 5
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 1
65275: NEG
65276: PUSH
65277: LD_INT 4
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 1
65286: NEG
65287: PUSH
65288: LD_INT 3
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 2
65297: PUSH
65298: LD_INT 5
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: LD_INT 2
65307: NEG
65308: PUSH
65309: LD_INT 3
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 3
65318: NEG
65319: PUSH
65320: LD_INT 0
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 3
65329: NEG
65330: PUSH
65331: LD_INT 1
65333: NEG
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 2
65341: NEG
65342: PUSH
65343: LD_INT 0
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 2
65352: NEG
65353: PUSH
65354: LD_INT 1
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 3
65363: NEG
65364: PUSH
65365: LD_INT 1
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 4
65374: NEG
65375: PUSH
65376: LD_INT 0
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_INT 4
65385: NEG
65386: PUSH
65387: LD_INT 1
65389: NEG
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 4
65397: NEG
65398: PUSH
65399: LD_INT 2
65401: NEG
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 2
65409: NEG
65410: PUSH
65411: LD_INT 2
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 4
65420: NEG
65421: PUSH
65422: LD_INT 4
65424: NEG
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 4
65432: NEG
65433: PUSH
65434: LD_INT 5
65436: NEG
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 3
65444: NEG
65445: PUSH
65446: LD_INT 4
65448: NEG
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 3
65456: NEG
65457: PUSH
65458: LD_INT 3
65460: NEG
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 4
65468: NEG
65469: PUSH
65470: LD_INT 3
65472: NEG
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 5
65480: NEG
65481: PUSH
65482: LD_INT 4
65484: NEG
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 5
65492: NEG
65493: PUSH
65494: LD_INT 5
65496: NEG
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 3
65504: NEG
65505: PUSH
65506: LD_INT 5
65508: NEG
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 5
65516: NEG
65517: PUSH
65518: LD_INT 3
65520: NEG
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65573: LD_ADDR_VAR 0 30
65577: PUSH
65578: LD_INT 4
65580: PUSH
65581: LD_INT 4
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 4
65590: PUSH
65591: LD_INT 3
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 5
65600: PUSH
65601: LD_INT 4
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 5
65610: PUSH
65611: LD_INT 5
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 4
65620: PUSH
65621: LD_INT 5
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 3
65630: PUSH
65631: LD_INT 4
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: LD_INT 3
65640: PUSH
65641: LD_INT 3
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 5
65650: PUSH
65651: LD_INT 3
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 3
65660: PUSH
65661: LD_INT 5
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 0
65670: PUSH
65671: LD_INT 3
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_INT 0
65680: PUSH
65681: LD_INT 2
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 1
65690: PUSH
65691: LD_INT 3
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 1
65700: PUSH
65701: LD_INT 4
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 0
65710: PUSH
65711: LD_INT 4
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: LD_INT 1
65720: NEG
65721: PUSH
65722: LD_INT 3
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: LD_INT 1
65731: NEG
65732: PUSH
65733: LD_INT 2
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 2
65742: PUSH
65743: LD_INT 4
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 2
65752: NEG
65753: PUSH
65754: LD_INT 2
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 4
65763: NEG
65764: PUSH
65765: LD_INT 0
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: LD_INT 4
65774: NEG
65775: PUSH
65776: LD_INT 1
65778: NEG
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 3
65786: NEG
65787: PUSH
65788: LD_INT 0
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: LD_INT 3
65797: NEG
65798: PUSH
65799: LD_INT 1
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: LD_INT 4
65808: NEG
65809: PUSH
65810: LD_INT 1
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: LD_INT 5
65819: NEG
65820: PUSH
65821: LD_INT 0
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 5
65830: NEG
65831: PUSH
65832: LD_INT 1
65834: NEG
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 5
65842: NEG
65843: PUSH
65844: LD_INT 2
65846: NEG
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 3
65854: NEG
65855: PUSH
65856: LD_INT 2
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 3
65865: NEG
65866: PUSH
65867: LD_INT 3
65869: NEG
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 3
65877: NEG
65878: PUSH
65879: LD_INT 4
65881: NEG
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 2
65889: NEG
65890: PUSH
65891: LD_INT 3
65893: NEG
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 2
65901: NEG
65902: PUSH
65903: LD_INT 2
65905: NEG
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PUSH
65911: LD_INT 3
65913: NEG
65914: PUSH
65915: LD_INT 2
65917: NEG
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 4
65925: NEG
65926: PUSH
65927: LD_INT 3
65929: NEG
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: LD_INT 4
65937: NEG
65938: PUSH
65939: LD_INT 4
65941: NEG
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: LD_INT 2
65949: NEG
65950: PUSH
65951: LD_INT 4
65953: NEG
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 4
65961: NEG
65962: PUSH
65963: LD_INT 2
65965: NEG
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_INT 0
65973: PUSH
65974: LD_INT 4
65976: NEG
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 0
65984: PUSH
65985: LD_INT 5
65987: NEG
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 1
65995: PUSH
65996: LD_INT 4
65998: NEG
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 1
66006: PUSH
66007: LD_INT 3
66009: NEG
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 0
66017: PUSH
66018: LD_INT 3
66020: NEG
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: LD_INT 1
66028: NEG
66029: PUSH
66030: LD_INT 4
66032: NEG
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: LD_INT 1
66040: NEG
66041: PUSH
66042: LD_INT 5
66044: NEG
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 2
66052: PUSH
66053: LD_INT 3
66055: NEG
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 2
66063: NEG
66064: PUSH
66065: LD_INT 5
66067: NEG
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66120: LD_ADDR_VAR 0 31
66124: PUSH
66125: LD_INT 0
66127: PUSH
66128: LD_INT 4
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PUSH
66135: LD_INT 0
66137: PUSH
66138: LD_INT 3
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PUSH
66145: LD_INT 1
66147: PUSH
66148: LD_INT 4
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 1
66157: PUSH
66158: LD_INT 5
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 0
66167: PUSH
66168: LD_INT 5
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PUSH
66175: LD_INT 1
66177: NEG
66178: PUSH
66179: LD_INT 4
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: PUSH
66186: LD_INT 1
66188: NEG
66189: PUSH
66190: LD_INT 3
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 2
66199: PUSH
66200: LD_INT 5
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: LD_INT 2
66209: NEG
66210: PUSH
66211: LD_INT 3
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: LD_INT 3
66220: NEG
66221: PUSH
66222: LD_INT 0
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 3
66231: NEG
66232: PUSH
66233: LD_INT 1
66235: NEG
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: LD_INT 2
66243: NEG
66244: PUSH
66245: LD_INT 0
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 2
66254: NEG
66255: PUSH
66256: LD_INT 1
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: LD_INT 3
66265: NEG
66266: PUSH
66267: LD_INT 1
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: PUSH
66274: LD_INT 4
66276: NEG
66277: PUSH
66278: LD_INT 0
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: LD_INT 4
66287: NEG
66288: PUSH
66289: LD_INT 1
66291: NEG
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 4
66299: NEG
66300: PUSH
66301: LD_INT 2
66303: NEG
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: LD_INT 2
66311: NEG
66312: PUSH
66313: LD_INT 2
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 4
66322: NEG
66323: PUSH
66324: LD_INT 4
66326: NEG
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 4
66334: NEG
66335: PUSH
66336: LD_INT 5
66338: NEG
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 3
66346: NEG
66347: PUSH
66348: LD_INT 4
66350: NEG
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 3
66358: NEG
66359: PUSH
66360: LD_INT 3
66362: NEG
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: LD_INT 4
66370: NEG
66371: PUSH
66372: LD_INT 3
66374: NEG
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: PUSH
66380: LD_INT 5
66382: NEG
66383: PUSH
66384: LD_INT 4
66386: NEG
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: LD_INT 5
66394: NEG
66395: PUSH
66396: LD_INT 5
66398: NEG
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 3
66406: NEG
66407: PUSH
66408: LD_INT 5
66410: NEG
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 5
66418: NEG
66419: PUSH
66420: LD_INT 3
66422: NEG
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 0
66430: PUSH
66431: LD_INT 3
66433: NEG
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: LD_INT 0
66441: PUSH
66442: LD_INT 4
66444: NEG
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: LD_INT 1
66452: PUSH
66453: LD_INT 3
66455: NEG
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 1
66463: PUSH
66464: LD_INT 2
66466: NEG
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 0
66474: PUSH
66475: LD_INT 2
66477: NEG
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 1
66485: NEG
66486: PUSH
66487: LD_INT 3
66489: NEG
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: PUSH
66495: LD_INT 1
66497: NEG
66498: PUSH
66499: LD_INT 4
66501: NEG
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 2
66509: PUSH
66510: LD_INT 2
66512: NEG
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 2
66520: NEG
66521: PUSH
66522: LD_INT 4
66524: NEG
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 4
66532: PUSH
66533: LD_INT 0
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 4
66542: PUSH
66543: LD_INT 1
66545: NEG
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: LD_INT 5
66553: PUSH
66554: LD_INT 0
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: LD_INT 5
66563: PUSH
66564: LD_INT 1
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 4
66573: PUSH
66574: LD_INT 1
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 3
66583: PUSH
66584: LD_INT 0
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 3
66593: PUSH
66594: LD_INT 1
66596: NEG
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 3
66604: PUSH
66605: LD_INT 2
66607: NEG
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 5
66615: PUSH
66616: LD_INT 2
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66670: LD_ADDR_VAR 0 32
66674: PUSH
66675: LD_INT 4
66677: NEG
66678: PUSH
66679: LD_INT 0
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: LD_INT 4
66688: NEG
66689: PUSH
66690: LD_INT 1
66692: NEG
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PUSH
66698: LD_INT 3
66700: NEG
66701: PUSH
66702: LD_INT 0
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 3
66711: NEG
66712: PUSH
66713: LD_INT 1
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 4
66722: NEG
66723: PUSH
66724: LD_INT 1
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 5
66733: NEG
66734: PUSH
66735: LD_INT 0
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 5
66744: NEG
66745: PUSH
66746: LD_INT 1
66748: NEG
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 5
66756: NEG
66757: PUSH
66758: LD_INT 2
66760: NEG
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 3
66768: NEG
66769: PUSH
66770: LD_INT 2
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 3
66779: NEG
66780: PUSH
66781: LD_INT 3
66783: NEG
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 3
66791: NEG
66792: PUSH
66793: LD_INT 4
66795: NEG
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PUSH
66801: LD_INT 2
66803: NEG
66804: PUSH
66805: LD_INT 3
66807: NEG
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 2
66815: NEG
66816: PUSH
66817: LD_INT 2
66819: NEG
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: PUSH
66825: LD_INT 3
66827: NEG
66828: PUSH
66829: LD_INT 2
66831: NEG
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 4
66839: NEG
66840: PUSH
66841: LD_INT 3
66843: NEG
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 4
66851: NEG
66852: PUSH
66853: LD_INT 4
66855: NEG
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 2
66863: NEG
66864: PUSH
66865: LD_INT 4
66867: NEG
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 4
66875: NEG
66876: PUSH
66877: LD_INT 2
66879: NEG
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: LD_INT 0
66887: PUSH
66888: LD_INT 4
66890: NEG
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 0
66898: PUSH
66899: LD_INT 5
66901: NEG
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: LD_INT 1
66909: PUSH
66910: LD_INT 4
66912: NEG
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: PUSH
66918: LD_INT 1
66920: PUSH
66921: LD_INT 3
66923: NEG
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 0
66931: PUSH
66932: LD_INT 3
66934: NEG
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 1
66942: NEG
66943: PUSH
66944: LD_INT 4
66946: NEG
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 1
66954: NEG
66955: PUSH
66956: LD_INT 5
66958: NEG
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: PUSH
66964: LD_INT 2
66966: PUSH
66967: LD_INT 3
66969: NEG
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: PUSH
66975: LD_INT 2
66977: NEG
66978: PUSH
66979: LD_INT 5
66981: NEG
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: PUSH
66987: LD_INT 3
66989: PUSH
66990: LD_INT 0
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 3
66999: PUSH
67000: LD_INT 1
67002: NEG
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 4
67010: PUSH
67011: LD_INT 0
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 4
67020: PUSH
67021: LD_INT 1
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 3
67030: PUSH
67031: LD_INT 1
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 2
67040: PUSH
67041: LD_INT 0
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 2
67050: PUSH
67051: LD_INT 1
67053: NEG
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 2
67061: PUSH
67062: LD_INT 2
67064: NEG
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 4
67072: PUSH
67073: LD_INT 2
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 4
67082: PUSH
67083: LD_INT 4
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: LD_INT 4
67092: PUSH
67093: LD_INT 3
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PUSH
67100: LD_INT 5
67102: PUSH
67103: LD_INT 4
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 5
67112: PUSH
67113: LD_INT 5
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 4
67122: PUSH
67123: LD_INT 5
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 3
67132: PUSH
67133: LD_INT 4
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 3
67142: PUSH
67143: LD_INT 3
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 5
67152: PUSH
67153: LD_INT 3
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: LD_INT 3
67162: PUSH
67163: LD_INT 5
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67217: LD_ADDR_VAR 0 33
67221: PUSH
67222: LD_INT 4
67224: NEG
67225: PUSH
67226: LD_INT 4
67228: NEG
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 4
67236: NEG
67237: PUSH
67238: LD_INT 5
67240: NEG
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 3
67248: NEG
67249: PUSH
67250: LD_INT 4
67252: NEG
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 3
67260: NEG
67261: PUSH
67262: LD_INT 3
67264: NEG
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PUSH
67270: LD_INT 4
67272: NEG
67273: PUSH
67274: LD_INT 3
67276: NEG
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 5
67284: NEG
67285: PUSH
67286: LD_INT 4
67288: NEG
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 5
67296: NEG
67297: PUSH
67298: LD_INT 5
67300: NEG
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 3
67308: NEG
67309: PUSH
67310: LD_INT 5
67312: NEG
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 5
67320: NEG
67321: PUSH
67322: LD_INT 3
67324: NEG
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: LD_INT 0
67332: PUSH
67333: LD_INT 3
67335: NEG
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: LD_INT 0
67343: PUSH
67344: LD_INT 4
67346: NEG
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: LD_INT 1
67354: PUSH
67355: LD_INT 3
67357: NEG
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 1
67365: PUSH
67366: LD_INT 2
67368: NEG
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: LD_INT 0
67376: PUSH
67377: LD_INT 2
67379: NEG
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: LD_INT 1
67387: NEG
67388: PUSH
67389: LD_INT 3
67391: NEG
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 1
67399: NEG
67400: PUSH
67401: LD_INT 4
67403: NEG
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: LD_INT 2
67411: PUSH
67412: LD_INT 2
67414: NEG
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 2
67422: NEG
67423: PUSH
67424: LD_INT 4
67426: NEG
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 4
67434: PUSH
67435: LD_INT 0
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 4
67444: PUSH
67445: LD_INT 1
67447: NEG
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PUSH
67453: LD_INT 5
67455: PUSH
67456: LD_INT 0
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 5
67465: PUSH
67466: LD_INT 1
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: LD_INT 4
67475: PUSH
67476: LD_INT 1
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 3
67485: PUSH
67486: LD_INT 0
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: LD_INT 3
67495: PUSH
67496: LD_INT 1
67498: NEG
67499: PUSH
67500: EMPTY
67501: LIST
67502: LIST
67503: PUSH
67504: LD_INT 3
67506: PUSH
67507: LD_INT 2
67509: NEG
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PUSH
67515: LD_INT 5
67517: PUSH
67518: LD_INT 2
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: LD_INT 3
67527: PUSH
67528: LD_INT 3
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: LD_INT 3
67537: PUSH
67538: LD_INT 2
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: PUSH
67545: LD_INT 4
67547: PUSH
67548: LD_INT 3
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 4
67557: PUSH
67558: LD_INT 4
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 3
67567: PUSH
67568: LD_INT 4
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 2
67577: PUSH
67578: LD_INT 3
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 2
67587: PUSH
67588: LD_INT 2
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: PUSH
67595: LD_INT 4
67597: PUSH
67598: LD_INT 2
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: PUSH
67605: LD_INT 2
67607: PUSH
67608: LD_INT 4
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PUSH
67615: LD_INT 0
67617: PUSH
67618: LD_INT 4
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: LD_INT 0
67627: PUSH
67628: LD_INT 3
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: PUSH
67635: LD_INT 1
67637: PUSH
67638: LD_INT 4
67640: PUSH
67641: EMPTY
67642: LIST
67643: LIST
67644: PUSH
67645: LD_INT 1
67647: PUSH
67648: LD_INT 5
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: LD_INT 0
67657: PUSH
67658: LD_INT 5
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 1
67667: NEG
67668: PUSH
67669: LD_INT 4
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: LD_INT 1
67678: NEG
67679: PUSH
67680: LD_INT 3
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PUSH
67687: LD_INT 2
67689: PUSH
67690: LD_INT 5
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PUSH
67697: LD_INT 2
67699: NEG
67700: PUSH
67701: LD_INT 3
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: LIST
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: LIST
67752: LIST
67753: LIST
67754: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67755: LD_ADDR_VAR 0 34
67759: PUSH
67760: LD_INT 0
67762: PUSH
67763: LD_INT 4
67765: NEG
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 0
67773: PUSH
67774: LD_INT 5
67776: NEG
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 1
67784: PUSH
67785: LD_INT 4
67787: NEG
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PUSH
67793: LD_INT 1
67795: PUSH
67796: LD_INT 3
67798: NEG
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PUSH
67804: LD_INT 0
67806: PUSH
67807: LD_INT 3
67809: NEG
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: LD_INT 1
67817: NEG
67818: PUSH
67819: LD_INT 4
67821: NEG
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_INT 1
67829: NEG
67830: PUSH
67831: LD_INT 5
67833: NEG
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: LD_INT 2
67841: PUSH
67842: LD_INT 3
67844: NEG
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 2
67852: NEG
67853: PUSH
67854: LD_INT 5
67856: NEG
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: LD_INT 3
67864: PUSH
67865: LD_INT 0
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: LD_INT 3
67874: PUSH
67875: LD_INT 1
67877: NEG
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PUSH
67883: LD_INT 4
67885: PUSH
67886: LD_INT 0
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: LD_INT 4
67895: PUSH
67896: LD_INT 1
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: LD_INT 3
67905: PUSH
67906: LD_INT 1
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 2
67915: PUSH
67916: LD_INT 0
67918: PUSH
67919: EMPTY
67920: LIST
67921: LIST
67922: PUSH
67923: LD_INT 2
67925: PUSH
67926: LD_INT 1
67928: NEG
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: PUSH
67934: LD_INT 2
67936: PUSH
67937: LD_INT 2
67939: NEG
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 4
67947: PUSH
67948: LD_INT 2
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 4
67957: PUSH
67958: LD_INT 4
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 4
67967: PUSH
67968: LD_INT 3
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 5
67977: PUSH
67978: LD_INT 4
67980: PUSH
67981: EMPTY
67982: LIST
67983: LIST
67984: PUSH
67985: LD_INT 5
67987: PUSH
67988: LD_INT 5
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: LD_INT 4
67997: PUSH
67998: LD_INT 5
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: PUSH
68005: LD_INT 3
68007: PUSH
68008: LD_INT 4
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: PUSH
68015: LD_INT 3
68017: PUSH
68018: LD_INT 3
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: PUSH
68025: LD_INT 5
68027: PUSH
68028: LD_INT 3
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 3
68037: PUSH
68038: LD_INT 5
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: PUSH
68045: LD_INT 0
68047: PUSH
68048: LD_INT 3
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: PUSH
68055: LD_INT 0
68057: PUSH
68058: LD_INT 2
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: LD_INT 1
68067: PUSH
68068: LD_INT 3
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 1
68077: PUSH
68078: LD_INT 4
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: LD_INT 0
68087: PUSH
68088: LD_INT 4
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 1
68097: NEG
68098: PUSH
68099: LD_INT 3
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 1
68108: NEG
68109: PUSH
68110: LD_INT 2
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: PUSH
68117: LD_INT 2
68119: PUSH
68120: LD_INT 4
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: PUSH
68127: LD_INT 2
68129: NEG
68130: PUSH
68131: LD_INT 2
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_INT 4
68140: NEG
68141: PUSH
68142: LD_INT 0
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 4
68151: NEG
68152: PUSH
68153: LD_INT 1
68155: NEG
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: LD_INT 3
68163: NEG
68164: PUSH
68165: LD_INT 0
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 3
68174: NEG
68175: PUSH
68176: LD_INT 1
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 4
68185: NEG
68186: PUSH
68187: LD_INT 1
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 5
68196: NEG
68197: PUSH
68198: LD_INT 0
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: LD_INT 5
68207: NEG
68208: PUSH
68209: LD_INT 1
68211: NEG
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 5
68219: NEG
68220: PUSH
68221: LD_INT 2
68223: NEG
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PUSH
68229: LD_INT 3
68231: NEG
68232: PUSH
68233: LD_INT 2
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: LIST
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: ST_TO_ADDR
// end ; end ;
68287: GO 68290
68289: POP
// case btype of b_depot , b_warehouse :
68290: LD_VAR 0 1
68294: PUSH
68295: LD_INT 0
68297: DOUBLE
68298: EQUAL
68299: IFTRUE 68309
68301: LD_INT 1
68303: DOUBLE
68304: EQUAL
68305: IFTRUE 68309
68307: GO 68510
68309: POP
// case nation of nation_american :
68310: LD_VAR 0 5
68314: PUSH
68315: LD_INT 1
68317: DOUBLE
68318: EQUAL
68319: IFTRUE 68323
68321: GO 68379
68323: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68324: LD_ADDR_VAR 0 9
68328: PUSH
68329: LD_VAR 0 11
68333: PUSH
68334: LD_VAR 0 12
68338: PUSH
68339: LD_VAR 0 13
68343: PUSH
68344: LD_VAR 0 14
68348: PUSH
68349: LD_VAR 0 15
68353: PUSH
68354: LD_VAR 0 16
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: PUSH
68367: LD_VAR 0 4
68371: PUSH
68372: LD_INT 1
68374: PLUS
68375: ARRAY
68376: ST_TO_ADDR
68377: GO 68508
68379: LD_INT 2
68381: DOUBLE
68382: EQUAL
68383: IFTRUE 68387
68385: GO 68443
68387: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68388: LD_ADDR_VAR 0 9
68392: PUSH
68393: LD_VAR 0 17
68397: PUSH
68398: LD_VAR 0 18
68402: PUSH
68403: LD_VAR 0 19
68407: PUSH
68408: LD_VAR 0 20
68412: PUSH
68413: LD_VAR 0 21
68417: PUSH
68418: LD_VAR 0 22
68422: PUSH
68423: EMPTY
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: PUSH
68431: LD_VAR 0 4
68435: PUSH
68436: LD_INT 1
68438: PLUS
68439: ARRAY
68440: ST_TO_ADDR
68441: GO 68508
68443: LD_INT 3
68445: DOUBLE
68446: EQUAL
68447: IFTRUE 68451
68449: GO 68507
68451: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68452: LD_ADDR_VAR 0 9
68456: PUSH
68457: LD_VAR 0 23
68461: PUSH
68462: LD_VAR 0 24
68466: PUSH
68467: LD_VAR 0 25
68471: PUSH
68472: LD_VAR 0 26
68476: PUSH
68477: LD_VAR 0 27
68481: PUSH
68482: LD_VAR 0 28
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: PUSH
68495: LD_VAR 0 4
68499: PUSH
68500: LD_INT 1
68502: PLUS
68503: ARRAY
68504: ST_TO_ADDR
68505: GO 68508
68507: POP
68508: GO 69063
68510: LD_INT 2
68512: DOUBLE
68513: EQUAL
68514: IFTRUE 68524
68516: LD_INT 3
68518: DOUBLE
68519: EQUAL
68520: IFTRUE 68524
68522: GO 68580
68524: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68525: LD_ADDR_VAR 0 9
68529: PUSH
68530: LD_VAR 0 29
68534: PUSH
68535: LD_VAR 0 30
68539: PUSH
68540: LD_VAR 0 31
68544: PUSH
68545: LD_VAR 0 32
68549: PUSH
68550: LD_VAR 0 33
68554: PUSH
68555: LD_VAR 0 34
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: PUSH
68568: LD_VAR 0 4
68572: PUSH
68573: LD_INT 1
68575: PLUS
68576: ARRAY
68577: ST_TO_ADDR
68578: GO 69063
68580: LD_INT 16
68582: DOUBLE
68583: EQUAL
68584: IFTRUE 68642
68586: LD_INT 17
68588: DOUBLE
68589: EQUAL
68590: IFTRUE 68642
68592: LD_INT 18
68594: DOUBLE
68595: EQUAL
68596: IFTRUE 68642
68598: LD_INT 19
68600: DOUBLE
68601: EQUAL
68602: IFTRUE 68642
68604: LD_INT 22
68606: DOUBLE
68607: EQUAL
68608: IFTRUE 68642
68610: LD_INT 20
68612: DOUBLE
68613: EQUAL
68614: IFTRUE 68642
68616: LD_INT 21
68618: DOUBLE
68619: EQUAL
68620: IFTRUE 68642
68622: LD_INT 23
68624: DOUBLE
68625: EQUAL
68626: IFTRUE 68642
68628: LD_INT 24
68630: DOUBLE
68631: EQUAL
68632: IFTRUE 68642
68634: LD_INT 25
68636: DOUBLE
68637: EQUAL
68638: IFTRUE 68642
68640: GO 68698
68642: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68643: LD_ADDR_VAR 0 9
68647: PUSH
68648: LD_VAR 0 35
68652: PUSH
68653: LD_VAR 0 36
68657: PUSH
68658: LD_VAR 0 37
68662: PUSH
68663: LD_VAR 0 38
68667: PUSH
68668: LD_VAR 0 39
68672: PUSH
68673: LD_VAR 0 40
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: PUSH
68686: LD_VAR 0 4
68690: PUSH
68691: LD_INT 1
68693: PLUS
68694: ARRAY
68695: ST_TO_ADDR
68696: GO 69063
68698: LD_INT 6
68700: DOUBLE
68701: EQUAL
68702: IFTRUE 68754
68704: LD_INT 7
68706: DOUBLE
68707: EQUAL
68708: IFTRUE 68754
68710: LD_INT 8
68712: DOUBLE
68713: EQUAL
68714: IFTRUE 68754
68716: LD_INT 13
68718: DOUBLE
68719: EQUAL
68720: IFTRUE 68754
68722: LD_INT 12
68724: DOUBLE
68725: EQUAL
68726: IFTRUE 68754
68728: LD_INT 15
68730: DOUBLE
68731: EQUAL
68732: IFTRUE 68754
68734: LD_INT 11
68736: DOUBLE
68737: EQUAL
68738: IFTRUE 68754
68740: LD_INT 14
68742: DOUBLE
68743: EQUAL
68744: IFTRUE 68754
68746: LD_INT 10
68748: DOUBLE
68749: EQUAL
68750: IFTRUE 68754
68752: GO 68810
68754: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68755: LD_ADDR_VAR 0 9
68759: PUSH
68760: LD_VAR 0 41
68764: PUSH
68765: LD_VAR 0 42
68769: PUSH
68770: LD_VAR 0 43
68774: PUSH
68775: LD_VAR 0 44
68779: PUSH
68780: LD_VAR 0 45
68784: PUSH
68785: LD_VAR 0 46
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: PUSH
68798: LD_VAR 0 4
68802: PUSH
68803: LD_INT 1
68805: PLUS
68806: ARRAY
68807: ST_TO_ADDR
68808: GO 69063
68810: LD_INT 36
68812: DOUBLE
68813: EQUAL
68814: IFTRUE 68818
68816: GO 68874
68818: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68819: LD_ADDR_VAR 0 9
68823: PUSH
68824: LD_VAR 0 47
68828: PUSH
68829: LD_VAR 0 48
68833: PUSH
68834: LD_VAR 0 49
68838: PUSH
68839: LD_VAR 0 50
68843: PUSH
68844: LD_VAR 0 51
68848: PUSH
68849: LD_VAR 0 52
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: LIST
68861: PUSH
68862: LD_VAR 0 4
68866: PUSH
68867: LD_INT 1
68869: PLUS
68870: ARRAY
68871: ST_TO_ADDR
68872: GO 69063
68874: LD_INT 4
68876: DOUBLE
68877: EQUAL
68878: IFTRUE 68900
68880: LD_INT 5
68882: DOUBLE
68883: EQUAL
68884: IFTRUE 68900
68886: LD_INT 34
68888: DOUBLE
68889: EQUAL
68890: IFTRUE 68900
68892: LD_INT 37
68894: DOUBLE
68895: EQUAL
68896: IFTRUE 68900
68898: GO 68956
68900: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68901: LD_ADDR_VAR 0 9
68905: PUSH
68906: LD_VAR 0 53
68910: PUSH
68911: LD_VAR 0 54
68915: PUSH
68916: LD_VAR 0 55
68920: PUSH
68921: LD_VAR 0 56
68925: PUSH
68926: LD_VAR 0 57
68930: PUSH
68931: LD_VAR 0 58
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: PUSH
68944: LD_VAR 0 4
68948: PUSH
68949: LD_INT 1
68951: PLUS
68952: ARRAY
68953: ST_TO_ADDR
68954: GO 69063
68956: LD_INT 31
68958: DOUBLE
68959: EQUAL
68960: IFTRUE 69006
68962: LD_INT 32
68964: DOUBLE
68965: EQUAL
68966: IFTRUE 69006
68968: LD_INT 33
68970: DOUBLE
68971: EQUAL
68972: IFTRUE 69006
68974: LD_INT 27
68976: DOUBLE
68977: EQUAL
68978: IFTRUE 69006
68980: LD_INT 26
68982: DOUBLE
68983: EQUAL
68984: IFTRUE 69006
68986: LD_INT 28
68988: DOUBLE
68989: EQUAL
68990: IFTRUE 69006
68992: LD_INT 29
68994: DOUBLE
68995: EQUAL
68996: IFTRUE 69006
68998: LD_INT 30
69000: DOUBLE
69001: EQUAL
69002: IFTRUE 69006
69004: GO 69062
69006: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69007: LD_ADDR_VAR 0 9
69011: PUSH
69012: LD_VAR 0 59
69016: PUSH
69017: LD_VAR 0 60
69021: PUSH
69022: LD_VAR 0 61
69026: PUSH
69027: LD_VAR 0 62
69031: PUSH
69032: LD_VAR 0 63
69036: PUSH
69037: LD_VAR 0 64
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: LIST
69048: LIST
69049: PUSH
69050: LD_VAR 0 4
69054: PUSH
69055: LD_INT 1
69057: PLUS
69058: ARRAY
69059: ST_TO_ADDR
69060: GO 69063
69062: POP
// temp_list2 = [ ] ;
69063: LD_ADDR_VAR 0 10
69067: PUSH
69068: EMPTY
69069: ST_TO_ADDR
// for i in temp_list do
69070: LD_ADDR_VAR 0 8
69074: PUSH
69075: LD_VAR 0 9
69079: PUSH
69080: FOR_IN
69081: IFFALSE 69133
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69083: LD_ADDR_VAR 0 10
69087: PUSH
69088: LD_VAR 0 10
69092: PUSH
69093: LD_VAR 0 8
69097: PUSH
69098: LD_INT 1
69100: ARRAY
69101: PUSH
69102: LD_VAR 0 2
69106: PLUS
69107: PUSH
69108: LD_VAR 0 8
69112: PUSH
69113: LD_INT 2
69115: ARRAY
69116: PUSH
69117: LD_VAR 0 3
69121: PLUS
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: EMPTY
69128: LIST
69129: ADD
69130: ST_TO_ADDR
69131: GO 69080
69133: POP
69134: POP
// result = temp_list2 ;
69135: LD_ADDR_VAR 0 7
69139: PUSH
69140: LD_VAR 0 10
69144: ST_TO_ADDR
// end ;
69145: LD_VAR 0 7
69149: RET
// export function EnemyInRange ( unit , dist ) ; begin
69150: LD_INT 0
69152: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69153: LD_ADDR_VAR 0 3
69157: PUSH
69158: LD_VAR 0 1
69162: PPUSH
69163: CALL_OW 255
69167: PPUSH
69168: LD_VAR 0 1
69172: PPUSH
69173: CALL_OW 250
69177: PPUSH
69178: LD_VAR 0 1
69182: PPUSH
69183: CALL_OW 251
69187: PPUSH
69188: LD_VAR 0 2
69192: PPUSH
69193: CALL 42523 0 4
69197: PUSH
69198: LD_INT 4
69200: ARRAY
69201: ST_TO_ADDR
// end ;
69202: LD_VAR 0 3
69206: RET
// export function PlayerSeeMe ( unit ) ; begin
69207: LD_INT 0
69209: PPUSH
// result := See ( your_side , unit ) ;
69210: LD_ADDR_VAR 0 2
69214: PUSH
69215: LD_OWVAR 2
69219: PPUSH
69220: LD_VAR 0 1
69224: PPUSH
69225: CALL_OW 292
69229: ST_TO_ADDR
// end ;
69230: LD_VAR 0 2
69234: RET
// export function ReverseDir ( unit ) ; begin
69235: LD_INT 0
69237: PPUSH
// if not unit then
69238: LD_VAR 0 1
69242: NOT
69243: IFFALSE 69247
// exit ;
69245: GO 69270
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69247: LD_ADDR_VAR 0 2
69251: PUSH
69252: LD_VAR 0 1
69256: PPUSH
69257: CALL_OW 254
69261: PUSH
69262: LD_INT 3
69264: PLUS
69265: PUSH
69266: LD_INT 6
69268: MOD
69269: ST_TO_ADDR
// end ;
69270: LD_VAR 0 2
69274: RET
// export function ReverseArray ( array ) ; var i ; begin
69275: LD_INT 0
69277: PPUSH
69278: PPUSH
// if not array then
69279: LD_VAR 0 1
69283: NOT
69284: IFFALSE 69288
// exit ;
69286: GO 69343
// result := [ ] ;
69288: LD_ADDR_VAR 0 2
69292: PUSH
69293: EMPTY
69294: ST_TO_ADDR
// for i := array downto 1 do
69295: LD_ADDR_VAR 0 3
69299: PUSH
69300: DOUBLE
69301: LD_VAR 0 1
69305: INC
69306: ST_TO_ADDR
69307: LD_INT 1
69309: PUSH
69310: FOR_DOWNTO
69311: IFFALSE 69341
// result := Join ( result , array [ i ] ) ;
69313: LD_ADDR_VAR 0 2
69317: PUSH
69318: LD_VAR 0 2
69322: PPUSH
69323: LD_VAR 0 1
69327: PUSH
69328: LD_VAR 0 3
69332: ARRAY
69333: PPUSH
69334: CALL 74008 0 2
69338: ST_TO_ADDR
69339: GO 69310
69341: POP
69342: POP
// end ;
69343: LD_VAR 0 2
69347: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
69348: LD_INT 0
69350: PPUSH
69351: PPUSH
69352: PPUSH
69353: PPUSH
69354: PPUSH
69355: PPUSH
// if not unit or not hexes then
69356: LD_VAR 0 1
69360: NOT
69361: PUSH
69362: LD_VAR 0 2
69366: NOT
69367: OR
69368: IFFALSE 69372
// exit ;
69370: GO 69495
// dist := 9999 ;
69372: LD_ADDR_VAR 0 5
69376: PUSH
69377: LD_INT 9999
69379: ST_TO_ADDR
// for i = 1 to hexes do
69380: LD_ADDR_VAR 0 4
69384: PUSH
69385: DOUBLE
69386: LD_INT 1
69388: DEC
69389: ST_TO_ADDR
69390: LD_VAR 0 2
69394: PUSH
69395: FOR_TO
69396: IFFALSE 69483
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69398: LD_ADDR_VAR 0 6
69402: PUSH
69403: LD_VAR 0 1
69407: PPUSH
69408: LD_VAR 0 2
69412: PUSH
69413: LD_VAR 0 4
69417: ARRAY
69418: PUSH
69419: LD_INT 1
69421: ARRAY
69422: PPUSH
69423: LD_VAR 0 2
69427: PUSH
69428: LD_VAR 0 4
69432: ARRAY
69433: PUSH
69434: LD_INT 2
69436: ARRAY
69437: PPUSH
69438: CALL_OW 297
69442: ST_TO_ADDR
// if tdist < dist then
69443: LD_VAR 0 6
69447: PUSH
69448: LD_VAR 0 5
69452: LESS
69453: IFFALSE 69481
// begin hex := hexes [ i ] ;
69455: LD_ADDR_VAR 0 8
69459: PUSH
69460: LD_VAR 0 2
69464: PUSH
69465: LD_VAR 0 4
69469: ARRAY
69470: ST_TO_ADDR
// dist := tdist ;
69471: LD_ADDR_VAR 0 5
69475: PUSH
69476: LD_VAR 0 6
69480: ST_TO_ADDR
// end ; end ;
69481: GO 69395
69483: POP
69484: POP
// result := hex ;
69485: LD_ADDR_VAR 0 3
69489: PUSH
69490: LD_VAR 0 8
69494: ST_TO_ADDR
// end ;
69495: LD_VAR 0 3
69499: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69500: LD_INT 0
69502: PPUSH
69503: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69504: LD_VAR 0 1
69508: NOT
69509: PUSH
69510: LD_VAR 0 1
69514: PUSH
69515: LD_INT 21
69517: PUSH
69518: LD_INT 2
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: PUSH
69525: LD_INT 23
69527: PUSH
69528: LD_INT 2
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: PPUSH
69539: CALL_OW 69
69543: IN
69544: NOT
69545: OR
69546: IFFALSE 69550
// exit ;
69548: GO 69597
// for i = 1 to 3 do
69550: LD_ADDR_VAR 0 3
69554: PUSH
69555: DOUBLE
69556: LD_INT 1
69558: DEC
69559: ST_TO_ADDR
69560: LD_INT 3
69562: PUSH
69563: FOR_TO
69564: IFFALSE 69595
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69566: LD_VAR 0 1
69570: PPUSH
69571: CALL_OW 250
69575: PPUSH
69576: LD_VAR 0 1
69580: PPUSH
69581: CALL_OW 251
69585: PPUSH
69586: LD_INT 1
69588: PPUSH
69589: CALL_OW 453
69593: GO 69563
69595: POP
69596: POP
// end ;
69597: LD_VAR 0 2
69601: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69602: LD_INT 0
69604: PPUSH
69605: PPUSH
69606: PPUSH
69607: PPUSH
69608: PPUSH
69609: PPUSH
// if not unit or not enemy_unit then
69610: LD_VAR 0 1
69614: NOT
69615: PUSH
69616: LD_VAR 0 2
69620: NOT
69621: OR
69622: IFFALSE 69626
// exit ;
69624: GO 70093
// if GetLives ( i ) < 250 then
69626: LD_VAR 0 4
69630: PPUSH
69631: CALL_OW 256
69635: PUSH
69636: LD_INT 250
69638: LESS
69639: IFFALSE 69652
// begin ComAutodestruct ( i ) ;
69641: LD_VAR 0 4
69645: PPUSH
69646: CALL 69500 0 1
// exit ;
69650: GO 70093
// end ; x := GetX ( enemy_unit ) ;
69652: LD_ADDR_VAR 0 7
69656: PUSH
69657: LD_VAR 0 2
69661: PPUSH
69662: CALL_OW 250
69666: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69667: LD_ADDR_VAR 0 8
69671: PUSH
69672: LD_VAR 0 2
69676: PPUSH
69677: CALL_OW 251
69681: ST_TO_ADDR
// if not x or not y then
69682: LD_VAR 0 7
69686: NOT
69687: PUSH
69688: LD_VAR 0 8
69692: NOT
69693: OR
69694: IFFALSE 69698
// exit ;
69696: GO 70093
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69698: LD_ADDR_VAR 0 6
69702: PUSH
69703: LD_VAR 0 7
69707: PPUSH
69708: LD_INT 0
69710: PPUSH
69711: LD_INT 4
69713: PPUSH
69714: CALL_OW 272
69718: PUSH
69719: LD_VAR 0 8
69723: PPUSH
69724: LD_INT 0
69726: PPUSH
69727: LD_INT 4
69729: PPUSH
69730: CALL_OW 273
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_VAR 0 7
69743: PPUSH
69744: LD_INT 1
69746: PPUSH
69747: LD_INT 4
69749: PPUSH
69750: CALL_OW 272
69754: PUSH
69755: LD_VAR 0 8
69759: PPUSH
69760: LD_INT 1
69762: PPUSH
69763: LD_INT 4
69765: PPUSH
69766: CALL_OW 273
69770: PUSH
69771: EMPTY
69772: LIST
69773: LIST
69774: PUSH
69775: LD_VAR 0 7
69779: PPUSH
69780: LD_INT 2
69782: PPUSH
69783: LD_INT 4
69785: PPUSH
69786: CALL_OW 272
69790: PUSH
69791: LD_VAR 0 8
69795: PPUSH
69796: LD_INT 2
69798: PPUSH
69799: LD_INT 4
69801: PPUSH
69802: CALL_OW 273
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: LD_VAR 0 7
69815: PPUSH
69816: LD_INT 3
69818: PPUSH
69819: LD_INT 4
69821: PPUSH
69822: CALL_OW 272
69826: PUSH
69827: LD_VAR 0 8
69831: PPUSH
69832: LD_INT 3
69834: PPUSH
69835: LD_INT 4
69837: PPUSH
69838: CALL_OW 273
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: PUSH
69847: LD_VAR 0 7
69851: PPUSH
69852: LD_INT 4
69854: PPUSH
69855: LD_INT 4
69857: PPUSH
69858: CALL_OW 272
69862: PUSH
69863: LD_VAR 0 8
69867: PPUSH
69868: LD_INT 4
69870: PPUSH
69871: LD_INT 4
69873: PPUSH
69874: CALL_OW 273
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: LD_VAR 0 7
69887: PPUSH
69888: LD_INT 5
69890: PPUSH
69891: LD_INT 4
69893: PPUSH
69894: CALL_OW 272
69898: PUSH
69899: LD_VAR 0 8
69903: PPUSH
69904: LD_INT 5
69906: PPUSH
69907: LD_INT 4
69909: PPUSH
69910: CALL_OW 273
69914: PUSH
69915: EMPTY
69916: LIST
69917: LIST
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: ST_TO_ADDR
// for i = tmp downto 1 do
69927: LD_ADDR_VAR 0 4
69931: PUSH
69932: DOUBLE
69933: LD_VAR 0 6
69937: INC
69938: ST_TO_ADDR
69939: LD_INT 1
69941: PUSH
69942: FOR_DOWNTO
69943: IFFALSE 70044
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69945: LD_VAR 0 6
69949: PUSH
69950: LD_VAR 0 4
69954: ARRAY
69955: PUSH
69956: LD_INT 1
69958: ARRAY
69959: PPUSH
69960: LD_VAR 0 6
69964: PUSH
69965: LD_VAR 0 4
69969: ARRAY
69970: PUSH
69971: LD_INT 2
69973: ARRAY
69974: PPUSH
69975: CALL_OW 488
69979: NOT
69980: PUSH
69981: LD_VAR 0 6
69985: PUSH
69986: LD_VAR 0 4
69990: ARRAY
69991: PUSH
69992: LD_INT 1
69994: ARRAY
69995: PPUSH
69996: LD_VAR 0 6
70000: PUSH
70001: LD_VAR 0 4
70005: ARRAY
70006: PUSH
70007: LD_INT 2
70009: ARRAY
70010: PPUSH
70011: CALL_OW 428
70015: PUSH
70016: LD_INT 0
70018: NONEQUAL
70019: OR
70020: IFFALSE 70042
// tmp := Delete ( tmp , i ) ;
70022: LD_ADDR_VAR 0 6
70026: PUSH
70027: LD_VAR 0 6
70031: PPUSH
70032: LD_VAR 0 4
70036: PPUSH
70037: CALL_OW 3
70041: ST_TO_ADDR
70042: GO 69942
70044: POP
70045: POP
// j := GetClosestHex ( unit , tmp ) ;
70046: LD_ADDR_VAR 0 5
70050: PUSH
70051: LD_VAR 0 1
70055: PPUSH
70056: LD_VAR 0 6
70060: PPUSH
70061: CALL 69348 0 2
70065: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70066: LD_VAR 0 1
70070: PPUSH
70071: LD_VAR 0 5
70075: PUSH
70076: LD_INT 1
70078: ARRAY
70079: PPUSH
70080: LD_VAR 0 5
70084: PUSH
70085: LD_INT 2
70087: ARRAY
70088: PPUSH
70089: CALL_OW 111
// end ;
70093: LD_VAR 0 3
70097: RET
// export function PrepareApemanSoldier ( ) ; begin
70098: LD_INT 0
70100: PPUSH
// uc_nation := 0 ;
70101: LD_ADDR_OWVAR 21
70105: PUSH
70106: LD_INT 0
70108: ST_TO_ADDR
// hc_sex := sex_male ;
70109: LD_ADDR_OWVAR 27
70113: PUSH
70114: LD_INT 1
70116: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
70117: LD_ADDR_OWVAR 28
70121: PUSH
70122: LD_INT 15
70124: ST_TO_ADDR
// hc_gallery :=  ;
70125: LD_ADDR_OWVAR 33
70129: PUSH
70130: LD_STRING 
70132: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70133: LD_ADDR_OWVAR 31
70137: PUSH
70138: LD_INT 0
70140: PPUSH
70141: LD_INT 3
70143: PPUSH
70144: CALL_OW 12
70148: PUSH
70149: LD_INT 0
70151: PPUSH
70152: LD_INT 3
70154: PPUSH
70155: CALL_OW 12
70159: PUSH
70160: LD_INT 0
70162: PUSH
70163: LD_INT 0
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: ST_TO_ADDR
// end ;
70172: LD_VAR 0 1
70176: RET
// export function PrepareApemanEngineer ( ) ; begin
70177: LD_INT 0
70179: PPUSH
// uc_nation := 0 ;
70180: LD_ADDR_OWVAR 21
70184: PUSH
70185: LD_INT 0
70187: ST_TO_ADDR
// hc_sex := sex_male ;
70188: LD_ADDR_OWVAR 27
70192: PUSH
70193: LD_INT 1
70195: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
70196: LD_ADDR_OWVAR 28
70200: PUSH
70201: LD_INT 16
70203: ST_TO_ADDR
// hc_gallery :=  ;
70204: LD_ADDR_OWVAR 33
70208: PUSH
70209: LD_STRING 
70211: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70212: LD_ADDR_OWVAR 31
70216: PUSH
70217: LD_INT 0
70219: PPUSH
70220: LD_INT 3
70222: PPUSH
70223: CALL_OW 12
70227: PUSH
70228: LD_INT 0
70230: PPUSH
70231: LD_INT 3
70233: PPUSH
70234: CALL_OW 12
70238: PUSH
70239: LD_INT 0
70241: PUSH
70242: LD_INT 0
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: ST_TO_ADDR
// end ;
70251: LD_VAR 0 1
70255: RET
// export function PrepareApeman ( agressivity ) ; begin
70256: LD_INT 0
70258: PPUSH
// uc_side := 0 ;
70259: LD_ADDR_OWVAR 20
70263: PUSH
70264: LD_INT 0
70266: ST_TO_ADDR
// uc_nation := 0 ;
70267: LD_ADDR_OWVAR 21
70271: PUSH
70272: LD_INT 0
70274: ST_TO_ADDR
// hc_sex := sex_male ;
70275: LD_ADDR_OWVAR 27
70279: PUSH
70280: LD_INT 1
70282: ST_TO_ADDR
// hc_class := class_apeman ;
70283: LD_ADDR_OWVAR 28
70287: PUSH
70288: LD_INT 12
70290: ST_TO_ADDR
// hc_gallery :=  ;
70291: LD_ADDR_OWVAR 33
70295: PUSH
70296: LD_STRING 
70298: ST_TO_ADDR
// if agressivity = 0 then
70299: LD_VAR 0 1
70303: PUSH
70304: LD_INT 0
70306: EQUAL
70307: IFFALSE 70319
// hc_agressivity := 0 else
70309: LD_ADDR_OWVAR 35
70313: PUSH
70314: LD_INT 0
70316: ST_TO_ADDR
70317: GO 70340
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70319: LD_ADDR_OWVAR 35
70323: PUSH
70324: LD_VAR 0 1
70328: NEG
70329: PPUSH
70330: LD_VAR 0 1
70334: PPUSH
70335: CALL_OW 12
70339: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
70340: LD_ADDR_OWVAR 31
70344: PUSH
70345: LD_INT 0
70347: PPUSH
70348: LD_INT 3
70350: PPUSH
70351: CALL_OW 12
70355: PUSH
70356: LD_INT 0
70358: PPUSH
70359: LD_INT 3
70361: PPUSH
70362: CALL_OW 12
70366: PUSH
70367: LD_INT 0
70369: PUSH
70370: LD_INT 0
70372: PUSH
70373: EMPTY
70374: LIST
70375: LIST
70376: LIST
70377: LIST
70378: ST_TO_ADDR
// end ;
70379: LD_VAR 0 2
70383: RET
// export function PrepareTiger ( agressivity ) ; begin
70384: LD_INT 0
70386: PPUSH
// uc_side := 0 ;
70387: LD_ADDR_OWVAR 20
70391: PUSH
70392: LD_INT 0
70394: ST_TO_ADDR
// uc_nation := 0 ;
70395: LD_ADDR_OWVAR 21
70399: PUSH
70400: LD_INT 0
70402: ST_TO_ADDR
// hc_class := class_tiger ;
70403: LD_ADDR_OWVAR 28
70407: PUSH
70408: LD_INT 14
70410: ST_TO_ADDR
// hc_gallery :=  ;
70411: LD_ADDR_OWVAR 33
70415: PUSH
70416: LD_STRING 
70418: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
70419: LD_ADDR_OWVAR 35
70423: PUSH
70424: LD_VAR 0 1
70428: NEG
70429: PPUSH
70430: LD_VAR 0 1
70434: PPUSH
70435: CALL_OW 12
70439: ST_TO_ADDR
// end ;
70440: LD_VAR 0 2
70444: RET
// export function PrepareEnchidna ( ) ; begin
70445: LD_INT 0
70447: PPUSH
// uc_side := 0 ;
70448: LD_ADDR_OWVAR 20
70452: PUSH
70453: LD_INT 0
70455: ST_TO_ADDR
// uc_nation := 0 ;
70456: LD_ADDR_OWVAR 21
70460: PUSH
70461: LD_INT 0
70463: ST_TO_ADDR
// hc_class := class_baggie ;
70464: LD_ADDR_OWVAR 28
70468: PUSH
70469: LD_INT 13
70471: ST_TO_ADDR
// hc_gallery :=  ;
70472: LD_ADDR_OWVAR 33
70476: PUSH
70477: LD_STRING 
70479: ST_TO_ADDR
// end ;
70480: LD_VAR 0 1
70484: RET
// export function PrepareFrog ( ) ; begin
70485: LD_INT 0
70487: PPUSH
// uc_side := 0 ;
70488: LD_ADDR_OWVAR 20
70492: PUSH
70493: LD_INT 0
70495: ST_TO_ADDR
// uc_nation := 0 ;
70496: LD_ADDR_OWVAR 21
70500: PUSH
70501: LD_INT 0
70503: ST_TO_ADDR
// hc_class := class_frog ;
70504: LD_ADDR_OWVAR 28
70508: PUSH
70509: LD_INT 19
70511: ST_TO_ADDR
// hc_gallery :=  ;
70512: LD_ADDR_OWVAR 33
70516: PUSH
70517: LD_STRING 
70519: ST_TO_ADDR
// end ;
70520: LD_VAR 0 1
70524: RET
// export function PrepareFish ( ) ; begin
70525: LD_INT 0
70527: PPUSH
// uc_side := 0 ;
70528: LD_ADDR_OWVAR 20
70532: PUSH
70533: LD_INT 0
70535: ST_TO_ADDR
// uc_nation := 0 ;
70536: LD_ADDR_OWVAR 21
70540: PUSH
70541: LD_INT 0
70543: ST_TO_ADDR
// hc_class := class_fish ;
70544: LD_ADDR_OWVAR 28
70548: PUSH
70549: LD_INT 20
70551: ST_TO_ADDR
// hc_gallery :=  ;
70552: LD_ADDR_OWVAR 33
70556: PUSH
70557: LD_STRING 
70559: ST_TO_ADDR
// end ;
70560: LD_VAR 0 1
70564: RET
// export function PrepareBird ( ) ; begin
70565: LD_INT 0
70567: PPUSH
// uc_side := 0 ;
70568: LD_ADDR_OWVAR 20
70572: PUSH
70573: LD_INT 0
70575: ST_TO_ADDR
// uc_nation := 0 ;
70576: LD_ADDR_OWVAR 21
70580: PUSH
70581: LD_INT 0
70583: ST_TO_ADDR
// hc_class := class_phororhacos ;
70584: LD_ADDR_OWVAR 28
70588: PUSH
70589: LD_INT 18
70591: ST_TO_ADDR
// hc_gallery :=  ;
70592: LD_ADDR_OWVAR 33
70596: PUSH
70597: LD_STRING 
70599: ST_TO_ADDR
// end ;
70600: LD_VAR 0 1
70604: RET
// export function PrepareHorse ( ) ; begin
70605: LD_INT 0
70607: PPUSH
// uc_side := 0 ;
70608: LD_ADDR_OWVAR 20
70612: PUSH
70613: LD_INT 0
70615: ST_TO_ADDR
// uc_nation := 0 ;
70616: LD_ADDR_OWVAR 21
70620: PUSH
70621: LD_INT 0
70623: ST_TO_ADDR
// hc_class := class_horse ;
70624: LD_ADDR_OWVAR 28
70628: PUSH
70629: LD_INT 21
70631: ST_TO_ADDR
// hc_gallery :=  ;
70632: LD_ADDR_OWVAR 33
70636: PUSH
70637: LD_STRING 
70639: ST_TO_ADDR
// end ;
70640: LD_VAR 0 1
70644: RET
// export function PrepareMastodont ( ) ; begin
70645: LD_INT 0
70647: PPUSH
// uc_side := 0 ;
70648: LD_ADDR_OWVAR 20
70652: PUSH
70653: LD_INT 0
70655: ST_TO_ADDR
// uc_nation := 0 ;
70656: LD_ADDR_OWVAR 21
70660: PUSH
70661: LD_INT 0
70663: ST_TO_ADDR
// vc_chassis := class_mastodont ;
70664: LD_ADDR_OWVAR 37
70668: PUSH
70669: LD_INT 31
70671: ST_TO_ADDR
// vc_control := control_rider ;
70672: LD_ADDR_OWVAR 38
70676: PUSH
70677: LD_INT 4
70679: ST_TO_ADDR
// end ;
70680: LD_VAR 0 1
70684: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70685: LD_INT 0
70687: PPUSH
70688: PPUSH
70689: PPUSH
// uc_side = 0 ;
70690: LD_ADDR_OWVAR 20
70694: PUSH
70695: LD_INT 0
70697: ST_TO_ADDR
// uc_nation = 0 ;
70698: LD_ADDR_OWVAR 21
70702: PUSH
70703: LD_INT 0
70705: ST_TO_ADDR
// InitHc_All ( ) ;
70706: CALL_OW 584
// InitVc ;
70710: CALL_OW 20
// if mastodonts then
70714: LD_VAR 0 6
70718: IFFALSE 70785
// for i = 1 to mastodonts do
70720: LD_ADDR_VAR 0 11
70724: PUSH
70725: DOUBLE
70726: LD_INT 1
70728: DEC
70729: ST_TO_ADDR
70730: LD_VAR 0 6
70734: PUSH
70735: FOR_TO
70736: IFFALSE 70783
// begin vc_chassis := 31 ;
70738: LD_ADDR_OWVAR 37
70742: PUSH
70743: LD_INT 31
70745: ST_TO_ADDR
// vc_control := control_rider ;
70746: LD_ADDR_OWVAR 38
70750: PUSH
70751: LD_INT 4
70753: ST_TO_ADDR
// animal := CreateVehicle ;
70754: LD_ADDR_VAR 0 12
70758: PUSH
70759: CALL_OW 45
70763: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70764: LD_VAR 0 12
70768: PPUSH
70769: LD_VAR 0 8
70773: PPUSH
70774: LD_INT 0
70776: PPUSH
70777: CALL 72913 0 3
// end ;
70781: GO 70735
70783: POP
70784: POP
// if horses then
70785: LD_VAR 0 5
70789: IFFALSE 70856
// for i = 1 to horses do
70791: LD_ADDR_VAR 0 11
70795: PUSH
70796: DOUBLE
70797: LD_INT 1
70799: DEC
70800: ST_TO_ADDR
70801: LD_VAR 0 5
70805: PUSH
70806: FOR_TO
70807: IFFALSE 70854
// begin hc_class := 21 ;
70809: LD_ADDR_OWVAR 28
70813: PUSH
70814: LD_INT 21
70816: ST_TO_ADDR
// hc_gallery :=  ;
70817: LD_ADDR_OWVAR 33
70821: PUSH
70822: LD_STRING 
70824: ST_TO_ADDR
// animal := CreateHuman ;
70825: LD_ADDR_VAR 0 12
70829: PUSH
70830: CALL_OW 44
70834: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70835: LD_VAR 0 12
70839: PPUSH
70840: LD_VAR 0 8
70844: PPUSH
70845: LD_INT 0
70847: PPUSH
70848: CALL 72913 0 3
// end ;
70852: GO 70806
70854: POP
70855: POP
// if birds then
70856: LD_VAR 0 1
70860: IFFALSE 70927
// for i = 1 to birds do
70862: LD_ADDR_VAR 0 11
70866: PUSH
70867: DOUBLE
70868: LD_INT 1
70870: DEC
70871: ST_TO_ADDR
70872: LD_VAR 0 1
70876: PUSH
70877: FOR_TO
70878: IFFALSE 70925
// begin hc_class := 18 ;
70880: LD_ADDR_OWVAR 28
70884: PUSH
70885: LD_INT 18
70887: ST_TO_ADDR
// hc_gallery =  ;
70888: LD_ADDR_OWVAR 33
70892: PUSH
70893: LD_STRING 
70895: ST_TO_ADDR
// animal := CreateHuman ;
70896: LD_ADDR_VAR 0 12
70900: PUSH
70901: CALL_OW 44
70905: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70906: LD_VAR 0 12
70910: PPUSH
70911: LD_VAR 0 8
70915: PPUSH
70916: LD_INT 0
70918: PPUSH
70919: CALL 72913 0 3
// end ;
70923: GO 70877
70925: POP
70926: POP
// if tigers then
70927: LD_VAR 0 2
70931: IFFALSE 71015
// for i = 1 to tigers do
70933: LD_ADDR_VAR 0 11
70937: PUSH
70938: DOUBLE
70939: LD_INT 1
70941: DEC
70942: ST_TO_ADDR
70943: LD_VAR 0 2
70947: PUSH
70948: FOR_TO
70949: IFFALSE 71013
// begin hc_class = class_tiger ;
70951: LD_ADDR_OWVAR 28
70955: PUSH
70956: LD_INT 14
70958: ST_TO_ADDR
// hc_gallery =  ;
70959: LD_ADDR_OWVAR 33
70963: PUSH
70964: LD_STRING 
70966: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70967: LD_ADDR_OWVAR 35
70971: PUSH
70972: LD_INT 7
70974: NEG
70975: PPUSH
70976: LD_INT 7
70978: PPUSH
70979: CALL_OW 12
70983: ST_TO_ADDR
// animal := CreateHuman ;
70984: LD_ADDR_VAR 0 12
70988: PUSH
70989: CALL_OW 44
70993: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70994: LD_VAR 0 12
70998: PPUSH
70999: LD_VAR 0 8
71003: PPUSH
71004: LD_INT 0
71006: PPUSH
71007: CALL 72913 0 3
// end ;
71011: GO 70948
71013: POP
71014: POP
// if apemans then
71015: LD_VAR 0 3
71019: IFFALSE 71142
// for i = 1 to apemans do
71021: LD_ADDR_VAR 0 11
71025: PUSH
71026: DOUBLE
71027: LD_INT 1
71029: DEC
71030: ST_TO_ADDR
71031: LD_VAR 0 3
71035: PUSH
71036: FOR_TO
71037: IFFALSE 71140
// begin hc_class = class_apeman ;
71039: LD_ADDR_OWVAR 28
71043: PUSH
71044: LD_INT 12
71046: ST_TO_ADDR
// hc_gallery =  ;
71047: LD_ADDR_OWVAR 33
71051: PUSH
71052: LD_STRING 
71054: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
71055: LD_ADDR_OWVAR 35
71059: PUSH
71060: LD_INT 2
71062: NEG
71063: PPUSH
71064: LD_INT 2
71066: PPUSH
71067: CALL_OW 12
71071: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71072: LD_ADDR_OWVAR 31
71076: PUSH
71077: LD_INT 1
71079: PPUSH
71080: LD_INT 3
71082: PPUSH
71083: CALL_OW 12
71087: PUSH
71088: LD_INT 1
71090: PPUSH
71091: LD_INT 3
71093: PPUSH
71094: CALL_OW 12
71098: PUSH
71099: LD_INT 0
71101: PUSH
71102: LD_INT 0
71104: PUSH
71105: EMPTY
71106: LIST
71107: LIST
71108: LIST
71109: LIST
71110: ST_TO_ADDR
// animal := CreateHuman ;
71111: LD_ADDR_VAR 0 12
71115: PUSH
71116: CALL_OW 44
71120: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71121: LD_VAR 0 12
71125: PPUSH
71126: LD_VAR 0 8
71130: PPUSH
71131: LD_INT 0
71133: PPUSH
71134: CALL 72913 0 3
// end ;
71138: GO 71036
71140: POP
71141: POP
// if enchidnas then
71142: LD_VAR 0 4
71146: IFFALSE 71213
// for i = 1 to enchidnas do
71148: LD_ADDR_VAR 0 11
71152: PUSH
71153: DOUBLE
71154: LD_INT 1
71156: DEC
71157: ST_TO_ADDR
71158: LD_VAR 0 4
71162: PUSH
71163: FOR_TO
71164: IFFALSE 71211
// begin hc_class = 13 ;
71166: LD_ADDR_OWVAR 28
71170: PUSH
71171: LD_INT 13
71173: ST_TO_ADDR
// hc_gallery =  ;
71174: LD_ADDR_OWVAR 33
71178: PUSH
71179: LD_STRING 
71181: ST_TO_ADDR
// animal := CreateHuman ;
71182: LD_ADDR_VAR 0 12
71186: PUSH
71187: CALL_OW 44
71191: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71192: LD_VAR 0 12
71196: PPUSH
71197: LD_VAR 0 8
71201: PPUSH
71202: LD_INT 0
71204: PPUSH
71205: CALL 72913 0 3
// end ;
71209: GO 71163
71211: POP
71212: POP
// if fishes then
71213: LD_VAR 0 7
71217: IFFALSE 71284
// for i = 1 to fishes do
71219: LD_ADDR_VAR 0 11
71223: PUSH
71224: DOUBLE
71225: LD_INT 1
71227: DEC
71228: ST_TO_ADDR
71229: LD_VAR 0 7
71233: PUSH
71234: FOR_TO
71235: IFFALSE 71282
// begin hc_class = 20 ;
71237: LD_ADDR_OWVAR 28
71241: PUSH
71242: LD_INT 20
71244: ST_TO_ADDR
// hc_gallery =  ;
71245: LD_ADDR_OWVAR 33
71249: PUSH
71250: LD_STRING 
71252: ST_TO_ADDR
// animal := CreateHuman ;
71253: LD_ADDR_VAR 0 12
71257: PUSH
71258: CALL_OW 44
71262: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71263: LD_VAR 0 12
71267: PPUSH
71268: LD_VAR 0 9
71272: PPUSH
71273: LD_INT 0
71275: PPUSH
71276: CALL 72913 0 3
// end ;
71280: GO 71234
71282: POP
71283: POP
// end ;
71284: LD_VAR 0 10
71288: RET
// export function WantHeal ( sci , unit ) ; begin
71289: LD_INT 0
71291: PPUSH
// if GetTaskList ( sci ) > 0 then
71292: LD_VAR 0 1
71296: PPUSH
71297: CALL_OW 437
71301: PUSH
71302: LD_INT 0
71304: GREATER
71305: IFFALSE 71375
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71307: LD_VAR 0 1
71311: PPUSH
71312: CALL_OW 437
71316: PUSH
71317: LD_INT 1
71319: ARRAY
71320: PUSH
71321: LD_INT 1
71323: ARRAY
71324: PUSH
71325: LD_STRING l
71327: EQUAL
71328: PUSH
71329: LD_VAR 0 1
71333: PPUSH
71334: CALL_OW 437
71338: PUSH
71339: LD_INT 1
71341: ARRAY
71342: PUSH
71343: LD_INT 4
71345: ARRAY
71346: PUSH
71347: LD_VAR 0 2
71351: EQUAL
71352: AND
71353: IFFALSE 71365
// result := true else
71355: LD_ADDR_VAR 0 3
71359: PUSH
71360: LD_INT 1
71362: ST_TO_ADDR
71363: GO 71373
// result := false ;
71365: LD_ADDR_VAR 0 3
71369: PUSH
71370: LD_INT 0
71372: ST_TO_ADDR
// end else
71373: GO 71383
// result := false ;
71375: LD_ADDR_VAR 0 3
71379: PUSH
71380: LD_INT 0
71382: ST_TO_ADDR
// end ;
71383: LD_VAR 0 3
71387: RET
// export function HealTarget ( sci ) ; begin
71388: LD_INT 0
71390: PPUSH
// if not sci then
71391: LD_VAR 0 1
71395: NOT
71396: IFFALSE 71400
// exit ;
71398: GO 71465
// result := 0 ;
71400: LD_ADDR_VAR 0 2
71404: PUSH
71405: LD_INT 0
71407: ST_TO_ADDR
// if GetTaskList ( sci ) then
71408: LD_VAR 0 1
71412: PPUSH
71413: CALL_OW 437
71417: IFFALSE 71465
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71419: LD_VAR 0 1
71423: PPUSH
71424: CALL_OW 437
71428: PUSH
71429: LD_INT 1
71431: ARRAY
71432: PUSH
71433: LD_INT 1
71435: ARRAY
71436: PUSH
71437: LD_STRING l
71439: EQUAL
71440: IFFALSE 71465
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71442: LD_ADDR_VAR 0 2
71446: PUSH
71447: LD_VAR 0 1
71451: PPUSH
71452: CALL_OW 437
71456: PUSH
71457: LD_INT 1
71459: ARRAY
71460: PUSH
71461: LD_INT 4
71463: ARRAY
71464: ST_TO_ADDR
// end ;
71465: LD_VAR 0 2
71469: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71470: LD_INT 0
71472: PPUSH
71473: PPUSH
71474: PPUSH
71475: PPUSH
// if not base_units then
71476: LD_VAR 0 1
71480: NOT
71481: IFFALSE 71485
// exit ;
71483: GO 71572
// result := false ;
71485: LD_ADDR_VAR 0 2
71489: PUSH
71490: LD_INT 0
71492: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71493: LD_ADDR_VAR 0 5
71497: PUSH
71498: LD_VAR 0 1
71502: PPUSH
71503: LD_INT 21
71505: PUSH
71506: LD_INT 3
71508: PUSH
71509: EMPTY
71510: LIST
71511: LIST
71512: PPUSH
71513: CALL_OW 72
71517: ST_TO_ADDR
// if not tmp then
71518: LD_VAR 0 5
71522: NOT
71523: IFFALSE 71527
// exit ;
71525: GO 71572
// for i in tmp do
71527: LD_ADDR_VAR 0 3
71531: PUSH
71532: LD_VAR 0 5
71536: PUSH
71537: FOR_IN
71538: IFFALSE 71570
// begin result := EnemyInRange ( i , 22 ) ;
71540: LD_ADDR_VAR 0 2
71544: PUSH
71545: LD_VAR 0 3
71549: PPUSH
71550: LD_INT 22
71552: PPUSH
71553: CALL 69150 0 2
71557: ST_TO_ADDR
// if result then
71558: LD_VAR 0 2
71562: IFFALSE 71568
// exit ;
71564: POP
71565: POP
71566: GO 71572
// end ;
71568: GO 71537
71570: POP
71571: POP
// end ;
71572: LD_VAR 0 2
71576: RET
// export function FilterByTag ( units , tag ) ; begin
71577: LD_INT 0
71579: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
71580: LD_ADDR_VAR 0 3
71584: PUSH
71585: LD_VAR 0 1
71589: PPUSH
71590: LD_INT 120
71592: PUSH
71593: LD_VAR 0 2
71597: PUSH
71598: EMPTY
71599: LIST
71600: LIST
71601: PPUSH
71602: CALL_OW 72
71606: ST_TO_ADDR
// end ;
71607: LD_VAR 0 3
71611: RET
// export function IsDriver ( un ) ; begin
71612: LD_INT 0
71614: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71615: LD_ADDR_VAR 0 2
71619: PUSH
71620: LD_VAR 0 1
71624: PUSH
71625: LD_INT 55
71627: PUSH
71628: EMPTY
71629: LIST
71630: PPUSH
71631: CALL_OW 69
71635: IN
71636: ST_TO_ADDR
// end ;
71637: LD_VAR 0 2
71641: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71642: LD_INT 0
71644: PPUSH
71645: PPUSH
// list := [ ] ;
71646: LD_ADDR_VAR 0 5
71650: PUSH
71651: EMPTY
71652: ST_TO_ADDR
// case d of 0 :
71653: LD_VAR 0 3
71657: PUSH
71658: LD_INT 0
71660: DOUBLE
71661: EQUAL
71662: IFTRUE 71666
71664: GO 71799
71666: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71667: LD_ADDR_VAR 0 5
71671: PUSH
71672: LD_VAR 0 1
71676: PUSH
71677: LD_INT 4
71679: MINUS
71680: PUSH
71681: LD_VAR 0 2
71685: PUSH
71686: LD_INT 4
71688: MINUS
71689: PUSH
71690: LD_INT 2
71692: PUSH
71693: EMPTY
71694: LIST
71695: LIST
71696: LIST
71697: PUSH
71698: LD_VAR 0 1
71702: PUSH
71703: LD_INT 3
71705: MINUS
71706: PUSH
71707: LD_VAR 0 2
71711: PUSH
71712: LD_INT 1
71714: PUSH
71715: EMPTY
71716: LIST
71717: LIST
71718: LIST
71719: PUSH
71720: LD_VAR 0 1
71724: PUSH
71725: LD_INT 4
71727: PLUS
71728: PUSH
71729: LD_VAR 0 2
71733: PUSH
71734: LD_INT 4
71736: PUSH
71737: EMPTY
71738: LIST
71739: LIST
71740: LIST
71741: PUSH
71742: LD_VAR 0 1
71746: PUSH
71747: LD_INT 3
71749: PLUS
71750: PUSH
71751: LD_VAR 0 2
71755: PUSH
71756: LD_INT 3
71758: PLUS
71759: PUSH
71760: LD_INT 5
71762: PUSH
71763: EMPTY
71764: LIST
71765: LIST
71766: LIST
71767: PUSH
71768: LD_VAR 0 1
71772: PUSH
71773: LD_VAR 0 2
71777: PUSH
71778: LD_INT 4
71780: PLUS
71781: PUSH
71782: LD_INT 0
71784: PUSH
71785: EMPTY
71786: LIST
71787: LIST
71788: LIST
71789: PUSH
71790: EMPTY
71791: LIST
71792: LIST
71793: LIST
71794: LIST
71795: LIST
71796: ST_TO_ADDR
// end ; 1 :
71797: GO 72497
71799: LD_INT 1
71801: DOUBLE
71802: EQUAL
71803: IFTRUE 71807
71805: GO 71940
71807: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71808: LD_ADDR_VAR 0 5
71812: PUSH
71813: LD_VAR 0 1
71817: PUSH
71818: LD_VAR 0 2
71822: PUSH
71823: LD_INT 4
71825: MINUS
71826: PUSH
71827: LD_INT 3
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: LIST
71834: PUSH
71835: LD_VAR 0 1
71839: PUSH
71840: LD_INT 3
71842: MINUS
71843: PUSH
71844: LD_VAR 0 2
71848: PUSH
71849: LD_INT 3
71851: MINUS
71852: PUSH
71853: LD_INT 2
71855: PUSH
71856: EMPTY
71857: LIST
71858: LIST
71859: LIST
71860: PUSH
71861: LD_VAR 0 1
71865: PUSH
71866: LD_INT 4
71868: MINUS
71869: PUSH
71870: LD_VAR 0 2
71874: PUSH
71875: LD_INT 1
71877: PUSH
71878: EMPTY
71879: LIST
71880: LIST
71881: LIST
71882: PUSH
71883: LD_VAR 0 1
71887: PUSH
71888: LD_VAR 0 2
71892: PUSH
71893: LD_INT 3
71895: PLUS
71896: PUSH
71897: LD_INT 0
71899: PUSH
71900: EMPTY
71901: LIST
71902: LIST
71903: LIST
71904: PUSH
71905: LD_VAR 0 1
71909: PUSH
71910: LD_INT 4
71912: PLUS
71913: PUSH
71914: LD_VAR 0 2
71918: PUSH
71919: LD_INT 4
71921: PLUS
71922: PUSH
71923: LD_INT 5
71925: PUSH
71926: EMPTY
71927: LIST
71928: LIST
71929: LIST
71930: PUSH
71931: EMPTY
71932: LIST
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: ST_TO_ADDR
// end ; 2 :
71938: GO 72497
71940: LD_INT 2
71942: DOUBLE
71943: EQUAL
71944: IFTRUE 71948
71946: GO 72077
71948: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71949: LD_ADDR_VAR 0 5
71953: PUSH
71954: LD_VAR 0 1
71958: PUSH
71959: LD_VAR 0 2
71963: PUSH
71964: LD_INT 3
71966: MINUS
71967: PUSH
71968: LD_INT 3
71970: PUSH
71971: EMPTY
71972: LIST
71973: LIST
71974: LIST
71975: PUSH
71976: LD_VAR 0 1
71980: PUSH
71981: LD_INT 4
71983: PLUS
71984: PUSH
71985: LD_VAR 0 2
71989: PUSH
71990: LD_INT 4
71992: PUSH
71993: EMPTY
71994: LIST
71995: LIST
71996: LIST
71997: PUSH
71998: LD_VAR 0 1
72002: PUSH
72003: LD_VAR 0 2
72007: PUSH
72008: LD_INT 4
72010: PLUS
72011: PUSH
72012: LD_INT 0
72014: PUSH
72015: EMPTY
72016: LIST
72017: LIST
72018: LIST
72019: PUSH
72020: LD_VAR 0 1
72024: PUSH
72025: LD_INT 3
72027: MINUS
72028: PUSH
72029: LD_VAR 0 2
72033: PUSH
72034: LD_INT 1
72036: PUSH
72037: EMPTY
72038: LIST
72039: LIST
72040: LIST
72041: PUSH
72042: LD_VAR 0 1
72046: PUSH
72047: LD_INT 4
72049: MINUS
72050: PUSH
72051: LD_VAR 0 2
72055: PUSH
72056: LD_INT 4
72058: MINUS
72059: PUSH
72060: LD_INT 2
72062: PUSH
72063: EMPTY
72064: LIST
72065: LIST
72066: LIST
72067: PUSH
72068: EMPTY
72069: LIST
72070: LIST
72071: LIST
72072: LIST
72073: LIST
72074: ST_TO_ADDR
// end ; 3 :
72075: GO 72497
72077: LD_INT 3
72079: DOUBLE
72080: EQUAL
72081: IFTRUE 72085
72083: GO 72218
72085: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
72086: LD_ADDR_VAR 0 5
72090: PUSH
72091: LD_VAR 0 1
72095: PUSH
72096: LD_INT 3
72098: PLUS
72099: PUSH
72100: LD_VAR 0 2
72104: PUSH
72105: LD_INT 4
72107: PUSH
72108: EMPTY
72109: LIST
72110: LIST
72111: LIST
72112: PUSH
72113: LD_VAR 0 1
72117: PUSH
72118: LD_INT 4
72120: PLUS
72121: PUSH
72122: LD_VAR 0 2
72126: PUSH
72127: LD_INT 4
72129: PLUS
72130: PUSH
72131: LD_INT 5
72133: PUSH
72134: EMPTY
72135: LIST
72136: LIST
72137: LIST
72138: PUSH
72139: LD_VAR 0 1
72143: PUSH
72144: LD_INT 4
72146: MINUS
72147: PUSH
72148: LD_VAR 0 2
72152: PUSH
72153: LD_INT 1
72155: PUSH
72156: EMPTY
72157: LIST
72158: LIST
72159: LIST
72160: PUSH
72161: LD_VAR 0 1
72165: PUSH
72166: LD_VAR 0 2
72170: PUSH
72171: LD_INT 4
72173: MINUS
72174: PUSH
72175: LD_INT 3
72177: PUSH
72178: EMPTY
72179: LIST
72180: LIST
72181: LIST
72182: PUSH
72183: LD_VAR 0 1
72187: PUSH
72188: LD_INT 3
72190: MINUS
72191: PUSH
72192: LD_VAR 0 2
72196: PUSH
72197: LD_INT 3
72199: MINUS
72200: PUSH
72201: LD_INT 2
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: LIST
72208: PUSH
72209: EMPTY
72210: LIST
72211: LIST
72212: LIST
72213: LIST
72214: LIST
72215: ST_TO_ADDR
// end ; 4 :
72216: GO 72497
72218: LD_INT 4
72220: DOUBLE
72221: EQUAL
72222: IFTRUE 72226
72224: GO 72359
72226: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72227: LD_ADDR_VAR 0 5
72231: PUSH
72232: LD_VAR 0 1
72236: PUSH
72237: LD_VAR 0 2
72241: PUSH
72242: LD_INT 4
72244: PLUS
72245: PUSH
72246: LD_INT 0
72248: PUSH
72249: EMPTY
72250: LIST
72251: LIST
72252: LIST
72253: PUSH
72254: LD_VAR 0 1
72258: PUSH
72259: LD_INT 3
72261: PLUS
72262: PUSH
72263: LD_VAR 0 2
72267: PUSH
72268: LD_INT 3
72270: PLUS
72271: PUSH
72272: LD_INT 5
72274: PUSH
72275: EMPTY
72276: LIST
72277: LIST
72278: LIST
72279: PUSH
72280: LD_VAR 0 1
72284: PUSH
72285: LD_INT 4
72287: PLUS
72288: PUSH
72289: LD_VAR 0 2
72293: PUSH
72294: LD_INT 4
72296: PUSH
72297: EMPTY
72298: LIST
72299: LIST
72300: LIST
72301: PUSH
72302: LD_VAR 0 1
72306: PUSH
72307: LD_VAR 0 2
72311: PUSH
72312: LD_INT 3
72314: MINUS
72315: PUSH
72316: LD_INT 3
72318: PUSH
72319: EMPTY
72320: LIST
72321: LIST
72322: LIST
72323: PUSH
72324: LD_VAR 0 1
72328: PUSH
72329: LD_INT 4
72331: MINUS
72332: PUSH
72333: LD_VAR 0 2
72337: PUSH
72338: LD_INT 4
72340: MINUS
72341: PUSH
72342: LD_INT 2
72344: PUSH
72345: EMPTY
72346: LIST
72347: LIST
72348: LIST
72349: PUSH
72350: EMPTY
72351: LIST
72352: LIST
72353: LIST
72354: LIST
72355: LIST
72356: ST_TO_ADDR
// end ; 5 :
72357: GO 72497
72359: LD_INT 5
72361: DOUBLE
72362: EQUAL
72363: IFTRUE 72367
72365: GO 72496
72367: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72368: LD_ADDR_VAR 0 5
72372: PUSH
72373: LD_VAR 0 1
72377: PUSH
72378: LD_INT 4
72380: MINUS
72381: PUSH
72382: LD_VAR 0 2
72386: PUSH
72387: LD_INT 1
72389: PUSH
72390: EMPTY
72391: LIST
72392: LIST
72393: LIST
72394: PUSH
72395: LD_VAR 0 1
72399: PUSH
72400: LD_VAR 0 2
72404: PUSH
72405: LD_INT 4
72407: MINUS
72408: PUSH
72409: LD_INT 3
72411: PUSH
72412: EMPTY
72413: LIST
72414: LIST
72415: LIST
72416: PUSH
72417: LD_VAR 0 1
72421: PUSH
72422: LD_INT 4
72424: PLUS
72425: PUSH
72426: LD_VAR 0 2
72430: PUSH
72431: LD_INT 4
72433: PLUS
72434: PUSH
72435: LD_INT 5
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: LIST
72442: PUSH
72443: LD_VAR 0 1
72447: PUSH
72448: LD_INT 3
72450: PLUS
72451: PUSH
72452: LD_VAR 0 2
72456: PUSH
72457: LD_INT 4
72459: PUSH
72460: EMPTY
72461: LIST
72462: LIST
72463: LIST
72464: PUSH
72465: LD_VAR 0 1
72469: PUSH
72470: LD_VAR 0 2
72474: PUSH
72475: LD_INT 3
72477: PLUS
72478: PUSH
72479: LD_INT 0
72481: PUSH
72482: EMPTY
72483: LIST
72484: LIST
72485: LIST
72486: PUSH
72487: EMPTY
72488: LIST
72489: LIST
72490: LIST
72491: LIST
72492: LIST
72493: ST_TO_ADDR
// end ; end ;
72494: GO 72497
72496: POP
// result := list ;
72497: LD_ADDR_VAR 0 4
72501: PUSH
72502: LD_VAR 0 5
72506: ST_TO_ADDR
// end ;
72507: LD_VAR 0 4
72511: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72512: LD_INT 0
72514: PPUSH
72515: PPUSH
72516: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72517: LD_VAR 0 1
72521: NOT
72522: PUSH
72523: LD_VAR 0 2
72527: PUSH
72528: LD_INT 1
72530: PUSH
72531: LD_INT 2
72533: PUSH
72534: LD_INT 3
72536: PUSH
72537: LD_INT 4
72539: PUSH
72540: EMPTY
72541: LIST
72542: LIST
72543: LIST
72544: LIST
72545: IN
72546: NOT
72547: OR
72548: IFFALSE 72552
// exit ;
72550: GO 72635
// tmp := [ ] ;
72552: LD_ADDR_VAR 0 5
72556: PUSH
72557: EMPTY
72558: ST_TO_ADDR
// for i in units do
72559: LD_ADDR_VAR 0 4
72563: PUSH
72564: LD_VAR 0 1
72568: PUSH
72569: FOR_IN
72570: IFFALSE 72604
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
72572: LD_ADDR_VAR 0 5
72576: PUSH
72577: LD_VAR 0 5
72581: PPUSH
72582: LD_VAR 0 4
72586: PPUSH
72587: LD_VAR 0 2
72591: PPUSH
72592: CALL_OW 259
72596: PPUSH
72597: CALL 74008 0 2
72601: ST_TO_ADDR
72602: GO 72569
72604: POP
72605: POP
// if not tmp then
72606: LD_VAR 0 5
72610: NOT
72611: IFFALSE 72615
// exit ;
72613: GO 72635
// result := SortListByListDesc ( units , tmp ) ;
72615: LD_ADDR_VAR 0 3
72619: PUSH
72620: LD_VAR 0 1
72624: PPUSH
72625: LD_VAR 0 5
72629: PPUSH
72630: CALL_OW 77
72634: ST_TO_ADDR
// end ;
72635: LD_VAR 0 3
72639: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72640: LD_INT 0
72642: PPUSH
72643: PPUSH
72644: PPUSH
// result := false ;
72645: LD_ADDR_VAR 0 3
72649: PUSH
72650: LD_INT 0
72652: ST_TO_ADDR
// if not building then
72653: LD_VAR 0 2
72657: NOT
72658: IFFALSE 72662
// exit ;
72660: GO 72800
// x := GetX ( building ) ;
72662: LD_ADDR_VAR 0 4
72666: PUSH
72667: LD_VAR 0 2
72671: PPUSH
72672: CALL_OW 250
72676: ST_TO_ADDR
// y := GetY ( building ) ;
72677: LD_ADDR_VAR 0 5
72681: PUSH
72682: LD_VAR 0 2
72686: PPUSH
72687: CALL_OW 251
72691: ST_TO_ADDR
// if not x or not y then
72692: LD_VAR 0 4
72696: NOT
72697: PUSH
72698: LD_VAR 0 5
72702: NOT
72703: OR
72704: IFFALSE 72708
// exit ;
72706: GO 72800
// if GetTaskList ( unit ) then
72708: LD_VAR 0 1
72712: PPUSH
72713: CALL_OW 437
72717: IFFALSE 72800
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72719: LD_STRING e
72721: PUSH
72722: LD_VAR 0 1
72726: PPUSH
72727: CALL_OW 437
72731: PUSH
72732: LD_INT 1
72734: ARRAY
72735: PUSH
72736: LD_INT 1
72738: ARRAY
72739: EQUAL
72740: PUSH
72741: LD_VAR 0 4
72745: PUSH
72746: LD_VAR 0 1
72750: PPUSH
72751: CALL_OW 437
72755: PUSH
72756: LD_INT 1
72758: ARRAY
72759: PUSH
72760: LD_INT 2
72762: ARRAY
72763: EQUAL
72764: AND
72765: PUSH
72766: LD_VAR 0 5
72770: PUSH
72771: LD_VAR 0 1
72775: PPUSH
72776: CALL_OW 437
72780: PUSH
72781: LD_INT 1
72783: ARRAY
72784: PUSH
72785: LD_INT 3
72787: ARRAY
72788: EQUAL
72789: AND
72790: IFFALSE 72800
// result := true end ;
72792: LD_ADDR_VAR 0 3
72796: PUSH
72797: LD_INT 1
72799: ST_TO_ADDR
// end ;
72800: LD_VAR 0 3
72804: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72805: LD_INT 0
72807: PPUSH
// result := false ;
72808: LD_ADDR_VAR 0 4
72812: PUSH
72813: LD_INT 0
72815: ST_TO_ADDR
// if GetTaskList ( unit ) then
72816: LD_VAR 0 1
72820: PPUSH
72821: CALL_OW 437
72825: IFFALSE 72908
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72827: LD_STRING M
72829: PUSH
72830: LD_VAR 0 1
72834: PPUSH
72835: CALL_OW 437
72839: PUSH
72840: LD_INT 1
72842: ARRAY
72843: PUSH
72844: LD_INT 1
72846: ARRAY
72847: EQUAL
72848: PUSH
72849: LD_VAR 0 2
72853: PUSH
72854: LD_VAR 0 1
72858: PPUSH
72859: CALL_OW 437
72863: PUSH
72864: LD_INT 1
72866: ARRAY
72867: PUSH
72868: LD_INT 2
72870: ARRAY
72871: EQUAL
72872: AND
72873: PUSH
72874: LD_VAR 0 3
72878: PUSH
72879: LD_VAR 0 1
72883: PPUSH
72884: CALL_OW 437
72888: PUSH
72889: LD_INT 1
72891: ARRAY
72892: PUSH
72893: LD_INT 3
72895: ARRAY
72896: EQUAL
72897: AND
72898: IFFALSE 72908
// result := true ;
72900: LD_ADDR_VAR 0 4
72904: PUSH
72905: LD_INT 1
72907: ST_TO_ADDR
// end ; end ;
72908: LD_VAR 0 4
72912: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72913: LD_INT 0
72915: PPUSH
72916: PPUSH
72917: PPUSH
72918: PPUSH
// if not unit or not area then
72919: LD_VAR 0 1
72923: NOT
72924: PUSH
72925: LD_VAR 0 2
72929: NOT
72930: OR
72931: IFFALSE 72935
// exit ;
72933: GO 73111
// tmp := AreaToList ( area , i ) ;
72935: LD_ADDR_VAR 0 6
72939: PUSH
72940: LD_VAR 0 2
72944: PPUSH
72945: LD_VAR 0 5
72949: PPUSH
72950: CALL_OW 517
72954: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72955: LD_ADDR_VAR 0 5
72959: PUSH
72960: DOUBLE
72961: LD_INT 1
72963: DEC
72964: ST_TO_ADDR
72965: LD_VAR 0 6
72969: PUSH
72970: LD_INT 1
72972: ARRAY
72973: PUSH
72974: FOR_TO
72975: IFFALSE 73109
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72977: LD_ADDR_VAR 0 7
72981: PUSH
72982: LD_VAR 0 6
72986: PUSH
72987: LD_INT 1
72989: ARRAY
72990: PUSH
72991: LD_VAR 0 5
72995: ARRAY
72996: PUSH
72997: LD_VAR 0 6
73001: PUSH
73002: LD_INT 2
73004: ARRAY
73005: PUSH
73006: LD_VAR 0 5
73010: ARRAY
73011: PUSH
73012: EMPTY
73013: LIST
73014: LIST
73015: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
73016: LD_INT 92
73018: PUSH
73019: LD_VAR 0 7
73023: PUSH
73024: LD_INT 1
73026: ARRAY
73027: PUSH
73028: LD_VAR 0 7
73032: PUSH
73033: LD_INT 2
73035: ARRAY
73036: PUSH
73037: LD_INT 2
73039: PUSH
73040: EMPTY
73041: LIST
73042: LIST
73043: LIST
73044: LIST
73045: PPUSH
73046: CALL_OW 69
73050: PUSH
73051: LD_INT 0
73053: EQUAL
73054: IFFALSE 73107
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
73056: LD_VAR 0 1
73060: PPUSH
73061: LD_VAR 0 7
73065: PUSH
73066: LD_INT 1
73068: ARRAY
73069: PPUSH
73070: LD_VAR 0 7
73074: PUSH
73075: LD_INT 2
73077: ARRAY
73078: PPUSH
73079: LD_VAR 0 3
73083: PPUSH
73084: CALL_OW 48
// result := IsPlaced ( unit ) ;
73088: LD_ADDR_VAR 0 4
73092: PUSH
73093: LD_VAR 0 1
73097: PPUSH
73098: CALL_OW 305
73102: ST_TO_ADDR
// exit ;
73103: POP
73104: POP
73105: GO 73111
// end ; end ;
73107: GO 72974
73109: POP
73110: POP
// end ;
73111: LD_VAR 0 4
73115: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
73116: LD_INT 0
73118: PPUSH
73119: PPUSH
73120: PPUSH
// if not side or side > 8 then
73121: LD_VAR 0 1
73125: NOT
73126: PUSH
73127: LD_VAR 0 1
73131: PUSH
73132: LD_INT 8
73134: GREATER
73135: OR
73136: IFFALSE 73140
// exit ;
73138: GO 73327
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
73140: LD_ADDR_VAR 0 4
73144: PUSH
73145: LD_INT 22
73147: PUSH
73148: LD_VAR 0 1
73152: PUSH
73153: EMPTY
73154: LIST
73155: LIST
73156: PUSH
73157: LD_INT 21
73159: PUSH
73160: LD_INT 3
73162: PUSH
73163: EMPTY
73164: LIST
73165: LIST
73166: PUSH
73167: EMPTY
73168: LIST
73169: LIST
73170: PPUSH
73171: CALL_OW 69
73175: ST_TO_ADDR
// if not tmp then
73176: LD_VAR 0 4
73180: NOT
73181: IFFALSE 73185
// exit ;
73183: GO 73327
// enable_addtolog := true ;
73185: LD_ADDR_OWVAR 81
73189: PUSH
73190: LD_INT 1
73192: ST_TO_ADDR
// AddToLog ( [ ) ;
73193: LD_STRING [
73195: PPUSH
73196: CALL_OW 561
// for i in tmp do
73200: LD_ADDR_VAR 0 3
73204: PUSH
73205: LD_VAR 0 4
73209: PUSH
73210: FOR_IN
73211: IFFALSE 73318
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73213: LD_STRING [
73215: PUSH
73216: LD_VAR 0 3
73220: PPUSH
73221: CALL_OW 266
73225: STR
73226: PUSH
73227: LD_STRING , 
73229: STR
73230: PUSH
73231: LD_VAR 0 3
73235: PPUSH
73236: CALL_OW 250
73240: STR
73241: PUSH
73242: LD_STRING , 
73244: STR
73245: PUSH
73246: LD_VAR 0 3
73250: PPUSH
73251: CALL_OW 251
73255: STR
73256: PUSH
73257: LD_STRING , 
73259: STR
73260: PUSH
73261: LD_VAR 0 3
73265: PPUSH
73266: CALL_OW 254
73270: STR
73271: PUSH
73272: LD_STRING , 
73274: STR
73275: PUSH
73276: LD_VAR 0 3
73280: PPUSH
73281: LD_INT 1
73283: PPUSH
73284: CALL_OW 268
73288: STR
73289: PUSH
73290: LD_STRING , 
73292: STR
73293: PUSH
73294: LD_VAR 0 3
73298: PPUSH
73299: LD_INT 2
73301: PPUSH
73302: CALL_OW 268
73306: STR
73307: PUSH
73308: LD_STRING ],
73310: STR
73311: PPUSH
73312: CALL_OW 561
// end ;
73316: GO 73210
73318: POP
73319: POP
// AddToLog ( ]; ) ;
73320: LD_STRING ];
73322: PPUSH
73323: CALL_OW 561
// end ;
73327: LD_VAR 0 2
73331: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73332: LD_INT 0
73334: PPUSH
73335: PPUSH
73336: PPUSH
73337: PPUSH
73338: PPUSH
// if not area or not rate or not max then
73339: LD_VAR 0 1
73343: NOT
73344: PUSH
73345: LD_VAR 0 2
73349: NOT
73350: OR
73351: PUSH
73352: LD_VAR 0 4
73356: NOT
73357: OR
73358: IFFALSE 73362
// exit ;
73360: GO 73551
// while 1 do
73362: LD_INT 1
73364: IFFALSE 73551
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73366: LD_ADDR_VAR 0 9
73370: PUSH
73371: LD_VAR 0 1
73375: PPUSH
73376: LD_INT 1
73378: PPUSH
73379: CALL_OW 287
73383: PUSH
73384: LD_INT 10
73386: MUL
73387: ST_TO_ADDR
// r := rate / 10 ;
73388: LD_ADDR_VAR 0 7
73392: PUSH
73393: LD_VAR 0 2
73397: PUSH
73398: LD_INT 10
73400: DIVREAL
73401: ST_TO_ADDR
// time := 1 1$00 ;
73402: LD_ADDR_VAR 0 8
73406: PUSH
73407: LD_INT 2100
73409: ST_TO_ADDR
// if amount < min then
73410: LD_VAR 0 9
73414: PUSH
73415: LD_VAR 0 3
73419: LESS
73420: IFFALSE 73438
// r := r * 2 else
73422: LD_ADDR_VAR 0 7
73426: PUSH
73427: LD_VAR 0 7
73431: PUSH
73432: LD_INT 2
73434: MUL
73435: ST_TO_ADDR
73436: GO 73464
// if amount > max then
73438: LD_VAR 0 9
73442: PUSH
73443: LD_VAR 0 4
73447: GREATER
73448: IFFALSE 73464
// r := r / 2 ;
73450: LD_ADDR_VAR 0 7
73454: PUSH
73455: LD_VAR 0 7
73459: PUSH
73460: LD_INT 2
73462: DIVREAL
73463: ST_TO_ADDR
// time := time / r ;
73464: LD_ADDR_VAR 0 8
73468: PUSH
73469: LD_VAR 0 8
73473: PUSH
73474: LD_VAR 0 7
73478: DIVREAL
73479: ST_TO_ADDR
// if time < 0 then
73480: LD_VAR 0 8
73484: PUSH
73485: LD_INT 0
73487: LESS
73488: IFFALSE 73505
// time := time * - 1 ;
73490: LD_ADDR_VAR 0 8
73494: PUSH
73495: LD_VAR 0 8
73499: PUSH
73500: LD_INT 1
73502: NEG
73503: MUL
73504: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
73505: LD_VAR 0 8
73509: PUSH
73510: LD_INT 35
73512: PPUSH
73513: LD_INT 875
73515: PPUSH
73516: CALL_OW 12
73520: PLUS
73521: PPUSH
73522: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73526: LD_INT 1
73528: PPUSH
73529: LD_INT 5
73531: PPUSH
73532: CALL_OW 12
73536: PPUSH
73537: LD_VAR 0 1
73541: PPUSH
73542: LD_INT 1
73544: PPUSH
73545: CALL_OW 55
// end ;
73549: GO 73362
// end ;
73551: LD_VAR 0 5
73555: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73556: LD_INT 0
73558: PPUSH
73559: PPUSH
73560: PPUSH
73561: PPUSH
73562: PPUSH
73563: PPUSH
73564: PPUSH
73565: PPUSH
// if not turrets or not factories then
73566: LD_VAR 0 1
73570: NOT
73571: PUSH
73572: LD_VAR 0 2
73576: NOT
73577: OR
73578: IFFALSE 73582
// exit ;
73580: GO 73889
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73582: LD_ADDR_VAR 0 10
73586: PUSH
73587: LD_INT 5
73589: PUSH
73590: LD_INT 6
73592: PUSH
73593: EMPTY
73594: LIST
73595: LIST
73596: PUSH
73597: LD_INT 2
73599: PUSH
73600: LD_INT 4
73602: PUSH
73603: EMPTY
73604: LIST
73605: LIST
73606: PUSH
73607: LD_INT 3
73609: PUSH
73610: LD_INT 5
73612: PUSH
73613: EMPTY
73614: LIST
73615: LIST
73616: PUSH
73617: EMPTY
73618: LIST
73619: LIST
73620: LIST
73621: PUSH
73622: LD_INT 24
73624: PUSH
73625: LD_INT 25
73627: PUSH
73628: EMPTY
73629: LIST
73630: LIST
73631: PUSH
73632: LD_INT 23
73634: PUSH
73635: LD_INT 27
73637: PUSH
73638: EMPTY
73639: LIST
73640: LIST
73641: PUSH
73642: EMPTY
73643: LIST
73644: LIST
73645: PUSH
73646: LD_INT 42
73648: PUSH
73649: LD_INT 43
73651: PUSH
73652: EMPTY
73653: LIST
73654: LIST
73655: PUSH
73656: LD_INT 44
73658: PUSH
73659: LD_INT 46
73661: PUSH
73662: EMPTY
73663: LIST
73664: LIST
73665: PUSH
73666: LD_INT 45
73668: PUSH
73669: LD_INT 47
73671: PUSH
73672: EMPTY
73673: LIST
73674: LIST
73675: PUSH
73676: EMPTY
73677: LIST
73678: LIST
73679: LIST
73680: PUSH
73681: EMPTY
73682: LIST
73683: LIST
73684: LIST
73685: ST_TO_ADDR
// result := [ ] ;
73686: LD_ADDR_VAR 0 3
73690: PUSH
73691: EMPTY
73692: ST_TO_ADDR
// for i in turrets do
73693: LD_ADDR_VAR 0 4
73697: PUSH
73698: LD_VAR 0 1
73702: PUSH
73703: FOR_IN
73704: IFFALSE 73887
// begin nat := GetNation ( i ) ;
73706: LD_ADDR_VAR 0 7
73710: PUSH
73711: LD_VAR 0 4
73715: PPUSH
73716: CALL_OW 248
73720: ST_TO_ADDR
// weapon := 0 ;
73721: LD_ADDR_VAR 0 8
73725: PUSH
73726: LD_INT 0
73728: ST_TO_ADDR
// if not nat then
73729: LD_VAR 0 7
73733: NOT
73734: IFFALSE 73738
// continue ;
73736: GO 73703
// for j in list [ nat ] do
73738: LD_ADDR_VAR 0 5
73742: PUSH
73743: LD_VAR 0 10
73747: PUSH
73748: LD_VAR 0 7
73752: ARRAY
73753: PUSH
73754: FOR_IN
73755: IFFALSE 73796
// if GetBWeapon ( i ) = j [ 1 ] then
73757: LD_VAR 0 4
73761: PPUSH
73762: CALL_OW 269
73766: PUSH
73767: LD_VAR 0 5
73771: PUSH
73772: LD_INT 1
73774: ARRAY
73775: EQUAL
73776: IFFALSE 73794
// begin weapon := j [ 2 ] ;
73778: LD_ADDR_VAR 0 8
73782: PUSH
73783: LD_VAR 0 5
73787: PUSH
73788: LD_INT 2
73790: ARRAY
73791: ST_TO_ADDR
// break ;
73792: GO 73796
// end ;
73794: GO 73754
73796: POP
73797: POP
// if not weapon then
73798: LD_VAR 0 8
73802: NOT
73803: IFFALSE 73807
// continue ;
73805: GO 73703
// for k in factories do
73807: LD_ADDR_VAR 0 6
73811: PUSH
73812: LD_VAR 0 2
73816: PUSH
73817: FOR_IN
73818: IFFALSE 73883
// begin weapons := AvailableWeaponList ( k ) ;
73820: LD_ADDR_VAR 0 9
73824: PUSH
73825: LD_VAR 0 6
73829: PPUSH
73830: CALL_OW 478
73834: ST_TO_ADDR
// if not weapons then
73835: LD_VAR 0 9
73839: NOT
73840: IFFALSE 73844
// continue ;
73842: GO 73817
// if weapon in weapons then
73844: LD_VAR 0 8
73848: PUSH
73849: LD_VAR 0 9
73853: IN
73854: IFFALSE 73881
// begin result := [ i , weapon ] ;
73856: LD_ADDR_VAR 0 3
73860: PUSH
73861: LD_VAR 0 4
73865: PUSH
73866: LD_VAR 0 8
73870: PUSH
73871: EMPTY
73872: LIST
73873: LIST
73874: ST_TO_ADDR
// exit ;
73875: POP
73876: POP
73877: POP
73878: POP
73879: GO 73889
// end ; end ;
73881: GO 73817
73883: POP
73884: POP
// end ;
73885: GO 73703
73887: POP
73888: POP
// end ;
73889: LD_VAR 0 3
73893: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73894: LD_INT 0
73896: PPUSH
// if not side or side > 8 then
73897: LD_VAR 0 3
73901: NOT
73902: PUSH
73903: LD_VAR 0 3
73907: PUSH
73908: LD_INT 8
73910: GREATER
73911: OR
73912: IFFALSE 73916
// exit ;
73914: GO 73975
// if not range then
73916: LD_VAR 0 4
73920: NOT
73921: IFFALSE 73932
// range := - 12 ;
73923: LD_ADDR_VAR 0 4
73927: PUSH
73928: LD_INT 12
73930: NEG
73931: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73932: LD_VAR 0 1
73936: PPUSH
73937: LD_VAR 0 2
73941: PPUSH
73942: LD_VAR 0 3
73946: PPUSH
73947: LD_VAR 0 4
73951: PPUSH
73952: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73956: LD_VAR 0 1
73960: PPUSH
73961: LD_VAR 0 2
73965: PPUSH
73966: LD_VAR 0 3
73970: PPUSH
73971: CALL_OW 331
// end ;
73975: LD_VAR 0 5
73979: RET
// export function Video ( mode ) ; begin
73980: LD_INT 0
73982: PPUSH
// ingame_video = mode ;
73983: LD_ADDR_OWVAR 52
73987: PUSH
73988: LD_VAR 0 1
73992: ST_TO_ADDR
// interface_hidden = mode ;
73993: LD_ADDR_OWVAR 54
73997: PUSH
73998: LD_VAR 0 1
74002: ST_TO_ADDR
// end ;
74003: LD_VAR 0 2
74007: RET
// export function Join ( array , element ) ; begin
74008: LD_INT 0
74010: PPUSH
// result := Replace ( array , array + 1 , element ) ;
74011: LD_ADDR_VAR 0 3
74015: PUSH
74016: LD_VAR 0 1
74020: PPUSH
74021: LD_VAR 0 1
74025: PUSH
74026: LD_INT 1
74028: PLUS
74029: PPUSH
74030: LD_VAR 0 2
74034: PPUSH
74035: CALL_OW 1
74039: ST_TO_ADDR
// end ;
74040: LD_VAR 0 3
74044: RET
// export function JoinUnion ( array , element ) ; begin
74045: LD_INT 0
74047: PPUSH
// result := array union element ;
74048: LD_ADDR_VAR 0 3
74052: PUSH
74053: LD_VAR 0 1
74057: PUSH
74058: LD_VAR 0 2
74062: UNION
74063: ST_TO_ADDR
// end ;
74064: LD_VAR 0 3
74068: RET
// export function GetBehemoths ( side ) ; begin
74069: LD_INT 0
74071: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
74072: LD_ADDR_VAR 0 2
74076: PUSH
74077: LD_INT 22
74079: PUSH
74080: LD_VAR 0 1
74084: PUSH
74085: EMPTY
74086: LIST
74087: LIST
74088: PUSH
74089: LD_INT 31
74091: PUSH
74092: LD_INT 25
74094: PUSH
74095: EMPTY
74096: LIST
74097: LIST
74098: PUSH
74099: EMPTY
74100: LIST
74101: LIST
74102: PPUSH
74103: CALL_OW 69
74107: ST_TO_ADDR
// end ;
74108: LD_VAR 0 2
74112: RET
// export function Shuffle ( array ) ; var i , index ; begin
74113: LD_INT 0
74115: PPUSH
74116: PPUSH
74117: PPUSH
// result := [ ] ;
74118: LD_ADDR_VAR 0 2
74122: PUSH
74123: EMPTY
74124: ST_TO_ADDR
// if not array then
74125: LD_VAR 0 1
74129: NOT
74130: IFFALSE 74134
// exit ;
74132: GO 74233
// Randomize ;
74134: CALL_OW 10
// for i = array downto 1 do
74138: LD_ADDR_VAR 0 3
74142: PUSH
74143: DOUBLE
74144: LD_VAR 0 1
74148: INC
74149: ST_TO_ADDR
74150: LD_INT 1
74152: PUSH
74153: FOR_DOWNTO
74154: IFFALSE 74231
// begin index := rand ( 1 , array ) ;
74156: LD_ADDR_VAR 0 4
74160: PUSH
74161: LD_INT 1
74163: PPUSH
74164: LD_VAR 0 1
74168: PPUSH
74169: CALL_OW 12
74173: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
74174: LD_ADDR_VAR 0 2
74178: PUSH
74179: LD_VAR 0 2
74183: PPUSH
74184: LD_VAR 0 2
74188: PUSH
74189: LD_INT 1
74191: PLUS
74192: PPUSH
74193: LD_VAR 0 1
74197: PUSH
74198: LD_VAR 0 4
74202: ARRAY
74203: PPUSH
74204: CALL_OW 2
74208: ST_TO_ADDR
// array := Delete ( array , index ) ;
74209: LD_ADDR_VAR 0 1
74213: PUSH
74214: LD_VAR 0 1
74218: PPUSH
74219: LD_VAR 0 4
74223: PPUSH
74224: CALL_OW 3
74228: ST_TO_ADDR
// end ;
74229: GO 74153
74231: POP
74232: POP
// end ;
74233: LD_VAR 0 2
74237: RET
// export function GetBaseMaterials ( base ) ; begin
74238: LD_INT 0
74240: PPUSH
// result := [ 0 , 0 , 0 ] ;
74241: LD_ADDR_VAR 0 2
74245: PUSH
74246: LD_INT 0
74248: PUSH
74249: LD_INT 0
74251: PUSH
74252: LD_INT 0
74254: PUSH
74255: EMPTY
74256: LIST
74257: LIST
74258: LIST
74259: ST_TO_ADDR
// if not base then
74260: LD_VAR 0 1
74264: NOT
74265: IFFALSE 74269
// exit ;
74267: GO 74318
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74269: LD_ADDR_VAR 0 2
74273: PUSH
74274: LD_VAR 0 1
74278: PPUSH
74279: LD_INT 1
74281: PPUSH
74282: CALL_OW 275
74286: PUSH
74287: LD_VAR 0 1
74291: PPUSH
74292: LD_INT 2
74294: PPUSH
74295: CALL_OW 275
74299: PUSH
74300: LD_VAR 0 1
74304: PPUSH
74305: LD_INT 3
74307: PPUSH
74308: CALL_OW 275
74312: PUSH
74313: EMPTY
74314: LIST
74315: LIST
74316: LIST
74317: ST_TO_ADDR
// end ;
74318: LD_VAR 0 2
74322: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74323: LD_INT 0
74325: PPUSH
74326: PPUSH
// result := array ;
74327: LD_ADDR_VAR 0 3
74331: PUSH
74332: LD_VAR 0 1
74336: ST_TO_ADDR
// if size >= result then
74337: LD_VAR 0 2
74341: PUSH
74342: LD_VAR 0 3
74346: GREATEREQUAL
74347: IFFALSE 74351
// exit ;
74349: GO 74401
// if size then
74351: LD_VAR 0 2
74355: IFFALSE 74401
// for i := array downto size do
74357: LD_ADDR_VAR 0 4
74361: PUSH
74362: DOUBLE
74363: LD_VAR 0 1
74367: INC
74368: ST_TO_ADDR
74369: LD_VAR 0 2
74373: PUSH
74374: FOR_DOWNTO
74375: IFFALSE 74399
// result := Delete ( result , result ) ;
74377: LD_ADDR_VAR 0 3
74381: PUSH
74382: LD_VAR 0 3
74386: PPUSH
74387: LD_VAR 0 3
74391: PPUSH
74392: CALL_OW 3
74396: ST_TO_ADDR
74397: GO 74374
74399: POP
74400: POP
// end ;
74401: LD_VAR 0 3
74405: RET
// export function ComExit ( unit ) ; var tmp ; begin
74406: LD_INT 0
74408: PPUSH
74409: PPUSH
// if not IsInUnit ( unit ) then
74410: LD_VAR 0 1
74414: PPUSH
74415: CALL_OW 310
74419: NOT
74420: IFFALSE 74424
// exit ;
74422: GO 74484
// tmp := IsInUnit ( unit ) ;
74424: LD_ADDR_VAR 0 3
74428: PUSH
74429: LD_VAR 0 1
74433: PPUSH
74434: CALL_OW 310
74438: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74439: LD_VAR 0 3
74443: PPUSH
74444: CALL_OW 247
74448: PUSH
74449: LD_INT 2
74451: EQUAL
74452: IFFALSE 74465
// ComExitVehicle ( unit ) else
74454: LD_VAR 0 1
74458: PPUSH
74459: CALL_OW 121
74463: GO 74474
// ComExitBuilding ( unit ) ;
74465: LD_VAR 0 1
74469: PPUSH
74470: CALL_OW 122
// result := tmp ;
74474: LD_ADDR_VAR 0 2
74478: PUSH
74479: LD_VAR 0 3
74483: ST_TO_ADDR
// end ;
74484: LD_VAR 0 2
74488: RET
// export function ComExitAll ( units ) ; var i ; begin
74489: LD_INT 0
74491: PPUSH
74492: PPUSH
// if not units then
74493: LD_VAR 0 1
74497: NOT
74498: IFFALSE 74502
// exit ;
74500: GO 74528
// for i in units do
74502: LD_ADDR_VAR 0 3
74506: PUSH
74507: LD_VAR 0 1
74511: PUSH
74512: FOR_IN
74513: IFFALSE 74526
// ComExit ( i ) ;
74515: LD_VAR 0 3
74519: PPUSH
74520: CALL 74406 0 1
74524: GO 74512
74526: POP
74527: POP
// end ;
74528: LD_VAR 0 2
74532: RET
// export function ResetHc ; begin
74533: LD_INT 0
74535: PPUSH
// InitHc ;
74536: CALL_OW 19
// hc_importance := 0 ;
74540: LD_ADDR_OWVAR 32
74544: PUSH
74545: LD_INT 0
74547: ST_TO_ADDR
// end ;
74548: LD_VAR 0 1
74552: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74553: LD_INT 0
74555: PPUSH
74556: PPUSH
74557: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74558: LD_ADDR_VAR 0 6
74562: PUSH
74563: LD_VAR 0 1
74567: PUSH
74568: LD_VAR 0 3
74572: PLUS
74573: PUSH
74574: LD_INT 2
74576: DIV
74577: ST_TO_ADDR
// if _x < 0 then
74578: LD_VAR 0 6
74582: PUSH
74583: LD_INT 0
74585: LESS
74586: IFFALSE 74603
// _x := _x * - 1 ;
74588: LD_ADDR_VAR 0 6
74592: PUSH
74593: LD_VAR 0 6
74597: PUSH
74598: LD_INT 1
74600: NEG
74601: MUL
74602: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74603: LD_ADDR_VAR 0 7
74607: PUSH
74608: LD_VAR 0 2
74612: PUSH
74613: LD_VAR 0 4
74617: PLUS
74618: PUSH
74619: LD_INT 2
74621: DIV
74622: ST_TO_ADDR
// if _y < 0 then
74623: LD_VAR 0 7
74627: PUSH
74628: LD_INT 0
74630: LESS
74631: IFFALSE 74648
// _y := _y * - 1 ;
74633: LD_ADDR_VAR 0 7
74637: PUSH
74638: LD_VAR 0 7
74642: PUSH
74643: LD_INT 1
74645: NEG
74646: MUL
74647: ST_TO_ADDR
// result := [ _x , _y ] ;
74648: LD_ADDR_VAR 0 5
74652: PUSH
74653: LD_VAR 0 6
74657: PUSH
74658: LD_VAR 0 7
74662: PUSH
74663: EMPTY
74664: LIST
74665: LIST
74666: ST_TO_ADDR
// end ;
74667: LD_VAR 0 5
74671: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74672: LD_INT 0
74674: PPUSH
74675: PPUSH
74676: PPUSH
74677: PPUSH
// task := GetTaskList ( unit ) ;
74678: LD_ADDR_VAR 0 7
74682: PUSH
74683: LD_VAR 0 1
74687: PPUSH
74688: CALL_OW 437
74692: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74693: LD_VAR 0 7
74697: NOT
74698: PUSH
74699: LD_VAR 0 1
74703: PPUSH
74704: LD_VAR 0 2
74708: PPUSH
74709: CALL_OW 308
74713: NOT
74714: AND
74715: IFFALSE 74719
// exit ;
74717: GO 74837
// if IsInArea ( unit , area ) then
74719: LD_VAR 0 1
74723: PPUSH
74724: LD_VAR 0 2
74728: PPUSH
74729: CALL_OW 308
74733: IFFALSE 74751
// begin ComMoveToArea ( unit , goAway ) ;
74735: LD_VAR 0 1
74739: PPUSH
74740: LD_VAR 0 3
74744: PPUSH
74745: CALL_OW 113
// exit ;
74749: GO 74837
// end ; if task [ 1 ] [ 1 ] <> M then
74751: LD_VAR 0 7
74755: PUSH
74756: LD_INT 1
74758: ARRAY
74759: PUSH
74760: LD_INT 1
74762: ARRAY
74763: PUSH
74764: LD_STRING M
74766: NONEQUAL
74767: IFFALSE 74771
// exit ;
74769: GO 74837
// x := task [ 1 ] [ 2 ] ;
74771: LD_ADDR_VAR 0 5
74775: PUSH
74776: LD_VAR 0 7
74780: PUSH
74781: LD_INT 1
74783: ARRAY
74784: PUSH
74785: LD_INT 2
74787: ARRAY
74788: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74789: LD_ADDR_VAR 0 6
74793: PUSH
74794: LD_VAR 0 7
74798: PUSH
74799: LD_INT 1
74801: ARRAY
74802: PUSH
74803: LD_INT 3
74805: ARRAY
74806: ST_TO_ADDR
// if InArea ( x , y , area ) then
74807: LD_VAR 0 5
74811: PPUSH
74812: LD_VAR 0 6
74816: PPUSH
74817: LD_VAR 0 2
74821: PPUSH
74822: CALL_OW 309
74826: IFFALSE 74837
// ComStop ( unit ) ;
74828: LD_VAR 0 1
74832: PPUSH
74833: CALL_OW 141
// end ;
74837: LD_VAR 0 4
74841: RET
// export function Abs ( value ) ; begin
74842: LD_INT 0
74844: PPUSH
// result := value ;
74845: LD_ADDR_VAR 0 2
74849: PUSH
74850: LD_VAR 0 1
74854: ST_TO_ADDR
// if value < 0 then
74855: LD_VAR 0 1
74859: PUSH
74860: LD_INT 0
74862: LESS
74863: IFFALSE 74880
// result := value * - 1 ;
74865: LD_ADDR_VAR 0 2
74869: PUSH
74870: LD_VAR 0 1
74874: PUSH
74875: LD_INT 1
74877: NEG
74878: MUL
74879: ST_TO_ADDR
// end ;
74880: LD_VAR 0 2
74884: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74885: LD_INT 0
74887: PPUSH
74888: PPUSH
74889: PPUSH
74890: PPUSH
74891: PPUSH
74892: PPUSH
74893: PPUSH
74894: PPUSH
// if not unit or not building then
74895: LD_VAR 0 1
74899: NOT
74900: PUSH
74901: LD_VAR 0 2
74905: NOT
74906: OR
74907: IFFALSE 74911
// exit ;
74909: GO 75137
// x := GetX ( building ) ;
74911: LD_ADDR_VAR 0 4
74915: PUSH
74916: LD_VAR 0 2
74920: PPUSH
74921: CALL_OW 250
74925: ST_TO_ADDR
// y := GetY ( building ) ;
74926: LD_ADDR_VAR 0 6
74930: PUSH
74931: LD_VAR 0 2
74935: PPUSH
74936: CALL_OW 251
74940: ST_TO_ADDR
// d := GetDir ( building ) ;
74941: LD_ADDR_VAR 0 8
74945: PUSH
74946: LD_VAR 0 2
74950: PPUSH
74951: CALL_OW 254
74955: ST_TO_ADDR
// r := 4 ;
74956: LD_ADDR_VAR 0 9
74960: PUSH
74961: LD_INT 4
74963: ST_TO_ADDR
// for i := 1 to 5 do
74964: LD_ADDR_VAR 0 10
74968: PUSH
74969: DOUBLE
74970: LD_INT 1
74972: DEC
74973: ST_TO_ADDR
74974: LD_INT 5
74976: PUSH
74977: FOR_TO
74978: IFFALSE 75135
// begin _x := ShiftX ( x , d , r + i ) ;
74980: LD_ADDR_VAR 0 5
74984: PUSH
74985: LD_VAR 0 4
74989: PPUSH
74990: LD_VAR 0 8
74994: PPUSH
74995: LD_VAR 0 9
74999: PUSH
75000: LD_VAR 0 10
75004: PLUS
75005: PPUSH
75006: CALL_OW 272
75010: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
75011: LD_ADDR_VAR 0 7
75015: PUSH
75016: LD_VAR 0 6
75020: PPUSH
75021: LD_VAR 0 8
75025: PPUSH
75026: LD_VAR 0 9
75030: PUSH
75031: LD_VAR 0 10
75035: PLUS
75036: PPUSH
75037: CALL_OW 273
75041: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
75042: LD_VAR 0 5
75046: PPUSH
75047: LD_VAR 0 7
75051: PPUSH
75052: CALL_OW 488
75056: PUSH
75057: LD_VAR 0 5
75061: PPUSH
75062: LD_VAR 0 7
75066: PPUSH
75067: CALL_OW 428
75071: PPUSH
75072: CALL_OW 247
75076: PUSH
75077: LD_INT 3
75079: PUSH
75080: LD_INT 2
75082: PUSH
75083: EMPTY
75084: LIST
75085: LIST
75086: IN
75087: NOT
75088: AND
75089: IFFALSE 75133
// begin ComMoveXY ( unit , _x , _y ) ;
75091: LD_VAR 0 1
75095: PPUSH
75096: LD_VAR 0 5
75100: PPUSH
75101: LD_VAR 0 7
75105: PPUSH
75106: CALL_OW 111
// result := [ _x , _y ] ;
75110: LD_ADDR_VAR 0 3
75114: PUSH
75115: LD_VAR 0 5
75119: PUSH
75120: LD_VAR 0 7
75124: PUSH
75125: EMPTY
75126: LIST
75127: LIST
75128: ST_TO_ADDR
// exit ;
75129: POP
75130: POP
75131: GO 75137
// end ; end ;
75133: GO 74977
75135: POP
75136: POP
// end ;
75137: LD_VAR 0 3
75141: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
75142: LD_INT 0
75144: PPUSH
75145: PPUSH
75146: PPUSH
// result := 0 ;
75147: LD_ADDR_VAR 0 3
75151: PUSH
75152: LD_INT 0
75154: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
75155: LD_VAR 0 1
75159: PUSH
75160: LD_INT 0
75162: LESS
75163: PUSH
75164: LD_VAR 0 1
75168: PUSH
75169: LD_INT 8
75171: GREATER
75172: OR
75173: PUSH
75174: LD_VAR 0 2
75178: PUSH
75179: LD_INT 0
75181: LESS
75182: OR
75183: PUSH
75184: LD_VAR 0 2
75188: PUSH
75189: LD_INT 8
75191: GREATER
75192: OR
75193: IFFALSE 75197
// exit ;
75195: GO 75272
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
75197: LD_ADDR_VAR 0 4
75201: PUSH
75202: LD_INT 22
75204: PUSH
75205: LD_VAR 0 2
75209: PUSH
75210: EMPTY
75211: LIST
75212: LIST
75213: PPUSH
75214: CALL_OW 69
75218: PUSH
75219: FOR_IN
75220: IFFALSE 75270
// begin un := UnitShoot ( i ) ;
75222: LD_ADDR_VAR 0 5
75226: PUSH
75227: LD_VAR 0 4
75231: PPUSH
75232: CALL_OW 504
75236: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75237: LD_VAR 0 5
75241: PPUSH
75242: CALL_OW 255
75246: PUSH
75247: LD_VAR 0 1
75251: EQUAL
75252: IFFALSE 75268
// begin result := un ;
75254: LD_ADDR_VAR 0 3
75258: PUSH
75259: LD_VAR 0 5
75263: ST_TO_ADDR
// exit ;
75264: POP
75265: POP
75266: GO 75272
// end ; end ;
75268: GO 75219
75270: POP
75271: POP
// end ;
75272: LD_VAR 0 3
75276: RET
// export function GetCargoBay ( units ) ; begin
75277: LD_INT 0
75279: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75280: LD_ADDR_VAR 0 2
75284: PUSH
75285: LD_VAR 0 1
75289: PPUSH
75290: LD_INT 2
75292: PUSH
75293: LD_INT 34
75295: PUSH
75296: LD_INT 12
75298: PUSH
75299: EMPTY
75300: LIST
75301: LIST
75302: PUSH
75303: LD_INT 34
75305: PUSH
75306: LD_INT 51
75308: PUSH
75309: EMPTY
75310: LIST
75311: LIST
75312: PUSH
75313: LD_INT 34
75315: PUSH
75316: LD_INT 32
75318: PUSH
75319: EMPTY
75320: LIST
75321: LIST
75322: PUSH
75323: LD_INT 34
75325: PUSH
75326: LD_INT 89
75328: PUSH
75329: EMPTY
75330: LIST
75331: LIST
75332: PUSH
75333: EMPTY
75334: LIST
75335: LIST
75336: LIST
75337: LIST
75338: LIST
75339: PPUSH
75340: CALL_OW 72
75344: ST_TO_ADDR
// end ;
75345: LD_VAR 0 2
75349: RET
// export function Negate ( value ) ; begin
75350: LD_INT 0
75352: PPUSH
// result := not value ;
75353: LD_ADDR_VAR 0 2
75357: PUSH
75358: LD_VAR 0 1
75362: NOT
75363: ST_TO_ADDR
// end ;
75364: LD_VAR 0 2
75368: RET
// export function Inc ( value ) ; begin
75369: LD_INT 0
75371: PPUSH
// result := value + 1 ;
75372: LD_ADDR_VAR 0 2
75376: PUSH
75377: LD_VAR 0 1
75381: PUSH
75382: LD_INT 1
75384: PLUS
75385: ST_TO_ADDR
// end ;
75386: LD_VAR 0 2
75390: RET
// export function Dec ( value ) ; begin
75391: LD_INT 0
75393: PPUSH
// result := value - 1 ;
75394: LD_ADDR_VAR 0 2
75398: PUSH
75399: LD_VAR 0 1
75403: PUSH
75404: LD_INT 1
75406: MINUS
75407: ST_TO_ADDR
// end ;
75408: LD_VAR 0 2
75412: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75413: LD_INT 0
75415: PPUSH
75416: PPUSH
75417: PPUSH
75418: PPUSH
75419: PPUSH
75420: PPUSH
75421: PPUSH
75422: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75423: LD_VAR 0 1
75427: PPUSH
75428: LD_VAR 0 2
75432: PPUSH
75433: CALL_OW 488
75437: NOT
75438: PUSH
75439: LD_VAR 0 3
75443: PPUSH
75444: LD_VAR 0 4
75448: PPUSH
75449: CALL_OW 488
75453: NOT
75454: OR
75455: IFFALSE 75468
// begin result := - 1 ;
75457: LD_ADDR_VAR 0 5
75461: PUSH
75462: LD_INT 1
75464: NEG
75465: ST_TO_ADDR
// exit ;
75466: GO 75703
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75468: LD_ADDR_VAR 0 12
75472: PUSH
75473: LD_VAR 0 1
75477: PPUSH
75478: LD_VAR 0 2
75482: PPUSH
75483: LD_VAR 0 3
75487: PPUSH
75488: LD_VAR 0 4
75492: PPUSH
75493: CALL 74553 0 4
75497: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75498: LD_ADDR_VAR 0 11
75502: PUSH
75503: LD_VAR 0 1
75507: PPUSH
75508: LD_VAR 0 2
75512: PPUSH
75513: LD_VAR 0 12
75517: PUSH
75518: LD_INT 1
75520: ARRAY
75521: PPUSH
75522: LD_VAR 0 12
75526: PUSH
75527: LD_INT 2
75529: ARRAY
75530: PPUSH
75531: CALL_OW 298
75535: ST_TO_ADDR
// distance := 9999 ;
75536: LD_ADDR_VAR 0 10
75540: PUSH
75541: LD_INT 9999
75543: ST_TO_ADDR
// for i := 0 to 5 do
75544: LD_ADDR_VAR 0 6
75548: PUSH
75549: DOUBLE
75550: LD_INT 0
75552: DEC
75553: ST_TO_ADDR
75554: LD_INT 5
75556: PUSH
75557: FOR_TO
75558: IFFALSE 75701
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75560: LD_ADDR_VAR 0 7
75564: PUSH
75565: LD_VAR 0 1
75569: PPUSH
75570: LD_VAR 0 6
75574: PPUSH
75575: LD_VAR 0 11
75579: PPUSH
75580: CALL_OW 272
75584: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
75585: LD_ADDR_VAR 0 8
75589: PUSH
75590: LD_VAR 0 2
75594: PPUSH
75595: LD_VAR 0 6
75599: PPUSH
75600: LD_VAR 0 11
75604: PPUSH
75605: CALL_OW 273
75609: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75610: LD_VAR 0 7
75614: PPUSH
75615: LD_VAR 0 8
75619: PPUSH
75620: CALL_OW 488
75624: NOT
75625: IFFALSE 75629
// continue ;
75627: GO 75557
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
75629: LD_ADDR_VAR 0 9
75633: PUSH
75634: LD_VAR 0 12
75638: PUSH
75639: LD_INT 1
75641: ARRAY
75642: PPUSH
75643: LD_VAR 0 12
75647: PUSH
75648: LD_INT 2
75650: ARRAY
75651: PPUSH
75652: LD_VAR 0 7
75656: PPUSH
75657: LD_VAR 0 8
75661: PPUSH
75662: CALL_OW 298
75666: ST_TO_ADDR
// if tmp < distance then
75667: LD_VAR 0 9
75671: PUSH
75672: LD_VAR 0 10
75676: LESS
75677: IFFALSE 75699
// begin result := i ;
75679: LD_ADDR_VAR 0 5
75683: PUSH
75684: LD_VAR 0 6
75688: ST_TO_ADDR
// distance := tmp ;
75689: LD_ADDR_VAR 0 10
75693: PUSH
75694: LD_VAR 0 9
75698: ST_TO_ADDR
// end ; end ;
75699: GO 75557
75701: POP
75702: POP
// end ;
75703: LD_VAR 0 5
75707: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75708: LD_INT 0
75710: PPUSH
75711: PPUSH
// if not driver or not IsInUnit ( driver ) then
75712: LD_VAR 0 1
75716: NOT
75717: PUSH
75718: LD_VAR 0 1
75722: PPUSH
75723: CALL_OW 310
75727: NOT
75728: OR
75729: IFFALSE 75733
// exit ;
75731: GO 75823
// vehicle := IsInUnit ( driver ) ;
75733: LD_ADDR_VAR 0 3
75737: PUSH
75738: LD_VAR 0 1
75742: PPUSH
75743: CALL_OW 310
75747: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75748: LD_VAR 0 1
75752: PPUSH
75753: LD_STRING \
75755: PUSH
75756: LD_INT 0
75758: PUSH
75759: LD_INT 0
75761: PUSH
75762: LD_INT 0
75764: PUSH
75765: LD_INT 0
75767: PUSH
75768: LD_INT 0
75770: PUSH
75771: LD_INT 0
75773: PUSH
75774: EMPTY
75775: LIST
75776: LIST
75777: LIST
75778: LIST
75779: LIST
75780: LIST
75781: LIST
75782: PUSH
75783: LD_STRING E
75785: PUSH
75786: LD_INT 0
75788: PUSH
75789: LD_INT 0
75791: PUSH
75792: LD_VAR 0 3
75796: PUSH
75797: LD_INT 0
75799: PUSH
75800: LD_INT 0
75802: PUSH
75803: LD_INT 0
75805: PUSH
75806: EMPTY
75807: LIST
75808: LIST
75809: LIST
75810: LIST
75811: LIST
75812: LIST
75813: LIST
75814: PUSH
75815: EMPTY
75816: LIST
75817: LIST
75818: PPUSH
75819: CALL_OW 446
// end ;
75823: LD_VAR 0 2
75827: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75828: LD_INT 0
75830: PPUSH
75831: PPUSH
// if not driver or not IsInUnit ( driver ) then
75832: LD_VAR 0 1
75836: NOT
75837: PUSH
75838: LD_VAR 0 1
75842: PPUSH
75843: CALL_OW 310
75847: NOT
75848: OR
75849: IFFALSE 75853
// exit ;
75851: GO 75943
// vehicle := IsInUnit ( driver ) ;
75853: LD_ADDR_VAR 0 3
75857: PUSH
75858: LD_VAR 0 1
75862: PPUSH
75863: CALL_OW 310
75867: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75868: LD_VAR 0 1
75872: PPUSH
75873: LD_STRING \
75875: PUSH
75876: LD_INT 0
75878: PUSH
75879: LD_INT 0
75881: PUSH
75882: LD_INT 0
75884: PUSH
75885: LD_INT 0
75887: PUSH
75888: LD_INT 0
75890: PUSH
75891: LD_INT 0
75893: PUSH
75894: EMPTY
75895: LIST
75896: LIST
75897: LIST
75898: LIST
75899: LIST
75900: LIST
75901: LIST
75902: PUSH
75903: LD_STRING E
75905: PUSH
75906: LD_INT 0
75908: PUSH
75909: LD_INT 0
75911: PUSH
75912: LD_VAR 0 3
75916: PUSH
75917: LD_INT 0
75919: PUSH
75920: LD_INT 0
75922: PUSH
75923: LD_INT 0
75925: PUSH
75926: EMPTY
75927: LIST
75928: LIST
75929: LIST
75930: LIST
75931: LIST
75932: LIST
75933: LIST
75934: PUSH
75935: EMPTY
75936: LIST
75937: LIST
75938: PPUSH
75939: CALL_OW 447
// end ;
75943: LD_VAR 0 2
75947: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75948: LD_INT 0
75950: PPUSH
75951: PPUSH
75952: PPUSH
// tmp := [ ] ;
75953: LD_ADDR_VAR 0 5
75957: PUSH
75958: EMPTY
75959: ST_TO_ADDR
// for i in units do
75960: LD_ADDR_VAR 0 4
75964: PUSH
75965: LD_VAR 0 1
75969: PUSH
75970: FOR_IN
75971: IFFALSE 76009
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75973: LD_ADDR_VAR 0 5
75977: PUSH
75978: LD_VAR 0 5
75982: PPUSH
75983: LD_VAR 0 5
75987: PUSH
75988: LD_INT 1
75990: PLUS
75991: PPUSH
75992: LD_VAR 0 4
75996: PPUSH
75997: CALL_OW 256
76001: PPUSH
76002: CALL_OW 2
76006: ST_TO_ADDR
76007: GO 75970
76009: POP
76010: POP
// if not tmp then
76011: LD_VAR 0 5
76015: NOT
76016: IFFALSE 76020
// exit ;
76018: GO 76068
// if asc then
76020: LD_VAR 0 2
76024: IFFALSE 76048
// result := SortListByListAsc ( units , tmp ) else
76026: LD_ADDR_VAR 0 3
76030: PUSH
76031: LD_VAR 0 1
76035: PPUSH
76036: LD_VAR 0 5
76040: PPUSH
76041: CALL_OW 76
76045: ST_TO_ADDR
76046: GO 76068
// result := SortListByListDesc ( units , tmp ) ;
76048: LD_ADDR_VAR 0 3
76052: PUSH
76053: LD_VAR 0 1
76057: PPUSH
76058: LD_VAR 0 5
76062: PPUSH
76063: CALL_OW 77
76067: ST_TO_ADDR
// end ;
76068: LD_VAR 0 3
76072: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
76073: LD_INT 0
76075: PPUSH
76076: PPUSH
// task := GetTaskList ( mech ) ;
76077: LD_ADDR_VAR 0 4
76081: PUSH
76082: LD_VAR 0 1
76086: PPUSH
76087: CALL_OW 437
76091: ST_TO_ADDR
// if not task then
76092: LD_VAR 0 4
76096: NOT
76097: IFFALSE 76101
// exit ;
76099: GO 76143
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
76101: LD_ADDR_VAR 0 3
76105: PUSH
76106: LD_VAR 0 4
76110: PUSH
76111: LD_INT 1
76113: ARRAY
76114: PUSH
76115: LD_INT 1
76117: ARRAY
76118: PUSH
76119: LD_STRING r
76121: EQUAL
76122: PUSH
76123: LD_VAR 0 4
76127: PUSH
76128: LD_INT 1
76130: ARRAY
76131: PUSH
76132: LD_INT 4
76134: ARRAY
76135: PUSH
76136: LD_VAR 0 2
76140: EQUAL
76141: AND
76142: ST_TO_ADDR
// end ;
76143: LD_VAR 0 3
76147: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
76148: LD_INT 0
76150: PPUSH
// SetDir ( unit , d ) ;
76151: LD_VAR 0 1
76155: PPUSH
76156: LD_VAR 0 4
76160: PPUSH
76161: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
76165: LD_VAR 0 1
76169: PPUSH
76170: LD_VAR 0 2
76174: PPUSH
76175: LD_VAR 0 3
76179: PPUSH
76180: LD_VAR 0 5
76184: PPUSH
76185: CALL_OW 48
// end ;
76189: LD_VAR 0 6
76193: RET
// export function ToNaturalNumber ( number ) ; begin
76194: LD_INT 0
76196: PPUSH
// result := number div 1 ;
76197: LD_ADDR_VAR 0 2
76201: PUSH
76202: LD_VAR 0 1
76206: PUSH
76207: LD_INT 1
76209: DIV
76210: ST_TO_ADDR
// if number < 0 then
76211: LD_VAR 0 1
76215: PUSH
76216: LD_INT 0
76218: LESS
76219: IFFALSE 76229
// result := 0 ;
76221: LD_ADDR_VAR 0 2
76225: PUSH
76226: LD_INT 0
76228: ST_TO_ADDR
// end ;
76229: LD_VAR 0 2
76233: RET
// export function SortByClass ( units , class ) ; var un ; begin
76234: LD_INT 0
76236: PPUSH
76237: PPUSH
// if not units or not class then
76238: LD_VAR 0 1
76242: NOT
76243: PUSH
76244: LD_VAR 0 2
76248: NOT
76249: OR
76250: IFFALSE 76254
// exit ;
76252: GO 76349
// result := [ ] ;
76254: LD_ADDR_VAR 0 3
76258: PUSH
76259: EMPTY
76260: ST_TO_ADDR
// for un in units do
76261: LD_ADDR_VAR 0 4
76265: PUSH
76266: LD_VAR 0 1
76270: PUSH
76271: FOR_IN
76272: IFFALSE 76347
// if GetClass ( un ) = class then
76274: LD_VAR 0 4
76278: PPUSH
76279: CALL_OW 257
76283: PUSH
76284: LD_VAR 0 2
76288: EQUAL
76289: IFFALSE 76316
// result := Insert ( result , 1 , un ) else
76291: LD_ADDR_VAR 0 3
76295: PUSH
76296: LD_VAR 0 3
76300: PPUSH
76301: LD_INT 1
76303: PPUSH
76304: LD_VAR 0 4
76308: PPUSH
76309: CALL_OW 2
76313: ST_TO_ADDR
76314: GO 76345
// result := Replace ( result , result + 1 , un ) ;
76316: LD_ADDR_VAR 0 3
76320: PUSH
76321: LD_VAR 0 3
76325: PPUSH
76326: LD_VAR 0 3
76330: PUSH
76331: LD_INT 1
76333: PLUS
76334: PPUSH
76335: LD_VAR 0 4
76339: PPUSH
76340: CALL_OW 1
76344: ST_TO_ADDR
76345: GO 76271
76347: POP
76348: POP
// end ;
76349: LD_VAR 0 3
76353: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76354: LD_INT 0
76356: PPUSH
76357: PPUSH
76358: PPUSH
76359: PPUSH
76360: PPUSH
76361: PPUSH
76362: PPUSH
// result := [ ] ;
76363: LD_ADDR_VAR 0 4
76367: PUSH
76368: EMPTY
76369: ST_TO_ADDR
// if x - r < 0 then
76370: LD_VAR 0 1
76374: PUSH
76375: LD_VAR 0 3
76379: MINUS
76380: PUSH
76381: LD_INT 0
76383: LESS
76384: IFFALSE 76396
// min_x := 0 else
76386: LD_ADDR_VAR 0 8
76390: PUSH
76391: LD_INT 0
76393: ST_TO_ADDR
76394: GO 76412
// min_x := x - r ;
76396: LD_ADDR_VAR 0 8
76400: PUSH
76401: LD_VAR 0 1
76405: PUSH
76406: LD_VAR 0 3
76410: MINUS
76411: ST_TO_ADDR
// if y - r < 0 then
76412: LD_VAR 0 2
76416: PUSH
76417: LD_VAR 0 3
76421: MINUS
76422: PUSH
76423: LD_INT 0
76425: LESS
76426: IFFALSE 76438
// min_y := 0 else
76428: LD_ADDR_VAR 0 7
76432: PUSH
76433: LD_INT 0
76435: ST_TO_ADDR
76436: GO 76454
// min_y := y - r ;
76438: LD_ADDR_VAR 0 7
76442: PUSH
76443: LD_VAR 0 2
76447: PUSH
76448: LD_VAR 0 3
76452: MINUS
76453: ST_TO_ADDR
// max_x := x + r ;
76454: LD_ADDR_VAR 0 9
76458: PUSH
76459: LD_VAR 0 1
76463: PUSH
76464: LD_VAR 0 3
76468: PLUS
76469: ST_TO_ADDR
// max_y := y + r ;
76470: LD_ADDR_VAR 0 10
76474: PUSH
76475: LD_VAR 0 2
76479: PUSH
76480: LD_VAR 0 3
76484: PLUS
76485: ST_TO_ADDR
// for _x = min_x to max_x do
76486: LD_ADDR_VAR 0 5
76490: PUSH
76491: DOUBLE
76492: LD_VAR 0 8
76496: DEC
76497: ST_TO_ADDR
76498: LD_VAR 0 9
76502: PUSH
76503: FOR_TO
76504: IFFALSE 76605
// for _y = min_y to max_y do
76506: LD_ADDR_VAR 0 6
76510: PUSH
76511: DOUBLE
76512: LD_VAR 0 7
76516: DEC
76517: ST_TO_ADDR
76518: LD_VAR 0 10
76522: PUSH
76523: FOR_TO
76524: IFFALSE 76601
// begin if not ValidHex ( _x , _y ) then
76526: LD_VAR 0 5
76530: PPUSH
76531: LD_VAR 0 6
76535: PPUSH
76536: CALL_OW 488
76540: NOT
76541: IFFALSE 76545
// continue ;
76543: GO 76523
// if GetResourceTypeXY ( _x , _y ) then
76545: LD_VAR 0 5
76549: PPUSH
76550: LD_VAR 0 6
76554: PPUSH
76555: CALL_OW 283
76559: IFFALSE 76599
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76561: LD_ADDR_VAR 0 4
76565: PUSH
76566: LD_VAR 0 4
76570: PPUSH
76571: LD_VAR 0 4
76575: PUSH
76576: LD_INT 1
76578: PLUS
76579: PPUSH
76580: LD_VAR 0 5
76584: PUSH
76585: LD_VAR 0 6
76589: PUSH
76590: EMPTY
76591: LIST
76592: LIST
76593: PPUSH
76594: CALL_OW 1
76598: ST_TO_ADDR
// end ;
76599: GO 76523
76601: POP
76602: POP
76603: GO 76503
76605: POP
76606: POP
// end ;
76607: LD_VAR 0 4
76611: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
76612: LD_INT 0
76614: PPUSH
76615: PPUSH
76616: PPUSH
76617: PPUSH
76618: PPUSH
76619: PPUSH
76620: PPUSH
76621: PPUSH
// if not units then
76622: LD_VAR 0 1
76626: NOT
76627: IFFALSE 76631
// exit ;
76629: GO 77159
// result := UnitFilter ( units , [ f_ok ] ) ;
76631: LD_ADDR_VAR 0 3
76635: PUSH
76636: LD_VAR 0 1
76640: PPUSH
76641: LD_INT 50
76643: PUSH
76644: EMPTY
76645: LIST
76646: PPUSH
76647: CALL_OW 72
76651: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76652: LD_ADDR_VAR 0 8
76656: PUSH
76657: LD_VAR 0 1
76661: PUSH
76662: LD_INT 1
76664: ARRAY
76665: PPUSH
76666: CALL_OW 255
76670: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
76671: LD_ADDR_VAR 0 10
76675: PUSH
76676: LD_INT 29
76678: PUSH
76679: LD_INT 91
76681: PUSH
76682: LD_INT 49
76684: PUSH
76685: EMPTY
76686: LIST
76687: LIST
76688: LIST
76689: ST_TO_ADDR
// if not result then
76690: LD_VAR 0 3
76694: NOT
76695: IFFALSE 76699
// exit ;
76697: GO 77159
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76699: LD_ADDR_VAR 0 5
76703: PUSH
76704: LD_INT 81
76706: PUSH
76707: LD_VAR 0 8
76711: PUSH
76712: EMPTY
76713: LIST
76714: LIST
76715: PPUSH
76716: CALL_OW 69
76720: ST_TO_ADDR
// for i in result do
76721: LD_ADDR_VAR 0 4
76725: PUSH
76726: LD_VAR 0 3
76730: PUSH
76731: FOR_IN
76732: IFFALSE 77157
// begin tag := GetTag ( i ) + 1 ;
76734: LD_ADDR_VAR 0 9
76738: PUSH
76739: LD_VAR 0 4
76743: PPUSH
76744: CALL_OW 110
76748: PUSH
76749: LD_INT 1
76751: PLUS
76752: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
76753: LD_ADDR_VAR 0 7
76757: PUSH
76758: LD_VAR 0 4
76762: PPUSH
76763: CALL_OW 250
76767: PPUSH
76768: LD_VAR 0 4
76772: PPUSH
76773: CALL_OW 251
76777: PPUSH
76778: LD_INT 4
76780: PPUSH
76781: CALL 76354 0 3
76785: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
76786: LD_VAR 0 4
76790: PPUSH
76791: CALL_OW 247
76795: PUSH
76796: LD_INT 2
76798: EQUAL
76799: PUSH
76800: LD_VAR 0 7
76804: PUSH
76805: LD_INT 2
76807: GREATER
76808: AND
76809: PUSH
76810: LD_VAR 0 4
76814: PPUSH
76815: CALL_OW 264
76819: PUSH
76820: LD_VAR 0 10
76824: IN
76825: NOT
76826: AND
76827: IFFALSE 76866
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76829: LD_VAR 0 4
76833: PPUSH
76834: LD_VAR 0 7
76838: PUSH
76839: LD_INT 1
76841: ARRAY
76842: PUSH
76843: LD_INT 1
76845: ARRAY
76846: PPUSH
76847: LD_VAR 0 7
76851: PUSH
76852: LD_INT 1
76854: ARRAY
76855: PUSH
76856: LD_INT 2
76858: ARRAY
76859: PPUSH
76860: CALL_OW 116
76864: GO 77155
// if path > tag then
76866: LD_VAR 0 2
76870: PUSH
76871: LD_VAR 0 9
76875: GREATER
76876: IFFALSE 77084
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
76878: LD_ADDR_VAR 0 6
76882: PUSH
76883: LD_VAR 0 5
76887: PPUSH
76888: LD_INT 91
76890: PUSH
76891: LD_VAR 0 4
76895: PUSH
76896: LD_INT 8
76898: PUSH
76899: EMPTY
76900: LIST
76901: LIST
76902: LIST
76903: PPUSH
76904: CALL_OW 72
76908: ST_TO_ADDR
// if nearEnemy then
76909: LD_VAR 0 6
76913: IFFALSE 76982
// begin if GetWeapon ( i ) = ru_time_lapser then
76915: LD_VAR 0 4
76919: PPUSH
76920: CALL_OW 264
76924: PUSH
76925: LD_INT 49
76927: EQUAL
76928: IFFALSE 76956
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
76930: LD_VAR 0 4
76934: PPUSH
76935: LD_VAR 0 6
76939: PPUSH
76940: LD_VAR 0 4
76944: PPUSH
76945: CALL_OW 74
76949: PPUSH
76950: CALL_OW 112
76954: GO 76980
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
76956: LD_VAR 0 4
76960: PPUSH
76961: LD_VAR 0 6
76965: PPUSH
76966: LD_VAR 0 4
76970: PPUSH
76971: CALL_OW 74
76975: PPUSH
76976: CALL 78230 0 2
// end else
76980: GO 77082
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76982: LD_VAR 0 4
76986: PPUSH
76987: LD_VAR 0 2
76991: PUSH
76992: LD_VAR 0 9
76996: ARRAY
76997: PUSH
76998: LD_INT 1
77000: ARRAY
77001: PPUSH
77002: LD_VAR 0 2
77006: PUSH
77007: LD_VAR 0 9
77011: ARRAY
77012: PUSH
77013: LD_INT 2
77015: ARRAY
77016: PPUSH
77017: CALL_OW 297
77021: PUSH
77022: LD_INT 6
77024: GREATER
77025: IFFALSE 77068
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
77027: LD_VAR 0 4
77031: PPUSH
77032: LD_VAR 0 2
77036: PUSH
77037: LD_VAR 0 9
77041: ARRAY
77042: PUSH
77043: LD_INT 1
77045: ARRAY
77046: PPUSH
77047: LD_VAR 0 2
77051: PUSH
77052: LD_VAR 0 9
77056: ARRAY
77057: PUSH
77058: LD_INT 2
77060: ARRAY
77061: PPUSH
77062: CALL_OW 114
77066: GO 77082
// SetTag ( i , tag ) ;
77068: LD_VAR 0 4
77072: PPUSH
77073: LD_VAR 0 9
77077: PPUSH
77078: CALL_OW 109
// end else
77082: GO 77155
// if enemy then
77084: LD_VAR 0 5
77088: IFFALSE 77155
// begin if GetWeapon ( i ) = ru_time_lapser then
77090: LD_VAR 0 4
77094: PPUSH
77095: CALL_OW 264
77099: PUSH
77100: LD_INT 49
77102: EQUAL
77103: IFFALSE 77131
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
77105: LD_VAR 0 4
77109: PPUSH
77110: LD_VAR 0 5
77114: PPUSH
77115: LD_VAR 0 4
77119: PPUSH
77120: CALL_OW 74
77124: PPUSH
77125: CALL_OW 112
77129: GO 77155
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
77131: LD_VAR 0 4
77135: PPUSH
77136: LD_VAR 0 5
77140: PPUSH
77141: LD_VAR 0 4
77145: PPUSH
77146: CALL_OW 74
77150: PPUSH
77151: CALL 78230 0 2
// end ; end ;
77155: GO 76731
77157: POP
77158: POP
// end ;
77159: LD_VAR 0 3
77163: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
77164: LD_INT 0
77166: PPUSH
77167: PPUSH
77168: PPUSH
// if not unit or IsInUnit ( unit ) then
77169: LD_VAR 0 1
77173: NOT
77174: PUSH
77175: LD_VAR 0 1
77179: PPUSH
77180: CALL_OW 310
77184: OR
77185: IFFALSE 77189
// exit ;
77187: GO 77280
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
77189: LD_ADDR_VAR 0 4
77193: PUSH
77194: LD_VAR 0 1
77198: PPUSH
77199: CALL_OW 250
77203: PPUSH
77204: LD_VAR 0 2
77208: PPUSH
77209: LD_INT 1
77211: PPUSH
77212: CALL_OW 272
77216: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
77217: LD_ADDR_VAR 0 5
77221: PUSH
77222: LD_VAR 0 1
77226: PPUSH
77227: CALL_OW 251
77231: PPUSH
77232: LD_VAR 0 2
77236: PPUSH
77237: LD_INT 1
77239: PPUSH
77240: CALL_OW 273
77244: ST_TO_ADDR
// if ValidHex ( x , y ) then
77245: LD_VAR 0 4
77249: PPUSH
77250: LD_VAR 0 5
77254: PPUSH
77255: CALL_OW 488
77259: IFFALSE 77280
// ComTurnXY ( unit , x , y ) ;
77261: LD_VAR 0 1
77265: PPUSH
77266: LD_VAR 0 4
77270: PPUSH
77271: LD_VAR 0 5
77275: PPUSH
77276: CALL_OW 118
// end ;
77280: LD_VAR 0 3
77284: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77285: LD_INT 0
77287: PPUSH
77288: PPUSH
// result := false ;
77289: LD_ADDR_VAR 0 3
77293: PUSH
77294: LD_INT 0
77296: ST_TO_ADDR
// if not units then
77297: LD_VAR 0 2
77301: NOT
77302: IFFALSE 77306
// exit ;
77304: GO 77351
// for i in units do
77306: LD_ADDR_VAR 0 4
77310: PUSH
77311: LD_VAR 0 2
77315: PUSH
77316: FOR_IN
77317: IFFALSE 77349
// if See ( side , i ) then
77319: LD_VAR 0 1
77323: PPUSH
77324: LD_VAR 0 4
77328: PPUSH
77329: CALL_OW 292
77333: IFFALSE 77347
// begin result := true ;
77335: LD_ADDR_VAR 0 3
77339: PUSH
77340: LD_INT 1
77342: ST_TO_ADDR
// exit ;
77343: POP
77344: POP
77345: GO 77351
// end ;
77347: GO 77316
77349: POP
77350: POP
// end ;
77351: LD_VAR 0 3
77355: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77356: LD_INT 0
77358: PPUSH
77359: PPUSH
77360: PPUSH
77361: PPUSH
// if not unit or not points then
77362: LD_VAR 0 1
77366: NOT
77367: PUSH
77368: LD_VAR 0 2
77372: NOT
77373: OR
77374: IFFALSE 77378
// exit ;
77376: GO 77468
// dist := 99999 ;
77378: LD_ADDR_VAR 0 5
77382: PUSH
77383: LD_INT 99999
77385: ST_TO_ADDR
// for i in points do
77386: LD_ADDR_VAR 0 4
77390: PUSH
77391: LD_VAR 0 2
77395: PUSH
77396: FOR_IN
77397: IFFALSE 77466
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77399: LD_ADDR_VAR 0 6
77403: PUSH
77404: LD_VAR 0 1
77408: PPUSH
77409: LD_VAR 0 4
77413: PUSH
77414: LD_INT 1
77416: ARRAY
77417: PPUSH
77418: LD_VAR 0 4
77422: PUSH
77423: LD_INT 2
77425: ARRAY
77426: PPUSH
77427: CALL_OW 297
77431: ST_TO_ADDR
// if tmpDist < dist then
77432: LD_VAR 0 6
77436: PUSH
77437: LD_VAR 0 5
77441: LESS
77442: IFFALSE 77464
// begin result := i ;
77444: LD_ADDR_VAR 0 3
77448: PUSH
77449: LD_VAR 0 4
77453: ST_TO_ADDR
// dist := tmpDist ;
77454: LD_ADDR_VAR 0 5
77458: PUSH
77459: LD_VAR 0 6
77463: ST_TO_ADDR
// end ; end ;
77464: GO 77396
77466: POP
77467: POP
// end ;
77468: LD_VAR 0 3
77472: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
77473: LD_INT 0
77475: PPUSH
// uc_side := side ;
77476: LD_ADDR_OWVAR 20
77480: PUSH
77481: LD_VAR 0 1
77485: ST_TO_ADDR
// uc_nation := 3 ;
77486: LD_ADDR_OWVAR 21
77490: PUSH
77491: LD_INT 3
77493: ST_TO_ADDR
// vc_chassis := 25 ;
77494: LD_ADDR_OWVAR 37
77498: PUSH
77499: LD_INT 25
77501: ST_TO_ADDR
// vc_engine := engine_siberite ;
77502: LD_ADDR_OWVAR 39
77506: PUSH
77507: LD_INT 3
77509: ST_TO_ADDR
// vc_control := control_computer ;
77510: LD_ADDR_OWVAR 38
77514: PUSH
77515: LD_INT 3
77517: ST_TO_ADDR
// vc_weapon := 59 ;
77518: LD_ADDR_OWVAR 40
77522: PUSH
77523: LD_INT 59
77525: ST_TO_ADDR
// result := CreateVehicle ;
77526: LD_ADDR_VAR 0 5
77530: PUSH
77531: CALL_OW 45
77535: ST_TO_ADDR
// SetDir ( result , d ) ;
77536: LD_VAR 0 5
77540: PPUSH
77541: LD_VAR 0 4
77545: PPUSH
77546: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
77550: LD_VAR 0 5
77554: PPUSH
77555: LD_VAR 0 2
77559: PPUSH
77560: LD_VAR 0 3
77564: PPUSH
77565: LD_INT 0
77567: PPUSH
77568: CALL_OW 48
// end ;
77572: LD_VAR 0 5
77576: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
77577: LD_INT 0
77579: PPUSH
77580: PPUSH
77581: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
77582: LD_ADDR_VAR 0 2
77586: PUSH
77587: LD_INT 0
77589: PUSH
77590: LD_INT 0
77592: PUSH
77593: LD_INT 0
77595: PUSH
77596: LD_INT 0
77598: PUSH
77599: EMPTY
77600: LIST
77601: LIST
77602: LIST
77603: LIST
77604: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
77605: LD_VAR 0 1
77609: NOT
77610: PUSH
77611: LD_VAR 0 1
77615: PPUSH
77616: CALL_OW 264
77620: PUSH
77621: LD_INT 12
77623: PUSH
77624: LD_INT 51
77626: PUSH
77627: LD_INT 32
77629: PUSH
77630: LD_INT 89
77632: PUSH
77633: EMPTY
77634: LIST
77635: LIST
77636: LIST
77637: LIST
77638: IN
77639: NOT
77640: OR
77641: IFFALSE 77645
// exit ;
77643: GO 77743
// for i := 1 to 3 do
77645: LD_ADDR_VAR 0 3
77649: PUSH
77650: DOUBLE
77651: LD_INT 1
77653: DEC
77654: ST_TO_ADDR
77655: LD_INT 3
77657: PUSH
77658: FOR_TO
77659: IFFALSE 77741
// begin tmp := GetCargo ( cargo , i ) ;
77661: LD_ADDR_VAR 0 4
77665: PUSH
77666: LD_VAR 0 1
77670: PPUSH
77671: LD_VAR 0 3
77675: PPUSH
77676: CALL_OW 289
77680: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
77681: LD_ADDR_VAR 0 2
77685: PUSH
77686: LD_VAR 0 2
77690: PPUSH
77691: LD_VAR 0 3
77695: PPUSH
77696: LD_VAR 0 4
77700: PPUSH
77701: CALL_OW 1
77705: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
77706: LD_ADDR_VAR 0 2
77710: PUSH
77711: LD_VAR 0 2
77715: PPUSH
77716: LD_INT 4
77718: PPUSH
77719: LD_VAR 0 2
77723: PUSH
77724: LD_INT 4
77726: ARRAY
77727: PUSH
77728: LD_VAR 0 4
77732: PLUS
77733: PPUSH
77734: CALL_OW 1
77738: ST_TO_ADDR
// end ;
77739: GO 77658
77741: POP
77742: POP
// end ;
77743: LD_VAR 0 2
77747: RET
// export function Length ( array ) ; begin
77748: LD_INT 0
77750: PPUSH
// result := array + 0 ;
77751: LD_ADDR_VAR 0 2
77755: PUSH
77756: LD_VAR 0 1
77760: PUSH
77761: LD_INT 0
77763: PLUS
77764: ST_TO_ADDR
// end ;
77765: LD_VAR 0 2
77769: RET
// export function PrepareArray ( array ) ; begin
77770: LD_INT 0
77772: PPUSH
// result := array diff 0 ;
77773: LD_ADDR_VAR 0 2
77777: PUSH
77778: LD_VAR 0 1
77782: PUSH
77783: LD_INT 0
77785: DIFF
77786: ST_TO_ADDR
// if not result [ 1 ] then
77787: LD_VAR 0 2
77791: PUSH
77792: LD_INT 1
77794: ARRAY
77795: NOT
77796: IFFALSE 77816
// result := Delete ( result , 1 ) ;
77798: LD_ADDR_VAR 0 2
77802: PUSH
77803: LD_VAR 0 2
77807: PPUSH
77808: LD_INT 1
77810: PPUSH
77811: CALL_OW 3
77815: ST_TO_ADDR
// end ;
77816: LD_VAR 0 2
77820: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
77821: LD_INT 0
77823: PPUSH
77824: PPUSH
77825: PPUSH
77826: PPUSH
// sibRocketRange := 25 ;
77827: LD_ADDR_VAR 0 6
77831: PUSH
77832: LD_INT 25
77834: ST_TO_ADDR
// result := false ;
77835: LD_ADDR_VAR 0 4
77839: PUSH
77840: LD_INT 0
77842: ST_TO_ADDR
// for i := 0 to 5 do
77843: LD_ADDR_VAR 0 5
77847: PUSH
77848: DOUBLE
77849: LD_INT 0
77851: DEC
77852: ST_TO_ADDR
77853: LD_INT 5
77855: PUSH
77856: FOR_TO
77857: IFFALSE 77924
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
77859: LD_VAR 0 1
77863: PPUSH
77864: LD_VAR 0 5
77868: PPUSH
77869: LD_VAR 0 6
77873: PPUSH
77874: CALL_OW 272
77878: PPUSH
77879: LD_VAR 0 2
77883: PPUSH
77884: LD_VAR 0 5
77888: PPUSH
77889: LD_VAR 0 6
77893: PPUSH
77894: CALL_OW 273
77898: PPUSH
77899: LD_VAR 0 3
77903: PPUSH
77904: CALL_OW 309
77908: IFFALSE 77922
// begin result := true ;
77910: LD_ADDR_VAR 0 4
77914: PUSH
77915: LD_INT 1
77917: ST_TO_ADDR
// exit ;
77918: POP
77919: POP
77920: GO 77926
// end ;
77922: GO 77856
77924: POP
77925: POP
// end ;
77926: LD_VAR 0 4
77930: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
77931: LD_INT 0
77933: PPUSH
77934: PPUSH
77935: PPUSH
// if btype = b_depot then
77936: LD_VAR 0 2
77940: PUSH
77941: LD_INT 0
77943: EQUAL
77944: IFFALSE 77956
// begin result := true ;
77946: LD_ADDR_VAR 0 3
77950: PUSH
77951: LD_INT 1
77953: ST_TO_ADDR
// exit ;
77954: GO 78072
// end ; pom := GetBase ( depot ) ;
77956: LD_ADDR_VAR 0 4
77960: PUSH
77961: LD_VAR 0 1
77965: PPUSH
77966: CALL_OW 274
77970: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
77971: LD_ADDR_VAR 0 5
77975: PUSH
77976: LD_VAR 0 2
77980: PPUSH
77981: LD_VAR 0 1
77985: PPUSH
77986: CALL_OW 248
77990: PPUSH
77991: CALL_OW 450
77995: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
77996: LD_ADDR_VAR 0 3
78000: PUSH
78001: LD_VAR 0 4
78005: PPUSH
78006: LD_INT 1
78008: PPUSH
78009: CALL_OW 275
78013: PUSH
78014: LD_VAR 0 5
78018: PUSH
78019: LD_INT 1
78021: ARRAY
78022: GREATEREQUAL
78023: PUSH
78024: LD_VAR 0 4
78028: PPUSH
78029: LD_INT 2
78031: PPUSH
78032: CALL_OW 275
78036: PUSH
78037: LD_VAR 0 5
78041: PUSH
78042: LD_INT 2
78044: ARRAY
78045: GREATEREQUAL
78046: AND
78047: PUSH
78048: LD_VAR 0 4
78052: PPUSH
78053: LD_INT 3
78055: PPUSH
78056: CALL_OW 275
78060: PUSH
78061: LD_VAR 0 5
78065: PUSH
78066: LD_INT 3
78068: ARRAY
78069: GREATEREQUAL
78070: AND
78071: ST_TO_ADDR
// end ;
78072: LD_VAR 0 3
78076: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
78077: LD_INT 0
78079: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
78080: LD_VAR 0 1
78084: PPUSH
78085: LD_VAR 0 2
78089: PPUSH
78090: LD_INT 0
78092: PPUSH
78093: LD_INT 0
78095: PPUSH
78096: LD_INT 1
78098: PPUSH
78099: LD_INT 0
78101: PPUSH
78102: CALL_OW 587
// end ;
78106: LD_VAR 0 3
78110: RET
// export function CenterOnNow ( unit ) ; begin
78111: LD_INT 0
78113: PPUSH
// result := IsInUnit ( unit ) ;
78114: LD_ADDR_VAR 0 2
78118: PUSH
78119: LD_VAR 0 1
78123: PPUSH
78124: CALL_OW 310
78128: ST_TO_ADDR
// if not result then
78129: LD_VAR 0 2
78133: NOT
78134: IFFALSE 78146
// result := unit ;
78136: LD_ADDR_VAR 0 2
78140: PUSH
78141: LD_VAR 0 1
78145: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
78146: LD_VAR 0 1
78150: PPUSH
78151: CALL_OW 87
// end ;
78155: LD_VAR 0 2
78159: RET
// export function ComMoveHex ( unit , hex ) ; begin
78160: LD_INT 0
78162: PPUSH
// if not hex then
78163: LD_VAR 0 2
78167: NOT
78168: IFFALSE 78172
// exit ;
78170: GO 78225
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
78172: LD_VAR 0 2
78176: PUSH
78177: LD_INT 1
78179: ARRAY
78180: PPUSH
78181: LD_VAR 0 2
78185: PUSH
78186: LD_INT 2
78188: ARRAY
78189: PPUSH
78190: CALL_OW 428
78194: IFFALSE 78198
// exit ;
78196: GO 78225
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
78198: LD_VAR 0 1
78202: PPUSH
78203: LD_VAR 0 2
78207: PUSH
78208: LD_INT 1
78210: ARRAY
78211: PPUSH
78212: LD_VAR 0 2
78216: PUSH
78217: LD_INT 2
78219: ARRAY
78220: PPUSH
78221: CALL_OW 111
// end ;
78225: LD_VAR 0 3
78229: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
78230: LD_INT 0
78232: PPUSH
78233: PPUSH
78234: PPUSH
// if not unit or not enemy then
78235: LD_VAR 0 1
78239: NOT
78240: PUSH
78241: LD_VAR 0 2
78245: NOT
78246: OR
78247: IFFALSE 78251
// exit ;
78249: GO 78375
// x := GetX ( enemy ) ;
78251: LD_ADDR_VAR 0 4
78255: PUSH
78256: LD_VAR 0 2
78260: PPUSH
78261: CALL_OW 250
78265: ST_TO_ADDR
// y := GetY ( enemy ) ;
78266: LD_ADDR_VAR 0 5
78270: PUSH
78271: LD_VAR 0 2
78275: PPUSH
78276: CALL_OW 251
78280: ST_TO_ADDR
// if ValidHex ( x , y ) then
78281: LD_VAR 0 4
78285: PPUSH
78286: LD_VAR 0 5
78290: PPUSH
78291: CALL_OW 488
78295: IFFALSE 78375
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
78297: LD_VAR 0 2
78301: PPUSH
78302: CALL_OW 247
78306: PUSH
78307: LD_INT 3
78309: PUSH
78310: LD_INT 2
78312: PUSH
78313: EMPTY
78314: LIST
78315: LIST
78316: IN
78317: PUSH
78318: LD_VAR 0 1
78322: PPUSH
78323: CALL_OW 255
78327: PPUSH
78328: LD_VAR 0 2
78332: PPUSH
78333: CALL_OW 292
78337: OR
78338: IFFALSE 78356
// ComAttackUnit ( unit , enemy ) else
78340: LD_VAR 0 1
78344: PPUSH
78345: LD_VAR 0 2
78349: PPUSH
78350: CALL_OW 115
78354: GO 78375
// ComAgressiveMove ( unit , x , y ) ;
78356: LD_VAR 0 1
78360: PPUSH
78361: LD_VAR 0 4
78365: PPUSH
78366: LD_VAR 0 5
78370: PPUSH
78371: CALL_OW 114
// end ;
78375: LD_VAR 0 3
78379: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
78380: LD_INT 0
78382: PPUSH
78383: PPUSH
78384: PPUSH
// list := AreaToList ( area , 0 ) ;
78385: LD_ADDR_VAR 0 5
78389: PUSH
78390: LD_VAR 0 1
78394: PPUSH
78395: LD_INT 0
78397: PPUSH
78398: CALL_OW 517
78402: ST_TO_ADDR
// if not list then
78403: LD_VAR 0 5
78407: NOT
78408: IFFALSE 78412
// exit ;
78410: GO 78542
// if all then
78412: LD_VAR 0 2
78416: IFFALSE 78504
// begin for i := 1 to list [ 1 ] do
78418: LD_ADDR_VAR 0 4
78422: PUSH
78423: DOUBLE
78424: LD_INT 1
78426: DEC
78427: ST_TO_ADDR
78428: LD_VAR 0 5
78432: PUSH
78433: LD_INT 1
78435: ARRAY
78436: PUSH
78437: FOR_TO
78438: IFFALSE 78500
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
78440: LD_ADDR_VAR 0 3
78444: PUSH
78445: LD_VAR 0 3
78449: PPUSH
78450: LD_VAR 0 3
78454: PUSH
78455: LD_INT 1
78457: PLUS
78458: PPUSH
78459: LD_VAR 0 5
78463: PUSH
78464: LD_INT 1
78466: ARRAY
78467: PUSH
78468: LD_VAR 0 4
78472: ARRAY
78473: PUSH
78474: LD_VAR 0 5
78478: PUSH
78479: LD_INT 2
78481: ARRAY
78482: PUSH
78483: LD_VAR 0 4
78487: ARRAY
78488: PUSH
78489: EMPTY
78490: LIST
78491: LIST
78492: PPUSH
78493: CALL_OW 1
78497: ST_TO_ADDR
78498: GO 78437
78500: POP
78501: POP
// exit ;
78502: GO 78542
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
78504: LD_ADDR_VAR 0 3
78508: PUSH
78509: LD_VAR 0 5
78513: PUSH
78514: LD_INT 1
78516: ARRAY
78517: PUSH
78518: LD_INT 1
78520: ARRAY
78521: PUSH
78522: LD_VAR 0 5
78526: PUSH
78527: LD_INT 2
78529: ARRAY
78530: PUSH
78531: LD_INT 1
78533: ARRAY
78534: PUSH
78535: EMPTY
78536: LIST
78537: LIST
78538: PUSH
78539: EMPTY
78540: LIST
78541: ST_TO_ADDR
// end ;
78542: LD_VAR 0 3
78546: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
78547: LD_INT 0
78549: PPUSH
78550: PPUSH
// list := AreaToList ( area , 0 ) ;
78551: LD_ADDR_VAR 0 4
78555: PUSH
78556: LD_VAR 0 1
78560: PPUSH
78561: LD_INT 0
78563: PPUSH
78564: CALL_OW 517
78568: ST_TO_ADDR
// if not list then
78569: LD_VAR 0 4
78573: NOT
78574: IFFALSE 78578
// exit ;
78576: GO 78619
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
78578: LD_ADDR_VAR 0 3
78582: PUSH
78583: LD_VAR 0 4
78587: PUSH
78588: LD_INT 1
78590: ARRAY
78591: PUSH
78592: LD_INT 1
78594: ARRAY
78595: PUSH
78596: LD_VAR 0 4
78600: PUSH
78601: LD_INT 2
78603: ARRAY
78604: PUSH
78605: LD_INT 1
78607: ARRAY
78608: PUSH
78609: LD_VAR 0 2
78613: PUSH
78614: EMPTY
78615: LIST
78616: LIST
78617: LIST
78618: ST_TO_ADDR
// end ;
78619: LD_VAR 0 3
78623: RET
// export function First ( array ) ; begin
78624: LD_INT 0
78626: PPUSH
// if not array then
78627: LD_VAR 0 1
78631: NOT
78632: IFFALSE 78636
// exit ;
78634: GO 78650
// result := array [ 1 ] ;
78636: LD_ADDR_VAR 0 2
78640: PUSH
78641: LD_VAR 0 1
78645: PUSH
78646: LD_INT 1
78648: ARRAY
78649: ST_TO_ADDR
// end ;
78650: LD_VAR 0 2
78654: RET
// export function Last ( array ) ; begin
78655: LD_INT 0
78657: PPUSH
// if not array then
78658: LD_VAR 0 1
78662: NOT
78663: IFFALSE 78667
// exit ;
78665: GO 78683
// result := array [ array ] ;
78667: LD_ADDR_VAR 0 2
78671: PUSH
78672: LD_VAR 0 1
78676: PUSH
78677: LD_VAR 0 1
78681: ARRAY
78682: ST_TO_ADDR
// end ;
78683: LD_VAR 0 2
78687: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
78688: LD_INT 0
78690: PPUSH
78691: PPUSH
// result := [ ] ;
78692: LD_ADDR_VAR 0 5
78696: PUSH
78697: EMPTY
78698: ST_TO_ADDR
// if not array then
78699: LD_VAR 0 1
78703: NOT
78704: IFFALSE 78708
// exit ;
78706: GO 78820
// for i := 1 to array do
78708: LD_ADDR_VAR 0 6
78712: PUSH
78713: DOUBLE
78714: LD_INT 1
78716: DEC
78717: ST_TO_ADDR
78718: LD_VAR 0 1
78722: PUSH
78723: FOR_TO
78724: IFFALSE 78818
// if array [ i ] [ index ] = value then
78726: LD_VAR 0 1
78730: PUSH
78731: LD_VAR 0 6
78735: ARRAY
78736: PUSH
78737: LD_VAR 0 2
78741: ARRAY
78742: PUSH
78743: LD_VAR 0 3
78747: EQUAL
78748: IFFALSE 78816
// begin if indexColumn then
78750: LD_VAR 0 4
78754: IFFALSE 78790
// result := Join ( result , array [ i ] [ indexColumn ] ) else
78756: LD_ADDR_VAR 0 5
78760: PUSH
78761: LD_VAR 0 5
78765: PPUSH
78766: LD_VAR 0 1
78770: PUSH
78771: LD_VAR 0 6
78775: ARRAY
78776: PUSH
78777: LD_VAR 0 4
78781: ARRAY
78782: PPUSH
78783: CALL 74008 0 2
78787: ST_TO_ADDR
78788: GO 78816
// result := Join ( result , array [ i ] ) ;
78790: LD_ADDR_VAR 0 5
78794: PUSH
78795: LD_VAR 0 5
78799: PPUSH
78800: LD_VAR 0 1
78804: PUSH
78805: LD_VAR 0 6
78809: ARRAY
78810: PPUSH
78811: CALL 74008 0 2
78815: ST_TO_ADDR
// end ;
78816: GO 78723
78818: POP
78819: POP
// end ;
78820: LD_VAR 0 5
78824: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
78825: LD_INT 0
78827: PPUSH
// if not vehicles or not parkingPoint then
78828: LD_VAR 0 1
78832: NOT
78833: PUSH
78834: LD_VAR 0 2
78838: NOT
78839: OR
78840: IFFALSE 78844
// exit ;
78842: GO 78942
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
78844: LD_ADDR_VAR 0 1
78848: PUSH
78849: LD_VAR 0 1
78853: PPUSH
78854: LD_INT 50
78856: PUSH
78857: EMPTY
78858: LIST
78859: PUSH
78860: LD_INT 3
78862: PUSH
78863: LD_INT 92
78865: PUSH
78866: LD_VAR 0 2
78870: PUSH
78871: LD_INT 1
78873: ARRAY
78874: PUSH
78875: LD_VAR 0 2
78879: PUSH
78880: LD_INT 2
78882: ARRAY
78883: PUSH
78884: LD_INT 8
78886: PUSH
78887: EMPTY
78888: LIST
78889: LIST
78890: LIST
78891: LIST
78892: PUSH
78893: EMPTY
78894: LIST
78895: LIST
78896: PUSH
78897: EMPTY
78898: LIST
78899: LIST
78900: PPUSH
78901: CALL_OW 72
78905: ST_TO_ADDR
// if not vehicles then
78906: LD_VAR 0 1
78910: NOT
78911: IFFALSE 78915
// exit ;
78913: GO 78942
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
78915: LD_VAR 0 1
78919: PPUSH
78920: LD_VAR 0 2
78924: PUSH
78925: LD_INT 1
78927: ARRAY
78928: PPUSH
78929: LD_VAR 0 2
78933: PUSH
78934: LD_INT 2
78936: ARRAY
78937: PPUSH
78938: CALL_OW 111
// end ;
78942: LD_VAR 0 3
78946: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
78947: LD_INT 0
78949: PPUSH
78950: PPUSH
78951: PPUSH
// if not side or not area then
78952: LD_VAR 0 1
78956: NOT
78957: PUSH
78958: LD_VAR 0 2
78962: NOT
78963: OR
78964: IFFALSE 78968
// exit ;
78966: GO 79087
// tmp := AreaToList ( area , 0 ) ;
78968: LD_ADDR_VAR 0 5
78972: PUSH
78973: LD_VAR 0 2
78977: PPUSH
78978: LD_INT 0
78980: PPUSH
78981: CALL_OW 517
78985: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
78986: LD_ADDR_VAR 0 4
78990: PUSH
78991: DOUBLE
78992: LD_INT 1
78994: DEC
78995: ST_TO_ADDR
78996: LD_VAR 0 5
79000: PUSH
79001: LD_INT 1
79003: ARRAY
79004: PUSH
79005: FOR_TO
79006: IFFALSE 79085
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
79008: LD_VAR 0 5
79012: PUSH
79013: LD_INT 1
79015: ARRAY
79016: PUSH
79017: LD_VAR 0 4
79021: ARRAY
79022: PPUSH
79023: LD_VAR 0 5
79027: PUSH
79028: LD_INT 2
79030: ARRAY
79031: PUSH
79032: LD_VAR 0 4
79036: ARRAY
79037: PPUSH
79038: CALL_OW 351
79042: IFFALSE 79083
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
79044: LD_VAR 0 5
79048: PUSH
79049: LD_INT 1
79051: ARRAY
79052: PUSH
79053: LD_VAR 0 4
79057: ARRAY
79058: PPUSH
79059: LD_VAR 0 5
79063: PUSH
79064: LD_INT 2
79066: ARRAY
79067: PUSH
79068: LD_VAR 0 4
79072: ARRAY
79073: PPUSH
79074: LD_VAR 0 1
79078: PPUSH
79079: CALL_OW 244
// end ;
79083: GO 79005
79085: POP
79086: POP
// end ; end_of_file
79087: LD_VAR 0 3
79091: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79092: LD_VAR 0 1
79096: PUSH
79097: LD_INT 200
79099: DOUBLE
79100: GREATEREQUAL
79101: IFFALSE 79109
79103: LD_INT 299
79105: DOUBLE
79106: LESSEQUAL
79107: IFTRUE 79111
79109: GO 79143
79111: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
79112: LD_VAR 0 1
79116: PPUSH
79117: LD_VAR 0 2
79121: PPUSH
79122: LD_VAR 0 3
79126: PPUSH
79127: LD_VAR 0 4
79131: PPUSH
79132: LD_VAR 0 5
79136: PPUSH
79137: CALL 15630 0 5
79141: GO 79220
79143: LD_INT 300
79145: DOUBLE
79146: GREATEREQUAL
79147: IFFALSE 79155
79149: LD_INT 399
79151: DOUBLE
79152: LESSEQUAL
79153: IFTRUE 79157
79155: GO 79219
79157: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79158: LD_VAR 0 1
79162: PPUSH
79163: LD_VAR 0 2
79167: PPUSH
79168: LD_VAR 0 3
79172: PPUSH
79173: LD_VAR 0 4
79177: PPUSH
79178: LD_VAR 0 5
79182: PPUSH
79183: LD_VAR 0 6
79187: PPUSH
79188: LD_VAR 0 7
79192: PPUSH
79193: LD_VAR 0 8
79197: PPUSH
79198: LD_VAR 0 9
79202: PPUSH
79203: LD_VAR 0 10
79207: PPUSH
79208: LD_VAR 0 11
79212: PPUSH
79213: CALL 32849 0 11
79217: GO 79220
79219: POP
// end ;
79220: PPOPN 11
79222: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79223: LD_VAR 0 1
79227: PPUSH
79228: LD_VAR 0 2
79232: PPUSH
79233: LD_VAR 0 3
79237: PPUSH
79238: LD_VAR 0 4
79242: PPUSH
79243: LD_VAR 0 5
79247: PPUSH
79248: CALL 15095 0 5
// end ; end_of_file
79252: PPOPN 5
79254: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79255: LD_VAR 0 1
79259: PPUSH
79260: LD_VAR 0 2
79264: PPUSH
79265: LD_VAR 0 3
79269: PPUSH
79270: LD_VAR 0 4
79274: PPUSH
79275: LD_VAR 0 5
79279: PPUSH
79280: LD_VAR 0 6
79284: PPUSH
79285: CALL 20501 0 6
// end ;
79289: PPOPN 6
79291: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
79292: LD_INT 0
79294: PPUSH
// begin if not units then
79295: LD_VAR 0 1
79299: NOT
79300: IFFALSE 79304
// exit ;
79302: GO 79304
// end ;
79304: PPOPN 7
79306: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79307: CALL 20388 0 0
// end ;
79311: PPOPN 1
79313: END
