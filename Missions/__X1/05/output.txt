// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 744 0 2
// PrepareArabian ;
  31: CALL 1437 0 0
// PrepareRussian ;
  35: CALL 3043 0 0
// Action ;
  39: CALL 8092 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: LD_INT 7
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_STRING 04_1_RuLabCaptured
 221: PPUSH
 222: LD_INT 0
 224: PPUSH
 225: CALL_OW 30
 229: ST_TO_ADDR
// captureCounter := 0 ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// flamethrowerBuilt := false ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 254: LD_ADDR_OWVAR 79
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// end ;
 262: LD_VAR 0 1
 266: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 267: LD_EXP 10
 271: NOT
 272: PUSH
 273: LD_EXP 9
 277: NOT
 278: AND
 279: PUSH
 280: LD_EXP 39
 284: NOT
 285: AND
 286: PUSH
 287: LD_EXP 40
 291: NOT
 292: AND
 293: IFFALSE 305
 295: GO 297
 297: DISABLE
// SetAchievement ( ACH_EXT ) ;
 298: LD_STRING ACH_EXT
 300: PPUSH
 301: CALL_OW 543
 305: END
// every 0 0$1 trigger captureCounter >= 6 do
 306: LD_EXP 18
 310: PUSH
 311: LD_INT 6
 313: GREATEREQUAL
 314: IFFALSE 326
 316: GO 318
 318: DISABLE
// SetAchievement ( ACH_KEY ) ;
 319: LD_STRING ACH_KEY
 321: PPUSH
 322: CALL_OW 543
 326: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 327: LD_EXP 19
 331: PUSH
 332: LD_INT 3
 334: GREATEREQUAL
 335: IFFALSE 347
 337: GO 339
 339: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 340: LD_STRING ACH_CHEM
 342: PPUSH
 343: CALL_OW 543
 347: END
// every 0 0$1 trigger debug do var i ;
 348: LD_EXP 1
 352: IFFALSE 436
 354: GO 356
 356: DISABLE
 357: LD_INT 0
 359: PPUSH
// begin enable ;
 360: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 361: LD_ADDR_VAR 0 1
 365: PUSH
 366: LD_INT 22
 368: PUSH
 369: LD_INT 2
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 3
 378: PUSH
 379: LD_INT 21
 381: PUSH
 382: LD_INT 3
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 434
// if GetLives ( i ) < 1000 then
 405: LD_VAR 0 1
 409: PPUSH
 410: CALL_OW 256
 414: PUSH
 415: LD_INT 1000
 417: LESS
 418: IFFALSE 432
// SetLives ( i , 1000 ) ;
 420: LD_VAR 0 1
 424: PPUSH
 425: LD_INT 1000
 427: PPUSH
 428: CALL_OW 234
 432: GO 402
 434: POP
 435: POP
// end ; end_of_file
 436: PPOPN 1
 438: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 439: LD_INT 0
 441: PPUSH
// uc_side := side ;
 442: LD_ADDR_OWVAR 20
 446: PUSH
 447: LD_VAR 0 1
 451: ST_TO_ADDR
// uc_nation := nation ;
 452: LD_ADDR_OWVAR 21
 456: PUSH
 457: LD_VAR 0 2
 461: ST_TO_ADDR
// vc_chassis := chassis ;
 462: LD_ADDR_OWVAR 37
 466: PUSH
 467: LD_VAR 0 3
 471: ST_TO_ADDR
// vc_engine := engine ;
 472: LD_ADDR_OWVAR 39
 476: PUSH
 477: LD_VAR 0 4
 481: ST_TO_ADDR
// vc_control := control ;
 482: LD_ADDR_OWVAR 38
 486: PUSH
 487: LD_VAR 0 5
 491: ST_TO_ADDR
// vc_weapon := weapon ;
 492: LD_ADDR_OWVAR 40
 496: PUSH
 497: LD_VAR 0 6
 501: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 502: LD_ADDR_OWVAR 41
 506: PUSH
 507: LD_VAR 0 7
 511: ST_TO_ADDR
// result := CreateVehicle ;
 512: LD_ADDR_VAR 0 8
 516: PUSH
 517: CALL_OW 45
 521: ST_TO_ADDR
// end ;
 522: LD_VAR 0 8
 526: RET
// export function SayX ( units , ident ) ; var i ; begin
 527: LD_INT 0
 529: PPUSH
 530: PPUSH
// result := false ;
 531: LD_ADDR_VAR 0 3
 535: PUSH
 536: LD_INT 0
 538: ST_TO_ADDR
// if not units then
 539: LD_VAR 0 1
 543: NOT
 544: IFFALSE 548
// exit ;
 546: GO 602
// for i in units do
 548: LD_ADDR_VAR 0 4
 552: PUSH
 553: LD_VAR 0 1
 557: PUSH
 558: FOR_IN
 559: IFFALSE 600
// if IsOk ( i ) then
 561: LD_VAR 0 4
 565: PPUSH
 566: CALL_OW 302
 570: IFFALSE 598
// begin Say ( i , ident ) ;
 572: LD_VAR 0 4
 576: PPUSH
 577: LD_VAR 0 2
 581: PPUSH
 582: CALL_OW 88
// result := i ;
 586: LD_ADDR_VAR 0 3
 590: PUSH
 591: LD_VAR 0 4
 595: ST_TO_ADDR
// break ;
 596: GO 600
// end ;
 598: GO 558
 600: POP
 601: POP
// end ;
 602: LD_VAR 0 3
 606: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 607: LD_INT 0
 609: PPUSH
 610: PPUSH
// InitUc ;
 611: CALL_OW 18
// InitHc ;
 615: CALL_OW 19
// uc_side := 0 ;
 619: LD_ADDR_OWVAR 20
 623: PUSH
 624: LD_INT 0
 626: ST_TO_ADDR
// uc_nation := 0 ;
 627: LD_ADDR_OWVAR 21
 631: PUSH
 632: LD_INT 0
 634: ST_TO_ADDR
// for i = 1 to amount do
 635: LD_ADDR_VAR 0 4
 639: PUSH
 640: DOUBLE
 641: LD_INT 1
 643: DEC
 644: ST_TO_ADDR
 645: LD_VAR 0 2
 649: PUSH
 650: FOR_TO
 651: IFFALSE 733
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 653: LD_ADDR_OWVAR 29
 657: PUSH
 658: LD_INT 9
 660: PPUSH
 661: LD_INT 12
 663: PPUSH
 664: CALL_OW 12
 668: PUSH
 669: LD_INT 9
 671: PPUSH
 672: LD_INT 12
 674: PPUSH
 675: CALL_OW 12
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 684: LD_ADDR_OWVAR 35
 688: PUSH
 689: LD_INT 1
 691: NEG
 692: PPUSH
 693: LD_INT 1
 695: PPUSH
 696: CALL_OW 12
 700: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 701: LD_INT 0
 703: PPUSH
 704: LD_INT 12
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 714: CALL_OW 44
 718: PPUSH
 719: LD_VAR 0 1
 723: PPUSH
 724: LD_INT 0
 726: PPUSH
 727: CALL_OW 49
// end ;
 731: GO 650
 733: POP
 734: POP
// InitHc ;
 735: CALL_OW 19
// end ;
 739: LD_VAR 0 3
 743: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 744: LD_INT 0
 746: PPUSH
 747: PPUSH
// uc_side := 0 ;
 748: LD_ADDR_OWVAR 20
 752: PUSH
 753: LD_INT 0
 755: ST_TO_ADDR
// uc_nation := 0 ;
 756: LD_ADDR_OWVAR 21
 760: PUSH
 761: LD_INT 0
 763: ST_TO_ADDR
// for i := 1 to 3 do
 764: LD_ADDR_VAR 0 4
 768: PUSH
 769: DOUBLE
 770: LD_INT 1
 772: DEC
 773: ST_TO_ADDR
 774: LD_INT 3
 776: PUSH
 777: FOR_TO
 778: IFFALSE 815
// begin hc_class := 21 ;
 780: LD_ADDR_OWVAR 28
 784: PUSH
 785: LD_INT 21
 787: ST_TO_ADDR
// hc_gallery :=  ;
 788: LD_ADDR_OWVAR 33
 792: PUSH
 793: LD_STRING 
 795: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 796: CALL_OW 44
 800: PPUSH
 801: LD_VAR 0 1
 805: PPUSH
 806: LD_INT 0
 808: PPUSH
 809: CALL_OW 49
// end ;
 813: GO 777
 815: POP
 816: POP
// for i := 1 to 3 do
 817: LD_ADDR_VAR 0 4
 821: PUSH
 822: DOUBLE
 823: LD_INT 1
 825: DEC
 826: ST_TO_ADDR
 827: LD_INT 3
 829: PUSH
 830: FOR_TO
 831: IFFALSE 868
// begin hc_class := 18 ;
 833: LD_ADDR_OWVAR 28
 837: PUSH
 838: LD_INT 18
 840: ST_TO_ADDR
// hc_gallery :=  ;
 841: LD_ADDR_OWVAR 33
 845: PUSH
 846: LD_STRING 
 848: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 849: CALL_OW 44
 853: PPUSH
 854: LD_VAR 0 1
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL_OW 49
// end ;
 866: GO 830
 868: POP
 869: POP
// for i := 1 to 3 do
 870: LD_ADDR_VAR 0 4
 874: PUSH
 875: DOUBLE
 876: LD_INT 1
 878: DEC
 879: ST_TO_ADDR
 880: LD_INT 3
 882: PUSH
 883: FOR_TO
 884: IFFALSE 921
// begin hc_class := 13 ;
 886: LD_ADDR_OWVAR 28
 890: PUSH
 891: LD_INT 13
 893: ST_TO_ADDR
// hc_gallery :=  ;
 894: LD_ADDR_OWVAR 33
 898: PUSH
 899: LD_STRING 
 901: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 902: CALL_OW 44
 906: PPUSH
 907: LD_VAR 0 1
 911: PPUSH
 912: LD_INT 0
 914: PPUSH
 915: CALL_OW 49
// end ;
 919: GO 883
 921: POP
 922: POP
// for i := 1 to 4 do
 923: LD_ADDR_VAR 0 4
 927: PUSH
 928: DOUBLE
 929: LD_INT 1
 931: DEC
 932: ST_TO_ADDR
 933: LD_INT 4
 935: PUSH
 936: FOR_TO
 937: IFFALSE 974
// begin hc_class := class_frog ;
 939: LD_ADDR_OWVAR 28
 943: PUSH
 944: LD_INT 19
 946: ST_TO_ADDR
// hc_gallery :=  ;
 947: LD_ADDR_OWVAR 33
 951: PUSH
 952: LD_STRING 
 954: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 955: CALL_OW 44
 959: PPUSH
 960: LD_VAR 0 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end ;
 972: GO 936
 974: POP
 975: POP
// end ;
 976: LD_VAR 0 3
 980: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 981: LD_INT 0
 983: PPUSH
 984: PPUSH
 985: PPUSH
// if not observer or not unit then
 986: LD_VAR 0 1
 990: NOT
 991: PUSH
 992: LD_VAR 0 2
 996: NOT
 997: OR
 998: IFFALSE 1002
// exit ;
1000: GO 1050
// if not See ( GetSide ( observer ) , unit ) then
1002: LD_VAR 0 1
1006: PPUSH
1007: CALL_OW 255
1011: PPUSH
1012: LD_VAR 0 2
1016: PPUSH
1017: CALL_OW 292
1021: NOT
1022: IFFALSE 1026
// exit ;
1024: GO 1050
// result := GetDistUnits ( observer , unit ) < 12 ;
1026: LD_ADDR_VAR 0 3
1030: PUSH
1031: LD_VAR 0 1
1035: PPUSH
1036: LD_VAR 0 2
1040: PPUSH
1041: CALL_OW 296
1045: PUSH
1046: LD_INT 12
1048: LESS
1049: ST_TO_ADDR
// end ;
1050: LD_VAR 0 3
1054: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1055: LD_INT 0
1057: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1058: LD_VAR 0 2
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PPUSH
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 2
1074: ARRAY
1075: PPUSH
1076: CALL_OW 488
1080: PUSH
1081: LD_VAR 0 2
1085: PUSH
1086: LD_INT 1
1088: ARRAY
1089: PPUSH
1090: LD_VAR 0 2
1094: PUSH
1095: LD_INT 2
1097: ARRAY
1098: PPUSH
1099: CALL_OW 428
1103: PUSH
1104: LD_INT 0
1106: EQUAL
1107: AND
1108: IFFALSE 1142
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1110: LD_VAR 0 1
1114: PPUSH
1115: LD_VAR 0 2
1119: PUSH
1120: LD_INT 1
1122: ARRAY
1123: PPUSH
1124: LD_VAR 0 2
1128: PUSH
1129: LD_INT 2
1131: ARRAY
1132: PPUSH
1133: LD_VAR 0 3
1137: PPUSH
1138: CALL_OW 48
// end ;
1142: LD_VAR 0 4
1146: RET
// export function ReverseArray ( array ) ; var i ; begin
1147: LD_INT 0
1149: PPUSH
1150: PPUSH
// if not array then
1151: LD_VAR 0 1
1155: NOT
1156: IFFALSE 1160
// exit ;
1158: GO 1218
// result := [ ] ;
1160: LD_ADDR_VAR 0 2
1164: PUSH
1165: EMPTY
1166: ST_TO_ADDR
// for i := 1 to array do
1167: LD_ADDR_VAR 0 3
1171: PUSH
1172: DOUBLE
1173: LD_INT 1
1175: DEC
1176: ST_TO_ADDR
1177: LD_VAR 0 1
1181: PUSH
1182: FOR_TO
1183: IFFALSE 1216
// result := Insert ( result , 1 , array [ i ] ) ;
1185: LD_ADDR_VAR 0 2
1189: PUSH
1190: LD_VAR 0 2
1194: PPUSH
1195: LD_INT 1
1197: PPUSH
1198: LD_VAR 0 1
1202: PUSH
1203: LD_VAR 0 3
1207: ARRAY
1208: PPUSH
1209: CALL_OW 2
1213: ST_TO_ADDR
1214: GO 1182
1216: POP
1217: POP
// end ;
1218: LD_VAR 0 2
1222: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1223: LD_INT 0
1225: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1226: LD_VAR 0 1
1230: PPUSH
1231: LD_VAR 0 2
1235: PPUSH
1236: LD_VAR 0 3
1240: PPUSH
1241: LD_VAR 0 4
1245: PPUSH
1246: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1250: LD_VAR 0 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: LD_VAR 0 3
1264: PPUSH
1265: CALL_OW 331
// end ;
1269: LD_VAR 0 5
1273: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1274: LD_INT 0
1276: PPUSH
// if not units then
1277: LD_VAR 0 1
1281: NOT
1282: IFFALSE 1286
// exit ;
1284: GO 1369
// result := true ;
1286: LD_ADDR_VAR 0 4
1290: PUSH
1291: LD_INT 1
1293: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1294: LD_VAR 0 1
1298: PPUSH
1299: LD_INT 26
1301: PUSH
1302: LD_INT 1
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: PPUSH
1309: CALL_OW 72
1313: PUSH
1314: LD_INT 1
1316: ARRAY
1317: PPUSH
1318: LD_VAR 0 2
1322: PPUSH
1323: CALL_OW 88
1327: NOT
1328: IFFALSE 1369
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1330: LD_ADDR_VAR 0 4
1334: PUSH
1335: LD_VAR 0 1
1339: PPUSH
1340: LD_INT 26
1342: PUSH
1343: LD_INT 2
1345: PUSH
1346: EMPTY
1347: LIST
1348: LIST
1349: PPUSH
1350: CALL_OW 72
1354: PUSH
1355: LD_INT 1
1357: ARRAY
1358: PPUSH
1359: LD_VAR 0 3
1363: PPUSH
1364: CALL_OW 88
1368: ST_TO_ADDR
// end ;
1369: LD_VAR 0 4
1373: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1374: LD_INT 0
1376: PPUSH
1377: PPUSH
// if not group then
1378: LD_VAR 0 2
1382: NOT
1383: IFFALSE 1387
// exit ;
1385: GO 1432
// for i in group do
1387: LD_ADDR_VAR 0 4
1391: PUSH
1392: LD_VAR 0 2
1396: PUSH
1397: FOR_IN
1398: IFFALSE 1430
// if See ( side , i ) then
1400: LD_VAR 0 1
1404: PPUSH
1405: LD_VAR 0 4
1409: PPUSH
1410: CALL_OW 292
1414: IFFALSE 1428
// begin result := true ;
1416: LD_ADDR_VAR 0 3
1420: PUSH
1421: LD_INT 1
1423: ST_TO_ADDR
// exit ;
1424: POP
1425: POP
1426: GO 1432
// end ;
1428: GO 1397
1430: POP
1431: POP
// end ; end_of_file
1432: LD_VAR 0 3
1436: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1437: LD_INT 0
1439: PPUSH
1440: PPUSH
// uc_side := 2 ;
1441: LD_ADDR_OWVAR 20
1445: PUSH
1446: LD_INT 2
1448: ST_TO_ADDR
// uc_nation := 2 ;
1449: LD_ADDR_OWVAR 21
1453: PUSH
1454: LD_INT 2
1456: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1457: LD_ADDR_EXP 21
1461: PUSH
1462: LD_STRING Heike
1464: PPUSH
1465: LD_EXP 1
1469: NOT
1470: PPUSH
1471: LD_EXP 2
1475: PPUSH
1476: CALL 32285 0 3
1480: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1481: LD_ADDR_EXP 24
1485: PUSH
1486: LD_STRING Ibrahim
1488: PPUSH
1489: LD_EXP 1
1493: NOT
1494: PPUSH
1495: LD_EXP 2
1499: PPUSH
1500: CALL 32285 0 3
1504: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1505: LD_ADDR_EXP 22
1509: PUSH
1510: LD_STRING Givi
1512: PPUSH
1513: LD_EXP 1
1517: NOT
1518: PPUSH
1519: LD_EXP 2
1523: PPUSH
1524: CALL 32285 0 3
1528: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1529: LD_ADDR_EXP 25
1533: PUSH
1534: LD_STRING Kamil
1536: PPUSH
1537: LD_EXP 1
1541: NOT
1542: PPUSH
1543: LD_EXP 2
1547: PPUSH
1548: CALL 32285 0 3
1552: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1553: LD_ADDR_EXP 26
1557: PUSH
1558: LD_STRING Kaia
1560: PPUSH
1561: LD_EXP 1
1565: NOT
1566: PPUSH
1567: LD_EXP 2
1571: PPUSH
1572: CALL 32285 0 3
1576: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1577: LD_ADDR_EXP 27
1581: PUSH
1582: LD_STRING Sophia
1584: PPUSH
1585: LD_EXP 1
1589: NOT
1590: PPUSH
1591: LD_EXP 2
1595: PPUSH
1596: CALL 32285 0 3
1600: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1601: LD_ADDR_EXP 28
1605: PUSH
1606: LD_STRING Markov
1608: PPUSH
1609: LD_EXP 1
1613: NOT
1614: PPUSH
1615: LD_EXP 2
1619: PPUSH
1620: CALL 32285 0 3
1624: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1625: LD_ADDR_EXP 33
1629: PUSH
1630: LD_STRING Aviradze
1632: PPUSH
1633: LD_EXP 1
1637: NOT
1638: PPUSH
1639: LD_EXP 2
1643: PPUSH
1644: CALL 32285 0 3
1648: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1649: LD_ADDR_EXP 32
1653: PUSH
1654: LD_STRING Kurt
1656: PPUSH
1657: LD_EXP 1
1661: NOT
1662: PPUSH
1663: LD_EXP 2
1667: PPUSH
1668: CALL 32285 0 3
1672: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1673: LD_ADDR_EXP 23
1677: PUSH
1678: LD_STRING Mike
1680: PPUSH
1681: LD_EXP 1
1685: NOT
1686: PPUSH
1687: LD_EXP 2
1691: PPUSH
1692: CALL 32285 0 3
1696: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1697: LD_ADDR_EXP 30
1701: PUSH
1702: LD_STRING Olaf
1704: PPUSH
1705: LD_INT 0
1707: PPUSH
1708: LD_STRING 
1710: PPUSH
1711: CALL 32285 0 3
1715: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1716: LD_ADDR_EXP 34
1720: PUSH
1721: LD_STRING 04_2_others
1723: PPUSH
1724: CALL_OW 31
1728: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1729: LD_ADDR_EXP 36
1733: PUSH
1734: LD_STRING 04_2_apes
1736: PPUSH
1737: CALL_OW 31
1741: ST_TO_ADDR
// if hasFlamethrower then
1742: LD_EXP 3
1746: IFFALSE 1981
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1748: LD_INT 70
1750: PPUSH
1751: LD_INT 2
1753: PPUSH
1754: LD_INT 2
1756: PPUSH
1757: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1761: LD_ADDR_EXP 35
1765: PUSH
1766: LD_INT 13
1768: PUSH
1769: LD_INT 1
1771: PUSH
1772: LD_INT 1
1774: PUSH
1775: LD_INT 27
1777: PUSH
1778: LD_INT 2
1780: PUSH
1781: LD_INT 1000
1783: PUSH
1784: LD_INT 0
1786: PUSH
1787: LD_INT 0
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: PUSH
1803: LD_INT 13
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: LD_INT 1
1811: PUSH
1812: LD_INT 25
1814: PUSH
1815: LD_INT 2
1817: PUSH
1818: LD_INT 1000
1820: PUSH
1821: LD_INT 0
1823: PUSH
1824: LD_INT 0
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: PUSH
1840: LD_INT 13
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: LD_INT 1
1848: PUSH
1849: LD_INT 26
1851: PUSH
1852: LD_INT 2
1854: PUSH
1855: LD_INT 1000
1857: PUSH
1858: LD_INT 0
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 13
1879: PUSH
1880: LD_INT 1
1882: PUSH
1883: LD_INT 1
1885: PUSH
1886: LD_INT 27
1888: PUSH
1889: LD_INT 2
1891: PUSH
1892: LD_INT 1000
1894: PUSH
1895: LD_INT 0
1897: PUSH
1898: LD_INT 0
1900: PUSH
1901: EMPTY
1902: LIST
1903: LIST
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 13
1916: PUSH
1917: LD_INT 1
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: LD_INT 32
1925: PUSH
1926: LD_INT 2
1928: PUSH
1929: LD_INT 1000
1931: PUSH
1932: LD_INT 0
1934: PUSH
1935: LD_INT 60
1937: PUSH
1938: LD_INT 40
1940: PUSH
1941: LD_INT 20
1943: PUSH
1944: LD_INT 10
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_OWVAR 67
1957: ARRAY
1958: PUSH
1959: EMPTY
1960: LIST
1961: LIST
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: ST_TO_ADDR
// end else
1979: GO 2199
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1981: LD_ADDR_EXP 35
1985: PUSH
1986: LD_INT 13
1988: PUSH
1989: LD_INT 1
1991: PUSH
1992: LD_INT 1
1994: PUSH
1995: LD_INT 25
1997: PUSH
1998: LD_INT 2
2000: PUSH
2001: LD_INT 1000
2003: PUSH
2004: LD_INT 0
2006: PUSH
2007: LD_INT 0
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: PUSH
2023: LD_INT 13
2025: PUSH
2026: LD_INT 1
2028: PUSH
2029: LD_INT 1
2031: PUSH
2032: LD_INT 27
2034: PUSH
2035: LD_INT 2
2037: PUSH
2038: LD_INT 1000
2040: PUSH
2041: LD_INT 0
2043: PUSH
2044: LD_INT 0
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: LD_INT 13
2062: PUSH
2063: LD_INT 1
2065: PUSH
2066: LD_INT 1
2068: PUSH
2069: LD_INT 24
2071: PUSH
2072: LD_INT 2
2074: PUSH
2075: LD_INT 1000
2077: PUSH
2078: LD_INT 0
2080: PUSH
2081: LD_INT 0
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 13
2099: PUSH
2100: LD_INT 1
2102: PUSH
2103: LD_INT 1
2105: PUSH
2106: LD_INT 27
2108: PUSH
2109: LD_INT 2
2111: PUSH
2112: LD_INT 1000
2114: PUSH
2115: LD_INT 0
2117: PUSH
2118: LD_INT 0
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: LIST
2133: PUSH
2134: LD_INT 13
2136: PUSH
2137: LD_INT 1
2139: PUSH
2140: LD_INT 1
2142: PUSH
2143: LD_INT 32
2145: PUSH
2146: LD_INT 2
2148: PUSH
2149: LD_INT 1000
2151: PUSH
2152: LD_INT 0
2154: PUSH
2155: LD_INT 50
2157: PUSH
2158: LD_INT 30
2160: PUSH
2161: LD_INT 20
2163: PUSH
2164: LD_INT 10
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_OWVAR 67
2177: ARRAY
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: ST_TO_ADDR
// end ; uc_side := 5 ;
2199: LD_ADDR_OWVAR 20
2203: PUSH
2204: LD_INT 5
2206: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2207: LD_ADDR_EXP 29
2211: PUSH
2212: LD_STRING Abdul
2214: PPUSH
2215: LD_INT 0
2217: PPUSH
2218: LD_STRING 
2220: PPUSH
2221: CALL 32285 0 3
2225: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2226: LD_ADDR_EXP 31
2230: PUSH
2231: LD_STRING Omar
2233: PPUSH
2234: LD_INT 0
2236: PPUSH
2237: LD_STRING 
2239: PPUSH
2240: CALL 32285 0 3
2244: ST_TO_ADDR
// end ;
2245: LD_VAR 0 1
2249: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2250: LD_INT 0
2252: PPUSH
2253: PPUSH
2254: PPUSH
2255: PPUSH
2256: PPUSH
// pfx := 04_1_ ;
2257: LD_ADDR_VAR 0 2
2261: PUSH
2262: LD_STRING 04_1_
2264: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2265: LD_INT 35
2267: PPUSH
2268: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
2272: LD_INT 3
2274: PPUSH
2275: LD_INT 2
2277: PPUSH
2278: CALL_OW 428
2282: NOT
2283: IFFALSE 2265
// tmp := [ ] ;
2285: LD_ADDR_VAR 0 4
2289: PUSH
2290: EMPTY
2291: ST_TO_ADDR
// uc_side := 5 ;
2292: LD_ADDR_OWVAR 20
2296: PUSH
2297: LD_INT 5
2299: ST_TO_ADDR
// uc_nation := 2 ;
2300: LD_ADDR_OWVAR 21
2304: PUSH
2305: LD_INT 2
2307: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2308: LD_ADDR_EXP 33
2312: PUSH
2313: LD_STRING Aviradze_L
2315: PPUSH
2316: LD_EXP 1
2320: NOT
2321: PPUSH
2322: LD_VAR 0 2
2326: PPUSH
2327: CALL 32285 0 3
2331: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2332: LD_EXP 33
2336: PPUSH
2337: LD_INT 2
2339: PPUSH
2340: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2344: LD_EXP 33
2348: PPUSH
2349: LD_INT 14
2351: PPUSH
2352: LD_INT 0
2354: PPUSH
2355: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
2359: LD_EXP 33
2363: PPUSH
2364: LD_INT 8
2366: PPUSH
2367: LD_INT 6
2369: PPUSH
2370: CALL_OW 111
// AddComHold ( Aviradze ) ;
2374: LD_EXP 33
2378: PPUSH
2379: CALL_OW 200
// tmp := [ Aviradze ] ;
2383: LD_ADDR_VAR 0 4
2387: PUSH
2388: LD_EXP 33
2392: PUSH
2393: EMPTY
2394: LIST
2395: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2396: LD_INT 70
2398: PPUSH
2399: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2403: LD_STRING Ibrahim_L
2405: PPUSH
2406: LD_EXP 1
2410: NOT
2411: PPUSH
2412: LD_VAR 0 2
2416: PPUSH
2417: CALL 32285 0 3
2421: IFFALSE 2521
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2423: LD_ADDR_EXP 24
2427: PUSH
2428: LD_STRING Ibrahim_L
2430: PPUSH
2431: LD_EXP 1
2435: NOT
2436: PPUSH
2437: LD_VAR 0 2
2441: PPUSH
2442: CALL 32285 0 3
2446: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2447: LD_EXP 24
2451: PPUSH
2452: LD_INT 2
2454: PPUSH
2455: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2459: LD_EXP 24
2463: PPUSH
2464: LD_INT 14
2466: PPUSH
2467: LD_INT 0
2469: PPUSH
2470: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
2474: LD_EXP 24
2478: PPUSH
2479: LD_INT 8
2481: PPUSH
2482: LD_INT 7
2484: PPUSH
2485: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2489: LD_EXP 24
2493: PPUSH
2494: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2498: LD_ADDR_VAR 0 4
2502: PUSH
2503: LD_VAR 0 4
2507: PUSH
2508: LD_EXP 24
2512: ADD
2513: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2514: LD_INT 70
2516: PPUSH
2517: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2521: LD_STRING Kaia_L
2523: PPUSH
2524: LD_EXP 1
2528: NOT
2529: PPUSH
2530: LD_VAR 0 2
2534: PPUSH
2535: CALL 32285 0 3
2539: IFFALSE 2639
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2541: LD_ADDR_EXP 26
2545: PUSH
2546: LD_STRING Kaia_L
2548: PPUSH
2549: LD_EXP 1
2553: NOT
2554: PPUSH
2555: LD_VAR 0 2
2559: PPUSH
2560: CALL 32285 0 3
2564: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2565: LD_EXP 26
2569: PPUSH
2570: LD_INT 2
2572: PPUSH
2573: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2577: LD_EXP 26
2581: PPUSH
2582: LD_INT 14
2584: PPUSH
2585: LD_INT 0
2587: PPUSH
2588: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
2592: LD_EXP 26
2596: PPUSH
2597: LD_INT 8
2599: PPUSH
2600: LD_INT 7
2602: PPUSH
2603: CALL_OW 111
// AddComHold ( Kaia ) ;
2607: LD_EXP 26
2611: PPUSH
2612: CALL_OW 200
// tmp := tmp ^ Kaia ;
2616: LD_ADDR_VAR 0 4
2620: PUSH
2621: LD_VAR 0 4
2625: PUSH
2626: LD_EXP 26
2630: ADD
2631: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2632: LD_INT 70
2634: PPUSH
2635: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2639: LD_STRING Kamil_L
2641: PPUSH
2642: LD_EXP 1
2646: NOT
2647: PPUSH
2648: LD_VAR 0 2
2652: PPUSH
2653: CALL 32285 0 3
2657: IFFALSE 2757
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2659: LD_ADDR_EXP 25
2663: PUSH
2664: LD_STRING Kamil_L
2666: PPUSH
2667: LD_EXP 1
2671: NOT
2672: PPUSH
2673: LD_VAR 0 2
2677: PPUSH
2678: CALL 32285 0 3
2682: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2683: LD_EXP 25
2687: PPUSH
2688: LD_INT 2
2690: PPUSH
2691: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2695: LD_EXP 25
2699: PPUSH
2700: LD_INT 14
2702: PPUSH
2703: LD_INT 0
2705: PPUSH
2706: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
2710: LD_EXP 25
2714: PPUSH
2715: LD_INT 8
2717: PPUSH
2718: LD_INT 7
2720: PPUSH
2721: CALL_OW 111
// AddComHold ( Kamil ) ;
2725: LD_EXP 25
2729: PPUSH
2730: CALL_OW 200
// tmp := tmp ^ Kamil ;
2734: LD_ADDR_VAR 0 4
2738: PUSH
2739: LD_VAR 0 4
2743: PUSH
2744: LD_EXP 25
2748: ADD
2749: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2750: LD_INT 70
2752: PPUSH
2753: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2757: LD_STRING Sophia_L
2759: PPUSH
2760: LD_EXP 1
2764: NOT
2765: PPUSH
2766: LD_VAR 0 2
2770: PPUSH
2771: CALL 32285 0 3
2775: IFFALSE 2875
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2777: LD_ADDR_EXP 27
2781: PUSH
2782: LD_STRING Sophia_L
2784: PPUSH
2785: LD_EXP 1
2789: NOT
2790: PPUSH
2791: LD_VAR 0 2
2795: PPUSH
2796: CALL 32285 0 3
2800: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2801: LD_EXP 27
2805: PPUSH
2806: LD_INT 2
2808: PPUSH
2809: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2813: LD_EXP 27
2817: PPUSH
2818: LD_INT 14
2820: PPUSH
2821: LD_INT 0
2823: PPUSH
2824: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
2828: LD_EXP 27
2832: PPUSH
2833: LD_INT 9
2835: PPUSH
2836: LD_INT 6
2838: PPUSH
2839: CALL_OW 111
// AddComHold ( Sophia ) ;
2843: LD_EXP 27
2847: PPUSH
2848: CALL_OW 200
// tmp := tmp ^ Sophia ;
2852: LD_ADDR_VAR 0 4
2856: PUSH
2857: LD_VAR 0 4
2861: PUSH
2862: LD_EXP 27
2866: ADD
2867: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2868: LD_INT 70
2870: PPUSH
2871: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2875: LD_ADDR_VAR 0 5
2879: PUSH
2880: LD_STRING 04_1_others_L
2882: PPUSH
2883: CALL_OW 31
2887: ST_TO_ADDR
// if tmp2 then
2888: LD_VAR 0 5
2892: IFFALSE 2989
// for i in tmp2 do
2894: LD_ADDR_VAR 0 3
2898: PUSH
2899: LD_VAR 0 5
2903: PUSH
2904: FOR_IN
2905: IFFALSE 2987
// begin SetDir ( i , 2 ) ;
2907: LD_VAR 0 3
2911: PPUSH
2912: LD_INT 2
2914: PPUSH
2915: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2919: LD_VAR 0 3
2923: PPUSH
2924: LD_INT 14
2926: PPUSH
2927: LD_INT 0
2929: PPUSH
2930: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2934: LD_ADDR_EXP 34
2938: PUSH
2939: LD_EXP 34
2943: PPUSH
2944: LD_EXP 34
2948: PUSH
2949: LD_INT 1
2951: PLUS
2952: PPUSH
2953: LD_VAR 0 3
2957: PPUSH
2958: CALL_OW 1
2962: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2963: LD_VAR 0 3
2967: PPUSH
2968: LD_INT 17
2970: PPUSH
2971: LD_INT 14
2973: PPUSH
2974: CALL_OW 111
// wait ( 0 0$2 ) ;
2978: LD_INT 70
2980: PPUSH
2981: CALL_OW 67
// end ;
2985: GO 2904
2987: POP
2988: POP
// for i in tmp union tmp2 do
2989: LD_ADDR_VAR 0 3
2993: PUSH
2994: LD_VAR 0 4
2998: PUSH
2999: LD_VAR 0 5
3003: UNION
3004: PUSH
3005: FOR_IN
3006: IFFALSE 3036
// begin SetSide ( i , 2 ) ;
3008: LD_VAR 0 3
3012: PPUSH
3013: LD_INT 2
3015: PPUSH
3016: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
3020: LD_VAR 0 3
3024: PPUSH
3025: LD_EXP 21
3029: PPUSH
3030: CALL_OW 112
// end ;
3034: GO 3005
3036: POP
3037: POP
// end ; end_of_file
3038: LD_VAR 0 1
3042: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
3043: LD_INT 0
3045: PPUSH
3046: PPUSH
3047: PPUSH
// uc_side := 3 ;
3048: LD_ADDR_OWVAR 20
3052: PUSH
3053: LD_INT 3
3055: ST_TO_ADDR
// uc_nation := 3 ;
3056: LD_ADDR_OWVAR 21
3060: PUSH
3061: LD_INT 3
3063: ST_TO_ADDR
// crossRoadGuard := [ ] ;
3064: LD_ADDR_EXP 37
3068: PUSH
3069: EMPTY
3070: ST_TO_ADDR
// oilBaseGuard := [ ] ;
3071: LD_ADDR_EXP 38
3075: PUSH
3076: EMPTY
3077: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3078: LD_ADDR_EXP 41
3082: PUSH
3083: EMPTY
3084: ST_TO_ADDR
// for i := 1 to 2 do
3085: LD_ADDR_VAR 0 2
3089: PUSH
3090: DOUBLE
3091: LD_INT 1
3093: DEC
3094: ST_TO_ADDR
3095: LD_INT 2
3097: PUSH
3098: FOR_TO
3099: IFFALSE 3238
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3101: LD_INT 0
3103: PPUSH
3104: LD_INT 1
3106: PPUSH
3107: LD_INT 3
3109: PUSH
3110: LD_INT 4
3112: PUSH
3113: LD_INT 5
3115: PUSH
3116: LD_INT 6
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: PUSH
3125: LD_OWVAR 67
3129: ARRAY
3130: PPUSH
3131: CALL_OW 380
// un := CreateHuman ;
3135: LD_ADDR_VAR 0 3
3139: PUSH
3140: CALL_OW 44
3144: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3145: LD_ADDR_EXP 37
3149: PUSH
3150: LD_EXP 37
3154: PPUSH
3155: LD_EXP 37
3159: PUSH
3160: LD_INT 1
3162: PLUS
3163: PPUSH
3164: LD_VAR 0 3
3168: PPUSH
3169: CALL_OW 1
3173: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3174: LD_VAR 0 3
3178: PPUSH
3179: LD_INT 100
3181: PPUSH
3182: LD_INT 63
3184: PPUSH
3185: LD_INT 3
3187: PPUSH
3188: LD_INT 0
3190: PPUSH
3191: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3195: LD_VAR 0 3
3199: PPUSH
3200: LD_INT 97
3202: PPUSH
3203: LD_INT 64
3205: PPUSH
3206: CALL_OW 428
3210: PUSH
3211: LD_INT 98
3213: PPUSH
3214: LD_INT 58
3216: PPUSH
3217: CALL_OW 428
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: LD_VAR 0 2
3230: ARRAY
3231: PPUSH
3232: CALL_OW 120
// end ;
3236: GO 3098
3238: POP
3239: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3240: LD_INT 51
3242: PPUSH
3243: LD_INT 77
3245: PPUSH
3246: CALL_OW 428
3250: PPUSH
3251: CALL_OW 274
3255: PPUSH
3256: LD_INT 1
3258: PPUSH
3259: LD_INT 120
3261: PPUSH
3262: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3266: LD_INT 10
3268: PPUSH
3269: CALL_OW 274
3273: PPUSH
3274: LD_INT 2
3276: PPUSH
3277: LD_INT 300
3279: PPUSH
3280: CALL_OW 277
// for i := 1 to 2 do
3284: LD_ADDR_VAR 0 2
3288: PUSH
3289: DOUBLE
3290: LD_INT 1
3292: DEC
3293: ST_TO_ADDR
3294: LD_INT 2
3296: PUSH
3297: FOR_TO
3298: IFFALSE 3416
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3300: LD_INT 0
3302: PPUSH
3303: LD_INT 1
3305: PPUSH
3306: LD_INT 3
3308: PUSH
3309: LD_INT 4
3311: PUSH
3312: LD_INT 5
3314: PUSH
3315: LD_INT 6
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: PUSH
3324: LD_OWVAR 67
3328: ARRAY
3329: PPUSH
3330: CALL_OW 380
// un := CreateHuman ;
3334: LD_ADDR_VAR 0 3
3338: PUSH
3339: CALL_OW 44
3343: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3344: LD_ADDR_EXP 38
3348: PUSH
3349: LD_EXP 38
3353: PPUSH
3354: LD_EXP 38
3358: PUSH
3359: LD_INT 1
3361: PLUS
3362: PPUSH
3363: LD_VAR 0 3
3367: PPUSH
3368: CALL_OW 1
3372: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3373: LD_VAR 0 3
3377: PPUSH
3378: LD_INT 198
3380: PPUSH
3381: LD_INT 106
3383: PPUSH
3384: CALL_OW 428
3388: PUSH
3389: LD_INT 205
3391: PPUSH
3392: LD_INT 114
3394: PPUSH
3395: CALL_OW 428
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: LD_VAR 0 2
3408: ARRAY
3409: PPUSH
3410: CALL_OW 52
// end ;
3414: GO 3297
3416: POP
3417: POP
// for i := 1 to 2 do
3418: LD_ADDR_VAR 0 2
3422: PUSH
3423: DOUBLE
3424: LD_INT 1
3426: DEC
3427: ST_TO_ADDR
3428: LD_INT 2
3430: PUSH
3431: FOR_TO
3432: IFFALSE 3509
// begin PrepareHuman ( false , 2 , 3 ) ;
3434: LD_INT 0
3436: PPUSH
3437: LD_INT 2
3439: PPUSH
3440: LD_INT 3
3442: PPUSH
3443: CALL_OW 380
// un := CreateHuman ;
3447: LD_ADDR_VAR 0 3
3451: PUSH
3452: CALL_OW 44
3456: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3457: LD_ADDR_EXP 38
3461: PUSH
3462: LD_EXP 38
3466: PPUSH
3467: LD_EXP 38
3471: PUSH
3472: LD_INT 1
3474: PLUS
3475: PPUSH
3476: LD_VAR 0 3
3480: PPUSH
3481: CALL_OW 1
3485: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3486: LD_VAR 0 3
3490: PPUSH
3491: LD_INT 204
3493: PPUSH
3494: LD_INT 108
3496: PPUSH
3497: LD_INT 2
3499: PPUSH
3500: LD_INT 0
3502: PPUSH
3503: CALL_OW 50
// end ;
3507: GO 3431
3509: POP
3510: POP
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
3511: LD_ADDR_VAR 0 2
3515: PUSH
3516: DOUBLE
3517: LD_INT 1
3519: DEC
3520: ST_TO_ADDR
3521: LD_INT 4
3523: PUSH
3524: LD_INT 5
3526: PUSH
3527: LD_INT 6
3529: PUSH
3530: LD_INT 7
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: PUSH
3539: LD_OWVAR 67
3543: ARRAY
3544: PUSH
3545: FOR_TO
3546: IFFALSE 3692
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3548: LD_INT 0
3550: PPUSH
3551: LD_INT 1
3553: PUSH
3554: LD_INT 1
3556: PUSH
3557: LD_INT 2
3559: PUSH
3560: LD_INT 4
3562: PUSH
3563: LD_INT 1
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: PUSH
3573: LD_INT 1
3575: PPUSH
3576: LD_INT 5
3578: PPUSH
3579: CALL_OW 12
3583: ARRAY
3584: PPUSH
3585: LD_INT 3
3587: PUSH
3588: LD_INT 4
3590: PUSH
3591: LD_INT 5
3593: PUSH
3594: LD_INT 5
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: PUSH
3603: LD_OWVAR 67
3607: ARRAY
3608: PPUSH
3609: CALL_OW 380
// un := CreateHuman ;
3613: LD_ADDR_VAR 0 3
3617: PUSH
3618: CALL_OW 44
3622: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroupArea , false ) then
3623: LD_VAR 0 3
3627: PPUSH
3628: LD_INT 10
3630: PPUSH
3631: LD_INT 0
3633: PPUSH
3634: CALL 67936 0 3
3638: IFFALSE 3690
// begin ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3640: LD_ADDR_EXP 39
3644: PUSH
3645: LD_EXP 39
3649: PPUSH
3650: LD_EXP 39
3654: PUSH
3655: LD_INT 1
3657: PLUS
3658: PPUSH
3659: LD_VAR 0 3
3663: PPUSH
3664: CALL_OW 1
3668: ST_TO_ADDR
// if Prob ( 50 ) then
3669: LD_INT 50
3671: PPUSH
3672: CALL_OW 13
3676: IFFALSE 3690
// ForceSleep ( un , true ) ;
3678: LD_VAR 0 3
3682: PPUSH
3683: LD_INT 1
3685: PPUSH
3686: CALL_OW 585
// end ; end ;
3690: GO 3545
3692: POP
3693: POP
// for i := 1 to 3 do
3694: LD_ADDR_VAR 0 2
3698: PUSH
3699: DOUBLE
3700: LD_INT 1
3702: DEC
3703: ST_TO_ADDR
3704: LD_INT 3
3706: PUSH
3707: FOR_TO
3708: IFFALSE 3802
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
3710: LD_INT 0
3712: PPUSH
3713: LD_INT 1
3715: PPUSH
3716: LD_INT 3
3718: PUSH
3719: LD_INT 4
3721: PUSH
3722: LD_INT 4
3724: PUSH
3725: LD_INT 5
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: PUSH
3734: LD_OWVAR 67
3738: ARRAY
3739: PPUSH
3740: CALL_OW 380
// un := CreateHuman ;
3744: LD_ADDR_VAR 0 3
3748: PUSH
3749: CALL_OW 44
3753: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3754: LD_VAR 0 3
3758: PPUSH
3759: LD_INT 11
3761: PPUSH
3762: LD_INT 0
3764: PPUSH
3765: CALL 67936 0 3
3769: IFFALSE 3800
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3771: LD_ADDR_EXP 39
3775: PUSH
3776: LD_EXP 39
3780: PPUSH
3781: LD_EXP 39
3785: PUSH
3786: LD_INT 1
3788: PLUS
3789: PPUSH
3790: LD_VAR 0 3
3794: PPUSH
3795: CALL_OW 1
3799: ST_TO_ADDR
// end ;
3800: GO 3707
3802: POP
3803: POP
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3804: LD_ADDR_VAR 0 2
3808: PUSH
3809: DOUBLE
3810: LD_INT 1
3812: DEC
3813: ST_TO_ADDR
3814: LD_INT 5
3816: PUSH
3817: LD_INT 6
3819: PUSH
3820: LD_INT 7
3822: PUSH
3823: LD_INT 8
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: PUSH
3832: LD_OWVAR 67
3836: ARRAY
3837: PUSH
3838: FOR_TO
3839: IFFALSE 3985
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3841: LD_INT 0
3843: PPUSH
3844: LD_INT 1
3846: PUSH
3847: LD_INT 1
3849: PUSH
3850: LD_INT 2
3852: PUSH
3853: LD_INT 4
3855: PUSH
3856: LD_INT 1
3858: PUSH
3859: EMPTY
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: PUSH
3866: LD_INT 1
3868: PPUSH
3869: LD_INT 5
3871: PPUSH
3872: CALL_OW 12
3876: ARRAY
3877: PPUSH
3878: LD_INT 3
3880: PUSH
3881: LD_INT 4
3883: PUSH
3884: LD_INT 5
3886: PUSH
3887: LD_INT 5
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: PUSH
3896: LD_OWVAR 67
3900: ARRAY
3901: PPUSH
3902: CALL_OW 380
// un := CreateHuman ;
3906: LD_ADDR_VAR 0 3
3910: PUSH
3911: CALL_OW 44
3915: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3916: LD_VAR 0 3
3920: PPUSH
3921: LD_INT 15
3923: PPUSH
3924: LD_INT 0
3926: PPUSH
3927: CALL 67936 0 3
3931: IFFALSE 3983
// begin ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3933: LD_ADDR_EXP 40
3937: PUSH
3938: LD_EXP 40
3942: PPUSH
3943: LD_EXP 40
3947: PUSH
3948: LD_INT 1
3950: PLUS
3951: PPUSH
3952: LD_VAR 0 3
3956: PPUSH
3957: CALL_OW 1
3961: ST_TO_ADDR
// if Prob ( 50 ) then
3962: LD_INT 50
3964: PPUSH
3965: CALL_OW 13
3969: IFFALSE 3983
// ForceSleep ( un , true ) ;
3971: LD_VAR 0 3
3975: PPUSH
3976: LD_INT 1
3978: PPUSH
3979: CALL_OW 585
// end ; end ;
3983: GO 3838
3985: POP
3986: POP
// end ;
3987: LD_VAR 0 1
3991: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3992: LD_INT 0
3994: PPUSH
3995: PPUSH
3996: PPUSH
// uc_side := 3 ;
3997: LD_ADDR_OWVAR 20
4001: PUSH
4002: LD_INT 3
4004: ST_TO_ADDR
// uc_nation := 3 ;
4005: LD_ADDR_OWVAR 21
4009: PUSH
4010: LD_INT 3
4012: ST_TO_ADDR
// for i := 1 to 6 do
4013: LD_ADDR_VAR 0 2
4017: PUSH
4018: DOUBLE
4019: LD_INT 1
4021: DEC
4022: ST_TO_ADDR
4023: LD_INT 6
4025: PUSH
4026: FOR_TO
4027: IFFALSE 4106
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
4029: LD_INT 0
4031: PPUSH
4032: LD_INT 1
4034: PUSH
4035: LD_INT 4
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: PUSH
4042: LD_INT 1
4044: PPUSH
4045: LD_INT 2
4047: PPUSH
4048: CALL_OW 12
4052: ARRAY
4053: PPUSH
4054: LD_INT 0
4056: PPUSH
4057: CALL_OW 380
// un := CreateHuman ;
4061: LD_ADDR_VAR 0 3
4065: PUSH
4066: CALL_OW 44
4070: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
4071: LD_VAR 0 3
4075: PPUSH
4076: LD_INT 54
4078: PPUSH
4079: LD_INT 88
4081: PPUSH
4082: LD_INT 12
4084: PPUSH
4085: LD_INT 0
4087: PPUSH
4088: CALL_OW 50
// SetLives ( un , 1 ) ;
4092: LD_VAR 0 3
4096: PPUSH
4097: LD_INT 1
4099: PPUSH
4100: CALL_OW 234
// end ;
4104: GO 4026
4106: POP
4107: POP
// uc_side := 3 ;
4108: LD_ADDR_OWVAR 20
4112: PUSH
4113: LD_INT 3
4115: ST_TO_ADDR
// uc_nation := 0 ;
4116: LD_ADDR_OWVAR 21
4120: PUSH
4121: LD_INT 0
4123: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4124: LD_ADDR_EXP 42
4128: PUSH
4129: EMPTY
4130: ST_TO_ADDR
// apeEngGroup := [ ] ;
4131: LD_ADDR_EXP 43
4135: PUSH
4136: EMPTY
4137: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
4138: LD_ADDR_VAR 0 2
4142: PUSH
4143: DOUBLE
4144: LD_INT 1
4146: DEC
4147: ST_TO_ADDR
4148: LD_INT 4
4150: PUSH
4151: LD_INT 5
4153: PUSH
4154: LD_INT 6
4156: PUSH
4157: LD_INT 7
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: PUSH
4166: LD_OWVAR 67
4170: ARRAY
4171: PUSH
4172: FOR_TO
4173: IFFALSE 4291
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
4175: LD_INT 0
4177: PPUSH
4178: LD_INT 15
4180: PPUSH
4181: LD_INT 3
4183: PUSH
4184: LD_INT 4
4186: PUSH
4187: LD_INT 5
4189: PUSH
4190: LD_INT 6
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: PUSH
4199: LD_OWVAR 67
4203: ARRAY
4204: PPUSH
4205: CALL_OW 380
// un := CreateHuman ;
4209: LD_ADDR_VAR 0 3
4213: PUSH
4214: CALL_OW 44
4218: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4219: LD_ADDR_EXP 42
4223: PUSH
4224: LD_EXP 42
4228: PPUSH
4229: LD_EXP 42
4233: PUSH
4234: LD_INT 1
4236: PLUS
4237: PPUSH
4238: LD_VAR 0 3
4242: PPUSH
4243: CALL_OW 1
4247: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4248: LD_VAR 0 3
4252: PPUSH
4253: LD_INT 0
4255: PPUSH
4256: LD_INT 5
4258: PPUSH
4259: CALL_OW 12
4263: PPUSH
4264: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4268: LD_VAR 0 3
4272: PPUSH
4273: LD_INT 56
4275: PPUSH
4276: LD_INT 82
4278: PPUSH
4279: LD_INT 6
4281: PPUSH
4282: LD_INT 0
4284: PPUSH
4285: CALL_OW 50
// end ;
4289: GO 4172
4291: POP
4292: POP
// for i := 1 to 2 do
4293: LD_ADDR_VAR 0 2
4297: PUSH
4298: DOUBLE
4299: LD_INT 1
4301: DEC
4302: ST_TO_ADDR
4303: LD_INT 2
4305: PUSH
4306: FOR_TO
4307: IFFALSE 4383
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4309: LD_INT 0
4311: PPUSH
4312: LD_INT 16
4314: PPUSH
4315: LD_INT 4
4317: PPUSH
4318: CALL_OW 380
// un := CreateHuman ;
4322: LD_ADDR_VAR 0 3
4326: PUSH
4327: CALL_OW 44
4331: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4332: LD_ADDR_EXP 43
4336: PUSH
4337: LD_EXP 43
4341: PPUSH
4342: LD_EXP 43
4346: PUSH
4347: LD_INT 1
4349: PLUS
4350: PPUSH
4351: LD_VAR 0 3
4355: PPUSH
4356: CALL_OW 1
4360: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4361: LD_VAR 0 3
4365: PPUSH
4366: LD_INT 51
4368: PPUSH
4369: LD_INT 77
4371: PPUSH
4372: CALL_OW 428
4376: PPUSH
4377: CALL_OW 52
// end ;
4381: GO 4306
4383: POP
4384: POP
// end ;
4385: LD_VAR 0 1
4389: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4390: LD_EXP 42
4394: PPUSH
4395: LD_INT 3
4397: PUSH
4398: LD_INT 24
4400: PUSH
4401: LD_INT 600
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: PUSH
4412: LD_INT 3
4414: PUSH
4415: LD_INT 54
4417: PUSH
4418: EMPTY
4419: LIST
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: PPUSH
4429: CALL_OW 72
4433: PUSH
4434: LD_INT 66
4436: PPUSH
4437: LD_INT 89
4439: PPUSH
4440: CALL_OW 428
4444: PPUSH
4445: CALL_OW 302
4449: AND
4450: IFFALSE 4535
4452: GO 4454
4454: DISABLE
4455: LD_INT 0
4457: PPUSH
// begin enable ;
4458: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4459: LD_ADDR_VAR 0 1
4463: PUSH
4464: LD_EXP 42
4468: PPUSH
4469: LD_INT 3
4471: PUSH
4472: LD_INT 24
4474: PUSH
4475: LD_INT 600
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PUSH
4486: LD_INT 3
4488: PUSH
4489: LD_INT 54
4491: PUSH
4492: EMPTY
4493: LIST
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PPUSH
4503: CALL_OW 72
4507: PUSH
4508: FOR_IN
4509: IFFALSE 4533
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4511: LD_VAR 0 1
4515: PPUSH
4516: LD_INT 66
4518: PPUSH
4519: LD_INT 89
4521: PPUSH
4522: CALL_OW 428
4526: PPUSH
4527: CALL_OW 120
4531: GO 4508
4533: POP
4534: POP
// end ;
4535: PPOPN 1
4537: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4538: LD_INT 22
4540: PUSH
4541: LD_INT 2
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PUSH
4548: LD_INT 92
4550: PUSH
4551: LD_INT 54
4553: PUSH
4554: LD_INT 77
4556: PUSH
4557: LD_INT 8
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PPUSH
4570: CALL_OW 69
4574: IFFALSE 4638
4576: GO 4578
4578: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4579: LD_EXP 43
4583: PPUSH
4584: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4588: LD_EXP 43
4592: PPUSH
4593: LD_INT 22
4595: PUSH
4596: LD_INT 2
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: PUSH
4603: LD_INT 92
4605: PUSH
4606: LD_INT 54
4608: PUSH
4609: LD_INT 77
4611: PUSH
4612: LD_INT 8
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: PPUSH
4625: CALL_OW 69
4629: PUSH
4630: LD_INT 1
4632: ARRAY
4633: PPUSH
4634: CALL_OW 175
// end ;
4638: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag , enemy ; begin
4639: LD_INT 0
4641: PPUSH
4642: PPUSH
4643: PPUSH
4644: PPUSH
4645: PPUSH
4646: PPUSH
4647: PPUSH
4648: PPUSH
4649: PPUSH
4650: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4651: LD_ADDR_VAR 0 3
4655: PUSH
4656: LD_INT 1
4658: PPUSH
4659: LD_INT 3
4661: PPUSH
4662: CALL_OW 12
4666: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4667: LD_ADDR_VAR 0 5
4671: PUSH
4672: LD_INT 16
4674: PUSH
4675: LD_INT 17
4677: PUSH
4678: LD_INT 19
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: LIST
4685: PUSH
4686: LD_VAR 0 3
4690: ARRAY
4691: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4692: LD_ADDR_VAR 0 7
4696: PUSH
4697: LD_INT 159
4699: PUSH
4700: LD_INT 25
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PUSH
4707: LD_INT 137
4709: PUSH
4710: LD_INT 37
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: LD_INT 123
4719: PUSH
4720: LD_INT 55
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: PUSH
4727: LD_INT 115
4729: PUSH
4730: LD_INT 71
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: PUSH
4737: LD_INT 106
4739: PUSH
4740: LD_INT 88
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: PUSH
4747: LD_INT 97
4749: PUSH
4750: LD_INT 114
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: LD_INT 75
4759: PUSH
4760: LD_INT 146
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: PUSH
4776: LD_INT 206
4778: PUSH
4779: LD_INT 135
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PUSH
4786: LD_INT 184
4788: PUSH
4789: LD_INT 111
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 154
4798: PUSH
4799: LD_INT 97
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PUSH
4806: LD_INT 122
4808: PUSH
4809: LD_INT 80
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 109
4818: PUSH
4819: LD_INT 78
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: LD_INT 97
4828: PUSH
4829: LD_INT 113
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 75
4838: PUSH
4839: LD_INT 147
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 185
4857: PUSH
4858: LD_INT 72
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: LD_INT 171
4867: PUSH
4868: LD_INT 83
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PUSH
4875: LD_INT 161
4877: PUSH
4878: LD_INT 99
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PUSH
4885: LD_INT 125
4887: PUSH
4888: LD_INT 82
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: PUSH
4895: LD_INT 105
4897: PUSH
4898: LD_INT 90
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PUSH
4905: LD_INT 96
4907: PUSH
4908: LD_INT 116
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: LD_INT 75
4917: PUSH
4918: LD_INT 147
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: LIST
4938: PUSH
4939: LD_VAR 0 3
4943: ARRAY
4944: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4945: LD_ADDR_VAR 0 4
4949: PUSH
4950: LD_INT 4
4952: PUSH
4953: LD_INT 5
4955: PUSH
4956: LD_INT 3
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: LIST
4963: PUSH
4964: LD_VAR 0 3
4968: ARRAY
4969: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4970: LD_ADDR_VAR 0 6
4974: PUSH
4975: LD_INT 22
4977: PUSH
4978: LD_INT 20
4980: PUSH
4981: LD_INT 21
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: LIST
4988: PUSH
4989: LD_VAR 0 3
4993: ARRAY
4994: ST_TO_ADDR
// for i := 1 to 2 do
4995: LD_ADDR_VAR 0 2
4999: PUSH
5000: DOUBLE
5001: LD_INT 1
5003: DEC
5004: ST_TO_ADDR
5005: LD_INT 2
5007: PUSH
5008: FOR_TO
5009: IFFALSE 5027
// EraseResourceArea ( i , outerSpawnArea ) ;
5011: LD_VAR 0 2
5015: PPUSH
5016: LD_VAR 0 6
5020: PPUSH
5021: CALL_OW 286
5025: GO 5008
5027: POP
5028: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5029: LD_VAR 0 6
5033: PPUSH
5034: LD_INT 2
5036: PUSH
5037: LD_INT 21
5039: PUSH
5040: LD_INT 1
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: PUSH
5047: LD_INT 21
5049: PUSH
5050: LD_INT 2
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: LD_INT 21
5059: PUSH
5060: LD_INT 3
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: PPUSH
5073: CALL_OW 70
5077: IFFALSE 5292
// repeat wait ( 0 0$1 ) ;
5079: LD_INT 35
5081: PPUSH
5082: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5086: LD_VAR 0 6
5090: PPUSH
5091: LD_INT 2
5093: PUSH
5094: LD_INT 21
5096: PUSH
5097: LD_INT 2
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 21
5106: PUSH
5107: LD_INT 3
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: LIST
5118: PPUSH
5119: CALL_OW 70
5123: IFFALSE 5184
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5125: LD_ADDR_VAR 0 2
5129: PUSH
5130: LD_VAR 0 6
5134: PPUSH
5135: LD_INT 2
5137: PUSH
5138: LD_INT 21
5140: PUSH
5141: LD_INT 2
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PUSH
5148: LD_INT 21
5150: PUSH
5151: LD_INT 3
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: LIST
5162: PPUSH
5163: CALL_OW 70
5167: PUSH
5168: FOR_IN
5169: IFFALSE 5182
// RemoveUnit ( i ) ;
5171: LD_VAR 0 2
5175: PPUSH
5176: CALL_OW 64
5180: GO 5168
5182: POP
5183: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5184: LD_VAR 0 6
5188: PPUSH
5189: LD_INT 21
5191: PUSH
5192: LD_INT 1
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: PPUSH
5199: CALL_OW 70
5203: IFFALSE 5252
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5205: LD_ADDR_VAR 0 2
5209: PUSH
5210: LD_VAR 0 6
5214: PPUSH
5215: LD_INT 21
5217: PUSH
5218: LD_INT 1
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: PPUSH
5225: CALL_OW 70
5229: PUSH
5230: FOR_IN
5231: IFFALSE 5250
// ComMoveXY ( i , 113 , 53 ) ;
5233: LD_VAR 0 2
5237: PPUSH
5238: LD_INT 113
5240: PPUSH
5241: LD_INT 53
5243: PPUSH
5244: CALL_OW 111
5248: GO 5230
5250: POP
5251: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5252: LD_VAR 0 6
5256: PPUSH
5257: LD_INT 2
5259: PUSH
5260: LD_INT 21
5262: PUSH
5263: LD_INT 1
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: LD_INT 21
5272: PUSH
5273: LD_INT 2
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: PUSH
5280: EMPTY
5281: LIST
5282: LIST
5283: LIST
5284: PPUSH
5285: CALL_OW 70
5289: NOT
5290: IFFALSE 5079
// case convoyCounter of 1 .. 3 :
5292: LD_EXP 16
5296: PUSH
5297: LD_INT 1
5299: DOUBLE
5300: GREATEREQUAL
5301: IFFALSE 5309
5303: LD_INT 3
5305: DOUBLE
5306: LESSEQUAL
5307: IFTRUE 5311
5309: GO 5930
5311: POP
// begin uc_side := 3 ;
5312: LD_ADDR_OWVAR 20
5316: PUSH
5317: LD_INT 3
5319: ST_TO_ADDR
// uc_nation := 3 ;
5320: LD_ADDR_OWVAR 21
5324: PUSH
5325: LD_INT 3
5327: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] - convoyCounter do
5328: LD_ADDR_VAR 0 2
5332: PUSH
5333: DOUBLE
5334: LD_INT 1
5336: DEC
5337: ST_TO_ADDR
5338: LD_INT 5
5340: PUSH
5341: LD_INT 6
5343: PUSH
5344: LD_INT 7
5346: PUSH
5347: LD_INT 8
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_OWVAR 67
5360: ARRAY
5361: PUSH
5362: LD_EXP 16
5366: MINUS
5367: PUSH
5368: FOR_TO
5369: IFFALSE 5560
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5371: LD_INT 0
5373: PPUSH
5374: LD_INT 1
5376: PUSH
5377: LD_INT 1
5379: PUSH
5380: LD_INT 1
5382: PUSH
5383: LD_INT 4
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: PUSH
5392: LD_INT 1
5394: PPUSH
5395: LD_INT 4
5397: PPUSH
5398: CALL_OW 12
5402: ARRAY
5403: PPUSH
5404: LD_INT 4
5406: PUSH
5407: LD_INT 5
5409: PUSH
5410: LD_INT 6
5412: PUSH
5413: LD_INT 7
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: PUSH
5422: LD_OWVAR 67
5426: ARRAY
5427: PPUSH
5428: CALL_OW 380
// un := CreateHuman ;
5432: LD_ADDR_VAR 0 8
5436: PUSH
5437: CALL_OW 44
5441: ST_TO_ADDR
// SetDir ( un , dir ) ;
5442: LD_VAR 0 8
5446: PPUSH
5447: LD_VAR 0 4
5451: PPUSH
5452: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5456: LD_VAR 0 8
5460: PPUSH
5461: LD_VAR 0 5
5465: PPUSH
5466: LD_INT 0
5468: PPUSH
5469: CALL 67936 0 3
5473: IFFALSE 5558
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5475: LD_ADDR_EXP 41
5479: PUSH
5480: LD_EXP 41
5484: PPUSH
5485: LD_EXP 41
5489: PUSH
5490: LD_INT 1
5492: PLUS
5493: PPUSH
5494: LD_VAR 0 8
5498: PPUSH
5499: CALL_OW 1
5503: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5504: LD_VAR 0 8
5508: PPUSH
5509: LD_INT 1
5511: PPUSH
5512: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5516: LD_VAR 0 8
5520: PPUSH
5521: LD_VAR 0 7
5525: PUSH
5526: LD_INT 1
5528: ARRAY
5529: PUSH
5530: LD_INT 1
5532: ARRAY
5533: PPUSH
5534: LD_VAR 0 7
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PUSH
5543: LD_INT 2
5545: ARRAY
5546: PPUSH
5547: CALL_OW 111
// wait ( 0 0$2 ) ;
5551: LD_INT 70
5553: PPUSH
5554: CALL_OW 67
// end ; end ;
5558: GO 5368
5560: POP
5561: POP
// for i := 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
5562: LD_ADDR_VAR 0 2
5566: PUSH
5567: DOUBLE
5568: LD_INT 1
5570: DEC
5571: ST_TO_ADDR
5572: LD_INT 3
5574: PUSH
5575: LD_INT 4
5577: PUSH
5578: LD_INT 4
5580: PUSH
5581: LD_INT 4
5583: PUSH
5584: EMPTY
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: PUSH
5590: LD_OWVAR 67
5594: ARRAY
5595: PUSH
5596: FOR_TO
5597: IFFALSE 5926
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5599: LD_INT 3
5601: PPUSH
5602: LD_INT 3
5604: PPUSH
5605: LD_INT 21
5607: PUSH
5608: LD_INT 22
5610: PUSH
5611: LD_INT 23
5613: PUSH
5614: LD_INT 24
5616: PUSH
5617: LD_INT 24
5619: PUSH
5620: LD_INT 24
5622: PUSH
5623: EMPTY
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: PUSH
5631: LD_OWVAR 67
5635: PPUSH
5636: LD_OWVAR 67
5640: PUSH
5641: LD_INT 2
5643: PLUS
5644: PPUSH
5645: CALL_OW 12
5649: ARRAY
5650: PPUSH
5651: LD_INT 1
5653: PPUSH
5654: LD_INT 1
5656: PPUSH
5657: LD_INT 42
5659: PUSH
5660: LD_INT 44
5662: PUSH
5663: LD_INT 43
5665: PUSH
5666: LD_INT 44
5668: PUSH
5669: LD_INT 46
5671: PUSH
5672: LD_INT 46
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: PUSH
5683: LD_INT 1
5685: PPUSH
5686: LD_OWVAR 67
5690: PUSH
5691: LD_INT 2
5693: PLUS
5694: PPUSH
5695: CALL_OW 12
5699: ARRAY
5700: PPUSH
5701: LD_INT 90
5703: PPUSH
5704: CALL 439 0 7
// un := CreateVehicle ;
5708: LD_ADDR_VAR 0 8
5712: PUSH
5713: CALL_OW 45
5717: ST_TO_ADDR
// SetDir ( un , dir ) ;
5718: LD_VAR 0 8
5722: PPUSH
5723: LD_VAR 0 4
5727: PPUSH
5728: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5732: LD_VAR 0 8
5736: PPUSH
5737: LD_VAR 0 5
5741: PPUSH
5742: LD_INT 0
5744: PPUSH
5745: CALL 67936 0 3
5749: IFFALSE 5924
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5751: LD_ADDR_EXP 41
5755: PUSH
5756: LD_EXP 41
5760: PPUSH
5761: LD_EXP 41
5765: PUSH
5766: LD_INT 1
5768: PLUS
5769: PPUSH
5770: LD_VAR 0 8
5774: PPUSH
5775: CALL_OW 1
5779: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
5780: LD_INT 0
5782: PPUSH
5783: LD_INT 3
5785: PUSH
5786: LD_INT 4
5788: PUSH
5789: LD_INT 5
5791: PUSH
5792: LD_INT 6
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: LIST
5799: LIST
5800: PUSH
5801: LD_OWVAR 67
5805: ARRAY
5806: PPUSH
5807: CALL_OW 383
// un := CreateHuman ;
5811: LD_ADDR_VAR 0 8
5815: PUSH
5816: CALL_OW 44
5820: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5821: LD_VAR 0 8
5825: PPUSH
5826: LD_EXP 41
5830: PUSH
5831: LD_EXP 41
5835: ARRAY
5836: PPUSH
5837: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5841: LD_ADDR_EXP 41
5845: PUSH
5846: LD_EXP 41
5850: PPUSH
5851: LD_EXP 41
5855: PUSH
5856: LD_INT 1
5858: PLUS
5859: PPUSH
5860: LD_VAR 0 8
5864: PPUSH
5865: CALL_OW 1
5869: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5870: LD_VAR 0 8
5874: PPUSH
5875: LD_INT 1
5877: PPUSH
5878: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5882: LD_VAR 0 8
5886: PPUSH
5887: LD_VAR 0 7
5891: PUSH
5892: LD_INT 1
5894: ARRAY
5895: PUSH
5896: LD_INT 1
5898: ARRAY
5899: PPUSH
5900: LD_VAR 0 7
5904: PUSH
5905: LD_INT 1
5907: ARRAY
5908: PUSH
5909: LD_INT 2
5911: ARRAY
5912: PPUSH
5913: CALL_OW 111
// wait ( 0 0$3 ) ;
5917: LD_INT 105
5919: PPUSH
5920: CALL_OW 67
// end ; end ;
5924: GO 5596
5926: POP
5927: POP
// end ; 4 .. 7 :
5928: GO 6503
5930: LD_INT 4
5932: DOUBLE
5933: GREATEREQUAL
5934: IFFALSE 5942
5936: LD_INT 7
5938: DOUBLE
5939: LESSEQUAL
5940: IFTRUE 5944
5942: GO 6502
5944: POP
// begin uc_side := 3 ;
5945: LD_ADDR_OWVAR 20
5949: PUSH
5950: LD_INT 3
5952: ST_TO_ADDR
// uc_nation := 3 ;
5953: LD_ADDR_OWVAR 21
5957: PUSH
5958: LD_INT 3
5960: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
5961: LD_ADDR_VAR 0 2
5965: PUSH
5966: DOUBLE
5967: LD_INT 1
5969: DEC
5970: ST_TO_ADDR
5971: LD_INT 2
5973: PUSH
5974: LD_INT 3
5976: PUSH
5977: LD_INT 4
5979: PUSH
5980: LD_INT 4
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: PUSH
5989: LD_OWVAR 67
5993: ARRAY
5994: PUSH
5995: FOR_TO
5996: IFFALSE 6160
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5998: LD_INT 0
6000: PPUSH
6001: LD_INT 1
6003: PPUSH
6004: LD_INT 4
6006: PUSH
6007: LD_INT 5
6009: PUSH
6010: LD_INT 6
6012: PUSH
6013: LD_INT 7
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: PUSH
6022: LD_OWVAR 67
6026: ARRAY
6027: PPUSH
6028: CALL_OW 380
// un := CreateHuman ;
6032: LD_ADDR_VAR 0 8
6036: PUSH
6037: CALL_OW 44
6041: ST_TO_ADDR
// SetDir ( un , dir ) ;
6042: LD_VAR 0 8
6046: PPUSH
6047: LD_VAR 0 4
6051: PPUSH
6052: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6056: LD_VAR 0 8
6060: PPUSH
6061: LD_VAR 0 5
6065: PPUSH
6066: LD_INT 0
6068: PPUSH
6069: CALL 67936 0 3
6073: IFFALSE 6158
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6075: LD_ADDR_EXP 41
6079: PUSH
6080: LD_EXP 41
6084: PPUSH
6085: LD_EXP 41
6089: PUSH
6090: LD_INT 1
6092: PLUS
6093: PPUSH
6094: LD_VAR 0 8
6098: PPUSH
6099: CALL_OW 1
6103: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6104: LD_VAR 0 8
6108: PPUSH
6109: LD_INT 1
6111: PPUSH
6112: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6116: LD_VAR 0 8
6120: PPUSH
6121: LD_VAR 0 7
6125: PUSH
6126: LD_INT 1
6128: ARRAY
6129: PUSH
6130: LD_INT 1
6132: ARRAY
6133: PPUSH
6134: LD_VAR 0 7
6138: PUSH
6139: LD_INT 1
6141: ARRAY
6142: PUSH
6143: LD_INT 2
6145: ARRAY
6146: PPUSH
6147: CALL_OW 111
// wait ( 0 0$2 ) ;
6151: LD_INT 70
6153: PPUSH
6154: CALL_OW 67
// end ; end ;
6158: GO 5995
6160: POP
6161: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
6162: LD_ADDR_VAR 0 2
6166: PUSH
6167: DOUBLE
6168: LD_INT 1
6170: DEC
6171: ST_TO_ADDR
6172: LD_INT 2
6174: PUSH
6175: LD_INT 3
6177: PUSH
6178: LD_INT 3
6180: PUSH
6181: LD_INT 4
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: PUSH
6190: LD_OWVAR 67
6194: ARRAY
6195: PUSH
6196: FOR_TO
6197: IFFALSE 6498
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6199: LD_INT 3
6201: PPUSH
6202: LD_INT 3
6204: PPUSH
6205: LD_INT 21
6207: PUSH
6208: LD_INT 22
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: PUSH
6215: LD_INT 1
6217: PPUSH
6218: LD_INT 2
6220: PPUSH
6221: CALL_OW 12
6225: ARRAY
6226: PPUSH
6227: LD_INT 1
6229: PPUSH
6230: LD_INT 1
6232: PPUSH
6233: LD_INT 42
6235: PUSH
6236: LD_INT 44
6238: PUSH
6239: LD_INT 43
6241: PUSH
6242: LD_INT 44
6244: PUSH
6245: LD_INT 44
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 1
6257: PPUSH
6258: LD_OWVAR 67
6262: PUSH
6263: LD_INT 1
6265: PLUS
6266: PPUSH
6267: CALL_OW 12
6271: ARRAY
6272: PPUSH
6273: LD_INT 90
6275: PPUSH
6276: CALL 439 0 7
// un := CreateVehicle ;
6280: LD_ADDR_VAR 0 8
6284: PUSH
6285: CALL_OW 45
6289: ST_TO_ADDR
// SetDir ( un , dir ) ;
6290: LD_VAR 0 8
6294: PPUSH
6295: LD_VAR 0 4
6299: PPUSH
6300: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6304: LD_VAR 0 8
6308: PPUSH
6309: LD_VAR 0 5
6313: PPUSH
6314: LD_INT 0
6316: PPUSH
6317: CALL 67936 0 3
6321: IFFALSE 6496
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6323: LD_ADDR_EXP 41
6327: PUSH
6328: LD_EXP 41
6332: PPUSH
6333: LD_EXP 41
6337: PUSH
6338: LD_INT 1
6340: PLUS
6341: PPUSH
6342: LD_VAR 0 8
6346: PPUSH
6347: CALL_OW 1
6351: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
6352: LD_INT 0
6354: PPUSH
6355: LD_INT 3
6357: PUSH
6358: LD_INT 4
6360: PUSH
6361: LD_INT 5
6363: PUSH
6364: LD_INT 6
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: PUSH
6373: LD_OWVAR 67
6377: ARRAY
6378: PPUSH
6379: CALL_OW 383
// un := CreateHuman ;
6383: LD_ADDR_VAR 0 8
6387: PUSH
6388: CALL_OW 44
6392: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6393: LD_VAR 0 8
6397: PPUSH
6398: LD_EXP 41
6402: PUSH
6403: LD_EXP 41
6407: ARRAY
6408: PPUSH
6409: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6413: LD_ADDR_EXP 41
6417: PUSH
6418: LD_EXP 41
6422: PPUSH
6423: LD_EXP 41
6427: PUSH
6428: LD_INT 1
6430: PLUS
6431: PPUSH
6432: LD_VAR 0 8
6436: PPUSH
6437: CALL_OW 1
6441: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6442: LD_VAR 0 8
6446: PPUSH
6447: LD_INT 1
6449: PPUSH
6450: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6454: LD_VAR 0 8
6458: PPUSH
6459: LD_VAR 0 7
6463: PUSH
6464: LD_INT 1
6466: ARRAY
6467: PUSH
6468: LD_INT 1
6470: ARRAY
6471: PPUSH
6472: LD_VAR 0 7
6476: PUSH
6477: LD_INT 1
6479: ARRAY
6480: PUSH
6481: LD_INT 2
6483: ARRAY
6484: PPUSH
6485: CALL_OW 111
// wait ( 0 0$2 ) ;
6489: LD_INT 70
6491: PPUSH
6492: CALL_OW 67
// end ; end ;
6496: GO 6196
6498: POP
6499: POP
// end ; end ;
6500: GO 6503
6502: POP
// repeat wait ( 0 0$1 ) ;
6503: LD_INT 35
6505: PPUSH
6506: CALL_OW 67
// for un in ruConvoySquad do
6510: LD_ADDR_VAR 0 8
6514: PUSH
6515: LD_EXP 41
6519: PUSH
6520: FOR_IN
6521: IFFALSE 7145
// begin if IsInArea ( un , westSouthOutArea ) then
6523: LD_VAR 0 8
6527: PPUSH
6528: LD_INT 18
6530: PPUSH
6531: CALL_OW 308
6535: IFFALSE 6623
// begin if GetType ( un ) = unit_vehicle then
6537: LD_VAR 0 8
6541: PPUSH
6542: CALL_OW 247
6546: PUSH
6547: LD_INT 2
6549: EQUAL
6550: IFFALSE 6582
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6552: LD_ADDR_EXP 41
6556: PUSH
6557: LD_EXP 41
6561: PUSH
6562: LD_VAR 0 8
6566: PPUSH
6567: CALL_OW 311
6571: DIFF
6572: ST_TO_ADDR
// RemoveUnit ( un ) ;
6573: LD_VAR 0 8
6577: PPUSH
6578: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6582: LD_ADDR_EXP 15
6586: PUSH
6587: LD_EXP 15
6591: PUSH
6592: LD_INT 1
6594: PLUS
6595: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6596: LD_ADDR_EXP 41
6600: PUSH
6601: LD_EXP 41
6605: PUSH
6606: LD_VAR 0 8
6610: DIFF
6611: ST_TO_ADDR
// RemoveUnit ( un ) ;
6612: LD_VAR 0 8
6616: PPUSH
6617: CALL_OW 64
// break ;
6621: GO 7145
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6623: LD_VAR 0 8
6627: PPUSH
6628: CALL_OW 305
6632: NOT
6633: PUSH
6634: LD_VAR 0 8
6638: PPUSH
6639: CALL_OW 310
6643: NOT
6644: AND
6645: IFFALSE 6663
// ruConvoySquad := ruConvoySquad diff un ;
6647: LD_ADDR_EXP 41
6651: PUSH
6652: LD_EXP 41
6656: PUSH
6657: LD_VAR 0 8
6661: DIFF
6662: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6663: LD_VAR 0 8
6667: PPUSH
6668: CALL_OW 302
6672: PUSH
6673: LD_VAR 0 8
6677: PPUSH
6678: CALL_OW 314
6682: NOT
6683: AND
6684: IFFALSE 7143
// begin tag := GetTag ( un ) ;
6686: LD_ADDR_VAR 0 9
6690: PUSH
6691: LD_VAR 0 8
6695: PPUSH
6696: CALL_OW 110
6700: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6701: LD_VAR 0 8
6705: PPUSH
6706: LD_VAR 0 7
6710: PUSH
6711: LD_VAR 0 9
6715: PUSH
6716: LD_INT 1
6718: PLUS
6719: ARRAY
6720: PUSH
6721: LD_INT 1
6723: ARRAY
6724: PPUSH
6725: LD_VAR 0 7
6729: PUSH
6730: LD_VAR 0 9
6734: PUSH
6735: LD_INT 1
6737: PLUS
6738: ARRAY
6739: PUSH
6740: LD_INT 2
6742: ARRAY
6743: PPUSH
6744: CALL_OW 297
6748: PUSH
6749: LD_INT 6
6751: LESS
6752: IFFALSE 6935
// begin SetTag ( un , tag + 1 ) ;
6754: LD_VAR 0 8
6758: PPUSH
6759: LD_VAR 0 9
6763: PUSH
6764: LD_INT 1
6766: PLUS
6767: PPUSH
6768: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6772: LD_VAR 0 8
6776: PPUSH
6777: CALL_OW 247
6781: PUSH
6782: LD_INT 2
6784: EQUAL
6785: PUSH
6786: LD_VAR 0 8
6790: PPUSH
6791: CALL_OW 257
6795: PUSH
6796: LD_INT 3
6798: EQUAL
6799: OR
6800: IFFALSE 6933
// begin enemy := FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , un , 8 ] ] ) ;
6802: LD_ADDR_VAR 0 10
6806: PUSH
6807: LD_INT 22
6809: PUSH
6810: LD_INT 2
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: PUSH
6817: LD_INT 91
6819: PUSH
6820: LD_VAR 0 8
6824: PUSH
6825: LD_INT 8
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: LIST
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: PPUSH
6837: CALL_OW 69
6841: ST_TO_ADDR
// if enemy then
6842: LD_VAR 0 10
6846: IFFALSE 6874
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) else
6848: LD_VAR 0 8
6852: PPUSH
6853: LD_VAR 0 10
6857: PPUSH
6858: LD_VAR 0 8
6862: PPUSH
6863: CALL_OW 74
6867: PPUSH
6868: CALL_OW 115
6872: GO 6933
// begin AddComWait ( un , 0 0$4 ) ;
6874: LD_VAR 0 8
6878: PPUSH
6879: LD_INT 140
6881: PPUSH
6882: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6886: LD_VAR 0 8
6890: PPUSH
6891: LD_VAR 0 7
6895: PUSH
6896: LD_VAR 0 9
6900: PUSH
6901: LD_INT 1
6903: PLUS
6904: ARRAY
6905: PUSH
6906: LD_INT 1
6908: ARRAY
6909: PPUSH
6910: LD_VAR 0 7
6914: PUSH
6915: LD_VAR 0 9
6919: PUSH
6920: LD_INT 1
6922: PLUS
6923: ARRAY
6924: PUSH
6925: LD_INT 2
6927: ARRAY
6928: PPUSH
6929: CALL_OW 174
// end ; end ; end else
6933: GO 7143
// begin if GetClass ( un ) = 4 then
6935: LD_VAR 0 8
6939: PPUSH
6940: CALL_OW 257
6944: PUSH
6945: LD_INT 4
6947: EQUAL
6948: IFFALSE 7096
// begin if UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6950: LD_EXP 41
6954: PPUSH
6955: LD_INT 21
6957: PUSH
6958: LD_INT 1
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: LD_INT 3
6967: PUSH
6968: LD_INT 24
6970: PUSH
6971: LD_INT 1000
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PPUSH
6986: CALL_OW 72
6990: IFFALSE 7048
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
6992: LD_VAR 0 8
6996: PPUSH
6997: LD_EXP 41
7001: PPUSH
7002: LD_INT 21
7004: PUSH
7005: LD_INT 1
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PUSH
7012: LD_INT 3
7014: PUSH
7015: LD_INT 24
7017: PUSH
7018: LD_INT 1000
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PPUSH
7033: CALL_OW 72
7037: PUSH
7038: LD_INT 1
7040: ARRAY
7041: PPUSH
7042: CALL_OW 128
7046: GO 7094
// ComMoveUnit ( un , NearestUnitToUnit ( UnitFilter ( ruConvoySquad , [ f_not , [ f_class , 4 ] ] ) , un ) ) end else
7048: LD_VAR 0 8
7052: PPUSH
7053: LD_EXP 41
7057: PPUSH
7058: LD_INT 3
7060: PUSH
7061: LD_INT 25
7063: PUSH
7064: LD_INT 4
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PPUSH
7075: CALL_OW 72
7079: PPUSH
7080: LD_VAR 0 8
7084: PPUSH
7085: CALL_OW 74
7089: PPUSH
7090: CALL_OW 112
7094: GO 7143
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7096: LD_VAR 0 8
7100: PPUSH
7101: LD_VAR 0 7
7105: PUSH
7106: LD_VAR 0 9
7110: PUSH
7111: LD_INT 1
7113: PLUS
7114: ARRAY
7115: PUSH
7116: LD_INT 1
7118: ARRAY
7119: PPUSH
7120: LD_VAR 0 7
7124: PUSH
7125: LD_VAR 0 9
7129: PUSH
7130: LD_INT 1
7132: PLUS
7133: ARRAY
7134: PUSH
7135: LD_INT 2
7137: ARRAY
7138: PPUSH
7139: CALL_OW 114
// end ; end ; end ;
7143: GO 6520
7145: POP
7146: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
7147: LD_EXP 41
7151: PPUSH
7152: LD_INT 52
7154: PUSH
7155: EMPTY
7156: LIST
7157: PUSH
7158: LD_INT 21
7160: PUSH
7161: LD_INT 1
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PPUSH
7172: CALL_OW 72
7176: NOT
7177: IFFALSE 6503
// end ;
7179: LD_VAR 0 1
7183: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
7184: LD_EXP 16
7188: PUSH
7189: LD_INT 3
7191: PPUSH
7192: LD_INT 5
7194: PPUSH
7195: CALL_OW 12
7199: LESS
7200: PUSH
7201: LD_EXP 41
7205: NOT
7206: AND
7207: PUSH
7208: LD_OWVAR 67
7212: PUSH
7213: LD_INT 1
7215: GREATER
7216: AND
7217: IFFALSE 7621
7219: GO 7221
7221: DISABLE
7222: LD_INT 0
7224: PPUSH
7225: PPUSH
7226: PPUSH
// begin uc_side := 3 ;
7227: LD_ADDR_OWVAR 20
7231: PUSH
7232: LD_INT 3
7234: ST_TO_ADDR
// uc_nation := 3 ;
7235: LD_ADDR_OWVAR 21
7239: PUSH
7240: LD_INT 3
7242: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
7243: LD_ADDR_VAR 0 1
7247: PUSH
7248: DOUBLE
7249: LD_INT 1
7251: DEC
7252: ST_TO_ADDR
7253: LD_INT 2
7255: PUSH
7256: LD_INT 3
7258: PUSH
7259: LD_INT 4
7261: PUSH
7262: LD_INT 5
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: PUSH
7271: LD_OWVAR 67
7275: ARRAY
7276: PUSH
7277: FOR_TO
7278: IFFALSE 7542
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7280: LD_INT 3
7282: PPUSH
7283: LD_INT 3
7285: PPUSH
7286: LD_INT 21
7288: PUSH
7289: LD_INT 22
7291: PUSH
7292: LD_INT 23
7294: PUSH
7295: LD_INT 24
7297: PUSH
7298: LD_INT 24
7300: PUSH
7301: LD_INT 24
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: PUSH
7312: LD_OWVAR 67
7316: PPUSH
7317: LD_OWVAR 67
7321: PUSH
7322: LD_INT 2
7324: PLUS
7325: PPUSH
7326: CALL_OW 12
7330: ARRAY
7331: PPUSH
7332: LD_INT 1
7334: PPUSH
7335: LD_INT 1
7337: PPUSH
7338: LD_INT 42
7340: PUSH
7341: LD_INT 44
7343: PUSH
7344: LD_INT 43
7346: PUSH
7347: LD_INT 44
7349: PUSH
7350: LD_INT 46
7352: PUSH
7353: LD_INT 46
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: LD_INT 1
7366: PPUSH
7367: LD_OWVAR 67
7371: PUSH
7372: LD_INT 2
7374: PLUS
7375: PPUSH
7376: CALL_OW 12
7380: ARRAY
7381: PPUSH
7382: LD_INT 90
7384: PPUSH
7385: CALL 439 0 7
// un := CreateVehicle ;
7389: LD_ADDR_VAR 0 3
7393: PUSH
7394: CALL_OW 45
7398: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7399: LD_VAR 0 3
7403: PPUSH
7404: LD_INT 0
7406: PPUSH
7407: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7411: LD_VAR 0 3
7415: PPUSH
7416: LD_INT 23
7418: PPUSH
7419: LD_INT 0
7421: PPUSH
7422: CALL 67936 0 3
7426: IFFALSE 7540
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7428: LD_ADDR_VAR 0 2
7432: PUSH
7433: LD_VAR 0 2
7437: PPUSH
7438: LD_VAR 0 2
7442: PUSH
7443: LD_INT 1
7445: PLUS
7446: PPUSH
7447: LD_VAR 0 3
7451: PPUSH
7452: CALL_OW 1
7456: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
7457: LD_INT 0
7459: PPUSH
7460: LD_INT 3
7462: PUSH
7463: LD_INT 4
7465: PUSH
7466: LD_INT 5
7468: PUSH
7469: LD_INT 6
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: PUSH
7478: LD_OWVAR 67
7482: ARRAY
7483: PPUSH
7484: CALL_OW 383
// un := CreateHuman ;
7488: LD_ADDR_VAR 0 3
7492: PUSH
7493: CALL_OW 44
7497: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7498: LD_VAR 0 3
7502: PPUSH
7503: LD_VAR 0 2
7507: PUSH
7508: LD_VAR 0 2
7512: ARRAY
7513: PPUSH
7514: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7518: LD_VAR 0 3
7522: PPUSH
7523: LD_INT 80
7525: PPUSH
7526: LD_INT 139
7528: PPUSH
7529: CALL_OW 111
// wait ( 0 0$3 ) ;
7533: LD_INT 105
7535: PPUSH
7536: CALL_OW 67
// end ; end ;
7540: GO 7277
7542: POP
7543: POP
// for i in tmp do
7544: LD_ADDR_VAR 0 1
7548: PUSH
7549: LD_VAR 0 2
7553: PUSH
7554: FOR_IN
7555: IFFALSE 7619
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7557: LD_VAR 0 1
7561: PPUSH
7562: LD_INT 101
7564: PPUSH
7565: LD_INT 102
7567: PPUSH
7568: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7572: LD_VAR 0 1
7576: PPUSH
7577: LD_INT 110
7579: PPUSH
7580: LD_INT 78
7582: PPUSH
7583: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7587: LD_VAR 0 1
7591: PPUSH
7592: LD_INT 75
7594: PPUSH
7595: LD_INT 101
7597: PPUSH
7598: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7602: LD_VAR 0 1
7606: PPUSH
7607: LD_INT 57
7609: PPUSH
7610: LD_INT 83
7612: PPUSH
7613: CALL_OW 174
// end ;
7617: GO 7554
7619: POP
7620: POP
// end ;
7621: PPOPN 3
7623: END
// every 0 0$1 trigger UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) or UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do var i ;
7624: LD_EXP 39
7628: PPUSH
7629: LD_INT 3
7631: PUSH
7632: LD_INT 24
7634: PUSH
7635: LD_INT 1000
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PPUSH
7646: CALL_OW 72
7650: PUSH
7651: LD_EXP 40
7655: PPUSH
7656: LD_INT 3
7658: PUSH
7659: LD_INT 24
7661: PUSH
7662: LD_INT 1000
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: PPUSH
7673: CALL_OW 72
7677: OR
7678: IFFALSE 7777
7680: GO 7682
7682: DISABLE
7683: LD_INT 0
7685: PPUSH
// begin enable ;
7686: ENABLE
// for i in UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) union UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do
7687: LD_ADDR_VAR 0 1
7691: PUSH
7692: LD_EXP 39
7696: PPUSH
7697: LD_INT 3
7699: PUSH
7700: LD_INT 24
7702: PUSH
7703: LD_INT 1000
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PPUSH
7714: CALL_OW 72
7718: PUSH
7719: LD_EXP 40
7723: PPUSH
7724: LD_INT 3
7726: PUSH
7727: LD_INT 24
7729: PUSH
7730: LD_INT 1000
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PPUSH
7741: CALL_OW 72
7745: UNION
7746: PUSH
7747: FOR_IN
7748: IFFALSE 7775
// if IsSleeping ( i ) then
7750: LD_VAR 0 1
7754: PPUSH
7755: CALL_OW 555
7759: IFFALSE 7773
// ForceSleep ( i , false ) ;
7761: LD_VAR 0 1
7765: PPUSH
7766: LD_INT 0
7768: PPUSH
7769: CALL_OW 585
7773: GO 7747
7775: POP
7776: POP
// end ; end_of_file
7777: PPOPN 1
7779: END
// on UnitDestroyed ( un ) do begin if un = Heike then
7780: LD_VAR 0 1
7784: PUSH
7785: LD_EXP 21
7789: EQUAL
7790: IFFALSE 7799
// YouLost ( Heike ) ;
7792: LD_STRING Heike
7794: PPUSH
7795: CALL_OW 104
// if un in apeSoldGroup then
7799: LD_VAR 0 1
7803: PUSH
7804: LD_EXP 42
7808: IN
7809: IFFALSE 7827
// apeSoldGroup := apeSoldGroup diff un ;
7811: LD_ADDR_EXP 42
7815: PUSH
7816: LD_EXP 42
7820: PUSH
7821: LD_VAR 0 1
7825: DIFF
7826: ST_TO_ADDR
// if un in apeEngGroup then
7827: LD_VAR 0 1
7831: PUSH
7832: LD_EXP 43
7836: IN
7837: IFFALSE 7855
// apeEngGroup := apeEngGroup diff un ;
7839: LD_ADDR_EXP 43
7843: PUSH
7844: LD_EXP 43
7848: PUSH
7849: LD_VAR 0 1
7853: DIFF
7854: ST_TO_ADDR
// if un in oilBaseGuard then
7855: LD_VAR 0 1
7859: PUSH
7860: LD_EXP 38
7864: IN
7865: IFFALSE 7883
// oilBaseGuard := oilBaseGuard diff un ;
7867: LD_ADDR_EXP 38
7871: PUSH
7872: LD_EXP 38
7876: PUSH
7877: LD_VAR 0 1
7881: DIFF
7882: ST_TO_ADDR
// if un in ruNorthGroup then
7883: LD_VAR 0 1
7887: PUSH
7888: LD_EXP 39
7892: IN
7893: IFFALSE 7911
// ruNorthGroup := ruNorthGroup diff un ;
7895: LD_ADDR_EXP 39
7899: PUSH
7900: LD_EXP 39
7904: PUSH
7905: LD_VAR 0 1
7909: DIFF
7910: ST_TO_ADDR
// if un in ruSouthGroup then
7911: LD_VAR 0 1
7915: PUSH
7916: LD_EXP 40
7920: IN
7921: IFFALSE 7939
// ruSouthGroup := ruSouthGroup diff un ;
7923: LD_ADDR_EXP 40
7927: PUSH
7928: LD_EXP 40
7932: PUSH
7933: LD_VAR 0 1
7937: DIFF
7938: ST_TO_ADDR
// if un in ruConvoySquad then
7939: LD_VAR 0 1
7943: PUSH
7944: LD_EXP 41
7948: IN
7949: IFFALSE 7967
// ruConvoySquad := ruConvoySquad diff un ;
7951: LD_ADDR_EXP 41
7955: PUSH
7956: LD_EXP 41
7960: PUSH
7961: LD_VAR 0 1
7965: DIFF
7966: ST_TO_ADDR
// end ;
7967: PPOPN 1
7969: END
// on VehicleConstructed ( veh , fac ) do begin if GetWeapon ( veh ) = ar_radar then
7970: LD_VAR 0 1
7974: PPUSH
7975: CALL_OW 264
7979: PUSH
7980: LD_INT 30
7982: EQUAL
7983: IFFALSE 7993
// radarConstructed := true ;
7985: LD_ADDR_EXP 13
7989: PUSH
7990: LD_INT 1
7992: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
7993: LD_VAR 0 1
7997: PPUSH
7998: CALL_OW 264
8002: PUSH
8003: LD_INT 26
8005: EQUAL
8006: IFFALSE 8016
// flamethrowerBuilt := true ;
8008: LD_ADDR_EXP 20
8012: PUSH
8013: LD_INT 1
8015: ST_TO_ADDR
// end ;
8016: PPOPN 2
8018: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
8019: LD_ADDR_EXP 18
8023: PUSH
8024: LD_EXP 18
8028: PUSH
8029: LD_INT 1
8031: PLUS
8032: ST_TO_ADDR
// if oldId in ruConvoySquad then
8033: LD_VAR 0 2
8037: PUSH
8038: LD_EXP 41
8042: IN
8043: IFFALSE 8061
// ruConvoySquad := ruConvoySquad diff oldId ;
8045: LD_ADDR_EXP 41
8049: PUSH
8050: LD_EXP 41
8054: PUSH
8055: LD_VAR 0 2
8059: DIFF
8060: ST_TO_ADDR
// if newId in ruConvoySquad then
8061: LD_VAR 0 1
8065: PUSH
8066: LD_EXP 41
8070: IN
8071: IFFALSE 8089
// ruConvoySquad := ruConvoySquad diff newId ;
8073: LD_ADDR_EXP 41
8077: PUSH
8078: LD_EXP 41
8082: PUSH
8083: LD_VAR 0 1
8087: DIFF
8088: ST_TO_ADDR
// end ; end_of_file
8089: PPOPN 4
8091: END
// export function Action ; var i , p , un , veh , tmp ; begin
8092: LD_INT 0
8094: PPUSH
8095: PPUSH
8096: PPUSH
8097: PPUSH
8098: PPUSH
8099: PPUSH
// InGameOn ;
8100: CALL_OW 8
// music_nat := 2 ;
8104: LD_ADDR_OWVAR 71
8108: PUSH
8109: LD_INT 2
8111: ST_TO_ADDR
// music_class := music_recon ;
8112: LD_ADDR_OWVAR 72
8116: PUSH
8117: LD_INT 3
8119: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
8120: LD_INT 7
8122: PPUSH
8123: LD_INT 6
8125: PPUSH
8126: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 30 ) ;
8130: LD_INT 7
8132: PPUSH
8133: LD_INT 6
8135: PPUSH
8136: LD_INT 2
8138: PPUSH
8139: LD_INT 30
8141: NEG
8142: PPUSH
8143: CALL 1223 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Markov , Aviradze , Sophia ] ;
8147: LD_ADDR_VAR 0 6
8151: PUSH
8152: LD_EXP 21
8156: PUSH
8157: LD_EXP 22
8161: PUSH
8162: LD_EXP 23
8166: PUSH
8167: LD_EXP 24
8171: PUSH
8172: LD_EXP 25
8176: PUSH
8177: LD_EXP 26
8181: PUSH
8182: LD_EXP 28
8186: PUSH
8187: LD_EXP 33
8191: PUSH
8192: LD_EXP 27
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: ST_TO_ADDR
// tmp := tmp diff 0 ;
8208: LD_ADDR_VAR 0 6
8212: PUSH
8213: LD_VAR 0 6
8217: PUSH
8218: LD_INT 0
8220: DIFF
8221: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
8222: LD_ADDR_VAR 0 6
8226: PUSH
8227: LD_VAR 0 6
8231: PPUSH
8232: LD_INT 3
8234: PPUSH
8235: CALL 67528 0 2
8239: ST_TO_ADDR
// for i in heikeVehicles do
8240: LD_ADDR_VAR 0 2
8244: PUSH
8245: LD_EXP 35
8249: PUSH
8250: FOR_IN
8251: IFFALSE 8450
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
8253: LD_INT 5
8255: PPUSH
8256: LD_VAR 0 2
8260: PUSH
8261: LD_INT 5
8263: ARRAY
8264: PPUSH
8265: LD_VAR 0 2
8269: PUSH
8270: LD_INT 1
8272: ARRAY
8273: PPUSH
8274: LD_VAR 0 2
8278: PUSH
8279: LD_INT 2
8281: ARRAY
8282: PPUSH
8283: LD_VAR 0 2
8287: PUSH
8288: LD_INT 3
8290: ARRAY
8291: PPUSH
8292: LD_VAR 0 2
8296: PUSH
8297: LD_INT 4
8299: ARRAY
8300: PPUSH
8301: LD_INT 34
8303: PPUSH
8304: CALL 439 0 7
// veh := CreateVehicle ;
8308: LD_ADDR_VAR 0 5
8312: PUSH
8313: CALL_OW 45
8317: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
8318: LD_VAR 0 2
8322: PUSH
8323: LD_INT 4
8325: ARRAY
8326: PUSH
8327: LD_INT 51
8329: PUSH
8330: LD_INT 32
8332: PUSH
8333: LD_INT 12
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: LIST
8340: IN
8341: IFFALSE 8421
// begin if i [ 7 ] [ 1 ] then
8343: LD_VAR 0 2
8347: PUSH
8348: LD_INT 7
8350: ARRAY
8351: PUSH
8352: LD_INT 1
8354: ARRAY
8355: IFFALSE 8382
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
8357: LD_VAR 0 5
8361: PPUSH
8362: LD_INT 1
8364: PPUSH
8365: LD_VAR 0 2
8369: PUSH
8370: LD_INT 7
8372: ARRAY
8373: PUSH
8374: LD_INT 1
8376: ARRAY
8377: PPUSH
8378: CALL_OW 291
// if i [ 7 ] [ 2 ] then
8382: LD_VAR 0 2
8386: PUSH
8387: LD_INT 7
8389: ARRAY
8390: PUSH
8391: LD_INT 2
8393: ARRAY
8394: IFFALSE 8421
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
8396: LD_VAR 0 5
8400: PPUSH
8401: LD_INT 2
8403: PPUSH
8404: LD_VAR 0 2
8408: PUSH
8409: LD_INT 7
8411: ARRAY
8412: PUSH
8413: LD_INT 2
8415: ARRAY
8416: PPUSH
8417: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8421: LD_VAR 0 5
8425: PPUSH
8426: LD_INT 2
8428: PPUSH
8429: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8433: LD_VAR 0 5
8437: PPUSH
8438: LD_INT 4
8440: PPUSH
8441: LD_INT 0
8443: PPUSH
8444: CALL_OW 49
// end ;
8448: GO 8250
8450: POP
8451: POP
// if tmp then
8452: LD_VAR 0 6
8456: IFFALSE 8566
// begin p := 0 ;
8458: LD_ADDR_VAR 0 3
8462: PUSH
8463: LD_INT 0
8465: ST_TO_ADDR
// for i in tmp do
8466: LD_ADDR_VAR 0 2
8470: PUSH
8471: LD_VAR 0 6
8475: PUSH
8476: FOR_IN
8477: IFFALSE 8564
// begin p := p + 1 ;
8479: LD_ADDR_VAR 0 3
8483: PUSH
8484: LD_VAR 0 3
8488: PUSH
8489: LD_INT 1
8491: PLUS
8492: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHumanArea , false ) ;
8493: LD_VAR 0 2
8497: PPUSH
8498: LD_INT 5
8500: PPUSH
8501: LD_INT 0
8503: PPUSH
8504: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8508: LD_VAR 0 2
8512: PPUSH
8513: LD_INT 26
8515: PPUSH
8516: LD_INT 9
8518: PPUSH
8519: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8523: LD_VAR 0 3
8527: PUSH
8528: LD_EXP 35
8532: GREATEREQUAL
8533: PUSH
8534: LD_VAR 0 2
8538: PPUSH
8539: CALL_OW 257
8543: PUSH
8544: LD_INT 3
8546: EQUAL
8547: AND
8548: IFFALSE 8562
// SetClass ( i , 1 ) ;
8550: LD_VAR 0 2
8554: PPUSH
8555: LD_INT 1
8557: PPUSH
8558: CALL_OW 336
// end ;
8562: GO 8476
8564: POP
8565: POP
// end ; if heikeSecondSquad then
8566: LD_EXP 34
8570: IFFALSE 8684
// for i in heikeSecondSquad do
8572: LD_ADDR_VAR 0 2
8576: PUSH
8577: LD_EXP 34
8581: PUSH
8582: FOR_IN
8583: IFFALSE 8682
// begin p := p + 1 ;
8585: LD_ADDR_VAR 0 3
8589: PUSH
8590: LD_VAR 0 3
8594: PUSH
8595: LD_INT 1
8597: PLUS
8598: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8599: LD_VAR 0 2
8603: PPUSH
8604: LD_INT 6
8606: PPUSH
8607: LD_INT 0
8609: PPUSH
8610: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8614: LD_VAR 0 2
8618: PPUSH
8619: LD_INT 26
8621: PPUSH
8622: LD_INT 9
8624: PPUSH
8625: CALL_OW 118
// ForceSleep ( i , true ) ;
8629: LD_VAR 0 2
8633: PPUSH
8634: LD_INT 1
8636: PPUSH
8637: CALL_OW 585
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8641: LD_VAR 0 3
8645: PUSH
8646: LD_EXP 35
8650: GREATEREQUAL
8651: PUSH
8652: LD_VAR 0 2
8656: PPUSH
8657: CALL_OW 257
8661: PUSH
8662: LD_INT 3
8664: EQUAL
8665: AND
8666: IFFALSE 8680
// SetClass ( i , 1 ) ;
8668: LD_VAR 0 2
8672: PPUSH
8673: LD_INT 1
8675: PPUSH
8676: CALL_OW 336
// end ;
8680: GO 8582
8682: POP
8683: POP
// if heikeApes then
8684: LD_EXP 36
8688: IFFALSE 8731
// for i in heikeApes do
8690: LD_ADDR_VAR 0 2
8694: PUSH
8695: LD_EXP 36
8699: PUSH
8700: FOR_IN
8701: IFFALSE 8729
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
8703: LD_VAR 0 2
8707: PPUSH
8708: LD_INT 7
8710: PPUSH
8711: LD_INT 0
8713: PPUSH
8714: CALL_OW 49
// ComHold ( i ) ;
8718: LD_VAR 0 2
8722: PPUSH
8723: CALL_OW 140
// end ;
8727: GO 8700
8729: POP
8730: POP
// if Kurt then
8731: LD_EXP 32
8735: IFFALSE 8767
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
8737: LD_EXP 32
8741: PPUSH
8742: LD_INT 8
8744: PPUSH
8745: LD_INT 0
8747: PPUSH
8748: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
8752: LD_EXP 32
8756: PPUSH
8757: LD_INT 42
8759: PPUSH
8760: LD_INT 32
8762: PPUSH
8763: CALL_OW 118
// end ; wait ( 0 0$2 ) ;
8767: LD_INT 70
8769: PPUSH
8770: CALL_OW 67
// Say ( Heike , DH-Start-1 ) ;
8774: LD_EXP 21
8778: PPUSH
8779: LD_STRING DH-Start-1
8781: PPUSH
8782: CALL_OW 88
// if Givi then
8786: LD_EXP 22
8790: IFFALSE 9053
// begin Say ( Givi , DG-Start-2-5 ) ;
8792: LD_EXP 22
8796: PPUSH
8797: LD_STRING DG-Start-2-5
8799: PPUSH
8800: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
8804: LD_EXP 21
8808: PPUSH
8809: LD_STRING DH-Start-3
8811: PPUSH
8812: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8816: LD_EXP 21
8820: PPUSH
8821: LD_STRING DH-Start-4
8823: PPUSH
8824: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
8828: LD_EXP 22
8832: PPUSH
8833: LD_STRING DG-Start-5
8835: PPUSH
8836: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
8840: LD_EXP 21
8844: PPUSH
8845: LD_STRING DH-Start-6
8847: PPUSH
8848: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
8852: LD_EXP 22
8856: PPUSH
8857: LD_STRING DG-Start-7
8859: PPUSH
8860: CALL_OW 88
// if Mike then
8864: LD_EXP 23
8868: IFFALSE 9041
// begin Say ( Mike , DM-Start-8 ) ;
8870: LD_EXP 23
8874: PPUSH
8875: LD_STRING DM-Start-8
8877: PPUSH
8878: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
8882: LD_EXP 23
8886: PPUSH
8887: LD_STRING DM-Start-9
8889: PPUSH
8890: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
8894: LD_EXP 22
8898: PPUSH
8899: LD_STRING DG-Start-10
8901: PPUSH
8902: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
8906: LD_EXP 22
8910: PPUSH
8911: LD_STRING DG-Start-11
8913: PPUSH
8914: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
8918: LD_EXP 21
8922: PPUSH
8923: LD_STRING DH-Start-12
8925: PPUSH
8926: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
8930: LD_EXP 22
8934: PPUSH
8935: LD_STRING DG-Start-13
8937: PPUSH
8938: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
8942: LD_EXP 22
8946: PPUSH
8947: LD_STRING DG-Start-14
8949: PPUSH
8950: CALL_OW 88
// if Kaia then
8954: LD_EXP 26
8958: IFFALSE 9041
// begin Say ( Kaia , DK-Start-15 ) ;
8960: LD_EXP 26
8964: PPUSH
8965: LD_STRING DK-Start-15
8967: PPUSH
8968: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
8972: LD_EXP 26
8976: PPUSH
8977: LD_STRING DK-Start-16
8979: PPUSH
8980: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
8984: LD_EXP 26
8988: PPUSH
8989: LD_STRING DK-Start-17
8991: PPUSH
8992: CALL_OW 88
// wait ( 0 0$0.3 ) ;
8996: LD_INT 10
8998: PPUSH
8999: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
9003: LD_EXP 22
9007: PPUSH
9008: LD_EXP 26
9012: PPUSH
9013: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
9017: LD_EXP 22
9021: PPUSH
9022: LD_STRING DG-Start-18
9024: PPUSH
9025: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
9029: LD_EXP 26
9033: PPUSH
9034: LD_STRING DK-Start-19
9036: PPUSH
9037: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
9041: LD_EXP 21
9045: PPUSH
9046: LD_STRING DH-Start-20
9048: PPUSH
9049: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
9053: LD_INT 70
9055: PPUSH
9056: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
9060: LD_EXP 29
9064: PPUSH
9065: LD_STRING DShar-Start-21
9067: PPUSH
9068: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
9072: LD_EXP 21
9076: PPUSH
9077: LD_STRING DH-Start-22
9079: PPUSH
9080: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
9084: LD_EXP 29
9088: PPUSH
9089: LD_STRING DShar-Start-23
9091: PPUSH
9092: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
9096: LD_EXP 29
9100: PPUSH
9101: LD_STRING DShar-Start-24
9103: PPUSH
9104: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
9108: LD_EXP 29
9112: PPUSH
9113: LD_STRING DShar-Start-25
9115: PPUSH
9116: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
9120: LD_EXP 29
9124: PPUSH
9125: LD_STRING DShar-Start-26
9127: PPUSH
9128: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
9132: LD_EXP 21
9136: PPUSH
9137: LD_STRING DH-Start-27
9139: PPUSH
9140: CALL_OW 88
// if Kaia then
9144: LD_EXP 26
9148: IFFALSE 9190
// begin ComTurnUnit ( Heike , Kaia ) ;
9150: LD_EXP 21
9154: PPUSH
9155: LD_EXP 26
9159: PPUSH
9160: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
9164: LD_EXP 26
9168: PPUSH
9169: LD_STRING DK-Start-28
9171: PPUSH
9172: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
9176: LD_EXP 21
9180: PPUSH
9181: LD_STRING DH-Start-29
9183: PPUSH
9184: CALL_OW 88
// end else
9188: GO 9202
// Say ( Heike , DH-Start-a-28 ) ;
9190: LD_EXP 21
9194: PPUSH
9195: LD_STRING DH-Start-a-28
9197: PPUSH
9198: CALL_OW 88
// if Givi then
9202: LD_EXP 22
9206: IFFALSE 9441
// begin ComTurnUnit ( Heike , Givi ) ;
9208: LD_EXP 21
9212: PPUSH
9213: LD_EXP 22
9217: PPUSH
9218: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
9222: LD_EXP 22
9226: PPUSH
9227: LD_EXP 21
9231: PPUSH
9232: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
9236: LD_EXP 21
9240: PPUSH
9241: LD_STRING DH-Start-30
9243: PPUSH
9244: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
9248: LD_EXP 21
9252: PPUSH
9253: LD_STRING DH-Start-31
9255: PPUSH
9256: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
9260: LD_EXP 22
9264: PPUSH
9265: LD_STRING DG-Start-32
9267: PPUSH
9268: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
9272: LD_EXP 21
9276: PPUSH
9277: LD_STRING DH-Start-33
9279: PPUSH
9280: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
9284: LD_EXP 22
9288: PPUSH
9289: LD_STRING DG-Start-34
9291: PPUSH
9292: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
9296: LD_EXP 22
9300: PPUSH
9301: LD_STRING DG-Start-35
9303: PPUSH
9304: CALL_OW 88
// if Kurt and not dialogue_skipped then
9308: LD_EXP 32
9312: PUSH
9313: LD_OWVAR 59
9317: NOT
9318: AND
9319: IFFALSE 9350
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
9321: LD_EXP 32
9325: PPUSH
9326: LD_INT 28
9328: PPUSH
9329: LD_INT 13
9331: PPUSH
9332: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
9336: LD_EXP 32
9340: PPUSH
9341: LD_EXP 21
9345: PPUSH
9346: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
9350: LD_EXP 22
9354: PPUSH
9355: LD_STRING DG-Start-36
9357: PPUSH
9358: CALL_OW 88
// if Kurt then
9362: LD_EXP 32
9366: IFFALSE 9439
// begin if not Givi then
9368: LD_EXP 22
9372: NOT
9373: IFFALSE 9389
// Say ( Kurt , DKs-Start-37-a ) else
9375: LD_EXP 32
9379: PPUSH
9380: LD_STRING DKs-Start-37-a
9382: PPUSH
9383: CALL_OW 88
9387: GO 9401
// Say ( Kurt , DKs-Start-37 ) ;
9389: LD_EXP 32
9393: PPUSH
9394: LD_STRING DKs-Start-37
9396: PPUSH
9397: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
9401: LD_EXP 32
9405: PPUSH
9406: LD_STRING DKs-Start-38
9408: PPUSH
9409: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
9413: LD_EXP 21
9417: PPUSH
9418: LD_EXP 32
9422: PPUSH
9423: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
9427: LD_EXP 21
9431: PPUSH
9432: LD_STRING DH-Start-39
9434: PPUSH
9435: CALL_OW 88
// end ; end else
9439: GO 9470
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
9441: LD_EXP 34
9445: PPUSH
9446: LD_STRING DArm-Start-a-37
9448: PPUSH
9449: LD_STRING DArf-Start-a-37
9451: PPUSH
9452: CALL 1274 0 3
9456: IFFALSE 9470
// Say ( Heike , DH-Start-39 ) ;
9458: LD_EXP 21
9462: PPUSH
9463: LD_STRING DH-Start-39
9465: PPUSH
9466: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
9470: LD_INT 44
9472: PPUSH
9473: LD_INT 25
9475: PPUSH
9476: CALL_OW 428
9480: IFFALSE 9497
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
9482: LD_INT 44
9484: PPUSH
9485: LD_INT 25
9487: PPUSH
9488: CALL_OW 428
9492: PPUSH
9493: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
9497: LD_EXP 30
9501: PPUSH
9502: LD_INT 5
9504: PPUSH
9505: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
9509: LD_EXP 30
9513: PPUSH
9514: LD_INT 44
9516: PPUSH
9517: LD_INT 25
9519: PPUSH
9520: LD_INT 0
9522: PPUSH
9523: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
9527: LD_EXP 30
9531: PPUSH
9532: LD_INT 29
9534: PPUSH
9535: LD_INT 12
9537: PPUSH
9538: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9542: LD_INT 35
9544: PPUSH
9545: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9549: LD_OWVAR 59
9553: PUSH
9554: LD_EXP 21
9558: PPUSH
9559: LD_EXP 30
9563: PPUSH
9564: CALL_OW 296
9568: PUSH
9569: LD_INT 8
9571: LESS
9572: OR
9573: PUSH
9574: LD_EXP 30
9578: PPUSH
9579: LD_INT 26
9581: PPUSH
9582: LD_INT 9
9584: PPUSH
9585: CALL_OW 297
9589: PUSH
9590: LD_INT 6
9592: LESS
9593: OR
9594: IFFALSE 9542
// Say ( Olaf , DO-Scout-1 ) ;
9596: LD_EXP 30
9600: PPUSH
9601: LD_STRING DO-Scout-1
9603: PPUSH
9604: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9608: LD_EXP 30
9612: PPUSH
9613: LD_EXP 21
9617: PPUSH
9618: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9622: LD_ADDR_VAR 0 2
9626: PUSH
9627: LD_VAR 0 6
9631: PUSH
9632: LD_EXP 34
9636: UNION
9637: PUSH
9638: FOR_IN
9639: IFFALSE 9657
// ComTurnUnit ( i , Olaf ) ;
9641: LD_VAR 0 2
9645: PPUSH
9646: LD_EXP 30
9650: PPUSH
9651: CALL_OW 119
9655: GO 9638
9657: POP
9658: POP
// wait ( 0 0$0.3 ) ;
9659: LD_INT 10
9661: PPUSH
9662: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9666: LD_EXP 21
9670: PPUSH
9671: LD_EXP 30
9675: PPUSH
9676: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
9680: LD_EXP 21
9684: PPUSH
9685: LD_EXP 30
9689: PPUSH
9690: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
9694: LD_EXP 21
9698: PPUSH
9699: LD_STRING DH-Scout-2
9701: PPUSH
9702: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
9706: LD_EXP 30
9710: PPUSH
9711: LD_STRING DO-Scout-3
9713: PPUSH
9714: CALL_OW 88
// if Mike and Givi then
9718: LD_EXP 23
9722: PUSH
9723: LD_EXP 22
9727: AND
9728: IFFALSE 9744
// Say ( Olaf , DO-Scout-4 ) else
9730: LD_EXP 30
9734: PPUSH
9735: LD_STRING DO-Scout-4
9737: PPUSH
9738: CALL_OW 88
9742: GO 9844
// begin if Mike then
9744: LD_EXP 23
9748: IFFALSE 9776
// begin Say ( Olaf , DO-Scout-a-4 ) ;
9750: LD_EXP 30
9754: PPUSH
9755: LD_STRING DO-Scout-a-4
9757: PPUSH
9758: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
9762: LD_EXP 21
9766: PPUSH
9767: LD_STRING DH-Scout-a-5
9769: PPUSH
9770: CALL_OW 88
// end else
9774: GO 9844
// if Givi then
9776: LD_EXP 22
9780: IFFALSE 9808
// begin Say ( Olaf , DO-Scout-b-4 ) ;
9782: LD_EXP 30
9786: PPUSH
9787: LD_STRING DO-Scout-b-4
9789: PPUSH
9790: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
9794: LD_EXP 21
9798: PPUSH
9799: LD_STRING DH-Scout-b-5
9801: PPUSH
9802: CALL_OW 88
// end else
9806: GO 9844
// begin Say ( Olaf , DO-Scout-f-4 ) ;
9808: LD_EXP 30
9812: PPUSH
9813: LD_STRING DO-Scout-f-4
9815: PPUSH
9816: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
9820: LD_EXP 21
9824: PPUSH
9825: LD_STRING DH-Scout-f-5
9827: PPUSH
9828: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
9832: LD_EXP 30
9836: PPUSH
9837: LD_STRING DO-Scout-f-6
9839: PPUSH
9840: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
9844: LD_EXP 21
9848: PPUSH
9849: LD_STRING DH-Scout-5
9851: PPUSH
9852: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
9856: LD_EXP 30
9860: PPUSH
9861: LD_STRING DO-Scout-6
9863: PPUSH
9864: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
9868: LD_EXP 30
9872: PPUSH
9873: LD_STRING DO-Scout-7
9875: PPUSH
9876: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
9880: LD_EXP 21
9884: PPUSH
9885: LD_STRING DH-Scout-8
9887: PPUSH
9888: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
9892: LD_EXP 21
9896: PPUSH
9897: LD_STRING DH-Scout-9
9899: PPUSH
9900: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
9904: LD_EXP 30
9908: PPUSH
9909: LD_STRING DO-Scout-10
9911: PPUSH
9912: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
9916: LD_EXP 30
9920: PPUSH
9921: LD_STRING DO-Scout-12
9923: PPUSH
9924: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
9928: LD_EXP 30
9932: PPUSH
9933: LD_STRING DO-Scout-13
9935: PPUSH
9936: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
9940: LD_EXP 30
9944: PPUSH
9945: LD_STRING DO-Scout-14
9947: PPUSH
9948: CALL_OW 88
// if Givi then
9952: LD_EXP 22
9956: IFFALSE 9982
// begin Say ( Givi , DG-Scout-15 ) ;
9958: LD_EXP 22
9962: PPUSH
9963: LD_STRING DG-Scout-15
9965: PPUSH
9966: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
9970: LD_EXP 26
9974: PPUSH
9975: LD_STRING DK-Scout-16
9977: PPUSH
9978: CALL_OW 88
// end ; if not dialogue_skipped then
9982: LD_OWVAR 59
9986: NOT
9987: IFFALSE 10108
// begin async ;
9989: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
9990: LD_EXP 30
9994: PPUSH
9995: LD_STRING DO-Scout-17
9997: PPUSH
9998: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10002: LD_INT 55
10004: PPUSH
10005: LD_INT 77
10007: PPUSH
10008: LD_INT 2
10010: PPUSH
10011: LD_INT 6
10013: NEG
10014: PPUSH
10015: CALL 1223 0 4
// wait ( 10 ) ;
10019: LD_INT 10
10021: PPUSH
10022: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
10026: LD_INT 55
10028: PPUSH
10029: LD_INT 77
10031: PPUSH
10032: CALL_OW 84
// wait ( 0 0$10 ) ;
10036: LD_INT 350
10038: PPUSH
10039: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
10043: LD_EXP 30
10047: PPUSH
10048: LD_STRING DO-Scout-18
10050: PPUSH
10051: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10055: LD_INT 204
10057: PPUSH
10058: LD_INT 107
10060: PPUSH
10061: LD_INT 2
10063: PPUSH
10064: LD_INT 12
10066: NEG
10067: PPUSH
10068: CALL 1223 0 4
// wait ( 10 ) ;
10072: LD_INT 10
10074: PPUSH
10075: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
10079: LD_INT 204
10081: PPUSH
10082: LD_INT 107
10084: PPUSH
10085: CALL_OW 84
// wait ( 0 0$10 ) ;
10089: LD_INT 350
10091: PPUSH
10092: CALL_OW 67
// sync ;
10096: SYNC
// CenterNowOnUnits ( Heike ) ;
10097: LD_EXP 21
10101: PPUSH
10102: CALL_OW 87
// end else
10106: GO 10142
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10108: LD_INT 55
10110: PPUSH
10111: LD_INT 77
10113: PPUSH
10114: LD_INT 2
10116: PPUSH
10117: LD_INT 6
10119: NEG
10120: PPUSH
10121: CALL 1223 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10125: LD_INT 204
10127: PPUSH
10128: LD_INT 107
10130: PPUSH
10131: LD_INT 2
10133: PPUSH
10134: LD_INT 12
10136: NEG
10137: PPUSH
10138: CALL 1223 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
10142: LD_EXP 30
10146: PPUSH
10147: LD_STRING DO-Scout-19
10149: PPUSH
10150: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
10154: LD_EXP 30
10158: PPUSH
10159: LD_STRING DO-Scout-20
10161: PPUSH
10162: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
10166: LD_EXP 21
10170: PPUSH
10171: LD_STRING DH-Scout-21
10173: PPUSH
10174: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
10178: LD_EXP 21
10182: PPUSH
10183: LD_STRING DH-Scout-22
10185: PPUSH
10186: CALL_OW 88
// InGameOff ;
10190: CALL_OW 9
// if heikeSecondSquad then
10194: LD_EXP 34
10198: IFFALSE 10212
// ForceSleep ( heikeSecondSquad , false ) ;
10200: LD_EXP 34
10204: PPUSH
10205: LD_INT 0
10207: PPUSH
10208: CALL_OW 585
// if Givi then
10212: LD_EXP 22
10216: IFFALSE 10231
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
10218: LD_INT 13
10220: PPUSH
10221: LD_INT 2
10223: PPUSH
10224: LD_INT 1
10226: PPUSH
10227: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
10231: LD_STRING Road
10233: PPUSH
10234: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
10238: LD_ADDR_VAR 0 2
10242: PUSH
10243: LD_INT 22
10245: PUSH
10246: LD_INT 5
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: PUSH
10253: LD_INT 21
10255: PUSH
10256: LD_INT 2
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PPUSH
10267: CALL_OW 69
10271: PUSH
10272: FOR_IN
10273: IFFALSE 10289
// SetSide ( i , 2 ) ;
10275: LD_VAR 0 2
10279: PPUSH
10280: LD_INT 2
10282: PPUSH
10283: CALL_OW 235
10287: GO 10272
10289: POP
10290: POP
// SaveForQuickRestart ;
10291: CALL_OW 22
// music_class := music_auto ;
10295: LD_ADDR_OWVAR 72
10299: PUSH
10300: LD_INT 0
10302: ST_TO_ADDR
// end ;
10303: LD_VAR 0 1
10307: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
10308: LD_INT 2
10310: PPUSH
10311: LD_INT 9
10313: PPUSH
10314: CALL_OW 294
10318: IFFALSE 10685
10320: GO 10322
10322: DISABLE
// begin DialogueOn ;
10323: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
10327: LD_INT 111
10329: PPUSH
10330: LD_INT 72
10332: PPUSH
10333: LD_INT 2
10335: PPUSH
10336: LD_INT 20
10338: NEG
10339: PPUSH
10340: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
10344: LD_INT 111
10346: PPUSH
10347: LD_INT 72
10349: PPUSH
10350: LD_INT 2
10352: PPUSH
10353: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
10357: LD_INT 111
10359: PPUSH
10360: LD_INT 72
10362: PPUSH
10363: CALL_OW 86
// if IsOk ( Kamil ) then
10367: LD_EXP 25
10371: PPUSH
10372: CALL_OW 302
10376: IFFALSE 10493
// begin Say ( Kamil , DKam-Cross-1 ) ;
10378: LD_EXP 25
10382: PPUSH
10383: LD_STRING DKam-Cross-1
10385: PPUSH
10386: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
10390: LD_EXP 25
10394: PPUSH
10395: LD_STRING DKam-Cross-2
10397: PPUSH
10398: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
10402: LD_EXP 25
10406: PPUSH
10407: LD_STRING DKam-Cross-3
10409: PPUSH
10410: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
10414: LD_EXP 25
10418: PPUSH
10419: LD_STRING DKam-Cross-4
10421: PPUSH
10422: CALL_OW 88
// if IsOk ( Ibrahim ) then
10426: LD_EXP 24
10430: PPUSH
10431: CALL_OW 302
10435: IFFALSE 10491
// begin if ibrahimJoinedIn04 then
10437: LD_EXP 4
10441: IFFALSE 10455
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10443: LD_EXP 24
10447: PPUSH
10448: LD_STRING DI-Cross-b-5
10450: PPUSH
10451: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10455: LD_EXP 24
10459: PPUSH
10460: LD_STRING DI-Cross-b-6
10462: PPUSH
10463: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10467: LD_EXP 24
10471: PPUSH
10472: LD_STRING DI-Cross-b-7
10474: PPUSH
10475: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
10479: LD_EXP 25
10483: PPUSH
10484: LD_STRING DKam-Cross-8
10486: PPUSH
10487: CALL_OW 88
// end ; end else
10491: GO 10651
// if IsOk ( Sophia ) then
10493: LD_EXP 27
10497: PPUSH
10498: CALL_OW 302
10502: IFFALSE 10619
// begin Say ( Sophia , DS-Cross-1 ) ;
10504: LD_EXP 27
10508: PPUSH
10509: LD_STRING DS-Cross-1
10511: PPUSH
10512: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
10516: LD_EXP 27
10520: PPUSH
10521: LD_STRING DS-Cross-2
10523: PPUSH
10524: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
10528: LD_EXP 27
10532: PPUSH
10533: LD_STRING DS-Cross-3
10535: PPUSH
10536: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
10540: LD_EXP 27
10544: PPUSH
10545: LD_STRING DS-Cross-4
10547: PPUSH
10548: CALL_OW 88
// if IsOk ( Ibrahim ) then
10552: LD_EXP 24
10556: PPUSH
10557: CALL_OW 302
10561: IFFALSE 10617
// begin if ibrahimJoinedIn04 then
10563: LD_EXP 4
10567: IFFALSE 10581
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10569: LD_EXP 24
10573: PPUSH
10574: LD_STRING DI-Cross-b-5
10576: PPUSH
10577: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10581: LD_EXP 24
10585: PPUSH
10586: LD_STRING DI-Cross-b-6
10588: PPUSH
10589: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10593: LD_EXP 24
10597: PPUSH
10598: LD_STRING DI-Cross-b-7
10600: PPUSH
10601: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10605: LD_EXP 27
10609: PPUSH
10610: LD_STRING DS-Cross-8
10612: PPUSH
10613: CALL_OW 88
// end ; end else
10617: GO 10651
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10619: LD_EXP 34
10623: PPUSH
10624: LD_INT 50
10626: PUSH
10627: EMPTY
10628: LIST
10629: PPUSH
10630: CALL_OW 72
10634: IFFALSE 10651
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10636: LD_EXP 34
10640: PPUSH
10641: LD_STRING DArm-Cross-c-1
10643: PPUSH
10644: LD_STRING DArf-Cross-c-1
10646: PPUSH
10647: CALL 1274 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10651: LD_EXP 57
10655: PPUSH
10656: LD_INT 2
10658: PPUSH
10659: LD_INT 1
10661: PPUSH
10662: CALL_OW 322
// DialogueOff ;
10666: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
10670: LD_STRING Crane
10672: PPUSH
10673: CALL_OW 337
// spottedCrossRoad := true ;
10677: LD_ADDR_EXP 8
10681: PUSH
10682: LD_INT 1
10684: ST_TO_ADDR
// end ;
10685: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
10686: LD_INT 22
10688: PUSH
10689: LD_INT 2
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PUSH
10696: LD_INT 2
10698: PUSH
10699: LD_INT 30
10701: PUSH
10702: LD_INT 0
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PUSH
10709: LD_INT 30
10711: PUSH
10712: LD_INT 1
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: PUSH
10719: EMPTY
10720: LIST
10721: LIST
10722: LIST
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PPUSH
10728: CALL_OW 69
10732: PUSH
10733: LD_EXP 26
10737: PPUSH
10738: CALL_OW 302
10742: PUSH
10743: LD_EXP 34
10747: OR
10748: AND
10749: IFFALSE 10961
10751: GO 10753
10753: DISABLE
// begin DialogueOn ;
10754: CALL_OW 6
// if Kaia then
10758: LD_EXP 26
10762: IFFALSE 10775
// CenterNowOnUnits ( Kaia ) else
10764: LD_EXP 26
10768: PPUSH
10769: CALL_OW 87
10773: GO 10784
// CenterNowOnUnits ( Heike ) ;
10775: LD_EXP 21
10779: PPUSH
10780: CALL_OW 87
// if IsOk ( Kaia ) then
10784: LD_EXP 26
10788: PPUSH
10789: CALL_OW 302
10793: IFFALSE 10809
// Say ( Kaia , DK-Cam-1 ) else
10795: LD_EXP 26
10799: PPUSH
10800: LD_STRING DK-Cam-1
10802: PPUSH
10803: CALL_OW 88
10807: GO 10824
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
10809: LD_EXP 34
10813: PPUSH
10814: LD_STRING DArm-Cam-1
10816: PPUSH
10817: LD_STRING DArf-Cam-1
10819: PPUSH
10820: CALL 1274 0 3
// Say ( Heike , DH-Cam-2 ) ;
10824: LD_EXP 21
10828: PPUSH
10829: LD_STRING DH-Cam-2
10831: PPUSH
10832: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
10836: LD_EXP 21
10840: PPUSH
10841: LD_STRING DH-Cam-3
10843: PPUSH
10844: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10848: LD_EXP 21
10852: PPUSH
10853: LD_STRING DH-Cam-4
10855: PPUSH
10856: CALL_OW 88
// if IsOk ( Kaia ) then
10860: LD_EXP 26
10864: PPUSH
10865: CALL_OW 302
10869: IFFALSE 10885
// Say ( Kaia , DK-Cam-5 ) else
10871: LD_EXP 26
10875: PPUSH
10876: LD_STRING DK-Cam-5
10878: PPUSH
10879: CALL_OW 88
10883: GO 10900
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
10885: LD_EXP 34
10889: PPUSH
10890: LD_STRING DArm-Cam-5
10892: PPUSH
10893: LD_STRING DArf-Cam-5
10895: PPUSH
10896: CALL 1274 0 3
// Say ( Olaf , DO-Cam-6 ) ;
10900: LD_EXP 30
10904: PPUSH
10905: LD_STRING DO-Cam-6
10907: PPUSH
10908: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
10912: LD_EXP 30
10916: PPUSH
10917: LD_STRING DO-Cam-7
10919: PPUSH
10920: CALL_OW 88
// DialogueOff ;
10924: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
10928: LD_STRING Radar
10930: PPUSH
10931: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
10935: LD_INT 6
10937: PPUSH
10938: LD_INT 2
10940: PPUSH
10941: LD_INT 1
10943: PPUSH
10944: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
10948: LD_INT 20
10950: PPUSH
10951: LD_INT 2
10953: PPUSH
10954: LD_INT 1
10956: PPUSH
10957: CALL_OW 324
// end ;
10961: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
10962: LD_INT 22
10964: PUSH
10965: LD_INT 2
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: PUSH
10972: LD_INT 2
10974: PUSH
10975: LD_INT 34
10977: PUSH
10978: LD_INT 30
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: PUSH
10985: LD_INT 35
10987: PUSH
10988: LD_INT 30
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: LIST
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: PPUSH
11004: CALL_OW 69
11008: IFFALSE 11020
11010: GO 11012
11012: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
11013: LD_STRING RadarDone
11015: PPUSH
11016: CALL_OW 337
11020: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
11021: LD_INT 22
11023: PUSH
11024: LD_INT 2
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PUSH
11031: LD_INT 34
11033: PUSH
11034: LD_EXP 50
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PPUSH
11047: CALL_OW 69
11051: IFFALSE 11063
11053: GO 11055
11055: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
11056: LD_STRING CraneDone
11058: PPUSH
11059: CALL_OW 337
11063: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
11064: LD_EXP 30
11068: PPUSH
11069: CALL_OW 302
11073: PUSH
11074: LD_EXP 33
11078: PPUSH
11079: CALL_OW 302
11083: AND
11084: PUSH
11085: LD_INT 6
11087: PPUSH
11088: LD_INT 2
11090: PPUSH
11091: CALL_OW 321
11095: PUSH
11096: LD_INT 2
11098: EQUAL
11099: AND
11100: PUSH
11101: LD_EXP 33
11105: PPUSH
11106: LD_EXP 21
11110: PPUSH
11111: CALL_OW 296
11115: PUSH
11116: LD_INT 10
11118: LESS
11119: PUSH
11120: LD_EXP 33
11124: PPUSH
11125: CALL_OW 310
11129: OR
11130: AND
11131: IFFALSE 11345
11133: GO 11135
11135: DISABLE
// begin DialogueOn ;
11136: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
11140: LD_EXP 33
11144: PPUSH
11145: LD_STRING DA-RC-1
11147: PPUSH
11148: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
11152: LD_EXP 33
11156: PPUSH
11157: LD_STRING DA-RC-2
11159: PPUSH
11160: CALL_OW 88
// if IsOk ( Kaia ) then
11164: LD_EXP 26
11168: PPUSH
11169: CALL_OW 302
11173: IFFALSE 11247
// begin Say ( Kaia , DK-RC-3 ) ;
11175: LD_EXP 26
11179: PPUSH
11180: LD_STRING DK-RC-3
11182: PPUSH
11183: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
11187: LD_EXP 33
11191: PPUSH
11192: LD_STRING DA-RC-4
11194: PPUSH
11195: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
11199: LD_EXP 26
11203: PPUSH
11204: LD_STRING DK-RC-5
11206: PPUSH
11207: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
11211: LD_EXP 33
11215: PPUSH
11216: LD_STRING DA-RC-6
11218: PPUSH
11219: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
11223: LD_EXP 26
11227: PPUSH
11228: LD_STRING DK-RC-7
11230: PPUSH
11231: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
11235: LD_EXP 33
11239: PPUSH
11240: LD_STRING DA-RC-8
11242: PPUSH
11243: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
11247: LD_EXP 21
11251: PPUSH
11252: LD_STRING DH-RC-9
11254: PPUSH
11255: CALL_OW 88
// if IsOk ( Markov ) then
11259: LD_EXP 28
11263: PPUSH
11264: CALL_OW 302
11268: IFFALSE 11296
// begin Say ( Markov , DMar-RC-10 ) ;
11270: LD_EXP 28
11274: PPUSH
11275: LD_STRING DMar-RC-10
11277: PPUSH
11278: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
11282: LD_EXP 28
11286: PPUSH
11287: LD_STRING DMar-RC-11
11289: PPUSH
11290: CALL_OW 88
// end else
11294: GO 11308
// begin Say ( Olaf , DO-RC-a-10 ) ;
11296: LD_EXP 30
11300: PPUSH
11301: LD_STRING DO-RC-a-10
11303: PPUSH
11304: CALL_OW 88
// end ; DialogueOff ;
11308: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
11312: LD_STRING RemoteControl
11314: PPUSH
11315: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
11319: LD_INT 15
11321: PPUSH
11322: LD_INT 2
11324: PPUSH
11325: LD_INT 1
11327: PPUSH
11328: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
11332: LD_INT 22
11334: PPUSH
11335: LD_INT 2
11337: PPUSH
11338: LD_INT 1
11340: PPUSH
11341: CALL_OW 324
// end ;
11345: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
11346: LD_INT 12
11348: PPUSH
11349: LD_INT 22
11351: PUSH
11352: LD_INT 2
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PPUSH
11359: CALL_OW 70
11363: IFFALSE 11730
11365: GO 11367
11367: DISABLE
11368: LD_INT 0
11370: PPUSH
// begin PrepareWestBase ;
11371: CALL 3992 0 0
// westBaseSpotted := true ;
11375: LD_ADDR_EXP 5
11379: PUSH
11380: LD_INT 1
11382: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11383: LD_INT 70
11385: PPUSH
11386: CALL_OW 67
// InGameOn ;
11390: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
11394: LD_INT 56
11396: PPUSH
11397: LD_INT 77
11399: PPUSH
11400: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
11404: LD_INT 56
11406: PPUSH
11407: LD_INT 77
11409: PPUSH
11410: LD_INT 2
11412: PPUSH
11413: LD_INT 12
11415: NEG
11416: PPUSH
11417: CALL_OW 330
// wait ( 0 0$2 ) ;
11421: LD_INT 70
11423: PPUSH
11424: CALL_OW 67
// DialogueOn ;
11428: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
11432: LD_EXP 21
11436: PPUSH
11437: LD_STRING DH-Rbase-1
11439: PPUSH
11440: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
11444: LD_EXP 26
11448: PPUSH
11449: LD_STRING DK-Rbase-2
11451: PPUSH
11452: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
11456: LD_EXP 26
11460: PPUSH
11461: LD_STRING DK-Rbase-3
11463: PPUSH
11464: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
11468: LD_EXP 26
11472: PPUSH
11473: LD_STRING DK-Rbase-4
11475: PPUSH
11476: CALL_OW 88
// DialogueOff ;
11480: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
11484: LD_INT 56
11486: PPUSH
11487: LD_INT 77
11489: PPUSH
11490: LD_INT 2
11492: PPUSH
11493: CALL_OW 331
// InGameOff ;
11497: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
11501: LD_INT 35
11503: PPUSH
11504: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
11508: LD_EXP 42
11512: NOT
11513: PUSH
11514: LD_EXP 43
11518: NOT
11519: AND
11520: IFFALSE 11501
// wait ( 0 0$2 ) ;
11522: LD_INT 70
11524: PPUSH
11525: CALL_OW 67
// if IsOk ( Kaia ) then
11529: LD_EXP 26
11533: PPUSH
11534: CALL_OW 302
11538: IFFALSE 11653
// begin DialogueOn ;
11540: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
11544: LD_INT 56
11546: PPUSH
11547: LD_INT 81
11549: PPUSH
11550: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11554: LD_EXP 26
11558: PPUSH
11559: LD_STRING DK-Rbase-5
11561: PPUSH
11562: CALL_OW 88
// if IsOk ( Givi ) then
11566: LD_EXP 22
11570: PPUSH
11571: CALL_OW 302
11575: IFFALSE 11649
// begin Say ( Givi , DG-Rbase-6 ) ;
11577: LD_EXP 22
11581: PPUSH
11582: LD_STRING DG-Rbase-6
11584: PPUSH
11585: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11589: LD_EXP 22
11593: PPUSH
11594: LD_STRING DG-Rbase-7
11596: PPUSH
11597: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11601: LD_EXP 26
11605: PPUSH
11606: LD_STRING DK-Rbase-8
11608: PPUSH
11609: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11613: LD_EXP 22
11617: PPUSH
11618: LD_STRING DG-Rbase-9
11620: PPUSH
11621: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11625: LD_EXP 22
11629: PPUSH
11630: LD_STRING DG-Rbase-10
11632: PPUSH
11633: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11637: LD_EXP 26
11641: PPUSH
11642: LD_STRING DK-Rbase-11
11644: PPUSH
11645: CALL_OW 88
// end ; DialogueOff ;
11649: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11653: LD_ADDR_VAR 0 1
11657: PUSH
11658: LD_INT 12
11660: PPUSH
11661: LD_INT 22
11663: PUSH
11664: LD_INT 3
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: PUSH
11671: LD_INT 21
11673: PUSH
11674: LD_INT 3
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: PPUSH
11685: CALL_OW 70
11689: PUSH
11690: FOR_IN
11691: IFFALSE 11707
// SetSide ( i , 2 ) ;
11693: LD_VAR 0 1
11697: PPUSH
11698: LD_INT 2
11700: PPUSH
11701: CALL_OW 235
11705: GO 11690
11707: POP
11708: POP
// westBaseCaptured := true ;
11709: LD_ADDR_EXP 9
11713: PUSH
11714: LD_INT 1
11716: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
11717: LD_INT 0
11719: PPUSH
11720: LD_INT 2
11722: PPUSH
11723: LD_INT 1
11725: PPUSH
11726: CALL_OW 324
// end ;
11730: PPOPN 1
11732: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
11733: LD_EXP 38
11737: NOT
11738: PUSH
11739: LD_INT 10
11741: PPUSH
11742: CALL_OW 255
11746: PUSH
11747: LD_INT 2
11749: EQUAL
11750: OR
11751: IFFALSE 11888
11753: GO 11755
11755: DISABLE
// begin DialogueOn ;
11756: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
11760: LD_EXP 21
11764: PPUSH
11765: LD_STRING DH-Goal-1
11767: PPUSH
11768: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
11772: LD_EXP 29
11776: PPUSH
11777: LD_STRING DShar-Goal-2
11779: PPUSH
11780: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
11784: LD_EXP 21
11788: PPUSH
11789: LD_STRING DH-Goal-3
11791: PPUSH
11792: CALL_OW 88
// if reinforcementsAllowed then
11796: LD_EXP 14
11800: IFFALSE 11826
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
11802: LD_EXP 29
11806: PPUSH
11807: LD_STRING DShar-Goal-4
11809: PPUSH
11810: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
11814: LD_EXP 21
11818: PPUSH
11819: LD_STRING DH-Goal-5
11821: PPUSH
11822: CALL_OW 88
// end ; DialogueOff ;
11826: CALL_OW 7
// eastBaseCaptured := true ;
11830: LD_ADDR_EXP 10
11834: PUSH
11835: LD_INT 1
11837: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
11838: LD_STRING BaseCaptured
11840: PPUSH
11841: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
11845: LD_INT 10
11847: PPUSH
11848: LD_INT 2
11850: PPUSH
11851: CALL_OW 235
// if not reinforcementsAllowed then
11855: LD_EXP 14
11859: NOT
11860: IFFALSE 11864
// exit ;
11862: GO 11888
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
11864: LD_INT 21000
11866: PUSH
11867: LD_INT 1050
11869: NEG
11870: PPUSH
11871: LD_INT 1050
11873: PPUSH
11874: CALL_OW 12
11878: PLUS
11879: PPUSH
11880: CALL_OW 67
// PrepareReinforcements ;
11884: CALL 2250 0 0
// end ;
11888: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
11889: LD_INT 22
11891: PUSH
11892: LD_INT 2
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 30
11901: PUSH
11902: LD_INT 13
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PPUSH
11913: CALL_OW 69
11917: IFFALSE 11934
11919: GO 11921
11921: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
11922: LD_EXP 22
11926: PPUSH
11927: LD_STRING DG-Lab-1
11929: PPUSH
11930: CALL_OW 88
// end ;
11934: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
11935: LD_INT 5
11937: PPUSH
11938: LD_INT 2
11940: PPUSH
11941: CALL_OW 321
11945: PUSH
11946: LD_INT 2
11948: EQUAL
11949: PUSH
11950: LD_EXP 22
11954: PPUSH
11955: CALL_OW 302
11959: AND
11960: IFFALSE 12021
11962: GO 11964
11964: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
11965: LD_EXP 22
11969: PPUSH
11970: LD_STRING DG-Stim-1
11972: PPUSH
11973: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
11977: LD_EXP 21
11981: PPUSH
11982: LD_STRING DH-Stim-2
11984: PPUSH
11985: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
11989: LD_EXP 22
11993: PPUSH
11994: LD_STRING DG-Stim-3
11996: PPUSH
11997: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
12001: LD_EXP 21
12005: PPUSH
12006: LD_STRING DH-Stim-4
12008: PPUSH
12009: CALL_OW 88
// drugsResearched := true ;
12013: LD_ADDR_EXP 11
12017: PUSH
12018: LD_INT 1
12020: ST_TO_ADDR
// end ;
12021: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
12022: LD_EXP 11
12026: IFFALSE 12338
12028: GO 12030
12030: DISABLE
12031: LD_INT 0
12033: PPUSH
12034: PPUSH
12035: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12036: LD_ADDR_VAR 0 2
12040: PUSH
12041: LD_EXP 21
12045: PUSH
12046: LD_EXP 22
12050: PUSH
12051: LD_EXP 30
12055: PUSH
12056: LD_EXP 28
12060: PUSH
12061: LD_EXP 26
12065: PUSH
12066: LD_EXP 27
12070: PUSH
12071: LD_EXP 32
12075: PUSH
12076: LD_EXP 25
12080: PUSH
12081: LD_EXP 23
12085: PUSH
12086: LD_EXP 24
12090: PUSH
12091: LD_EXP 33
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12109: LD_ADDR_VAR 0 3
12113: PUSH
12114: LD_STRING H
12116: PUSH
12117: LD_STRING G
12119: PUSH
12120: LD_STRING O
12122: PUSH
12123: LD_STRING Mar
12125: PUSH
12126: LD_STRING K
12128: PUSH
12129: LD_STRING S
12131: PUSH
12132: LD_STRING Ks
12134: PUSH
12135: LD_STRING Kam
12137: PUSH
12138: LD_STRING M
12140: PUSH
12141: LD_STRING I
12143: PUSH
12144: LD_STRING A
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12160: LD_INT 35
12162: PPUSH
12163: CALL_OW 67
// for i := tmp downto 1 do
12167: LD_ADDR_VAR 0 1
12171: PUSH
12172: DOUBLE
12173: LD_VAR 0 2
12177: INC
12178: ST_TO_ADDR
12179: LD_INT 1
12181: PUSH
12182: FOR_DOWNTO
12183: IFFALSE 12329
// if GetLives ( tmp [ i ] ) < 250 then
12185: LD_VAR 0 2
12189: PUSH
12190: LD_VAR 0 1
12194: ARRAY
12195: PPUSH
12196: CALL_OW 256
12200: PUSH
12201: LD_INT 250
12203: LESS
12204: IFFALSE 12327
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
12206: LD_ADDR_EXP 19
12210: PUSH
12211: LD_EXP 19
12215: PUSH
12216: LD_INT 1
12218: PLUS
12219: ST_TO_ADDR
// DialogueOn ;
12220: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
12224: LD_VAR 0 2
12228: PUSH
12229: LD_VAR 0 1
12233: ARRAY
12234: PPUSH
12235: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
12239: LD_VAR 0 2
12243: PUSH
12244: LD_VAR 0 1
12248: ARRAY
12249: PPUSH
12250: LD_STRING D
12252: PUSH
12253: LD_VAR 0 3
12257: PUSH
12258: LD_VAR 0 1
12262: ARRAY
12263: STR
12264: PUSH
12265: LD_STRING -Stim-a-1
12267: STR
12268: PPUSH
12269: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
12273: LD_ADDR_VAR 0 2
12277: PUSH
12278: LD_VAR 0 2
12282: PPUSH
12283: LD_VAR 0 1
12287: PPUSH
12288: CALL_OW 3
12292: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12293: LD_ADDR_VAR 0 3
12297: PUSH
12298: LD_VAR 0 3
12302: PPUSH
12303: LD_VAR 0 1
12307: PPUSH
12308: CALL_OW 3
12312: ST_TO_ADDR
// drugsTested := true ;
12313: LD_ADDR_EXP 6
12317: PUSH
12318: LD_INT 1
12320: ST_TO_ADDR
// DialogueOff ;
12321: CALL_OW 7
// break ;
12325: GO 12329
// end ;
12327: GO 12182
12329: POP
12330: POP
// until not tmp ;
12331: LD_VAR 0 2
12335: NOT
12336: IFFALSE 12160
// end ;
12338: PPOPN 3
12340: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
12341: LD_INT 22
12343: PUSH
12344: LD_INT 2
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: LD_INT 34
12353: PUSH
12354: LD_INT 31
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PPUSH
12365: CALL_OW 69
12369: PUSH
12370: LD_INT 22
12372: PUSH
12373: LD_INT 2
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: PUSH
12380: LD_INT 33
12382: PUSH
12383: LD_INT 2
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PPUSH
12394: CALL_OW 69
12398: AND
12399: IFFALSE 12412
12401: GO 12403
12403: DISABLE
// remoteControlConstructed := true ;
12404: LD_ADDR_EXP 12
12408: PUSH
12409: LD_INT 1
12411: ST_TO_ADDR
12412: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
12413: LD_EXP 12
12417: IFFALSE 12717
12419: GO 12421
12421: DISABLE
12422: LD_INT 0
12424: PPUSH
12425: PPUSH
12426: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12427: LD_ADDR_VAR 0 2
12431: PUSH
12432: LD_EXP 21
12436: PUSH
12437: LD_EXP 22
12441: PUSH
12442: LD_EXP 30
12446: PUSH
12447: LD_EXP 28
12451: PUSH
12452: LD_EXP 26
12456: PUSH
12457: LD_EXP 27
12461: PUSH
12462: LD_EXP 32
12466: PUSH
12467: LD_EXP 25
12471: PUSH
12472: LD_EXP 23
12476: PUSH
12477: LD_EXP 24
12481: PUSH
12482: LD_EXP 33
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12500: LD_ADDR_VAR 0 3
12504: PUSH
12505: LD_STRING H
12507: PUSH
12508: LD_STRING G
12510: PUSH
12511: LD_STRING O
12513: PUSH
12514: LD_STRING Mar
12516: PUSH
12517: LD_STRING K
12519: PUSH
12520: LD_STRING S
12522: PUSH
12523: LD_STRING Ks
12525: PUSH
12526: LD_STRING Kam
12528: PUSH
12529: LD_STRING M
12531: PUSH
12532: LD_STRING I
12534: PUSH
12535: LD_STRING A
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12551: LD_INT 35
12553: PPUSH
12554: CALL_OW 67
// for i := tmp downto 1 do
12558: LD_ADDR_VAR 0 1
12562: PUSH
12563: DOUBLE
12564: LD_VAR 0 2
12568: INC
12569: ST_TO_ADDR
12570: LD_INT 1
12572: PUSH
12573: FOR_DOWNTO
12574: IFFALSE 12708
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
12576: LD_VAR 0 2
12580: PUSH
12581: LD_VAR 0 1
12585: ARRAY
12586: PPUSH
12587: CALL_OW 257
12591: PUSH
12592: LD_INT 3
12594: EQUAL
12595: PUSH
12596: LD_VAR 0 2
12600: PUSH
12601: LD_VAR 0 1
12605: ARRAY
12606: PPUSH
12607: CALL_OW 432
12611: AND
12612: IFFALSE 12706
// begin DialogueOn ;
12614: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12618: LD_VAR 0 2
12622: PUSH
12623: LD_VAR 0 1
12627: ARRAY
12628: PPUSH
12629: LD_STRING D
12631: PUSH
12632: LD_VAR 0 3
12636: PUSH
12637: LD_VAR 0 1
12641: ARRAY
12642: STR
12643: PUSH
12644: LD_STRING -RC-a-1
12646: STR
12647: PPUSH
12648: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12652: LD_ADDR_VAR 0 2
12656: PUSH
12657: LD_VAR 0 2
12661: PPUSH
12662: LD_VAR 0 1
12666: PPUSH
12667: CALL_OW 3
12671: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12672: LD_ADDR_VAR 0 3
12676: PUSH
12677: LD_VAR 0 3
12681: PPUSH
12682: LD_VAR 0 1
12686: PPUSH
12687: CALL_OW 3
12691: ST_TO_ADDR
// DialogueOff ;
12692: CALL_OW 7
// remoteControlTested := true ;
12696: LD_ADDR_EXP 7
12700: PUSH
12701: LD_INT 1
12703: ST_TO_ADDR
// break ;
12704: GO 12708
// end ;
12706: GO 12573
12708: POP
12709: POP
// until not tmp ;
12710: LD_VAR 0 2
12714: NOT
12715: IFFALSE 12551
// end ;
12717: PPOPN 3
12719: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
12720: LD_EXP 7
12724: PUSH
12725: LD_EXP 28
12729: PPUSH
12730: CALL_OW 302
12734: AND
12735: IFFALSE 12764
12737: GO 12739
12739: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
12740: LD_EXP 28
12744: PPUSH
12745: LD_STRING DMar-RC-a-2
12747: PPUSH
12748: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
12752: LD_EXP 28
12756: PPUSH
12757: LD_STRING DMar-RC-a-3
12759: PPUSH
12760: CALL_OW 88
// end ;
12764: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
12765: LD_EXP 14
12769: PUSH
12770: LD_EXP 21
12774: PPUSH
12775: LD_EXP 33
12779: PPUSH
12780: CALL_OW 296
12784: PUSH
12785: LD_INT 8
12787: LESS
12788: AND
12789: PUSH
12790: LD_INT 2
12792: PPUSH
12793: CALL_OW 463
12797: NOT
12798: AND
12799: PUSH
12800: LD_EXP 33
12804: PPUSH
12805: CALL_OW 302
12809: AND
12810: PUSH
12811: LD_EXP 21
12815: PPUSH
12816: CALL_OW 302
12820: AND
12821: IFFALSE 12999
12823: GO 12825
12825: DISABLE
// begin if not IsInUnit ( Aviradze ) then
12826: LD_EXP 33
12830: PPUSH
12831: CALL_OW 310
12835: NOT
12836: IFFALSE 12852
// ComTurnUnit ( Aviradze , Heike ) ;
12838: LD_EXP 33
12842: PPUSH
12843: LD_EXP 21
12847: PPUSH
12848: CALL_OW 119
// if not IsInUnit ( Heike ) then
12852: LD_EXP 21
12856: PPUSH
12857: CALL_OW 310
12861: NOT
12862: IFFALSE 12878
// ComTurnUnit ( Heike , Aviradze ) ;
12864: LD_EXP 21
12868: PPUSH
12869: LD_EXP 33
12873: PPUSH
12874: CALL_OW 119
// wait ( 0 0$1 ) ;
12878: LD_INT 35
12880: PPUSH
12881: CALL_OW 67
// DialogueOn ;
12885: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
12889: LD_EXP 33
12893: PPUSH
12894: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
12898: LD_EXP 21
12902: PPUSH
12903: LD_STRING DH-Beria-1
12905: PPUSH
12906: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
12910: LD_EXP 33
12914: PPUSH
12915: LD_STRING DA-Beria-2
12917: PPUSH
12918: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
12922: LD_EXP 21
12926: PPUSH
12927: LD_STRING DH-Beria-3
12929: PPUSH
12930: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
12934: LD_EXP 33
12938: PPUSH
12939: LD_STRING DA-Beria-4
12941: PPUSH
12942: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
12946: LD_EXP 33
12950: PPUSH
12951: LD_STRING DA-Beria-5
12953: PPUSH
12954: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
12958: LD_EXP 33
12962: PPUSH
12963: LD_STRING DA-Beria-6
12965: PPUSH
12966: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
12970: LD_EXP 21
12974: PPUSH
12975: LD_STRING DA-Beria-7
12977: PPUSH
12978: CALL_OW 88
// DialogueOff ;
12982: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
12986: LD_INT 52
12988: PPUSH
12989: LD_INT 2
12991: PPUSH
12992: LD_INT 1
12994: PPUSH
12995: CALL_OW 322
// end ;
12999: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
13000: LD_EXP 26
13004: PPUSH
13005: CALL_OW 300
13009: PUSH
13010: LD_EXP 26
13014: PPUSH
13015: CALL_OW 256
13019: PUSH
13020: LD_INT 10
13022: LESS
13023: AND
13024: IFFALSE 13061
13026: GO 13028
13028: DISABLE
// begin DialogueOn ;
13029: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
13033: LD_EXP 26
13037: PPUSH
13038: LD_STRING DK-Kdeath-1
13040: PPUSH
13041: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
13045: LD_EXP 21
13049: PPUSH
13050: LD_STRING DH-Kdeath-2
13052: PPUSH
13053: CALL_OW 88
// DialogueOff ;
13057: CALL_OW 7
// end ;
13061: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
13062: LD_INT 2
13064: PPUSH
13065: LD_EXP 39
13069: PPUSH
13070: CALL 1374 0 2
13074: IFFALSE 13091
13076: GO 13078
13078: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
13079: LD_EXP 21
13083: PPUSH
13084: LD_STRING DH-Obj-1
13086: PPUSH
13087: CALL_OW 88
13091: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
13092: LD_INT 2
13094: PPUSH
13095: LD_EXP 40
13099: PPUSH
13100: CALL 1374 0 2
13104: IFFALSE 13121
13106: GO 13108
13108: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
13109: LD_EXP 21
13113: PPUSH
13114: LD_STRING DH-Obj-a-1
13116: PPUSH
13117: CALL_OW 88
13121: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 7 7$00 , 6 6$30 , 6 6$00 , 5 5$30 ] [ Difficulty ] do
13122: LD_EXP 10
13126: PUSH
13127: LD_OWVAR 1
13131: PUSH
13132: LD_INT 14700
13134: PUSH
13135: LD_INT 13650
13137: PUSH
13138: LD_INT 12600
13140: PUSH
13141: LD_INT 11550
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: PUSH
13150: LD_OWVAR 67
13154: ARRAY
13155: GREATEREQUAL
13156: OR
13157: IFFALSE 13185
13159: GO 13161
13161: DISABLE
// begin wait ( rand ( 2 2$00 , 2 2$30 ) ) ;
13162: LD_INT 4200
13164: PPUSH
13165: LD_INT 5250
13167: PPUSH
13168: CALL_OW 12
13172: PPUSH
13173: CALL_OW 67
// convoyStarted := true ;
13177: LD_ADDR_EXP 17
13181: PUSH
13182: LD_INT 1
13184: ST_TO_ADDR
// end ;
13185: END
// every 0 0$1 trigger convoyStarted do
13186: LD_EXP 17
13190: IFFALSE 13274
13192: GO 13194
13194: DISABLE
// begin DialogueOn ;
13195: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
13199: LD_EXP 29
13203: PPUSH
13204: LD_STRING DShar-Convoy-1
13206: PPUSH
13207: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
13211: LD_EXP 21
13215: PPUSH
13216: LD_STRING DH-Convoy-2
13218: PPUSH
13219: CALL_OW 88
// DialogueOff ;
13223: CALL_OW 7
// PrepareConvoy ;
13227: CALL 4639 0 0
// repeat wait ( rand ( 2 2$30 , 5 5$30 ) ) ;
13231: LD_INT 5250
13233: PPUSH
13234: LD_INT 11550
13236: PPUSH
13237: CALL_OW 12
13241: PPUSH
13242: CALL_OW 67
// PrepareConvoy ;
13246: CALL 4639 0 0
// convoyCounter := convoyCounter - 1 ;
13250: LD_ADDR_EXP 16
13254: PUSH
13255: LD_EXP 16
13259: PUSH
13260: LD_INT 1
13262: MINUS
13263: ST_TO_ADDR
// until convoyCounter <= 0 ;
13264: LD_EXP 16
13268: PUSH
13269: LD_INT 0
13271: LESSEQUAL
13272: IFFALSE 13231
// end ;
13274: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
13275: LD_EXP 15
13279: PUSH
13280: LD_INT 10
13282: GREATEREQUAL
13283: IFFALSE 13300
13285: GO 13287
13287: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
13288: LD_EXP 31
13292: PPUSH
13293: LD_STRING DOm-Fail-1
13295: PPUSH
13296: CALL_OW 94
13300: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
13301: LD_EXP 39
13305: NOT
13306: PUSH
13307: LD_EXP 40
13311: NOT
13312: AND
13313: IFFALSE 13325
13315: GO 13317
13317: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
13318: LD_STRING RaiderDone
13320: PPUSH
13321: CALL_OW 337
13325: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
13326: LD_INT 22
13328: PUSH
13329: LD_INT 2
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PUSH
13336: LD_INT 33
13338: PUSH
13339: LD_INT 2
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: PPUSH
13350: CALL_OW 69
13354: PUSH
13355: LD_INT 3
13357: GREATEREQUAL
13358: PUSH
13359: LD_INT 22
13361: PUSH
13362: LD_INT 2
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: LD_INT 34
13371: PUSH
13372: LD_INT 31
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PPUSH
13383: CALL_OW 69
13387: PUSH
13388: LD_INT 2
13390: GREATEREQUAL
13391: AND
13392: IFFALSE 13404
13394: GO 13396
13396: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
13397: LD_STRING RemoteControlDone
13399: PPUSH
13400: CALL_OW 337
13404: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var tmp ;
13405: LD_EXP 16
13409: PUSH
13410: LD_INT 1
13412: LESS
13413: PUSH
13414: LD_EXP 41
13418: PPUSH
13419: LD_INT 52
13421: PUSH
13422: EMPTY
13423: LIST
13424: PUSH
13425: LD_INT 21
13427: PUSH
13428: LD_INT 1
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PPUSH
13439: CALL_OW 72
13443: NOT
13444: AND
13445: PUSH
13446: LD_OWVAR 1
13450: PUSH
13451: LD_INT 126000
13453: GREATEREQUAL
13454: OR
13455: IFFALSE 14276
13457: GO 13459
13459: DISABLE
13460: LD_INT 0
13462: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
13463: LD_STRING ReinforcementsDone
13465: PPUSH
13466: CALL_OW 337
// music_class := music_victory ;
13470: LD_ADDR_OWVAR 72
13474: PUSH
13475: LD_INT 4
13477: ST_TO_ADDR
// InGameOn ;
13478: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
13482: LD_EXP 21
13486: PPUSH
13487: LD_STRING DH-end-1
13489: PPUSH
13490: CALL_OW 88
// wait ( 0 0$2 ) ;
13494: LD_INT 70
13496: PPUSH
13497: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
13501: LD_EXP 29
13505: PPUSH
13506: LD_STRING DShar-end-2
13508: PPUSH
13509: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
13513: LD_EXP 39
13517: NOT
13518: PUSH
13519: LD_EXP 40
13523: NOT
13524: AND
13525: IFFALSE 13541
// begin Say ( Heike , DH-end-3 ) ;
13527: LD_EXP 21
13531: PPUSH
13532: LD_STRING DH-end-3
13534: PPUSH
13535: CALL_OW 88
// end else
13539: GO 13638
// begin Say ( Heike , DH-end-a-3 ) ;
13541: LD_EXP 21
13545: PPUSH
13546: LD_STRING DH-end-a-3
13548: PPUSH
13549: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
13553: LD_EXP 29
13557: PPUSH
13558: LD_STRING DShar-end-a-4
13560: PPUSH
13561: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
13565: LD_EXP 21
13569: PPUSH
13570: LD_STRING DH-end-a-5
13572: PPUSH
13573: CALL_OW 88
// InGameOff ;
13577: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
13581: LD_INT 35
13583: PPUSH
13584: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
13588: LD_INT 22
13590: PUSH
13591: LD_INT 3
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: PUSH
13598: LD_INT 21
13600: PUSH
13601: LD_INT 1
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PPUSH
13612: CALL_OW 69
13616: PUSH
13617: LD_INT 0
13619: EQUAL
13620: IFFALSE 13581
// InGameOn ;
13622: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
13626: LD_EXP 21
13630: PPUSH
13631: LD_STRING DH-end-a-6
13633: PPUSH
13634: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
13638: LD_EXP 29
13642: PPUSH
13643: LD_STRING DShar-end-3
13645: PPUSH
13646: CALL_OW 94
// if not flamethrowerBuilt then
13650: LD_EXP 20
13654: NOT
13655: IFFALSE 13664
// SetAchievement ( ACH_FIRE ) ;
13657: LD_STRING ACH_FIRE
13659: PPUSH
13660: CALL_OW 543
// if drugsTested then
13664: LD_EXP 6
13668: IFFALSE 13682
// AddMedal ( med1 , 1 ) else
13670: LD_STRING med1
13672: PPUSH
13673: LD_INT 1
13675: PPUSH
13676: CALL_OW 101
13680: GO 13722
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
13682: LD_INT 5
13684: PPUSH
13685: LD_INT 2
13687: PPUSH
13688: CALL_OW 321
13692: PUSH
13693: LD_INT 2
13695: EQUAL
13696: IFFALSE 13711
// AddMedal ( med1 , - 1 ) else
13698: LD_STRING med1
13700: PPUSH
13701: LD_INT 1
13703: NEG
13704: PPUSH
13705: CALL_OW 101
13709: GO 13722
// AddMedal ( med1 , - 2 ) ;
13711: LD_STRING med1
13713: PPUSH
13714: LD_INT 2
13716: NEG
13717: PPUSH
13718: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
13722: LD_INT 22
13724: PUSH
13725: LD_INT 2
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: PUSH
13732: LD_INT 33
13734: PUSH
13735: LD_INT 2
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: PPUSH
13746: CALL_OW 69
13750: PUSH
13751: LD_INT 3
13753: GREATEREQUAL
13754: PUSH
13755: LD_INT 22
13757: PUSH
13758: LD_INT 2
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PUSH
13765: LD_INT 34
13767: PUSH
13768: LD_INT 31
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: PPUSH
13779: CALL_OW 69
13783: PUSH
13784: LD_INT 1
13786: GREATEREQUAL
13787: AND
13788: IFFALSE 13802
// AddMedal ( med2 , 1 ) else
13790: LD_STRING med2
13792: PPUSH
13793: LD_INT 1
13795: PPUSH
13796: CALL_OW 101
13800: GO 13813
// AddMedal ( med2 , - 1 ) ;
13802: LD_STRING med2
13804: PPUSH
13805: LD_INT 1
13807: NEG
13808: PPUSH
13809: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
13813: LD_EXP 15
13817: PUSH
13818: LD_INT 10
13820: PUSH
13821: LD_INT 8
13823: PUSH
13824: LD_INT 6
13826: PUSH
13827: LD_INT 5
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: PUSH
13836: LD_OWVAR 67
13840: ARRAY
13841: LESS
13842: IFFALSE 13856
// AddMedal ( med3 , 1 ) else
13844: LD_STRING med3
13846: PPUSH
13847: LD_INT 1
13849: PPUSH
13850: CALL_OW 101
13854: GO 13867
// AddMedal ( med3 , - 1 ) ;
13856: LD_STRING med3
13858: PPUSH
13859: LD_INT 1
13861: NEG
13862: PPUSH
13863: CALL_OW 101
// GiveMedals ( MAIN ) ;
13867: LD_STRING MAIN
13869: PPUSH
13870: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13874: LD_INT 22
13876: PUSH
13877: LD_INT 2
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: PUSH
13884: LD_INT 23
13886: PUSH
13887: LD_INT 2
13889: PUSH
13890: EMPTY
13891: LIST
13892: LIST
13893: PUSH
13894: LD_INT 21
13896: PUSH
13897: LD_INT 1
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: LIST
13908: PPUSH
13909: CALL_OW 69
13913: PPUSH
13914: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
13918: LD_EXP 15
13922: PPUSH
13923: LD_STRING 05_ConvoySavedCounter
13925: PPUSH
13926: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
13930: LD_EXP 13
13934: PPUSH
13935: LD_STRING 05_Radar
13937: PPUSH
13938: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
13942: LD_EXP 6
13946: PPUSH
13947: LD_STRING 05_DrugsTested
13949: PPUSH
13950: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
13954: LD_INT 22
13956: PUSH
13957: LD_INT 2
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: LD_INT 33
13966: PUSH
13967: LD_INT 2
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PPUSH
13978: CALL_OW 69
13982: PUSH
13983: LD_INT 3
13985: GREATEREQUAL
13986: PUSH
13987: LD_INT 22
13989: PUSH
13990: LD_INT 2
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: PUSH
13997: LD_INT 34
13999: PUSH
14000: LD_INT 31
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: PPUSH
14011: CALL_OW 69
14015: PUSH
14016: LD_INT 2
14018: GREATEREQUAL
14019: AND
14020: PPUSH
14021: LD_STRING 05_RemoteControl
14023: PPUSH
14024: CALL_OW 39
// SaveCharacters ( Heike , 05_Heike ) ;
14028: LD_EXP 21
14032: PPUSH
14033: LD_STRING 05_Heike
14035: PPUSH
14036: CALL_OW 38
// if Aviradze then
14040: LD_EXP 33
14044: IFFALSE 14058
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
14046: LD_EXP 33
14050: PPUSH
14051: LD_STRING 05_Aviradze
14053: PPUSH
14054: CALL_OW 38
// if Ibrahim then
14058: LD_EXP 24
14062: IFFALSE 14076
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
14064: LD_EXP 24
14068: PPUSH
14069: LD_STRING 05_Ibrahim
14071: PPUSH
14072: CALL_OW 38
// if Kamil then
14076: LD_EXP 25
14080: IFFALSE 14094
// SaveCharacters ( Kamil , 05_Kamil ) ;
14082: LD_EXP 25
14086: PPUSH
14087: LD_STRING 05_Kamil
14089: PPUSH
14090: CALL_OW 38
// if Sophia then
14094: LD_EXP 27
14098: IFFALSE 14112
// SaveCharacters ( Sophia , 05_Sophia ) ;
14100: LD_EXP 27
14104: PPUSH
14105: LD_STRING 05_Sophia
14107: PPUSH
14108: CALL_OW 38
// if Kaia then
14112: LD_EXP 26
14116: IFFALSE 14130
// SaveCharacters ( Kaia , 05_Kaia ) ;
14118: LD_EXP 26
14122: PPUSH
14123: LD_STRING 05_Kaia
14125: PPUSH
14126: CALL_OW 38
// if Givi then
14130: LD_EXP 22
14134: IFFALSE 14148
// SaveCharacters ( Givi , 05_Givi ) ;
14136: LD_EXP 22
14140: PPUSH
14141: LD_STRING 05_Givi
14143: PPUSH
14144: CALL_OW 38
// if Mike then
14148: LD_EXP 23
14152: IFFALSE 14166
// SaveCharacters ( Mike , 05_Mike ) ;
14154: LD_EXP 23
14158: PPUSH
14159: LD_STRING 05_Mike
14161: PPUSH
14162: CALL_OW 38
// if Markov then
14166: LD_EXP 28
14170: IFFALSE 14184
// SaveCharacters ( Markov , 05_Markov ) ;
14172: LD_EXP 28
14176: PPUSH
14177: LD_STRING 05_Markov
14179: PPUSH
14180: CALL_OW 38
// if Kurt then
14184: LD_EXP 32
14188: IFFALSE 14202
// SaveCharacters ( Kurt , 05_Kurt ) ;
14190: LD_EXP 32
14194: PPUSH
14195: LD_STRING 05_Kurt
14197: PPUSH
14198: CALL_OW 38
// if heikeSecondSquad then
14202: LD_EXP 34
14206: IFFALSE 14220
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
14208: LD_EXP 34
14212: PPUSH
14213: LD_STRING 05_others
14215: PPUSH
14216: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
14220: LD_ADDR_VAR 0 1
14224: PUSH
14225: LD_INT 22
14227: PUSH
14228: LD_INT 2
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PUSH
14235: LD_INT 23
14237: PUSH
14238: LD_INT 0
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PPUSH
14249: CALL_OW 69
14253: ST_TO_ADDR
// if tmp then
14254: LD_VAR 0 1
14258: IFFALSE 14272
// SaveCharacters ( tmp , 05_apes ) ;
14260: LD_VAR 0 1
14264: PPUSH
14265: LD_STRING 05_apes
14267: PPUSH
14268: CALL_OW 38
// YouWin ;
14272: CALL_OW 103
// end ; end_of_file
14276: PPOPN 1
14278: END
// every 0 0$40 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
14279: LD_EXP 9
14283: PUSH
14284: LD_INT 13
14286: PPUSH
14287: LD_INT 1
14289: PPUSH
14290: CALL_OW 287
14294: PUSH
14295: LD_INT 25
14297: LESS
14298: AND
14299: IFFALSE 14326
14301: GO 14303
14303: DISABLE
// begin enable ;
14304: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
14305: LD_INT 1
14307: PPUSH
14308: LD_INT 5
14310: PPUSH
14311: CALL_OW 12
14315: PPUSH
14316: LD_INT 13
14318: PPUSH
14319: LD_INT 1
14321: PPUSH
14322: CALL_OW 55
// end ; end_of_file
14326: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
14327: LD_INT 0
14329: PPUSH
// ar_miner := 81 ;
14330: LD_ADDR_EXP 51
14334: PUSH
14335: LD_INT 81
14337: ST_TO_ADDR
// ar_crane := 88 ;
14338: LD_ADDR_EXP 50
14342: PUSH
14343: LD_INT 88
14345: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
14346: LD_ADDR_EXP 45
14350: PUSH
14351: LD_INT 89
14353: ST_TO_ADDR
// us_hack := 99 ;
14354: LD_ADDR_EXP 46
14358: PUSH
14359: LD_INT 99
14361: ST_TO_ADDR
// us_artillery := 97 ;
14362: LD_ADDR_EXP 47
14366: PUSH
14367: LD_INT 97
14369: ST_TO_ADDR
// ar_bio_bomb := 91 ;
14370: LD_ADDR_EXP 48
14374: PUSH
14375: LD_INT 91
14377: ST_TO_ADDR
// ar_mortar := 92 ;
14378: LD_ADDR_EXP 49
14382: PUSH
14383: LD_INT 92
14385: ST_TO_ADDR
// ru_radar := 98 ;
14386: LD_ADDR_EXP 44
14390: PUSH
14391: LD_INT 98
14393: ST_TO_ADDR
// tech_Artillery := 80 ;
14394: LD_ADDR_EXP 52
14398: PUSH
14399: LD_INT 80
14401: ST_TO_ADDR
// tech_RadMat := 81 ;
14402: LD_ADDR_EXP 53
14406: PUSH
14407: LD_INT 81
14409: ST_TO_ADDR
// tech_BasicTools := 82 ;
14410: LD_ADDR_EXP 54
14414: PUSH
14415: LD_INT 82
14417: ST_TO_ADDR
// tech_Cargo := 83 ;
14418: LD_ADDR_EXP 55
14422: PUSH
14423: LD_INT 83
14425: ST_TO_ADDR
// tech_Track := 84 ;
14426: LD_ADDR_EXP 56
14430: PUSH
14431: LD_INT 84
14433: ST_TO_ADDR
// tech_Crane := 85 ;
14434: LD_ADDR_EXP 57
14438: PUSH
14439: LD_INT 85
14441: ST_TO_ADDR
// tech_Bulldozer := 86 ;
14442: LD_ADDR_EXP 58
14446: PUSH
14447: LD_INT 86
14449: ST_TO_ADDR
// tech_Hovercraft := 87 ;
14450: LD_ADDR_EXP 59
14454: PUSH
14455: LD_INT 87
14457: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
14458: LD_ADDR_EXP 60
14462: PUSH
14463: LD_INT 88
14465: ST_TO_ADDR
// class_mastodont := 31 ;
14466: LD_ADDR_EXP 61
14470: PUSH
14471: LD_INT 31
14473: ST_TO_ADDR
// class_horse := 21 ;
14474: LD_ADDR_EXP 62
14478: PUSH
14479: LD_INT 21
14481: ST_TO_ADDR
// end ;
14482: LD_VAR 0 1
14486: RET
// every 1 do
14487: GO 14489
14489: DISABLE
// InitGlobalVariables ; end_of_file
14490: CALL 14327 0 0
14494: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
14495: LD_INT 0
14497: PPUSH
14498: PPUSH
14499: PPUSH
14500: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
14501: LD_VAR 0 1
14505: PPUSH
14506: CALL_OW 264
14510: PUSH
14511: LD_EXP 48
14515: EQUAL
14516: IFFALSE 14588
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
14518: LD_INT 68
14520: PPUSH
14521: LD_VAR 0 1
14525: PPUSH
14526: CALL_OW 255
14530: PPUSH
14531: CALL_OW 321
14535: PUSH
14536: LD_INT 2
14538: EQUAL
14539: IFFALSE 14551
// eff := 70 else
14541: LD_ADDR_VAR 0 4
14545: PUSH
14546: LD_INT 70
14548: ST_TO_ADDR
14549: GO 14559
// eff := 30 ;
14551: LD_ADDR_VAR 0 4
14555: PUSH
14556: LD_INT 30
14558: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
14559: LD_VAR 0 1
14563: PPUSH
14564: CALL_OW 250
14568: PPUSH
14569: LD_VAR 0 1
14573: PPUSH
14574: CALL_OW 251
14578: PPUSH
14579: LD_VAR 0 4
14583: PPUSH
14584: CALL_OW 495
// end ; end ;
14588: LD_VAR 0 2
14592: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
14593: LD_INT 0
14595: PPUSH
// end ;
14596: LD_VAR 0 4
14600: RET
// export function SOS_Command ( cmd ) ; begin
14601: LD_INT 0
14603: PPUSH
// end ;
14604: LD_VAR 0 2
14608: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
14609: LD_INT 0
14611: PPUSH
// end ;
14612: LD_VAR 0 6
14616: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
14617: LD_INT 0
14619: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
14620: LD_VAR 0 1
14624: PUSH
14625: LD_INT 250
14627: EQUAL
14628: PUSH
14629: LD_VAR 0 2
14633: PPUSH
14634: CALL_OW 264
14638: PUSH
14639: LD_EXP 51
14643: EQUAL
14644: AND
14645: IFFALSE 14666
// MinerPlaceMine ( unit , x , y ) ;
14647: LD_VAR 0 2
14651: PPUSH
14652: LD_VAR 0 4
14656: PPUSH
14657: LD_VAR 0 5
14661: PPUSH
14662: CALL 17015 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
14666: LD_VAR 0 1
14670: PUSH
14671: LD_INT 251
14673: EQUAL
14674: PUSH
14675: LD_VAR 0 2
14679: PPUSH
14680: CALL_OW 264
14684: PUSH
14685: LD_EXP 51
14689: EQUAL
14690: AND
14691: IFFALSE 14712
// MinerDetonateMine ( unit , x , y ) ;
14693: LD_VAR 0 2
14697: PPUSH
14698: LD_VAR 0 4
14702: PPUSH
14703: LD_VAR 0 5
14707: PPUSH
14708: CALL 17292 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
14712: LD_VAR 0 1
14716: PUSH
14717: LD_INT 252
14719: EQUAL
14720: PUSH
14721: LD_VAR 0 2
14725: PPUSH
14726: CALL_OW 264
14730: PUSH
14731: LD_EXP 51
14735: EQUAL
14736: AND
14737: IFFALSE 14758
// MinerCreateMinefield ( unit , x , y ) ;
14739: LD_VAR 0 2
14743: PPUSH
14744: LD_VAR 0 4
14748: PPUSH
14749: LD_VAR 0 5
14753: PPUSH
14754: CALL 17709 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
14758: LD_VAR 0 1
14762: PUSH
14763: LD_INT 253
14765: EQUAL
14766: PUSH
14767: LD_VAR 0 2
14771: PPUSH
14772: CALL_OW 257
14776: PUSH
14777: LD_INT 5
14779: EQUAL
14780: AND
14781: IFFALSE 14802
// ComBinocular ( unit , x , y ) ;
14783: LD_VAR 0 2
14787: PPUSH
14788: LD_VAR 0 4
14792: PPUSH
14793: LD_VAR 0 5
14797: PPUSH
14798: CALL 18080 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
14802: LD_VAR 0 1
14806: PUSH
14807: LD_INT 254
14809: EQUAL
14810: PUSH
14811: LD_VAR 0 2
14815: PPUSH
14816: CALL_OW 264
14820: PUSH
14821: LD_EXP 46
14825: EQUAL
14826: AND
14827: PUSH
14828: LD_VAR 0 3
14832: PPUSH
14833: CALL_OW 263
14837: PUSH
14838: LD_INT 3
14840: EQUAL
14841: AND
14842: IFFALSE 14858
// HackDestroyVehicle ( unit , selectedUnit ) ;
14844: LD_VAR 0 2
14848: PPUSH
14849: LD_VAR 0 3
14853: PPUSH
14854: CALL 16375 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
14858: LD_VAR 0 1
14862: PUSH
14863: LD_INT 255
14865: EQUAL
14866: PUSH
14867: LD_VAR 0 2
14871: PPUSH
14872: CALL_OW 264
14876: PUSH
14877: LD_INT 14
14879: PUSH
14880: LD_INT 53
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: IN
14887: AND
14888: PUSH
14889: LD_VAR 0 4
14893: PPUSH
14894: LD_VAR 0 5
14898: PPUSH
14899: CALL_OW 488
14903: AND
14904: IFFALSE 14928
// CutTreeXYR ( unit , x , y , 12 ) ;
14906: LD_VAR 0 2
14910: PPUSH
14911: LD_VAR 0 4
14915: PPUSH
14916: LD_VAR 0 5
14920: PPUSH
14921: LD_INT 12
14923: PPUSH
14924: CALL 14941 0 4
// end ;
14928: LD_VAR 0 6
14932: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
14933: LD_INT 0
14935: PPUSH
// end ;
14936: LD_VAR 0 4
14940: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
14941: LD_INT 0
14943: PPUSH
14944: PPUSH
14945: PPUSH
14946: PPUSH
14947: PPUSH
14948: PPUSH
14949: PPUSH
14950: PPUSH
14951: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
14952: LD_VAR 0 1
14956: NOT
14957: PUSH
14958: LD_VAR 0 2
14962: PPUSH
14963: LD_VAR 0 3
14967: PPUSH
14968: CALL_OW 488
14972: NOT
14973: OR
14974: PUSH
14975: LD_VAR 0 4
14979: NOT
14980: OR
14981: IFFALSE 14985
// exit ;
14983: GO 15325
// list := [ ] ;
14985: LD_ADDR_VAR 0 13
14989: PUSH
14990: EMPTY
14991: ST_TO_ADDR
// if x - r < 0 then
14992: LD_VAR 0 2
14996: PUSH
14997: LD_VAR 0 4
15001: MINUS
15002: PUSH
15003: LD_INT 0
15005: LESS
15006: IFFALSE 15018
// min_x := 0 else
15008: LD_ADDR_VAR 0 7
15012: PUSH
15013: LD_INT 0
15015: ST_TO_ADDR
15016: GO 15034
// min_x := x - r ;
15018: LD_ADDR_VAR 0 7
15022: PUSH
15023: LD_VAR 0 2
15027: PUSH
15028: LD_VAR 0 4
15032: MINUS
15033: ST_TO_ADDR
// if y - r < 0 then
15034: LD_VAR 0 3
15038: PUSH
15039: LD_VAR 0 4
15043: MINUS
15044: PUSH
15045: LD_INT 0
15047: LESS
15048: IFFALSE 15060
// min_y := 0 else
15050: LD_ADDR_VAR 0 8
15054: PUSH
15055: LD_INT 0
15057: ST_TO_ADDR
15058: GO 15076
// min_y := y - r ;
15060: LD_ADDR_VAR 0 8
15064: PUSH
15065: LD_VAR 0 3
15069: PUSH
15070: LD_VAR 0 4
15074: MINUS
15075: ST_TO_ADDR
// max_x := x + r ;
15076: LD_ADDR_VAR 0 9
15080: PUSH
15081: LD_VAR 0 2
15085: PUSH
15086: LD_VAR 0 4
15090: PLUS
15091: ST_TO_ADDR
// max_y := y + r ;
15092: LD_ADDR_VAR 0 10
15096: PUSH
15097: LD_VAR 0 3
15101: PUSH
15102: LD_VAR 0 4
15106: PLUS
15107: ST_TO_ADDR
// for _x = min_x to max_x do
15108: LD_ADDR_VAR 0 11
15112: PUSH
15113: DOUBLE
15114: LD_VAR 0 7
15118: DEC
15119: ST_TO_ADDR
15120: LD_VAR 0 9
15124: PUSH
15125: FOR_TO
15126: IFFALSE 15243
// for _y = min_y to max_y do
15128: LD_ADDR_VAR 0 12
15132: PUSH
15133: DOUBLE
15134: LD_VAR 0 8
15138: DEC
15139: ST_TO_ADDR
15140: LD_VAR 0 10
15144: PUSH
15145: FOR_TO
15146: IFFALSE 15239
// begin if not ValidHex ( _x , _y ) then
15148: LD_VAR 0 11
15152: PPUSH
15153: LD_VAR 0 12
15157: PPUSH
15158: CALL_OW 488
15162: NOT
15163: IFFALSE 15167
// continue ;
15165: GO 15145
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15167: LD_VAR 0 11
15171: PPUSH
15172: LD_VAR 0 12
15176: PPUSH
15177: CALL_OW 351
15181: PUSH
15182: LD_VAR 0 11
15186: PPUSH
15187: LD_VAR 0 12
15191: PPUSH
15192: CALL_OW 554
15196: AND
15197: IFFALSE 15237
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15199: LD_ADDR_VAR 0 13
15203: PUSH
15204: LD_VAR 0 13
15208: PPUSH
15209: LD_VAR 0 13
15213: PUSH
15214: LD_INT 1
15216: PLUS
15217: PPUSH
15218: LD_VAR 0 11
15222: PUSH
15223: LD_VAR 0 12
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: PPUSH
15232: CALL_OW 2
15236: ST_TO_ADDR
// end ;
15237: GO 15145
15239: POP
15240: POP
15241: GO 15125
15243: POP
15244: POP
// if not list then
15245: LD_VAR 0 13
15249: NOT
15250: IFFALSE 15254
// exit ;
15252: GO 15325
// for i in list do
15254: LD_ADDR_VAR 0 6
15258: PUSH
15259: LD_VAR 0 13
15263: PUSH
15264: FOR_IN
15265: IFFALSE 15323
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
15267: LD_VAR 0 1
15271: PPUSH
15272: LD_STRING M
15274: PUSH
15275: LD_VAR 0 6
15279: PUSH
15280: LD_INT 1
15282: ARRAY
15283: PUSH
15284: LD_VAR 0 6
15288: PUSH
15289: LD_INT 2
15291: ARRAY
15292: PUSH
15293: LD_INT 0
15295: PUSH
15296: LD_INT 0
15298: PUSH
15299: LD_INT 0
15301: PUSH
15302: LD_INT 0
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: PUSH
15314: EMPTY
15315: LIST
15316: PPUSH
15317: CALL_OW 447
15321: GO 15264
15323: POP
15324: POP
// end ;
15325: LD_VAR 0 5
15329: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
15330: LD_EXP 65
15334: NOT
15335: IFFALSE 15385
15337: GO 15339
15339: DISABLE
// begin initHack := true ;
15340: LD_ADDR_EXP 65
15344: PUSH
15345: LD_INT 1
15347: ST_TO_ADDR
// hackTanks := [ ] ;
15348: LD_ADDR_EXP 66
15352: PUSH
15353: EMPTY
15354: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
15355: LD_ADDR_EXP 67
15359: PUSH
15360: EMPTY
15361: ST_TO_ADDR
// hackLimit := 3 ;
15362: LD_ADDR_EXP 68
15366: PUSH
15367: LD_INT 3
15369: ST_TO_ADDR
// hackDist := 12 ;
15370: LD_ADDR_EXP 69
15374: PUSH
15375: LD_INT 12
15377: ST_TO_ADDR
// hackCounter := [ ] ;
15378: LD_ADDR_EXP 70
15382: PUSH
15383: EMPTY
15384: ST_TO_ADDR
// end ;
15385: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
15386: LD_EXP 65
15390: PUSH
15391: LD_INT 34
15393: PUSH
15394: LD_EXP 46
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: PPUSH
15403: CALL_OW 69
15407: AND
15408: IFFALSE 15663
15410: GO 15412
15412: DISABLE
15413: LD_INT 0
15415: PPUSH
15416: PPUSH
// begin enable ;
15417: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
15418: LD_ADDR_VAR 0 1
15422: PUSH
15423: LD_INT 34
15425: PUSH
15426: LD_EXP 46
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: PPUSH
15435: CALL_OW 69
15439: PUSH
15440: FOR_IN
15441: IFFALSE 15661
// begin if not i in hackTanks then
15443: LD_VAR 0 1
15447: PUSH
15448: LD_EXP 66
15452: IN
15453: NOT
15454: IFFALSE 15537
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
15456: LD_ADDR_EXP 66
15460: PUSH
15461: LD_EXP 66
15465: PPUSH
15466: LD_EXP 66
15470: PUSH
15471: LD_INT 1
15473: PLUS
15474: PPUSH
15475: LD_VAR 0 1
15479: PPUSH
15480: CALL_OW 1
15484: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
15485: LD_ADDR_EXP 67
15489: PUSH
15490: LD_EXP 67
15494: PPUSH
15495: LD_EXP 67
15499: PUSH
15500: LD_INT 1
15502: PLUS
15503: PPUSH
15504: EMPTY
15505: PPUSH
15506: CALL_OW 1
15510: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
15511: LD_ADDR_EXP 70
15515: PUSH
15516: LD_EXP 70
15520: PPUSH
15521: LD_EXP 70
15525: PUSH
15526: LD_INT 1
15528: PLUS
15529: PPUSH
15530: EMPTY
15531: PPUSH
15532: CALL_OW 1
15536: ST_TO_ADDR
// end ; if not IsOk ( i ) then
15537: LD_VAR 0 1
15541: PPUSH
15542: CALL_OW 302
15546: NOT
15547: IFFALSE 15560
// begin HackUnlinkAll ( i ) ;
15549: LD_VAR 0 1
15553: PPUSH
15554: CALL 15666 0 1
// continue ;
15558: GO 15440
// end ; HackCheckCapturedStatus ( i ) ;
15560: LD_VAR 0 1
15564: PPUSH
15565: CALL 16109 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
15569: LD_ADDR_VAR 0 2
15573: PUSH
15574: LD_INT 81
15576: PUSH
15577: LD_VAR 0 1
15581: PPUSH
15582: CALL_OW 255
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: PUSH
15591: LD_INT 33
15593: PUSH
15594: LD_INT 3
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PUSH
15601: LD_INT 91
15603: PUSH
15604: LD_VAR 0 1
15608: PUSH
15609: LD_EXP 69
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: LIST
15618: PUSH
15619: LD_INT 50
15621: PUSH
15622: EMPTY
15623: LIST
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: PPUSH
15631: CALL_OW 69
15635: ST_TO_ADDR
// if not tmp then
15636: LD_VAR 0 2
15640: NOT
15641: IFFALSE 15645
// continue ;
15643: GO 15440
// HackLink ( i , tmp ) ;
15645: LD_VAR 0 1
15649: PPUSH
15650: LD_VAR 0 2
15654: PPUSH
15655: CALL 15802 0 2
// end ;
15659: GO 15440
15661: POP
15662: POP
// end ;
15663: PPOPN 2
15665: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
15666: LD_INT 0
15668: PPUSH
15669: PPUSH
15670: PPUSH
// if not hack in hackTanks then
15671: LD_VAR 0 1
15675: PUSH
15676: LD_EXP 66
15680: IN
15681: NOT
15682: IFFALSE 15686
// exit ;
15684: GO 15797
// index := GetElementIndex ( hackTanks , hack ) ;
15686: LD_ADDR_VAR 0 4
15690: PUSH
15691: LD_EXP 66
15695: PPUSH
15696: LD_VAR 0 1
15700: PPUSH
15701: CALL 37056 0 2
15705: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
15706: LD_EXP 67
15710: PUSH
15711: LD_VAR 0 4
15715: ARRAY
15716: IFFALSE 15797
// begin for i in hackTanksCaptured [ index ] do
15718: LD_ADDR_VAR 0 3
15722: PUSH
15723: LD_EXP 67
15727: PUSH
15728: LD_VAR 0 4
15732: ARRAY
15733: PUSH
15734: FOR_IN
15735: IFFALSE 15761
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
15737: LD_VAR 0 3
15741: PUSH
15742: LD_INT 1
15744: ARRAY
15745: PPUSH
15746: LD_VAR 0 3
15750: PUSH
15751: LD_INT 2
15753: ARRAY
15754: PPUSH
15755: CALL_OW 235
15759: GO 15734
15761: POP
15762: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
15763: LD_ADDR_EXP 67
15767: PUSH
15768: LD_EXP 67
15772: PPUSH
15773: LD_VAR 0 4
15777: PPUSH
15778: EMPTY
15779: PPUSH
15780: CALL_OW 1
15784: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
15785: LD_VAR 0 1
15789: PPUSH
15790: LD_INT 0
15792: PPUSH
15793: CALL_OW 505
// end ; end ;
15797: LD_VAR 0 2
15801: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
15802: LD_INT 0
15804: PPUSH
15805: PPUSH
15806: PPUSH
// if not hack in hackTanks or not vehicles then
15807: LD_VAR 0 1
15811: PUSH
15812: LD_EXP 66
15816: IN
15817: NOT
15818: PUSH
15819: LD_VAR 0 2
15823: NOT
15824: OR
15825: IFFALSE 15829
// exit ;
15827: GO 16104
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
15829: LD_ADDR_VAR 0 2
15833: PUSH
15834: LD_VAR 0 1
15838: PPUSH
15839: LD_VAR 0 2
15843: PPUSH
15844: LD_INT 1
15846: PPUSH
15847: LD_INT 1
15849: PPUSH
15850: CALL 37706 0 4
15854: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
15855: LD_ADDR_VAR 0 5
15859: PUSH
15860: LD_EXP 66
15864: PPUSH
15865: LD_VAR 0 1
15869: PPUSH
15870: CALL 37056 0 2
15874: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
15875: LD_EXP 67
15879: PUSH
15880: LD_VAR 0 5
15884: ARRAY
15885: PUSH
15886: LD_EXP 68
15890: LESS
15891: IFFALSE 16080
// begin for i := 1 to vehicles do
15893: LD_ADDR_VAR 0 4
15897: PUSH
15898: DOUBLE
15899: LD_INT 1
15901: DEC
15902: ST_TO_ADDR
15903: LD_VAR 0 2
15907: PUSH
15908: FOR_TO
15909: IFFALSE 16078
// begin if hackTanksCaptured [ index ] = hackLimit then
15911: LD_EXP 67
15915: PUSH
15916: LD_VAR 0 5
15920: ARRAY
15921: PUSH
15922: LD_EXP 68
15926: EQUAL
15927: IFFALSE 15931
// break ;
15929: GO 16078
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
15931: LD_ADDR_EXP 70
15935: PUSH
15936: LD_EXP 70
15940: PPUSH
15941: LD_VAR 0 5
15945: PPUSH
15946: LD_EXP 70
15950: PUSH
15951: LD_VAR 0 5
15955: ARRAY
15956: PUSH
15957: LD_INT 1
15959: PLUS
15960: PPUSH
15961: CALL_OW 1
15965: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
15966: LD_ADDR_EXP 67
15970: PUSH
15971: LD_EXP 67
15975: PPUSH
15976: LD_VAR 0 5
15980: PUSH
15981: LD_EXP 67
15985: PUSH
15986: LD_VAR 0 5
15990: ARRAY
15991: PUSH
15992: LD_INT 1
15994: PLUS
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: PPUSH
16000: LD_VAR 0 2
16004: PUSH
16005: LD_VAR 0 4
16009: ARRAY
16010: PUSH
16011: LD_VAR 0 2
16015: PUSH
16016: LD_VAR 0 4
16020: ARRAY
16021: PPUSH
16022: CALL_OW 255
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PPUSH
16031: CALL 37271 0 3
16035: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
16036: LD_VAR 0 2
16040: PUSH
16041: LD_VAR 0 4
16045: ARRAY
16046: PPUSH
16047: LD_VAR 0 1
16051: PPUSH
16052: CALL_OW 255
16056: PPUSH
16057: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
16061: LD_VAR 0 2
16065: PUSH
16066: LD_VAR 0 4
16070: ARRAY
16071: PPUSH
16072: CALL_OW 141
// end ;
16076: GO 15908
16078: POP
16079: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16080: LD_VAR 0 1
16084: PPUSH
16085: LD_EXP 67
16089: PUSH
16090: LD_VAR 0 5
16094: ARRAY
16095: PUSH
16096: LD_INT 0
16098: PLUS
16099: PPUSH
16100: CALL_OW 505
// end ;
16104: LD_VAR 0 3
16108: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
16109: LD_INT 0
16111: PPUSH
16112: PPUSH
16113: PPUSH
16114: PPUSH
// if not hack in hackTanks then
16115: LD_VAR 0 1
16119: PUSH
16120: LD_EXP 66
16124: IN
16125: NOT
16126: IFFALSE 16130
// exit ;
16128: GO 16370
// index := GetElementIndex ( hackTanks , hack ) ;
16130: LD_ADDR_VAR 0 4
16134: PUSH
16135: LD_EXP 66
16139: PPUSH
16140: LD_VAR 0 1
16144: PPUSH
16145: CALL 37056 0 2
16149: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
16150: LD_ADDR_VAR 0 3
16154: PUSH
16155: DOUBLE
16156: LD_EXP 67
16160: PUSH
16161: LD_VAR 0 4
16165: ARRAY
16166: INC
16167: ST_TO_ADDR
16168: LD_INT 1
16170: PUSH
16171: FOR_DOWNTO
16172: IFFALSE 16344
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
16174: LD_ADDR_VAR 0 5
16178: PUSH
16179: LD_EXP 67
16183: PUSH
16184: LD_VAR 0 4
16188: ARRAY
16189: PUSH
16190: LD_VAR 0 3
16194: ARRAY
16195: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
16196: LD_VAR 0 5
16200: PUSH
16201: LD_INT 1
16203: ARRAY
16204: PPUSH
16205: CALL_OW 302
16209: NOT
16210: PUSH
16211: LD_VAR 0 5
16215: PUSH
16216: LD_INT 1
16218: ARRAY
16219: PPUSH
16220: CALL_OW 255
16224: PUSH
16225: LD_VAR 0 1
16229: PPUSH
16230: CALL_OW 255
16234: NONEQUAL
16235: OR
16236: IFFALSE 16342
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
16238: LD_VAR 0 5
16242: PUSH
16243: LD_INT 1
16245: ARRAY
16246: PPUSH
16247: CALL_OW 305
16251: PUSH
16252: LD_VAR 0 5
16256: PUSH
16257: LD_INT 1
16259: ARRAY
16260: PPUSH
16261: CALL_OW 255
16265: PUSH
16266: LD_VAR 0 1
16270: PPUSH
16271: CALL_OW 255
16275: EQUAL
16276: AND
16277: IFFALSE 16301
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
16279: LD_VAR 0 5
16283: PUSH
16284: LD_INT 1
16286: ARRAY
16287: PPUSH
16288: LD_VAR 0 5
16292: PUSH
16293: LD_INT 2
16295: ARRAY
16296: PPUSH
16297: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
16301: LD_ADDR_EXP 67
16305: PUSH
16306: LD_EXP 67
16310: PPUSH
16311: LD_VAR 0 4
16315: PPUSH
16316: LD_EXP 67
16320: PUSH
16321: LD_VAR 0 4
16325: ARRAY
16326: PPUSH
16327: LD_VAR 0 3
16331: PPUSH
16332: CALL_OW 3
16336: PPUSH
16337: CALL_OW 1
16341: ST_TO_ADDR
// end ; end ;
16342: GO 16171
16344: POP
16345: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16346: LD_VAR 0 1
16350: PPUSH
16351: LD_EXP 67
16355: PUSH
16356: LD_VAR 0 4
16360: ARRAY
16361: PUSH
16362: LD_INT 0
16364: PLUS
16365: PPUSH
16366: CALL_OW 505
// end ;
16370: LD_VAR 0 2
16374: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
16375: LD_INT 0
16377: PPUSH
16378: PPUSH
16379: PPUSH
16380: PPUSH
// if not hack in hackTanks then
16381: LD_VAR 0 1
16385: PUSH
16386: LD_EXP 66
16390: IN
16391: NOT
16392: IFFALSE 16396
// exit ;
16394: GO 16481
// index := GetElementIndex ( hackTanks , hack ) ;
16396: LD_ADDR_VAR 0 5
16400: PUSH
16401: LD_EXP 66
16405: PPUSH
16406: LD_VAR 0 1
16410: PPUSH
16411: CALL 37056 0 2
16415: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
16416: LD_ADDR_VAR 0 4
16420: PUSH
16421: DOUBLE
16422: LD_INT 1
16424: DEC
16425: ST_TO_ADDR
16426: LD_EXP 67
16430: PUSH
16431: LD_VAR 0 5
16435: ARRAY
16436: PUSH
16437: FOR_TO
16438: IFFALSE 16479
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
16440: LD_EXP 67
16444: PUSH
16445: LD_VAR 0 5
16449: ARRAY
16450: PUSH
16451: LD_VAR 0 4
16455: ARRAY
16456: PUSH
16457: LD_INT 1
16459: ARRAY
16460: PUSH
16461: LD_VAR 0 2
16465: EQUAL
16466: IFFALSE 16477
// KillUnit ( vehicle ) ;
16468: LD_VAR 0 2
16472: PPUSH
16473: CALL_OW 66
16477: GO 16437
16479: POP
16480: POP
// end ;
16481: LD_VAR 0 3
16485: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
16486: LD_EXP 71
16490: NOT
16491: IFFALSE 16526
16493: GO 16495
16495: DISABLE
// begin initMiner := true ;
16496: LD_ADDR_EXP 71
16500: PUSH
16501: LD_INT 1
16503: ST_TO_ADDR
// minersList := [ ] ;
16504: LD_ADDR_EXP 72
16508: PUSH
16509: EMPTY
16510: ST_TO_ADDR
// minerMinesList := [ ] ;
16511: LD_ADDR_EXP 73
16515: PUSH
16516: EMPTY
16517: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
16518: LD_ADDR_EXP 74
16522: PUSH
16523: LD_INT 5
16525: ST_TO_ADDR
// end ;
16526: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
16527: LD_EXP 71
16531: PUSH
16532: LD_INT 34
16534: PUSH
16535: LD_EXP 51
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PPUSH
16544: CALL_OW 69
16548: AND
16549: IFFALSE 17012
16551: GO 16553
16553: DISABLE
16554: LD_INT 0
16556: PPUSH
16557: PPUSH
16558: PPUSH
16559: PPUSH
// begin enable ;
16560: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
16561: LD_ADDR_VAR 0 1
16565: PUSH
16566: LD_INT 34
16568: PUSH
16569: LD_EXP 51
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: PPUSH
16578: CALL_OW 69
16582: PUSH
16583: FOR_IN
16584: IFFALSE 16656
// begin if not i in minersList then
16586: LD_VAR 0 1
16590: PUSH
16591: LD_EXP 72
16595: IN
16596: NOT
16597: IFFALSE 16654
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
16599: LD_ADDR_EXP 72
16603: PUSH
16604: LD_EXP 72
16608: PPUSH
16609: LD_EXP 72
16613: PUSH
16614: LD_INT 1
16616: PLUS
16617: PPUSH
16618: LD_VAR 0 1
16622: PPUSH
16623: CALL_OW 1
16627: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
16628: LD_ADDR_EXP 73
16632: PUSH
16633: LD_EXP 73
16637: PPUSH
16638: LD_EXP 73
16642: PUSH
16643: LD_INT 1
16645: PLUS
16646: PPUSH
16647: EMPTY
16648: PPUSH
16649: CALL_OW 1
16653: ST_TO_ADDR
// end end ;
16654: GO 16583
16656: POP
16657: POP
// for i := minerMinesList downto 1 do
16658: LD_ADDR_VAR 0 1
16662: PUSH
16663: DOUBLE
16664: LD_EXP 73
16668: INC
16669: ST_TO_ADDR
16670: LD_INT 1
16672: PUSH
16673: FOR_DOWNTO
16674: IFFALSE 17010
// begin if IsLive ( minersList [ i ] ) then
16676: LD_EXP 72
16680: PUSH
16681: LD_VAR 0 1
16685: ARRAY
16686: PPUSH
16687: CALL_OW 300
16691: IFFALSE 16719
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
16693: LD_EXP 72
16697: PUSH
16698: LD_VAR 0 1
16702: ARRAY
16703: PPUSH
16704: LD_EXP 73
16708: PUSH
16709: LD_VAR 0 1
16713: ARRAY
16714: PPUSH
16715: CALL_OW 505
// if not minerMinesList [ i ] then
16719: LD_EXP 73
16723: PUSH
16724: LD_VAR 0 1
16728: ARRAY
16729: NOT
16730: IFFALSE 16734
// continue ;
16732: GO 16673
// for j := minerMinesList [ i ] downto 1 do
16734: LD_ADDR_VAR 0 2
16738: PUSH
16739: DOUBLE
16740: LD_EXP 73
16744: PUSH
16745: LD_VAR 0 1
16749: ARRAY
16750: INC
16751: ST_TO_ADDR
16752: LD_INT 1
16754: PUSH
16755: FOR_DOWNTO
16756: IFFALSE 17006
// begin side := GetSide ( minersList [ i ] ) ;
16758: LD_ADDR_VAR 0 3
16762: PUSH
16763: LD_EXP 72
16767: PUSH
16768: LD_VAR 0 1
16772: ARRAY
16773: PPUSH
16774: CALL_OW 255
16778: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
16779: LD_ADDR_VAR 0 4
16783: PUSH
16784: LD_EXP 73
16788: PUSH
16789: LD_VAR 0 1
16793: ARRAY
16794: PUSH
16795: LD_VAR 0 2
16799: ARRAY
16800: PUSH
16801: LD_INT 1
16803: ARRAY
16804: PPUSH
16805: LD_EXP 73
16809: PUSH
16810: LD_VAR 0 1
16814: ARRAY
16815: PUSH
16816: LD_VAR 0 2
16820: ARRAY
16821: PUSH
16822: LD_INT 2
16824: ARRAY
16825: PPUSH
16826: CALL_OW 428
16830: ST_TO_ADDR
// if not tmp then
16831: LD_VAR 0 4
16835: NOT
16836: IFFALSE 16840
// continue ;
16838: GO 16755
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
16840: LD_VAR 0 4
16844: PUSH
16845: LD_INT 81
16847: PUSH
16848: LD_VAR 0 3
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PPUSH
16857: CALL_OW 69
16861: IN
16862: PUSH
16863: LD_EXP 73
16867: PUSH
16868: LD_VAR 0 1
16872: ARRAY
16873: PUSH
16874: LD_VAR 0 2
16878: ARRAY
16879: PUSH
16880: LD_INT 1
16882: ARRAY
16883: PPUSH
16884: LD_EXP 73
16888: PUSH
16889: LD_VAR 0 1
16893: ARRAY
16894: PUSH
16895: LD_VAR 0 2
16899: ARRAY
16900: PUSH
16901: LD_INT 2
16903: ARRAY
16904: PPUSH
16905: CALL_OW 458
16909: AND
16910: IFFALSE 17004
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
16912: LD_EXP 73
16916: PUSH
16917: LD_VAR 0 1
16921: ARRAY
16922: PUSH
16923: LD_VAR 0 2
16927: ARRAY
16928: PUSH
16929: LD_INT 1
16931: ARRAY
16932: PPUSH
16933: LD_EXP 73
16937: PUSH
16938: LD_VAR 0 1
16942: ARRAY
16943: PUSH
16944: LD_VAR 0 2
16948: ARRAY
16949: PUSH
16950: LD_INT 2
16952: ARRAY
16953: PPUSH
16954: LD_VAR 0 3
16958: PPUSH
16959: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
16963: LD_ADDR_EXP 73
16967: PUSH
16968: LD_EXP 73
16972: PPUSH
16973: LD_VAR 0 1
16977: PPUSH
16978: LD_EXP 73
16982: PUSH
16983: LD_VAR 0 1
16987: ARRAY
16988: PPUSH
16989: LD_VAR 0 2
16993: PPUSH
16994: CALL_OW 3
16998: PPUSH
16999: CALL_OW 1
17003: ST_TO_ADDR
// end ; end ;
17004: GO 16755
17006: POP
17007: POP
// end ;
17008: GO 16673
17010: POP
17011: POP
// end ;
17012: PPOPN 4
17014: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
17015: LD_INT 0
17017: PPUSH
17018: PPUSH
// result := false ;
17019: LD_ADDR_VAR 0 4
17023: PUSH
17024: LD_INT 0
17026: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
17027: LD_VAR 0 1
17031: PPUSH
17032: CALL_OW 264
17036: PUSH
17037: LD_EXP 51
17041: EQUAL
17042: NOT
17043: IFFALSE 17047
// exit ;
17045: GO 17287
// index := GetElementIndex ( minersList , unit ) ;
17047: LD_ADDR_VAR 0 5
17051: PUSH
17052: LD_EXP 72
17056: PPUSH
17057: LD_VAR 0 1
17061: PPUSH
17062: CALL 37056 0 2
17066: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
17067: LD_EXP 73
17071: PUSH
17072: LD_VAR 0 5
17076: ARRAY
17077: PUSH
17078: LD_EXP 74
17082: GREATEREQUAL
17083: IFFALSE 17087
// exit ;
17085: GO 17287
// ComMoveXY ( unit , x , y ) ;
17087: LD_VAR 0 1
17091: PPUSH
17092: LD_VAR 0 2
17096: PPUSH
17097: LD_VAR 0 3
17101: PPUSH
17102: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17106: LD_INT 35
17108: PPUSH
17109: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
17113: LD_VAR 0 1
17117: PPUSH
17118: LD_VAR 0 2
17122: PPUSH
17123: LD_VAR 0 3
17127: PPUSH
17128: CALL 67828 0 3
17132: NOT
17133: PUSH
17134: LD_VAR 0 1
17138: PPUSH
17139: CALL_OW 314
17143: AND
17144: IFFALSE 17148
// exit ;
17146: GO 17287
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
17148: LD_VAR 0 2
17152: PPUSH
17153: LD_VAR 0 3
17157: PPUSH
17158: CALL_OW 428
17162: PUSH
17163: LD_VAR 0 1
17167: EQUAL
17168: PUSH
17169: LD_VAR 0 1
17173: PPUSH
17174: CALL_OW 314
17178: NOT
17179: AND
17180: IFFALSE 17106
// PlaySoundXY ( x , y , PlantMine ) ;
17182: LD_VAR 0 2
17186: PPUSH
17187: LD_VAR 0 3
17191: PPUSH
17192: LD_STRING PlantMine
17194: PPUSH
17195: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
17199: LD_VAR 0 2
17203: PPUSH
17204: LD_VAR 0 3
17208: PPUSH
17209: LD_VAR 0 1
17213: PPUSH
17214: CALL_OW 255
17218: PPUSH
17219: LD_INT 0
17221: PPUSH
17222: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17226: LD_ADDR_EXP 73
17230: PUSH
17231: LD_EXP 73
17235: PPUSH
17236: LD_VAR 0 5
17240: PUSH
17241: LD_EXP 73
17245: PUSH
17246: LD_VAR 0 5
17250: ARRAY
17251: PUSH
17252: LD_INT 1
17254: PLUS
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PPUSH
17260: LD_VAR 0 2
17264: PUSH
17265: LD_VAR 0 3
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: PPUSH
17274: CALL 37271 0 3
17278: ST_TO_ADDR
// result := true ;
17279: LD_ADDR_VAR 0 4
17283: PUSH
17284: LD_INT 1
17286: ST_TO_ADDR
// end ;
17287: LD_VAR 0 4
17291: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
17292: LD_INT 0
17294: PPUSH
17295: PPUSH
17296: PPUSH
// if not unit in minersList then
17297: LD_VAR 0 1
17301: PUSH
17302: LD_EXP 72
17306: IN
17307: NOT
17308: IFFALSE 17312
// exit ;
17310: GO 17704
// index := GetElementIndex ( minersList , unit ) ;
17312: LD_ADDR_VAR 0 6
17316: PUSH
17317: LD_EXP 72
17321: PPUSH
17322: LD_VAR 0 1
17326: PPUSH
17327: CALL 37056 0 2
17331: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
17332: LD_ADDR_VAR 0 5
17336: PUSH
17337: DOUBLE
17338: LD_EXP 73
17342: PUSH
17343: LD_VAR 0 6
17347: ARRAY
17348: INC
17349: ST_TO_ADDR
17350: LD_INT 1
17352: PUSH
17353: FOR_DOWNTO
17354: IFFALSE 17515
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
17356: LD_EXP 73
17360: PUSH
17361: LD_VAR 0 6
17365: ARRAY
17366: PUSH
17367: LD_VAR 0 5
17371: ARRAY
17372: PUSH
17373: LD_INT 1
17375: ARRAY
17376: PUSH
17377: LD_VAR 0 2
17381: EQUAL
17382: PUSH
17383: LD_EXP 73
17387: PUSH
17388: LD_VAR 0 6
17392: ARRAY
17393: PUSH
17394: LD_VAR 0 5
17398: ARRAY
17399: PUSH
17400: LD_INT 2
17402: ARRAY
17403: PUSH
17404: LD_VAR 0 3
17408: EQUAL
17409: AND
17410: IFFALSE 17513
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17412: LD_EXP 73
17416: PUSH
17417: LD_VAR 0 6
17421: ARRAY
17422: PUSH
17423: LD_VAR 0 5
17427: ARRAY
17428: PUSH
17429: LD_INT 1
17431: ARRAY
17432: PPUSH
17433: LD_EXP 73
17437: PUSH
17438: LD_VAR 0 6
17442: ARRAY
17443: PUSH
17444: LD_VAR 0 5
17448: ARRAY
17449: PUSH
17450: LD_INT 2
17452: ARRAY
17453: PPUSH
17454: LD_VAR 0 1
17458: PPUSH
17459: CALL_OW 255
17463: PPUSH
17464: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17468: LD_ADDR_EXP 73
17472: PUSH
17473: LD_EXP 73
17477: PPUSH
17478: LD_VAR 0 6
17482: PPUSH
17483: LD_EXP 73
17487: PUSH
17488: LD_VAR 0 6
17492: ARRAY
17493: PPUSH
17494: LD_VAR 0 5
17498: PPUSH
17499: CALL_OW 3
17503: PPUSH
17504: CALL_OW 1
17508: ST_TO_ADDR
// exit ;
17509: POP
17510: POP
17511: GO 17704
// end ; end ;
17513: GO 17353
17515: POP
17516: POP
// for i := minerMinesList [ index ] downto 1 do
17517: LD_ADDR_VAR 0 5
17521: PUSH
17522: DOUBLE
17523: LD_EXP 73
17527: PUSH
17528: LD_VAR 0 6
17532: ARRAY
17533: INC
17534: ST_TO_ADDR
17535: LD_INT 1
17537: PUSH
17538: FOR_DOWNTO
17539: IFFALSE 17702
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
17541: LD_EXP 73
17545: PUSH
17546: LD_VAR 0 6
17550: ARRAY
17551: PUSH
17552: LD_VAR 0 5
17556: ARRAY
17557: PUSH
17558: LD_INT 1
17560: ARRAY
17561: PPUSH
17562: LD_EXP 73
17566: PUSH
17567: LD_VAR 0 6
17571: ARRAY
17572: PUSH
17573: LD_VAR 0 5
17577: ARRAY
17578: PUSH
17579: LD_INT 2
17581: ARRAY
17582: PPUSH
17583: LD_VAR 0 2
17587: PPUSH
17588: LD_VAR 0 3
17592: PPUSH
17593: CALL_OW 298
17597: PUSH
17598: LD_INT 6
17600: LESS
17601: IFFALSE 17700
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17603: LD_EXP 73
17607: PUSH
17608: LD_VAR 0 6
17612: ARRAY
17613: PUSH
17614: LD_VAR 0 5
17618: ARRAY
17619: PUSH
17620: LD_INT 1
17622: ARRAY
17623: PPUSH
17624: LD_EXP 73
17628: PUSH
17629: LD_VAR 0 6
17633: ARRAY
17634: PUSH
17635: LD_VAR 0 5
17639: ARRAY
17640: PUSH
17641: LD_INT 2
17643: ARRAY
17644: PPUSH
17645: LD_VAR 0 1
17649: PPUSH
17650: CALL_OW 255
17654: PPUSH
17655: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17659: LD_ADDR_EXP 73
17663: PUSH
17664: LD_EXP 73
17668: PPUSH
17669: LD_VAR 0 6
17673: PPUSH
17674: LD_EXP 73
17678: PUSH
17679: LD_VAR 0 6
17683: ARRAY
17684: PPUSH
17685: LD_VAR 0 5
17689: PPUSH
17690: CALL_OW 3
17694: PPUSH
17695: CALL_OW 1
17699: ST_TO_ADDR
// end ; end ;
17700: GO 17538
17702: POP
17703: POP
// end ;
17704: LD_VAR 0 4
17708: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
17709: LD_INT 0
17711: PPUSH
17712: PPUSH
17713: PPUSH
17714: PPUSH
17715: PPUSH
17716: PPUSH
17717: PPUSH
17718: PPUSH
17719: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
17720: LD_VAR 0 1
17724: PPUSH
17725: CALL_OW 264
17729: PUSH
17730: LD_EXP 51
17734: EQUAL
17735: NOT
17736: PUSH
17737: LD_VAR 0 1
17741: PUSH
17742: LD_EXP 72
17746: IN
17747: NOT
17748: OR
17749: IFFALSE 17753
// exit ;
17751: GO 18075
// index := GetElementIndex ( minersList , unit ) ;
17753: LD_ADDR_VAR 0 6
17757: PUSH
17758: LD_EXP 72
17762: PPUSH
17763: LD_VAR 0 1
17767: PPUSH
17768: CALL 37056 0 2
17772: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
17773: LD_ADDR_VAR 0 8
17777: PUSH
17778: LD_EXP 74
17782: PUSH
17783: LD_EXP 73
17787: PUSH
17788: LD_VAR 0 6
17792: ARRAY
17793: MINUS
17794: ST_TO_ADDR
// if not minesFreeAmount then
17795: LD_VAR 0 8
17799: NOT
17800: IFFALSE 17804
// exit ;
17802: GO 18075
// tmp := [ ] ;
17804: LD_ADDR_VAR 0 7
17808: PUSH
17809: EMPTY
17810: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
17811: LD_ADDR_VAR 0 5
17815: PUSH
17816: DOUBLE
17817: LD_INT 1
17819: DEC
17820: ST_TO_ADDR
17821: LD_VAR 0 8
17825: PUSH
17826: FOR_TO
17827: IFFALSE 18022
// begin _d := rand ( 0 , 5 ) ;
17829: LD_ADDR_VAR 0 11
17833: PUSH
17834: LD_INT 0
17836: PPUSH
17837: LD_INT 5
17839: PPUSH
17840: CALL_OW 12
17844: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
17845: LD_ADDR_VAR 0 12
17849: PUSH
17850: LD_INT 2
17852: PPUSH
17853: LD_INT 6
17855: PPUSH
17856: CALL_OW 12
17860: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
17861: LD_ADDR_VAR 0 9
17865: PUSH
17866: LD_VAR 0 2
17870: PPUSH
17871: LD_VAR 0 11
17875: PPUSH
17876: LD_VAR 0 12
17880: PPUSH
17881: CALL_OW 272
17885: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
17886: LD_ADDR_VAR 0 10
17890: PUSH
17891: LD_VAR 0 3
17895: PPUSH
17896: LD_VAR 0 11
17900: PPUSH
17901: LD_VAR 0 12
17905: PPUSH
17906: CALL_OW 273
17910: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
17911: LD_VAR 0 9
17915: PPUSH
17916: LD_VAR 0 10
17920: PPUSH
17921: CALL_OW 488
17925: PUSH
17926: LD_VAR 0 9
17930: PUSH
17931: LD_VAR 0 10
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: LD_VAR 0 7
17944: IN
17945: NOT
17946: AND
17947: PUSH
17948: LD_VAR 0 9
17952: PPUSH
17953: LD_VAR 0 10
17957: PPUSH
17958: CALL_OW 458
17962: NOT
17963: AND
17964: IFFALSE 18006
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
17966: LD_ADDR_VAR 0 7
17970: PUSH
17971: LD_VAR 0 7
17975: PPUSH
17976: LD_VAR 0 7
17980: PUSH
17981: LD_INT 1
17983: PLUS
17984: PPUSH
17985: LD_VAR 0 9
17989: PUSH
17990: LD_VAR 0 10
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PPUSH
17999: CALL_OW 1
18003: ST_TO_ADDR
18004: GO 18020
// i := i - 1 ;
18006: LD_ADDR_VAR 0 5
18010: PUSH
18011: LD_VAR 0 5
18015: PUSH
18016: LD_INT 1
18018: MINUS
18019: ST_TO_ADDR
// end ;
18020: GO 17826
18022: POP
18023: POP
// for i in tmp do
18024: LD_ADDR_VAR 0 5
18028: PUSH
18029: LD_VAR 0 7
18033: PUSH
18034: FOR_IN
18035: IFFALSE 18073
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
18037: LD_VAR 0 1
18041: PPUSH
18042: LD_VAR 0 5
18046: PUSH
18047: LD_INT 1
18049: ARRAY
18050: PPUSH
18051: LD_VAR 0 5
18055: PUSH
18056: LD_INT 2
18058: ARRAY
18059: PPUSH
18060: CALL 17015 0 3
18064: NOT
18065: IFFALSE 18071
// exit ;
18067: POP
18068: POP
18069: GO 18075
18071: GO 18034
18073: POP
18074: POP
// end ;
18075: LD_VAR 0 4
18079: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
18080: LD_INT 0
18082: PPUSH
18083: PPUSH
18084: PPUSH
18085: PPUSH
18086: PPUSH
18087: PPUSH
18088: PPUSH
// if not GetClass ( unit ) = class_sniper then
18089: LD_VAR 0 1
18093: PPUSH
18094: CALL_OW 257
18098: PUSH
18099: LD_INT 5
18101: EQUAL
18102: NOT
18103: IFFALSE 18107
// exit ;
18105: GO 18495
// dist := 8 ;
18107: LD_ADDR_VAR 0 5
18111: PUSH
18112: LD_INT 8
18114: ST_TO_ADDR
// viewRange := 12 ;
18115: LD_ADDR_VAR 0 7
18119: PUSH
18120: LD_INT 12
18122: ST_TO_ADDR
// side := GetSide ( unit ) ;
18123: LD_ADDR_VAR 0 6
18127: PUSH
18128: LD_VAR 0 1
18132: PPUSH
18133: CALL_OW 255
18137: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
18138: LD_INT 61
18140: PPUSH
18141: LD_VAR 0 6
18145: PPUSH
18146: CALL_OW 321
18150: PUSH
18151: LD_INT 2
18153: EQUAL
18154: IFFALSE 18164
// viewRange := 16 ;
18156: LD_ADDR_VAR 0 7
18160: PUSH
18161: LD_INT 16
18163: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
18164: LD_VAR 0 1
18168: PPUSH
18169: LD_VAR 0 2
18173: PPUSH
18174: LD_VAR 0 3
18178: PPUSH
18179: CALL_OW 297
18183: PUSH
18184: LD_VAR 0 5
18188: GREATER
18189: IFFALSE 18268
// begin ComMoveXY ( unit , x , y ) ;
18191: LD_VAR 0 1
18195: PPUSH
18196: LD_VAR 0 2
18200: PPUSH
18201: LD_VAR 0 3
18205: PPUSH
18206: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18210: LD_INT 35
18212: PPUSH
18213: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
18217: LD_VAR 0 1
18221: PPUSH
18222: LD_VAR 0 2
18226: PPUSH
18227: LD_VAR 0 3
18231: PPUSH
18232: CALL 67828 0 3
18236: NOT
18237: IFFALSE 18241
// exit ;
18239: GO 18495
// until GetDistUnitXY ( unit , x , y ) < dist ;
18241: LD_VAR 0 1
18245: PPUSH
18246: LD_VAR 0 2
18250: PPUSH
18251: LD_VAR 0 3
18255: PPUSH
18256: CALL_OW 297
18260: PUSH
18261: LD_VAR 0 5
18265: LESS
18266: IFFALSE 18210
// end ; ComTurnXY ( unit , x , y ) ;
18268: LD_VAR 0 1
18272: PPUSH
18273: LD_VAR 0 2
18277: PPUSH
18278: LD_VAR 0 3
18282: PPUSH
18283: CALL_OW 118
// wait ( 5 ) ;
18287: LD_INT 5
18289: PPUSH
18290: CALL_OW 67
// _d := GetDir ( unit ) ;
18294: LD_ADDR_VAR 0 10
18298: PUSH
18299: LD_VAR 0 1
18303: PPUSH
18304: CALL_OW 254
18308: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
18309: LD_ADDR_VAR 0 8
18313: PUSH
18314: LD_VAR 0 1
18318: PPUSH
18319: CALL_OW 250
18323: PPUSH
18324: LD_VAR 0 10
18328: PPUSH
18329: LD_VAR 0 5
18333: PPUSH
18334: CALL_OW 272
18338: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
18339: LD_ADDR_VAR 0 9
18343: PUSH
18344: LD_VAR 0 1
18348: PPUSH
18349: CALL_OW 251
18353: PPUSH
18354: LD_VAR 0 10
18358: PPUSH
18359: LD_VAR 0 5
18363: PPUSH
18364: CALL_OW 273
18368: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18369: LD_VAR 0 8
18373: PPUSH
18374: LD_VAR 0 9
18378: PPUSH
18379: CALL_OW 488
18383: NOT
18384: IFFALSE 18388
// exit ;
18386: GO 18495
// ComAnimCustom ( unit , 1 ) ;
18388: LD_VAR 0 1
18392: PPUSH
18393: LD_INT 1
18395: PPUSH
18396: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
18400: LD_VAR 0 8
18404: PPUSH
18405: LD_VAR 0 9
18409: PPUSH
18410: LD_VAR 0 6
18414: PPUSH
18415: LD_VAR 0 7
18419: PPUSH
18420: CALL_OW 330
// repeat wait ( 1 ) ;
18424: LD_INT 1
18426: PPUSH
18427: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
18431: LD_VAR 0 1
18435: PPUSH
18436: CALL_OW 316
18440: PUSH
18441: LD_VAR 0 1
18445: PPUSH
18446: CALL_OW 314
18450: OR
18451: PUSH
18452: LD_VAR 0 1
18456: PPUSH
18457: CALL_OW 302
18461: NOT
18462: OR
18463: PUSH
18464: LD_VAR 0 1
18468: PPUSH
18469: CALL_OW 301
18473: OR
18474: IFFALSE 18424
// RemoveSeeing ( _x , _y , side ) ;
18476: LD_VAR 0 8
18480: PPUSH
18481: LD_VAR 0 9
18485: PPUSH
18486: LD_VAR 0 6
18490: PPUSH
18491: CALL_OW 331
// end ; end_of_file
18495: LD_VAR 0 4
18499: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18500: LD_INT 0
18502: PPUSH
// if p2 = 100 then
18503: LD_VAR 0 2
18507: PUSH
18508: LD_INT 100
18510: EQUAL
18511: IFFALSE 19514
// begin if not StreamModeActive then
18513: LD_EXP 75
18517: NOT
18518: IFFALSE 18528
// StreamModeActive := true ;
18520: LD_ADDR_EXP 75
18524: PUSH
18525: LD_INT 1
18527: ST_TO_ADDR
// if p3 = 0 then
18528: LD_VAR 0 3
18532: PUSH
18533: LD_INT 0
18535: EQUAL
18536: IFFALSE 18542
// InitStreamMode ;
18538: CALL 19674 0 0
// if p3 = 1 then
18542: LD_VAR 0 3
18546: PUSH
18547: LD_INT 1
18549: EQUAL
18550: IFFALSE 18560
// sRocket := true ;
18552: LD_ADDR_EXP 80
18556: PUSH
18557: LD_INT 1
18559: ST_TO_ADDR
// if p3 = 2 then
18560: LD_VAR 0 3
18564: PUSH
18565: LD_INT 2
18567: EQUAL
18568: IFFALSE 18578
// sSpeed := true ;
18570: LD_ADDR_EXP 79
18574: PUSH
18575: LD_INT 1
18577: ST_TO_ADDR
// if p3 = 3 then
18578: LD_VAR 0 3
18582: PUSH
18583: LD_INT 3
18585: EQUAL
18586: IFFALSE 18596
// sEngine := true ;
18588: LD_ADDR_EXP 81
18592: PUSH
18593: LD_INT 1
18595: ST_TO_ADDR
// if p3 = 4 then
18596: LD_VAR 0 3
18600: PUSH
18601: LD_INT 4
18603: EQUAL
18604: IFFALSE 18614
// sSpec := true ;
18606: LD_ADDR_EXP 78
18610: PUSH
18611: LD_INT 1
18613: ST_TO_ADDR
// if p3 = 5 then
18614: LD_VAR 0 3
18618: PUSH
18619: LD_INT 5
18621: EQUAL
18622: IFFALSE 18632
// sLevel := true ;
18624: LD_ADDR_EXP 82
18628: PUSH
18629: LD_INT 1
18631: ST_TO_ADDR
// if p3 = 6 then
18632: LD_VAR 0 3
18636: PUSH
18637: LD_INT 6
18639: EQUAL
18640: IFFALSE 18650
// sArmoury := true ;
18642: LD_ADDR_EXP 83
18646: PUSH
18647: LD_INT 1
18649: ST_TO_ADDR
// if p3 = 7 then
18650: LD_VAR 0 3
18654: PUSH
18655: LD_INT 7
18657: EQUAL
18658: IFFALSE 18668
// sRadar := true ;
18660: LD_ADDR_EXP 84
18664: PUSH
18665: LD_INT 1
18667: ST_TO_ADDR
// if p3 = 8 then
18668: LD_VAR 0 3
18672: PUSH
18673: LD_INT 8
18675: EQUAL
18676: IFFALSE 18686
// sBunker := true ;
18678: LD_ADDR_EXP 85
18682: PUSH
18683: LD_INT 1
18685: ST_TO_ADDR
// if p3 = 9 then
18686: LD_VAR 0 3
18690: PUSH
18691: LD_INT 9
18693: EQUAL
18694: IFFALSE 18704
// sHack := true ;
18696: LD_ADDR_EXP 86
18700: PUSH
18701: LD_INT 1
18703: ST_TO_ADDR
// if p3 = 10 then
18704: LD_VAR 0 3
18708: PUSH
18709: LD_INT 10
18711: EQUAL
18712: IFFALSE 18722
// sFire := true ;
18714: LD_ADDR_EXP 87
18718: PUSH
18719: LD_INT 1
18721: ST_TO_ADDR
// if p3 = 11 then
18722: LD_VAR 0 3
18726: PUSH
18727: LD_INT 11
18729: EQUAL
18730: IFFALSE 18740
// sRefresh := true ;
18732: LD_ADDR_EXP 88
18736: PUSH
18737: LD_INT 1
18739: ST_TO_ADDR
// if p3 = 12 then
18740: LD_VAR 0 3
18744: PUSH
18745: LD_INT 12
18747: EQUAL
18748: IFFALSE 18758
// sExp := true ;
18750: LD_ADDR_EXP 89
18754: PUSH
18755: LD_INT 1
18757: ST_TO_ADDR
// if p3 = 13 then
18758: LD_VAR 0 3
18762: PUSH
18763: LD_INT 13
18765: EQUAL
18766: IFFALSE 18776
// sDepot := true ;
18768: LD_ADDR_EXP 90
18772: PUSH
18773: LD_INT 1
18775: ST_TO_ADDR
// if p3 = 14 then
18776: LD_VAR 0 3
18780: PUSH
18781: LD_INT 14
18783: EQUAL
18784: IFFALSE 18794
// sFlag := true ;
18786: LD_ADDR_EXP 91
18790: PUSH
18791: LD_INT 1
18793: ST_TO_ADDR
// if p3 = 15 then
18794: LD_VAR 0 3
18798: PUSH
18799: LD_INT 15
18801: EQUAL
18802: IFFALSE 18812
// sKamikadze := true ;
18804: LD_ADDR_EXP 99
18808: PUSH
18809: LD_INT 1
18811: ST_TO_ADDR
// if p3 = 16 then
18812: LD_VAR 0 3
18816: PUSH
18817: LD_INT 16
18819: EQUAL
18820: IFFALSE 18830
// sTroll := true ;
18822: LD_ADDR_EXP 100
18826: PUSH
18827: LD_INT 1
18829: ST_TO_ADDR
// if p3 = 17 then
18830: LD_VAR 0 3
18834: PUSH
18835: LD_INT 17
18837: EQUAL
18838: IFFALSE 18848
// sSlow := true ;
18840: LD_ADDR_EXP 101
18844: PUSH
18845: LD_INT 1
18847: ST_TO_ADDR
// if p3 = 18 then
18848: LD_VAR 0 3
18852: PUSH
18853: LD_INT 18
18855: EQUAL
18856: IFFALSE 18866
// sLack := true ;
18858: LD_ADDR_EXP 102
18862: PUSH
18863: LD_INT 1
18865: ST_TO_ADDR
// if p3 = 19 then
18866: LD_VAR 0 3
18870: PUSH
18871: LD_INT 19
18873: EQUAL
18874: IFFALSE 18884
// sTank := true ;
18876: LD_ADDR_EXP 104
18880: PUSH
18881: LD_INT 1
18883: ST_TO_ADDR
// if p3 = 20 then
18884: LD_VAR 0 3
18888: PUSH
18889: LD_INT 20
18891: EQUAL
18892: IFFALSE 18902
// sRemote := true ;
18894: LD_ADDR_EXP 105
18898: PUSH
18899: LD_INT 1
18901: ST_TO_ADDR
// if p3 = 21 then
18902: LD_VAR 0 3
18906: PUSH
18907: LD_INT 21
18909: EQUAL
18910: IFFALSE 18920
// sPowell := true ;
18912: LD_ADDR_EXP 106
18916: PUSH
18917: LD_INT 1
18919: ST_TO_ADDR
// if p3 = 22 then
18920: LD_VAR 0 3
18924: PUSH
18925: LD_INT 22
18927: EQUAL
18928: IFFALSE 18938
// sTeleport := true ;
18930: LD_ADDR_EXP 109
18934: PUSH
18935: LD_INT 1
18937: ST_TO_ADDR
// if p3 = 23 then
18938: LD_VAR 0 3
18942: PUSH
18943: LD_INT 23
18945: EQUAL
18946: IFFALSE 18956
// sOilTower := true ;
18948: LD_ADDR_EXP 111
18952: PUSH
18953: LD_INT 1
18955: ST_TO_ADDR
// if p3 = 24 then
18956: LD_VAR 0 3
18960: PUSH
18961: LD_INT 24
18963: EQUAL
18964: IFFALSE 18974
// sShovel := true ;
18966: LD_ADDR_EXP 112
18970: PUSH
18971: LD_INT 1
18973: ST_TO_ADDR
// if p3 = 25 then
18974: LD_VAR 0 3
18978: PUSH
18979: LD_INT 25
18981: EQUAL
18982: IFFALSE 18992
// sSheik := true ;
18984: LD_ADDR_EXP 113
18988: PUSH
18989: LD_INT 1
18991: ST_TO_ADDR
// if p3 = 26 then
18992: LD_VAR 0 3
18996: PUSH
18997: LD_INT 26
18999: EQUAL
19000: IFFALSE 19010
// sEarthquake := true ;
19002: LD_ADDR_EXP 115
19006: PUSH
19007: LD_INT 1
19009: ST_TO_ADDR
// if p3 = 27 then
19010: LD_VAR 0 3
19014: PUSH
19015: LD_INT 27
19017: EQUAL
19018: IFFALSE 19028
// sAI := true ;
19020: LD_ADDR_EXP 116
19024: PUSH
19025: LD_INT 1
19027: ST_TO_ADDR
// if p3 = 28 then
19028: LD_VAR 0 3
19032: PUSH
19033: LD_INT 28
19035: EQUAL
19036: IFFALSE 19046
// sCargo := true ;
19038: LD_ADDR_EXP 119
19042: PUSH
19043: LD_INT 1
19045: ST_TO_ADDR
// if p3 = 29 then
19046: LD_VAR 0 3
19050: PUSH
19051: LD_INT 29
19053: EQUAL
19054: IFFALSE 19064
// sDLaser := true ;
19056: LD_ADDR_EXP 120
19060: PUSH
19061: LD_INT 1
19063: ST_TO_ADDR
// if p3 = 30 then
19064: LD_VAR 0 3
19068: PUSH
19069: LD_INT 30
19071: EQUAL
19072: IFFALSE 19082
// sExchange := true ;
19074: LD_ADDR_EXP 121
19078: PUSH
19079: LD_INT 1
19081: ST_TO_ADDR
// if p3 = 31 then
19082: LD_VAR 0 3
19086: PUSH
19087: LD_INT 31
19089: EQUAL
19090: IFFALSE 19100
// sFac := true ;
19092: LD_ADDR_EXP 122
19096: PUSH
19097: LD_INT 1
19099: ST_TO_ADDR
// if p3 = 32 then
19100: LD_VAR 0 3
19104: PUSH
19105: LD_INT 32
19107: EQUAL
19108: IFFALSE 19118
// sPower := true ;
19110: LD_ADDR_EXP 123
19114: PUSH
19115: LD_INT 1
19117: ST_TO_ADDR
// if p3 = 33 then
19118: LD_VAR 0 3
19122: PUSH
19123: LD_INT 33
19125: EQUAL
19126: IFFALSE 19136
// sRandom := true ;
19128: LD_ADDR_EXP 124
19132: PUSH
19133: LD_INT 1
19135: ST_TO_ADDR
// if p3 = 34 then
19136: LD_VAR 0 3
19140: PUSH
19141: LD_INT 34
19143: EQUAL
19144: IFFALSE 19154
// sShield := true ;
19146: LD_ADDR_EXP 125
19150: PUSH
19151: LD_INT 1
19153: ST_TO_ADDR
// if p3 = 35 then
19154: LD_VAR 0 3
19158: PUSH
19159: LD_INT 35
19161: EQUAL
19162: IFFALSE 19172
// sTime := true ;
19164: LD_ADDR_EXP 126
19168: PUSH
19169: LD_INT 1
19171: ST_TO_ADDR
// if p3 = 36 then
19172: LD_VAR 0 3
19176: PUSH
19177: LD_INT 36
19179: EQUAL
19180: IFFALSE 19190
// sTools := true ;
19182: LD_ADDR_EXP 127
19186: PUSH
19187: LD_INT 1
19189: ST_TO_ADDR
// if p3 = 101 then
19190: LD_VAR 0 3
19194: PUSH
19195: LD_INT 101
19197: EQUAL
19198: IFFALSE 19208
// sSold := true ;
19200: LD_ADDR_EXP 92
19204: PUSH
19205: LD_INT 1
19207: ST_TO_ADDR
// if p3 = 102 then
19208: LD_VAR 0 3
19212: PUSH
19213: LD_INT 102
19215: EQUAL
19216: IFFALSE 19226
// sDiff := true ;
19218: LD_ADDR_EXP 93
19222: PUSH
19223: LD_INT 1
19225: ST_TO_ADDR
// if p3 = 103 then
19226: LD_VAR 0 3
19230: PUSH
19231: LD_INT 103
19233: EQUAL
19234: IFFALSE 19244
// sFog := true ;
19236: LD_ADDR_EXP 96
19240: PUSH
19241: LD_INT 1
19243: ST_TO_ADDR
// if p3 = 104 then
19244: LD_VAR 0 3
19248: PUSH
19249: LD_INT 104
19251: EQUAL
19252: IFFALSE 19262
// sReset := true ;
19254: LD_ADDR_EXP 97
19258: PUSH
19259: LD_INT 1
19261: ST_TO_ADDR
// if p3 = 105 then
19262: LD_VAR 0 3
19266: PUSH
19267: LD_INT 105
19269: EQUAL
19270: IFFALSE 19280
// sSun := true ;
19272: LD_ADDR_EXP 98
19276: PUSH
19277: LD_INT 1
19279: ST_TO_ADDR
// if p3 = 106 then
19280: LD_VAR 0 3
19284: PUSH
19285: LD_INT 106
19287: EQUAL
19288: IFFALSE 19298
// sTiger := true ;
19290: LD_ADDR_EXP 94
19294: PUSH
19295: LD_INT 1
19297: ST_TO_ADDR
// if p3 = 107 then
19298: LD_VAR 0 3
19302: PUSH
19303: LD_INT 107
19305: EQUAL
19306: IFFALSE 19316
// sBomb := true ;
19308: LD_ADDR_EXP 95
19312: PUSH
19313: LD_INT 1
19315: ST_TO_ADDR
// if p3 = 108 then
19316: LD_VAR 0 3
19320: PUSH
19321: LD_INT 108
19323: EQUAL
19324: IFFALSE 19334
// sWound := true ;
19326: LD_ADDR_EXP 103
19330: PUSH
19331: LD_INT 1
19333: ST_TO_ADDR
// if p3 = 109 then
19334: LD_VAR 0 3
19338: PUSH
19339: LD_INT 109
19341: EQUAL
19342: IFFALSE 19352
// sBetray := true ;
19344: LD_ADDR_EXP 107
19348: PUSH
19349: LD_INT 1
19351: ST_TO_ADDR
// if p3 = 110 then
19352: LD_VAR 0 3
19356: PUSH
19357: LD_INT 110
19359: EQUAL
19360: IFFALSE 19370
// sContamin := true ;
19362: LD_ADDR_EXP 108
19366: PUSH
19367: LD_INT 1
19369: ST_TO_ADDR
// if p3 = 111 then
19370: LD_VAR 0 3
19374: PUSH
19375: LD_INT 111
19377: EQUAL
19378: IFFALSE 19388
// sOil := true ;
19380: LD_ADDR_EXP 110
19384: PUSH
19385: LD_INT 1
19387: ST_TO_ADDR
// if p3 = 112 then
19388: LD_VAR 0 3
19392: PUSH
19393: LD_INT 112
19395: EQUAL
19396: IFFALSE 19406
// sStu := true ;
19398: LD_ADDR_EXP 114
19402: PUSH
19403: LD_INT 1
19405: ST_TO_ADDR
// if p3 = 113 then
19406: LD_VAR 0 3
19410: PUSH
19411: LD_INT 113
19413: EQUAL
19414: IFFALSE 19424
// sBazooka := true ;
19416: LD_ADDR_EXP 117
19420: PUSH
19421: LD_INT 1
19423: ST_TO_ADDR
// if p3 = 114 then
19424: LD_VAR 0 3
19428: PUSH
19429: LD_INT 114
19431: EQUAL
19432: IFFALSE 19442
// sMortar := true ;
19434: LD_ADDR_EXP 118
19438: PUSH
19439: LD_INT 1
19441: ST_TO_ADDR
// if p3 = 115 then
19442: LD_VAR 0 3
19446: PUSH
19447: LD_INT 115
19449: EQUAL
19450: IFFALSE 19460
// sRanger := true ;
19452: LD_ADDR_EXP 128
19456: PUSH
19457: LD_INT 1
19459: ST_TO_ADDR
// if p3 = 116 then
19460: LD_VAR 0 3
19464: PUSH
19465: LD_INT 116
19467: EQUAL
19468: IFFALSE 19478
// sComputer := true ;
19470: LD_ADDR_EXP 129
19474: PUSH
19475: LD_INT 1
19477: ST_TO_ADDR
// if p3 = 117 then
19478: LD_VAR 0 3
19482: PUSH
19483: LD_INT 117
19485: EQUAL
19486: IFFALSE 19496
// s30 := true ;
19488: LD_ADDR_EXP 130
19492: PUSH
19493: LD_INT 1
19495: ST_TO_ADDR
// if p3 = 118 then
19496: LD_VAR 0 3
19500: PUSH
19501: LD_INT 118
19503: EQUAL
19504: IFFALSE 19514
// s60 := true ;
19506: LD_ADDR_EXP 131
19510: PUSH
19511: LD_INT 1
19513: ST_TO_ADDR
// end ; if p2 = 101 then
19514: LD_VAR 0 2
19518: PUSH
19519: LD_INT 101
19521: EQUAL
19522: IFFALSE 19650
// begin case p3 of 1 :
19524: LD_VAR 0 3
19528: PUSH
19529: LD_INT 1
19531: DOUBLE
19532: EQUAL
19533: IFTRUE 19537
19535: GO 19544
19537: POP
// hHackUnlimitedResources ; 2 :
19538: CALL 31246 0 0
19542: GO 19650
19544: LD_INT 2
19546: DOUBLE
19547: EQUAL
19548: IFTRUE 19552
19550: GO 19559
19552: POP
// hHackSetLevel10 ; 3 :
19553: CALL 31379 0 0
19557: GO 19650
19559: LD_INT 3
19561: DOUBLE
19562: EQUAL
19563: IFTRUE 19567
19565: GO 19574
19567: POP
// hHackSetLevel10YourUnits ; 4 :
19568: CALL 31464 0 0
19572: GO 19650
19574: LD_INT 4
19576: DOUBLE
19577: EQUAL
19578: IFTRUE 19582
19580: GO 19589
19582: POP
// hHackInvincible ; 5 :
19583: CALL 31912 0 0
19587: GO 19650
19589: LD_INT 5
19591: DOUBLE
19592: EQUAL
19593: IFTRUE 19597
19595: GO 19604
19597: POP
// hHackInvisible ; 6 :
19598: CALL 32023 0 0
19602: GO 19650
19604: LD_INT 6
19606: DOUBLE
19607: EQUAL
19608: IFTRUE 19612
19610: GO 19619
19612: POP
// hHackChangeYourSide ; 7 :
19613: CALL 32080 0 0
19617: GO 19650
19619: LD_INT 7
19621: DOUBLE
19622: EQUAL
19623: IFTRUE 19627
19625: GO 19634
19627: POP
// hHackChangeUnitSide ; 8 :
19628: CALL 32122 0 0
19632: GO 19650
19634: LD_INT 8
19636: DOUBLE
19637: EQUAL
19638: IFTRUE 19642
19640: GO 19649
19642: POP
// hHackFog ; end ;
19643: CALL 32223 0 0
19647: GO 19650
19649: POP
// end ; end ;
19650: LD_VAR 0 7
19654: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
19655: GO 19657
19657: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19658: LD_STRING initStreamRollete();
19660: PPUSH
19661: CALL_OW 559
// InitStreamMode ;
19665: CALL 19674 0 0
// DefineStreamItems ( ) ;
19669: CALL 20138 0 0
// end ;
19673: END
// function InitStreamMode ; begin
19674: LD_INT 0
19676: PPUSH
// streamModeActive := false ;
19677: LD_ADDR_EXP 75
19681: PUSH
19682: LD_INT 0
19684: ST_TO_ADDR
// normalCounter := 36 ;
19685: LD_ADDR_EXP 76
19689: PUSH
19690: LD_INT 36
19692: ST_TO_ADDR
// hardcoreCounter := 16 ;
19693: LD_ADDR_EXP 77
19697: PUSH
19698: LD_INT 16
19700: ST_TO_ADDR
// sRocket := false ;
19701: LD_ADDR_EXP 80
19705: PUSH
19706: LD_INT 0
19708: ST_TO_ADDR
// sSpeed := false ;
19709: LD_ADDR_EXP 79
19713: PUSH
19714: LD_INT 0
19716: ST_TO_ADDR
// sEngine := false ;
19717: LD_ADDR_EXP 81
19721: PUSH
19722: LD_INT 0
19724: ST_TO_ADDR
// sSpec := false ;
19725: LD_ADDR_EXP 78
19729: PUSH
19730: LD_INT 0
19732: ST_TO_ADDR
// sLevel := false ;
19733: LD_ADDR_EXP 82
19737: PUSH
19738: LD_INT 0
19740: ST_TO_ADDR
// sArmoury := false ;
19741: LD_ADDR_EXP 83
19745: PUSH
19746: LD_INT 0
19748: ST_TO_ADDR
// sRadar := false ;
19749: LD_ADDR_EXP 84
19753: PUSH
19754: LD_INT 0
19756: ST_TO_ADDR
// sBunker := false ;
19757: LD_ADDR_EXP 85
19761: PUSH
19762: LD_INT 0
19764: ST_TO_ADDR
// sHack := false ;
19765: LD_ADDR_EXP 86
19769: PUSH
19770: LD_INT 0
19772: ST_TO_ADDR
// sFire := false ;
19773: LD_ADDR_EXP 87
19777: PUSH
19778: LD_INT 0
19780: ST_TO_ADDR
// sRefresh := false ;
19781: LD_ADDR_EXP 88
19785: PUSH
19786: LD_INT 0
19788: ST_TO_ADDR
// sExp := false ;
19789: LD_ADDR_EXP 89
19793: PUSH
19794: LD_INT 0
19796: ST_TO_ADDR
// sDepot := false ;
19797: LD_ADDR_EXP 90
19801: PUSH
19802: LD_INT 0
19804: ST_TO_ADDR
// sFlag := false ;
19805: LD_ADDR_EXP 91
19809: PUSH
19810: LD_INT 0
19812: ST_TO_ADDR
// sKamikadze := false ;
19813: LD_ADDR_EXP 99
19817: PUSH
19818: LD_INT 0
19820: ST_TO_ADDR
// sTroll := false ;
19821: LD_ADDR_EXP 100
19825: PUSH
19826: LD_INT 0
19828: ST_TO_ADDR
// sSlow := false ;
19829: LD_ADDR_EXP 101
19833: PUSH
19834: LD_INT 0
19836: ST_TO_ADDR
// sLack := false ;
19837: LD_ADDR_EXP 102
19841: PUSH
19842: LD_INT 0
19844: ST_TO_ADDR
// sTank := false ;
19845: LD_ADDR_EXP 104
19849: PUSH
19850: LD_INT 0
19852: ST_TO_ADDR
// sRemote := false ;
19853: LD_ADDR_EXP 105
19857: PUSH
19858: LD_INT 0
19860: ST_TO_ADDR
// sPowell := false ;
19861: LD_ADDR_EXP 106
19865: PUSH
19866: LD_INT 0
19868: ST_TO_ADDR
// sTeleport := false ;
19869: LD_ADDR_EXP 109
19873: PUSH
19874: LD_INT 0
19876: ST_TO_ADDR
// sOilTower := false ;
19877: LD_ADDR_EXP 111
19881: PUSH
19882: LD_INT 0
19884: ST_TO_ADDR
// sShovel := false ;
19885: LD_ADDR_EXP 112
19889: PUSH
19890: LD_INT 0
19892: ST_TO_ADDR
// sSheik := false ;
19893: LD_ADDR_EXP 113
19897: PUSH
19898: LD_INT 0
19900: ST_TO_ADDR
// sEarthquake := false ;
19901: LD_ADDR_EXP 115
19905: PUSH
19906: LD_INT 0
19908: ST_TO_ADDR
// sAI := false ;
19909: LD_ADDR_EXP 116
19913: PUSH
19914: LD_INT 0
19916: ST_TO_ADDR
// sCargo := false ;
19917: LD_ADDR_EXP 119
19921: PUSH
19922: LD_INT 0
19924: ST_TO_ADDR
// sDLaser := false ;
19925: LD_ADDR_EXP 120
19929: PUSH
19930: LD_INT 0
19932: ST_TO_ADDR
// sExchange := false ;
19933: LD_ADDR_EXP 121
19937: PUSH
19938: LD_INT 0
19940: ST_TO_ADDR
// sFac := false ;
19941: LD_ADDR_EXP 122
19945: PUSH
19946: LD_INT 0
19948: ST_TO_ADDR
// sPower := false ;
19949: LD_ADDR_EXP 123
19953: PUSH
19954: LD_INT 0
19956: ST_TO_ADDR
// sRandom := false ;
19957: LD_ADDR_EXP 124
19961: PUSH
19962: LD_INT 0
19964: ST_TO_ADDR
// sShield := false ;
19965: LD_ADDR_EXP 125
19969: PUSH
19970: LD_INT 0
19972: ST_TO_ADDR
// sTime := false ;
19973: LD_ADDR_EXP 126
19977: PUSH
19978: LD_INT 0
19980: ST_TO_ADDR
// sTools := false ;
19981: LD_ADDR_EXP 127
19985: PUSH
19986: LD_INT 0
19988: ST_TO_ADDR
// sSold := false ;
19989: LD_ADDR_EXP 92
19993: PUSH
19994: LD_INT 0
19996: ST_TO_ADDR
// sDiff := false ;
19997: LD_ADDR_EXP 93
20001: PUSH
20002: LD_INT 0
20004: ST_TO_ADDR
// sFog := false ;
20005: LD_ADDR_EXP 96
20009: PUSH
20010: LD_INT 0
20012: ST_TO_ADDR
// sReset := false ;
20013: LD_ADDR_EXP 97
20017: PUSH
20018: LD_INT 0
20020: ST_TO_ADDR
// sSun := false ;
20021: LD_ADDR_EXP 98
20025: PUSH
20026: LD_INT 0
20028: ST_TO_ADDR
// sTiger := false ;
20029: LD_ADDR_EXP 94
20033: PUSH
20034: LD_INT 0
20036: ST_TO_ADDR
// sBomb := false ;
20037: LD_ADDR_EXP 95
20041: PUSH
20042: LD_INT 0
20044: ST_TO_ADDR
// sWound := false ;
20045: LD_ADDR_EXP 103
20049: PUSH
20050: LD_INT 0
20052: ST_TO_ADDR
// sBetray := false ;
20053: LD_ADDR_EXP 107
20057: PUSH
20058: LD_INT 0
20060: ST_TO_ADDR
// sContamin := false ;
20061: LD_ADDR_EXP 108
20065: PUSH
20066: LD_INT 0
20068: ST_TO_ADDR
// sOil := false ;
20069: LD_ADDR_EXP 110
20073: PUSH
20074: LD_INT 0
20076: ST_TO_ADDR
// sStu := false ;
20077: LD_ADDR_EXP 114
20081: PUSH
20082: LD_INT 0
20084: ST_TO_ADDR
// sBazooka := false ;
20085: LD_ADDR_EXP 117
20089: PUSH
20090: LD_INT 0
20092: ST_TO_ADDR
// sMortar := false ;
20093: LD_ADDR_EXP 118
20097: PUSH
20098: LD_INT 0
20100: ST_TO_ADDR
// sRanger := false ;
20101: LD_ADDR_EXP 128
20105: PUSH
20106: LD_INT 0
20108: ST_TO_ADDR
// sComputer := false ;
20109: LD_ADDR_EXP 129
20113: PUSH
20114: LD_INT 0
20116: ST_TO_ADDR
// s30 := false ;
20117: LD_ADDR_EXP 130
20121: PUSH
20122: LD_INT 0
20124: ST_TO_ADDR
// s60 := false ;
20125: LD_ADDR_EXP 131
20129: PUSH
20130: LD_INT 0
20132: ST_TO_ADDR
// end ;
20133: LD_VAR 0 1
20137: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20138: LD_INT 0
20140: PPUSH
20141: PPUSH
20142: PPUSH
20143: PPUSH
20144: PPUSH
// result := [ ] ;
20145: LD_ADDR_VAR 0 1
20149: PUSH
20150: EMPTY
20151: ST_TO_ADDR
// if campaign_id = 1 then
20152: LD_OWVAR 69
20156: PUSH
20157: LD_INT 1
20159: EQUAL
20160: IFFALSE 23326
// begin case mission_number of 1 :
20162: LD_OWVAR 70
20166: PUSH
20167: LD_INT 1
20169: DOUBLE
20170: EQUAL
20171: IFTRUE 20175
20173: GO 20251
20175: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20176: LD_ADDR_VAR 0 1
20180: PUSH
20181: LD_INT 2
20183: PUSH
20184: LD_INT 4
20186: PUSH
20187: LD_INT 11
20189: PUSH
20190: LD_INT 12
20192: PUSH
20193: LD_INT 15
20195: PUSH
20196: LD_INT 16
20198: PUSH
20199: LD_INT 22
20201: PUSH
20202: LD_INT 23
20204: PUSH
20205: LD_INT 26
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 101
20221: PUSH
20222: LD_INT 102
20224: PUSH
20225: LD_INT 106
20227: PUSH
20228: LD_INT 116
20230: PUSH
20231: LD_INT 117
20233: PUSH
20234: LD_INT 118
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: ST_TO_ADDR
20249: GO 23324
20251: LD_INT 2
20253: DOUBLE
20254: EQUAL
20255: IFTRUE 20259
20257: GO 20343
20259: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20260: LD_ADDR_VAR 0 1
20264: PUSH
20265: LD_INT 2
20267: PUSH
20268: LD_INT 4
20270: PUSH
20271: LD_INT 11
20273: PUSH
20274: LD_INT 12
20276: PUSH
20277: LD_INT 15
20279: PUSH
20280: LD_INT 16
20282: PUSH
20283: LD_INT 22
20285: PUSH
20286: LD_INT 23
20288: PUSH
20289: LD_INT 26
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 101
20305: PUSH
20306: LD_INT 102
20308: PUSH
20309: LD_INT 105
20311: PUSH
20312: LD_INT 106
20314: PUSH
20315: LD_INT 108
20317: PUSH
20318: LD_INT 116
20320: PUSH
20321: LD_INT 117
20323: PUSH
20324: LD_INT 118
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: ST_TO_ADDR
20341: GO 23324
20343: LD_INT 3
20345: DOUBLE
20346: EQUAL
20347: IFTRUE 20351
20349: GO 20439
20351: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20352: LD_ADDR_VAR 0 1
20356: PUSH
20357: LD_INT 2
20359: PUSH
20360: LD_INT 4
20362: PUSH
20363: LD_INT 5
20365: PUSH
20366: LD_INT 11
20368: PUSH
20369: LD_INT 12
20371: PUSH
20372: LD_INT 15
20374: PUSH
20375: LD_INT 16
20377: PUSH
20378: LD_INT 22
20380: PUSH
20381: LD_INT 26
20383: PUSH
20384: LD_INT 36
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 101
20401: PUSH
20402: LD_INT 102
20404: PUSH
20405: LD_INT 105
20407: PUSH
20408: LD_INT 106
20410: PUSH
20411: LD_INT 108
20413: PUSH
20414: LD_INT 116
20416: PUSH
20417: LD_INT 117
20419: PUSH
20420: LD_INT 118
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: ST_TO_ADDR
20437: GO 23324
20439: LD_INT 4
20441: DOUBLE
20442: EQUAL
20443: IFTRUE 20447
20445: GO 20543
20447: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20448: LD_ADDR_VAR 0 1
20452: PUSH
20453: LD_INT 2
20455: PUSH
20456: LD_INT 4
20458: PUSH
20459: LD_INT 5
20461: PUSH
20462: LD_INT 8
20464: PUSH
20465: LD_INT 11
20467: PUSH
20468: LD_INT 12
20470: PUSH
20471: LD_INT 15
20473: PUSH
20474: LD_INT 16
20476: PUSH
20477: LD_INT 22
20479: PUSH
20480: LD_INT 23
20482: PUSH
20483: LD_INT 26
20485: PUSH
20486: LD_INT 36
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 101
20505: PUSH
20506: LD_INT 102
20508: PUSH
20509: LD_INT 105
20511: PUSH
20512: LD_INT 106
20514: PUSH
20515: LD_INT 108
20517: PUSH
20518: LD_INT 116
20520: PUSH
20521: LD_INT 117
20523: PUSH
20524: LD_INT 118
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: ST_TO_ADDR
20541: GO 23324
20543: LD_INT 5
20545: DOUBLE
20546: EQUAL
20547: IFTRUE 20551
20549: GO 20663
20551: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20552: LD_ADDR_VAR 0 1
20556: PUSH
20557: LD_INT 2
20559: PUSH
20560: LD_INT 4
20562: PUSH
20563: LD_INT 5
20565: PUSH
20566: LD_INT 6
20568: PUSH
20569: LD_INT 8
20571: PUSH
20572: LD_INT 11
20574: PUSH
20575: LD_INT 12
20577: PUSH
20578: LD_INT 15
20580: PUSH
20581: LD_INT 16
20583: PUSH
20584: LD_INT 22
20586: PUSH
20587: LD_INT 23
20589: PUSH
20590: LD_INT 25
20592: PUSH
20593: LD_INT 26
20595: PUSH
20596: LD_INT 36
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 101
20617: PUSH
20618: LD_INT 102
20620: PUSH
20621: LD_INT 105
20623: PUSH
20624: LD_INT 106
20626: PUSH
20627: LD_INT 108
20629: PUSH
20630: LD_INT 109
20632: PUSH
20633: LD_INT 112
20635: PUSH
20636: LD_INT 116
20638: PUSH
20639: LD_INT 117
20641: PUSH
20642: LD_INT 118
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: ST_TO_ADDR
20661: GO 23324
20663: LD_INT 6
20665: DOUBLE
20666: EQUAL
20667: IFTRUE 20671
20669: GO 20803
20671: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20672: LD_ADDR_VAR 0 1
20676: PUSH
20677: LD_INT 2
20679: PUSH
20680: LD_INT 4
20682: PUSH
20683: LD_INT 5
20685: PUSH
20686: LD_INT 6
20688: PUSH
20689: LD_INT 8
20691: PUSH
20692: LD_INT 11
20694: PUSH
20695: LD_INT 12
20697: PUSH
20698: LD_INT 15
20700: PUSH
20701: LD_INT 16
20703: PUSH
20704: LD_INT 20
20706: PUSH
20707: LD_INT 21
20709: PUSH
20710: LD_INT 22
20712: PUSH
20713: LD_INT 23
20715: PUSH
20716: LD_INT 25
20718: PUSH
20719: LD_INT 26
20721: PUSH
20722: LD_INT 30
20724: PUSH
20725: LD_INT 31
20727: PUSH
20728: LD_INT 32
20730: PUSH
20731: LD_INT 36
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: PUSH
20755: LD_INT 101
20757: PUSH
20758: LD_INT 102
20760: PUSH
20761: LD_INT 105
20763: PUSH
20764: LD_INT 106
20766: PUSH
20767: LD_INT 108
20769: PUSH
20770: LD_INT 109
20772: PUSH
20773: LD_INT 112
20775: PUSH
20776: LD_INT 116
20778: PUSH
20779: LD_INT 117
20781: PUSH
20782: LD_INT 118
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: ST_TO_ADDR
20801: GO 23324
20803: LD_INT 7
20805: DOUBLE
20806: EQUAL
20807: IFTRUE 20811
20809: GO 20923
20811: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20812: LD_ADDR_VAR 0 1
20816: PUSH
20817: LD_INT 2
20819: PUSH
20820: LD_INT 4
20822: PUSH
20823: LD_INT 5
20825: PUSH
20826: LD_INT 7
20828: PUSH
20829: LD_INT 11
20831: PUSH
20832: LD_INT 12
20834: PUSH
20835: LD_INT 15
20837: PUSH
20838: LD_INT 16
20840: PUSH
20841: LD_INT 20
20843: PUSH
20844: LD_INT 21
20846: PUSH
20847: LD_INT 22
20849: PUSH
20850: LD_INT 23
20852: PUSH
20853: LD_INT 25
20855: PUSH
20856: LD_INT 26
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 101
20877: PUSH
20878: LD_INT 102
20880: PUSH
20881: LD_INT 103
20883: PUSH
20884: LD_INT 105
20886: PUSH
20887: LD_INT 106
20889: PUSH
20890: LD_INT 108
20892: PUSH
20893: LD_INT 112
20895: PUSH
20896: LD_INT 116
20898: PUSH
20899: LD_INT 117
20901: PUSH
20902: LD_INT 118
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: ST_TO_ADDR
20921: GO 23324
20923: LD_INT 8
20925: DOUBLE
20926: EQUAL
20927: IFTRUE 20931
20929: GO 21071
20931: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
20932: LD_ADDR_VAR 0 1
20936: PUSH
20937: LD_INT 2
20939: PUSH
20940: LD_INT 4
20942: PUSH
20943: LD_INT 5
20945: PUSH
20946: LD_INT 6
20948: PUSH
20949: LD_INT 7
20951: PUSH
20952: LD_INT 8
20954: PUSH
20955: LD_INT 11
20957: PUSH
20958: LD_INT 12
20960: PUSH
20961: LD_INT 15
20963: PUSH
20964: LD_INT 16
20966: PUSH
20967: LD_INT 20
20969: PUSH
20970: LD_INT 21
20972: PUSH
20973: LD_INT 22
20975: PUSH
20976: LD_INT 23
20978: PUSH
20979: LD_INT 25
20981: PUSH
20982: LD_INT 26
20984: PUSH
20985: LD_INT 30
20987: PUSH
20988: LD_INT 31
20990: PUSH
20991: LD_INT 32
20993: PUSH
20994: LD_INT 36
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: PUSH
21019: LD_INT 101
21021: PUSH
21022: LD_INT 102
21024: PUSH
21025: LD_INT 103
21027: PUSH
21028: LD_INT 105
21030: PUSH
21031: LD_INT 106
21033: PUSH
21034: LD_INT 108
21036: PUSH
21037: LD_INT 109
21039: PUSH
21040: LD_INT 112
21042: PUSH
21043: LD_INT 116
21045: PUSH
21046: LD_INT 117
21048: PUSH
21049: LD_INT 118
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: ST_TO_ADDR
21069: GO 23324
21071: LD_INT 9
21073: DOUBLE
21074: EQUAL
21075: IFTRUE 21079
21077: GO 21227
21079: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21080: LD_ADDR_VAR 0 1
21084: PUSH
21085: LD_INT 2
21087: PUSH
21088: LD_INT 4
21090: PUSH
21091: LD_INT 5
21093: PUSH
21094: LD_INT 6
21096: PUSH
21097: LD_INT 7
21099: PUSH
21100: LD_INT 8
21102: PUSH
21103: LD_INT 11
21105: PUSH
21106: LD_INT 12
21108: PUSH
21109: LD_INT 15
21111: PUSH
21112: LD_INT 16
21114: PUSH
21115: LD_INT 20
21117: PUSH
21118: LD_INT 21
21120: PUSH
21121: LD_INT 22
21123: PUSH
21124: LD_INT 23
21126: PUSH
21127: LD_INT 25
21129: PUSH
21130: LD_INT 26
21132: PUSH
21133: LD_INT 28
21135: PUSH
21136: LD_INT 30
21138: PUSH
21139: LD_INT 31
21141: PUSH
21142: LD_INT 32
21144: PUSH
21145: LD_INT 36
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: PUSH
21171: LD_INT 101
21173: PUSH
21174: LD_INT 102
21176: PUSH
21177: LD_INT 103
21179: PUSH
21180: LD_INT 105
21182: PUSH
21183: LD_INT 106
21185: PUSH
21186: LD_INT 108
21188: PUSH
21189: LD_INT 109
21191: PUSH
21192: LD_INT 112
21194: PUSH
21195: LD_INT 114
21197: PUSH
21198: LD_INT 116
21200: PUSH
21201: LD_INT 117
21203: PUSH
21204: LD_INT 118
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: ST_TO_ADDR
21225: GO 23324
21227: LD_INT 10
21229: DOUBLE
21230: EQUAL
21231: IFTRUE 21235
21233: GO 21431
21235: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21236: LD_ADDR_VAR 0 1
21240: PUSH
21241: LD_INT 2
21243: PUSH
21244: LD_INT 4
21246: PUSH
21247: LD_INT 5
21249: PUSH
21250: LD_INT 6
21252: PUSH
21253: LD_INT 7
21255: PUSH
21256: LD_INT 8
21258: PUSH
21259: LD_INT 9
21261: PUSH
21262: LD_INT 10
21264: PUSH
21265: LD_INT 11
21267: PUSH
21268: LD_INT 12
21270: PUSH
21271: LD_INT 13
21273: PUSH
21274: LD_INT 14
21276: PUSH
21277: LD_INT 15
21279: PUSH
21280: LD_INT 16
21282: PUSH
21283: LD_INT 17
21285: PUSH
21286: LD_INT 18
21288: PUSH
21289: LD_INT 19
21291: PUSH
21292: LD_INT 20
21294: PUSH
21295: LD_INT 21
21297: PUSH
21298: LD_INT 22
21300: PUSH
21301: LD_INT 23
21303: PUSH
21304: LD_INT 24
21306: PUSH
21307: LD_INT 25
21309: PUSH
21310: LD_INT 26
21312: PUSH
21313: LD_INT 28
21315: PUSH
21316: LD_INT 30
21318: PUSH
21319: LD_INT 31
21321: PUSH
21322: LD_INT 32
21324: PUSH
21325: LD_INT 36
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: PUSH
21359: LD_INT 101
21361: PUSH
21362: LD_INT 102
21364: PUSH
21365: LD_INT 103
21367: PUSH
21368: LD_INT 104
21370: PUSH
21371: LD_INT 105
21373: PUSH
21374: LD_INT 106
21376: PUSH
21377: LD_INT 107
21379: PUSH
21380: LD_INT 108
21382: PUSH
21383: LD_INT 109
21385: PUSH
21386: LD_INT 110
21388: PUSH
21389: LD_INT 111
21391: PUSH
21392: LD_INT 112
21394: PUSH
21395: LD_INT 114
21397: PUSH
21398: LD_INT 116
21400: PUSH
21401: LD_INT 117
21403: PUSH
21404: LD_INT 118
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: ST_TO_ADDR
21429: GO 23324
21431: LD_INT 11
21433: DOUBLE
21434: EQUAL
21435: IFTRUE 21439
21437: GO 21643
21439: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21440: LD_ADDR_VAR 0 1
21444: PUSH
21445: LD_INT 2
21447: PUSH
21448: LD_INT 3
21450: PUSH
21451: LD_INT 4
21453: PUSH
21454: LD_INT 5
21456: PUSH
21457: LD_INT 6
21459: PUSH
21460: LD_INT 7
21462: PUSH
21463: LD_INT 8
21465: PUSH
21466: LD_INT 9
21468: PUSH
21469: LD_INT 10
21471: PUSH
21472: LD_INT 11
21474: PUSH
21475: LD_INT 12
21477: PUSH
21478: LD_INT 13
21480: PUSH
21481: LD_INT 14
21483: PUSH
21484: LD_INT 15
21486: PUSH
21487: LD_INT 16
21489: PUSH
21490: LD_INT 17
21492: PUSH
21493: LD_INT 18
21495: PUSH
21496: LD_INT 19
21498: PUSH
21499: LD_INT 20
21501: PUSH
21502: LD_INT 21
21504: PUSH
21505: LD_INT 22
21507: PUSH
21508: LD_INT 23
21510: PUSH
21511: LD_INT 24
21513: PUSH
21514: LD_INT 25
21516: PUSH
21517: LD_INT 26
21519: PUSH
21520: LD_INT 28
21522: PUSH
21523: LD_INT 30
21525: PUSH
21526: LD_INT 31
21528: PUSH
21529: LD_INT 32
21531: PUSH
21532: LD_INT 34
21534: PUSH
21535: LD_INT 36
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: PUSH
21571: LD_INT 101
21573: PUSH
21574: LD_INT 102
21576: PUSH
21577: LD_INT 103
21579: PUSH
21580: LD_INT 104
21582: PUSH
21583: LD_INT 105
21585: PUSH
21586: LD_INT 106
21588: PUSH
21589: LD_INT 107
21591: PUSH
21592: LD_INT 108
21594: PUSH
21595: LD_INT 109
21597: PUSH
21598: LD_INT 110
21600: PUSH
21601: LD_INT 111
21603: PUSH
21604: LD_INT 112
21606: PUSH
21607: LD_INT 114
21609: PUSH
21610: LD_INT 116
21612: PUSH
21613: LD_INT 117
21615: PUSH
21616: LD_INT 118
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: ST_TO_ADDR
21641: GO 23324
21643: LD_INT 12
21645: DOUBLE
21646: EQUAL
21647: IFTRUE 21651
21649: GO 21871
21651: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21652: LD_ADDR_VAR 0 1
21656: PUSH
21657: LD_INT 1
21659: PUSH
21660: LD_INT 2
21662: PUSH
21663: LD_INT 3
21665: PUSH
21666: LD_INT 4
21668: PUSH
21669: LD_INT 5
21671: PUSH
21672: LD_INT 6
21674: PUSH
21675: LD_INT 7
21677: PUSH
21678: LD_INT 8
21680: PUSH
21681: LD_INT 9
21683: PUSH
21684: LD_INT 10
21686: PUSH
21687: LD_INT 11
21689: PUSH
21690: LD_INT 12
21692: PUSH
21693: LD_INT 13
21695: PUSH
21696: LD_INT 14
21698: PUSH
21699: LD_INT 15
21701: PUSH
21702: LD_INT 16
21704: PUSH
21705: LD_INT 17
21707: PUSH
21708: LD_INT 18
21710: PUSH
21711: LD_INT 19
21713: PUSH
21714: LD_INT 20
21716: PUSH
21717: LD_INT 21
21719: PUSH
21720: LD_INT 22
21722: PUSH
21723: LD_INT 23
21725: PUSH
21726: LD_INT 24
21728: PUSH
21729: LD_INT 25
21731: PUSH
21732: LD_INT 26
21734: PUSH
21735: LD_INT 27
21737: PUSH
21738: LD_INT 28
21740: PUSH
21741: LD_INT 30
21743: PUSH
21744: LD_INT 31
21746: PUSH
21747: LD_INT 32
21749: PUSH
21750: LD_INT 33
21752: PUSH
21753: LD_INT 34
21755: PUSH
21756: LD_INT 36
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 101
21797: PUSH
21798: LD_INT 102
21800: PUSH
21801: LD_INT 103
21803: PUSH
21804: LD_INT 104
21806: PUSH
21807: LD_INT 105
21809: PUSH
21810: LD_INT 106
21812: PUSH
21813: LD_INT 107
21815: PUSH
21816: LD_INT 108
21818: PUSH
21819: LD_INT 109
21821: PUSH
21822: LD_INT 110
21824: PUSH
21825: LD_INT 111
21827: PUSH
21828: LD_INT 112
21830: PUSH
21831: LD_INT 113
21833: PUSH
21834: LD_INT 114
21836: PUSH
21837: LD_INT 116
21839: PUSH
21840: LD_INT 117
21842: PUSH
21843: LD_INT 118
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: ST_TO_ADDR
21869: GO 23324
21871: LD_INT 13
21873: DOUBLE
21874: EQUAL
21875: IFTRUE 21879
21877: GO 22087
21879: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21880: LD_ADDR_VAR 0 1
21884: PUSH
21885: LD_INT 1
21887: PUSH
21888: LD_INT 2
21890: PUSH
21891: LD_INT 3
21893: PUSH
21894: LD_INT 4
21896: PUSH
21897: LD_INT 5
21899: PUSH
21900: LD_INT 8
21902: PUSH
21903: LD_INT 9
21905: PUSH
21906: LD_INT 10
21908: PUSH
21909: LD_INT 11
21911: PUSH
21912: LD_INT 12
21914: PUSH
21915: LD_INT 14
21917: PUSH
21918: LD_INT 15
21920: PUSH
21921: LD_INT 16
21923: PUSH
21924: LD_INT 17
21926: PUSH
21927: LD_INT 18
21929: PUSH
21930: LD_INT 19
21932: PUSH
21933: LD_INT 20
21935: PUSH
21936: LD_INT 21
21938: PUSH
21939: LD_INT 22
21941: PUSH
21942: LD_INT 23
21944: PUSH
21945: LD_INT 24
21947: PUSH
21948: LD_INT 25
21950: PUSH
21951: LD_INT 26
21953: PUSH
21954: LD_INT 27
21956: PUSH
21957: LD_INT 28
21959: PUSH
21960: LD_INT 30
21962: PUSH
21963: LD_INT 31
21965: PUSH
21966: LD_INT 32
21968: PUSH
21969: LD_INT 33
21971: PUSH
21972: LD_INT 34
21974: PUSH
21975: LD_INT 36
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: PUSH
22011: LD_INT 101
22013: PUSH
22014: LD_INT 102
22016: PUSH
22017: LD_INT 103
22019: PUSH
22020: LD_INT 104
22022: PUSH
22023: LD_INT 105
22025: PUSH
22026: LD_INT 106
22028: PUSH
22029: LD_INT 107
22031: PUSH
22032: LD_INT 108
22034: PUSH
22035: LD_INT 109
22037: PUSH
22038: LD_INT 110
22040: PUSH
22041: LD_INT 111
22043: PUSH
22044: LD_INT 112
22046: PUSH
22047: LD_INT 113
22049: PUSH
22050: LD_INT 114
22052: PUSH
22053: LD_INT 116
22055: PUSH
22056: LD_INT 117
22058: PUSH
22059: LD_INT 118
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: ST_TO_ADDR
22085: GO 23324
22087: LD_INT 14
22089: DOUBLE
22090: EQUAL
22091: IFTRUE 22095
22093: GO 22319
22095: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22096: LD_ADDR_VAR 0 1
22100: PUSH
22101: LD_INT 1
22103: PUSH
22104: LD_INT 2
22106: PUSH
22107: LD_INT 3
22109: PUSH
22110: LD_INT 4
22112: PUSH
22113: LD_INT 5
22115: PUSH
22116: LD_INT 6
22118: PUSH
22119: LD_INT 7
22121: PUSH
22122: LD_INT 8
22124: PUSH
22125: LD_INT 9
22127: PUSH
22128: LD_INT 10
22130: PUSH
22131: LD_INT 11
22133: PUSH
22134: LD_INT 12
22136: PUSH
22137: LD_INT 13
22139: PUSH
22140: LD_INT 14
22142: PUSH
22143: LD_INT 15
22145: PUSH
22146: LD_INT 16
22148: PUSH
22149: LD_INT 17
22151: PUSH
22152: LD_INT 18
22154: PUSH
22155: LD_INT 19
22157: PUSH
22158: LD_INT 20
22160: PUSH
22161: LD_INT 21
22163: PUSH
22164: LD_INT 22
22166: PUSH
22167: LD_INT 23
22169: PUSH
22170: LD_INT 24
22172: PUSH
22173: LD_INT 25
22175: PUSH
22176: LD_INT 26
22178: PUSH
22179: LD_INT 27
22181: PUSH
22182: LD_INT 28
22184: PUSH
22185: LD_INT 29
22187: PUSH
22188: LD_INT 30
22190: PUSH
22191: LD_INT 31
22193: PUSH
22194: LD_INT 32
22196: PUSH
22197: LD_INT 33
22199: PUSH
22200: LD_INT 34
22202: PUSH
22203: LD_INT 36
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: PUSH
22243: LD_INT 101
22245: PUSH
22246: LD_INT 102
22248: PUSH
22249: LD_INT 103
22251: PUSH
22252: LD_INT 104
22254: PUSH
22255: LD_INT 105
22257: PUSH
22258: LD_INT 106
22260: PUSH
22261: LD_INT 107
22263: PUSH
22264: LD_INT 108
22266: PUSH
22267: LD_INT 109
22269: PUSH
22270: LD_INT 110
22272: PUSH
22273: LD_INT 111
22275: PUSH
22276: LD_INT 112
22278: PUSH
22279: LD_INT 113
22281: PUSH
22282: LD_INT 114
22284: PUSH
22285: LD_INT 116
22287: PUSH
22288: LD_INT 117
22290: PUSH
22291: LD_INT 118
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: ST_TO_ADDR
22317: GO 23324
22319: LD_INT 15
22321: DOUBLE
22322: EQUAL
22323: IFTRUE 22327
22325: GO 22551
22327: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22328: LD_ADDR_VAR 0 1
22332: PUSH
22333: LD_INT 1
22335: PUSH
22336: LD_INT 2
22338: PUSH
22339: LD_INT 3
22341: PUSH
22342: LD_INT 4
22344: PUSH
22345: LD_INT 5
22347: PUSH
22348: LD_INT 6
22350: PUSH
22351: LD_INT 7
22353: PUSH
22354: LD_INT 8
22356: PUSH
22357: LD_INT 9
22359: PUSH
22360: LD_INT 10
22362: PUSH
22363: LD_INT 11
22365: PUSH
22366: LD_INT 12
22368: PUSH
22369: LD_INT 13
22371: PUSH
22372: LD_INT 14
22374: PUSH
22375: LD_INT 15
22377: PUSH
22378: LD_INT 16
22380: PUSH
22381: LD_INT 17
22383: PUSH
22384: LD_INT 18
22386: PUSH
22387: LD_INT 19
22389: PUSH
22390: LD_INT 20
22392: PUSH
22393: LD_INT 21
22395: PUSH
22396: LD_INT 22
22398: PUSH
22399: LD_INT 23
22401: PUSH
22402: LD_INT 24
22404: PUSH
22405: LD_INT 25
22407: PUSH
22408: LD_INT 26
22410: PUSH
22411: LD_INT 27
22413: PUSH
22414: LD_INT 28
22416: PUSH
22417: LD_INT 29
22419: PUSH
22420: LD_INT 30
22422: PUSH
22423: LD_INT 31
22425: PUSH
22426: LD_INT 32
22428: PUSH
22429: LD_INT 33
22431: PUSH
22432: LD_INT 34
22434: PUSH
22435: LD_INT 36
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: PUSH
22475: LD_INT 101
22477: PUSH
22478: LD_INT 102
22480: PUSH
22481: LD_INT 103
22483: PUSH
22484: LD_INT 104
22486: PUSH
22487: LD_INT 105
22489: PUSH
22490: LD_INT 106
22492: PUSH
22493: LD_INT 107
22495: PUSH
22496: LD_INT 108
22498: PUSH
22499: LD_INT 109
22501: PUSH
22502: LD_INT 110
22504: PUSH
22505: LD_INT 111
22507: PUSH
22508: LD_INT 112
22510: PUSH
22511: LD_INT 113
22513: PUSH
22514: LD_INT 114
22516: PUSH
22517: LD_INT 116
22519: PUSH
22520: LD_INT 117
22522: PUSH
22523: LD_INT 118
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: ST_TO_ADDR
22549: GO 23324
22551: LD_INT 16
22553: DOUBLE
22554: EQUAL
22555: IFTRUE 22559
22557: GO 22695
22559: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22560: LD_ADDR_VAR 0 1
22564: PUSH
22565: LD_INT 2
22567: PUSH
22568: LD_INT 4
22570: PUSH
22571: LD_INT 5
22573: PUSH
22574: LD_INT 7
22576: PUSH
22577: LD_INT 11
22579: PUSH
22580: LD_INT 12
22582: PUSH
22583: LD_INT 15
22585: PUSH
22586: LD_INT 16
22588: PUSH
22589: LD_INT 20
22591: PUSH
22592: LD_INT 21
22594: PUSH
22595: LD_INT 22
22597: PUSH
22598: LD_INT 23
22600: PUSH
22601: LD_INT 25
22603: PUSH
22604: LD_INT 26
22606: PUSH
22607: LD_INT 30
22609: PUSH
22610: LD_INT 31
22612: PUSH
22613: LD_INT 32
22615: PUSH
22616: LD_INT 33
22618: PUSH
22619: LD_INT 34
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 101
22645: PUSH
22646: LD_INT 102
22648: PUSH
22649: LD_INT 103
22651: PUSH
22652: LD_INT 106
22654: PUSH
22655: LD_INT 108
22657: PUSH
22658: LD_INT 112
22660: PUSH
22661: LD_INT 113
22663: PUSH
22664: LD_INT 114
22666: PUSH
22667: LD_INT 116
22669: PUSH
22670: LD_INT 117
22672: PUSH
22673: LD_INT 118
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: ST_TO_ADDR
22693: GO 23324
22695: LD_INT 17
22697: DOUBLE
22698: EQUAL
22699: IFTRUE 22703
22701: GO 22927
22703: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22704: LD_ADDR_VAR 0 1
22708: PUSH
22709: LD_INT 1
22711: PUSH
22712: LD_INT 2
22714: PUSH
22715: LD_INT 3
22717: PUSH
22718: LD_INT 4
22720: PUSH
22721: LD_INT 5
22723: PUSH
22724: LD_INT 6
22726: PUSH
22727: LD_INT 7
22729: PUSH
22730: LD_INT 8
22732: PUSH
22733: LD_INT 9
22735: PUSH
22736: LD_INT 10
22738: PUSH
22739: LD_INT 11
22741: PUSH
22742: LD_INT 12
22744: PUSH
22745: LD_INT 13
22747: PUSH
22748: LD_INT 14
22750: PUSH
22751: LD_INT 15
22753: PUSH
22754: LD_INT 16
22756: PUSH
22757: LD_INT 17
22759: PUSH
22760: LD_INT 18
22762: PUSH
22763: LD_INT 19
22765: PUSH
22766: LD_INT 20
22768: PUSH
22769: LD_INT 21
22771: PUSH
22772: LD_INT 22
22774: PUSH
22775: LD_INT 23
22777: PUSH
22778: LD_INT 24
22780: PUSH
22781: LD_INT 25
22783: PUSH
22784: LD_INT 26
22786: PUSH
22787: LD_INT 27
22789: PUSH
22790: LD_INT 28
22792: PUSH
22793: LD_INT 29
22795: PUSH
22796: LD_INT 30
22798: PUSH
22799: LD_INT 31
22801: PUSH
22802: LD_INT 32
22804: PUSH
22805: LD_INT 33
22807: PUSH
22808: LD_INT 34
22810: PUSH
22811: LD_INT 36
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: PUSH
22851: LD_INT 101
22853: PUSH
22854: LD_INT 102
22856: PUSH
22857: LD_INT 103
22859: PUSH
22860: LD_INT 104
22862: PUSH
22863: LD_INT 105
22865: PUSH
22866: LD_INT 106
22868: PUSH
22869: LD_INT 107
22871: PUSH
22872: LD_INT 108
22874: PUSH
22875: LD_INT 109
22877: PUSH
22878: LD_INT 110
22880: PUSH
22881: LD_INT 111
22883: PUSH
22884: LD_INT 112
22886: PUSH
22887: LD_INT 113
22889: PUSH
22890: LD_INT 114
22892: PUSH
22893: LD_INT 116
22895: PUSH
22896: LD_INT 117
22898: PUSH
22899: LD_INT 118
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: ST_TO_ADDR
22925: GO 23324
22927: LD_INT 18
22929: DOUBLE
22930: EQUAL
22931: IFTRUE 22935
22933: GO 23083
22935: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
22936: LD_ADDR_VAR 0 1
22940: PUSH
22941: LD_INT 2
22943: PUSH
22944: LD_INT 4
22946: PUSH
22947: LD_INT 5
22949: PUSH
22950: LD_INT 7
22952: PUSH
22953: LD_INT 11
22955: PUSH
22956: LD_INT 12
22958: PUSH
22959: LD_INT 15
22961: PUSH
22962: LD_INT 16
22964: PUSH
22965: LD_INT 20
22967: PUSH
22968: LD_INT 21
22970: PUSH
22971: LD_INT 22
22973: PUSH
22974: LD_INT 23
22976: PUSH
22977: LD_INT 25
22979: PUSH
22980: LD_INT 26
22982: PUSH
22983: LD_INT 30
22985: PUSH
22986: LD_INT 31
22988: PUSH
22989: LD_INT 32
22991: PUSH
22992: LD_INT 33
22994: PUSH
22995: LD_INT 34
22997: PUSH
22998: LD_INT 35
23000: PUSH
23001: LD_INT 36
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: PUSH
23027: LD_INT 101
23029: PUSH
23030: LD_INT 102
23032: PUSH
23033: LD_INT 103
23035: PUSH
23036: LD_INT 106
23038: PUSH
23039: LD_INT 108
23041: PUSH
23042: LD_INT 112
23044: PUSH
23045: LD_INT 113
23047: PUSH
23048: LD_INT 114
23050: PUSH
23051: LD_INT 115
23053: PUSH
23054: LD_INT 116
23056: PUSH
23057: LD_INT 117
23059: PUSH
23060: LD_INT 118
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: ST_TO_ADDR
23081: GO 23324
23083: LD_INT 19
23085: DOUBLE
23086: EQUAL
23087: IFTRUE 23091
23089: GO 23323
23091: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23092: LD_ADDR_VAR 0 1
23096: PUSH
23097: LD_INT 1
23099: PUSH
23100: LD_INT 2
23102: PUSH
23103: LD_INT 3
23105: PUSH
23106: LD_INT 4
23108: PUSH
23109: LD_INT 5
23111: PUSH
23112: LD_INT 6
23114: PUSH
23115: LD_INT 7
23117: PUSH
23118: LD_INT 8
23120: PUSH
23121: LD_INT 9
23123: PUSH
23124: LD_INT 10
23126: PUSH
23127: LD_INT 11
23129: PUSH
23130: LD_INT 12
23132: PUSH
23133: LD_INT 13
23135: PUSH
23136: LD_INT 14
23138: PUSH
23139: LD_INT 15
23141: PUSH
23142: LD_INT 16
23144: PUSH
23145: LD_INT 17
23147: PUSH
23148: LD_INT 18
23150: PUSH
23151: LD_INT 19
23153: PUSH
23154: LD_INT 20
23156: PUSH
23157: LD_INT 21
23159: PUSH
23160: LD_INT 22
23162: PUSH
23163: LD_INT 23
23165: PUSH
23166: LD_INT 24
23168: PUSH
23169: LD_INT 25
23171: PUSH
23172: LD_INT 26
23174: PUSH
23175: LD_INT 27
23177: PUSH
23178: LD_INT 28
23180: PUSH
23181: LD_INT 29
23183: PUSH
23184: LD_INT 30
23186: PUSH
23187: LD_INT 31
23189: PUSH
23190: LD_INT 32
23192: PUSH
23193: LD_INT 33
23195: PUSH
23196: LD_INT 34
23198: PUSH
23199: LD_INT 35
23201: PUSH
23202: LD_INT 36
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 101
23245: PUSH
23246: LD_INT 102
23248: PUSH
23249: LD_INT 103
23251: PUSH
23252: LD_INT 104
23254: PUSH
23255: LD_INT 105
23257: PUSH
23258: LD_INT 106
23260: PUSH
23261: LD_INT 107
23263: PUSH
23264: LD_INT 108
23266: PUSH
23267: LD_INT 109
23269: PUSH
23270: LD_INT 110
23272: PUSH
23273: LD_INT 111
23275: PUSH
23276: LD_INT 112
23278: PUSH
23279: LD_INT 113
23281: PUSH
23282: LD_INT 114
23284: PUSH
23285: LD_INT 115
23287: PUSH
23288: LD_INT 116
23290: PUSH
23291: LD_INT 117
23293: PUSH
23294: LD_INT 118
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: ST_TO_ADDR
23321: GO 23324
23323: POP
// end else
23324: GO 23555
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23326: LD_ADDR_VAR 0 1
23330: PUSH
23331: LD_INT 1
23333: PUSH
23334: LD_INT 2
23336: PUSH
23337: LD_INT 3
23339: PUSH
23340: LD_INT 4
23342: PUSH
23343: LD_INT 5
23345: PUSH
23346: LD_INT 6
23348: PUSH
23349: LD_INT 7
23351: PUSH
23352: LD_INT 8
23354: PUSH
23355: LD_INT 9
23357: PUSH
23358: LD_INT 10
23360: PUSH
23361: LD_INT 11
23363: PUSH
23364: LD_INT 12
23366: PUSH
23367: LD_INT 13
23369: PUSH
23370: LD_INT 14
23372: PUSH
23373: LD_INT 15
23375: PUSH
23376: LD_INT 16
23378: PUSH
23379: LD_INT 17
23381: PUSH
23382: LD_INT 18
23384: PUSH
23385: LD_INT 19
23387: PUSH
23388: LD_INT 20
23390: PUSH
23391: LD_INT 21
23393: PUSH
23394: LD_INT 22
23396: PUSH
23397: LD_INT 23
23399: PUSH
23400: LD_INT 24
23402: PUSH
23403: LD_INT 25
23405: PUSH
23406: LD_INT 26
23408: PUSH
23409: LD_INT 27
23411: PUSH
23412: LD_INT 28
23414: PUSH
23415: LD_INT 29
23417: PUSH
23418: LD_INT 30
23420: PUSH
23421: LD_INT 31
23423: PUSH
23424: LD_INT 32
23426: PUSH
23427: LD_INT 33
23429: PUSH
23430: LD_INT 34
23432: PUSH
23433: LD_INT 35
23435: PUSH
23436: LD_INT 36
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 101
23479: PUSH
23480: LD_INT 102
23482: PUSH
23483: LD_INT 103
23485: PUSH
23486: LD_INT 104
23488: PUSH
23489: LD_INT 105
23491: PUSH
23492: LD_INT 106
23494: PUSH
23495: LD_INT 107
23497: PUSH
23498: LD_INT 108
23500: PUSH
23501: LD_INT 109
23503: PUSH
23504: LD_INT 110
23506: PUSH
23507: LD_INT 111
23509: PUSH
23510: LD_INT 112
23512: PUSH
23513: LD_INT 113
23515: PUSH
23516: LD_INT 114
23518: PUSH
23519: LD_INT 115
23521: PUSH
23522: LD_INT 116
23524: PUSH
23525: LD_INT 117
23527: PUSH
23528: LD_INT 118
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: ST_TO_ADDR
// if result then
23555: LD_VAR 0 1
23559: IFFALSE 23848
// begin normal :=  ;
23561: LD_ADDR_VAR 0 3
23565: PUSH
23566: LD_STRING 
23568: ST_TO_ADDR
// hardcore :=  ;
23569: LD_ADDR_VAR 0 4
23573: PUSH
23574: LD_STRING 
23576: ST_TO_ADDR
// for i = 1 to normalCounter do
23577: LD_ADDR_VAR 0 5
23581: PUSH
23582: DOUBLE
23583: LD_INT 1
23585: DEC
23586: ST_TO_ADDR
23587: LD_EXP 76
23591: PUSH
23592: FOR_TO
23593: IFFALSE 23694
// begin tmp := 0 ;
23595: LD_ADDR_VAR 0 2
23599: PUSH
23600: LD_STRING 0
23602: ST_TO_ADDR
// if result [ 1 ] then
23603: LD_VAR 0 1
23607: PUSH
23608: LD_INT 1
23610: ARRAY
23611: IFFALSE 23676
// if result [ 1 ] [ 1 ] = i then
23613: LD_VAR 0 1
23617: PUSH
23618: LD_INT 1
23620: ARRAY
23621: PUSH
23622: LD_INT 1
23624: ARRAY
23625: PUSH
23626: LD_VAR 0 5
23630: EQUAL
23631: IFFALSE 23676
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23633: LD_ADDR_VAR 0 1
23637: PUSH
23638: LD_VAR 0 1
23642: PPUSH
23643: LD_INT 1
23645: PPUSH
23646: LD_VAR 0 1
23650: PUSH
23651: LD_INT 1
23653: ARRAY
23654: PPUSH
23655: LD_INT 1
23657: PPUSH
23658: CALL_OW 3
23662: PPUSH
23663: CALL_OW 1
23667: ST_TO_ADDR
// tmp := 1 ;
23668: LD_ADDR_VAR 0 2
23672: PUSH
23673: LD_STRING 1
23675: ST_TO_ADDR
// end ; normal := normal & tmp ;
23676: LD_ADDR_VAR 0 3
23680: PUSH
23681: LD_VAR 0 3
23685: PUSH
23686: LD_VAR 0 2
23690: STR
23691: ST_TO_ADDR
// end ;
23692: GO 23592
23694: POP
23695: POP
// for i = 1 to hardcoreCounter do
23696: LD_ADDR_VAR 0 5
23700: PUSH
23701: DOUBLE
23702: LD_INT 1
23704: DEC
23705: ST_TO_ADDR
23706: LD_EXP 77
23710: PUSH
23711: FOR_TO
23712: IFFALSE 23817
// begin tmp := 0 ;
23714: LD_ADDR_VAR 0 2
23718: PUSH
23719: LD_STRING 0
23721: ST_TO_ADDR
// if result [ 2 ] then
23722: LD_VAR 0 1
23726: PUSH
23727: LD_INT 2
23729: ARRAY
23730: IFFALSE 23799
// if result [ 2 ] [ 1 ] = 100 + i then
23732: LD_VAR 0 1
23736: PUSH
23737: LD_INT 2
23739: ARRAY
23740: PUSH
23741: LD_INT 1
23743: ARRAY
23744: PUSH
23745: LD_INT 100
23747: PUSH
23748: LD_VAR 0 5
23752: PLUS
23753: EQUAL
23754: IFFALSE 23799
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23756: LD_ADDR_VAR 0 1
23760: PUSH
23761: LD_VAR 0 1
23765: PPUSH
23766: LD_INT 2
23768: PPUSH
23769: LD_VAR 0 1
23773: PUSH
23774: LD_INT 2
23776: ARRAY
23777: PPUSH
23778: LD_INT 1
23780: PPUSH
23781: CALL_OW 3
23785: PPUSH
23786: CALL_OW 1
23790: ST_TO_ADDR
// tmp := 1 ;
23791: LD_ADDR_VAR 0 2
23795: PUSH
23796: LD_STRING 1
23798: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23799: LD_ADDR_VAR 0 4
23803: PUSH
23804: LD_VAR 0 4
23808: PUSH
23809: LD_VAR 0 2
23813: STR
23814: ST_TO_ADDR
// end ;
23815: GO 23711
23817: POP
23818: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23819: LD_STRING getStreamItemsFromMission("
23821: PUSH
23822: LD_VAR 0 3
23826: STR
23827: PUSH
23828: LD_STRING ","
23830: STR
23831: PUSH
23832: LD_VAR 0 4
23836: STR
23837: PUSH
23838: LD_STRING ")
23840: STR
23841: PPUSH
23842: CALL_OW 559
// end else
23846: GO 23855
// ToLua ( getStreamItemsFromMission("","") ) ;
23848: LD_STRING getStreamItemsFromMission("","")
23850: PPUSH
23851: CALL_OW 559
// end ;
23855: LD_VAR 0 1
23859: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23860: LD_EXP 75
23864: PUSH
23865: LD_EXP 80
23869: AND
23870: IFFALSE 23994
23872: GO 23874
23874: DISABLE
23875: LD_INT 0
23877: PPUSH
23878: PPUSH
// begin enable ;
23879: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23880: LD_ADDR_VAR 0 2
23884: PUSH
23885: LD_INT 22
23887: PUSH
23888: LD_OWVAR 2
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: LD_INT 2
23899: PUSH
23900: LD_INT 34
23902: PUSH
23903: LD_INT 7
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 34
23912: PUSH
23913: LD_INT 45
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: LD_INT 34
23922: PUSH
23923: LD_INT 28
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 34
23932: PUSH
23933: LD_INT 47
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PPUSH
23951: CALL_OW 69
23955: ST_TO_ADDR
// if not tmp then
23956: LD_VAR 0 2
23960: NOT
23961: IFFALSE 23965
// exit ;
23963: GO 23994
// for i in tmp do
23965: LD_ADDR_VAR 0 1
23969: PUSH
23970: LD_VAR 0 2
23974: PUSH
23975: FOR_IN
23976: IFFALSE 23992
// begin SetLives ( i , 0 ) ;
23978: LD_VAR 0 1
23982: PPUSH
23983: LD_INT 0
23985: PPUSH
23986: CALL_OW 234
// end ;
23990: GO 23975
23992: POP
23993: POP
// end ;
23994: PPOPN 2
23996: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23997: LD_EXP 75
24001: PUSH
24002: LD_EXP 81
24006: AND
24007: IFFALSE 24091
24009: GO 24011
24011: DISABLE
24012: LD_INT 0
24014: PPUSH
24015: PPUSH
// begin enable ;
24016: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24017: LD_ADDR_VAR 0 2
24021: PUSH
24022: LD_INT 22
24024: PUSH
24025: LD_OWVAR 2
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 32
24036: PUSH
24037: LD_INT 3
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PPUSH
24048: CALL_OW 69
24052: ST_TO_ADDR
// if not tmp then
24053: LD_VAR 0 2
24057: NOT
24058: IFFALSE 24062
// exit ;
24060: GO 24091
// for i in tmp do
24062: LD_ADDR_VAR 0 1
24066: PUSH
24067: LD_VAR 0 2
24071: PUSH
24072: FOR_IN
24073: IFFALSE 24089
// begin SetLives ( i , 0 ) ;
24075: LD_VAR 0 1
24079: PPUSH
24080: LD_INT 0
24082: PPUSH
24083: CALL_OW 234
// end ;
24087: GO 24072
24089: POP
24090: POP
// end ;
24091: PPOPN 2
24093: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24094: LD_EXP 75
24098: PUSH
24099: LD_EXP 78
24103: AND
24104: IFFALSE 24197
24106: GO 24108
24108: DISABLE
24109: LD_INT 0
24111: PPUSH
// begin enable ;
24112: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24113: LD_ADDR_VAR 0 1
24117: PUSH
24118: LD_INT 22
24120: PUSH
24121: LD_OWVAR 2
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 2
24132: PUSH
24133: LD_INT 25
24135: PUSH
24136: LD_INT 5
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 25
24145: PUSH
24146: LD_INT 9
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: LD_INT 25
24155: PUSH
24156: LD_INT 8
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PPUSH
24173: CALL_OW 69
24177: PUSH
24178: FOR_IN
24179: IFFALSE 24195
// begin SetClass ( i , 1 ) ;
24181: LD_VAR 0 1
24185: PPUSH
24186: LD_INT 1
24188: PPUSH
24189: CALL_OW 336
// end ;
24193: GO 24178
24195: POP
24196: POP
// end ;
24197: PPOPN 1
24199: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24200: LD_EXP 75
24204: PUSH
24205: LD_EXP 79
24209: AND
24210: PUSH
24211: LD_OWVAR 65
24215: PUSH
24216: LD_INT 7
24218: LESS
24219: AND
24220: IFFALSE 24234
24222: GO 24224
24224: DISABLE
// begin enable ;
24225: ENABLE
// game_speed := 7 ;
24226: LD_ADDR_OWVAR 65
24230: PUSH
24231: LD_INT 7
24233: ST_TO_ADDR
// end ;
24234: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24235: LD_EXP 75
24239: PUSH
24240: LD_EXP 82
24244: AND
24245: IFFALSE 24447
24247: GO 24249
24249: DISABLE
24250: LD_INT 0
24252: PPUSH
24253: PPUSH
24254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24255: LD_ADDR_VAR 0 3
24259: PUSH
24260: LD_INT 81
24262: PUSH
24263: LD_OWVAR 2
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 21
24274: PUSH
24275: LD_INT 1
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PPUSH
24286: CALL_OW 69
24290: ST_TO_ADDR
// if not tmp then
24291: LD_VAR 0 3
24295: NOT
24296: IFFALSE 24300
// exit ;
24298: GO 24447
// if tmp > 5 then
24300: LD_VAR 0 3
24304: PUSH
24305: LD_INT 5
24307: GREATER
24308: IFFALSE 24320
// k := 5 else
24310: LD_ADDR_VAR 0 2
24314: PUSH
24315: LD_INT 5
24317: ST_TO_ADDR
24318: GO 24330
// k := tmp ;
24320: LD_ADDR_VAR 0 2
24324: PUSH
24325: LD_VAR 0 3
24329: ST_TO_ADDR
// for i := 1 to k do
24330: LD_ADDR_VAR 0 1
24334: PUSH
24335: DOUBLE
24336: LD_INT 1
24338: DEC
24339: ST_TO_ADDR
24340: LD_VAR 0 2
24344: PUSH
24345: FOR_TO
24346: IFFALSE 24445
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24348: LD_VAR 0 3
24352: PUSH
24353: LD_VAR 0 1
24357: ARRAY
24358: PPUSH
24359: LD_VAR 0 1
24363: PUSH
24364: LD_INT 4
24366: MOD
24367: PUSH
24368: LD_INT 1
24370: PLUS
24371: PPUSH
24372: CALL_OW 259
24376: PUSH
24377: LD_INT 10
24379: LESS
24380: IFFALSE 24443
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24382: LD_VAR 0 3
24386: PUSH
24387: LD_VAR 0 1
24391: ARRAY
24392: PPUSH
24393: LD_VAR 0 1
24397: PUSH
24398: LD_INT 4
24400: MOD
24401: PUSH
24402: LD_INT 1
24404: PLUS
24405: PPUSH
24406: LD_VAR 0 3
24410: PUSH
24411: LD_VAR 0 1
24415: ARRAY
24416: PPUSH
24417: LD_VAR 0 1
24421: PUSH
24422: LD_INT 4
24424: MOD
24425: PUSH
24426: LD_INT 1
24428: PLUS
24429: PPUSH
24430: CALL_OW 259
24434: PUSH
24435: LD_INT 1
24437: PLUS
24438: PPUSH
24439: CALL_OW 237
24443: GO 24345
24445: POP
24446: POP
// end ;
24447: PPOPN 3
24449: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24450: LD_EXP 75
24454: PUSH
24455: LD_EXP 83
24459: AND
24460: IFFALSE 24480
24462: GO 24464
24464: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24465: LD_INT 4
24467: PPUSH
24468: LD_OWVAR 2
24472: PPUSH
24473: LD_INT 0
24475: PPUSH
24476: CALL_OW 324
24480: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24481: LD_EXP 75
24485: PUSH
24486: LD_EXP 112
24490: AND
24491: IFFALSE 24511
24493: GO 24495
24495: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24496: LD_INT 19
24498: PPUSH
24499: LD_OWVAR 2
24503: PPUSH
24504: LD_INT 0
24506: PPUSH
24507: CALL_OW 324
24511: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24512: LD_EXP 75
24516: PUSH
24517: LD_EXP 84
24521: AND
24522: IFFALSE 24624
24524: GO 24526
24526: DISABLE
24527: LD_INT 0
24529: PPUSH
24530: PPUSH
// begin enable ;
24531: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24532: LD_ADDR_VAR 0 2
24536: PUSH
24537: LD_INT 22
24539: PUSH
24540: LD_OWVAR 2
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 2
24551: PUSH
24552: LD_INT 34
24554: PUSH
24555: LD_INT 11
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PUSH
24562: LD_INT 34
24564: PUSH
24565: LD_INT 30
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: LIST
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PPUSH
24581: CALL_OW 69
24585: ST_TO_ADDR
// if not tmp then
24586: LD_VAR 0 2
24590: NOT
24591: IFFALSE 24595
// exit ;
24593: GO 24624
// for i in tmp do
24595: LD_ADDR_VAR 0 1
24599: PUSH
24600: LD_VAR 0 2
24604: PUSH
24605: FOR_IN
24606: IFFALSE 24622
// begin SetLives ( i , 0 ) ;
24608: LD_VAR 0 1
24612: PPUSH
24613: LD_INT 0
24615: PPUSH
24616: CALL_OW 234
// end ;
24620: GO 24605
24622: POP
24623: POP
// end ;
24624: PPOPN 2
24626: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24627: LD_EXP 75
24631: PUSH
24632: LD_EXP 85
24636: AND
24637: IFFALSE 24657
24639: GO 24641
24641: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24642: LD_INT 32
24644: PPUSH
24645: LD_OWVAR 2
24649: PPUSH
24650: LD_INT 0
24652: PPUSH
24653: CALL_OW 324
24657: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24658: LD_EXP 75
24662: PUSH
24663: LD_EXP 86
24667: AND
24668: IFFALSE 24849
24670: GO 24672
24672: DISABLE
24673: LD_INT 0
24675: PPUSH
24676: PPUSH
24677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24678: LD_ADDR_VAR 0 2
24682: PUSH
24683: LD_INT 22
24685: PUSH
24686: LD_OWVAR 2
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 33
24697: PUSH
24698: LD_INT 3
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PPUSH
24709: CALL_OW 69
24713: ST_TO_ADDR
// if not tmp then
24714: LD_VAR 0 2
24718: NOT
24719: IFFALSE 24723
// exit ;
24721: GO 24849
// side := 0 ;
24723: LD_ADDR_VAR 0 3
24727: PUSH
24728: LD_INT 0
24730: ST_TO_ADDR
// for i := 1 to 8 do
24731: LD_ADDR_VAR 0 1
24735: PUSH
24736: DOUBLE
24737: LD_INT 1
24739: DEC
24740: ST_TO_ADDR
24741: LD_INT 8
24743: PUSH
24744: FOR_TO
24745: IFFALSE 24793
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24747: LD_OWVAR 2
24751: PUSH
24752: LD_VAR 0 1
24756: NONEQUAL
24757: PUSH
24758: LD_OWVAR 2
24762: PPUSH
24763: LD_VAR 0 1
24767: PPUSH
24768: CALL_OW 81
24772: PUSH
24773: LD_INT 2
24775: EQUAL
24776: AND
24777: IFFALSE 24791
// begin side := i ;
24779: LD_ADDR_VAR 0 3
24783: PUSH
24784: LD_VAR 0 1
24788: ST_TO_ADDR
// break ;
24789: GO 24793
// end ;
24791: GO 24744
24793: POP
24794: POP
// if not side then
24795: LD_VAR 0 3
24799: NOT
24800: IFFALSE 24804
// exit ;
24802: GO 24849
// for i := 1 to tmp do
24804: LD_ADDR_VAR 0 1
24808: PUSH
24809: DOUBLE
24810: LD_INT 1
24812: DEC
24813: ST_TO_ADDR
24814: LD_VAR 0 2
24818: PUSH
24819: FOR_TO
24820: IFFALSE 24847
// if Prob ( 60 ) then
24822: LD_INT 60
24824: PPUSH
24825: CALL_OW 13
24829: IFFALSE 24845
// SetSide ( i , side ) ;
24831: LD_VAR 0 1
24835: PPUSH
24836: LD_VAR 0 3
24840: PPUSH
24841: CALL_OW 235
24845: GO 24819
24847: POP
24848: POP
// end ;
24849: PPOPN 3
24851: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24852: LD_EXP 75
24856: PUSH
24857: LD_EXP 88
24861: AND
24862: IFFALSE 24981
24864: GO 24866
24866: DISABLE
24867: LD_INT 0
24869: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24870: LD_ADDR_VAR 0 1
24874: PUSH
24875: LD_INT 22
24877: PUSH
24878: LD_OWVAR 2
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 21
24889: PUSH
24890: LD_INT 1
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 3
24899: PUSH
24900: LD_INT 23
24902: PUSH
24903: LD_INT 0
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: LIST
24918: PPUSH
24919: CALL_OW 69
24923: PUSH
24924: FOR_IN
24925: IFFALSE 24979
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24927: LD_VAR 0 1
24931: PPUSH
24932: CALL_OW 257
24936: PUSH
24937: LD_INT 1
24939: PUSH
24940: LD_INT 2
24942: PUSH
24943: LD_INT 3
24945: PUSH
24946: LD_INT 4
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: IN
24955: IFFALSE 24977
// SetClass ( un , rand ( 1 , 4 ) ) ;
24957: LD_VAR 0 1
24961: PPUSH
24962: LD_INT 1
24964: PPUSH
24965: LD_INT 4
24967: PPUSH
24968: CALL_OW 12
24972: PPUSH
24973: CALL_OW 336
24977: GO 24924
24979: POP
24980: POP
// end ;
24981: PPOPN 1
24983: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24984: LD_EXP 75
24988: PUSH
24989: LD_EXP 87
24993: AND
24994: IFFALSE 25073
24996: GO 24998
24998: DISABLE
24999: LD_INT 0
25001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25002: LD_ADDR_VAR 0 1
25006: PUSH
25007: LD_INT 22
25009: PUSH
25010: LD_OWVAR 2
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: LD_INT 21
25021: PUSH
25022: LD_INT 3
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PPUSH
25033: CALL_OW 69
25037: ST_TO_ADDR
// if not tmp then
25038: LD_VAR 0 1
25042: NOT
25043: IFFALSE 25047
// exit ;
25045: GO 25073
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25047: LD_VAR 0 1
25051: PUSH
25052: LD_INT 1
25054: PPUSH
25055: LD_VAR 0 1
25059: PPUSH
25060: CALL_OW 12
25064: ARRAY
25065: PPUSH
25066: LD_INT 100
25068: PPUSH
25069: CALL_OW 234
// end ;
25073: PPOPN 1
25075: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25076: LD_EXP 75
25080: PUSH
25081: LD_EXP 89
25085: AND
25086: IFFALSE 25184
25088: GO 25090
25090: DISABLE
25091: LD_INT 0
25093: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25094: LD_ADDR_VAR 0 1
25098: PUSH
25099: LD_INT 22
25101: PUSH
25102: LD_OWVAR 2
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 21
25113: PUSH
25114: LD_INT 1
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PPUSH
25125: CALL_OW 69
25129: ST_TO_ADDR
// if not tmp then
25130: LD_VAR 0 1
25134: NOT
25135: IFFALSE 25139
// exit ;
25137: GO 25184
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25139: LD_VAR 0 1
25143: PUSH
25144: LD_INT 1
25146: PPUSH
25147: LD_VAR 0 1
25151: PPUSH
25152: CALL_OW 12
25156: ARRAY
25157: PPUSH
25158: LD_INT 1
25160: PPUSH
25161: LD_INT 4
25163: PPUSH
25164: CALL_OW 12
25168: PPUSH
25169: LD_INT 3000
25171: PPUSH
25172: LD_INT 9000
25174: PPUSH
25175: CALL_OW 12
25179: PPUSH
25180: CALL_OW 492
// end ;
25184: PPOPN 1
25186: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25187: LD_EXP 75
25191: PUSH
25192: LD_EXP 90
25196: AND
25197: IFFALSE 25217
25199: GO 25201
25201: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25202: LD_INT 1
25204: PPUSH
25205: LD_OWVAR 2
25209: PPUSH
25210: LD_INT 0
25212: PPUSH
25213: CALL_OW 324
25217: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25218: LD_EXP 75
25222: PUSH
25223: LD_EXP 91
25227: AND
25228: IFFALSE 25311
25230: GO 25232
25232: DISABLE
25233: LD_INT 0
25235: PPUSH
25236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25237: LD_ADDR_VAR 0 2
25241: PUSH
25242: LD_INT 22
25244: PUSH
25245: LD_OWVAR 2
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: LD_INT 21
25256: PUSH
25257: LD_INT 3
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PPUSH
25268: CALL_OW 69
25272: ST_TO_ADDR
// if not tmp then
25273: LD_VAR 0 2
25277: NOT
25278: IFFALSE 25282
// exit ;
25280: GO 25311
// for i in tmp do
25282: LD_ADDR_VAR 0 1
25286: PUSH
25287: LD_VAR 0 2
25291: PUSH
25292: FOR_IN
25293: IFFALSE 25309
// SetBLevel ( i , 10 ) ;
25295: LD_VAR 0 1
25299: PPUSH
25300: LD_INT 10
25302: PPUSH
25303: CALL_OW 241
25307: GO 25292
25309: POP
25310: POP
// end ;
25311: PPOPN 2
25313: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25314: LD_EXP 75
25318: PUSH
25319: LD_EXP 92
25323: AND
25324: IFFALSE 25435
25326: GO 25328
25328: DISABLE
25329: LD_INT 0
25331: PPUSH
25332: PPUSH
25333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25334: LD_ADDR_VAR 0 3
25338: PUSH
25339: LD_INT 22
25341: PUSH
25342: LD_OWVAR 2
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 25
25353: PUSH
25354: LD_INT 1
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PPUSH
25365: CALL_OW 69
25369: ST_TO_ADDR
// if not tmp then
25370: LD_VAR 0 3
25374: NOT
25375: IFFALSE 25379
// exit ;
25377: GO 25435
// un := tmp [ rand ( 1 , tmp ) ] ;
25379: LD_ADDR_VAR 0 2
25383: PUSH
25384: LD_VAR 0 3
25388: PUSH
25389: LD_INT 1
25391: PPUSH
25392: LD_VAR 0 3
25396: PPUSH
25397: CALL_OW 12
25401: ARRAY
25402: ST_TO_ADDR
// if Crawls ( un ) then
25403: LD_VAR 0 2
25407: PPUSH
25408: CALL_OW 318
25412: IFFALSE 25423
// ComWalk ( un ) ;
25414: LD_VAR 0 2
25418: PPUSH
25419: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25423: LD_VAR 0 2
25427: PPUSH
25428: LD_INT 5
25430: PPUSH
25431: CALL_OW 336
// end ;
25435: PPOPN 3
25437: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25438: LD_EXP 75
25442: PUSH
25443: LD_EXP 93
25447: AND
25448: PUSH
25449: LD_OWVAR 67
25453: PUSH
25454: LD_INT 4
25456: LESS
25457: AND
25458: IFFALSE 25477
25460: GO 25462
25462: DISABLE
// begin Difficulty := Difficulty + 1 ;
25463: LD_ADDR_OWVAR 67
25467: PUSH
25468: LD_OWVAR 67
25472: PUSH
25473: LD_INT 1
25475: PLUS
25476: ST_TO_ADDR
// end ;
25477: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25478: LD_EXP 75
25482: PUSH
25483: LD_EXP 94
25487: AND
25488: IFFALSE 25591
25490: GO 25492
25492: DISABLE
25493: LD_INT 0
25495: PPUSH
// begin for i := 1 to 5 do
25496: LD_ADDR_VAR 0 1
25500: PUSH
25501: DOUBLE
25502: LD_INT 1
25504: DEC
25505: ST_TO_ADDR
25506: LD_INT 5
25508: PUSH
25509: FOR_TO
25510: IFFALSE 25589
// begin uc_nation := nation_nature ;
25512: LD_ADDR_OWVAR 21
25516: PUSH
25517: LD_INT 0
25519: ST_TO_ADDR
// uc_side := 0 ;
25520: LD_ADDR_OWVAR 20
25524: PUSH
25525: LD_INT 0
25527: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25528: LD_ADDR_OWVAR 29
25532: PUSH
25533: LD_INT 12
25535: PUSH
25536: LD_INT 12
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: ST_TO_ADDR
// hc_agressivity := 20 ;
25543: LD_ADDR_OWVAR 35
25547: PUSH
25548: LD_INT 20
25550: ST_TO_ADDR
// hc_class := class_tiger ;
25551: LD_ADDR_OWVAR 28
25555: PUSH
25556: LD_INT 14
25558: ST_TO_ADDR
// hc_gallery :=  ;
25559: LD_ADDR_OWVAR 33
25563: PUSH
25564: LD_STRING 
25566: ST_TO_ADDR
// hc_name :=  ;
25567: LD_ADDR_OWVAR 26
25571: PUSH
25572: LD_STRING 
25574: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25575: CALL_OW 44
25579: PPUSH
25580: LD_INT 0
25582: PPUSH
25583: CALL_OW 51
// end ;
25587: GO 25509
25589: POP
25590: POP
// end ;
25591: PPOPN 1
25593: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25594: LD_EXP 75
25598: PUSH
25599: LD_EXP 95
25603: AND
25604: IFFALSE 25613
25606: GO 25608
25608: DISABLE
// StreamSibBomb ;
25609: CALL 25614 0 0
25613: END
// export function StreamSibBomb ; var i , x , y ; begin
25614: LD_INT 0
25616: PPUSH
25617: PPUSH
25618: PPUSH
25619: PPUSH
// result := false ;
25620: LD_ADDR_VAR 0 1
25624: PUSH
25625: LD_INT 0
25627: ST_TO_ADDR
// for i := 1 to 16 do
25628: LD_ADDR_VAR 0 2
25632: PUSH
25633: DOUBLE
25634: LD_INT 1
25636: DEC
25637: ST_TO_ADDR
25638: LD_INT 16
25640: PUSH
25641: FOR_TO
25642: IFFALSE 25841
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25644: LD_ADDR_VAR 0 3
25648: PUSH
25649: LD_INT 10
25651: PUSH
25652: LD_INT 20
25654: PUSH
25655: LD_INT 30
25657: PUSH
25658: LD_INT 40
25660: PUSH
25661: LD_INT 50
25663: PUSH
25664: LD_INT 60
25666: PUSH
25667: LD_INT 70
25669: PUSH
25670: LD_INT 80
25672: PUSH
25673: LD_INT 90
25675: PUSH
25676: LD_INT 100
25678: PUSH
25679: LD_INT 110
25681: PUSH
25682: LD_INT 120
25684: PUSH
25685: LD_INT 130
25687: PUSH
25688: LD_INT 140
25690: PUSH
25691: LD_INT 150
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 1
25713: PPUSH
25714: LD_INT 15
25716: PPUSH
25717: CALL_OW 12
25721: ARRAY
25722: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25723: LD_ADDR_VAR 0 4
25727: PUSH
25728: LD_INT 10
25730: PUSH
25731: LD_INT 20
25733: PUSH
25734: LD_INT 30
25736: PUSH
25737: LD_INT 40
25739: PUSH
25740: LD_INT 50
25742: PUSH
25743: LD_INT 60
25745: PUSH
25746: LD_INT 70
25748: PUSH
25749: LD_INT 80
25751: PUSH
25752: LD_INT 90
25754: PUSH
25755: LD_INT 100
25757: PUSH
25758: LD_INT 110
25760: PUSH
25761: LD_INT 120
25763: PUSH
25764: LD_INT 130
25766: PUSH
25767: LD_INT 140
25769: PUSH
25770: LD_INT 150
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 1
25792: PPUSH
25793: LD_INT 15
25795: PPUSH
25796: CALL_OW 12
25800: ARRAY
25801: ST_TO_ADDR
// if ValidHex ( x , y ) then
25802: LD_VAR 0 3
25806: PPUSH
25807: LD_VAR 0 4
25811: PPUSH
25812: CALL_OW 488
25816: IFFALSE 25839
// begin result := [ x , y ] ;
25818: LD_ADDR_VAR 0 1
25822: PUSH
25823: LD_VAR 0 3
25827: PUSH
25828: LD_VAR 0 4
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: ST_TO_ADDR
// break ;
25837: GO 25841
// end ; end ;
25839: GO 25641
25841: POP
25842: POP
// if result then
25843: LD_VAR 0 1
25847: IFFALSE 25907
// begin ToLua ( playSibBomb() ) ;
25849: LD_STRING playSibBomb()
25851: PPUSH
25852: CALL_OW 559
// wait ( 0 0$14 ) ;
25856: LD_INT 490
25858: PPUSH
25859: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25863: LD_VAR 0 1
25867: PUSH
25868: LD_INT 1
25870: ARRAY
25871: PPUSH
25872: LD_VAR 0 1
25876: PUSH
25877: LD_INT 2
25879: ARRAY
25880: PPUSH
25881: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25885: LD_VAR 0 1
25889: PUSH
25890: LD_INT 1
25892: ARRAY
25893: PPUSH
25894: LD_VAR 0 1
25898: PUSH
25899: LD_INT 2
25901: ARRAY
25902: PPUSH
25903: CALL_OW 429
// end ; end ;
25907: LD_VAR 0 1
25911: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25912: LD_EXP 75
25916: PUSH
25917: LD_EXP 97
25921: AND
25922: IFFALSE 25934
25924: GO 25926
25926: DISABLE
// YouLost (  ) ;
25927: LD_STRING 
25929: PPUSH
25930: CALL_OW 104
25934: END
// every 0 0$1 trigger StreamModeActive and sFog do
25935: LD_EXP 75
25939: PUSH
25940: LD_EXP 96
25944: AND
25945: IFFALSE 25959
25947: GO 25949
25949: DISABLE
// FogOff ( your_side ) ;
25950: LD_OWVAR 2
25954: PPUSH
25955: CALL_OW 344
25959: END
// every 0 0$1 trigger StreamModeActive and sSun do
25960: LD_EXP 75
25964: PUSH
25965: LD_EXP 98
25969: AND
25970: IFFALSE 25998
25972: GO 25974
25974: DISABLE
// begin solar_recharge_percent := 0 ;
25975: LD_ADDR_OWVAR 79
25979: PUSH
25980: LD_INT 0
25982: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25983: LD_INT 10500
25985: PPUSH
25986: CALL_OW 67
// solar_recharge_percent := 100 ;
25990: LD_ADDR_OWVAR 79
25994: PUSH
25995: LD_INT 100
25997: ST_TO_ADDR
// end ;
25998: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25999: LD_EXP 75
26003: PUSH
26004: LD_EXP 99
26008: AND
26009: IFFALSE 26248
26011: GO 26013
26013: DISABLE
26014: LD_INT 0
26016: PPUSH
26017: PPUSH
26018: PPUSH
// begin tmp := [ ] ;
26019: LD_ADDR_VAR 0 3
26023: PUSH
26024: EMPTY
26025: ST_TO_ADDR
// for i := 1 to 6 do
26026: LD_ADDR_VAR 0 1
26030: PUSH
26031: DOUBLE
26032: LD_INT 1
26034: DEC
26035: ST_TO_ADDR
26036: LD_INT 6
26038: PUSH
26039: FOR_TO
26040: IFFALSE 26145
// begin uc_nation := nation_nature ;
26042: LD_ADDR_OWVAR 21
26046: PUSH
26047: LD_INT 0
26049: ST_TO_ADDR
// uc_side := 0 ;
26050: LD_ADDR_OWVAR 20
26054: PUSH
26055: LD_INT 0
26057: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26058: LD_ADDR_OWVAR 29
26062: PUSH
26063: LD_INT 12
26065: PUSH
26066: LD_INT 12
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: ST_TO_ADDR
// hc_agressivity := 20 ;
26073: LD_ADDR_OWVAR 35
26077: PUSH
26078: LD_INT 20
26080: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26081: LD_ADDR_OWVAR 28
26085: PUSH
26086: LD_INT 17
26088: ST_TO_ADDR
// hc_gallery :=  ;
26089: LD_ADDR_OWVAR 33
26093: PUSH
26094: LD_STRING 
26096: ST_TO_ADDR
// hc_name :=  ;
26097: LD_ADDR_OWVAR 26
26101: PUSH
26102: LD_STRING 
26104: ST_TO_ADDR
// un := CreateHuman ;
26105: LD_ADDR_VAR 0 2
26109: PUSH
26110: CALL_OW 44
26114: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26115: LD_VAR 0 2
26119: PPUSH
26120: LD_INT 1
26122: PPUSH
26123: CALL_OW 51
// tmp := tmp ^ un ;
26127: LD_ADDR_VAR 0 3
26131: PUSH
26132: LD_VAR 0 3
26136: PUSH
26137: LD_VAR 0 2
26141: ADD
26142: ST_TO_ADDR
// end ;
26143: GO 26039
26145: POP
26146: POP
// repeat wait ( 0 0$1 ) ;
26147: LD_INT 35
26149: PPUSH
26150: CALL_OW 67
// for un in tmp do
26154: LD_ADDR_VAR 0 2
26158: PUSH
26159: LD_VAR 0 3
26163: PUSH
26164: FOR_IN
26165: IFFALSE 26239
// begin if IsDead ( un ) then
26167: LD_VAR 0 2
26171: PPUSH
26172: CALL_OW 301
26176: IFFALSE 26196
// begin tmp := tmp diff un ;
26178: LD_ADDR_VAR 0 3
26182: PUSH
26183: LD_VAR 0 3
26187: PUSH
26188: LD_VAR 0 2
26192: DIFF
26193: ST_TO_ADDR
// continue ;
26194: GO 26164
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26196: LD_VAR 0 2
26200: PPUSH
26201: LD_INT 3
26203: PUSH
26204: LD_INT 22
26206: PUSH
26207: LD_INT 0
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PPUSH
26218: CALL_OW 69
26222: PPUSH
26223: LD_VAR 0 2
26227: PPUSH
26228: CALL_OW 74
26232: PPUSH
26233: CALL_OW 115
// end ;
26237: GO 26164
26239: POP
26240: POP
// until not tmp ;
26241: LD_VAR 0 3
26245: NOT
26246: IFFALSE 26147
// end ;
26248: PPOPN 3
26250: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26251: LD_EXP 75
26255: PUSH
26256: LD_EXP 100
26260: AND
26261: IFFALSE 26315
26263: GO 26265
26265: DISABLE
// begin ToLua ( displayTroll(); ) ;
26266: LD_STRING displayTroll();
26268: PPUSH
26269: CALL_OW 559
// wait ( 3 3$00 ) ;
26273: LD_INT 6300
26275: PPUSH
26276: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26280: LD_STRING hideTroll();
26282: PPUSH
26283: CALL_OW 559
// wait ( 1 1$00 ) ;
26287: LD_INT 2100
26289: PPUSH
26290: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26294: LD_STRING displayTroll();
26296: PPUSH
26297: CALL_OW 559
// wait ( 1 1$00 ) ;
26301: LD_INT 2100
26303: PPUSH
26304: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26308: LD_STRING hideTroll();
26310: PPUSH
26311: CALL_OW 559
// end ;
26315: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26316: LD_EXP 75
26320: PUSH
26321: LD_EXP 101
26325: AND
26326: IFFALSE 26389
26328: GO 26330
26330: DISABLE
26331: LD_INT 0
26333: PPUSH
// begin p := 0 ;
26334: LD_ADDR_VAR 0 1
26338: PUSH
26339: LD_INT 0
26341: ST_TO_ADDR
// repeat game_speed := 1 ;
26342: LD_ADDR_OWVAR 65
26346: PUSH
26347: LD_INT 1
26349: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26350: LD_INT 35
26352: PPUSH
26353: CALL_OW 67
// p := p + 1 ;
26357: LD_ADDR_VAR 0 1
26361: PUSH
26362: LD_VAR 0 1
26366: PUSH
26367: LD_INT 1
26369: PLUS
26370: ST_TO_ADDR
// until p >= 60 ;
26371: LD_VAR 0 1
26375: PUSH
26376: LD_INT 60
26378: GREATEREQUAL
26379: IFFALSE 26342
// game_speed := 4 ;
26381: LD_ADDR_OWVAR 65
26385: PUSH
26386: LD_INT 4
26388: ST_TO_ADDR
// end ;
26389: PPOPN 1
26391: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26392: LD_EXP 75
26396: PUSH
26397: LD_EXP 102
26401: AND
26402: IFFALSE 26548
26404: GO 26406
26406: DISABLE
26407: LD_INT 0
26409: PPUSH
26410: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26411: LD_ADDR_VAR 0 1
26415: PUSH
26416: LD_INT 22
26418: PUSH
26419: LD_OWVAR 2
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 2
26430: PUSH
26431: LD_INT 30
26433: PUSH
26434: LD_INT 0
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 30
26443: PUSH
26444: LD_INT 1
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: LIST
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PPUSH
26460: CALL_OW 69
26464: ST_TO_ADDR
// if not depot then
26465: LD_VAR 0 1
26469: NOT
26470: IFFALSE 26474
// exit ;
26472: GO 26548
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26474: LD_ADDR_VAR 0 2
26478: PUSH
26479: LD_VAR 0 1
26483: PUSH
26484: LD_INT 1
26486: PPUSH
26487: LD_VAR 0 1
26491: PPUSH
26492: CALL_OW 12
26496: ARRAY
26497: PPUSH
26498: CALL_OW 274
26502: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26503: LD_VAR 0 2
26507: PPUSH
26508: LD_INT 1
26510: PPUSH
26511: LD_INT 0
26513: PPUSH
26514: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26518: LD_VAR 0 2
26522: PPUSH
26523: LD_INT 2
26525: PPUSH
26526: LD_INT 0
26528: PPUSH
26529: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26533: LD_VAR 0 2
26537: PPUSH
26538: LD_INT 3
26540: PPUSH
26541: LD_INT 0
26543: PPUSH
26544: CALL_OW 277
// end ;
26548: PPOPN 2
26550: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26551: LD_EXP 75
26555: PUSH
26556: LD_EXP 103
26560: AND
26561: IFFALSE 26658
26563: GO 26565
26565: DISABLE
26566: LD_INT 0
26568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26569: LD_ADDR_VAR 0 1
26573: PUSH
26574: LD_INT 22
26576: PUSH
26577: LD_OWVAR 2
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: LD_INT 21
26588: PUSH
26589: LD_INT 1
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: LD_INT 3
26598: PUSH
26599: LD_INT 23
26601: PUSH
26602: LD_INT 0
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: LIST
26617: PPUSH
26618: CALL_OW 69
26622: ST_TO_ADDR
// if not tmp then
26623: LD_VAR 0 1
26627: NOT
26628: IFFALSE 26632
// exit ;
26630: GO 26658
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26632: LD_VAR 0 1
26636: PUSH
26637: LD_INT 1
26639: PPUSH
26640: LD_VAR 0 1
26644: PPUSH
26645: CALL_OW 12
26649: ARRAY
26650: PPUSH
26651: LD_INT 200
26653: PPUSH
26654: CALL_OW 234
// end ;
26658: PPOPN 1
26660: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26661: LD_EXP 75
26665: PUSH
26666: LD_EXP 104
26670: AND
26671: IFFALSE 26750
26673: GO 26675
26675: DISABLE
26676: LD_INT 0
26678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26679: LD_ADDR_VAR 0 1
26683: PUSH
26684: LD_INT 22
26686: PUSH
26687: LD_OWVAR 2
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 21
26698: PUSH
26699: LD_INT 2
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PPUSH
26710: CALL_OW 69
26714: ST_TO_ADDR
// if not tmp then
26715: LD_VAR 0 1
26719: NOT
26720: IFFALSE 26724
// exit ;
26722: GO 26750
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26724: LD_VAR 0 1
26728: PUSH
26729: LD_INT 1
26731: PPUSH
26732: LD_VAR 0 1
26736: PPUSH
26737: CALL_OW 12
26741: ARRAY
26742: PPUSH
26743: LD_INT 60
26745: PPUSH
26746: CALL_OW 234
// end ;
26750: PPOPN 1
26752: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26753: LD_EXP 75
26757: PUSH
26758: LD_EXP 105
26762: AND
26763: IFFALSE 26862
26765: GO 26767
26767: DISABLE
26768: LD_INT 0
26770: PPUSH
26771: PPUSH
// begin enable ;
26772: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26773: LD_ADDR_VAR 0 1
26777: PUSH
26778: LD_INT 22
26780: PUSH
26781: LD_OWVAR 2
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: LD_INT 61
26792: PUSH
26793: EMPTY
26794: LIST
26795: PUSH
26796: LD_INT 33
26798: PUSH
26799: LD_INT 2
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: LIST
26810: PPUSH
26811: CALL_OW 69
26815: ST_TO_ADDR
// if not tmp then
26816: LD_VAR 0 1
26820: NOT
26821: IFFALSE 26825
// exit ;
26823: GO 26862
// for i in tmp do
26825: LD_ADDR_VAR 0 2
26829: PUSH
26830: LD_VAR 0 1
26834: PUSH
26835: FOR_IN
26836: IFFALSE 26860
// if IsControledBy ( i ) then
26838: LD_VAR 0 2
26842: PPUSH
26843: CALL_OW 312
26847: IFFALSE 26858
// ComUnlink ( i ) ;
26849: LD_VAR 0 2
26853: PPUSH
26854: CALL_OW 136
26858: GO 26835
26860: POP
26861: POP
// end ;
26862: PPOPN 2
26864: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26865: LD_EXP 75
26869: PUSH
26870: LD_EXP 106
26874: AND
26875: IFFALSE 27015
26877: GO 26879
26879: DISABLE
26880: LD_INT 0
26882: PPUSH
26883: PPUSH
// begin ToLua ( displayPowell(); ) ;
26884: LD_STRING displayPowell();
26886: PPUSH
26887: CALL_OW 559
// uc_side := 0 ;
26891: LD_ADDR_OWVAR 20
26895: PUSH
26896: LD_INT 0
26898: ST_TO_ADDR
// uc_nation := 2 ;
26899: LD_ADDR_OWVAR 21
26903: PUSH
26904: LD_INT 2
26906: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26907: LD_ADDR_OWVAR 37
26911: PUSH
26912: LD_INT 14
26914: ST_TO_ADDR
// vc_engine := engine_siberite ;
26915: LD_ADDR_OWVAR 39
26919: PUSH
26920: LD_INT 3
26922: ST_TO_ADDR
// vc_control := control_apeman ;
26923: LD_ADDR_OWVAR 38
26927: PUSH
26928: LD_INT 5
26930: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26931: LD_ADDR_OWVAR 40
26935: PUSH
26936: LD_INT 29
26938: ST_TO_ADDR
// un := CreateVehicle ;
26939: LD_ADDR_VAR 0 2
26943: PUSH
26944: CALL_OW 45
26948: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26949: LD_VAR 0 2
26953: PPUSH
26954: LD_INT 1
26956: PPUSH
26957: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26961: LD_INT 35
26963: PPUSH
26964: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26968: LD_VAR 0 2
26972: PPUSH
26973: LD_INT 22
26975: PUSH
26976: LD_OWVAR 2
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PPUSH
26985: CALL_OW 69
26989: PPUSH
26990: LD_VAR 0 2
26994: PPUSH
26995: CALL_OW 74
26999: PPUSH
27000: CALL_OW 115
// until IsDead ( un ) ;
27004: LD_VAR 0 2
27008: PPUSH
27009: CALL_OW 301
27013: IFFALSE 26961
// end ;
27015: PPOPN 2
27017: END
// every 0 0$1 trigger StreamModeActive and sStu do
27018: LD_EXP 75
27022: PUSH
27023: LD_EXP 114
27027: AND
27028: IFFALSE 27044
27030: GO 27032
27032: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27033: LD_STRING displayStucuk();
27035: PPUSH
27036: CALL_OW 559
// ResetFog ;
27040: CALL_OW 335
// end ;
27044: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27045: LD_EXP 75
27049: PUSH
27050: LD_EXP 107
27054: AND
27055: IFFALSE 27196
27057: GO 27059
27059: DISABLE
27060: LD_INT 0
27062: PPUSH
27063: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27064: LD_ADDR_VAR 0 2
27068: PUSH
27069: LD_INT 22
27071: PUSH
27072: LD_OWVAR 2
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: LD_INT 21
27083: PUSH
27084: LD_INT 1
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PPUSH
27095: CALL_OW 69
27099: ST_TO_ADDR
// if not tmp then
27100: LD_VAR 0 2
27104: NOT
27105: IFFALSE 27109
// exit ;
27107: GO 27196
// un := tmp [ rand ( 1 , tmp ) ] ;
27109: LD_ADDR_VAR 0 1
27113: PUSH
27114: LD_VAR 0 2
27118: PUSH
27119: LD_INT 1
27121: PPUSH
27122: LD_VAR 0 2
27126: PPUSH
27127: CALL_OW 12
27131: ARRAY
27132: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27133: LD_VAR 0 1
27137: PPUSH
27138: LD_INT 0
27140: PPUSH
27141: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27145: LD_VAR 0 1
27149: PPUSH
27150: LD_OWVAR 3
27154: PUSH
27155: LD_VAR 0 1
27159: DIFF
27160: PPUSH
27161: LD_VAR 0 1
27165: PPUSH
27166: CALL_OW 74
27170: PPUSH
27171: CALL_OW 115
// wait ( 0 0$20 ) ;
27175: LD_INT 700
27177: PPUSH
27178: CALL_OW 67
// SetSide ( un , your_side ) ;
27182: LD_VAR 0 1
27186: PPUSH
27187: LD_OWVAR 2
27191: PPUSH
27192: CALL_OW 235
// end ;
27196: PPOPN 2
27198: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27199: LD_EXP 75
27203: PUSH
27204: LD_EXP 108
27208: AND
27209: IFFALSE 27315
27211: GO 27213
27213: DISABLE
27214: LD_INT 0
27216: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27217: LD_ADDR_VAR 0 1
27221: PUSH
27222: LD_INT 22
27224: PUSH
27225: LD_OWVAR 2
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: LD_INT 2
27236: PUSH
27237: LD_INT 30
27239: PUSH
27240: LD_INT 0
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 30
27249: PUSH
27250: LD_INT 1
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: LIST
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PPUSH
27266: CALL_OW 69
27270: ST_TO_ADDR
// if not depot then
27271: LD_VAR 0 1
27275: NOT
27276: IFFALSE 27280
// exit ;
27278: GO 27315
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27280: LD_VAR 0 1
27284: PUSH
27285: LD_INT 1
27287: ARRAY
27288: PPUSH
27289: CALL_OW 250
27293: PPUSH
27294: LD_VAR 0 1
27298: PUSH
27299: LD_INT 1
27301: ARRAY
27302: PPUSH
27303: CALL_OW 251
27307: PPUSH
27308: LD_INT 70
27310: PPUSH
27311: CALL_OW 495
// end ;
27315: PPOPN 1
27317: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27318: LD_EXP 75
27322: PUSH
27323: LD_EXP 109
27327: AND
27328: IFFALSE 27539
27330: GO 27332
27332: DISABLE
27333: LD_INT 0
27335: PPUSH
27336: PPUSH
27337: PPUSH
27338: PPUSH
27339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27340: LD_ADDR_VAR 0 5
27344: PUSH
27345: LD_INT 22
27347: PUSH
27348: LD_OWVAR 2
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 21
27359: PUSH
27360: LD_INT 1
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PPUSH
27371: CALL_OW 69
27375: ST_TO_ADDR
// if not tmp then
27376: LD_VAR 0 5
27380: NOT
27381: IFFALSE 27385
// exit ;
27383: GO 27539
// for i in tmp do
27385: LD_ADDR_VAR 0 1
27389: PUSH
27390: LD_VAR 0 5
27394: PUSH
27395: FOR_IN
27396: IFFALSE 27537
// begin d := rand ( 0 , 5 ) ;
27398: LD_ADDR_VAR 0 4
27402: PUSH
27403: LD_INT 0
27405: PPUSH
27406: LD_INT 5
27408: PPUSH
27409: CALL_OW 12
27413: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27414: LD_ADDR_VAR 0 2
27418: PUSH
27419: LD_VAR 0 1
27423: PPUSH
27424: CALL_OW 250
27428: PPUSH
27429: LD_VAR 0 4
27433: PPUSH
27434: LD_INT 3
27436: PPUSH
27437: LD_INT 12
27439: PPUSH
27440: CALL_OW 12
27444: PPUSH
27445: CALL_OW 272
27449: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27450: LD_ADDR_VAR 0 3
27454: PUSH
27455: LD_VAR 0 1
27459: PPUSH
27460: CALL_OW 251
27464: PPUSH
27465: LD_VAR 0 4
27469: PPUSH
27470: LD_INT 3
27472: PPUSH
27473: LD_INT 12
27475: PPUSH
27476: CALL_OW 12
27480: PPUSH
27481: CALL_OW 273
27485: ST_TO_ADDR
// if ValidHex ( x , y ) then
27486: LD_VAR 0 2
27490: PPUSH
27491: LD_VAR 0 3
27495: PPUSH
27496: CALL_OW 488
27500: IFFALSE 27535
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27502: LD_VAR 0 1
27506: PPUSH
27507: LD_VAR 0 2
27511: PPUSH
27512: LD_VAR 0 3
27516: PPUSH
27517: LD_INT 3
27519: PPUSH
27520: LD_INT 6
27522: PPUSH
27523: CALL_OW 12
27527: PPUSH
27528: LD_INT 1
27530: PPUSH
27531: CALL_OW 483
// end ;
27535: GO 27395
27537: POP
27538: POP
// end ;
27539: PPOPN 5
27541: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27542: LD_EXP 75
27546: PUSH
27547: LD_EXP 110
27551: AND
27552: IFFALSE 27646
27554: GO 27556
27556: DISABLE
27557: LD_INT 0
27559: PPUSH
27560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27561: LD_ADDR_VAR 0 2
27565: PUSH
27566: LD_INT 22
27568: PUSH
27569: LD_OWVAR 2
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 32
27580: PUSH
27581: LD_INT 1
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 21
27590: PUSH
27591: LD_INT 2
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: LIST
27602: PPUSH
27603: CALL_OW 69
27607: ST_TO_ADDR
// if not tmp then
27608: LD_VAR 0 2
27612: NOT
27613: IFFALSE 27617
// exit ;
27615: GO 27646
// for i in tmp do
27617: LD_ADDR_VAR 0 1
27621: PUSH
27622: LD_VAR 0 2
27626: PUSH
27627: FOR_IN
27628: IFFALSE 27644
// SetFuel ( i , 0 ) ;
27630: LD_VAR 0 1
27634: PPUSH
27635: LD_INT 0
27637: PPUSH
27638: CALL_OW 240
27642: GO 27627
27644: POP
27645: POP
// end ;
27646: PPOPN 2
27648: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27649: LD_EXP 75
27653: PUSH
27654: LD_EXP 111
27658: AND
27659: IFFALSE 27725
27661: GO 27663
27663: DISABLE
27664: LD_INT 0
27666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27667: LD_ADDR_VAR 0 1
27671: PUSH
27672: LD_INT 22
27674: PUSH
27675: LD_OWVAR 2
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 30
27686: PUSH
27687: LD_INT 29
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PPUSH
27698: CALL_OW 69
27702: ST_TO_ADDR
// if not tmp then
27703: LD_VAR 0 1
27707: NOT
27708: IFFALSE 27712
// exit ;
27710: GO 27725
// DestroyUnit ( tmp [ 1 ] ) ;
27712: LD_VAR 0 1
27716: PUSH
27717: LD_INT 1
27719: ARRAY
27720: PPUSH
27721: CALL_OW 65
// end ;
27725: PPOPN 1
27727: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27728: LD_EXP 75
27732: PUSH
27733: LD_EXP 113
27737: AND
27738: IFFALSE 27867
27740: GO 27742
27742: DISABLE
27743: LD_INT 0
27745: PPUSH
// begin uc_side := 0 ;
27746: LD_ADDR_OWVAR 20
27750: PUSH
27751: LD_INT 0
27753: ST_TO_ADDR
// uc_nation := nation_arabian ;
27754: LD_ADDR_OWVAR 21
27758: PUSH
27759: LD_INT 2
27761: ST_TO_ADDR
// hc_gallery :=  ;
27762: LD_ADDR_OWVAR 33
27766: PUSH
27767: LD_STRING 
27769: ST_TO_ADDR
// hc_name :=  ;
27770: LD_ADDR_OWVAR 26
27774: PUSH
27775: LD_STRING 
27777: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27778: LD_INT 1
27780: PPUSH
27781: LD_INT 11
27783: PPUSH
27784: LD_INT 10
27786: PPUSH
27787: CALL_OW 380
// un := CreateHuman ;
27791: LD_ADDR_VAR 0 1
27795: PUSH
27796: CALL_OW 44
27800: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27801: LD_VAR 0 1
27805: PPUSH
27806: LD_INT 1
27808: PPUSH
27809: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27813: LD_INT 35
27815: PPUSH
27816: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27820: LD_VAR 0 1
27824: PPUSH
27825: LD_INT 22
27827: PUSH
27828: LD_OWVAR 2
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PPUSH
27837: CALL_OW 69
27841: PPUSH
27842: LD_VAR 0 1
27846: PPUSH
27847: CALL_OW 74
27851: PPUSH
27852: CALL_OW 115
// until IsDead ( un ) ;
27856: LD_VAR 0 1
27860: PPUSH
27861: CALL_OW 301
27865: IFFALSE 27813
// end ;
27867: PPOPN 1
27869: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27870: LD_EXP 75
27874: PUSH
27875: LD_EXP 115
27879: AND
27880: IFFALSE 27892
27882: GO 27884
27884: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27885: LD_STRING earthquake(getX(game), 0, 32)
27887: PPUSH
27888: CALL_OW 559
27892: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27893: LD_EXP 75
27897: PUSH
27898: LD_EXP 116
27902: AND
27903: IFFALSE 27994
27905: GO 27907
27907: DISABLE
27908: LD_INT 0
27910: PPUSH
// begin enable ;
27911: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27912: LD_ADDR_VAR 0 1
27916: PUSH
27917: LD_INT 22
27919: PUSH
27920: LD_OWVAR 2
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 21
27931: PUSH
27932: LD_INT 2
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: LD_INT 33
27941: PUSH
27942: LD_INT 3
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: LIST
27953: PPUSH
27954: CALL_OW 69
27958: ST_TO_ADDR
// if not tmp then
27959: LD_VAR 0 1
27963: NOT
27964: IFFALSE 27968
// exit ;
27966: GO 27994
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27968: LD_VAR 0 1
27972: PUSH
27973: LD_INT 1
27975: PPUSH
27976: LD_VAR 0 1
27980: PPUSH
27981: CALL_OW 12
27985: ARRAY
27986: PPUSH
27987: LD_INT 1
27989: PPUSH
27990: CALL_OW 234
// end ;
27994: PPOPN 1
27996: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27997: LD_EXP 75
28001: PUSH
28002: LD_EXP 117
28006: AND
28007: IFFALSE 28148
28009: GO 28011
28011: DISABLE
28012: LD_INT 0
28014: PPUSH
28015: PPUSH
28016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28017: LD_ADDR_VAR 0 3
28021: PUSH
28022: LD_INT 22
28024: PUSH
28025: LD_OWVAR 2
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: LD_INT 25
28036: PUSH
28037: LD_INT 1
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PPUSH
28048: CALL_OW 69
28052: ST_TO_ADDR
// if not tmp then
28053: LD_VAR 0 3
28057: NOT
28058: IFFALSE 28062
// exit ;
28060: GO 28148
// un := tmp [ rand ( 1 , tmp ) ] ;
28062: LD_ADDR_VAR 0 2
28066: PUSH
28067: LD_VAR 0 3
28071: PUSH
28072: LD_INT 1
28074: PPUSH
28075: LD_VAR 0 3
28079: PPUSH
28080: CALL_OW 12
28084: ARRAY
28085: ST_TO_ADDR
// if Crawls ( un ) then
28086: LD_VAR 0 2
28090: PPUSH
28091: CALL_OW 318
28095: IFFALSE 28106
// ComWalk ( un ) ;
28097: LD_VAR 0 2
28101: PPUSH
28102: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28106: LD_VAR 0 2
28110: PPUSH
28111: LD_INT 9
28113: PPUSH
28114: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28118: LD_INT 28
28120: PPUSH
28121: LD_OWVAR 2
28125: PPUSH
28126: LD_INT 2
28128: PPUSH
28129: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28133: LD_INT 29
28135: PPUSH
28136: LD_OWVAR 2
28140: PPUSH
28141: LD_INT 2
28143: PPUSH
28144: CALL_OW 322
// end ;
28148: PPOPN 3
28150: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28151: LD_EXP 75
28155: PUSH
28156: LD_EXP 118
28160: AND
28161: IFFALSE 28272
28163: GO 28165
28165: DISABLE
28166: LD_INT 0
28168: PPUSH
28169: PPUSH
28170: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28171: LD_ADDR_VAR 0 3
28175: PUSH
28176: LD_INT 22
28178: PUSH
28179: LD_OWVAR 2
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: LD_INT 25
28190: PUSH
28191: LD_INT 1
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PPUSH
28202: CALL_OW 69
28206: ST_TO_ADDR
// if not tmp then
28207: LD_VAR 0 3
28211: NOT
28212: IFFALSE 28216
// exit ;
28214: GO 28272
// un := tmp [ rand ( 1 , tmp ) ] ;
28216: LD_ADDR_VAR 0 2
28220: PUSH
28221: LD_VAR 0 3
28225: PUSH
28226: LD_INT 1
28228: PPUSH
28229: LD_VAR 0 3
28233: PPUSH
28234: CALL_OW 12
28238: ARRAY
28239: ST_TO_ADDR
// if Crawls ( un ) then
28240: LD_VAR 0 2
28244: PPUSH
28245: CALL_OW 318
28249: IFFALSE 28260
// ComWalk ( un ) ;
28251: LD_VAR 0 2
28255: PPUSH
28256: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28260: LD_VAR 0 2
28264: PPUSH
28265: LD_INT 8
28267: PPUSH
28268: CALL_OW 336
// end ;
28272: PPOPN 3
28274: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28275: LD_EXP 75
28279: PUSH
28280: LD_EXP 119
28284: AND
28285: IFFALSE 28429
28287: GO 28289
28289: DISABLE
28290: LD_INT 0
28292: PPUSH
28293: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28294: LD_ADDR_VAR 0 2
28298: PUSH
28299: LD_INT 22
28301: PUSH
28302: LD_OWVAR 2
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 21
28313: PUSH
28314: LD_INT 2
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 2
28323: PUSH
28324: LD_INT 34
28326: PUSH
28327: LD_INT 12
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 34
28336: PUSH
28337: LD_INT 51
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 34
28346: PUSH
28347: LD_INT 32
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: LIST
28364: PPUSH
28365: CALL_OW 69
28369: ST_TO_ADDR
// if not tmp then
28370: LD_VAR 0 2
28374: NOT
28375: IFFALSE 28379
// exit ;
28377: GO 28429
// for i in tmp do
28379: LD_ADDR_VAR 0 1
28383: PUSH
28384: LD_VAR 0 2
28388: PUSH
28389: FOR_IN
28390: IFFALSE 28427
// if GetCargo ( i , mat_artifact ) = 0 then
28392: LD_VAR 0 1
28396: PPUSH
28397: LD_INT 4
28399: PPUSH
28400: CALL_OW 289
28404: PUSH
28405: LD_INT 0
28407: EQUAL
28408: IFFALSE 28425
// SetCargo ( i , mat_siberit , 100 ) ;
28410: LD_VAR 0 1
28414: PPUSH
28415: LD_INT 3
28417: PPUSH
28418: LD_INT 100
28420: PPUSH
28421: CALL_OW 290
28425: GO 28389
28427: POP
28428: POP
// end ;
28429: PPOPN 2
28431: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28432: LD_EXP 75
28436: PUSH
28437: LD_EXP 120
28441: AND
28442: IFFALSE 28625
28444: GO 28446
28446: DISABLE
28447: LD_INT 0
28449: PPUSH
28450: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28451: LD_ADDR_VAR 0 2
28455: PUSH
28456: LD_INT 22
28458: PUSH
28459: LD_OWVAR 2
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PPUSH
28468: CALL_OW 69
28472: ST_TO_ADDR
// if not tmp then
28473: LD_VAR 0 2
28477: NOT
28478: IFFALSE 28482
// exit ;
28480: GO 28625
// for i := 1 to 2 do
28482: LD_ADDR_VAR 0 1
28486: PUSH
28487: DOUBLE
28488: LD_INT 1
28490: DEC
28491: ST_TO_ADDR
28492: LD_INT 2
28494: PUSH
28495: FOR_TO
28496: IFFALSE 28623
// begin uc_side := your_side ;
28498: LD_ADDR_OWVAR 20
28502: PUSH
28503: LD_OWVAR 2
28507: ST_TO_ADDR
// uc_nation := nation_american ;
28508: LD_ADDR_OWVAR 21
28512: PUSH
28513: LD_INT 1
28515: ST_TO_ADDR
// vc_chassis := us_morphling ;
28516: LD_ADDR_OWVAR 37
28520: PUSH
28521: LD_INT 5
28523: ST_TO_ADDR
// vc_engine := engine_siberite ;
28524: LD_ADDR_OWVAR 39
28528: PUSH
28529: LD_INT 3
28531: ST_TO_ADDR
// vc_control := control_computer ;
28532: LD_ADDR_OWVAR 38
28536: PUSH
28537: LD_INT 3
28539: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28540: LD_ADDR_OWVAR 40
28544: PUSH
28545: LD_INT 10
28547: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28548: LD_VAR 0 2
28552: PUSH
28553: LD_INT 1
28555: ARRAY
28556: PPUSH
28557: CALL_OW 310
28561: NOT
28562: IFFALSE 28609
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28564: CALL_OW 45
28568: PPUSH
28569: LD_VAR 0 2
28573: PUSH
28574: LD_INT 1
28576: ARRAY
28577: PPUSH
28578: CALL_OW 250
28582: PPUSH
28583: LD_VAR 0 2
28587: PUSH
28588: LD_INT 1
28590: ARRAY
28591: PPUSH
28592: CALL_OW 251
28596: PPUSH
28597: LD_INT 12
28599: PPUSH
28600: LD_INT 1
28602: PPUSH
28603: CALL_OW 50
28607: GO 28621
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28609: CALL_OW 45
28613: PPUSH
28614: LD_INT 1
28616: PPUSH
28617: CALL_OW 51
// end ;
28621: GO 28495
28623: POP
28624: POP
// end ;
28625: PPOPN 2
28627: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28628: LD_EXP 75
28632: PUSH
28633: LD_EXP 121
28637: AND
28638: IFFALSE 28860
28640: GO 28642
28642: DISABLE
28643: LD_INT 0
28645: PPUSH
28646: PPUSH
28647: PPUSH
28648: PPUSH
28649: PPUSH
28650: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28651: LD_ADDR_VAR 0 6
28655: PUSH
28656: LD_INT 22
28658: PUSH
28659: LD_OWVAR 2
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 21
28670: PUSH
28671: LD_INT 1
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 3
28680: PUSH
28681: LD_INT 23
28683: PUSH
28684: LD_INT 0
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: LIST
28699: PPUSH
28700: CALL_OW 69
28704: ST_TO_ADDR
// if not tmp then
28705: LD_VAR 0 6
28709: NOT
28710: IFFALSE 28714
// exit ;
28712: GO 28860
// s1 := rand ( 1 , 4 ) ;
28714: LD_ADDR_VAR 0 2
28718: PUSH
28719: LD_INT 1
28721: PPUSH
28722: LD_INT 4
28724: PPUSH
28725: CALL_OW 12
28729: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28730: LD_ADDR_VAR 0 4
28734: PUSH
28735: LD_VAR 0 6
28739: PUSH
28740: LD_INT 1
28742: ARRAY
28743: PPUSH
28744: LD_VAR 0 2
28748: PPUSH
28749: CALL_OW 259
28753: ST_TO_ADDR
// if s1 = 1 then
28754: LD_VAR 0 2
28758: PUSH
28759: LD_INT 1
28761: EQUAL
28762: IFFALSE 28782
// s2 := rand ( 2 , 4 ) else
28764: LD_ADDR_VAR 0 3
28768: PUSH
28769: LD_INT 2
28771: PPUSH
28772: LD_INT 4
28774: PPUSH
28775: CALL_OW 12
28779: ST_TO_ADDR
28780: GO 28790
// s2 := 1 ;
28782: LD_ADDR_VAR 0 3
28786: PUSH
28787: LD_INT 1
28789: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28790: LD_ADDR_VAR 0 5
28794: PUSH
28795: LD_VAR 0 6
28799: PUSH
28800: LD_INT 1
28802: ARRAY
28803: PPUSH
28804: LD_VAR 0 3
28808: PPUSH
28809: CALL_OW 259
28813: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28814: LD_VAR 0 6
28818: PUSH
28819: LD_INT 1
28821: ARRAY
28822: PPUSH
28823: LD_VAR 0 2
28827: PPUSH
28828: LD_VAR 0 5
28832: PPUSH
28833: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28837: LD_VAR 0 6
28841: PUSH
28842: LD_INT 1
28844: ARRAY
28845: PPUSH
28846: LD_VAR 0 3
28850: PPUSH
28851: LD_VAR 0 4
28855: PPUSH
28856: CALL_OW 237
// end ;
28860: PPOPN 6
28862: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28863: LD_EXP 75
28867: PUSH
28868: LD_EXP 122
28872: AND
28873: IFFALSE 28952
28875: GO 28877
28877: DISABLE
28878: LD_INT 0
28880: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28881: LD_ADDR_VAR 0 1
28885: PUSH
28886: LD_INT 22
28888: PUSH
28889: LD_OWVAR 2
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 30
28900: PUSH
28901: LD_INT 3
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PPUSH
28912: CALL_OW 69
28916: ST_TO_ADDR
// if not tmp then
28917: LD_VAR 0 1
28921: NOT
28922: IFFALSE 28926
// exit ;
28924: GO 28952
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28926: LD_VAR 0 1
28930: PUSH
28931: LD_INT 1
28933: PPUSH
28934: LD_VAR 0 1
28938: PPUSH
28939: CALL_OW 12
28943: ARRAY
28944: PPUSH
28945: LD_INT 1
28947: PPUSH
28948: CALL_OW 234
// end ;
28952: PPOPN 1
28954: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28955: LD_EXP 75
28959: PUSH
28960: LD_EXP 123
28964: AND
28965: IFFALSE 29077
28967: GO 28969
28969: DISABLE
28970: LD_INT 0
28972: PPUSH
28973: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28974: LD_ADDR_VAR 0 2
28978: PUSH
28979: LD_INT 22
28981: PUSH
28982: LD_OWVAR 2
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 2
28993: PUSH
28994: LD_INT 30
28996: PUSH
28997: LD_INT 27
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 30
29006: PUSH
29007: LD_INT 26
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 30
29016: PUSH
29017: LD_INT 28
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PPUSH
29034: CALL_OW 69
29038: ST_TO_ADDR
// if not tmp then
29039: LD_VAR 0 2
29043: NOT
29044: IFFALSE 29048
// exit ;
29046: GO 29077
// for i in tmp do
29048: LD_ADDR_VAR 0 1
29052: PUSH
29053: LD_VAR 0 2
29057: PUSH
29058: FOR_IN
29059: IFFALSE 29075
// SetLives ( i , 1 ) ;
29061: LD_VAR 0 1
29065: PPUSH
29066: LD_INT 1
29068: PPUSH
29069: CALL_OW 234
29073: GO 29058
29075: POP
29076: POP
// end ;
29077: PPOPN 2
29079: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29080: LD_EXP 75
29084: PUSH
29085: LD_EXP 124
29089: AND
29090: IFFALSE 29377
29092: GO 29094
29094: DISABLE
29095: LD_INT 0
29097: PPUSH
29098: PPUSH
29099: PPUSH
// begin i := rand ( 1 , 7 ) ;
29100: LD_ADDR_VAR 0 1
29104: PUSH
29105: LD_INT 1
29107: PPUSH
29108: LD_INT 7
29110: PPUSH
29111: CALL_OW 12
29115: ST_TO_ADDR
// case i of 1 :
29116: LD_VAR 0 1
29120: PUSH
29121: LD_INT 1
29123: DOUBLE
29124: EQUAL
29125: IFTRUE 29129
29127: GO 29139
29129: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29130: LD_STRING earthquake(getX(game), 0, 32)
29132: PPUSH
29133: CALL_OW 559
29137: GO 29377
29139: LD_INT 2
29141: DOUBLE
29142: EQUAL
29143: IFTRUE 29147
29145: GO 29161
29147: POP
// begin ToLua ( displayStucuk(); ) ;
29148: LD_STRING displayStucuk();
29150: PPUSH
29151: CALL_OW 559
// ResetFog ;
29155: CALL_OW 335
// end ; 3 :
29159: GO 29377
29161: LD_INT 3
29163: DOUBLE
29164: EQUAL
29165: IFTRUE 29169
29167: GO 29273
29169: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29170: LD_ADDR_VAR 0 2
29174: PUSH
29175: LD_INT 22
29177: PUSH
29178: LD_OWVAR 2
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: LD_INT 25
29189: PUSH
29190: LD_INT 1
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PPUSH
29201: CALL_OW 69
29205: ST_TO_ADDR
// if not tmp then
29206: LD_VAR 0 2
29210: NOT
29211: IFFALSE 29215
// exit ;
29213: GO 29377
// un := tmp [ rand ( 1 , tmp ) ] ;
29215: LD_ADDR_VAR 0 3
29219: PUSH
29220: LD_VAR 0 2
29224: PUSH
29225: LD_INT 1
29227: PPUSH
29228: LD_VAR 0 2
29232: PPUSH
29233: CALL_OW 12
29237: ARRAY
29238: ST_TO_ADDR
// if Crawls ( un ) then
29239: LD_VAR 0 3
29243: PPUSH
29244: CALL_OW 318
29248: IFFALSE 29259
// ComWalk ( un ) ;
29250: LD_VAR 0 3
29254: PPUSH
29255: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29259: LD_VAR 0 3
29263: PPUSH
29264: LD_INT 8
29266: PPUSH
29267: CALL_OW 336
// end ; 4 :
29271: GO 29377
29273: LD_INT 4
29275: DOUBLE
29276: EQUAL
29277: IFTRUE 29281
29279: GO 29355
29281: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29282: LD_ADDR_VAR 0 2
29286: PUSH
29287: LD_INT 22
29289: PUSH
29290: LD_OWVAR 2
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 30
29301: PUSH
29302: LD_INT 29
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PPUSH
29313: CALL_OW 69
29317: ST_TO_ADDR
// if not tmp then
29318: LD_VAR 0 2
29322: NOT
29323: IFFALSE 29327
// exit ;
29325: GO 29377
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29327: LD_VAR 0 2
29331: PUSH
29332: LD_INT 1
29334: ARRAY
29335: PPUSH
29336: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29340: LD_VAR 0 2
29344: PUSH
29345: LD_INT 1
29347: ARRAY
29348: PPUSH
29349: CALL_OW 65
// end ; 5 .. 7 :
29353: GO 29377
29355: LD_INT 5
29357: DOUBLE
29358: GREATEREQUAL
29359: IFFALSE 29367
29361: LD_INT 7
29363: DOUBLE
29364: LESSEQUAL
29365: IFTRUE 29369
29367: GO 29376
29369: POP
// StreamSibBomb ; end ;
29370: CALL 25614 0 0
29374: GO 29377
29376: POP
// end ;
29377: PPOPN 3
29379: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29380: LD_EXP 75
29384: PUSH
29385: LD_EXP 125
29389: AND
29390: IFFALSE 29546
29392: GO 29394
29394: DISABLE
29395: LD_INT 0
29397: PPUSH
29398: PPUSH
29399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29400: LD_ADDR_VAR 0 2
29404: PUSH
29405: LD_INT 81
29407: PUSH
29408: LD_OWVAR 2
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 2
29419: PUSH
29420: LD_INT 21
29422: PUSH
29423: LD_INT 1
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 21
29432: PUSH
29433: LD_INT 2
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: LIST
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PPUSH
29449: CALL_OW 69
29453: ST_TO_ADDR
// if not tmp then
29454: LD_VAR 0 2
29458: NOT
29459: IFFALSE 29463
// exit ;
29461: GO 29546
// p := 0 ;
29463: LD_ADDR_VAR 0 3
29467: PUSH
29468: LD_INT 0
29470: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29471: LD_INT 35
29473: PPUSH
29474: CALL_OW 67
// p := p + 1 ;
29478: LD_ADDR_VAR 0 3
29482: PUSH
29483: LD_VAR 0 3
29487: PUSH
29488: LD_INT 1
29490: PLUS
29491: ST_TO_ADDR
// for i in tmp do
29492: LD_ADDR_VAR 0 1
29496: PUSH
29497: LD_VAR 0 2
29501: PUSH
29502: FOR_IN
29503: IFFALSE 29534
// if GetLives ( i ) < 1000 then
29505: LD_VAR 0 1
29509: PPUSH
29510: CALL_OW 256
29514: PUSH
29515: LD_INT 1000
29517: LESS
29518: IFFALSE 29532
// SetLives ( i , 1000 ) ;
29520: LD_VAR 0 1
29524: PPUSH
29525: LD_INT 1000
29527: PPUSH
29528: CALL_OW 234
29532: GO 29502
29534: POP
29535: POP
// until p > 20 ;
29536: LD_VAR 0 3
29540: PUSH
29541: LD_INT 20
29543: GREATER
29544: IFFALSE 29471
// end ;
29546: PPOPN 3
29548: END
// every 0 0$1 trigger StreamModeActive and sTime do
29549: LD_EXP 75
29553: PUSH
29554: LD_EXP 126
29558: AND
29559: IFFALSE 29594
29561: GO 29563
29563: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29564: LD_INT 28
29566: PPUSH
29567: LD_OWVAR 2
29571: PPUSH
29572: LD_INT 2
29574: PPUSH
29575: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29579: LD_INT 30
29581: PPUSH
29582: LD_OWVAR 2
29586: PPUSH
29587: LD_INT 2
29589: PPUSH
29590: CALL_OW 322
// end ;
29594: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29595: LD_EXP 75
29599: PUSH
29600: LD_EXP 127
29604: AND
29605: IFFALSE 29726
29607: GO 29609
29609: DISABLE
29610: LD_INT 0
29612: PPUSH
29613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29614: LD_ADDR_VAR 0 2
29618: PUSH
29619: LD_INT 22
29621: PUSH
29622: LD_OWVAR 2
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 21
29633: PUSH
29634: LD_INT 1
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 3
29643: PUSH
29644: LD_INT 23
29646: PUSH
29647: LD_INT 0
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: LIST
29662: PPUSH
29663: CALL_OW 69
29667: ST_TO_ADDR
// if not tmp then
29668: LD_VAR 0 2
29672: NOT
29673: IFFALSE 29677
// exit ;
29675: GO 29726
// for i in tmp do
29677: LD_ADDR_VAR 0 1
29681: PUSH
29682: LD_VAR 0 2
29686: PUSH
29687: FOR_IN
29688: IFFALSE 29724
// begin if Crawls ( i ) then
29690: LD_VAR 0 1
29694: PPUSH
29695: CALL_OW 318
29699: IFFALSE 29710
// ComWalk ( i ) ;
29701: LD_VAR 0 1
29705: PPUSH
29706: CALL_OW 138
// SetClass ( i , 2 ) ;
29710: LD_VAR 0 1
29714: PPUSH
29715: LD_INT 2
29717: PPUSH
29718: CALL_OW 336
// end ;
29722: GO 29687
29724: POP
29725: POP
// end ;
29726: PPOPN 2
29728: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29729: LD_EXP 75
29733: PUSH
29734: LD_EXP 128
29738: AND
29739: IFFALSE 30027
29741: GO 29743
29743: DISABLE
29744: LD_INT 0
29746: PPUSH
29747: PPUSH
29748: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29749: LD_OWVAR 2
29753: PPUSH
29754: LD_INT 9
29756: PPUSH
29757: LD_INT 1
29759: PPUSH
29760: LD_INT 1
29762: PPUSH
29763: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29767: LD_INT 9
29769: PPUSH
29770: LD_OWVAR 2
29774: PPUSH
29775: CALL_OW 343
// uc_side := 9 ;
29779: LD_ADDR_OWVAR 20
29783: PUSH
29784: LD_INT 9
29786: ST_TO_ADDR
// uc_nation := 2 ;
29787: LD_ADDR_OWVAR 21
29791: PUSH
29792: LD_INT 2
29794: ST_TO_ADDR
// hc_name := Dark Warrior ;
29795: LD_ADDR_OWVAR 26
29799: PUSH
29800: LD_STRING Dark Warrior
29802: ST_TO_ADDR
// hc_gallery :=  ;
29803: LD_ADDR_OWVAR 33
29807: PUSH
29808: LD_STRING 
29810: ST_TO_ADDR
// hc_noskilllimit := true ;
29811: LD_ADDR_OWVAR 76
29815: PUSH
29816: LD_INT 1
29818: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29819: LD_ADDR_OWVAR 31
29823: PUSH
29824: LD_INT 30
29826: PUSH
29827: LD_INT 30
29829: PUSH
29830: LD_INT 30
29832: PUSH
29833: LD_INT 30
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: ST_TO_ADDR
// un := CreateHuman ;
29842: LD_ADDR_VAR 0 3
29846: PUSH
29847: CALL_OW 44
29851: ST_TO_ADDR
// hc_noskilllimit := false ;
29852: LD_ADDR_OWVAR 76
29856: PUSH
29857: LD_INT 0
29859: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29860: LD_VAR 0 3
29864: PPUSH
29865: LD_INT 1
29867: PPUSH
29868: CALL_OW 51
// ToLua ( playRanger() ) ;
29872: LD_STRING playRanger()
29874: PPUSH
29875: CALL_OW 559
// p := 0 ;
29879: LD_ADDR_VAR 0 2
29883: PUSH
29884: LD_INT 0
29886: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29887: LD_INT 35
29889: PPUSH
29890: CALL_OW 67
// p := p + 1 ;
29894: LD_ADDR_VAR 0 2
29898: PUSH
29899: LD_VAR 0 2
29903: PUSH
29904: LD_INT 1
29906: PLUS
29907: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29908: LD_VAR 0 3
29912: PPUSH
29913: CALL_OW 256
29917: PUSH
29918: LD_INT 1000
29920: LESS
29921: IFFALSE 29935
// SetLives ( un , 1000 ) ;
29923: LD_VAR 0 3
29927: PPUSH
29928: LD_INT 1000
29930: PPUSH
29931: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29935: LD_VAR 0 3
29939: PPUSH
29940: LD_INT 81
29942: PUSH
29943: LD_OWVAR 2
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 91
29954: PUSH
29955: LD_VAR 0 3
29959: PUSH
29960: LD_INT 30
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: LIST
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PPUSH
29972: CALL_OW 69
29976: PPUSH
29977: LD_VAR 0 3
29981: PPUSH
29982: CALL_OW 74
29986: PPUSH
29987: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
29991: LD_VAR 0 2
29995: PUSH
29996: LD_INT 80
29998: GREATER
29999: PUSH
30000: LD_VAR 0 3
30004: PPUSH
30005: CALL_OW 301
30009: OR
30010: IFFALSE 29887
// if un then
30012: LD_VAR 0 3
30016: IFFALSE 30027
// RemoveUnit ( un ) ;
30018: LD_VAR 0 3
30022: PPUSH
30023: CALL_OW 64
// end ;
30027: PPOPN 3
30029: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30030: LD_EXP 129
30034: IFFALSE 30150
30036: GO 30038
30038: DISABLE
30039: LD_INT 0
30041: PPUSH
30042: PPUSH
30043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30044: LD_ADDR_VAR 0 2
30048: PUSH
30049: LD_INT 81
30051: PUSH
30052: LD_OWVAR 2
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 21
30063: PUSH
30064: LD_INT 1
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PPUSH
30075: CALL_OW 69
30079: ST_TO_ADDR
// if not tmp then
30080: LD_VAR 0 2
30084: NOT
30085: IFFALSE 30089
// exit ;
30087: GO 30150
// ToLua ( playComputer() ) ;
30089: LD_STRING playComputer()
30091: PPUSH
30092: CALL_OW 559
// for i in tmp do
30096: LD_ADDR_VAR 0 1
30100: PUSH
30101: LD_VAR 0 2
30105: PUSH
30106: FOR_IN
30107: IFFALSE 30148
// for j := 1 to 4 do
30109: LD_ADDR_VAR 0 3
30113: PUSH
30114: DOUBLE
30115: LD_INT 1
30117: DEC
30118: ST_TO_ADDR
30119: LD_INT 4
30121: PUSH
30122: FOR_TO
30123: IFFALSE 30144
// SetSkill ( i , j , 10 ) ;
30125: LD_VAR 0 1
30129: PPUSH
30130: LD_VAR 0 3
30134: PPUSH
30135: LD_INT 10
30137: PPUSH
30138: CALL_OW 237
30142: GO 30122
30144: POP
30145: POP
30146: GO 30106
30148: POP
30149: POP
// end ;
30150: PPOPN 3
30152: END
// every 0 0$1 trigger s30 do var i , tmp ;
30153: LD_EXP 130
30157: IFFALSE 30226
30159: GO 30161
30161: DISABLE
30162: LD_INT 0
30164: PPUSH
30165: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30166: LD_ADDR_VAR 0 2
30170: PUSH
30171: LD_INT 22
30173: PUSH
30174: LD_OWVAR 2
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PPUSH
30183: CALL_OW 69
30187: ST_TO_ADDR
// if not tmp then
30188: LD_VAR 0 2
30192: NOT
30193: IFFALSE 30197
// exit ;
30195: GO 30226
// for i in tmp do
30197: LD_ADDR_VAR 0 1
30201: PUSH
30202: LD_VAR 0 2
30206: PUSH
30207: FOR_IN
30208: IFFALSE 30224
// SetLives ( i , 300 ) ;
30210: LD_VAR 0 1
30214: PPUSH
30215: LD_INT 300
30217: PPUSH
30218: CALL_OW 234
30222: GO 30207
30224: POP
30225: POP
// end ;
30226: PPOPN 2
30228: END
// every 0 0$1 trigger s60 do var i , tmp ;
30229: LD_EXP 131
30233: IFFALSE 30302
30235: GO 30237
30237: DISABLE
30238: LD_INT 0
30240: PPUSH
30241: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30242: LD_ADDR_VAR 0 2
30246: PUSH
30247: LD_INT 22
30249: PUSH
30250: LD_OWVAR 2
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PPUSH
30259: CALL_OW 69
30263: ST_TO_ADDR
// if not tmp then
30264: LD_VAR 0 2
30268: NOT
30269: IFFALSE 30273
// exit ;
30271: GO 30302
// for i in tmp do
30273: LD_ADDR_VAR 0 1
30277: PUSH
30278: LD_VAR 0 2
30282: PUSH
30283: FOR_IN
30284: IFFALSE 30300
// SetLives ( i , 600 ) ;
30286: LD_VAR 0 1
30290: PPUSH
30291: LD_INT 600
30293: PPUSH
30294: CALL_OW 234
30298: GO 30283
30300: POP
30301: POP
// end ;
30302: PPOPN 2
30304: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30305: LD_INT 0
30307: PPUSH
// case cmd of 301 :
30308: LD_VAR 0 1
30312: PUSH
30313: LD_INT 301
30315: DOUBLE
30316: EQUAL
30317: IFTRUE 30321
30319: GO 30353
30321: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30322: LD_VAR 0 6
30326: PPUSH
30327: LD_VAR 0 7
30331: PPUSH
30332: LD_VAR 0 8
30336: PPUSH
30337: LD_VAR 0 4
30341: PPUSH
30342: LD_VAR 0 5
30346: PPUSH
30347: CALL 31554 0 5
30351: GO 30474
30353: LD_INT 302
30355: DOUBLE
30356: EQUAL
30357: IFTRUE 30361
30359: GO 30398
30361: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30362: LD_VAR 0 6
30366: PPUSH
30367: LD_VAR 0 7
30371: PPUSH
30372: LD_VAR 0 8
30376: PPUSH
30377: LD_VAR 0 9
30381: PPUSH
30382: LD_VAR 0 4
30386: PPUSH
30387: LD_VAR 0 5
30391: PPUSH
30392: CALL 31645 0 6
30396: GO 30474
30398: LD_INT 303
30400: DOUBLE
30401: EQUAL
30402: IFTRUE 30406
30404: GO 30443
30406: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30407: LD_VAR 0 6
30411: PPUSH
30412: LD_VAR 0 7
30416: PPUSH
30417: LD_VAR 0 8
30421: PPUSH
30422: LD_VAR 0 9
30426: PPUSH
30427: LD_VAR 0 4
30431: PPUSH
30432: LD_VAR 0 5
30436: PPUSH
30437: CALL 30479 0 6
30441: GO 30474
30443: LD_INT 304
30445: DOUBLE
30446: EQUAL
30447: IFTRUE 30451
30449: GO 30473
30451: POP
// hHackTeleport ( unit , x , y ) ; end ;
30452: LD_VAR 0 2
30456: PPUSH
30457: LD_VAR 0 4
30461: PPUSH
30462: LD_VAR 0 5
30466: PPUSH
30467: CALL 32238 0 3
30471: GO 30474
30473: POP
// end ;
30474: LD_VAR 0 12
30478: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30479: LD_INT 0
30481: PPUSH
30482: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30483: LD_VAR 0 1
30487: PUSH
30488: LD_INT 1
30490: LESS
30491: PUSH
30492: LD_VAR 0 1
30496: PUSH
30497: LD_INT 3
30499: GREATER
30500: OR
30501: PUSH
30502: LD_VAR 0 5
30506: PPUSH
30507: LD_VAR 0 6
30511: PPUSH
30512: CALL_OW 428
30516: OR
30517: IFFALSE 30521
// exit ;
30519: GO 31241
// uc_side := your_side ;
30521: LD_ADDR_OWVAR 20
30525: PUSH
30526: LD_OWVAR 2
30530: ST_TO_ADDR
// uc_nation := nation ;
30531: LD_ADDR_OWVAR 21
30535: PUSH
30536: LD_VAR 0 1
30540: ST_TO_ADDR
// bc_level = 1 ;
30541: LD_ADDR_OWVAR 43
30545: PUSH
30546: LD_INT 1
30548: ST_TO_ADDR
// case btype of 1 :
30549: LD_VAR 0 2
30553: PUSH
30554: LD_INT 1
30556: DOUBLE
30557: EQUAL
30558: IFTRUE 30562
30560: GO 30573
30562: POP
// bc_type := b_depot ; 2 :
30563: LD_ADDR_OWVAR 42
30567: PUSH
30568: LD_INT 0
30570: ST_TO_ADDR
30571: GO 31185
30573: LD_INT 2
30575: DOUBLE
30576: EQUAL
30577: IFTRUE 30581
30579: GO 30592
30581: POP
// bc_type := b_warehouse ; 3 :
30582: LD_ADDR_OWVAR 42
30586: PUSH
30587: LD_INT 1
30589: ST_TO_ADDR
30590: GO 31185
30592: LD_INT 3
30594: DOUBLE
30595: EQUAL
30596: IFTRUE 30600
30598: GO 30611
30600: POP
// bc_type := b_lab ; 4 .. 9 :
30601: LD_ADDR_OWVAR 42
30605: PUSH
30606: LD_INT 6
30608: ST_TO_ADDR
30609: GO 31185
30611: LD_INT 4
30613: DOUBLE
30614: GREATEREQUAL
30615: IFFALSE 30623
30617: LD_INT 9
30619: DOUBLE
30620: LESSEQUAL
30621: IFTRUE 30625
30623: GO 30677
30625: POP
// begin bc_type := b_lab_half ;
30626: LD_ADDR_OWVAR 42
30630: PUSH
30631: LD_INT 7
30633: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30634: LD_ADDR_OWVAR 44
30638: PUSH
30639: LD_INT 10
30641: PUSH
30642: LD_INT 11
30644: PUSH
30645: LD_INT 12
30647: PUSH
30648: LD_INT 15
30650: PUSH
30651: LD_INT 14
30653: PUSH
30654: LD_INT 13
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: PUSH
30665: LD_VAR 0 2
30669: PUSH
30670: LD_INT 3
30672: MINUS
30673: ARRAY
30674: ST_TO_ADDR
// end ; 10 .. 13 :
30675: GO 31185
30677: LD_INT 10
30679: DOUBLE
30680: GREATEREQUAL
30681: IFFALSE 30689
30683: LD_INT 13
30685: DOUBLE
30686: LESSEQUAL
30687: IFTRUE 30691
30689: GO 30768
30691: POP
// begin bc_type := b_lab_full ;
30692: LD_ADDR_OWVAR 42
30696: PUSH
30697: LD_INT 8
30699: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30700: LD_ADDR_OWVAR 44
30704: PUSH
30705: LD_INT 10
30707: PUSH
30708: LD_INT 12
30710: PUSH
30711: LD_INT 14
30713: PUSH
30714: LD_INT 13
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: PUSH
30723: LD_VAR 0 2
30727: PUSH
30728: LD_INT 9
30730: MINUS
30731: ARRAY
30732: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30733: LD_ADDR_OWVAR 45
30737: PUSH
30738: LD_INT 11
30740: PUSH
30741: LD_INT 15
30743: PUSH
30744: LD_INT 12
30746: PUSH
30747: LD_INT 15
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: PUSH
30756: LD_VAR 0 2
30760: PUSH
30761: LD_INT 9
30763: MINUS
30764: ARRAY
30765: ST_TO_ADDR
// end ; 14 :
30766: GO 31185
30768: LD_INT 14
30770: DOUBLE
30771: EQUAL
30772: IFTRUE 30776
30774: GO 30787
30776: POP
// bc_type := b_workshop ; 15 :
30777: LD_ADDR_OWVAR 42
30781: PUSH
30782: LD_INT 2
30784: ST_TO_ADDR
30785: GO 31185
30787: LD_INT 15
30789: DOUBLE
30790: EQUAL
30791: IFTRUE 30795
30793: GO 30806
30795: POP
// bc_type := b_factory ; 16 :
30796: LD_ADDR_OWVAR 42
30800: PUSH
30801: LD_INT 3
30803: ST_TO_ADDR
30804: GO 31185
30806: LD_INT 16
30808: DOUBLE
30809: EQUAL
30810: IFTRUE 30814
30812: GO 30825
30814: POP
// bc_type := b_ext_gun ; 17 :
30815: LD_ADDR_OWVAR 42
30819: PUSH
30820: LD_INT 17
30822: ST_TO_ADDR
30823: GO 31185
30825: LD_INT 17
30827: DOUBLE
30828: EQUAL
30829: IFTRUE 30833
30831: GO 30861
30833: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30834: LD_ADDR_OWVAR 42
30838: PUSH
30839: LD_INT 19
30841: PUSH
30842: LD_INT 23
30844: PUSH
30845: LD_INT 19
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: LIST
30852: PUSH
30853: LD_VAR 0 1
30857: ARRAY
30858: ST_TO_ADDR
30859: GO 31185
30861: LD_INT 18
30863: DOUBLE
30864: EQUAL
30865: IFTRUE 30869
30867: GO 30880
30869: POP
// bc_type := b_ext_radar ; 19 :
30870: LD_ADDR_OWVAR 42
30874: PUSH
30875: LD_INT 20
30877: ST_TO_ADDR
30878: GO 31185
30880: LD_INT 19
30882: DOUBLE
30883: EQUAL
30884: IFTRUE 30888
30886: GO 30899
30888: POP
// bc_type := b_ext_radio ; 20 :
30889: LD_ADDR_OWVAR 42
30893: PUSH
30894: LD_INT 22
30896: ST_TO_ADDR
30897: GO 31185
30899: LD_INT 20
30901: DOUBLE
30902: EQUAL
30903: IFTRUE 30907
30905: GO 30918
30907: POP
// bc_type := b_ext_siberium ; 21 :
30908: LD_ADDR_OWVAR 42
30912: PUSH
30913: LD_INT 21
30915: ST_TO_ADDR
30916: GO 31185
30918: LD_INT 21
30920: DOUBLE
30921: EQUAL
30922: IFTRUE 30926
30924: GO 30937
30926: POP
// bc_type := b_ext_computer ; 22 :
30927: LD_ADDR_OWVAR 42
30931: PUSH
30932: LD_INT 24
30934: ST_TO_ADDR
30935: GO 31185
30937: LD_INT 22
30939: DOUBLE
30940: EQUAL
30941: IFTRUE 30945
30943: GO 30956
30945: POP
// bc_type := b_ext_track ; 23 :
30946: LD_ADDR_OWVAR 42
30950: PUSH
30951: LD_INT 16
30953: ST_TO_ADDR
30954: GO 31185
30956: LD_INT 23
30958: DOUBLE
30959: EQUAL
30960: IFTRUE 30964
30962: GO 30975
30964: POP
// bc_type := b_ext_laser ; 24 :
30965: LD_ADDR_OWVAR 42
30969: PUSH
30970: LD_INT 25
30972: ST_TO_ADDR
30973: GO 31185
30975: LD_INT 24
30977: DOUBLE
30978: EQUAL
30979: IFTRUE 30983
30981: GO 30994
30983: POP
// bc_type := b_control_tower ; 25 :
30984: LD_ADDR_OWVAR 42
30988: PUSH
30989: LD_INT 36
30991: ST_TO_ADDR
30992: GO 31185
30994: LD_INT 25
30996: DOUBLE
30997: EQUAL
30998: IFTRUE 31002
31000: GO 31013
31002: POP
// bc_type := b_breastwork ; 26 :
31003: LD_ADDR_OWVAR 42
31007: PUSH
31008: LD_INT 31
31010: ST_TO_ADDR
31011: GO 31185
31013: LD_INT 26
31015: DOUBLE
31016: EQUAL
31017: IFTRUE 31021
31019: GO 31032
31021: POP
// bc_type := b_bunker ; 27 :
31022: LD_ADDR_OWVAR 42
31026: PUSH
31027: LD_INT 32
31029: ST_TO_ADDR
31030: GO 31185
31032: LD_INT 27
31034: DOUBLE
31035: EQUAL
31036: IFTRUE 31040
31038: GO 31051
31040: POP
// bc_type := b_turret ; 28 :
31041: LD_ADDR_OWVAR 42
31045: PUSH
31046: LD_INT 33
31048: ST_TO_ADDR
31049: GO 31185
31051: LD_INT 28
31053: DOUBLE
31054: EQUAL
31055: IFTRUE 31059
31057: GO 31070
31059: POP
// bc_type := b_armoury ; 29 :
31060: LD_ADDR_OWVAR 42
31064: PUSH
31065: LD_INT 4
31067: ST_TO_ADDR
31068: GO 31185
31070: LD_INT 29
31072: DOUBLE
31073: EQUAL
31074: IFTRUE 31078
31076: GO 31089
31078: POP
// bc_type := b_barracks ; 30 :
31079: LD_ADDR_OWVAR 42
31083: PUSH
31084: LD_INT 5
31086: ST_TO_ADDR
31087: GO 31185
31089: LD_INT 30
31091: DOUBLE
31092: EQUAL
31093: IFTRUE 31097
31095: GO 31108
31097: POP
// bc_type := b_solar_power ; 31 :
31098: LD_ADDR_OWVAR 42
31102: PUSH
31103: LD_INT 27
31105: ST_TO_ADDR
31106: GO 31185
31108: LD_INT 31
31110: DOUBLE
31111: EQUAL
31112: IFTRUE 31116
31114: GO 31127
31116: POP
// bc_type := b_oil_power ; 32 :
31117: LD_ADDR_OWVAR 42
31121: PUSH
31122: LD_INT 26
31124: ST_TO_ADDR
31125: GO 31185
31127: LD_INT 32
31129: DOUBLE
31130: EQUAL
31131: IFTRUE 31135
31133: GO 31146
31135: POP
// bc_type := b_siberite_power ; 33 :
31136: LD_ADDR_OWVAR 42
31140: PUSH
31141: LD_INT 28
31143: ST_TO_ADDR
31144: GO 31185
31146: LD_INT 33
31148: DOUBLE
31149: EQUAL
31150: IFTRUE 31154
31152: GO 31165
31154: POP
// bc_type := b_oil_mine ; 34 :
31155: LD_ADDR_OWVAR 42
31159: PUSH
31160: LD_INT 29
31162: ST_TO_ADDR
31163: GO 31185
31165: LD_INT 34
31167: DOUBLE
31168: EQUAL
31169: IFTRUE 31173
31171: GO 31184
31173: POP
// bc_type := b_siberite_mine ; end ;
31174: LD_ADDR_OWVAR 42
31178: PUSH
31179: LD_INT 30
31181: ST_TO_ADDR
31182: GO 31185
31184: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31185: LD_ADDR_VAR 0 8
31189: PUSH
31190: LD_VAR 0 5
31194: PPUSH
31195: LD_VAR 0 6
31199: PPUSH
31200: LD_VAR 0 3
31204: PPUSH
31205: CALL_OW 47
31209: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31210: LD_OWVAR 42
31214: PUSH
31215: LD_INT 32
31217: PUSH
31218: LD_INT 33
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: IN
31225: IFFALSE 31241
// PlaceWeaponTurret ( b , weapon ) ;
31227: LD_VAR 0 8
31231: PPUSH
31232: LD_VAR 0 4
31236: PPUSH
31237: CALL_OW 431
// end ;
31241: LD_VAR 0 7
31245: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31246: LD_INT 0
31248: PPUSH
31249: PPUSH
31250: PPUSH
31251: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31252: LD_ADDR_VAR 0 4
31256: PUSH
31257: LD_INT 22
31259: PUSH
31260: LD_OWVAR 2
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 2
31271: PUSH
31272: LD_INT 30
31274: PUSH
31275: LD_INT 0
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 30
31284: PUSH
31285: LD_INT 1
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: LIST
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PPUSH
31301: CALL_OW 69
31305: ST_TO_ADDR
// if not tmp then
31306: LD_VAR 0 4
31310: NOT
31311: IFFALSE 31315
// exit ;
31313: GO 31374
// for i in tmp do
31315: LD_ADDR_VAR 0 2
31319: PUSH
31320: LD_VAR 0 4
31324: PUSH
31325: FOR_IN
31326: IFFALSE 31372
// for j = 1 to 3 do
31328: LD_ADDR_VAR 0 3
31332: PUSH
31333: DOUBLE
31334: LD_INT 1
31336: DEC
31337: ST_TO_ADDR
31338: LD_INT 3
31340: PUSH
31341: FOR_TO
31342: IFFALSE 31368
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31344: LD_VAR 0 2
31348: PPUSH
31349: CALL_OW 274
31353: PPUSH
31354: LD_VAR 0 3
31358: PPUSH
31359: LD_INT 99999
31361: PPUSH
31362: CALL_OW 277
31366: GO 31341
31368: POP
31369: POP
31370: GO 31325
31372: POP
31373: POP
// end ;
31374: LD_VAR 0 1
31378: RET
// export function hHackSetLevel10 ; var i , j ; begin
31379: LD_INT 0
31381: PPUSH
31382: PPUSH
31383: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31384: LD_ADDR_VAR 0 2
31388: PUSH
31389: LD_INT 21
31391: PUSH
31392: LD_INT 1
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PPUSH
31399: CALL_OW 69
31403: PUSH
31404: FOR_IN
31405: IFFALSE 31457
// if IsSelected ( i ) then
31407: LD_VAR 0 2
31411: PPUSH
31412: CALL_OW 306
31416: IFFALSE 31455
// begin for j := 1 to 4 do
31418: LD_ADDR_VAR 0 3
31422: PUSH
31423: DOUBLE
31424: LD_INT 1
31426: DEC
31427: ST_TO_ADDR
31428: LD_INT 4
31430: PUSH
31431: FOR_TO
31432: IFFALSE 31453
// SetSkill ( i , j , 10 ) ;
31434: LD_VAR 0 2
31438: PPUSH
31439: LD_VAR 0 3
31443: PPUSH
31444: LD_INT 10
31446: PPUSH
31447: CALL_OW 237
31451: GO 31431
31453: POP
31454: POP
// end ;
31455: GO 31404
31457: POP
31458: POP
// end ;
31459: LD_VAR 0 1
31463: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31464: LD_INT 0
31466: PPUSH
31467: PPUSH
31468: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31469: LD_ADDR_VAR 0 2
31473: PUSH
31474: LD_INT 22
31476: PUSH
31477: LD_OWVAR 2
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 21
31488: PUSH
31489: LD_INT 1
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PPUSH
31500: CALL_OW 69
31504: PUSH
31505: FOR_IN
31506: IFFALSE 31547
// begin for j := 1 to 4 do
31508: LD_ADDR_VAR 0 3
31512: PUSH
31513: DOUBLE
31514: LD_INT 1
31516: DEC
31517: ST_TO_ADDR
31518: LD_INT 4
31520: PUSH
31521: FOR_TO
31522: IFFALSE 31543
// SetSkill ( i , j , 10 ) ;
31524: LD_VAR 0 2
31528: PPUSH
31529: LD_VAR 0 3
31533: PPUSH
31534: LD_INT 10
31536: PPUSH
31537: CALL_OW 237
31541: GO 31521
31543: POP
31544: POP
// end ;
31545: GO 31505
31547: POP
31548: POP
// end ;
31549: LD_VAR 0 1
31553: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31554: LD_INT 0
31556: PPUSH
// uc_side := your_side ;
31557: LD_ADDR_OWVAR 20
31561: PUSH
31562: LD_OWVAR 2
31566: ST_TO_ADDR
// uc_nation := nation ;
31567: LD_ADDR_OWVAR 21
31571: PUSH
31572: LD_VAR 0 1
31576: ST_TO_ADDR
// InitHc ;
31577: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31581: LD_INT 0
31583: PPUSH
31584: LD_VAR 0 2
31588: PPUSH
31589: LD_VAR 0 3
31593: PPUSH
31594: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31598: LD_VAR 0 4
31602: PPUSH
31603: LD_VAR 0 5
31607: PPUSH
31608: CALL_OW 428
31612: PUSH
31613: LD_INT 0
31615: EQUAL
31616: IFFALSE 31640
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31618: CALL_OW 44
31622: PPUSH
31623: LD_VAR 0 4
31627: PPUSH
31628: LD_VAR 0 5
31632: PPUSH
31633: LD_INT 1
31635: PPUSH
31636: CALL_OW 48
// end ;
31640: LD_VAR 0 6
31644: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31645: LD_INT 0
31647: PPUSH
31648: PPUSH
// uc_side := your_side ;
31649: LD_ADDR_OWVAR 20
31653: PUSH
31654: LD_OWVAR 2
31658: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31659: LD_VAR 0 1
31663: PUSH
31664: LD_INT 1
31666: PUSH
31667: LD_INT 2
31669: PUSH
31670: LD_INT 3
31672: PUSH
31673: LD_INT 4
31675: PUSH
31676: LD_INT 5
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: IN
31686: IFFALSE 31698
// uc_nation := nation_american else
31688: LD_ADDR_OWVAR 21
31692: PUSH
31693: LD_INT 1
31695: ST_TO_ADDR
31696: GO 31741
// if chassis in [ 11 , 12 , 13 , 14 ] then
31698: LD_VAR 0 1
31702: PUSH
31703: LD_INT 11
31705: PUSH
31706: LD_INT 12
31708: PUSH
31709: LD_INT 13
31711: PUSH
31712: LD_INT 14
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: IN
31721: IFFALSE 31733
// uc_nation := nation_arabian else
31723: LD_ADDR_OWVAR 21
31727: PUSH
31728: LD_INT 2
31730: ST_TO_ADDR
31731: GO 31741
// uc_nation := nation_russian ;
31733: LD_ADDR_OWVAR 21
31737: PUSH
31738: LD_INT 3
31740: ST_TO_ADDR
// vc_chassis := chassis ;
31741: LD_ADDR_OWVAR 37
31745: PUSH
31746: LD_VAR 0 1
31750: ST_TO_ADDR
// vc_engine := engine ;
31751: LD_ADDR_OWVAR 39
31755: PUSH
31756: LD_VAR 0 2
31760: ST_TO_ADDR
// vc_control := control ;
31761: LD_ADDR_OWVAR 38
31765: PUSH
31766: LD_VAR 0 3
31770: ST_TO_ADDR
// vc_weapon := weapon ;
31771: LD_ADDR_OWVAR 40
31775: PUSH
31776: LD_VAR 0 4
31780: ST_TO_ADDR
// un := CreateVehicle ;
31781: LD_ADDR_VAR 0 8
31785: PUSH
31786: CALL_OW 45
31790: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31791: LD_VAR 0 8
31795: PPUSH
31796: LD_INT 0
31798: PPUSH
31799: LD_INT 5
31801: PPUSH
31802: CALL_OW 12
31806: PPUSH
31807: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31811: LD_VAR 0 8
31815: PPUSH
31816: LD_VAR 0 5
31820: PPUSH
31821: LD_VAR 0 6
31825: PPUSH
31826: LD_INT 1
31828: PPUSH
31829: CALL_OW 48
// end ;
31833: LD_VAR 0 7
31837: RET
// export hInvincible ; every 1 do
31838: GO 31840
31840: DISABLE
// hInvincible := [ ] ;
31841: LD_ADDR_EXP 132
31845: PUSH
31846: EMPTY
31847: ST_TO_ADDR
31848: END
// every 10 do var i ;
31849: GO 31851
31851: DISABLE
31852: LD_INT 0
31854: PPUSH
// begin enable ;
31855: ENABLE
// if not hInvincible then
31856: LD_EXP 132
31860: NOT
31861: IFFALSE 31865
// exit ;
31863: GO 31909
// for i in hInvincible do
31865: LD_ADDR_VAR 0 1
31869: PUSH
31870: LD_EXP 132
31874: PUSH
31875: FOR_IN
31876: IFFALSE 31907
// if GetLives ( i ) < 1000 then
31878: LD_VAR 0 1
31882: PPUSH
31883: CALL_OW 256
31887: PUSH
31888: LD_INT 1000
31890: LESS
31891: IFFALSE 31905
// SetLives ( i , 1000 ) ;
31893: LD_VAR 0 1
31897: PPUSH
31898: LD_INT 1000
31900: PPUSH
31901: CALL_OW 234
31905: GO 31875
31907: POP
31908: POP
// end ;
31909: PPOPN 1
31911: END
// export function hHackInvincible ; var i ; begin
31912: LD_INT 0
31914: PPUSH
31915: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31916: LD_ADDR_VAR 0 2
31920: PUSH
31921: LD_INT 2
31923: PUSH
31924: LD_INT 21
31926: PUSH
31927: LD_INT 1
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 21
31936: PUSH
31937: LD_INT 2
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: LIST
31948: PPUSH
31949: CALL_OW 69
31953: PUSH
31954: FOR_IN
31955: IFFALSE 32016
// if IsSelected ( i ) then
31957: LD_VAR 0 2
31961: PPUSH
31962: CALL_OW 306
31966: IFFALSE 32014
// begin if i in hInvincible then
31968: LD_VAR 0 2
31972: PUSH
31973: LD_EXP 132
31977: IN
31978: IFFALSE 31998
// hInvincible := hInvincible diff i else
31980: LD_ADDR_EXP 132
31984: PUSH
31985: LD_EXP 132
31989: PUSH
31990: LD_VAR 0 2
31994: DIFF
31995: ST_TO_ADDR
31996: GO 32014
// hInvincible := hInvincible union i ;
31998: LD_ADDR_EXP 132
32002: PUSH
32003: LD_EXP 132
32007: PUSH
32008: LD_VAR 0 2
32012: UNION
32013: ST_TO_ADDR
// end ;
32014: GO 31954
32016: POP
32017: POP
// end ;
32018: LD_VAR 0 1
32022: RET
// export function hHackInvisible ; var i , j ; begin
32023: LD_INT 0
32025: PPUSH
32026: PPUSH
32027: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32028: LD_ADDR_VAR 0 2
32032: PUSH
32033: LD_INT 21
32035: PUSH
32036: LD_INT 1
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PPUSH
32043: CALL_OW 69
32047: PUSH
32048: FOR_IN
32049: IFFALSE 32073
// if IsSelected ( i ) then
32051: LD_VAR 0 2
32055: PPUSH
32056: CALL_OW 306
32060: IFFALSE 32071
// ComForceInvisible ( i ) ;
32062: LD_VAR 0 2
32066: PPUSH
32067: CALL_OW 496
32071: GO 32048
32073: POP
32074: POP
// end ;
32075: LD_VAR 0 1
32079: RET
// export function hHackChangeYourSide ; begin
32080: LD_INT 0
32082: PPUSH
// if your_side = 8 then
32083: LD_OWVAR 2
32087: PUSH
32088: LD_INT 8
32090: EQUAL
32091: IFFALSE 32103
// your_side := 0 else
32093: LD_ADDR_OWVAR 2
32097: PUSH
32098: LD_INT 0
32100: ST_TO_ADDR
32101: GO 32117
// your_side := your_side + 1 ;
32103: LD_ADDR_OWVAR 2
32107: PUSH
32108: LD_OWVAR 2
32112: PUSH
32113: LD_INT 1
32115: PLUS
32116: ST_TO_ADDR
// end ;
32117: LD_VAR 0 1
32121: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32122: LD_INT 0
32124: PPUSH
32125: PPUSH
32126: PPUSH
// for i in all_units do
32127: LD_ADDR_VAR 0 2
32131: PUSH
32132: LD_OWVAR 3
32136: PUSH
32137: FOR_IN
32138: IFFALSE 32216
// if IsSelected ( i ) then
32140: LD_VAR 0 2
32144: PPUSH
32145: CALL_OW 306
32149: IFFALSE 32214
// begin j := GetSide ( i ) ;
32151: LD_ADDR_VAR 0 3
32155: PUSH
32156: LD_VAR 0 2
32160: PPUSH
32161: CALL_OW 255
32165: ST_TO_ADDR
// if j = 8 then
32166: LD_VAR 0 3
32170: PUSH
32171: LD_INT 8
32173: EQUAL
32174: IFFALSE 32186
// j := 0 else
32176: LD_ADDR_VAR 0 3
32180: PUSH
32181: LD_INT 0
32183: ST_TO_ADDR
32184: GO 32200
// j := j + 1 ;
32186: LD_ADDR_VAR 0 3
32190: PUSH
32191: LD_VAR 0 3
32195: PUSH
32196: LD_INT 1
32198: PLUS
32199: ST_TO_ADDR
// SetSide ( i , j ) ;
32200: LD_VAR 0 2
32204: PPUSH
32205: LD_VAR 0 3
32209: PPUSH
32210: CALL_OW 235
// end ;
32214: GO 32137
32216: POP
32217: POP
// end ;
32218: LD_VAR 0 1
32222: RET
// export function hHackFog ; begin
32223: LD_INT 0
32225: PPUSH
// FogOff ( true ) ;
32226: LD_INT 1
32228: PPUSH
32229: CALL_OW 344
// end ;
32233: LD_VAR 0 1
32237: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32238: LD_INT 0
32240: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32241: LD_VAR 0 1
32245: PPUSH
32246: LD_VAR 0 2
32250: PPUSH
32251: LD_VAR 0 3
32255: PPUSH
32256: LD_INT 1
32258: PPUSH
32259: LD_INT 1
32261: PPUSH
32262: CALL_OW 483
// CenterOnXY ( x , y ) ;
32266: LD_VAR 0 2
32270: PPUSH
32271: LD_VAR 0 3
32275: PPUSH
32276: CALL_OW 84
// end ; end_of_file end_of_file
32280: LD_VAR 0 4
32284: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32285: LD_INT 0
32287: PPUSH
32288: PPUSH
// if exist_mode then
32289: LD_VAR 0 2
32293: IFFALSE 32318
// unit := CreateCharacter ( prefix & ident ) else
32295: LD_ADDR_VAR 0 5
32299: PUSH
32300: LD_VAR 0 3
32304: PUSH
32305: LD_VAR 0 1
32309: STR
32310: PPUSH
32311: CALL_OW 34
32315: ST_TO_ADDR
32316: GO 32333
// unit := NewCharacter ( ident ) ;
32318: LD_ADDR_VAR 0 5
32322: PUSH
32323: LD_VAR 0 1
32327: PPUSH
32328: CALL_OW 25
32332: ST_TO_ADDR
// result := unit ;
32333: LD_ADDR_VAR 0 4
32337: PUSH
32338: LD_VAR 0 5
32342: ST_TO_ADDR
// end ;
32343: LD_VAR 0 4
32347: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32348: LD_INT 0
32350: PPUSH
32351: PPUSH
// if not side or not nation then
32352: LD_VAR 0 1
32356: NOT
32357: PUSH
32358: LD_VAR 0 2
32362: NOT
32363: OR
32364: IFFALSE 32368
// exit ;
32366: GO 33136
// case nation of nation_american :
32368: LD_VAR 0 2
32372: PUSH
32373: LD_INT 1
32375: DOUBLE
32376: EQUAL
32377: IFTRUE 32381
32379: GO 32595
32381: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32382: LD_ADDR_VAR 0 4
32386: PUSH
32387: LD_INT 35
32389: PUSH
32390: LD_INT 45
32392: PUSH
32393: LD_INT 46
32395: PUSH
32396: LD_INT 47
32398: PUSH
32399: LD_INT 82
32401: PUSH
32402: LD_INT 83
32404: PUSH
32405: LD_INT 84
32407: PUSH
32408: LD_INT 85
32410: PUSH
32411: LD_INT 86
32413: PUSH
32414: LD_INT 1
32416: PUSH
32417: LD_INT 2
32419: PUSH
32420: LD_INT 6
32422: PUSH
32423: LD_INT 15
32425: PUSH
32426: LD_INT 16
32428: PUSH
32429: LD_INT 7
32431: PUSH
32432: LD_INT 12
32434: PUSH
32435: LD_INT 13
32437: PUSH
32438: LD_INT 10
32440: PUSH
32441: LD_INT 14
32443: PUSH
32444: LD_INT 20
32446: PUSH
32447: LD_INT 21
32449: PUSH
32450: LD_INT 22
32452: PUSH
32453: LD_INT 25
32455: PUSH
32456: LD_INT 32
32458: PUSH
32459: LD_INT 27
32461: PUSH
32462: LD_INT 36
32464: PUSH
32465: LD_INT 69
32467: PUSH
32468: LD_INT 39
32470: PUSH
32471: LD_INT 34
32473: PUSH
32474: LD_INT 40
32476: PUSH
32477: LD_INT 48
32479: PUSH
32480: LD_INT 49
32482: PUSH
32483: LD_INT 50
32485: PUSH
32486: LD_INT 51
32488: PUSH
32489: LD_INT 52
32491: PUSH
32492: LD_INT 53
32494: PUSH
32495: LD_INT 54
32497: PUSH
32498: LD_INT 55
32500: PUSH
32501: LD_INT 56
32503: PUSH
32504: LD_INT 57
32506: PUSH
32507: LD_INT 58
32509: PUSH
32510: LD_INT 59
32512: PUSH
32513: LD_INT 60
32515: PUSH
32516: LD_INT 61
32518: PUSH
32519: LD_INT 62
32521: PUSH
32522: LD_INT 80
32524: PUSH
32525: LD_INT 82
32527: PUSH
32528: LD_INT 83
32530: PUSH
32531: LD_INT 84
32533: PUSH
32534: LD_INT 85
32536: PUSH
32537: LD_INT 86
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: ST_TO_ADDR
32593: GO 33060
32595: LD_INT 2
32597: DOUBLE
32598: EQUAL
32599: IFTRUE 32603
32601: GO 32829
32603: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32604: LD_ADDR_VAR 0 4
32608: PUSH
32609: LD_INT 35
32611: PUSH
32612: LD_INT 45
32614: PUSH
32615: LD_INT 46
32617: PUSH
32618: LD_INT 47
32620: PUSH
32621: LD_INT 82
32623: PUSH
32624: LD_INT 83
32626: PUSH
32627: LD_INT 84
32629: PUSH
32630: LD_INT 85
32632: PUSH
32633: LD_INT 87
32635: PUSH
32636: LD_INT 70
32638: PUSH
32639: LD_INT 1
32641: PUSH
32642: LD_INT 11
32644: PUSH
32645: LD_INT 3
32647: PUSH
32648: LD_INT 4
32650: PUSH
32651: LD_INT 5
32653: PUSH
32654: LD_INT 6
32656: PUSH
32657: LD_INT 15
32659: PUSH
32660: LD_INT 18
32662: PUSH
32663: LD_INT 7
32665: PUSH
32666: LD_INT 17
32668: PUSH
32669: LD_INT 8
32671: PUSH
32672: LD_INT 20
32674: PUSH
32675: LD_INT 21
32677: PUSH
32678: LD_INT 22
32680: PUSH
32681: LD_INT 72
32683: PUSH
32684: LD_INT 26
32686: PUSH
32687: LD_INT 69
32689: PUSH
32690: LD_INT 39
32692: PUSH
32693: LD_INT 40
32695: PUSH
32696: LD_INT 41
32698: PUSH
32699: LD_INT 42
32701: PUSH
32702: LD_INT 43
32704: PUSH
32705: LD_INT 48
32707: PUSH
32708: LD_INT 49
32710: PUSH
32711: LD_INT 50
32713: PUSH
32714: LD_INT 51
32716: PUSH
32717: LD_INT 52
32719: PUSH
32720: LD_INT 53
32722: PUSH
32723: LD_INT 54
32725: PUSH
32726: LD_INT 55
32728: PUSH
32729: LD_INT 56
32731: PUSH
32732: LD_INT 60
32734: PUSH
32735: LD_INT 61
32737: PUSH
32738: LD_INT 62
32740: PUSH
32741: LD_INT 66
32743: PUSH
32744: LD_INT 67
32746: PUSH
32747: LD_INT 68
32749: PUSH
32750: LD_INT 81
32752: PUSH
32753: LD_INT 82
32755: PUSH
32756: LD_INT 83
32758: PUSH
32759: LD_INT 84
32761: PUSH
32762: LD_INT 85
32764: PUSH
32765: LD_INT 87
32767: PUSH
32768: LD_INT 88
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: ST_TO_ADDR
32827: GO 33060
32829: LD_INT 3
32831: DOUBLE
32832: EQUAL
32833: IFTRUE 32837
32835: GO 33059
32837: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32838: LD_ADDR_VAR 0 4
32842: PUSH
32843: LD_INT 46
32845: PUSH
32846: LD_INT 47
32848: PUSH
32849: LD_INT 1
32851: PUSH
32852: LD_INT 2
32854: PUSH
32855: LD_INT 82
32857: PUSH
32858: LD_INT 83
32860: PUSH
32861: LD_INT 84
32863: PUSH
32864: LD_INT 85
32866: PUSH
32867: LD_INT 86
32869: PUSH
32870: LD_INT 11
32872: PUSH
32873: LD_INT 9
32875: PUSH
32876: LD_INT 20
32878: PUSH
32879: LD_INT 19
32881: PUSH
32882: LD_INT 21
32884: PUSH
32885: LD_INT 24
32887: PUSH
32888: LD_INT 22
32890: PUSH
32891: LD_INT 25
32893: PUSH
32894: LD_INT 28
32896: PUSH
32897: LD_INT 29
32899: PUSH
32900: LD_INT 30
32902: PUSH
32903: LD_INT 31
32905: PUSH
32906: LD_INT 37
32908: PUSH
32909: LD_INT 38
32911: PUSH
32912: LD_INT 32
32914: PUSH
32915: LD_INT 27
32917: PUSH
32918: LD_INT 33
32920: PUSH
32921: LD_INT 69
32923: PUSH
32924: LD_INT 39
32926: PUSH
32927: LD_INT 34
32929: PUSH
32930: LD_INT 40
32932: PUSH
32933: LD_INT 71
32935: PUSH
32936: LD_INT 23
32938: PUSH
32939: LD_INT 44
32941: PUSH
32942: LD_INT 48
32944: PUSH
32945: LD_INT 49
32947: PUSH
32948: LD_INT 50
32950: PUSH
32951: LD_INT 51
32953: PUSH
32954: LD_INT 52
32956: PUSH
32957: LD_INT 53
32959: PUSH
32960: LD_INT 54
32962: PUSH
32963: LD_INT 55
32965: PUSH
32966: LD_INT 56
32968: PUSH
32969: LD_INT 57
32971: PUSH
32972: LD_INT 58
32974: PUSH
32975: LD_INT 59
32977: PUSH
32978: LD_INT 63
32980: PUSH
32981: LD_INT 64
32983: PUSH
32984: LD_INT 65
32986: PUSH
32987: LD_INT 82
32989: PUSH
32990: LD_INT 83
32992: PUSH
32993: LD_INT 84
32995: PUSH
32996: LD_INT 85
32998: PUSH
32999: LD_INT 86
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: ST_TO_ADDR
33057: GO 33060
33059: POP
// if state > - 1 and state < 3 then
33060: LD_VAR 0 3
33064: PUSH
33065: LD_INT 1
33067: NEG
33068: GREATER
33069: PUSH
33070: LD_VAR 0 3
33074: PUSH
33075: LD_INT 3
33077: LESS
33078: AND
33079: IFFALSE 33136
// for i in result do
33081: LD_ADDR_VAR 0 5
33085: PUSH
33086: LD_VAR 0 4
33090: PUSH
33091: FOR_IN
33092: IFFALSE 33134
// if GetTech ( i , side ) <> state then
33094: LD_VAR 0 5
33098: PPUSH
33099: LD_VAR 0 1
33103: PPUSH
33104: CALL_OW 321
33108: PUSH
33109: LD_VAR 0 3
33113: NONEQUAL
33114: IFFALSE 33132
// result := result diff i ;
33116: LD_ADDR_VAR 0 4
33120: PUSH
33121: LD_VAR 0 4
33125: PUSH
33126: LD_VAR 0 5
33130: DIFF
33131: ST_TO_ADDR
33132: GO 33091
33134: POP
33135: POP
// end ;
33136: LD_VAR 0 4
33140: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33141: LD_INT 0
33143: PPUSH
33144: PPUSH
33145: PPUSH
// result := true ;
33146: LD_ADDR_VAR 0 3
33150: PUSH
33151: LD_INT 1
33153: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33154: LD_ADDR_VAR 0 5
33158: PUSH
33159: LD_VAR 0 2
33163: PPUSH
33164: CALL_OW 480
33168: ST_TO_ADDR
// if not tmp then
33169: LD_VAR 0 5
33173: NOT
33174: IFFALSE 33178
// exit ;
33176: GO 33227
// for i in tmp do
33178: LD_ADDR_VAR 0 4
33182: PUSH
33183: LD_VAR 0 5
33187: PUSH
33188: FOR_IN
33189: IFFALSE 33225
// if GetTech ( i , side ) <> state_researched then
33191: LD_VAR 0 4
33195: PPUSH
33196: LD_VAR 0 1
33200: PPUSH
33201: CALL_OW 321
33205: PUSH
33206: LD_INT 2
33208: NONEQUAL
33209: IFFALSE 33223
// begin result := false ;
33211: LD_ADDR_VAR 0 3
33215: PUSH
33216: LD_INT 0
33218: ST_TO_ADDR
// exit ;
33219: POP
33220: POP
33221: GO 33227
// end ;
33223: GO 33188
33225: POP
33226: POP
// end ;
33227: LD_VAR 0 3
33231: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33232: LD_INT 0
33234: PPUSH
33235: PPUSH
33236: PPUSH
33237: PPUSH
33238: PPUSH
33239: PPUSH
33240: PPUSH
33241: PPUSH
33242: PPUSH
33243: PPUSH
33244: PPUSH
33245: PPUSH
33246: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33247: LD_VAR 0 1
33251: NOT
33252: PUSH
33253: LD_VAR 0 1
33257: PPUSH
33258: CALL_OW 257
33262: PUSH
33263: LD_INT 9
33265: NONEQUAL
33266: OR
33267: IFFALSE 33271
// exit ;
33269: GO 33844
// side := GetSide ( unit ) ;
33271: LD_ADDR_VAR 0 9
33275: PUSH
33276: LD_VAR 0 1
33280: PPUSH
33281: CALL_OW 255
33285: ST_TO_ADDR
// tech_space := tech_spacanom ;
33286: LD_ADDR_VAR 0 12
33290: PUSH
33291: LD_INT 29
33293: ST_TO_ADDR
// tech_time := tech_taurad ;
33294: LD_ADDR_VAR 0 13
33298: PUSH
33299: LD_INT 28
33301: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33302: LD_ADDR_VAR 0 11
33306: PUSH
33307: LD_VAR 0 1
33311: PPUSH
33312: CALL_OW 310
33316: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33317: LD_VAR 0 11
33321: PPUSH
33322: CALL_OW 247
33326: PUSH
33327: LD_INT 2
33329: EQUAL
33330: IFFALSE 33334
// exit ;
33332: GO 33844
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33334: LD_ADDR_VAR 0 8
33338: PUSH
33339: LD_INT 81
33341: PUSH
33342: LD_VAR 0 9
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 3
33353: PUSH
33354: LD_INT 21
33356: PUSH
33357: LD_INT 3
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PPUSH
33372: CALL_OW 69
33376: ST_TO_ADDR
// if not tmp then
33377: LD_VAR 0 8
33381: NOT
33382: IFFALSE 33386
// exit ;
33384: GO 33844
// if in_unit then
33386: LD_VAR 0 11
33390: IFFALSE 33414
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33392: LD_ADDR_VAR 0 10
33396: PUSH
33397: LD_VAR 0 8
33401: PPUSH
33402: LD_VAR 0 11
33406: PPUSH
33407: CALL_OW 74
33411: ST_TO_ADDR
33412: GO 33434
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33414: LD_ADDR_VAR 0 10
33418: PUSH
33419: LD_VAR 0 8
33423: PPUSH
33424: LD_VAR 0 1
33428: PPUSH
33429: CALL_OW 74
33433: ST_TO_ADDR
// if not enemy then
33434: LD_VAR 0 10
33438: NOT
33439: IFFALSE 33443
// exit ;
33441: GO 33844
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33443: LD_VAR 0 11
33447: PUSH
33448: LD_VAR 0 11
33452: PPUSH
33453: LD_VAR 0 10
33457: PPUSH
33458: CALL_OW 296
33462: PUSH
33463: LD_INT 13
33465: GREATER
33466: AND
33467: PUSH
33468: LD_VAR 0 1
33472: PPUSH
33473: LD_VAR 0 10
33477: PPUSH
33478: CALL_OW 296
33482: PUSH
33483: LD_INT 12
33485: GREATER
33486: OR
33487: IFFALSE 33491
// exit ;
33489: GO 33844
// missile := [ 1 ] ;
33491: LD_ADDR_VAR 0 14
33495: PUSH
33496: LD_INT 1
33498: PUSH
33499: EMPTY
33500: LIST
33501: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33502: LD_VAR 0 9
33506: PPUSH
33507: LD_VAR 0 12
33511: PPUSH
33512: CALL_OW 325
33516: IFFALSE 33545
// missile := Insert ( missile , missile + 1 , 2 ) ;
33518: LD_ADDR_VAR 0 14
33522: PUSH
33523: LD_VAR 0 14
33527: PPUSH
33528: LD_VAR 0 14
33532: PUSH
33533: LD_INT 1
33535: PLUS
33536: PPUSH
33537: LD_INT 2
33539: PPUSH
33540: CALL_OW 2
33544: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33545: LD_VAR 0 9
33549: PPUSH
33550: LD_VAR 0 13
33554: PPUSH
33555: CALL_OW 325
33559: PUSH
33560: LD_VAR 0 10
33564: PPUSH
33565: CALL_OW 255
33569: PPUSH
33570: LD_VAR 0 13
33574: PPUSH
33575: CALL_OW 325
33579: NOT
33580: AND
33581: IFFALSE 33610
// missile := Insert ( missile , missile + 1 , 3 ) ;
33583: LD_ADDR_VAR 0 14
33587: PUSH
33588: LD_VAR 0 14
33592: PPUSH
33593: LD_VAR 0 14
33597: PUSH
33598: LD_INT 1
33600: PLUS
33601: PPUSH
33602: LD_INT 3
33604: PPUSH
33605: CALL_OW 2
33609: ST_TO_ADDR
// if missile < 2 then
33610: LD_VAR 0 14
33614: PUSH
33615: LD_INT 2
33617: LESS
33618: IFFALSE 33622
// exit ;
33620: GO 33844
// x := GetX ( enemy ) ;
33622: LD_ADDR_VAR 0 4
33626: PUSH
33627: LD_VAR 0 10
33631: PPUSH
33632: CALL_OW 250
33636: ST_TO_ADDR
// y := GetY ( enemy ) ;
33637: LD_ADDR_VAR 0 5
33641: PUSH
33642: LD_VAR 0 10
33646: PPUSH
33647: CALL_OW 251
33651: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33652: LD_ADDR_VAR 0 6
33656: PUSH
33657: LD_VAR 0 4
33661: PUSH
33662: LD_INT 1
33664: NEG
33665: PPUSH
33666: LD_INT 1
33668: PPUSH
33669: CALL_OW 12
33673: PLUS
33674: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33675: LD_ADDR_VAR 0 7
33679: PUSH
33680: LD_VAR 0 5
33684: PUSH
33685: LD_INT 1
33687: NEG
33688: PPUSH
33689: LD_INT 1
33691: PPUSH
33692: CALL_OW 12
33696: PLUS
33697: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33698: LD_VAR 0 6
33702: PPUSH
33703: LD_VAR 0 7
33707: PPUSH
33708: CALL_OW 488
33712: NOT
33713: IFFALSE 33735
// begin _x := x ;
33715: LD_ADDR_VAR 0 6
33719: PUSH
33720: LD_VAR 0 4
33724: ST_TO_ADDR
// _y := y ;
33725: LD_ADDR_VAR 0 7
33729: PUSH
33730: LD_VAR 0 5
33734: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33735: LD_ADDR_VAR 0 3
33739: PUSH
33740: LD_INT 1
33742: PPUSH
33743: LD_VAR 0 14
33747: PPUSH
33748: CALL_OW 12
33752: ST_TO_ADDR
// case i of 1 :
33753: LD_VAR 0 3
33757: PUSH
33758: LD_INT 1
33760: DOUBLE
33761: EQUAL
33762: IFTRUE 33766
33764: GO 33783
33766: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33767: LD_VAR 0 1
33771: PPUSH
33772: LD_VAR 0 10
33776: PPUSH
33777: CALL_OW 115
33781: GO 33844
33783: LD_INT 2
33785: DOUBLE
33786: EQUAL
33787: IFTRUE 33791
33789: GO 33813
33791: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33792: LD_VAR 0 1
33796: PPUSH
33797: LD_VAR 0 6
33801: PPUSH
33802: LD_VAR 0 7
33806: PPUSH
33807: CALL_OW 153
33811: GO 33844
33813: LD_INT 3
33815: DOUBLE
33816: EQUAL
33817: IFTRUE 33821
33819: GO 33843
33821: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33822: LD_VAR 0 1
33826: PPUSH
33827: LD_VAR 0 6
33831: PPUSH
33832: LD_VAR 0 7
33836: PPUSH
33837: CALL_OW 154
33841: GO 33844
33843: POP
// end ;
33844: LD_VAR 0 2
33848: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33849: LD_INT 0
33851: PPUSH
33852: PPUSH
33853: PPUSH
33854: PPUSH
33855: PPUSH
33856: PPUSH
// if not unit or not building then
33857: LD_VAR 0 1
33861: NOT
33862: PUSH
33863: LD_VAR 0 2
33867: NOT
33868: OR
33869: IFFALSE 33873
// exit ;
33871: GO 34031
// x := GetX ( building ) ;
33873: LD_ADDR_VAR 0 5
33877: PUSH
33878: LD_VAR 0 2
33882: PPUSH
33883: CALL_OW 250
33887: ST_TO_ADDR
// y := GetY ( building ) ;
33888: LD_ADDR_VAR 0 6
33892: PUSH
33893: LD_VAR 0 2
33897: PPUSH
33898: CALL_OW 251
33902: ST_TO_ADDR
// for i = 0 to 5 do
33903: LD_ADDR_VAR 0 4
33907: PUSH
33908: DOUBLE
33909: LD_INT 0
33911: DEC
33912: ST_TO_ADDR
33913: LD_INT 5
33915: PUSH
33916: FOR_TO
33917: IFFALSE 34029
// begin _x := ShiftX ( x , i , 3 ) ;
33919: LD_ADDR_VAR 0 7
33923: PUSH
33924: LD_VAR 0 5
33928: PPUSH
33929: LD_VAR 0 4
33933: PPUSH
33934: LD_INT 3
33936: PPUSH
33937: CALL_OW 272
33941: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33942: LD_ADDR_VAR 0 8
33946: PUSH
33947: LD_VAR 0 6
33951: PPUSH
33952: LD_VAR 0 4
33956: PPUSH
33957: LD_INT 3
33959: PPUSH
33960: CALL_OW 273
33964: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33965: LD_VAR 0 7
33969: PPUSH
33970: LD_VAR 0 8
33974: PPUSH
33975: CALL_OW 488
33979: NOT
33980: IFFALSE 33984
// continue ;
33982: GO 33916
// if HexInfo ( _x , _y ) = 0 then
33984: LD_VAR 0 7
33988: PPUSH
33989: LD_VAR 0 8
33993: PPUSH
33994: CALL_OW 428
33998: PUSH
33999: LD_INT 0
34001: EQUAL
34002: IFFALSE 34027
// begin ComMoveXY ( unit , _x , _y ) ;
34004: LD_VAR 0 1
34008: PPUSH
34009: LD_VAR 0 7
34013: PPUSH
34014: LD_VAR 0 8
34018: PPUSH
34019: CALL_OW 111
// exit ;
34023: POP
34024: POP
34025: GO 34031
// end ; end ;
34027: GO 33916
34029: POP
34030: POP
// end ;
34031: LD_VAR 0 3
34035: RET
// export function ScanBase ( side , base_area ) ; begin
34036: LD_INT 0
34038: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34039: LD_ADDR_VAR 0 3
34043: PUSH
34044: LD_VAR 0 2
34048: PPUSH
34049: LD_INT 81
34051: PUSH
34052: LD_VAR 0 1
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PPUSH
34061: CALL_OW 70
34065: ST_TO_ADDR
// end ;
34066: LD_VAR 0 3
34070: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34071: LD_INT 0
34073: PPUSH
34074: PPUSH
34075: PPUSH
34076: PPUSH
// result := false ;
34077: LD_ADDR_VAR 0 2
34081: PUSH
34082: LD_INT 0
34084: ST_TO_ADDR
// side := GetSide ( unit ) ;
34085: LD_ADDR_VAR 0 3
34089: PUSH
34090: LD_VAR 0 1
34094: PPUSH
34095: CALL_OW 255
34099: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34100: LD_ADDR_VAR 0 4
34104: PUSH
34105: LD_VAR 0 1
34109: PPUSH
34110: CALL_OW 248
34114: ST_TO_ADDR
// case nat of 1 :
34115: LD_VAR 0 4
34119: PUSH
34120: LD_INT 1
34122: DOUBLE
34123: EQUAL
34124: IFTRUE 34128
34126: GO 34139
34128: POP
// tech := tech_lassight ; 2 :
34129: LD_ADDR_VAR 0 5
34133: PUSH
34134: LD_INT 12
34136: ST_TO_ADDR
34137: GO 34178
34139: LD_INT 2
34141: DOUBLE
34142: EQUAL
34143: IFTRUE 34147
34145: GO 34158
34147: POP
// tech := tech_mortar ; 3 :
34148: LD_ADDR_VAR 0 5
34152: PUSH
34153: LD_INT 41
34155: ST_TO_ADDR
34156: GO 34178
34158: LD_INT 3
34160: DOUBLE
34161: EQUAL
34162: IFTRUE 34166
34164: GO 34177
34166: POP
// tech := tech_bazooka ; end ;
34167: LD_ADDR_VAR 0 5
34171: PUSH
34172: LD_INT 44
34174: ST_TO_ADDR
34175: GO 34178
34177: POP
// if Researched ( side , tech ) then
34178: LD_VAR 0 3
34182: PPUSH
34183: LD_VAR 0 5
34187: PPUSH
34188: CALL_OW 325
34192: IFFALSE 34219
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34194: LD_ADDR_VAR 0 2
34198: PUSH
34199: LD_INT 5
34201: PUSH
34202: LD_INT 8
34204: PUSH
34205: LD_INT 9
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: LIST
34212: PUSH
34213: LD_VAR 0 4
34217: ARRAY
34218: ST_TO_ADDR
// end ;
34219: LD_VAR 0 2
34223: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34224: LD_INT 0
34226: PPUSH
34227: PPUSH
34228: PPUSH
// if not mines then
34229: LD_VAR 0 2
34233: NOT
34234: IFFALSE 34238
// exit ;
34236: GO 34382
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34238: LD_ADDR_VAR 0 5
34242: PUSH
34243: LD_INT 81
34245: PUSH
34246: LD_VAR 0 1
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 3
34257: PUSH
34258: LD_INT 21
34260: PUSH
34261: LD_INT 3
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PPUSH
34276: CALL_OW 69
34280: ST_TO_ADDR
// for i in mines do
34281: LD_ADDR_VAR 0 4
34285: PUSH
34286: LD_VAR 0 2
34290: PUSH
34291: FOR_IN
34292: IFFALSE 34380
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34294: LD_VAR 0 4
34298: PUSH
34299: LD_INT 1
34301: ARRAY
34302: PPUSH
34303: LD_VAR 0 4
34307: PUSH
34308: LD_INT 2
34310: ARRAY
34311: PPUSH
34312: CALL_OW 458
34316: NOT
34317: IFFALSE 34321
// continue ;
34319: GO 34291
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34321: LD_VAR 0 4
34325: PUSH
34326: LD_INT 1
34328: ARRAY
34329: PPUSH
34330: LD_VAR 0 4
34334: PUSH
34335: LD_INT 2
34337: ARRAY
34338: PPUSH
34339: CALL_OW 428
34343: PUSH
34344: LD_VAR 0 5
34348: IN
34349: IFFALSE 34378
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34351: LD_VAR 0 4
34355: PUSH
34356: LD_INT 1
34358: ARRAY
34359: PPUSH
34360: LD_VAR 0 4
34364: PUSH
34365: LD_INT 2
34367: ARRAY
34368: PPUSH
34369: LD_VAR 0 1
34373: PPUSH
34374: CALL_OW 456
// end ;
34378: GO 34291
34380: POP
34381: POP
// end ;
34382: LD_VAR 0 3
34386: RET
// export function Count ( array ) ; var i ; begin
34387: LD_INT 0
34389: PPUSH
34390: PPUSH
// result := 0 ;
34391: LD_ADDR_VAR 0 2
34395: PUSH
34396: LD_INT 0
34398: ST_TO_ADDR
// for i in array do
34399: LD_ADDR_VAR 0 3
34403: PUSH
34404: LD_VAR 0 1
34408: PUSH
34409: FOR_IN
34410: IFFALSE 34434
// if i then
34412: LD_VAR 0 3
34416: IFFALSE 34432
// result := result + 1 ;
34418: LD_ADDR_VAR 0 2
34422: PUSH
34423: LD_VAR 0 2
34427: PUSH
34428: LD_INT 1
34430: PLUS
34431: ST_TO_ADDR
34432: GO 34409
34434: POP
34435: POP
// end ;
34436: LD_VAR 0 2
34440: RET
// export function IsEmpty ( building ) ; begin
34441: LD_INT 0
34443: PPUSH
// if not building then
34444: LD_VAR 0 1
34448: NOT
34449: IFFALSE 34453
// exit ;
34451: GO 34496
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34453: LD_ADDR_VAR 0 2
34457: PUSH
34458: LD_VAR 0 1
34462: PUSH
34463: LD_INT 22
34465: PUSH
34466: LD_VAR 0 1
34470: PPUSH
34471: CALL_OW 255
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 58
34482: PUSH
34483: EMPTY
34484: LIST
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PPUSH
34490: CALL_OW 69
34494: IN
34495: ST_TO_ADDR
// end ;
34496: LD_VAR 0 2
34500: RET
// export function IsNotFull ( building ) ; begin
34501: LD_INT 0
34503: PPUSH
// if not building then
34504: LD_VAR 0 1
34508: NOT
34509: IFFALSE 34513
// exit ;
34511: GO 34532
// result := UnitsInside ( building ) < 6 ;
34513: LD_ADDR_VAR 0 2
34517: PUSH
34518: LD_VAR 0 1
34522: PPUSH
34523: CALL_OW 313
34527: PUSH
34528: LD_INT 6
34530: LESS
34531: ST_TO_ADDR
// end ;
34532: LD_VAR 0 2
34536: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34537: LD_INT 0
34539: PPUSH
34540: PPUSH
34541: PPUSH
34542: PPUSH
// tmp := [ ] ;
34543: LD_ADDR_VAR 0 3
34547: PUSH
34548: EMPTY
34549: ST_TO_ADDR
// list := [ ] ;
34550: LD_ADDR_VAR 0 5
34554: PUSH
34555: EMPTY
34556: ST_TO_ADDR
// for i = 16 to 25 do
34557: LD_ADDR_VAR 0 4
34561: PUSH
34562: DOUBLE
34563: LD_INT 16
34565: DEC
34566: ST_TO_ADDR
34567: LD_INT 25
34569: PUSH
34570: FOR_TO
34571: IFFALSE 34644
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34573: LD_ADDR_VAR 0 3
34577: PUSH
34578: LD_VAR 0 3
34582: PUSH
34583: LD_INT 22
34585: PUSH
34586: LD_VAR 0 1
34590: PPUSH
34591: CALL_OW 255
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 91
34602: PUSH
34603: LD_VAR 0 1
34607: PUSH
34608: LD_INT 6
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: LIST
34615: PUSH
34616: LD_INT 30
34618: PUSH
34619: LD_VAR 0 4
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: LIST
34632: PUSH
34633: EMPTY
34634: LIST
34635: PPUSH
34636: CALL_OW 69
34640: ADD
34641: ST_TO_ADDR
34642: GO 34570
34644: POP
34645: POP
// for i = 1 to tmp do
34646: LD_ADDR_VAR 0 4
34650: PUSH
34651: DOUBLE
34652: LD_INT 1
34654: DEC
34655: ST_TO_ADDR
34656: LD_VAR 0 3
34660: PUSH
34661: FOR_TO
34662: IFFALSE 34750
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34664: LD_ADDR_VAR 0 5
34668: PUSH
34669: LD_VAR 0 5
34673: PUSH
34674: LD_VAR 0 3
34678: PUSH
34679: LD_VAR 0 4
34683: ARRAY
34684: PPUSH
34685: CALL_OW 266
34689: PUSH
34690: LD_VAR 0 3
34694: PUSH
34695: LD_VAR 0 4
34699: ARRAY
34700: PPUSH
34701: CALL_OW 250
34705: PUSH
34706: LD_VAR 0 3
34710: PUSH
34711: LD_VAR 0 4
34715: ARRAY
34716: PPUSH
34717: CALL_OW 251
34721: PUSH
34722: LD_VAR 0 3
34726: PUSH
34727: LD_VAR 0 4
34731: ARRAY
34732: PPUSH
34733: CALL_OW 254
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: PUSH
34744: EMPTY
34745: LIST
34746: ADD
34747: ST_TO_ADDR
34748: GO 34661
34750: POP
34751: POP
// result := list ;
34752: LD_ADDR_VAR 0 2
34756: PUSH
34757: LD_VAR 0 5
34761: ST_TO_ADDR
// end ;
34762: LD_VAR 0 2
34766: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34767: LD_INT 0
34769: PPUSH
34770: PPUSH
34771: PPUSH
34772: PPUSH
34773: PPUSH
34774: PPUSH
34775: PPUSH
// if not factory then
34776: LD_VAR 0 1
34780: NOT
34781: IFFALSE 34785
// exit ;
34783: GO 35378
// if control = control_apeman then
34785: LD_VAR 0 4
34789: PUSH
34790: LD_INT 5
34792: EQUAL
34793: IFFALSE 34902
// begin tmp := UnitsInside ( factory ) ;
34795: LD_ADDR_VAR 0 8
34799: PUSH
34800: LD_VAR 0 1
34804: PPUSH
34805: CALL_OW 313
34809: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34810: LD_VAR 0 8
34814: PPUSH
34815: LD_INT 25
34817: PUSH
34818: LD_INT 12
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PPUSH
34825: CALL_OW 72
34829: NOT
34830: IFFALSE 34840
// control := control_manual ;
34832: LD_ADDR_VAR 0 4
34836: PUSH
34837: LD_INT 1
34839: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34840: LD_ADDR_VAR 0 8
34844: PUSH
34845: LD_VAR 0 1
34849: PPUSH
34850: CALL 34537 0 1
34854: ST_TO_ADDR
// if tmp then
34855: LD_VAR 0 8
34859: IFFALSE 34902
// begin for i in tmp do
34861: LD_ADDR_VAR 0 7
34865: PUSH
34866: LD_VAR 0 8
34870: PUSH
34871: FOR_IN
34872: IFFALSE 34900
// if i [ 1 ] = b_ext_radio then
34874: LD_VAR 0 7
34878: PUSH
34879: LD_INT 1
34881: ARRAY
34882: PUSH
34883: LD_INT 22
34885: EQUAL
34886: IFFALSE 34898
// begin control := control_remote ;
34888: LD_ADDR_VAR 0 4
34892: PUSH
34893: LD_INT 2
34895: ST_TO_ADDR
// break ;
34896: GO 34900
// end ;
34898: GO 34871
34900: POP
34901: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34902: LD_VAR 0 1
34906: PPUSH
34907: LD_VAR 0 2
34911: PPUSH
34912: LD_VAR 0 3
34916: PPUSH
34917: LD_VAR 0 4
34921: PPUSH
34922: LD_VAR 0 5
34926: PPUSH
34927: CALL_OW 448
34931: IFFALSE 34966
// begin result := [ chassis , engine , control , weapon ] ;
34933: LD_ADDR_VAR 0 6
34937: PUSH
34938: LD_VAR 0 2
34942: PUSH
34943: LD_VAR 0 3
34947: PUSH
34948: LD_VAR 0 4
34952: PUSH
34953: LD_VAR 0 5
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: ST_TO_ADDR
// exit ;
34964: GO 35378
// end ; _chassis := AvailableChassisList ( factory ) ;
34966: LD_ADDR_VAR 0 9
34970: PUSH
34971: LD_VAR 0 1
34975: PPUSH
34976: CALL_OW 475
34980: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34981: LD_ADDR_VAR 0 11
34985: PUSH
34986: LD_VAR 0 1
34990: PPUSH
34991: CALL_OW 476
34995: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34996: LD_ADDR_VAR 0 12
35000: PUSH
35001: LD_VAR 0 1
35005: PPUSH
35006: CALL_OW 477
35010: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35011: LD_ADDR_VAR 0 10
35015: PUSH
35016: LD_VAR 0 1
35020: PPUSH
35021: CALL_OW 478
35025: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35026: LD_VAR 0 9
35030: NOT
35031: PUSH
35032: LD_VAR 0 11
35036: NOT
35037: OR
35038: PUSH
35039: LD_VAR 0 12
35043: NOT
35044: OR
35045: PUSH
35046: LD_VAR 0 10
35050: NOT
35051: OR
35052: IFFALSE 35087
// begin result := [ chassis , engine , control , weapon ] ;
35054: LD_ADDR_VAR 0 6
35058: PUSH
35059: LD_VAR 0 2
35063: PUSH
35064: LD_VAR 0 3
35068: PUSH
35069: LD_VAR 0 4
35073: PUSH
35074: LD_VAR 0 5
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: ST_TO_ADDR
// exit ;
35085: GO 35378
// end ; if not chassis in _chassis then
35087: LD_VAR 0 2
35091: PUSH
35092: LD_VAR 0 9
35096: IN
35097: NOT
35098: IFFALSE 35124
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35100: LD_ADDR_VAR 0 2
35104: PUSH
35105: LD_VAR 0 9
35109: PUSH
35110: LD_INT 1
35112: PPUSH
35113: LD_VAR 0 9
35117: PPUSH
35118: CALL_OW 12
35122: ARRAY
35123: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35124: LD_VAR 0 2
35128: PPUSH
35129: LD_VAR 0 3
35133: PPUSH
35134: CALL 35383 0 2
35138: NOT
35139: IFFALSE 35198
// repeat engine := _engine [ 1 ] ;
35141: LD_ADDR_VAR 0 3
35145: PUSH
35146: LD_VAR 0 11
35150: PUSH
35151: LD_INT 1
35153: ARRAY
35154: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35155: LD_ADDR_VAR 0 11
35159: PUSH
35160: LD_VAR 0 11
35164: PPUSH
35165: LD_INT 1
35167: PPUSH
35168: CALL_OW 3
35172: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35173: LD_VAR 0 2
35177: PPUSH
35178: LD_VAR 0 3
35182: PPUSH
35183: CALL 35383 0 2
35187: PUSH
35188: LD_VAR 0 11
35192: PUSH
35193: EMPTY
35194: EQUAL
35195: OR
35196: IFFALSE 35141
// if not control in _control then
35198: LD_VAR 0 4
35202: PUSH
35203: LD_VAR 0 12
35207: IN
35208: NOT
35209: IFFALSE 35235
// control := _control [ rand ( 1 , _control ) ] ;
35211: LD_ADDR_VAR 0 4
35215: PUSH
35216: LD_VAR 0 12
35220: PUSH
35221: LD_INT 1
35223: PPUSH
35224: LD_VAR 0 12
35228: PPUSH
35229: CALL_OW 12
35233: ARRAY
35234: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35235: LD_VAR 0 2
35239: PPUSH
35240: LD_VAR 0 5
35244: PPUSH
35245: CALL 35603 0 2
35249: NOT
35250: IFFALSE 35309
// repeat weapon := _weapon [ 1 ] ;
35252: LD_ADDR_VAR 0 5
35256: PUSH
35257: LD_VAR 0 10
35261: PUSH
35262: LD_INT 1
35264: ARRAY
35265: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35266: LD_ADDR_VAR 0 10
35270: PUSH
35271: LD_VAR 0 10
35275: PPUSH
35276: LD_INT 1
35278: PPUSH
35279: CALL_OW 3
35283: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35284: LD_VAR 0 2
35288: PPUSH
35289: LD_VAR 0 5
35293: PPUSH
35294: CALL 35603 0 2
35298: PUSH
35299: LD_VAR 0 10
35303: PUSH
35304: EMPTY
35305: EQUAL
35306: OR
35307: IFFALSE 35252
// result := [ ] ;
35309: LD_ADDR_VAR 0 6
35313: PUSH
35314: EMPTY
35315: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35316: LD_VAR 0 1
35320: PPUSH
35321: LD_VAR 0 2
35325: PPUSH
35326: LD_VAR 0 3
35330: PPUSH
35331: LD_VAR 0 4
35335: PPUSH
35336: LD_VAR 0 5
35340: PPUSH
35341: CALL_OW 448
35345: IFFALSE 35378
// result := [ chassis , engine , control , weapon ] ;
35347: LD_ADDR_VAR 0 6
35351: PUSH
35352: LD_VAR 0 2
35356: PUSH
35357: LD_VAR 0 3
35361: PUSH
35362: LD_VAR 0 4
35366: PUSH
35367: LD_VAR 0 5
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: ST_TO_ADDR
// end ;
35378: LD_VAR 0 6
35382: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35383: LD_INT 0
35385: PPUSH
// if not chassis or not engine then
35386: LD_VAR 0 1
35390: NOT
35391: PUSH
35392: LD_VAR 0 2
35396: NOT
35397: OR
35398: IFFALSE 35402
// exit ;
35400: GO 35598
// case engine of engine_solar :
35402: LD_VAR 0 2
35406: PUSH
35407: LD_INT 2
35409: DOUBLE
35410: EQUAL
35411: IFTRUE 35415
35413: GO 35453
35415: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35416: LD_ADDR_VAR 0 3
35420: PUSH
35421: LD_INT 11
35423: PUSH
35424: LD_INT 12
35426: PUSH
35427: LD_INT 13
35429: PUSH
35430: LD_INT 14
35432: PUSH
35433: LD_INT 1
35435: PUSH
35436: LD_INT 2
35438: PUSH
35439: LD_INT 3
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: ST_TO_ADDR
35451: GO 35582
35453: LD_INT 1
35455: DOUBLE
35456: EQUAL
35457: IFTRUE 35461
35459: GO 35523
35461: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35462: LD_ADDR_VAR 0 3
35466: PUSH
35467: LD_INT 11
35469: PUSH
35470: LD_INT 12
35472: PUSH
35473: LD_INT 13
35475: PUSH
35476: LD_INT 14
35478: PUSH
35479: LD_INT 1
35481: PUSH
35482: LD_INT 2
35484: PUSH
35485: LD_INT 3
35487: PUSH
35488: LD_INT 4
35490: PUSH
35491: LD_INT 5
35493: PUSH
35494: LD_INT 21
35496: PUSH
35497: LD_INT 23
35499: PUSH
35500: LD_INT 22
35502: PUSH
35503: LD_INT 24
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: ST_TO_ADDR
35521: GO 35582
35523: LD_INT 3
35525: DOUBLE
35526: EQUAL
35527: IFTRUE 35531
35529: GO 35581
35531: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35532: LD_ADDR_VAR 0 3
35536: PUSH
35537: LD_INT 13
35539: PUSH
35540: LD_INT 14
35542: PUSH
35543: LD_INT 2
35545: PUSH
35546: LD_INT 3
35548: PUSH
35549: LD_INT 4
35551: PUSH
35552: LD_INT 5
35554: PUSH
35555: LD_INT 21
35557: PUSH
35558: LD_INT 22
35560: PUSH
35561: LD_INT 23
35563: PUSH
35564: LD_INT 24
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: ST_TO_ADDR
35579: GO 35582
35581: POP
// result := ( chassis in result ) ;
35582: LD_ADDR_VAR 0 3
35586: PUSH
35587: LD_VAR 0 1
35591: PUSH
35592: LD_VAR 0 3
35596: IN
35597: ST_TO_ADDR
// end ;
35598: LD_VAR 0 3
35602: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35603: LD_INT 0
35605: PPUSH
// if not chassis or not weapon then
35606: LD_VAR 0 1
35610: NOT
35611: PUSH
35612: LD_VAR 0 2
35616: NOT
35617: OR
35618: IFFALSE 35622
// exit ;
35620: GO 36684
// case weapon of us_machine_gun :
35622: LD_VAR 0 2
35626: PUSH
35627: LD_INT 2
35629: DOUBLE
35630: EQUAL
35631: IFTRUE 35635
35633: GO 35665
35635: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35636: LD_ADDR_VAR 0 3
35640: PUSH
35641: LD_INT 1
35643: PUSH
35644: LD_INT 2
35646: PUSH
35647: LD_INT 3
35649: PUSH
35650: LD_INT 4
35652: PUSH
35653: LD_INT 5
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: ST_TO_ADDR
35663: GO 36668
35665: LD_INT 3
35667: DOUBLE
35668: EQUAL
35669: IFTRUE 35673
35671: GO 35703
35673: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35674: LD_ADDR_VAR 0 3
35678: PUSH
35679: LD_INT 1
35681: PUSH
35682: LD_INT 2
35684: PUSH
35685: LD_INT 3
35687: PUSH
35688: LD_INT 4
35690: PUSH
35691: LD_INT 5
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: ST_TO_ADDR
35701: GO 36668
35703: LD_INT 11
35705: DOUBLE
35706: EQUAL
35707: IFTRUE 35711
35709: GO 35741
35711: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35712: LD_ADDR_VAR 0 3
35716: PUSH
35717: LD_INT 1
35719: PUSH
35720: LD_INT 2
35722: PUSH
35723: LD_INT 3
35725: PUSH
35726: LD_INT 4
35728: PUSH
35729: LD_INT 5
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: ST_TO_ADDR
35739: GO 36668
35741: LD_INT 4
35743: DOUBLE
35744: EQUAL
35745: IFTRUE 35749
35747: GO 35775
35749: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35750: LD_ADDR_VAR 0 3
35754: PUSH
35755: LD_INT 2
35757: PUSH
35758: LD_INT 3
35760: PUSH
35761: LD_INT 4
35763: PUSH
35764: LD_INT 5
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: ST_TO_ADDR
35773: GO 36668
35775: LD_INT 5
35777: DOUBLE
35778: EQUAL
35779: IFTRUE 35783
35781: GO 35809
35783: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35784: LD_ADDR_VAR 0 3
35788: PUSH
35789: LD_INT 2
35791: PUSH
35792: LD_INT 3
35794: PUSH
35795: LD_INT 4
35797: PUSH
35798: LD_INT 5
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: ST_TO_ADDR
35807: GO 36668
35809: LD_INT 9
35811: DOUBLE
35812: EQUAL
35813: IFTRUE 35817
35815: GO 35843
35817: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35818: LD_ADDR_VAR 0 3
35822: PUSH
35823: LD_INT 2
35825: PUSH
35826: LD_INT 3
35828: PUSH
35829: LD_INT 4
35831: PUSH
35832: LD_INT 5
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: ST_TO_ADDR
35841: GO 36668
35843: LD_INT 7
35845: DOUBLE
35846: EQUAL
35847: IFTRUE 35851
35849: GO 35877
35851: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35852: LD_ADDR_VAR 0 3
35856: PUSH
35857: LD_INT 2
35859: PUSH
35860: LD_INT 3
35862: PUSH
35863: LD_INT 4
35865: PUSH
35866: LD_INT 5
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: ST_TO_ADDR
35875: GO 36668
35877: LD_INT 12
35879: DOUBLE
35880: EQUAL
35881: IFTRUE 35885
35883: GO 35911
35885: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35886: LD_ADDR_VAR 0 3
35890: PUSH
35891: LD_INT 2
35893: PUSH
35894: LD_INT 3
35896: PUSH
35897: LD_INT 4
35899: PUSH
35900: LD_INT 5
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: ST_TO_ADDR
35909: GO 36668
35911: LD_INT 13
35913: DOUBLE
35914: EQUAL
35915: IFTRUE 35919
35917: GO 35945
35919: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35920: LD_ADDR_VAR 0 3
35924: PUSH
35925: LD_INT 2
35927: PUSH
35928: LD_INT 3
35930: PUSH
35931: LD_INT 4
35933: PUSH
35934: LD_INT 5
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: ST_TO_ADDR
35943: GO 36668
35945: LD_INT 14
35947: DOUBLE
35948: EQUAL
35949: IFTRUE 35953
35951: GO 35971
35953: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35954: LD_ADDR_VAR 0 3
35958: PUSH
35959: LD_INT 4
35961: PUSH
35962: LD_INT 5
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: ST_TO_ADDR
35969: GO 36668
35971: LD_INT 6
35973: DOUBLE
35974: EQUAL
35975: IFTRUE 35979
35977: GO 35997
35979: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35980: LD_ADDR_VAR 0 3
35984: PUSH
35985: LD_INT 4
35987: PUSH
35988: LD_INT 5
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: ST_TO_ADDR
35995: GO 36668
35997: LD_INT 10
35999: DOUBLE
36000: EQUAL
36001: IFTRUE 36005
36003: GO 36023
36005: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36006: LD_ADDR_VAR 0 3
36010: PUSH
36011: LD_INT 4
36013: PUSH
36014: LD_INT 5
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: ST_TO_ADDR
36021: GO 36668
36023: LD_INT 22
36025: DOUBLE
36026: EQUAL
36027: IFTRUE 36031
36029: GO 36057
36031: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36032: LD_ADDR_VAR 0 3
36036: PUSH
36037: LD_INT 11
36039: PUSH
36040: LD_INT 12
36042: PUSH
36043: LD_INT 13
36045: PUSH
36046: LD_INT 14
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: ST_TO_ADDR
36055: GO 36668
36057: LD_INT 23
36059: DOUBLE
36060: EQUAL
36061: IFTRUE 36065
36063: GO 36091
36065: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36066: LD_ADDR_VAR 0 3
36070: PUSH
36071: LD_INT 11
36073: PUSH
36074: LD_INT 12
36076: PUSH
36077: LD_INT 13
36079: PUSH
36080: LD_INT 14
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: ST_TO_ADDR
36089: GO 36668
36091: LD_INT 24
36093: DOUBLE
36094: EQUAL
36095: IFTRUE 36099
36097: GO 36125
36099: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36100: LD_ADDR_VAR 0 3
36104: PUSH
36105: LD_INT 11
36107: PUSH
36108: LD_INT 12
36110: PUSH
36111: LD_INT 13
36113: PUSH
36114: LD_INT 14
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: ST_TO_ADDR
36123: GO 36668
36125: LD_INT 30
36127: DOUBLE
36128: EQUAL
36129: IFTRUE 36133
36131: GO 36159
36133: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36134: LD_ADDR_VAR 0 3
36138: PUSH
36139: LD_INT 11
36141: PUSH
36142: LD_INT 12
36144: PUSH
36145: LD_INT 13
36147: PUSH
36148: LD_INT 14
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: ST_TO_ADDR
36157: GO 36668
36159: LD_INT 25
36161: DOUBLE
36162: EQUAL
36163: IFTRUE 36167
36165: GO 36185
36167: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36168: LD_ADDR_VAR 0 3
36172: PUSH
36173: LD_INT 13
36175: PUSH
36176: LD_INT 14
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: ST_TO_ADDR
36183: GO 36668
36185: LD_INT 27
36187: DOUBLE
36188: EQUAL
36189: IFTRUE 36193
36191: GO 36211
36193: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36194: LD_ADDR_VAR 0 3
36198: PUSH
36199: LD_INT 13
36201: PUSH
36202: LD_INT 14
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: ST_TO_ADDR
36209: GO 36668
36211: LD_EXP 49
36215: DOUBLE
36216: EQUAL
36217: IFTRUE 36221
36219: GO 36247
36221: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36222: LD_ADDR_VAR 0 3
36226: PUSH
36227: LD_INT 11
36229: PUSH
36230: LD_INT 12
36232: PUSH
36233: LD_INT 13
36235: PUSH
36236: LD_INT 14
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: ST_TO_ADDR
36245: GO 36668
36247: LD_INT 28
36249: DOUBLE
36250: EQUAL
36251: IFTRUE 36255
36253: GO 36273
36255: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36256: LD_ADDR_VAR 0 3
36260: PUSH
36261: LD_INT 13
36263: PUSH
36264: LD_INT 14
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: ST_TO_ADDR
36271: GO 36668
36273: LD_INT 29
36275: DOUBLE
36276: EQUAL
36277: IFTRUE 36281
36279: GO 36299
36281: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36282: LD_ADDR_VAR 0 3
36286: PUSH
36287: LD_INT 13
36289: PUSH
36290: LD_INT 14
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: ST_TO_ADDR
36297: GO 36668
36299: LD_INT 31
36301: DOUBLE
36302: EQUAL
36303: IFTRUE 36307
36305: GO 36325
36307: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36308: LD_ADDR_VAR 0 3
36312: PUSH
36313: LD_INT 13
36315: PUSH
36316: LD_INT 14
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: ST_TO_ADDR
36323: GO 36668
36325: LD_INT 26
36327: DOUBLE
36328: EQUAL
36329: IFTRUE 36333
36331: GO 36351
36333: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36334: LD_ADDR_VAR 0 3
36338: PUSH
36339: LD_INT 13
36341: PUSH
36342: LD_INT 14
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: ST_TO_ADDR
36349: GO 36668
36351: LD_INT 42
36353: DOUBLE
36354: EQUAL
36355: IFTRUE 36359
36357: GO 36385
36359: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36360: LD_ADDR_VAR 0 3
36364: PUSH
36365: LD_INT 21
36367: PUSH
36368: LD_INT 22
36370: PUSH
36371: LD_INT 23
36373: PUSH
36374: LD_INT 24
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: ST_TO_ADDR
36383: GO 36668
36385: LD_INT 43
36387: DOUBLE
36388: EQUAL
36389: IFTRUE 36393
36391: GO 36419
36393: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36394: LD_ADDR_VAR 0 3
36398: PUSH
36399: LD_INT 21
36401: PUSH
36402: LD_INT 22
36404: PUSH
36405: LD_INT 23
36407: PUSH
36408: LD_INT 24
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: ST_TO_ADDR
36417: GO 36668
36419: LD_INT 44
36421: DOUBLE
36422: EQUAL
36423: IFTRUE 36427
36425: GO 36453
36427: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36428: LD_ADDR_VAR 0 3
36432: PUSH
36433: LD_INT 21
36435: PUSH
36436: LD_INT 22
36438: PUSH
36439: LD_INT 23
36441: PUSH
36442: LD_INT 24
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: ST_TO_ADDR
36451: GO 36668
36453: LD_INT 45
36455: DOUBLE
36456: EQUAL
36457: IFTRUE 36461
36459: GO 36487
36461: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36462: LD_ADDR_VAR 0 3
36466: PUSH
36467: LD_INT 21
36469: PUSH
36470: LD_INT 22
36472: PUSH
36473: LD_INT 23
36475: PUSH
36476: LD_INT 24
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: ST_TO_ADDR
36485: GO 36668
36487: LD_INT 49
36489: DOUBLE
36490: EQUAL
36491: IFTRUE 36495
36493: GO 36521
36495: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36496: LD_ADDR_VAR 0 3
36500: PUSH
36501: LD_INT 21
36503: PUSH
36504: LD_INT 22
36506: PUSH
36507: LD_INT 23
36509: PUSH
36510: LD_INT 24
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: ST_TO_ADDR
36519: GO 36668
36521: LD_INT 51
36523: DOUBLE
36524: EQUAL
36525: IFTRUE 36529
36527: GO 36555
36529: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36530: LD_ADDR_VAR 0 3
36534: PUSH
36535: LD_INT 21
36537: PUSH
36538: LD_INT 22
36540: PUSH
36541: LD_INT 23
36543: PUSH
36544: LD_INT 24
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: ST_TO_ADDR
36553: GO 36668
36555: LD_INT 52
36557: DOUBLE
36558: EQUAL
36559: IFTRUE 36563
36561: GO 36589
36563: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36564: LD_ADDR_VAR 0 3
36568: PUSH
36569: LD_INT 21
36571: PUSH
36572: LD_INT 22
36574: PUSH
36575: LD_INT 23
36577: PUSH
36578: LD_INT 24
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: ST_TO_ADDR
36587: GO 36668
36589: LD_INT 53
36591: DOUBLE
36592: EQUAL
36593: IFTRUE 36597
36595: GO 36615
36597: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36598: LD_ADDR_VAR 0 3
36602: PUSH
36603: LD_INT 23
36605: PUSH
36606: LD_INT 24
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: ST_TO_ADDR
36613: GO 36668
36615: LD_INT 46
36617: DOUBLE
36618: EQUAL
36619: IFTRUE 36623
36621: GO 36641
36623: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36624: LD_ADDR_VAR 0 3
36628: PUSH
36629: LD_INT 23
36631: PUSH
36632: LD_INT 24
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: ST_TO_ADDR
36639: GO 36668
36641: LD_INT 47
36643: DOUBLE
36644: EQUAL
36645: IFTRUE 36649
36647: GO 36667
36649: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36650: LD_ADDR_VAR 0 3
36654: PUSH
36655: LD_INT 23
36657: PUSH
36658: LD_INT 24
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: ST_TO_ADDR
36665: GO 36668
36667: POP
// result := ( chassis in result ) ;
36668: LD_ADDR_VAR 0 3
36672: PUSH
36673: LD_VAR 0 1
36677: PUSH
36678: LD_VAR 0 3
36682: IN
36683: ST_TO_ADDR
// end ;
36684: LD_VAR 0 3
36688: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36689: LD_INT 0
36691: PPUSH
36692: PPUSH
36693: PPUSH
36694: PPUSH
36695: PPUSH
36696: PPUSH
36697: PPUSH
// result := array ;
36698: LD_ADDR_VAR 0 5
36702: PUSH
36703: LD_VAR 0 1
36707: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36708: LD_VAR 0 1
36712: NOT
36713: PUSH
36714: LD_VAR 0 2
36718: NOT
36719: OR
36720: PUSH
36721: LD_VAR 0 3
36725: NOT
36726: OR
36727: PUSH
36728: LD_VAR 0 2
36732: PUSH
36733: LD_VAR 0 1
36737: GREATER
36738: OR
36739: PUSH
36740: LD_VAR 0 3
36744: PUSH
36745: LD_VAR 0 1
36749: GREATER
36750: OR
36751: IFFALSE 36755
// exit ;
36753: GO 37051
// if direction then
36755: LD_VAR 0 4
36759: IFFALSE 36823
// begin d := 1 ;
36761: LD_ADDR_VAR 0 9
36765: PUSH
36766: LD_INT 1
36768: ST_TO_ADDR
// if i_from > i_to then
36769: LD_VAR 0 2
36773: PUSH
36774: LD_VAR 0 3
36778: GREATER
36779: IFFALSE 36805
// length := ( array - i_from ) + i_to else
36781: LD_ADDR_VAR 0 11
36785: PUSH
36786: LD_VAR 0 1
36790: PUSH
36791: LD_VAR 0 2
36795: MINUS
36796: PUSH
36797: LD_VAR 0 3
36801: PLUS
36802: ST_TO_ADDR
36803: GO 36821
// length := i_to - i_from ;
36805: LD_ADDR_VAR 0 11
36809: PUSH
36810: LD_VAR 0 3
36814: PUSH
36815: LD_VAR 0 2
36819: MINUS
36820: ST_TO_ADDR
// end else
36821: GO 36884
// begin d := - 1 ;
36823: LD_ADDR_VAR 0 9
36827: PUSH
36828: LD_INT 1
36830: NEG
36831: ST_TO_ADDR
// if i_from > i_to then
36832: LD_VAR 0 2
36836: PUSH
36837: LD_VAR 0 3
36841: GREATER
36842: IFFALSE 36862
// length := i_from - i_to else
36844: LD_ADDR_VAR 0 11
36848: PUSH
36849: LD_VAR 0 2
36853: PUSH
36854: LD_VAR 0 3
36858: MINUS
36859: ST_TO_ADDR
36860: GO 36884
// length := ( array - i_to ) + i_from ;
36862: LD_ADDR_VAR 0 11
36866: PUSH
36867: LD_VAR 0 1
36871: PUSH
36872: LD_VAR 0 3
36876: MINUS
36877: PUSH
36878: LD_VAR 0 2
36882: PLUS
36883: ST_TO_ADDR
// end ; if not length then
36884: LD_VAR 0 11
36888: NOT
36889: IFFALSE 36893
// exit ;
36891: GO 37051
// tmp := array ;
36893: LD_ADDR_VAR 0 10
36897: PUSH
36898: LD_VAR 0 1
36902: ST_TO_ADDR
// for i = 1 to length do
36903: LD_ADDR_VAR 0 6
36907: PUSH
36908: DOUBLE
36909: LD_INT 1
36911: DEC
36912: ST_TO_ADDR
36913: LD_VAR 0 11
36917: PUSH
36918: FOR_TO
36919: IFFALSE 37039
// begin for j = 1 to array do
36921: LD_ADDR_VAR 0 7
36925: PUSH
36926: DOUBLE
36927: LD_INT 1
36929: DEC
36930: ST_TO_ADDR
36931: LD_VAR 0 1
36935: PUSH
36936: FOR_TO
36937: IFFALSE 37025
// begin k := j + d ;
36939: LD_ADDR_VAR 0 8
36943: PUSH
36944: LD_VAR 0 7
36948: PUSH
36949: LD_VAR 0 9
36953: PLUS
36954: ST_TO_ADDR
// if k > array then
36955: LD_VAR 0 8
36959: PUSH
36960: LD_VAR 0 1
36964: GREATER
36965: IFFALSE 36975
// k := 1 ;
36967: LD_ADDR_VAR 0 8
36971: PUSH
36972: LD_INT 1
36974: ST_TO_ADDR
// if not k then
36975: LD_VAR 0 8
36979: NOT
36980: IFFALSE 36992
// k := array ;
36982: LD_ADDR_VAR 0 8
36986: PUSH
36987: LD_VAR 0 1
36991: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36992: LD_ADDR_VAR 0 10
36996: PUSH
36997: LD_VAR 0 10
37001: PPUSH
37002: LD_VAR 0 8
37006: PPUSH
37007: LD_VAR 0 1
37011: PUSH
37012: LD_VAR 0 7
37016: ARRAY
37017: PPUSH
37018: CALL_OW 1
37022: ST_TO_ADDR
// end ;
37023: GO 36936
37025: POP
37026: POP
// array := tmp ;
37027: LD_ADDR_VAR 0 1
37031: PUSH
37032: LD_VAR 0 10
37036: ST_TO_ADDR
// end ;
37037: GO 36918
37039: POP
37040: POP
// result := array ;
37041: LD_ADDR_VAR 0 5
37045: PUSH
37046: LD_VAR 0 1
37050: ST_TO_ADDR
// end ;
37051: LD_VAR 0 5
37055: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37056: LD_INT 0
37058: PPUSH
37059: PPUSH
// result := 0 ;
37060: LD_ADDR_VAR 0 3
37064: PUSH
37065: LD_INT 0
37067: ST_TO_ADDR
// if not array or not value in array then
37068: LD_VAR 0 1
37072: NOT
37073: PUSH
37074: LD_VAR 0 2
37078: PUSH
37079: LD_VAR 0 1
37083: IN
37084: NOT
37085: OR
37086: IFFALSE 37090
// exit ;
37088: GO 37144
// for i = 1 to array do
37090: LD_ADDR_VAR 0 4
37094: PUSH
37095: DOUBLE
37096: LD_INT 1
37098: DEC
37099: ST_TO_ADDR
37100: LD_VAR 0 1
37104: PUSH
37105: FOR_TO
37106: IFFALSE 37142
// if value = array [ i ] then
37108: LD_VAR 0 2
37112: PUSH
37113: LD_VAR 0 1
37117: PUSH
37118: LD_VAR 0 4
37122: ARRAY
37123: EQUAL
37124: IFFALSE 37140
// begin result := i ;
37126: LD_ADDR_VAR 0 3
37130: PUSH
37131: LD_VAR 0 4
37135: ST_TO_ADDR
// exit ;
37136: POP
37137: POP
37138: GO 37144
// end ;
37140: GO 37105
37142: POP
37143: POP
// end ;
37144: LD_VAR 0 3
37148: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37149: LD_INT 0
37151: PPUSH
// vc_chassis := chassis ;
37152: LD_ADDR_OWVAR 37
37156: PUSH
37157: LD_VAR 0 1
37161: ST_TO_ADDR
// vc_engine := engine ;
37162: LD_ADDR_OWVAR 39
37166: PUSH
37167: LD_VAR 0 2
37171: ST_TO_ADDR
// vc_control := control ;
37172: LD_ADDR_OWVAR 38
37176: PUSH
37177: LD_VAR 0 3
37181: ST_TO_ADDR
// vc_weapon := weapon ;
37182: LD_ADDR_OWVAR 40
37186: PUSH
37187: LD_VAR 0 4
37191: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37192: LD_ADDR_OWVAR 41
37196: PUSH
37197: LD_VAR 0 5
37201: ST_TO_ADDR
// end ;
37202: LD_VAR 0 6
37206: RET
// export function WantPlant ( unit ) ; var task ; begin
37207: LD_INT 0
37209: PPUSH
37210: PPUSH
// result := false ;
37211: LD_ADDR_VAR 0 2
37215: PUSH
37216: LD_INT 0
37218: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37219: LD_ADDR_VAR 0 3
37223: PUSH
37224: LD_VAR 0 1
37228: PPUSH
37229: CALL_OW 437
37233: ST_TO_ADDR
// if task then
37234: LD_VAR 0 3
37238: IFFALSE 37266
// if task [ 1 ] [ 1 ] = p then
37240: LD_VAR 0 3
37244: PUSH
37245: LD_INT 1
37247: ARRAY
37248: PUSH
37249: LD_INT 1
37251: ARRAY
37252: PUSH
37253: LD_STRING p
37255: EQUAL
37256: IFFALSE 37266
// result := true ;
37258: LD_ADDR_VAR 0 2
37262: PUSH
37263: LD_INT 1
37265: ST_TO_ADDR
// end ;
37266: LD_VAR 0 2
37270: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37271: LD_INT 0
37273: PPUSH
37274: PPUSH
37275: PPUSH
37276: PPUSH
// if pos < 1 then
37277: LD_VAR 0 2
37281: PUSH
37282: LD_INT 1
37284: LESS
37285: IFFALSE 37289
// exit ;
37287: GO 37592
// if pos = 1 then
37289: LD_VAR 0 2
37293: PUSH
37294: LD_INT 1
37296: EQUAL
37297: IFFALSE 37330
// result := Replace ( arr , pos [ 1 ] , value ) else
37299: LD_ADDR_VAR 0 4
37303: PUSH
37304: LD_VAR 0 1
37308: PPUSH
37309: LD_VAR 0 2
37313: PUSH
37314: LD_INT 1
37316: ARRAY
37317: PPUSH
37318: LD_VAR 0 3
37322: PPUSH
37323: CALL_OW 1
37327: ST_TO_ADDR
37328: GO 37592
// begin tmp := arr ;
37330: LD_ADDR_VAR 0 6
37334: PUSH
37335: LD_VAR 0 1
37339: ST_TO_ADDR
// s_arr := [ tmp ] ;
37340: LD_ADDR_VAR 0 7
37344: PUSH
37345: LD_VAR 0 6
37349: PUSH
37350: EMPTY
37351: LIST
37352: ST_TO_ADDR
// for i = 1 to pos - 1 do
37353: LD_ADDR_VAR 0 5
37357: PUSH
37358: DOUBLE
37359: LD_INT 1
37361: DEC
37362: ST_TO_ADDR
37363: LD_VAR 0 2
37367: PUSH
37368: LD_INT 1
37370: MINUS
37371: PUSH
37372: FOR_TO
37373: IFFALSE 37418
// begin tmp := tmp [ pos [ i ] ] ;
37375: LD_ADDR_VAR 0 6
37379: PUSH
37380: LD_VAR 0 6
37384: PUSH
37385: LD_VAR 0 2
37389: PUSH
37390: LD_VAR 0 5
37394: ARRAY
37395: ARRAY
37396: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37397: LD_ADDR_VAR 0 7
37401: PUSH
37402: LD_VAR 0 7
37406: PUSH
37407: LD_VAR 0 6
37411: PUSH
37412: EMPTY
37413: LIST
37414: ADD
37415: ST_TO_ADDR
// end ;
37416: GO 37372
37418: POP
37419: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37420: LD_ADDR_VAR 0 6
37424: PUSH
37425: LD_VAR 0 6
37429: PPUSH
37430: LD_VAR 0 2
37434: PUSH
37435: LD_VAR 0 2
37439: ARRAY
37440: PPUSH
37441: LD_VAR 0 3
37445: PPUSH
37446: CALL_OW 1
37450: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37451: LD_ADDR_VAR 0 7
37455: PUSH
37456: LD_VAR 0 7
37460: PPUSH
37461: LD_VAR 0 7
37465: PPUSH
37466: LD_VAR 0 6
37470: PPUSH
37471: CALL_OW 1
37475: ST_TO_ADDR
// for i = s_arr downto 2 do
37476: LD_ADDR_VAR 0 5
37480: PUSH
37481: DOUBLE
37482: LD_VAR 0 7
37486: INC
37487: ST_TO_ADDR
37488: LD_INT 2
37490: PUSH
37491: FOR_DOWNTO
37492: IFFALSE 37576
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37494: LD_ADDR_VAR 0 6
37498: PUSH
37499: LD_VAR 0 7
37503: PUSH
37504: LD_VAR 0 5
37508: PUSH
37509: LD_INT 1
37511: MINUS
37512: ARRAY
37513: PPUSH
37514: LD_VAR 0 2
37518: PUSH
37519: LD_VAR 0 5
37523: PUSH
37524: LD_INT 1
37526: MINUS
37527: ARRAY
37528: PPUSH
37529: LD_VAR 0 7
37533: PUSH
37534: LD_VAR 0 5
37538: ARRAY
37539: PPUSH
37540: CALL_OW 1
37544: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37545: LD_ADDR_VAR 0 7
37549: PUSH
37550: LD_VAR 0 7
37554: PPUSH
37555: LD_VAR 0 5
37559: PUSH
37560: LD_INT 1
37562: MINUS
37563: PPUSH
37564: LD_VAR 0 6
37568: PPUSH
37569: CALL_OW 1
37573: ST_TO_ADDR
// end ;
37574: GO 37491
37576: POP
37577: POP
// result := s_arr [ 1 ] ;
37578: LD_ADDR_VAR 0 4
37582: PUSH
37583: LD_VAR 0 7
37587: PUSH
37588: LD_INT 1
37590: ARRAY
37591: ST_TO_ADDR
// end ; end ;
37592: LD_VAR 0 4
37596: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37597: LD_INT 0
37599: PPUSH
37600: PPUSH
// if not list then
37601: LD_VAR 0 1
37605: NOT
37606: IFFALSE 37610
// exit ;
37608: GO 37701
// i := list [ pos1 ] ;
37610: LD_ADDR_VAR 0 5
37614: PUSH
37615: LD_VAR 0 1
37619: PUSH
37620: LD_VAR 0 2
37624: ARRAY
37625: ST_TO_ADDR
// if not i then
37626: LD_VAR 0 5
37630: NOT
37631: IFFALSE 37635
// exit ;
37633: GO 37701
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37635: LD_ADDR_VAR 0 1
37639: PUSH
37640: LD_VAR 0 1
37644: PPUSH
37645: LD_VAR 0 2
37649: PPUSH
37650: LD_VAR 0 1
37654: PUSH
37655: LD_VAR 0 3
37659: ARRAY
37660: PPUSH
37661: CALL_OW 1
37665: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37666: LD_ADDR_VAR 0 1
37670: PUSH
37671: LD_VAR 0 1
37675: PPUSH
37676: LD_VAR 0 3
37680: PPUSH
37681: LD_VAR 0 5
37685: PPUSH
37686: CALL_OW 1
37690: ST_TO_ADDR
// result := list ;
37691: LD_ADDR_VAR 0 4
37695: PUSH
37696: LD_VAR 0 1
37700: ST_TO_ADDR
// end ;
37701: LD_VAR 0 4
37705: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37706: LD_INT 0
37708: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37709: LD_ADDR_VAR 0 5
37713: PUSH
37714: LD_VAR 0 1
37718: PPUSH
37719: CALL_OW 250
37723: PPUSH
37724: LD_VAR 0 1
37728: PPUSH
37729: CALL_OW 251
37733: PPUSH
37734: LD_VAR 0 2
37738: PPUSH
37739: LD_VAR 0 3
37743: PPUSH
37744: LD_VAR 0 4
37748: PPUSH
37749: CALL 37759 0 5
37753: ST_TO_ADDR
// end ;
37754: LD_VAR 0 5
37758: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37759: LD_INT 0
37761: PPUSH
37762: PPUSH
37763: PPUSH
37764: PPUSH
// if not list then
37765: LD_VAR 0 3
37769: NOT
37770: IFFALSE 37774
// exit ;
37772: GO 38162
// result := [ ] ;
37774: LD_ADDR_VAR 0 6
37778: PUSH
37779: EMPTY
37780: ST_TO_ADDR
// for i in list do
37781: LD_ADDR_VAR 0 7
37785: PUSH
37786: LD_VAR 0 3
37790: PUSH
37791: FOR_IN
37792: IFFALSE 37994
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37794: LD_ADDR_VAR 0 9
37798: PUSH
37799: LD_VAR 0 7
37803: PPUSH
37804: LD_VAR 0 1
37808: PPUSH
37809: LD_VAR 0 2
37813: PPUSH
37814: CALL_OW 297
37818: ST_TO_ADDR
// if not result then
37819: LD_VAR 0 6
37823: NOT
37824: IFFALSE 37850
// result := [ [ i , tmp ] ] else
37826: LD_ADDR_VAR 0 6
37830: PUSH
37831: LD_VAR 0 7
37835: PUSH
37836: LD_VAR 0 9
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: EMPTY
37846: LIST
37847: ST_TO_ADDR
37848: GO 37992
// begin if result [ result ] [ 2 ] < tmp then
37850: LD_VAR 0 6
37854: PUSH
37855: LD_VAR 0 6
37859: ARRAY
37860: PUSH
37861: LD_INT 2
37863: ARRAY
37864: PUSH
37865: LD_VAR 0 9
37869: LESS
37870: IFFALSE 37912
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37872: LD_ADDR_VAR 0 6
37876: PUSH
37877: LD_VAR 0 6
37881: PPUSH
37882: LD_VAR 0 6
37886: PUSH
37887: LD_INT 1
37889: PLUS
37890: PPUSH
37891: LD_VAR 0 7
37895: PUSH
37896: LD_VAR 0 9
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PPUSH
37905: CALL_OW 2
37909: ST_TO_ADDR
37910: GO 37992
// for j = 1 to result do
37912: LD_ADDR_VAR 0 8
37916: PUSH
37917: DOUBLE
37918: LD_INT 1
37920: DEC
37921: ST_TO_ADDR
37922: LD_VAR 0 6
37926: PUSH
37927: FOR_TO
37928: IFFALSE 37990
// begin if tmp < result [ j ] [ 2 ] then
37930: LD_VAR 0 9
37934: PUSH
37935: LD_VAR 0 6
37939: PUSH
37940: LD_VAR 0 8
37944: ARRAY
37945: PUSH
37946: LD_INT 2
37948: ARRAY
37949: LESS
37950: IFFALSE 37988
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37952: LD_ADDR_VAR 0 6
37956: PUSH
37957: LD_VAR 0 6
37961: PPUSH
37962: LD_VAR 0 8
37966: PPUSH
37967: LD_VAR 0 7
37971: PUSH
37972: LD_VAR 0 9
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PPUSH
37981: CALL_OW 2
37985: ST_TO_ADDR
// break ;
37986: GO 37990
// end ; end ;
37988: GO 37927
37990: POP
37991: POP
// end ; end ;
37992: GO 37791
37994: POP
37995: POP
// if result and not asc then
37996: LD_VAR 0 6
38000: PUSH
38001: LD_VAR 0 4
38005: NOT
38006: AND
38007: IFFALSE 38082
// begin tmp := result ;
38009: LD_ADDR_VAR 0 9
38013: PUSH
38014: LD_VAR 0 6
38018: ST_TO_ADDR
// for i = tmp downto 1 do
38019: LD_ADDR_VAR 0 7
38023: PUSH
38024: DOUBLE
38025: LD_VAR 0 9
38029: INC
38030: ST_TO_ADDR
38031: LD_INT 1
38033: PUSH
38034: FOR_DOWNTO
38035: IFFALSE 38080
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38037: LD_ADDR_VAR 0 6
38041: PUSH
38042: LD_VAR 0 6
38046: PPUSH
38047: LD_VAR 0 9
38051: PUSH
38052: LD_VAR 0 7
38056: MINUS
38057: PUSH
38058: LD_INT 1
38060: PLUS
38061: PPUSH
38062: LD_VAR 0 9
38066: PUSH
38067: LD_VAR 0 7
38071: ARRAY
38072: PPUSH
38073: CALL_OW 1
38077: ST_TO_ADDR
38078: GO 38034
38080: POP
38081: POP
// end ; tmp := [ ] ;
38082: LD_ADDR_VAR 0 9
38086: PUSH
38087: EMPTY
38088: ST_TO_ADDR
// if mode then
38089: LD_VAR 0 5
38093: IFFALSE 38162
// begin for i = 1 to result do
38095: LD_ADDR_VAR 0 7
38099: PUSH
38100: DOUBLE
38101: LD_INT 1
38103: DEC
38104: ST_TO_ADDR
38105: LD_VAR 0 6
38109: PUSH
38110: FOR_TO
38111: IFFALSE 38150
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38113: LD_ADDR_VAR 0 9
38117: PUSH
38118: LD_VAR 0 9
38122: PPUSH
38123: LD_VAR 0 7
38127: PPUSH
38128: LD_VAR 0 6
38132: PUSH
38133: LD_VAR 0 7
38137: ARRAY
38138: PUSH
38139: LD_INT 1
38141: ARRAY
38142: PPUSH
38143: CALL_OW 1
38147: ST_TO_ADDR
38148: GO 38110
38150: POP
38151: POP
// result := tmp ;
38152: LD_ADDR_VAR 0 6
38156: PUSH
38157: LD_VAR 0 9
38161: ST_TO_ADDR
// end ; end ;
38162: LD_VAR 0 6
38166: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38167: LD_INT 0
38169: PPUSH
38170: PPUSH
38171: PPUSH
38172: PPUSH
38173: PPUSH
38174: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38175: LD_ADDR_VAR 0 5
38179: PUSH
38180: LD_INT 0
38182: PUSH
38183: LD_INT 0
38185: PUSH
38186: LD_INT 0
38188: PUSH
38189: EMPTY
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: ST_TO_ADDR
// if not x or not y then
38197: LD_VAR 0 2
38201: NOT
38202: PUSH
38203: LD_VAR 0 3
38207: NOT
38208: OR
38209: IFFALSE 38213
// exit ;
38211: GO 39865
// if not range then
38213: LD_VAR 0 4
38217: NOT
38218: IFFALSE 38228
// range := 10 ;
38220: LD_ADDR_VAR 0 4
38224: PUSH
38225: LD_INT 10
38227: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38228: LD_ADDR_VAR 0 8
38232: PUSH
38233: LD_INT 81
38235: PUSH
38236: LD_VAR 0 1
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 92
38247: PUSH
38248: LD_VAR 0 2
38252: PUSH
38253: LD_VAR 0 3
38257: PUSH
38258: LD_VAR 0 4
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 3
38271: PUSH
38272: LD_INT 21
38274: PUSH
38275: LD_INT 3
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: LIST
38290: PPUSH
38291: CALL_OW 69
38295: ST_TO_ADDR
// if not tmp then
38296: LD_VAR 0 8
38300: NOT
38301: IFFALSE 38305
// exit ;
38303: GO 39865
// for i in tmp do
38305: LD_ADDR_VAR 0 6
38309: PUSH
38310: LD_VAR 0 8
38314: PUSH
38315: FOR_IN
38316: IFFALSE 39840
// begin points := [ 0 , 0 , 0 ] ;
38318: LD_ADDR_VAR 0 9
38322: PUSH
38323: LD_INT 0
38325: PUSH
38326: LD_INT 0
38328: PUSH
38329: LD_INT 0
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: LIST
38336: ST_TO_ADDR
// bpoints := 1 ;
38337: LD_ADDR_VAR 0 10
38341: PUSH
38342: LD_INT 1
38344: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38345: LD_VAR 0 6
38349: PPUSH
38350: CALL_OW 247
38354: PUSH
38355: LD_INT 1
38357: DOUBLE
38358: EQUAL
38359: IFTRUE 38363
38361: GO 38941
38363: POP
// begin if GetClass ( i ) = 1 then
38364: LD_VAR 0 6
38368: PPUSH
38369: CALL_OW 257
38373: PUSH
38374: LD_INT 1
38376: EQUAL
38377: IFFALSE 38398
// points := [ 10 , 5 , 3 ] ;
38379: LD_ADDR_VAR 0 9
38383: PUSH
38384: LD_INT 10
38386: PUSH
38387: LD_INT 5
38389: PUSH
38390: LD_INT 3
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: LIST
38397: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38398: LD_VAR 0 6
38402: PPUSH
38403: CALL_OW 257
38407: PUSH
38408: LD_INT 2
38410: PUSH
38411: LD_INT 3
38413: PUSH
38414: LD_INT 4
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: LIST
38421: IN
38422: IFFALSE 38443
// points := [ 3 , 2 , 1 ] ;
38424: LD_ADDR_VAR 0 9
38428: PUSH
38429: LD_INT 3
38431: PUSH
38432: LD_INT 2
38434: PUSH
38435: LD_INT 1
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: LIST
38442: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38443: LD_VAR 0 6
38447: PPUSH
38448: CALL_OW 257
38452: PUSH
38453: LD_INT 5
38455: EQUAL
38456: IFFALSE 38477
// points := [ 130 , 5 , 2 ] ;
38458: LD_ADDR_VAR 0 9
38462: PUSH
38463: LD_INT 130
38465: PUSH
38466: LD_INT 5
38468: PUSH
38469: LD_INT 2
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: LIST
38476: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38477: LD_VAR 0 6
38481: PPUSH
38482: CALL_OW 257
38486: PUSH
38487: LD_INT 8
38489: EQUAL
38490: IFFALSE 38511
// points := [ 35 , 35 , 30 ] ;
38492: LD_ADDR_VAR 0 9
38496: PUSH
38497: LD_INT 35
38499: PUSH
38500: LD_INT 35
38502: PUSH
38503: LD_INT 30
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: LIST
38510: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38511: LD_VAR 0 6
38515: PPUSH
38516: CALL_OW 257
38520: PUSH
38521: LD_INT 9
38523: EQUAL
38524: IFFALSE 38545
// points := [ 20 , 55 , 40 ] ;
38526: LD_ADDR_VAR 0 9
38530: PUSH
38531: LD_INT 20
38533: PUSH
38534: LD_INT 55
38536: PUSH
38537: LD_INT 40
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: LIST
38544: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38545: LD_VAR 0 6
38549: PPUSH
38550: CALL_OW 257
38554: PUSH
38555: LD_INT 12
38557: PUSH
38558: LD_INT 16
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: IN
38565: IFFALSE 38586
// points := [ 5 , 3 , 2 ] ;
38567: LD_ADDR_VAR 0 9
38571: PUSH
38572: LD_INT 5
38574: PUSH
38575: LD_INT 3
38577: PUSH
38578: LD_INT 2
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: LIST
38585: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38586: LD_VAR 0 6
38590: PPUSH
38591: CALL_OW 257
38595: PUSH
38596: LD_INT 17
38598: EQUAL
38599: IFFALSE 38620
// points := [ 100 , 50 , 75 ] ;
38601: LD_ADDR_VAR 0 9
38605: PUSH
38606: LD_INT 100
38608: PUSH
38609: LD_INT 50
38611: PUSH
38612: LD_INT 75
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: LIST
38619: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38620: LD_VAR 0 6
38624: PPUSH
38625: CALL_OW 257
38629: PUSH
38630: LD_INT 15
38632: EQUAL
38633: IFFALSE 38654
// points := [ 10 , 5 , 3 ] ;
38635: LD_ADDR_VAR 0 9
38639: PUSH
38640: LD_INT 10
38642: PUSH
38643: LD_INT 5
38645: PUSH
38646: LD_INT 3
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: LIST
38653: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38654: LD_VAR 0 6
38658: PPUSH
38659: CALL_OW 257
38663: PUSH
38664: LD_INT 14
38666: EQUAL
38667: IFFALSE 38688
// points := [ 10 , 0 , 0 ] ;
38669: LD_ADDR_VAR 0 9
38673: PUSH
38674: LD_INT 10
38676: PUSH
38677: LD_INT 0
38679: PUSH
38680: LD_INT 0
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: LIST
38687: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38688: LD_VAR 0 6
38692: PPUSH
38693: CALL_OW 257
38697: PUSH
38698: LD_INT 11
38700: EQUAL
38701: IFFALSE 38722
// points := [ 30 , 10 , 5 ] ;
38703: LD_ADDR_VAR 0 9
38707: PUSH
38708: LD_INT 30
38710: PUSH
38711: LD_INT 10
38713: PUSH
38714: LD_INT 5
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: LIST
38721: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38722: LD_VAR 0 1
38726: PPUSH
38727: LD_INT 5
38729: PPUSH
38730: CALL_OW 321
38734: PUSH
38735: LD_INT 2
38737: EQUAL
38738: IFFALSE 38755
// bpoints := bpoints * 1.8 ;
38740: LD_ADDR_VAR 0 10
38744: PUSH
38745: LD_VAR 0 10
38749: PUSH
38750: LD_REAL  1.80000000000000E+0000
38753: MUL
38754: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38755: LD_VAR 0 6
38759: PPUSH
38760: CALL_OW 257
38764: PUSH
38765: LD_INT 1
38767: PUSH
38768: LD_INT 2
38770: PUSH
38771: LD_INT 3
38773: PUSH
38774: LD_INT 4
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: IN
38783: PUSH
38784: LD_VAR 0 1
38788: PPUSH
38789: LD_INT 51
38791: PPUSH
38792: CALL_OW 321
38796: PUSH
38797: LD_INT 2
38799: EQUAL
38800: AND
38801: IFFALSE 38818
// bpoints := bpoints * 1.2 ;
38803: LD_ADDR_VAR 0 10
38807: PUSH
38808: LD_VAR 0 10
38812: PUSH
38813: LD_REAL  1.20000000000000E+0000
38816: MUL
38817: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38818: LD_VAR 0 6
38822: PPUSH
38823: CALL_OW 257
38827: PUSH
38828: LD_INT 5
38830: PUSH
38831: LD_INT 7
38833: PUSH
38834: LD_INT 9
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: LIST
38841: IN
38842: PUSH
38843: LD_VAR 0 1
38847: PPUSH
38848: LD_INT 52
38850: PPUSH
38851: CALL_OW 321
38855: PUSH
38856: LD_INT 2
38858: EQUAL
38859: AND
38860: IFFALSE 38877
// bpoints := bpoints * 1.5 ;
38862: LD_ADDR_VAR 0 10
38866: PUSH
38867: LD_VAR 0 10
38871: PUSH
38872: LD_REAL  1.50000000000000E+0000
38875: MUL
38876: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38877: LD_VAR 0 1
38881: PPUSH
38882: LD_INT 66
38884: PPUSH
38885: CALL_OW 321
38889: PUSH
38890: LD_INT 2
38892: EQUAL
38893: IFFALSE 38910
// bpoints := bpoints * 1.1 ;
38895: LD_ADDR_VAR 0 10
38899: PUSH
38900: LD_VAR 0 10
38904: PUSH
38905: LD_REAL  1.10000000000000E+0000
38908: MUL
38909: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38910: LD_ADDR_VAR 0 10
38914: PUSH
38915: LD_VAR 0 10
38919: PUSH
38920: LD_VAR 0 6
38924: PPUSH
38925: LD_INT 1
38927: PPUSH
38928: CALL_OW 259
38932: PUSH
38933: LD_REAL  1.15000000000000E+0000
38936: MUL
38937: MUL
38938: ST_TO_ADDR
// end ; unit_vehicle :
38939: GO 39769
38941: LD_INT 2
38943: DOUBLE
38944: EQUAL
38945: IFTRUE 38949
38947: GO 39757
38949: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38950: LD_VAR 0 6
38954: PPUSH
38955: CALL_OW 264
38959: PUSH
38960: LD_INT 2
38962: PUSH
38963: LD_INT 42
38965: PUSH
38966: LD_INT 24
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: LIST
38973: IN
38974: IFFALSE 38995
// points := [ 25 , 5 , 3 ] ;
38976: LD_ADDR_VAR 0 9
38980: PUSH
38981: LD_INT 25
38983: PUSH
38984: LD_INT 5
38986: PUSH
38987: LD_INT 3
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: LIST
38994: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38995: LD_VAR 0 6
38999: PPUSH
39000: CALL_OW 264
39004: PUSH
39005: LD_INT 4
39007: PUSH
39008: LD_INT 43
39010: PUSH
39011: LD_INT 25
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: LIST
39018: IN
39019: IFFALSE 39040
// points := [ 40 , 15 , 5 ] ;
39021: LD_ADDR_VAR 0 9
39025: PUSH
39026: LD_INT 40
39028: PUSH
39029: LD_INT 15
39031: PUSH
39032: LD_INT 5
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: LIST
39039: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39040: LD_VAR 0 6
39044: PPUSH
39045: CALL_OW 264
39049: PUSH
39050: LD_INT 3
39052: PUSH
39053: LD_INT 23
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: IN
39060: IFFALSE 39081
// points := [ 7 , 25 , 8 ] ;
39062: LD_ADDR_VAR 0 9
39066: PUSH
39067: LD_INT 7
39069: PUSH
39070: LD_INT 25
39072: PUSH
39073: LD_INT 8
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: LIST
39080: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39081: LD_VAR 0 6
39085: PPUSH
39086: CALL_OW 264
39090: PUSH
39091: LD_INT 5
39093: PUSH
39094: LD_INT 27
39096: PUSH
39097: LD_INT 44
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: LIST
39104: IN
39105: IFFALSE 39126
// points := [ 14 , 50 , 16 ] ;
39107: LD_ADDR_VAR 0 9
39111: PUSH
39112: LD_INT 14
39114: PUSH
39115: LD_INT 50
39117: PUSH
39118: LD_INT 16
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: LIST
39125: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39126: LD_VAR 0 6
39130: PPUSH
39131: CALL_OW 264
39135: PUSH
39136: LD_INT 6
39138: PUSH
39139: LD_INT 46
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: IN
39146: IFFALSE 39167
// points := [ 32 , 120 , 70 ] ;
39148: LD_ADDR_VAR 0 9
39152: PUSH
39153: LD_INT 32
39155: PUSH
39156: LD_INT 120
39158: PUSH
39159: LD_INT 70
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: LIST
39166: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39167: LD_VAR 0 6
39171: PPUSH
39172: CALL_OW 264
39176: PUSH
39177: LD_INT 7
39179: PUSH
39180: LD_INT 28
39182: PUSH
39183: LD_INT 45
39185: PUSH
39186: LD_EXP 49
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: IN
39197: IFFALSE 39218
// points := [ 35 , 20 , 45 ] ;
39199: LD_ADDR_VAR 0 9
39203: PUSH
39204: LD_INT 35
39206: PUSH
39207: LD_INT 20
39209: PUSH
39210: LD_INT 45
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: LIST
39217: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39218: LD_VAR 0 6
39222: PPUSH
39223: CALL_OW 264
39227: PUSH
39228: LD_INT 47
39230: PUSH
39231: EMPTY
39232: LIST
39233: IN
39234: IFFALSE 39255
// points := [ 67 , 45 , 75 ] ;
39236: LD_ADDR_VAR 0 9
39240: PUSH
39241: LD_INT 67
39243: PUSH
39244: LD_INT 45
39246: PUSH
39247: LD_INT 75
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: LIST
39254: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39255: LD_VAR 0 6
39259: PPUSH
39260: CALL_OW 264
39264: PUSH
39265: LD_INT 26
39267: PUSH
39268: EMPTY
39269: LIST
39270: IN
39271: IFFALSE 39292
// points := [ 120 , 30 , 80 ] ;
39273: LD_ADDR_VAR 0 9
39277: PUSH
39278: LD_INT 120
39280: PUSH
39281: LD_INT 30
39283: PUSH
39284: LD_INT 80
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: LIST
39291: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39292: LD_VAR 0 6
39296: PPUSH
39297: CALL_OW 264
39301: PUSH
39302: LD_INT 22
39304: PUSH
39305: EMPTY
39306: LIST
39307: IN
39308: IFFALSE 39329
// points := [ 40 , 1 , 1 ] ;
39310: LD_ADDR_VAR 0 9
39314: PUSH
39315: LD_INT 40
39317: PUSH
39318: LD_INT 1
39320: PUSH
39321: LD_INT 1
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: LIST
39328: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39329: LD_VAR 0 6
39333: PPUSH
39334: CALL_OW 264
39338: PUSH
39339: LD_INT 29
39341: PUSH
39342: EMPTY
39343: LIST
39344: IN
39345: IFFALSE 39366
// points := [ 70 , 200 , 400 ] ;
39347: LD_ADDR_VAR 0 9
39351: PUSH
39352: LD_INT 70
39354: PUSH
39355: LD_INT 200
39357: PUSH
39358: LD_INT 400
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: LIST
39365: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39366: LD_VAR 0 6
39370: PPUSH
39371: CALL_OW 264
39375: PUSH
39376: LD_INT 14
39378: PUSH
39379: LD_INT 53
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: IN
39386: IFFALSE 39407
// points := [ 40 , 10 , 20 ] ;
39388: LD_ADDR_VAR 0 9
39392: PUSH
39393: LD_INT 40
39395: PUSH
39396: LD_INT 10
39398: PUSH
39399: LD_INT 20
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: LIST
39406: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39407: LD_VAR 0 6
39411: PPUSH
39412: CALL_OW 264
39416: PUSH
39417: LD_INT 9
39419: PUSH
39420: EMPTY
39421: LIST
39422: IN
39423: IFFALSE 39444
// points := [ 5 , 70 , 20 ] ;
39425: LD_ADDR_VAR 0 9
39429: PUSH
39430: LD_INT 5
39432: PUSH
39433: LD_INT 70
39435: PUSH
39436: LD_INT 20
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: LIST
39443: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39444: LD_VAR 0 6
39448: PPUSH
39449: CALL_OW 264
39453: PUSH
39454: LD_INT 10
39456: PUSH
39457: EMPTY
39458: LIST
39459: IN
39460: IFFALSE 39481
// points := [ 35 , 110 , 70 ] ;
39462: LD_ADDR_VAR 0 9
39466: PUSH
39467: LD_INT 35
39469: PUSH
39470: LD_INT 110
39472: PUSH
39473: LD_INT 70
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: LIST
39480: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39481: LD_VAR 0 6
39485: PPUSH
39486: CALL_OW 265
39490: PUSH
39491: LD_INT 25
39493: EQUAL
39494: IFFALSE 39515
// points := [ 80 , 65 , 100 ] ;
39496: LD_ADDR_VAR 0 9
39500: PUSH
39501: LD_INT 80
39503: PUSH
39504: LD_INT 65
39506: PUSH
39507: LD_INT 100
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: LIST
39514: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39515: LD_VAR 0 6
39519: PPUSH
39520: CALL_OW 263
39524: PUSH
39525: LD_INT 1
39527: EQUAL
39528: IFFALSE 39563
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39530: LD_ADDR_VAR 0 10
39534: PUSH
39535: LD_VAR 0 10
39539: PUSH
39540: LD_VAR 0 6
39544: PPUSH
39545: CALL_OW 311
39549: PPUSH
39550: LD_INT 3
39552: PPUSH
39553: CALL_OW 259
39557: PUSH
39558: LD_INT 4
39560: MUL
39561: MUL
39562: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39563: LD_VAR 0 6
39567: PPUSH
39568: CALL_OW 263
39572: PUSH
39573: LD_INT 2
39575: EQUAL
39576: IFFALSE 39627
// begin j := IsControledBy ( i ) ;
39578: LD_ADDR_VAR 0 7
39582: PUSH
39583: LD_VAR 0 6
39587: PPUSH
39588: CALL_OW 312
39592: ST_TO_ADDR
// if j then
39593: LD_VAR 0 7
39597: IFFALSE 39627
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39599: LD_ADDR_VAR 0 10
39603: PUSH
39604: LD_VAR 0 10
39608: PUSH
39609: LD_VAR 0 7
39613: PPUSH
39614: LD_INT 3
39616: PPUSH
39617: CALL_OW 259
39621: PUSH
39622: LD_INT 3
39624: MUL
39625: MUL
39626: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39627: LD_VAR 0 6
39631: PPUSH
39632: CALL_OW 264
39636: PUSH
39637: LD_INT 5
39639: PUSH
39640: LD_INT 6
39642: PUSH
39643: LD_INT 46
39645: PUSH
39646: LD_INT 44
39648: PUSH
39649: LD_INT 47
39651: PUSH
39652: LD_INT 45
39654: PUSH
39655: LD_INT 28
39657: PUSH
39658: LD_INT 7
39660: PUSH
39661: LD_INT 27
39663: PUSH
39664: LD_INT 29
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: IN
39679: PUSH
39680: LD_VAR 0 1
39684: PPUSH
39685: LD_INT 52
39687: PPUSH
39688: CALL_OW 321
39692: PUSH
39693: LD_INT 2
39695: EQUAL
39696: AND
39697: IFFALSE 39714
// bpoints := bpoints * 1.2 ;
39699: LD_ADDR_VAR 0 10
39703: PUSH
39704: LD_VAR 0 10
39708: PUSH
39709: LD_REAL  1.20000000000000E+0000
39712: MUL
39713: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39714: LD_VAR 0 6
39718: PPUSH
39719: CALL_OW 264
39723: PUSH
39724: LD_INT 6
39726: PUSH
39727: LD_INT 46
39729: PUSH
39730: LD_INT 47
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: LIST
39737: IN
39738: IFFALSE 39755
// bpoints := bpoints * 1.2 ;
39740: LD_ADDR_VAR 0 10
39744: PUSH
39745: LD_VAR 0 10
39749: PUSH
39750: LD_REAL  1.20000000000000E+0000
39753: MUL
39754: ST_TO_ADDR
// end ; unit_building :
39755: GO 39769
39757: LD_INT 3
39759: DOUBLE
39760: EQUAL
39761: IFTRUE 39765
39763: GO 39768
39765: POP
// ; end ;
39766: GO 39769
39768: POP
// for j = 1 to 3 do
39769: LD_ADDR_VAR 0 7
39773: PUSH
39774: DOUBLE
39775: LD_INT 1
39777: DEC
39778: ST_TO_ADDR
39779: LD_INT 3
39781: PUSH
39782: FOR_TO
39783: IFFALSE 39836
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39785: LD_ADDR_VAR 0 5
39789: PUSH
39790: LD_VAR 0 5
39794: PPUSH
39795: LD_VAR 0 7
39799: PPUSH
39800: LD_VAR 0 5
39804: PUSH
39805: LD_VAR 0 7
39809: ARRAY
39810: PUSH
39811: LD_VAR 0 9
39815: PUSH
39816: LD_VAR 0 7
39820: ARRAY
39821: PUSH
39822: LD_VAR 0 10
39826: MUL
39827: PLUS
39828: PPUSH
39829: CALL_OW 1
39833: ST_TO_ADDR
39834: GO 39782
39836: POP
39837: POP
// end ;
39838: GO 38315
39840: POP
39841: POP
// result := Replace ( result , 4 , tmp ) ;
39842: LD_ADDR_VAR 0 5
39846: PUSH
39847: LD_VAR 0 5
39851: PPUSH
39852: LD_INT 4
39854: PPUSH
39855: LD_VAR 0 8
39859: PPUSH
39860: CALL_OW 1
39864: ST_TO_ADDR
// end ;
39865: LD_VAR 0 5
39869: RET
// export function DangerAtRange ( unit , range ) ; begin
39870: LD_INT 0
39872: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39873: LD_ADDR_VAR 0 3
39877: PUSH
39878: LD_VAR 0 1
39882: PPUSH
39883: CALL_OW 255
39887: PPUSH
39888: LD_VAR 0 1
39892: PPUSH
39893: CALL_OW 250
39897: PPUSH
39898: LD_VAR 0 1
39902: PPUSH
39903: CALL_OW 251
39907: PPUSH
39908: LD_VAR 0 2
39912: PPUSH
39913: CALL 38167 0 4
39917: ST_TO_ADDR
// end ;
39918: LD_VAR 0 3
39922: RET
// export function DangerInArea ( side , area ) ; begin
39923: LD_INT 0
39925: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39926: LD_ADDR_VAR 0 3
39930: PUSH
39931: LD_VAR 0 2
39935: PPUSH
39936: LD_INT 81
39938: PUSH
39939: LD_VAR 0 1
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PPUSH
39948: CALL_OW 70
39952: ST_TO_ADDR
// end ;
39953: LD_VAR 0 3
39957: RET
// export function IsExtension ( b ) ; begin
39958: LD_INT 0
39960: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39961: LD_ADDR_VAR 0 2
39965: PUSH
39966: LD_VAR 0 1
39970: PUSH
39971: LD_INT 23
39973: PUSH
39974: LD_INT 20
39976: PUSH
39977: LD_INT 22
39979: PUSH
39980: LD_INT 17
39982: PUSH
39983: LD_INT 24
39985: PUSH
39986: LD_INT 21
39988: PUSH
39989: LD_INT 19
39991: PUSH
39992: LD_INT 16
39994: PUSH
39995: LD_INT 25
39997: PUSH
39998: LD_INT 18
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: IN
40013: ST_TO_ADDR
// end ;
40014: LD_VAR 0 2
40018: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40019: LD_INT 0
40021: PPUSH
40022: PPUSH
40023: PPUSH
// result := [ ] ;
40024: LD_ADDR_VAR 0 4
40028: PUSH
40029: EMPTY
40030: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40031: LD_ADDR_VAR 0 5
40035: PUSH
40036: LD_VAR 0 2
40040: PPUSH
40041: LD_INT 21
40043: PUSH
40044: LD_INT 3
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PPUSH
40051: CALL_OW 70
40055: ST_TO_ADDR
// if not tmp then
40056: LD_VAR 0 5
40060: NOT
40061: IFFALSE 40065
// exit ;
40063: GO 40129
// if checkLink then
40065: LD_VAR 0 3
40069: IFFALSE 40119
// begin for i in tmp do
40071: LD_ADDR_VAR 0 6
40075: PUSH
40076: LD_VAR 0 5
40080: PUSH
40081: FOR_IN
40082: IFFALSE 40117
// if GetBase ( i ) <> base then
40084: LD_VAR 0 6
40088: PPUSH
40089: CALL_OW 274
40093: PUSH
40094: LD_VAR 0 1
40098: NONEQUAL
40099: IFFALSE 40115
// ComLinkToBase ( base , i ) ;
40101: LD_VAR 0 1
40105: PPUSH
40106: LD_VAR 0 6
40110: PPUSH
40111: CALL_OW 169
40115: GO 40081
40117: POP
40118: POP
// end ; result := tmp ;
40119: LD_ADDR_VAR 0 4
40123: PUSH
40124: LD_VAR 0 5
40128: ST_TO_ADDR
// end ;
40129: LD_VAR 0 4
40133: RET
// export function ComComplete ( units , b ) ; var i ; begin
40134: LD_INT 0
40136: PPUSH
40137: PPUSH
// if not units then
40138: LD_VAR 0 1
40142: NOT
40143: IFFALSE 40147
// exit ;
40145: GO 40237
// for i in units do
40147: LD_ADDR_VAR 0 4
40151: PUSH
40152: LD_VAR 0 1
40156: PUSH
40157: FOR_IN
40158: IFFALSE 40235
// if BuildingStatus ( b ) = bs_build then
40160: LD_VAR 0 2
40164: PPUSH
40165: CALL_OW 461
40169: PUSH
40170: LD_INT 1
40172: EQUAL
40173: IFFALSE 40233
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40175: LD_VAR 0 4
40179: PPUSH
40180: LD_STRING h
40182: PUSH
40183: LD_VAR 0 2
40187: PPUSH
40188: CALL_OW 250
40192: PUSH
40193: LD_VAR 0 2
40197: PPUSH
40198: CALL_OW 251
40202: PUSH
40203: LD_VAR 0 2
40207: PUSH
40208: LD_INT 0
40210: PUSH
40211: LD_INT 0
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: PUSH
40226: EMPTY
40227: LIST
40228: PPUSH
40229: CALL_OW 446
40233: GO 40157
40235: POP
40236: POP
// end ;
40237: LD_VAR 0 3
40241: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40242: LD_INT 0
40244: PPUSH
40245: PPUSH
40246: PPUSH
40247: PPUSH
40248: PPUSH
40249: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40250: LD_VAR 0 1
40254: NOT
40255: PUSH
40256: LD_VAR 0 1
40260: PPUSH
40261: CALL_OW 263
40265: PUSH
40266: LD_INT 2
40268: NONEQUAL
40269: OR
40270: IFFALSE 40274
// exit ;
40272: GO 40590
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40274: LD_ADDR_VAR 0 6
40278: PUSH
40279: LD_INT 22
40281: PUSH
40282: LD_VAR 0 1
40286: PPUSH
40287: CALL_OW 255
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 2
40298: PUSH
40299: LD_INT 30
40301: PUSH
40302: LD_INT 36
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 34
40311: PUSH
40312: LD_INT 31
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: LIST
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PPUSH
40328: CALL_OW 69
40332: ST_TO_ADDR
// if not tmp then
40333: LD_VAR 0 6
40337: NOT
40338: IFFALSE 40342
// exit ;
40340: GO 40590
// result := [ ] ;
40342: LD_ADDR_VAR 0 2
40346: PUSH
40347: EMPTY
40348: ST_TO_ADDR
// for i in tmp do
40349: LD_ADDR_VAR 0 3
40353: PUSH
40354: LD_VAR 0 6
40358: PUSH
40359: FOR_IN
40360: IFFALSE 40431
// begin t := UnitsInside ( i ) ;
40362: LD_ADDR_VAR 0 4
40366: PUSH
40367: LD_VAR 0 3
40371: PPUSH
40372: CALL_OW 313
40376: ST_TO_ADDR
// if t then
40377: LD_VAR 0 4
40381: IFFALSE 40429
// for j in t do
40383: LD_ADDR_VAR 0 7
40387: PUSH
40388: LD_VAR 0 4
40392: PUSH
40393: FOR_IN
40394: IFFALSE 40427
// result := Replace ( result , result + 1 , j ) ;
40396: LD_ADDR_VAR 0 2
40400: PUSH
40401: LD_VAR 0 2
40405: PPUSH
40406: LD_VAR 0 2
40410: PUSH
40411: LD_INT 1
40413: PLUS
40414: PPUSH
40415: LD_VAR 0 7
40419: PPUSH
40420: CALL_OW 1
40424: ST_TO_ADDR
40425: GO 40393
40427: POP
40428: POP
// end ;
40429: GO 40359
40431: POP
40432: POP
// if not result then
40433: LD_VAR 0 2
40437: NOT
40438: IFFALSE 40442
// exit ;
40440: GO 40590
// mech := result [ 1 ] ;
40442: LD_ADDR_VAR 0 5
40446: PUSH
40447: LD_VAR 0 2
40451: PUSH
40452: LD_INT 1
40454: ARRAY
40455: ST_TO_ADDR
// if result > 1 then
40456: LD_VAR 0 2
40460: PUSH
40461: LD_INT 1
40463: GREATER
40464: IFFALSE 40576
// begin for i = 2 to result do
40466: LD_ADDR_VAR 0 3
40470: PUSH
40471: DOUBLE
40472: LD_INT 2
40474: DEC
40475: ST_TO_ADDR
40476: LD_VAR 0 2
40480: PUSH
40481: FOR_TO
40482: IFFALSE 40574
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40484: LD_ADDR_VAR 0 4
40488: PUSH
40489: LD_VAR 0 2
40493: PUSH
40494: LD_VAR 0 3
40498: ARRAY
40499: PPUSH
40500: LD_INT 3
40502: PPUSH
40503: CALL_OW 259
40507: PUSH
40508: LD_VAR 0 2
40512: PUSH
40513: LD_VAR 0 3
40517: ARRAY
40518: PPUSH
40519: CALL_OW 432
40523: MINUS
40524: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40525: LD_VAR 0 4
40529: PUSH
40530: LD_VAR 0 5
40534: PPUSH
40535: LD_INT 3
40537: PPUSH
40538: CALL_OW 259
40542: PUSH
40543: LD_VAR 0 5
40547: PPUSH
40548: CALL_OW 432
40552: MINUS
40553: GREATEREQUAL
40554: IFFALSE 40572
// mech := result [ i ] ;
40556: LD_ADDR_VAR 0 5
40560: PUSH
40561: LD_VAR 0 2
40565: PUSH
40566: LD_VAR 0 3
40570: ARRAY
40571: ST_TO_ADDR
// end ;
40572: GO 40481
40574: POP
40575: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40576: LD_VAR 0 1
40580: PPUSH
40581: LD_VAR 0 5
40585: PPUSH
40586: CALL_OW 135
// end ;
40590: LD_VAR 0 2
40594: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40595: LD_INT 0
40597: PPUSH
40598: PPUSH
40599: PPUSH
40600: PPUSH
40601: PPUSH
40602: PPUSH
40603: PPUSH
40604: PPUSH
40605: PPUSH
40606: PPUSH
40607: PPUSH
40608: PPUSH
40609: PPUSH
// result := [ ] ;
40610: LD_ADDR_VAR 0 7
40614: PUSH
40615: EMPTY
40616: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40617: LD_VAR 0 1
40621: PPUSH
40622: CALL_OW 266
40626: PUSH
40627: LD_INT 0
40629: PUSH
40630: LD_INT 1
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: IN
40637: NOT
40638: IFFALSE 40642
// exit ;
40640: GO 42276
// if name then
40642: LD_VAR 0 3
40646: IFFALSE 40662
// SetBName ( base_dep , name ) ;
40648: LD_VAR 0 1
40652: PPUSH
40653: LD_VAR 0 3
40657: PPUSH
40658: CALL_OW 500
// base := GetBase ( base_dep ) ;
40662: LD_ADDR_VAR 0 15
40666: PUSH
40667: LD_VAR 0 1
40671: PPUSH
40672: CALL_OW 274
40676: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40677: LD_ADDR_VAR 0 16
40681: PUSH
40682: LD_VAR 0 1
40686: PPUSH
40687: CALL_OW 255
40691: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40692: LD_ADDR_VAR 0 17
40696: PUSH
40697: LD_VAR 0 1
40701: PPUSH
40702: CALL_OW 248
40706: ST_TO_ADDR
// if sources then
40707: LD_VAR 0 5
40711: IFFALSE 40758
// for i = 1 to 3 do
40713: LD_ADDR_VAR 0 8
40717: PUSH
40718: DOUBLE
40719: LD_INT 1
40721: DEC
40722: ST_TO_ADDR
40723: LD_INT 3
40725: PUSH
40726: FOR_TO
40727: IFFALSE 40756
// AddResourceType ( base , i , sources [ i ] ) ;
40729: LD_VAR 0 15
40733: PPUSH
40734: LD_VAR 0 8
40738: PPUSH
40739: LD_VAR 0 5
40743: PUSH
40744: LD_VAR 0 8
40748: ARRAY
40749: PPUSH
40750: CALL_OW 276
40754: GO 40726
40756: POP
40757: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40758: LD_ADDR_VAR 0 18
40762: PUSH
40763: LD_VAR 0 15
40767: PPUSH
40768: LD_VAR 0 2
40772: PPUSH
40773: LD_INT 1
40775: PPUSH
40776: CALL 40019 0 3
40780: ST_TO_ADDR
// InitHc ;
40781: CALL_OW 19
// InitUc ;
40785: CALL_OW 18
// uc_side := side ;
40789: LD_ADDR_OWVAR 20
40793: PUSH
40794: LD_VAR 0 16
40798: ST_TO_ADDR
// uc_nation := nation ;
40799: LD_ADDR_OWVAR 21
40803: PUSH
40804: LD_VAR 0 17
40808: ST_TO_ADDR
// if buildings then
40809: LD_VAR 0 18
40813: IFFALSE 42135
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40815: LD_ADDR_VAR 0 19
40819: PUSH
40820: LD_VAR 0 18
40824: PPUSH
40825: LD_INT 2
40827: PUSH
40828: LD_INT 30
40830: PUSH
40831: LD_INT 29
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 30
40840: PUSH
40841: LD_INT 30
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: LIST
40852: PPUSH
40853: CALL_OW 72
40857: ST_TO_ADDR
// if tmp then
40858: LD_VAR 0 19
40862: IFFALSE 40910
// for i in tmp do
40864: LD_ADDR_VAR 0 8
40868: PUSH
40869: LD_VAR 0 19
40873: PUSH
40874: FOR_IN
40875: IFFALSE 40908
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40877: LD_VAR 0 8
40881: PPUSH
40882: CALL_OW 250
40886: PPUSH
40887: LD_VAR 0 8
40891: PPUSH
40892: CALL_OW 251
40896: PPUSH
40897: LD_VAR 0 16
40901: PPUSH
40902: CALL_OW 441
40906: GO 40874
40908: POP
40909: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40910: LD_VAR 0 18
40914: PPUSH
40915: LD_INT 2
40917: PUSH
40918: LD_INT 30
40920: PUSH
40921: LD_INT 32
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 30
40930: PUSH
40931: LD_INT 33
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: LIST
40942: PPUSH
40943: CALL_OW 72
40947: IFFALSE 41035
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40949: LD_ADDR_VAR 0 8
40953: PUSH
40954: LD_VAR 0 18
40958: PPUSH
40959: LD_INT 2
40961: PUSH
40962: LD_INT 30
40964: PUSH
40965: LD_INT 32
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 30
40974: PUSH
40975: LD_INT 33
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: LIST
40986: PPUSH
40987: CALL_OW 72
40991: PUSH
40992: FOR_IN
40993: IFFALSE 41033
// begin if not GetBWeapon ( i ) then
40995: LD_VAR 0 8
40999: PPUSH
41000: CALL_OW 269
41004: NOT
41005: IFFALSE 41031
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41007: LD_VAR 0 8
41011: PPUSH
41012: LD_VAR 0 8
41016: PPUSH
41017: LD_VAR 0 2
41021: PPUSH
41022: CALL 42281 0 2
41026: PPUSH
41027: CALL_OW 431
// end ;
41031: GO 40992
41033: POP
41034: POP
// end ; for i = 1 to personel do
41035: LD_ADDR_VAR 0 8
41039: PUSH
41040: DOUBLE
41041: LD_INT 1
41043: DEC
41044: ST_TO_ADDR
41045: LD_VAR 0 6
41049: PUSH
41050: FOR_TO
41051: IFFALSE 42115
// begin if i > 4 then
41053: LD_VAR 0 8
41057: PUSH
41058: LD_INT 4
41060: GREATER
41061: IFFALSE 41065
// break ;
41063: GO 42115
// case i of 1 :
41065: LD_VAR 0 8
41069: PUSH
41070: LD_INT 1
41072: DOUBLE
41073: EQUAL
41074: IFTRUE 41078
41076: GO 41158
41078: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41079: LD_ADDR_VAR 0 12
41083: PUSH
41084: LD_VAR 0 18
41088: PPUSH
41089: LD_INT 22
41091: PUSH
41092: LD_VAR 0 16
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 58
41103: PUSH
41104: EMPTY
41105: LIST
41106: PUSH
41107: LD_INT 2
41109: PUSH
41110: LD_INT 30
41112: PUSH
41113: LD_INT 32
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 30
41122: PUSH
41123: LD_INT 4
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 30
41132: PUSH
41133: LD_INT 5
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: LIST
41150: PPUSH
41151: CALL_OW 72
41155: ST_TO_ADDR
41156: GO 41380
41158: LD_INT 2
41160: DOUBLE
41161: EQUAL
41162: IFTRUE 41166
41164: GO 41228
41166: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41167: LD_ADDR_VAR 0 12
41171: PUSH
41172: LD_VAR 0 18
41176: PPUSH
41177: LD_INT 22
41179: PUSH
41180: LD_VAR 0 16
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 2
41191: PUSH
41192: LD_INT 30
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 30
41204: PUSH
41205: LD_INT 1
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: LIST
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PPUSH
41221: CALL_OW 72
41225: ST_TO_ADDR
41226: GO 41380
41228: LD_INT 3
41230: DOUBLE
41231: EQUAL
41232: IFTRUE 41236
41234: GO 41298
41236: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41237: LD_ADDR_VAR 0 12
41241: PUSH
41242: LD_VAR 0 18
41246: PPUSH
41247: LD_INT 22
41249: PUSH
41250: LD_VAR 0 16
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 2
41261: PUSH
41262: LD_INT 30
41264: PUSH
41265: LD_INT 2
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 30
41274: PUSH
41275: LD_INT 3
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: LIST
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PPUSH
41291: CALL_OW 72
41295: ST_TO_ADDR
41296: GO 41380
41298: LD_INT 4
41300: DOUBLE
41301: EQUAL
41302: IFTRUE 41306
41304: GO 41379
41306: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41307: LD_ADDR_VAR 0 12
41311: PUSH
41312: LD_VAR 0 18
41316: PPUSH
41317: LD_INT 22
41319: PUSH
41320: LD_VAR 0 16
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 2
41331: PUSH
41332: LD_INT 30
41334: PUSH
41335: LD_INT 6
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 30
41344: PUSH
41345: LD_INT 7
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 30
41354: PUSH
41355: LD_INT 8
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PPUSH
41372: CALL_OW 72
41376: ST_TO_ADDR
41377: GO 41380
41379: POP
// if i = 1 then
41380: LD_VAR 0 8
41384: PUSH
41385: LD_INT 1
41387: EQUAL
41388: IFFALSE 41499
// begin tmp := [ ] ;
41390: LD_ADDR_VAR 0 19
41394: PUSH
41395: EMPTY
41396: ST_TO_ADDR
// for j in f do
41397: LD_ADDR_VAR 0 9
41401: PUSH
41402: LD_VAR 0 12
41406: PUSH
41407: FOR_IN
41408: IFFALSE 41481
// if GetBType ( j ) = b_bunker then
41410: LD_VAR 0 9
41414: PPUSH
41415: CALL_OW 266
41419: PUSH
41420: LD_INT 32
41422: EQUAL
41423: IFFALSE 41450
// tmp := Insert ( tmp , 1 , j ) else
41425: LD_ADDR_VAR 0 19
41429: PUSH
41430: LD_VAR 0 19
41434: PPUSH
41435: LD_INT 1
41437: PPUSH
41438: LD_VAR 0 9
41442: PPUSH
41443: CALL_OW 2
41447: ST_TO_ADDR
41448: GO 41479
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41450: LD_ADDR_VAR 0 19
41454: PUSH
41455: LD_VAR 0 19
41459: PPUSH
41460: LD_VAR 0 19
41464: PUSH
41465: LD_INT 1
41467: PLUS
41468: PPUSH
41469: LD_VAR 0 9
41473: PPUSH
41474: CALL_OW 2
41478: ST_TO_ADDR
41479: GO 41407
41481: POP
41482: POP
// if tmp then
41483: LD_VAR 0 19
41487: IFFALSE 41499
// f := tmp ;
41489: LD_ADDR_VAR 0 12
41493: PUSH
41494: LD_VAR 0 19
41498: ST_TO_ADDR
// end ; x := personel [ i ] ;
41499: LD_ADDR_VAR 0 13
41503: PUSH
41504: LD_VAR 0 6
41508: PUSH
41509: LD_VAR 0 8
41513: ARRAY
41514: ST_TO_ADDR
// if x = - 1 then
41515: LD_VAR 0 13
41519: PUSH
41520: LD_INT 1
41522: NEG
41523: EQUAL
41524: IFFALSE 41733
// begin for j in f do
41526: LD_ADDR_VAR 0 9
41530: PUSH
41531: LD_VAR 0 12
41535: PUSH
41536: FOR_IN
41537: IFFALSE 41729
// repeat InitHc ;
41539: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41543: LD_VAR 0 9
41547: PPUSH
41548: CALL_OW 266
41552: PUSH
41553: LD_INT 5
41555: EQUAL
41556: IFFALSE 41626
// begin if UnitsInside ( j ) < 3 then
41558: LD_VAR 0 9
41562: PPUSH
41563: CALL_OW 313
41567: PUSH
41568: LD_INT 3
41570: LESS
41571: IFFALSE 41607
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41573: LD_INT 0
41575: PPUSH
41576: LD_INT 5
41578: PUSH
41579: LD_INT 8
41581: PUSH
41582: LD_INT 9
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: LIST
41589: PUSH
41590: LD_VAR 0 17
41594: ARRAY
41595: PPUSH
41596: LD_VAR 0 4
41600: PPUSH
41601: CALL_OW 380
41605: GO 41624
// PrepareHuman ( false , i , skill ) ;
41607: LD_INT 0
41609: PPUSH
41610: LD_VAR 0 8
41614: PPUSH
41615: LD_VAR 0 4
41619: PPUSH
41620: CALL_OW 380
// end else
41624: GO 41643
// PrepareHuman ( false , i , skill ) ;
41626: LD_INT 0
41628: PPUSH
41629: LD_VAR 0 8
41633: PPUSH
41634: LD_VAR 0 4
41638: PPUSH
41639: CALL_OW 380
// un := CreateHuman ;
41643: LD_ADDR_VAR 0 14
41647: PUSH
41648: CALL_OW 44
41652: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41653: LD_ADDR_VAR 0 7
41657: PUSH
41658: LD_VAR 0 7
41662: PPUSH
41663: LD_INT 1
41665: PPUSH
41666: LD_VAR 0 14
41670: PPUSH
41671: CALL_OW 2
41675: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41676: LD_VAR 0 14
41680: PPUSH
41681: LD_VAR 0 9
41685: PPUSH
41686: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41690: LD_VAR 0 9
41694: PPUSH
41695: CALL_OW 313
41699: PUSH
41700: LD_INT 6
41702: EQUAL
41703: PUSH
41704: LD_VAR 0 9
41708: PPUSH
41709: CALL_OW 266
41713: PUSH
41714: LD_INT 32
41716: PUSH
41717: LD_INT 31
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: IN
41724: OR
41725: IFFALSE 41539
41727: GO 41536
41729: POP
41730: POP
// end else
41731: GO 42113
// for j = 1 to x do
41733: LD_ADDR_VAR 0 9
41737: PUSH
41738: DOUBLE
41739: LD_INT 1
41741: DEC
41742: ST_TO_ADDR
41743: LD_VAR 0 13
41747: PUSH
41748: FOR_TO
41749: IFFALSE 42111
// begin InitHc ;
41751: CALL_OW 19
// if not f then
41755: LD_VAR 0 12
41759: NOT
41760: IFFALSE 41849
// begin PrepareHuman ( false , i , skill ) ;
41762: LD_INT 0
41764: PPUSH
41765: LD_VAR 0 8
41769: PPUSH
41770: LD_VAR 0 4
41774: PPUSH
41775: CALL_OW 380
// un := CreateHuman ;
41779: LD_ADDR_VAR 0 14
41783: PUSH
41784: CALL_OW 44
41788: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41789: LD_ADDR_VAR 0 7
41793: PUSH
41794: LD_VAR 0 7
41798: PPUSH
41799: LD_INT 1
41801: PPUSH
41802: LD_VAR 0 14
41806: PPUSH
41807: CALL_OW 2
41811: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41812: LD_VAR 0 14
41816: PPUSH
41817: LD_VAR 0 1
41821: PPUSH
41822: CALL_OW 250
41826: PPUSH
41827: LD_VAR 0 1
41831: PPUSH
41832: CALL_OW 251
41836: PPUSH
41837: LD_INT 10
41839: PPUSH
41840: LD_INT 0
41842: PPUSH
41843: CALL_OW 50
// continue ;
41847: GO 41748
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41849: LD_VAR 0 12
41853: PUSH
41854: LD_INT 1
41856: ARRAY
41857: PPUSH
41858: CALL_OW 313
41862: PUSH
41863: LD_VAR 0 12
41867: PUSH
41868: LD_INT 1
41870: ARRAY
41871: PPUSH
41872: CALL_OW 266
41876: PUSH
41877: LD_INT 32
41879: PUSH
41880: LD_INT 31
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: IN
41887: AND
41888: PUSH
41889: LD_VAR 0 12
41893: PUSH
41894: LD_INT 1
41896: ARRAY
41897: PPUSH
41898: CALL_OW 313
41902: PUSH
41903: LD_INT 6
41905: EQUAL
41906: OR
41907: IFFALSE 41927
// f := Delete ( f , 1 ) ;
41909: LD_ADDR_VAR 0 12
41913: PUSH
41914: LD_VAR 0 12
41918: PPUSH
41919: LD_INT 1
41921: PPUSH
41922: CALL_OW 3
41926: ST_TO_ADDR
// if not f then
41927: LD_VAR 0 12
41931: NOT
41932: IFFALSE 41950
// begin x := x + 2 ;
41934: LD_ADDR_VAR 0 13
41938: PUSH
41939: LD_VAR 0 13
41943: PUSH
41944: LD_INT 2
41946: PLUS
41947: ST_TO_ADDR
// continue ;
41948: GO 41748
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41950: LD_VAR 0 12
41954: PUSH
41955: LD_INT 1
41957: ARRAY
41958: PPUSH
41959: CALL_OW 266
41963: PUSH
41964: LD_INT 5
41966: EQUAL
41967: IFFALSE 42041
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41969: LD_VAR 0 12
41973: PUSH
41974: LD_INT 1
41976: ARRAY
41977: PPUSH
41978: CALL_OW 313
41982: PUSH
41983: LD_INT 3
41985: LESS
41986: IFFALSE 42022
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41988: LD_INT 0
41990: PPUSH
41991: LD_INT 5
41993: PUSH
41994: LD_INT 8
41996: PUSH
41997: LD_INT 9
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: LIST
42004: PUSH
42005: LD_VAR 0 17
42009: ARRAY
42010: PPUSH
42011: LD_VAR 0 4
42015: PPUSH
42016: CALL_OW 380
42020: GO 42039
// PrepareHuman ( false , i , skill ) ;
42022: LD_INT 0
42024: PPUSH
42025: LD_VAR 0 8
42029: PPUSH
42030: LD_VAR 0 4
42034: PPUSH
42035: CALL_OW 380
// end else
42039: GO 42058
// PrepareHuman ( false , i , skill ) ;
42041: LD_INT 0
42043: PPUSH
42044: LD_VAR 0 8
42048: PPUSH
42049: LD_VAR 0 4
42053: PPUSH
42054: CALL_OW 380
// un := CreateHuman ;
42058: LD_ADDR_VAR 0 14
42062: PUSH
42063: CALL_OW 44
42067: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42068: LD_ADDR_VAR 0 7
42072: PUSH
42073: LD_VAR 0 7
42077: PPUSH
42078: LD_INT 1
42080: PPUSH
42081: LD_VAR 0 14
42085: PPUSH
42086: CALL_OW 2
42090: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42091: LD_VAR 0 14
42095: PPUSH
42096: LD_VAR 0 12
42100: PUSH
42101: LD_INT 1
42103: ARRAY
42104: PPUSH
42105: CALL_OW 52
// end ;
42109: GO 41748
42111: POP
42112: POP
// end ;
42113: GO 41050
42115: POP
42116: POP
// result := result ^ buildings ;
42117: LD_ADDR_VAR 0 7
42121: PUSH
42122: LD_VAR 0 7
42126: PUSH
42127: LD_VAR 0 18
42131: ADD
42132: ST_TO_ADDR
// end else
42133: GO 42276
// begin for i = 1 to personel do
42135: LD_ADDR_VAR 0 8
42139: PUSH
42140: DOUBLE
42141: LD_INT 1
42143: DEC
42144: ST_TO_ADDR
42145: LD_VAR 0 6
42149: PUSH
42150: FOR_TO
42151: IFFALSE 42274
// begin if i > 4 then
42153: LD_VAR 0 8
42157: PUSH
42158: LD_INT 4
42160: GREATER
42161: IFFALSE 42165
// break ;
42163: GO 42274
// x := personel [ i ] ;
42165: LD_ADDR_VAR 0 13
42169: PUSH
42170: LD_VAR 0 6
42174: PUSH
42175: LD_VAR 0 8
42179: ARRAY
42180: ST_TO_ADDR
// if x = - 1 then
42181: LD_VAR 0 13
42185: PUSH
42186: LD_INT 1
42188: NEG
42189: EQUAL
42190: IFFALSE 42194
// continue ;
42192: GO 42150
// PrepareHuman ( false , i , skill ) ;
42194: LD_INT 0
42196: PPUSH
42197: LD_VAR 0 8
42201: PPUSH
42202: LD_VAR 0 4
42206: PPUSH
42207: CALL_OW 380
// un := CreateHuman ;
42211: LD_ADDR_VAR 0 14
42215: PUSH
42216: CALL_OW 44
42220: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42221: LD_VAR 0 14
42225: PPUSH
42226: LD_VAR 0 1
42230: PPUSH
42231: CALL_OW 250
42235: PPUSH
42236: LD_VAR 0 1
42240: PPUSH
42241: CALL_OW 251
42245: PPUSH
42246: LD_INT 10
42248: PPUSH
42249: LD_INT 0
42251: PPUSH
42252: CALL_OW 50
// result := result ^ un ;
42256: LD_ADDR_VAR 0 7
42260: PUSH
42261: LD_VAR 0 7
42265: PUSH
42266: LD_VAR 0 14
42270: ADD
42271: ST_TO_ADDR
// end ;
42272: GO 42150
42274: POP
42275: POP
// end ; end ;
42276: LD_VAR 0 7
42280: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42281: LD_INT 0
42283: PPUSH
42284: PPUSH
42285: PPUSH
42286: PPUSH
42287: PPUSH
42288: PPUSH
42289: PPUSH
42290: PPUSH
42291: PPUSH
42292: PPUSH
42293: PPUSH
42294: PPUSH
42295: PPUSH
42296: PPUSH
42297: PPUSH
42298: PPUSH
// result := false ;
42299: LD_ADDR_VAR 0 3
42303: PUSH
42304: LD_INT 0
42306: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42307: LD_VAR 0 1
42311: NOT
42312: PUSH
42313: LD_VAR 0 1
42317: PPUSH
42318: CALL_OW 266
42322: PUSH
42323: LD_INT 32
42325: PUSH
42326: LD_INT 33
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: IN
42333: NOT
42334: OR
42335: IFFALSE 42339
// exit ;
42337: GO 43448
// nat := GetNation ( tower ) ;
42339: LD_ADDR_VAR 0 12
42343: PUSH
42344: LD_VAR 0 1
42348: PPUSH
42349: CALL_OW 248
42353: ST_TO_ADDR
// side := GetSide ( tower ) ;
42354: LD_ADDR_VAR 0 16
42358: PUSH
42359: LD_VAR 0 1
42363: PPUSH
42364: CALL_OW 255
42368: ST_TO_ADDR
// x := GetX ( tower ) ;
42369: LD_ADDR_VAR 0 10
42373: PUSH
42374: LD_VAR 0 1
42378: PPUSH
42379: CALL_OW 250
42383: ST_TO_ADDR
// y := GetY ( tower ) ;
42384: LD_ADDR_VAR 0 11
42388: PUSH
42389: LD_VAR 0 1
42393: PPUSH
42394: CALL_OW 251
42398: ST_TO_ADDR
// if not x or not y then
42399: LD_VAR 0 10
42403: NOT
42404: PUSH
42405: LD_VAR 0 11
42409: NOT
42410: OR
42411: IFFALSE 42415
// exit ;
42413: GO 43448
// weapon := 0 ;
42415: LD_ADDR_VAR 0 18
42419: PUSH
42420: LD_INT 0
42422: ST_TO_ADDR
// fac_list := [ ] ;
42423: LD_ADDR_VAR 0 17
42427: PUSH
42428: EMPTY
42429: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42430: LD_ADDR_VAR 0 6
42434: PUSH
42435: LD_VAR 0 1
42439: PPUSH
42440: CALL_OW 274
42444: PPUSH
42445: LD_VAR 0 2
42449: PPUSH
42450: LD_INT 0
42452: PPUSH
42453: CALL 40019 0 3
42457: PPUSH
42458: LD_INT 30
42460: PUSH
42461: LD_INT 3
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PPUSH
42468: CALL_OW 72
42472: ST_TO_ADDR
// if not factories then
42473: LD_VAR 0 6
42477: NOT
42478: IFFALSE 42482
// exit ;
42480: GO 43448
// for i in factories do
42482: LD_ADDR_VAR 0 8
42486: PUSH
42487: LD_VAR 0 6
42491: PUSH
42492: FOR_IN
42493: IFFALSE 42518
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42495: LD_ADDR_VAR 0 17
42499: PUSH
42500: LD_VAR 0 17
42504: PUSH
42505: LD_VAR 0 8
42509: PPUSH
42510: CALL_OW 478
42514: UNION
42515: ST_TO_ADDR
42516: GO 42492
42518: POP
42519: POP
// if not fac_list then
42520: LD_VAR 0 17
42524: NOT
42525: IFFALSE 42529
// exit ;
42527: GO 43448
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42529: LD_ADDR_VAR 0 5
42533: PUSH
42534: LD_INT 4
42536: PUSH
42537: LD_INT 5
42539: PUSH
42540: LD_INT 9
42542: PUSH
42543: LD_INT 10
42545: PUSH
42546: LD_INT 6
42548: PUSH
42549: LD_INT 7
42551: PUSH
42552: LD_INT 11
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 27
42566: PUSH
42567: LD_INT 28
42569: PUSH
42570: LD_INT 26
42572: PUSH
42573: LD_INT 30
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 43
42584: PUSH
42585: LD_INT 44
42587: PUSH
42588: LD_INT 46
42590: PUSH
42591: LD_INT 45
42593: PUSH
42594: LD_INT 47
42596: PUSH
42597: LD_INT 49
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: LIST
42612: PUSH
42613: LD_VAR 0 12
42617: ARRAY
42618: ST_TO_ADDR
// list := list isect fac_list ;
42619: LD_ADDR_VAR 0 5
42623: PUSH
42624: LD_VAR 0 5
42628: PUSH
42629: LD_VAR 0 17
42633: ISECT
42634: ST_TO_ADDR
// if not list then
42635: LD_VAR 0 5
42639: NOT
42640: IFFALSE 42644
// exit ;
42642: GO 43448
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42644: LD_VAR 0 12
42648: PUSH
42649: LD_INT 3
42651: EQUAL
42652: PUSH
42653: LD_INT 49
42655: PUSH
42656: LD_VAR 0 5
42660: IN
42661: AND
42662: PUSH
42663: LD_INT 31
42665: PPUSH
42666: LD_VAR 0 16
42670: PPUSH
42671: CALL_OW 321
42675: PUSH
42676: LD_INT 2
42678: EQUAL
42679: AND
42680: IFFALSE 42740
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42682: LD_INT 22
42684: PUSH
42685: LD_VAR 0 16
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 35
42696: PUSH
42697: LD_INT 49
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 91
42706: PUSH
42707: LD_VAR 0 1
42711: PUSH
42712: LD_INT 10
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: LIST
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: LIST
42724: PPUSH
42725: CALL_OW 69
42729: NOT
42730: IFFALSE 42740
// weapon := ru_time_lapser ;
42732: LD_ADDR_VAR 0 18
42736: PUSH
42737: LD_INT 49
42739: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42740: LD_VAR 0 12
42744: PUSH
42745: LD_INT 1
42747: PUSH
42748: LD_INT 2
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: IN
42755: PUSH
42756: LD_INT 11
42758: PUSH
42759: LD_VAR 0 5
42763: IN
42764: PUSH
42765: LD_INT 30
42767: PUSH
42768: LD_VAR 0 5
42772: IN
42773: OR
42774: AND
42775: PUSH
42776: LD_INT 6
42778: PPUSH
42779: LD_VAR 0 16
42783: PPUSH
42784: CALL_OW 321
42788: PUSH
42789: LD_INT 2
42791: EQUAL
42792: AND
42793: IFFALSE 42958
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42795: LD_INT 22
42797: PUSH
42798: LD_VAR 0 16
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 2
42809: PUSH
42810: LD_INT 35
42812: PUSH
42813: LD_INT 11
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 35
42822: PUSH
42823: LD_INT 30
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 91
42837: PUSH
42838: LD_VAR 0 1
42842: PUSH
42843: LD_INT 18
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: LIST
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: LIST
42855: PPUSH
42856: CALL_OW 69
42860: NOT
42861: PUSH
42862: LD_INT 22
42864: PUSH
42865: LD_VAR 0 16
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 2
42876: PUSH
42877: LD_INT 30
42879: PUSH
42880: LD_INT 32
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 30
42889: PUSH
42890: LD_INT 33
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 91
42904: PUSH
42905: LD_VAR 0 1
42909: PUSH
42910: LD_INT 12
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: LIST
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: LIST
42922: PUSH
42923: EMPTY
42924: LIST
42925: PPUSH
42926: CALL_OW 69
42930: PUSH
42931: LD_INT 2
42933: GREATER
42934: AND
42935: IFFALSE 42958
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42937: LD_ADDR_VAR 0 18
42941: PUSH
42942: LD_INT 11
42944: PUSH
42945: LD_INT 30
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_VAR 0 12
42956: ARRAY
42957: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42958: LD_VAR 0 18
42962: NOT
42963: PUSH
42964: LD_INT 40
42966: PPUSH
42967: LD_VAR 0 16
42971: PPUSH
42972: CALL_OW 321
42976: PUSH
42977: LD_INT 2
42979: EQUAL
42980: AND
42981: PUSH
42982: LD_INT 7
42984: PUSH
42985: LD_VAR 0 5
42989: IN
42990: PUSH
42991: LD_INT 28
42993: PUSH
42994: LD_VAR 0 5
42998: IN
42999: OR
43000: PUSH
43001: LD_INT 45
43003: PUSH
43004: LD_VAR 0 5
43008: IN
43009: OR
43010: AND
43011: IFFALSE 43265
// begin hex := GetHexInfo ( x , y ) ;
43013: LD_ADDR_VAR 0 4
43017: PUSH
43018: LD_VAR 0 10
43022: PPUSH
43023: LD_VAR 0 11
43027: PPUSH
43028: CALL_OW 546
43032: ST_TO_ADDR
// if hex [ 1 ] then
43033: LD_VAR 0 4
43037: PUSH
43038: LD_INT 1
43040: ARRAY
43041: IFFALSE 43045
// exit ;
43043: GO 43448
// height := hex [ 2 ] ;
43045: LD_ADDR_VAR 0 15
43049: PUSH
43050: LD_VAR 0 4
43054: PUSH
43055: LD_INT 2
43057: ARRAY
43058: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43059: LD_ADDR_VAR 0 14
43063: PUSH
43064: LD_INT 0
43066: PUSH
43067: LD_INT 2
43069: PUSH
43070: LD_INT 3
43072: PUSH
43073: LD_INT 5
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: ST_TO_ADDR
// for i in tmp do
43082: LD_ADDR_VAR 0 8
43086: PUSH
43087: LD_VAR 0 14
43091: PUSH
43092: FOR_IN
43093: IFFALSE 43263
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43095: LD_ADDR_VAR 0 9
43099: PUSH
43100: LD_VAR 0 10
43104: PPUSH
43105: LD_VAR 0 8
43109: PPUSH
43110: LD_INT 5
43112: PPUSH
43113: CALL_OW 272
43117: PUSH
43118: LD_VAR 0 11
43122: PPUSH
43123: LD_VAR 0 8
43127: PPUSH
43128: LD_INT 5
43130: PPUSH
43131: CALL_OW 273
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43140: LD_VAR 0 9
43144: PUSH
43145: LD_INT 1
43147: ARRAY
43148: PPUSH
43149: LD_VAR 0 9
43153: PUSH
43154: LD_INT 2
43156: ARRAY
43157: PPUSH
43158: CALL_OW 488
43162: IFFALSE 43261
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43164: LD_ADDR_VAR 0 4
43168: PUSH
43169: LD_VAR 0 9
43173: PUSH
43174: LD_INT 1
43176: ARRAY
43177: PPUSH
43178: LD_VAR 0 9
43182: PUSH
43183: LD_INT 2
43185: ARRAY
43186: PPUSH
43187: CALL_OW 546
43191: ST_TO_ADDR
// if hex [ 1 ] then
43192: LD_VAR 0 4
43196: PUSH
43197: LD_INT 1
43199: ARRAY
43200: IFFALSE 43204
// continue ;
43202: GO 43092
// h := hex [ 2 ] ;
43204: LD_ADDR_VAR 0 13
43208: PUSH
43209: LD_VAR 0 4
43213: PUSH
43214: LD_INT 2
43216: ARRAY
43217: ST_TO_ADDR
// if h + 7 < height then
43218: LD_VAR 0 13
43222: PUSH
43223: LD_INT 7
43225: PLUS
43226: PUSH
43227: LD_VAR 0 15
43231: LESS
43232: IFFALSE 43261
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43234: LD_ADDR_VAR 0 18
43238: PUSH
43239: LD_INT 7
43241: PUSH
43242: LD_INT 28
43244: PUSH
43245: LD_INT 45
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: LIST
43252: PUSH
43253: LD_VAR 0 12
43257: ARRAY
43258: ST_TO_ADDR
// break ;
43259: GO 43263
// end ; end ; end ;
43261: GO 43092
43263: POP
43264: POP
// end ; if not weapon then
43265: LD_VAR 0 18
43269: NOT
43270: IFFALSE 43330
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43272: LD_ADDR_VAR 0 5
43276: PUSH
43277: LD_VAR 0 5
43281: PUSH
43282: LD_INT 11
43284: PUSH
43285: LD_INT 30
43287: PUSH
43288: LD_INT 49
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: LIST
43295: DIFF
43296: ST_TO_ADDR
// if not list then
43297: LD_VAR 0 5
43301: NOT
43302: IFFALSE 43306
// exit ;
43304: GO 43448
// weapon := list [ rand ( 1 , list ) ] ;
43306: LD_ADDR_VAR 0 18
43310: PUSH
43311: LD_VAR 0 5
43315: PUSH
43316: LD_INT 1
43318: PPUSH
43319: LD_VAR 0 5
43323: PPUSH
43324: CALL_OW 12
43328: ARRAY
43329: ST_TO_ADDR
// end ; if weapon then
43330: LD_VAR 0 18
43334: IFFALSE 43448
// begin tmp := CostOfWeapon ( weapon ) ;
43336: LD_ADDR_VAR 0 14
43340: PUSH
43341: LD_VAR 0 18
43345: PPUSH
43346: CALL_OW 451
43350: ST_TO_ADDR
// j := GetBase ( tower ) ;
43351: LD_ADDR_VAR 0 9
43355: PUSH
43356: LD_VAR 0 1
43360: PPUSH
43361: CALL_OW 274
43365: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43366: LD_VAR 0 9
43370: PPUSH
43371: LD_INT 1
43373: PPUSH
43374: CALL_OW 275
43378: PUSH
43379: LD_VAR 0 14
43383: PUSH
43384: LD_INT 1
43386: ARRAY
43387: GREATEREQUAL
43388: PUSH
43389: LD_VAR 0 9
43393: PPUSH
43394: LD_INT 2
43396: PPUSH
43397: CALL_OW 275
43401: PUSH
43402: LD_VAR 0 14
43406: PUSH
43407: LD_INT 2
43409: ARRAY
43410: GREATEREQUAL
43411: AND
43412: PUSH
43413: LD_VAR 0 9
43417: PPUSH
43418: LD_INT 3
43420: PPUSH
43421: CALL_OW 275
43425: PUSH
43426: LD_VAR 0 14
43430: PUSH
43431: LD_INT 3
43433: ARRAY
43434: GREATEREQUAL
43435: AND
43436: IFFALSE 43448
// result := weapon ;
43438: LD_ADDR_VAR 0 3
43442: PUSH
43443: LD_VAR 0 18
43447: ST_TO_ADDR
// end ; end ;
43448: LD_VAR 0 3
43452: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43453: LD_INT 0
43455: PPUSH
43456: PPUSH
// result := true ;
43457: LD_ADDR_VAR 0 3
43461: PUSH
43462: LD_INT 1
43464: ST_TO_ADDR
// if array1 = array2 then
43465: LD_VAR 0 1
43469: PUSH
43470: LD_VAR 0 2
43474: EQUAL
43475: IFFALSE 43535
// begin for i = 1 to array1 do
43477: LD_ADDR_VAR 0 4
43481: PUSH
43482: DOUBLE
43483: LD_INT 1
43485: DEC
43486: ST_TO_ADDR
43487: LD_VAR 0 1
43491: PUSH
43492: FOR_TO
43493: IFFALSE 43531
// if array1 [ i ] <> array2 [ i ] then
43495: LD_VAR 0 1
43499: PUSH
43500: LD_VAR 0 4
43504: ARRAY
43505: PUSH
43506: LD_VAR 0 2
43510: PUSH
43511: LD_VAR 0 4
43515: ARRAY
43516: NONEQUAL
43517: IFFALSE 43529
// begin result := false ;
43519: LD_ADDR_VAR 0 3
43523: PUSH
43524: LD_INT 0
43526: ST_TO_ADDR
// break ;
43527: GO 43531
// end ;
43529: GO 43492
43531: POP
43532: POP
// end else
43533: GO 43543
// result := false ;
43535: LD_ADDR_VAR 0 3
43539: PUSH
43540: LD_INT 0
43542: ST_TO_ADDR
// end ;
43543: LD_VAR 0 3
43547: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43548: LD_INT 0
43550: PPUSH
43551: PPUSH
// if not array1 or not array2 then
43552: LD_VAR 0 1
43556: NOT
43557: PUSH
43558: LD_VAR 0 2
43562: NOT
43563: OR
43564: IFFALSE 43568
// exit ;
43566: GO 43632
// result := true ;
43568: LD_ADDR_VAR 0 3
43572: PUSH
43573: LD_INT 1
43575: ST_TO_ADDR
// for i = 1 to array1 do
43576: LD_ADDR_VAR 0 4
43580: PUSH
43581: DOUBLE
43582: LD_INT 1
43584: DEC
43585: ST_TO_ADDR
43586: LD_VAR 0 1
43590: PUSH
43591: FOR_TO
43592: IFFALSE 43630
// if array1 [ i ] <> array2 [ i ] then
43594: LD_VAR 0 1
43598: PUSH
43599: LD_VAR 0 4
43603: ARRAY
43604: PUSH
43605: LD_VAR 0 2
43609: PUSH
43610: LD_VAR 0 4
43614: ARRAY
43615: NONEQUAL
43616: IFFALSE 43628
// begin result := false ;
43618: LD_ADDR_VAR 0 3
43622: PUSH
43623: LD_INT 0
43625: ST_TO_ADDR
// break ;
43626: GO 43630
// end ;
43628: GO 43591
43630: POP
43631: POP
// end ;
43632: LD_VAR 0 3
43636: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43637: LD_INT 0
43639: PPUSH
43640: PPUSH
43641: PPUSH
// pom := GetBase ( fac ) ;
43642: LD_ADDR_VAR 0 5
43646: PUSH
43647: LD_VAR 0 1
43651: PPUSH
43652: CALL_OW 274
43656: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43657: LD_ADDR_VAR 0 4
43661: PUSH
43662: LD_VAR 0 2
43666: PUSH
43667: LD_INT 1
43669: ARRAY
43670: PPUSH
43671: LD_VAR 0 2
43675: PUSH
43676: LD_INT 2
43678: ARRAY
43679: PPUSH
43680: LD_VAR 0 2
43684: PUSH
43685: LD_INT 3
43687: ARRAY
43688: PPUSH
43689: LD_VAR 0 2
43693: PUSH
43694: LD_INT 4
43696: ARRAY
43697: PPUSH
43698: CALL_OW 449
43702: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43703: LD_ADDR_VAR 0 3
43707: PUSH
43708: LD_VAR 0 5
43712: PPUSH
43713: LD_INT 1
43715: PPUSH
43716: CALL_OW 275
43720: PUSH
43721: LD_VAR 0 4
43725: PUSH
43726: LD_INT 1
43728: ARRAY
43729: GREATEREQUAL
43730: PUSH
43731: LD_VAR 0 5
43735: PPUSH
43736: LD_INT 2
43738: PPUSH
43739: CALL_OW 275
43743: PUSH
43744: LD_VAR 0 4
43748: PUSH
43749: LD_INT 2
43751: ARRAY
43752: GREATEREQUAL
43753: AND
43754: PUSH
43755: LD_VAR 0 5
43759: PPUSH
43760: LD_INT 3
43762: PPUSH
43763: CALL_OW 275
43767: PUSH
43768: LD_VAR 0 4
43772: PUSH
43773: LD_INT 3
43775: ARRAY
43776: GREATEREQUAL
43777: AND
43778: ST_TO_ADDR
// end ;
43779: LD_VAR 0 3
43783: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43784: LD_INT 0
43786: PPUSH
43787: PPUSH
43788: PPUSH
43789: PPUSH
// pom := GetBase ( building ) ;
43790: LD_ADDR_VAR 0 3
43794: PUSH
43795: LD_VAR 0 1
43799: PPUSH
43800: CALL_OW 274
43804: ST_TO_ADDR
// if not pom then
43805: LD_VAR 0 3
43809: NOT
43810: IFFALSE 43814
// exit ;
43812: GO 43984
// btype := GetBType ( building ) ;
43814: LD_ADDR_VAR 0 5
43818: PUSH
43819: LD_VAR 0 1
43823: PPUSH
43824: CALL_OW 266
43828: ST_TO_ADDR
// if btype = b_armoury then
43829: LD_VAR 0 5
43833: PUSH
43834: LD_INT 4
43836: EQUAL
43837: IFFALSE 43847
// btype := b_barracks ;
43839: LD_ADDR_VAR 0 5
43843: PUSH
43844: LD_INT 5
43846: ST_TO_ADDR
// if btype = b_depot then
43847: LD_VAR 0 5
43851: PUSH
43852: LD_INT 0
43854: EQUAL
43855: IFFALSE 43865
// btype := b_warehouse ;
43857: LD_ADDR_VAR 0 5
43861: PUSH
43862: LD_INT 1
43864: ST_TO_ADDR
// if btype = b_workshop then
43865: LD_VAR 0 5
43869: PUSH
43870: LD_INT 2
43872: EQUAL
43873: IFFALSE 43883
// btype := b_factory ;
43875: LD_ADDR_VAR 0 5
43879: PUSH
43880: LD_INT 3
43882: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43883: LD_ADDR_VAR 0 4
43887: PUSH
43888: LD_VAR 0 5
43892: PPUSH
43893: LD_VAR 0 1
43897: PPUSH
43898: CALL_OW 248
43902: PPUSH
43903: CALL_OW 450
43907: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43908: LD_ADDR_VAR 0 2
43912: PUSH
43913: LD_VAR 0 3
43917: PPUSH
43918: LD_INT 1
43920: PPUSH
43921: CALL_OW 275
43925: PUSH
43926: LD_VAR 0 4
43930: PUSH
43931: LD_INT 1
43933: ARRAY
43934: GREATEREQUAL
43935: PUSH
43936: LD_VAR 0 3
43940: PPUSH
43941: LD_INT 2
43943: PPUSH
43944: CALL_OW 275
43948: PUSH
43949: LD_VAR 0 4
43953: PUSH
43954: LD_INT 2
43956: ARRAY
43957: GREATEREQUAL
43958: AND
43959: PUSH
43960: LD_VAR 0 3
43964: PPUSH
43965: LD_INT 3
43967: PPUSH
43968: CALL_OW 275
43972: PUSH
43973: LD_VAR 0 4
43977: PUSH
43978: LD_INT 3
43980: ARRAY
43981: GREATEREQUAL
43982: AND
43983: ST_TO_ADDR
// end ;
43984: LD_VAR 0 2
43988: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43989: LD_INT 0
43991: PPUSH
43992: PPUSH
43993: PPUSH
// pom := GetBase ( building ) ;
43994: LD_ADDR_VAR 0 4
43998: PUSH
43999: LD_VAR 0 1
44003: PPUSH
44004: CALL_OW 274
44008: ST_TO_ADDR
// if not pom then
44009: LD_VAR 0 4
44013: NOT
44014: IFFALSE 44018
// exit ;
44016: GO 44119
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44018: LD_ADDR_VAR 0 5
44022: PUSH
44023: LD_VAR 0 2
44027: PPUSH
44028: LD_VAR 0 1
44032: PPUSH
44033: CALL_OW 248
44037: PPUSH
44038: CALL_OW 450
44042: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44043: LD_ADDR_VAR 0 3
44047: PUSH
44048: LD_VAR 0 4
44052: PPUSH
44053: LD_INT 1
44055: PPUSH
44056: CALL_OW 275
44060: PUSH
44061: LD_VAR 0 5
44065: PUSH
44066: LD_INT 1
44068: ARRAY
44069: GREATEREQUAL
44070: PUSH
44071: LD_VAR 0 4
44075: PPUSH
44076: LD_INT 2
44078: PPUSH
44079: CALL_OW 275
44083: PUSH
44084: LD_VAR 0 5
44088: PUSH
44089: LD_INT 2
44091: ARRAY
44092: GREATEREQUAL
44093: AND
44094: PUSH
44095: LD_VAR 0 4
44099: PPUSH
44100: LD_INT 3
44102: PPUSH
44103: CALL_OW 275
44107: PUSH
44108: LD_VAR 0 5
44112: PUSH
44113: LD_INT 3
44115: ARRAY
44116: GREATEREQUAL
44117: AND
44118: ST_TO_ADDR
// end ;
44119: LD_VAR 0 3
44123: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44124: LD_INT 0
44126: PPUSH
44127: PPUSH
44128: PPUSH
44129: PPUSH
44130: PPUSH
44131: PPUSH
44132: PPUSH
44133: PPUSH
44134: PPUSH
44135: PPUSH
44136: PPUSH
// result := false ;
44137: LD_ADDR_VAR 0 8
44141: PUSH
44142: LD_INT 0
44144: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44145: LD_VAR 0 5
44149: NOT
44150: PUSH
44151: LD_VAR 0 1
44155: NOT
44156: OR
44157: PUSH
44158: LD_VAR 0 2
44162: NOT
44163: OR
44164: PUSH
44165: LD_VAR 0 3
44169: NOT
44170: OR
44171: IFFALSE 44175
// exit ;
44173: GO 44989
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44175: LD_ADDR_VAR 0 14
44179: PUSH
44180: LD_VAR 0 1
44184: PPUSH
44185: LD_VAR 0 2
44189: PPUSH
44190: LD_VAR 0 3
44194: PPUSH
44195: LD_VAR 0 4
44199: PPUSH
44200: LD_VAR 0 5
44204: PUSH
44205: LD_INT 1
44207: ARRAY
44208: PPUSH
44209: CALL_OW 248
44213: PPUSH
44214: LD_INT 0
44216: PPUSH
44217: CALL 46226 0 6
44221: ST_TO_ADDR
// if not hexes then
44222: LD_VAR 0 14
44226: NOT
44227: IFFALSE 44231
// exit ;
44229: GO 44989
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44231: LD_ADDR_VAR 0 17
44235: PUSH
44236: LD_VAR 0 5
44240: PPUSH
44241: LD_INT 22
44243: PUSH
44244: LD_VAR 0 13
44248: PPUSH
44249: CALL_OW 255
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 2
44260: PUSH
44261: LD_INT 30
44263: PUSH
44264: LD_INT 0
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 30
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: LIST
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PPUSH
44290: CALL_OW 72
44294: ST_TO_ADDR
// for i = 1 to hexes do
44295: LD_ADDR_VAR 0 9
44299: PUSH
44300: DOUBLE
44301: LD_INT 1
44303: DEC
44304: ST_TO_ADDR
44305: LD_VAR 0 14
44309: PUSH
44310: FOR_TO
44311: IFFALSE 44987
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44313: LD_ADDR_VAR 0 13
44317: PUSH
44318: LD_VAR 0 14
44322: PUSH
44323: LD_VAR 0 9
44327: ARRAY
44328: PUSH
44329: LD_INT 1
44331: ARRAY
44332: PPUSH
44333: LD_VAR 0 14
44337: PUSH
44338: LD_VAR 0 9
44342: ARRAY
44343: PUSH
44344: LD_INT 2
44346: ARRAY
44347: PPUSH
44348: CALL_OW 428
44352: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44353: LD_VAR 0 14
44357: PUSH
44358: LD_VAR 0 9
44362: ARRAY
44363: PUSH
44364: LD_INT 1
44366: ARRAY
44367: PPUSH
44368: LD_VAR 0 14
44372: PUSH
44373: LD_VAR 0 9
44377: ARRAY
44378: PUSH
44379: LD_INT 2
44381: ARRAY
44382: PPUSH
44383: CALL_OW 351
44387: PUSH
44388: LD_VAR 0 14
44392: PUSH
44393: LD_VAR 0 9
44397: ARRAY
44398: PUSH
44399: LD_INT 1
44401: ARRAY
44402: PPUSH
44403: LD_VAR 0 14
44407: PUSH
44408: LD_VAR 0 9
44412: ARRAY
44413: PUSH
44414: LD_INT 2
44416: ARRAY
44417: PPUSH
44418: CALL_OW 488
44422: NOT
44423: OR
44424: PUSH
44425: LD_VAR 0 13
44429: PPUSH
44430: CALL_OW 247
44434: PUSH
44435: LD_INT 3
44437: EQUAL
44438: OR
44439: IFFALSE 44445
// exit ;
44441: POP
44442: POP
44443: GO 44989
// if not tmp then
44445: LD_VAR 0 13
44449: NOT
44450: IFFALSE 44454
// continue ;
44452: GO 44310
// result := true ;
44454: LD_ADDR_VAR 0 8
44458: PUSH
44459: LD_INT 1
44461: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44462: LD_VAR 0 6
44466: PUSH
44467: LD_VAR 0 13
44471: PPUSH
44472: CALL_OW 247
44476: PUSH
44477: LD_INT 2
44479: EQUAL
44480: AND
44481: PUSH
44482: LD_VAR 0 13
44486: PPUSH
44487: CALL_OW 263
44491: PUSH
44492: LD_INT 1
44494: EQUAL
44495: AND
44496: IFFALSE 44660
// begin if IsDrivenBy ( tmp ) then
44498: LD_VAR 0 13
44502: PPUSH
44503: CALL_OW 311
44507: IFFALSE 44511
// continue ;
44509: GO 44310
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44511: LD_VAR 0 6
44515: PPUSH
44516: LD_INT 3
44518: PUSH
44519: LD_INT 60
44521: PUSH
44522: EMPTY
44523: LIST
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 3
44531: PUSH
44532: LD_INT 55
44534: PUSH
44535: EMPTY
44536: LIST
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PPUSH
44546: CALL_OW 72
44550: IFFALSE 44658
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44552: LD_ADDR_VAR 0 18
44556: PUSH
44557: LD_VAR 0 6
44561: PPUSH
44562: LD_INT 3
44564: PUSH
44565: LD_INT 60
44567: PUSH
44568: EMPTY
44569: LIST
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 3
44577: PUSH
44578: LD_INT 55
44580: PUSH
44581: EMPTY
44582: LIST
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PPUSH
44592: CALL_OW 72
44596: PUSH
44597: LD_INT 1
44599: ARRAY
44600: ST_TO_ADDR
// if IsInUnit ( driver ) then
44601: LD_VAR 0 18
44605: PPUSH
44606: CALL_OW 310
44610: IFFALSE 44621
// ComExit ( driver ) ;
44612: LD_VAR 0 18
44616: PPUSH
44617: CALL 69410 0 1
// AddComEnterUnit ( driver , tmp ) ;
44621: LD_VAR 0 18
44625: PPUSH
44626: LD_VAR 0 13
44630: PPUSH
44631: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44635: LD_VAR 0 18
44639: PPUSH
44640: LD_VAR 0 7
44644: PPUSH
44645: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44649: LD_VAR 0 18
44653: PPUSH
44654: CALL_OW 181
// end ; continue ;
44658: GO 44310
// end ; if not cleaners or not tmp in cleaners then
44660: LD_VAR 0 6
44664: NOT
44665: PUSH
44666: LD_VAR 0 13
44670: PUSH
44671: LD_VAR 0 6
44675: IN
44676: NOT
44677: OR
44678: IFFALSE 44985
// begin if dep then
44680: LD_VAR 0 17
44684: IFFALSE 44820
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44686: LD_ADDR_VAR 0 16
44690: PUSH
44691: LD_VAR 0 17
44695: PUSH
44696: LD_INT 1
44698: ARRAY
44699: PPUSH
44700: CALL_OW 250
44704: PPUSH
44705: LD_VAR 0 17
44709: PUSH
44710: LD_INT 1
44712: ARRAY
44713: PPUSH
44714: CALL_OW 254
44718: PPUSH
44719: LD_INT 5
44721: PPUSH
44722: CALL_OW 272
44726: PUSH
44727: LD_VAR 0 17
44731: PUSH
44732: LD_INT 1
44734: ARRAY
44735: PPUSH
44736: CALL_OW 251
44740: PPUSH
44741: LD_VAR 0 17
44745: PUSH
44746: LD_INT 1
44748: ARRAY
44749: PPUSH
44750: CALL_OW 254
44754: PPUSH
44755: LD_INT 5
44757: PPUSH
44758: CALL_OW 273
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44767: LD_VAR 0 16
44771: PUSH
44772: LD_INT 1
44774: ARRAY
44775: PPUSH
44776: LD_VAR 0 16
44780: PUSH
44781: LD_INT 2
44783: ARRAY
44784: PPUSH
44785: CALL_OW 488
44789: IFFALSE 44820
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44791: LD_VAR 0 13
44795: PPUSH
44796: LD_VAR 0 16
44800: PUSH
44801: LD_INT 1
44803: ARRAY
44804: PPUSH
44805: LD_VAR 0 16
44809: PUSH
44810: LD_INT 2
44812: ARRAY
44813: PPUSH
44814: CALL_OW 111
// continue ;
44818: GO 44310
// end ; end ; r := GetDir ( tmp ) ;
44820: LD_ADDR_VAR 0 15
44824: PUSH
44825: LD_VAR 0 13
44829: PPUSH
44830: CALL_OW 254
44834: ST_TO_ADDR
// if r = 5 then
44835: LD_VAR 0 15
44839: PUSH
44840: LD_INT 5
44842: EQUAL
44843: IFFALSE 44853
// r := 0 ;
44845: LD_ADDR_VAR 0 15
44849: PUSH
44850: LD_INT 0
44852: ST_TO_ADDR
// for j = r to 5 do
44853: LD_ADDR_VAR 0 10
44857: PUSH
44858: DOUBLE
44859: LD_VAR 0 15
44863: DEC
44864: ST_TO_ADDR
44865: LD_INT 5
44867: PUSH
44868: FOR_TO
44869: IFFALSE 44983
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44871: LD_ADDR_VAR 0 11
44875: PUSH
44876: LD_VAR 0 13
44880: PPUSH
44881: CALL_OW 250
44885: PPUSH
44886: LD_VAR 0 10
44890: PPUSH
44891: LD_INT 2
44893: PPUSH
44894: CALL_OW 272
44898: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44899: LD_ADDR_VAR 0 12
44903: PUSH
44904: LD_VAR 0 13
44908: PPUSH
44909: CALL_OW 251
44913: PPUSH
44914: LD_VAR 0 10
44918: PPUSH
44919: LD_INT 2
44921: PPUSH
44922: CALL_OW 273
44926: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44927: LD_VAR 0 11
44931: PPUSH
44932: LD_VAR 0 12
44936: PPUSH
44937: CALL_OW 488
44941: PUSH
44942: LD_VAR 0 11
44946: PPUSH
44947: LD_VAR 0 12
44951: PPUSH
44952: CALL_OW 428
44956: NOT
44957: AND
44958: IFFALSE 44981
// begin ComMoveXY ( tmp , _x , _y ) ;
44960: LD_VAR 0 13
44964: PPUSH
44965: LD_VAR 0 11
44969: PPUSH
44970: LD_VAR 0 12
44974: PPUSH
44975: CALL_OW 111
// break ;
44979: GO 44983
// end ; end ;
44981: GO 44868
44983: POP
44984: POP
// end ; end ;
44985: GO 44310
44987: POP
44988: POP
// end ;
44989: LD_VAR 0 8
44993: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44994: LD_INT 0
44996: PPUSH
// result := true ;
44997: LD_ADDR_VAR 0 3
45001: PUSH
45002: LD_INT 1
45004: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45005: LD_VAR 0 2
45009: PUSH
45010: LD_INT 24
45012: DOUBLE
45013: EQUAL
45014: IFTRUE 45024
45016: LD_INT 33
45018: DOUBLE
45019: EQUAL
45020: IFTRUE 45024
45022: GO 45049
45024: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45025: LD_ADDR_VAR 0 3
45029: PUSH
45030: LD_INT 32
45032: PPUSH
45033: LD_VAR 0 1
45037: PPUSH
45038: CALL_OW 321
45042: PUSH
45043: LD_INT 2
45045: EQUAL
45046: ST_TO_ADDR
45047: GO 45369
45049: LD_INT 20
45051: DOUBLE
45052: EQUAL
45053: IFTRUE 45057
45055: GO 45082
45057: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45058: LD_ADDR_VAR 0 3
45062: PUSH
45063: LD_INT 6
45065: PPUSH
45066: LD_VAR 0 1
45070: PPUSH
45071: CALL_OW 321
45075: PUSH
45076: LD_INT 2
45078: EQUAL
45079: ST_TO_ADDR
45080: GO 45369
45082: LD_INT 22
45084: DOUBLE
45085: EQUAL
45086: IFTRUE 45096
45088: LD_INT 36
45090: DOUBLE
45091: EQUAL
45092: IFTRUE 45096
45094: GO 45121
45096: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45097: LD_ADDR_VAR 0 3
45101: PUSH
45102: LD_INT 15
45104: PPUSH
45105: LD_VAR 0 1
45109: PPUSH
45110: CALL_OW 321
45114: PUSH
45115: LD_INT 2
45117: EQUAL
45118: ST_TO_ADDR
45119: GO 45369
45121: LD_INT 30
45123: DOUBLE
45124: EQUAL
45125: IFTRUE 45129
45127: GO 45154
45129: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45130: LD_ADDR_VAR 0 3
45134: PUSH
45135: LD_INT 20
45137: PPUSH
45138: LD_VAR 0 1
45142: PPUSH
45143: CALL_OW 321
45147: PUSH
45148: LD_INT 2
45150: EQUAL
45151: ST_TO_ADDR
45152: GO 45369
45154: LD_INT 28
45156: DOUBLE
45157: EQUAL
45158: IFTRUE 45168
45160: LD_INT 21
45162: DOUBLE
45163: EQUAL
45164: IFTRUE 45168
45166: GO 45193
45168: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45169: LD_ADDR_VAR 0 3
45173: PUSH
45174: LD_INT 21
45176: PPUSH
45177: LD_VAR 0 1
45181: PPUSH
45182: CALL_OW 321
45186: PUSH
45187: LD_INT 2
45189: EQUAL
45190: ST_TO_ADDR
45191: GO 45369
45193: LD_INT 16
45195: DOUBLE
45196: EQUAL
45197: IFTRUE 45201
45199: GO 45228
45201: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45202: LD_ADDR_VAR 0 3
45206: PUSH
45207: LD_EXP 56
45211: PPUSH
45212: LD_VAR 0 1
45216: PPUSH
45217: CALL_OW 321
45221: PUSH
45222: LD_INT 2
45224: EQUAL
45225: ST_TO_ADDR
45226: GO 45369
45228: LD_INT 19
45230: DOUBLE
45231: EQUAL
45232: IFTRUE 45242
45234: LD_INT 23
45236: DOUBLE
45237: EQUAL
45238: IFTRUE 45242
45240: GO 45269
45242: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45243: LD_ADDR_VAR 0 3
45247: PUSH
45248: LD_EXP 55
45252: PPUSH
45253: LD_VAR 0 1
45257: PPUSH
45258: CALL_OW 321
45262: PUSH
45263: LD_INT 2
45265: EQUAL
45266: ST_TO_ADDR
45267: GO 45369
45269: LD_INT 17
45271: DOUBLE
45272: EQUAL
45273: IFTRUE 45277
45275: GO 45302
45277: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45278: LD_ADDR_VAR 0 3
45282: PUSH
45283: LD_INT 39
45285: PPUSH
45286: LD_VAR 0 1
45290: PPUSH
45291: CALL_OW 321
45295: PUSH
45296: LD_INT 2
45298: EQUAL
45299: ST_TO_ADDR
45300: GO 45369
45302: LD_INT 18
45304: DOUBLE
45305: EQUAL
45306: IFTRUE 45310
45308: GO 45335
45310: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45311: LD_ADDR_VAR 0 3
45315: PUSH
45316: LD_INT 40
45318: PPUSH
45319: LD_VAR 0 1
45323: PPUSH
45324: CALL_OW 321
45328: PUSH
45329: LD_INT 2
45331: EQUAL
45332: ST_TO_ADDR
45333: GO 45369
45335: LD_INT 27
45337: DOUBLE
45338: EQUAL
45339: IFTRUE 45343
45341: GO 45368
45343: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45344: LD_ADDR_VAR 0 3
45348: PUSH
45349: LD_INT 35
45351: PPUSH
45352: LD_VAR 0 1
45356: PPUSH
45357: CALL_OW 321
45361: PUSH
45362: LD_INT 2
45364: EQUAL
45365: ST_TO_ADDR
45366: GO 45369
45368: POP
// end ;
45369: LD_VAR 0 3
45373: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45374: LD_INT 0
45376: PPUSH
45377: PPUSH
45378: PPUSH
45379: PPUSH
45380: PPUSH
45381: PPUSH
45382: PPUSH
45383: PPUSH
45384: PPUSH
45385: PPUSH
45386: PPUSH
// result := false ;
45387: LD_ADDR_VAR 0 6
45391: PUSH
45392: LD_INT 0
45394: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45395: LD_VAR 0 1
45399: NOT
45400: PUSH
45401: LD_VAR 0 1
45405: PPUSH
45406: CALL_OW 266
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: LD_INT 1
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: IN
45421: NOT
45422: OR
45423: PUSH
45424: LD_VAR 0 2
45428: NOT
45429: OR
45430: PUSH
45431: LD_VAR 0 5
45435: PUSH
45436: LD_INT 0
45438: PUSH
45439: LD_INT 1
45441: PUSH
45442: LD_INT 2
45444: PUSH
45445: LD_INT 3
45447: PUSH
45448: LD_INT 4
45450: PUSH
45451: LD_INT 5
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: IN
45462: NOT
45463: OR
45464: PUSH
45465: LD_VAR 0 3
45469: PPUSH
45470: LD_VAR 0 4
45474: PPUSH
45475: CALL_OW 488
45479: NOT
45480: OR
45481: IFFALSE 45485
// exit ;
45483: GO 46221
// side := GetSide ( depot ) ;
45485: LD_ADDR_VAR 0 9
45489: PUSH
45490: LD_VAR 0 1
45494: PPUSH
45495: CALL_OW 255
45499: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45500: LD_VAR 0 9
45504: PPUSH
45505: LD_VAR 0 2
45509: PPUSH
45510: CALL 44994 0 2
45514: NOT
45515: IFFALSE 45519
// exit ;
45517: GO 46221
// pom := GetBase ( depot ) ;
45519: LD_ADDR_VAR 0 10
45523: PUSH
45524: LD_VAR 0 1
45528: PPUSH
45529: CALL_OW 274
45533: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45534: LD_ADDR_VAR 0 11
45538: PUSH
45539: LD_VAR 0 2
45543: PPUSH
45544: LD_VAR 0 1
45548: PPUSH
45549: CALL_OW 248
45553: PPUSH
45554: CALL_OW 450
45558: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45559: LD_VAR 0 10
45563: PPUSH
45564: LD_INT 1
45566: PPUSH
45567: CALL_OW 275
45571: PUSH
45572: LD_VAR 0 11
45576: PUSH
45577: LD_INT 1
45579: ARRAY
45580: GREATEREQUAL
45581: PUSH
45582: LD_VAR 0 10
45586: PPUSH
45587: LD_INT 2
45589: PPUSH
45590: CALL_OW 275
45594: PUSH
45595: LD_VAR 0 11
45599: PUSH
45600: LD_INT 2
45602: ARRAY
45603: GREATEREQUAL
45604: AND
45605: PUSH
45606: LD_VAR 0 10
45610: PPUSH
45611: LD_INT 3
45613: PPUSH
45614: CALL_OW 275
45618: PUSH
45619: LD_VAR 0 11
45623: PUSH
45624: LD_INT 3
45626: ARRAY
45627: GREATEREQUAL
45628: AND
45629: NOT
45630: IFFALSE 45634
// exit ;
45632: GO 46221
// if GetBType ( depot ) = b_depot then
45634: LD_VAR 0 1
45638: PPUSH
45639: CALL_OW 266
45643: PUSH
45644: LD_INT 0
45646: EQUAL
45647: IFFALSE 45659
// dist := 28 else
45649: LD_ADDR_VAR 0 14
45653: PUSH
45654: LD_INT 28
45656: ST_TO_ADDR
45657: GO 45667
// dist := 36 ;
45659: LD_ADDR_VAR 0 14
45663: PUSH
45664: LD_INT 36
45666: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45667: LD_VAR 0 1
45671: PPUSH
45672: LD_VAR 0 3
45676: PPUSH
45677: LD_VAR 0 4
45681: PPUSH
45682: CALL_OW 297
45686: PUSH
45687: LD_VAR 0 14
45691: GREATER
45692: IFFALSE 45696
// exit ;
45694: GO 46221
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45696: LD_ADDR_VAR 0 12
45700: PUSH
45701: LD_VAR 0 2
45705: PPUSH
45706: LD_VAR 0 3
45710: PPUSH
45711: LD_VAR 0 4
45715: PPUSH
45716: LD_VAR 0 5
45720: PPUSH
45721: LD_VAR 0 1
45725: PPUSH
45726: CALL_OW 248
45730: PPUSH
45731: LD_INT 0
45733: PPUSH
45734: CALL 46226 0 6
45738: ST_TO_ADDR
// if not hexes then
45739: LD_VAR 0 12
45743: NOT
45744: IFFALSE 45748
// exit ;
45746: GO 46221
// hex := GetHexInfo ( x , y ) ;
45748: LD_ADDR_VAR 0 15
45752: PUSH
45753: LD_VAR 0 3
45757: PPUSH
45758: LD_VAR 0 4
45762: PPUSH
45763: CALL_OW 546
45767: ST_TO_ADDR
// if hex [ 1 ] then
45768: LD_VAR 0 15
45772: PUSH
45773: LD_INT 1
45775: ARRAY
45776: IFFALSE 45780
// exit ;
45778: GO 46221
// height := hex [ 2 ] ;
45780: LD_ADDR_VAR 0 13
45784: PUSH
45785: LD_VAR 0 15
45789: PUSH
45790: LD_INT 2
45792: ARRAY
45793: ST_TO_ADDR
// for i = 1 to hexes do
45794: LD_ADDR_VAR 0 7
45798: PUSH
45799: DOUBLE
45800: LD_INT 1
45802: DEC
45803: ST_TO_ADDR
45804: LD_VAR 0 12
45808: PUSH
45809: FOR_TO
45810: IFFALSE 46140
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45812: LD_VAR 0 12
45816: PUSH
45817: LD_VAR 0 7
45821: ARRAY
45822: PUSH
45823: LD_INT 1
45825: ARRAY
45826: PPUSH
45827: LD_VAR 0 12
45831: PUSH
45832: LD_VAR 0 7
45836: ARRAY
45837: PUSH
45838: LD_INT 2
45840: ARRAY
45841: PPUSH
45842: CALL_OW 488
45846: NOT
45847: PUSH
45848: LD_VAR 0 12
45852: PUSH
45853: LD_VAR 0 7
45857: ARRAY
45858: PUSH
45859: LD_INT 1
45861: ARRAY
45862: PPUSH
45863: LD_VAR 0 12
45867: PUSH
45868: LD_VAR 0 7
45872: ARRAY
45873: PUSH
45874: LD_INT 2
45876: ARRAY
45877: PPUSH
45878: CALL_OW 428
45882: PUSH
45883: LD_INT 0
45885: GREATER
45886: OR
45887: PUSH
45888: LD_VAR 0 12
45892: PUSH
45893: LD_VAR 0 7
45897: ARRAY
45898: PUSH
45899: LD_INT 1
45901: ARRAY
45902: PPUSH
45903: LD_VAR 0 12
45907: PUSH
45908: LD_VAR 0 7
45912: ARRAY
45913: PUSH
45914: LD_INT 2
45916: ARRAY
45917: PPUSH
45918: CALL_OW 351
45922: OR
45923: IFFALSE 45929
// exit ;
45925: POP
45926: POP
45927: GO 46221
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45929: LD_ADDR_VAR 0 8
45933: PUSH
45934: LD_VAR 0 12
45938: PUSH
45939: LD_VAR 0 7
45943: ARRAY
45944: PUSH
45945: LD_INT 1
45947: ARRAY
45948: PPUSH
45949: LD_VAR 0 12
45953: PUSH
45954: LD_VAR 0 7
45958: ARRAY
45959: PUSH
45960: LD_INT 2
45962: ARRAY
45963: PPUSH
45964: CALL_OW 546
45968: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45969: LD_VAR 0 8
45973: PUSH
45974: LD_INT 1
45976: ARRAY
45977: PUSH
45978: LD_VAR 0 8
45982: PUSH
45983: LD_INT 2
45985: ARRAY
45986: PUSH
45987: LD_VAR 0 13
45991: PUSH
45992: LD_INT 2
45994: PLUS
45995: GREATER
45996: OR
45997: PUSH
45998: LD_VAR 0 8
46002: PUSH
46003: LD_INT 2
46005: ARRAY
46006: PUSH
46007: LD_VAR 0 13
46011: PUSH
46012: LD_INT 2
46014: MINUS
46015: LESS
46016: OR
46017: PUSH
46018: LD_VAR 0 8
46022: PUSH
46023: LD_INT 3
46025: ARRAY
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: LD_INT 8
46032: PUSH
46033: LD_INT 9
46035: PUSH
46036: LD_INT 10
46038: PUSH
46039: LD_INT 11
46041: PUSH
46042: LD_INT 12
46044: PUSH
46045: LD_INT 13
46047: PUSH
46048: LD_INT 16
46050: PUSH
46051: LD_INT 17
46053: PUSH
46054: LD_INT 18
46056: PUSH
46057: LD_INT 19
46059: PUSH
46060: LD_INT 20
46062: PUSH
46063: LD_INT 21
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: IN
46081: NOT
46082: OR
46083: PUSH
46084: LD_VAR 0 8
46088: PUSH
46089: LD_INT 5
46091: ARRAY
46092: NOT
46093: OR
46094: PUSH
46095: LD_VAR 0 8
46099: PUSH
46100: LD_INT 6
46102: ARRAY
46103: PUSH
46104: LD_INT 1
46106: PUSH
46107: LD_INT 2
46109: PUSH
46110: LD_INT 7
46112: PUSH
46113: LD_INT 9
46115: PUSH
46116: LD_INT 10
46118: PUSH
46119: LD_INT 11
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: IN
46130: NOT
46131: OR
46132: IFFALSE 46138
// exit ;
46134: POP
46135: POP
46136: GO 46221
// end ;
46138: GO 45809
46140: POP
46141: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46142: LD_VAR 0 9
46146: PPUSH
46147: LD_VAR 0 3
46151: PPUSH
46152: LD_VAR 0 4
46156: PPUSH
46157: LD_INT 20
46159: PPUSH
46160: CALL 38167 0 4
46164: PUSH
46165: LD_INT 4
46167: ARRAY
46168: IFFALSE 46172
// exit ;
46170: GO 46221
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46172: LD_VAR 0 2
46176: PUSH
46177: LD_INT 29
46179: PUSH
46180: LD_INT 30
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: IN
46187: PUSH
46188: LD_VAR 0 3
46192: PPUSH
46193: LD_VAR 0 4
46197: PPUSH
46198: LD_VAR 0 9
46202: PPUSH
46203: CALL_OW 440
46207: NOT
46208: AND
46209: IFFALSE 46213
// exit ;
46211: GO 46221
// result := true ;
46213: LD_ADDR_VAR 0 6
46217: PUSH
46218: LD_INT 1
46220: ST_TO_ADDR
// end ;
46221: LD_VAR 0 6
46225: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46226: LD_INT 0
46228: PPUSH
46229: PPUSH
46230: PPUSH
46231: PPUSH
46232: PPUSH
46233: PPUSH
46234: PPUSH
46235: PPUSH
46236: PPUSH
46237: PPUSH
46238: PPUSH
46239: PPUSH
46240: PPUSH
46241: PPUSH
46242: PPUSH
46243: PPUSH
46244: PPUSH
46245: PPUSH
46246: PPUSH
46247: PPUSH
46248: PPUSH
46249: PPUSH
46250: PPUSH
46251: PPUSH
46252: PPUSH
46253: PPUSH
46254: PPUSH
46255: PPUSH
46256: PPUSH
46257: PPUSH
46258: PPUSH
46259: PPUSH
46260: PPUSH
46261: PPUSH
46262: PPUSH
46263: PPUSH
46264: PPUSH
46265: PPUSH
46266: PPUSH
46267: PPUSH
46268: PPUSH
46269: PPUSH
46270: PPUSH
46271: PPUSH
46272: PPUSH
46273: PPUSH
46274: PPUSH
46275: PPUSH
46276: PPUSH
46277: PPUSH
46278: PPUSH
46279: PPUSH
46280: PPUSH
46281: PPUSH
46282: PPUSH
46283: PPUSH
46284: PPUSH
46285: PPUSH
// result = [ ] ;
46286: LD_ADDR_VAR 0 7
46290: PUSH
46291: EMPTY
46292: ST_TO_ADDR
// temp_list = [ ] ;
46293: LD_ADDR_VAR 0 9
46297: PUSH
46298: EMPTY
46299: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46300: LD_VAR 0 4
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: LD_INT 1
46310: PUSH
46311: LD_INT 2
46313: PUSH
46314: LD_INT 3
46316: PUSH
46317: LD_INT 4
46319: PUSH
46320: LD_INT 5
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: IN
46331: NOT
46332: PUSH
46333: LD_VAR 0 1
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: IN
46348: PUSH
46349: LD_VAR 0 5
46353: PUSH
46354: LD_INT 1
46356: PUSH
46357: LD_INT 2
46359: PUSH
46360: LD_INT 3
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: LIST
46367: IN
46368: NOT
46369: AND
46370: OR
46371: IFFALSE 46375
// exit ;
46373: GO 64766
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46375: LD_VAR 0 1
46379: PUSH
46380: LD_INT 6
46382: PUSH
46383: LD_INT 7
46385: PUSH
46386: LD_INT 8
46388: PUSH
46389: LD_INT 13
46391: PUSH
46392: LD_INT 12
46394: PUSH
46395: LD_INT 15
46397: PUSH
46398: LD_INT 11
46400: PUSH
46401: LD_INT 14
46403: PUSH
46404: LD_INT 10
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: IN
46418: IFFALSE 46428
// btype = b_lab ;
46420: LD_ADDR_VAR 0 1
46424: PUSH
46425: LD_INT 6
46427: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46428: LD_VAR 0 6
46432: PUSH
46433: LD_INT 0
46435: PUSH
46436: LD_INT 1
46438: PUSH
46439: LD_INT 2
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: LIST
46446: IN
46447: NOT
46448: PUSH
46449: LD_VAR 0 1
46453: PUSH
46454: LD_INT 0
46456: PUSH
46457: LD_INT 1
46459: PUSH
46460: LD_INT 2
46462: PUSH
46463: LD_INT 3
46465: PUSH
46466: LD_INT 6
46468: PUSH
46469: LD_INT 36
46471: PUSH
46472: LD_INT 4
46474: PUSH
46475: LD_INT 5
46477: PUSH
46478: LD_INT 31
46480: PUSH
46481: LD_INT 32
46483: PUSH
46484: LD_INT 33
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: IN
46500: NOT
46501: PUSH
46502: LD_VAR 0 6
46506: PUSH
46507: LD_INT 1
46509: EQUAL
46510: AND
46511: OR
46512: PUSH
46513: LD_VAR 0 1
46517: PUSH
46518: LD_INT 2
46520: PUSH
46521: LD_INT 3
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: IN
46528: NOT
46529: PUSH
46530: LD_VAR 0 6
46534: PUSH
46535: LD_INT 2
46537: EQUAL
46538: AND
46539: OR
46540: IFFALSE 46550
// mode = 0 ;
46542: LD_ADDR_VAR 0 6
46546: PUSH
46547: LD_INT 0
46549: ST_TO_ADDR
// case mode of 0 :
46550: LD_VAR 0 6
46554: PUSH
46555: LD_INT 0
46557: DOUBLE
46558: EQUAL
46559: IFTRUE 46563
46561: GO 58016
46563: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46564: LD_ADDR_VAR 0 11
46568: PUSH
46569: LD_INT 0
46571: PUSH
46572: LD_INT 0
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 0
46581: PUSH
46582: LD_INT 1
46584: NEG
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 1
46592: PUSH
46593: LD_INT 0
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 1
46602: PUSH
46603: LD_INT 1
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 0
46612: PUSH
46613: LD_INT 1
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: NEG
46623: PUSH
46624: LD_INT 0
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 1
46633: NEG
46634: PUSH
46635: LD_INT 1
46637: NEG
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: LD_INT 2
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 0
46657: PUSH
46658: LD_INT 2
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 1
46668: PUSH
46669: LD_INT 1
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 1
46679: PUSH
46680: LD_INT 2
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 0
46689: PUSH
46690: LD_INT 2
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: NEG
46700: PUSH
46701: LD_INT 1
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: LD_INT 3
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: LD_INT 3
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 1
46730: NEG
46731: PUSH
46732: LD_INT 2
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46757: LD_ADDR_VAR 0 12
46761: PUSH
46762: LD_INT 0
46764: PUSH
46765: LD_INT 0
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: LD_INT 1
46777: NEG
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 1
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 1
46795: PUSH
46796: LD_INT 1
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 0
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 1
46815: NEG
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 1
46826: NEG
46827: PUSH
46828: LD_INT 1
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: LD_INT 1
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 2
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 2
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 1
46869: NEG
46870: PUSH
46871: LD_INT 1
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 2
46880: NEG
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 2
46891: NEG
46892: PUSH
46893: LD_INT 1
46895: NEG
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 2
46903: NEG
46904: PUSH
46905: LD_INT 1
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 3
46914: NEG
46915: PUSH
46916: LD_INT 0
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 3
46925: NEG
46926: PUSH
46927: LD_INT 1
46929: NEG
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46953: LD_ADDR_VAR 0 13
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 0
46970: PUSH
46971: LD_INT 1
46973: NEG
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: LD_INT 0
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: PUSH
46992: LD_INT 1
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 0
47001: PUSH
47002: LD_INT 1
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 1
47011: NEG
47012: PUSH
47013: LD_INT 0
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 1
47022: NEG
47023: PUSH
47024: LD_INT 1
47026: NEG
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 1
47034: NEG
47035: PUSH
47036: LD_INT 2
47038: NEG
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 2
47046: PUSH
47047: LD_INT 1
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 2
47056: PUSH
47057: LD_INT 2
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 1
47066: PUSH
47067: LD_INT 2
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 2
47076: NEG
47077: PUSH
47078: LD_INT 1
47080: NEG
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 2
47088: NEG
47089: PUSH
47090: LD_INT 2
47092: NEG
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 2
47100: NEG
47101: PUSH
47102: LD_INT 3
47104: NEG
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 3
47112: NEG
47113: PUSH
47114: LD_INT 2
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 3
47124: NEG
47125: PUSH
47126: LD_INT 3
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47152: LD_ADDR_VAR 0 14
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: LD_INT 0
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: LD_INT 1
47172: NEG
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 1
47180: PUSH
47181: LD_INT 0
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: LD_INT 1
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 1
47210: NEG
47211: PUSH
47212: LD_INT 0
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 1
47221: NEG
47222: PUSH
47223: LD_INT 1
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: LD_INT 2
47237: NEG
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 0
47245: PUSH
47246: LD_INT 2
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 1
47267: PUSH
47268: LD_INT 2
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 0
47277: PUSH
47278: LD_INT 2
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 1
47287: NEG
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: LD_INT 3
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: LD_INT 3
47313: NEG
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 1
47321: PUSH
47322: LD_INT 2
47324: NEG
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47348: LD_ADDR_VAR 0 15
47352: PUSH
47353: LD_INT 0
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: LD_INT 1
47368: NEG
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: LD_INT 0
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 1
47386: PUSH
47387: LD_INT 1
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: LD_INT 1
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 1
47406: NEG
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: NEG
47418: PUSH
47419: LD_INT 1
47421: NEG
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 1
47429: PUSH
47430: LD_INT 1
47432: NEG
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 2
47440: PUSH
47441: LD_INT 0
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 2
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 1
47460: NEG
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 2
47471: NEG
47472: PUSH
47473: LD_INT 0
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 2
47482: NEG
47483: PUSH
47484: LD_INT 1
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 2
47494: PUSH
47495: LD_INT 1
47497: NEG
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 3
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 3
47515: PUSH
47516: LD_INT 1
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47541: LD_ADDR_VAR 0 16
47545: PUSH
47546: LD_INT 0
47548: PUSH
47549: LD_INT 0
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: LD_INT 1
47561: NEG
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 1
47569: PUSH
47570: LD_INT 0
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: LD_INT 1
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: LD_INT 1
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 1
47599: NEG
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 1
47610: NEG
47611: PUSH
47612: LD_INT 1
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: LD_INT 2
47626: NEG
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 2
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 2
47644: PUSH
47645: LD_INT 2
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 1
47654: PUSH
47655: LD_INT 2
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 2
47664: NEG
47665: PUSH
47666: LD_INT 1
47668: NEG
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 2
47676: NEG
47677: PUSH
47678: LD_INT 2
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 3
47688: PUSH
47689: LD_INT 2
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 3
47698: PUSH
47699: LD_INT 3
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 2
47708: PUSH
47709: LD_INT 3
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47734: LD_ADDR_VAR 0 17
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: LD_INT 0
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: LD_INT 1
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 1
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 1
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 0
47782: PUSH
47783: LD_INT 1
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 1
47792: NEG
47793: PUSH
47794: LD_INT 0
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: NEG
47804: PUSH
47805: LD_INT 1
47807: NEG
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 1
47815: NEG
47816: PUSH
47817: LD_INT 2
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 0
47827: PUSH
47828: LD_INT 2
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: LD_INT 1
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 2
47849: PUSH
47850: LD_INT 0
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 2
47859: PUSH
47860: LD_INT 1
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 2
47869: PUSH
47870: LD_INT 2
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 1
47879: PUSH
47880: LD_INT 2
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 0
47889: PUSH
47890: LD_INT 2
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 1
47899: NEG
47900: PUSH
47901: LD_INT 1
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 2
47910: NEG
47911: PUSH
47912: LD_INT 0
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 2
47921: NEG
47922: PUSH
47923: LD_INT 1
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 2
47933: NEG
47934: PUSH
47935: LD_INT 2
47937: NEG
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47964: LD_ADDR_VAR 0 18
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: LD_INT 0
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: PUSH
48003: LD_INT 1
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 0
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 1
48022: NEG
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 1
48033: NEG
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: NEG
48046: PUSH
48047: LD_INT 2
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 0
48057: PUSH
48058: LD_INT 2
48060: NEG
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 2
48079: PUSH
48080: LD_INT 0
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 2
48089: PUSH
48090: LD_INT 1
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 2
48099: PUSH
48100: LD_INT 2
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 1
48109: PUSH
48110: LD_INT 2
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 0
48119: PUSH
48120: LD_INT 2
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 2
48140: NEG
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 2
48151: NEG
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 2
48163: NEG
48164: PUSH
48165: LD_INT 2
48167: NEG
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48194: LD_ADDR_VAR 0 19
48198: PUSH
48199: LD_INT 0
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 0
48211: PUSH
48212: LD_INT 1
48214: NEG
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 1
48222: PUSH
48223: LD_INT 0
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: LD_INT 1
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 0
48242: PUSH
48243: LD_INT 1
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 1
48252: NEG
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 1
48263: NEG
48264: PUSH
48265: LD_INT 1
48267: NEG
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: LD_INT 2
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 0
48287: PUSH
48288: LD_INT 2
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 1
48298: PUSH
48299: LD_INT 1
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 2
48309: PUSH
48310: LD_INT 0
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 2
48319: PUSH
48320: LD_INT 1
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 2
48329: PUSH
48330: LD_INT 2
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: PUSH
48340: LD_INT 2
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: LD_INT 2
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 1
48359: NEG
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 2
48370: NEG
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 2
48381: NEG
48382: PUSH
48383: LD_INT 1
48385: NEG
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 2
48393: NEG
48394: PUSH
48395: LD_INT 2
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48424: LD_ADDR_VAR 0 20
48428: PUSH
48429: LD_INT 0
48431: PUSH
48432: LD_INT 0
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 0
48441: PUSH
48442: LD_INT 1
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 1
48452: PUSH
48453: LD_INT 0
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 1
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 0
48472: PUSH
48473: LD_INT 1
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 1
48482: NEG
48483: PUSH
48484: LD_INT 0
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 1
48493: NEG
48494: PUSH
48495: LD_INT 1
48497: NEG
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: LD_INT 2
48509: NEG
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: LD_INT 2
48520: NEG
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: LD_INT 1
48531: NEG
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 2
48539: PUSH
48540: LD_INT 0
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 2
48549: PUSH
48550: LD_INT 1
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 2
48559: PUSH
48560: LD_INT 2
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 1
48569: PUSH
48570: LD_INT 2
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 0
48579: PUSH
48580: LD_INT 2
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 1
48589: NEG
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 2
48600: NEG
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 2
48611: NEG
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 2
48623: NEG
48624: PUSH
48625: LD_INT 2
48627: NEG
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48654: LD_ADDR_VAR 0 21
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 0
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 1
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 1
48692: PUSH
48693: LD_INT 1
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: LD_INT 1
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: PUSH
48737: LD_INT 2
48739: NEG
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: LD_INT 2
48750: NEG
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 1
48758: PUSH
48759: LD_INT 1
48761: NEG
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 2
48769: PUSH
48770: LD_INT 0
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 2
48779: PUSH
48780: LD_INT 1
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 2
48789: PUSH
48790: LD_INT 2
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: LD_INT 2
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: LD_INT 2
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: PUSH
48821: LD_INT 1
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 2
48830: NEG
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 2
48841: NEG
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 2
48853: NEG
48854: PUSH
48855: LD_INT 2
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48884: LD_ADDR_VAR 0 22
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: LD_INT 0
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 1
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 1
48922: PUSH
48923: LD_INT 1
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 1
48942: NEG
48943: PUSH
48944: LD_INT 0
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: NEG
48954: PUSH
48955: LD_INT 1
48957: NEG
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: LD_INT 2
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: LD_INT 2
48980: NEG
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 1
48988: PUSH
48989: LD_INT 1
48991: NEG
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 2
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 2
49009: PUSH
49010: LD_INT 1
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 2
49019: PUSH
49020: LD_INT 2
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 1
49029: PUSH
49030: LD_INT 2
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 0
49039: PUSH
49040: LD_INT 2
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 1
49049: NEG
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 2
49060: NEG
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 2
49071: NEG
49072: PUSH
49073: LD_INT 1
49075: NEG
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 2
49083: NEG
49084: PUSH
49085: LD_INT 2
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49114: LD_ADDR_VAR 0 23
49118: PUSH
49119: LD_INT 0
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 1
49142: PUSH
49143: LD_INT 0
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: PUSH
49153: LD_INT 1
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: LD_INT 1
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 1
49183: NEG
49184: PUSH
49185: LD_INT 1
49187: NEG
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: LD_INT 2
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 0
49207: PUSH
49208: LD_INT 2
49210: NEG
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: LD_INT 1
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 2
49229: PUSH
49230: LD_INT 0
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 2
49239: PUSH
49240: LD_INT 1
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 2
49249: PUSH
49250: LD_INT 2
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: LD_INT 2
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: LD_INT 2
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 2
49290: NEG
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 2
49301: NEG
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 2
49313: NEG
49314: PUSH
49315: LD_INT 2
49317: NEG
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 2
49325: NEG
49326: PUSH
49327: LD_INT 3
49329: NEG
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: LD_INT 3
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: PUSH
49350: LD_INT 2
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 2
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49394: LD_ADDR_VAR 0 24
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 0
49411: PUSH
49412: LD_INT 1
49414: NEG
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 1
49432: PUSH
49433: LD_INT 1
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: LD_INT 1
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 1
49452: NEG
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 1
49463: NEG
49464: PUSH
49465: LD_INT 1
49467: NEG
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 1
49475: NEG
49476: PUSH
49477: LD_INT 2
49479: NEG
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: LD_INT 2
49490: NEG
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 1
49498: PUSH
49499: LD_INT 1
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 2
49509: PUSH
49510: LD_INT 0
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 2
49519: PUSH
49520: LD_INT 1
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 2
49529: PUSH
49530: LD_INT 2
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 1
49539: PUSH
49540: LD_INT 2
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 0
49549: PUSH
49550: LD_INT 2
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 1
49559: NEG
49560: PUSH
49561: LD_INT 1
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 2
49570: NEG
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 2
49581: NEG
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 2
49593: NEG
49594: PUSH
49595: LD_INT 2
49597: NEG
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: LD_INT 2
49608: NEG
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 2
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 3
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 3
49637: PUSH
49638: LD_INT 2
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49670: LD_ADDR_VAR 0 25
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: LD_INT 0
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 0
49687: PUSH
49688: LD_INT 1
49690: NEG
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 1
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 1
49708: PUSH
49709: LD_INT 1
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 0
49718: PUSH
49719: LD_INT 1
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 1
49728: NEG
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 1
49739: NEG
49740: PUSH
49741: LD_INT 1
49743: NEG
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: LD_INT 2
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 0
49763: PUSH
49764: LD_INT 2
49766: NEG
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: LD_INT 1
49777: NEG
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 2
49785: PUSH
49786: LD_INT 0
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 2
49795: PUSH
49796: LD_INT 1
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 2
49805: PUSH
49806: LD_INT 2
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 1
49815: PUSH
49816: LD_INT 2
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 0
49825: PUSH
49826: LD_INT 2
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 2
49846: NEG
49847: PUSH
49848: LD_INT 0
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 2
49857: NEG
49858: PUSH
49859: LD_INT 1
49861: NEG
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 2
49869: NEG
49870: PUSH
49871: LD_INT 2
49873: NEG
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 3
49881: PUSH
49882: LD_INT 1
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 3
49891: PUSH
49892: LD_INT 2
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 2
49901: PUSH
49902: LD_INT 3
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: LD_INT 3
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49944: LD_ADDR_VAR 0 26
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 0
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 1
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 1
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: LD_INT 1
50017: NEG
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 1
50025: NEG
50026: PUSH
50027: LD_INT 2
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 0
50037: PUSH
50038: LD_INT 2
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 1
50048: PUSH
50049: LD_INT 1
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 2
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 2
50069: PUSH
50070: LD_INT 1
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 2
50079: PUSH
50080: LD_INT 2
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: LD_INT 2
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: LD_INT 2
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: LD_INT 1
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 2
50120: NEG
50121: PUSH
50122: LD_INT 0
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 2
50131: NEG
50132: PUSH
50133: LD_INT 1
50135: NEG
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 2
50143: NEG
50144: PUSH
50145: LD_INT 2
50147: NEG
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 2
50155: PUSH
50156: LD_INT 3
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 1
50165: PUSH
50166: LD_INT 3
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 1
50175: NEG
50176: PUSH
50177: LD_INT 2
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 2
50186: NEG
50187: PUSH
50188: LD_INT 1
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50220: LD_ADDR_VAR 0 27
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: LD_INT 0
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: LD_INT 1
50240: NEG
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 1
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 0
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 1
50278: NEG
50279: PUSH
50280: LD_INT 0
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: LD_INT 1
50293: NEG
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: LD_INT 2
50305: NEG
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: LD_INT 2
50316: NEG
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: PUSH
50325: LD_INT 1
50327: NEG
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 2
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 2
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 2
50355: PUSH
50356: LD_INT 2
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 1
50365: PUSH
50366: LD_INT 2
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: LD_INT 2
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 2
50396: NEG
50397: PUSH
50398: LD_INT 0
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 2
50407: NEG
50408: PUSH
50409: LD_INT 1
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 2
50419: NEG
50420: PUSH
50421: LD_INT 2
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: LD_INT 2
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 2
50442: NEG
50443: PUSH
50444: LD_INT 1
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 3
50453: NEG
50454: PUSH
50455: LD_INT 1
50457: NEG
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 3
50465: NEG
50466: PUSH
50467: LD_INT 2
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50500: LD_ADDR_VAR 0 28
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 0
50517: PUSH
50518: LD_INT 1
50520: NEG
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: LD_INT 1
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 0
50548: PUSH
50549: LD_INT 1
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 1
50569: NEG
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: LD_INT 2
50585: NEG
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 0
50593: PUSH
50594: LD_INT 2
50596: NEG
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 2
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 2
50625: PUSH
50626: LD_INT 1
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 2
50635: PUSH
50636: LD_INT 2
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: LD_INT 2
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: LD_INT 2
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: LD_INT 1
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 2
50676: NEG
50677: PUSH
50678: LD_INT 0
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 2
50687: NEG
50688: PUSH
50689: LD_INT 1
50691: NEG
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 2
50699: NEG
50700: PUSH
50701: LD_INT 2
50703: NEG
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 2
50711: NEG
50712: PUSH
50713: LD_INT 3
50715: NEG
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 1
50723: NEG
50724: PUSH
50725: LD_INT 3
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 3
50735: NEG
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 3
50747: NEG
50748: PUSH
50749: LD_INT 2
50751: NEG
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50782: LD_ADDR_VAR 0 29
50786: PUSH
50787: LD_INT 0
50789: PUSH
50790: LD_INT 0
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 0
50799: PUSH
50800: LD_INT 1
50802: NEG
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 1
50810: PUSH
50811: LD_INT 0
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: LD_INT 1
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 0
50830: PUSH
50831: LD_INT 1
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 1
50840: NEG
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 1
50863: NEG
50864: PUSH
50865: LD_INT 2
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 0
50875: PUSH
50876: LD_INT 2
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 1
50886: PUSH
50887: LD_INT 1
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 2
50897: PUSH
50898: LD_INT 0
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 2
50907: PUSH
50908: LD_INT 1
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: LD_INT 2
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: LD_INT 2
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 1
50937: NEG
50938: PUSH
50939: LD_INT 1
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 2
50948: NEG
50949: PUSH
50950: LD_INT 1
50952: NEG
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 2
50960: NEG
50961: PUSH
50962: LD_INT 2
50964: NEG
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 2
50972: NEG
50973: PUSH
50974: LD_INT 3
50976: NEG
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 2
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 3
50995: PUSH
50996: LD_INT 1
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: LD_INT 3
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 1
51015: NEG
51016: PUSH
51017: LD_INT 2
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 3
51026: NEG
51027: PUSH
51028: LD_INT 2
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51061: LD_ADDR_VAR 0 30
51065: PUSH
51066: LD_INT 0
51068: PUSH
51069: LD_INT 0
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: LD_INT 1
51081: NEG
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 1
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: LD_INT 1
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: LD_INT 1
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: LD_INT 0
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 1
51130: NEG
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 1
51142: NEG
51143: PUSH
51144: LD_INT 2
51146: NEG
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: LD_INT 2
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: PUSH
51166: LD_INT 1
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 2
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 2
51186: PUSH
51187: LD_INT 1
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 2
51196: PUSH
51197: LD_INT 2
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: LD_INT 2
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 1
51216: NEG
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 2
51227: NEG
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 2
51238: NEG
51239: PUSH
51240: LD_INT 1
51242: NEG
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: NEG
51251: PUSH
51252: LD_INT 3
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: LD_INT 2
51265: NEG
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 3
51273: PUSH
51274: LD_INT 2
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 2
51283: PUSH
51284: LD_INT 3
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 2
51293: NEG
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 3
51304: NEG
51305: PUSH
51306: LD_INT 1
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51339: LD_ADDR_VAR 0 31
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 0
51356: PUSH
51357: LD_INT 1
51359: NEG
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 1
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 1
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: LD_INT 1
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 1
51397: NEG
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 1
51408: NEG
51409: PUSH
51410: LD_INT 1
51412: NEG
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 1
51420: NEG
51421: PUSH
51422: LD_INT 2
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: LD_INT 1
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 2
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 2
51453: PUSH
51454: LD_INT 1
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 2
51463: PUSH
51464: LD_INT 2
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 1
51473: PUSH
51474: LD_INT 2
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 0
51483: PUSH
51484: LD_INT 2
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 1
51493: NEG
51494: PUSH
51495: LD_INT 1
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 2
51504: NEG
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 2
51516: NEG
51517: PUSH
51518: LD_INT 2
51520: NEG
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 2
51528: NEG
51529: PUSH
51530: LD_INT 3
51532: NEG
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 2
51540: PUSH
51541: LD_INT 1
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 3
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 1
51561: PUSH
51562: LD_INT 3
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: LD_INT 2
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 3
51582: NEG
51583: PUSH
51584: LD_INT 2
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51617: LD_ADDR_VAR 0 32
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: LD_INT 1
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 1
51655: PUSH
51656: LD_INT 1
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: LD_INT 1
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 1
51675: NEG
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 1
51686: NEG
51687: PUSH
51688: LD_INT 1
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 1
51698: NEG
51699: PUSH
51700: LD_INT 2
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: LD_INT 2
51713: NEG
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 1
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 2
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 2
51742: PUSH
51743: LD_INT 2
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: PUSH
51753: LD_INT 2
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 1
51772: NEG
51773: PUSH
51774: LD_INT 1
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 2
51783: NEG
51784: PUSH
51785: LD_INT 0
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 2
51794: NEG
51795: PUSH
51796: LD_INT 1
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 1
51806: NEG
51807: PUSH
51808: LD_INT 3
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: LD_INT 2
51821: NEG
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 3
51829: PUSH
51830: LD_INT 2
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 2
51839: PUSH
51840: LD_INT 3
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 2
51849: NEG
51850: PUSH
51851: LD_INT 1
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 3
51860: NEG
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51895: LD_ADDR_VAR 0 33
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: LD_INT 1
51915: NEG
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 1
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 1
51933: PUSH
51934: LD_INT 1
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 0
51943: PUSH
51944: LD_INT 1
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 1
51953: NEG
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: NEG
51965: PUSH
51966: LD_INT 1
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: LD_INT 2
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: PUSH
51989: LD_INT 1
51991: NEG
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 2
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 2
52009: PUSH
52010: LD_INT 1
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: LD_INT 2
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: LD_INT 2
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 2
52050: NEG
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 2
52061: NEG
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 2
52073: NEG
52074: PUSH
52075: LD_INT 2
52077: NEG
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 2
52085: NEG
52086: PUSH
52087: LD_INT 3
52089: NEG
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 2
52097: PUSH
52098: LD_INT 1
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 3
52108: PUSH
52109: LD_INT 1
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: LD_INT 3
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 1
52128: NEG
52129: PUSH
52130: LD_INT 2
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 3
52139: NEG
52140: PUSH
52141: LD_INT 2
52143: NEG
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52174: LD_ADDR_VAR 0 34
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: LD_INT 0
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 0
52191: PUSH
52192: LD_INT 1
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: LD_INT 1
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: NEG
52256: PUSH
52257: LD_INT 2
52259: NEG
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: LD_INT 2
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 1
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 2
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 2
52299: PUSH
52300: LD_INT 2
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 1
52309: PUSH
52310: LD_INT 2
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: LD_INT 1
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 2
52330: NEG
52331: PUSH
52332: LD_INT 0
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 2
52341: NEG
52342: PUSH
52343: LD_INT 1
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 2
52353: NEG
52354: PUSH
52355: LD_INT 2
52357: NEG
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 1
52365: NEG
52366: PUSH
52367: LD_INT 3
52369: NEG
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 1
52377: PUSH
52378: LD_INT 2
52380: NEG
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 3
52388: PUSH
52389: LD_INT 2
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 2
52398: PUSH
52399: LD_INT 3
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 2
52408: NEG
52409: PUSH
52410: LD_INT 1
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 3
52419: NEG
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52454: LD_ADDR_VAR 0 35
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 0
52471: PUSH
52472: LD_INT 1
52474: NEG
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 1
52482: PUSH
52483: LD_INT 0
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: LD_INT 1
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 0
52502: PUSH
52503: LD_INT 1
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: NEG
52513: PUSH
52514: LD_INT 0
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 1
52523: NEG
52524: PUSH
52525: LD_INT 1
52527: NEG
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 2
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 2
52545: NEG
52546: PUSH
52547: LD_INT 1
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52566: LD_ADDR_VAR 0 36
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: LD_INT 0
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 0
52583: PUSH
52584: LD_INT 1
52586: NEG
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: LD_INT 0
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 1
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 0
52614: PUSH
52615: LD_INT 1
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 1
52624: NEG
52625: PUSH
52626: LD_INT 0
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 1
52635: NEG
52636: PUSH
52637: LD_INT 1
52639: NEG
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 1
52647: NEG
52648: PUSH
52649: LD_INT 2
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 1
52659: PUSH
52660: LD_INT 2
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52678: LD_ADDR_VAR 0 37
52682: PUSH
52683: LD_INT 0
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: LD_INT 1
52698: NEG
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 1
52706: PUSH
52707: LD_INT 0
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 1
52716: PUSH
52717: LD_INT 1
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 0
52726: PUSH
52727: LD_INT 1
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 1
52736: NEG
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 1
52747: NEG
52748: PUSH
52749: LD_INT 1
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 1
52759: PUSH
52760: LD_INT 1
52762: NEG
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: LD_INT 1
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52790: LD_ADDR_VAR 0 38
52794: PUSH
52795: LD_INT 0
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: LD_INT 1
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: NEG
52849: PUSH
52850: LD_INT 0
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 1
52859: NEG
52860: PUSH
52861: LD_INT 1
52863: NEG
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 2
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 2
52881: NEG
52882: PUSH
52883: LD_INT 1
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52902: LD_ADDR_VAR 0 39
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: LD_INT 1
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: LD_INT 0
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: NEG
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: LD_INT 2
52987: NEG
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: PUSH
52996: LD_INT 2
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53014: LD_ADDR_VAR 0 40
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 0
53031: PUSH
53032: LD_INT 1
53034: NEG
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 1
53042: PUSH
53043: LD_INT 0
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 1
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 0
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 1
53072: NEG
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 1
53083: NEG
53084: PUSH
53085: LD_INT 1
53087: NEG
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 1
53095: PUSH
53096: LD_INT 1
53098: NEG
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 1
53106: NEG
53107: PUSH
53108: LD_INT 1
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53126: LD_ADDR_VAR 0 41
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 0
53143: PUSH
53144: LD_INT 1
53146: NEG
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: LD_INT 0
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 1
53164: PUSH
53165: LD_INT 1
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: LD_INT 1
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 1
53184: NEG
53185: PUSH
53186: LD_INT 0
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: LD_INT 1
53199: NEG
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 1
53207: NEG
53208: PUSH
53209: LD_INT 2
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: LD_INT 1
53222: NEG
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 2
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 2
53240: PUSH
53241: LD_INT 1
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 2
53250: PUSH
53251: LD_INT 2
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: LD_INT 2
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 1
53270: NEG
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 2
53281: NEG
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 2
53292: NEG
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 2
53304: NEG
53305: PUSH
53306: LD_INT 2
53308: NEG
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 2
53316: NEG
53317: PUSH
53318: LD_INT 3
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 2
53328: PUSH
53329: LD_INT 1
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 3
53339: PUSH
53340: LD_INT 0
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 3
53349: PUSH
53350: LD_INT 1
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 3
53359: PUSH
53360: LD_INT 2
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 3
53369: PUSH
53370: LD_INT 3
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 2
53379: PUSH
53380: LD_INT 3
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 2
53389: NEG
53390: PUSH
53391: LD_INT 1
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 3
53400: NEG
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 3
53411: NEG
53412: PUSH
53413: LD_INT 1
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 3
53423: NEG
53424: PUSH
53425: LD_INT 2
53427: NEG
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 3
53435: NEG
53436: PUSH
53437: LD_INT 3
53439: NEG
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53476: LD_ADDR_VAR 0 42
53480: PUSH
53481: LD_INT 0
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: LD_INT 1
53496: NEG
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 1
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 1
53534: NEG
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: LD_INT 1
53549: NEG
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 1
53557: NEG
53558: PUSH
53559: LD_INT 2
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: LD_INT 2
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 2
53591: PUSH
53592: LD_INT 1
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 2
53601: PUSH
53602: LD_INT 2
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 1
53611: PUSH
53612: LD_INT 2
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: LD_INT 2
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: NEG
53632: PUSH
53633: LD_INT 1
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 2
53642: NEG
53643: PUSH
53644: LD_INT 1
53646: NEG
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 2
53654: NEG
53655: PUSH
53656: LD_INT 2
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 2
53666: NEG
53667: PUSH
53668: LD_INT 3
53670: NEG
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 1
53678: NEG
53679: PUSH
53680: LD_INT 3
53682: NEG
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: LD_INT 3
53693: NEG
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 1
53701: PUSH
53702: LD_INT 2
53704: NEG
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 3
53712: PUSH
53713: LD_INT 2
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 3
53722: PUSH
53723: LD_INT 3
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 2
53732: PUSH
53733: LD_INT 3
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: PUSH
53743: LD_INT 3
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: LD_INT 3
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: NEG
53763: PUSH
53764: LD_INT 2
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 3
53773: NEG
53774: PUSH
53775: LD_INT 2
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 3
53785: NEG
53786: PUSH
53787: LD_INT 3
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53826: LD_ADDR_VAR 0 43
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: LD_INT 0
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: LD_INT 1
53846: NEG
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 1
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 1
53864: PUSH
53865: LD_INT 1
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: LD_INT 1
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 1
53895: NEG
53896: PUSH
53897: LD_INT 1
53899: NEG
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 1
53907: NEG
53908: PUSH
53909: LD_INT 2
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 0
53919: PUSH
53920: LD_INT 2
53922: NEG
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 1
53930: PUSH
53931: LD_INT 1
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 2
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 2
53951: PUSH
53952: LD_INT 1
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 1
53961: PUSH
53962: LD_INT 2
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 0
53971: PUSH
53972: LD_INT 2
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 1
53981: NEG
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 2
53992: NEG
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 2
54003: NEG
54004: PUSH
54005: LD_INT 1
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: NEG
54016: PUSH
54017: LD_INT 3
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: LD_INT 3
54030: NEG
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: LD_INT 2
54041: NEG
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 2
54049: PUSH
54050: LD_INT 1
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 3
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 3
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 1
54080: PUSH
54081: LD_INT 3
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: LD_INT 3
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 1
54100: NEG
54101: PUSH
54102: LD_INT 2
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 2
54111: NEG
54112: PUSH
54113: LD_INT 1
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 3
54122: NEG
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 3
54133: NEG
54134: PUSH
54135: LD_INT 1
54137: NEG
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54174: LD_ADDR_VAR 0 44
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: LD_INT 0
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: LD_INT 1
54194: NEG
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 1
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 1
54212: PUSH
54213: LD_INT 1
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 0
54222: PUSH
54223: LD_INT 1
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 1
54232: NEG
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 1
54255: NEG
54256: PUSH
54257: LD_INT 2
54259: NEG
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: LD_INT 1
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 2
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 2
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 2
54298: PUSH
54299: LD_INT 2
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: PUSH
54309: LD_INT 2
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 2
54329: NEG
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 2
54340: NEG
54341: PUSH
54342: LD_INT 1
54344: NEG
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 2
54352: NEG
54353: PUSH
54354: LD_INT 2
54356: NEG
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 2
54364: NEG
54365: PUSH
54366: LD_INT 3
54368: NEG
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 2
54376: PUSH
54377: LD_INT 1
54379: NEG
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 3
54387: PUSH
54388: LD_INT 0
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 3
54397: PUSH
54398: LD_INT 1
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 3
54407: PUSH
54408: LD_INT 2
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 3
54417: PUSH
54418: LD_INT 3
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 2
54427: PUSH
54428: LD_INT 3
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 2
54437: NEG
54438: PUSH
54439: LD_INT 1
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 3
54448: NEG
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 3
54459: NEG
54460: PUSH
54461: LD_INT 1
54463: NEG
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 3
54471: NEG
54472: PUSH
54473: LD_INT 2
54475: NEG
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 3
54483: NEG
54484: PUSH
54485: LD_INT 3
54487: NEG
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54524: LD_ADDR_VAR 0 45
54528: PUSH
54529: LD_INT 0
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: LD_INT 1
54544: NEG
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: LD_INT 1
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: LD_INT 1
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 1
54582: NEG
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 1
54593: NEG
54594: PUSH
54595: LD_INT 1
54597: NEG
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 1
54605: NEG
54606: PUSH
54607: LD_INT 2
54609: NEG
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: LD_INT 2
54620: NEG
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: LD_INT 1
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 2
54639: PUSH
54640: LD_INT 1
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 2
54649: PUSH
54650: LD_INT 2
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 1
54659: PUSH
54660: LD_INT 2
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: LD_INT 2
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 1
54679: NEG
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 2
54690: NEG
54691: PUSH
54692: LD_INT 1
54694: NEG
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 2
54702: NEG
54703: PUSH
54704: LD_INT 2
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 2
54714: NEG
54715: PUSH
54716: LD_INT 3
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: LD_INT 3
54730: NEG
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: LD_INT 3
54741: NEG
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: LD_INT 2
54752: NEG
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 3
54760: PUSH
54761: LD_INT 2
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 3
54770: PUSH
54771: LD_INT 3
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 2
54780: PUSH
54781: LD_INT 3
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: LD_INT 3
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: LD_INT 3
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 1
54810: NEG
54811: PUSH
54812: LD_INT 2
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 3
54821: NEG
54822: PUSH
54823: LD_INT 2
54825: NEG
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 3
54833: NEG
54834: PUSH
54835: LD_INT 3
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54874: LD_ADDR_VAR 0 46
54878: PUSH
54879: LD_INT 0
54881: PUSH
54882: LD_INT 0
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 1
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 1
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 0
54922: PUSH
54923: LD_INT 1
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 1
54932: NEG
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 1
54943: NEG
54944: PUSH
54945: LD_INT 1
54947: NEG
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 1
54955: NEG
54956: PUSH
54957: LD_INT 2
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: LD_INT 2
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: LD_INT 1
54981: NEG
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 2
54989: PUSH
54990: LD_INT 0
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 2
54999: PUSH
55000: LD_INT 1
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 1
55009: PUSH
55010: LD_INT 2
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: LD_INT 2
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 1
55029: NEG
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 2
55040: NEG
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 2
55051: NEG
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 1
55063: NEG
55064: PUSH
55065: LD_INT 3
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 0
55075: PUSH
55076: LD_INT 3
55078: NEG
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 1
55086: PUSH
55087: LD_INT 2
55089: NEG
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 2
55097: PUSH
55098: LD_INT 1
55100: NEG
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 3
55108: PUSH
55109: LD_INT 0
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 3
55118: PUSH
55119: LD_INT 1
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: LD_INT 3
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: LD_INT 3
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 1
55148: NEG
55149: PUSH
55150: LD_INT 2
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 2
55159: NEG
55160: PUSH
55161: LD_INT 1
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 3
55170: NEG
55171: PUSH
55172: LD_INT 0
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 3
55181: NEG
55182: PUSH
55183: LD_INT 1
55185: NEG
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55222: LD_ADDR_VAR 0 47
55226: PUSH
55227: LD_INT 0
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: LD_INT 1
55242: NEG
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: PUSH
55261: LD_INT 1
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: LD_INT 1
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 1
55280: NEG
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 1
55291: NEG
55292: PUSH
55293: LD_INT 1
55295: NEG
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: LD_INT 2
55307: NEG
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 0
55315: PUSH
55316: LD_INT 2
55318: NEG
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 1
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 2
55337: NEG
55338: PUSH
55339: LD_INT 1
55341: NEG
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 2
55349: NEG
55350: PUSH
55351: LD_INT 2
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55373: LD_ADDR_VAR 0 48
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 1
55431: NEG
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: LD_INT 2
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 0
55466: PUSH
55467: LD_INT 2
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 1
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 2
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 2
55498: PUSH
55499: LD_INT 1
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55520: LD_ADDR_VAR 0 49
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: LD_INT 0
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: LD_INT 1
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: LD_INT 1
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 1
55578: NEG
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: NEG
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: LD_INT 1
55604: NEG
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 2
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 2
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 2
55632: PUSH
55633: LD_INT 2
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 1
55642: PUSH
55643: LD_INT 2
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55664: LD_ADDR_VAR 0 50
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: LD_INT 1
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 1
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 0
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 1
55722: NEG
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: LD_INT 1
55737: NEG
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 2
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 2
55755: PUSH
55756: LD_INT 2
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 1
55765: PUSH
55766: LD_INT 2
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: LD_INT 2
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55808: LD_ADDR_VAR 0 51
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: LD_INT 1
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 1
55836: PUSH
55837: LD_INT 0
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 1
55846: PUSH
55847: LD_INT 1
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: LD_INT 1
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 1
55866: NEG
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 1
55877: NEG
55878: PUSH
55879: LD_INT 1
55881: NEG
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 1
55889: PUSH
55890: LD_INT 2
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: LD_INT 2
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: LD_INT 1
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 2
55920: NEG
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 2
55931: NEG
55932: PUSH
55933: LD_INT 1
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55955: LD_ADDR_VAR 0 52
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 1
55983: PUSH
55984: LD_INT 0
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 1
55993: PUSH
55994: LD_INT 1
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: LD_INT 1
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 1
56024: NEG
56025: PUSH
56026: LD_INT 1
56028: NEG
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 1
56036: NEG
56037: PUSH
56038: LD_INT 2
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 1
56048: NEG
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 2
56059: NEG
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 2
56070: NEG
56071: PUSH
56072: LD_INT 1
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 2
56082: NEG
56083: PUSH
56084: LD_INT 2
56086: NEG
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56106: LD_ADDR_VAR 0 53
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: LD_INT 0
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: LD_INT 1
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 1
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: LD_INT 1
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 1
56164: NEG
56165: PUSH
56166: LD_INT 0
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 1
56175: NEG
56176: PUSH
56177: LD_INT 1
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: PUSH
56189: LD_INT 2
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: LD_INT 2
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: PUSH
56211: LD_INT 1
56213: NEG
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 2
56221: PUSH
56222: LD_INT 0
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 2
56231: PUSH
56232: LD_INT 1
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 2
56241: PUSH
56242: LD_INT 2
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: LD_INT 2
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: LD_INT 2
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 1
56271: NEG
56272: PUSH
56273: LD_INT 1
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 2
56282: NEG
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 2
56293: NEG
56294: PUSH
56295: LD_INT 1
56297: NEG
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 2
56305: NEG
56306: PUSH
56307: LD_INT 2
56309: NEG
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56336: LD_ADDR_VAR 0 54
56340: PUSH
56341: LD_INT 0
56343: PUSH
56344: LD_INT 0
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 0
56353: PUSH
56354: LD_INT 1
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: PUSH
56375: LD_INT 1
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 0
56384: PUSH
56385: LD_INT 1
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 1
56394: NEG
56395: PUSH
56396: LD_INT 0
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 1
56405: NEG
56406: PUSH
56407: LD_INT 1
56409: NEG
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 1
56417: NEG
56418: PUSH
56419: LD_INT 2
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: LD_INT 2
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 1
56440: PUSH
56441: LD_INT 1
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 2
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 2
56461: PUSH
56462: LD_INT 1
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 2
56471: PUSH
56472: LD_INT 2
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 1
56481: PUSH
56482: LD_INT 2
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 0
56491: PUSH
56492: LD_INT 2
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 1
56501: NEG
56502: PUSH
56503: LD_INT 1
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 2
56512: NEG
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 2
56523: NEG
56524: PUSH
56525: LD_INT 1
56527: NEG
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 2
56535: NEG
56536: PUSH
56537: LD_INT 2
56539: NEG
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56566: LD_ADDR_VAR 0 55
56570: PUSH
56571: LD_INT 0
56573: PUSH
56574: LD_INT 0
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 0
56583: PUSH
56584: LD_INT 1
56586: NEG
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 1
56594: PUSH
56595: LD_INT 0
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 1
56604: PUSH
56605: LD_INT 1
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: LD_INT 1
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 1
56624: NEG
56625: PUSH
56626: LD_INT 0
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 1
56635: NEG
56636: PUSH
56637: LD_INT 1
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 1
56647: NEG
56648: PUSH
56649: LD_INT 2
56651: NEG
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 0
56659: PUSH
56660: LD_INT 2
56662: NEG
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 1
56670: PUSH
56671: LD_INT 1
56673: NEG
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 2
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 2
56691: PUSH
56692: LD_INT 1
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 2
56701: PUSH
56702: LD_INT 2
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 1
56711: PUSH
56712: LD_INT 2
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 0
56721: PUSH
56722: LD_INT 2
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 1
56731: NEG
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 2
56742: NEG
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 2
56753: NEG
56754: PUSH
56755: LD_INT 1
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 2
56765: NEG
56766: PUSH
56767: LD_INT 2
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56796: LD_ADDR_VAR 0 56
56800: PUSH
56801: LD_INT 0
56803: PUSH
56804: LD_INT 0
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 0
56813: PUSH
56814: LD_INT 1
56816: NEG
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 1
56824: PUSH
56825: LD_INT 0
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 1
56834: PUSH
56835: LD_INT 1
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 0
56844: PUSH
56845: LD_INT 1
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 1
56854: NEG
56855: PUSH
56856: LD_INT 0
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 1
56865: NEG
56866: PUSH
56867: LD_INT 1
56869: NEG
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 1
56877: NEG
56878: PUSH
56879: LD_INT 2
56881: NEG
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 0
56889: PUSH
56890: LD_INT 2
56892: NEG
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 1
56900: PUSH
56901: LD_INT 1
56903: NEG
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 2
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 2
56921: PUSH
56922: LD_INT 1
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 2
56931: PUSH
56932: LD_INT 2
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 1
56941: PUSH
56942: LD_INT 2
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 0
56951: PUSH
56952: LD_INT 2
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 1
56961: NEG
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 2
56972: NEG
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 2
56983: NEG
56984: PUSH
56985: LD_INT 1
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 2
56995: NEG
56996: PUSH
56997: LD_INT 2
56999: NEG
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57026: LD_ADDR_VAR 0 57
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: LD_INT 1
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 1
57054: PUSH
57055: LD_INT 0
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 1
57064: PUSH
57065: LD_INT 1
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 0
57074: PUSH
57075: LD_INT 1
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 1
57084: NEG
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 1
57095: NEG
57096: PUSH
57097: LD_INT 1
57099: NEG
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 1
57107: NEG
57108: PUSH
57109: LD_INT 2
57111: NEG
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: LD_INT 2
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 1
57130: PUSH
57131: LD_INT 1
57133: NEG
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 2
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 2
57151: PUSH
57152: LD_INT 1
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 2
57161: PUSH
57162: LD_INT 2
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: LD_INT 2
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: LD_INT 2
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 1
57191: NEG
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 2
57202: NEG
57203: PUSH
57204: LD_INT 0
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 2
57213: NEG
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 2
57225: NEG
57226: PUSH
57227: LD_INT 2
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57256: LD_ADDR_VAR 0 58
57260: PUSH
57261: LD_INT 0
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 0
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: PUSH
57285: LD_INT 0
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 1
57294: PUSH
57295: LD_INT 1
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 0
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 1
57314: NEG
57315: PUSH
57316: LD_INT 0
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 1
57325: NEG
57326: PUSH
57327: LD_INT 1
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 1
57337: NEG
57338: PUSH
57339: LD_INT 2
57341: NEG
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 0
57349: PUSH
57350: LD_INT 2
57352: NEG
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 1
57360: PUSH
57361: LD_INT 1
57363: NEG
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 2
57371: PUSH
57372: LD_INT 0
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 2
57381: PUSH
57382: LD_INT 1
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 2
57391: PUSH
57392: LD_INT 2
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 1
57401: PUSH
57402: LD_INT 2
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 0
57411: PUSH
57412: LD_INT 2
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 1
57421: NEG
57422: PUSH
57423: LD_INT 1
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 2
57432: NEG
57433: PUSH
57434: LD_INT 0
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 2
57443: NEG
57444: PUSH
57445: LD_INT 1
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 2
57455: NEG
57456: PUSH
57457: LD_INT 2
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57486: LD_ADDR_VAR 0 59
57490: PUSH
57491: LD_INT 0
57493: PUSH
57494: LD_INT 0
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 0
57503: PUSH
57504: LD_INT 1
57506: NEG
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 1
57514: PUSH
57515: LD_INT 0
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 1
57524: PUSH
57525: LD_INT 1
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 0
57534: PUSH
57535: LD_INT 1
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 1
57544: NEG
57545: PUSH
57546: LD_INT 0
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 1
57555: NEG
57556: PUSH
57557: LD_INT 1
57559: NEG
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57574: LD_ADDR_VAR 0 60
57578: PUSH
57579: LD_INT 0
57581: PUSH
57582: LD_INT 0
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: LD_INT 1
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 1
57602: PUSH
57603: LD_INT 0
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 1
57612: PUSH
57613: LD_INT 1
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 0
57622: PUSH
57623: LD_INT 1
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 1
57632: NEG
57633: PUSH
57634: LD_INT 0
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 1
57643: NEG
57644: PUSH
57645: LD_INT 1
57647: NEG
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57662: LD_ADDR_VAR 0 61
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: LD_INT 0
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 0
57679: PUSH
57680: LD_INT 1
57682: NEG
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 1
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 0
57710: PUSH
57711: LD_INT 1
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 1
57720: NEG
57721: PUSH
57722: LD_INT 0
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 1
57731: NEG
57732: PUSH
57733: LD_INT 1
57735: NEG
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57750: LD_ADDR_VAR 0 62
57754: PUSH
57755: LD_INT 0
57757: PUSH
57758: LD_INT 0
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: LD_INT 1
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 1
57778: PUSH
57779: LD_INT 0
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 1
57788: PUSH
57789: LD_INT 1
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 0
57798: PUSH
57799: LD_INT 1
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 1
57808: NEG
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 1
57819: NEG
57820: PUSH
57821: LD_INT 1
57823: NEG
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57838: LD_ADDR_VAR 0 63
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: LD_INT 0
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 0
57855: PUSH
57856: LD_INT 1
57858: NEG
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 1
57866: PUSH
57867: LD_INT 0
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 1
57876: PUSH
57877: LD_INT 1
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 0
57886: PUSH
57887: LD_INT 1
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 1
57896: NEG
57897: PUSH
57898: LD_INT 0
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 1
57907: NEG
57908: PUSH
57909: LD_INT 1
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57926: LD_ADDR_VAR 0 64
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: LD_INT 0
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: LD_INT 1
57946: NEG
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 1
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: LD_INT 1
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 0
57974: PUSH
57975: LD_INT 1
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 1
57984: NEG
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 1
57995: NEG
57996: PUSH
57997: LD_INT 1
57999: NEG
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: ST_TO_ADDR
// end ; 1 :
58014: GO 63911
58016: LD_INT 1
58018: DOUBLE
58019: EQUAL
58020: IFTRUE 58024
58022: GO 60647
58024: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58025: LD_ADDR_VAR 0 11
58029: PUSH
58030: LD_INT 1
58032: NEG
58033: PUSH
58034: LD_INT 3
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 0
58044: PUSH
58045: LD_INT 3
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 1
58055: PUSH
58056: LD_INT 2
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: LIST
58068: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58069: LD_ADDR_VAR 0 12
58073: PUSH
58074: LD_INT 2
58076: PUSH
58077: LD_INT 1
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 3
58087: PUSH
58088: LD_INT 0
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 3
58097: PUSH
58098: LD_INT 1
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: LIST
58109: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58110: LD_ADDR_VAR 0 13
58114: PUSH
58115: LD_INT 3
58117: PUSH
58118: LD_INT 2
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 3
58127: PUSH
58128: LD_INT 3
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 2
58137: PUSH
58138: LD_INT 3
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: LIST
58149: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58150: LD_ADDR_VAR 0 14
58154: PUSH
58155: LD_INT 1
58157: PUSH
58158: LD_INT 3
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 0
58167: PUSH
58168: LD_INT 3
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 1
58177: NEG
58178: PUSH
58179: LD_INT 2
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: LIST
58190: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58191: LD_ADDR_VAR 0 15
58195: PUSH
58196: LD_INT 2
58198: NEG
58199: PUSH
58200: LD_INT 1
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 3
58209: NEG
58210: PUSH
58211: LD_INT 0
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 3
58220: NEG
58221: PUSH
58222: LD_INT 1
58224: NEG
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: LIST
58234: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58235: LD_ADDR_VAR 0 16
58239: PUSH
58240: LD_INT 2
58242: NEG
58243: PUSH
58244: LD_INT 3
58246: NEG
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 3
58254: NEG
58255: PUSH
58256: LD_INT 2
58258: NEG
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 3
58266: NEG
58267: PUSH
58268: LD_INT 3
58270: NEG
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: LIST
58280: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58281: LD_ADDR_VAR 0 17
58285: PUSH
58286: LD_INT 1
58288: NEG
58289: PUSH
58290: LD_INT 3
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 0
58300: PUSH
58301: LD_INT 3
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 1
58311: PUSH
58312: LD_INT 2
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: LIST
58324: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58325: LD_ADDR_VAR 0 18
58329: PUSH
58330: LD_INT 2
58332: PUSH
58333: LD_INT 1
58335: NEG
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 3
58343: PUSH
58344: LD_INT 0
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 3
58353: PUSH
58354: LD_INT 1
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: LIST
58365: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58366: LD_ADDR_VAR 0 19
58370: PUSH
58371: LD_INT 3
58373: PUSH
58374: LD_INT 2
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 3
58383: PUSH
58384: LD_INT 3
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 2
58393: PUSH
58394: LD_INT 3
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: LIST
58405: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58406: LD_ADDR_VAR 0 20
58410: PUSH
58411: LD_INT 1
58413: PUSH
58414: LD_INT 3
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: LD_INT 3
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 1
58433: NEG
58434: PUSH
58435: LD_INT 2
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: LIST
58446: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58447: LD_ADDR_VAR 0 21
58451: PUSH
58452: LD_INT 2
58454: NEG
58455: PUSH
58456: LD_INT 1
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 3
58465: NEG
58466: PUSH
58467: LD_INT 0
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 3
58476: NEG
58477: PUSH
58478: LD_INT 1
58480: NEG
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: LIST
58490: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58491: LD_ADDR_VAR 0 22
58495: PUSH
58496: LD_INT 2
58498: NEG
58499: PUSH
58500: LD_INT 3
58502: NEG
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 3
58510: NEG
58511: PUSH
58512: LD_INT 2
58514: NEG
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 3
58522: NEG
58523: PUSH
58524: LD_INT 3
58526: NEG
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: LIST
58536: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58537: LD_ADDR_VAR 0 23
58541: PUSH
58542: LD_INT 0
58544: PUSH
58545: LD_INT 3
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 1
58555: NEG
58556: PUSH
58557: LD_INT 4
58559: NEG
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 1
58567: PUSH
58568: LD_INT 3
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: LIST
58580: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58581: LD_ADDR_VAR 0 24
58585: PUSH
58586: LD_INT 3
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 3
58598: PUSH
58599: LD_INT 1
58601: NEG
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 4
58609: PUSH
58610: LD_INT 1
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: LIST
58621: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58622: LD_ADDR_VAR 0 25
58626: PUSH
58627: LD_INT 3
58629: PUSH
58630: LD_INT 3
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 4
58639: PUSH
58640: LD_INT 3
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 3
58649: PUSH
58650: LD_INT 4
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: LIST
58661: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58662: LD_ADDR_VAR 0 26
58666: PUSH
58667: LD_INT 0
58669: PUSH
58670: LD_INT 3
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 1
58679: PUSH
58680: LD_INT 4
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 1
58689: NEG
58690: PUSH
58691: LD_INT 3
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: LIST
58702: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58703: LD_ADDR_VAR 0 27
58707: PUSH
58708: LD_INT 3
58710: NEG
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 3
58721: NEG
58722: PUSH
58723: LD_INT 1
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 4
58732: NEG
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: LIST
58746: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58747: LD_ADDR_VAR 0 28
58751: PUSH
58752: LD_INT 3
58754: NEG
58755: PUSH
58756: LD_INT 3
58758: NEG
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 3
58766: NEG
58767: PUSH
58768: LD_INT 4
58770: NEG
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 4
58778: NEG
58779: PUSH
58780: LD_INT 3
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: LIST
58792: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58793: LD_ADDR_VAR 0 29
58797: PUSH
58798: LD_INT 1
58800: NEG
58801: PUSH
58802: LD_INT 3
58804: NEG
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 0
58812: PUSH
58813: LD_INT 3
58815: NEG
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 1
58823: PUSH
58824: LD_INT 2
58826: NEG
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 1
58834: NEG
58835: PUSH
58836: LD_INT 4
58838: NEG
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 0
58846: PUSH
58847: LD_INT 4
58849: NEG
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 1
58857: PUSH
58858: LD_INT 3
58860: NEG
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 1
58868: NEG
58869: PUSH
58870: LD_INT 5
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 0
58880: PUSH
58881: LD_INT 5
58883: NEG
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 1
58891: PUSH
58892: LD_INT 4
58894: NEG
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 1
58902: NEG
58903: PUSH
58904: LD_INT 6
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: LD_INT 6
58917: NEG
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 1
58925: PUSH
58926: LD_INT 5
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58948: LD_ADDR_VAR 0 30
58952: PUSH
58953: LD_INT 2
58955: PUSH
58956: LD_INT 1
58958: NEG
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 3
58966: PUSH
58967: LD_INT 0
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 3
58976: PUSH
58977: LD_INT 1
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 3
58986: PUSH
58987: LD_INT 1
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 4
58997: PUSH
58998: LD_INT 0
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 4
59007: PUSH
59008: LD_INT 1
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 4
59017: PUSH
59018: LD_INT 1
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 5
59028: PUSH
59029: LD_INT 0
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 5
59038: PUSH
59039: LD_INT 1
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 5
59048: PUSH
59049: LD_INT 1
59051: NEG
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 6
59059: PUSH
59060: LD_INT 0
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 6
59069: PUSH
59070: LD_INT 1
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59091: LD_ADDR_VAR 0 31
59095: PUSH
59096: LD_INT 3
59098: PUSH
59099: LD_INT 2
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 3
59108: PUSH
59109: LD_INT 3
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 2
59118: PUSH
59119: LD_INT 3
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 4
59128: PUSH
59129: LD_INT 3
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 4
59138: PUSH
59139: LD_INT 4
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 3
59148: PUSH
59149: LD_INT 4
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 5
59158: PUSH
59159: LD_INT 4
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 5
59168: PUSH
59169: LD_INT 5
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 4
59178: PUSH
59179: LD_INT 5
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 6
59188: PUSH
59189: LD_INT 5
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 6
59198: PUSH
59199: LD_INT 6
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 5
59208: PUSH
59209: LD_INT 6
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59230: LD_ADDR_VAR 0 32
59234: PUSH
59235: LD_INT 1
59237: PUSH
59238: LD_INT 3
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 0
59247: PUSH
59248: LD_INT 3
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 1
59257: NEG
59258: PUSH
59259: LD_INT 2
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 1
59268: PUSH
59269: LD_INT 4
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 0
59278: PUSH
59279: LD_INT 4
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 1
59288: NEG
59289: PUSH
59290: LD_INT 3
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 1
59299: PUSH
59300: LD_INT 5
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: LD_INT 5
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 1
59319: NEG
59320: PUSH
59321: LD_INT 4
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 1
59330: PUSH
59331: LD_INT 6
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 0
59340: PUSH
59341: LD_INT 6
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 1
59350: NEG
59351: PUSH
59352: LD_INT 5
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59373: LD_ADDR_VAR 0 33
59377: PUSH
59378: LD_INT 2
59380: NEG
59381: PUSH
59382: LD_INT 1
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 3
59391: NEG
59392: PUSH
59393: LD_INT 0
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 3
59402: NEG
59403: PUSH
59404: LD_INT 1
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 3
59414: NEG
59415: PUSH
59416: LD_INT 1
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 4
59425: NEG
59426: PUSH
59427: LD_INT 0
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 4
59436: NEG
59437: PUSH
59438: LD_INT 1
59440: NEG
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 4
59448: NEG
59449: PUSH
59450: LD_INT 1
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 5
59459: NEG
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 5
59470: NEG
59471: PUSH
59472: LD_INT 1
59474: NEG
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 5
59482: NEG
59483: PUSH
59484: LD_INT 1
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 6
59493: NEG
59494: PUSH
59495: LD_INT 0
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 6
59504: NEG
59505: PUSH
59506: LD_INT 1
59508: NEG
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59528: LD_ADDR_VAR 0 34
59532: PUSH
59533: LD_INT 2
59535: NEG
59536: PUSH
59537: LD_INT 3
59539: NEG
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 3
59547: NEG
59548: PUSH
59549: LD_INT 2
59551: NEG
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 3
59559: NEG
59560: PUSH
59561: LD_INT 3
59563: NEG
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 3
59571: NEG
59572: PUSH
59573: LD_INT 4
59575: NEG
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 4
59583: NEG
59584: PUSH
59585: LD_INT 3
59587: NEG
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 4
59595: NEG
59596: PUSH
59597: LD_INT 4
59599: NEG
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 4
59607: NEG
59608: PUSH
59609: LD_INT 5
59611: NEG
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 5
59619: NEG
59620: PUSH
59621: LD_INT 4
59623: NEG
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 5
59631: NEG
59632: PUSH
59633: LD_INT 5
59635: NEG
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 5
59643: NEG
59644: PUSH
59645: LD_INT 6
59647: NEG
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 6
59655: NEG
59656: PUSH
59657: LD_INT 5
59659: NEG
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 6
59667: NEG
59668: PUSH
59669: LD_INT 6
59671: NEG
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59691: LD_ADDR_VAR 0 41
59695: PUSH
59696: LD_INT 0
59698: PUSH
59699: LD_INT 2
59701: NEG
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 1
59709: NEG
59710: PUSH
59711: LD_INT 3
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 1
59721: PUSH
59722: LD_INT 2
59724: NEG
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: LIST
59734: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59735: LD_ADDR_VAR 0 42
59739: PUSH
59740: LD_INT 2
59742: PUSH
59743: LD_INT 0
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 2
59752: PUSH
59753: LD_INT 1
59755: NEG
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 3
59763: PUSH
59764: LD_INT 1
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: LIST
59775: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59776: LD_ADDR_VAR 0 43
59780: PUSH
59781: LD_INT 2
59783: PUSH
59784: LD_INT 2
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 3
59793: PUSH
59794: LD_INT 2
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 2
59803: PUSH
59804: LD_INT 3
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: LIST
59815: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59816: LD_ADDR_VAR 0 44
59820: PUSH
59821: LD_INT 0
59823: PUSH
59824: LD_INT 2
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 1
59833: PUSH
59834: LD_INT 3
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 1
59843: NEG
59844: PUSH
59845: LD_INT 2
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: LIST
59856: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59857: LD_ADDR_VAR 0 45
59861: PUSH
59862: LD_INT 2
59864: NEG
59865: PUSH
59866: LD_INT 0
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 2
59875: NEG
59876: PUSH
59877: LD_INT 1
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 3
59886: NEG
59887: PUSH
59888: LD_INT 1
59890: NEG
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: LIST
59900: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59901: LD_ADDR_VAR 0 46
59905: PUSH
59906: LD_INT 2
59908: NEG
59909: PUSH
59910: LD_INT 2
59912: NEG
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 2
59920: NEG
59921: PUSH
59922: LD_INT 3
59924: NEG
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 3
59932: NEG
59933: PUSH
59934: LD_INT 2
59936: NEG
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: LIST
59946: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59947: LD_ADDR_VAR 0 47
59951: PUSH
59952: LD_INT 2
59954: NEG
59955: PUSH
59956: LD_INT 3
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 1
59966: NEG
59967: PUSH
59968: LD_INT 3
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59980: LD_ADDR_VAR 0 48
59984: PUSH
59985: LD_INT 1
59987: PUSH
59988: LD_INT 2
59990: NEG
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 2
59998: PUSH
59999: LD_INT 1
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60011: LD_ADDR_VAR 0 49
60015: PUSH
60016: LD_INT 3
60018: PUSH
60019: LD_INT 1
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 3
60028: PUSH
60029: LD_INT 2
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60040: LD_ADDR_VAR 0 50
60044: PUSH
60045: LD_INT 2
60047: PUSH
60048: LD_INT 3
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 1
60057: PUSH
60058: LD_INT 3
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60069: LD_ADDR_VAR 0 51
60073: PUSH
60074: LD_INT 1
60076: NEG
60077: PUSH
60078: LD_INT 2
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 2
60087: NEG
60088: PUSH
60089: LD_INT 1
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60100: LD_ADDR_VAR 0 52
60104: PUSH
60105: LD_INT 3
60107: NEG
60108: PUSH
60109: LD_INT 1
60111: NEG
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 3
60119: NEG
60120: PUSH
60121: LD_INT 2
60123: NEG
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60133: LD_ADDR_VAR 0 53
60137: PUSH
60138: LD_INT 1
60140: NEG
60141: PUSH
60142: LD_INT 3
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 0
60152: PUSH
60153: LD_INT 3
60155: NEG
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 1
60163: PUSH
60164: LD_INT 2
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: LIST
60176: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60177: LD_ADDR_VAR 0 54
60181: PUSH
60182: LD_INT 2
60184: PUSH
60185: LD_INT 1
60187: NEG
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 3
60195: PUSH
60196: LD_INT 0
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 3
60205: PUSH
60206: LD_INT 1
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: LIST
60217: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60218: LD_ADDR_VAR 0 55
60222: PUSH
60223: LD_INT 3
60225: PUSH
60226: LD_INT 2
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 3
60235: PUSH
60236: LD_INT 3
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 2
60245: PUSH
60246: LD_INT 3
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: LIST
60257: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60258: LD_ADDR_VAR 0 56
60262: PUSH
60263: LD_INT 1
60265: PUSH
60266: LD_INT 3
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 0
60275: PUSH
60276: LD_INT 3
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 1
60285: NEG
60286: PUSH
60287: LD_INT 2
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: LIST
60298: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60299: LD_ADDR_VAR 0 57
60303: PUSH
60304: LD_INT 2
60306: NEG
60307: PUSH
60308: LD_INT 1
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 3
60317: NEG
60318: PUSH
60319: LD_INT 0
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 3
60328: NEG
60329: PUSH
60330: LD_INT 1
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: LIST
60342: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60343: LD_ADDR_VAR 0 58
60347: PUSH
60348: LD_INT 2
60350: NEG
60351: PUSH
60352: LD_INT 3
60354: NEG
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 3
60362: NEG
60363: PUSH
60364: LD_INT 2
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 3
60374: NEG
60375: PUSH
60376: LD_INT 3
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: LIST
60388: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60389: LD_ADDR_VAR 0 59
60393: PUSH
60394: LD_INT 1
60396: NEG
60397: PUSH
60398: LD_INT 2
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 0
60408: PUSH
60409: LD_INT 2
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 1
60419: PUSH
60420: LD_INT 1
60422: NEG
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: LIST
60432: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60433: LD_ADDR_VAR 0 60
60437: PUSH
60438: LD_INT 1
60440: PUSH
60441: LD_INT 1
60443: NEG
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 2
60451: PUSH
60452: LD_INT 0
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 2
60461: PUSH
60462: LD_INT 1
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: LIST
60473: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60474: LD_ADDR_VAR 0 61
60478: PUSH
60479: LD_INT 2
60481: PUSH
60482: LD_INT 1
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 2
60491: PUSH
60492: LD_INT 2
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 1
60501: PUSH
60502: LD_INT 2
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: LIST
60513: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60514: LD_ADDR_VAR 0 62
60518: PUSH
60519: LD_INT 1
60521: PUSH
60522: LD_INT 2
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: LD_INT 2
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 1
60541: NEG
60542: PUSH
60543: LD_INT 1
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: LIST
60554: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60555: LD_ADDR_VAR 0 63
60559: PUSH
60560: LD_INT 1
60562: NEG
60563: PUSH
60564: LD_INT 1
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 2
60573: NEG
60574: PUSH
60575: LD_INT 0
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 2
60584: NEG
60585: PUSH
60586: LD_INT 1
60588: NEG
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: LIST
60598: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60599: LD_ADDR_VAR 0 64
60603: PUSH
60604: LD_INT 1
60606: NEG
60607: PUSH
60608: LD_INT 2
60610: NEG
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 2
60618: NEG
60619: PUSH
60620: LD_INT 1
60622: NEG
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 2
60630: NEG
60631: PUSH
60632: LD_INT 2
60634: NEG
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: LIST
60644: ST_TO_ADDR
// end ; 2 :
60645: GO 63911
60647: LD_INT 2
60649: DOUBLE
60650: EQUAL
60651: IFTRUE 60655
60653: GO 63910
60655: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60656: LD_ADDR_VAR 0 29
60660: PUSH
60661: LD_INT 4
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 4
60673: PUSH
60674: LD_INT 1
60676: NEG
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 5
60684: PUSH
60685: LD_INT 0
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 5
60694: PUSH
60695: LD_INT 1
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 4
60704: PUSH
60705: LD_INT 1
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 3
60714: PUSH
60715: LD_INT 0
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 3
60724: PUSH
60725: LD_INT 1
60727: NEG
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 3
60735: PUSH
60736: LD_INT 2
60738: NEG
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 5
60746: PUSH
60747: LD_INT 2
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 3
60756: PUSH
60757: LD_INT 3
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 3
60766: PUSH
60767: LD_INT 2
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 4
60776: PUSH
60777: LD_INT 3
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 4
60786: PUSH
60787: LD_INT 4
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 3
60796: PUSH
60797: LD_INT 4
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 2
60806: PUSH
60807: LD_INT 3
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 2
60816: PUSH
60817: LD_INT 2
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 4
60826: PUSH
60827: LD_INT 2
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 2
60836: PUSH
60837: LD_INT 4
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 0
60846: PUSH
60847: LD_INT 4
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 0
60856: PUSH
60857: LD_INT 3
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: LD_INT 4
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 1
60876: PUSH
60877: LD_INT 5
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 0
60886: PUSH
60887: LD_INT 5
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 1
60896: NEG
60897: PUSH
60898: LD_INT 4
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 1
60907: NEG
60908: PUSH
60909: LD_INT 3
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 2
60918: PUSH
60919: LD_INT 5
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 2
60928: NEG
60929: PUSH
60930: LD_INT 3
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 3
60939: NEG
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 3
60950: NEG
60951: PUSH
60952: LD_INT 1
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 2
60962: NEG
60963: PUSH
60964: LD_INT 0
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 2
60973: NEG
60974: PUSH
60975: LD_INT 1
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 3
60984: NEG
60985: PUSH
60986: LD_INT 1
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 4
60995: NEG
60996: PUSH
60997: LD_INT 0
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 4
61006: NEG
61007: PUSH
61008: LD_INT 1
61010: NEG
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 4
61018: NEG
61019: PUSH
61020: LD_INT 2
61022: NEG
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 2
61030: NEG
61031: PUSH
61032: LD_INT 2
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 4
61041: NEG
61042: PUSH
61043: LD_INT 4
61045: NEG
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 4
61053: NEG
61054: PUSH
61055: LD_INT 5
61057: NEG
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 3
61065: NEG
61066: PUSH
61067: LD_INT 4
61069: NEG
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 3
61077: NEG
61078: PUSH
61079: LD_INT 3
61081: NEG
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 4
61089: NEG
61090: PUSH
61091: LD_INT 3
61093: NEG
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 5
61101: NEG
61102: PUSH
61103: LD_INT 4
61105: NEG
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 5
61113: NEG
61114: PUSH
61115: LD_INT 5
61117: NEG
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 3
61125: NEG
61126: PUSH
61127: LD_INT 5
61129: NEG
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 5
61137: NEG
61138: PUSH
61139: LD_INT 3
61141: NEG
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61194: LD_ADDR_VAR 0 30
61198: PUSH
61199: LD_INT 4
61201: PUSH
61202: LD_INT 4
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 4
61211: PUSH
61212: LD_INT 3
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 5
61221: PUSH
61222: LD_INT 4
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 5
61231: PUSH
61232: LD_INT 5
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 4
61241: PUSH
61242: LD_INT 5
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 3
61251: PUSH
61252: LD_INT 4
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 3
61261: PUSH
61262: LD_INT 3
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 5
61271: PUSH
61272: LD_INT 3
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 3
61281: PUSH
61282: LD_INT 5
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 0
61291: PUSH
61292: LD_INT 3
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 0
61301: PUSH
61302: LD_INT 2
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 1
61311: PUSH
61312: LD_INT 3
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 1
61321: PUSH
61322: LD_INT 4
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 0
61331: PUSH
61332: LD_INT 4
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 1
61341: NEG
61342: PUSH
61343: LD_INT 3
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 1
61352: NEG
61353: PUSH
61354: LD_INT 2
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 2
61363: PUSH
61364: LD_INT 4
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 2
61373: NEG
61374: PUSH
61375: LD_INT 2
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 4
61384: NEG
61385: PUSH
61386: LD_INT 0
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 4
61395: NEG
61396: PUSH
61397: LD_INT 1
61399: NEG
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 3
61407: NEG
61408: PUSH
61409: LD_INT 0
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 3
61418: NEG
61419: PUSH
61420: LD_INT 1
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 4
61429: NEG
61430: PUSH
61431: LD_INT 1
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 5
61440: NEG
61441: PUSH
61442: LD_INT 0
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 5
61451: NEG
61452: PUSH
61453: LD_INT 1
61455: NEG
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 5
61463: NEG
61464: PUSH
61465: LD_INT 2
61467: NEG
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 3
61475: NEG
61476: PUSH
61477: LD_INT 2
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 3
61486: NEG
61487: PUSH
61488: LD_INT 3
61490: NEG
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 3
61498: NEG
61499: PUSH
61500: LD_INT 4
61502: NEG
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 2
61510: NEG
61511: PUSH
61512: LD_INT 3
61514: NEG
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 2
61522: NEG
61523: PUSH
61524: LD_INT 2
61526: NEG
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 3
61534: NEG
61535: PUSH
61536: LD_INT 2
61538: NEG
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 4
61546: NEG
61547: PUSH
61548: LD_INT 3
61550: NEG
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 4
61558: NEG
61559: PUSH
61560: LD_INT 4
61562: NEG
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 2
61570: NEG
61571: PUSH
61572: LD_INT 4
61574: NEG
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 4
61582: NEG
61583: PUSH
61584: LD_INT 2
61586: NEG
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 0
61594: PUSH
61595: LD_INT 4
61597: NEG
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 0
61605: PUSH
61606: LD_INT 5
61608: NEG
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 1
61616: PUSH
61617: LD_INT 4
61619: NEG
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 1
61627: PUSH
61628: LD_INT 3
61630: NEG
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 0
61638: PUSH
61639: LD_INT 3
61641: NEG
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 1
61649: NEG
61650: PUSH
61651: LD_INT 4
61653: NEG
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 1
61661: NEG
61662: PUSH
61663: LD_INT 5
61665: NEG
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 2
61673: PUSH
61674: LD_INT 3
61676: NEG
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 2
61684: NEG
61685: PUSH
61686: LD_INT 5
61688: NEG
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61741: LD_ADDR_VAR 0 31
61745: PUSH
61746: LD_INT 0
61748: PUSH
61749: LD_INT 4
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 0
61758: PUSH
61759: LD_INT 3
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 1
61768: PUSH
61769: LD_INT 4
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 1
61778: PUSH
61779: LD_INT 5
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 0
61788: PUSH
61789: LD_INT 5
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 1
61798: NEG
61799: PUSH
61800: LD_INT 4
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 1
61809: NEG
61810: PUSH
61811: LD_INT 3
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 2
61820: PUSH
61821: LD_INT 5
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 2
61830: NEG
61831: PUSH
61832: LD_INT 3
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 3
61841: NEG
61842: PUSH
61843: LD_INT 0
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 3
61852: NEG
61853: PUSH
61854: LD_INT 1
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 2
61864: NEG
61865: PUSH
61866: LD_INT 0
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 2
61875: NEG
61876: PUSH
61877: LD_INT 1
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 3
61886: NEG
61887: PUSH
61888: LD_INT 1
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 4
61897: NEG
61898: PUSH
61899: LD_INT 0
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 4
61908: NEG
61909: PUSH
61910: LD_INT 1
61912: NEG
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: LD_INT 4
61920: NEG
61921: PUSH
61922: LD_INT 2
61924: NEG
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 2
61932: NEG
61933: PUSH
61934: LD_INT 2
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 4
61943: NEG
61944: PUSH
61945: LD_INT 4
61947: NEG
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 4
61955: NEG
61956: PUSH
61957: LD_INT 5
61959: NEG
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 3
61967: NEG
61968: PUSH
61969: LD_INT 4
61971: NEG
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 3
61979: NEG
61980: PUSH
61981: LD_INT 3
61983: NEG
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 4
61991: NEG
61992: PUSH
61993: LD_INT 3
61995: NEG
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 5
62003: NEG
62004: PUSH
62005: LD_INT 4
62007: NEG
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 5
62015: NEG
62016: PUSH
62017: LD_INT 5
62019: NEG
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 3
62027: NEG
62028: PUSH
62029: LD_INT 5
62031: NEG
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 5
62039: NEG
62040: PUSH
62041: LD_INT 3
62043: NEG
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: LD_INT 3
62054: NEG
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 0
62062: PUSH
62063: LD_INT 4
62065: NEG
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 1
62073: PUSH
62074: LD_INT 3
62076: NEG
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 1
62084: PUSH
62085: LD_INT 2
62087: NEG
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: LD_INT 2
62098: NEG
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 1
62106: NEG
62107: PUSH
62108: LD_INT 3
62110: NEG
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 1
62118: NEG
62119: PUSH
62120: LD_INT 4
62122: NEG
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 2
62130: PUSH
62131: LD_INT 2
62133: NEG
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 2
62141: NEG
62142: PUSH
62143: LD_INT 4
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 4
62153: PUSH
62154: LD_INT 0
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 4
62163: PUSH
62164: LD_INT 1
62166: NEG
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 5
62174: PUSH
62175: LD_INT 0
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 5
62184: PUSH
62185: LD_INT 1
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 4
62194: PUSH
62195: LD_INT 1
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 3
62204: PUSH
62205: LD_INT 0
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 3
62214: PUSH
62215: LD_INT 1
62217: NEG
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 3
62225: PUSH
62226: LD_INT 2
62228: NEG
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 5
62236: PUSH
62237: LD_INT 2
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62291: LD_ADDR_VAR 0 32
62295: PUSH
62296: LD_INT 4
62298: NEG
62299: PUSH
62300: LD_INT 0
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 4
62309: NEG
62310: PUSH
62311: LD_INT 1
62313: NEG
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 3
62321: NEG
62322: PUSH
62323: LD_INT 0
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 3
62332: NEG
62333: PUSH
62334: LD_INT 1
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 4
62343: NEG
62344: PUSH
62345: LD_INT 1
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 5
62354: NEG
62355: PUSH
62356: LD_INT 0
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 5
62365: NEG
62366: PUSH
62367: LD_INT 1
62369: NEG
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 5
62377: NEG
62378: PUSH
62379: LD_INT 2
62381: NEG
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 3
62389: NEG
62390: PUSH
62391: LD_INT 2
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 3
62400: NEG
62401: PUSH
62402: LD_INT 3
62404: NEG
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 3
62412: NEG
62413: PUSH
62414: LD_INT 4
62416: NEG
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 2
62424: NEG
62425: PUSH
62426: LD_INT 3
62428: NEG
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 2
62436: NEG
62437: PUSH
62438: LD_INT 2
62440: NEG
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 3
62448: NEG
62449: PUSH
62450: LD_INT 2
62452: NEG
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 4
62460: NEG
62461: PUSH
62462: LD_INT 3
62464: NEG
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 4
62472: NEG
62473: PUSH
62474: LD_INT 4
62476: NEG
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 2
62484: NEG
62485: PUSH
62486: LD_INT 4
62488: NEG
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 4
62496: NEG
62497: PUSH
62498: LD_INT 2
62500: NEG
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 0
62508: PUSH
62509: LD_INT 4
62511: NEG
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 0
62519: PUSH
62520: LD_INT 5
62522: NEG
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 1
62530: PUSH
62531: LD_INT 4
62533: NEG
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 1
62541: PUSH
62542: LD_INT 3
62544: NEG
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 0
62552: PUSH
62553: LD_INT 3
62555: NEG
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 1
62563: NEG
62564: PUSH
62565: LD_INT 4
62567: NEG
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 1
62575: NEG
62576: PUSH
62577: LD_INT 5
62579: NEG
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 2
62587: PUSH
62588: LD_INT 3
62590: NEG
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 2
62598: NEG
62599: PUSH
62600: LD_INT 5
62602: NEG
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 3
62610: PUSH
62611: LD_INT 0
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 3
62620: PUSH
62621: LD_INT 1
62623: NEG
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 4
62631: PUSH
62632: LD_INT 0
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 4
62641: PUSH
62642: LD_INT 1
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 3
62651: PUSH
62652: LD_INT 1
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 2
62661: PUSH
62662: LD_INT 0
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 2
62671: PUSH
62672: LD_INT 1
62674: NEG
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 2
62682: PUSH
62683: LD_INT 2
62685: NEG
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 4
62693: PUSH
62694: LD_INT 2
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 4
62703: PUSH
62704: LD_INT 4
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 4
62713: PUSH
62714: LD_INT 3
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 5
62723: PUSH
62724: LD_INT 4
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 5
62733: PUSH
62734: LD_INT 5
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 4
62743: PUSH
62744: LD_INT 5
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 3
62753: PUSH
62754: LD_INT 4
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 3
62763: PUSH
62764: LD_INT 3
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 5
62773: PUSH
62774: LD_INT 3
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 3
62783: PUSH
62784: LD_INT 5
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62838: LD_ADDR_VAR 0 33
62842: PUSH
62843: LD_INT 4
62845: NEG
62846: PUSH
62847: LD_INT 4
62849: NEG
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 4
62857: NEG
62858: PUSH
62859: LD_INT 5
62861: NEG
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 3
62869: NEG
62870: PUSH
62871: LD_INT 4
62873: NEG
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 3
62881: NEG
62882: PUSH
62883: LD_INT 3
62885: NEG
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 4
62893: NEG
62894: PUSH
62895: LD_INT 3
62897: NEG
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 5
62905: NEG
62906: PUSH
62907: LD_INT 4
62909: NEG
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 5
62917: NEG
62918: PUSH
62919: LD_INT 5
62921: NEG
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 3
62929: NEG
62930: PUSH
62931: LD_INT 5
62933: NEG
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 5
62941: NEG
62942: PUSH
62943: LD_INT 3
62945: NEG
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 0
62953: PUSH
62954: LD_INT 3
62956: NEG
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 0
62964: PUSH
62965: LD_INT 4
62967: NEG
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 1
62975: PUSH
62976: LD_INT 3
62978: NEG
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 1
62986: PUSH
62987: LD_INT 2
62989: NEG
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 0
62997: PUSH
62998: LD_INT 2
63000: NEG
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 1
63008: NEG
63009: PUSH
63010: LD_INT 3
63012: NEG
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 1
63020: NEG
63021: PUSH
63022: LD_INT 4
63024: NEG
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 2
63032: PUSH
63033: LD_INT 2
63035: NEG
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 2
63043: NEG
63044: PUSH
63045: LD_INT 4
63047: NEG
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 4
63055: PUSH
63056: LD_INT 0
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 4
63065: PUSH
63066: LD_INT 1
63068: NEG
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 5
63076: PUSH
63077: LD_INT 0
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 5
63086: PUSH
63087: LD_INT 1
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 4
63096: PUSH
63097: LD_INT 1
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 3
63106: PUSH
63107: LD_INT 0
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 3
63116: PUSH
63117: LD_INT 1
63119: NEG
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 3
63127: PUSH
63128: LD_INT 2
63130: NEG
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 5
63138: PUSH
63139: LD_INT 2
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 3
63148: PUSH
63149: LD_INT 3
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 3
63158: PUSH
63159: LD_INT 2
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 4
63168: PUSH
63169: LD_INT 3
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 4
63178: PUSH
63179: LD_INT 4
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 3
63188: PUSH
63189: LD_INT 4
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 2
63198: PUSH
63199: LD_INT 3
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 2
63208: PUSH
63209: LD_INT 2
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 4
63218: PUSH
63219: LD_INT 2
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 2
63228: PUSH
63229: LD_INT 4
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 0
63238: PUSH
63239: LD_INT 4
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 0
63248: PUSH
63249: LD_INT 3
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 1
63258: PUSH
63259: LD_INT 4
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 1
63268: PUSH
63269: LD_INT 5
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 0
63278: PUSH
63279: LD_INT 5
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 1
63288: NEG
63289: PUSH
63290: LD_INT 4
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 1
63299: NEG
63300: PUSH
63301: LD_INT 3
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 2
63310: PUSH
63311: LD_INT 5
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 2
63320: NEG
63321: PUSH
63322: LD_INT 3
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63376: LD_ADDR_VAR 0 34
63380: PUSH
63381: LD_INT 0
63383: PUSH
63384: LD_INT 4
63386: NEG
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 0
63394: PUSH
63395: LD_INT 5
63397: NEG
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 1
63405: PUSH
63406: LD_INT 4
63408: NEG
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 1
63416: PUSH
63417: LD_INT 3
63419: NEG
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 0
63427: PUSH
63428: LD_INT 3
63430: NEG
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 1
63438: NEG
63439: PUSH
63440: LD_INT 4
63442: NEG
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 1
63450: NEG
63451: PUSH
63452: LD_INT 5
63454: NEG
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 2
63462: PUSH
63463: LD_INT 3
63465: NEG
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 2
63473: NEG
63474: PUSH
63475: LD_INT 5
63477: NEG
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 3
63485: PUSH
63486: LD_INT 0
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 3
63495: PUSH
63496: LD_INT 1
63498: NEG
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 4
63506: PUSH
63507: LD_INT 0
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 4
63516: PUSH
63517: LD_INT 1
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 3
63526: PUSH
63527: LD_INT 1
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 2
63536: PUSH
63537: LD_INT 0
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 2
63546: PUSH
63547: LD_INT 1
63549: NEG
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 2
63557: PUSH
63558: LD_INT 2
63560: NEG
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 4
63568: PUSH
63569: LD_INT 2
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 4
63578: PUSH
63579: LD_INT 4
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 4
63588: PUSH
63589: LD_INT 3
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: LD_INT 5
63598: PUSH
63599: LD_INT 4
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 5
63608: PUSH
63609: LD_INT 5
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 4
63618: PUSH
63619: LD_INT 5
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 3
63628: PUSH
63629: LD_INT 4
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 3
63638: PUSH
63639: LD_INT 3
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 5
63648: PUSH
63649: LD_INT 3
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 3
63658: PUSH
63659: LD_INT 5
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 0
63668: PUSH
63669: LD_INT 3
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 0
63678: PUSH
63679: LD_INT 2
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 1
63688: PUSH
63689: LD_INT 3
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 1
63698: PUSH
63699: LD_INT 4
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 0
63708: PUSH
63709: LD_INT 4
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 1
63718: NEG
63719: PUSH
63720: LD_INT 3
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 1
63729: NEG
63730: PUSH
63731: LD_INT 2
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 2
63740: PUSH
63741: LD_INT 4
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 2
63750: NEG
63751: PUSH
63752: LD_INT 2
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 4
63761: NEG
63762: PUSH
63763: LD_INT 0
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 4
63772: NEG
63773: PUSH
63774: LD_INT 1
63776: NEG
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 3
63784: NEG
63785: PUSH
63786: LD_INT 0
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 3
63795: NEG
63796: PUSH
63797: LD_INT 1
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 4
63806: NEG
63807: PUSH
63808: LD_INT 1
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 5
63817: NEG
63818: PUSH
63819: LD_INT 0
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 5
63828: NEG
63829: PUSH
63830: LD_INT 1
63832: NEG
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 5
63840: NEG
63841: PUSH
63842: LD_INT 2
63844: NEG
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 3
63852: NEG
63853: PUSH
63854: LD_INT 2
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: ST_TO_ADDR
// end ; end ;
63908: GO 63911
63910: POP
// case btype of b_depot , b_warehouse :
63911: LD_VAR 0 1
63915: PUSH
63916: LD_INT 0
63918: DOUBLE
63919: EQUAL
63920: IFTRUE 63930
63922: LD_INT 1
63924: DOUBLE
63925: EQUAL
63926: IFTRUE 63930
63928: GO 64131
63930: POP
// case nation of nation_american :
63931: LD_VAR 0 5
63935: PUSH
63936: LD_INT 1
63938: DOUBLE
63939: EQUAL
63940: IFTRUE 63944
63942: GO 64000
63944: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63945: LD_ADDR_VAR 0 9
63949: PUSH
63950: LD_VAR 0 11
63954: PUSH
63955: LD_VAR 0 12
63959: PUSH
63960: LD_VAR 0 13
63964: PUSH
63965: LD_VAR 0 14
63969: PUSH
63970: LD_VAR 0 15
63974: PUSH
63975: LD_VAR 0 16
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: PUSH
63988: LD_VAR 0 4
63992: PUSH
63993: LD_INT 1
63995: PLUS
63996: ARRAY
63997: ST_TO_ADDR
63998: GO 64129
64000: LD_INT 2
64002: DOUBLE
64003: EQUAL
64004: IFTRUE 64008
64006: GO 64064
64008: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64009: LD_ADDR_VAR 0 9
64013: PUSH
64014: LD_VAR 0 17
64018: PUSH
64019: LD_VAR 0 18
64023: PUSH
64024: LD_VAR 0 19
64028: PUSH
64029: LD_VAR 0 20
64033: PUSH
64034: LD_VAR 0 21
64038: PUSH
64039: LD_VAR 0 22
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: PUSH
64052: LD_VAR 0 4
64056: PUSH
64057: LD_INT 1
64059: PLUS
64060: ARRAY
64061: ST_TO_ADDR
64062: GO 64129
64064: LD_INT 3
64066: DOUBLE
64067: EQUAL
64068: IFTRUE 64072
64070: GO 64128
64072: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64073: LD_ADDR_VAR 0 9
64077: PUSH
64078: LD_VAR 0 23
64082: PUSH
64083: LD_VAR 0 24
64087: PUSH
64088: LD_VAR 0 25
64092: PUSH
64093: LD_VAR 0 26
64097: PUSH
64098: LD_VAR 0 27
64102: PUSH
64103: LD_VAR 0 28
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: PUSH
64116: LD_VAR 0 4
64120: PUSH
64121: LD_INT 1
64123: PLUS
64124: ARRAY
64125: ST_TO_ADDR
64126: GO 64129
64128: POP
64129: GO 64684
64131: LD_INT 2
64133: DOUBLE
64134: EQUAL
64135: IFTRUE 64145
64137: LD_INT 3
64139: DOUBLE
64140: EQUAL
64141: IFTRUE 64145
64143: GO 64201
64145: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64146: LD_ADDR_VAR 0 9
64150: PUSH
64151: LD_VAR 0 29
64155: PUSH
64156: LD_VAR 0 30
64160: PUSH
64161: LD_VAR 0 31
64165: PUSH
64166: LD_VAR 0 32
64170: PUSH
64171: LD_VAR 0 33
64175: PUSH
64176: LD_VAR 0 34
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: PUSH
64189: LD_VAR 0 4
64193: PUSH
64194: LD_INT 1
64196: PLUS
64197: ARRAY
64198: ST_TO_ADDR
64199: GO 64684
64201: LD_INT 16
64203: DOUBLE
64204: EQUAL
64205: IFTRUE 64263
64207: LD_INT 17
64209: DOUBLE
64210: EQUAL
64211: IFTRUE 64263
64213: LD_INT 18
64215: DOUBLE
64216: EQUAL
64217: IFTRUE 64263
64219: LD_INT 19
64221: DOUBLE
64222: EQUAL
64223: IFTRUE 64263
64225: LD_INT 22
64227: DOUBLE
64228: EQUAL
64229: IFTRUE 64263
64231: LD_INT 20
64233: DOUBLE
64234: EQUAL
64235: IFTRUE 64263
64237: LD_INT 21
64239: DOUBLE
64240: EQUAL
64241: IFTRUE 64263
64243: LD_INT 23
64245: DOUBLE
64246: EQUAL
64247: IFTRUE 64263
64249: LD_INT 24
64251: DOUBLE
64252: EQUAL
64253: IFTRUE 64263
64255: LD_INT 25
64257: DOUBLE
64258: EQUAL
64259: IFTRUE 64263
64261: GO 64319
64263: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64264: LD_ADDR_VAR 0 9
64268: PUSH
64269: LD_VAR 0 35
64273: PUSH
64274: LD_VAR 0 36
64278: PUSH
64279: LD_VAR 0 37
64283: PUSH
64284: LD_VAR 0 38
64288: PUSH
64289: LD_VAR 0 39
64293: PUSH
64294: LD_VAR 0 40
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: PUSH
64307: LD_VAR 0 4
64311: PUSH
64312: LD_INT 1
64314: PLUS
64315: ARRAY
64316: ST_TO_ADDR
64317: GO 64684
64319: LD_INT 6
64321: DOUBLE
64322: EQUAL
64323: IFTRUE 64375
64325: LD_INT 7
64327: DOUBLE
64328: EQUAL
64329: IFTRUE 64375
64331: LD_INT 8
64333: DOUBLE
64334: EQUAL
64335: IFTRUE 64375
64337: LD_INT 13
64339: DOUBLE
64340: EQUAL
64341: IFTRUE 64375
64343: LD_INT 12
64345: DOUBLE
64346: EQUAL
64347: IFTRUE 64375
64349: LD_INT 15
64351: DOUBLE
64352: EQUAL
64353: IFTRUE 64375
64355: LD_INT 11
64357: DOUBLE
64358: EQUAL
64359: IFTRUE 64375
64361: LD_INT 14
64363: DOUBLE
64364: EQUAL
64365: IFTRUE 64375
64367: LD_INT 10
64369: DOUBLE
64370: EQUAL
64371: IFTRUE 64375
64373: GO 64431
64375: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64376: LD_ADDR_VAR 0 9
64380: PUSH
64381: LD_VAR 0 41
64385: PUSH
64386: LD_VAR 0 42
64390: PUSH
64391: LD_VAR 0 43
64395: PUSH
64396: LD_VAR 0 44
64400: PUSH
64401: LD_VAR 0 45
64405: PUSH
64406: LD_VAR 0 46
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: PUSH
64419: LD_VAR 0 4
64423: PUSH
64424: LD_INT 1
64426: PLUS
64427: ARRAY
64428: ST_TO_ADDR
64429: GO 64684
64431: LD_INT 36
64433: DOUBLE
64434: EQUAL
64435: IFTRUE 64439
64437: GO 64495
64439: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64440: LD_ADDR_VAR 0 9
64444: PUSH
64445: LD_VAR 0 47
64449: PUSH
64450: LD_VAR 0 48
64454: PUSH
64455: LD_VAR 0 49
64459: PUSH
64460: LD_VAR 0 50
64464: PUSH
64465: LD_VAR 0 51
64469: PUSH
64470: LD_VAR 0 52
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: PUSH
64483: LD_VAR 0 4
64487: PUSH
64488: LD_INT 1
64490: PLUS
64491: ARRAY
64492: ST_TO_ADDR
64493: GO 64684
64495: LD_INT 4
64497: DOUBLE
64498: EQUAL
64499: IFTRUE 64521
64501: LD_INT 5
64503: DOUBLE
64504: EQUAL
64505: IFTRUE 64521
64507: LD_INT 34
64509: DOUBLE
64510: EQUAL
64511: IFTRUE 64521
64513: LD_INT 37
64515: DOUBLE
64516: EQUAL
64517: IFTRUE 64521
64519: GO 64577
64521: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64522: LD_ADDR_VAR 0 9
64526: PUSH
64527: LD_VAR 0 53
64531: PUSH
64532: LD_VAR 0 54
64536: PUSH
64537: LD_VAR 0 55
64541: PUSH
64542: LD_VAR 0 56
64546: PUSH
64547: LD_VAR 0 57
64551: PUSH
64552: LD_VAR 0 58
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: PUSH
64565: LD_VAR 0 4
64569: PUSH
64570: LD_INT 1
64572: PLUS
64573: ARRAY
64574: ST_TO_ADDR
64575: GO 64684
64577: LD_INT 31
64579: DOUBLE
64580: EQUAL
64581: IFTRUE 64627
64583: LD_INT 32
64585: DOUBLE
64586: EQUAL
64587: IFTRUE 64627
64589: LD_INT 33
64591: DOUBLE
64592: EQUAL
64593: IFTRUE 64627
64595: LD_INT 27
64597: DOUBLE
64598: EQUAL
64599: IFTRUE 64627
64601: LD_INT 26
64603: DOUBLE
64604: EQUAL
64605: IFTRUE 64627
64607: LD_INT 28
64609: DOUBLE
64610: EQUAL
64611: IFTRUE 64627
64613: LD_INT 29
64615: DOUBLE
64616: EQUAL
64617: IFTRUE 64627
64619: LD_INT 30
64621: DOUBLE
64622: EQUAL
64623: IFTRUE 64627
64625: GO 64683
64627: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64628: LD_ADDR_VAR 0 9
64632: PUSH
64633: LD_VAR 0 59
64637: PUSH
64638: LD_VAR 0 60
64642: PUSH
64643: LD_VAR 0 61
64647: PUSH
64648: LD_VAR 0 62
64652: PUSH
64653: LD_VAR 0 63
64657: PUSH
64658: LD_VAR 0 64
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: PUSH
64671: LD_VAR 0 4
64675: PUSH
64676: LD_INT 1
64678: PLUS
64679: ARRAY
64680: ST_TO_ADDR
64681: GO 64684
64683: POP
// temp_list2 = [ ] ;
64684: LD_ADDR_VAR 0 10
64688: PUSH
64689: EMPTY
64690: ST_TO_ADDR
// for i in temp_list do
64691: LD_ADDR_VAR 0 8
64695: PUSH
64696: LD_VAR 0 9
64700: PUSH
64701: FOR_IN
64702: IFFALSE 64754
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64704: LD_ADDR_VAR 0 10
64708: PUSH
64709: LD_VAR 0 10
64713: PUSH
64714: LD_VAR 0 8
64718: PUSH
64719: LD_INT 1
64721: ARRAY
64722: PUSH
64723: LD_VAR 0 2
64727: PLUS
64728: PUSH
64729: LD_VAR 0 8
64733: PUSH
64734: LD_INT 2
64736: ARRAY
64737: PUSH
64738: LD_VAR 0 3
64742: PLUS
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: EMPTY
64749: LIST
64750: ADD
64751: ST_TO_ADDR
64752: GO 64701
64754: POP
64755: POP
// result = temp_list2 ;
64756: LD_ADDR_VAR 0 7
64760: PUSH
64761: LD_VAR 0 10
64765: ST_TO_ADDR
// end ;
64766: LD_VAR 0 7
64770: RET
// export function EnemyInRange ( unit , dist ) ; begin
64771: LD_INT 0
64773: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64774: LD_ADDR_VAR 0 3
64778: PUSH
64779: LD_VAR 0 1
64783: PPUSH
64784: CALL_OW 255
64788: PPUSH
64789: LD_VAR 0 1
64793: PPUSH
64794: CALL_OW 250
64798: PPUSH
64799: LD_VAR 0 1
64803: PPUSH
64804: CALL_OW 251
64808: PPUSH
64809: LD_VAR 0 2
64813: PPUSH
64814: CALL 38167 0 4
64818: PUSH
64819: LD_INT 4
64821: ARRAY
64822: ST_TO_ADDR
// end ;
64823: LD_VAR 0 3
64827: RET
// export function PlayerSeeMe ( unit ) ; begin
64828: LD_INT 0
64830: PPUSH
// result := See ( your_side , unit ) ;
64831: LD_ADDR_VAR 0 2
64835: PUSH
64836: LD_OWVAR 2
64840: PPUSH
64841: LD_VAR 0 1
64845: PPUSH
64846: CALL_OW 292
64850: ST_TO_ADDR
// end ;
64851: LD_VAR 0 2
64855: RET
// export function ReverseDir ( unit ) ; begin
64856: LD_INT 0
64858: PPUSH
// if not unit then
64859: LD_VAR 0 1
64863: NOT
64864: IFFALSE 64868
// exit ;
64866: GO 64891
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64868: LD_ADDR_VAR 0 2
64872: PUSH
64873: LD_VAR 0 1
64877: PPUSH
64878: CALL_OW 254
64882: PUSH
64883: LD_INT 3
64885: PLUS
64886: PUSH
64887: LD_INT 6
64889: MOD
64890: ST_TO_ADDR
// end ;
64891: LD_VAR 0 2
64895: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
64896: LD_INT 0
64898: PPUSH
64899: PPUSH
64900: PPUSH
64901: PPUSH
64902: PPUSH
// if not hexes then
64903: LD_VAR 0 2
64907: NOT
64908: IFFALSE 64912
// exit ;
64910: GO 65060
// dist := 9999 ;
64912: LD_ADDR_VAR 0 5
64916: PUSH
64917: LD_INT 9999
64919: ST_TO_ADDR
// for i = 1 to hexes do
64920: LD_ADDR_VAR 0 4
64924: PUSH
64925: DOUBLE
64926: LD_INT 1
64928: DEC
64929: ST_TO_ADDR
64930: LD_VAR 0 2
64934: PUSH
64935: FOR_TO
64936: IFFALSE 65048
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
64938: LD_VAR 0 1
64942: PPUSH
64943: LD_VAR 0 2
64947: PUSH
64948: LD_VAR 0 4
64952: ARRAY
64953: PUSH
64954: LD_INT 1
64956: ARRAY
64957: PPUSH
64958: LD_VAR 0 2
64962: PUSH
64963: LD_VAR 0 4
64967: ARRAY
64968: PUSH
64969: LD_INT 2
64971: ARRAY
64972: PPUSH
64973: CALL_OW 297
64977: PUSH
64978: LD_VAR 0 5
64982: LESS
64983: IFFALSE 65046
// begin hex := hexes [ i ] ;
64985: LD_ADDR_VAR 0 7
64989: PUSH
64990: LD_VAR 0 2
64994: PUSH
64995: LD_VAR 0 4
64999: ARRAY
65000: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65001: LD_ADDR_VAR 0 5
65005: PUSH
65006: LD_VAR 0 1
65010: PPUSH
65011: LD_VAR 0 2
65015: PUSH
65016: LD_VAR 0 4
65020: ARRAY
65021: PUSH
65022: LD_INT 1
65024: ARRAY
65025: PPUSH
65026: LD_VAR 0 2
65030: PUSH
65031: LD_VAR 0 4
65035: ARRAY
65036: PUSH
65037: LD_INT 2
65039: ARRAY
65040: PPUSH
65041: CALL_OW 297
65045: ST_TO_ADDR
// end ; end ;
65046: GO 64935
65048: POP
65049: POP
// result := hex ;
65050: LD_ADDR_VAR 0 3
65054: PUSH
65055: LD_VAR 0 7
65059: ST_TO_ADDR
// end ;
65060: LD_VAR 0 3
65064: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65065: LD_INT 0
65067: PPUSH
65068: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65069: LD_VAR 0 1
65073: NOT
65074: PUSH
65075: LD_VAR 0 1
65079: PUSH
65080: LD_INT 21
65082: PUSH
65083: LD_INT 2
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 23
65092: PUSH
65093: LD_INT 2
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PPUSH
65104: CALL_OW 69
65108: IN
65109: NOT
65110: OR
65111: IFFALSE 65115
// exit ;
65113: GO 65162
// for i = 1 to 3 do
65115: LD_ADDR_VAR 0 3
65119: PUSH
65120: DOUBLE
65121: LD_INT 1
65123: DEC
65124: ST_TO_ADDR
65125: LD_INT 3
65127: PUSH
65128: FOR_TO
65129: IFFALSE 65160
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65131: LD_VAR 0 1
65135: PPUSH
65136: CALL_OW 250
65140: PPUSH
65141: LD_VAR 0 1
65145: PPUSH
65146: CALL_OW 251
65150: PPUSH
65151: LD_INT 1
65153: PPUSH
65154: CALL_OW 453
65158: GO 65128
65160: POP
65161: POP
// end ;
65162: LD_VAR 0 2
65166: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65167: LD_INT 0
65169: PPUSH
65170: PPUSH
65171: PPUSH
65172: PPUSH
65173: PPUSH
65174: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65175: LD_VAR 0 1
65179: NOT
65180: PUSH
65181: LD_VAR 0 2
65185: NOT
65186: OR
65187: PUSH
65188: LD_VAR 0 1
65192: PPUSH
65193: CALL_OW 314
65197: OR
65198: IFFALSE 65202
// exit ;
65200: GO 65643
// x := GetX ( enemy_unit ) ;
65202: LD_ADDR_VAR 0 7
65206: PUSH
65207: LD_VAR 0 2
65211: PPUSH
65212: CALL_OW 250
65216: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65217: LD_ADDR_VAR 0 8
65221: PUSH
65222: LD_VAR 0 2
65226: PPUSH
65227: CALL_OW 251
65231: ST_TO_ADDR
// if not x or not y then
65232: LD_VAR 0 7
65236: NOT
65237: PUSH
65238: LD_VAR 0 8
65242: NOT
65243: OR
65244: IFFALSE 65248
// exit ;
65246: GO 65643
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65248: LD_ADDR_VAR 0 6
65252: PUSH
65253: LD_VAR 0 7
65257: PPUSH
65258: LD_INT 0
65260: PPUSH
65261: LD_INT 4
65263: PPUSH
65264: CALL_OW 272
65268: PUSH
65269: LD_VAR 0 8
65273: PPUSH
65274: LD_INT 0
65276: PPUSH
65277: LD_INT 4
65279: PPUSH
65280: CALL_OW 273
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_VAR 0 7
65293: PPUSH
65294: LD_INT 1
65296: PPUSH
65297: LD_INT 4
65299: PPUSH
65300: CALL_OW 272
65304: PUSH
65305: LD_VAR 0 8
65309: PPUSH
65310: LD_INT 1
65312: PPUSH
65313: LD_INT 4
65315: PPUSH
65316: CALL_OW 273
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_VAR 0 7
65329: PPUSH
65330: LD_INT 2
65332: PPUSH
65333: LD_INT 4
65335: PPUSH
65336: CALL_OW 272
65340: PUSH
65341: LD_VAR 0 8
65345: PPUSH
65346: LD_INT 2
65348: PPUSH
65349: LD_INT 4
65351: PPUSH
65352: CALL_OW 273
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_VAR 0 7
65365: PPUSH
65366: LD_INT 3
65368: PPUSH
65369: LD_INT 4
65371: PPUSH
65372: CALL_OW 272
65376: PUSH
65377: LD_VAR 0 8
65381: PPUSH
65382: LD_INT 3
65384: PPUSH
65385: LD_INT 4
65387: PPUSH
65388: CALL_OW 273
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_VAR 0 7
65401: PPUSH
65402: LD_INT 4
65404: PPUSH
65405: LD_INT 4
65407: PPUSH
65408: CALL_OW 272
65412: PUSH
65413: LD_VAR 0 8
65417: PPUSH
65418: LD_INT 4
65420: PPUSH
65421: LD_INT 4
65423: PPUSH
65424: CALL_OW 273
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_VAR 0 7
65437: PPUSH
65438: LD_INT 5
65440: PPUSH
65441: LD_INT 4
65443: PPUSH
65444: CALL_OW 272
65448: PUSH
65449: LD_VAR 0 8
65453: PPUSH
65454: LD_INT 5
65456: PPUSH
65457: LD_INT 4
65459: PPUSH
65460: CALL_OW 273
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: LIST
65476: ST_TO_ADDR
// for i = tmp downto 1 do
65477: LD_ADDR_VAR 0 4
65481: PUSH
65482: DOUBLE
65483: LD_VAR 0 6
65487: INC
65488: ST_TO_ADDR
65489: LD_INT 1
65491: PUSH
65492: FOR_DOWNTO
65493: IFFALSE 65594
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65495: LD_VAR 0 6
65499: PUSH
65500: LD_VAR 0 4
65504: ARRAY
65505: PUSH
65506: LD_INT 1
65508: ARRAY
65509: PPUSH
65510: LD_VAR 0 6
65514: PUSH
65515: LD_VAR 0 4
65519: ARRAY
65520: PUSH
65521: LD_INT 2
65523: ARRAY
65524: PPUSH
65525: CALL_OW 488
65529: NOT
65530: PUSH
65531: LD_VAR 0 6
65535: PUSH
65536: LD_VAR 0 4
65540: ARRAY
65541: PUSH
65542: LD_INT 1
65544: ARRAY
65545: PPUSH
65546: LD_VAR 0 6
65550: PUSH
65551: LD_VAR 0 4
65555: ARRAY
65556: PUSH
65557: LD_INT 2
65559: ARRAY
65560: PPUSH
65561: CALL_OW 428
65565: PUSH
65566: LD_INT 0
65568: NONEQUAL
65569: OR
65570: IFFALSE 65592
// tmp := Delete ( tmp , i ) ;
65572: LD_ADDR_VAR 0 6
65576: PUSH
65577: LD_VAR 0 6
65581: PPUSH
65582: LD_VAR 0 4
65586: PPUSH
65587: CALL_OW 3
65591: ST_TO_ADDR
65592: GO 65492
65594: POP
65595: POP
// j := GetClosestHex ( unit , tmp ) ;
65596: LD_ADDR_VAR 0 5
65600: PUSH
65601: LD_VAR 0 1
65605: PPUSH
65606: LD_VAR 0 6
65610: PPUSH
65611: CALL 64896 0 2
65615: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65616: LD_VAR 0 1
65620: PPUSH
65621: LD_VAR 0 5
65625: PUSH
65626: LD_INT 1
65628: ARRAY
65629: PPUSH
65630: LD_VAR 0 5
65634: PUSH
65635: LD_INT 2
65637: ARRAY
65638: PPUSH
65639: CALL_OW 111
// end ;
65643: LD_VAR 0 3
65647: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65648: LD_INT 0
65650: PPUSH
65651: PPUSH
65652: PPUSH
// uc_side = 0 ;
65653: LD_ADDR_OWVAR 20
65657: PUSH
65658: LD_INT 0
65660: ST_TO_ADDR
// uc_nation = 0 ;
65661: LD_ADDR_OWVAR 21
65665: PUSH
65666: LD_INT 0
65668: ST_TO_ADDR
// InitHc_All ( ) ;
65669: CALL_OW 584
// InitVc ;
65673: CALL_OW 20
// if mastodonts then
65677: LD_VAR 0 6
65681: IFFALSE 65748
// for i = 1 to mastodonts do
65683: LD_ADDR_VAR 0 11
65687: PUSH
65688: DOUBLE
65689: LD_INT 1
65691: DEC
65692: ST_TO_ADDR
65693: LD_VAR 0 6
65697: PUSH
65698: FOR_TO
65699: IFFALSE 65746
// begin vc_chassis := 31 ;
65701: LD_ADDR_OWVAR 37
65705: PUSH
65706: LD_INT 31
65708: ST_TO_ADDR
// vc_control := control_rider ;
65709: LD_ADDR_OWVAR 38
65713: PUSH
65714: LD_INT 4
65716: ST_TO_ADDR
// animal := CreateVehicle ;
65717: LD_ADDR_VAR 0 12
65721: PUSH
65722: CALL_OW 45
65726: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65727: LD_VAR 0 12
65731: PPUSH
65732: LD_VAR 0 8
65736: PPUSH
65737: LD_INT 0
65739: PPUSH
65740: CALL 67936 0 3
// end ;
65744: GO 65698
65746: POP
65747: POP
// if horses then
65748: LD_VAR 0 5
65752: IFFALSE 65819
// for i = 1 to horses do
65754: LD_ADDR_VAR 0 11
65758: PUSH
65759: DOUBLE
65760: LD_INT 1
65762: DEC
65763: ST_TO_ADDR
65764: LD_VAR 0 5
65768: PUSH
65769: FOR_TO
65770: IFFALSE 65817
// begin hc_class := 21 ;
65772: LD_ADDR_OWVAR 28
65776: PUSH
65777: LD_INT 21
65779: ST_TO_ADDR
// hc_gallery :=  ;
65780: LD_ADDR_OWVAR 33
65784: PUSH
65785: LD_STRING 
65787: ST_TO_ADDR
// animal := CreateHuman ;
65788: LD_ADDR_VAR 0 12
65792: PUSH
65793: CALL_OW 44
65797: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65798: LD_VAR 0 12
65802: PPUSH
65803: LD_VAR 0 8
65807: PPUSH
65808: LD_INT 0
65810: PPUSH
65811: CALL 67936 0 3
// end ;
65815: GO 65769
65817: POP
65818: POP
// if birds then
65819: LD_VAR 0 1
65823: IFFALSE 65890
// for i = 1 to birds do
65825: LD_ADDR_VAR 0 11
65829: PUSH
65830: DOUBLE
65831: LD_INT 1
65833: DEC
65834: ST_TO_ADDR
65835: LD_VAR 0 1
65839: PUSH
65840: FOR_TO
65841: IFFALSE 65888
// begin hc_class = 18 ;
65843: LD_ADDR_OWVAR 28
65847: PUSH
65848: LD_INT 18
65850: ST_TO_ADDR
// hc_gallery =  ;
65851: LD_ADDR_OWVAR 33
65855: PUSH
65856: LD_STRING 
65858: ST_TO_ADDR
// animal := CreateHuman ;
65859: LD_ADDR_VAR 0 12
65863: PUSH
65864: CALL_OW 44
65868: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65869: LD_VAR 0 12
65873: PPUSH
65874: LD_VAR 0 8
65878: PPUSH
65879: LD_INT 0
65881: PPUSH
65882: CALL 67936 0 3
// end ;
65886: GO 65840
65888: POP
65889: POP
// if tigers then
65890: LD_VAR 0 2
65894: IFFALSE 65978
// for i = 1 to tigers do
65896: LD_ADDR_VAR 0 11
65900: PUSH
65901: DOUBLE
65902: LD_INT 1
65904: DEC
65905: ST_TO_ADDR
65906: LD_VAR 0 2
65910: PUSH
65911: FOR_TO
65912: IFFALSE 65976
// begin hc_class = class_tiger ;
65914: LD_ADDR_OWVAR 28
65918: PUSH
65919: LD_INT 14
65921: ST_TO_ADDR
// hc_gallery =  ;
65922: LD_ADDR_OWVAR 33
65926: PUSH
65927: LD_STRING 
65929: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65930: LD_ADDR_OWVAR 35
65934: PUSH
65935: LD_INT 7
65937: NEG
65938: PPUSH
65939: LD_INT 7
65941: PPUSH
65942: CALL_OW 12
65946: ST_TO_ADDR
// animal := CreateHuman ;
65947: LD_ADDR_VAR 0 12
65951: PUSH
65952: CALL_OW 44
65956: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65957: LD_VAR 0 12
65961: PPUSH
65962: LD_VAR 0 8
65966: PPUSH
65967: LD_INT 0
65969: PPUSH
65970: CALL 67936 0 3
// end ;
65974: GO 65911
65976: POP
65977: POP
// if apemans then
65978: LD_VAR 0 3
65982: IFFALSE 66105
// for i = 1 to apemans do
65984: LD_ADDR_VAR 0 11
65988: PUSH
65989: DOUBLE
65990: LD_INT 1
65992: DEC
65993: ST_TO_ADDR
65994: LD_VAR 0 3
65998: PUSH
65999: FOR_TO
66000: IFFALSE 66103
// begin hc_class = class_apeman ;
66002: LD_ADDR_OWVAR 28
66006: PUSH
66007: LD_INT 12
66009: ST_TO_ADDR
// hc_gallery =  ;
66010: LD_ADDR_OWVAR 33
66014: PUSH
66015: LD_STRING 
66017: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66018: LD_ADDR_OWVAR 35
66022: PUSH
66023: LD_INT 2
66025: NEG
66026: PPUSH
66027: LD_INT 2
66029: PPUSH
66030: CALL_OW 12
66034: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66035: LD_ADDR_OWVAR 31
66039: PUSH
66040: LD_INT 1
66042: PPUSH
66043: LD_INT 3
66045: PPUSH
66046: CALL_OW 12
66050: PUSH
66051: LD_INT 1
66053: PPUSH
66054: LD_INT 3
66056: PPUSH
66057: CALL_OW 12
66061: PUSH
66062: LD_INT 0
66064: PUSH
66065: LD_INT 0
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: ST_TO_ADDR
// animal := CreateHuman ;
66074: LD_ADDR_VAR 0 12
66078: PUSH
66079: CALL_OW 44
66083: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66084: LD_VAR 0 12
66088: PPUSH
66089: LD_VAR 0 8
66093: PPUSH
66094: LD_INT 0
66096: PPUSH
66097: CALL 67936 0 3
// end ;
66101: GO 65999
66103: POP
66104: POP
// if enchidnas then
66105: LD_VAR 0 4
66109: IFFALSE 66176
// for i = 1 to enchidnas do
66111: LD_ADDR_VAR 0 11
66115: PUSH
66116: DOUBLE
66117: LD_INT 1
66119: DEC
66120: ST_TO_ADDR
66121: LD_VAR 0 4
66125: PUSH
66126: FOR_TO
66127: IFFALSE 66174
// begin hc_class = 13 ;
66129: LD_ADDR_OWVAR 28
66133: PUSH
66134: LD_INT 13
66136: ST_TO_ADDR
// hc_gallery =  ;
66137: LD_ADDR_OWVAR 33
66141: PUSH
66142: LD_STRING 
66144: ST_TO_ADDR
// animal := CreateHuman ;
66145: LD_ADDR_VAR 0 12
66149: PUSH
66150: CALL_OW 44
66154: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66155: LD_VAR 0 12
66159: PPUSH
66160: LD_VAR 0 8
66164: PPUSH
66165: LD_INT 0
66167: PPUSH
66168: CALL 67936 0 3
// end ;
66172: GO 66126
66174: POP
66175: POP
// if fishes then
66176: LD_VAR 0 7
66180: IFFALSE 66247
// for i = 1 to fishes do
66182: LD_ADDR_VAR 0 11
66186: PUSH
66187: DOUBLE
66188: LD_INT 1
66190: DEC
66191: ST_TO_ADDR
66192: LD_VAR 0 7
66196: PUSH
66197: FOR_TO
66198: IFFALSE 66245
// begin hc_class = 20 ;
66200: LD_ADDR_OWVAR 28
66204: PUSH
66205: LD_INT 20
66207: ST_TO_ADDR
// hc_gallery =  ;
66208: LD_ADDR_OWVAR 33
66212: PUSH
66213: LD_STRING 
66215: ST_TO_ADDR
// animal := CreateHuman ;
66216: LD_ADDR_VAR 0 12
66220: PUSH
66221: CALL_OW 44
66225: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66226: LD_VAR 0 12
66230: PPUSH
66231: LD_VAR 0 9
66235: PPUSH
66236: LD_INT 0
66238: PPUSH
66239: CALL 67936 0 3
// end ;
66243: GO 66197
66245: POP
66246: POP
// end ;
66247: LD_VAR 0 10
66251: RET
// export function WantHeal ( sci , unit ) ; begin
66252: LD_INT 0
66254: PPUSH
// if GetTaskList ( sci ) > 0 then
66255: LD_VAR 0 1
66259: PPUSH
66260: CALL_OW 437
66264: PUSH
66265: LD_INT 0
66267: GREATER
66268: IFFALSE 66338
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66270: LD_VAR 0 1
66274: PPUSH
66275: CALL_OW 437
66279: PUSH
66280: LD_INT 1
66282: ARRAY
66283: PUSH
66284: LD_INT 1
66286: ARRAY
66287: PUSH
66288: LD_STRING l
66290: EQUAL
66291: PUSH
66292: LD_VAR 0 1
66296: PPUSH
66297: CALL_OW 437
66301: PUSH
66302: LD_INT 1
66304: ARRAY
66305: PUSH
66306: LD_INT 4
66308: ARRAY
66309: PUSH
66310: LD_VAR 0 2
66314: EQUAL
66315: AND
66316: IFFALSE 66328
// result := true else
66318: LD_ADDR_VAR 0 3
66322: PUSH
66323: LD_INT 1
66325: ST_TO_ADDR
66326: GO 66336
// result := false ;
66328: LD_ADDR_VAR 0 3
66332: PUSH
66333: LD_INT 0
66335: ST_TO_ADDR
// end else
66336: GO 66346
// result := false ;
66338: LD_ADDR_VAR 0 3
66342: PUSH
66343: LD_INT 0
66345: ST_TO_ADDR
// end ;
66346: LD_VAR 0 3
66350: RET
// export function HealTarget ( sci ) ; begin
66351: LD_INT 0
66353: PPUSH
// if not sci then
66354: LD_VAR 0 1
66358: NOT
66359: IFFALSE 66363
// exit ;
66361: GO 66428
// result := 0 ;
66363: LD_ADDR_VAR 0 2
66367: PUSH
66368: LD_INT 0
66370: ST_TO_ADDR
// if GetTaskList ( sci ) then
66371: LD_VAR 0 1
66375: PPUSH
66376: CALL_OW 437
66380: IFFALSE 66428
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66382: LD_VAR 0 1
66386: PPUSH
66387: CALL_OW 437
66391: PUSH
66392: LD_INT 1
66394: ARRAY
66395: PUSH
66396: LD_INT 1
66398: ARRAY
66399: PUSH
66400: LD_STRING l
66402: EQUAL
66403: IFFALSE 66428
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66405: LD_ADDR_VAR 0 2
66409: PUSH
66410: LD_VAR 0 1
66414: PPUSH
66415: CALL_OW 437
66419: PUSH
66420: LD_INT 1
66422: ARRAY
66423: PUSH
66424: LD_INT 4
66426: ARRAY
66427: ST_TO_ADDR
// end ;
66428: LD_VAR 0 2
66432: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66433: LD_INT 0
66435: PPUSH
66436: PPUSH
66437: PPUSH
66438: PPUSH
// if not base_units then
66439: LD_VAR 0 1
66443: NOT
66444: IFFALSE 66448
// exit ;
66446: GO 66535
// result := false ;
66448: LD_ADDR_VAR 0 2
66452: PUSH
66453: LD_INT 0
66455: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66456: LD_ADDR_VAR 0 5
66460: PUSH
66461: LD_VAR 0 1
66465: PPUSH
66466: LD_INT 21
66468: PUSH
66469: LD_INT 3
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PPUSH
66476: CALL_OW 72
66480: ST_TO_ADDR
// if not tmp then
66481: LD_VAR 0 5
66485: NOT
66486: IFFALSE 66490
// exit ;
66488: GO 66535
// for i in tmp do
66490: LD_ADDR_VAR 0 3
66494: PUSH
66495: LD_VAR 0 5
66499: PUSH
66500: FOR_IN
66501: IFFALSE 66533
// begin result := EnemyInRange ( i , 22 ) ;
66503: LD_ADDR_VAR 0 2
66507: PUSH
66508: LD_VAR 0 3
66512: PPUSH
66513: LD_INT 22
66515: PPUSH
66516: CALL 64771 0 2
66520: ST_TO_ADDR
// if result then
66521: LD_VAR 0 2
66525: IFFALSE 66531
// exit ;
66527: POP
66528: POP
66529: GO 66535
// end ;
66531: GO 66500
66533: POP
66534: POP
// end ;
66535: LD_VAR 0 2
66539: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
66540: LD_INT 0
66542: PPUSH
66543: PPUSH
// if not units then
66544: LD_VAR 0 1
66548: NOT
66549: IFFALSE 66553
// exit ;
66551: GO 66623
// result := [ ] ;
66553: LD_ADDR_VAR 0 3
66557: PUSH
66558: EMPTY
66559: ST_TO_ADDR
// for i in units do
66560: LD_ADDR_VAR 0 4
66564: PUSH
66565: LD_VAR 0 1
66569: PUSH
66570: FOR_IN
66571: IFFALSE 66621
// if GetTag ( i ) = tag then
66573: LD_VAR 0 4
66577: PPUSH
66578: CALL_OW 110
66582: PUSH
66583: LD_VAR 0 2
66587: EQUAL
66588: IFFALSE 66619
// result := Replace ( result , result + 1 , i ) ;
66590: LD_ADDR_VAR 0 3
66594: PUSH
66595: LD_VAR 0 3
66599: PPUSH
66600: LD_VAR 0 3
66604: PUSH
66605: LD_INT 1
66607: PLUS
66608: PPUSH
66609: LD_VAR 0 4
66613: PPUSH
66614: CALL_OW 1
66618: ST_TO_ADDR
66619: GO 66570
66621: POP
66622: POP
// end ;
66623: LD_VAR 0 3
66627: RET
// export function IsDriver ( un ) ; begin
66628: LD_INT 0
66630: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66631: LD_ADDR_VAR 0 2
66635: PUSH
66636: LD_VAR 0 1
66640: PUSH
66641: LD_INT 55
66643: PUSH
66644: EMPTY
66645: LIST
66646: PPUSH
66647: CALL_OW 69
66651: IN
66652: ST_TO_ADDR
// end ;
66653: LD_VAR 0 2
66657: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66658: LD_INT 0
66660: PPUSH
66661: PPUSH
// list := [ ] ;
66662: LD_ADDR_VAR 0 5
66666: PUSH
66667: EMPTY
66668: ST_TO_ADDR
// case d of 0 :
66669: LD_VAR 0 3
66673: PUSH
66674: LD_INT 0
66676: DOUBLE
66677: EQUAL
66678: IFTRUE 66682
66680: GO 66815
66682: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66683: LD_ADDR_VAR 0 5
66687: PUSH
66688: LD_VAR 0 1
66692: PUSH
66693: LD_INT 4
66695: MINUS
66696: PUSH
66697: LD_VAR 0 2
66701: PUSH
66702: LD_INT 4
66704: MINUS
66705: PUSH
66706: LD_INT 2
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: LIST
66713: PUSH
66714: LD_VAR 0 1
66718: PUSH
66719: LD_INT 3
66721: MINUS
66722: PUSH
66723: LD_VAR 0 2
66727: PUSH
66728: LD_INT 1
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: LIST
66735: PUSH
66736: LD_VAR 0 1
66740: PUSH
66741: LD_INT 4
66743: PLUS
66744: PUSH
66745: LD_VAR 0 2
66749: PUSH
66750: LD_INT 4
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: LIST
66757: PUSH
66758: LD_VAR 0 1
66762: PUSH
66763: LD_INT 3
66765: PLUS
66766: PUSH
66767: LD_VAR 0 2
66771: PUSH
66772: LD_INT 3
66774: PLUS
66775: PUSH
66776: LD_INT 5
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: LIST
66783: PUSH
66784: LD_VAR 0 1
66788: PUSH
66789: LD_VAR 0 2
66793: PUSH
66794: LD_INT 4
66796: PLUS
66797: PUSH
66798: LD_INT 0
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: LIST
66805: PUSH
66806: EMPTY
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: ST_TO_ADDR
// end ; 1 :
66813: GO 67513
66815: LD_INT 1
66817: DOUBLE
66818: EQUAL
66819: IFTRUE 66823
66821: GO 66956
66823: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66824: LD_ADDR_VAR 0 5
66828: PUSH
66829: LD_VAR 0 1
66833: PUSH
66834: LD_VAR 0 2
66838: PUSH
66839: LD_INT 4
66841: MINUS
66842: PUSH
66843: LD_INT 3
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: LIST
66850: PUSH
66851: LD_VAR 0 1
66855: PUSH
66856: LD_INT 3
66858: MINUS
66859: PUSH
66860: LD_VAR 0 2
66864: PUSH
66865: LD_INT 3
66867: MINUS
66868: PUSH
66869: LD_INT 2
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: LIST
66876: PUSH
66877: LD_VAR 0 1
66881: PUSH
66882: LD_INT 4
66884: MINUS
66885: PUSH
66886: LD_VAR 0 2
66890: PUSH
66891: LD_INT 1
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: LIST
66898: PUSH
66899: LD_VAR 0 1
66903: PUSH
66904: LD_VAR 0 2
66908: PUSH
66909: LD_INT 3
66911: PLUS
66912: PUSH
66913: LD_INT 0
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: LIST
66920: PUSH
66921: LD_VAR 0 1
66925: PUSH
66926: LD_INT 4
66928: PLUS
66929: PUSH
66930: LD_VAR 0 2
66934: PUSH
66935: LD_INT 4
66937: PLUS
66938: PUSH
66939: LD_INT 5
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: LIST
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: ST_TO_ADDR
// end ; 2 :
66954: GO 67513
66956: LD_INT 2
66958: DOUBLE
66959: EQUAL
66960: IFTRUE 66964
66962: GO 67093
66964: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66965: LD_ADDR_VAR 0 5
66969: PUSH
66970: LD_VAR 0 1
66974: PUSH
66975: LD_VAR 0 2
66979: PUSH
66980: LD_INT 3
66982: MINUS
66983: PUSH
66984: LD_INT 3
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: LIST
66991: PUSH
66992: LD_VAR 0 1
66996: PUSH
66997: LD_INT 4
66999: PLUS
67000: PUSH
67001: LD_VAR 0 2
67005: PUSH
67006: LD_INT 4
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: LIST
67013: PUSH
67014: LD_VAR 0 1
67018: PUSH
67019: LD_VAR 0 2
67023: PUSH
67024: LD_INT 4
67026: PLUS
67027: PUSH
67028: LD_INT 0
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: LIST
67035: PUSH
67036: LD_VAR 0 1
67040: PUSH
67041: LD_INT 3
67043: MINUS
67044: PUSH
67045: LD_VAR 0 2
67049: PUSH
67050: LD_INT 1
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: LIST
67057: PUSH
67058: LD_VAR 0 1
67062: PUSH
67063: LD_INT 4
67065: MINUS
67066: PUSH
67067: LD_VAR 0 2
67071: PUSH
67072: LD_INT 4
67074: MINUS
67075: PUSH
67076: LD_INT 2
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: LIST
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: LIST
67090: ST_TO_ADDR
// end ; 3 :
67091: GO 67513
67093: LD_INT 3
67095: DOUBLE
67096: EQUAL
67097: IFTRUE 67101
67099: GO 67234
67101: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67102: LD_ADDR_VAR 0 5
67106: PUSH
67107: LD_VAR 0 1
67111: PUSH
67112: LD_INT 3
67114: PLUS
67115: PUSH
67116: LD_VAR 0 2
67120: PUSH
67121: LD_INT 4
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: LIST
67128: PUSH
67129: LD_VAR 0 1
67133: PUSH
67134: LD_INT 4
67136: PLUS
67137: PUSH
67138: LD_VAR 0 2
67142: PUSH
67143: LD_INT 4
67145: PLUS
67146: PUSH
67147: LD_INT 5
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: LIST
67154: PUSH
67155: LD_VAR 0 1
67159: PUSH
67160: LD_INT 4
67162: MINUS
67163: PUSH
67164: LD_VAR 0 2
67168: PUSH
67169: LD_INT 1
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: LIST
67176: PUSH
67177: LD_VAR 0 1
67181: PUSH
67182: LD_VAR 0 2
67186: PUSH
67187: LD_INT 4
67189: MINUS
67190: PUSH
67191: LD_INT 3
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: LIST
67198: PUSH
67199: LD_VAR 0 1
67203: PUSH
67204: LD_INT 3
67206: MINUS
67207: PUSH
67208: LD_VAR 0 2
67212: PUSH
67213: LD_INT 3
67215: MINUS
67216: PUSH
67217: LD_INT 2
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: LIST
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: LIST
67229: LIST
67230: LIST
67231: ST_TO_ADDR
// end ; 4 :
67232: GO 67513
67234: LD_INT 4
67236: DOUBLE
67237: EQUAL
67238: IFTRUE 67242
67240: GO 67375
67242: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67243: LD_ADDR_VAR 0 5
67247: PUSH
67248: LD_VAR 0 1
67252: PUSH
67253: LD_VAR 0 2
67257: PUSH
67258: LD_INT 4
67260: PLUS
67261: PUSH
67262: LD_INT 0
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: LIST
67269: PUSH
67270: LD_VAR 0 1
67274: PUSH
67275: LD_INT 3
67277: PLUS
67278: PUSH
67279: LD_VAR 0 2
67283: PUSH
67284: LD_INT 3
67286: PLUS
67287: PUSH
67288: LD_INT 5
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: LIST
67295: PUSH
67296: LD_VAR 0 1
67300: PUSH
67301: LD_INT 4
67303: PLUS
67304: PUSH
67305: LD_VAR 0 2
67309: PUSH
67310: LD_INT 4
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: LIST
67317: PUSH
67318: LD_VAR 0 1
67322: PUSH
67323: LD_VAR 0 2
67327: PUSH
67328: LD_INT 3
67330: MINUS
67331: PUSH
67332: LD_INT 3
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: LIST
67339: PUSH
67340: LD_VAR 0 1
67344: PUSH
67345: LD_INT 4
67347: MINUS
67348: PUSH
67349: LD_VAR 0 2
67353: PUSH
67354: LD_INT 4
67356: MINUS
67357: PUSH
67358: LD_INT 2
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: LIST
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: LIST
67370: LIST
67371: LIST
67372: ST_TO_ADDR
// end ; 5 :
67373: GO 67513
67375: LD_INT 5
67377: DOUBLE
67378: EQUAL
67379: IFTRUE 67383
67381: GO 67512
67383: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67384: LD_ADDR_VAR 0 5
67388: PUSH
67389: LD_VAR 0 1
67393: PUSH
67394: LD_INT 4
67396: MINUS
67397: PUSH
67398: LD_VAR 0 2
67402: PUSH
67403: LD_INT 1
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: LIST
67410: PUSH
67411: LD_VAR 0 1
67415: PUSH
67416: LD_VAR 0 2
67420: PUSH
67421: LD_INT 4
67423: MINUS
67424: PUSH
67425: LD_INT 3
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: LIST
67432: PUSH
67433: LD_VAR 0 1
67437: PUSH
67438: LD_INT 4
67440: PLUS
67441: PUSH
67442: LD_VAR 0 2
67446: PUSH
67447: LD_INT 4
67449: PLUS
67450: PUSH
67451: LD_INT 5
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: LIST
67458: PUSH
67459: LD_VAR 0 1
67463: PUSH
67464: LD_INT 3
67466: PLUS
67467: PUSH
67468: LD_VAR 0 2
67472: PUSH
67473: LD_INT 4
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: LIST
67480: PUSH
67481: LD_VAR 0 1
67485: PUSH
67486: LD_VAR 0 2
67490: PUSH
67491: LD_INT 3
67493: PLUS
67494: PUSH
67495: LD_INT 0
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: LIST
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: ST_TO_ADDR
// end ; end ;
67510: GO 67513
67512: POP
// result := list ;
67513: LD_ADDR_VAR 0 4
67517: PUSH
67518: LD_VAR 0 5
67522: ST_TO_ADDR
// end ;
67523: LD_VAR 0 4
67527: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67528: LD_INT 0
67530: PPUSH
67531: PPUSH
67532: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67533: LD_VAR 0 1
67537: NOT
67538: PUSH
67539: LD_VAR 0 2
67543: PUSH
67544: LD_INT 1
67546: PUSH
67547: LD_INT 2
67549: PUSH
67550: LD_INT 3
67552: PUSH
67553: LD_INT 4
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: LIST
67560: LIST
67561: IN
67562: NOT
67563: OR
67564: IFFALSE 67568
// exit ;
67566: GO 67660
// tmp := [ ] ;
67568: LD_ADDR_VAR 0 5
67572: PUSH
67573: EMPTY
67574: ST_TO_ADDR
// for i in units do
67575: LD_ADDR_VAR 0 4
67579: PUSH
67580: LD_VAR 0 1
67584: PUSH
67585: FOR_IN
67586: IFFALSE 67629
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
67588: LD_ADDR_VAR 0 5
67592: PUSH
67593: LD_VAR 0 5
67597: PPUSH
67598: LD_VAR 0 5
67602: PUSH
67603: LD_INT 1
67605: PLUS
67606: PPUSH
67607: LD_VAR 0 4
67611: PPUSH
67612: LD_VAR 0 2
67616: PPUSH
67617: CALL_OW 259
67621: PPUSH
67622: CALL_OW 2
67626: ST_TO_ADDR
67627: GO 67585
67629: POP
67630: POP
// if not tmp then
67631: LD_VAR 0 5
67635: NOT
67636: IFFALSE 67640
// exit ;
67638: GO 67660
// result := SortListByListDesc ( units , tmp ) ;
67640: LD_ADDR_VAR 0 3
67644: PUSH
67645: LD_VAR 0 1
67649: PPUSH
67650: LD_VAR 0 5
67654: PPUSH
67655: CALL_OW 77
67659: ST_TO_ADDR
// end ;
67660: LD_VAR 0 3
67664: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67665: LD_INT 0
67667: PPUSH
67668: PPUSH
67669: PPUSH
// result := false ;
67670: LD_ADDR_VAR 0 3
67674: PUSH
67675: LD_INT 0
67677: ST_TO_ADDR
// x := GetX ( building ) ;
67678: LD_ADDR_VAR 0 4
67682: PUSH
67683: LD_VAR 0 2
67687: PPUSH
67688: CALL_OW 250
67692: ST_TO_ADDR
// y := GetY ( building ) ;
67693: LD_ADDR_VAR 0 5
67697: PUSH
67698: LD_VAR 0 2
67702: PPUSH
67703: CALL_OW 251
67707: ST_TO_ADDR
// if not building or not x or not y then
67708: LD_VAR 0 2
67712: NOT
67713: PUSH
67714: LD_VAR 0 4
67718: NOT
67719: OR
67720: PUSH
67721: LD_VAR 0 5
67725: NOT
67726: OR
67727: IFFALSE 67731
// exit ;
67729: GO 67823
// if GetTaskList ( unit ) then
67731: LD_VAR 0 1
67735: PPUSH
67736: CALL_OW 437
67740: IFFALSE 67823
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67742: LD_STRING e
67744: PUSH
67745: LD_VAR 0 1
67749: PPUSH
67750: CALL_OW 437
67754: PUSH
67755: LD_INT 1
67757: ARRAY
67758: PUSH
67759: LD_INT 1
67761: ARRAY
67762: EQUAL
67763: PUSH
67764: LD_VAR 0 4
67768: PUSH
67769: LD_VAR 0 1
67773: PPUSH
67774: CALL_OW 437
67778: PUSH
67779: LD_INT 1
67781: ARRAY
67782: PUSH
67783: LD_INT 2
67785: ARRAY
67786: EQUAL
67787: AND
67788: PUSH
67789: LD_VAR 0 5
67793: PUSH
67794: LD_VAR 0 1
67798: PPUSH
67799: CALL_OW 437
67803: PUSH
67804: LD_INT 1
67806: ARRAY
67807: PUSH
67808: LD_INT 3
67810: ARRAY
67811: EQUAL
67812: AND
67813: IFFALSE 67823
// result := true end ;
67815: LD_ADDR_VAR 0 3
67819: PUSH
67820: LD_INT 1
67822: ST_TO_ADDR
// end ;
67823: LD_VAR 0 3
67827: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67828: LD_INT 0
67830: PPUSH
// result := false ;
67831: LD_ADDR_VAR 0 4
67835: PUSH
67836: LD_INT 0
67838: ST_TO_ADDR
// if GetTaskList ( unit ) then
67839: LD_VAR 0 1
67843: PPUSH
67844: CALL_OW 437
67848: IFFALSE 67931
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67850: LD_STRING M
67852: PUSH
67853: LD_VAR 0 1
67857: PPUSH
67858: CALL_OW 437
67862: PUSH
67863: LD_INT 1
67865: ARRAY
67866: PUSH
67867: LD_INT 1
67869: ARRAY
67870: EQUAL
67871: PUSH
67872: LD_VAR 0 2
67876: PUSH
67877: LD_VAR 0 1
67881: PPUSH
67882: CALL_OW 437
67886: PUSH
67887: LD_INT 1
67889: ARRAY
67890: PUSH
67891: LD_INT 2
67893: ARRAY
67894: EQUAL
67895: AND
67896: PUSH
67897: LD_VAR 0 3
67901: PUSH
67902: LD_VAR 0 1
67906: PPUSH
67907: CALL_OW 437
67911: PUSH
67912: LD_INT 1
67914: ARRAY
67915: PUSH
67916: LD_INT 3
67918: ARRAY
67919: EQUAL
67920: AND
67921: IFFALSE 67931
// result := true ;
67923: LD_ADDR_VAR 0 4
67927: PUSH
67928: LD_INT 1
67930: ST_TO_ADDR
// end ; end ;
67931: LD_VAR 0 4
67935: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67936: LD_INT 0
67938: PPUSH
67939: PPUSH
67940: PPUSH
67941: PPUSH
// if not unit or not area then
67942: LD_VAR 0 1
67946: NOT
67947: PUSH
67948: LD_VAR 0 2
67952: NOT
67953: OR
67954: IFFALSE 67958
// exit ;
67956: GO 68122
// tmp := AreaToList ( area , i ) ;
67958: LD_ADDR_VAR 0 6
67962: PUSH
67963: LD_VAR 0 2
67967: PPUSH
67968: LD_VAR 0 5
67972: PPUSH
67973: CALL_OW 517
67977: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67978: LD_ADDR_VAR 0 5
67982: PUSH
67983: DOUBLE
67984: LD_INT 1
67986: DEC
67987: ST_TO_ADDR
67988: LD_VAR 0 6
67992: PUSH
67993: LD_INT 1
67995: ARRAY
67996: PUSH
67997: FOR_TO
67998: IFFALSE 68120
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68000: LD_ADDR_VAR 0 7
68004: PUSH
68005: LD_VAR 0 6
68009: PUSH
68010: LD_INT 1
68012: ARRAY
68013: PUSH
68014: LD_VAR 0 5
68018: ARRAY
68019: PUSH
68020: LD_VAR 0 6
68024: PUSH
68025: LD_INT 2
68027: ARRAY
68028: PUSH
68029: LD_VAR 0 5
68033: ARRAY
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
68039: LD_VAR 0 7
68043: PUSH
68044: LD_INT 1
68046: ARRAY
68047: PPUSH
68048: LD_VAR 0 7
68052: PUSH
68053: LD_INT 2
68055: ARRAY
68056: PPUSH
68057: CALL_OW 428
68061: PUSH
68062: LD_INT 0
68064: EQUAL
68065: IFFALSE 68118
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68067: LD_VAR 0 1
68071: PPUSH
68072: LD_VAR 0 7
68076: PUSH
68077: LD_INT 1
68079: ARRAY
68080: PPUSH
68081: LD_VAR 0 7
68085: PUSH
68086: LD_INT 2
68088: ARRAY
68089: PPUSH
68090: LD_VAR 0 3
68094: PPUSH
68095: CALL_OW 48
// result := IsPlaced ( unit ) ;
68099: LD_ADDR_VAR 0 4
68103: PUSH
68104: LD_VAR 0 1
68108: PPUSH
68109: CALL_OW 305
68113: ST_TO_ADDR
// exit ;
68114: POP
68115: POP
68116: GO 68122
// end ; end ;
68118: GO 67997
68120: POP
68121: POP
// end ;
68122: LD_VAR 0 4
68126: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68127: LD_INT 0
68129: PPUSH
68130: PPUSH
68131: PPUSH
// if not side or side > 8 then
68132: LD_VAR 0 1
68136: NOT
68137: PUSH
68138: LD_VAR 0 1
68142: PUSH
68143: LD_INT 8
68145: GREATER
68146: OR
68147: IFFALSE 68151
// exit ;
68149: GO 68338
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68151: LD_ADDR_VAR 0 4
68155: PUSH
68156: LD_INT 22
68158: PUSH
68159: LD_VAR 0 1
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: LD_INT 21
68170: PUSH
68171: LD_INT 3
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PPUSH
68182: CALL_OW 69
68186: ST_TO_ADDR
// if not tmp then
68187: LD_VAR 0 4
68191: NOT
68192: IFFALSE 68196
// exit ;
68194: GO 68338
// enable_addtolog := true ;
68196: LD_ADDR_OWVAR 81
68200: PUSH
68201: LD_INT 1
68203: ST_TO_ADDR
// AddToLog ( [ ) ;
68204: LD_STRING [
68206: PPUSH
68207: CALL_OW 561
// for i in tmp do
68211: LD_ADDR_VAR 0 3
68215: PUSH
68216: LD_VAR 0 4
68220: PUSH
68221: FOR_IN
68222: IFFALSE 68329
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68224: LD_STRING [
68226: PUSH
68227: LD_VAR 0 3
68231: PPUSH
68232: CALL_OW 266
68236: STR
68237: PUSH
68238: LD_STRING , 
68240: STR
68241: PUSH
68242: LD_VAR 0 3
68246: PPUSH
68247: CALL_OW 250
68251: STR
68252: PUSH
68253: LD_STRING , 
68255: STR
68256: PUSH
68257: LD_VAR 0 3
68261: PPUSH
68262: CALL_OW 251
68266: STR
68267: PUSH
68268: LD_STRING , 
68270: STR
68271: PUSH
68272: LD_VAR 0 3
68276: PPUSH
68277: CALL_OW 254
68281: STR
68282: PUSH
68283: LD_STRING , 
68285: STR
68286: PUSH
68287: LD_VAR 0 3
68291: PPUSH
68292: LD_INT 1
68294: PPUSH
68295: CALL_OW 268
68299: STR
68300: PUSH
68301: LD_STRING , 
68303: STR
68304: PUSH
68305: LD_VAR 0 3
68309: PPUSH
68310: LD_INT 2
68312: PPUSH
68313: CALL_OW 268
68317: STR
68318: PUSH
68319: LD_STRING ],
68321: STR
68322: PPUSH
68323: CALL_OW 561
// end ;
68327: GO 68221
68329: POP
68330: POP
// AddToLog ( ]; ) ;
68331: LD_STRING ];
68333: PPUSH
68334: CALL_OW 561
// end ;
68338: LD_VAR 0 2
68342: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68343: LD_INT 0
68345: PPUSH
68346: PPUSH
68347: PPUSH
68348: PPUSH
68349: PPUSH
// if not area or not rate or not max then
68350: LD_VAR 0 1
68354: NOT
68355: PUSH
68356: LD_VAR 0 2
68360: NOT
68361: OR
68362: PUSH
68363: LD_VAR 0 4
68367: NOT
68368: OR
68369: IFFALSE 68373
// exit ;
68371: GO 68565
// while 1 do
68373: LD_INT 1
68375: IFFALSE 68565
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68377: LD_ADDR_VAR 0 9
68381: PUSH
68382: LD_VAR 0 1
68386: PPUSH
68387: LD_INT 1
68389: PPUSH
68390: CALL_OW 287
68394: PUSH
68395: LD_INT 10
68397: MUL
68398: ST_TO_ADDR
// r := rate / 10 ;
68399: LD_ADDR_VAR 0 7
68403: PUSH
68404: LD_VAR 0 2
68408: PUSH
68409: LD_INT 10
68411: DIVREAL
68412: ST_TO_ADDR
// time := 1 1$00 ;
68413: LD_ADDR_VAR 0 8
68417: PUSH
68418: LD_INT 2100
68420: ST_TO_ADDR
// if amount < min then
68421: LD_VAR 0 9
68425: PUSH
68426: LD_VAR 0 3
68430: LESS
68431: IFFALSE 68449
// r := r * 2 else
68433: LD_ADDR_VAR 0 7
68437: PUSH
68438: LD_VAR 0 7
68442: PUSH
68443: LD_INT 2
68445: MUL
68446: ST_TO_ADDR
68447: GO 68475
// if amount > max then
68449: LD_VAR 0 9
68453: PUSH
68454: LD_VAR 0 4
68458: GREATER
68459: IFFALSE 68475
// r := r / 2 ;
68461: LD_ADDR_VAR 0 7
68465: PUSH
68466: LD_VAR 0 7
68470: PUSH
68471: LD_INT 2
68473: DIVREAL
68474: ST_TO_ADDR
// time := time / r ;
68475: LD_ADDR_VAR 0 8
68479: PUSH
68480: LD_VAR 0 8
68484: PUSH
68485: LD_VAR 0 7
68489: DIVREAL
68490: ST_TO_ADDR
// if time < 0 then
68491: LD_VAR 0 8
68495: PUSH
68496: LD_INT 0
68498: LESS
68499: IFFALSE 68516
// time := time * - 1 ;
68501: LD_ADDR_VAR 0 8
68505: PUSH
68506: LD_VAR 0 8
68510: PUSH
68511: LD_INT 1
68513: NEG
68514: MUL
68515: ST_TO_ADDR
// wait ( time ) ;
68516: LD_VAR 0 8
68520: PPUSH
68521: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
68525: LD_INT 35
68527: PPUSH
68528: LD_INT 875
68530: PPUSH
68531: CALL_OW 12
68535: PPUSH
68536: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68540: LD_INT 1
68542: PPUSH
68543: LD_INT 5
68545: PPUSH
68546: CALL_OW 12
68550: PPUSH
68551: LD_VAR 0 1
68555: PPUSH
68556: LD_INT 1
68558: PPUSH
68559: CALL_OW 55
// end ;
68563: GO 68373
// end ;
68565: LD_VAR 0 5
68569: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68570: LD_INT 0
68572: PPUSH
68573: PPUSH
68574: PPUSH
68575: PPUSH
68576: PPUSH
68577: PPUSH
68578: PPUSH
68579: PPUSH
// if not turrets or not factories then
68580: LD_VAR 0 1
68584: NOT
68585: PUSH
68586: LD_VAR 0 2
68590: NOT
68591: OR
68592: IFFALSE 68596
// exit ;
68594: GO 68903
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68596: LD_ADDR_VAR 0 10
68600: PUSH
68601: LD_INT 5
68603: PUSH
68604: LD_INT 6
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: PUSH
68611: LD_INT 2
68613: PUSH
68614: LD_INT 4
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: LD_INT 3
68623: PUSH
68624: LD_INT 5
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 24
68638: PUSH
68639: LD_INT 25
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: LD_INT 23
68648: PUSH
68649: LD_INT 27
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: LD_INT 42
68662: PUSH
68663: LD_INT 43
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 44
68672: PUSH
68673: LD_INT 46
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: LD_INT 45
68682: PUSH
68683: LD_INT 47
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: LIST
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: LIST
68699: ST_TO_ADDR
// result := [ ] ;
68700: LD_ADDR_VAR 0 3
68704: PUSH
68705: EMPTY
68706: ST_TO_ADDR
// for i in turrets do
68707: LD_ADDR_VAR 0 4
68711: PUSH
68712: LD_VAR 0 1
68716: PUSH
68717: FOR_IN
68718: IFFALSE 68901
// begin nat := GetNation ( i ) ;
68720: LD_ADDR_VAR 0 7
68724: PUSH
68725: LD_VAR 0 4
68729: PPUSH
68730: CALL_OW 248
68734: ST_TO_ADDR
// weapon := 0 ;
68735: LD_ADDR_VAR 0 8
68739: PUSH
68740: LD_INT 0
68742: ST_TO_ADDR
// if not nat then
68743: LD_VAR 0 7
68747: NOT
68748: IFFALSE 68752
// continue ;
68750: GO 68717
// for j in list [ nat ] do
68752: LD_ADDR_VAR 0 5
68756: PUSH
68757: LD_VAR 0 10
68761: PUSH
68762: LD_VAR 0 7
68766: ARRAY
68767: PUSH
68768: FOR_IN
68769: IFFALSE 68810
// if GetBWeapon ( i ) = j [ 1 ] then
68771: LD_VAR 0 4
68775: PPUSH
68776: CALL_OW 269
68780: PUSH
68781: LD_VAR 0 5
68785: PUSH
68786: LD_INT 1
68788: ARRAY
68789: EQUAL
68790: IFFALSE 68808
// begin weapon := j [ 2 ] ;
68792: LD_ADDR_VAR 0 8
68796: PUSH
68797: LD_VAR 0 5
68801: PUSH
68802: LD_INT 2
68804: ARRAY
68805: ST_TO_ADDR
// break ;
68806: GO 68810
// end ;
68808: GO 68768
68810: POP
68811: POP
// if not weapon then
68812: LD_VAR 0 8
68816: NOT
68817: IFFALSE 68821
// continue ;
68819: GO 68717
// for k in factories do
68821: LD_ADDR_VAR 0 6
68825: PUSH
68826: LD_VAR 0 2
68830: PUSH
68831: FOR_IN
68832: IFFALSE 68897
// begin weapons := AvailableWeaponList ( k ) ;
68834: LD_ADDR_VAR 0 9
68838: PUSH
68839: LD_VAR 0 6
68843: PPUSH
68844: CALL_OW 478
68848: ST_TO_ADDR
// if not weapons then
68849: LD_VAR 0 9
68853: NOT
68854: IFFALSE 68858
// continue ;
68856: GO 68831
// if weapon in weapons then
68858: LD_VAR 0 8
68862: PUSH
68863: LD_VAR 0 9
68867: IN
68868: IFFALSE 68895
// begin result := [ i , weapon ] ;
68870: LD_ADDR_VAR 0 3
68874: PUSH
68875: LD_VAR 0 4
68879: PUSH
68880: LD_VAR 0 8
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: ST_TO_ADDR
// exit ;
68889: POP
68890: POP
68891: POP
68892: POP
68893: GO 68903
// end ; end ;
68895: GO 68831
68897: POP
68898: POP
// end ;
68899: GO 68717
68901: POP
68902: POP
// end ;
68903: LD_VAR 0 3
68907: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68908: LD_INT 0
68910: PPUSH
// if not side or side > 8 then
68911: LD_VAR 0 3
68915: NOT
68916: PUSH
68917: LD_VAR 0 3
68921: PUSH
68922: LD_INT 8
68924: GREATER
68925: OR
68926: IFFALSE 68930
// exit ;
68928: GO 68989
// if not range then
68930: LD_VAR 0 4
68934: NOT
68935: IFFALSE 68946
// range := - 12 ;
68937: LD_ADDR_VAR 0 4
68941: PUSH
68942: LD_INT 12
68944: NEG
68945: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68946: LD_VAR 0 1
68950: PPUSH
68951: LD_VAR 0 2
68955: PPUSH
68956: LD_VAR 0 3
68960: PPUSH
68961: LD_VAR 0 4
68965: PPUSH
68966: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68970: LD_VAR 0 1
68974: PPUSH
68975: LD_VAR 0 2
68979: PPUSH
68980: LD_VAR 0 3
68984: PPUSH
68985: CALL_OW 331
// end ;
68989: LD_VAR 0 5
68993: RET
// export function Video ( mode ) ; begin
68994: LD_INT 0
68996: PPUSH
// ingame_video = mode ;
68997: LD_ADDR_OWVAR 52
69001: PUSH
69002: LD_VAR 0 1
69006: ST_TO_ADDR
// interface_hidden = mode ;
69007: LD_ADDR_OWVAR 54
69011: PUSH
69012: LD_VAR 0 1
69016: ST_TO_ADDR
// end ;
69017: LD_VAR 0 2
69021: RET
// export function Join ( array , element ) ; begin
69022: LD_INT 0
69024: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69025: LD_ADDR_VAR 0 3
69029: PUSH
69030: LD_VAR 0 1
69034: PPUSH
69035: LD_VAR 0 1
69039: PUSH
69040: LD_INT 1
69042: PLUS
69043: PPUSH
69044: LD_VAR 0 2
69048: PPUSH
69049: CALL_OW 1
69053: ST_TO_ADDR
// end ;
69054: LD_VAR 0 3
69058: RET
// export function JoinUnion ( array , element ) ; begin
69059: LD_INT 0
69061: PPUSH
// result := array union element ;
69062: LD_ADDR_VAR 0 3
69066: PUSH
69067: LD_VAR 0 1
69071: PUSH
69072: LD_VAR 0 2
69076: UNION
69077: ST_TO_ADDR
// end ;
69078: LD_VAR 0 3
69082: RET
// export function GetBehemoths ( side ) ; begin
69083: LD_INT 0
69085: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
69086: LD_ADDR_VAR 0 2
69090: PUSH
69091: LD_INT 22
69093: PUSH
69094: LD_VAR 0 1
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: PUSH
69103: LD_INT 31
69105: PUSH
69106: LD_INT 25
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PPUSH
69117: CALL_OW 69
69121: ST_TO_ADDR
// end ;
69122: LD_VAR 0 2
69126: RET
// export function Shuffle ( array ) ; var i , index ; begin
69127: LD_INT 0
69129: PPUSH
69130: PPUSH
69131: PPUSH
// result := [ ] ;
69132: LD_ADDR_VAR 0 2
69136: PUSH
69137: EMPTY
69138: ST_TO_ADDR
// if not array then
69139: LD_VAR 0 1
69143: NOT
69144: IFFALSE 69148
// exit ;
69146: GO 69247
// Randomize ;
69148: CALL_OW 10
// for i = array downto 1 do
69152: LD_ADDR_VAR 0 3
69156: PUSH
69157: DOUBLE
69158: LD_VAR 0 1
69162: INC
69163: ST_TO_ADDR
69164: LD_INT 1
69166: PUSH
69167: FOR_DOWNTO
69168: IFFALSE 69245
// begin index := rand ( 1 , array ) ;
69170: LD_ADDR_VAR 0 4
69174: PUSH
69175: LD_INT 1
69177: PPUSH
69178: LD_VAR 0 1
69182: PPUSH
69183: CALL_OW 12
69187: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69188: LD_ADDR_VAR 0 2
69192: PUSH
69193: LD_VAR 0 2
69197: PPUSH
69198: LD_VAR 0 2
69202: PUSH
69203: LD_INT 1
69205: PLUS
69206: PPUSH
69207: LD_VAR 0 1
69211: PUSH
69212: LD_VAR 0 4
69216: ARRAY
69217: PPUSH
69218: CALL_OW 2
69222: ST_TO_ADDR
// array := Delete ( array , index ) ;
69223: LD_ADDR_VAR 0 1
69227: PUSH
69228: LD_VAR 0 1
69232: PPUSH
69233: LD_VAR 0 4
69237: PPUSH
69238: CALL_OW 3
69242: ST_TO_ADDR
// end ;
69243: GO 69167
69245: POP
69246: POP
// end ;
69247: LD_VAR 0 2
69251: RET
// export function GetBaseMaterials ( base ) ; begin
69252: LD_INT 0
69254: PPUSH
// result := [ 0 , 0 , 0 ] ;
69255: LD_ADDR_VAR 0 2
69259: PUSH
69260: LD_INT 0
69262: PUSH
69263: LD_INT 0
69265: PUSH
69266: LD_INT 0
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: LIST
69273: ST_TO_ADDR
// if not base then
69274: LD_VAR 0 1
69278: NOT
69279: IFFALSE 69283
// exit ;
69281: GO 69332
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69283: LD_ADDR_VAR 0 2
69287: PUSH
69288: LD_VAR 0 1
69292: PPUSH
69293: LD_INT 1
69295: PPUSH
69296: CALL_OW 275
69300: PUSH
69301: LD_VAR 0 1
69305: PPUSH
69306: LD_INT 2
69308: PPUSH
69309: CALL_OW 275
69313: PUSH
69314: LD_VAR 0 1
69318: PPUSH
69319: LD_INT 3
69321: PPUSH
69322: CALL_OW 275
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: LIST
69331: ST_TO_ADDR
// end ;
69332: LD_VAR 0 2
69336: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69337: LD_INT 0
69339: PPUSH
69340: PPUSH
// result := array ;
69341: LD_ADDR_VAR 0 3
69345: PUSH
69346: LD_VAR 0 1
69350: ST_TO_ADDR
// if size > 0 then
69351: LD_VAR 0 2
69355: PUSH
69356: LD_INT 0
69358: GREATER
69359: IFFALSE 69405
// for i := array downto size do
69361: LD_ADDR_VAR 0 4
69365: PUSH
69366: DOUBLE
69367: LD_VAR 0 1
69371: INC
69372: ST_TO_ADDR
69373: LD_VAR 0 2
69377: PUSH
69378: FOR_DOWNTO
69379: IFFALSE 69403
// result := Delete ( result , result ) ;
69381: LD_ADDR_VAR 0 3
69385: PUSH
69386: LD_VAR 0 3
69390: PPUSH
69391: LD_VAR 0 3
69395: PPUSH
69396: CALL_OW 3
69400: ST_TO_ADDR
69401: GO 69378
69403: POP
69404: POP
// end ;
69405: LD_VAR 0 3
69409: RET
// export function ComExit ( unit ) ; var tmp ; begin
69410: LD_INT 0
69412: PPUSH
69413: PPUSH
// if not IsInUnit ( unit ) then
69414: LD_VAR 0 1
69418: PPUSH
69419: CALL_OW 310
69423: NOT
69424: IFFALSE 69428
// exit ;
69426: GO 69488
// tmp := IsInUnit ( unit ) ;
69428: LD_ADDR_VAR 0 3
69432: PUSH
69433: LD_VAR 0 1
69437: PPUSH
69438: CALL_OW 310
69442: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69443: LD_VAR 0 3
69447: PPUSH
69448: CALL_OW 247
69452: PUSH
69453: LD_INT 2
69455: EQUAL
69456: IFFALSE 69469
// ComExitVehicle ( unit ) else
69458: LD_VAR 0 1
69462: PPUSH
69463: CALL_OW 121
69467: GO 69478
// ComExitBuilding ( unit ) ;
69469: LD_VAR 0 1
69473: PPUSH
69474: CALL_OW 122
// result := tmp ;
69478: LD_ADDR_VAR 0 2
69482: PUSH
69483: LD_VAR 0 3
69487: ST_TO_ADDR
// end ;
69488: LD_VAR 0 2
69492: RET
// export function ComExitAll ( units ) ; var i ; begin
69493: LD_INT 0
69495: PPUSH
69496: PPUSH
// if not units then
69497: LD_VAR 0 1
69501: NOT
69502: IFFALSE 69506
// exit ;
69504: GO 69532
// for i in units do
69506: LD_ADDR_VAR 0 3
69510: PUSH
69511: LD_VAR 0 1
69515: PUSH
69516: FOR_IN
69517: IFFALSE 69530
// ComExit ( i ) ;
69519: LD_VAR 0 3
69523: PPUSH
69524: CALL 69410 0 1
69528: GO 69516
69530: POP
69531: POP
// end ;
69532: LD_VAR 0 2
69536: RET
// export function ResetHc ; begin
69537: LD_INT 0
69539: PPUSH
// InitHc ;
69540: CALL_OW 19
// hc_importance := 0 ;
69544: LD_ADDR_OWVAR 32
69548: PUSH
69549: LD_INT 0
69551: ST_TO_ADDR
// end ;
69552: LD_VAR 0 1
69556: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69557: LD_INT 0
69559: PPUSH
69560: PPUSH
69561: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69562: LD_ADDR_VAR 0 6
69566: PUSH
69567: LD_VAR 0 1
69571: PUSH
69572: LD_VAR 0 3
69576: PLUS
69577: PUSH
69578: LD_INT 2
69580: DIV
69581: ST_TO_ADDR
// if _x < 0 then
69582: LD_VAR 0 6
69586: PUSH
69587: LD_INT 0
69589: LESS
69590: IFFALSE 69607
// _x := _x * - 1 ;
69592: LD_ADDR_VAR 0 6
69596: PUSH
69597: LD_VAR 0 6
69601: PUSH
69602: LD_INT 1
69604: NEG
69605: MUL
69606: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69607: LD_ADDR_VAR 0 7
69611: PUSH
69612: LD_VAR 0 2
69616: PUSH
69617: LD_VAR 0 4
69621: PLUS
69622: PUSH
69623: LD_INT 2
69625: DIV
69626: ST_TO_ADDR
// if _y < 0 then
69627: LD_VAR 0 7
69631: PUSH
69632: LD_INT 0
69634: LESS
69635: IFFALSE 69652
// _y := _y * - 1 ;
69637: LD_ADDR_VAR 0 7
69641: PUSH
69642: LD_VAR 0 7
69646: PUSH
69647: LD_INT 1
69649: NEG
69650: MUL
69651: ST_TO_ADDR
// result := [ _x , _y ] ;
69652: LD_ADDR_VAR 0 5
69656: PUSH
69657: LD_VAR 0 6
69661: PUSH
69662: LD_VAR 0 7
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: ST_TO_ADDR
// end ;
69671: LD_VAR 0 5
69675: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69676: LD_INT 0
69678: PPUSH
69679: PPUSH
69680: PPUSH
69681: PPUSH
// task := GetTaskList ( unit ) ;
69682: LD_ADDR_VAR 0 7
69686: PUSH
69687: LD_VAR 0 1
69691: PPUSH
69692: CALL_OW 437
69696: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69697: LD_VAR 0 7
69701: NOT
69702: PUSH
69703: LD_VAR 0 1
69707: PPUSH
69708: LD_VAR 0 2
69712: PPUSH
69713: CALL_OW 308
69717: NOT
69718: AND
69719: IFFALSE 69723
// exit ;
69721: GO 69841
// if IsInArea ( unit , area ) then
69723: LD_VAR 0 1
69727: PPUSH
69728: LD_VAR 0 2
69732: PPUSH
69733: CALL_OW 308
69737: IFFALSE 69755
// begin ComMoveToArea ( unit , goAway ) ;
69739: LD_VAR 0 1
69743: PPUSH
69744: LD_VAR 0 3
69748: PPUSH
69749: CALL_OW 113
// exit ;
69753: GO 69841
// end ; if task [ 1 ] [ 1 ] <> M then
69755: LD_VAR 0 7
69759: PUSH
69760: LD_INT 1
69762: ARRAY
69763: PUSH
69764: LD_INT 1
69766: ARRAY
69767: PUSH
69768: LD_STRING M
69770: NONEQUAL
69771: IFFALSE 69775
// exit ;
69773: GO 69841
// x := task [ 1 ] [ 2 ] ;
69775: LD_ADDR_VAR 0 5
69779: PUSH
69780: LD_VAR 0 7
69784: PUSH
69785: LD_INT 1
69787: ARRAY
69788: PUSH
69789: LD_INT 2
69791: ARRAY
69792: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69793: LD_ADDR_VAR 0 6
69797: PUSH
69798: LD_VAR 0 7
69802: PUSH
69803: LD_INT 1
69805: ARRAY
69806: PUSH
69807: LD_INT 3
69809: ARRAY
69810: ST_TO_ADDR
// if InArea ( x , y , area ) then
69811: LD_VAR 0 5
69815: PPUSH
69816: LD_VAR 0 6
69820: PPUSH
69821: LD_VAR 0 2
69825: PPUSH
69826: CALL_OW 309
69830: IFFALSE 69841
// ComStop ( unit ) ;
69832: LD_VAR 0 1
69836: PPUSH
69837: CALL_OW 141
// end ;
69841: LD_VAR 0 4
69845: RET
// export function Abs ( value ) ; begin
69846: LD_INT 0
69848: PPUSH
// result := value ;
69849: LD_ADDR_VAR 0 2
69853: PUSH
69854: LD_VAR 0 1
69858: ST_TO_ADDR
// if value < 0 then
69859: LD_VAR 0 1
69863: PUSH
69864: LD_INT 0
69866: LESS
69867: IFFALSE 69884
// result := value * - 1 ;
69869: LD_ADDR_VAR 0 2
69873: PUSH
69874: LD_VAR 0 1
69878: PUSH
69879: LD_INT 1
69881: NEG
69882: MUL
69883: ST_TO_ADDR
// end ;
69884: LD_VAR 0 2
69888: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69889: LD_INT 0
69891: PPUSH
69892: PPUSH
69893: PPUSH
69894: PPUSH
69895: PPUSH
69896: PPUSH
69897: PPUSH
69898: PPUSH
// if not unit or not building then
69899: LD_VAR 0 1
69903: NOT
69904: PUSH
69905: LD_VAR 0 2
69909: NOT
69910: OR
69911: IFFALSE 69915
// exit ;
69913: GO 70141
// x := GetX ( building ) ;
69915: LD_ADDR_VAR 0 4
69919: PUSH
69920: LD_VAR 0 2
69924: PPUSH
69925: CALL_OW 250
69929: ST_TO_ADDR
// y := GetY ( building ) ;
69930: LD_ADDR_VAR 0 6
69934: PUSH
69935: LD_VAR 0 2
69939: PPUSH
69940: CALL_OW 251
69944: ST_TO_ADDR
// d := GetDir ( building ) ;
69945: LD_ADDR_VAR 0 8
69949: PUSH
69950: LD_VAR 0 2
69954: PPUSH
69955: CALL_OW 254
69959: ST_TO_ADDR
// r := 4 ;
69960: LD_ADDR_VAR 0 9
69964: PUSH
69965: LD_INT 4
69967: ST_TO_ADDR
// for i := 1 to 5 do
69968: LD_ADDR_VAR 0 10
69972: PUSH
69973: DOUBLE
69974: LD_INT 1
69976: DEC
69977: ST_TO_ADDR
69978: LD_INT 5
69980: PUSH
69981: FOR_TO
69982: IFFALSE 70139
// begin _x := ShiftX ( x , d , r + i ) ;
69984: LD_ADDR_VAR 0 5
69988: PUSH
69989: LD_VAR 0 4
69993: PPUSH
69994: LD_VAR 0 8
69998: PPUSH
69999: LD_VAR 0 9
70003: PUSH
70004: LD_VAR 0 10
70008: PLUS
70009: PPUSH
70010: CALL_OW 272
70014: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70015: LD_ADDR_VAR 0 7
70019: PUSH
70020: LD_VAR 0 6
70024: PPUSH
70025: LD_VAR 0 8
70029: PPUSH
70030: LD_VAR 0 9
70034: PUSH
70035: LD_VAR 0 10
70039: PLUS
70040: PPUSH
70041: CALL_OW 273
70045: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70046: LD_VAR 0 5
70050: PPUSH
70051: LD_VAR 0 7
70055: PPUSH
70056: CALL_OW 488
70060: PUSH
70061: LD_VAR 0 5
70065: PPUSH
70066: LD_VAR 0 7
70070: PPUSH
70071: CALL_OW 428
70075: PPUSH
70076: CALL_OW 247
70080: PUSH
70081: LD_INT 3
70083: PUSH
70084: LD_INT 2
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: IN
70091: NOT
70092: AND
70093: IFFALSE 70137
// begin ComMoveXY ( unit , _x , _y ) ;
70095: LD_VAR 0 1
70099: PPUSH
70100: LD_VAR 0 5
70104: PPUSH
70105: LD_VAR 0 7
70109: PPUSH
70110: CALL_OW 111
// result := [ _x , _y ] ;
70114: LD_ADDR_VAR 0 3
70118: PUSH
70119: LD_VAR 0 5
70123: PUSH
70124: LD_VAR 0 7
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: ST_TO_ADDR
// exit ;
70133: POP
70134: POP
70135: GO 70141
// end ; end ;
70137: GO 69981
70139: POP
70140: POP
// end ;
70141: LD_VAR 0 3
70145: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70146: LD_INT 0
70148: PPUSH
70149: PPUSH
70150: PPUSH
// result := 0 ;
70151: LD_ADDR_VAR 0 3
70155: PUSH
70156: LD_INT 0
70158: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70159: LD_VAR 0 1
70163: PUSH
70164: LD_INT 0
70166: LESS
70167: PUSH
70168: LD_VAR 0 1
70172: PUSH
70173: LD_INT 8
70175: GREATER
70176: OR
70177: PUSH
70178: LD_VAR 0 2
70182: PUSH
70183: LD_INT 0
70185: LESS
70186: OR
70187: PUSH
70188: LD_VAR 0 2
70192: PUSH
70193: LD_INT 8
70195: GREATER
70196: OR
70197: IFFALSE 70201
// exit ;
70199: GO 70276
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70201: LD_ADDR_VAR 0 4
70205: PUSH
70206: LD_INT 22
70208: PUSH
70209: LD_VAR 0 2
70213: PUSH
70214: EMPTY
70215: LIST
70216: LIST
70217: PPUSH
70218: CALL_OW 69
70222: PUSH
70223: FOR_IN
70224: IFFALSE 70274
// begin un := UnitShoot ( i ) ;
70226: LD_ADDR_VAR 0 5
70230: PUSH
70231: LD_VAR 0 4
70235: PPUSH
70236: CALL_OW 504
70240: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70241: LD_VAR 0 5
70245: PPUSH
70246: CALL_OW 255
70250: PUSH
70251: LD_VAR 0 1
70255: EQUAL
70256: IFFALSE 70272
// begin result := un ;
70258: LD_ADDR_VAR 0 3
70262: PUSH
70263: LD_VAR 0 5
70267: ST_TO_ADDR
// exit ;
70268: POP
70269: POP
70270: GO 70276
// end ; end ;
70272: GO 70223
70274: POP
70275: POP
// end ;
70276: LD_VAR 0 3
70280: RET
// export function GetCargoBay ( units ) ; begin
70281: LD_INT 0
70283: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70284: LD_ADDR_VAR 0 2
70288: PUSH
70289: LD_VAR 0 1
70293: PPUSH
70294: LD_INT 2
70296: PUSH
70297: LD_INT 34
70299: PUSH
70300: LD_INT 12
70302: PUSH
70303: EMPTY
70304: LIST
70305: LIST
70306: PUSH
70307: LD_INT 34
70309: PUSH
70310: LD_INT 51
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: PUSH
70317: LD_INT 34
70319: PUSH
70320: LD_INT 32
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: PUSH
70327: LD_INT 34
70329: PUSH
70330: LD_EXP 45
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: PPUSH
70346: CALL_OW 72
70350: ST_TO_ADDR
// end ;
70351: LD_VAR 0 2
70355: RET
// export function Negate ( value ) ; begin
70356: LD_INT 0
70358: PPUSH
// result := not value ;
70359: LD_ADDR_VAR 0 2
70363: PUSH
70364: LD_VAR 0 1
70368: NOT
70369: ST_TO_ADDR
// end ;
70370: LD_VAR 0 2
70374: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
70375: LD_INT 0
70377: PPUSH
// if x1 = x2 then
70378: LD_VAR 0 1
70382: PUSH
70383: LD_VAR 0 3
70387: EQUAL
70388: IFFALSE 70422
// begin if y1 > y2 then
70390: LD_VAR 0 2
70394: PUSH
70395: LD_VAR 0 4
70399: GREATER
70400: IFFALSE 70412
// result := 0 else
70402: LD_ADDR_VAR 0 5
70406: PUSH
70407: LD_INT 0
70409: ST_TO_ADDR
70410: GO 70420
// result := 3 ;
70412: LD_ADDR_VAR 0 5
70416: PUSH
70417: LD_INT 3
70419: ST_TO_ADDR
// exit ;
70420: GO 70508
// end ; if y1 = y2 then
70422: LD_VAR 0 2
70426: PUSH
70427: LD_VAR 0 4
70431: EQUAL
70432: IFFALSE 70466
// begin if x1 > x2 then
70434: LD_VAR 0 1
70438: PUSH
70439: LD_VAR 0 3
70443: GREATER
70444: IFFALSE 70456
// result := 1 else
70446: LD_ADDR_VAR 0 5
70450: PUSH
70451: LD_INT 1
70453: ST_TO_ADDR
70454: GO 70464
// result := 4 ;
70456: LD_ADDR_VAR 0 5
70460: PUSH
70461: LD_INT 4
70463: ST_TO_ADDR
// exit ;
70464: GO 70508
// end ; if x1 > x2 and y1 > y2 then
70466: LD_VAR 0 1
70470: PUSH
70471: LD_VAR 0 3
70475: GREATER
70476: PUSH
70477: LD_VAR 0 2
70481: PUSH
70482: LD_VAR 0 4
70486: GREATER
70487: AND
70488: IFFALSE 70500
// result := 2 else
70490: LD_ADDR_VAR 0 5
70494: PUSH
70495: LD_INT 2
70497: ST_TO_ADDR
70498: GO 70508
// result := 5 ;
70500: LD_ADDR_VAR 0 5
70504: PUSH
70505: LD_INT 5
70507: ST_TO_ADDR
// end ;
70508: LD_VAR 0 5
70512: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70513: LD_INT 0
70515: PPUSH
70516: PPUSH
// if not driver or not IsInUnit ( driver ) then
70517: LD_VAR 0 1
70521: NOT
70522: PUSH
70523: LD_VAR 0 1
70527: PPUSH
70528: CALL_OW 310
70532: NOT
70533: OR
70534: IFFALSE 70538
// exit ;
70536: GO 70628
// vehicle := IsInUnit ( driver ) ;
70538: LD_ADDR_VAR 0 3
70542: PUSH
70543: LD_VAR 0 1
70547: PPUSH
70548: CALL_OW 310
70552: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70553: LD_VAR 0 1
70557: PPUSH
70558: LD_STRING \
70560: PUSH
70561: LD_INT 0
70563: PUSH
70564: LD_INT 0
70566: PUSH
70567: LD_INT 0
70569: PUSH
70570: LD_INT 0
70572: PUSH
70573: LD_INT 0
70575: PUSH
70576: LD_INT 0
70578: PUSH
70579: EMPTY
70580: LIST
70581: LIST
70582: LIST
70583: LIST
70584: LIST
70585: LIST
70586: LIST
70587: PUSH
70588: LD_STRING E
70590: PUSH
70591: LD_INT 0
70593: PUSH
70594: LD_INT 0
70596: PUSH
70597: LD_VAR 0 3
70601: PUSH
70602: LD_INT 0
70604: PUSH
70605: LD_INT 0
70607: PUSH
70608: LD_INT 0
70610: PUSH
70611: EMPTY
70612: LIST
70613: LIST
70614: LIST
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: PUSH
70620: EMPTY
70621: LIST
70622: LIST
70623: PPUSH
70624: CALL_OW 446
// end ;
70628: LD_VAR 0 2
70632: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70633: LD_INT 0
70635: PPUSH
70636: PPUSH
// if not driver or not IsInUnit ( driver ) then
70637: LD_VAR 0 1
70641: NOT
70642: PUSH
70643: LD_VAR 0 1
70647: PPUSH
70648: CALL_OW 310
70652: NOT
70653: OR
70654: IFFALSE 70658
// exit ;
70656: GO 70748
// vehicle := IsInUnit ( driver ) ;
70658: LD_ADDR_VAR 0 3
70662: PUSH
70663: LD_VAR 0 1
70667: PPUSH
70668: CALL_OW 310
70672: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70673: LD_VAR 0 1
70677: PPUSH
70678: LD_STRING \
70680: PUSH
70681: LD_INT 0
70683: PUSH
70684: LD_INT 0
70686: PUSH
70687: LD_INT 0
70689: PUSH
70690: LD_INT 0
70692: PUSH
70693: LD_INT 0
70695: PUSH
70696: LD_INT 0
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: LIST
70703: LIST
70704: LIST
70705: LIST
70706: LIST
70707: PUSH
70708: LD_STRING E
70710: PUSH
70711: LD_INT 0
70713: PUSH
70714: LD_INT 0
70716: PUSH
70717: LD_VAR 0 3
70721: PUSH
70722: LD_INT 0
70724: PUSH
70725: LD_INT 0
70727: PUSH
70728: LD_INT 0
70730: PUSH
70731: EMPTY
70732: LIST
70733: LIST
70734: LIST
70735: LIST
70736: LIST
70737: LIST
70738: LIST
70739: PUSH
70740: EMPTY
70741: LIST
70742: LIST
70743: PPUSH
70744: CALL_OW 447
// end ;
70748: LD_VAR 0 2
70752: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70753: LD_INT 0
70755: PPUSH
70756: PPUSH
70757: PPUSH
// tmp := [ ] ;
70758: LD_ADDR_VAR 0 5
70762: PUSH
70763: EMPTY
70764: ST_TO_ADDR
// for i in units do
70765: LD_ADDR_VAR 0 4
70769: PUSH
70770: LD_VAR 0 1
70774: PUSH
70775: FOR_IN
70776: IFFALSE 70814
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70778: LD_ADDR_VAR 0 5
70782: PUSH
70783: LD_VAR 0 5
70787: PPUSH
70788: LD_VAR 0 5
70792: PUSH
70793: LD_INT 1
70795: PLUS
70796: PPUSH
70797: LD_VAR 0 4
70801: PPUSH
70802: CALL_OW 256
70806: PPUSH
70807: CALL_OW 2
70811: ST_TO_ADDR
70812: GO 70775
70814: POP
70815: POP
// if not tmp then
70816: LD_VAR 0 5
70820: NOT
70821: IFFALSE 70825
// exit ;
70823: GO 70873
// if asc then
70825: LD_VAR 0 2
70829: IFFALSE 70853
// result := SortListByListAsc ( units , tmp ) else
70831: LD_ADDR_VAR 0 3
70835: PUSH
70836: LD_VAR 0 1
70840: PPUSH
70841: LD_VAR 0 5
70845: PPUSH
70846: CALL_OW 76
70850: ST_TO_ADDR
70851: GO 70873
// result := SortListByListDesc ( units , tmp ) ;
70853: LD_ADDR_VAR 0 3
70857: PUSH
70858: LD_VAR 0 1
70862: PPUSH
70863: LD_VAR 0 5
70867: PPUSH
70868: CALL_OW 77
70872: ST_TO_ADDR
// end ;
70873: LD_VAR 0 3
70877: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70878: LD_INT 0
70880: PPUSH
70881: PPUSH
// task := GetTaskList ( mech ) ;
70882: LD_ADDR_VAR 0 4
70886: PUSH
70887: LD_VAR 0 1
70891: PPUSH
70892: CALL_OW 437
70896: ST_TO_ADDR
// if not task then
70897: LD_VAR 0 4
70901: NOT
70902: IFFALSE 70906
// exit ;
70904: GO 70948
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70906: LD_ADDR_VAR 0 3
70910: PUSH
70911: LD_VAR 0 4
70915: PUSH
70916: LD_INT 1
70918: ARRAY
70919: PUSH
70920: LD_INT 1
70922: ARRAY
70923: PUSH
70924: LD_STRING r
70926: EQUAL
70927: PUSH
70928: LD_VAR 0 4
70932: PUSH
70933: LD_INT 1
70935: ARRAY
70936: PUSH
70937: LD_INT 4
70939: ARRAY
70940: PUSH
70941: LD_VAR 0 2
70945: EQUAL
70946: AND
70947: ST_TO_ADDR
// end ;
70948: LD_VAR 0 3
70952: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70953: LD_INT 0
70955: PPUSH
// SetDir ( unit , d ) ;
70956: LD_VAR 0 1
70960: PPUSH
70961: LD_VAR 0 4
70965: PPUSH
70966: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70970: LD_VAR 0 1
70974: PPUSH
70975: LD_VAR 0 2
70979: PPUSH
70980: LD_VAR 0 3
70984: PPUSH
70985: LD_VAR 0 5
70989: PPUSH
70990: CALL_OW 48
// end ;
70994: LD_VAR 0 6
70998: RET
// export function ToNaturalNumber ( number ) ; begin
70999: LD_INT 0
71001: PPUSH
// result := number div 1 ;
71002: LD_ADDR_VAR 0 2
71006: PUSH
71007: LD_VAR 0 1
71011: PUSH
71012: LD_INT 1
71014: DIV
71015: ST_TO_ADDR
// if number < 0 then
71016: LD_VAR 0 1
71020: PUSH
71021: LD_INT 0
71023: LESS
71024: IFFALSE 71034
// result := 0 ;
71026: LD_ADDR_VAR 0 2
71030: PUSH
71031: LD_INT 0
71033: ST_TO_ADDR
// end ;
71034: LD_VAR 0 2
71038: RET
// export function SortByClass ( units , class ) ; var un ; begin
71039: LD_INT 0
71041: PPUSH
71042: PPUSH
// if not units or not class then
71043: LD_VAR 0 1
71047: NOT
71048: PUSH
71049: LD_VAR 0 2
71053: NOT
71054: OR
71055: IFFALSE 71059
// exit ;
71057: GO 71154
// result := [ ] ;
71059: LD_ADDR_VAR 0 3
71063: PUSH
71064: EMPTY
71065: ST_TO_ADDR
// for un in units do
71066: LD_ADDR_VAR 0 4
71070: PUSH
71071: LD_VAR 0 1
71075: PUSH
71076: FOR_IN
71077: IFFALSE 71152
// if GetClass ( un ) = class then
71079: LD_VAR 0 4
71083: PPUSH
71084: CALL_OW 257
71088: PUSH
71089: LD_VAR 0 2
71093: EQUAL
71094: IFFALSE 71121
// result := Insert ( result , 1 , un ) else
71096: LD_ADDR_VAR 0 3
71100: PUSH
71101: LD_VAR 0 3
71105: PPUSH
71106: LD_INT 1
71108: PPUSH
71109: LD_VAR 0 4
71113: PPUSH
71114: CALL_OW 2
71118: ST_TO_ADDR
71119: GO 71150
// result := Replace ( result , result + 1 , un ) ;
71121: LD_ADDR_VAR 0 3
71125: PUSH
71126: LD_VAR 0 3
71130: PPUSH
71131: LD_VAR 0 3
71135: PUSH
71136: LD_INT 1
71138: PLUS
71139: PPUSH
71140: LD_VAR 0 4
71144: PPUSH
71145: CALL_OW 1
71149: ST_TO_ADDR
71150: GO 71076
71152: POP
71153: POP
// end ;
71154: LD_VAR 0 3
71158: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71159: LD_INT 0
71161: PPUSH
71162: PPUSH
71163: PPUSH
71164: PPUSH
71165: PPUSH
71166: PPUSH
71167: PPUSH
// result := [ ] ;
71168: LD_ADDR_VAR 0 4
71172: PUSH
71173: EMPTY
71174: ST_TO_ADDR
// if x - r < 0 then
71175: LD_VAR 0 1
71179: PUSH
71180: LD_VAR 0 3
71184: MINUS
71185: PUSH
71186: LD_INT 0
71188: LESS
71189: IFFALSE 71201
// min_x := 0 else
71191: LD_ADDR_VAR 0 8
71195: PUSH
71196: LD_INT 0
71198: ST_TO_ADDR
71199: GO 71217
// min_x := x - r ;
71201: LD_ADDR_VAR 0 8
71205: PUSH
71206: LD_VAR 0 1
71210: PUSH
71211: LD_VAR 0 3
71215: MINUS
71216: ST_TO_ADDR
// if y - r < 0 then
71217: LD_VAR 0 2
71221: PUSH
71222: LD_VAR 0 3
71226: MINUS
71227: PUSH
71228: LD_INT 0
71230: LESS
71231: IFFALSE 71243
// min_y := 0 else
71233: LD_ADDR_VAR 0 7
71237: PUSH
71238: LD_INT 0
71240: ST_TO_ADDR
71241: GO 71259
// min_y := y - r ;
71243: LD_ADDR_VAR 0 7
71247: PUSH
71248: LD_VAR 0 2
71252: PUSH
71253: LD_VAR 0 3
71257: MINUS
71258: ST_TO_ADDR
// max_x := x + r ;
71259: LD_ADDR_VAR 0 9
71263: PUSH
71264: LD_VAR 0 1
71268: PUSH
71269: LD_VAR 0 3
71273: PLUS
71274: ST_TO_ADDR
// max_y := y + r ;
71275: LD_ADDR_VAR 0 10
71279: PUSH
71280: LD_VAR 0 2
71284: PUSH
71285: LD_VAR 0 3
71289: PLUS
71290: ST_TO_ADDR
// for _x = min_x to max_x do
71291: LD_ADDR_VAR 0 5
71295: PUSH
71296: DOUBLE
71297: LD_VAR 0 8
71301: DEC
71302: ST_TO_ADDR
71303: LD_VAR 0 9
71307: PUSH
71308: FOR_TO
71309: IFFALSE 71410
// for _y = min_y to max_y do
71311: LD_ADDR_VAR 0 6
71315: PUSH
71316: DOUBLE
71317: LD_VAR 0 7
71321: DEC
71322: ST_TO_ADDR
71323: LD_VAR 0 10
71327: PUSH
71328: FOR_TO
71329: IFFALSE 71406
// begin if not ValidHex ( _x , _y ) then
71331: LD_VAR 0 5
71335: PPUSH
71336: LD_VAR 0 6
71340: PPUSH
71341: CALL_OW 488
71345: NOT
71346: IFFALSE 71350
// continue ;
71348: GO 71328
// if GetResourceTypeXY ( _x , _y ) then
71350: LD_VAR 0 5
71354: PPUSH
71355: LD_VAR 0 6
71359: PPUSH
71360: CALL_OW 283
71364: IFFALSE 71404
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71366: LD_ADDR_VAR 0 4
71370: PUSH
71371: LD_VAR 0 4
71375: PPUSH
71376: LD_VAR 0 4
71380: PUSH
71381: LD_INT 1
71383: PLUS
71384: PPUSH
71385: LD_VAR 0 5
71389: PUSH
71390: LD_VAR 0 6
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: PPUSH
71399: CALL_OW 1
71403: ST_TO_ADDR
// end ;
71404: GO 71328
71406: POP
71407: POP
71408: GO 71308
71410: POP
71411: POP
// end ;
71412: LD_VAR 0 4
71416: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
71417: LD_INT 0
71419: PPUSH
71420: PPUSH
71421: PPUSH
71422: PPUSH
71423: PPUSH
71424: PPUSH
// if not units then
71425: LD_VAR 0 1
71429: NOT
71430: IFFALSE 71434
// exit ;
71432: GO 71835
// result := UnitFilter ( units , [ f_ok ] ) ;
71434: LD_ADDR_VAR 0 3
71438: PUSH
71439: LD_VAR 0 1
71443: PPUSH
71444: LD_INT 50
71446: PUSH
71447: EMPTY
71448: LIST
71449: PPUSH
71450: CALL_OW 72
71454: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71455: LD_ADDR_VAR 0 7
71459: PUSH
71460: LD_VAR 0 1
71464: PUSH
71465: LD_INT 1
71467: ARRAY
71468: PPUSH
71469: CALL_OW 255
71473: ST_TO_ADDR
// if not result then
71474: LD_VAR 0 3
71478: NOT
71479: IFFALSE 71483
// exit ;
71481: GO 71835
// for i in result do
71483: LD_ADDR_VAR 0 4
71487: PUSH
71488: LD_VAR 0 3
71492: PUSH
71493: FOR_IN
71494: IFFALSE 71833
// begin tag := GetTag ( i ) + 1 ;
71496: LD_ADDR_VAR 0 8
71500: PUSH
71501: LD_VAR 0 4
71505: PPUSH
71506: CALL_OW 110
71510: PUSH
71511: LD_INT 1
71513: PLUS
71514: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71515: LD_ADDR_VAR 0 6
71519: PUSH
71520: LD_VAR 0 4
71524: PPUSH
71525: CALL_OW 250
71529: PPUSH
71530: LD_VAR 0 4
71534: PPUSH
71535: CALL_OW 251
71539: PPUSH
71540: LD_INT 6
71542: PPUSH
71543: CALL 71159 0 3
71547: ST_TO_ADDR
// if cr then
71548: LD_VAR 0 6
71552: IFFALSE 71591
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71554: LD_VAR 0 4
71558: PPUSH
71559: LD_VAR 0 6
71563: PUSH
71564: LD_INT 1
71566: ARRAY
71567: PUSH
71568: LD_INT 1
71570: ARRAY
71571: PPUSH
71572: LD_VAR 0 6
71576: PUSH
71577: LD_INT 1
71579: ARRAY
71580: PUSH
71581: LD_INT 2
71583: ARRAY
71584: PPUSH
71585: CALL_OW 116
71589: GO 71831
// if path > tag then
71591: LD_VAR 0 2
71595: PUSH
71596: LD_VAR 0 8
71600: GREATER
71601: IFFALSE 71779
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
71603: LD_ADDR_VAR 0 5
71607: PUSH
71608: LD_INT 81
71610: PUSH
71611: LD_VAR 0 7
71615: PUSH
71616: EMPTY
71617: LIST
71618: LIST
71619: PUSH
71620: LD_INT 91
71622: PUSH
71623: LD_VAR 0 4
71627: PUSH
71628: LD_INT 12
71630: PUSH
71631: EMPTY
71632: LIST
71633: LIST
71634: LIST
71635: PUSH
71636: EMPTY
71637: LIST
71638: LIST
71639: PPUSH
71640: CALL_OW 69
71644: ST_TO_ADDR
// if enemy then
71645: LD_VAR 0 5
71649: IFFALSE 71677
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71651: LD_VAR 0 4
71655: PPUSH
71656: LD_VAR 0 5
71660: PPUSH
71661: LD_VAR 0 4
71665: PPUSH
71666: CALL_OW 74
71670: PPUSH
71671: CALL_OW 115
71675: GO 71777
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71677: LD_VAR 0 4
71681: PPUSH
71682: LD_VAR 0 2
71686: PUSH
71687: LD_VAR 0 8
71691: ARRAY
71692: PUSH
71693: LD_INT 1
71695: ARRAY
71696: PPUSH
71697: LD_VAR 0 2
71701: PUSH
71702: LD_VAR 0 8
71706: ARRAY
71707: PUSH
71708: LD_INT 2
71710: ARRAY
71711: PPUSH
71712: CALL_OW 297
71716: PUSH
71717: LD_INT 6
71719: GREATER
71720: IFFALSE 71763
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71722: LD_VAR 0 4
71726: PPUSH
71727: LD_VAR 0 2
71731: PUSH
71732: LD_VAR 0 8
71736: ARRAY
71737: PUSH
71738: LD_INT 1
71740: ARRAY
71741: PPUSH
71742: LD_VAR 0 2
71746: PUSH
71747: LD_VAR 0 8
71751: ARRAY
71752: PUSH
71753: LD_INT 2
71755: ARRAY
71756: PPUSH
71757: CALL_OW 114
71761: GO 71777
// SetTag ( i , tag ) ;
71763: LD_VAR 0 4
71767: PPUSH
71768: LD_VAR 0 8
71772: PPUSH
71773: CALL_OW 109
// end else
71777: GO 71831
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71779: LD_ADDR_VAR 0 5
71783: PUSH
71784: LD_INT 81
71786: PUSH
71787: LD_VAR 0 7
71791: PUSH
71792: EMPTY
71793: LIST
71794: LIST
71795: PPUSH
71796: CALL_OW 69
71800: ST_TO_ADDR
// if enemy then
71801: LD_VAR 0 5
71805: IFFALSE 71831
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71807: LD_VAR 0 4
71811: PPUSH
71812: LD_VAR 0 5
71816: PPUSH
71817: LD_VAR 0 4
71821: PPUSH
71822: CALL_OW 74
71826: PPUSH
71827: CALL_OW 115
// end ; end ;
71831: GO 71493
71833: POP
71834: POP
// end ; end_of_file
71835: LD_VAR 0 3
71839: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71840: LD_VAR 0 1
71844: PUSH
71845: LD_INT 200
71847: DOUBLE
71848: GREATEREQUAL
71849: IFFALSE 71857
71851: LD_INT 299
71853: DOUBLE
71854: LESSEQUAL
71855: IFTRUE 71859
71857: GO 71891
71859: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71860: LD_VAR 0 1
71864: PPUSH
71865: LD_VAR 0 2
71869: PPUSH
71870: LD_VAR 0 3
71874: PPUSH
71875: LD_VAR 0 4
71879: PPUSH
71880: LD_VAR 0 5
71884: PPUSH
71885: CALL 14617 0 5
71889: GO 71968
71891: LD_INT 300
71893: DOUBLE
71894: GREATEREQUAL
71895: IFFALSE 71903
71897: LD_INT 399
71899: DOUBLE
71900: LESSEQUAL
71901: IFTRUE 71905
71903: GO 71967
71905: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71906: LD_VAR 0 1
71910: PPUSH
71911: LD_VAR 0 2
71915: PPUSH
71916: LD_VAR 0 3
71920: PPUSH
71921: LD_VAR 0 4
71925: PPUSH
71926: LD_VAR 0 5
71930: PPUSH
71931: LD_VAR 0 6
71935: PPUSH
71936: LD_VAR 0 7
71940: PPUSH
71941: LD_VAR 0 8
71945: PPUSH
71946: LD_VAR 0 9
71950: PPUSH
71951: LD_VAR 0 10
71955: PPUSH
71956: LD_VAR 0 11
71960: PPUSH
71961: CALL 30305 0 11
71965: GO 71968
71967: POP
// end ;
71968: PPOPN 11
71970: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71971: LD_VAR 0 1
71975: PPUSH
71976: LD_VAR 0 2
71980: PPUSH
71981: LD_VAR 0 3
71985: PPUSH
71986: LD_VAR 0 4
71990: PPUSH
71991: LD_VAR 0 5
71995: PPUSH
71996: CALL 14609 0 5
// end ; end_of_file
72000: PPOPN 5
72002: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72003: LD_VAR 0 1
72007: PPUSH
72008: LD_VAR 0 2
72012: PPUSH
72013: LD_VAR 0 3
72017: PPUSH
72018: LD_VAR 0 4
72022: PPUSH
72023: LD_VAR 0 5
72027: PPUSH
72028: LD_VAR 0 6
72032: PPUSH
72033: CALL 18500 0 6
// end ;
72037: PPOPN 6
72039: END
