// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 758 0 2
// PrepareArabian ;
  31: CALL 1379 0 0
// PrepareRussian ;
  35: CALL 3030 0 0
// Action ;
  39: CALL 8466 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: LD_INT 7
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 214: LD_ADDR_EXP 14
 218: PUSH
 219: LD_STRING 04_1_RuLabCaptured
 221: PPUSH
 222: LD_INT 0
 224: PPUSH
 225: CALL_OW 30
 229: ST_TO_ADDR
// captureCounter := 0 ;
 230: LD_ADDR_EXP 18
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 238: LD_ADDR_EXP 19
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// flamethrowerBuilt := false ;
 246: LD_ADDR_EXP 20
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// solar_recharge_percent := 0 ;
 254: LD_ADDR_OWVAR 79
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// solar_recharge_amount := 0 ;
 262: LD_ADDR_OWVAR 82
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// end ;
 270: LD_VAR 0 1
 274: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 275: LD_EXP 10
 279: NOT
 280: IFFALSE 289
 282: PUSH
 283: LD_EXP 9
 287: NOT
 288: AND
 289: IFFALSE 298
 291: PUSH
 292: LD_EXP 39
 296: NOT
 297: AND
 298: IFFALSE 307
 300: PUSH
 301: LD_EXP 40
 305: NOT
 306: AND
 307: IFFALSE 319
 309: GO 311
 311: DISABLE
// SetAchievement ( ACH_EXT ) ;
 312: LD_STRING ACH_EXT
 314: PPUSH
 315: CALL_OW 543
 319: END
// every 0 0$1 trigger captureCounter >= 6 do
 320: LD_EXP 18
 324: PUSH
 325: LD_INT 6
 327: GREATEREQUAL
 328: IFFALSE 340
 330: GO 332
 332: DISABLE
// SetAchievement ( ACH_KEY ) ;
 333: LD_STRING ACH_KEY
 335: PPUSH
 336: CALL_OW 543
 340: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 341: LD_EXP 19
 345: PUSH
 346: LD_INT 3
 348: GREATEREQUAL
 349: IFFALSE 361
 351: GO 353
 353: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 354: LD_STRING ACH_CHEM
 356: PPUSH
 357: CALL_OW 543
 361: END
// every 0 0$1 trigger debug do var i ;
 362: LD_EXP 1
 366: IFFALSE 450
 368: GO 370
 370: DISABLE
 371: LD_INT 0
 373: PPUSH
// begin enable ;
 374: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 375: LD_ADDR_VAR 0 1
 379: PUSH
 380: LD_INT 22
 382: PUSH
 383: LD_INT 2
 385: PUSH
 386: EMPTY
 387: LIST
 388: LIST
 389: PUSH
 390: LD_INT 3
 392: PUSH
 393: LD_INT 21
 395: PUSH
 396: LD_INT 3
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: PPUSH
 411: CALL_OW 69
 415: PUSH
 416: FOR_IN
 417: IFFALSE 448
// if GetLives ( i ) < 1000 then
 419: LD_VAR 0 1
 423: PPUSH
 424: CALL_OW 256
 428: PUSH
 429: LD_INT 1000
 431: LESS
 432: IFFALSE 446
// SetLives ( i , 1000 ) ;
 434: LD_VAR 0 1
 438: PPUSH
 439: LD_INT 1000
 441: PPUSH
 442: CALL_OW 234
 446: GO 416
 448: POP
 449: POP
// end ; end_of_file
 450: PPOPN 1
 452: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 453: LD_INT 0
 455: PPUSH
// uc_side := side ;
 456: LD_ADDR_OWVAR 20
 460: PUSH
 461: LD_VAR 0 1
 465: ST_TO_ADDR
// uc_nation := nation ;
 466: LD_ADDR_OWVAR 21
 470: PUSH
 471: LD_VAR 0 2
 475: ST_TO_ADDR
// vc_chassis := chassis ;
 476: LD_ADDR_OWVAR 37
 480: PUSH
 481: LD_VAR 0 3
 485: ST_TO_ADDR
// vc_engine := engine ;
 486: LD_ADDR_OWVAR 39
 490: PUSH
 491: LD_VAR 0 4
 495: ST_TO_ADDR
// vc_control := control ;
 496: LD_ADDR_OWVAR 38
 500: PUSH
 501: LD_VAR 0 5
 505: ST_TO_ADDR
// vc_weapon := weapon ;
 506: LD_ADDR_OWVAR 40
 510: PUSH
 511: LD_VAR 0 6
 515: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 516: LD_ADDR_OWVAR 41
 520: PUSH
 521: LD_VAR 0 7
 525: ST_TO_ADDR
// result := CreateVehicle ;
 526: LD_ADDR_VAR 0 8
 530: PUSH
 531: CALL_OW 45
 535: ST_TO_ADDR
// end ;
 536: LD_VAR 0 8
 540: RET
// export function SayX ( units , ident ) ; var i ; begin
 541: LD_INT 0
 543: PPUSH
 544: PPUSH
// result := false ;
 545: LD_ADDR_VAR 0 3
 549: PUSH
 550: LD_INT 0
 552: ST_TO_ADDR
// if not units then
 553: LD_VAR 0 1
 557: NOT
 558: IFFALSE 562
// exit ;
 560: GO 616
// for i in units do
 562: LD_ADDR_VAR 0 4
 566: PUSH
 567: LD_VAR 0 1
 571: PUSH
 572: FOR_IN
 573: IFFALSE 614
// if IsOk ( i ) then
 575: LD_VAR 0 4
 579: PPUSH
 580: CALL_OW 302
 584: IFFALSE 612
// begin Say ( i , ident ) ;
 586: LD_VAR 0 4
 590: PPUSH
 591: LD_VAR 0 2
 595: PPUSH
 596: CALL_OW 88
// result := i ;
 600: LD_ADDR_VAR 0 3
 604: PUSH
 605: LD_VAR 0 4
 609: ST_TO_ADDR
// break ;
 610: GO 614
// end ;
 612: GO 572
 614: POP
 615: POP
// end ;
 616: LD_VAR 0 3
 620: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 621: LD_INT 0
 623: PPUSH
 624: PPUSH
// InitUc ;
 625: CALL_OW 18
// InitHc ;
 629: CALL_OW 19
// uc_side := 0 ;
 633: LD_ADDR_OWVAR 20
 637: PUSH
 638: LD_INT 0
 640: ST_TO_ADDR
// uc_nation := 0 ;
 641: LD_ADDR_OWVAR 21
 645: PUSH
 646: LD_INT 0
 648: ST_TO_ADDR
// for i = 1 to amount do
 649: LD_ADDR_VAR 0 4
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_VAR 0 2
 663: PUSH
 664: FOR_TO
 665: IFFALSE 747
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 667: LD_ADDR_OWVAR 29
 671: PUSH
 672: LD_INT 9
 674: PPUSH
 675: LD_INT 12
 677: PPUSH
 678: CALL_OW 12
 682: PUSH
 683: LD_INT 9
 685: PPUSH
 686: LD_INT 12
 688: PPUSH
 689: CALL_OW 12
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 698: LD_ADDR_OWVAR 35
 702: PUSH
 703: LD_INT 1
 705: NEG
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: CALL_OW 12
 714: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 715: LD_INT 0
 717: PPUSH
 718: LD_INT 12
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 728: CALL_OW 44
 732: PPUSH
 733: LD_VAR 0 1
 737: PPUSH
 738: LD_INT 0
 740: PPUSH
 741: CALL_OW 49
// end ;
 745: GO 664
 747: POP
 748: POP
// InitHc ;
 749: CALL_OW 19
// end ;
 753: LD_VAR 0 3
 757: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 758: LD_INT 0
 760: PPUSH
 761: PPUSH
// uc_side := 0 ;
 762: LD_ADDR_OWVAR 20
 766: PUSH
 767: LD_INT 0
 769: ST_TO_ADDR
// uc_nation := 0 ;
 770: LD_ADDR_OWVAR 21
 774: PUSH
 775: LD_INT 0
 777: ST_TO_ADDR
// for i := 1 to 3 do
 778: LD_ADDR_VAR 0 4
 782: PUSH
 783: DOUBLE
 784: LD_INT 1
 786: DEC
 787: ST_TO_ADDR
 788: LD_INT 3
 790: PUSH
 791: FOR_TO
 792: IFFALSE 829
// begin hc_class := 21 ;
 794: LD_ADDR_OWVAR 28
 798: PUSH
 799: LD_INT 21
 801: ST_TO_ADDR
// hc_gallery :=  ;
 802: LD_ADDR_OWVAR 33
 806: PUSH
 807: LD_STRING 
 809: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 810: CALL_OW 44
 814: PPUSH
 815: LD_VAR 0 1
 819: PPUSH
 820: LD_INT 0
 822: PPUSH
 823: CALL_OW 49
// end ;
 827: GO 791
 829: POP
 830: POP
// for i := 1 to 3 do
 831: LD_ADDR_VAR 0 4
 835: PUSH
 836: DOUBLE
 837: LD_INT 1
 839: DEC
 840: ST_TO_ADDR
 841: LD_INT 3
 843: PUSH
 844: FOR_TO
 845: IFFALSE 882
// begin hc_class := 18 ;
 847: LD_ADDR_OWVAR 28
 851: PUSH
 852: LD_INT 18
 854: ST_TO_ADDR
// hc_gallery :=  ;
 855: LD_ADDR_OWVAR 33
 859: PUSH
 860: LD_STRING 
 862: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 863: CALL_OW 44
 867: PPUSH
 868: LD_VAR 0 1
 872: PPUSH
 873: LD_INT 0
 875: PPUSH
 876: CALL_OW 49
// end ;
 880: GO 844
 882: POP
 883: POP
// for i := 1 to 3 do
 884: LD_ADDR_VAR 0 4
 888: PUSH
 889: DOUBLE
 890: LD_INT 1
 892: DEC
 893: ST_TO_ADDR
 894: LD_INT 3
 896: PUSH
 897: FOR_TO
 898: IFFALSE 935
// begin hc_class := 13 ;
 900: LD_ADDR_OWVAR 28
 904: PUSH
 905: LD_INT 13
 907: ST_TO_ADDR
// hc_gallery :=  ;
 908: LD_ADDR_OWVAR 33
 912: PUSH
 913: LD_STRING 
 915: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 916: CALL_OW 44
 920: PPUSH
 921: LD_VAR 0 1
 925: PPUSH
 926: LD_INT 0
 928: PPUSH
 929: CALL_OW 49
// end ;
 933: GO 897
 935: POP
 936: POP
// for i := 1 to 4 do
 937: LD_ADDR_VAR 0 4
 941: PUSH
 942: DOUBLE
 943: LD_INT 1
 945: DEC
 946: ST_TO_ADDR
 947: LD_INT 4
 949: PUSH
 950: FOR_TO
 951: IFFALSE 988
// begin hc_class := class_frog ;
 953: LD_ADDR_OWVAR 28
 957: PUSH
 958: LD_INT 19
 960: ST_TO_ADDR
// hc_gallery :=  ;
 961: LD_ADDR_OWVAR 33
 965: PUSH
 966: LD_STRING 
 968: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 969: CALL_OW 44
 973: PPUSH
 974: LD_VAR 0 2
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL_OW 49
// end ;
 986: GO 950
 988: POP
 989: POP
// end ;
 990: LD_VAR 0 3
 994: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 995: LD_INT 0
 997: PPUSH
 998: PPUSH
 999: PPUSH
// if not observer or not unit then
1000: LD_VAR 0 1
1004: NOT
1005: IFTRUE 1014
1007: PUSH
1008: LD_VAR 0 2
1012: NOT
1013: OR
1014: IFFALSE 1018
// exit ;
1016: GO 1066
// if not See ( GetSide ( observer ) , unit ) then
1018: LD_VAR 0 1
1022: PPUSH
1023: CALL_OW 255
1027: PPUSH
1028: LD_VAR 0 2
1032: PPUSH
1033: CALL_OW 292
1037: NOT
1038: IFFALSE 1042
// exit ;
1040: GO 1066
// result := GetDistUnits ( observer , unit ) < 12 ;
1042: LD_ADDR_VAR 0 3
1046: PUSH
1047: LD_VAR 0 1
1051: PPUSH
1052: LD_VAR 0 2
1056: PPUSH
1057: CALL_OW 296
1061: PUSH
1062: LD_INT 12
1064: LESS
1065: ST_TO_ADDR
// end ;
1066: LD_VAR 0 3
1070: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1071: LD_INT 0
1073: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1074: LD_VAR 0 2
1078: PUSH
1079: LD_INT 1
1081: ARRAY
1082: PPUSH
1083: LD_VAR 0 2
1087: PUSH
1088: LD_INT 2
1090: ARRAY
1091: PPUSH
1092: CALL_OW 488
1096: IFFALSE 1126
1098: PUSH
1099: LD_VAR 0 2
1103: PUSH
1104: LD_INT 1
1106: ARRAY
1107: PPUSH
1108: LD_VAR 0 2
1112: PUSH
1113: LD_INT 2
1115: ARRAY
1116: PPUSH
1117: CALL_OW 428
1121: PUSH
1122: LD_INT 0
1124: EQUAL
1125: AND
1126: IFFALSE 1160
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1128: LD_VAR 0 1
1132: PPUSH
1133: LD_VAR 0 2
1137: PUSH
1138: LD_INT 1
1140: ARRAY
1141: PPUSH
1142: LD_VAR 0 2
1146: PUSH
1147: LD_INT 2
1149: ARRAY
1150: PPUSH
1151: LD_VAR 0 3
1155: PPUSH
1156: CALL_OW 48
// end ;
1160: LD_VAR 0 4
1164: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1165: LD_INT 0
1167: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1168: LD_VAR 0 1
1172: PPUSH
1173: LD_VAR 0 2
1177: PPUSH
1178: LD_VAR 0 3
1182: PPUSH
1183: LD_VAR 0 4
1187: PPUSH
1188: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1192: LD_VAR 0 1
1196: PPUSH
1197: LD_VAR 0 2
1201: PPUSH
1202: LD_VAR 0 3
1206: PPUSH
1207: CALL_OW 331
// end ;
1211: LD_VAR 0 5
1215: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1216: LD_INT 0
1218: PPUSH
// if not units then
1219: LD_VAR 0 1
1223: NOT
1224: IFFALSE 1228
// exit ;
1226: GO 1311
// result := true ;
1228: LD_ADDR_VAR 0 4
1232: PUSH
1233: LD_INT 1
1235: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1236: LD_VAR 0 1
1240: PPUSH
1241: LD_INT 26
1243: PUSH
1244: LD_INT 1
1246: PUSH
1247: EMPTY
1248: LIST
1249: LIST
1250: PPUSH
1251: CALL_OW 72
1255: PUSH
1256: LD_INT 1
1258: ARRAY
1259: PPUSH
1260: LD_VAR 0 2
1264: PPUSH
1265: CALL_OW 88
1269: NOT
1270: IFFALSE 1311
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1272: LD_ADDR_VAR 0 4
1276: PUSH
1277: LD_VAR 0 1
1281: PPUSH
1282: LD_INT 26
1284: PUSH
1285: LD_INT 2
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: PPUSH
1292: CALL_OW 72
1296: PUSH
1297: LD_INT 1
1299: ARRAY
1300: PPUSH
1301: LD_VAR 0 3
1305: PPUSH
1306: CALL_OW 88
1310: ST_TO_ADDR
// end ;
1311: LD_VAR 0 4
1315: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1316: LD_INT 0
1318: PPUSH
1319: PPUSH
// if not group then
1320: LD_VAR 0 2
1324: NOT
1325: IFFALSE 1329
// exit ;
1327: GO 1374
// for i in group do
1329: LD_ADDR_VAR 0 4
1333: PUSH
1334: LD_VAR 0 2
1338: PUSH
1339: FOR_IN
1340: IFFALSE 1372
// if See ( side , i ) then
1342: LD_VAR 0 1
1346: PPUSH
1347: LD_VAR 0 4
1351: PPUSH
1352: CALL_OW 292
1356: IFFALSE 1370
// begin result := true ;
1358: LD_ADDR_VAR 0 3
1362: PUSH
1363: LD_INT 1
1365: ST_TO_ADDR
// exit ;
1366: POP
1367: POP
1368: GO 1374
// end ;
1370: GO 1339
1372: POP
1373: POP
// end ; end_of_file
1374: LD_VAR 0 3
1378: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1379: LD_INT 0
1381: PPUSH
1382: PPUSH
// uc_side := 2 ;
1383: LD_ADDR_OWVAR 20
1387: PUSH
1388: LD_INT 2
1390: ST_TO_ADDR
// uc_nation := 2 ;
1391: LD_ADDR_OWVAR 21
1395: PUSH
1396: LD_INT 2
1398: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1399: LD_ADDR_EXP 21
1403: PUSH
1404: LD_STRING Heike
1406: PPUSH
1407: LD_EXP 1
1411: NOT
1412: PPUSH
1413: LD_EXP 2
1417: PPUSH
1418: CALL 37780 0 3
1422: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1423: LD_ADDR_EXP 24
1427: PUSH
1428: LD_STRING Ibrahim
1430: PPUSH
1431: LD_EXP 1
1435: NOT
1436: PPUSH
1437: LD_EXP 2
1441: PPUSH
1442: CALL 37780 0 3
1446: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1447: LD_ADDR_EXP 22
1451: PUSH
1452: LD_STRING Givi
1454: PPUSH
1455: LD_EXP 1
1459: NOT
1460: PPUSH
1461: LD_EXP 2
1465: PPUSH
1466: CALL 37780 0 3
1470: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1471: LD_ADDR_EXP 25
1475: PUSH
1476: LD_STRING Kamil
1478: PPUSH
1479: LD_EXP 1
1483: NOT
1484: PPUSH
1485: LD_EXP 2
1489: PPUSH
1490: CALL 37780 0 3
1494: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1495: LD_ADDR_EXP 26
1499: PUSH
1500: LD_STRING Kaia
1502: PPUSH
1503: LD_EXP 1
1507: NOT
1508: PPUSH
1509: LD_EXP 2
1513: PPUSH
1514: CALL 37780 0 3
1518: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1519: LD_ADDR_EXP 27
1523: PUSH
1524: LD_STRING Sophia
1526: PPUSH
1527: LD_EXP 1
1531: NOT
1532: PPUSH
1533: LD_EXP 2
1537: PPUSH
1538: CALL 37780 0 3
1542: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1543: LD_ADDR_EXP 28
1547: PUSH
1548: LD_STRING Markov
1550: PPUSH
1551: LD_EXP 1
1555: NOT
1556: PPUSH
1557: LD_EXP 2
1561: PPUSH
1562: CALL 37780 0 3
1566: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1567: LD_ADDR_EXP 33
1571: PUSH
1572: LD_STRING Aviradze
1574: PPUSH
1575: LD_EXP 1
1579: NOT
1580: PPUSH
1581: LD_EXP 2
1585: PPUSH
1586: CALL 37780 0 3
1590: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1591: LD_ADDR_EXP 32
1595: PUSH
1596: LD_STRING Kurt
1598: PPUSH
1599: LD_EXP 1
1603: NOT
1604: PPUSH
1605: LD_EXP 2
1609: PPUSH
1610: CALL 37780 0 3
1614: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1615: LD_ADDR_EXP 23
1619: PUSH
1620: LD_STRING Mike
1622: PPUSH
1623: LD_EXP 1
1627: NOT
1628: PPUSH
1629: LD_EXP 2
1633: PPUSH
1634: CALL 37780 0 3
1638: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1639: LD_ADDR_EXP 30
1643: PUSH
1644: LD_STRING Olaf
1646: PPUSH
1647: LD_INT 0
1649: PPUSH
1650: LD_STRING 
1652: PPUSH
1653: CALL 37780 0 3
1657: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1658: LD_ADDR_EXP 34
1662: PUSH
1663: LD_STRING 04_2_others
1665: PPUSH
1666: CALL_OW 31
1670: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1671: LD_ADDR_EXP 36
1675: PUSH
1676: LD_STRING 04_2_apes
1678: PPUSH
1679: CALL_OW 31
1683: ST_TO_ADDR
// if hasFlamethrower then
1684: LD_EXP 3
1688: IFFALSE 1923
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1690: LD_INT 70
1692: PPUSH
1693: LD_INT 2
1695: PPUSH
1696: LD_INT 2
1698: PPUSH
1699: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1703: LD_ADDR_EXP 35
1707: PUSH
1708: LD_INT 13
1710: PUSH
1711: LD_INT 1
1713: PUSH
1714: LD_INT 1
1716: PUSH
1717: LD_INT 27
1719: PUSH
1720: LD_INT 2
1722: PUSH
1723: LD_INT 1000
1725: PUSH
1726: LD_INT 0
1728: PUSH
1729: LD_INT 0
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_INT 13
1747: PUSH
1748: LD_INT 1
1750: PUSH
1751: LD_INT 1
1753: PUSH
1754: LD_INT 25
1756: PUSH
1757: LD_INT 2
1759: PUSH
1760: LD_INT 1000
1762: PUSH
1763: LD_INT 0
1765: PUSH
1766: LD_INT 0
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: LIST
1781: PUSH
1782: LD_INT 13
1784: PUSH
1785: LD_INT 1
1787: PUSH
1788: LD_INT 1
1790: PUSH
1791: LD_INT 26
1793: PUSH
1794: LD_INT 2
1796: PUSH
1797: LD_INT 1000
1799: PUSH
1800: LD_INT 0
1802: PUSH
1803: LD_INT 0
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_INT 13
1821: PUSH
1822: LD_INT 1
1824: PUSH
1825: LD_INT 1
1827: PUSH
1828: LD_INT 27
1830: PUSH
1831: LD_INT 2
1833: PUSH
1834: LD_INT 1000
1836: PUSH
1837: LD_INT 0
1839: PUSH
1840: LD_INT 0
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 13
1858: PUSH
1859: LD_INT 1
1861: PUSH
1862: LD_INT 1
1864: PUSH
1865: LD_INT 32
1867: PUSH
1868: LD_INT 2
1870: PUSH
1871: LD_INT 1000
1873: PUSH
1874: LD_INT 0
1876: PUSH
1877: LD_INT 60
1879: PUSH
1880: LD_INT 40
1882: PUSH
1883: LD_INT 20
1885: PUSH
1886: LD_INT 10
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: PUSH
1895: LD_OWVAR 67
1899: ARRAY
1900: PUSH
1901: EMPTY
1902: LIST
1903: LIST
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: ST_TO_ADDR
// end else
1921: GO 2141
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 , 10 ] [ Difficulty ] ] ] ] ;
1923: LD_ADDR_EXP 35
1927: PUSH
1928: LD_INT 13
1930: PUSH
1931: LD_INT 1
1933: PUSH
1934: LD_INT 1
1936: PUSH
1937: LD_INT 25
1939: PUSH
1940: LD_INT 2
1942: PUSH
1943: LD_INT 1000
1945: PUSH
1946: LD_INT 0
1948: PUSH
1949: LD_INT 0
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: PUSH
1965: LD_INT 13
1967: PUSH
1968: LD_INT 1
1970: PUSH
1971: LD_INT 1
1973: PUSH
1974: LD_INT 27
1976: PUSH
1977: LD_INT 2
1979: PUSH
1980: LD_INT 1000
1982: PUSH
1983: LD_INT 0
1985: PUSH
1986: LD_INT 0
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: PUSH
2002: LD_INT 13
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: LD_INT 1
2010: PUSH
2011: LD_INT 24
2013: PUSH
2014: LD_INT 2
2016: PUSH
2017: LD_INT 1000
2019: PUSH
2020: LD_INT 0
2022: PUSH
2023: LD_INT 0
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: LIST
2038: PUSH
2039: LD_INT 13
2041: PUSH
2042: LD_INT 1
2044: PUSH
2045: LD_INT 1
2047: PUSH
2048: LD_INT 27
2050: PUSH
2051: LD_INT 2
2053: PUSH
2054: LD_INT 1000
2056: PUSH
2057: LD_INT 0
2059: PUSH
2060: LD_INT 0
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: PUSH
2067: EMPTY
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: LIST
2075: PUSH
2076: LD_INT 13
2078: PUSH
2079: LD_INT 1
2081: PUSH
2082: LD_INT 1
2084: PUSH
2085: LD_INT 32
2087: PUSH
2088: LD_INT 2
2090: PUSH
2091: LD_INT 1000
2093: PUSH
2094: LD_INT 0
2096: PUSH
2097: LD_INT 50
2099: PUSH
2100: LD_INT 30
2102: PUSH
2103: LD_INT 20
2105: PUSH
2106: LD_INT 10
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: PUSH
2115: LD_OWVAR 67
2119: ARRAY
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: LIST
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: ST_TO_ADDR
// end ; uc_side := 5 ;
2141: LD_ADDR_OWVAR 20
2145: PUSH
2146: LD_INT 5
2148: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2149: LD_ADDR_EXP 29
2153: PUSH
2154: LD_STRING Abdul
2156: PPUSH
2157: LD_INT 0
2159: PPUSH
2160: LD_STRING 
2162: PPUSH
2163: CALL 37780 0 3
2167: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2168: LD_ADDR_EXP 31
2172: PUSH
2173: LD_STRING Omar
2175: PPUSH
2176: LD_INT 0
2178: PPUSH
2179: LD_STRING 
2181: PPUSH
2182: CALL 37780 0 3
2186: ST_TO_ADDR
// end ;
2187: LD_VAR 0 1
2191: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2192: LD_INT 0
2194: PPUSH
2195: PPUSH
2196: PPUSH
2197: PPUSH
2198: PPUSH
// pfx := 04_1_ ;
2199: LD_ADDR_VAR 0 2
2203: PUSH
2204: LD_STRING 04_1_
2206: ST_TO_ADDR
// if HexInfo ( 10 , 16 ) then
2207: LD_INT 10
2209: PPUSH
2210: LD_INT 16
2212: PPUSH
2213: CALL_OW 428
2217: IFFALSE 2242
// ComMoveXY ( HexInfo ( 10 , 16 ) , 18 , 18 ) else
2219: LD_INT 10
2221: PPUSH
2222: LD_INT 16
2224: PPUSH
2225: CALL_OW 428
2229: PPUSH
2230: LD_INT 18
2232: PPUSH
2233: LD_INT 18
2235: PPUSH
2236: CALL_OW 111
2240: GO 2252
// EraseResourceArea ( mat_cans , westSpawnPointArea ) ;
2242: LD_INT 1
2244: PPUSH
2245: LD_INT 14
2247: PPUSH
2248: CALL_OW 286
// repeat wait ( 0 0$1 ) ;
2252: LD_INT 35
2254: PPUSH
2255: CALL_OW 67
// until not HexInfo ( 10 , 16 ) ;
2259: LD_INT 10
2261: PPUSH
2262: LD_INT 16
2264: PPUSH
2265: CALL_OW 428
2269: NOT
2270: IFFALSE 2252
// tmp := [ ] ;
2272: LD_ADDR_VAR 0 4
2276: PUSH
2277: EMPTY
2278: ST_TO_ADDR
// uc_side := 5 ;
2279: LD_ADDR_OWVAR 20
2283: PUSH
2284: LD_INT 5
2286: ST_TO_ADDR
// uc_nation := 2 ;
2287: LD_ADDR_OWVAR 21
2291: PUSH
2292: LD_INT 2
2294: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2295: LD_ADDR_EXP 33
2299: PUSH
2300: LD_STRING Aviradze_L
2302: PPUSH
2303: LD_EXP 1
2307: NOT
2308: PPUSH
2309: LD_VAR 0 2
2313: PPUSH
2314: CALL 37780 0 3
2318: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2319: LD_EXP 33
2323: PPUSH
2324: LD_INT 2
2326: PPUSH
2327: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2331: LD_EXP 33
2335: PPUSH
2336: LD_INT 14
2338: PPUSH
2339: LD_INT 0
2341: PPUSH
2342: CALL_OW 49
// ComMoveXY ( Aviradze , 25 , 19 ) ;
2346: LD_EXP 33
2350: PPUSH
2351: LD_INT 25
2353: PPUSH
2354: LD_INT 19
2356: PPUSH
2357: CALL_OW 111
// AddComHold ( Aviradze ) ;
2361: LD_EXP 33
2365: PPUSH
2366: CALL_OW 200
// tmp := [ Aviradze ] ;
2370: LD_ADDR_VAR 0 4
2374: PUSH
2375: LD_EXP 33
2379: PUSH
2380: EMPTY
2381: LIST
2382: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2383: LD_INT 70
2385: PPUSH
2386: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2390: LD_STRING Ibrahim_L
2392: PPUSH
2393: LD_EXP 1
2397: NOT
2398: PPUSH
2399: LD_VAR 0 2
2403: PPUSH
2404: CALL 37780 0 3
2408: IFFALSE 2508
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2410: LD_ADDR_EXP 24
2414: PUSH
2415: LD_STRING Ibrahim_L
2417: PPUSH
2418: LD_EXP 1
2422: NOT
2423: PPUSH
2424: LD_VAR 0 2
2428: PPUSH
2429: CALL 37780 0 3
2433: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2434: LD_EXP 24
2438: PPUSH
2439: LD_INT 2
2441: PPUSH
2442: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2446: LD_EXP 24
2450: PPUSH
2451: LD_INT 14
2453: PPUSH
2454: LD_INT 0
2456: PPUSH
2457: CALL_OW 49
// ComMoveXY ( Ibrahim , 25 , 19 ) ;
2461: LD_EXP 24
2465: PPUSH
2466: LD_INT 25
2468: PPUSH
2469: LD_INT 19
2471: PPUSH
2472: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2476: LD_EXP 24
2480: PPUSH
2481: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2485: LD_ADDR_VAR 0 4
2489: PUSH
2490: LD_VAR 0 4
2494: PUSH
2495: LD_EXP 24
2499: ADD
2500: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2501: LD_INT 70
2503: PPUSH
2504: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2508: LD_STRING Kaia_L
2510: PPUSH
2511: LD_EXP 1
2515: NOT
2516: PPUSH
2517: LD_VAR 0 2
2521: PPUSH
2522: CALL 37780 0 3
2526: IFFALSE 2626
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2528: LD_ADDR_EXP 26
2532: PUSH
2533: LD_STRING Kaia_L
2535: PPUSH
2536: LD_EXP 1
2540: NOT
2541: PPUSH
2542: LD_VAR 0 2
2546: PPUSH
2547: CALL 37780 0 3
2551: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2552: LD_EXP 26
2556: PPUSH
2557: LD_INT 2
2559: PPUSH
2560: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2564: LD_EXP 26
2568: PPUSH
2569: LD_INT 14
2571: PPUSH
2572: LD_INT 0
2574: PPUSH
2575: CALL_OW 49
// ComMoveXY ( Kaia , 25 , 19 ) ;
2579: LD_EXP 26
2583: PPUSH
2584: LD_INT 25
2586: PPUSH
2587: LD_INT 19
2589: PPUSH
2590: CALL_OW 111
// AddComHold ( Kaia ) ;
2594: LD_EXP 26
2598: PPUSH
2599: CALL_OW 200
// tmp := tmp ^ Kaia ;
2603: LD_ADDR_VAR 0 4
2607: PUSH
2608: LD_VAR 0 4
2612: PUSH
2613: LD_EXP 26
2617: ADD
2618: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2619: LD_INT 70
2621: PPUSH
2622: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2626: LD_STRING Kamil_L
2628: PPUSH
2629: LD_EXP 1
2633: NOT
2634: PPUSH
2635: LD_VAR 0 2
2639: PPUSH
2640: CALL 37780 0 3
2644: IFFALSE 2744
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2646: LD_ADDR_EXP 25
2650: PUSH
2651: LD_STRING Kamil_L
2653: PPUSH
2654: LD_EXP 1
2658: NOT
2659: PPUSH
2660: LD_VAR 0 2
2664: PPUSH
2665: CALL 37780 0 3
2669: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2670: LD_EXP 25
2674: PPUSH
2675: LD_INT 2
2677: PPUSH
2678: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2682: LD_EXP 25
2686: PPUSH
2687: LD_INT 14
2689: PPUSH
2690: LD_INT 0
2692: PPUSH
2693: CALL_OW 49
// ComMoveXY ( Kamil , 25 , 19 ) ;
2697: LD_EXP 25
2701: PPUSH
2702: LD_INT 25
2704: PPUSH
2705: LD_INT 19
2707: PPUSH
2708: CALL_OW 111
// AddComHold ( Kamil ) ;
2712: LD_EXP 25
2716: PPUSH
2717: CALL_OW 200
// tmp := tmp ^ Kamil ;
2721: LD_ADDR_VAR 0 4
2725: PUSH
2726: LD_VAR 0 4
2730: PUSH
2731: LD_EXP 25
2735: ADD
2736: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2737: LD_INT 70
2739: PPUSH
2740: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2744: LD_STRING Sophia_L
2746: PPUSH
2747: LD_EXP 1
2751: NOT
2752: PPUSH
2753: LD_VAR 0 2
2757: PPUSH
2758: CALL 37780 0 3
2762: IFFALSE 2862
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2764: LD_ADDR_EXP 27
2768: PUSH
2769: LD_STRING Sophia_L
2771: PPUSH
2772: LD_EXP 1
2776: NOT
2777: PPUSH
2778: LD_VAR 0 2
2782: PPUSH
2783: CALL 37780 0 3
2787: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2788: LD_EXP 27
2792: PPUSH
2793: LD_INT 2
2795: PPUSH
2796: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2800: LD_EXP 27
2804: PPUSH
2805: LD_INT 14
2807: PPUSH
2808: LD_INT 0
2810: PPUSH
2811: CALL_OW 49
// ComMoveXY ( Sophia , 25 , 19 ) ;
2815: LD_EXP 27
2819: PPUSH
2820: LD_INT 25
2822: PPUSH
2823: LD_INT 19
2825: PPUSH
2826: CALL_OW 111
// AddComHold ( Sophia ) ;
2830: LD_EXP 27
2834: PPUSH
2835: CALL_OW 200
// tmp := tmp ^ Sophia ;
2839: LD_ADDR_VAR 0 4
2843: PUSH
2844: LD_VAR 0 4
2848: PUSH
2849: LD_EXP 27
2853: ADD
2854: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2855: LD_INT 70
2857: PPUSH
2858: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2862: LD_ADDR_VAR 0 5
2866: PUSH
2867: LD_STRING 04_1_others_L
2869: PPUSH
2870: CALL_OW 31
2874: ST_TO_ADDR
// if tmp2 then
2875: LD_VAR 0 5
2879: IFFALSE 2976
// for i in tmp2 do
2881: LD_ADDR_VAR 0 3
2885: PUSH
2886: LD_VAR 0 5
2890: PUSH
2891: FOR_IN
2892: IFFALSE 2974
// begin SetDir ( i , 2 ) ;
2894: LD_VAR 0 3
2898: PPUSH
2899: LD_INT 2
2901: PPUSH
2902: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2906: LD_VAR 0 3
2910: PPUSH
2911: LD_INT 14
2913: PPUSH
2914: LD_INT 0
2916: PPUSH
2917: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2921: LD_ADDR_EXP 34
2925: PUSH
2926: LD_EXP 34
2930: PPUSH
2931: LD_EXP 34
2935: PUSH
2936: LD_INT 1
2938: PLUS
2939: PPUSH
2940: LD_VAR 0 3
2944: PPUSH
2945: CALL_OW 1
2949: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2950: LD_VAR 0 3
2954: PPUSH
2955: LD_INT 17
2957: PPUSH
2958: LD_INT 14
2960: PPUSH
2961: CALL_OW 111
// wait ( 0 0$2 ) ;
2965: LD_INT 70
2967: PPUSH
2968: CALL_OW 67
// end ;
2972: GO 2891
2974: POP
2975: POP
// for i in tmp union tmp2 do
2976: LD_ADDR_VAR 0 3
2980: PUSH
2981: LD_VAR 0 4
2985: PUSH
2986: LD_VAR 0 5
2990: UNION
2991: PUSH
2992: FOR_IN
2993: IFFALSE 3023
// begin SetSide ( i , 2 ) ;
2995: LD_VAR 0 3
2999: PPUSH
3000: LD_INT 2
3002: PPUSH
3003: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
3007: LD_VAR 0 3
3011: PPUSH
3012: LD_EXP 21
3016: PPUSH
3017: CALL_OW 112
// end ;
3021: GO 2992
3023: POP
3024: POP
// end ; end_of_file
3025: LD_VAR 0 1
3029: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
3030: LD_INT 0
3032: PPUSH
3033: PPUSH
3034: PPUSH
// uc_side := 3 ;
3035: LD_ADDR_OWVAR 20
3039: PUSH
3040: LD_INT 3
3042: ST_TO_ADDR
// uc_nation := 3 ;
3043: LD_ADDR_OWVAR 21
3047: PUSH
3048: LD_INT 3
3050: ST_TO_ADDR
// crossRoadGuard := [ ] ;
3051: LD_ADDR_EXP 37
3055: PUSH
3056: EMPTY
3057: ST_TO_ADDR
// oilBaseGuard := [ ] ;
3058: LD_ADDR_EXP 38
3062: PUSH
3063: EMPTY
3064: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3065: LD_ADDR_EXP 41
3069: PUSH
3070: EMPTY
3071: ST_TO_ADDR
// for i := 1 to 2 do
3072: LD_ADDR_VAR 0 2
3076: PUSH
3077: DOUBLE
3078: LD_INT 1
3080: DEC
3081: ST_TO_ADDR
3082: LD_INT 2
3084: PUSH
3085: FOR_TO
3086: IFFALSE 3225
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3088: LD_INT 0
3090: PPUSH
3091: LD_INT 1
3093: PPUSH
3094: LD_INT 3
3096: PUSH
3097: LD_INT 4
3099: PUSH
3100: LD_INT 5
3102: PUSH
3103: LD_INT 6
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: LIST
3110: LIST
3111: PUSH
3112: LD_OWVAR 67
3116: ARRAY
3117: PPUSH
3118: CALL_OW 380
// un := CreateHuman ;
3122: LD_ADDR_VAR 0 3
3126: PUSH
3127: CALL_OW 44
3131: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3132: LD_ADDR_EXP 37
3136: PUSH
3137: LD_EXP 37
3141: PPUSH
3142: LD_EXP 37
3146: PUSH
3147: LD_INT 1
3149: PLUS
3150: PPUSH
3151: LD_VAR 0 3
3155: PPUSH
3156: CALL_OW 1
3160: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3161: LD_VAR 0 3
3165: PPUSH
3166: LD_INT 100
3168: PPUSH
3169: LD_INT 63
3171: PPUSH
3172: LD_INT 3
3174: PPUSH
3175: LD_INT 0
3177: PPUSH
3178: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3182: LD_VAR 0 3
3186: PPUSH
3187: LD_INT 97
3189: PPUSH
3190: LD_INT 64
3192: PPUSH
3193: CALL_OW 428
3197: PUSH
3198: LD_INT 98
3200: PPUSH
3201: LD_INT 58
3203: PPUSH
3204: CALL_OW 428
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: PUSH
3213: LD_VAR 0 2
3217: ARRAY
3218: PPUSH
3219: CALL_OW 120
// end ;
3223: GO 3085
3225: POP
3226: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3227: LD_INT 51
3229: PPUSH
3230: LD_INT 77
3232: PPUSH
3233: CALL_OW 428
3237: PPUSH
3238: CALL_OW 274
3242: PPUSH
3243: LD_INT 1
3245: PPUSH
3246: LD_INT 120
3248: PPUSH
3249: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3253: LD_INT 10
3255: PPUSH
3256: CALL_OW 274
3260: PPUSH
3261: LD_INT 2
3263: PPUSH
3264: LD_INT 300
3266: PPUSH
3267: CALL_OW 277
// for i := 1 to 2 do
3271: LD_ADDR_VAR 0 2
3275: PUSH
3276: DOUBLE
3277: LD_INT 1
3279: DEC
3280: ST_TO_ADDR
3281: LD_INT 2
3283: PUSH
3284: FOR_TO
3285: IFFALSE 3403
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3287: LD_INT 0
3289: PPUSH
3290: LD_INT 1
3292: PPUSH
3293: LD_INT 3
3295: PUSH
3296: LD_INT 4
3298: PUSH
3299: LD_INT 5
3301: PUSH
3302: LD_INT 6
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: PUSH
3311: LD_OWVAR 67
3315: ARRAY
3316: PPUSH
3317: CALL_OW 380
// un := CreateHuman ;
3321: LD_ADDR_VAR 0 3
3325: PUSH
3326: CALL_OW 44
3330: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3331: LD_ADDR_EXP 38
3335: PUSH
3336: LD_EXP 38
3340: PPUSH
3341: LD_EXP 38
3345: PUSH
3346: LD_INT 1
3348: PLUS
3349: PPUSH
3350: LD_VAR 0 3
3354: PPUSH
3355: CALL_OW 1
3359: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3360: LD_VAR 0 3
3364: PPUSH
3365: LD_INT 198
3367: PPUSH
3368: LD_INT 106
3370: PPUSH
3371: CALL_OW 428
3375: PUSH
3376: LD_INT 205
3378: PPUSH
3379: LD_INT 114
3381: PPUSH
3382: CALL_OW 428
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PUSH
3391: LD_VAR 0 2
3395: ARRAY
3396: PPUSH
3397: CALL_OW 52
// end ;
3401: GO 3284
3403: POP
3404: POP
// for i := 1 to 2 do
3405: LD_ADDR_VAR 0 2
3409: PUSH
3410: DOUBLE
3411: LD_INT 1
3413: DEC
3414: ST_TO_ADDR
3415: LD_INT 2
3417: PUSH
3418: FOR_TO
3419: IFFALSE 3496
// begin PrepareHuman ( false , 2 , 3 ) ;
3421: LD_INT 0
3423: PPUSH
3424: LD_INT 2
3426: PPUSH
3427: LD_INT 3
3429: PPUSH
3430: CALL_OW 380
// un := CreateHuman ;
3434: LD_ADDR_VAR 0 3
3438: PUSH
3439: CALL_OW 44
3443: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3444: LD_ADDR_EXP 38
3448: PUSH
3449: LD_EXP 38
3453: PPUSH
3454: LD_EXP 38
3458: PUSH
3459: LD_INT 1
3461: PLUS
3462: PPUSH
3463: LD_VAR 0 3
3467: PPUSH
3468: CALL_OW 1
3472: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3473: LD_VAR 0 3
3477: PPUSH
3478: LD_INT 204
3480: PPUSH
3481: LD_INT 108
3483: PPUSH
3484: LD_INT 2
3486: PPUSH
3487: LD_INT 0
3489: PPUSH
3490: CALL_OW 50
// end ;
3494: GO 3418
3496: POP
3497: POP
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
3498: LD_ADDR_VAR 0 2
3502: PUSH
3503: DOUBLE
3504: LD_INT 1
3506: DEC
3507: ST_TO_ADDR
3508: LD_INT 4
3510: PUSH
3511: LD_INT 5
3513: PUSH
3514: LD_INT 6
3516: PUSH
3517: LD_INT 7
3519: PUSH
3520: EMPTY
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: PUSH
3526: LD_OWVAR 67
3530: ARRAY
3531: PUSH
3532: FOR_TO
3533: IFFALSE 3679
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3535: LD_INT 0
3537: PPUSH
3538: LD_INT 1
3540: PUSH
3541: LD_INT 1
3543: PUSH
3544: LD_INT 2
3546: PUSH
3547: LD_INT 4
3549: PUSH
3550: LD_INT 1
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: PUSH
3560: LD_INT 1
3562: PPUSH
3563: LD_INT 5
3565: PPUSH
3566: CALL_OW 12
3570: ARRAY
3571: PPUSH
3572: LD_INT 3
3574: PUSH
3575: LD_INT 4
3577: PUSH
3578: LD_INT 5
3580: PUSH
3581: LD_INT 5
3583: PUSH
3584: EMPTY
3585: LIST
3586: LIST
3587: LIST
3588: LIST
3589: PUSH
3590: LD_OWVAR 67
3594: ARRAY
3595: PPUSH
3596: CALL_OW 380
// un := CreateHuman ;
3600: LD_ADDR_VAR 0 3
3604: PUSH
3605: CALL_OW 44
3609: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroupArea , false ) then
3610: LD_VAR 0 3
3614: PPUSH
3615: LD_INT 10
3617: PPUSH
3618: LD_INT 0
3620: PPUSH
3621: CALL 74873 0 3
3625: IFFALSE 3677
// begin ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3627: LD_ADDR_EXP 39
3631: PUSH
3632: LD_EXP 39
3636: PPUSH
3637: LD_EXP 39
3641: PUSH
3642: LD_INT 1
3644: PLUS
3645: PPUSH
3646: LD_VAR 0 3
3650: PPUSH
3651: CALL_OW 1
3655: ST_TO_ADDR
// if Prob ( 50 ) then
3656: LD_INT 50
3658: PPUSH
3659: CALL_OW 13
3663: IFFALSE 3677
// ForceSleep ( un , true ) ;
3665: LD_VAR 0 3
3669: PPUSH
3670: LD_INT 1
3672: PPUSH
3673: CALL_OW 585
// end ; end ;
3677: GO 3532
3679: POP
3680: POP
// for i := 1 to 3 do
3681: LD_ADDR_VAR 0 2
3685: PUSH
3686: DOUBLE
3687: LD_INT 1
3689: DEC
3690: ST_TO_ADDR
3691: LD_INT 3
3693: PUSH
3694: FOR_TO
3695: IFFALSE 3789
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
3697: LD_INT 0
3699: PPUSH
3700: LD_INT 1
3702: PPUSH
3703: LD_INT 3
3705: PUSH
3706: LD_INT 4
3708: PUSH
3709: LD_INT 4
3711: PUSH
3712: LD_INT 5
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: PUSH
3721: LD_OWVAR 67
3725: ARRAY
3726: PPUSH
3727: CALL_OW 380
// un := CreateHuman ;
3731: LD_ADDR_VAR 0 3
3735: PUSH
3736: CALL_OW 44
3740: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3741: LD_VAR 0 3
3745: PPUSH
3746: LD_INT 11
3748: PPUSH
3749: LD_INT 0
3751: PPUSH
3752: CALL 74873 0 3
3756: IFFALSE 3787
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3758: LD_ADDR_EXP 39
3762: PUSH
3763: LD_EXP 39
3767: PPUSH
3768: LD_EXP 39
3772: PUSH
3773: LD_INT 1
3775: PLUS
3776: PPUSH
3777: LD_VAR 0 3
3781: PPUSH
3782: CALL_OW 1
3786: ST_TO_ADDR
// end ;
3787: GO 3694
3789: POP
3790: POP
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
3791: LD_ADDR_VAR 0 2
3795: PUSH
3796: DOUBLE
3797: LD_INT 1
3799: DEC
3800: ST_TO_ADDR
3801: LD_INT 5
3803: PUSH
3804: LD_INT 6
3806: PUSH
3807: LD_INT 7
3809: PUSH
3810: LD_INT 8
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: PUSH
3819: LD_OWVAR 67
3823: ARRAY
3824: PUSH
3825: FOR_TO
3826: IFFALSE 3972
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] ) ;
3828: LD_INT 0
3830: PPUSH
3831: LD_INT 1
3833: PUSH
3834: LD_INT 1
3836: PUSH
3837: LD_INT 2
3839: PUSH
3840: LD_INT 4
3842: PUSH
3843: LD_INT 1
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: PUSH
3853: LD_INT 1
3855: PPUSH
3856: LD_INT 5
3858: PPUSH
3859: CALL_OW 12
3863: ARRAY
3864: PPUSH
3865: LD_INT 3
3867: PUSH
3868: LD_INT 4
3870: PUSH
3871: LD_INT 5
3873: PUSH
3874: LD_INT 5
3876: PUSH
3877: EMPTY
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: PUSH
3883: LD_OWVAR 67
3887: ARRAY
3888: PPUSH
3889: CALL_OW 380
// un := CreateHuman ;
3893: LD_ADDR_VAR 0 3
3897: PUSH
3898: CALL_OW 44
3902: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3903: LD_VAR 0 3
3907: PPUSH
3908: LD_INT 15
3910: PPUSH
3911: LD_INT 0
3913: PPUSH
3914: CALL 74873 0 3
3918: IFFALSE 3970
// begin ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3920: LD_ADDR_EXP 40
3924: PUSH
3925: LD_EXP 40
3929: PPUSH
3930: LD_EXP 40
3934: PUSH
3935: LD_INT 1
3937: PLUS
3938: PPUSH
3939: LD_VAR 0 3
3943: PPUSH
3944: CALL_OW 1
3948: ST_TO_ADDR
// if Prob ( 50 ) then
3949: LD_INT 50
3951: PPUSH
3952: CALL_OW 13
3956: IFFALSE 3970
// ForceSleep ( un , true ) ;
3958: LD_VAR 0 3
3962: PPUSH
3963: LD_INT 1
3965: PPUSH
3966: CALL_OW 585
// end ; end ;
3970: GO 3825
3972: POP
3973: POP
// end ;
3974: LD_VAR 0 1
3978: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3979: LD_INT 0
3981: PPUSH
3982: PPUSH
3983: PPUSH
// uc_side := 3 ;
3984: LD_ADDR_OWVAR 20
3988: PUSH
3989: LD_INT 3
3991: ST_TO_ADDR
// uc_nation := 3 ;
3992: LD_ADDR_OWVAR 21
3996: PUSH
3997: LD_INT 3
3999: ST_TO_ADDR
// for i := 1 to 6 do
4000: LD_ADDR_VAR 0 2
4004: PUSH
4005: DOUBLE
4006: LD_INT 1
4008: DEC
4009: ST_TO_ADDR
4010: LD_INT 6
4012: PUSH
4013: FOR_TO
4014: IFFALSE 4093
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
4016: LD_INT 0
4018: PPUSH
4019: LD_INT 1
4021: PUSH
4022: LD_INT 4
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: PUSH
4029: LD_INT 1
4031: PPUSH
4032: LD_INT 2
4034: PPUSH
4035: CALL_OW 12
4039: ARRAY
4040: PPUSH
4041: LD_INT 0
4043: PPUSH
4044: CALL_OW 380
// un := CreateHuman ;
4048: LD_ADDR_VAR 0 3
4052: PUSH
4053: CALL_OW 44
4057: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
4058: LD_VAR 0 3
4062: PPUSH
4063: LD_INT 54
4065: PPUSH
4066: LD_INT 88
4068: PPUSH
4069: LD_INT 12
4071: PPUSH
4072: LD_INT 0
4074: PPUSH
4075: CALL_OW 50
// SetLives ( un , 1 ) ;
4079: LD_VAR 0 3
4083: PPUSH
4084: LD_INT 1
4086: PPUSH
4087: CALL_OW 234
// end ;
4091: GO 4013
4093: POP
4094: POP
// uc_side := 3 ;
4095: LD_ADDR_OWVAR 20
4099: PUSH
4100: LD_INT 3
4102: ST_TO_ADDR
// uc_nation := 0 ;
4103: LD_ADDR_OWVAR 21
4107: PUSH
4108: LD_INT 0
4110: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4111: LD_ADDR_EXP 42
4115: PUSH
4116: EMPTY
4117: ST_TO_ADDR
// apeEngGroup := [ ] ;
4118: LD_ADDR_EXP 43
4122: PUSH
4123: EMPTY
4124: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
4125: LD_ADDR_VAR 0 2
4129: PUSH
4130: DOUBLE
4131: LD_INT 1
4133: DEC
4134: ST_TO_ADDR
4135: LD_INT 4
4137: PUSH
4138: LD_INT 5
4140: PUSH
4141: LD_INT 6
4143: PUSH
4144: LD_INT 7
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: PUSH
4153: LD_OWVAR 67
4157: ARRAY
4158: PUSH
4159: FOR_TO
4160: IFFALSE 4278
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
4162: LD_INT 0
4164: PPUSH
4165: LD_INT 15
4167: PPUSH
4168: LD_INT 3
4170: PUSH
4171: LD_INT 4
4173: PUSH
4174: LD_INT 5
4176: PUSH
4177: LD_INT 6
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: PUSH
4186: LD_OWVAR 67
4190: ARRAY
4191: PPUSH
4192: CALL_OW 380
// un := CreateHuman ;
4196: LD_ADDR_VAR 0 3
4200: PUSH
4201: CALL_OW 44
4205: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4206: LD_ADDR_EXP 42
4210: PUSH
4211: LD_EXP 42
4215: PPUSH
4216: LD_EXP 42
4220: PUSH
4221: LD_INT 1
4223: PLUS
4224: PPUSH
4225: LD_VAR 0 3
4229: PPUSH
4230: CALL_OW 1
4234: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4235: LD_VAR 0 3
4239: PPUSH
4240: LD_INT 0
4242: PPUSH
4243: LD_INT 5
4245: PPUSH
4246: CALL_OW 12
4250: PPUSH
4251: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4255: LD_VAR 0 3
4259: PPUSH
4260: LD_INT 56
4262: PPUSH
4263: LD_INT 82
4265: PPUSH
4266: LD_INT 6
4268: PPUSH
4269: LD_INT 0
4271: PPUSH
4272: CALL_OW 50
// end ;
4276: GO 4159
4278: POP
4279: POP
// for i := 1 to 2 do
4280: LD_ADDR_VAR 0 2
4284: PUSH
4285: DOUBLE
4286: LD_INT 1
4288: DEC
4289: ST_TO_ADDR
4290: LD_INT 2
4292: PUSH
4293: FOR_TO
4294: IFFALSE 4370
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4296: LD_INT 0
4298: PPUSH
4299: LD_INT 16
4301: PPUSH
4302: LD_INT 4
4304: PPUSH
4305: CALL_OW 380
// un := CreateHuman ;
4309: LD_ADDR_VAR 0 3
4313: PUSH
4314: CALL_OW 44
4318: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4319: LD_ADDR_EXP 43
4323: PUSH
4324: LD_EXP 43
4328: PPUSH
4329: LD_EXP 43
4333: PUSH
4334: LD_INT 1
4336: PLUS
4337: PPUSH
4338: LD_VAR 0 3
4342: PPUSH
4343: CALL_OW 1
4347: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4348: LD_VAR 0 3
4352: PPUSH
4353: LD_INT 51
4355: PPUSH
4356: LD_INT 77
4358: PPUSH
4359: CALL_OW 428
4363: PPUSH
4364: CALL_OW 52
// end ;
4368: GO 4293
4370: POP
4371: POP
// end ;
4372: LD_VAR 0 1
4376: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4377: LD_EXP 42
4381: PPUSH
4382: LD_INT 3
4384: PUSH
4385: LD_INT 24
4387: PUSH
4388: LD_INT 600
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: PUSH
4399: LD_INT 3
4401: PUSH
4402: LD_INT 54
4404: PUSH
4405: EMPTY
4406: LIST
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PPUSH
4416: CALL_OW 72
4420: IFFALSE 4439
4422: PUSH
4423: LD_INT 66
4425: PPUSH
4426: LD_INT 89
4428: PPUSH
4429: CALL_OW 428
4433: PPUSH
4434: CALL_OW 302
4438: AND
4439: IFFALSE 4524
4441: GO 4443
4443: DISABLE
4444: LD_INT 0
4446: PPUSH
// begin enable ;
4447: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4448: LD_ADDR_VAR 0 1
4452: PUSH
4453: LD_EXP 42
4457: PPUSH
4458: LD_INT 3
4460: PUSH
4461: LD_INT 24
4463: PUSH
4464: LD_INT 600
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: LD_INT 3
4477: PUSH
4478: LD_INT 54
4480: PUSH
4481: EMPTY
4482: LIST
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PPUSH
4492: CALL_OW 72
4496: PUSH
4497: FOR_IN
4498: IFFALSE 4522
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4500: LD_VAR 0 1
4504: PPUSH
4505: LD_INT 66
4507: PPUSH
4508: LD_INT 89
4510: PPUSH
4511: CALL_OW 428
4515: PPUSH
4516: CALL_OW 120
4520: GO 4497
4522: POP
4523: POP
// end ;
4524: PPOPN 1
4526: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4527: LD_INT 22
4529: PUSH
4530: LD_INT 2
4532: PUSH
4533: EMPTY
4534: LIST
4535: LIST
4536: PUSH
4537: LD_INT 92
4539: PUSH
4540: LD_INT 54
4542: PUSH
4543: LD_INT 77
4545: PUSH
4546: LD_INT 8
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: PUSH
4555: EMPTY
4556: LIST
4557: LIST
4558: PPUSH
4559: CALL_OW 69
4563: IFFALSE 4627
4565: GO 4567
4567: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4568: LD_EXP 43
4572: PPUSH
4573: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4577: LD_EXP 43
4581: PPUSH
4582: LD_INT 22
4584: PUSH
4585: LD_INT 2
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: PUSH
4592: LD_INT 92
4594: PUSH
4595: LD_INT 54
4597: PUSH
4598: LD_INT 77
4600: PUSH
4601: LD_INT 8
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: LIST
4608: LIST
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: PPUSH
4614: CALL_OW 69
4618: PUSH
4619: LD_INT 1
4621: ARRAY
4622: PPUSH
4623: CALL_OW 175
// end ;
4627: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag , enemy ; begin
4628: LD_INT 0
4630: PPUSH
4631: PPUSH
4632: PPUSH
4633: PPUSH
4634: PPUSH
4635: PPUSH
4636: PPUSH
4637: PPUSH
4638: PPUSH
4639: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4640: LD_ADDR_VAR 0 3
4644: PUSH
4645: LD_INT 1
4647: PPUSH
4648: LD_INT 3
4650: PPUSH
4651: CALL_OW 12
4655: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4656: LD_ADDR_VAR 0 5
4660: PUSH
4661: LD_INT 16
4663: PUSH
4664: LD_INT 17
4666: PUSH
4667: LD_INT 19
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: LIST
4674: PUSH
4675: LD_VAR 0 3
4679: ARRAY
4680: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4681: LD_ADDR_VAR 0 7
4685: PUSH
4686: LD_INT 159
4688: PUSH
4689: LD_INT 25
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: PUSH
4696: LD_INT 137
4698: PUSH
4699: LD_INT 37
4701: PUSH
4702: EMPTY
4703: LIST
4704: LIST
4705: PUSH
4706: LD_INT 123
4708: PUSH
4709: LD_INT 55
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: PUSH
4716: LD_INT 115
4718: PUSH
4719: LD_INT 71
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: PUSH
4726: LD_INT 106
4728: PUSH
4729: LD_INT 88
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: PUSH
4736: LD_INT 97
4738: PUSH
4739: LD_INT 114
4741: PUSH
4742: EMPTY
4743: LIST
4744: LIST
4745: PUSH
4746: LD_INT 75
4748: PUSH
4749: LD_INT 146
4751: PUSH
4752: EMPTY
4753: LIST
4754: LIST
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: PUSH
4765: LD_INT 206
4767: PUSH
4768: LD_INT 135
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: PUSH
4775: LD_INT 184
4777: PUSH
4778: LD_INT 111
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: PUSH
4785: LD_INT 154
4787: PUSH
4788: LD_INT 97
4790: PUSH
4791: EMPTY
4792: LIST
4793: LIST
4794: PUSH
4795: LD_INT 122
4797: PUSH
4798: LD_INT 80
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: PUSH
4805: LD_INT 109
4807: PUSH
4808: LD_INT 78
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: PUSH
4815: LD_INT 97
4817: PUSH
4818: LD_INT 113
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: PUSH
4825: LD_INT 75
4827: PUSH
4828: LD_INT 147
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 185
4846: PUSH
4847: LD_INT 72
4849: PUSH
4850: EMPTY
4851: LIST
4852: LIST
4853: PUSH
4854: LD_INT 171
4856: PUSH
4857: LD_INT 83
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: PUSH
4864: LD_INT 161
4866: PUSH
4867: LD_INT 99
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 125
4876: PUSH
4877: LD_INT 82
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: LD_INT 105
4886: PUSH
4887: LD_INT 90
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: PUSH
4894: LD_INT 96
4896: PUSH
4897: LD_INT 116
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 75
4906: PUSH
4907: LD_INT 147
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: LIST
4927: PUSH
4928: LD_VAR 0 3
4932: ARRAY
4933: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4934: LD_ADDR_VAR 0 4
4938: PUSH
4939: LD_INT 4
4941: PUSH
4942: LD_INT 5
4944: PUSH
4945: LD_INT 3
4947: PUSH
4948: EMPTY
4949: LIST
4950: LIST
4951: LIST
4952: PUSH
4953: LD_VAR 0 3
4957: ARRAY
4958: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4959: LD_ADDR_VAR 0 6
4963: PUSH
4964: LD_INT 22
4966: PUSH
4967: LD_INT 20
4969: PUSH
4970: LD_INT 21
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: LIST
4977: PUSH
4978: LD_VAR 0 3
4982: ARRAY
4983: ST_TO_ADDR
// for i := 1 to 2 do
4984: LD_ADDR_VAR 0 2
4988: PUSH
4989: DOUBLE
4990: LD_INT 1
4992: DEC
4993: ST_TO_ADDR
4994: LD_INT 2
4996: PUSH
4997: FOR_TO
4998: IFFALSE 5016
// EraseResourceArea ( i , outerSpawnArea ) ;
5000: LD_VAR 0 2
5004: PPUSH
5005: LD_VAR 0 6
5009: PPUSH
5010: CALL_OW 286
5014: GO 4997
5016: POP
5017: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5018: LD_VAR 0 6
5022: PPUSH
5023: LD_INT 2
5025: PUSH
5026: LD_INT 21
5028: PUSH
5029: LD_INT 1
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 21
5038: PUSH
5039: LD_INT 2
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: LD_INT 21
5048: PUSH
5049: LD_INT 3
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: LIST
5060: LIST
5061: PPUSH
5062: CALL_OW 70
5066: IFFALSE 5281
// repeat wait ( 0 0$1 ) ;
5068: LD_INT 35
5070: PPUSH
5071: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
5075: LD_VAR 0 6
5079: PPUSH
5080: LD_INT 2
5082: PUSH
5083: LD_INT 21
5085: PUSH
5086: LD_INT 2
5088: PUSH
5089: EMPTY
5090: LIST
5091: LIST
5092: PUSH
5093: LD_INT 21
5095: PUSH
5096: LD_INT 3
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PUSH
5103: EMPTY
5104: LIST
5105: LIST
5106: LIST
5107: PPUSH
5108: CALL_OW 70
5112: IFFALSE 5173
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5114: LD_ADDR_VAR 0 2
5118: PUSH
5119: LD_VAR 0 6
5123: PPUSH
5124: LD_INT 2
5126: PUSH
5127: LD_INT 21
5129: PUSH
5130: LD_INT 2
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: PUSH
5137: LD_INT 21
5139: PUSH
5140: LD_INT 3
5142: PUSH
5143: EMPTY
5144: LIST
5145: LIST
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: LIST
5151: PPUSH
5152: CALL_OW 70
5156: PUSH
5157: FOR_IN
5158: IFFALSE 5171
// RemoveUnit ( i ) ;
5160: LD_VAR 0 2
5164: PPUSH
5165: CALL_OW 64
5169: GO 5157
5171: POP
5172: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5173: LD_VAR 0 6
5177: PPUSH
5178: LD_INT 21
5180: PUSH
5181: LD_INT 1
5183: PUSH
5184: EMPTY
5185: LIST
5186: LIST
5187: PPUSH
5188: CALL_OW 70
5192: IFFALSE 5241
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5194: LD_ADDR_VAR 0 2
5198: PUSH
5199: LD_VAR 0 6
5203: PPUSH
5204: LD_INT 21
5206: PUSH
5207: LD_INT 1
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: PPUSH
5214: CALL_OW 70
5218: PUSH
5219: FOR_IN
5220: IFFALSE 5239
// ComMoveXY ( i , 113 , 53 ) ;
5222: LD_VAR 0 2
5226: PPUSH
5227: LD_INT 113
5229: PPUSH
5230: LD_INT 53
5232: PPUSH
5233: CALL_OW 111
5237: GO 5219
5239: POP
5240: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5241: LD_VAR 0 6
5245: PPUSH
5246: LD_INT 2
5248: PUSH
5249: LD_INT 21
5251: PUSH
5252: LD_INT 1
5254: PUSH
5255: EMPTY
5256: LIST
5257: LIST
5258: PUSH
5259: LD_INT 21
5261: PUSH
5262: LD_INT 2
5264: PUSH
5265: EMPTY
5266: LIST
5267: LIST
5268: PUSH
5269: EMPTY
5270: LIST
5271: LIST
5272: LIST
5273: PPUSH
5274: CALL_OW 70
5278: NOT
5279: IFFALSE 5068
// case convoyCounter of 1 .. 3 :
5281: LD_EXP 16
5285: PUSH
5286: LD_INT 1
5288: DOUBLE
5289: GREATEREQUAL
5290: IFFALSE 5298
5292: LD_INT 3
5294: DOUBLE
5295: LESSEQUAL
5296: IFTRUE 5300
5298: GO 5935
5300: POP
// begin for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] - convoyCounter do
5301: LD_ADDR_VAR 0 2
5305: PUSH
5306: DOUBLE
5307: LD_INT 1
5309: DEC
5310: ST_TO_ADDR
5311: LD_INT 5
5313: PUSH
5314: LD_INT 6
5316: PUSH
5317: LD_INT 7
5319: PUSH
5320: LD_INT 8
5322: PUSH
5323: EMPTY
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: PUSH
5329: LD_OWVAR 67
5333: ARRAY
5334: PUSH
5335: LD_EXP 16
5339: MINUS
5340: PUSH
5341: FOR_TO
5342: IFFALSE 5549
// begin uc_side := 3 ;
5344: LD_ADDR_OWVAR 20
5348: PUSH
5349: LD_INT 3
5351: ST_TO_ADDR
// uc_nation := 3 ;
5352: LD_ADDR_OWVAR 21
5356: PUSH
5357: LD_INT 3
5359: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5360: LD_INT 0
5362: PPUSH
5363: LD_INT 1
5365: PUSH
5366: LD_INT 1
5368: PUSH
5369: LD_INT 1
5371: PUSH
5372: LD_INT 4
5374: PUSH
5375: EMPTY
5376: LIST
5377: LIST
5378: LIST
5379: LIST
5380: PUSH
5381: LD_INT 1
5383: PPUSH
5384: LD_INT 4
5386: PPUSH
5387: CALL_OW 12
5391: ARRAY
5392: PPUSH
5393: LD_INT 4
5395: PUSH
5396: LD_INT 5
5398: PUSH
5399: LD_INT 6
5401: PUSH
5402: LD_INT 7
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: PUSH
5411: LD_OWVAR 67
5415: ARRAY
5416: PPUSH
5417: CALL_OW 380
// un := CreateHuman ;
5421: LD_ADDR_VAR 0 8
5425: PUSH
5426: CALL_OW 44
5430: ST_TO_ADDR
// SetDir ( un , dir ) ;
5431: LD_VAR 0 8
5435: PPUSH
5436: LD_VAR 0 4
5440: PPUSH
5441: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5445: LD_VAR 0 8
5449: PPUSH
5450: LD_VAR 0 5
5454: PPUSH
5455: LD_INT 0
5457: PPUSH
5458: CALL 74873 0 3
5462: IFFALSE 5547
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5464: LD_ADDR_EXP 41
5468: PUSH
5469: LD_EXP 41
5473: PPUSH
5474: LD_EXP 41
5478: PUSH
5479: LD_INT 1
5481: PLUS
5482: PPUSH
5483: LD_VAR 0 8
5487: PPUSH
5488: CALL_OW 1
5492: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5493: LD_VAR 0 8
5497: PPUSH
5498: LD_INT 1
5500: PPUSH
5501: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5505: LD_VAR 0 8
5509: PPUSH
5510: LD_VAR 0 7
5514: PUSH
5515: LD_INT 1
5517: ARRAY
5518: PUSH
5519: LD_INT 1
5521: ARRAY
5522: PPUSH
5523: LD_VAR 0 7
5527: PUSH
5528: LD_INT 1
5530: ARRAY
5531: PUSH
5532: LD_INT 2
5534: ARRAY
5535: PPUSH
5536: CALL_OW 111
// wait ( 0 0$2 ) ;
5540: LD_INT 70
5542: PPUSH
5543: CALL_OW 67
// end ; end ;
5547: GO 5341
5549: POP
5550: POP
// for i := 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
5551: LD_ADDR_VAR 0 2
5555: PUSH
5556: DOUBLE
5557: LD_INT 1
5559: DEC
5560: ST_TO_ADDR
5561: LD_INT 3
5563: PUSH
5564: LD_INT 4
5566: PUSH
5567: LD_INT 4
5569: PUSH
5570: LD_INT 4
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: PUSH
5579: LD_OWVAR 67
5583: ARRAY
5584: PUSH
5585: FOR_TO
5586: IFFALSE 5931
// begin uc_side := 3 ;
5588: LD_ADDR_OWVAR 20
5592: PUSH
5593: LD_INT 3
5595: ST_TO_ADDR
// uc_nation := 3 ;
5596: LD_ADDR_OWVAR 21
5600: PUSH
5601: LD_INT 3
5603: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5604: LD_INT 3
5606: PPUSH
5607: LD_INT 3
5609: PPUSH
5610: LD_INT 21
5612: PUSH
5613: LD_INT 22
5615: PUSH
5616: LD_INT 23
5618: PUSH
5619: LD_INT 24
5621: PUSH
5622: LD_INT 24
5624: PUSH
5625: LD_INT 24
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: PUSH
5636: LD_OWVAR 67
5640: PPUSH
5641: LD_OWVAR 67
5645: PUSH
5646: LD_INT 2
5648: PLUS
5649: PPUSH
5650: CALL_OW 12
5654: ARRAY
5655: PPUSH
5656: LD_INT 1
5658: PPUSH
5659: LD_INT 1
5661: PPUSH
5662: LD_INT 42
5664: PUSH
5665: LD_INT 44
5667: PUSH
5668: LD_INT 43
5670: PUSH
5671: LD_INT 44
5673: PUSH
5674: LD_INT 46
5676: PUSH
5677: LD_INT 46
5679: PUSH
5680: EMPTY
5681: LIST
5682: LIST
5683: LIST
5684: LIST
5685: LIST
5686: LIST
5687: PUSH
5688: LD_INT 1
5690: PPUSH
5691: LD_OWVAR 67
5695: PUSH
5696: LD_INT 2
5698: PLUS
5699: PPUSH
5700: CALL_OW 12
5704: ARRAY
5705: PPUSH
5706: LD_INT 90
5708: PPUSH
5709: CALL 453 0 7
// un := CreateVehicle ;
5713: LD_ADDR_VAR 0 8
5717: PUSH
5718: CALL_OW 45
5722: ST_TO_ADDR
// SetDir ( un , dir ) ;
5723: LD_VAR 0 8
5727: PPUSH
5728: LD_VAR 0 4
5732: PPUSH
5733: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5737: LD_VAR 0 8
5741: PPUSH
5742: LD_VAR 0 5
5746: PPUSH
5747: LD_INT 0
5749: PPUSH
5750: CALL 74873 0 3
5754: IFFALSE 5929
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5756: LD_ADDR_EXP 41
5760: PUSH
5761: LD_EXP 41
5765: PPUSH
5766: LD_EXP 41
5770: PUSH
5771: LD_INT 1
5773: PLUS
5774: PPUSH
5775: LD_VAR 0 8
5779: PPUSH
5780: CALL_OW 1
5784: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
5785: LD_INT 0
5787: PPUSH
5788: LD_INT 3
5790: PUSH
5791: LD_INT 4
5793: PUSH
5794: LD_INT 5
5796: PUSH
5797: LD_INT 6
5799: PUSH
5800: EMPTY
5801: LIST
5802: LIST
5803: LIST
5804: LIST
5805: PUSH
5806: LD_OWVAR 67
5810: ARRAY
5811: PPUSH
5812: CALL_OW 383
// un := CreateHuman ;
5816: LD_ADDR_VAR 0 8
5820: PUSH
5821: CALL_OW 44
5825: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5826: LD_VAR 0 8
5830: PPUSH
5831: LD_EXP 41
5835: PUSH
5836: LD_EXP 41
5840: ARRAY
5841: PPUSH
5842: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5846: LD_ADDR_EXP 41
5850: PUSH
5851: LD_EXP 41
5855: PPUSH
5856: LD_EXP 41
5860: PUSH
5861: LD_INT 1
5863: PLUS
5864: PPUSH
5865: LD_VAR 0 8
5869: PPUSH
5870: CALL_OW 1
5874: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5875: LD_VAR 0 8
5879: PPUSH
5880: LD_INT 1
5882: PPUSH
5883: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5887: LD_VAR 0 8
5891: PPUSH
5892: LD_VAR 0 7
5896: PUSH
5897: LD_INT 1
5899: ARRAY
5900: PUSH
5901: LD_INT 1
5903: ARRAY
5904: PPUSH
5905: LD_VAR 0 7
5909: PUSH
5910: LD_INT 1
5912: ARRAY
5913: PUSH
5914: LD_INT 2
5916: ARRAY
5917: PPUSH
5918: CALL_OW 111
// wait ( 0 0$3 ) ;
5922: LD_INT 105
5924: PPUSH
5925: CALL_OW 67
// end ; end ;
5929: GO 5585
5931: POP
5932: POP
// end ; 4 .. 7 :
5933: GO 6540
5935: LD_INT 4
5937: DOUBLE
5938: GREATEREQUAL
5939: IFFALSE 5947
5941: LD_INT 7
5943: DOUBLE
5944: LESSEQUAL
5945: IFTRUE 5949
5947: GO 6539
5949: POP
// begin for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
5950: LD_ADDR_VAR 0 2
5954: PUSH
5955: DOUBLE
5956: LD_INT 1
5958: DEC
5959: ST_TO_ADDR
5960: LD_INT 2
5962: PUSH
5963: LD_INT 3
5965: PUSH
5966: LD_INT 4
5968: PUSH
5969: LD_INT 4
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: PUSH
5978: LD_OWVAR 67
5982: ARRAY
5983: PUSH
5984: FOR_TO
5985: IFFALSE 6165
// begin uc_side := 3 ;
5987: LD_ADDR_OWVAR 20
5991: PUSH
5992: LD_INT 3
5994: ST_TO_ADDR
// uc_nation := 3 ;
5995: LD_ADDR_OWVAR 21
5999: PUSH
6000: LD_INT 3
6002: ST_TO_ADDR
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
6003: LD_INT 0
6005: PPUSH
6006: LD_INT 1
6008: PPUSH
6009: LD_INT 4
6011: PUSH
6012: LD_INT 5
6014: PUSH
6015: LD_INT 6
6017: PUSH
6018: LD_INT 7
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: PUSH
6027: LD_OWVAR 67
6031: ARRAY
6032: PPUSH
6033: CALL_OW 380
// un := CreateHuman ;
6037: LD_ADDR_VAR 0 8
6041: PUSH
6042: CALL_OW 44
6046: ST_TO_ADDR
// SetDir ( un , dir ) ;
6047: LD_VAR 0 8
6051: PPUSH
6052: LD_VAR 0 4
6056: PPUSH
6057: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6061: LD_VAR 0 8
6065: PPUSH
6066: LD_VAR 0 5
6070: PPUSH
6071: LD_INT 0
6073: PPUSH
6074: CALL 74873 0 3
6078: IFFALSE 6163
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6080: LD_ADDR_EXP 41
6084: PUSH
6085: LD_EXP 41
6089: PPUSH
6090: LD_EXP 41
6094: PUSH
6095: LD_INT 1
6097: PLUS
6098: PPUSH
6099: LD_VAR 0 8
6103: PPUSH
6104: CALL_OW 1
6108: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6109: LD_VAR 0 8
6113: PPUSH
6114: LD_INT 1
6116: PPUSH
6117: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6121: LD_VAR 0 8
6125: PPUSH
6126: LD_VAR 0 7
6130: PUSH
6131: LD_INT 1
6133: ARRAY
6134: PUSH
6135: LD_INT 1
6137: ARRAY
6138: PPUSH
6139: LD_VAR 0 7
6143: PUSH
6144: LD_INT 1
6146: ARRAY
6147: PUSH
6148: LD_INT 2
6150: ARRAY
6151: PPUSH
6152: CALL_OW 111
// wait ( 0 0$2 ) ;
6156: LD_INT 70
6158: PPUSH
6159: CALL_OW 67
// end ; end ;
6163: GO 5984
6165: POP
6166: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
6167: LD_ADDR_VAR 0 2
6171: PUSH
6172: DOUBLE
6173: LD_INT 1
6175: DEC
6176: ST_TO_ADDR
6177: LD_INT 2
6179: PUSH
6180: LD_INT 3
6182: PUSH
6183: LD_INT 3
6185: PUSH
6186: LD_INT 4
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: PUSH
6195: LD_OWVAR 67
6199: ARRAY
6200: PUSH
6201: FOR_TO
6202: IFFALSE 6535
// begin uc_side := 3 ;
6204: LD_ADDR_OWVAR 20
6208: PUSH
6209: LD_INT 3
6211: ST_TO_ADDR
// uc_nation := 3 ;
6212: LD_ADDR_OWVAR 21
6216: PUSH
6217: LD_INT 3
6219: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6220: LD_INT 3
6222: PPUSH
6223: LD_INT 3
6225: PPUSH
6226: LD_INT 21
6228: PUSH
6229: LD_INT 22
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PUSH
6236: LD_INT 1
6238: PPUSH
6239: LD_INT 2
6241: PPUSH
6242: CALL_OW 12
6246: ARRAY
6247: PPUSH
6248: LD_INT 1
6250: PPUSH
6251: LD_INT 1
6253: PPUSH
6254: LD_INT 42
6256: PUSH
6257: LD_INT 44
6259: PUSH
6260: LD_INT 43
6262: PUSH
6263: LD_INT 44
6265: PUSH
6266: LD_INT 44
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: PUSH
6276: LD_INT 1
6278: PPUSH
6279: LD_OWVAR 67
6283: PUSH
6284: LD_INT 1
6286: PLUS
6287: PPUSH
6288: CALL_OW 12
6292: ARRAY
6293: PPUSH
6294: LD_INT 90
6296: PPUSH
6297: CALL 453 0 7
// un := CreateVehicle ;
6301: LD_ADDR_VAR 0 8
6305: PUSH
6306: CALL_OW 45
6310: ST_TO_ADDR
// SetDir ( un , dir ) ;
6311: LD_VAR 0 8
6315: PPUSH
6316: LD_VAR 0 4
6320: PPUSH
6321: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6325: LD_VAR 0 8
6329: PPUSH
6330: LD_VAR 0 5
6334: PPUSH
6335: LD_INT 0
6337: PPUSH
6338: CALL 74873 0 3
6342: IFFALSE 6533
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6344: LD_ADDR_EXP 41
6348: PUSH
6349: LD_EXP 41
6353: PPUSH
6354: LD_EXP 41
6358: PUSH
6359: LD_INT 1
6361: PLUS
6362: PPUSH
6363: LD_VAR 0 8
6367: PPUSH
6368: CALL_OW 1
6372: ST_TO_ADDR
// uc_side := 3 ;
6373: LD_ADDR_OWVAR 20
6377: PUSH
6378: LD_INT 3
6380: ST_TO_ADDR
// uc_nation := 3 ;
6381: LD_ADDR_OWVAR 21
6385: PUSH
6386: LD_INT 3
6388: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
6389: LD_INT 0
6391: PPUSH
6392: LD_INT 3
6394: PUSH
6395: LD_INT 4
6397: PUSH
6398: LD_INT 5
6400: PUSH
6401: LD_INT 6
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: PUSH
6410: LD_OWVAR 67
6414: ARRAY
6415: PPUSH
6416: CALL_OW 383
// un := CreateHuman ;
6420: LD_ADDR_VAR 0 8
6424: PUSH
6425: CALL_OW 44
6429: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6430: LD_VAR 0 8
6434: PPUSH
6435: LD_EXP 41
6439: PUSH
6440: LD_EXP 41
6444: ARRAY
6445: PPUSH
6446: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6450: LD_ADDR_EXP 41
6454: PUSH
6455: LD_EXP 41
6459: PPUSH
6460: LD_EXP 41
6464: PUSH
6465: LD_INT 1
6467: PLUS
6468: PPUSH
6469: LD_VAR 0 8
6473: PPUSH
6474: CALL_OW 1
6478: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6479: LD_VAR 0 8
6483: PPUSH
6484: LD_INT 1
6486: PPUSH
6487: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6491: LD_VAR 0 8
6495: PPUSH
6496: LD_VAR 0 7
6500: PUSH
6501: LD_INT 1
6503: ARRAY
6504: PUSH
6505: LD_INT 1
6507: ARRAY
6508: PPUSH
6509: LD_VAR 0 7
6513: PUSH
6514: LD_INT 1
6516: ARRAY
6517: PUSH
6518: LD_INT 2
6520: ARRAY
6521: PPUSH
6522: CALL_OW 111
// wait ( 0 0$2 ) ;
6526: LD_INT 70
6528: PPUSH
6529: CALL_OW 67
// end ; end ;
6533: GO 6201
6535: POP
6536: POP
// end ; end ;
6537: GO 6540
6539: POP
// repeat wait ( 0 0$1 ) ;
6540: LD_INT 35
6542: PPUSH
6543: CALL_OW 67
// for un in ruConvoySquad do
6547: LD_ADDR_VAR 0 8
6551: PUSH
6552: LD_EXP 41
6556: PUSH
6557: FOR_IN
6558: IFFALSE 7188
// begin if IsInArea ( un , westSouthOutArea ) then
6560: LD_VAR 0 8
6564: PPUSH
6565: LD_INT 18
6567: PPUSH
6568: CALL_OW 308
6572: IFFALSE 6660
// begin if GetType ( un ) = unit_vehicle then
6574: LD_VAR 0 8
6578: PPUSH
6579: CALL_OW 247
6583: PUSH
6584: LD_INT 2
6586: EQUAL
6587: IFFALSE 6619
// begin ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6589: LD_ADDR_EXP 41
6593: PUSH
6594: LD_EXP 41
6598: PUSH
6599: LD_VAR 0 8
6603: PPUSH
6604: CALL_OW 311
6608: DIFF
6609: ST_TO_ADDR
// RemoveUnit ( un ) ;
6610: LD_VAR 0 8
6614: PPUSH
6615: CALL_OW 64
// end ; convoySavedCounter := convoySavedCounter + 1 ;
6619: LD_ADDR_EXP 15
6623: PUSH
6624: LD_EXP 15
6628: PUSH
6629: LD_INT 1
6631: PLUS
6632: ST_TO_ADDR
// ruConvoySquad := ruConvoySquad diff un ;
6633: LD_ADDR_EXP 41
6637: PUSH
6638: LD_EXP 41
6642: PUSH
6643: LD_VAR 0 8
6647: DIFF
6648: ST_TO_ADDR
// RemoveUnit ( un ) ;
6649: LD_VAR 0 8
6653: PPUSH
6654: CALL_OW 64
// break ;
6658: GO 7188
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6660: LD_VAR 0 8
6664: PPUSH
6665: CALL_OW 305
6669: NOT
6670: IFFALSE 6684
6672: PUSH
6673: LD_VAR 0 8
6677: PPUSH
6678: CALL_OW 310
6682: NOT
6683: AND
6684: IFFALSE 6702
// ruConvoySquad := ruConvoySquad diff un ;
6686: LD_ADDR_EXP 41
6690: PUSH
6691: LD_EXP 41
6695: PUSH
6696: LD_VAR 0 8
6700: DIFF
6701: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6702: LD_VAR 0 8
6706: PPUSH
6707: CALL_OW 302
6711: IFFALSE 6725
6713: PUSH
6714: LD_VAR 0 8
6718: PPUSH
6719: CALL_OW 314
6723: NOT
6724: AND
6725: IFFALSE 7186
// begin tag := GetTag ( un ) ;
6727: LD_ADDR_VAR 0 9
6731: PUSH
6732: LD_VAR 0 8
6736: PPUSH
6737: CALL_OW 110
6741: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6742: LD_VAR 0 8
6746: PPUSH
6747: LD_VAR 0 7
6751: PUSH
6752: LD_VAR 0 9
6756: PUSH
6757: LD_INT 1
6759: PLUS
6760: ARRAY
6761: PUSH
6762: LD_INT 1
6764: ARRAY
6765: PPUSH
6766: LD_VAR 0 7
6770: PUSH
6771: LD_VAR 0 9
6775: PUSH
6776: LD_INT 1
6778: PLUS
6779: ARRAY
6780: PUSH
6781: LD_INT 2
6783: ARRAY
6784: PPUSH
6785: CALL_OW 297
6789: PUSH
6790: LD_INT 6
6792: LESS
6793: IFFALSE 6978
// begin SetTag ( un , tag + 1 ) ;
6795: LD_VAR 0 8
6799: PPUSH
6800: LD_VAR 0 9
6804: PUSH
6805: LD_INT 1
6807: PLUS
6808: PPUSH
6809: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6813: LD_VAR 0 8
6817: PPUSH
6818: CALL_OW 247
6822: PUSH
6823: LD_INT 2
6825: EQUAL
6826: IFTRUE 6843
6828: PUSH
6829: LD_VAR 0 8
6833: PPUSH
6834: CALL_OW 257
6838: PUSH
6839: LD_INT 3
6841: EQUAL
6842: OR
6843: IFFALSE 6976
// begin enemy := FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , un , 8 ] ] ) ;
6845: LD_ADDR_VAR 0 10
6849: PUSH
6850: LD_INT 22
6852: PUSH
6853: LD_INT 2
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: PUSH
6860: LD_INT 91
6862: PUSH
6863: LD_VAR 0 8
6867: PUSH
6868: LD_INT 8
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: LIST
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PPUSH
6880: CALL_OW 69
6884: ST_TO_ADDR
// if enemy then
6885: LD_VAR 0 10
6889: IFFALSE 6917
// ComAttackUnit ( un , NearestUnitToUnit ( enemy , un ) ) else
6891: LD_VAR 0 8
6895: PPUSH
6896: LD_VAR 0 10
6900: PPUSH
6901: LD_VAR 0 8
6905: PPUSH
6906: CALL_OW 74
6910: PPUSH
6911: CALL_OW 115
6915: GO 6976
// begin AddComWait ( un , 0 0$4 ) ;
6917: LD_VAR 0 8
6921: PPUSH
6922: LD_INT 140
6924: PPUSH
6925: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6929: LD_VAR 0 8
6933: PPUSH
6934: LD_VAR 0 7
6938: PUSH
6939: LD_VAR 0 9
6943: PUSH
6944: LD_INT 1
6946: PLUS
6947: ARRAY
6948: PUSH
6949: LD_INT 1
6951: ARRAY
6952: PPUSH
6953: LD_VAR 0 7
6957: PUSH
6958: LD_VAR 0 9
6962: PUSH
6963: LD_INT 1
6965: PLUS
6966: ARRAY
6967: PUSH
6968: LD_INT 2
6970: ARRAY
6971: PPUSH
6972: CALL_OW 174
// end ; end ; end else
6976: GO 7186
// begin if GetClass ( un ) = 4 then
6978: LD_VAR 0 8
6982: PPUSH
6983: CALL_OW 257
6987: PUSH
6988: LD_INT 4
6990: EQUAL
6991: IFFALSE 7139
// begin if UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6993: LD_EXP 41
6997: PPUSH
6998: LD_INT 21
7000: PUSH
7001: LD_INT 1
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: PUSH
7008: LD_INT 3
7010: PUSH
7011: LD_INT 24
7013: PUSH
7014: LD_INT 1000
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PPUSH
7029: CALL_OW 72
7033: IFFALSE 7091
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
7035: LD_VAR 0 8
7039: PPUSH
7040: LD_EXP 41
7044: PPUSH
7045: LD_INT 21
7047: PUSH
7048: LD_INT 1
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: PUSH
7055: LD_INT 3
7057: PUSH
7058: LD_INT 24
7060: PUSH
7061: LD_INT 1000
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PPUSH
7076: CALL_OW 72
7080: PUSH
7081: LD_INT 1
7083: ARRAY
7084: PPUSH
7085: CALL_OW 128
7089: GO 7137
// ComMoveUnit ( un , NearestUnitToUnit ( UnitFilter ( ruConvoySquad , [ f_not , [ f_class , 4 ] ] ) , un ) ) end else
7091: LD_VAR 0 8
7095: PPUSH
7096: LD_EXP 41
7100: PPUSH
7101: LD_INT 3
7103: PUSH
7104: LD_INT 25
7106: PUSH
7107: LD_INT 4
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: PPUSH
7118: CALL_OW 72
7122: PPUSH
7123: LD_VAR 0 8
7127: PPUSH
7128: CALL_OW 74
7132: PPUSH
7133: CALL_OW 112
7137: GO 7186
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7139: LD_VAR 0 8
7143: PPUSH
7144: LD_VAR 0 7
7148: PUSH
7149: LD_VAR 0 9
7153: PUSH
7154: LD_INT 1
7156: PLUS
7157: ARRAY
7158: PUSH
7159: LD_INT 1
7161: ARRAY
7162: PPUSH
7163: LD_VAR 0 7
7167: PUSH
7168: LD_VAR 0 9
7172: PUSH
7173: LD_INT 1
7175: PLUS
7176: ARRAY
7177: PUSH
7178: LD_INT 2
7180: ARRAY
7181: PPUSH
7182: CALL_OW 114
// end ; end ; end ;
7186: GO 6557
7188: POP
7189: POP
// until not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ;
7190: LD_EXP 41
7194: PPUSH
7195: LD_INT 52
7197: PUSH
7198: EMPTY
7199: LIST
7200: PUSH
7201: LD_INT 21
7203: PUSH
7204: LD_INT 1
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PPUSH
7215: CALL_OW 72
7219: NOT
7220: IFFALSE 6540
// end ;
7222: LD_VAR 0 1
7226: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
7227: LD_EXP 16
7231: PUSH
7232: LD_INT 3
7234: PPUSH
7235: LD_INT 5
7237: PPUSH
7238: CALL_OW 12
7242: LESS
7243: IFFALSE 7252
7245: PUSH
7246: LD_EXP 41
7250: NOT
7251: AND
7252: IFFALSE 7264
7254: PUSH
7255: LD_OWVAR 67
7259: PUSH
7260: LD_INT 1
7262: GREATER
7263: AND
7264: IFFALSE 7684
7266: GO 7268
7268: DISABLE
7269: LD_INT 0
7271: PPUSH
7272: PPUSH
7273: PPUSH
// begin for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
7274: LD_ADDR_VAR 0 1
7278: PUSH
7279: DOUBLE
7280: LD_INT 1
7282: DEC
7283: ST_TO_ADDR
7284: LD_INT 2
7286: PUSH
7287: LD_INT 3
7289: PUSH
7290: LD_INT 4
7292: PUSH
7293: LD_INT 5
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: PUSH
7302: LD_OWVAR 67
7306: ARRAY
7307: PUSH
7308: FOR_TO
7309: IFFALSE 7605
// begin uc_side := 3 ;
7311: LD_ADDR_OWVAR 20
7315: PUSH
7316: LD_INT 3
7318: ST_TO_ADDR
// uc_nation := 3 ;
7319: LD_ADDR_OWVAR 21
7323: PUSH
7324: LD_INT 3
7326: ST_TO_ADDR
// PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
7327: LD_INT 3
7329: PPUSH
7330: LD_INT 3
7332: PPUSH
7333: LD_INT 21
7335: PUSH
7336: LD_INT 22
7338: PUSH
7339: LD_INT 23
7341: PUSH
7342: LD_INT 24
7344: PUSH
7345: LD_INT 24
7347: PUSH
7348: LD_INT 24
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: PUSH
7359: LD_OWVAR 67
7363: PPUSH
7364: LD_OWVAR 67
7368: PUSH
7369: LD_INT 2
7371: PLUS
7372: PPUSH
7373: CALL_OW 12
7377: ARRAY
7378: PPUSH
7379: LD_INT 1
7381: PPUSH
7382: LD_INT 1
7384: PPUSH
7385: LD_INT 42
7387: PUSH
7388: LD_INT 44
7390: PUSH
7391: LD_INT 43
7393: PUSH
7394: LD_INT 44
7396: PUSH
7397: LD_INT 46
7399: PUSH
7400: LD_INT 46
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: PUSH
7411: LD_INT 1
7413: PPUSH
7414: LD_OWVAR 67
7418: PUSH
7419: LD_INT 2
7421: PLUS
7422: PPUSH
7423: CALL_OW 12
7427: ARRAY
7428: PPUSH
7429: LD_INT 90
7431: PPUSH
7432: CALL 453 0 7
// un := CreateVehicle ;
7436: LD_ADDR_VAR 0 3
7440: PUSH
7441: CALL_OW 45
7445: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7446: LD_VAR 0 3
7450: PPUSH
7451: LD_INT 0
7453: PPUSH
7454: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7458: LD_VAR 0 3
7462: PPUSH
7463: LD_INT 23
7465: PPUSH
7466: LD_INT 0
7468: PPUSH
7469: CALL 74873 0 3
7473: IFFALSE 7603
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7475: LD_ADDR_VAR 0 2
7479: PUSH
7480: LD_VAR 0 2
7484: PPUSH
7485: LD_VAR 0 2
7489: PUSH
7490: LD_INT 1
7492: PLUS
7493: PPUSH
7494: LD_VAR 0 3
7498: PPUSH
7499: CALL_OW 1
7503: ST_TO_ADDR
// uc_side := 3 ;
7504: LD_ADDR_OWVAR 20
7508: PUSH
7509: LD_INT 3
7511: ST_TO_ADDR
// uc_nation := 3 ;
7512: LD_ADDR_OWVAR 21
7516: PUSH
7517: LD_INT 3
7519: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
7520: LD_INT 0
7522: PPUSH
7523: LD_INT 3
7525: PUSH
7526: LD_INT 4
7528: PUSH
7529: LD_INT 5
7531: PUSH
7532: LD_INT 6
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: PUSH
7541: LD_OWVAR 67
7545: ARRAY
7546: PPUSH
7547: CALL_OW 383
// un := CreateHuman ;
7551: LD_ADDR_VAR 0 3
7555: PUSH
7556: CALL_OW 44
7560: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7561: LD_VAR 0 3
7565: PPUSH
7566: LD_VAR 0 2
7570: PUSH
7571: LD_VAR 0 2
7575: ARRAY
7576: PPUSH
7577: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7581: LD_VAR 0 3
7585: PPUSH
7586: LD_INT 80
7588: PPUSH
7589: LD_INT 139
7591: PPUSH
7592: CALL_OW 111
// wait ( 0 0$3 ) ;
7596: LD_INT 105
7598: PPUSH
7599: CALL_OW 67
// end ; end ;
7603: GO 7308
7605: POP
7606: POP
// for i in tmp do
7607: LD_ADDR_VAR 0 1
7611: PUSH
7612: LD_VAR 0 2
7616: PUSH
7617: FOR_IN
7618: IFFALSE 7682
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7620: LD_VAR 0 1
7624: PPUSH
7625: LD_INT 101
7627: PPUSH
7628: LD_INT 102
7630: PPUSH
7631: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7635: LD_VAR 0 1
7639: PPUSH
7640: LD_INT 110
7642: PPUSH
7643: LD_INT 78
7645: PPUSH
7646: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7650: LD_VAR 0 1
7654: PPUSH
7655: LD_INT 75
7657: PPUSH
7658: LD_INT 101
7660: PPUSH
7661: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7665: LD_VAR 0 1
7669: PPUSH
7670: LD_INT 57
7672: PPUSH
7673: LD_INT 83
7675: PPUSH
7676: CALL_OW 174
// end ;
7680: GO 7617
7682: POP
7683: POP
// end ;
7684: PPOPN 3
7686: END
// every 0 0$1 trigger UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) or UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do var i ;
7687: LD_EXP 39
7691: PPUSH
7692: LD_INT 3
7694: PUSH
7695: LD_INT 24
7697: PUSH
7698: LD_INT 1000
7700: PUSH
7701: EMPTY
7702: LIST
7703: LIST
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: PPUSH
7709: CALL_OW 72
7713: IFTRUE 7743
7715: PUSH
7716: LD_EXP 40
7720: PPUSH
7721: LD_INT 3
7723: PUSH
7724: LD_INT 24
7726: PUSH
7727: LD_INT 1000
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: PPUSH
7738: CALL_OW 72
7742: OR
7743: IFFALSE 7842
7745: GO 7747
7747: DISABLE
7748: LD_INT 0
7750: PPUSH
// begin enable ;
7751: ENABLE
// for i in UnitFilter ( ruNorthGroup , [ f_not , [ f_lives , 1000 ] ] ) union UnitFilter ( ruSouthGroup , [ f_not , [ f_lives , 1000 ] ] ) do
7752: LD_ADDR_VAR 0 1
7756: PUSH
7757: LD_EXP 39
7761: PPUSH
7762: LD_INT 3
7764: PUSH
7765: LD_INT 24
7767: PUSH
7768: LD_INT 1000
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PPUSH
7779: CALL_OW 72
7783: PUSH
7784: LD_EXP 40
7788: PPUSH
7789: LD_INT 3
7791: PUSH
7792: LD_INT 24
7794: PUSH
7795: LD_INT 1000
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: PPUSH
7806: CALL_OW 72
7810: UNION
7811: PUSH
7812: FOR_IN
7813: IFFALSE 7840
// if IsSleeping ( i ) then
7815: LD_VAR 0 1
7819: PPUSH
7820: CALL_OW 555
7824: IFFALSE 7838
// ForceSleep ( i , false ) ;
7826: LD_VAR 0 1
7830: PPUSH
7831: LD_INT 0
7833: PPUSH
7834: CALL_OW 585
7838: GO 7812
7840: POP
7841: POP
// end ;
7842: PPOPN 1
7844: END
// every 0 0$1 trigger UnitFilter ( oilBaseGuard , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_inarea , eastBaseArea ] ] ] ) do var i , tmp ;
7845: LD_EXP 38
7849: PPUSH
7850: LD_INT 1
7852: PUSH
7853: LD_INT 3
7855: PUSH
7856: LD_INT 54
7858: PUSH
7859: EMPTY
7860: LIST
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: PUSH
7866: LD_INT 3
7868: PUSH
7869: LD_INT 95
7871: PUSH
7872: LD_INT 26
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: PUSH
7879: EMPTY
7880: LIST
7881: LIST
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: LIST
7887: PPUSH
7888: CALL_OW 72
7892: IFFALSE 7987
7894: GO 7896
7896: DISABLE
7897: LD_INT 0
7899: PPUSH
7900: PPUSH
// begin enable ;
7901: ENABLE
// tmp := UnitFilter ( oilBaseGuard , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_inarea , eastBaseArea ] ] ] ) ;
7902: LD_ADDR_VAR 0 2
7906: PUSH
7907: LD_EXP 38
7911: PPUSH
7912: LD_INT 1
7914: PUSH
7915: LD_INT 3
7917: PUSH
7918: LD_INT 54
7920: PUSH
7921: EMPTY
7922: LIST
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: LD_INT 3
7930: PUSH
7931: LD_INT 95
7933: PUSH
7934: LD_INT 26
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: PUSH
7941: EMPTY
7942: LIST
7943: LIST
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: LIST
7949: PPUSH
7950: CALL_OW 72
7954: ST_TO_ADDR
// for i in tmp do
7955: LD_ADDR_VAR 0 1
7959: PUSH
7960: LD_VAR 0 2
7964: PUSH
7965: FOR_IN
7966: IFFALSE 7985
// ComMoveXY ( i , 206 , 110 ) ;
7968: LD_VAR 0 1
7972: PPUSH
7973: LD_INT 206
7975: PPUSH
7976: LD_INT 110
7978: PPUSH
7979: CALL_OW 111
7983: GO 7965
7985: POP
7986: POP
// end ;
7987: PPOPN 2
7989: END
// every 0 0$5 trigger FilterUnitsInArea ( eastBaseArea , [ f_side , 2 ] ) and FilterUnitsInArea ( eastBaseArea , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) do var i ;
7990: LD_INT 26
7992: PPUSH
7993: LD_INT 22
7995: PUSH
7996: LD_INT 2
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: PPUSH
8003: CALL_OW 70
8007: IFFALSE 8049
8009: PUSH
8010: LD_INT 26
8012: PPUSH
8013: LD_INT 22
8015: PUSH
8016: LD_INT 3
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PUSH
8023: LD_INT 30
8025: PUSH
8026: LD_INT 32
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: PUSH
8033: LD_INT 50
8035: PUSH
8036: EMPTY
8037: LIST
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: LIST
8043: PPUSH
8044: CALL_OW 70
8048: AND
8049: IFFALSE 8128
8051: GO 8053
8053: DISABLE
8054: LD_INT 0
8056: PPUSH
// begin for i in FilterUnitsInArea ( eastBaseArea , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) do
8057: LD_ADDR_VAR 0 1
8061: PUSH
8062: LD_INT 26
8064: PPUSH
8065: LD_INT 22
8067: PUSH
8068: LD_INT 3
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: PUSH
8075: LD_INT 30
8077: PUSH
8078: LD_INT 32
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: PUSH
8085: LD_INT 50
8087: PUSH
8088: EMPTY
8089: LIST
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: LIST
8095: PPUSH
8096: CALL_OW 70
8100: PUSH
8101: FOR_IN
8102: IFFALSE 8126
// if IsInUnit ( i ) then
8104: LD_VAR 0 1
8108: PPUSH
8109: CALL_OW 310
8113: IFFALSE 8124
// ComExitBuilding ( i ) ;
8115: LD_VAR 0 1
8119: PPUSH
8120: CALL_OW 122
8124: GO 8101
8126: POP
8127: POP
// end ; end_of_file
8128: PPOPN 1
8130: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
8131: LD_VAR 0 1
8135: PPUSH
8136: CALL 15220 0 1
// if un = Heike then
8140: LD_VAR 0 1
8144: PUSH
8145: LD_EXP 21
8149: EQUAL
8150: IFFALSE 8159
// YouLost ( Heike ) ;
8152: LD_STRING Heike
8154: PPUSH
8155: CALL_OW 104
// if un in apeSoldGroup then
8159: LD_VAR 0 1
8163: PUSH
8164: LD_EXP 42
8168: IN
8169: IFFALSE 8187
// apeSoldGroup := apeSoldGroup diff un ;
8171: LD_ADDR_EXP 42
8175: PUSH
8176: LD_EXP 42
8180: PUSH
8181: LD_VAR 0 1
8185: DIFF
8186: ST_TO_ADDR
// if un in apeEngGroup then
8187: LD_VAR 0 1
8191: PUSH
8192: LD_EXP 43
8196: IN
8197: IFFALSE 8215
// apeEngGroup := apeEngGroup diff un ;
8199: LD_ADDR_EXP 43
8203: PUSH
8204: LD_EXP 43
8208: PUSH
8209: LD_VAR 0 1
8213: DIFF
8214: ST_TO_ADDR
// if un in oilBaseGuard then
8215: LD_VAR 0 1
8219: PUSH
8220: LD_EXP 38
8224: IN
8225: IFFALSE 8243
// oilBaseGuard := oilBaseGuard diff un ;
8227: LD_ADDR_EXP 38
8231: PUSH
8232: LD_EXP 38
8236: PUSH
8237: LD_VAR 0 1
8241: DIFF
8242: ST_TO_ADDR
// if un in ruNorthGroup then
8243: LD_VAR 0 1
8247: PUSH
8248: LD_EXP 39
8252: IN
8253: IFFALSE 8271
// ruNorthGroup := ruNorthGroup diff un ;
8255: LD_ADDR_EXP 39
8259: PUSH
8260: LD_EXP 39
8264: PUSH
8265: LD_VAR 0 1
8269: DIFF
8270: ST_TO_ADDR
// if un in ruSouthGroup then
8271: LD_VAR 0 1
8275: PUSH
8276: LD_EXP 40
8280: IN
8281: IFFALSE 8299
// ruSouthGroup := ruSouthGroup diff un ;
8283: LD_ADDR_EXP 40
8287: PUSH
8288: LD_EXP 40
8292: PUSH
8293: LD_VAR 0 1
8297: DIFF
8298: ST_TO_ADDR
// if un in ruConvoySquad then
8299: LD_VAR 0 1
8303: PUSH
8304: LD_EXP 41
8308: IN
8309: IFFALSE 8327
// ruConvoySquad := ruConvoySquad diff un ;
8311: LD_ADDR_EXP 41
8315: PUSH
8316: LD_EXP 41
8320: PUSH
8321: LD_VAR 0 1
8325: DIFF
8326: ST_TO_ADDR
// end ;
8327: PPOPN 1
8329: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8330: LD_VAR 0 1
8334: PPUSH
8335: LD_VAR 0 2
8339: PPUSH
8340: CALL 15278 0 2
// if GetWeapon ( veh ) = ar_radar then
8344: LD_VAR 0 1
8348: PPUSH
8349: CALL_OW 264
8353: PUSH
8354: LD_INT 30
8356: EQUAL
8357: IFFALSE 8367
// radarConstructed := true ;
8359: LD_ADDR_EXP 13
8363: PUSH
8364: LD_INT 1
8366: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
8367: LD_VAR 0 1
8371: PPUSH
8372: CALL_OW 264
8376: PUSH
8377: LD_INT 26
8379: EQUAL
8380: IFFALSE 8390
// flamethrowerBuilt := true ;
8382: LD_ADDR_EXP 20
8386: PUSH
8387: LD_INT 1
8389: ST_TO_ADDR
// end ;
8390: PPOPN 2
8392: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
8393: LD_ADDR_EXP 18
8397: PUSH
8398: LD_EXP 18
8402: PUSH
8403: LD_INT 1
8405: PLUS
8406: ST_TO_ADDR
// if oldId in ruConvoySquad then
8407: LD_VAR 0 2
8411: PUSH
8412: LD_EXP 41
8416: IN
8417: IFFALSE 8435
// ruConvoySquad := ruConvoySquad diff oldId ;
8419: LD_ADDR_EXP 41
8423: PUSH
8424: LD_EXP 41
8428: PUSH
8429: LD_VAR 0 2
8433: DIFF
8434: ST_TO_ADDR
// if newId in ruConvoySquad then
8435: LD_VAR 0 1
8439: PUSH
8440: LD_EXP 41
8444: IN
8445: IFFALSE 8463
// ruConvoySquad := ruConvoySquad diff newId ;
8447: LD_ADDR_EXP 41
8451: PUSH
8452: LD_EXP 41
8456: PUSH
8457: LD_VAR 0 1
8461: DIFF
8462: ST_TO_ADDR
// end ; end_of_file
8463: PPOPN 4
8465: END
// export function Action ; var i , p , un , veh , tmp ; begin
8466: LD_INT 0
8468: PPUSH
8469: PPUSH
8470: PPUSH
8471: PPUSH
8472: PPUSH
8473: PPUSH
// InGameOn ;
8474: CALL_OW 8
// music_nat := 2 ;
8478: LD_ADDR_OWVAR 71
8482: PUSH
8483: LD_INT 2
8485: ST_TO_ADDR
// music_class := music_recon ;
8486: LD_ADDR_OWVAR 72
8490: PUSH
8491: LD_INT 3
8493: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
8494: LD_INT 7
8496: PPUSH
8497: LD_INT 6
8499: PPUSH
8500: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 30 ) ;
8504: LD_INT 7
8506: PPUSH
8507: LD_INT 6
8509: PPUSH
8510: LD_INT 2
8512: PPUSH
8513: LD_INT 30
8515: NEG
8516: PPUSH
8517: CALL 1165 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Markov , Aviradze , Sophia ] ;
8521: LD_ADDR_VAR 0 6
8525: PUSH
8526: LD_EXP 21
8530: PUSH
8531: LD_EXP 22
8535: PUSH
8536: LD_EXP 23
8540: PUSH
8541: LD_EXP 24
8545: PUSH
8546: LD_EXP 25
8550: PUSH
8551: LD_EXP 26
8555: PUSH
8556: LD_EXP 28
8560: PUSH
8561: LD_EXP 33
8565: PUSH
8566: LD_EXP 27
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: ST_TO_ADDR
// tmp := tmp diff 0 ;
8582: LD_ADDR_VAR 0 6
8586: PUSH
8587: LD_VAR 0 6
8591: PUSH
8592: LD_INT 0
8594: DIFF
8595: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
8596: LD_ADDR_VAR 0 6
8600: PUSH
8601: LD_VAR 0 6
8605: PPUSH
8606: LD_INT 3
8608: PPUSH
8609: CALL 74460 0 2
8613: ST_TO_ADDR
// for i in heikeVehicles do
8614: LD_ADDR_VAR 0 2
8618: PUSH
8619: LD_EXP 35
8623: PUSH
8624: FOR_IN
8625: IFFALSE 8824
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
8627: LD_INT 5
8629: PPUSH
8630: LD_VAR 0 2
8634: PUSH
8635: LD_INT 5
8637: ARRAY
8638: PPUSH
8639: LD_VAR 0 2
8643: PUSH
8644: LD_INT 1
8646: ARRAY
8647: PPUSH
8648: LD_VAR 0 2
8652: PUSH
8653: LD_INT 2
8655: ARRAY
8656: PPUSH
8657: LD_VAR 0 2
8661: PUSH
8662: LD_INT 3
8664: ARRAY
8665: PPUSH
8666: LD_VAR 0 2
8670: PUSH
8671: LD_INT 4
8673: ARRAY
8674: PPUSH
8675: LD_INT 34
8677: PPUSH
8678: CALL 453 0 7
// veh := CreateVehicle ;
8682: LD_ADDR_VAR 0 5
8686: PUSH
8687: CALL_OW 45
8691: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
8692: LD_VAR 0 2
8696: PUSH
8697: LD_INT 4
8699: ARRAY
8700: PUSH
8701: LD_INT 51
8703: PUSH
8704: LD_INT 32
8706: PUSH
8707: LD_INT 12
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: LIST
8714: IN
8715: IFFALSE 8795
// begin if i [ 7 ] [ 1 ] then
8717: LD_VAR 0 2
8721: PUSH
8722: LD_INT 7
8724: ARRAY
8725: PUSH
8726: LD_INT 1
8728: ARRAY
8729: IFFALSE 8756
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
8731: LD_VAR 0 5
8735: PPUSH
8736: LD_INT 1
8738: PPUSH
8739: LD_VAR 0 2
8743: PUSH
8744: LD_INT 7
8746: ARRAY
8747: PUSH
8748: LD_INT 1
8750: ARRAY
8751: PPUSH
8752: CALL_OW 291
// if i [ 7 ] [ 2 ] then
8756: LD_VAR 0 2
8760: PUSH
8761: LD_INT 7
8763: ARRAY
8764: PUSH
8765: LD_INT 2
8767: ARRAY
8768: IFFALSE 8795
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
8770: LD_VAR 0 5
8774: PPUSH
8775: LD_INT 2
8777: PPUSH
8778: LD_VAR 0 2
8782: PUSH
8783: LD_INT 7
8785: ARRAY
8786: PUSH
8787: LD_INT 2
8789: ARRAY
8790: PPUSH
8791: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8795: LD_VAR 0 5
8799: PPUSH
8800: LD_INT 2
8802: PPUSH
8803: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8807: LD_VAR 0 5
8811: PPUSH
8812: LD_INT 4
8814: PPUSH
8815: LD_INT 0
8817: PPUSH
8818: CALL_OW 49
// end ;
8822: GO 8624
8824: POP
8825: POP
// if tmp then
8826: LD_VAR 0 6
8830: IFFALSE 8942
// begin p := 0 ;
8832: LD_ADDR_VAR 0 3
8836: PUSH
8837: LD_INT 0
8839: ST_TO_ADDR
// for i in tmp do
8840: LD_ADDR_VAR 0 2
8844: PUSH
8845: LD_VAR 0 6
8849: PUSH
8850: FOR_IN
8851: IFFALSE 8940
// begin p := p + 1 ;
8853: LD_ADDR_VAR 0 3
8857: PUSH
8858: LD_VAR 0 3
8862: PUSH
8863: LD_INT 1
8865: PLUS
8866: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHumanArea , false ) ;
8867: LD_VAR 0 2
8871: PPUSH
8872: LD_INT 5
8874: PPUSH
8875: LD_INT 0
8877: PPUSH
8878: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8882: LD_VAR 0 2
8886: PPUSH
8887: LD_INT 26
8889: PPUSH
8890: LD_INT 9
8892: PPUSH
8893: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
8897: LD_VAR 0 3
8901: PUSH
8902: LD_EXP 35
8906: GREATEREQUAL
8907: IFFALSE 8924
8909: PUSH
8910: LD_VAR 0 2
8914: PPUSH
8915: CALL_OW 257
8919: PUSH
8920: LD_INT 3
8922: EQUAL
8923: AND
8924: IFFALSE 8938
// SetClass ( i , 1 ) ;
8926: LD_VAR 0 2
8930: PPUSH
8931: LD_INT 1
8933: PPUSH
8934: CALL_OW 336
// end ;
8938: GO 8850
8940: POP
8941: POP
// end ; if heikeSecondSquad then
8942: LD_EXP 34
8946: IFFALSE 9050
// for i in heikeSecondSquad do
8948: LD_ADDR_VAR 0 2
8952: PUSH
8953: LD_EXP 34
8957: PUSH
8958: FOR_IN
8959: IFFALSE 9048
// begin p := p + 1 ;
8961: LD_ADDR_VAR 0 3
8965: PUSH
8966: LD_VAR 0 3
8970: PUSH
8971: LD_INT 1
8973: PLUS
8974: ST_TO_ADDR
// PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8975: LD_VAR 0 2
8979: PPUSH
8980: LD_INT 6
8982: PPUSH
8983: LD_INT 0
8985: PPUSH
8986: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8990: LD_VAR 0 2
8994: PPUSH
8995: LD_INT 26
8997: PPUSH
8998: LD_INT 9
9000: PPUSH
9001: CALL_OW 118
// if p >= heikeVehicles and GetClass ( i ) = class_mechanic then
9005: LD_VAR 0 3
9009: PUSH
9010: LD_EXP 35
9014: GREATEREQUAL
9015: IFFALSE 9032
9017: PUSH
9018: LD_VAR 0 2
9022: PPUSH
9023: CALL_OW 257
9027: PUSH
9028: LD_INT 3
9030: EQUAL
9031: AND
9032: IFFALSE 9046
// SetClass ( i , 1 ) ;
9034: LD_VAR 0 2
9038: PPUSH
9039: LD_INT 1
9041: PPUSH
9042: CALL_OW 336
// end ;
9046: GO 8958
9048: POP
9049: POP
// if heikeApes then
9050: LD_EXP 36
9054: IFFALSE 9097
// for i in heikeApes do
9056: LD_ADDR_VAR 0 2
9060: PUSH
9061: LD_EXP 36
9065: PUSH
9066: FOR_IN
9067: IFFALSE 9095
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
9069: LD_VAR 0 2
9073: PPUSH
9074: LD_INT 7
9076: PPUSH
9077: LD_INT 0
9079: PPUSH
9080: CALL_OW 49
// ComHold ( i ) ;
9084: LD_VAR 0 2
9088: PPUSH
9089: CALL_OW 140
// end ;
9093: GO 9066
9095: POP
9096: POP
// if Kurt then
9097: LD_EXP 32
9101: IFFALSE 9133
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
9103: LD_EXP 32
9107: PPUSH
9108: LD_INT 8
9110: PPUSH
9111: LD_INT 0
9113: PPUSH
9114: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
9118: LD_EXP 32
9122: PPUSH
9123: LD_INT 42
9125: PPUSH
9126: LD_INT 32
9128: PPUSH
9129: CALL_OW 118
// end ; wait ( 0 0$2 ) ;
9133: LD_INT 70
9135: PPUSH
9136: CALL_OW 67
// Say ( Heike , DH-Start-1 ) ;
9140: LD_EXP 21
9144: PPUSH
9145: LD_STRING DH-Start-1
9147: PPUSH
9148: CALL_OW 88
// if Givi then
9152: LD_EXP 22
9156: IFFALSE 9419
// begin Say ( Givi , DG-Start-2-5 ) ;
9158: LD_EXP 22
9162: PPUSH
9163: LD_STRING DG-Start-2-5
9165: PPUSH
9166: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
9170: LD_EXP 21
9174: PPUSH
9175: LD_STRING DH-Start-3
9177: PPUSH
9178: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9182: LD_EXP 21
9186: PPUSH
9187: LD_STRING DH-Start-4
9189: PPUSH
9190: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
9194: LD_EXP 22
9198: PPUSH
9199: LD_STRING DG-Start-5
9201: PPUSH
9202: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
9206: LD_EXP 21
9210: PPUSH
9211: LD_STRING DH-Start-6
9213: PPUSH
9214: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
9218: LD_EXP 22
9222: PPUSH
9223: LD_STRING DG-Start-7
9225: PPUSH
9226: CALL_OW 88
// if Mike then
9230: LD_EXP 23
9234: IFFALSE 9407
// begin Say ( Mike , DM-Start-8 ) ;
9236: LD_EXP 23
9240: PPUSH
9241: LD_STRING DM-Start-8
9243: PPUSH
9244: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
9248: LD_EXP 23
9252: PPUSH
9253: LD_STRING DM-Start-9
9255: PPUSH
9256: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
9260: LD_EXP 22
9264: PPUSH
9265: LD_STRING DG-Start-10
9267: PPUSH
9268: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
9272: LD_EXP 22
9276: PPUSH
9277: LD_STRING DG-Start-11
9279: PPUSH
9280: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
9284: LD_EXP 21
9288: PPUSH
9289: LD_STRING DH-Start-12
9291: PPUSH
9292: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
9296: LD_EXP 22
9300: PPUSH
9301: LD_STRING DG-Start-13
9303: PPUSH
9304: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
9308: LD_EXP 22
9312: PPUSH
9313: LD_STRING DG-Start-14
9315: PPUSH
9316: CALL_OW 88
// if Kaia then
9320: LD_EXP 26
9324: IFFALSE 9407
// begin Say ( Kaia , DK-Start-15 ) ;
9326: LD_EXP 26
9330: PPUSH
9331: LD_STRING DK-Start-15
9333: PPUSH
9334: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
9338: LD_EXP 26
9342: PPUSH
9343: LD_STRING DK-Start-16
9345: PPUSH
9346: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
9350: LD_EXP 26
9354: PPUSH
9355: LD_STRING DK-Start-17
9357: PPUSH
9358: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9362: LD_INT 10
9364: PPUSH
9365: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
9369: LD_EXP 22
9373: PPUSH
9374: LD_EXP 26
9378: PPUSH
9379: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
9383: LD_EXP 22
9387: PPUSH
9388: LD_STRING DG-Start-18
9390: PPUSH
9391: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
9395: LD_EXP 26
9399: PPUSH
9400: LD_STRING DK-Start-19
9402: PPUSH
9403: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
9407: LD_EXP 21
9411: PPUSH
9412: LD_STRING DH-Start-20
9414: PPUSH
9415: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
9419: LD_INT 70
9421: PPUSH
9422: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
9426: LD_EXP 29
9430: PPUSH
9431: LD_STRING DShar-Start-21
9433: PPUSH
9434: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
9438: LD_EXP 21
9442: PPUSH
9443: LD_STRING DH-Start-22
9445: PPUSH
9446: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
9450: LD_EXP 29
9454: PPUSH
9455: LD_STRING DShar-Start-23
9457: PPUSH
9458: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
9462: LD_EXP 29
9466: PPUSH
9467: LD_STRING DShar-Start-24
9469: PPUSH
9470: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
9474: LD_EXP 29
9478: PPUSH
9479: LD_STRING DShar-Start-25
9481: PPUSH
9482: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
9486: LD_EXP 29
9490: PPUSH
9491: LD_STRING DShar-Start-26
9493: PPUSH
9494: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
9498: LD_EXP 21
9502: PPUSH
9503: LD_STRING DH-Start-27
9505: PPUSH
9506: CALL_OW 88
// if Kaia then
9510: LD_EXP 26
9514: IFFALSE 9556
// begin ComTurnUnit ( Heike , Kaia ) ;
9516: LD_EXP 21
9520: PPUSH
9521: LD_EXP 26
9525: PPUSH
9526: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
9530: LD_EXP 26
9534: PPUSH
9535: LD_STRING DK-Start-28
9537: PPUSH
9538: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
9542: LD_EXP 21
9546: PPUSH
9547: LD_STRING DH-Start-29
9549: PPUSH
9550: CALL_OW 88
// end else
9554: GO 9568
// Say ( Heike , DH-Start-a-28 ) ;
9556: LD_EXP 21
9560: PPUSH
9561: LD_STRING DH-Start-a-28
9563: PPUSH
9564: CALL_OW 88
// if Givi then
9568: LD_EXP 22
9572: IFFALSE 9809
// begin ComTurnUnit ( Heike , Givi ) ;
9574: LD_EXP 21
9578: PPUSH
9579: LD_EXP 22
9583: PPUSH
9584: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
9588: LD_EXP 22
9592: PPUSH
9593: LD_EXP 21
9597: PPUSH
9598: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
9602: LD_EXP 21
9606: PPUSH
9607: LD_STRING DH-Start-30
9609: PPUSH
9610: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
9614: LD_EXP 21
9618: PPUSH
9619: LD_STRING DH-Start-31
9621: PPUSH
9622: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
9626: LD_EXP 22
9630: PPUSH
9631: LD_STRING DG-Start-32
9633: PPUSH
9634: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
9638: LD_EXP 21
9642: PPUSH
9643: LD_STRING DH-Start-33
9645: PPUSH
9646: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
9650: LD_EXP 22
9654: PPUSH
9655: LD_STRING DG-Start-34
9657: PPUSH
9658: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
9662: LD_EXP 22
9666: PPUSH
9667: LD_STRING DG-Start-35
9669: PPUSH
9670: CALL_OW 88
// if Kurt and not dialogue_skipped then
9674: LD_EXP 32
9678: IFFALSE 9687
9680: PUSH
9681: LD_OWVAR 59
9685: NOT
9686: AND
9687: IFFALSE 9718
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
9689: LD_EXP 32
9693: PPUSH
9694: LD_INT 28
9696: PPUSH
9697: LD_INT 13
9699: PPUSH
9700: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
9704: LD_EXP 32
9708: PPUSH
9709: LD_EXP 21
9713: PPUSH
9714: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
9718: LD_EXP 22
9722: PPUSH
9723: LD_STRING DG-Start-36
9725: PPUSH
9726: CALL_OW 88
// if Kurt then
9730: LD_EXP 32
9734: IFFALSE 9807
// begin if not Givi then
9736: LD_EXP 22
9740: NOT
9741: IFFALSE 9757
// Say ( Kurt , DKs-Start-37-a ) else
9743: LD_EXP 32
9747: PPUSH
9748: LD_STRING DKs-Start-37-a
9750: PPUSH
9751: CALL_OW 88
9755: GO 9769
// Say ( Kurt , DKs-Start-37 ) ;
9757: LD_EXP 32
9761: PPUSH
9762: LD_STRING DKs-Start-37
9764: PPUSH
9765: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
9769: LD_EXP 32
9773: PPUSH
9774: LD_STRING DKs-Start-38
9776: PPUSH
9777: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
9781: LD_EXP 21
9785: PPUSH
9786: LD_EXP 32
9790: PPUSH
9791: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
9795: LD_EXP 21
9799: PPUSH
9800: LD_STRING DH-Start-39
9802: PPUSH
9803: CALL_OW 88
// end ; end else
9807: GO 9838
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
9809: LD_EXP 34
9813: PPUSH
9814: LD_STRING DArm-Start-a-37
9816: PPUSH
9817: LD_STRING DArf-Start-a-37
9819: PPUSH
9820: CALL 1216 0 3
9824: IFFALSE 9838
// Say ( Heike , DH-Start-39 ) ;
9826: LD_EXP 21
9830: PPUSH
9831: LD_STRING DH-Start-39
9833: PPUSH
9834: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
9838: LD_INT 44
9840: PPUSH
9841: LD_INT 25
9843: PPUSH
9844: CALL_OW 428
9848: IFFALSE 9865
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
9850: LD_INT 44
9852: PPUSH
9853: LD_INT 25
9855: PPUSH
9856: CALL_OW 428
9860: PPUSH
9861: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
9865: LD_EXP 30
9869: PPUSH
9870: LD_INT 5
9872: PPUSH
9873: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
9877: LD_EXP 30
9881: PPUSH
9882: LD_INT 44
9884: PPUSH
9885: LD_INT 25
9887: PPUSH
9888: LD_INT 0
9890: PPUSH
9891: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
9895: LD_EXP 30
9899: PPUSH
9900: LD_INT 29
9902: PPUSH
9903: LD_INT 12
9905: PPUSH
9906: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9910: LD_INT 35
9912: PPUSH
9913: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9917: LD_OWVAR 59
9921: IFTRUE 9943
9923: PUSH
9924: LD_EXP 21
9928: PPUSH
9929: LD_EXP 30
9933: PPUSH
9934: CALL_OW 296
9938: PUSH
9939: LD_INT 8
9941: LESS
9942: OR
9943: IFTRUE 9966
9945: PUSH
9946: LD_EXP 30
9950: PPUSH
9951: LD_INT 26
9953: PPUSH
9954: LD_INT 9
9956: PPUSH
9957: CALL_OW 297
9961: PUSH
9962: LD_INT 6
9964: LESS
9965: OR
9966: IFFALSE 9910
// Say ( Olaf , DO-Scout-1 ) ;
9968: LD_EXP 30
9972: PPUSH
9973: LD_STRING DO-Scout-1
9975: PPUSH
9976: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9980: LD_EXP 30
9984: PPUSH
9985: LD_EXP 21
9989: PPUSH
9990: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9994: LD_ADDR_VAR 0 2
9998: PUSH
9999: LD_VAR 0 6
10003: PUSH
10004: LD_EXP 34
10008: UNION
10009: PUSH
10010: FOR_IN
10011: IFFALSE 10029
// ComTurnUnit ( i , Olaf ) ;
10013: LD_VAR 0 2
10017: PPUSH
10018: LD_EXP 30
10022: PPUSH
10023: CALL_OW 119
10027: GO 10010
10029: POP
10030: POP
// wait ( 0 0$0.3 ) ;
10031: LD_INT 10
10033: PPUSH
10034: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
10038: LD_EXP 21
10042: PPUSH
10043: LD_EXP 30
10047: PPUSH
10048: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
10052: LD_EXP 21
10056: PPUSH
10057: LD_EXP 30
10061: PPUSH
10062: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
10066: LD_EXP 21
10070: PPUSH
10071: LD_STRING DH-Scout-2
10073: PPUSH
10074: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
10078: LD_EXP 30
10082: PPUSH
10083: LD_STRING DO-Scout-3
10085: PPUSH
10086: CALL_OW 88
// if Mike and Givi then
10090: LD_EXP 23
10094: IFFALSE 10102
10096: PUSH
10097: LD_EXP 22
10101: AND
10102: IFFALSE 10118
// Say ( Olaf , DO-Scout-4 ) else
10104: LD_EXP 30
10108: PPUSH
10109: LD_STRING DO-Scout-4
10111: PPUSH
10112: CALL_OW 88
10116: GO 10218
// begin if Mike then
10118: LD_EXP 23
10122: IFFALSE 10150
// begin Say ( Olaf , DO-Scout-a-4 ) ;
10124: LD_EXP 30
10128: PPUSH
10129: LD_STRING DO-Scout-a-4
10131: PPUSH
10132: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
10136: LD_EXP 21
10140: PPUSH
10141: LD_STRING DH-Scout-a-5
10143: PPUSH
10144: CALL_OW 88
// end else
10148: GO 10218
// if Givi then
10150: LD_EXP 22
10154: IFFALSE 10182
// begin Say ( Olaf , DO-Scout-b-4 ) ;
10156: LD_EXP 30
10160: PPUSH
10161: LD_STRING DO-Scout-b-4
10163: PPUSH
10164: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
10168: LD_EXP 21
10172: PPUSH
10173: LD_STRING DH-Scout-b-5
10175: PPUSH
10176: CALL_OW 88
// end else
10180: GO 10218
// begin Say ( Olaf , DO-Scout-f-4 ) ;
10182: LD_EXP 30
10186: PPUSH
10187: LD_STRING DO-Scout-f-4
10189: PPUSH
10190: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
10194: LD_EXP 21
10198: PPUSH
10199: LD_STRING DH-Scout-f-5
10201: PPUSH
10202: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
10206: LD_EXP 30
10210: PPUSH
10211: LD_STRING DO-Scout-f-6
10213: PPUSH
10214: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
10218: LD_EXP 21
10222: PPUSH
10223: LD_STRING DH-Scout-5
10225: PPUSH
10226: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
10230: LD_EXP 30
10234: PPUSH
10235: LD_STRING DO-Scout-6
10237: PPUSH
10238: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
10242: LD_EXP 30
10246: PPUSH
10247: LD_STRING DO-Scout-7
10249: PPUSH
10250: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
10254: LD_EXP 21
10258: PPUSH
10259: LD_STRING DH-Scout-8
10261: PPUSH
10262: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
10266: LD_EXP 21
10270: PPUSH
10271: LD_STRING DH-Scout-9
10273: PPUSH
10274: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
10278: LD_EXP 30
10282: PPUSH
10283: LD_STRING DO-Scout-10
10285: PPUSH
10286: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
10290: LD_EXP 30
10294: PPUSH
10295: LD_STRING DO-Scout-12
10297: PPUSH
10298: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
10302: LD_EXP 30
10306: PPUSH
10307: LD_STRING DO-Scout-13
10309: PPUSH
10310: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
10314: LD_EXP 30
10318: PPUSH
10319: LD_STRING DO-Scout-14
10321: PPUSH
10322: CALL_OW 88
// if Givi then
10326: LD_EXP 22
10330: IFFALSE 10356
// begin Say ( Givi , DG-Scout-15 ) ;
10332: LD_EXP 22
10336: PPUSH
10337: LD_STRING DG-Scout-15
10339: PPUSH
10340: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
10344: LD_EXP 26
10348: PPUSH
10349: LD_STRING DK-Scout-16
10351: PPUSH
10352: CALL_OW 88
// end ; if not dialogue_skipped then
10356: LD_OWVAR 59
10360: NOT
10361: IFFALSE 10482
// begin async ;
10363: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
10364: LD_EXP 30
10368: PPUSH
10369: LD_STRING DO-Scout-17
10371: PPUSH
10372: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10376: LD_INT 55
10378: PPUSH
10379: LD_INT 77
10381: PPUSH
10382: LD_INT 2
10384: PPUSH
10385: LD_INT 6
10387: NEG
10388: PPUSH
10389: CALL 1165 0 4
// wait ( 10 ) ;
10393: LD_INT 10
10395: PPUSH
10396: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
10400: LD_INT 55
10402: PPUSH
10403: LD_INT 77
10405: PPUSH
10406: CALL_OW 84
// wait ( 0 0$10 ) ;
10410: LD_INT 350
10412: PPUSH
10413: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
10417: LD_EXP 30
10421: PPUSH
10422: LD_STRING DO-Scout-18
10424: PPUSH
10425: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10429: LD_INT 204
10431: PPUSH
10432: LD_INT 107
10434: PPUSH
10435: LD_INT 2
10437: PPUSH
10438: LD_INT 12
10440: NEG
10441: PPUSH
10442: CALL 1165 0 4
// wait ( 10 ) ;
10446: LD_INT 10
10448: PPUSH
10449: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
10453: LD_INT 204
10455: PPUSH
10456: LD_INT 107
10458: PPUSH
10459: CALL_OW 84
// wait ( 0 0$10 ) ;
10463: LD_INT 350
10465: PPUSH
10466: CALL_OW 67
// sync ;
10470: SYNC
// CenterNowOnUnits ( Heike ) ;
10471: LD_EXP 21
10475: PPUSH
10476: CALL_OW 87
// end else
10480: GO 10516
// begin RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
10482: LD_INT 55
10484: PPUSH
10485: LD_INT 77
10487: PPUSH
10488: LD_INT 2
10490: PPUSH
10491: LD_INT 6
10493: NEG
10494: PPUSH
10495: CALL 1165 0 4
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
10499: LD_INT 204
10501: PPUSH
10502: LD_INT 107
10504: PPUSH
10505: LD_INT 2
10507: PPUSH
10508: LD_INT 12
10510: NEG
10511: PPUSH
10512: CALL 1165 0 4
// end ; Say ( Olaf , DO-Scout-19 ) ;
10516: LD_EXP 30
10520: PPUSH
10521: LD_STRING DO-Scout-19
10523: PPUSH
10524: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
10528: LD_EXP 30
10532: PPUSH
10533: LD_STRING DO-Scout-20
10535: PPUSH
10536: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
10540: LD_EXP 21
10544: PPUSH
10545: LD_STRING DH-Scout-21
10547: PPUSH
10548: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
10552: LD_EXP 21
10556: PPUSH
10557: LD_STRING DH-Scout-22
10559: PPUSH
10560: CALL_OW 88
// InGameOff ;
10564: CALL_OW 9
// if heikeSecondSquad then
10568: LD_EXP 34
10572: IFFALSE 10586
// ForceSleep ( heikeSecondSquad , false ) ;
10574: LD_EXP 34
10578: PPUSH
10579: LD_INT 0
10581: PPUSH
10582: CALL_OW 585
// if Givi then
10586: LD_EXP 22
10590: IFFALSE 10605
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
10592: LD_INT 13
10594: PPUSH
10595: LD_INT 2
10597: PPUSH
10598: LD_INT 1
10600: PPUSH
10601: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
10605: LD_STRING Road
10607: PPUSH
10608: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
10612: LD_ADDR_VAR 0 2
10616: PUSH
10617: LD_INT 22
10619: PUSH
10620: LD_INT 5
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: PUSH
10627: LD_INT 21
10629: PUSH
10630: LD_INT 2
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: PPUSH
10641: CALL_OW 69
10645: PUSH
10646: FOR_IN
10647: IFFALSE 10663
// SetSide ( i , 2 ) ;
10649: LD_VAR 0 2
10653: PPUSH
10654: LD_INT 2
10656: PPUSH
10657: CALL_OW 235
10661: GO 10646
10663: POP
10664: POP
// SaveForQuickRestart ;
10665: CALL_OW 22
// music_class := music_auto ;
10669: LD_ADDR_OWVAR 72
10673: PUSH
10674: LD_INT 0
10676: ST_TO_ADDR
// end ;
10677: LD_VAR 0 1
10681: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
10682: LD_INT 2
10684: PPUSH
10685: LD_INT 9
10687: PPUSH
10688: CALL_OW 294
10692: IFFALSE 11057
10694: GO 10696
10696: DISABLE
// begin DialogueOn ;
10697: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
10701: LD_INT 111
10703: PPUSH
10704: LD_INT 72
10706: PPUSH
10707: LD_INT 2
10709: PPUSH
10710: LD_INT 20
10712: NEG
10713: PPUSH
10714: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
10718: LD_INT 111
10720: PPUSH
10721: LD_INT 72
10723: PPUSH
10724: LD_INT 2
10726: PPUSH
10727: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
10731: LD_INT 111
10733: PPUSH
10734: LD_INT 72
10736: PPUSH
10737: CALL_OW 86
// if IsOk ( Kamil ) then
10741: LD_EXP 25
10745: PPUSH
10746: CALL_OW 302
10750: IFFALSE 10867
// begin Say ( Kamil , DKam-Cross-1 ) ;
10752: LD_EXP 25
10756: PPUSH
10757: LD_STRING DKam-Cross-1
10759: PPUSH
10760: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
10764: LD_EXP 25
10768: PPUSH
10769: LD_STRING DKam-Cross-2
10771: PPUSH
10772: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
10776: LD_EXP 25
10780: PPUSH
10781: LD_STRING DKam-Cross-3
10783: PPUSH
10784: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
10788: LD_EXP 25
10792: PPUSH
10793: LD_STRING DKam-Cross-4
10795: PPUSH
10796: CALL_OW 88
// if IsOk ( Ibrahim ) then
10800: LD_EXP 24
10804: PPUSH
10805: CALL_OW 302
10809: IFFALSE 10865
// begin if ibrahimJoinedIn04 then
10811: LD_EXP 4
10815: IFFALSE 10829
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10817: LD_EXP 24
10821: PPUSH
10822: LD_STRING DI-Cross-b-5
10824: PPUSH
10825: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10829: LD_EXP 24
10833: PPUSH
10834: LD_STRING DI-Cross-b-6
10836: PPUSH
10837: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10841: LD_EXP 24
10845: PPUSH
10846: LD_STRING DI-Cross-b-7
10848: PPUSH
10849: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
10853: LD_EXP 25
10857: PPUSH
10858: LD_STRING DKam-Cross-8
10860: PPUSH
10861: CALL_OW 88
// end ; end else
10865: GO 11025
// if IsOk ( Sophia ) then
10867: LD_EXP 27
10871: PPUSH
10872: CALL_OW 302
10876: IFFALSE 10993
// begin Say ( Sophia , DS-Cross-1 ) ;
10878: LD_EXP 27
10882: PPUSH
10883: LD_STRING DS-Cross-1
10885: PPUSH
10886: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
10890: LD_EXP 27
10894: PPUSH
10895: LD_STRING DS-Cross-2
10897: PPUSH
10898: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
10902: LD_EXP 27
10906: PPUSH
10907: LD_STRING DS-Cross-3
10909: PPUSH
10910: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
10914: LD_EXP 27
10918: PPUSH
10919: LD_STRING DS-Cross-4
10921: PPUSH
10922: CALL_OW 88
// if IsOk ( Ibrahim ) then
10926: LD_EXP 24
10930: PPUSH
10931: CALL_OW 302
10935: IFFALSE 10991
// begin if ibrahimJoinedIn04 then
10937: LD_EXP 4
10941: IFFALSE 10955
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10943: LD_EXP 24
10947: PPUSH
10948: LD_STRING DI-Cross-b-5
10950: PPUSH
10951: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10955: LD_EXP 24
10959: PPUSH
10960: LD_STRING DI-Cross-b-6
10962: PPUSH
10963: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10967: LD_EXP 24
10971: PPUSH
10972: LD_STRING DI-Cross-b-7
10974: PPUSH
10975: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10979: LD_EXP 27
10983: PPUSH
10984: LD_STRING DS-Cross-8
10986: PPUSH
10987: CALL_OW 88
// end ; end else
10991: GO 11025
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10993: LD_EXP 34
10997: PPUSH
10998: LD_INT 50
11000: PUSH
11001: EMPTY
11002: LIST
11003: PPUSH
11004: CALL_OW 72
11008: IFFALSE 11025
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
11010: LD_EXP 34
11014: PPUSH
11015: LD_STRING DArm-Cross-c-1
11017: PPUSH
11018: LD_STRING DArf-Cross-c-1
11020: PPUSH
11021: CALL 1216 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
11025: LD_INT 85
11027: PPUSH
11028: LD_INT 2
11030: PPUSH
11031: LD_INT 1
11033: PPUSH
11034: CALL_OW 322
// DialogueOff ;
11038: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
11042: LD_STRING Crane
11044: PPUSH
11045: CALL_OW 337
// spottedCrossRoad := true ;
11049: LD_ADDR_EXP 8
11053: PUSH
11054: LD_INT 1
11056: ST_TO_ADDR
// end ;
11057: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
11058: LD_INT 22
11060: PUSH
11061: LD_INT 2
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: LD_INT 2
11070: PUSH
11071: LD_INT 30
11073: PUSH
11074: LD_INT 0
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: PUSH
11081: LD_INT 30
11083: PUSH
11084: LD_INT 1
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: LIST
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: PPUSH
11100: CALL_OW 69
11104: IFFALSE 11125
11106: PUSH
11107: LD_EXP 26
11111: PPUSH
11112: CALL_OW 302
11116: IFTRUE 11124
11118: PUSH
11119: LD_EXP 34
11123: OR
11124: AND
11125: IFFALSE 11337
11127: GO 11129
11129: DISABLE
// begin DialogueOn ;
11130: CALL_OW 6
// if Kaia then
11134: LD_EXP 26
11138: IFFALSE 11151
// CenterNowOnUnits ( Kaia ) else
11140: LD_EXP 26
11144: PPUSH
11145: CALL_OW 87
11149: GO 11160
// CenterNowOnUnits ( Heike ) ;
11151: LD_EXP 21
11155: PPUSH
11156: CALL_OW 87
// if IsOk ( Kaia ) then
11160: LD_EXP 26
11164: PPUSH
11165: CALL_OW 302
11169: IFFALSE 11185
// Say ( Kaia , DK-Cam-1 ) else
11171: LD_EXP 26
11175: PPUSH
11176: LD_STRING DK-Cam-1
11178: PPUSH
11179: CALL_OW 88
11183: GO 11200
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
11185: LD_EXP 34
11189: PPUSH
11190: LD_STRING DArm-Cam-1
11192: PPUSH
11193: LD_STRING DArf-Cam-1
11195: PPUSH
11196: CALL 1216 0 3
// Say ( Heike , DH-Cam-2 ) ;
11200: LD_EXP 21
11204: PPUSH
11205: LD_STRING DH-Cam-2
11207: PPUSH
11208: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
11212: LD_EXP 21
11216: PPUSH
11217: LD_STRING DH-Cam-3
11219: PPUSH
11220: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11224: LD_EXP 21
11228: PPUSH
11229: LD_STRING DH-Cam-4
11231: PPUSH
11232: CALL_OW 88
// if IsOk ( Kaia ) then
11236: LD_EXP 26
11240: PPUSH
11241: CALL_OW 302
11245: IFFALSE 11261
// Say ( Kaia , DK-Cam-5 ) else
11247: LD_EXP 26
11251: PPUSH
11252: LD_STRING DK-Cam-5
11254: PPUSH
11255: CALL_OW 88
11259: GO 11276
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
11261: LD_EXP 34
11265: PPUSH
11266: LD_STRING DArm-Cam-5
11268: PPUSH
11269: LD_STRING DArf-Cam-5
11271: PPUSH
11272: CALL 1216 0 3
// Say ( Olaf , DO-Cam-6 ) ;
11276: LD_EXP 30
11280: PPUSH
11281: LD_STRING DO-Cam-6
11283: PPUSH
11284: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
11288: LD_EXP 30
11292: PPUSH
11293: LD_STRING DO-Cam-7
11295: PPUSH
11296: CALL_OW 88
// DialogueOff ;
11300: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
11304: LD_STRING Radar
11306: PPUSH
11307: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
11311: LD_INT 6
11313: PPUSH
11314: LD_INT 2
11316: PPUSH
11317: LD_INT 1
11319: PPUSH
11320: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
11324: LD_INT 20
11326: PPUSH
11327: LD_INT 2
11329: PPUSH
11330: LD_INT 1
11332: PPUSH
11333: CALL_OW 324
// end ;
11337: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
11338: LD_INT 22
11340: PUSH
11341: LD_INT 2
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PUSH
11348: LD_INT 2
11350: PUSH
11351: LD_INT 34
11353: PUSH
11354: LD_INT 30
11356: PUSH
11357: EMPTY
11358: LIST
11359: LIST
11360: PUSH
11361: LD_INT 35
11363: PUSH
11364: LD_INT 30
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: LIST
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: PPUSH
11380: CALL_OW 69
11384: IFFALSE 11396
11386: GO 11388
11388: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
11389: LD_STRING RadarDone
11391: PPUSH
11392: CALL_OW 337
11396: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
11397: LD_INT 22
11399: PUSH
11400: LD_INT 2
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: PUSH
11407: LD_INT 34
11409: PUSH
11410: LD_INT 88
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: PPUSH
11421: CALL_OW 69
11425: IFFALSE 11437
11427: GO 11429
11429: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
11430: LD_STRING CraneDone
11432: PPUSH
11433: CALL_OW 337
11437: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
11438: LD_EXP 30
11442: PPUSH
11443: CALL_OW 302
11447: IFFALSE 11460
11449: PUSH
11450: LD_EXP 33
11454: PPUSH
11455: CALL_OW 302
11459: AND
11460: IFFALSE 11478
11462: PUSH
11463: LD_INT 6
11465: PPUSH
11466: LD_INT 2
11468: PPUSH
11469: CALL_OW 321
11473: PUSH
11474: LD_INT 2
11476: EQUAL
11477: AND
11478: IFFALSE 11513
11480: PUSH
11481: LD_EXP 33
11485: PPUSH
11486: LD_EXP 21
11490: PPUSH
11491: CALL_OW 296
11495: PUSH
11496: LD_INT 10
11498: LESS
11499: IFTRUE 11512
11501: PUSH
11502: LD_EXP 33
11506: PPUSH
11507: CALL_OW 310
11511: OR
11512: AND
11513: IFFALSE 11727
11515: GO 11517
11517: DISABLE
// begin DialogueOn ;
11518: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
11522: LD_EXP 33
11526: PPUSH
11527: LD_STRING DA-RC-1
11529: PPUSH
11530: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
11534: LD_EXP 33
11538: PPUSH
11539: LD_STRING DA-RC-2
11541: PPUSH
11542: CALL_OW 88
// if IsOk ( Kaia ) then
11546: LD_EXP 26
11550: PPUSH
11551: CALL_OW 302
11555: IFFALSE 11629
// begin Say ( Kaia , DK-RC-3 ) ;
11557: LD_EXP 26
11561: PPUSH
11562: LD_STRING DK-RC-3
11564: PPUSH
11565: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
11569: LD_EXP 33
11573: PPUSH
11574: LD_STRING DA-RC-4
11576: PPUSH
11577: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
11581: LD_EXP 26
11585: PPUSH
11586: LD_STRING DK-RC-5
11588: PPUSH
11589: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
11593: LD_EXP 33
11597: PPUSH
11598: LD_STRING DA-RC-6
11600: PPUSH
11601: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
11605: LD_EXP 26
11609: PPUSH
11610: LD_STRING DK-RC-7
11612: PPUSH
11613: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
11617: LD_EXP 33
11621: PPUSH
11622: LD_STRING DA-RC-8
11624: PPUSH
11625: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
11629: LD_EXP 21
11633: PPUSH
11634: LD_STRING DH-RC-9
11636: PPUSH
11637: CALL_OW 88
// if IsOk ( Markov ) then
11641: LD_EXP 28
11645: PPUSH
11646: CALL_OW 302
11650: IFFALSE 11678
// begin Say ( Markov , DMar-RC-10 ) ;
11652: LD_EXP 28
11656: PPUSH
11657: LD_STRING DMar-RC-10
11659: PPUSH
11660: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
11664: LD_EXP 28
11668: PPUSH
11669: LD_STRING DMar-RC-11
11671: PPUSH
11672: CALL_OW 88
// end else
11676: GO 11690
// begin Say ( Olaf , DO-RC-a-10 ) ;
11678: LD_EXP 30
11682: PPUSH
11683: LD_STRING DO-RC-a-10
11685: PPUSH
11686: CALL_OW 88
// end ; DialogueOff ;
11690: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
11694: LD_STRING RemoteControl
11696: PPUSH
11697: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
11701: LD_INT 15
11703: PPUSH
11704: LD_INT 2
11706: PPUSH
11707: LD_INT 1
11709: PPUSH
11710: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
11714: LD_INT 22
11716: PPUSH
11717: LD_INT 2
11719: PPUSH
11720: LD_INT 1
11722: PPUSH
11723: CALL_OW 324
// end ;
11727: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
11728: LD_INT 12
11730: PPUSH
11731: LD_INT 22
11733: PUSH
11734: LD_INT 2
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: PPUSH
11741: CALL_OW 70
11745: IFFALSE 12114
11747: GO 11749
11749: DISABLE
11750: LD_INT 0
11752: PPUSH
// begin PrepareWestBase ;
11753: CALL 3979 0 0
// westBaseSpotted := true ;
11757: LD_ADDR_EXP 5
11761: PUSH
11762: LD_INT 1
11764: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11765: LD_INT 70
11767: PPUSH
11768: CALL_OW 67
// InGameOn ;
11772: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
11776: LD_INT 56
11778: PPUSH
11779: LD_INT 77
11781: PPUSH
11782: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
11786: LD_INT 56
11788: PPUSH
11789: LD_INT 77
11791: PPUSH
11792: LD_INT 2
11794: PPUSH
11795: LD_INT 12
11797: NEG
11798: PPUSH
11799: CALL_OW 330
// wait ( 0 0$2 ) ;
11803: LD_INT 70
11805: PPUSH
11806: CALL_OW 67
// DialogueOn ;
11810: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
11814: LD_EXP 21
11818: PPUSH
11819: LD_STRING DH-Rbase-1
11821: PPUSH
11822: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
11826: LD_EXP 26
11830: PPUSH
11831: LD_STRING DK-Rbase-2
11833: PPUSH
11834: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
11838: LD_EXP 26
11842: PPUSH
11843: LD_STRING DK-Rbase-3
11845: PPUSH
11846: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
11850: LD_EXP 26
11854: PPUSH
11855: LD_STRING DK-Rbase-4
11857: PPUSH
11858: CALL_OW 88
// DialogueOff ;
11862: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
11866: LD_INT 56
11868: PPUSH
11869: LD_INT 77
11871: PPUSH
11872: LD_INT 2
11874: PPUSH
11875: CALL_OW 331
// InGameOff ;
11879: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
11883: LD_INT 35
11885: PPUSH
11886: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
11890: LD_EXP 42
11894: NOT
11895: IFFALSE 11904
11897: PUSH
11898: LD_EXP 43
11902: NOT
11903: AND
11904: IFFALSE 11883
// wait ( 0 0$2 ) ;
11906: LD_INT 70
11908: PPUSH
11909: CALL_OW 67
// if IsOk ( Kaia ) then
11913: LD_EXP 26
11917: PPUSH
11918: CALL_OW 302
11922: IFFALSE 12037
// begin DialogueOn ;
11924: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
11928: LD_INT 56
11930: PPUSH
11931: LD_INT 81
11933: PPUSH
11934: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11938: LD_EXP 26
11942: PPUSH
11943: LD_STRING DK-Rbase-5
11945: PPUSH
11946: CALL_OW 88
// if IsOk ( Givi ) then
11950: LD_EXP 22
11954: PPUSH
11955: CALL_OW 302
11959: IFFALSE 12033
// begin Say ( Givi , DG-Rbase-6 ) ;
11961: LD_EXP 22
11965: PPUSH
11966: LD_STRING DG-Rbase-6
11968: PPUSH
11969: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11973: LD_EXP 22
11977: PPUSH
11978: LD_STRING DG-Rbase-7
11980: PPUSH
11981: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11985: LD_EXP 26
11989: PPUSH
11990: LD_STRING DK-Rbase-8
11992: PPUSH
11993: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11997: LD_EXP 22
12001: PPUSH
12002: LD_STRING DG-Rbase-9
12004: PPUSH
12005: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
12009: LD_EXP 22
12013: PPUSH
12014: LD_STRING DG-Rbase-10
12016: PPUSH
12017: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
12021: LD_EXP 26
12025: PPUSH
12026: LD_STRING DK-Rbase-11
12028: PPUSH
12029: CALL_OW 88
// end ; DialogueOff ;
12033: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
12037: LD_ADDR_VAR 0 1
12041: PUSH
12042: LD_INT 12
12044: PPUSH
12045: LD_INT 22
12047: PUSH
12048: LD_INT 3
12050: PUSH
12051: EMPTY
12052: LIST
12053: LIST
12054: PUSH
12055: LD_INT 21
12057: PUSH
12058: LD_INT 3
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: PPUSH
12069: CALL_OW 70
12073: PUSH
12074: FOR_IN
12075: IFFALSE 12091
// SetSide ( i , 2 ) ;
12077: LD_VAR 0 1
12081: PPUSH
12082: LD_INT 2
12084: PPUSH
12085: CALL_OW 235
12089: GO 12074
12091: POP
12092: POP
// westBaseCaptured := true ;
12093: LD_ADDR_EXP 9
12097: PUSH
12098: LD_INT 1
12100: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
12101: LD_INT 0
12103: PPUSH
12104: LD_INT 2
12106: PPUSH
12107: LD_INT 1
12109: PPUSH
12110: CALL_OW 324
// end ;
12114: PPOPN 1
12116: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
12117: LD_EXP 38
12121: NOT
12122: IFTRUE 12137
12124: PUSH
12125: LD_INT 10
12127: PPUSH
12128: CALL_OW 255
12132: PUSH
12133: LD_INT 2
12135: EQUAL
12136: OR
12137: IFFALSE 12274
12139: GO 12141
12141: DISABLE
// begin DialogueOn ;
12142: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
12146: LD_EXP 21
12150: PPUSH
12151: LD_STRING DH-Goal-1
12153: PPUSH
12154: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
12158: LD_EXP 29
12162: PPUSH
12163: LD_STRING DShar-Goal-2
12165: PPUSH
12166: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
12170: LD_EXP 21
12174: PPUSH
12175: LD_STRING DH-Goal-3
12177: PPUSH
12178: CALL_OW 88
// if reinforcementsAllowed then
12182: LD_EXP 14
12186: IFFALSE 12212
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
12188: LD_EXP 29
12192: PPUSH
12193: LD_STRING DShar-Goal-4
12195: PPUSH
12196: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
12200: LD_EXP 21
12204: PPUSH
12205: LD_STRING DH-Goal-5
12207: PPUSH
12208: CALL_OW 88
// end ; DialogueOff ;
12212: CALL_OW 7
// eastBaseCaptured := true ;
12216: LD_ADDR_EXP 10
12220: PUSH
12221: LD_INT 1
12223: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
12224: LD_STRING BaseCaptured
12226: PPUSH
12227: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
12231: LD_INT 10
12233: PPUSH
12234: LD_INT 2
12236: PPUSH
12237: CALL_OW 235
// if not reinforcementsAllowed then
12241: LD_EXP 14
12245: NOT
12246: IFFALSE 12250
// exit ;
12248: GO 12274
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
12250: LD_INT 21000
12252: PUSH
12253: LD_INT 1050
12255: NEG
12256: PPUSH
12257: LD_INT 1050
12259: PPUSH
12260: CALL_OW 12
12264: PLUS
12265: PPUSH
12266: CALL_OW 67
// PrepareReinforcements ;
12270: CALL 2192 0 0
// end ;
12274: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
12275: LD_INT 22
12277: PUSH
12278: LD_INT 2
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: PUSH
12285: LD_INT 30
12287: PUSH
12288: LD_INT 13
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: PPUSH
12299: CALL_OW 69
12303: IFFALSE 12320
12305: GO 12307
12307: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
12308: LD_EXP 22
12312: PPUSH
12313: LD_STRING DG-Lab-1
12315: PPUSH
12316: CALL_OW 88
// end ;
12320: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
12321: LD_INT 5
12323: PPUSH
12324: LD_INT 2
12326: PPUSH
12327: CALL_OW 321
12331: PUSH
12332: LD_INT 2
12334: EQUAL
12335: IFFALSE 12348
12337: PUSH
12338: LD_EXP 22
12342: PPUSH
12343: CALL_OW 302
12347: AND
12348: IFFALSE 12409
12350: GO 12352
12352: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
12353: LD_EXP 22
12357: PPUSH
12358: LD_STRING DG-Stim-1
12360: PPUSH
12361: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
12365: LD_EXP 21
12369: PPUSH
12370: LD_STRING DH-Stim-2
12372: PPUSH
12373: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
12377: LD_EXP 22
12381: PPUSH
12382: LD_STRING DG-Stim-3
12384: PPUSH
12385: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
12389: LD_EXP 21
12393: PPUSH
12394: LD_STRING DH-Stim-4
12396: PPUSH
12397: CALL_OW 88
// drugsResearched := true ;
12401: LD_ADDR_EXP 11
12405: PUSH
12406: LD_INT 1
12408: ST_TO_ADDR
// end ;
12409: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
12410: LD_EXP 11
12414: IFFALSE 12726
12416: GO 12418
12418: DISABLE
12419: LD_INT 0
12421: PPUSH
12422: PPUSH
12423: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12424: LD_ADDR_VAR 0 2
12428: PUSH
12429: LD_EXP 21
12433: PUSH
12434: LD_EXP 22
12438: PUSH
12439: LD_EXP 30
12443: PUSH
12444: LD_EXP 28
12448: PUSH
12449: LD_EXP 26
12453: PUSH
12454: LD_EXP 27
12458: PUSH
12459: LD_EXP 32
12463: PUSH
12464: LD_EXP 25
12468: PUSH
12469: LD_EXP 23
12473: PUSH
12474: LD_EXP 24
12478: PUSH
12479: LD_EXP 33
12483: PUSH
12484: EMPTY
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12497: LD_ADDR_VAR 0 3
12501: PUSH
12502: LD_STRING H
12504: PUSH
12505: LD_STRING G
12507: PUSH
12508: LD_STRING O
12510: PUSH
12511: LD_STRING Mar
12513: PUSH
12514: LD_STRING K
12516: PUSH
12517: LD_STRING S
12519: PUSH
12520: LD_STRING Ks
12522: PUSH
12523: LD_STRING Kam
12525: PUSH
12526: LD_STRING M
12528: PUSH
12529: LD_STRING I
12531: PUSH
12532: LD_STRING A
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12548: LD_INT 35
12550: PPUSH
12551: CALL_OW 67
// for i := tmp downto 1 do
12555: LD_ADDR_VAR 0 1
12559: PUSH
12560: DOUBLE
12561: LD_VAR 0 2
12565: INC
12566: ST_TO_ADDR
12567: LD_INT 1
12569: PUSH
12570: FOR_DOWNTO
12571: IFFALSE 12717
// if GetLives ( tmp [ i ] ) < 250 then
12573: LD_VAR 0 2
12577: PUSH
12578: LD_VAR 0 1
12582: ARRAY
12583: PPUSH
12584: CALL_OW 256
12588: PUSH
12589: LD_INT 250
12591: LESS
12592: IFFALSE 12715
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
12594: LD_ADDR_EXP 19
12598: PUSH
12599: LD_EXP 19
12603: PUSH
12604: LD_INT 1
12606: PLUS
12607: ST_TO_ADDR
// DialogueOn ;
12608: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
12612: LD_VAR 0 2
12616: PUSH
12617: LD_VAR 0 1
12621: ARRAY
12622: PPUSH
12623: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
12627: LD_VAR 0 2
12631: PUSH
12632: LD_VAR 0 1
12636: ARRAY
12637: PPUSH
12638: LD_STRING D
12640: PUSH
12641: LD_VAR 0 3
12645: PUSH
12646: LD_VAR 0 1
12650: ARRAY
12651: STR
12652: PUSH
12653: LD_STRING -Stim-a-1
12655: STR
12656: PPUSH
12657: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
12661: LD_ADDR_VAR 0 2
12665: PUSH
12666: LD_VAR 0 2
12670: PPUSH
12671: LD_VAR 0 1
12675: PPUSH
12676: CALL_OW 3
12680: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12681: LD_ADDR_VAR 0 3
12685: PUSH
12686: LD_VAR 0 3
12690: PPUSH
12691: LD_VAR 0 1
12695: PPUSH
12696: CALL_OW 3
12700: ST_TO_ADDR
// drugsTested := true ;
12701: LD_ADDR_EXP 6
12705: PUSH
12706: LD_INT 1
12708: ST_TO_ADDR
// DialogueOff ;
12709: CALL_OW 7
// break ;
12713: GO 12717
// end ;
12715: GO 12570
12717: POP
12718: POP
// until not tmp ;
12719: LD_VAR 0 2
12723: NOT
12724: IFFALSE 12548
// end ;
12726: PPOPN 3
12728: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
12729: LD_INT 22
12731: PUSH
12732: LD_INT 2
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PUSH
12739: LD_INT 34
12741: PUSH
12742: LD_INT 31
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PPUSH
12753: CALL_OW 69
12757: IFFALSE 12789
12759: PUSH
12760: LD_INT 22
12762: PUSH
12763: LD_INT 2
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: PUSH
12770: LD_INT 33
12772: PUSH
12773: LD_INT 2
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: PPUSH
12784: CALL_OW 69
12788: AND
12789: IFFALSE 12802
12791: GO 12793
12793: DISABLE
// remoteControlConstructed := true ;
12794: LD_ADDR_EXP 12
12798: PUSH
12799: LD_INT 1
12801: ST_TO_ADDR
12802: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
12803: LD_EXP 12
12807: IFFALSE 13109
12809: GO 12811
12811: DISABLE
12812: LD_INT 0
12814: PPUSH
12815: PPUSH
12816: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12817: LD_ADDR_VAR 0 2
12821: PUSH
12822: LD_EXP 21
12826: PUSH
12827: LD_EXP 22
12831: PUSH
12832: LD_EXP 30
12836: PUSH
12837: LD_EXP 28
12841: PUSH
12842: LD_EXP 26
12846: PUSH
12847: LD_EXP 27
12851: PUSH
12852: LD_EXP 32
12856: PUSH
12857: LD_EXP 25
12861: PUSH
12862: LD_EXP 23
12866: PUSH
12867: LD_EXP 24
12871: PUSH
12872: LD_EXP 33
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12890: LD_ADDR_VAR 0 3
12894: PUSH
12895: LD_STRING H
12897: PUSH
12898: LD_STRING G
12900: PUSH
12901: LD_STRING O
12903: PUSH
12904: LD_STRING Mar
12906: PUSH
12907: LD_STRING K
12909: PUSH
12910: LD_STRING S
12912: PUSH
12913: LD_STRING Ks
12915: PUSH
12916: LD_STRING Kam
12918: PUSH
12919: LD_STRING M
12921: PUSH
12922: LD_STRING I
12924: PUSH
12925: LD_STRING A
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12941: LD_INT 35
12943: PPUSH
12944: CALL_OW 67
// for i := tmp downto 1 do
12948: LD_ADDR_VAR 0 1
12952: PUSH
12953: DOUBLE
12954: LD_VAR 0 2
12958: INC
12959: ST_TO_ADDR
12960: LD_INT 1
12962: PUSH
12963: FOR_DOWNTO
12964: IFFALSE 13100
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
12966: LD_VAR 0 2
12970: PUSH
12971: LD_VAR 0 1
12975: ARRAY
12976: PPUSH
12977: CALL_OW 257
12981: PUSH
12982: LD_INT 3
12984: EQUAL
12985: IFFALSE 13004
12987: PUSH
12988: LD_VAR 0 2
12992: PUSH
12993: LD_VAR 0 1
12997: ARRAY
12998: PPUSH
12999: CALL_OW 432
13003: AND
13004: IFFALSE 13098
// begin DialogueOn ;
13006: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
13010: LD_VAR 0 2
13014: PUSH
13015: LD_VAR 0 1
13019: ARRAY
13020: PPUSH
13021: LD_STRING D
13023: PUSH
13024: LD_VAR 0 3
13028: PUSH
13029: LD_VAR 0 1
13033: ARRAY
13034: STR
13035: PUSH
13036: LD_STRING -RC-a-1
13038: STR
13039: PPUSH
13040: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
13044: LD_ADDR_VAR 0 2
13048: PUSH
13049: LD_VAR 0 2
13053: PPUSH
13054: LD_VAR 0 1
13058: PPUSH
13059: CALL_OW 3
13063: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
13064: LD_ADDR_VAR 0 3
13068: PUSH
13069: LD_VAR 0 3
13073: PPUSH
13074: LD_VAR 0 1
13078: PPUSH
13079: CALL_OW 3
13083: ST_TO_ADDR
// DialogueOff ;
13084: CALL_OW 7
// remoteControlTested := true ;
13088: LD_ADDR_EXP 7
13092: PUSH
13093: LD_INT 1
13095: ST_TO_ADDR
// break ;
13096: GO 13100
// end ;
13098: GO 12963
13100: POP
13101: POP
// until not tmp ;
13102: LD_VAR 0 2
13106: NOT
13107: IFFALSE 12941
// end ;
13109: PPOPN 3
13111: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
13112: LD_EXP 7
13116: IFFALSE 13129
13118: PUSH
13119: LD_EXP 28
13123: PPUSH
13124: CALL_OW 302
13128: AND
13129: IFFALSE 13158
13131: GO 13133
13133: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
13134: LD_EXP 28
13138: PPUSH
13139: LD_STRING DMar-RC-a-2
13141: PPUSH
13142: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
13146: LD_EXP 28
13150: PPUSH
13151: LD_STRING DMar-RC-a-3
13153: PPUSH
13154: CALL_OW 88
// end ;
13158: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
13159: LD_EXP 14
13163: IFFALSE 13185
13165: PUSH
13166: LD_EXP 21
13170: PPUSH
13171: LD_EXP 33
13175: PPUSH
13176: CALL_OW 296
13180: PUSH
13181: LD_INT 8
13183: LESS
13184: AND
13185: IFFALSE 13197
13187: PUSH
13188: LD_INT 2
13190: PPUSH
13191: CALL_OW 463
13195: NOT
13196: AND
13197: IFFALSE 13210
13199: PUSH
13200: LD_EXP 33
13204: PPUSH
13205: CALL_OW 302
13209: AND
13210: IFFALSE 13223
13212: PUSH
13213: LD_EXP 21
13217: PPUSH
13218: CALL_OW 302
13222: AND
13223: IFFALSE 13401
13225: GO 13227
13227: DISABLE
// begin if not IsInUnit ( Aviradze ) then
13228: LD_EXP 33
13232: PPUSH
13233: CALL_OW 310
13237: NOT
13238: IFFALSE 13254
// ComTurnUnit ( Aviradze , Heike ) ;
13240: LD_EXP 33
13244: PPUSH
13245: LD_EXP 21
13249: PPUSH
13250: CALL_OW 119
// if not IsInUnit ( Heike ) then
13254: LD_EXP 21
13258: PPUSH
13259: CALL_OW 310
13263: NOT
13264: IFFALSE 13280
// ComTurnUnit ( Heike , Aviradze ) ;
13266: LD_EXP 21
13270: PPUSH
13271: LD_EXP 33
13275: PPUSH
13276: CALL_OW 119
// wait ( 0 0$1 ) ;
13280: LD_INT 35
13282: PPUSH
13283: CALL_OW 67
// DialogueOn ;
13287: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
13291: LD_EXP 33
13295: PPUSH
13296: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
13300: LD_EXP 21
13304: PPUSH
13305: LD_STRING DH-Beria-1
13307: PPUSH
13308: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
13312: LD_EXP 33
13316: PPUSH
13317: LD_STRING DA-Beria-2
13319: PPUSH
13320: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
13324: LD_EXP 21
13328: PPUSH
13329: LD_STRING DH-Beria-3
13331: PPUSH
13332: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
13336: LD_EXP 33
13340: PPUSH
13341: LD_STRING DA-Beria-4
13343: PPUSH
13344: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
13348: LD_EXP 33
13352: PPUSH
13353: LD_STRING DA-Beria-5
13355: PPUSH
13356: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
13360: LD_EXP 33
13364: PPUSH
13365: LD_STRING DA-Beria-6
13367: PPUSH
13368: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
13372: LD_EXP 21
13376: PPUSH
13377: LD_STRING DA-Beria-7
13379: PPUSH
13380: CALL_OW 88
// DialogueOff ;
13384: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
13388: LD_INT 52
13390: PPUSH
13391: LD_INT 2
13393: PPUSH
13394: LD_INT 1
13396: PPUSH
13397: CALL_OW 322
// end ;
13401: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
13402: LD_EXP 26
13406: PPUSH
13407: CALL_OW 300
13411: IFFALSE 13428
13413: PUSH
13414: LD_EXP 26
13418: PPUSH
13419: CALL_OW 256
13423: PUSH
13424: LD_INT 10
13426: LESS
13427: AND
13428: IFFALSE 13465
13430: GO 13432
13432: DISABLE
// begin DialogueOn ;
13433: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
13437: LD_EXP 26
13441: PPUSH
13442: LD_STRING DK-Kdeath-1
13444: PPUSH
13445: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
13449: LD_EXP 21
13453: PPUSH
13454: LD_STRING DH-Kdeath-2
13456: PPUSH
13457: CALL_OW 88
// DialogueOff ;
13461: CALL_OW 7
// end ;
13465: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
13466: LD_INT 2
13468: PPUSH
13469: LD_EXP 39
13473: PPUSH
13474: CALL 1316 0 2
13478: IFFALSE 13495
13480: GO 13482
13482: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
13483: LD_EXP 21
13487: PPUSH
13488: LD_STRING DH-Obj-1
13490: PPUSH
13491: CALL_OW 88
13495: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
13496: LD_INT 2
13498: PPUSH
13499: LD_EXP 40
13503: PPUSH
13504: CALL 1316 0 2
13508: IFFALSE 13525
13510: GO 13512
13512: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
13513: LD_EXP 21
13517: PPUSH
13518: LD_STRING DH-Obj-a-1
13520: PPUSH
13521: CALL_OW 88
13525: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 11 11$00 , 10 10$30 , 10 10$00 , 9 9$30 ] [ Difficulty ] do
13526: LD_EXP 10
13530: IFTRUE 13563
13532: PUSH
13533: LD_OWVAR 1
13537: PUSH
13538: LD_INT 23100
13540: PUSH
13541: LD_INT 22050
13543: PUSH
13544: LD_INT 21000
13546: PUSH
13547: LD_INT 19950
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: PUSH
13556: LD_OWVAR 67
13560: ARRAY
13561: GREATEREQUAL
13562: OR
13563: IFFALSE 13589
13565: GO 13567
13567: DISABLE
// begin if eastBaseCaptured then
13568: LD_EXP 10
13572: IFFALSE 13581
// wait ( 2 2$00 ) ;
13574: LD_INT 4200
13576: PPUSH
13577: CALL_OW 67
// convoyStarted := true ;
13581: LD_ADDR_EXP 17
13585: PUSH
13586: LD_INT 1
13588: ST_TO_ADDR
// end ;
13589: END
// every 0 0$1 trigger convoyStarted do
13590: LD_EXP 17
13594: IFFALSE 13685
13596: GO 13598
13598: DISABLE
// begin DialogueOn ;
13599: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
13603: LD_EXP 29
13607: PPUSH
13608: LD_STRING DShar-Convoy-1
13610: PPUSH
13611: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
13615: LD_EXP 21
13619: PPUSH
13620: LD_STRING DH-Convoy-2
13622: PPUSH
13623: CALL_OW 88
// DialogueOff ;
13627: CALL_OW 7
// wait ( 0 0$10 ) ;
13631: LD_INT 350
13633: PPUSH
13634: CALL_OW 67
// PrepareConvoy ;
13638: CALL 4628 0 0
// repeat wait ( rand ( 2 2$30 , 4 4$30 ) ) ;
13642: LD_INT 5250
13644: PPUSH
13645: LD_INT 9450
13647: PPUSH
13648: CALL_OW 12
13652: PPUSH
13653: CALL_OW 67
// PrepareConvoy ;
13657: CALL 4628 0 0
// convoyCounter := convoyCounter - 1 ;
13661: LD_ADDR_EXP 16
13665: PUSH
13666: LD_EXP 16
13670: PUSH
13671: LD_INT 1
13673: MINUS
13674: ST_TO_ADDR
// until convoyCounter <= 0 ;
13675: LD_EXP 16
13679: PUSH
13680: LD_INT 0
13682: LESSEQUAL
13683: IFFALSE 13642
// end ;
13685: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
13686: LD_EXP 15
13690: PUSH
13691: LD_INT 10
13693: GREATEREQUAL
13694: IFFALSE 13711
13696: GO 13698
13698: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
13699: LD_EXP 31
13703: PPUSH
13704: LD_STRING DOm-Fail-1
13706: PPUSH
13707: CALL_OW 94
13711: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
13712: LD_EXP 39
13716: NOT
13717: IFFALSE 13726
13719: PUSH
13720: LD_EXP 40
13724: NOT
13725: AND
13726: IFFALSE 13738
13728: GO 13730
13730: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
13731: LD_STRING RaiderDone
13733: PPUSH
13734: CALL_OW 337
13738: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
13739: LD_INT 22
13741: PUSH
13742: LD_INT 2
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: PUSH
13749: LD_INT 33
13751: PUSH
13752: LD_INT 2
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PPUSH
13763: CALL_OW 69
13767: PUSH
13768: LD_INT 3
13770: GREATEREQUAL
13771: IFFALSE 13807
13773: PUSH
13774: LD_INT 22
13776: PUSH
13777: LD_INT 2
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PUSH
13784: LD_INT 34
13786: PUSH
13787: LD_INT 31
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PPUSH
13798: CALL_OW 69
13802: PUSH
13803: LD_INT 2
13805: GREATEREQUAL
13806: AND
13807: IFFALSE 13819
13809: GO 13811
13811: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
13812: LD_STRING RemoteControlDone
13814: PPUSH
13815: CALL_OW 337
13819: END
// every 0 0$1 trigger ( convoyCounter < 1 and not UnitFilter ( ruConvoySquad , [ [ f_placed ] , [ f_type , unit_human ] ] ) ) or tick >= 60 60$00 do var i , tmp , tmp2 , vehs , m1 , m2 , m3 ;
13820: LD_EXP 16
13824: PUSH
13825: LD_INT 1
13827: LESS
13828: IFFALSE 13862
13830: PUSH
13831: LD_EXP 41
13835: PPUSH
13836: LD_INT 52
13838: PUSH
13839: EMPTY
13840: LIST
13841: PUSH
13842: LD_INT 21
13844: PUSH
13845: LD_INT 1
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: PPUSH
13856: CALL_OW 72
13860: NOT
13861: AND
13862: IFTRUE 13874
13864: PUSH
13865: LD_OWVAR 1
13869: PUSH
13870: LD_INT 126000
13872: GREATEREQUAL
13873: OR
13874: IFFALSE 15167
13876: GO 13878
13878: DISABLE
13879: LD_INT 0
13881: PPUSH
13882: PPUSH
13883: PPUSH
13884: PPUSH
13885: PPUSH
13886: PPUSH
13887: PPUSH
// begin m1 := false ;
13888: LD_ADDR_VAR 0 5
13892: PUSH
13893: LD_INT 0
13895: ST_TO_ADDR
// m2 := false ;
13896: LD_ADDR_VAR 0 6
13900: PUSH
13901: LD_INT 0
13903: ST_TO_ADDR
// m3 := false ;
13904: LD_ADDR_VAR 0 7
13908: PUSH
13909: LD_INT 0
13911: ST_TO_ADDR
// ChangeMissionObjectives ( ReinforcementsDone ) ;
13912: LD_STRING ReinforcementsDone
13914: PPUSH
13915: CALL_OW 337
// music_class := music_victory ;
13919: LD_ADDR_OWVAR 72
13923: PUSH
13924: LD_INT 4
13926: ST_TO_ADDR
// if tick <= 45 45$00 then
13927: LD_OWVAR 1
13931: PUSH
13932: LD_INT 94500
13934: LESSEQUAL
13935: IFFALSE 13944
// SetAchievement ( ACH_HSPEED_5 ) ;
13937: LD_STRING ACH_HSPEED_5
13939: PPUSH
13940: CALL_OW 543
// InGameOn ;
13944: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
13948: LD_EXP 21
13952: PPUSH
13953: LD_STRING DH-end-1
13955: PPUSH
13956: CALL_OW 88
// wait ( 0 0$2 ) ;
13960: LD_INT 70
13962: PPUSH
13963: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
13967: LD_EXP 29
13971: PPUSH
13972: LD_STRING DShar-end-2
13974: PPUSH
13975: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
13979: LD_EXP 39
13983: NOT
13984: IFFALSE 13993
13986: PUSH
13987: LD_EXP 40
13991: NOT
13992: AND
13993: IFFALSE 14009
// begin Say ( Heike , DH-end-3 ) ;
13995: LD_EXP 21
13999: PPUSH
14000: LD_STRING DH-end-3
14002: PPUSH
14003: CALL_OW 88
// end else
14007: GO 14113
// begin Say ( Heike , DH-end-a-3 ) ;
14009: LD_EXP 21
14013: PPUSH
14014: LD_STRING DH-end-a-3
14016: PPUSH
14017: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
14021: LD_EXP 29
14025: PPUSH
14026: LD_STRING DShar-end-a-4
14028: PPUSH
14029: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
14033: LD_EXP 21
14037: PPUSH
14038: LD_STRING DH-end-a-5
14040: PPUSH
14041: CALL_OW 88
// InGameOff ;
14045: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
14049: LD_INT 35
14051: PPUSH
14052: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_type , unit_human ] ] ) = 0 ;
14056: LD_INT 22
14058: PUSH
14059: LD_INT 3
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: PUSH
14066: LD_INT 50
14068: PUSH
14069: EMPTY
14070: LIST
14071: PUSH
14072: LD_INT 21
14074: PUSH
14075: LD_INT 1
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: LIST
14086: PPUSH
14087: CALL_OW 69
14091: PUSH
14092: LD_INT 0
14094: EQUAL
14095: IFFALSE 14049
// InGameOn ;
14097: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
14101: LD_EXP 21
14105: PPUSH
14106: LD_STRING DH-end-a-6
14108: PPUSH
14109: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
14113: LD_EXP 29
14117: PPUSH
14118: LD_STRING DShar-end-3
14120: PPUSH
14121: CALL_OW 94
// if not flamethrowerBuilt then
14125: LD_EXP 20
14129: NOT
14130: IFFALSE 14139
// SetAchievement ( ACH_FIRE ) ;
14132: LD_STRING ACH_FIRE
14134: PPUSH
14135: CALL_OW 543
// if drugsTested then
14139: LD_EXP 6
14143: IFFALSE 14165
// begin m1 := true ;
14145: LD_ADDR_VAR 0 5
14149: PUSH
14150: LD_INT 1
14152: ST_TO_ADDR
// AddMedal ( med1 , 1 ) ;
14153: LD_STRING med1
14155: PPUSH
14156: LD_INT 1
14158: PPUSH
14159: CALL_OW 101
// end else
14163: GO 14205
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
14165: LD_INT 5
14167: PPUSH
14168: LD_INT 2
14170: PPUSH
14171: CALL_OW 321
14175: PUSH
14176: LD_INT 2
14178: EQUAL
14179: IFFALSE 14194
// AddMedal ( med1 , - 1 ) else
14181: LD_STRING med1
14183: PPUSH
14184: LD_INT 1
14186: NEG
14187: PPUSH
14188: CALL_OW 101
14192: GO 14205
// AddMedal ( med1 , - 2 ) ;
14194: LD_STRING med1
14196: PPUSH
14197: LD_INT 2
14199: NEG
14200: PPUSH
14201: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 1 then
14205: LD_INT 22
14207: PUSH
14208: LD_INT 2
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: LD_INT 33
14217: PUSH
14218: LD_INT 2
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: PPUSH
14229: CALL_OW 69
14233: PUSH
14234: LD_INT 3
14236: GREATEREQUAL
14237: IFFALSE 14273
14239: PUSH
14240: LD_INT 22
14242: PUSH
14243: LD_INT 2
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PUSH
14250: LD_INT 34
14252: PUSH
14253: LD_INT 31
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: PPUSH
14264: CALL_OW 69
14268: PUSH
14269: LD_INT 1
14271: GREATEREQUAL
14272: AND
14273: IFFALSE 14295
// begin m2 := true ;
14275: LD_ADDR_VAR 0 6
14279: PUSH
14280: LD_INT 1
14282: ST_TO_ADDR
// AddMedal ( med2 , 1 ) ;
14283: LD_STRING med2
14285: PPUSH
14286: LD_INT 1
14288: PPUSH
14289: CALL_OW 101
// end else
14293: GO 14306
// AddMedal ( med2 , - 1 ) ;
14295: LD_STRING med2
14297: PPUSH
14298: LD_INT 1
14300: NEG
14301: PPUSH
14302: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
14306: LD_EXP 15
14310: PUSH
14311: LD_INT 10
14313: PUSH
14314: LD_INT 8
14316: PUSH
14317: LD_INT 6
14319: PUSH
14320: LD_INT 5
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: PUSH
14329: LD_OWVAR 67
14333: ARRAY
14334: LESS
14335: IFFALSE 14357
// begin m3 := true ;
14337: LD_ADDR_VAR 0 7
14341: PUSH
14342: LD_INT 1
14344: ST_TO_ADDR
// AddMedal ( med3 , 1 ) ;
14345: LD_STRING med3
14347: PPUSH
14348: LD_INT 1
14350: PPUSH
14351: CALL_OW 101
// end else
14355: GO 14368
// AddMedal ( med3 , - 1 ) ;
14357: LD_STRING med3
14359: PPUSH
14360: LD_INT 1
14362: NEG
14363: PPUSH
14364: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
14368: LD_VAR 0 5
14372: IFFALSE 14380
14374: PUSH
14375: LD_VAR 0 6
14379: AND
14380: IFFALSE 14388
14382: PUSH
14383: LD_VAR 0 7
14387: AND
14388: IFFALSE 14400
14390: PUSH
14391: LD_OWVAR 67
14395: PUSH
14396: LD_INT 3
14398: GREATEREQUAL
14399: AND
14400: IFFALSE 14412
// SetAchievementEX ( ACH_ARES , 5 ) ;
14402: LD_STRING ACH_ARES
14404: PPUSH
14405: LD_INT 5
14407: PPUSH
14408: CALL_OW 564
// GiveMedals ( MAIN ) ;
14412: LD_STRING MAIN
14414: PPUSH
14415: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
14419: LD_INT 22
14421: PUSH
14422: LD_INT 2
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: PUSH
14429: LD_INT 23
14431: PUSH
14432: LD_INT 2
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: PUSH
14439: LD_INT 21
14441: PUSH
14442: LD_INT 1
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: PUSH
14449: EMPTY
14450: LIST
14451: LIST
14452: LIST
14453: PPUSH
14454: CALL_OW 69
14458: PPUSH
14459: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
14463: LD_EXP 15
14467: PPUSH
14468: LD_STRING 05_ConvoySavedCounter
14470: PPUSH
14471: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
14475: LD_EXP 13
14479: PPUSH
14480: LD_STRING 05_Radar
14482: PPUSH
14483: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
14487: LD_EXP 6
14491: PPUSH
14492: LD_STRING 05_DrugsTested
14494: PPUSH
14495: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
14499: LD_INT 22
14501: PUSH
14502: LD_INT 2
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: PUSH
14509: LD_INT 33
14511: PUSH
14512: LD_INT 2
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PPUSH
14523: CALL_OW 69
14527: PUSH
14528: LD_INT 3
14530: GREATEREQUAL
14531: IFFALSE 14567
14533: PUSH
14534: LD_INT 22
14536: PUSH
14537: LD_INT 2
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PUSH
14544: LD_INT 34
14546: PUSH
14547: LD_INT 31
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: PPUSH
14558: CALL_OW 69
14562: PUSH
14563: LD_INT 2
14565: GREATEREQUAL
14566: AND
14567: PPUSH
14568: LD_STRING 05_RemoteControl
14570: PPUSH
14571: CALL_OW 39
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
14575: LD_ADDR_VAR 0 2
14579: PUSH
14580: LD_INT 22
14582: PUSH
14583: LD_INT 2
14585: PUSH
14586: EMPTY
14587: LIST
14588: LIST
14589: PUSH
14590: LD_INT 21
14592: PUSH
14593: LD_INT 2
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: PPUSH
14604: CALL_OW 69
14608: ST_TO_ADDR
// if tmp then
14609: LD_VAR 0 2
14613: IFFALSE 14732
// begin vehs := [ ] ;
14615: LD_ADDR_VAR 0 4
14619: PUSH
14620: EMPTY
14621: ST_TO_ADDR
// for i in tmp do
14622: LD_ADDR_VAR 0 1
14626: PUSH
14627: LD_VAR 0 2
14631: PUSH
14632: FOR_IN
14633: IFFALSE 14718
// vehs := Replace ( vehs , vehs + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) ] ) ;
14635: LD_ADDR_VAR 0 4
14639: PUSH
14640: LD_VAR 0 4
14644: PPUSH
14645: LD_VAR 0 4
14649: PUSH
14650: LD_INT 1
14652: PLUS
14653: PPUSH
14654: LD_VAR 0 1
14658: PPUSH
14659: CALL_OW 265
14663: PUSH
14664: LD_VAR 0 1
14668: PPUSH
14669: CALL_OW 262
14673: PUSH
14674: LD_VAR 0 1
14678: PPUSH
14679: CALL_OW 263
14683: PUSH
14684: LD_VAR 0 1
14688: PPUSH
14689: CALL_OW 264
14693: PUSH
14694: LD_VAR 0 1
14698: PPUSH
14699: CALL_OW 248
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: PPUSH
14711: CALL_OW 1
14715: ST_TO_ADDR
14716: GO 14632
14718: POP
14719: POP
// SaveVariable ( vehs , 05_Vehicles ) ;
14720: LD_VAR 0 4
14724: PPUSH
14725: LD_STRING 05_Vehicles
14727: PPUSH
14728: CALL_OW 39
// end ; tmp := FilterUnitsInArea ( saveBuildingsArea , [ f_type , unit_building ] ) ;
14732: LD_ADDR_VAR 0 2
14736: PUSH
14737: LD_INT 25
14739: PPUSH
14740: LD_INT 21
14742: PUSH
14743: LD_INT 3
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PPUSH
14750: CALL_OW 70
14754: ST_TO_ADDR
// tmp2 := [ ] ;
14755: LD_ADDR_VAR 0 3
14759: PUSH
14760: EMPTY
14761: ST_TO_ADDR
// if tmp then
14762: LD_VAR 0 2
14766: IFFALSE 14919
// begin for i in tmp do
14768: LD_ADDR_VAR 0 1
14772: PUSH
14773: LD_VAR 0 2
14777: PUSH
14778: FOR_IN
14779: IFFALSE 14905
// tmp2 := Join ( tmp2 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetNation ( i ) , GetBLevel ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ) ;
14781: LD_ADDR_VAR 0 3
14785: PUSH
14786: LD_VAR 0 3
14790: PPUSH
14791: LD_VAR 0 1
14795: PPUSH
14796: CALL_OW 266
14800: PUSH
14801: LD_VAR 0 1
14805: PPUSH
14806: CALL_OW 250
14810: PUSH
14811: LD_VAR 0 1
14815: PPUSH
14816: CALL_OW 251
14820: PUSH
14821: LD_VAR 0 1
14825: PPUSH
14826: CALL_OW 254
14830: PUSH
14831: LD_VAR 0 1
14835: PPUSH
14836: CALL_OW 248
14840: PUSH
14841: LD_VAR 0 1
14845: PPUSH
14846: CALL_OW 267
14850: PUSH
14851: LD_VAR 0 1
14855: PPUSH
14856: LD_INT 1
14858: PPUSH
14859: CALL_OW 268
14863: PUSH
14864: LD_VAR 0 1
14868: PPUSH
14869: LD_INT 2
14871: PPUSH
14872: CALL_OW 268
14876: PUSH
14877: LD_VAR 0 1
14881: PPUSH
14882: CALL_OW 269
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: PPUSH
14898: CALL 75980 0 2
14902: ST_TO_ADDR
14903: GO 14778
14905: POP
14906: POP
// SaveVariable ( tmp2 , 05_Buildings ) ;
14907: LD_VAR 0 3
14911: PPUSH
14912: LD_STRING 05_Buildings
14914: PPUSH
14915: CALL_OW 39
// end ; SaveCharacters ( Heike , 05_Heike ) ;
14919: LD_EXP 21
14923: PPUSH
14924: LD_STRING 05_Heike
14926: PPUSH
14927: CALL_OW 38
// if Aviradze then
14931: LD_EXP 33
14935: IFFALSE 14949
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
14937: LD_EXP 33
14941: PPUSH
14942: LD_STRING 05_Aviradze
14944: PPUSH
14945: CALL_OW 38
// if Ibrahim then
14949: LD_EXP 24
14953: IFFALSE 14967
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
14955: LD_EXP 24
14959: PPUSH
14960: LD_STRING 05_Ibrahim
14962: PPUSH
14963: CALL_OW 38
// if Kamil then
14967: LD_EXP 25
14971: IFFALSE 14985
// SaveCharacters ( Kamil , 05_Kamil ) ;
14973: LD_EXP 25
14977: PPUSH
14978: LD_STRING 05_Kamil
14980: PPUSH
14981: CALL_OW 38
// if Sophia then
14985: LD_EXP 27
14989: IFFALSE 15003
// SaveCharacters ( Sophia , 05_Sophia ) ;
14991: LD_EXP 27
14995: PPUSH
14996: LD_STRING 05_Sophia
14998: PPUSH
14999: CALL_OW 38
// if Kaia then
15003: LD_EXP 26
15007: IFFALSE 15021
// SaveCharacters ( Kaia , 05_Kaia ) ;
15009: LD_EXP 26
15013: PPUSH
15014: LD_STRING 05_Kaia
15016: PPUSH
15017: CALL_OW 38
// if Givi then
15021: LD_EXP 22
15025: IFFALSE 15039
// SaveCharacters ( Givi , 05_Givi ) ;
15027: LD_EXP 22
15031: PPUSH
15032: LD_STRING 05_Givi
15034: PPUSH
15035: CALL_OW 38
// if Mike then
15039: LD_EXP 23
15043: IFFALSE 15057
// SaveCharacters ( Mike , 05_Mike ) ;
15045: LD_EXP 23
15049: PPUSH
15050: LD_STRING 05_Mike
15052: PPUSH
15053: CALL_OW 38
// if Markov then
15057: LD_EXP 28
15061: IFFALSE 15075
// SaveCharacters ( Markov , 05_Markov ) ;
15063: LD_EXP 28
15067: PPUSH
15068: LD_STRING 05_Markov
15070: PPUSH
15071: CALL_OW 38
// if Kurt then
15075: LD_EXP 32
15079: IFFALSE 15093
// SaveCharacters ( Kurt , 05_Kurt ) ;
15081: LD_EXP 32
15085: PPUSH
15086: LD_STRING 05_Kurt
15088: PPUSH
15089: CALL_OW 38
// if heikeSecondSquad then
15093: LD_EXP 34
15097: IFFALSE 15111
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
15099: LD_EXP 34
15103: PPUSH
15104: LD_STRING 05_others
15106: PPUSH
15107: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
15111: LD_ADDR_VAR 0 2
15115: PUSH
15116: LD_INT 22
15118: PUSH
15119: LD_INT 2
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: PUSH
15126: LD_INT 23
15128: PUSH
15129: LD_INT 0
15131: PUSH
15132: EMPTY
15133: LIST
15134: LIST
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: PPUSH
15140: CALL_OW 69
15144: ST_TO_ADDR
// if tmp then
15145: LD_VAR 0 2
15149: IFFALSE 15163
// SaveCharacters ( tmp , 05_apes ) ;
15151: LD_VAR 0 2
15155: PPUSH
15156: LD_STRING 05_apes
15158: PPUSH
15159: CALL_OW 38
// YouWin ;
15163: CALL_OW 103
// end ; end_of_file
15167: PPOPN 7
15169: END
// every 0 0$35 + 0 0$20 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
15170: LD_EXP 9
15174: IFFALSE 15192
15176: PUSH
15177: LD_INT 13
15179: PPUSH
15180: LD_INT 1
15182: PPUSH
15183: CALL_OW 287
15187: PUSH
15188: LD_INT 25
15190: LESS
15191: AND
15192: IFFALSE 15219
15194: GO 15196
15196: DISABLE
// begin enable ;
15197: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
15198: LD_INT 1
15200: PPUSH
15201: LD_INT 5
15203: PPUSH
15204: CALL_OW 12
15208: PPUSH
15209: LD_INT 13
15211: PPUSH
15212: LD_INT 1
15214: PPUSH
15215: CALL_OW 55
// end ; end_of_file
15219: END
// export function SOS_UnitDestroyed ( un ) ; begin
15220: LD_INT 0
15222: PPUSH
// ComRadiation ( un ) ;
15223: LD_VAR 0 1
15227: PPUSH
15228: CALL 16390 0 1
// end ;
15232: LD_VAR 0 2
15236: RET
// export function SOS_UnitKamikazed ( un ) ; begin
15237: LD_INT 0
15239: PPUSH
// ComRadiation ( un ) ;
15240: LD_VAR 0 1
15244: PPUSH
15245: CALL 16390 0 1
// end ;
15249: LD_VAR 0 2
15253: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15254: LD_INT 0
15256: PPUSH
// end ;
15257: LD_VAR 0 4
15261: RET
// export function SOS_Command ( cmd ) ; begin
15262: LD_INT 0
15264: PPUSH
// end ;
15265: LD_VAR 0 2
15269: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
15270: LD_INT 0
15272: PPUSH
// end ;
15273: LD_VAR 0 6
15277: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
15278: LD_INT 0
15280: PPUSH
15281: PPUSH
15282: PPUSH
15283: PPUSH
15284: PPUSH
// if not vehicle or not factory then
15285: LD_VAR 0 1
15289: NOT
15290: IFTRUE 15299
15292: PUSH
15293: LD_VAR 0 2
15297: NOT
15298: OR
15299: IFFALSE 15303
// exit ;
15301: GO 15965
// weapon := GetWeapon ( vehicle ) ;
15303: LD_ADDR_VAR 0 7
15307: PUSH
15308: LD_VAR 0 1
15312: PPUSH
15313: CALL_OW 264
15317: ST_TO_ADDR
// if weapon = ar_miner then
15318: LD_VAR 0 7
15322: PUSH
15323: LD_INT 81
15325: EQUAL
15326: IFFALSE 15383
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
15328: LD_ADDR_EXP 51
15332: PUSH
15333: LD_EXP 51
15337: PPUSH
15338: LD_EXP 51
15342: PUSH
15343: LD_INT 1
15345: PLUS
15346: PPUSH
15347: LD_VAR 0 1
15351: PPUSH
15352: CALL_OW 1
15356: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
15357: LD_ADDR_EXP 52
15361: PUSH
15362: LD_EXP 52
15366: PPUSH
15367: LD_EXP 52
15371: PUSH
15372: LD_INT 1
15374: PLUS
15375: PPUSH
15376: EMPTY
15377: PPUSH
15378: CALL_OW 1
15382: ST_TO_ADDR
// end ; if not factoryWaypoints then
15383: LD_EXP 113
15387: NOT
15388: IFFALSE 15392
// exit ;
15390: GO 15965
// for i := 1 to Count ( factoryWaypoints ) do
15392: LD_ADDR_VAR 0 4
15396: PUSH
15397: DOUBLE
15398: LD_INT 1
15400: DEC
15401: ST_TO_ADDR
15402: LD_EXP 113
15406: PPUSH
15407: CALL 40004 0 1
15411: PUSH
15412: FOR_TO
15413: IFFALSE 15963
// if factoryWaypoints [ i ] [ 2 ] = factory then
15415: LD_EXP 113
15419: PUSH
15420: LD_VAR 0 4
15424: ARRAY
15425: PUSH
15426: LD_INT 2
15428: ARRAY
15429: PUSH
15430: LD_VAR 0 2
15434: EQUAL
15435: IFFALSE 15961
// begin if GetControl ( vehicle ) = control_manual then
15437: LD_VAR 0 1
15441: PPUSH
15442: CALL_OW 263
15446: PUSH
15447: LD_INT 1
15449: EQUAL
15450: IFFALSE 15814
// begin driver := IsDrivenBy ( vehicle ) ;
15452: LD_ADDR_VAR 0 5
15456: PUSH
15457: LD_VAR 0 1
15461: PPUSH
15462: CALL_OW 311
15466: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
15467: LD_VAR 0 5
15471: PUSH
15472: LD_EXP 114
15476: IN
15477: IFTRUE 15491
15479: PUSH
15480: LD_VAR 0 1
15484: PUSH
15485: LD_EXP 114
15489: IN
15490: OR
15491: IFFALSE 15497
// exit ;
15493: POP
15494: POP
15495: GO 15965
// if not HasTask ( driver ) then
15497: LD_VAR 0 5
15501: PPUSH
15502: CALL_OW 314
15506: NOT
15507: IFFALSE 15812
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
15509: LD_ADDR_EXP 114
15513: PUSH
15514: LD_EXP 114
15518: PPUSH
15519: LD_VAR 0 5
15523: PPUSH
15524: CALL 75980 0 2
15528: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
15529: LD_ADDR_EXP 114
15533: PUSH
15534: LD_EXP 114
15538: PPUSH
15539: LD_VAR 0 1
15543: PPUSH
15544: CALL 75980 0 2
15548: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
15549: LD_ADDR_VAR 0 6
15553: PUSH
15554: LD_EXP 113
15558: PUSH
15559: LD_VAR 0 4
15563: ARRAY
15564: PUSH
15565: LD_INT 3
15567: ARRAY
15568: PPUSH
15569: LD_EXP 113
15573: PUSH
15574: LD_VAR 0 4
15578: ARRAY
15579: PUSH
15580: LD_INT 4
15582: ARRAY
15583: PPUSH
15584: CALL_OW 428
15588: ST_TO_ADDR
// if hex then
15589: LD_VAR 0 6
15593: IFFALSE 15611
// ComMoveUnit ( driver , hex ) else
15595: LD_VAR 0 5
15599: PPUSH
15600: LD_VAR 0 6
15604: PPUSH
15605: CALL_OW 112
15609: GO 15695
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
15611: LD_VAR 0 1
15615: PPUSH
15616: LD_EXP 113
15620: PUSH
15621: LD_VAR 0 4
15625: ARRAY
15626: PUSH
15627: LD_INT 3
15629: ARRAY
15630: PPUSH
15631: LD_EXP 113
15635: PUSH
15636: LD_VAR 0 4
15640: ARRAY
15641: PUSH
15642: LD_INT 4
15644: ARRAY
15645: PPUSH
15646: CALL_OW 297
15650: PUSH
15651: LD_INT 0
15653: GREATER
15654: IFFALSE 15695
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
15656: LD_VAR 0 5
15660: PPUSH
15661: LD_EXP 113
15665: PUSH
15666: LD_VAR 0 4
15670: ARRAY
15671: PUSH
15672: LD_INT 3
15674: ARRAY
15675: PPUSH
15676: LD_EXP 113
15680: PUSH
15681: LD_VAR 0 4
15685: ARRAY
15686: PUSH
15687: LD_INT 4
15689: ARRAY
15690: PPUSH
15691: CALL_OW 111
// AddComExitVehicle ( driver ) ;
15695: LD_VAR 0 5
15699: PPUSH
15700: CALL_OW 181
// if Multiplayer then
15704: LD_OWVAR 4
15708: IFFALSE 15757
// begin repeat wait ( 10 ) ;
15710: LD_INT 10
15712: PPUSH
15713: CALL_OW 67
// until not IsInUnit ( driver ) ;
15717: LD_VAR 0 5
15721: PPUSH
15722: CALL_OW 310
15726: NOT
15727: IFFALSE 15710
// if not HasTask ( driver ) then
15729: LD_VAR 0 5
15733: PPUSH
15734: CALL_OW 314
15738: NOT
15739: IFFALSE 15755
// ComEnterUnit ( driver , factory ) ;
15741: LD_VAR 0 5
15745: PPUSH
15746: LD_VAR 0 2
15750: PPUSH
15751: CALL_OW 120
// end else
15755: GO 15771
// AddComEnterUnit ( driver , factory ) ;
15757: LD_VAR 0 5
15761: PPUSH
15762: LD_VAR 0 2
15766: PPUSH
15767: CALL_OW 180
// wait ( 0 0$1 ) ;
15771: LD_INT 35
15773: PPUSH
15774: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
15778: LD_ADDR_EXP 114
15782: PUSH
15783: LD_EXP 114
15787: PUSH
15788: LD_VAR 0 5
15792: DIFF
15793: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
15794: LD_ADDR_EXP 114
15798: PUSH
15799: LD_EXP 114
15803: PUSH
15804: LD_VAR 0 1
15808: DIFF
15809: ST_TO_ADDR
// break ;
15810: GO 15963
// end ; end else
15812: GO 15961
// if GetControl ( vehicle ) = control_remote then
15814: LD_VAR 0 1
15818: PPUSH
15819: CALL_OW 263
15823: PUSH
15824: LD_INT 2
15826: EQUAL
15827: IFFALSE 15913
// begin wait ( 0 0$2 ) ;
15829: LD_INT 70
15831: PPUSH
15832: CALL_OW 67
// repeat wait ( 10 ) ;
15836: LD_INT 10
15838: PPUSH
15839: CALL_OW 67
// Connect ( vehicle ) ;
15843: LD_VAR 0 1
15847: PPUSH
15848: CALL 46282 0 1
// until IsControledBy ( vehicle ) ;
15852: LD_VAR 0 1
15856: PPUSH
15857: CALL_OW 312
15861: IFFALSE 15836
// wait ( 10 ) ;
15863: LD_INT 10
15865: PPUSH
15866: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
15870: LD_VAR 0 1
15874: PPUSH
15875: LD_EXP 113
15879: PUSH
15880: LD_VAR 0 4
15884: ARRAY
15885: PUSH
15886: LD_INT 3
15888: ARRAY
15889: PPUSH
15890: LD_EXP 113
15894: PUSH
15895: LD_VAR 0 4
15899: ARRAY
15900: PUSH
15901: LD_INT 4
15903: ARRAY
15904: PPUSH
15905: CALL_OW 111
// break ;
15909: GO 15963
// end else
15911: GO 15961
// begin wait ( 0 0$3 ) ;
15913: LD_INT 105
15915: PPUSH
15916: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
15920: LD_VAR 0 1
15924: PPUSH
15925: LD_EXP 113
15929: PUSH
15930: LD_VAR 0 4
15934: ARRAY
15935: PUSH
15936: LD_INT 3
15938: ARRAY
15939: PPUSH
15940: LD_EXP 113
15944: PUSH
15945: LD_VAR 0 4
15949: ARRAY
15950: PUSH
15951: LD_INT 4
15953: ARRAY
15954: PPUSH
15955: CALL_OW 111
// break ;
15959: GO 15963
// end ; end ;
15961: GO 15412
15963: POP
15964: POP
// end ;
15965: LD_VAR 0 3
15969: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
15970: LD_INT 0
15972: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
15973: LD_VAR 0 1
15977: PUSH
15978: LD_INT 250
15980: EQUAL
15981: IFFALSE 15998
15983: PUSH
15984: LD_VAR 0 2
15988: PPUSH
15989: CALL_OW 264
15993: PUSH
15994: LD_INT 81
15996: EQUAL
15997: AND
15998: IFFALSE 16019
// MinerPlaceMine ( unit , x , y ) ;
16000: LD_VAR 0 2
16004: PPUSH
16005: LD_VAR 0 4
16009: PPUSH
16010: LD_VAR 0 5
16014: PPUSH
16015: CALL 19365 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
16019: LD_VAR 0 1
16023: PUSH
16024: LD_INT 251
16026: EQUAL
16027: IFFALSE 16044
16029: PUSH
16030: LD_VAR 0 2
16034: PPUSH
16035: CALL_OW 264
16039: PUSH
16040: LD_INT 81
16042: EQUAL
16043: AND
16044: IFFALSE 16065
// MinerDetonateMine ( unit , x , y ) ;
16046: LD_VAR 0 2
16050: PPUSH
16051: LD_VAR 0 4
16055: PPUSH
16056: LD_VAR 0 5
16060: PPUSH
16061: CALL 19772 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
16065: LD_VAR 0 1
16069: PUSH
16070: LD_INT 252
16072: EQUAL
16073: IFFALSE 16090
16075: PUSH
16076: LD_VAR 0 2
16080: PPUSH
16081: CALL_OW 264
16085: PUSH
16086: LD_INT 81
16088: EQUAL
16089: AND
16090: IFFALSE 16111
// MinerCreateMinefield ( unit , x , y ) ;
16092: LD_VAR 0 2
16096: PPUSH
16097: LD_VAR 0 4
16101: PPUSH
16102: LD_VAR 0 5
16106: PPUSH
16107: CALL 20004 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
16111: LD_VAR 0 1
16115: PUSH
16116: LD_INT 253
16118: EQUAL
16119: IFFALSE 16136
16121: PUSH
16122: LD_VAR 0 2
16126: PPUSH
16127: CALL_OW 257
16131: PUSH
16132: LD_INT 5
16134: EQUAL
16135: AND
16136: IFFALSE 16157
// ComBinocular ( unit , x , y ) ;
16138: LD_VAR 0 2
16142: PPUSH
16143: LD_VAR 0 4
16147: PPUSH
16148: LD_VAR 0 5
16152: PPUSH
16153: CALL 20379 0 3
// if selectedUnit then
16157: LD_VAR 0 3
16161: IFFALSE 16221
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
16163: LD_VAR 0 1
16167: PUSH
16168: LD_INT 254
16170: EQUAL
16171: IFFALSE 16188
16173: PUSH
16174: LD_VAR 0 2
16178: PPUSH
16179: CALL_OW 264
16183: PUSH
16184: LD_INT 99
16186: EQUAL
16187: AND
16188: IFFALSE 16205
16190: PUSH
16191: LD_VAR 0 3
16195: PPUSH
16196: CALL_OW 263
16200: PUSH
16201: LD_INT 3
16203: EQUAL
16204: AND
16205: IFFALSE 16221
// HackDestroyVehicle ( unit , selectedUnit ) ;
16207: LD_VAR 0 2
16211: PPUSH
16212: LD_VAR 0 3
16216: PPUSH
16217: CALL 18555 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
16221: LD_VAR 0 1
16225: PUSH
16226: LD_INT 255
16228: EQUAL
16229: IFFALSE 16253
16231: PUSH
16232: LD_VAR 0 2
16236: PPUSH
16237: CALL_OW 264
16241: PUSH
16242: LD_INT 14
16244: PUSH
16245: LD_INT 53
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: IN
16252: AND
16253: IFFALSE 16271
16255: PUSH
16256: LD_VAR 0 4
16260: PPUSH
16261: LD_VAR 0 5
16265: PPUSH
16266: CALL_OW 488
16270: AND
16271: IFFALSE 16295
// CutTreeXYR ( unit , x , y , 12 ) ;
16273: LD_VAR 0 2
16277: PPUSH
16278: LD_VAR 0 4
16282: PPUSH
16283: LD_VAR 0 5
16287: PPUSH
16288: LD_INT 12
16290: PPUSH
16291: CALL 16486 0 4
// if cmd = 256 then
16295: LD_VAR 0 1
16299: PUSH
16300: LD_INT 256
16302: EQUAL
16303: IFFALSE 16324
// SetFactoryWaypoint ( unit , x , y ) ;
16305: LD_VAR 0 2
16309: PPUSH
16310: LD_VAR 0 4
16314: PPUSH
16315: LD_VAR 0 5
16319: PPUSH
16320: CALL 36325 0 3
// if cmd = 257 then
16324: LD_VAR 0 1
16328: PUSH
16329: LD_INT 257
16331: EQUAL
16332: IFFALSE 16353
// SetWarehouseGatheringPoint ( unit , x , y ) ;
16334: LD_VAR 0 2
16338: PPUSH
16339: LD_VAR 0 4
16343: PPUSH
16344: LD_VAR 0 5
16348: PPUSH
16349: CALL 36821 0 3
// if cmd = 258 then
16353: LD_VAR 0 1
16357: PUSH
16358: LD_INT 258
16360: EQUAL
16361: IFFALSE 16385
// BurnTreeXYR ( unit , x , y , 8 ) ;
16363: LD_VAR 0 2
16367: PPUSH
16368: LD_VAR 0 4
16372: PPUSH
16373: LD_VAR 0 5
16377: PPUSH
16378: LD_INT 8
16380: PPUSH
16381: CALL 16908 0 4
// end ;
16385: LD_VAR 0 6
16389: RET
// export function ComRadiation ( un ) ; var eff ; begin
16390: LD_INT 0
16392: PPUSH
16393: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
16394: LD_VAR 0 1
16398: PPUSH
16399: CALL_OW 264
16403: PUSH
16404: LD_INT 91
16406: NONEQUAL
16407: IFFALSE 16411
// exit ;
16409: GO 16481
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
16411: LD_INT 68
16413: PPUSH
16414: LD_VAR 0 1
16418: PPUSH
16419: CALL_OW 255
16423: PPUSH
16424: CALL_OW 321
16428: PUSH
16429: LD_INT 2
16431: EQUAL
16432: IFFALSE 16444
// eff := 50 else
16434: LD_ADDR_VAR 0 3
16438: PUSH
16439: LD_INT 50
16441: ST_TO_ADDR
16442: GO 16452
// eff := 25 ;
16444: LD_ADDR_VAR 0 3
16448: PUSH
16449: LD_INT 25
16451: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
16452: LD_VAR 0 1
16456: PPUSH
16457: CALL_OW 250
16461: PPUSH
16462: LD_VAR 0 1
16466: PPUSH
16467: CALL_OW 251
16471: PPUSH
16472: LD_VAR 0 3
16476: PPUSH
16477: CALL_OW 495
// end ;
16481: LD_VAR 0 2
16485: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
16486: LD_INT 0
16488: PPUSH
16489: PPUSH
16490: PPUSH
16491: PPUSH
16492: PPUSH
16493: PPUSH
16494: PPUSH
16495: PPUSH
16496: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
16497: LD_VAR 0 1
16501: PPUSH
16502: CALL_OW 302
16506: NOT
16507: IFTRUE 16526
16509: PUSH
16510: LD_VAR 0 2
16514: PPUSH
16515: LD_VAR 0 3
16519: PPUSH
16520: CALL_OW 488
16524: NOT
16525: OR
16526: IFTRUE 16535
16528: PUSH
16529: LD_VAR 0 4
16533: NOT
16534: OR
16535: IFFALSE 16539
// exit ;
16537: GO 16903
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
16539: LD_VAR 0 1
16543: PPUSH
16544: CALL_OW 437
16548: PPUSH
16549: CALL 40004 0 1
16553: PUSH
16554: LD_INT 10
16556: GREATER
16557: IFFALSE 16561
// exit ;
16559: GO 16903
// list := [ ] ;
16561: LD_ADDR_VAR 0 13
16565: PUSH
16566: EMPTY
16567: ST_TO_ADDR
// if x - r < 0 then
16568: LD_VAR 0 2
16572: PUSH
16573: LD_VAR 0 4
16577: MINUS
16578: PUSH
16579: LD_INT 0
16581: LESS
16582: IFFALSE 16594
// min_x := 0 else
16584: LD_ADDR_VAR 0 7
16588: PUSH
16589: LD_INT 0
16591: ST_TO_ADDR
16592: GO 16610
// min_x := x - r ;
16594: LD_ADDR_VAR 0 7
16598: PUSH
16599: LD_VAR 0 2
16603: PUSH
16604: LD_VAR 0 4
16608: MINUS
16609: ST_TO_ADDR
// if y - r < 0 then
16610: LD_VAR 0 3
16614: PUSH
16615: LD_VAR 0 4
16619: MINUS
16620: PUSH
16621: LD_INT 0
16623: LESS
16624: IFFALSE 16636
// min_y := 0 else
16626: LD_ADDR_VAR 0 8
16630: PUSH
16631: LD_INT 0
16633: ST_TO_ADDR
16634: GO 16652
// min_y := y - r ;
16636: LD_ADDR_VAR 0 8
16640: PUSH
16641: LD_VAR 0 3
16645: PUSH
16646: LD_VAR 0 4
16650: MINUS
16651: ST_TO_ADDR
// max_x := x + r ;
16652: LD_ADDR_VAR 0 9
16656: PUSH
16657: LD_VAR 0 2
16661: PUSH
16662: LD_VAR 0 4
16666: PLUS
16667: ST_TO_ADDR
// max_y := y + r ;
16668: LD_ADDR_VAR 0 10
16672: PUSH
16673: LD_VAR 0 3
16677: PUSH
16678: LD_VAR 0 4
16682: PLUS
16683: ST_TO_ADDR
// for _x = min_x to max_x do
16684: LD_ADDR_VAR 0 11
16688: PUSH
16689: DOUBLE
16690: LD_VAR 0 7
16694: DEC
16695: ST_TO_ADDR
16696: LD_VAR 0 9
16700: PUSH
16701: FOR_TO
16702: IFFALSE 16821
// for _y = min_y to max_y do
16704: LD_ADDR_VAR 0 12
16708: PUSH
16709: DOUBLE
16710: LD_VAR 0 8
16714: DEC
16715: ST_TO_ADDR
16716: LD_VAR 0 10
16720: PUSH
16721: FOR_TO
16722: IFFALSE 16817
// begin if not ValidHex ( _x , _y ) then
16724: LD_VAR 0 11
16728: PPUSH
16729: LD_VAR 0 12
16733: PPUSH
16734: CALL_OW 488
16738: NOT
16739: IFFALSE 16743
// continue ;
16741: GO 16721
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16743: LD_VAR 0 11
16747: PPUSH
16748: LD_VAR 0 12
16752: PPUSH
16753: CALL_OW 351
16757: IFFALSE 16775
16759: PUSH
16760: LD_VAR 0 11
16764: PPUSH
16765: LD_VAR 0 12
16769: PPUSH
16770: CALL_OW 554
16774: AND
16775: IFFALSE 16815
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16777: LD_ADDR_VAR 0 13
16781: PUSH
16782: LD_VAR 0 13
16786: PPUSH
16787: LD_VAR 0 13
16791: PUSH
16792: LD_INT 1
16794: PLUS
16795: PPUSH
16796: LD_VAR 0 11
16800: PUSH
16801: LD_VAR 0 12
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: PPUSH
16810: CALL_OW 2
16814: ST_TO_ADDR
// end ;
16815: GO 16721
16817: POP
16818: POP
16819: GO 16701
16821: POP
16822: POP
// if not list then
16823: LD_VAR 0 13
16827: NOT
16828: IFFALSE 16832
// exit ;
16830: GO 16903
// for i in list do
16832: LD_ADDR_VAR 0 6
16836: PUSH
16837: LD_VAR 0 13
16841: PUSH
16842: FOR_IN
16843: IFFALSE 16901
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16845: LD_VAR 0 1
16849: PPUSH
16850: LD_STRING M
16852: PUSH
16853: LD_VAR 0 6
16857: PUSH
16858: LD_INT 1
16860: ARRAY
16861: PUSH
16862: LD_VAR 0 6
16866: PUSH
16867: LD_INT 2
16869: ARRAY
16870: PUSH
16871: LD_INT 0
16873: PUSH
16874: LD_INT 0
16876: PUSH
16877: LD_INT 0
16879: PUSH
16880: LD_INT 0
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: PUSH
16892: EMPTY
16893: LIST
16894: PPUSH
16895: CALL_OW 447
16899: GO 16842
16901: POP
16902: POP
// end ;
16903: LD_VAR 0 5
16907: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
16908: LD_INT 0
16910: PPUSH
16911: PPUSH
16912: PPUSH
16913: PPUSH
16914: PPUSH
16915: PPUSH
16916: PPUSH
16917: PPUSH
16918: PPUSH
16919: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
16920: LD_VAR 0 1
16924: PPUSH
16925: CALL_OW 302
16929: NOT
16930: IFTRUE 16949
16932: PUSH
16933: LD_VAR 0 2
16937: PPUSH
16938: LD_VAR 0 3
16942: PPUSH
16943: CALL_OW 488
16947: NOT
16948: OR
16949: IFTRUE 16958
16951: PUSH
16952: LD_VAR 0 4
16956: NOT
16957: OR
16958: IFFALSE 16962
// exit ;
16960: GO 17501
// if Count ( GetTaskList ( flame ) ) > 10 then
16962: LD_VAR 0 1
16966: PPUSH
16967: CALL_OW 437
16971: PPUSH
16972: CALL 40004 0 1
16976: PUSH
16977: LD_INT 10
16979: GREATER
16980: IFFALSE 16984
// exit ;
16982: GO 17501
// list := [ ] ;
16984: LD_ADDR_VAR 0 13
16988: PUSH
16989: EMPTY
16990: ST_TO_ADDR
// if x - r < 0 then
16991: LD_VAR 0 2
16995: PUSH
16996: LD_VAR 0 4
17000: MINUS
17001: PUSH
17002: LD_INT 0
17004: LESS
17005: IFFALSE 17017
// min_x := 0 else
17007: LD_ADDR_VAR 0 7
17011: PUSH
17012: LD_INT 0
17014: ST_TO_ADDR
17015: GO 17033
// min_x := x - r ;
17017: LD_ADDR_VAR 0 7
17021: PUSH
17022: LD_VAR 0 2
17026: PUSH
17027: LD_VAR 0 4
17031: MINUS
17032: ST_TO_ADDR
// if y - r < 0 then
17033: LD_VAR 0 3
17037: PUSH
17038: LD_VAR 0 4
17042: MINUS
17043: PUSH
17044: LD_INT 0
17046: LESS
17047: IFFALSE 17059
// min_y := 0 else
17049: LD_ADDR_VAR 0 8
17053: PUSH
17054: LD_INT 0
17056: ST_TO_ADDR
17057: GO 17075
// min_y := y - r ;
17059: LD_ADDR_VAR 0 8
17063: PUSH
17064: LD_VAR 0 3
17068: PUSH
17069: LD_VAR 0 4
17073: MINUS
17074: ST_TO_ADDR
// max_x := x + r ;
17075: LD_ADDR_VAR 0 9
17079: PUSH
17080: LD_VAR 0 2
17084: PUSH
17085: LD_VAR 0 4
17089: PLUS
17090: ST_TO_ADDR
// max_y := y + r ;
17091: LD_ADDR_VAR 0 10
17095: PUSH
17096: LD_VAR 0 3
17100: PUSH
17101: LD_VAR 0 4
17105: PLUS
17106: ST_TO_ADDR
// for _x = min_x to max_x do
17107: LD_ADDR_VAR 0 11
17111: PUSH
17112: DOUBLE
17113: LD_VAR 0 7
17117: DEC
17118: ST_TO_ADDR
17119: LD_VAR 0 9
17123: PUSH
17124: FOR_TO
17125: IFFALSE 17244
// for _y = min_y to max_y do
17127: LD_ADDR_VAR 0 12
17131: PUSH
17132: DOUBLE
17133: LD_VAR 0 8
17137: DEC
17138: ST_TO_ADDR
17139: LD_VAR 0 10
17143: PUSH
17144: FOR_TO
17145: IFFALSE 17240
// begin if not ValidHex ( _x , _y ) then
17147: LD_VAR 0 11
17151: PPUSH
17152: LD_VAR 0 12
17156: PPUSH
17157: CALL_OW 488
17161: NOT
17162: IFFALSE 17166
// continue ;
17164: GO 17144
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17166: LD_VAR 0 11
17170: PPUSH
17171: LD_VAR 0 12
17175: PPUSH
17176: CALL_OW 351
17180: IFFALSE 17198
17182: PUSH
17183: LD_VAR 0 11
17187: PPUSH
17188: LD_VAR 0 12
17192: PPUSH
17193: CALL_OW 554
17197: AND
17198: IFFALSE 17238
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17200: LD_ADDR_VAR 0 13
17204: PUSH
17205: LD_VAR 0 13
17209: PPUSH
17210: LD_VAR 0 13
17214: PUSH
17215: LD_INT 1
17217: PLUS
17218: PPUSH
17219: LD_VAR 0 11
17223: PUSH
17224: LD_VAR 0 12
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PPUSH
17233: CALL_OW 2
17237: ST_TO_ADDR
// end ;
17238: GO 17144
17240: POP
17241: POP
17242: GO 17124
17244: POP
17245: POP
// if not list then
17246: LD_VAR 0 13
17250: NOT
17251: IFFALSE 17255
// exit ;
17253: GO 17501
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
17255: LD_ADDR_VAR 0 13
17259: PUSH
17260: LD_VAR 0 1
17264: PPUSH
17265: LD_VAR 0 13
17269: PPUSH
17270: LD_INT 1
17272: PPUSH
17273: LD_INT 1
17275: PPUSH
17276: CALL 43410 0 4
17280: ST_TO_ADDR
// ComStop ( flame ) ;
17281: LD_VAR 0 1
17285: PPUSH
17286: CALL_OW 141
// for i in list do
17290: LD_ADDR_VAR 0 6
17294: PUSH
17295: LD_VAR 0 13
17299: PUSH
17300: FOR_IN
17301: IFFALSE 17332
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
17303: LD_VAR 0 1
17307: PPUSH
17308: LD_VAR 0 6
17312: PUSH
17313: LD_INT 1
17315: ARRAY
17316: PPUSH
17317: LD_VAR 0 6
17321: PUSH
17322: LD_INT 2
17324: ARRAY
17325: PPUSH
17326: CALL_OW 176
17330: GO 17300
17332: POP
17333: POP
// repeat wait ( 0 0$1 ) ;
17334: LD_INT 35
17336: PPUSH
17337: CALL_OW 67
// task := GetTaskList ( flame ) ;
17341: LD_ADDR_VAR 0 14
17345: PUSH
17346: LD_VAR 0 1
17350: PPUSH
17351: CALL_OW 437
17355: ST_TO_ADDR
// if not task then
17356: LD_VAR 0 14
17360: NOT
17361: IFFALSE 17365
// exit ;
17363: GO 17501
// if task [ 1 ] [ 1 ] <> | then
17365: LD_VAR 0 14
17369: PUSH
17370: LD_INT 1
17372: ARRAY
17373: PUSH
17374: LD_INT 1
17376: ARRAY
17377: PUSH
17378: LD_STRING |
17380: NONEQUAL
17381: IFFALSE 17385
// exit ;
17383: GO 17501
// _x := task [ 1 ] [ 2 ] ;
17385: LD_ADDR_VAR 0 11
17389: PUSH
17390: LD_VAR 0 14
17394: PUSH
17395: LD_INT 1
17397: ARRAY
17398: PUSH
17399: LD_INT 2
17401: ARRAY
17402: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
17403: LD_ADDR_VAR 0 12
17407: PUSH
17408: LD_VAR 0 14
17412: PUSH
17413: LD_INT 1
17415: ARRAY
17416: PUSH
17417: LD_INT 3
17419: ARRAY
17420: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
17421: LD_VAR 0 11
17425: PPUSH
17426: LD_VAR 0 12
17430: PPUSH
17431: CALL_OW 351
17435: NOT
17436: IFTRUE 17455
17438: PUSH
17439: LD_VAR 0 11
17443: PPUSH
17444: LD_VAR 0 12
17448: PPUSH
17449: CALL_OW 554
17453: NOT
17454: OR
17455: IFFALSE 17489
// begin task := Delete ( task , 1 ) ;
17457: LD_ADDR_VAR 0 14
17461: PUSH
17462: LD_VAR 0 14
17466: PPUSH
17467: LD_INT 1
17469: PPUSH
17470: CALL_OW 3
17474: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
17475: LD_VAR 0 1
17479: PPUSH
17480: LD_VAR 0 14
17484: PPUSH
17485: CALL_OW 446
// end ; until not HasTask ( flame ) ;
17489: LD_VAR 0 1
17493: PPUSH
17494: CALL_OW 314
17498: NOT
17499: IFFALSE 17334
// end ;
17501: LD_VAR 0 5
17505: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
17506: LD_EXP 44
17510: NOT
17511: IFFALSE 17561
17513: GO 17515
17515: DISABLE
// begin initHack := true ;
17516: LD_ADDR_EXP 44
17520: PUSH
17521: LD_INT 1
17523: ST_TO_ADDR
// hackTanks := [ ] ;
17524: LD_ADDR_EXP 45
17528: PUSH
17529: EMPTY
17530: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
17531: LD_ADDR_EXP 46
17535: PUSH
17536: EMPTY
17537: ST_TO_ADDR
// hackLimit := 3 ;
17538: LD_ADDR_EXP 47
17542: PUSH
17543: LD_INT 3
17545: ST_TO_ADDR
// hackDist := 12 ;
17546: LD_ADDR_EXP 48
17550: PUSH
17551: LD_INT 12
17553: ST_TO_ADDR
// hackCounter := [ ] ;
17554: LD_ADDR_EXP 49
17558: PUSH
17559: EMPTY
17560: ST_TO_ADDR
// end ;
17561: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
17562: LD_EXP 44
17566: IFFALSE 17584
17568: PUSH
17569: LD_INT 34
17571: PUSH
17572: LD_INT 99
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: PPUSH
17579: CALL_OW 69
17583: AND
17584: IFFALSE 17837
17586: GO 17588
17588: DISABLE
17589: LD_INT 0
17591: PPUSH
17592: PPUSH
// begin enable ;
17593: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
17594: LD_ADDR_VAR 0 1
17598: PUSH
17599: LD_INT 34
17601: PUSH
17602: LD_INT 99
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PPUSH
17609: CALL_OW 69
17613: PUSH
17614: FOR_IN
17615: IFFALSE 17835
// begin if not i in hackTanks then
17617: LD_VAR 0 1
17621: PUSH
17622: LD_EXP 45
17626: IN
17627: NOT
17628: IFFALSE 17711
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
17630: LD_ADDR_EXP 45
17634: PUSH
17635: LD_EXP 45
17639: PPUSH
17640: LD_EXP 45
17644: PUSH
17645: LD_INT 1
17647: PLUS
17648: PPUSH
17649: LD_VAR 0 1
17653: PPUSH
17654: CALL_OW 1
17658: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
17659: LD_ADDR_EXP 46
17663: PUSH
17664: LD_EXP 46
17668: PPUSH
17669: LD_EXP 46
17673: PUSH
17674: LD_INT 1
17676: PLUS
17677: PPUSH
17678: EMPTY
17679: PPUSH
17680: CALL_OW 1
17684: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
17685: LD_ADDR_EXP 49
17689: PUSH
17690: LD_EXP 49
17694: PPUSH
17695: LD_EXP 49
17699: PUSH
17700: LD_INT 1
17702: PLUS
17703: PPUSH
17704: EMPTY
17705: PPUSH
17706: CALL_OW 1
17710: ST_TO_ADDR
// end ; if not IsOk ( i ) then
17711: LD_VAR 0 1
17715: PPUSH
17716: CALL_OW 302
17720: NOT
17721: IFFALSE 17734
// begin HackUnlinkAll ( i ) ;
17723: LD_VAR 0 1
17727: PPUSH
17728: CALL 17840 0 1
// continue ;
17732: GO 17614
// end ; HackCheckCapturedStatus ( i ) ;
17734: LD_VAR 0 1
17738: PPUSH
17739: CALL 18285 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
17743: LD_ADDR_VAR 0 2
17747: PUSH
17748: LD_INT 81
17750: PUSH
17751: LD_VAR 0 1
17755: PPUSH
17756: CALL_OW 255
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: PUSH
17765: LD_INT 33
17767: PUSH
17768: LD_INT 3
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PUSH
17775: LD_INT 91
17777: PUSH
17778: LD_VAR 0 1
17782: PUSH
17783: LD_EXP 48
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: LIST
17792: PUSH
17793: LD_INT 50
17795: PUSH
17796: EMPTY
17797: LIST
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: PPUSH
17805: CALL_OW 69
17809: ST_TO_ADDR
// if not tmp then
17810: LD_VAR 0 2
17814: NOT
17815: IFFALSE 17819
// continue ;
17817: GO 17614
// HackLink ( i , tmp ) ;
17819: LD_VAR 0 1
17823: PPUSH
17824: LD_VAR 0 2
17828: PPUSH
17829: CALL 17976 0 2
// end ;
17833: GO 17614
17835: POP
17836: POP
// end ;
17837: PPOPN 2
17839: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
17840: LD_INT 0
17842: PPUSH
17843: PPUSH
17844: PPUSH
// if not hack in hackTanks then
17845: LD_VAR 0 1
17849: PUSH
17850: LD_EXP 45
17854: IN
17855: NOT
17856: IFFALSE 17860
// exit ;
17858: GO 17971
// index := GetElementIndex ( hackTanks , hack ) ;
17860: LD_ADDR_VAR 0 4
17864: PUSH
17865: LD_EXP 45
17869: PPUSH
17870: LD_VAR 0 1
17874: PPUSH
17875: CALL 42705 0 2
17879: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
17880: LD_EXP 46
17884: PUSH
17885: LD_VAR 0 4
17889: ARRAY
17890: IFFALSE 17971
// begin for i in hackTanksCaptured [ index ] do
17892: LD_ADDR_VAR 0 3
17896: PUSH
17897: LD_EXP 46
17901: PUSH
17902: LD_VAR 0 4
17906: ARRAY
17907: PUSH
17908: FOR_IN
17909: IFFALSE 17935
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
17911: LD_VAR 0 3
17915: PUSH
17916: LD_INT 1
17918: ARRAY
17919: PPUSH
17920: LD_VAR 0 3
17924: PUSH
17925: LD_INT 2
17927: ARRAY
17928: PPUSH
17929: CALL_OW 235
17933: GO 17908
17935: POP
17936: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
17937: LD_ADDR_EXP 46
17941: PUSH
17942: LD_EXP 46
17946: PPUSH
17947: LD_VAR 0 4
17951: PPUSH
17952: EMPTY
17953: PPUSH
17954: CALL_OW 1
17958: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
17959: LD_VAR 0 1
17963: PPUSH
17964: LD_INT 0
17966: PPUSH
17967: CALL_OW 505
// end ; end ;
17971: LD_VAR 0 2
17975: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
17976: LD_INT 0
17978: PPUSH
17979: PPUSH
17980: PPUSH
// if not hack in hackTanks or not vehicles then
17981: LD_VAR 0 1
17985: PUSH
17986: LD_EXP 45
17990: IN
17991: NOT
17992: IFTRUE 18001
17994: PUSH
17995: LD_VAR 0 2
17999: NOT
18000: OR
18001: IFFALSE 18005
// exit ;
18003: GO 18280
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18005: LD_ADDR_VAR 0 2
18009: PUSH
18010: LD_VAR 0 1
18014: PPUSH
18015: LD_VAR 0 2
18019: PPUSH
18020: LD_INT 1
18022: PPUSH
18023: LD_INT 1
18025: PPUSH
18026: CALL 43357 0 4
18030: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18031: LD_ADDR_VAR 0 5
18035: PUSH
18036: LD_EXP 45
18040: PPUSH
18041: LD_VAR 0 1
18045: PPUSH
18046: CALL 42705 0 2
18050: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18051: LD_EXP 46
18055: PUSH
18056: LD_VAR 0 5
18060: ARRAY
18061: PUSH
18062: LD_EXP 47
18066: LESS
18067: IFFALSE 18256
// begin for i := 1 to vehicles do
18069: LD_ADDR_VAR 0 4
18073: PUSH
18074: DOUBLE
18075: LD_INT 1
18077: DEC
18078: ST_TO_ADDR
18079: LD_VAR 0 2
18083: PUSH
18084: FOR_TO
18085: IFFALSE 18254
// begin if hackTanksCaptured [ index ] = hackLimit then
18087: LD_EXP 46
18091: PUSH
18092: LD_VAR 0 5
18096: ARRAY
18097: PUSH
18098: LD_EXP 47
18102: EQUAL
18103: IFFALSE 18107
// break ;
18105: GO 18254
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18107: LD_ADDR_EXP 49
18111: PUSH
18112: LD_EXP 49
18116: PPUSH
18117: LD_VAR 0 5
18121: PPUSH
18122: LD_EXP 49
18126: PUSH
18127: LD_VAR 0 5
18131: ARRAY
18132: PUSH
18133: LD_INT 1
18135: PLUS
18136: PPUSH
18137: CALL_OW 1
18141: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18142: LD_ADDR_EXP 46
18146: PUSH
18147: LD_EXP 46
18151: PPUSH
18152: LD_VAR 0 5
18156: PUSH
18157: LD_EXP 46
18161: PUSH
18162: LD_VAR 0 5
18166: ARRAY
18167: PUSH
18168: LD_INT 1
18170: PLUS
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PPUSH
18176: LD_VAR 0 2
18180: PUSH
18181: LD_VAR 0 4
18185: ARRAY
18186: PUSH
18187: LD_VAR 0 2
18191: PUSH
18192: LD_VAR 0 4
18196: ARRAY
18197: PPUSH
18198: CALL_OW 255
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PPUSH
18207: CALL 42922 0 3
18211: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
18212: LD_VAR 0 2
18216: PUSH
18217: LD_VAR 0 4
18221: ARRAY
18222: PPUSH
18223: LD_VAR 0 1
18227: PPUSH
18228: CALL_OW 255
18232: PPUSH
18233: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
18237: LD_VAR 0 2
18241: PUSH
18242: LD_VAR 0 4
18246: ARRAY
18247: PPUSH
18248: CALL_OW 141
// end ;
18252: GO 18084
18254: POP
18255: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18256: LD_VAR 0 1
18260: PPUSH
18261: LD_EXP 46
18265: PUSH
18266: LD_VAR 0 5
18270: ARRAY
18271: PUSH
18272: LD_INT 0
18274: PLUS
18275: PPUSH
18276: CALL_OW 505
// end ;
18280: LD_VAR 0 3
18284: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
18285: LD_INT 0
18287: PPUSH
18288: PPUSH
18289: PPUSH
18290: PPUSH
// if not hack in hackTanks then
18291: LD_VAR 0 1
18295: PUSH
18296: LD_EXP 45
18300: IN
18301: NOT
18302: IFFALSE 18306
// exit ;
18304: GO 18550
// index := GetElementIndex ( hackTanks , hack ) ;
18306: LD_ADDR_VAR 0 4
18310: PUSH
18311: LD_EXP 45
18315: PPUSH
18316: LD_VAR 0 1
18320: PPUSH
18321: CALL 42705 0 2
18325: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
18326: LD_ADDR_VAR 0 3
18330: PUSH
18331: DOUBLE
18332: LD_EXP 46
18336: PUSH
18337: LD_VAR 0 4
18341: ARRAY
18342: INC
18343: ST_TO_ADDR
18344: LD_INT 1
18346: PUSH
18347: FOR_DOWNTO
18348: IFFALSE 18524
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
18350: LD_ADDR_VAR 0 5
18354: PUSH
18355: LD_EXP 46
18359: PUSH
18360: LD_VAR 0 4
18364: ARRAY
18365: PUSH
18366: LD_VAR 0 3
18370: ARRAY
18371: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
18372: LD_VAR 0 5
18376: PUSH
18377: LD_INT 1
18379: ARRAY
18380: PPUSH
18381: CALL_OW 302
18385: NOT
18386: IFTRUE 18414
18388: PUSH
18389: LD_VAR 0 5
18393: PUSH
18394: LD_INT 1
18396: ARRAY
18397: PPUSH
18398: CALL_OW 255
18402: PUSH
18403: LD_VAR 0 1
18407: PPUSH
18408: CALL_OW 255
18412: NONEQUAL
18413: OR
18414: IFFALSE 18522
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
18416: LD_VAR 0 5
18420: PUSH
18421: LD_INT 1
18423: ARRAY
18424: PPUSH
18425: CALL_OW 305
18429: IFFALSE 18457
18431: PUSH
18432: LD_VAR 0 5
18436: PUSH
18437: LD_INT 1
18439: ARRAY
18440: PPUSH
18441: CALL_OW 255
18445: PUSH
18446: LD_VAR 0 1
18450: PPUSH
18451: CALL_OW 255
18455: EQUAL
18456: AND
18457: IFFALSE 18481
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
18459: LD_VAR 0 5
18463: PUSH
18464: LD_INT 1
18466: ARRAY
18467: PPUSH
18468: LD_VAR 0 5
18472: PUSH
18473: LD_INT 2
18475: ARRAY
18476: PPUSH
18477: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
18481: LD_ADDR_EXP 46
18485: PUSH
18486: LD_EXP 46
18490: PPUSH
18491: LD_VAR 0 4
18495: PPUSH
18496: LD_EXP 46
18500: PUSH
18501: LD_VAR 0 4
18505: ARRAY
18506: PPUSH
18507: LD_VAR 0 3
18511: PPUSH
18512: CALL_OW 3
18516: PPUSH
18517: CALL_OW 1
18521: ST_TO_ADDR
// end ; end ;
18522: GO 18347
18524: POP
18525: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18526: LD_VAR 0 1
18530: PPUSH
18531: LD_EXP 46
18535: PUSH
18536: LD_VAR 0 4
18540: ARRAY
18541: PUSH
18542: LD_INT 0
18544: PLUS
18545: PPUSH
18546: CALL_OW 505
// end ;
18550: LD_VAR 0 2
18554: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
18555: LD_INT 0
18557: PPUSH
18558: PPUSH
18559: PPUSH
18560: PPUSH
// if not hack in hackTanks then
18561: LD_VAR 0 1
18565: PUSH
18566: LD_EXP 45
18570: IN
18571: NOT
18572: IFFALSE 18576
// exit ;
18574: GO 18661
// index := GetElementIndex ( hackTanks , hack ) ;
18576: LD_ADDR_VAR 0 5
18580: PUSH
18581: LD_EXP 45
18585: PPUSH
18586: LD_VAR 0 1
18590: PPUSH
18591: CALL 42705 0 2
18595: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
18596: LD_ADDR_VAR 0 4
18600: PUSH
18601: DOUBLE
18602: LD_INT 1
18604: DEC
18605: ST_TO_ADDR
18606: LD_EXP 46
18610: PUSH
18611: LD_VAR 0 5
18615: ARRAY
18616: PUSH
18617: FOR_TO
18618: IFFALSE 18659
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
18620: LD_EXP 46
18624: PUSH
18625: LD_VAR 0 5
18629: ARRAY
18630: PUSH
18631: LD_VAR 0 4
18635: ARRAY
18636: PUSH
18637: LD_INT 1
18639: ARRAY
18640: PUSH
18641: LD_VAR 0 2
18645: EQUAL
18646: IFFALSE 18657
// KillUnit ( vehicle ) ;
18648: LD_VAR 0 2
18652: PPUSH
18653: CALL_OW 66
18657: GO 18617
18659: POP
18660: POP
// end ;
18661: LD_VAR 0 3
18665: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
18666: LD_EXP 50
18670: NOT
18671: IFFALSE 18804
18673: GO 18675
18675: DISABLE
18676: LD_INT 0
18678: PPUSH
// begin initMiner := true ;
18679: LD_ADDR_EXP 50
18683: PUSH
18684: LD_INT 1
18686: ST_TO_ADDR
// minersList := [ ] ;
18687: LD_ADDR_EXP 51
18691: PUSH
18692: EMPTY
18693: ST_TO_ADDR
// minerMinesList := [ ] ;
18694: LD_ADDR_EXP 52
18698: PUSH
18699: EMPTY
18700: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
18701: LD_ADDR_EXP 53
18705: PUSH
18706: LD_INT 10
18708: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
18709: LD_ADDR_VAR 0 1
18713: PUSH
18714: LD_INT 34
18716: PUSH
18717: LD_INT 81
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PPUSH
18724: CALL_OW 69
18728: PUSH
18729: FOR_IN
18730: IFFALSE 18802
// begin if not i in minersList then
18732: LD_VAR 0 1
18736: PUSH
18737: LD_EXP 51
18741: IN
18742: NOT
18743: IFFALSE 18800
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
18745: LD_ADDR_EXP 51
18749: PUSH
18750: LD_EXP 51
18754: PPUSH
18755: LD_EXP 51
18759: PUSH
18760: LD_INT 1
18762: PLUS
18763: PPUSH
18764: LD_VAR 0 1
18768: PPUSH
18769: CALL_OW 1
18773: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
18774: LD_ADDR_EXP 52
18778: PUSH
18779: LD_EXP 52
18783: PPUSH
18784: LD_EXP 52
18788: PUSH
18789: LD_INT 1
18791: PLUS
18792: PPUSH
18793: EMPTY
18794: PPUSH
18795: CALL_OW 1
18799: ST_TO_ADDR
// end end ;
18800: GO 18729
18802: POP
18803: POP
// end ;
18804: PPOPN 1
18806: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
18807: LD_EXP 50
18811: IFFALSE 18842
18813: PUSH
18814: LD_EXP 52
18818: PPUSH
18819: CALL 40004 0 1
18823: IFTRUE 18841
18825: PUSH
18826: LD_INT 34
18828: PUSH
18829: LD_INT 81
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PPUSH
18836: CALL_OW 69
18840: OR
18841: AND
18842: IFFALSE 19362
18844: GO 18846
18846: DISABLE
18847: LD_INT 0
18849: PPUSH
18850: PPUSH
18851: PPUSH
18852: PPUSH
// begin enable ;
18853: ENABLE
// for i := minerMinesList downto 1 do
18854: LD_ADDR_VAR 0 1
18858: PUSH
18859: DOUBLE
18860: LD_EXP 52
18864: INC
18865: ST_TO_ADDR
18866: LD_INT 1
18868: PUSH
18869: FOR_DOWNTO
18870: IFFALSE 19360
// begin side := GetSide ( minersList [ i ] ) ;
18872: LD_ADDR_VAR 0 3
18876: PUSH
18877: LD_EXP 51
18881: PUSH
18882: LD_VAR 0 1
18886: ARRAY
18887: PPUSH
18888: CALL_OW 255
18892: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
18893: LD_EXP 51
18897: PUSH
18898: LD_VAR 0 1
18902: ARRAY
18903: PPUSH
18904: CALL_OW 300
18908: IFFALSE 18929
18910: PUSH
18911: LD_VAR 0 3
18915: PUSH
18916: LD_OWVAR 2
18920: PUSH
18921: LD_INT 9
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: IN
18928: AND
18929: IFFALSE 18962
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
18931: LD_EXP 51
18935: PUSH
18936: LD_VAR 0 1
18940: ARRAY
18941: PPUSH
18942: LD_EXP 52
18946: PUSH
18947: LD_VAR 0 1
18951: ARRAY
18952: PPUSH
18953: CALL 40004 0 1
18957: PPUSH
18958: CALL_OW 505
// if not minerMinesList [ i ] then
18962: LD_EXP 52
18966: PUSH
18967: LD_VAR 0 1
18971: ARRAY
18972: NOT
18973: IFFALSE 18977
// continue ;
18975: GO 18869
// for j := minerMinesList [ i ] downto 1 do
18977: LD_ADDR_VAR 0 2
18981: PUSH
18982: DOUBLE
18983: LD_EXP 52
18987: PUSH
18988: LD_VAR 0 1
18992: ARRAY
18993: INC
18994: ST_TO_ADDR
18995: LD_INT 1
18997: PUSH
18998: FOR_DOWNTO
18999: IFFALSE 19356
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
19001: LD_EXP 51
19005: PUSH
19006: LD_VAR 0 1
19010: ARRAY
19011: PPUSH
19012: CALL_OW 301
19016: IFTRUE 19036
19018: PUSH
19019: LD_EXP 51
19023: PUSH
19024: LD_VAR 0 1
19028: ARRAY
19029: PPUSH
19030: CALL_OW 305
19034: NOT
19035: OR
19036: IFFALSE 19127
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19038: LD_EXP 52
19042: PUSH
19043: LD_VAR 0 1
19047: ARRAY
19048: PUSH
19049: LD_VAR 0 2
19053: ARRAY
19054: PUSH
19055: LD_INT 1
19057: ARRAY
19058: PPUSH
19059: LD_EXP 52
19063: PUSH
19064: LD_VAR 0 1
19068: ARRAY
19069: PUSH
19070: LD_VAR 0 2
19074: ARRAY
19075: PUSH
19076: LD_INT 2
19078: ARRAY
19079: PPUSH
19080: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
19084: LD_ADDR_EXP 52
19088: PUSH
19089: LD_EXP 52
19093: PPUSH
19094: LD_VAR 0 1
19098: PPUSH
19099: LD_EXP 52
19103: PUSH
19104: LD_VAR 0 1
19108: ARRAY
19109: PPUSH
19110: LD_VAR 0 2
19114: PPUSH
19115: CALL_OW 3
19119: PPUSH
19120: CALL_OW 1
19124: ST_TO_ADDR
// continue ;
19125: GO 18998
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19127: LD_ADDR_VAR 0 4
19131: PUSH
19132: LD_EXP 52
19136: PUSH
19137: LD_VAR 0 1
19141: ARRAY
19142: PUSH
19143: LD_VAR 0 2
19147: ARRAY
19148: PUSH
19149: LD_INT 1
19151: ARRAY
19152: PPUSH
19153: LD_EXP 52
19157: PUSH
19158: LD_VAR 0 1
19162: ARRAY
19163: PUSH
19164: LD_VAR 0 2
19168: ARRAY
19169: PUSH
19170: LD_INT 2
19172: ARRAY
19173: PPUSH
19174: CALL_OW 428
19178: ST_TO_ADDR
// if not tmp then
19179: LD_VAR 0 4
19183: NOT
19184: IFFALSE 19188
// continue ;
19186: GO 18998
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19188: LD_VAR 0 4
19192: PUSH
19193: LD_INT 81
19195: PUSH
19196: LD_VAR 0 3
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PPUSH
19205: CALL_OW 69
19209: IN
19210: IFFALSE 19260
19212: PUSH
19213: LD_EXP 52
19217: PUSH
19218: LD_VAR 0 1
19222: ARRAY
19223: PUSH
19224: LD_VAR 0 2
19228: ARRAY
19229: PUSH
19230: LD_INT 1
19232: ARRAY
19233: PPUSH
19234: LD_EXP 52
19238: PUSH
19239: LD_VAR 0 1
19243: ARRAY
19244: PUSH
19245: LD_VAR 0 2
19249: ARRAY
19250: PUSH
19251: LD_INT 2
19253: ARRAY
19254: PPUSH
19255: CALL_OW 458
19259: AND
19260: IFFALSE 19354
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
19262: LD_EXP 52
19266: PUSH
19267: LD_VAR 0 1
19271: ARRAY
19272: PUSH
19273: LD_VAR 0 2
19277: ARRAY
19278: PUSH
19279: LD_INT 1
19281: ARRAY
19282: PPUSH
19283: LD_EXP 52
19287: PUSH
19288: LD_VAR 0 1
19292: ARRAY
19293: PUSH
19294: LD_VAR 0 2
19298: ARRAY
19299: PUSH
19300: LD_INT 2
19302: ARRAY
19303: PPUSH
19304: LD_VAR 0 3
19308: PPUSH
19309: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
19313: LD_ADDR_EXP 52
19317: PUSH
19318: LD_EXP 52
19322: PPUSH
19323: LD_VAR 0 1
19327: PPUSH
19328: LD_EXP 52
19332: PUSH
19333: LD_VAR 0 1
19337: ARRAY
19338: PPUSH
19339: LD_VAR 0 2
19343: PPUSH
19344: CALL_OW 3
19348: PPUSH
19349: CALL_OW 1
19353: ST_TO_ADDR
// end ; end ;
19354: GO 18998
19356: POP
19357: POP
// end ;
19358: GO 18869
19360: POP
19361: POP
// end ;
19362: PPOPN 4
19364: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
19365: LD_INT 0
19367: PPUSH
19368: PPUSH
19369: PPUSH
19370: PPUSH
// result := false ;
19371: LD_ADDR_VAR 0 4
19375: PUSH
19376: LD_INT 0
19378: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
19379: LD_VAR 0 1
19383: PPUSH
19384: CALL_OW 264
19388: PUSH
19389: LD_INT 81
19391: EQUAL
19392: NOT
19393: IFFALSE 19397
// exit ;
19395: GO 19767
// side := GetSide ( unit ) ;
19397: LD_ADDR_VAR 0 6
19401: PUSH
19402: LD_VAR 0 1
19406: PPUSH
19407: CALL_OW 255
19411: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
19412: LD_ADDR_VAR 0 5
19416: PUSH
19417: LD_EXP 51
19421: PPUSH
19422: LD_VAR 0 1
19426: PPUSH
19427: CALL 42705 0 2
19431: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
19432: LD_EXP 52
19436: PUSH
19437: LD_VAR 0 5
19441: ARRAY
19442: PUSH
19443: LD_EXP 53
19447: GREATEREQUAL
19448: IFFALSE 19452
// exit ;
19450: GO 19767
// ComMoveXY ( unit , x , y ) ;
19452: LD_VAR 0 1
19456: PPUSH
19457: LD_VAR 0 2
19461: PPUSH
19462: LD_VAR 0 3
19466: PPUSH
19467: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19471: LD_INT 35
19473: PPUSH
19474: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
19478: LD_VAR 0 1
19482: PPUSH
19483: LD_VAR 0 2
19487: PPUSH
19488: LD_VAR 0 3
19492: PPUSH
19493: CALL 74761 0 3
19497: NOT
19498: IFFALSE 19511
19500: PUSH
19501: LD_VAR 0 1
19505: PPUSH
19506: CALL_OW 314
19510: AND
19511: IFFALSE 19515
// exit ;
19513: GO 19767
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
19515: LD_VAR 0 2
19519: PPUSH
19520: LD_VAR 0 3
19524: PPUSH
19525: CALL_OW 428
19529: PUSH
19530: LD_VAR 0 1
19534: EQUAL
19535: IFFALSE 19549
19537: PUSH
19538: LD_VAR 0 1
19542: PPUSH
19543: CALL_OW 314
19547: NOT
19548: AND
19549: IFFALSE 19471
// if MineAtPos ( x , y ) then
19551: LD_VAR 0 2
19555: PPUSH
19556: LD_VAR 0 3
19560: PPUSH
19561: CALL_OW 458
19565: IFFALSE 19569
// exit ;
19567: GO 19767
// if your_side = side then
19569: LD_OWVAR 2
19573: PUSH
19574: LD_VAR 0 6
19578: EQUAL
19579: IFFALSE 19598
// PlaySoundXY ( x , y , PlantMine ) ;
19581: LD_VAR 0 2
19585: PPUSH
19586: LD_VAR 0 3
19590: PPUSH
19591: LD_STRING PlantMine
19593: PPUSH
19594: CALL_OW 366
// repeat wait ( 1 ) ;
19598: LD_INT 1
19600: PPUSH
19601: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
19605: LD_VAR 0 2
19609: PPUSH
19610: LD_VAR 0 3
19614: PPUSH
19615: LD_VAR 0 6
19619: PPUSH
19620: LD_INT 0
19622: PPUSH
19623: CALL_OW 454
19627: IFFALSE 19598
// if MineAtPos ( x , y ) then
19629: LD_VAR 0 2
19633: PPUSH
19634: LD_VAR 0 3
19638: PPUSH
19639: CALL_OW 458
19643: IFFALSE 19759
// begin for i in minerMinesList [ index ] do
19645: LD_ADDR_VAR 0 7
19649: PUSH
19650: LD_EXP 52
19654: PUSH
19655: LD_VAR 0 5
19659: ARRAY
19660: PUSH
19661: FOR_IN
19662: IFFALSE 19704
// if i [ 1 ] = x and i [ 2 ] = y then
19664: LD_VAR 0 7
19668: PUSH
19669: LD_INT 1
19671: ARRAY
19672: PUSH
19673: LD_VAR 0 2
19677: EQUAL
19678: IFFALSE 19696
19680: PUSH
19681: LD_VAR 0 7
19685: PUSH
19686: LD_INT 2
19688: ARRAY
19689: PUSH
19690: LD_VAR 0 3
19694: EQUAL
19695: AND
19696: IFFALSE 19702
// exit ;
19698: POP
19699: POP
19700: GO 19767
19702: GO 19661
19704: POP
19705: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
19706: LD_ADDR_EXP 52
19710: PUSH
19711: LD_EXP 52
19715: PPUSH
19716: LD_VAR 0 5
19720: PUSH
19721: LD_EXP 52
19725: PUSH
19726: LD_VAR 0 5
19730: ARRAY
19731: PUSH
19732: LD_INT 1
19734: PLUS
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: PPUSH
19740: LD_VAR 0 2
19744: PUSH
19745: LD_VAR 0 3
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PPUSH
19754: CALL 42922 0 3
19758: ST_TO_ADDR
// end ; result := true ;
19759: LD_ADDR_VAR 0 4
19763: PUSH
19764: LD_INT 1
19766: ST_TO_ADDR
// end ;
19767: LD_VAR 0 4
19771: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
19772: LD_INT 0
19774: PPUSH
19775: PPUSH
19776: PPUSH
// if not unit in minersList then
19777: LD_VAR 0 1
19781: PUSH
19782: LD_EXP 51
19786: IN
19787: NOT
19788: IFFALSE 19792
// exit ;
19790: GO 19999
// index := GetElementIndex ( minersList , unit ) ;
19792: LD_ADDR_VAR 0 6
19796: PUSH
19797: LD_EXP 51
19801: PPUSH
19802: LD_VAR 0 1
19806: PPUSH
19807: CALL 42705 0 2
19811: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
19812: LD_ADDR_VAR 0 5
19816: PUSH
19817: DOUBLE
19818: LD_EXP 52
19822: PUSH
19823: LD_VAR 0 6
19827: ARRAY
19828: INC
19829: ST_TO_ADDR
19830: LD_INT 1
19832: PUSH
19833: FOR_DOWNTO
19834: IFFALSE 19997
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
19836: LD_EXP 52
19840: PUSH
19841: LD_VAR 0 6
19845: ARRAY
19846: PUSH
19847: LD_VAR 0 5
19851: ARRAY
19852: PUSH
19853: LD_INT 1
19855: ARRAY
19856: PPUSH
19857: LD_EXP 52
19861: PUSH
19862: LD_VAR 0 6
19866: ARRAY
19867: PUSH
19868: LD_VAR 0 5
19872: ARRAY
19873: PUSH
19874: LD_INT 2
19876: ARRAY
19877: PPUSH
19878: LD_VAR 0 2
19882: PPUSH
19883: LD_VAR 0 3
19887: PPUSH
19888: CALL_OW 298
19892: PUSH
19893: LD_INT 6
19895: LESS
19896: IFFALSE 19995
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
19898: LD_EXP 52
19902: PUSH
19903: LD_VAR 0 6
19907: ARRAY
19908: PUSH
19909: LD_VAR 0 5
19913: ARRAY
19914: PUSH
19915: LD_INT 1
19917: ARRAY
19918: PPUSH
19919: LD_EXP 52
19923: PUSH
19924: LD_VAR 0 6
19928: ARRAY
19929: PUSH
19930: LD_VAR 0 5
19934: ARRAY
19935: PUSH
19936: LD_INT 2
19938: ARRAY
19939: PPUSH
19940: LD_VAR 0 1
19944: PPUSH
19945: CALL_OW 255
19949: PPUSH
19950: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
19954: LD_ADDR_EXP 52
19958: PUSH
19959: LD_EXP 52
19963: PPUSH
19964: LD_VAR 0 6
19968: PPUSH
19969: LD_EXP 52
19973: PUSH
19974: LD_VAR 0 6
19978: ARRAY
19979: PPUSH
19980: LD_VAR 0 5
19984: PPUSH
19985: CALL_OW 3
19989: PPUSH
19990: CALL_OW 1
19994: ST_TO_ADDR
// end ; end ;
19995: GO 19833
19997: POP
19998: POP
// end ;
19999: LD_VAR 0 4
20003: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20004: LD_INT 0
20006: PPUSH
20007: PPUSH
20008: PPUSH
20009: PPUSH
20010: PPUSH
20011: PPUSH
20012: PPUSH
20013: PPUSH
20014: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20015: LD_VAR 0 1
20019: PPUSH
20020: CALL_OW 264
20024: PUSH
20025: LD_INT 81
20027: EQUAL
20028: NOT
20029: IFTRUE 20044
20031: PUSH
20032: LD_VAR 0 1
20036: PUSH
20037: LD_EXP 51
20041: IN
20042: NOT
20043: OR
20044: IFFALSE 20048
// exit ;
20046: GO 20374
// index := GetElementIndex ( minersList , unit ) ;
20048: LD_ADDR_VAR 0 6
20052: PUSH
20053: LD_EXP 51
20057: PPUSH
20058: LD_VAR 0 1
20062: PPUSH
20063: CALL 42705 0 2
20067: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
20068: LD_ADDR_VAR 0 8
20072: PUSH
20073: LD_EXP 53
20077: PUSH
20078: LD_EXP 52
20082: PUSH
20083: LD_VAR 0 6
20087: ARRAY
20088: MINUS
20089: ST_TO_ADDR
// if not minesFreeAmount then
20090: LD_VAR 0 8
20094: NOT
20095: IFFALSE 20099
// exit ;
20097: GO 20374
// tmp := [ ] ;
20099: LD_ADDR_VAR 0 7
20103: PUSH
20104: EMPTY
20105: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20106: LD_ADDR_VAR 0 5
20110: PUSH
20111: DOUBLE
20112: LD_INT 1
20114: DEC
20115: ST_TO_ADDR
20116: LD_VAR 0 8
20120: PUSH
20121: FOR_TO
20122: IFFALSE 20321
// begin _d := rand ( 0 , 5 ) ;
20124: LD_ADDR_VAR 0 11
20128: PUSH
20129: LD_INT 0
20131: PPUSH
20132: LD_INT 5
20134: PPUSH
20135: CALL_OW 12
20139: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20140: LD_ADDR_VAR 0 12
20144: PUSH
20145: LD_INT 2
20147: PPUSH
20148: LD_INT 6
20150: PPUSH
20151: CALL_OW 12
20155: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
20156: LD_ADDR_VAR 0 9
20160: PUSH
20161: LD_VAR 0 2
20165: PPUSH
20166: LD_VAR 0 11
20170: PPUSH
20171: LD_VAR 0 12
20175: PPUSH
20176: CALL_OW 272
20180: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
20181: LD_ADDR_VAR 0 10
20185: PUSH
20186: LD_VAR 0 3
20190: PPUSH
20191: LD_VAR 0 11
20195: PPUSH
20196: LD_VAR 0 12
20200: PPUSH
20201: CALL_OW 273
20205: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
20206: LD_VAR 0 9
20210: PPUSH
20211: LD_VAR 0 10
20215: PPUSH
20216: CALL_OW 488
20220: IFFALSE 20244
20222: PUSH
20223: LD_VAR 0 9
20227: PUSH
20228: LD_VAR 0 10
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: LD_VAR 0 7
20241: IN
20242: NOT
20243: AND
20244: IFFALSE 20263
20246: PUSH
20247: LD_VAR 0 9
20251: PPUSH
20252: LD_VAR 0 10
20256: PPUSH
20257: CALL_OW 458
20261: NOT
20262: AND
20263: IFFALSE 20305
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
20265: LD_ADDR_VAR 0 7
20269: PUSH
20270: LD_VAR 0 7
20274: PPUSH
20275: LD_VAR 0 7
20279: PUSH
20280: LD_INT 1
20282: PLUS
20283: PPUSH
20284: LD_VAR 0 9
20288: PUSH
20289: LD_VAR 0 10
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PPUSH
20298: CALL_OW 1
20302: ST_TO_ADDR
20303: GO 20319
// i := i - 1 ;
20305: LD_ADDR_VAR 0 5
20309: PUSH
20310: LD_VAR 0 5
20314: PUSH
20315: LD_INT 1
20317: MINUS
20318: ST_TO_ADDR
// end ;
20319: GO 20121
20321: POP
20322: POP
// for i in tmp do
20323: LD_ADDR_VAR 0 5
20327: PUSH
20328: LD_VAR 0 7
20332: PUSH
20333: FOR_IN
20334: IFFALSE 20372
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
20336: LD_VAR 0 1
20340: PPUSH
20341: LD_VAR 0 5
20345: PUSH
20346: LD_INT 1
20348: ARRAY
20349: PPUSH
20350: LD_VAR 0 5
20354: PUSH
20355: LD_INT 2
20357: ARRAY
20358: PPUSH
20359: CALL 19365 0 3
20363: NOT
20364: IFFALSE 20370
// exit ;
20366: POP
20367: POP
20368: GO 20374
20370: GO 20333
20372: POP
20373: POP
// end ;
20374: LD_VAR 0 4
20378: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
20379: LD_INT 0
20381: PPUSH
20382: PPUSH
20383: PPUSH
20384: PPUSH
20385: PPUSH
20386: PPUSH
20387: PPUSH
20388: PPUSH
20389: PPUSH
// if GetClass ( unit ) <> class_sniper then
20390: LD_VAR 0 1
20394: PPUSH
20395: CALL_OW 257
20399: PUSH
20400: LD_INT 5
20402: NONEQUAL
20403: IFFALSE 20407
// exit ;
20405: GO 20877
// dist := 8 ;
20407: LD_ADDR_VAR 0 5
20411: PUSH
20412: LD_INT 8
20414: ST_TO_ADDR
// viewRange := 12 ;
20415: LD_ADDR_VAR 0 8
20419: PUSH
20420: LD_INT 12
20422: ST_TO_ADDR
// side := GetSide ( unit ) ;
20423: LD_ADDR_VAR 0 6
20427: PUSH
20428: LD_VAR 0 1
20432: PPUSH
20433: CALL_OW 255
20437: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
20438: LD_INT 61
20440: PPUSH
20441: LD_VAR 0 6
20445: PPUSH
20446: CALL_OW 321
20450: PUSH
20451: LD_INT 2
20453: EQUAL
20454: IFFALSE 20464
// viewRange := 16 ;
20456: LD_ADDR_VAR 0 8
20460: PUSH
20461: LD_INT 16
20463: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
20464: LD_VAR 0 1
20468: PPUSH
20469: LD_VAR 0 2
20473: PPUSH
20474: LD_VAR 0 3
20478: PPUSH
20479: CALL_OW 297
20483: PUSH
20484: LD_VAR 0 5
20488: GREATER
20489: IFFALSE 20568
// begin ComMoveXY ( unit , x , y ) ;
20491: LD_VAR 0 1
20495: PPUSH
20496: LD_VAR 0 2
20500: PPUSH
20501: LD_VAR 0 3
20505: PPUSH
20506: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20510: LD_INT 35
20512: PPUSH
20513: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
20517: LD_VAR 0 1
20521: PPUSH
20522: LD_VAR 0 2
20526: PPUSH
20527: LD_VAR 0 3
20531: PPUSH
20532: CALL 74761 0 3
20536: NOT
20537: IFFALSE 20541
// exit ;
20539: GO 20877
// until GetDistUnitXY ( unit , x , y ) < dist ;
20541: LD_VAR 0 1
20545: PPUSH
20546: LD_VAR 0 2
20550: PPUSH
20551: LD_VAR 0 3
20555: PPUSH
20556: CALL_OW 297
20560: PUSH
20561: LD_VAR 0 5
20565: LESS
20566: IFFALSE 20510
// end ; ComTurnXY ( unit , x , y ) ;
20568: LD_VAR 0 1
20572: PPUSH
20573: LD_VAR 0 2
20577: PPUSH
20578: LD_VAR 0 3
20582: PPUSH
20583: CALL_OW 118
// repeat if Multiplayer then
20587: LD_OWVAR 4
20591: IFFALSE 20602
// wait ( 35 ) else
20593: LD_INT 35
20595: PPUSH
20596: CALL_OW 67
20600: GO 20609
// wait ( 5 ) ;
20602: LD_INT 5
20604: PPUSH
20605: CALL_OW 67
// _d := GetDir ( unit ) ;
20609: LD_ADDR_VAR 0 11
20613: PUSH
20614: LD_VAR 0 1
20618: PPUSH
20619: CALL_OW 254
20623: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
20624: LD_ADDR_VAR 0 7
20628: PUSH
20629: LD_VAR 0 1
20633: PPUSH
20634: CALL_OW 250
20638: PPUSH
20639: LD_VAR 0 1
20643: PPUSH
20644: CALL_OW 251
20648: PPUSH
20649: LD_VAR 0 2
20653: PPUSH
20654: LD_VAR 0 3
20658: PPUSH
20659: CALL 77397 0 4
20663: ST_TO_ADDR
// until dir = _d ;
20664: LD_VAR 0 7
20668: PUSH
20669: LD_VAR 0 11
20673: EQUAL
20674: IFFALSE 20587
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
20676: LD_ADDR_VAR 0 9
20680: PUSH
20681: LD_VAR 0 1
20685: PPUSH
20686: CALL_OW 250
20690: PPUSH
20691: LD_VAR 0 7
20695: PPUSH
20696: LD_VAR 0 5
20700: PPUSH
20701: CALL_OW 272
20705: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
20706: LD_ADDR_VAR 0 10
20710: PUSH
20711: LD_VAR 0 1
20715: PPUSH
20716: CALL_OW 251
20720: PPUSH
20721: LD_VAR 0 7
20725: PPUSH
20726: LD_VAR 0 5
20730: PPUSH
20731: CALL_OW 273
20735: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20736: LD_VAR 0 9
20740: PPUSH
20741: LD_VAR 0 10
20745: PPUSH
20746: CALL_OW 488
20750: NOT
20751: IFFALSE 20755
// exit ;
20753: GO 20877
// ComAnimCustom ( unit , 1 ) ;
20755: LD_VAR 0 1
20759: PPUSH
20760: LD_INT 1
20762: PPUSH
20763: CALL_OW 592
// p := 0 ;
20767: LD_ADDR_VAR 0 12
20771: PUSH
20772: LD_INT 0
20774: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
20775: LD_VAR 0 9
20779: PPUSH
20780: LD_VAR 0 10
20784: PPUSH
20785: LD_VAR 0 6
20789: PPUSH
20790: LD_VAR 0 8
20794: PPUSH
20795: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
20799: LD_INT 35
20801: PPUSH
20802: CALL_OW 67
// p := Inc ( p ) ;
20806: LD_ADDR_VAR 0 12
20810: PUSH
20811: LD_VAR 0 12
20815: PPUSH
20816: CALL 77353 0 1
20820: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
20821: LD_VAR 0 12
20825: PUSH
20826: LD_INT 3
20828: EQUAL
20829: IFTRUE 20843
20831: PUSH
20832: LD_VAR 0 1
20836: PPUSH
20837: CALL_OW 302
20841: NOT
20842: OR
20843: IFTRUE 20856
20845: PUSH
20846: LD_VAR 0 1
20850: PPUSH
20851: CALL_OW 301
20855: OR
20856: IFFALSE 20799
// RemoveSeeing ( _x , _y , side ) ;
20858: LD_VAR 0 9
20862: PPUSH
20863: LD_VAR 0 10
20867: PPUSH
20868: LD_VAR 0 6
20872: PPUSH
20873: CALL_OW 331
// end ;
20877: LD_VAR 0 4
20881: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
20882: LD_INT 0
20884: PPUSH
20885: PPUSH
20886: PPUSH
20887: PPUSH
20888: PPUSH
20889: PPUSH
20890: PPUSH
20891: PPUSH
20892: PPUSH
20893: PPUSH
20894: PPUSH
// if not unit then
20895: LD_VAR 0 1
20899: NOT
20900: IFFALSE 20904
// exit ;
20902: GO 21175
// side := GetSide ( unit ) ;
20904: LD_ADDR_VAR 0 3
20908: PUSH
20909: LD_VAR 0 1
20913: PPUSH
20914: CALL_OW 255
20918: ST_TO_ADDR
// x := GetX ( unit ) ;
20919: LD_ADDR_VAR 0 5
20923: PUSH
20924: LD_VAR 0 1
20928: PPUSH
20929: CALL_OW 250
20933: ST_TO_ADDR
// y := GetY ( unit ) ;
20934: LD_ADDR_VAR 0 6
20938: PUSH
20939: LD_VAR 0 1
20943: PPUSH
20944: CALL_OW 251
20948: ST_TO_ADDR
// r := 8 ;
20949: LD_ADDR_VAR 0 4
20953: PUSH
20954: LD_INT 8
20956: ST_TO_ADDR
// if x - r < 0 then
20957: LD_VAR 0 5
20961: PUSH
20962: LD_VAR 0 4
20966: MINUS
20967: PUSH
20968: LD_INT 0
20970: LESS
20971: IFFALSE 20983
// min_x := 0 else
20973: LD_ADDR_VAR 0 7
20977: PUSH
20978: LD_INT 0
20980: ST_TO_ADDR
20981: GO 20999
// min_x := x - r ;
20983: LD_ADDR_VAR 0 7
20987: PUSH
20988: LD_VAR 0 5
20992: PUSH
20993: LD_VAR 0 4
20997: MINUS
20998: ST_TO_ADDR
// if y - r < 0 then
20999: LD_VAR 0 6
21003: PUSH
21004: LD_VAR 0 4
21008: MINUS
21009: PUSH
21010: LD_INT 0
21012: LESS
21013: IFFALSE 21025
// min_y := 0 else
21015: LD_ADDR_VAR 0 8
21019: PUSH
21020: LD_INT 0
21022: ST_TO_ADDR
21023: GO 21041
// min_y := y - r ;
21025: LD_ADDR_VAR 0 8
21029: PUSH
21030: LD_VAR 0 6
21034: PUSH
21035: LD_VAR 0 4
21039: MINUS
21040: ST_TO_ADDR
// max_x := x + r ;
21041: LD_ADDR_VAR 0 9
21045: PUSH
21046: LD_VAR 0 5
21050: PUSH
21051: LD_VAR 0 4
21055: PLUS
21056: ST_TO_ADDR
// max_y := y + r ;
21057: LD_ADDR_VAR 0 10
21061: PUSH
21062: LD_VAR 0 6
21066: PUSH
21067: LD_VAR 0 4
21071: PLUS
21072: ST_TO_ADDR
// for _x = min_x to max_x do
21073: LD_ADDR_VAR 0 11
21077: PUSH
21078: DOUBLE
21079: LD_VAR 0 7
21083: DEC
21084: ST_TO_ADDR
21085: LD_VAR 0 9
21089: PUSH
21090: FOR_TO
21091: IFFALSE 21173
// for _y = min_y to max_y do
21093: LD_ADDR_VAR 0 12
21097: PUSH
21098: DOUBLE
21099: LD_VAR 0 8
21103: DEC
21104: ST_TO_ADDR
21105: LD_VAR 0 10
21109: PUSH
21110: FOR_TO
21111: IFFALSE 21169
// begin if not ValidHex ( _x , _y ) then
21113: LD_VAR 0 11
21117: PPUSH
21118: LD_VAR 0 12
21122: PPUSH
21123: CALL_OW 488
21127: NOT
21128: IFFALSE 21132
// continue ;
21130: GO 21110
// if MineAtPos ( _x , _y ) then
21132: LD_VAR 0 11
21136: PPUSH
21137: LD_VAR 0 12
21141: PPUSH
21142: CALL_OW 458
21146: IFFALSE 21167
// ViewMineAtPos ( _x , _y , side ) ;
21148: LD_VAR 0 11
21152: PPUSH
21153: LD_VAR 0 12
21157: PPUSH
21158: LD_VAR 0 3
21162: PPUSH
21163: CALL_OW 457
// end ;
21167: GO 21110
21169: POP
21170: POP
21171: GO 21090
21173: POP
21174: POP
// end ;
21175: LD_VAR 0 2
21179: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
21180: LD_INT 0
21182: PPUSH
21183: PPUSH
21184: PPUSH
21185: PPUSH
21186: PPUSH
21187: PPUSH
21188: PPUSH
// if not units then
21189: LD_VAR 0 1
21193: NOT
21194: IFFALSE 21198
// exit ;
21196: GO 21662
// scaners := [ ] ;
21198: LD_ADDR_VAR 0 6
21202: PUSH
21203: EMPTY
21204: ST_TO_ADDR
// for i in units do
21205: LD_ADDR_VAR 0 3
21209: PUSH
21210: LD_VAR 0 1
21214: PUSH
21215: FOR_IN
21216: IFFALSE 21373
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
21218: LD_VAR 0 3
21222: PPUSH
21223: CALL_OW 264
21227: PUSH
21228: LD_INT 11
21230: NONEQUAL
21231: IFTRUE 21245
21233: PUSH
21234: LD_VAR 0 3
21238: PPUSH
21239: CALL_OW 302
21243: NOT
21244: OR
21245: IFTRUE 21262
21247: PUSH
21248: LD_VAR 0 3
21252: PPUSH
21253: CALL_OW 110
21257: PUSH
21258: LD_INT 502
21260: EQUAL
21261: OR
21262: IFFALSE 21266
// continue ;
21264: GO 21215
// ComStop ( i ) ;
21266: LD_VAR 0 3
21270: PPUSH
21271: CALL_OW 141
// x := GetX ( i ) ;
21275: LD_ADDR_VAR 0 4
21279: PUSH
21280: LD_VAR 0 3
21284: PPUSH
21285: CALL_OW 250
21289: ST_TO_ADDR
// y := GetY ( i ) ;
21290: LD_ADDR_VAR 0 5
21294: PUSH
21295: LD_VAR 0 3
21299: PPUSH
21300: CALL_OW 251
21304: ST_TO_ADDR
// if GetSide ( i ) = your_side then
21305: LD_VAR 0 3
21309: PPUSH
21310: CALL_OW 255
21314: PUSH
21315: LD_OWVAR 2
21319: EQUAL
21320: IFFALSE 21339
// PlaySoundXY ( x , y , mineDetector ) ;
21322: LD_VAR 0 4
21326: PPUSH
21327: LD_VAR 0 5
21331: PPUSH
21332: LD_STRING mineDetector
21334: PPUSH
21335: CALL_OW 366
// scaners := Join ( scaners , i ) ;
21339: LD_ADDR_VAR 0 6
21343: PUSH
21344: LD_VAR 0 6
21348: PPUSH
21349: LD_VAR 0 3
21353: PPUSH
21354: CALL 75980 0 2
21358: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
21359: LD_VAR 0 3
21363: PPUSH
21364: LD_INT 502
21366: PPUSH
21367: CALL_OW 109
// end ;
21371: GO 21215
21373: POP
21374: POP
// if not scaners then
21375: LD_VAR 0 6
21379: NOT
21380: IFFALSE 21384
// exit ;
21382: GO 21662
// wait ( 3 ) ;
21384: LD_INT 3
21386: PPUSH
21387: CALL_OW 67
// timer := 6 ;
21391: LD_ADDR_VAR 0 7
21395: PUSH
21396: LD_INT 6
21398: ST_TO_ADDR
// repeat for i in scaners do
21399: LD_ADDR_VAR 0 3
21403: PUSH
21404: LD_VAR 0 6
21408: PUSH
21409: FOR_IN
21410: IFFALSE 21560
// begin side := GetSide ( i ) ;
21412: LD_ADDR_VAR 0 8
21416: PUSH
21417: LD_VAR 0 3
21421: PPUSH
21422: CALL_OW 255
21426: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
21427: LD_VAR 0 3
21431: PPUSH
21432: CALL_OW 302
21436: NOT
21437: IFTRUE 21450
21439: PUSH
21440: LD_VAR 0 3
21444: PPUSH
21445: CALL_OW 314
21449: OR
21450: IFTRUE 21481
21452: PUSH
21453: LD_VAR 0 3
21457: PPUSH
21458: CALL_OW 263
21462: PUSH
21463: LD_INT 1
21465: EQUAL
21466: IFFALSE 21480
21468: PUSH
21469: LD_VAR 0 3
21473: PPUSH
21474: CALL_OW 311
21478: NOT
21479: AND
21480: OR
21481: IFFALSE 21525
// begin SetUnitDisplayNumber ( i , 0 ) ;
21483: LD_VAR 0 3
21487: PPUSH
21488: LD_INT 0
21490: PPUSH
21491: CALL_OW 505
// SetTag ( i , 0 ) ;
21495: LD_VAR 0 3
21499: PPUSH
21500: LD_INT 0
21502: PPUSH
21503: CALL_OW 109
// scaners := scaners diff i ;
21507: LD_ADDR_VAR 0 6
21511: PUSH
21512: LD_VAR 0 6
21516: PUSH
21517: LD_VAR 0 3
21521: DIFF
21522: ST_TO_ADDR
// continue ;
21523: GO 21409
// end ; if side in [ your_side , 9 ] then
21525: LD_VAR 0 8
21529: PUSH
21530: LD_OWVAR 2
21534: PUSH
21535: LD_INT 9
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: IN
21542: IFFALSE 21558
// SetUnitDisplayNumber ( i , timer ) ;
21544: LD_VAR 0 3
21548: PPUSH
21549: LD_VAR 0 7
21553: PPUSH
21554: CALL_OW 505
// end ;
21558: GO 21409
21560: POP
21561: POP
// if not scaners then
21562: LD_VAR 0 6
21566: NOT
21567: IFFALSE 21571
// exit ;
21569: GO 21662
// timer := Dec ( timer ) ;
21571: LD_ADDR_VAR 0 7
21575: PUSH
21576: LD_VAR 0 7
21580: PPUSH
21581: CALL 77375 0 1
21585: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21586: LD_INT 35
21588: PPUSH
21589: CALL_OW 67
// until timer = 0 ;
21593: LD_VAR 0 7
21597: PUSH
21598: LD_INT 0
21600: EQUAL
21601: IFFALSE 21399
// if not scaners then
21603: LD_VAR 0 6
21607: NOT
21608: IFFALSE 21612
// exit ;
21610: GO 21662
// for i in scaners do
21612: LD_ADDR_VAR 0 3
21616: PUSH
21617: LD_VAR 0 6
21621: PUSH
21622: FOR_IN
21623: IFFALSE 21660
// begin SetUnitDisplayNumber ( i , 0 ) ;
21625: LD_VAR 0 3
21629: PPUSH
21630: LD_INT 0
21632: PPUSH
21633: CALL_OW 505
// SetTag ( i , 0 ) ;
21637: LD_VAR 0 3
21641: PPUSH
21642: LD_INT 0
21644: PPUSH
21645: CALL_OW 109
// RevealDetectorMine ( i ) ;
21649: LD_VAR 0 3
21653: PPUSH
21654: CALL 20882 0 1
// end ;
21658: GO 21622
21660: POP
21661: POP
// end ;
21662: LD_VAR 0 2
21666: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
21667: LD_INT 0
21669: PPUSH
// if p1 = mine_detector_mode then
21670: LD_VAR 0 2
21674: PUSH
21675: LD_INT 103
21677: EQUAL
21678: IFFALSE 21689
// DetectMine ( units ) ;
21680: LD_VAR 0 1
21684: PPUSH
21685: CALL 21180 0 1
// end ; end_of_file
21689: LD_VAR 0 7
21693: RET
// export globalGameSaveCounter ; every 0 0$1 do
21694: GO 21696
21696: DISABLE
// begin enable ;
21697: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
21698: LD_STRING updateTimer(
21700: PUSH
21701: LD_OWVAR 1
21705: STR
21706: PUSH
21707: LD_STRING );
21709: STR
21710: PPUSH
21711: CALL_OW 559
// end ;
21715: END
// every 0 0$1 do
21716: GO 21718
21718: DISABLE
// begin globalGameSaveCounter := 0 ;
21719: LD_ADDR_EXP 54
21723: PUSH
21724: LD_INT 0
21726: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
21727: LD_STRING setGameSaveCounter(0)
21729: PPUSH
21730: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
21734: LD_STRING initStreamRollete();
21736: PPUSH
21737: CALL_OW 559
// InitStreamMode ;
21741: CALL 23093 0 0
// DefineStreamItems ( false ) ;
21745: LD_INT 0
21747: PPUSH
21748: CALL 23557 0 1
// end ;
21752: END
// export function SOS_MapStart ( ) ; begin
21753: LD_INT 0
21755: PPUSH
// if streamModeActive then
21756: LD_EXP 55
21760: IFFALSE 21769
// DefineStreamItems ( true ) ;
21762: LD_INT 1
21764: PPUSH
21765: CALL 23557 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
21769: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
21771: PPUSH
21772: CALL_OW 559
// UpdateLuaVariables ( ) ;
21776: CALL 21793 0 0
// UpdateFactoryWaypoints ( ) ;
21780: CALL 36679 0 0
// UpdateWarehouseGatheringPoints ( ) ;
21784: CALL 36931 0 0
// end ;
21788: LD_VAR 0 1
21792: RET
// function UpdateLuaVariables ( ) ; begin
21793: LD_INT 0
21795: PPUSH
// if globalGameSaveCounter then
21796: LD_EXP 54
21800: IFFALSE 21834
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
21802: LD_ADDR_EXP 54
21806: PUSH
21807: LD_EXP 54
21811: PPUSH
21812: CALL 77353 0 1
21816: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21817: LD_STRING setGameSaveCounter(
21819: PUSH
21820: LD_EXP 54
21824: STR
21825: PUSH
21826: LD_STRING )
21828: STR
21829: PPUSH
21830: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
21834: LD_STRING setGameDifficulty(
21836: PUSH
21837: LD_OWVAR 67
21841: STR
21842: PUSH
21843: LD_STRING )
21845: STR
21846: PPUSH
21847: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
21851: LD_STRING displayDifficulty(
21853: PUSH
21854: LD_OWVAR 67
21858: STR
21859: PUSH
21860: LD_STRING )
21862: STR
21863: PPUSH
21864: CALL_OW 559
// end ;
21868: LD_VAR 0 1
21872: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21873: LD_INT 0
21875: PPUSH
// if p2 = stream_mode then
21876: LD_VAR 0 2
21880: PUSH
21881: LD_INT 100
21883: EQUAL
21884: IFFALSE 22887
// begin if not StreamModeActive then
21886: LD_EXP 55
21890: NOT
21891: IFFALSE 21901
// StreamModeActive := true ;
21893: LD_ADDR_EXP 55
21897: PUSH
21898: LD_INT 1
21900: ST_TO_ADDR
// if p3 = 0 then
21901: LD_VAR 0 3
21905: PUSH
21906: LD_INT 0
21908: EQUAL
21909: IFFALSE 21915
// InitStreamMode ;
21911: CALL 23093 0 0
// if p3 = 1 then
21915: LD_VAR 0 3
21919: PUSH
21920: LD_INT 1
21922: EQUAL
21923: IFFALSE 21933
// sRocket := true ;
21925: LD_ADDR_EXP 60
21929: PUSH
21930: LD_INT 1
21932: ST_TO_ADDR
// if p3 = 2 then
21933: LD_VAR 0 3
21937: PUSH
21938: LD_INT 2
21940: EQUAL
21941: IFFALSE 21951
// sSpeed := true ;
21943: LD_ADDR_EXP 59
21947: PUSH
21948: LD_INT 1
21950: ST_TO_ADDR
// if p3 = 3 then
21951: LD_VAR 0 3
21955: PUSH
21956: LD_INT 3
21958: EQUAL
21959: IFFALSE 21969
// sEngine := true ;
21961: LD_ADDR_EXP 61
21965: PUSH
21966: LD_INT 1
21968: ST_TO_ADDR
// if p3 = 4 then
21969: LD_VAR 0 3
21973: PUSH
21974: LD_INT 4
21976: EQUAL
21977: IFFALSE 21987
// sSpec := true ;
21979: LD_ADDR_EXP 58
21983: PUSH
21984: LD_INT 1
21986: ST_TO_ADDR
// if p3 = 5 then
21987: LD_VAR 0 3
21991: PUSH
21992: LD_INT 5
21994: EQUAL
21995: IFFALSE 22005
// sLevel := true ;
21997: LD_ADDR_EXP 62
22001: PUSH
22002: LD_INT 1
22004: ST_TO_ADDR
// if p3 = 6 then
22005: LD_VAR 0 3
22009: PUSH
22010: LD_INT 6
22012: EQUAL
22013: IFFALSE 22023
// sArmoury := true ;
22015: LD_ADDR_EXP 63
22019: PUSH
22020: LD_INT 1
22022: ST_TO_ADDR
// if p3 = 7 then
22023: LD_VAR 0 3
22027: PUSH
22028: LD_INT 7
22030: EQUAL
22031: IFFALSE 22041
// sRadar := true ;
22033: LD_ADDR_EXP 64
22037: PUSH
22038: LD_INT 1
22040: ST_TO_ADDR
// if p3 = 8 then
22041: LD_VAR 0 3
22045: PUSH
22046: LD_INT 8
22048: EQUAL
22049: IFFALSE 22059
// sBunker := true ;
22051: LD_ADDR_EXP 65
22055: PUSH
22056: LD_INT 1
22058: ST_TO_ADDR
// if p3 = 9 then
22059: LD_VAR 0 3
22063: PUSH
22064: LD_INT 9
22066: EQUAL
22067: IFFALSE 22077
// sHack := true ;
22069: LD_ADDR_EXP 66
22073: PUSH
22074: LD_INT 1
22076: ST_TO_ADDR
// if p3 = 10 then
22077: LD_VAR 0 3
22081: PUSH
22082: LD_INT 10
22084: EQUAL
22085: IFFALSE 22095
// sFire := true ;
22087: LD_ADDR_EXP 67
22091: PUSH
22092: LD_INT 1
22094: ST_TO_ADDR
// if p3 = 11 then
22095: LD_VAR 0 3
22099: PUSH
22100: LD_INT 11
22102: EQUAL
22103: IFFALSE 22113
// sRefresh := true ;
22105: LD_ADDR_EXP 68
22109: PUSH
22110: LD_INT 1
22112: ST_TO_ADDR
// if p3 = 12 then
22113: LD_VAR 0 3
22117: PUSH
22118: LD_INT 12
22120: EQUAL
22121: IFFALSE 22131
// sExp := true ;
22123: LD_ADDR_EXP 69
22127: PUSH
22128: LD_INT 1
22130: ST_TO_ADDR
// if p3 = 13 then
22131: LD_VAR 0 3
22135: PUSH
22136: LD_INT 13
22138: EQUAL
22139: IFFALSE 22149
// sDepot := true ;
22141: LD_ADDR_EXP 70
22145: PUSH
22146: LD_INT 1
22148: ST_TO_ADDR
// if p3 = 14 then
22149: LD_VAR 0 3
22153: PUSH
22154: LD_INT 14
22156: EQUAL
22157: IFFALSE 22167
// sFlag := true ;
22159: LD_ADDR_EXP 71
22163: PUSH
22164: LD_INT 1
22166: ST_TO_ADDR
// if p3 = 15 then
22167: LD_VAR 0 3
22171: PUSH
22172: LD_INT 15
22174: EQUAL
22175: IFFALSE 22185
// sKamikadze := true ;
22177: LD_ADDR_EXP 79
22181: PUSH
22182: LD_INT 1
22184: ST_TO_ADDR
// if p3 = 16 then
22185: LD_VAR 0 3
22189: PUSH
22190: LD_INT 16
22192: EQUAL
22193: IFFALSE 22203
// sTroll := true ;
22195: LD_ADDR_EXP 80
22199: PUSH
22200: LD_INT 1
22202: ST_TO_ADDR
// if p3 = 17 then
22203: LD_VAR 0 3
22207: PUSH
22208: LD_INT 17
22210: EQUAL
22211: IFFALSE 22221
// sSlow := true ;
22213: LD_ADDR_EXP 81
22217: PUSH
22218: LD_INT 1
22220: ST_TO_ADDR
// if p3 = 18 then
22221: LD_VAR 0 3
22225: PUSH
22226: LD_INT 18
22228: EQUAL
22229: IFFALSE 22239
// sLack := true ;
22231: LD_ADDR_EXP 82
22235: PUSH
22236: LD_INT 1
22238: ST_TO_ADDR
// if p3 = 19 then
22239: LD_VAR 0 3
22243: PUSH
22244: LD_INT 19
22246: EQUAL
22247: IFFALSE 22257
// sTank := true ;
22249: LD_ADDR_EXP 84
22253: PUSH
22254: LD_INT 1
22256: ST_TO_ADDR
// if p3 = 20 then
22257: LD_VAR 0 3
22261: PUSH
22262: LD_INT 20
22264: EQUAL
22265: IFFALSE 22275
// sRemote := true ;
22267: LD_ADDR_EXP 85
22271: PUSH
22272: LD_INT 1
22274: ST_TO_ADDR
// if p3 = 21 then
22275: LD_VAR 0 3
22279: PUSH
22280: LD_INT 21
22282: EQUAL
22283: IFFALSE 22293
// sPowell := true ;
22285: LD_ADDR_EXP 86
22289: PUSH
22290: LD_INT 1
22292: ST_TO_ADDR
// if p3 = 22 then
22293: LD_VAR 0 3
22297: PUSH
22298: LD_INT 22
22300: EQUAL
22301: IFFALSE 22311
// sTeleport := true ;
22303: LD_ADDR_EXP 89
22307: PUSH
22308: LD_INT 1
22310: ST_TO_ADDR
// if p3 = 23 then
22311: LD_VAR 0 3
22315: PUSH
22316: LD_INT 23
22318: EQUAL
22319: IFFALSE 22329
// sOilTower := true ;
22321: LD_ADDR_EXP 91
22325: PUSH
22326: LD_INT 1
22328: ST_TO_ADDR
// if p3 = 24 then
22329: LD_VAR 0 3
22333: PUSH
22334: LD_INT 24
22336: EQUAL
22337: IFFALSE 22347
// sShovel := true ;
22339: LD_ADDR_EXP 92
22343: PUSH
22344: LD_INT 1
22346: ST_TO_ADDR
// if p3 = 25 then
22347: LD_VAR 0 3
22351: PUSH
22352: LD_INT 25
22354: EQUAL
22355: IFFALSE 22365
// sSheik := true ;
22357: LD_ADDR_EXP 93
22361: PUSH
22362: LD_INT 1
22364: ST_TO_ADDR
// if p3 = 26 then
22365: LD_VAR 0 3
22369: PUSH
22370: LD_INT 26
22372: EQUAL
22373: IFFALSE 22383
// sEarthquake := true ;
22375: LD_ADDR_EXP 95
22379: PUSH
22380: LD_INT 1
22382: ST_TO_ADDR
// if p3 = 27 then
22383: LD_VAR 0 3
22387: PUSH
22388: LD_INT 27
22390: EQUAL
22391: IFFALSE 22401
// sAI := true ;
22393: LD_ADDR_EXP 96
22397: PUSH
22398: LD_INT 1
22400: ST_TO_ADDR
// if p3 = 28 then
22401: LD_VAR 0 3
22405: PUSH
22406: LD_INT 28
22408: EQUAL
22409: IFFALSE 22419
// sCargo := true ;
22411: LD_ADDR_EXP 99
22415: PUSH
22416: LD_INT 1
22418: ST_TO_ADDR
// if p3 = 29 then
22419: LD_VAR 0 3
22423: PUSH
22424: LD_INT 29
22426: EQUAL
22427: IFFALSE 22437
// sDLaser := true ;
22429: LD_ADDR_EXP 100
22433: PUSH
22434: LD_INT 1
22436: ST_TO_ADDR
// if p3 = 30 then
22437: LD_VAR 0 3
22441: PUSH
22442: LD_INT 30
22444: EQUAL
22445: IFFALSE 22455
// sExchange := true ;
22447: LD_ADDR_EXP 101
22451: PUSH
22452: LD_INT 1
22454: ST_TO_ADDR
// if p3 = 31 then
22455: LD_VAR 0 3
22459: PUSH
22460: LD_INT 31
22462: EQUAL
22463: IFFALSE 22473
// sFac := true ;
22465: LD_ADDR_EXP 102
22469: PUSH
22470: LD_INT 1
22472: ST_TO_ADDR
// if p3 = 32 then
22473: LD_VAR 0 3
22477: PUSH
22478: LD_INT 32
22480: EQUAL
22481: IFFALSE 22491
// sPower := true ;
22483: LD_ADDR_EXP 103
22487: PUSH
22488: LD_INT 1
22490: ST_TO_ADDR
// if p3 = 33 then
22491: LD_VAR 0 3
22495: PUSH
22496: LD_INT 33
22498: EQUAL
22499: IFFALSE 22509
// sRandom := true ;
22501: LD_ADDR_EXP 104
22505: PUSH
22506: LD_INT 1
22508: ST_TO_ADDR
// if p3 = 34 then
22509: LD_VAR 0 3
22513: PUSH
22514: LD_INT 34
22516: EQUAL
22517: IFFALSE 22527
// sShield := true ;
22519: LD_ADDR_EXP 105
22523: PUSH
22524: LD_INT 1
22526: ST_TO_ADDR
// if p3 = 35 then
22527: LD_VAR 0 3
22531: PUSH
22532: LD_INT 35
22534: EQUAL
22535: IFFALSE 22545
// sTime := true ;
22537: LD_ADDR_EXP 106
22541: PUSH
22542: LD_INT 1
22544: ST_TO_ADDR
// if p3 = 36 then
22545: LD_VAR 0 3
22549: PUSH
22550: LD_INT 36
22552: EQUAL
22553: IFFALSE 22563
// sTools := true ;
22555: LD_ADDR_EXP 107
22559: PUSH
22560: LD_INT 1
22562: ST_TO_ADDR
// if p3 = 101 then
22563: LD_VAR 0 3
22567: PUSH
22568: LD_INT 101
22570: EQUAL
22571: IFFALSE 22581
// sSold := true ;
22573: LD_ADDR_EXP 72
22577: PUSH
22578: LD_INT 1
22580: ST_TO_ADDR
// if p3 = 102 then
22581: LD_VAR 0 3
22585: PUSH
22586: LD_INT 102
22588: EQUAL
22589: IFFALSE 22599
// sDiff := true ;
22591: LD_ADDR_EXP 73
22595: PUSH
22596: LD_INT 1
22598: ST_TO_ADDR
// if p3 = 103 then
22599: LD_VAR 0 3
22603: PUSH
22604: LD_INT 103
22606: EQUAL
22607: IFFALSE 22617
// sFog := true ;
22609: LD_ADDR_EXP 76
22613: PUSH
22614: LD_INT 1
22616: ST_TO_ADDR
// if p3 = 104 then
22617: LD_VAR 0 3
22621: PUSH
22622: LD_INT 104
22624: EQUAL
22625: IFFALSE 22635
// sReset := true ;
22627: LD_ADDR_EXP 77
22631: PUSH
22632: LD_INT 1
22634: ST_TO_ADDR
// if p3 = 105 then
22635: LD_VAR 0 3
22639: PUSH
22640: LD_INT 105
22642: EQUAL
22643: IFFALSE 22653
// sSun := true ;
22645: LD_ADDR_EXP 78
22649: PUSH
22650: LD_INT 1
22652: ST_TO_ADDR
// if p3 = 106 then
22653: LD_VAR 0 3
22657: PUSH
22658: LD_INT 106
22660: EQUAL
22661: IFFALSE 22671
// sTiger := true ;
22663: LD_ADDR_EXP 74
22667: PUSH
22668: LD_INT 1
22670: ST_TO_ADDR
// if p3 = 107 then
22671: LD_VAR 0 3
22675: PUSH
22676: LD_INT 107
22678: EQUAL
22679: IFFALSE 22689
// sBomb := true ;
22681: LD_ADDR_EXP 75
22685: PUSH
22686: LD_INT 1
22688: ST_TO_ADDR
// if p3 = 108 then
22689: LD_VAR 0 3
22693: PUSH
22694: LD_INT 108
22696: EQUAL
22697: IFFALSE 22707
// sWound := true ;
22699: LD_ADDR_EXP 83
22703: PUSH
22704: LD_INT 1
22706: ST_TO_ADDR
// if p3 = 109 then
22707: LD_VAR 0 3
22711: PUSH
22712: LD_INT 109
22714: EQUAL
22715: IFFALSE 22725
// sBetray := true ;
22717: LD_ADDR_EXP 87
22721: PUSH
22722: LD_INT 1
22724: ST_TO_ADDR
// if p3 = 110 then
22725: LD_VAR 0 3
22729: PUSH
22730: LD_INT 110
22732: EQUAL
22733: IFFALSE 22743
// sContamin := true ;
22735: LD_ADDR_EXP 88
22739: PUSH
22740: LD_INT 1
22742: ST_TO_ADDR
// if p3 = 111 then
22743: LD_VAR 0 3
22747: PUSH
22748: LD_INT 111
22750: EQUAL
22751: IFFALSE 22761
// sOil := true ;
22753: LD_ADDR_EXP 90
22757: PUSH
22758: LD_INT 1
22760: ST_TO_ADDR
// if p3 = 112 then
22761: LD_VAR 0 3
22765: PUSH
22766: LD_INT 112
22768: EQUAL
22769: IFFALSE 22779
// sStu := true ;
22771: LD_ADDR_EXP 94
22775: PUSH
22776: LD_INT 1
22778: ST_TO_ADDR
// if p3 = 113 then
22779: LD_VAR 0 3
22783: PUSH
22784: LD_INT 113
22786: EQUAL
22787: IFFALSE 22797
// sBazooka := true ;
22789: LD_ADDR_EXP 97
22793: PUSH
22794: LD_INT 1
22796: ST_TO_ADDR
// if p3 = 114 then
22797: LD_VAR 0 3
22801: PUSH
22802: LD_INT 114
22804: EQUAL
22805: IFFALSE 22815
// sMortar := true ;
22807: LD_ADDR_EXP 98
22811: PUSH
22812: LD_INT 1
22814: ST_TO_ADDR
// if p3 = 115 then
22815: LD_VAR 0 3
22819: PUSH
22820: LD_INT 115
22822: EQUAL
22823: IFFALSE 22833
// sRanger := true ;
22825: LD_ADDR_EXP 108
22829: PUSH
22830: LD_INT 1
22832: ST_TO_ADDR
// if p3 = 116 then
22833: LD_VAR 0 3
22837: PUSH
22838: LD_INT 116
22840: EQUAL
22841: IFFALSE 22851
// sComputer := true ;
22843: LD_ADDR_EXP 109
22847: PUSH
22848: LD_INT 1
22850: ST_TO_ADDR
// if p3 = 117 then
22851: LD_VAR 0 3
22855: PUSH
22856: LD_INT 117
22858: EQUAL
22859: IFFALSE 22869
// s30 := true ;
22861: LD_ADDR_EXP 110
22865: PUSH
22866: LD_INT 1
22868: ST_TO_ADDR
// if p3 = 118 then
22869: LD_VAR 0 3
22873: PUSH
22874: LD_INT 118
22876: EQUAL
22877: IFFALSE 22887
// s60 := true ;
22879: LD_ADDR_EXP 111
22883: PUSH
22884: LD_INT 1
22886: ST_TO_ADDR
// end ; if p2 = hack_mode then
22887: LD_VAR 0 2
22891: PUSH
22892: LD_INT 101
22894: EQUAL
22895: IFFALSE 23023
// begin case p3 of 1 :
22897: LD_VAR 0 3
22901: PUSH
22902: LD_INT 1
22904: DOUBLE
22905: EQUAL
22906: IFTRUE 22910
22908: GO 22917
22910: POP
// hHackUnlimitedResources ; 2 :
22911: CALL 35286 0 0
22915: GO 23023
22917: LD_INT 2
22919: DOUBLE
22920: EQUAL
22921: IFTRUE 22925
22923: GO 22932
22925: POP
// hHackSetLevel10 ; 3 :
22926: CALL 35419 0 0
22930: GO 23023
22932: LD_INT 3
22934: DOUBLE
22935: EQUAL
22936: IFTRUE 22940
22938: GO 22947
22940: POP
// hHackSetLevel10YourUnits ; 4 :
22941: CALL 35504 0 0
22945: GO 23023
22947: LD_INT 4
22949: DOUBLE
22950: EQUAL
22951: IFTRUE 22955
22953: GO 22962
22955: POP
// hHackInvincible ; 5 :
22956: CALL 35952 0 0
22960: GO 23023
22962: LD_INT 5
22964: DOUBLE
22965: EQUAL
22966: IFTRUE 22970
22968: GO 22977
22970: POP
// hHackInvisible ; 6 :
22971: CALL 36063 0 0
22975: GO 23023
22977: LD_INT 6
22979: DOUBLE
22980: EQUAL
22981: IFTRUE 22985
22983: GO 22992
22985: POP
// hHackChangeYourSide ; 7 :
22986: CALL 36120 0 0
22990: GO 23023
22992: LD_INT 7
22994: DOUBLE
22995: EQUAL
22996: IFTRUE 23000
22998: GO 23007
23000: POP
// hHackChangeUnitSide ; 8 :
23001: CALL 36162 0 0
23005: GO 23023
23007: LD_INT 8
23009: DOUBLE
23010: EQUAL
23011: IFTRUE 23015
23013: GO 23022
23015: POP
// hHackFog ; end ;
23016: CALL 36263 0 0
23020: GO 23023
23022: POP
// end ; if p2 = game_save_mode then
23023: LD_VAR 0 2
23027: PUSH
23028: LD_INT 102
23030: EQUAL
23031: IFFALSE 23088
// begin if p3 = 1 then
23033: LD_VAR 0 3
23037: PUSH
23038: LD_INT 1
23040: EQUAL
23041: IFFALSE 23053
// globalGameSaveCounter := p4 ;
23043: LD_ADDR_EXP 54
23047: PUSH
23048: LD_VAR 0 4
23052: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
23053: LD_VAR 0 3
23057: PUSH
23058: LD_INT 2
23060: EQUAL
23061: IFFALSE 23069
23063: PUSH
23064: LD_EXP 54
23068: AND
23069: IFFALSE 23088
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
23071: LD_STRING setGameSaveCounter(
23073: PUSH
23074: LD_EXP 54
23078: STR
23079: PUSH
23080: LD_STRING )
23082: STR
23083: PPUSH
23084: CALL_OW 559
// end ; end ;
23088: LD_VAR 0 7
23092: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
23093: LD_INT 0
23095: PPUSH
// streamModeActive := false ;
23096: LD_ADDR_EXP 55
23100: PUSH
23101: LD_INT 0
23103: ST_TO_ADDR
// normalCounter := 36 ;
23104: LD_ADDR_EXP 56
23108: PUSH
23109: LD_INT 36
23111: ST_TO_ADDR
// hardcoreCounter := 18 ;
23112: LD_ADDR_EXP 57
23116: PUSH
23117: LD_INT 18
23119: ST_TO_ADDR
// sRocket := false ;
23120: LD_ADDR_EXP 60
23124: PUSH
23125: LD_INT 0
23127: ST_TO_ADDR
// sSpeed := false ;
23128: LD_ADDR_EXP 59
23132: PUSH
23133: LD_INT 0
23135: ST_TO_ADDR
// sEngine := false ;
23136: LD_ADDR_EXP 61
23140: PUSH
23141: LD_INT 0
23143: ST_TO_ADDR
// sSpec := false ;
23144: LD_ADDR_EXP 58
23148: PUSH
23149: LD_INT 0
23151: ST_TO_ADDR
// sLevel := false ;
23152: LD_ADDR_EXP 62
23156: PUSH
23157: LD_INT 0
23159: ST_TO_ADDR
// sArmoury := false ;
23160: LD_ADDR_EXP 63
23164: PUSH
23165: LD_INT 0
23167: ST_TO_ADDR
// sRadar := false ;
23168: LD_ADDR_EXP 64
23172: PUSH
23173: LD_INT 0
23175: ST_TO_ADDR
// sBunker := false ;
23176: LD_ADDR_EXP 65
23180: PUSH
23181: LD_INT 0
23183: ST_TO_ADDR
// sHack := false ;
23184: LD_ADDR_EXP 66
23188: PUSH
23189: LD_INT 0
23191: ST_TO_ADDR
// sFire := false ;
23192: LD_ADDR_EXP 67
23196: PUSH
23197: LD_INT 0
23199: ST_TO_ADDR
// sRefresh := false ;
23200: LD_ADDR_EXP 68
23204: PUSH
23205: LD_INT 0
23207: ST_TO_ADDR
// sExp := false ;
23208: LD_ADDR_EXP 69
23212: PUSH
23213: LD_INT 0
23215: ST_TO_ADDR
// sDepot := false ;
23216: LD_ADDR_EXP 70
23220: PUSH
23221: LD_INT 0
23223: ST_TO_ADDR
// sFlag := false ;
23224: LD_ADDR_EXP 71
23228: PUSH
23229: LD_INT 0
23231: ST_TO_ADDR
// sKamikadze := false ;
23232: LD_ADDR_EXP 79
23236: PUSH
23237: LD_INT 0
23239: ST_TO_ADDR
// sTroll := false ;
23240: LD_ADDR_EXP 80
23244: PUSH
23245: LD_INT 0
23247: ST_TO_ADDR
// sSlow := false ;
23248: LD_ADDR_EXP 81
23252: PUSH
23253: LD_INT 0
23255: ST_TO_ADDR
// sLack := false ;
23256: LD_ADDR_EXP 82
23260: PUSH
23261: LD_INT 0
23263: ST_TO_ADDR
// sTank := false ;
23264: LD_ADDR_EXP 84
23268: PUSH
23269: LD_INT 0
23271: ST_TO_ADDR
// sRemote := false ;
23272: LD_ADDR_EXP 85
23276: PUSH
23277: LD_INT 0
23279: ST_TO_ADDR
// sPowell := false ;
23280: LD_ADDR_EXP 86
23284: PUSH
23285: LD_INT 0
23287: ST_TO_ADDR
// sTeleport := false ;
23288: LD_ADDR_EXP 89
23292: PUSH
23293: LD_INT 0
23295: ST_TO_ADDR
// sOilTower := false ;
23296: LD_ADDR_EXP 91
23300: PUSH
23301: LD_INT 0
23303: ST_TO_ADDR
// sShovel := false ;
23304: LD_ADDR_EXP 92
23308: PUSH
23309: LD_INT 0
23311: ST_TO_ADDR
// sSheik := false ;
23312: LD_ADDR_EXP 93
23316: PUSH
23317: LD_INT 0
23319: ST_TO_ADDR
// sEarthquake := false ;
23320: LD_ADDR_EXP 95
23324: PUSH
23325: LD_INT 0
23327: ST_TO_ADDR
// sAI := false ;
23328: LD_ADDR_EXP 96
23332: PUSH
23333: LD_INT 0
23335: ST_TO_ADDR
// sCargo := false ;
23336: LD_ADDR_EXP 99
23340: PUSH
23341: LD_INT 0
23343: ST_TO_ADDR
// sDLaser := false ;
23344: LD_ADDR_EXP 100
23348: PUSH
23349: LD_INT 0
23351: ST_TO_ADDR
// sExchange := false ;
23352: LD_ADDR_EXP 101
23356: PUSH
23357: LD_INT 0
23359: ST_TO_ADDR
// sFac := false ;
23360: LD_ADDR_EXP 102
23364: PUSH
23365: LD_INT 0
23367: ST_TO_ADDR
// sPower := false ;
23368: LD_ADDR_EXP 103
23372: PUSH
23373: LD_INT 0
23375: ST_TO_ADDR
// sRandom := false ;
23376: LD_ADDR_EXP 104
23380: PUSH
23381: LD_INT 0
23383: ST_TO_ADDR
// sShield := false ;
23384: LD_ADDR_EXP 105
23388: PUSH
23389: LD_INT 0
23391: ST_TO_ADDR
// sTime := false ;
23392: LD_ADDR_EXP 106
23396: PUSH
23397: LD_INT 0
23399: ST_TO_ADDR
// sTools := false ;
23400: LD_ADDR_EXP 107
23404: PUSH
23405: LD_INT 0
23407: ST_TO_ADDR
// sSold := false ;
23408: LD_ADDR_EXP 72
23412: PUSH
23413: LD_INT 0
23415: ST_TO_ADDR
// sDiff := false ;
23416: LD_ADDR_EXP 73
23420: PUSH
23421: LD_INT 0
23423: ST_TO_ADDR
// sFog := false ;
23424: LD_ADDR_EXP 76
23428: PUSH
23429: LD_INT 0
23431: ST_TO_ADDR
// sReset := false ;
23432: LD_ADDR_EXP 77
23436: PUSH
23437: LD_INT 0
23439: ST_TO_ADDR
// sSun := false ;
23440: LD_ADDR_EXP 78
23444: PUSH
23445: LD_INT 0
23447: ST_TO_ADDR
// sTiger := false ;
23448: LD_ADDR_EXP 74
23452: PUSH
23453: LD_INT 0
23455: ST_TO_ADDR
// sBomb := false ;
23456: LD_ADDR_EXP 75
23460: PUSH
23461: LD_INT 0
23463: ST_TO_ADDR
// sWound := false ;
23464: LD_ADDR_EXP 83
23468: PUSH
23469: LD_INT 0
23471: ST_TO_ADDR
// sBetray := false ;
23472: LD_ADDR_EXP 87
23476: PUSH
23477: LD_INT 0
23479: ST_TO_ADDR
// sContamin := false ;
23480: LD_ADDR_EXP 88
23484: PUSH
23485: LD_INT 0
23487: ST_TO_ADDR
// sOil := false ;
23488: LD_ADDR_EXP 90
23492: PUSH
23493: LD_INT 0
23495: ST_TO_ADDR
// sStu := false ;
23496: LD_ADDR_EXP 94
23500: PUSH
23501: LD_INT 0
23503: ST_TO_ADDR
// sBazooka := false ;
23504: LD_ADDR_EXP 97
23508: PUSH
23509: LD_INT 0
23511: ST_TO_ADDR
// sMortar := false ;
23512: LD_ADDR_EXP 98
23516: PUSH
23517: LD_INT 0
23519: ST_TO_ADDR
// sRanger := false ;
23520: LD_ADDR_EXP 108
23524: PUSH
23525: LD_INT 0
23527: ST_TO_ADDR
// sComputer := false ;
23528: LD_ADDR_EXP 109
23532: PUSH
23533: LD_INT 0
23535: ST_TO_ADDR
// s30 := false ;
23536: LD_ADDR_EXP 110
23540: PUSH
23541: LD_INT 0
23543: ST_TO_ADDR
// s60 := false ;
23544: LD_ADDR_EXP 111
23548: PUSH
23549: LD_INT 0
23551: ST_TO_ADDR
// end ;
23552: LD_VAR 0 1
23556: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
23557: LD_INT 0
23559: PPUSH
23560: PPUSH
23561: PPUSH
23562: PPUSH
23563: PPUSH
23564: PPUSH
23565: PPUSH
// result := [ ] ;
23566: LD_ADDR_VAR 0 2
23570: PUSH
23571: EMPTY
23572: ST_TO_ADDR
// if campaign_id = 1 then
23573: LD_OWVAR 69
23577: PUSH
23578: LD_INT 1
23580: EQUAL
23581: IFFALSE 26747
// begin case mission_number of 1 :
23583: LD_OWVAR 70
23587: PUSH
23588: LD_INT 1
23590: DOUBLE
23591: EQUAL
23592: IFTRUE 23596
23594: GO 23672
23596: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
23597: LD_ADDR_VAR 0 2
23601: PUSH
23602: LD_INT 2
23604: PUSH
23605: LD_INT 4
23607: PUSH
23608: LD_INT 11
23610: PUSH
23611: LD_INT 12
23613: PUSH
23614: LD_INT 15
23616: PUSH
23617: LD_INT 16
23619: PUSH
23620: LD_INT 22
23622: PUSH
23623: LD_INT 23
23625: PUSH
23626: LD_INT 26
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 101
23642: PUSH
23643: LD_INT 102
23645: PUSH
23646: LD_INT 106
23648: PUSH
23649: LD_INT 116
23651: PUSH
23652: LD_INT 117
23654: PUSH
23655: LD_INT 118
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: ST_TO_ADDR
23670: GO 26745
23672: LD_INT 2
23674: DOUBLE
23675: EQUAL
23676: IFTRUE 23680
23678: GO 23764
23680: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
23681: LD_ADDR_VAR 0 2
23685: PUSH
23686: LD_INT 2
23688: PUSH
23689: LD_INT 4
23691: PUSH
23692: LD_INT 11
23694: PUSH
23695: LD_INT 12
23697: PUSH
23698: LD_INT 15
23700: PUSH
23701: LD_INT 16
23703: PUSH
23704: LD_INT 22
23706: PUSH
23707: LD_INT 23
23709: PUSH
23710: LD_INT 26
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: PUSH
23724: LD_INT 101
23726: PUSH
23727: LD_INT 102
23729: PUSH
23730: LD_INT 105
23732: PUSH
23733: LD_INT 106
23735: PUSH
23736: LD_INT 108
23738: PUSH
23739: LD_INT 116
23741: PUSH
23742: LD_INT 117
23744: PUSH
23745: LD_INT 118
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: ST_TO_ADDR
23762: GO 26745
23764: LD_INT 3
23766: DOUBLE
23767: EQUAL
23768: IFTRUE 23772
23770: GO 23860
23772: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
23773: LD_ADDR_VAR 0 2
23777: PUSH
23778: LD_INT 2
23780: PUSH
23781: LD_INT 4
23783: PUSH
23784: LD_INT 5
23786: PUSH
23787: LD_INT 11
23789: PUSH
23790: LD_INT 12
23792: PUSH
23793: LD_INT 15
23795: PUSH
23796: LD_INT 16
23798: PUSH
23799: LD_INT 22
23801: PUSH
23802: LD_INT 26
23804: PUSH
23805: LD_INT 36
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: PUSH
23820: LD_INT 101
23822: PUSH
23823: LD_INT 102
23825: PUSH
23826: LD_INT 105
23828: PUSH
23829: LD_INT 106
23831: PUSH
23832: LD_INT 108
23834: PUSH
23835: LD_INT 116
23837: PUSH
23838: LD_INT 117
23840: PUSH
23841: LD_INT 118
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: ST_TO_ADDR
23858: GO 26745
23860: LD_INT 4
23862: DOUBLE
23863: EQUAL
23864: IFTRUE 23868
23866: GO 23964
23868: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
23869: LD_ADDR_VAR 0 2
23873: PUSH
23874: LD_INT 2
23876: PUSH
23877: LD_INT 4
23879: PUSH
23880: LD_INT 5
23882: PUSH
23883: LD_INT 8
23885: PUSH
23886: LD_INT 11
23888: PUSH
23889: LD_INT 12
23891: PUSH
23892: LD_INT 15
23894: PUSH
23895: LD_INT 16
23897: PUSH
23898: LD_INT 22
23900: PUSH
23901: LD_INT 23
23903: PUSH
23904: LD_INT 26
23906: PUSH
23907: LD_INT 36
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 101
23926: PUSH
23927: LD_INT 102
23929: PUSH
23930: LD_INT 105
23932: PUSH
23933: LD_INT 106
23935: PUSH
23936: LD_INT 108
23938: PUSH
23939: LD_INT 116
23941: PUSH
23942: LD_INT 117
23944: PUSH
23945: LD_INT 118
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: ST_TO_ADDR
23962: GO 26745
23964: LD_INT 5
23966: DOUBLE
23967: EQUAL
23968: IFTRUE 23972
23970: GO 24084
23972: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
23973: LD_ADDR_VAR 0 2
23977: PUSH
23978: LD_INT 2
23980: PUSH
23981: LD_INT 4
23983: PUSH
23984: LD_INT 5
23986: PUSH
23987: LD_INT 6
23989: PUSH
23990: LD_INT 8
23992: PUSH
23993: LD_INT 11
23995: PUSH
23996: LD_INT 12
23998: PUSH
23999: LD_INT 15
24001: PUSH
24002: LD_INT 16
24004: PUSH
24005: LD_INT 22
24007: PUSH
24008: LD_INT 23
24010: PUSH
24011: LD_INT 25
24013: PUSH
24014: LD_INT 26
24016: PUSH
24017: LD_INT 36
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: PUSH
24036: LD_INT 101
24038: PUSH
24039: LD_INT 102
24041: PUSH
24042: LD_INT 105
24044: PUSH
24045: LD_INT 106
24047: PUSH
24048: LD_INT 108
24050: PUSH
24051: LD_INT 109
24053: PUSH
24054: LD_INT 112
24056: PUSH
24057: LD_INT 116
24059: PUSH
24060: LD_INT 117
24062: PUSH
24063: LD_INT 118
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: ST_TO_ADDR
24082: GO 26745
24084: LD_INT 6
24086: DOUBLE
24087: EQUAL
24088: IFTRUE 24092
24090: GO 24224
24092: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
24093: LD_ADDR_VAR 0 2
24097: PUSH
24098: LD_INT 2
24100: PUSH
24101: LD_INT 4
24103: PUSH
24104: LD_INT 5
24106: PUSH
24107: LD_INT 6
24109: PUSH
24110: LD_INT 8
24112: PUSH
24113: LD_INT 11
24115: PUSH
24116: LD_INT 12
24118: PUSH
24119: LD_INT 15
24121: PUSH
24122: LD_INT 16
24124: PUSH
24125: LD_INT 20
24127: PUSH
24128: LD_INT 21
24130: PUSH
24131: LD_INT 22
24133: PUSH
24134: LD_INT 23
24136: PUSH
24137: LD_INT 25
24139: PUSH
24140: LD_INT 26
24142: PUSH
24143: LD_INT 30
24145: PUSH
24146: LD_INT 31
24148: PUSH
24149: LD_INT 32
24151: PUSH
24152: LD_INT 36
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 101
24178: PUSH
24179: LD_INT 102
24181: PUSH
24182: LD_INT 105
24184: PUSH
24185: LD_INT 106
24187: PUSH
24188: LD_INT 108
24190: PUSH
24191: LD_INT 109
24193: PUSH
24194: LD_INT 112
24196: PUSH
24197: LD_INT 116
24199: PUSH
24200: LD_INT 117
24202: PUSH
24203: LD_INT 118
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: ST_TO_ADDR
24222: GO 26745
24224: LD_INT 7
24226: DOUBLE
24227: EQUAL
24228: IFTRUE 24232
24230: GO 24344
24232: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
24233: LD_ADDR_VAR 0 2
24237: PUSH
24238: LD_INT 2
24240: PUSH
24241: LD_INT 4
24243: PUSH
24244: LD_INT 5
24246: PUSH
24247: LD_INT 7
24249: PUSH
24250: LD_INT 11
24252: PUSH
24253: LD_INT 12
24255: PUSH
24256: LD_INT 15
24258: PUSH
24259: LD_INT 16
24261: PUSH
24262: LD_INT 20
24264: PUSH
24265: LD_INT 21
24267: PUSH
24268: LD_INT 22
24270: PUSH
24271: LD_INT 23
24273: PUSH
24274: LD_INT 25
24276: PUSH
24277: LD_INT 26
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 101
24298: PUSH
24299: LD_INT 102
24301: PUSH
24302: LD_INT 103
24304: PUSH
24305: LD_INT 105
24307: PUSH
24308: LD_INT 106
24310: PUSH
24311: LD_INT 108
24313: PUSH
24314: LD_INT 112
24316: PUSH
24317: LD_INT 116
24319: PUSH
24320: LD_INT 117
24322: PUSH
24323: LD_INT 118
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: ST_TO_ADDR
24342: GO 26745
24344: LD_INT 8
24346: DOUBLE
24347: EQUAL
24348: IFTRUE 24352
24350: GO 24492
24352: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
24353: LD_ADDR_VAR 0 2
24357: PUSH
24358: LD_INT 2
24360: PUSH
24361: LD_INT 4
24363: PUSH
24364: LD_INT 5
24366: PUSH
24367: LD_INT 6
24369: PUSH
24370: LD_INT 7
24372: PUSH
24373: LD_INT 8
24375: PUSH
24376: LD_INT 11
24378: PUSH
24379: LD_INT 12
24381: PUSH
24382: LD_INT 15
24384: PUSH
24385: LD_INT 16
24387: PUSH
24388: LD_INT 20
24390: PUSH
24391: LD_INT 21
24393: PUSH
24394: LD_INT 22
24396: PUSH
24397: LD_INT 23
24399: PUSH
24400: LD_INT 25
24402: PUSH
24403: LD_INT 26
24405: PUSH
24406: LD_INT 30
24408: PUSH
24409: LD_INT 31
24411: PUSH
24412: LD_INT 32
24414: PUSH
24415: LD_INT 36
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 101
24442: PUSH
24443: LD_INT 102
24445: PUSH
24446: LD_INT 103
24448: PUSH
24449: LD_INT 105
24451: PUSH
24452: LD_INT 106
24454: PUSH
24455: LD_INT 108
24457: PUSH
24458: LD_INT 109
24460: PUSH
24461: LD_INT 112
24463: PUSH
24464: LD_INT 116
24466: PUSH
24467: LD_INT 117
24469: PUSH
24470: LD_INT 118
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: ST_TO_ADDR
24490: GO 26745
24492: LD_INT 9
24494: DOUBLE
24495: EQUAL
24496: IFTRUE 24500
24498: GO 24648
24500: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
24501: LD_ADDR_VAR 0 2
24505: PUSH
24506: LD_INT 2
24508: PUSH
24509: LD_INT 4
24511: PUSH
24512: LD_INT 5
24514: PUSH
24515: LD_INT 6
24517: PUSH
24518: LD_INT 7
24520: PUSH
24521: LD_INT 8
24523: PUSH
24524: LD_INT 11
24526: PUSH
24527: LD_INT 12
24529: PUSH
24530: LD_INT 15
24532: PUSH
24533: LD_INT 16
24535: PUSH
24536: LD_INT 20
24538: PUSH
24539: LD_INT 21
24541: PUSH
24542: LD_INT 22
24544: PUSH
24545: LD_INT 23
24547: PUSH
24548: LD_INT 25
24550: PUSH
24551: LD_INT 26
24553: PUSH
24554: LD_INT 28
24556: PUSH
24557: LD_INT 30
24559: PUSH
24560: LD_INT 31
24562: PUSH
24563: LD_INT 32
24565: PUSH
24566: LD_INT 36
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 101
24594: PUSH
24595: LD_INT 102
24597: PUSH
24598: LD_INT 103
24600: PUSH
24601: LD_INT 105
24603: PUSH
24604: LD_INT 106
24606: PUSH
24607: LD_INT 108
24609: PUSH
24610: LD_INT 109
24612: PUSH
24613: LD_INT 112
24615: PUSH
24616: LD_INT 114
24618: PUSH
24619: LD_INT 116
24621: PUSH
24622: LD_INT 117
24624: PUSH
24625: LD_INT 118
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: ST_TO_ADDR
24646: GO 26745
24648: LD_INT 10
24650: DOUBLE
24651: EQUAL
24652: IFTRUE 24656
24654: GO 24852
24656: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
24657: LD_ADDR_VAR 0 2
24661: PUSH
24662: LD_INT 2
24664: PUSH
24665: LD_INT 4
24667: PUSH
24668: LD_INT 5
24670: PUSH
24671: LD_INT 6
24673: PUSH
24674: LD_INT 7
24676: PUSH
24677: LD_INT 8
24679: PUSH
24680: LD_INT 9
24682: PUSH
24683: LD_INT 10
24685: PUSH
24686: LD_INT 11
24688: PUSH
24689: LD_INT 12
24691: PUSH
24692: LD_INT 13
24694: PUSH
24695: LD_INT 14
24697: PUSH
24698: LD_INT 15
24700: PUSH
24701: LD_INT 16
24703: PUSH
24704: LD_INT 17
24706: PUSH
24707: LD_INT 18
24709: PUSH
24710: LD_INT 19
24712: PUSH
24713: LD_INT 20
24715: PUSH
24716: LD_INT 21
24718: PUSH
24719: LD_INT 22
24721: PUSH
24722: LD_INT 23
24724: PUSH
24725: LD_INT 24
24727: PUSH
24728: LD_INT 25
24730: PUSH
24731: LD_INT 26
24733: PUSH
24734: LD_INT 28
24736: PUSH
24737: LD_INT 30
24739: PUSH
24740: LD_INT 31
24742: PUSH
24743: LD_INT 32
24745: PUSH
24746: LD_INT 36
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 101
24782: PUSH
24783: LD_INT 102
24785: PUSH
24786: LD_INT 103
24788: PUSH
24789: LD_INT 104
24791: PUSH
24792: LD_INT 105
24794: PUSH
24795: LD_INT 106
24797: PUSH
24798: LD_INT 107
24800: PUSH
24801: LD_INT 108
24803: PUSH
24804: LD_INT 109
24806: PUSH
24807: LD_INT 110
24809: PUSH
24810: LD_INT 111
24812: PUSH
24813: LD_INT 112
24815: PUSH
24816: LD_INT 114
24818: PUSH
24819: LD_INT 116
24821: PUSH
24822: LD_INT 117
24824: PUSH
24825: LD_INT 118
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: ST_TO_ADDR
24850: GO 26745
24852: LD_INT 11
24854: DOUBLE
24855: EQUAL
24856: IFTRUE 24860
24858: GO 25064
24860: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
24861: LD_ADDR_VAR 0 2
24865: PUSH
24866: LD_INT 2
24868: PUSH
24869: LD_INT 3
24871: PUSH
24872: LD_INT 4
24874: PUSH
24875: LD_INT 5
24877: PUSH
24878: LD_INT 6
24880: PUSH
24881: LD_INT 7
24883: PUSH
24884: LD_INT 8
24886: PUSH
24887: LD_INT 9
24889: PUSH
24890: LD_INT 10
24892: PUSH
24893: LD_INT 11
24895: PUSH
24896: LD_INT 12
24898: PUSH
24899: LD_INT 13
24901: PUSH
24902: LD_INT 14
24904: PUSH
24905: LD_INT 15
24907: PUSH
24908: LD_INT 16
24910: PUSH
24911: LD_INT 17
24913: PUSH
24914: LD_INT 18
24916: PUSH
24917: LD_INT 19
24919: PUSH
24920: LD_INT 20
24922: PUSH
24923: LD_INT 21
24925: PUSH
24926: LD_INT 22
24928: PUSH
24929: LD_INT 23
24931: PUSH
24932: LD_INT 24
24934: PUSH
24935: LD_INT 25
24937: PUSH
24938: LD_INT 26
24940: PUSH
24941: LD_INT 28
24943: PUSH
24944: LD_INT 30
24946: PUSH
24947: LD_INT 31
24949: PUSH
24950: LD_INT 32
24952: PUSH
24953: LD_INT 34
24955: PUSH
24956: LD_INT 36
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 101
24994: PUSH
24995: LD_INT 102
24997: PUSH
24998: LD_INT 103
25000: PUSH
25001: LD_INT 104
25003: PUSH
25004: LD_INT 105
25006: PUSH
25007: LD_INT 106
25009: PUSH
25010: LD_INT 107
25012: PUSH
25013: LD_INT 108
25015: PUSH
25016: LD_INT 109
25018: PUSH
25019: LD_INT 110
25021: PUSH
25022: LD_INT 111
25024: PUSH
25025: LD_INT 112
25027: PUSH
25028: LD_INT 114
25030: PUSH
25031: LD_INT 116
25033: PUSH
25034: LD_INT 117
25036: PUSH
25037: LD_INT 118
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: ST_TO_ADDR
25062: GO 26745
25064: LD_INT 12
25066: DOUBLE
25067: EQUAL
25068: IFTRUE 25072
25070: GO 25292
25072: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
25073: LD_ADDR_VAR 0 2
25077: PUSH
25078: LD_INT 1
25080: PUSH
25081: LD_INT 2
25083: PUSH
25084: LD_INT 3
25086: PUSH
25087: LD_INT 4
25089: PUSH
25090: LD_INT 5
25092: PUSH
25093: LD_INT 6
25095: PUSH
25096: LD_INT 7
25098: PUSH
25099: LD_INT 8
25101: PUSH
25102: LD_INT 9
25104: PUSH
25105: LD_INT 10
25107: PUSH
25108: LD_INT 11
25110: PUSH
25111: LD_INT 12
25113: PUSH
25114: LD_INT 13
25116: PUSH
25117: LD_INT 14
25119: PUSH
25120: LD_INT 15
25122: PUSH
25123: LD_INT 16
25125: PUSH
25126: LD_INT 17
25128: PUSH
25129: LD_INT 18
25131: PUSH
25132: LD_INT 19
25134: PUSH
25135: LD_INT 20
25137: PUSH
25138: LD_INT 21
25140: PUSH
25141: LD_INT 22
25143: PUSH
25144: LD_INT 23
25146: PUSH
25147: LD_INT 24
25149: PUSH
25150: LD_INT 25
25152: PUSH
25153: LD_INT 26
25155: PUSH
25156: LD_INT 27
25158: PUSH
25159: LD_INT 28
25161: PUSH
25162: LD_INT 30
25164: PUSH
25165: LD_INT 31
25167: PUSH
25168: LD_INT 32
25170: PUSH
25171: LD_INT 33
25173: PUSH
25174: LD_INT 34
25176: PUSH
25177: LD_INT 36
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 101
25218: PUSH
25219: LD_INT 102
25221: PUSH
25222: LD_INT 103
25224: PUSH
25225: LD_INT 104
25227: PUSH
25228: LD_INT 105
25230: PUSH
25231: LD_INT 106
25233: PUSH
25234: LD_INT 107
25236: PUSH
25237: LD_INT 108
25239: PUSH
25240: LD_INT 109
25242: PUSH
25243: LD_INT 110
25245: PUSH
25246: LD_INT 111
25248: PUSH
25249: LD_INT 112
25251: PUSH
25252: LD_INT 113
25254: PUSH
25255: LD_INT 114
25257: PUSH
25258: LD_INT 116
25260: PUSH
25261: LD_INT 117
25263: PUSH
25264: LD_INT 118
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: ST_TO_ADDR
25290: GO 26745
25292: LD_INT 13
25294: DOUBLE
25295: EQUAL
25296: IFTRUE 25300
25298: GO 25508
25300: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
25301: LD_ADDR_VAR 0 2
25305: PUSH
25306: LD_INT 1
25308: PUSH
25309: LD_INT 2
25311: PUSH
25312: LD_INT 3
25314: PUSH
25315: LD_INT 4
25317: PUSH
25318: LD_INT 5
25320: PUSH
25321: LD_INT 8
25323: PUSH
25324: LD_INT 9
25326: PUSH
25327: LD_INT 10
25329: PUSH
25330: LD_INT 11
25332: PUSH
25333: LD_INT 12
25335: PUSH
25336: LD_INT 14
25338: PUSH
25339: LD_INT 15
25341: PUSH
25342: LD_INT 16
25344: PUSH
25345: LD_INT 17
25347: PUSH
25348: LD_INT 18
25350: PUSH
25351: LD_INT 19
25353: PUSH
25354: LD_INT 20
25356: PUSH
25357: LD_INT 21
25359: PUSH
25360: LD_INT 22
25362: PUSH
25363: LD_INT 23
25365: PUSH
25366: LD_INT 24
25368: PUSH
25369: LD_INT 25
25371: PUSH
25372: LD_INT 26
25374: PUSH
25375: LD_INT 27
25377: PUSH
25378: LD_INT 28
25380: PUSH
25381: LD_INT 30
25383: PUSH
25384: LD_INT 31
25386: PUSH
25387: LD_INT 32
25389: PUSH
25390: LD_INT 33
25392: PUSH
25393: LD_INT 34
25395: PUSH
25396: LD_INT 36
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 101
25434: PUSH
25435: LD_INT 102
25437: PUSH
25438: LD_INT 103
25440: PUSH
25441: LD_INT 104
25443: PUSH
25444: LD_INT 105
25446: PUSH
25447: LD_INT 106
25449: PUSH
25450: LD_INT 107
25452: PUSH
25453: LD_INT 108
25455: PUSH
25456: LD_INT 109
25458: PUSH
25459: LD_INT 110
25461: PUSH
25462: LD_INT 111
25464: PUSH
25465: LD_INT 112
25467: PUSH
25468: LD_INT 113
25470: PUSH
25471: LD_INT 114
25473: PUSH
25474: LD_INT 116
25476: PUSH
25477: LD_INT 117
25479: PUSH
25480: LD_INT 118
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: ST_TO_ADDR
25506: GO 26745
25508: LD_INT 14
25510: DOUBLE
25511: EQUAL
25512: IFTRUE 25516
25514: GO 25740
25516: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
25517: LD_ADDR_VAR 0 2
25521: PUSH
25522: LD_INT 1
25524: PUSH
25525: LD_INT 2
25527: PUSH
25528: LD_INT 3
25530: PUSH
25531: LD_INT 4
25533: PUSH
25534: LD_INT 5
25536: PUSH
25537: LD_INT 6
25539: PUSH
25540: LD_INT 7
25542: PUSH
25543: LD_INT 8
25545: PUSH
25546: LD_INT 9
25548: PUSH
25549: LD_INT 10
25551: PUSH
25552: LD_INT 11
25554: PUSH
25555: LD_INT 12
25557: PUSH
25558: LD_INT 13
25560: PUSH
25561: LD_INT 14
25563: PUSH
25564: LD_INT 15
25566: PUSH
25567: LD_INT 16
25569: PUSH
25570: LD_INT 17
25572: PUSH
25573: LD_INT 18
25575: PUSH
25576: LD_INT 19
25578: PUSH
25579: LD_INT 20
25581: PUSH
25582: LD_INT 21
25584: PUSH
25585: LD_INT 22
25587: PUSH
25588: LD_INT 23
25590: PUSH
25591: LD_INT 24
25593: PUSH
25594: LD_INT 25
25596: PUSH
25597: LD_INT 26
25599: PUSH
25600: LD_INT 27
25602: PUSH
25603: LD_INT 28
25605: PUSH
25606: LD_INT 29
25608: PUSH
25609: LD_INT 30
25611: PUSH
25612: LD_INT 31
25614: PUSH
25615: LD_INT 32
25617: PUSH
25618: LD_INT 33
25620: PUSH
25621: LD_INT 34
25623: PUSH
25624: LD_INT 36
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 101
25666: PUSH
25667: LD_INT 102
25669: PUSH
25670: LD_INT 103
25672: PUSH
25673: LD_INT 104
25675: PUSH
25676: LD_INT 105
25678: PUSH
25679: LD_INT 106
25681: PUSH
25682: LD_INT 107
25684: PUSH
25685: LD_INT 108
25687: PUSH
25688: LD_INT 109
25690: PUSH
25691: LD_INT 110
25693: PUSH
25694: LD_INT 111
25696: PUSH
25697: LD_INT 112
25699: PUSH
25700: LD_INT 113
25702: PUSH
25703: LD_INT 114
25705: PUSH
25706: LD_INT 116
25708: PUSH
25709: LD_INT 117
25711: PUSH
25712: LD_INT 118
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: ST_TO_ADDR
25738: GO 26745
25740: LD_INT 15
25742: DOUBLE
25743: EQUAL
25744: IFTRUE 25748
25746: GO 25972
25748: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
25749: LD_ADDR_VAR 0 2
25753: PUSH
25754: LD_INT 1
25756: PUSH
25757: LD_INT 2
25759: PUSH
25760: LD_INT 3
25762: PUSH
25763: LD_INT 4
25765: PUSH
25766: LD_INT 5
25768: PUSH
25769: LD_INT 6
25771: PUSH
25772: LD_INT 7
25774: PUSH
25775: LD_INT 8
25777: PUSH
25778: LD_INT 9
25780: PUSH
25781: LD_INT 10
25783: PUSH
25784: LD_INT 11
25786: PUSH
25787: LD_INT 12
25789: PUSH
25790: LD_INT 13
25792: PUSH
25793: LD_INT 14
25795: PUSH
25796: LD_INT 15
25798: PUSH
25799: LD_INT 16
25801: PUSH
25802: LD_INT 17
25804: PUSH
25805: LD_INT 18
25807: PUSH
25808: LD_INT 19
25810: PUSH
25811: LD_INT 20
25813: PUSH
25814: LD_INT 21
25816: PUSH
25817: LD_INT 22
25819: PUSH
25820: LD_INT 23
25822: PUSH
25823: LD_INT 24
25825: PUSH
25826: LD_INT 25
25828: PUSH
25829: LD_INT 26
25831: PUSH
25832: LD_INT 27
25834: PUSH
25835: LD_INT 28
25837: PUSH
25838: LD_INT 29
25840: PUSH
25841: LD_INT 30
25843: PUSH
25844: LD_INT 31
25846: PUSH
25847: LD_INT 32
25849: PUSH
25850: LD_INT 33
25852: PUSH
25853: LD_INT 34
25855: PUSH
25856: LD_INT 36
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 101
25898: PUSH
25899: LD_INT 102
25901: PUSH
25902: LD_INT 103
25904: PUSH
25905: LD_INT 104
25907: PUSH
25908: LD_INT 105
25910: PUSH
25911: LD_INT 106
25913: PUSH
25914: LD_INT 107
25916: PUSH
25917: LD_INT 108
25919: PUSH
25920: LD_INT 109
25922: PUSH
25923: LD_INT 110
25925: PUSH
25926: LD_INT 111
25928: PUSH
25929: LD_INT 112
25931: PUSH
25932: LD_INT 113
25934: PUSH
25935: LD_INT 114
25937: PUSH
25938: LD_INT 116
25940: PUSH
25941: LD_INT 117
25943: PUSH
25944: LD_INT 118
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: ST_TO_ADDR
25970: GO 26745
25972: LD_INT 16
25974: DOUBLE
25975: EQUAL
25976: IFTRUE 25980
25978: GO 26116
25980: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
25981: LD_ADDR_VAR 0 2
25985: PUSH
25986: LD_INT 2
25988: PUSH
25989: LD_INT 4
25991: PUSH
25992: LD_INT 5
25994: PUSH
25995: LD_INT 7
25997: PUSH
25998: LD_INT 11
26000: PUSH
26001: LD_INT 12
26003: PUSH
26004: LD_INT 15
26006: PUSH
26007: LD_INT 16
26009: PUSH
26010: LD_INT 20
26012: PUSH
26013: LD_INT 21
26015: PUSH
26016: LD_INT 22
26018: PUSH
26019: LD_INT 23
26021: PUSH
26022: LD_INT 25
26024: PUSH
26025: LD_INT 26
26027: PUSH
26028: LD_INT 30
26030: PUSH
26031: LD_INT 31
26033: PUSH
26034: LD_INT 32
26036: PUSH
26037: LD_INT 33
26039: PUSH
26040: LD_INT 34
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 101
26066: PUSH
26067: LD_INT 102
26069: PUSH
26070: LD_INT 103
26072: PUSH
26073: LD_INT 106
26075: PUSH
26076: LD_INT 108
26078: PUSH
26079: LD_INT 112
26081: PUSH
26082: LD_INT 113
26084: PUSH
26085: LD_INT 114
26087: PUSH
26088: LD_INT 116
26090: PUSH
26091: LD_INT 117
26093: PUSH
26094: LD_INT 118
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: ST_TO_ADDR
26114: GO 26745
26116: LD_INT 17
26118: DOUBLE
26119: EQUAL
26120: IFTRUE 26124
26122: GO 26348
26124: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
26125: LD_ADDR_VAR 0 2
26129: PUSH
26130: LD_INT 1
26132: PUSH
26133: LD_INT 2
26135: PUSH
26136: LD_INT 3
26138: PUSH
26139: LD_INT 4
26141: PUSH
26142: LD_INT 5
26144: PUSH
26145: LD_INT 6
26147: PUSH
26148: LD_INT 7
26150: PUSH
26151: LD_INT 8
26153: PUSH
26154: LD_INT 9
26156: PUSH
26157: LD_INT 10
26159: PUSH
26160: LD_INT 11
26162: PUSH
26163: LD_INT 12
26165: PUSH
26166: LD_INT 13
26168: PUSH
26169: LD_INT 14
26171: PUSH
26172: LD_INT 15
26174: PUSH
26175: LD_INT 16
26177: PUSH
26178: LD_INT 17
26180: PUSH
26181: LD_INT 18
26183: PUSH
26184: LD_INT 19
26186: PUSH
26187: LD_INT 20
26189: PUSH
26190: LD_INT 21
26192: PUSH
26193: LD_INT 22
26195: PUSH
26196: LD_INT 23
26198: PUSH
26199: LD_INT 24
26201: PUSH
26202: LD_INT 25
26204: PUSH
26205: LD_INT 26
26207: PUSH
26208: LD_INT 27
26210: PUSH
26211: LD_INT 28
26213: PUSH
26214: LD_INT 29
26216: PUSH
26217: LD_INT 30
26219: PUSH
26220: LD_INT 31
26222: PUSH
26223: LD_INT 32
26225: PUSH
26226: LD_INT 33
26228: PUSH
26229: LD_INT 34
26231: PUSH
26232: LD_INT 36
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 101
26274: PUSH
26275: LD_INT 102
26277: PUSH
26278: LD_INT 103
26280: PUSH
26281: LD_INT 104
26283: PUSH
26284: LD_INT 105
26286: PUSH
26287: LD_INT 106
26289: PUSH
26290: LD_INT 107
26292: PUSH
26293: LD_INT 108
26295: PUSH
26296: LD_INT 109
26298: PUSH
26299: LD_INT 110
26301: PUSH
26302: LD_INT 111
26304: PUSH
26305: LD_INT 112
26307: PUSH
26308: LD_INT 113
26310: PUSH
26311: LD_INT 114
26313: PUSH
26314: LD_INT 116
26316: PUSH
26317: LD_INT 117
26319: PUSH
26320: LD_INT 118
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: ST_TO_ADDR
26346: GO 26745
26348: LD_INT 18
26350: DOUBLE
26351: EQUAL
26352: IFTRUE 26356
26354: GO 26504
26356: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
26357: LD_ADDR_VAR 0 2
26361: PUSH
26362: LD_INT 2
26364: PUSH
26365: LD_INT 4
26367: PUSH
26368: LD_INT 5
26370: PUSH
26371: LD_INT 7
26373: PUSH
26374: LD_INT 11
26376: PUSH
26377: LD_INT 12
26379: PUSH
26380: LD_INT 15
26382: PUSH
26383: LD_INT 16
26385: PUSH
26386: LD_INT 20
26388: PUSH
26389: LD_INT 21
26391: PUSH
26392: LD_INT 22
26394: PUSH
26395: LD_INT 23
26397: PUSH
26398: LD_INT 25
26400: PUSH
26401: LD_INT 26
26403: PUSH
26404: LD_INT 30
26406: PUSH
26407: LD_INT 31
26409: PUSH
26410: LD_INT 32
26412: PUSH
26413: LD_INT 33
26415: PUSH
26416: LD_INT 34
26418: PUSH
26419: LD_INT 35
26421: PUSH
26422: LD_INT 36
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 101
26450: PUSH
26451: LD_INT 102
26453: PUSH
26454: LD_INT 103
26456: PUSH
26457: LD_INT 106
26459: PUSH
26460: LD_INT 108
26462: PUSH
26463: LD_INT 112
26465: PUSH
26466: LD_INT 113
26468: PUSH
26469: LD_INT 114
26471: PUSH
26472: LD_INT 115
26474: PUSH
26475: LD_INT 116
26477: PUSH
26478: LD_INT 117
26480: PUSH
26481: LD_INT 118
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: ST_TO_ADDR
26502: GO 26745
26504: LD_INT 19
26506: DOUBLE
26507: EQUAL
26508: IFTRUE 26512
26510: GO 26744
26512: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
26513: LD_ADDR_VAR 0 2
26517: PUSH
26518: LD_INT 1
26520: PUSH
26521: LD_INT 2
26523: PUSH
26524: LD_INT 3
26526: PUSH
26527: LD_INT 4
26529: PUSH
26530: LD_INT 5
26532: PUSH
26533: LD_INT 6
26535: PUSH
26536: LD_INT 7
26538: PUSH
26539: LD_INT 8
26541: PUSH
26542: LD_INT 9
26544: PUSH
26545: LD_INT 10
26547: PUSH
26548: LD_INT 11
26550: PUSH
26551: LD_INT 12
26553: PUSH
26554: LD_INT 13
26556: PUSH
26557: LD_INT 14
26559: PUSH
26560: LD_INT 15
26562: PUSH
26563: LD_INT 16
26565: PUSH
26566: LD_INT 17
26568: PUSH
26569: LD_INT 18
26571: PUSH
26572: LD_INT 19
26574: PUSH
26575: LD_INT 20
26577: PUSH
26578: LD_INT 21
26580: PUSH
26581: LD_INT 22
26583: PUSH
26584: LD_INT 23
26586: PUSH
26587: LD_INT 24
26589: PUSH
26590: LD_INT 25
26592: PUSH
26593: LD_INT 26
26595: PUSH
26596: LD_INT 27
26598: PUSH
26599: LD_INT 28
26601: PUSH
26602: LD_INT 29
26604: PUSH
26605: LD_INT 30
26607: PUSH
26608: LD_INT 31
26610: PUSH
26611: LD_INT 32
26613: PUSH
26614: LD_INT 33
26616: PUSH
26617: LD_INT 34
26619: PUSH
26620: LD_INT 35
26622: PUSH
26623: LD_INT 36
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 101
26666: PUSH
26667: LD_INT 102
26669: PUSH
26670: LD_INT 103
26672: PUSH
26673: LD_INT 104
26675: PUSH
26676: LD_INT 105
26678: PUSH
26679: LD_INT 106
26681: PUSH
26682: LD_INT 107
26684: PUSH
26685: LD_INT 108
26687: PUSH
26688: LD_INT 109
26690: PUSH
26691: LD_INT 110
26693: PUSH
26694: LD_INT 111
26696: PUSH
26697: LD_INT 112
26699: PUSH
26700: LD_INT 113
26702: PUSH
26703: LD_INT 114
26705: PUSH
26706: LD_INT 115
26708: PUSH
26709: LD_INT 116
26711: PUSH
26712: LD_INT 117
26714: PUSH
26715: LD_INT 118
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: ST_TO_ADDR
26742: GO 26745
26744: POP
// end else
26745: GO 26976
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
26747: LD_ADDR_VAR 0 2
26751: PUSH
26752: LD_INT 1
26754: PUSH
26755: LD_INT 2
26757: PUSH
26758: LD_INT 3
26760: PUSH
26761: LD_INT 4
26763: PUSH
26764: LD_INT 5
26766: PUSH
26767: LD_INT 6
26769: PUSH
26770: LD_INT 7
26772: PUSH
26773: LD_INT 8
26775: PUSH
26776: LD_INT 9
26778: PUSH
26779: LD_INT 10
26781: PUSH
26782: LD_INT 11
26784: PUSH
26785: LD_INT 12
26787: PUSH
26788: LD_INT 13
26790: PUSH
26791: LD_INT 14
26793: PUSH
26794: LD_INT 15
26796: PUSH
26797: LD_INT 16
26799: PUSH
26800: LD_INT 17
26802: PUSH
26803: LD_INT 18
26805: PUSH
26806: LD_INT 19
26808: PUSH
26809: LD_INT 20
26811: PUSH
26812: LD_INT 21
26814: PUSH
26815: LD_INT 22
26817: PUSH
26818: LD_INT 23
26820: PUSH
26821: LD_INT 24
26823: PUSH
26824: LD_INT 25
26826: PUSH
26827: LD_INT 26
26829: PUSH
26830: LD_INT 27
26832: PUSH
26833: LD_INT 28
26835: PUSH
26836: LD_INT 29
26838: PUSH
26839: LD_INT 30
26841: PUSH
26842: LD_INT 31
26844: PUSH
26845: LD_INT 32
26847: PUSH
26848: LD_INT 33
26850: PUSH
26851: LD_INT 34
26853: PUSH
26854: LD_INT 35
26856: PUSH
26857: LD_INT 36
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 101
26900: PUSH
26901: LD_INT 102
26903: PUSH
26904: LD_INT 103
26906: PUSH
26907: LD_INT 104
26909: PUSH
26910: LD_INT 105
26912: PUSH
26913: LD_INT 106
26915: PUSH
26916: LD_INT 107
26918: PUSH
26919: LD_INT 108
26921: PUSH
26922: LD_INT 109
26924: PUSH
26925: LD_INT 110
26927: PUSH
26928: LD_INT 111
26930: PUSH
26931: LD_INT 112
26933: PUSH
26934: LD_INT 113
26936: PUSH
26937: LD_INT 114
26939: PUSH
26940: LD_INT 115
26942: PUSH
26943: LD_INT 116
26945: PUSH
26946: LD_INT 117
26948: PUSH
26949: LD_INT 118
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: ST_TO_ADDR
// if result then
26976: LD_VAR 0 2
26980: IFFALSE 27766
// begin normal :=  ;
26982: LD_ADDR_VAR 0 5
26986: PUSH
26987: LD_STRING 
26989: ST_TO_ADDR
// hardcore :=  ;
26990: LD_ADDR_VAR 0 6
26994: PUSH
26995: LD_STRING 
26997: ST_TO_ADDR
// active :=  ;
26998: LD_ADDR_VAR 0 7
27002: PUSH
27003: LD_STRING 
27005: ST_TO_ADDR
// for i = 1 to normalCounter do
27006: LD_ADDR_VAR 0 8
27010: PUSH
27011: DOUBLE
27012: LD_INT 1
27014: DEC
27015: ST_TO_ADDR
27016: LD_EXP 56
27020: PUSH
27021: FOR_TO
27022: IFFALSE 27123
// begin tmp := 0 ;
27024: LD_ADDR_VAR 0 3
27028: PUSH
27029: LD_STRING 0
27031: ST_TO_ADDR
// if result [ 1 ] then
27032: LD_VAR 0 2
27036: PUSH
27037: LD_INT 1
27039: ARRAY
27040: IFFALSE 27105
// if result [ 1 ] [ 1 ] = i then
27042: LD_VAR 0 2
27046: PUSH
27047: LD_INT 1
27049: ARRAY
27050: PUSH
27051: LD_INT 1
27053: ARRAY
27054: PUSH
27055: LD_VAR 0 8
27059: EQUAL
27060: IFFALSE 27105
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
27062: LD_ADDR_VAR 0 2
27066: PUSH
27067: LD_VAR 0 2
27071: PPUSH
27072: LD_INT 1
27074: PPUSH
27075: LD_VAR 0 2
27079: PUSH
27080: LD_INT 1
27082: ARRAY
27083: PPUSH
27084: LD_INT 1
27086: PPUSH
27087: CALL_OW 3
27091: PPUSH
27092: CALL_OW 1
27096: ST_TO_ADDR
// tmp := 1 ;
27097: LD_ADDR_VAR 0 3
27101: PUSH
27102: LD_STRING 1
27104: ST_TO_ADDR
// end ; normal := normal & tmp ;
27105: LD_ADDR_VAR 0 5
27109: PUSH
27110: LD_VAR 0 5
27114: PUSH
27115: LD_VAR 0 3
27119: STR
27120: ST_TO_ADDR
// end ;
27121: GO 27021
27123: POP
27124: POP
// for i = 1 to hardcoreCounter do
27125: LD_ADDR_VAR 0 8
27129: PUSH
27130: DOUBLE
27131: LD_INT 1
27133: DEC
27134: ST_TO_ADDR
27135: LD_EXP 57
27139: PUSH
27140: FOR_TO
27141: IFFALSE 27246
// begin tmp := 0 ;
27143: LD_ADDR_VAR 0 3
27147: PUSH
27148: LD_STRING 0
27150: ST_TO_ADDR
// if result [ 2 ] then
27151: LD_VAR 0 2
27155: PUSH
27156: LD_INT 2
27158: ARRAY
27159: IFFALSE 27228
// if result [ 2 ] [ 1 ] = 100 + i then
27161: LD_VAR 0 2
27165: PUSH
27166: LD_INT 2
27168: ARRAY
27169: PUSH
27170: LD_INT 1
27172: ARRAY
27173: PUSH
27174: LD_INT 100
27176: PUSH
27177: LD_VAR 0 8
27181: PLUS
27182: EQUAL
27183: IFFALSE 27228
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
27185: LD_ADDR_VAR 0 2
27189: PUSH
27190: LD_VAR 0 2
27194: PPUSH
27195: LD_INT 2
27197: PPUSH
27198: LD_VAR 0 2
27202: PUSH
27203: LD_INT 2
27205: ARRAY
27206: PPUSH
27207: LD_INT 1
27209: PPUSH
27210: CALL_OW 3
27214: PPUSH
27215: CALL_OW 1
27219: ST_TO_ADDR
// tmp := 1 ;
27220: LD_ADDR_VAR 0 3
27224: PUSH
27225: LD_STRING 1
27227: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
27228: LD_ADDR_VAR 0 6
27232: PUSH
27233: LD_VAR 0 6
27237: PUSH
27238: LD_VAR 0 3
27242: STR
27243: ST_TO_ADDR
// end ;
27244: GO 27140
27246: POP
27247: POP
// if isGameLoad then
27248: LD_VAR 0 1
27252: IFFALSE 27727
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
27254: LD_ADDR_VAR 0 4
27258: PUSH
27259: LD_EXP 60
27263: PUSH
27264: LD_EXP 59
27268: PUSH
27269: LD_EXP 61
27273: PUSH
27274: LD_EXP 58
27278: PUSH
27279: LD_EXP 62
27283: PUSH
27284: LD_EXP 63
27288: PUSH
27289: LD_EXP 64
27293: PUSH
27294: LD_EXP 65
27298: PUSH
27299: LD_EXP 66
27303: PUSH
27304: LD_EXP 67
27308: PUSH
27309: LD_EXP 68
27313: PUSH
27314: LD_EXP 69
27318: PUSH
27319: LD_EXP 70
27323: PUSH
27324: LD_EXP 71
27328: PUSH
27329: LD_EXP 79
27333: PUSH
27334: LD_EXP 80
27338: PUSH
27339: LD_EXP 81
27343: PUSH
27344: LD_EXP 82
27348: PUSH
27349: LD_EXP 84
27353: PUSH
27354: LD_EXP 85
27358: PUSH
27359: LD_EXP 86
27363: PUSH
27364: LD_EXP 89
27368: PUSH
27369: LD_EXP 91
27373: PUSH
27374: LD_EXP 92
27378: PUSH
27379: LD_EXP 93
27383: PUSH
27384: LD_EXP 95
27388: PUSH
27389: LD_EXP 96
27393: PUSH
27394: LD_EXP 99
27398: PUSH
27399: LD_EXP 100
27403: PUSH
27404: LD_EXP 101
27408: PUSH
27409: LD_EXP 102
27413: PUSH
27414: LD_EXP 103
27418: PUSH
27419: LD_EXP 104
27423: PUSH
27424: LD_EXP 105
27428: PUSH
27429: LD_EXP 106
27433: PUSH
27434: LD_EXP 107
27438: PUSH
27439: LD_EXP 72
27443: PUSH
27444: LD_EXP 73
27448: PUSH
27449: LD_EXP 76
27453: PUSH
27454: LD_EXP 77
27458: PUSH
27459: LD_EXP 78
27463: PUSH
27464: LD_EXP 74
27468: PUSH
27469: LD_EXP 75
27473: PUSH
27474: LD_EXP 83
27478: PUSH
27479: LD_EXP 87
27483: PUSH
27484: LD_EXP 88
27488: PUSH
27489: LD_EXP 90
27493: PUSH
27494: LD_EXP 94
27498: PUSH
27499: LD_EXP 97
27503: PUSH
27504: LD_EXP 98
27508: PUSH
27509: LD_EXP 108
27513: PUSH
27514: LD_EXP 109
27518: PUSH
27519: LD_EXP 110
27523: PUSH
27524: LD_EXP 111
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: ST_TO_ADDR
// tmp :=  ;
27585: LD_ADDR_VAR 0 3
27589: PUSH
27590: LD_STRING 
27592: ST_TO_ADDR
// for i = 1 to normalCounter do
27593: LD_ADDR_VAR 0 8
27597: PUSH
27598: DOUBLE
27599: LD_INT 1
27601: DEC
27602: ST_TO_ADDR
27603: LD_EXP 56
27607: PUSH
27608: FOR_TO
27609: IFFALSE 27645
// begin if flags [ i ] then
27611: LD_VAR 0 4
27615: PUSH
27616: LD_VAR 0 8
27620: ARRAY
27621: IFFALSE 27643
// tmp := tmp & i & ; ;
27623: LD_ADDR_VAR 0 3
27627: PUSH
27628: LD_VAR 0 3
27632: PUSH
27633: LD_VAR 0 8
27637: STR
27638: PUSH
27639: LD_STRING ;
27641: STR
27642: ST_TO_ADDR
// end ;
27643: GO 27608
27645: POP
27646: POP
// for i = 1 to hardcoreCounter do
27647: LD_ADDR_VAR 0 8
27651: PUSH
27652: DOUBLE
27653: LD_INT 1
27655: DEC
27656: ST_TO_ADDR
27657: LD_EXP 57
27661: PUSH
27662: FOR_TO
27663: IFFALSE 27709
// begin if flags [ normalCounter + i ] then
27665: LD_VAR 0 4
27669: PUSH
27670: LD_EXP 56
27674: PUSH
27675: LD_VAR 0 8
27679: PLUS
27680: ARRAY
27681: IFFALSE 27707
// tmp := tmp & ( 100 + i ) & ; ;
27683: LD_ADDR_VAR 0 3
27687: PUSH
27688: LD_VAR 0 3
27692: PUSH
27693: LD_INT 100
27695: PUSH
27696: LD_VAR 0 8
27700: PLUS
27701: STR
27702: PUSH
27703: LD_STRING ;
27705: STR
27706: ST_TO_ADDR
// end ;
27707: GO 27662
27709: POP
27710: POP
// if tmp then
27711: LD_VAR 0 3
27715: IFFALSE 27727
// active := tmp ;
27717: LD_ADDR_VAR 0 7
27721: PUSH
27722: LD_VAR 0 3
27726: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
27727: LD_STRING getStreamItemsFromMission("
27729: PUSH
27730: LD_VAR 0 5
27734: STR
27735: PUSH
27736: LD_STRING ","
27738: STR
27739: PUSH
27740: LD_VAR 0 6
27744: STR
27745: PUSH
27746: LD_STRING ","
27748: STR
27749: PUSH
27750: LD_VAR 0 7
27754: STR
27755: PUSH
27756: LD_STRING ")
27758: STR
27759: PPUSH
27760: CALL_OW 559
// end else
27764: GO 27773
// ToLua ( getStreamItemsFromMission("","","") ) ;
27766: LD_STRING getStreamItemsFromMission("","","")
27768: PPUSH
27769: CALL_OW 559
// end ;
27773: LD_VAR 0 2
27777: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
27778: LD_EXP 55
27782: IFFALSE 27790
27784: PUSH
27785: LD_EXP 60
27789: AND
27790: IFFALSE 27914
27792: GO 27794
27794: DISABLE
27795: LD_INT 0
27797: PPUSH
27798: PPUSH
// begin enable ;
27799: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
27800: LD_ADDR_VAR 0 2
27804: PUSH
27805: LD_INT 22
27807: PUSH
27808: LD_OWVAR 2
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 2
27819: PUSH
27820: LD_INT 34
27822: PUSH
27823: LD_INT 7
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 34
27832: PUSH
27833: LD_INT 45
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 34
27842: PUSH
27843: LD_INT 28
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 34
27852: PUSH
27853: LD_INT 47
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PPUSH
27871: CALL_OW 69
27875: ST_TO_ADDR
// if not tmp then
27876: LD_VAR 0 2
27880: NOT
27881: IFFALSE 27885
// exit ;
27883: GO 27914
// for i in tmp do
27885: LD_ADDR_VAR 0 1
27889: PUSH
27890: LD_VAR 0 2
27894: PUSH
27895: FOR_IN
27896: IFFALSE 27912
// begin SetLives ( i , 0 ) ;
27898: LD_VAR 0 1
27902: PPUSH
27903: LD_INT 0
27905: PPUSH
27906: CALL_OW 234
// end ;
27910: GO 27895
27912: POP
27913: POP
// end ;
27914: PPOPN 2
27916: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
27917: LD_EXP 55
27921: IFFALSE 27929
27923: PUSH
27924: LD_EXP 61
27928: AND
27929: IFFALSE 28013
27931: GO 27933
27933: DISABLE
27934: LD_INT 0
27936: PPUSH
27937: PPUSH
// begin enable ;
27938: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
27939: LD_ADDR_VAR 0 2
27943: PUSH
27944: LD_INT 22
27946: PUSH
27947: LD_OWVAR 2
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PUSH
27956: LD_INT 32
27958: PUSH
27959: LD_INT 3
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PPUSH
27970: CALL_OW 69
27974: ST_TO_ADDR
// if not tmp then
27975: LD_VAR 0 2
27979: NOT
27980: IFFALSE 27984
// exit ;
27982: GO 28013
// for i in tmp do
27984: LD_ADDR_VAR 0 1
27988: PUSH
27989: LD_VAR 0 2
27993: PUSH
27994: FOR_IN
27995: IFFALSE 28011
// begin SetLives ( i , 0 ) ;
27997: LD_VAR 0 1
28001: PPUSH
28002: LD_INT 0
28004: PPUSH
28005: CALL_OW 234
// end ;
28009: GO 27994
28011: POP
28012: POP
// end ;
28013: PPOPN 2
28015: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
28016: LD_EXP 55
28020: IFFALSE 28028
28022: PUSH
28023: LD_EXP 58
28027: AND
28028: IFFALSE 28121
28030: GO 28032
28032: DISABLE
28033: LD_INT 0
28035: PPUSH
// begin enable ;
28036: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
28037: LD_ADDR_VAR 0 1
28041: PUSH
28042: LD_INT 22
28044: PUSH
28045: LD_OWVAR 2
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 2
28056: PUSH
28057: LD_INT 25
28059: PUSH
28060: LD_INT 5
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 25
28069: PUSH
28070: LD_INT 9
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 25
28079: PUSH
28080: LD_INT 8
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PPUSH
28097: CALL_OW 69
28101: PUSH
28102: FOR_IN
28103: IFFALSE 28119
// begin SetClass ( i , 1 ) ;
28105: LD_VAR 0 1
28109: PPUSH
28110: LD_INT 1
28112: PPUSH
28113: CALL_OW 336
// end ;
28117: GO 28102
28119: POP
28120: POP
// end ;
28121: PPOPN 1
28123: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
28124: LD_EXP 55
28128: IFFALSE 28136
28130: PUSH
28131: LD_EXP 59
28135: AND
28136: IFFALSE 28148
28138: PUSH
28139: LD_OWVAR 65
28143: PUSH
28144: LD_INT 7
28146: LESS
28147: AND
28148: IFFALSE 28162
28150: GO 28152
28152: DISABLE
// begin enable ;
28153: ENABLE
// game_speed := 7 ;
28154: LD_ADDR_OWVAR 65
28158: PUSH
28159: LD_INT 7
28161: ST_TO_ADDR
// end ;
28162: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
28163: LD_EXP 55
28167: IFFALSE 28175
28169: PUSH
28170: LD_EXP 62
28174: AND
28175: IFFALSE 28377
28177: GO 28179
28179: DISABLE
28180: LD_INT 0
28182: PPUSH
28183: PPUSH
28184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28185: LD_ADDR_VAR 0 3
28189: PUSH
28190: LD_INT 81
28192: PUSH
28193: LD_OWVAR 2
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: LD_INT 21
28204: PUSH
28205: LD_INT 1
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PPUSH
28216: CALL_OW 69
28220: ST_TO_ADDR
// if not tmp then
28221: LD_VAR 0 3
28225: NOT
28226: IFFALSE 28230
// exit ;
28228: GO 28377
// if tmp > 5 then
28230: LD_VAR 0 3
28234: PUSH
28235: LD_INT 5
28237: GREATER
28238: IFFALSE 28250
// k := 5 else
28240: LD_ADDR_VAR 0 2
28244: PUSH
28245: LD_INT 5
28247: ST_TO_ADDR
28248: GO 28260
// k := tmp ;
28250: LD_ADDR_VAR 0 2
28254: PUSH
28255: LD_VAR 0 3
28259: ST_TO_ADDR
// for i := 1 to k do
28260: LD_ADDR_VAR 0 1
28264: PUSH
28265: DOUBLE
28266: LD_INT 1
28268: DEC
28269: ST_TO_ADDR
28270: LD_VAR 0 2
28274: PUSH
28275: FOR_TO
28276: IFFALSE 28375
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
28278: LD_VAR 0 3
28282: PUSH
28283: LD_VAR 0 1
28287: ARRAY
28288: PPUSH
28289: LD_VAR 0 1
28293: PUSH
28294: LD_INT 4
28296: MOD
28297: PUSH
28298: LD_INT 1
28300: PLUS
28301: PPUSH
28302: CALL_OW 259
28306: PUSH
28307: LD_INT 10
28309: LESS
28310: IFFALSE 28373
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
28312: LD_VAR 0 3
28316: PUSH
28317: LD_VAR 0 1
28321: ARRAY
28322: PPUSH
28323: LD_VAR 0 1
28327: PUSH
28328: LD_INT 4
28330: MOD
28331: PUSH
28332: LD_INT 1
28334: PLUS
28335: PPUSH
28336: LD_VAR 0 3
28340: PUSH
28341: LD_VAR 0 1
28345: ARRAY
28346: PPUSH
28347: LD_VAR 0 1
28351: PUSH
28352: LD_INT 4
28354: MOD
28355: PUSH
28356: LD_INT 1
28358: PLUS
28359: PPUSH
28360: CALL_OW 259
28364: PUSH
28365: LD_INT 1
28367: PLUS
28368: PPUSH
28369: CALL_OW 237
28373: GO 28275
28375: POP
28376: POP
// end ;
28377: PPOPN 3
28379: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
28380: LD_EXP 55
28384: IFFALSE 28392
28386: PUSH
28387: LD_EXP 63
28391: AND
28392: IFFALSE 28412
28394: GO 28396
28396: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
28397: LD_INT 4
28399: PPUSH
28400: LD_OWVAR 2
28404: PPUSH
28405: LD_INT 0
28407: PPUSH
28408: CALL_OW 324
28412: END
// every 0 0$1 trigger StreamModeActive and sShovel do
28413: LD_EXP 55
28417: IFFALSE 28425
28419: PUSH
28420: LD_EXP 92
28424: AND
28425: IFFALSE 28445
28427: GO 28429
28429: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
28430: LD_INT 19
28432: PPUSH
28433: LD_OWVAR 2
28437: PPUSH
28438: LD_INT 0
28440: PPUSH
28441: CALL_OW 324
28445: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
28446: LD_EXP 55
28450: IFFALSE 28458
28452: PUSH
28453: LD_EXP 64
28457: AND
28458: IFFALSE 28560
28460: GO 28462
28462: DISABLE
28463: LD_INT 0
28465: PPUSH
28466: PPUSH
// begin enable ;
28467: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
28468: LD_ADDR_VAR 0 2
28472: PUSH
28473: LD_INT 22
28475: PUSH
28476: LD_OWVAR 2
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 2
28487: PUSH
28488: LD_INT 34
28490: PUSH
28491: LD_INT 11
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 34
28500: PUSH
28501: LD_INT 30
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: LIST
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PPUSH
28517: CALL_OW 69
28521: ST_TO_ADDR
// if not tmp then
28522: LD_VAR 0 2
28526: NOT
28527: IFFALSE 28531
// exit ;
28529: GO 28560
// for i in tmp do
28531: LD_ADDR_VAR 0 1
28535: PUSH
28536: LD_VAR 0 2
28540: PUSH
28541: FOR_IN
28542: IFFALSE 28558
// begin SetLives ( i , 0 ) ;
28544: LD_VAR 0 1
28548: PPUSH
28549: LD_INT 0
28551: PPUSH
28552: CALL_OW 234
// end ;
28556: GO 28541
28558: POP
28559: POP
// end ;
28560: PPOPN 2
28562: END
// every 0 0$1 trigger StreamModeActive and sBunker do
28563: LD_EXP 55
28567: IFFALSE 28575
28569: PUSH
28570: LD_EXP 65
28574: AND
28575: IFFALSE 28595
28577: GO 28579
28579: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
28580: LD_INT 32
28582: PPUSH
28583: LD_OWVAR 2
28587: PPUSH
28588: LD_INT 0
28590: PPUSH
28591: CALL_OW 324
28595: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
28596: LD_EXP 55
28600: IFFALSE 28608
28602: PUSH
28603: LD_EXP 66
28607: AND
28608: IFFALSE 28791
28610: GO 28612
28612: DISABLE
28613: LD_INT 0
28615: PPUSH
28616: PPUSH
28617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
28618: LD_ADDR_VAR 0 2
28622: PUSH
28623: LD_INT 22
28625: PUSH
28626: LD_OWVAR 2
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: LD_INT 33
28637: PUSH
28638: LD_INT 3
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PPUSH
28649: CALL_OW 69
28653: ST_TO_ADDR
// if not tmp then
28654: LD_VAR 0 2
28658: NOT
28659: IFFALSE 28663
// exit ;
28661: GO 28791
// side := 0 ;
28663: LD_ADDR_VAR 0 3
28667: PUSH
28668: LD_INT 0
28670: ST_TO_ADDR
// for i := 1 to 8 do
28671: LD_ADDR_VAR 0 1
28675: PUSH
28676: DOUBLE
28677: LD_INT 1
28679: DEC
28680: ST_TO_ADDR
28681: LD_INT 8
28683: PUSH
28684: FOR_TO
28685: IFFALSE 28735
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
28687: LD_OWVAR 2
28691: PUSH
28692: LD_VAR 0 1
28696: NONEQUAL
28697: IFFALSE 28719
28699: PUSH
28700: LD_OWVAR 2
28704: PPUSH
28705: LD_VAR 0 1
28709: PPUSH
28710: CALL_OW 81
28714: PUSH
28715: LD_INT 2
28717: EQUAL
28718: AND
28719: IFFALSE 28733
// begin side := i ;
28721: LD_ADDR_VAR 0 3
28725: PUSH
28726: LD_VAR 0 1
28730: ST_TO_ADDR
// break ;
28731: GO 28735
// end ;
28733: GO 28684
28735: POP
28736: POP
// if not side then
28737: LD_VAR 0 3
28741: NOT
28742: IFFALSE 28746
// exit ;
28744: GO 28791
// for i := 1 to tmp do
28746: LD_ADDR_VAR 0 1
28750: PUSH
28751: DOUBLE
28752: LD_INT 1
28754: DEC
28755: ST_TO_ADDR
28756: LD_VAR 0 2
28760: PUSH
28761: FOR_TO
28762: IFFALSE 28789
// if Prob ( 60 ) then
28764: LD_INT 60
28766: PPUSH
28767: CALL_OW 13
28771: IFFALSE 28787
// SetSide ( i , side ) ;
28773: LD_VAR 0 1
28777: PPUSH
28778: LD_VAR 0 3
28782: PPUSH
28783: CALL_OW 235
28787: GO 28761
28789: POP
28790: POP
// end ;
28791: PPOPN 3
28793: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
28794: LD_EXP 55
28798: IFFALSE 28806
28800: PUSH
28801: LD_EXP 68
28805: AND
28806: IFFALSE 28925
28808: GO 28810
28810: DISABLE
28811: LD_INT 0
28813: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
28814: LD_ADDR_VAR 0 1
28818: PUSH
28819: LD_INT 22
28821: PUSH
28822: LD_OWVAR 2
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: LD_INT 21
28833: PUSH
28834: LD_INT 1
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 3
28843: PUSH
28844: LD_INT 23
28846: PUSH
28847: LD_INT 0
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: LIST
28862: PPUSH
28863: CALL_OW 69
28867: PUSH
28868: FOR_IN
28869: IFFALSE 28923
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
28871: LD_VAR 0 1
28875: PPUSH
28876: CALL_OW 257
28880: PUSH
28881: LD_INT 1
28883: PUSH
28884: LD_INT 2
28886: PUSH
28887: LD_INT 3
28889: PUSH
28890: LD_INT 4
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: IN
28899: IFFALSE 28921
// SetClass ( un , rand ( 1 , 4 ) ) ;
28901: LD_VAR 0 1
28905: PPUSH
28906: LD_INT 1
28908: PPUSH
28909: LD_INT 4
28911: PPUSH
28912: CALL_OW 12
28916: PPUSH
28917: CALL_OW 336
28921: GO 28868
28923: POP
28924: POP
// end ;
28925: PPOPN 1
28927: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
28928: LD_EXP 55
28932: IFFALSE 28940
28934: PUSH
28935: LD_EXP 67
28939: AND
28940: IFFALSE 29019
28942: GO 28944
28944: DISABLE
28945: LD_INT 0
28947: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28948: LD_ADDR_VAR 0 1
28952: PUSH
28953: LD_INT 22
28955: PUSH
28956: LD_OWVAR 2
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 21
28967: PUSH
28968: LD_INT 3
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PPUSH
28979: CALL_OW 69
28983: ST_TO_ADDR
// if not tmp then
28984: LD_VAR 0 1
28988: NOT
28989: IFFALSE 28993
// exit ;
28991: GO 29019
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
28993: LD_VAR 0 1
28997: PUSH
28998: LD_INT 1
29000: PPUSH
29001: LD_VAR 0 1
29005: PPUSH
29006: CALL_OW 12
29010: ARRAY
29011: PPUSH
29012: LD_INT 100
29014: PPUSH
29015: CALL_OW 234
// end ;
29019: PPOPN 1
29021: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
29022: LD_EXP 55
29026: IFFALSE 29034
29028: PUSH
29029: LD_EXP 69
29033: AND
29034: IFFALSE 29132
29036: GO 29038
29038: DISABLE
29039: LD_INT 0
29041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29042: LD_ADDR_VAR 0 1
29046: PUSH
29047: LD_INT 22
29049: PUSH
29050: LD_OWVAR 2
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 21
29061: PUSH
29062: LD_INT 1
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PPUSH
29073: CALL_OW 69
29077: ST_TO_ADDR
// if not tmp then
29078: LD_VAR 0 1
29082: NOT
29083: IFFALSE 29087
// exit ;
29085: GO 29132
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
29087: LD_VAR 0 1
29091: PUSH
29092: LD_INT 1
29094: PPUSH
29095: LD_VAR 0 1
29099: PPUSH
29100: CALL_OW 12
29104: ARRAY
29105: PPUSH
29106: LD_INT 1
29108: PPUSH
29109: LD_INT 4
29111: PPUSH
29112: CALL_OW 12
29116: PPUSH
29117: LD_INT 3000
29119: PPUSH
29120: LD_INT 9000
29122: PPUSH
29123: CALL_OW 12
29127: PPUSH
29128: CALL_OW 492
// end ;
29132: PPOPN 1
29134: END
// every 0 0$1 trigger StreamModeActive and sDepot do
29135: LD_EXP 55
29139: IFFALSE 29147
29141: PUSH
29142: LD_EXP 70
29146: AND
29147: IFFALSE 29167
29149: GO 29151
29151: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
29152: LD_INT 1
29154: PPUSH
29155: LD_OWVAR 2
29159: PPUSH
29160: LD_INT 0
29162: PPUSH
29163: CALL_OW 324
29167: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
29168: LD_EXP 55
29172: IFFALSE 29180
29174: PUSH
29175: LD_EXP 71
29179: AND
29180: IFFALSE 29263
29182: GO 29184
29184: DISABLE
29185: LD_INT 0
29187: PPUSH
29188: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29189: LD_ADDR_VAR 0 2
29193: PUSH
29194: LD_INT 22
29196: PUSH
29197: LD_OWVAR 2
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: LD_INT 21
29208: PUSH
29209: LD_INT 3
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PPUSH
29220: CALL_OW 69
29224: ST_TO_ADDR
// if not tmp then
29225: LD_VAR 0 2
29229: NOT
29230: IFFALSE 29234
// exit ;
29232: GO 29263
// for i in tmp do
29234: LD_ADDR_VAR 0 1
29238: PUSH
29239: LD_VAR 0 2
29243: PUSH
29244: FOR_IN
29245: IFFALSE 29261
// SetBLevel ( i , 10 ) ;
29247: LD_VAR 0 1
29251: PPUSH
29252: LD_INT 10
29254: PPUSH
29255: CALL_OW 241
29259: GO 29244
29261: POP
29262: POP
// end ;
29263: PPOPN 2
29265: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
29266: LD_EXP 55
29270: IFFALSE 29278
29272: PUSH
29273: LD_EXP 72
29277: AND
29278: IFFALSE 29389
29280: GO 29282
29282: DISABLE
29283: LD_INT 0
29285: PPUSH
29286: PPUSH
29287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29288: LD_ADDR_VAR 0 3
29292: PUSH
29293: LD_INT 22
29295: PUSH
29296: LD_OWVAR 2
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 25
29307: PUSH
29308: LD_INT 1
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PPUSH
29319: CALL_OW 69
29323: ST_TO_ADDR
// if not tmp then
29324: LD_VAR 0 3
29328: NOT
29329: IFFALSE 29333
// exit ;
29331: GO 29389
// un := tmp [ rand ( 1 , tmp ) ] ;
29333: LD_ADDR_VAR 0 2
29337: PUSH
29338: LD_VAR 0 3
29342: PUSH
29343: LD_INT 1
29345: PPUSH
29346: LD_VAR 0 3
29350: PPUSH
29351: CALL_OW 12
29355: ARRAY
29356: ST_TO_ADDR
// if Crawls ( un ) then
29357: LD_VAR 0 2
29361: PPUSH
29362: CALL_OW 318
29366: IFFALSE 29377
// ComWalk ( un ) ;
29368: LD_VAR 0 2
29372: PPUSH
29373: CALL_OW 138
// SetClass ( un , class_sniper ) ;
29377: LD_VAR 0 2
29381: PPUSH
29382: LD_INT 5
29384: PPUSH
29385: CALL_OW 336
// end ;
29389: PPOPN 3
29391: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
29392: LD_EXP 55
29396: IFFALSE 29404
29398: PUSH
29399: LD_EXP 73
29403: AND
29404: IFFALSE 29416
29406: PUSH
29407: LD_OWVAR 67
29411: PUSH
29412: LD_INT 4
29414: LESS
29415: AND
29416: IFFALSE 29435
29418: GO 29420
29420: DISABLE
// begin Difficulty := Difficulty + 1 ;
29421: LD_ADDR_OWVAR 67
29425: PUSH
29426: LD_OWVAR 67
29430: PUSH
29431: LD_INT 1
29433: PLUS
29434: ST_TO_ADDR
// end ;
29435: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
29436: LD_EXP 55
29440: IFFALSE 29448
29442: PUSH
29443: LD_EXP 74
29447: AND
29448: IFFALSE 29551
29450: GO 29452
29452: DISABLE
29453: LD_INT 0
29455: PPUSH
// begin for i := 1 to 5 do
29456: LD_ADDR_VAR 0 1
29460: PUSH
29461: DOUBLE
29462: LD_INT 1
29464: DEC
29465: ST_TO_ADDR
29466: LD_INT 5
29468: PUSH
29469: FOR_TO
29470: IFFALSE 29549
// begin uc_nation := nation_nature ;
29472: LD_ADDR_OWVAR 21
29476: PUSH
29477: LD_INT 0
29479: ST_TO_ADDR
// uc_side := 0 ;
29480: LD_ADDR_OWVAR 20
29484: PUSH
29485: LD_INT 0
29487: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29488: LD_ADDR_OWVAR 29
29492: PUSH
29493: LD_INT 12
29495: PUSH
29496: LD_INT 12
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: ST_TO_ADDR
// hc_agressivity := 20 ;
29503: LD_ADDR_OWVAR 35
29507: PUSH
29508: LD_INT 20
29510: ST_TO_ADDR
// hc_class := class_tiger ;
29511: LD_ADDR_OWVAR 28
29515: PUSH
29516: LD_INT 14
29518: ST_TO_ADDR
// hc_gallery :=  ;
29519: LD_ADDR_OWVAR 33
29523: PUSH
29524: LD_STRING 
29526: ST_TO_ADDR
// hc_name :=  ;
29527: LD_ADDR_OWVAR 26
29531: PUSH
29532: LD_STRING 
29534: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
29535: CALL_OW 44
29539: PPUSH
29540: LD_INT 0
29542: PPUSH
29543: CALL_OW 51
// end ;
29547: GO 29469
29549: POP
29550: POP
// end ;
29551: PPOPN 1
29553: END
// every 0 0$1 trigger StreamModeActive and sBomb do
29554: LD_EXP 55
29558: IFFALSE 29566
29560: PUSH
29561: LD_EXP 75
29565: AND
29566: IFFALSE 29575
29568: GO 29570
29570: DISABLE
// StreamSibBomb ;
29571: CALL 29576 0 0
29575: END
// export function StreamSibBomb ; var i , x , y ; begin
29576: LD_INT 0
29578: PPUSH
29579: PPUSH
29580: PPUSH
29581: PPUSH
// result := false ;
29582: LD_ADDR_VAR 0 1
29586: PUSH
29587: LD_INT 0
29589: ST_TO_ADDR
// for i := 1 to 16 do
29590: LD_ADDR_VAR 0 2
29594: PUSH
29595: DOUBLE
29596: LD_INT 1
29598: DEC
29599: ST_TO_ADDR
29600: LD_INT 16
29602: PUSH
29603: FOR_TO
29604: IFFALSE 29803
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29606: LD_ADDR_VAR 0 3
29610: PUSH
29611: LD_INT 10
29613: PUSH
29614: LD_INT 20
29616: PUSH
29617: LD_INT 30
29619: PUSH
29620: LD_INT 40
29622: PUSH
29623: LD_INT 50
29625: PUSH
29626: LD_INT 60
29628: PUSH
29629: LD_INT 70
29631: PUSH
29632: LD_INT 80
29634: PUSH
29635: LD_INT 90
29637: PUSH
29638: LD_INT 100
29640: PUSH
29641: LD_INT 110
29643: PUSH
29644: LD_INT 120
29646: PUSH
29647: LD_INT 130
29649: PUSH
29650: LD_INT 140
29652: PUSH
29653: LD_INT 150
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 1
29675: PPUSH
29676: LD_INT 15
29678: PPUSH
29679: CALL_OW 12
29683: ARRAY
29684: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29685: LD_ADDR_VAR 0 4
29689: PUSH
29690: LD_INT 10
29692: PUSH
29693: LD_INT 20
29695: PUSH
29696: LD_INT 30
29698: PUSH
29699: LD_INT 40
29701: PUSH
29702: LD_INT 50
29704: PUSH
29705: LD_INT 60
29707: PUSH
29708: LD_INT 70
29710: PUSH
29711: LD_INT 80
29713: PUSH
29714: LD_INT 90
29716: PUSH
29717: LD_INT 100
29719: PUSH
29720: LD_INT 110
29722: PUSH
29723: LD_INT 120
29725: PUSH
29726: LD_INT 130
29728: PUSH
29729: LD_INT 140
29731: PUSH
29732: LD_INT 150
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 1
29754: PPUSH
29755: LD_INT 15
29757: PPUSH
29758: CALL_OW 12
29762: ARRAY
29763: ST_TO_ADDR
// if ValidHex ( x , y ) then
29764: LD_VAR 0 3
29768: PPUSH
29769: LD_VAR 0 4
29773: PPUSH
29774: CALL_OW 488
29778: IFFALSE 29801
// begin result := [ x , y ] ;
29780: LD_ADDR_VAR 0 1
29784: PUSH
29785: LD_VAR 0 3
29789: PUSH
29790: LD_VAR 0 4
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: ST_TO_ADDR
// break ;
29799: GO 29803
// end ; end ;
29801: GO 29603
29803: POP
29804: POP
// if result then
29805: LD_VAR 0 1
29809: IFFALSE 29869
// begin ToLua ( playSibBomb() ) ;
29811: LD_STRING playSibBomb()
29813: PPUSH
29814: CALL_OW 559
// wait ( 0 0$14 ) ;
29818: LD_INT 490
29820: PPUSH
29821: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
29825: LD_VAR 0 1
29829: PUSH
29830: LD_INT 1
29832: ARRAY
29833: PPUSH
29834: LD_VAR 0 1
29838: PUSH
29839: LD_INT 2
29841: ARRAY
29842: PPUSH
29843: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
29847: LD_VAR 0 1
29851: PUSH
29852: LD_INT 1
29854: ARRAY
29855: PPUSH
29856: LD_VAR 0 1
29860: PUSH
29861: LD_INT 2
29863: ARRAY
29864: PPUSH
29865: CALL_OW 429
// end ; end ;
29869: LD_VAR 0 1
29873: RET
// every 0 0$1 trigger StreamModeActive and sReset do
29874: LD_EXP 55
29878: IFFALSE 29886
29880: PUSH
29881: LD_EXP 77
29885: AND
29886: IFFALSE 29898
29888: GO 29890
29890: DISABLE
// YouLost (  ) ;
29891: LD_STRING 
29893: PPUSH
29894: CALL_OW 104
29898: END
// every 0 0$1 trigger StreamModeActive and sFog do
29899: LD_EXP 55
29903: IFFALSE 29911
29905: PUSH
29906: LD_EXP 76
29910: AND
29911: IFFALSE 29925
29913: GO 29915
29915: DISABLE
// FogOff ( your_side ) ;
29916: LD_OWVAR 2
29920: PPUSH
29921: CALL_OW 344
29925: END
// every 0 0$1 trigger StreamModeActive and sSun do
29926: LD_EXP 55
29930: IFFALSE 29938
29932: PUSH
29933: LD_EXP 78
29937: AND
29938: IFFALSE 29966
29940: GO 29942
29942: DISABLE
// begin solar_recharge_percent := 0 ;
29943: LD_ADDR_OWVAR 79
29947: PUSH
29948: LD_INT 0
29950: ST_TO_ADDR
// wait ( 5 5$00 ) ;
29951: LD_INT 10500
29953: PPUSH
29954: CALL_OW 67
// solar_recharge_percent := 100 ;
29958: LD_ADDR_OWVAR 79
29962: PUSH
29963: LD_INT 100
29965: ST_TO_ADDR
// end ;
29966: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
29967: LD_EXP 55
29971: IFFALSE 29979
29973: PUSH
29974: LD_EXP 79
29978: AND
29979: IFFALSE 30218
29981: GO 29983
29983: DISABLE
29984: LD_INT 0
29986: PPUSH
29987: PPUSH
29988: PPUSH
// begin tmp := [ ] ;
29989: LD_ADDR_VAR 0 3
29993: PUSH
29994: EMPTY
29995: ST_TO_ADDR
// for i := 1 to 6 do
29996: LD_ADDR_VAR 0 1
30000: PUSH
30001: DOUBLE
30002: LD_INT 1
30004: DEC
30005: ST_TO_ADDR
30006: LD_INT 6
30008: PUSH
30009: FOR_TO
30010: IFFALSE 30115
// begin uc_nation := nation_nature ;
30012: LD_ADDR_OWVAR 21
30016: PUSH
30017: LD_INT 0
30019: ST_TO_ADDR
// uc_side := 0 ;
30020: LD_ADDR_OWVAR 20
30024: PUSH
30025: LD_INT 0
30027: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
30028: LD_ADDR_OWVAR 29
30032: PUSH
30033: LD_INT 12
30035: PUSH
30036: LD_INT 12
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: ST_TO_ADDR
// hc_agressivity := 20 ;
30043: LD_ADDR_OWVAR 35
30047: PUSH
30048: LD_INT 20
30050: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
30051: LD_ADDR_OWVAR 28
30055: PUSH
30056: LD_INT 17
30058: ST_TO_ADDR
// hc_gallery :=  ;
30059: LD_ADDR_OWVAR 33
30063: PUSH
30064: LD_STRING 
30066: ST_TO_ADDR
// hc_name :=  ;
30067: LD_ADDR_OWVAR 26
30071: PUSH
30072: LD_STRING 
30074: ST_TO_ADDR
// un := CreateHuman ;
30075: LD_ADDR_VAR 0 2
30079: PUSH
30080: CALL_OW 44
30084: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
30085: LD_VAR 0 2
30089: PPUSH
30090: LD_INT 1
30092: PPUSH
30093: CALL_OW 51
// tmp := tmp ^ un ;
30097: LD_ADDR_VAR 0 3
30101: PUSH
30102: LD_VAR 0 3
30106: PUSH
30107: LD_VAR 0 2
30111: ADD
30112: ST_TO_ADDR
// end ;
30113: GO 30009
30115: POP
30116: POP
// repeat wait ( 0 0$1 ) ;
30117: LD_INT 35
30119: PPUSH
30120: CALL_OW 67
// for un in tmp do
30124: LD_ADDR_VAR 0 2
30128: PUSH
30129: LD_VAR 0 3
30133: PUSH
30134: FOR_IN
30135: IFFALSE 30209
// begin if IsDead ( un ) then
30137: LD_VAR 0 2
30141: PPUSH
30142: CALL_OW 301
30146: IFFALSE 30166
// begin tmp := tmp diff un ;
30148: LD_ADDR_VAR 0 3
30152: PUSH
30153: LD_VAR 0 3
30157: PUSH
30158: LD_VAR 0 2
30162: DIFF
30163: ST_TO_ADDR
// continue ;
30164: GO 30134
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
30166: LD_VAR 0 2
30170: PPUSH
30171: LD_INT 3
30173: PUSH
30174: LD_INT 22
30176: PUSH
30177: LD_INT 0
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PPUSH
30188: CALL_OW 69
30192: PPUSH
30193: LD_VAR 0 2
30197: PPUSH
30198: CALL_OW 74
30202: PPUSH
30203: CALL_OW 115
// end ;
30207: GO 30134
30209: POP
30210: POP
// until not tmp ;
30211: LD_VAR 0 3
30215: NOT
30216: IFFALSE 30117
// end ;
30218: PPOPN 3
30220: END
// every 0 0$1 trigger StreamModeActive and sTroll do
30221: LD_EXP 55
30225: IFFALSE 30233
30227: PUSH
30228: LD_EXP 80
30232: AND
30233: IFFALSE 30287
30235: GO 30237
30237: DISABLE
// begin ToLua ( displayTroll(); ) ;
30238: LD_STRING displayTroll();
30240: PPUSH
30241: CALL_OW 559
// wait ( 3 3$00 ) ;
30245: LD_INT 6300
30247: PPUSH
30248: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30252: LD_STRING hideTroll();
30254: PPUSH
30255: CALL_OW 559
// wait ( 1 1$00 ) ;
30259: LD_INT 2100
30261: PPUSH
30262: CALL_OW 67
// ToLua ( displayTroll(); ) ;
30266: LD_STRING displayTroll();
30268: PPUSH
30269: CALL_OW 559
// wait ( 1 1$00 ) ;
30273: LD_INT 2100
30275: PPUSH
30276: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30280: LD_STRING hideTroll();
30282: PPUSH
30283: CALL_OW 559
// end ;
30287: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
30288: LD_EXP 55
30292: IFFALSE 30300
30294: PUSH
30295: LD_EXP 81
30299: AND
30300: IFFALSE 30363
30302: GO 30304
30304: DISABLE
30305: LD_INT 0
30307: PPUSH
// begin p := 0 ;
30308: LD_ADDR_VAR 0 1
30312: PUSH
30313: LD_INT 0
30315: ST_TO_ADDR
// repeat game_speed := 1 ;
30316: LD_ADDR_OWVAR 65
30320: PUSH
30321: LD_INT 1
30323: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30324: LD_INT 35
30326: PPUSH
30327: CALL_OW 67
// p := p + 1 ;
30331: LD_ADDR_VAR 0 1
30335: PUSH
30336: LD_VAR 0 1
30340: PUSH
30341: LD_INT 1
30343: PLUS
30344: ST_TO_ADDR
// until p >= 60 ;
30345: LD_VAR 0 1
30349: PUSH
30350: LD_INT 60
30352: GREATEREQUAL
30353: IFFALSE 30316
// game_speed := 4 ;
30355: LD_ADDR_OWVAR 65
30359: PUSH
30360: LD_INT 4
30362: ST_TO_ADDR
// end ;
30363: PPOPN 1
30365: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
30366: LD_EXP 55
30370: IFFALSE 30378
30372: PUSH
30373: LD_EXP 82
30377: AND
30378: IFFALSE 30524
30380: GO 30382
30382: DISABLE
30383: LD_INT 0
30385: PPUSH
30386: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30387: LD_ADDR_VAR 0 1
30391: PUSH
30392: LD_INT 22
30394: PUSH
30395: LD_OWVAR 2
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 2
30406: PUSH
30407: LD_INT 30
30409: PUSH
30410: LD_INT 0
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 30
30419: PUSH
30420: LD_INT 1
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: LIST
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PPUSH
30436: CALL_OW 69
30440: ST_TO_ADDR
// if not depot then
30441: LD_VAR 0 1
30445: NOT
30446: IFFALSE 30450
// exit ;
30448: GO 30524
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
30450: LD_ADDR_VAR 0 2
30454: PUSH
30455: LD_VAR 0 1
30459: PUSH
30460: LD_INT 1
30462: PPUSH
30463: LD_VAR 0 1
30467: PPUSH
30468: CALL_OW 12
30472: ARRAY
30473: PPUSH
30474: CALL_OW 274
30478: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
30479: LD_VAR 0 2
30483: PPUSH
30484: LD_INT 1
30486: PPUSH
30487: LD_INT 0
30489: PPUSH
30490: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
30494: LD_VAR 0 2
30498: PPUSH
30499: LD_INT 2
30501: PPUSH
30502: LD_INT 0
30504: PPUSH
30505: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
30509: LD_VAR 0 2
30513: PPUSH
30514: LD_INT 3
30516: PPUSH
30517: LD_INT 0
30519: PPUSH
30520: CALL_OW 277
// end ;
30524: PPOPN 2
30526: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
30527: LD_EXP 55
30531: IFFALSE 30539
30533: PUSH
30534: LD_EXP 83
30538: AND
30539: IFFALSE 30636
30541: GO 30543
30543: DISABLE
30544: LD_INT 0
30546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30547: LD_ADDR_VAR 0 1
30551: PUSH
30552: LD_INT 22
30554: PUSH
30555: LD_OWVAR 2
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PUSH
30564: LD_INT 21
30566: PUSH
30567: LD_INT 1
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 3
30576: PUSH
30577: LD_INT 23
30579: PUSH
30580: LD_INT 0
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: LIST
30595: PPUSH
30596: CALL_OW 69
30600: ST_TO_ADDR
// if not tmp then
30601: LD_VAR 0 1
30605: NOT
30606: IFFALSE 30610
// exit ;
30608: GO 30636
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
30610: LD_VAR 0 1
30614: PUSH
30615: LD_INT 1
30617: PPUSH
30618: LD_VAR 0 1
30622: PPUSH
30623: CALL_OW 12
30627: ARRAY
30628: PPUSH
30629: LD_INT 200
30631: PPUSH
30632: CALL_OW 234
// end ;
30636: PPOPN 1
30638: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
30639: LD_EXP 55
30643: IFFALSE 30651
30645: PUSH
30646: LD_EXP 84
30650: AND
30651: IFFALSE 30730
30653: GO 30655
30655: DISABLE
30656: LD_INT 0
30658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
30659: LD_ADDR_VAR 0 1
30663: PUSH
30664: LD_INT 22
30666: PUSH
30667: LD_OWVAR 2
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 21
30678: PUSH
30679: LD_INT 2
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PPUSH
30690: CALL_OW 69
30694: ST_TO_ADDR
// if not tmp then
30695: LD_VAR 0 1
30699: NOT
30700: IFFALSE 30704
// exit ;
30702: GO 30730
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
30704: LD_VAR 0 1
30708: PUSH
30709: LD_INT 1
30711: PPUSH
30712: LD_VAR 0 1
30716: PPUSH
30717: CALL_OW 12
30721: ARRAY
30722: PPUSH
30723: LD_INT 60
30725: PPUSH
30726: CALL_OW 234
// end ;
30730: PPOPN 1
30732: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
30733: LD_EXP 55
30737: IFFALSE 30745
30739: PUSH
30740: LD_EXP 85
30744: AND
30745: IFFALSE 30844
30747: GO 30749
30749: DISABLE
30750: LD_INT 0
30752: PPUSH
30753: PPUSH
// begin enable ;
30754: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
30755: LD_ADDR_VAR 0 1
30759: PUSH
30760: LD_INT 22
30762: PUSH
30763: LD_OWVAR 2
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 61
30774: PUSH
30775: EMPTY
30776: LIST
30777: PUSH
30778: LD_INT 33
30780: PUSH
30781: LD_INT 2
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: LIST
30792: PPUSH
30793: CALL_OW 69
30797: ST_TO_ADDR
// if not tmp then
30798: LD_VAR 0 1
30802: NOT
30803: IFFALSE 30807
// exit ;
30805: GO 30844
// for i in tmp do
30807: LD_ADDR_VAR 0 2
30811: PUSH
30812: LD_VAR 0 1
30816: PUSH
30817: FOR_IN
30818: IFFALSE 30842
// if IsControledBy ( i ) then
30820: LD_VAR 0 2
30824: PPUSH
30825: CALL_OW 312
30829: IFFALSE 30840
// ComUnlink ( i ) ;
30831: LD_VAR 0 2
30835: PPUSH
30836: CALL_OW 136
30840: GO 30817
30842: POP
30843: POP
// end ;
30844: PPOPN 2
30846: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
30847: LD_EXP 55
30851: IFFALSE 30859
30853: PUSH
30854: LD_EXP 86
30858: AND
30859: IFFALSE 30999
30861: GO 30863
30863: DISABLE
30864: LD_INT 0
30866: PPUSH
30867: PPUSH
// begin ToLua ( displayPowell(); ) ;
30868: LD_STRING displayPowell();
30870: PPUSH
30871: CALL_OW 559
// uc_side := 0 ;
30875: LD_ADDR_OWVAR 20
30879: PUSH
30880: LD_INT 0
30882: ST_TO_ADDR
// uc_nation := 2 ;
30883: LD_ADDR_OWVAR 21
30887: PUSH
30888: LD_INT 2
30890: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
30891: LD_ADDR_OWVAR 37
30895: PUSH
30896: LD_INT 14
30898: ST_TO_ADDR
// vc_engine := engine_siberite ;
30899: LD_ADDR_OWVAR 39
30903: PUSH
30904: LD_INT 3
30906: ST_TO_ADDR
// vc_control := control_apeman ;
30907: LD_ADDR_OWVAR 38
30911: PUSH
30912: LD_INT 5
30914: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
30915: LD_ADDR_OWVAR 40
30919: PUSH
30920: LD_INT 29
30922: ST_TO_ADDR
// un := CreateVehicle ;
30923: LD_ADDR_VAR 0 2
30927: PUSH
30928: CALL_OW 45
30932: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30933: LD_VAR 0 2
30937: PPUSH
30938: LD_INT 1
30940: PPUSH
30941: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30945: LD_INT 35
30947: PPUSH
30948: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30952: LD_VAR 0 2
30956: PPUSH
30957: LD_INT 22
30959: PUSH
30960: LD_OWVAR 2
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PPUSH
30969: CALL_OW 69
30973: PPUSH
30974: LD_VAR 0 2
30978: PPUSH
30979: CALL_OW 74
30983: PPUSH
30984: CALL_OW 115
// until IsDead ( un ) ;
30988: LD_VAR 0 2
30992: PPUSH
30993: CALL_OW 301
30997: IFFALSE 30945
// end ;
30999: PPOPN 2
31001: END
// every 0 0$1 trigger StreamModeActive and sStu do
31002: LD_EXP 55
31006: IFFALSE 31014
31008: PUSH
31009: LD_EXP 94
31013: AND
31014: IFFALSE 31030
31016: GO 31018
31018: DISABLE
// begin ToLua ( displayStucuk(); ) ;
31019: LD_STRING displayStucuk();
31021: PPUSH
31022: CALL_OW 559
// ResetFog ;
31026: CALL_OW 335
// end ;
31030: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
31031: LD_EXP 55
31035: IFFALSE 31043
31037: PUSH
31038: LD_EXP 87
31042: AND
31043: IFFALSE 31184
31045: GO 31047
31047: DISABLE
31048: LD_INT 0
31050: PPUSH
31051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31052: LD_ADDR_VAR 0 2
31056: PUSH
31057: LD_INT 22
31059: PUSH
31060: LD_OWVAR 2
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 21
31071: PUSH
31072: LD_INT 1
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PPUSH
31083: CALL_OW 69
31087: ST_TO_ADDR
// if not tmp then
31088: LD_VAR 0 2
31092: NOT
31093: IFFALSE 31097
// exit ;
31095: GO 31184
// un := tmp [ rand ( 1 , tmp ) ] ;
31097: LD_ADDR_VAR 0 1
31101: PUSH
31102: LD_VAR 0 2
31106: PUSH
31107: LD_INT 1
31109: PPUSH
31110: LD_VAR 0 2
31114: PPUSH
31115: CALL_OW 12
31119: ARRAY
31120: ST_TO_ADDR
// SetSide ( un , 0 ) ;
31121: LD_VAR 0 1
31125: PPUSH
31126: LD_INT 0
31128: PPUSH
31129: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
31133: LD_VAR 0 1
31137: PPUSH
31138: LD_OWVAR 3
31142: PUSH
31143: LD_VAR 0 1
31147: DIFF
31148: PPUSH
31149: LD_VAR 0 1
31153: PPUSH
31154: CALL_OW 74
31158: PPUSH
31159: CALL_OW 115
// wait ( 0 0$20 ) ;
31163: LD_INT 700
31165: PPUSH
31166: CALL_OW 67
// SetSide ( un , your_side ) ;
31170: LD_VAR 0 1
31174: PPUSH
31175: LD_OWVAR 2
31179: PPUSH
31180: CALL_OW 235
// end ;
31184: PPOPN 2
31186: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
31187: LD_EXP 55
31191: IFFALSE 31199
31193: PUSH
31194: LD_EXP 88
31198: AND
31199: IFFALSE 31305
31201: GO 31203
31203: DISABLE
31204: LD_INT 0
31206: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31207: LD_ADDR_VAR 0 1
31211: PUSH
31212: LD_INT 22
31214: PUSH
31215: LD_OWVAR 2
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 2
31226: PUSH
31227: LD_INT 30
31229: PUSH
31230: LD_INT 0
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 30
31239: PUSH
31240: LD_INT 1
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: LIST
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PPUSH
31256: CALL_OW 69
31260: ST_TO_ADDR
// if not depot then
31261: LD_VAR 0 1
31265: NOT
31266: IFFALSE 31270
// exit ;
31268: GO 31305
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
31270: LD_VAR 0 1
31274: PUSH
31275: LD_INT 1
31277: ARRAY
31278: PPUSH
31279: CALL_OW 250
31283: PPUSH
31284: LD_VAR 0 1
31288: PUSH
31289: LD_INT 1
31291: ARRAY
31292: PPUSH
31293: CALL_OW 251
31297: PPUSH
31298: LD_INT 70
31300: PPUSH
31301: CALL_OW 495
// end ;
31305: PPOPN 1
31307: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
31308: LD_EXP 55
31312: IFFALSE 31320
31314: PUSH
31315: LD_EXP 89
31319: AND
31320: IFFALSE 31531
31322: GO 31324
31324: DISABLE
31325: LD_INT 0
31327: PPUSH
31328: PPUSH
31329: PPUSH
31330: PPUSH
31331: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31332: LD_ADDR_VAR 0 5
31336: PUSH
31337: LD_INT 22
31339: PUSH
31340: LD_OWVAR 2
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 21
31351: PUSH
31352: LD_INT 1
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PPUSH
31363: CALL_OW 69
31367: ST_TO_ADDR
// if not tmp then
31368: LD_VAR 0 5
31372: NOT
31373: IFFALSE 31377
// exit ;
31375: GO 31531
// for i in tmp do
31377: LD_ADDR_VAR 0 1
31381: PUSH
31382: LD_VAR 0 5
31386: PUSH
31387: FOR_IN
31388: IFFALSE 31529
// begin d := rand ( 0 , 5 ) ;
31390: LD_ADDR_VAR 0 4
31394: PUSH
31395: LD_INT 0
31397: PPUSH
31398: LD_INT 5
31400: PPUSH
31401: CALL_OW 12
31405: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
31406: LD_ADDR_VAR 0 2
31410: PUSH
31411: LD_VAR 0 1
31415: PPUSH
31416: CALL_OW 250
31420: PPUSH
31421: LD_VAR 0 4
31425: PPUSH
31426: LD_INT 3
31428: PPUSH
31429: LD_INT 12
31431: PPUSH
31432: CALL_OW 12
31436: PPUSH
31437: CALL_OW 272
31441: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
31442: LD_ADDR_VAR 0 3
31446: PUSH
31447: LD_VAR 0 1
31451: PPUSH
31452: CALL_OW 251
31456: PPUSH
31457: LD_VAR 0 4
31461: PPUSH
31462: LD_INT 3
31464: PPUSH
31465: LD_INT 12
31467: PPUSH
31468: CALL_OW 12
31472: PPUSH
31473: CALL_OW 273
31477: ST_TO_ADDR
// if ValidHex ( x , y ) then
31478: LD_VAR 0 2
31482: PPUSH
31483: LD_VAR 0 3
31487: PPUSH
31488: CALL_OW 488
31492: IFFALSE 31527
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
31494: LD_VAR 0 1
31498: PPUSH
31499: LD_VAR 0 2
31503: PPUSH
31504: LD_VAR 0 3
31508: PPUSH
31509: LD_INT 3
31511: PPUSH
31512: LD_INT 6
31514: PPUSH
31515: CALL_OW 12
31519: PPUSH
31520: LD_INT 1
31522: PPUSH
31523: CALL_OW 483
// end ;
31527: GO 31387
31529: POP
31530: POP
// end ;
31531: PPOPN 5
31533: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
31534: LD_EXP 55
31538: IFFALSE 31546
31540: PUSH
31541: LD_EXP 90
31545: AND
31546: IFFALSE 31640
31548: GO 31550
31550: DISABLE
31551: LD_INT 0
31553: PPUSH
31554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
31555: LD_ADDR_VAR 0 2
31559: PUSH
31560: LD_INT 22
31562: PUSH
31563: LD_OWVAR 2
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 32
31574: PUSH
31575: LD_INT 1
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 21
31584: PUSH
31585: LD_INT 2
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: LIST
31596: PPUSH
31597: CALL_OW 69
31601: ST_TO_ADDR
// if not tmp then
31602: LD_VAR 0 2
31606: NOT
31607: IFFALSE 31611
// exit ;
31609: GO 31640
// for i in tmp do
31611: LD_ADDR_VAR 0 1
31615: PUSH
31616: LD_VAR 0 2
31620: PUSH
31621: FOR_IN
31622: IFFALSE 31638
// SetFuel ( i , 0 ) ;
31624: LD_VAR 0 1
31628: PPUSH
31629: LD_INT 0
31631: PPUSH
31632: CALL_OW 240
31636: GO 31621
31638: POP
31639: POP
// end ;
31640: PPOPN 2
31642: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
31643: LD_EXP 55
31647: IFFALSE 31655
31649: PUSH
31650: LD_EXP 91
31654: AND
31655: IFFALSE 31721
31657: GO 31659
31659: DISABLE
31660: LD_INT 0
31662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31663: LD_ADDR_VAR 0 1
31667: PUSH
31668: LD_INT 22
31670: PUSH
31671: LD_OWVAR 2
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 30
31682: PUSH
31683: LD_INT 29
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PPUSH
31694: CALL_OW 69
31698: ST_TO_ADDR
// if not tmp then
31699: LD_VAR 0 1
31703: NOT
31704: IFFALSE 31708
// exit ;
31706: GO 31721
// DestroyUnit ( tmp [ 1 ] ) ;
31708: LD_VAR 0 1
31712: PUSH
31713: LD_INT 1
31715: ARRAY
31716: PPUSH
31717: CALL_OW 65
// end ;
31721: PPOPN 1
31723: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
31724: LD_EXP 55
31728: IFFALSE 31736
31730: PUSH
31731: LD_EXP 93
31735: AND
31736: IFFALSE 31865
31738: GO 31740
31740: DISABLE
31741: LD_INT 0
31743: PPUSH
// begin uc_side := 0 ;
31744: LD_ADDR_OWVAR 20
31748: PUSH
31749: LD_INT 0
31751: ST_TO_ADDR
// uc_nation := nation_arabian ;
31752: LD_ADDR_OWVAR 21
31756: PUSH
31757: LD_INT 2
31759: ST_TO_ADDR
// hc_gallery :=  ;
31760: LD_ADDR_OWVAR 33
31764: PUSH
31765: LD_STRING 
31767: ST_TO_ADDR
// hc_name :=  ;
31768: LD_ADDR_OWVAR 26
31772: PUSH
31773: LD_STRING 
31775: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31776: LD_INT 1
31778: PPUSH
31779: LD_INT 11
31781: PPUSH
31782: LD_INT 10
31784: PPUSH
31785: CALL_OW 380
// un := CreateHuman ;
31789: LD_ADDR_VAR 0 1
31793: PUSH
31794: CALL_OW 44
31798: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31799: LD_VAR 0 1
31803: PPUSH
31804: LD_INT 1
31806: PPUSH
31807: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31811: LD_INT 35
31813: PPUSH
31814: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31818: LD_VAR 0 1
31822: PPUSH
31823: LD_INT 22
31825: PUSH
31826: LD_OWVAR 2
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PPUSH
31835: CALL_OW 69
31839: PPUSH
31840: LD_VAR 0 1
31844: PPUSH
31845: CALL_OW 74
31849: PPUSH
31850: CALL_OW 115
// until IsDead ( un ) ;
31854: LD_VAR 0 1
31858: PPUSH
31859: CALL_OW 301
31863: IFFALSE 31811
// end ;
31865: PPOPN 1
31867: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
31868: LD_EXP 55
31872: IFFALSE 31880
31874: PUSH
31875: LD_EXP 95
31879: AND
31880: IFFALSE 31892
31882: GO 31884
31884: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
31885: LD_STRING earthquake(getX(game), 0, 32)
31887: PPUSH
31888: CALL_OW 559
31892: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
31893: LD_EXP 55
31897: IFFALSE 31905
31899: PUSH
31900: LD_EXP 96
31904: AND
31905: IFFALSE 31996
31907: GO 31909
31909: DISABLE
31910: LD_INT 0
31912: PPUSH
// begin enable ;
31913: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
31914: LD_ADDR_VAR 0 1
31918: PUSH
31919: LD_INT 22
31921: PUSH
31922: LD_OWVAR 2
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 21
31933: PUSH
31934: LD_INT 2
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 33
31943: PUSH
31944: LD_INT 3
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: LIST
31955: PPUSH
31956: CALL_OW 69
31960: ST_TO_ADDR
// if not tmp then
31961: LD_VAR 0 1
31965: NOT
31966: IFFALSE 31970
// exit ;
31968: GO 31996
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31970: LD_VAR 0 1
31974: PUSH
31975: LD_INT 1
31977: PPUSH
31978: LD_VAR 0 1
31982: PPUSH
31983: CALL_OW 12
31987: ARRAY
31988: PPUSH
31989: LD_INT 1
31991: PPUSH
31992: CALL_OW 234
// end ;
31996: PPOPN 1
31998: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
31999: LD_EXP 55
32003: IFFALSE 32011
32005: PUSH
32006: LD_EXP 97
32010: AND
32011: IFFALSE 32152
32013: GO 32015
32015: DISABLE
32016: LD_INT 0
32018: PPUSH
32019: PPUSH
32020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32021: LD_ADDR_VAR 0 3
32025: PUSH
32026: LD_INT 22
32028: PUSH
32029: LD_OWVAR 2
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 25
32040: PUSH
32041: LD_INT 1
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PPUSH
32052: CALL_OW 69
32056: ST_TO_ADDR
// if not tmp then
32057: LD_VAR 0 3
32061: NOT
32062: IFFALSE 32066
// exit ;
32064: GO 32152
// un := tmp [ rand ( 1 , tmp ) ] ;
32066: LD_ADDR_VAR 0 2
32070: PUSH
32071: LD_VAR 0 3
32075: PUSH
32076: LD_INT 1
32078: PPUSH
32079: LD_VAR 0 3
32083: PPUSH
32084: CALL_OW 12
32088: ARRAY
32089: ST_TO_ADDR
// if Crawls ( un ) then
32090: LD_VAR 0 2
32094: PPUSH
32095: CALL_OW 318
32099: IFFALSE 32110
// ComWalk ( un ) ;
32101: LD_VAR 0 2
32105: PPUSH
32106: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
32110: LD_VAR 0 2
32114: PPUSH
32115: LD_INT 9
32117: PPUSH
32118: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
32122: LD_INT 28
32124: PPUSH
32125: LD_OWVAR 2
32129: PPUSH
32130: LD_INT 2
32132: PPUSH
32133: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
32137: LD_INT 29
32139: PPUSH
32140: LD_OWVAR 2
32144: PPUSH
32145: LD_INT 2
32147: PPUSH
32148: CALL_OW 322
// end ;
32152: PPOPN 3
32154: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
32155: LD_EXP 55
32159: IFFALSE 32167
32161: PUSH
32162: LD_EXP 98
32166: AND
32167: IFFALSE 32278
32169: GO 32171
32171: DISABLE
32172: LD_INT 0
32174: PPUSH
32175: PPUSH
32176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32177: LD_ADDR_VAR 0 3
32181: PUSH
32182: LD_INT 22
32184: PUSH
32185: LD_OWVAR 2
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 25
32196: PUSH
32197: LD_INT 1
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PPUSH
32208: CALL_OW 69
32212: ST_TO_ADDR
// if not tmp then
32213: LD_VAR 0 3
32217: NOT
32218: IFFALSE 32222
// exit ;
32220: GO 32278
// un := tmp [ rand ( 1 , tmp ) ] ;
32222: LD_ADDR_VAR 0 2
32226: PUSH
32227: LD_VAR 0 3
32231: PUSH
32232: LD_INT 1
32234: PPUSH
32235: LD_VAR 0 3
32239: PPUSH
32240: CALL_OW 12
32244: ARRAY
32245: ST_TO_ADDR
// if Crawls ( un ) then
32246: LD_VAR 0 2
32250: PPUSH
32251: CALL_OW 318
32255: IFFALSE 32266
// ComWalk ( un ) ;
32257: LD_VAR 0 2
32261: PPUSH
32262: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32266: LD_VAR 0 2
32270: PPUSH
32271: LD_INT 8
32273: PPUSH
32274: CALL_OW 336
// end ;
32278: PPOPN 3
32280: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
32281: LD_EXP 55
32285: IFFALSE 32293
32287: PUSH
32288: LD_EXP 99
32292: AND
32293: IFFALSE 32437
32295: GO 32297
32297: DISABLE
32298: LD_INT 0
32300: PPUSH
32301: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
32302: LD_ADDR_VAR 0 2
32306: PUSH
32307: LD_INT 22
32309: PUSH
32310: LD_OWVAR 2
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 21
32321: PUSH
32322: LD_INT 2
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 2
32331: PUSH
32332: LD_INT 34
32334: PUSH
32335: LD_INT 12
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 34
32344: PUSH
32345: LD_INT 51
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 34
32354: PUSH
32355: LD_INT 32
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: LIST
32372: PPUSH
32373: CALL_OW 69
32377: ST_TO_ADDR
// if not tmp then
32378: LD_VAR 0 2
32382: NOT
32383: IFFALSE 32387
// exit ;
32385: GO 32437
// for i in tmp do
32387: LD_ADDR_VAR 0 1
32391: PUSH
32392: LD_VAR 0 2
32396: PUSH
32397: FOR_IN
32398: IFFALSE 32435
// if GetCargo ( i , mat_artifact ) = 0 then
32400: LD_VAR 0 1
32404: PPUSH
32405: LD_INT 4
32407: PPUSH
32408: CALL_OW 289
32412: PUSH
32413: LD_INT 0
32415: EQUAL
32416: IFFALSE 32433
// SetCargo ( i , mat_siberit , 100 ) ;
32418: LD_VAR 0 1
32422: PPUSH
32423: LD_INT 3
32425: PPUSH
32426: LD_INT 100
32428: PPUSH
32429: CALL_OW 290
32433: GO 32397
32435: POP
32436: POP
// end ;
32437: PPOPN 2
32439: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
32440: LD_EXP 55
32444: IFFALSE 32452
32446: PUSH
32447: LD_EXP 100
32451: AND
32452: IFFALSE 32635
32454: GO 32456
32456: DISABLE
32457: LD_INT 0
32459: PPUSH
32460: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32461: LD_ADDR_VAR 0 2
32465: PUSH
32466: LD_INT 22
32468: PUSH
32469: LD_OWVAR 2
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PPUSH
32478: CALL_OW 69
32482: ST_TO_ADDR
// if not tmp then
32483: LD_VAR 0 2
32487: NOT
32488: IFFALSE 32492
// exit ;
32490: GO 32635
// for i := 1 to 2 do
32492: LD_ADDR_VAR 0 1
32496: PUSH
32497: DOUBLE
32498: LD_INT 1
32500: DEC
32501: ST_TO_ADDR
32502: LD_INT 2
32504: PUSH
32505: FOR_TO
32506: IFFALSE 32633
// begin uc_side := your_side ;
32508: LD_ADDR_OWVAR 20
32512: PUSH
32513: LD_OWVAR 2
32517: ST_TO_ADDR
// uc_nation := nation_american ;
32518: LD_ADDR_OWVAR 21
32522: PUSH
32523: LD_INT 1
32525: ST_TO_ADDR
// vc_chassis := us_morphling ;
32526: LD_ADDR_OWVAR 37
32530: PUSH
32531: LD_INT 5
32533: ST_TO_ADDR
// vc_engine := engine_siberite ;
32534: LD_ADDR_OWVAR 39
32538: PUSH
32539: LD_INT 3
32541: ST_TO_ADDR
// vc_control := control_computer ;
32542: LD_ADDR_OWVAR 38
32546: PUSH
32547: LD_INT 3
32549: ST_TO_ADDR
// vc_weapon := us_double_laser ;
32550: LD_ADDR_OWVAR 40
32554: PUSH
32555: LD_INT 10
32557: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
32558: LD_VAR 0 2
32562: PUSH
32563: LD_INT 1
32565: ARRAY
32566: PPUSH
32567: CALL_OW 310
32571: NOT
32572: IFFALSE 32619
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
32574: CALL_OW 45
32578: PPUSH
32579: LD_VAR 0 2
32583: PUSH
32584: LD_INT 1
32586: ARRAY
32587: PPUSH
32588: CALL_OW 250
32592: PPUSH
32593: LD_VAR 0 2
32597: PUSH
32598: LD_INT 1
32600: ARRAY
32601: PPUSH
32602: CALL_OW 251
32606: PPUSH
32607: LD_INT 12
32609: PPUSH
32610: LD_INT 1
32612: PPUSH
32613: CALL_OW 50
32617: GO 32631
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
32619: CALL_OW 45
32623: PPUSH
32624: LD_INT 1
32626: PPUSH
32627: CALL_OW 51
// end ;
32631: GO 32505
32633: POP
32634: POP
// end ;
32635: PPOPN 2
32637: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
32638: LD_EXP 55
32642: IFFALSE 32650
32644: PUSH
32645: LD_EXP 101
32649: AND
32650: IFFALSE 32872
32652: GO 32654
32654: DISABLE
32655: LD_INT 0
32657: PPUSH
32658: PPUSH
32659: PPUSH
32660: PPUSH
32661: PPUSH
32662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32663: LD_ADDR_VAR 0 6
32667: PUSH
32668: LD_INT 22
32670: PUSH
32671: LD_OWVAR 2
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 21
32682: PUSH
32683: LD_INT 1
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 3
32692: PUSH
32693: LD_INT 23
32695: PUSH
32696: LD_INT 0
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: LIST
32711: PPUSH
32712: CALL_OW 69
32716: ST_TO_ADDR
// if not tmp then
32717: LD_VAR 0 6
32721: NOT
32722: IFFALSE 32726
// exit ;
32724: GO 32872
// s1 := rand ( 1 , 4 ) ;
32726: LD_ADDR_VAR 0 2
32730: PUSH
32731: LD_INT 1
32733: PPUSH
32734: LD_INT 4
32736: PPUSH
32737: CALL_OW 12
32741: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
32742: LD_ADDR_VAR 0 4
32746: PUSH
32747: LD_VAR 0 6
32751: PUSH
32752: LD_INT 1
32754: ARRAY
32755: PPUSH
32756: LD_VAR 0 2
32760: PPUSH
32761: CALL_OW 259
32765: ST_TO_ADDR
// if s1 = 1 then
32766: LD_VAR 0 2
32770: PUSH
32771: LD_INT 1
32773: EQUAL
32774: IFFALSE 32794
// s2 := rand ( 2 , 4 ) else
32776: LD_ADDR_VAR 0 3
32780: PUSH
32781: LD_INT 2
32783: PPUSH
32784: LD_INT 4
32786: PPUSH
32787: CALL_OW 12
32791: ST_TO_ADDR
32792: GO 32802
// s2 := 1 ;
32794: LD_ADDR_VAR 0 3
32798: PUSH
32799: LD_INT 1
32801: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
32802: LD_ADDR_VAR 0 5
32806: PUSH
32807: LD_VAR 0 6
32811: PUSH
32812: LD_INT 1
32814: ARRAY
32815: PPUSH
32816: LD_VAR 0 3
32820: PPUSH
32821: CALL_OW 259
32825: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
32826: LD_VAR 0 6
32830: PUSH
32831: LD_INT 1
32833: ARRAY
32834: PPUSH
32835: LD_VAR 0 2
32839: PPUSH
32840: LD_VAR 0 5
32844: PPUSH
32845: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
32849: LD_VAR 0 6
32853: PUSH
32854: LD_INT 1
32856: ARRAY
32857: PPUSH
32858: LD_VAR 0 3
32862: PPUSH
32863: LD_VAR 0 4
32867: PPUSH
32868: CALL_OW 237
// end ;
32872: PPOPN 6
32874: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
32875: LD_EXP 55
32879: IFFALSE 32887
32881: PUSH
32882: LD_EXP 102
32886: AND
32887: IFFALSE 32966
32889: GO 32891
32891: DISABLE
32892: LD_INT 0
32894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
32895: LD_ADDR_VAR 0 1
32899: PUSH
32900: LD_INT 22
32902: PUSH
32903: LD_OWVAR 2
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 30
32914: PUSH
32915: LD_INT 3
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PPUSH
32926: CALL_OW 69
32930: ST_TO_ADDR
// if not tmp then
32931: LD_VAR 0 1
32935: NOT
32936: IFFALSE 32940
// exit ;
32938: GO 32966
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32940: LD_VAR 0 1
32944: PUSH
32945: LD_INT 1
32947: PPUSH
32948: LD_VAR 0 1
32952: PPUSH
32953: CALL_OW 12
32957: ARRAY
32958: PPUSH
32959: LD_INT 1
32961: PPUSH
32962: CALL_OW 234
// end ;
32966: PPOPN 1
32968: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
32969: LD_EXP 55
32973: IFFALSE 32981
32975: PUSH
32976: LD_EXP 103
32980: AND
32981: IFFALSE 33093
32983: GO 32985
32985: DISABLE
32986: LD_INT 0
32988: PPUSH
32989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
32990: LD_ADDR_VAR 0 2
32994: PUSH
32995: LD_INT 22
32997: PUSH
32998: LD_OWVAR 2
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 2
33009: PUSH
33010: LD_INT 30
33012: PUSH
33013: LD_INT 27
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 30
33022: PUSH
33023: LD_INT 26
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 30
33032: PUSH
33033: LD_INT 28
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PPUSH
33050: CALL_OW 69
33054: ST_TO_ADDR
// if not tmp then
33055: LD_VAR 0 2
33059: NOT
33060: IFFALSE 33064
// exit ;
33062: GO 33093
// for i in tmp do
33064: LD_ADDR_VAR 0 1
33068: PUSH
33069: LD_VAR 0 2
33073: PUSH
33074: FOR_IN
33075: IFFALSE 33091
// SetLives ( i , 1 ) ;
33077: LD_VAR 0 1
33081: PPUSH
33082: LD_INT 1
33084: PPUSH
33085: CALL_OW 234
33089: GO 33074
33091: POP
33092: POP
// end ;
33093: PPOPN 2
33095: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
33096: LD_EXP 55
33100: IFFALSE 33108
33102: PUSH
33103: LD_EXP 104
33107: AND
33108: IFFALSE 33395
33110: GO 33112
33112: DISABLE
33113: LD_INT 0
33115: PPUSH
33116: PPUSH
33117: PPUSH
// begin i := rand ( 1 , 7 ) ;
33118: LD_ADDR_VAR 0 1
33122: PUSH
33123: LD_INT 1
33125: PPUSH
33126: LD_INT 7
33128: PPUSH
33129: CALL_OW 12
33133: ST_TO_ADDR
// case i of 1 :
33134: LD_VAR 0 1
33138: PUSH
33139: LD_INT 1
33141: DOUBLE
33142: EQUAL
33143: IFTRUE 33147
33145: GO 33157
33147: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
33148: LD_STRING earthquake(getX(game), 0, 32)
33150: PPUSH
33151: CALL_OW 559
33155: GO 33395
33157: LD_INT 2
33159: DOUBLE
33160: EQUAL
33161: IFTRUE 33165
33163: GO 33179
33165: POP
// begin ToLua ( displayStucuk(); ) ;
33166: LD_STRING displayStucuk();
33168: PPUSH
33169: CALL_OW 559
// ResetFog ;
33173: CALL_OW 335
// end ; 3 :
33177: GO 33395
33179: LD_INT 3
33181: DOUBLE
33182: EQUAL
33183: IFTRUE 33187
33185: GO 33291
33187: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33188: LD_ADDR_VAR 0 2
33192: PUSH
33193: LD_INT 22
33195: PUSH
33196: LD_OWVAR 2
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 25
33207: PUSH
33208: LD_INT 1
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PPUSH
33219: CALL_OW 69
33223: ST_TO_ADDR
// if not tmp then
33224: LD_VAR 0 2
33228: NOT
33229: IFFALSE 33233
// exit ;
33231: GO 33395
// un := tmp [ rand ( 1 , tmp ) ] ;
33233: LD_ADDR_VAR 0 3
33237: PUSH
33238: LD_VAR 0 2
33242: PUSH
33243: LD_INT 1
33245: PPUSH
33246: LD_VAR 0 2
33250: PPUSH
33251: CALL_OW 12
33255: ARRAY
33256: ST_TO_ADDR
// if Crawls ( un ) then
33257: LD_VAR 0 3
33261: PPUSH
33262: CALL_OW 318
33266: IFFALSE 33277
// ComWalk ( un ) ;
33268: LD_VAR 0 3
33272: PPUSH
33273: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33277: LD_VAR 0 3
33281: PPUSH
33282: LD_INT 8
33284: PPUSH
33285: CALL_OW 336
// end ; 4 :
33289: GO 33395
33291: LD_INT 4
33293: DOUBLE
33294: EQUAL
33295: IFTRUE 33299
33297: GO 33373
33299: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33300: LD_ADDR_VAR 0 2
33304: PUSH
33305: LD_INT 22
33307: PUSH
33308: LD_OWVAR 2
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 30
33319: PUSH
33320: LD_INT 29
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PPUSH
33331: CALL_OW 69
33335: ST_TO_ADDR
// if not tmp then
33336: LD_VAR 0 2
33340: NOT
33341: IFFALSE 33345
// exit ;
33343: GO 33395
// CenterNowOnUnits ( tmp [ 1 ] ) ;
33345: LD_VAR 0 2
33349: PUSH
33350: LD_INT 1
33352: ARRAY
33353: PPUSH
33354: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
33358: LD_VAR 0 2
33362: PUSH
33363: LD_INT 1
33365: ARRAY
33366: PPUSH
33367: CALL_OW 65
// end ; 5 .. 7 :
33371: GO 33395
33373: LD_INT 5
33375: DOUBLE
33376: GREATEREQUAL
33377: IFFALSE 33385
33379: LD_INT 7
33381: DOUBLE
33382: LESSEQUAL
33383: IFTRUE 33387
33385: GO 33394
33387: POP
// StreamSibBomb ; end ;
33388: CALL 29576 0 0
33392: GO 33395
33394: POP
// end ;
33395: PPOPN 3
33397: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
33398: LD_EXP 55
33402: IFFALSE 33410
33404: PUSH
33405: LD_EXP 105
33409: AND
33410: IFFALSE 33566
33412: GO 33414
33414: DISABLE
33415: LD_INT 0
33417: PPUSH
33418: PPUSH
33419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
33420: LD_ADDR_VAR 0 2
33424: PUSH
33425: LD_INT 81
33427: PUSH
33428: LD_OWVAR 2
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 2
33439: PUSH
33440: LD_INT 21
33442: PUSH
33443: LD_INT 1
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 21
33452: PUSH
33453: LD_INT 2
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: LIST
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PPUSH
33469: CALL_OW 69
33473: ST_TO_ADDR
// if not tmp then
33474: LD_VAR 0 2
33478: NOT
33479: IFFALSE 33483
// exit ;
33481: GO 33566
// p := 0 ;
33483: LD_ADDR_VAR 0 3
33487: PUSH
33488: LD_INT 0
33490: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33491: LD_INT 35
33493: PPUSH
33494: CALL_OW 67
// p := p + 1 ;
33498: LD_ADDR_VAR 0 3
33502: PUSH
33503: LD_VAR 0 3
33507: PUSH
33508: LD_INT 1
33510: PLUS
33511: ST_TO_ADDR
// for i in tmp do
33512: LD_ADDR_VAR 0 1
33516: PUSH
33517: LD_VAR 0 2
33521: PUSH
33522: FOR_IN
33523: IFFALSE 33554
// if GetLives ( i ) < 1000 then
33525: LD_VAR 0 1
33529: PPUSH
33530: CALL_OW 256
33534: PUSH
33535: LD_INT 1000
33537: LESS
33538: IFFALSE 33552
// SetLives ( i , 1000 ) ;
33540: LD_VAR 0 1
33544: PPUSH
33545: LD_INT 1000
33547: PPUSH
33548: CALL_OW 234
33552: GO 33522
33554: POP
33555: POP
// until p > 20 ;
33556: LD_VAR 0 3
33560: PUSH
33561: LD_INT 20
33563: GREATER
33564: IFFALSE 33491
// end ;
33566: PPOPN 3
33568: END
// every 0 0$1 trigger StreamModeActive and sTime do
33569: LD_EXP 55
33573: IFFALSE 33581
33575: PUSH
33576: LD_EXP 106
33580: AND
33581: IFFALSE 33616
33583: GO 33585
33585: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
33586: LD_INT 28
33588: PPUSH
33589: LD_OWVAR 2
33593: PPUSH
33594: LD_INT 2
33596: PPUSH
33597: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
33601: LD_INT 30
33603: PPUSH
33604: LD_OWVAR 2
33608: PPUSH
33609: LD_INT 2
33611: PPUSH
33612: CALL_OW 322
// end ;
33616: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
33617: LD_EXP 55
33621: IFFALSE 33629
33623: PUSH
33624: LD_EXP 107
33628: AND
33629: IFFALSE 33750
33631: GO 33633
33633: DISABLE
33634: LD_INT 0
33636: PPUSH
33637: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33638: LD_ADDR_VAR 0 2
33642: PUSH
33643: LD_INT 22
33645: PUSH
33646: LD_OWVAR 2
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 21
33657: PUSH
33658: LD_INT 1
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 3
33667: PUSH
33668: LD_INT 23
33670: PUSH
33671: LD_INT 0
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: LIST
33686: PPUSH
33687: CALL_OW 69
33691: ST_TO_ADDR
// if not tmp then
33692: LD_VAR 0 2
33696: NOT
33697: IFFALSE 33701
// exit ;
33699: GO 33750
// for i in tmp do
33701: LD_ADDR_VAR 0 1
33705: PUSH
33706: LD_VAR 0 2
33710: PUSH
33711: FOR_IN
33712: IFFALSE 33748
// begin if Crawls ( i ) then
33714: LD_VAR 0 1
33718: PPUSH
33719: CALL_OW 318
33723: IFFALSE 33734
// ComWalk ( i ) ;
33725: LD_VAR 0 1
33729: PPUSH
33730: CALL_OW 138
// SetClass ( i , 2 ) ;
33734: LD_VAR 0 1
33738: PPUSH
33739: LD_INT 2
33741: PPUSH
33742: CALL_OW 336
// end ;
33746: GO 33711
33748: POP
33749: POP
// end ;
33750: PPOPN 2
33752: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
33753: LD_EXP 55
33757: IFFALSE 33765
33759: PUSH
33760: LD_EXP 108
33764: AND
33765: IFFALSE 34055
33767: GO 33769
33769: DISABLE
33770: LD_INT 0
33772: PPUSH
33773: PPUSH
33774: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
33775: LD_OWVAR 2
33779: PPUSH
33780: LD_INT 9
33782: PPUSH
33783: LD_INT 1
33785: PPUSH
33786: LD_INT 1
33788: PPUSH
33789: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
33793: LD_INT 9
33795: PPUSH
33796: LD_OWVAR 2
33800: PPUSH
33801: CALL_OW 343
// uc_side := 9 ;
33805: LD_ADDR_OWVAR 20
33809: PUSH
33810: LD_INT 9
33812: ST_TO_ADDR
// uc_nation := 2 ;
33813: LD_ADDR_OWVAR 21
33817: PUSH
33818: LD_INT 2
33820: ST_TO_ADDR
// hc_name := Dark Warrior ;
33821: LD_ADDR_OWVAR 26
33825: PUSH
33826: LD_STRING Dark Warrior
33828: ST_TO_ADDR
// hc_gallery :=  ;
33829: LD_ADDR_OWVAR 33
33833: PUSH
33834: LD_STRING 
33836: ST_TO_ADDR
// hc_noskilllimit := true ;
33837: LD_ADDR_OWVAR 76
33841: PUSH
33842: LD_INT 1
33844: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
33845: LD_ADDR_OWVAR 31
33849: PUSH
33850: LD_INT 30
33852: PUSH
33853: LD_INT 30
33855: PUSH
33856: LD_INT 30
33858: PUSH
33859: LD_INT 30
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: ST_TO_ADDR
// un := CreateHuman ;
33868: LD_ADDR_VAR 0 3
33872: PUSH
33873: CALL_OW 44
33877: ST_TO_ADDR
// hc_noskilllimit := false ;
33878: LD_ADDR_OWVAR 76
33882: PUSH
33883: LD_INT 0
33885: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33886: LD_VAR 0 3
33890: PPUSH
33891: LD_INT 1
33893: PPUSH
33894: CALL_OW 51
// ToLua ( playRanger() ) ;
33898: LD_STRING playRanger()
33900: PPUSH
33901: CALL_OW 559
// p := 0 ;
33905: LD_ADDR_VAR 0 2
33909: PUSH
33910: LD_INT 0
33912: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33913: LD_INT 35
33915: PPUSH
33916: CALL_OW 67
// p := p + 1 ;
33920: LD_ADDR_VAR 0 2
33924: PUSH
33925: LD_VAR 0 2
33929: PUSH
33930: LD_INT 1
33932: PLUS
33933: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
33934: LD_VAR 0 3
33938: PPUSH
33939: CALL_OW 256
33943: PUSH
33944: LD_INT 1000
33946: LESS
33947: IFFALSE 33961
// SetLives ( un , 1000 ) ;
33949: LD_VAR 0 3
33953: PPUSH
33954: LD_INT 1000
33956: PPUSH
33957: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
33961: LD_VAR 0 3
33965: PPUSH
33966: LD_INT 81
33968: PUSH
33969: LD_OWVAR 2
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 91
33980: PUSH
33981: LD_VAR 0 3
33985: PUSH
33986: LD_INT 30
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: LIST
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PPUSH
33998: CALL_OW 69
34002: PPUSH
34003: LD_VAR 0 3
34007: PPUSH
34008: CALL_OW 74
34012: PPUSH
34013: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
34017: LD_VAR 0 2
34021: PUSH
34022: LD_INT 80
34024: GREATER
34025: IFTRUE 34038
34027: PUSH
34028: LD_VAR 0 3
34032: PPUSH
34033: CALL_OW 301
34037: OR
34038: IFFALSE 33913
// if un then
34040: LD_VAR 0 3
34044: IFFALSE 34055
// RemoveUnit ( un ) ;
34046: LD_VAR 0 3
34050: PPUSH
34051: CALL_OW 64
// end ;
34055: PPOPN 3
34057: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
34058: LD_EXP 109
34062: IFFALSE 34178
34064: GO 34066
34066: DISABLE
34067: LD_INT 0
34069: PPUSH
34070: PPUSH
34071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
34072: LD_ADDR_VAR 0 2
34076: PUSH
34077: LD_INT 81
34079: PUSH
34080: LD_OWVAR 2
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 21
34091: PUSH
34092: LD_INT 1
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PPUSH
34103: CALL_OW 69
34107: ST_TO_ADDR
// ToLua ( playComputer() ) ;
34108: LD_STRING playComputer()
34110: PPUSH
34111: CALL_OW 559
// if not tmp then
34115: LD_VAR 0 2
34119: NOT
34120: IFFALSE 34124
// exit ;
34122: GO 34178
// for i in tmp do
34124: LD_ADDR_VAR 0 1
34128: PUSH
34129: LD_VAR 0 2
34133: PUSH
34134: FOR_IN
34135: IFFALSE 34176
// for j := 1 to 4 do
34137: LD_ADDR_VAR 0 3
34141: PUSH
34142: DOUBLE
34143: LD_INT 1
34145: DEC
34146: ST_TO_ADDR
34147: LD_INT 4
34149: PUSH
34150: FOR_TO
34151: IFFALSE 34172
// SetSkill ( i , j , 10 ) ;
34153: LD_VAR 0 1
34157: PPUSH
34158: LD_VAR 0 3
34162: PPUSH
34163: LD_INT 10
34165: PPUSH
34166: CALL_OW 237
34170: GO 34150
34172: POP
34173: POP
34174: GO 34134
34176: POP
34177: POP
// end ;
34178: PPOPN 3
34180: END
// every 0 0$1 trigger s30 do var i , tmp ;
34181: LD_EXP 110
34185: IFFALSE 34254
34187: GO 34189
34189: DISABLE
34190: LD_INT 0
34192: PPUSH
34193: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34194: LD_ADDR_VAR 0 2
34198: PUSH
34199: LD_INT 22
34201: PUSH
34202: LD_OWVAR 2
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PPUSH
34211: CALL_OW 69
34215: ST_TO_ADDR
// if not tmp then
34216: LD_VAR 0 2
34220: NOT
34221: IFFALSE 34225
// exit ;
34223: GO 34254
// for i in tmp do
34225: LD_ADDR_VAR 0 1
34229: PUSH
34230: LD_VAR 0 2
34234: PUSH
34235: FOR_IN
34236: IFFALSE 34252
// SetLives ( i , 300 ) ;
34238: LD_VAR 0 1
34242: PPUSH
34243: LD_INT 300
34245: PPUSH
34246: CALL_OW 234
34250: GO 34235
34252: POP
34253: POP
// end ;
34254: PPOPN 2
34256: END
// every 0 0$1 trigger s60 do var i , tmp ;
34257: LD_EXP 111
34261: IFFALSE 34330
34263: GO 34265
34265: DISABLE
34266: LD_INT 0
34268: PPUSH
34269: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34270: LD_ADDR_VAR 0 2
34274: PUSH
34275: LD_INT 22
34277: PUSH
34278: LD_OWVAR 2
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PPUSH
34287: CALL_OW 69
34291: ST_TO_ADDR
// if not tmp then
34292: LD_VAR 0 2
34296: NOT
34297: IFFALSE 34301
// exit ;
34299: GO 34330
// for i in tmp do
34301: LD_ADDR_VAR 0 1
34305: PUSH
34306: LD_VAR 0 2
34310: PUSH
34311: FOR_IN
34312: IFFALSE 34328
// SetLives ( i , 600 ) ;
34314: LD_VAR 0 1
34318: PPUSH
34319: LD_INT 600
34321: PPUSH
34322: CALL_OW 234
34326: GO 34311
34328: POP
34329: POP
// end ;
34330: PPOPN 2
34332: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34333: LD_INT 0
34335: PPUSH
// case cmd of 301 :
34336: LD_VAR 0 1
34340: PUSH
34341: LD_INT 301
34343: DOUBLE
34344: EQUAL
34345: IFTRUE 34349
34347: GO 34381
34349: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
34350: LD_VAR 0 6
34354: PPUSH
34355: LD_VAR 0 7
34359: PPUSH
34360: LD_VAR 0 8
34364: PPUSH
34365: LD_VAR 0 4
34369: PPUSH
34370: LD_VAR 0 5
34374: PPUSH
34375: CALL 35594 0 5
34379: GO 34502
34381: LD_INT 302
34383: DOUBLE
34384: EQUAL
34385: IFTRUE 34389
34387: GO 34426
34389: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
34390: LD_VAR 0 6
34394: PPUSH
34395: LD_VAR 0 7
34399: PPUSH
34400: LD_VAR 0 8
34404: PPUSH
34405: LD_VAR 0 9
34409: PPUSH
34410: LD_VAR 0 4
34414: PPUSH
34415: LD_VAR 0 5
34419: PPUSH
34420: CALL 35685 0 6
34424: GO 34502
34426: LD_INT 303
34428: DOUBLE
34429: EQUAL
34430: IFTRUE 34434
34432: GO 34471
34434: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
34435: LD_VAR 0 6
34439: PPUSH
34440: LD_VAR 0 7
34444: PPUSH
34445: LD_VAR 0 8
34449: PPUSH
34450: LD_VAR 0 9
34454: PPUSH
34455: LD_VAR 0 4
34459: PPUSH
34460: LD_VAR 0 5
34464: PPUSH
34465: CALL 34507 0 6
34469: GO 34502
34471: LD_INT 304
34473: DOUBLE
34474: EQUAL
34475: IFTRUE 34479
34477: GO 34501
34479: POP
// hHackTeleport ( unit , x , y ) ; end ;
34480: LD_VAR 0 2
34484: PPUSH
34485: LD_VAR 0 4
34489: PPUSH
34490: LD_VAR 0 5
34494: PPUSH
34495: CALL 36278 0 3
34499: GO 34502
34501: POP
// end ;
34502: LD_VAR 0 12
34506: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
34507: LD_INT 0
34509: PPUSH
34510: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
34511: LD_VAR 0 1
34515: PUSH
34516: LD_INT 1
34518: LESS
34519: IFTRUE 34531
34521: PUSH
34522: LD_VAR 0 1
34526: PUSH
34527: LD_INT 3
34529: GREATER
34530: OR
34531: IFTRUE 34549
34533: PUSH
34534: LD_VAR 0 5
34538: PPUSH
34539: LD_VAR 0 6
34543: PPUSH
34544: CALL_OW 428
34548: OR
34549: IFFALSE 34553
// exit ;
34551: GO 35281
// uc_side := your_side ;
34553: LD_ADDR_OWVAR 20
34557: PUSH
34558: LD_OWVAR 2
34562: ST_TO_ADDR
// uc_nation := nation ;
34563: LD_ADDR_OWVAR 21
34567: PUSH
34568: LD_VAR 0 1
34572: ST_TO_ADDR
// bc_level = 1 ;
34573: LD_ADDR_OWVAR 43
34577: PUSH
34578: LD_INT 1
34580: ST_TO_ADDR
// case btype of 1 :
34581: LD_VAR 0 2
34585: PUSH
34586: LD_INT 1
34588: DOUBLE
34589: EQUAL
34590: IFTRUE 34594
34592: GO 34605
34594: POP
// bc_type := b_depot ; 2 :
34595: LD_ADDR_OWVAR 42
34599: PUSH
34600: LD_INT 0
34602: ST_TO_ADDR
34603: GO 35225
34605: LD_INT 2
34607: DOUBLE
34608: EQUAL
34609: IFTRUE 34613
34611: GO 34624
34613: POP
// bc_type := b_warehouse ; 3 :
34614: LD_ADDR_OWVAR 42
34618: PUSH
34619: LD_INT 1
34621: ST_TO_ADDR
34622: GO 35225
34624: LD_INT 3
34626: DOUBLE
34627: EQUAL
34628: IFTRUE 34632
34630: GO 34643
34632: POP
// bc_type := b_lab ; 4 .. 9 :
34633: LD_ADDR_OWVAR 42
34637: PUSH
34638: LD_INT 6
34640: ST_TO_ADDR
34641: GO 35225
34643: LD_INT 4
34645: DOUBLE
34646: GREATEREQUAL
34647: IFFALSE 34655
34649: LD_INT 9
34651: DOUBLE
34652: LESSEQUAL
34653: IFTRUE 34657
34655: GO 34717
34657: POP
// begin bc_type := b_lab_half ;
34658: LD_ADDR_OWVAR 42
34662: PUSH
34663: LD_INT 7
34665: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
34666: LD_ADDR_OWVAR 44
34670: PUSH
34671: LD_INT 10
34673: PUSH
34674: LD_INT 11
34676: PUSH
34677: LD_INT 12
34679: PUSH
34680: LD_INT 15
34682: PUSH
34683: LD_INT 14
34685: PUSH
34686: LD_INT 13
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: PUSH
34697: LD_VAR 0 2
34701: PUSH
34702: LD_INT 3
34704: MINUS
34705: ARRAY
34706: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
34707: LD_ADDR_OWVAR 45
34711: PUSH
34712: LD_INT 9
34714: ST_TO_ADDR
// end ; 10 .. 13 :
34715: GO 35225
34717: LD_INT 10
34719: DOUBLE
34720: GREATEREQUAL
34721: IFFALSE 34729
34723: LD_INT 13
34725: DOUBLE
34726: LESSEQUAL
34727: IFTRUE 34731
34729: GO 34808
34731: POP
// begin bc_type := b_lab_full ;
34732: LD_ADDR_OWVAR 42
34736: PUSH
34737: LD_INT 8
34739: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
34740: LD_ADDR_OWVAR 44
34744: PUSH
34745: LD_INT 10
34747: PUSH
34748: LD_INT 12
34750: PUSH
34751: LD_INT 14
34753: PUSH
34754: LD_INT 13
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: PUSH
34763: LD_VAR 0 2
34767: PUSH
34768: LD_INT 9
34770: MINUS
34771: ARRAY
34772: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
34773: LD_ADDR_OWVAR 45
34777: PUSH
34778: LD_INT 11
34780: PUSH
34781: LD_INT 15
34783: PUSH
34784: LD_INT 12
34786: PUSH
34787: LD_INT 15
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: PUSH
34796: LD_VAR 0 2
34800: PUSH
34801: LD_INT 9
34803: MINUS
34804: ARRAY
34805: ST_TO_ADDR
// end ; 14 :
34806: GO 35225
34808: LD_INT 14
34810: DOUBLE
34811: EQUAL
34812: IFTRUE 34816
34814: GO 34827
34816: POP
// bc_type := b_workshop ; 15 :
34817: LD_ADDR_OWVAR 42
34821: PUSH
34822: LD_INT 2
34824: ST_TO_ADDR
34825: GO 35225
34827: LD_INT 15
34829: DOUBLE
34830: EQUAL
34831: IFTRUE 34835
34833: GO 34846
34835: POP
// bc_type := b_factory ; 16 :
34836: LD_ADDR_OWVAR 42
34840: PUSH
34841: LD_INT 3
34843: ST_TO_ADDR
34844: GO 35225
34846: LD_INT 16
34848: DOUBLE
34849: EQUAL
34850: IFTRUE 34854
34852: GO 34865
34854: POP
// bc_type := b_ext_gun ; 17 :
34855: LD_ADDR_OWVAR 42
34859: PUSH
34860: LD_INT 17
34862: ST_TO_ADDR
34863: GO 35225
34865: LD_INT 17
34867: DOUBLE
34868: EQUAL
34869: IFTRUE 34873
34871: GO 34901
34873: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
34874: LD_ADDR_OWVAR 42
34878: PUSH
34879: LD_INT 19
34881: PUSH
34882: LD_INT 23
34884: PUSH
34885: LD_INT 19
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: LIST
34892: PUSH
34893: LD_VAR 0 1
34897: ARRAY
34898: ST_TO_ADDR
34899: GO 35225
34901: LD_INT 18
34903: DOUBLE
34904: EQUAL
34905: IFTRUE 34909
34907: GO 34920
34909: POP
// bc_type := b_ext_radar ; 19 :
34910: LD_ADDR_OWVAR 42
34914: PUSH
34915: LD_INT 20
34917: ST_TO_ADDR
34918: GO 35225
34920: LD_INT 19
34922: DOUBLE
34923: EQUAL
34924: IFTRUE 34928
34926: GO 34939
34928: POP
// bc_type := b_ext_radio ; 20 :
34929: LD_ADDR_OWVAR 42
34933: PUSH
34934: LD_INT 22
34936: ST_TO_ADDR
34937: GO 35225
34939: LD_INT 20
34941: DOUBLE
34942: EQUAL
34943: IFTRUE 34947
34945: GO 34958
34947: POP
// bc_type := b_ext_siberium ; 21 :
34948: LD_ADDR_OWVAR 42
34952: PUSH
34953: LD_INT 21
34955: ST_TO_ADDR
34956: GO 35225
34958: LD_INT 21
34960: DOUBLE
34961: EQUAL
34962: IFTRUE 34966
34964: GO 34977
34966: POP
// bc_type := b_ext_computer ; 22 :
34967: LD_ADDR_OWVAR 42
34971: PUSH
34972: LD_INT 24
34974: ST_TO_ADDR
34975: GO 35225
34977: LD_INT 22
34979: DOUBLE
34980: EQUAL
34981: IFTRUE 34985
34983: GO 34996
34985: POP
// bc_type := b_ext_track ; 23 :
34986: LD_ADDR_OWVAR 42
34990: PUSH
34991: LD_INT 16
34993: ST_TO_ADDR
34994: GO 35225
34996: LD_INT 23
34998: DOUBLE
34999: EQUAL
35000: IFTRUE 35004
35002: GO 35015
35004: POP
// bc_type := b_ext_laser ; 24 :
35005: LD_ADDR_OWVAR 42
35009: PUSH
35010: LD_INT 25
35012: ST_TO_ADDR
35013: GO 35225
35015: LD_INT 24
35017: DOUBLE
35018: EQUAL
35019: IFTRUE 35023
35021: GO 35034
35023: POP
// bc_type := b_control_tower ; 25 :
35024: LD_ADDR_OWVAR 42
35028: PUSH
35029: LD_INT 36
35031: ST_TO_ADDR
35032: GO 35225
35034: LD_INT 25
35036: DOUBLE
35037: EQUAL
35038: IFTRUE 35042
35040: GO 35053
35042: POP
// bc_type := b_breastwork ; 26 :
35043: LD_ADDR_OWVAR 42
35047: PUSH
35048: LD_INT 31
35050: ST_TO_ADDR
35051: GO 35225
35053: LD_INT 26
35055: DOUBLE
35056: EQUAL
35057: IFTRUE 35061
35059: GO 35072
35061: POP
// bc_type := b_bunker ; 27 :
35062: LD_ADDR_OWVAR 42
35066: PUSH
35067: LD_INT 32
35069: ST_TO_ADDR
35070: GO 35225
35072: LD_INT 27
35074: DOUBLE
35075: EQUAL
35076: IFTRUE 35080
35078: GO 35091
35080: POP
// bc_type := b_turret ; 28 :
35081: LD_ADDR_OWVAR 42
35085: PUSH
35086: LD_INT 33
35088: ST_TO_ADDR
35089: GO 35225
35091: LD_INT 28
35093: DOUBLE
35094: EQUAL
35095: IFTRUE 35099
35097: GO 35110
35099: POP
// bc_type := b_armoury ; 29 :
35100: LD_ADDR_OWVAR 42
35104: PUSH
35105: LD_INT 4
35107: ST_TO_ADDR
35108: GO 35225
35110: LD_INT 29
35112: DOUBLE
35113: EQUAL
35114: IFTRUE 35118
35116: GO 35129
35118: POP
// bc_type := b_barracks ; 30 :
35119: LD_ADDR_OWVAR 42
35123: PUSH
35124: LD_INT 5
35126: ST_TO_ADDR
35127: GO 35225
35129: LD_INT 30
35131: DOUBLE
35132: EQUAL
35133: IFTRUE 35137
35135: GO 35148
35137: POP
// bc_type := b_solar_power ; 31 :
35138: LD_ADDR_OWVAR 42
35142: PUSH
35143: LD_INT 27
35145: ST_TO_ADDR
35146: GO 35225
35148: LD_INT 31
35150: DOUBLE
35151: EQUAL
35152: IFTRUE 35156
35154: GO 35167
35156: POP
// bc_type := b_oil_power ; 32 :
35157: LD_ADDR_OWVAR 42
35161: PUSH
35162: LD_INT 26
35164: ST_TO_ADDR
35165: GO 35225
35167: LD_INT 32
35169: DOUBLE
35170: EQUAL
35171: IFTRUE 35175
35173: GO 35186
35175: POP
// bc_type := b_siberite_power ; 33 :
35176: LD_ADDR_OWVAR 42
35180: PUSH
35181: LD_INT 28
35183: ST_TO_ADDR
35184: GO 35225
35186: LD_INT 33
35188: DOUBLE
35189: EQUAL
35190: IFTRUE 35194
35192: GO 35205
35194: POP
// bc_type := b_oil_mine ; 34 :
35195: LD_ADDR_OWVAR 42
35199: PUSH
35200: LD_INT 29
35202: ST_TO_ADDR
35203: GO 35225
35205: LD_INT 34
35207: DOUBLE
35208: EQUAL
35209: IFTRUE 35213
35211: GO 35224
35213: POP
// bc_type := b_siberite_mine ; end ;
35214: LD_ADDR_OWVAR 42
35218: PUSH
35219: LD_INT 30
35221: ST_TO_ADDR
35222: GO 35225
35224: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
35225: LD_ADDR_VAR 0 8
35229: PUSH
35230: LD_VAR 0 5
35234: PPUSH
35235: LD_VAR 0 6
35239: PPUSH
35240: LD_VAR 0 3
35244: PPUSH
35245: CALL_OW 47
35249: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
35250: LD_OWVAR 42
35254: PUSH
35255: LD_INT 32
35257: PUSH
35258: LD_INT 33
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: IN
35265: IFFALSE 35281
// PlaceWeaponTurret ( b , weapon ) ;
35267: LD_VAR 0 8
35271: PPUSH
35272: LD_VAR 0 4
35276: PPUSH
35277: CALL_OW 431
// end ;
35281: LD_VAR 0 7
35285: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
35286: LD_INT 0
35288: PPUSH
35289: PPUSH
35290: PPUSH
35291: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35292: LD_ADDR_VAR 0 4
35296: PUSH
35297: LD_INT 22
35299: PUSH
35300: LD_OWVAR 2
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 2
35311: PUSH
35312: LD_INT 30
35314: PUSH
35315: LD_INT 0
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 30
35324: PUSH
35325: LD_INT 1
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: LIST
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PPUSH
35341: CALL_OW 69
35345: ST_TO_ADDR
// if not tmp then
35346: LD_VAR 0 4
35350: NOT
35351: IFFALSE 35355
// exit ;
35353: GO 35414
// for i in tmp do
35355: LD_ADDR_VAR 0 2
35359: PUSH
35360: LD_VAR 0 4
35364: PUSH
35365: FOR_IN
35366: IFFALSE 35412
// for j = 1 to 3 do
35368: LD_ADDR_VAR 0 3
35372: PUSH
35373: DOUBLE
35374: LD_INT 1
35376: DEC
35377: ST_TO_ADDR
35378: LD_INT 3
35380: PUSH
35381: FOR_TO
35382: IFFALSE 35408
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
35384: LD_VAR 0 2
35388: PPUSH
35389: CALL_OW 274
35393: PPUSH
35394: LD_VAR 0 3
35398: PPUSH
35399: LD_INT 99999
35401: PPUSH
35402: CALL_OW 277
35406: GO 35381
35408: POP
35409: POP
35410: GO 35365
35412: POP
35413: POP
// end ;
35414: LD_VAR 0 1
35418: RET
// export function hHackSetLevel10 ; var i , j ; begin
35419: LD_INT 0
35421: PPUSH
35422: PPUSH
35423: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35424: LD_ADDR_VAR 0 2
35428: PUSH
35429: LD_INT 21
35431: PUSH
35432: LD_INT 1
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PPUSH
35439: CALL_OW 69
35443: PUSH
35444: FOR_IN
35445: IFFALSE 35497
// if IsSelected ( i ) then
35447: LD_VAR 0 2
35451: PPUSH
35452: CALL_OW 306
35456: IFFALSE 35495
// begin for j := 1 to 4 do
35458: LD_ADDR_VAR 0 3
35462: PUSH
35463: DOUBLE
35464: LD_INT 1
35466: DEC
35467: ST_TO_ADDR
35468: LD_INT 4
35470: PUSH
35471: FOR_TO
35472: IFFALSE 35493
// SetSkill ( i , j , 10 ) ;
35474: LD_VAR 0 2
35478: PPUSH
35479: LD_VAR 0 3
35483: PPUSH
35484: LD_INT 10
35486: PPUSH
35487: CALL_OW 237
35491: GO 35471
35493: POP
35494: POP
// end ;
35495: GO 35444
35497: POP
35498: POP
// end ;
35499: LD_VAR 0 1
35503: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
35504: LD_INT 0
35506: PPUSH
35507: PPUSH
35508: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
35509: LD_ADDR_VAR 0 2
35513: PUSH
35514: LD_INT 22
35516: PUSH
35517: LD_OWVAR 2
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PUSH
35526: LD_INT 21
35528: PUSH
35529: LD_INT 1
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PPUSH
35540: CALL_OW 69
35544: PUSH
35545: FOR_IN
35546: IFFALSE 35587
// begin for j := 1 to 4 do
35548: LD_ADDR_VAR 0 3
35552: PUSH
35553: DOUBLE
35554: LD_INT 1
35556: DEC
35557: ST_TO_ADDR
35558: LD_INT 4
35560: PUSH
35561: FOR_TO
35562: IFFALSE 35583
// SetSkill ( i , j , 10 ) ;
35564: LD_VAR 0 2
35568: PPUSH
35569: LD_VAR 0 3
35573: PPUSH
35574: LD_INT 10
35576: PPUSH
35577: CALL_OW 237
35581: GO 35561
35583: POP
35584: POP
// end ;
35585: GO 35545
35587: POP
35588: POP
// end ;
35589: LD_VAR 0 1
35593: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
35594: LD_INT 0
35596: PPUSH
// uc_side := your_side ;
35597: LD_ADDR_OWVAR 20
35601: PUSH
35602: LD_OWVAR 2
35606: ST_TO_ADDR
// uc_nation := nation ;
35607: LD_ADDR_OWVAR 21
35611: PUSH
35612: LD_VAR 0 1
35616: ST_TO_ADDR
// InitHc ;
35617: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
35621: LD_INT 0
35623: PPUSH
35624: LD_VAR 0 2
35628: PPUSH
35629: LD_VAR 0 3
35633: PPUSH
35634: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
35638: LD_VAR 0 4
35642: PPUSH
35643: LD_VAR 0 5
35647: PPUSH
35648: CALL_OW 428
35652: PUSH
35653: LD_INT 0
35655: EQUAL
35656: IFFALSE 35680
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
35658: CALL_OW 44
35662: PPUSH
35663: LD_VAR 0 4
35667: PPUSH
35668: LD_VAR 0 5
35672: PPUSH
35673: LD_INT 1
35675: PPUSH
35676: CALL_OW 48
// end ;
35680: LD_VAR 0 6
35684: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
35685: LD_INT 0
35687: PPUSH
35688: PPUSH
// uc_side := your_side ;
35689: LD_ADDR_OWVAR 20
35693: PUSH
35694: LD_OWVAR 2
35698: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
35699: LD_VAR 0 1
35703: PUSH
35704: LD_INT 1
35706: PUSH
35707: LD_INT 2
35709: PUSH
35710: LD_INT 3
35712: PUSH
35713: LD_INT 4
35715: PUSH
35716: LD_INT 5
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: IN
35726: IFFALSE 35738
// uc_nation := nation_american else
35728: LD_ADDR_OWVAR 21
35732: PUSH
35733: LD_INT 1
35735: ST_TO_ADDR
35736: GO 35781
// if chassis in [ 11 , 12 , 13 , 14 ] then
35738: LD_VAR 0 1
35742: PUSH
35743: LD_INT 11
35745: PUSH
35746: LD_INT 12
35748: PUSH
35749: LD_INT 13
35751: PUSH
35752: LD_INT 14
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: IN
35761: IFFALSE 35773
// uc_nation := nation_arabian else
35763: LD_ADDR_OWVAR 21
35767: PUSH
35768: LD_INT 2
35770: ST_TO_ADDR
35771: GO 35781
// uc_nation := nation_russian ;
35773: LD_ADDR_OWVAR 21
35777: PUSH
35778: LD_INT 3
35780: ST_TO_ADDR
// vc_chassis := chassis ;
35781: LD_ADDR_OWVAR 37
35785: PUSH
35786: LD_VAR 0 1
35790: ST_TO_ADDR
// vc_engine := engine ;
35791: LD_ADDR_OWVAR 39
35795: PUSH
35796: LD_VAR 0 2
35800: ST_TO_ADDR
// vc_control := control ;
35801: LD_ADDR_OWVAR 38
35805: PUSH
35806: LD_VAR 0 3
35810: ST_TO_ADDR
// vc_weapon := weapon ;
35811: LD_ADDR_OWVAR 40
35815: PUSH
35816: LD_VAR 0 4
35820: ST_TO_ADDR
// un := CreateVehicle ;
35821: LD_ADDR_VAR 0 8
35825: PUSH
35826: CALL_OW 45
35830: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35831: LD_VAR 0 8
35835: PPUSH
35836: LD_INT 0
35838: PPUSH
35839: LD_INT 5
35841: PPUSH
35842: CALL_OW 12
35846: PPUSH
35847: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
35851: LD_VAR 0 8
35855: PPUSH
35856: LD_VAR 0 5
35860: PPUSH
35861: LD_VAR 0 6
35865: PPUSH
35866: LD_INT 1
35868: PPUSH
35869: CALL_OW 48
// end ;
35873: LD_VAR 0 7
35877: RET
// export hInvincible ; every 1 do
35878: GO 35880
35880: DISABLE
// hInvincible := [ ] ;
35881: LD_ADDR_EXP 112
35885: PUSH
35886: EMPTY
35887: ST_TO_ADDR
35888: END
// every 10 do var i ;
35889: GO 35891
35891: DISABLE
35892: LD_INT 0
35894: PPUSH
// begin enable ;
35895: ENABLE
// if not hInvincible then
35896: LD_EXP 112
35900: NOT
35901: IFFALSE 35905
// exit ;
35903: GO 35949
// for i in hInvincible do
35905: LD_ADDR_VAR 0 1
35909: PUSH
35910: LD_EXP 112
35914: PUSH
35915: FOR_IN
35916: IFFALSE 35947
// if GetLives ( i ) < 1000 then
35918: LD_VAR 0 1
35922: PPUSH
35923: CALL_OW 256
35927: PUSH
35928: LD_INT 1000
35930: LESS
35931: IFFALSE 35945
// SetLives ( i , 1000 ) ;
35933: LD_VAR 0 1
35937: PPUSH
35938: LD_INT 1000
35940: PPUSH
35941: CALL_OW 234
35945: GO 35915
35947: POP
35948: POP
// end ;
35949: PPOPN 1
35951: END
// export function hHackInvincible ; var i ; begin
35952: LD_INT 0
35954: PPUSH
35955: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
35956: LD_ADDR_VAR 0 2
35960: PUSH
35961: LD_INT 2
35963: PUSH
35964: LD_INT 21
35966: PUSH
35967: LD_INT 1
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: LD_INT 21
35976: PUSH
35977: LD_INT 2
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: LIST
35988: PPUSH
35989: CALL_OW 69
35993: PUSH
35994: FOR_IN
35995: IFFALSE 36056
// if IsSelected ( i ) then
35997: LD_VAR 0 2
36001: PPUSH
36002: CALL_OW 306
36006: IFFALSE 36054
// begin if i in hInvincible then
36008: LD_VAR 0 2
36012: PUSH
36013: LD_EXP 112
36017: IN
36018: IFFALSE 36038
// hInvincible := hInvincible diff i else
36020: LD_ADDR_EXP 112
36024: PUSH
36025: LD_EXP 112
36029: PUSH
36030: LD_VAR 0 2
36034: DIFF
36035: ST_TO_ADDR
36036: GO 36054
// hInvincible := hInvincible union i ;
36038: LD_ADDR_EXP 112
36042: PUSH
36043: LD_EXP 112
36047: PUSH
36048: LD_VAR 0 2
36052: UNION
36053: ST_TO_ADDR
// end ;
36054: GO 35994
36056: POP
36057: POP
// end ;
36058: LD_VAR 0 1
36062: RET
// export function hHackInvisible ; var i , j ; begin
36063: LD_INT 0
36065: PPUSH
36066: PPUSH
36067: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
36068: LD_ADDR_VAR 0 2
36072: PUSH
36073: LD_INT 21
36075: PUSH
36076: LD_INT 1
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PPUSH
36083: CALL_OW 69
36087: PUSH
36088: FOR_IN
36089: IFFALSE 36113
// if IsSelected ( i ) then
36091: LD_VAR 0 2
36095: PPUSH
36096: CALL_OW 306
36100: IFFALSE 36111
// ComForceInvisible ( i ) ;
36102: LD_VAR 0 2
36106: PPUSH
36107: CALL_OW 496
36111: GO 36088
36113: POP
36114: POP
// end ;
36115: LD_VAR 0 1
36119: RET
// export function hHackChangeYourSide ; begin
36120: LD_INT 0
36122: PPUSH
// if your_side = 8 then
36123: LD_OWVAR 2
36127: PUSH
36128: LD_INT 8
36130: EQUAL
36131: IFFALSE 36143
// your_side := 0 else
36133: LD_ADDR_OWVAR 2
36137: PUSH
36138: LD_INT 0
36140: ST_TO_ADDR
36141: GO 36157
// your_side := your_side + 1 ;
36143: LD_ADDR_OWVAR 2
36147: PUSH
36148: LD_OWVAR 2
36152: PUSH
36153: LD_INT 1
36155: PLUS
36156: ST_TO_ADDR
// end ;
36157: LD_VAR 0 1
36161: RET
// export function hHackChangeUnitSide ; var i , j ; begin
36162: LD_INT 0
36164: PPUSH
36165: PPUSH
36166: PPUSH
// for i in all_units do
36167: LD_ADDR_VAR 0 2
36171: PUSH
36172: LD_OWVAR 3
36176: PUSH
36177: FOR_IN
36178: IFFALSE 36256
// if IsSelected ( i ) then
36180: LD_VAR 0 2
36184: PPUSH
36185: CALL_OW 306
36189: IFFALSE 36254
// begin j := GetSide ( i ) ;
36191: LD_ADDR_VAR 0 3
36195: PUSH
36196: LD_VAR 0 2
36200: PPUSH
36201: CALL_OW 255
36205: ST_TO_ADDR
// if j = 8 then
36206: LD_VAR 0 3
36210: PUSH
36211: LD_INT 8
36213: EQUAL
36214: IFFALSE 36226
// j := 0 else
36216: LD_ADDR_VAR 0 3
36220: PUSH
36221: LD_INT 0
36223: ST_TO_ADDR
36224: GO 36240
// j := j + 1 ;
36226: LD_ADDR_VAR 0 3
36230: PUSH
36231: LD_VAR 0 3
36235: PUSH
36236: LD_INT 1
36238: PLUS
36239: ST_TO_ADDR
// SetSide ( i , j ) ;
36240: LD_VAR 0 2
36244: PPUSH
36245: LD_VAR 0 3
36249: PPUSH
36250: CALL_OW 235
// end ;
36254: GO 36177
36256: POP
36257: POP
// end ;
36258: LD_VAR 0 1
36262: RET
// export function hHackFog ; begin
36263: LD_INT 0
36265: PPUSH
// FogOff ( true ) ;
36266: LD_INT 1
36268: PPUSH
36269: CALL_OW 344
// end ;
36273: LD_VAR 0 1
36277: RET
// export function hHackTeleport ( unit , x , y ) ; begin
36278: LD_INT 0
36280: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
36281: LD_VAR 0 1
36285: PPUSH
36286: LD_VAR 0 2
36290: PPUSH
36291: LD_VAR 0 3
36295: PPUSH
36296: LD_INT 1
36298: PPUSH
36299: LD_INT 1
36301: PPUSH
36302: CALL_OW 483
// CenterOnXY ( x , y ) ;
36306: LD_VAR 0 2
36310: PPUSH
36311: LD_VAR 0 3
36315: PPUSH
36316: CALL_OW 84
// end ;
36320: LD_VAR 0 4
36324: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
36325: LD_INT 0
36327: PPUSH
36328: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
36329: LD_VAR 0 1
36333: NOT
36334: IFTRUE 36353
36336: PUSH
36337: LD_VAR 0 2
36341: PPUSH
36342: LD_VAR 0 3
36346: PPUSH
36347: CALL_OW 488
36351: NOT
36352: OR
36353: IFTRUE 36388
36355: PUSH
36356: LD_VAR 0 1
36360: PPUSH
36361: CALL_OW 266
36365: PUSH
36366: LD_INT 3
36368: NONEQUAL
36369: IFFALSE 36387
36371: PUSH
36372: LD_VAR 0 1
36376: PPUSH
36377: CALL_OW 247
36381: PUSH
36382: LD_INT 1
36384: EQUAL
36385: NOT
36386: AND
36387: OR
36388: IFFALSE 36392
// exit ;
36390: GO 36674
// if GetType ( factory ) = unit_human then
36392: LD_VAR 0 1
36396: PPUSH
36397: CALL_OW 247
36401: PUSH
36402: LD_INT 1
36404: EQUAL
36405: IFFALSE 36422
// factory := IsInUnit ( factory ) ;
36407: LD_ADDR_VAR 0 1
36411: PUSH
36412: LD_VAR 0 1
36416: PPUSH
36417: CALL_OW 310
36421: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
36422: LD_VAR 0 1
36426: PPUSH
36427: CALL_OW 266
36431: PUSH
36432: LD_INT 3
36434: NONEQUAL
36435: IFFALSE 36439
// exit ;
36437: GO 36674
// for i := 1 to Count ( factoryWaypoints ) do
36439: LD_ADDR_VAR 0 5
36443: PUSH
36444: DOUBLE
36445: LD_INT 1
36447: DEC
36448: ST_TO_ADDR
36449: LD_EXP 113
36453: PPUSH
36454: CALL 40004 0 1
36458: PUSH
36459: FOR_TO
36460: IFFALSE 36622
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
36462: LD_VAR 0 2
36466: PPUSH
36467: LD_VAR 0 3
36471: PPUSH
36472: CALL_OW 428
36476: PUSH
36477: LD_EXP 113
36481: PUSH
36482: LD_VAR 0 5
36486: ARRAY
36487: PUSH
36488: LD_INT 2
36490: ARRAY
36491: EQUAL
36492: IFFALSE 36524
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
36494: LD_ADDR_EXP 113
36498: PUSH
36499: LD_EXP 113
36503: PPUSH
36504: LD_VAR 0 5
36508: PPUSH
36509: CALL_OW 3
36513: ST_TO_ADDR
// UpdateFactoryWaypoints ;
36514: CALL 36679 0 0
// exit ;
36518: POP
36519: POP
36520: GO 36674
// end else
36522: GO 36620
// if factory = factoryWaypoints [ i ] [ 2 ] then
36524: LD_VAR 0 1
36528: PUSH
36529: LD_EXP 113
36533: PUSH
36534: LD_VAR 0 5
36538: ARRAY
36539: PUSH
36540: LD_INT 2
36542: ARRAY
36543: EQUAL
36544: IFFALSE 36620
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
36546: LD_ADDR_EXP 113
36550: PUSH
36551: LD_EXP 113
36555: PPUSH
36556: LD_VAR 0 5
36560: PPUSH
36561: CALL_OW 3
36565: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
36566: LD_ADDR_EXP 113
36570: PUSH
36571: LD_EXP 113
36575: PPUSH
36576: LD_VAR 0 1
36580: PPUSH
36581: CALL_OW 255
36585: PUSH
36586: LD_VAR 0 1
36590: PUSH
36591: LD_VAR 0 2
36595: PUSH
36596: LD_VAR 0 3
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: PPUSH
36607: CALL 75980 0 2
36611: ST_TO_ADDR
// UpdateFactoryWaypoints ;
36612: CALL 36679 0 0
// exit ;
36616: POP
36617: POP
36618: GO 36674
// end ; end ;
36620: GO 36459
36622: POP
36623: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
36624: LD_ADDR_EXP 113
36628: PUSH
36629: LD_EXP 113
36633: PPUSH
36634: LD_VAR 0 1
36638: PPUSH
36639: CALL_OW 255
36643: PUSH
36644: LD_VAR 0 1
36648: PUSH
36649: LD_VAR 0 2
36653: PUSH
36654: LD_VAR 0 3
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: PPUSH
36665: CALL 75980 0 2
36669: ST_TO_ADDR
// UpdateFactoryWaypoints ;
36670: CALL 36679 0 0
// end ;
36674: LD_VAR 0 4
36678: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
36679: LD_INT 0
36681: PPUSH
36682: PPUSH
36683: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
36684: LD_STRING resetFactoryWaypoint();
36686: PPUSH
36687: CALL_OW 559
// if factoryWaypoints then
36691: LD_EXP 113
36695: IFFALSE 36816
// begin list := factoryWaypoints ;
36697: LD_ADDR_VAR 0 3
36701: PUSH
36702: LD_EXP 113
36706: ST_TO_ADDR
// for i := 1 to list do
36707: LD_ADDR_VAR 0 2
36711: PUSH
36712: DOUBLE
36713: LD_INT 1
36715: DEC
36716: ST_TO_ADDR
36717: LD_VAR 0 3
36721: PUSH
36722: FOR_TO
36723: IFFALSE 36814
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
36725: LD_STRING setFactoryWaypointXY(
36727: PUSH
36728: LD_VAR 0 3
36732: PUSH
36733: LD_VAR 0 2
36737: ARRAY
36738: PUSH
36739: LD_INT 1
36741: ARRAY
36742: STR
36743: PUSH
36744: LD_STRING ,
36746: STR
36747: PUSH
36748: LD_VAR 0 3
36752: PUSH
36753: LD_VAR 0 2
36757: ARRAY
36758: PUSH
36759: LD_INT 2
36761: ARRAY
36762: STR
36763: PUSH
36764: LD_STRING ,
36766: STR
36767: PUSH
36768: LD_VAR 0 3
36772: PUSH
36773: LD_VAR 0 2
36777: ARRAY
36778: PUSH
36779: LD_INT 3
36781: ARRAY
36782: STR
36783: PUSH
36784: LD_STRING ,
36786: STR
36787: PUSH
36788: LD_VAR 0 3
36792: PUSH
36793: LD_VAR 0 2
36797: ARRAY
36798: PUSH
36799: LD_INT 4
36801: ARRAY
36802: STR
36803: PUSH
36804: LD_STRING )
36806: STR
36807: PPUSH
36808: CALL_OW 559
36812: GO 36722
36814: POP
36815: POP
// end ; end ;
36816: LD_VAR 0 1
36820: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
36821: LD_INT 0
36823: PPUSH
// if HexInfo ( x , y ) = warehouse then
36824: LD_VAR 0 2
36828: PPUSH
36829: LD_VAR 0 3
36833: PPUSH
36834: CALL_OW 428
36838: PUSH
36839: LD_VAR 0 1
36843: EQUAL
36844: IFFALSE 36871
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
36846: LD_ADDR_EXP 115
36850: PUSH
36851: LD_EXP 115
36855: PPUSH
36856: LD_VAR 0 1
36860: PPUSH
36861: LD_INT 0
36863: PPUSH
36864: CALL_OW 1
36868: ST_TO_ADDR
36869: GO 36922
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
36871: LD_ADDR_EXP 115
36875: PUSH
36876: LD_EXP 115
36880: PPUSH
36881: LD_VAR 0 1
36885: PPUSH
36886: LD_VAR 0 1
36890: PPUSH
36891: CALL_OW 255
36895: PUSH
36896: LD_VAR 0 1
36900: PUSH
36901: LD_VAR 0 2
36905: PUSH
36906: LD_VAR 0 3
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: PPUSH
36917: CALL_OW 1
36921: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
36922: CALL 36931 0 0
// end ;
36926: LD_VAR 0 4
36930: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
36931: LD_INT 0
36933: PPUSH
36934: PPUSH
36935: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
36936: LD_STRING resetWarehouseGatheringPoints();
36938: PPUSH
36939: CALL_OW 559
// if warehouseGatheringPoints then
36943: LD_EXP 115
36947: IFFALSE 37073
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
36949: LD_ADDR_VAR 0 3
36953: PUSH
36954: LD_EXP 115
36958: PPUSH
36959: CALL 79914 0 1
36963: ST_TO_ADDR
// for i := 1 to list do
36964: LD_ADDR_VAR 0 2
36968: PUSH
36969: DOUBLE
36970: LD_INT 1
36972: DEC
36973: ST_TO_ADDR
36974: LD_VAR 0 3
36978: PUSH
36979: FOR_TO
36980: IFFALSE 37071
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
36982: LD_STRING setWarehouseGatheringPointXY(
36984: PUSH
36985: LD_VAR 0 3
36989: PUSH
36990: LD_VAR 0 2
36994: ARRAY
36995: PUSH
36996: LD_INT 1
36998: ARRAY
36999: STR
37000: PUSH
37001: LD_STRING ,
37003: STR
37004: PUSH
37005: LD_VAR 0 3
37009: PUSH
37010: LD_VAR 0 2
37014: ARRAY
37015: PUSH
37016: LD_INT 2
37018: ARRAY
37019: STR
37020: PUSH
37021: LD_STRING ,
37023: STR
37024: PUSH
37025: LD_VAR 0 3
37029: PUSH
37030: LD_VAR 0 2
37034: ARRAY
37035: PUSH
37036: LD_INT 3
37038: ARRAY
37039: STR
37040: PUSH
37041: LD_STRING ,
37043: STR
37044: PUSH
37045: LD_VAR 0 3
37049: PUSH
37050: LD_VAR 0 2
37054: ARRAY
37055: PUSH
37056: LD_INT 4
37058: ARRAY
37059: STR
37060: PUSH
37061: LD_STRING )
37063: STR
37064: PPUSH
37065: CALL_OW 559
37069: GO 36979
37071: POP
37072: POP
// end ; end ;
37073: LD_VAR 0 1
37077: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
37078: LD_EXP 115
37082: IFFALSE 37777
37084: GO 37086
37086: DISABLE
37087: LD_INT 0
37089: PPUSH
37090: PPUSH
37091: PPUSH
37092: PPUSH
37093: PPUSH
37094: PPUSH
37095: PPUSH
37096: PPUSH
37097: PPUSH
// begin enable ;
37098: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
37099: LD_ADDR_VAR 0 3
37103: PUSH
37104: LD_EXP 115
37108: PPUSH
37109: CALL 79914 0 1
37113: ST_TO_ADDR
// if not list then
37114: LD_VAR 0 3
37118: NOT
37119: IFFALSE 37123
// exit ;
37121: GO 37777
// for i := 1 to list do
37123: LD_ADDR_VAR 0 1
37127: PUSH
37128: DOUBLE
37129: LD_INT 1
37131: DEC
37132: ST_TO_ADDR
37133: LD_VAR 0 3
37137: PUSH
37138: FOR_TO
37139: IFFALSE 37775
// begin depot := list [ i ] [ 2 ] ;
37141: LD_ADDR_VAR 0 8
37145: PUSH
37146: LD_VAR 0 3
37150: PUSH
37151: LD_VAR 0 1
37155: ARRAY
37156: PUSH
37157: LD_INT 2
37159: ARRAY
37160: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
37161: LD_ADDR_VAR 0 5
37165: PUSH
37166: LD_VAR 0 3
37170: PUSH
37171: LD_VAR 0 1
37175: ARRAY
37176: PUSH
37177: LD_INT 1
37179: ARRAY
37180: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
37181: LD_VAR 0 8
37185: PPUSH
37186: CALL_OW 301
37190: IFTRUE 37209
37192: PUSH
37193: LD_VAR 0 5
37197: PUSH
37198: LD_VAR 0 8
37202: PPUSH
37203: CALL_OW 255
37207: NONEQUAL
37208: OR
37209: IFFALSE 37238
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
37211: LD_ADDR_EXP 115
37215: PUSH
37216: LD_EXP 115
37220: PPUSH
37221: LD_VAR 0 8
37225: PPUSH
37226: LD_INT 0
37228: PPUSH
37229: CALL_OW 1
37233: ST_TO_ADDR
// exit ;
37234: POP
37235: POP
37236: GO 37777
// end ; x := list [ i ] [ 3 ] ;
37238: LD_ADDR_VAR 0 6
37242: PUSH
37243: LD_VAR 0 3
37247: PUSH
37248: LD_VAR 0 1
37252: ARRAY
37253: PUSH
37254: LD_INT 3
37256: ARRAY
37257: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
37258: LD_ADDR_VAR 0 7
37262: PUSH
37263: LD_VAR 0 3
37267: PUSH
37268: LD_VAR 0 1
37272: ARRAY
37273: PUSH
37274: LD_INT 4
37276: ARRAY
37277: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
37278: LD_ADDR_VAR 0 9
37282: PUSH
37283: LD_VAR 0 6
37287: PPUSH
37288: LD_VAR 0 7
37292: PPUSH
37293: LD_INT 16
37295: PPUSH
37296: CALL 78488 0 3
37300: ST_TO_ADDR
// if not cratesNearbyPoint then
37301: LD_VAR 0 9
37305: NOT
37306: IFFALSE 37312
// exit ;
37308: POP
37309: POP
37310: GO 37777
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
37312: LD_ADDR_VAR 0 4
37316: PUSH
37317: LD_INT 22
37319: PUSH
37320: LD_VAR 0 5
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 3
37331: PUSH
37332: LD_INT 60
37334: PUSH
37335: EMPTY
37336: LIST
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 91
37344: PUSH
37345: LD_VAR 0 8
37349: PUSH
37350: LD_INT 6
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 2
37360: PUSH
37361: LD_INT 25
37363: PUSH
37364: LD_INT 2
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 25
37373: PUSH
37374: LD_INT 16
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: LIST
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: PPUSH
37392: CALL_OW 69
37396: PUSH
37397: LD_VAR 0 8
37401: PPUSH
37402: CALL_OW 313
37406: PPUSH
37407: LD_INT 3
37409: PUSH
37410: LD_INT 60
37412: PUSH
37413: EMPTY
37414: LIST
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 2
37422: PUSH
37423: LD_INT 25
37425: PUSH
37426: LD_INT 2
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 25
37435: PUSH
37436: LD_INT 16
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: LIST
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PPUSH
37452: CALL_OW 72
37456: UNION
37457: ST_TO_ADDR
// if tmp then
37458: LD_VAR 0 4
37462: IFFALSE 37542
// begin tmp := ShrinkArray ( tmp , 3 ) ;
37464: LD_ADDR_VAR 0 4
37468: PUSH
37469: LD_VAR 0 4
37473: PPUSH
37474: LD_INT 3
37476: PPUSH
37477: CALL 76295 0 2
37481: ST_TO_ADDR
// for j in tmp do
37482: LD_ADDR_VAR 0 2
37486: PUSH
37487: LD_VAR 0 4
37491: PUSH
37492: FOR_IN
37493: IFFALSE 37536
// begin if IsInUnit ( j ) then
37495: LD_VAR 0 2
37499: PPUSH
37500: CALL_OW 310
37504: IFFALSE 37515
// ComExit ( j ) ;
37506: LD_VAR 0 2
37510: PPUSH
37511: CALL 76378 0 1
// AddComCollect ( j , x , y ) ;
37515: LD_VAR 0 2
37519: PPUSH
37520: LD_VAR 0 6
37524: PPUSH
37525: LD_VAR 0 7
37529: PPUSH
37530: CALL_OW 177
// end ;
37534: GO 37492
37536: POP
37537: POP
// exit ;
37538: POP
37539: POP
37540: GO 37777
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
37542: LD_ADDR_VAR 0 4
37546: PUSH
37547: LD_INT 22
37549: PUSH
37550: LD_VAR 0 5
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 91
37561: PUSH
37562: LD_VAR 0 8
37566: PUSH
37567: LD_INT 8
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 2
37577: PUSH
37578: LD_INT 34
37580: PUSH
37581: LD_INT 12
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 34
37590: PUSH
37591: LD_INT 51
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 34
37600: PUSH
37601: LD_INT 32
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 34
37610: PUSH
37611: LD_INT 89
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: LIST
37629: PPUSH
37630: CALL_OW 69
37634: ST_TO_ADDR
// if tmp then
37635: LD_VAR 0 4
37639: IFFALSE 37773
// begin for j in tmp do
37641: LD_ADDR_VAR 0 2
37645: PUSH
37646: LD_VAR 0 4
37650: PUSH
37651: FOR_IN
37652: IFFALSE 37771
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
37654: LD_VAR 0 2
37658: PPUSH
37659: CALL_OW 262
37663: PUSH
37664: LD_INT 3
37666: EQUAL
37667: IFTRUE 37684
37669: PUSH
37670: LD_VAR 0 2
37674: PPUSH
37675: CALL_OW 261
37679: PUSH
37680: LD_INT 20
37682: GREATER
37683: OR
37684: IFFALSE 37698
37686: PUSH
37687: LD_VAR 0 2
37691: PPUSH
37692: CALL_OW 314
37696: NOT
37697: AND
37698: IFFALSE 37728
37700: PUSH
37701: LD_VAR 0 2
37705: PPUSH
37706: CALL_OW 263
37710: PUSH
37711: LD_INT 1
37713: NONEQUAL
37714: IFTRUE 37727
37716: PUSH
37717: LD_VAR 0 2
37721: PPUSH
37722: CALL_OW 311
37726: OR
37727: AND
37728: IFFALSE 37769
// begin ComCollect ( j , x , y ) ;
37730: LD_VAR 0 2
37734: PPUSH
37735: LD_VAR 0 6
37739: PPUSH
37740: LD_VAR 0 7
37744: PPUSH
37745: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
37749: LD_VAR 0 2
37753: PPUSH
37754: LD_VAR 0 8
37758: PPUSH
37759: CALL_OW 172
// exit ;
37763: POP
37764: POP
37765: POP
37766: POP
37767: GO 37777
// end ;
37769: GO 37651
37771: POP
37772: POP
// end ; end ;
37773: GO 37138
37775: POP
37776: POP
// end ; end_of_file end_of_file
37777: PPOPN 9
37779: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37780: LD_INT 0
37782: PPUSH
37783: PPUSH
// if exist_mode then
37784: LD_VAR 0 2
37788: IFFALSE 37834
// begin unit := CreateCharacter ( prefix & ident ) ;
37790: LD_ADDR_VAR 0 5
37794: PUSH
37795: LD_VAR 0 3
37799: PUSH
37800: LD_VAR 0 1
37804: STR
37805: PPUSH
37806: CALL_OW 34
37810: ST_TO_ADDR
// if unit then
37811: LD_VAR 0 5
37815: IFFALSE 37832
// DeleteCharacters ( prefix & ident ) ;
37817: LD_VAR 0 3
37821: PUSH
37822: LD_VAR 0 1
37826: STR
37827: PPUSH
37828: CALL_OW 40
// end else
37832: GO 37849
// unit := NewCharacter ( ident ) ;
37834: LD_ADDR_VAR 0 5
37838: PUSH
37839: LD_VAR 0 1
37843: PPUSH
37844: CALL_OW 25
37848: ST_TO_ADDR
// result := unit ;
37849: LD_ADDR_VAR 0 4
37853: PUSH
37854: LD_VAR 0 5
37858: ST_TO_ADDR
// end ;
37859: LD_VAR 0 4
37863: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
37864: LD_INT 0
37866: PPUSH
37867: PPUSH
// if exist_mode then
37868: LD_VAR 0 2
37872: IFFALSE 37897
// unit := CreateCharacter ( prefix & ident ) else
37874: LD_ADDR_VAR 0 5
37878: PUSH
37879: LD_VAR 0 3
37883: PUSH
37884: LD_VAR 0 1
37888: STR
37889: PPUSH
37890: CALL_OW 34
37894: ST_TO_ADDR
37895: GO 37912
// unit := NewCharacter ( ident ) ;
37897: LD_ADDR_VAR 0 5
37901: PUSH
37902: LD_VAR 0 1
37906: PPUSH
37907: CALL_OW 25
37911: ST_TO_ADDR
// result := unit ;
37912: LD_ADDR_VAR 0 4
37916: PUSH
37917: LD_VAR 0 5
37921: ST_TO_ADDR
// end ;
37922: LD_VAR 0 4
37926: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37927: LD_INT 0
37929: PPUSH
37930: PPUSH
// if not side or not nation then
37931: LD_VAR 0 1
37935: NOT
37936: IFTRUE 37945
37938: PUSH
37939: LD_VAR 0 2
37943: NOT
37944: OR
37945: IFFALSE 37949
// exit ;
37947: GO 38743
// case nation of nation_american :
37949: LD_VAR 0 2
37953: PUSH
37954: LD_INT 1
37956: DOUBLE
37957: EQUAL
37958: IFTRUE 37962
37960: GO 38184
37962: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
37963: LD_ADDR_VAR 0 4
37967: PUSH
37968: LD_INT 35
37970: PUSH
37971: LD_INT 45
37973: PUSH
37974: LD_INT 46
37976: PUSH
37977: LD_INT 47
37979: PUSH
37980: LD_INT 82
37982: PUSH
37983: LD_INT 83
37985: PUSH
37986: LD_INT 84
37988: PUSH
37989: LD_INT 85
37991: PUSH
37992: LD_INT 86
37994: PUSH
37995: LD_INT 1
37997: PUSH
37998: LD_INT 2
38000: PUSH
38001: LD_INT 6
38003: PUSH
38004: LD_INT 15
38006: PUSH
38007: LD_INT 16
38009: PUSH
38010: LD_INT 7
38012: PUSH
38013: LD_INT 12
38015: PUSH
38016: LD_INT 13
38018: PUSH
38019: LD_INT 10
38021: PUSH
38022: LD_INT 14
38024: PUSH
38025: LD_INT 20
38027: PUSH
38028: LD_INT 21
38030: PUSH
38031: LD_INT 22
38033: PUSH
38034: LD_INT 25
38036: PUSH
38037: LD_INT 32
38039: PUSH
38040: LD_INT 27
38042: PUSH
38043: LD_INT 36
38045: PUSH
38046: LD_INT 69
38048: PUSH
38049: LD_INT 39
38051: PUSH
38052: LD_INT 34
38054: PUSH
38055: LD_INT 40
38057: PUSH
38058: LD_INT 48
38060: PUSH
38061: LD_INT 49
38063: PUSH
38064: LD_INT 50
38066: PUSH
38067: LD_INT 51
38069: PUSH
38070: LD_INT 52
38072: PUSH
38073: LD_INT 53
38075: PUSH
38076: LD_INT 54
38078: PUSH
38079: LD_INT 55
38081: PUSH
38082: LD_INT 56
38084: PUSH
38085: LD_INT 57
38087: PUSH
38088: LD_INT 58
38090: PUSH
38091: LD_INT 59
38093: PUSH
38094: LD_INT 60
38096: PUSH
38097: LD_INT 61
38099: PUSH
38100: LD_INT 62
38102: PUSH
38103: LD_INT 80
38105: PUSH
38106: LD_INT 82
38108: PUSH
38109: LD_INT 83
38111: PUSH
38112: LD_INT 84
38114: PUSH
38115: LD_INT 85
38117: PUSH
38118: LD_INT 86
38120: PUSH
38121: LD_INT 90
38123: PUSH
38124: LD_INT 93
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: ST_TO_ADDR
38182: GO 38665
38184: LD_INT 2
38186: DOUBLE
38187: EQUAL
38188: IFTRUE 38192
38190: GO 38426
38192: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
38193: LD_ADDR_VAR 0 4
38197: PUSH
38198: LD_INT 35
38200: PUSH
38201: LD_INT 45
38203: PUSH
38204: LD_INT 46
38206: PUSH
38207: LD_INT 47
38209: PUSH
38210: LD_INT 82
38212: PUSH
38213: LD_INT 83
38215: PUSH
38216: LD_INT 84
38218: PUSH
38219: LD_INT 85
38221: PUSH
38222: LD_INT 87
38224: PUSH
38225: LD_INT 70
38227: PUSH
38228: LD_INT 1
38230: PUSH
38231: LD_INT 11
38233: PUSH
38234: LD_INT 3
38236: PUSH
38237: LD_INT 4
38239: PUSH
38240: LD_INT 5
38242: PUSH
38243: LD_INT 6
38245: PUSH
38246: LD_INT 15
38248: PUSH
38249: LD_INT 18
38251: PUSH
38252: LD_INT 7
38254: PUSH
38255: LD_INT 17
38257: PUSH
38258: LD_INT 8
38260: PUSH
38261: LD_INT 20
38263: PUSH
38264: LD_INT 21
38266: PUSH
38267: LD_INT 22
38269: PUSH
38270: LD_INT 72
38272: PUSH
38273: LD_INT 26
38275: PUSH
38276: LD_INT 69
38278: PUSH
38279: LD_INT 39
38281: PUSH
38282: LD_INT 40
38284: PUSH
38285: LD_INT 41
38287: PUSH
38288: LD_INT 42
38290: PUSH
38291: LD_INT 43
38293: PUSH
38294: LD_INT 48
38296: PUSH
38297: LD_INT 49
38299: PUSH
38300: LD_INT 50
38302: PUSH
38303: LD_INT 51
38305: PUSH
38306: LD_INT 52
38308: PUSH
38309: LD_INT 53
38311: PUSH
38312: LD_INT 54
38314: PUSH
38315: LD_INT 55
38317: PUSH
38318: LD_INT 56
38320: PUSH
38321: LD_INT 60
38323: PUSH
38324: LD_INT 61
38326: PUSH
38327: LD_INT 62
38329: PUSH
38330: LD_INT 66
38332: PUSH
38333: LD_INT 67
38335: PUSH
38336: LD_INT 68
38338: PUSH
38339: LD_INT 81
38341: PUSH
38342: LD_INT 82
38344: PUSH
38345: LD_INT 83
38347: PUSH
38348: LD_INT 84
38350: PUSH
38351: LD_INT 85
38353: PUSH
38354: LD_INT 87
38356: PUSH
38357: LD_INT 88
38359: PUSH
38360: LD_INT 92
38362: PUSH
38363: LD_INT 94
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: ST_TO_ADDR
38424: GO 38665
38426: LD_INT 3
38428: DOUBLE
38429: EQUAL
38430: IFTRUE 38434
38432: GO 38664
38434: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
38435: LD_ADDR_VAR 0 4
38439: PUSH
38440: LD_INT 46
38442: PUSH
38443: LD_INT 47
38445: PUSH
38446: LD_INT 1
38448: PUSH
38449: LD_INT 2
38451: PUSH
38452: LD_INT 82
38454: PUSH
38455: LD_INT 83
38457: PUSH
38458: LD_INT 84
38460: PUSH
38461: LD_INT 85
38463: PUSH
38464: LD_INT 86
38466: PUSH
38467: LD_INT 11
38469: PUSH
38470: LD_INT 9
38472: PUSH
38473: LD_INT 20
38475: PUSH
38476: LD_INT 19
38478: PUSH
38479: LD_INT 21
38481: PUSH
38482: LD_INT 24
38484: PUSH
38485: LD_INT 22
38487: PUSH
38488: LD_INT 25
38490: PUSH
38491: LD_INT 28
38493: PUSH
38494: LD_INT 29
38496: PUSH
38497: LD_INT 30
38499: PUSH
38500: LD_INT 31
38502: PUSH
38503: LD_INT 37
38505: PUSH
38506: LD_INT 38
38508: PUSH
38509: LD_INT 32
38511: PUSH
38512: LD_INT 27
38514: PUSH
38515: LD_INT 33
38517: PUSH
38518: LD_INT 69
38520: PUSH
38521: LD_INT 39
38523: PUSH
38524: LD_INT 34
38526: PUSH
38527: LD_INT 40
38529: PUSH
38530: LD_INT 71
38532: PUSH
38533: LD_INT 23
38535: PUSH
38536: LD_INT 44
38538: PUSH
38539: LD_INT 48
38541: PUSH
38542: LD_INT 49
38544: PUSH
38545: LD_INT 50
38547: PUSH
38548: LD_INT 51
38550: PUSH
38551: LD_INT 52
38553: PUSH
38554: LD_INT 53
38556: PUSH
38557: LD_INT 54
38559: PUSH
38560: LD_INT 55
38562: PUSH
38563: LD_INT 56
38565: PUSH
38566: LD_INT 57
38568: PUSH
38569: LD_INT 58
38571: PUSH
38572: LD_INT 59
38574: PUSH
38575: LD_INT 63
38577: PUSH
38578: LD_INT 64
38580: PUSH
38581: LD_INT 65
38583: PUSH
38584: LD_INT 82
38586: PUSH
38587: LD_INT 83
38589: PUSH
38590: LD_INT 84
38592: PUSH
38593: LD_INT 85
38595: PUSH
38596: LD_INT 86
38598: PUSH
38599: LD_INT 89
38601: PUSH
38602: LD_INT 91
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: ST_TO_ADDR
38662: GO 38665
38664: POP
// if state > - 1 and state < 3 then
38665: LD_VAR 0 3
38669: PUSH
38670: LD_INT 1
38672: NEG
38673: GREATER
38674: IFFALSE 38686
38676: PUSH
38677: LD_VAR 0 3
38681: PUSH
38682: LD_INT 3
38684: LESS
38685: AND
38686: IFFALSE 38743
// for i in result do
38688: LD_ADDR_VAR 0 5
38692: PUSH
38693: LD_VAR 0 4
38697: PUSH
38698: FOR_IN
38699: IFFALSE 38741
// if GetTech ( i , side ) <> state then
38701: LD_VAR 0 5
38705: PPUSH
38706: LD_VAR 0 1
38710: PPUSH
38711: CALL_OW 321
38715: PUSH
38716: LD_VAR 0 3
38720: NONEQUAL
38721: IFFALSE 38739
// result := result diff i ;
38723: LD_ADDR_VAR 0 4
38727: PUSH
38728: LD_VAR 0 4
38732: PUSH
38733: LD_VAR 0 5
38737: DIFF
38738: ST_TO_ADDR
38739: GO 38698
38741: POP
38742: POP
// end ;
38743: LD_VAR 0 4
38747: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38748: LD_INT 0
38750: PPUSH
38751: PPUSH
38752: PPUSH
// result := true ;
38753: LD_ADDR_VAR 0 3
38757: PUSH
38758: LD_INT 1
38760: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38761: LD_ADDR_VAR 0 5
38765: PUSH
38766: LD_VAR 0 2
38770: PPUSH
38771: CALL_OW 480
38775: ST_TO_ADDR
// if not tmp then
38776: LD_VAR 0 5
38780: NOT
38781: IFFALSE 38785
// exit ;
38783: GO 38834
// for i in tmp do
38785: LD_ADDR_VAR 0 4
38789: PUSH
38790: LD_VAR 0 5
38794: PUSH
38795: FOR_IN
38796: IFFALSE 38832
// if GetTech ( i , side ) <> state_researched then
38798: LD_VAR 0 4
38802: PPUSH
38803: LD_VAR 0 1
38807: PPUSH
38808: CALL_OW 321
38812: PUSH
38813: LD_INT 2
38815: NONEQUAL
38816: IFFALSE 38830
// begin result := false ;
38818: LD_ADDR_VAR 0 3
38822: PUSH
38823: LD_INT 0
38825: ST_TO_ADDR
// exit ;
38826: POP
38827: POP
38828: GO 38834
// end ;
38830: GO 38795
38832: POP
38833: POP
// end ;
38834: LD_VAR 0 3
38838: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38839: LD_INT 0
38841: PPUSH
38842: PPUSH
38843: PPUSH
38844: PPUSH
38845: PPUSH
38846: PPUSH
38847: PPUSH
38848: PPUSH
38849: PPUSH
38850: PPUSH
38851: PPUSH
38852: PPUSH
38853: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38854: LD_VAR 0 1
38858: NOT
38859: IFTRUE 38876
38861: PUSH
38862: LD_VAR 0 1
38866: PPUSH
38867: CALL_OW 257
38871: PUSH
38872: LD_INT 9
38874: NONEQUAL
38875: OR
38876: IFFALSE 38880
// exit ;
38878: GO 39459
// side := GetSide ( unit ) ;
38880: LD_ADDR_VAR 0 9
38884: PUSH
38885: LD_VAR 0 1
38889: PPUSH
38890: CALL_OW 255
38894: ST_TO_ADDR
// tech_space := tech_spacanom ;
38895: LD_ADDR_VAR 0 12
38899: PUSH
38900: LD_INT 29
38902: ST_TO_ADDR
// tech_time := tech_taurad ;
38903: LD_ADDR_VAR 0 13
38907: PUSH
38908: LD_INT 28
38910: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38911: LD_ADDR_VAR 0 11
38915: PUSH
38916: LD_VAR 0 1
38920: PPUSH
38921: CALL_OW 310
38925: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38926: LD_VAR 0 11
38930: PPUSH
38931: CALL_OW 247
38935: PUSH
38936: LD_INT 2
38938: EQUAL
38939: IFFALSE 38943
// exit ;
38941: GO 39459
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38943: LD_ADDR_VAR 0 8
38947: PUSH
38948: LD_INT 81
38950: PUSH
38951: LD_VAR 0 9
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 3
38962: PUSH
38963: LD_INT 21
38965: PUSH
38966: LD_INT 3
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PPUSH
38981: CALL_OW 69
38985: ST_TO_ADDR
// if not tmp then
38986: LD_VAR 0 8
38990: NOT
38991: IFFALSE 38995
// exit ;
38993: GO 39459
// if in_unit then
38995: LD_VAR 0 11
38999: IFFALSE 39023
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39001: LD_ADDR_VAR 0 10
39005: PUSH
39006: LD_VAR 0 8
39010: PPUSH
39011: LD_VAR 0 11
39015: PPUSH
39016: CALL_OW 74
39020: ST_TO_ADDR
39021: GO 39043
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39023: LD_ADDR_VAR 0 10
39027: PUSH
39028: LD_VAR 0 8
39032: PPUSH
39033: LD_VAR 0 1
39037: PPUSH
39038: CALL_OW 74
39042: ST_TO_ADDR
// if not enemy then
39043: LD_VAR 0 10
39047: NOT
39048: IFFALSE 39052
// exit ;
39050: GO 39459
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39052: LD_VAR 0 11
39056: IFFALSE 39078
39058: PUSH
39059: LD_VAR 0 11
39063: PPUSH
39064: LD_VAR 0 10
39068: PPUSH
39069: CALL_OW 296
39073: PUSH
39074: LD_INT 13
39076: GREATER
39077: AND
39078: IFTRUE 39100
39080: PUSH
39081: LD_VAR 0 1
39085: PPUSH
39086: LD_VAR 0 10
39090: PPUSH
39091: CALL_OW 296
39095: PUSH
39096: LD_INT 12
39098: GREATER
39099: OR
39100: IFFALSE 39104
// exit ;
39102: GO 39459
// missile := [ 1 ] ;
39104: LD_ADDR_VAR 0 14
39108: PUSH
39109: LD_INT 1
39111: PUSH
39112: EMPTY
39113: LIST
39114: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39115: LD_VAR 0 9
39119: PPUSH
39120: LD_VAR 0 12
39124: PPUSH
39125: CALL_OW 325
39129: IFFALSE 39158
// missile := Replace ( missile , missile + 1 , 2 ) ;
39131: LD_ADDR_VAR 0 14
39135: PUSH
39136: LD_VAR 0 14
39140: PPUSH
39141: LD_VAR 0 14
39145: PUSH
39146: LD_INT 1
39148: PLUS
39149: PPUSH
39150: LD_INT 2
39152: PPUSH
39153: CALL_OW 1
39157: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39158: LD_VAR 0 9
39162: PPUSH
39163: LD_VAR 0 13
39167: PPUSH
39168: CALL_OW 325
39172: IFFALSE 39196
39174: PUSH
39175: LD_VAR 0 10
39179: PPUSH
39180: CALL_OW 255
39184: PPUSH
39185: LD_VAR 0 13
39189: PPUSH
39190: CALL_OW 325
39194: NOT
39195: AND
39196: IFFALSE 39225
// missile := Replace ( missile , missile + 1 , 3 ) ;
39198: LD_ADDR_VAR 0 14
39202: PUSH
39203: LD_VAR 0 14
39207: PPUSH
39208: LD_VAR 0 14
39212: PUSH
39213: LD_INT 1
39215: PLUS
39216: PPUSH
39217: LD_INT 3
39219: PPUSH
39220: CALL_OW 1
39224: ST_TO_ADDR
// if missile < 2 then
39225: LD_VAR 0 14
39229: PUSH
39230: LD_INT 2
39232: LESS
39233: IFFALSE 39237
// exit ;
39235: GO 39459
// x := GetX ( enemy ) ;
39237: LD_ADDR_VAR 0 4
39241: PUSH
39242: LD_VAR 0 10
39246: PPUSH
39247: CALL_OW 250
39251: ST_TO_ADDR
// y := GetY ( enemy ) ;
39252: LD_ADDR_VAR 0 5
39256: PUSH
39257: LD_VAR 0 10
39261: PPUSH
39262: CALL_OW 251
39266: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39267: LD_ADDR_VAR 0 6
39271: PUSH
39272: LD_VAR 0 4
39276: PUSH
39277: LD_INT 1
39279: NEG
39280: PPUSH
39281: LD_INT 1
39283: PPUSH
39284: CALL_OW 12
39288: PLUS
39289: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39290: LD_ADDR_VAR 0 7
39294: PUSH
39295: LD_VAR 0 5
39299: PUSH
39300: LD_INT 1
39302: NEG
39303: PPUSH
39304: LD_INT 1
39306: PPUSH
39307: CALL_OW 12
39311: PLUS
39312: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39313: LD_VAR 0 6
39317: PPUSH
39318: LD_VAR 0 7
39322: PPUSH
39323: CALL_OW 488
39327: NOT
39328: IFFALSE 39350
// begin _x := x ;
39330: LD_ADDR_VAR 0 6
39334: PUSH
39335: LD_VAR 0 4
39339: ST_TO_ADDR
// _y := y ;
39340: LD_ADDR_VAR 0 7
39344: PUSH
39345: LD_VAR 0 5
39349: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39350: LD_ADDR_VAR 0 3
39354: PUSH
39355: LD_INT 1
39357: PPUSH
39358: LD_VAR 0 14
39362: PPUSH
39363: CALL_OW 12
39367: ST_TO_ADDR
// case i of 1 :
39368: LD_VAR 0 3
39372: PUSH
39373: LD_INT 1
39375: DOUBLE
39376: EQUAL
39377: IFTRUE 39381
39379: GO 39398
39381: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39382: LD_VAR 0 1
39386: PPUSH
39387: LD_VAR 0 10
39391: PPUSH
39392: CALL_OW 115
39396: GO 39459
39398: LD_INT 2
39400: DOUBLE
39401: EQUAL
39402: IFTRUE 39406
39404: GO 39428
39406: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39407: LD_VAR 0 1
39411: PPUSH
39412: LD_VAR 0 6
39416: PPUSH
39417: LD_VAR 0 7
39421: PPUSH
39422: CALL_OW 153
39426: GO 39459
39428: LD_INT 3
39430: DOUBLE
39431: EQUAL
39432: IFTRUE 39436
39434: GO 39458
39436: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39437: LD_VAR 0 1
39441: PPUSH
39442: LD_VAR 0 6
39446: PPUSH
39447: LD_VAR 0 7
39451: PPUSH
39452: CALL_OW 154
39456: GO 39459
39458: POP
// end ;
39459: LD_VAR 0 2
39463: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39464: LD_INT 0
39466: PPUSH
39467: PPUSH
39468: PPUSH
39469: PPUSH
39470: PPUSH
39471: PPUSH
// if not unit or not building then
39472: LD_VAR 0 1
39476: NOT
39477: IFTRUE 39486
39479: PUSH
39480: LD_VAR 0 2
39484: NOT
39485: OR
39486: IFFALSE 39490
// exit ;
39488: GO 39648
// x := GetX ( building ) ;
39490: LD_ADDR_VAR 0 5
39494: PUSH
39495: LD_VAR 0 2
39499: PPUSH
39500: CALL_OW 250
39504: ST_TO_ADDR
// y := GetY ( building ) ;
39505: LD_ADDR_VAR 0 6
39509: PUSH
39510: LD_VAR 0 2
39514: PPUSH
39515: CALL_OW 251
39519: ST_TO_ADDR
// for i := 0 to 5 do
39520: LD_ADDR_VAR 0 4
39524: PUSH
39525: DOUBLE
39526: LD_INT 0
39528: DEC
39529: ST_TO_ADDR
39530: LD_INT 5
39532: PUSH
39533: FOR_TO
39534: IFFALSE 39646
// begin _x := ShiftX ( x , i , 3 ) ;
39536: LD_ADDR_VAR 0 7
39540: PUSH
39541: LD_VAR 0 5
39545: PPUSH
39546: LD_VAR 0 4
39550: PPUSH
39551: LD_INT 3
39553: PPUSH
39554: CALL_OW 272
39558: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39559: LD_ADDR_VAR 0 8
39563: PUSH
39564: LD_VAR 0 6
39568: PPUSH
39569: LD_VAR 0 4
39573: PPUSH
39574: LD_INT 3
39576: PPUSH
39577: CALL_OW 273
39581: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39582: LD_VAR 0 7
39586: PPUSH
39587: LD_VAR 0 8
39591: PPUSH
39592: CALL_OW 488
39596: NOT
39597: IFFALSE 39601
// continue ;
39599: GO 39533
// if HexInfo ( _x , _y ) = 0 then
39601: LD_VAR 0 7
39605: PPUSH
39606: LD_VAR 0 8
39610: PPUSH
39611: CALL_OW 428
39615: PUSH
39616: LD_INT 0
39618: EQUAL
39619: IFFALSE 39644
// begin ComMoveXY ( unit , _x , _y ) ;
39621: LD_VAR 0 1
39625: PPUSH
39626: LD_VAR 0 7
39630: PPUSH
39631: LD_VAR 0 8
39635: PPUSH
39636: CALL_OW 111
// exit ;
39640: POP
39641: POP
39642: GO 39648
// end ; end ;
39644: GO 39533
39646: POP
39647: POP
// end ;
39648: LD_VAR 0 3
39652: RET
// export function ScanBase ( side , base_area ) ; begin
39653: LD_INT 0
39655: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39656: LD_ADDR_VAR 0 3
39660: PUSH
39661: LD_VAR 0 2
39665: PPUSH
39666: LD_INT 81
39668: PUSH
39669: LD_VAR 0 1
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PPUSH
39678: CALL_OW 70
39682: ST_TO_ADDR
// end ;
39683: LD_VAR 0 3
39687: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
39688: LD_INT 0
39690: PPUSH
39691: PPUSH
39692: PPUSH
39693: PPUSH
// result := false ;
39694: LD_ADDR_VAR 0 2
39698: PUSH
39699: LD_INT 0
39701: ST_TO_ADDR
// side := GetSide ( unit ) ;
39702: LD_ADDR_VAR 0 3
39706: PUSH
39707: LD_VAR 0 1
39711: PPUSH
39712: CALL_OW 255
39716: ST_TO_ADDR
// nat := GetNation ( unit ) ;
39717: LD_ADDR_VAR 0 4
39721: PUSH
39722: LD_VAR 0 1
39726: PPUSH
39727: CALL_OW 248
39731: ST_TO_ADDR
// case nat of 1 :
39732: LD_VAR 0 4
39736: PUSH
39737: LD_INT 1
39739: DOUBLE
39740: EQUAL
39741: IFTRUE 39745
39743: GO 39756
39745: POP
// tech := tech_lassight ; 2 :
39746: LD_ADDR_VAR 0 5
39750: PUSH
39751: LD_INT 12
39753: ST_TO_ADDR
39754: GO 39795
39756: LD_INT 2
39758: DOUBLE
39759: EQUAL
39760: IFTRUE 39764
39762: GO 39775
39764: POP
// tech := tech_mortar ; 3 :
39765: LD_ADDR_VAR 0 5
39769: PUSH
39770: LD_INT 41
39772: ST_TO_ADDR
39773: GO 39795
39775: LD_INT 3
39777: DOUBLE
39778: EQUAL
39779: IFTRUE 39783
39781: GO 39794
39783: POP
// tech := tech_bazooka ; end ;
39784: LD_ADDR_VAR 0 5
39788: PUSH
39789: LD_INT 44
39791: ST_TO_ADDR
39792: GO 39795
39794: POP
// if Researched ( side , tech ) then
39795: LD_VAR 0 3
39799: PPUSH
39800: LD_VAR 0 5
39804: PPUSH
39805: CALL_OW 325
39809: IFFALSE 39836
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39811: LD_ADDR_VAR 0 2
39815: PUSH
39816: LD_INT 5
39818: PUSH
39819: LD_INT 8
39821: PUSH
39822: LD_INT 9
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: LIST
39829: PUSH
39830: LD_VAR 0 4
39834: ARRAY
39835: ST_TO_ADDR
// end ;
39836: LD_VAR 0 2
39840: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39841: LD_INT 0
39843: PPUSH
39844: PPUSH
39845: PPUSH
// if not mines then
39846: LD_VAR 0 2
39850: NOT
39851: IFFALSE 39855
// exit ;
39853: GO 39999
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39855: LD_ADDR_VAR 0 5
39859: PUSH
39860: LD_INT 81
39862: PUSH
39863: LD_VAR 0 1
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 3
39874: PUSH
39875: LD_INT 21
39877: PUSH
39878: LD_INT 3
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PPUSH
39893: CALL_OW 69
39897: ST_TO_ADDR
// for i in mines do
39898: LD_ADDR_VAR 0 4
39902: PUSH
39903: LD_VAR 0 2
39907: PUSH
39908: FOR_IN
39909: IFFALSE 39997
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39911: LD_VAR 0 4
39915: PUSH
39916: LD_INT 1
39918: ARRAY
39919: PPUSH
39920: LD_VAR 0 4
39924: PUSH
39925: LD_INT 2
39927: ARRAY
39928: PPUSH
39929: CALL_OW 458
39933: NOT
39934: IFFALSE 39938
// continue ;
39936: GO 39908
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39938: LD_VAR 0 4
39942: PUSH
39943: LD_INT 1
39945: ARRAY
39946: PPUSH
39947: LD_VAR 0 4
39951: PUSH
39952: LD_INT 2
39954: ARRAY
39955: PPUSH
39956: CALL_OW 428
39960: PUSH
39961: LD_VAR 0 5
39965: IN
39966: IFFALSE 39995
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39968: LD_VAR 0 4
39972: PUSH
39973: LD_INT 1
39975: ARRAY
39976: PPUSH
39977: LD_VAR 0 4
39981: PUSH
39982: LD_INT 2
39984: ARRAY
39985: PPUSH
39986: LD_VAR 0 1
39990: PPUSH
39991: CALL_OW 456
// end ;
39995: GO 39908
39997: POP
39998: POP
// end ;
39999: LD_VAR 0 3
40003: RET
// export function Count ( array ) ; begin
40004: LD_INT 0
40006: PPUSH
// result := array + 0 ;
40007: LD_ADDR_VAR 0 2
40011: PUSH
40012: LD_VAR 0 1
40016: PUSH
40017: LD_INT 0
40019: PLUS
40020: ST_TO_ADDR
// end ;
40021: LD_VAR 0 2
40025: RET
// export function IsEmpty ( building ) ; begin
40026: LD_INT 0
40028: PPUSH
// if not building then
40029: LD_VAR 0 1
40033: NOT
40034: IFFALSE 40038
// exit ;
40036: GO 40081
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40038: LD_ADDR_VAR 0 2
40042: PUSH
40043: LD_VAR 0 1
40047: PUSH
40048: LD_INT 22
40050: PUSH
40051: LD_VAR 0 1
40055: PPUSH
40056: CALL_OW 255
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 58
40067: PUSH
40068: EMPTY
40069: LIST
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PPUSH
40075: CALL_OW 69
40079: IN
40080: ST_TO_ADDR
// end ;
40081: LD_VAR 0 2
40085: RET
// export function IsNotFull ( building ) ; var places ; begin
40086: LD_INT 0
40088: PPUSH
40089: PPUSH
// if not building then
40090: LD_VAR 0 1
40094: NOT
40095: IFFALSE 40099
// exit ;
40097: GO 40127
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
40099: LD_ADDR_VAR 0 2
40103: PUSH
40104: LD_VAR 0 1
40108: PPUSH
40109: LD_INT 3
40111: PUSH
40112: LD_INT 62
40114: PUSH
40115: EMPTY
40116: LIST
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PPUSH
40122: CALL_OW 72
40126: ST_TO_ADDR
// end ;
40127: LD_VAR 0 2
40131: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40132: LD_INT 0
40134: PPUSH
40135: PPUSH
40136: PPUSH
40137: PPUSH
// tmp := [ ] ;
40138: LD_ADDR_VAR 0 3
40142: PUSH
40143: EMPTY
40144: ST_TO_ADDR
// list := [ ] ;
40145: LD_ADDR_VAR 0 5
40149: PUSH
40150: EMPTY
40151: ST_TO_ADDR
// for i = 16 to 25 do
40152: LD_ADDR_VAR 0 4
40156: PUSH
40157: DOUBLE
40158: LD_INT 16
40160: DEC
40161: ST_TO_ADDR
40162: LD_INT 25
40164: PUSH
40165: FOR_TO
40166: IFFALSE 40239
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40168: LD_ADDR_VAR 0 3
40172: PUSH
40173: LD_VAR 0 3
40177: PUSH
40178: LD_INT 22
40180: PUSH
40181: LD_VAR 0 1
40185: PPUSH
40186: CALL_OW 255
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 91
40197: PUSH
40198: LD_VAR 0 1
40202: PUSH
40203: LD_INT 6
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 30
40213: PUSH
40214: LD_VAR 0 4
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: LIST
40227: PUSH
40228: EMPTY
40229: LIST
40230: PPUSH
40231: CALL_OW 69
40235: ADD
40236: ST_TO_ADDR
40237: GO 40165
40239: POP
40240: POP
// for i = 1 to tmp do
40241: LD_ADDR_VAR 0 4
40245: PUSH
40246: DOUBLE
40247: LD_INT 1
40249: DEC
40250: ST_TO_ADDR
40251: LD_VAR 0 3
40255: PUSH
40256: FOR_TO
40257: IFFALSE 40345
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40259: LD_ADDR_VAR 0 5
40263: PUSH
40264: LD_VAR 0 5
40268: PUSH
40269: LD_VAR 0 3
40273: PUSH
40274: LD_VAR 0 4
40278: ARRAY
40279: PPUSH
40280: CALL_OW 266
40284: PUSH
40285: LD_VAR 0 3
40289: PUSH
40290: LD_VAR 0 4
40294: ARRAY
40295: PPUSH
40296: CALL_OW 250
40300: PUSH
40301: LD_VAR 0 3
40305: PUSH
40306: LD_VAR 0 4
40310: ARRAY
40311: PPUSH
40312: CALL_OW 251
40316: PUSH
40317: LD_VAR 0 3
40321: PUSH
40322: LD_VAR 0 4
40326: ARRAY
40327: PPUSH
40328: CALL_OW 254
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: PUSH
40339: EMPTY
40340: LIST
40341: ADD
40342: ST_TO_ADDR
40343: GO 40256
40345: POP
40346: POP
// result := list ;
40347: LD_ADDR_VAR 0 2
40351: PUSH
40352: LD_VAR 0 5
40356: ST_TO_ADDR
// end ;
40357: LD_VAR 0 2
40361: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40362: LD_INT 0
40364: PPUSH
40365: PPUSH
40366: PPUSH
40367: PPUSH
40368: PPUSH
40369: PPUSH
40370: PPUSH
// if not factory then
40371: LD_VAR 0 1
40375: NOT
40376: IFFALSE 40380
// exit ;
40378: GO 40983
// if control = control_apeman then
40380: LD_VAR 0 4
40384: PUSH
40385: LD_INT 5
40387: EQUAL
40388: IFFALSE 40497
// begin tmp := UnitsInside ( factory ) ;
40390: LD_ADDR_VAR 0 8
40394: PUSH
40395: LD_VAR 0 1
40399: PPUSH
40400: CALL_OW 313
40404: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40405: LD_VAR 0 8
40409: PPUSH
40410: LD_INT 25
40412: PUSH
40413: LD_INT 12
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PPUSH
40420: CALL_OW 72
40424: NOT
40425: IFFALSE 40435
// control := control_manual ;
40427: LD_ADDR_VAR 0 4
40431: PUSH
40432: LD_INT 1
40434: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40435: LD_ADDR_VAR 0 8
40439: PUSH
40440: LD_VAR 0 1
40444: PPUSH
40445: CALL 40132 0 1
40449: ST_TO_ADDR
// if tmp then
40450: LD_VAR 0 8
40454: IFFALSE 40497
// begin for i in tmp do
40456: LD_ADDR_VAR 0 7
40460: PUSH
40461: LD_VAR 0 8
40465: PUSH
40466: FOR_IN
40467: IFFALSE 40495
// if i [ 1 ] = b_ext_radio then
40469: LD_VAR 0 7
40473: PUSH
40474: LD_INT 1
40476: ARRAY
40477: PUSH
40478: LD_INT 22
40480: EQUAL
40481: IFFALSE 40493
// begin control := control_remote ;
40483: LD_ADDR_VAR 0 4
40487: PUSH
40488: LD_INT 2
40490: ST_TO_ADDR
// break ;
40491: GO 40495
// end ;
40493: GO 40466
40495: POP
40496: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40497: LD_VAR 0 1
40501: PPUSH
40502: LD_VAR 0 2
40506: PPUSH
40507: LD_VAR 0 3
40511: PPUSH
40512: LD_VAR 0 4
40516: PPUSH
40517: LD_VAR 0 5
40521: PPUSH
40522: CALL_OW 448
40526: IFFALSE 40561
// begin result := [ chassis , engine , control , weapon ] ;
40528: LD_ADDR_VAR 0 6
40532: PUSH
40533: LD_VAR 0 2
40537: PUSH
40538: LD_VAR 0 3
40542: PUSH
40543: LD_VAR 0 4
40547: PUSH
40548: LD_VAR 0 5
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: ST_TO_ADDR
// exit ;
40559: GO 40983
// end ; _chassis := AvailableChassisList ( factory ) ;
40561: LD_ADDR_VAR 0 9
40565: PUSH
40566: LD_VAR 0 1
40570: PPUSH
40571: CALL_OW 475
40575: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
40576: LD_ADDR_VAR 0 11
40580: PUSH
40581: LD_VAR 0 1
40585: PPUSH
40586: CALL_OW 476
40590: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
40591: LD_ADDR_VAR 0 12
40595: PUSH
40596: LD_VAR 0 1
40600: PPUSH
40601: CALL_OW 477
40605: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
40606: LD_ADDR_VAR 0 10
40610: PUSH
40611: LD_VAR 0 1
40615: PPUSH
40616: CALL_OW 478
40620: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
40621: LD_VAR 0 9
40625: NOT
40626: IFTRUE 40635
40628: PUSH
40629: LD_VAR 0 11
40633: NOT
40634: OR
40635: IFTRUE 40644
40637: PUSH
40638: LD_VAR 0 12
40642: NOT
40643: OR
40644: IFTRUE 40653
40646: PUSH
40647: LD_VAR 0 10
40651: NOT
40652: OR
40653: IFFALSE 40688
// begin result := [ chassis , engine , control , weapon ] ;
40655: LD_ADDR_VAR 0 6
40659: PUSH
40660: LD_VAR 0 2
40664: PUSH
40665: LD_VAR 0 3
40669: PUSH
40670: LD_VAR 0 4
40674: PUSH
40675: LD_VAR 0 5
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: ST_TO_ADDR
// exit ;
40686: GO 40983
// end ; if not chassis in _chassis then
40688: LD_VAR 0 2
40692: PUSH
40693: LD_VAR 0 9
40697: IN
40698: NOT
40699: IFFALSE 40725
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
40701: LD_ADDR_VAR 0 2
40705: PUSH
40706: LD_VAR 0 9
40710: PUSH
40711: LD_INT 1
40713: PPUSH
40714: LD_VAR 0 9
40718: PPUSH
40719: CALL_OW 12
40723: ARRAY
40724: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
40725: LD_VAR 0 2
40729: PPUSH
40730: LD_VAR 0 3
40734: PPUSH
40735: CALL 40988 0 2
40739: NOT
40740: IFFALSE 40801
// repeat engine := _engine [ 1 ] ;
40742: LD_ADDR_VAR 0 3
40746: PUSH
40747: LD_VAR 0 11
40751: PUSH
40752: LD_INT 1
40754: ARRAY
40755: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40756: LD_ADDR_VAR 0 11
40760: PUSH
40761: LD_VAR 0 11
40765: PPUSH
40766: LD_INT 1
40768: PPUSH
40769: CALL_OW 3
40773: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40774: LD_VAR 0 2
40778: PPUSH
40779: LD_VAR 0 3
40783: PPUSH
40784: CALL 40988 0 2
40788: IFTRUE 40799
40790: PUSH
40791: LD_VAR 0 11
40795: PUSH
40796: EMPTY
40797: EQUAL
40798: OR
40799: IFFALSE 40742
// if not control in _control then
40801: LD_VAR 0 4
40805: PUSH
40806: LD_VAR 0 12
40810: IN
40811: NOT
40812: IFFALSE 40838
// control := _control [ rand ( 1 , _control ) ] ;
40814: LD_ADDR_VAR 0 4
40818: PUSH
40819: LD_VAR 0 12
40823: PUSH
40824: LD_INT 1
40826: PPUSH
40827: LD_VAR 0 12
40831: PPUSH
40832: CALL_OW 12
40836: ARRAY
40837: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40838: LD_VAR 0 2
40842: PPUSH
40843: LD_VAR 0 5
40847: PPUSH
40848: CALL 41210 0 2
40852: NOT
40853: IFFALSE 40914
// repeat weapon := _weapon [ 1 ] ;
40855: LD_ADDR_VAR 0 5
40859: PUSH
40860: LD_VAR 0 10
40864: PUSH
40865: LD_INT 1
40867: ARRAY
40868: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40869: LD_ADDR_VAR 0 10
40873: PUSH
40874: LD_VAR 0 10
40878: PPUSH
40879: LD_INT 1
40881: PPUSH
40882: CALL_OW 3
40886: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40887: LD_VAR 0 2
40891: PPUSH
40892: LD_VAR 0 5
40896: PPUSH
40897: CALL 41210 0 2
40901: IFTRUE 40912
40903: PUSH
40904: LD_VAR 0 10
40908: PUSH
40909: EMPTY
40910: EQUAL
40911: OR
40912: IFFALSE 40855
// result := [ ] ;
40914: LD_ADDR_VAR 0 6
40918: PUSH
40919: EMPTY
40920: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40921: LD_VAR 0 1
40925: PPUSH
40926: LD_VAR 0 2
40930: PPUSH
40931: LD_VAR 0 3
40935: PPUSH
40936: LD_VAR 0 4
40940: PPUSH
40941: LD_VAR 0 5
40945: PPUSH
40946: CALL_OW 448
40950: IFFALSE 40983
// result := [ chassis , engine , control , weapon ] ;
40952: LD_ADDR_VAR 0 6
40956: PUSH
40957: LD_VAR 0 2
40961: PUSH
40962: LD_VAR 0 3
40966: PUSH
40967: LD_VAR 0 4
40971: PUSH
40972: LD_VAR 0 5
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: ST_TO_ADDR
// end ;
40983: LD_VAR 0 6
40987: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40988: LD_INT 0
40990: PPUSH
// if not chassis or not engine then
40991: LD_VAR 0 1
40995: NOT
40996: IFTRUE 41005
40998: PUSH
40999: LD_VAR 0 2
41003: NOT
41004: OR
41005: IFFALSE 41009
// exit ;
41007: GO 41205
// case engine of engine_solar :
41009: LD_VAR 0 2
41013: PUSH
41014: LD_INT 2
41016: DOUBLE
41017: EQUAL
41018: IFTRUE 41022
41020: GO 41060
41022: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41023: LD_ADDR_VAR 0 3
41027: PUSH
41028: LD_INT 11
41030: PUSH
41031: LD_INT 12
41033: PUSH
41034: LD_INT 13
41036: PUSH
41037: LD_INT 14
41039: PUSH
41040: LD_INT 1
41042: PUSH
41043: LD_INT 2
41045: PUSH
41046: LD_INT 3
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: ST_TO_ADDR
41058: GO 41189
41060: LD_INT 1
41062: DOUBLE
41063: EQUAL
41064: IFTRUE 41068
41066: GO 41130
41068: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41069: LD_ADDR_VAR 0 3
41073: PUSH
41074: LD_INT 11
41076: PUSH
41077: LD_INT 12
41079: PUSH
41080: LD_INT 13
41082: PUSH
41083: LD_INT 14
41085: PUSH
41086: LD_INT 1
41088: PUSH
41089: LD_INT 2
41091: PUSH
41092: LD_INT 3
41094: PUSH
41095: LD_INT 4
41097: PUSH
41098: LD_INT 5
41100: PUSH
41101: LD_INT 21
41103: PUSH
41104: LD_INT 23
41106: PUSH
41107: LD_INT 22
41109: PUSH
41110: LD_INT 24
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: ST_TO_ADDR
41128: GO 41189
41130: LD_INT 3
41132: DOUBLE
41133: EQUAL
41134: IFTRUE 41138
41136: GO 41188
41138: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41139: LD_ADDR_VAR 0 3
41143: PUSH
41144: LD_INT 13
41146: PUSH
41147: LD_INT 14
41149: PUSH
41150: LD_INT 2
41152: PUSH
41153: LD_INT 3
41155: PUSH
41156: LD_INT 4
41158: PUSH
41159: LD_INT 5
41161: PUSH
41162: LD_INT 21
41164: PUSH
41165: LD_INT 22
41167: PUSH
41168: LD_INT 23
41170: PUSH
41171: LD_INT 24
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: ST_TO_ADDR
41186: GO 41189
41188: POP
// result := ( chassis in result ) ;
41189: LD_ADDR_VAR 0 3
41193: PUSH
41194: LD_VAR 0 1
41198: PUSH
41199: LD_VAR 0 3
41203: IN
41204: ST_TO_ADDR
// end ;
41205: LD_VAR 0 3
41209: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41210: LD_INT 0
41212: PPUSH
// if not chassis or not weapon then
41213: LD_VAR 0 1
41217: NOT
41218: IFTRUE 41227
41220: PUSH
41221: LD_VAR 0 2
41225: NOT
41226: OR
41227: IFFALSE 41231
// exit ;
41229: GO 42325
// case weapon of us_machine_gun :
41231: LD_VAR 0 2
41235: PUSH
41236: LD_INT 2
41238: DOUBLE
41239: EQUAL
41240: IFTRUE 41244
41242: GO 41274
41244: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41245: LD_ADDR_VAR 0 3
41249: PUSH
41250: LD_INT 1
41252: PUSH
41253: LD_INT 2
41255: PUSH
41256: LD_INT 3
41258: PUSH
41259: LD_INT 4
41261: PUSH
41262: LD_INT 5
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: ST_TO_ADDR
41272: GO 42309
41274: LD_INT 3
41276: DOUBLE
41277: EQUAL
41278: IFTRUE 41282
41280: GO 41312
41282: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41283: LD_ADDR_VAR 0 3
41287: PUSH
41288: LD_INT 1
41290: PUSH
41291: LD_INT 2
41293: PUSH
41294: LD_INT 3
41296: PUSH
41297: LD_INT 4
41299: PUSH
41300: LD_INT 5
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: ST_TO_ADDR
41310: GO 42309
41312: LD_INT 11
41314: DOUBLE
41315: EQUAL
41316: IFTRUE 41320
41318: GO 41350
41320: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41321: LD_ADDR_VAR 0 3
41325: PUSH
41326: LD_INT 1
41328: PUSH
41329: LD_INT 2
41331: PUSH
41332: LD_INT 3
41334: PUSH
41335: LD_INT 4
41337: PUSH
41338: LD_INT 5
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: ST_TO_ADDR
41348: GO 42309
41350: LD_INT 4
41352: DOUBLE
41353: EQUAL
41354: IFTRUE 41358
41356: GO 41384
41358: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41359: LD_ADDR_VAR 0 3
41363: PUSH
41364: LD_INT 2
41366: PUSH
41367: LD_INT 3
41369: PUSH
41370: LD_INT 4
41372: PUSH
41373: LD_INT 5
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: ST_TO_ADDR
41382: GO 42309
41384: LD_INT 5
41386: DOUBLE
41387: EQUAL
41388: IFTRUE 41392
41390: GO 41418
41392: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41393: LD_ADDR_VAR 0 3
41397: PUSH
41398: LD_INT 2
41400: PUSH
41401: LD_INT 3
41403: PUSH
41404: LD_INT 4
41406: PUSH
41407: LD_INT 5
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: ST_TO_ADDR
41416: GO 42309
41418: LD_INT 9
41420: DOUBLE
41421: EQUAL
41422: IFTRUE 41426
41424: GO 41452
41426: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41427: LD_ADDR_VAR 0 3
41431: PUSH
41432: LD_INT 2
41434: PUSH
41435: LD_INT 3
41437: PUSH
41438: LD_INT 4
41440: PUSH
41441: LD_INT 5
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: ST_TO_ADDR
41450: GO 42309
41452: LD_INT 7
41454: DOUBLE
41455: EQUAL
41456: IFTRUE 41460
41458: GO 41486
41460: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41461: LD_ADDR_VAR 0 3
41465: PUSH
41466: LD_INT 2
41468: PUSH
41469: LD_INT 3
41471: PUSH
41472: LD_INT 4
41474: PUSH
41475: LD_INT 5
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: ST_TO_ADDR
41484: GO 42309
41486: LD_INT 12
41488: DOUBLE
41489: EQUAL
41490: IFTRUE 41494
41492: GO 41520
41494: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41495: LD_ADDR_VAR 0 3
41499: PUSH
41500: LD_INT 2
41502: PUSH
41503: LD_INT 3
41505: PUSH
41506: LD_INT 4
41508: PUSH
41509: LD_INT 5
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: ST_TO_ADDR
41518: GO 42309
41520: LD_INT 13
41522: DOUBLE
41523: EQUAL
41524: IFTRUE 41528
41526: GO 41554
41528: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41529: LD_ADDR_VAR 0 3
41533: PUSH
41534: LD_INT 2
41536: PUSH
41537: LD_INT 3
41539: PUSH
41540: LD_INT 4
41542: PUSH
41543: LD_INT 5
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: ST_TO_ADDR
41552: GO 42309
41554: LD_INT 14
41556: DOUBLE
41557: EQUAL
41558: IFTRUE 41562
41560: GO 41580
41562: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
41563: LD_ADDR_VAR 0 3
41567: PUSH
41568: LD_INT 4
41570: PUSH
41571: LD_INT 5
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: ST_TO_ADDR
41578: GO 42309
41580: LD_INT 6
41582: DOUBLE
41583: EQUAL
41584: IFTRUE 41588
41586: GO 41606
41588: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
41589: LD_ADDR_VAR 0 3
41593: PUSH
41594: LD_INT 4
41596: PUSH
41597: LD_INT 5
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: ST_TO_ADDR
41604: GO 42309
41606: LD_INT 10
41608: DOUBLE
41609: EQUAL
41610: IFTRUE 41614
41612: GO 41632
41614: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
41615: LD_ADDR_VAR 0 3
41619: PUSH
41620: LD_INT 4
41622: PUSH
41623: LD_INT 5
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: ST_TO_ADDR
41630: GO 42309
41632: LD_INT 22
41634: DOUBLE
41635: EQUAL
41636: IFTRUE 41640
41638: GO 41666
41640: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
41641: LD_ADDR_VAR 0 3
41645: PUSH
41646: LD_INT 11
41648: PUSH
41649: LD_INT 12
41651: PUSH
41652: LD_INT 13
41654: PUSH
41655: LD_INT 14
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: ST_TO_ADDR
41664: GO 42309
41666: LD_INT 23
41668: DOUBLE
41669: EQUAL
41670: IFTRUE 41674
41672: GO 41700
41674: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
41675: LD_ADDR_VAR 0 3
41679: PUSH
41680: LD_INT 11
41682: PUSH
41683: LD_INT 12
41685: PUSH
41686: LD_INT 13
41688: PUSH
41689: LD_INT 14
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: ST_TO_ADDR
41698: GO 42309
41700: LD_INT 24
41702: DOUBLE
41703: EQUAL
41704: IFTRUE 41708
41706: GO 41734
41708: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
41709: LD_ADDR_VAR 0 3
41713: PUSH
41714: LD_INT 11
41716: PUSH
41717: LD_INT 12
41719: PUSH
41720: LD_INT 13
41722: PUSH
41723: LD_INT 14
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: ST_TO_ADDR
41732: GO 42309
41734: LD_INT 30
41736: DOUBLE
41737: EQUAL
41738: IFTRUE 41742
41740: GO 41768
41742: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41743: LD_ADDR_VAR 0 3
41747: PUSH
41748: LD_INT 11
41750: PUSH
41751: LD_INT 12
41753: PUSH
41754: LD_INT 13
41756: PUSH
41757: LD_INT 14
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: ST_TO_ADDR
41766: GO 42309
41768: LD_INT 25
41770: DOUBLE
41771: EQUAL
41772: IFTRUE 41776
41774: GO 41794
41776: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41777: LD_ADDR_VAR 0 3
41781: PUSH
41782: LD_INT 13
41784: PUSH
41785: LD_INT 14
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: ST_TO_ADDR
41792: GO 42309
41794: LD_INT 27
41796: DOUBLE
41797: EQUAL
41798: IFTRUE 41802
41800: GO 41820
41802: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
41803: LD_ADDR_VAR 0 3
41807: PUSH
41808: LD_INT 13
41810: PUSH
41811: LD_INT 14
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: ST_TO_ADDR
41818: GO 42309
41820: LD_INT 92
41822: DOUBLE
41823: EQUAL
41824: IFTRUE 41828
41826: GO 41854
41828: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41829: LD_ADDR_VAR 0 3
41833: PUSH
41834: LD_INT 11
41836: PUSH
41837: LD_INT 12
41839: PUSH
41840: LD_INT 13
41842: PUSH
41843: LD_INT 14
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: ST_TO_ADDR
41852: GO 42309
41854: LD_INT 28
41856: DOUBLE
41857: EQUAL
41858: IFTRUE 41862
41860: GO 41880
41862: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41863: LD_ADDR_VAR 0 3
41867: PUSH
41868: LD_INT 13
41870: PUSH
41871: LD_INT 14
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: ST_TO_ADDR
41878: GO 42309
41880: LD_INT 29
41882: DOUBLE
41883: EQUAL
41884: IFTRUE 41888
41886: GO 41906
41888: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41889: LD_ADDR_VAR 0 3
41893: PUSH
41894: LD_INT 13
41896: PUSH
41897: LD_INT 14
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: ST_TO_ADDR
41904: GO 42309
41906: LD_INT 31
41908: DOUBLE
41909: EQUAL
41910: IFTRUE 41914
41912: GO 41932
41914: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41915: LD_ADDR_VAR 0 3
41919: PUSH
41920: LD_INT 13
41922: PUSH
41923: LD_INT 14
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: ST_TO_ADDR
41930: GO 42309
41932: LD_INT 26
41934: DOUBLE
41935: EQUAL
41936: IFTRUE 41940
41938: GO 41958
41940: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41941: LD_ADDR_VAR 0 3
41945: PUSH
41946: LD_INT 13
41948: PUSH
41949: LD_INT 14
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: ST_TO_ADDR
41956: GO 42309
41958: LD_INT 42
41960: DOUBLE
41961: EQUAL
41962: IFTRUE 41966
41964: GO 41992
41966: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41967: LD_ADDR_VAR 0 3
41971: PUSH
41972: LD_INT 21
41974: PUSH
41975: LD_INT 22
41977: PUSH
41978: LD_INT 23
41980: PUSH
41981: LD_INT 24
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: ST_TO_ADDR
41990: GO 42309
41992: LD_INT 43
41994: DOUBLE
41995: EQUAL
41996: IFTRUE 42000
41998: GO 42026
42000: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42001: LD_ADDR_VAR 0 3
42005: PUSH
42006: LD_INT 21
42008: PUSH
42009: LD_INT 22
42011: PUSH
42012: LD_INT 23
42014: PUSH
42015: LD_INT 24
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: ST_TO_ADDR
42024: GO 42309
42026: LD_INT 44
42028: DOUBLE
42029: EQUAL
42030: IFTRUE 42034
42032: GO 42060
42034: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42035: LD_ADDR_VAR 0 3
42039: PUSH
42040: LD_INT 21
42042: PUSH
42043: LD_INT 22
42045: PUSH
42046: LD_INT 23
42048: PUSH
42049: LD_INT 24
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: ST_TO_ADDR
42058: GO 42309
42060: LD_INT 45
42062: DOUBLE
42063: EQUAL
42064: IFTRUE 42068
42066: GO 42094
42068: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42069: LD_ADDR_VAR 0 3
42073: PUSH
42074: LD_INT 21
42076: PUSH
42077: LD_INT 22
42079: PUSH
42080: LD_INT 23
42082: PUSH
42083: LD_INT 24
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: ST_TO_ADDR
42092: GO 42309
42094: LD_INT 49
42096: DOUBLE
42097: EQUAL
42098: IFTRUE 42102
42100: GO 42128
42102: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42103: LD_ADDR_VAR 0 3
42107: PUSH
42108: LD_INT 21
42110: PUSH
42111: LD_INT 22
42113: PUSH
42114: LD_INT 23
42116: PUSH
42117: LD_INT 24
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: ST_TO_ADDR
42126: GO 42309
42128: LD_INT 51
42130: DOUBLE
42131: EQUAL
42132: IFTRUE 42136
42134: GO 42162
42136: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42137: LD_ADDR_VAR 0 3
42141: PUSH
42142: LD_INT 21
42144: PUSH
42145: LD_INT 22
42147: PUSH
42148: LD_INT 23
42150: PUSH
42151: LD_INT 24
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: ST_TO_ADDR
42160: GO 42309
42162: LD_INT 52
42164: DOUBLE
42165: EQUAL
42166: IFTRUE 42170
42168: GO 42196
42170: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42171: LD_ADDR_VAR 0 3
42175: PUSH
42176: LD_INT 21
42178: PUSH
42179: LD_INT 22
42181: PUSH
42182: LD_INT 23
42184: PUSH
42185: LD_INT 24
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: ST_TO_ADDR
42194: GO 42309
42196: LD_INT 53
42198: DOUBLE
42199: EQUAL
42200: IFTRUE 42204
42202: GO 42222
42204: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42205: LD_ADDR_VAR 0 3
42209: PUSH
42210: LD_INT 23
42212: PUSH
42213: LD_INT 24
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: ST_TO_ADDR
42220: GO 42309
42222: LD_INT 46
42224: DOUBLE
42225: EQUAL
42226: IFTRUE 42230
42228: GO 42248
42230: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42231: LD_ADDR_VAR 0 3
42235: PUSH
42236: LD_INT 23
42238: PUSH
42239: LD_INT 24
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: ST_TO_ADDR
42246: GO 42309
42248: LD_INT 47
42250: DOUBLE
42251: EQUAL
42252: IFTRUE 42256
42254: GO 42274
42256: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
42257: LD_ADDR_VAR 0 3
42261: PUSH
42262: LD_INT 23
42264: PUSH
42265: LD_INT 24
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: ST_TO_ADDR
42272: GO 42309
42274: LD_INT 98
42276: DOUBLE
42277: EQUAL
42278: IFTRUE 42282
42280: GO 42308
42282: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42283: LD_ADDR_VAR 0 3
42287: PUSH
42288: LD_INT 21
42290: PUSH
42291: LD_INT 22
42293: PUSH
42294: LD_INT 23
42296: PUSH
42297: LD_INT 24
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: ST_TO_ADDR
42306: GO 42309
42308: POP
// result := ( chassis in result ) ;
42309: LD_ADDR_VAR 0 3
42313: PUSH
42314: LD_VAR 0 1
42318: PUSH
42319: LD_VAR 0 3
42323: IN
42324: ST_TO_ADDR
// end ;
42325: LD_VAR 0 3
42329: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42330: LD_INT 0
42332: PPUSH
42333: PPUSH
42334: PPUSH
42335: PPUSH
42336: PPUSH
42337: PPUSH
42338: PPUSH
// result := array ;
42339: LD_ADDR_VAR 0 5
42343: PUSH
42344: LD_VAR 0 1
42348: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42349: LD_VAR 0 1
42353: NOT
42354: IFTRUE 42363
42356: PUSH
42357: LD_VAR 0 2
42361: NOT
42362: OR
42363: IFTRUE 42372
42365: PUSH
42366: LD_VAR 0 3
42370: NOT
42371: OR
42372: IFTRUE 42386
42374: PUSH
42375: LD_VAR 0 2
42379: PUSH
42380: LD_VAR 0 1
42384: GREATER
42385: OR
42386: IFTRUE 42400
42388: PUSH
42389: LD_VAR 0 3
42393: PUSH
42394: LD_VAR 0 1
42398: GREATER
42399: OR
42400: IFFALSE 42404
// exit ;
42402: GO 42700
// if direction then
42404: LD_VAR 0 4
42408: IFFALSE 42472
// begin d := 1 ;
42410: LD_ADDR_VAR 0 9
42414: PUSH
42415: LD_INT 1
42417: ST_TO_ADDR
// if i_from > i_to then
42418: LD_VAR 0 2
42422: PUSH
42423: LD_VAR 0 3
42427: GREATER
42428: IFFALSE 42454
// length := ( array - i_from ) + i_to else
42430: LD_ADDR_VAR 0 11
42434: PUSH
42435: LD_VAR 0 1
42439: PUSH
42440: LD_VAR 0 2
42444: MINUS
42445: PUSH
42446: LD_VAR 0 3
42450: PLUS
42451: ST_TO_ADDR
42452: GO 42470
// length := i_to - i_from ;
42454: LD_ADDR_VAR 0 11
42458: PUSH
42459: LD_VAR 0 3
42463: PUSH
42464: LD_VAR 0 2
42468: MINUS
42469: ST_TO_ADDR
// end else
42470: GO 42533
// begin d := - 1 ;
42472: LD_ADDR_VAR 0 9
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: ST_TO_ADDR
// if i_from > i_to then
42481: LD_VAR 0 2
42485: PUSH
42486: LD_VAR 0 3
42490: GREATER
42491: IFFALSE 42511
// length := i_from - i_to else
42493: LD_ADDR_VAR 0 11
42497: PUSH
42498: LD_VAR 0 2
42502: PUSH
42503: LD_VAR 0 3
42507: MINUS
42508: ST_TO_ADDR
42509: GO 42533
// length := ( array - i_to ) + i_from ;
42511: LD_ADDR_VAR 0 11
42515: PUSH
42516: LD_VAR 0 1
42520: PUSH
42521: LD_VAR 0 3
42525: MINUS
42526: PUSH
42527: LD_VAR 0 2
42531: PLUS
42532: ST_TO_ADDR
// end ; if not length then
42533: LD_VAR 0 11
42537: NOT
42538: IFFALSE 42542
// exit ;
42540: GO 42700
// tmp := array ;
42542: LD_ADDR_VAR 0 10
42546: PUSH
42547: LD_VAR 0 1
42551: ST_TO_ADDR
// for i = 1 to length do
42552: LD_ADDR_VAR 0 6
42556: PUSH
42557: DOUBLE
42558: LD_INT 1
42560: DEC
42561: ST_TO_ADDR
42562: LD_VAR 0 11
42566: PUSH
42567: FOR_TO
42568: IFFALSE 42688
// begin for j = 1 to array do
42570: LD_ADDR_VAR 0 7
42574: PUSH
42575: DOUBLE
42576: LD_INT 1
42578: DEC
42579: ST_TO_ADDR
42580: LD_VAR 0 1
42584: PUSH
42585: FOR_TO
42586: IFFALSE 42674
// begin k := j + d ;
42588: LD_ADDR_VAR 0 8
42592: PUSH
42593: LD_VAR 0 7
42597: PUSH
42598: LD_VAR 0 9
42602: PLUS
42603: ST_TO_ADDR
// if k > array then
42604: LD_VAR 0 8
42608: PUSH
42609: LD_VAR 0 1
42613: GREATER
42614: IFFALSE 42624
// k := 1 ;
42616: LD_ADDR_VAR 0 8
42620: PUSH
42621: LD_INT 1
42623: ST_TO_ADDR
// if not k then
42624: LD_VAR 0 8
42628: NOT
42629: IFFALSE 42641
// k := array ;
42631: LD_ADDR_VAR 0 8
42635: PUSH
42636: LD_VAR 0 1
42640: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
42641: LD_ADDR_VAR 0 10
42645: PUSH
42646: LD_VAR 0 10
42650: PPUSH
42651: LD_VAR 0 8
42655: PPUSH
42656: LD_VAR 0 1
42660: PUSH
42661: LD_VAR 0 7
42665: ARRAY
42666: PPUSH
42667: CALL_OW 1
42671: ST_TO_ADDR
// end ;
42672: GO 42585
42674: POP
42675: POP
// array := tmp ;
42676: LD_ADDR_VAR 0 1
42680: PUSH
42681: LD_VAR 0 10
42685: ST_TO_ADDR
// end ;
42686: GO 42567
42688: POP
42689: POP
// result := array ;
42690: LD_ADDR_VAR 0 5
42694: PUSH
42695: LD_VAR 0 1
42699: ST_TO_ADDR
// end ;
42700: LD_VAR 0 5
42704: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
42705: LD_INT 0
42707: PPUSH
42708: PPUSH
// result := 0 ;
42709: LD_ADDR_VAR 0 3
42713: PUSH
42714: LD_INT 0
42716: ST_TO_ADDR
// if not array or not value in array then
42717: LD_VAR 0 1
42721: NOT
42722: IFTRUE 42737
42724: PUSH
42725: LD_VAR 0 2
42729: PUSH
42730: LD_VAR 0 1
42734: IN
42735: NOT
42736: OR
42737: IFFALSE 42741
// exit ;
42739: GO 42795
// for i = 1 to array do
42741: LD_ADDR_VAR 0 4
42745: PUSH
42746: DOUBLE
42747: LD_INT 1
42749: DEC
42750: ST_TO_ADDR
42751: LD_VAR 0 1
42755: PUSH
42756: FOR_TO
42757: IFFALSE 42793
// if value = array [ i ] then
42759: LD_VAR 0 2
42763: PUSH
42764: LD_VAR 0 1
42768: PUSH
42769: LD_VAR 0 4
42773: ARRAY
42774: EQUAL
42775: IFFALSE 42791
// begin result := i ;
42777: LD_ADDR_VAR 0 3
42781: PUSH
42782: LD_VAR 0 4
42786: ST_TO_ADDR
// exit ;
42787: POP
42788: POP
42789: GO 42795
// end ;
42791: GO 42756
42793: POP
42794: POP
// end ;
42795: LD_VAR 0 3
42799: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
42800: LD_INT 0
42802: PPUSH
// vc_chassis := chassis ;
42803: LD_ADDR_OWVAR 37
42807: PUSH
42808: LD_VAR 0 1
42812: ST_TO_ADDR
// vc_engine := engine ;
42813: LD_ADDR_OWVAR 39
42817: PUSH
42818: LD_VAR 0 2
42822: ST_TO_ADDR
// vc_control := control ;
42823: LD_ADDR_OWVAR 38
42827: PUSH
42828: LD_VAR 0 3
42832: ST_TO_ADDR
// vc_weapon := weapon ;
42833: LD_ADDR_OWVAR 40
42837: PUSH
42838: LD_VAR 0 4
42842: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42843: LD_ADDR_OWVAR 41
42847: PUSH
42848: LD_VAR 0 5
42852: ST_TO_ADDR
// end ;
42853: LD_VAR 0 6
42857: RET
// export function WantPlant ( unit ) ; var task ; begin
42858: LD_INT 0
42860: PPUSH
42861: PPUSH
// result := false ;
42862: LD_ADDR_VAR 0 2
42866: PUSH
42867: LD_INT 0
42869: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42870: LD_ADDR_VAR 0 3
42874: PUSH
42875: LD_VAR 0 1
42879: PPUSH
42880: CALL_OW 437
42884: ST_TO_ADDR
// if task then
42885: LD_VAR 0 3
42889: IFFALSE 42917
// if task [ 1 ] [ 1 ] = p then
42891: LD_VAR 0 3
42895: PUSH
42896: LD_INT 1
42898: ARRAY
42899: PUSH
42900: LD_INT 1
42902: ARRAY
42903: PUSH
42904: LD_STRING p
42906: EQUAL
42907: IFFALSE 42917
// result := true ;
42909: LD_ADDR_VAR 0 2
42913: PUSH
42914: LD_INT 1
42916: ST_TO_ADDR
// end ;
42917: LD_VAR 0 2
42921: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42922: LD_INT 0
42924: PPUSH
42925: PPUSH
42926: PPUSH
42927: PPUSH
// if pos < 1 then
42928: LD_VAR 0 2
42932: PUSH
42933: LD_INT 1
42935: LESS
42936: IFFALSE 42940
// exit ;
42938: GO 43243
// if pos = 1 then
42940: LD_VAR 0 2
42944: PUSH
42945: LD_INT 1
42947: EQUAL
42948: IFFALSE 42981
// result := Replace ( arr , pos [ 1 ] , value ) else
42950: LD_ADDR_VAR 0 4
42954: PUSH
42955: LD_VAR 0 1
42959: PPUSH
42960: LD_VAR 0 2
42964: PUSH
42965: LD_INT 1
42967: ARRAY
42968: PPUSH
42969: LD_VAR 0 3
42973: PPUSH
42974: CALL_OW 1
42978: ST_TO_ADDR
42979: GO 43243
// begin tmp := arr ;
42981: LD_ADDR_VAR 0 6
42985: PUSH
42986: LD_VAR 0 1
42990: ST_TO_ADDR
// s_arr := [ tmp ] ;
42991: LD_ADDR_VAR 0 7
42995: PUSH
42996: LD_VAR 0 6
43000: PUSH
43001: EMPTY
43002: LIST
43003: ST_TO_ADDR
// for i = 1 to pos - 1 do
43004: LD_ADDR_VAR 0 5
43008: PUSH
43009: DOUBLE
43010: LD_INT 1
43012: DEC
43013: ST_TO_ADDR
43014: LD_VAR 0 2
43018: PUSH
43019: LD_INT 1
43021: MINUS
43022: PUSH
43023: FOR_TO
43024: IFFALSE 43069
// begin tmp := tmp [ pos [ i ] ] ;
43026: LD_ADDR_VAR 0 6
43030: PUSH
43031: LD_VAR 0 6
43035: PUSH
43036: LD_VAR 0 2
43040: PUSH
43041: LD_VAR 0 5
43045: ARRAY
43046: ARRAY
43047: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43048: LD_ADDR_VAR 0 7
43052: PUSH
43053: LD_VAR 0 7
43057: PUSH
43058: LD_VAR 0 6
43062: PUSH
43063: EMPTY
43064: LIST
43065: ADD
43066: ST_TO_ADDR
// end ;
43067: GO 43023
43069: POP
43070: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43071: LD_ADDR_VAR 0 6
43075: PUSH
43076: LD_VAR 0 6
43080: PPUSH
43081: LD_VAR 0 2
43085: PUSH
43086: LD_VAR 0 2
43090: ARRAY
43091: PPUSH
43092: LD_VAR 0 3
43096: PPUSH
43097: CALL_OW 1
43101: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43102: LD_ADDR_VAR 0 7
43106: PUSH
43107: LD_VAR 0 7
43111: PPUSH
43112: LD_VAR 0 7
43116: PPUSH
43117: LD_VAR 0 6
43121: PPUSH
43122: CALL_OW 1
43126: ST_TO_ADDR
// for i = s_arr downto 2 do
43127: LD_ADDR_VAR 0 5
43131: PUSH
43132: DOUBLE
43133: LD_VAR 0 7
43137: INC
43138: ST_TO_ADDR
43139: LD_INT 2
43141: PUSH
43142: FOR_DOWNTO
43143: IFFALSE 43227
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43145: LD_ADDR_VAR 0 6
43149: PUSH
43150: LD_VAR 0 7
43154: PUSH
43155: LD_VAR 0 5
43159: PUSH
43160: LD_INT 1
43162: MINUS
43163: ARRAY
43164: PPUSH
43165: LD_VAR 0 2
43169: PUSH
43170: LD_VAR 0 5
43174: PUSH
43175: LD_INT 1
43177: MINUS
43178: ARRAY
43179: PPUSH
43180: LD_VAR 0 7
43184: PUSH
43185: LD_VAR 0 5
43189: ARRAY
43190: PPUSH
43191: CALL_OW 1
43195: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43196: LD_ADDR_VAR 0 7
43200: PUSH
43201: LD_VAR 0 7
43205: PPUSH
43206: LD_VAR 0 5
43210: PUSH
43211: LD_INT 1
43213: MINUS
43214: PPUSH
43215: LD_VAR 0 6
43219: PPUSH
43220: CALL_OW 1
43224: ST_TO_ADDR
// end ;
43225: GO 43142
43227: POP
43228: POP
// result := s_arr [ 1 ] ;
43229: LD_ADDR_VAR 0 4
43233: PUSH
43234: LD_VAR 0 7
43238: PUSH
43239: LD_INT 1
43241: ARRAY
43242: ST_TO_ADDR
// end ; end ;
43243: LD_VAR 0 4
43247: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43248: LD_INT 0
43250: PPUSH
43251: PPUSH
// if not list then
43252: LD_VAR 0 1
43256: NOT
43257: IFFALSE 43261
// exit ;
43259: GO 43352
// i := list [ pos1 ] ;
43261: LD_ADDR_VAR 0 5
43265: PUSH
43266: LD_VAR 0 1
43270: PUSH
43271: LD_VAR 0 2
43275: ARRAY
43276: ST_TO_ADDR
// if not i then
43277: LD_VAR 0 5
43281: NOT
43282: IFFALSE 43286
// exit ;
43284: GO 43352
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43286: LD_ADDR_VAR 0 1
43290: PUSH
43291: LD_VAR 0 1
43295: PPUSH
43296: LD_VAR 0 2
43300: PPUSH
43301: LD_VAR 0 1
43305: PUSH
43306: LD_VAR 0 3
43310: ARRAY
43311: PPUSH
43312: CALL_OW 1
43316: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43317: LD_ADDR_VAR 0 1
43321: PUSH
43322: LD_VAR 0 1
43326: PPUSH
43327: LD_VAR 0 3
43331: PPUSH
43332: LD_VAR 0 5
43336: PPUSH
43337: CALL_OW 1
43341: ST_TO_ADDR
// result := list ;
43342: LD_ADDR_VAR 0 4
43346: PUSH
43347: LD_VAR 0 1
43351: ST_TO_ADDR
// end ;
43352: LD_VAR 0 4
43356: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43357: LD_INT 0
43359: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43360: LD_ADDR_VAR 0 5
43364: PUSH
43365: LD_VAR 0 1
43369: PPUSH
43370: CALL_OW 250
43374: PPUSH
43375: LD_VAR 0 1
43379: PPUSH
43380: CALL_OW 251
43384: PPUSH
43385: LD_VAR 0 2
43389: PPUSH
43390: LD_VAR 0 3
43394: PPUSH
43395: LD_VAR 0 4
43399: PPUSH
43400: CALL 43782 0 5
43404: ST_TO_ADDR
// end ;
43405: LD_VAR 0 5
43409: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
43410: LD_INT 0
43412: PPUSH
43413: PPUSH
43414: PPUSH
43415: PPUSH
// if not list or not unit then
43416: LD_VAR 0 2
43420: NOT
43421: IFTRUE 43430
43423: PUSH
43424: LD_VAR 0 1
43428: NOT
43429: OR
43430: IFFALSE 43434
// exit ;
43432: GO 43777
// result := [ ] ;
43434: LD_ADDR_VAR 0 5
43438: PUSH
43439: EMPTY
43440: ST_TO_ADDR
// for i in list do
43441: LD_ADDR_VAR 0 6
43445: PUSH
43446: LD_VAR 0 2
43450: PUSH
43451: FOR_IN
43452: IFFALSE 43670
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43454: LD_ADDR_VAR 0 8
43458: PUSH
43459: LD_VAR 0 1
43463: PPUSH
43464: LD_VAR 0 6
43468: PUSH
43469: LD_INT 1
43471: ARRAY
43472: PPUSH
43473: LD_VAR 0 6
43477: PUSH
43478: LD_INT 2
43480: ARRAY
43481: PPUSH
43482: CALL_OW 297
43486: ST_TO_ADDR
// if not Count ( result ) then
43487: LD_VAR 0 5
43491: PPUSH
43492: CALL 40004 0 1
43496: NOT
43497: IFFALSE 43530
// begin result := Join ( result , [ i , tmp ] ) ;
43499: LD_ADDR_VAR 0 5
43503: PUSH
43504: LD_VAR 0 5
43508: PPUSH
43509: LD_VAR 0 6
43513: PUSH
43514: LD_VAR 0 8
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PPUSH
43523: CALL 75980 0 2
43527: ST_TO_ADDR
// continue ;
43528: GO 43451
// end ; if result [ result ] [ 2 ] <= tmp then
43530: LD_VAR 0 5
43534: PUSH
43535: LD_VAR 0 5
43539: ARRAY
43540: PUSH
43541: LD_INT 2
43543: ARRAY
43544: PUSH
43545: LD_VAR 0 8
43549: LESSEQUAL
43550: IFFALSE 43583
// result := Join ( result , [ i , tmp ] ) else
43552: LD_ADDR_VAR 0 5
43556: PUSH
43557: LD_VAR 0 5
43561: PPUSH
43562: LD_VAR 0 6
43566: PUSH
43567: LD_VAR 0 8
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PPUSH
43576: CALL 75980 0 2
43580: ST_TO_ADDR
43581: GO 43668
// begin for j := 1 to Count ( result ) do
43583: LD_ADDR_VAR 0 7
43587: PUSH
43588: DOUBLE
43589: LD_INT 1
43591: DEC
43592: ST_TO_ADDR
43593: LD_VAR 0 5
43597: PPUSH
43598: CALL 40004 0 1
43602: PUSH
43603: FOR_TO
43604: IFFALSE 43666
// begin if tmp < result [ j ] [ 2 ] then
43606: LD_VAR 0 8
43610: PUSH
43611: LD_VAR 0 5
43615: PUSH
43616: LD_VAR 0 7
43620: ARRAY
43621: PUSH
43622: LD_INT 2
43624: ARRAY
43625: LESS
43626: IFFALSE 43664
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43628: LD_ADDR_VAR 0 5
43632: PUSH
43633: LD_VAR 0 5
43637: PPUSH
43638: LD_VAR 0 7
43642: PPUSH
43643: LD_VAR 0 6
43647: PUSH
43648: LD_VAR 0 8
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PPUSH
43657: CALL_OW 2
43661: ST_TO_ADDR
// break ;
43662: GO 43666
// end ; end ;
43664: GO 43603
43666: POP
43667: POP
// end ; end ;
43668: GO 43451
43670: POP
43671: POP
// if result and not asc then
43672: LD_VAR 0 5
43676: IFFALSE 43685
43678: PUSH
43679: LD_VAR 0 3
43683: NOT
43684: AND
43685: IFFALSE 43702
// result := ReverseArray ( result ) ;
43687: LD_ADDR_VAR 0 5
43691: PUSH
43692: LD_VAR 0 5
43696: PPUSH
43697: CALL 71060 0 1
43701: ST_TO_ADDR
// tmp := [ ] ;
43702: LD_ADDR_VAR 0 8
43706: PUSH
43707: EMPTY
43708: ST_TO_ADDR
// if mode then
43709: LD_VAR 0 4
43713: IFFALSE 43777
// begin for i := 1 to result do
43715: LD_ADDR_VAR 0 6
43719: PUSH
43720: DOUBLE
43721: LD_INT 1
43723: DEC
43724: ST_TO_ADDR
43725: LD_VAR 0 5
43729: PUSH
43730: FOR_TO
43731: IFFALSE 43765
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
43733: LD_ADDR_VAR 0 8
43737: PUSH
43738: LD_VAR 0 8
43742: PPUSH
43743: LD_VAR 0 5
43747: PUSH
43748: LD_VAR 0 6
43752: ARRAY
43753: PUSH
43754: LD_INT 1
43756: ARRAY
43757: PPUSH
43758: CALL 75980 0 2
43762: ST_TO_ADDR
43763: GO 43730
43765: POP
43766: POP
// result := tmp ;
43767: LD_ADDR_VAR 0 5
43771: PUSH
43772: LD_VAR 0 8
43776: ST_TO_ADDR
// end ; end ;
43777: LD_VAR 0 5
43781: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43782: LD_INT 0
43784: PPUSH
43785: PPUSH
43786: PPUSH
43787: PPUSH
// if not list then
43788: LD_VAR 0 3
43792: NOT
43793: IFFALSE 43797
// exit ;
43795: GO 44187
// result := [ ] ;
43797: LD_ADDR_VAR 0 6
43801: PUSH
43802: EMPTY
43803: ST_TO_ADDR
// for i in list do
43804: LD_ADDR_VAR 0 7
43808: PUSH
43809: LD_VAR 0 3
43813: PUSH
43814: FOR_IN
43815: IFFALSE 44017
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43817: LD_ADDR_VAR 0 9
43821: PUSH
43822: LD_VAR 0 7
43826: PPUSH
43827: LD_VAR 0 1
43831: PPUSH
43832: LD_VAR 0 2
43836: PPUSH
43837: CALL_OW 297
43841: ST_TO_ADDR
// if not result then
43842: LD_VAR 0 6
43846: NOT
43847: IFFALSE 43873
// result := [ [ i , tmp ] ] else
43849: LD_ADDR_VAR 0 6
43853: PUSH
43854: LD_VAR 0 7
43858: PUSH
43859: LD_VAR 0 9
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: EMPTY
43869: LIST
43870: ST_TO_ADDR
43871: GO 44015
// begin if result [ result ] [ 2 ] <= tmp then
43873: LD_VAR 0 6
43877: PUSH
43878: LD_VAR 0 6
43882: ARRAY
43883: PUSH
43884: LD_INT 2
43886: ARRAY
43887: PUSH
43888: LD_VAR 0 9
43892: LESSEQUAL
43893: IFFALSE 43935
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43895: LD_ADDR_VAR 0 6
43899: PUSH
43900: LD_VAR 0 6
43904: PPUSH
43905: LD_VAR 0 6
43909: PUSH
43910: LD_INT 1
43912: PLUS
43913: PPUSH
43914: LD_VAR 0 7
43918: PUSH
43919: LD_VAR 0 9
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PPUSH
43928: CALL_OW 2
43932: ST_TO_ADDR
43933: GO 44015
// for j := 1 to result do
43935: LD_ADDR_VAR 0 8
43939: PUSH
43940: DOUBLE
43941: LD_INT 1
43943: DEC
43944: ST_TO_ADDR
43945: LD_VAR 0 6
43949: PUSH
43950: FOR_TO
43951: IFFALSE 44013
// begin if tmp < result [ j ] [ 2 ] then
43953: LD_VAR 0 9
43957: PUSH
43958: LD_VAR 0 6
43962: PUSH
43963: LD_VAR 0 8
43967: ARRAY
43968: PUSH
43969: LD_INT 2
43971: ARRAY
43972: LESS
43973: IFFALSE 44011
// begin result := Insert ( result , j , [ i , tmp ] ) ;
43975: LD_ADDR_VAR 0 6
43979: PUSH
43980: LD_VAR 0 6
43984: PPUSH
43985: LD_VAR 0 8
43989: PPUSH
43990: LD_VAR 0 7
43994: PUSH
43995: LD_VAR 0 9
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PPUSH
44004: CALL_OW 2
44008: ST_TO_ADDR
// break ;
44009: GO 44013
// end ; end ;
44011: GO 43950
44013: POP
44014: POP
// end ; end ;
44015: GO 43814
44017: POP
44018: POP
// if result and not asc then
44019: LD_VAR 0 6
44023: IFFALSE 44032
44025: PUSH
44026: LD_VAR 0 4
44030: NOT
44031: AND
44032: IFFALSE 44107
// begin tmp := result ;
44034: LD_ADDR_VAR 0 9
44038: PUSH
44039: LD_VAR 0 6
44043: ST_TO_ADDR
// for i = tmp downto 1 do
44044: LD_ADDR_VAR 0 7
44048: PUSH
44049: DOUBLE
44050: LD_VAR 0 9
44054: INC
44055: ST_TO_ADDR
44056: LD_INT 1
44058: PUSH
44059: FOR_DOWNTO
44060: IFFALSE 44105
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44062: LD_ADDR_VAR 0 6
44066: PUSH
44067: LD_VAR 0 6
44071: PPUSH
44072: LD_VAR 0 9
44076: PUSH
44077: LD_VAR 0 7
44081: MINUS
44082: PUSH
44083: LD_INT 1
44085: PLUS
44086: PPUSH
44087: LD_VAR 0 9
44091: PUSH
44092: LD_VAR 0 7
44096: ARRAY
44097: PPUSH
44098: CALL_OW 1
44102: ST_TO_ADDR
44103: GO 44059
44105: POP
44106: POP
// end ; tmp := [ ] ;
44107: LD_ADDR_VAR 0 9
44111: PUSH
44112: EMPTY
44113: ST_TO_ADDR
// if mode then
44114: LD_VAR 0 5
44118: IFFALSE 44187
// begin for i = 1 to result do
44120: LD_ADDR_VAR 0 7
44124: PUSH
44125: DOUBLE
44126: LD_INT 1
44128: DEC
44129: ST_TO_ADDR
44130: LD_VAR 0 6
44134: PUSH
44135: FOR_TO
44136: IFFALSE 44175
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44138: LD_ADDR_VAR 0 9
44142: PUSH
44143: LD_VAR 0 9
44147: PPUSH
44148: LD_VAR 0 7
44152: PPUSH
44153: LD_VAR 0 6
44157: PUSH
44158: LD_VAR 0 7
44162: ARRAY
44163: PUSH
44164: LD_INT 1
44166: ARRAY
44167: PPUSH
44168: CALL_OW 1
44172: ST_TO_ADDR
44173: GO 44135
44175: POP
44176: POP
// result := tmp ;
44177: LD_ADDR_VAR 0 6
44181: PUSH
44182: LD_VAR 0 9
44186: ST_TO_ADDR
// end ; end ;
44187: LD_VAR 0 6
44191: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44192: LD_INT 0
44194: PPUSH
44195: PPUSH
44196: PPUSH
44197: PPUSH
44198: PPUSH
44199: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44200: LD_ADDR_VAR 0 5
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: LD_INT 0
44210: PUSH
44211: LD_INT 0
44213: PUSH
44214: EMPTY
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: ST_TO_ADDR
// if not x or not y then
44222: LD_VAR 0 2
44226: NOT
44227: IFTRUE 44236
44229: PUSH
44230: LD_VAR 0 3
44234: NOT
44235: OR
44236: IFFALSE 44240
// exit ;
44238: GO 45896
// if not range then
44240: LD_VAR 0 4
44244: NOT
44245: IFFALSE 44255
// range := 10 ;
44247: LD_ADDR_VAR 0 4
44251: PUSH
44252: LD_INT 10
44254: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44255: LD_ADDR_VAR 0 8
44259: PUSH
44260: LD_INT 81
44262: PUSH
44263: LD_VAR 0 1
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 92
44274: PUSH
44275: LD_VAR 0 2
44279: PUSH
44280: LD_VAR 0 3
44284: PUSH
44285: LD_VAR 0 4
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 3
44298: PUSH
44299: LD_INT 21
44301: PUSH
44302: LD_INT 3
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: LIST
44317: PPUSH
44318: CALL_OW 69
44322: ST_TO_ADDR
// if not tmp then
44323: LD_VAR 0 8
44327: NOT
44328: IFFALSE 44332
// exit ;
44330: GO 45896
// for i in tmp do
44332: LD_ADDR_VAR 0 6
44336: PUSH
44337: LD_VAR 0 8
44341: PUSH
44342: FOR_IN
44343: IFFALSE 45871
// begin points := [ 0 , 0 , 0 ] ;
44345: LD_ADDR_VAR 0 9
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: LD_INT 0
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: LIST
44363: ST_TO_ADDR
// bpoints := 1 ;
44364: LD_ADDR_VAR 0 10
44368: PUSH
44369: LD_INT 1
44371: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44372: LD_VAR 0 6
44376: PPUSH
44377: CALL_OW 247
44381: PUSH
44382: LD_INT 1
44384: DOUBLE
44385: EQUAL
44386: IFTRUE 44390
44388: GO 44972
44390: POP
// begin if GetClass ( i ) = 1 then
44391: LD_VAR 0 6
44395: PPUSH
44396: CALL_OW 257
44400: PUSH
44401: LD_INT 1
44403: EQUAL
44404: IFFALSE 44425
// points := [ 10 , 5 , 3 ] ;
44406: LD_ADDR_VAR 0 9
44410: PUSH
44411: LD_INT 10
44413: PUSH
44414: LD_INT 5
44416: PUSH
44417: LD_INT 3
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: LIST
44424: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44425: LD_VAR 0 6
44429: PPUSH
44430: CALL_OW 257
44434: PUSH
44435: LD_INT 2
44437: PUSH
44438: LD_INT 3
44440: PUSH
44441: LD_INT 4
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: LIST
44448: IN
44449: IFFALSE 44470
// points := [ 3 , 2 , 1 ] ;
44451: LD_ADDR_VAR 0 9
44455: PUSH
44456: LD_INT 3
44458: PUSH
44459: LD_INT 2
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: LIST
44469: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44470: LD_VAR 0 6
44474: PPUSH
44475: CALL_OW 257
44479: PUSH
44480: LD_INT 5
44482: EQUAL
44483: IFFALSE 44504
// points := [ 130 , 5 , 2 ] ;
44485: LD_ADDR_VAR 0 9
44489: PUSH
44490: LD_INT 130
44492: PUSH
44493: LD_INT 5
44495: PUSH
44496: LD_INT 2
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: LIST
44503: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44504: LD_VAR 0 6
44508: PPUSH
44509: CALL_OW 257
44513: PUSH
44514: LD_INT 8
44516: EQUAL
44517: IFFALSE 44538
// points := [ 35 , 35 , 30 ] ;
44519: LD_ADDR_VAR 0 9
44523: PUSH
44524: LD_INT 35
44526: PUSH
44527: LD_INT 35
44529: PUSH
44530: LD_INT 30
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: LIST
44537: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44538: LD_VAR 0 6
44542: PPUSH
44543: CALL_OW 257
44547: PUSH
44548: LD_INT 9
44550: EQUAL
44551: IFFALSE 44572
// points := [ 20 , 55 , 40 ] ;
44553: LD_ADDR_VAR 0 9
44557: PUSH
44558: LD_INT 20
44560: PUSH
44561: LD_INT 55
44563: PUSH
44564: LD_INT 40
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: LIST
44571: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44572: LD_VAR 0 6
44576: PPUSH
44577: CALL_OW 257
44581: PUSH
44582: LD_INT 12
44584: PUSH
44585: LD_INT 16
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: IN
44592: IFFALSE 44613
// points := [ 5 , 3 , 2 ] ;
44594: LD_ADDR_VAR 0 9
44598: PUSH
44599: LD_INT 5
44601: PUSH
44602: LD_INT 3
44604: PUSH
44605: LD_INT 2
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: LIST
44612: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44613: LD_VAR 0 6
44617: PPUSH
44618: CALL_OW 257
44622: PUSH
44623: LD_INT 17
44625: EQUAL
44626: IFFALSE 44647
// points := [ 100 , 50 , 75 ] ;
44628: LD_ADDR_VAR 0 9
44632: PUSH
44633: LD_INT 100
44635: PUSH
44636: LD_INT 50
44638: PUSH
44639: LD_INT 75
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: LIST
44646: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44647: LD_VAR 0 6
44651: PPUSH
44652: CALL_OW 257
44656: PUSH
44657: LD_INT 15
44659: EQUAL
44660: IFFALSE 44681
// points := [ 10 , 5 , 3 ] ;
44662: LD_ADDR_VAR 0 9
44666: PUSH
44667: LD_INT 10
44669: PUSH
44670: LD_INT 5
44672: PUSH
44673: LD_INT 3
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: LIST
44680: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44681: LD_VAR 0 6
44685: PPUSH
44686: CALL_OW 257
44690: PUSH
44691: LD_INT 14
44693: EQUAL
44694: IFFALSE 44715
// points := [ 10 , 0 , 0 ] ;
44696: LD_ADDR_VAR 0 9
44700: PUSH
44701: LD_INT 10
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: LD_INT 0
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: LIST
44714: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44715: LD_VAR 0 6
44719: PPUSH
44720: CALL_OW 257
44724: PUSH
44725: LD_INT 11
44727: EQUAL
44728: IFFALSE 44749
// points := [ 30 , 10 , 5 ] ;
44730: LD_ADDR_VAR 0 9
44734: PUSH
44735: LD_INT 30
44737: PUSH
44738: LD_INT 10
44740: PUSH
44741: LD_INT 5
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: LIST
44748: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44749: LD_VAR 0 1
44753: PPUSH
44754: LD_INT 5
44756: PPUSH
44757: CALL_OW 321
44761: PUSH
44762: LD_INT 2
44764: EQUAL
44765: IFFALSE 44782
// bpoints := bpoints * 1.8 ;
44767: LD_ADDR_VAR 0 10
44771: PUSH
44772: LD_VAR 0 10
44776: PUSH
44777: LD_REAL  1.80000000000000E+0000
44780: MUL
44781: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44782: LD_VAR 0 6
44786: PPUSH
44787: CALL_OW 257
44791: PUSH
44792: LD_INT 1
44794: PUSH
44795: LD_INT 2
44797: PUSH
44798: LD_INT 3
44800: PUSH
44801: LD_INT 4
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: IN
44810: IFFALSE 44830
44812: PUSH
44813: LD_VAR 0 1
44817: PPUSH
44818: LD_INT 51
44820: PPUSH
44821: CALL_OW 321
44825: PUSH
44826: LD_INT 2
44828: EQUAL
44829: AND
44830: IFFALSE 44847
// bpoints := bpoints * 1.2 ;
44832: LD_ADDR_VAR 0 10
44836: PUSH
44837: LD_VAR 0 10
44841: PUSH
44842: LD_REAL  1.20000000000000E+0000
44845: MUL
44846: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44847: LD_VAR 0 6
44851: PPUSH
44852: CALL_OW 257
44856: PUSH
44857: LD_INT 5
44859: PUSH
44860: LD_INT 7
44862: PUSH
44863: LD_INT 9
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: LIST
44870: IN
44871: IFFALSE 44891
44873: PUSH
44874: LD_VAR 0 1
44878: PPUSH
44879: LD_INT 52
44881: PPUSH
44882: CALL_OW 321
44886: PUSH
44887: LD_INT 2
44889: EQUAL
44890: AND
44891: IFFALSE 44908
// bpoints := bpoints * 1.5 ;
44893: LD_ADDR_VAR 0 10
44897: PUSH
44898: LD_VAR 0 10
44902: PUSH
44903: LD_REAL  1.50000000000000E+0000
44906: MUL
44907: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44908: LD_VAR 0 1
44912: PPUSH
44913: LD_INT 66
44915: PPUSH
44916: CALL_OW 321
44920: PUSH
44921: LD_INT 2
44923: EQUAL
44924: IFFALSE 44941
// bpoints := bpoints * 1.1 ;
44926: LD_ADDR_VAR 0 10
44930: PUSH
44931: LD_VAR 0 10
44935: PUSH
44936: LD_REAL  1.10000000000000E+0000
44939: MUL
44940: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44941: LD_ADDR_VAR 0 10
44945: PUSH
44946: LD_VAR 0 10
44950: PUSH
44951: LD_VAR 0 6
44955: PPUSH
44956: LD_INT 1
44958: PPUSH
44959: CALL_OW 259
44963: PUSH
44964: LD_REAL  1.15000000000000E+0000
44967: MUL
44968: MUL
44969: ST_TO_ADDR
// end ; unit_vehicle :
44970: GO 45800
44972: LD_INT 2
44974: DOUBLE
44975: EQUAL
44976: IFTRUE 44980
44978: GO 45788
44980: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
44981: LD_VAR 0 6
44985: PPUSH
44986: CALL_OW 264
44990: PUSH
44991: LD_INT 2
44993: PUSH
44994: LD_INT 42
44996: PUSH
44997: LD_INT 24
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: LIST
45004: IN
45005: IFFALSE 45026
// points := [ 25 , 5 , 3 ] ;
45007: LD_ADDR_VAR 0 9
45011: PUSH
45012: LD_INT 25
45014: PUSH
45015: LD_INT 5
45017: PUSH
45018: LD_INT 3
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: LIST
45025: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45026: LD_VAR 0 6
45030: PPUSH
45031: CALL_OW 264
45035: PUSH
45036: LD_INT 4
45038: PUSH
45039: LD_INT 43
45041: PUSH
45042: LD_INT 25
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: LIST
45049: IN
45050: IFFALSE 45071
// points := [ 40 , 15 , 5 ] ;
45052: LD_ADDR_VAR 0 9
45056: PUSH
45057: LD_INT 40
45059: PUSH
45060: LD_INT 15
45062: PUSH
45063: LD_INT 5
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: LIST
45070: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45071: LD_VAR 0 6
45075: PPUSH
45076: CALL_OW 264
45080: PUSH
45081: LD_INT 3
45083: PUSH
45084: LD_INT 23
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: IN
45091: IFFALSE 45112
// points := [ 7 , 25 , 8 ] ;
45093: LD_ADDR_VAR 0 9
45097: PUSH
45098: LD_INT 7
45100: PUSH
45101: LD_INT 25
45103: PUSH
45104: LD_INT 8
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: LIST
45111: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45112: LD_VAR 0 6
45116: PPUSH
45117: CALL_OW 264
45121: PUSH
45122: LD_INT 5
45124: PUSH
45125: LD_INT 27
45127: PUSH
45128: LD_INT 44
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: LIST
45135: IN
45136: IFFALSE 45157
// points := [ 14 , 50 , 16 ] ;
45138: LD_ADDR_VAR 0 9
45142: PUSH
45143: LD_INT 14
45145: PUSH
45146: LD_INT 50
45148: PUSH
45149: LD_INT 16
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: LIST
45156: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45157: LD_VAR 0 6
45161: PPUSH
45162: CALL_OW 264
45166: PUSH
45167: LD_INT 6
45169: PUSH
45170: LD_INT 46
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: IN
45177: IFFALSE 45198
// points := [ 32 , 120 , 70 ] ;
45179: LD_ADDR_VAR 0 9
45183: PUSH
45184: LD_INT 32
45186: PUSH
45187: LD_INT 120
45189: PUSH
45190: LD_INT 70
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: LIST
45197: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45198: LD_VAR 0 6
45202: PPUSH
45203: CALL_OW 264
45207: PUSH
45208: LD_INT 7
45210: PUSH
45211: LD_INT 28
45213: PUSH
45214: LD_INT 45
45216: PUSH
45217: LD_INT 92
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: IN
45226: IFFALSE 45247
// points := [ 35 , 20 , 45 ] ;
45228: LD_ADDR_VAR 0 9
45232: PUSH
45233: LD_INT 35
45235: PUSH
45236: LD_INT 20
45238: PUSH
45239: LD_INT 45
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: LIST
45246: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45247: LD_VAR 0 6
45251: PPUSH
45252: CALL_OW 264
45256: PUSH
45257: LD_INT 47
45259: PUSH
45260: EMPTY
45261: LIST
45262: IN
45263: IFFALSE 45284
// points := [ 67 , 45 , 75 ] ;
45265: LD_ADDR_VAR 0 9
45269: PUSH
45270: LD_INT 67
45272: PUSH
45273: LD_INT 45
45275: PUSH
45276: LD_INT 75
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: LIST
45283: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45284: LD_VAR 0 6
45288: PPUSH
45289: CALL_OW 264
45293: PUSH
45294: LD_INT 26
45296: PUSH
45297: EMPTY
45298: LIST
45299: IN
45300: IFFALSE 45321
// points := [ 120 , 30 , 80 ] ;
45302: LD_ADDR_VAR 0 9
45306: PUSH
45307: LD_INT 120
45309: PUSH
45310: LD_INT 30
45312: PUSH
45313: LD_INT 80
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: LIST
45320: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45321: LD_VAR 0 6
45325: PPUSH
45326: CALL_OW 264
45330: PUSH
45331: LD_INT 22
45333: PUSH
45334: EMPTY
45335: LIST
45336: IN
45337: IFFALSE 45358
// points := [ 40 , 1 , 1 ] ;
45339: LD_ADDR_VAR 0 9
45343: PUSH
45344: LD_INT 40
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: LD_INT 1
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: LIST
45357: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45358: LD_VAR 0 6
45362: PPUSH
45363: CALL_OW 264
45367: PUSH
45368: LD_INT 29
45370: PUSH
45371: EMPTY
45372: LIST
45373: IN
45374: IFFALSE 45395
// points := [ 70 , 200 , 400 ] ;
45376: LD_ADDR_VAR 0 9
45380: PUSH
45381: LD_INT 70
45383: PUSH
45384: LD_INT 200
45386: PUSH
45387: LD_INT 400
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: LIST
45394: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45395: LD_VAR 0 6
45399: PPUSH
45400: CALL_OW 264
45404: PUSH
45405: LD_INT 14
45407: PUSH
45408: LD_INT 53
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: IN
45415: IFFALSE 45436
// points := [ 40 , 10 , 20 ] ;
45417: LD_ADDR_VAR 0 9
45421: PUSH
45422: LD_INT 40
45424: PUSH
45425: LD_INT 10
45427: PUSH
45428: LD_INT 20
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: LIST
45435: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45436: LD_VAR 0 6
45440: PPUSH
45441: CALL_OW 264
45445: PUSH
45446: LD_INT 9
45448: PUSH
45449: EMPTY
45450: LIST
45451: IN
45452: IFFALSE 45473
// points := [ 5 , 70 , 20 ] ;
45454: LD_ADDR_VAR 0 9
45458: PUSH
45459: LD_INT 5
45461: PUSH
45462: LD_INT 70
45464: PUSH
45465: LD_INT 20
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: LIST
45472: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45473: LD_VAR 0 6
45477: PPUSH
45478: CALL_OW 264
45482: PUSH
45483: LD_INT 10
45485: PUSH
45486: EMPTY
45487: LIST
45488: IN
45489: IFFALSE 45510
// points := [ 35 , 110 , 70 ] ;
45491: LD_ADDR_VAR 0 9
45495: PUSH
45496: LD_INT 35
45498: PUSH
45499: LD_INT 110
45501: PUSH
45502: LD_INT 70
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: LIST
45509: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45510: LD_VAR 0 6
45514: PPUSH
45515: CALL_OW 265
45519: PUSH
45520: LD_INT 25
45522: EQUAL
45523: IFFALSE 45544
// points := [ 80 , 65 , 100 ] ;
45525: LD_ADDR_VAR 0 9
45529: PUSH
45530: LD_INT 80
45532: PUSH
45533: LD_INT 65
45535: PUSH
45536: LD_INT 100
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: LIST
45543: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45544: LD_VAR 0 6
45548: PPUSH
45549: CALL_OW 263
45553: PUSH
45554: LD_INT 1
45556: EQUAL
45557: IFFALSE 45592
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45559: LD_ADDR_VAR 0 10
45563: PUSH
45564: LD_VAR 0 10
45568: PUSH
45569: LD_VAR 0 6
45573: PPUSH
45574: CALL_OW 311
45578: PPUSH
45579: LD_INT 3
45581: PPUSH
45582: CALL_OW 259
45586: PUSH
45587: LD_INT 4
45589: MUL
45590: MUL
45591: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45592: LD_VAR 0 6
45596: PPUSH
45597: CALL_OW 263
45601: PUSH
45602: LD_INT 2
45604: EQUAL
45605: IFFALSE 45656
// begin j := IsControledBy ( i ) ;
45607: LD_ADDR_VAR 0 7
45611: PUSH
45612: LD_VAR 0 6
45616: PPUSH
45617: CALL_OW 312
45621: ST_TO_ADDR
// if j then
45622: LD_VAR 0 7
45626: IFFALSE 45656
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45628: LD_ADDR_VAR 0 10
45632: PUSH
45633: LD_VAR 0 10
45637: PUSH
45638: LD_VAR 0 7
45642: PPUSH
45643: LD_INT 3
45645: PPUSH
45646: CALL_OW 259
45650: PUSH
45651: LD_INT 3
45653: MUL
45654: MUL
45655: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45656: LD_VAR 0 6
45660: PPUSH
45661: CALL_OW 264
45665: PUSH
45666: LD_INT 5
45668: PUSH
45669: LD_INT 6
45671: PUSH
45672: LD_INT 46
45674: PUSH
45675: LD_INT 44
45677: PUSH
45678: LD_INT 47
45680: PUSH
45681: LD_INT 45
45683: PUSH
45684: LD_INT 28
45686: PUSH
45687: LD_INT 7
45689: PUSH
45690: LD_INT 27
45692: PUSH
45693: LD_INT 29
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: IN
45708: IFFALSE 45728
45710: PUSH
45711: LD_VAR 0 1
45715: PPUSH
45716: LD_INT 52
45718: PPUSH
45719: CALL_OW 321
45723: PUSH
45724: LD_INT 2
45726: EQUAL
45727: AND
45728: IFFALSE 45745
// bpoints := bpoints * 1.2 ;
45730: LD_ADDR_VAR 0 10
45734: PUSH
45735: LD_VAR 0 10
45739: PUSH
45740: LD_REAL  1.20000000000000E+0000
45743: MUL
45744: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45745: LD_VAR 0 6
45749: PPUSH
45750: CALL_OW 264
45754: PUSH
45755: LD_INT 6
45757: PUSH
45758: LD_INT 46
45760: PUSH
45761: LD_INT 47
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: LIST
45768: IN
45769: IFFALSE 45786
// bpoints := bpoints * 1.2 ;
45771: LD_ADDR_VAR 0 10
45775: PUSH
45776: LD_VAR 0 10
45780: PUSH
45781: LD_REAL  1.20000000000000E+0000
45784: MUL
45785: ST_TO_ADDR
// end ; unit_building :
45786: GO 45800
45788: LD_INT 3
45790: DOUBLE
45791: EQUAL
45792: IFTRUE 45796
45794: GO 45799
45796: POP
// ; end ;
45797: GO 45800
45799: POP
// for j = 1 to 3 do
45800: LD_ADDR_VAR 0 7
45804: PUSH
45805: DOUBLE
45806: LD_INT 1
45808: DEC
45809: ST_TO_ADDR
45810: LD_INT 3
45812: PUSH
45813: FOR_TO
45814: IFFALSE 45867
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45816: LD_ADDR_VAR 0 5
45820: PUSH
45821: LD_VAR 0 5
45825: PPUSH
45826: LD_VAR 0 7
45830: PPUSH
45831: LD_VAR 0 5
45835: PUSH
45836: LD_VAR 0 7
45840: ARRAY
45841: PUSH
45842: LD_VAR 0 9
45846: PUSH
45847: LD_VAR 0 7
45851: ARRAY
45852: PUSH
45853: LD_VAR 0 10
45857: MUL
45858: PLUS
45859: PPUSH
45860: CALL_OW 1
45864: ST_TO_ADDR
45865: GO 45813
45867: POP
45868: POP
// end ;
45869: GO 44342
45871: POP
45872: POP
// result := Replace ( result , 4 , tmp ) ;
45873: LD_ADDR_VAR 0 5
45877: PUSH
45878: LD_VAR 0 5
45882: PPUSH
45883: LD_INT 4
45885: PPUSH
45886: LD_VAR 0 8
45890: PPUSH
45891: CALL_OW 1
45895: ST_TO_ADDR
// end ;
45896: LD_VAR 0 5
45900: RET
// export function DangerAtRange ( unit , range ) ; begin
45901: LD_INT 0
45903: PPUSH
// if not unit then
45904: LD_VAR 0 1
45908: NOT
45909: IFFALSE 45913
// exit ;
45911: GO 45958
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45913: LD_ADDR_VAR 0 3
45917: PUSH
45918: LD_VAR 0 1
45922: PPUSH
45923: CALL_OW 255
45927: PPUSH
45928: LD_VAR 0 1
45932: PPUSH
45933: CALL_OW 250
45937: PPUSH
45938: LD_VAR 0 1
45942: PPUSH
45943: CALL_OW 251
45947: PPUSH
45948: LD_VAR 0 2
45952: PPUSH
45953: CALL 44192 0 4
45957: ST_TO_ADDR
// end ;
45958: LD_VAR 0 3
45962: RET
// export function DangerInArea ( side , area ) ; begin
45963: LD_INT 0
45965: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45966: LD_ADDR_VAR 0 3
45970: PUSH
45971: LD_VAR 0 2
45975: PPUSH
45976: LD_INT 81
45978: PUSH
45979: LD_VAR 0 1
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PPUSH
45988: CALL_OW 70
45992: ST_TO_ADDR
// end ;
45993: LD_VAR 0 3
45997: RET
// export function IsExtension ( b ) ; begin
45998: LD_INT 0
46000: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46001: LD_ADDR_VAR 0 2
46005: PUSH
46006: LD_VAR 0 1
46010: PUSH
46011: LD_INT 23
46013: PUSH
46014: LD_INT 20
46016: PUSH
46017: LD_INT 22
46019: PUSH
46020: LD_INT 17
46022: PUSH
46023: LD_INT 24
46025: PUSH
46026: LD_INT 21
46028: PUSH
46029: LD_INT 19
46031: PUSH
46032: LD_INT 16
46034: PUSH
46035: LD_INT 25
46037: PUSH
46038: LD_INT 18
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: IN
46053: ST_TO_ADDR
// end ;
46054: LD_VAR 0 2
46058: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46059: LD_INT 0
46061: PPUSH
46062: PPUSH
46063: PPUSH
// result := [ ] ;
46064: LD_ADDR_VAR 0 4
46068: PUSH
46069: EMPTY
46070: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46071: LD_ADDR_VAR 0 5
46075: PUSH
46076: LD_VAR 0 2
46080: PPUSH
46081: LD_INT 21
46083: PUSH
46084: LD_INT 3
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PPUSH
46091: CALL_OW 70
46095: ST_TO_ADDR
// if not tmp then
46096: LD_VAR 0 5
46100: NOT
46101: IFFALSE 46105
// exit ;
46103: GO 46169
// if checkLink then
46105: LD_VAR 0 3
46109: IFFALSE 46159
// begin for i in tmp do
46111: LD_ADDR_VAR 0 6
46115: PUSH
46116: LD_VAR 0 5
46120: PUSH
46121: FOR_IN
46122: IFFALSE 46157
// if GetBase ( i ) <> base then
46124: LD_VAR 0 6
46128: PPUSH
46129: CALL_OW 274
46133: PUSH
46134: LD_VAR 0 1
46138: NONEQUAL
46139: IFFALSE 46155
// ComLinkToBase ( base , i ) ;
46141: LD_VAR 0 1
46145: PPUSH
46146: LD_VAR 0 6
46150: PPUSH
46151: CALL_OW 169
46155: GO 46121
46157: POP
46158: POP
// end ; result := tmp ;
46159: LD_ADDR_VAR 0 4
46163: PUSH
46164: LD_VAR 0 5
46168: ST_TO_ADDR
// end ;
46169: LD_VAR 0 4
46173: RET
// export function ComComplete ( units , b ) ; var i ; begin
46174: LD_INT 0
46176: PPUSH
46177: PPUSH
// if not units then
46178: LD_VAR 0 1
46182: NOT
46183: IFFALSE 46187
// exit ;
46185: GO 46277
// for i in units do
46187: LD_ADDR_VAR 0 4
46191: PUSH
46192: LD_VAR 0 1
46196: PUSH
46197: FOR_IN
46198: IFFALSE 46275
// if BuildingStatus ( b ) = bs_build then
46200: LD_VAR 0 2
46204: PPUSH
46205: CALL_OW 461
46209: PUSH
46210: LD_INT 1
46212: EQUAL
46213: IFFALSE 46273
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46215: LD_VAR 0 4
46219: PPUSH
46220: LD_STRING h
46222: PUSH
46223: LD_VAR 0 2
46227: PPUSH
46228: CALL_OW 250
46232: PUSH
46233: LD_VAR 0 2
46237: PPUSH
46238: CALL_OW 251
46242: PUSH
46243: LD_VAR 0 2
46247: PUSH
46248: LD_INT 0
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: PUSH
46266: EMPTY
46267: LIST
46268: PPUSH
46269: CALL_OW 446
46273: GO 46197
46275: POP
46276: POP
// end ;
46277: LD_VAR 0 3
46281: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46282: LD_INT 0
46284: PPUSH
46285: PPUSH
46286: PPUSH
46287: PPUSH
46288: PPUSH
46289: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46290: LD_VAR 0 1
46294: NOT
46295: IFTRUE 46312
46297: PUSH
46298: LD_VAR 0 1
46302: PPUSH
46303: CALL_OW 263
46307: PUSH
46308: LD_INT 2
46310: NONEQUAL
46311: OR
46312: IFFALSE 46316
// exit ;
46314: GO 46632
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46316: LD_ADDR_VAR 0 6
46320: PUSH
46321: LD_INT 22
46323: PUSH
46324: LD_VAR 0 1
46328: PPUSH
46329: CALL_OW 255
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 2
46340: PUSH
46341: LD_INT 30
46343: PUSH
46344: LD_INT 36
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 34
46353: PUSH
46354: LD_INT 31
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: LIST
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PPUSH
46370: CALL_OW 69
46374: ST_TO_ADDR
// if not tmp then
46375: LD_VAR 0 6
46379: NOT
46380: IFFALSE 46384
// exit ;
46382: GO 46632
// result := [ ] ;
46384: LD_ADDR_VAR 0 2
46388: PUSH
46389: EMPTY
46390: ST_TO_ADDR
// for i in tmp do
46391: LD_ADDR_VAR 0 3
46395: PUSH
46396: LD_VAR 0 6
46400: PUSH
46401: FOR_IN
46402: IFFALSE 46473
// begin t := UnitsInside ( i ) ;
46404: LD_ADDR_VAR 0 4
46408: PUSH
46409: LD_VAR 0 3
46413: PPUSH
46414: CALL_OW 313
46418: ST_TO_ADDR
// if t then
46419: LD_VAR 0 4
46423: IFFALSE 46471
// for j in t do
46425: LD_ADDR_VAR 0 7
46429: PUSH
46430: LD_VAR 0 4
46434: PUSH
46435: FOR_IN
46436: IFFALSE 46469
// result := Replace ( result , result + 1 , j ) ;
46438: LD_ADDR_VAR 0 2
46442: PUSH
46443: LD_VAR 0 2
46447: PPUSH
46448: LD_VAR 0 2
46452: PUSH
46453: LD_INT 1
46455: PLUS
46456: PPUSH
46457: LD_VAR 0 7
46461: PPUSH
46462: CALL_OW 1
46466: ST_TO_ADDR
46467: GO 46435
46469: POP
46470: POP
// end ;
46471: GO 46401
46473: POP
46474: POP
// if not result then
46475: LD_VAR 0 2
46479: NOT
46480: IFFALSE 46484
// exit ;
46482: GO 46632
// mech := result [ 1 ] ;
46484: LD_ADDR_VAR 0 5
46488: PUSH
46489: LD_VAR 0 2
46493: PUSH
46494: LD_INT 1
46496: ARRAY
46497: ST_TO_ADDR
// if result > 1 then
46498: LD_VAR 0 2
46502: PUSH
46503: LD_INT 1
46505: GREATER
46506: IFFALSE 46618
// begin for i = 2 to result do
46508: LD_ADDR_VAR 0 3
46512: PUSH
46513: DOUBLE
46514: LD_INT 2
46516: DEC
46517: ST_TO_ADDR
46518: LD_VAR 0 2
46522: PUSH
46523: FOR_TO
46524: IFFALSE 46616
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46526: LD_ADDR_VAR 0 4
46530: PUSH
46531: LD_VAR 0 2
46535: PUSH
46536: LD_VAR 0 3
46540: ARRAY
46541: PPUSH
46542: LD_INT 3
46544: PPUSH
46545: CALL_OW 259
46549: PUSH
46550: LD_VAR 0 2
46554: PUSH
46555: LD_VAR 0 3
46559: ARRAY
46560: PPUSH
46561: CALL_OW 432
46565: MINUS
46566: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46567: LD_VAR 0 4
46571: PUSH
46572: LD_VAR 0 5
46576: PPUSH
46577: LD_INT 3
46579: PPUSH
46580: CALL_OW 259
46584: PUSH
46585: LD_VAR 0 5
46589: PPUSH
46590: CALL_OW 432
46594: MINUS
46595: GREATEREQUAL
46596: IFFALSE 46614
// mech := result [ i ] ;
46598: LD_ADDR_VAR 0 5
46602: PUSH
46603: LD_VAR 0 2
46607: PUSH
46608: LD_VAR 0 3
46612: ARRAY
46613: ST_TO_ADDR
// end ;
46614: GO 46523
46616: POP
46617: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46618: LD_VAR 0 1
46622: PPUSH
46623: LD_VAR 0 5
46627: PPUSH
46628: CALL_OW 135
// end ;
46632: LD_VAR 0 2
46636: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46637: LD_INT 0
46639: PPUSH
46640: PPUSH
46641: PPUSH
46642: PPUSH
46643: PPUSH
46644: PPUSH
46645: PPUSH
46646: PPUSH
46647: PPUSH
46648: PPUSH
46649: PPUSH
46650: PPUSH
46651: PPUSH
// result := [ ] ;
46652: LD_ADDR_VAR 0 7
46656: PUSH
46657: EMPTY
46658: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46659: LD_VAR 0 1
46663: PPUSH
46664: CALL_OW 266
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: IN
46679: NOT
46680: IFFALSE 46684
// exit ;
46682: GO 48324
// if name then
46684: LD_VAR 0 3
46688: IFFALSE 46704
// SetBName ( base_dep , name ) ;
46690: LD_VAR 0 1
46694: PPUSH
46695: LD_VAR 0 3
46699: PPUSH
46700: CALL_OW 500
// base := GetBase ( base_dep ) ;
46704: LD_ADDR_VAR 0 15
46708: PUSH
46709: LD_VAR 0 1
46713: PPUSH
46714: CALL_OW 274
46718: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46719: LD_ADDR_VAR 0 16
46723: PUSH
46724: LD_VAR 0 1
46728: PPUSH
46729: CALL_OW 255
46733: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46734: LD_ADDR_VAR 0 17
46738: PUSH
46739: LD_VAR 0 1
46743: PPUSH
46744: CALL_OW 248
46748: ST_TO_ADDR
// if sources then
46749: LD_VAR 0 5
46753: IFFALSE 46800
// for i = 1 to 3 do
46755: LD_ADDR_VAR 0 8
46759: PUSH
46760: DOUBLE
46761: LD_INT 1
46763: DEC
46764: ST_TO_ADDR
46765: LD_INT 3
46767: PUSH
46768: FOR_TO
46769: IFFALSE 46798
// AddResourceType ( base , i , sources [ i ] ) ;
46771: LD_VAR 0 15
46775: PPUSH
46776: LD_VAR 0 8
46780: PPUSH
46781: LD_VAR 0 5
46785: PUSH
46786: LD_VAR 0 8
46790: ARRAY
46791: PPUSH
46792: CALL_OW 276
46796: GO 46768
46798: POP
46799: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46800: LD_ADDR_VAR 0 18
46804: PUSH
46805: LD_VAR 0 15
46809: PPUSH
46810: LD_VAR 0 2
46814: PPUSH
46815: LD_INT 1
46817: PPUSH
46818: CALL 46059 0 3
46822: ST_TO_ADDR
// InitHc ;
46823: CALL_OW 19
// InitUc ;
46827: CALL_OW 18
// uc_side := side ;
46831: LD_ADDR_OWVAR 20
46835: PUSH
46836: LD_VAR 0 16
46840: ST_TO_ADDR
// uc_nation := nation ;
46841: LD_ADDR_OWVAR 21
46845: PUSH
46846: LD_VAR 0 17
46850: ST_TO_ADDR
// if buildings then
46851: LD_VAR 0 18
46855: IFFALSE 48183
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46857: LD_ADDR_VAR 0 19
46861: PUSH
46862: LD_VAR 0 18
46866: PPUSH
46867: LD_INT 2
46869: PUSH
46870: LD_INT 30
46872: PUSH
46873: LD_INT 29
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 30
46882: PUSH
46883: LD_INT 30
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: LIST
46894: PPUSH
46895: CALL_OW 72
46899: ST_TO_ADDR
// if tmp then
46900: LD_VAR 0 19
46904: IFFALSE 46952
// for i in tmp do
46906: LD_ADDR_VAR 0 8
46910: PUSH
46911: LD_VAR 0 19
46915: PUSH
46916: FOR_IN
46917: IFFALSE 46950
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46919: LD_VAR 0 8
46923: PPUSH
46924: CALL_OW 250
46928: PPUSH
46929: LD_VAR 0 8
46933: PPUSH
46934: CALL_OW 251
46938: PPUSH
46939: LD_VAR 0 16
46943: PPUSH
46944: CALL_OW 441
46948: GO 46916
46950: POP
46951: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46952: LD_VAR 0 18
46956: PPUSH
46957: LD_INT 2
46959: PUSH
46960: LD_INT 30
46962: PUSH
46963: LD_INT 32
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 30
46972: PUSH
46973: LD_INT 33
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: LIST
46984: PPUSH
46985: CALL_OW 72
46989: IFFALSE 47077
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
46991: LD_ADDR_VAR 0 8
46995: PUSH
46996: LD_VAR 0 18
47000: PPUSH
47001: LD_INT 2
47003: PUSH
47004: LD_INT 30
47006: PUSH
47007: LD_INT 32
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 30
47016: PUSH
47017: LD_INT 33
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: LIST
47028: PPUSH
47029: CALL_OW 72
47033: PUSH
47034: FOR_IN
47035: IFFALSE 47075
// begin if not GetBWeapon ( i ) then
47037: LD_VAR 0 8
47041: PPUSH
47042: CALL_OW 269
47046: NOT
47047: IFFALSE 47073
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47049: LD_VAR 0 8
47053: PPUSH
47054: LD_VAR 0 8
47058: PPUSH
47059: LD_VAR 0 2
47063: PPUSH
47064: CALL 48329 0 2
47068: PPUSH
47069: CALL_OW 431
// end ;
47073: GO 47034
47075: POP
47076: POP
// end ; for i = 1 to personel do
47077: LD_ADDR_VAR 0 8
47081: PUSH
47082: DOUBLE
47083: LD_INT 1
47085: DEC
47086: ST_TO_ADDR
47087: LD_VAR 0 6
47091: PUSH
47092: FOR_TO
47093: IFFALSE 48163
// begin if i > 4 then
47095: LD_VAR 0 8
47099: PUSH
47100: LD_INT 4
47102: GREATER
47103: IFFALSE 47107
// break ;
47105: GO 48163
// case i of 1 :
47107: LD_VAR 0 8
47111: PUSH
47112: LD_INT 1
47114: DOUBLE
47115: EQUAL
47116: IFTRUE 47120
47118: GO 47200
47120: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47121: LD_ADDR_VAR 0 12
47125: PUSH
47126: LD_VAR 0 18
47130: PPUSH
47131: LD_INT 22
47133: PUSH
47134: LD_VAR 0 16
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 58
47145: PUSH
47146: EMPTY
47147: LIST
47148: PUSH
47149: LD_INT 2
47151: PUSH
47152: LD_INT 30
47154: PUSH
47155: LD_INT 32
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 30
47164: PUSH
47165: LD_INT 4
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 30
47174: PUSH
47175: LD_INT 5
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: LIST
47192: PPUSH
47193: CALL_OW 72
47197: ST_TO_ADDR
47198: GO 47422
47200: LD_INT 2
47202: DOUBLE
47203: EQUAL
47204: IFTRUE 47208
47206: GO 47270
47208: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47209: LD_ADDR_VAR 0 12
47213: PUSH
47214: LD_VAR 0 18
47218: PPUSH
47219: LD_INT 22
47221: PUSH
47222: LD_VAR 0 16
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 2
47233: PUSH
47234: LD_INT 30
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 30
47246: PUSH
47247: LD_INT 1
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: LIST
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PPUSH
47263: CALL_OW 72
47267: ST_TO_ADDR
47268: GO 47422
47270: LD_INT 3
47272: DOUBLE
47273: EQUAL
47274: IFTRUE 47278
47276: GO 47340
47278: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47279: LD_ADDR_VAR 0 12
47283: PUSH
47284: LD_VAR 0 18
47288: PPUSH
47289: LD_INT 22
47291: PUSH
47292: LD_VAR 0 16
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 2
47303: PUSH
47304: LD_INT 30
47306: PUSH
47307: LD_INT 2
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 30
47316: PUSH
47317: LD_INT 3
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: LIST
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PPUSH
47333: CALL_OW 72
47337: ST_TO_ADDR
47338: GO 47422
47340: LD_INT 4
47342: DOUBLE
47343: EQUAL
47344: IFTRUE 47348
47346: GO 47421
47348: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47349: LD_ADDR_VAR 0 12
47353: PUSH
47354: LD_VAR 0 18
47358: PPUSH
47359: LD_INT 22
47361: PUSH
47362: LD_VAR 0 16
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 2
47373: PUSH
47374: LD_INT 30
47376: PUSH
47377: LD_INT 6
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 30
47386: PUSH
47387: LD_INT 7
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 30
47396: PUSH
47397: LD_INT 8
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PPUSH
47414: CALL_OW 72
47418: ST_TO_ADDR
47419: GO 47422
47421: POP
// if i = 1 then
47422: LD_VAR 0 8
47426: PUSH
47427: LD_INT 1
47429: EQUAL
47430: IFFALSE 47541
// begin tmp := [ ] ;
47432: LD_ADDR_VAR 0 19
47436: PUSH
47437: EMPTY
47438: ST_TO_ADDR
// for j in f do
47439: LD_ADDR_VAR 0 9
47443: PUSH
47444: LD_VAR 0 12
47448: PUSH
47449: FOR_IN
47450: IFFALSE 47523
// if GetBType ( j ) = b_bunker then
47452: LD_VAR 0 9
47456: PPUSH
47457: CALL_OW 266
47461: PUSH
47462: LD_INT 32
47464: EQUAL
47465: IFFALSE 47492
// tmp := Insert ( tmp , 1 , j ) else
47467: LD_ADDR_VAR 0 19
47471: PUSH
47472: LD_VAR 0 19
47476: PPUSH
47477: LD_INT 1
47479: PPUSH
47480: LD_VAR 0 9
47484: PPUSH
47485: CALL_OW 2
47489: ST_TO_ADDR
47490: GO 47521
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47492: LD_ADDR_VAR 0 19
47496: PUSH
47497: LD_VAR 0 19
47501: PPUSH
47502: LD_VAR 0 19
47506: PUSH
47507: LD_INT 1
47509: PLUS
47510: PPUSH
47511: LD_VAR 0 9
47515: PPUSH
47516: CALL_OW 2
47520: ST_TO_ADDR
47521: GO 47449
47523: POP
47524: POP
// if tmp then
47525: LD_VAR 0 19
47529: IFFALSE 47541
// f := tmp ;
47531: LD_ADDR_VAR 0 12
47535: PUSH
47536: LD_VAR 0 19
47540: ST_TO_ADDR
// end ; x := personel [ i ] ;
47541: LD_ADDR_VAR 0 13
47545: PUSH
47546: LD_VAR 0 6
47550: PUSH
47551: LD_VAR 0 8
47555: ARRAY
47556: ST_TO_ADDR
// if x = - 1 then
47557: LD_VAR 0 13
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: EQUAL
47566: IFFALSE 47777
// begin for j in f do
47568: LD_ADDR_VAR 0 9
47572: PUSH
47573: LD_VAR 0 12
47577: PUSH
47578: FOR_IN
47579: IFFALSE 47773
// repeat InitHc ;
47581: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47585: LD_VAR 0 9
47589: PPUSH
47590: CALL_OW 266
47594: PUSH
47595: LD_INT 5
47597: EQUAL
47598: IFFALSE 47668
// begin if UnitsInside ( j ) < 3 then
47600: LD_VAR 0 9
47604: PPUSH
47605: CALL_OW 313
47609: PUSH
47610: LD_INT 3
47612: LESS
47613: IFFALSE 47649
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47615: LD_INT 0
47617: PPUSH
47618: LD_INT 5
47620: PUSH
47621: LD_INT 8
47623: PUSH
47624: LD_INT 9
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: LIST
47631: PUSH
47632: LD_VAR 0 17
47636: ARRAY
47637: PPUSH
47638: LD_VAR 0 4
47642: PPUSH
47643: CALL_OW 380
47647: GO 47666
// PrepareHuman ( false , i , skill ) ;
47649: LD_INT 0
47651: PPUSH
47652: LD_VAR 0 8
47656: PPUSH
47657: LD_VAR 0 4
47661: PPUSH
47662: CALL_OW 380
// end else
47666: GO 47685
// PrepareHuman ( false , i , skill ) ;
47668: LD_INT 0
47670: PPUSH
47671: LD_VAR 0 8
47675: PPUSH
47676: LD_VAR 0 4
47680: PPUSH
47681: CALL_OW 380
// un := CreateHuman ;
47685: LD_ADDR_VAR 0 14
47689: PUSH
47690: CALL_OW 44
47694: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47695: LD_ADDR_VAR 0 7
47699: PUSH
47700: LD_VAR 0 7
47704: PPUSH
47705: LD_INT 1
47707: PPUSH
47708: LD_VAR 0 14
47712: PPUSH
47713: CALL_OW 2
47717: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47718: LD_VAR 0 14
47722: PPUSH
47723: LD_VAR 0 9
47727: PPUSH
47728: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47732: LD_VAR 0 9
47736: PPUSH
47737: CALL_OW 313
47741: PUSH
47742: LD_INT 6
47744: EQUAL
47745: IFTRUE 47769
47747: PUSH
47748: LD_VAR 0 9
47752: PPUSH
47753: CALL_OW 266
47757: PUSH
47758: LD_INT 32
47760: PUSH
47761: LD_INT 31
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: IN
47768: OR
47769: IFFALSE 47581
47771: GO 47578
47773: POP
47774: POP
// end else
47775: GO 48161
// for j = 1 to x do
47777: LD_ADDR_VAR 0 9
47781: PUSH
47782: DOUBLE
47783: LD_INT 1
47785: DEC
47786: ST_TO_ADDR
47787: LD_VAR 0 13
47791: PUSH
47792: FOR_TO
47793: IFFALSE 48159
// begin InitHc ;
47795: CALL_OW 19
// if not f then
47799: LD_VAR 0 12
47803: NOT
47804: IFFALSE 47893
// begin PrepareHuman ( false , i , skill ) ;
47806: LD_INT 0
47808: PPUSH
47809: LD_VAR 0 8
47813: PPUSH
47814: LD_VAR 0 4
47818: PPUSH
47819: CALL_OW 380
// un := CreateHuman ;
47823: LD_ADDR_VAR 0 14
47827: PUSH
47828: CALL_OW 44
47832: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47833: LD_ADDR_VAR 0 7
47837: PUSH
47838: LD_VAR 0 7
47842: PPUSH
47843: LD_INT 1
47845: PPUSH
47846: LD_VAR 0 14
47850: PPUSH
47851: CALL_OW 2
47855: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47856: LD_VAR 0 14
47860: PPUSH
47861: LD_VAR 0 1
47865: PPUSH
47866: CALL_OW 250
47870: PPUSH
47871: LD_VAR 0 1
47875: PPUSH
47876: CALL_OW 251
47880: PPUSH
47881: LD_INT 10
47883: PPUSH
47884: LD_INT 0
47886: PPUSH
47887: CALL_OW 50
// continue ;
47891: GO 47792
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47893: LD_VAR 0 12
47897: PUSH
47898: LD_INT 1
47900: ARRAY
47901: PPUSH
47902: CALL_OW 313
47906: IFFALSE 47934
47908: PUSH
47909: LD_VAR 0 12
47913: PUSH
47914: LD_INT 1
47916: ARRAY
47917: PPUSH
47918: CALL_OW 266
47922: PUSH
47923: LD_INT 32
47925: PUSH
47926: LD_INT 31
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: IN
47933: AND
47934: IFTRUE 47955
47936: PUSH
47937: LD_VAR 0 12
47941: PUSH
47942: LD_INT 1
47944: ARRAY
47945: PPUSH
47946: CALL_OW 313
47950: PUSH
47951: LD_INT 6
47953: EQUAL
47954: OR
47955: IFFALSE 47975
// f := Delete ( f , 1 ) ;
47957: LD_ADDR_VAR 0 12
47961: PUSH
47962: LD_VAR 0 12
47966: PPUSH
47967: LD_INT 1
47969: PPUSH
47970: CALL_OW 3
47974: ST_TO_ADDR
// if not f then
47975: LD_VAR 0 12
47979: NOT
47980: IFFALSE 47998
// begin x := x + 2 ;
47982: LD_ADDR_VAR 0 13
47986: PUSH
47987: LD_VAR 0 13
47991: PUSH
47992: LD_INT 2
47994: PLUS
47995: ST_TO_ADDR
// continue ;
47996: GO 47792
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
47998: LD_VAR 0 12
48002: PUSH
48003: LD_INT 1
48005: ARRAY
48006: PPUSH
48007: CALL_OW 266
48011: PUSH
48012: LD_INT 5
48014: EQUAL
48015: IFFALSE 48089
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48017: LD_VAR 0 12
48021: PUSH
48022: LD_INT 1
48024: ARRAY
48025: PPUSH
48026: CALL_OW 313
48030: PUSH
48031: LD_INT 3
48033: LESS
48034: IFFALSE 48070
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48036: LD_INT 0
48038: PPUSH
48039: LD_INT 5
48041: PUSH
48042: LD_INT 8
48044: PUSH
48045: LD_INT 9
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: LIST
48052: PUSH
48053: LD_VAR 0 17
48057: ARRAY
48058: PPUSH
48059: LD_VAR 0 4
48063: PPUSH
48064: CALL_OW 380
48068: GO 48087
// PrepareHuman ( false , i , skill ) ;
48070: LD_INT 0
48072: PPUSH
48073: LD_VAR 0 8
48077: PPUSH
48078: LD_VAR 0 4
48082: PPUSH
48083: CALL_OW 380
// end else
48087: GO 48106
// PrepareHuman ( false , i , skill ) ;
48089: LD_INT 0
48091: PPUSH
48092: LD_VAR 0 8
48096: PPUSH
48097: LD_VAR 0 4
48101: PPUSH
48102: CALL_OW 380
// un := CreateHuman ;
48106: LD_ADDR_VAR 0 14
48110: PUSH
48111: CALL_OW 44
48115: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48116: LD_ADDR_VAR 0 7
48120: PUSH
48121: LD_VAR 0 7
48125: PPUSH
48126: LD_INT 1
48128: PPUSH
48129: LD_VAR 0 14
48133: PPUSH
48134: CALL_OW 2
48138: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48139: LD_VAR 0 14
48143: PPUSH
48144: LD_VAR 0 12
48148: PUSH
48149: LD_INT 1
48151: ARRAY
48152: PPUSH
48153: CALL_OW 52
// end ;
48157: GO 47792
48159: POP
48160: POP
// end ;
48161: GO 47092
48163: POP
48164: POP
// result := result ^ buildings ;
48165: LD_ADDR_VAR 0 7
48169: PUSH
48170: LD_VAR 0 7
48174: PUSH
48175: LD_VAR 0 18
48179: ADD
48180: ST_TO_ADDR
// end else
48181: GO 48324
// begin for i = 1 to personel do
48183: LD_ADDR_VAR 0 8
48187: PUSH
48188: DOUBLE
48189: LD_INT 1
48191: DEC
48192: ST_TO_ADDR
48193: LD_VAR 0 6
48197: PUSH
48198: FOR_TO
48199: IFFALSE 48322
// begin if i > 4 then
48201: LD_VAR 0 8
48205: PUSH
48206: LD_INT 4
48208: GREATER
48209: IFFALSE 48213
// break ;
48211: GO 48322
// x := personel [ i ] ;
48213: LD_ADDR_VAR 0 13
48217: PUSH
48218: LD_VAR 0 6
48222: PUSH
48223: LD_VAR 0 8
48227: ARRAY
48228: ST_TO_ADDR
// if x = - 1 then
48229: LD_VAR 0 13
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: EQUAL
48238: IFFALSE 48242
// continue ;
48240: GO 48198
// PrepareHuman ( false , i , skill ) ;
48242: LD_INT 0
48244: PPUSH
48245: LD_VAR 0 8
48249: PPUSH
48250: LD_VAR 0 4
48254: PPUSH
48255: CALL_OW 380
// un := CreateHuman ;
48259: LD_ADDR_VAR 0 14
48263: PUSH
48264: CALL_OW 44
48268: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48269: LD_VAR 0 14
48273: PPUSH
48274: LD_VAR 0 1
48278: PPUSH
48279: CALL_OW 250
48283: PPUSH
48284: LD_VAR 0 1
48288: PPUSH
48289: CALL_OW 251
48293: PPUSH
48294: LD_INT 10
48296: PPUSH
48297: LD_INT 0
48299: PPUSH
48300: CALL_OW 50
// result := result ^ un ;
48304: LD_ADDR_VAR 0 7
48308: PUSH
48309: LD_VAR 0 7
48313: PUSH
48314: LD_VAR 0 14
48318: ADD
48319: ST_TO_ADDR
// end ;
48320: GO 48198
48322: POP
48323: POP
// end ; end ;
48324: LD_VAR 0 7
48328: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48329: LD_INT 0
48331: PPUSH
48332: PPUSH
48333: PPUSH
48334: PPUSH
48335: PPUSH
48336: PPUSH
48337: PPUSH
48338: PPUSH
48339: PPUSH
48340: PPUSH
48341: PPUSH
48342: PPUSH
48343: PPUSH
48344: PPUSH
48345: PPUSH
48346: PPUSH
// result := false ;
48347: LD_ADDR_VAR 0 3
48351: PUSH
48352: LD_INT 0
48354: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48355: LD_VAR 0 1
48359: NOT
48360: IFTRUE 48385
48362: PUSH
48363: LD_VAR 0 1
48367: PPUSH
48368: CALL_OW 266
48372: PUSH
48373: LD_INT 32
48375: PUSH
48376: LD_INT 33
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: IN
48383: NOT
48384: OR
48385: IFFALSE 48389
// exit ;
48387: GO 49524
// nat := GetNation ( tower ) ;
48389: LD_ADDR_VAR 0 12
48393: PUSH
48394: LD_VAR 0 1
48398: PPUSH
48399: CALL_OW 248
48403: ST_TO_ADDR
// side := GetSide ( tower ) ;
48404: LD_ADDR_VAR 0 16
48408: PUSH
48409: LD_VAR 0 1
48413: PPUSH
48414: CALL_OW 255
48418: ST_TO_ADDR
// x := GetX ( tower ) ;
48419: LD_ADDR_VAR 0 10
48423: PUSH
48424: LD_VAR 0 1
48428: PPUSH
48429: CALL_OW 250
48433: ST_TO_ADDR
// y := GetY ( tower ) ;
48434: LD_ADDR_VAR 0 11
48438: PUSH
48439: LD_VAR 0 1
48443: PPUSH
48444: CALL_OW 251
48448: ST_TO_ADDR
// if not x or not y then
48449: LD_VAR 0 10
48453: NOT
48454: IFTRUE 48463
48456: PUSH
48457: LD_VAR 0 11
48461: NOT
48462: OR
48463: IFFALSE 48467
// exit ;
48465: GO 49524
// weapon := 0 ;
48467: LD_ADDR_VAR 0 18
48471: PUSH
48472: LD_INT 0
48474: ST_TO_ADDR
// fac_list := [ ] ;
48475: LD_ADDR_VAR 0 17
48479: PUSH
48480: EMPTY
48481: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48482: LD_ADDR_VAR 0 6
48486: PUSH
48487: LD_VAR 0 1
48491: PPUSH
48492: CALL_OW 274
48496: PPUSH
48497: LD_VAR 0 2
48501: PPUSH
48502: LD_INT 0
48504: PPUSH
48505: CALL 46059 0 3
48509: PPUSH
48510: LD_INT 30
48512: PUSH
48513: LD_INT 3
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PPUSH
48520: CALL_OW 72
48524: ST_TO_ADDR
// if not factories then
48525: LD_VAR 0 6
48529: NOT
48530: IFFALSE 48534
// exit ;
48532: GO 49524
// for i in factories do
48534: LD_ADDR_VAR 0 8
48538: PUSH
48539: LD_VAR 0 6
48543: PUSH
48544: FOR_IN
48545: IFFALSE 48570
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48547: LD_ADDR_VAR 0 17
48551: PUSH
48552: LD_VAR 0 17
48556: PUSH
48557: LD_VAR 0 8
48561: PPUSH
48562: CALL_OW 478
48566: UNION
48567: ST_TO_ADDR
48568: GO 48544
48570: POP
48571: POP
// if not fac_list then
48572: LD_VAR 0 17
48576: NOT
48577: IFFALSE 48581
// exit ;
48579: GO 49524
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48581: LD_ADDR_VAR 0 5
48585: PUSH
48586: LD_INT 4
48588: PUSH
48589: LD_INT 5
48591: PUSH
48592: LD_INT 9
48594: PUSH
48595: LD_INT 10
48597: PUSH
48598: LD_INT 6
48600: PUSH
48601: LD_INT 7
48603: PUSH
48604: LD_INT 11
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 27
48618: PUSH
48619: LD_INT 28
48621: PUSH
48622: LD_INT 26
48624: PUSH
48625: LD_INT 30
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 43
48636: PUSH
48637: LD_INT 44
48639: PUSH
48640: LD_INT 46
48642: PUSH
48643: LD_INT 45
48645: PUSH
48646: LD_INT 47
48648: PUSH
48649: LD_INT 49
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: LIST
48664: PUSH
48665: LD_VAR 0 12
48669: ARRAY
48670: ST_TO_ADDR
// list := list isect fac_list ;
48671: LD_ADDR_VAR 0 5
48675: PUSH
48676: LD_VAR 0 5
48680: PUSH
48681: LD_VAR 0 17
48685: ISECT
48686: ST_TO_ADDR
// if not list then
48687: LD_VAR 0 5
48691: NOT
48692: IFFALSE 48696
// exit ;
48694: GO 49524
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48696: LD_VAR 0 12
48700: PUSH
48701: LD_INT 3
48703: EQUAL
48704: IFFALSE 48716
48706: PUSH
48707: LD_INT 49
48709: PUSH
48710: LD_VAR 0 5
48714: IN
48715: AND
48716: IFFALSE 48736
48718: PUSH
48719: LD_INT 31
48721: PPUSH
48722: LD_VAR 0 16
48726: PPUSH
48727: CALL_OW 321
48731: PUSH
48732: LD_INT 2
48734: EQUAL
48735: AND
48736: IFFALSE 48796
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48738: LD_INT 22
48740: PUSH
48741: LD_VAR 0 16
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 35
48752: PUSH
48753: LD_INT 49
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 91
48762: PUSH
48763: LD_VAR 0 1
48767: PUSH
48768: LD_INT 10
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: LIST
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: LIST
48780: PPUSH
48781: CALL_OW 69
48785: NOT
48786: IFFALSE 48796
// weapon := ru_time_lapser ;
48788: LD_ADDR_VAR 0 18
48792: PUSH
48793: LD_INT 49
48795: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48796: LD_VAR 0 12
48800: PUSH
48801: LD_INT 1
48803: PUSH
48804: LD_INT 2
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: IN
48811: IFFALSE 48835
48813: PUSH
48814: LD_INT 11
48816: PUSH
48817: LD_VAR 0 5
48821: IN
48822: IFTRUE 48834
48824: PUSH
48825: LD_INT 30
48827: PUSH
48828: LD_VAR 0 5
48832: IN
48833: OR
48834: AND
48835: IFFALSE 48855
48837: PUSH
48838: LD_INT 6
48840: PPUSH
48841: LD_VAR 0 16
48845: PPUSH
48846: CALL_OW 321
48850: PUSH
48851: LD_INT 2
48853: EQUAL
48854: AND
48855: IFFALSE 49022
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48857: LD_INT 22
48859: PUSH
48860: LD_VAR 0 16
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 2
48871: PUSH
48872: LD_INT 35
48874: PUSH
48875: LD_INT 11
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 35
48884: PUSH
48885: LD_INT 30
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 91
48899: PUSH
48900: LD_VAR 0 1
48904: PUSH
48905: LD_INT 18
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: LIST
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: LIST
48917: PPUSH
48918: CALL_OW 69
48922: NOT
48923: IFFALSE 48999
48925: PUSH
48926: LD_INT 22
48928: PUSH
48929: LD_VAR 0 16
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 2
48940: PUSH
48941: LD_INT 30
48943: PUSH
48944: LD_INT 32
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 30
48953: PUSH
48954: LD_INT 33
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 91
48968: PUSH
48969: LD_VAR 0 1
48973: PUSH
48974: LD_INT 12
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: LIST
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: LIST
48986: PUSH
48987: EMPTY
48988: LIST
48989: PPUSH
48990: CALL_OW 69
48994: PUSH
48995: LD_INT 2
48997: GREATER
48998: AND
48999: IFFALSE 49022
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49001: LD_ADDR_VAR 0 18
49005: PUSH
49006: LD_INT 11
49008: PUSH
49009: LD_INT 30
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_VAR 0 12
49020: ARRAY
49021: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49022: LD_VAR 0 18
49026: NOT
49027: IFFALSE 49047
49029: PUSH
49030: LD_INT 40
49032: PPUSH
49033: LD_VAR 0 16
49037: PPUSH
49038: CALL_OW 321
49042: PUSH
49043: LD_INT 2
49045: EQUAL
49046: AND
49047: IFFALSE 49083
49049: PUSH
49050: LD_INT 7
49052: PUSH
49053: LD_VAR 0 5
49057: IN
49058: IFTRUE 49070
49060: PUSH
49061: LD_INT 28
49063: PUSH
49064: LD_VAR 0 5
49068: IN
49069: OR
49070: IFTRUE 49082
49072: PUSH
49073: LD_INT 45
49075: PUSH
49076: LD_VAR 0 5
49080: IN
49081: OR
49082: AND
49083: IFFALSE 49337
// begin hex := GetHexInfo ( x , y ) ;
49085: LD_ADDR_VAR 0 4
49089: PUSH
49090: LD_VAR 0 10
49094: PPUSH
49095: LD_VAR 0 11
49099: PPUSH
49100: CALL_OW 546
49104: ST_TO_ADDR
// if hex [ 1 ] then
49105: LD_VAR 0 4
49109: PUSH
49110: LD_INT 1
49112: ARRAY
49113: IFFALSE 49117
// exit ;
49115: GO 49524
// height := hex [ 2 ] ;
49117: LD_ADDR_VAR 0 15
49121: PUSH
49122: LD_VAR 0 4
49126: PUSH
49127: LD_INT 2
49129: ARRAY
49130: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49131: LD_ADDR_VAR 0 14
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: LD_INT 2
49141: PUSH
49142: LD_INT 3
49144: PUSH
49145: LD_INT 5
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: ST_TO_ADDR
// for i in tmp do
49154: LD_ADDR_VAR 0 8
49158: PUSH
49159: LD_VAR 0 14
49163: PUSH
49164: FOR_IN
49165: IFFALSE 49335
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49167: LD_ADDR_VAR 0 9
49171: PUSH
49172: LD_VAR 0 10
49176: PPUSH
49177: LD_VAR 0 8
49181: PPUSH
49182: LD_INT 5
49184: PPUSH
49185: CALL_OW 272
49189: PUSH
49190: LD_VAR 0 11
49194: PPUSH
49195: LD_VAR 0 8
49199: PPUSH
49200: LD_INT 5
49202: PPUSH
49203: CALL_OW 273
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49212: LD_VAR 0 9
49216: PUSH
49217: LD_INT 1
49219: ARRAY
49220: PPUSH
49221: LD_VAR 0 9
49225: PUSH
49226: LD_INT 2
49228: ARRAY
49229: PPUSH
49230: CALL_OW 488
49234: IFFALSE 49333
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49236: LD_ADDR_VAR 0 4
49240: PUSH
49241: LD_VAR 0 9
49245: PUSH
49246: LD_INT 1
49248: ARRAY
49249: PPUSH
49250: LD_VAR 0 9
49254: PUSH
49255: LD_INT 2
49257: ARRAY
49258: PPUSH
49259: CALL_OW 546
49263: ST_TO_ADDR
// if hex [ 1 ] then
49264: LD_VAR 0 4
49268: PUSH
49269: LD_INT 1
49271: ARRAY
49272: IFFALSE 49276
// continue ;
49274: GO 49164
// h := hex [ 2 ] ;
49276: LD_ADDR_VAR 0 13
49280: PUSH
49281: LD_VAR 0 4
49285: PUSH
49286: LD_INT 2
49288: ARRAY
49289: ST_TO_ADDR
// if h + 7 < height then
49290: LD_VAR 0 13
49294: PUSH
49295: LD_INT 7
49297: PLUS
49298: PUSH
49299: LD_VAR 0 15
49303: LESS
49304: IFFALSE 49333
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49306: LD_ADDR_VAR 0 18
49310: PUSH
49311: LD_INT 7
49313: PUSH
49314: LD_INT 28
49316: PUSH
49317: LD_INT 45
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: LIST
49324: PUSH
49325: LD_VAR 0 12
49329: ARRAY
49330: ST_TO_ADDR
// break ;
49331: GO 49335
// end ; end ; end ;
49333: GO 49164
49335: POP
49336: POP
// end ; if not weapon then
49337: LD_VAR 0 18
49341: NOT
49342: IFFALSE 49402
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49344: LD_ADDR_VAR 0 5
49348: PUSH
49349: LD_VAR 0 5
49353: PUSH
49354: LD_INT 11
49356: PUSH
49357: LD_INT 30
49359: PUSH
49360: LD_INT 49
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: LIST
49367: DIFF
49368: ST_TO_ADDR
// if not list then
49369: LD_VAR 0 5
49373: NOT
49374: IFFALSE 49378
// exit ;
49376: GO 49524
// weapon := list [ rand ( 1 , list ) ] ;
49378: LD_ADDR_VAR 0 18
49382: PUSH
49383: LD_VAR 0 5
49387: PUSH
49388: LD_INT 1
49390: PPUSH
49391: LD_VAR 0 5
49395: PPUSH
49396: CALL_OW 12
49400: ARRAY
49401: ST_TO_ADDR
// end ; if weapon then
49402: LD_VAR 0 18
49406: IFFALSE 49524
// begin tmp := CostOfWeapon ( weapon ) ;
49408: LD_ADDR_VAR 0 14
49412: PUSH
49413: LD_VAR 0 18
49417: PPUSH
49418: CALL_OW 451
49422: ST_TO_ADDR
// j := GetBase ( tower ) ;
49423: LD_ADDR_VAR 0 9
49427: PUSH
49428: LD_VAR 0 1
49432: PPUSH
49433: CALL_OW 274
49437: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49438: LD_VAR 0 9
49442: PPUSH
49443: LD_INT 1
49445: PPUSH
49446: CALL_OW 275
49450: PUSH
49451: LD_VAR 0 14
49455: PUSH
49456: LD_INT 1
49458: ARRAY
49459: GREATEREQUAL
49460: IFFALSE 49486
49462: PUSH
49463: LD_VAR 0 9
49467: PPUSH
49468: LD_INT 2
49470: PPUSH
49471: CALL_OW 275
49475: PUSH
49476: LD_VAR 0 14
49480: PUSH
49481: LD_INT 2
49483: ARRAY
49484: GREATEREQUAL
49485: AND
49486: IFFALSE 49512
49488: PUSH
49489: LD_VAR 0 9
49493: PPUSH
49494: LD_INT 3
49496: PPUSH
49497: CALL_OW 275
49501: PUSH
49502: LD_VAR 0 14
49506: PUSH
49507: LD_INT 3
49509: ARRAY
49510: GREATEREQUAL
49511: AND
49512: IFFALSE 49524
// result := weapon ;
49514: LD_ADDR_VAR 0 3
49518: PUSH
49519: LD_VAR 0 18
49523: ST_TO_ADDR
// end ; end ;
49524: LD_VAR 0 3
49528: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49529: LD_INT 0
49531: PPUSH
49532: PPUSH
// result := true ;
49533: LD_ADDR_VAR 0 3
49537: PUSH
49538: LD_INT 1
49540: ST_TO_ADDR
// if array1 = array2 then
49541: LD_VAR 0 1
49545: PUSH
49546: LD_VAR 0 2
49550: EQUAL
49551: IFFALSE 49611
// begin for i = 1 to array1 do
49553: LD_ADDR_VAR 0 4
49557: PUSH
49558: DOUBLE
49559: LD_INT 1
49561: DEC
49562: ST_TO_ADDR
49563: LD_VAR 0 1
49567: PUSH
49568: FOR_TO
49569: IFFALSE 49607
// if array1 [ i ] <> array2 [ i ] then
49571: LD_VAR 0 1
49575: PUSH
49576: LD_VAR 0 4
49580: ARRAY
49581: PUSH
49582: LD_VAR 0 2
49586: PUSH
49587: LD_VAR 0 4
49591: ARRAY
49592: NONEQUAL
49593: IFFALSE 49605
// begin result := false ;
49595: LD_ADDR_VAR 0 3
49599: PUSH
49600: LD_INT 0
49602: ST_TO_ADDR
// break ;
49603: GO 49607
// end ;
49605: GO 49568
49607: POP
49608: POP
// end else
49609: GO 49619
// result := false ;
49611: LD_ADDR_VAR 0 3
49615: PUSH
49616: LD_INT 0
49618: ST_TO_ADDR
// end ;
49619: LD_VAR 0 3
49623: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49624: LD_INT 0
49626: PPUSH
49627: PPUSH
// if not array1 or not array2 then
49628: LD_VAR 0 1
49632: NOT
49633: IFTRUE 49642
49635: PUSH
49636: LD_VAR 0 2
49640: NOT
49641: OR
49642: IFFALSE 49646
// exit ;
49644: GO 49710
// result := true ;
49646: LD_ADDR_VAR 0 3
49650: PUSH
49651: LD_INT 1
49653: ST_TO_ADDR
// for i = 1 to array1 do
49654: LD_ADDR_VAR 0 4
49658: PUSH
49659: DOUBLE
49660: LD_INT 1
49662: DEC
49663: ST_TO_ADDR
49664: LD_VAR 0 1
49668: PUSH
49669: FOR_TO
49670: IFFALSE 49708
// if array1 [ i ] <> array2 [ i ] then
49672: LD_VAR 0 1
49676: PUSH
49677: LD_VAR 0 4
49681: ARRAY
49682: PUSH
49683: LD_VAR 0 2
49687: PUSH
49688: LD_VAR 0 4
49692: ARRAY
49693: NONEQUAL
49694: IFFALSE 49706
// begin result := false ;
49696: LD_ADDR_VAR 0 3
49700: PUSH
49701: LD_INT 0
49703: ST_TO_ADDR
// break ;
49704: GO 49708
// end ;
49706: GO 49669
49708: POP
49709: POP
// end ;
49710: LD_VAR 0 3
49714: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49715: LD_INT 0
49717: PPUSH
49718: PPUSH
49719: PPUSH
// pom := GetBase ( fac ) ;
49720: LD_ADDR_VAR 0 5
49724: PUSH
49725: LD_VAR 0 1
49729: PPUSH
49730: CALL_OW 274
49734: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49735: LD_ADDR_VAR 0 4
49739: PUSH
49740: LD_VAR 0 2
49744: PUSH
49745: LD_INT 1
49747: ARRAY
49748: PPUSH
49749: LD_VAR 0 2
49753: PUSH
49754: LD_INT 2
49756: ARRAY
49757: PPUSH
49758: LD_VAR 0 2
49762: PUSH
49763: LD_INT 3
49765: ARRAY
49766: PPUSH
49767: LD_VAR 0 2
49771: PUSH
49772: LD_INT 4
49774: ARRAY
49775: PPUSH
49776: CALL_OW 449
49780: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49781: LD_ADDR_VAR 0 3
49785: PUSH
49786: LD_VAR 0 5
49790: PPUSH
49791: LD_INT 1
49793: PPUSH
49794: CALL_OW 275
49798: PUSH
49799: LD_VAR 0 4
49803: PUSH
49804: LD_INT 1
49806: ARRAY
49807: GREATEREQUAL
49808: IFFALSE 49834
49810: PUSH
49811: LD_VAR 0 5
49815: PPUSH
49816: LD_INT 2
49818: PPUSH
49819: CALL_OW 275
49823: PUSH
49824: LD_VAR 0 4
49828: PUSH
49829: LD_INT 2
49831: ARRAY
49832: GREATEREQUAL
49833: AND
49834: IFFALSE 49860
49836: PUSH
49837: LD_VAR 0 5
49841: PPUSH
49842: LD_INT 3
49844: PPUSH
49845: CALL_OW 275
49849: PUSH
49850: LD_VAR 0 4
49854: PUSH
49855: LD_INT 3
49857: ARRAY
49858: GREATEREQUAL
49859: AND
49860: ST_TO_ADDR
// end ;
49861: LD_VAR 0 3
49865: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49866: LD_INT 0
49868: PPUSH
49869: PPUSH
49870: PPUSH
49871: PPUSH
// pom := GetBase ( building ) ;
49872: LD_ADDR_VAR 0 3
49876: PUSH
49877: LD_VAR 0 1
49881: PPUSH
49882: CALL_OW 274
49886: ST_TO_ADDR
// if not pom then
49887: LD_VAR 0 3
49891: NOT
49892: IFFALSE 49896
// exit ;
49894: GO 50070
// btype := GetBType ( building ) ;
49896: LD_ADDR_VAR 0 5
49900: PUSH
49901: LD_VAR 0 1
49905: PPUSH
49906: CALL_OW 266
49910: ST_TO_ADDR
// if btype = b_armoury then
49911: LD_VAR 0 5
49915: PUSH
49916: LD_INT 4
49918: EQUAL
49919: IFFALSE 49929
// btype := b_barracks ;
49921: LD_ADDR_VAR 0 5
49925: PUSH
49926: LD_INT 5
49928: ST_TO_ADDR
// if btype = b_depot then
49929: LD_VAR 0 5
49933: PUSH
49934: LD_INT 0
49936: EQUAL
49937: IFFALSE 49947
// btype := b_warehouse ;
49939: LD_ADDR_VAR 0 5
49943: PUSH
49944: LD_INT 1
49946: ST_TO_ADDR
// if btype = b_workshop then
49947: LD_VAR 0 5
49951: PUSH
49952: LD_INT 2
49954: EQUAL
49955: IFFALSE 49965
// btype := b_factory ;
49957: LD_ADDR_VAR 0 5
49961: PUSH
49962: LD_INT 3
49964: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49965: LD_ADDR_VAR 0 4
49969: PUSH
49970: LD_VAR 0 5
49974: PPUSH
49975: LD_VAR 0 1
49979: PPUSH
49980: CALL_OW 248
49984: PPUSH
49985: CALL_OW 450
49989: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49990: LD_ADDR_VAR 0 2
49994: PUSH
49995: LD_VAR 0 3
49999: PPUSH
50000: LD_INT 1
50002: PPUSH
50003: CALL_OW 275
50007: PUSH
50008: LD_VAR 0 4
50012: PUSH
50013: LD_INT 1
50015: ARRAY
50016: GREATEREQUAL
50017: IFFALSE 50043
50019: PUSH
50020: LD_VAR 0 3
50024: PPUSH
50025: LD_INT 2
50027: PPUSH
50028: CALL_OW 275
50032: PUSH
50033: LD_VAR 0 4
50037: PUSH
50038: LD_INT 2
50040: ARRAY
50041: GREATEREQUAL
50042: AND
50043: IFFALSE 50069
50045: PUSH
50046: LD_VAR 0 3
50050: PPUSH
50051: LD_INT 3
50053: PPUSH
50054: CALL_OW 275
50058: PUSH
50059: LD_VAR 0 4
50063: PUSH
50064: LD_INT 3
50066: ARRAY
50067: GREATEREQUAL
50068: AND
50069: ST_TO_ADDR
// end ;
50070: LD_VAR 0 2
50074: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50075: LD_INT 0
50077: PPUSH
50078: PPUSH
50079: PPUSH
// pom := GetBase ( building ) ;
50080: LD_ADDR_VAR 0 4
50084: PUSH
50085: LD_VAR 0 1
50089: PPUSH
50090: CALL_OW 274
50094: ST_TO_ADDR
// if not pom then
50095: LD_VAR 0 4
50099: NOT
50100: IFFALSE 50104
// exit ;
50102: GO 50209
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50104: LD_ADDR_VAR 0 5
50108: PUSH
50109: LD_VAR 0 2
50113: PPUSH
50114: LD_VAR 0 1
50118: PPUSH
50119: CALL_OW 248
50123: PPUSH
50124: CALL_OW 450
50128: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50129: LD_ADDR_VAR 0 3
50133: PUSH
50134: LD_VAR 0 4
50138: PPUSH
50139: LD_INT 1
50141: PPUSH
50142: CALL_OW 275
50146: PUSH
50147: LD_VAR 0 5
50151: PUSH
50152: LD_INT 1
50154: ARRAY
50155: GREATEREQUAL
50156: IFFALSE 50182
50158: PUSH
50159: LD_VAR 0 4
50163: PPUSH
50164: LD_INT 2
50166: PPUSH
50167: CALL_OW 275
50171: PUSH
50172: LD_VAR 0 5
50176: PUSH
50177: LD_INT 2
50179: ARRAY
50180: GREATEREQUAL
50181: AND
50182: IFFALSE 50208
50184: PUSH
50185: LD_VAR 0 4
50189: PPUSH
50190: LD_INT 3
50192: PPUSH
50193: CALL_OW 275
50197: PUSH
50198: LD_VAR 0 5
50202: PUSH
50203: LD_INT 3
50205: ARRAY
50206: GREATEREQUAL
50207: AND
50208: ST_TO_ADDR
// end ;
50209: LD_VAR 0 3
50213: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50214: LD_INT 0
50216: PPUSH
50217: PPUSH
50218: PPUSH
50219: PPUSH
50220: PPUSH
50221: PPUSH
50222: PPUSH
50223: PPUSH
50224: PPUSH
50225: PPUSH
50226: PPUSH
// result := false ;
50227: LD_ADDR_VAR 0 8
50231: PUSH
50232: LD_INT 0
50234: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50235: LD_VAR 0 5
50239: NOT
50240: IFTRUE 50249
50242: PUSH
50243: LD_VAR 0 1
50247: NOT
50248: OR
50249: IFTRUE 50258
50251: PUSH
50252: LD_VAR 0 2
50256: NOT
50257: OR
50258: IFTRUE 50267
50260: PUSH
50261: LD_VAR 0 3
50265: NOT
50266: OR
50267: IFFALSE 50271
// exit ;
50269: GO 51097
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50271: LD_ADDR_VAR 0 14
50275: PUSH
50276: LD_VAR 0 1
50280: PPUSH
50281: LD_VAR 0 2
50285: PPUSH
50286: LD_VAR 0 3
50290: PPUSH
50291: LD_VAR 0 4
50295: PPUSH
50296: LD_VAR 0 5
50300: PUSH
50301: LD_INT 1
50303: ARRAY
50304: PPUSH
50305: CALL_OW 248
50309: PPUSH
50310: LD_INT 0
50312: PPUSH
50313: CALL 52378 0 6
50317: ST_TO_ADDR
// if not hexes then
50318: LD_VAR 0 14
50322: NOT
50323: IFFALSE 50327
// exit ;
50325: GO 51097
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50327: LD_ADDR_VAR 0 17
50331: PUSH
50332: LD_VAR 0 5
50336: PPUSH
50337: LD_INT 22
50339: PUSH
50340: LD_VAR 0 13
50344: PPUSH
50345: CALL_OW 255
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 2
50356: PUSH
50357: LD_INT 30
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 30
50369: PUSH
50370: LD_INT 1
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: LIST
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PPUSH
50386: CALL_OW 72
50390: ST_TO_ADDR
// for i = 1 to hexes do
50391: LD_ADDR_VAR 0 9
50395: PUSH
50396: DOUBLE
50397: LD_INT 1
50399: DEC
50400: ST_TO_ADDR
50401: LD_VAR 0 14
50405: PUSH
50406: FOR_TO
50407: IFFALSE 51095
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50409: LD_ADDR_VAR 0 13
50413: PUSH
50414: LD_VAR 0 14
50418: PUSH
50419: LD_VAR 0 9
50423: ARRAY
50424: PUSH
50425: LD_INT 1
50427: ARRAY
50428: PPUSH
50429: LD_VAR 0 14
50433: PUSH
50434: LD_VAR 0 9
50438: ARRAY
50439: PUSH
50440: LD_INT 2
50442: ARRAY
50443: PPUSH
50444: CALL_OW 428
50448: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50449: LD_VAR 0 14
50453: PUSH
50454: LD_VAR 0 9
50458: ARRAY
50459: PUSH
50460: LD_INT 1
50462: ARRAY
50463: PPUSH
50464: LD_VAR 0 14
50468: PUSH
50469: LD_VAR 0 9
50473: ARRAY
50474: PUSH
50475: LD_INT 2
50477: ARRAY
50478: PPUSH
50479: CALL_OW 351
50483: IFTRUE 50522
50485: PUSH
50486: LD_VAR 0 14
50490: PUSH
50491: LD_VAR 0 9
50495: ARRAY
50496: PUSH
50497: LD_INT 1
50499: ARRAY
50500: PPUSH
50501: LD_VAR 0 14
50505: PUSH
50506: LD_VAR 0 9
50510: ARRAY
50511: PUSH
50512: LD_INT 2
50514: ARRAY
50515: PPUSH
50516: CALL_OW 488
50520: NOT
50521: OR
50522: IFTRUE 50539
50524: PUSH
50525: LD_VAR 0 13
50529: PPUSH
50530: CALL_OW 247
50534: PUSH
50535: LD_INT 3
50537: EQUAL
50538: OR
50539: IFFALSE 50545
// exit ;
50541: POP
50542: POP
50543: GO 51097
// if not tmp then
50545: LD_VAR 0 13
50549: NOT
50550: IFFALSE 50554
// continue ;
50552: GO 50406
// result := true ;
50554: LD_ADDR_VAR 0 8
50558: PUSH
50559: LD_INT 1
50561: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50562: LD_VAR 0 6
50566: IFFALSE 50583
50568: PUSH
50569: LD_VAR 0 13
50573: PPUSH
50574: CALL_OW 247
50578: PUSH
50579: LD_INT 2
50581: EQUAL
50582: AND
50583: IFFALSE 50600
50585: PUSH
50586: LD_VAR 0 13
50590: PPUSH
50591: CALL_OW 263
50595: PUSH
50596: LD_INT 1
50598: EQUAL
50599: AND
50600: IFFALSE 50764
// begin if IsDrivenBy ( tmp ) then
50602: LD_VAR 0 13
50606: PPUSH
50607: CALL_OW 311
50611: IFFALSE 50615
// continue ;
50613: GO 50406
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50615: LD_VAR 0 6
50619: PPUSH
50620: LD_INT 3
50622: PUSH
50623: LD_INT 60
50625: PUSH
50626: EMPTY
50627: LIST
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 3
50635: PUSH
50636: LD_INT 55
50638: PUSH
50639: EMPTY
50640: LIST
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PPUSH
50650: CALL_OW 72
50654: IFFALSE 50762
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50656: LD_ADDR_VAR 0 18
50660: PUSH
50661: LD_VAR 0 6
50665: PPUSH
50666: LD_INT 3
50668: PUSH
50669: LD_INT 60
50671: PUSH
50672: EMPTY
50673: LIST
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 3
50681: PUSH
50682: LD_INT 55
50684: PUSH
50685: EMPTY
50686: LIST
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PPUSH
50696: CALL_OW 72
50700: PUSH
50701: LD_INT 1
50703: ARRAY
50704: ST_TO_ADDR
// if IsInUnit ( driver ) then
50705: LD_VAR 0 18
50709: PPUSH
50710: CALL_OW 310
50714: IFFALSE 50725
// ComExit ( driver ) ;
50716: LD_VAR 0 18
50720: PPUSH
50721: CALL 76378 0 1
// AddComEnterUnit ( driver , tmp ) ;
50725: LD_VAR 0 18
50729: PPUSH
50730: LD_VAR 0 13
50734: PPUSH
50735: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50739: LD_VAR 0 18
50743: PPUSH
50744: LD_VAR 0 7
50748: PPUSH
50749: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50753: LD_VAR 0 18
50757: PPUSH
50758: CALL_OW 181
// end ; continue ;
50762: GO 50406
// end ; if not cleaners or not tmp in cleaners then
50764: LD_VAR 0 6
50768: NOT
50769: IFTRUE 50784
50771: PUSH
50772: LD_VAR 0 13
50776: PUSH
50777: LD_VAR 0 6
50781: IN
50782: NOT
50783: OR
50784: IFFALSE 51093
// begin if dep then
50786: LD_VAR 0 17
50790: IFFALSE 50926
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50792: LD_ADDR_VAR 0 16
50796: PUSH
50797: LD_VAR 0 17
50801: PUSH
50802: LD_INT 1
50804: ARRAY
50805: PPUSH
50806: CALL_OW 250
50810: PPUSH
50811: LD_VAR 0 17
50815: PUSH
50816: LD_INT 1
50818: ARRAY
50819: PPUSH
50820: CALL_OW 254
50824: PPUSH
50825: LD_INT 5
50827: PPUSH
50828: CALL_OW 272
50832: PUSH
50833: LD_VAR 0 17
50837: PUSH
50838: LD_INT 1
50840: ARRAY
50841: PPUSH
50842: CALL_OW 251
50846: PPUSH
50847: LD_VAR 0 17
50851: PUSH
50852: LD_INT 1
50854: ARRAY
50855: PPUSH
50856: CALL_OW 254
50860: PPUSH
50861: LD_INT 5
50863: PPUSH
50864: CALL_OW 273
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50873: LD_VAR 0 16
50877: PUSH
50878: LD_INT 1
50880: ARRAY
50881: PPUSH
50882: LD_VAR 0 16
50886: PUSH
50887: LD_INT 2
50889: ARRAY
50890: PPUSH
50891: CALL_OW 488
50895: IFFALSE 50926
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50897: LD_VAR 0 13
50901: PPUSH
50902: LD_VAR 0 16
50906: PUSH
50907: LD_INT 1
50909: ARRAY
50910: PPUSH
50911: LD_VAR 0 16
50915: PUSH
50916: LD_INT 2
50918: ARRAY
50919: PPUSH
50920: CALL_OW 111
// continue ;
50924: GO 50406
// end ; end ; r := GetDir ( tmp ) ;
50926: LD_ADDR_VAR 0 15
50930: PUSH
50931: LD_VAR 0 13
50935: PPUSH
50936: CALL_OW 254
50940: ST_TO_ADDR
// if r = 5 then
50941: LD_VAR 0 15
50945: PUSH
50946: LD_INT 5
50948: EQUAL
50949: IFFALSE 50959
// r := 0 ;
50951: LD_ADDR_VAR 0 15
50955: PUSH
50956: LD_INT 0
50958: ST_TO_ADDR
// for j = r to 5 do
50959: LD_ADDR_VAR 0 10
50963: PUSH
50964: DOUBLE
50965: LD_VAR 0 15
50969: DEC
50970: ST_TO_ADDR
50971: LD_INT 5
50973: PUSH
50974: FOR_TO
50975: IFFALSE 51091
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50977: LD_ADDR_VAR 0 11
50981: PUSH
50982: LD_VAR 0 13
50986: PPUSH
50987: CALL_OW 250
50991: PPUSH
50992: LD_VAR 0 10
50996: PPUSH
50997: LD_INT 2
50999: PPUSH
51000: CALL_OW 272
51004: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51005: LD_ADDR_VAR 0 12
51009: PUSH
51010: LD_VAR 0 13
51014: PPUSH
51015: CALL_OW 251
51019: PPUSH
51020: LD_VAR 0 10
51024: PPUSH
51025: LD_INT 2
51027: PPUSH
51028: CALL_OW 273
51032: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51033: LD_VAR 0 11
51037: PPUSH
51038: LD_VAR 0 12
51042: PPUSH
51043: CALL_OW 488
51047: IFFALSE 51066
51049: PUSH
51050: LD_VAR 0 11
51054: PPUSH
51055: LD_VAR 0 12
51059: PPUSH
51060: CALL_OW 428
51064: NOT
51065: AND
51066: IFFALSE 51089
// begin ComMoveXY ( tmp , _x , _y ) ;
51068: LD_VAR 0 13
51072: PPUSH
51073: LD_VAR 0 11
51077: PPUSH
51078: LD_VAR 0 12
51082: PPUSH
51083: CALL_OW 111
// break ;
51087: GO 51091
// end ; end ;
51089: GO 50974
51091: POP
51092: POP
// end ; end ;
51093: GO 50406
51095: POP
51096: POP
// end ;
51097: LD_VAR 0 8
51101: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51102: LD_INT 0
51104: PPUSH
// result := true ;
51105: LD_ADDR_VAR 0 3
51109: PUSH
51110: LD_INT 1
51112: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51113: LD_VAR 0 2
51117: PUSH
51118: LD_INT 24
51120: DOUBLE
51121: EQUAL
51122: IFTRUE 51132
51124: LD_INT 33
51126: DOUBLE
51127: EQUAL
51128: IFTRUE 51132
51130: GO 51157
51132: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51133: LD_ADDR_VAR 0 3
51137: PUSH
51138: LD_INT 32
51140: PPUSH
51141: LD_VAR 0 1
51145: PPUSH
51146: CALL_OW 321
51150: PUSH
51151: LD_INT 2
51153: EQUAL
51154: ST_TO_ADDR
51155: GO 51473
51157: LD_INT 20
51159: DOUBLE
51160: EQUAL
51161: IFTRUE 51165
51163: GO 51190
51165: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51166: LD_ADDR_VAR 0 3
51170: PUSH
51171: LD_INT 6
51173: PPUSH
51174: LD_VAR 0 1
51178: PPUSH
51179: CALL_OW 321
51183: PUSH
51184: LD_INT 2
51186: EQUAL
51187: ST_TO_ADDR
51188: GO 51473
51190: LD_INT 22
51192: DOUBLE
51193: EQUAL
51194: IFTRUE 51204
51196: LD_INT 36
51198: DOUBLE
51199: EQUAL
51200: IFTRUE 51204
51202: GO 51229
51204: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51205: LD_ADDR_VAR 0 3
51209: PUSH
51210: LD_INT 15
51212: PPUSH
51213: LD_VAR 0 1
51217: PPUSH
51218: CALL_OW 321
51222: PUSH
51223: LD_INT 2
51225: EQUAL
51226: ST_TO_ADDR
51227: GO 51473
51229: LD_INT 30
51231: DOUBLE
51232: EQUAL
51233: IFTRUE 51237
51235: GO 51262
51237: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51238: LD_ADDR_VAR 0 3
51242: PUSH
51243: LD_INT 20
51245: PPUSH
51246: LD_VAR 0 1
51250: PPUSH
51251: CALL_OW 321
51255: PUSH
51256: LD_INT 2
51258: EQUAL
51259: ST_TO_ADDR
51260: GO 51473
51262: LD_INT 28
51264: DOUBLE
51265: EQUAL
51266: IFTRUE 51276
51268: LD_INT 21
51270: DOUBLE
51271: EQUAL
51272: IFTRUE 51276
51274: GO 51301
51276: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51277: LD_ADDR_VAR 0 3
51281: PUSH
51282: LD_INT 21
51284: PPUSH
51285: LD_VAR 0 1
51289: PPUSH
51290: CALL_OW 321
51294: PUSH
51295: LD_INT 2
51297: EQUAL
51298: ST_TO_ADDR
51299: GO 51473
51301: LD_INT 16
51303: DOUBLE
51304: EQUAL
51305: IFTRUE 51309
51307: GO 51334
51309: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51310: LD_ADDR_VAR 0 3
51314: PUSH
51315: LD_INT 84
51317: PPUSH
51318: LD_VAR 0 1
51322: PPUSH
51323: CALL_OW 321
51327: PUSH
51328: LD_INT 2
51330: EQUAL
51331: ST_TO_ADDR
51332: GO 51473
51334: LD_INT 19
51336: DOUBLE
51337: EQUAL
51338: IFTRUE 51348
51340: LD_INT 23
51342: DOUBLE
51343: EQUAL
51344: IFTRUE 51348
51346: GO 51373
51348: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51349: LD_ADDR_VAR 0 3
51353: PUSH
51354: LD_INT 83
51356: PPUSH
51357: LD_VAR 0 1
51361: PPUSH
51362: CALL_OW 321
51366: PUSH
51367: LD_INT 2
51369: EQUAL
51370: ST_TO_ADDR
51371: GO 51473
51373: LD_INT 17
51375: DOUBLE
51376: EQUAL
51377: IFTRUE 51381
51379: GO 51406
51381: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51382: LD_ADDR_VAR 0 3
51386: PUSH
51387: LD_INT 39
51389: PPUSH
51390: LD_VAR 0 1
51394: PPUSH
51395: CALL_OW 321
51399: PUSH
51400: LD_INT 2
51402: EQUAL
51403: ST_TO_ADDR
51404: GO 51473
51406: LD_INT 18
51408: DOUBLE
51409: EQUAL
51410: IFTRUE 51414
51412: GO 51439
51414: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51415: LD_ADDR_VAR 0 3
51419: PUSH
51420: LD_INT 40
51422: PPUSH
51423: LD_VAR 0 1
51427: PPUSH
51428: CALL_OW 321
51432: PUSH
51433: LD_INT 2
51435: EQUAL
51436: ST_TO_ADDR
51437: GO 51473
51439: LD_INT 27
51441: DOUBLE
51442: EQUAL
51443: IFTRUE 51447
51445: GO 51472
51447: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51448: LD_ADDR_VAR 0 3
51452: PUSH
51453: LD_INT 35
51455: PPUSH
51456: LD_VAR 0 1
51460: PPUSH
51461: CALL_OW 321
51465: PUSH
51466: LD_INT 2
51468: EQUAL
51469: ST_TO_ADDR
51470: GO 51473
51472: POP
// end ;
51473: LD_VAR 0 3
51477: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51478: LD_INT 0
51480: PPUSH
51481: PPUSH
51482: PPUSH
51483: PPUSH
51484: PPUSH
51485: PPUSH
51486: PPUSH
51487: PPUSH
51488: PPUSH
51489: PPUSH
51490: PPUSH
// result := false ;
51491: LD_ADDR_VAR 0 6
51495: PUSH
51496: LD_INT 0
51498: ST_TO_ADDR
// if btype = b_depot then
51499: LD_VAR 0 2
51503: PUSH
51504: LD_INT 0
51506: EQUAL
51507: IFFALSE 51519
// begin result := true ;
51509: LD_ADDR_VAR 0 6
51513: PUSH
51514: LD_INT 1
51516: ST_TO_ADDR
// exit ;
51517: GO 52373
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51519: LD_VAR 0 1
51523: NOT
51524: IFTRUE 51549
51526: PUSH
51527: LD_VAR 0 1
51531: PPUSH
51532: CALL_OW 266
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: IN
51547: NOT
51548: OR
51549: IFTRUE 51558
51551: PUSH
51552: LD_VAR 0 2
51556: NOT
51557: OR
51558: IFTRUE 51594
51560: PUSH
51561: LD_VAR 0 5
51565: PUSH
51566: LD_INT 0
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: LD_INT 2
51574: PUSH
51575: LD_INT 3
51577: PUSH
51578: LD_INT 4
51580: PUSH
51581: LD_INT 5
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: IN
51592: NOT
51593: OR
51594: IFTRUE 51613
51596: PUSH
51597: LD_VAR 0 3
51601: PPUSH
51602: LD_VAR 0 4
51606: PPUSH
51607: CALL_OW 488
51611: NOT
51612: OR
51613: IFFALSE 51617
// exit ;
51615: GO 52373
// side := GetSide ( depot ) ;
51617: LD_ADDR_VAR 0 9
51621: PUSH
51622: LD_VAR 0 1
51626: PPUSH
51627: CALL_OW 255
51631: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51632: LD_VAR 0 9
51636: PPUSH
51637: LD_VAR 0 2
51641: PPUSH
51642: CALL 51102 0 2
51646: NOT
51647: IFFALSE 51651
// exit ;
51649: GO 52373
// pom := GetBase ( depot ) ;
51651: LD_ADDR_VAR 0 10
51655: PUSH
51656: LD_VAR 0 1
51660: PPUSH
51661: CALL_OW 274
51665: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51666: LD_ADDR_VAR 0 11
51670: PUSH
51671: LD_VAR 0 2
51675: PPUSH
51676: LD_VAR 0 1
51680: PPUSH
51681: CALL_OW 248
51685: PPUSH
51686: CALL_OW 450
51690: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51691: LD_VAR 0 10
51695: PPUSH
51696: LD_INT 1
51698: PPUSH
51699: CALL_OW 275
51703: PUSH
51704: LD_VAR 0 11
51708: PUSH
51709: LD_INT 1
51711: ARRAY
51712: GREATEREQUAL
51713: IFFALSE 51739
51715: PUSH
51716: LD_VAR 0 10
51720: PPUSH
51721: LD_INT 2
51723: PPUSH
51724: CALL_OW 275
51728: PUSH
51729: LD_VAR 0 11
51733: PUSH
51734: LD_INT 2
51736: ARRAY
51737: GREATEREQUAL
51738: AND
51739: IFFALSE 51765
51741: PUSH
51742: LD_VAR 0 10
51746: PPUSH
51747: LD_INT 3
51749: PPUSH
51750: CALL_OW 275
51754: PUSH
51755: LD_VAR 0 11
51759: PUSH
51760: LD_INT 3
51762: ARRAY
51763: GREATEREQUAL
51764: AND
51765: NOT
51766: IFFALSE 51770
// exit ;
51768: GO 52373
// if GetBType ( depot ) = b_depot then
51770: LD_VAR 0 1
51774: PPUSH
51775: CALL_OW 266
51779: PUSH
51780: LD_INT 0
51782: EQUAL
51783: IFFALSE 51795
// dist := 28 else
51785: LD_ADDR_VAR 0 14
51789: PUSH
51790: LD_INT 28
51792: ST_TO_ADDR
51793: GO 51803
// dist := 36 ;
51795: LD_ADDR_VAR 0 14
51799: PUSH
51800: LD_INT 36
51802: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51803: LD_VAR 0 1
51807: PPUSH
51808: LD_VAR 0 3
51812: PPUSH
51813: LD_VAR 0 4
51817: PPUSH
51818: CALL_OW 297
51822: PUSH
51823: LD_VAR 0 14
51827: GREATER
51828: IFFALSE 51832
// exit ;
51830: GO 52373
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51832: LD_ADDR_VAR 0 12
51836: PUSH
51837: LD_VAR 0 2
51841: PPUSH
51842: LD_VAR 0 3
51846: PPUSH
51847: LD_VAR 0 4
51851: PPUSH
51852: LD_VAR 0 5
51856: PPUSH
51857: LD_VAR 0 1
51861: PPUSH
51862: CALL_OW 248
51866: PPUSH
51867: LD_INT 0
51869: PPUSH
51870: CALL 52378 0 6
51874: ST_TO_ADDR
// if not hexes then
51875: LD_VAR 0 12
51879: NOT
51880: IFFALSE 51884
// exit ;
51882: GO 52373
// hex := GetHexInfo ( x , y ) ;
51884: LD_ADDR_VAR 0 15
51888: PUSH
51889: LD_VAR 0 3
51893: PPUSH
51894: LD_VAR 0 4
51898: PPUSH
51899: CALL_OW 546
51903: ST_TO_ADDR
// if hex [ 1 ] then
51904: LD_VAR 0 15
51908: PUSH
51909: LD_INT 1
51911: ARRAY
51912: IFFALSE 51916
// exit ;
51914: GO 52373
// height := hex [ 2 ] ;
51916: LD_ADDR_VAR 0 13
51920: PUSH
51921: LD_VAR 0 15
51925: PUSH
51926: LD_INT 2
51928: ARRAY
51929: ST_TO_ADDR
// for i = 1 to hexes do
51930: LD_ADDR_VAR 0 7
51934: PUSH
51935: DOUBLE
51936: LD_INT 1
51938: DEC
51939: ST_TO_ADDR
51940: LD_VAR 0 12
51944: PUSH
51945: FOR_TO
51946: IFFALSE 52290
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51948: LD_VAR 0 12
51952: PUSH
51953: LD_VAR 0 7
51957: ARRAY
51958: PUSH
51959: LD_INT 1
51961: ARRAY
51962: PPUSH
51963: LD_VAR 0 12
51967: PUSH
51968: LD_VAR 0 7
51972: ARRAY
51973: PUSH
51974: LD_INT 2
51976: ARRAY
51977: PPUSH
51978: CALL_OW 488
51982: NOT
51983: IFTRUE 52025
51985: PUSH
51986: LD_VAR 0 12
51990: PUSH
51991: LD_VAR 0 7
51995: ARRAY
51996: PUSH
51997: LD_INT 1
51999: ARRAY
52000: PPUSH
52001: LD_VAR 0 12
52005: PUSH
52006: LD_VAR 0 7
52010: ARRAY
52011: PUSH
52012: LD_INT 2
52014: ARRAY
52015: PPUSH
52016: CALL_OW 428
52020: PUSH
52021: LD_INT 0
52023: GREATER
52024: OR
52025: IFTRUE 52063
52027: PUSH
52028: LD_VAR 0 12
52032: PUSH
52033: LD_VAR 0 7
52037: ARRAY
52038: PUSH
52039: LD_INT 1
52041: ARRAY
52042: PPUSH
52043: LD_VAR 0 12
52047: PUSH
52048: LD_VAR 0 7
52052: ARRAY
52053: PUSH
52054: LD_INT 2
52056: ARRAY
52057: PPUSH
52058: CALL_OW 351
52062: OR
52063: IFFALSE 52069
// exit ;
52065: POP
52066: POP
52067: GO 52373
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52069: LD_ADDR_VAR 0 8
52073: PUSH
52074: LD_VAR 0 12
52078: PUSH
52079: LD_VAR 0 7
52083: ARRAY
52084: PUSH
52085: LD_INT 1
52087: ARRAY
52088: PPUSH
52089: LD_VAR 0 12
52093: PUSH
52094: LD_VAR 0 7
52098: ARRAY
52099: PUSH
52100: LD_INT 2
52102: ARRAY
52103: PPUSH
52104: CALL_OW 546
52108: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52109: LD_VAR 0 8
52113: PUSH
52114: LD_INT 1
52116: ARRAY
52117: IFTRUE 52139
52119: PUSH
52120: LD_VAR 0 8
52124: PUSH
52125: LD_INT 2
52127: ARRAY
52128: PUSH
52129: LD_VAR 0 13
52133: PUSH
52134: LD_INT 2
52136: PLUS
52137: GREATER
52138: OR
52139: IFTRUE 52161
52141: PUSH
52142: LD_VAR 0 8
52146: PUSH
52147: LD_INT 2
52149: ARRAY
52150: PUSH
52151: LD_VAR 0 13
52155: PUSH
52156: LD_INT 2
52158: MINUS
52159: LESS
52160: OR
52161: IFTRUE 52229
52163: PUSH
52164: LD_VAR 0 8
52168: PUSH
52169: LD_INT 3
52171: ARRAY
52172: PUSH
52173: LD_INT 0
52175: PUSH
52176: LD_INT 8
52178: PUSH
52179: LD_INT 9
52181: PUSH
52182: LD_INT 10
52184: PUSH
52185: LD_INT 11
52187: PUSH
52188: LD_INT 12
52190: PUSH
52191: LD_INT 13
52193: PUSH
52194: LD_INT 16
52196: PUSH
52197: LD_INT 17
52199: PUSH
52200: LD_INT 18
52202: PUSH
52203: LD_INT 19
52205: PUSH
52206: LD_INT 20
52208: PUSH
52209: LD_INT 21
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: IN
52227: NOT
52228: OR
52229: IFTRUE 52242
52231: PUSH
52232: LD_VAR 0 8
52236: PUSH
52237: LD_INT 5
52239: ARRAY
52240: NOT
52241: OR
52242: IFTRUE 52282
52244: PUSH
52245: LD_VAR 0 8
52249: PUSH
52250: LD_INT 6
52252: ARRAY
52253: PUSH
52254: LD_INT 1
52256: PUSH
52257: LD_INT 2
52259: PUSH
52260: LD_INT 7
52262: PUSH
52263: LD_INT 9
52265: PUSH
52266: LD_INT 10
52268: PUSH
52269: LD_INT 11
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: IN
52280: NOT
52281: OR
52282: IFFALSE 52288
// exit ;
52284: POP
52285: POP
52286: GO 52373
// end ;
52288: GO 51945
52290: POP
52291: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52292: LD_VAR 0 9
52296: PPUSH
52297: LD_VAR 0 3
52301: PPUSH
52302: LD_VAR 0 4
52306: PPUSH
52307: LD_INT 20
52309: PPUSH
52310: CALL 44192 0 4
52314: PUSH
52315: LD_INT 4
52317: ARRAY
52318: IFFALSE 52322
// exit ;
52320: GO 52373
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52322: LD_VAR 0 2
52326: PUSH
52327: LD_INT 29
52329: PUSH
52330: LD_INT 30
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: IN
52337: IFFALSE 52361
52339: PUSH
52340: LD_VAR 0 3
52344: PPUSH
52345: LD_VAR 0 4
52349: PPUSH
52350: LD_VAR 0 9
52354: PPUSH
52355: CALL_OW 440
52359: NOT
52360: AND
52361: IFFALSE 52365
// exit ;
52363: GO 52373
// result := true ;
52365: LD_ADDR_VAR 0 6
52369: PUSH
52370: LD_INT 1
52372: ST_TO_ADDR
// end ;
52373: LD_VAR 0 6
52377: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52378: LD_INT 0
52380: PPUSH
52381: PPUSH
52382: PPUSH
52383: PPUSH
52384: PPUSH
52385: PPUSH
52386: PPUSH
52387: PPUSH
52388: PPUSH
52389: PPUSH
52390: PPUSH
52391: PPUSH
52392: PPUSH
52393: PPUSH
52394: PPUSH
52395: PPUSH
52396: PPUSH
52397: PPUSH
52398: PPUSH
52399: PPUSH
52400: PPUSH
52401: PPUSH
52402: PPUSH
52403: PPUSH
52404: PPUSH
52405: PPUSH
52406: PPUSH
52407: PPUSH
52408: PPUSH
52409: PPUSH
52410: PPUSH
52411: PPUSH
52412: PPUSH
52413: PPUSH
52414: PPUSH
52415: PPUSH
52416: PPUSH
52417: PPUSH
52418: PPUSH
52419: PPUSH
52420: PPUSH
52421: PPUSH
52422: PPUSH
52423: PPUSH
52424: PPUSH
52425: PPUSH
52426: PPUSH
52427: PPUSH
52428: PPUSH
52429: PPUSH
52430: PPUSH
52431: PPUSH
52432: PPUSH
52433: PPUSH
52434: PPUSH
52435: PPUSH
52436: PPUSH
52437: PPUSH
// result = [ ] ;
52438: LD_ADDR_VAR 0 7
52442: PUSH
52443: EMPTY
52444: ST_TO_ADDR
// temp_list = [ ] ;
52445: LD_ADDR_VAR 0 9
52449: PUSH
52450: EMPTY
52451: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52452: LD_VAR 0 4
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: LD_INT 2
52465: PUSH
52466: LD_INT 3
52468: PUSH
52469: LD_INT 4
52471: PUSH
52472: LD_INT 5
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: IN
52483: NOT
52484: IFTRUE 52527
52486: PUSH
52487: LD_VAR 0 1
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: IN
52502: IFFALSE 52526
52504: PUSH
52505: LD_VAR 0 5
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: LD_INT 2
52515: PUSH
52516: LD_INT 3
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: LIST
52523: IN
52524: NOT
52525: AND
52526: OR
52527: IFFALSE 52531
// exit ;
52529: GO 70930
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52531: LD_VAR 0 1
52535: PUSH
52536: LD_INT 6
52538: PUSH
52539: LD_INT 7
52541: PUSH
52542: LD_INT 8
52544: PUSH
52545: LD_INT 13
52547: PUSH
52548: LD_INT 12
52550: PUSH
52551: LD_INT 15
52553: PUSH
52554: LD_INT 11
52556: PUSH
52557: LD_INT 14
52559: PUSH
52560: LD_INT 10
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: IN
52574: IFFALSE 52584
// btype = b_lab ;
52576: LD_ADDR_VAR 0 1
52580: PUSH
52581: LD_INT 6
52583: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52584: LD_VAR 0 6
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: LD_INT 2
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: LIST
52602: IN
52603: NOT
52604: IFTRUE 52672
52606: PUSH
52607: LD_VAR 0 1
52611: PUSH
52612: LD_INT 0
52614: PUSH
52615: LD_INT 1
52617: PUSH
52618: LD_INT 2
52620: PUSH
52621: LD_INT 3
52623: PUSH
52624: LD_INT 6
52626: PUSH
52627: LD_INT 36
52629: PUSH
52630: LD_INT 4
52632: PUSH
52633: LD_INT 5
52635: PUSH
52636: LD_INT 31
52638: PUSH
52639: LD_INT 32
52641: PUSH
52642: LD_INT 33
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: IN
52658: NOT
52659: IFFALSE 52671
52661: PUSH
52662: LD_VAR 0 6
52666: PUSH
52667: LD_INT 1
52669: EQUAL
52670: AND
52671: OR
52672: IFTRUE 52704
52674: PUSH
52675: LD_VAR 0 1
52679: PUSH
52680: LD_INT 2
52682: PUSH
52683: LD_INT 3
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: IN
52690: NOT
52691: IFFALSE 52703
52693: PUSH
52694: LD_VAR 0 6
52698: PUSH
52699: LD_INT 2
52701: EQUAL
52702: AND
52703: OR
52704: IFFALSE 52714
// mode = 0 ;
52706: LD_ADDR_VAR 0 6
52710: PUSH
52711: LD_INT 0
52713: ST_TO_ADDR
// case mode of 0 :
52714: LD_VAR 0 6
52718: PUSH
52719: LD_INT 0
52721: DOUBLE
52722: EQUAL
52723: IFTRUE 52727
52725: GO 64180
52727: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52728: LD_ADDR_VAR 0 11
52732: PUSH
52733: LD_INT 0
52735: PUSH
52736: LD_INT 0
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: LD_INT 1
52748: NEG
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 1
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: LD_INT 1
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: LD_INT 1
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: NEG
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 1
52797: NEG
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 1
52809: NEG
52810: PUSH
52811: LD_INT 2
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: LD_INT 2
52824: NEG
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 1
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 1
52843: PUSH
52844: LD_INT 2
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: LD_INT 2
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 1
52863: NEG
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: LD_INT 3
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: LD_INT 3
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: LD_INT 2
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52921: LD_ADDR_VAR 0 12
52925: PUSH
52926: LD_INT 0
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: LD_INT 1
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 1
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: LD_INT 1
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: LD_INT 1
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: LD_INT 0
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: PUSH
52992: LD_INT 1
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 1
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 2
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 2
53023: PUSH
53024: LD_INT 1
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 1
53033: NEG
53034: PUSH
53035: LD_INT 1
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 2
53044: NEG
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 2
53055: NEG
53056: PUSH
53057: LD_INT 1
53059: NEG
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 2
53067: NEG
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 3
53078: NEG
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 3
53089: NEG
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53117: LD_ADDR_VAR 0 13
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: LD_INT 0
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: LD_INT 1
53137: NEG
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 1
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 1
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: LD_INT 1
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: NEG
53176: PUSH
53177: LD_INT 0
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: NEG
53187: PUSH
53188: LD_INT 1
53190: NEG
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 1
53198: NEG
53199: PUSH
53200: LD_INT 2
53202: NEG
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 2
53210: PUSH
53211: LD_INT 1
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 2
53220: PUSH
53221: LD_INT 2
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 1
53230: PUSH
53231: LD_INT 2
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 2
53240: NEG
53241: PUSH
53242: LD_INT 1
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 2
53252: NEG
53253: PUSH
53254: LD_INT 2
53256: NEG
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 2
53264: NEG
53265: PUSH
53266: LD_INT 3
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 3
53276: NEG
53277: PUSH
53278: LD_INT 2
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 3
53288: NEG
53289: PUSH
53290: LD_INT 3
53292: NEG
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53316: LD_ADDR_VAR 0 14
53320: PUSH
53321: LD_INT 0
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 0
53333: PUSH
53334: LD_INT 1
53336: NEG
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 1
53344: PUSH
53345: LD_INT 0
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 1
53354: PUSH
53355: LD_INT 1
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: LD_INT 1
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 1
53397: NEG
53398: PUSH
53399: LD_INT 2
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 0
53409: PUSH
53410: LD_INT 2
53412: NEG
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: LD_INT 1
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: LD_INT 2
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: LD_INT 2
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 1
53451: NEG
53452: PUSH
53453: LD_INT 1
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 1
53462: NEG
53463: PUSH
53464: LD_INT 3
53466: NEG
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 0
53474: PUSH
53475: LD_INT 3
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 1
53485: PUSH
53486: LD_INT 2
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53512: LD_ADDR_VAR 0 15
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: LD_INT 0
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 0
53529: PUSH
53530: LD_INT 1
53532: NEG
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 1
53540: PUSH
53541: LD_INT 0
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 1
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 1
53581: NEG
53582: PUSH
53583: LD_INT 1
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: PUSH
53594: LD_INT 1
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 2
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 2
53614: PUSH
53615: LD_INT 1
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 1
53624: NEG
53625: PUSH
53626: LD_INT 1
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 2
53635: NEG
53636: PUSH
53637: LD_INT 0
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 2
53646: NEG
53647: PUSH
53648: LD_INT 1
53650: NEG
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 2
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 3
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 3
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53705: LD_ADDR_VAR 0 16
53709: PUSH
53710: LD_INT 0
53712: PUSH
53713: LD_INT 0
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 0
53722: PUSH
53723: LD_INT 1
53725: NEG
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: LD_INT 0
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 1
53743: PUSH
53744: LD_INT 1
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: LD_INT 1
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 1
53763: NEG
53764: PUSH
53765: LD_INT 0
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 1
53774: NEG
53775: PUSH
53776: LD_INT 1
53778: NEG
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 1
53786: NEG
53787: PUSH
53788: LD_INT 2
53790: NEG
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 2
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 2
53808: PUSH
53809: LD_INT 2
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 1
53818: PUSH
53819: LD_INT 2
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 2
53828: NEG
53829: PUSH
53830: LD_INT 1
53832: NEG
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 2
53840: NEG
53841: PUSH
53842: LD_INT 2
53844: NEG
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 3
53852: PUSH
53853: LD_INT 2
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 3
53862: PUSH
53863: LD_INT 3
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 2
53872: PUSH
53873: LD_INT 3
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53898: LD_ADDR_VAR 0 17
53902: PUSH
53903: LD_INT 0
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 0
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 1
53936: PUSH
53937: LD_INT 1
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 0
53946: PUSH
53947: LD_INT 1
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 1
53956: NEG
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 1
53967: NEG
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 1
53979: NEG
53980: PUSH
53981: LD_INT 2
53983: NEG
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: LD_INT 2
53994: NEG
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 1
54002: PUSH
54003: LD_INT 1
54005: NEG
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 2
54013: PUSH
54014: LD_INT 0
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 2
54023: PUSH
54024: LD_INT 1
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 2
54033: PUSH
54034: LD_INT 2
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 1
54043: PUSH
54044: LD_INT 2
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 0
54053: PUSH
54054: LD_INT 2
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 1
54063: NEG
54064: PUSH
54065: LD_INT 1
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 2
54074: NEG
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 2
54085: NEG
54086: PUSH
54087: LD_INT 1
54089: NEG
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 2
54097: NEG
54098: PUSH
54099: LD_INT 2
54101: NEG
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54128: LD_ADDR_VAR 0 18
54132: PUSH
54133: LD_INT 0
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: LD_INT 1
54148: NEG
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 1
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 1
54166: PUSH
54167: LD_INT 1
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: LD_INT 1
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 1
54186: NEG
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 1
54197: NEG
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: LD_INT 2
54213: NEG
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: LD_INT 2
54224: NEG
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 1
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 2
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 2
54253: PUSH
54254: LD_INT 1
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 2
54263: PUSH
54264: LD_INT 2
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 1
54273: PUSH
54274: LD_INT 2
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: LD_INT 2
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 1
54293: NEG
54294: PUSH
54295: LD_INT 1
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 2
54304: NEG
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 2
54315: NEG
54316: PUSH
54317: LD_INT 1
54319: NEG
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 2
54327: NEG
54328: PUSH
54329: LD_INT 2
54331: NEG
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54358: LD_ADDR_VAR 0 19
54362: PUSH
54363: LD_INT 0
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 1
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 0
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 1
54416: NEG
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: LD_INT 1
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: LD_INT 2
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 0
54451: PUSH
54452: LD_INT 2
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 2
54473: PUSH
54474: LD_INT 0
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 2
54483: PUSH
54484: LD_INT 1
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 2
54493: PUSH
54494: LD_INT 2
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 1
54503: PUSH
54504: LD_INT 2
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: LD_INT 2
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 1
54523: NEG
54524: PUSH
54525: LD_INT 1
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 2
54534: NEG
54535: PUSH
54536: LD_INT 0
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 2
54545: NEG
54546: PUSH
54547: LD_INT 1
54549: NEG
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 2
54557: NEG
54558: PUSH
54559: LD_INT 2
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54588: LD_ADDR_VAR 0 20
54592: PUSH
54593: LD_INT 0
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 0
54605: PUSH
54606: LD_INT 1
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 1
54626: PUSH
54627: LD_INT 1
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: LD_INT 1
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 1
54646: NEG
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 1
54657: NEG
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 1
54669: NEG
54670: PUSH
54671: LD_INT 2
54673: NEG
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: LD_INT 2
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 1
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 2
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 2
54713: PUSH
54714: LD_INT 1
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 2
54723: PUSH
54724: LD_INT 2
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: LD_INT 2
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: LD_INT 2
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: LD_INT 1
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 2
54764: NEG
54765: PUSH
54766: LD_INT 0
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 2
54775: NEG
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 2
54787: NEG
54788: PUSH
54789: LD_INT 2
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54818: LD_ADDR_VAR 0 21
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: LD_INT 1
54838: NEG
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 1
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 1
54856: PUSH
54857: LD_INT 1
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: LD_INT 1
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: LD_INT 0
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 1
54887: NEG
54888: PUSH
54889: LD_INT 1
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 1
54899: NEG
54900: PUSH
54901: LD_INT 2
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: LD_INT 2
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 1
54922: PUSH
54923: LD_INT 1
54925: NEG
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 2
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 2
54943: PUSH
54944: LD_INT 1
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 2
54953: PUSH
54954: LD_INT 2
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 1
54963: PUSH
54964: LD_INT 2
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: LD_INT 2
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 1
54983: NEG
54984: PUSH
54985: LD_INT 1
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 2
54994: NEG
54995: PUSH
54996: LD_INT 0
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 2
55005: NEG
55006: PUSH
55007: LD_INT 1
55009: NEG
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 2
55017: NEG
55018: PUSH
55019: LD_INT 2
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55048: LD_ADDR_VAR 0 22
55052: PUSH
55053: LD_INT 0
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 0
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 1
55076: PUSH
55077: LD_INT 0
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 1
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: LD_INT 1
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 1
55117: NEG
55118: PUSH
55119: LD_INT 1
55121: NEG
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 1
55129: NEG
55130: PUSH
55131: LD_INT 2
55133: NEG
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 0
55141: PUSH
55142: LD_INT 2
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 1
55152: PUSH
55153: LD_INT 1
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 2
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 2
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 2
55183: PUSH
55184: LD_INT 2
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 1
55193: PUSH
55194: LD_INT 2
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: LD_INT 2
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: LD_INT 1
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 2
55224: NEG
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 2
55235: NEG
55236: PUSH
55237: LD_INT 1
55239: NEG
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 2
55247: NEG
55248: PUSH
55249: LD_INT 2
55251: NEG
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55278: LD_ADDR_VAR 0 23
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 0
55295: PUSH
55296: LD_INT 1
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 1
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: LD_INT 1
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: LD_INT 2
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: LD_INT 2
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: PUSH
55383: LD_INT 1
55385: NEG
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 2
55393: PUSH
55394: LD_INT 0
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 2
55403: PUSH
55404: LD_INT 1
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 2
55413: PUSH
55414: LD_INT 2
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: LD_INT 2
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: LD_INT 2
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: LD_INT 1
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 2
55454: NEG
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 2
55465: NEG
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 2
55477: NEG
55478: PUSH
55479: LD_INT 2
55481: NEG
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 2
55489: NEG
55490: PUSH
55491: LD_INT 3
55493: NEG
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 1
55501: NEG
55502: PUSH
55503: LD_INT 3
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: PUSH
55514: LD_INT 2
55516: NEG
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 2
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55558: LD_ADDR_VAR 0 24
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: LD_INT 1
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 1
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 0
55606: PUSH
55607: LD_INT 1
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 1
55616: NEG
55617: PUSH
55618: LD_INT 0
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 1
55627: NEG
55628: PUSH
55629: LD_INT 1
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 1
55639: NEG
55640: PUSH
55641: LD_INT 2
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: LD_INT 2
55654: NEG
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: LD_INT 1
55665: NEG
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 2
55673: PUSH
55674: LD_INT 0
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 2
55683: PUSH
55684: LD_INT 1
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 2
55693: PUSH
55694: LD_INT 2
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: LD_INT 2
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 0
55713: PUSH
55714: LD_INT 2
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 1
55723: NEG
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 2
55734: NEG
55735: PUSH
55736: LD_INT 0
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 2
55745: NEG
55746: PUSH
55747: LD_INT 1
55749: NEG
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 2
55757: NEG
55758: PUSH
55759: LD_INT 2
55761: NEG
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: PUSH
55770: LD_INT 2
55772: NEG
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 2
55780: PUSH
55781: LD_INT 1
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 3
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 3
55801: PUSH
55802: LD_INT 2
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55834: LD_ADDR_VAR 0 25
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: LD_INT 0
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: LD_INT 1
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 1
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 1
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 0
55882: PUSH
55883: LD_INT 1
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 1
55892: NEG
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 1
55903: NEG
55904: PUSH
55905: LD_INT 1
55907: NEG
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 1
55915: NEG
55916: PUSH
55917: LD_INT 2
55919: NEG
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 0
55927: PUSH
55928: LD_INT 2
55930: NEG
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: LD_INT 1
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 2
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 2
55959: PUSH
55960: LD_INT 1
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 2
55969: PUSH
55970: LD_INT 2
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: PUSH
55980: LD_INT 2
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: LD_INT 2
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 1
55999: NEG
56000: PUSH
56001: LD_INT 1
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 2
56010: NEG
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 2
56021: NEG
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 2
56033: NEG
56034: PUSH
56035: LD_INT 2
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 3
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 3
56055: PUSH
56056: LD_INT 2
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 2
56065: PUSH
56066: LD_INT 3
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 1
56075: PUSH
56076: LD_INT 3
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56108: LD_ADDR_VAR 0 26
56112: PUSH
56113: LD_INT 0
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: LD_INT 1
56128: NEG
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: LD_INT 0
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 1
56146: PUSH
56147: LD_INT 1
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 0
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 1
56177: NEG
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: NEG
56190: PUSH
56191: LD_INT 2
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: LD_INT 2
56204: NEG
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: LD_INT 1
56215: NEG
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 2
56223: PUSH
56224: LD_INT 0
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 2
56233: PUSH
56234: LD_INT 1
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 2
56243: PUSH
56244: LD_INT 2
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 1
56253: PUSH
56254: LD_INT 2
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: LD_INT 2
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 1
56273: NEG
56274: PUSH
56275: LD_INT 1
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 2
56284: NEG
56285: PUSH
56286: LD_INT 0
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 2
56295: NEG
56296: PUSH
56297: LD_INT 1
56299: NEG
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 2
56307: NEG
56308: PUSH
56309: LD_INT 2
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 2
56319: PUSH
56320: LD_INT 3
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 1
56329: PUSH
56330: LD_INT 3
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: PUSH
56341: LD_INT 2
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 2
56350: NEG
56351: PUSH
56352: LD_INT 1
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56384: LD_ADDR_VAR 0 27
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: LD_INT 0
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 0
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 1
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 1
56422: PUSH
56423: LD_INT 1
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: LD_INT 1
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: NEG
56443: PUSH
56444: LD_INT 0
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: LD_INT 1
56457: NEG
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 1
56465: NEG
56466: PUSH
56467: LD_INT 2
56469: NEG
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: LD_INT 2
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 1
56488: PUSH
56489: LD_INT 1
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 2
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 2
56509: PUSH
56510: LD_INT 1
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 2
56519: PUSH
56520: LD_INT 2
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 1
56529: PUSH
56530: LD_INT 2
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: LD_INT 2
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: LD_INT 1
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 2
56560: NEG
56561: PUSH
56562: LD_INT 0
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 2
56571: NEG
56572: PUSH
56573: LD_INT 1
56575: NEG
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 2
56583: NEG
56584: PUSH
56585: LD_INT 2
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 1
56595: NEG
56596: PUSH
56597: LD_INT 2
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 2
56606: NEG
56607: PUSH
56608: LD_INT 1
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 3
56617: NEG
56618: PUSH
56619: LD_INT 1
56621: NEG
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 3
56629: NEG
56630: PUSH
56631: LD_INT 2
56633: NEG
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56664: LD_ADDR_VAR 0 28
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 0
56681: PUSH
56682: LD_INT 1
56684: NEG
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 1
56692: PUSH
56693: LD_INT 0
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: LD_INT 1
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 0
56712: PUSH
56713: LD_INT 1
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 1
56722: NEG
56723: PUSH
56724: LD_INT 0
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: NEG
56734: PUSH
56735: LD_INT 1
56737: NEG
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 1
56745: NEG
56746: PUSH
56747: LD_INT 2
56749: NEG
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 0
56757: PUSH
56758: LD_INT 2
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 1
56768: PUSH
56769: LD_INT 1
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 2
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 2
56789: PUSH
56790: LD_INT 1
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 2
56799: PUSH
56800: LD_INT 2
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 1
56809: PUSH
56810: LD_INT 2
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: LD_INT 2
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 1
56829: NEG
56830: PUSH
56831: LD_INT 1
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 2
56840: NEG
56841: PUSH
56842: LD_INT 0
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 2
56851: NEG
56852: PUSH
56853: LD_INT 1
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 2
56863: NEG
56864: PUSH
56865: LD_INT 2
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 2
56875: NEG
56876: PUSH
56877: LD_INT 3
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: NEG
56888: PUSH
56889: LD_INT 3
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 3
56899: NEG
56900: PUSH
56901: LD_INT 1
56903: NEG
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 3
56911: NEG
56912: PUSH
56913: LD_INT 2
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56946: LD_ADDR_VAR 0 29
56950: PUSH
56951: LD_INT 0
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 0
56963: PUSH
56964: LD_INT 1
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 1
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 1
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: LD_INT 1
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 1
57004: NEG
57005: PUSH
57006: LD_INT 0
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 1
57015: NEG
57016: PUSH
57017: LD_INT 1
57019: NEG
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: LD_INT 2
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 0
57039: PUSH
57040: LD_INT 2
57042: NEG
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 1
57050: PUSH
57051: LD_INT 1
57053: NEG
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 2
57061: PUSH
57062: LD_INT 0
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 2
57071: PUSH
57072: LD_INT 1
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: LD_INT 2
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: LD_INT 2
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 1
57101: NEG
57102: PUSH
57103: LD_INT 1
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 2
57112: NEG
57113: PUSH
57114: LD_INT 1
57116: NEG
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 2
57124: NEG
57125: PUSH
57126: LD_INT 2
57128: NEG
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 2
57136: NEG
57137: PUSH
57138: LD_INT 3
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 2
57148: PUSH
57149: LD_INT 1
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 3
57159: PUSH
57160: LD_INT 1
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 1
57169: PUSH
57170: LD_INT 3
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 1
57179: NEG
57180: PUSH
57181: LD_INT 2
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 3
57190: NEG
57191: PUSH
57192: LD_INT 2
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57225: LD_ADDR_VAR 0 30
57229: PUSH
57230: LD_INT 0
57232: PUSH
57233: LD_INT 0
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 0
57242: PUSH
57243: LD_INT 1
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 1
57253: PUSH
57254: LD_INT 0
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 1
57263: PUSH
57264: LD_INT 1
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 0
57273: PUSH
57274: LD_INT 1
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 1
57283: NEG
57284: PUSH
57285: LD_INT 0
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 1
57294: NEG
57295: PUSH
57296: LD_INT 1
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 1
57306: NEG
57307: PUSH
57308: LD_INT 2
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 0
57318: PUSH
57319: LD_INT 2
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 1
57329: PUSH
57330: LD_INT 1
57332: NEG
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 2
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 2
57350: PUSH
57351: LD_INT 1
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 2
57360: PUSH
57361: LD_INT 2
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 1
57370: PUSH
57371: LD_INT 2
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 1
57380: NEG
57381: PUSH
57382: LD_INT 1
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 2
57391: NEG
57392: PUSH
57393: LD_INT 0
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 2
57402: NEG
57403: PUSH
57404: LD_INT 1
57406: NEG
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 1
57414: NEG
57415: PUSH
57416: LD_INT 3
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: LD_INT 2
57429: NEG
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 3
57437: PUSH
57438: LD_INT 2
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 2
57447: PUSH
57448: LD_INT 3
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 2
57457: NEG
57458: PUSH
57459: LD_INT 1
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 3
57468: NEG
57469: PUSH
57470: LD_INT 1
57472: NEG
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57503: LD_ADDR_VAR 0 31
57507: PUSH
57508: LD_INT 0
57510: PUSH
57511: LD_INT 0
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: LD_INT 1
57523: NEG
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 1
57531: PUSH
57532: LD_INT 0
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 1
57541: PUSH
57542: LD_INT 1
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 0
57551: PUSH
57552: LD_INT 1
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 1
57561: NEG
57562: PUSH
57563: LD_INT 0
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 1
57572: NEG
57573: PUSH
57574: LD_INT 1
57576: NEG
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: NEG
57585: PUSH
57586: LD_INT 2
57588: NEG
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 1
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 2
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 2
57617: PUSH
57618: LD_INT 1
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 2
57627: PUSH
57628: LD_INT 2
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 1
57637: PUSH
57638: LD_INT 2
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 0
57647: PUSH
57648: LD_INT 2
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 1
57657: NEG
57658: PUSH
57659: LD_INT 1
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 2
57668: NEG
57669: PUSH
57670: LD_INT 1
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 2
57680: NEG
57681: PUSH
57682: LD_INT 2
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 2
57692: NEG
57693: PUSH
57694: LD_INT 3
57696: NEG
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 2
57704: PUSH
57705: LD_INT 1
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 3
57715: PUSH
57716: LD_INT 1
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 1
57725: PUSH
57726: LD_INT 3
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 1
57735: NEG
57736: PUSH
57737: LD_INT 2
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 3
57746: NEG
57747: PUSH
57748: LD_INT 2
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57781: LD_ADDR_VAR 0 32
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: LD_INT 0
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 0
57798: PUSH
57799: LD_INT 1
57801: NEG
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 1
57819: PUSH
57820: LD_INT 1
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 0
57829: PUSH
57830: LD_INT 1
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: LD_INT 0
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 1
57850: NEG
57851: PUSH
57852: LD_INT 1
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 1
57862: NEG
57863: PUSH
57864: LD_INT 2
57866: NEG
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: LD_INT 2
57877: NEG
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: LD_INT 1
57888: NEG
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 2
57896: PUSH
57897: LD_INT 1
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 2
57906: PUSH
57907: LD_INT 2
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 1
57916: PUSH
57917: LD_INT 2
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 0
57926: PUSH
57927: LD_INT 2
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 1
57936: NEG
57937: PUSH
57938: LD_INT 1
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 2
57947: NEG
57948: PUSH
57949: LD_INT 0
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 2
57958: NEG
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 1
57970: NEG
57971: PUSH
57972: LD_INT 3
57974: NEG
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 1
57982: PUSH
57983: LD_INT 2
57985: NEG
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 3
57993: PUSH
57994: LD_INT 2
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 2
58003: PUSH
58004: LD_INT 3
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 2
58013: NEG
58014: PUSH
58015: LD_INT 1
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 3
58024: NEG
58025: PUSH
58026: LD_INT 1
58028: NEG
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58059: LD_ADDR_VAR 0 33
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: LD_INT 0
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 0
58076: PUSH
58077: LD_INT 1
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 1
58087: PUSH
58088: LD_INT 0
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 1
58097: PUSH
58098: LD_INT 1
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 0
58107: PUSH
58108: LD_INT 1
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 1
58117: NEG
58118: PUSH
58119: LD_INT 0
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 1
58128: NEG
58129: PUSH
58130: LD_INT 1
58132: NEG
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 1
58140: NEG
58141: PUSH
58142: LD_INT 2
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 1
58152: PUSH
58153: LD_INT 1
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 2
58163: PUSH
58164: LD_INT 0
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 2
58173: PUSH
58174: LD_INT 1
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 1
58183: PUSH
58184: LD_INT 2
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 0
58193: PUSH
58194: LD_INT 2
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 1
58203: NEG
58204: PUSH
58205: LD_INT 1
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 2
58214: NEG
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 2
58225: NEG
58226: PUSH
58227: LD_INT 1
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 2
58237: NEG
58238: PUSH
58239: LD_INT 2
58241: NEG
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 2
58249: NEG
58250: PUSH
58251: LD_INT 3
58253: NEG
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 2
58261: PUSH
58262: LD_INT 1
58264: NEG
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 3
58272: PUSH
58273: LD_INT 1
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 1
58282: PUSH
58283: LD_INT 3
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 1
58292: NEG
58293: PUSH
58294: LD_INT 2
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 3
58303: NEG
58304: PUSH
58305: LD_INT 2
58307: NEG
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58338: LD_ADDR_VAR 0 34
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 0
58355: PUSH
58356: LD_INT 1
58358: NEG
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 1
58376: PUSH
58377: LD_INT 1
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 0
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: PUSH
58398: LD_INT 0
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 1
58407: NEG
58408: PUSH
58409: LD_INT 1
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 1
58419: NEG
58420: PUSH
58421: LD_INT 2
58423: NEG
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 0
58431: PUSH
58432: LD_INT 2
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 1
58442: PUSH
58443: LD_INT 1
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 2
58453: PUSH
58454: LD_INT 1
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 2
58463: PUSH
58464: LD_INT 2
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: LD_INT 2
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 1
58483: NEG
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 2
58494: NEG
58495: PUSH
58496: LD_INT 0
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 2
58505: NEG
58506: PUSH
58507: LD_INT 1
58509: NEG
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 2
58517: NEG
58518: PUSH
58519: LD_INT 2
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 1
58529: NEG
58530: PUSH
58531: LD_INT 3
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: LD_INT 2
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 3
58552: PUSH
58553: LD_INT 2
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 2
58562: PUSH
58563: LD_INT 3
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 2
58572: NEG
58573: PUSH
58574: LD_INT 1
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 3
58583: NEG
58584: PUSH
58585: LD_INT 1
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58618: LD_ADDR_VAR 0 35
58622: PUSH
58623: LD_INT 0
58625: PUSH
58626: LD_INT 0
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 0
58635: PUSH
58636: LD_INT 1
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 1
58646: PUSH
58647: LD_INT 0
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 1
58656: PUSH
58657: LD_INT 1
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 0
58666: PUSH
58667: LD_INT 1
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 1
58676: NEG
58677: PUSH
58678: LD_INT 0
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 1
58687: NEG
58688: PUSH
58689: LD_INT 1
58691: NEG
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 2
58699: PUSH
58700: LD_INT 1
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 2
58709: NEG
58710: PUSH
58711: LD_INT 1
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58730: LD_ADDR_VAR 0 36
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: LD_INT 0
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 0
58747: PUSH
58748: LD_INT 1
58750: NEG
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 1
58758: PUSH
58759: LD_INT 0
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 1
58768: PUSH
58769: LD_INT 1
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 0
58778: PUSH
58779: LD_INT 1
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 1
58788: NEG
58789: PUSH
58790: LD_INT 0
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 1
58799: NEG
58800: PUSH
58801: LD_INT 1
58803: NEG
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 1
58811: NEG
58812: PUSH
58813: LD_INT 2
58815: NEG
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 1
58823: PUSH
58824: LD_INT 2
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58842: LD_ADDR_VAR 0 37
58846: PUSH
58847: LD_INT 0
58849: PUSH
58850: LD_INT 0
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 0
58859: PUSH
58860: LD_INT 1
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 1
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 0
58890: PUSH
58891: LD_INT 1
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 1
58900: NEG
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 1
58911: NEG
58912: PUSH
58913: LD_INT 1
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 1
58923: PUSH
58924: LD_INT 1
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 1
58934: NEG
58935: PUSH
58936: LD_INT 1
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58954: LD_ADDR_VAR 0 38
58958: PUSH
58959: LD_INT 0
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 0
58971: PUSH
58972: LD_INT 1
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 1
58982: PUSH
58983: LD_INT 0
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 1
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 0
59002: PUSH
59003: LD_INT 1
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: LD_INT 0
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 1
59023: NEG
59024: PUSH
59025: LD_INT 1
59027: NEG
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 2
59035: PUSH
59036: LD_INT 1
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 2
59045: NEG
59046: PUSH
59047: LD_INT 1
59049: NEG
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59066: LD_ADDR_VAR 0 39
59070: PUSH
59071: LD_INT 0
59073: PUSH
59074: LD_INT 0
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 0
59083: PUSH
59084: LD_INT 1
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 1
59104: PUSH
59105: LD_INT 1
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: LD_INT 1
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 1
59124: NEG
59125: PUSH
59126: LD_INT 0
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 1
59135: NEG
59136: PUSH
59137: LD_INT 1
59139: NEG
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 1
59147: NEG
59148: PUSH
59149: LD_INT 2
59151: NEG
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 1
59159: PUSH
59160: LD_INT 2
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59178: LD_ADDR_VAR 0 40
59182: PUSH
59183: LD_INT 0
59185: PUSH
59186: LD_INT 0
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 0
59195: PUSH
59196: LD_INT 1
59198: NEG
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 1
59206: PUSH
59207: LD_INT 0
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 1
59216: PUSH
59217: LD_INT 1
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 0
59226: PUSH
59227: LD_INT 1
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 1
59236: NEG
59237: PUSH
59238: LD_INT 0
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 1
59247: NEG
59248: PUSH
59249: LD_INT 1
59251: NEG
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 1
59259: PUSH
59260: LD_INT 1
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 1
59270: NEG
59271: PUSH
59272: LD_INT 1
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59290: LD_ADDR_VAR 0 41
59294: PUSH
59295: LD_INT 0
59297: PUSH
59298: LD_INT 0
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 0
59307: PUSH
59308: LD_INT 1
59310: NEG
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 1
59318: PUSH
59319: LD_INT 0
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 1
59328: PUSH
59329: LD_INT 1
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 0
59338: PUSH
59339: LD_INT 1
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 1
59348: NEG
59349: PUSH
59350: LD_INT 0
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 1
59359: NEG
59360: PUSH
59361: LD_INT 1
59363: NEG
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 1
59371: NEG
59372: PUSH
59373: LD_INT 2
59375: NEG
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 1
59383: PUSH
59384: LD_INT 1
59386: NEG
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 2
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 2
59404: PUSH
59405: LD_INT 1
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 2
59414: PUSH
59415: LD_INT 2
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 1
59424: PUSH
59425: LD_INT 2
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 1
59434: NEG
59435: PUSH
59436: LD_INT 1
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 2
59445: NEG
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 2
59456: NEG
59457: PUSH
59458: LD_INT 1
59460: NEG
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 2
59468: NEG
59469: PUSH
59470: LD_INT 2
59472: NEG
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 2
59480: NEG
59481: PUSH
59482: LD_INT 3
59484: NEG
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 2
59492: PUSH
59493: LD_INT 1
59495: NEG
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 3
59503: PUSH
59504: LD_INT 0
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 3
59513: PUSH
59514: LD_INT 1
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 3
59523: PUSH
59524: LD_INT 2
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 3
59533: PUSH
59534: LD_INT 3
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 2
59543: PUSH
59544: LD_INT 3
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 2
59553: NEG
59554: PUSH
59555: LD_INT 1
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 3
59564: NEG
59565: PUSH
59566: LD_INT 0
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 3
59575: NEG
59576: PUSH
59577: LD_INT 1
59579: NEG
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 3
59587: NEG
59588: PUSH
59589: LD_INT 2
59591: NEG
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 3
59599: NEG
59600: PUSH
59601: LD_INT 3
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59640: LD_ADDR_VAR 0 42
59644: PUSH
59645: LD_INT 0
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: LD_INT 1
59660: NEG
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 1
59668: PUSH
59669: LD_INT 0
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 1
59678: PUSH
59679: LD_INT 1
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 0
59688: PUSH
59689: LD_INT 1
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 1
59698: NEG
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 1
59709: NEG
59710: PUSH
59711: LD_INT 1
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 1
59721: NEG
59722: PUSH
59723: LD_INT 2
59725: NEG
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: LD_INT 2
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 1
59744: PUSH
59745: LD_INT 1
59747: NEG
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 2
59755: PUSH
59756: LD_INT 1
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 2
59765: PUSH
59766: LD_INT 2
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 1
59775: PUSH
59776: LD_INT 2
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 0
59785: PUSH
59786: LD_INT 2
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 1
59795: NEG
59796: PUSH
59797: LD_INT 1
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 2
59806: NEG
59807: PUSH
59808: LD_INT 1
59810: NEG
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 2
59818: NEG
59819: PUSH
59820: LD_INT 2
59822: NEG
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 2
59830: NEG
59831: PUSH
59832: LD_INT 3
59834: NEG
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 1
59842: NEG
59843: PUSH
59844: LD_INT 3
59846: NEG
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 0
59854: PUSH
59855: LD_INT 3
59857: NEG
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 1
59865: PUSH
59866: LD_INT 2
59868: NEG
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 3
59876: PUSH
59877: LD_INT 2
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 3
59886: PUSH
59887: LD_INT 3
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 2
59896: PUSH
59897: LD_INT 3
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 1
59906: PUSH
59907: LD_INT 3
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 0
59916: PUSH
59917: LD_INT 3
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 1
59926: NEG
59927: PUSH
59928: LD_INT 2
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 3
59937: NEG
59938: PUSH
59939: LD_INT 2
59941: NEG
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 3
59949: NEG
59950: PUSH
59951: LD_INT 3
59953: NEG
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59990: LD_ADDR_VAR 0 43
59994: PUSH
59995: LD_INT 0
59997: PUSH
59998: LD_INT 0
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 0
60007: PUSH
60008: LD_INT 1
60010: NEG
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 1
60018: PUSH
60019: LD_INT 0
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 1
60028: PUSH
60029: LD_INT 1
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 0
60038: PUSH
60039: LD_INT 1
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 1
60048: NEG
60049: PUSH
60050: LD_INT 0
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 1
60059: NEG
60060: PUSH
60061: LD_INT 1
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 1
60071: NEG
60072: PUSH
60073: LD_INT 2
60075: NEG
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 0
60083: PUSH
60084: LD_INT 2
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 1
60094: PUSH
60095: LD_INT 1
60097: NEG
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 2
60105: PUSH
60106: LD_INT 0
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 2
60115: PUSH
60116: LD_INT 1
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 1
60125: PUSH
60126: LD_INT 2
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 0
60135: PUSH
60136: LD_INT 2
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 1
60145: NEG
60146: PUSH
60147: LD_INT 1
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 2
60156: NEG
60157: PUSH
60158: LD_INT 0
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 2
60167: NEG
60168: PUSH
60169: LD_INT 1
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 1
60179: NEG
60180: PUSH
60181: LD_INT 3
60183: NEG
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 0
60191: PUSH
60192: LD_INT 3
60194: NEG
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 1
60202: PUSH
60203: LD_INT 2
60205: NEG
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 2
60213: PUSH
60214: LD_INT 1
60216: NEG
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 3
60224: PUSH
60225: LD_INT 0
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 3
60234: PUSH
60235: LD_INT 1
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 1
60244: PUSH
60245: LD_INT 3
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 0
60254: PUSH
60255: LD_INT 3
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 1
60264: NEG
60265: PUSH
60266: LD_INT 2
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 2
60275: NEG
60276: PUSH
60277: LD_INT 1
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 3
60286: NEG
60287: PUSH
60288: LD_INT 0
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 3
60297: NEG
60298: PUSH
60299: LD_INT 1
60301: NEG
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60338: LD_ADDR_VAR 0 44
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: LD_INT 0
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 0
60355: PUSH
60356: LD_INT 1
60358: NEG
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 1
60366: PUSH
60367: LD_INT 0
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 1
60376: PUSH
60377: LD_INT 1
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 0
60386: PUSH
60387: LD_INT 1
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 1
60396: NEG
60397: PUSH
60398: LD_INT 0
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 1
60407: NEG
60408: PUSH
60409: LD_INT 1
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 1
60419: NEG
60420: PUSH
60421: LD_INT 2
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 1
60431: PUSH
60432: LD_INT 1
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 2
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 2
60452: PUSH
60453: LD_INT 1
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 2
60462: PUSH
60463: LD_INT 2
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 1
60472: PUSH
60473: LD_INT 2
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 1
60482: NEG
60483: PUSH
60484: LD_INT 1
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 2
60493: NEG
60494: PUSH
60495: LD_INT 0
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 2
60504: NEG
60505: PUSH
60506: LD_INT 1
60508: NEG
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 2
60516: NEG
60517: PUSH
60518: LD_INT 2
60520: NEG
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 2
60528: NEG
60529: PUSH
60530: LD_INT 3
60532: NEG
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 2
60540: PUSH
60541: LD_INT 1
60543: NEG
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 3
60551: PUSH
60552: LD_INT 0
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 3
60561: PUSH
60562: LD_INT 1
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 3
60571: PUSH
60572: LD_INT 2
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 3
60581: PUSH
60582: LD_INT 3
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 2
60591: PUSH
60592: LD_INT 3
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 2
60601: NEG
60602: PUSH
60603: LD_INT 1
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 3
60612: NEG
60613: PUSH
60614: LD_INT 0
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 3
60623: NEG
60624: PUSH
60625: LD_INT 1
60627: NEG
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 3
60635: NEG
60636: PUSH
60637: LD_INT 2
60639: NEG
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 3
60647: NEG
60648: PUSH
60649: LD_INT 3
60651: NEG
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60688: LD_ADDR_VAR 0 45
60692: PUSH
60693: LD_INT 0
60695: PUSH
60696: LD_INT 0
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: LD_INT 1
60708: NEG
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 1
60716: PUSH
60717: LD_INT 0
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 1
60726: PUSH
60727: LD_INT 1
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 0
60736: PUSH
60737: LD_INT 1
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 1
60746: NEG
60747: PUSH
60748: LD_INT 0
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 1
60757: NEG
60758: PUSH
60759: LD_INT 1
60761: NEG
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 1
60769: NEG
60770: PUSH
60771: LD_INT 2
60773: NEG
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 0
60781: PUSH
60782: LD_INT 2
60784: NEG
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 1
60792: PUSH
60793: LD_INT 1
60795: NEG
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 2
60803: PUSH
60804: LD_INT 1
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 2
60813: PUSH
60814: LD_INT 2
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 1
60823: PUSH
60824: LD_INT 2
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 0
60833: PUSH
60834: LD_INT 2
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 1
60843: NEG
60844: PUSH
60845: LD_INT 1
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 2
60854: NEG
60855: PUSH
60856: LD_INT 1
60858: NEG
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 2
60866: NEG
60867: PUSH
60868: LD_INT 2
60870: NEG
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 2
60878: NEG
60879: PUSH
60880: LD_INT 3
60882: NEG
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 1
60890: NEG
60891: PUSH
60892: LD_INT 3
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 0
60902: PUSH
60903: LD_INT 3
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 1
60913: PUSH
60914: LD_INT 2
60916: NEG
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 3
60924: PUSH
60925: LD_INT 2
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 3
60934: PUSH
60935: LD_INT 3
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 2
60944: PUSH
60945: LD_INT 3
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 1
60954: PUSH
60955: LD_INT 3
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 0
60964: PUSH
60965: LD_INT 3
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 1
60974: NEG
60975: PUSH
60976: LD_INT 2
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 3
60985: NEG
60986: PUSH
60987: LD_INT 2
60989: NEG
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 3
60997: NEG
60998: PUSH
60999: LD_INT 3
61001: NEG
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61038: LD_ADDR_VAR 0 46
61042: PUSH
61043: LD_INT 0
61045: PUSH
61046: LD_INT 0
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 0
61055: PUSH
61056: LD_INT 1
61058: NEG
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 1
61066: PUSH
61067: LD_INT 0
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 1
61076: PUSH
61077: LD_INT 1
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 0
61086: PUSH
61087: LD_INT 1
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 1
61096: NEG
61097: PUSH
61098: LD_INT 0
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 1
61107: NEG
61108: PUSH
61109: LD_INT 1
61111: NEG
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 1
61119: NEG
61120: PUSH
61121: LD_INT 2
61123: NEG
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 0
61131: PUSH
61132: LD_INT 2
61134: NEG
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 1
61142: PUSH
61143: LD_INT 1
61145: NEG
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 2
61153: PUSH
61154: LD_INT 0
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 2
61163: PUSH
61164: LD_INT 1
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 1
61173: PUSH
61174: LD_INT 2
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 0
61183: PUSH
61184: LD_INT 2
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 1
61193: NEG
61194: PUSH
61195: LD_INT 1
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 2
61204: NEG
61205: PUSH
61206: LD_INT 0
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 2
61215: NEG
61216: PUSH
61217: LD_INT 1
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 1
61227: NEG
61228: PUSH
61229: LD_INT 3
61231: NEG
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 0
61239: PUSH
61240: LD_INT 3
61242: NEG
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 1
61250: PUSH
61251: LD_INT 2
61253: NEG
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 2
61261: PUSH
61262: LD_INT 1
61264: NEG
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 3
61272: PUSH
61273: LD_INT 0
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 3
61282: PUSH
61283: LD_INT 1
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 1
61292: PUSH
61293: LD_INT 3
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 0
61302: PUSH
61303: LD_INT 3
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 1
61312: NEG
61313: PUSH
61314: LD_INT 2
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 2
61323: NEG
61324: PUSH
61325: LD_INT 1
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 3
61334: NEG
61335: PUSH
61336: LD_INT 0
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 3
61345: NEG
61346: PUSH
61347: LD_INT 1
61349: NEG
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61386: LD_ADDR_VAR 0 47
61390: PUSH
61391: LD_INT 0
61393: PUSH
61394: LD_INT 0
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 0
61403: PUSH
61404: LD_INT 1
61406: NEG
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 1
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 1
61424: PUSH
61425: LD_INT 1
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 0
61434: PUSH
61435: LD_INT 1
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 1
61444: NEG
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 1
61455: NEG
61456: PUSH
61457: LD_INT 1
61459: NEG
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 1
61467: NEG
61468: PUSH
61469: LD_INT 2
61471: NEG
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 0
61479: PUSH
61480: LD_INT 2
61482: NEG
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 1
61490: PUSH
61491: LD_INT 1
61493: NEG
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 2
61501: NEG
61502: PUSH
61503: LD_INT 1
61505: NEG
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 2
61513: NEG
61514: PUSH
61515: LD_INT 2
61517: NEG
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61537: LD_ADDR_VAR 0 48
61541: PUSH
61542: LD_INT 0
61544: PUSH
61545: LD_INT 0
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 0
61554: PUSH
61555: LD_INT 1
61557: NEG
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 1
61565: PUSH
61566: LD_INT 0
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 1
61575: PUSH
61576: LD_INT 1
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 0
61585: PUSH
61586: LD_INT 1
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 1
61595: NEG
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 1
61606: NEG
61607: PUSH
61608: LD_INT 1
61610: NEG
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 1
61618: NEG
61619: PUSH
61620: LD_INT 2
61622: NEG
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 0
61630: PUSH
61631: LD_INT 2
61633: NEG
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 1
61641: PUSH
61642: LD_INT 1
61644: NEG
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 2
61652: PUSH
61653: LD_INT 0
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 2
61662: PUSH
61663: LD_INT 1
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61684: LD_ADDR_VAR 0 49
61688: PUSH
61689: LD_INT 0
61691: PUSH
61692: LD_INT 0
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 0
61701: PUSH
61702: LD_INT 1
61704: NEG
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 1
61712: PUSH
61713: LD_INT 0
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 1
61722: PUSH
61723: LD_INT 1
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 0
61732: PUSH
61733: LD_INT 1
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 1
61742: NEG
61743: PUSH
61744: LD_INT 0
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 1
61753: NEG
61754: PUSH
61755: LD_INT 1
61757: NEG
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 1
61765: PUSH
61766: LD_INT 1
61768: NEG
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 2
61776: PUSH
61777: LD_INT 0
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 2
61786: PUSH
61787: LD_INT 1
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 2
61796: PUSH
61797: LD_INT 2
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 1
61806: PUSH
61807: LD_INT 2
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61828: LD_ADDR_VAR 0 50
61832: PUSH
61833: LD_INT 0
61835: PUSH
61836: LD_INT 0
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 0
61845: PUSH
61846: LD_INT 1
61848: NEG
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 1
61856: PUSH
61857: LD_INT 0
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 1
61866: PUSH
61867: LD_INT 1
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 0
61876: PUSH
61877: LD_INT 1
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 1
61886: NEG
61887: PUSH
61888: LD_INT 0
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 1
61897: NEG
61898: PUSH
61899: LD_INT 1
61901: NEG
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 2
61909: PUSH
61910: LD_INT 1
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 2
61919: PUSH
61920: LD_INT 2
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 1
61929: PUSH
61930: LD_INT 2
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 0
61939: PUSH
61940: LD_INT 2
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 1
61949: NEG
61950: PUSH
61951: LD_INT 1
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61972: LD_ADDR_VAR 0 51
61976: PUSH
61977: LD_INT 0
61979: PUSH
61980: LD_INT 0
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: LD_INT 1
61992: NEG
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 1
62000: PUSH
62001: LD_INT 0
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 1
62010: PUSH
62011: LD_INT 1
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 0
62020: PUSH
62021: LD_INT 1
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 1
62030: NEG
62031: PUSH
62032: LD_INT 0
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 1
62041: NEG
62042: PUSH
62043: LD_INT 1
62045: NEG
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 1
62053: PUSH
62054: LD_INT 2
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 0
62063: PUSH
62064: LD_INT 2
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 1
62073: NEG
62074: PUSH
62075: LD_INT 1
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 2
62084: NEG
62085: PUSH
62086: LD_INT 0
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 2
62095: NEG
62096: PUSH
62097: LD_INT 1
62099: NEG
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62119: LD_ADDR_VAR 0 52
62123: PUSH
62124: LD_INT 0
62126: PUSH
62127: LD_INT 0
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 0
62136: PUSH
62137: LD_INT 1
62139: NEG
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 1
62147: PUSH
62148: LD_INT 0
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 1
62157: PUSH
62158: LD_INT 1
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 0
62167: PUSH
62168: LD_INT 1
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 1
62177: NEG
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 1
62188: NEG
62189: PUSH
62190: LD_INT 1
62192: NEG
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 1
62200: NEG
62201: PUSH
62202: LD_INT 2
62204: NEG
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 1
62212: NEG
62213: PUSH
62214: LD_INT 1
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 2
62223: NEG
62224: PUSH
62225: LD_INT 0
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 2
62234: NEG
62235: PUSH
62236: LD_INT 1
62238: NEG
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 2
62246: NEG
62247: PUSH
62248: LD_INT 2
62250: NEG
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62270: LD_ADDR_VAR 0 53
62274: PUSH
62275: LD_INT 0
62277: PUSH
62278: LD_INT 0
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: LD_INT 1
62290: NEG
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 1
62298: PUSH
62299: LD_INT 0
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 1
62308: PUSH
62309: LD_INT 1
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 0
62318: PUSH
62319: LD_INT 1
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 1
62328: NEG
62329: PUSH
62330: LD_INT 0
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 1
62339: NEG
62340: PUSH
62341: LD_INT 1
62343: NEG
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 1
62351: NEG
62352: PUSH
62353: LD_INT 2
62355: NEG
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 0
62363: PUSH
62364: LD_INT 2
62366: NEG
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 1
62374: PUSH
62375: LD_INT 1
62377: NEG
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 2
62385: PUSH
62386: LD_INT 0
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 2
62395: PUSH
62396: LD_INT 1
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 2
62405: PUSH
62406: LD_INT 2
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 1
62415: PUSH
62416: LD_INT 2
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 0
62425: PUSH
62426: LD_INT 2
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 1
62435: NEG
62436: PUSH
62437: LD_INT 1
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 2
62446: NEG
62447: PUSH
62448: LD_INT 0
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 2
62457: NEG
62458: PUSH
62459: LD_INT 1
62461: NEG
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 2
62469: NEG
62470: PUSH
62471: LD_INT 2
62473: NEG
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62500: LD_ADDR_VAR 0 54
62504: PUSH
62505: LD_INT 0
62507: PUSH
62508: LD_INT 0
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 0
62517: PUSH
62518: LD_INT 1
62520: NEG
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 1
62528: PUSH
62529: LD_INT 0
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 1
62538: PUSH
62539: LD_INT 1
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 0
62548: PUSH
62549: LD_INT 1
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 1
62558: NEG
62559: PUSH
62560: LD_INT 0
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 1
62569: NEG
62570: PUSH
62571: LD_INT 1
62573: NEG
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 1
62581: NEG
62582: PUSH
62583: LD_INT 2
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 0
62593: PUSH
62594: LD_INT 2
62596: NEG
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 1
62604: PUSH
62605: LD_INT 1
62607: NEG
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 2
62615: PUSH
62616: LD_INT 0
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 2
62625: PUSH
62626: LD_INT 1
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 2
62635: PUSH
62636: LD_INT 2
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 1
62645: PUSH
62646: LD_INT 2
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 0
62655: PUSH
62656: LD_INT 2
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 1
62665: NEG
62666: PUSH
62667: LD_INT 1
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 2
62676: NEG
62677: PUSH
62678: LD_INT 0
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 2
62687: NEG
62688: PUSH
62689: LD_INT 1
62691: NEG
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 2
62699: NEG
62700: PUSH
62701: LD_INT 2
62703: NEG
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62730: LD_ADDR_VAR 0 55
62734: PUSH
62735: LD_INT 0
62737: PUSH
62738: LD_INT 0
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 0
62747: PUSH
62748: LD_INT 1
62750: NEG
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 1
62758: PUSH
62759: LD_INT 0
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 1
62768: PUSH
62769: LD_INT 1
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 0
62778: PUSH
62779: LD_INT 1
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 1
62788: NEG
62789: PUSH
62790: LD_INT 0
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 1
62799: NEG
62800: PUSH
62801: LD_INT 1
62803: NEG
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 1
62811: NEG
62812: PUSH
62813: LD_INT 2
62815: NEG
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 0
62823: PUSH
62824: LD_INT 2
62826: NEG
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 1
62834: PUSH
62835: LD_INT 1
62837: NEG
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 2
62845: PUSH
62846: LD_INT 0
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 2
62855: PUSH
62856: LD_INT 1
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 2
62865: PUSH
62866: LD_INT 2
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 1
62875: PUSH
62876: LD_INT 2
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: LD_INT 2
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 1
62895: NEG
62896: PUSH
62897: LD_INT 1
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 2
62906: NEG
62907: PUSH
62908: LD_INT 0
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 2
62917: NEG
62918: PUSH
62919: LD_INT 1
62921: NEG
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 2
62929: NEG
62930: PUSH
62931: LD_INT 2
62933: NEG
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62960: LD_ADDR_VAR 0 56
62964: PUSH
62965: LD_INT 0
62967: PUSH
62968: LD_INT 0
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 0
62977: PUSH
62978: LD_INT 1
62980: NEG
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 1
62988: PUSH
62989: LD_INT 0
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 1
62998: PUSH
62999: LD_INT 1
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 0
63008: PUSH
63009: LD_INT 1
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 1
63018: NEG
63019: PUSH
63020: LD_INT 0
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 1
63029: NEG
63030: PUSH
63031: LD_INT 1
63033: NEG
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 1
63041: NEG
63042: PUSH
63043: LD_INT 2
63045: NEG
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 0
63053: PUSH
63054: LD_INT 2
63056: NEG
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 1
63064: PUSH
63065: LD_INT 1
63067: NEG
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 2
63075: PUSH
63076: LD_INT 0
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 2
63085: PUSH
63086: LD_INT 1
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 2
63095: PUSH
63096: LD_INT 2
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 1
63105: PUSH
63106: LD_INT 2
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 0
63115: PUSH
63116: LD_INT 2
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 1
63125: NEG
63126: PUSH
63127: LD_INT 1
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 2
63136: NEG
63137: PUSH
63138: LD_INT 0
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 2
63147: NEG
63148: PUSH
63149: LD_INT 1
63151: NEG
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 2
63159: NEG
63160: PUSH
63161: LD_INT 2
63163: NEG
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63190: LD_ADDR_VAR 0 57
63194: PUSH
63195: LD_INT 0
63197: PUSH
63198: LD_INT 0
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 0
63207: PUSH
63208: LD_INT 1
63210: NEG
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 1
63218: PUSH
63219: LD_INT 0
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 1
63228: PUSH
63229: LD_INT 1
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 0
63238: PUSH
63239: LD_INT 1
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 1
63248: NEG
63249: PUSH
63250: LD_INT 0
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 1
63259: NEG
63260: PUSH
63261: LD_INT 1
63263: NEG
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 1
63271: NEG
63272: PUSH
63273: LD_INT 2
63275: NEG
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 0
63283: PUSH
63284: LD_INT 2
63286: NEG
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 1
63294: PUSH
63295: LD_INT 1
63297: NEG
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 2
63305: PUSH
63306: LD_INT 0
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 2
63315: PUSH
63316: LD_INT 1
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 2
63325: PUSH
63326: LD_INT 2
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 1
63335: PUSH
63336: LD_INT 2
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 0
63345: PUSH
63346: LD_INT 2
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 1
63355: NEG
63356: PUSH
63357: LD_INT 1
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 2
63366: NEG
63367: PUSH
63368: LD_INT 0
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 2
63377: NEG
63378: PUSH
63379: LD_INT 1
63381: NEG
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 2
63389: NEG
63390: PUSH
63391: LD_INT 2
63393: NEG
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63420: LD_ADDR_VAR 0 58
63424: PUSH
63425: LD_INT 0
63427: PUSH
63428: LD_INT 0
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 0
63437: PUSH
63438: LD_INT 1
63440: NEG
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 1
63448: PUSH
63449: LD_INT 0
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 1
63458: PUSH
63459: LD_INT 1
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 0
63468: PUSH
63469: LD_INT 1
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 1
63478: NEG
63479: PUSH
63480: LD_INT 0
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 1
63489: NEG
63490: PUSH
63491: LD_INT 1
63493: NEG
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 1
63501: NEG
63502: PUSH
63503: LD_INT 2
63505: NEG
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 0
63513: PUSH
63514: LD_INT 2
63516: NEG
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 1
63524: PUSH
63525: LD_INT 1
63527: NEG
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 2
63535: PUSH
63536: LD_INT 0
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 2
63545: PUSH
63546: LD_INT 1
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 2
63555: PUSH
63556: LD_INT 2
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 1
63565: PUSH
63566: LD_INT 2
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 0
63575: PUSH
63576: LD_INT 2
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 1
63585: NEG
63586: PUSH
63587: LD_INT 1
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 2
63596: NEG
63597: PUSH
63598: LD_INT 0
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 2
63607: NEG
63608: PUSH
63609: LD_INT 1
63611: NEG
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 2
63619: NEG
63620: PUSH
63621: LD_INT 2
63623: NEG
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63650: LD_ADDR_VAR 0 59
63654: PUSH
63655: LD_INT 0
63657: PUSH
63658: LD_INT 0
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 0
63667: PUSH
63668: LD_INT 1
63670: NEG
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 1
63678: PUSH
63679: LD_INT 0
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 1
63688: PUSH
63689: LD_INT 1
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 0
63698: PUSH
63699: LD_INT 1
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 1
63708: NEG
63709: PUSH
63710: LD_INT 0
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 1
63719: NEG
63720: PUSH
63721: LD_INT 1
63723: NEG
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63738: LD_ADDR_VAR 0 60
63742: PUSH
63743: LD_INT 0
63745: PUSH
63746: LD_INT 0
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 0
63755: PUSH
63756: LD_INT 1
63758: NEG
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 1
63766: PUSH
63767: LD_INT 0
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 1
63776: PUSH
63777: LD_INT 1
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 0
63786: PUSH
63787: LD_INT 1
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 1
63796: NEG
63797: PUSH
63798: LD_INT 0
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 1
63807: NEG
63808: PUSH
63809: LD_INT 1
63811: NEG
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63826: LD_ADDR_VAR 0 61
63830: PUSH
63831: LD_INT 0
63833: PUSH
63834: LD_INT 0
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 0
63843: PUSH
63844: LD_INT 1
63846: NEG
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 1
63854: PUSH
63855: LD_INT 0
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 1
63864: PUSH
63865: LD_INT 1
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 0
63874: PUSH
63875: LD_INT 1
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 1
63884: NEG
63885: PUSH
63886: LD_INT 0
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 1
63895: NEG
63896: PUSH
63897: LD_INT 1
63899: NEG
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63914: LD_ADDR_VAR 0 62
63918: PUSH
63919: LD_INT 0
63921: PUSH
63922: LD_INT 0
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 0
63931: PUSH
63932: LD_INT 1
63934: NEG
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 1
63942: PUSH
63943: LD_INT 0
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 1
63952: PUSH
63953: LD_INT 1
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 0
63962: PUSH
63963: LD_INT 1
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 1
63972: NEG
63973: PUSH
63974: LD_INT 0
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 1
63983: NEG
63984: PUSH
63985: LD_INT 1
63987: NEG
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64002: LD_ADDR_VAR 0 63
64006: PUSH
64007: LD_INT 0
64009: PUSH
64010: LD_INT 0
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 0
64019: PUSH
64020: LD_INT 1
64022: NEG
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 1
64030: PUSH
64031: LD_INT 0
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 1
64040: PUSH
64041: LD_INT 1
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 0
64050: PUSH
64051: LD_INT 1
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 1
64060: NEG
64061: PUSH
64062: LD_INT 0
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 1
64071: NEG
64072: PUSH
64073: LD_INT 1
64075: NEG
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64090: LD_ADDR_VAR 0 64
64094: PUSH
64095: LD_INT 0
64097: PUSH
64098: LD_INT 0
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 0
64107: PUSH
64108: LD_INT 1
64110: NEG
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 1
64118: PUSH
64119: LD_INT 0
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 1
64128: PUSH
64129: LD_INT 1
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 0
64138: PUSH
64139: LD_INT 1
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 1
64148: NEG
64149: PUSH
64150: LD_INT 0
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 1
64159: NEG
64160: PUSH
64161: LD_INT 1
64163: NEG
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: ST_TO_ADDR
// end ; 1 :
64178: GO 70075
64180: LD_INT 1
64182: DOUBLE
64183: EQUAL
64184: IFTRUE 64188
64186: GO 66811
64188: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64189: LD_ADDR_VAR 0 11
64193: PUSH
64194: LD_INT 1
64196: NEG
64197: PUSH
64198: LD_INT 3
64200: NEG
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: PUSH
64206: LD_INT 0
64208: PUSH
64209: LD_INT 3
64211: NEG
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 1
64219: PUSH
64220: LD_INT 2
64222: NEG
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: LIST
64232: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64233: LD_ADDR_VAR 0 12
64237: PUSH
64238: LD_INT 2
64240: PUSH
64241: LD_INT 1
64243: NEG
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 3
64251: PUSH
64252: LD_INT 0
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 3
64261: PUSH
64262: LD_INT 1
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: LIST
64273: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64274: LD_ADDR_VAR 0 13
64278: PUSH
64279: LD_INT 3
64281: PUSH
64282: LD_INT 2
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 3
64291: PUSH
64292: LD_INT 3
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 2
64301: PUSH
64302: LD_INT 3
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: LIST
64313: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64314: LD_ADDR_VAR 0 14
64318: PUSH
64319: LD_INT 1
64321: PUSH
64322: LD_INT 3
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 0
64331: PUSH
64332: LD_INT 3
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 1
64341: NEG
64342: PUSH
64343: LD_INT 2
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: LIST
64354: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64355: LD_ADDR_VAR 0 15
64359: PUSH
64360: LD_INT 2
64362: NEG
64363: PUSH
64364: LD_INT 1
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 3
64373: NEG
64374: PUSH
64375: LD_INT 0
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 3
64384: NEG
64385: PUSH
64386: LD_INT 1
64388: NEG
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: LIST
64398: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64399: LD_ADDR_VAR 0 16
64403: PUSH
64404: LD_INT 2
64406: NEG
64407: PUSH
64408: LD_INT 3
64410: NEG
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 3
64418: NEG
64419: PUSH
64420: LD_INT 2
64422: NEG
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PUSH
64428: LD_INT 3
64430: NEG
64431: PUSH
64432: LD_INT 3
64434: NEG
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: LIST
64444: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64445: LD_ADDR_VAR 0 17
64449: PUSH
64450: LD_INT 1
64452: NEG
64453: PUSH
64454: LD_INT 3
64456: NEG
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 0
64464: PUSH
64465: LD_INT 3
64467: NEG
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 1
64475: PUSH
64476: LD_INT 2
64478: NEG
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: LIST
64488: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64489: LD_ADDR_VAR 0 18
64493: PUSH
64494: LD_INT 2
64496: PUSH
64497: LD_INT 1
64499: NEG
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 3
64507: PUSH
64508: LD_INT 0
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 3
64517: PUSH
64518: LD_INT 1
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: LIST
64529: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64530: LD_ADDR_VAR 0 19
64534: PUSH
64535: LD_INT 3
64537: PUSH
64538: LD_INT 2
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 3
64547: PUSH
64548: LD_INT 3
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 2
64557: PUSH
64558: LD_INT 3
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: LIST
64569: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64570: LD_ADDR_VAR 0 20
64574: PUSH
64575: LD_INT 1
64577: PUSH
64578: LD_INT 3
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 0
64587: PUSH
64588: LD_INT 3
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: LD_INT 1
64597: NEG
64598: PUSH
64599: LD_INT 2
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: LIST
64610: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64611: LD_ADDR_VAR 0 21
64615: PUSH
64616: LD_INT 2
64618: NEG
64619: PUSH
64620: LD_INT 1
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 3
64629: NEG
64630: PUSH
64631: LD_INT 0
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 3
64640: NEG
64641: PUSH
64642: LD_INT 1
64644: NEG
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: LIST
64654: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64655: LD_ADDR_VAR 0 22
64659: PUSH
64660: LD_INT 2
64662: NEG
64663: PUSH
64664: LD_INT 3
64666: NEG
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 3
64674: NEG
64675: PUSH
64676: LD_INT 2
64678: NEG
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 3
64686: NEG
64687: PUSH
64688: LD_INT 3
64690: NEG
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: LIST
64700: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64701: LD_ADDR_VAR 0 23
64705: PUSH
64706: LD_INT 0
64708: PUSH
64709: LD_INT 3
64711: NEG
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 1
64719: NEG
64720: PUSH
64721: LD_INT 4
64723: NEG
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 1
64731: PUSH
64732: LD_INT 3
64734: NEG
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: LIST
64744: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64745: LD_ADDR_VAR 0 24
64749: PUSH
64750: LD_INT 3
64752: PUSH
64753: LD_INT 0
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 3
64762: PUSH
64763: LD_INT 1
64765: NEG
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 4
64773: PUSH
64774: LD_INT 1
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: LIST
64785: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64786: LD_ADDR_VAR 0 25
64790: PUSH
64791: LD_INT 3
64793: PUSH
64794: LD_INT 3
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 4
64803: PUSH
64804: LD_INT 3
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: LD_INT 3
64813: PUSH
64814: LD_INT 4
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: LIST
64825: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64826: LD_ADDR_VAR 0 26
64830: PUSH
64831: LD_INT 0
64833: PUSH
64834: LD_INT 3
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 1
64843: PUSH
64844: LD_INT 4
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 1
64853: NEG
64854: PUSH
64855: LD_INT 3
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: LIST
64866: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64867: LD_ADDR_VAR 0 27
64871: PUSH
64872: LD_INT 3
64874: NEG
64875: PUSH
64876: LD_INT 0
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 3
64885: NEG
64886: PUSH
64887: LD_INT 1
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 4
64896: NEG
64897: PUSH
64898: LD_INT 1
64900: NEG
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: LIST
64910: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64911: LD_ADDR_VAR 0 28
64915: PUSH
64916: LD_INT 3
64918: NEG
64919: PUSH
64920: LD_INT 3
64922: NEG
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 3
64930: NEG
64931: PUSH
64932: LD_INT 4
64934: NEG
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 4
64942: NEG
64943: PUSH
64944: LD_INT 3
64946: NEG
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: LIST
64956: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64957: LD_ADDR_VAR 0 29
64961: PUSH
64962: LD_INT 1
64964: NEG
64965: PUSH
64966: LD_INT 3
64968: NEG
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 0
64976: PUSH
64977: LD_INT 3
64979: NEG
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: LD_INT 1
64987: PUSH
64988: LD_INT 2
64990: NEG
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 1
64998: NEG
64999: PUSH
65000: LD_INT 4
65002: NEG
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 0
65010: PUSH
65011: LD_INT 4
65013: NEG
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 1
65021: PUSH
65022: LD_INT 3
65024: NEG
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 1
65032: NEG
65033: PUSH
65034: LD_INT 5
65036: NEG
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 0
65044: PUSH
65045: LD_INT 5
65047: NEG
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 1
65055: PUSH
65056: LD_INT 4
65058: NEG
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: LD_INT 1
65066: NEG
65067: PUSH
65068: LD_INT 6
65070: NEG
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 0
65078: PUSH
65079: LD_INT 6
65081: NEG
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 1
65089: PUSH
65090: LD_INT 5
65092: NEG
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65112: LD_ADDR_VAR 0 30
65116: PUSH
65117: LD_INT 2
65119: PUSH
65120: LD_INT 1
65122: NEG
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 3
65130: PUSH
65131: LD_INT 0
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 3
65140: PUSH
65141: LD_INT 1
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 3
65150: PUSH
65151: LD_INT 1
65153: NEG
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 4
65161: PUSH
65162: LD_INT 0
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 4
65171: PUSH
65172: LD_INT 1
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 4
65181: PUSH
65182: LD_INT 1
65184: NEG
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 5
65192: PUSH
65193: LD_INT 0
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 5
65202: PUSH
65203: LD_INT 1
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 5
65212: PUSH
65213: LD_INT 1
65215: NEG
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 6
65223: PUSH
65224: LD_INT 0
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 6
65233: PUSH
65234: LD_INT 1
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65255: LD_ADDR_VAR 0 31
65259: PUSH
65260: LD_INT 3
65262: PUSH
65263: LD_INT 2
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 3
65272: PUSH
65273: LD_INT 3
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 2
65282: PUSH
65283: LD_INT 3
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 4
65292: PUSH
65293: LD_INT 3
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 4
65302: PUSH
65303: LD_INT 4
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 3
65312: PUSH
65313: LD_INT 4
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 5
65322: PUSH
65323: LD_INT 4
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 5
65332: PUSH
65333: LD_INT 5
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 4
65342: PUSH
65343: LD_INT 5
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 6
65352: PUSH
65353: LD_INT 5
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 6
65362: PUSH
65363: LD_INT 6
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 5
65372: PUSH
65373: LD_INT 6
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: LIST
65384: LIST
65385: LIST
65386: LIST
65387: LIST
65388: LIST
65389: LIST
65390: LIST
65391: LIST
65392: LIST
65393: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65394: LD_ADDR_VAR 0 32
65398: PUSH
65399: LD_INT 1
65401: PUSH
65402: LD_INT 3
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 0
65411: PUSH
65412: LD_INT 3
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 1
65421: NEG
65422: PUSH
65423: LD_INT 2
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 1
65432: PUSH
65433: LD_INT 4
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 0
65442: PUSH
65443: LD_INT 4
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 1
65452: NEG
65453: PUSH
65454: LD_INT 3
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: LD_INT 1
65463: PUSH
65464: LD_INT 5
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: LD_INT 0
65473: PUSH
65474: LD_INT 5
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 1
65483: NEG
65484: PUSH
65485: LD_INT 4
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 1
65494: PUSH
65495: LD_INT 6
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 0
65504: PUSH
65505: LD_INT 6
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PUSH
65512: LD_INT 1
65514: NEG
65515: PUSH
65516: LD_INT 5
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65537: LD_ADDR_VAR 0 33
65541: PUSH
65542: LD_INT 2
65544: NEG
65545: PUSH
65546: LD_INT 1
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 3
65555: NEG
65556: PUSH
65557: LD_INT 0
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: LD_INT 3
65566: NEG
65567: PUSH
65568: LD_INT 1
65570: NEG
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 3
65578: NEG
65579: PUSH
65580: LD_INT 1
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 4
65589: NEG
65590: PUSH
65591: LD_INT 0
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 4
65600: NEG
65601: PUSH
65602: LD_INT 1
65604: NEG
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 4
65612: NEG
65613: PUSH
65614: LD_INT 1
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 5
65623: NEG
65624: PUSH
65625: LD_INT 0
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 5
65634: NEG
65635: PUSH
65636: LD_INT 1
65638: NEG
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PUSH
65644: LD_INT 5
65646: NEG
65647: PUSH
65648: LD_INT 1
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: LD_INT 6
65657: NEG
65658: PUSH
65659: LD_INT 0
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 6
65668: NEG
65669: PUSH
65670: LD_INT 1
65672: NEG
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65692: LD_ADDR_VAR 0 34
65696: PUSH
65697: LD_INT 2
65699: NEG
65700: PUSH
65701: LD_INT 3
65703: NEG
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 3
65711: NEG
65712: PUSH
65713: LD_INT 2
65715: NEG
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 3
65723: NEG
65724: PUSH
65725: LD_INT 3
65727: NEG
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 3
65735: NEG
65736: PUSH
65737: LD_INT 4
65739: NEG
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 4
65747: NEG
65748: PUSH
65749: LD_INT 3
65751: NEG
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 4
65759: NEG
65760: PUSH
65761: LD_INT 4
65763: NEG
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: LD_INT 4
65771: NEG
65772: PUSH
65773: LD_INT 5
65775: NEG
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 5
65783: NEG
65784: PUSH
65785: LD_INT 4
65787: NEG
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 5
65795: NEG
65796: PUSH
65797: LD_INT 5
65799: NEG
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 5
65807: NEG
65808: PUSH
65809: LD_INT 6
65811: NEG
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: LD_INT 6
65819: NEG
65820: PUSH
65821: LD_INT 5
65823: NEG
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 6
65831: NEG
65832: PUSH
65833: LD_INT 6
65835: NEG
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65855: LD_ADDR_VAR 0 41
65859: PUSH
65860: LD_INT 0
65862: PUSH
65863: LD_INT 2
65865: NEG
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 1
65873: NEG
65874: PUSH
65875: LD_INT 3
65877: NEG
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 1
65885: PUSH
65886: LD_INT 2
65888: NEG
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: LIST
65898: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65899: LD_ADDR_VAR 0 42
65903: PUSH
65904: LD_INT 2
65906: PUSH
65907: LD_INT 0
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 2
65916: PUSH
65917: LD_INT 1
65919: NEG
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 3
65927: PUSH
65928: LD_INT 1
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: LIST
65939: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65940: LD_ADDR_VAR 0 43
65944: PUSH
65945: LD_INT 2
65947: PUSH
65948: LD_INT 2
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_INT 3
65957: PUSH
65958: LD_INT 2
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: PUSH
65965: LD_INT 2
65967: PUSH
65968: LD_INT 3
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: LIST
65979: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65980: LD_ADDR_VAR 0 44
65984: PUSH
65985: LD_INT 0
65987: PUSH
65988: LD_INT 2
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 1
65997: PUSH
65998: LD_INT 3
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 1
66007: NEG
66008: PUSH
66009: LD_INT 2
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: LIST
66020: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66021: LD_ADDR_VAR 0 45
66025: PUSH
66026: LD_INT 2
66028: NEG
66029: PUSH
66030: LD_INT 0
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 2
66039: NEG
66040: PUSH
66041: LD_INT 1
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: LD_INT 3
66050: NEG
66051: PUSH
66052: LD_INT 1
66054: NEG
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: LIST
66064: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66065: LD_ADDR_VAR 0 46
66069: PUSH
66070: LD_INT 2
66072: NEG
66073: PUSH
66074: LD_INT 2
66076: NEG
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 2
66084: NEG
66085: PUSH
66086: LD_INT 3
66088: NEG
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 3
66096: NEG
66097: PUSH
66098: LD_INT 2
66100: NEG
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: LIST
66110: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66111: LD_ADDR_VAR 0 47
66115: PUSH
66116: LD_INT 2
66118: NEG
66119: PUSH
66120: LD_INT 3
66122: NEG
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: LD_INT 1
66130: NEG
66131: PUSH
66132: LD_INT 3
66134: NEG
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66144: LD_ADDR_VAR 0 48
66148: PUSH
66149: LD_INT 1
66151: PUSH
66152: LD_INT 2
66154: NEG
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 2
66162: PUSH
66163: LD_INT 1
66165: NEG
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66175: LD_ADDR_VAR 0 49
66179: PUSH
66180: LD_INT 3
66182: PUSH
66183: LD_INT 1
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 3
66192: PUSH
66193: LD_INT 2
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66204: LD_ADDR_VAR 0 50
66208: PUSH
66209: LD_INT 2
66211: PUSH
66212: LD_INT 3
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 1
66221: PUSH
66222: LD_INT 3
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66233: LD_ADDR_VAR 0 51
66237: PUSH
66238: LD_INT 1
66240: NEG
66241: PUSH
66242: LD_INT 2
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 2
66251: NEG
66252: PUSH
66253: LD_INT 1
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66264: LD_ADDR_VAR 0 52
66268: PUSH
66269: LD_INT 3
66271: NEG
66272: PUSH
66273: LD_INT 1
66275: NEG
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 3
66283: NEG
66284: PUSH
66285: LD_INT 2
66287: NEG
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66297: LD_ADDR_VAR 0 53
66301: PUSH
66302: LD_INT 1
66304: NEG
66305: PUSH
66306: LD_INT 3
66308: NEG
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: LD_INT 0
66316: PUSH
66317: LD_INT 3
66319: NEG
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: LD_INT 1
66327: PUSH
66328: LD_INT 2
66330: NEG
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: LIST
66340: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66341: LD_ADDR_VAR 0 54
66345: PUSH
66346: LD_INT 2
66348: PUSH
66349: LD_INT 1
66351: NEG
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 3
66359: PUSH
66360: LD_INT 0
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 3
66369: PUSH
66370: LD_INT 1
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: LIST
66381: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66382: LD_ADDR_VAR 0 55
66386: PUSH
66387: LD_INT 3
66389: PUSH
66390: LD_INT 2
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 3
66399: PUSH
66400: LD_INT 3
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 2
66409: PUSH
66410: LD_INT 3
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: LIST
66421: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66422: LD_ADDR_VAR 0 56
66426: PUSH
66427: LD_INT 1
66429: PUSH
66430: LD_INT 3
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: LD_INT 0
66439: PUSH
66440: LD_INT 3
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 1
66449: NEG
66450: PUSH
66451: LD_INT 2
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: LIST
66462: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66463: LD_ADDR_VAR 0 57
66467: PUSH
66468: LD_INT 2
66470: NEG
66471: PUSH
66472: LD_INT 1
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 3
66481: NEG
66482: PUSH
66483: LD_INT 0
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 3
66492: NEG
66493: PUSH
66494: LD_INT 1
66496: NEG
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: LIST
66506: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66507: LD_ADDR_VAR 0 58
66511: PUSH
66512: LD_INT 2
66514: NEG
66515: PUSH
66516: LD_INT 3
66518: NEG
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 3
66526: NEG
66527: PUSH
66528: LD_INT 2
66530: NEG
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: LD_INT 3
66538: NEG
66539: PUSH
66540: LD_INT 3
66542: NEG
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: LIST
66552: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66553: LD_ADDR_VAR 0 59
66557: PUSH
66558: LD_INT 1
66560: NEG
66561: PUSH
66562: LD_INT 2
66564: NEG
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 0
66572: PUSH
66573: LD_INT 2
66575: NEG
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 1
66583: PUSH
66584: LD_INT 1
66586: NEG
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: LIST
66596: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66597: LD_ADDR_VAR 0 60
66601: PUSH
66602: LD_INT 1
66604: PUSH
66605: LD_INT 1
66607: NEG
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 2
66615: PUSH
66616: LD_INT 0
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 2
66625: PUSH
66626: LD_INT 1
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: LIST
66637: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66638: LD_ADDR_VAR 0 61
66642: PUSH
66643: LD_INT 2
66645: PUSH
66646: LD_INT 1
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: LD_INT 2
66655: PUSH
66656: LD_INT 2
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: LD_INT 1
66665: PUSH
66666: LD_INT 2
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: LIST
66677: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66678: LD_ADDR_VAR 0 62
66682: PUSH
66683: LD_INT 1
66685: PUSH
66686: LD_INT 2
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: PUSH
66693: LD_INT 0
66695: PUSH
66696: LD_INT 2
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PUSH
66703: LD_INT 1
66705: NEG
66706: PUSH
66707: LD_INT 1
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: LIST
66718: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66719: LD_ADDR_VAR 0 63
66723: PUSH
66724: LD_INT 1
66726: NEG
66727: PUSH
66728: LD_INT 1
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 2
66737: NEG
66738: PUSH
66739: LD_INT 0
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 2
66748: NEG
66749: PUSH
66750: LD_INT 1
66752: NEG
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: LIST
66762: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66763: LD_ADDR_VAR 0 64
66767: PUSH
66768: LD_INT 1
66770: NEG
66771: PUSH
66772: LD_INT 2
66774: NEG
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: LD_INT 2
66782: NEG
66783: PUSH
66784: LD_INT 1
66786: NEG
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 2
66794: NEG
66795: PUSH
66796: LD_INT 2
66798: NEG
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: LIST
66808: ST_TO_ADDR
// end ; 2 :
66809: GO 70075
66811: LD_INT 2
66813: DOUBLE
66814: EQUAL
66815: IFTRUE 66819
66817: GO 70074
66819: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66820: LD_ADDR_VAR 0 29
66824: PUSH
66825: LD_INT 4
66827: PUSH
66828: LD_INT 0
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: PUSH
66835: LD_INT 4
66837: PUSH
66838: LD_INT 1
66840: NEG
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: LD_INT 5
66848: PUSH
66849: LD_INT 0
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 5
66858: PUSH
66859: LD_INT 1
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 4
66868: PUSH
66869: LD_INT 1
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 3
66878: PUSH
66879: LD_INT 0
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 3
66888: PUSH
66889: LD_INT 1
66891: NEG
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: LD_INT 3
66899: PUSH
66900: LD_INT 2
66902: NEG
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: LD_INT 5
66910: PUSH
66911: LD_INT 2
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: PUSH
66918: LD_INT 3
66920: PUSH
66921: LD_INT 3
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 3
66930: PUSH
66931: LD_INT 2
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 4
66940: PUSH
66941: LD_INT 3
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: LD_INT 4
66950: PUSH
66951: LD_INT 4
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 3
66960: PUSH
66961: LD_INT 4
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 2
66970: PUSH
66971: LD_INT 3
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: LD_INT 2
66980: PUSH
66981: LD_INT 2
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 4
66990: PUSH
66991: LD_INT 2
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 2
67000: PUSH
67001: LD_INT 4
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 0
67010: PUSH
67011: LD_INT 4
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 0
67020: PUSH
67021: LD_INT 3
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 1
67030: PUSH
67031: LD_INT 4
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 1
67040: PUSH
67041: LD_INT 5
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 0
67050: PUSH
67051: LD_INT 5
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 1
67060: NEG
67061: PUSH
67062: LD_INT 4
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: LD_INT 1
67071: NEG
67072: PUSH
67073: LD_INT 3
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 2
67082: PUSH
67083: LD_INT 5
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: LD_INT 2
67092: NEG
67093: PUSH
67094: LD_INT 3
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 3
67103: NEG
67104: PUSH
67105: LD_INT 0
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: PUSH
67112: LD_INT 3
67114: NEG
67115: PUSH
67116: LD_INT 1
67118: NEG
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 2
67126: NEG
67127: PUSH
67128: LD_INT 0
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 2
67137: NEG
67138: PUSH
67139: LD_INT 1
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 3
67148: NEG
67149: PUSH
67150: LD_INT 1
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 4
67159: NEG
67160: PUSH
67161: LD_INT 0
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: PUSH
67168: LD_INT 4
67170: NEG
67171: PUSH
67172: LD_INT 1
67174: NEG
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 4
67182: NEG
67183: PUSH
67184: LD_INT 2
67186: NEG
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 2
67194: NEG
67195: PUSH
67196: LD_INT 2
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 4
67205: NEG
67206: PUSH
67207: LD_INT 4
67209: NEG
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 4
67217: NEG
67218: PUSH
67219: LD_INT 5
67221: NEG
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: LD_INT 3
67229: NEG
67230: PUSH
67231: LD_INT 4
67233: NEG
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PUSH
67239: LD_INT 3
67241: NEG
67242: PUSH
67243: LD_INT 3
67245: NEG
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: LD_INT 4
67253: NEG
67254: PUSH
67255: LD_INT 3
67257: NEG
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: LD_INT 5
67265: NEG
67266: PUSH
67267: LD_INT 4
67269: NEG
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: PUSH
67275: LD_INT 5
67277: NEG
67278: PUSH
67279: LD_INT 5
67281: NEG
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 3
67289: NEG
67290: PUSH
67291: LD_INT 5
67293: NEG
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 5
67301: NEG
67302: PUSH
67303: LD_INT 3
67305: NEG
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: LIST
67356: LIST
67357: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67358: LD_ADDR_VAR 0 30
67362: PUSH
67363: LD_INT 4
67365: PUSH
67366: LD_INT 4
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: PUSH
67373: LD_INT 4
67375: PUSH
67376: LD_INT 3
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 5
67385: PUSH
67386: LD_INT 4
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: LD_INT 5
67395: PUSH
67396: LD_INT 5
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_INT 4
67405: PUSH
67406: LD_INT 5
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PUSH
67413: LD_INT 3
67415: PUSH
67416: LD_INT 4
67418: PUSH
67419: EMPTY
67420: LIST
67421: LIST
67422: PUSH
67423: LD_INT 3
67425: PUSH
67426: LD_INT 3
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: LD_INT 5
67435: PUSH
67436: LD_INT 3
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: LD_INT 3
67445: PUSH
67446: LD_INT 5
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PUSH
67453: LD_INT 0
67455: PUSH
67456: LD_INT 3
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 0
67465: PUSH
67466: LD_INT 2
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: LD_INT 1
67475: PUSH
67476: LD_INT 3
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 1
67485: PUSH
67486: LD_INT 4
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: LD_INT 0
67495: PUSH
67496: LD_INT 4
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: LD_INT 1
67505: NEG
67506: PUSH
67507: LD_INT 3
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: PUSH
67514: LD_INT 1
67516: NEG
67517: PUSH
67518: LD_INT 2
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: LD_INT 2
67527: PUSH
67528: LD_INT 4
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: LD_INT 2
67537: NEG
67538: PUSH
67539: LD_INT 2
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: LD_INT 4
67548: NEG
67549: PUSH
67550: LD_INT 0
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: PUSH
67557: LD_INT 4
67559: NEG
67560: PUSH
67561: LD_INT 1
67563: NEG
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 3
67571: NEG
67572: PUSH
67573: LD_INT 0
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 3
67582: NEG
67583: PUSH
67584: LD_INT 1
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 4
67593: NEG
67594: PUSH
67595: LD_INT 1
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 5
67604: NEG
67605: PUSH
67606: LD_INT 0
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: LD_INT 5
67615: NEG
67616: PUSH
67617: LD_INT 1
67619: NEG
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: LD_INT 5
67627: NEG
67628: PUSH
67629: LD_INT 2
67631: NEG
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 3
67639: NEG
67640: PUSH
67641: LD_INT 2
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 3
67650: NEG
67651: PUSH
67652: LD_INT 3
67654: NEG
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 3
67662: NEG
67663: PUSH
67664: LD_INT 4
67666: NEG
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PUSH
67672: LD_INT 2
67674: NEG
67675: PUSH
67676: LD_INT 3
67678: NEG
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: LD_INT 2
67686: NEG
67687: PUSH
67688: LD_INT 2
67690: NEG
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: PUSH
67696: LD_INT 3
67698: NEG
67699: PUSH
67700: LD_INT 2
67702: NEG
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: PUSH
67708: LD_INT 4
67710: NEG
67711: PUSH
67712: LD_INT 3
67714: NEG
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PUSH
67720: LD_INT 4
67722: NEG
67723: PUSH
67724: LD_INT 4
67726: NEG
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: LD_INT 2
67734: NEG
67735: PUSH
67736: LD_INT 4
67738: NEG
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: PUSH
67744: LD_INT 4
67746: NEG
67747: PUSH
67748: LD_INT 2
67750: NEG
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: PUSH
67756: LD_INT 0
67758: PUSH
67759: LD_INT 4
67761: NEG
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 0
67769: PUSH
67770: LD_INT 5
67772: NEG
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: LD_INT 1
67780: PUSH
67781: LD_INT 4
67783: NEG
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: LD_INT 1
67791: PUSH
67792: LD_INT 3
67794: NEG
67795: PUSH
67796: EMPTY
67797: LIST
67798: LIST
67799: PUSH
67800: LD_INT 0
67802: PUSH
67803: LD_INT 3
67805: NEG
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: LD_INT 1
67813: NEG
67814: PUSH
67815: LD_INT 4
67817: NEG
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 1
67825: NEG
67826: PUSH
67827: LD_INT 5
67829: NEG
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 2
67837: PUSH
67838: LD_INT 3
67840: NEG
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: PUSH
67846: LD_INT 2
67848: NEG
67849: PUSH
67850: LD_INT 5
67852: NEG
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: LIST
67893: LIST
67894: LIST
67895: LIST
67896: LIST
67897: LIST
67898: LIST
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67905: LD_ADDR_VAR 0 31
67909: PUSH
67910: LD_INT 0
67912: PUSH
67913: LD_INT 4
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: LD_INT 0
67922: PUSH
67923: LD_INT 3
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: LD_INT 1
67932: PUSH
67933: LD_INT 4
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 1
67942: PUSH
67943: LD_INT 5
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 0
67952: PUSH
67953: LD_INT 5
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 1
67962: NEG
67963: PUSH
67964: LD_INT 4
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: LD_INT 1
67973: NEG
67974: PUSH
67975: LD_INT 3
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: PUSH
67982: LD_INT 2
67984: PUSH
67985: LD_INT 5
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PUSH
67992: LD_INT 2
67994: NEG
67995: PUSH
67996: LD_INT 3
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: LD_INT 3
68005: NEG
68006: PUSH
68007: LD_INT 0
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PUSH
68014: LD_INT 3
68016: NEG
68017: PUSH
68018: LD_INT 1
68020: NEG
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: LD_INT 2
68028: NEG
68029: PUSH
68030: LD_INT 0
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 2
68039: NEG
68040: PUSH
68041: LD_INT 1
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 3
68050: NEG
68051: PUSH
68052: LD_INT 1
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: LD_INT 4
68061: NEG
68062: PUSH
68063: LD_INT 0
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 4
68072: NEG
68073: PUSH
68074: LD_INT 1
68076: NEG
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 4
68084: NEG
68085: PUSH
68086: LD_INT 2
68088: NEG
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: LD_INT 2
68096: NEG
68097: PUSH
68098: LD_INT 2
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 4
68107: NEG
68108: PUSH
68109: LD_INT 4
68111: NEG
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: PUSH
68117: LD_INT 4
68119: NEG
68120: PUSH
68121: LD_INT 5
68123: NEG
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: PUSH
68129: LD_INT 3
68131: NEG
68132: PUSH
68133: LD_INT 4
68135: NEG
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: PUSH
68141: LD_INT 3
68143: NEG
68144: PUSH
68145: LD_INT 3
68147: NEG
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 4
68155: NEG
68156: PUSH
68157: LD_INT 3
68159: NEG
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: PUSH
68165: LD_INT 5
68167: NEG
68168: PUSH
68169: LD_INT 4
68171: NEG
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: LD_INT 5
68179: NEG
68180: PUSH
68181: LD_INT 5
68183: NEG
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: LD_INT 3
68191: NEG
68192: PUSH
68193: LD_INT 5
68195: NEG
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 5
68203: NEG
68204: PUSH
68205: LD_INT 3
68207: NEG
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PUSH
68213: LD_INT 0
68215: PUSH
68216: LD_INT 3
68218: NEG
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: PUSH
68224: LD_INT 0
68226: PUSH
68227: LD_INT 4
68229: NEG
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: LD_INT 1
68237: PUSH
68238: LD_INT 3
68240: NEG
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PUSH
68246: LD_INT 1
68248: PUSH
68249: LD_INT 2
68251: NEG
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: LD_INT 0
68259: PUSH
68260: LD_INT 2
68262: NEG
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: LD_INT 1
68270: NEG
68271: PUSH
68272: LD_INT 3
68274: NEG
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 1
68282: NEG
68283: PUSH
68284: LD_INT 4
68286: NEG
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 2
68294: PUSH
68295: LD_INT 2
68297: NEG
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 2
68305: NEG
68306: PUSH
68307: LD_INT 4
68309: NEG
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 4
68317: PUSH
68318: LD_INT 0
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 4
68327: PUSH
68328: LD_INT 1
68330: NEG
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PUSH
68336: LD_INT 5
68338: PUSH
68339: LD_INT 0
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PUSH
68346: LD_INT 5
68348: PUSH
68349: LD_INT 1
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 4
68358: PUSH
68359: LD_INT 1
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: PUSH
68366: LD_INT 3
68368: PUSH
68369: LD_INT 0
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 3
68378: PUSH
68379: LD_INT 1
68381: NEG
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 3
68389: PUSH
68390: LD_INT 2
68392: NEG
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: PUSH
68398: LD_INT 5
68400: PUSH
68401: LD_INT 2
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: LIST
68437: LIST
68438: LIST
68439: LIST
68440: LIST
68441: LIST
68442: LIST
68443: LIST
68444: LIST
68445: LIST
68446: LIST
68447: LIST
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68455: LD_ADDR_VAR 0 32
68459: PUSH
68460: LD_INT 4
68462: NEG
68463: PUSH
68464: LD_INT 0
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: PUSH
68471: LD_INT 4
68473: NEG
68474: PUSH
68475: LD_INT 1
68477: NEG
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: LD_INT 3
68485: NEG
68486: PUSH
68487: LD_INT 0
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 3
68496: NEG
68497: PUSH
68498: LD_INT 1
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 4
68507: NEG
68508: PUSH
68509: LD_INT 1
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: PUSH
68516: LD_INT 5
68518: NEG
68519: PUSH
68520: LD_INT 0
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 5
68529: NEG
68530: PUSH
68531: LD_INT 1
68533: NEG
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 5
68541: NEG
68542: PUSH
68543: LD_INT 2
68545: NEG
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: LD_INT 3
68553: NEG
68554: PUSH
68555: LD_INT 2
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: PUSH
68562: LD_INT 3
68564: NEG
68565: PUSH
68566: LD_INT 3
68568: NEG
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: PUSH
68574: LD_INT 3
68576: NEG
68577: PUSH
68578: LD_INT 4
68580: NEG
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 2
68588: NEG
68589: PUSH
68590: LD_INT 3
68592: NEG
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: PUSH
68598: LD_INT 2
68600: NEG
68601: PUSH
68602: LD_INT 2
68604: NEG
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: PUSH
68610: LD_INT 3
68612: NEG
68613: PUSH
68614: LD_INT 2
68616: NEG
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: PUSH
68622: LD_INT 4
68624: NEG
68625: PUSH
68626: LD_INT 3
68628: NEG
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 4
68636: NEG
68637: PUSH
68638: LD_INT 4
68640: NEG
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: LD_INT 2
68648: NEG
68649: PUSH
68650: LD_INT 4
68652: NEG
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: PUSH
68658: LD_INT 4
68660: NEG
68661: PUSH
68662: LD_INT 2
68664: NEG
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 0
68672: PUSH
68673: LD_INT 4
68675: NEG
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: LD_INT 0
68683: PUSH
68684: LD_INT 5
68686: NEG
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 1
68694: PUSH
68695: LD_INT 4
68697: NEG
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: PUSH
68703: LD_INT 1
68705: PUSH
68706: LD_INT 3
68708: NEG
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: PUSH
68714: LD_INT 0
68716: PUSH
68717: LD_INT 3
68719: NEG
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: LD_INT 1
68727: NEG
68728: PUSH
68729: LD_INT 4
68731: NEG
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: PUSH
68737: LD_INT 1
68739: NEG
68740: PUSH
68741: LD_INT 5
68743: NEG
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: PUSH
68749: LD_INT 2
68751: PUSH
68752: LD_INT 3
68754: NEG
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: PUSH
68760: LD_INT 2
68762: NEG
68763: PUSH
68764: LD_INT 5
68766: NEG
68767: PUSH
68768: EMPTY
68769: LIST
68770: LIST
68771: PUSH
68772: LD_INT 3
68774: PUSH
68775: LD_INT 0
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: PUSH
68782: LD_INT 3
68784: PUSH
68785: LD_INT 1
68787: NEG
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: PUSH
68793: LD_INT 4
68795: PUSH
68796: LD_INT 0
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: PUSH
68803: LD_INT 4
68805: PUSH
68806: LD_INT 1
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: PUSH
68813: LD_INT 3
68815: PUSH
68816: LD_INT 1
68818: PUSH
68819: EMPTY
68820: LIST
68821: LIST
68822: PUSH
68823: LD_INT 2
68825: PUSH
68826: LD_INT 0
68828: PUSH
68829: EMPTY
68830: LIST
68831: LIST
68832: PUSH
68833: LD_INT 2
68835: PUSH
68836: LD_INT 1
68838: NEG
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: LD_INT 2
68846: PUSH
68847: LD_INT 2
68849: NEG
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: PUSH
68855: LD_INT 4
68857: PUSH
68858: LD_INT 2
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 4
68867: PUSH
68868: LD_INT 4
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: LD_INT 4
68877: PUSH
68878: LD_INT 3
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: PUSH
68885: LD_INT 5
68887: PUSH
68888: LD_INT 4
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: PUSH
68895: LD_INT 5
68897: PUSH
68898: LD_INT 5
68900: PUSH
68901: EMPTY
68902: LIST
68903: LIST
68904: PUSH
68905: LD_INT 4
68907: PUSH
68908: LD_INT 5
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: PUSH
68915: LD_INT 3
68917: PUSH
68918: LD_INT 4
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: LD_INT 3
68927: PUSH
68928: LD_INT 3
68930: PUSH
68931: EMPTY
68932: LIST
68933: LIST
68934: PUSH
68935: LD_INT 5
68937: PUSH
68938: LD_INT 3
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 3
68947: PUSH
68948: LD_INT 5
68950: PUSH
68951: EMPTY
68952: LIST
68953: LIST
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: LIST
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: LIST
68982: LIST
68983: LIST
68984: LIST
68985: LIST
68986: LIST
68987: LIST
68988: LIST
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69002: LD_ADDR_VAR 0 33
69006: PUSH
69007: LD_INT 4
69009: NEG
69010: PUSH
69011: LD_INT 4
69013: NEG
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: LD_INT 4
69021: NEG
69022: PUSH
69023: LD_INT 5
69025: NEG
69026: PUSH
69027: EMPTY
69028: LIST
69029: LIST
69030: PUSH
69031: LD_INT 3
69033: NEG
69034: PUSH
69035: LD_INT 4
69037: NEG
69038: PUSH
69039: EMPTY
69040: LIST
69041: LIST
69042: PUSH
69043: LD_INT 3
69045: NEG
69046: PUSH
69047: LD_INT 3
69049: NEG
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: PUSH
69055: LD_INT 4
69057: NEG
69058: PUSH
69059: LD_INT 3
69061: NEG
69062: PUSH
69063: EMPTY
69064: LIST
69065: LIST
69066: PUSH
69067: LD_INT 5
69069: NEG
69070: PUSH
69071: LD_INT 4
69073: NEG
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: PUSH
69079: LD_INT 5
69081: NEG
69082: PUSH
69083: LD_INT 5
69085: NEG
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: LD_INT 3
69093: NEG
69094: PUSH
69095: LD_INT 5
69097: NEG
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: PUSH
69103: LD_INT 5
69105: NEG
69106: PUSH
69107: LD_INT 3
69109: NEG
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: LD_INT 0
69117: PUSH
69118: LD_INT 3
69120: NEG
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PUSH
69126: LD_INT 0
69128: PUSH
69129: LD_INT 4
69131: NEG
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 1
69139: PUSH
69140: LD_INT 3
69142: NEG
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 1
69150: PUSH
69151: LD_INT 2
69153: NEG
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 0
69161: PUSH
69162: LD_INT 2
69164: NEG
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: PUSH
69170: LD_INT 1
69172: NEG
69173: PUSH
69174: LD_INT 3
69176: NEG
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PUSH
69182: LD_INT 1
69184: NEG
69185: PUSH
69186: LD_INT 4
69188: NEG
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: LD_INT 2
69196: PUSH
69197: LD_INT 2
69199: NEG
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PUSH
69205: LD_INT 2
69207: NEG
69208: PUSH
69209: LD_INT 4
69211: NEG
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 4
69219: PUSH
69220: LD_INT 0
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: LD_INT 4
69229: PUSH
69230: LD_INT 1
69232: NEG
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: PUSH
69238: LD_INT 5
69240: PUSH
69241: LD_INT 0
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: PUSH
69248: LD_INT 5
69250: PUSH
69251: LD_INT 1
69253: PUSH
69254: EMPTY
69255: LIST
69256: LIST
69257: PUSH
69258: LD_INT 4
69260: PUSH
69261: LD_INT 1
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: PUSH
69268: LD_INT 3
69270: PUSH
69271: LD_INT 0
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: PUSH
69278: LD_INT 3
69280: PUSH
69281: LD_INT 1
69283: NEG
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: PUSH
69289: LD_INT 3
69291: PUSH
69292: LD_INT 2
69294: NEG
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: PUSH
69300: LD_INT 5
69302: PUSH
69303: LD_INT 2
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_INT 3
69312: PUSH
69313: LD_INT 3
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 3
69322: PUSH
69323: LD_INT 2
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: PUSH
69330: LD_INT 4
69332: PUSH
69333: LD_INT 3
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: PUSH
69340: LD_INT 4
69342: PUSH
69343: LD_INT 4
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: PUSH
69350: LD_INT 3
69352: PUSH
69353: LD_INT 4
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 2
69362: PUSH
69363: LD_INT 3
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 2
69372: PUSH
69373: LD_INT 2
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 4
69382: PUSH
69383: LD_INT 2
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: PUSH
69390: LD_INT 2
69392: PUSH
69393: LD_INT 4
69395: PUSH
69396: EMPTY
69397: LIST
69398: LIST
69399: PUSH
69400: LD_INT 0
69402: PUSH
69403: LD_INT 4
69405: PUSH
69406: EMPTY
69407: LIST
69408: LIST
69409: PUSH
69410: LD_INT 0
69412: PUSH
69413: LD_INT 3
69415: PUSH
69416: EMPTY
69417: LIST
69418: LIST
69419: PUSH
69420: LD_INT 1
69422: PUSH
69423: LD_INT 4
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: PUSH
69430: LD_INT 1
69432: PUSH
69433: LD_INT 5
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: PUSH
69440: LD_INT 0
69442: PUSH
69443: LD_INT 5
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 1
69452: NEG
69453: PUSH
69454: LD_INT 4
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: LD_INT 1
69463: NEG
69464: PUSH
69465: LD_INT 3
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: PUSH
69472: LD_INT 2
69474: PUSH
69475: LD_INT 5
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: PUSH
69482: LD_INT 2
69484: NEG
69485: PUSH
69486: LD_INT 3
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: LIST
69520: LIST
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69540: LD_ADDR_VAR 0 34
69544: PUSH
69545: LD_INT 0
69547: PUSH
69548: LD_INT 4
69550: NEG
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: LD_INT 0
69558: PUSH
69559: LD_INT 5
69561: NEG
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 1
69569: PUSH
69570: LD_INT 4
69572: NEG
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 1
69580: PUSH
69581: LD_INT 3
69583: NEG
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: PUSH
69589: LD_INT 0
69591: PUSH
69592: LD_INT 3
69594: NEG
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: LD_INT 1
69602: NEG
69603: PUSH
69604: LD_INT 4
69606: NEG
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: PUSH
69612: LD_INT 1
69614: NEG
69615: PUSH
69616: LD_INT 5
69618: NEG
69619: PUSH
69620: EMPTY
69621: LIST
69622: LIST
69623: PUSH
69624: LD_INT 2
69626: PUSH
69627: LD_INT 3
69629: NEG
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: PUSH
69635: LD_INT 2
69637: NEG
69638: PUSH
69639: LD_INT 5
69641: NEG
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: LD_INT 3
69649: PUSH
69650: LD_INT 0
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: PUSH
69657: LD_INT 3
69659: PUSH
69660: LD_INT 1
69662: NEG
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: LD_INT 4
69670: PUSH
69671: LD_INT 0
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: PUSH
69678: LD_INT 4
69680: PUSH
69681: LD_INT 1
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: PUSH
69688: LD_INT 3
69690: PUSH
69691: LD_INT 1
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: PUSH
69698: LD_INT 2
69700: PUSH
69701: LD_INT 0
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PUSH
69708: LD_INT 2
69710: PUSH
69711: LD_INT 1
69713: NEG
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: PUSH
69719: LD_INT 2
69721: PUSH
69722: LD_INT 2
69724: NEG
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 4
69732: PUSH
69733: LD_INT 2
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: PUSH
69740: LD_INT 4
69742: PUSH
69743: LD_INT 4
69745: PUSH
69746: EMPTY
69747: LIST
69748: LIST
69749: PUSH
69750: LD_INT 4
69752: PUSH
69753: LD_INT 3
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: PUSH
69760: LD_INT 5
69762: PUSH
69763: LD_INT 4
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: PUSH
69770: LD_INT 5
69772: PUSH
69773: LD_INT 5
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: PUSH
69780: LD_INT 4
69782: PUSH
69783: LD_INT 5
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: LD_INT 3
69792: PUSH
69793: LD_INT 4
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: LD_INT 3
69802: PUSH
69803: LD_INT 3
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: LD_INT 5
69812: PUSH
69813: LD_INT 3
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: PUSH
69820: LD_INT 3
69822: PUSH
69823: LD_INT 5
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: PUSH
69830: LD_INT 0
69832: PUSH
69833: LD_INT 3
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: PUSH
69840: LD_INT 0
69842: PUSH
69843: LD_INT 2
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: LD_INT 1
69852: PUSH
69853: LD_INT 3
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: LD_INT 1
69862: PUSH
69863: LD_INT 4
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: PUSH
69870: LD_INT 0
69872: PUSH
69873: LD_INT 4
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: PUSH
69880: LD_INT 1
69882: NEG
69883: PUSH
69884: LD_INT 3
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: PUSH
69891: LD_INT 1
69893: NEG
69894: PUSH
69895: LD_INT 2
69897: PUSH
69898: EMPTY
69899: LIST
69900: LIST
69901: PUSH
69902: LD_INT 2
69904: PUSH
69905: LD_INT 4
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: PUSH
69912: LD_INT 2
69914: NEG
69915: PUSH
69916: LD_INT 2
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: PUSH
69923: LD_INT 4
69925: NEG
69926: PUSH
69927: LD_INT 0
69929: PUSH
69930: EMPTY
69931: LIST
69932: LIST
69933: PUSH
69934: LD_INT 4
69936: NEG
69937: PUSH
69938: LD_INT 1
69940: NEG
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: PUSH
69946: LD_INT 3
69948: NEG
69949: PUSH
69950: LD_INT 0
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: PUSH
69957: LD_INT 3
69959: NEG
69960: PUSH
69961: LD_INT 1
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_INT 4
69970: NEG
69971: PUSH
69972: LD_INT 1
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: PUSH
69979: LD_INT 5
69981: NEG
69982: PUSH
69983: LD_INT 0
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: PUSH
69990: LD_INT 5
69992: NEG
69993: PUSH
69994: LD_INT 1
69996: NEG
69997: PUSH
69998: EMPTY
69999: LIST
70000: LIST
70001: PUSH
70002: LD_INT 5
70004: NEG
70005: PUSH
70006: LD_INT 2
70008: NEG
70009: PUSH
70010: EMPTY
70011: LIST
70012: LIST
70013: PUSH
70014: LD_INT 3
70016: NEG
70017: PUSH
70018: LD_INT 2
70020: PUSH
70021: EMPTY
70022: LIST
70023: LIST
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: LIST
70029: LIST
70030: LIST
70031: LIST
70032: LIST
70033: LIST
70034: LIST
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: ST_TO_ADDR
// end ; end ;
70072: GO 70075
70074: POP
// case btype of b_depot , b_warehouse :
70075: LD_VAR 0 1
70079: PUSH
70080: LD_INT 0
70082: DOUBLE
70083: EQUAL
70084: IFTRUE 70094
70086: LD_INT 1
70088: DOUBLE
70089: EQUAL
70090: IFTRUE 70094
70092: GO 70295
70094: POP
// case nation of nation_american :
70095: LD_VAR 0 5
70099: PUSH
70100: LD_INT 1
70102: DOUBLE
70103: EQUAL
70104: IFTRUE 70108
70106: GO 70164
70108: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70109: LD_ADDR_VAR 0 9
70113: PUSH
70114: LD_VAR 0 11
70118: PUSH
70119: LD_VAR 0 12
70123: PUSH
70124: LD_VAR 0 13
70128: PUSH
70129: LD_VAR 0 14
70133: PUSH
70134: LD_VAR 0 15
70138: PUSH
70139: LD_VAR 0 16
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: LIST
70148: LIST
70149: LIST
70150: LIST
70151: PUSH
70152: LD_VAR 0 4
70156: PUSH
70157: LD_INT 1
70159: PLUS
70160: ARRAY
70161: ST_TO_ADDR
70162: GO 70293
70164: LD_INT 2
70166: DOUBLE
70167: EQUAL
70168: IFTRUE 70172
70170: GO 70228
70172: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70173: LD_ADDR_VAR 0 9
70177: PUSH
70178: LD_VAR 0 17
70182: PUSH
70183: LD_VAR 0 18
70187: PUSH
70188: LD_VAR 0 19
70192: PUSH
70193: LD_VAR 0 20
70197: PUSH
70198: LD_VAR 0 21
70202: PUSH
70203: LD_VAR 0 22
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: LIST
70212: LIST
70213: LIST
70214: LIST
70215: PUSH
70216: LD_VAR 0 4
70220: PUSH
70221: LD_INT 1
70223: PLUS
70224: ARRAY
70225: ST_TO_ADDR
70226: GO 70293
70228: LD_INT 3
70230: DOUBLE
70231: EQUAL
70232: IFTRUE 70236
70234: GO 70292
70236: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70237: LD_ADDR_VAR 0 9
70241: PUSH
70242: LD_VAR 0 23
70246: PUSH
70247: LD_VAR 0 24
70251: PUSH
70252: LD_VAR 0 25
70256: PUSH
70257: LD_VAR 0 26
70261: PUSH
70262: LD_VAR 0 27
70266: PUSH
70267: LD_VAR 0 28
70271: PUSH
70272: EMPTY
70273: LIST
70274: LIST
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: PUSH
70280: LD_VAR 0 4
70284: PUSH
70285: LD_INT 1
70287: PLUS
70288: ARRAY
70289: ST_TO_ADDR
70290: GO 70293
70292: POP
70293: GO 70848
70295: LD_INT 2
70297: DOUBLE
70298: EQUAL
70299: IFTRUE 70309
70301: LD_INT 3
70303: DOUBLE
70304: EQUAL
70305: IFTRUE 70309
70307: GO 70365
70309: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70310: LD_ADDR_VAR 0 9
70314: PUSH
70315: LD_VAR 0 29
70319: PUSH
70320: LD_VAR 0 30
70324: PUSH
70325: LD_VAR 0 31
70329: PUSH
70330: LD_VAR 0 32
70334: PUSH
70335: LD_VAR 0 33
70339: PUSH
70340: LD_VAR 0 34
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: PUSH
70353: LD_VAR 0 4
70357: PUSH
70358: LD_INT 1
70360: PLUS
70361: ARRAY
70362: ST_TO_ADDR
70363: GO 70848
70365: LD_INT 16
70367: DOUBLE
70368: EQUAL
70369: IFTRUE 70427
70371: LD_INT 17
70373: DOUBLE
70374: EQUAL
70375: IFTRUE 70427
70377: LD_INT 18
70379: DOUBLE
70380: EQUAL
70381: IFTRUE 70427
70383: LD_INT 19
70385: DOUBLE
70386: EQUAL
70387: IFTRUE 70427
70389: LD_INT 22
70391: DOUBLE
70392: EQUAL
70393: IFTRUE 70427
70395: LD_INT 20
70397: DOUBLE
70398: EQUAL
70399: IFTRUE 70427
70401: LD_INT 21
70403: DOUBLE
70404: EQUAL
70405: IFTRUE 70427
70407: LD_INT 23
70409: DOUBLE
70410: EQUAL
70411: IFTRUE 70427
70413: LD_INT 24
70415: DOUBLE
70416: EQUAL
70417: IFTRUE 70427
70419: LD_INT 25
70421: DOUBLE
70422: EQUAL
70423: IFTRUE 70427
70425: GO 70483
70427: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70428: LD_ADDR_VAR 0 9
70432: PUSH
70433: LD_VAR 0 35
70437: PUSH
70438: LD_VAR 0 36
70442: PUSH
70443: LD_VAR 0 37
70447: PUSH
70448: LD_VAR 0 38
70452: PUSH
70453: LD_VAR 0 39
70457: PUSH
70458: LD_VAR 0 40
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: LIST
70467: LIST
70468: LIST
70469: LIST
70470: PUSH
70471: LD_VAR 0 4
70475: PUSH
70476: LD_INT 1
70478: PLUS
70479: ARRAY
70480: ST_TO_ADDR
70481: GO 70848
70483: LD_INT 6
70485: DOUBLE
70486: EQUAL
70487: IFTRUE 70539
70489: LD_INT 7
70491: DOUBLE
70492: EQUAL
70493: IFTRUE 70539
70495: LD_INT 8
70497: DOUBLE
70498: EQUAL
70499: IFTRUE 70539
70501: LD_INT 13
70503: DOUBLE
70504: EQUAL
70505: IFTRUE 70539
70507: LD_INT 12
70509: DOUBLE
70510: EQUAL
70511: IFTRUE 70539
70513: LD_INT 15
70515: DOUBLE
70516: EQUAL
70517: IFTRUE 70539
70519: LD_INT 11
70521: DOUBLE
70522: EQUAL
70523: IFTRUE 70539
70525: LD_INT 14
70527: DOUBLE
70528: EQUAL
70529: IFTRUE 70539
70531: LD_INT 10
70533: DOUBLE
70534: EQUAL
70535: IFTRUE 70539
70537: GO 70595
70539: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70540: LD_ADDR_VAR 0 9
70544: PUSH
70545: LD_VAR 0 41
70549: PUSH
70550: LD_VAR 0 42
70554: PUSH
70555: LD_VAR 0 43
70559: PUSH
70560: LD_VAR 0 44
70564: PUSH
70565: LD_VAR 0 45
70569: PUSH
70570: LD_VAR 0 46
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: LIST
70581: LIST
70582: PUSH
70583: LD_VAR 0 4
70587: PUSH
70588: LD_INT 1
70590: PLUS
70591: ARRAY
70592: ST_TO_ADDR
70593: GO 70848
70595: LD_INT 36
70597: DOUBLE
70598: EQUAL
70599: IFTRUE 70603
70601: GO 70659
70603: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70604: LD_ADDR_VAR 0 9
70608: PUSH
70609: LD_VAR 0 47
70613: PUSH
70614: LD_VAR 0 48
70618: PUSH
70619: LD_VAR 0 49
70623: PUSH
70624: LD_VAR 0 50
70628: PUSH
70629: LD_VAR 0 51
70633: PUSH
70634: LD_VAR 0 52
70638: PUSH
70639: EMPTY
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: PUSH
70647: LD_VAR 0 4
70651: PUSH
70652: LD_INT 1
70654: PLUS
70655: ARRAY
70656: ST_TO_ADDR
70657: GO 70848
70659: LD_INT 4
70661: DOUBLE
70662: EQUAL
70663: IFTRUE 70685
70665: LD_INT 5
70667: DOUBLE
70668: EQUAL
70669: IFTRUE 70685
70671: LD_INT 34
70673: DOUBLE
70674: EQUAL
70675: IFTRUE 70685
70677: LD_INT 37
70679: DOUBLE
70680: EQUAL
70681: IFTRUE 70685
70683: GO 70741
70685: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70686: LD_ADDR_VAR 0 9
70690: PUSH
70691: LD_VAR 0 53
70695: PUSH
70696: LD_VAR 0 54
70700: PUSH
70701: LD_VAR 0 55
70705: PUSH
70706: LD_VAR 0 56
70710: PUSH
70711: LD_VAR 0 57
70715: PUSH
70716: LD_VAR 0 58
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: LIST
70725: LIST
70726: LIST
70727: LIST
70728: PUSH
70729: LD_VAR 0 4
70733: PUSH
70734: LD_INT 1
70736: PLUS
70737: ARRAY
70738: ST_TO_ADDR
70739: GO 70848
70741: LD_INT 31
70743: DOUBLE
70744: EQUAL
70745: IFTRUE 70791
70747: LD_INT 32
70749: DOUBLE
70750: EQUAL
70751: IFTRUE 70791
70753: LD_INT 33
70755: DOUBLE
70756: EQUAL
70757: IFTRUE 70791
70759: LD_INT 27
70761: DOUBLE
70762: EQUAL
70763: IFTRUE 70791
70765: LD_INT 26
70767: DOUBLE
70768: EQUAL
70769: IFTRUE 70791
70771: LD_INT 28
70773: DOUBLE
70774: EQUAL
70775: IFTRUE 70791
70777: LD_INT 29
70779: DOUBLE
70780: EQUAL
70781: IFTRUE 70791
70783: LD_INT 30
70785: DOUBLE
70786: EQUAL
70787: IFTRUE 70791
70789: GO 70847
70791: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70792: LD_ADDR_VAR 0 9
70796: PUSH
70797: LD_VAR 0 59
70801: PUSH
70802: LD_VAR 0 60
70806: PUSH
70807: LD_VAR 0 61
70811: PUSH
70812: LD_VAR 0 62
70816: PUSH
70817: LD_VAR 0 63
70821: PUSH
70822: LD_VAR 0 64
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: PUSH
70835: LD_VAR 0 4
70839: PUSH
70840: LD_INT 1
70842: PLUS
70843: ARRAY
70844: ST_TO_ADDR
70845: GO 70848
70847: POP
// temp_list2 = [ ] ;
70848: LD_ADDR_VAR 0 10
70852: PUSH
70853: EMPTY
70854: ST_TO_ADDR
// for i in temp_list do
70855: LD_ADDR_VAR 0 8
70859: PUSH
70860: LD_VAR 0 9
70864: PUSH
70865: FOR_IN
70866: IFFALSE 70918
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70868: LD_ADDR_VAR 0 10
70872: PUSH
70873: LD_VAR 0 10
70877: PUSH
70878: LD_VAR 0 8
70882: PUSH
70883: LD_INT 1
70885: ARRAY
70886: PUSH
70887: LD_VAR 0 2
70891: PLUS
70892: PUSH
70893: LD_VAR 0 8
70897: PUSH
70898: LD_INT 2
70900: ARRAY
70901: PUSH
70902: LD_VAR 0 3
70906: PLUS
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: PUSH
70912: EMPTY
70913: LIST
70914: ADD
70915: ST_TO_ADDR
70916: GO 70865
70918: POP
70919: POP
// result = temp_list2 ;
70920: LD_ADDR_VAR 0 7
70924: PUSH
70925: LD_VAR 0 10
70929: ST_TO_ADDR
// end ;
70930: LD_VAR 0 7
70934: RET
// export function EnemyInRange ( unit , dist ) ; begin
70935: LD_INT 0
70937: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70938: LD_ADDR_VAR 0 3
70942: PUSH
70943: LD_VAR 0 1
70947: PPUSH
70948: CALL_OW 255
70952: PPUSH
70953: LD_VAR 0 1
70957: PPUSH
70958: CALL_OW 250
70962: PPUSH
70963: LD_VAR 0 1
70967: PPUSH
70968: CALL_OW 251
70972: PPUSH
70973: LD_VAR 0 2
70977: PPUSH
70978: CALL 44192 0 4
70982: PUSH
70983: LD_INT 4
70985: ARRAY
70986: ST_TO_ADDR
// end ;
70987: LD_VAR 0 3
70991: RET
// export function PlayerSeeMe ( unit ) ; begin
70992: LD_INT 0
70994: PPUSH
// result := See ( your_side , unit ) ;
70995: LD_ADDR_VAR 0 2
70999: PUSH
71000: LD_OWVAR 2
71004: PPUSH
71005: LD_VAR 0 1
71009: PPUSH
71010: CALL_OW 292
71014: ST_TO_ADDR
// end ;
71015: LD_VAR 0 2
71019: RET
// export function ReverseDir ( unit ) ; begin
71020: LD_INT 0
71022: PPUSH
// if not unit then
71023: LD_VAR 0 1
71027: NOT
71028: IFFALSE 71032
// exit ;
71030: GO 71055
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71032: LD_ADDR_VAR 0 2
71036: PUSH
71037: LD_VAR 0 1
71041: PPUSH
71042: CALL_OW 254
71046: PUSH
71047: LD_INT 3
71049: PLUS
71050: PUSH
71051: LD_INT 6
71053: MOD
71054: ST_TO_ADDR
// end ;
71055: LD_VAR 0 2
71059: RET
// export function ReverseArray ( array ) ; var i ; begin
71060: LD_INT 0
71062: PPUSH
71063: PPUSH
// if not array then
71064: LD_VAR 0 1
71068: NOT
71069: IFFALSE 71073
// exit ;
71071: GO 71128
// result := [ ] ;
71073: LD_ADDR_VAR 0 2
71077: PUSH
71078: EMPTY
71079: ST_TO_ADDR
// for i := array downto 1 do
71080: LD_ADDR_VAR 0 3
71084: PUSH
71085: DOUBLE
71086: LD_VAR 0 1
71090: INC
71091: ST_TO_ADDR
71092: LD_INT 1
71094: PUSH
71095: FOR_DOWNTO
71096: IFFALSE 71126
// result := Join ( result , array [ i ] ) ;
71098: LD_ADDR_VAR 0 2
71102: PUSH
71103: LD_VAR 0 2
71107: PPUSH
71108: LD_VAR 0 1
71112: PUSH
71113: LD_VAR 0 3
71117: ARRAY
71118: PPUSH
71119: CALL 75980 0 2
71123: ST_TO_ADDR
71124: GO 71095
71126: POP
71127: POP
// end ;
71128: LD_VAR 0 2
71132: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71133: LD_INT 0
71135: PPUSH
71136: PPUSH
71137: PPUSH
71138: PPUSH
71139: PPUSH
71140: PPUSH
// if not unit or not hexes then
71141: LD_VAR 0 1
71145: NOT
71146: IFTRUE 71155
71148: PUSH
71149: LD_VAR 0 2
71153: NOT
71154: OR
71155: IFFALSE 71159
// exit ;
71157: GO 71282
// dist := 9999 ;
71159: LD_ADDR_VAR 0 5
71163: PUSH
71164: LD_INT 9999
71166: ST_TO_ADDR
// for i = 1 to hexes do
71167: LD_ADDR_VAR 0 4
71171: PUSH
71172: DOUBLE
71173: LD_INT 1
71175: DEC
71176: ST_TO_ADDR
71177: LD_VAR 0 2
71181: PUSH
71182: FOR_TO
71183: IFFALSE 71270
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71185: LD_ADDR_VAR 0 6
71189: PUSH
71190: LD_VAR 0 1
71194: PPUSH
71195: LD_VAR 0 2
71199: PUSH
71200: LD_VAR 0 4
71204: ARRAY
71205: PUSH
71206: LD_INT 1
71208: ARRAY
71209: PPUSH
71210: LD_VAR 0 2
71214: PUSH
71215: LD_VAR 0 4
71219: ARRAY
71220: PUSH
71221: LD_INT 2
71223: ARRAY
71224: PPUSH
71225: CALL_OW 297
71229: ST_TO_ADDR
// if tdist < dist then
71230: LD_VAR 0 6
71234: PUSH
71235: LD_VAR 0 5
71239: LESS
71240: IFFALSE 71268
// begin hex := hexes [ i ] ;
71242: LD_ADDR_VAR 0 8
71246: PUSH
71247: LD_VAR 0 2
71251: PUSH
71252: LD_VAR 0 4
71256: ARRAY
71257: ST_TO_ADDR
// dist := tdist ;
71258: LD_ADDR_VAR 0 5
71262: PUSH
71263: LD_VAR 0 6
71267: ST_TO_ADDR
// end ; end ;
71268: GO 71182
71270: POP
71271: POP
// result := hex ;
71272: LD_ADDR_VAR 0 3
71276: PUSH
71277: LD_VAR 0 8
71281: ST_TO_ADDR
// end ;
71282: LD_VAR 0 3
71286: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71287: LD_INT 0
71289: PPUSH
71290: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71291: LD_VAR 0 1
71295: NOT
71296: IFTRUE 71335
71298: PUSH
71299: LD_VAR 0 1
71303: PUSH
71304: LD_INT 21
71306: PUSH
71307: LD_INT 2
71309: PUSH
71310: EMPTY
71311: LIST
71312: LIST
71313: PUSH
71314: LD_INT 23
71316: PUSH
71317: LD_INT 2
71319: PUSH
71320: EMPTY
71321: LIST
71322: LIST
71323: PUSH
71324: EMPTY
71325: LIST
71326: LIST
71327: PPUSH
71328: CALL_OW 69
71332: IN
71333: NOT
71334: OR
71335: IFFALSE 71339
// exit ;
71337: GO 71386
// for i = 1 to 3 do
71339: LD_ADDR_VAR 0 3
71343: PUSH
71344: DOUBLE
71345: LD_INT 1
71347: DEC
71348: ST_TO_ADDR
71349: LD_INT 3
71351: PUSH
71352: FOR_TO
71353: IFFALSE 71384
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71355: LD_VAR 0 1
71359: PPUSH
71360: CALL_OW 250
71364: PPUSH
71365: LD_VAR 0 1
71369: PPUSH
71370: CALL_OW 251
71374: PPUSH
71375: LD_INT 1
71377: PPUSH
71378: CALL_OW 453
71382: GO 71352
71384: POP
71385: POP
// end ;
71386: LD_VAR 0 2
71390: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71391: LD_INT 0
71393: PPUSH
71394: PPUSH
71395: PPUSH
71396: PPUSH
71397: PPUSH
71398: PPUSH
// if not unit or not enemy_unit then
71399: LD_VAR 0 1
71403: NOT
71404: IFTRUE 71413
71406: PUSH
71407: LD_VAR 0 2
71411: NOT
71412: OR
71413: IFFALSE 71417
// exit ;
71415: GO 71898
// if GetLives ( i ) < 250 then
71417: LD_VAR 0 4
71421: PPUSH
71422: CALL_OW 256
71426: PUSH
71427: LD_INT 250
71429: LESS
71430: IFFALSE 71443
// begin ComAutodestruct ( i ) ;
71432: LD_VAR 0 4
71436: PPUSH
71437: CALL 71287 0 1
// exit ;
71441: GO 71898
// end ; x := GetX ( enemy_unit ) ;
71443: LD_ADDR_VAR 0 7
71447: PUSH
71448: LD_VAR 0 2
71452: PPUSH
71453: CALL_OW 250
71457: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71458: LD_ADDR_VAR 0 8
71462: PUSH
71463: LD_VAR 0 2
71467: PPUSH
71468: CALL_OW 251
71472: ST_TO_ADDR
// if not x or not y then
71473: LD_VAR 0 7
71477: NOT
71478: IFTRUE 71487
71480: PUSH
71481: LD_VAR 0 8
71485: NOT
71486: OR
71487: IFFALSE 71491
// exit ;
71489: GO 71898
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71491: LD_ADDR_VAR 0 6
71495: PUSH
71496: LD_VAR 0 7
71500: PPUSH
71501: LD_INT 0
71503: PPUSH
71504: LD_INT 4
71506: PPUSH
71507: CALL_OW 272
71511: PUSH
71512: LD_VAR 0 8
71516: PPUSH
71517: LD_INT 0
71519: PPUSH
71520: LD_INT 4
71522: PPUSH
71523: CALL_OW 273
71527: PUSH
71528: EMPTY
71529: LIST
71530: LIST
71531: PUSH
71532: LD_VAR 0 7
71536: PPUSH
71537: LD_INT 1
71539: PPUSH
71540: LD_INT 4
71542: PPUSH
71543: CALL_OW 272
71547: PUSH
71548: LD_VAR 0 8
71552: PPUSH
71553: LD_INT 1
71555: PPUSH
71556: LD_INT 4
71558: PPUSH
71559: CALL_OW 273
71563: PUSH
71564: EMPTY
71565: LIST
71566: LIST
71567: PUSH
71568: LD_VAR 0 7
71572: PPUSH
71573: LD_INT 2
71575: PPUSH
71576: LD_INT 4
71578: PPUSH
71579: CALL_OW 272
71583: PUSH
71584: LD_VAR 0 8
71588: PPUSH
71589: LD_INT 2
71591: PPUSH
71592: LD_INT 4
71594: PPUSH
71595: CALL_OW 273
71599: PUSH
71600: EMPTY
71601: LIST
71602: LIST
71603: PUSH
71604: LD_VAR 0 7
71608: PPUSH
71609: LD_INT 3
71611: PPUSH
71612: LD_INT 4
71614: PPUSH
71615: CALL_OW 272
71619: PUSH
71620: LD_VAR 0 8
71624: PPUSH
71625: LD_INT 3
71627: PPUSH
71628: LD_INT 4
71630: PPUSH
71631: CALL_OW 273
71635: PUSH
71636: EMPTY
71637: LIST
71638: LIST
71639: PUSH
71640: LD_VAR 0 7
71644: PPUSH
71645: LD_INT 4
71647: PPUSH
71648: LD_INT 4
71650: PPUSH
71651: CALL_OW 272
71655: PUSH
71656: LD_VAR 0 8
71660: PPUSH
71661: LD_INT 4
71663: PPUSH
71664: LD_INT 4
71666: PPUSH
71667: CALL_OW 273
71671: PUSH
71672: EMPTY
71673: LIST
71674: LIST
71675: PUSH
71676: LD_VAR 0 7
71680: PPUSH
71681: LD_INT 5
71683: PPUSH
71684: LD_INT 4
71686: PPUSH
71687: CALL_OW 272
71691: PUSH
71692: LD_VAR 0 8
71696: PPUSH
71697: LD_INT 5
71699: PPUSH
71700: LD_INT 4
71702: PPUSH
71703: CALL_OW 273
71707: PUSH
71708: EMPTY
71709: LIST
71710: LIST
71711: PUSH
71712: EMPTY
71713: LIST
71714: LIST
71715: LIST
71716: LIST
71717: LIST
71718: LIST
71719: ST_TO_ADDR
// for i = tmp downto 1 do
71720: LD_ADDR_VAR 0 4
71724: PUSH
71725: DOUBLE
71726: LD_VAR 0 6
71730: INC
71731: ST_TO_ADDR
71732: LD_INT 1
71734: PUSH
71735: FOR_DOWNTO
71736: IFFALSE 71839
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71738: LD_VAR 0 6
71742: PUSH
71743: LD_VAR 0 4
71747: ARRAY
71748: PUSH
71749: LD_INT 1
71751: ARRAY
71752: PPUSH
71753: LD_VAR 0 6
71757: PUSH
71758: LD_VAR 0 4
71762: ARRAY
71763: PUSH
71764: LD_INT 2
71766: ARRAY
71767: PPUSH
71768: CALL_OW 488
71772: NOT
71773: IFTRUE 71815
71775: PUSH
71776: LD_VAR 0 6
71780: PUSH
71781: LD_VAR 0 4
71785: ARRAY
71786: PUSH
71787: LD_INT 1
71789: ARRAY
71790: PPUSH
71791: LD_VAR 0 6
71795: PUSH
71796: LD_VAR 0 4
71800: ARRAY
71801: PUSH
71802: LD_INT 2
71804: ARRAY
71805: PPUSH
71806: CALL_OW 428
71810: PUSH
71811: LD_INT 0
71813: NONEQUAL
71814: OR
71815: IFFALSE 71837
// tmp := Delete ( tmp , i ) ;
71817: LD_ADDR_VAR 0 6
71821: PUSH
71822: LD_VAR 0 6
71826: PPUSH
71827: LD_VAR 0 4
71831: PPUSH
71832: CALL_OW 3
71836: ST_TO_ADDR
71837: GO 71735
71839: POP
71840: POP
// j := GetClosestHex ( unit , tmp ) ;
71841: LD_ADDR_VAR 0 5
71845: PUSH
71846: LD_VAR 0 1
71850: PPUSH
71851: LD_VAR 0 6
71855: PPUSH
71856: CALL 71133 0 2
71860: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71861: LD_VAR 0 1
71865: PPUSH
71866: LD_VAR 0 5
71870: PUSH
71871: LD_INT 1
71873: ARRAY
71874: PPUSH
71875: LD_VAR 0 5
71879: PUSH
71880: LD_INT 2
71882: ARRAY
71883: PPUSH
71884: CALL_OW 111
// result := j ;
71888: LD_ADDR_VAR 0 3
71892: PUSH
71893: LD_VAR 0 5
71897: ST_TO_ADDR
// end ;
71898: LD_VAR 0 3
71902: RET
// export function PrepareApemanSoldier ( ) ; begin
71903: LD_INT 0
71905: PPUSH
// uc_nation := 0 ;
71906: LD_ADDR_OWVAR 21
71910: PUSH
71911: LD_INT 0
71913: ST_TO_ADDR
// hc_sex := sex_male ;
71914: LD_ADDR_OWVAR 27
71918: PUSH
71919: LD_INT 1
71921: ST_TO_ADDR
// hc_name :=  ;
71922: LD_ADDR_OWVAR 26
71926: PUSH
71927: LD_STRING 
71929: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
71930: LD_ADDR_OWVAR 28
71934: PUSH
71935: LD_INT 15
71937: ST_TO_ADDR
// hc_gallery :=  ;
71938: LD_ADDR_OWVAR 33
71942: PUSH
71943: LD_STRING 
71945: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
71946: LD_ADDR_OWVAR 31
71950: PUSH
71951: LD_INT 0
71953: PPUSH
71954: LD_INT 3
71956: PPUSH
71957: CALL_OW 12
71961: PUSH
71962: LD_INT 0
71964: PPUSH
71965: LD_INT 3
71967: PPUSH
71968: CALL_OW 12
71972: PUSH
71973: LD_INT 0
71975: PUSH
71976: LD_INT 0
71978: PUSH
71979: EMPTY
71980: LIST
71981: LIST
71982: LIST
71983: LIST
71984: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
71985: LD_ADDR_OWVAR 29
71989: PUSH
71990: LD_INT 10
71992: PUSH
71993: LD_INT 12
71995: PUSH
71996: EMPTY
71997: LIST
71998: LIST
71999: ST_TO_ADDR
// end ;
72000: LD_VAR 0 1
72004: RET
// export function PrepareApemanEngineer ( ) ; begin
72005: LD_INT 0
72007: PPUSH
// uc_nation := 0 ;
72008: LD_ADDR_OWVAR 21
72012: PUSH
72013: LD_INT 0
72015: ST_TO_ADDR
// hc_sex := sex_male ;
72016: LD_ADDR_OWVAR 27
72020: PUSH
72021: LD_INT 1
72023: ST_TO_ADDR
// hc_name :=  ;
72024: LD_ADDR_OWVAR 26
72028: PUSH
72029: LD_STRING 
72031: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72032: LD_ADDR_OWVAR 28
72036: PUSH
72037: LD_INT 16
72039: ST_TO_ADDR
// hc_gallery :=  ;
72040: LD_ADDR_OWVAR 33
72044: PUSH
72045: LD_STRING 
72047: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72048: LD_ADDR_OWVAR 31
72052: PUSH
72053: LD_INT 0
72055: PPUSH
72056: LD_INT 3
72058: PPUSH
72059: CALL_OW 12
72063: PUSH
72064: LD_INT 0
72066: PPUSH
72067: LD_INT 3
72069: PPUSH
72070: CALL_OW 12
72074: PUSH
72075: LD_INT 0
72077: PUSH
72078: LD_INT 0
72080: PUSH
72081: EMPTY
72082: LIST
72083: LIST
72084: LIST
72085: LIST
72086: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
72087: LD_ADDR_OWVAR 29
72091: PUSH
72092: LD_INT 10
72094: PUSH
72095: LD_INT 12
72097: PUSH
72098: EMPTY
72099: LIST
72100: LIST
72101: ST_TO_ADDR
// end ;
72102: LD_VAR 0 1
72106: RET
// export function PrepareApeman ( agressivity ) ; begin
72107: LD_INT 0
72109: PPUSH
// uc_side := 0 ;
72110: LD_ADDR_OWVAR 20
72114: PUSH
72115: LD_INT 0
72117: ST_TO_ADDR
// uc_nation := 0 ;
72118: LD_ADDR_OWVAR 21
72122: PUSH
72123: LD_INT 0
72125: ST_TO_ADDR
// hc_sex := sex_male ;
72126: LD_ADDR_OWVAR 27
72130: PUSH
72131: LD_INT 1
72133: ST_TO_ADDR
// hc_class := class_apeman ;
72134: LD_ADDR_OWVAR 28
72138: PUSH
72139: LD_INT 12
72141: ST_TO_ADDR
// hc_gallery :=  ;
72142: LD_ADDR_OWVAR 33
72146: PUSH
72147: LD_STRING 
72149: ST_TO_ADDR
// hc_name :=  ;
72150: LD_ADDR_OWVAR 26
72154: PUSH
72155: LD_STRING 
72157: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
72158: LD_ADDR_OWVAR 29
72162: PUSH
72163: LD_INT 10
72165: PUSH
72166: LD_INT 12
72168: PUSH
72169: EMPTY
72170: LIST
72171: LIST
72172: ST_TO_ADDR
// if agressivity = 0 then
72173: LD_VAR 0 1
72177: PUSH
72178: LD_INT 0
72180: EQUAL
72181: IFFALSE 72193
// hc_agressivity := 0 else
72183: LD_ADDR_OWVAR 35
72187: PUSH
72188: LD_INT 0
72190: ST_TO_ADDR
72191: GO 72214
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72193: LD_ADDR_OWVAR 35
72197: PUSH
72198: LD_VAR 0 1
72202: NEG
72203: PPUSH
72204: LD_VAR 0 1
72208: PPUSH
72209: CALL_OW 12
72213: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72214: LD_ADDR_OWVAR 31
72218: PUSH
72219: LD_INT 0
72221: PPUSH
72222: LD_INT 3
72224: PPUSH
72225: CALL_OW 12
72229: PUSH
72230: LD_INT 0
72232: PPUSH
72233: LD_INT 3
72235: PPUSH
72236: CALL_OW 12
72240: PUSH
72241: LD_INT 0
72243: PUSH
72244: LD_INT 0
72246: PUSH
72247: EMPTY
72248: LIST
72249: LIST
72250: LIST
72251: LIST
72252: ST_TO_ADDR
// end ;
72253: LD_VAR 0 2
72257: RET
// export function PrepareTiger ( agressivity ) ; begin
72258: LD_INT 0
72260: PPUSH
// uc_side := 0 ;
72261: LD_ADDR_OWVAR 20
72265: PUSH
72266: LD_INT 0
72268: ST_TO_ADDR
// uc_nation := 0 ;
72269: LD_ADDR_OWVAR 21
72273: PUSH
72274: LD_INT 0
72276: ST_TO_ADDR
// InitHc ;
72277: CALL_OW 19
// hc_class := class_tiger ;
72281: LD_ADDR_OWVAR 28
72285: PUSH
72286: LD_INT 14
72288: ST_TO_ADDR
// hc_gallery :=  ;
72289: LD_ADDR_OWVAR 33
72293: PUSH
72294: LD_STRING 
72296: ST_TO_ADDR
// hc_name :=  ;
72297: LD_ADDR_OWVAR 26
72301: PUSH
72302: LD_STRING 
72304: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72305: LD_ADDR_OWVAR 35
72309: PUSH
72310: LD_VAR 0 1
72314: NEG
72315: PPUSH
72316: LD_VAR 0 1
72320: PPUSH
72321: CALL_OW 12
72325: ST_TO_ADDR
// end ;
72326: LD_VAR 0 2
72330: RET
// export function PrepareEnchidna ( ) ; begin
72331: LD_INT 0
72333: PPUSH
// uc_side := 0 ;
72334: LD_ADDR_OWVAR 20
72338: PUSH
72339: LD_INT 0
72341: ST_TO_ADDR
// uc_nation := 0 ;
72342: LD_ADDR_OWVAR 21
72346: PUSH
72347: LD_INT 0
72349: ST_TO_ADDR
// InitHc ;
72350: CALL_OW 19
// hc_class := class_baggie ;
72354: LD_ADDR_OWVAR 28
72358: PUSH
72359: LD_INT 13
72361: ST_TO_ADDR
// hc_gallery :=  ;
72362: LD_ADDR_OWVAR 33
72366: PUSH
72367: LD_STRING 
72369: ST_TO_ADDR
// hc_name :=  ;
72370: LD_ADDR_OWVAR 26
72374: PUSH
72375: LD_STRING 
72377: ST_TO_ADDR
// end ;
72378: LD_VAR 0 1
72382: RET
// export function PrepareFrog ( ) ; begin
72383: LD_INT 0
72385: PPUSH
// uc_side := 0 ;
72386: LD_ADDR_OWVAR 20
72390: PUSH
72391: LD_INT 0
72393: ST_TO_ADDR
// uc_nation := 0 ;
72394: LD_ADDR_OWVAR 21
72398: PUSH
72399: LD_INT 0
72401: ST_TO_ADDR
// InitHc ;
72402: CALL_OW 19
// hc_class := class_frog ;
72406: LD_ADDR_OWVAR 28
72410: PUSH
72411: LD_INT 19
72413: ST_TO_ADDR
// hc_gallery :=  ;
72414: LD_ADDR_OWVAR 33
72418: PUSH
72419: LD_STRING 
72421: ST_TO_ADDR
// hc_name :=  ;
72422: LD_ADDR_OWVAR 26
72426: PUSH
72427: LD_STRING 
72429: ST_TO_ADDR
// end ;
72430: LD_VAR 0 1
72434: RET
// export function PrepareFish ( ) ; begin
72435: LD_INT 0
72437: PPUSH
// uc_side := 0 ;
72438: LD_ADDR_OWVAR 20
72442: PUSH
72443: LD_INT 0
72445: ST_TO_ADDR
// uc_nation := 0 ;
72446: LD_ADDR_OWVAR 21
72450: PUSH
72451: LD_INT 0
72453: ST_TO_ADDR
// InitHc ;
72454: CALL_OW 19
// hc_class := class_fish ;
72458: LD_ADDR_OWVAR 28
72462: PUSH
72463: LD_INT 20
72465: ST_TO_ADDR
// hc_gallery :=  ;
72466: LD_ADDR_OWVAR 33
72470: PUSH
72471: LD_STRING 
72473: ST_TO_ADDR
// hc_name :=  ;
72474: LD_ADDR_OWVAR 26
72478: PUSH
72479: LD_STRING 
72481: ST_TO_ADDR
// end ;
72482: LD_VAR 0 1
72486: RET
// export function PrepareBird ( ) ; begin
72487: LD_INT 0
72489: PPUSH
// uc_side := 0 ;
72490: LD_ADDR_OWVAR 20
72494: PUSH
72495: LD_INT 0
72497: ST_TO_ADDR
// uc_nation := 0 ;
72498: LD_ADDR_OWVAR 21
72502: PUSH
72503: LD_INT 0
72505: ST_TO_ADDR
// InitHc ;
72506: CALL_OW 19
// hc_class := class_phororhacos ;
72510: LD_ADDR_OWVAR 28
72514: PUSH
72515: LD_INT 18
72517: ST_TO_ADDR
// hc_gallery :=  ;
72518: LD_ADDR_OWVAR 33
72522: PUSH
72523: LD_STRING 
72525: ST_TO_ADDR
// hc_name :=  ;
72526: LD_ADDR_OWVAR 26
72530: PUSH
72531: LD_STRING 
72533: ST_TO_ADDR
// end ;
72534: LD_VAR 0 1
72538: RET
// export function PrepareHorse ( ) ; begin
72539: LD_INT 0
72541: PPUSH
// uc_side := 0 ;
72542: LD_ADDR_OWVAR 20
72546: PUSH
72547: LD_INT 0
72549: ST_TO_ADDR
// uc_nation := 0 ;
72550: LD_ADDR_OWVAR 21
72554: PUSH
72555: LD_INT 0
72557: ST_TO_ADDR
// InitHc ;
72558: CALL_OW 19
// hc_class := class_horse ;
72562: LD_ADDR_OWVAR 28
72566: PUSH
72567: LD_INT 21
72569: ST_TO_ADDR
// hc_gallery :=  ;
72570: LD_ADDR_OWVAR 33
72574: PUSH
72575: LD_STRING 
72577: ST_TO_ADDR
// hc_name :=  ;
72578: LD_ADDR_OWVAR 26
72582: PUSH
72583: LD_STRING 
72585: ST_TO_ADDR
// end ;
72586: LD_VAR 0 1
72590: RET
// export function PrepareMastodont ( ) ; begin
72591: LD_INT 0
72593: PPUSH
// uc_side := 0 ;
72594: LD_ADDR_OWVAR 20
72598: PUSH
72599: LD_INT 0
72601: ST_TO_ADDR
// uc_nation := 0 ;
72602: LD_ADDR_OWVAR 21
72606: PUSH
72607: LD_INT 0
72609: ST_TO_ADDR
// vc_chassis := class_mastodont ;
72610: LD_ADDR_OWVAR 37
72614: PUSH
72615: LD_INT 31
72617: ST_TO_ADDR
// vc_control := control_rider ;
72618: LD_ADDR_OWVAR 38
72622: PUSH
72623: LD_INT 4
72625: ST_TO_ADDR
// end ;
72626: LD_VAR 0 1
72630: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72631: LD_INT 0
72633: PPUSH
72634: PPUSH
72635: PPUSH
// uc_side = 0 ;
72636: LD_ADDR_OWVAR 20
72640: PUSH
72641: LD_INT 0
72643: ST_TO_ADDR
// uc_nation = 0 ;
72644: LD_ADDR_OWVAR 21
72648: PUSH
72649: LD_INT 0
72651: ST_TO_ADDR
// InitHc_All ( ) ;
72652: CALL_OW 584
// InitVc ;
72656: CALL_OW 20
// if mastodonts then
72660: LD_VAR 0 6
72664: IFFALSE 72731
// for i = 1 to mastodonts do
72666: LD_ADDR_VAR 0 11
72670: PUSH
72671: DOUBLE
72672: LD_INT 1
72674: DEC
72675: ST_TO_ADDR
72676: LD_VAR 0 6
72680: PUSH
72681: FOR_TO
72682: IFFALSE 72729
// begin vc_chassis := 31 ;
72684: LD_ADDR_OWVAR 37
72688: PUSH
72689: LD_INT 31
72691: ST_TO_ADDR
// vc_control := control_rider ;
72692: LD_ADDR_OWVAR 38
72696: PUSH
72697: LD_INT 4
72699: ST_TO_ADDR
// animal := CreateVehicle ;
72700: LD_ADDR_VAR 0 12
72704: PUSH
72705: CALL_OW 45
72709: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72710: LD_VAR 0 12
72714: PPUSH
72715: LD_VAR 0 8
72719: PPUSH
72720: LD_INT 0
72722: PPUSH
72723: CALL 74873 0 3
// end ;
72727: GO 72681
72729: POP
72730: POP
// if horses then
72731: LD_VAR 0 5
72735: IFFALSE 72802
// for i = 1 to horses do
72737: LD_ADDR_VAR 0 11
72741: PUSH
72742: DOUBLE
72743: LD_INT 1
72745: DEC
72746: ST_TO_ADDR
72747: LD_VAR 0 5
72751: PUSH
72752: FOR_TO
72753: IFFALSE 72800
// begin hc_class := 21 ;
72755: LD_ADDR_OWVAR 28
72759: PUSH
72760: LD_INT 21
72762: ST_TO_ADDR
// hc_gallery :=  ;
72763: LD_ADDR_OWVAR 33
72767: PUSH
72768: LD_STRING 
72770: ST_TO_ADDR
// animal := CreateHuman ;
72771: LD_ADDR_VAR 0 12
72775: PUSH
72776: CALL_OW 44
72780: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72781: LD_VAR 0 12
72785: PPUSH
72786: LD_VAR 0 8
72790: PPUSH
72791: LD_INT 0
72793: PPUSH
72794: CALL 74873 0 3
// end ;
72798: GO 72752
72800: POP
72801: POP
// if birds then
72802: LD_VAR 0 1
72806: IFFALSE 72873
// for i = 1 to birds do
72808: LD_ADDR_VAR 0 11
72812: PUSH
72813: DOUBLE
72814: LD_INT 1
72816: DEC
72817: ST_TO_ADDR
72818: LD_VAR 0 1
72822: PUSH
72823: FOR_TO
72824: IFFALSE 72871
// begin hc_class := 18 ;
72826: LD_ADDR_OWVAR 28
72830: PUSH
72831: LD_INT 18
72833: ST_TO_ADDR
// hc_gallery =  ;
72834: LD_ADDR_OWVAR 33
72838: PUSH
72839: LD_STRING 
72841: ST_TO_ADDR
// animal := CreateHuman ;
72842: LD_ADDR_VAR 0 12
72846: PUSH
72847: CALL_OW 44
72851: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72852: LD_VAR 0 12
72856: PPUSH
72857: LD_VAR 0 8
72861: PPUSH
72862: LD_INT 0
72864: PPUSH
72865: CALL 74873 0 3
// end ;
72869: GO 72823
72871: POP
72872: POP
// if tigers then
72873: LD_VAR 0 2
72877: IFFALSE 72961
// for i = 1 to tigers do
72879: LD_ADDR_VAR 0 11
72883: PUSH
72884: DOUBLE
72885: LD_INT 1
72887: DEC
72888: ST_TO_ADDR
72889: LD_VAR 0 2
72893: PUSH
72894: FOR_TO
72895: IFFALSE 72959
// begin hc_class = class_tiger ;
72897: LD_ADDR_OWVAR 28
72901: PUSH
72902: LD_INT 14
72904: ST_TO_ADDR
// hc_gallery =  ;
72905: LD_ADDR_OWVAR 33
72909: PUSH
72910: LD_STRING 
72912: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72913: LD_ADDR_OWVAR 35
72917: PUSH
72918: LD_INT 7
72920: NEG
72921: PPUSH
72922: LD_INT 7
72924: PPUSH
72925: CALL_OW 12
72929: ST_TO_ADDR
// animal := CreateHuman ;
72930: LD_ADDR_VAR 0 12
72934: PUSH
72935: CALL_OW 44
72939: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72940: LD_VAR 0 12
72944: PPUSH
72945: LD_VAR 0 8
72949: PPUSH
72950: LD_INT 0
72952: PPUSH
72953: CALL 74873 0 3
// end ;
72957: GO 72894
72959: POP
72960: POP
// if apemans then
72961: LD_VAR 0 3
72965: IFFALSE 73088
// for i = 1 to apemans do
72967: LD_ADDR_VAR 0 11
72971: PUSH
72972: DOUBLE
72973: LD_INT 1
72975: DEC
72976: ST_TO_ADDR
72977: LD_VAR 0 3
72981: PUSH
72982: FOR_TO
72983: IFFALSE 73086
// begin hc_class = class_apeman ;
72985: LD_ADDR_OWVAR 28
72989: PUSH
72990: LD_INT 12
72992: ST_TO_ADDR
// hc_gallery =  ;
72993: LD_ADDR_OWVAR 33
72997: PUSH
72998: LD_STRING 
73000: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73001: LD_ADDR_OWVAR 35
73005: PUSH
73006: LD_INT 2
73008: NEG
73009: PPUSH
73010: LD_INT 2
73012: PPUSH
73013: CALL_OW 12
73017: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73018: LD_ADDR_OWVAR 31
73022: PUSH
73023: LD_INT 1
73025: PPUSH
73026: LD_INT 3
73028: PPUSH
73029: CALL_OW 12
73033: PUSH
73034: LD_INT 1
73036: PPUSH
73037: LD_INT 3
73039: PPUSH
73040: CALL_OW 12
73044: PUSH
73045: LD_INT 0
73047: PUSH
73048: LD_INT 0
73050: PUSH
73051: EMPTY
73052: LIST
73053: LIST
73054: LIST
73055: LIST
73056: ST_TO_ADDR
// animal := CreateHuman ;
73057: LD_ADDR_VAR 0 12
73061: PUSH
73062: CALL_OW 44
73066: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73067: LD_VAR 0 12
73071: PPUSH
73072: LD_VAR 0 8
73076: PPUSH
73077: LD_INT 0
73079: PPUSH
73080: CALL 74873 0 3
// end ;
73084: GO 72982
73086: POP
73087: POP
// if enchidnas then
73088: LD_VAR 0 4
73092: IFFALSE 73159
// for i = 1 to enchidnas do
73094: LD_ADDR_VAR 0 11
73098: PUSH
73099: DOUBLE
73100: LD_INT 1
73102: DEC
73103: ST_TO_ADDR
73104: LD_VAR 0 4
73108: PUSH
73109: FOR_TO
73110: IFFALSE 73157
// begin hc_class = 13 ;
73112: LD_ADDR_OWVAR 28
73116: PUSH
73117: LD_INT 13
73119: ST_TO_ADDR
// hc_gallery =  ;
73120: LD_ADDR_OWVAR 33
73124: PUSH
73125: LD_STRING 
73127: ST_TO_ADDR
// animal := CreateHuman ;
73128: LD_ADDR_VAR 0 12
73132: PUSH
73133: CALL_OW 44
73137: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73138: LD_VAR 0 12
73142: PPUSH
73143: LD_VAR 0 8
73147: PPUSH
73148: LD_INT 0
73150: PPUSH
73151: CALL 74873 0 3
// end ;
73155: GO 73109
73157: POP
73158: POP
// if fishes then
73159: LD_VAR 0 7
73163: IFFALSE 73230
// for i = 1 to fishes do
73165: LD_ADDR_VAR 0 11
73169: PUSH
73170: DOUBLE
73171: LD_INT 1
73173: DEC
73174: ST_TO_ADDR
73175: LD_VAR 0 7
73179: PUSH
73180: FOR_TO
73181: IFFALSE 73228
// begin hc_class = 20 ;
73183: LD_ADDR_OWVAR 28
73187: PUSH
73188: LD_INT 20
73190: ST_TO_ADDR
// hc_gallery =  ;
73191: LD_ADDR_OWVAR 33
73195: PUSH
73196: LD_STRING 
73198: ST_TO_ADDR
// animal := CreateHuman ;
73199: LD_ADDR_VAR 0 12
73203: PUSH
73204: CALL_OW 44
73208: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73209: LD_VAR 0 12
73213: PPUSH
73214: LD_VAR 0 9
73218: PPUSH
73219: LD_INT 0
73221: PPUSH
73222: CALL 74873 0 3
// end ;
73226: GO 73180
73228: POP
73229: POP
// end ;
73230: LD_VAR 0 10
73234: RET
// export function WantHeal ( sci , unit ) ; begin
73235: LD_INT 0
73237: PPUSH
// if GetTaskList ( sci ) > 0 then
73238: LD_VAR 0 1
73242: PPUSH
73243: CALL_OW 437
73247: PUSH
73248: LD_INT 0
73250: GREATER
73251: IFFALSE 73323
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73253: LD_VAR 0 1
73257: PPUSH
73258: CALL_OW 437
73262: PUSH
73263: LD_INT 1
73265: ARRAY
73266: PUSH
73267: LD_INT 1
73269: ARRAY
73270: PUSH
73271: LD_STRING l
73273: EQUAL
73274: IFFALSE 73301
73276: PUSH
73277: LD_VAR 0 1
73281: PPUSH
73282: CALL_OW 437
73286: PUSH
73287: LD_INT 1
73289: ARRAY
73290: PUSH
73291: LD_INT 4
73293: ARRAY
73294: PUSH
73295: LD_VAR 0 2
73299: EQUAL
73300: AND
73301: IFFALSE 73313
// result := true else
73303: LD_ADDR_VAR 0 3
73307: PUSH
73308: LD_INT 1
73310: ST_TO_ADDR
73311: GO 73321
// result := false ;
73313: LD_ADDR_VAR 0 3
73317: PUSH
73318: LD_INT 0
73320: ST_TO_ADDR
// end else
73321: GO 73331
// result := false ;
73323: LD_ADDR_VAR 0 3
73327: PUSH
73328: LD_INT 0
73330: ST_TO_ADDR
// end ;
73331: LD_VAR 0 3
73335: RET
// export function HealTarget ( sci ) ; begin
73336: LD_INT 0
73338: PPUSH
// if not sci then
73339: LD_VAR 0 1
73343: NOT
73344: IFFALSE 73348
// exit ;
73346: GO 73413
// result := 0 ;
73348: LD_ADDR_VAR 0 2
73352: PUSH
73353: LD_INT 0
73355: ST_TO_ADDR
// if GetTaskList ( sci ) then
73356: LD_VAR 0 1
73360: PPUSH
73361: CALL_OW 437
73365: IFFALSE 73413
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73367: LD_VAR 0 1
73371: PPUSH
73372: CALL_OW 437
73376: PUSH
73377: LD_INT 1
73379: ARRAY
73380: PUSH
73381: LD_INT 1
73383: ARRAY
73384: PUSH
73385: LD_STRING l
73387: EQUAL
73388: IFFALSE 73413
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73390: LD_ADDR_VAR 0 2
73394: PUSH
73395: LD_VAR 0 1
73399: PPUSH
73400: CALL_OW 437
73404: PUSH
73405: LD_INT 1
73407: ARRAY
73408: PUSH
73409: LD_INT 4
73411: ARRAY
73412: ST_TO_ADDR
// end ;
73413: LD_VAR 0 2
73417: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73418: LD_INT 0
73420: PPUSH
73421: PPUSH
73422: PPUSH
73423: PPUSH
// if not base_units then
73424: LD_VAR 0 1
73428: NOT
73429: IFFALSE 73433
// exit ;
73431: GO 73520
// result := false ;
73433: LD_ADDR_VAR 0 2
73437: PUSH
73438: LD_INT 0
73440: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73441: LD_ADDR_VAR 0 5
73445: PUSH
73446: LD_VAR 0 1
73450: PPUSH
73451: LD_INT 21
73453: PUSH
73454: LD_INT 3
73456: PUSH
73457: EMPTY
73458: LIST
73459: LIST
73460: PPUSH
73461: CALL_OW 72
73465: ST_TO_ADDR
// if not tmp then
73466: LD_VAR 0 5
73470: NOT
73471: IFFALSE 73475
// exit ;
73473: GO 73520
// for i in tmp do
73475: LD_ADDR_VAR 0 3
73479: PUSH
73480: LD_VAR 0 5
73484: PUSH
73485: FOR_IN
73486: IFFALSE 73518
// begin result := EnemyInRange ( i , 22 ) ;
73488: LD_ADDR_VAR 0 2
73492: PUSH
73493: LD_VAR 0 3
73497: PPUSH
73498: LD_INT 22
73500: PPUSH
73501: CALL 70935 0 2
73505: ST_TO_ADDR
// if result then
73506: LD_VAR 0 2
73510: IFFALSE 73516
// exit ;
73512: POP
73513: POP
73514: GO 73520
// end ;
73516: GO 73485
73518: POP
73519: POP
// end ;
73520: LD_VAR 0 2
73524: RET
// export function FilterByTag ( units , tag ) ; begin
73525: LD_INT 0
73527: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73528: LD_ADDR_VAR 0 3
73532: PUSH
73533: LD_VAR 0 1
73537: PPUSH
73538: LD_INT 120
73540: PUSH
73541: LD_VAR 0 2
73545: PUSH
73546: EMPTY
73547: LIST
73548: LIST
73549: PPUSH
73550: CALL_OW 72
73554: ST_TO_ADDR
// end ;
73555: LD_VAR 0 3
73559: RET
// export function IsDriver ( un ) ; begin
73560: LD_INT 0
73562: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73563: LD_ADDR_VAR 0 2
73567: PUSH
73568: LD_VAR 0 1
73572: PUSH
73573: LD_INT 55
73575: PUSH
73576: EMPTY
73577: LIST
73578: PPUSH
73579: CALL_OW 69
73583: IN
73584: ST_TO_ADDR
// end ;
73585: LD_VAR 0 2
73589: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73590: LD_INT 0
73592: PPUSH
73593: PPUSH
// list := [ ] ;
73594: LD_ADDR_VAR 0 5
73598: PUSH
73599: EMPTY
73600: ST_TO_ADDR
// case d of 0 :
73601: LD_VAR 0 3
73605: PUSH
73606: LD_INT 0
73608: DOUBLE
73609: EQUAL
73610: IFTRUE 73614
73612: GO 73747
73614: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73615: LD_ADDR_VAR 0 5
73619: PUSH
73620: LD_VAR 0 1
73624: PUSH
73625: LD_INT 4
73627: MINUS
73628: PUSH
73629: LD_VAR 0 2
73633: PUSH
73634: LD_INT 4
73636: MINUS
73637: PUSH
73638: LD_INT 2
73640: PUSH
73641: EMPTY
73642: LIST
73643: LIST
73644: LIST
73645: PUSH
73646: LD_VAR 0 1
73650: PUSH
73651: LD_INT 3
73653: MINUS
73654: PUSH
73655: LD_VAR 0 2
73659: PUSH
73660: LD_INT 1
73662: PUSH
73663: EMPTY
73664: LIST
73665: LIST
73666: LIST
73667: PUSH
73668: LD_VAR 0 1
73672: PUSH
73673: LD_INT 4
73675: PLUS
73676: PUSH
73677: LD_VAR 0 2
73681: PUSH
73682: LD_INT 4
73684: PUSH
73685: EMPTY
73686: LIST
73687: LIST
73688: LIST
73689: PUSH
73690: LD_VAR 0 1
73694: PUSH
73695: LD_INT 3
73697: PLUS
73698: PUSH
73699: LD_VAR 0 2
73703: PUSH
73704: LD_INT 3
73706: PLUS
73707: PUSH
73708: LD_INT 5
73710: PUSH
73711: EMPTY
73712: LIST
73713: LIST
73714: LIST
73715: PUSH
73716: LD_VAR 0 1
73720: PUSH
73721: LD_VAR 0 2
73725: PUSH
73726: LD_INT 4
73728: PLUS
73729: PUSH
73730: LD_INT 0
73732: PUSH
73733: EMPTY
73734: LIST
73735: LIST
73736: LIST
73737: PUSH
73738: EMPTY
73739: LIST
73740: LIST
73741: LIST
73742: LIST
73743: LIST
73744: ST_TO_ADDR
// end ; 1 :
73745: GO 74445
73747: LD_INT 1
73749: DOUBLE
73750: EQUAL
73751: IFTRUE 73755
73753: GO 73888
73755: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73756: LD_ADDR_VAR 0 5
73760: PUSH
73761: LD_VAR 0 1
73765: PUSH
73766: LD_VAR 0 2
73770: PUSH
73771: LD_INT 4
73773: MINUS
73774: PUSH
73775: LD_INT 3
73777: PUSH
73778: EMPTY
73779: LIST
73780: LIST
73781: LIST
73782: PUSH
73783: LD_VAR 0 1
73787: PUSH
73788: LD_INT 3
73790: MINUS
73791: PUSH
73792: LD_VAR 0 2
73796: PUSH
73797: LD_INT 3
73799: MINUS
73800: PUSH
73801: LD_INT 2
73803: PUSH
73804: EMPTY
73805: LIST
73806: LIST
73807: LIST
73808: PUSH
73809: LD_VAR 0 1
73813: PUSH
73814: LD_INT 4
73816: MINUS
73817: PUSH
73818: LD_VAR 0 2
73822: PUSH
73823: LD_INT 1
73825: PUSH
73826: EMPTY
73827: LIST
73828: LIST
73829: LIST
73830: PUSH
73831: LD_VAR 0 1
73835: PUSH
73836: LD_VAR 0 2
73840: PUSH
73841: LD_INT 3
73843: PLUS
73844: PUSH
73845: LD_INT 0
73847: PUSH
73848: EMPTY
73849: LIST
73850: LIST
73851: LIST
73852: PUSH
73853: LD_VAR 0 1
73857: PUSH
73858: LD_INT 4
73860: PLUS
73861: PUSH
73862: LD_VAR 0 2
73866: PUSH
73867: LD_INT 4
73869: PLUS
73870: PUSH
73871: LD_INT 5
73873: PUSH
73874: EMPTY
73875: LIST
73876: LIST
73877: LIST
73878: PUSH
73879: EMPTY
73880: LIST
73881: LIST
73882: LIST
73883: LIST
73884: LIST
73885: ST_TO_ADDR
// end ; 2 :
73886: GO 74445
73888: LD_INT 2
73890: DOUBLE
73891: EQUAL
73892: IFTRUE 73896
73894: GO 74025
73896: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73897: LD_ADDR_VAR 0 5
73901: PUSH
73902: LD_VAR 0 1
73906: PUSH
73907: LD_VAR 0 2
73911: PUSH
73912: LD_INT 3
73914: MINUS
73915: PUSH
73916: LD_INT 3
73918: PUSH
73919: EMPTY
73920: LIST
73921: LIST
73922: LIST
73923: PUSH
73924: LD_VAR 0 1
73928: PUSH
73929: LD_INT 4
73931: PLUS
73932: PUSH
73933: LD_VAR 0 2
73937: PUSH
73938: LD_INT 4
73940: PUSH
73941: EMPTY
73942: LIST
73943: LIST
73944: LIST
73945: PUSH
73946: LD_VAR 0 1
73950: PUSH
73951: LD_VAR 0 2
73955: PUSH
73956: LD_INT 4
73958: PLUS
73959: PUSH
73960: LD_INT 0
73962: PUSH
73963: EMPTY
73964: LIST
73965: LIST
73966: LIST
73967: PUSH
73968: LD_VAR 0 1
73972: PUSH
73973: LD_INT 3
73975: MINUS
73976: PUSH
73977: LD_VAR 0 2
73981: PUSH
73982: LD_INT 1
73984: PUSH
73985: EMPTY
73986: LIST
73987: LIST
73988: LIST
73989: PUSH
73990: LD_VAR 0 1
73994: PUSH
73995: LD_INT 4
73997: MINUS
73998: PUSH
73999: LD_VAR 0 2
74003: PUSH
74004: LD_INT 4
74006: MINUS
74007: PUSH
74008: LD_INT 2
74010: PUSH
74011: EMPTY
74012: LIST
74013: LIST
74014: LIST
74015: PUSH
74016: EMPTY
74017: LIST
74018: LIST
74019: LIST
74020: LIST
74021: LIST
74022: ST_TO_ADDR
// end ; 3 :
74023: GO 74445
74025: LD_INT 3
74027: DOUBLE
74028: EQUAL
74029: IFTRUE 74033
74031: GO 74166
74033: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74034: LD_ADDR_VAR 0 5
74038: PUSH
74039: LD_VAR 0 1
74043: PUSH
74044: LD_INT 3
74046: PLUS
74047: PUSH
74048: LD_VAR 0 2
74052: PUSH
74053: LD_INT 4
74055: PUSH
74056: EMPTY
74057: LIST
74058: LIST
74059: LIST
74060: PUSH
74061: LD_VAR 0 1
74065: PUSH
74066: LD_INT 4
74068: PLUS
74069: PUSH
74070: LD_VAR 0 2
74074: PUSH
74075: LD_INT 4
74077: PLUS
74078: PUSH
74079: LD_INT 5
74081: PUSH
74082: EMPTY
74083: LIST
74084: LIST
74085: LIST
74086: PUSH
74087: LD_VAR 0 1
74091: PUSH
74092: LD_INT 4
74094: MINUS
74095: PUSH
74096: LD_VAR 0 2
74100: PUSH
74101: LD_INT 1
74103: PUSH
74104: EMPTY
74105: LIST
74106: LIST
74107: LIST
74108: PUSH
74109: LD_VAR 0 1
74113: PUSH
74114: LD_VAR 0 2
74118: PUSH
74119: LD_INT 4
74121: MINUS
74122: PUSH
74123: LD_INT 3
74125: PUSH
74126: EMPTY
74127: LIST
74128: LIST
74129: LIST
74130: PUSH
74131: LD_VAR 0 1
74135: PUSH
74136: LD_INT 3
74138: MINUS
74139: PUSH
74140: LD_VAR 0 2
74144: PUSH
74145: LD_INT 3
74147: MINUS
74148: PUSH
74149: LD_INT 2
74151: PUSH
74152: EMPTY
74153: LIST
74154: LIST
74155: LIST
74156: PUSH
74157: EMPTY
74158: LIST
74159: LIST
74160: LIST
74161: LIST
74162: LIST
74163: ST_TO_ADDR
// end ; 4 :
74164: GO 74445
74166: LD_INT 4
74168: DOUBLE
74169: EQUAL
74170: IFTRUE 74174
74172: GO 74307
74174: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74175: LD_ADDR_VAR 0 5
74179: PUSH
74180: LD_VAR 0 1
74184: PUSH
74185: LD_VAR 0 2
74189: PUSH
74190: LD_INT 4
74192: PLUS
74193: PUSH
74194: LD_INT 0
74196: PUSH
74197: EMPTY
74198: LIST
74199: LIST
74200: LIST
74201: PUSH
74202: LD_VAR 0 1
74206: PUSH
74207: LD_INT 3
74209: PLUS
74210: PUSH
74211: LD_VAR 0 2
74215: PUSH
74216: LD_INT 3
74218: PLUS
74219: PUSH
74220: LD_INT 5
74222: PUSH
74223: EMPTY
74224: LIST
74225: LIST
74226: LIST
74227: PUSH
74228: LD_VAR 0 1
74232: PUSH
74233: LD_INT 4
74235: PLUS
74236: PUSH
74237: LD_VAR 0 2
74241: PUSH
74242: LD_INT 4
74244: PUSH
74245: EMPTY
74246: LIST
74247: LIST
74248: LIST
74249: PUSH
74250: LD_VAR 0 1
74254: PUSH
74255: LD_VAR 0 2
74259: PUSH
74260: LD_INT 3
74262: MINUS
74263: PUSH
74264: LD_INT 3
74266: PUSH
74267: EMPTY
74268: LIST
74269: LIST
74270: LIST
74271: PUSH
74272: LD_VAR 0 1
74276: PUSH
74277: LD_INT 4
74279: MINUS
74280: PUSH
74281: LD_VAR 0 2
74285: PUSH
74286: LD_INT 4
74288: MINUS
74289: PUSH
74290: LD_INT 2
74292: PUSH
74293: EMPTY
74294: LIST
74295: LIST
74296: LIST
74297: PUSH
74298: EMPTY
74299: LIST
74300: LIST
74301: LIST
74302: LIST
74303: LIST
74304: ST_TO_ADDR
// end ; 5 :
74305: GO 74445
74307: LD_INT 5
74309: DOUBLE
74310: EQUAL
74311: IFTRUE 74315
74313: GO 74444
74315: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74316: LD_ADDR_VAR 0 5
74320: PUSH
74321: LD_VAR 0 1
74325: PUSH
74326: LD_INT 4
74328: MINUS
74329: PUSH
74330: LD_VAR 0 2
74334: PUSH
74335: LD_INT 1
74337: PUSH
74338: EMPTY
74339: LIST
74340: LIST
74341: LIST
74342: PUSH
74343: LD_VAR 0 1
74347: PUSH
74348: LD_VAR 0 2
74352: PUSH
74353: LD_INT 4
74355: MINUS
74356: PUSH
74357: LD_INT 3
74359: PUSH
74360: EMPTY
74361: LIST
74362: LIST
74363: LIST
74364: PUSH
74365: LD_VAR 0 1
74369: PUSH
74370: LD_INT 4
74372: PLUS
74373: PUSH
74374: LD_VAR 0 2
74378: PUSH
74379: LD_INT 4
74381: PLUS
74382: PUSH
74383: LD_INT 5
74385: PUSH
74386: EMPTY
74387: LIST
74388: LIST
74389: LIST
74390: PUSH
74391: LD_VAR 0 1
74395: PUSH
74396: LD_INT 3
74398: PLUS
74399: PUSH
74400: LD_VAR 0 2
74404: PUSH
74405: LD_INT 4
74407: PUSH
74408: EMPTY
74409: LIST
74410: LIST
74411: LIST
74412: PUSH
74413: LD_VAR 0 1
74417: PUSH
74418: LD_VAR 0 2
74422: PUSH
74423: LD_INT 3
74425: PLUS
74426: PUSH
74427: LD_INT 0
74429: PUSH
74430: EMPTY
74431: LIST
74432: LIST
74433: LIST
74434: PUSH
74435: EMPTY
74436: LIST
74437: LIST
74438: LIST
74439: LIST
74440: LIST
74441: ST_TO_ADDR
// end ; end ;
74442: GO 74445
74444: POP
// result := list ;
74445: LD_ADDR_VAR 0 4
74449: PUSH
74450: LD_VAR 0 5
74454: ST_TO_ADDR
// end ;
74455: LD_VAR 0 4
74459: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74460: LD_INT 0
74462: PPUSH
74463: PPUSH
74464: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74465: LD_VAR 0 1
74469: NOT
74470: IFTRUE 74498
74472: PUSH
74473: LD_VAR 0 2
74477: PUSH
74478: LD_INT 1
74480: PUSH
74481: LD_INT 2
74483: PUSH
74484: LD_INT 3
74486: PUSH
74487: LD_INT 4
74489: PUSH
74490: EMPTY
74491: LIST
74492: LIST
74493: LIST
74494: LIST
74495: IN
74496: NOT
74497: OR
74498: IFFALSE 74502
// exit ;
74500: GO 74585
// tmp := [ ] ;
74502: LD_ADDR_VAR 0 5
74506: PUSH
74507: EMPTY
74508: ST_TO_ADDR
// for i in units do
74509: LD_ADDR_VAR 0 4
74513: PUSH
74514: LD_VAR 0 1
74518: PUSH
74519: FOR_IN
74520: IFFALSE 74554
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
74522: LD_ADDR_VAR 0 5
74526: PUSH
74527: LD_VAR 0 5
74531: PPUSH
74532: LD_VAR 0 4
74536: PPUSH
74537: LD_VAR 0 2
74541: PPUSH
74542: CALL_OW 259
74546: PPUSH
74547: CALL 75980 0 2
74551: ST_TO_ADDR
74552: GO 74519
74554: POP
74555: POP
// if not tmp then
74556: LD_VAR 0 5
74560: NOT
74561: IFFALSE 74565
// exit ;
74563: GO 74585
// result := SortListByListDesc ( units , tmp ) ;
74565: LD_ADDR_VAR 0 3
74569: PUSH
74570: LD_VAR 0 1
74574: PPUSH
74575: LD_VAR 0 5
74579: PPUSH
74580: CALL_OW 77
74584: ST_TO_ADDR
// end ;
74585: LD_VAR 0 3
74589: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74590: LD_INT 0
74592: PPUSH
74593: PPUSH
74594: PPUSH
// result := false ;
74595: LD_ADDR_VAR 0 3
74599: PUSH
74600: LD_INT 0
74602: ST_TO_ADDR
// if not building then
74603: LD_VAR 0 2
74607: NOT
74608: IFFALSE 74612
// exit ;
74610: GO 74756
// x := GetX ( building ) ;
74612: LD_ADDR_VAR 0 4
74616: PUSH
74617: LD_VAR 0 2
74621: PPUSH
74622: CALL_OW 250
74626: ST_TO_ADDR
// y := GetY ( building ) ;
74627: LD_ADDR_VAR 0 5
74631: PUSH
74632: LD_VAR 0 2
74636: PPUSH
74637: CALL_OW 251
74641: ST_TO_ADDR
// if not x or not y then
74642: LD_VAR 0 4
74646: NOT
74647: IFTRUE 74656
74649: PUSH
74650: LD_VAR 0 5
74654: NOT
74655: OR
74656: IFFALSE 74660
// exit ;
74658: GO 74756
// if GetTaskList ( unit ) then
74660: LD_VAR 0 1
74664: PPUSH
74665: CALL_OW 437
74669: IFFALSE 74756
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74671: LD_STRING e
74673: PUSH
74674: LD_VAR 0 1
74678: PPUSH
74679: CALL_OW 437
74683: PUSH
74684: LD_INT 1
74686: ARRAY
74687: PUSH
74688: LD_INT 1
74690: ARRAY
74691: EQUAL
74692: IFFALSE 74719
74694: PUSH
74695: LD_VAR 0 4
74699: PUSH
74700: LD_VAR 0 1
74704: PPUSH
74705: CALL_OW 437
74709: PUSH
74710: LD_INT 1
74712: ARRAY
74713: PUSH
74714: LD_INT 2
74716: ARRAY
74717: EQUAL
74718: AND
74719: IFFALSE 74746
74721: PUSH
74722: LD_VAR 0 5
74726: PUSH
74727: LD_VAR 0 1
74731: PPUSH
74732: CALL_OW 437
74736: PUSH
74737: LD_INT 1
74739: ARRAY
74740: PUSH
74741: LD_INT 3
74743: ARRAY
74744: EQUAL
74745: AND
74746: IFFALSE 74756
// result := true end ;
74748: LD_ADDR_VAR 0 3
74752: PUSH
74753: LD_INT 1
74755: ST_TO_ADDR
// end ;
74756: LD_VAR 0 3
74760: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74761: LD_INT 0
74763: PPUSH
// result := false ;
74764: LD_ADDR_VAR 0 4
74768: PUSH
74769: LD_INT 0
74771: ST_TO_ADDR
// if GetTaskList ( unit ) then
74772: LD_VAR 0 1
74776: PPUSH
74777: CALL_OW 437
74781: IFFALSE 74868
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74783: LD_STRING M
74785: PUSH
74786: LD_VAR 0 1
74790: PPUSH
74791: CALL_OW 437
74795: PUSH
74796: LD_INT 1
74798: ARRAY
74799: PUSH
74800: LD_INT 1
74802: ARRAY
74803: EQUAL
74804: IFFALSE 74831
74806: PUSH
74807: LD_VAR 0 2
74811: PUSH
74812: LD_VAR 0 1
74816: PPUSH
74817: CALL_OW 437
74821: PUSH
74822: LD_INT 1
74824: ARRAY
74825: PUSH
74826: LD_INT 2
74828: ARRAY
74829: EQUAL
74830: AND
74831: IFFALSE 74858
74833: PUSH
74834: LD_VAR 0 3
74838: PUSH
74839: LD_VAR 0 1
74843: PPUSH
74844: CALL_OW 437
74848: PUSH
74849: LD_INT 1
74851: ARRAY
74852: PUSH
74853: LD_INT 3
74855: ARRAY
74856: EQUAL
74857: AND
74858: IFFALSE 74868
// result := true ;
74860: LD_ADDR_VAR 0 4
74864: PUSH
74865: LD_INT 1
74867: ST_TO_ADDR
// end ; end ;
74868: LD_VAR 0 4
74872: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74873: LD_INT 0
74875: PPUSH
74876: PPUSH
74877: PPUSH
74878: PPUSH
// if not unit or not area then
74879: LD_VAR 0 1
74883: NOT
74884: IFTRUE 74893
74886: PUSH
74887: LD_VAR 0 2
74891: NOT
74892: OR
74893: IFFALSE 74897
// exit ;
74895: GO 75073
// tmp := AreaToList ( area , i ) ;
74897: LD_ADDR_VAR 0 6
74901: PUSH
74902: LD_VAR 0 2
74906: PPUSH
74907: LD_VAR 0 5
74911: PPUSH
74912: CALL_OW 517
74916: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74917: LD_ADDR_VAR 0 5
74921: PUSH
74922: DOUBLE
74923: LD_INT 1
74925: DEC
74926: ST_TO_ADDR
74927: LD_VAR 0 6
74931: PUSH
74932: LD_INT 1
74934: ARRAY
74935: PUSH
74936: FOR_TO
74937: IFFALSE 75071
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74939: LD_ADDR_VAR 0 7
74943: PUSH
74944: LD_VAR 0 6
74948: PUSH
74949: LD_INT 1
74951: ARRAY
74952: PUSH
74953: LD_VAR 0 5
74957: ARRAY
74958: PUSH
74959: LD_VAR 0 6
74963: PUSH
74964: LD_INT 2
74966: ARRAY
74967: PUSH
74968: LD_VAR 0 5
74972: ARRAY
74973: PUSH
74974: EMPTY
74975: LIST
74976: LIST
74977: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
74978: LD_INT 92
74980: PUSH
74981: LD_VAR 0 7
74985: PUSH
74986: LD_INT 1
74988: ARRAY
74989: PUSH
74990: LD_VAR 0 7
74994: PUSH
74995: LD_INT 2
74997: ARRAY
74998: PUSH
74999: LD_INT 2
75001: PUSH
75002: EMPTY
75003: LIST
75004: LIST
75005: LIST
75006: LIST
75007: PPUSH
75008: CALL_OW 69
75012: PUSH
75013: LD_INT 0
75015: EQUAL
75016: IFFALSE 75069
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75018: LD_VAR 0 1
75022: PPUSH
75023: LD_VAR 0 7
75027: PUSH
75028: LD_INT 1
75030: ARRAY
75031: PPUSH
75032: LD_VAR 0 7
75036: PUSH
75037: LD_INT 2
75039: ARRAY
75040: PPUSH
75041: LD_VAR 0 3
75045: PPUSH
75046: CALL_OW 48
// result := IsPlaced ( unit ) ;
75050: LD_ADDR_VAR 0 4
75054: PUSH
75055: LD_VAR 0 1
75059: PPUSH
75060: CALL_OW 305
75064: ST_TO_ADDR
// exit ;
75065: POP
75066: POP
75067: GO 75073
// end ; end ;
75069: GO 74936
75071: POP
75072: POP
// end ;
75073: LD_VAR 0 4
75077: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75078: LD_INT 0
75080: PPUSH
75081: PPUSH
75082: PPUSH
// if not side or side > 8 then
75083: LD_VAR 0 1
75087: NOT
75088: IFTRUE 75100
75090: PUSH
75091: LD_VAR 0 1
75095: PUSH
75096: LD_INT 8
75098: GREATER
75099: OR
75100: IFFALSE 75104
// exit ;
75102: GO 75291
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75104: LD_ADDR_VAR 0 4
75108: PUSH
75109: LD_INT 22
75111: PUSH
75112: LD_VAR 0 1
75116: PUSH
75117: EMPTY
75118: LIST
75119: LIST
75120: PUSH
75121: LD_INT 21
75123: PUSH
75124: LD_INT 3
75126: PUSH
75127: EMPTY
75128: LIST
75129: LIST
75130: PUSH
75131: EMPTY
75132: LIST
75133: LIST
75134: PPUSH
75135: CALL_OW 69
75139: ST_TO_ADDR
// if not tmp then
75140: LD_VAR 0 4
75144: NOT
75145: IFFALSE 75149
// exit ;
75147: GO 75291
// enable_addtolog := true ;
75149: LD_ADDR_OWVAR 81
75153: PUSH
75154: LD_INT 1
75156: ST_TO_ADDR
// AddToLog ( [ ) ;
75157: LD_STRING [
75159: PPUSH
75160: CALL_OW 561
// for i in tmp do
75164: LD_ADDR_VAR 0 3
75168: PUSH
75169: LD_VAR 0 4
75173: PUSH
75174: FOR_IN
75175: IFFALSE 75282
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75177: LD_STRING [
75179: PUSH
75180: LD_VAR 0 3
75184: PPUSH
75185: CALL_OW 266
75189: STR
75190: PUSH
75191: LD_STRING , 
75193: STR
75194: PUSH
75195: LD_VAR 0 3
75199: PPUSH
75200: CALL_OW 250
75204: STR
75205: PUSH
75206: LD_STRING , 
75208: STR
75209: PUSH
75210: LD_VAR 0 3
75214: PPUSH
75215: CALL_OW 251
75219: STR
75220: PUSH
75221: LD_STRING , 
75223: STR
75224: PUSH
75225: LD_VAR 0 3
75229: PPUSH
75230: CALL_OW 254
75234: STR
75235: PUSH
75236: LD_STRING , 
75238: STR
75239: PUSH
75240: LD_VAR 0 3
75244: PPUSH
75245: LD_INT 1
75247: PPUSH
75248: CALL_OW 268
75252: STR
75253: PUSH
75254: LD_STRING , 
75256: STR
75257: PUSH
75258: LD_VAR 0 3
75262: PPUSH
75263: LD_INT 2
75265: PPUSH
75266: CALL_OW 268
75270: STR
75271: PUSH
75272: LD_STRING ],
75274: STR
75275: PPUSH
75276: CALL_OW 561
// end ;
75280: GO 75174
75282: POP
75283: POP
// AddToLog ( ]; ) ;
75284: LD_STRING ];
75286: PPUSH
75287: CALL_OW 561
// end ;
75291: LD_VAR 0 2
75295: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75296: LD_INT 0
75298: PPUSH
75299: PPUSH
75300: PPUSH
75301: PPUSH
75302: PPUSH
// if not area or not rate or not max then
75303: LD_VAR 0 1
75307: NOT
75308: IFTRUE 75317
75310: PUSH
75311: LD_VAR 0 2
75315: NOT
75316: OR
75317: IFTRUE 75326
75319: PUSH
75320: LD_VAR 0 4
75324: NOT
75325: OR
75326: IFFALSE 75330
// exit ;
75328: GO 75519
// while 1 do
75330: LD_INT 1
75332: IFFALSE 75519
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75334: LD_ADDR_VAR 0 9
75338: PUSH
75339: LD_VAR 0 1
75343: PPUSH
75344: LD_INT 1
75346: PPUSH
75347: CALL_OW 287
75351: PUSH
75352: LD_INT 10
75354: MUL
75355: ST_TO_ADDR
// r := rate / 10 ;
75356: LD_ADDR_VAR 0 7
75360: PUSH
75361: LD_VAR 0 2
75365: PUSH
75366: LD_INT 10
75368: DIVREAL
75369: ST_TO_ADDR
// time := 1 1$00 ;
75370: LD_ADDR_VAR 0 8
75374: PUSH
75375: LD_INT 2100
75377: ST_TO_ADDR
// if amount < min then
75378: LD_VAR 0 9
75382: PUSH
75383: LD_VAR 0 3
75387: LESS
75388: IFFALSE 75406
// r := r * 2 else
75390: LD_ADDR_VAR 0 7
75394: PUSH
75395: LD_VAR 0 7
75399: PUSH
75400: LD_INT 2
75402: MUL
75403: ST_TO_ADDR
75404: GO 75432
// if amount > max then
75406: LD_VAR 0 9
75410: PUSH
75411: LD_VAR 0 4
75415: GREATER
75416: IFFALSE 75432
// r := r / 2 ;
75418: LD_ADDR_VAR 0 7
75422: PUSH
75423: LD_VAR 0 7
75427: PUSH
75428: LD_INT 2
75430: DIVREAL
75431: ST_TO_ADDR
// time := time / r ;
75432: LD_ADDR_VAR 0 8
75436: PUSH
75437: LD_VAR 0 8
75441: PUSH
75442: LD_VAR 0 7
75446: DIVREAL
75447: ST_TO_ADDR
// if time < 0 then
75448: LD_VAR 0 8
75452: PUSH
75453: LD_INT 0
75455: LESS
75456: IFFALSE 75473
// time := time * - 1 ;
75458: LD_ADDR_VAR 0 8
75462: PUSH
75463: LD_VAR 0 8
75467: PUSH
75468: LD_INT 1
75470: NEG
75471: MUL
75472: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75473: LD_VAR 0 8
75477: PUSH
75478: LD_INT 35
75480: PPUSH
75481: LD_INT 875
75483: PPUSH
75484: CALL_OW 12
75488: PLUS
75489: PPUSH
75490: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75494: LD_INT 1
75496: PPUSH
75497: LD_INT 5
75499: PPUSH
75500: CALL_OW 12
75504: PPUSH
75505: LD_VAR 0 1
75509: PPUSH
75510: LD_INT 1
75512: PPUSH
75513: CALL_OW 55
// end ;
75517: GO 75330
// end ;
75519: LD_VAR 0 5
75523: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75524: LD_INT 0
75526: PPUSH
75527: PPUSH
75528: PPUSH
75529: PPUSH
75530: PPUSH
75531: PPUSH
75532: PPUSH
75533: PPUSH
// if not turrets or not factories then
75534: LD_VAR 0 1
75538: NOT
75539: IFTRUE 75548
75541: PUSH
75542: LD_VAR 0 2
75546: NOT
75547: OR
75548: IFFALSE 75552
// exit ;
75550: GO 75859
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75552: LD_ADDR_VAR 0 10
75556: PUSH
75557: LD_INT 5
75559: PUSH
75560: LD_INT 6
75562: PUSH
75563: EMPTY
75564: LIST
75565: LIST
75566: PUSH
75567: LD_INT 2
75569: PUSH
75570: LD_INT 4
75572: PUSH
75573: EMPTY
75574: LIST
75575: LIST
75576: PUSH
75577: LD_INT 3
75579: PUSH
75580: LD_INT 5
75582: PUSH
75583: EMPTY
75584: LIST
75585: LIST
75586: PUSH
75587: EMPTY
75588: LIST
75589: LIST
75590: LIST
75591: PUSH
75592: LD_INT 24
75594: PUSH
75595: LD_INT 25
75597: PUSH
75598: EMPTY
75599: LIST
75600: LIST
75601: PUSH
75602: LD_INT 23
75604: PUSH
75605: LD_INT 27
75607: PUSH
75608: EMPTY
75609: LIST
75610: LIST
75611: PUSH
75612: EMPTY
75613: LIST
75614: LIST
75615: PUSH
75616: LD_INT 42
75618: PUSH
75619: LD_INT 43
75621: PUSH
75622: EMPTY
75623: LIST
75624: LIST
75625: PUSH
75626: LD_INT 44
75628: PUSH
75629: LD_INT 46
75631: PUSH
75632: EMPTY
75633: LIST
75634: LIST
75635: PUSH
75636: LD_INT 45
75638: PUSH
75639: LD_INT 47
75641: PUSH
75642: EMPTY
75643: LIST
75644: LIST
75645: PUSH
75646: EMPTY
75647: LIST
75648: LIST
75649: LIST
75650: PUSH
75651: EMPTY
75652: LIST
75653: LIST
75654: LIST
75655: ST_TO_ADDR
// result := [ ] ;
75656: LD_ADDR_VAR 0 3
75660: PUSH
75661: EMPTY
75662: ST_TO_ADDR
// for i in turrets do
75663: LD_ADDR_VAR 0 4
75667: PUSH
75668: LD_VAR 0 1
75672: PUSH
75673: FOR_IN
75674: IFFALSE 75857
// begin nat := GetNation ( i ) ;
75676: LD_ADDR_VAR 0 7
75680: PUSH
75681: LD_VAR 0 4
75685: PPUSH
75686: CALL_OW 248
75690: ST_TO_ADDR
// weapon := 0 ;
75691: LD_ADDR_VAR 0 8
75695: PUSH
75696: LD_INT 0
75698: ST_TO_ADDR
// if not nat then
75699: LD_VAR 0 7
75703: NOT
75704: IFFALSE 75708
// continue ;
75706: GO 75673
// for j in list [ nat ] do
75708: LD_ADDR_VAR 0 5
75712: PUSH
75713: LD_VAR 0 10
75717: PUSH
75718: LD_VAR 0 7
75722: ARRAY
75723: PUSH
75724: FOR_IN
75725: IFFALSE 75766
// if GetBWeapon ( i ) = j [ 1 ] then
75727: LD_VAR 0 4
75731: PPUSH
75732: CALL_OW 269
75736: PUSH
75737: LD_VAR 0 5
75741: PUSH
75742: LD_INT 1
75744: ARRAY
75745: EQUAL
75746: IFFALSE 75764
// begin weapon := j [ 2 ] ;
75748: LD_ADDR_VAR 0 8
75752: PUSH
75753: LD_VAR 0 5
75757: PUSH
75758: LD_INT 2
75760: ARRAY
75761: ST_TO_ADDR
// break ;
75762: GO 75766
// end ;
75764: GO 75724
75766: POP
75767: POP
// if not weapon then
75768: LD_VAR 0 8
75772: NOT
75773: IFFALSE 75777
// continue ;
75775: GO 75673
// for k in factories do
75777: LD_ADDR_VAR 0 6
75781: PUSH
75782: LD_VAR 0 2
75786: PUSH
75787: FOR_IN
75788: IFFALSE 75853
// begin weapons := AvailableWeaponList ( k ) ;
75790: LD_ADDR_VAR 0 9
75794: PUSH
75795: LD_VAR 0 6
75799: PPUSH
75800: CALL_OW 478
75804: ST_TO_ADDR
// if not weapons then
75805: LD_VAR 0 9
75809: NOT
75810: IFFALSE 75814
// continue ;
75812: GO 75787
// if weapon in weapons then
75814: LD_VAR 0 8
75818: PUSH
75819: LD_VAR 0 9
75823: IN
75824: IFFALSE 75851
// begin result := [ i , weapon ] ;
75826: LD_ADDR_VAR 0 3
75830: PUSH
75831: LD_VAR 0 4
75835: PUSH
75836: LD_VAR 0 8
75840: PUSH
75841: EMPTY
75842: LIST
75843: LIST
75844: ST_TO_ADDR
// exit ;
75845: POP
75846: POP
75847: POP
75848: POP
75849: GO 75859
// end ; end ;
75851: GO 75787
75853: POP
75854: POP
// end ;
75855: GO 75673
75857: POP
75858: POP
// end ;
75859: LD_VAR 0 3
75863: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75864: LD_INT 0
75866: PPUSH
// if not side or side > 8 then
75867: LD_VAR 0 3
75871: NOT
75872: IFTRUE 75884
75874: PUSH
75875: LD_VAR 0 3
75879: PUSH
75880: LD_INT 8
75882: GREATER
75883: OR
75884: IFFALSE 75888
// exit ;
75886: GO 75947
// if not range then
75888: LD_VAR 0 4
75892: NOT
75893: IFFALSE 75904
// range := - 12 ;
75895: LD_ADDR_VAR 0 4
75899: PUSH
75900: LD_INT 12
75902: NEG
75903: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75904: LD_VAR 0 1
75908: PPUSH
75909: LD_VAR 0 2
75913: PPUSH
75914: LD_VAR 0 3
75918: PPUSH
75919: LD_VAR 0 4
75923: PPUSH
75924: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75928: LD_VAR 0 1
75932: PPUSH
75933: LD_VAR 0 2
75937: PPUSH
75938: LD_VAR 0 3
75942: PPUSH
75943: CALL_OW 331
// end ;
75947: LD_VAR 0 5
75951: RET
// export function Video ( mode ) ; begin
75952: LD_INT 0
75954: PPUSH
// ingame_video = mode ;
75955: LD_ADDR_OWVAR 52
75959: PUSH
75960: LD_VAR 0 1
75964: ST_TO_ADDR
// interface_hidden = mode ;
75965: LD_ADDR_OWVAR 54
75969: PUSH
75970: LD_VAR 0 1
75974: ST_TO_ADDR
// end ;
75975: LD_VAR 0 2
75979: RET
// export function Join ( array , element ) ; begin
75980: LD_INT 0
75982: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75983: LD_ADDR_VAR 0 3
75987: PUSH
75988: LD_VAR 0 1
75992: PPUSH
75993: LD_VAR 0 1
75997: PUSH
75998: LD_INT 1
76000: PLUS
76001: PPUSH
76002: LD_VAR 0 2
76006: PPUSH
76007: CALL_OW 1
76011: ST_TO_ADDR
// end ;
76012: LD_VAR 0 3
76016: RET
// export function JoinUnion ( array , element ) ; begin
76017: LD_INT 0
76019: PPUSH
// result := array union element ;
76020: LD_ADDR_VAR 0 3
76024: PUSH
76025: LD_VAR 0 1
76029: PUSH
76030: LD_VAR 0 2
76034: UNION
76035: ST_TO_ADDR
// end ;
76036: LD_VAR 0 3
76040: RET
// export function GetBehemoths ( side ) ; begin
76041: LD_INT 0
76043: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76044: LD_ADDR_VAR 0 2
76048: PUSH
76049: LD_INT 22
76051: PUSH
76052: LD_VAR 0 1
76056: PUSH
76057: EMPTY
76058: LIST
76059: LIST
76060: PUSH
76061: LD_INT 31
76063: PUSH
76064: LD_INT 25
76066: PUSH
76067: EMPTY
76068: LIST
76069: LIST
76070: PUSH
76071: EMPTY
76072: LIST
76073: LIST
76074: PPUSH
76075: CALL_OW 69
76079: ST_TO_ADDR
// end ;
76080: LD_VAR 0 2
76084: RET
// export function Shuffle ( array ) ; var i , index ; begin
76085: LD_INT 0
76087: PPUSH
76088: PPUSH
76089: PPUSH
// result := [ ] ;
76090: LD_ADDR_VAR 0 2
76094: PUSH
76095: EMPTY
76096: ST_TO_ADDR
// if not array then
76097: LD_VAR 0 1
76101: NOT
76102: IFFALSE 76106
// exit ;
76104: GO 76205
// Randomize ;
76106: CALL_OW 10
// for i = array downto 1 do
76110: LD_ADDR_VAR 0 3
76114: PUSH
76115: DOUBLE
76116: LD_VAR 0 1
76120: INC
76121: ST_TO_ADDR
76122: LD_INT 1
76124: PUSH
76125: FOR_DOWNTO
76126: IFFALSE 76203
// begin index := rand ( 1 , array ) ;
76128: LD_ADDR_VAR 0 4
76132: PUSH
76133: LD_INT 1
76135: PPUSH
76136: LD_VAR 0 1
76140: PPUSH
76141: CALL_OW 12
76145: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76146: LD_ADDR_VAR 0 2
76150: PUSH
76151: LD_VAR 0 2
76155: PPUSH
76156: LD_VAR 0 2
76160: PUSH
76161: LD_INT 1
76163: PLUS
76164: PPUSH
76165: LD_VAR 0 1
76169: PUSH
76170: LD_VAR 0 4
76174: ARRAY
76175: PPUSH
76176: CALL_OW 2
76180: ST_TO_ADDR
// array := Delete ( array , index ) ;
76181: LD_ADDR_VAR 0 1
76185: PUSH
76186: LD_VAR 0 1
76190: PPUSH
76191: LD_VAR 0 4
76195: PPUSH
76196: CALL_OW 3
76200: ST_TO_ADDR
// end ;
76201: GO 76125
76203: POP
76204: POP
// end ;
76205: LD_VAR 0 2
76209: RET
// export function GetBaseMaterials ( base ) ; begin
76210: LD_INT 0
76212: PPUSH
// result := [ 0 , 0 , 0 ] ;
76213: LD_ADDR_VAR 0 2
76217: PUSH
76218: LD_INT 0
76220: PUSH
76221: LD_INT 0
76223: PUSH
76224: LD_INT 0
76226: PUSH
76227: EMPTY
76228: LIST
76229: LIST
76230: LIST
76231: ST_TO_ADDR
// if not base then
76232: LD_VAR 0 1
76236: NOT
76237: IFFALSE 76241
// exit ;
76239: GO 76290
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76241: LD_ADDR_VAR 0 2
76245: PUSH
76246: LD_VAR 0 1
76250: PPUSH
76251: LD_INT 1
76253: PPUSH
76254: CALL_OW 275
76258: PUSH
76259: LD_VAR 0 1
76263: PPUSH
76264: LD_INT 2
76266: PPUSH
76267: CALL_OW 275
76271: PUSH
76272: LD_VAR 0 1
76276: PPUSH
76277: LD_INT 3
76279: PPUSH
76280: CALL_OW 275
76284: PUSH
76285: EMPTY
76286: LIST
76287: LIST
76288: LIST
76289: ST_TO_ADDR
// end ;
76290: LD_VAR 0 2
76294: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76295: LD_INT 0
76297: PPUSH
76298: PPUSH
// result := array ;
76299: LD_ADDR_VAR 0 3
76303: PUSH
76304: LD_VAR 0 1
76308: ST_TO_ADDR
// if size >= result then
76309: LD_VAR 0 2
76313: PUSH
76314: LD_VAR 0 3
76318: GREATEREQUAL
76319: IFFALSE 76323
// exit ;
76321: GO 76373
// if size then
76323: LD_VAR 0 2
76327: IFFALSE 76373
// for i := array downto size do
76329: LD_ADDR_VAR 0 4
76333: PUSH
76334: DOUBLE
76335: LD_VAR 0 1
76339: INC
76340: ST_TO_ADDR
76341: LD_VAR 0 2
76345: PUSH
76346: FOR_DOWNTO
76347: IFFALSE 76371
// result := Delete ( result , result ) ;
76349: LD_ADDR_VAR 0 3
76353: PUSH
76354: LD_VAR 0 3
76358: PPUSH
76359: LD_VAR 0 3
76363: PPUSH
76364: CALL_OW 3
76368: ST_TO_ADDR
76369: GO 76346
76371: POP
76372: POP
// end ;
76373: LD_VAR 0 3
76377: RET
// export function ComExit ( unit ) ; var tmp ; begin
76378: LD_INT 0
76380: PPUSH
76381: PPUSH
// if not IsInUnit ( unit ) then
76382: LD_VAR 0 1
76386: PPUSH
76387: CALL_OW 310
76391: NOT
76392: IFFALSE 76396
// exit ;
76394: GO 76456
// tmp := IsInUnit ( unit ) ;
76396: LD_ADDR_VAR 0 3
76400: PUSH
76401: LD_VAR 0 1
76405: PPUSH
76406: CALL_OW 310
76410: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76411: LD_VAR 0 3
76415: PPUSH
76416: CALL_OW 247
76420: PUSH
76421: LD_INT 2
76423: EQUAL
76424: IFFALSE 76437
// ComExitVehicle ( unit ) else
76426: LD_VAR 0 1
76430: PPUSH
76431: CALL_OW 121
76435: GO 76446
// ComExitBuilding ( unit ) ;
76437: LD_VAR 0 1
76441: PPUSH
76442: CALL_OW 122
// result := tmp ;
76446: LD_ADDR_VAR 0 2
76450: PUSH
76451: LD_VAR 0 3
76455: ST_TO_ADDR
// end ;
76456: LD_VAR 0 2
76460: RET
// export function ComExitAll ( units ) ; var i ; begin
76461: LD_INT 0
76463: PPUSH
76464: PPUSH
// if not units then
76465: LD_VAR 0 1
76469: NOT
76470: IFFALSE 76474
// exit ;
76472: GO 76500
// for i in units do
76474: LD_ADDR_VAR 0 3
76478: PUSH
76479: LD_VAR 0 1
76483: PUSH
76484: FOR_IN
76485: IFFALSE 76498
// ComExit ( i ) ;
76487: LD_VAR 0 3
76491: PPUSH
76492: CALL 76378 0 1
76496: GO 76484
76498: POP
76499: POP
// end ;
76500: LD_VAR 0 2
76504: RET
// export function ResetHc ; begin
76505: LD_INT 0
76507: PPUSH
// InitHc ;
76508: CALL_OW 19
// hc_importance := 0 ;
76512: LD_ADDR_OWVAR 32
76516: PUSH
76517: LD_INT 0
76519: ST_TO_ADDR
// end ;
76520: LD_VAR 0 1
76524: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76525: LD_INT 0
76527: PPUSH
76528: PPUSH
76529: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76530: LD_ADDR_VAR 0 6
76534: PUSH
76535: LD_VAR 0 1
76539: PUSH
76540: LD_VAR 0 3
76544: PLUS
76545: PUSH
76546: LD_INT 2
76548: DIV
76549: ST_TO_ADDR
// if _x < 0 then
76550: LD_VAR 0 6
76554: PUSH
76555: LD_INT 0
76557: LESS
76558: IFFALSE 76575
// _x := _x * - 1 ;
76560: LD_ADDR_VAR 0 6
76564: PUSH
76565: LD_VAR 0 6
76569: PUSH
76570: LD_INT 1
76572: NEG
76573: MUL
76574: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76575: LD_ADDR_VAR 0 7
76579: PUSH
76580: LD_VAR 0 2
76584: PUSH
76585: LD_VAR 0 4
76589: PLUS
76590: PUSH
76591: LD_INT 2
76593: DIV
76594: ST_TO_ADDR
// if _y < 0 then
76595: LD_VAR 0 7
76599: PUSH
76600: LD_INT 0
76602: LESS
76603: IFFALSE 76620
// _y := _y * - 1 ;
76605: LD_ADDR_VAR 0 7
76609: PUSH
76610: LD_VAR 0 7
76614: PUSH
76615: LD_INT 1
76617: NEG
76618: MUL
76619: ST_TO_ADDR
// result := [ _x , _y ] ;
76620: LD_ADDR_VAR 0 5
76624: PUSH
76625: LD_VAR 0 6
76629: PUSH
76630: LD_VAR 0 7
76634: PUSH
76635: EMPTY
76636: LIST
76637: LIST
76638: ST_TO_ADDR
// end ;
76639: LD_VAR 0 5
76643: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76644: LD_INT 0
76646: PPUSH
76647: PPUSH
76648: PPUSH
76649: PPUSH
// task := GetTaskList ( unit ) ;
76650: LD_ADDR_VAR 0 7
76654: PUSH
76655: LD_VAR 0 1
76659: PPUSH
76660: CALL_OW 437
76664: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76665: LD_VAR 0 7
76669: NOT
76670: IFFALSE 76689
76672: PUSH
76673: LD_VAR 0 1
76677: PPUSH
76678: LD_VAR 0 2
76682: PPUSH
76683: CALL_OW 308
76687: NOT
76688: AND
76689: IFFALSE 76693
// exit ;
76691: GO 76811
// if IsInArea ( unit , area ) then
76693: LD_VAR 0 1
76697: PPUSH
76698: LD_VAR 0 2
76702: PPUSH
76703: CALL_OW 308
76707: IFFALSE 76725
// begin ComMoveToArea ( unit , goAway ) ;
76709: LD_VAR 0 1
76713: PPUSH
76714: LD_VAR 0 3
76718: PPUSH
76719: CALL_OW 113
// exit ;
76723: GO 76811
// end ; if task [ 1 ] [ 1 ] <> M then
76725: LD_VAR 0 7
76729: PUSH
76730: LD_INT 1
76732: ARRAY
76733: PUSH
76734: LD_INT 1
76736: ARRAY
76737: PUSH
76738: LD_STRING M
76740: NONEQUAL
76741: IFFALSE 76745
// exit ;
76743: GO 76811
// x := task [ 1 ] [ 2 ] ;
76745: LD_ADDR_VAR 0 5
76749: PUSH
76750: LD_VAR 0 7
76754: PUSH
76755: LD_INT 1
76757: ARRAY
76758: PUSH
76759: LD_INT 2
76761: ARRAY
76762: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76763: LD_ADDR_VAR 0 6
76767: PUSH
76768: LD_VAR 0 7
76772: PUSH
76773: LD_INT 1
76775: ARRAY
76776: PUSH
76777: LD_INT 3
76779: ARRAY
76780: ST_TO_ADDR
// if InArea ( x , y , area ) then
76781: LD_VAR 0 5
76785: PPUSH
76786: LD_VAR 0 6
76790: PPUSH
76791: LD_VAR 0 2
76795: PPUSH
76796: CALL_OW 309
76800: IFFALSE 76811
// ComStop ( unit ) ;
76802: LD_VAR 0 1
76806: PPUSH
76807: CALL_OW 141
// end ;
76811: LD_VAR 0 4
76815: RET
// export function Abs ( value ) ; begin
76816: LD_INT 0
76818: PPUSH
// result := value ;
76819: LD_ADDR_VAR 0 2
76823: PUSH
76824: LD_VAR 0 1
76828: ST_TO_ADDR
// if value < 0 then
76829: LD_VAR 0 1
76833: PUSH
76834: LD_INT 0
76836: LESS
76837: IFFALSE 76854
// result := value * - 1 ;
76839: LD_ADDR_VAR 0 2
76843: PUSH
76844: LD_VAR 0 1
76848: PUSH
76849: LD_INT 1
76851: NEG
76852: MUL
76853: ST_TO_ADDR
// end ;
76854: LD_VAR 0 2
76858: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76859: LD_INT 0
76861: PPUSH
76862: PPUSH
76863: PPUSH
76864: PPUSH
76865: PPUSH
76866: PPUSH
76867: PPUSH
76868: PPUSH
// if not unit or not building then
76869: LD_VAR 0 1
76873: NOT
76874: IFTRUE 76883
76876: PUSH
76877: LD_VAR 0 2
76881: NOT
76882: OR
76883: IFFALSE 76887
// exit ;
76885: GO 77115
// x := GetX ( building ) ;
76887: LD_ADDR_VAR 0 4
76891: PUSH
76892: LD_VAR 0 2
76896: PPUSH
76897: CALL_OW 250
76901: ST_TO_ADDR
// y := GetY ( building ) ;
76902: LD_ADDR_VAR 0 6
76906: PUSH
76907: LD_VAR 0 2
76911: PPUSH
76912: CALL_OW 251
76916: ST_TO_ADDR
// d := GetDir ( building ) ;
76917: LD_ADDR_VAR 0 8
76921: PUSH
76922: LD_VAR 0 2
76926: PPUSH
76927: CALL_OW 254
76931: ST_TO_ADDR
// r := 4 ;
76932: LD_ADDR_VAR 0 9
76936: PUSH
76937: LD_INT 4
76939: ST_TO_ADDR
// for i := 1 to 5 do
76940: LD_ADDR_VAR 0 10
76944: PUSH
76945: DOUBLE
76946: LD_INT 1
76948: DEC
76949: ST_TO_ADDR
76950: LD_INT 5
76952: PUSH
76953: FOR_TO
76954: IFFALSE 77113
// begin _x := ShiftX ( x , d , r + i ) ;
76956: LD_ADDR_VAR 0 5
76960: PUSH
76961: LD_VAR 0 4
76965: PPUSH
76966: LD_VAR 0 8
76970: PPUSH
76971: LD_VAR 0 9
76975: PUSH
76976: LD_VAR 0 10
76980: PLUS
76981: PPUSH
76982: CALL_OW 272
76986: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76987: LD_ADDR_VAR 0 7
76991: PUSH
76992: LD_VAR 0 6
76996: PPUSH
76997: LD_VAR 0 8
77001: PPUSH
77002: LD_VAR 0 9
77006: PUSH
77007: LD_VAR 0 10
77011: PLUS
77012: PPUSH
77013: CALL_OW 273
77017: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77018: LD_VAR 0 5
77022: PPUSH
77023: LD_VAR 0 7
77027: PPUSH
77028: CALL_OW 488
77032: IFFALSE 77067
77034: PUSH
77035: LD_VAR 0 5
77039: PPUSH
77040: LD_VAR 0 7
77044: PPUSH
77045: CALL_OW 428
77049: PPUSH
77050: CALL_OW 247
77054: PUSH
77055: LD_INT 3
77057: PUSH
77058: LD_INT 2
77060: PUSH
77061: EMPTY
77062: LIST
77063: LIST
77064: IN
77065: NOT
77066: AND
77067: IFFALSE 77111
// begin ComMoveXY ( unit , _x , _y ) ;
77069: LD_VAR 0 1
77073: PPUSH
77074: LD_VAR 0 5
77078: PPUSH
77079: LD_VAR 0 7
77083: PPUSH
77084: CALL_OW 111
// result := [ _x , _y ] ;
77088: LD_ADDR_VAR 0 3
77092: PUSH
77093: LD_VAR 0 5
77097: PUSH
77098: LD_VAR 0 7
77102: PUSH
77103: EMPTY
77104: LIST
77105: LIST
77106: ST_TO_ADDR
// exit ;
77107: POP
77108: POP
77109: GO 77115
// end ; end ;
77111: GO 76953
77113: POP
77114: POP
// end ;
77115: LD_VAR 0 3
77119: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77120: LD_INT 0
77122: PPUSH
77123: PPUSH
77124: PPUSH
// result := 0 ;
77125: LD_ADDR_VAR 0 3
77129: PUSH
77130: LD_INT 0
77132: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77133: LD_VAR 0 1
77137: PUSH
77138: LD_INT 0
77140: LESS
77141: IFTRUE 77153
77143: PUSH
77144: LD_VAR 0 1
77148: PUSH
77149: LD_INT 8
77151: GREATER
77152: OR
77153: IFTRUE 77165
77155: PUSH
77156: LD_VAR 0 2
77160: PUSH
77161: LD_INT 0
77163: LESS
77164: OR
77165: IFTRUE 77177
77167: PUSH
77168: LD_VAR 0 2
77172: PUSH
77173: LD_INT 8
77175: GREATER
77176: OR
77177: IFFALSE 77181
// exit ;
77179: GO 77256
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77181: LD_ADDR_VAR 0 4
77185: PUSH
77186: LD_INT 22
77188: PUSH
77189: LD_VAR 0 2
77193: PUSH
77194: EMPTY
77195: LIST
77196: LIST
77197: PPUSH
77198: CALL_OW 69
77202: PUSH
77203: FOR_IN
77204: IFFALSE 77254
// begin un := UnitShoot ( i ) ;
77206: LD_ADDR_VAR 0 5
77210: PUSH
77211: LD_VAR 0 4
77215: PPUSH
77216: CALL_OW 504
77220: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77221: LD_VAR 0 5
77225: PPUSH
77226: CALL_OW 255
77230: PUSH
77231: LD_VAR 0 1
77235: EQUAL
77236: IFFALSE 77252
// begin result := un ;
77238: LD_ADDR_VAR 0 3
77242: PUSH
77243: LD_VAR 0 5
77247: ST_TO_ADDR
// exit ;
77248: POP
77249: POP
77250: GO 77256
// end ; end ;
77252: GO 77203
77254: POP
77255: POP
// end ;
77256: LD_VAR 0 3
77260: RET
// export function GetCargoBay ( units ) ; begin
77261: LD_INT 0
77263: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77264: LD_ADDR_VAR 0 2
77268: PUSH
77269: LD_VAR 0 1
77273: PPUSH
77274: LD_INT 2
77276: PUSH
77277: LD_INT 34
77279: PUSH
77280: LD_INT 12
77282: PUSH
77283: EMPTY
77284: LIST
77285: LIST
77286: PUSH
77287: LD_INT 34
77289: PUSH
77290: LD_INT 51
77292: PUSH
77293: EMPTY
77294: LIST
77295: LIST
77296: PUSH
77297: LD_INT 34
77299: PUSH
77300: LD_INT 32
77302: PUSH
77303: EMPTY
77304: LIST
77305: LIST
77306: PUSH
77307: LD_INT 34
77309: PUSH
77310: LD_INT 89
77312: PUSH
77313: EMPTY
77314: LIST
77315: LIST
77316: PUSH
77317: EMPTY
77318: LIST
77319: LIST
77320: LIST
77321: LIST
77322: LIST
77323: PPUSH
77324: CALL_OW 72
77328: ST_TO_ADDR
// end ;
77329: LD_VAR 0 2
77333: RET
// export function Negate ( value ) ; begin
77334: LD_INT 0
77336: PPUSH
// result := not value ;
77337: LD_ADDR_VAR 0 2
77341: PUSH
77342: LD_VAR 0 1
77346: NOT
77347: ST_TO_ADDR
// end ;
77348: LD_VAR 0 2
77352: RET
// export function Inc ( value ) ; begin
77353: LD_INT 0
77355: PPUSH
// result := value + 1 ;
77356: LD_ADDR_VAR 0 2
77360: PUSH
77361: LD_VAR 0 1
77365: PUSH
77366: LD_INT 1
77368: PLUS
77369: ST_TO_ADDR
// end ;
77370: LD_VAR 0 2
77374: RET
// export function Dec ( value ) ; begin
77375: LD_INT 0
77377: PPUSH
// result := value - 1 ;
77378: LD_ADDR_VAR 0 2
77382: PUSH
77383: LD_VAR 0 1
77387: PUSH
77388: LD_INT 1
77390: MINUS
77391: ST_TO_ADDR
// end ;
77392: LD_VAR 0 2
77396: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77397: LD_INT 0
77399: PPUSH
77400: PPUSH
77401: PPUSH
77402: PPUSH
77403: PPUSH
77404: PPUSH
77405: PPUSH
77406: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77407: LD_VAR 0 1
77411: PPUSH
77412: LD_VAR 0 2
77416: PPUSH
77417: CALL_OW 488
77421: NOT
77422: IFTRUE 77441
77424: PUSH
77425: LD_VAR 0 3
77429: PPUSH
77430: LD_VAR 0 4
77434: PPUSH
77435: CALL_OW 488
77439: NOT
77440: OR
77441: IFFALSE 77454
// begin result := - 1 ;
77443: LD_ADDR_VAR 0 5
77447: PUSH
77448: LD_INT 1
77450: NEG
77451: ST_TO_ADDR
// exit ;
77452: GO 77689
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77454: LD_ADDR_VAR 0 12
77458: PUSH
77459: LD_VAR 0 1
77463: PPUSH
77464: LD_VAR 0 2
77468: PPUSH
77469: LD_VAR 0 3
77473: PPUSH
77474: LD_VAR 0 4
77478: PPUSH
77479: CALL 76525 0 4
77483: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77484: LD_ADDR_VAR 0 11
77488: PUSH
77489: LD_VAR 0 1
77493: PPUSH
77494: LD_VAR 0 2
77498: PPUSH
77499: LD_VAR 0 12
77503: PUSH
77504: LD_INT 1
77506: ARRAY
77507: PPUSH
77508: LD_VAR 0 12
77512: PUSH
77513: LD_INT 2
77515: ARRAY
77516: PPUSH
77517: CALL_OW 298
77521: ST_TO_ADDR
// distance := 9999 ;
77522: LD_ADDR_VAR 0 10
77526: PUSH
77527: LD_INT 9999
77529: ST_TO_ADDR
// for i := 0 to 5 do
77530: LD_ADDR_VAR 0 6
77534: PUSH
77535: DOUBLE
77536: LD_INT 0
77538: DEC
77539: ST_TO_ADDR
77540: LD_INT 5
77542: PUSH
77543: FOR_TO
77544: IFFALSE 77687
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77546: LD_ADDR_VAR 0 7
77550: PUSH
77551: LD_VAR 0 1
77555: PPUSH
77556: LD_VAR 0 6
77560: PPUSH
77561: LD_VAR 0 11
77565: PPUSH
77566: CALL_OW 272
77570: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77571: LD_ADDR_VAR 0 8
77575: PUSH
77576: LD_VAR 0 2
77580: PPUSH
77581: LD_VAR 0 6
77585: PPUSH
77586: LD_VAR 0 11
77590: PPUSH
77591: CALL_OW 273
77595: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77596: LD_VAR 0 7
77600: PPUSH
77601: LD_VAR 0 8
77605: PPUSH
77606: CALL_OW 488
77610: NOT
77611: IFFALSE 77615
// continue ;
77613: GO 77543
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77615: LD_ADDR_VAR 0 9
77619: PUSH
77620: LD_VAR 0 12
77624: PUSH
77625: LD_INT 1
77627: ARRAY
77628: PPUSH
77629: LD_VAR 0 12
77633: PUSH
77634: LD_INT 2
77636: ARRAY
77637: PPUSH
77638: LD_VAR 0 7
77642: PPUSH
77643: LD_VAR 0 8
77647: PPUSH
77648: CALL_OW 298
77652: ST_TO_ADDR
// if tmp < distance then
77653: LD_VAR 0 9
77657: PUSH
77658: LD_VAR 0 10
77662: LESS
77663: IFFALSE 77685
// begin result := i ;
77665: LD_ADDR_VAR 0 5
77669: PUSH
77670: LD_VAR 0 6
77674: ST_TO_ADDR
// distance := tmp ;
77675: LD_ADDR_VAR 0 10
77679: PUSH
77680: LD_VAR 0 9
77684: ST_TO_ADDR
// end ; end ;
77685: GO 77543
77687: POP
77688: POP
// end ;
77689: LD_VAR 0 5
77693: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77694: LD_INT 0
77696: PPUSH
77697: PPUSH
// if not driver or not IsInUnit ( driver ) then
77698: LD_VAR 0 1
77702: NOT
77703: IFTRUE 77717
77705: PUSH
77706: LD_VAR 0 1
77710: PPUSH
77711: CALL_OW 310
77715: NOT
77716: OR
77717: IFFALSE 77721
// exit ;
77719: GO 77811
// vehicle := IsInUnit ( driver ) ;
77721: LD_ADDR_VAR 0 3
77725: PUSH
77726: LD_VAR 0 1
77730: PPUSH
77731: CALL_OW 310
77735: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77736: LD_VAR 0 1
77740: PPUSH
77741: LD_STRING \
77743: PUSH
77744: LD_INT 0
77746: PUSH
77747: LD_INT 0
77749: PUSH
77750: LD_INT 0
77752: PUSH
77753: LD_INT 0
77755: PUSH
77756: LD_INT 0
77758: PUSH
77759: LD_INT 0
77761: PUSH
77762: EMPTY
77763: LIST
77764: LIST
77765: LIST
77766: LIST
77767: LIST
77768: LIST
77769: LIST
77770: PUSH
77771: LD_STRING E
77773: PUSH
77774: LD_INT 0
77776: PUSH
77777: LD_INT 0
77779: PUSH
77780: LD_VAR 0 3
77784: PUSH
77785: LD_INT 0
77787: PUSH
77788: LD_INT 0
77790: PUSH
77791: LD_INT 0
77793: PUSH
77794: EMPTY
77795: LIST
77796: LIST
77797: LIST
77798: LIST
77799: LIST
77800: LIST
77801: LIST
77802: PUSH
77803: EMPTY
77804: LIST
77805: LIST
77806: PPUSH
77807: CALL_OW 446
// end ;
77811: LD_VAR 0 2
77815: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77816: LD_INT 0
77818: PPUSH
77819: PPUSH
// if not driver or not IsInUnit ( driver ) then
77820: LD_VAR 0 1
77824: NOT
77825: IFTRUE 77839
77827: PUSH
77828: LD_VAR 0 1
77832: PPUSH
77833: CALL_OW 310
77837: NOT
77838: OR
77839: IFFALSE 77843
// exit ;
77841: GO 77933
// vehicle := IsInUnit ( driver ) ;
77843: LD_ADDR_VAR 0 3
77847: PUSH
77848: LD_VAR 0 1
77852: PPUSH
77853: CALL_OW 310
77857: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77858: LD_VAR 0 1
77862: PPUSH
77863: LD_STRING \
77865: PUSH
77866: LD_INT 0
77868: PUSH
77869: LD_INT 0
77871: PUSH
77872: LD_INT 0
77874: PUSH
77875: LD_INT 0
77877: PUSH
77878: LD_INT 0
77880: PUSH
77881: LD_INT 0
77883: PUSH
77884: EMPTY
77885: LIST
77886: LIST
77887: LIST
77888: LIST
77889: LIST
77890: LIST
77891: LIST
77892: PUSH
77893: LD_STRING E
77895: PUSH
77896: LD_INT 0
77898: PUSH
77899: LD_INT 0
77901: PUSH
77902: LD_VAR 0 3
77906: PUSH
77907: LD_INT 0
77909: PUSH
77910: LD_INT 0
77912: PUSH
77913: LD_INT 0
77915: PUSH
77916: EMPTY
77917: LIST
77918: LIST
77919: LIST
77920: LIST
77921: LIST
77922: LIST
77923: LIST
77924: PUSH
77925: EMPTY
77926: LIST
77927: LIST
77928: PPUSH
77929: CALL_OW 447
// end ;
77933: LD_VAR 0 2
77937: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77938: LD_INT 0
77940: PPUSH
77941: PPUSH
77942: PPUSH
// tmp := [ ] ;
77943: LD_ADDR_VAR 0 5
77947: PUSH
77948: EMPTY
77949: ST_TO_ADDR
// for i in units do
77950: LD_ADDR_VAR 0 4
77954: PUSH
77955: LD_VAR 0 1
77959: PUSH
77960: FOR_IN
77961: IFFALSE 77999
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77963: LD_ADDR_VAR 0 5
77967: PUSH
77968: LD_VAR 0 5
77972: PPUSH
77973: LD_VAR 0 5
77977: PUSH
77978: LD_INT 1
77980: PLUS
77981: PPUSH
77982: LD_VAR 0 4
77986: PPUSH
77987: CALL_OW 256
77991: PPUSH
77992: CALL_OW 2
77996: ST_TO_ADDR
77997: GO 77960
77999: POP
78000: POP
// if not tmp then
78001: LD_VAR 0 5
78005: NOT
78006: IFFALSE 78010
// exit ;
78008: GO 78058
// if asc then
78010: LD_VAR 0 2
78014: IFFALSE 78038
// result := SortListByListAsc ( units , tmp ) else
78016: LD_ADDR_VAR 0 3
78020: PUSH
78021: LD_VAR 0 1
78025: PPUSH
78026: LD_VAR 0 5
78030: PPUSH
78031: CALL_OW 76
78035: ST_TO_ADDR
78036: GO 78058
// result := SortListByListDesc ( units , tmp ) ;
78038: LD_ADDR_VAR 0 3
78042: PUSH
78043: LD_VAR 0 1
78047: PPUSH
78048: LD_VAR 0 5
78052: PPUSH
78053: CALL_OW 77
78057: ST_TO_ADDR
// end ;
78058: LD_VAR 0 3
78062: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78063: LD_INT 0
78065: PPUSH
78066: PPUSH
// task := GetTaskList ( mech ) ;
78067: LD_ADDR_VAR 0 4
78071: PUSH
78072: LD_VAR 0 1
78076: PPUSH
78077: CALL_OW 437
78081: ST_TO_ADDR
// if not task then
78082: LD_VAR 0 4
78086: NOT
78087: IFFALSE 78091
// exit ;
78089: GO 78135
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78091: LD_ADDR_VAR 0 3
78095: PUSH
78096: LD_VAR 0 4
78100: PUSH
78101: LD_INT 1
78103: ARRAY
78104: PUSH
78105: LD_INT 1
78107: ARRAY
78108: PUSH
78109: LD_STRING r
78111: EQUAL
78112: IFFALSE 78134
78114: PUSH
78115: LD_VAR 0 4
78119: PUSH
78120: LD_INT 1
78122: ARRAY
78123: PUSH
78124: LD_INT 4
78126: ARRAY
78127: PUSH
78128: LD_VAR 0 2
78132: EQUAL
78133: AND
78134: ST_TO_ADDR
// end ;
78135: LD_VAR 0 3
78139: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78140: LD_INT 0
78142: PPUSH
// SetDir ( unit , d ) ;
78143: LD_VAR 0 1
78147: PPUSH
78148: LD_VAR 0 4
78152: PPUSH
78153: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
78157: LD_ADDR_VAR 0 6
78161: PUSH
78162: LD_VAR 0 1
78166: PPUSH
78167: LD_VAR 0 2
78171: PPUSH
78172: LD_VAR 0 3
78176: PPUSH
78177: LD_VAR 0 5
78181: PPUSH
78182: CALL_OW 48
78186: ST_TO_ADDR
// end ;
78187: LD_VAR 0 6
78191: RET
// export function ToNaturalNumber ( number ) ; begin
78192: LD_INT 0
78194: PPUSH
// result := number div 1 ;
78195: LD_ADDR_VAR 0 2
78199: PUSH
78200: LD_VAR 0 1
78204: PUSH
78205: LD_INT 1
78207: DIV
78208: ST_TO_ADDR
// if number < 0 then
78209: LD_VAR 0 1
78213: PUSH
78214: LD_INT 0
78216: LESS
78217: IFFALSE 78227
// result := 0 ;
78219: LD_ADDR_VAR 0 2
78223: PUSH
78224: LD_INT 0
78226: ST_TO_ADDR
// end ;
78227: LD_VAR 0 2
78231: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
78232: LD_INT 0
78234: PPUSH
78235: PPUSH
78236: PPUSH
// if not buildings then
78237: LD_VAR 0 1
78241: NOT
78242: IFFALSE 78246
// exit ;
78244: GO 78361
// tmp := [ ] ;
78246: LD_ADDR_VAR 0 5
78250: PUSH
78251: EMPTY
78252: ST_TO_ADDR
// for b in buildings do
78253: LD_ADDR_VAR 0 4
78257: PUSH
78258: LD_VAR 0 1
78262: PUSH
78263: FOR_IN
78264: IFFALSE 78302
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
78266: LD_ADDR_VAR 0 5
78270: PUSH
78271: LD_VAR 0 5
78275: PPUSH
78276: LD_VAR 0 5
78280: PUSH
78281: LD_INT 1
78283: PLUS
78284: PPUSH
78285: LD_VAR 0 4
78289: PPUSH
78290: CALL_OW 266
78294: PPUSH
78295: CALL_OW 1
78299: ST_TO_ADDR
78300: GO 78263
78302: POP
78303: POP
// if not tmp then
78304: LD_VAR 0 5
78308: NOT
78309: IFFALSE 78313
// exit ;
78311: GO 78361
// if asc then
78313: LD_VAR 0 2
78317: IFFALSE 78341
// result := SortListByListAsc ( buildings , tmp ) else
78319: LD_ADDR_VAR 0 3
78323: PUSH
78324: LD_VAR 0 1
78328: PPUSH
78329: LD_VAR 0 5
78333: PPUSH
78334: CALL_OW 76
78338: ST_TO_ADDR
78339: GO 78361
// result := SortListByListDesc ( buildings , tmp ) ;
78341: LD_ADDR_VAR 0 3
78345: PUSH
78346: LD_VAR 0 1
78350: PPUSH
78351: LD_VAR 0 5
78355: PPUSH
78356: CALL_OW 77
78360: ST_TO_ADDR
// end ;
78361: LD_VAR 0 3
78365: RET
// export function SortByClass ( units , class ) ; var un ; begin
78366: LD_INT 0
78368: PPUSH
78369: PPUSH
// if not units or not class then
78370: LD_VAR 0 1
78374: NOT
78375: IFTRUE 78384
78377: PUSH
78378: LD_VAR 0 2
78382: NOT
78383: OR
78384: IFFALSE 78388
// exit ;
78386: GO 78483
// result := [ ] ;
78388: LD_ADDR_VAR 0 3
78392: PUSH
78393: EMPTY
78394: ST_TO_ADDR
// for un in units do
78395: LD_ADDR_VAR 0 4
78399: PUSH
78400: LD_VAR 0 1
78404: PUSH
78405: FOR_IN
78406: IFFALSE 78481
// if GetClass ( un ) = class then
78408: LD_VAR 0 4
78412: PPUSH
78413: CALL_OW 257
78417: PUSH
78418: LD_VAR 0 2
78422: EQUAL
78423: IFFALSE 78450
// result := Insert ( result , 1 , un ) else
78425: LD_ADDR_VAR 0 3
78429: PUSH
78430: LD_VAR 0 3
78434: PPUSH
78435: LD_INT 1
78437: PPUSH
78438: LD_VAR 0 4
78442: PPUSH
78443: CALL_OW 2
78447: ST_TO_ADDR
78448: GO 78479
// result := Replace ( result , result + 1 , un ) ;
78450: LD_ADDR_VAR 0 3
78454: PUSH
78455: LD_VAR 0 3
78459: PPUSH
78460: LD_VAR 0 3
78464: PUSH
78465: LD_INT 1
78467: PLUS
78468: PPUSH
78469: LD_VAR 0 4
78473: PPUSH
78474: CALL_OW 1
78478: ST_TO_ADDR
78479: GO 78405
78481: POP
78482: POP
// end ;
78483: LD_VAR 0 3
78487: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78488: LD_INT 0
78490: PPUSH
78491: PPUSH
78492: PPUSH
78493: PPUSH
78494: PPUSH
78495: PPUSH
78496: PPUSH
// result := [ ] ;
78497: LD_ADDR_VAR 0 4
78501: PUSH
78502: EMPTY
78503: ST_TO_ADDR
// if x - r < 0 then
78504: LD_VAR 0 1
78508: PUSH
78509: LD_VAR 0 3
78513: MINUS
78514: PUSH
78515: LD_INT 0
78517: LESS
78518: IFFALSE 78530
// min_x := 0 else
78520: LD_ADDR_VAR 0 8
78524: PUSH
78525: LD_INT 0
78527: ST_TO_ADDR
78528: GO 78546
// min_x := x - r ;
78530: LD_ADDR_VAR 0 8
78534: PUSH
78535: LD_VAR 0 1
78539: PUSH
78540: LD_VAR 0 3
78544: MINUS
78545: ST_TO_ADDR
// if y - r < 0 then
78546: LD_VAR 0 2
78550: PUSH
78551: LD_VAR 0 3
78555: MINUS
78556: PUSH
78557: LD_INT 0
78559: LESS
78560: IFFALSE 78572
// min_y := 0 else
78562: LD_ADDR_VAR 0 7
78566: PUSH
78567: LD_INT 0
78569: ST_TO_ADDR
78570: GO 78588
// min_y := y - r ;
78572: LD_ADDR_VAR 0 7
78576: PUSH
78577: LD_VAR 0 2
78581: PUSH
78582: LD_VAR 0 3
78586: MINUS
78587: ST_TO_ADDR
// max_x := x + r ;
78588: LD_ADDR_VAR 0 9
78592: PUSH
78593: LD_VAR 0 1
78597: PUSH
78598: LD_VAR 0 3
78602: PLUS
78603: ST_TO_ADDR
// max_y := y + r ;
78604: LD_ADDR_VAR 0 10
78608: PUSH
78609: LD_VAR 0 2
78613: PUSH
78614: LD_VAR 0 3
78618: PLUS
78619: ST_TO_ADDR
// for _x = min_x to max_x do
78620: LD_ADDR_VAR 0 5
78624: PUSH
78625: DOUBLE
78626: LD_VAR 0 8
78630: DEC
78631: ST_TO_ADDR
78632: LD_VAR 0 9
78636: PUSH
78637: FOR_TO
78638: IFFALSE 78739
// for _y = min_y to max_y do
78640: LD_ADDR_VAR 0 6
78644: PUSH
78645: DOUBLE
78646: LD_VAR 0 7
78650: DEC
78651: ST_TO_ADDR
78652: LD_VAR 0 10
78656: PUSH
78657: FOR_TO
78658: IFFALSE 78735
// begin if not ValidHex ( _x , _y ) then
78660: LD_VAR 0 5
78664: PPUSH
78665: LD_VAR 0 6
78669: PPUSH
78670: CALL_OW 488
78674: NOT
78675: IFFALSE 78679
// continue ;
78677: GO 78657
// if GetResourceTypeXY ( _x , _y ) then
78679: LD_VAR 0 5
78683: PPUSH
78684: LD_VAR 0 6
78688: PPUSH
78689: CALL_OW 283
78693: IFFALSE 78733
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78695: LD_ADDR_VAR 0 4
78699: PUSH
78700: LD_VAR 0 4
78704: PPUSH
78705: LD_VAR 0 4
78709: PUSH
78710: LD_INT 1
78712: PLUS
78713: PPUSH
78714: LD_VAR 0 5
78718: PUSH
78719: LD_VAR 0 6
78723: PUSH
78724: EMPTY
78725: LIST
78726: LIST
78727: PPUSH
78728: CALL_OW 1
78732: ST_TO_ADDR
// end ;
78733: GO 78657
78735: POP
78736: POP
78737: GO 78637
78739: POP
78740: POP
// end ;
78741: LD_VAR 0 4
78745: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78746: LD_INT 0
78748: PPUSH
78749: PPUSH
78750: PPUSH
78751: PPUSH
78752: PPUSH
78753: PPUSH
78754: PPUSH
78755: PPUSH
// if not units then
78756: LD_VAR 0 1
78760: NOT
78761: IFFALSE 78765
// exit ;
78763: GO 79297
// result := UnitFilter ( units , [ f_ok ] ) ;
78765: LD_ADDR_VAR 0 3
78769: PUSH
78770: LD_VAR 0 1
78774: PPUSH
78775: LD_INT 50
78777: PUSH
78778: EMPTY
78779: LIST
78780: PPUSH
78781: CALL_OW 72
78785: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78786: LD_ADDR_VAR 0 8
78790: PUSH
78791: LD_VAR 0 1
78795: PUSH
78796: LD_INT 1
78798: ARRAY
78799: PPUSH
78800: CALL_OW 255
78804: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78805: LD_ADDR_VAR 0 10
78809: PUSH
78810: LD_INT 29
78812: PUSH
78813: LD_INT 91
78815: PUSH
78816: LD_INT 49
78818: PUSH
78819: EMPTY
78820: LIST
78821: LIST
78822: LIST
78823: ST_TO_ADDR
// if not result then
78824: LD_VAR 0 3
78828: NOT
78829: IFFALSE 78833
// exit ;
78831: GO 79297
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78833: LD_ADDR_VAR 0 5
78837: PUSH
78838: LD_INT 81
78840: PUSH
78841: LD_VAR 0 8
78845: PUSH
78846: EMPTY
78847: LIST
78848: LIST
78849: PPUSH
78850: CALL_OW 69
78854: ST_TO_ADDR
// for i in result do
78855: LD_ADDR_VAR 0 4
78859: PUSH
78860: LD_VAR 0 3
78864: PUSH
78865: FOR_IN
78866: IFFALSE 79295
// begin tag := GetTag ( i ) + 1 ;
78868: LD_ADDR_VAR 0 9
78872: PUSH
78873: LD_VAR 0 4
78877: PPUSH
78878: CALL_OW 110
78882: PUSH
78883: LD_INT 1
78885: PLUS
78886: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
78887: LD_ADDR_VAR 0 7
78891: PUSH
78892: LD_VAR 0 4
78896: PPUSH
78897: CALL_OW 250
78901: PPUSH
78902: LD_VAR 0 4
78906: PPUSH
78907: CALL_OW 251
78911: PPUSH
78912: LD_INT 4
78914: PPUSH
78915: CALL 78488 0 3
78919: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
78920: LD_VAR 0 4
78924: PPUSH
78925: CALL_OW 247
78929: PUSH
78930: LD_INT 2
78932: EQUAL
78933: IFFALSE 78945
78935: PUSH
78936: LD_VAR 0 7
78940: PUSH
78941: LD_INT 2
78943: GREATER
78944: AND
78945: IFFALSE 78965
78947: PUSH
78948: LD_VAR 0 4
78952: PPUSH
78953: CALL_OW 264
78957: PUSH
78958: LD_VAR 0 10
78962: IN
78963: NOT
78964: AND
78965: IFFALSE 79004
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78967: LD_VAR 0 4
78971: PPUSH
78972: LD_VAR 0 7
78976: PUSH
78977: LD_INT 1
78979: ARRAY
78980: PUSH
78981: LD_INT 1
78983: ARRAY
78984: PPUSH
78985: LD_VAR 0 7
78989: PUSH
78990: LD_INT 1
78992: ARRAY
78993: PUSH
78994: LD_INT 2
78996: ARRAY
78997: PPUSH
78998: CALL_OW 116
79002: GO 79293
// if path > tag then
79004: LD_VAR 0 2
79008: PUSH
79009: LD_VAR 0 9
79013: GREATER
79014: IFFALSE 79222
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79016: LD_ADDR_VAR 0 6
79020: PUSH
79021: LD_VAR 0 5
79025: PPUSH
79026: LD_INT 91
79028: PUSH
79029: LD_VAR 0 4
79033: PUSH
79034: LD_INT 8
79036: PUSH
79037: EMPTY
79038: LIST
79039: LIST
79040: LIST
79041: PPUSH
79042: CALL_OW 72
79046: ST_TO_ADDR
// if nearEnemy then
79047: LD_VAR 0 6
79051: IFFALSE 79120
// begin if GetWeapon ( i ) = ru_time_lapser then
79053: LD_VAR 0 4
79057: PPUSH
79058: CALL_OW 264
79062: PUSH
79063: LD_INT 49
79065: EQUAL
79066: IFFALSE 79094
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79068: LD_VAR 0 4
79072: PPUSH
79073: LD_VAR 0 6
79077: PPUSH
79078: LD_VAR 0 4
79082: PPUSH
79083: CALL_OW 74
79087: PPUSH
79088: CALL_OW 112
79092: GO 79118
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79094: LD_VAR 0 4
79098: PPUSH
79099: LD_VAR 0 6
79103: PPUSH
79104: LD_VAR 0 4
79108: PPUSH
79109: CALL_OW 74
79113: PPUSH
79114: CALL 80378 0 2
// end else
79118: GO 79220
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79120: LD_VAR 0 4
79124: PPUSH
79125: LD_VAR 0 2
79129: PUSH
79130: LD_VAR 0 9
79134: ARRAY
79135: PUSH
79136: LD_INT 1
79138: ARRAY
79139: PPUSH
79140: LD_VAR 0 2
79144: PUSH
79145: LD_VAR 0 9
79149: ARRAY
79150: PUSH
79151: LD_INT 2
79153: ARRAY
79154: PPUSH
79155: CALL_OW 297
79159: PUSH
79160: LD_INT 6
79162: GREATER
79163: IFFALSE 79206
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79165: LD_VAR 0 4
79169: PPUSH
79170: LD_VAR 0 2
79174: PUSH
79175: LD_VAR 0 9
79179: ARRAY
79180: PUSH
79181: LD_INT 1
79183: ARRAY
79184: PPUSH
79185: LD_VAR 0 2
79189: PUSH
79190: LD_VAR 0 9
79194: ARRAY
79195: PUSH
79196: LD_INT 2
79198: ARRAY
79199: PPUSH
79200: CALL_OW 114
79204: GO 79220
// SetTag ( i , tag ) ;
79206: LD_VAR 0 4
79210: PPUSH
79211: LD_VAR 0 9
79215: PPUSH
79216: CALL_OW 109
// end else
79220: GO 79293
// if enemy then
79222: LD_VAR 0 5
79226: IFFALSE 79293
// begin if GetWeapon ( i ) = ru_time_lapser then
79228: LD_VAR 0 4
79232: PPUSH
79233: CALL_OW 264
79237: PUSH
79238: LD_INT 49
79240: EQUAL
79241: IFFALSE 79269
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79243: LD_VAR 0 4
79247: PPUSH
79248: LD_VAR 0 5
79252: PPUSH
79253: LD_VAR 0 4
79257: PPUSH
79258: CALL_OW 74
79262: PPUSH
79263: CALL_OW 112
79267: GO 79293
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79269: LD_VAR 0 4
79273: PPUSH
79274: LD_VAR 0 5
79278: PPUSH
79279: LD_VAR 0 4
79283: PPUSH
79284: CALL_OW 74
79288: PPUSH
79289: CALL 80378 0 2
// end ; end ;
79293: GO 78865
79295: POP
79296: POP
// end ;
79297: LD_VAR 0 3
79301: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79302: LD_INT 0
79304: PPUSH
79305: PPUSH
79306: PPUSH
// if not unit or IsInUnit ( unit ) then
79307: LD_VAR 0 1
79311: NOT
79312: IFTRUE 79325
79314: PUSH
79315: LD_VAR 0 1
79319: PPUSH
79320: CALL_OW 310
79324: OR
79325: IFFALSE 79329
// exit ;
79327: GO 79420
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79329: LD_ADDR_VAR 0 4
79333: PUSH
79334: LD_VAR 0 1
79338: PPUSH
79339: CALL_OW 250
79343: PPUSH
79344: LD_VAR 0 2
79348: PPUSH
79349: LD_INT 1
79351: PPUSH
79352: CALL_OW 272
79356: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79357: LD_ADDR_VAR 0 5
79361: PUSH
79362: LD_VAR 0 1
79366: PPUSH
79367: CALL_OW 251
79371: PPUSH
79372: LD_VAR 0 2
79376: PPUSH
79377: LD_INT 1
79379: PPUSH
79380: CALL_OW 273
79384: ST_TO_ADDR
// if ValidHex ( x , y ) then
79385: LD_VAR 0 4
79389: PPUSH
79390: LD_VAR 0 5
79394: PPUSH
79395: CALL_OW 488
79399: IFFALSE 79420
// ComTurnXY ( unit , x , y ) ;
79401: LD_VAR 0 1
79405: PPUSH
79406: LD_VAR 0 4
79410: PPUSH
79411: LD_VAR 0 5
79415: PPUSH
79416: CALL_OW 118
// end ;
79420: LD_VAR 0 3
79424: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79425: LD_INT 0
79427: PPUSH
79428: PPUSH
// result := false ;
79429: LD_ADDR_VAR 0 3
79433: PUSH
79434: LD_INT 0
79436: ST_TO_ADDR
// if not units then
79437: LD_VAR 0 2
79441: NOT
79442: IFFALSE 79446
// exit ;
79444: GO 79491
// for i in units do
79446: LD_ADDR_VAR 0 4
79450: PUSH
79451: LD_VAR 0 2
79455: PUSH
79456: FOR_IN
79457: IFFALSE 79489
// if See ( side , i ) then
79459: LD_VAR 0 1
79463: PPUSH
79464: LD_VAR 0 4
79468: PPUSH
79469: CALL_OW 292
79473: IFFALSE 79487
// begin result := true ;
79475: LD_ADDR_VAR 0 3
79479: PUSH
79480: LD_INT 1
79482: ST_TO_ADDR
// exit ;
79483: POP
79484: POP
79485: GO 79491
// end ;
79487: GO 79456
79489: POP
79490: POP
// end ;
79491: LD_VAR 0 3
79495: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79496: LD_INT 0
79498: PPUSH
79499: PPUSH
79500: PPUSH
79501: PPUSH
// if not unit or not points then
79502: LD_VAR 0 1
79506: NOT
79507: IFTRUE 79516
79509: PUSH
79510: LD_VAR 0 2
79514: NOT
79515: OR
79516: IFFALSE 79520
// exit ;
79518: GO 79610
// dist := 99999 ;
79520: LD_ADDR_VAR 0 5
79524: PUSH
79525: LD_INT 99999
79527: ST_TO_ADDR
// for i in points do
79528: LD_ADDR_VAR 0 4
79532: PUSH
79533: LD_VAR 0 2
79537: PUSH
79538: FOR_IN
79539: IFFALSE 79608
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79541: LD_ADDR_VAR 0 6
79545: PUSH
79546: LD_VAR 0 1
79550: PPUSH
79551: LD_VAR 0 4
79555: PUSH
79556: LD_INT 1
79558: ARRAY
79559: PPUSH
79560: LD_VAR 0 4
79564: PUSH
79565: LD_INT 2
79567: ARRAY
79568: PPUSH
79569: CALL_OW 297
79573: ST_TO_ADDR
// if tmpDist < dist then
79574: LD_VAR 0 6
79578: PUSH
79579: LD_VAR 0 5
79583: LESS
79584: IFFALSE 79606
// begin result := i ;
79586: LD_ADDR_VAR 0 3
79590: PUSH
79591: LD_VAR 0 4
79595: ST_TO_ADDR
// dist := tmpDist ;
79596: LD_ADDR_VAR 0 5
79600: PUSH
79601: LD_VAR 0 6
79605: ST_TO_ADDR
// end ; end ;
79606: GO 79538
79608: POP
79609: POP
// end ;
79610: LD_VAR 0 3
79614: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79615: LD_INT 0
79617: PPUSH
// uc_side := side ;
79618: LD_ADDR_OWVAR 20
79622: PUSH
79623: LD_VAR 0 1
79627: ST_TO_ADDR
// uc_nation := 3 ;
79628: LD_ADDR_OWVAR 21
79632: PUSH
79633: LD_INT 3
79635: ST_TO_ADDR
// vc_chassis := 25 ;
79636: LD_ADDR_OWVAR 37
79640: PUSH
79641: LD_INT 25
79643: ST_TO_ADDR
// vc_engine := engine_siberite ;
79644: LD_ADDR_OWVAR 39
79648: PUSH
79649: LD_INT 3
79651: ST_TO_ADDR
// vc_control := control_computer ;
79652: LD_ADDR_OWVAR 38
79656: PUSH
79657: LD_INT 3
79659: ST_TO_ADDR
// vc_weapon := 59 ;
79660: LD_ADDR_OWVAR 40
79664: PUSH
79665: LD_INT 59
79667: ST_TO_ADDR
// result := CreateVehicle ;
79668: LD_ADDR_VAR 0 5
79672: PUSH
79673: CALL_OW 45
79677: ST_TO_ADDR
// SetDir ( result , d ) ;
79678: LD_VAR 0 5
79682: PPUSH
79683: LD_VAR 0 4
79687: PPUSH
79688: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79692: LD_VAR 0 5
79696: PPUSH
79697: LD_VAR 0 2
79701: PPUSH
79702: LD_VAR 0 3
79706: PPUSH
79707: LD_INT 0
79709: PPUSH
79710: CALL_OW 48
// end ;
79714: LD_VAR 0 5
79718: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79719: LD_INT 0
79721: PPUSH
79722: PPUSH
79723: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79724: LD_ADDR_VAR 0 2
79728: PUSH
79729: LD_INT 0
79731: PUSH
79732: LD_INT 0
79734: PUSH
79735: LD_INT 0
79737: PUSH
79738: LD_INT 0
79740: PUSH
79741: EMPTY
79742: LIST
79743: LIST
79744: LIST
79745: LIST
79746: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79747: LD_VAR 0 1
79751: NOT
79752: IFTRUE 79785
79754: PUSH
79755: LD_VAR 0 1
79759: PPUSH
79760: CALL_OW 264
79764: PUSH
79765: LD_INT 12
79767: PUSH
79768: LD_INT 51
79770: PUSH
79771: LD_INT 32
79773: PUSH
79774: LD_INT 89
79776: PUSH
79777: EMPTY
79778: LIST
79779: LIST
79780: LIST
79781: LIST
79782: IN
79783: NOT
79784: OR
79785: IFFALSE 79789
// exit ;
79787: GO 79887
// for i := 1 to 3 do
79789: LD_ADDR_VAR 0 3
79793: PUSH
79794: DOUBLE
79795: LD_INT 1
79797: DEC
79798: ST_TO_ADDR
79799: LD_INT 3
79801: PUSH
79802: FOR_TO
79803: IFFALSE 79885
// begin tmp := GetCargo ( cargo , i ) ;
79805: LD_ADDR_VAR 0 4
79809: PUSH
79810: LD_VAR 0 1
79814: PPUSH
79815: LD_VAR 0 3
79819: PPUSH
79820: CALL_OW 289
79824: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79825: LD_ADDR_VAR 0 2
79829: PUSH
79830: LD_VAR 0 2
79834: PPUSH
79835: LD_VAR 0 3
79839: PPUSH
79840: LD_VAR 0 4
79844: PPUSH
79845: CALL_OW 1
79849: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79850: LD_ADDR_VAR 0 2
79854: PUSH
79855: LD_VAR 0 2
79859: PPUSH
79860: LD_INT 4
79862: PPUSH
79863: LD_VAR 0 2
79867: PUSH
79868: LD_INT 4
79870: ARRAY
79871: PUSH
79872: LD_VAR 0 4
79876: PLUS
79877: PPUSH
79878: CALL_OW 1
79882: ST_TO_ADDR
// end ;
79883: GO 79802
79885: POP
79886: POP
// end ;
79887: LD_VAR 0 2
79891: RET
// export function Length ( array ) ; begin
79892: LD_INT 0
79894: PPUSH
// result := array + 0 ;
79895: LD_ADDR_VAR 0 2
79899: PUSH
79900: LD_VAR 0 1
79904: PUSH
79905: LD_INT 0
79907: PLUS
79908: ST_TO_ADDR
// end ;
79909: LD_VAR 0 2
79913: RET
// export function PrepareArray ( array ) ; begin
79914: LD_INT 0
79916: PPUSH
// result := array diff 0 ;
79917: LD_ADDR_VAR 0 2
79921: PUSH
79922: LD_VAR 0 1
79926: PUSH
79927: LD_INT 0
79929: DIFF
79930: ST_TO_ADDR
// if not result [ 1 ] then
79931: LD_VAR 0 2
79935: PUSH
79936: LD_INT 1
79938: ARRAY
79939: NOT
79940: IFFALSE 79960
// result := Delete ( result , 1 ) ;
79942: LD_ADDR_VAR 0 2
79946: PUSH
79947: LD_VAR 0 2
79951: PPUSH
79952: LD_INT 1
79954: PPUSH
79955: CALL_OW 3
79959: ST_TO_ADDR
// end ;
79960: LD_VAR 0 2
79964: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
79965: LD_INT 0
79967: PPUSH
79968: PPUSH
79969: PPUSH
79970: PPUSH
// sibRocketRange := 25 ;
79971: LD_ADDR_VAR 0 6
79975: PUSH
79976: LD_INT 25
79978: ST_TO_ADDR
// result := false ;
79979: LD_ADDR_VAR 0 4
79983: PUSH
79984: LD_INT 0
79986: ST_TO_ADDR
// for i := 0 to 5 do
79987: LD_ADDR_VAR 0 5
79991: PUSH
79992: DOUBLE
79993: LD_INT 0
79995: DEC
79996: ST_TO_ADDR
79997: LD_INT 5
79999: PUSH
80000: FOR_TO
80001: IFFALSE 80068
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80003: LD_VAR 0 1
80007: PPUSH
80008: LD_VAR 0 5
80012: PPUSH
80013: LD_VAR 0 6
80017: PPUSH
80018: CALL_OW 272
80022: PPUSH
80023: LD_VAR 0 2
80027: PPUSH
80028: LD_VAR 0 5
80032: PPUSH
80033: LD_VAR 0 6
80037: PPUSH
80038: CALL_OW 273
80042: PPUSH
80043: LD_VAR 0 3
80047: PPUSH
80048: CALL_OW 309
80052: IFFALSE 80066
// begin result := true ;
80054: LD_ADDR_VAR 0 4
80058: PUSH
80059: LD_INT 1
80061: ST_TO_ADDR
// exit ;
80062: POP
80063: POP
80064: GO 80070
// end ;
80066: GO 80000
80068: POP
80069: POP
// end ;
80070: LD_VAR 0 4
80074: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
80075: LD_INT 0
80077: PPUSH
80078: PPUSH
80079: PPUSH
// if btype = b_depot then
80080: LD_VAR 0 2
80084: PUSH
80085: LD_INT 0
80087: EQUAL
80088: IFFALSE 80100
// begin result := true ;
80090: LD_ADDR_VAR 0 3
80094: PUSH
80095: LD_INT 1
80097: ST_TO_ADDR
// exit ;
80098: GO 80220
// end ; pom := GetBase ( depot ) ;
80100: LD_ADDR_VAR 0 4
80104: PUSH
80105: LD_VAR 0 1
80109: PPUSH
80110: CALL_OW 274
80114: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
80115: LD_ADDR_VAR 0 5
80119: PUSH
80120: LD_VAR 0 2
80124: PPUSH
80125: LD_VAR 0 1
80129: PPUSH
80130: CALL_OW 248
80134: PPUSH
80135: CALL_OW 450
80139: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
80140: LD_ADDR_VAR 0 3
80144: PUSH
80145: LD_VAR 0 4
80149: PPUSH
80150: LD_INT 1
80152: PPUSH
80153: CALL_OW 275
80157: PUSH
80158: LD_VAR 0 5
80162: PUSH
80163: LD_INT 1
80165: ARRAY
80166: GREATEREQUAL
80167: IFFALSE 80193
80169: PUSH
80170: LD_VAR 0 4
80174: PPUSH
80175: LD_INT 2
80177: PPUSH
80178: CALL_OW 275
80182: PUSH
80183: LD_VAR 0 5
80187: PUSH
80188: LD_INT 2
80190: ARRAY
80191: GREATEREQUAL
80192: AND
80193: IFFALSE 80219
80195: PUSH
80196: LD_VAR 0 4
80200: PPUSH
80201: LD_INT 3
80203: PPUSH
80204: CALL_OW 275
80208: PUSH
80209: LD_VAR 0 5
80213: PUSH
80214: LD_INT 3
80216: ARRAY
80217: GREATEREQUAL
80218: AND
80219: ST_TO_ADDR
// end ;
80220: LD_VAR 0 3
80224: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80225: LD_INT 0
80227: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80228: LD_VAR 0 1
80232: PPUSH
80233: LD_VAR 0 2
80237: PPUSH
80238: LD_INT 0
80240: PPUSH
80241: LD_INT 0
80243: PPUSH
80244: LD_INT 1
80246: PPUSH
80247: LD_INT 0
80249: PPUSH
80250: CALL_OW 587
// end ;
80254: LD_VAR 0 3
80258: RET
// export function CenterOnNow ( unit ) ; begin
80259: LD_INT 0
80261: PPUSH
// result := IsInUnit ( unit ) ;
80262: LD_ADDR_VAR 0 2
80266: PUSH
80267: LD_VAR 0 1
80271: PPUSH
80272: CALL_OW 310
80276: ST_TO_ADDR
// if not result then
80277: LD_VAR 0 2
80281: NOT
80282: IFFALSE 80294
// result := unit ;
80284: LD_ADDR_VAR 0 2
80288: PUSH
80289: LD_VAR 0 1
80293: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
80294: LD_VAR 0 1
80298: PPUSH
80299: CALL_OW 87
// end ;
80303: LD_VAR 0 2
80307: RET
// export function ComMoveHex ( unit , hex ) ; begin
80308: LD_INT 0
80310: PPUSH
// if not hex then
80311: LD_VAR 0 2
80315: NOT
80316: IFFALSE 80320
// exit ;
80318: GO 80373
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
80320: LD_VAR 0 2
80324: PUSH
80325: LD_INT 1
80327: ARRAY
80328: PPUSH
80329: LD_VAR 0 2
80333: PUSH
80334: LD_INT 2
80336: ARRAY
80337: PPUSH
80338: CALL_OW 428
80342: IFFALSE 80346
// exit ;
80344: GO 80373
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
80346: LD_VAR 0 1
80350: PPUSH
80351: LD_VAR 0 2
80355: PUSH
80356: LD_INT 1
80358: ARRAY
80359: PPUSH
80360: LD_VAR 0 2
80364: PUSH
80365: LD_INT 2
80367: ARRAY
80368: PPUSH
80369: CALL_OW 111
// end ;
80373: LD_VAR 0 3
80377: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
80378: LD_INT 0
80380: PPUSH
80381: PPUSH
80382: PPUSH
// if not unit or not enemy then
80383: LD_VAR 0 1
80387: NOT
80388: IFTRUE 80397
80390: PUSH
80391: LD_VAR 0 2
80395: NOT
80396: OR
80397: IFFALSE 80401
// exit ;
80399: GO 80527
// x := GetX ( enemy ) ;
80401: LD_ADDR_VAR 0 4
80405: PUSH
80406: LD_VAR 0 2
80410: PPUSH
80411: CALL_OW 250
80415: ST_TO_ADDR
// y := GetY ( enemy ) ;
80416: LD_ADDR_VAR 0 5
80420: PUSH
80421: LD_VAR 0 2
80425: PPUSH
80426: CALL_OW 251
80430: ST_TO_ADDR
// if ValidHex ( x , y ) then
80431: LD_VAR 0 4
80435: PPUSH
80436: LD_VAR 0 5
80440: PPUSH
80441: CALL_OW 488
80445: IFFALSE 80527
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
80447: LD_VAR 0 2
80451: PPUSH
80452: CALL_OW 247
80456: PUSH
80457: LD_INT 3
80459: PUSH
80460: LD_INT 2
80462: PUSH
80463: EMPTY
80464: LIST
80465: LIST
80466: IN
80467: IFTRUE 80490
80469: PUSH
80470: LD_VAR 0 1
80474: PPUSH
80475: CALL_OW 255
80479: PPUSH
80480: LD_VAR 0 2
80484: PPUSH
80485: CALL_OW 292
80489: OR
80490: IFFALSE 80508
// ComAttackUnit ( unit , enemy ) else
80492: LD_VAR 0 1
80496: PPUSH
80497: LD_VAR 0 2
80501: PPUSH
80502: CALL_OW 115
80506: GO 80527
// ComAgressiveMove ( unit , x , y ) ;
80508: LD_VAR 0 1
80512: PPUSH
80513: LD_VAR 0 4
80517: PPUSH
80518: LD_VAR 0 5
80522: PPUSH
80523: CALL_OW 114
// end ;
80527: LD_VAR 0 3
80531: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
80532: LD_INT 0
80534: PPUSH
80535: PPUSH
80536: PPUSH
// list := AreaToList ( area , 0 ) ;
80537: LD_ADDR_VAR 0 5
80541: PUSH
80542: LD_VAR 0 1
80546: PPUSH
80547: LD_INT 0
80549: PPUSH
80550: CALL_OW 517
80554: ST_TO_ADDR
// if not list then
80555: LD_VAR 0 5
80559: NOT
80560: IFFALSE 80564
// exit ;
80562: GO 80694
// if all then
80564: LD_VAR 0 2
80568: IFFALSE 80656
// begin for i := 1 to list [ 1 ] do
80570: LD_ADDR_VAR 0 4
80574: PUSH
80575: DOUBLE
80576: LD_INT 1
80578: DEC
80579: ST_TO_ADDR
80580: LD_VAR 0 5
80584: PUSH
80585: LD_INT 1
80587: ARRAY
80588: PUSH
80589: FOR_TO
80590: IFFALSE 80652
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
80592: LD_ADDR_VAR 0 3
80596: PUSH
80597: LD_VAR 0 3
80601: PPUSH
80602: LD_VAR 0 3
80606: PUSH
80607: LD_INT 1
80609: PLUS
80610: PPUSH
80611: LD_VAR 0 5
80615: PUSH
80616: LD_INT 1
80618: ARRAY
80619: PUSH
80620: LD_VAR 0 4
80624: ARRAY
80625: PUSH
80626: LD_VAR 0 5
80630: PUSH
80631: LD_INT 2
80633: ARRAY
80634: PUSH
80635: LD_VAR 0 4
80639: ARRAY
80640: PUSH
80641: EMPTY
80642: LIST
80643: LIST
80644: PPUSH
80645: CALL_OW 1
80649: ST_TO_ADDR
80650: GO 80589
80652: POP
80653: POP
// exit ;
80654: GO 80694
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
80656: LD_ADDR_VAR 0 3
80660: PUSH
80661: LD_VAR 0 5
80665: PUSH
80666: LD_INT 1
80668: ARRAY
80669: PUSH
80670: LD_INT 1
80672: ARRAY
80673: PUSH
80674: LD_VAR 0 5
80678: PUSH
80679: LD_INT 2
80681: ARRAY
80682: PUSH
80683: LD_INT 1
80685: ARRAY
80686: PUSH
80687: EMPTY
80688: LIST
80689: LIST
80690: PUSH
80691: EMPTY
80692: LIST
80693: ST_TO_ADDR
// end ;
80694: LD_VAR 0 3
80698: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
80699: LD_INT 0
80701: PPUSH
80702: PPUSH
// list := AreaToList ( area , 0 ) ;
80703: LD_ADDR_VAR 0 4
80707: PUSH
80708: LD_VAR 0 1
80712: PPUSH
80713: LD_INT 0
80715: PPUSH
80716: CALL_OW 517
80720: ST_TO_ADDR
// if not list then
80721: LD_VAR 0 4
80725: NOT
80726: IFFALSE 80730
// exit ;
80728: GO 80771
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
80730: LD_ADDR_VAR 0 3
80734: PUSH
80735: LD_VAR 0 4
80739: PUSH
80740: LD_INT 1
80742: ARRAY
80743: PUSH
80744: LD_INT 1
80746: ARRAY
80747: PUSH
80748: LD_VAR 0 4
80752: PUSH
80753: LD_INT 2
80755: ARRAY
80756: PUSH
80757: LD_INT 1
80759: ARRAY
80760: PUSH
80761: LD_VAR 0 2
80765: PUSH
80766: EMPTY
80767: LIST
80768: LIST
80769: LIST
80770: ST_TO_ADDR
// end ;
80771: LD_VAR 0 3
80775: RET
// export function First ( array ) ; begin
80776: LD_INT 0
80778: PPUSH
// if not array then
80779: LD_VAR 0 1
80783: NOT
80784: IFFALSE 80788
// exit ;
80786: GO 80802
// result := array [ 1 ] ;
80788: LD_ADDR_VAR 0 2
80792: PUSH
80793: LD_VAR 0 1
80797: PUSH
80798: LD_INT 1
80800: ARRAY
80801: ST_TO_ADDR
// end ;
80802: LD_VAR 0 2
80806: RET
// export function Last ( array ) ; begin
80807: LD_INT 0
80809: PPUSH
// if not array then
80810: LD_VAR 0 1
80814: NOT
80815: IFFALSE 80819
// exit ;
80817: GO 80835
// result := array [ array ] ;
80819: LD_ADDR_VAR 0 2
80823: PUSH
80824: LD_VAR 0 1
80828: PUSH
80829: LD_VAR 0 1
80833: ARRAY
80834: ST_TO_ADDR
// end ;
80835: LD_VAR 0 2
80839: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
80840: LD_INT 0
80842: PPUSH
80843: PPUSH
// result := [ ] ;
80844: LD_ADDR_VAR 0 5
80848: PUSH
80849: EMPTY
80850: ST_TO_ADDR
// if not array then
80851: LD_VAR 0 1
80855: NOT
80856: IFFALSE 80860
// exit ;
80858: GO 80972
// for i := 1 to array do
80860: LD_ADDR_VAR 0 6
80864: PUSH
80865: DOUBLE
80866: LD_INT 1
80868: DEC
80869: ST_TO_ADDR
80870: LD_VAR 0 1
80874: PUSH
80875: FOR_TO
80876: IFFALSE 80970
// if array [ i ] [ index ] = value then
80878: LD_VAR 0 1
80882: PUSH
80883: LD_VAR 0 6
80887: ARRAY
80888: PUSH
80889: LD_VAR 0 2
80893: ARRAY
80894: PUSH
80895: LD_VAR 0 3
80899: EQUAL
80900: IFFALSE 80968
// begin if indexColumn then
80902: LD_VAR 0 4
80906: IFFALSE 80942
// result := Join ( result , array [ i ] [ indexColumn ] ) else
80908: LD_ADDR_VAR 0 5
80912: PUSH
80913: LD_VAR 0 5
80917: PPUSH
80918: LD_VAR 0 1
80922: PUSH
80923: LD_VAR 0 6
80927: ARRAY
80928: PUSH
80929: LD_VAR 0 4
80933: ARRAY
80934: PPUSH
80935: CALL 75980 0 2
80939: ST_TO_ADDR
80940: GO 80968
// result := Join ( result , array [ i ] ) ;
80942: LD_ADDR_VAR 0 5
80946: PUSH
80947: LD_VAR 0 5
80951: PPUSH
80952: LD_VAR 0 1
80956: PUSH
80957: LD_VAR 0 6
80961: ARRAY
80962: PPUSH
80963: CALL 75980 0 2
80967: ST_TO_ADDR
// end ;
80968: GO 80875
80970: POP
80971: POP
// end ;
80972: LD_VAR 0 5
80976: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
80977: LD_INT 0
80979: PPUSH
// if not vehicles or not parkingPoint then
80980: LD_VAR 0 1
80984: NOT
80985: IFTRUE 80994
80987: PUSH
80988: LD_VAR 0 2
80992: NOT
80993: OR
80994: IFFALSE 80998
// exit ;
80996: GO 81096
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
80998: LD_ADDR_VAR 0 1
81002: PUSH
81003: LD_VAR 0 1
81007: PPUSH
81008: LD_INT 50
81010: PUSH
81011: EMPTY
81012: LIST
81013: PUSH
81014: LD_INT 3
81016: PUSH
81017: LD_INT 92
81019: PUSH
81020: LD_VAR 0 2
81024: PUSH
81025: LD_INT 1
81027: ARRAY
81028: PUSH
81029: LD_VAR 0 2
81033: PUSH
81034: LD_INT 2
81036: ARRAY
81037: PUSH
81038: LD_INT 8
81040: PUSH
81041: EMPTY
81042: LIST
81043: LIST
81044: LIST
81045: LIST
81046: PUSH
81047: EMPTY
81048: LIST
81049: LIST
81050: PUSH
81051: EMPTY
81052: LIST
81053: LIST
81054: PPUSH
81055: CALL_OW 72
81059: ST_TO_ADDR
// if not vehicles then
81060: LD_VAR 0 1
81064: NOT
81065: IFFALSE 81069
// exit ;
81067: GO 81096
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
81069: LD_VAR 0 1
81073: PPUSH
81074: LD_VAR 0 2
81078: PUSH
81079: LD_INT 1
81081: ARRAY
81082: PPUSH
81083: LD_VAR 0 2
81087: PUSH
81088: LD_INT 2
81090: ARRAY
81091: PPUSH
81092: CALL_OW 111
// end ;
81096: LD_VAR 0 3
81100: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
81101: LD_INT 0
81103: PPUSH
81104: PPUSH
81105: PPUSH
// if not side or not area then
81106: LD_VAR 0 1
81110: NOT
81111: IFTRUE 81120
81113: PUSH
81114: LD_VAR 0 2
81118: NOT
81119: OR
81120: IFFALSE 81124
// exit ;
81122: GO 81243
// tmp := AreaToList ( area , 0 ) ;
81124: LD_ADDR_VAR 0 5
81128: PUSH
81129: LD_VAR 0 2
81133: PPUSH
81134: LD_INT 0
81136: PPUSH
81137: CALL_OW 517
81141: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
81142: LD_ADDR_VAR 0 4
81146: PUSH
81147: DOUBLE
81148: LD_INT 1
81150: DEC
81151: ST_TO_ADDR
81152: LD_VAR 0 5
81156: PUSH
81157: LD_INT 1
81159: ARRAY
81160: PUSH
81161: FOR_TO
81162: IFFALSE 81241
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
81164: LD_VAR 0 5
81168: PUSH
81169: LD_INT 1
81171: ARRAY
81172: PUSH
81173: LD_VAR 0 4
81177: ARRAY
81178: PPUSH
81179: LD_VAR 0 5
81183: PUSH
81184: LD_INT 2
81186: ARRAY
81187: PUSH
81188: LD_VAR 0 4
81192: ARRAY
81193: PPUSH
81194: CALL_OW 351
81198: IFFALSE 81239
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
81200: LD_VAR 0 5
81204: PUSH
81205: LD_INT 1
81207: ARRAY
81208: PUSH
81209: LD_VAR 0 4
81213: ARRAY
81214: PPUSH
81215: LD_VAR 0 5
81219: PUSH
81220: LD_INT 2
81222: ARRAY
81223: PUSH
81224: LD_VAR 0 4
81228: ARRAY
81229: PPUSH
81230: LD_VAR 0 1
81234: PPUSH
81235: CALL_OW 244
// end ;
81239: GO 81161
81241: POP
81242: POP
// end ;
81243: LD_VAR 0 3
81247: RET
// export function UniqueArray ( array ) ; var i ; begin
81248: LD_INT 0
81250: PPUSH
81251: PPUSH
// result := [ ] ;
81252: LD_ADDR_VAR 0 2
81256: PUSH
81257: EMPTY
81258: ST_TO_ADDR
// if not array then
81259: LD_VAR 0 1
81263: NOT
81264: IFFALSE 81268
// exit ;
81266: GO 81329
// for i := 1 to array do
81268: LD_ADDR_VAR 0 3
81272: PUSH
81273: DOUBLE
81274: LD_INT 1
81276: DEC
81277: ST_TO_ADDR
81278: LD_VAR 0 1
81282: PUSH
81283: FOR_TO
81284: IFFALSE 81327
// if not array [ i ] in result then
81286: LD_VAR 0 1
81290: PUSH
81291: LD_VAR 0 3
81295: ARRAY
81296: PUSH
81297: LD_VAR 0 2
81301: IN
81302: NOT
81303: IFFALSE 81325
// result := Join ( result , i ) ;
81305: LD_ADDR_VAR 0 2
81309: PUSH
81310: LD_VAR 0 2
81314: PPUSH
81315: LD_VAR 0 3
81319: PPUSH
81320: CALL 75980 0 2
81324: ST_TO_ADDR
81325: GO 81283
81327: POP
81328: POP
// end ; end_of_file
81329: LD_VAR 0 2
81333: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81334: LD_VAR 0 1
81338: PUSH
81339: LD_INT 200
81341: DOUBLE
81342: GREATEREQUAL
81343: IFFALSE 81351
81345: LD_INT 299
81347: DOUBLE
81348: LESSEQUAL
81349: IFTRUE 81353
81351: GO 81385
81353: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81354: LD_VAR 0 1
81358: PPUSH
81359: LD_VAR 0 2
81363: PPUSH
81364: LD_VAR 0 3
81368: PPUSH
81369: LD_VAR 0 4
81373: PPUSH
81374: LD_VAR 0 5
81378: PPUSH
81379: CALL 15970 0 5
81383: GO 81462
81385: LD_INT 300
81387: DOUBLE
81388: GREATEREQUAL
81389: IFFALSE 81397
81391: LD_INT 399
81393: DOUBLE
81394: LESSEQUAL
81395: IFTRUE 81399
81397: GO 81461
81399: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81400: LD_VAR 0 1
81404: PPUSH
81405: LD_VAR 0 2
81409: PPUSH
81410: LD_VAR 0 3
81414: PPUSH
81415: LD_VAR 0 4
81419: PPUSH
81420: LD_VAR 0 5
81424: PPUSH
81425: LD_VAR 0 6
81429: PPUSH
81430: LD_VAR 0 7
81434: PPUSH
81435: LD_VAR 0 8
81439: PPUSH
81440: LD_VAR 0 9
81444: PPUSH
81445: LD_VAR 0 10
81449: PPUSH
81450: LD_VAR 0 11
81454: PPUSH
81455: CALL 34333 0 11
81459: GO 81462
81461: POP
// end ;
81462: PPOPN 11
81464: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81465: LD_VAR 0 1
81469: PPUSH
81470: LD_VAR 0 2
81474: PPUSH
81475: LD_VAR 0 3
81479: PPUSH
81480: LD_VAR 0 4
81484: PPUSH
81485: LD_VAR 0 5
81489: PPUSH
81490: CALL 15270 0 5
// end ; end_of_file
81494: PPOPN 5
81496: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81497: LD_VAR 0 1
81501: PPUSH
81502: LD_VAR 0 2
81506: PPUSH
81507: LD_VAR 0 3
81511: PPUSH
81512: LD_VAR 0 4
81516: PPUSH
81517: LD_VAR 0 5
81521: PPUSH
81522: LD_VAR 0 6
81526: PPUSH
81527: CALL 21873 0 6
// end ;
81531: PPOPN 6
81533: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81534: LD_INT 0
81536: PPUSH
// begin if not units then
81537: LD_VAR 0 1
81541: NOT
81542: IFFALSE 81546
// exit ;
81544: GO 81580
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
81546: LD_VAR 0 1
81550: PPUSH
81551: LD_VAR 0 2
81555: PPUSH
81556: LD_VAR 0 3
81560: PPUSH
81561: LD_VAR 0 4
81565: PPUSH
81566: LD_VAR 0 5
81570: PPUSH
81571: LD_VAR 0 6
81575: PPUSH
81576: CALL 21667 0 6
// end ;
81580: PPOPN 7
81582: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81583: CALL 21753 0 0
// end ;
81587: PPOPN 1
81589: END
