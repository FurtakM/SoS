// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 35 0 0
// InitTag ;
   8: CALL 101 0 0
// PrepareNature ( forestArea , swampArea ) ;
  12: LD_INT 3
  14: PPUSH
  15: LD_INT 2
  17: PPUSH
  18: CALL 568 0 2
// PrepareArabian ;
  22: CALL 2813 0 0
// PrepareRussian ;
  26: CALL 3599 0 0
// Action ;
  30: CALL 3607 0 0
// end ;
  34: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , spottedCrossRoad ; function Init ; begin
  35: LD_INT 0
  37: PPUSH
// debug := true ;
  38: LD_ADDR_EXP 1
  42: PUSH
  43: LD_INT 1
  45: ST_TO_ADDR
// prefix := 04_2_ ;
  46: LD_ADDR_EXP 2
  50: PUSH
  51: LD_STRING 04_2_
  53: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  54: LD_ADDR_EXP 3
  58: PUSH
  59: LD_STRING 04_1_Flamethrower
  61: PPUSH
  62: LD_EXP 1
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_STRING 04_2_IbrahimJoined
  79: PPUSH
  80: LD_INT 0
  82: PPUSH
  83: CALL_OW 30
  87: ST_TO_ADDR
// spottedCrossRoad := false ;
  88: LD_ADDR_EXP 5
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// end ;
  96: LD_VAR 0 1
 100: RET
// function InitTag ; begin
 101: LD_INT 0
 103: PPUSH
// end ;
 104: LD_VAR 0 1
 108: RET
// every 0 0$1 trigger debug do var i ;
 109: LD_EXP 1
 113: IFFALSE 197
 115: GO 117
 117: DISABLE
 118: LD_INT 0
 120: PPUSH
// begin enable ;
 121: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 122: LD_ADDR_VAR 0 1
 126: PUSH
 127: LD_INT 22
 129: PUSH
 130: LD_INT 2
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: PUSH
 137: LD_INT 3
 139: PUSH
 140: LD_INT 21
 142: PUSH
 143: LD_INT 3
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: PUSH
 154: EMPTY
 155: LIST
 156: LIST
 157: PPUSH
 158: CALL_OW 69
 162: PUSH
 163: FOR_IN
 164: IFFALSE 195
// if GetLives ( i ) < 1000 then
 166: LD_VAR 0 1
 170: PPUSH
 171: CALL_OW 256
 175: PUSH
 176: LD_INT 1000
 178: LESS
 179: IFFALSE 193
// SetLives ( i , 1000 ) ;
 181: LD_VAR 0 1
 185: PPUSH
 186: LD_INT 1000
 188: PPUSH
 189: CALL_OW 234
 193: GO 163
 195: POP
 196: POP
// end ; end_of_file
 197: PPOPN 1
 199: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 200: LD_INT 0
 202: PPUSH
 203: PPUSH
// if exist_mode then
 204: LD_VAR 0 2
 208: IFFALSE 233
// unit := CreateCharacter ( prefix & ident ) else
 210: LD_ADDR_VAR 0 5
 214: PUSH
 215: LD_VAR 0 3
 219: PUSH
 220: LD_VAR 0 1
 224: STR
 225: PPUSH
 226: CALL_OW 34
 230: ST_TO_ADDR
 231: GO 248
// unit := NewCharacter ( ident ) ;
 233: LD_ADDR_VAR 0 5
 237: PUSH
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 25
 247: ST_TO_ADDR
// result := unit ;
 248: LD_ADDR_VAR 0 4
 252: PUSH
 253: LD_VAR 0 5
 257: ST_TO_ADDR
// end ;
 258: LD_VAR 0 4
 262: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 263: LD_INT 0
 265: PPUSH
// uc_side := side ;
 266: LD_ADDR_OWVAR 20
 270: PUSH
 271: LD_VAR 0 1
 275: ST_TO_ADDR
// uc_nation := nation ;
 276: LD_ADDR_OWVAR 21
 280: PUSH
 281: LD_VAR 0 2
 285: ST_TO_ADDR
// vc_chassis := chassis ;
 286: LD_ADDR_OWVAR 37
 290: PUSH
 291: LD_VAR 0 3
 295: ST_TO_ADDR
// vc_engine := engine ;
 296: LD_ADDR_OWVAR 39
 300: PUSH
 301: LD_VAR 0 4
 305: ST_TO_ADDR
// vc_control := control ;
 306: LD_ADDR_OWVAR 38
 310: PUSH
 311: LD_VAR 0 5
 315: ST_TO_ADDR
// vc_weapon := weapon ;
 316: LD_ADDR_OWVAR 40
 320: PUSH
 321: LD_VAR 0 6
 325: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 326: LD_ADDR_OWVAR 41
 330: PUSH
 331: LD_VAR 0 7
 335: ST_TO_ADDR
// result := CreateVehicle ;
 336: LD_ADDR_VAR 0 8
 340: PUSH
 341: CALL_OW 45
 345: ST_TO_ADDR
// end ;
 346: LD_VAR 0 8
 350: RET
// export function SayX ( units , ident ) ; var i ; begin
 351: LD_INT 0
 353: PPUSH
 354: PPUSH
// result := false ;
 355: LD_ADDR_VAR 0 3
 359: PUSH
 360: LD_INT 0
 362: ST_TO_ADDR
// if not units then
 363: LD_VAR 0 1
 367: NOT
 368: IFFALSE 372
// exit ;
 370: GO 426
// for i in units do
 372: LD_ADDR_VAR 0 4
 376: PUSH
 377: LD_VAR 0 1
 381: PUSH
 382: FOR_IN
 383: IFFALSE 424
// if IsOk ( i ) then
 385: LD_VAR 0 4
 389: PPUSH
 390: CALL_OW 302
 394: IFFALSE 422
// begin Say ( i , ident ) ;
 396: LD_VAR 0 4
 400: PPUSH
 401: LD_VAR 0 2
 405: PPUSH
 406: CALL_OW 88
// result := i ;
 410: LD_ADDR_VAR 0 3
 414: PUSH
 415: LD_VAR 0 4
 419: ST_TO_ADDR
// break ;
 420: GO 424
// end ;
 422: GO 382
 424: POP
 425: POP
// end ;
 426: LD_VAR 0 3
 430: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 431: LD_INT 0
 433: PPUSH
 434: PPUSH
// InitUc ;
 435: CALL_OW 18
// InitHc ;
 439: CALL_OW 19
// uc_side := 0 ;
 443: LD_ADDR_OWVAR 20
 447: PUSH
 448: LD_INT 0
 450: ST_TO_ADDR
// uc_nation := 0 ;
 451: LD_ADDR_OWVAR 21
 455: PUSH
 456: LD_INT 0
 458: ST_TO_ADDR
// for i = 1 to amount do
 459: LD_ADDR_VAR 0 4
 463: PUSH
 464: DOUBLE
 465: LD_INT 1
 467: DEC
 468: ST_TO_ADDR
 469: LD_VAR 0 2
 473: PUSH
 474: FOR_TO
 475: IFFALSE 557
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 477: LD_ADDR_OWVAR 29
 481: PUSH
 482: LD_INT 9
 484: PPUSH
 485: LD_INT 12
 487: PPUSH
 488: CALL_OW 12
 492: PUSH
 493: LD_INT 9
 495: PPUSH
 496: LD_INT 12
 498: PPUSH
 499: CALL_OW 12
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 508: LD_ADDR_OWVAR 35
 512: PUSH
 513: LD_INT 1
 515: NEG
 516: PPUSH
 517: LD_INT 1
 519: PPUSH
 520: CALL_OW 12
 524: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 525: LD_INT 0
 527: PPUSH
 528: LD_INT 12
 530: PPUSH
 531: LD_INT 1
 533: PPUSH
 534: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 538: CALL_OW 44
 542: PPUSH
 543: LD_VAR 0 1
 547: PPUSH
 548: LD_INT 0
 550: PPUSH
 551: CALL_OW 49
// end ;
 555: GO 474
 557: POP
 558: POP
// InitHc ;
 559: CALL_OW 19
// end ;
 563: LD_VAR 0 3
 567: RET
// export function PrepareNature ( forest , swamp ) ; var i ; begin
 568: LD_INT 0
 570: PPUSH
 571: PPUSH
// SpawnApeman ( forest , [ 5 , 4 , 4 ] [ Difficulty ] ) ;
 572: LD_VAR 0 1
 576: PPUSH
 577: LD_INT 5
 579: PUSH
 580: LD_INT 4
 582: PUSH
 583: LD_INT 4
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: LIST
 590: PUSH
 591: LD_OWVAR 67
 595: ARRAY
 596: PPUSH
 597: CALL 431 0 2
// for i := 1 to 3 do
 601: LD_ADDR_VAR 0 4
 605: PUSH
 606: DOUBLE
 607: LD_INT 1
 609: DEC
 610: ST_TO_ADDR
 611: LD_INT 3
 613: PUSH
 614: FOR_TO
 615: IFFALSE 652
// begin hc_class := 21 ;
 617: LD_ADDR_OWVAR 28
 621: PUSH
 622: LD_INT 21
 624: ST_TO_ADDR
// hc_gallery :=  ;
 625: LD_ADDR_OWVAR 33
 629: PUSH
 630: LD_STRING 
 632: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 633: CALL_OW 44
 637: PPUSH
 638: LD_VAR 0 1
 642: PPUSH
 643: LD_INT 0
 645: PPUSH
 646: CALL_OW 49
// end ;
 650: GO 614
 652: POP
 653: POP
// for i := 1 to 3 do
 654: LD_ADDR_VAR 0 4
 658: PUSH
 659: DOUBLE
 660: LD_INT 1
 662: DEC
 663: ST_TO_ADDR
 664: LD_INT 3
 666: PUSH
 667: FOR_TO
 668: IFFALSE 705
// begin hc_class := 18 ;
 670: LD_ADDR_OWVAR 28
 674: PUSH
 675: LD_INT 18
 677: ST_TO_ADDR
// hc_gallery :=  ;
 678: LD_ADDR_OWVAR 33
 682: PUSH
 683: LD_STRING 
 685: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 686: CALL_OW 44
 690: PPUSH
 691: LD_VAR 0 1
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 49
// end ;
 703: GO 667
 705: POP
 706: POP
// for i := 1 to 3 do
 707: LD_ADDR_VAR 0 4
 711: PUSH
 712: DOUBLE
 713: LD_INT 1
 715: DEC
 716: ST_TO_ADDR
 717: LD_INT 3
 719: PUSH
 720: FOR_TO
 721: IFFALSE 758
// begin hc_class := 13 ;
 723: LD_ADDR_OWVAR 28
 727: PUSH
 728: LD_INT 13
 730: ST_TO_ADDR
// hc_gallery :=  ;
 731: LD_ADDR_OWVAR 33
 735: PUSH
 736: LD_STRING 
 738: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 739: CALL_OW 44
 743: PPUSH
 744: LD_VAR 0 1
 748: PPUSH
 749: LD_INT 0
 751: PPUSH
 752: CALL_OW 49
// end ;
 756: GO 720
 758: POP
 759: POP
// for i := 1 to 4 do
 760: LD_ADDR_VAR 0 4
 764: PUSH
 765: DOUBLE
 766: LD_INT 1
 768: DEC
 769: ST_TO_ADDR
 770: LD_INT 4
 772: PUSH
 773: FOR_TO
 774: IFFALSE 811
// begin hc_class := class_frog ;
 776: LD_ADDR_OWVAR 28
 780: PUSH
 781: LD_INT 19
 783: ST_TO_ADDR
// hc_gallery :=  ;
 784: LD_ADDR_OWVAR 33
 788: PUSH
 789: LD_STRING 
 791: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 792: CALL_OW 44
 796: PPUSH
 797: LD_VAR 0 2
 801: PPUSH
 802: LD_INT 0
 804: PPUSH
 805: CALL_OW 49
// end ;
 809: GO 773
 811: POP
 812: POP
// end ;
 813: LD_VAR 0 3
 817: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 818: LD_INT 0
 820: PPUSH
 821: PPUSH
 822: PPUSH
// if not observer or not unit then
 823: LD_VAR 0 1
 827: NOT
 828: PUSH
 829: LD_VAR 0 2
 833: NOT
 834: OR
 835: IFFALSE 839
// exit ;
 837: GO 887
// if not See ( GetSide ( observer ) , unit ) then
 839: LD_VAR 0 1
 843: PPUSH
 844: CALL_OW 255
 848: PPUSH
 849: LD_VAR 0 2
 853: PPUSH
 854: CALL_OW 292
 858: NOT
 859: IFFALSE 863
// exit ;
 861: GO 887
// result := GetDistUnits ( observer , unit ) < 12 ;
 863: LD_ADDR_VAR 0 3
 867: PUSH
 868: LD_VAR 0 1
 872: PPUSH
 873: LD_VAR 0 2
 877: PPUSH
 878: CALL_OW 296
 882: PUSH
 883: LD_INT 12
 885: LESS
 886: ST_TO_ADDR
// end ;
 887: LD_VAR 0 3
 891: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 892: LD_INT 0
 894: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 895: LD_VAR 0 2
 899: PUSH
 900: LD_INT 1
 902: ARRAY
 903: PPUSH
 904: LD_VAR 0 2
 908: PUSH
 909: LD_INT 2
 911: ARRAY
 912: PPUSH
 913: CALL_OW 488
 917: PUSH
 918: LD_VAR 0 2
 922: PUSH
 923: LD_INT 1
 925: ARRAY
 926: PPUSH
 927: LD_VAR 0 2
 931: PUSH
 932: LD_INT 2
 934: ARRAY
 935: PPUSH
 936: CALL_OW 428
 940: PUSH
 941: LD_INT 0
 943: EQUAL
 944: AND
 945: IFFALSE 979
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 947: LD_VAR 0 1
 951: PPUSH
 952: LD_VAR 0 2
 956: PUSH
 957: LD_INT 1
 959: ARRAY
 960: PPUSH
 961: LD_VAR 0 2
 965: PUSH
 966: LD_INT 2
 968: ARRAY
 969: PPUSH
 970: LD_VAR 0 3
 974: PPUSH
 975: CALL_OW 48
// end ;
 979: LD_VAR 0 4
 983: RET
// export function Video ( mode ) ; begin
 984: LD_INT 0
 986: PPUSH
// ingame_video = mode ;
 987: LD_ADDR_OWVAR 52
 991: PUSH
 992: LD_VAR 0 1
 996: ST_TO_ADDR
// interface_hidden = mode ;
 997: LD_ADDR_OWVAR 54
1001: PUSH
1002: LD_VAR 0 1
1006: ST_TO_ADDR
// end ;
1007: LD_VAR 0 2
1011: RET
// export function ReverseArray ( array ) ; var i ; begin
1012: LD_INT 0
1014: PPUSH
1015: PPUSH
// if not array then
1016: LD_VAR 0 1
1020: NOT
1021: IFFALSE 1025
// exit ;
1023: GO 1083
// result := [ ] ;
1025: LD_ADDR_VAR 0 2
1029: PUSH
1030: EMPTY
1031: ST_TO_ADDR
// for i := 1 to array do
1032: LD_ADDR_VAR 0 3
1036: PUSH
1037: DOUBLE
1038: LD_INT 1
1040: DEC
1041: ST_TO_ADDR
1042: LD_VAR 0 1
1046: PUSH
1047: FOR_TO
1048: IFFALSE 1081
// result := Insert ( result , 1 , array [ i ] ) ;
1050: LD_ADDR_VAR 0 2
1054: PUSH
1055: LD_VAR 0 2
1059: PPUSH
1060: LD_INT 1
1062: PPUSH
1063: LD_VAR 0 1
1067: PUSH
1068: LD_VAR 0 3
1072: ARRAY
1073: PPUSH
1074: CALL_OW 2
1078: ST_TO_ADDR
1079: GO 1047
1081: POP
1082: POP
// end ;
1083: LD_VAR 0 2
1087: RET
// export function ComExit ( unit ) ; begin
1088: LD_INT 0
1090: PPUSH
// result := IsInUnit ( unit ) ;
1091: LD_ADDR_VAR 0 2
1095: PUSH
1096: LD_VAR 0 1
1100: PPUSH
1101: CALL_OW 310
1105: ST_TO_ADDR
// if not result then
1106: LD_VAR 0 2
1110: NOT
1111: IFFALSE 1115
// exit ;
1113: GO 1150
// if GetType ( result ) = unit_vehicle then
1115: LD_VAR 0 2
1119: PPUSH
1120: CALL_OW 247
1124: PUSH
1125: LD_INT 2
1127: EQUAL
1128: IFFALSE 1141
// ComExitVehicle ( unit ) else
1130: LD_VAR 0 1
1134: PPUSH
1135: CALL_OW 121
1139: GO 1150
// ComExitBuilding ( unit ) ;
1141: LD_VAR 0 1
1145: PPUSH
1146: CALL_OW 122
// end ;
1150: LD_VAR 0 2
1154: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1155: LD_INT 0
1157: PPUSH
1158: PPUSH
// if not side or not nation then
1159: LD_VAR 0 1
1163: NOT
1164: PUSH
1165: LD_VAR 0 2
1169: NOT
1170: OR
1171: IFFALSE 1175
// exit ;
1173: GO 1939
// case nation of nation_american :
1175: LD_VAR 0 2
1179: PUSH
1180: LD_INT 1
1182: DOUBLE
1183: EQUAL
1184: IFTRUE 1188
1186: GO 1402
1188: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1189: LD_ADDR_VAR 0 4
1193: PUSH
1194: LD_INT 35
1196: PUSH
1197: LD_INT 45
1199: PUSH
1200: LD_INT 46
1202: PUSH
1203: LD_INT 47
1205: PUSH
1206: LD_INT 82
1208: PUSH
1209: LD_INT 83
1211: PUSH
1212: LD_INT 84
1214: PUSH
1215: LD_INT 85
1217: PUSH
1218: LD_INT 86
1220: PUSH
1221: LD_INT 1
1223: PUSH
1224: LD_INT 2
1226: PUSH
1227: LD_INT 6
1229: PUSH
1230: LD_INT 15
1232: PUSH
1233: LD_INT 16
1235: PUSH
1236: LD_INT 7
1238: PUSH
1239: LD_INT 12
1241: PUSH
1242: LD_INT 13
1244: PUSH
1245: LD_INT 10
1247: PUSH
1248: LD_INT 14
1250: PUSH
1251: LD_INT 20
1253: PUSH
1254: LD_INT 21
1256: PUSH
1257: LD_INT 22
1259: PUSH
1260: LD_INT 25
1262: PUSH
1263: LD_INT 32
1265: PUSH
1266: LD_INT 27
1268: PUSH
1269: LD_INT 36
1271: PUSH
1272: LD_INT 69
1274: PUSH
1275: LD_INT 39
1277: PUSH
1278: LD_INT 34
1280: PUSH
1281: LD_INT 40
1283: PUSH
1284: LD_INT 48
1286: PUSH
1287: LD_INT 49
1289: PUSH
1290: LD_INT 50
1292: PUSH
1293: LD_INT 51
1295: PUSH
1296: LD_INT 52
1298: PUSH
1299: LD_INT 53
1301: PUSH
1302: LD_INT 54
1304: PUSH
1305: LD_INT 55
1307: PUSH
1308: LD_INT 56
1310: PUSH
1311: LD_INT 57
1313: PUSH
1314: LD_INT 58
1316: PUSH
1317: LD_INT 59
1319: PUSH
1320: LD_INT 60
1322: PUSH
1323: LD_INT 61
1325: PUSH
1326: LD_INT 62
1328: PUSH
1329: LD_INT 80
1331: PUSH
1332: LD_INT 82
1334: PUSH
1335: LD_INT 83
1337: PUSH
1338: LD_INT 84
1340: PUSH
1341: LD_INT 85
1343: PUSH
1344: LD_INT 86
1346: PUSH
1347: EMPTY
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: LIST
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: ST_TO_ADDR
1400: GO 1863
1402: LD_INT 2
1404: DOUBLE
1405: EQUAL
1406: IFTRUE 1410
1408: GO 1632
1410: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1411: LD_ADDR_VAR 0 4
1415: PUSH
1416: LD_INT 35
1418: PUSH
1419: LD_INT 45
1421: PUSH
1422: LD_INT 46
1424: PUSH
1425: LD_INT 47
1427: PUSH
1428: LD_INT 82
1430: PUSH
1431: LD_INT 83
1433: PUSH
1434: LD_INT 84
1436: PUSH
1437: LD_INT 85
1439: PUSH
1440: LD_INT 87
1442: PUSH
1443: LD_INT 70
1445: PUSH
1446: LD_INT 1
1448: PUSH
1449: LD_INT 11
1451: PUSH
1452: LD_INT 3
1454: PUSH
1455: LD_INT 4
1457: PUSH
1458: LD_INT 5
1460: PUSH
1461: LD_INT 6
1463: PUSH
1464: LD_INT 15
1466: PUSH
1467: LD_INT 18
1469: PUSH
1470: LD_INT 7
1472: PUSH
1473: LD_INT 17
1475: PUSH
1476: LD_INT 8
1478: PUSH
1479: LD_INT 20
1481: PUSH
1482: LD_INT 21
1484: PUSH
1485: LD_INT 22
1487: PUSH
1488: LD_INT 72
1490: PUSH
1491: LD_INT 26
1493: PUSH
1494: LD_INT 69
1496: PUSH
1497: LD_INT 39
1499: PUSH
1500: LD_INT 40
1502: PUSH
1503: LD_INT 41
1505: PUSH
1506: LD_INT 42
1508: PUSH
1509: LD_INT 43
1511: PUSH
1512: LD_INT 48
1514: PUSH
1515: LD_INT 49
1517: PUSH
1518: LD_INT 50
1520: PUSH
1521: LD_INT 51
1523: PUSH
1524: LD_INT 52
1526: PUSH
1527: LD_INT 53
1529: PUSH
1530: LD_INT 54
1532: PUSH
1533: LD_INT 55
1535: PUSH
1536: LD_INT 56
1538: PUSH
1539: LD_INT 60
1541: PUSH
1542: LD_INT 61
1544: PUSH
1545: LD_INT 62
1547: PUSH
1548: LD_INT 66
1550: PUSH
1551: LD_INT 67
1553: PUSH
1554: LD_INT 68
1556: PUSH
1557: LD_INT 81
1559: PUSH
1560: LD_INT 82
1562: PUSH
1563: LD_INT 83
1565: PUSH
1566: LD_INT 84
1568: PUSH
1569: LD_INT 85
1571: PUSH
1572: LD_INT 87
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: LIST
1628: LIST
1629: ST_TO_ADDR
1630: GO 1863
1632: LD_INT 3
1634: DOUBLE
1635: EQUAL
1636: IFTRUE 1640
1638: GO 1862
1640: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1641: LD_ADDR_VAR 0 4
1645: PUSH
1646: LD_INT 46
1648: PUSH
1649: LD_INT 47
1651: PUSH
1652: LD_INT 1
1654: PUSH
1655: LD_INT 2
1657: PUSH
1658: LD_INT 82
1660: PUSH
1661: LD_INT 83
1663: PUSH
1664: LD_INT 84
1666: PUSH
1667: LD_INT 85
1669: PUSH
1670: LD_INT 86
1672: PUSH
1673: LD_INT 11
1675: PUSH
1676: LD_INT 9
1678: PUSH
1679: LD_INT 20
1681: PUSH
1682: LD_INT 19
1684: PUSH
1685: LD_INT 21
1687: PUSH
1688: LD_INT 24
1690: PUSH
1691: LD_INT 22
1693: PUSH
1694: LD_INT 25
1696: PUSH
1697: LD_INT 28
1699: PUSH
1700: LD_INT 29
1702: PUSH
1703: LD_INT 30
1705: PUSH
1706: LD_INT 31
1708: PUSH
1709: LD_INT 37
1711: PUSH
1712: LD_INT 38
1714: PUSH
1715: LD_INT 32
1717: PUSH
1718: LD_INT 27
1720: PUSH
1721: LD_INT 33
1723: PUSH
1724: LD_INT 69
1726: PUSH
1727: LD_INT 39
1729: PUSH
1730: LD_INT 34
1732: PUSH
1733: LD_INT 40
1735: PUSH
1736: LD_INT 71
1738: PUSH
1739: LD_INT 23
1741: PUSH
1742: LD_INT 44
1744: PUSH
1745: LD_INT 48
1747: PUSH
1748: LD_INT 49
1750: PUSH
1751: LD_INT 50
1753: PUSH
1754: LD_INT 51
1756: PUSH
1757: LD_INT 52
1759: PUSH
1760: LD_INT 53
1762: PUSH
1763: LD_INT 54
1765: PUSH
1766: LD_INT 55
1768: PUSH
1769: LD_INT 56
1771: PUSH
1772: LD_INT 57
1774: PUSH
1775: LD_INT 58
1777: PUSH
1778: LD_INT 59
1780: PUSH
1781: LD_INT 63
1783: PUSH
1784: LD_INT 64
1786: PUSH
1787: LD_INT 65
1789: PUSH
1790: LD_INT 82
1792: PUSH
1793: LD_INT 83
1795: PUSH
1796: LD_INT 84
1798: PUSH
1799: LD_INT 85
1801: PUSH
1802: LD_INT 86
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: ST_TO_ADDR
1860: GO 1863
1862: POP
// if state > - 1 and state < 3 then
1863: LD_VAR 0 3
1867: PUSH
1868: LD_INT 1
1870: NEG
1871: GREATER
1872: PUSH
1873: LD_VAR 0 3
1877: PUSH
1878: LD_INT 3
1880: LESS
1881: AND
1882: IFFALSE 1939
// for i in result do
1884: LD_ADDR_VAR 0 5
1888: PUSH
1889: LD_VAR 0 4
1893: PUSH
1894: FOR_IN
1895: IFFALSE 1937
// if GetTech ( i , side ) <> state then
1897: LD_VAR 0 5
1901: PPUSH
1902: LD_VAR 0 1
1906: PPUSH
1907: CALL_OW 321
1911: PUSH
1912: LD_VAR 0 3
1916: NONEQUAL
1917: IFFALSE 1935
// result := result diff i ;
1919: LD_ADDR_VAR 0 4
1923: PUSH
1924: LD_VAR 0 4
1928: PUSH
1929: LD_VAR 0 5
1933: DIFF
1934: ST_TO_ADDR
1935: GO 1894
1937: POP
1938: POP
// end ;
1939: LD_VAR 0 4
1943: RET
// export function SortByDistanceXY ( x , y , list , asc ) ; var i , j , tmp ; begin
1944: LD_INT 0
1946: PPUSH
1947: PPUSH
1948: PPUSH
1949: PPUSH
// if not list then
1950: LD_VAR 0 3
1954: NOT
1955: IFFALSE 1959
// exit ;
1957: GO 2267
// result := [ ] ;
1959: LD_ADDR_VAR 0 5
1963: PUSH
1964: EMPTY
1965: ST_TO_ADDR
// for i in list do
1966: LD_ADDR_VAR 0 6
1970: PUSH
1971: LD_VAR 0 3
1975: PUSH
1976: FOR_IN
1977: IFFALSE 2179
// begin tmp := GetDistUnitXY ( i , x , y ) ;
1979: LD_ADDR_VAR 0 8
1983: PUSH
1984: LD_VAR 0 6
1988: PPUSH
1989: LD_VAR 0 1
1993: PPUSH
1994: LD_VAR 0 2
1998: PPUSH
1999: CALL_OW 297
2003: ST_TO_ADDR
// if not result then
2004: LD_VAR 0 5
2008: NOT
2009: IFFALSE 2035
// result := [ [ i , tmp ] ] else
2011: LD_ADDR_VAR 0 5
2015: PUSH
2016: LD_VAR 0 6
2020: PUSH
2021: LD_VAR 0 8
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: EMPTY
2031: LIST
2032: ST_TO_ADDR
2033: GO 2177
// begin if result [ result ] [ 2 ] < tmp then
2035: LD_VAR 0 5
2039: PUSH
2040: LD_VAR 0 5
2044: ARRAY
2045: PUSH
2046: LD_INT 2
2048: ARRAY
2049: PUSH
2050: LD_VAR 0 8
2054: LESS
2055: IFFALSE 2097
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
2057: LD_ADDR_VAR 0 5
2061: PUSH
2062: LD_VAR 0 5
2066: PPUSH
2067: LD_VAR 0 5
2071: PUSH
2072: LD_INT 1
2074: PLUS
2075: PPUSH
2076: LD_VAR 0 6
2080: PUSH
2081: LD_VAR 0 8
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: PPUSH
2090: CALL_OW 2
2094: ST_TO_ADDR
2095: GO 2177
// for j = 1 to result do
2097: LD_ADDR_VAR 0 7
2101: PUSH
2102: DOUBLE
2103: LD_INT 1
2105: DEC
2106: ST_TO_ADDR
2107: LD_VAR 0 5
2111: PUSH
2112: FOR_TO
2113: IFFALSE 2175
// begin if tmp < result [ j ] [ 2 ] then
2115: LD_VAR 0 8
2119: PUSH
2120: LD_VAR 0 5
2124: PUSH
2125: LD_VAR 0 7
2129: ARRAY
2130: PUSH
2131: LD_INT 2
2133: ARRAY
2134: LESS
2135: IFFALSE 2173
// begin result := Insert ( result , j , [ i , tmp ] ) ;
2137: LD_ADDR_VAR 0 5
2141: PUSH
2142: LD_VAR 0 5
2146: PPUSH
2147: LD_VAR 0 7
2151: PPUSH
2152: LD_VAR 0 6
2156: PUSH
2157: LD_VAR 0 8
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: PPUSH
2166: CALL_OW 2
2170: ST_TO_ADDR
// break ;
2171: GO 2175
// end ; end ;
2173: GO 2112
2175: POP
2176: POP
// end ; end ;
2177: GO 1976
2179: POP
2180: POP
// if result and not asc then
2181: LD_VAR 0 5
2185: PUSH
2186: LD_VAR 0 4
2190: NOT
2191: AND
2192: IFFALSE 2267
// begin tmp := result ;
2194: LD_ADDR_VAR 0 8
2198: PUSH
2199: LD_VAR 0 5
2203: ST_TO_ADDR
// for i = tmp downto 1 do
2204: LD_ADDR_VAR 0 6
2208: PUSH
2209: DOUBLE
2210: LD_VAR 0 8
2214: INC
2215: ST_TO_ADDR
2216: LD_INT 1
2218: PUSH
2219: FOR_DOWNTO
2220: IFFALSE 2265
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
2222: LD_ADDR_VAR 0 5
2226: PUSH
2227: LD_VAR 0 5
2231: PPUSH
2232: LD_VAR 0 8
2236: PUSH
2237: LD_VAR 0 6
2241: MINUS
2242: PUSH
2243: LD_INT 1
2245: PLUS
2246: PPUSH
2247: LD_VAR 0 8
2251: PUSH
2252: LD_VAR 0 6
2256: ARRAY
2257: PPUSH
2258: CALL_OW 1
2262: ST_TO_ADDR
2263: GO 2219
2265: POP
2266: POP
// end ; end ;
2267: LD_VAR 0 5
2271: RET
// export function SortByDistanceUnit ( unit , list , asc ) ; begin
2272: LD_INT 0
2274: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc ) ;
2275: LD_ADDR_VAR 0 4
2279: PUSH
2280: LD_VAR 0 1
2284: PPUSH
2285: CALL_OW 250
2289: PPUSH
2290: LD_VAR 0 1
2294: PPUSH
2295: CALL_OW 251
2299: PPUSH
2300: LD_VAR 0 2
2304: PPUSH
2305: LD_VAR 0 3
2309: PPUSH
2310: CALL 1944 0 4
2314: ST_TO_ADDR
// end ;
2315: LD_VAR 0 4
2319: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
2320: LD_INT 0
2322: PPUSH
2323: PPUSH
2324: PPUSH
2325: PPUSH
2326: PPUSH
// if not unit then
2327: LD_VAR 0 1
2331: NOT
2332: IFFALSE 2336
// exit ;
2334: GO 2538
// side := GetSide ( unit ) ;
2336: LD_ADDR_VAR 0 4
2340: PUSH
2341: LD_VAR 0 1
2345: PPUSH
2346: CALL_OW 255
2350: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
2351: LD_ADDR_VAR 0 5
2355: PUSH
2356: LD_INT 22
2358: PUSH
2359: LD_VAR 0 4
2363: PUSH
2364: EMPTY
2365: LIST
2366: LIST
2367: PUSH
2368: LD_INT 30
2370: PUSH
2371: LD_VAR 0 2
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: PUSH
2380: EMPTY
2381: LIST
2382: LIST
2383: PPUSH
2384: CALL_OW 69
2388: ST_TO_ADDR
// if not tmp then
2389: LD_VAR 0 5
2393: NOT
2394: IFFALSE 2398
// exit ;
2396: GO 2538
// tmp := SortByDistanceUnit ( unit , tmp , true ) ;
2398: LD_ADDR_VAR 0 5
2402: PUSH
2403: LD_VAR 0 1
2407: PPUSH
2408: LD_VAR 0 5
2412: PPUSH
2413: LD_INT 1
2415: PPUSH
2416: CALL 2272 0 3
2420: ST_TO_ADDR
// places := 1 ;
2421: LD_ADDR_VAR 0 7
2425: PUSH
2426: LD_INT 1
2428: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
2429: LD_VAR 0 2
2433: PUSH
2434: LD_INT 0
2436: PUSH
2437: LD_INT 1
2439: PUSH
2440: LD_INT 4
2442: PUSH
2443: LD_INT 5
2445: PUSH
2446: LD_INT 2
2448: PUSH
2449: LD_INT 3
2451: PUSH
2452: LD_INT 6
2454: PUSH
2455: LD_INT 7
2457: PUSH
2458: LD_INT 8
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: LIST
2465: LIST
2466: LIST
2467: LIST
2468: LIST
2469: LIST
2470: LIST
2471: IN
2472: IFFALSE 2482
// places := 6 ;
2474: LD_ADDR_VAR 0 7
2478: PUSH
2479: LD_INT 6
2481: ST_TO_ADDR
// for i in tmp do
2482: LD_ADDR_VAR 0 6
2486: PUSH
2487: LD_VAR 0 5
2491: PUSH
2492: FOR_IN
2493: IFFALSE 2536
// begin if UnitsInside ( i ) - places <= 0 then
2495: LD_VAR 0 6
2499: PPUSH
2500: CALL_OW 313
2504: PUSH
2505: LD_VAR 0 7
2509: MINUS
2510: PUSH
2511: LD_INT 0
2513: LESSEQUAL
2514: IFFALSE 2520
// continue else
2516: GO 2492
2518: GO 2534
// begin result := i ;
2520: LD_ADDR_VAR 0 3
2524: PUSH
2525: LD_VAR 0 6
2529: ST_TO_ADDR
// exit ;
2530: POP
2531: POP
2532: GO 2538
// end ; end ;
2534: GO 2492
2536: POP
2537: POP
// end ;
2538: LD_VAR 0 3
2542: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
2543: LD_INT 0
2545: PPUSH
2546: PPUSH
2547: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
2548: LD_VAR 0 1
2552: NOT
2553: PUSH
2554: LD_VAR 0 2
2558: PUSH
2559: LD_INT 1
2561: PUSH
2562: LD_INT 2
2564: PUSH
2565: LD_INT 3
2567: PUSH
2568: LD_INT 4
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: IN
2577: NOT
2578: OR
2579: IFFALSE 2583
// exit ;
2581: GO 2675
// tmp := [ ] ;
2583: LD_ADDR_VAR 0 5
2587: PUSH
2588: EMPTY
2589: ST_TO_ADDR
// for i in units do
2590: LD_ADDR_VAR 0 4
2594: PUSH
2595: LD_VAR 0 1
2599: PUSH
2600: FOR_IN
2601: IFFALSE 2644
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
2603: LD_ADDR_VAR 0 5
2607: PUSH
2608: LD_VAR 0 5
2612: PPUSH
2613: LD_VAR 0 5
2617: PUSH
2618: LD_INT 1
2620: PLUS
2621: PPUSH
2622: LD_VAR 0 4
2626: PPUSH
2627: LD_VAR 0 2
2631: PPUSH
2632: CALL_OW 259
2636: PPUSH
2637: CALL_OW 2
2641: ST_TO_ADDR
2642: GO 2600
2644: POP
2645: POP
// if not tmp then
2646: LD_VAR 0 5
2650: NOT
2651: IFFALSE 2655
// exit ;
2653: GO 2675
// result := SortListByListDesc ( units , tmp ) ;
2655: LD_ADDR_VAR 0 3
2659: PUSH
2660: LD_VAR 0 1
2664: PPUSH
2665: LD_VAR 0 5
2669: PPUSH
2670: CALL_OW 77
2674: ST_TO_ADDR
// end ;
2675: LD_VAR 0 3
2679: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
2680: LD_INT 0
2682: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
2683: LD_VAR 0 1
2687: PPUSH
2688: LD_VAR 0 2
2692: PPUSH
2693: LD_VAR 0 3
2697: PPUSH
2698: LD_VAR 0 4
2702: PPUSH
2703: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
2707: LD_VAR 0 1
2711: PPUSH
2712: LD_VAR 0 2
2716: PPUSH
2717: LD_VAR 0 3
2721: PPUSH
2722: CALL_OW 331
// end ;
2726: LD_VAR 0 5
2730: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
2731: LD_INT 0
2733: PPUSH
// if not units then
2734: LD_VAR 0 1
2738: NOT
2739: IFFALSE 2743
// exit ;
2741: GO 2808
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) , menDialog ) then
2743: LD_VAR 0 1
2747: PPUSH
2748: LD_INT 26
2750: PUSH
2751: LD_INT 1
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PPUSH
2758: CALL_OW 72
2762: PPUSH
2763: LD_VAR 0 2
2767: PPUSH
2768: CALL_OW 88
2772: NOT
2773: IFFALSE 2808
// Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
2775: LD_VAR 0 1
2779: PPUSH
2780: LD_INT 26
2782: PUSH
2783: LD_INT 2
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: PPUSH
2790: CALL_OW 72
2794: PUSH
2795: LD_INT 1
2797: ARRAY
2798: PPUSH
2799: LD_VAR 0 3
2803: PPUSH
2804: CALL_OW 88
// end ; end_of_file
2808: LD_VAR 0 4
2812: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
2813: LD_INT 0
2815: PPUSH
2816: PPUSH
// uc_side := 2 ;
2817: LD_ADDR_OWVAR 20
2821: PUSH
2822: LD_INT 2
2824: ST_TO_ADDR
// uc_nation := 2 ;
2825: LD_ADDR_OWVAR 21
2829: PUSH
2830: LD_INT 2
2832: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
2833: LD_ADDR_EXP 6
2837: PUSH
2838: LD_STRING Heike
2840: PPUSH
2841: LD_EXP 1
2845: NOT
2846: PPUSH
2847: LD_EXP 2
2851: PPUSH
2852: CALL 200 0 3
2856: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
2857: LD_ADDR_EXP 9
2861: PUSH
2862: LD_STRING Ibrahim
2864: PPUSH
2865: LD_EXP 1
2869: NOT
2870: PPUSH
2871: LD_EXP 2
2875: PPUSH
2876: CALL 200 0 3
2880: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
2881: LD_ADDR_EXP 7
2885: PUSH
2886: LD_STRING Givi
2888: PPUSH
2889: LD_EXP 1
2893: NOT
2894: PPUSH
2895: LD_EXP 2
2899: PPUSH
2900: CALL 200 0 3
2904: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2905: LD_ADDR_EXP 10
2909: PUSH
2910: LD_STRING Kamil
2912: PPUSH
2913: LD_EXP 1
2917: NOT
2918: PPUSH
2919: LD_EXP 2
2923: PPUSH
2924: CALL 200 0 3
2928: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2929: LD_ADDR_EXP 11
2933: PUSH
2934: LD_STRING Kaia
2936: PPUSH
2937: LD_EXP 1
2941: NOT
2942: PPUSH
2943: LD_EXP 2
2947: PPUSH
2948: CALL 200 0 3
2952: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2953: LD_ADDR_EXP 12
2957: PUSH
2958: LD_STRING Sophia
2960: PPUSH
2961: LD_EXP 1
2965: NOT
2966: PPUSH
2967: LD_EXP 2
2971: PPUSH
2972: CALL 200 0 3
2976: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2977: LD_ADDR_EXP 13
2981: PUSH
2982: LD_STRING Markov
2984: PPUSH
2985: LD_EXP 1
2989: NOT
2990: PPUSH
2991: LD_EXP 2
2995: PPUSH
2996: CALL 200 0 3
3000: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
3001: LD_ADDR_EXP 17
3005: PUSH
3006: LD_STRING Aviradze
3008: PPUSH
3009: LD_EXP 1
3013: NOT
3014: PPUSH
3015: LD_EXP 2
3019: PPUSH
3020: CALL 200 0 3
3024: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
3025: LD_ADDR_EXP 16
3029: PUSH
3030: LD_STRING Kurt
3032: PPUSH
3033: LD_EXP 1
3037: NOT
3038: PPUSH
3039: LD_EXP 2
3043: PPUSH
3044: CALL 200 0 3
3048: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
3049: LD_ADDR_EXP 8
3053: PUSH
3054: LD_STRING Mike
3056: PPUSH
3057: LD_EXP 1
3061: NOT
3062: PPUSH
3063: LD_EXP 2
3067: PPUSH
3068: CALL 200 0 3
3072: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
3073: LD_ADDR_EXP 15
3077: PUSH
3078: LD_STRING Olaf
3080: PPUSH
3081: LD_INT 0
3083: PPUSH
3084: LD_STRING 
3086: PPUSH
3087: CALL 200 0 3
3091: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
3092: LD_ADDR_EXP 18
3096: PUSH
3097: LD_STRING 04_2_others
3099: PPUSH
3100: CALL_OW 31
3104: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
3105: LD_ADDR_EXP 20
3109: PUSH
3110: LD_STRING 04_2_apes
3112: PPUSH
3113: CALL_OW 31
3117: ST_TO_ADDR
// if hasFlamethrower then
3118: LD_EXP 3
3122: IFFALSE 3353
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
3124: LD_INT 70
3126: PPUSH
3127: LD_INT 2
3129: PPUSH
3130: LD_INT 2
3132: PPUSH
3133: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 ] [ Difficulty ] ] ] ] ;
3137: LD_ADDR_EXP 19
3141: PUSH
3142: LD_INT 13
3144: PUSH
3145: LD_INT 1
3147: PUSH
3148: LD_INT 1
3150: PUSH
3151: LD_INT 27
3153: PUSH
3154: LD_INT 2
3156: PUSH
3157: LD_INT 1000
3159: PUSH
3160: LD_INT 0
3162: PUSH
3163: LD_INT 0
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: PUSH
3179: LD_INT 13
3181: PUSH
3182: LD_INT 1
3184: PUSH
3185: LD_INT 1
3187: PUSH
3188: LD_INT 25
3190: PUSH
3191: LD_INT 2
3193: PUSH
3194: LD_INT 1000
3196: PUSH
3197: LD_INT 0
3199: PUSH
3200: LD_INT 0
3202: PUSH
3203: EMPTY
3204: LIST
3205: LIST
3206: PUSH
3207: EMPTY
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: PUSH
3216: LD_INT 13
3218: PUSH
3219: LD_INT 1
3221: PUSH
3222: LD_INT 1
3224: PUSH
3225: LD_INT 26
3227: PUSH
3228: LD_INT 2
3230: PUSH
3231: LD_INT 1000
3233: PUSH
3234: LD_INT 0
3236: PUSH
3237: LD_INT 0
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: PUSH
3253: LD_INT 13
3255: PUSH
3256: LD_INT 1
3258: PUSH
3259: LD_INT 1
3261: PUSH
3262: LD_INT 27
3264: PUSH
3265: LD_INT 2
3267: PUSH
3268: LD_INT 1000
3270: PUSH
3271: LD_INT 0
3273: PUSH
3274: LD_INT 0
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: LIST
3289: PUSH
3290: LD_INT 13
3292: PUSH
3293: LD_INT 1
3295: PUSH
3296: LD_INT 1
3298: PUSH
3299: LD_INT 32
3301: PUSH
3302: LD_INT 2
3304: PUSH
3305: LD_INT 1000
3307: PUSH
3308: LD_INT 0
3310: PUSH
3311: LD_INT 60
3313: PUSH
3314: LD_INT 40
3316: PUSH
3317: LD_INT 20
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: LIST
3324: PUSH
3325: LD_OWVAR 67
3329: ARRAY
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: LIST
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: ST_TO_ADDR
// end else
3351: GO 3567
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 ] [ Difficulty ] ] ] ] ;
3353: LD_ADDR_EXP 19
3357: PUSH
3358: LD_INT 13
3360: PUSH
3361: LD_INT 1
3363: PUSH
3364: LD_INT 1
3366: PUSH
3367: LD_INT 25
3369: PUSH
3370: LD_INT 2
3372: PUSH
3373: LD_INT 1000
3375: PUSH
3376: LD_INT 0
3378: PUSH
3379: LD_INT 0
3381: PUSH
3382: EMPTY
3383: LIST
3384: LIST
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: PUSH
3395: LD_INT 13
3397: PUSH
3398: LD_INT 1
3400: PUSH
3401: LD_INT 1
3403: PUSH
3404: LD_INT 27
3406: PUSH
3407: LD_INT 2
3409: PUSH
3410: LD_INT 1000
3412: PUSH
3413: LD_INT 0
3415: PUSH
3416: LD_INT 0
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PUSH
3423: EMPTY
3424: LIST
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: PUSH
3432: LD_INT 13
3434: PUSH
3435: LD_INT 1
3437: PUSH
3438: LD_INT 1
3440: PUSH
3441: LD_INT 24
3443: PUSH
3444: LD_INT 2
3446: PUSH
3447: LD_INT 1000
3449: PUSH
3450: LD_INT 0
3452: PUSH
3453: LD_INT 0
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: PUSH
3460: EMPTY
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: LIST
3468: PUSH
3469: LD_INT 13
3471: PUSH
3472: LD_INT 1
3474: PUSH
3475: LD_INT 1
3477: PUSH
3478: LD_INT 27
3480: PUSH
3481: LD_INT 2
3483: PUSH
3484: LD_INT 1000
3486: PUSH
3487: LD_INT 0
3489: PUSH
3490: LD_INT 0
3492: PUSH
3493: EMPTY
3494: LIST
3495: LIST
3496: PUSH
3497: EMPTY
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: PUSH
3506: LD_INT 13
3508: PUSH
3509: LD_INT 1
3511: PUSH
3512: LD_INT 1
3514: PUSH
3515: LD_INT 32
3517: PUSH
3518: LD_INT 2
3520: PUSH
3521: LD_INT 1000
3523: PUSH
3524: LD_INT 0
3526: PUSH
3527: LD_INT 50
3529: PUSH
3530: LD_INT 30
3532: PUSH
3533: LD_INT 20
3535: PUSH
3536: EMPTY
3537: LIST
3538: LIST
3539: LIST
3540: PUSH
3541: LD_OWVAR 67
3545: ARRAY
3546: PUSH
3547: EMPTY
3548: LIST
3549: LIST
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: ST_TO_ADDR
// end ; uc_side := 5 ;
3567: LD_ADDR_OWVAR 20
3571: PUSH
3572: LD_INT 5
3574: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
3575: LD_ADDR_EXP 14
3579: PUSH
3580: LD_STRING Abdul
3582: PPUSH
3583: LD_INT 0
3585: PPUSH
3586: LD_STRING 
3588: PPUSH
3589: CALL 200 0 3
3593: ST_TO_ADDR
// end ; end_of_file
3594: LD_VAR 0 1
3598: RET
// export function PrepareRussian ; begin
3599: LD_INT 0
3601: PPUSH
// end ; end_of_file end_of_file
3602: LD_VAR 0 1
3606: RET
// export function Action ; var i , un , veh , tmp ; begin
3607: LD_INT 0
3609: PPUSH
3610: PPUSH
3611: PPUSH
3612: PPUSH
3613: PPUSH
// InGameOn ;
3614: CALL_OW 8
// music_nat := 2 ;
3618: LD_ADDR_OWVAR 71
3622: PUSH
3623: LD_INT 2
3625: ST_TO_ADDR
// music_class := 0 ;
3626: LD_ADDR_OWVAR 72
3630: PUSH
3631: LD_INT 0
3633: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
3634: LD_INT 7
3636: PPUSH
3637: LD_INT 6
3639: PPUSH
3640: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 20 ) ;
3644: LD_INT 7
3646: PPUSH
3647: LD_INT 6
3649: PPUSH
3650: LD_INT 2
3652: PPUSH
3653: LD_INT 20
3655: NEG
3656: PPUSH
3657: CALL 2680 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Aviradze ] ;
3661: LD_ADDR_VAR 0 5
3665: PUSH
3666: LD_EXP 6
3670: PUSH
3671: LD_EXP 7
3675: PUSH
3676: LD_EXP 8
3680: PUSH
3681: LD_EXP 9
3685: PUSH
3686: LD_EXP 10
3690: PUSH
3691: LD_EXP 11
3695: PUSH
3696: LD_EXP 12
3700: PUSH
3701: LD_EXP 13
3705: PUSH
3706: LD_EXP 17
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: ST_TO_ADDR
// tmp := tmp diff 0 ;
3722: LD_ADDR_VAR 0 5
3726: PUSH
3727: LD_VAR 0 5
3731: PUSH
3732: LD_INT 0
3734: DIFF
3735: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
3736: LD_ADDR_VAR 0 5
3740: PUSH
3741: LD_VAR 0 5
3745: PPUSH
3746: LD_INT 3
3748: PPUSH
3749: CALL 2543 0 2
3753: ST_TO_ADDR
// for i in heikeVehicles do
3754: LD_ADDR_VAR 0 2
3758: PUSH
3759: LD_EXP 19
3763: PUSH
3764: FOR_IN
3765: IFFALSE 3964
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
3767: LD_INT 5
3769: PPUSH
3770: LD_VAR 0 2
3774: PUSH
3775: LD_INT 5
3777: ARRAY
3778: PPUSH
3779: LD_VAR 0 2
3783: PUSH
3784: LD_INT 1
3786: ARRAY
3787: PPUSH
3788: LD_VAR 0 2
3792: PUSH
3793: LD_INT 2
3795: ARRAY
3796: PPUSH
3797: LD_VAR 0 2
3801: PUSH
3802: LD_INT 3
3804: ARRAY
3805: PPUSH
3806: LD_VAR 0 2
3810: PUSH
3811: LD_INT 4
3813: ARRAY
3814: PPUSH
3815: LD_INT 34
3817: PPUSH
3818: CALL 263 0 7
// veh := CreateVehicle ;
3822: LD_ADDR_VAR 0 4
3826: PUSH
3827: CALL_OW 45
3831: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
3832: LD_VAR 0 2
3836: PUSH
3837: LD_INT 4
3839: ARRAY
3840: PUSH
3841: LD_INT 51
3843: PUSH
3844: LD_INT 32
3846: PUSH
3847: LD_INT 12
3849: PUSH
3850: EMPTY
3851: LIST
3852: LIST
3853: LIST
3854: IN
3855: IFFALSE 3935
// begin if i [ 7 ] [ 1 ] then
3857: LD_VAR 0 2
3861: PUSH
3862: LD_INT 7
3864: ARRAY
3865: PUSH
3866: LD_INT 1
3868: ARRAY
3869: IFFALSE 3896
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
3871: LD_VAR 0 4
3875: PPUSH
3876: LD_INT 1
3878: PPUSH
3879: LD_VAR 0 2
3883: PUSH
3884: LD_INT 7
3886: ARRAY
3887: PUSH
3888: LD_INT 1
3890: ARRAY
3891: PPUSH
3892: CALL_OW 291
// if i [ 7 ] [ 2 ] then
3896: LD_VAR 0 2
3900: PUSH
3901: LD_INT 7
3903: ARRAY
3904: PUSH
3905: LD_INT 2
3907: ARRAY
3908: IFFALSE 3935
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
3910: LD_VAR 0 4
3914: PPUSH
3915: LD_INT 2
3917: PPUSH
3918: LD_VAR 0 2
3922: PUSH
3923: LD_INT 7
3925: ARRAY
3926: PUSH
3927: LD_INT 2
3929: ARRAY
3930: PPUSH
3931: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
3935: LD_VAR 0 4
3939: PPUSH
3940: LD_INT 2
3942: PPUSH
3943: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
3947: LD_VAR 0 4
3951: PPUSH
3952: LD_INT 4
3954: PPUSH
3955: LD_INT 0
3957: PPUSH
3958: CALL_OW 49
// end ;
3962: GO 3764
3964: POP
3965: POP
// if tmp then
3966: LD_VAR 0 5
3970: IFFALSE 4025
// for i in tmp union heikeApes do
3972: LD_ADDR_VAR 0 2
3976: PUSH
3977: LD_VAR 0 5
3981: PUSH
3982: LD_EXP 20
3986: UNION
3987: PUSH
3988: FOR_IN
3989: IFFALSE 4023
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
3991: LD_VAR 0 2
3995: PPUSH
3996: LD_INT 5
3998: PPUSH
3999: LD_INT 0
4001: PPUSH
4002: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
4006: LD_VAR 0 2
4010: PPUSH
4011: LD_INT 26
4013: PPUSH
4014: LD_INT 9
4016: PPUSH
4017: CALL_OW 118
// end ;
4021: GO 3988
4023: POP
4024: POP
// if heikeSecondSquad then
4025: LD_EXP 18
4029: IFFALSE 4078
// for i in heikeSecondSquad do
4031: LD_ADDR_VAR 0 2
4035: PUSH
4036: LD_EXP 18
4040: PUSH
4041: FOR_IN
4042: IFFALSE 4076
// begin PlaceUnitArea ( i , spawnHumanArea2 , false ) ;
4044: LD_VAR 0 2
4048: PPUSH
4049: LD_INT 6
4051: PPUSH
4052: LD_INT 0
4054: PPUSH
4055: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
4059: LD_VAR 0 2
4063: PPUSH
4064: LD_INT 26
4066: PPUSH
4067: LD_INT 9
4069: PPUSH
4070: CALL_OW 118
// end ;
4074: GO 4041
4076: POP
4077: POP
// if heikeApes then
4078: LD_EXP 20
4082: IFFALSE 4125
// for i in heikeApes do
4084: LD_ADDR_VAR 0 2
4088: PUSH
4089: LD_EXP 20
4093: PUSH
4094: FOR_IN
4095: IFFALSE 4123
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
4097: LD_VAR 0 2
4101: PPUSH
4102: LD_INT 7
4104: PPUSH
4105: LD_INT 0
4107: PPUSH
4108: CALL_OW 49
// ComHold ( i ) ;
4112: LD_VAR 0 2
4116: PPUSH
4117: CALL_OW 140
// end ;
4121: GO 4094
4123: POP
4124: POP
// if Kurt then
4125: LD_EXP 16
4129: IFFALSE 4161
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
4131: LD_EXP 16
4135: PPUSH
4136: LD_INT 8
4138: PPUSH
4139: LD_INT 0
4141: PPUSH
4142: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
4146: LD_EXP 16
4150: PPUSH
4151: LD_INT 42
4153: PPUSH
4154: LD_INT 32
4156: PPUSH
4157: CALL_OW 118
// end ; Say ( Heike , DH-Start-1 ) ;
4161: LD_EXP 6
4165: PPUSH
4166: LD_STRING DH-Start-1
4168: PPUSH
4169: CALL_OW 88
// if Givi then
4173: LD_EXP 7
4177: IFFALSE 4440
// begin Say ( Givi , DG-Start-2-5 ) ;
4179: LD_EXP 7
4183: PPUSH
4184: LD_STRING DG-Start-2-5
4186: PPUSH
4187: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
4191: LD_EXP 6
4195: PPUSH
4196: LD_STRING DH-Start-3
4198: PPUSH
4199: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
4203: LD_EXP 6
4207: PPUSH
4208: LD_STRING DH-Start-4
4210: PPUSH
4211: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
4215: LD_EXP 7
4219: PPUSH
4220: LD_STRING DG-Start-5
4222: PPUSH
4223: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
4227: LD_EXP 6
4231: PPUSH
4232: LD_STRING DH-Start-6
4234: PPUSH
4235: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
4239: LD_EXP 7
4243: PPUSH
4244: LD_STRING DG-Start-7
4246: PPUSH
4247: CALL_OW 88
// if Mike then
4251: LD_EXP 8
4255: IFFALSE 4428
// begin Say ( Mike , DM-Start-8 ) ;
4257: LD_EXP 8
4261: PPUSH
4262: LD_STRING DM-Start-8
4264: PPUSH
4265: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
4269: LD_EXP 8
4273: PPUSH
4274: LD_STRING DM-Start-9
4276: PPUSH
4277: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
4281: LD_EXP 7
4285: PPUSH
4286: LD_STRING DG-Start-10
4288: PPUSH
4289: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
4293: LD_EXP 7
4297: PPUSH
4298: LD_STRING DG-Start-11
4300: PPUSH
4301: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
4305: LD_EXP 6
4309: PPUSH
4310: LD_STRING DH-Start-12
4312: PPUSH
4313: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
4317: LD_EXP 7
4321: PPUSH
4322: LD_STRING DG-Start-13
4324: PPUSH
4325: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
4329: LD_EXP 7
4333: PPUSH
4334: LD_STRING DG-Start-14
4336: PPUSH
4337: CALL_OW 88
// if Kaia then
4341: LD_EXP 11
4345: IFFALSE 4428
// begin Say ( Kaia , DK-Start-15 ) ;
4347: LD_EXP 11
4351: PPUSH
4352: LD_STRING DK-Start-15
4354: PPUSH
4355: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
4359: LD_EXP 11
4363: PPUSH
4364: LD_STRING DK-Start-16
4366: PPUSH
4367: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
4371: LD_EXP 11
4375: PPUSH
4376: LD_STRING DK-Start-17
4378: PPUSH
4379: CALL_OW 88
// wait ( 0 0$0.3 ) ;
4383: LD_INT 10
4385: PPUSH
4386: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
4390: LD_EXP 7
4394: PPUSH
4395: LD_EXP 11
4399: PPUSH
4400: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
4404: LD_EXP 7
4408: PPUSH
4409: LD_STRING DG-Start-18
4411: PPUSH
4412: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
4416: LD_EXP 11
4420: PPUSH
4421: LD_STRING DK-Start-19
4423: PPUSH
4424: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
4428: LD_EXP 6
4432: PPUSH
4433: LD_STRING DH-Start-20
4435: PPUSH
4436: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
4440: LD_INT 70
4442: PPUSH
4443: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
4447: LD_EXP 14
4451: PPUSH
4452: LD_STRING DShar-Start-21
4454: PPUSH
4455: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
4459: LD_EXP 6
4463: PPUSH
4464: LD_STRING DH-Start-22
4466: PPUSH
4467: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
4471: LD_EXP 14
4475: PPUSH
4476: LD_STRING DShar-Start-23
4478: PPUSH
4479: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
4483: LD_EXP 14
4487: PPUSH
4488: LD_STRING DShar-Start-24
4490: PPUSH
4491: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
4495: LD_EXP 14
4499: PPUSH
4500: LD_STRING DShar-Start-25
4502: PPUSH
4503: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
4507: LD_EXP 14
4511: PPUSH
4512: LD_STRING DShar-Start-26
4514: PPUSH
4515: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
4519: LD_EXP 6
4523: PPUSH
4524: LD_STRING DH-Start-27
4526: PPUSH
4527: CALL_OW 88
// if Kaia then
4531: LD_EXP 11
4535: IFFALSE 4575
// begin ComTurnUnit ( Heike , Kaia ) ;
4537: LD_EXP 6
4541: PPUSH
4542: LD_EXP 11
4546: PPUSH
4547: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
4551: LD_EXP 11
4555: PPUSH
4556: LD_STRING DK-Start-28
4558: PPUSH
4559: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
4563: LD_EXP 6
4567: PPUSH
4568: LD_STRING DH-Start-29
4570: PPUSH
4571: CALL_OW 88
// end ; if Givi then
4575: LD_EXP 7
4579: IFFALSE 4791
// begin ComTurnUnit ( Heike , Givi ) ;
4581: LD_EXP 6
4585: PPUSH
4586: LD_EXP 7
4590: PPUSH
4591: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
4595: LD_EXP 7
4599: PPUSH
4600: LD_EXP 6
4604: PPUSH
4605: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
4609: LD_EXP 6
4613: PPUSH
4614: LD_STRING DH-Start-30
4616: PPUSH
4617: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
4621: LD_EXP 6
4625: PPUSH
4626: LD_STRING DH-Start-31
4628: PPUSH
4629: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
4633: LD_EXP 7
4637: PPUSH
4638: LD_STRING DG-Start-32
4640: PPUSH
4641: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
4645: LD_EXP 6
4649: PPUSH
4650: LD_STRING DH-Start-33
4652: PPUSH
4653: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
4657: LD_EXP 7
4661: PPUSH
4662: LD_STRING DG-Start-34
4664: PPUSH
4665: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
4669: LD_EXP 7
4673: PPUSH
4674: LD_STRING DG-Start-35
4676: PPUSH
4677: CALL_OW 88
// if Kurt and not dialogue_skipped then
4681: LD_EXP 16
4685: PUSH
4686: LD_OWVAR 59
4690: NOT
4691: AND
4692: IFFALSE 4723
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
4694: LD_EXP 16
4698: PPUSH
4699: LD_INT 28
4701: PPUSH
4702: LD_INT 13
4704: PPUSH
4705: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
4709: LD_EXP 16
4713: PPUSH
4714: LD_EXP 6
4718: PPUSH
4719: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
4723: LD_EXP 7
4727: PPUSH
4728: LD_STRING DG-Start-36
4730: PPUSH
4731: CALL_OW 88
// if Kurt then
4735: LD_EXP 16
4739: IFFALSE 4791
// begin Say ( Kurt , DKs-Start-37 ) ;
4741: LD_EXP 16
4745: PPUSH
4746: LD_STRING DKs-Start-37
4748: PPUSH
4749: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
4753: LD_EXP 16
4757: PPUSH
4758: LD_STRING DKs-Start-38
4760: PPUSH
4761: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
4765: LD_EXP 6
4769: PPUSH
4770: LD_EXP 16
4774: PPUSH
4775: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
4779: LD_EXP 6
4783: PPUSH
4784: LD_STRING DH-Start-39
4786: PPUSH
4787: CALL_OW 88
// end ; end ; if HexInfo ( 44 , 25 ) then
4791: LD_INT 44
4793: PPUSH
4794: LD_INT 25
4796: PPUSH
4797: CALL_OW 428
4801: IFFALSE 4818
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
4803: LD_INT 44
4805: PPUSH
4806: LD_INT 25
4808: PPUSH
4809: CALL_OW 428
4813: PPUSH
4814: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
4818: LD_EXP 15
4822: PPUSH
4823: LD_INT 5
4825: PPUSH
4826: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
4830: LD_EXP 15
4834: PPUSH
4835: LD_INT 44
4837: PPUSH
4838: LD_INT 25
4840: PPUSH
4841: LD_INT 0
4843: PPUSH
4844: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
4848: LD_EXP 15
4852: PPUSH
4853: LD_INT 29
4855: PPUSH
4856: LD_INT 12
4858: PPUSH
4859: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4863: LD_INT 35
4865: PPUSH
4866: CALL_OW 67
// until GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
4870: LD_EXP 6
4874: PPUSH
4875: LD_EXP 15
4879: PPUSH
4880: CALL_OW 296
4884: PUSH
4885: LD_INT 8
4887: LESS
4888: PUSH
4889: LD_EXP 15
4893: PPUSH
4894: LD_INT 26
4896: PPUSH
4897: LD_INT 9
4899: PPUSH
4900: CALL_OW 297
4904: PUSH
4905: LD_INT 6
4907: LESS
4908: OR
4909: IFFALSE 4863
// Say ( Olaf , DO-Scout-1 ) ;
4911: LD_EXP 15
4915: PPUSH
4916: LD_STRING DO-Scout-1
4918: PPUSH
4919: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
4923: LD_EXP 15
4927: PPUSH
4928: LD_EXP 6
4932: PPUSH
4933: CALL_OW 119
// for i in tmp union heikeSecondSquad do
4937: LD_ADDR_VAR 0 2
4941: PUSH
4942: LD_VAR 0 5
4946: PUSH
4947: LD_EXP 18
4951: UNION
4952: PUSH
4953: FOR_IN
4954: IFFALSE 4972
// ComTurnUnit ( i , Olaf ) ;
4956: LD_VAR 0 2
4960: PPUSH
4961: LD_EXP 15
4965: PPUSH
4966: CALL_OW 119
4970: GO 4953
4972: POP
4973: POP
// wait ( 0 0$0.3 ) ;
4974: LD_INT 10
4976: PPUSH
4977: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
4981: LD_EXP 6
4985: PPUSH
4986: LD_EXP 15
4990: PPUSH
4991: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
4995: LD_EXP 6
4999: PPUSH
5000: LD_EXP 15
5004: PPUSH
5005: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
5009: LD_EXP 6
5013: PPUSH
5014: LD_STRING DH-Scout-2
5016: PPUSH
5017: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
5021: LD_EXP 15
5025: PPUSH
5026: LD_STRING DO-Scout-3
5028: PPUSH
5029: CALL_OW 88
// if Mike and Givi then
5033: LD_EXP 8
5037: PUSH
5038: LD_EXP 7
5042: AND
5043: IFFALSE 5059
// Say ( Olaf , DO-Scout-4 ) else
5045: LD_EXP 15
5049: PPUSH
5050: LD_STRING DO-Scout-4
5052: PPUSH
5053: CALL_OW 88
5057: GO 5159
// begin if Mike then
5059: LD_EXP 8
5063: IFFALSE 5091
// begin Say ( Olaf , DO-Scout-a-4 ) ;
5065: LD_EXP 15
5069: PPUSH
5070: LD_STRING DO-Scout-a-4
5072: PPUSH
5073: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
5077: LD_EXP 6
5081: PPUSH
5082: LD_STRING DH-Scout-a-5
5084: PPUSH
5085: CALL_OW 88
// end else
5089: GO 5159
// if Givi then
5091: LD_EXP 7
5095: IFFALSE 5123
// begin Say ( Olaf , DO-Scout-b-4 ) ;
5097: LD_EXP 15
5101: PPUSH
5102: LD_STRING DO-Scout-b-4
5104: PPUSH
5105: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
5109: LD_EXP 6
5113: PPUSH
5114: LD_STRING DH-Scout-b-5
5116: PPUSH
5117: CALL_OW 88
// end else
5121: GO 5159
// begin Say ( Olaf , DO-Scout-f-4 ) ;
5123: LD_EXP 15
5127: PPUSH
5128: LD_STRING DO-Scout-f-4
5130: PPUSH
5131: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
5135: LD_EXP 6
5139: PPUSH
5140: LD_STRING DH-Scout-f-5
5142: PPUSH
5143: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
5147: LD_EXP 15
5151: PPUSH
5152: LD_STRING DO-Scout-f-6
5154: PPUSH
5155: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
5159: LD_EXP 6
5163: PPUSH
5164: LD_STRING DH-Scout-5
5166: PPUSH
5167: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
5171: LD_EXP 15
5175: PPUSH
5176: LD_STRING DO-Scout-6
5178: PPUSH
5179: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
5183: LD_EXP 15
5187: PPUSH
5188: LD_STRING DO-Scout-7
5190: PPUSH
5191: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
5195: LD_EXP 6
5199: PPUSH
5200: LD_STRING DH-Scout-8
5202: PPUSH
5203: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
5207: LD_EXP 6
5211: PPUSH
5212: LD_STRING DH-Scout-9
5214: PPUSH
5215: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
5219: LD_EXP 15
5223: PPUSH
5224: LD_STRING DO-Scout-10
5226: PPUSH
5227: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
5231: LD_EXP 15
5235: PPUSH
5236: LD_STRING DO-Scout-12
5238: PPUSH
5239: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
5243: LD_EXP 15
5247: PPUSH
5248: LD_STRING DO-Scout-13
5250: PPUSH
5251: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
5255: LD_EXP 15
5259: PPUSH
5260: LD_STRING DO-Scout-14
5262: PPUSH
5263: CALL_OW 88
// if Givi then
5267: LD_EXP 7
5271: IFFALSE 5297
// begin Say ( Givi , DG-Scout-15 ) ;
5273: LD_EXP 7
5277: PPUSH
5278: LD_STRING DG-Scout-15
5280: PPUSH
5281: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
5285: LD_EXP 11
5289: PPUSH
5290: LD_STRING DK-Scout-16
5292: PPUSH
5293: CALL_OW 88
// end ; async ;
5297: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
5298: LD_EXP 15
5302: PPUSH
5303: LD_STRING DO-Scout-17
5305: PPUSH
5306: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
5310: LD_INT 55
5312: PPUSH
5313: LD_INT 77
5315: PPUSH
5316: LD_INT 2
5318: PPUSH
5319: LD_INT 6
5321: NEG
5322: PPUSH
5323: CALL 2680 0 4
// wait ( 10 ) ;
5327: LD_INT 10
5329: PPUSH
5330: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
5334: LD_INT 55
5336: PPUSH
5337: LD_INT 77
5339: PPUSH
5340: CALL_OW 84
// wait ( 0 0$5 ) ;
5344: LD_INT 175
5346: PPUSH
5347: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
5351: LD_EXP 15
5355: PPUSH
5356: LD_STRING DO-Scout-18
5358: PPUSH
5359: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
5363: LD_INT 204
5365: PPUSH
5366: LD_INT 107
5368: PPUSH
5369: LD_INT 2
5371: PPUSH
5372: LD_INT 12
5374: NEG
5375: PPUSH
5376: CALL 2680 0 4
// wait ( 10 ) ;
5380: LD_INT 10
5382: PPUSH
5383: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
5387: LD_INT 204
5389: PPUSH
5390: LD_INT 107
5392: PPUSH
5393: CALL_OW 84
// wait ( 0 0$5 ) ;
5397: LD_INT 175
5399: PPUSH
5400: CALL_OW 67
// sync ;
5404: SYNC
// CenterNowOnUnits ( Heike ) ;
5405: LD_EXP 6
5409: PPUSH
5410: CALL_OW 87
// Say ( Olaf , DO-Scout-19 ) ;
5414: LD_EXP 15
5418: PPUSH
5419: LD_STRING DO-Scout-19
5421: PPUSH
5422: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
5426: LD_EXP 15
5430: PPUSH
5431: LD_STRING DO-Scout-20
5433: PPUSH
5434: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
5438: LD_EXP 6
5442: PPUSH
5443: LD_STRING DH-Scout-21
5445: PPUSH
5446: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
5450: LD_EXP 6
5454: PPUSH
5455: LD_STRING DH-Scout-22
5457: PPUSH
5458: CALL_OW 88
// InGameOff ;
5462: CALL_OW 9
// if Givi then
5466: LD_EXP 7
5470: IFFALSE 5485
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
5472: LD_INT 13
5474: PPUSH
5475: LD_INT 2
5477: PPUSH
5478: LD_INT 1
5480: PPUSH
5481: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
5485: LD_STRING Road
5487: PPUSH
5488: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
5492: LD_ADDR_VAR 0 2
5496: PUSH
5497: LD_INT 22
5499: PUSH
5500: LD_INT 5
5502: PUSH
5503: EMPTY
5504: LIST
5505: LIST
5506: PUSH
5507: LD_INT 21
5509: PUSH
5510: LD_INT 2
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: PPUSH
5521: CALL_OW 69
5525: PUSH
5526: FOR_IN
5527: IFFALSE 5543
// SetSide ( i , 2 ) ;
5529: LD_VAR 0 2
5533: PPUSH
5534: LD_INT 2
5536: PPUSH
5537: CALL_OW 235
5541: GO 5526
5543: POP
5544: POP
// SaveForQuickRestart ;
5545: CALL_OW 22
// end ;
5549: LD_VAR 0 1
5553: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
5554: LD_INT 2
5556: PPUSH
5557: LD_INT 9
5559: PPUSH
5560: CALL_OW 294
5564: IFFALSE 5911
5566: GO 5568
5568: DISABLE
// begin DialogueOn ;
5569: CALL_OW 6
// ShowArea ( 2 , crossRoadArea ) ;
5573: LD_INT 2
5575: PPUSH
5576: LD_INT 9
5578: PPUSH
5579: CALL_OW 334
// CenterNowOnXY ( 111 , 72 ) ;
5583: LD_INT 111
5585: PPUSH
5586: LD_INT 72
5588: PPUSH
5589: CALL_OW 86
// if IsOk ( Kamil ) then
5593: LD_EXP 10
5597: PPUSH
5598: CALL_OW 302
5602: IFFALSE 5719
// begin Say ( Kamil , DKam-Cross-1 ) ;
5604: LD_EXP 10
5608: PPUSH
5609: LD_STRING DKam-Cross-1
5611: PPUSH
5612: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
5616: LD_EXP 10
5620: PPUSH
5621: LD_STRING DKam-Cross-2
5623: PPUSH
5624: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
5628: LD_EXP 10
5632: PPUSH
5633: LD_STRING DKam-Cross-3
5635: PPUSH
5636: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
5640: LD_EXP 10
5644: PPUSH
5645: LD_STRING DKam-Cross-4
5647: PPUSH
5648: CALL_OW 88
// if IsOk ( Ibrahim ) then
5652: LD_EXP 9
5656: PPUSH
5657: CALL_OW 302
5661: IFFALSE 5717
// begin if ibrahimJoinedIn04 then
5663: LD_EXP 4
5667: IFFALSE 5681
// Say ( Ibrahim , DI-Cross-b-5 ) ;
5669: LD_EXP 9
5673: PPUSH
5674: LD_STRING DI-Cross-b-5
5676: PPUSH
5677: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
5681: LD_EXP 9
5685: PPUSH
5686: LD_STRING DI-Cross-b-6
5688: PPUSH
5689: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
5693: LD_EXP 9
5697: PPUSH
5698: LD_STRING DI-Cross-b-7
5700: PPUSH
5701: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
5705: LD_EXP 10
5709: PPUSH
5710: LD_STRING DKam-Cross-8
5712: PPUSH
5713: CALL_OW 88
// end ; end else
5717: GO 5877
// if IsOk ( Sophia ) then
5719: LD_EXP 12
5723: PPUSH
5724: CALL_OW 302
5728: IFFALSE 5845
// begin Say ( Sophia , DS-Cross-1 ) ;
5730: LD_EXP 12
5734: PPUSH
5735: LD_STRING DS-Cross-1
5737: PPUSH
5738: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
5742: LD_EXP 12
5746: PPUSH
5747: LD_STRING DS-Cross-2
5749: PPUSH
5750: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
5754: LD_EXP 12
5758: PPUSH
5759: LD_STRING DS-Cross-3
5761: PPUSH
5762: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
5766: LD_EXP 12
5770: PPUSH
5771: LD_STRING DS-Cross-4
5773: PPUSH
5774: CALL_OW 88
// if IsOk ( Ibrahim ) then
5778: LD_EXP 9
5782: PPUSH
5783: CALL_OW 302
5787: IFFALSE 5843
// begin if ibrahimJoinedIn04 then
5789: LD_EXP 4
5793: IFFALSE 5807
// Say ( Ibrahim , DI-Cross-b-5 ) ;
5795: LD_EXP 9
5799: PPUSH
5800: LD_STRING DI-Cross-b-5
5802: PPUSH
5803: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
5807: LD_EXP 9
5811: PPUSH
5812: LD_STRING DI-Cross-b-6
5814: PPUSH
5815: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
5819: LD_EXP 9
5823: PPUSH
5824: LD_STRING DI-Cross-b-7
5826: PPUSH
5827: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
5831: LD_EXP 12
5835: PPUSH
5836: LD_STRING DS-Cross-8
5838: PPUSH
5839: CALL_OW 88
// end ; end else
5843: GO 5877
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
5845: LD_EXP 18
5849: PPUSH
5850: LD_INT 50
5852: PUSH
5853: EMPTY
5854: LIST
5855: PPUSH
5856: CALL_OW 72
5860: IFFALSE 5877
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
5862: LD_EXP 18
5866: PPUSH
5867: LD_STRING DArm-Cross-c-1
5869: PPUSH
5870: LD_STRING DArf-Cross-c-1
5872: PPUSH
5873: CALL 2731 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
5877: LD_EXP 32
5881: PPUSH
5882: LD_INT 2
5884: PPUSH
5885: LD_INT 1
5887: PPUSH
5888: CALL_OW 322
// DialogueOff ;
5892: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
5896: LD_STRING Crane
5898: PPUSH
5899: CALL_OW 337
// spottedCrossRoad := true ;
5903: LD_ADDR_EXP 5
5907: PUSH
5908: LD_INT 1
5910: ST_TO_ADDR
// end ;
5911: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
5912: LD_INT 22
5914: PUSH
5915: LD_INT 2
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: PUSH
5922: LD_INT 2
5924: PUSH
5925: LD_INT 30
5927: PUSH
5928: LD_INT 0
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: PUSH
5935: LD_INT 30
5937: PUSH
5938: LD_INT 1
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: PUSH
5945: EMPTY
5946: LIST
5947: LIST
5948: LIST
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: PPUSH
5954: CALL_OW 69
5958: IFFALSE 5963
5960: GO 5962
5962: DISABLE
// begin end ; end_of_file
5963: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
5964: GO 5966
5966: DISABLE
// begin ru_radar := 98 ;
5967: LD_ADDR_EXP 21
5971: PUSH
5972: LD_INT 98
5974: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
5975: LD_ADDR_EXP 22
5979: PUSH
5980: LD_INT 89
5982: ST_TO_ADDR
// us_hack := 99 ;
5983: LD_ADDR_EXP 23
5987: PUSH
5988: LD_INT 99
5990: ST_TO_ADDR
// us_artillery := 97 ;
5991: LD_ADDR_EXP 24
5995: PUSH
5996: LD_INT 97
5998: ST_TO_ADDR
// ar_bio_bomb := 91 ;
5999: LD_ADDR_EXP 25
6003: PUSH
6004: LD_INT 91
6006: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
6007: LD_ADDR_EXP 26
6011: PUSH
6012: LD_INT 92
6014: ST_TO_ADDR
// tech_Artillery := 80 ;
6015: LD_ADDR_EXP 27
6019: PUSH
6020: LD_INT 80
6022: ST_TO_ADDR
// tech_RadMat := 81 ;
6023: LD_ADDR_EXP 28
6027: PUSH
6028: LD_INT 81
6030: ST_TO_ADDR
// tech_BasicTools := 82 ;
6031: LD_ADDR_EXP 29
6035: PUSH
6036: LD_INT 82
6038: ST_TO_ADDR
// tech_Cargo := 83 ;
6039: LD_ADDR_EXP 30
6043: PUSH
6044: LD_INT 83
6046: ST_TO_ADDR
// tech_Track := 84 ;
6047: LD_ADDR_EXP 31
6051: PUSH
6052: LD_INT 84
6054: ST_TO_ADDR
// tech_Crane := 85 ;
6055: LD_ADDR_EXP 32
6059: PUSH
6060: LD_INT 85
6062: ST_TO_ADDR
// tech_Bulldozer := 86 ;
6063: LD_ADDR_EXP 33
6067: PUSH
6068: LD_INT 86
6070: ST_TO_ADDR
// tech_Hovercraft := 87 ;
6071: LD_ADDR_EXP 34
6075: PUSH
6076: LD_INT 87
6078: ST_TO_ADDR
// end ;
6079: END
