// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// CreateNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 732 0 2
// PrepareArabian ;
  31: CALL 1425 0 0
// PrepareRussian ;
  35: CALL 3023 0 0
// Action ;
  39: CALL 7582 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted , captureCounter , stimDrugsCounter , flamethrowerBuilt ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 210: LD_ADDR_EXP 14
 214: PUSH
 215: LD_STRING 04_1_RuLabCaptured
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 30
 225: ST_TO_ADDR
// captureCounter := 0 ;
 226: LD_ADDR_EXP 18
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// stimDrugsCounter := 0 ;
 234: LD_ADDR_EXP 19
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// flamethrowerBuilt := false ;
 242: LD_ADDR_EXP 20
 246: PUSH
 247: LD_INT 0
 249: ST_TO_ADDR
// end ;
 250: LD_VAR 0 1
 254: RET
// every 0 0$1 trigger not eastBaseCaptured and not westBaseCaptured and not ruNorthGroup and not ruSouthGroup do
 255: LD_EXP 10
 259: NOT
 260: PUSH
 261: LD_EXP 9
 265: NOT
 266: AND
 267: PUSH
 268: LD_EXP 39
 272: NOT
 273: AND
 274: PUSH
 275: LD_EXP 40
 279: NOT
 280: AND
 281: IFFALSE 293
 283: GO 285
 285: DISABLE
// SetAchievement ( ACH_EXT ) ;
 286: LD_STRING ACH_EXT
 288: PPUSH
 289: CALL_OW 543
 293: END
// every 0 0$1 trigger captureCounter >= 6 do
 294: LD_EXP 18
 298: PUSH
 299: LD_INT 6
 301: GREATEREQUAL
 302: IFFALSE 314
 304: GO 306
 306: DISABLE
// SetAchievement ( ACH_KEY ) ;
 307: LD_STRING ACH_KEY
 309: PPUSH
 310: CALL_OW 543
 314: END
// every 0 0$1 trigger stimDrugsCounter >= 3 do
 315: LD_EXP 19
 319: PUSH
 320: LD_INT 3
 322: GREATEREQUAL
 323: IFFALSE 335
 325: GO 327
 327: DISABLE
// SetAchievement ( ACH_CHEM ) ;
 328: LD_STRING ACH_CHEM
 330: PPUSH
 331: CALL_OW 543
 335: END
// every 0 0$1 trigger debug do var i ;
 336: LD_EXP 1
 340: IFFALSE 424
 342: GO 344
 344: DISABLE
 345: LD_INT 0
 347: PPUSH
// begin enable ;
 348: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 349: LD_ADDR_VAR 0 1
 353: PUSH
 354: LD_INT 22
 356: PUSH
 357: LD_INT 2
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PUSH
 364: LD_INT 3
 366: PUSH
 367: LD_INT 21
 369: PUSH
 370: LD_INT 3
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: PUSH
 381: EMPTY
 382: LIST
 383: LIST
 384: PPUSH
 385: CALL_OW 69
 389: PUSH
 390: FOR_IN
 391: IFFALSE 422
// if GetLives ( i ) < 1000 then
 393: LD_VAR 0 1
 397: PPUSH
 398: CALL_OW 256
 402: PUSH
 403: LD_INT 1000
 405: LESS
 406: IFFALSE 420
// SetLives ( i , 1000 ) ;
 408: LD_VAR 0 1
 412: PPUSH
 413: LD_INT 1000
 415: PPUSH
 416: CALL_OW 234
 420: GO 390
 422: POP
 423: POP
// end ; end_of_file
 424: PPOPN 1
 426: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 427: LD_INT 0
 429: PPUSH
// uc_side := side ;
 430: LD_ADDR_OWVAR 20
 434: PUSH
 435: LD_VAR 0 1
 439: ST_TO_ADDR
// uc_nation := nation ;
 440: LD_ADDR_OWVAR 21
 444: PUSH
 445: LD_VAR 0 2
 449: ST_TO_ADDR
// vc_chassis := chassis ;
 450: LD_ADDR_OWVAR 37
 454: PUSH
 455: LD_VAR 0 3
 459: ST_TO_ADDR
// vc_engine := engine ;
 460: LD_ADDR_OWVAR 39
 464: PUSH
 465: LD_VAR 0 4
 469: ST_TO_ADDR
// vc_control := control ;
 470: LD_ADDR_OWVAR 38
 474: PUSH
 475: LD_VAR 0 5
 479: ST_TO_ADDR
// vc_weapon := weapon ;
 480: LD_ADDR_OWVAR 40
 484: PUSH
 485: LD_VAR 0 6
 489: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 490: LD_ADDR_OWVAR 41
 494: PUSH
 495: LD_VAR 0 7
 499: ST_TO_ADDR
// result := CreateVehicle ;
 500: LD_ADDR_VAR 0 8
 504: PUSH
 505: CALL_OW 45
 509: ST_TO_ADDR
// end ;
 510: LD_VAR 0 8
 514: RET
// export function SayX ( units , ident ) ; var i ; begin
 515: LD_INT 0
 517: PPUSH
 518: PPUSH
// result := false ;
 519: LD_ADDR_VAR 0 3
 523: PUSH
 524: LD_INT 0
 526: ST_TO_ADDR
// if not units then
 527: LD_VAR 0 1
 531: NOT
 532: IFFALSE 536
// exit ;
 534: GO 590
// for i in units do
 536: LD_ADDR_VAR 0 4
 540: PUSH
 541: LD_VAR 0 1
 545: PUSH
 546: FOR_IN
 547: IFFALSE 588
// if IsOk ( i ) then
 549: LD_VAR 0 4
 553: PPUSH
 554: CALL_OW 302
 558: IFFALSE 586
// begin Say ( i , ident ) ;
 560: LD_VAR 0 4
 564: PPUSH
 565: LD_VAR 0 2
 569: PPUSH
 570: CALL_OW 88
// result := i ;
 574: LD_ADDR_VAR 0 3
 578: PUSH
 579: LD_VAR 0 4
 583: ST_TO_ADDR
// break ;
 584: GO 588
// end ;
 586: GO 546
 588: POP
 589: POP
// end ;
 590: LD_VAR 0 3
 594: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 595: LD_INT 0
 597: PPUSH
 598: PPUSH
// InitUc ;
 599: CALL_OW 18
// InitHc ;
 603: CALL_OW 19
// uc_side := 0 ;
 607: LD_ADDR_OWVAR 20
 611: PUSH
 612: LD_INT 0
 614: ST_TO_ADDR
// uc_nation := 0 ;
 615: LD_ADDR_OWVAR 21
 619: PUSH
 620: LD_INT 0
 622: ST_TO_ADDR
// for i = 1 to amount do
 623: LD_ADDR_VAR 0 4
 627: PUSH
 628: DOUBLE
 629: LD_INT 1
 631: DEC
 632: ST_TO_ADDR
 633: LD_VAR 0 2
 637: PUSH
 638: FOR_TO
 639: IFFALSE 721
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 641: LD_ADDR_OWVAR 29
 645: PUSH
 646: LD_INT 9
 648: PPUSH
 649: LD_INT 12
 651: PPUSH
 652: CALL_OW 12
 656: PUSH
 657: LD_INT 9
 659: PPUSH
 660: LD_INT 12
 662: PPUSH
 663: CALL_OW 12
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 672: LD_ADDR_OWVAR 35
 676: PUSH
 677: LD_INT 1
 679: NEG
 680: PPUSH
 681: LD_INT 1
 683: PPUSH
 684: CALL_OW 12
 688: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 689: LD_INT 0
 691: PPUSH
 692: LD_INT 12
 694: PPUSH
 695: LD_INT 1
 697: PPUSH
 698: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 702: CALL_OW 44
 706: PPUSH
 707: LD_VAR 0 1
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 638
 721: POP
 722: POP
// InitHc ;
 723: CALL_OW 19
// end ;
 727: LD_VAR 0 3
 731: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
 732: LD_INT 0
 734: PPUSH
 735: PPUSH
// uc_side := 0 ;
 736: LD_ADDR_OWVAR 20
 740: PUSH
 741: LD_INT 0
 743: ST_TO_ADDR
// uc_nation := 0 ;
 744: LD_ADDR_OWVAR 21
 748: PUSH
 749: LD_INT 0
 751: ST_TO_ADDR
// for i := 1 to 3 do
 752: LD_ADDR_VAR 0 4
 756: PUSH
 757: DOUBLE
 758: LD_INT 1
 760: DEC
 761: ST_TO_ADDR
 762: LD_INT 3
 764: PUSH
 765: FOR_TO
 766: IFFALSE 803
// begin hc_class := 21 ;
 768: LD_ADDR_OWVAR 28
 772: PUSH
 773: LD_INT 21
 775: ST_TO_ADDR
// hc_gallery :=  ;
 776: LD_ADDR_OWVAR 33
 780: PUSH
 781: LD_STRING 
 783: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 784: CALL_OW 44
 788: PPUSH
 789: LD_VAR 0 1
 793: PPUSH
 794: LD_INT 0
 796: PPUSH
 797: CALL_OW 49
// end ;
 801: GO 765
 803: POP
 804: POP
// for i := 1 to 3 do
 805: LD_ADDR_VAR 0 4
 809: PUSH
 810: DOUBLE
 811: LD_INT 1
 813: DEC
 814: ST_TO_ADDR
 815: LD_INT 3
 817: PUSH
 818: FOR_TO
 819: IFFALSE 856
// begin hc_class := 18 ;
 821: LD_ADDR_OWVAR 28
 825: PUSH
 826: LD_INT 18
 828: ST_TO_ADDR
// hc_gallery :=  ;
 829: LD_ADDR_OWVAR 33
 833: PUSH
 834: LD_STRING 
 836: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 837: CALL_OW 44
 841: PPUSH
 842: LD_VAR 0 1
 846: PPUSH
 847: LD_INT 0
 849: PPUSH
 850: CALL_OW 49
// end ;
 854: GO 818
 856: POP
 857: POP
// for i := 1 to 3 do
 858: LD_ADDR_VAR 0 4
 862: PUSH
 863: DOUBLE
 864: LD_INT 1
 866: DEC
 867: ST_TO_ADDR
 868: LD_INT 3
 870: PUSH
 871: FOR_TO
 872: IFFALSE 909
// begin hc_class := 13 ;
 874: LD_ADDR_OWVAR 28
 878: PUSH
 879: LD_INT 13
 881: ST_TO_ADDR
// hc_gallery :=  ;
 882: LD_ADDR_OWVAR 33
 886: PUSH
 887: LD_STRING 
 889: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 890: CALL_OW 44
 894: PPUSH
 895: LD_VAR 0 1
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: CALL_OW 49
// end ;
 907: GO 871
 909: POP
 910: POP
// for i := 1 to 4 do
 911: LD_ADDR_VAR 0 4
 915: PUSH
 916: DOUBLE
 917: LD_INT 1
 919: DEC
 920: ST_TO_ADDR
 921: LD_INT 4
 923: PUSH
 924: FOR_TO
 925: IFFALSE 962
// begin hc_class := class_frog ;
 927: LD_ADDR_OWVAR 28
 931: PUSH
 932: LD_INT 19
 934: ST_TO_ADDR
// hc_gallery :=  ;
 935: LD_ADDR_OWVAR 33
 939: PUSH
 940: LD_STRING 
 942: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 943: CALL_OW 44
 947: PPUSH
 948: LD_VAR 0 2
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: CALL_OW 49
// end ;
 960: GO 924
 962: POP
 963: POP
// end ;
 964: LD_VAR 0 3
 968: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 969: LD_INT 0
 971: PPUSH
 972: PPUSH
 973: PPUSH
// if not observer or not unit then
 974: LD_VAR 0 1
 978: NOT
 979: PUSH
 980: LD_VAR 0 2
 984: NOT
 985: OR
 986: IFFALSE 990
// exit ;
 988: GO 1038
// if not See ( GetSide ( observer ) , unit ) then
 990: LD_VAR 0 1
 994: PPUSH
 995: CALL_OW 255
 999: PPUSH
1000: LD_VAR 0 2
1004: PPUSH
1005: CALL_OW 292
1009: NOT
1010: IFFALSE 1014
// exit ;
1012: GO 1038
// result := GetDistUnits ( observer , unit ) < 12 ;
1014: LD_ADDR_VAR 0 3
1018: PUSH
1019: LD_VAR 0 1
1023: PPUSH
1024: LD_VAR 0 2
1028: PPUSH
1029: CALL_OW 296
1033: PUSH
1034: LD_INT 12
1036: LESS
1037: ST_TO_ADDR
// end ;
1038: LD_VAR 0 3
1042: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1043: LD_INT 0
1045: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1046: LD_VAR 0 2
1050: PUSH
1051: LD_INT 1
1053: ARRAY
1054: PPUSH
1055: LD_VAR 0 2
1059: PUSH
1060: LD_INT 2
1062: ARRAY
1063: PPUSH
1064: CALL_OW 488
1068: PUSH
1069: LD_VAR 0 2
1073: PUSH
1074: LD_INT 1
1076: ARRAY
1077: PPUSH
1078: LD_VAR 0 2
1082: PUSH
1083: LD_INT 2
1085: ARRAY
1086: PPUSH
1087: CALL_OW 428
1091: PUSH
1092: LD_INT 0
1094: EQUAL
1095: AND
1096: IFFALSE 1130
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1098: LD_VAR 0 1
1102: PPUSH
1103: LD_VAR 0 2
1107: PUSH
1108: LD_INT 1
1110: ARRAY
1111: PPUSH
1112: LD_VAR 0 2
1116: PUSH
1117: LD_INT 2
1119: ARRAY
1120: PPUSH
1121: LD_VAR 0 3
1125: PPUSH
1126: CALL_OW 48
// end ;
1130: LD_VAR 0 4
1134: RET
// export function ReverseArray ( array ) ; var i ; begin
1135: LD_INT 0
1137: PPUSH
1138: PPUSH
// if not array then
1139: LD_VAR 0 1
1143: NOT
1144: IFFALSE 1148
// exit ;
1146: GO 1206
// result := [ ] ;
1148: LD_ADDR_VAR 0 2
1152: PUSH
1153: EMPTY
1154: ST_TO_ADDR
// for i := 1 to array do
1155: LD_ADDR_VAR 0 3
1159: PUSH
1160: DOUBLE
1161: LD_INT 1
1163: DEC
1164: ST_TO_ADDR
1165: LD_VAR 0 1
1169: PUSH
1170: FOR_TO
1171: IFFALSE 1204
// result := Insert ( result , 1 , array [ i ] ) ;
1173: LD_ADDR_VAR 0 2
1177: PUSH
1178: LD_VAR 0 2
1182: PPUSH
1183: LD_INT 1
1185: PPUSH
1186: LD_VAR 0 1
1190: PUSH
1191: LD_VAR 0 3
1195: ARRAY
1196: PPUSH
1197: CALL_OW 2
1201: ST_TO_ADDR
1202: GO 1170
1204: POP
1205: POP
// end ;
1206: LD_VAR 0 2
1210: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
1211: LD_INT 0
1213: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
1214: LD_VAR 0 1
1218: PPUSH
1219: LD_VAR 0 2
1223: PPUSH
1224: LD_VAR 0 3
1228: PPUSH
1229: LD_VAR 0 4
1233: PPUSH
1234: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
1238: LD_VAR 0 1
1242: PPUSH
1243: LD_VAR 0 2
1247: PPUSH
1248: LD_VAR 0 3
1252: PPUSH
1253: CALL_OW 331
// end ;
1257: LD_VAR 0 5
1261: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
1262: LD_INT 0
1264: PPUSH
// if not units then
1265: LD_VAR 0 1
1269: NOT
1270: IFFALSE 1274
// exit ;
1272: GO 1357
// result := true ;
1274: LD_ADDR_VAR 0 4
1278: PUSH
1279: LD_INT 1
1281: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
1282: LD_VAR 0 1
1286: PPUSH
1287: LD_INT 26
1289: PUSH
1290: LD_INT 1
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: PPUSH
1297: CALL_OW 72
1301: PUSH
1302: LD_INT 1
1304: ARRAY
1305: PPUSH
1306: LD_VAR 0 2
1310: PPUSH
1311: CALL_OW 88
1315: NOT
1316: IFFALSE 1357
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
1318: LD_ADDR_VAR 0 4
1322: PUSH
1323: LD_VAR 0 1
1327: PPUSH
1328: LD_INT 26
1330: PUSH
1331: LD_INT 2
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PPUSH
1338: CALL_OW 72
1342: PUSH
1343: LD_INT 1
1345: ARRAY
1346: PPUSH
1347: LD_VAR 0 3
1351: PPUSH
1352: CALL_OW 88
1356: ST_TO_ADDR
// end ;
1357: LD_VAR 0 4
1361: RET
// export function SeeGroup ( side , group ) ; var i ; begin
1362: LD_INT 0
1364: PPUSH
1365: PPUSH
// if not group then
1366: LD_VAR 0 2
1370: NOT
1371: IFFALSE 1375
// exit ;
1373: GO 1420
// for i in group do
1375: LD_ADDR_VAR 0 4
1379: PUSH
1380: LD_VAR 0 2
1384: PUSH
1385: FOR_IN
1386: IFFALSE 1418
// if See ( side , i ) then
1388: LD_VAR 0 1
1392: PPUSH
1393: LD_VAR 0 4
1397: PPUSH
1398: CALL_OW 292
1402: IFFALSE 1416
// begin result := true ;
1404: LD_ADDR_VAR 0 3
1408: PUSH
1409: LD_INT 1
1411: ST_TO_ADDR
// exit ;
1412: POP
1413: POP
1414: GO 1420
// end ;
1416: GO 1385
1418: POP
1419: POP
// end ; end_of_file
1420: LD_VAR 0 3
1424: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1425: LD_INT 0
1427: PPUSH
1428: PPUSH
// uc_side := 2 ;
1429: LD_ADDR_OWVAR 20
1433: PUSH
1434: LD_INT 2
1436: ST_TO_ADDR
// uc_nation := 2 ;
1437: LD_ADDR_OWVAR 21
1441: PUSH
1442: LD_INT 2
1444: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1445: LD_ADDR_EXP 21
1449: PUSH
1450: LD_STRING Heike
1452: PPUSH
1453: LD_EXP 1
1457: NOT
1458: PPUSH
1459: LD_EXP 2
1463: PPUSH
1464: CALL 28137 0 3
1468: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1469: LD_ADDR_EXP 24
1473: PUSH
1474: LD_STRING Ibrahim
1476: PPUSH
1477: LD_EXP 1
1481: NOT
1482: PPUSH
1483: LD_EXP 2
1487: PPUSH
1488: CALL 28137 0 3
1492: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1493: LD_ADDR_EXP 22
1497: PUSH
1498: LD_STRING Givi
1500: PPUSH
1501: LD_EXP 1
1505: NOT
1506: PPUSH
1507: LD_EXP 2
1511: PPUSH
1512: CALL 28137 0 3
1516: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1517: LD_ADDR_EXP 25
1521: PUSH
1522: LD_STRING Kamil
1524: PPUSH
1525: LD_EXP 1
1529: NOT
1530: PPUSH
1531: LD_EXP 2
1535: PPUSH
1536: CALL 28137 0 3
1540: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1541: LD_ADDR_EXP 26
1545: PUSH
1546: LD_STRING Kaia
1548: PPUSH
1549: LD_EXP 1
1553: NOT
1554: PPUSH
1555: LD_EXP 2
1559: PPUSH
1560: CALL 28137 0 3
1564: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1565: LD_ADDR_EXP 27
1569: PUSH
1570: LD_STRING Sophia
1572: PPUSH
1573: LD_EXP 1
1577: NOT
1578: PPUSH
1579: LD_EXP 2
1583: PPUSH
1584: CALL 28137 0 3
1588: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1589: LD_ADDR_EXP 28
1593: PUSH
1594: LD_STRING Markov
1596: PPUSH
1597: LD_EXP 1
1601: NOT
1602: PPUSH
1603: LD_EXP 2
1607: PPUSH
1608: CALL 28137 0 3
1612: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1613: LD_ADDR_EXP 33
1617: PUSH
1618: LD_STRING Aviradze
1620: PPUSH
1621: LD_EXP 1
1625: NOT
1626: PPUSH
1627: LD_EXP 2
1631: PPUSH
1632: CALL 28137 0 3
1636: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1637: LD_ADDR_EXP 32
1641: PUSH
1642: LD_STRING Kurt
1644: PPUSH
1645: LD_EXP 1
1649: NOT
1650: PPUSH
1651: LD_EXP 2
1655: PPUSH
1656: CALL 28137 0 3
1660: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1661: LD_ADDR_EXP 23
1665: PUSH
1666: LD_STRING Mike
1668: PPUSH
1669: LD_EXP 1
1673: NOT
1674: PPUSH
1675: LD_EXP 2
1679: PPUSH
1680: CALL 28137 0 3
1684: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
1685: LD_ADDR_EXP 30
1689: PUSH
1690: LD_STRING Olaf
1692: PPUSH
1693: LD_INT 0
1695: PPUSH
1696: LD_STRING 
1698: PPUSH
1699: CALL 28137 0 3
1703: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
1704: LD_ADDR_EXP 34
1708: PUSH
1709: LD_STRING 04_2_others
1711: PPUSH
1712: CALL_OW 31
1716: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
1717: LD_ADDR_EXP 36
1721: PUSH
1722: LD_STRING 04_2_apes
1724: PPUSH
1725: CALL_OW 31
1729: ST_TO_ADDR
// if hasFlamethrower then
1730: LD_EXP 3
1734: IFFALSE 1965
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
1736: LD_INT 70
1738: PPUSH
1739: LD_INT 2
1741: PPUSH
1742: LD_INT 2
1744: PPUSH
1745: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 ] [ Difficulty ] ] ] ] ;
1749: LD_ADDR_EXP 35
1753: PUSH
1754: LD_INT 13
1756: PUSH
1757: LD_INT 1
1759: PUSH
1760: LD_INT 1
1762: PUSH
1763: LD_INT 27
1765: PUSH
1766: LD_INT 2
1768: PUSH
1769: LD_INT 1000
1771: PUSH
1772: LD_INT 0
1774: PUSH
1775: LD_INT 0
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: PUSH
1791: LD_INT 13
1793: PUSH
1794: LD_INT 1
1796: PUSH
1797: LD_INT 1
1799: PUSH
1800: LD_INT 25
1802: PUSH
1803: LD_INT 2
1805: PUSH
1806: LD_INT 1000
1808: PUSH
1809: LD_INT 0
1811: PUSH
1812: LD_INT 0
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: LIST
1826: LIST
1827: PUSH
1828: LD_INT 13
1830: PUSH
1831: LD_INT 1
1833: PUSH
1834: LD_INT 1
1836: PUSH
1837: LD_INT 26
1839: PUSH
1840: LD_INT 2
1842: PUSH
1843: LD_INT 1000
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: LD_INT 0
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: PUSH
1865: LD_INT 13
1867: PUSH
1868: LD_INT 1
1870: PUSH
1871: LD_INT 1
1873: PUSH
1874: LD_INT 27
1876: PUSH
1877: LD_INT 2
1879: PUSH
1880: LD_INT 1000
1882: PUSH
1883: LD_INT 0
1885: PUSH
1886: LD_INT 0
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: PUSH
1902: LD_INT 13
1904: PUSH
1905: LD_INT 1
1907: PUSH
1908: LD_INT 1
1910: PUSH
1911: LD_INT 32
1913: PUSH
1914: LD_INT 2
1916: PUSH
1917: LD_INT 1000
1919: PUSH
1920: LD_INT 0
1922: PUSH
1923: LD_INT 60
1925: PUSH
1926: LD_INT 40
1928: PUSH
1929: LD_INT 20
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: LIST
1936: PUSH
1937: LD_OWVAR 67
1941: ARRAY
1942: PUSH
1943: EMPTY
1944: LIST
1945: LIST
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: LIST
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: ST_TO_ADDR
// end else
1963: GO 2179
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 ] [ Difficulty ] ] ] ] ;
1965: LD_ADDR_EXP 35
1969: PUSH
1970: LD_INT 13
1972: PUSH
1973: LD_INT 1
1975: PUSH
1976: LD_INT 1
1978: PUSH
1979: LD_INT 25
1981: PUSH
1982: LD_INT 2
1984: PUSH
1985: LD_INT 1000
1987: PUSH
1988: LD_INT 0
1990: PUSH
1991: LD_INT 0
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 13
2009: PUSH
2010: LD_INT 1
2012: PUSH
2013: LD_INT 1
2015: PUSH
2016: LD_INT 27
2018: PUSH
2019: LD_INT 2
2021: PUSH
2022: LD_INT 1000
2024: PUSH
2025: LD_INT 0
2027: PUSH
2028: LD_INT 0
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: PUSH
2044: LD_INT 13
2046: PUSH
2047: LD_INT 1
2049: PUSH
2050: LD_INT 1
2052: PUSH
2053: LD_INT 24
2055: PUSH
2056: LD_INT 2
2058: PUSH
2059: LD_INT 1000
2061: PUSH
2062: LD_INT 0
2064: PUSH
2065: LD_INT 0
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: PUSH
2081: LD_INT 13
2083: PUSH
2084: LD_INT 1
2086: PUSH
2087: LD_INT 1
2089: PUSH
2090: LD_INT 27
2092: PUSH
2093: LD_INT 2
2095: PUSH
2096: LD_INT 1000
2098: PUSH
2099: LD_INT 0
2101: PUSH
2102: LD_INT 0
2104: PUSH
2105: EMPTY
2106: LIST
2107: LIST
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: PUSH
2118: LD_INT 13
2120: PUSH
2121: LD_INT 1
2123: PUSH
2124: LD_INT 1
2126: PUSH
2127: LD_INT 32
2129: PUSH
2130: LD_INT 2
2132: PUSH
2133: LD_INT 1000
2135: PUSH
2136: LD_INT 0
2138: PUSH
2139: LD_INT 50
2141: PUSH
2142: LD_INT 30
2144: PUSH
2145: LD_INT 20
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: LIST
2152: PUSH
2153: LD_OWVAR 67
2157: ARRAY
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: ST_TO_ADDR
// end ; uc_side := 5 ;
2179: LD_ADDR_OWVAR 20
2183: PUSH
2184: LD_INT 5
2186: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2187: LD_ADDR_EXP 29
2191: PUSH
2192: LD_STRING Abdul
2194: PPUSH
2195: LD_INT 0
2197: PPUSH
2198: LD_STRING 
2200: PPUSH
2201: CALL 28137 0 3
2205: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
2206: LD_ADDR_EXP 31
2210: PUSH
2211: LD_STRING Omar
2213: PPUSH
2214: LD_INT 0
2216: PPUSH
2217: LD_STRING 
2219: PPUSH
2220: CALL 28137 0 3
2224: ST_TO_ADDR
// end ;
2225: LD_VAR 0 1
2229: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
2230: LD_INT 0
2232: PPUSH
2233: PPUSH
2234: PPUSH
2235: PPUSH
2236: PPUSH
// pfx := 04_1_ ;
2237: LD_ADDR_VAR 0 2
2241: PUSH
2242: LD_STRING 04_1_
2244: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2245: LD_INT 35
2247: PPUSH
2248: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
2252: LD_INT 3
2254: PPUSH
2255: LD_INT 2
2257: PPUSH
2258: CALL_OW 428
2262: NOT
2263: IFFALSE 2245
// tmp := [ ] ;
2265: LD_ADDR_VAR 0 4
2269: PUSH
2270: EMPTY
2271: ST_TO_ADDR
// uc_side := 5 ;
2272: LD_ADDR_OWVAR 20
2276: PUSH
2277: LD_INT 5
2279: ST_TO_ADDR
// uc_nation := 2 ;
2280: LD_ADDR_OWVAR 21
2284: PUSH
2285: LD_INT 2
2287: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
2288: LD_ADDR_EXP 33
2292: PUSH
2293: LD_STRING Aviradze_L
2295: PPUSH
2296: LD_EXP 1
2300: NOT
2301: PPUSH
2302: LD_VAR 0 2
2306: PPUSH
2307: CALL 28137 0 3
2311: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
2312: LD_EXP 33
2316: PPUSH
2317: LD_INT 2
2319: PPUSH
2320: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
2324: LD_EXP 33
2328: PPUSH
2329: LD_INT 14
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
2339: LD_EXP 33
2343: PPUSH
2344: LD_INT 8
2346: PPUSH
2347: LD_INT 6
2349: PPUSH
2350: CALL_OW 111
// AddComHold ( Aviradze ) ;
2354: LD_EXP 33
2358: PPUSH
2359: CALL_OW 200
// tmp := [ Aviradze ] ;
2363: LD_ADDR_VAR 0 4
2367: PUSH
2368: LD_EXP 33
2372: PUSH
2373: EMPTY
2374: LIST
2375: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2376: LD_INT 70
2378: PPUSH
2379: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
2383: LD_STRING Ibrahim_L
2385: PPUSH
2386: LD_EXP 1
2390: NOT
2391: PPUSH
2392: LD_VAR 0 2
2396: PPUSH
2397: CALL 28137 0 3
2401: IFFALSE 2501
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
2403: LD_ADDR_EXP 24
2407: PUSH
2408: LD_STRING Ibrahim_L
2410: PPUSH
2411: LD_EXP 1
2415: NOT
2416: PPUSH
2417: LD_VAR 0 2
2421: PPUSH
2422: CALL 28137 0 3
2426: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
2427: LD_EXP 24
2431: PPUSH
2432: LD_INT 2
2434: PPUSH
2435: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
2439: LD_EXP 24
2443: PPUSH
2444: LD_INT 14
2446: PPUSH
2447: LD_INT 0
2449: PPUSH
2450: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
2454: LD_EXP 24
2458: PPUSH
2459: LD_INT 8
2461: PPUSH
2462: LD_INT 7
2464: PPUSH
2465: CALL_OW 111
// AddComHold ( Ibrahim ) ;
2469: LD_EXP 24
2473: PPUSH
2474: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
2478: LD_ADDR_VAR 0 4
2482: PUSH
2483: LD_VAR 0 4
2487: PUSH
2488: LD_EXP 24
2492: ADD
2493: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2494: LD_INT 70
2496: PPUSH
2497: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
2501: LD_STRING Kaia_L
2503: PPUSH
2504: LD_EXP 1
2508: NOT
2509: PPUSH
2510: LD_VAR 0 2
2514: PPUSH
2515: CALL 28137 0 3
2519: IFFALSE 2619
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
2521: LD_ADDR_EXP 26
2525: PUSH
2526: LD_STRING Kaia_L
2528: PPUSH
2529: LD_EXP 1
2533: NOT
2534: PPUSH
2535: LD_VAR 0 2
2539: PPUSH
2540: CALL 28137 0 3
2544: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
2545: LD_EXP 26
2549: PPUSH
2550: LD_INT 2
2552: PPUSH
2553: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
2557: LD_EXP 26
2561: PPUSH
2562: LD_INT 14
2564: PPUSH
2565: LD_INT 0
2567: PPUSH
2568: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
2572: LD_EXP 26
2576: PPUSH
2577: LD_INT 8
2579: PPUSH
2580: LD_INT 7
2582: PPUSH
2583: CALL_OW 111
// AddComHold ( Kaia ) ;
2587: LD_EXP 26
2591: PPUSH
2592: CALL_OW 200
// tmp := tmp ^ Kaia ;
2596: LD_ADDR_VAR 0 4
2600: PUSH
2601: LD_VAR 0 4
2605: PUSH
2606: LD_EXP 26
2610: ADD
2611: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2612: LD_INT 70
2614: PPUSH
2615: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
2619: LD_STRING Kamil_L
2621: PPUSH
2622: LD_EXP 1
2626: NOT
2627: PPUSH
2628: LD_VAR 0 2
2632: PPUSH
2633: CALL 28137 0 3
2637: IFFALSE 2737
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
2639: LD_ADDR_EXP 25
2643: PUSH
2644: LD_STRING Kamil_L
2646: PPUSH
2647: LD_EXP 1
2651: NOT
2652: PPUSH
2653: LD_VAR 0 2
2657: PPUSH
2658: CALL 28137 0 3
2662: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
2663: LD_EXP 25
2667: PPUSH
2668: LD_INT 2
2670: PPUSH
2671: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
2675: LD_EXP 25
2679: PPUSH
2680: LD_INT 14
2682: PPUSH
2683: LD_INT 0
2685: PPUSH
2686: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
2690: LD_EXP 25
2694: PPUSH
2695: LD_INT 8
2697: PPUSH
2698: LD_INT 7
2700: PPUSH
2701: CALL_OW 111
// AddComHold ( Kamil ) ;
2705: LD_EXP 25
2709: PPUSH
2710: CALL_OW 200
// tmp := tmp ^ Kamil ;
2714: LD_ADDR_VAR 0 4
2718: PUSH
2719: LD_VAR 0 4
2723: PUSH
2724: LD_EXP 25
2728: ADD
2729: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2730: LD_INT 70
2732: PPUSH
2733: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
2737: LD_STRING Sophia_L
2739: PPUSH
2740: LD_EXP 1
2744: NOT
2745: PPUSH
2746: LD_VAR 0 2
2750: PPUSH
2751: CALL 28137 0 3
2755: IFFALSE 2855
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
2757: LD_ADDR_EXP 27
2761: PUSH
2762: LD_STRING Sophia_L
2764: PPUSH
2765: LD_EXP 1
2769: NOT
2770: PPUSH
2771: LD_VAR 0 2
2775: PPUSH
2776: CALL 28137 0 3
2780: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
2781: LD_EXP 27
2785: PPUSH
2786: LD_INT 2
2788: PPUSH
2789: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
2793: LD_EXP 27
2797: PPUSH
2798: LD_INT 14
2800: PPUSH
2801: LD_INT 0
2803: PPUSH
2804: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
2808: LD_EXP 27
2812: PPUSH
2813: LD_INT 9
2815: PPUSH
2816: LD_INT 6
2818: PPUSH
2819: CALL_OW 111
// AddComHold ( Sophia ) ;
2823: LD_EXP 27
2827: PPUSH
2828: CALL_OW 200
// tmp := tmp ^ Sophia ;
2832: LD_ADDR_VAR 0 4
2836: PUSH
2837: LD_VAR 0 4
2841: PUSH
2842: LD_EXP 27
2846: ADD
2847: ST_TO_ADDR
// wait ( 0 0$2 ) ;
2848: LD_INT 70
2850: PPUSH
2851: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
2855: LD_ADDR_VAR 0 5
2859: PUSH
2860: LD_STRING 04_1_others_L
2862: PPUSH
2863: CALL_OW 31
2867: ST_TO_ADDR
// if tmp2 then
2868: LD_VAR 0 5
2872: IFFALSE 2969
// for i in tmp2 do
2874: LD_ADDR_VAR 0 3
2878: PUSH
2879: LD_VAR 0 5
2883: PUSH
2884: FOR_IN
2885: IFFALSE 2967
// begin SetDir ( i , 2 ) ;
2887: LD_VAR 0 3
2891: PPUSH
2892: LD_INT 2
2894: PPUSH
2895: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
2899: LD_VAR 0 3
2903: PPUSH
2904: LD_INT 14
2906: PPUSH
2907: LD_INT 0
2909: PPUSH
2910: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
2914: LD_ADDR_EXP 34
2918: PUSH
2919: LD_EXP 34
2923: PPUSH
2924: LD_EXP 34
2928: PUSH
2929: LD_INT 1
2931: PLUS
2932: PPUSH
2933: LD_VAR 0 3
2937: PPUSH
2938: CALL_OW 1
2942: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
2943: LD_VAR 0 3
2947: PPUSH
2948: LD_INT 17
2950: PPUSH
2951: LD_INT 14
2953: PPUSH
2954: CALL_OW 111
// wait ( 0 0$2 ) ;
2958: LD_INT 70
2960: PPUSH
2961: CALL_OW 67
// end ;
2965: GO 2884
2967: POP
2968: POP
// for i in tmp union tmp2 do
2969: LD_ADDR_VAR 0 3
2973: PUSH
2974: LD_VAR 0 4
2978: PUSH
2979: LD_VAR 0 5
2983: UNION
2984: PUSH
2985: FOR_IN
2986: IFFALSE 3016
// begin SetSide ( i , 2 ) ;
2988: LD_VAR 0 3
2992: PPUSH
2993: LD_INT 2
2995: PPUSH
2996: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
3000: LD_VAR 0 3
3004: PPUSH
3005: LD_EXP 21
3009: PPUSH
3010: CALL_OW 112
// end ;
3014: GO 2985
3016: POP
3017: POP
// end ; end_of_file
3018: LD_VAR 0 1
3022: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
3023: LD_INT 0
3025: PPUSH
3026: PPUSH
3027: PPUSH
// uc_side := 3 ;
3028: LD_ADDR_OWVAR 20
3032: PUSH
3033: LD_INT 3
3035: ST_TO_ADDR
// uc_nation := 3 ;
3036: LD_ADDR_OWVAR 21
3040: PUSH
3041: LD_INT 3
3043: ST_TO_ADDR
// crossRoadGuard := [ ] ;
3044: LD_ADDR_EXP 37
3048: PUSH
3049: EMPTY
3050: ST_TO_ADDR
// oilBaseGuard := [ ] ;
3051: LD_ADDR_EXP 38
3055: PUSH
3056: EMPTY
3057: ST_TO_ADDR
// ruConvoySquad := [ ] ;
3058: LD_ADDR_EXP 41
3062: PUSH
3063: EMPTY
3064: ST_TO_ADDR
// for i := 1 to 2 do
3065: LD_ADDR_VAR 0 2
3069: PUSH
3070: DOUBLE
3071: LD_INT 1
3073: DEC
3074: ST_TO_ADDR
3075: LD_INT 2
3077: PUSH
3078: FOR_TO
3079: IFFALSE 3214
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3081: LD_INT 0
3083: PPUSH
3084: LD_INT 1
3086: PPUSH
3087: LD_INT 3
3089: PUSH
3090: LD_INT 4
3092: PUSH
3093: LD_INT 5
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: LIST
3100: PUSH
3101: LD_OWVAR 67
3105: ARRAY
3106: PPUSH
3107: CALL_OW 380
// un := CreateHuman ;
3111: LD_ADDR_VAR 0 3
3115: PUSH
3116: CALL_OW 44
3120: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
3121: LD_ADDR_EXP 37
3125: PUSH
3126: LD_EXP 37
3130: PPUSH
3131: LD_EXP 37
3135: PUSH
3136: LD_INT 1
3138: PLUS
3139: PPUSH
3140: LD_VAR 0 3
3144: PPUSH
3145: CALL_OW 1
3149: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
3150: LD_VAR 0 3
3154: PPUSH
3155: LD_INT 100
3157: PPUSH
3158: LD_INT 63
3160: PPUSH
3161: LD_INT 3
3163: PPUSH
3164: LD_INT 0
3166: PPUSH
3167: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
3171: LD_VAR 0 3
3175: PPUSH
3176: LD_INT 97
3178: PPUSH
3179: LD_INT 64
3181: PPUSH
3182: CALL_OW 428
3186: PUSH
3187: LD_INT 98
3189: PPUSH
3190: LD_INT 58
3192: PPUSH
3193: CALL_OW 428
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: PUSH
3202: LD_VAR 0 2
3206: ARRAY
3207: PPUSH
3208: CALL_OW 120
// end ;
3212: GO 3078
3214: POP
3215: POP
// SetResourceType ( GetBase ( HexInfo ( 51 , 77 ) ) , mat_cans , 120 ) ;
3216: LD_INT 51
3218: PPUSH
3219: LD_INT 77
3221: PPUSH
3222: CALL_OW 428
3226: PPUSH
3227: CALL_OW 274
3231: PPUSH
3232: LD_INT 1
3234: PPUSH
3235: LD_INT 120
3237: PPUSH
3238: CALL_OW 277
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
3242: LD_INT 10
3244: PPUSH
3245: CALL_OW 274
3249: PPUSH
3250: LD_INT 2
3252: PPUSH
3253: LD_INT 300
3255: PPUSH
3256: CALL_OW 277
// for i := 1 to 2 do
3260: LD_ADDR_VAR 0 2
3264: PUSH
3265: DOUBLE
3266: LD_INT 1
3268: DEC
3269: ST_TO_ADDR
3270: LD_INT 2
3272: PUSH
3273: FOR_TO
3274: IFFALSE 3388
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3276: LD_INT 0
3278: PPUSH
3279: LD_INT 1
3281: PPUSH
3282: LD_INT 3
3284: PUSH
3285: LD_INT 4
3287: PUSH
3288: LD_INT 5
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: LIST
3295: PUSH
3296: LD_OWVAR 67
3300: ARRAY
3301: PPUSH
3302: CALL_OW 380
// un := CreateHuman ;
3306: LD_ADDR_VAR 0 3
3310: PUSH
3311: CALL_OW 44
3315: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3316: LD_ADDR_EXP 38
3320: PUSH
3321: LD_EXP 38
3325: PPUSH
3326: LD_EXP 38
3330: PUSH
3331: LD_INT 1
3333: PLUS
3334: PPUSH
3335: LD_VAR 0 3
3339: PPUSH
3340: CALL_OW 1
3344: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
3345: LD_VAR 0 3
3349: PPUSH
3350: LD_INT 198
3352: PPUSH
3353: LD_INT 106
3355: PPUSH
3356: CALL_OW 428
3360: PUSH
3361: LD_INT 205
3363: PPUSH
3364: LD_INT 114
3366: PPUSH
3367: CALL_OW 428
3371: PUSH
3372: EMPTY
3373: LIST
3374: LIST
3375: PUSH
3376: LD_VAR 0 2
3380: ARRAY
3381: PPUSH
3382: CALL_OW 52
// end ;
3386: GO 3273
3388: POP
3389: POP
// for i := 1 to 2 do
3390: LD_ADDR_VAR 0 2
3394: PUSH
3395: DOUBLE
3396: LD_INT 1
3398: DEC
3399: ST_TO_ADDR
3400: LD_INT 2
3402: PUSH
3403: FOR_TO
3404: IFFALSE 3481
// begin PrepareHuman ( false , 2 , 3 ) ;
3406: LD_INT 0
3408: PPUSH
3409: LD_INT 2
3411: PPUSH
3412: LD_INT 3
3414: PPUSH
3415: CALL_OW 380
// un := CreateHuman ;
3419: LD_ADDR_VAR 0 3
3423: PUSH
3424: CALL_OW 44
3428: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
3429: LD_ADDR_EXP 38
3433: PUSH
3434: LD_EXP 38
3438: PPUSH
3439: LD_EXP 38
3443: PUSH
3444: LD_INT 1
3446: PLUS
3447: PPUSH
3448: LD_VAR 0 3
3452: PPUSH
3453: CALL_OW 1
3457: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
3458: LD_VAR 0 3
3462: PPUSH
3463: LD_INT 204
3465: PPUSH
3466: LD_INT 108
3468: PPUSH
3469: LD_INT 2
3471: PPUSH
3472: LD_INT 0
3474: PPUSH
3475: CALL_OW 50
// end ;
3479: GO 3403
3481: POP
3482: POP
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
3483: LD_ADDR_VAR 0 2
3487: PUSH
3488: DOUBLE
3489: LD_INT 1
3491: DEC
3492: ST_TO_ADDR
3493: LD_INT 4
3495: PUSH
3496: LD_INT 5
3498: PUSH
3499: LD_INT 6
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: LIST
3506: PUSH
3507: LD_OWVAR 67
3511: ARRAY
3512: PUSH
3513: FOR_TO
3514: IFFALSE 3635
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3516: LD_INT 0
3518: PPUSH
3519: LD_INT 1
3521: PUSH
3522: LD_INT 1
3524: PUSH
3525: LD_INT 2
3527: PUSH
3528: LD_INT 4
3530: PUSH
3531: LD_INT 1
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: PUSH
3541: LD_INT 1
3543: PPUSH
3544: LD_INT 5
3546: PPUSH
3547: CALL_OW 12
3551: ARRAY
3552: PPUSH
3553: LD_INT 3
3555: PUSH
3556: LD_INT 4
3558: PUSH
3559: LD_INT 5
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: LIST
3566: PUSH
3567: LD_OWVAR 67
3571: ARRAY
3572: PPUSH
3573: CALL_OW 380
// un := CreateHuman ;
3577: LD_ADDR_VAR 0 3
3581: PUSH
3582: CALL_OW 44
3586: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3587: LD_VAR 0 3
3591: PPUSH
3592: LD_INT 11
3594: PPUSH
3595: LD_INT 0
3597: PPUSH
3598: CALL 62921 0 3
3602: IFFALSE 3633
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3604: LD_ADDR_EXP 39
3608: PUSH
3609: LD_EXP 39
3613: PPUSH
3614: LD_EXP 39
3618: PUSH
3619: LD_INT 1
3621: PLUS
3622: PPUSH
3623: LD_VAR 0 3
3627: PPUSH
3628: CALL_OW 1
3632: ST_TO_ADDR
// end ;
3633: GO 3513
3635: POP
3636: POP
// for i := 1 to 3 do
3637: LD_ADDR_VAR 0 2
3641: PUSH
3642: DOUBLE
3643: LD_INT 1
3645: DEC
3646: ST_TO_ADDR
3647: LD_INT 3
3649: PUSH
3650: FOR_TO
3651: IFFALSE 3741
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 ] [ Difficulty ] ) ;
3653: LD_INT 0
3655: PPUSH
3656: LD_INT 1
3658: PPUSH
3659: LD_INT 3
3661: PUSH
3662: LD_INT 4
3664: PUSH
3665: LD_INT 4
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: LIST
3672: PUSH
3673: LD_OWVAR 67
3677: ARRAY
3678: PPUSH
3679: CALL_OW 380
// un := CreateHuman ;
3683: LD_ADDR_VAR 0 3
3687: PUSH
3688: CALL_OW 44
3692: ST_TO_ADDR
// if PlaceUnitInArea ( un , northGroup2Area , false ) then
3693: LD_VAR 0 3
3697: PPUSH
3698: LD_INT 11
3700: PPUSH
3701: LD_INT 0
3703: PPUSH
3704: CALL 62921 0 3
3708: IFFALSE 3739
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
3710: LD_ADDR_EXP 39
3714: PUSH
3715: LD_EXP 39
3719: PPUSH
3720: LD_EXP 39
3724: PUSH
3725: LD_INT 1
3727: PLUS
3728: PPUSH
3729: LD_VAR 0 3
3733: PPUSH
3734: CALL_OW 1
3738: ST_TO_ADDR
// end ;
3739: GO 3650
3741: POP
3742: POP
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
3743: LD_ADDR_VAR 0 2
3747: PUSH
3748: DOUBLE
3749: LD_INT 1
3751: DEC
3752: ST_TO_ADDR
3753: LD_INT 5
3755: PUSH
3756: LD_INT 6
3758: PUSH
3759: LD_INT 7
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: LIST
3766: PUSH
3767: LD_OWVAR 67
3771: ARRAY
3772: PUSH
3773: FOR_TO
3774: IFFALSE 3895
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3776: LD_INT 0
3778: PPUSH
3779: LD_INT 1
3781: PUSH
3782: LD_INT 1
3784: PUSH
3785: LD_INT 2
3787: PUSH
3788: LD_INT 4
3790: PUSH
3791: LD_INT 1
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: PUSH
3801: LD_INT 1
3803: PPUSH
3804: LD_INT 5
3806: PPUSH
3807: CALL_OW 12
3811: ARRAY
3812: PPUSH
3813: LD_INT 3
3815: PUSH
3816: LD_INT 4
3818: PUSH
3819: LD_INT 5
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: LIST
3826: PUSH
3827: LD_OWVAR 67
3831: ARRAY
3832: PPUSH
3833: CALL_OW 380
// un := CreateHuman ;
3837: LD_ADDR_VAR 0 3
3841: PUSH
3842: CALL_OW 44
3846: ST_TO_ADDR
// if PlaceUnitInArea ( un , southGroupArea , false ) then
3847: LD_VAR 0 3
3851: PPUSH
3852: LD_INT 15
3854: PPUSH
3855: LD_INT 0
3857: PPUSH
3858: CALL 62921 0 3
3862: IFFALSE 3893
// ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
3864: LD_ADDR_EXP 40
3868: PUSH
3869: LD_EXP 40
3873: PPUSH
3874: LD_EXP 40
3878: PUSH
3879: LD_INT 1
3881: PLUS
3882: PPUSH
3883: LD_VAR 0 3
3887: PPUSH
3888: CALL_OW 1
3892: ST_TO_ADDR
// end ;
3893: GO 3773
3895: POP
3896: POP
// end ;
3897: LD_VAR 0 1
3901: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
3902: LD_INT 0
3904: PPUSH
3905: PPUSH
3906: PPUSH
// uc_side := 3 ;
3907: LD_ADDR_OWVAR 20
3911: PUSH
3912: LD_INT 3
3914: ST_TO_ADDR
// uc_nation := 3 ;
3915: LD_ADDR_OWVAR 21
3919: PUSH
3920: LD_INT 3
3922: ST_TO_ADDR
// for i := 1 to 6 do
3923: LD_ADDR_VAR 0 2
3927: PUSH
3928: DOUBLE
3929: LD_INT 1
3931: DEC
3932: ST_TO_ADDR
3933: LD_INT 6
3935: PUSH
3936: FOR_TO
3937: IFFALSE 4016
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
3939: LD_INT 0
3941: PPUSH
3942: LD_INT 1
3944: PUSH
3945: LD_INT 4
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: PUSH
3952: LD_INT 1
3954: PPUSH
3955: LD_INT 2
3957: PPUSH
3958: CALL_OW 12
3962: ARRAY
3963: PPUSH
3964: LD_INT 0
3966: PPUSH
3967: CALL_OW 380
// un := CreateHuman ;
3971: LD_ADDR_VAR 0 3
3975: PUSH
3976: CALL_OW 44
3980: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
3981: LD_VAR 0 3
3985: PPUSH
3986: LD_INT 54
3988: PPUSH
3989: LD_INT 88
3991: PPUSH
3992: LD_INT 12
3994: PPUSH
3995: LD_INT 0
3997: PPUSH
3998: CALL_OW 50
// SetLives ( un , 1 ) ;
4002: LD_VAR 0 3
4006: PPUSH
4007: LD_INT 1
4009: PPUSH
4010: CALL_OW 234
// end ;
4014: GO 3936
4016: POP
4017: POP
// uc_side := 3 ;
4018: LD_ADDR_OWVAR 20
4022: PUSH
4023: LD_INT 3
4025: ST_TO_ADDR
// uc_nation := 0 ;
4026: LD_ADDR_OWVAR 21
4030: PUSH
4031: LD_INT 0
4033: ST_TO_ADDR
// apeSoldGroup := [ ] ;
4034: LD_ADDR_EXP 42
4038: PUSH
4039: EMPTY
4040: ST_TO_ADDR
// apeEngGroup := [ ] ;
4041: LD_ADDR_EXP 43
4045: PUSH
4046: EMPTY
4047: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
4048: LD_ADDR_VAR 0 2
4052: PUSH
4053: DOUBLE
4054: LD_INT 1
4056: DEC
4057: ST_TO_ADDR
4058: LD_INT 4
4060: PUSH
4061: LD_INT 5
4063: PUSH
4064: LD_INT 6
4066: PUSH
4067: EMPTY
4068: LIST
4069: LIST
4070: LIST
4071: PUSH
4072: LD_OWVAR 67
4076: ARRAY
4077: PUSH
4078: FOR_TO
4079: IFFALSE 4193
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4081: LD_INT 0
4083: PPUSH
4084: LD_INT 15
4086: PPUSH
4087: LD_INT 3
4089: PUSH
4090: LD_INT 4
4092: PUSH
4093: LD_INT 5
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: LIST
4100: PUSH
4101: LD_OWVAR 67
4105: ARRAY
4106: PPUSH
4107: CALL_OW 380
// un := CreateHuman ;
4111: LD_ADDR_VAR 0 3
4115: PUSH
4116: CALL_OW 44
4120: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
4121: LD_ADDR_EXP 42
4125: PUSH
4126: LD_EXP 42
4130: PPUSH
4131: LD_EXP 42
4135: PUSH
4136: LD_INT 1
4138: PLUS
4139: PPUSH
4140: LD_VAR 0 3
4144: PPUSH
4145: CALL_OW 1
4149: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4150: LD_VAR 0 3
4154: PPUSH
4155: LD_INT 0
4157: PPUSH
4158: LD_INT 5
4160: PPUSH
4161: CALL_OW 12
4165: PPUSH
4166: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
4170: LD_VAR 0 3
4174: PPUSH
4175: LD_INT 56
4177: PPUSH
4178: LD_INT 82
4180: PPUSH
4181: LD_INT 6
4183: PPUSH
4184: LD_INT 0
4186: PPUSH
4187: CALL_OW 50
// end ;
4191: GO 4078
4193: POP
4194: POP
// for i := 1 to 2 do
4195: LD_ADDR_VAR 0 2
4199: PUSH
4200: DOUBLE
4201: LD_INT 1
4203: DEC
4204: ST_TO_ADDR
4205: LD_INT 2
4207: PUSH
4208: FOR_TO
4209: IFFALSE 4285
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
4211: LD_INT 0
4213: PPUSH
4214: LD_INT 16
4216: PPUSH
4217: LD_INT 4
4219: PPUSH
4220: CALL_OW 380
// un := CreateHuman ;
4224: LD_ADDR_VAR 0 3
4228: PUSH
4229: CALL_OW 44
4233: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
4234: LD_ADDR_EXP 43
4238: PUSH
4239: LD_EXP 43
4243: PPUSH
4244: LD_EXP 43
4248: PUSH
4249: LD_INT 1
4251: PLUS
4252: PPUSH
4253: LD_VAR 0 3
4257: PPUSH
4258: CALL_OW 1
4262: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
4263: LD_VAR 0 3
4267: PPUSH
4268: LD_INT 51
4270: PPUSH
4271: LD_INT 77
4273: PPUSH
4274: CALL_OW 428
4278: PPUSH
4279: CALL_OW 52
// end ;
4283: GO 4208
4285: POP
4286: POP
// end ;
4287: LD_VAR 0 1
4291: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
4292: LD_EXP 42
4296: PPUSH
4297: LD_INT 3
4299: PUSH
4300: LD_INT 24
4302: PUSH
4303: LD_INT 600
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PUSH
4310: EMPTY
4311: LIST
4312: LIST
4313: PUSH
4314: LD_INT 3
4316: PUSH
4317: LD_INT 54
4319: PUSH
4320: EMPTY
4321: LIST
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: PUSH
4327: EMPTY
4328: LIST
4329: LIST
4330: PPUSH
4331: CALL_OW 72
4335: PUSH
4336: LD_INT 66
4338: PPUSH
4339: LD_INT 89
4341: PPUSH
4342: CALL_OW 428
4346: PPUSH
4347: CALL_OW 302
4351: AND
4352: IFFALSE 4437
4354: GO 4356
4356: DISABLE
4357: LD_INT 0
4359: PPUSH
// begin enable ;
4360: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
4361: LD_ADDR_VAR 0 1
4365: PUSH
4366: LD_EXP 42
4370: PPUSH
4371: LD_INT 3
4373: PUSH
4374: LD_INT 24
4376: PUSH
4377: LD_INT 600
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: PUSH
4384: EMPTY
4385: LIST
4386: LIST
4387: PUSH
4388: LD_INT 3
4390: PUSH
4391: LD_INT 54
4393: PUSH
4394: EMPTY
4395: LIST
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PPUSH
4405: CALL_OW 72
4409: PUSH
4410: FOR_IN
4411: IFFALSE 4435
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
4413: LD_VAR 0 1
4417: PPUSH
4418: LD_INT 66
4420: PPUSH
4421: LD_INT 89
4423: PPUSH
4424: CALL_OW 428
4428: PPUSH
4429: CALL_OW 120
4433: GO 4410
4435: POP
4436: POP
// end ;
4437: PPOPN 1
4439: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
4440: LD_INT 22
4442: PUSH
4443: LD_INT 2
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PUSH
4450: LD_INT 92
4452: PUSH
4453: LD_INT 54
4455: PUSH
4456: LD_INT 77
4458: PUSH
4459: LD_INT 8
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: LIST
4466: LIST
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PPUSH
4472: CALL_OW 69
4476: IFFALSE 4540
4478: GO 4480
4480: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
4481: LD_EXP 43
4485: PPUSH
4486: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
4490: LD_EXP 43
4494: PPUSH
4495: LD_INT 22
4497: PUSH
4498: LD_INT 2
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: LD_INT 92
4507: PUSH
4508: LD_INT 54
4510: PUSH
4511: LD_INT 77
4513: PUSH
4514: LD_INT 8
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PPUSH
4527: CALL_OW 69
4531: PUSH
4532: LD_INT 1
4534: ARRAY
4535: PPUSH
4536: CALL_OW 175
// end ;
4540: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , outerSpawnArea , movePoints , un , tag ; begin
4541: LD_INT 0
4543: PPUSH
4544: PPUSH
4545: PPUSH
4546: PPUSH
4547: PPUSH
4548: PPUSH
4549: PPUSH
4550: PPUSH
4551: PPUSH
// spawnPoint := rand ( 1 , 3 ) ;
4552: LD_ADDR_VAR 0 3
4556: PUSH
4557: LD_INT 1
4559: PPUSH
4560: LD_INT 3
4562: PPUSH
4563: CALL_OW 12
4567: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea , eastSpawnArea ] [ spawnPoint ] ;
4568: LD_ADDR_VAR 0 5
4572: PUSH
4573: LD_INT 16
4575: PUSH
4576: LD_INT 17
4578: PUSH
4579: LD_INT 19
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: LIST
4586: PUSH
4587: LD_VAR 0 3
4591: ARRAY
4592: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] , [ [ 185 , 72 ] , [ 171 , 83 ] , [ 161 , 99 ] , [ 125 , 82 ] , [ 105 , 90 ] , [ 96 , 116 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
4593: LD_ADDR_VAR 0 7
4597: PUSH
4598: LD_INT 159
4600: PUSH
4601: LD_INT 25
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: PUSH
4608: LD_INT 137
4610: PUSH
4611: LD_INT 37
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: PUSH
4618: LD_INT 123
4620: PUSH
4621: LD_INT 55
4623: PUSH
4624: EMPTY
4625: LIST
4626: LIST
4627: PUSH
4628: LD_INT 115
4630: PUSH
4631: LD_INT 71
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: PUSH
4638: LD_INT 106
4640: PUSH
4641: LD_INT 88
4643: PUSH
4644: EMPTY
4645: LIST
4646: LIST
4647: PUSH
4648: LD_INT 97
4650: PUSH
4651: LD_INT 114
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: PUSH
4658: LD_INT 75
4660: PUSH
4661: LD_INT 146
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PUSH
4668: EMPTY
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: PUSH
4677: LD_INT 206
4679: PUSH
4680: LD_INT 135
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: PUSH
4687: LD_INT 184
4689: PUSH
4690: LD_INT 111
4692: PUSH
4693: EMPTY
4694: LIST
4695: LIST
4696: PUSH
4697: LD_INT 154
4699: PUSH
4700: LD_INT 97
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PUSH
4707: LD_INT 122
4709: PUSH
4710: LD_INT 80
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: LD_INT 109
4719: PUSH
4720: LD_INT 78
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: PUSH
4727: LD_INT 97
4729: PUSH
4730: LD_INT 113
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: PUSH
4737: LD_INT 75
4739: PUSH
4740: LD_INT 147
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: PUSH
4756: LD_INT 185
4758: PUSH
4759: LD_INT 72
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PUSH
4766: LD_INT 171
4768: PUSH
4769: LD_INT 83
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: PUSH
4776: LD_INT 161
4778: PUSH
4779: LD_INT 99
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PUSH
4786: LD_INT 125
4788: PUSH
4789: LD_INT 82
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 105
4798: PUSH
4799: LD_INT 90
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PUSH
4806: LD_INT 96
4808: PUSH
4809: LD_INT 116
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 75
4818: PUSH
4819: LD_INT 147
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: LIST
4839: PUSH
4840: LD_VAR 0 3
4844: ARRAY
4845: ST_TO_ADDR
// dir := [ 4 , 5 , 3 ] [ spawnPoint ] ;
4846: LD_ADDR_VAR 0 4
4850: PUSH
4851: LD_INT 4
4853: PUSH
4854: LD_INT 5
4856: PUSH
4857: LD_INT 3
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: LIST
4864: PUSH
4865: LD_VAR 0 3
4869: ARRAY
4870: ST_TO_ADDR
// outerSpawnArea := [ eastNorthOuterSpawnArea , eastSouthOuterSpawnArea , eastOuterSpawnArea ] [ spawnPoint ] ;
4871: LD_ADDR_VAR 0 6
4875: PUSH
4876: LD_INT 22
4878: PUSH
4879: LD_INT 20
4881: PUSH
4882: LD_INT 21
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: LIST
4889: PUSH
4890: LD_VAR 0 3
4894: ARRAY
4895: ST_TO_ADDR
// for i := 1 to 2 do
4896: LD_ADDR_VAR 0 2
4900: PUSH
4901: DOUBLE
4902: LD_INT 1
4904: DEC
4905: ST_TO_ADDR
4906: LD_INT 2
4908: PUSH
4909: FOR_TO
4910: IFFALSE 4928
// EraseResourceArea ( i , outerSpawnArea ) ;
4912: LD_VAR 0 2
4916: PPUSH
4917: LD_VAR 0 6
4921: PPUSH
4922: CALL_OW 286
4926: GO 4909
4928: POP
4929: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
4930: LD_VAR 0 6
4934: PPUSH
4935: LD_INT 2
4937: PUSH
4938: LD_INT 21
4940: PUSH
4941: LD_INT 1
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PUSH
4948: LD_INT 21
4950: PUSH
4951: LD_INT 2
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 21
4960: PUSH
4961: LD_INT 3
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: PPUSH
4974: CALL_OW 70
4978: IFFALSE 5193
// repeat wait ( 0 0$1 ) ;
4980: LD_INT 35
4982: PPUSH
4983: CALL_OW 67
// if FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) then
4987: LD_VAR 0 6
4991: PPUSH
4992: LD_INT 2
4994: PUSH
4995: LD_INT 21
4997: PUSH
4998: LD_INT 2
5000: PUSH
5001: EMPTY
5002: LIST
5003: LIST
5004: PUSH
5005: LD_INT 21
5007: PUSH
5008: LD_INT 3
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: LIST
5019: PPUSH
5020: CALL_OW 70
5024: IFFALSE 5085
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ) do
5026: LD_ADDR_VAR 0 2
5030: PUSH
5031: LD_VAR 0 6
5035: PPUSH
5036: LD_INT 2
5038: PUSH
5039: LD_INT 21
5041: PUSH
5042: LD_INT 2
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: PUSH
5049: LD_INT 21
5051: PUSH
5052: LD_INT 3
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: LIST
5063: PPUSH
5064: CALL_OW 70
5068: PUSH
5069: FOR_IN
5070: IFFALSE 5083
// RemoveUnit ( i ) ;
5072: LD_VAR 0 2
5076: PPUSH
5077: CALL_OW 64
5081: GO 5069
5083: POP
5084: POP
// if FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) then
5085: LD_VAR 0 6
5089: PPUSH
5090: LD_INT 21
5092: PUSH
5093: LD_INT 1
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PPUSH
5100: CALL_OW 70
5104: IFFALSE 5153
// for i in FilterUnitsInArea ( outerSpawnArea , [ f_type , unit_human ] ) do
5106: LD_ADDR_VAR 0 2
5110: PUSH
5111: LD_VAR 0 6
5115: PPUSH
5116: LD_INT 21
5118: PUSH
5119: LD_INT 1
5121: PUSH
5122: EMPTY
5123: LIST
5124: LIST
5125: PPUSH
5126: CALL_OW 70
5130: PUSH
5131: FOR_IN
5132: IFFALSE 5151
// ComMoveXY ( i , 113 , 53 ) ;
5134: LD_VAR 0 2
5138: PPUSH
5139: LD_INT 113
5141: PPUSH
5142: LD_INT 53
5144: PPUSH
5145: CALL_OW 111
5149: GO 5131
5151: POP
5152: POP
// until not FilterUnitsInArea ( outerSpawnArea , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
5153: LD_VAR 0 6
5157: PPUSH
5158: LD_INT 2
5160: PUSH
5161: LD_INT 21
5163: PUSH
5164: LD_INT 1
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: PUSH
5171: LD_INT 21
5173: PUSH
5174: LD_INT 2
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: LIST
5185: PPUSH
5186: CALL_OW 70
5190: NOT
5191: IFFALSE 4980
// case convoyCounter of 1 .. 3 :
5193: LD_EXP 16
5197: PUSH
5198: LD_INT 1
5200: DOUBLE
5201: GREATEREQUAL
5202: IFFALSE 5210
5204: LD_INT 3
5206: DOUBLE
5207: LESSEQUAL
5208: IFTRUE 5212
5210: GO 5807
5212: POP
// begin uc_side := 3 ;
5213: LD_ADDR_OWVAR 20
5217: PUSH
5218: LD_INT 3
5220: ST_TO_ADDR
// uc_nation := 3 ;
5221: LD_ADDR_OWVAR 21
5225: PUSH
5226: LD_INT 3
5228: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] - convoyCounter do
5229: LD_ADDR_VAR 0 2
5233: PUSH
5234: DOUBLE
5235: LD_INT 1
5237: DEC
5238: ST_TO_ADDR
5239: LD_INT 5
5241: PUSH
5242: LD_INT 6
5244: PUSH
5245: LD_INT 7
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: LIST
5252: PUSH
5253: LD_OWVAR 67
5257: ARRAY
5258: PUSH
5259: LD_EXP 16
5263: MINUS
5264: PUSH
5265: FOR_TO
5266: IFFALSE 5453
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
5268: LD_INT 0
5270: PPUSH
5271: LD_INT 1
5273: PUSH
5274: LD_INT 1
5276: PUSH
5277: LD_INT 1
5279: PUSH
5280: LD_INT 4
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: PUSH
5289: LD_INT 1
5291: PPUSH
5292: LD_INT 4
5294: PPUSH
5295: CALL_OW 12
5299: ARRAY
5300: PPUSH
5301: LD_INT 4
5303: PUSH
5304: LD_INT 5
5306: PUSH
5307: LD_INT 6
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: PUSH
5315: LD_OWVAR 67
5319: ARRAY
5320: PPUSH
5321: CALL_OW 380
// un := CreateHuman ;
5325: LD_ADDR_VAR 0 8
5329: PUSH
5330: CALL_OW 44
5334: ST_TO_ADDR
// SetDir ( un , dir ) ;
5335: LD_VAR 0 8
5339: PPUSH
5340: LD_VAR 0 4
5344: PPUSH
5345: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5349: LD_VAR 0 8
5353: PPUSH
5354: LD_VAR 0 5
5358: PPUSH
5359: LD_INT 0
5361: PPUSH
5362: CALL 62921 0 3
5366: IFFALSE 5451
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5368: LD_ADDR_EXP 41
5372: PUSH
5373: LD_EXP 41
5377: PPUSH
5378: LD_EXP 41
5382: PUSH
5383: LD_INT 1
5385: PLUS
5386: PPUSH
5387: LD_VAR 0 8
5391: PPUSH
5392: CALL_OW 1
5396: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5397: LD_VAR 0 8
5401: PPUSH
5402: LD_INT 1
5404: PPUSH
5405: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5409: LD_VAR 0 8
5413: PPUSH
5414: LD_VAR 0 7
5418: PUSH
5419: LD_INT 1
5421: ARRAY
5422: PUSH
5423: LD_INT 1
5425: ARRAY
5426: PPUSH
5427: LD_VAR 0 7
5431: PUSH
5432: LD_INT 1
5434: ARRAY
5435: PUSH
5436: LD_INT 2
5438: ARRAY
5439: PPUSH
5440: CALL_OW 111
// wait ( 0 0$2 ) ;
5444: LD_INT 70
5446: PPUSH
5447: CALL_OW 67
// end ; end ;
5451: GO 5265
5453: POP
5454: POP
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
5455: LD_ADDR_VAR 0 2
5459: PUSH
5460: DOUBLE
5461: LD_INT 1
5463: DEC
5464: ST_TO_ADDR
5465: LD_INT 3
5467: PUSH
5468: LD_INT 4
5470: PUSH
5471: LD_INT 4
5473: PUSH
5474: EMPTY
5475: LIST
5476: LIST
5477: LIST
5478: PUSH
5479: LD_OWVAR 67
5483: ARRAY
5484: PUSH
5485: FOR_TO
5486: IFFALSE 5803
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
5488: LD_INT 3
5490: PPUSH
5491: LD_INT 3
5493: PPUSH
5494: LD_INT 21
5496: PUSH
5497: LD_INT 22
5499: PUSH
5500: LD_INT 23
5502: PUSH
5503: LD_INT 24
5505: PUSH
5506: LD_INT 24
5508: PUSH
5509: EMPTY
5510: LIST
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: PUSH
5516: LD_OWVAR 67
5520: PPUSH
5521: LD_OWVAR 67
5525: PUSH
5526: LD_INT 2
5528: PLUS
5529: PPUSH
5530: CALL_OW 12
5534: ARRAY
5535: PPUSH
5536: LD_INT 1
5538: PPUSH
5539: LD_INT 1
5541: PPUSH
5542: LD_INT 42
5544: PUSH
5545: LD_INT 44
5547: PUSH
5548: LD_INT 43
5550: PUSH
5551: LD_INT 44
5553: PUSH
5554: LD_INT 46
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: PUSH
5564: LD_INT 1
5566: PPUSH
5567: LD_OWVAR 67
5571: PUSH
5572: LD_INT 2
5574: PLUS
5575: PPUSH
5576: CALL_OW 12
5580: ARRAY
5581: PPUSH
5582: LD_INT 90
5584: PPUSH
5585: CALL 427 0 7
// un := CreateVehicle ;
5589: LD_ADDR_VAR 0 8
5593: PUSH
5594: CALL_OW 45
5598: ST_TO_ADDR
// SetDir ( un , dir ) ;
5599: LD_VAR 0 8
5603: PPUSH
5604: LD_VAR 0 4
5608: PPUSH
5609: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5613: LD_VAR 0 8
5617: PPUSH
5618: LD_VAR 0 5
5622: PPUSH
5623: LD_INT 0
5625: PPUSH
5626: CALL 62921 0 3
5630: IFFALSE 5801
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5632: LD_ADDR_EXP 41
5636: PUSH
5637: LD_EXP 41
5641: PPUSH
5642: LD_EXP 41
5646: PUSH
5647: LD_INT 1
5649: PLUS
5650: PPUSH
5651: LD_VAR 0 8
5655: PPUSH
5656: CALL_OW 1
5660: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
5661: LD_INT 0
5663: PPUSH
5664: LD_INT 3
5666: PUSH
5667: LD_INT 4
5669: PUSH
5670: LD_INT 5
5672: PUSH
5673: EMPTY
5674: LIST
5675: LIST
5676: LIST
5677: PUSH
5678: LD_OWVAR 67
5682: ARRAY
5683: PPUSH
5684: CALL_OW 383
// un := CreateHuman ;
5688: LD_ADDR_VAR 0 8
5692: PUSH
5693: CALL_OW 44
5697: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
5698: LD_VAR 0 8
5702: PPUSH
5703: LD_EXP 41
5707: PUSH
5708: LD_EXP 41
5712: ARRAY
5713: PPUSH
5714: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5718: LD_ADDR_EXP 41
5722: PUSH
5723: LD_EXP 41
5727: PPUSH
5728: LD_EXP 41
5732: PUSH
5733: LD_INT 1
5735: PLUS
5736: PPUSH
5737: LD_VAR 0 8
5741: PPUSH
5742: CALL_OW 1
5746: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5747: LD_VAR 0 8
5751: PPUSH
5752: LD_INT 1
5754: PPUSH
5755: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5759: LD_VAR 0 8
5763: PPUSH
5764: LD_VAR 0 7
5768: PUSH
5769: LD_INT 1
5771: ARRAY
5772: PUSH
5773: LD_INT 1
5775: ARRAY
5776: PPUSH
5777: LD_VAR 0 7
5781: PUSH
5782: LD_INT 1
5784: ARRAY
5785: PUSH
5786: LD_INT 2
5788: ARRAY
5789: PPUSH
5790: CALL_OW 111
// wait ( 0 0$3 ) ;
5794: LD_INT 105
5796: PPUSH
5797: CALL_OW 67
// end ; end ;
5801: GO 5485
5803: POP
5804: POP
// end ; 4 .. 7 :
5805: GO 6360
5807: LD_INT 4
5809: DOUBLE
5810: GREATEREQUAL
5811: IFFALSE 5819
5813: LD_INT 7
5815: DOUBLE
5816: LESSEQUAL
5817: IFTRUE 5821
5819: GO 6359
5821: POP
// begin uc_side := 3 ;
5822: LD_ADDR_OWVAR 20
5826: PUSH
5827: LD_INT 3
5829: ST_TO_ADDR
// uc_nation := 3 ;
5830: LD_ADDR_OWVAR 21
5834: PUSH
5835: LD_INT 3
5837: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
5838: LD_ADDR_VAR 0 2
5842: PUSH
5843: DOUBLE
5844: LD_INT 1
5846: DEC
5847: ST_TO_ADDR
5848: LD_INT 2
5850: PUSH
5851: LD_INT 3
5853: PUSH
5854: LD_INT 4
5856: PUSH
5857: EMPTY
5858: LIST
5859: LIST
5860: LIST
5861: PUSH
5862: LD_OWVAR 67
5866: ARRAY
5867: PUSH
5868: FOR_TO
5869: IFFALSE 6029
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
5871: LD_INT 0
5873: PPUSH
5874: LD_INT 1
5876: PPUSH
5877: LD_INT 4
5879: PUSH
5880: LD_INT 5
5882: PUSH
5883: LD_INT 6
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: LIST
5890: PUSH
5891: LD_OWVAR 67
5895: ARRAY
5896: PPUSH
5897: CALL_OW 380
// un := CreateHuman ;
5901: LD_ADDR_VAR 0 8
5905: PUSH
5906: CALL_OW 44
5910: ST_TO_ADDR
// SetDir ( un , dir ) ;
5911: LD_VAR 0 8
5915: PPUSH
5916: LD_VAR 0 4
5920: PPUSH
5921: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
5925: LD_VAR 0 8
5929: PPUSH
5930: LD_VAR 0 5
5934: PPUSH
5935: LD_INT 0
5937: PPUSH
5938: CALL 62921 0 3
5942: IFFALSE 6027
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
5944: LD_ADDR_EXP 41
5948: PUSH
5949: LD_EXP 41
5953: PPUSH
5954: LD_EXP 41
5958: PUSH
5959: LD_INT 1
5961: PLUS
5962: PPUSH
5963: LD_VAR 0 8
5967: PPUSH
5968: CALL_OW 1
5972: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5973: LD_VAR 0 8
5977: PPUSH
5978: LD_INT 1
5980: PPUSH
5981: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
5985: LD_VAR 0 8
5989: PPUSH
5990: LD_VAR 0 7
5994: PUSH
5995: LD_INT 1
5997: ARRAY
5998: PUSH
5999: LD_INT 1
6001: ARRAY
6002: PPUSH
6003: LD_VAR 0 7
6007: PUSH
6008: LD_INT 1
6010: ARRAY
6011: PUSH
6012: LD_INT 2
6014: ARRAY
6015: PPUSH
6016: CALL_OW 111
// wait ( 0 0$2 ) ;
6020: LD_INT 70
6022: PPUSH
6023: CALL_OW 67
// end ; end ;
6027: GO 5868
6029: POP
6030: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
6031: LD_ADDR_VAR 0 2
6035: PUSH
6036: DOUBLE
6037: LD_INT 1
6039: DEC
6040: ST_TO_ADDR
6041: LD_INT 2
6043: PUSH
6044: LD_INT 3
6046: PUSH
6047: LD_INT 3
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: LIST
6054: PUSH
6055: LD_OWVAR 67
6059: ARRAY
6060: PUSH
6061: FOR_TO
6062: IFFALSE 6355
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
6064: LD_INT 3
6066: PPUSH
6067: LD_INT 3
6069: PPUSH
6070: LD_INT 21
6072: PUSH
6073: LD_INT 22
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: PUSH
6080: LD_INT 1
6082: PPUSH
6083: LD_INT 2
6085: PPUSH
6086: CALL_OW 12
6090: ARRAY
6091: PPUSH
6092: LD_INT 1
6094: PPUSH
6095: LD_INT 1
6097: PPUSH
6098: LD_INT 42
6100: PUSH
6101: LD_INT 44
6103: PUSH
6104: LD_INT 43
6106: PUSH
6107: LD_INT 44
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: PUSH
6116: LD_INT 1
6118: PPUSH
6119: LD_OWVAR 67
6123: PUSH
6124: LD_INT 1
6126: PLUS
6127: PPUSH
6128: CALL_OW 12
6132: ARRAY
6133: PPUSH
6134: LD_INT 90
6136: PPUSH
6137: CALL 427 0 7
// un := CreateVehicle ;
6141: LD_ADDR_VAR 0 8
6145: PUSH
6146: CALL_OW 45
6150: ST_TO_ADDR
// SetDir ( un , dir ) ;
6151: LD_VAR 0 8
6155: PPUSH
6156: LD_VAR 0 4
6160: PPUSH
6161: CALL_OW 233
// if PlaceUnitInArea ( un , spawnArea , false ) then
6165: LD_VAR 0 8
6169: PPUSH
6170: LD_VAR 0 5
6174: PPUSH
6175: LD_INT 0
6177: PPUSH
6178: CALL 62921 0 3
6182: IFFALSE 6353
// begin ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6184: LD_ADDR_EXP 41
6188: PUSH
6189: LD_EXP 41
6193: PPUSH
6194: LD_EXP 41
6198: PUSH
6199: LD_INT 1
6201: PLUS
6202: PPUSH
6203: LD_VAR 0 8
6207: PPUSH
6208: CALL_OW 1
6212: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
6213: LD_INT 0
6215: PPUSH
6216: LD_INT 3
6218: PUSH
6219: LD_INT 4
6221: PUSH
6222: LD_INT 5
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: LIST
6229: PUSH
6230: LD_OWVAR 67
6234: ARRAY
6235: PPUSH
6236: CALL_OW 383
// un := CreateHuman ;
6240: LD_ADDR_VAR 0 8
6244: PUSH
6245: CALL_OW 44
6249: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6250: LD_VAR 0 8
6254: PPUSH
6255: LD_EXP 41
6259: PUSH
6260: LD_EXP 41
6264: ARRAY
6265: PPUSH
6266: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6270: LD_ADDR_EXP 41
6274: PUSH
6275: LD_EXP 41
6279: PPUSH
6280: LD_EXP 41
6284: PUSH
6285: LD_INT 1
6287: PLUS
6288: PPUSH
6289: LD_VAR 0 8
6293: PPUSH
6294: CALL_OW 1
6298: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6299: LD_VAR 0 8
6303: PPUSH
6304: LD_INT 1
6306: PPUSH
6307: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6311: LD_VAR 0 8
6315: PPUSH
6316: LD_VAR 0 7
6320: PUSH
6321: LD_INT 1
6323: ARRAY
6324: PUSH
6325: LD_INT 1
6327: ARRAY
6328: PPUSH
6329: LD_VAR 0 7
6333: PUSH
6334: LD_INT 1
6336: ARRAY
6337: PUSH
6338: LD_INT 2
6340: ARRAY
6341: PPUSH
6342: CALL_OW 111
// wait ( 0 0$2 ) ;
6346: LD_INT 70
6348: PPUSH
6349: CALL_OW 67
// end ; end ;
6353: GO 6061
6355: POP
6356: POP
// end ; end ;
6357: GO 6360
6359: POP
// repeat wait ( 0 0$1 ) ;
6360: LD_INT 35
6362: PPUSH
6363: CALL_OW 67
// for un in ruConvoySquad do
6367: LD_ADDR_VAR 0 8
6371: PUSH
6372: LD_EXP 41
6376: PUSH
6377: FOR_IN
6378: IFFALSE 6873
// begin if IsInArea ( un , westSouthOutArea ) then
6380: LD_VAR 0 8
6384: PPUSH
6385: LD_INT 18
6387: PPUSH
6388: CALL_OW 308
6392: IFFALSE 6471
// begin if GetType ( un ) = unit_vehicle then
6394: LD_VAR 0 8
6398: PPUSH
6399: CALL_OW 247
6403: PUSH
6404: LD_INT 2
6406: EQUAL
6407: IFFALSE 6430
// ruConvoySquad := ruConvoySquad diff IsDrivenBy ( un ) ;
6409: LD_ADDR_EXP 41
6413: PUSH
6414: LD_EXP 41
6418: PUSH
6419: LD_VAR 0 8
6423: PPUSH
6424: CALL_OW 311
6428: DIFF
6429: ST_TO_ADDR
// convoySavedCounter := convoySavedCounter + 1 ;
6430: LD_ADDR_EXP 15
6434: PUSH
6435: LD_EXP 15
6439: PUSH
6440: LD_INT 1
6442: PLUS
6443: ST_TO_ADDR
// RemoveUnit ( un ) ;
6444: LD_VAR 0 8
6448: PPUSH
6449: CALL_OW 64
// ruConvoySquad := ruConvoySquad diff un ;
6453: LD_ADDR_EXP 41
6457: PUSH
6458: LD_EXP 41
6462: PUSH
6463: LD_VAR 0 8
6467: DIFF
6468: ST_TO_ADDR
// break ;
6469: GO 6873
// end ; if not IsPlaced ( un ) and not IsInUnit ( un ) then
6471: LD_VAR 0 8
6475: PPUSH
6476: CALL_OW 305
6480: NOT
6481: PUSH
6482: LD_VAR 0 8
6486: PPUSH
6487: CALL_OW 310
6491: NOT
6492: AND
6493: IFFALSE 6511
// ruConvoySquad := ruConvoySquad diff un ;
6495: LD_ADDR_EXP 41
6499: PUSH
6500: LD_EXP 41
6504: PUSH
6505: LD_VAR 0 8
6509: DIFF
6510: ST_TO_ADDR
// if IsOk ( un ) and not HasTask ( un ) then
6511: LD_VAR 0 8
6515: PPUSH
6516: CALL_OW 302
6520: PUSH
6521: LD_VAR 0 8
6525: PPUSH
6526: CALL_OW 314
6530: NOT
6531: AND
6532: IFFALSE 6871
// begin tag := GetTag ( un ) ;
6534: LD_ADDR_VAR 0 9
6538: PUSH
6539: LD_VAR 0 8
6543: PPUSH
6544: CALL_OW 110
6548: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
6549: LD_VAR 0 8
6553: PPUSH
6554: LD_VAR 0 7
6558: PUSH
6559: LD_VAR 0 9
6563: PUSH
6564: LD_INT 1
6566: PLUS
6567: ARRAY
6568: PUSH
6569: LD_INT 1
6571: ARRAY
6572: PPUSH
6573: LD_VAR 0 7
6577: PUSH
6578: LD_VAR 0 9
6582: PUSH
6583: LD_INT 1
6585: PLUS
6586: ARRAY
6587: PUSH
6588: LD_INT 2
6590: ARRAY
6591: PPUSH
6592: CALL_OW 297
6596: PUSH
6597: LD_INT 6
6599: LESS
6600: IFFALSE 6711
// begin SetTag ( un , tag + 1 ) ;
6602: LD_VAR 0 8
6606: PPUSH
6607: LD_VAR 0 9
6611: PUSH
6612: LD_INT 1
6614: PLUS
6615: PPUSH
6616: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
6620: LD_VAR 0 8
6624: PPUSH
6625: CALL_OW 247
6629: PUSH
6630: LD_INT 2
6632: EQUAL
6633: PUSH
6634: LD_VAR 0 8
6638: PPUSH
6639: CALL_OW 257
6643: PUSH
6644: LD_INT 3
6646: EQUAL
6647: OR
6648: IFFALSE 6709
// begin AddComWait ( un , 0 0$4 ) ;
6650: LD_VAR 0 8
6654: PPUSH
6655: LD_INT 140
6657: PPUSH
6658: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6662: LD_VAR 0 8
6666: PPUSH
6667: LD_VAR 0 7
6671: PUSH
6672: LD_VAR 0 9
6676: PUSH
6677: LD_INT 1
6679: PLUS
6680: ARRAY
6681: PUSH
6682: LD_INT 1
6684: ARRAY
6685: PPUSH
6686: LD_VAR 0 7
6690: PUSH
6691: LD_VAR 0 9
6695: PUSH
6696: LD_INT 1
6698: PLUS
6699: ARRAY
6700: PUSH
6701: LD_INT 2
6703: ARRAY
6704: PPUSH
6705: CALL_OW 174
// end ; end else
6709: GO 6871
// begin if GetClass ( un ) = 4 and UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
6711: LD_VAR 0 8
6715: PPUSH
6716: CALL_OW 257
6720: PUSH
6721: LD_INT 4
6723: EQUAL
6724: PUSH
6725: LD_EXP 41
6729: PPUSH
6730: LD_INT 21
6732: PUSH
6733: LD_INT 1
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: PUSH
6740: LD_INT 3
6742: PUSH
6743: LD_INT 24
6745: PUSH
6746: LD_INT 1000
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PPUSH
6761: CALL_OW 72
6765: AND
6766: IFFALSE 6824
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
6768: LD_VAR 0 8
6772: PPUSH
6773: LD_EXP 41
6777: PPUSH
6778: LD_INT 21
6780: PUSH
6781: LD_INT 1
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: PUSH
6788: LD_INT 3
6790: PUSH
6791: LD_INT 24
6793: PUSH
6794: LD_INT 1000
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: PPUSH
6809: CALL_OW 72
6813: PUSH
6814: LD_INT 1
6816: ARRAY
6817: PPUSH
6818: CALL_OW 128
6822: GO 6871
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
6824: LD_VAR 0 8
6828: PPUSH
6829: LD_VAR 0 7
6833: PUSH
6834: LD_VAR 0 9
6838: PUSH
6839: LD_INT 1
6841: PLUS
6842: ARRAY
6843: PUSH
6844: LD_INT 1
6846: ARRAY
6847: PPUSH
6848: LD_VAR 0 7
6852: PUSH
6853: LD_VAR 0 9
6857: PUSH
6858: LD_INT 1
6860: PLUS
6861: ARRAY
6862: PUSH
6863: LD_INT 2
6865: ARRAY
6866: PPUSH
6867: CALL_OW 114
// end ; end ; end ;
6871: GO 6377
6873: POP
6874: POP
// until not UnitFilter ( ruConvoySquad , [ f_type , unit_human ] ) ;
6875: LD_EXP 41
6879: PPUSH
6880: LD_INT 21
6882: PUSH
6883: LD_INT 1
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: PPUSH
6890: CALL_OW 72
6894: NOT
6895: IFFALSE 6360
// end ;
6897: LD_VAR 0 1
6901: RET
// every 0 0$50 trigger convoyCounter < rand ( 3 , 5 ) and not ruConvoySquad and Difficulty > 1 do var i , tmp , un ;
6902: LD_EXP 16
6906: PUSH
6907: LD_INT 3
6909: PPUSH
6910: LD_INT 5
6912: PPUSH
6913: CALL_OW 12
6917: LESS
6918: PUSH
6919: LD_EXP 41
6923: NOT
6924: AND
6925: PUSH
6926: LD_OWVAR 67
6930: PUSH
6931: LD_INT 1
6933: GREATER
6934: AND
6935: IFFALSE 7323
6937: GO 6939
6939: DISABLE
6940: LD_INT 0
6942: PPUSH
6943: PPUSH
6944: PPUSH
// begin uc_side := 3 ;
6945: LD_ADDR_OWVAR 20
6949: PUSH
6950: LD_INT 3
6952: ST_TO_ADDR
// uc_nation := 3 ;
6953: LD_ADDR_OWVAR 21
6957: PUSH
6958: LD_INT 3
6960: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6961: LD_ADDR_VAR 0 1
6965: PUSH
6966: DOUBLE
6967: LD_INT 1
6969: DEC
6970: ST_TO_ADDR
6971: LD_INT 2
6973: PUSH
6974: LD_INT 3
6976: PUSH
6977: LD_INT 4
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: LIST
6984: PUSH
6985: LD_OWVAR 67
6989: ARRAY
6990: PUSH
6991: FOR_TO
6992: IFFALSE 7244
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
6994: LD_INT 3
6996: PPUSH
6997: LD_INT 3
6999: PPUSH
7000: LD_INT 21
7002: PUSH
7003: LD_INT 22
7005: PUSH
7006: LD_INT 23
7008: PUSH
7009: LD_INT 24
7011: PUSH
7012: LD_INT 24
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: LD_OWVAR 67
7026: PPUSH
7027: LD_OWVAR 67
7031: PUSH
7032: LD_INT 2
7034: PLUS
7035: PPUSH
7036: CALL_OW 12
7040: ARRAY
7041: PPUSH
7042: LD_INT 1
7044: PPUSH
7045: LD_INT 1
7047: PPUSH
7048: LD_INT 42
7050: PUSH
7051: LD_INT 44
7053: PUSH
7054: LD_INT 43
7056: PUSH
7057: LD_INT 44
7059: PUSH
7060: LD_INT 46
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: PUSH
7070: LD_INT 1
7072: PPUSH
7073: LD_OWVAR 67
7077: PUSH
7078: LD_INT 2
7080: PLUS
7081: PPUSH
7082: CALL_OW 12
7086: ARRAY
7087: PPUSH
7088: LD_INT 90
7090: PPUSH
7091: CALL 427 0 7
// un := CreateVehicle ;
7095: LD_ADDR_VAR 0 3
7099: PUSH
7100: CALL_OW 45
7104: ST_TO_ADDR
// SetDir ( un , 0 ) ;
7105: LD_VAR 0 3
7109: PPUSH
7110: LD_INT 0
7112: PPUSH
7113: CALL_OW 233
// if PlaceUnitInArea ( un , westSouthSpawnArea , false ) then
7117: LD_VAR 0 3
7121: PPUSH
7122: LD_INT 23
7124: PPUSH
7125: LD_INT 0
7127: PPUSH
7128: CALL 62921 0 3
7132: IFFALSE 7242
// begin tmp := Replace ( tmp , tmp + 1 , un ) ;
7134: LD_ADDR_VAR 0 2
7138: PUSH
7139: LD_VAR 0 2
7143: PPUSH
7144: LD_VAR 0 2
7148: PUSH
7149: LD_INT 1
7151: PLUS
7152: PPUSH
7153: LD_VAR 0 3
7157: PPUSH
7158: CALL_OW 1
7162: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
7163: LD_INT 0
7165: PPUSH
7166: LD_INT 3
7168: PUSH
7169: LD_INT 4
7171: PUSH
7172: LD_INT 5
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: LIST
7179: PUSH
7180: LD_OWVAR 67
7184: ARRAY
7185: PPUSH
7186: CALL_OW 383
// un := CreateHuman ;
7190: LD_ADDR_VAR 0 3
7194: PUSH
7195: CALL_OW 44
7199: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp ] ) ;
7200: LD_VAR 0 3
7204: PPUSH
7205: LD_VAR 0 2
7209: PUSH
7210: LD_VAR 0 2
7214: ARRAY
7215: PPUSH
7216: CALL_OW 52
// ComMoveXY ( un , 80 , 139 ) ;
7220: LD_VAR 0 3
7224: PPUSH
7225: LD_INT 80
7227: PPUSH
7228: LD_INT 139
7230: PPUSH
7231: CALL_OW 111
// wait ( 0 0$3 ) ;
7235: LD_INT 105
7237: PPUSH
7238: CALL_OW 67
// end ; end ;
7242: GO 6991
7244: POP
7245: POP
// for i in tmp do
7246: LD_ADDR_VAR 0 1
7250: PUSH
7251: LD_VAR 0 2
7255: PUSH
7256: FOR_IN
7257: IFFALSE 7321
// begin ComAgressiveMove ( i , 101 , 102 ) ;
7259: LD_VAR 0 1
7263: PPUSH
7264: LD_INT 101
7266: PPUSH
7267: LD_INT 102
7269: PPUSH
7270: CALL_OW 114
// AddComAgressiveMove ( i , 110 , 78 ) ;
7274: LD_VAR 0 1
7278: PPUSH
7279: LD_INT 110
7281: PPUSH
7282: LD_INT 78
7284: PPUSH
7285: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 101 ) ;
7289: LD_VAR 0 1
7293: PPUSH
7294: LD_INT 75
7296: PPUSH
7297: LD_INT 101
7299: PPUSH
7300: CALL_OW 174
// AddComAgressiveMove ( i , 57 , 83 ) ;
7304: LD_VAR 0 1
7308: PPUSH
7309: LD_INT 57
7311: PPUSH
7312: LD_INT 83
7314: PPUSH
7315: CALL_OW 174
// end ;
7319: GO 7256
7321: POP
7322: POP
// end ; end_of_file
7323: PPOPN 3
7325: END
// on UnitDestroyed ( un ) do begin if un = Heike then
7326: LD_VAR 0 1
7330: PUSH
7331: LD_EXP 21
7335: EQUAL
7336: IFFALSE 7345
// YouLost ( Heike ) ;
7338: LD_STRING Heike
7340: PPUSH
7341: CALL_OW 104
// if un in apeSoldGroup then
7345: LD_VAR 0 1
7349: PUSH
7350: LD_EXP 42
7354: IN
7355: IFFALSE 7373
// apeSoldGroup := apeSoldGroup diff un ;
7357: LD_ADDR_EXP 42
7361: PUSH
7362: LD_EXP 42
7366: PUSH
7367: LD_VAR 0 1
7371: DIFF
7372: ST_TO_ADDR
// if un in apeEngGroup then
7373: LD_VAR 0 1
7377: PUSH
7378: LD_EXP 43
7382: IN
7383: IFFALSE 7401
// apeEngGroup := apeEngGroup diff un ;
7385: LD_ADDR_EXP 43
7389: PUSH
7390: LD_EXP 43
7394: PUSH
7395: LD_VAR 0 1
7399: DIFF
7400: ST_TO_ADDR
// if un in oilBaseGuard then
7401: LD_VAR 0 1
7405: PUSH
7406: LD_EXP 38
7410: IN
7411: IFFALSE 7429
// oilBaseGuard := oilBaseGuard diff un ;
7413: LD_ADDR_EXP 38
7417: PUSH
7418: LD_EXP 38
7422: PUSH
7423: LD_VAR 0 1
7427: DIFF
7428: ST_TO_ADDR
// if un in ruNorthGroup then
7429: LD_VAR 0 1
7433: PUSH
7434: LD_EXP 39
7438: IN
7439: IFFALSE 7457
// ruNorthGroup := ruNorthGroup diff un ;
7441: LD_ADDR_EXP 39
7445: PUSH
7446: LD_EXP 39
7450: PUSH
7451: LD_VAR 0 1
7455: DIFF
7456: ST_TO_ADDR
// if un in ruSouthGroup then
7457: LD_VAR 0 1
7461: PUSH
7462: LD_EXP 40
7466: IN
7467: IFFALSE 7485
// ruSouthGroup := ruSouthGroup diff un ;
7469: LD_ADDR_EXP 40
7473: PUSH
7474: LD_EXP 40
7478: PUSH
7479: LD_VAR 0 1
7483: DIFF
7484: ST_TO_ADDR
// if un in ruConvoySquad then
7485: LD_VAR 0 1
7489: PUSH
7490: LD_EXP 41
7494: IN
7495: IFFALSE 7513
// ruConvoySquad := ruConvoySquad diff un ;
7497: LD_ADDR_EXP 41
7501: PUSH
7502: LD_EXP 41
7506: PUSH
7507: LD_VAR 0 1
7511: DIFF
7512: ST_TO_ADDR
// end ;
7513: PPOPN 1
7515: END
// on VehicleConstructed ( veh , fac ) do begin if GetWeapon ( veh ) = ar_radar then
7516: LD_VAR 0 1
7520: PPUSH
7521: CALL_OW 264
7525: PUSH
7526: LD_INT 30
7528: EQUAL
7529: IFFALSE 7539
// radarConstructed := true ;
7531: LD_ADDR_EXP 13
7535: PUSH
7536: LD_INT 1
7538: ST_TO_ADDR
// if GetWeapon ( veh ) = ar_flame_thrower then
7539: LD_VAR 0 1
7543: PPUSH
7544: CALL_OW 264
7548: PUSH
7549: LD_INT 26
7551: EQUAL
7552: IFFALSE 7562
// flamethrowerBuilt := true ;
7554: LD_ADDR_EXP 20
7558: PUSH
7559: LD_INT 1
7561: ST_TO_ADDR
// end ;
7562: PPOPN 2
7564: END
// on VehicleCaptured ( newId , oldId , side , unit ) do begin captureCounter := captureCounter + 1 ;
7565: LD_ADDR_EXP 18
7569: PUSH
7570: LD_EXP 18
7574: PUSH
7575: LD_INT 1
7577: PLUS
7578: ST_TO_ADDR
// end ; end_of_file
7579: PPOPN 4
7581: END
// export function Action ; var i , un , veh , tmp ; begin
7582: LD_INT 0
7584: PPUSH
7585: PPUSH
7586: PPUSH
7587: PPUSH
7588: PPUSH
// InGameOn ;
7589: CALL_OW 8
// music_nat := 2 ;
7593: LD_ADDR_OWVAR 71
7597: PUSH
7598: LD_INT 2
7600: ST_TO_ADDR
// music_class := 0 ;
7601: LD_ADDR_OWVAR 72
7605: PUSH
7606: LD_INT 0
7608: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
7609: LD_INT 7
7611: PPUSH
7612: LD_INT 6
7614: PPUSH
7615: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 20 ) ;
7619: LD_INT 7
7621: PPUSH
7622: LD_INT 6
7624: PPUSH
7625: LD_INT 2
7627: PPUSH
7628: LD_INT 20
7630: NEG
7631: PPUSH
7632: CALL 1211 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Aviradze ] ;
7636: LD_ADDR_VAR 0 5
7640: PUSH
7641: LD_EXP 21
7645: PUSH
7646: LD_EXP 22
7650: PUSH
7651: LD_EXP 23
7655: PUSH
7656: LD_EXP 24
7660: PUSH
7661: LD_EXP 25
7665: PUSH
7666: LD_EXP 26
7670: PUSH
7671: LD_EXP 27
7675: PUSH
7676: LD_EXP 28
7680: PUSH
7681: LD_EXP 33
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: ST_TO_ADDR
// tmp := tmp diff 0 ;
7697: LD_ADDR_VAR 0 5
7701: PUSH
7702: LD_VAR 0 5
7706: PUSH
7707: LD_INT 0
7709: DIFF
7710: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
7711: LD_ADDR_VAR 0 5
7715: PUSH
7716: LD_VAR 0 5
7720: PPUSH
7721: LD_INT 3
7723: PPUSH
7724: CALL 62632 0 2
7728: ST_TO_ADDR
// for i in heikeVehicles do
7729: LD_ADDR_VAR 0 2
7733: PUSH
7734: LD_EXP 35
7738: PUSH
7739: FOR_IN
7740: IFFALSE 7939
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
7742: LD_INT 5
7744: PPUSH
7745: LD_VAR 0 2
7749: PUSH
7750: LD_INT 5
7752: ARRAY
7753: PPUSH
7754: LD_VAR 0 2
7758: PUSH
7759: LD_INT 1
7761: ARRAY
7762: PPUSH
7763: LD_VAR 0 2
7767: PUSH
7768: LD_INT 2
7770: ARRAY
7771: PPUSH
7772: LD_VAR 0 2
7776: PUSH
7777: LD_INT 3
7779: ARRAY
7780: PPUSH
7781: LD_VAR 0 2
7785: PUSH
7786: LD_INT 4
7788: ARRAY
7789: PPUSH
7790: LD_INT 34
7792: PPUSH
7793: CALL 427 0 7
// veh := CreateVehicle ;
7797: LD_ADDR_VAR 0 4
7801: PUSH
7802: CALL_OW 45
7806: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
7807: LD_VAR 0 2
7811: PUSH
7812: LD_INT 4
7814: ARRAY
7815: PUSH
7816: LD_INT 51
7818: PUSH
7819: LD_INT 32
7821: PUSH
7822: LD_INT 12
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: LIST
7829: IN
7830: IFFALSE 7910
// begin if i [ 7 ] [ 1 ] then
7832: LD_VAR 0 2
7836: PUSH
7837: LD_INT 7
7839: ARRAY
7840: PUSH
7841: LD_INT 1
7843: ARRAY
7844: IFFALSE 7871
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
7846: LD_VAR 0 4
7850: PPUSH
7851: LD_INT 1
7853: PPUSH
7854: LD_VAR 0 2
7858: PUSH
7859: LD_INT 7
7861: ARRAY
7862: PUSH
7863: LD_INT 1
7865: ARRAY
7866: PPUSH
7867: CALL_OW 291
// if i [ 7 ] [ 2 ] then
7871: LD_VAR 0 2
7875: PUSH
7876: LD_INT 7
7878: ARRAY
7879: PUSH
7880: LD_INT 2
7882: ARRAY
7883: IFFALSE 7910
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
7885: LD_VAR 0 4
7889: PPUSH
7890: LD_INT 2
7892: PPUSH
7893: LD_VAR 0 2
7897: PUSH
7898: LD_INT 7
7900: ARRAY
7901: PUSH
7902: LD_INT 2
7904: ARRAY
7905: PPUSH
7906: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
7910: LD_VAR 0 4
7914: PPUSH
7915: LD_INT 2
7917: PPUSH
7918: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
7922: LD_VAR 0 4
7926: PPUSH
7927: LD_INT 4
7929: PPUSH
7930: LD_INT 0
7932: PPUSH
7933: CALL_OW 49
// end ;
7937: GO 7739
7939: POP
7940: POP
// if tmp then
7941: LD_VAR 0 5
7945: IFFALSE 8000
// for i in tmp union heikeApes do
7947: LD_ADDR_VAR 0 2
7951: PUSH
7952: LD_VAR 0 5
7956: PUSH
7957: LD_EXP 36
7961: UNION
7962: PUSH
7963: FOR_IN
7964: IFFALSE 7998
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
7966: LD_VAR 0 2
7970: PPUSH
7971: LD_INT 5
7973: PPUSH
7974: LD_INT 0
7976: PPUSH
7977: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
7981: LD_VAR 0 2
7985: PPUSH
7986: LD_INT 26
7988: PPUSH
7989: LD_INT 9
7991: PPUSH
7992: CALL_OW 118
// end ;
7996: GO 7963
7998: POP
7999: POP
// if heikeSecondSquad then
8000: LD_EXP 34
8004: IFFALSE 8053
// for i in heikeSecondSquad do
8006: LD_ADDR_VAR 0 2
8010: PUSH
8011: LD_EXP 34
8015: PUSH
8016: FOR_IN
8017: IFFALSE 8051
// begin PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8019: LD_VAR 0 2
8023: PPUSH
8024: LD_INT 6
8026: PPUSH
8027: LD_INT 0
8029: PPUSH
8030: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8034: LD_VAR 0 2
8038: PPUSH
8039: LD_INT 26
8041: PPUSH
8042: LD_INT 9
8044: PPUSH
8045: CALL_OW 118
// end ;
8049: GO 8016
8051: POP
8052: POP
// if heikeApes then
8053: LD_EXP 36
8057: IFFALSE 8100
// for i in heikeApes do
8059: LD_ADDR_VAR 0 2
8063: PUSH
8064: LD_EXP 36
8068: PUSH
8069: FOR_IN
8070: IFFALSE 8098
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
8072: LD_VAR 0 2
8076: PPUSH
8077: LD_INT 7
8079: PPUSH
8080: LD_INT 0
8082: PPUSH
8083: CALL_OW 49
// ComHold ( i ) ;
8087: LD_VAR 0 2
8091: PPUSH
8092: CALL_OW 140
// end ;
8096: GO 8069
8098: POP
8099: POP
// if Kurt then
8100: LD_EXP 32
8104: IFFALSE 8136
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
8106: LD_EXP 32
8110: PPUSH
8111: LD_INT 8
8113: PPUSH
8114: LD_INT 0
8116: PPUSH
8117: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
8121: LD_EXP 32
8125: PPUSH
8126: LD_INT 42
8128: PPUSH
8129: LD_INT 32
8131: PPUSH
8132: CALL_OW 118
// end ; Say ( Heike , DH-Start-1 ) ;
8136: LD_EXP 21
8140: PPUSH
8141: LD_STRING DH-Start-1
8143: PPUSH
8144: CALL_OW 88
// if Givi then
8148: LD_EXP 22
8152: IFFALSE 8415
// begin Say ( Givi , DG-Start-2-5 ) ;
8154: LD_EXP 22
8158: PPUSH
8159: LD_STRING DG-Start-2-5
8161: PPUSH
8162: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
8166: LD_EXP 21
8170: PPUSH
8171: LD_STRING DH-Start-3
8173: PPUSH
8174: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8178: LD_EXP 21
8182: PPUSH
8183: LD_STRING DH-Start-4
8185: PPUSH
8186: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
8190: LD_EXP 22
8194: PPUSH
8195: LD_STRING DG-Start-5
8197: PPUSH
8198: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
8202: LD_EXP 21
8206: PPUSH
8207: LD_STRING DH-Start-6
8209: PPUSH
8210: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
8214: LD_EXP 22
8218: PPUSH
8219: LD_STRING DG-Start-7
8221: PPUSH
8222: CALL_OW 88
// if Mike then
8226: LD_EXP 23
8230: IFFALSE 8403
// begin Say ( Mike , DM-Start-8 ) ;
8232: LD_EXP 23
8236: PPUSH
8237: LD_STRING DM-Start-8
8239: PPUSH
8240: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
8244: LD_EXP 23
8248: PPUSH
8249: LD_STRING DM-Start-9
8251: PPUSH
8252: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
8256: LD_EXP 22
8260: PPUSH
8261: LD_STRING DG-Start-10
8263: PPUSH
8264: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
8268: LD_EXP 22
8272: PPUSH
8273: LD_STRING DG-Start-11
8275: PPUSH
8276: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
8280: LD_EXP 21
8284: PPUSH
8285: LD_STRING DH-Start-12
8287: PPUSH
8288: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
8292: LD_EXP 22
8296: PPUSH
8297: LD_STRING DG-Start-13
8299: PPUSH
8300: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
8304: LD_EXP 22
8308: PPUSH
8309: LD_STRING DG-Start-14
8311: PPUSH
8312: CALL_OW 88
// if Kaia then
8316: LD_EXP 26
8320: IFFALSE 8403
// begin Say ( Kaia , DK-Start-15 ) ;
8322: LD_EXP 26
8326: PPUSH
8327: LD_STRING DK-Start-15
8329: PPUSH
8330: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
8334: LD_EXP 26
8338: PPUSH
8339: LD_STRING DK-Start-16
8341: PPUSH
8342: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
8346: LD_EXP 26
8350: PPUSH
8351: LD_STRING DK-Start-17
8353: PPUSH
8354: CALL_OW 88
// wait ( 0 0$0.3 ) ;
8358: LD_INT 10
8360: PPUSH
8361: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
8365: LD_EXP 22
8369: PPUSH
8370: LD_EXP 26
8374: PPUSH
8375: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
8379: LD_EXP 22
8383: PPUSH
8384: LD_STRING DG-Start-18
8386: PPUSH
8387: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
8391: LD_EXP 26
8395: PPUSH
8396: LD_STRING DK-Start-19
8398: PPUSH
8399: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
8403: LD_EXP 21
8407: PPUSH
8408: LD_STRING DH-Start-20
8410: PPUSH
8411: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
8415: LD_INT 70
8417: PPUSH
8418: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
8422: LD_EXP 29
8426: PPUSH
8427: LD_STRING DShar-Start-21
8429: PPUSH
8430: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
8434: LD_EXP 21
8438: PPUSH
8439: LD_STRING DH-Start-22
8441: PPUSH
8442: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
8446: LD_EXP 29
8450: PPUSH
8451: LD_STRING DShar-Start-23
8453: PPUSH
8454: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
8458: LD_EXP 29
8462: PPUSH
8463: LD_STRING DShar-Start-24
8465: PPUSH
8466: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
8470: LD_EXP 29
8474: PPUSH
8475: LD_STRING DShar-Start-25
8477: PPUSH
8478: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
8482: LD_EXP 29
8486: PPUSH
8487: LD_STRING DShar-Start-26
8489: PPUSH
8490: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
8494: LD_EXP 21
8498: PPUSH
8499: LD_STRING DH-Start-27
8501: PPUSH
8502: CALL_OW 88
// if Kaia then
8506: LD_EXP 26
8510: IFFALSE 8552
// begin ComTurnUnit ( Heike , Kaia ) ;
8512: LD_EXP 21
8516: PPUSH
8517: LD_EXP 26
8521: PPUSH
8522: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
8526: LD_EXP 26
8530: PPUSH
8531: LD_STRING DK-Start-28
8533: PPUSH
8534: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
8538: LD_EXP 21
8542: PPUSH
8543: LD_STRING DH-Start-29
8545: PPUSH
8546: CALL_OW 88
// end else
8550: GO 8564
// Say ( Heike , DH-Start-a-28 ) ;
8552: LD_EXP 21
8556: PPUSH
8557: LD_STRING DH-Start-a-28
8559: PPUSH
8560: CALL_OW 88
// if Givi then
8564: LD_EXP 22
8568: IFFALSE 8803
// begin ComTurnUnit ( Heike , Givi ) ;
8570: LD_EXP 21
8574: PPUSH
8575: LD_EXP 22
8579: PPUSH
8580: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
8584: LD_EXP 22
8588: PPUSH
8589: LD_EXP 21
8593: PPUSH
8594: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
8598: LD_EXP 21
8602: PPUSH
8603: LD_STRING DH-Start-30
8605: PPUSH
8606: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
8610: LD_EXP 21
8614: PPUSH
8615: LD_STRING DH-Start-31
8617: PPUSH
8618: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
8622: LD_EXP 22
8626: PPUSH
8627: LD_STRING DG-Start-32
8629: PPUSH
8630: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
8634: LD_EXP 21
8638: PPUSH
8639: LD_STRING DH-Start-33
8641: PPUSH
8642: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
8646: LD_EXP 22
8650: PPUSH
8651: LD_STRING DG-Start-34
8653: PPUSH
8654: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
8658: LD_EXP 22
8662: PPUSH
8663: LD_STRING DG-Start-35
8665: PPUSH
8666: CALL_OW 88
// if Kurt and not dialogue_skipped then
8670: LD_EXP 32
8674: PUSH
8675: LD_OWVAR 59
8679: NOT
8680: AND
8681: IFFALSE 8712
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
8683: LD_EXP 32
8687: PPUSH
8688: LD_INT 28
8690: PPUSH
8691: LD_INT 13
8693: PPUSH
8694: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
8698: LD_EXP 32
8702: PPUSH
8703: LD_EXP 21
8707: PPUSH
8708: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
8712: LD_EXP 22
8716: PPUSH
8717: LD_STRING DG-Start-36
8719: PPUSH
8720: CALL_OW 88
// if Kurt then
8724: LD_EXP 32
8728: IFFALSE 8801
// begin if not Givi then
8730: LD_EXP 22
8734: NOT
8735: IFFALSE 8751
// Say ( Kurt , DKs-Start-37-a ) else
8737: LD_EXP 32
8741: PPUSH
8742: LD_STRING DKs-Start-37-a
8744: PPUSH
8745: CALL_OW 88
8749: GO 8763
// Say ( Kurt , DKs-Start-37 ) ;
8751: LD_EXP 32
8755: PPUSH
8756: LD_STRING DKs-Start-37
8758: PPUSH
8759: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
8763: LD_EXP 32
8767: PPUSH
8768: LD_STRING DKs-Start-38
8770: PPUSH
8771: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
8775: LD_EXP 21
8779: PPUSH
8780: LD_EXP 32
8784: PPUSH
8785: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
8789: LD_EXP 21
8793: PPUSH
8794: LD_STRING DH-Start-39
8796: PPUSH
8797: CALL_OW 88
// end ; end else
8801: GO 8832
// if SayRandom ( heikeSecondSquad , DArm-Start-a-37 , DArf-Start-a-37 ) then
8803: LD_EXP 34
8807: PPUSH
8808: LD_STRING DArm-Start-a-37
8810: PPUSH
8811: LD_STRING DArf-Start-a-37
8813: PPUSH
8814: CALL 1262 0 3
8818: IFFALSE 8832
// Say ( Heike , DH-Start-39 ) ;
8820: LD_EXP 21
8824: PPUSH
8825: LD_STRING DH-Start-39
8827: PPUSH
8828: CALL_OW 88
// if HexInfo ( 44 , 25 ) then
8832: LD_INT 44
8834: PPUSH
8835: LD_INT 25
8837: PPUSH
8838: CALL_OW 428
8842: IFFALSE 8859
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
8844: LD_INT 44
8846: PPUSH
8847: LD_INT 25
8849: PPUSH
8850: CALL_OW 428
8854: PPUSH
8855: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
8859: LD_EXP 30
8863: PPUSH
8864: LD_INT 5
8866: PPUSH
8867: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
8871: LD_EXP 30
8875: PPUSH
8876: LD_INT 44
8878: PPUSH
8879: LD_INT 25
8881: PPUSH
8882: LD_INT 0
8884: PPUSH
8885: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
8889: LD_EXP 30
8893: PPUSH
8894: LD_INT 29
8896: PPUSH
8897: LD_INT 12
8899: PPUSH
8900: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8904: LD_INT 35
8906: PPUSH
8907: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
8911: LD_OWVAR 59
8915: PUSH
8916: LD_EXP 21
8920: PPUSH
8921: LD_EXP 30
8925: PPUSH
8926: CALL_OW 296
8930: PUSH
8931: LD_INT 8
8933: LESS
8934: OR
8935: PUSH
8936: LD_EXP 30
8940: PPUSH
8941: LD_INT 26
8943: PPUSH
8944: LD_INT 9
8946: PPUSH
8947: CALL_OW 297
8951: PUSH
8952: LD_INT 6
8954: LESS
8955: OR
8956: IFFALSE 8904
// Say ( Olaf , DO-Scout-1 ) ;
8958: LD_EXP 30
8962: PPUSH
8963: LD_STRING DO-Scout-1
8965: PPUSH
8966: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
8970: LD_EXP 30
8974: PPUSH
8975: LD_EXP 21
8979: PPUSH
8980: CALL_OW 119
// for i in tmp union heikeSecondSquad do
8984: LD_ADDR_VAR 0 2
8988: PUSH
8989: LD_VAR 0 5
8993: PUSH
8994: LD_EXP 34
8998: UNION
8999: PUSH
9000: FOR_IN
9001: IFFALSE 9019
// ComTurnUnit ( i , Olaf ) ;
9003: LD_VAR 0 2
9007: PPUSH
9008: LD_EXP 30
9012: PPUSH
9013: CALL_OW 119
9017: GO 9000
9019: POP
9020: POP
// wait ( 0 0$0.3 ) ;
9021: LD_INT 10
9023: PPUSH
9024: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9028: LD_EXP 21
9032: PPUSH
9033: LD_EXP 30
9037: PPUSH
9038: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
9042: LD_EXP 21
9046: PPUSH
9047: LD_EXP 30
9051: PPUSH
9052: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
9056: LD_EXP 21
9060: PPUSH
9061: LD_STRING DH-Scout-2
9063: PPUSH
9064: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
9068: LD_EXP 30
9072: PPUSH
9073: LD_STRING DO-Scout-3
9075: PPUSH
9076: CALL_OW 88
// if Mike and Givi then
9080: LD_EXP 23
9084: PUSH
9085: LD_EXP 22
9089: AND
9090: IFFALSE 9106
// Say ( Olaf , DO-Scout-4 ) else
9092: LD_EXP 30
9096: PPUSH
9097: LD_STRING DO-Scout-4
9099: PPUSH
9100: CALL_OW 88
9104: GO 9206
// begin if Mike then
9106: LD_EXP 23
9110: IFFALSE 9138
// begin Say ( Olaf , DO-Scout-a-4 ) ;
9112: LD_EXP 30
9116: PPUSH
9117: LD_STRING DO-Scout-a-4
9119: PPUSH
9120: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
9124: LD_EXP 21
9128: PPUSH
9129: LD_STRING DH-Scout-a-5
9131: PPUSH
9132: CALL_OW 88
// end else
9136: GO 9206
// if Givi then
9138: LD_EXP 22
9142: IFFALSE 9170
// begin Say ( Olaf , DO-Scout-b-4 ) ;
9144: LD_EXP 30
9148: PPUSH
9149: LD_STRING DO-Scout-b-4
9151: PPUSH
9152: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
9156: LD_EXP 21
9160: PPUSH
9161: LD_STRING DH-Scout-b-5
9163: PPUSH
9164: CALL_OW 88
// end else
9168: GO 9206
// begin Say ( Olaf , DO-Scout-f-4 ) ;
9170: LD_EXP 30
9174: PPUSH
9175: LD_STRING DO-Scout-f-4
9177: PPUSH
9178: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
9182: LD_EXP 21
9186: PPUSH
9187: LD_STRING DH-Scout-f-5
9189: PPUSH
9190: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
9194: LD_EXP 30
9198: PPUSH
9199: LD_STRING DO-Scout-f-6
9201: PPUSH
9202: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
9206: LD_EXP 21
9210: PPUSH
9211: LD_STRING DH-Scout-5
9213: PPUSH
9214: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
9218: LD_EXP 30
9222: PPUSH
9223: LD_STRING DO-Scout-6
9225: PPUSH
9226: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
9230: LD_EXP 30
9234: PPUSH
9235: LD_STRING DO-Scout-7
9237: PPUSH
9238: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
9242: LD_EXP 21
9246: PPUSH
9247: LD_STRING DH-Scout-8
9249: PPUSH
9250: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
9254: LD_EXP 21
9258: PPUSH
9259: LD_STRING DH-Scout-9
9261: PPUSH
9262: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
9266: LD_EXP 30
9270: PPUSH
9271: LD_STRING DO-Scout-10
9273: PPUSH
9274: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
9278: LD_EXP 30
9282: PPUSH
9283: LD_STRING DO-Scout-12
9285: PPUSH
9286: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
9290: LD_EXP 30
9294: PPUSH
9295: LD_STRING DO-Scout-13
9297: PPUSH
9298: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
9302: LD_EXP 30
9306: PPUSH
9307: LD_STRING DO-Scout-14
9309: PPUSH
9310: CALL_OW 88
// if Givi then
9314: LD_EXP 22
9318: IFFALSE 9344
// begin Say ( Givi , DG-Scout-15 ) ;
9320: LD_EXP 22
9324: PPUSH
9325: LD_STRING DG-Scout-15
9327: PPUSH
9328: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
9332: LD_EXP 26
9336: PPUSH
9337: LD_STRING DK-Scout-16
9339: PPUSH
9340: CALL_OW 88
// end ; if not dialogue_skipped then
9344: LD_OWVAR 59
9348: NOT
9349: IFFALSE 9468
// begin async ;
9351: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
9352: LD_EXP 30
9356: PPUSH
9357: LD_STRING DO-Scout-17
9359: PPUSH
9360: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
9364: LD_INT 55
9366: PPUSH
9367: LD_INT 77
9369: PPUSH
9370: LD_INT 2
9372: PPUSH
9373: LD_INT 6
9375: NEG
9376: PPUSH
9377: CALL 1211 0 4
// wait ( 10 ) ;
9381: LD_INT 10
9383: PPUSH
9384: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
9388: LD_INT 55
9390: PPUSH
9391: LD_INT 77
9393: PPUSH
9394: CALL_OW 84
// wait ( 0 0$5 ) ;
9398: LD_INT 175
9400: PPUSH
9401: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
9405: LD_EXP 30
9409: PPUSH
9410: LD_STRING DO-Scout-18
9412: PPUSH
9413: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
9417: LD_INT 204
9419: PPUSH
9420: LD_INT 107
9422: PPUSH
9423: LD_INT 2
9425: PPUSH
9426: LD_INT 12
9428: NEG
9429: PPUSH
9430: CALL 1211 0 4
// wait ( 10 ) ;
9434: LD_INT 10
9436: PPUSH
9437: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
9441: LD_INT 204
9443: PPUSH
9444: LD_INT 107
9446: PPUSH
9447: CALL_OW 84
// wait ( 0 0$5 ) ;
9451: LD_INT 175
9453: PPUSH
9454: CALL_OW 67
// sync ;
9458: SYNC
// CenterNowOnUnits ( Heike ) ;
9459: LD_EXP 21
9463: PPUSH
9464: CALL_OW 87
// end ; Say ( Olaf , DO-Scout-19 ) ;
9468: LD_EXP 30
9472: PPUSH
9473: LD_STRING DO-Scout-19
9475: PPUSH
9476: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
9480: LD_EXP 30
9484: PPUSH
9485: LD_STRING DO-Scout-20
9487: PPUSH
9488: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
9492: LD_EXP 21
9496: PPUSH
9497: LD_STRING DH-Scout-21
9499: PPUSH
9500: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
9504: LD_EXP 21
9508: PPUSH
9509: LD_STRING DH-Scout-22
9511: PPUSH
9512: CALL_OW 88
// InGameOff ;
9516: CALL_OW 9
// if Givi then
9520: LD_EXP 22
9524: IFFALSE 9539
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
9526: LD_INT 13
9528: PPUSH
9529: LD_INT 2
9531: PPUSH
9532: LD_INT 1
9534: PPUSH
9535: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
9539: LD_STRING Road
9541: PPUSH
9542: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
9546: LD_ADDR_VAR 0 2
9550: PUSH
9551: LD_INT 22
9553: PUSH
9554: LD_INT 5
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: PUSH
9561: LD_INT 21
9563: PUSH
9564: LD_INT 2
9566: PUSH
9567: EMPTY
9568: LIST
9569: LIST
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: PPUSH
9575: CALL_OW 69
9579: PUSH
9580: FOR_IN
9581: IFFALSE 9597
// SetSide ( i , 2 ) ;
9583: LD_VAR 0 2
9587: PPUSH
9588: LD_INT 2
9590: PPUSH
9591: CALL_OW 235
9595: GO 9580
9597: POP
9598: POP
// SaveForQuickRestart ;
9599: CALL_OW 22
// end ;
9603: LD_VAR 0 1
9607: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
9608: LD_INT 2
9610: PPUSH
9611: LD_INT 9
9613: PPUSH
9614: CALL_OW 294
9618: IFFALSE 9985
9620: GO 9622
9622: DISABLE
// begin DialogueOn ;
9623: CALL_OW 6
// PlaceSeeing ( 111 , 72 , 2 , - 20 ) ;
9627: LD_INT 111
9629: PPUSH
9630: LD_INT 72
9632: PPUSH
9633: LD_INT 2
9635: PPUSH
9636: LD_INT 20
9638: NEG
9639: PPUSH
9640: CALL_OW 330
// RemoveSeeing ( 111 , 72 , 2 ) ;
9644: LD_INT 111
9646: PPUSH
9647: LD_INT 72
9649: PPUSH
9650: LD_INT 2
9652: PPUSH
9653: CALL_OW 331
// CenterNowOnXY ( 111 , 72 ) ;
9657: LD_INT 111
9659: PPUSH
9660: LD_INT 72
9662: PPUSH
9663: CALL_OW 86
// if IsOk ( Kamil ) then
9667: LD_EXP 25
9671: PPUSH
9672: CALL_OW 302
9676: IFFALSE 9793
// begin Say ( Kamil , DKam-Cross-1 ) ;
9678: LD_EXP 25
9682: PPUSH
9683: LD_STRING DKam-Cross-1
9685: PPUSH
9686: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
9690: LD_EXP 25
9694: PPUSH
9695: LD_STRING DKam-Cross-2
9697: PPUSH
9698: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
9702: LD_EXP 25
9706: PPUSH
9707: LD_STRING DKam-Cross-3
9709: PPUSH
9710: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
9714: LD_EXP 25
9718: PPUSH
9719: LD_STRING DKam-Cross-4
9721: PPUSH
9722: CALL_OW 88
// if IsOk ( Ibrahim ) then
9726: LD_EXP 24
9730: PPUSH
9731: CALL_OW 302
9735: IFFALSE 9791
// begin if ibrahimJoinedIn04 then
9737: LD_EXP 4
9741: IFFALSE 9755
// Say ( Ibrahim , DI-Cross-b-5 ) ;
9743: LD_EXP 24
9747: PPUSH
9748: LD_STRING DI-Cross-b-5
9750: PPUSH
9751: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
9755: LD_EXP 24
9759: PPUSH
9760: LD_STRING DI-Cross-b-6
9762: PPUSH
9763: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
9767: LD_EXP 24
9771: PPUSH
9772: LD_STRING DI-Cross-b-7
9774: PPUSH
9775: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
9779: LD_EXP 25
9783: PPUSH
9784: LD_STRING DKam-Cross-8
9786: PPUSH
9787: CALL_OW 88
// end ; end else
9791: GO 9951
// if IsOk ( Sophia ) then
9793: LD_EXP 27
9797: PPUSH
9798: CALL_OW 302
9802: IFFALSE 9919
// begin Say ( Sophia , DS-Cross-1 ) ;
9804: LD_EXP 27
9808: PPUSH
9809: LD_STRING DS-Cross-1
9811: PPUSH
9812: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
9816: LD_EXP 27
9820: PPUSH
9821: LD_STRING DS-Cross-2
9823: PPUSH
9824: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
9828: LD_EXP 27
9832: PPUSH
9833: LD_STRING DS-Cross-3
9835: PPUSH
9836: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
9840: LD_EXP 27
9844: PPUSH
9845: LD_STRING DS-Cross-4
9847: PPUSH
9848: CALL_OW 88
// if IsOk ( Ibrahim ) then
9852: LD_EXP 24
9856: PPUSH
9857: CALL_OW 302
9861: IFFALSE 9917
// begin if ibrahimJoinedIn04 then
9863: LD_EXP 4
9867: IFFALSE 9881
// Say ( Ibrahim , DI-Cross-b-5 ) ;
9869: LD_EXP 24
9873: PPUSH
9874: LD_STRING DI-Cross-b-5
9876: PPUSH
9877: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
9881: LD_EXP 24
9885: PPUSH
9886: LD_STRING DI-Cross-b-6
9888: PPUSH
9889: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
9893: LD_EXP 24
9897: PPUSH
9898: LD_STRING DI-Cross-b-7
9900: PPUSH
9901: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
9905: LD_EXP 27
9909: PPUSH
9910: LD_STRING DS-Cross-8
9912: PPUSH
9913: CALL_OW 88
// end ; end else
9917: GO 9951
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
9919: LD_EXP 34
9923: PPUSH
9924: LD_INT 50
9926: PUSH
9927: EMPTY
9928: LIST
9929: PPUSH
9930: CALL_OW 72
9934: IFFALSE 9951
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
9936: LD_EXP 34
9940: PPUSH
9941: LD_STRING DArm-Cross-c-1
9943: PPUSH
9944: LD_STRING DArf-Cross-c-1
9946: PPUSH
9947: CALL 1262 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
9951: LD_EXP 56
9955: PPUSH
9956: LD_INT 2
9958: PPUSH
9959: LD_INT 1
9961: PPUSH
9962: CALL_OW 322
// DialogueOff ;
9966: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
9970: LD_STRING Crane
9972: PPUSH
9973: CALL_OW 337
// spottedCrossRoad := true ;
9977: LD_ADDR_EXP 8
9981: PUSH
9982: LD_INT 1
9984: ST_TO_ADDR
// end ;
9985: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
9986: LD_INT 22
9988: PUSH
9989: LD_INT 2
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: PUSH
9996: LD_INT 2
9998: PUSH
9999: LD_INT 30
10001: PUSH
10002: LD_INT 0
10004: PUSH
10005: EMPTY
10006: LIST
10007: LIST
10008: PUSH
10009: LD_INT 30
10011: PUSH
10012: LD_INT 1
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: LIST
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: PPUSH
10028: CALL_OW 69
10032: PUSH
10033: LD_EXP 26
10037: PPUSH
10038: CALL_OW 302
10042: PUSH
10043: LD_EXP 34
10047: OR
10048: AND
10049: IFFALSE 10261
10051: GO 10053
10053: DISABLE
// begin DialogueOn ;
10054: CALL_OW 6
// if Kaia then
10058: LD_EXP 26
10062: IFFALSE 10075
// CenterNowOnUnits ( Kaia ) else
10064: LD_EXP 26
10068: PPUSH
10069: CALL_OW 87
10073: GO 10084
// CenterNowOnUnits ( Heike ) ;
10075: LD_EXP 21
10079: PPUSH
10080: CALL_OW 87
// if IsOk ( Kaia ) then
10084: LD_EXP 26
10088: PPUSH
10089: CALL_OW 302
10093: IFFALSE 10109
// Say ( Kaia , DK-Cam-1 ) else
10095: LD_EXP 26
10099: PPUSH
10100: LD_STRING DK-Cam-1
10102: PPUSH
10103: CALL_OW 88
10107: GO 10124
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
10109: LD_EXP 34
10113: PPUSH
10114: LD_STRING DArm-Cam-1
10116: PPUSH
10117: LD_STRING DArf-Cam-1
10119: PPUSH
10120: CALL 1262 0 3
// Say ( Heike , DH-Cam-2 ) ;
10124: LD_EXP 21
10128: PPUSH
10129: LD_STRING DH-Cam-2
10131: PPUSH
10132: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
10136: LD_EXP 21
10140: PPUSH
10141: LD_STRING DH-Cam-3
10143: PPUSH
10144: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10148: LD_EXP 21
10152: PPUSH
10153: LD_STRING DH-Cam-4
10155: PPUSH
10156: CALL_OW 88
// if IsOk ( Kaia ) then
10160: LD_EXP 26
10164: PPUSH
10165: CALL_OW 302
10169: IFFALSE 10185
// Say ( Kaia , DK-Cam-5 ) else
10171: LD_EXP 26
10175: PPUSH
10176: LD_STRING DK-Cam-5
10178: PPUSH
10179: CALL_OW 88
10183: GO 10200
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
10185: LD_EXP 34
10189: PPUSH
10190: LD_STRING DArm-Cam-5
10192: PPUSH
10193: LD_STRING DArf-Cam-5
10195: PPUSH
10196: CALL 1262 0 3
// Say ( Olaf , DO-Cam-6 ) ;
10200: LD_EXP 30
10204: PPUSH
10205: LD_STRING DO-Cam-6
10207: PPUSH
10208: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
10212: LD_EXP 30
10216: PPUSH
10217: LD_STRING DO-Cam-7
10219: PPUSH
10220: CALL_OW 88
// DialogueOff ;
10224: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
10228: LD_STRING Radar
10230: PPUSH
10231: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
10235: LD_INT 6
10237: PPUSH
10238: LD_INT 2
10240: PPUSH
10241: LD_INT 1
10243: PPUSH
10244: CALL_OW 322
// SetRestrict ( b_ext_radar , 2 , true ) ;
10248: LD_INT 20
10250: PPUSH
10251: LD_INT 2
10253: PPUSH
10254: LD_INT 1
10256: PPUSH
10257: CALL_OW 324
// end ;
10261: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ] ) do
10262: LD_INT 22
10264: PUSH
10265: LD_INT 2
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: PUSH
10272: LD_INT 2
10274: PUSH
10275: LD_INT 34
10277: PUSH
10278: LD_INT 30
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: PUSH
10285: LD_INT 35
10287: PUSH
10288: LD_INT 30
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: LIST
10299: PUSH
10300: EMPTY
10301: LIST
10302: LIST
10303: PPUSH
10304: CALL_OW 69
10308: IFFALSE 10320
10310: GO 10312
10312: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
10313: LD_STRING RadarDone
10315: PPUSH
10316: CALL_OW 337
10320: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_crane ] ] ) do
10321: LD_INT 22
10323: PUSH
10324: LD_INT 2
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PUSH
10331: LD_INT 34
10333: PUSH
10334: LD_EXP 50
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PPUSH
10347: CALL_OW 69
10351: IFFALSE 10363
10353: GO 10355
10355: DISABLE
// ChangeMissionObjectives ( CraneDone ) ;
10356: LD_STRING CraneDone
10358: PPUSH
10359: CALL_OW 337
10363: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
10364: LD_EXP 30
10368: PPUSH
10369: CALL_OW 302
10373: PUSH
10374: LD_EXP 33
10378: PPUSH
10379: CALL_OW 302
10383: AND
10384: PUSH
10385: LD_INT 6
10387: PPUSH
10388: LD_INT 2
10390: PPUSH
10391: CALL_OW 321
10395: PUSH
10396: LD_INT 2
10398: EQUAL
10399: AND
10400: PUSH
10401: LD_EXP 33
10405: PPUSH
10406: LD_EXP 21
10410: PPUSH
10411: CALL_OW 296
10415: PUSH
10416: LD_INT 10
10418: LESS
10419: PUSH
10420: LD_EXP 33
10424: PPUSH
10425: CALL_OW 310
10429: OR
10430: AND
10431: IFFALSE 10645
10433: GO 10435
10435: DISABLE
// begin DialogueOn ;
10436: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
10440: LD_EXP 33
10444: PPUSH
10445: LD_STRING DA-RC-1
10447: PPUSH
10448: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
10452: LD_EXP 33
10456: PPUSH
10457: LD_STRING DA-RC-2
10459: PPUSH
10460: CALL_OW 88
// if IsOk ( Kaia ) then
10464: LD_EXP 26
10468: PPUSH
10469: CALL_OW 302
10473: IFFALSE 10547
// begin Say ( Kaia , DK-RC-3 ) ;
10475: LD_EXP 26
10479: PPUSH
10480: LD_STRING DK-RC-3
10482: PPUSH
10483: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
10487: LD_EXP 33
10491: PPUSH
10492: LD_STRING DA-RC-4
10494: PPUSH
10495: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
10499: LD_EXP 26
10503: PPUSH
10504: LD_STRING DK-RC-5
10506: PPUSH
10507: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
10511: LD_EXP 33
10515: PPUSH
10516: LD_STRING DA-RC-6
10518: PPUSH
10519: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
10523: LD_EXP 26
10527: PPUSH
10528: LD_STRING DK-RC-7
10530: PPUSH
10531: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
10535: LD_EXP 33
10539: PPUSH
10540: LD_STRING DA-RC-8
10542: PPUSH
10543: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
10547: LD_EXP 21
10551: PPUSH
10552: LD_STRING DH-RC-9
10554: PPUSH
10555: CALL_OW 88
// if IsOk ( Markov ) then
10559: LD_EXP 28
10563: PPUSH
10564: CALL_OW 302
10568: IFFALSE 10596
// begin Say ( Markov , DMar-RC-10 ) ;
10570: LD_EXP 28
10574: PPUSH
10575: LD_STRING DMar-RC-10
10577: PPUSH
10578: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
10582: LD_EXP 28
10586: PPUSH
10587: LD_STRING DMar-RC-11
10589: PPUSH
10590: CALL_OW 88
// end else
10594: GO 10608
// begin Say ( Olaf , DO-RC-a-10 ) ;
10596: LD_EXP 30
10600: PPUSH
10601: LD_STRING DO-RC-a-10
10603: PPUSH
10604: CALL_OW 88
// end ; DialogueOff ;
10608: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
10612: LD_STRING RemoteControl
10614: PPUSH
10615: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
10619: LD_INT 15
10621: PPUSH
10622: LD_INT 2
10624: PPUSH
10625: LD_INT 1
10627: PPUSH
10628: CALL_OW 322
// SetRestrict ( b_ext_radio , 2 , true ) ;
10632: LD_INT 22
10634: PPUSH
10635: LD_INT 2
10637: PPUSH
10638: LD_INT 1
10640: PPUSH
10641: CALL_OW 324
// end ;
10645: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
10646: LD_INT 12
10648: PPUSH
10649: LD_INT 22
10651: PUSH
10652: LD_INT 2
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: PPUSH
10659: CALL_OW 70
10663: IFFALSE 11030
10665: GO 10667
10667: DISABLE
10668: LD_INT 0
10670: PPUSH
// begin PrepareWestBase ;
10671: CALL 3902 0 0
// westBaseSpotted := true ;
10675: LD_ADDR_EXP 5
10679: PUSH
10680: LD_INT 1
10682: ST_TO_ADDR
// wait ( 0 0$2 ) ;
10683: LD_INT 70
10685: PPUSH
10686: CALL_OW 67
// InGameOn ;
10690: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
10694: LD_INT 56
10696: PPUSH
10697: LD_INT 77
10699: PPUSH
10700: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
10704: LD_INT 56
10706: PPUSH
10707: LD_INT 77
10709: PPUSH
10710: LD_INT 2
10712: PPUSH
10713: LD_INT 12
10715: NEG
10716: PPUSH
10717: CALL_OW 330
// wait ( 0 0$2 ) ;
10721: LD_INT 70
10723: PPUSH
10724: CALL_OW 67
// DialogueOn ;
10728: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
10732: LD_EXP 21
10736: PPUSH
10737: LD_STRING DH-Rbase-1
10739: PPUSH
10740: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
10744: LD_EXP 26
10748: PPUSH
10749: LD_STRING DK-Rbase-2
10751: PPUSH
10752: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
10756: LD_EXP 26
10760: PPUSH
10761: LD_STRING DK-Rbase-3
10763: PPUSH
10764: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
10768: LD_EXP 26
10772: PPUSH
10773: LD_STRING DK-Rbase-4
10775: PPUSH
10776: CALL_OW 88
// DialogueOff ;
10780: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
10784: LD_INT 56
10786: PPUSH
10787: LD_INT 77
10789: PPUSH
10790: LD_INT 2
10792: PPUSH
10793: CALL_OW 331
// InGameOff ;
10797: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
10801: LD_INT 35
10803: PPUSH
10804: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
10808: LD_EXP 42
10812: NOT
10813: PUSH
10814: LD_EXP 43
10818: NOT
10819: AND
10820: IFFALSE 10801
// wait ( 0 0$2 ) ;
10822: LD_INT 70
10824: PPUSH
10825: CALL_OW 67
// if IsOk ( Kaia ) then
10829: LD_EXP 26
10833: PPUSH
10834: CALL_OW 302
10838: IFFALSE 10953
// begin DialogueOn ;
10840: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
10844: LD_INT 56
10846: PPUSH
10847: LD_INT 81
10849: PPUSH
10850: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
10854: LD_EXP 26
10858: PPUSH
10859: LD_STRING DK-Rbase-5
10861: PPUSH
10862: CALL_OW 88
// if IsOk ( Givi ) then
10866: LD_EXP 22
10870: PPUSH
10871: CALL_OW 302
10875: IFFALSE 10949
// begin Say ( Givi , DG-Rbase-6 ) ;
10877: LD_EXP 22
10881: PPUSH
10882: LD_STRING DG-Rbase-6
10884: PPUSH
10885: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
10889: LD_EXP 22
10893: PPUSH
10894: LD_STRING DG-Rbase-7
10896: PPUSH
10897: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
10901: LD_EXP 26
10905: PPUSH
10906: LD_STRING DK-Rbase-8
10908: PPUSH
10909: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
10913: LD_EXP 22
10917: PPUSH
10918: LD_STRING DG-Rbase-9
10920: PPUSH
10921: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
10925: LD_EXP 22
10929: PPUSH
10930: LD_STRING DG-Rbase-10
10932: PPUSH
10933: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
10937: LD_EXP 26
10941: PPUSH
10942: LD_STRING DK-Rbase-11
10944: PPUSH
10945: CALL_OW 88
// end ; DialogueOff ;
10949: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
10953: LD_ADDR_VAR 0 1
10957: PUSH
10958: LD_INT 12
10960: PPUSH
10961: LD_INT 22
10963: PUSH
10964: LD_INT 3
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 21
10973: PUSH
10974: LD_INT 3
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: PPUSH
10985: CALL_OW 70
10989: PUSH
10990: FOR_IN
10991: IFFALSE 11007
// SetSide ( i , 2 ) ;
10993: LD_VAR 0 1
10997: PPUSH
10998: LD_INT 2
11000: PPUSH
11001: CALL_OW 235
11005: GO 10990
11007: POP
11008: POP
// westBaseCaptured := true ;
11009: LD_ADDR_EXP 9
11013: PUSH
11014: LD_INT 1
11016: ST_TO_ADDR
// SetRestrict ( b_depot , 2 , true ) ;
11017: LD_INT 0
11019: PPUSH
11020: LD_INT 2
11022: PPUSH
11023: LD_INT 1
11025: PPUSH
11026: CALL_OW 324
// end ;
11030: PPOPN 1
11032: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
11033: LD_EXP 38
11037: NOT
11038: PUSH
11039: LD_INT 10
11041: PPUSH
11042: CALL_OW 255
11046: PUSH
11047: LD_INT 2
11049: EQUAL
11050: OR
11051: IFFALSE 11188
11053: GO 11055
11055: DISABLE
// begin DialogueOn ;
11056: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
11060: LD_EXP 21
11064: PPUSH
11065: LD_STRING DH-Goal-1
11067: PPUSH
11068: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
11072: LD_EXP 29
11076: PPUSH
11077: LD_STRING DShar-Goal-2
11079: PPUSH
11080: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
11084: LD_EXP 21
11088: PPUSH
11089: LD_STRING DH-Goal-3
11091: PPUSH
11092: CALL_OW 88
// if reinforcementsAllowed then
11096: LD_EXP 14
11100: IFFALSE 11126
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
11102: LD_EXP 29
11106: PPUSH
11107: LD_STRING DShar-Goal-4
11109: PPUSH
11110: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
11114: LD_EXP 21
11118: PPUSH
11119: LD_STRING DH-Goal-5
11121: PPUSH
11122: CALL_OW 88
// end ; DialogueOff ;
11126: CALL_OW 7
// eastBaseCaptured := true ;
11130: LD_ADDR_EXP 10
11134: PUSH
11135: LD_INT 1
11137: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
11138: LD_STRING BaseCaptured
11140: PPUSH
11141: CALL_OW 337
// SetSide ( ruEastBase , 2 ) ;
11145: LD_INT 10
11147: PPUSH
11148: LD_INT 2
11150: PPUSH
11151: CALL_OW 235
// if not reinforcementsAllowed then
11155: LD_EXP 14
11159: NOT
11160: IFFALSE 11164
// exit ;
11162: GO 11188
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
11164: LD_INT 21000
11166: PUSH
11167: LD_INT 1050
11169: NEG
11170: PPUSH
11171: LD_INT 1050
11173: PPUSH
11174: CALL_OW 12
11178: PLUS
11179: PPUSH
11180: CALL_OW 67
// PrepareReinforcements ;
11184: CALL 2230 0 0
// end ;
11188: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
11189: LD_INT 22
11191: PUSH
11192: LD_INT 2
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: PUSH
11199: LD_INT 30
11201: PUSH
11202: LD_INT 13
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PPUSH
11213: CALL_OW 69
11217: IFFALSE 11234
11219: GO 11221
11221: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
11222: LD_EXP 22
11226: PPUSH
11227: LD_STRING DG-Lab-1
11229: PPUSH
11230: CALL_OW 88
// end ;
11234: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched and IsOk ( Givi ) do
11235: LD_INT 5
11237: PPUSH
11238: LD_INT 2
11240: PPUSH
11241: CALL_OW 321
11245: PUSH
11246: LD_INT 2
11248: EQUAL
11249: PUSH
11250: LD_EXP 22
11254: PPUSH
11255: CALL_OW 302
11259: AND
11260: IFFALSE 11321
11262: GO 11264
11264: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
11265: LD_EXP 22
11269: PPUSH
11270: LD_STRING DG-Stim-1
11272: PPUSH
11273: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
11277: LD_EXP 21
11281: PPUSH
11282: LD_STRING DH-Stim-2
11284: PPUSH
11285: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
11289: LD_EXP 22
11293: PPUSH
11294: LD_STRING DG-Stim-3
11296: PPUSH
11297: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
11301: LD_EXP 21
11305: PPUSH
11306: LD_STRING DH-Stim-4
11308: PPUSH
11309: CALL_OW 88
// drugsResearched := true ;
11313: LD_ADDR_EXP 11
11317: PUSH
11318: LD_INT 1
11320: ST_TO_ADDR
// end ;
11321: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
11322: LD_EXP 11
11326: IFFALSE 11638
11328: GO 11330
11330: DISABLE
11331: LD_INT 0
11333: PPUSH
11334: PPUSH
11335: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
11336: LD_ADDR_VAR 0 2
11340: PUSH
11341: LD_EXP 21
11345: PUSH
11346: LD_EXP 22
11350: PUSH
11351: LD_EXP 30
11355: PUSH
11356: LD_EXP 28
11360: PUSH
11361: LD_EXP 26
11365: PUSH
11366: LD_EXP 27
11370: PUSH
11371: LD_EXP 32
11375: PUSH
11376: LD_EXP 25
11380: PUSH
11381: LD_EXP 23
11385: PUSH
11386: LD_EXP 24
11390: PUSH
11391: LD_EXP 33
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
11409: LD_ADDR_VAR 0 3
11413: PUSH
11414: LD_STRING H
11416: PUSH
11417: LD_STRING G
11419: PUSH
11420: LD_STRING O
11422: PUSH
11423: LD_STRING Mar
11425: PUSH
11426: LD_STRING K
11428: PUSH
11429: LD_STRING S
11431: PUSH
11432: LD_STRING Ks
11434: PUSH
11435: LD_STRING Kam
11437: PUSH
11438: LD_STRING M
11440: PUSH
11441: LD_STRING I
11443: PUSH
11444: LD_STRING A
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11460: LD_INT 35
11462: PPUSH
11463: CALL_OW 67
// for i := tmp downto 1 do
11467: LD_ADDR_VAR 0 1
11471: PUSH
11472: DOUBLE
11473: LD_VAR 0 2
11477: INC
11478: ST_TO_ADDR
11479: LD_INT 1
11481: PUSH
11482: FOR_DOWNTO
11483: IFFALSE 11629
// if GetLives ( tmp [ i ] ) < 250 then
11485: LD_VAR 0 2
11489: PUSH
11490: LD_VAR 0 1
11494: ARRAY
11495: PPUSH
11496: CALL_OW 256
11500: PUSH
11501: LD_INT 250
11503: LESS
11504: IFFALSE 11627
// begin stimDrugsCounter := stimDrugsCounter + 1 ;
11506: LD_ADDR_EXP 19
11510: PUSH
11511: LD_EXP 19
11515: PUSH
11516: LD_INT 1
11518: PLUS
11519: ST_TO_ADDR
// DialogueOn ;
11520: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
11524: LD_VAR 0 2
11528: PUSH
11529: LD_VAR 0 1
11533: ARRAY
11534: PPUSH
11535: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
11539: LD_VAR 0 2
11543: PUSH
11544: LD_VAR 0 1
11548: ARRAY
11549: PPUSH
11550: LD_STRING D
11552: PUSH
11553: LD_VAR 0 3
11557: PUSH
11558: LD_VAR 0 1
11562: ARRAY
11563: STR
11564: PUSH
11565: LD_STRING -Stim-a-1
11567: STR
11568: PPUSH
11569: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
11573: LD_ADDR_VAR 0 2
11577: PUSH
11578: LD_VAR 0 2
11582: PPUSH
11583: LD_VAR 0 1
11587: PPUSH
11588: CALL_OW 3
11592: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
11593: LD_ADDR_VAR 0 3
11597: PUSH
11598: LD_VAR 0 3
11602: PPUSH
11603: LD_VAR 0 1
11607: PPUSH
11608: CALL_OW 3
11612: ST_TO_ADDR
// drugsTested := true ;
11613: LD_ADDR_EXP 6
11617: PUSH
11618: LD_INT 1
11620: ST_TO_ADDR
// DialogueOff ;
11621: CALL_OW 7
// break ;
11625: GO 11629
// end ;
11627: GO 11482
11629: POP
11630: POP
// until not tmp ;
11631: LD_VAR 0 2
11635: NOT
11636: IFFALSE 11460
// end ;
11638: PPOPN 3
11640: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) do
11641: LD_INT 22
11643: PUSH
11644: LD_INT 2
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 34
11653: PUSH
11654: LD_INT 31
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PPUSH
11665: CALL_OW 69
11669: PUSH
11670: LD_INT 22
11672: PUSH
11673: LD_INT 2
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PUSH
11680: LD_INT 33
11682: PUSH
11683: LD_INT 2
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: PPUSH
11694: CALL_OW 69
11698: AND
11699: IFFALSE 11712
11701: GO 11703
11703: DISABLE
// remoteControlConstructed := true ;
11704: LD_ADDR_EXP 12
11708: PUSH
11709: LD_INT 1
11711: ST_TO_ADDR
11712: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
11713: LD_EXP 12
11717: IFFALSE 12017
11719: GO 11721
11721: DISABLE
11722: LD_INT 0
11724: PPUSH
11725: PPUSH
11726: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
11727: LD_ADDR_VAR 0 2
11731: PUSH
11732: LD_EXP 21
11736: PUSH
11737: LD_EXP 22
11741: PUSH
11742: LD_EXP 30
11746: PUSH
11747: LD_EXP 28
11751: PUSH
11752: LD_EXP 26
11756: PUSH
11757: LD_EXP 27
11761: PUSH
11762: LD_EXP 32
11766: PUSH
11767: LD_EXP 25
11771: PUSH
11772: LD_EXP 23
11776: PUSH
11777: LD_EXP 24
11781: PUSH
11782: LD_EXP 33
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
11800: LD_ADDR_VAR 0 3
11804: PUSH
11805: LD_STRING H
11807: PUSH
11808: LD_STRING G
11810: PUSH
11811: LD_STRING O
11813: PUSH
11814: LD_STRING Mar
11816: PUSH
11817: LD_STRING K
11819: PUSH
11820: LD_STRING S
11822: PUSH
11823: LD_STRING Ks
11825: PUSH
11826: LD_STRING Kam
11828: PUSH
11829: LD_STRING M
11831: PUSH
11832: LD_STRING I
11834: PUSH
11835: LD_STRING A
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11851: LD_INT 35
11853: PPUSH
11854: CALL_OW 67
// for i := tmp downto 1 do
11858: LD_ADDR_VAR 0 1
11862: PUSH
11863: DOUBLE
11864: LD_VAR 0 2
11868: INC
11869: ST_TO_ADDR
11870: LD_INT 1
11872: PUSH
11873: FOR_DOWNTO
11874: IFFALSE 12008
// if GetClass ( tmp [ i ] ) = 3 and UnitsLinked ( tmp [ i ] ) then
11876: LD_VAR 0 2
11880: PUSH
11881: LD_VAR 0 1
11885: ARRAY
11886: PPUSH
11887: CALL_OW 257
11891: PUSH
11892: LD_INT 3
11894: EQUAL
11895: PUSH
11896: LD_VAR 0 2
11900: PUSH
11901: LD_VAR 0 1
11905: ARRAY
11906: PPUSH
11907: CALL_OW 432
11911: AND
11912: IFFALSE 12006
// begin DialogueOn ;
11914: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
11918: LD_VAR 0 2
11922: PUSH
11923: LD_VAR 0 1
11927: ARRAY
11928: PPUSH
11929: LD_STRING D
11931: PUSH
11932: LD_VAR 0 3
11936: PUSH
11937: LD_VAR 0 1
11941: ARRAY
11942: STR
11943: PUSH
11944: LD_STRING -RC-a-1
11946: STR
11947: PPUSH
11948: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
11952: LD_ADDR_VAR 0 2
11956: PUSH
11957: LD_VAR 0 2
11961: PPUSH
11962: LD_VAR 0 1
11966: PPUSH
11967: CALL_OW 3
11971: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
11972: LD_ADDR_VAR 0 3
11976: PUSH
11977: LD_VAR 0 3
11981: PPUSH
11982: LD_VAR 0 1
11986: PPUSH
11987: CALL_OW 3
11991: ST_TO_ADDR
// DialogueOff ;
11992: CALL_OW 7
// remoteControlTested := true ;
11996: LD_ADDR_EXP 7
12000: PUSH
12001: LD_INT 1
12003: ST_TO_ADDR
// break ;
12004: GO 12008
// end ;
12006: GO 11873
12008: POP
12009: POP
// until not tmp ;
12010: LD_VAR 0 2
12014: NOT
12015: IFFALSE 11851
// end ;
12017: PPOPN 3
12019: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) do
12020: LD_EXP 7
12024: PUSH
12025: LD_EXP 28
12029: PPUSH
12030: CALL_OW 302
12034: AND
12035: IFFALSE 12064
12037: GO 12039
12039: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
12040: LD_EXP 28
12044: PPUSH
12045: LD_STRING DMar-RC-a-2
12047: PPUSH
12048: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
12052: LD_EXP 28
12056: PPUSH
12057: LD_STRING DMar-RC-a-3
12059: PPUSH
12060: CALL_OW 88
// end ;
12064: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
12065: LD_EXP 14
12069: PUSH
12070: LD_EXP 21
12074: PPUSH
12075: LD_EXP 33
12079: PPUSH
12080: CALL_OW 296
12084: PUSH
12085: LD_INT 8
12087: LESS
12088: AND
12089: PUSH
12090: LD_INT 2
12092: PPUSH
12093: CALL_OW 463
12097: NOT
12098: AND
12099: PUSH
12100: LD_EXP 33
12104: PPUSH
12105: CALL_OW 302
12109: AND
12110: PUSH
12111: LD_EXP 21
12115: PPUSH
12116: CALL_OW 302
12120: AND
12121: IFFALSE 12299
12123: GO 12125
12125: DISABLE
// begin if not IsInUnit ( Aviradze ) then
12126: LD_EXP 33
12130: PPUSH
12131: CALL_OW 310
12135: NOT
12136: IFFALSE 12152
// ComTurnUnit ( Aviradze , Heike ) ;
12138: LD_EXP 33
12142: PPUSH
12143: LD_EXP 21
12147: PPUSH
12148: CALL_OW 119
// if not IsInUnit ( Heike ) then
12152: LD_EXP 21
12156: PPUSH
12157: CALL_OW 310
12161: NOT
12162: IFFALSE 12178
// ComTurnUnit ( Heike , Aviradze ) ;
12164: LD_EXP 21
12168: PPUSH
12169: LD_EXP 33
12173: PPUSH
12174: CALL_OW 119
// wait ( 0 0$1 ) ;
12178: LD_INT 35
12180: PPUSH
12181: CALL_OW 67
// DialogueOn ;
12185: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
12189: LD_EXP 33
12193: PPUSH
12194: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
12198: LD_EXP 21
12202: PPUSH
12203: LD_STRING DH-Beria-1
12205: PPUSH
12206: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
12210: LD_EXP 33
12214: PPUSH
12215: LD_STRING DA-Beria-2
12217: PPUSH
12218: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
12222: LD_EXP 21
12226: PPUSH
12227: LD_STRING DH-Beria-3
12229: PPUSH
12230: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
12234: LD_EXP 33
12238: PPUSH
12239: LD_STRING DA-Beria-4
12241: PPUSH
12242: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
12246: LD_EXP 33
12250: PPUSH
12251: LD_STRING DA-Beria-5
12253: PPUSH
12254: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
12258: LD_EXP 33
12262: PPUSH
12263: LD_STRING DA-Beria-6
12265: PPUSH
12266: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
12270: LD_EXP 21
12274: PPUSH
12275: LD_STRING DA-Beria-7
12277: PPUSH
12278: CALL_OW 88
// DialogueOff ;
12282: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
12286: LD_INT 52
12288: PPUSH
12289: LD_INT 2
12291: PPUSH
12292: LD_INT 1
12294: PPUSH
12295: CALL_OW 322
// end ;
12299: END
// every 0 0$1 trigger IsLive ( Kaia ) and GetLives ( Kaia ) < 10 do
12300: LD_EXP 26
12304: PPUSH
12305: CALL_OW 300
12309: PUSH
12310: LD_EXP 26
12314: PPUSH
12315: CALL_OW 256
12319: PUSH
12320: LD_INT 10
12322: LESS
12323: AND
12324: IFFALSE 12361
12326: GO 12328
12328: DISABLE
// begin DialogueOn ;
12329: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
12333: LD_EXP 26
12337: PPUSH
12338: LD_STRING DK-Kdeath-1
12340: PPUSH
12341: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
12345: LD_EXP 21
12349: PPUSH
12350: LD_STRING DH-Kdeath-2
12352: PPUSH
12353: CALL_OW 88
// DialogueOff ;
12357: CALL_OW 7
// end ;
12361: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
12362: LD_INT 2
12364: PPUSH
12365: LD_EXP 39
12369: PPUSH
12370: CALL 1362 0 2
12374: IFFALSE 12391
12376: GO 12378
12378: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
12379: LD_EXP 21
12383: PPUSH
12384: LD_STRING DH-Obj-1
12386: PPUSH
12387: CALL_OW 88
12391: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
12392: LD_INT 2
12394: PPUSH
12395: LD_EXP 40
12399: PPUSH
12400: CALL 1362 0 2
12404: IFFALSE 12421
12406: GO 12408
12408: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
12409: LD_EXP 21
12413: PPUSH
12414: LD_STRING DH-Obj-a-1
12416: PPUSH
12417: CALL_OW 88
12421: END
// every 0 0$1 trigger eastBaseCaptured or tick >= [ 7 7$00 , 6 6$30 , 6 6$00 ] [ Difficulty ] do
12422: LD_EXP 10
12426: PUSH
12427: LD_OWVAR 1
12431: PUSH
12432: LD_INT 14700
12434: PUSH
12435: LD_INT 13650
12437: PUSH
12438: LD_INT 12600
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: LIST
12445: PUSH
12446: LD_OWVAR 67
12450: ARRAY
12451: GREATEREQUAL
12452: OR
12453: IFFALSE 12481
12455: GO 12457
12457: DISABLE
// begin wait ( rand ( 2 2$00 , 2 2$30 ) ) ;
12458: LD_INT 4200
12460: PPUSH
12461: LD_INT 5250
12463: PPUSH
12464: CALL_OW 12
12468: PPUSH
12469: CALL_OW 67
// convoyStarted := true ;
12473: LD_ADDR_EXP 17
12477: PUSH
12478: LD_INT 1
12480: ST_TO_ADDR
// end ;
12481: END
// every 0 0$1 trigger convoyStarted do
12482: LD_EXP 17
12486: IFFALSE 12570
12488: GO 12490
12490: DISABLE
// begin DialogueOn ;
12491: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
12495: LD_EXP 29
12499: PPUSH
12500: LD_STRING DShar-Convoy-1
12502: PPUSH
12503: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
12507: LD_EXP 21
12511: PPUSH
12512: LD_STRING DH-Convoy-2
12514: PPUSH
12515: CALL_OW 88
// DialogueOff ;
12519: CALL_OW 7
// PrepareConvoy ;
12523: CALL 4541 0 0
// repeat wait ( rand ( 5 5$30 , 8 8$30 ) ) ;
12527: LD_INT 11550
12529: PPUSH
12530: LD_INT 17850
12532: PPUSH
12533: CALL_OW 12
12537: PPUSH
12538: CALL_OW 67
// PrepareConvoy ;
12542: CALL 4541 0 0
// convoyCounter := convoyCounter - 1 ;
12546: LD_ADDR_EXP 16
12550: PUSH
12551: LD_EXP 16
12555: PUSH
12556: LD_INT 1
12558: MINUS
12559: ST_TO_ADDR
// until convoyCounter <= 0 ;
12560: LD_EXP 16
12564: PUSH
12565: LD_INT 0
12567: LESSEQUAL
12568: IFFALSE 12527
// end ;
12570: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
12571: LD_EXP 15
12575: PUSH
12576: LD_INT 10
12578: GREATEREQUAL
12579: IFFALSE 12596
12581: GO 12583
12583: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
12584: LD_EXP 31
12588: PPUSH
12589: LD_STRING DOm-Fail-1
12591: PPUSH
12592: CALL_OW 94
12596: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
12597: LD_EXP 39
12601: NOT
12602: PUSH
12603: LD_EXP 40
12607: NOT
12608: AND
12609: IFFALSE 12621
12611: GO 12613
12613: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
12614: LD_STRING RaiderDone
12616: PPUSH
12617: CALL_OW 337
12621: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 do
12622: LD_INT 22
12624: PUSH
12625: LD_INT 2
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: PUSH
12632: LD_INT 33
12634: PUSH
12635: LD_INT 2
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: PPUSH
12646: CALL_OW 69
12650: PUSH
12651: LD_INT 3
12653: GREATEREQUAL
12654: PUSH
12655: LD_INT 22
12657: PUSH
12658: LD_INT 2
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: PUSH
12665: LD_INT 34
12667: PUSH
12668: LD_INT 31
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PPUSH
12679: CALL_OW 69
12683: PUSH
12684: LD_INT 2
12686: GREATEREQUAL
12687: AND
12688: IFFALSE 12700
12690: GO 12692
12692: DISABLE
// ChangeMissionObjectives ( RemoteControlDone ) ;
12693: LD_STRING RemoteControlDone
12695: PPUSH
12696: CALL_OW 337
12700: END
// every 0 0$1 trigger convoyCounter = 0 and not ruConvoySquad do var tmp ;
12701: LD_EXP 16
12705: PUSH
12706: LD_INT 0
12708: EQUAL
12709: PUSH
12710: LD_EXP 41
12714: NOT
12715: AND
12716: IFFALSE 13504
12718: GO 12720
12720: DISABLE
12721: LD_INT 0
12723: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
12724: LD_STRING ReinforcementsDone
12726: PPUSH
12727: CALL_OW 337
// music_class := music_victory ;
12731: LD_ADDR_OWVAR 72
12735: PUSH
12736: LD_INT 4
12738: ST_TO_ADDR
// InGameOn ;
12739: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
12743: LD_EXP 21
12747: PPUSH
12748: LD_STRING DH-end-1
12750: PPUSH
12751: CALL_OW 88
// wait ( 0 0$2 ) ;
12755: LD_INT 70
12757: PPUSH
12758: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
12762: LD_EXP 29
12766: PPUSH
12767: LD_STRING DShar-end-2
12769: PPUSH
12770: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
12774: LD_EXP 39
12778: NOT
12779: PUSH
12780: LD_EXP 40
12784: NOT
12785: AND
12786: IFFALSE 12802
// begin Say ( Heike , DH-end-3 ) ;
12788: LD_EXP 21
12792: PPUSH
12793: LD_STRING DH-end-3
12795: PPUSH
12796: CALL_OW 88
// end else
12800: GO 12899
// begin Say ( Heike , DH-end-a-3 ) ;
12802: LD_EXP 21
12806: PPUSH
12807: LD_STRING DH-end-a-3
12809: PPUSH
12810: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
12814: LD_EXP 29
12818: PPUSH
12819: LD_STRING DShar-end-a-4
12821: PPUSH
12822: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
12826: LD_EXP 21
12830: PPUSH
12831: LD_STRING DH-end-a-5
12833: PPUSH
12834: CALL_OW 88
// InGameOff ;
12838: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
12842: LD_INT 35
12844: PPUSH
12845: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
12849: LD_INT 22
12851: PUSH
12852: LD_INT 3
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: PUSH
12859: LD_INT 21
12861: PUSH
12862: LD_INT 1
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: PUSH
12869: EMPTY
12870: LIST
12871: LIST
12872: PPUSH
12873: CALL_OW 69
12877: PUSH
12878: LD_INT 0
12880: EQUAL
12881: IFFALSE 12842
// InGameOn ;
12883: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
12887: LD_EXP 21
12891: PPUSH
12892: LD_STRING DH-end-a-6
12894: PPUSH
12895: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
12899: LD_EXP 29
12903: PPUSH
12904: LD_STRING DShar-end-3
12906: PPUSH
12907: CALL_OW 94
// if not flamethrowerBuilt then
12911: LD_EXP 20
12915: NOT
12916: IFFALSE 12925
// SetAchievement ( ACH_FIRE ) ;
12918: LD_STRING ACH_FIRE
12920: PPUSH
12921: CALL_OW 543
// if drugsTested then
12925: LD_EXP 6
12929: IFFALSE 12943
// AddMedal ( med1 , 1 ) else
12931: LD_STRING med1
12933: PPUSH
12934: LD_INT 1
12936: PPUSH
12937: CALL_OW 101
12941: GO 12954
// AddMedal ( med1 , - 1 ) ;
12943: LD_STRING med1
12945: PPUSH
12946: LD_INT 1
12948: NEG
12949: PPUSH
12950: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 then
12954: LD_INT 22
12956: PUSH
12957: LD_INT 2
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PUSH
12964: LD_INT 33
12966: PUSH
12967: LD_INT 2
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: PPUSH
12978: CALL_OW 69
12982: PUSH
12983: LD_INT 3
12985: GREATEREQUAL
12986: PUSH
12987: LD_INT 22
12989: PUSH
12990: LD_INT 2
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: PUSH
12997: LD_INT 34
12999: PUSH
13000: LD_INT 31
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: PUSH
13007: EMPTY
13008: LIST
13009: LIST
13010: PPUSH
13011: CALL_OW 69
13015: PUSH
13016: LD_INT 2
13018: GREATEREQUAL
13019: AND
13020: IFFALSE 13034
// AddMedal ( med2 , 1 ) else
13022: LD_STRING med2
13024: PPUSH
13025: LD_INT 1
13027: PPUSH
13028: CALL_OW 101
13032: GO 13045
// AddMedal ( med2 , - 1 ) ;
13034: LD_STRING med2
13036: PPUSH
13037: LD_INT 1
13039: NEG
13040: PPUSH
13041: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 ] [ Difficulty ] then
13045: LD_EXP 15
13049: PUSH
13050: LD_INT 10
13052: PUSH
13053: LD_INT 8
13055: PUSH
13056: LD_INT 6
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: LIST
13063: PUSH
13064: LD_OWVAR 67
13068: ARRAY
13069: LESS
13070: IFFALSE 13084
// AddMedal ( med3 , 1 ) else
13072: LD_STRING med3
13074: PPUSH
13075: LD_INT 1
13077: PPUSH
13078: CALL_OW 101
13082: GO 13095
// AddMedal ( med3 , - 1 ) ;
13084: LD_STRING med3
13086: PPUSH
13087: LD_INT 1
13089: NEG
13090: PPUSH
13091: CALL_OW 101
// GiveMedals ( MAIN ) ;
13095: LD_STRING MAIN
13097: PPUSH
13098: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13102: LD_INT 22
13104: PUSH
13105: LD_INT 2
13107: PUSH
13108: EMPTY
13109: LIST
13110: LIST
13111: PUSH
13112: LD_INT 23
13114: PUSH
13115: LD_INT 2
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: PUSH
13122: LD_INT 21
13124: PUSH
13125: LD_INT 1
13127: PUSH
13128: EMPTY
13129: LIST
13130: LIST
13131: PUSH
13132: EMPTY
13133: LIST
13134: LIST
13135: LIST
13136: PPUSH
13137: CALL_OW 69
13141: PPUSH
13142: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
13146: LD_EXP 15
13150: PPUSH
13151: LD_STRING 05_ConvoySavedCounter
13153: PPUSH
13154: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
13158: LD_EXP 13
13162: PPUSH
13163: LD_STRING 05_Radar
13165: PPUSH
13166: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
13170: LD_EXP 6
13174: PPUSH
13175: LD_STRING 05_DrugsTested
13177: PPUSH
13178: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
13182: LD_INT 22
13184: PUSH
13185: LD_INT 2
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: PUSH
13192: LD_INT 33
13194: PUSH
13195: LD_INT 2
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PPUSH
13206: CALL_OW 69
13210: PUSH
13211: LD_INT 3
13213: GREATEREQUAL
13214: PUSH
13215: LD_INT 22
13217: PUSH
13218: LD_INT 2
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: PUSH
13225: LD_INT 34
13227: PUSH
13228: LD_INT 31
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: PUSH
13235: EMPTY
13236: LIST
13237: LIST
13238: PPUSH
13239: CALL_OW 69
13243: PUSH
13244: LD_INT 2
13246: GREATEREQUAL
13247: AND
13248: PPUSH
13249: LD_STRING 05_RemoteControl
13251: PPUSH
13252: CALL_OW 39
// SaveCharacters ( Heike , 05_Heike ) ;
13256: LD_EXP 21
13260: PPUSH
13261: LD_STRING 05_Heike
13263: PPUSH
13264: CALL_OW 38
// if Aviradze then
13268: LD_EXP 33
13272: IFFALSE 13286
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
13274: LD_EXP 33
13278: PPUSH
13279: LD_STRING 05_Aviradze
13281: PPUSH
13282: CALL_OW 38
// if Ibrahim then
13286: LD_EXP 24
13290: IFFALSE 13304
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
13292: LD_EXP 24
13296: PPUSH
13297: LD_STRING 05_Ibrahim
13299: PPUSH
13300: CALL_OW 38
// if Kamil then
13304: LD_EXP 25
13308: IFFALSE 13322
// SaveCharacters ( Kamil , 05_Kamil ) ;
13310: LD_EXP 25
13314: PPUSH
13315: LD_STRING 05_Kamil
13317: PPUSH
13318: CALL_OW 38
// if Sophia then
13322: LD_EXP 27
13326: IFFALSE 13340
// SaveCharacters ( Sophia , 05_Sophia ) ;
13328: LD_EXP 27
13332: PPUSH
13333: LD_STRING 05_Sophia
13335: PPUSH
13336: CALL_OW 38
// if Kaia then
13340: LD_EXP 26
13344: IFFALSE 13358
// SaveCharacters ( Kaia , 05_Kaia ) ;
13346: LD_EXP 26
13350: PPUSH
13351: LD_STRING 05_Kaia
13353: PPUSH
13354: CALL_OW 38
// if Givi then
13358: LD_EXP 22
13362: IFFALSE 13376
// SaveCharacters ( Givi , 05_Givi ) ;
13364: LD_EXP 22
13368: PPUSH
13369: LD_STRING 05_Givi
13371: PPUSH
13372: CALL_OW 38
// if Mike then
13376: LD_EXP 23
13380: IFFALSE 13394
// SaveCharacters ( Mike , 05_Mike ) ;
13382: LD_EXP 23
13386: PPUSH
13387: LD_STRING 05_Mike
13389: PPUSH
13390: CALL_OW 38
// if Markov then
13394: LD_EXP 28
13398: IFFALSE 13412
// SaveCharacters ( Markov , 05_Markov ) ;
13400: LD_EXP 28
13404: PPUSH
13405: LD_STRING 05_Markov
13407: PPUSH
13408: CALL_OW 38
// if Kurt then
13412: LD_EXP 32
13416: IFFALSE 13430
// SaveCharacters ( Kurt , 05_Kurt ) ;
13418: LD_EXP 32
13422: PPUSH
13423: LD_STRING 05_Kurt
13425: PPUSH
13426: CALL_OW 38
// if heikeSecondSquad then
13430: LD_EXP 34
13434: IFFALSE 13448
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
13436: LD_EXP 34
13440: PPUSH
13441: LD_STRING 05_others
13443: PPUSH
13444: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
13448: LD_ADDR_VAR 0 1
13452: PUSH
13453: LD_INT 22
13455: PUSH
13456: LD_INT 2
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PUSH
13463: LD_INT 23
13465: PUSH
13466: LD_INT 0
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: PPUSH
13477: CALL_OW 69
13481: ST_TO_ADDR
// if tmp then
13482: LD_VAR 0 1
13486: IFFALSE 13500
// SaveCharacters ( tmp , 05_apes ) ;
13488: LD_VAR 0 1
13492: PPUSH
13493: LD_STRING 05_apes
13495: PPUSH
13496: CALL_OW 38
// YouWin ;
13500: CALL_OW 103
// end ; end_of_file
13504: PPOPN 1
13506: END
// every 0 0$40 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 25 do
13507: LD_EXP 9
13511: PUSH
13512: LD_INT 13
13514: PPUSH
13515: LD_INT 1
13517: PPUSH
13518: CALL_OW 287
13522: PUSH
13523: LD_INT 25
13525: LESS
13526: AND
13527: IFFALSE 13554
13529: GO 13531
13531: DISABLE
// begin enable ;
13532: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
13533: LD_INT 1
13535: PPUSH
13536: LD_INT 5
13538: PPUSH
13539: CALL_OW 12
13543: PPUSH
13544: LD_INT 13
13546: PPUSH
13547: LD_INT 1
13549: PPUSH
13550: CALL_OW 55
// end ; end_of_file
13554: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
13555: LD_INT 0
13557: PPUSH
// ar_crane := 88 ;
13558: LD_ADDR_EXP 50
13562: PUSH
13563: LD_INT 88
13565: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
13566: LD_ADDR_EXP 45
13570: PUSH
13571: LD_INT 89
13573: ST_TO_ADDR
// us_hack := 99 ;
13574: LD_ADDR_EXP 46
13578: PUSH
13579: LD_INT 99
13581: ST_TO_ADDR
// us_artillery := 97 ;
13582: LD_ADDR_EXP 47
13586: PUSH
13587: LD_INT 97
13589: ST_TO_ADDR
// ar_bio_bomb := 91 ;
13590: LD_ADDR_EXP 48
13594: PUSH
13595: LD_INT 91
13597: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
13598: LD_ADDR_EXP 49
13602: PUSH
13603: LD_INT 92
13605: ST_TO_ADDR
// ru_radar := 98 ;
13606: LD_ADDR_EXP 44
13610: PUSH
13611: LD_INT 98
13613: ST_TO_ADDR
// tech_Artillery := 80 ;
13614: LD_ADDR_EXP 51
13618: PUSH
13619: LD_INT 80
13621: ST_TO_ADDR
// tech_RadMat := 81 ;
13622: LD_ADDR_EXP 52
13626: PUSH
13627: LD_INT 81
13629: ST_TO_ADDR
// tech_BasicTools := 82 ;
13630: LD_ADDR_EXP 53
13634: PUSH
13635: LD_INT 82
13637: ST_TO_ADDR
// tech_Cargo := 83 ;
13638: LD_ADDR_EXP 54
13642: PUSH
13643: LD_INT 83
13645: ST_TO_ADDR
// tech_Track := 84 ;
13646: LD_ADDR_EXP 55
13650: PUSH
13651: LD_INT 84
13653: ST_TO_ADDR
// tech_Crane := 85 ;
13654: LD_ADDR_EXP 56
13658: PUSH
13659: LD_INT 85
13661: ST_TO_ADDR
// tech_Bulldozer := 86 ;
13662: LD_ADDR_EXP 57
13666: PUSH
13667: LD_INT 86
13669: ST_TO_ADDR
// tech_Hovercraft := 87 ;
13670: LD_ADDR_EXP 58
13674: PUSH
13675: LD_INT 87
13677: ST_TO_ADDR
// end ;
13678: LD_VAR 0 1
13682: RET
// every 1 do
13683: GO 13685
13685: DISABLE
// InitGlobalVariables ; end_of_file
13686: CALL 13555 0 0
13690: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
13691: LD_INT 0
13693: PPUSH
13694: PPUSH
13695: PPUSH
13696: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
13697: LD_VAR 0 1
13701: PPUSH
13702: CALL_OW 264
13706: PUSH
13707: LD_EXP 48
13711: EQUAL
13712: IFFALSE 13784
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
13714: LD_INT 68
13716: PPUSH
13717: LD_VAR 0 1
13721: PPUSH
13722: CALL_OW 255
13726: PPUSH
13727: CALL_OW 321
13731: PUSH
13732: LD_INT 2
13734: EQUAL
13735: IFFALSE 13747
// eff := 70 else
13737: LD_ADDR_VAR 0 4
13741: PUSH
13742: LD_INT 70
13744: ST_TO_ADDR
13745: GO 13755
// eff := 30 ;
13747: LD_ADDR_VAR 0 4
13751: PUSH
13752: LD_INT 30
13754: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
13755: LD_VAR 0 1
13759: PPUSH
13760: CALL_OW 250
13764: PPUSH
13765: LD_VAR 0 1
13769: PPUSH
13770: CALL_OW 251
13774: PPUSH
13775: LD_VAR 0 4
13779: PPUSH
13780: CALL_OW 495
// end ; end ;
13784: LD_VAR 0 2
13788: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
13789: LD_INT 0
13791: PPUSH
// end ;
13792: LD_VAR 0 4
13796: RET
// export function SOS_Command ( cmd ) ; begin
13797: LD_INT 0
13799: PPUSH
// end ;
13800: LD_VAR 0 2
13804: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
13805: LD_VAR 0 1
13809: PUSH
13810: LD_INT 254
13812: EQUAL
13813: PUSH
13814: LD_VAR 0 2
13818: PPUSH
13819: CALL_OW 264
13823: PUSH
13824: LD_EXP 46
13828: EQUAL
13829: AND
13830: PUSH
13831: LD_VAR 0 3
13835: PPUSH
13836: CALL_OW 263
13840: PUSH
13841: LD_INT 3
13843: EQUAL
13844: AND
13845: IFFALSE 13861
// HackDestroyVehicle ( unit , selectedUnit ) ;
13847: LD_VAR 0 2
13851: PPUSH
13852: LD_VAR 0 3
13856: PPUSH
13857: CALL 15368 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
13861: LD_VAR 0 1
13865: PUSH
13866: LD_INT 255
13868: EQUAL
13869: PUSH
13870: LD_VAR 0 2
13874: PPUSH
13875: CALL_OW 264
13879: PUSH
13880: LD_INT 14
13882: PUSH
13883: LD_INT 53
13885: PUSH
13886: EMPTY
13887: LIST
13888: LIST
13889: IN
13890: AND
13891: PUSH
13892: LD_VAR 0 4
13896: PPUSH
13897: LD_VAR 0 5
13901: PPUSH
13902: CALL_OW 488
13906: AND
13907: IFFALSE 13931
// CutTreeXYR ( unit , x , y , 12 ) ;
13909: LD_VAR 0 2
13913: PPUSH
13914: LD_VAR 0 4
13918: PPUSH
13919: LD_VAR 0 5
13923: PPUSH
13924: LD_INT 12
13926: PPUSH
13927: CALL 13934 0 4
// end ;
13931: PPOPN 5
13933: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
13934: LD_INT 0
13936: PPUSH
13937: PPUSH
13938: PPUSH
13939: PPUSH
13940: PPUSH
13941: PPUSH
13942: PPUSH
13943: PPUSH
13944: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
13945: LD_VAR 0 1
13949: NOT
13950: PUSH
13951: LD_VAR 0 2
13955: PPUSH
13956: LD_VAR 0 3
13960: PPUSH
13961: CALL_OW 488
13965: NOT
13966: OR
13967: PUSH
13968: LD_VAR 0 4
13972: NOT
13973: OR
13974: IFFALSE 13978
// exit ;
13976: GO 14318
// list := [ ] ;
13978: LD_ADDR_VAR 0 13
13982: PUSH
13983: EMPTY
13984: ST_TO_ADDR
// if x - r < 0 then
13985: LD_VAR 0 2
13989: PUSH
13990: LD_VAR 0 4
13994: MINUS
13995: PUSH
13996: LD_INT 0
13998: LESS
13999: IFFALSE 14011
// min_x := 0 else
14001: LD_ADDR_VAR 0 7
14005: PUSH
14006: LD_INT 0
14008: ST_TO_ADDR
14009: GO 14027
// min_x := x - r ;
14011: LD_ADDR_VAR 0 7
14015: PUSH
14016: LD_VAR 0 2
14020: PUSH
14021: LD_VAR 0 4
14025: MINUS
14026: ST_TO_ADDR
// if y - r < 0 then
14027: LD_VAR 0 3
14031: PUSH
14032: LD_VAR 0 4
14036: MINUS
14037: PUSH
14038: LD_INT 0
14040: LESS
14041: IFFALSE 14053
// min_y := 0 else
14043: LD_ADDR_VAR 0 8
14047: PUSH
14048: LD_INT 0
14050: ST_TO_ADDR
14051: GO 14069
// min_y := y - r ;
14053: LD_ADDR_VAR 0 8
14057: PUSH
14058: LD_VAR 0 3
14062: PUSH
14063: LD_VAR 0 4
14067: MINUS
14068: ST_TO_ADDR
// max_x := x + r ;
14069: LD_ADDR_VAR 0 9
14073: PUSH
14074: LD_VAR 0 2
14078: PUSH
14079: LD_VAR 0 4
14083: PLUS
14084: ST_TO_ADDR
// max_y := y + r ;
14085: LD_ADDR_VAR 0 10
14089: PUSH
14090: LD_VAR 0 3
14094: PUSH
14095: LD_VAR 0 4
14099: PLUS
14100: ST_TO_ADDR
// for _x = min_x to max_x do
14101: LD_ADDR_VAR 0 11
14105: PUSH
14106: DOUBLE
14107: LD_VAR 0 7
14111: DEC
14112: ST_TO_ADDR
14113: LD_VAR 0 9
14117: PUSH
14118: FOR_TO
14119: IFFALSE 14236
// for _y = min_y to max_y do
14121: LD_ADDR_VAR 0 12
14125: PUSH
14126: DOUBLE
14127: LD_VAR 0 8
14131: DEC
14132: ST_TO_ADDR
14133: LD_VAR 0 10
14137: PUSH
14138: FOR_TO
14139: IFFALSE 14232
// begin if not ValidHex ( _x , _y ) then
14141: LD_VAR 0 11
14145: PPUSH
14146: LD_VAR 0 12
14150: PPUSH
14151: CALL_OW 488
14155: NOT
14156: IFFALSE 14160
// continue ;
14158: GO 14138
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
14160: LD_VAR 0 11
14164: PPUSH
14165: LD_VAR 0 12
14169: PPUSH
14170: CALL_OW 351
14174: PUSH
14175: LD_VAR 0 11
14179: PPUSH
14180: LD_VAR 0 12
14184: PPUSH
14185: CALL_OW 554
14189: AND
14190: IFFALSE 14230
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
14192: LD_ADDR_VAR 0 13
14196: PUSH
14197: LD_VAR 0 13
14201: PPUSH
14202: LD_VAR 0 13
14206: PUSH
14207: LD_INT 1
14209: PLUS
14210: PPUSH
14211: LD_VAR 0 11
14215: PUSH
14216: LD_VAR 0 12
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PPUSH
14225: CALL_OW 2
14229: ST_TO_ADDR
// end ;
14230: GO 14138
14232: POP
14233: POP
14234: GO 14118
14236: POP
14237: POP
// if not list then
14238: LD_VAR 0 13
14242: NOT
14243: IFFALSE 14247
// exit ;
14245: GO 14318
// for i in list do
14247: LD_ADDR_VAR 0 6
14251: PUSH
14252: LD_VAR 0 13
14256: PUSH
14257: FOR_IN
14258: IFFALSE 14316
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
14260: LD_VAR 0 1
14264: PPUSH
14265: LD_STRING M
14267: PUSH
14268: LD_VAR 0 6
14272: PUSH
14273: LD_INT 1
14275: ARRAY
14276: PUSH
14277: LD_VAR 0 6
14281: PUSH
14282: LD_INT 2
14284: ARRAY
14285: PUSH
14286: LD_INT 0
14288: PUSH
14289: LD_INT 0
14291: PUSH
14292: LD_INT 0
14294: PUSH
14295: LD_INT 0
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: PUSH
14307: EMPTY
14308: LIST
14309: PPUSH
14310: CALL_OW 447
14314: GO 14257
14316: POP
14317: POP
// end ;
14318: LD_VAR 0 5
14322: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
14323: LD_EXP 59
14327: NOT
14328: IFFALSE 14378
14330: GO 14332
14332: DISABLE
// begin initHack := true ;
14333: LD_ADDR_EXP 59
14337: PUSH
14338: LD_INT 1
14340: ST_TO_ADDR
// hackTanks := [ ] ;
14341: LD_ADDR_EXP 60
14345: PUSH
14346: EMPTY
14347: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
14348: LD_ADDR_EXP 61
14352: PUSH
14353: EMPTY
14354: ST_TO_ADDR
// hackLimit := 3 ;
14355: LD_ADDR_EXP 62
14359: PUSH
14360: LD_INT 3
14362: ST_TO_ADDR
// hackDist := 12 ;
14363: LD_ADDR_EXP 63
14367: PUSH
14368: LD_INT 12
14370: ST_TO_ADDR
// hackCounter := [ ] ;
14371: LD_ADDR_EXP 64
14375: PUSH
14376: EMPTY
14377: ST_TO_ADDR
// end ;
14378: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
14379: LD_EXP 59
14383: PUSH
14384: LD_INT 34
14386: PUSH
14387: LD_EXP 46
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: PPUSH
14396: CALL_OW 69
14400: AND
14401: IFFALSE 14656
14403: GO 14405
14405: DISABLE
14406: LD_INT 0
14408: PPUSH
14409: PPUSH
// begin enable ;
14410: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
14411: LD_ADDR_VAR 0 1
14415: PUSH
14416: LD_INT 34
14418: PUSH
14419: LD_EXP 46
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: PPUSH
14428: CALL_OW 69
14432: PUSH
14433: FOR_IN
14434: IFFALSE 14654
// begin if not i in hackTanks then
14436: LD_VAR 0 1
14440: PUSH
14441: LD_EXP 60
14445: IN
14446: NOT
14447: IFFALSE 14530
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
14449: LD_ADDR_EXP 60
14453: PUSH
14454: LD_EXP 60
14458: PPUSH
14459: LD_EXP 60
14463: PUSH
14464: LD_INT 1
14466: PLUS
14467: PPUSH
14468: LD_VAR 0 1
14472: PPUSH
14473: CALL_OW 1
14477: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
14478: LD_ADDR_EXP 61
14482: PUSH
14483: LD_EXP 61
14487: PPUSH
14488: LD_EXP 61
14492: PUSH
14493: LD_INT 1
14495: PLUS
14496: PPUSH
14497: EMPTY
14498: PPUSH
14499: CALL_OW 1
14503: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
14504: LD_ADDR_EXP 64
14508: PUSH
14509: LD_EXP 64
14513: PPUSH
14514: LD_EXP 64
14518: PUSH
14519: LD_INT 1
14521: PLUS
14522: PPUSH
14523: EMPTY
14524: PPUSH
14525: CALL_OW 1
14529: ST_TO_ADDR
// end ; if not IsOk ( i ) then
14530: LD_VAR 0 1
14534: PPUSH
14535: CALL_OW 302
14539: NOT
14540: IFFALSE 14553
// begin HackUnlinkAll ( i ) ;
14542: LD_VAR 0 1
14546: PPUSH
14547: CALL 14659 0 1
// continue ;
14551: GO 14433
// end ; HackCheckCapturedStatus ( i ) ;
14553: LD_VAR 0 1
14557: PPUSH
14558: CALL 15102 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
14562: LD_ADDR_VAR 0 2
14566: PUSH
14567: LD_INT 81
14569: PUSH
14570: LD_VAR 0 1
14574: PPUSH
14575: CALL_OW 255
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: PUSH
14584: LD_INT 33
14586: PUSH
14587: LD_INT 3
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: PUSH
14594: LD_INT 91
14596: PUSH
14597: LD_VAR 0 1
14601: PUSH
14602: LD_EXP 63
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: LIST
14611: PUSH
14612: LD_INT 50
14614: PUSH
14615: EMPTY
14616: LIST
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: PPUSH
14624: CALL_OW 69
14628: ST_TO_ADDR
// if not tmp then
14629: LD_VAR 0 2
14633: NOT
14634: IFFALSE 14638
// continue ;
14636: GO 14433
// HackLink ( i , tmp ) ;
14638: LD_VAR 0 1
14642: PPUSH
14643: LD_VAR 0 2
14647: PPUSH
14648: CALL 14795 0 2
// end ;
14652: GO 14433
14654: POP
14655: POP
// end ;
14656: PPOPN 2
14658: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
14659: LD_INT 0
14661: PPUSH
14662: PPUSH
14663: PPUSH
// if not hack in hackTanks then
14664: LD_VAR 0 1
14668: PUSH
14669: LD_EXP 60
14673: IN
14674: NOT
14675: IFFALSE 14679
// exit ;
14677: GO 14790
// index := GetElementIndex ( hackTanks , hack ) ;
14679: LD_ADDR_VAR 0 4
14683: PUSH
14684: LD_EXP 60
14688: PPUSH
14689: LD_VAR 0 1
14693: PPUSH
14694: CALL 32868 0 2
14698: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
14699: LD_EXP 61
14703: PUSH
14704: LD_VAR 0 4
14708: ARRAY
14709: IFFALSE 14790
// begin for i in hackTanksCaptured [ index ] do
14711: LD_ADDR_VAR 0 3
14715: PUSH
14716: LD_EXP 61
14720: PUSH
14721: LD_VAR 0 4
14725: ARRAY
14726: PUSH
14727: FOR_IN
14728: IFFALSE 14754
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
14730: LD_VAR 0 3
14734: PUSH
14735: LD_INT 1
14737: ARRAY
14738: PPUSH
14739: LD_VAR 0 3
14743: PUSH
14744: LD_INT 2
14746: ARRAY
14747: PPUSH
14748: CALL_OW 235
14752: GO 14727
14754: POP
14755: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
14756: LD_ADDR_EXP 61
14760: PUSH
14761: LD_EXP 61
14765: PPUSH
14766: LD_VAR 0 4
14770: PPUSH
14771: EMPTY
14772: PPUSH
14773: CALL_OW 1
14777: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
14778: LD_VAR 0 1
14782: PPUSH
14783: LD_INT 0
14785: PPUSH
14786: CALL_OW 505
// end ; end ;
14790: LD_VAR 0 2
14794: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
14795: LD_INT 0
14797: PPUSH
14798: PPUSH
14799: PPUSH
// if not hack in hackTanks or not vehicles then
14800: LD_VAR 0 1
14804: PUSH
14805: LD_EXP 60
14809: IN
14810: NOT
14811: PUSH
14812: LD_VAR 0 2
14816: NOT
14817: OR
14818: IFFALSE 14822
// exit ;
14820: GO 15097
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
14822: LD_ADDR_VAR 0 2
14826: PUSH
14827: LD_VAR 0 1
14831: PPUSH
14832: LD_VAR 0 2
14836: PPUSH
14837: LD_INT 1
14839: PPUSH
14840: LD_INT 1
14842: PPUSH
14843: CALL 33518 0 4
14847: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
14848: LD_ADDR_VAR 0 5
14852: PUSH
14853: LD_EXP 60
14857: PPUSH
14858: LD_VAR 0 1
14862: PPUSH
14863: CALL 32868 0 2
14867: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
14868: LD_EXP 61
14872: PUSH
14873: LD_VAR 0 5
14877: ARRAY
14878: PUSH
14879: LD_EXP 62
14883: LESS
14884: IFFALSE 15073
// begin for i := 1 to vehicles do
14886: LD_ADDR_VAR 0 4
14890: PUSH
14891: DOUBLE
14892: LD_INT 1
14894: DEC
14895: ST_TO_ADDR
14896: LD_VAR 0 2
14900: PUSH
14901: FOR_TO
14902: IFFALSE 15071
// begin if hackTanksCaptured [ index ] = hackLimit then
14904: LD_EXP 61
14908: PUSH
14909: LD_VAR 0 5
14913: ARRAY
14914: PUSH
14915: LD_EXP 62
14919: EQUAL
14920: IFFALSE 14924
// break ;
14922: GO 15071
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
14924: LD_ADDR_EXP 64
14928: PUSH
14929: LD_EXP 64
14933: PPUSH
14934: LD_VAR 0 5
14938: PPUSH
14939: LD_EXP 64
14943: PUSH
14944: LD_VAR 0 5
14948: ARRAY
14949: PUSH
14950: LD_INT 1
14952: PLUS
14953: PPUSH
14954: CALL_OW 1
14958: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
14959: LD_ADDR_EXP 61
14963: PUSH
14964: LD_EXP 61
14968: PPUSH
14969: LD_VAR 0 5
14973: PUSH
14974: LD_EXP 61
14978: PUSH
14979: LD_VAR 0 5
14983: ARRAY
14984: PUSH
14985: LD_INT 1
14987: PLUS
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: PPUSH
14993: LD_VAR 0 2
14997: PUSH
14998: LD_VAR 0 4
15002: ARRAY
15003: PUSH
15004: LD_VAR 0 2
15008: PUSH
15009: LD_VAR 0 4
15013: ARRAY
15014: PPUSH
15015: CALL_OW 255
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: PPUSH
15024: CALL 33083 0 3
15028: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
15029: LD_VAR 0 2
15033: PUSH
15034: LD_VAR 0 4
15038: ARRAY
15039: PPUSH
15040: LD_VAR 0 1
15044: PPUSH
15045: CALL_OW 255
15049: PPUSH
15050: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
15054: LD_VAR 0 2
15058: PUSH
15059: LD_VAR 0 4
15063: ARRAY
15064: PPUSH
15065: CALL_OW 141
// end ;
15069: GO 14901
15071: POP
15072: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
15073: LD_VAR 0 1
15077: PPUSH
15078: LD_EXP 61
15082: PUSH
15083: LD_VAR 0 5
15087: ARRAY
15088: PUSH
15089: LD_INT 0
15091: PLUS
15092: PPUSH
15093: CALL_OW 505
// end ;
15097: LD_VAR 0 3
15101: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
15102: LD_INT 0
15104: PPUSH
15105: PPUSH
15106: PPUSH
15107: PPUSH
// if not hack in hackTanks then
15108: LD_VAR 0 1
15112: PUSH
15113: LD_EXP 60
15117: IN
15118: NOT
15119: IFFALSE 15123
// exit ;
15121: GO 15363
// index := GetElementIndex ( hackTanks , hack ) ;
15123: LD_ADDR_VAR 0 4
15127: PUSH
15128: LD_EXP 60
15132: PPUSH
15133: LD_VAR 0 1
15137: PPUSH
15138: CALL 32868 0 2
15142: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
15143: LD_ADDR_VAR 0 3
15147: PUSH
15148: DOUBLE
15149: LD_EXP 61
15153: PUSH
15154: LD_VAR 0 4
15158: ARRAY
15159: INC
15160: ST_TO_ADDR
15161: LD_INT 1
15163: PUSH
15164: FOR_DOWNTO
15165: IFFALSE 15337
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
15167: LD_ADDR_VAR 0 5
15171: PUSH
15172: LD_EXP 61
15176: PUSH
15177: LD_VAR 0 4
15181: ARRAY
15182: PUSH
15183: LD_VAR 0 3
15187: ARRAY
15188: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
15189: LD_VAR 0 5
15193: PUSH
15194: LD_INT 1
15196: ARRAY
15197: PPUSH
15198: CALL_OW 302
15202: NOT
15203: PUSH
15204: LD_VAR 0 5
15208: PUSH
15209: LD_INT 1
15211: ARRAY
15212: PPUSH
15213: CALL_OW 255
15217: PUSH
15218: LD_VAR 0 1
15222: PPUSH
15223: CALL_OW 255
15227: NONEQUAL
15228: OR
15229: IFFALSE 15335
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
15231: LD_VAR 0 5
15235: PUSH
15236: LD_INT 1
15238: ARRAY
15239: PPUSH
15240: CALL_OW 305
15244: PUSH
15245: LD_VAR 0 5
15249: PUSH
15250: LD_INT 1
15252: ARRAY
15253: PPUSH
15254: CALL_OW 255
15258: PUSH
15259: LD_VAR 0 1
15263: PPUSH
15264: CALL_OW 255
15268: EQUAL
15269: AND
15270: IFFALSE 15294
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
15272: LD_VAR 0 5
15276: PUSH
15277: LD_INT 1
15279: ARRAY
15280: PPUSH
15281: LD_VAR 0 5
15285: PUSH
15286: LD_INT 2
15288: ARRAY
15289: PPUSH
15290: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
15294: LD_ADDR_EXP 61
15298: PUSH
15299: LD_EXP 61
15303: PPUSH
15304: LD_VAR 0 4
15308: PPUSH
15309: LD_EXP 61
15313: PUSH
15314: LD_VAR 0 4
15318: ARRAY
15319: PPUSH
15320: LD_VAR 0 3
15324: PPUSH
15325: CALL_OW 3
15329: PPUSH
15330: CALL_OW 1
15334: ST_TO_ADDR
// end ; end ;
15335: GO 15164
15337: POP
15338: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
15339: LD_VAR 0 1
15343: PPUSH
15344: LD_EXP 61
15348: PUSH
15349: LD_VAR 0 4
15353: ARRAY
15354: PUSH
15355: LD_INT 0
15357: PLUS
15358: PPUSH
15359: CALL_OW 505
// end ;
15363: LD_VAR 0 2
15367: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
15368: LD_INT 0
15370: PPUSH
15371: PPUSH
15372: PPUSH
15373: PPUSH
// if not hack in hackTanks then
15374: LD_VAR 0 1
15378: PUSH
15379: LD_EXP 60
15383: IN
15384: NOT
15385: IFFALSE 15389
// exit ;
15387: GO 15474
// index := GetElementIndex ( hackTanks , hack ) ;
15389: LD_ADDR_VAR 0 5
15393: PUSH
15394: LD_EXP 60
15398: PPUSH
15399: LD_VAR 0 1
15403: PPUSH
15404: CALL 32868 0 2
15408: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
15409: LD_ADDR_VAR 0 4
15413: PUSH
15414: DOUBLE
15415: LD_INT 1
15417: DEC
15418: ST_TO_ADDR
15419: LD_EXP 61
15423: PUSH
15424: LD_VAR 0 5
15428: ARRAY
15429: PUSH
15430: FOR_TO
15431: IFFALSE 15472
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
15433: LD_EXP 61
15437: PUSH
15438: LD_VAR 0 5
15442: ARRAY
15443: PUSH
15444: LD_VAR 0 4
15448: ARRAY
15449: PUSH
15450: LD_INT 1
15452: ARRAY
15453: PUSH
15454: LD_VAR 0 2
15458: EQUAL
15459: IFFALSE 15470
// KillUnit ( vehicle ) ;
15461: LD_VAR 0 2
15465: PPUSH
15466: CALL_OW 66
15470: GO 15430
15472: POP
15473: POP
// end ; end_of_file
15474: LD_VAR 0 3
15478: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
15479: LD_VAR 0 2
15483: PUSH
15484: LD_INT 100
15486: EQUAL
15487: IFFALSE 16436
// begin if not StreamModeActive then
15489: LD_EXP 65
15493: NOT
15494: IFFALSE 15504
// StreamModeActive := true ;
15496: LD_ADDR_EXP 65
15500: PUSH
15501: LD_INT 1
15503: ST_TO_ADDR
// if p3 = 0 then
15504: LD_VAR 0 3
15508: PUSH
15509: LD_INT 0
15511: EQUAL
15512: IFFALSE 15518
// InitStreamMode ;
15514: CALL 16669 0 0
// if p3 = 1 then
15518: LD_VAR 0 3
15522: PUSH
15523: LD_INT 1
15525: EQUAL
15526: IFFALSE 15536
// sRocket := true ;
15528: LD_ADDR_EXP 70
15532: PUSH
15533: LD_INT 1
15535: ST_TO_ADDR
// if p3 = 2 then
15536: LD_VAR 0 3
15540: PUSH
15541: LD_INT 2
15543: EQUAL
15544: IFFALSE 15554
// sSpeed := true ;
15546: LD_ADDR_EXP 69
15550: PUSH
15551: LD_INT 1
15553: ST_TO_ADDR
// if p3 = 3 then
15554: LD_VAR 0 3
15558: PUSH
15559: LD_INT 3
15561: EQUAL
15562: IFFALSE 15572
// sEngine := true ;
15564: LD_ADDR_EXP 71
15568: PUSH
15569: LD_INT 1
15571: ST_TO_ADDR
// if p3 = 4 then
15572: LD_VAR 0 3
15576: PUSH
15577: LD_INT 4
15579: EQUAL
15580: IFFALSE 15590
// sSpec := true ;
15582: LD_ADDR_EXP 68
15586: PUSH
15587: LD_INT 1
15589: ST_TO_ADDR
// if p3 = 5 then
15590: LD_VAR 0 3
15594: PUSH
15595: LD_INT 5
15597: EQUAL
15598: IFFALSE 15608
// sLevel := true ;
15600: LD_ADDR_EXP 72
15604: PUSH
15605: LD_INT 1
15607: ST_TO_ADDR
// if p3 = 6 then
15608: LD_VAR 0 3
15612: PUSH
15613: LD_INT 6
15615: EQUAL
15616: IFFALSE 15626
// sArmoury := true ;
15618: LD_ADDR_EXP 73
15622: PUSH
15623: LD_INT 1
15625: ST_TO_ADDR
// if p3 = 7 then
15626: LD_VAR 0 3
15630: PUSH
15631: LD_INT 7
15633: EQUAL
15634: IFFALSE 15644
// sRadar := true ;
15636: LD_ADDR_EXP 74
15640: PUSH
15641: LD_INT 1
15643: ST_TO_ADDR
// if p3 = 8 then
15644: LD_VAR 0 3
15648: PUSH
15649: LD_INT 8
15651: EQUAL
15652: IFFALSE 15662
// sBunker := true ;
15654: LD_ADDR_EXP 75
15658: PUSH
15659: LD_INT 1
15661: ST_TO_ADDR
// if p3 = 9 then
15662: LD_VAR 0 3
15666: PUSH
15667: LD_INT 9
15669: EQUAL
15670: IFFALSE 15680
// sHack := true ;
15672: LD_ADDR_EXP 76
15676: PUSH
15677: LD_INT 1
15679: ST_TO_ADDR
// if p3 = 10 then
15680: LD_VAR 0 3
15684: PUSH
15685: LD_INT 10
15687: EQUAL
15688: IFFALSE 15698
// sFire := true ;
15690: LD_ADDR_EXP 77
15694: PUSH
15695: LD_INT 1
15697: ST_TO_ADDR
// if p3 = 11 then
15698: LD_VAR 0 3
15702: PUSH
15703: LD_INT 11
15705: EQUAL
15706: IFFALSE 15716
// sRefresh := true ;
15708: LD_ADDR_EXP 78
15712: PUSH
15713: LD_INT 1
15715: ST_TO_ADDR
// if p3 = 12 then
15716: LD_VAR 0 3
15720: PUSH
15721: LD_INT 12
15723: EQUAL
15724: IFFALSE 15734
// sExp := true ;
15726: LD_ADDR_EXP 79
15730: PUSH
15731: LD_INT 1
15733: ST_TO_ADDR
// if p3 = 13 then
15734: LD_VAR 0 3
15738: PUSH
15739: LD_INT 13
15741: EQUAL
15742: IFFALSE 15752
// sDepot := true ;
15744: LD_ADDR_EXP 80
15748: PUSH
15749: LD_INT 1
15751: ST_TO_ADDR
// if p3 = 14 then
15752: LD_VAR 0 3
15756: PUSH
15757: LD_INT 14
15759: EQUAL
15760: IFFALSE 15770
// sFlag := true ;
15762: LD_ADDR_EXP 81
15766: PUSH
15767: LD_INT 1
15769: ST_TO_ADDR
// if p3 = 15 then
15770: LD_VAR 0 3
15774: PUSH
15775: LD_INT 15
15777: EQUAL
15778: IFFALSE 15788
// sKamikadze := true ;
15780: LD_ADDR_EXP 89
15784: PUSH
15785: LD_INT 1
15787: ST_TO_ADDR
// if p3 = 16 then
15788: LD_VAR 0 3
15792: PUSH
15793: LD_INT 16
15795: EQUAL
15796: IFFALSE 15806
// sTroll := true ;
15798: LD_ADDR_EXP 90
15802: PUSH
15803: LD_INT 1
15805: ST_TO_ADDR
// if p3 = 17 then
15806: LD_VAR 0 3
15810: PUSH
15811: LD_INT 17
15813: EQUAL
15814: IFFALSE 15824
// sSlow := true ;
15816: LD_ADDR_EXP 91
15820: PUSH
15821: LD_INT 1
15823: ST_TO_ADDR
// if p3 = 18 then
15824: LD_VAR 0 3
15828: PUSH
15829: LD_INT 18
15831: EQUAL
15832: IFFALSE 15842
// sLack := true ;
15834: LD_ADDR_EXP 92
15838: PUSH
15839: LD_INT 1
15841: ST_TO_ADDR
// if p3 = 19 then
15842: LD_VAR 0 3
15846: PUSH
15847: LD_INT 19
15849: EQUAL
15850: IFFALSE 15860
// sTank := true ;
15852: LD_ADDR_EXP 94
15856: PUSH
15857: LD_INT 1
15859: ST_TO_ADDR
// if p3 = 20 then
15860: LD_VAR 0 3
15864: PUSH
15865: LD_INT 20
15867: EQUAL
15868: IFFALSE 15878
// sRemote := true ;
15870: LD_ADDR_EXP 95
15874: PUSH
15875: LD_INT 1
15877: ST_TO_ADDR
// if p3 = 21 then
15878: LD_VAR 0 3
15882: PUSH
15883: LD_INT 21
15885: EQUAL
15886: IFFALSE 15896
// sPowell := true ;
15888: LD_ADDR_EXP 96
15892: PUSH
15893: LD_INT 1
15895: ST_TO_ADDR
// if p3 = 22 then
15896: LD_VAR 0 3
15900: PUSH
15901: LD_INT 22
15903: EQUAL
15904: IFFALSE 15914
// sTeleport := true ;
15906: LD_ADDR_EXP 99
15910: PUSH
15911: LD_INT 1
15913: ST_TO_ADDR
// if p3 = 23 then
15914: LD_VAR 0 3
15918: PUSH
15919: LD_INT 23
15921: EQUAL
15922: IFFALSE 15932
// sOilTower := true ;
15924: LD_ADDR_EXP 101
15928: PUSH
15929: LD_INT 1
15931: ST_TO_ADDR
// if p3 = 24 then
15932: LD_VAR 0 3
15936: PUSH
15937: LD_INT 24
15939: EQUAL
15940: IFFALSE 15950
// sShovel := true ;
15942: LD_ADDR_EXP 102
15946: PUSH
15947: LD_INT 1
15949: ST_TO_ADDR
// if p3 = 25 then
15950: LD_VAR 0 3
15954: PUSH
15955: LD_INT 25
15957: EQUAL
15958: IFFALSE 15968
// sSheik := true ;
15960: LD_ADDR_EXP 103
15964: PUSH
15965: LD_INT 1
15967: ST_TO_ADDR
// if p3 = 26 then
15968: LD_VAR 0 3
15972: PUSH
15973: LD_INT 26
15975: EQUAL
15976: IFFALSE 15986
// sEarthquake := true ;
15978: LD_ADDR_EXP 105
15982: PUSH
15983: LD_INT 1
15985: ST_TO_ADDR
// if p3 = 27 then
15986: LD_VAR 0 3
15990: PUSH
15991: LD_INT 27
15993: EQUAL
15994: IFFALSE 16004
// sAI := true ;
15996: LD_ADDR_EXP 106
16000: PUSH
16001: LD_INT 1
16003: ST_TO_ADDR
// if p3 = 28 then
16004: LD_VAR 0 3
16008: PUSH
16009: LD_INT 28
16011: EQUAL
16012: IFFALSE 16022
// sCargo := true ;
16014: LD_ADDR_EXP 109
16018: PUSH
16019: LD_INT 1
16021: ST_TO_ADDR
// if p3 = 29 then
16022: LD_VAR 0 3
16026: PUSH
16027: LD_INT 29
16029: EQUAL
16030: IFFALSE 16040
// sDLaser := true ;
16032: LD_ADDR_EXP 110
16036: PUSH
16037: LD_INT 1
16039: ST_TO_ADDR
// if p3 = 30 then
16040: LD_VAR 0 3
16044: PUSH
16045: LD_INT 30
16047: EQUAL
16048: IFFALSE 16058
// sExchange := true ;
16050: LD_ADDR_EXP 111
16054: PUSH
16055: LD_INT 1
16057: ST_TO_ADDR
// if p3 = 31 then
16058: LD_VAR 0 3
16062: PUSH
16063: LD_INT 31
16065: EQUAL
16066: IFFALSE 16076
// sFac := true ;
16068: LD_ADDR_EXP 112
16072: PUSH
16073: LD_INT 1
16075: ST_TO_ADDR
// if p3 = 32 then
16076: LD_VAR 0 3
16080: PUSH
16081: LD_INT 32
16083: EQUAL
16084: IFFALSE 16094
// sPower := true ;
16086: LD_ADDR_EXP 113
16090: PUSH
16091: LD_INT 1
16093: ST_TO_ADDR
// if p3 = 33 then
16094: LD_VAR 0 3
16098: PUSH
16099: LD_INT 33
16101: EQUAL
16102: IFFALSE 16112
// sRandom := true ;
16104: LD_ADDR_EXP 114
16108: PUSH
16109: LD_INT 1
16111: ST_TO_ADDR
// if p3 = 34 then
16112: LD_VAR 0 3
16116: PUSH
16117: LD_INT 34
16119: EQUAL
16120: IFFALSE 16130
// sShield := true ;
16122: LD_ADDR_EXP 115
16126: PUSH
16127: LD_INT 1
16129: ST_TO_ADDR
// if p3 = 35 then
16130: LD_VAR 0 3
16134: PUSH
16135: LD_INT 35
16137: EQUAL
16138: IFFALSE 16148
// sTime := true ;
16140: LD_ADDR_EXP 116
16144: PUSH
16145: LD_INT 1
16147: ST_TO_ADDR
// if p3 = 36 then
16148: LD_VAR 0 3
16152: PUSH
16153: LD_INT 36
16155: EQUAL
16156: IFFALSE 16166
// sTools := true ;
16158: LD_ADDR_EXP 117
16162: PUSH
16163: LD_INT 1
16165: ST_TO_ADDR
// if p3 = 101 then
16166: LD_VAR 0 3
16170: PUSH
16171: LD_INT 101
16173: EQUAL
16174: IFFALSE 16184
// sSold := true ;
16176: LD_ADDR_EXP 82
16180: PUSH
16181: LD_INT 1
16183: ST_TO_ADDR
// if p3 = 102 then
16184: LD_VAR 0 3
16188: PUSH
16189: LD_INT 102
16191: EQUAL
16192: IFFALSE 16202
// sDiff := true ;
16194: LD_ADDR_EXP 83
16198: PUSH
16199: LD_INT 1
16201: ST_TO_ADDR
// if p3 = 103 then
16202: LD_VAR 0 3
16206: PUSH
16207: LD_INT 103
16209: EQUAL
16210: IFFALSE 16220
// sFog := true ;
16212: LD_ADDR_EXP 86
16216: PUSH
16217: LD_INT 1
16219: ST_TO_ADDR
// if p3 = 104 then
16220: LD_VAR 0 3
16224: PUSH
16225: LD_INT 104
16227: EQUAL
16228: IFFALSE 16238
// sReset := true ;
16230: LD_ADDR_EXP 87
16234: PUSH
16235: LD_INT 1
16237: ST_TO_ADDR
// if p3 = 105 then
16238: LD_VAR 0 3
16242: PUSH
16243: LD_INT 105
16245: EQUAL
16246: IFFALSE 16256
// sSun := true ;
16248: LD_ADDR_EXP 88
16252: PUSH
16253: LD_INT 1
16255: ST_TO_ADDR
// if p3 = 106 then
16256: LD_VAR 0 3
16260: PUSH
16261: LD_INT 106
16263: EQUAL
16264: IFFALSE 16274
// sTiger := true ;
16266: LD_ADDR_EXP 84
16270: PUSH
16271: LD_INT 1
16273: ST_TO_ADDR
// if p3 = 107 then
16274: LD_VAR 0 3
16278: PUSH
16279: LD_INT 107
16281: EQUAL
16282: IFFALSE 16292
// sBomb := true ;
16284: LD_ADDR_EXP 85
16288: PUSH
16289: LD_INT 1
16291: ST_TO_ADDR
// if p3 = 108 then
16292: LD_VAR 0 3
16296: PUSH
16297: LD_INT 108
16299: EQUAL
16300: IFFALSE 16310
// sWound := true ;
16302: LD_ADDR_EXP 93
16306: PUSH
16307: LD_INT 1
16309: ST_TO_ADDR
// if p3 = 109 then
16310: LD_VAR 0 3
16314: PUSH
16315: LD_INT 109
16317: EQUAL
16318: IFFALSE 16328
// sBetray := true ;
16320: LD_ADDR_EXP 97
16324: PUSH
16325: LD_INT 1
16327: ST_TO_ADDR
// if p3 = 110 then
16328: LD_VAR 0 3
16332: PUSH
16333: LD_INT 110
16335: EQUAL
16336: IFFALSE 16346
// sContamin := true ;
16338: LD_ADDR_EXP 98
16342: PUSH
16343: LD_INT 1
16345: ST_TO_ADDR
// if p3 = 111 then
16346: LD_VAR 0 3
16350: PUSH
16351: LD_INT 111
16353: EQUAL
16354: IFFALSE 16364
// sOil := true ;
16356: LD_ADDR_EXP 100
16360: PUSH
16361: LD_INT 1
16363: ST_TO_ADDR
// if p3 = 112 then
16364: LD_VAR 0 3
16368: PUSH
16369: LD_INT 112
16371: EQUAL
16372: IFFALSE 16382
// sStu := true ;
16374: LD_ADDR_EXP 104
16378: PUSH
16379: LD_INT 1
16381: ST_TO_ADDR
// if p3 = 113 then
16382: LD_VAR 0 3
16386: PUSH
16387: LD_INT 113
16389: EQUAL
16390: IFFALSE 16400
// sBazooka := true ;
16392: LD_ADDR_EXP 107
16396: PUSH
16397: LD_INT 1
16399: ST_TO_ADDR
// if p3 = 114 then
16400: LD_VAR 0 3
16404: PUSH
16405: LD_INT 114
16407: EQUAL
16408: IFFALSE 16418
// sMortar := true ;
16410: LD_ADDR_EXP 108
16414: PUSH
16415: LD_INT 1
16417: ST_TO_ADDR
// if p3 = 115 then
16418: LD_VAR 0 3
16422: PUSH
16423: LD_INT 115
16425: EQUAL
16426: IFFALSE 16436
// sRanger := true ;
16428: LD_ADDR_EXP 118
16432: PUSH
16433: LD_INT 1
16435: ST_TO_ADDR
// end ; if p2 = 101 then
16436: LD_VAR 0 2
16440: PUSH
16441: LD_INT 101
16443: EQUAL
16444: IFFALSE 16647
// begin case p3 of 1 :
16446: LD_VAR 0 3
16450: PUSH
16451: LD_INT 1
16453: DOUBLE
16454: EQUAL
16455: IFTRUE 16459
16457: GO 16466
16459: POP
// hHackUnlimitedResources ; 2 :
16460: CALL 26741 0 0
16464: GO 16647
16466: LD_INT 2
16468: DOUBLE
16469: EQUAL
16470: IFTRUE 16474
16472: GO 16481
16474: POP
// hHackSetLevel10 ; 3 :
16475: CALL 26874 0 0
16479: GO 16647
16481: LD_INT 3
16483: DOUBLE
16484: EQUAL
16485: IFTRUE 16489
16487: GO 16496
16489: POP
// hHackSetLevel10YourUnits ; 4 :
16490: CALL 26959 0 0
16494: GO 16647
16496: LD_INT 4
16498: DOUBLE
16499: EQUAL
16500: IFTRUE 16504
16502: GO 16526
16504: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
16505: LD_VAR 0 4
16509: PPUSH
16510: LD_VAR 0 5
16514: PPUSH
16515: LD_VAR 0 6
16519: PPUSH
16520: CALL 27049 0 3
16524: GO 16647
16526: LD_INT 5
16528: DOUBLE
16529: EQUAL
16530: IFTRUE 16534
16532: GO 16541
16534: POP
// hHackSpawnVehicle ; 6 :
16535: CALL 27110 0 0
16539: GO 16647
16541: LD_INT 6
16543: DOUBLE
16544: EQUAL
16545: IFTRUE 16549
16547: GO 16556
16549: POP
// hHackInvincible ; 7 :
16550: CALL 27656 0 0
16554: GO 16647
16556: LD_INT 7
16558: DOUBLE
16559: EQUAL
16560: IFTRUE 16564
16562: GO 16571
16564: POP
// hHackInvisible ; 8 :
16565: CALL 27767 0 0
16569: GO 16647
16571: LD_INT 8
16573: DOUBLE
16574: EQUAL
16575: IFTRUE 16579
16577: GO 16586
16579: POP
// hHackChangeYourSide ; 9 :
16580: CALL 27824 0 0
16584: GO 16647
16586: LD_INT 9
16588: DOUBLE
16589: EQUAL
16590: IFTRUE 16594
16592: GO 16601
16594: POP
// hHackChangeUnitSide ; 10 :
16595: CALL 27866 0 0
16599: GO 16647
16601: LD_INT 10
16603: DOUBLE
16604: EQUAL
16605: IFTRUE 16609
16607: GO 16616
16609: POP
// hHackFog ; 11 :
16610: CALL 27967 0 0
16614: GO 16647
16616: LD_INT 11
16618: DOUBLE
16619: EQUAL
16620: IFTRUE 16624
16622: GO 16631
16624: POP
// hHackApeman ; 12 :
16625: CALL 27982 0 0
16629: GO 16647
16631: LD_INT 12
16633: DOUBLE
16634: EQUAL
16635: IFTRUE 16639
16637: GO 16646
16639: POP
// hHackBoom ; end ;
16640: CALL 28067 0 0
16644: GO 16647
16646: POP
// end ; end ;
16647: PPOPN 6
16649: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
16650: GO 16652
16652: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16653: LD_STRING initStreamRollete();
16655: PPUSH
16656: CALL_OW 559
// InitStreamMode ;
16660: CALL 16669 0 0
// DefineStreamItems ( ) ;
16664: CALL 17109 0 0
// end ;
16668: END
// function InitStreamMode ; begin
16669: LD_INT 0
16671: PPUSH
// streamModeActive := false ;
16672: LD_ADDR_EXP 65
16676: PUSH
16677: LD_INT 0
16679: ST_TO_ADDR
// normalCounter := 36 ;
16680: LD_ADDR_EXP 66
16684: PUSH
16685: LD_INT 36
16687: ST_TO_ADDR
// hardcoreCounter := 16 ;
16688: LD_ADDR_EXP 67
16692: PUSH
16693: LD_INT 16
16695: ST_TO_ADDR
// sRocket := false ;
16696: LD_ADDR_EXP 70
16700: PUSH
16701: LD_INT 0
16703: ST_TO_ADDR
// sSpeed := false ;
16704: LD_ADDR_EXP 69
16708: PUSH
16709: LD_INT 0
16711: ST_TO_ADDR
// sEngine := false ;
16712: LD_ADDR_EXP 71
16716: PUSH
16717: LD_INT 0
16719: ST_TO_ADDR
// sSpec := false ;
16720: LD_ADDR_EXP 68
16724: PUSH
16725: LD_INT 0
16727: ST_TO_ADDR
// sLevel := false ;
16728: LD_ADDR_EXP 72
16732: PUSH
16733: LD_INT 0
16735: ST_TO_ADDR
// sArmoury := false ;
16736: LD_ADDR_EXP 73
16740: PUSH
16741: LD_INT 0
16743: ST_TO_ADDR
// sRadar := false ;
16744: LD_ADDR_EXP 74
16748: PUSH
16749: LD_INT 0
16751: ST_TO_ADDR
// sBunker := false ;
16752: LD_ADDR_EXP 75
16756: PUSH
16757: LD_INT 0
16759: ST_TO_ADDR
// sHack := false ;
16760: LD_ADDR_EXP 76
16764: PUSH
16765: LD_INT 0
16767: ST_TO_ADDR
// sFire := false ;
16768: LD_ADDR_EXP 77
16772: PUSH
16773: LD_INT 0
16775: ST_TO_ADDR
// sRefresh := false ;
16776: LD_ADDR_EXP 78
16780: PUSH
16781: LD_INT 0
16783: ST_TO_ADDR
// sExp := false ;
16784: LD_ADDR_EXP 79
16788: PUSH
16789: LD_INT 0
16791: ST_TO_ADDR
// sDepot := false ;
16792: LD_ADDR_EXP 80
16796: PUSH
16797: LD_INT 0
16799: ST_TO_ADDR
// sFlag := false ;
16800: LD_ADDR_EXP 81
16804: PUSH
16805: LD_INT 0
16807: ST_TO_ADDR
// sKamikadze := false ;
16808: LD_ADDR_EXP 89
16812: PUSH
16813: LD_INT 0
16815: ST_TO_ADDR
// sTroll := false ;
16816: LD_ADDR_EXP 90
16820: PUSH
16821: LD_INT 0
16823: ST_TO_ADDR
// sSlow := false ;
16824: LD_ADDR_EXP 91
16828: PUSH
16829: LD_INT 0
16831: ST_TO_ADDR
// sLack := false ;
16832: LD_ADDR_EXP 92
16836: PUSH
16837: LD_INT 0
16839: ST_TO_ADDR
// sTank := false ;
16840: LD_ADDR_EXP 94
16844: PUSH
16845: LD_INT 0
16847: ST_TO_ADDR
// sRemote := false ;
16848: LD_ADDR_EXP 95
16852: PUSH
16853: LD_INT 0
16855: ST_TO_ADDR
// sPowell := false ;
16856: LD_ADDR_EXP 96
16860: PUSH
16861: LD_INT 0
16863: ST_TO_ADDR
// sTeleport := false ;
16864: LD_ADDR_EXP 99
16868: PUSH
16869: LD_INT 0
16871: ST_TO_ADDR
// sOilTower := false ;
16872: LD_ADDR_EXP 101
16876: PUSH
16877: LD_INT 0
16879: ST_TO_ADDR
// sShovel := false ;
16880: LD_ADDR_EXP 102
16884: PUSH
16885: LD_INT 0
16887: ST_TO_ADDR
// sSheik := false ;
16888: LD_ADDR_EXP 103
16892: PUSH
16893: LD_INT 0
16895: ST_TO_ADDR
// sEarthquake := false ;
16896: LD_ADDR_EXP 105
16900: PUSH
16901: LD_INT 0
16903: ST_TO_ADDR
// sAI := false ;
16904: LD_ADDR_EXP 106
16908: PUSH
16909: LD_INT 0
16911: ST_TO_ADDR
// sCargo := false ;
16912: LD_ADDR_EXP 109
16916: PUSH
16917: LD_INT 0
16919: ST_TO_ADDR
// sDLaser := false ;
16920: LD_ADDR_EXP 110
16924: PUSH
16925: LD_INT 0
16927: ST_TO_ADDR
// sExchange := false ;
16928: LD_ADDR_EXP 111
16932: PUSH
16933: LD_INT 0
16935: ST_TO_ADDR
// sFac := false ;
16936: LD_ADDR_EXP 112
16940: PUSH
16941: LD_INT 0
16943: ST_TO_ADDR
// sPower := false ;
16944: LD_ADDR_EXP 113
16948: PUSH
16949: LD_INT 0
16951: ST_TO_ADDR
// sRandom := false ;
16952: LD_ADDR_EXP 114
16956: PUSH
16957: LD_INT 0
16959: ST_TO_ADDR
// sShield := false ;
16960: LD_ADDR_EXP 115
16964: PUSH
16965: LD_INT 0
16967: ST_TO_ADDR
// sTime := false ;
16968: LD_ADDR_EXP 116
16972: PUSH
16973: LD_INT 0
16975: ST_TO_ADDR
// sTools := false ;
16976: LD_ADDR_EXP 117
16980: PUSH
16981: LD_INT 0
16983: ST_TO_ADDR
// sSold := false ;
16984: LD_ADDR_EXP 82
16988: PUSH
16989: LD_INT 0
16991: ST_TO_ADDR
// sDiff := false ;
16992: LD_ADDR_EXP 83
16996: PUSH
16997: LD_INT 0
16999: ST_TO_ADDR
// sFog := false ;
17000: LD_ADDR_EXP 86
17004: PUSH
17005: LD_INT 0
17007: ST_TO_ADDR
// sReset := false ;
17008: LD_ADDR_EXP 87
17012: PUSH
17013: LD_INT 0
17015: ST_TO_ADDR
// sSun := false ;
17016: LD_ADDR_EXP 88
17020: PUSH
17021: LD_INT 0
17023: ST_TO_ADDR
// sTiger := false ;
17024: LD_ADDR_EXP 84
17028: PUSH
17029: LD_INT 0
17031: ST_TO_ADDR
// sBomb := false ;
17032: LD_ADDR_EXP 85
17036: PUSH
17037: LD_INT 0
17039: ST_TO_ADDR
// sWound := false ;
17040: LD_ADDR_EXP 93
17044: PUSH
17045: LD_INT 0
17047: ST_TO_ADDR
// sBetray := false ;
17048: LD_ADDR_EXP 97
17052: PUSH
17053: LD_INT 0
17055: ST_TO_ADDR
// sContamin := false ;
17056: LD_ADDR_EXP 98
17060: PUSH
17061: LD_INT 0
17063: ST_TO_ADDR
// sOil := false ;
17064: LD_ADDR_EXP 100
17068: PUSH
17069: LD_INT 0
17071: ST_TO_ADDR
// sStu := false ;
17072: LD_ADDR_EXP 104
17076: PUSH
17077: LD_INT 0
17079: ST_TO_ADDR
// sBazooka := false ;
17080: LD_ADDR_EXP 107
17084: PUSH
17085: LD_INT 0
17087: ST_TO_ADDR
// sMortar := false ;
17088: LD_ADDR_EXP 108
17092: PUSH
17093: LD_INT 0
17095: ST_TO_ADDR
// sRanger := false ;
17096: LD_ADDR_EXP 118
17100: PUSH
17101: LD_INT 0
17103: ST_TO_ADDR
// end ;
17104: LD_VAR 0 1
17108: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
17109: LD_INT 0
17111: PPUSH
17112: PPUSH
17113: PPUSH
17114: PPUSH
17115: PPUSH
// result := [ ] ;
17116: LD_ADDR_VAR 0 1
17120: PUSH
17121: EMPTY
17122: ST_TO_ADDR
// if campaign_id = 1 then
17123: LD_OWVAR 69
17127: PUSH
17128: LD_INT 1
17130: EQUAL
17131: IFFALSE 20069
// begin case mission_number of 1 :
17133: LD_OWVAR 70
17137: PUSH
17138: LD_INT 1
17140: DOUBLE
17141: EQUAL
17142: IFTRUE 17146
17144: GO 17210
17146: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
17147: LD_ADDR_VAR 0 1
17151: PUSH
17152: LD_INT 2
17154: PUSH
17155: LD_INT 4
17157: PUSH
17158: LD_INT 11
17160: PUSH
17161: LD_INT 12
17163: PUSH
17164: LD_INT 15
17166: PUSH
17167: LD_INT 16
17169: PUSH
17170: LD_INT 22
17172: PUSH
17173: LD_INT 23
17175: PUSH
17176: LD_INT 26
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: PUSH
17190: LD_INT 101
17192: PUSH
17193: LD_INT 102
17195: PUSH
17196: LD_INT 106
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: LIST
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: ST_TO_ADDR
17208: GO 20067
17210: LD_INT 2
17212: DOUBLE
17213: EQUAL
17214: IFTRUE 17218
17216: GO 17290
17218: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
17219: LD_ADDR_VAR 0 1
17223: PUSH
17224: LD_INT 2
17226: PUSH
17227: LD_INT 4
17229: PUSH
17230: LD_INT 11
17232: PUSH
17233: LD_INT 12
17235: PUSH
17236: LD_INT 15
17238: PUSH
17239: LD_INT 16
17241: PUSH
17242: LD_INT 22
17244: PUSH
17245: LD_INT 23
17247: PUSH
17248: LD_INT 26
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: PUSH
17262: LD_INT 101
17264: PUSH
17265: LD_INT 102
17267: PUSH
17268: LD_INT 105
17270: PUSH
17271: LD_INT 106
17273: PUSH
17274: LD_INT 108
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: ST_TO_ADDR
17288: GO 20067
17290: LD_INT 3
17292: DOUBLE
17293: EQUAL
17294: IFTRUE 17298
17296: GO 17374
17298: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
17299: LD_ADDR_VAR 0 1
17303: PUSH
17304: LD_INT 2
17306: PUSH
17307: LD_INT 4
17309: PUSH
17310: LD_INT 5
17312: PUSH
17313: LD_INT 11
17315: PUSH
17316: LD_INT 12
17318: PUSH
17319: LD_INT 15
17321: PUSH
17322: LD_INT 16
17324: PUSH
17325: LD_INT 22
17327: PUSH
17328: LD_INT 26
17330: PUSH
17331: LD_INT 36
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: PUSH
17346: LD_INT 101
17348: PUSH
17349: LD_INT 102
17351: PUSH
17352: LD_INT 105
17354: PUSH
17355: LD_INT 106
17357: PUSH
17358: LD_INT 108
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: ST_TO_ADDR
17372: GO 20067
17374: LD_INT 4
17376: DOUBLE
17377: EQUAL
17378: IFTRUE 17382
17380: GO 17466
17382: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
17383: LD_ADDR_VAR 0 1
17387: PUSH
17388: LD_INT 2
17390: PUSH
17391: LD_INT 4
17393: PUSH
17394: LD_INT 5
17396: PUSH
17397: LD_INT 8
17399: PUSH
17400: LD_INT 11
17402: PUSH
17403: LD_INT 12
17405: PUSH
17406: LD_INT 15
17408: PUSH
17409: LD_INT 16
17411: PUSH
17412: LD_INT 22
17414: PUSH
17415: LD_INT 23
17417: PUSH
17418: LD_INT 26
17420: PUSH
17421: LD_INT 36
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: PUSH
17438: LD_INT 101
17440: PUSH
17441: LD_INT 102
17443: PUSH
17444: LD_INT 105
17446: PUSH
17447: LD_INT 106
17449: PUSH
17450: LD_INT 108
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: ST_TO_ADDR
17464: GO 20067
17466: LD_INT 5
17468: DOUBLE
17469: EQUAL
17470: IFTRUE 17474
17472: GO 17574
17474: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
17475: LD_ADDR_VAR 0 1
17479: PUSH
17480: LD_INT 2
17482: PUSH
17483: LD_INT 4
17485: PUSH
17486: LD_INT 5
17488: PUSH
17489: LD_INT 6
17491: PUSH
17492: LD_INT 8
17494: PUSH
17495: LD_INT 11
17497: PUSH
17498: LD_INT 12
17500: PUSH
17501: LD_INT 15
17503: PUSH
17504: LD_INT 16
17506: PUSH
17507: LD_INT 22
17509: PUSH
17510: LD_INT 23
17512: PUSH
17513: LD_INT 25
17515: PUSH
17516: LD_INT 26
17518: PUSH
17519: LD_INT 36
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 101
17540: PUSH
17541: LD_INT 102
17543: PUSH
17544: LD_INT 105
17546: PUSH
17547: LD_INT 106
17549: PUSH
17550: LD_INT 108
17552: PUSH
17553: LD_INT 109
17555: PUSH
17556: LD_INT 112
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: ST_TO_ADDR
17572: GO 20067
17574: LD_INT 6
17576: DOUBLE
17577: EQUAL
17578: IFTRUE 17582
17580: GO 17702
17582: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
17583: LD_ADDR_VAR 0 1
17587: PUSH
17588: LD_INT 2
17590: PUSH
17591: LD_INT 4
17593: PUSH
17594: LD_INT 5
17596: PUSH
17597: LD_INT 6
17599: PUSH
17600: LD_INT 8
17602: PUSH
17603: LD_INT 11
17605: PUSH
17606: LD_INT 12
17608: PUSH
17609: LD_INT 15
17611: PUSH
17612: LD_INT 16
17614: PUSH
17615: LD_INT 20
17617: PUSH
17618: LD_INT 21
17620: PUSH
17621: LD_INT 22
17623: PUSH
17624: LD_INT 23
17626: PUSH
17627: LD_INT 25
17629: PUSH
17630: LD_INT 26
17632: PUSH
17633: LD_INT 30
17635: PUSH
17636: LD_INT 31
17638: PUSH
17639: LD_INT 32
17641: PUSH
17642: LD_INT 36
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: PUSH
17666: LD_INT 101
17668: PUSH
17669: LD_INT 102
17671: PUSH
17672: LD_INT 105
17674: PUSH
17675: LD_INT 106
17677: PUSH
17678: LD_INT 108
17680: PUSH
17681: LD_INT 109
17683: PUSH
17684: LD_INT 112
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: ST_TO_ADDR
17700: GO 20067
17702: LD_INT 7
17704: DOUBLE
17705: EQUAL
17706: IFTRUE 17710
17708: GO 17810
17710: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
17711: LD_ADDR_VAR 0 1
17715: PUSH
17716: LD_INT 2
17718: PUSH
17719: LD_INT 4
17721: PUSH
17722: LD_INT 5
17724: PUSH
17725: LD_INT 7
17727: PUSH
17728: LD_INT 11
17730: PUSH
17731: LD_INT 12
17733: PUSH
17734: LD_INT 15
17736: PUSH
17737: LD_INT 16
17739: PUSH
17740: LD_INT 20
17742: PUSH
17743: LD_INT 21
17745: PUSH
17746: LD_INT 22
17748: PUSH
17749: LD_INT 23
17751: PUSH
17752: LD_INT 25
17754: PUSH
17755: LD_INT 26
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: PUSH
17774: LD_INT 101
17776: PUSH
17777: LD_INT 102
17779: PUSH
17780: LD_INT 103
17782: PUSH
17783: LD_INT 105
17785: PUSH
17786: LD_INT 106
17788: PUSH
17789: LD_INT 108
17791: PUSH
17792: LD_INT 112
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: ST_TO_ADDR
17808: GO 20067
17810: LD_INT 8
17812: DOUBLE
17813: EQUAL
17814: IFTRUE 17818
17816: GO 17946
17818: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
17819: LD_ADDR_VAR 0 1
17823: PUSH
17824: LD_INT 2
17826: PUSH
17827: LD_INT 4
17829: PUSH
17830: LD_INT 5
17832: PUSH
17833: LD_INT 6
17835: PUSH
17836: LD_INT 7
17838: PUSH
17839: LD_INT 8
17841: PUSH
17842: LD_INT 11
17844: PUSH
17845: LD_INT 12
17847: PUSH
17848: LD_INT 15
17850: PUSH
17851: LD_INT 16
17853: PUSH
17854: LD_INT 20
17856: PUSH
17857: LD_INT 21
17859: PUSH
17860: LD_INT 22
17862: PUSH
17863: LD_INT 23
17865: PUSH
17866: LD_INT 25
17868: PUSH
17869: LD_INT 26
17871: PUSH
17872: LD_INT 30
17874: PUSH
17875: LD_INT 31
17877: PUSH
17878: LD_INT 32
17880: PUSH
17881: LD_INT 36
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: PUSH
17906: LD_INT 101
17908: PUSH
17909: LD_INT 102
17911: PUSH
17912: LD_INT 103
17914: PUSH
17915: LD_INT 105
17917: PUSH
17918: LD_INT 106
17920: PUSH
17921: LD_INT 108
17923: PUSH
17924: LD_INT 109
17926: PUSH
17927: LD_INT 112
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: ST_TO_ADDR
17944: GO 20067
17946: LD_INT 9
17948: DOUBLE
17949: EQUAL
17950: IFTRUE 17954
17952: GO 18090
17954: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
17955: LD_ADDR_VAR 0 1
17959: PUSH
17960: LD_INT 2
17962: PUSH
17963: LD_INT 4
17965: PUSH
17966: LD_INT 5
17968: PUSH
17969: LD_INT 6
17971: PUSH
17972: LD_INT 7
17974: PUSH
17975: LD_INT 8
17977: PUSH
17978: LD_INT 11
17980: PUSH
17981: LD_INT 12
17983: PUSH
17984: LD_INT 15
17986: PUSH
17987: LD_INT 16
17989: PUSH
17990: LD_INT 20
17992: PUSH
17993: LD_INT 21
17995: PUSH
17996: LD_INT 22
17998: PUSH
17999: LD_INT 23
18001: PUSH
18002: LD_INT 25
18004: PUSH
18005: LD_INT 26
18007: PUSH
18008: LD_INT 28
18010: PUSH
18011: LD_INT 30
18013: PUSH
18014: LD_INT 31
18016: PUSH
18017: LD_INT 32
18019: PUSH
18020: LD_INT 36
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: PUSH
18046: LD_INT 101
18048: PUSH
18049: LD_INT 102
18051: PUSH
18052: LD_INT 103
18054: PUSH
18055: LD_INT 105
18057: PUSH
18058: LD_INT 106
18060: PUSH
18061: LD_INT 108
18063: PUSH
18064: LD_INT 109
18066: PUSH
18067: LD_INT 112
18069: PUSH
18070: LD_INT 114
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: ST_TO_ADDR
18088: GO 20067
18090: LD_INT 10
18092: DOUBLE
18093: EQUAL
18094: IFTRUE 18098
18096: GO 18282
18098: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
18099: LD_ADDR_VAR 0 1
18103: PUSH
18104: LD_INT 2
18106: PUSH
18107: LD_INT 4
18109: PUSH
18110: LD_INT 5
18112: PUSH
18113: LD_INT 6
18115: PUSH
18116: LD_INT 7
18118: PUSH
18119: LD_INT 8
18121: PUSH
18122: LD_INT 9
18124: PUSH
18125: LD_INT 10
18127: PUSH
18128: LD_INT 11
18130: PUSH
18131: LD_INT 12
18133: PUSH
18134: LD_INT 13
18136: PUSH
18137: LD_INT 14
18139: PUSH
18140: LD_INT 15
18142: PUSH
18143: LD_INT 16
18145: PUSH
18146: LD_INT 17
18148: PUSH
18149: LD_INT 18
18151: PUSH
18152: LD_INT 19
18154: PUSH
18155: LD_INT 20
18157: PUSH
18158: LD_INT 21
18160: PUSH
18161: LD_INT 22
18163: PUSH
18164: LD_INT 23
18166: PUSH
18167: LD_INT 24
18169: PUSH
18170: LD_INT 25
18172: PUSH
18173: LD_INT 26
18175: PUSH
18176: LD_INT 28
18178: PUSH
18179: LD_INT 30
18181: PUSH
18182: LD_INT 31
18184: PUSH
18185: LD_INT 32
18187: PUSH
18188: LD_INT 36
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 101
18224: PUSH
18225: LD_INT 102
18227: PUSH
18228: LD_INT 103
18230: PUSH
18231: LD_INT 104
18233: PUSH
18234: LD_INT 105
18236: PUSH
18237: LD_INT 106
18239: PUSH
18240: LD_INT 107
18242: PUSH
18243: LD_INT 108
18245: PUSH
18246: LD_INT 109
18248: PUSH
18249: LD_INT 110
18251: PUSH
18252: LD_INT 111
18254: PUSH
18255: LD_INT 112
18257: PUSH
18258: LD_INT 114
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: ST_TO_ADDR
18280: GO 20067
18282: LD_INT 11
18284: DOUBLE
18285: EQUAL
18286: IFTRUE 18290
18288: GO 18482
18290: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
18291: LD_ADDR_VAR 0 1
18295: PUSH
18296: LD_INT 2
18298: PUSH
18299: LD_INT 3
18301: PUSH
18302: LD_INT 4
18304: PUSH
18305: LD_INT 5
18307: PUSH
18308: LD_INT 6
18310: PUSH
18311: LD_INT 7
18313: PUSH
18314: LD_INT 8
18316: PUSH
18317: LD_INT 9
18319: PUSH
18320: LD_INT 10
18322: PUSH
18323: LD_INT 11
18325: PUSH
18326: LD_INT 12
18328: PUSH
18329: LD_INT 13
18331: PUSH
18332: LD_INT 14
18334: PUSH
18335: LD_INT 15
18337: PUSH
18338: LD_INT 16
18340: PUSH
18341: LD_INT 17
18343: PUSH
18344: LD_INT 18
18346: PUSH
18347: LD_INT 19
18349: PUSH
18350: LD_INT 20
18352: PUSH
18353: LD_INT 21
18355: PUSH
18356: LD_INT 22
18358: PUSH
18359: LD_INT 23
18361: PUSH
18362: LD_INT 24
18364: PUSH
18365: LD_INT 25
18367: PUSH
18368: LD_INT 26
18370: PUSH
18371: LD_INT 28
18373: PUSH
18374: LD_INT 30
18376: PUSH
18377: LD_INT 31
18379: PUSH
18380: LD_INT 32
18382: PUSH
18383: LD_INT 34
18385: PUSH
18386: LD_INT 36
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 101
18424: PUSH
18425: LD_INT 102
18427: PUSH
18428: LD_INT 103
18430: PUSH
18431: LD_INT 104
18433: PUSH
18434: LD_INT 105
18436: PUSH
18437: LD_INT 106
18439: PUSH
18440: LD_INT 107
18442: PUSH
18443: LD_INT 108
18445: PUSH
18446: LD_INT 109
18448: PUSH
18449: LD_INT 110
18451: PUSH
18452: LD_INT 111
18454: PUSH
18455: LD_INT 112
18457: PUSH
18458: LD_INT 114
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: ST_TO_ADDR
18480: GO 20067
18482: LD_INT 12
18484: DOUBLE
18485: EQUAL
18486: IFTRUE 18490
18488: GO 18698
18490: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
18491: LD_ADDR_VAR 0 1
18495: PUSH
18496: LD_INT 1
18498: PUSH
18499: LD_INT 2
18501: PUSH
18502: LD_INT 3
18504: PUSH
18505: LD_INT 4
18507: PUSH
18508: LD_INT 5
18510: PUSH
18511: LD_INT 6
18513: PUSH
18514: LD_INT 7
18516: PUSH
18517: LD_INT 8
18519: PUSH
18520: LD_INT 9
18522: PUSH
18523: LD_INT 10
18525: PUSH
18526: LD_INT 11
18528: PUSH
18529: LD_INT 12
18531: PUSH
18532: LD_INT 13
18534: PUSH
18535: LD_INT 14
18537: PUSH
18538: LD_INT 15
18540: PUSH
18541: LD_INT 16
18543: PUSH
18544: LD_INT 17
18546: PUSH
18547: LD_INT 18
18549: PUSH
18550: LD_INT 19
18552: PUSH
18553: LD_INT 20
18555: PUSH
18556: LD_INT 21
18558: PUSH
18559: LD_INT 22
18561: PUSH
18562: LD_INT 23
18564: PUSH
18565: LD_INT 24
18567: PUSH
18568: LD_INT 25
18570: PUSH
18571: LD_INT 26
18573: PUSH
18574: LD_INT 27
18576: PUSH
18577: LD_INT 28
18579: PUSH
18580: LD_INT 30
18582: PUSH
18583: LD_INT 31
18585: PUSH
18586: LD_INT 32
18588: PUSH
18589: LD_INT 33
18591: PUSH
18592: LD_INT 34
18594: PUSH
18595: LD_INT 36
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: PUSH
18634: LD_INT 101
18636: PUSH
18637: LD_INT 102
18639: PUSH
18640: LD_INT 103
18642: PUSH
18643: LD_INT 104
18645: PUSH
18646: LD_INT 105
18648: PUSH
18649: LD_INT 106
18651: PUSH
18652: LD_INT 107
18654: PUSH
18655: LD_INT 108
18657: PUSH
18658: LD_INT 109
18660: PUSH
18661: LD_INT 110
18663: PUSH
18664: LD_INT 111
18666: PUSH
18667: LD_INT 112
18669: PUSH
18670: LD_INT 113
18672: PUSH
18673: LD_INT 114
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: ST_TO_ADDR
18696: GO 20067
18698: LD_INT 13
18700: DOUBLE
18701: EQUAL
18702: IFTRUE 18706
18704: GO 18902
18706: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
18707: LD_ADDR_VAR 0 1
18711: PUSH
18712: LD_INT 1
18714: PUSH
18715: LD_INT 2
18717: PUSH
18718: LD_INT 3
18720: PUSH
18721: LD_INT 4
18723: PUSH
18724: LD_INT 5
18726: PUSH
18727: LD_INT 8
18729: PUSH
18730: LD_INT 9
18732: PUSH
18733: LD_INT 10
18735: PUSH
18736: LD_INT 11
18738: PUSH
18739: LD_INT 12
18741: PUSH
18742: LD_INT 14
18744: PUSH
18745: LD_INT 15
18747: PUSH
18748: LD_INT 16
18750: PUSH
18751: LD_INT 17
18753: PUSH
18754: LD_INT 18
18756: PUSH
18757: LD_INT 19
18759: PUSH
18760: LD_INT 20
18762: PUSH
18763: LD_INT 21
18765: PUSH
18766: LD_INT 22
18768: PUSH
18769: LD_INT 23
18771: PUSH
18772: LD_INT 24
18774: PUSH
18775: LD_INT 25
18777: PUSH
18778: LD_INT 26
18780: PUSH
18781: LD_INT 27
18783: PUSH
18784: LD_INT 28
18786: PUSH
18787: LD_INT 30
18789: PUSH
18790: LD_INT 31
18792: PUSH
18793: LD_INT 32
18795: PUSH
18796: LD_INT 33
18798: PUSH
18799: LD_INT 34
18801: PUSH
18802: LD_INT 36
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 101
18840: PUSH
18841: LD_INT 102
18843: PUSH
18844: LD_INT 103
18846: PUSH
18847: LD_INT 104
18849: PUSH
18850: LD_INT 105
18852: PUSH
18853: LD_INT 106
18855: PUSH
18856: LD_INT 107
18858: PUSH
18859: LD_INT 108
18861: PUSH
18862: LD_INT 109
18864: PUSH
18865: LD_INT 110
18867: PUSH
18868: LD_INT 111
18870: PUSH
18871: LD_INT 112
18873: PUSH
18874: LD_INT 113
18876: PUSH
18877: LD_INT 114
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: ST_TO_ADDR
18900: GO 20067
18902: LD_INT 14
18904: DOUBLE
18905: EQUAL
18906: IFTRUE 18910
18908: GO 19122
18910: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
18911: LD_ADDR_VAR 0 1
18915: PUSH
18916: LD_INT 1
18918: PUSH
18919: LD_INT 2
18921: PUSH
18922: LD_INT 3
18924: PUSH
18925: LD_INT 4
18927: PUSH
18928: LD_INT 5
18930: PUSH
18931: LD_INT 6
18933: PUSH
18934: LD_INT 7
18936: PUSH
18937: LD_INT 8
18939: PUSH
18940: LD_INT 9
18942: PUSH
18943: LD_INT 10
18945: PUSH
18946: LD_INT 11
18948: PUSH
18949: LD_INT 12
18951: PUSH
18952: LD_INT 13
18954: PUSH
18955: LD_INT 14
18957: PUSH
18958: LD_INT 15
18960: PUSH
18961: LD_INT 16
18963: PUSH
18964: LD_INT 17
18966: PUSH
18967: LD_INT 18
18969: PUSH
18970: LD_INT 19
18972: PUSH
18973: LD_INT 20
18975: PUSH
18976: LD_INT 21
18978: PUSH
18979: LD_INT 22
18981: PUSH
18982: LD_INT 23
18984: PUSH
18985: LD_INT 24
18987: PUSH
18988: LD_INT 25
18990: PUSH
18991: LD_INT 26
18993: PUSH
18994: LD_INT 27
18996: PUSH
18997: LD_INT 28
18999: PUSH
19000: LD_INT 29
19002: PUSH
19003: LD_INT 30
19005: PUSH
19006: LD_INT 31
19008: PUSH
19009: LD_INT 32
19011: PUSH
19012: LD_INT 33
19014: PUSH
19015: LD_INT 34
19017: PUSH
19018: LD_INT 36
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 101
19060: PUSH
19061: LD_INT 102
19063: PUSH
19064: LD_INT 103
19066: PUSH
19067: LD_INT 104
19069: PUSH
19070: LD_INT 105
19072: PUSH
19073: LD_INT 106
19075: PUSH
19076: LD_INT 107
19078: PUSH
19079: LD_INT 108
19081: PUSH
19082: LD_INT 109
19084: PUSH
19085: LD_INT 110
19087: PUSH
19088: LD_INT 111
19090: PUSH
19091: LD_INT 112
19093: PUSH
19094: LD_INT 113
19096: PUSH
19097: LD_INT 114
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: ST_TO_ADDR
19120: GO 20067
19122: LD_INT 15
19124: DOUBLE
19125: EQUAL
19126: IFTRUE 19130
19128: GO 19342
19130: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
19131: LD_ADDR_VAR 0 1
19135: PUSH
19136: LD_INT 1
19138: PUSH
19139: LD_INT 2
19141: PUSH
19142: LD_INT 3
19144: PUSH
19145: LD_INT 4
19147: PUSH
19148: LD_INT 5
19150: PUSH
19151: LD_INT 6
19153: PUSH
19154: LD_INT 7
19156: PUSH
19157: LD_INT 8
19159: PUSH
19160: LD_INT 9
19162: PUSH
19163: LD_INT 10
19165: PUSH
19166: LD_INT 11
19168: PUSH
19169: LD_INT 12
19171: PUSH
19172: LD_INT 13
19174: PUSH
19175: LD_INT 14
19177: PUSH
19178: LD_INT 15
19180: PUSH
19181: LD_INT 16
19183: PUSH
19184: LD_INT 17
19186: PUSH
19187: LD_INT 18
19189: PUSH
19190: LD_INT 19
19192: PUSH
19193: LD_INT 20
19195: PUSH
19196: LD_INT 21
19198: PUSH
19199: LD_INT 22
19201: PUSH
19202: LD_INT 23
19204: PUSH
19205: LD_INT 24
19207: PUSH
19208: LD_INT 25
19210: PUSH
19211: LD_INT 26
19213: PUSH
19214: LD_INT 27
19216: PUSH
19217: LD_INT 28
19219: PUSH
19220: LD_INT 29
19222: PUSH
19223: LD_INT 30
19225: PUSH
19226: LD_INT 31
19228: PUSH
19229: LD_INT 32
19231: PUSH
19232: LD_INT 33
19234: PUSH
19235: LD_INT 34
19237: PUSH
19238: LD_INT 36
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: PUSH
19278: LD_INT 101
19280: PUSH
19281: LD_INT 102
19283: PUSH
19284: LD_INT 103
19286: PUSH
19287: LD_INT 104
19289: PUSH
19290: LD_INT 105
19292: PUSH
19293: LD_INT 106
19295: PUSH
19296: LD_INT 107
19298: PUSH
19299: LD_INT 108
19301: PUSH
19302: LD_INT 109
19304: PUSH
19305: LD_INT 110
19307: PUSH
19308: LD_INT 111
19310: PUSH
19311: LD_INT 112
19313: PUSH
19314: LD_INT 113
19316: PUSH
19317: LD_INT 114
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: ST_TO_ADDR
19340: GO 20067
19342: LD_INT 16
19344: DOUBLE
19345: EQUAL
19346: IFTRUE 19350
19348: GO 19474
19350: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
19351: LD_ADDR_VAR 0 1
19355: PUSH
19356: LD_INT 2
19358: PUSH
19359: LD_INT 4
19361: PUSH
19362: LD_INT 5
19364: PUSH
19365: LD_INT 7
19367: PUSH
19368: LD_INT 11
19370: PUSH
19371: LD_INT 12
19373: PUSH
19374: LD_INT 15
19376: PUSH
19377: LD_INT 16
19379: PUSH
19380: LD_INT 20
19382: PUSH
19383: LD_INT 21
19385: PUSH
19386: LD_INT 22
19388: PUSH
19389: LD_INT 23
19391: PUSH
19392: LD_INT 25
19394: PUSH
19395: LD_INT 26
19397: PUSH
19398: LD_INT 30
19400: PUSH
19401: LD_INT 31
19403: PUSH
19404: LD_INT 32
19406: PUSH
19407: LD_INT 33
19409: PUSH
19410: LD_INT 34
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 101
19436: PUSH
19437: LD_INT 102
19439: PUSH
19440: LD_INT 103
19442: PUSH
19443: LD_INT 106
19445: PUSH
19446: LD_INT 108
19448: PUSH
19449: LD_INT 112
19451: PUSH
19452: LD_INT 113
19454: PUSH
19455: LD_INT 114
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: ST_TO_ADDR
19472: GO 20067
19474: LD_INT 17
19476: DOUBLE
19477: EQUAL
19478: IFTRUE 19482
19480: GO 19694
19482: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
19483: LD_ADDR_VAR 0 1
19487: PUSH
19488: LD_INT 1
19490: PUSH
19491: LD_INT 2
19493: PUSH
19494: LD_INT 3
19496: PUSH
19497: LD_INT 4
19499: PUSH
19500: LD_INT 5
19502: PUSH
19503: LD_INT 6
19505: PUSH
19506: LD_INT 7
19508: PUSH
19509: LD_INT 8
19511: PUSH
19512: LD_INT 9
19514: PUSH
19515: LD_INT 10
19517: PUSH
19518: LD_INT 11
19520: PUSH
19521: LD_INT 12
19523: PUSH
19524: LD_INT 13
19526: PUSH
19527: LD_INT 14
19529: PUSH
19530: LD_INT 15
19532: PUSH
19533: LD_INT 16
19535: PUSH
19536: LD_INT 17
19538: PUSH
19539: LD_INT 18
19541: PUSH
19542: LD_INT 19
19544: PUSH
19545: LD_INT 20
19547: PUSH
19548: LD_INT 21
19550: PUSH
19551: LD_INT 22
19553: PUSH
19554: LD_INT 23
19556: PUSH
19557: LD_INT 24
19559: PUSH
19560: LD_INT 25
19562: PUSH
19563: LD_INT 26
19565: PUSH
19566: LD_INT 27
19568: PUSH
19569: LD_INT 28
19571: PUSH
19572: LD_INT 29
19574: PUSH
19575: LD_INT 30
19577: PUSH
19578: LD_INT 31
19580: PUSH
19581: LD_INT 32
19583: PUSH
19584: LD_INT 33
19586: PUSH
19587: LD_INT 34
19589: PUSH
19590: LD_INT 36
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 101
19632: PUSH
19633: LD_INT 102
19635: PUSH
19636: LD_INT 103
19638: PUSH
19639: LD_INT 104
19641: PUSH
19642: LD_INT 105
19644: PUSH
19645: LD_INT 106
19647: PUSH
19648: LD_INT 107
19650: PUSH
19651: LD_INT 108
19653: PUSH
19654: LD_INT 109
19656: PUSH
19657: LD_INT 110
19659: PUSH
19660: LD_INT 111
19662: PUSH
19663: LD_INT 112
19665: PUSH
19666: LD_INT 113
19668: PUSH
19669: LD_INT 114
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: ST_TO_ADDR
19692: GO 20067
19694: LD_INT 18
19696: DOUBLE
19697: EQUAL
19698: IFTRUE 19702
19700: GO 19838
19702: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
19703: LD_ADDR_VAR 0 1
19707: PUSH
19708: LD_INT 2
19710: PUSH
19711: LD_INT 4
19713: PUSH
19714: LD_INT 5
19716: PUSH
19717: LD_INT 7
19719: PUSH
19720: LD_INT 11
19722: PUSH
19723: LD_INT 12
19725: PUSH
19726: LD_INT 15
19728: PUSH
19729: LD_INT 16
19731: PUSH
19732: LD_INT 20
19734: PUSH
19735: LD_INT 21
19737: PUSH
19738: LD_INT 22
19740: PUSH
19741: LD_INT 23
19743: PUSH
19744: LD_INT 25
19746: PUSH
19747: LD_INT 26
19749: PUSH
19750: LD_INT 30
19752: PUSH
19753: LD_INT 31
19755: PUSH
19756: LD_INT 32
19758: PUSH
19759: LD_INT 33
19761: PUSH
19762: LD_INT 34
19764: PUSH
19765: LD_INT 35
19767: PUSH
19768: LD_INT 36
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: PUSH
19794: LD_INT 101
19796: PUSH
19797: LD_INT 102
19799: PUSH
19800: LD_INT 103
19802: PUSH
19803: LD_INT 106
19805: PUSH
19806: LD_INT 108
19808: PUSH
19809: LD_INT 112
19811: PUSH
19812: LD_INT 113
19814: PUSH
19815: LD_INT 114
19817: PUSH
19818: LD_INT 115
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: ST_TO_ADDR
19836: GO 20067
19838: LD_INT 19
19840: DOUBLE
19841: EQUAL
19842: IFTRUE 19846
19844: GO 20066
19846: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
19847: LD_ADDR_VAR 0 1
19851: PUSH
19852: LD_INT 1
19854: PUSH
19855: LD_INT 2
19857: PUSH
19858: LD_INT 3
19860: PUSH
19861: LD_INT 4
19863: PUSH
19864: LD_INT 5
19866: PUSH
19867: LD_INT 6
19869: PUSH
19870: LD_INT 7
19872: PUSH
19873: LD_INT 8
19875: PUSH
19876: LD_INT 9
19878: PUSH
19879: LD_INT 10
19881: PUSH
19882: LD_INT 11
19884: PUSH
19885: LD_INT 12
19887: PUSH
19888: LD_INT 13
19890: PUSH
19891: LD_INT 14
19893: PUSH
19894: LD_INT 15
19896: PUSH
19897: LD_INT 16
19899: PUSH
19900: LD_INT 17
19902: PUSH
19903: LD_INT 18
19905: PUSH
19906: LD_INT 19
19908: PUSH
19909: LD_INT 20
19911: PUSH
19912: LD_INT 21
19914: PUSH
19915: LD_INT 22
19917: PUSH
19918: LD_INT 23
19920: PUSH
19921: LD_INT 24
19923: PUSH
19924: LD_INT 25
19926: PUSH
19927: LD_INT 26
19929: PUSH
19930: LD_INT 27
19932: PUSH
19933: LD_INT 28
19935: PUSH
19936: LD_INT 29
19938: PUSH
19939: LD_INT 30
19941: PUSH
19942: LD_INT 31
19944: PUSH
19945: LD_INT 32
19947: PUSH
19948: LD_INT 33
19950: PUSH
19951: LD_INT 34
19953: PUSH
19954: LD_INT 35
19956: PUSH
19957: LD_INT 36
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: PUSH
19998: LD_INT 101
20000: PUSH
20001: LD_INT 102
20003: PUSH
20004: LD_INT 103
20006: PUSH
20007: LD_INT 104
20009: PUSH
20010: LD_INT 105
20012: PUSH
20013: LD_INT 106
20015: PUSH
20016: LD_INT 107
20018: PUSH
20019: LD_INT 108
20021: PUSH
20022: LD_INT 109
20024: PUSH
20025: LD_INT 110
20027: PUSH
20028: LD_INT 111
20030: PUSH
20031: LD_INT 112
20033: PUSH
20034: LD_INT 113
20036: PUSH
20037: LD_INT 114
20039: PUSH
20040: LD_INT 115
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: ST_TO_ADDR
20064: GO 20067
20066: POP
// end else
20067: GO 20286
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
20069: LD_ADDR_VAR 0 1
20073: PUSH
20074: LD_INT 1
20076: PUSH
20077: LD_INT 2
20079: PUSH
20080: LD_INT 3
20082: PUSH
20083: LD_INT 4
20085: PUSH
20086: LD_INT 5
20088: PUSH
20089: LD_INT 6
20091: PUSH
20092: LD_INT 7
20094: PUSH
20095: LD_INT 8
20097: PUSH
20098: LD_INT 9
20100: PUSH
20101: LD_INT 10
20103: PUSH
20104: LD_INT 11
20106: PUSH
20107: LD_INT 12
20109: PUSH
20110: LD_INT 13
20112: PUSH
20113: LD_INT 14
20115: PUSH
20116: LD_INT 15
20118: PUSH
20119: LD_INT 16
20121: PUSH
20122: LD_INT 17
20124: PUSH
20125: LD_INT 18
20127: PUSH
20128: LD_INT 19
20130: PUSH
20131: LD_INT 20
20133: PUSH
20134: LD_INT 21
20136: PUSH
20137: LD_INT 22
20139: PUSH
20140: LD_INT 23
20142: PUSH
20143: LD_INT 24
20145: PUSH
20146: LD_INT 25
20148: PUSH
20149: LD_INT 26
20151: PUSH
20152: LD_INT 27
20154: PUSH
20155: LD_INT 28
20157: PUSH
20158: LD_INT 29
20160: PUSH
20161: LD_INT 30
20163: PUSH
20164: LD_INT 31
20166: PUSH
20167: LD_INT 32
20169: PUSH
20170: LD_INT 33
20172: PUSH
20173: LD_INT 34
20175: PUSH
20176: LD_INT 35
20178: PUSH
20179: LD_INT 36
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: PUSH
20220: LD_INT 101
20222: PUSH
20223: LD_INT 102
20225: PUSH
20226: LD_INT 103
20228: PUSH
20229: LD_INT 104
20231: PUSH
20232: LD_INT 105
20234: PUSH
20235: LD_INT 106
20237: PUSH
20238: LD_INT 107
20240: PUSH
20241: LD_INT 108
20243: PUSH
20244: LD_INT 109
20246: PUSH
20247: LD_INT 110
20249: PUSH
20250: LD_INT 111
20252: PUSH
20253: LD_INT 112
20255: PUSH
20256: LD_INT 113
20258: PUSH
20259: LD_INT 114
20261: PUSH
20262: LD_INT 115
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: ST_TO_ADDR
// if result then
20286: LD_VAR 0 1
20290: IFFALSE 20579
// begin normal :=  ;
20292: LD_ADDR_VAR 0 3
20296: PUSH
20297: LD_STRING 
20299: ST_TO_ADDR
// hardcore :=  ;
20300: LD_ADDR_VAR 0 4
20304: PUSH
20305: LD_STRING 
20307: ST_TO_ADDR
// for i = 1 to normalCounter do
20308: LD_ADDR_VAR 0 5
20312: PUSH
20313: DOUBLE
20314: LD_INT 1
20316: DEC
20317: ST_TO_ADDR
20318: LD_EXP 66
20322: PUSH
20323: FOR_TO
20324: IFFALSE 20425
// begin tmp := 0 ;
20326: LD_ADDR_VAR 0 2
20330: PUSH
20331: LD_STRING 0
20333: ST_TO_ADDR
// if result [ 1 ] then
20334: LD_VAR 0 1
20338: PUSH
20339: LD_INT 1
20341: ARRAY
20342: IFFALSE 20407
// if result [ 1 ] [ 1 ] = i then
20344: LD_VAR 0 1
20348: PUSH
20349: LD_INT 1
20351: ARRAY
20352: PUSH
20353: LD_INT 1
20355: ARRAY
20356: PUSH
20357: LD_VAR 0 5
20361: EQUAL
20362: IFFALSE 20407
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20364: LD_ADDR_VAR 0 1
20368: PUSH
20369: LD_VAR 0 1
20373: PPUSH
20374: LD_INT 1
20376: PPUSH
20377: LD_VAR 0 1
20381: PUSH
20382: LD_INT 1
20384: ARRAY
20385: PPUSH
20386: LD_INT 1
20388: PPUSH
20389: CALL_OW 3
20393: PPUSH
20394: CALL_OW 1
20398: ST_TO_ADDR
// tmp := 1 ;
20399: LD_ADDR_VAR 0 2
20403: PUSH
20404: LD_STRING 1
20406: ST_TO_ADDR
// end ; normal := normal & tmp ;
20407: LD_ADDR_VAR 0 3
20411: PUSH
20412: LD_VAR 0 3
20416: PUSH
20417: LD_VAR 0 2
20421: STR
20422: ST_TO_ADDR
// end ;
20423: GO 20323
20425: POP
20426: POP
// for i = 1 to hardcoreCounter do
20427: LD_ADDR_VAR 0 5
20431: PUSH
20432: DOUBLE
20433: LD_INT 1
20435: DEC
20436: ST_TO_ADDR
20437: LD_EXP 67
20441: PUSH
20442: FOR_TO
20443: IFFALSE 20548
// begin tmp := 0 ;
20445: LD_ADDR_VAR 0 2
20449: PUSH
20450: LD_STRING 0
20452: ST_TO_ADDR
// if result [ 2 ] then
20453: LD_VAR 0 1
20457: PUSH
20458: LD_INT 2
20460: ARRAY
20461: IFFALSE 20530
// if result [ 2 ] [ 1 ] = 100 + i then
20463: LD_VAR 0 1
20467: PUSH
20468: LD_INT 2
20470: ARRAY
20471: PUSH
20472: LD_INT 1
20474: ARRAY
20475: PUSH
20476: LD_INT 100
20478: PUSH
20479: LD_VAR 0 5
20483: PLUS
20484: EQUAL
20485: IFFALSE 20530
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20487: LD_ADDR_VAR 0 1
20491: PUSH
20492: LD_VAR 0 1
20496: PPUSH
20497: LD_INT 2
20499: PPUSH
20500: LD_VAR 0 1
20504: PUSH
20505: LD_INT 2
20507: ARRAY
20508: PPUSH
20509: LD_INT 1
20511: PPUSH
20512: CALL_OW 3
20516: PPUSH
20517: CALL_OW 1
20521: ST_TO_ADDR
// tmp := 1 ;
20522: LD_ADDR_VAR 0 2
20526: PUSH
20527: LD_STRING 1
20529: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20530: LD_ADDR_VAR 0 4
20534: PUSH
20535: LD_VAR 0 4
20539: PUSH
20540: LD_VAR 0 2
20544: STR
20545: ST_TO_ADDR
// end ;
20546: GO 20442
20548: POP
20549: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
20550: LD_STRING getStreamItemsFromMission("
20552: PUSH
20553: LD_VAR 0 3
20557: STR
20558: PUSH
20559: LD_STRING ","
20561: STR
20562: PUSH
20563: LD_VAR 0 4
20567: STR
20568: PUSH
20569: LD_STRING ")
20571: STR
20572: PPUSH
20573: CALL_OW 559
// end else
20577: GO 20586
// ToLua ( getStreamItemsFromMission("","") ) ;
20579: LD_STRING getStreamItemsFromMission("","")
20581: PPUSH
20582: CALL_OW 559
// end ;
20586: LD_VAR 0 1
20590: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20591: LD_EXP 65
20595: PUSH
20596: LD_EXP 70
20600: AND
20601: IFFALSE 20725
20603: GO 20605
20605: DISABLE
20606: LD_INT 0
20608: PPUSH
20609: PPUSH
// begin enable ;
20610: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20611: LD_ADDR_VAR 0 2
20615: PUSH
20616: LD_INT 22
20618: PUSH
20619: LD_OWVAR 2
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: PUSH
20628: LD_INT 2
20630: PUSH
20631: LD_INT 34
20633: PUSH
20634: LD_INT 7
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: LD_INT 34
20643: PUSH
20644: LD_INT 45
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PUSH
20651: LD_INT 34
20653: PUSH
20654: LD_INT 28
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 34
20663: PUSH
20664: LD_INT 47
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PPUSH
20682: CALL_OW 69
20686: ST_TO_ADDR
// if not tmp then
20687: LD_VAR 0 2
20691: NOT
20692: IFFALSE 20696
// exit ;
20694: GO 20725
// for i in tmp do
20696: LD_ADDR_VAR 0 1
20700: PUSH
20701: LD_VAR 0 2
20705: PUSH
20706: FOR_IN
20707: IFFALSE 20723
// begin SetLives ( i , 0 ) ;
20709: LD_VAR 0 1
20713: PPUSH
20714: LD_INT 0
20716: PPUSH
20717: CALL_OW 234
// end ;
20721: GO 20706
20723: POP
20724: POP
// end ;
20725: PPOPN 2
20727: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20728: LD_EXP 65
20732: PUSH
20733: LD_EXP 71
20737: AND
20738: IFFALSE 20822
20740: GO 20742
20742: DISABLE
20743: LD_INT 0
20745: PPUSH
20746: PPUSH
// begin enable ;
20747: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20748: LD_ADDR_VAR 0 2
20752: PUSH
20753: LD_INT 22
20755: PUSH
20756: LD_OWVAR 2
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: PUSH
20765: LD_INT 32
20767: PUSH
20768: LD_INT 3
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PPUSH
20779: CALL_OW 69
20783: ST_TO_ADDR
// if not tmp then
20784: LD_VAR 0 2
20788: NOT
20789: IFFALSE 20793
// exit ;
20791: GO 20822
// for i in tmp do
20793: LD_ADDR_VAR 0 1
20797: PUSH
20798: LD_VAR 0 2
20802: PUSH
20803: FOR_IN
20804: IFFALSE 20820
// begin SetLives ( i , 0 ) ;
20806: LD_VAR 0 1
20810: PPUSH
20811: LD_INT 0
20813: PPUSH
20814: CALL_OW 234
// end ;
20818: GO 20803
20820: POP
20821: POP
// end ;
20822: PPOPN 2
20824: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20825: LD_EXP 65
20829: PUSH
20830: LD_EXP 68
20834: AND
20835: IFFALSE 20928
20837: GO 20839
20839: DISABLE
20840: LD_INT 0
20842: PPUSH
// begin enable ;
20843: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20844: LD_ADDR_VAR 0 1
20848: PUSH
20849: LD_INT 22
20851: PUSH
20852: LD_OWVAR 2
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 2
20863: PUSH
20864: LD_INT 25
20866: PUSH
20867: LD_INT 5
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 25
20876: PUSH
20877: LD_INT 9
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PUSH
20884: LD_INT 25
20886: PUSH
20887: LD_INT 8
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PPUSH
20904: CALL_OW 69
20908: PUSH
20909: FOR_IN
20910: IFFALSE 20926
// begin SetClass ( i , 1 ) ;
20912: LD_VAR 0 1
20916: PPUSH
20917: LD_INT 1
20919: PPUSH
20920: CALL_OW 336
// end ;
20924: GO 20909
20926: POP
20927: POP
// end ;
20928: PPOPN 1
20930: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20931: LD_EXP 65
20935: PUSH
20936: LD_EXP 69
20940: AND
20941: PUSH
20942: LD_OWVAR 65
20946: PUSH
20947: LD_INT 7
20949: LESS
20950: AND
20951: IFFALSE 20965
20953: GO 20955
20955: DISABLE
// begin enable ;
20956: ENABLE
// game_speed := 7 ;
20957: LD_ADDR_OWVAR 65
20961: PUSH
20962: LD_INT 7
20964: ST_TO_ADDR
// end ;
20965: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20966: LD_EXP 65
20970: PUSH
20971: LD_EXP 72
20975: AND
20976: IFFALSE 21178
20978: GO 20980
20980: DISABLE
20981: LD_INT 0
20983: PPUSH
20984: PPUSH
20985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20986: LD_ADDR_VAR 0 3
20990: PUSH
20991: LD_INT 81
20993: PUSH
20994: LD_OWVAR 2
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: LD_INT 21
21005: PUSH
21006: LD_INT 1
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PPUSH
21017: CALL_OW 69
21021: ST_TO_ADDR
// if not tmp then
21022: LD_VAR 0 3
21026: NOT
21027: IFFALSE 21031
// exit ;
21029: GO 21178
// if tmp > 5 then
21031: LD_VAR 0 3
21035: PUSH
21036: LD_INT 5
21038: GREATER
21039: IFFALSE 21051
// k := 5 else
21041: LD_ADDR_VAR 0 2
21045: PUSH
21046: LD_INT 5
21048: ST_TO_ADDR
21049: GO 21061
// k := tmp ;
21051: LD_ADDR_VAR 0 2
21055: PUSH
21056: LD_VAR 0 3
21060: ST_TO_ADDR
// for i := 1 to k do
21061: LD_ADDR_VAR 0 1
21065: PUSH
21066: DOUBLE
21067: LD_INT 1
21069: DEC
21070: ST_TO_ADDR
21071: LD_VAR 0 2
21075: PUSH
21076: FOR_TO
21077: IFFALSE 21176
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21079: LD_VAR 0 3
21083: PUSH
21084: LD_VAR 0 1
21088: ARRAY
21089: PPUSH
21090: LD_VAR 0 1
21094: PUSH
21095: LD_INT 4
21097: MOD
21098: PUSH
21099: LD_INT 1
21101: PLUS
21102: PPUSH
21103: CALL_OW 259
21107: PUSH
21108: LD_INT 10
21110: LESS
21111: IFFALSE 21174
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21113: LD_VAR 0 3
21117: PUSH
21118: LD_VAR 0 1
21122: ARRAY
21123: PPUSH
21124: LD_VAR 0 1
21128: PUSH
21129: LD_INT 4
21131: MOD
21132: PUSH
21133: LD_INT 1
21135: PLUS
21136: PPUSH
21137: LD_VAR 0 3
21141: PUSH
21142: LD_VAR 0 1
21146: ARRAY
21147: PPUSH
21148: LD_VAR 0 1
21152: PUSH
21153: LD_INT 4
21155: MOD
21156: PUSH
21157: LD_INT 1
21159: PLUS
21160: PPUSH
21161: CALL_OW 259
21165: PUSH
21166: LD_INT 1
21168: PLUS
21169: PPUSH
21170: CALL_OW 237
21174: GO 21076
21176: POP
21177: POP
// end ;
21178: PPOPN 3
21180: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21181: LD_EXP 65
21185: PUSH
21186: LD_EXP 73
21190: AND
21191: IFFALSE 21211
21193: GO 21195
21195: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21196: LD_INT 4
21198: PPUSH
21199: LD_OWVAR 2
21203: PPUSH
21204: LD_INT 0
21206: PPUSH
21207: CALL_OW 324
21211: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21212: LD_EXP 65
21216: PUSH
21217: LD_EXP 102
21221: AND
21222: IFFALSE 21242
21224: GO 21226
21226: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21227: LD_INT 19
21229: PPUSH
21230: LD_OWVAR 2
21234: PPUSH
21235: LD_INT 0
21237: PPUSH
21238: CALL_OW 324
21242: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21243: LD_EXP 65
21247: PUSH
21248: LD_EXP 74
21252: AND
21253: IFFALSE 21355
21255: GO 21257
21257: DISABLE
21258: LD_INT 0
21260: PPUSH
21261: PPUSH
// begin enable ;
21262: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21263: LD_ADDR_VAR 0 2
21267: PUSH
21268: LD_INT 22
21270: PUSH
21271: LD_OWVAR 2
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 2
21282: PUSH
21283: LD_INT 34
21285: PUSH
21286: LD_INT 11
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: PUSH
21293: LD_INT 34
21295: PUSH
21296: LD_INT 30
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: LIST
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PPUSH
21312: CALL_OW 69
21316: ST_TO_ADDR
// if not tmp then
21317: LD_VAR 0 2
21321: NOT
21322: IFFALSE 21326
// exit ;
21324: GO 21355
// for i in tmp do
21326: LD_ADDR_VAR 0 1
21330: PUSH
21331: LD_VAR 0 2
21335: PUSH
21336: FOR_IN
21337: IFFALSE 21353
// begin SetLives ( i , 0 ) ;
21339: LD_VAR 0 1
21343: PPUSH
21344: LD_INT 0
21346: PPUSH
21347: CALL_OW 234
// end ;
21351: GO 21336
21353: POP
21354: POP
// end ;
21355: PPOPN 2
21357: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21358: LD_EXP 65
21362: PUSH
21363: LD_EXP 75
21367: AND
21368: IFFALSE 21388
21370: GO 21372
21372: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21373: LD_INT 32
21375: PPUSH
21376: LD_OWVAR 2
21380: PPUSH
21381: LD_INT 0
21383: PPUSH
21384: CALL_OW 324
21388: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21389: LD_EXP 65
21393: PUSH
21394: LD_EXP 76
21398: AND
21399: IFFALSE 21580
21401: GO 21403
21403: DISABLE
21404: LD_INT 0
21406: PPUSH
21407: PPUSH
21408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21409: LD_ADDR_VAR 0 2
21413: PUSH
21414: LD_INT 22
21416: PUSH
21417: LD_OWVAR 2
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PUSH
21426: LD_INT 33
21428: PUSH
21429: LD_INT 3
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: PUSH
21436: EMPTY
21437: LIST
21438: LIST
21439: PPUSH
21440: CALL_OW 69
21444: ST_TO_ADDR
// if not tmp then
21445: LD_VAR 0 2
21449: NOT
21450: IFFALSE 21454
// exit ;
21452: GO 21580
// side := 0 ;
21454: LD_ADDR_VAR 0 3
21458: PUSH
21459: LD_INT 0
21461: ST_TO_ADDR
// for i := 1 to 8 do
21462: LD_ADDR_VAR 0 1
21466: PUSH
21467: DOUBLE
21468: LD_INT 1
21470: DEC
21471: ST_TO_ADDR
21472: LD_INT 8
21474: PUSH
21475: FOR_TO
21476: IFFALSE 21524
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21478: LD_OWVAR 2
21482: PUSH
21483: LD_VAR 0 1
21487: NONEQUAL
21488: PUSH
21489: LD_OWVAR 2
21493: PPUSH
21494: LD_VAR 0 1
21498: PPUSH
21499: CALL_OW 81
21503: PUSH
21504: LD_INT 2
21506: EQUAL
21507: AND
21508: IFFALSE 21522
// begin side := i ;
21510: LD_ADDR_VAR 0 3
21514: PUSH
21515: LD_VAR 0 1
21519: ST_TO_ADDR
// break ;
21520: GO 21524
// end ;
21522: GO 21475
21524: POP
21525: POP
// if not side then
21526: LD_VAR 0 3
21530: NOT
21531: IFFALSE 21535
// exit ;
21533: GO 21580
// for i := 1 to tmp do
21535: LD_ADDR_VAR 0 1
21539: PUSH
21540: DOUBLE
21541: LD_INT 1
21543: DEC
21544: ST_TO_ADDR
21545: LD_VAR 0 2
21549: PUSH
21550: FOR_TO
21551: IFFALSE 21578
// if Prob ( 60 ) then
21553: LD_INT 60
21555: PPUSH
21556: CALL_OW 13
21560: IFFALSE 21576
// SetSide ( i , side ) ;
21562: LD_VAR 0 1
21566: PPUSH
21567: LD_VAR 0 3
21571: PPUSH
21572: CALL_OW 235
21576: GO 21550
21578: POP
21579: POP
// end ;
21580: PPOPN 3
21582: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21583: LD_EXP 65
21587: PUSH
21588: LD_EXP 78
21592: AND
21593: IFFALSE 21712
21595: GO 21597
21597: DISABLE
21598: LD_INT 0
21600: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21601: LD_ADDR_VAR 0 1
21605: PUSH
21606: LD_INT 22
21608: PUSH
21609: LD_OWVAR 2
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: LD_INT 21
21620: PUSH
21621: LD_INT 1
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 3
21630: PUSH
21631: LD_INT 23
21633: PUSH
21634: LD_INT 0
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: LIST
21649: PPUSH
21650: CALL_OW 69
21654: PUSH
21655: FOR_IN
21656: IFFALSE 21710
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21658: LD_VAR 0 1
21662: PPUSH
21663: CALL_OW 257
21667: PUSH
21668: LD_INT 1
21670: PUSH
21671: LD_INT 2
21673: PUSH
21674: LD_INT 3
21676: PUSH
21677: LD_INT 4
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: IN
21686: IFFALSE 21708
// SetClass ( un , rand ( 1 , 4 ) ) ;
21688: LD_VAR 0 1
21692: PPUSH
21693: LD_INT 1
21695: PPUSH
21696: LD_INT 4
21698: PPUSH
21699: CALL_OW 12
21703: PPUSH
21704: CALL_OW 336
21708: GO 21655
21710: POP
21711: POP
// end ;
21712: PPOPN 1
21714: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21715: LD_EXP 65
21719: PUSH
21720: LD_EXP 77
21724: AND
21725: IFFALSE 21804
21727: GO 21729
21729: DISABLE
21730: LD_INT 0
21732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21733: LD_ADDR_VAR 0 1
21737: PUSH
21738: LD_INT 22
21740: PUSH
21741: LD_OWVAR 2
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 21
21752: PUSH
21753: LD_INT 3
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PPUSH
21764: CALL_OW 69
21768: ST_TO_ADDR
// if not tmp then
21769: LD_VAR 0 1
21773: NOT
21774: IFFALSE 21778
// exit ;
21776: GO 21804
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21778: LD_VAR 0 1
21782: PUSH
21783: LD_INT 1
21785: PPUSH
21786: LD_VAR 0 1
21790: PPUSH
21791: CALL_OW 12
21795: ARRAY
21796: PPUSH
21797: LD_INT 100
21799: PPUSH
21800: CALL_OW 234
// end ;
21804: PPOPN 1
21806: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21807: LD_EXP 65
21811: PUSH
21812: LD_EXP 79
21816: AND
21817: IFFALSE 21915
21819: GO 21821
21821: DISABLE
21822: LD_INT 0
21824: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21825: LD_ADDR_VAR 0 1
21829: PUSH
21830: LD_INT 22
21832: PUSH
21833: LD_OWVAR 2
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: LD_INT 21
21844: PUSH
21845: LD_INT 1
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PPUSH
21856: CALL_OW 69
21860: ST_TO_ADDR
// if not tmp then
21861: LD_VAR 0 1
21865: NOT
21866: IFFALSE 21870
// exit ;
21868: GO 21915
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21870: LD_VAR 0 1
21874: PUSH
21875: LD_INT 1
21877: PPUSH
21878: LD_VAR 0 1
21882: PPUSH
21883: CALL_OW 12
21887: ARRAY
21888: PPUSH
21889: LD_INT 1
21891: PPUSH
21892: LD_INT 4
21894: PPUSH
21895: CALL_OW 12
21899: PPUSH
21900: LD_INT 3000
21902: PPUSH
21903: LD_INT 9000
21905: PPUSH
21906: CALL_OW 12
21910: PPUSH
21911: CALL_OW 492
// end ;
21915: PPOPN 1
21917: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21918: LD_EXP 65
21922: PUSH
21923: LD_EXP 80
21927: AND
21928: IFFALSE 21948
21930: GO 21932
21932: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21933: LD_INT 1
21935: PPUSH
21936: LD_OWVAR 2
21940: PPUSH
21941: LD_INT 0
21943: PPUSH
21944: CALL_OW 324
21948: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21949: LD_EXP 65
21953: PUSH
21954: LD_EXP 81
21958: AND
21959: IFFALSE 22042
21961: GO 21963
21963: DISABLE
21964: LD_INT 0
21966: PPUSH
21967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21968: LD_ADDR_VAR 0 2
21972: PUSH
21973: LD_INT 22
21975: PUSH
21976: LD_OWVAR 2
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: PUSH
21985: LD_INT 21
21987: PUSH
21988: LD_INT 3
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PPUSH
21999: CALL_OW 69
22003: ST_TO_ADDR
// if not tmp then
22004: LD_VAR 0 2
22008: NOT
22009: IFFALSE 22013
// exit ;
22011: GO 22042
// for i in tmp do
22013: LD_ADDR_VAR 0 1
22017: PUSH
22018: LD_VAR 0 2
22022: PUSH
22023: FOR_IN
22024: IFFALSE 22040
// SetBLevel ( i , 10 ) ;
22026: LD_VAR 0 1
22030: PPUSH
22031: LD_INT 10
22033: PPUSH
22034: CALL_OW 241
22038: GO 22023
22040: POP
22041: POP
// end ;
22042: PPOPN 2
22044: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22045: LD_EXP 65
22049: PUSH
22050: LD_EXP 82
22054: AND
22055: IFFALSE 22166
22057: GO 22059
22059: DISABLE
22060: LD_INT 0
22062: PPUSH
22063: PPUSH
22064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22065: LD_ADDR_VAR 0 3
22069: PUSH
22070: LD_INT 22
22072: PUSH
22073: LD_OWVAR 2
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: LD_INT 25
22084: PUSH
22085: LD_INT 1
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PPUSH
22096: CALL_OW 69
22100: ST_TO_ADDR
// if not tmp then
22101: LD_VAR 0 3
22105: NOT
22106: IFFALSE 22110
// exit ;
22108: GO 22166
// un := tmp [ rand ( 1 , tmp ) ] ;
22110: LD_ADDR_VAR 0 2
22114: PUSH
22115: LD_VAR 0 3
22119: PUSH
22120: LD_INT 1
22122: PPUSH
22123: LD_VAR 0 3
22127: PPUSH
22128: CALL_OW 12
22132: ARRAY
22133: ST_TO_ADDR
// if Crawls ( un ) then
22134: LD_VAR 0 2
22138: PPUSH
22139: CALL_OW 318
22143: IFFALSE 22154
// ComWalk ( un ) ;
22145: LD_VAR 0 2
22149: PPUSH
22150: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22154: LD_VAR 0 2
22158: PPUSH
22159: LD_INT 5
22161: PPUSH
22162: CALL_OW 336
// end ;
22166: PPOPN 3
22168: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
22169: LD_EXP 65
22173: PUSH
22174: LD_EXP 83
22178: AND
22179: PUSH
22180: LD_OWVAR 67
22184: PUSH
22185: LD_INT 3
22187: LESS
22188: AND
22189: IFFALSE 22208
22191: GO 22193
22193: DISABLE
// Difficulty := Difficulty + 1 ;
22194: LD_ADDR_OWVAR 67
22198: PUSH
22199: LD_OWVAR 67
22203: PUSH
22204: LD_INT 1
22206: PLUS
22207: ST_TO_ADDR
22208: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22209: LD_EXP 65
22213: PUSH
22214: LD_EXP 84
22218: AND
22219: IFFALSE 22322
22221: GO 22223
22223: DISABLE
22224: LD_INT 0
22226: PPUSH
// begin for i := 1 to 5 do
22227: LD_ADDR_VAR 0 1
22231: PUSH
22232: DOUBLE
22233: LD_INT 1
22235: DEC
22236: ST_TO_ADDR
22237: LD_INT 5
22239: PUSH
22240: FOR_TO
22241: IFFALSE 22320
// begin uc_nation := nation_nature ;
22243: LD_ADDR_OWVAR 21
22247: PUSH
22248: LD_INT 0
22250: ST_TO_ADDR
// uc_side := 0 ;
22251: LD_ADDR_OWVAR 20
22255: PUSH
22256: LD_INT 0
22258: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22259: LD_ADDR_OWVAR 29
22263: PUSH
22264: LD_INT 12
22266: PUSH
22267: LD_INT 12
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: ST_TO_ADDR
// hc_agressivity := 20 ;
22274: LD_ADDR_OWVAR 35
22278: PUSH
22279: LD_INT 20
22281: ST_TO_ADDR
// hc_class := class_tiger ;
22282: LD_ADDR_OWVAR 28
22286: PUSH
22287: LD_INT 14
22289: ST_TO_ADDR
// hc_gallery :=  ;
22290: LD_ADDR_OWVAR 33
22294: PUSH
22295: LD_STRING 
22297: ST_TO_ADDR
// hc_name :=  ;
22298: LD_ADDR_OWVAR 26
22302: PUSH
22303: LD_STRING 
22305: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22306: CALL_OW 44
22310: PPUSH
22311: LD_INT 0
22313: PPUSH
22314: CALL_OW 51
// end ;
22318: GO 22240
22320: POP
22321: POP
// end ;
22322: PPOPN 1
22324: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22325: LD_EXP 65
22329: PUSH
22330: LD_EXP 85
22334: AND
22335: IFFALSE 22344
22337: GO 22339
22339: DISABLE
// StreamSibBomb ;
22340: CALL 22345 0 0
22344: END
// export function StreamSibBomb ; var i , x , y ; begin
22345: LD_INT 0
22347: PPUSH
22348: PPUSH
22349: PPUSH
22350: PPUSH
// result := false ;
22351: LD_ADDR_VAR 0 1
22355: PUSH
22356: LD_INT 0
22358: ST_TO_ADDR
// for i := 1 to 16 do
22359: LD_ADDR_VAR 0 2
22363: PUSH
22364: DOUBLE
22365: LD_INT 1
22367: DEC
22368: ST_TO_ADDR
22369: LD_INT 16
22371: PUSH
22372: FOR_TO
22373: IFFALSE 22572
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22375: LD_ADDR_VAR 0 3
22379: PUSH
22380: LD_INT 10
22382: PUSH
22383: LD_INT 20
22385: PUSH
22386: LD_INT 30
22388: PUSH
22389: LD_INT 40
22391: PUSH
22392: LD_INT 50
22394: PUSH
22395: LD_INT 60
22397: PUSH
22398: LD_INT 70
22400: PUSH
22401: LD_INT 80
22403: PUSH
22404: LD_INT 90
22406: PUSH
22407: LD_INT 100
22409: PUSH
22410: LD_INT 110
22412: PUSH
22413: LD_INT 120
22415: PUSH
22416: LD_INT 130
22418: PUSH
22419: LD_INT 140
22421: PUSH
22422: LD_INT 150
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 1
22444: PPUSH
22445: LD_INT 15
22447: PPUSH
22448: CALL_OW 12
22452: ARRAY
22453: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22454: LD_ADDR_VAR 0 4
22458: PUSH
22459: LD_INT 10
22461: PUSH
22462: LD_INT 20
22464: PUSH
22465: LD_INT 30
22467: PUSH
22468: LD_INT 40
22470: PUSH
22471: LD_INT 50
22473: PUSH
22474: LD_INT 60
22476: PUSH
22477: LD_INT 70
22479: PUSH
22480: LD_INT 80
22482: PUSH
22483: LD_INT 90
22485: PUSH
22486: LD_INT 100
22488: PUSH
22489: LD_INT 110
22491: PUSH
22492: LD_INT 120
22494: PUSH
22495: LD_INT 130
22497: PUSH
22498: LD_INT 140
22500: PUSH
22501: LD_INT 150
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: PUSH
22521: LD_INT 1
22523: PPUSH
22524: LD_INT 15
22526: PPUSH
22527: CALL_OW 12
22531: ARRAY
22532: ST_TO_ADDR
// if ValidHex ( x , y ) then
22533: LD_VAR 0 3
22537: PPUSH
22538: LD_VAR 0 4
22542: PPUSH
22543: CALL_OW 488
22547: IFFALSE 22570
// begin result := [ x , y ] ;
22549: LD_ADDR_VAR 0 1
22553: PUSH
22554: LD_VAR 0 3
22558: PUSH
22559: LD_VAR 0 4
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: ST_TO_ADDR
// break ;
22568: GO 22572
// end ; end ;
22570: GO 22372
22572: POP
22573: POP
// if result then
22574: LD_VAR 0 1
22578: IFFALSE 22638
// begin ToLua ( playSibBomb() ) ;
22580: LD_STRING playSibBomb()
22582: PPUSH
22583: CALL_OW 559
// wait ( 0 0$14 ) ;
22587: LD_INT 490
22589: PPUSH
22590: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22594: LD_VAR 0 1
22598: PUSH
22599: LD_INT 1
22601: ARRAY
22602: PPUSH
22603: LD_VAR 0 1
22607: PUSH
22608: LD_INT 2
22610: ARRAY
22611: PPUSH
22612: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22616: LD_VAR 0 1
22620: PUSH
22621: LD_INT 1
22623: ARRAY
22624: PPUSH
22625: LD_VAR 0 1
22629: PUSH
22630: LD_INT 2
22632: ARRAY
22633: PPUSH
22634: CALL_OW 429
// end ; end ;
22638: LD_VAR 0 1
22642: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22643: LD_EXP 65
22647: PUSH
22648: LD_EXP 87
22652: AND
22653: IFFALSE 22665
22655: GO 22657
22657: DISABLE
// YouLost (  ) ;
22658: LD_STRING 
22660: PPUSH
22661: CALL_OW 104
22665: END
// every 0 0$1 trigger StreamModeActive and sFog do
22666: LD_EXP 65
22670: PUSH
22671: LD_EXP 86
22675: AND
22676: IFFALSE 22690
22678: GO 22680
22680: DISABLE
// FogOff ( your_side ) ;
22681: LD_OWVAR 2
22685: PPUSH
22686: CALL_OW 344
22690: END
// every 0 0$1 trigger StreamModeActive and sSun do
22691: LD_EXP 65
22695: PUSH
22696: LD_EXP 88
22700: AND
22701: IFFALSE 22729
22703: GO 22705
22705: DISABLE
// begin solar_recharge_percent := 0 ;
22706: LD_ADDR_OWVAR 79
22710: PUSH
22711: LD_INT 0
22713: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22714: LD_INT 10500
22716: PPUSH
22717: CALL_OW 67
// solar_recharge_percent := 100 ;
22721: LD_ADDR_OWVAR 79
22725: PUSH
22726: LD_INT 100
22728: ST_TO_ADDR
// end ;
22729: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22730: LD_EXP 65
22734: PUSH
22735: LD_EXP 89
22739: AND
22740: IFFALSE 22979
22742: GO 22744
22744: DISABLE
22745: LD_INT 0
22747: PPUSH
22748: PPUSH
22749: PPUSH
// begin tmp := [ ] ;
22750: LD_ADDR_VAR 0 3
22754: PUSH
22755: EMPTY
22756: ST_TO_ADDR
// for i := 1 to 6 do
22757: LD_ADDR_VAR 0 1
22761: PUSH
22762: DOUBLE
22763: LD_INT 1
22765: DEC
22766: ST_TO_ADDR
22767: LD_INT 6
22769: PUSH
22770: FOR_TO
22771: IFFALSE 22876
// begin uc_nation := nation_nature ;
22773: LD_ADDR_OWVAR 21
22777: PUSH
22778: LD_INT 0
22780: ST_TO_ADDR
// uc_side := 0 ;
22781: LD_ADDR_OWVAR 20
22785: PUSH
22786: LD_INT 0
22788: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22789: LD_ADDR_OWVAR 29
22793: PUSH
22794: LD_INT 12
22796: PUSH
22797: LD_INT 12
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: ST_TO_ADDR
// hc_agressivity := 20 ;
22804: LD_ADDR_OWVAR 35
22808: PUSH
22809: LD_INT 20
22811: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22812: LD_ADDR_OWVAR 28
22816: PUSH
22817: LD_INT 17
22819: ST_TO_ADDR
// hc_gallery :=  ;
22820: LD_ADDR_OWVAR 33
22824: PUSH
22825: LD_STRING 
22827: ST_TO_ADDR
// hc_name :=  ;
22828: LD_ADDR_OWVAR 26
22832: PUSH
22833: LD_STRING 
22835: ST_TO_ADDR
// un := CreateHuman ;
22836: LD_ADDR_VAR 0 2
22840: PUSH
22841: CALL_OW 44
22845: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22846: LD_VAR 0 2
22850: PPUSH
22851: LD_INT 1
22853: PPUSH
22854: CALL_OW 51
// tmp := tmp ^ un ;
22858: LD_ADDR_VAR 0 3
22862: PUSH
22863: LD_VAR 0 3
22867: PUSH
22868: LD_VAR 0 2
22872: ADD
22873: ST_TO_ADDR
// end ;
22874: GO 22770
22876: POP
22877: POP
// repeat wait ( 0 0$1 ) ;
22878: LD_INT 35
22880: PPUSH
22881: CALL_OW 67
// for un in tmp do
22885: LD_ADDR_VAR 0 2
22889: PUSH
22890: LD_VAR 0 3
22894: PUSH
22895: FOR_IN
22896: IFFALSE 22970
// begin if IsDead ( un ) then
22898: LD_VAR 0 2
22902: PPUSH
22903: CALL_OW 301
22907: IFFALSE 22927
// begin tmp := tmp diff un ;
22909: LD_ADDR_VAR 0 3
22913: PUSH
22914: LD_VAR 0 3
22918: PUSH
22919: LD_VAR 0 2
22923: DIFF
22924: ST_TO_ADDR
// continue ;
22925: GO 22895
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22927: LD_VAR 0 2
22931: PPUSH
22932: LD_INT 3
22934: PUSH
22935: LD_INT 22
22937: PUSH
22938: LD_INT 0
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PPUSH
22949: CALL_OW 69
22953: PPUSH
22954: LD_VAR 0 2
22958: PPUSH
22959: CALL_OW 74
22963: PPUSH
22964: CALL_OW 115
// end ;
22968: GO 22895
22970: POP
22971: POP
// until not tmp ;
22972: LD_VAR 0 3
22976: NOT
22977: IFFALSE 22878
// end ;
22979: PPOPN 3
22981: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22982: LD_EXP 65
22986: PUSH
22987: LD_EXP 90
22991: AND
22992: IFFALSE 23046
22994: GO 22996
22996: DISABLE
// begin ToLua ( displayTroll(); ) ;
22997: LD_STRING displayTroll();
22999: PPUSH
23000: CALL_OW 559
// wait ( 3 3$00 ) ;
23004: LD_INT 6300
23006: PPUSH
23007: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23011: LD_STRING hideTroll();
23013: PPUSH
23014: CALL_OW 559
// wait ( 1 1$00 ) ;
23018: LD_INT 2100
23020: PPUSH
23021: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23025: LD_STRING displayTroll();
23027: PPUSH
23028: CALL_OW 559
// wait ( 1 1$00 ) ;
23032: LD_INT 2100
23034: PPUSH
23035: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23039: LD_STRING hideTroll();
23041: PPUSH
23042: CALL_OW 559
// end ;
23046: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23047: LD_EXP 65
23051: PUSH
23052: LD_EXP 91
23056: AND
23057: IFFALSE 23120
23059: GO 23061
23061: DISABLE
23062: LD_INT 0
23064: PPUSH
// begin p := 0 ;
23065: LD_ADDR_VAR 0 1
23069: PUSH
23070: LD_INT 0
23072: ST_TO_ADDR
// repeat game_speed := 1 ;
23073: LD_ADDR_OWVAR 65
23077: PUSH
23078: LD_INT 1
23080: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23081: LD_INT 35
23083: PPUSH
23084: CALL_OW 67
// p := p + 1 ;
23088: LD_ADDR_VAR 0 1
23092: PUSH
23093: LD_VAR 0 1
23097: PUSH
23098: LD_INT 1
23100: PLUS
23101: ST_TO_ADDR
// until p >= 60 ;
23102: LD_VAR 0 1
23106: PUSH
23107: LD_INT 60
23109: GREATEREQUAL
23110: IFFALSE 23073
// game_speed := 4 ;
23112: LD_ADDR_OWVAR 65
23116: PUSH
23117: LD_INT 4
23119: ST_TO_ADDR
// end ;
23120: PPOPN 1
23122: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23123: LD_EXP 65
23127: PUSH
23128: LD_EXP 92
23132: AND
23133: IFFALSE 23279
23135: GO 23137
23137: DISABLE
23138: LD_INT 0
23140: PPUSH
23141: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23142: LD_ADDR_VAR 0 1
23146: PUSH
23147: LD_INT 22
23149: PUSH
23150: LD_OWVAR 2
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: LD_INT 2
23161: PUSH
23162: LD_INT 30
23164: PUSH
23165: LD_INT 0
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: LD_INT 30
23174: PUSH
23175: LD_INT 1
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: LIST
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PPUSH
23191: CALL_OW 69
23195: ST_TO_ADDR
// if not depot then
23196: LD_VAR 0 1
23200: NOT
23201: IFFALSE 23205
// exit ;
23203: GO 23279
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23205: LD_ADDR_VAR 0 2
23209: PUSH
23210: LD_VAR 0 1
23214: PUSH
23215: LD_INT 1
23217: PPUSH
23218: LD_VAR 0 1
23222: PPUSH
23223: CALL_OW 12
23227: ARRAY
23228: PPUSH
23229: CALL_OW 274
23233: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23234: LD_VAR 0 2
23238: PPUSH
23239: LD_INT 1
23241: PPUSH
23242: LD_INT 0
23244: PPUSH
23245: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23249: LD_VAR 0 2
23253: PPUSH
23254: LD_INT 2
23256: PPUSH
23257: LD_INT 0
23259: PPUSH
23260: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23264: LD_VAR 0 2
23268: PPUSH
23269: LD_INT 3
23271: PPUSH
23272: LD_INT 0
23274: PPUSH
23275: CALL_OW 277
// end ;
23279: PPOPN 2
23281: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23282: LD_EXP 65
23286: PUSH
23287: LD_EXP 93
23291: AND
23292: IFFALSE 23389
23294: GO 23296
23296: DISABLE
23297: LD_INT 0
23299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23300: LD_ADDR_VAR 0 1
23304: PUSH
23305: LD_INT 22
23307: PUSH
23308: LD_OWVAR 2
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 21
23319: PUSH
23320: LD_INT 1
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 3
23329: PUSH
23330: LD_INT 23
23332: PUSH
23333: LD_INT 0
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: LIST
23348: PPUSH
23349: CALL_OW 69
23353: ST_TO_ADDR
// if not tmp then
23354: LD_VAR 0 1
23358: NOT
23359: IFFALSE 23363
// exit ;
23361: GO 23389
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23363: LD_VAR 0 1
23367: PUSH
23368: LD_INT 1
23370: PPUSH
23371: LD_VAR 0 1
23375: PPUSH
23376: CALL_OW 12
23380: ARRAY
23381: PPUSH
23382: LD_INT 200
23384: PPUSH
23385: CALL_OW 234
// end ;
23389: PPOPN 1
23391: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23392: LD_EXP 65
23396: PUSH
23397: LD_EXP 94
23401: AND
23402: IFFALSE 23481
23404: GO 23406
23406: DISABLE
23407: LD_INT 0
23409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23410: LD_ADDR_VAR 0 1
23414: PUSH
23415: LD_INT 22
23417: PUSH
23418: LD_OWVAR 2
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: PUSH
23427: LD_INT 21
23429: PUSH
23430: LD_INT 2
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PPUSH
23441: CALL_OW 69
23445: ST_TO_ADDR
// if not tmp then
23446: LD_VAR 0 1
23450: NOT
23451: IFFALSE 23455
// exit ;
23453: GO 23481
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23455: LD_VAR 0 1
23459: PUSH
23460: LD_INT 1
23462: PPUSH
23463: LD_VAR 0 1
23467: PPUSH
23468: CALL_OW 12
23472: ARRAY
23473: PPUSH
23474: LD_INT 60
23476: PPUSH
23477: CALL_OW 234
// end ;
23481: PPOPN 1
23483: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23484: LD_EXP 65
23488: PUSH
23489: LD_EXP 95
23493: AND
23494: IFFALSE 23593
23496: GO 23498
23498: DISABLE
23499: LD_INT 0
23501: PPUSH
23502: PPUSH
// begin enable ;
23503: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23504: LD_ADDR_VAR 0 1
23508: PUSH
23509: LD_INT 22
23511: PUSH
23512: LD_OWVAR 2
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: LD_INT 61
23523: PUSH
23524: EMPTY
23525: LIST
23526: PUSH
23527: LD_INT 33
23529: PUSH
23530: LD_INT 2
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: LIST
23541: PPUSH
23542: CALL_OW 69
23546: ST_TO_ADDR
// if not tmp then
23547: LD_VAR 0 1
23551: NOT
23552: IFFALSE 23556
// exit ;
23554: GO 23593
// for i in tmp do
23556: LD_ADDR_VAR 0 2
23560: PUSH
23561: LD_VAR 0 1
23565: PUSH
23566: FOR_IN
23567: IFFALSE 23591
// if IsControledBy ( i ) then
23569: LD_VAR 0 2
23573: PPUSH
23574: CALL_OW 312
23578: IFFALSE 23589
// ComUnlink ( i ) ;
23580: LD_VAR 0 2
23584: PPUSH
23585: CALL_OW 136
23589: GO 23566
23591: POP
23592: POP
// end ;
23593: PPOPN 2
23595: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23596: LD_EXP 65
23600: PUSH
23601: LD_EXP 96
23605: AND
23606: IFFALSE 23746
23608: GO 23610
23610: DISABLE
23611: LD_INT 0
23613: PPUSH
23614: PPUSH
// begin ToLua ( displayPowell(); ) ;
23615: LD_STRING displayPowell();
23617: PPUSH
23618: CALL_OW 559
// uc_side := 0 ;
23622: LD_ADDR_OWVAR 20
23626: PUSH
23627: LD_INT 0
23629: ST_TO_ADDR
// uc_nation := 2 ;
23630: LD_ADDR_OWVAR 21
23634: PUSH
23635: LD_INT 2
23637: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23638: LD_ADDR_OWVAR 37
23642: PUSH
23643: LD_INT 14
23645: ST_TO_ADDR
// vc_engine := engine_siberite ;
23646: LD_ADDR_OWVAR 39
23650: PUSH
23651: LD_INT 3
23653: ST_TO_ADDR
// vc_control := control_apeman ;
23654: LD_ADDR_OWVAR 38
23658: PUSH
23659: LD_INT 5
23661: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23662: LD_ADDR_OWVAR 40
23666: PUSH
23667: LD_INT 29
23669: ST_TO_ADDR
// un := CreateVehicle ;
23670: LD_ADDR_VAR 0 2
23674: PUSH
23675: CALL_OW 45
23679: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23680: LD_VAR 0 2
23684: PPUSH
23685: LD_INT 1
23687: PPUSH
23688: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23692: LD_INT 35
23694: PPUSH
23695: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23699: LD_VAR 0 2
23703: PPUSH
23704: LD_INT 22
23706: PUSH
23707: LD_OWVAR 2
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PPUSH
23716: CALL_OW 69
23720: PPUSH
23721: LD_VAR 0 2
23725: PPUSH
23726: CALL_OW 74
23730: PPUSH
23731: CALL_OW 115
// until IsDead ( un ) ;
23735: LD_VAR 0 2
23739: PPUSH
23740: CALL_OW 301
23744: IFFALSE 23692
// end ;
23746: PPOPN 2
23748: END
// every 0 0$1 trigger StreamModeActive and sStu do
23749: LD_EXP 65
23753: PUSH
23754: LD_EXP 104
23758: AND
23759: IFFALSE 23775
23761: GO 23763
23763: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23764: LD_STRING displayStucuk();
23766: PPUSH
23767: CALL_OW 559
// ResetFog ;
23771: CALL_OW 335
// end ;
23775: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23776: LD_EXP 65
23780: PUSH
23781: LD_EXP 97
23785: AND
23786: IFFALSE 23927
23788: GO 23790
23790: DISABLE
23791: LD_INT 0
23793: PPUSH
23794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23795: LD_ADDR_VAR 0 2
23799: PUSH
23800: LD_INT 22
23802: PUSH
23803: LD_OWVAR 2
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 21
23814: PUSH
23815: LD_INT 1
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PPUSH
23826: CALL_OW 69
23830: ST_TO_ADDR
// if not tmp then
23831: LD_VAR 0 2
23835: NOT
23836: IFFALSE 23840
// exit ;
23838: GO 23927
// un := tmp [ rand ( 1 , tmp ) ] ;
23840: LD_ADDR_VAR 0 1
23844: PUSH
23845: LD_VAR 0 2
23849: PUSH
23850: LD_INT 1
23852: PPUSH
23853: LD_VAR 0 2
23857: PPUSH
23858: CALL_OW 12
23862: ARRAY
23863: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23864: LD_VAR 0 1
23868: PPUSH
23869: LD_INT 0
23871: PPUSH
23872: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23876: LD_VAR 0 1
23880: PPUSH
23881: LD_OWVAR 3
23885: PUSH
23886: LD_VAR 0 1
23890: DIFF
23891: PPUSH
23892: LD_VAR 0 1
23896: PPUSH
23897: CALL_OW 74
23901: PPUSH
23902: CALL_OW 115
// wait ( 0 0$20 ) ;
23906: LD_INT 700
23908: PPUSH
23909: CALL_OW 67
// SetSide ( un , your_side ) ;
23913: LD_VAR 0 1
23917: PPUSH
23918: LD_OWVAR 2
23922: PPUSH
23923: CALL_OW 235
// end ;
23927: PPOPN 2
23929: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23930: LD_EXP 65
23934: PUSH
23935: LD_EXP 98
23939: AND
23940: IFFALSE 24046
23942: GO 23944
23944: DISABLE
23945: LD_INT 0
23947: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23948: LD_ADDR_VAR 0 1
23952: PUSH
23953: LD_INT 22
23955: PUSH
23956: LD_OWVAR 2
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 2
23967: PUSH
23968: LD_INT 30
23970: PUSH
23971: LD_INT 0
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: LD_INT 30
23980: PUSH
23981: LD_INT 1
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: LIST
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PPUSH
23997: CALL_OW 69
24001: ST_TO_ADDR
// if not depot then
24002: LD_VAR 0 1
24006: NOT
24007: IFFALSE 24011
// exit ;
24009: GO 24046
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24011: LD_VAR 0 1
24015: PUSH
24016: LD_INT 1
24018: ARRAY
24019: PPUSH
24020: CALL_OW 250
24024: PPUSH
24025: LD_VAR 0 1
24029: PUSH
24030: LD_INT 1
24032: ARRAY
24033: PPUSH
24034: CALL_OW 251
24038: PPUSH
24039: LD_INT 70
24041: PPUSH
24042: CALL_OW 495
// end ;
24046: PPOPN 1
24048: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24049: LD_EXP 65
24053: PUSH
24054: LD_EXP 99
24058: AND
24059: IFFALSE 24270
24061: GO 24063
24063: DISABLE
24064: LD_INT 0
24066: PPUSH
24067: PPUSH
24068: PPUSH
24069: PPUSH
24070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24071: LD_ADDR_VAR 0 5
24075: PUSH
24076: LD_INT 22
24078: PUSH
24079: LD_OWVAR 2
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 21
24090: PUSH
24091: LD_INT 1
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: PPUSH
24102: CALL_OW 69
24106: ST_TO_ADDR
// if not tmp then
24107: LD_VAR 0 5
24111: NOT
24112: IFFALSE 24116
// exit ;
24114: GO 24270
// for i in tmp do
24116: LD_ADDR_VAR 0 1
24120: PUSH
24121: LD_VAR 0 5
24125: PUSH
24126: FOR_IN
24127: IFFALSE 24268
// begin d := rand ( 0 , 5 ) ;
24129: LD_ADDR_VAR 0 4
24133: PUSH
24134: LD_INT 0
24136: PPUSH
24137: LD_INT 5
24139: PPUSH
24140: CALL_OW 12
24144: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24145: LD_ADDR_VAR 0 2
24149: PUSH
24150: LD_VAR 0 1
24154: PPUSH
24155: CALL_OW 250
24159: PPUSH
24160: LD_VAR 0 4
24164: PPUSH
24165: LD_INT 3
24167: PPUSH
24168: LD_INT 12
24170: PPUSH
24171: CALL_OW 12
24175: PPUSH
24176: CALL_OW 272
24180: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24181: LD_ADDR_VAR 0 3
24185: PUSH
24186: LD_VAR 0 1
24190: PPUSH
24191: CALL_OW 251
24195: PPUSH
24196: LD_VAR 0 4
24200: PPUSH
24201: LD_INT 3
24203: PPUSH
24204: LD_INT 12
24206: PPUSH
24207: CALL_OW 12
24211: PPUSH
24212: CALL_OW 273
24216: ST_TO_ADDR
// if ValidHex ( x , y ) then
24217: LD_VAR 0 2
24221: PPUSH
24222: LD_VAR 0 3
24226: PPUSH
24227: CALL_OW 488
24231: IFFALSE 24266
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24233: LD_VAR 0 1
24237: PPUSH
24238: LD_VAR 0 2
24242: PPUSH
24243: LD_VAR 0 3
24247: PPUSH
24248: LD_INT 3
24250: PPUSH
24251: LD_INT 6
24253: PPUSH
24254: CALL_OW 12
24258: PPUSH
24259: LD_INT 1
24261: PPUSH
24262: CALL_OW 483
// end ;
24266: GO 24126
24268: POP
24269: POP
// end ;
24270: PPOPN 5
24272: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24273: LD_EXP 65
24277: PUSH
24278: LD_EXP 100
24282: AND
24283: IFFALSE 24377
24285: GO 24287
24287: DISABLE
24288: LD_INT 0
24290: PPUSH
24291: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24292: LD_ADDR_VAR 0 2
24296: PUSH
24297: LD_INT 22
24299: PUSH
24300: LD_OWVAR 2
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 32
24311: PUSH
24312: LD_INT 1
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 21
24321: PUSH
24322: LD_INT 2
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: LIST
24333: PPUSH
24334: CALL_OW 69
24338: ST_TO_ADDR
// if not tmp then
24339: LD_VAR 0 2
24343: NOT
24344: IFFALSE 24348
// exit ;
24346: GO 24377
// for i in tmp do
24348: LD_ADDR_VAR 0 1
24352: PUSH
24353: LD_VAR 0 2
24357: PUSH
24358: FOR_IN
24359: IFFALSE 24375
// SetFuel ( i , 0 ) ;
24361: LD_VAR 0 1
24365: PPUSH
24366: LD_INT 0
24368: PPUSH
24369: CALL_OW 240
24373: GO 24358
24375: POP
24376: POP
// end ;
24377: PPOPN 2
24379: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24380: LD_EXP 65
24384: PUSH
24385: LD_EXP 101
24389: AND
24390: IFFALSE 24456
24392: GO 24394
24394: DISABLE
24395: LD_INT 0
24397: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24398: LD_ADDR_VAR 0 1
24402: PUSH
24403: LD_INT 22
24405: PUSH
24406: LD_OWVAR 2
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: PUSH
24415: LD_INT 30
24417: PUSH
24418: LD_INT 29
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PPUSH
24429: CALL_OW 69
24433: ST_TO_ADDR
// if not tmp then
24434: LD_VAR 0 1
24438: NOT
24439: IFFALSE 24443
// exit ;
24441: GO 24456
// DestroyUnit ( tmp [ 1 ] ) ;
24443: LD_VAR 0 1
24447: PUSH
24448: LD_INT 1
24450: ARRAY
24451: PPUSH
24452: CALL_OW 65
// end ;
24456: PPOPN 1
24458: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24459: LD_EXP 65
24463: PUSH
24464: LD_EXP 103
24468: AND
24469: IFFALSE 24598
24471: GO 24473
24473: DISABLE
24474: LD_INT 0
24476: PPUSH
// begin uc_side := 0 ;
24477: LD_ADDR_OWVAR 20
24481: PUSH
24482: LD_INT 0
24484: ST_TO_ADDR
// uc_nation := nation_arabian ;
24485: LD_ADDR_OWVAR 21
24489: PUSH
24490: LD_INT 2
24492: ST_TO_ADDR
// hc_gallery :=  ;
24493: LD_ADDR_OWVAR 33
24497: PUSH
24498: LD_STRING 
24500: ST_TO_ADDR
// hc_name :=  ;
24501: LD_ADDR_OWVAR 26
24505: PUSH
24506: LD_STRING 
24508: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24509: LD_INT 1
24511: PPUSH
24512: LD_INT 11
24514: PPUSH
24515: LD_INT 10
24517: PPUSH
24518: CALL_OW 380
// un := CreateHuman ;
24522: LD_ADDR_VAR 0 1
24526: PUSH
24527: CALL_OW 44
24531: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24532: LD_VAR 0 1
24536: PPUSH
24537: LD_INT 1
24539: PPUSH
24540: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24544: LD_INT 35
24546: PPUSH
24547: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24551: LD_VAR 0 1
24555: PPUSH
24556: LD_INT 22
24558: PUSH
24559: LD_OWVAR 2
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PPUSH
24568: CALL_OW 69
24572: PPUSH
24573: LD_VAR 0 1
24577: PPUSH
24578: CALL_OW 74
24582: PPUSH
24583: CALL_OW 115
// until IsDead ( un ) ;
24587: LD_VAR 0 1
24591: PPUSH
24592: CALL_OW 301
24596: IFFALSE 24544
// end ;
24598: PPOPN 1
24600: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24601: LD_EXP 65
24605: PUSH
24606: LD_EXP 105
24610: AND
24611: IFFALSE 24623
24613: GO 24615
24615: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24616: LD_STRING earthquake(getX(game), 0, 32)
24618: PPUSH
24619: CALL_OW 559
24623: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24624: LD_EXP 65
24628: PUSH
24629: LD_EXP 106
24633: AND
24634: IFFALSE 24725
24636: GO 24638
24638: DISABLE
24639: LD_INT 0
24641: PPUSH
// begin enable ;
24642: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24643: LD_ADDR_VAR 0 1
24647: PUSH
24648: LD_INT 22
24650: PUSH
24651: LD_OWVAR 2
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 21
24662: PUSH
24663: LD_INT 2
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 33
24672: PUSH
24673: LD_INT 3
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: LIST
24684: PPUSH
24685: CALL_OW 69
24689: ST_TO_ADDR
// if not tmp then
24690: LD_VAR 0 1
24694: NOT
24695: IFFALSE 24699
// exit ;
24697: GO 24725
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24699: LD_VAR 0 1
24703: PUSH
24704: LD_INT 1
24706: PPUSH
24707: LD_VAR 0 1
24711: PPUSH
24712: CALL_OW 12
24716: ARRAY
24717: PPUSH
24718: LD_INT 1
24720: PPUSH
24721: CALL_OW 234
// end ;
24725: PPOPN 1
24727: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24728: LD_EXP 65
24732: PUSH
24733: LD_EXP 107
24737: AND
24738: IFFALSE 24879
24740: GO 24742
24742: DISABLE
24743: LD_INT 0
24745: PPUSH
24746: PPUSH
24747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24748: LD_ADDR_VAR 0 3
24752: PUSH
24753: LD_INT 22
24755: PUSH
24756: LD_OWVAR 2
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PUSH
24765: LD_INT 25
24767: PUSH
24768: LD_INT 1
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PPUSH
24779: CALL_OW 69
24783: ST_TO_ADDR
// if not tmp then
24784: LD_VAR 0 3
24788: NOT
24789: IFFALSE 24793
// exit ;
24791: GO 24879
// un := tmp [ rand ( 1 , tmp ) ] ;
24793: LD_ADDR_VAR 0 2
24797: PUSH
24798: LD_VAR 0 3
24802: PUSH
24803: LD_INT 1
24805: PPUSH
24806: LD_VAR 0 3
24810: PPUSH
24811: CALL_OW 12
24815: ARRAY
24816: ST_TO_ADDR
// if Crawls ( un ) then
24817: LD_VAR 0 2
24821: PPUSH
24822: CALL_OW 318
24826: IFFALSE 24837
// ComWalk ( un ) ;
24828: LD_VAR 0 2
24832: PPUSH
24833: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24837: LD_VAR 0 2
24841: PPUSH
24842: LD_INT 9
24844: PPUSH
24845: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24849: LD_INT 28
24851: PPUSH
24852: LD_OWVAR 2
24856: PPUSH
24857: LD_INT 2
24859: PPUSH
24860: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24864: LD_INT 29
24866: PPUSH
24867: LD_OWVAR 2
24871: PPUSH
24872: LD_INT 2
24874: PPUSH
24875: CALL_OW 322
// end ;
24879: PPOPN 3
24881: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24882: LD_EXP 65
24886: PUSH
24887: LD_EXP 108
24891: AND
24892: IFFALSE 25003
24894: GO 24896
24896: DISABLE
24897: LD_INT 0
24899: PPUSH
24900: PPUSH
24901: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24902: LD_ADDR_VAR 0 3
24906: PUSH
24907: LD_INT 22
24909: PUSH
24910: LD_OWVAR 2
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 25
24921: PUSH
24922: LD_INT 1
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PPUSH
24933: CALL_OW 69
24937: ST_TO_ADDR
// if not tmp then
24938: LD_VAR 0 3
24942: NOT
24943: IFFALSE 24947
// exit ;
24945: GO 25003
// un := tmp [ rand ( 1 , tmp ) ] ;
24947: LD_ADDR_VAR 0 2
24951: PUSH
24952: LD_VAR 0 3
24956: PUSH
24957: LD_INT 1
24959: PPUSH
24960: LD_VAR 0 3
24964: PPUSH
24965: CALL_OW 12
24969: ARRAY
24970: ST_TO_ADDR
// if Crawls ( un ) then
24971: LD_VAR 0 2
24975: PPUSH
24976: CALL_OW 318
24980: IFFALSE 24991
// ComWalk ( un ) ;
24982: LD_VAR 0 2
24986: PPUSH
24987: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24991: LD_VAR 0 2
24995: PPUSH
24996: LD_INT 8
24998: PPUSH
24999: CALL_OW 336
// end ;
25003: PPOPN 3
25005: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25006: LD_EXP 65
25010: PUSH
25011: LD_EXP 109
25015: AND
25016: IFFALSE 25160
25018: GO 25020
25020: DISABLE
25021: LD_INT 0
25023: PPUSH
25024: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25025: LD_ADDR_VAR 0 2
25029: PUSH
25030: LD_INT 22
25032: PUSH
25033: LD_OWVAR 2
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 21
25044: PUSH
25045: LD_INT 2
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 2
25054: PUSH
25055: LD_INT 34
25057: PUSH
25058: LD_INT 12
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 34
25067: PUSH
25068: LD_INT 51
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 34
25077: PUSH
25078: LD_INT 32
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: LIST
25095: PPUSH
25096: CALL_OW 69
25100: ST_TO_ADDR
// if not tmp then
25101: LD_VAR 0 2
25105: NOT
25106: IFFALSE 25110
// exit ;
25108: GO 25160
// for i in tmp do
25110: LD_ADDR_VAR 0 1
25114: PUSH
25115: LD_VAR 0 2
25119: PUSH
25120: FOR_IN
25121: IFFALSE 25158
// if GetCargo ( i , mat_artifact ) = 0 then
25123: LD_VAR 0 1
25127: PPUSH
25128: LD_INT 4
25130: PPUSH
25131: CALL_OW 289
25135: PUSH
25136: LD_INT 0
25138: EQUAL
25139: IFFALSE 25156
// SetCargo ( i , mat_siberit , 100 ) ;
25141: LD_VAR 0 1
25145: PPUSH
25146: LD_INT 3
25148: PPUSH
25149: LD_INT 100
25151: PPUSH
25152: CALL_OW 290
25156: GO 25120
25158: POP
25159: POP
// end ;
25160: PPOPN 2
25162: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25163: LD_EXP 65
25167: PUSH
25168: LD_EXP 110
25172: AND
25173: IFFALSE 25356
25175: GO 25177
25177: DISABLE
25178: LD_INT 0
25180: PPUSH
25181: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25182: LD_ADDR_VAR 0 2
25186: PUSH
25187: LD_INT 22
25189: PUSH
25190: LD_OWVAR 2
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PPUSH
25199: CALL_OW 69
25203: ST_TO_ADDR
// if not tmp then
25204: LD_VAR 0 2
25208: NOT
25209: IFFALSE 25213
// exit ;
25211: GO 25356
// for i := 1 to 2 do
25213: LD_ADDR_VAR 0 1
25217: PUSH
25218: DOUBLE
25219: LD_INT 1
25221: DEC
25222: ST_TO_ADDR
25223: LD_INT 2
25225: PUSH
25226: FOR_TO
25227: IFFALSE 25354
// begin uc_side := your_side ;
25229: LD_ADDR_OWVAR 20
25233: PUSH
25234: LD_OWVAR 2
25238: ST_TO_ADDR
// uc_nation := nation_american ;
25239: LD_ADDR_OWVAR 21
25243: PUSH
25244: LD_INT 1
25246: ST_TO_ADDR
// vc_chassis := us_morphling ;
25247: LD_ADDR_OWVAR 37
25251: PUSH
25252: LD_INT 5
25254: ST_TO_ADDR
// vc_engine := engine_siberite ;
25255: LD_ADDR_OWVAR 39
25259: PUSH
25260: LD_INT 3
25262: ST_TO_ADDR
// vc_control := control_computer ;
25263: LD_ADDR_OWVAR 38
25267: PUSH
25268: LD_INT 3
25270: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25271: LD_ADDR_OWVAR 40
25275: PUSH
25276: LD_INT 10
25278: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25279: LD_VAR 0 2
25283: PUSH
25284: LD_INT 1
25286: ARRAY
25287: PPUSH
25288: CALL_OW 310
25292: NOT
25293: IFFALSE 25340
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25295: CALL_OW 45
25299: PPUSH
25300: LD_VAR 0 2
25304: PUSH
25305: LD_INT 1
25307: ARRAY
25308: PPUSH
25309: CALL_OW 250
25313: PPUSH
25314: LD_VAR 0 2
25318: PUSH
25319: LD_INT 1
25321: ARRAY
25322: PPUSH
25323: CALL_OW 251
25327: PPUSH
25328: LD_INT 12
25330: PPUSH
25331: LD_INT 1
25333: PPUSH
25334: CALL_OW 50
25338: GO 25352
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25340: CALL_OW 45
25344: PPUSH
25345: LD_INT 1
25347: PPUSH
25348: CALL_OW 51
// end ;
25352: GO 25226
25354: POP
25355: POP
// end ;
25356: PPOPN 2
25358: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25359: LD_EXP 65
25363: PUSH
25364: LD_EXP 111
25368: AND
25369: IFFALSE 25591
25371: GO 25373
25373: DISABLE
25374: LD_INT 0
25376: PPUSH
25377: PPUSH
25378: PPUSH
25379: PPUSH
25380: PPUSH
25381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25382: LD_ADDR_VAR 0 6
25386: PUSH
25387: LD_INT 22
25389: PUSH
25390: LD_OWVAR 2
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: LD_INT 21
25401: PUSH
25402: LD_INT 1
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 3
25411: PUSH
25412: LD_INT 23
25414: PUSH
25415: LD_INT 0
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: LIST
25430: PPUSH
25431: CALL_OW 69
25435: ST_TO_ADDR
// if not tmp then
25436: LD_VAR 0 6
25440: NOT
25441: IFFALSE 25445
// exit ;
25443: GO 25591
// s1 := rand ( 1 , 4 ) ;
25445: LD_ADDR_VAR 0 2
25449: PUSH
25450: LD_INT 1
25452: PPUSH
25453: LD_INT 4
25455: PPUSH
25456: CALL_OW 12
25460: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25461: LD_ADDR_VAR 0 4
25465: PUSH
25466: LD_VAR 0 6
25470: PUSH
25471: LD_INT 1
25473: ARRAY
25474: PPUSH
25475: LD_VAR 0 2
25479: PPUSH
25480: CALL_OW 259
25484: ST_TO_ADDR
// if s1 = 1 then
25485: LD_VAR 0 2
25489: PUSH
25490: LD_INT 1
25492: EQUAL
25493: IFFALSE 25513
// s2 := rand ( 2 , 4 ) else
25495: LD_ADDR_VAR 0 3
25499: PUSH
25500: LD_INT 2
25502: PPUSH
25503: LD_INT 4
25505: PPUSH
25506: CALL_OW 12
25510: ST_TO_ADDR
25511: GO 25521
// s2 := 1 ;
25513: LD_ADDR_VAR 0 3
25517: PUSH
25518: LD_INT 1
25520: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25521: LD_ADDR_VAR 0 5
25525: PUSH
25526: LD_VAR 0 6
25530: PUSH
25531: LD_INT 1
25533: ARRAY
25534: PPUSH
25535: LD_VAR 0 3
25539: PPUSH
25540: CALL_OW 259
25544: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25545: LD_VAR 0 6
25549: PUSH
25550: LD_INT 1
25552: ARRAY
25553: PPUSH
25554: LD_VAR 0 2
25558: PPUSH
25559: LD_VAR 0 5
25563: PPUSH
25564: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25568: LD_VAR 0 6
25572: PUSH
25573: LD_INT 1
25575: ARRAY
25576: PPUSH
25577: LD_VAR 0 3
25581: PPUSH
25582: LD_VAR 0 4
25586: PPUSH
25587: CALL_OW 237
// end ;
25591: PPOPN 6
25593: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25594: LD_EXP 65
25598: PUSH
25599: LD_EXP 112
25603: AND
25604: IFFALSE 25683
25606: GO 25608
25608: DISABLE
25609: LD_INT 0
25611: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25612: LD_ADDR_VAR 0 1
25616: PUSH
25617: LD_INT 22
25619: PUSH
25620: LD_OWVAR 2
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 30
25631: PUSH
25632: LD_INT 3
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PPUSH
25643: CALL_OW 69
25647: ST_TO_ADDR
// if not tmp then
25648: LD_VAR 0 1
25652: NOT
25653: IFFALSE 25657
// exit ;
25655: GO 25683
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25657: LD_VAR 0 1
25661: PUSH
25662: LD_INT 1
25664: PPUSH
25665: LD_VAR 0 1
25669: PPUSH
25670: CALL_OW 12
25674: ARRAY
25675: PPUSH
25676: LD_INT 1
25678: PPUSH
25679: CALL_OW 234
// end ;
25683: PPOPN 1
25685: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25686: LD_EXP 65
25690: PUSH
25691: LD_EXP 113
25695: AND
25696: IFFALSE 25808
25698: GO 25700
25700: DISABLE
25701: LD_INT 0
25703: PPUSH
25704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25705: LD_ADDR_VAR 0 2
25709: PUSH
25710: LD_INT 22
25712: PUSH
25713: LD_OWVAR 2
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 2
25724: PUSH
25725: LD_INT 30
25727: PUSH
25728: LD_INT 27
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: LD_INT 30
25737: PUSH
25738: LD_INT 26
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 30
25747: PUSH
25748: LD_INT 28
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PPUSH
25765: CALL_OW 69
25769: ST_TO_ADDR
// if not tmp then
25770: LD_VAR 0 2
25774: NOT
25775: IFFALSE 25779
// exit ;
25777: GO 25808
// for i in tmp do
25779: LD_ADDR_VAR 0 1
25783: PUSH
25784: LD_VAR 0 2
25788: PUSH
25789: FOR_IN
25790: IFFALSE 25806
// SetLives ( i , 1 ) ;
25792: LD_VAR 0 1
25796: PPUSH
25797: LD_INT 1
25799: PPUSH
25800: CALL_OW 234
25804: GO 25789
25806: POP
25807: POP
// end ;
25808: PPOPN 2
25810: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25811: LD_EXP 65
25815: PUSH
25816: LD_EXP 114
25820: AND
25821: IFFALSE 26095
25823: GO 25825
25825: DISABLE
25826: LD_INT 0
25828: PPUSH
25829: PPUSH
25830: PPUSH
// begin i := rand ( 1 , 7 ) ;
25831: LD_ADDR_VAR 0 1
25835: PUSH
25836: LD_INT 1
25838: PPUSH
25839: LD_INT 7
25841: PPUSH
25842: CALL_OW 12
25846: ST_TO_ADDR
// case i of 1 :
25847: LD_VAR 0 1
25851: PUSH
25852: LD_INT 1
25854: DOUBLE
25855: EQUAL
25856: IFTRUE 25860
25858: GO 25870
25860: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25861: LD_STRING earthquake(getX(game), 0, 32)
25863: PPUSH
25864: CALL_OW 559
25868: GO 26095
25870: LD_INT 2
25872: DOUBLE
25873: EQUAL
25874: IFTRUE 25878
25876: GO 25892
25878: POP
// begin ToLua ( displayStucuk(); ) ;
25879: LD_STRING displayStucuk();
25881: PPUSH
25882: CALL_OW 559
// ResetFog ;
25886: CALL_OW 335
// end ; 3 :
25890: GO 26095
25892: LD_INT 3
25894: DOUBLE
25895: EQUAL
25896: IFTRUE 25900
25898: GO 26004
25900: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25901: LD_ADDR_VAR 0 2
25905: PUSH
25906: LD_INT 22
25908: PUSH
25909: LD_OWVAR 2
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 25
25920: PUSH
25921: LD_INT 1
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PPUSH
25932: CALL_OW 69
25936: ST_TO_ADDR
// if not tmp then
25937: LD_VAR 0 2
25941: NOT
25942: IFFALSE 25946
// exit ;
25944: GO 26095
// un := tmp [ rand ( 1 , tmp ) ] ;
25946: LD_ADDR_VAR 0 3
25950: PUSH
25951: LD_VAR 0 2
25955: PUSH
25956: LD_INT 1
25958: PPUSH
25959: LD_VAR 0 2
25963: PPUSH
25964: CALL_OW 12
25968: ARRAY
25969: ST_TO_ADDR
// if Crawls ( un ) then
25970: LD_VAR 0 3
25974: PPUSH
25975: CALL_OW 318
25979: IFFALSE 25990
// ComWalk ( un ) ;
25981: LD_VAR 0 3
25985: PPUSH
25986: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25990: LD_VAR 0 3
25994: PPUSH
25995: LD_INT 8
25997: PPUSH
25998: CALL_OW 336
// end ; 4 :
26002: GO 26095
26004: LD_INT 4
26006: DOUBLE
26007: EQUAL
26008: IFTRUE 26012
26010: GO 26073
26012: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26013: LD_ADDR_VAR 0 2
26017: PUSH
26018: LD_INT 22
26020: PUSH
26021: LD_OWVAR 2
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 30
26032: PUSH
26033: LD_INT 29
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PPUSH
26044: CALL_OW 69
26048: ST_TO_ADDR
// if not tmp then
26049: LD_VAR 0 2
26053: NOT
26054: IFFALSE 26058
// exit ;
26056: GO 26095
// DestroyUnit ( tmp [ 1 ] ) ;
26058: LD_VAR 0 2
26062: PUSH
26063: LD_INT 1
26065: ARRAY
26066: PPUSH
26067: CALL_OW 65
// end ; 5 .. 7 :
26071: GO 26095
26073: LD_INT 5
26075: DOUBLE
26076: GREATEREQUAL
26077: IFFALSE 26085
26079: LD_INT 7
26081: DOUBLE
26082: LESSEQUAL
26083: IFTRUE 26087
26085: GO 26094
26087: POP
// StreamSibBomb ; end ;
26088: CALL 22345 0 0
26092: GO 26095
26094: POP
// end ;
26095: PPOPN 3
26097: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26098: LD_EXP 65
26102: PUSH
26103: LD_EXP 115
26107: AND
26108: IFFALSE 26264
26110: GO 26112
26112: DISABLE
26113: LD_INT 0
26115: PPUSH
26116: PPUSH
26117: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26118: LD_ADDR_VAR 0 2
26122: PUSH
26123: LD_INT 81
26125: PUSH
26126: LD_OWVAR 2
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 2
26137: PUSH
26138: LD_INT 21
26140: PUSH
26141: LD_INT 1
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 21
26150: PUSH
26151: LD_INT 2
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: LIST
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PPUSH
26167: CALL_OW 69
26171: ST_TO_ADDR
// if not tmp then
26172: LD_VAR 0 2
26176: NOT
26177: IFFALSE 26181
// exit ;
26179: GO 26264
// p := 0 ;
26181: LD_ADDR_VAR 0 3
26185: PUSH
26186: LD_INT 0
26188: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26189: LD_INT 35
26191: PPUSH
26192: CALL_OW 67
// p := p + 1 ;
26196: LD_ADDR_VAR 0 3
26200: PUSH
26201: LD_VAR 0 3
26205: PUSH
26206: LD_INT 1
26208: PLUS
26209: ST_TO_ADDR
// for i in tmp do
26210: LD_ADDR_VAR 0 1
26214: PUSH
26215: LD_VAR 0 2
26219: PUSH
26220: FOR_IN
26221: IFFALSE 26252
// if GetLives ( i ) < 1000 then
26223: LD_VAR 0 1
26227: PPUSH
26228: CALL_OW 256
26232: PUSH
26233: LD_INT 1000
26235: LESS
26236: IFFALSE 26250
// SetLives ( i , 1000 ) ;
26238: LD_VAR 0 1
26242: PPUSH
26243: LD_INT 1000
26245: PPUSH
26246: CALL_OW 234
26250: GO 26220
26252: POP
26253: POP
// until p > 20 ;
26254: LD_VAR 0 3
26258: PUSH
26259: LD_INT 20
26261: GREATER
26262: IFFALSE 26189
// end ;
26264: PPOPN 3
26266: END
// every 0 0$1 trigger StreamModeActive and sTime do
26267: LD_EXP 65
26271: PUSH
26272: LD_EXP 116
26276: AND
26277: IFFALSE 26312
26279: GO 26281
26281: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26282: LD_INT 28
26284: PPUSH
26285: LD_OWVAR 2
26289: PPUSH
26290: LD_INT 2
26292: PPUSH
26293: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26297: LD_INT 30
26299: PPUSH
26300: LD_OWVAR 2
26304: PPUSH
26305: LD_INT 2
26307: PPUSH
26308: CALL_OW 322
// end ;
26312: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26313: LD_EXP 65
26317: PUSH
26318: LD_EXP 117
26322: AND
26323: IFFALSE 26444
26325: GO 26327
26327: DISABLE
26328: LD_INT 0
26330: PPUSH
26331: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26332: LD_ADDR_VAR 0 2
26336: PUSH
26337: LD_INT 22
26339: PUSH
26340: LD_OWVAR 2
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 21
26351: PUSH
26352: LD_INT 1
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 3
26361: PUSH
26362: LD_INT 23
26364: PUSH
26365: LD_INT 0
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: LIST
26380: PPUSH
26381: CALL_OW 69
26385: ST_TO_ADDR
// if not tmp then
26386: LD_VAR 0 2
26390: NOT
26391: IFFALSE 26395
// exit ;
26393: GO 26444
// for i in tmp do
26395: LD_ADDR_VAR 0 1
26399: PUSH
26400: LD_VAR 0 2
26404: PUSH
26405: FOR_IN
26406: IFFALSE 26442
// begin if Crawls ( i ) then
26408: LD_VAR 0 1
26412: PPUSH
26413: CALL_OW 318
26417: IFFALSE 26428
// ComWalk ( i ) ;
26419: LD_VAR 0 1
26423: PPUSH
26424: CALL_OW 138
// SetClass ( i , 2 ) ;
26428: LD_VAR 0 1
26432: PPUSH
26433: LD_INT 2
26435: PPUSH
26436: CALL_OW 336
// end ;
26440: GO 26405
26442: POP
26443: POP
// end ;
26444: PPOPN 2
26446: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26447: LD_EXP 65
26451: PUSH
26452: LD_EXP 118
26456: AND
26457: IFFALSE 26738
26459: GO 26461
26461: DISABLE
26462: LD_INT 0
26464: PPUSH
26465: PPUSH
26466: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26467: LD_OWVAR 2
26471: PPUSH
26472: LD_INT 9
26474: PPUSH
26475: LD_INT 1
26477: PPUSH
26478: LD_INT 1
26480: PPUSH
26481: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26485: LD_INT 9
26487: PPUSH
26488: LD_OWVAR 2
26492: PPUSH
26493: CALL_OW 343
// uc_side := 9 ;
26497: LD_ADDR_OWVAR 20
26501: PUSH
26502: LD_INT 9
26504: ST_TO_ADDR
// uc_nation := 2 ;
26505: LD_ADDR_OWVAR 21
26509: PUSH
26510: LD_INT 2
26512: ST_TO_ADDR
// hc_name := Dark Warrior ;
26513: LD_ADDR_OWVAR 26
26517: PUSH
26518: LD_STRING Dark Warrior
26520: ST_TO_ADDR
// hc_gallery :=  ;
26521: LD_ADDR_OWVAR 33
26525: PUSH
26526: LD_STRING 
26528: ST_TO_ADDR
// hc_noskilllimit := true ;
26529: LD_ADDR_OWVAR 76
26533: PUSH
26534: LD_INT 1
26536: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26537: LD_ADDR_OWVAR 31
26541: PUSH
26542: LD_INT 30
26544: PUSH
26545: LD_INT 30
26547: PUSH
26548: LD_INT 30
26550: PUSH
26551: LD_INT 30
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: ST_TO_ADDR
// un := CreateHuman ;
26560: LD_ADDR_VAR 0 3
26564: PUSH
26565: CALL_OW 44
26569: ST_TO_ADDR
// hc_noskilllimit := false ;
26570: LD_ADDR_OWVAR 76
26574: PUSH
26575: LD_INT 0
26577: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26578: LD_VAR 0 3
26582: PPUSH
26583: LD_INT 1
26585: PPUSH
26586: CALL_OW 51
// p := 0 ;
26590: LD_ADDR_VAR 0 2
26594: PUSH
26595: LD_INT 0
26597: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26598: LD_INT 35
26600: PPUSH
26601: CALL_OW 67
// p := p + 1 ;
26605: LD_ADDR_VAR 0 2
26609: PUSH
26610: LD_VAR 0 2
26614: PUSH
26615: LD_INT 1
26617: PLUS
26618: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26619: LD_VAR 0 3
26623: PPUSH
26624: CALL_OW 256
26628: PUSH
26629: LD_INT 1000
26631: LESS
26632: IFFALSE 26646
// SetLives ( un , 1000 ) ;
26634: LD_VAR 0 3
26638: PPUSH
26639: LD_INT 1000
26641: PPUSH
26642: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26646: LD_VAR 0 3
26650: PPUSH
26651: LD_INT 81
26653: PUSH
26654: LD_OWVAR 2
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 91
26665: PUSH
26666: LD_VAR 0 3
26670: PUSH
26671: LD_INT 30
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: LIST
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PPUSH
26683: CALL_OW 69
26687: PPUSH
26688: LD_VAR 0 3
26692: PPUSH
26693: CALL_OW 74
26697: PPUSH
26698: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
26702: LD_VAR 0 2
26706: PUSH
26707: LD_INT 60
26709: GREATER
26710: PUSH
26711: LD_VAR 0 3
26715: PPUSH
26716: CALL_OW 301
26720: OR
26721: IFFALSE 26598
// if un then
26723: LD_VAR 0 3
26727: IFFALSE 26738
// RemoveUnit ( un ) ;
26729: LD_VAR 0 3
26733: PPUSH
26734: CALL_OW 64
// end ;
26738: PPOPN 3
26740: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
26741: LD_INT 0
26743: PPUSH
26744: PPUSH
26745: PPUSH
26746: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26747: LD_ADDR_VAR 0 4
26751: PUSH
26752: LD_INT 22
26754: PUSH
26755: LD_OWVAR 2
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 2
26766: PUSH
26767: LD_INT 30
26769: PUSH
26770: LD_INT 0
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 30
26779: PUSH
26780: LD_INT 1
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: LIST
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PPUSH
26796: CALL_OW 69
26800: ST_TO_ADDR
// if not tmp then
26801: LD_VAR 0 4
26805: NOT
26806: IFFALSE 26810
// exit ;
26808: GO 26869
// for i in tmp do
26810: LD_ADDR_VAR 0 2
26814: PUSH
26815: LD_VAR 0 4
26819: PUSH
26820: FOR_IN
26821: IFFALSE 26867
// for j = 1 to 3 do
26823: LD_ADDR_VAR 0 3
26827: PUSH
26828: DOUBLE
26829: LD_INT 1
26831: DEC
26832: ST_TO_ADDR
26833: LD_INT 3
26835: PUSH
26836: FOR_TO
26837: IFFALSE 26863
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
26839: LD_VAR 0 2
26843: PPUSH
26844: CALL_OW 274
26848: PPUSH
26849: LD_VAR 0 3
26853: PPUSH
26854: LD_INT 99999
26856: PPUSH
26857: CALL_OW 277
26861: GO 26836
26863: POP
26864: POP
26865: GO 26820
26867: POP
26868: POP
// end ;
26869: LD_VAR 0 1
26873: RET
// export function hHackSetLevel10 ; var i , j ; begin
26874: LD_INT 0
26876: PPUSH
26877: PPUSH
26878: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26879: LD_ADDR_VAR 0 2
26883: PUSH
26884: LD_INT 21
26886: PUSH
26887: LD_INT 1
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PPUSH
26894: CALL_OW 69
26898: PUSH
26899: FOR_IN
26900: IFFALSE 26952
// if IsSelected ( i ) then
26902: LD_VAR 0 2
26906: PPUSH
26907: CALL_OW 306
26911: IFFALSE 26950
// begin for j := 1 to 4 do
26913: LD_ADDR_VAR 0 3
26917: PUSH
26918: DOUBLE
26919: LD_INT 1
26921: DEC
26922: ST_TO_ADDR
26923: LD_INT 4
26925: PUSH
26926: FOR_TO
26927: IFFALSE 26948
// SetSkill ( i , j , 10 ) ;
26929: LD_VAR 0 2
26933: PPUSH
26934: LD_VAR 0 3
26938: PPUSH
26939: LD_INT 10
26941: PPUSH
26942: CALL_OW 237
26946: GO 26926
26948: POP
26949: POP
// end ;
26950: GO 26899
26952: POP
26953: POP
// end ;
26954: LD_VAR 0 1
26958: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
26959: LD_INT 0
26961: PPUSH
26962: PPUSH
26963: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26964: LD_ADDR_VAR 0 2
26968: PUSH
26969: LD_INT 22
26971: PUSH
26972: LD_OWVAR 2
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 21
26983: PUSH
26984: LD_INT 1
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PPUSH
26995: CALL_OW 69
26999: PUSH
27000: FOR_IN
27001: IFFALSE 27042
// begin for j := 1 to 4 do
27003: LD_ADDR_VAR 0 3
27007: PUSH
27008: DOUBLE
27009: LD_INT 1
27011: DEC
27012: ST_TO_ADDR
27013: LD_INT 4
27015: PUSH
27016: FOR_TO
27017: IFFALSE 27038
// SetSkill ( i , j , 10 ) ;
27019: LD_VAR 0 2
27023: PPUSH
27024: LD_VAR 0 3
27028: PPUSH
27029: LD_INT 10
27031: PPUSH
27032: CALL_OW 237
27036: GO 27016
27038: POP
27039: POP
// end ;
27040: GO 27000
27042: POP
27043: POP
// end ;
27044: LD_VAR 0 1
27048: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
27049: LD_INT 0
27051: PPUSH
// uc_side := your_side ;
27052: LD_ADDR_OWVAR 20
27056: PUSH
27057: LD_OWVAR 2
27061: ST_TO_ADDR
// uc_nation := nation ;
27062: LD_ADDR_OWVAR 21
27066: PUSH
27067: LD_VAR 0 1
27071: ST_TO_ADDR
// InitHc ;
27072: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
27076: LD_INT 0
27078: PPUSH
27079: LD_VAR 0 2
27083: PPUSH
27084: LD_VAR 0 3
27088: PPUSH
27089: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
27093: CALL_OW 44
27097: PPUSH
27098: LD_INT 1
27100: PPUSH
27101: CALL_OW 51
// end ;
27105: LD_VAR 0 4
27109: RET
// export function hHackSpawnVehicle ; begin
27110: LD_INT 0
27112: PPUSH
// uc_side := your_side ;
27113: LD_ADDR_OWVAR 20
27117: PUSH
27118: LD_OWVAR 2
27122: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
27123: LD_ADDR_OWVAR 21
27127: PUSH
27128: LD_INT 1
27130: PPUSH
27131: LD_INT 3
27133: PPUSH
27134: CALL_OW 12
27138: ST_TO_ADDR
// InitVc ;
27139: CALL_OW 20
// case uc_nation of 1 :
27143: LD_OWVAR 21
27147: PUSH
27148: LD_INT 1
27150: DOUBLE
27151: EQUAL
27152: IFTRUE 27156
27154: GO 27300
27156: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
27157: LD_ADDR_OWVAR 37
27161: PUSH
27162: LD_INT 1
27164: PUSH
27165: LD_INT 2
27167: PUSH
27168: LD_INT 3
27170: PUSH
27171: LD_INT 4
27173: PUSH
27174: LD_INT 5
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: PUSH
27184: LD_INT 1
27186: PPUSH
27187: LD_INT 5
27189: PPUSH
27190: CALL_OW 12
27194: ARRAY
27195: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
27196: LD_ADDR_OWVAR 39
27200: PUSH
27201: LD_INT 1
27203: PPUSH
27204: LD_INT 3
27206: PPUSH
27207: CALL_OW 12
27211: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
27212: LD_ADDR_OWVAR 38
27216: PUSH
27217: LD_INT 1
27219: PUSH
27220: LD_INT 2
27222: PUSH
27223: LD_INT 3
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 1
27233: PPUSH
27234: LD_INT 3
27236: PPUSH
27237: CALL_OW 12
27241: ARRAY
27242: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
27243: LD_ADDR_OWVAR 40
27247: PUSH
27248: LD_INT 2
27250: PUSH
27251: LD_INT 4
27253: PUSH
27254: LD_INT 5
27256: PUSH
27257: LD_INT 3
27259: PUSH
27260: LD_INT 7
27262: PUSH
27263: LD_INT 8
27265: PUSH
27266: LD_INT 9
27268: PUSH
27269: LD_INT 10
27271: PUSH
27272: LD_INT 6
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 1
27288: PPUSH
27289: LD_INT 9
27291: PPUSH
27292: CALL_OW 12
27296: ARRAY
27297: ST_TO_ADDR
// end ; 2 :
27298: GO 27565
27300: LD_INT 2
27302: DOUBLE
27303: EQUAL
27304: IFTRUE 27308
27306: GO 27432
27308: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
27309: LD_ADDR_OWVAR 37
27313: PUSH
27314: LD_INT 11
27316: PUSH
27317: LD_INT 12
27319: PUSH
27320: LD_INT 13
27322: PUSH
27323: LD_INT 14
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 1
27334: PPUSH
27335: LD_INT 4
27337: PPUSH
27338: CALL_OW 12
27342: ARRAY
27343: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
27344: LD_ADDR_OWVAR 39
27348: PUSH
27349: LD_INT 1
27351: PPUSH
27352: LD_INT 3
27354: PPUSH
27355: CALL_OW 12
27359: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
27360: LD_ADDR_OWVAR 38
27364: PUSH
27365: LD_INT 1
27367: PUSH
27368: LD_INT 2
27370: PUSH
27371: LD_INT 5
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: LIST
27378: PUSH
27379: LD_INT 1
27381: PPUSH
27382: LD_INT 3
27384: PPUSH
27385: CALL_OW 12
27389: ARRAY
27390: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
27391: LD_ADDR_OWVAR 40
27395: PUSH
27396: LD_INT 24
27398: PUSH
27399: LD_INT 26
27401: PUSH
27402: LD_INT 27
27404: PUSH
27405: LD_INT 28
27407: PUSH
27408: LD_INT 29
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 1
27420: PPUSH
27421: LD_INT 5
27423: PPUSH
27424: CALL_OW 12
27428: ARRAY
27429: ST_TO_ADDR
// end ; 3 :
27430: GO 27565
27432: LD_INT 3
27434: DOUBLE
27435: EQUAL
27436: IFTRUE 27440
27438: GO 27564
27440: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
27441: LD_ADDR_OWVAR 37
27445: PUSH
27446: LD_INT 21
27448: PUSH
27449: LD_INT 23
27451: PUSH
27452: LD_INT 22
27454: PUSH
27455: LD_INT 24
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 1
27466: PPUSH
27467: LD_INT 4
27469: PPUSH
27470: CALL_OW 12
27474: ARRAY
27475: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
27476: LD_ADDR_OWVAR 39
27480: PUSH
27481: LD_INT 1
27483: PPUSH
27484: LD_INT 3
27486: PPUSH
27487: CALL_OW 12
27491: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
27492: LD_ADDR_OWVAR 38
27496: PUSH
27497: LD_INT 1
27499: PUSH
27500: LD_INT 3
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 1
27509: PPUSH
27510: LD_INT 2
27512: PPUSH
27513: CALL_OW 12
27517: ARRAY
27518: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
27519: LD_ADDR_OWVAR 40
27523: PUSH
27524: LD_INT 42
27526: PUSH
27527: LD_INT 43
27529: PUSH
27530: LD_INT 44
27532: PUSH
27533: LD_INT 46
27535: PUSH
27536: LD_INT 48
27538: PUSH
27539: LD_INT 47
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 1
27552: PPUSH
27553: LD_INT 6
27555: PPUSH
27556: CALL_OW 12
27560: ARRAY
27561: ST_TO_ADDR
// end ; end ;
27562: GO 27565
27564: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27565: CALL_OW 45
27569: PPUSH
27570: LD_INT 1
27572: PPUSH
27573: CALL_OW 51
// end ;
27577: LD_VAR 0 1
27581: RET
// export hInvincible ; every 1 do
27582: GO 27584
27584: DISABLE
// hInvincible := [ ] ;
27585: LD_ADDR_EXP 119
27589: PUSH
27590: EMPTY
27591: ST_TO_ADDR
27592: END
// every 10 do var i ;
27593: GO 27595
27595: DISABLE
27596: LD_INT 0
27598: PPUSH
// begin enable ;
27599: ENABLE
// if not hInvincible then
27600: LD_EXP 119
27604: NOT
27605: IFFALSE 27609
// exit ;
27607: GO 27653
// for i in hInvincible do
27609: LD_ADDR_VAR 0 1
27613: PUSH
27614: LD_EXP 119
27618: PUSH
27619: FOR_IN
27620: IFFALSE 27651
// if GetLives ( i ) < 1000 then
27622: LD_VAR 0 1
27626: PPUSH
27627: CALL_OW 256
27631: PUSH
27632: LD_INT 1000
27634: LESS
27635: IFFALSE 27649
// SetLives ( i , 1000 ) ;
27637: LD_VAR 0 1
27641: PPUSH
27642: LD_INT 1000
27644: PPUSH
27645: CALL_OW 234
27649: GO 27619
27651: POP
27652: POP
// end ;
27653: PPOPN 1
27655: END
// export function hHackInvincible ; var i ; begin
27656: LD_INT 0
27658: PPUSH
27659: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
27660: LD_ADDR_VAR 0 2
27664: PUSH
27665: LD_INT 2
27667: PUSH
27668: LD_INT 21
27670: PUSH
27671: LD_INT 1
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: LD_INT 21
27680: PUSH
27681: LD_INT 2
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: LIST
27692: PPUSH
27693: CALL_OW 69
27697: PUSH
27698: FOR_IN
27699: IFFALSE 27760
// if IsSelected ( i ) then
27701: LD_VAR 0 2
27705: PPUSH
27706: CALL_OW 306
27710: IFFALSE 27758
// begin if i in hInvincible then
27712: LD_VAR 0 2
27716: PUSH
27717: LD_EXP 119
27721: IN
27722: IFFALSE 27742
// hInvincible := hInvincible diff i else
27724: LD_ADDR_EXP 119
27728: PUSH
27729: LD_EXP 119
27733: PUSH
27734: LD_VAR 0 2
27738: DIFF
27739: ST_TO_ADDR
27740: GO 27758
// hInvincible := hInvincible union i ;
27742: LD_ADDR_EXP 119
27746: PUSH
27747: LD_EXP 119
27751: PUSH
27752: LD_VAR 0 2
27756: UNION
27757: ST_TO_ADDR
// end ;
27758: GO 27698
27760: POP
27761: POP
// end ;
27762: LD_VAR 0 1
27766: RET
// export function hHackInvisible ; var i , j ; begin
27767: LD_INT 0
27769: PPUSH
27770: PPUSH
27771: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27772: LD_ADDR_VAR 0 2
27776: PUSH
27777: LD_INT 21
27779: PUSH
27780: LD_INT 1
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PPUSH
27787: CALL_OW 69
27791: PUSH
27792: FOR_IN
27793: IFFALSE 27817
// if IsSelected ( i ) then
27795: LD_VAR 0 2
27799: PPUSH
27800: CALL_OW 306
27804: IFFALSE 27815
// ComForceInvisible ( i ) ;
27806: LD_VAR 0 2
27810: PPUSH
27811: CALL_OW 496
27815: GO 27792
27817: POP
27818: POP
// end ;
27819: LD_VAR 0 1
27823: RET
// export function hHackChangeYourSide ; begin
27824: LD_INT 0
27826: PPUSH
// if your_side = 8 then
27827: LD_OWVAR 2
27831: PUSH
27832: LD_INT 8
27834: EQUAL
27835: IFFALSE 27847
// your_side := 0 else
27837: LD_ADDR_OWVAR 2
27841: PUSH
27842: LD_INT 0
27844: ST_TO_ADDR
27845: GO 27861
// your_side := your_side + 1 ;
27847: LD_ADDR_OWVAR 2
27851: PUSH
27852: LD_OWVAR 2
27856: PUSH
27857: LD_INT 1
27859: PLUS
27860: ST_TO_ADDR
// end ;
27861: LD_VAR 0 1
27865: RET
// export function hHackChangeUnitSide ; var i , j ; begin
27866: LD_INT 0
27868: PPUSH
27869: PPUSH
27870: PPUSH
// for i in all_units do
27871: LD_ADDR_VAR 0 2
27875: PUSH
27876: LD_OWVAR 3
27880: PUSH
27881: FOR_IN
27882: IFFALSE 27960
// if IsSelected ( i ) then
27884: LD_VAR 0 2
27888: PPUSH
27889: CALL_OW 306
27893: IFFALSE 27958
// begin j := GetSide ( i ) ;
27895: LD_ADDR_VAR 0 3
27899: PUSH
27900: LD_VAR 0 2
27904: PPUSH
27905: CALL_OW 255
27909: ST_TO_ADDR
// if j = 8 then
27910: LD_VAR 0 3
27914: PUSH
27915: LD_INT 8
27917: EQUAL
27918: IFFALSE 27930
// j := 0 else
27920: LD_ADDR_VAR 0 3
27924: PUSH
27925: LD_INT 0
27927: ST_TO_ADDR
27928: GO 27944
// j := j + 1 ;
27930: LD_ADDR_VAR 0 3
27934: PUSH
27935: LD_VAR 0 3
27939: PUSH
27940: LD_INT 1
27942: PLUS
27943: ST_TO_ADDR
// SetSide ( i , j ) ;
27944: LD_VAR 0 2
27948: PPUSH
27949: LD_VAR 0 3
27953: PPUSH
27954: CALL_OW 235
// end ;
27958: GO 27881
27960: POP
27961: POP
// end ;
27962: LD_VAR 0 1
27966: RET
// export function hHackFog ; begin
27967: LD_INT 0
27969: PPUSH
// FogOff ( true ) ;
27970: LD_INT 1
27972: PPUSH
27973: CALL_OW 344
// end ;
27977: LD_VAR 0 1
27981: RET
// export function hHackApeman ; begin
27982: LD_INT 0
27984: PPUSH
// uc_side := your_side ;
27985: LD_ADDR_OWVAR 20
27989: PUSH
27990: LD_OWVAR 2
27994: ST_TO_ADDR
// uc_nation := 0 ;
27995: LD_ADDR_OWVAR 21
27999: PUSH
28000: LD_INT 0
28002: ST_TO_ADDR
// hc_name :=  ;
28003: LD_ADDR_OWVAR 26
28007: PUSH
28008: LD_STRING 
28010: ST_TO_ADDR
// hc_gallery :=  ;
28011: LD_ADDR_OWVAR 33
28015: PUSH
28016: LD_STRING 
28018: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
28019: LD_ADDR_OWVAR 31
28023: PUSH
28024: LD_INT 0
28026: PUSH
28027: LD_INT 0
28029: PUSH
28030: LD_INT 0
28032: PUSH
28033: LD_INT 0
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: ST_TO_ADDR
// hc_class := class_apeman ;
28042: LD_ADDR_OWVAR 28
28046: PUSH
28047: LD_INT 12
28049: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
28050: CALL_OW 44
28054: PPUSH
28055: LD_INT 1
28057: PPUSH
28058: CALL_OW 51
// end ;
28062: LD_VAR 0 1
28066: RET
// export function hHackBoom ; begin
28067: LD_INT 0
28069: PPUSH
// uc_side := your_side ;
28070: LD_ADDR_OWVAR 20
28074: PUSH
28075: LD_OWVAR 2
28079: ST_TO_ADDR
// uc_nation := 1 ;
28080: LD_ADDR_OWVAR 21
28084: PUSH
28085: LD_INT 1
28087: ST_TO_ADDR
// vc_chassis := us_morphling ;
28088: LD_ADDR_OWVAR 37
28092: PUSH
28093: LD_INT 5
28095: ST_TO_ADDR
// vc_engine := engine_siberite ;
28096: LD_ADDR_OWVAR 39
28100: PUSH
28101: LD_INT 3
28103: ST_TO_ADDR
// vc_control := control_computer ;
28104: LD_ADDR_OWVAR 38
28108: PUSH
28109: LD_INT 3
28111: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
28112: LD_ADDR_OWVAR 40
28116: PUSH
28117: LD_INT 8
28119: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28120: CALL_OW 45
28124: PPUSH
28125: LD_INT 1
28127: PPUSH
28128: CALL_OW 51
// end ; end_of_file end_of_file
28132: LD_VAR 0 1
28136: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28137: LD_INT 0
28139: PPUSH
28140: PPUSH
// if exist_mode then
28141: LD_VAR 0 2
28145: IFFALSE 28170
// unit := CreateCharacter ( prefix & ident ) else
28147: LD_ADDR_VAR 0 5
28151: PUSH
28152: LD_VAR 0 3
28156: PUSH
28157: LD_VAR 0 1
28161: STR
28162: PPUSH
28163: CALL_OW 34
28167: ST_TO_ADDR
28168: GO 28185
// unit := NewCharacter ( ident ) ;
28170: LD_ADDR_VAR 0 5
28174: PUSH
28175: LD_VAR 0 1
28179: PPUSH
28180: CALL_OW 25
28184: ST_TO_ADDR
// result := unit ;
28185: LD_ADDR_VAR 0 4
28189: PUSH
28190: LD_VAR 0 5
28194: ST_TO_ADDR
// end ;
28195: LD_VAR 0 4
28199: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28200: LD_INT 0
28202: PPUSH
28203: PPUSH
// if not side or not nation then
28204: LD_VAR 0 1
28208: NOT
28209: PUSH
28210: LD_VAR 0 2
28214: NOT
28215: OR
28216: IFFALSE 28220
// exit ;
28218: GO 28984
// case nation of nation_american :
28220: LD_VAR 0 2
28224: PUSH
28225: LD_INT 1
28227: DOUBLE
28228: EQUAL
28229: IFTRUE 28233
28231: GO 28447
28233: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28234: LD_ADDR_VAR 0 4
28238: PUSH
28239: LD_INT 35
28241: PUSH
28242: LD_INT 45
28244: PUSH
28245: LD_INT 46
28247: PUSH
28248: LD_INT 47
28250: PUSH
28251: LD_INT 82
28253: PUSH
28254: LD_INT 83
28256: PUSH
28257: LD_INT 84
28259: PUSH
28260: LD_INT 85
28262: PUSH
28263: LD_INT 86
28265: PUSH
28266: LD_INT 1
28268: PUSH
28269: LD_INT 2
28271: PUSH
28272: LD_INT 6
28274: PUSH
28275: LD_INT 15
28277: PUSH
28278: LD_INT 16
28280: PUSH
28281: LD_INT 7
28283: PUSH
28284: LD_INT 12
28286: PUSH
28287: LD_INT 13
28289: PUSH
28290: LD_INT 10
28292: PUSH
28293: LD_INT 14
28295: PUSH
28296: LD_INT 20
28298: PUSH
28299: LD_INT 21
28301: PUSH
28302: LD_INT 22
28304: PUSH
28305: LD_INT 25
28307: PUSH
28308: LD_INT 32
28310: PUSH
28311: LD_INT 27
28313: PUSH
28314: LD_INT 36
28316: PUSH
28317: LD_INT 69
28319: PUSH
28320: LD_INT 39
28322: PUSH
28323: LD_INT 34
28325: PUSH
28326: LD_INT 40
28328: PUSH
28329: LD_INT 48
28331: PUSH
28332: LD_INT 49
28334: PUSH
28335: LD_INT 50
28337: PUSH
28338: LD_INT 51
28340: PUSH
28341: LD_INT 52
28343: PUSH
28344: LD_INT 53
28346: PUSH
28347: LD_INT 54
28349: PUSH
28350: LD_INT 55
28352: PUSH
28353: LD_INT 56
28355: PUSH
28356: LD_INT 57
28358: PUSH
28359: LD_INT 58
28361: PUSH
28362: LD_INT 59
28364: PUSH
28365: LD_INT 60
28367: PUSH
28368: LD_INT 61
28370: PUSH
28371: LD_INT 62
28373: PUSH
28374: LD_INT 80
28376: PUSH
28377: LD_INT 82
28379: PUSH
28380: LD_INT 83
28382: PUSH
28383: LD_INT 84
28385: PUSH
28386: LD_INT 85
28388: PUSH
28389: LD_INT 86
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: LIST
28431: LIST
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: ST_TO_ADDR
28445: GO 28908
28447: LD_INT 2
28449: DOUBLE
28450: EQUAL
28451: IFTRUE 28455
28453: GO 28677
28455: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
28456: LD_ADDR_VAR 0 4
28460: PUSH
28461: LD_INT 35
28463: PUSH
28464: LD_INT 45
28466: PUSH
28467: LD_INT 46
28469: PUSH
28470: LD_INT 47
28472: PUSH
28473: LD_INT 82
28475: PUSH
28476: LD_INT 83
28478: PUSH
28479: LD_INT 84
28481: PUSH
28482: LD_INT 85
28484: PUSH
28485: LD_INT 87
28487: PUSH
28488: LD_INT 70
28490: PUSH
28491: LD_INT 1
28493: PUSH
28494: LD_INT 11
28496: PUSH
28497: LD_INT 3
28499: PUSH
28500: LD_INT 4
28502: PUSH
28503: LD_INT 5
28505: PUSH
28506: LD_INT 6
28508: PUSH
28509: LD_INT 15
28511: PUSH
28512: LD_INT 18
28514: PUSH
28515: LD_INT 7
28517: PUSH
28518: LD_INT 17
28520: PUSH
28521: LD_INT 8
28523: PUSH
28524: LD_INT 20
28526: PUSH
28527: LD_INT 21
28529: PUSH
28530: LD_INT 22
28532: PUSH
28533: LD_INT 72
28535: PUSH
28536: LD_INT 26
28538: PUSH
28539: LD_INT 69
28541: PUSH
28542: LD_INT 39
28544: PUSH
28545: LD_INT 40
28547: PUSH
28548: LD_INT 41
28550: PUSH
28551: LD_INT 42
28553: PUSH
28554: LD_INT 43
28556: PUSH
28557: LD_INT 48
28559: PUSH
28560: LD_INT 49
28562: PUSH
28563: LD_INT 50
28565: PUSH
28566: LD_INT 51
28568: PUSH
28569: LD_INT 52
28571: PUSH
28572: LD_INT 53
28574: PUSH
28575: LD_INT 54
28577: PUSH
28578: LD_INT 55
28580: PUSH
28581: LD_INT 56
28583: PUSH
28584: LD_INT 60
28586: PUSH
28587: LD_INT 61
28589: PUSH
28590: LD_INT 62
28592: PUSH
28593: LD_INT 66
28595: PUSH
28596: LD_INT 67
28598: PUSH
28599: LD_INT 68
28601: PUSH
28602: LD_INT 81
28604: PUSH
28605: LD_INT 82
28607: PUSH
28608: LD_INT 83
28610: PUSH
28611: LD_INT 84
28613: PUSH
28614: LD_INT 85
28616: PUSH
28617: LD_INT 87
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: ST_TO_ADDR
28675: GO 28908
28677: LD_INT 3
28679: DOUBLE
28680: EQUAL
28681: IFTRUE 28685
28683: GO 28907
28685: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28686: LD_ADDR_VAR 0 4
28690: PUSH
28691: LD_INT 46
28693: PUSH
28694: LD_INT 47
28696: PUSH
28697: LD_INT 1
28699: PUSH
28700: LD_INT 2
28702: PUSH
28703: LD_INT 82
28705: PUSH
28706: LD_INT 83
28708: PUSH
28709: LD_INT 84
28711: PUSH
28712: LD_INT 85
28714: PUSH
28715: LD_INT 86
28717: PUSH
28718: LD_INT 11
28720: PUSH
28721: LD_INT 9
28723: PUSH
28724: LD_INT 20
28726: PUSH
28727: LD_INT 19
28729: PUSH
28730: LD_INT 21
28732: PUSH
28733: LD_INT 24
28735: PUSH
28736: LD_INT 22
28738: PUSH
28739: LD_INT 25
28741: PUSH
28742: LD_INT 28
28744: PUSH
28745: LD_INT 29
28747: PUSH
28748: LD_INT 30
28750: PUSH
28751: LD_INT 31
28753: PUSH
28754: LD_INT 37
28756: PUSH
28757: LD_INT 38
28759: PUSH
28760: LD_INT 32
28762: PUSH
28763: LD_INT 27
28765: PUSH
28766: LD_INT 33
28768: PUSH
28769: LD_INT 69
28771: PUSH
28772: LD_INT 39
28774: PUSH
28775: LD_INT 34
28777: PUSH
28778: LD_INT 40
28780: PUSH
28781: LD_INT 71
28783: PUSH
28784: LD_INT 23
28786: PUSH
28787: LD_INT 44
28789: PUSH
28790: LD_INT 48
28792: PUSH
28793: LD_INT 49
28795: PUSH
28796: LD_INT 50
28798: PUSH
28799: LD_INT 51
28801: PUSH
28802: LD_INT 52
28804: PUSH
28805: LD_INT 53
28807: PUSH
28808: LD_INT 54
28810: PUSH
28811: LD_INT 55
28813: PUSH
28814: LD_INT 56
28816: PUSH
28817: LD_INT 57
28819: PUSH
28820: LD_INT 58
28822: PUSH
28823: LD_INT 59
28825: PUSH
28826: LD_INT 63
28828: PUSH
28829: LD_INT 64
28831: PUSH
28832: LD_INT 65
28834: PUSH
28835: LD_INT 82
28837: PUSH
28838: LD_INT 83
28840: PUSH
28841: LD_INT 84
28843: PUSH
28844: LD_INT 85
28846: PUSH
28847: LD_INT 86
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: ST_TO_ADDR
28905: GO 28908
28907: POP
// if state > - 1 and state < 3 then
28908: LD_VAR 0 3
28912: PUSH
28913: LD_INT 1
28915: NEG
28916: GREATER
28917: PUSH
28918: LD_VAR 0 3
28922: PUSH
28923: LD_INT 3
28925: LESS
28926: AND
28927: IFFALSE 28984
// for i in result do
28929: LD_ADDR_VAR 0 5
28933: PUSH
28934: LD_VAR 0 4
28938: PUSH
28939: FOR_IN
28940: IFFALSE 28982
// if GetTech ( i , side ) <> state then
28942: LD_VAR 0 5
28946: PPUSH
28947: LD_VAR 0 1
28951: PPUSH
28952: CALL_OW 321
28956: PUSH
28957: LD_VAR 0 3
28961: NONEQUAL
28962: IFFALSE 28980
// result := result diff i ;
28964: LD_ADDR_VAR 0 4
28968: PUSH
28969: LD_VAR 0 4
28973: PUSH
28974: LD_VAR 0 5
28978: DIFF
28979: ST_TO_ADDR
28980: GO 28939
28982: POP
28983: POP
// end ;
28984: LD_VAR 0 4
28988: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28989: LD_INT 0
28991: PPUSH
28992: PPUSH
28993: PPUSH
// result := true ;
28994: LD_ADDR_VAR 0 3
28998: PUSH
28999: LD_INT 1
29001: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29002: LD_ADDR_VAR 0 5
29006: PUSH
29007: LD_VAR 0 2
29011: PPUSH
29012: CALL_OW 480
29016: ST_TO_ADDR
// if not tmp then
29017: LD_VAR 0 5
29021: NOT
29022: IFFALSE 29026
// exit ;
29024: GO 29075
// for i in tmp do
29026: LD_ADDR_VAR 0 4
29030: PUSH
29031: LD_VAR 0 5
29035: PUSH
29036: FOR_IN
29037: IFFALSE 29073
// if GetTech ( i , side ) <> state_researched then
29039: LD_VAR 0 4
29043: PPUSH
29044: LD_VAR 0 1
29048: PPUSH
29049: CALL_OW 321
29053: PUSH
29054: LD_INT 2
29056: NONEQUAL
29057: IFFALSE 29071
// begin result := false ;
29059: LD_ADDR_VAR 0 3
29063: PUSH
29064: LD_INT 0
29066: ST_TO_ADDR
// exit ;
29067: POP
29068: POP
29069: GO 29075
// end ;
29071: GO 29036
29073: POP
29074: POP
// end ;
29075: LD_VAR 0 3
29079: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29080: LD_INT 0
29082: PPUSH
29083: PPUSH
29084: PPUSH
29085: PPUSH
29086: PPUSH
29087: PPUSH
29088: PPUSH
29089: PPUSH
29090: PPUSH
29091: PPUSH
29092: PPUSH
29093: PPUSH
29094: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29095: LD_VAR 0 1
29099: NOT
29100: PUSH
29101: LD_VAR 0 1
29105: PPUSH
29106: CALL_OW 257
29110: PUSH
29111: LD_INT 9
29113: NONEQUAL
29114: OR
29115: IFFALSE 29119
// exit ;
29117: GO 29692
// side := GetSide ( unit ) ;
29119: LD_ADDR_VAR 0 9
29123: PUSH
29124: LD_VAR 0 1
29128: PPUSH
29129: CALL_OW 255
29133: ST_TO_ADDR
// tech_space := tech_spacanom ;
29134: LD_ADDR_VAR 0 12
29138: PUSH
29139: LD_INT 29
29141: ST_TO_ADDR
// tech_time := tech_taurad ;
29142: LD_ADDR_VAR 0 13
29146: PUSH
29147: LD_INT 28
29149: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29150: LD_ADDR_VAR 0 11
29154: PUSH
29155: LD_VAR 0 1
29159: PPUSH
29160: CALL_OW 310
29164: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29165: LD_VAR 0 11
29169: PPUSH
29170: CALL_OW 247
29174: PUSH
29175: LD_INT 2
29177: EQUAL
29178: IFFALSE 29182
// exit ;
29180: GO 29692
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29182: LD_ADDR_VAR 0 8
29186: PUSH
29187: LD_INT 81
29189: PUSH
29190: LD_VAR 0 9
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 3
29201: PUSH
29202: LD_INT 21
29204: PUSH
29205: LD_INT 3
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PPUSH
29220: CALL_OW 69
29224: ST_TO_ADDR
// if not tmp then
29225: LD_VAR 0 8
29229: NOT
29230: IFFALSE 29234
// exit ;
29232: GO 29692
// if in_unit then
29234: LD_VAR 0 11
29238: IFFALSE 29262
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29240: LD_ADDR_VAR 0 10
29244: PUSH
29245: LD_VAR 0 8
29249: PPUSH
29250: LD_VAR 0 11
29254: PPUSH
29255: CALL_OW 74
29259: ST_TO_ADDR
29260: GO 29282
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29262: LD_ADDR_VAR 0 10
29266: PUSH
29267: LD_VAR 0 8
29271: PPUSH
29272: LD_VAR 0 1
29276: PPUSH
29277: CALL_OW 74
29281: ST_TO_ADDR
// if not enemy then
29282: LD_VAR 0 10
29286: NOT
29287: IFFALSE 29291
// exit ;
29289: GO 29692
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29291: LD_VAR 0 11
29295: PUSH
29296: LD_VAR 0 11
29300: PPUSH
29301: LD_VAR 0 10
29305: PPUSH
29306: CALL_OW 296
29310: PUSH
29311: LD_INT 13
29313: GREATER
29314: AND
29315: PUSH
29316: LD_VAR 0 1
29320: PPUSH
29321: LD_VAR 0 10
29325: PPUSH
29326: CALL_OW 296
29330: PUSH
29331: LD_INT 12
29333: GREATER
29334: OR
29335: IFFALSE 29339
// exit ;
29337: GO 29692
// missile := [ 1 ] ;
29339: LD_ADDR_VAR 0 14
29343: PUSH
29344: LD_INT 1
29346: PUSH
29347: EMPTY
29348: LIST
29349: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29350: LD_VAR 0 9
29354: PPUSH
29355: LD_VAR 0 12
29359: PPUSH
29360: CALL_OW 325
29364: IFFALSE 29393
// missile := Insert ( missile , missile + 1 , 2 ) ;
29366: LD_ADDR_VAR 0 14
29370: PUSH
29371: LD_VAR 0 14
29375: PPUSH
29376: LD_VAR 0 14
29380: PUSH
29381: LD_INT 1
29383: PLUS
29384: PPUSH
29385: LD_INT 2
29387: PPUSH
29388: CALL_OW 2
29392: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29393: LD_VAR 0 9
29397: PPUSH
29398: LD_VAR 0 13
29402: PPUSH
29403: CALL_OW 325
29407: PUSH
29408: LD_VAR 0 10
29412: PPUSH
29413: CALL_OW 255
29417: PPUSH
29418: LD_VAR 0 13
29422: PPUSH
29423: CALL_OW 325
29427: NOT
29428: AND
29429: IFFALSE 29458
// missile := Insert ( missile , missile + 1 , 3 ) ;
29431: LD_ADDR_VAR 0 14
29435: PUSH
29436: LD_VAR 0 14
29440: PPUSH
29441: LD_VAR 0 14
29445: PUSH
29446: LD_INT 1
29448: PLUS
29449: PPUSH
29450: LD_INT 3
29452: PPUSH
29453: CALL_OW 2
29457: ST_TO_ADDR
// if missile < 2 then
29458: LD_VAR 0 14
29462: PUSH
29463: LD_INT 2
29465: LESS
29466: IFFALSE 29470
// exit ;
29468: GO 29692
// x := GetX ( enemy ) ;
29470: LD_ADDR_VAR 0 4
29474: PUSH
29475: LD_VAR 0 10
29479: PPUSH
29480: CALL_OW 250
29484: ST_TO_ADDR
// y := GetY ( enemy ) ;
29485: LD_ADDR_VAR 0 5
29489: PUSH
29490: LD_VAR 0 10
29494: PPUSH
29495: CALL_OW 251
29499: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29500: LD_ADDR_VAR 0 6
29504: PUSH
29505: LD_VAR 0 4
29509: PUSH
29510: LD_INT 1
29512: NEG
29513: PPUSH
29514: LD_INT 1
29516: PPUSH
29517: CALL_OW 12
29521: PLUS
29522: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29523: LD_ADDR_VAR 0 7
29527: PUSH
29528: LD_VAR 0 5
29532: PUSH
29533: LD_INT 1
29535: NEG
29536: PPUSH
29537: LD_INT 1
29539: PPUSH
29540: CALL_OW 12
29544: PLUS
29545: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29546: LD_VAR 0 6
29550: PPUSH
29551: LD_VAR 0 7
29555: PPUSH
29556: CALL_OW 488
29560: NOT
29561: IFFALSE 29583
// begin _x := x ;
29563: LD_ADDR_VAR 0 6
29567: PUSH
29568: LD_VAR 0 4
29572: ST_TO_ADDR
// _y := y ;
29573: LD_ADDR_VAR 0 7
29577: PUSH
29578: LD_VAR 0 5
29582: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29583: LD_ADDR_VAR 0 3
29587: PUSH
29588: LD_INT 1
29590: PPUSH
29591: LD_VAR 0 14
29595: PPUSH
29596: CALL_OW 12
29600: ST_TO_ADDR
// case i of 1 :
29601: LD_VAR 0 3
29605: PUSH
29606: LD_INT 1
29608: DOUBLE
29609: EQUAL
29610: IFTRUE 29614
29612: GO 29631
29614: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29615: LD_VAR 0 1
29619: PPUSH
29620: LD_VAR 0 10
29624: PPUSH
29625: CALL_OW 115
29629: GO 29692
29631: LD_INT 2
29633: DOUBLE
29634: EQUAL
29635: IFTRUE 29639
29637: GO 29661
29639: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29640: LD_VAR 0 1
29644: PPUSH
29645: LD_VAR 0 6
29649: PPUSH
29650: LD_VAR 0 7
29654: PPUSH
29655: CALL_OW 153
29659: GO 29692
29661: LD_INT 3
29663: DOUBLE
29664: EQUAL
29665: IFTRUE 29669
29667: GO 29691
29669: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29670: LD_VAR 0 1
29674: PPUSH
29675: LD_VAR 0 6
29679: PPUSH
29680: LD_VAR 0 7
29684: PPUSH
29685: CALL_OW 154
29689: GO 29692
29691: POP
// end ;
29692: LD_VAR 0 2
29696: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29697: LD_INT 0
29699: PPUSH
29700: PPUSH
29701: PPUSH
29702: PPUSH
29703: PPUSH
29704: PPUSH
// if not unit or not building then
29705: LD_VAR 0 1
29709: NOT
29710: PUSH
29711: LD_VAR 0 2
29715: NOT
29716: OR
29717: IFFALSE 29721
// exit ;
29719: GO 29879
// x := GetX ( building ) ;
29721: LD_ADDR_VAR 0 5
29725: PUSH
29726: LD_VAR 0 2
29730: PPUSH
29731: CALL_OW 250
29735: ST_TO_ADDR
// y := GetY ( building ) ;
29736: LD_ADDR_VAR 0 6
29740: PUSH
29741: LD_VAR 0 2
29745: PPUSH
29746: CALL_OW 251
29750: ST_TO_ADDR
// for i = 0 to 5 do
29751: LD_ADDR_VAR 0 4
29755: PUSH
29756: DOUBLE
29757: LD_INT 0
29759: DEC
29760: ST_TO_ADDR
29761: LD_INT 5
29763: PUSH
29764: FOR_TO
29765: IFFALSE 29877
// begin _x := ShiftX ( x , i , 3 ) ;
29767: LD_ADDR_VAR 0 7
29771: PUSH
29772: LD_VAR 0 5
29776: PPUSH
29777: LD_VAR 0 4
29781: PPUSH
29782: LD_INT 3
29784: PPUSH
29785: CALL_OW 272
29789: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29790: LD_ADDR_VAR 0 8
29794: PUSH
29795: LD_VAR 0 6
29799: PPUSH
29800: LD_VAR 0 4
29804: PPUSH
29805: LD_INT 3
29807: PPUSH
29808: CALL_OW 273
29812: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29813: LD_VAR 0 7
29817: PPUSH
29818: LD_VAR 0 8
29822: PPUSH
29823: CALL_OW 488
29827: NOT
29828: IFFALSE 29832
// continue ;
29830: GO 29764
// if HexInfo ( _x , _y ) = 0 then
29832: LD_VAR 0 7
29836: PPUSH
29837: LD_VAR 0 8
29841: PPUSH
29842: CALL_OW 428
29846: PUSH
29847: LD_INT 0
29849: EQUAL
29850: IFFALSE 29875
// begin ComMoveXY ( unit , _x , _y ) ;
29852: LD_VAR 0 1
29856: PPUSH
29857: LD_VAR 0 7
29861: PPUSH
29862: LD_VAR 0 8
29866: PPUSH
29867: CALL_OW 111
// exit ;
29871: POP
29872: POP
29873: GO 29879
// end ; end ;
29875: GO 29764
29877: POP
29878: POP
// end ;
29879: LD_VAR 0 3
29883: RET
// export function ScanBase ( side , base_area ) ; begin
29884: LD_INT 0
29886: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29887: LD_ADDR_VAR 0 3
29891: PUSH
29892: LD_VAR 0 2
29896: PPUSH
29897: LD_INT 81
29899: PUSH
29900: LD_VAR 0 1
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PPUSH
29909: CALL_OW 70
29913: ST_TO_ADDR
// end ;
29914: LD_VAR 0 3
29918: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29919: LD_INT 0
29921: PPUSH
29922: PPUSH
29923: PPUSH
29924: PPUSH
// result := false ;
29925: LD_ADDR_VAR 0 2
29929: PUSH
29930: LD_INT 0
29932: ST_TO_ADDR
// side := GetSide ( unit ) ;
29933: LD_ADDR_VAR 0 3
29937: PUSH
29938: LD_VAR 0 1
29942: PPUSH
29943: CALL_OW 255
29947: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29948: LD_ADDR_VAR 0 4
29952: PUSH
29953: LD_VAR 0 1
29957: PPUSH
29958: CALL_OW 248
29962: ST_TO_ADDR
// case nat of 1 :
29963: LD_VAR 0 4
29967: PUSH
29968: LD_INT 1
29970: DOUBLE
29971: EQUAL
29972: IFTRUE 29976
29974: GO 29987
29976: POP
// tech := tech_lassight ; 2 :
29977: LD_ADDR_VAR 0 5
29981: PUSH
29982: LD_INT 12
29984: ST_TO_ADDR
29985: GO 30026
29987: LD_INT 2
29989: DOUBLE
29990: EQUAL
29991: IFTRUE 29995
29993: GO 30006
29995: POP
// tech := tech_mortar ; 3 :
29996: LD_ADDR_VAR 0 5
30000: PUSH
30001: LD_INT 41
30003: ST_TO_ADDR
30004: GO 30026
30006: LD_INT 3
30008: DOUBLE
30009: EQUAL
30010: IFTRUE 30014
30012: GO 30025
30014: POP
// tech := tech_bazooka ; end ;
30015: LD_ADDR_VAR 0 5
30019: PUSH
30020: LD_INT 44
30022: ST_TO_ADDR
30023: GO 30026
30025: POP
// if Researched ( side , tech ) then
30026: LD_VAR 0 3
30030: PPUSH
30031: LD_VAR 0 5
30035: PPUSH
30036: CALL_OW 325
30040: IFFALSE 30067
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30042: LD_ADDR_VAR 0 2
30046: PUSH
30047: LD_INT 5
30049: PUSH
30050: LD_INT 8
30052: PUSH
30053: LD_INT 9
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: LIST
30060: PUSH
30061: LD_VAR 0 4
30065: ARRAY
30066: ST_TO_ADDR
// end ;
30067: LD_VAR 0 2
30071: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30072: LD_INT 0
30074: PPUSH
30075: PPUSH
30076: PPUSH
// if not mines then
30077: LD_VAR 0 2
30081: NOT
30082: IFFALSE 30086
// exit ;
30084: GO 30230
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30086: LD_ADDR_VAR 0 5
30090: PUSH
30091: LD_INT 81
30093: PUSH
30094: LD_VAR 0 1
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 3
30105: PUSH
30106: LD_INT 21
30108: PUSH
30109: LD_INT 3
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PPUSH
30124: CALL_OW 69
30128: ST_TO_ADDR
// for i in mines do
30129: LD_ADDR_VAR 0 4
30133: PUSH
30134: LD_VAR 0 2
30138: PUSH
30139: FOR_IN
30140: IFFALSE 30228
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30142: LD_VAR 0 4
30146: PUSH
30147: LD_INT 1
30149: ARRAY
30150: PPUSH
30151: LD_VAR 0 4
30155: PUSH
30156: LD_INT 2
30158: ARRAY
30159: PPUSH
30160: CALL_OW 458
30164: NOT
30165: IFFALSE 30169
// continue ;
30167: GO 30139
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30169: LD_VAR 0 4
30173: PUSH
30174: LD_INT 1
30176: ARRAY
30177: PPUSH
30178: LD_VAR 0 4
30182: PUSH
30183: LD_INT 2
30185: ARRAY
30186: PPUSH
30187: CALL_OW 428
30191: PUSH
30192: LD_VAR 0 5
30196: IN
30197: IFFALSE 30226
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30199: LD_VAR 0 4
30203: PUSH
30204: LD_INT 1
30206: ARRAY
30207: PPUSH
30208: LD_VAR 0 4
30212: PUSH
30213: LD_INT 2
30215: ARRAY
30216: PPUSH
30217: LD_VAR 0 1
30221: PPUSH
30222: CALL_OW 456
// end ;
30226: GO 30139
30228: POP
30229: POP
// end ;
30230: LD_VAR 0 3
30234: RET
// export function Count ( array ) ; var i ; begin
30235: LD_INT 0
30237: PPUSH
30238: PPUSH
// result := 0 ;
30239: LD_ADDR_VAR 0 2
30243: PUSH
30244: LD_INT 0
30246: ST_TO_ADDR
// for i in array do
30247: LD_ADDR_VAR 0 3
30251: PUSH
30252: LD_VAR 0 1
30256: PUSH
30257: FOR_IN
30258: IFFALSE 30282
// if i then
30260: LD_VAR 0 3
30264: IFFALSE 30280
// result := result + 1 ;
30266: LD_ADDR_VAR 0 2
30270: PUSH
30271: LD_VAR 0 2
30275: PUSH
30276: LD_INT 1
30278: PLUS
30279: ST_TO_ADDR
30280: GO 30257
30282: POP
30283: POP
// end ;
30284: LD_VAR 0 2
30288: RET
// export function IsEmpty ( building ) ; begin
30289: LD_INT 0
30291: PPUSH
// if not building then
30292: LD_VAR 0 1
30296: NOT
30297: IFFALSE 30301
// exit ;
30299: GO 30344
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30301: LD_ADDR_VAR 0 2
30305: PUSH
30306: LD_VAR 0 1
30310: PUSH
30311: LD_INT 22
30313: PUSH
30314: LD_VAR 0 1
30318: PPUSH
30319: CALL_OW 255
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 58
30330: PUSH
30331: EMPTY
30332: LIST
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PPUSH
30338: CALL_OW 69
30342: IN
30343: ST_TO_ADDR
// end ;
30344: LD_VAR 0 2
30348: RET
// export function IsNotFull ( building ) ; begin
30349: LD_INT 0
30351: PPUSH
// if not building then
30352: LD_VAR 0 1
30356: NOT
30357: IFFALSE 30361
// exit ;
30359: GO 30380
// result := UnitsInside ( building ) < 6 ;
30361: LD_ADDR_VAR 0 2
30365: PUSH
30366: LD_VAR 0 1
30370: PPUSH
30371: CALL_OW 313
30375: PUSH
30376: LD_INT 6
30378: LESS
30379: ST_TO_ADDR
// end ;
30380: LD_VAR 0 2
30384: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30385: LD_INT 0
30387: PPUSH
30388: PPUSH
30389: PPUSH
30390: PPUSH
// tmp := [ ] ;
30391: LD_ADDR_VAR 0 3
30395: PUSH
30396: EMPTY
30397: ST_TO_ADDR
// list := [ ] ;
30398: LD_ADDR_VAR 0 5
30402: PUSH
30403: EMPTY
30404: ST_TO_ADDR
// for i = 16 to 25 do
30405: LD_ADDR_VAR 0 4
30409: PUSH
30410: DOUBLE
30411: LD_INT 16
30413: DEC
30414: ST_TO_ADDR
30415: LD_INT 25
30417: PUSH
30418: FOR_TO
30419: IFFALSE 30492
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30421: LD_ADDR_VAR 0 3
30425: PUSH
30426: LD_VAR 0 3
30430: PUSH
30431: LD_INT 22
30433: PUSH
30434: LD_VAR 0 1
30438: PPUSH
30439: CALL_OW 255
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 91
30450: PUSH
30451: LD_VAR 0 1
30455: PUSH
30456: LD_INT 6
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 30
30466: PUSH
30467: LD_VAR 0 4
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: LIST
30480: PUSH
30481: EMPTY
30482: LIST
30483: PPUSH
30484: CALL_OW 69
30488: ADD
30489: ST_TO_ADDR
30490: GO 30418
30492: POP
30493: POP
// for i = 1 to tmp do
30494: LD_ADDR_VAR 0 4
30498: PUSH
30499: DOUBLE
30500: LD_INT 1
30502: DEC
30503: ST_TO_ADDR
30504: LD_VAR 0 3
30508: PUSH
30509: FOR_TO
30510: IFFALSE 30598
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30512: LD_ADDR_VAR 0 5
30516: PUSH
30517: LD_VAR 0 5
30521: PUSH
30522: LD_VAR 0 3
30526: PUSH
30527: LD_VAR 0 4
30531: ARRAY
30532: PPUSH
30533: CALL_OW 266
30537: PUSH
30538: LD_VAR 0 3
30542: PUSH
30543: LD_VAR 0 4
30547: ARRAY
30548: PPUSH
30549: CALL_OW 250
30553: PUSH
30554: LD_VAR 0 3
30558: PUSH
30559: LD_VAR 0 4
30563: ARRAY
30564: PPUSH
30565: CALL_OW 251
30569: PUSH
30570: LD_VAR 0 3
30574: PUSH
30575: LD_VAR 0 4
30579: ARRAY
30580: PPUSH
30581: CALL_OW 254
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: PUSH
30592: EMPTY
30593: LIST
30594: ADD
30595: ST_TO_ADDR
30596: GO 30509
30598: POP
30599: POP
// result := list ;
30600: LD_ADDR_VAR 0 2
30604: PUSH
30605: LD_VAR 0 5
30609: ST_TO_ADDR
// end ;
30610: LD_VAR 0 2
30614: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30615: LD_INT 0
30617: PPUSH
30618: PPUSH
30619: PPUSH
30620: PPUSH
30621: PPUSH
30622: PPUSH
30623: PPUSH
// if not factory then
30624: LD_VAR 0 1
30628: NOT
30629: IFFALSE 30633
// exit ;
30631: GO 31226
// if control = control_apeman then
30633: LD_VAR 0 4
30637: PUSH
30638: LD_INT 5
30640: EQUAL
30641: IFFALSE 30750
// begin tmp := UnitsInside ( factory ) ;
30643: LD_ADDR_VAR 0 8
30647: PUSH
30648: LD_VAR 0 1
30652: PPUSH
30653: CALL_OW 313
30657: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30658: LD_VAR 0 8
30662: PPUSH
30663: LD_INT 25
30665: PUSH
30666: LD_INT 12
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PPUSH
30673: CALL_OW 72
30677: NOT
30678: IFFALSE 30688
// control := control_manual ;
30680: LD_ADDR_VAR 0 4
30684: PUSH
30685: LD_INT 1
30687: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30688: LD_ADDR_VAR 0 8
30692: PUSH
30693: LD_VAR 0 1
30697: PPUSH
30698: CALL 30385 0 1
30702: ST_TO_ADDR
// if tmp then
30703: LD_VAR 0 8
30707: IFFALSE 30750
// begin for i in tmp do
30709: LD_ADDR_VAR 0 7
30713: PUSH
30714: LD_VAR 0 8
30718: PUSH
30719: FOR_IN
30720: IFFALSE 30748
// if i [ 1 ] = b_ext_radio then
30722: LD_VAR 0 7
30726: PUSH
30727: LD_INT 1
30729: ARRAY
30730: PUSH
30731: LD_INT 22
30733: EQUAL
30734: IFFALSE 30746
// begin control := control_remote ;
30736: LD_ADDR_VAR 0 4
30740: PUSH
30741: LD_INT 2
30743: ST_TO_ADDR
// break ;
30744: GO 30748
// end ;
30746: GO 30719
30748: POP
30749: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30750: LD_VAR 0 1
30754: PPUSH
30755: LD_VAR 0 2
30759: PPUSH
30760: LD_VAR 0 3
30764: PPUSH
30765: LD_VAR 0 4
30769: PPUSH
30770: LD_VAR 0 5
30774: PPUSH
30775: CALL_OW 448
30779: IFFALSE 30814
// begin result := [ chassis , engine , control , weapon ] ;
30781: LD_ADDR_VAR 0 6
30785: PUSH
30786: LD_VAR 0 2
30790: PUSH
30791: LD_VAR 0 3
30795: PUSH
30796: LD_VAR 0 4
30800: PUSH
30801: LD_VAR 0 5
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: ST_TO_ADDR
// exit ;
30812: GO 31226
// end ; _chassis := AvailableChassisList ( factory ) ;
30814: LD_ADDR_VAR 0 9
30818: PUSH
30819: LD_VAR 0 1
30823: PPUSH
30824: CALL_OW 475
30828: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30829: LD_ADDR_VAR 0 11
30833: PUSH
30834: LD_VAR 0 1
30838: PPUSH
30839: CALL_OW 476
30843: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30844: LD_ADDR_VAR 0 12
30848: PUSH
30849: LD_VAR 0 1
30853: PPUSH
30854: CALL_OW 477
30858: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30859: LD_ADDR_VAR 0 10
30863: PUSH
30864: LD_VAR 0 1
30868: PPUSH
30869: CALL_OW 478
30873: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30874: LD_VAR 0 9
30878: NOT
30879: PUSH
30880: LD_VAR 0 11
30884: NOT
30885: OR
30886: PUSH
30887: LD_VAR 0 12
30891: NOT
30892: OR
30893: PUSH
30894: LD_VAR 0 10
30898: NOT
30899: OR
30900: IFFALSE 30935
// begin result := [ chassis , engine , control , weapon ] ;
30902: LD_ADDR_VAR 0 6
30906: PUSH
30907: LD_VAR 0 2
30911: PUSH
30912: LD_VAR 0 3
30916: PUSH
30917: LD_VAR 0 4
30921: PUSH
30922: LD_VAR 0 5
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: ST_TO_ADDR
// exit ;
30933: GO 31226
// end ; if not chassis in _chassis then
30935: LD_VAR 0 2
30939: PUSH
30940: LD_VAR 0 9
30944: IN
30945: NOT
30946: IFFALSE 30972
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30948: LD_ADDR_VAR 0 2
30952: PUSH
30953: LD_VAR 0 9
30957: PUSH
30958: LD_INT 1
30960: PPUSH
30961: LD_VAR 0 9
30965: PPUSH
30966: CALL_OW 12
30970: ARRAY
30971: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30972: LD_VAR 0 2
30976: PPUSH
30977: LD_VAR 0 3
30981: PPUSH
30982: CALL 31231 0 2
30986: NOT
30987: IFFALSE 31046
// repeat engine := _engine [ 1 ] ;
30989: LD_ADDR_VAR 0 3
30993: PUSH
30994: LD_VAR 0 11
30998: PUSH
30999: LD_INT 1
31001: ARRAY
31002: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31003: LD_ADDR_VAR 0 11
31007: PUSH
31008: LD_VAR 0 11
31012: PPUSH
31013: LD_INT 1
31015: PPUSH
31016: CALL_OW 3
31020: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31021: LD_VAR 0 2
31025: PPUSH
31026: LD_VAR 0 3
31030: PPUSH
31031: CALL 31231 0 2
31035: PUSH
31036: LD_VAR 0 11
31040: PUSH
31041: EMPTY
31042: EQUAL
31043: OR
31044: IFFALSE 30989
// if not control in _control then
31046: LD_VAR 0 4
31050: PUSH
31051: LD_VAR 0 12
31055: IN
31056: NOT
31057: IFFALSE 31083
// control := _control [ rand ( 1 , _control ) ] ;
31059: LD_ADDR_VAR 0 4
31063: PUSH
31064: LD_VAR 0 12
31068: PUSH
31069: LD_INT 1
31071: PPUSH
31072: LD_VAR 0 12
31076: PPUSH
31077: CALL_OW 12
31081: ARRAY
31082: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31083: LD_VAR 0 2
31087: PPUSH
31088: LD_VAR 0 5
31092: PPUSH
31093: CALL 31451 0 2
31097: NOT
31098: IFFALSE 31157
// repeat weapon := _weapon [ 1 ] ;
31100: LD_ADDR_VAR 0 5
31104: PUSH
31105: LD_VAR 0 10
31109: PUSH
31110: LD_INT 1
31112: ARRAY
31113: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31114: LD_ADDR_VAR 0 10
31118: PUSH
31119: LD_VAR 0 10
31123: PPUSH
31124: LD_INT 1
31126: PPUSH
31127: CALL_OW 3
31131: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31132: LD_VAR 0 2
31136: PPUSH
31137: LD_VAR 0 5
31141: PPUSH
31142: CALL 31451 0 2
31146: PUSH
31147: LD_VAR 0 10
31151: PUSH
31152: EMPTY
31153: EQUAL
31154: OR
31155: IFFALSE 31100
// result := [ ] ;
31157: LD_ADDR_VAR 0 6
31161: PUSH
31162: EMPTY
31163: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31164: LD_VAR 0 1
31168: PPUSH
31169: LD_VAR 0 2
31173: PPUSH
31174: LD_VAR 0 3
31178: PPUSH
31179: LD_VAR 0 4
31183: PPUSH
31184: LD_VAR 0 5
31188: PPUSH
31189: CALL_OW 448
31193: IFFALSE 31226
// result := [ chassis , engine , control , weapon ] ;
31195: LD_ADDR_VAR 0 6
31199: PUSH
31200: LD_VAR 0 2
31204: PUSH
31205: LD_VAR 0 3
31209: PUSH
31210: LD_VAR 0 4
31214: PUSH
31215: LD_VAR 0 5
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: ST_TO_ADDR
// end ;
31226: LD_VAR 0 6
31230: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31231: LD_INT 0
31233: PPUSH
// if not chassis or not engine then
31234: LD_VAR 0 1
31238: NOT
31239: PUSH
31240: LD_VAR 0 2
31244: NOT
31245: OR
31246: IFFALSE 31250
// exit ;
31248: GO 31446
// case engine of engine_solar :
31250: LD_VAR 0 2
31254: PUSH
31255: LD_INT 2
31257: DOUBLE
31258: EQUAL
31259: IFTRUE 31263
31261: GO 31301
31263: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31264: LD_ADDR_VAR 0 3
31268: PUSH
31269: LD_INT 11
31271: PUSH
31272: LD_INT 12
31274: PUSH
31275: LD_INT 13
31277: PUSH
31278: LD_INT 14
31280: PUSH
31281: LD_INT 1
31283: PUSH
31284: LD_INT 2
31286: PUSH
31287: LD_INT 3
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: ST_TO_ADDR
31299: GO 31430
31301: LD_INT 1
31303: DOUBLE
31304: EQUAL
31305: IFTRUE 31309
31307: GO 31371
31309: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31310: LD_ADDR_VAR 0 3
31314: PUSH
31315: LD_INT 11
31317: PUSH
31318: LD_INT 12
31320: PUSH
31321: LD_INT 13
31323: PUSH
31324: LD_INT 14
31326: PUSH
31327: LD_INT 1
31329: PUSH
31330: LD_INT 2
31332: PUSH
31333: LD_INT 3
31335: PUSH
31336: LD_INT 4
31338: PUSH
31339: LD_INT 5
31341: PUSH
31342: LD_INT 21
31344: PUSH
31345: LD_INT 23
31347: PUSH
31348: LD_INT 22
31350: PUSH
31351: LD_INT 24
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: ST_TO_ADDR
31369: GO 31430
31371: LD_INT 3
31373: DOUBLE
31374: EQUAL
31375: IFTRUE 31379
31377: GO 31429
31379: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31380: LD_ADDR_VAR 0 3
31384: PUSH
31385: LD_INT 13
31387: PUSH
31388: LD_INT 14
31390: PUSH
31391: LD_INT 2
31393: PUSH
31394: LD_INT 3
31396: PUSH
31397: LD_INT 4
31399: PUSH
31400: LD_INT 5
31402: PUSH
31403: LD_INT 21
31405: PUSH
31406: LD_INT 22
31408: PUSH
31409: LD_INT 23
31411: PUSH
31412: LD_INT 24
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: ST_TO_ADDR
31427: GO 31430
31429: POP
// result := ( chassis in result ) ;
31430: LD_ADDR_VAR 0 3
31434: PUSH
31435: LD_VAR 0 1
31439: PUSH
31440: LD_VAR 0 3
31444: IN
31445: ST_TO_ADDR
// end ;
31446: LD_VAR 0 3
31450: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31451: LD_INT 0
31453: PPUSH
// if not chassis or not weapon then
31454: LD_VAR 0 1
31458: NOT
31459: PUSH
31460: LD_VAR 0 2
31464: NOT
31465: OR
31466: IFFALSE 31470
// exit ;
31468: GO 32496
// case weapon of us_machine_gun :
31470: LD_VAR 0 2
31474: PUSH
31475: LD_INT 2
31477: DOUBLE
31478: EQUAL
31479: IFTRUE 31483
31481: GO 31513
31483: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31484: LD_ADDR_VAR 0 3
31488: PUSH
31489: LD_INT 1
31491: PUSH
31492: LD_INT 2
31494: PUSH
31495: LD_INT 3
31497: PUSH
31498: LD_INT 4
31500: PUSH
31501: LD_INT 5
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: ST_TO_ADDR
31511: GO 32480
31513: LD_INT 3
31515: DOUBLE
31516: EQUAL
31517: IFTRUE 31521
31519: GO 31551
31521: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31522: LD_ADDR_VAR 0 3
31526: PUSH
31527: LD_INT 1
31529: PUSH
31530: LD_INT 2
31532: PUSH
31533: LD_INT 3
31535: PUSH
31536: LD_INT 4
31538: PUSH
31539: LD_INT 5
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: ST_TO_ADDR
31549: GO 32480
31551: LD_INT 11
31553: DOUBLE
31554: EQUAL
31555: IFTRUE 31559
31557: GO 31589
31559: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31560: LD_ADDR_VAR 0 3
31564: PUSH
31565: LD_INT 1
31567: PUSH
31568: LD_INT 2
31570: PUSH
31571: LD_INT 3
31573: PUSH
31574: LD_INT 4
31576: PUSH
31577: LD_INT 5
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: ST_TO_ADDR
31587: GO 32480
31589: LD_INT 4
31591: DOUBLE
31592: EQUAL
31593: IFTRUE 31597
31595: GO 31623
31597: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31598: LD_ADDR_VAR 0 3
31602: PUSH
31603: LD_INT 2
31605: PUSH
31606: LD_INT 3
31608: PUSH
31609: LD_INT 4
31611: PUSH
31612: LD_INT 5
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: ST_TO_ADDR
31621: GO 32480
31623: LD_INT 5
31625: DOUBLE
31626: EQUAL
31627: IFTRUE 31631
31629: GO 31657
31631: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31632: LD_ADDR_VAR 0 3
31636: PUSH
31637: LD_INT 2
31639: PUSH
31640: LD_INT 3
31642: PUSH
31643: LD_INT 4
31645: PUSH
31646: LD_INT 5
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: ST_TO_ADDR
31655: GO 32480
31657: LD_INT 9
31659: DOUBLE
31660: EQUAL
31661: IFTRUE 31665
31663: GO 31691
31665: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31666: LD_ADDR_VAR 0 3
31670: PUSH
31671: LD_INT 2
31673: PUSH
31674: LD_INT 3
31676: PUSH
31677: LD_INT 4
31679: PUSH
31680: LD_INT 5
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: ST_TO_ADDR
31689: GO 32480
31691: LD_INT 7
31693: DOUBLE
31694: EQUAL
31695: IFTRUE 31699
31697: GO 31725
31699: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31700: LD_ADDR_VAR 0 3
31704: PUSH
31705: LD_INT 2
31707: PUSH
31708: LD_INT 3
31710: PUSH
31711: LD_INT 4
31713: PUSH
31714: LD_INT 5
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: ST_TO_ADDR
31723: GO 32480
31725: LD_INT 12
31727: DOUBLE
31728: EQUAL
31729: IFTRUE 31733
31731: GO 31759
31733: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31734: LD_ADDR_VAR 0 3
31738: PUSH
31739: LD_INT 2
31741: PUSH
31742: LD_INT 3
31744: PUSH
31745: LD_INT 4
31747: PUSH
31748: LD_INT 5
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: ST_TO_ADDR
31757: GO 32480
31759: LD_INT 13
31761: DOUBLE
31762: EQUAL
31763: IFTRUE 31767
31765: GO 31793
31767: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31768: LD_ADDR_VAR 0 3
31772: PUSH
31773: LD_INT 2
31775: PUSH
31776: LD_INT 3
31778: PUSH
31779: LD_INT 4
31781: PUSH
31782: LD_INT 5
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: ST_TO_ADDR
31791: GO 32480
31793: LD_INT 14
31795: DOUBLE
31796: EQUAL
31797: IFTRUE 31801
31799: GO 31819
31801: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31802: LD_ADDR_VAR 0 3
31806: PUSH
31807: LD_INT 4
31809: PUSH
31810: LD_INT 5
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: ST_TO_ADDR
31817: GO 32480
31819: LD_INT 6
31821: DOUBLE
31822: EQUAL
31823: IFTRUE 31827
31825: GO 31845
31827: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31828: LD_ADDR_VAR 0 3
31832: PUSH
31833: LD_INT 4
31835: PUSH
31836: LD_INT 5
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: ST_TO_ADDR
31843: GO 32480
31845: LD_INT 10
31847: DOUBLE
31848: EQUAL
31849: IFTRUE 31853
31851: GO 31871
31853: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31854: LD_ADDR_VAR 0 3
31858: PUSH
31859: LD_INT 4
31861: PUSH
31862: LD_INT 5
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: ST_TO_ADDR
31869: GO 32480
31871: LD_INT 22
31873: DOUBLE
31874: EQUAL
31875: IFTRUE 31879
31877: GO 31905
31879: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31880: LD_ADDR_VAR 0 3
31884: PUSH
31885: LD_INT 11
31887: PUSH
31888: LD_INT 12
31890: PUSH
31891: LD_INT 13
31893: PUSH
31894: LD_INT 14
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: ST_TO_ADDR
31903: GO 32480
31905: LD_INT 23
31907: DOUBLE
31908: EQUAL
31909: IFTRUE 31913
31911: GO 31939
31913: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31914: LD_ADDR_VAR 0 3
31918: PUSH
31919: LD_INT 11
31921: PUSH
31922: LD_INT 12
31924: PUSH
31925: LD_INT 13
31927: PUSH
31928: LD_INT 14
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: ST_TO_ADDR
31937: GO 32480
31939: LD_INT 24
31941: DOUBLE
31942: EQUAL
31943: IFTRUE 31947
31945: GO 31973
31947: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31948: LD_ADDR_VAR 0 3
31952: PUSH
31953: LD_INT 11
31955: PUSH
31956: LD_INT 12
31958: PUSH
31959: LD_INT 13
31961: PUSH
31962: LD_INT 14
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: ST_TO_ADDR
31971: GO 32480
31973: LD_INT 30
31975: DOUBLE
31976: EQUAL
31977: IFTRUE 31981
31979: GO 32007
31981: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31982: LD_ADDR_VAR 0 3
31986: PUSH
31987: LD_INT 11
31989: PUSH
31990: LD_INT 12
31992: PUSH
31993: LD_INT 13
31995: PUSH
31996: LD_INT 14
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: ST_TO_ADDR
32005: GO 32480
32007: LD_INT 25
32009: DOUBLE
32010: EQUAL
32011: IFTRUE 32015
32013: GO 32033
32015: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32016: LD_ADDR_VAR 0 3
32020: PUSH
32021: LD_INT 13
32023: PUSH
32024: LD_INT 14
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: ST_TO_ADDR
32031: GO 32480
32033: LD_INT 27
32035: DOUBLE
32036: EQUAL
32037: IFTRUE 32041
32039: GO 32059
32041: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32042: LD_ADDR_VAR 0 3
32046: PUSH
32047: LD_INT 13
32049: PUSH
32050: LD_INT 14
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: ST_TO_ADDR
32057: GO 32480
32059: LD_INT 28
32061: DOUBLE
32062: EQUAL
32063: IFTRUE 32067
32065: GO 32085
32067: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32068: LD_ADDR_VAR 0 3
32072: PUSH
32073: LD_INT 13
32075: PUSH
32076: LD_INT 14
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: ST_TO_ADDR
32083: GO 32480
32085: LD_INT 29
32087: DOUBLE
32088: EQUAL
32089: IFTRUE 32093
32091: GO 32111
32093: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32094: LD_ADDR_VAR 0 3
32098: PUSH
32099: LD_INT 13
32101: PUSH
32102: LD_INT 14
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: ST_TO_ADDR
32109: GO 32480
32111: LD_INT 31
32113: DOUBLE
32114: EQUAL
32115: IFTRUE 32119
32117: GO 32137
32119: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32120: LD_ADDR_VAR 0 3
32124: PUSH
32125: LD_INT 13
32127: PUSH
32128: LD_INT 14
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: ST_TO_ADDR
32135: GO 32480
32137: LD_INT 26
32139: DOUBLE
32140: EQUAL
32141: IFTRUE 32145
32143: GO 32163
32145: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32146: LD_ADDR_VAR 0 3
32150: PUSH
32151: LD_INT 13
32153: PUSH
32154: LD_INT 14
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: ST_TO_ADDR
32161: GO 32480
32163: LD_INT 42
32165: DOUBLE
32166: EQUAL
32167: IFTRUE 32171
32169: GO 32197
32171: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32172: LD_ADDR_VAR 0 3
32176: PUSH
32177: LD_INT 21
32179: PUSH
32180: LD_INT 22
32182: PUSH
32183: LD_INT 23
32185: PUSH
32186: LD_INT 24
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: ST_TO_ADDR
32195: GO 32480
32197: LD_INT 43
32199: DOUBLE
32200: EQUAL
32201: IFTRUE 32205
32203: GO 32231
32205: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32206: LD_ADDR_VAR 0 3
32210: PUSH
32211: LD_INT 21
32213: PUSH
32214: LD_INT 22
32216: PUSH
32217: LD_INT 23
32219: PUSH
32220: LD_INT 24
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: ST_TO_ADDR
32229: GO 32480
32231: LD_INT 44
32233: DOUBLE
32234: EQUAL
32235: IFTRUE 32239
32237: GO 32265
32239: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32240: LD_ADDR_VAR 0 3
32244: PUSH
32245: LD_INT 21
32247: PUSH
32248: LD_INT 22
32250: PUSH
32251: LD_INT 23
32253: PUSH
32254: LD_INT 24
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: ST_TO_ADDR
32263: GO 32480
32265: LD_INT 45
32267: DOUBLE
32268: EQUAL
32269: IFTRUE 32273
32271: GO 32299
32273: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32274: LD_ADDR_VAR 0 3
32278: PUSH
32279: LD_INT 21
32281: PUSH
32282: LD_INT 22
32284: PUSH
32285: LD_INT 23
32287: PUSH
32288: LD_INT 24
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: ST_TO_ADDR
32297: GO 32480
32299: LD_INT 49
32301: DOUBLE
32302: EQUAL
32303: IFTRUE 32307
32305: GO 32333
32307: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32308: LD_ADDR_VAR 0 3
32312: PUSH
32313: LD_INT 21
32315: PUSH
32316: LD_INT 22
32318: PUSH
32319: LD_INT 23
32321: PUSH
32322: LD_INT 24
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: ST_TO_ADDR
32331: GO 32480
32333: LD_INT 51
32335: DOUBLE
32336: EQUAL
32337: IFTRUE 32341
32339: GO 32367
32341: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32342: LD_ADDR_VAR 0 3
32346: PUSH
32347: LD_INT 21
32349: PUSH
32350: LD_INT 22
32352: PUSH
32353: LD_INT 23
32355: PUSH
32356: LD_INT 24
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: ST_TO_ADDR
32365: GO 32480
32367: LD_INT 52
32369: DOUBLE
32370: EQUAL
32371: IFTRUE 32375
32373: GO 32401
32375: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32376: LD_ADDR_VAR 0 3
32380: PUSH
32381: LD_INT 21
32383: PUSH
32384: LD_INT 22
32386: PUSH
32387: LD_INT 23
32389: PUSH
32390: LD_INT 24
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: ST_TO_ADDR
32399: GO 32480
32401: LD_INT 53
32403: DOUBLE
32404: EQUAL
32405: IFTRUE 32409
32407: GO 32427
32409: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32410: LD_ADDR_VAR 0 3
32414: PUSH
32415: LD_INT 23
32417: PUSH
32418: LD_INT 24
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: ST_TO_ADDR
32425: GO 32480
32427: LD_INT 46
32429: DOUBLE
32430: EQUAL
32431: IFTRUE 32435
32433: GO 32453
32435: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32436: LD_ADDR_VAR 0 3
32440: PUSH
32441: LD_INT 23
32443: PUSH
32444: LD_INT 24
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: ST_TO_ADDR
32451: GO 32480
32453: LD_INT 47
32455: DOUBLE
32456: EQUAL
32457: IFTRUE 32461
32459: GO 32479
32461: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32462: LD_ADDR_VAR 0 3
32466: PUSH
32467: LD_INT 23
32469: PUSH
32470: LD_INT 24
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: ST_TO_ADDR
32477: GO 32480
32479: POP
// result := ( chassis in result ) ;
32480: LD_ADDR_VAR 0 3
32484: PUSH
32485: LD_VAR 0 1
32489: PUSH
32490: LD_VAR 0 3
32494: IN
32495: ST_TO_ADDR
// end ;
32496: LD_VAR 0 3
32500: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32501: LD_INT 0
32503: PPUSH
32504: PPUSH
32505: PPUSH
32506: PPUSH
32507: PPUSH
32508: PPUSH
32509: PPUSH
// result := array ;
32510: LD_ADDR_VAR 0 5
32514: PUSH
32515: LD_VAR 0 1
32519: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32520: LD_VAR 0 1
32524: NOT
32525: PUSH
32526: LD_VAR 0 2
32530: NOT
32531: OR
32532: PUSH
32533: LD_VAR 0 3
32537: NOT
32538: OR
32539: PUSH
32540: LD_VAR 0 2
32544: PUSH
32545: LD_VAR 0 1
32549: GREATER
32550: OR
32551: PUSH
32552: LD_VAR 0 3
32556: PUSH
32557: LD_VAR 0 1
32561: GREATER
32562: OR
32563: IFFALSE 32567
// exit ;
32565: GO 32863
// if direction then
32567: LD_VAR 0 4
32571: IFFALSE 32635
// begin d := 1 ;
32573: LD_ADDR_VAR 0 9
32577: PUSH
32578: LD_INT 1
32580: ST_TO_ADDR
// if i_from > i_to then
32581: LD_VAR 0 2
32585: PUSH
32586: LD_VAR 0 3
32590: GREATER
32591: IFFALSE 32617
// length := ( array - i_from ) + i_to else
32593: LD_ADDR_VAR 0 11
32597: PUSH
32598: LD_VAR 0 1
32602: PUSH
32603: LD_VAR 0 2
32607: MINUS
32608: PUSH
32609: LD_VAR 0 3
32613: PLUS
32614: ST_TO_ADDR
32615: GO 32633
// length := i_to - i_from ;
32617: LD_ADDR_VAR 0 11
32621: PUSH
32622: LD_VAR 0 3
32626: PUSH
32627: LD_VAR 0 2
32631: MINUS
32632: ST_TO_ADDR
// end else
32633: GO 32696
// begin d := - 1 ;
32635: LD_ADDR_VAR 0 9
32639: PUSH
32640: LD_INT 1
32642: NEG
32643: ST_TO_ADDR
// if i_from > i_to then
32644: LD_VAR 0 2
32648: PUSH
32649: LD_VAR 0 3
32653: GREATER
32654: IFFALSE 32674
// length := i_from - i_to else
32656: LD_ADDR_VAR 0 11
32660: PUSH
32661: LD_VAR 0 2
32665: PUSH
32666: LD_VAR 0 3
32670: MINUS
32671: ST_TO_ADDR
32672: GO 32696
// length := ( array - i_to ) + i_from ;
32674: LD_ADDR_VAR 0 11
32678: PUSH
32679: LD_VAR 0 1
32683: PUSH
32684: LD_VAR 0 3
32688: MINUS
32689: PUSH
32690: LD_VAR 0 2
32694: PLUS
32695: ST_TO_ADDR
// end ; if not length then
32696: LD_VAR 0 11
32700: NOT
32701: IFFALSE 32705
// exit ;
32703: GO 32863
// tmp := array ;
32705: LD_ADDR_VAR 0 10
32709: PUSH
32710: LD_VAR 0 1
32714: ST_TO_ADDR
// for i = 1 to length do
32715: LD_ADDR_VAR 0 6
32719: PUSH
32720: DOUBLE
32721: LD_INT 1
32723: DEC
32724: ST_TO_ADDR
32725: LD_VAR 0 11
32729: PUSH
32730: FOR_TO
32731: IFFALSE 32851
// begin for j = 1 to array do
32733: LD_ADDR_VAR 0 7
32737: PUSH
32738: DOUBLE
32739: LD_INT 1
32741: DEC
32742: ST_TO_ADDR
32743: LD_VAR 0 1
32747: PUSH
32748: FOR_TO
32749: IFFALSE 32837
// begin k := j + d ;
32751: LD_ADDR_VAR 0 8
32755: PUSH
32756: LD_VAR 0 7
32760: PUSH
32761: LD_VAR 0 9
32765: PLUS
32766: ST_TO_ADDR
// if k > array then
32767: LD_VAR 0 8
32771: PUSH
32772: LD_VAR 0 1
32776: GREATER
32777: IFFALSE 32787
// k := 1 ;
32779: LD_ADDR_VAR 0 8
32783: PUSH
32784: LD_INT 1
32786: ST_TO_ADDR
// if not k then
32787: LD_VAR 0 8
32791: NOT
32792: IFFALSE 32804
// k := array ;
32794: LD_ADDR_VAR 0 8
32798: PUSH
32799: LD_VAR 0 1
32803: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32804: LD_ADDR_VAR 0 10
32808: PUSH
32809: LD_VAR 0 10
32813: PPUSH
32814: LD_VAR 0 8
32818: PPUSH
32819: LD_VAR 0 1
32823: PUSH
32824: LD_VAR 0 7
32828: ARRAY
32829: PPUSH
32830: CALL_OW 1
32834: ST_TO_ADDR
// end ;
32835: GO 32748
32837: POP
32838: POP
// array := tmp ;
32839: LD_ADDR_VAR 0 1
32843: PUSH
32844: LD_VAR 0 10
32848: ST_TO_ADDR
// end ;
32849: GO 32730
32851: POP
32852: POP
// result := array ;
32853: LD_ADDR_VAR 0 5
32857: PUSH
32858: LD_VAR 0 1
32862: ST_TO_ADDR
// end ;
32863: LD_VAR 0 5
32867: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32868: LD_INT 0
32870: PPUSH
32871: PPUSH
// result := 0 ;
32872: LD_ADDR_VAR 0 3
32876: PUSH
32877: LD_INT 0
32879: ST_TO_ADDR
// if not array or not value in array then
32880: LD_VAR 0 1
32884: NOT
32885: PUSH
32886: LD_VAR 0 2
32890: PUSH
32891: LD_VAR 0 1
32895: IN
32896: NOT
32897: OR
32898: IFFALSE 32902
// exit ;
32900: GO 32956
// for i = 1 to array do
32902: LD_ADDR_VAR 0 4
32906: PUSH
32907: DOUBLE
32908: LD_INT 1
32910: DEC
32911: ST_TO_ADDR
32912: LD_VAR 0 1
32916: PUSH
32917: FOR_TO
32918: IFFALSE 32954
// if value = array [ i ] then
32920: LD_VAR 0 2
32924: PUSH
32925: LD_VAR 0 1
32929: PUSH
32930: LD_VAR 0 4
32934: ARRAY
32935: EQUAL
32936: IFFALSE 32952
// begin result := i ;
32938: LD_ADDR_VAR 0 3
32942: PUSH
32943: LD_VAR 0 4
32947: ST_TO_ADDR
// exit ;
32948: POP
32949: POP
32950: GO 32956
// end ;
32952: GO 32917
32954: POP
32955: POP
// end ;
32956: LD_VAR 0 3
32960: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32961: LD_INT 0
32963: PPUSH
// vc_chassis := chassis ;
32964: LD_ADDR_OWVAR 37
32968: PUSH
32969: LD_VAR 0 1
32973: ST_TO_ADDR
// vc_engine := engine ;
32974: LD_ADDR_OWVAR 39
32978: PUSH
32979: LD_VAR 0 2
32983: ST_TO_ADDR
// vc_control := control ;
32984: LD_ADDR_OWVAR 38
32988: PUSH
32989: LD_VAR 0 3
32993: ST_TO_ADDR
// vc_weapon := weapon ;
32994: LD_ADDR_OWVAR 40
32998: PUSH
32999: LD_VAR 0 4
33003: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33004: LD_ADDR_OWVAR 41
33008: PUSH
33009: LD_VAR 0 5
33013: ST_TO_ADDR
// end ;
33014: LD_VAR 0 6
33018: RET
// export function WantPlant ( unit ) ; var task ; begin
33019: LD_INT 0
33021: PPUSH
33022: PPUSH
// result := false ;
33023: LD_ADDR_VAR 0 2
33027: PUSH
33028: LD_INT 0
33030: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33031: LD_ADDR_VAR 0 3
33035: PUSH
33036: LD_VAR 0 1
33040: PPUSH
33041: CALL_OW 437
33045: ST_TO_ADDR
// if task then
33046: LD_VAR 0 3
33050: IFFALSE 33078
// if task [ 1 ] [ 1 ] = p then
33052: LD_VAR 0 3
33056: PUSH
33057: LD_INT 1
33059: ARRAY
33060: PUSH
33061: LD_INT 1
33063: ARRAY
33064: PUSH
33065: LD_STRING p
33067: EQUAL
33068: IFFALSE 33078
// result := true ;
33070: LD_ADDR_VAR 0 2
33074: PUSH
33075: LD_INT 1
33077: ST_TO_ADDR
// end ;
33078: LD_VAR 0 2
33082: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33083: LD_INT 0
33085: PPUSH
33086: PPUSH
33087: PPUSH
33088: PPUSH
// if pos < 1 then
33089: LD_VAR 0 2
33093: PUSH
33094: LD_INT 1
33096: LESS
33097: IFFALSE 33101
// exit ;
33099: GO 33404
// if pos = 1 then
33101: LD_VAR 0 2
33105: PUSH
33106: LD_INT 1
33108: EQUAL
33109: IFFALSE 33142
// result := Replace ( arr , pos [ 1 ] , value ) else
33111: LD_ADDR_VAR 0 4
33115: PUSH
33116: LD_VAR 0 1
33120: PPUSH
33121: LD_VAR 0 2
33125: PUSH
33126: LD_INT 1
33128: ARRAY
33129: PPUSH
33130: LD_VAR 0 3
33134: PPUSH
33135: CALL_OW 1
33139: ST_TO_ADDR
33140: GO 33404
// begin tmp := arr ;
33142: LD_ADDR_VAR 0 6
33146: PUSH
33147: LD_VAR 0 1
33151: ST_TO_ADDR
// s_arr := [ tmp ] ;
33152: LD_ADDR_VAR 0 7
33156: PUSH
33157: LD_VAR 0 6
33161: PUSH
33162: EMPTY
33163: LIST
33164: ST_TO_ADDR
// for i = 1 to pos - 1 do
33165: LD_ADDR_VAR 0 5
33169: PUSH
33170: DOUBLE
33171: LD_INT 1
33173: DEC
33174: ST_TO_ADDR
33175: LD_VAR 0 2
33179: PUSH
33180: LD_INT 1
33182: MINUS
33183: PUSH
33184: FOR_TO
33185: IFFALSE 33230
// begin tmp := tmp [ pos [ i ] ] ;
33187: LD_ADDR_VAR 0 6
33191: PUSH
33192: LD_VAR 0 6
33196: PUSH
33197: LD_VAR 0 2
33201: PUSH
33202: LD_VAR 0 5
33206: ARRAY
33207: ARRAY
33208: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33209: LD_ADDR_VAR 0 7
33213: PUSH
33214: LD_VAR 0 7
33218: PUSH
33219: LD_VAR 0 6
33223: PUSH
33224: EMPTY
33225: LIST
33226: ADD
33227: ST_TO_ADDR
// end ;
33228: GO 33184
33230: POP
33231: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33232: LD_ADDR_VAR 0 6
33236: PUSH
33237: LD_VAR 0 6
33241: PPUSH
33242: LD_VAR 0 2
33246: PUSH
33247: LD_VAR 0 2
33251: ARRAY
33252: PPUSH
33253: LD_VAR 0 3
33257: PPUSH
33258: CALL_OW 1
33262: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33263: LD_ADDR_VAR 0 7
33267: PUSH
33268: LD_VAR 0 7
33272: PPUSH
33273: LD_VAR 0 7
33277: PPUSH
33278: LD_VAR 0 6
33282: PPUSH
33283: CALL_OW 1
33287: ST_TO_ADDR
// for i = s_arr downto 2 do
33288: LD_ADDR_VAR 0 5
33292: PUSH
33293: DOUBLE
33294: LD_VAR 0 7
33298: INC
33299: ST_TO_ADDR
33300: LD_INT 2
33302: PUSH
33303: FOR_DOWNTO
33304: IFFALSE 33388
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33306: LD_ADDR_VAR 0 6
33310: PUSH
33311: LD_VAR 0 7
33315: PUSH
33316: LD_VAR 0 5
33320: PUSH
33321: LD_INT 1
33323: MINUS
33324: ARRAY
33325: PPUSH
33326: LD_VAR 0 2
33330: PUSH
33331: LD_VAR 0 5
33335: PUSH
33336: LD_INT 1
33338: MINUS
33339: ARRAY
33340: PPUSH
33341: LD_VAR 0 7
33345: PUSH
33346: LD_VAR 0 5
33350: ARRAY
33351: PPUSH
33352: CALL_OW 1
33356: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33357: LD_ADDR_VAR 0 7
33361: PUSH
33362: LD_VAR 0 7
33366: PPUSH
33367: LD_VAR 0 5
33371: PUSH
33372: LD_INT 1
33374: MINUS
33375: PPUSH
33376: LD_VAR 0 6
33380: PPUSH
33381: CALL_OW 1
33385: ST_TO_ADDR
// end ;
33386: GO 33303
33388: POP
33389: POP
// result := s_arr [ 1 ] ;
33390: LD_ADDR_VAR 0 4
33394: PUSH
33395: LD_VAR 0 7
33399: PUSH
33400: LD_INT 1
33402: ARRAY
33403: ST_TO_ADDR
// end ; end ;
33404: LD_VAR 0 4
33408: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33409: LD_INT 0
33411: PPUSH
33412: PPUSH
// if not list then
33413: LD_VAR 0 1
33417: NOT
33418: IFFALSE 33422
// exit ;
33420: GO 33513
// i := list [ pos1 ] ;
33422: LD_ADDR_VAR 0 5
33426: PUSH
33427: LD_VAR 0 1
33431: PUSH
33432: LD_VAR 0 2
33436: ARRAY
33437: ST_TO_ADDR
// if not i then
33438: LD_VAR 0 5
33442: NOT
33443: IFFALSE 33447
// exit ;
33445: GO 33513
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33447: LD_ADDR_VAR 0 1
33451: PUSH
33452: LD_VAR 0 1
33456: PPUSH
33457: LD_VAR 0 2
33461: PPUSH
33462: LD_VAR 0 1
33466: PUSH
33467: LD_VAR 0 3
33471: ARRAY
33472: PPUSH
33473: CALL_OW 1
33477: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33478: LD_ADDR_VAR 0 1
33482: PUSH
33483: LD_VAR 0 1
33487: PPUSH
33488: LD_VAR 0 3
33492: PPUSH
33493: LD_VAR 0 5
33497: PPUSH
33498: CALL_OW 1
33502: ST_TO_ADDR
// result := list ;
33503: LD_ADDR_VAR 0 4
33507: PUSH
33508: LD_VAR 0 1
33512: ST_TO_ADDR
// end ;
33513: LD_VAR 0 4
33517: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33518: LD_INT 0
33520: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33521: LD_ADDR_VAR 0 5
33525: PUSH
33526: LD_VAR 0 1
33530: PPUSH
33531: CALL_OW 250
33535: PPUSH
33536: LD_VAR 0 1
33540: PPUSH
33541: CALL_OW 251
33545: PPUSH
33546: LD_VAR 0 2
33550: PPUSH
33551: LD_VAR 0 3
33555: PPUSH
33556: LD_VAR 0 4
33560: PPUSH
33561: CALL 33571 0 5
33565: ST_TO_ADDR
// end ;
33566: LD_VAR 0 5
33570: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33571: LD_INT 0
33573: PPUSH
33574: PPUSH
33575: PPUSH
33576: PPUSH
// if not list then
33577: LD_VAR 0 3
33581: NOT
33582: IFFALSE 33586
// exit ;
33584: GO 33974
// result := [ ] ;
33586: LD_ADDR_VAR 0 6
33590: PUSH
33591: EMPTY
33592: ST_TO_ADDR
// for i in list do
33593: LD_ADDR_VAR 0 7
33597: PUSH
33598: LD_VAR 0 3
33602: PUSH
33603: FOR_IN
33604: IFFALSE 33806
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33606: LD_ADDR_VAR 0 9
33610: PUSH
33611: LD_VAR 0 7
33615: PPUSH
33616: LD_VAR 0 1
33620: PPUSH
33621: LD_VAR 0 2
33625: PPUSH
33626: CALL_OW 297
33630: ST_TO_ADDR
// if not result then
33631: LD_VAR 0 6
33635: NOT
33636: IFFALSE 33662
// result := [ [ i , tmp ] ] else
33638: LD_ADDR_VAR 0 6
33642: PUSH
33643: LD_VAR 0 7
33647: PUSH
33648: LD_VAR 0 9
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: EMPTY
33658: LIST
33659: ST_TO_ADDR
33660: GO 33804
// begin if result [ result ] [ 2 ] < tmp then
33662: LD_VAR 0 6
33666: PUSH
33667: LD_VAR 0 6
33671: ARRAY
33672: PUSH
33673: LD_INT 2
33675: ARRAY
33676: PUSH
33677: LD_VAR 0 9
33681: LESS
33682: IFFALSE 33724
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33684: LD_ADDR_VAR 0 6
33688: PUSH
33689: LD_VAR 0 6
33693: PPUSH
33694: LD_VAR 0 6
33698: PUSH
33699: LD_INT 1
33701: PLUS
33702: PPUSH
33703: LD_VAR 0 7
33707: PUSH
33708: LD_VAR 0 9
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PPUSH
33717: CALL_OW 2
33721: ST_TO_ADDR
33722: GO 33804
// for j = 1 to result do
33724: LD_ADDR_VAR 0 8
33728: PUSH
33729: DOUBLE
33730: LD_INT 1
33732: DEC
33733: ST_TO_ADDR
33734: LD_VAR 0 6
33738: PUSH
33739: FOR_TO
33740: IFFALSE 33802
// begin if tmp < result [ j ] [ 2 ] then
33742: LD_VAR 0 9
33746: PUSH
33747: LD_VAR 0 6
33751: PUSH
33752: LD_VAR 0 8
33756: ARRAY
33757: PUSH
33758: LD_INT 2
33760: ARRAY
33761: LESS
33762: IFFALSE 33800
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33764: LD_ADDR_VAR 0 6
33768: PUSH
33769: LD_VAR 0 6
33773: PPUSH
33774: LD_VAR 0 8
33778: PPUSH
33779: LD_VAR 0 7
33783: PUSH
33784: LD_VAR 0 9
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PPUSH
33793: CALL_OW 2
33797: ST_TO_ADDR
// break ;
33798: GO 33802
// end ; end ;
33800: GO 33739
33802: POP
33803: POP
// end ; end ;
33804: GO 33603
33806: POP
33807: POP
// if result and not asc then
33808: LD_VAR 0 6
33812: PUSH
33813: LD_VAR 0 4
33817: NOT
33818: AND
33819: IFFALSE 33894
// begin tmp := result ;
33821: LD_ADDR_VAR 0 9
33825: PUSH
33826: LD_VAR 0 6
33830: ST_TO_ADDR
// for i = tmp downto 1 do
33831: LD_ADDR_VAR 0 7
33835: PUSH
33836: DOUBLE
33837: LD_VAR 0 9
33841: INC
33842: ST_TO_ADDR
33843: LD_INT 1
33845: PUSH
33846: FOR_DOWNTO
33847: IFFALSE 33892
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33849: LD_ADDR_VAR 0 6
33853: PUSH
33854: LD_VAR 0 6
33858: PPUSH
33859: LD_VAR 0 9
33863: PUSH
33864: LD_VAR 0 7
33868: MINUS
33869: PUSH
33870: LD_INT 1
33872: PLUS
33873: PPUSH
33874: LD_VAR 0 9
33878: PUSH
33879: LD_VAR 0 7
33883: ARRAY
33884: PPUSH
33885: CALL_OW 1
33889: ST_TO_ADDR
33890: GO 33846
33892: POP
33893: POP
// end ; tmp := [ ] ;
33894: LD_ADDR_VAR 0 9
33898: PUSH
33899: EMPTY
33900: ST_TO_ADDR
// if mode then
33901: LD_VAR 0 5
33905: IFFALSE 33974
// begin for i = 1 to result do
33907: LD_ADDR_VAR 0 7
33911: PUSH
33912: DOUBLE
33913: LD_INT 1
33915: DEC
33916: ST_TO_ADDR
33917: LD_VAR 0 6
33921: PUSH
33922: FOR_TO
33923: IFFALSE 33962
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33925: LD_ADDR_VAR 0 9
33929: PUSH
33930: LD_VAR 0 9
33934: PPUSH
33935: LD_VAR 0 7
33939: PPUSH
33940: LD_VAR 0 6
33944: PUSH
33945: LD_VAR 0 7
33949: ARRAY
33950: PUSH
33951: LD_INT 1
33953: ARRAY
33954: PPUSH
33955: CALL_OW 1
33959: ST_TO_ADDR
33960: GO 33922
33962: POP
33963: POP
// result := tmp ;
33964: LD_ADDR_VAR 0 6
33968: PUSH
33969: LD_VAR 0 9
33973: ST_TO_ADDR
// end ; end ;
33974: LD_VAR 0 6
33978: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33979: LD_INT 0
33981: PPUSH
33982: PPUSH
33983: PPUSH
33984: PPUSH
33985: PPUSH
33986: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33987: LD_ADDR_VAR 0 5
33991: PUSH
33992: LD_INT 0
33994: PUSH
33995: LD_INT 0
33997: PUSH
33998: LD_INT 0
34000: PUSH
34001: EMPTY
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: ST_TO_ADDR
// if not x or not y then
34009: LD_VAR 0 2
34013: NOT
34014: PUSH
34015: LD_VAR 0 3
34019: NOT
34020: OR
34021: IFFALSE 34025
// exit ;
34023: GO 35671
// if not range then
34025: LD_VAR 0 4
34029: NOT
34030: IFFALSE 34040
// range := 10 ;
34032: LD_ADDR_VAR 0 4
34036: PUSH
34037: LD_INT 10
34039: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34040: LD_ADDR_VAR 0 8
34044: PUSH
34045: LD_INT 81
34047: PUSH
34048: LD_VAR 0 1
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: LD_INT 92
34059: PUSH
34060: LD_VAR 0 2
34064: PUSH
34065: LD_VAR 0 3
34069: PUSH
34070: LD_VAR 0 4
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 3
34083: PUSH
34084: LD_INT 21
34086: PUSH
34087: LD_INT 3
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: LIST
34102: PPUSH
34103: CALL_OW 69
34107: ST_TO_ADDR
// if not tmp then
34108: LD_VAR 0 8
34112: NOT
34113: IFFALSE 34117
// exit ;
34115: GO 35671
// for i in tmp do
34117: LD_ADDR_VAR 0 6
34121: PUSH
34122: LD_VAR 0 8
34126: PUSH
34127: FOR_IN
34128: IFFALSE 35646
// begin points := [ 0 , 0 , 0 ] ;
34130: LD_ADDR_VAR 0 9
34134: PUSH
34135: LD_INT 0
34137: PUSH
34138: LD_INT 0
34140: PUSH
34141: LD_INT 0
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: LIST
34148: ST_TO_ADDR
// bpoints := 1 ;
34149: LD_ADDR_VAR 0 10
34153: PUSH
34154: LD_INT 1
34156: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34157: LD_VAR 0 6
34161: PPUSH
34162: CALL_OW 247
34166: PUSH
34167: LD_INT 1
34169: DOUBLE
34170: EQUAL
34171: IFTRUE 34175
34173: GO 34753
34175: POP
// begin if GetClass ( i ) = 1 then
34176: LD_VAR 0 6
34180: PPUSH
34181: CALL_OW 257
34185: PUSH
34186: LD_INT 1
34188: EQUAL
34189: IFFALSE 34210
// points := [ 10 , 5 , 3 ] ;
34191: LD_ADDR_VAR 0 9
34195: PUSH
34196: LD_INT 10
34198: PUSH
34199: LD_INT 5
34201: PUSH
34202: LD_INT 3
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: LIST
34209: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34210: LD_VAR 0 6
34214: PPUSH
34215: CALL_OW 257
34219: PUSH
34220: LD_INT 2
34222: PUSH
34223: LD_INT 3
34225: PUSH
34226: LD_INT 4
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: LIST
34233: IN
34234: IFFALSE 34255
// points := [ 3 , 2 , 1 ] ;
34236: LD_ADDR_VAR 0 9
34240: PUSH
34241: LD_INT 3
34243: PUSH
34244: LD_INT 2
34246: PUSH
34247: LD_INT 1
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: LIST
34254: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34255: LD_VAR 0 6
34259: PPUSH
34260: CALL_OW 257
34264: PUSH
34265: LD_INT 5
34267: EQUAL
34268: IFFALSE 34289
// points := [ 130 , 5 , 2 ] ;
34270: LD_ADDR_VAR 0 9
34274: PUSH
34275: LD_INT 130
34277: PUSH
34278: LD_INT 5
34280: PUSH
34281: LD_INT 2
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: LIST
34288: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34289: LD_VAR 0 6
34293: PPUSH
34294: CALL_OW 257
34298: PUSH
34299: LD_INT 8
34301: EQUAL
34302: IFFALSE 34323
// points := [ 35 , 35 , 30 ] ;
34304: LD_ADDR_VAR 0 9
34308: PUSH
34309: LD_INT 35
34311: PUSH
34312: LD_INT 35
34314: PUSH
34315: LD_INT 30
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: LIST
34322: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34323: LD_VAR 0 6
34327: PPUSH
34328: CALL_OW 257
34332: PUSH
34333: LD_INT 9
34335: EQUAL
34336: IFFALSE 34357
// points := [ 20 , 55 , 40 ] ;
34338: LD_ADDR_VAR 0 9
34342: PUSH
34343: LD_INT 20
34345: PUSH
34346: LD_INT 55
34348: PUSH
34349: LD_INT 40
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: LIST
34356: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34357: LD_VAR 0 6
34361: PPUSH
34362: CALL_OW 257
34366: PUSH
34367: LD_INT 12
34369: PUSH
34370: LD_INT 16
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: IN
34377: IFFALSE 34398
// points := [ 5 , 3 , 2 ] ;
34379: LD_ADDR_VAR 0 9
34383: PUSH
34384: LD_INT 5
34386: PUSH
34387: LD_INT 3
34389: PUSH
34390: LD_INT 2
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: LIST
34397: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34398: LD_VAR 0 6
34402: PPUSH
34403: CALL_OW 257
34407: PUSH
34408: LD_INT 17
34410: EQUAL
34411: IFFALSE 34432
// points := [ 100 , 50 , 75 ] ;
34413: LD_ADDR_VAR 0 9
34417: PUSH
34418: LD_INT 100
34420: PUSH
34421: LD_INT 50
34423: PUSH
34424: LD_INT 75
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: LIST
34431: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34432: LD_VAR 0 6
34436: PPUSH
34437: CALL_OW 257
34441: PUSH
34442: LD_INT 15
34444: EQUAL
34445: IFFALSE 34466
// points := [ 10 , 5 , 3 ] ;
34447: LD_ADDR_VAR 0 9
34451: PUSH
34452: LD_INT 10
34454: PUSH
34455: LD_INT 5
34457: PUSH
34458: LD_INT 3
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: LIST
34465: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34466: LD_VAR 0 6
34470: PPUSH
34471: CALL_OW 257
34475: PUSH
34476: LD_INT 14
34478: EQUAL
34479: IFFALSE 34500
// points := [ 10 , 0 , 0 ] ;
34481: LD_ADDR_VAR 0 9
34485: PUSH
34486: LD_INT 10
34488: PUSH
34489: LD_INT 0
34491: PUSH
34492: LD_INT 0
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: LIST
34499: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34500: LD_VAR 0 6
34504: PPUSH
34505: CALL_OW 257
34509: PUSH
34510: LD_INT 11
34512: EQUAL
34513: IFFALSE 34534
// points := [ 30 , 10 , 5 ] ;
34515: LD_ADDR_VAR 0 9
34519: PUSH
34520: LD_INT 30
34522: PUSH
34523: LD_INT 10
34525: PUSH
34526: LD_INT 5
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: LIST
34533: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34534: LD_VAR 0 1
34538: PPUSH
34539: LD_INT 5
34541: PPUSH
34542: CALL_OW 321
34546: PUSH
34547: LD_INT 2
34549: EQUAL
34550: IFFALSE 34567
// bpoints := bpoints * 1.8 ;
34552: LD_ADDR_VAR 0 10
34556: PUSH
34557: LD_VAR 0 10
34561: PUSH
34562: LD_REAL  1.80000000000000E+0000
34565: MUL
34566: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34567: LD_VAR 0 6
34571: PPUSH
34572: CALL_OW 257
34576: PUSH
34577: LD_INT 1
34579: PUSH
34580: LD_INT 2
34582: PUSH
34583: LD_INT 3
34585: PUSH
34586: LD_INT 4
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: IN
34595: PUSH
34596: LD_VAR 0 1
34600: PPUSH
34601: LD_INT 51
34603: PPUSH
34604: CALL_OW 321
34608: PUSH
34609: LD_INT 2
34611: EQUAL
34612: AND
34613: IFFALSE 34630
// bpoints := bpoints * 1.2 ;
34615: LD_ADDR_VAR 0 10
34619: PUSH
34620: LD_VAR 0 10
34624: PUSH
34625: LD_REAL  1.20000000000000E+0000
34628: MUL
34629: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34630: LD_VAR 0 6
34634: PPUSH
34635: CALL_OW 257
34639: PUSH
34640: LD_INT 5
34642: PUSH
34643: LD_INT 7
34645: PUSH
34646: LD_INT 9
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: LIST
34653: IN
34654: PUSH
34655: LD_VAR 0 1
34659: PPUSH
34660: LD_INT 52
34662: PPUSH
34663: CALL_OW 321
34667: PUSH
34668: LD_INT 2
34670: EQUAL
34671: AND
34672: IFFALSE 34689
// bpoints := bpoints * 1.5 ;
34674: LD_ADDR_VAR 0 10
34678: PUSH
34679: LD_VAR 0 10
34683: PUSH
34684: LD_REAL  1.50000000000000E+0000
34687: MUL
34688: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34689: LD_VAR 0 1
34693: PPUSH
34694: LD_INT 66
34696: PPUSH
34697: CALL_OW 321
34701: PUSH
34702: LD_INT 2
34704: EQUAL
34705: IFFALSE 34722
// bpoints := bpoints * 1.1 ;
34707: LD_ADDR_VAR 0 10
34711: PUSH
34712: LD_VAR 0 10
34716: PUSH
34717: LD_REAL  1.10000000000000E+0000
34720: MUL
34721: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34722: LD_ADDR_VAR 0 10
34726: PUSH
34727: LD_VAR 0 10
34731: PUSH
34732: LD_VAR 0 6
34736: PPUSH
34737: LD_INT 1
34739: PPUSH
34740: CALL_OW 259
34744: PUSH
34745: LD_REAL  1.15000000000000E+0000
34748: MUL
34749: MUL
34750: ST_TO_ADDR
// end ; unit_vehicle :
34751: GO 35575
34753: LD_INT 2
34755: DOUBLE
34756: EQUAL
34757: IFTRUE 34761
34759: GO 35563
34761: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34762: LD_VAR 0 6
34766: PPUSH
34767: CALL_OW 264
34771: PUSH
34772: LD_INT 2
34774: PUSH
34775: LD_INT 42
34777: PUSH
34778: LD_INT 24
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: LIST
34785: IN
34786: IFFALSE 34807
// points := [ 25 , 5 , 3 ] ;
34788: LD_ADDR_VAR 0 9
34792: PUSH
34793: LD_INT 25
34795: PUSH
34796: LD_INT 5
34798: PUSH
34799: LD_INT 3
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: LIST
34806: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34807: LD_VAR 0 6
34811: PPUSH
34812: CALL_OW 264
34816: PUSH
34817: LD_INT 4
34819: PUSH
34820: LD_INT 43
34822: PUSH
34823: LD_INT 25
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: LIST
34830: IN
34831: IFFALSE 34852
// points := [ 40 , 15 , 5 ] ;
34833: LD_ADDR_VAR 0 9
34837: PUSH
34838: LD_INT 40
34840: PUSH
34841: LD_INT 15
34843: PUSH
34844: LD_INT 5
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: LIST
34851: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34852: LD_VAR 0 6
34856: PPUSH
34857: CALL_OW 264
34861: PUSH
34862: LD_INT 3
34864: PUSH
34865: LD_INT 23
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: IN
34872: IFFALSE 34893
// points := [ 7 , 25 , 8 ] ;
34874: LD_ADDR_VAR 0 9
34878: PUSH
34879: LD_INT 7
34881: PUSH
34882: LD_INT 25
34884: PUSH
34885: LD_INT 8
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: LIST
34892: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34893: LD_VAR 0 6
34897: PPUSH
34898: CALL_OW 264
34902: PUSH
34903: LD_INT 5
34905: PUSH
34906: LD_INT 27
34908: PUSH
34909: LD_INT 44
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: LIST
34916: IN
34917: IFFALSE 34938
// points := [ 14 , 50 , 16 ] ;
34919: LD_ADDR_VAR 0 9
34923: PUSH
34924: LD_INT 14
34926: PUSH
34927: LD_INT 50
34929: PUSH
34930: LD_INT 16
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: LIST
34937: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34938: LD_VAR 0 6
34942: PPUSH
34943: CALL_OW 264
34947: PUSH
34948: LD_INT 6
34950: PUSH
34951: LD_INT 46
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: IN
34958: IFFALSE 34979
// points := [ 32 , 120 , 70 ] ;
34960: LD_ADDR_VAR 0 9
34964: PUSH
34965: LD_INT 32
34967: PUSH
34968: LD_INT 120
34970: PUSH
34971: LD_INT 70
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: LIST
34978: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
34979: LD_VAR 0 6
34983: PPUSH
34984: CALL_OW 264
34988: PUSH
34989: LD_INT 7
34991: PUSH
34992: LD_INT 28
34994: PUSH
34995: LD_INT 45
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: LIST
35002: IN
35003: IFFALSE 35024
// points := [ 35 , 20 , 45 ] ;
35005: LD_ADDR_VAR 0 9
35009: PUSH
35010: LD_INT 35
35012: PUSH
35013: LD_INT 20
35015: PUSH
35016: LD_INT 45
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: LIST
35023: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35024: LD_VAR 0 6
35028: PPUSH
35029: CALL_OW 264
35033: PUSH
35034: LD_INT 47
35036: PUSH
35037: EMPTY
35038: LIST
35039: IN
35040: IFFALSE 35061
// points := [ 67 , 45 , 75 ] ;
35042: LD_ADDR_VAR 0 9
35046: PUSH
35047: LD_INT 67
35049: PUSH
35050: LD_INT 45
35052: PUSH
35053: LD_INT 75
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: LIST
35060: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35061: LD_VAR 0 6
35065: PPUSH
35066: CALL_OW 264
35070: PUSH
35071: LD_INT 26
35073: PUSH
35074: EMPTY
35075: LIST
35076: IN
35077: IFFALSE 35098
// points := [ 120 , 30 , 80 ] ;
35079: LD_ADDR_VAR 0 9
35083: PUSH
35084: LD_INT 120
35086: PUSH
35087: LD_INT 30
35089: PUSH
35090: LD_INT 80
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: LIST
35097: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35098: LD_VAR 0 6
35102: PPUSH
35103: CALL_OW 264
35107: PUSH
35108: LD_INT 22
35110: PUSH
35111: EMPTY
35112: LIST
35113: IN
35114: IFFALSE 35135
// points := [ 40 , 1 , 1 ] ;
35116: LD_ADDR_VAR 0 9
35120: PUSH
35121: LD_INT 40
35123: PUSH
35124: LD_INT 1
35126: PUSH
35127: LD_INT 1
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: LIST
35134: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35135: LD_VAR 0 6
35139: PPUSH
35140: CALL_OW 264
35144: PUSH
35145: LD_INT 29
35147: PUSH
35148: EMPTY
35149: LIST
35150: IN
35151: IFFALSE 35172
// points := [ 70 , 200 , 400 ] ;
35153: LD_ADDR_VAR 0 9
35157: PUSH
35158: LD_INT 70
35160: PUSH
35161: LD_INT 200
35163: PUSH
35164: LD_INT 400
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: LIST
35171: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35172: LD_VAR 0 6
35176: PPUSH
35177: CALL_OW 264
35181: PUSH
35182: LD_INT 14
35184: PUSH
35185: LD_INT 53
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: IN
35192: IFFALSE 35213
// points := [ 40 , 10 , 20 ] ;
35194: LD_ADDR_VAR 0 9
35198: PUSH
35199: LD_INT 40
35201: PUSH
35202: LD_INT 10
35204: PUSH
35205: LD_INT 20
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: LIST
35212: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35213: LD_VAR 0 6
35217: PPUSH
35218: CALL_OW 264
35222: PUSH
35223: LD_INT 9
35225: PUSH
35226: EMPTY
35227: LIST
35228: IN
35229: IFFALSE 35250
// points := [ 5 , 70 , 20 ] ;
35231: LD_ADDR_VAR 0 9
35235: PUSH
35236: LD_INT 5
35238: PUSH
35239: LD_INT 70
35241: PUSH
35242: LD_INT 20
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: LIST
35249: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35250: LD_VAR 0 6
35254: PPUSH
35255: CALL_OW 264
35259: PUSH
35260: LD_INT 10
35262: PUSH
35263: EMPTY
35264: LIST
35265: IN
35266: IFFALSE 35287
// points := [ 35 , 110 , 70 ] ;
35268: LD_ADDR_VAR 0 9
35272: PUSH
35273: LD_INT 35
35275: PUSH
35276: LD_INT 110
35278: PUSH
35279: LD_INT 70
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: LIST
35286: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35287: LD_VAR 0 6
35291: PPUSH
35292: CALL_OW 265
35296: PUSH
35297: LD_INT 25
35299: EQUAL
35300: IFFALSE 35321
// points := [ 80 , 65 , 100 ] ;
35302: LD_ADDR_VAR 0 9
35306: PUSH
35307: LD_INT 80
35309: PUSH
35310: LD_INT 65
35312: PUSH
35313: LD_INT 100
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: LIST
35320: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35321: LD_VAR 0 6
35325: PPUSH
35326: CALL_OW 263
35330: PUSH
35331: LD_INT 1
35333: EQUAL
35334: IFFALSE 35369
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35336: LD_ADDR_VAR 0 10
35340: PUSH
35341: LD_VAR 0 10
35345: PUSH
35346: LD_VAR 0 6
35350: PPUSH
35351: CALL_OW 311
35355: PPUSH
35356: LD_INT 3
35358: PPUSH
35359: CALL_OW 259
35363: PUSH
35364: LD_INT 4
35366: MUL
35367: MUL
35368: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35369: LD_VAR 0 6
35373: PPUSH
35374: CALL_OW 263
35378: PUSH
35379: LD_INT 2
35381: EQUAL
35382: IFFALSE 35433
// begin j := IsControledBy ( i ) ;
35384: LD_ADDR_VAR 0 7
35388: PUSH
35389: LD_VAR 0 6
35393: PPUSH
35394: CALL_OW 312
35398: ST_TO_ADDR
// if j then
35399: LD_VAR 0 7
35403: IFFALSE 35433
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35405: LD_ADDR_VAR 0 10
35409: PUSH
35410: LD_VAR 0 10
35414: PUSH
35415: LD_VAR 0 7
35419: PPUSH
35420: LD_INT 3
35422: PPUSH
35423: CALL_OW 259
35427: PUSH
35428: LD_INT 3
35430: MUL
35431: MUL
35432: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35433: LD_VAR 0 6
35437: PPUSH
35438: CALL_OW 264
35442: PUSH
35443: LD_INT 5
35445: PUSH
35446: LD_INT 6
35448: PUSH
35449: LD_INT 46
35451: PUSH
35452: LD_INT 44
35454: PUSH
35455: LD_INT 47
35457: PUSH
35458: LD_INT 45
35460: PUSH
35461: LD_INT 28
35463: PUSH
35464: LD_INT 7
35466: PUSH
35467: LD_INT 27
35469: PUSH
35470: LD_INT 29
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: IN
35485: PUSH
35486: LD_VAR 0 1
35490: PPUSH
35491: LD_INT 52
35493: PPUSH
35494: CALL_OW 321
35498: PUSH
35499: LD_INT 2
35501: EQUAL
35502: AND
35503: IFFALSE 35520
// bpoints := bpoints * 1.2 ;
35505: LD_ADDR_VAR 0 10
35509: PUSH
35510: LD_VAR 0 10
35514: PUSH
35515: LD_REAL  1.20000000000000E+0000
35518: MUL
35519: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35520: LD_VAR 0 6
35524: PPUSH
35525: CALL_OW 264
35529: PUSH
35530: LD_INT 6
35532: PUSH
35533: LD_INT 46
35535: PUSH
35536: LD_INT 47
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: LIST
35543: IN
35544: IFFALSE 35561
// bpoints := bpoints * 1.2 ;
35546: LD_ADDR_VAR 0 10
35550: PUSH
35551: LD_VAR 0 10
35555: PUSH
35556: LD_REAL  1.20000000000000E+0000
35559: MUL
35560: ST_TO_ADDR
// end ; unit_building :
35561: GO 35575
35563: LD_INT 3
35565: DOUBLE
35566: EQUAL
35567: IFTRUE 35571
35569: GO 35574
35571: POP
// ; end ;
35572: GO 35575
35574: POP
// for j = 1 to 3 do
35575: LD_ADDR_VAR 0 7
35579: PUSH
35580: DOUBLE
35581: LD_INT 1
35583: DEC
35584: ST_TO_ADDR
35585: LD_INT 3
35587: PUSH
35588: FOR_TO
35589: IFFALSE 35642
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35591: LD_ADDR_VAR 0 5
35595: PUSH
35596: LD_VAR 0 5
35600: PPUSH
35601: LD_VAR 0 7
35605: PPUSH
35606: LD_VAR 0 5
35610: PUSH
35611: LD_VAR 0 7
35615: ARRAY
35616: PUSH
35617: LD_VAR 0 9
35621: PUSH
35622: LD_VAR 0 7
35626: ARRAY
35627: PUSH
35628: LD_VAR 0 10
35632: MUL
35633: PLUS
35634: PPUSH
35635: CALL_OW 1
35639: ST_TO_ADDR
35640: GO 35588
35642: POP
35643: POP
// end ;
35644: GO 34127
35646: POP
35647: POP
// result := Replace ( result , 4 , tmp ) ;
35648: LD_ADDR_VAR 0 5
35652: PUSH
35653: LD_VAR 0 5
35657: PPUSH
35658: LD_INT 4
35660: PPUSH
35661: LD_VAR 0 8
35665: PPUSH
35666: CALL_OW 1
35670: ST_TO_ADDR
// end ;
35671: LD_VAR 0 5
35675: RET
// export function DangerAtRange ( unit , range ) ; begin
35676: LD_INT 0
35678: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35679: LD_ADDR_VAR 0 3
35683: PUSH
35684: LD_VAR 0 1
35688: PPUSH
35689: CALL_OW 255
35693: PPUSH
35694: LD_VAR 0 1
35698: PPUSH
35699: CALL_OW 250
35703: PPUSH
35704: LD_VAR 0 1
35708: PPUSH
35709: CALL_OW 251
35713: PPUSH
35714: LD_VAR 0 2
35718: PPUSH
35719: CALL 33979 0 4
35723: ST_TO_ADDR
// end ;
35724: LD_VAR 0 3
35728: RET
// export function DangerInArea ( side , area ) ; begin
35729: LD_INT 0
35731: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35732: LD_ADDR_VAR 0 3
35736: PUSH
35737: LD_VAR 0 2
35741: PPUSH
35742: LD_INT 81
35744: PUSH
35745: LD_VAR 0 1
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PPUSH
35754: CALL_OW 70
35758: ST_TO_ADDR
// end ;
35759: LD_VAR 0 3
35763: RET
// export function IsExtension ( b ) ; begin
35764: LD_INT 0
35766: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35767: LD_ADDR_VAR 0 2
35771: PUSH
35772: LD_VAR 0 1
35776: PUSH
35777: LD_INT 23
35779: PUSH
35780: LD_INT 20
35782: PUSH
35783: LD_INT 22
35785: PUSH
35786: LD_INT 17
35788: PUSH
35789: LD_INT 24
35791: PUSH
35792: LD_INT 21
35794: PUSH
35795: LD_INT 19
35797: PUSH
35798: LD_INT 16
35800: PUSH
35801: LD_INT 25
35803: PUSH
35804: LD_INT 18
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: IN
35819: ST_TO_ADDR
// end ;
35820: LD_VAR 0 2
35824: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
35825: LD_INT 0
35827: PPUSH
35828: PPUSH
35829: PPUSH
// result := [ ] ;
35830: LD_ADDR_VAR 0 3
35834: PUSH
35835: EMPTY
35836: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35837: LD_ADDR_VAR 0 4
35841: PUSH
35842: LD_VAR 0 2
35846: PPUSH
35847: LD_INT 21
35849: PUSH
35850: LD_INT 3
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PPUSH
35857: CALL_OW 70
35861: ST_TO_ADDR
// if not tmp then
35862: LD_VAR 0 4
35866: NOT
35867: IFFALSE 35871
// exit ;
35869: GO 35929
// for i in tmp do
35871: LD_ADDR_VAR 0 5
35875: PUSH
35876: LD_VAR 0 4
35880: PUSH
35881: FOR_IN
35882: IFFALSE 35917
// if GetBase ( i ) <> base then
35884: LD_VAR 0 5
35888: PPUSH
35889: CALL_OW 274
35893: PUSH
35894: LD_VAR 0 1
35898: NONEQUAL
35899: IFFALSE 35915
// ComLinkToBase ( base , i ) ;
35901: LD_VAR 0 1
35905: PPUSH
35906: LD_VAR 0 5
35910: PPUSH
35911: CALL_OW 169
35915: GO 35881
35917: POP
35918: POP
// result := tmp ;
35919: LD_ADDR_VAR 0 3
35923: PUSH
35924: LD_VAR 0 4
35928: ST_TO_ADDR
// end ;
35929: LD_VAR 0 3
35933: RET
// export function ComComplete ( unit , b ) ; var i ; begin
35934: LD_INT 0
35936: PPUSH
35937: PPUSH
// if BuildingStatus ( b ) = bs_build then
35938: LD_VAR 0 2
35942: PPUSH
35943: CALL_OW 461
35947: PUSH
35948: LD_INT 1
35950: EQUAL
35951: IFFALSE 36011
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35953: LD_VAR 0 1
35957: PPUSH
35958: LD_STRING h
35960: PUSH
35961: LD_VAR 0 2
35965: PPUSH
35966: CALL_OW 250
35970: PUSH
35971: LD_VAR 0 2
35975: PPUSH
35976: CALL_OW 251
35980: PUSH
35981: LD_VAR 0 2
35985: PUSH
35986: LD_INT 0
35988: PUSH
35989: LD_INT 0
35991: PUSH
35992: LD_INT 0
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: PUSH
36004: EMPTY
36005: LIST
36006: PPUSH
36007: CALL_OW 446
// end ;
36011: LD_VAR 0 3
36015: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36016: LD_INT 0
36018: PPUSH
36019: PPUSH
36020: PPUSH
36021: PPUSH
36022: PPUSH
36023: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
36024: LD_VAR 0 1
36028: NOT
36029: PUSH
36030: LD_VAR 0 1
36034: PPUSH
36035: CALL_OW 263
36039: PUSH
36040: LD_INT 2
36042: EQUAL
36043: NOT
36044: OR
36045: IFFALSE 36049
// exit ;
36047: GO 36365
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36049: LD_ADDR_VAR 0 6
36053: PUSH
36054: LD_INT 22
36056: PUSH
36057: LD_VAR 0 1
36061: PPUSH
36062: CALL_OW 255
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 2
36073: PUSH
36074: LD_INT 30
36076: PUSH
36077: LD_INT 36
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 34
36086: PUSH
36087: LD_INT 31
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: LIST
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PPUSH
36103: CALL_OW 69
36107: ST_TO_ADDR
// if not tmp then
36108: LD_VAR 0 6
36112: NOT
36113: IFFALSE 36117
// exit ;
36115: GO 36365
// result := [ ] ;
36117: LD_ADDR_VAR 0 2
36121: PUSH
36122: EMPTY
36123: ST_TO_ADDR
// for i in tmp do
36124: LD_ADDR_VAR 0 3
36128: PUSH
36129: LD_VAR 0 6
36133: PUSH
36134: FOR_IN
36135: IFFALSE 36206
// begin t := UnitsInside ( i ) ;
36137: LD_ADDR_VAR 0 4
36141: PUSH
36142: LD_VAR 0 3
36146: PPUSH
36147: CALL_OW 313
36151: ST_TO_ADDR
// if t then
36152: LD_VAR 0 4
36156: IFFALSE 36204
// for j in t do
36158: LD_ADDR_VAR 0 7
36162: PUSH
36163: LD_VAR 0 4
36167: PUSH
36168: FOR_IN
36169: IFFALSE 36202
// result := Insert ( result , result + 1 , j ) ;
36171: LD_ADDR_VAR 0 2
36175: PUSH
36176: LD_VAR 0 2
36180: PPUSH
36181: LD_VAR 0 2
36185: PUSH
36186: LD_INT 1
36188: PLUS
36189: PPUSH
36190: LD_VAR 0 7
36194: PPUSH
36195: CALL_OW 2
36199: ST_TO_ADDR
36200: GO 36168
36202: POP
36203: POP
// end ;
36204: GO 36134
36206: POP
36207: POP
// if not result then
36208: LD_VAR 0 2
36212: NOT
36213: IFFALSE 36217
// exit ;
36215: GO 36365
// mech := result [ 1 ] ;
36217: LD_ADDR_VAR 0 5
36221: PUSH
36222: LD_VAR 0 2
36226: PUSH
36227: LD_INT 1
36229: ARRAY
36230: ST_TO_ADDR
// if result > 1 then
36231: LD_VAR 0 2
36235: PUSH
36236: LD_INT 1
36238: GREATER
36239: IFFALSE 36351
// for i = 2 to result do
36241: LD_ADDR_VAR 0 3
36245: PUSH
36246: DOUBLE
36247: LD_INT 2
36249: DEC
36250: ST_TO_ADDR
36251: LD_VAR 0 2
36255: PUSH
36256: FOR_TO
36257: IFFALSE 36349
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36259: LD_ADDR_VAR 0 4
36263: PUSH
36264: LD_VAR 0 2
36268: PUSH
36269: LD_VAR 0 3
36273: ARRAY
36274: PPUSH
36275: LD_INT 3
36277: PPUSH
36278: CALL_OW 259
36282: PUSH
36283: LD_VAR 0 2
36287: PUSH
36288: LD_VAR 0 3
36292: ARRAY
36293: PPUSH
36294: CALL_OW 432
36298: MINUS
36299: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36300: LD_VAR 0 4
36304: PUSH
36305: LD_VAR 0 5
36309: PPUSH
36310: LD_INT 3
36312: PPUSH
36313: CALL_OW 259
36317: PUSH
36318: LD_VAR 0 5
36322: PPUSH
36323: CALL_OW 432
36327: MINUS
36328: GREATEREQUAL
36329: IFFALSE 36347
// mech := result [ i ] ;
36331: LD_ADDR_VAR 0 5
36335: PUSH
36336: LD_VAR 0 2
36340: PUSH
36341: LD_VAR 0 3
36345: ARRAY
36346: ST_TO_ADDR
// end ;
36347: GO 36256
36349: POP
36350: POP
// ComLinkTo ( vehicle , mech ) ;
36351: LD_VAR 0 1
36355: PPUSH
36356: LD_VAR 0 5
36360: PPUSH
36361: CALL_OW 135
// end ;
36365: LD_VAR 0 2
36369: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36370: LD_INT 0
36372: PPUSH
36373: PPUSH
36374: PPUSH
36375: PPUSH
36376: PPUSH
36377: PPUSH
36378: PPUSH
36379: PPUSH
36380: PPUSH
36381: PPUSH
36382: PPUSH
36383: PPUSH
36384: PPUSH
// result := [ ] ;
36385: LD_ADDR_VAR 0 7
36389: PUSH
36390: EMPTY
36391: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36392: LD_VAR 0 1
36396: PPUSH
36397: CALL_OW 266
36401: PUSH
36402: LD_INT 0
36404: PUSH
36405: LD_INT 1
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: IN
36412: NOT
36413: IFFALSE 36417
// exit ;
36415: GO 38048
// if name then
36417: LD_VAR 0 3
36421: IFFALSE 36437
// SetBName ( base_dep , name ) ;
36423: LD_VAR 0 1
36427: PPUSH
36428: LD_VAR 0 3
36432: PPUSH
36433: CALL_OW 500
// base := GetBase ( base_dep ) ;
36437: LD_ADDR_VAR 0 15
36441: PUSH
36442: LD_VAR 0 1
36446: PPUSH
36447: CALL_OW 274
36451: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36452: LD_ADDR_VAR 0 16
36456: PUSH
36457: LD_VAR 0 1
36461: PPUSH
36462: CALL_OW 255
36466: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36467: LD_ADDR_VAR 0 17
36471: PUSH
36472: LD_VAR 0 1
36476: PPUSH
36477: CALL_OW 248
36481: ST_TO_ADDR
// if sources then
36482: LD_VAR 0 5
36486: IFFALSE 36533
// for i = 1 to 3 do
36488: LD_ADDR_VAR 0 8
36492: PUSH
36493: DOUBLE
36494: LD_INT 1
36496: DEC
36497: ST_TO_ADDR
36498: LD_INT 3
36500: PUSH
36501: FOR_TO
36502: IFFALSE 36531
// AddResourceType ( base , i , sources [ i ] ) ;
36504: LD_VAR 0 15
36508: PPUSH
36509: LD_VAR 0 8
36513: PPUSH
36514: LD_VAR 0 5
36518: PUSH
36519: LD_VAR 0 8
36523: ARRAY
36524: PPUSH
36525: CALL_OW 276
36529: GO 36501
36531: POP
36532: POP
// buildings := GetBaseBuildings ( base , area ) ;
36533: LD_ADDR_VAR 0 18
36537: PUSH
36538: LD_VAR 0 15
36542: PPUSH
36543: LD_VAR 0 2
36547: PPUSH
36548: CALL 35825 0 2
36552: ST_TO_ADDR
// InitHc ;
36553: CALL_OW 19
// InitUc ;
36557: CALL_OW 18
// uc_side := side ;
36561: LD_ADDR_OWVAR 20
36565: PUSH
36566: LD_VAR 0 16
36570: ST_TO_ADDR
// uc_nation := nation ;
36571: LD_ADDR_OWVAR 21
36575: PUSH
36576: LD_VAR 0 17
36580: ST_TO_ADDR
// if buildings then
36581: LD_VAR 0 18
36585: IFFALSE 37907
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36587: LD_ADDR_VAR 0 19
36591: PUSH
36592: LD_VAR 0 18
36596: PPUSH
36597: LD_INT 2
36599: PUSH
36600: LD_INT 30
36602: PUSH
36603: LD_INT 29
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 30
36612: PUSH
36613: LD_INT 30
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: LIST
36624: PPUSH
36625: CALL_OW 72
36629: ST_TO_ADDR
// if tmp then
36630: LD_VAR 0 19
36634: IFFALSE 36682
// for i in tmp do
36636: LD_ADDR_VAR 0 8
36640: PUSH
36641: LD_VAR 0 19
36645: PUSH
36646: FOR_IN
36647: IFFALSE 36680
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36649: LD_VAR 0 8
36653: PPUSH
36654: CALL_OW 250
36658: PPUSH
36659: LD_VAR 0 8
36663: PPUSH
36664: CALL_OW 251
36668: PPUSH
36669: LD_VAR 0 16
36673: PPUSH
36674: CALL_OW 441
36678: GO 36646
36680: POP
36681: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36682: LD_VAR 0 18
36686: PPUSH
36687: LD_INT 2
36689: PUSH
36690: LD_INT 30
36692: PUSH
36693: LD_INT 32
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: LD_INT 30
36702: PUSH
36703: LD_INT 33
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: LIST
36714: PPUSH
36715: CALL_OW 72
36719: IFFALSE 36807
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36721: LD_ADDR_VAR 0 8
36725: PUSH
36726: LD_VAR 0 18
36730: PPUSH
36731: LD_INT 2
36733: PUSH
36734: LD_INT 30
36736: PUSH
36737: LD_INT 32
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_INT 30
36746: PUSH
36747: LD_INT 33
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: LIST
36758: PPUSH
36759: CALL_OW 72
36763: PUSH
36764: FOR_IN
36765: IFFALSE 36805
// begin if not GetBWeapon ( i ) then
36767: LD_VAR 0 8
36771: PPUSH
36772: CALL_OW 269
36776: NOT
36777: IFFALSE 36803
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36779: LD_VAR 0 8
36783: PPUSH
36784: LD_VAR 0 8
36788: PPUSH
36789: LD_VAR 0 2
36793: PPUSH
36794: CALL 38053 0 2
36798: PPUSH
36799: CALL_OW 431
// end ;
36803: GO 36764
36805: POP
36806: POP
// end ; for i = 1 to personel do
36807: LD_ADDR_VAR 0 8
36811: PUSH
36812: DOUBLE
36813: LD_INT 1
36815: DEC
36816: ST_TO_ADDR
36817: LD_VAR 0 6
36821: PUSH
36822: FOR_TO
36823: IFFALSE 37887
// begin if i > 4 then
36825: LD_VAR 0 8
36829: PUSH
36830: LD_INT 4
36832: GREATER
36833: IFFALSE 36837
// break ;
36835: GO 37887
// case i of 1 :
36837: LD_VAR 0 8
36841: PUSH
36842: LD_INT 1
36844: DOUBLE
36845: EQUAL
36846: IFTRUE 36850
36848: GO 36930
36850: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36851: LD_ADDR_VAR 0 12
36855: PUSH
36856: LD_VAR 0 18
36860: PPUSH
36861: LD_INT 22
36863: PUSH
36864: LD_VAR 0 16
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 58
36875: PUSH
36876: EMPTY
36877: LIST
36878: PUSH
36879: LD_INT 2
36881: PUSH
36882: LD_INT 30
36884: PUSH
36885: LD_INT 32
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 30
36894: PUSH
36895: LD_INT 4
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 30
36904: PUSH
36905: LD_INT 5
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: LIST
36922: PPUSH
36923: CALL_OW 72
36927: ST_TO_ADDR
36928: GO 37152
36930: LD_INT 2
36932: DOUBLE
36933: EQUAL
36934: IFTRUE 36938
36936: GO 37000
36938: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36939: LD_ADDR_VAR 0 12
36943: PUSH
36944: LD_VAR 0 18
36948: PPUSH
36949: LD_INT 22
36951: PUSH
36952: LD_VAR 0 16
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 2
36963: PUSH
36964: LD_INT 30
36966: PUSH
36967: LD_INT 0
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: LD_INT 30
36976: PUSH
36977: LD_INT 1
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: LIST
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PPUSH
36993: CALL_OW 72
36997: ST_TO_ADDR
36998: GO 37152
37000: LD_INT 3
37002: DOUBLE
37003: EQUAL
37004: IFTRUE 37008
37006: GO 37070
37008: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37009: LD_ADDR_VAR 0 12
37013: PUSH
37014: LD_VAR 0 18
37018: PPUSH
37019: LD_INT 22
37021: PUSH
37022: LD_VAR 0 16
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 2
37033: PUSH
37034: LD_INT 30
37036: PUSH
37037: LD_INT 2
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 30
37046: PUSH
37047: LD_INT 3
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: LIST
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PPUSH
37063: CALL_OW 72
37067: ST_TO_ADDR
37068: GO 37152
37070: LD_INT 4
37072: DOUBLE
37073: EQUAL
37074: IFTRUE 37078
37076: GO 37151
37078: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37079: LD_ADDR_VAR 0 12
37083: PUSH
37084: LD_VAR 0 18
37088: PPUSH
37089: LD_INT 22
37091: PUSH
37092: LD_VAR 0 16
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 2
37103: PUSH
37104: LD_INT 30
37106: PUSH
37107: LD_INT 6
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 30
37116: PUSH
37117: LD_INT 7
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 30
37126: PUSH
37127: LD_INT 8
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PPUSH
37144: CALL_OW 72
37148: ST_TO_ADDR
37149: GO 37152
37151: POP
// if i = 1 then
37152: LD_VAR 0 8
37156: PUSH
37157: LD_INT 1
37159: EQUAL
37160: IFFALSE 37271
// begin tmp := [ ] ;
37162: LD_ADDR_VAR 0 19
37166: PUSH
37167: EMPTY
37168: ST_TO_ADDR
// for j in f do
37169: LD_ADDR_VAR 0 9
37173: PUSH
37174: LD_VAR 0 12
37178: PUSH
37179: FOR_IN
37180: IFFALSE 37253
// if GetBType ( j ) = b_bunker then
37182: LD_VAR 0 9
37186: PPUSH
37187: CALL_OW 266
37191: PUSH
37192: LD_INT 32
37194: EQUAL
37195: IFFALSE 37222
// tmp := Insert ( tmp , 1 , j ) else
37197: LD_ADDR_VAR 0 19
37201: PUSH
37202: LD_VAR 0 19
37206: PPUSH
37207: LD_INT 1
37209: PPUSH
37210: LD_VAR 0 9
37214: PPUSH
37215: CALL_OW 2
37219: ST_TO_ADDR
37220: GO 37251
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37222: LD_ADDR_VAR 0 19
37226: PUSH
37227: LD_VAR 0 19
37231: PPUSH
37232: LD_VAR 0 19
37236: PUSH
37237: LD_INT 1
37239: PLUS
37240: PPUSH
37241: LD_VAR 0 9
37245: PPUSH
37246: CALL_OW 2
37250: ST_TO_ADDR
37251: GO 37179
37253: POP
37254: POP
// if tmp then
37255: LD_VAR 0 19
37259: IFFALSE 37271
// f := tmp ;
37261: LD_ADDR_VAR 0 12
37265: PUSH
37266: LD_VAR 0 19
37270: ST_TO_ADDR
// end ; x := personel [ i ] ;
37271: LD_ADDR_VAR 0 13
37275: PUSH
37276: LD_VAR 0 6
37280: PUSH
37281: LD_VAR 0 8
37285: ARRAY
37286: ST_TO_ADDR
// if x = - 1 then
37287: LD_VAR 0 13
37291: PUSH
37292: LD_INT 1
37294: NEG
37295: EQUAL
37296: IFFALSE 37505
// begin for j in f do
37298: LD_ADDR_VAR 0 9
37302: PUSH
37303: LD_VAR 0 12
37307: PUSH
37308: FOR_IN
37309: IFFALSE 37501
// repeat InitHc ;
37311: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37315: LD_VAR 0 9
37319: PPUSH
37320: CALL_OW 266
37324: PUSH
37325: LD_INT 5
37327: EQUAL
37328: IFFALSE 37398
// begin if UnitsInside ( j ) < 3 then
37330: LD_VAR 0 9
37334: PPUSH
37335: CALL_OW 313
37339: PUSH
37340: LD_INT 3
37342: LESS
37343: IFFALSE 37379
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37345: LD_INT 0
37347: PPUSH
37348: LD_INT 5
37350: PUSH
37351: LD_INT 8
37353: PUSH
37354: LD_INT 9
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: LIST
37361: PUSH
37362: LD_VAR 0 17
37366: ARRAY
37367: PPUSH
37368: LD_VAR 0 4
37372: PPUSH
37373: CALL_OW 380
37377: GO 37396
// PrepareHuman ( false , i , skill ) ;
37379: LD_INT 0
37381: PPUSH
37382: LD_VAR 0 8
37386: PPUSH
37387: LD_VAR 0 4
37391: PPUSH
37392: CALL_OW 380
// end else
37396: GO 37415
// PrepareHuman ( false , i , skill ) ;
37398: LD_INT 0
37400: PPUSH
37401: LD_VAR 0 8
37405: PPUSH
37406: LD_VAR 0 4
37410: PPUSH
37411: CALL_OW 380
// un := CreateHuman ;
37415: LD_ADDR_VAR 0 14
37419: PUSH
37420: CALL_OW 44
37424: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37425: LD_ADDR_VAR 0 7
37429: PUSH
37430: LD_VAR 0 7
37434: PPUSH
37435: LD_INT 1
37437: PPUSH
37438: LD_VAR 0 14
37442: PPUSH
37443: CALL_OW 2
37447: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37448: LD_VAR 0 14
37452: PPUSH
37453: LD_VAR 0 9
37457: PPUSH
37458: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37462: LD_VAR 0 9
37466: PPUSH
37467: CALL_OW 313
37471: PUSH
37472: LD_INT 6
37474: EQUAL
37475: PUSH
37476: LD_VAR 0 9
37480: PPUSH
37481: CALL_OW 266
37485: PUSH
37486: LD_INT 32
37488: PUSH
37489: LD_INT 31
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: IN
37496: OR
37497: IFFALSE 37311
37499: GO 37308
37501: POP
37502: POP
// end else
37503: GO 37885
// for j = 1 to x do
37505: LD_ADDR_VAR 0 9
37509: PUSH
37510: DOUBLE
37511: LD_INT 1
37513: DEC
37514: ST_TO_ADDR
37515: LD_VAR 0 13
37519: PUSH
37520: FOR_TO
37521: IFFALSE 37883
// begin InitHc ;
37523: CALL_OW 19
// if not f then
37527: LD_VAR 0 12
37531: NOT
37532: IFFALSE 37621
// begin PrepareHuman ( false , i , skill ) ;
37534: LD_INT 0
37536: PPUSH
37537: LD_VAR 0 8
37541: PPUSH
37542: LD_VAR 0 4
37546: PPUSH
37547: CALL_OW 380
// un := CreateHuman ;
37551: LD_ADDR_VAR 0 14
37555: PUSH
37556: CALL_OW 44
37560: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37561: LD_ADDR_VAR 0 7
37565: PUSH
37566: LD_VAR 0 7
37570: PPUSH
37571: LD_INT 1
37573: PPUSH
37574: LD_VAR 0 14
37578: PPUSH
37579: CALL_OW 2
37583: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37584: LD_VAR 0 14
37588: PPUSH
37589: LD_VAR 0 1
37593: PPUSH
37594: CALL_OW 250
37598: PPUSH
37599: LD_VAR 0 1
37603: PPUSH
37604: CALL_OW 251
37608: PPUSH
37609: LD_INT 10
37611: PPUSH
37612: LD_INT 0
37614: PPUSH
37615: CALL_OW 50
// continue ;
37619: GO 37520
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37621: LD_VAR 0 12
37625: PUSH
37626: LD_INT 1
37628: ARRAY
37629: PPUSH
37630: CALL_OW 313
37634: PUSH
37635: LD_VAR 0 12
37639: PUSH
37640: LD_INT 1
37642: ARRAY
37643: PPUSH
37644: CALL_OW 266
37648: PUSH
37649: LD_INT 32
37651: PUSH
37652: LD_INT 31
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: IN
37659: AND
37660: PUSH
37661: LD_VAR 0 12
37665: PUSH
37666: LD_INT 1
37668: ARRAY
37669: PPUSH
37670: CALL_OW 313
37674: PUSH
37675: LD_INT 6
37677: EQUAL
37678: OR
37679: IFFALSE 37699
// f := Delete ( f , 1 ) ;
37681: LD_ADDR_VAR 0 12
37685: PUSH
37686: LD_VAR 0 12
37690: PPUSH
37691: LD_INT 1
37693: PPUSH
37694: CALL_OW 3
37698: ST_TO_ADDR
// if not f then
37699: LD_VAR 0 12
37703: NOT
37704: IFFALSE 37722
// begin x := x + 2 ;
37706: LD_ADDR_VAR 0 13
37710: PUSH
37711: LD_VAR 0 13
37715: PUSH
37716: LD_INT 2
37718: PLUS
37719: ST_TO_ADDR
// continue ;
37720: GO 37520
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37722: LD_VAR 0 12
37726: PUSH
37727: LD_INT 1
37729: ARRAY
37730: PPUSH
37731: CALL_OW 266
37735: PUSH
37736: LD_INT 5
37738: EQUAL
37739: IFFALSE 37813
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37741: LD_VAR 0 12
37745: PUSH
37746: LD_INT 1
37748: ARRAY
37749: PPUSH
37750: CALL_OW 313
37754: PUSH
37755: LD_INT 3
37757: LESS
37758: IFFALSE 37794
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37760: LD_INT 0
37762: PPUSH
37763: LD_INT 5
37765: PUSH
37766: LD_INT 8
37768: PUSH
37769: LD_INT 9
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: LIST
37776: PUSH
37777: LD_VAR 0 17
37781: ARRAY
37782: PPUSH
37783: LD_VAR 0 4
37787: PPUSH
37788: CALL_OW 380
37792: GO 37811
// PrepareHuman ( false , i , skill ) ;
37794: LD_INT 0
37796: PPUSH
37797: LD_VAR 0 8
37801: PPUSH
37802: LD_VAR 0 4
37806: PPUSH
37807: CALL_OW 380
// end else
37811: GO 37830
// PrepareHuman ( false , i , skill ) ;
37813: LD_INT 0
37815: PPUSH
37816: LD_VAR 0 8
37820: PPUSH
37821: LD_VAR 0 4
37825: PPUSH
37826: CALL_OW 380
// un := CreateHuman ;
37830: LD_ADDR_VAR 0 14
37834: PUSH
37835: CALL_OW 44
37839: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37840: LD_ADDR_VAR 0 7
37844: PUSH
37845: LD_VAR 0 7
37849: PPUSH
37850: LD_INT 1
37852: PPUSH
37853: LD_VAR 0 14
37857: PPUSH
37858: CALL_OW 2
37862: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37863: LD_VAR 0 14
37867: PPUSH
37868: LD_VAR 0 12
37872: PUSH
37873: LD_INT 1
37875: ARRAY
37876: PPUSH
37877: CALL_OW 52
// end ;
37881: GO 37520
37883: POP
37884: POP
// end ;
37885: GO 36822
37887: POP
37888: POP
// result := result ^ buildings ;
37889: LD_ADDR_VAR 0 7
37893: PUSH
37894: LD_VAR 0 7
37898: PUSH
37899: LD_VAR 0 18
37903: ADD
37904: ST_TO_ADDR
// end else
37905: GO 38048
// begin for i = 1 to personel do
37907: LD_ADDR_VAR 0 8
37911: PUSH
37912: DOUBLE
37913: LD_INT 1
37915: DEC
37916: ST_TO_ADDR
37917: LD_VAR 0 6
37921: PUSH
37922: FOR_TO
37923: IFFALSE 38046
// begin if i > 4 then
37925: LD_VAR 0 8
37929: PUSH
37930: LD_INT 4
37932: GREATER
37933: IFFALSE 37937
// break ;
37935: GO 38046
// x := personel [ i ] ;
37937: LD_ADDR_VAR 0 13
37941: PUSH
37942: LD_VAR 0 6
37946: PUSH
37947: LD_VAR 0 8
37951: ARRAY
37952: ST_TO_ADDR
// if x = - 1 then
37953: LD_VAR 0 13
37957: PUSH
37958: LD_INT 1
37960: NEG
37961: EQUAL
37962: IFFALSE 37966
// continue ;
37964: GO 37922
// PrepareHuman ( false , i , skill ) ;
37966: LD_INT 0
37968: PPUSH
37969: LD_VAR 0 8
37973: PPUSH
37974: LD_VAR 0 4
37978: PPUSH
37979: CALL_OW 380
// un := CreateHuman ;
37983: LD_ADDR_VAR 0 14
37987: PUSH
37988: CALL_OW 44
37992: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37993: LD_VAR 0 14
37997: PPUSH
37998: LD_VAR 0 1
38002: PPUSH
38003: CALL_OW 250
38007: PPUSH
38008: LD_VAR 0 1
38012: PPUSH
38013: CALL_OW 251
38017: PPUSH
38018: LD_INT 10
38020: PPUSH
38021: LD_INT 0
38023: PPUSH
38024: CALL_OW 50
// result := result ^ un ;
38028: LD_ADDR_VAR 0 7
38032: PUSH
38033: LD_VAR 0 7
38037: PUSH
38038: LD_VAR 0 14
38042: ADD
38043: ST_TO_ADDR
// end ;
38044: GO 37922
38046: POP
38047: POP
// end ; end ;
38048: LD_VAR 0 7
38052: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38053: LD_INT 0
38055: PPUSH
38056: PPUSH
38057: PPUSH
38058: PPUSH
38059: PPUSH
38060: PPUSH
38061: PPUSH
38062: PPUSH
38063: PPUSH
38064: PPUSH
38065: PPUSH
38066: PPUSH
38067: PPUSH
38068: PPUSH
38069: PPUSH
38070: PPUSH
// result := false ;
38071: LD_ADDR_VAR 0 3
38075: PUSH
38076: LD_INT 0
38078: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38079: LD_VAR 0 1
38083: NOT
38084: PUSH
38085: LD_VAR 0 1
38089: PPUSH
38090: CALL_OW 266
38094: PUSH
38095: LD_INT 32
38097: PUSH
38098: LD_INT 33
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: IN
38105: NOT
38106: OR
38107: IFFALSE 38111
// exit ;
38109: GO 39247
// nat := GetNation ( tower ) ;
38111: LD_ADDR_VAR 0 12
38115: PUSH
38116: LD_VAR 0 1
38120: PPUSH
38121: CALL_OW 248
38125: ST_TO_ADDR
// side := GetSide ( tower ) ;
38126: LD_ADDR_VAR 0 16
38130: PUSH
38131: LD_VAR 0 1
38135: PPUSH
38136: CALL_OW 255
38140: ST_TO_ADDR
// x := GetX ( tower ) ;
38141: LD_ADDR_VAR 0 10
38145: PUSH
38146: LD_VAR 0 1
38150: PPUSH
38151: CALL_OW 250
38155: ST_TO_ADDR
// y := GetY ( tower ) ;
38156: LD_ADDR_VAR 0 11
38160: PUSH
38161: LD_VAR 0 1
38165: PPUSH
38166: CALL_OW 251
38170: ST_TO_ADDR
// if not x or not y then
38171: LD_VAR 0 10
38175: NOT
38176: PUSH
38177: LD_VAR 0 11
38181: NOT
38182: OR
38183: IFFALSE 38187
// exit ;
38185: GO 39247
// weapon := 0 ;
38187: LD_ADDR_VAR 0 18
38191: PUSH
38192: LD_INT 0
38194: ST_TO_ADDR
// fac_list := [ ] ;
38195: LD_ADDR_VAR 0 17
38199: PUSH
38200: EMPTY
38201: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
38202: LD_ADDR_VAR 0 6
38206: PUSH
38207: LD_VAR 0 1
38211: PPUSH
38212: CALL_OW 274
38216: PPUSH
38217: LD_VAR 0 2
38221: PPUSH
38222: CALL 35825 0 2
38226: PPUSH
38227: LD_INT 30
38229: PUSH
38230: LD_INT 3
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PPUSH
38237: CALL_OW 72
38241: ST_TO_ADDR
// if not factories then
38242: LD_VAR 0 6
38246: NOT
38247: IFFALSE 38251
// exit ;
38249: GO 39247
// for i in factories do
38251: LD_ADDR_VAR 0 8
38255: PUSH
38256: LD_VAR 0 6
38260: PUSH
38261: FOR_IN
38262: IFFALSE 38287
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38264: LD_ADDR_VAR 0 17
38268: PUSH
38269: LD_VAR 0 17
38273: PUSH
38274: LD_VAR 0 8
38278: PPUSH
38279: CALL_OW 478
38283: UNION
38284: ST_TO_ADDR
38285: GO 38261
38287: POP
38288: POP
// if not fac_list then
38289: LD_VAR 0 17
38293: NOT
38294: IFFALSE 38298
// exit ;
38296: GO 39247
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38298: LD_ADDR_VAR 0 5
38302: PUSH
38303: LD_INT 4
38305: PUSH
38306: LD_INT 5
38308: PUSH
38309: LD_INT 9
38311: PUSH
38312: LD_INT 10
38314: PUSH
38315: LD_INT 6
38317: PUSH
38318: LD_INT 7
38320: PUSH
38321: LD_INT 11
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 27
38335: PUSH
38336: LD_INT 28
38338: PUSH
38339: LD_INT 26
38341: PUSH
38342: LD_INT 30
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 43
38353: PUSH
38354: LD_INT 44
38356: PUSH
38357: LD_INT 46
38359: PUSH
38360: LD_INT 45
38362: PUSH
38363: LD_INT 47
38365: PUSH
38366: LD_INT 49
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: LIST
38381: PUSH
38382: LD_VAR 0 12
38386: ARRAY
38387: ST_TO_ADDR
// for i in list do
38388: LD_ADDR_VAR 0 8
38392: PUSH
38393: LD_VAR 0 5
38397: PUSH
38398: FOR_IN
38399: IFFALSE 38432
// if not i in fac_list then
38401: LD_VAR 0 8
38405: PUSH
38406: LD_VAR 0 17
38410: IN
38411: NOT
38412: IFFALSE 38430
// list := list diff i ;
38414: LD_ADDR_VAR 0 5
38418: PUSH
38419: LD_VAR 0 5
38423: PUSH
38424: LD_VAR 0 8
38428: DIFF
38429: ST_TO_ADDR
38430: GO 38398
38432: POP
38433: POP
// if not list then
38434: LD_VAR 0 5
38438: NOT
38439: IFFALSE 38443
// exit ;
38441: GO 39247
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38443: LD_VAR 0 12
38447: PUSH
38448: LD_INT 3
38450: EQUAL
38451: PUSH
38452: LD_INT 49
38454: PUSH
38455: LD_VAR 0 5
38459: IN
38460: AND
38461: PUSH
38462: LD_INT 31
38464: PPUSH
38465: LD_VAR 0 16
38469: PPUSH
38470: CALL_OW 321
38474: PUSH
38475: LD_INT 2
38477: EQUAL
38478: AND
38479: IFFALSE 38539
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38481: LD_INT 22
38483: PUSH
38484: LD_VAR 0 16
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 35
38495: PUSH
38496: LD_INT 49
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 91
38505: PUSH
38506: LD_VAR 0 1
38510: PUSH
38511: LD_INT 10
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: LIST
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: LIST
38523: PPUSH
38524: CALL_OW 69
38528: NOT
38529: IFFALSE 38539
// weapon := ru_time_lapser ;
38531: LD_ADDR_VAR 0 18
38535: PUSH
38536: LD_INT 49
38538: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38539: LD_VAR 0 12
38543: PUSH
38544: LD_INT 1
38546: PUSH
38547: LD_INT 2
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: IN
38554: PUSH
38555: LD_INT 11
38557: PUSH
38558: LD_VAR 0 5
38562: IN
38563: PUSH
38564: LD_INT 30
38566: PUSH
38567: LD_VAR 0 5
38571: IN
38572: OR
38573: AND
38574: PUSH
38575: LD_INT 6
38577: PPUSH
38578: LD_VAR 0 16
38582: PPUSH
38583: CALL_OW 321
38587: PUSH
38588: LD_INT 2
38590: EQUAL
38591: AND
38592: IFFALSE 38757
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38594: LD_INT 22
38596: PUSH
38597: LD_VAR 0 16
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 2
38608: PUSH
38609: LD_INT 35
38611: PUSH
38612: LD_INT 11
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 35
38621: PUSH
38622: LD_INT 30
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 91
38636: PUSH
38637: LD_VAR 0 1
38641: PUSH
38642: LD_INT 18
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: LIST
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: LIST
38654: PPUSH
38655: CALL_OW 69
38659: NOT
38660: PUSH
38661: LD_INT 22
38663: PUSH
38664: LD_VAR 0 16
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 2
38675: PUSH
38676: LD_INT 30
38678: PUSH
38679: LD_INT 32
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 30
38688: PUSH
38689: LD_INT 33
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 91
38703: PUSH
38704: LD_VAR 0 1
38708: PUSH
38709: LD_INT 12
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: LIST
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: LIST
38721: PUSH
38722: EMPTY
38723: LIST
38724: PPUSH
38725: CALL_OW 69
38729: PUSH
38730: LD_INT 2
38732: GREATER
38733: AND
38734: IFFALSE 38757
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38736: LD_ADDR_VAR 0 18
38740: PUSH
38741: LD_INT 11
38743: PUSH
38744: LD_INT 30
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_VAR 0 12
38755: ARRAY
38756: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38757: LD_VAR 0 18
38761: NOT
38762: PUSH
38763: LD_INT 40
38765: PPUSH
38766: LD_VAR 0 16
38770: PPUSH
38771: CALL_OW 321
38775: PUSH
38776: LD_INT 2
38778: EQUAL
38779: AND
38780: PUSH
38781: LD_INT 7
38783: PUSH
38784: LD_VAR 0 5
38788: IN
38789: PUSH
38790: LD_INT 28
38792: PUSH
38793: LD_VAR 0 5
38797: IN
38798: OR
38799: PUSH
38800: LD_INT 45
38802: PUSH
38803: LD_VAR 0 5
38807: IN
38808: OR
38809: AND
38810: IFFALSE 39064
// begin hex := GetHexInfo ( x , y ) ;
38812: LD_ADDR_VAR 0 4
38816: PUSH
38817: LD_VAR 0 10
38821: PPUSH
38822: LD_VAR 0 11
38826: PPUSH
38827: CALL_OW 546
38831: ST_TO_ADDR
// if hex [ 1 ] then
38832: LD_VAR 0 4
38836: PUSH
38837: LD_INT 1
38839: ARRAY
38840: IFFALSE 38844
// exit ;
38842: GO 39247
// height := hex [ 2 ] ;
38844: LD_ADDR_VAR 0 15
38848: PUSH
38849: LD_VAR 0 4
38853: PUSH
38854: LD_INT 2
38856: ARRAY
38857: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38858: LD_ADDR_VAR 0 14
38862: PUSH
38863: LD_INT 0
38865: PUSH
38866: LD_INT 2
38868: PUSH
38869: LD_INT 3
38871: PUSH
38872: LD_INT 5
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: ST_TO_ADDR
// for i in tmp do
38881: LD_ADDR_VAR 0 8
38885: PUSH
38886: LD_VAR 0 14
38890: PUSH
38891: FOR_IN
38892: IFFALSE 39062
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38894: LD_ADDR_VAR 0 9
38898: PUSH
38899: LD_VAR 0 10
38903: PPUSH
38904: LD_VAR 0 8
38908: PPUSH
38909: LD_INT 5
38911: PPUSH
38912: CALL_OW 272
38916: PUSH
38917: LD_VAR 0 11
38921: PPUSH
38922: LD_VAR 0 8
38926: PPUSH
38927: LD_INT 5
38929: PPUSH
38930: CALL_OW 273
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38939: LD_VAR 0 9
38943: PUSH
38944: LD_INT 1
38946: ARRAY
38947: PPUSH
38948: LD_VAR 0 9
38952: PUSH
38953: LD_INT 2
38955: ARRAY
38956: PPUSH
38957: CALL_OW 488
38961: IFFALSE 39060
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38963: LD_ADDR_VAR 0 4
38967: PUSH
38968: LD_VAR 0 9
38972: PUSH
38973: LD_INT 1
38975: ARRAY
38976: PPUSH
38977: LD_VAR 0 9
38981: PUSH
38982: LD_INT 2
38984: ARRAY
38985: PPUSH
38986: CALL_OW 546
38990: ST_TO_ADDR
// if hex [ 1 ] then
38991: LD_VAR 0 4
38995: PUSH
38996: LD_INT 1
38998: ARRAY
38999: IFFALSE 39003
// continue ;
39001: GO 38891
// h := hex [ 2 ] ;
39003: LD_ADDR_VAR 0 13
39007: PUSH
39008: LD_VAR 0 4
39012: PUSH
39013: LD_INT 2
39015: ARRAY
39016: ST_TO_ADDR
// if h + 7 < height then
39017: LD_VAR 0 13
39021: PUSH
39022: LD_INT 7
39024: PLUS
39025: PUSH
39026: LD_VAR 0 15
39030: LESS
39031: IFFALSE 39060
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39033: LD_ADDR_VAR 0 18
39037: PUSH
39038: LD_INT 7
39040: PUSH
39041: LD_INT 28
39043: PUSH
39044: LD_INT 45
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: LIST
39051: PUSH
39052: LD_VAR 0 12
39056: ARRAY
39057: ST_TO_ADDR
// break ;
39058: GO 39062
// end ; end ; end ;
39060: GO 38891
39062: POP
39063: POP
// end ; if not weapon then
39064: LD_VAR 0 18
39068: NOT
39069: IFFALSE 39129
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39071: LD_ADDR_VAR 0 5
39075: PUSH
39076: LD_VAR 0 5
39080: PUSH
39081: LD_INT 11
39083: PUSH
39084: LD_INT 30
39086: PUSH
39087: LD_INT 49
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: LIST
39094: DIFF
39095: ST_TO_ADDR
// if not list then
39096: LD_VAR 0 5
39100: NOT
39101: IFFALSE 39105
// exit ;
39103: GO 39247
// weapon := list [ rand ( 1 , list ) ] ;
39105: LD_ADDR_VAR 0 18
39109: PUSH
39110: LD_VAR 0 5
39114: PUSH
39115: LD_INT 1
39117: PPUSH
39118: LD_VAR 0 5
39122: PPUSH
39123: CALL_OW 12
39127: ARRAY
39128: ST_TO_ADDR
// end ; if weapon then
39129: LD_VAR 0 18
39133: IFFALSE 39247
// begin tmp := CostOfWeapon ( weapon ) ;
39135: LD_ADDR_VAR 0 14
39139: PUSH
39140: LD_VAR 0 18
39144: PPUSH
39145: CALL_OW 451
39149: ST_TO_ADDR
// j := GetBase ( tower ) ;
39150: LD_ADDR_VAR 0 9
39154: PUSH
39155: LD_VAR 0 1
39159: PPUSH
39160: CALL_OW 274
39164: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39165: LD_VAR 0 9
39169: PPUSH
39170: LD_INT 1
39172: PPUSH
39173: CALL_OW 275
39177: PUSH
39178: LD_VAR 0 14
39182: PUSH
39183: LD_INT 1
39185: ARRAY
39186: GREATEREQUAL
39187: PUSH
39188: LD_VAR 0 9
39192: PPUSH
39193: LD_INT 2
39195: PPUSH
39196: CALL_OW 275
39200: PUSH
39201: LD_VAR 0 14
39205: PUSH
39206: LD_INT 2
39208: ARRAY
39209: GREATEREQUAL
39210: AND
39211: PUSH
39212: LD_VAR 0 9
39216: PPUSH
39217: LD_INT 3
39219: PPUSH
39220: CALL_OW 275
39224: PUSH
39225: LD_VAR 0 14
39229: PUSH
39230: LD_INT 3
39232: ARRAY
39233: GREATEREQUAL
39234: AND
39235: IFFALSE 39247
// result := weapon ;
39237: LD_ADDR_VAR 0 3
39241: PUSH
39242: LD_VAR 0 18
39246: ST_TO_ADDR
// end ; end ;
39247: LD_VAR 0 3
39251: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39252: LD_INT 0
39254: PPUSH
39255: PPUSH
// result := true ;
39256: LD_ADDR_VAR 0 3
39260: PUSH
39261: LD_INT 1
39263: ST_TO_ADDR
// if array1 = array2 then
39264: LD_VAR 0 1
39268: PUSH
39269: LD_VAR 0 2
39273: EQUAL
39274: IFFALSE 39334
// begin for i = 1 to array1 do
39276: LD_ADDR_VAR 0 4
39280: PUSH
39281: DOUBLE
39282: LD_INT 1
39284: DEC
39285: ST_TO_ADDR
39286: LD_VAR 0 1
39290: PUSH
39291: FOR_TO
39292: IFFALSE 39330
// if array1 [ i ] <> array2 [ i ] then
39294: LD_VAR 0 1
39298: PUSH
39299: LD_VAR 0 4
39303: ARRAY
39304: PUSH
39305: LD_VAR 0 2
39309: PUSH
39310: LD_VAR 0 4
39314: ARRAY
39315: NONEQUAL
39316: IFFALSE 39328
// begin result := false ;
39318: LD_ADDR_VAR 0 3
39322: PUSH
39323: LD_INT 0
39325: ST_TO_ADDR
// break ;
39326: GO 39330
// end ;
39328: GO 39291
39330: POP
39331: POP
// end else
39332: GO 39342
// result := false ;
39334: LD_ADDR_VAR 0 3
39338: PUSH
39339: LD_INT 0
39341: ST_TO_ADDR
// end ;
39342: LD_VAR 0 3
39346: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39347: LD_INT 0
39349: PPUSH
39350: PPUSH
39351: PPUSH
// pom := GetBase ( fac ) ;
39352: LD_ADDR_VAR 0 5
39356: PUSH
39357: LD_VAR 0 1
39361: PPUSH
39362: CALL_OW 274
39366: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39367: LD_ADDR_VAR 0 4
39371: PUSH
39372: LD_VAR 0 2
39376: PUSH
39377: LD_INT 1
39379: ARRAY
39380: PPUSH
39381: LD_VAR 0 2
39385: PUSH
39386: LD_INT 2
39388: ARRAY
39389: PPUSH
39390: LD_VAR 0 2
39394: PUSH
39395: LD_INT 3
39397: ARRAY
39398: PPUSH
39399: LD_VAR 0 2
39403: PUSH
39404: LD_INT 4
39406: ARRAY
39407: PPUSH
39408: CALL_OW 449
39412: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39413: LD_ADDR_VAR 0 3
39417: PUSH
39418: LD_VAR 0 5
39422: PPUSH
39423: LD_INT 1
39425: PPUSH
39426: CALL_OW 275
39430: PUSH
39431: LD_VAR 0 4
39435: PUSH
39436: LD_INT 1
39438: ARRAY
39439: GREATEREQUAL
39440: PUSH
39441: LD_VAR 0 5
39445: PPUSH
39446: LD_INT 2
39448: PPUSH
39449: CALL_OW 275
39453: PUSH
39454: LD_VAR 0 4
39458: PUSH
39459: LD_INT 2
39461: ARRAY
39462: GREATEREQUAL
39463: AND
39464: PUSH
39465: LD_VAR 0 5
39469: PPUSH
39470: LD_INT 3
39472: PPUSH
39473: CALL_OW 275
39477: PUSH
39478: LD_VAR 0 4
39482: PUSH
39483: LD_INT 3
39485: ARRAY
39486: GREATEREQUAL
39487: AND
39488: ST_TO_ADDR
// end ;
39489: LD_VAR 0 3
39493: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39494: LD_INT 0
39496: PPUSH
39497: PPUSH
39498: PPUSH
39499: PPUSH
// pom := GetBase ( building ) ;
39500: LD_ADDR_VAR 0 3
39504: PUSH
39505: LD_VAR 0 1
39509: PPUSH
39510: CALL_OW 274
39514: ST_TO_ADDR
// if not pom then
39515: LD_VAR 0 3
39519: NOT
39520: IFFALSE 39524
// exit ;
39522: GO 39694
// btype := GetBType ( building ) ;
39524: LD_ADDR_VAR 0 5
39528: PUSH
39529: LD_VAR 0 1
39533: PPUSH
39534: CALL_OW 266
39538: ST_TO_ADDR
// if btype = b_armoury then
39539: LD_VAR 0 5
39543: PUSH
39544: LD_INT 4
39546: EQUAL
39547: IFFALSE 39557
// btype := b_barracks ;
39549: LD_ADDR_VAR 0 5
39553: PUSH
39554: LD_INT 5
39556: ST_TO_ADDR
// if btype = b_depot then
39557: LD_VAR 0 5
39561: PUSH
39562: LD_INT 0
39564: EQUAL
39565: IFFALSE 39575
// btype := b_warehouse ;
39567: LD_ADDR_VAR 0 5
39571: PUSH
39572: LD_INT 1
39574: ST_TO_ADDR
// if btype = b_workshop then
39575: LD_VAR 0 5
39579: PUSH
39580: LD_INT 2
39582: EQUAL
39583: IFFALSE 39593
// btype := b_factory ;
39585: LD_ADDR_VAR 0 5
39589: PUSH
39590: LD_INT 3
39592: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39593: LD_ADDR_VAR 0 4
39597: PUSH
39598: LD_VAR 0 5
39602: PPUSH
39603: LD_VAR 0 1
39607: PPUSH
39608: CALL_OW 248
39612: PPUSH
39613: CALL_OW 450
39617: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39618: LD_ADDR_VAR 0 2
39622: PUSH
39623: LD_VAR 0 3
39627: PPUSH
39628: LD_INT 1
39630: PPUSH
39631: CALL_OW 275
39635: PUSH
39636: LD_VAR 0 4
39640: PUSH
39641: LD_INT 1
39643: ARRAY
39644: GREATEREQUAL
39645: PUSH
39646: LD_VAR 0 3
39650: PPUSH
39651: LD_INT 2
39653: PPUSH
39654: CALL_OW 275
39658: PUSH
39659: LD_VAR 0 4
39663: PUSH
39664: LD_INT 2
39666: ARRAY
39667: GREATEREQUAL
39668: AND
39669: PUSH
39670: LD_VAR 0 3
39674: PPUSH
39675: LD_INT 3
39677: PPUSH
39678: CALL_OW 275
39682: PUSH
39683: LD_VAR 0 4
39687: PUSH
39688: LD_INT 3
39690: ARRAY
39691: GREATEREQUAL
39692: AND
39693: ST_TO_ADDR
// end ;
39694: LD_VAR 0 2
39698: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39699: LD_INT 0
39701: PPUSH
39702: PPUSH
39703: PPUSH
// pom := GetBase ( building ) ;
39704: LD_ADDR_VAR 0 4
39708: PUSH
39709: LD_VAR 0 1
39713: PPUSH
39714: CALL_OW 274
39718: ST_TO_ADDR
// if not pom then
39719: LD_VAR 0 4
39723: NOT
39724: IFFALSE 39728
// exit ;
39726: GO 39829
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39728: LD_ADDR_VAR 0 5
39732: PUSH
39733: LD_VAR 0 2
39737: PPUSH
39738: LD_VAR 0 1
39742: PPUSH
39743: CALL_OW 248
39747: PPUSH
39748: CALL_OW 450
39752: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39753: LD_ADDR_VAR 0 3
39757: PUSH
39758: LD_VAR 0 4
39762: PPUSH
39763: LD_INT 1
39765: PPUSH
39766: CALL_OW 275
39770: PUSH
39771: LD_VAR 0 5
39775: PUSH
39776: LD_INT 1
39778: ARRAY
39779: GREATEREQUAL
39780: PUSH
39781: LD_VAR 0 4
39785: PPUSH
39786: LD_INT 2
39788: PPUSH
39789: CALL_OW 275
39793: PUSH
39794: LD_VAR 0 5
39798: PUSH
39799: LD_INT 2
39801: ARRAY
39802: GREATEREQUAL
39803: AND
39804: PUSH
39805: LD_VAR 0 4
39809: PPUSH
39810: LD_INT 3
39812: PPUSH
39813: CALL_OW 275
39817: PUSH
39818: LD_VAR 0 5
39822: PUSH
39823: LD_INT 3
39825: ARRAY
39826: GREATEREQUAL
39827: AND
39828: ST_TO_ADDR
// end ;
39829: LD_VAR 0 3
39833: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
39834: LD_INT 0
39836: PPUSH
39837: PPUSH
39838: PPUSH
39839: PPUSH
39840: PPUSH
39841: PPUSH
39842: PPUSH
39843: PPUSH
39844: PPUSH
39845: PPUSH
// result := false ;
39846: LD_ADDR_VAR 0 6
39850: PUSH
39851: LD_INT 0
39853: ST_TO_ADDR
// if not base or not btype or not x or not y then
39854: LD_VAR 0 1
39858: NOT
39859: PUSH
39860: LD_VAR 0 2
39864: NOT
39865: OR
39866: PUSH
39867: LD_VAR 0 3
39871: NOT
39872: OR
39873: PUSH
39874: LD_VAR 0 4
39878: NOT
39879: OR
39880: IFFALSE 39884
// exit ;
39882: GO 40493
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
39884: LD_ADDR_VAR 0 12
39888: PUSH
39889: LD_VAR 0 2
39893: PPUSH
39894: LD_VAR 0 3
39898: PPUSH
39899: LD_VAR 0 4
39903: PPUSH
39904: LD_VAR 0 5
39908: PPUSH
39909: LD_VAR 0 1
39913: PUSH
39914: LD_INT 1
39916: ARRAY
39917: PPUSH
39918: CALL_OW 248
39922: PPUSH
39923: LD_INT 0
39925: PPUSH
39926: CALL 41330 0 6
39930: ST_TO_ADDR
// if not hexes then
39931: LD_VAR 0 12
39935: NOT
39936: IFFALSE 39940
// exit ;
39938: GO 40493
// for i = 1 to hexes do
39940: LD_ADDR_VAR 0 7
39944: PUSH
39945: DOUBLE
39946: LD_INT 1
39948: DEC
39949: ST_TO_ADDR
39950: LD_VAR 0 12
39954: PUSH
39955: FOR_TO
39956: IFFALSE 40491
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39958: LD_ADDR_VAR 0 11
39962: PUSH
39963: LD_VAR 0 12
39967: PUSH
39968: LD_VAR 0 7
39972: ARRAY
39973: PUSH
39974: LD_INT 1
39976: ARRAY
39977: PPUSH
39978: LD_VAR 0 12
39982: PUSH
39983: LD_VAR 0 7
39987: ARRAY
39988: PUSH
39989: LD_INT 2
39991: ARRAY
39992: PPUSH
39993: CALL_OW 428
39997: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39998: LD_VAR 0 12
40002: PUSH
40003: LD_VAR 0 7
40007: ARRAY
40008: PUSH
40009: LD_INT 1
40011: ARRAY
40012: PPUSH
40013: LD_VAR 0 12
40017: PUSH
40018: LD_VAR 0 7
40022: ARRAY
40023: PUSH
40024: LD_INT 2
40026: ARRAY
40027: PPUSH
40028: CALL_OW 351
40032: PUSH
40033: LD_VAR 0 12
40037: PUSH
40038: LD_VAR 0 7
40042: ARRAY
40043: PUSH
40044: LD_INT 1
40046: ARRAY
40047: PPUSH
40048: LD_VAR 0 12
40052: PUSH
40053: LD_VAR 0 7
40057: ARRAY
40058: PUSH
40059: LD_INT 2
40061: ARRAY
40062: PPUSH
40063: CALL_OW 488
40067: NOT
40068: OR
40069: PUSH
40070: LD_VAR 0 11
40074: PPUSH
40075: CALL_OW 247
40079: PUSH
40080: LD_INT 3
40082: EQUAL
40083: OR
40084: IFFALSE 40090
// exit ;
40086: POP
40087: POP
40088: GO 40493
// if not tmp or not tmp in base then
40090: LD_VAR 0 11
40094: NOT
40095: PUSH
40096: LD_VAR 0 11
40100: PUSH
40101: LD_VAR 0 1
40105: IN
40106: NOT
40107: OR
40108: IFFALSE 40112
// continue ;
40110: GO 39955
// result := true ;
40112: LD_ADDR_VAR 0 6
40116: PUSH
40117: LD_INT 1
40119: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40120: LD_ADDR_VAR 0 15
40124: PUSH
40125: LD_VAR 0 1
40129: PPUSH
40130: LD_INT 22
40132: PUSH
40133: LD_VAR 0 11
40137: PPUSH
40138: CALL_OW 255
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 2
40149: PUSH
40150: LD_INT 30
40152: PUSH
40153: LD_INT 0
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 30
40162: PUSH
40163: LD_INT 1
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: LIST
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PPUSH
40179: CALL_OW 72
40183: ST_TO_ADDR
// if dep then
40184: LD_VAR 0 15
40188: IFFALSE 40324
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40190: LD_ADDR_VAR 0 14
40194: PUSH
40195: LD_VAR 0 15
40199: PUSH
40200: LD_INT 1
40202: ARRAY
40203: PPUSH
40204: CALL_OW 250
40208: PPUSH
40209: LD_VAR 0 15
40213: PUSH
40214: LD_INT 1
40216: ARRAY
40217: PPUSH
40218: CALL_OW 254
40222: PPUSH
40223: LD_INT 5
40225: PPUSH
40226: CALL_OW 272
40230: PUSH
40231: LD_VAR 0 15
40235: PUSH
40236: LD_INT 1
40238: ARRAY
40239: PPUSH
40240: CALL_OW 251
40244: PPUSH
40245: LD_VAR 0 15
40249: PUSH
40250: LD_INT 1
40252: ARRAY
40253: PPUSH
40254: CALL_OW 254
40258: PPUSH
40259: LD_INT 5
40261: PPUSH
40262: CALL_OW 273
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40271: LD_VAR 0 14
40275: PUSH
40276: LD_INT 1
40278: ARRAY
40279: PPUSH
40280: LD_VAR 0 14
40284: PUSH
40285: LD_INT 2
40287: ARRAY
40288: PPUSH
40289: CALL_OW 488
40293: IFFALSE 40324
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40295: LD_VAR 0 11
40299: PPUSH
40300: LD_VAR 0 14
40304: PUSH
40305: LD_INT 1
40307: ARRAY
40308: PPUSH
40309: LD_VAR 0 14
40313: PUSH
40314: LD_INT 2
40316: ARRAY
40317: PPUSH
40318: CALL_OW 111
// continue ;
40322: GO 39955
// end ; end ; r := GetDir ( tmp ) ;
40324: LD_ADDR_VAR 0 13
40328: PUSH
40329: LD_VAR 0 11
40333: PPUSH
40334: CALL_OW 254
40338: ST_TO_ADDR
// if r = 5 then
40339: LD_VAR 0 13
40343: PUSH
40344: LD_INT 5
40346: EQUAL
40347: IFFALSE 40357
// r := 0 ;
40349: LD_ADDR_VAR 0 13
40353: PUSH
40354: LD_INT 0
40356: ST_TO_ADDR
// for j = r to 5 do
40357: LD_ADDR_VAR 0 8
40361: PUSH
40362: DOUBLE
40363: LD_VAR 0 13
40367: DEC
40368: ST_TO_ADDR
40369: LD_INT 5
40371: PUSH
40372: FOR_TO
40373: IFFALSE 40487
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40375: LD_ADDR_VAR 0 9
40379: PUSH
40380: LD_VAR 0 11
40384: PPUSH
40385: CALL_OW 250
40389: PPUSH
40390: LD_VAR 0 8
40394: PPUSH
40395: LD_INT 2
40397: PPUSH
40398: CALL_OW 272
40402: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40403: LD_ADDR_VAR 0 10
40407: PUSH
40408: LD_VAR 0 11
40412: PPUSH
40413: CALL_OW 251
40417: PPUSH
40418: LD_VAR 0 8
40422: PPUSH
40423: LD_INT 2
40425: PPUSH
40426: CALL_OW 273
40430: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40431: LD_VAR 0 9
40435: PPUSH
40436: LD_VAR 0 10
40440: PPUSH
40441: CALL_OW 488
40445: PUSH
40446: LD_VAR 0 9
40450: PPUSH
40451: LD_VAR 0 10
40455: PPUSH
40456: CALL_OW 428
40460: NOT
40461: AND
40462: IFFALSE 40485
// begin ComMoveXY ( tmp , _x , _y ) ;
40464: LD_VAR 0 11
40468: PPUSH
40469: LD_VAR 0 9
40473: PPUSH
40474: LD_VAR 0 10
40478: PPUSH
40479: CALL_OW 111
// break ;
40483: GO 40487
// end ; end ;
40485: GO 40372
40487: POP
40488: POP
// end ;
40489: GO 39955
40491: POP
40492: POP
// end ;
40493: LD_VAR 0 6
40497: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
40498: LD_INT 0
40500: PPUSH
40501: PPUSH
40502: PPUSH
40503: PPUSH
40504: PPUSH
40505: PPUSH
40506: PPUSH
40507: PPUSH
40508: PPUSH
40509: PPUSH
// result := false ;
40510: LD_ADDR_VAR 0 6
40514: PUSH
40515: LD_INT 0
40517: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40518: LD_VAR 0 1
40522: NOT
40523: PUSH
40524: LD_VAR 0 1
40528: PPUSH
40529: CALL_OW 266
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: LD_INT 1
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: IN
40544: NOT
40545: OR
40546: PUSH
40547: LD_VAR 0 2
40551: NOT
40552: OR
40553: PUSH
40554: LD_VAR 0 5
40558: PUSH
40559: LD_INT 0
40561: PUSH
40562: LD_INT 1
40564: PUSH
40565: LD_INT 2
40567: PUSH
40568: LD_INT 3
40570: PUSH
40571: LD_INT 4
40573: PUSH
40574: LD_INT 5
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: IN
40585: NOT
40586: OR
40587: PUSH
40588: LD_VAR 0 3
40592: PPUSH
40593: LD_VAR 0 4
40597: PPUSH
40598: CALL_OW 488
40602: NOT
40603: OR
40604: IFFALSE 40608
// exit ;
40606: GO 41325
// pom := GetBase ( depot ) ;
40608: LD_ADDR_VAR 0 10
40612: PUSH
40613: LD_VAR 0 1
40617: PPUSH
40618: CALL_OW 274
40622: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40623: LD_ADDR_VAR 0 11
40627: PUSH
40628: LD_VAR 0 2
40632: PPUSH
40633: LD_VAR 0 1
40637: PPUSH
40638: CALL_OW 248
40642: PPUSH
40643: CALL_OW 450
40647: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40648: LD_VAR 0 10
40652: PPUSH
40653: LD_INT 1
40655: PPUSH
40656: CALL_OW 275
40660: PUSH
40661: LD_VAR 0 11
40665: PUSH
40666: LD_INT 1
40668: ARRAY
40669: GREATEREQUAL
40670: PUSH
40671: LD_VAR 0 10
40675: PPUSH
40676: LD_INT 2
40678: PPUSH
40679: CALL_OW 275
40683: PUSH
40684: LD_VAR 0 11
40688: PUSH
40689: LD_INT 2
40691: ARRAY
40692: GREATEREQUAL
40693: AND
40694: PUSH
40695: LD_VAR 0 10
40699: PPUSH
40700: LD_INT 3
40702: PPUSH
40703: CALL_OW 275
40707: PUSH
40708: LD_VAR 0 11
40712: PUSH
40713: LD_INT 3
40715: ARRAY
40716: GREATEREQUAL
40717: AND
40718: NOT
40719: IFFALSE 40723
// exit ;
40721: GO 41325
// if GetBType ( depot ) = b_depot then
40723: LD_VAR 0 1
40727: PPUSH
40728: CALL_OW 266
40732: PUSH
40733: LD_INT 0
40735: EQUAL
40736: IFFALSE 40748
// dist := 28 else
40738: LD_ADDR_VAR 0 14
40742: PUSH
40743: LD_INT 28
40745: ST_TO_ADDR
40746: GO 40756
// dist := 36 ;
40748: LD_ADDR_VAR 0 14
40752: PUSH
40753: LD_INT 36
40755: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40756: LD_VAR 0 1
40760: PPUSH
40761: LD_VAR 0 3
40765: PPUSH
40766: LD_VAR 0 4
40770: PPUSH
40771: CALL_OW 297
40775: PUSH
40776: LD_VAR 0 14
40780: GREATER
40781: IFFALSE 40785
// exit ;
40783: GO 41325
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40785: LD_ADDR_VAR 0 12
40789: PUSH
40790: LD_VAR 0 2
40794: PPUSH
40795: LD_VAR 0 3
40799: PPUSH
40800: LD_VAR 0 4
40804: PPUSH
40805: LD_VAR 0 5
40809: PPUSH
40810: LD_VAR 0 1
40814: PPUSH
40815: CALL_OW 248
40819: PPUSH
40820: LD_INT 0
40822: PPUSH
40823: CALL 41330 0 6
40827: ST_TO_ADDR
// if not hexes then
40828: LD_VAR 0 12
40832: NOT
40833: IFFALSE 40837
// exit ;
40835: GO 41325
// hex := GetHexInfo ( x , y ) ;
40837: LD_ADDR_VAR 0 15
40841: PUSH
40842: LD_VAR 0 3
40846: PPUSH
40847: LD_VAR 0 4
40851: PPUSH
40852: CALL_OW 546
40856: ST_TO_ADDR
// if hex [ 1 ] then
40857: LD_VAR 0 15
40861: PUSH
40862: LD_INT 1
40864: ARRAY
40865: IFFALSE 40869
// exit ;
40867: GO 41325
// height := hex [ 2 ] ;
40869: LD_ADDR_VAR 0 13
40873: PUSH
40874: LD_VAR 0 15
40878: PUSH
40879: LD_INT 2
40881: ARRAY
40882: ST_TO_ADDR
// for i = 1 to hexes do
40883: LD_ADDR_VAR 0 7
40887: PUSH
40888: DOUBLE
40889: LD_INT 1
40891: DEC
40892: ST_TO_ADDR
40893: LD_VAR 0 12
40897: PUSH
40898: FOR_TO
40899: IFFALSE 41229
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40901: LD_VAR 0 12
40905: PUSH
40906: LD_VAR 0 7
40910: ARRAY
40911: PUSH
40912: LD_INT 1
40914: ARRAY
40915: PPUSH
40916: LD_VAR 0 12
40920: PUSH
40921: LD_VAR 0 7
40925: ARRAY
40926: PUSH
40927: LD_INT 2
40929: ARRAY
40930: PPUSH
40931: CALL_OW 488
40935: NOT
40936: PUSH
40937: LD_VAR 0 12
40941: PUSH
40942: LD_VAR 0 7
40946: ARRAY
40947: PUSH
40948: LD_INT 1
40950: ARRAY
40951: PPUSH
40952: LD_VAR 0 12
40956: PUSH
40957: LD_VAR 0 7
40961: ARRAY
40962: PUSH
40963: LD_INT 2
40965: ARRAY
40966: PPUSH
40967: CALL_OW 428
40971: PUSH
40972: LD_INT 0
40974: GREATER
40975: OR
40976: PUSH
40977: LD_VAR 0 12
40981: PUSH
40982: LD_VAR 0 7
40986: ARRAY
40987: PUSH
40988: LD_INT 1
40990: ARRAY
40991: PPUSH
40992: LD_VAR 0 12
40996: PUSH
40997: LD_VAR 0 7
41001: ARRAY
41002: PUSH
41003: LD_INT 2
41005: ARRAY
41006: PPUSH
41007: CALL_OW 351
41011: OR
41012: IFFALSE 41018
// exit ;
41014: POP
41015: POP
41016: GO 41325
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41018: LD_ADDR_VAR 0 8
41022: PUSH
41023: LD_VAR 0 12
41027: PUSH
41028: LD_VAR 0 7
41032: ARRAY
41033: PUSH
41034: LD_INT 1
41036: ARRAY
41037: PPUSH
41038: LD_VAR 0 12
41042: PUSH
41043: LD_VAR 0 7
41047: ARRAY
41048: PUSH
41049: LD_INT 2
41051: ARRAY
41052: PPUSH
41053: CALL_OW 546
41057: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41058: LD_VAR 0 8
41062: PUSH
41063: LD_INT 1
41065: ARRAY
41066: PUSH
41067: LD_VAR 0 8
41071: PUSH
41072: LD_INT 2
41074: ARRAY
41075: PUSH
41076: LD_VAR 0 13
41080: PUSH
41081: LD_INT 2
41083: PLUS
41084: GREATER
41085: OR
41086: PUSH
41087: LD_VAR 0 8
41091: PUSH
41092: LD_INT 2
41094: ARRAY
41095: PUSH
41096: LD_VAR 0 13
41100: PUSH
41101: LD_INT 2
41103: MINUS
41104: LESS
41105: OR
41106: PUSH
41107: LD_VAR 0 8
41111: PUSH
41112: LD_INT 3
41114: ARRAY
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: LD_INT 8
41121: PUSH
41122: LD_INT 9
41124: PUSH
41125: LD_INT 10
41127: PUSH
41128: LD_INT 11
41130: PUSH
41131: LD_INT 12
41133: PUSH
41134: LD_INT 13
41136: PUSH
41137: LD_INT 16
41139: PUSH
41140: LD_INT 17
41142: PUSH
41143: LD_INT 18
41145: PUSH
41146: LD_INT 19
41148: PUSH
41149: LD_INT 20
41151: PUSH
41152: LD_INT 21
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: IN
41170: NOT
41171: OR
41172: PUSH
41173: LD_VAR 0 8
41177: PUSH
41178: LD_INT 5
41180: ARRAY
41181: NOT
41182: OR
41183: PUSH
41184: LD_VAR 0 8
41188: PUSH
41189: LD_INT 6
41191: ARRAY
41192: PUSH
41193: LD_INT 1
41195: PUSH
41196: LD_INT 2
41198: PUSH
41199: LD_INT 7
41201: PUSH
41202: LD_INT 9
41204: PUSH
41205: LD_INT 10
41207: PUSH
41208: LD_INT 11
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: IN
41219: NOT
41220: OR
41221: IFFALSE 41227
// exit ;
41223: POP
41224: POP
41225: GO 41325
// end ;
41227: GO 40898
41229: POP
41230: POP
// side := GetSide ( depot ) ;
41231: LD_ADDR_VAR 0 9
41235: PUSH
41236: LD_VAR 0 1
41240: PPUSH
41241: CALL_OW 255
41245: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41246: LD_VAR 0 9
41250: PPUSH
41251: LD_VAR 0 3
41255: PPUSH
41256: LD_VAR 0 4
41260: PPUSH
41261: LD_INT 20
41263: PPUSH
41264: CALL 33979 0 4
41268: PUSH
41269: LD_INT 4
41271: ARRAY
41272: IFFALSE 41276
// exit ;
41274: GO 41325
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41276: LD_VAR 0 2
41280: PUSH
41281: LD_INT 29
41283: PUSH
41284: LD_INT 30
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: IN
41291: PUSH
41292: LD_VAR 0 3
41296: PPUSH
41297: LD_VAR 0 4
41301: PPUSH
41302: LD_VAR 0 9
41306: PPUSH
41307: CALL_OW 440
41311: NOT
41312: AND
41313: IFFALSE 41317
// exit ;
41315: GO 41325
// result := true ;
41317: LD_ADDR_VAR 0 6
41321: PUSH
41322: LD_INT 1
41324: ST_TO_ADDR
// end ;
41325: LD_VAR 0 6
41329: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
41330: LD_INT 0
41332: PPUSH
41333: PPUSH
41334: PPUSH
41335: PPUSH
41336: PPUSH
41337: PPUSH
41338: PPUSH
41339: PPUSH
41340: PPUSH
41341: PPUSH
41342: PPUSH
41343: PPUSH
41344: PPUSH
41345: PPUSH
41346: PPUSH
41347: PPUSH
41348: PPUSH
41349: PPUSH
41350: PPUSH
41351: PPUSH
41352: PPUSH
41353: PPUSH
41354: PPUSH
41355: PPUSH
41356: PPUSH
41357: PPUSH
41358: PPUSH
41359: PPUSH
41360: PPUSH
41361: PPUSH
41362: PPUSH
41363: PPUSH
41364: PPUSH
41365: PPUSH
41366: PPUSH
41367: PPUSH
41368: PPUSH
41369: PPUSH
41370: PPUSH
41371: PPUSH
41372: PPUSH
41373: PPUSH
41374: PPUSH
41375: PPUSH
41376: PPUSH
41377: PPUSH
41378: PPUSH
41379: PPUSH
41380: PPUSH
41381: PPUSH
41382: PPUSH
41383: PPUSH
41384: PPUSH
41385: PPUSH
41386: PPUSH
41387: PPUSH
41388: PPUSH
41389: PPUSH
// result = [ ] ;
41390: LD_ADDR_VAR 0 7
41394: PUSH
41395: EMPTY
41396: ST_TO_ADDR
// temp_list = [ ] ;
41397: LD_ADDR_VAR 0 9
41401: PUSH
41402: EMPTY
41403: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41404: LD_VAR 0 4
41408: PUSH
41409: LD_INT 0
41411: PUSH
41412: LD_INT 1
41414: PUSH
41415: LD_INT 2
41417: PUSH
41418: LD_INT 3
41420: PUSH
41421: LD_INT 4
41423: PUSH
41424: LD_INT 5
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: IN
41435: NOT
41436: PUSH
41437: LD_VAR 0 1
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: LD_INT 1
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: IN
41452: PUSH
41453: LD_VAR 0 5
41457: PUSH
41458: LD_INT 1
41460: PUSH
41461: LD_INT 2
41463: PUSH
41464: LD_INT 3
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: LIST
41471: IN
41472: NOT
41473: AND
41474: OR
41475: IFFALSE 41479
// exit ;
41477: GO 59870
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41479: LD_VAR 0 1
41483: PUSH
41484: LD_INT 6
41486: PUSH
41487: LD_INT 7
41489: PUSH
41490: LD_INT 8
41492: PUSH
41493: LD_INT 13
41495: PUSH
41496: LD_INT 12
41498: PUSH
41499: LD_INT 15
41501: PUSH
41502: LD_INT 11
41504: PUSH
41505: LD_INT 14
41507: PUSH
41508: LD_INT 10
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: IN
41522: IFFALSE 41532
// btype = b_lab ;
41524: LD_ADDR_VAR 0 1
41528: PUSH
41529: LD_INT 6
41531: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41532: LD_VAR 0 6
41536: PUSH
41537: LD_INT 0
41539: PUSH
41540: LD_INT 1
41542: PUSH
41543: LD_INT 2
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: LIST
41550: IN
41551: NOT
41552: PUSH
41553: LD_VAR 0 1
41557: PUSH
41558: LD_INT 0
41560: PUSH
41561: LD_INT 1
41563: PUSH
41564: LD_INT 2
41566: PUSH
41567: LD_INT 3
41569: PUSH
41570: LD_INT 6
41572: PUSH
41573: LD_INT 36
41575: PUSH
41576: LD_INT 4
41578: PUSH
41579: LD_INT 5
41581: PUSH
41582: LD_INT 31
41584: PUSH
41585: LD_INT 32
41587: PUSH
41588: LD_INT 33
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: IN
41604: NOT
41605: PUSH
41606: LD_VAR 0 6
41610: PUSH
41611: LD_INT 1
41613: EQUAL
41614: AND
41615: OR
41616: PUSH
41617: LD_VAR 0 1
41621: PUSH
41622: LD_INT 2
41624: PUSH
41625: LD_INT 3
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: IN
41632: NOT
41633: PUSH
41634: LD_VAR 0 6
41638: PUSH
41639: LD_INT 2
41641: EQUAL
41642: AND
41643: OR
41644: IFFALSE 41654
// mode = 0 ;
41646: LD_ADDR_VAR 0 6
41650: PUSH
41651: LD_INT 0
41653: ST_TO_ADDR
// case mode of 0 :
41654: LD_VAR 0 6
41658: PUSH
41659: LD_INT 0
41661: DOUBLE
41662: EQUAL
41663: IFTRUE 41667
41665: GO 53120
41667: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41668: LD_ADDR_VAR 0 11
41672: PUSH
41673: LD_INT 0
41675: PUSH
41676: LD_INT 0
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: LD_INT 1
41688: NEG
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: LD_INT 0
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 0
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: NEG
41727: PUSH
41728: LD_INT 0
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 1
41737: NEG
41738: PUSH
41739: LD_INT 1
41741: NEG
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 1
41749: NEG
41750: PUSH
41751: LD_INT 2
41753: NEG
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 0
41761: PUSH
41762: LD_INT 2
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 1
41772: PUSH
41773: LD_INT 1
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 1
41783: PUSH
41784: LD_INT 2
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 0
41793: PUSH
41794: LD_INT 2
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 1
41803: NEG
41804: PUSH
41805: LD_INT 1
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 1
41814: PUSH
41815: LD_INT 3
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 0
41824: PUSH
41825: LD_INT 3
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 1
41834: NEG
41835: PUSH
41836: LD_INT 2
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41861: LD_ADDR_VAR 0 12
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: LD_INT 0
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: LD_INT 1
41881: NEG
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 1
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 1
41899: PUSH
41900: LD_INT 1
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 0
41909: PUSH
41910: LD_INT 1
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 1
41919: NEG
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 1
41930: NEG
41931: PUSH
41932: LD_INT 1
41934: NEG
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 1
41942: PUSH
41943: LD_INT 1
41945: NEG
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 2
41953: PUSH
41954: LD_INT 0
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 2
41963: PUSH
41964: LD_INT 1
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 1
41973: NEG
41974: PUSH
41975: LD_INT 1
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 2
41984: NEG
41985: PUSH
41986: LD_INT 0
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 2
41995: NEG
41996: PUSH
41997: LD_INT 1
41999: NEG
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 2
42007: NEG
42008: PUSH
42009: LD_INT 1
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 3
42018: NEG
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 3
42029: NEG
42030: PUSH
42031: LD_INT 1
42033: NEG
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42057: LD_ADDR_VAR 0 13
42061: PUSH
42062: LD_INT 0
42064: PUSH
42065: LD_INT 0
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 0
42074: PUSH
42075: LD_INT 1
42077: NEG
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 1
42085: PUSH
42086: LD_INT 0
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 1
42095: PUSH
42096: LD_INT 1
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 0
42105: PUSH
42106: LD_INT 1
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 1
42115: NEG
42116: PUSH
42117: LD_INT 0
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 1
42126: NEG
42127: PUSH
42128: LD_INT 1
42130: NEG
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 1
42138: NEG
42139: PUSH
42140: LD_INT 2
42142: NEG
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 2
42150: PUSH
42151: LD_INT 1
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 2
42160: PUSH
42161: LD_INT 2
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 1
42170: PUSH
42171: LD_INT 2
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 2
42180: NEG
42181: PUSH
42182: LD_INT 1
42184: NEG
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 2
42192: NEG
42193: PUSH
42194: LD_INT 2
42196: NEG
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 2
42204: NEG
42205: PUSH
42206: LD_INT 3
42208: NEG
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 3
42216: NEG
42217: PUSH
42218: LD_INT 2
42220: NEG
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 3
42228: NEG
42229: PUSH
42230: LD_INT 3
42232: NEG
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42256: LD_ADDR_VAR 0 14
42260: PUSH
42261: LD_INT 0
42263: PUSH
42264: LD_INT 0
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 0
42273: PUSH
42274: LD_INT 1
42276: NEG
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: LD_INT 1
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 0
42304: PUSH
42305: LD_INT 1
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 1
42314: NEG
42315: PUSH
42316: LD_INT 0
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 1
42325: NEG
42326: PUSH
42327: LD_INT 1
42329: NEG
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 1
42337: NEG
42338: PUSH
42339: LD_INT 2
42341: NEG
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 0
42349: PUSH
42350: LD_INT 2
42352: NEG
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 1
42360: PUSH
42361: LD_INT 1
42363: NEG
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 1
42371: PUSH
42372: LD_INT 2
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 0
42381: PUSH
42382: LD_INT 2
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 1
42391: NEG
42392: PUSH
42393: LD_INT 1
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 1
42402: NEG
42403: PUSH
42404: LD_INT 3
42406: NEG
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: LD_INT 3
42417: NEG
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 1
42425: PUSH
42426: LD_INT 2
42428: NEG
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42452: LD_ADDR_VAR 0 15
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: LD_INT 0
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: LD_INT 1
42472: NEG
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 1
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 1
42490: PUSH
42491: LD_INT 1
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 0
42500: PUSH
42501: LD_INT 1
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 1
42510: NEG
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 1
42521: NEG
42522: PUSH
42523: LD_INT 1
42525: NEG
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 1
42533: PUSH
42534: LD_INT 1
42536: NEG
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 2
42544: PUSH
42545: LD_INT 0
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 2
42554: PUSH
42555: LD_INT 1
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 1
42564: NEG
42565: PUSH
42566: LD_INT 1
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 2
42575: NEG
42576: PUSH
42577: LD_INT 0
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 2
42586: NEG
42587: PUSH
42588: LD_INT 1
42590: NEG
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 2
42598: PUSH
42599: LD_INT 1
42601: NEG
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 3
42609: PUSH
42610: LD_INT 0
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 3
42619: PUSH
42620: LD_INT 1
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42645: LD_ADDR_VAR 0 16
42649: PUSH
42650: LD_INT 0
42652: PUSH
42653: LD_INT 0
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 0
42662: PUSH
42663: LD_INT 1
42665: NEG
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 1
42673: PUSH
42674: LD_INT 0
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 1
42683: PUSH
42684: LD_INT 1
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 0
42693: PUSH
42694: LD_INT 1
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 1
42703: NEG
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 1
42714: NEG
42715: PUSH
42716: LD_INT 1
42718: NEG
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 1
42726: NEG
42727: PUSH
42728: LD_INT 2
42730: NEG
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 2
42738: PUSH
42739: LD_INT 1
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 2
42748: PUSH
42749: LD_INT 2
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 1
42758: PUSH
42759: LD_INT 2
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 2
42768: NEG
42769: PUSH
42770: LD_INT 1
42772: NEG
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 2
42780: NEG
42781: PUSH
42782: LD_INT 2
42784: NEG
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 3
42792: PUSH
42793: LD_INT 2
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 3
42802: PUSH
42803: LD_INT 3
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 2
42812: PUSH
42813: LD_INT 3
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42838: LD_ADDR_VAR 0 17
42842: PUSH
42843: LD_INT 0
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: LD_INT 1
42858: NEG
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 1
42866: PUSH
42867: LD_INT 0
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 1
42876: PUSH
42877: LD_INT 1
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 0
42886: PUSH
42887: LD_INT 1
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 1
42896: NEG
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 1
42907: NEG
42908: PUSH
42909: LD_INT 1
42911: NEG
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 1
42919: NEG
42920: PUSH
42921: LD_INT 2
42923: NEG
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 0
42931: PUSH
42932: LD_INT 2
42934: NEG
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 1
42942: PUSH
42943: LD_INT 1
42945: NEG
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 2
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 2
42963: PUSH
42964: LD_INT 1
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 2
42973: PUSH
42974: LD_INT 2
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 1
42983: PUSH
42984: LD_INT 2
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 0
42993: PUSH
42994: LD_INT 2
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 1
43003: NEG
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 2
43014: NEG
43015: PUSH
43016: LD_INT 0
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 2
43025: NEG
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 2
43037: NEG
43038: PUSH
43039: LD_INT 2
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43068: LD_ADDR_VAR 0 18
43072: PUSH
43073: LD_INT 0
43075: PUSH
43076: LD_INT 0
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: LD_INT 1
43088: NEG
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 1
43096: PUSH
43097: LD_INT 0
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 1
43106: PUSH
43107: LD_INT 1
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 0
43116: PUSH
43117: LD_INT 1
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 1
43126: NEG
43127: PUSH
43128: LD_INT 0
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 1
43137: NEG
43138: PUSH
43139: LD_INT 1
43141: NEG
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 1
43149: NEG
43150: PUSH
43151: LD_INT 2
43153: NEG
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: LD_INT 2
43164: NEG
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 1
43172: PUSH
43173: LD_INT 1
43175: NEG
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 2
43183: PUSH
43184: LD_INT 0
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 2
43193: PUSH
43194: LD_INT 1
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 2
43203: PUSH
43204: LD_INT 2
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 1
43213: PUSH
43214: LD_INT 2
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 0
43223: PUSH
43224: LD_INT 2
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 1
43233: NEG
43234: PUSH
43235: LD_INT 1
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 2
43244: NEG
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 2
43255: NEG
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 2
43267: NEG
43268: PUSH
43269: LD_INT 2
43271: NEG
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43298: LD_ADDR_VAR 0 19
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: LD_INT 0
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: LD_INT 1
43318: NEG
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: PUSH
43337: LD_INT 1
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 1
43356: NEG
43357: PUSH
43358: LD_INT 0
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 1
43367: NEG
43368: PUSH
43369: LD_INT 1
43371: NEG
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 1
43379: NEG
43380: PUSH
43381: LD_INT 2
43383: NEG
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 0
43391: PUSH
43392: LD_INT 2
43394: NEG
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 1
43402: PUSH
43403: LD_INT 1
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 2
43413: PUSH
43414: LD_INT 0
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 2
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 2
43433: PUSH
43434: LD_INT 2
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 1
43443: PUSH
43444: LD_INT 2
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 0
43453: PUSH
43454: LD_INT 2
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 1
43463: NEG
43464: PUSH
43465: LD_INT 1
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 2
43474: NEG
43475: PUSH
43476: LD_INT 0
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 2
43485: NEG
43486: PUSH
43487: LD_INT 1
43489: NEG
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 2
43497: NEG
43498: PUSH
43499: LD_INT 2
43501: NEG
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43528: LD_ADDR_VAR 0 20
43532: PUSH
43533: LD_INT 0
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: LD_INT 1
43548: NEG
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 1
43556: PUSH
43557: LD_INT 0
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 1
43566: PUSH
43567: LD_INT 1
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 0
43576: PUSH
43577: LD_INT 1
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 1
43586: NEG
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 1
43597: NEG
43598: PUSH
43599: LD_INT 1
43601: NEG
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 1
43609: NEG
43610: PUSH
43611: LD_INT 2
43613: NEG
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 0
43621: PUSH
43622: LD_INT 2
43624: NEG
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 1
43632: PUSH
43633: LD_INT 1
43635: NEG
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 2
43643: PUSH
43644: LD_INT 0
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 2
43653: PUSH
43654: LD_INT 1
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 2
43663: PUSH
43664: LD_INT 2
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 1
43673: PUSH
43674: LD_INT 2
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: LD_INT 2
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 1
43693: NEG
43694: PUSH
43695: LD_INT 1
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 2
43704: NEG
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 2
43715: NEG
43716: PUSH
43717: LD_INT 1
43719: NEG
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 2
43727: NEG
43728: PUSH
43729: LD_INT 2
43731: NEG
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43758: LD_ADDR_VAR 0 21
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: LD_INT 1
43778: NEG
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 1
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 1
43796: PUSH
43797: LD_INT 1
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: LD_INT 1
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 1
43816: NEG
43817: PUSH
43818: LD_INT 0
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 1
43827: NEG
43828: PUSH
43829: LD_INT 1
43831: NEG
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 1
43839: NEG
43840: PUSH
43841: LD_INT 2
43843: NEG
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: LD_INT 2
43854: NEG
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 1
43862: PUSH
43863: LD_INT 1
43865: NEG
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 2
43873: PUSH
43874: LD_INT 0
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 2
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 2
43893: PUSH
43894: LD_INT 2
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 1
43903: PUSH
43904: LD_INT 2
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: LD_INT 2
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: LD_INT 1
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 2
43934: NEG
43935: PUSH
43936: LD_INT 0
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 2
43945: NEG
43946: PUSH
43947: LD_INT 1
43949: NEG
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 2
43957: NEG
43958: PUSH
43959: LD_INT 2
43961: NEG
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43988: LD_ADDR_VAR 0 22
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: LD_INT 0
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: LD_INT 1
44008: NEG
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 1
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 1
44026: PUSH
44027: LD_INT 1
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 0
44036: PUSH
44037: LD_INT 1
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 1
44046: NEG
44047: PUSH
44048: LD_INT 0
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 1
44057: NEG
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: NEG
44070: PUSH
44071: LD_INT 2
44073: NEG
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 0
44081: PUSH
44082: LD_INT 2
44084: NEG
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: LD_INT 1
44095: NEG
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 2
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 2
44113: PUSH
44114: LD_INT 1
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 2
44123: PUSH
44124: LD_INT 2
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 1
44133: PUSH
44134: LD_INT 2
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: LD_INT 2
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: LD_INT 1
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 2
44164: NEG
44165: PUSH
44166: LD_INT 0
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 2
44175: NEG
44176: PUSH
44177: LD_INT 1
44179: NEG
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 2
44187: NEG
44188: PUSH
44189: LD_INT 2
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44218: LD_ADDR_VAR 0 23
44222: PUSH
44223: LD_INT 0
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 0
44235: PUSH
44236: LD_INT 1
44238: NEG
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 1
44246: PUSH
44247: LD_INT 0
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 1
44256: PUSH
44257: LD_INT 1
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 0
44266: PUSH
44267: LD_INT 1
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: NEG
44277: PUSH
44278: LD_INT 0
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 1
44287: NEG
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 1
44299: NEG
44300: PUSH
44301: LD_INT 2
44303: NEG
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 0
44311: PUSH
44312: LD_INT 2
44314: NEG
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: PUSH
44323: LD_INT 1
44325: NEG
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 2
44333: PUSH
44334: LD_INT 0
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 2
44343: PUSH
44344: LD_INT 1
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 2
44353: PUSH
44354: LD_INT 2
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 1
44363: PUSH
44364: LD_INT 2
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 0
44373: PUSH
44374: LD_INT 2
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 1
44383: NEG
44384: PUSH
44385: LD_INT 1
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 2
44394: NEG
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 2
44405: NEG
44406: PUSH
44407: LD_INT 1
44409: NEG
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 2
44417: NEG
44418: PUSH
44419: LD_INT 2
44421: NEG
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 2
44429: NEG
44430: PUSH
44431: LD_INT 3
44433: NEG
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 1
44441: NEG
44442: PUSH
44443: LD_INT 3
44445: NEG
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: LD_INT 2
44456: NEG
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 2
44464: PUSH
44465: LD_INT 1
44467: NEG
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44498: LD_ADDR_VAR 0 24
44502: PUSH
44503: LD_INT 0
44505: PUSH
44506: LD_INT 0
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 0
44515: PUSH
44516: LD_INT 1
44518: NEG
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 1
44526: PUSH
44527: LD_INT 0
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: LD_INT 1
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 0
44546: PUSH
44547: LD_INT 1
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 1
44556: NEG
44557: PUSH
44558: LD_INT 0
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 1
44567: NEG
44568: PUSH
44569: LD_INT 1
44571: NEG
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 1
44579: NEG
44580: PUSH
44581: LD_INT 2
44583: NEG
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 0
44591: PUSH
44592: LD_INT 2
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 1
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 2
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 2
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 2
44633: PUSH
44634: LD_INT 2
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 1
44643: PUSH
44644: LD_INT 2
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: LD_INT 2
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 1
44663: NEG
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 2
44674: NEG
44675: PUSH
44676: LD_INT 0
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 2
44685: NEG
44686: PUSH
44687: LD_INT 1
44689: NEG
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 2
44697: NEG
44698: PUSH
44699: LD_INT 2
44701: NEG
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: LD_INT 2
44712: NEG
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 2
44720: PUSH
44721: LD_INT 1
44723: NEG
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 3
44731: PUSH
44732: LD_INT 1
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 3
44741: PUSH
44742: LD_INT 2
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44774: LD_ADDR_VAR 0 25
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: LD_INT 0
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: LD_INT 1
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 1
44812: PUSH
44813: LD_INT 1
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: LD_INT 1
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 1
44832: NEG
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 1
44843: NEG
44844: PUSH
44845: LD_INT 1
44847: NEG
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 1
44855: NEG
44856: PUSH
44857: LD_INT 2
44859: NEG
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 0
44867: PUSH
44868: LD_INT 2
44870: NEG
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 1
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 2
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 2
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 2
44909: PUSH
44910: LD_INT 2
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: LD_INT 2
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: LD_INT 2
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 1
44939: NEG
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 2
44950: NEG
44951: PUSH
44952: LD_INT 0
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 2
44961: NEG
44962: PUSH
44963: LD_INT 1
44965: NEG
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 2
44973: NEG
44974: PUSH
44975: LD_INT 2
44977: NEG
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 3
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 3
44995: PUSH
44996: LD_INT 2
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 2
45005: PUSH
45006: LD_INT 3
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: LD_INT 3
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45048: LD_ADDR_VAR 0 26
45052: PUSH
45053: LD_INT 0
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 1
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: LD_INT 1
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 1
45106: NEG
45107: PUSH
45108: LD_INT 0
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 1
45117: NEG
45118: PUSH
45119: LD_INT 1
45121: NEG
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 1
45129: NEG
45130: PUSH
45131: LD_INT 2
45133: NEG
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: LD_INT 2
45144: NEG
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 1
45152: PUSH
45153: LD_INT 1
45155: NEG
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 2
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 2
45173: PUSH
45174: LD_INT 1
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 2
45183: PUSH
45184: LD_INT 2
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 1
45193: PUSH
45194: LD_INT 2
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: LD_INT 2
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 1
45213: NEG
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 2
45224: NEG
45225: PUSH
45226: LD_INT 0
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 2
45235: NEG
45236: PUSH
45237: LD_INT 1
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 2
45247: NEG
45248: PUSH
45249: LD_INT 2
45251: NEG
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 2
45259: PUSH
45260: LD_INT 3
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 1
45269: PUSH
45270: LD_INT 3
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 1
45279: NEG
45280: PUSH
45281: LD_INT 2
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 2
45290: NEG
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45324: LD_ADDR_VAR 0 27
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 0
45341: PUSH
45342: LD_INT 1
45344: NEG
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 1
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 1
45362: PUSH
45363: LD_INT 1
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 0
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 1
45382: NEG
45383: PUSH
45384: LD_INT 0
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 1
45393: NEG
45394: PUSH
45395: LD_INT 1
45397: NEG
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 1
45405: NEG
45406: PUSH
45407: LD_INT 2
45409: NEG
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 0
45417: PUSH
45418: LD_INT 2
45420: NEG
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 1
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 2
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 2
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 2
45459: PUSH
45460: LD_INT 2
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 1
45469: PUSH
45470: LD_INT 2
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: LD_INT 2
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 1
45489: NEG
45490: PUSH
45491: LD_INT 1
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 2
45500: NEG
45501: PUSH
45502: LD_INT 0
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 2
45511: NEG
45512: PUSH
45513: LD_INT 1
45515: NEG
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 2
45523: NEG
45524: PUSH
45525: LD_INT 2
45527: NEG
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 1
45535: NEG
45536: PUSH
45537: LD_INT 2
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 2
45546: NEG
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 3
45557: NEG
45558: PUSH
45559: LD_INT 1
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 3
45569: NEG
45570: PUSH
45571: LD_INT 2
45573: NEG
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45604: LD_ADDR_VAR 0 28
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 1
45662: NEG
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 1
45673: NEG
45674: PUSH
45675: LD_INT 1
45677: NEG
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 1
45685: NEG
45686: PUSH
45687: LD_INT 2
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: LD_INT 2
45700: NEG
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 1
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 2
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: LD_INT 1
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 2
45739: PUSH
45740: LD_INT 2
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 1
45749: PUSH
45750: LD_INT 2
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 0
45759: PUSH
45760: LD_INT 2
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: LD_INT 1
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 2
45780: NEG
45781: PUSH
45782: LD_INT 0
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 2
45791: NEG
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 2
45803: NEG
45804: PUSH
45805: LD_INT 2
45807: NEG
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 2
45815: NEG
45816: PUSH
45817: LD_INT 3
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: LD_INT 3
45831: NEG
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 3
45839: NEG
45840: PUSH
45841: LD_INT 1
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 3
45851: NEG
45852: PUSH
45853: LD_INT 2
45855: NEG
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45886: LD_ADDR_VAR 0 29
45890: PUSH
45891: LD_INT 0
45893: PUSH
45894: LD_INT 0
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 0
45903: PUSH
45904: LD_INT 1
45906: NEG
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 1
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 1
45924: PUSH
45925: LD_INT 1
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 1
45944: NEG
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 1
45955: NEG
45956: PUSH
45957: LD_INT 1
45959: NEG
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: LD_INT 2
45971: NEG
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: LD_INT 2
45982: NEG
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 1
45990: PUSH
45991: LD_INT 1
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 2
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 2
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 1
46021: PUSH
46022: LD_INT 2
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 0
46031: PUSH
46032: LD_INT 2
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: NEG
46042: PUSH
46043: LD_INT 1
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 2
46052: NEG
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 2
46064: NEG
46065: PUSH
46066: LD_INT 2
46068: NEG
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 2
46076: NEG
46077: PUSH
46078: LD_INT 3
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 2
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 3
46099: PUSH
46100: LD_INT 1
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: LD_INT 3
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 1
46119: NEG
46120: PUSH
46121: LD_INT 2
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 3
46130: NEG
46131: PUSH
46132: LD_INT 2
46134: NEG
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46165: LD_ADDR_VAR 0 30
46169: PUSH
46170: LD_INT 0
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: LD_INT 1
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 1
46203: PUSH
46204: LD_INT 1
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: LD_INT 1
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 1
46234: NEG
46235: PUSH
46236: LD_INT 1
46238: NEG
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: LD_INT 2
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 0
46258: PUSH
46259: LD_INT 2
46261: NEG
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 2
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 2
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 2
46300: PUSH
46301: LD_INT 2
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 1
46310: PUSH
46311: LD_INT 2
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 1
46320: NEG
46321: PUSH
46322: LD_INT 1
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 2
46331: NEG
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 2
46342: NEG
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 1
46354: NEG
46355: PUSH
46356: LD_INT 3
46358: NEG
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 1
46366: PUSH
46367: LD_INT 2
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 3
46377: PUSH
46378: LD_INT 2
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 2
46387: PUSH
46388: LD_INT 3
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 2
46397: NEG
46398: PUSH
46399: LD_INT 1
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 3
46408: NEG
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46443: LD_ADDR_VAR 0 31
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: LD_INT 0
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 0
46460: PUSH
46461: LD_INT 1
46463: NEG
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 1
46481: PUSH
46482: LD_INT 1
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 0
46491: PUSH
46492: LD_INT 1
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 1
46501: NEG
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 1
46524: NEG
46525: PUSH
46526: LD_INT 2
46528: NEG
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 1
46536: PUSH
46537: LD_INT 1
46539: NEG
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 2
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 2
46557: PUSH
46558: LD_INT 1
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 2
46567: PUSH
46568: LD_INT 2
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: PUSH
46578: LD_INT 2
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: LD_INT 2
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 2
46608: NEG
46609: PUSH
46610: LD_INT 1
46612: NEG
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 2
46620: NEG
46621: PUSH
46622: LD_INT 2
46624: NEG
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 2
46632: NEG
46633: PUSH
46634: LD_INT 3
46636: NEG
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 2
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 3
46655: PUSH
46656: LD_INT 1
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: LD_INT 3
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 1
46675: NEG
46676: PUSH
46677: LD_INT 2
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 3
46686: NEG
46687: PUSH
46688: LD_INT 2
46690: NEG
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46721: LD_ADDR_VAR 0 32
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: LD_INT 0
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: LD_INT 1
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 1
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 1
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: LD_INT 1
46794: NEG
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: NEG
46803: PUSH
46804: LD_INT 2
46806: NEG
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 0
46814: PUSH
46815: LD_INT 2
46817: NEG
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 1
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 2
46836: PUSH
46837: LD_INT 1
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 2
46846: PUSH
46847: LD_INT 2
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 1
46856: PUSH
46857: LD_INT 2
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 0
46866: PUSH
46867: LD_INT 2
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 1
46876: NEG
46877: PUSH
46878: LD_INT 1
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 2
46887: NEG
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 2
46898: NEG
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: LD_INT 3
46914: NEG
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 1
46922: PUSH
46923: LD_INT 2
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 3
46933: PUSH
46934: LD_INT 2
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 2
46943: PUSH
46944: LD_INT 3
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 2
46953: NEG
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 3
46964: NEG
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46999: LD_ADDR_VAR 0 33
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 0
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 1
47057: NEG
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 1
47068: NEG
47069: PUSH
47070: LD_INT 1
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: NEG
47081: PUSH
47082: LD_INT 2
47084: NEG
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 1
47092: PUSH
47093: LD_INT 1
47095: NEG
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 2
47103: PUSH
47104: LD_INT 0
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 2
47113: PUSH
47114: LD_INT 1
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 1
47123: PUSH
47124: LD_INT 2
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 0
47133: PUSH
47134: LD_INT 2
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 1
47143: NEG
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 2
47154: NEG
47155: PUSH
47156: LD_INT 0
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 2
47165: NEG
47166: PUSH
47167: LD_INT 1
47169: NEG
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 2
47177: NEG
47178: PUSH
47179: LD_INT 2
47181: NEG
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 2
47189: NEG
47190: PUSH
47191: LD_INT 3
47193: NEG
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 2
47201: PUSH
47202: LD_INT 1
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 3
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 1
47222: PUSH
47223: LD_INT 3
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: LD_INT 2
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 3
47243: NEG
47244: PUSH
47245: LD_INT 2
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47278: LD_ADDR_VAR 0 34
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: NEG
47337: PUSH
47338: LD_INT 0
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: LD_INT 1
47351: NEG
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 1
47359: NEG
47360: PUSH
47361: LD_INT 2
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 0
47371: PUSH
47372: LD_INT 2
47374: NEG
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 1
47382: PUSH
47383: LD_INT 1
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 2
47393: PUSH
47394: LD_INT 1
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 2
47403: PUSH
47404: LD_INT 2
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: LD_INT 2
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 1
47423: NEG
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 2
47434: NEG
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 2
47445: NEG
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 2
47457: NEG
47458: PUSH
47459: LD_INT 2
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: LD_INT 3
47473: NEG
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: PUSH
47482: LD_INT 2
47484: NEG
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 3
47492: PUSH
47493: LD_INT 2
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 2
47502: PUSH
47503: LD_INT 3
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 2
47512: NEG
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 3
47523: NEG
47524: PUSH
47525: LD_INT 1
47527: NEG
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47558: LD_ADDR_VAR 0 35
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: LD_INT 0
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 0
47575: PUSH
47576: LD_INT 1
47578: NEG
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 1
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 1
47596: PUSH
47597: LD_INT 1
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 0
47606: PUSH
47607: LD_INT 1
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 1
47616: NEG
47617: PUSH
47618: LD_INT 0
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 2
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 2
47649: NEG
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47670: LD_ADDR_VAR 0 36
47674: PUSH
47675: LD_INT 0
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 1
47708: PUSH
47709: LD_INT 1
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: LD_INT 1
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 1
47728: NEG
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: LD_INT 1
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 1
47751: NEG
47752: PUSH
47753: LD_INT 2
47755: NEG
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: LD_INT 2
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47782: LD_ADDR_VAR 0 37
47786: PUSH
47787: LD_INT 0
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 0
47799: PUSH
47800: LD_INT 1
47802: NEG
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 1
47810: PUSH
47811: LD_INT 0
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: PUSH
47821: LD_INT 1
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 0
47830: PUSH
47831: LD_INT 1
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 1
47840: NEG
47841: PUSH
47842: LD_INT 0
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 1
47851: NEG
47852: PUSH
47853: LD_INT 1
47855: NEG
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: PUSH
47864: LD_INT 1
47866: NEG
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47894: LD_ADDR_VAR 0 38
47898: PUSH
47899: LD_INT 0
47901: PUSH
47902: LD_INT 0
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 1
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 1
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 0
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 1
47952: NEG
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 1
47963: NEG
47964: PUSH
47965: LD_INT 1
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 2
47975: PUSH
47976: LD_INT 1
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 2
47985: NEG
47986: PUSH
47987: LD_INT 1
47989: NEG
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48006: LD_ADDR_VAR 0 39
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 0
48023: PUSH
48024: LD_INT 1
48026: NEG
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 1
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 1
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 1
48064: NEG
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: LD_INT 1
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: LD_INT 2
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: LD_INT 2
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48118: LD_ADDR_VAR 0 40
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 1
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: LD_INT 1
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 1
48187: NEG
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 1
48199: PUSH
48200: LD_INT 1
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 1
48210: NEG
48211: PUSH
48212: LD_INT 1
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48230: LD_ADDR_VAR 0 41
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: LD_INT 1
48250: NEG
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 1
48258: PUSH
48259: LD_INT 0
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 1
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: LD_INT 1
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 1
48288: NEG
48289: PUSH
48290: LD_INT 0
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 1
48299: NEG
48300: PUSH
48301: LD_INT 1
48303: NEG
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 1
48311: NEG
48312: PUSH
48313: LD_INT 2
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: LD_INT 1
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 2
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 2
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 2
48354: PUSH
48355: LD_INT 2
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: LD_INT 2
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 1
48374: NEG
48375: PUSH
48376: LD_INT 1
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 2
48385: NEG
48386: PUSH
48387: LD_INT 0
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 2
48396: NEG
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 2
48408: NEG
48409: PUSH
48410: LD_INT 2
48412: NEG
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 2
48420: NEG
48421: PUSH
48422: LD_INT 3
48424: NEG
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 2
48432: PUSH
48433: LD_INT 1
48435: NEG
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 3
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 3
48453: PUSH
48454: LD_INT 1
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 3
48463: PUSH
48464: LD_INT 2
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 3
48473: PUSH
48474: LD_INT 3
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 2
48483: PUSH
48484: LD_INT 3
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 2
48493: NEG
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 3
48504: NEG
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 3
48515: NEG
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 3
48527: NEG
48528: PUSH
48529: LD_INT 2
48531: NEG
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 3
48539: NEG
48540: PUSH
48541: LD_INT 3
48543: NEG
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48580: LD_ADDR_VAR 0 42
48584: PUSH
48585: LD_INT 0
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: PUSH
48619: LD_INT 1
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 0
48628: PUSH
48629: LD_INT 1
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 1
48638: NEG
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: LD_INT 2
48665: NEG
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: LD_INT 2
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 2
48695: PUSH
48696: LD_INT 1
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 2
48705: PUSH
48706: LD_INT 2
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 1
48715: PUSH
48716: LD_INT 2
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 0
48725: PUSH
48726: LD_INT 2
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 2
48746: NEG
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 2
48758: NEG
48759: PUSH
48760: LD_INT 2
48762: NEG
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 2
48770: NEG
48771: PUSH
48772: LD_INT 3
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 1
48782: NEG
48783: PUSH
48784: LD_INT 3
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: LD_INT 3
48797: NEG
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: LD_INT 2
48808: NEG
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 3
48816: PUSH
48817: LD_INT 2
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 3
48826: PUSH
48827: LD_INT 3
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 2
48836: PUSH
48837: LD_INT 3
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 1
48846: PUSH
48847: LD_INT 3
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: LD_INT 3
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: LD_INT 2
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 3
48877: NEG
48878: PUSH
48879: LD_INT 2
48881: NEG
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 3
48889: NEG
48890: PUSH
48891: LD_INT 3
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48930: LD_ADDR_VAR 0 43
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: LD_INT 1
48950: NEG
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 1
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 1
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: LD_INT 1
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 1
48988: NEG
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: LD_INT 1
49003: NEG
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 1
49011: NEG
49012: PUSH
49013: LD_INT 2
49015: NEG
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 0
49023: PUSH
49024: LD_INT 2
49026: NEG
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 1
49034: PUSH
49035: LD_INT 1
49037: NEG
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 2
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 2
49055: PUSH
49056: LD_INT 1
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 1
49065: PUSH
49066: LD_INT 2
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: LD_INT 2
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: LD_INT 1
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 2
49096: NEG
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 2
49107: NEG
49108: PUSH
49109: LD_INT 1
49111: NEG
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: LD_INT 3
49123: NEG
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: LD_INT 3
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 1
49142: PUSH
49143: LD_INT 2
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 2
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 3
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 3
49174: PUSH
49175: LD_INT 1
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 1
49184: PUSH
49185: LD_INT 3
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 0
49194: PUSH
49195: LD_INT 3
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 1
49204: NEG
49205: PUSH
49206: LD_INT 2
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 2
49215: NEG
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 3
49226: NEG
49227: PUSH
49228: LD_INT 0
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 3
49237: NEG
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49278: LD_ADDR_VAR 0 44
49282: PUSH
49283: LD_INT 0
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 0
49295: PUSH
49296: LD_INT 1
49298: NEG
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: LD_INT 0
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 1
49316: PUSH
49317: LD_INT 1
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: LD_INT 1
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: NEG
49337: PUSH
49338: LD_INT 0
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: LD_INT 1
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: LD_INT 2
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 2
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 2
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 2
49402: PUSH
49403: LD_INT 2
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 1
49412: PUSH
49413: LD_INT 2
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: LD_INT 1
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 2
49433: NEG
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 2
49444: NEG
49445: PUSH
49446: LD_INT 1
49448: NEG
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 2
49456: NEG
49457: PUSH
49458: LD_INT 2
49460: NEG
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 2
49468: NEG
49469: PUSH
49470: LD_INT 3
49472: NEG
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 2
49480: PUSH
49481: LD_INT 1
49483: NEG
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 3
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 3
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 3
49511: PUSH
49512: LD_INT 2
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 3
49521: PUSH
49522: LD_INT 3
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 2
49531: PUSH
49532: LD_INT 3
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 2
49541: NEG
49542: PUSH
49543: LD_INT 1
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 3
49552: NEG
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 3
49563: NEG
49564: PUSH
49565: LD_INT 1
49567: NEG
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 3
49575: NEG
49576: PUSH
49577: LD_INT 2
49579: NEG
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 3
49587: NEG
49588: PUSH
49589: LD_INT 3
49591: NEG
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49628: LD_ADDR_VAR 0 45
49632: PUSH
49633: LD_INT 0
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: LD_INT 1
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 0
49676: PUSH
49677: LD_INT 1
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 1
49686: NEG
49687: PUSH
49688: LD_INT 0
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 1
49697: NEG
49698: PUSH
49699: LD_INT 1
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 1
49709: NEG
49710: PUSH
49711: LD_INT 2
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: LD_INT 2
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: PUSH
49733: LD_INT 1
49735: NEG
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 2
49743: PUSH
49744: LD_INT 1
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 2
49753: PUSH
49754: LD_INT 2
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 1
49763: PUSH
49764: LD_INT 2
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 0
49773: PUSH
49774: LD_INT 2
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 1
49783: NEG
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 2
49794: NEG
49795: PUSH
49796: LD_INT 1
49798: NEG
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 2
49806: NEG
49807: PUSH
49808: LD_INT 2
49810: NEG
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 2
49818: NEG
49819: PUSH
49820: LD_INT 3
49822: NEG
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 1
49830: NEG
49831: PUSH
49832: LD_INT 3
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 0
49842: PUSH
49843: LD_INT 3
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 1
49853: PUSH
49854: LD_INT 2
49856: NEG
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 3
49864: PUSH
49865: LD_INT 2
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 3
49874: PUSH
49875: LD_INT 3
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 2
49884: PUSH
49885: LD_INT 3
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 1
49894: PUSH
49895: LD_INT 3
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: LD_INT 3
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 1
49914: NEG
49915: PUSH
49916: LD_INT 2
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 3
49925: NEG
49926: PUSH
49927: LD_INT 2
49929: NEG
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 3
49937: NEG
49938: PUSH
49939: LD_INT 3
49941: NEG
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49978: LD_ADDR_VAR 0 46
49982: PUSH
49983: LD_INT 0
49985: PUSH
49986: LD_INT 0
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 1
50006: PUSH
50007: LD_INT 0
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 1
50016: PUSH
50017: LD_INT 1
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: LD_INT 1
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 1
50036: NEG
50037: PUSH
50038: LD_INT 0
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 1
50047: NEG
50048: PUSH
50049: LD_INT 1
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 1
50059: NEG
50060: PUSH
50061: LD_INT 2
50063: NEG
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: LD_INT 2
50074: NEG
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 2
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 2
50103: PUSH
50104: LD_INT 1
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 1
50113: PUSH
50114: LD_INT 2
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 0
50123: PUSH
50124: LD_INT 2
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 1
50133: NEG
50134: PUSH
50135: LD_INT 1
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 2
50144: NEG
50145: PUSH
50146: LD_INT 0
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 2
50155: NEG
50156: PUSH
50157: LD_INT 1
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 1
50167: NEG
50168: PUSH
50169: LD_INT 3
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 0
50179: PUSH
50180: LD_INT 3
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: PUSH
50191: LD_INT 2
50193: NEG
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 2
50201: PUSH
50202: LD_INT 1
50204: NEG
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 3
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 3
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: LD_INT 3
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 0
50242: PUSH
50243: LD_INT 3
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 1
50252: NEG
50253: PUSH
50254: LD_INT 2
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 2
50263: NEG
50264: PUSH
50265: LD_INT 1
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 3
50274: NEG
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 3
50285: NEG
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50326: LD_ADDR_VAR 0 47
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: LD_INT 0
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: LD_INT 1
50346: NEG
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: LD_INT 1
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 1
50384: NEG
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: LD_INT 1
50399: NEG
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 1
50407: NEG
50408: PUSH
50409: LD_INT 2
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 0
50419: PUSH
50420: LD_INT 2
50422: NEG
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 1
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 2
50441: NEG
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 2
50453: NEG
50454: PUSH
50455: LD_INT 2
50457: NEG
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50477: LD_ADDR_VAR 0 48
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: LD_INT 0
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: LD_INT 1
50497: NEG
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: LD_INT 1
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 0
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 1
50535: NEG
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 1
50546: NEG
50547: PUSH
50548: LD_INT 1
50550: NEG
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: LD_INT 2
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: LD_INT 2
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: LD_INT 1
50584: NEG
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 2
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 2
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50624: LD_ADDR_VAR 0 49
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 1
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: LD_INT 1
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 1
50682: NEG
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 1
50693: NEG
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: LD_INT 1
50708: NEG
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 2
50716: PUSH
50717: LD_INT 0
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 2
50726: PUSH
50727: LD_INT 1
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 2
50736: PUSH
50737: LD_INT 2
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: LD_INT 2
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50768: LD_ADDR_VAR 0 50
50772: PUSH
50773: LD_INT 0
50775: PUSH
50776: LD_INT 0
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 0
50785: PUSH
50786: LD_INT 1
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: LD_INT 0
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: LD_INT 1
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: LD_INT 1
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 1
50826: NEG
50827: PUSH
50828: LD_INT 0
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 1
50837: NEG
50838: PUSH
50839: LD_INT 1
50841: NEG
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 2
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 2
50859: PUSH
50860: LD_INT 2
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 1
50869: PUSH
50870: LD_INT 2
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 0
50879: PUSH
50880: LD_INT 2
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 1
50889: NEG
50890: PUSH
50891: LD_INT 1
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50912: LD_ADDR_VAR 0 51
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 0
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 1
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 1
50950: PUSH
50951: LD_INT 1
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 0
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: NEG
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 1
50981: NEG
50982: PUSH
50983: LD_INT 1
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: PUSH
50994: LD_INT 2
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 0
51003: PUSH
51004: LD_INT 2
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: LD_INT 1
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 2
51024: NEG
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 2
51035: NEG
51036: PUSH
51037: LD_INT 1
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51059: LD_ADDR_VAR 0 52
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: LD_INT 1
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: LD_INT 1
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 1
51117: NEG
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: NEG
51129: PUSH
51130: LD_INT 1
51132: NEG
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 1
51140: NEG
51141: PUSH
51142: LD_INT 2
51144: NEG
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: NEG
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 2
51163: NEG
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 2
51174: NEG
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 2
51186: NEG
51187: PUSH
51188: LD_INT 2
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51210: LD_ADDR_VAR 0 53
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: LD_INT 1
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: LD_INT 1
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 1
51268: NEG
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 1
51279: NEG
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 1
51291: NEG
51292: PUSH
51293: LD_INT 2
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 0
51303: PUSH
51304: LD_INT 2
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 1
51314: PUSH
51315: LD_INT 1
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 2
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 2
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 2
51345: PUSH
51346: LD_INT 2
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: LD_INT 2
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: LD_INT 2
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 2
51386: NEG
51387: PUSH
51388: LD_INT 0
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 2
51397: NEG
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 2
51409: NEG
51410: PUSH
51411: LD_INT 2
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51440: LD_ADDR_VAR 0 54
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: LD_INT 0
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: LD_INT 1
51460: NEG
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: LD_INT 1
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: LD_INT 1
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 1
51498: NEG
51499: PUSH
51500: LD_INT 0
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 1
51509: NEG
51510: PUSH
51511: LD_INT 1
51513: NEG
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 1
51521: NEG
51522: PUSH
51523: LD_INT 2
51525: NEG
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 0
51533: PUSH
51534: LD_INT 2
51536: NEG
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 1
51544: PUSH
51545: LD_INT 1
51547: NEG
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 2
51555: PUSH
51556: LD_INT 0
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 2
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 2
51575: PUSH
51576: LD_INT 2
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 1
51585: PUSH
51586: LD_INT 2
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: LD_INT 2
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: LD_INT 1
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 2
51616: NEG
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 2
51627: NEG
51628: PUSH
51629: LD_INT 1
51631: NEG
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 2
51639: NEG
51640: PUSH
51641: LD_INT 2
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51670: LD_ADDR_VAR 0 55
51674: PUSH
51675: LD_INT 0
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: LD_INT 1
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 1
51698: PUSH
51699: LD_INT 0
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: LD_INT 1
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: LD_INT 1
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 1
51728: NEG
51729: PUSH
51730: LD_INT 0
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 1
51739: NEG
51740: PUSH
51741: LD_INT 1
51743: NEG
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 1
51751: NEG
51752: PUSH
51753: LD_INT 2
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: LD_INT 2
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 1
51774: PUSH
51775: LD_INT 1
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 2
51785: PUSH
51786: LD_INT 0
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 2
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 2
51805: PUSH
51806: LD_INT 2
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: LD_INT 2
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 0
51825: PUSH
51826: LD_INT 2
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 1
51835: NEG
51836: PUSH
51837: LD_INT 1
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 2
51846: NEG
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 2
51857: NEG
51858: PUSH
51859: LD_INT 1
51861: NEG
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 2
51869: NEG
51870: PUSH
51871: LD_INT 2
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51900: LD_ADDR_VAR 0 56
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 0
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 1
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: LD_INT 1
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: LD_INT 0
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 1
51969: NEG
51970: PUSH
51971: LD_INT 1
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 1
51981: NEG
51982: PUSH
51983: LD_INT 2
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 0
51993: PUSH
51994: LD_INT 2
51996: NEG
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 1
52004: PUSH
52005: LD_INT 1
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 2
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 2
52025: PUSH
52026: LD_INT 1
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 2
52035: PUSH
52036: LD_INT 2
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 1
52045: PUSH
52046: LD_INT 2
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: LD_INT 2
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: LD_INT 1
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 2
52076: NEG
52077: PUSH
52078: LD_INT 0
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 2
52087: NEG
52088: PUSH
52089: LD_INT 1
52091: NEG
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 2
52099: NEG
52100: PUSH
52101: LD_INT 2
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52130: LD_ADDR_VAR 0 57
52134: PUSH
52135: LD_INT 0
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 1
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 1
52168: PUSH
52169: LD_INT 1
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: LD_INT 1
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: LD_INT 0
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: LD_INT 1
52203: NEG
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 1
52211: NEG
52212: PUSH
52213: LD_INT 2
52215: NEG
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 0
52223: PUSH
52224: LD_INT 2
52226: NEG
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: PUSH
52235: LD_INT 1
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 2
52245: PUSH
52246: LD_INT 0
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 2
52255: PUSH
52256: LD_INT 1
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 2
52265: PUSH
52266: LD_INT 2
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 1
52275: PUSH
52276: LD_INT 2
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: LD_INT 2
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 1
52295: NEG
52296: PUSH
52297: LD_INT 1
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 2
52306: NEG
52307: PUSH
52308: LD_INT 0
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 2
52317: NEG
52318: PUSH
52319: LD_INT 1
52321: NEG
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 2
52329: NEG
52330: PUSH
52331: LD_INT 2
52333: NEG
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52360: LD_ADDR_VAR 0 58
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: LD_INT 1
52380: NEG
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 1
52388: PUSH
52389: LD_INT 0
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: LD_INT 1
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 0
52408: PUSH
52409: LD_INT 1
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: LD_INT 0
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: LD_INT 1
52433: NEG
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 1
52441: NEG
52442: PUSH
52443: LD_INT 2
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 0
52453: PUSH
52454: LD_INT 2
52456: NEG
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 1
52464: PUSH
52465: LD_INT 1
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 2
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 2
52485: PUSH
52486: LD_INT 1
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 2
52495: PUSH
52496: LD_INT 2
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: PUSH
52506: LD_INT 2
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: LD_INT 2
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 1
52525: NEG
52526: PUSH
52527: LD_INT 1
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 2
52536: NEG
52537: PUSH
52538: LD_INT 0
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 2
52547: NEG
52548: PUSH
52549: LD_INT 1
52551: NEG
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 2
52559: NEG
52560: PUSH
52561: LD_INT 2
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52590: LD_ADDR_VAR 0 59
52594: PUSH
52595: LD_INT 0
52597: PUSH
52598: LD_INT 0
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 0
52607: PUSH
52608: LD_INT 1
52610: NEG
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 1
52628: PUSH
52629: LD_INT 1
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 0
52638: PUSH
52639: LD_INT 1
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: LD_INT 0
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 1
52659: NEG
52660: PUSH
52661: LD_INT 1
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52678: LD_ADDR_VAR 0 60
52682: PUSH
52683: LD_INT 0
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: LD_INT 1
52698: NEG
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 1
52706: PUSH
52707: LD_INT 0
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 1
52716: PUSH
52717: LD_INT 1
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 0
52726: PUSH
52727: LD_INT 1
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 1
52736: NEG
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 1
52747: NEG
52748: PUSH
52749: LD_INT 1
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52766: LD_ADDR_VAR 0 61
52770: PUSH
52771: LD_INT 0
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 0
52783: PUSH
52784: LD_INT 1
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 1
52794: PUSH
52795: LD_INT 0
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 1
52804: PUSH
52805: LD_INT 1
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 1
52824: NEG
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: LD_INT 1
52839: NEG
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52854: LD_ADDR_VAR 0 62
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 0
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 1
52882: PUSH
52883: LD_INT 0
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: LD_INT 1
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 0
52902: PUSH
52903: LD_INT 1
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 1
52912: NEG
52913: PUSH
52914: LD_INT 0
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 1
52923: NEG
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52942: LD_ADDR_VAR 0 63
52946: PUSH
52947: LD_INT 0
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 0
52959: PUSH
52960: LD_INT 1
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: LD_INT 0
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: LD_INT 0
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: NEG
53012: PUSH
53013: LD_INT 1
53015: NEG
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53030: LD_ADDR_VAR 0 64
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 0
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 1
53088: NEG
53089: PUSH
53090: LD_INT 0
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 1
53099: NEG
53100: PUSH
53101: LD_INT 1
53103: NEG
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: ST_TO_ADDR
// end ; 1 :
53118: GO 59015
53120: LD_INT 1
53122: DOUBLE
53123: EQUAL
53124: IFTRUE 53128
53126: GO 55751
53128: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53129: LD_ADDR_VAR 0 11
53133: PUSH
53134: LD_INT 1
53136: NEG
53137: PUSH
53138: LD_INT 3
53140: NEG
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: LD_INT 3
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: LD_INT 2
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: LIST
53172: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53173: LD_ADDR_VAR 0 12
53177: PUSH
53178: LD_INT 2
53180: PUSH
53181: LD_INT 1
53183: NEG
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 3
53191: PUSH
53192: LD_INT 0
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 3
53201: PUSH
53202: LD_INT 1
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: LIST
53213: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53214: LD_ADDR_VAR 0 13
53218: PUSH
53219: LD_INT 3
53221: PUSH
53222: LD_INT 2
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 3
53231: PUSH
53232: LD_INT 3
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 2
53241: PUSH
53242: LD_INT 3
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: LIST
53253: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53254: LD_ADDR_VAR 0 14
53258: PUSH
53259: LD_INT 1
53261: PUSH
53262: LD_INT 3
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: LD_INT 3
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: LD_INT 2
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: LIST
53294: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53295: LD_ADDR_VAR 0 15
53299: PUSH
53300: LD_INT 2
53302: NEG
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 3
53313: NEG
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 3
53324: NEG
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: LIST
53338: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53339: LD_ADDR_VAR 0 16
53343: PUSH
53344: LD_INT 2
53346: NEG
53347: PUSH
53348: LD_INT 3
53350: NEG
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 3
53358: NEG
53359: PUSH
53360: LD_INT 2
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 3
53370: NEG
53371: PUSH
53372: LD_INT 3
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: LIST
53384: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53385: LD_ADDR_VAR 0 17
53389: PUSH
53390: LD_INT 1
53392: NEG
53393: PUSH
53394: LD_INT 3
53396: NEG
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: LD_INT 3
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: LD_INT 2
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: LIST
53428: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53429: LD_ADDR_VAR 0 18
53433: PUSH
53434: LD_INT 2
53436: PUSH
53437: LD_INT 1
53439: NEG
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 3
53447: PUSH
53448: LD_INT 0
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 3
53457: PUSH
53458: LD_INT 1
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: LIST
53469: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53470: LD_ADDR_VAR 0 19
53474: PUSH
53475: LD_INT 3
53477: PUSH
53478: LD_INT 2
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 3
53487: PUSH
53488: LD_INT 3
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 2
53497: PUSH
53498: LD_INT 3
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: LIST
53509: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53510: LD_ADDR_VAR 0 20
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: LD_INT 3
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: LD_INT 3
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 1
53537: NEG
53538: PUSH
53539: LD_INT 2
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: LIST
53550: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53551: LD_ADDR_VAR 0 21
53555: PUSH
53556: LD_INT 2
53558: NEG
53559: PUSH
53560: LD_INT 1
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 3
53569: NEG
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 3
53580: NEG
53581: PUSH
53582: LD_INT 1
53584: NEG
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: LIST
53594: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53595: LD_ADDR_VAR 0 22
53599: PUSH
53600: LD_INT 2
53602: NEG
53603: PUSH
53604: LD_INT 3
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 3
53614: NEG
53615: PUSH
53616: LD_INT 2
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 3
53626: NEG
53627: PUSH
53628: LD_INT 3
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: LIST
53640: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53641: LD_ADDR_VAR 0 23
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: LD_INT 3
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 1
53659: NEG
53660: PUSH
53661: LD_INT 4
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 1
53671: PUSH
53672: LD_INT 3
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: LIST
53684: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53685: LD_ADDR_VAR 0 24
53689: PUSH
53690: LD_INT 3
53692: PUSH
53693: LD_INT 0
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 3
53702: PUSH
53703: LD_INT 1
53705: NEG
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 4
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: LIST
53725: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53726: LD_ADDR_VAR 0 25
53730: PUSH
53731: LD_INT 3
53733: PUSH
53734: LD_INT 3
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 4
53743: PUSH
53744: LD_INT 3
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 3
53753: PUSH
53754: LD_INT 4
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: LIST
53765: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53766: LD_ADDR_VAR 0 26
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: LD_INT 3
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: LD_INT 4
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 1
53793: NEG
53794: PUSH
53795: LD_INT 3
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: LIST
53806: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53807: LD_ADDR_VAR 0 27
53811: PUSH
53812: LD_INT 3
53814: NEG
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 3
53825: NEG
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 4
53836: NEG
53837: PUSH
53838: LD_INT 1
53840: NEG
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: LIST
53850: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53851: LD_ADDR_VAR 0 28
53855: PUSH
53856: LD_INT 3
53858: NEG
53859: PUSH
53860: LD_INT 3
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 3
53870: NEG
53871: PUSH
53872: LD_INT 4
53874: NEG
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 4
53882: NEG
53883: PUSH
53884: LD_INT 3
53886: NEG
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: LIST
53896: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53897: LD_ADDR_VAR 0 29
53901: PUSH
53902: LD_INT 1
53904: NEG
53905: PUSH
53906: LD_INT 3
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: LD_INT 3
53919: NEG
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: LD_INT 2
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 1
53938: NEG
53939: PUSH
53940: LD_INT 4
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: LD_INT 4
53953: NEG
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 1
53961: PUSH
53962: LD_INT 3
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: LD_INT 5
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: LD_INT 5
53987: NEG
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: PUSH
53996: LD_INT 4
53998: NEG
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 1
54006: NEG
54007: PUSH
54008: LD_INT 6
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: LD_INT 6
54021: NEG
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 1
54029: PUSH
54030: LD_INT 5
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54052: LD_ADDR_VAR 0 30
54056: PUSH
54057: LD_INT 2
54059: PUSH
54060: LD_INT 1
54062: NEG
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 3
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 3
54080: PUSH
54081: LD_INT 1
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 3
54090: PUSH
54091: LD_INT 1
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 4
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 4
54111: PUSH
54112: LD_INT 1
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 4
54121: PUSH
54122: LD_INT 1
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 5
54132: PUSH
54133: LD_INT 0
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 5
54142: PUSH
54143: LD_INT 1
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 5
54152: PUSH
54153: LD_INT 1
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 6
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 6
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54195: LD_ADDR_VAR 0 31
54199: PUSH
54200: LD_INT 3
54202: PUSH
54203: LD_INT 2
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 3
54212: PUSH
54213: LD_INT 3
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 2
54222: PUSH
54223: LD_INT 3
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 4
54232: PUSH
54233: LD_INT 3
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 4
54242: PUSH
54243: LD_INT 4
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 3
54252: PUSH
54253: LD_INT 4
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 5
54262: PUSH
54263: LD_INT 4
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 5
54272: PUSH
54273: LD_INT 5
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 4
54282: PUSH
54283: LD_INT 5
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 6
54292: PUSH
54293: LD_INT 5
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 6
54302: PUSH
54303: LD_INT 6
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 5
54312: PUSH
54313: LD_INT 6
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54334: LD_ADDR_VAR 0 32
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: LD_INT 3
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: LD_INT 3
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: LD_INT 2
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 1
54372: PUSH
54373: LD_INT 4
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 0
54382: PUSH
54383: LD_INT 4
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: NEG
54393: PUSH
54394: LD_INT 3
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 1
54403: PUSH
54404: LD_INT 5
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 0
54413: PUSH
54414: LD_INT 5
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 1
54423: NEG
54424: PUSH
54425: LD_INT 4
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 1
54434: PUSH
54435: LD_INT 6
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 0
54444: PUSH
54445: LD_INT 6
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 1
54454: NEG
54455: PUSH
54456: LD_INT 5
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54477: LD_ADDR_VAR 0 33
54481: PUSH
54482: LD_INT 2
54484: NEG
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 3
54495: NEG
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 3
54506: NEG
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 3
54518: NEG
54519: PUSH
54520: LD_INT 1
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 4
54529: NEG
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 4
54540: NEG
54541: PUSH
54542: LD_INT 1
54544: NEG
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 4
54552: NEG
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 5
54563: NEG
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 5
54574: NEG
54575: PUSH
54576: LD_INT 1
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 5
54586: NEG
54587: PUSH
54588: LD_INT 1
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 6
54597: NEG
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 6
54608: NEG
54609: PUSH
54610: LD_INT 1
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54632: LD_ADDR_VAR 0 34
54636: PUSH
54637: LD_INT 2
54639: NEG
54640: PUSH
54641: LD_INT 3
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 3
54651: NEG
54652: PUSH
54653: LD_INT 2
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 3
54663: NEG
54664: PUSH
54665: LD_INT 3
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 3
54675: NEG
54676: PUSH
54677: LD_INT 4
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 4
54687: NEG
54688: PUSH
54689: LD_INT 3
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 4
54699: NEG
54700: PUSH
54701: LD_INT 4
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 4
54711: NEG
54712: PUSH
54713: LD_INT 5
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 5
54723: NEG
54724: PUSH
54725: LD_INT 4
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 5
54735: NEG
54736: PUSH
54737: LD_INT 5
54739: NEG
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 5
54747: NEG
54748: PUSH
54749: LD_INT 6
54751: NEG
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 6
54759: NEG
54760: PUSH
54761: LD_INT 5
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 6
54771: NEG
54772: PUSH
54773: LD_INT 6
54775: NEG
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54795: LD_ADDR_VAR 0 41
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: LD_INT 2
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 1
54813: NEG
54814: PUSH
54815: LD_INT 3
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: LD_INT 2
54828: NEG
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: LIST
54838: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54839: LD_ADDR_VAR 0 42
54843: PUSH
54844: LD_INT 2
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 2
54856: PUSH
54857: LD_INT 1
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 3
54867: PUSH
54868: LD_INT 1
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: LIST
54879: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54880: LD_ADDR_VAR 0 43
54884: PUSH
54885: LD_INT 2
54887: PUSH
54888: LD_INT 2
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 3
54897: PUSH
54898: LD_INT 2
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 2
54907: PUSH
54908: LD_INT 3
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: LIST
54919: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54920: LD_ADDR_VAR 0 44
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: LD_INT 2
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: PUSH
54938: LD_INT 3
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 1
54947: NEG
54948: PUSH
54949: LD_INT 2
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: LIST
54960: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54961: LD_ADDR_VAR 0 45
54965: PUSH
54966: LD_INT 2
54968: NEG
54969: PUSH
54970: LD_INT 0
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 2
54979: NEG
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 3
54990: NEG
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: LIST
55004: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55005: LD_ADDR_VAR 0 46
55009: PUSH
55010: LD_INT 2
55012: NEG
55013: PUSH
55014: LD_INT 2
55016: NEG
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 2
55024: NEG
55025: PUSH
55026: LD_INT 3
55028: NEG
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 3
55036: NEG
55037: PUSH
55038: LD_INT 2
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: LIST
55050: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55051: LD_ADDR_VAR 0 47
55055: PUSH
55056: LD_INT 2
55058: NEG
55059: PUSH
55060: LD_INT 3
55062: NEG
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 1
55070: NEG
55071: PUSH
55072: LD_INT 3
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55084: LD_ADDR_VAR 0 48
55088: PUSH
55089: LD_INT 1
55091: PUSH
55092: LD_INT 2
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 2
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55115: LD_ADDR_VAR 0 49
55119: PUSH
55120: LD_INT 3
55122: PUSH
55123: LD_INT 1
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 3
55132: PUSH
55133: LD_INT 2
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55144: LD_ADDR_VAR 0 50
55148: PUSH
55149: LD_INT 2
55151: PUSH
55152: LD_INT 3
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 1
55161: PUSH
55162: LD_INT 3
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55173: LD_ADDR_VAR 0 51
55177: PUSH
55178: LD_INT 1
55180: NEG
55181: PUSH
55182: LD_INT 2
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 2
55191: NEG
55192: PUSH
55193: LD_INT 1
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55204: LD_ADDR_VAR 0 52
55208: PUSH
55209: LD_INT 3
55211: NEG
55212: PUSH
55213: LD_INT 1
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 3
55223: NEG
55224: PUSH
55225: LD_INT 2
55227: NEG
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55237: LD_ADDR_VAR 0 53
55241: PUSH
55242: LD_INT 1
55244: NEG
55245: PUSH
55246: LD_INT 3
55248: NEG
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: LD_INT 3
55259: NEG
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: LD_INT 2
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: LIST
55280: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55281: LD_ADDR_VAR 0 54
55285: PUSH
55286: LD_INT 2
55288: PUSH
55289: LD_INT 1
55291: NEG
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 3
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 3
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: LIST
55321: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55322: LD_ADDR_VAR 0 55
55326: PUSH
55327: LD_INT 3
55329: PUSH
55330: LD_INT 2
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 3
55339: PUSH
55340: LD_INT 3
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 2
55349: PUSH
55350: LD_INT 3
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: LIST
55361: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55362: LD_ADDR_VAR 0 56
55366: PUSH
55367: LD_INT 1
55369: PUSH
55370: LD_INT 3
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: LD_INT 3
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 1
55389: NEG
55390: PUSH
55391: LD_INT 2
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: LIST
55402: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55403: LD_ADDR_VAR 0 57
55407: PUSH
55408: LD_INT 2
55410: NEG
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 3
55421: NEG
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 3
55432: NEG
55433: PUSH
55434: LD_INT 1
55436: NEG
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: LIST
55446: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55447: LD_ADDR_VAR 0 58
55451: PUSH
55452: LD_INT 2
55454: NEG
55455: PUSH
55456: LD_INT 3
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 3
55466: NEG
55467: PUSH
55468: LD_INT 2
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 3
55478: NEG
55479: PUSH
55480: LD_INT 3
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: LIST
55492: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55493: LD_ADDR_VAR 0 59
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: LD_INT 2
55504: NEG
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 0
55512: PUSH
55513: LD_INT 2
55515: NEG
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 1
55523: PUSH
55524: LD_INT 1
55526: NEG
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: LIST
55536: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55537: LD_ADDR_VAR 0 60
55541: PUSH
55542: LD_INT 1
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 2
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 2
55565: PUSH
55566: LD_INT 1
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: LIST
55577: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55578: LD_ADDR_VAR 0 61
55582: PUSH
55583: LD_INT 2
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 2
55595: PUSH
55596: LD_INT 2
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: LD_INT 2
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: LIST
55617: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55618: LD_ADDR_VAR 0 62
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: LD_INT 2
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: LD_INT 2
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 1
55645: NEG
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: LIST
55658: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55659: LD_ADDR_VAR 0 63
55663: PUSH
55664: LD_INT 1
55666: NEG
55667: PUSH
55668: LD_INT 1
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 2
55677: NEG
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 2
55688: NEG
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: LIST
55702: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55703: LD_ADDR_VAR 0 64
55707: PUSH
55708: LD_INT 1
55710: NEG
55711: PUSH
55712: LD_INT 2
55714: NEG
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 2
55722: NEG
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 2
55734: NEG
55735: PUSH
55736: LD_INT 2
55738: NEG
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: LIST
55748: ST_TO_ADDR
// end ; 2 :
55749: GO 59015
55751: LD_INT 2
55753: DOUBLE
55754: EQUAL
55755: IFTRUE 55759
55757: GO 59014
55759: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55760: LD_ADDR_VAR 0 29
55764: PUSH
55765: LD_INT 4
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 4
55777: PUSH
55778: LD_INT 1
55780: NEG
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 5
55788: PUSH
55789: LD_INT 0
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 5
55798: PUSH
55799: LD_INT 1
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 4
55808: PUSH
55809: LD_INT 1
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 3
55818: PUSH
55819: LD_INT 0
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 3
55828: PUSH
55829: LD_INT 1
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 3
55839: PUSH
55840: LD_INT 2
55842: NEG
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 5
55850: PUSH
55851: LD_INT 2
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 3
55860: PUSH
55861: LD_INT 3
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 3
55870: PUSH
55871: LD_INT 2
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 4
55880: PUSH
55881: LD_INT 3
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 4
55890: PUSH
55891: LD_INT 4
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 3
55900: PUSH
55901: LD_INT 4
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 2
55910: PUSH
55911: LD_INT 3
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 2
55920: PUSH
55921: LD_INT 2
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 4
55930: PUSH
55931: LD_INT 2
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 2
55940: PUSH
55941: LD_INT 4
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: LD_INT 4
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 0
55960: PUSH
55961: LD_INT 3
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 1
55970: PUSH
55971: LD_INT 4
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 1
55980: PUSH
55981: LD_INT 5
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: LD_INT 5
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 1
56000: NEG
56001: PUSH
56002: LD_INT 4
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 1
56011: NEG
56012: PUSH
56013: LD_INT 3
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 2
56022: PUSH
56023: LD_INT 5
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 2
56032: NEG
56033: PUSH
56034: LD_INT 3
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 3
56043: NEG
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 3
56054: NEG
56055: PUSH
56056: LD_INT 1
56058: NEG
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 2
56066: NEG
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 2
56077: NEG
56078: PUSH
56079: LD_INT 1
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 3
56088: NEG
56089: PUSH
56090: LD_INT 1
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 4
56099: NEG
56100: PUSH
56101: LD_INT 0
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 4
56110: NEG
56111: PUSH
56112: LD_INT 1
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 4
56122: NEG
56123: PUSH
56124: LD_INT 2
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 2
56134: NEG
56135: PUSH
56136: LD_INT 2
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 4
56145: NEG
56146: PUSH
56147: LD_INT 4
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 4
56157: NEG
56158: PUSH
56159: LD_INT 5
56161: NEG
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 3
56169: NEG
56170: PUSH
56171: LD_INT 4
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 3
56181: NEG
56182: PUSH
56183: LD_INT 3
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 4
56193: NEG
56194: PUSH
56195: LD_INT 3
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 5
56205: NEG
56206: PUSH
56207: LD_INT 4
56209: NEG
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 5
56217: NEG
56218: PUSH
56219: LD_INT 5
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 3
56229: NEG
56230: PUSH
56231: LD_INT 5
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 5
56241: NEG
56242: PUSH
56243: LD_INT 3
56245: NEG
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56298: LD_ADDR_VAR 0 30
56302: PUSH
56303: LD_INT 4
56305: PUSH
56306: LD_INT 4
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 4
56315: PUSH
56316: LD_INT 3
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 5
56325: PUSH
56326: LD_INT 4
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 5
56335: PUSH
56336: LD_INT 5
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 4
56345: PUSH
56346: LD_INT 5
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 3
56355: PUSH
56356: LD_INT 4
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 3
56365: PUSH
56366: LD_INT 3
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 5
56375: PUSH
56376: LD_INT 3
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 3
56385: PUSH
56386: LD_INT 5
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: LD_INT 3
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: LD_INT 2
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: PUSH
56416: LD_INT 3
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 1
56425: PUSH
56426: LD_INT 4
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 0
56435: PUSH
56436: LD_INT 4
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 1
56445: NEG
56446: PUSH
56447: LD_INT 3
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 1
56456: NEG
56457: PUSH
56458: LD_INT 2
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 2
56467: PUSH
56468: LD_INT 4
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 2
56477: NEG
56478: PUSH
56479: LD_INT 2
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 4
56488: NEG
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 4
56499: NEG
56500: PUSH
56501: LD_INT 1
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 3
56511: NEG
56512: PUSH
56513: LD_INT 0
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 3
56522: NEG
56523: PUSH
56524: LD_INT 1
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 4
56533: NEG
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 5
56544: NEG
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 5
56555: NEG
56556: PUSH
56557: LD_INT 1
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 5
56567: NEG
56568: PUSH
56569: LD_INT 2
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 3
56579: NEG
56580: PUSH
56581: LD_INT 2
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 3
56590: NEG
56591: PUSH
56592: LD_INT 3
56594: NEG
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 3
56602: NEG
56603: PUSH
56604: LD_INT 4
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 2
56614: NEG
56615: PUSH
56616: LD_INT 3
56618: NEG
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 2
56626: NEG
56627: PUSH
56628: LD_INT 2
56630: NEG
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 3
56638: NEG
56639: PUSH
56640: LD_INT 2
56642: NEG
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 4
56650: NEG
56651: PUSH
56652: LD_INT 3
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 4
56662: NEG
56663: PUSH
56664: LD_INT 4
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 2
56674: NEG
56675: PUSH
56676: LD_INT 4
56678: NEG
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 4
56686: NEG
56687: PUSH
56688: LD_INT 2
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: LD_INT 4
56701: NEG
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: LD_INT 5
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 1
56720: PUSH
56721: LD_INT 4
56723: NEG
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 1
56731: PUSH
56732: LD_INT 3
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: LD_INT 3
56745: NEG
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 1
56753: NEG
56754: PUSH
56755: LD_INT 4
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 1
56765: NEG
56766: PUSH
56767: LD_INT 5
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 2
56777: PUSH
56778: LD_INT 3
56780: NEG
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 2
56788: NEG
56789: PUSH
56790: LD_INT 5
56792: NEG
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56845: LD_ADDR_VAR 0 31
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: LD_INT 4
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: LD_INT 3
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: LD_INT 4
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 1
56882: PUSH
56883: LD_INT 5
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 0
56892: PUSH
56893: LD_INT 5
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 1
56902: NEG
56903: PUSH
56904: LD_INT 4
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 1
56913: NEG
56914: PUSH
56915: LD_INT 3
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 2
56924: PUSH
56925: LD_INT 5
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 2
56934: NEG
56935: PUSH
56936: LD_INT 3
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 3
56945: NEG
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 3
56956: NEG
56957: PUSH
56958: LD_INT 1
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 2
56968: NEG
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 2
56979: NEG
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 3
56990: NEG
56991: PUSH
56992: LD_INT 1
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 4
57001: NEG
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 4
57012: NEG
57013: PUSH
57014: LD_INT 1
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 4
57024: NEG
57025: PUSH
57026: LD_INT 2
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 2
57036: NEG
57037: PUSH
57038: LD_INT 2
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 4
57047: NEG
57048: PUSH
57049: LD_INT 4
57051: NEG
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 4
57059: NEG
57060: PUSH
57061: LD_INT 5
57063: NEG
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 3
57071: NEG
57072: PUSH
57073: LD_INT 4
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 3
57083: NEG
57084: PUSH
57085: LD_INT 3
57087: NEG
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 4
57095: NEG
57096: PUSH
57097: LD_INT 3
57099: NEG
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 5
57107: NEG
57108: PUSH
57109: LD_INT 4
57111: NEG
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 5
57119: NEG
57120: PUSH
57121: LD_INT 5
57123: NEG
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 3
57131: NEG
57132: PUSH
57133: LD_INT 5
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 5
57143: NEG
57144: PUSH
57145: LD_INT 3
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: LD_INT 3
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 0
57166: PUSH
57167: LD_INT 4
57169: NEG
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 1
57177: PUSH
57178: LD_INT 3
57180: NEG
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 1
57188: PUSH
57189: LD_INT 2
57191: NEG
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 0
57199: PUSH
57200: LD_INT 2
57202: NEG
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 1
57210: NEG
57211: PUSH
57212: LD_INT 3
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 1
57222: NEG
57223: PUSH
57224: LD_INT 4
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 2
57234: PUSH
57235: LD_INT 2
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 2
57245: NEG
57246: PUSH
57247: LD_INT 4
57249: NEG
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 4
57257: PUSH
57258: LD_INT 0
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 4
57267: PUSH
57268: LD_INT 1
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 5
57278: PUSH
57279: LD_INT 0
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 5
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 4
57298: PUSH
57299: LD_INT 1
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 3
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 3
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 3
57329: PUSH
57330: LD_INT 2
57332: NEG
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 5
57340: PUSH
57341: LD_INT 2
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57395: LD_ADDR_VAR 0 32
57399: PUSH
57400: LD_INT 4
57402: NEG
57403: PUSH
57404: LD_INT 0
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 4
57413: NEG
57414: PUSH
57415: LD_INT 1
57417: NEG
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 3
57425: NEG
57426: PUSH
57427: LD_INT 0
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 3
57436: NEG
57437: PUSH
57438: LD_INT 1
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 4
57447: NEG
57448: PUSH
57449: LD_INT 1
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 5
57458: NEG
57459: PUSH
57460: LD_INT 0
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 5
57469: NEG
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 5
57481: NEG
57482: PUSH
57483: LD_INT 2
57485: NEG
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 3
57493: NEG
57494: PUSH
57495: LD_INT 2
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 3
57504: NEG
57505: PUSH
57506: LD_INT 3
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 3
57516: NEG
57517: PUSH
57518: LD_INT 4
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 2
57528: NEG
57529: PUSH
57530: LD_INT 3
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 2
57540: NEG
57541: PUSH
57542: LD_INT 2
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 3
57552: NEG
57553: PUSH
57554: LD_INT 2
57556: NEG
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 4
57564: NEG
57565: PUSH
57566: LD_INT 3
57568: NEG
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 4
57576: NEG
57577: PUSH
57578: LD_INT 4
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 2
57588: NEG
57589: PUSH
57590: LD_INT 4
57592: NEG
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 4
57600: NEG
57601: PUSH
57602: LD_INT 2
57604: NEG
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 0
57612: PUSH
57613: LD_INT 4
57615: NEG
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: LD_INT 5
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 1
57634: PUSH
57635: LD_INT 4
57637: NEG
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 1
57645: PUSH
57646: LD_INT 3
57648: NEG
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: LD_INT 3
57659: NEG
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 1
57667: NEG
57668: PUSH
57669: LD_INT 4
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 1
57679: NEG
57680: PUSH
57681: LD_INT 5
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 2
57691: PUSH
57692: LD_INT 3
57694: NEG
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 2
57702: NEG
57703: PUSH
57704: LD_INT 5
57706: NEG
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 3
57714: PUSH
57715: LD_INT 0
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 3
57724: PUSH
57725: LD_INT 1
57727: NEG
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 4
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 4
57745: PUSH
57746: LD_INT 1
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 3
57755: PUSH
57756: LD_INT 1
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 2
57765: PUSH
57766: LD_INT 0
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 2
57775: PUSH
57776: LD_INT 1
57778: NEG
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 2
57786: PUSH
57787: LD_INT 2
57789: NEG
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 4
57797: PUSH
57798: LD_INT 2
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 4
57807: PUSH
57808: LD_INT 4
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 4
57817: PUSH
57818: LD_INT 3
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 5
57827: PUSH
57828: LD_INT 4
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 5
57837: PUSH
57838: LD_INT 5
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 4
57847: PUSH
57848: LD_INT 5
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 3
57857: PUSH
57858: LD_INT 4
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 3
57867: PUSH
57868: LD_INT 3
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 5
57877: PUSH
57878: LD_INT 3
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 3
57887: PUSH
57888: LD_INT 5
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57942: LD_ADDR_VAR 0 33
57946: PUSH
57947: LD_INT 4
57949: NEG
57950: PUSH
57951: LD_INT 4
57953: NEG
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 4
57961: NEG
57962: PUSH
57963: LD_INT 5
57965: NEG
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 3
57973: NEG
57974: PUSH
57975: LD_INT 4
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 3
57985: NEG
57986: PUSH
57987: LD_INT 3
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 4
57997: NEG
57998: PUSH
57999: LD_INT 3
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 5
58009: NEG
58010: PUSH
58011: LD_INT 4
58013: NEG
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 5
58021: NEG
58022: PUSH
58023: LD_INT 5
58025: NEG
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 3
58033: NEG
58034: PUSH
58035: LD_INT 5
58037: NEG
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 5
58045: NEG
58046: PUSH
58047: LD_INT 3
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 0
58057: PUSH
58058: LD_INT 3
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 0
58068: PUSH
58069: LD_INT 4
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 1
58079: PUSH
58080: LD_INT 3
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 1
58090: PUSH
58091: LD_INT 2
58093: NEG
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 0
58101: PUSH
58102: LD_INT 2
58104: NEG
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 1
58112: NEG
58113: PUSH
58114: LD_INT 3
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 1
58124: NEG
58125: PUSH
58126: LD_INT 4
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 2
58136: PUSH
58137: LD_INT 2
58139: NEG
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 2
58147: NEG
58148: PUSH
58149: LD_INT 4
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 4
58159: PUSH
58160: LD_INT 0
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 4
58169: PUSH
58170: LD_INT 1
58172: NEG
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 5
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 5
58190: PUSH
58191: LD_INT 1
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 4
58200: PUSH
58201: LD_INT 1
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 3
58210: PUSH
58211: LD_INT 0
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 3
58220: PUSH
58221: LD_INT 1
58223: NEG
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 3
58231: PUSH
58232: LD_INT 2
58234: NEG
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 5
58242: PUSH
58243: LD_INT 2
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 3
58252: PUSH
58253: LD_INT 3
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 3
58262: PUSH
58263: LD_INT 2
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 4
58272: PUSH
58273: LD_INT 3
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 4
58282: PUSH
58283: LD_INT 4
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 3
58292: PUSH
58293: LD_INT 4
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 2
58302: PUSH
58303: LD_INT 3
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 2
58312: PUSH
58313: LD_INT 2
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 4
58322: PUSH
58323: LD_INT 2
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 2
58332: PUSH
58333: LD_INT 4
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 0
58342: PUSH
58343: LD_INT 4
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 0
58352: PUSH
58353: LD_INT 3
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 1
58362: PUSH
58363: LD_INT 4
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 1
58372: PUSH
58373: LD_INT 5
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 0
58382: PUSH
58383: LD_INT 5
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 1
58392: NEG
58393: PUSH
58394: LD_INT 4
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 1
58403: NEG
58404: PUSH
58405: LD_INT 3
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 2
58414: PUSH
58415: LD_INT 5
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 2
58424: NEG
58425: PUSH
58426: LD_INT 3
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58480: LD_ADDR_VAR 0 34
58484: PUSH
58485: LD_INT 0
58487: PUSH
58488: LD_INT 4
58490: NEG
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 0
58498: PUSH
58499: LD_INT 5
58501: NEG
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 1
58509: PUSH
58510: LD_INT 4
58512: NEG
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 1
58520: PUSH
58521: LD_INT 3
58523: NEG
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 0
58531: PUSH
58532: LD_INT 3
58534: NEG
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 1
58542: NEG
58543: PUSH
58544: LD_INT 4
58546: NEG
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 1
58554: NEG
58555: PUSH
58556: LD_INT 5
58558: NEG
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 2
58566: PUSH
58567: LD_INT 3
58569: NEG
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 2
58577: NEG
58578: PUSH
58579: LD_INT 5
58581: NEG
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 3
58589: PUSH
58590: LD_INT 0
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 3
58599: PUSH
58600: LD_INT 1
58602: NEG
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 4
58610: PUSH
58611: LD_INT 0
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 4
58620: PUSH
58621: LD_INT 1
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 3
58630: PUSH
58631: LD_INT 1
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 2
58640: PUSH
58641: LD_INT 0
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 2
58650: PUSH
58651: LD_INT 1
58653: NEG
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 2
58661: PUSH
58662: LD_INT 2
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 4
58672: PUSH
58673: LD_INT 2
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 4
58682: PUSH
58683: LD_INT 4
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 4
58692: PUSH
58693: LD_INT 3
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 5
58702: PUSH
58703: LD_INT 4
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 5
58712: PUSH
58713: LD_INT 5
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 4
58722: PUSH
58723: LD_INT 5
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 3
58732: PUSH
58733: LD_INT 4
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 3
58742: PUSH
58743: LD_INT 3
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 5
58752: PUSH
58753: LD_INT 3
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 3
58762: PUSH
58763: LD_INT 5
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 0
58772: PUSH
58773: LD_INT 3
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 0
58782: PUSH
58783: LD_INT 2
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 1
58792: PUSH
58793: LD_INT 3
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 1
58802: PUSH
58803: LD_INT 4
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 0
58812: PUSH
58813: LD_INT 4
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 1
58822: NEG
58823: PUSH
58824: LD_INT 3
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 1
58833: NEG
58834: PUSH
58835: LD_INT 2
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 2
58844: PUSH
58845: LD_INT 4
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 2
58854: NEG
58855: PUSH
58856: LD_INT 2
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 4
58865: NEG
58866: PUSH
58867: LD_INT 0
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 4
58876: NEG
58877: PUSH
58878: LD_INT 1
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 3
58888: NEG
58889: PUSH
58890: LD_INT 0
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 3
58899: NEG
58900: PUSH
58901: LD_INT 1
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 4
58910: NEG
58911: PUSH
58912: LD_INT 1
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 5
58921: NEG
58922: PUSH
58923: LD_INT 0
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 5
58932: NEG
58933: PUSH
58934: LD_INT 1
58936: NEG
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 5
58944: NEG
58945: PUSH
58946: LD_INT 2
58948: NEG
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 3
58956: NEG
58957: PUSH
58958: LD_INT 2
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: ST_TO_ADDR
// end ; end ;
59012: GO 59015
59014: POP
// case btype of b_depot , b_warehouse :
59015: LD_VAR 0 1
59019: PUSH
59020: LD_INT 0
59022: DOUBLE
59023: EQUAL
59024: IFTRUE 59034
59026: LD_INT 1
59028: DOUBLE
59029: EQUAL
59030: IFTRUE 59034
59032: GO 59235
59034: POP
// case nation of nation_american :
59035: LD_VAR 0 5
59039: PUSH
59040: LD_INT 1
59042: DOUBLE
59043: EQUAL
59044: IFTRUE 59048
59046: GO 59104
59048: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
59049: LD_ADDR_VAR 0 9
59053: PUSH
59054: LD_VAR 0 11
59058: PUSH
59059: LD_VAR 0 12
59063: PUSH
59064: LD_VAR 0 13
59068: PUSH
59069: LD_VAR 0 14
59073: PUSH
59074: LD_VAR 0 15
59078: PUSH
59079: LD_VAR 0 16
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: PUSH
59092: LD_VAR 0 4
59096: PUSH
59097: LD_INT 1
59099: PLUS
59100: ARRAY
59101: ST_TO_ADDR
59102: GO 59233
59104: LD_INT 2
59106: DOUBLE
59107: EQUAL
59108: IFTRUE 59112
59110: GO 59168
59112: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
59113: LD_ADDR_VAR 0 9
59117: PUSH
59118: LD_VAR 0 17
59122: PUSH
59123: LD_VAR 0 18
59127: PUSH
59128: LD_VAR 0 19
59132: PUSH
59133: LD_VAR 0 20
59137: PUSH
59138: LD_VAR 0 21
59142: PUSH
59143: LD_VAR 0 22
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: PUSH
59156: LD_VAR 0 4
59160: PUSH
59161: LD_INT 1
59163: PLUS
59164: ARRAY
59165: ST_TO_ADDR
59166: GO 59233
59168: LD_INT 3
59170: DOUBLE
59171: EQUAL
59172: IFTRUE 59176
59174: GO 59232
59176: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59177: LD_ADDR_VAR 0 9
59181: PUSH
59182: LD_VAR 0 23
59186: PUSH
59187: LD_VAR 0 24
59191: PUSH
59192: LD_VAR 0 25
59196: PUSH
59197: LD_VAR 0 26
59201: PUSH
59202: LD_VAR 0 27
59206: PUSH
59207: LD_VAR 0 28
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: PUSH
59220: LD_VAR 0 4
59224: PUSH
59225: LD_INT 1
59227: PLUS
59228: ARRAY
59229: ST_TO_ADDR
59230: GO 59233
59232: POP
59233: GO 59788
59235: LD_INT 2
59237: DOUBLE
59238: EQUAL
59239: IFTRUE 59249
59241: LD_INT 3
59243: DOUBLE
59244: EQUAL
59245: IFTRUE 59249
59247: GO 59305
59249: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59250: LD_ADDR_VAR 0 9
59254: PUSH
59255: LD_VAR 0 29
59259: PUSH
59260: LD_VAR 0 30
59264: PUSH
59265: LD_VAR 0 31
59269: PUSH
59270: LD_VAR 0 32
59274: PUSH
59275: LD_VAR 0 33
59279: PUSH
59280: LD_VAR 0 34
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: PUSH
59293: LD_VAR 0 4
59297: PUSH
59298: LD_INT 1
59300: PLUS
59301: ARRAY
59302: ST_TO_ADDR
59303: GO 59788
59305: LD_INT 16
59307: DOUBLE
59308: EQUAL
59309: IFTRUE 59367
59311: LD_INT 17
59313: DOUBLE
59314: EQUAL
59315: IFTRUE 59367
59317: LD_INT 18
59319: DOUBLE
59320: EQUAL
59321: IFTRUE 59367
59323: LD_INT 19
59325: DOUBLE
59326: EQUAL
59327: IFTRUE 59367
59329: LD_INT 22
59331: DOUBLE
59332: EQUAL
59333: IFTRUE 59367
59335: LD_INT 20
59337: DOUBLE
59338: EQUAL
59339: IFTRUE 59367
59341: LD_INT 21
59343: DOUBLE
59344: EQUAL
59345: IFTRUE 59367
59347: LD_INT 23
59349: DOUBLE
59350: EQUAL
59351: IFTRUE 59367
59353: LD_INT 24
59355: DOUBLE
59356: EQUAL
59357: IFTRUE 59367
59359: LD_INT 25
59361: DOUBLE
59362: EQUAL
59363: IFTRUE 59367
59365: GO 59423
59367: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59368: LD_ADDR_VAR 0 9
59372: PUSH
59373: LD_VAR 0 35
59377: PUSH
59378: LD_VAR 0 36
59382: PUSH
59383: LD_VAR 0 37
59387: PUSH
59388: LD_VAR 0 38
59392: PUSH
59393: LD_VAR 0 39
59397: PUSH
59398: LD_VAR 0 40
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: PUSH
59411: LD_VAR 0 4
59415: PUSH
59416: LD_INT 1
59418: PLUS
59419: ARRAY
59420: ST_TO_ADDR
59421: GO 59788
59423: LD_INT 6
59425: DOUBLE
59426: EQUAL
59427: IFTRUE 59479
59429: LD_INT 7
59431: DOUBLE
59432: EQUAL
59433: IFTRUE 59479
59435: LD_INT 8
59437: DOUBLE
59438: EQUAL
59439: IFTRUE 59479
59441: LD_INT 13
59443: DOUBLE
59444: EQUAL
59445: IFTRUE 59479
59447: LD_INT 12
59449: DOUBLE
59450: EQUAL
59451: IFTRUE 59479
59453: LD_INT 15
59455: DOUBLE
59456: EQUAL
59457: IFTRUE 59479
59459: LD_INT 11
59461: DOUBLE
59462: EQUAL
59463: IFTRUE 59479
59465: LD_INT 14
59467: DOUBLE
59468: EQUAL
59469: IFTRUE 59479
59471: LD_INT 10
59473: DOUBLE
59474: EQUAL
59475: IFTRUE 59479
59477: GO 59535
59479: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
59480: LD_ADDR_VAR 0 9
59484: PUSH
59485: LD_VAR 0 41
59489: PUSH
59490: LD_VAR 0 42
59494: PUSH
59495: LD_VAR 0 43
59499: PUSH
59500: LD_VAR 0 44
59504: PUSH
59505: LD_VAR 0 45
59509: PUSH
59510: LD_VAR 0 46
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: PUSH
59523: LD_VAR 0 4
59527: PUSH
59528: LD_INT 1
59530: PLUS
59531: ARRAY
59532: ST_TO_ADDR
59533: GO 59788
59535: LD_INT 36
59537: DOUBLE
59538: EQUAL
59539: IFTRUE 59543
59541: GO 59599
59543: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59544: LD_ADDR_VAR 0 9
59548: PUSH
59549: LD_VAR 0 47
59553: PUSH
59554: LD_VAR 0 48
59558: PUSH
59559: LD_VAR 0 49
59563: PUSH
59564: LD_VAR 0 50
59568: PUSH
59569: LD_VAR 0 51
59573: PUSH
59574: LD_VAR 0 52
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: PUSH
59587: LD_VAR 0 4
59591: PUSH
59592: LD_INT 1
59594: PLUS
59595: ARRAY
59596: ST_TO_ADDR
59597: GO 59788
59599: LD_INT 4
59601: DOUBLE
59602: EQUAL
59603: IFTRUE 59625
59605: LD_INT 5
59607: DOUBLE
59608: EQUAL
59609: IFTRUE 59625
59611: LD_INT 34
59613: DOUBLE
59614: EQUAL
59615: IFTRUE 59625
59617: LD_INT 37
59619: DOUBLE
59620: EQUAL
59621: IFTRUE 59625
59623: GO 59681
59625: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59626: LD_ADDR_VAR 0 9
59630: PUSH
59631: LD_VAR 0 53
59635: PUSH
59636: LD_VAR 0 54
59640: PUSH
59641: LD_VAR 0 55
59645: PUSH
59646: LD_VAR 0 56
59650: PUSH
59651: LD_VAR 0 57
59655: PUSH
59656: LD_VAR 0 58
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: PUSH
59669: LD_VAR 0 4
59673: PUSH
59674: LD_INT 1
59676: PLUS
59677: ARRAY
59678: ST_TO_ADDR
59679: GO 59788
59681: LD_INT 31
59683: DOUBLE
59684: EQUAL
59685: IFTRUE 59731
59687: LD_INT 32
59689: DOUBLE
59690: EQUAL
59691: IFTRUE 59731
59693: LD_INT 33
59695: DOUBLE
59696: EQUAL
59697: IFTRUE 59731
59699: LD_INT 27
59701: DOUBLE
59702: EQUAL
59703: IFTRUE 59731
59705: LD_INT 26
59707: DOUBLE
59708: EQUAL
59709: IFTRUE 59731
59711: LD_INT 28
59713: DOUBLE
59714: EQUAL
59715: IFTRUE 59731
59717: LD_INT 29
59719: DOUBLE
59720: EQUAL
59721: IFTRUE 59731
59723: LD_INT 30
59725: DOUBLE
59726: EQUAL
59727: IFTRUE 59731
59729: GO 59787
59731: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
59732: LD_ADDR_VAR 0 9
59736: PUSH
59737: LD_VAR 0 59
59741: PUSH
59742: LD_VAR 0 60
59746: PUSH
59747: LD_VAR 0 61
59751: PUSH
59752: LD_VAR 0 62
59756: PUSH
59757: LD_VAR 0 63
59761: PUSH
59762: LD_VAR 0 64
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: PUSH
59775: LD_VAR 0 4
59779: PUSH
59780: LD_INT 1
59782: PLUS
59783: ARRAY
59784: ST_TO_ADDR
59785: GO 59788
59787: POP
// temp_list2 = [ ] ;
59788: LD_ADDR_VAR 0 10
59792: PUSH
59793: EMPTY
59794: ST_TO_ADDR
// for i in temp_list do
59795: LD_ADDR_VAR 0 8
59799: PUSH
59800: LD_VAR 0 9
59804: PUSH
59805: FOR_IN
59806: IFFALSE 59858
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59808: LD_ADDR_VAR 0 10
59812: PUSH
59813: LD_VAR 0 10
59817: PUSH
59818: LD_VAR 0 8
59822: PUSH
59823: LD_INT 1
59825: ARRAY
59826: PUSH
59827: LD_VAR 0 2
59831: PLUS
59832: PUSH
59833: LD_VAR 0 8
59837: PUSH
59838: LD_INT 2
59840: ARRAY
59841: PUSH
59842: LD_VAR 0 3
59846: PLUS
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: EMPTY
59853: LIST
59854: ADD
59855: ST_TO_ADDR
59856: GO 59805
59858: POP
59859: POP
// result = temp_list2 ;
59860: LD_ADDR_VAR 0 7
59864: PUSH
59865: LD_VAR 0 10
59869: ST_TO_ADDR
// end ;
59870: LD_VAR 0 7
59874: RET
// export function EnemyInRange ( unit , dist ) ; begin
59875: LD_INT 0
59877: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59878: LD_ADDR_VAR 0 3
59882: PUSH
59883: LD_VAR 0 1
59887: PPUSH
59888: CALL_OW 255
59892: PPUSH
59893: LD_VAR 0 1
59897: PPUSH
59898: CALL_OW 250
59902: PPUSH
59903: LD_VAR 0 1
59907: PPUSH
59908: CALL_OW 251
59912: PPUSH
59913: LD_VAR 0 2
59917: PPUSH
59918: CALL 33979 0 4
59922: PUSH
59923: LD_INT 4
59925: ARRAY
59926: ST_TO_ADDR
// end ;
59927: LD_VAR 0 3
59931: RET
// export function PlayerSeeMe ( unit ) ; begin
59932: LD_INT 0
59934: PPUSH
// result := See ( your_side , unit ) ;
59935: LD_ADDR_VAR 0 2
59939: PUSH
59940: LD_OWVAR 2
59944: PPUSH
59945: LD_VAR 0 1
59949: PPUSH
59950: CALL_OW 292
59954: ST_TO_ADDR
// end ;
59955: LD_VAR 0 2
59959: RET
// export function ReverseDir ( unit ) ; begin
59960: LD_INT 0
59962: PPUSH
// if not unit then
59963: LD_VAR 0 1
59967: NOT
59968: IFFALSE 59972
// exit ;
59970: GO 59995
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59972: LD_ADDR_VAR 0 2
59976: PUSH
59977: LD_VAR 0 1
59981: PPUSH
59982: CALL_OW 254
59986: PUSH
59987: LD_INT 3
59989: PLUS
59990: PUSH
59991: LD_INT 6
59993: MOD
59994: ST_TO_ADDR
// end ;
59995: LD_VAR 0 2
59999: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60000: LD_INT 0
60002: PPUSH
60003: PPUSH
60004: PPUSH
60005: PPUSH
60006: PPUSH
// if not hexes then
60007: LD_VAR 0 2
60011: NOT
60012: IFFALSE 60016
// exit ;
60014: GO 60164
// dist := 9999 ;
60016: LD_ADDR_VAR 0 5
60020: PUSH
60021: LD_INT 9999
60023: ST_TO_ADDR
// for i = 1 to hexes do
60024: LD_ADDR_VAR 0 4
60028: PUSH
60029: DOUBLE
60030: LD_INT 1
60032: DEC
60033: ST_TO_ADDR
60034: LD_VAR 0 2
60038: PUSH
60039: FOR_TO
60040: IFFALSE 60152
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60042: LD_VAR 0 1
60046: PPUSH
60047: LD_VAR 0 2
60051: PUSH
60052: LD_VAR 0 4
60056: ARRAY
60057: PUSH
60058: LD_INT 1
60060: ARRAY
60061: PPUSH
60062: LD_VAR 0 2
60066: PUSH
60067: LD_VAR 0 4
60071: ARRAY
60072: PUSH
60073: LD_INT 2
60075: ARRAY
60076: PPUSH
60077: CALL_OW 297
60081: PUSH
60082: LD_VAR 0 5
60086: LESS
60087: IFFALSE 60150
// begin hex := hexes [ i ] ;
60089: LD_ADDR_VAR 0 7
60093: PUSH
60094: LD_VAR 0 2
60098: PUSH
60099: LD_VAR 0 4
60103: ARRAY
60104: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60105: LD_ADDR_VAR 0 5
60109: PUSH
60110: LD_VAR 0 1
60114: PPUSH
60115: LD_VAR 0 2
60119: PUSH
60120: LD_VAR 0 4
60124: ARRAY
60125: PUSH
60126: LD_INT 1
60128: ARRAY
60129: PPUSH
60130: LD_VAR 0 2
60134: PUSH
60135: LD_VAR 0 4
60139: ARRAY
60140: PUSH
60141: LD_INT 2
60143: ARRAY
60144: PPUSH
60145: CALL_OW 297
60149: ST_TO_ADDR
// end ; end ;
60150: GO 60039
60152: POP
60153: POP
// result := hex ;
60154: LD_ADDR_VAR 0 3
60158: PUSH
60159: LD_VAR 0 7
60163: ST_TO_ADDR
// end ;
60164: LD_VAR 0 3
60168: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60169: LD_INT 0
60171: PPUSH
60172: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60173: LD_VAR 0 1
60177: NOT
60178: PUSH
60179: LD_VAR 0 1
60183: PUSH
60184: LD_INT 21
60186: PUSH
60187: LD_INT 2
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 23
60196: PUSH
60197: LD_INT 2
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PPUSH
60208: CALL_OW 69
60212: IN
60213: NOT
60214: OR
60215: IFFALSE 60219
// exit ;
60217: GO 60266
// for i = 1 to 3 do
60219: LD_ADDR_VAR 0 3
60223: PUSH
60224: DOUBLE
60225: LD_INT 1
60227: DEC
60228: ST_TO_ADDR
60229: LD_INT 3
60231: PUSH
60232: FOR_TO
60233: IFFALSE 60264
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60235: LD_VAR 0 1
60239: PPUSH
60240: CALL_OW 250
60244: PPUSH
60245: LD_VAR 0 1
60249: PPUSH
60250: CALL_OW 251
60254: PPUSH
60255: LD_INT 1
60257: PPUSH
60258: CALL_OW 453
60262: GO 60232
60264: POP
60265: POP
// end ;
60266: LD_VAR 0 2
60270: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60271: LD_INT 0
60273: PPUSH
60274: PPUSH
60275: PPUSH
60276: PPUSH
60277: PPUSH
60278: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60279: LD_VAR 0 1
60283: NOT
60284: PUSH
60285: LD_VAR 0 2
60289: NOT
60290: OR
60291: PUSH
60292: LD_VAR 0 1
60296: PPUSH
60297: CALL_OW 314
60301: OR
60302: IFFALSE 60306
// exit ;
60304: GO 60747
// x := GetX ( enemy_unit ) ;
60306: LD_ADDR_VAR 0 7
60310: PUSH
60311: LD_VAR 0 2
60315: PPUSH
60316: CALL_OW 250
60320: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60321: LD_ADDR_VAR 0 8
60325: PUSH
60326: LD_VAR 0 2
60330: PPUSH
60331: CALL_OW 251
60335: ST_TO_ADDR
// if not x or not y then
60336: LD_VAR 0 7
60340: NOT
60341: PUSH
60342: LD_VAR 0 8
60346: NOT
60347: OR
60348: IFFALSE 60352
// exit ;
60350: GO 60747
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60352: LD_ADDR_VAR 0 6
60356: PUSH
60357: LD_VAR 0 7
60361: PPUSH
60362: LD_INT 0
60364: PPUSH
60365: LD_INT 4
60367: PPUSH
60368: CALL_OW 272
60372: PUSH
60373: LD_VAR 0 8
60377: PPUSH
60378: LD_INT 0
60380: PPUSH
60381: LD_INT 4
60383: PPUSH
60384: CALL_OW 273
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_VAR 0 7
60397: PPUSH
60398: LD_INT 1
60400: PPUSH
60401: LD_INT 4
60403: PPUSH
60404: CALL_OW 272
60408: PUSH
60409: LD_VAR 0 8
60413: PPUSH
60414: LD_INT 1
60416: PPUSH
60417: LD_INT 4
60419: PPUSH
60420: CALL_OW 273
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_VAR 0 7
60433: PPUSH
60434: LD_INT 2
60436: PPUSH
60437: LD_INT 4
60439: PPUSH
60440: CALL_OW 272
60444: PUSH
60445: LD_VAR 0 8
60449: PPUSH
60450: LD_INT 2
60452: PPUSH
60453: LD_INT 4
60455: PPUSH
60456: CALL_OW 273
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_VAR 0 7
60469: PPUSH
60470: LD_INT 3
60472: PPUSH
60473: LD_INT 4
60475: PPUSH
60476: CALL_OW 272
60480: PUSH
60481: LD_VAR 0 8
60485: PPUSH
60486: LD_INT 3
60488: PPUSH
60489: LD_INT 4
60491: PPUSH
60492: CALL_OW 273
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_VAR 0 7
60505: PPUSH
60506: LD_INT 4
60508: PPUSH
60509: LD_INT 4
60511: PPUSH
60512: CALL_OW 272
60516: PUSH
60517: LD_VAR 0 8
60521: PPUSH
60522: LD_INT 4
60524: PPUSH
60525: LD_INT 4
60527: PPUSH
60528: CALL_OW 273
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_VAR 0 7
60541: PPUSH
60542: LD_INT 5
60544: PPUSH
60545: LD_INT 4
60547: PPUSH
60548: CALL_OW 272
60552: PUSH
60553: LD_VAR 0 8
60557: PPUSH
60558: LD_INT 5
60560: PPUSH
60561: LD_INT 4
60563: PPUSH
60564: CALL_OW 273
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: ST_TO_ADDR
// for i = tmp downto 1 do
60581: LD_ADDR_VAR 0 4
60585: PUSH
60586: DOUBLE
60587: LD_VAR 0 6
60591: INC
60592: ST_TO_ADDR
60593: LD_INT 1
60595: PUSH
60596: FOR_DOWNTO
60597: IFFALSE 60698
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60599: LD_VAR 0 6
60603: PUSH
60604: LD_VAR 0 4
60608: ARRAY
60609: PUSH
60610: LD_INT 1
60612: ARRAY
60613: PPUSH
60614: LD_VAR 0 6
60618: PUSH
60619: LD_VAR 0 4
60623: ARRAY
60624: PUSH
60625: LD_INT 2
60627: ARRAY
60628: PPUSH
60629: CALL_OW 488
60633: NOT
60634: PUSH
60635: LD_VAR 0 6
60639: PUSH
60640: LD_VAR 0 4
60644: ARRAY
60645: PUSH
60646: LD_INT 1
60648: ARRAY
60649: PPUSH
60650: LD_VAR 0 6
60654: PUSH
60655: LD_VAR 0 4
60659: ARRAY
60660: PUSH
60661: LD_INT 2
60663: ARRAY
60664: PPUSH
60665: CALL_OW 428
60669: PUSH
60670: LD_INT 0
60672: NONEQUAL
60673: OR
60674: IFFALSE 60696
// tmp := Delete ( tmp , i ) ;
60676: LD_ADDR_VAR 0 6
60680: PUSH
60681: LD_VAR 0 6
60685: PPUSH
60686: LD_VAR 0 4
60690: PPUSH
60691: CALL_OW 3
60695: ST_TO_ADDR
60696: GO 60596
60698: POP
60699: POP
// j := GetClosestHex ( unit , tmp ) ;
60700: LD_ADDR_VAR 0 5
60704: PUSH
60705: LD_VAR 0 1
60709: PPUSH
60710: LD_VAR 0 6
60714: PPUSH
60715: CALL 60000 0 2
60719: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60720: LD_VAR 0 1
60724: PPUSH
60725: LD_VAR 0 5
60729: PUSH
60730: LD_INT 1
60732: ARRAY
60733: PPUSH
60734: LD_VAR 0 5
60738: PUSH
60739: LD_INT 2
60741: ARRAY
60742: PPUSH
60743: CALL_OW 111
// end ;
60747: LD_VAR 0 3
60751: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60752: LD_INT 0
60754: PPUSH
60755: PPUSH
60756: PPUSH
// uc_side = 0 ;
60757: LD_ADDR_OWVAR 20
60761: PUSH
60762: LD_INT 0
60764: ST_TO_ADDR
// uc_nation = 0 ;
60765: LD_ADDR_OWVAR 21
60769: PUSH
60770: LD_INT 0
60772: ST_TO_ADDR
// InitHc ;
60773: CALL_OW 19
// InitVc ;
60777: CALL_OW 20
// if mastodonts then
60781: LD_VAR 0 6
60785: IFFALSE 60852
// for i = 1 to mastodonts do
60787: LD_ADDR_VAR 0 11
60791: PUSH
60792: DOUBLE
60793: LD_INT 1
60795: DEC
60796: ST_TO_ADDR
60797: LD_VAR 0 6
60801: PUSH
60802: FOR_TO
60803: IFFALSE 60850
// begin vc_chassis := 31 ;
60805: LD_ADDR_OWVAR 37
60809: PUSH
60810: LD_INT 31
60812: ST_TO_ADDR
// vc_control := control_rider ;
60813: LD_ADDR_OWVAR 38
60817: PUSH
60818: LD_INT 4
60820: ST_TO_ADDR
// animal := CreateVehicle ;
60821: LD_ADDR_VAR 0 12
60825: PUSH
60826: CALL_OW 45
60830: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60831: LD_VAR 0 12
60835: PPUSH
60836: LD_VAR 0 8
60840: PPUSH
60841: LD_INT 0
60843: PPUSH
60844: CALL 62921 0 3
// end ;
60848: GO 60802
60850: POP
60851: POP
// if horses then
60852: LD_VAR 0 5
60856: IFFALSE 60923
// for i = 1 to horses do
60858: LD_ADDR_VAR 0 11
60862: PUSH
60863: DOUBLE
60864: LD_INT 1
60866: DEC
60867: ST_TO_ADDR
60868: LD_VAR 0 5
60872: PUSH
60873: FOR_TO
60874: IFFALSE 60921
// begin hc_class := 21 ;
60876: LD_ADDR_OWVAR 28
60880: PUSH
60881: LD_INT 21
60883: ST_TO_ADDR
// hc_gallery :=  ;
60884: LD_ADDR_OWVAR 33
60888: PUSH
60889: LD_STRING 
60891: ST_TO_ADDR
// animal := CreateHuman ;
60892: LD_ADDR_VAR 0 12
60896: PUSH
60897: CALL_OW 44
60901: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60902: LD_VAR 0 12
60906: PPUSH
60907: LD_VAR 0 8
60911: PPUSH
60912: LD_INT 0
60914: PPUSH
60915: CALL 62921 0 3
// end ;
60919: GO 60873
60921: POP
60922: POP
// if birds then
60923: LD_VAR 0 1
60927: IFFALSE 60994
// for i = 1 to birds do
60929: LD_ADDR_VAR 0 11
60933: PUSH
60934: DOUBLE
60935: LD_INT 1
60937: DEC
60938: ST_TO_ADDR
60939: LD_VAR 0 1
60943: PUSH
60944: FOR_TO
60945: IFFALSE 60992
// begin hc_class = 18 ;
60947: LD_ADDR_OWVAR 28
60951: PUSH
60952: LD_INT 18
60954: ST_TO_ADDR
// hc_gallery =  ;
60955: LD_ADDR_OWVAR 33
60959: PUSH
60960: LD_STRING 
60962: ST_TO_ADDR
// animal := CreateHuman ;
60963: LD_ADDR_VAR 0 12
60967: PUSH
60968: CALL_OW 44
60972: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60973: LD_VAR 0 12
60977: PPUSH
60978: LD_VAR 0 8
60982: PPUSH
60983: LD_INT 0
60985: PPUSH
60986: CALL 62921 0 3
// end ;
60990: GO 60944
60992: POP
60993: POP
// if tigers then
60994: LD_VAR 0 2
60998: IFFALSE 61082
// for i = 1 to tigers do
61000: LD_ADDR_VAR 0 11
61004: PUSH
61005: DOUBLE
61006: LD_INT 1
61008: DEC
61009: ST_TO_ADDR
61010: LD_VAR 0 2
61014: PUSH
61015: FOR_TO
61016: IFFALSE 61080
// begin hc_class = class_tiger ;
61018: LD_ADDR_OWVAR 28
61022: PUSH
61023: LD_INT 14
61025: ST_TO_ADDR
// hc_gallery =  ;
61026: LD_ADDR_OWVAR 33
61030: PUSH
61031: LD_STRING 
61033: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61034: LD_ADDR_OWVAR 35
61038: PUSH
61039: LD_INT 7
61041: NEG
61042: PPUSH
61043: LD_INT 7
61045: PPUSH
61046: CALL_OW 12
61050: ST_TO_ADDR
// animal := CreateHuman ;
61051: LD_ADDR_VAR 0 12
61055: PUSH
61056: CALL_OW 44
61060: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61061: LD_VAR 0 12
61065: PPUSH
61066: LD_VAR 0 8
61070: PPUSH
61071: LD_INT 0
61073: PPUSH
61074: CALL 62921 0 3
// end ;
61078: GO 61015
61080: POP
61081: POP
// if apemans then
61082: LD_VAR 0 3
61086: IFFALSE 61209
// for i = 1 to apemans do
61088: LD_ADDR_VAR 0 11
61092: PUSH
61093: DOUBLE
61094: LD_INT 1
61096: DEC
61097: ST_TO_ADDR
61098: LD_VAR 0 3
61102: PUSH
61103: FOR_TO
61104: IFFALSE 61207
// begin hc_class = class_apeman ;
61106: LD_ADDR_OWVAR 28
61110: PUSH
61111: LD_INT 12
61113: ST_TO_ADDR
// hc_gallery =  ;
61114: LD_ADDR_OWVAR 33
61118: PUSH
61119: LD_STRING 
61121: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
61122: LD_ADDR_OWVAR 35
61126: PUSH
61127: LD_INT 5
61129: NEG
61130: PPUSH
61131: LD_INT 5
61133: PPUSH
61134: CALL_OW 12
61138: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61139: LD_ADDR_OWVAR 31
61143: PUSH
61144: LD_INT 1
61146: PPUSH
61147: LD_INT 3
61149: PPUSH
61150: CALL_OW 12
61154: PUSH
61155: LD_INT 1
61157: PPUSH
61158: LD_INT 3
61160: PPUSH
61161: CALL_OW 12
61165: PUSH
61166: LD_INT 0
61168: PUSH
61169: LD_INT 0
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: ST_TO_ADDR
// animal := CreateHuman ;
61178: LD_ADDR_VAR 0 12
61182: PUSH
61183: CALL_OW 44
61187: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61188: LD_VAR 0 12
61192: PPUSH
61193: LD_VAR 0 8
61197: PPUSH
61198: LD_INT 0
61200: PPUSH
61201: CALL 62921 0 3
// end ;
61205: GO 61103
61207: POP
61208: POP
// if enchidnas then
61209: LD_VAR 0 4
61213: IFFALSE 61280
// for i = 1 to enchidnas do
61215: LD_ADDR_VAR 0 11
61219: PUSH
61220: DOUBLE
61221: LD_INT 1
61223: DEC
61224: ST_TO_ADDR
61225: LD_VAR 0 4
61229: PUSH
61230: FOR_TO
61231: IFFALSE 61278
// begin hc_class = 13 ;
61233: LD_ADDR_OWVAR 28
61237: PUSH
61238: LD_INT 13
61240: ST_TO_ADDR
// hc_gallery =  ;
61241: LD_ADDR_OWVAR 33
61245: PUSH
61246: LD_STRING 
61248: ST_TO_ADDR
// animal := CreateHuman ;
61249: LD_ADDR_VAR 0 12
61253: PUSH
61254: CALL_OW 44
61258: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61259: LD_VAR 0 12
61263: PPUSH
61264: LD_VAR 0 8
61268: PPUSH
61269: LD_INT 0
61271: PPUSH
61272: CALL 62921 0 3
// end ;
61276: GO 61230
61278: POP
61279: POP
// if fishes then
61280: LD_VAR 0 7
61284: IFFALSE 61351
// for i = 1 to fishes do
61286: LD_ADDR_VAR 0 11
61290: PUSH
61291: DOUBLE
61292: LD_INT 1
61294: DEC
61295: ST_TO_ADDR
61296: LD_VAR 0 7
61300: PUSH
61301: FOR_TO
61302: IFFALSE 61349
// begin hc_class = 20 ;
61304: LD_ADDR_OWVAR 28
61308: PUSH
61309: LD_INT 20
61311: ST_TO_ADDR
// hc_gallery =  ;
61312: LD_ADDR_OWVAR 33
61316: PUSH
61317: LD_STRING 
61319: ST_TO_ADDR
// animal := CreateHuman ;
61320: LD_ADDR_VAR 0 12
61324: PUSH
61325: CALL_OW 44
61329: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61330: LD_VAR 0 12
61334: PPUSH
61335: LD_VAR 0 9
61339: PPUSH
61340: LD_INT 0
61342: PPUSH
61343: CALL 62921 0 3
// end ;
61347: GO 61301
61349: POP
61350: POP
// end ;
61351: LD_VAR 0 10
61355: RET
// export function WantHeal ( sci , unit ) ; begin
61356: LD_INT 0
61358: PPUSH
// if GetTaskList ( sci ) > 0 then
61359: LD_VAR 0 1
61363: PPUSH
61364: CALL_OW 437
61368: PUSH
61369: LD_INT 0
61371: GREATER
61372: IFFALSE 61442
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61374: LD_VAR 0 1
61378: PPUSH
61379: CALL_OW 437
61383: PUSH
61384: LD_INT 1
61386: ARRAY
61387: PUSH
61388: LD_INT 1
61390: ARRAY
61391: PUSH
61392: LD_STRING l
61394: EQUAL
61395: PUSH
61396: LD_VAR 0 1
61400: PPUSH
61401: CALL_OW 437
61405: PUSH
61406: LD_INT 1
61408: ARRAY
61409: PUSH
61410: LD_INT 4
61412: ARRAY
61413: PUSH
61414: LD_VAR 0 2
61418: EQUAL
61419: AND
61420: IFFALSE 61432
// result := true else
61422: LD_ADDR_VAR 0 3
61426: PUSH
61427: LD_INT 1
61429: ST_TO_ADDR
61430: GO 61440
// result := false ;
61432: LD_ADDR_VAR 0 3
61436: PUSH
61437: LD_INT 0
61439: ST_TO_ADDR
// end else
61440: GO 61450
// result := false ;
61442: LD_ADDR_VAR 0 3
61446: PUSH
61447: LD_INT 0
61449: ST_TO_ADDR
// end ;
61450: LD_VAR 0 3
61454: RET
// export function HealTarget ( sci ) ; begin
61455: LD_INT 0
61457: PPUSH
// if not sci then
61458: LD_VAR 0 1
61462: NOT
61463: IFFALSE 61467
// exit ;
61465: GO 61532
// result := 0 ;
61467: LD_ADDR_VAR 0 2
61471: PUSH
61472: LD_INT 0
61474: ST_TO_ADDR
// if GetTaskList ( sci ) then
61475: LD_VAR 0 1
61479: PPUSH
61480: CALL_OW 437
61484: IFFALSE 61532
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61486: LD_VAR 0 1
61490: PPUSH
61491: CALL_OW 437
61495: PUSH
61496: LD_INT 1
61498: ARRAY
61499: PUSH
61500: LD_INT 1
61502: ARRAY
61503: PUSH
61504: LD_STRING l
61506: EQUAL
61507: IFFALSE 61532
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61509: LD_ADDR_VAR 0 2
61513: PUSH
61514: LD_VAR 0 1
61518: PPUSH
61519: CALL_OW 437
61523: PUSH
61524: LD_INT 1
61526: ARRAY
61527: PUSH
61528: LD_INT 4
61530: ARRAY
61531: ST_TO_ADDR
// end ;
61532: LD_VAR 0 2
61536: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61537: LD_INT 0
61539: PPUSH
61540: PPUSH
61541: PPUSH
61542: PPUSH
// if not base_units then
61543: LD_VAR 0 1
61547: NOT
61548: IFFALSE 61552
// exit ;
61550: GO 61639
// result := false ;
61552: LD_ADDR_VAR 0 2
61556: PUSH
61557: LD_INT 0
61559: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61560: LD_ADDR_VAR 0 5
61564: PUSH
61565: LD_VAR 0 1
61569: PPUSH
61570: LD_INT 21
61572: PUSH
61573: LD_INT 3
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PPUSH
61580: CALL_OW 72
61584: ST_TO_ADDR
// if not tmp then
61585: LD_VAR 0 5
61589: NOT
61590: IFFALSE 61594
// exit ;
61592: GO 61639
// for i in tmp do
61594: LD_ADDR_VAR 0 3
61598: PUSH
61599: LD_VAR 0 5
61603: PUSH
61604: FOR_IN
61605: IFFALSE 61637
// begin result := EnemyInRange ( i , 22 ) ;
61607: LD_ADDR_VAR 0 2
61611: PUSH
61612: LD_VAR 0 3
61616: PPUSH
61617: LD_INT 22
61619: PPUSH
61620: CALL 59875 0 2
61624: ST_TO_ADDR
// if result then
61625: LD_VAR 0 2
61629: IFFALSE 61635
// exit ;
61631: POP
61632: POP
61633: GO 61639
// end ;
61635: GO 61604
61637: POP
61638: POP
// end ;
61639: LD_VAR 0 2
61643: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
61644: LD_INT 0
61646: PPUSH
61647: PPUSH
// if not units then
61648: LD_VAR 0 1
61652: NOT
61653: IFFALSE 61657
// exit ;
61655: GO 61727
// result := [ ] ;
61657: LD_ADDR_VAR 0 3
61661: PUSH
61662: EMPTY
61663: ST_TO_ADDR
// for i in units do
61664: LD_ADDR_VAR 0 4
61668: PUSH
61669: LD_VAR 0 1
61673: PUSH
61674: FOR_IN
61675: IFFALSE 61725
// if GetTag ( i ) = tag then
61677: LD_VAR 0 4
61681: PPUSH
61682: CALL_OW 110
61686: PUSH
61687: LD_VAR 0 2
61691: EQUAL
61692: IFFALSE 61723
// result := Insert ( result , result + 1 , i ) ;
61694: LD_ADDR_VAR 0 3
61698: PUSH
61699: LD_VAR 0 3
61703: PPUSH
61704: LD_VAR 0 3
61708: PUSH
61709: LD_INT 1
61711: PLUS
61712: PPUSH
61713: LD_VAR 0 4
61717: PPUSH
61718: CALL_OW 2
61722: ST_TO_ADDR
61723: GO 61674
61725: POP
61726: POP
// end ;
61727: LD_VAR 0 3
61731: RET
// export function IsDriver ( un ) ; begin
61732: LD_INT 0
61734: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61735: LD_ADDR_VAR 0 2
61739: PUSH
61740: LD_VAR 0 1
61744: PUSH
61745: LD_INT 55
61747: PUSH
61748: EMPTY
61749: LIST
61750: PPUSH
61751: CALL_OW 69
61755: IN
61756: ST_TO_ADDR
// end ;
61757: LD_VAR 0 2
61761: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61762: LD_INT 0
61764: PPUSH
61765: PPUSH
// list := [ ] ;
61766: LD_ADDR_VAR 0 5
61770: PUSH
61771: EMPTY
61772: ST_TO_ADDR
// case d of 0 :
61773: LD_VAR 0 3
61777: PUSH
61778: LD_INT 0
61780: DOUBLE
61781: EQUAL
61782: IFTRUE 61786
61784: GO 61919
61786: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61787: LD_ADDR_VAR 0 5
61791: PUSH
61792: LD_VAR 0 1
61796: PUSH
61797: LD_INT 4
61799: MINUS
61800: PUSH
61801: LD_VAR 0 2
61805: PUSH
61806: LD_INT 4
61808: MINUS
61809: PUSH
61810: LD_INT 2
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: LIST
61817: PUSH
61818: LD_VAR 0 1
61822: PUSH
61823: LD_INT 3
61825: MINUS
61826: PUSH
61827: LD_VAR 0 2
61831: PUSH
61832: LD_INT 1
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: LIST
61839: PUSH
61840: LD_VAR 0 1
61844: PUSH
61845: LD_INT 4
61847: PLUS
61848: PUSH
61849: LD_VAR 0 2
61853: PUSH
61854: LD_INT 4
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: LIST
61861: PUSH
61862: LD_VAR 0 1
61866: PUSH
61867: LD_INT 3
61869: PLUS
61870: PUSH
61871: LD_VAR 0 2
61875: PUSH
61876: LD_INT 3
61878: PLUS
61879: PUSH
61880: LD_INT 5
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: LIST
61887: PUSH
61888: LD_VAR 0 1
61892: PUSH
61893: LD_VAR 0 2
61897: PUSH
61898: LD_INT 4
61900: PLUS
61901: PUSH
61902: LD_INT 0
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: LIST
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: ST_TO_ADDR
// end ; 1 :
61917: GO 62617
61919: LD_INT 1
61921: DOUBLE
61922: EQUAL
61923: IFTRUE 61927
61925: GO 62060
61927: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61928: LD_ADDR_VAR 0 5
61932: PUSH
61933: LD_VAR 0 1
61937: PUSH
61938: LD_VAR 0 2
61942: PUSH
61943: LD_INT 4
61945: MINUS
61946: PUSH
61947: LD_INT 3
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: LIST
61954: PUSH
61955: LD_VAR 0 1
61959: PUSH
61960: LD_INT 3
61962: MINUS
61963: PUSH
61964: LD_VAR 0 2
61968: PUSH
61969: LD_INT 3
61971: MINUS
61972: PUSH
61973: LD_INT 2
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: LIST
61980: PUSH
61981: LD_VAR 0 1
61985: PUSH
61986: LD_INT 4
61988: MINUS
61989: PUSH
61990: LD_VAR 0 2
61994: PUSH
61995: LD_INT 1
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: LIST
62002: PUSH
62003: LD_VAR 0 1
62007: PUSH
62008: LD_VAR 0 2
62012: PUSH
62013: LD_INT 3
62015: PLUS
62016: PUSH
62017: LD_INT 0
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: LIST
62024: PUSH
62025: LD_VAR 0 1
62029: PUSH
62030: LD_INT 4
62032: PLUS
62033: PUSH
62034: LD_VAR 0 2
62038: PUSH
62039: LD_INT 4
62041: PLUS
62042: PUSH
62043: LD_INT 5
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: LIST
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: ST_TO_ADDR
// end ; 2 :
62058: GO 62617
62060: LD_INT 2
62062: DOUBLE
62063: EQUAL
62064: IFTRUE 62068
62066: GO 62197
62068: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62069: LD_ADDR_VAR 0 5
62073: PUSH
62074: LD_VAR 0 1
62078: PUSH
62079: LD_VAR 0 2
62083: PUSH
62084: LD_INT 3
62086: MINUS
62087: PUSH
62088: LD_INT 3
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: LIST
62095: PUSH
62096: LD_VAR 0 1
62100: PUSH
62101: LD_INT 4
62103: PLUS
62104: PUSH
62105: LD_VAR 0 2
62109: PUSH
62110: LD_INT 4
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: LIST
62117: PUSH
62118: LD_VAR 0 1
62122: PUSH
62123: LD_VAR 0 2
62127: PUSH
62128: LD_INT 4
62130: PLUS
62131: PUSH
62132: LD_INT 0
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: LIST
62139: PUSH
62140: LD_VAR 0 1
62144: PUSH
62145: LD_INT 3
62147: MINUS
62148: PUSH
62149: LD_VAR 0 2
62153: PUSH
62154: LD_INT 1
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: LIST
62161: PUSH
62162: LD_VAR 0 1
62166: PUSH
62167: LD_INT 4
62169: MINUS
62170: PUSH
62171: LD_VAR 0 2
62175: PUSH
62176: LD_INT 4
62178: MINUS
62179: PUSH
62180: LD_INT 2
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: LIST
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: ST_TO_ADDR
// end ; 3 :
62195: GO 62617
62197: LD_INT 3
62199: DOUBLE
62200: EQUAL
62201: IFTRUE 62205
62203: GO 62338
62205: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62206: LD_ADDR_VAR 0 5
62210: PUSH
62211: LD_VAR 0 1
62215: PUSH
62216: LD_INT 3
62218: PLUS
62219: PUSH
62220: LD_VAR 0 2
62224: PUSH
62225: LD_INT 4
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: LIST
62232: PUSH
62233: LD_VAR 0 1
62237: PUSH
62238: LD_INT 4
62240: PLUS
62241: PUSH
62242: LD_VAR 0 2
62246: PUSH
62247: LD_INT 4
62249: PLUS
62250: PUSH
62251: LD_INT 5
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: LIST
62258: PUSH
62259: LD_VAR 0 1
62263: PUSH
62264: LD_INT 4
62266: MINUS
62267: PUSH
62268: LD_VAR 0 2
62272: PUSH
62273: LD_INT 1
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: LIST
62280: PUSH
62281: LD_VAR 0 1
62285: PUSH
62286: LD_VAR 0 2
62290: PUSH
62291: LD_INT 4
62293: MINUS
62294: PUSH
62295: LD_INT 3
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: LIST
62302: PUSH
62303: LD_VAR 0 1
62307: PUSH
62308: LD_INT 3
62310: MINUS
62311: PUSH
62312: LD_VAR 0 2
62316: PUSH
62317: LD_INT 3
62319: MINUS
62320: PUSH
62321: LD_INT 2
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: LIST
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: ST_TO_ADDR
// end ; 4 :
62336: GO 62617
62338: LD_INT 4
62340: DOUBLE
62341: EQUAL
62342: IFTRUE 62346
62344: GO 62479
62346: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62347: LD_ADDR_VAR 0 5
62351: PUSH
62352: LD_VAR 0 1
62356: PUSH
62357: LD_VAR 0 2
62361: PUSH
62362: LD_INT 4
62364: PLUS
62365: PUSH
62366: LD_INT 0
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: LIST
62373: PUSH
62374: LD_VAR 0 1
62378: PUSH
62379: LD_INT 3
62381: PLUS
62382: PUSH
62383: LD_VAR 0 2
62387: PUSH
62388: LD_INT 3
62390: PLUS
62391: PUSH
62392: LD_INT 5
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: LIST
62399: PUSH
62400: LD_VAR 0 1
62404: PUSH
62405: LD_INT 4
62407: PLUS
62408: PUSH
62409: LD_VAR 0 2
62413: PUSH
62414: LD_INT 4
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: LIST
62421: PUSH
62422: LD_VAR 0 1
62426: PUSH
62427: LD_VAR 0 2
62431: PUSH
62432: LD_INT 3
62434: MINUS
62435: PUSH
62436: LD_INT 3
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: LIST
62443: PUSH
62444: LD_VAR 0 1
62448: PUSH
62449: LD_INT 4
62451: MINUS
62452: PUSH
62453: LD_VAR 0 2
62457: PUSH
62458: LD_INT 4
62460: MINUS
62461: PUSH
62462: LD_INT 2
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: LIST
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: ST_TO_ADDR
// end ; 5 :
62477: GO 62617
62479: LD_INT 5
62481: DOUBLE
62482: EQUAL
62483: IFTRUE 62487
62485: GO 62616
62487: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62488: LD_ADDR_VAR 0 5
62492: PUSH
62493: LD_VAR 0 1
62497: PUSH
62498: LD_INT 4
62500: MINUS
62501: PUSH
62502: LD_VAR 0 2
62506: PUSH
62507: LD_INT 1
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: LIST
62514: PUSH
62515: LD_VAR 0 1
62519: PUSH
62520: LD_VAR 0 2
62524: PUSH
62525: LD_INT 4
62527: MINUS
62528: PUSH
62529: LD_INT 3
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: LIST
62536: PUSH
62537: LD_VAR 0 1
62541: PUSH
62542: LD_INT 4
62544: PLUS
62545: PUSH
62546: LD_VAR 0 2
62550: PUSH
62551: LD_INT 4
62553: PLUS
62554: PUSH
62555: LD_INT 5
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: LIST
62562: PUSH
62563: LD_VAR 0 1
62567: PUSH
62568: LD_INT 3
62570: PLUS
62571: PUSH
62572: LD_VAR 0 2
62576: PUSH
62577: LD_INT 4
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: LIST
62584: PUSH
62585: LD_VAR 0 1
62589: PUSH
62590: LD_VAR 0 2
62594: PUSH
62595: LD_INT 3
62597: PLUS
62598: PUSH
62599: LD_INT 0
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: LIST
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: ST_TO_ADDR
// end ; end ;
62614: GO 62617
62616: POP
// result := list ;
62617: LD_ADDR_VAR 0 4
62621: PUSH
62622: LD_VAR 0 5
62626: ST_TO_ADDR
// end ;
62627: LD_VAR 0 4
62631: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62632: LD_INT 0
62634: PPUSH
62635: PPUSH
62636: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62637: LD_VAR 0 1
62641: NOT
62642: PUSH
62643: LD_VAR 0 2
62647: PUSH
62648: LD_INT 1
62650: PUSH
62651: LD_INT 2
62653: PUSH
62654: LD_INT 3
62656: PUSH
62657: LD_INT 4
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: IN
62666: NOT
62667: OR
62668: IFFALSE 62672
// exit ;
62670: GO 62764
// tmp := [ ] ;
62672: LD_ADDR_VAR 0 5
62676: PUSH
62677: EMPTY
62678: ST_TO_ADDR
// for i in units do
62679: LD_ADDR_VAR 0 4
62683: PUSH
62684: LD_VAR 0 1
62688: PUSH
62689: FOR_IN
62690: IFFALSE 62733
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62692: LD_ADDR_VAR 0 5
62696: PUSH
62697: LD_VAR 0 5
62701: PPUSH
62702: LD_VAR 0 5
62706: PUSH
62707: LD_INT 1
62709: PLUS
62710: PPUSH
62711: LD_VAR 0 4
62715: PPUSH
62716: LD_VAR 0 2
62720: PPUSH
62721: CALL_OW 259
62725: PPUSH
62726: CALL_OW 2
62730: ST_TO_ADDR
62731: GO 62689
62733: POP
62734: POP
// if not tmp then
62735: LD_VAR 0 5
62739: NOT
62740: IFFALSE 62744
// exit ;
62742: GO 62764
// result := SortListByListDesc ( units , tmp ) ;
62744: LD_ADDR_VAR 0 3
62748: PUSH
62749: LD_VAR 0 1
62753: PPUSH
62754: LD_VAR 0 5
62758: PPUSH
62759: CALL_OW 77
62763: ST_TO_ADDR
// end ;
62764: LD_VAR 0 3
62768: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62769: LD_INT 0
62771: PPUSH
62772: PPUSH
62773: PPUSH
// x := GetX ( building ) ;
62774: LD_ADDR_VAR 0 4
62778: PUSH
62779: LD_VAR 0 2
62783: PPUSH
62784: CALL_OW 250
62788: ST_TO_ADDR
// y := GetY ( building ) ;
62789: LD_ADDR_VAR 0 5
62793: PUSH
62794: LD_VAR 0 2
62798: PPUSH
62799: CALL_OW 251
62803: ST_TO_ADDR
// if GetTaskList ( unit ) then
62804: LD_VAR 0 1
62808: PPUSH
62809: CALL_OW 437
62813: IFFALSE 62908
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62815: LD_STRING e
62817: PUSH
62818: LD_VAR 0 1
62822: PPUSH
62823: CALL_OW 437
62827: PUSH
62828: LD_INT 1
62830: ARRAY
62831: PUSH
62832: LD_INT 1
62834: ARRAY
62835: EQUAL
62836: PUSH
62837: LD_VAR 0 4
62841: PUSH
62842: LD_VAR 0 1
62846: PPUSH
62847: CALL_OW 437
62851: PUSH
62852: LD_INT 1
62854: ARRAY
62855: PUSH
62856: LD_INT 2
62858: ARRAY
62859: EQUAL
62860: AND
62861: PUSH
62862: LD_VAR 0 5
62866: PUSH
62867: LD_VAR 0 1
62871: PPUSH
62872: CALL_OW 437
62876: PUSH
62877: LD_INT 1
62879: ARRAY
62880: PUSH
62881: LD_INT 3
62883: ARRAY
62884: EQUAL
62885: AND
62886: IFFALSE 62898
// result := true else
62888: LD_ADDR_VAR 0 3
62892: PUSH
62893: LD_INT 1
62895: ST_TO_ADDR
62896: GO 62906
// result := false ;
62898: LD_ADDR_VAR 0 3
62902: PUSH
62903: LD_INT 0
62905: ST_TO_ADDR
// end else
62906: GO 62916
// result := false ;
62908: LD_ADDR_VAR 0 3
62912: PUSH
62913: LD_INT 0
62915: ST_TO_ADDR
// end ;
62916: LD_VAR 0 3
62920: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62921: LD_INT 0
62923: PPUSH
62924: PPUSH
62925: PPUSH
62926: PPUSH
// if not unit or not area then
62927: LD_VAR 0 1
62931: NOT
62932: PUSH
62933: LD_VAR 0 2
62937: NOT
62938: OR
62939: IFFALSE 62943
// exit ;
62941: GO 63107
// tmp := AreaToList ( area , i ) ;
62943: LD_ADDR_VAR 0 6
62947: PUSH
62948: LD_VAR 0 2
62952: PPUSH
62953: LD_VAR 0 5
62957: PPUSH
62958: CALL_OW 517
62962: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62963: LD_ADDR_VAR 0 5
62967: PUSH
62968: DOUBLE
62969: LD_INT 1
62971: DEC
62972: ST_TO_ADDR
62973: LD_VAR 0 6
62977: PUSH
62978: LD_INT 1
62980: ARRAY
62981: PUSH
62982: FOR_TO
62983: IFFALSE 63105
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62985: LD_ADDR_VAR 0 7
62989: PUSH
62990: LD_VAR 0 6
62994: PUSH
62995: LD_INT 1
62997: ARRAY
62998: PUSH
62999: LD_VAR 0 5
63003: ARRAY
63004: PUSH
63005: LD_VAR 0 6
63009: PUSH
63010: LD_INT 2
63012: ARRAY
63013: PUSH
63014: LD_VAR 0 5
63018: ARRAY
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63024: LD_VAR 0 7
63028: PUSH
63029: LD_INT 1
63031: ARRAY
63032: PPUSH
63033: LD_VAR 0 7
63037: PUSH
63038: LD_INT 2
63040: ARRAY
63041: PPUSH
63042: CALL_OW 428
63046: PUSH
63047: LD_INT 0
63049: EQUAL
63050: IFFALSE 63103
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63052: LD_VAR 0 1
63056: PPUSH
63057: LD_VAR 0 7
63061: PUSH
63062: LD_INT 1
63064: ARRAY
63065: PPUSH
63066: LD_VAR 0 7
63070: PUSH
63071: LD_INT 2
63073: ARRAY
63074: PPUSH
63075: LD_VAR 0 3
63079: PPUSH
63080: CALL_OW 48
// result := IsPlaced ( unit ) ;
63084: LD_ADDR_VAR 0 4
63088: PUSH
63089: LD_VAR 0 1
63093: PPUSH
63094: CALL_OW 305
63098: ST_TO_ADDR
// exit ;
63099: POP
63100: POP
63101: GO 63107
// end ; end ;
63103: GO 62982
63105: POP
63106: POP
// end ;
63107: LD_VAR 0 4
63111: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63112: LD_INT 0
63114: PPUSH
63115: PPUSH
63116: PPUSH
// if not side or side > 8 then
63117: LD_VAR 0 1
63121: NOT
63122: PUSH
63123: LD_VAR 0 1
63127: PUSH
63128: LD_INT 8
63130: GREATER
63131: OR
63132: IFFALSE 63136
// exit ;
63134: GO 63323
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63136: LD_ADDR_VAR 0 4
63140: PUSH
63141: LD_INT 22
63143: PUSH
63144: LD_VAR 0 1
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 21
63155: PUSH
63156: LD_INT 3
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PPUSH
63167: CALL_OW 69
63171: ST_TO_ADDR
// if not tmp then
63172: LD_VAR 0 4
63176: NOT
63177: IFFALSE 63181
// exit ;
63179: GO 63323
// enable_addtolog := true ;
63181: LD_ADDR_OWVAR 81
63185: PUSH
63186: LD_INT 1
63188: ST_TO_ADDR
// AddToLog ( [ ) ;
63189: LD_STRING [
63191: PPUSH
63192: CALL_OW 561
// for i in tmp do
63196: LD_ADDR_VAR 0 3
63200: PUSH
63201: LD_VAR 0 4
63205: PUSH
63206: FOR_IN
63207: IFFALSE 63314
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63209: LD_STRING [
63211: PUSH
63212: LD_VAR 0 3
63216: PPUSH
63217: CALL_OW 266
63221: STR
63222: PUSH
63223: LD_STRING , 
63225: STR
63226: PUSH
63227: LD_VAR 0 3
63231: PPUSH
63232: CALL_OW 250
63236: STR
63237: PUSH
63238: LD_STRING , 
63240: STR
63241: PUSH
63242: LD_VAR 0 3
63246: PPUSH
63247: CALL_OW 251
63251: STR
63252: PUSH
63253: LD_STRING , 
63255: STR
63256: PUSH
63257: LD_VAR 0 3
63261: PPUSH
63262: CALL_OW 254
63266: STR
63267: PUSH
63268: LD_STRING , 
63270: STR
63271: PUSH
63272: LD_VAR 0 3
63276: PPUSH
63277: LD_INT 1
63279: PPUSH
63280: CALL_OW 268
63284: STR
63285: PUSH
63286: LD_STRING , 
63288: STR
63289: PUSH
63290: LD_VAR 0 3
63294: PPUSH
63295: LD_INT 2
63297: PPUSH
63298: CALL_OW 268
63302: STR
63303: PUSH
63304: LD_STRING ],
63306: STR
63307: PPUSH
63308: CALL_OW 561
// end ;
63312: GO 63206
63314: POP
63315: POP
// AddToLog ( ]; ) ;
63316: LD_STRING ];
63318: PPUSH
63319: CALL_OW 561
// end ;
63323: LD_VAR 0 2
63327: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63328: LD_INT 0
63330: PPUSH
63331: PPUSH
63332: PPUSH
63333: PPUSH
63334: PPUSH
// if not area or not rate or not max then
63335: LD_VAR 0 1
63339: NOT
63340: PUSH
63341: LD_VAR 0 2
63345: NOT
63346: OR
63347: PUSH
63348: LD_VAR 0 4
63352: NOT
63353: OR
63354: IFFALSE 63358
// exit ;
63356: GO 63550
// while 1 do
63358: LD_INT 1
63360: IFFALSE 63550
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63362: LD_ADDR_VAR 0 9
63366: PUSH
63367: LD_VAR 0 1
63371: PPUSH
63372: LD_INT 1
63374: PPUSH
63375: CALL_OW 287
63379: PUSH
63380: LD_INT 10
63382: MUL
63383: ST_TO_ADDR
// r := rate / 10 ;
63384: LD_ADDR_VAR 0 7
63388: PUSH
63389: LD_VAR 0 2
63393: PUSH
63394: LD_INT 10
63396: DIVREAL
63397: ST_TO_ADDR
// time := 1 1$00 ;
63398: LD_ADDR_VAR 0 8
63402: PUSH
63403: LD_INT 2100
63405: ST_TO_ADDR
// if amount < min then
63406: LD_VAR 0 9
63410: PUSH
63411: LD_VAR 0 3
63415: LESS
63416: IFFALSE 63434
// r := r * 2 else
63418: LD_ADDR_VAR 0 7
63422: PUSH
63423: LD_VAR 0 7
63427: PUSH
63428: LD_INT 2
63430: MUL
63431: ST_TO_ADDR
63432: GO 63460
// if amount > max then
63434: LD_VAR 0 9
63438: PUSH
63439: LD_VAR 0 4
63443: GREATER
63444: IFFALSE 63460
// r := r / 2 ;
63446: LD_ADDR_VAR 0 7
63450: PUSH
63451: LD_VAR 0 7
63455: PUSH
63456: LD_INT 2
63458: DIVREAL
63459: ST_TO_ADDR
// time := time / r ;
63460: LD_ADDR_VAR 0 8
63464: PUSH
63465: LD_VAR 0 8
63469: PUSH
63470: LD_VAR 0 7
63474: DIVREAL
63475: ST_TO_ADDR
// if time < 0 then
63476: LD_VAR 0 8
63480: PUSH
63481: LD_INT 0
63483: LESS
63484: IFFALSE 63501
// time := time * - 1 ;
63486: LD_ADDR_VAR 0 8
63490: PUSH
63491: LD_VAR 0 8
63495: PUSH
63496: LD_INT 1
63498: NEG
63499: MUL
63500: ST_TO_ADDR
// wait ( time ) ;
63501: LD_VAR 0 8
63505: PPUSH
63506: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
63510: LD_INT 35
63512: PPUSH
63513: LD_INT 875
63515: PPUSH
63516: CALL_OW 12
63520: PPUSH
63521: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63525: LD_INT 1
63527: PPUSH
63528: LD_INT 5
63530: PPUSH
63531: CALL_OW 12
63535: PPUSH
63536: LD_VAR 0 1
63540: PPUSH
63541: LD_INT 1
63543: PPUSH
63544: CALL_OW 55
// end ;
63548: GO 63358
// end ;
63550: LD_VAR 0 5
63554: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63555: LD_INT 0
63557: PPUSH
63558: PPUSH
63559: PPUSH
63560: PPUSH
63561: PPUSH
63562: PPUSH
63563: PPUSH
63564: PPUSH
// if not turrets or not factories then
63565: LD_VAR 0 1
63569: NOT
63570: PUSH
63571: LD_VAR 0 2
63575: NOT
63576: OR
63577: IFFALSE 63581
// exit ;
63579: GO 63888
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63581: LD_ADDR_VAR 0 10
63585: PUSH
63586: LD_INT 5
63588: PUSH
63589: LD_INT 6
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: LD_INT 2
63598: PUSH
63599: LD_INT 4
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 3
63608: PUSH
63609: LD_INT 5
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 24
63623: PUSH
63624: LD_INT 25
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 23
63633: PUSH
63634: LD_INT 27
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 42
63647: PUSH
63648: LD_INT 43
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 44
63657: PUSH
63658: LD_INT 46
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 45
63667: PUSH
63668: LD_INT 47
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: LIST
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: LIST
63684: ST_TO_ADDR
// result := [ ] ;
63685: LD_ADDR_VAR 0 3
63689: PUSH
63690: EMPTY
63691: ST_TO_ADDR
// for i in turrets do
63692: LD_ADDR_VAR 0 4
63696: PUSH
63697: LD_VAR 0 1
63701: PUSH
63702: FOR_IN
63703: IFFALSE 63886
// begin nat := GetNation ( i ) ;
63705: LD_ADDR_VAR 0 7
63709: PUSH
63710: LD_VAR 0 4
63714: PPUSH
63715: CALL_OW 248
63719: ST_TO_ADDR
// weapon := 0 ;
63720: LD_ADDR_VAR 0 8
63724: PUSH
63725: LD_INT 0
63727: ST_TO_ADDR
// if not nat then
63728: LD_VAR 0 7
63732: NOT
63733: IFFALSE 63737
// continue ;
63735: GO 63702
// for j in list [ nat ] do
63737: LD_ADDR_VAR 0 5
63741: PUSH
63742: LD_VAR 0 10
63746: PUSH
63747: LD_VAR 0 7
63751: ARRAY
63752: PUSH
63753: FOR_IN
63754: IFFALSE 63795
// if GetBWeapon ( i ) = j [ 1 ] then
63756: LD_VAR 0 4
63760: PPUSH
63761: CALL_OW 269
63765: PUSH
63766: LD_VAR 0 5
63770: PUSH
63771: LD_INT 1
63773: ARRAY
63774: EQUAL
63775: IFFALSE 63793
// begin weapon := j [ 2 ] ;
63777: LD_ADDR_VAR 0 8
63781: PUSH
63782: LD_VAR 0 5
63786: PUSH
63787: LD_INT 2
63789: ARRAY
63790: ST_TO_ADDR
// break ;
63791: GO 63795
// end ;
63793: GO 63753
63795: POP
63796: POP
// if not weapon then
63797: LD_VAR 0 8
63801: NOT
63802: IFFALSE 63806
// continue ;
63804: GO 63702
// for k in factories do
63806: LD_ADDR_VAR 0 6
63810: PUSH
63811: LD_VAR 0 2
63815: PUSH
63816: FOR_IN
63817: IFFALSE 63882
// begin weapons := AvailableWeaponList ( k ) ;
63819: LD_ADDR_VAR 0 9
63823: PUSH
63824: LD_VAR 0 6
63828: PPUSH
63829: CALL_OW 478
63833: ST_TO_ADDR
// if not weapons then
63834: LD_VAR 0 9
63838: NOT
63839: IFFALSE 63843
// continue ;
63841: GO 63816
// if weapon in weapons then
63843: LD_VAR 0 8
63847: PUSH
63848: LD_VAR 0 9
63852: IN
63853: IFFALSE 63880
// begin result := [ i , weapon ] ;
63855: LD_ADDR_VAR 0 3
63859: PUSH
63860: LD_VAR 0 4
63864: PUSH
63865: LD_VAR 0 8
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: ST_TO_ADDR
// exit ;
63874: POP
63875: POP
63876: POP
63877: POP
63878: GO 63888
// end ; end ;
63880: GO 63816
63882: POP
63883: POP
// end ;
63884: GO 63702
63886: POP
63887: POP
// end ;
63888: LD_VAR 0 3
63892: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63893: LD_INT 0
63895: PPUSH
// if not side or side > 8 then
63896: LD_VAR 0 3
63900: NOT
63901: PUSH
63902: LD_VAR 0 3
63906: PUSH
63907: LD_INT 8
63909: GREATER
63910: OR
63911: IFFALSE 63915
// exit ;
63913: GO 63974
// if not range then
63915: LD_VAR 0 4
63919: NOT
63920: IFFALSE 63931
// range := - 12 ;
63922: LD_ADDR_VAR 0 4
63926: PUSH
63927: LD_INT 12
63929: NEG
63930: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63931: LD_VAR 0 1
63935: PPUSH
63936: LD_VAR 0 2
63940: PPUSH
63941: LD_VAR 0 3
63945: PPUSH
63946: LD_VAR 0 4
63950: PPUSH
63951: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63955: LD_VAR 0 1
63959: PPUSH
63960: LD_VAR 0 2
63964: PPUSH
63965: LD_VAR 0 3
63969: PPUSH
63970: CALL_OW 331
// end ;
63974: LD_VAR 0 5
63978: RET
// export function Video ( mode ) ; begin
63979: LD_INT 0
63981: PPUSH
// ingame_video = mode ;
63982: LD_ADDR_OWVAR 52
63986: PUSH
63987: LD_VAR 0 1
63991: ST_TO_ADDR
// interface_hidden = mode ;
63992: LD_ADDR_OWVAR 54
63996: PUSH
63997: LD_VAR 0 1
64001: ST_TO_ADDR
// end ;
64002: LD_VAR 0 2
64006: RET
// export function Join ( array , element ) ; begin
64007: LD_INT 0
64009: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64010: LD_ADDR_VAR 0 3
64014: PUSH
64015: LD_VAR 0 1
64019: PPUSH
64020: LD_VAR 0 1
64024: PUSH
64025: LD_INT 1
64027: PLUS
64028: PPUSH
64029: LD_VAR 0 2
64033: PPUSH
64034: CALL_OW 1
64038: ST_TO_ADDR
// end ;
64039: LD_VAR 0 3
64043: RET
// export function JoinUnion ( array , element ) ; begin
64044: LD_INT 0
64046: PPUSH
// result := array union element ;
64047: LD_ADDR_VAR 0 3
64051: PUSH
64052: LD_VAR 0 1
64056: PUSH
64057: LD_VAR 0 2
64061: UNION
64062: ST_TO_ADDR
// end ;
64063: LD_VAR 0 3
64067: RET
// export function GetBehemoths ( side ) ; begin
64068: LD_INT 0
64070: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64071: LD_ADDR_VAR 0 2
64075: PUSH
64076: LD_INT 22
64078: PUSH
64079: LD_VAR 0 1
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 31
64090: PUSH
64091: LD_INT 25
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PPUSH
64102: CALL_OW 69
64106: ST_TO_ADDR
// end ;
64107: LD_VAR 0 2
64111: RET
// export function Shuffle ( array ) ; var i , index ; begin
64112: LD_INT 0
64114: PPUSH
64115: PPUSH
64116: PPUSH
// result := [ ] ;
64117: LD_ADDR_VAR 0 2
64121: PUSH
64122: EMPTY
64123: ST_TO_ADDR
// if not array then
64124: LD_VAR 0 1
64128: NOT
64129: IFFALSE 64133
// exit ;
64131: GO 64232
// Randomize ;
64133: CALL_OW 10
// for i = array downto 1 do
64137: LD_ADDR_VAR 0 3
64141: PUSH
64142: DOUBLE
64143: LD_VAR 0 1
64147: INC
64148: ST_TO_ADDR
64149: LD_INT 1
64151: PUSH
64152: FOR_DOWNTO
64153: IFFALSE 64230
// begin index := rand ( 1 , array ) ;
64155: LD_ADDR_VAR 0 4
64159: PUSH
64160: LD_INT 1
64162: PPUSH
64163: LD_VAR 0 1
64167: PPUSH
64168: CALL_OW 12
64172: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64173: LD_ADDR_VAR 0 2
64177: PUSH
64178: LD_VAR 0 2
64182: PPUSH
64183: LD_VAR 0 2
64187: PUSH
64188: LD_INT 1
64190: PLUS
64191: PPUSH
64192: LD_VAR 0 1
64196: PUSH
64197: LD_VAR 0 4
64201: ARRAY
64202: PPUSH
64203: CALL_OW 2
64207: ST_TO_ADDR
// array := Delete ( array , index ) ;
64208: LD_ADDR_VAR 0 1
64212: PUSH
64213: LD_VAR 0 1
64217: PPUSH
64218: LD_VAR 0 4
64222: PPUSH
64223: CALL_OW 3
64227: ST_TO_ADDR
// end ;
64228: GO 64152
64230: POP
64231: POP
// end ;
64232: LD_VAR 0 2
64236: RET
// export function GetBaseMaterials ( base ) ; begin
64237: LD_INT 0
64239: PPUSH
// result := [ 0 , 0 , 0 ] ;
64240: LD_ADDR_VAR 0 2
64244: PUSH
64245: LD_INT 0
64247: PUSH
64248: LD_INT 0
64250: PUSH
64251: LD_INT 0
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: LIST
64258: ST_TO_ADDR
// if not base then
64259: LD_VAR 0 1
64263: NOT
64264: IFFALSE 64268
// exit ;
64266: GO 64317
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64268: LD_ADDR_VAR 0 2
64272: PUSH
64273: LD_VAR 0 1
64277: PPUSH
64278: LD_INT 1
64280: PPUSH
64281: CALL_OW 275
64285: PUSH
64286: LD_VAR 0 1
64290: PPUSH
64291: LD_INT 2
64293: PPUSH
64294: CALL_OW 275
64298: PUSH
64299: LD_VAR 0 1
64303: PPUSH
64304: LD_INT 3
64306: PPUSH
64307: CALL_OW 275
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: LIST
64316: ST_TO_ADDR
// end ;
64317: LD_VAR 0 2
64321: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64322: LD_INT 0
64324: PPUSH
64325: PPUSH
// result := array ;
64326: LD_ADDR_VAR 0 3
64330: PUSH
64331: LD_VAR 0 1
64335: ST_TO_ADDR
// if size > 0 then
64336: LD_VAR 0 2
64340: PUSH
64341: LD_INT 0
64343: GREATER
64344: IFFALSE 64390
// for i := array downto size do
64346: LD_ADDR_VAR 0 4
64350: PUSH
64351: DOUBLE
64352: LD_VAR 0 1
64356: INC
64357: ST_TO_ADDR
64358: LD_VAR 0 2
64362: PUSH
64363: FOR_DOWNTO
64364: IFFALSE 64388
// result := Delete ( result , result ) ;
64366: LD_ADDR_VAR 0 3
64370: PUSH
64371: LD_VAR 0 3
64375: PPUSH
64376: LD_VAR 0 3
64380: PPUSH
64381: CALL_OW 3
64385: ST_TO_ADDR
64386: GO 64363
64388: POP
64389: POP
// end ;
64390: LD_VAR 0 3
64394: RET
// export function ComExit ( unit ) ; var tmp ; begin
64395: LD_INT 0
64397: PPUSH
64398: PPUSH
// if not IsInUnit ( unit ) then
64399: LD_VAR 0 1
64403: PPUSH
64404: CALL_OW 310
64408: NOT
64409: IFFALSE 64413
// exit ;
64411: GO 64473
// tmp := IsInUnit ( unit ) ;
64413: LD_ADDR_VAR 0 3
64417: PUSH
64418: LD_VAR 0 1
64422: PPUSH
64423: CALL_OW 310
64427: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64428: LD_VAR 0 3
64432: PPUSH
64433: CALL_OW 247
64437: PUSH
64438: LD_INT 2
64440: EQUAL
64441: IFFALSE 64454
// ComExitVehicle ( unit ) else
64443: LD_VAR 0 1
64447: PPUSH
64448: CALL_OW 121
64452: GO 64463
// ComExitBuilding ( unit ) ;
64454: LD_VAR 0 1
64458: PPUSH
64459: CALL_OW 122
// result := tmp ;
64463: LD_ADDR_VAR 0 2
64467: PUSH
64468: LD_VAR 0 3
64472: ST_TO_ADDR
// end ;
64473: LD_VAR 0 2
64477: RET
// export function ResetHc ; begin
64478: LD_INT 0
64480: PPUSH
// InitHc ;
64481: CALL_OW 19
// hc_importance := 0 ;
64485: LD_ADDR_OWVAR 32
64489: PUSH
64490: LD_INT 0
64492: ST_TO_ADDR
// end ;
64493: LD_VAR 0 1
64497: RET
