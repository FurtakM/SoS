// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 21
// FogOff ( 2 ) ;
  14: LD_INT 2
  16: PPUSH
  17: CALL_OW 344
// PrepareNature ( forestArea , swampArea ) ;
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 2
  26: PPUSH
  27: CALL 690 0 2
// PrepareArabian ;
  31: CALL 2985 0 0
// PrepareRussian ;
  35: CALL 4583 0 0
// Action ;
  39: CALL 8136 0 0
// end ;
  43: END
// export debug , prefix , hasFlamethrower , ibrahimJoinedIn04 , westBaseSpotted , drugsTested , remoteControlTested , spottedCrossRoad , westBaseCaptured , eastBaseCaptured , drugsResearched , remoteControlConstructed , radarConstructed , reinforcementsAllowed , convoySavedCounter , convoyCounter , convoyStarted ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prefix := 04_2_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 04_2_
  62: ST_TO_ADDR
// hasFlamethrower := LoadVariable ( 04_1_Flamethrower , debug ) ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 04_1_Flamethrower
  70: PPUSH
  71: LD_EXP 1
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// ibrahimJoinedIn04 := LoadVariable ( 04_2_IbrahimJoined , false ) ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_STRING 04_2_IbrahimJoined
  88: PPUSH
  89: LD_INT 0
  91: PPUSH
  92: CALL_OW 30
  96: ST_TO_ADDR
// spottedCrossRoad := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// westBaseCaptured := false ;
 105: LD_ADDR_EXP 9
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// eastBaseCaptured := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// westBaseSpotted := false ;
 121: LD_ADDR_EXP 5
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// drugsResearched := false ;
 129: LD_ADDR_EXP 11
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// drugsTested := false ;
 137: LD_ADDR_EXP 6
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// radarConstructed := false ;
 145: LD_ADDR_EXP 13
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// remoteControlConstructed := false ;
 153: LD_ADDR_EXP 12
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// remoteControlTested := false ;
 161: LD_ADDR_EXP 7
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// convoyStarted := false ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// convoySavedCounter := 0 ;
 177: LD_ADDR_EXP 15
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// convoyCounter := [ 4 , 5 , 6 ] [ Difficulty ] ;
 185: LD_ADDR_EXP 16
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 5
 195: PUSH
 196: LD_INT 6
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// reinforcementsAllowed := LoadVariable ( 04_1_RuLabCaptured , false ) ;
 210: LD_ADDR_EXP 14
 214: PUSH
 215: LD_STRING 04_1_RuLabCaptured
 217: PPUSH
 218: LD_INT 0
 220: PPUSH
 221: CALL_OW 30
 225: ST_TO_ADDR
// end ;
 226: LD_VAR 0 1
 230: RET
// every 0 0$1 trigger debug do var i ;
 231: LD_EXP 1
 235: IFFALSE 319
 237: GO 239
 239: DISABLE
 240: LD_INT 0
 242: PPUSH
// begin enable ;
 243: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 244: LD_ADDR_VAR 0 1
 248: PUSH
 249: LD_INT 22
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: PUSH
 259: LD_INT 3
 261: PUSH
 262: LD_INT 21
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: EMPTY
 269: LIST
 270: LIST
 271: PUSH
 272: EMPTY
 273: LIST
 274: LIST
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PPUSH
 280: CALL_OW 69
 284: PUSH
 285: FOR_IN
 286: IFFALSE 317
// if GetLives ( i ) < 1000 then
 288: LD_VAR 0 1
 292: PPUSH
 293: CALL_OW 256
 297: PUSH
 298: LD_INT 1000
 300: LESS
 301: IFFALSE 315
// SetLives ( i , 1000 ) ;
 303: LD_VAR 0 1
 307: PPUSH
 308: LD_INT 1000
 310: PPUSH
 311: CALL_OW 234
 315: GO 285
 317: POP
 318: POP
// end ; end_of_file
 319: PPOPN 1
 321: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 322: LD_INT 0
 324: PPUSH
 325: PPUSH
// if exist_mode then
 326: LD_VAR 0 2
 330: IFFALSE 355
// unit := CreateCharacter ( prefix & ident ) else
 332: LD_ADDR_VAR 0 5
 336: PUSH
 337: LD_VAR 0 3
 341: PUSH
 342: LD_VAR 0 1
 346: STR
 347: PPUSH
 348: CALL_OW 34
 352: ST_TO_ADDR
 353: GO 370
// unit := NewCharacter ( ident ) ;
 355: LD_ADDR_VAR 0 5
 359: PUSH
 360: LD_VAR 0 1
 364: PPUSH
 365: CALL_OW 25
 369: ST_TO_ADDR
// result := unit ;
 370: LD_ADDR_VAR 0 4
 374: PUSH
 375: LD_VAR 0 5
 379: ST_TO_ADDR
// end ;
 380: LD_VAR 0 4
 384: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 385: LD_INT 0
 387: PPUSH
// uc_side := side ;
 388: LD_ADDR_OWVAR 20
 392: PUSH
 393: LD_VAR 0 1
 397: ST_TO_ADDR
// uc_nation := nation ;
 398: LD_ADDR_OWVAR 21
 402: PUSH
 403: LD_VAR 0 2
 407: ST_TO_ADDR
// vc_chassis := chassis ;
 408: LD_ADDR_OWVAR 37
 412: PUSH
 413: LD_VAR 0 3
 417: ST_TO_ADDR
// vc_engine := engine ;
 418: LD_ADDR_OWVAR 39
 422: PUSH
 423: LD_VAR 0 4
 427: ST_TO_ADDR
// vc_control := control ;
 428: LD_ADDR_OWVAR 38
 432: PUSH
 433: LD_VAR 0 5
 437: ST_TO_ADDR
// vc_weapon := weapon ;
 438: LD_ADDR_OWVAR 40
 442: PUSH
 443: LD_VAR 0 6
 447: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 448: LD_ADDR_OWVAR 41
 452: PUSH
 453: LD_VAR 0 7
 457: ST_TO_ADDR
// result := CreateVehicle ;
 458: LD_ADDR_VAR 0 8
 462: PUSH
 463: CALL_OW 45
 467: ST_TO_ADDR
// end ;
 468: LD_VAR 0 8
 472: RET
// export function SayX ( units , ident ) ; var i ; begin
 473: LD_INT 0
 475: PPUSH
 476: PPUSH
// result := false ;
 477: LD_ADDR_VAR 0 3
 481: PUSH
 482: LD_INT 0
 484: ST_TO_ADDR
// if not units then
 485: LD_VAR 0 1
 489: NOT
 490: IFFALSE 494
// exit ;
 492: GO 548
// for i in units do
 494: LD_ADDR_VAR 0 4
 498: PUSH
 499: LD_VAR 0 1
 503: PUSH
 504: FOR_IN
 505: IFFALSE 546
// if IsOk ( i ) then
 507: LD_VAR 0 4
 511: PPUSH
 512: CALL_OW 302
 516: IFFALSE 544
// begin Say ( i , ident ) ;
 518: LD_VAR 0 4
 522: PPUSH
 523: LD_VAR 0 2
 527: PPUSH
 528: CALL_OW 88
// result := i ;
 532: LD_ADDR_VAR 0 3
 536: PUSH
 537: LD_VAR 0 4
 541: ST_TO_ADDR
// break ;
 542: GO 546
// end ;
 544: GO 504
 546: POP
 547: POP
// end ;
 548: LD_VAR 0 3
 552: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 553: LD_INT 0
 555: PPUSH
 556: PPUSH
// InitUc ;
 557: CALL_OW 18
// InitHc ;
 561: CALL_OW 19
// uc_side := 0 ;
 565: LD_ADDR_OWVAR 20
 569: PUSH
 570: LD_INT 0
 572: ST_TO_ADDR
// uc_nation := 0 ;
 573: LD_ADDR_OWVAR 21
 577: PUSH
 578: LD_INT 0
 580: ST_TO_ADDR
// for i = 1 to amount do
 581: LD_ADDR_VAR 0 4
 585: PUSH
 586: DOUBLE
 587: LD_INT 1
 589: DEC
 590: ST_TO_ADDR
 591: LD_VAR 0 2
 595: PUSH
 596: FOR_TO
 597: IFFALSE 679
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 599: LD_ADDR_OWVAR 29
 603: PUSH
 604: LD_INT 9
 606: PPUSH
 607: LD_INT 12
 609: PPUSH
 610: CALL_OW 12
 614: PUSH
 615: LD_INT 9
 617: PPUSH
 618: LD_INT 12
 620: PPUSH
 621: CALL_OW 12
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 630: LD_ADDR_OWVAR 35
 634: PUSH
 635: LD_INT 1
 637: NEG
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: CALL_OW 12
 646: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 647: LD_INT 0
 649: PPUSH
 650: LD_INT 12
 652: PPUSH
 653: LD_INT 1
 655: PPUSH
 656: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 660: CALL_OW 44
 664: PPUSH
 665: LD_VAR 0 1
 669: PPUSH
 670: LD_INT 0
 672: PPUSH
 673: CALL_OW 49
// end ;
 677: GO 596
 679: POP
 680: POP
// InitHc ;
 681: CALL_OW 19
// end ;
 685: LD_VAR 0 3
 689: RET
// export function PrepareNature ( forest , swamp ) ; var i ; begin
 690: LD_INT 0
 692: PPUSH
 693: PPUSH
// uc_side := 0 ;
 694: LD_ADDR_OWVAR 20
 698: PUSH
 699: LD_INT 0
 701: ST_TO_ADDR
// uc_nation := 0 ;
 702: LD_ADDR_OWVAR 21
 706: PUSH
 707: LD_INT 0
 709: ST_TO_ADDR
// for i := 1 to 3 do
 710: LD_ADDR_VAR 0 4
 714: PUSH
 715: DOUBLE
 716: LD_INT 1
 718: DEC
 719: ST_TO_ADDR
 720: LD_INT 3
 722: PUSH
 723: FOR_TO
 724: IFFALSE 761
// begin hc_class := 21 ;
 726: LD_ADDR_OWVAR 28
 730: PUSH
 731: LD_INT 21
 733: ST_TO_ADDR
// hc_gallery :=  ;
 734: LD_ADDR_OWVAR 33
 738: PUSH
 739: LD_STRING 
 741: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 742: CALL_OW 44
 746: PPUSH
 747: LD_VAR 0 1
 751: PPUSH
 752: LD_INT 0
 754: PPUSH
 755: CALL_OW 49
// end ;
 759: GO 723
 761: POP
 762: POP
// for i := 1 to 3 do
 763: LD_ADDR_VAR 0 4
 767: PUSH
 768: DOUBLE
 769: LD_INT 1
 771: DEC
 772: ST_TO_ADDR
 773: LD_INT 3
 775: PUSH
 776: FOR_TO
 777: IFFALSE 814
// begin hc_class := 18 ;
 779: LD_ADDR_OWVAR 28
 783: PUSH
 784: LD_INT 18
 786: ST_TO_ADDR
// hc_gallery :=  ;
 787: LD_ADDR_OWVAR 33
 791: PUSH
 792: LD_STRING 
 794: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 795: CALL_OW 44
 799: PPUSH
 800: LD_VAR 0 1
 804: PPUSH
 805: LD_INT 0
 807: PPUSH
 808: CALL_OW 49
// end ;
 812: GO 776
 814: POP
 815: POP
// for i := 1 to 3 do
 816: LD_ADDR_VAR 0 4
 820: PUSH
 821: DOUBLE
 822: LD_INT 1
 824: DEC
 825: ST_TO_ADDR
 826: LD_INT 3
 828: PUSH
 829: FOR_TO
 830: IFFALSE 867
// begin hc_class := 13 ;
 832: LD_ADDR_OWVAR 28
 836: PUSH
 837: LD_INT 13
 839: ST_TO_ADDR
// hc_gallery :=  ;
 840: LD_ADDR_OWVAR 33
 844: PUSH
 845: LD_STRING 
 847: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 848: CALL_OW 44
 852: PPUSH
 853: LD_VAR 0 1
 857: PPUSH
 858: LD_INT 0
 860: PPUSH
 861: CALL_OW 49
// end ;
 865: GO 829
 867: POP
 868: POP
// for i := 1 to 4 do
 869: LD_ADDR_VAR 0 4
 873: PUSH
 874: DOUBLE
 875: LD_INT 1
 877: DEC
 878: ST_TO_ADDR
 879: LD_INT 4
 881: PUSH
 882: FOR_TO
 883: IFFALSE 920
// begin hc_class := class_frog ;
 885: LD_ADDR_OWVAR 28
 889: PUSH
 890: LD_INT 19
 892: ST_TO_ADDR
// hc_gallery :=  ;
 893: LD_ADDR_OWVAR 33
 897: PUSH
 898: LD_STRING 
 900: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
 901: CALL_OW 44
 905: PPUSH
 906: LD_VAR 0 2
 910: PPUSH
 911: LD_INT 0
 913: PPUSH
 914: CALL_OW 49
// end ;
 918: GO 882
 920: POP
 921: POP
// end ;
 922: LD_VAR 0 3
 926: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 927: LD_INT 0
 929: PPUSH
 930: PPUSH
 931: PPUSH
// if not observer or not unit then
 932: LD_VAR 0 1
 936: NOT
 937: PUSH
 938: LD_VAR 0 2
 942: NOT
 943: OR
 944: IFFALSE 948
// exit ;
 946: GO 996
// if not See ( GetSide ( observer ) , unit ) then
 948: LD_VAR 0 1
 952: PPUSH
 953: CALL_OW 255
 957: PPUSH
 958: LD_VAR 0 2
 962: PPUSH
 963: CALL_OW 292
 967: NOT
 968: IFFALSE 972
// exit ;
 970: GO 996
// result := GetDistUnits ( observer , unit ) < 12 ;
 972: LD_ADDR_VAR 0 3
 976: PUSH
 977: LD_VAR 0 1
 981: PPUSH
 982: LD_VAR 0 2
 986: PPUSH
 987: CALL_OW 296
 991: PUSH
 992: LD_INT 12
 994: LESS
 995: ST_TO_ADDR
// end ;
 996: LD_VAR 0 3
1000: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
1001: LD_INT 0
1003: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
1004: LD_VAR 0 2
1008: PUSH
1009: LD_INT 1
1011: ARRAY
1012: PPUSH
1013: LD_VAR 0 2
1017: PUSH
1018: LD_INT 2
1020: ARRAY
1021: PPUSH
1022: CALL_OW 488
1026: PUSH
1027: LD_VAR 0 2
1031: PUSH
1032: LD_INT 1
1034: ARRAY
1035: PPUSH
1036: LD_VAR 0 2
1040: PUSH
1041: LD_INT 2
1043: ARRAY
1044: PPUSH
1045: CALL_OW 428
1049: PUSH
1050: LD_INT 0
1052: EQUAL
1053: AND
1054: IFFALSE 1088
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
1056: LD_VAR 0 1
1060: PPUSH
1061: LD_VAR 0 2
1065: PUSH
1066: LD_INT 1
1068: ARRAY
1069: PPUSH
1070: LD_VAR 0 2
1074: PUSH
1075: LD_INT 2
1077: ARRAY
1078: PPUSH
1079: LD_VAR 0 3
1083: PPUSH
1084: CALL_OW 48
// end ;
1088: LD_VAR 0 4
1092: RET
// export function Video ( mode ) ; begin
1093: LD_INT 0
1095: PPUSH
// ingame_video = mode ;
1096: LD_ADDR_OWVAR 52
1100: PUSH
1101: LD_VAR 0 1
1105: ST_TO_ADDR
// interface_hidden = mode ;
1106: LD_ADDR_OWVAR 54
1110: PUSH
1111: LD_VAR 0 1
1115: ST_TO_ADDR
// end ;
1116: LD_VAR 0 2
1120: RET
// export function ReverseArray ( array ) ; var i ; begin
1121: LD_INT 0
1123: PPUSH
1124: PPUSH
// if not array then
1125: LD_VAR 0 1
1129: NOT
1130: IFFALSE 1134
// exit ;
1132: GO 1192
// result := [ ] ;
1134: LD_ADDR_VAR 0 2
1138: PUSH
1139: EMPTY
1140: ST_TO_ADDR
// for i := 1 to array do
1141: LD_ADDR_VAR 0 3
1145: PUSH
1146: DOUBLE
1147: LD_INT 1
1149: DEC
1150: ST_TO_ADDR
1151: LD_VAR 0 1
1155: PUSH
1156: FOR_TO
1157: IFFALSE 1190
// result := Insert ( result , 1 , array [ i ] ) ;
1159: LD_ADDR_VAR 0 2
1163: PUSH
1164: LD_VAR 0 2
1168: PPUSH
1169: LD_INT 1
1171: PPUSH
1172: LD_VAR 0 1
1176: PUSH
1177: LD_VAR 0 3
1181: ARRAY
1182: PPUSH
1183: CALL_OW 2
1187: ST_TO_ADDR
1188: GO 1156
1190: POP
1191: POP
// end ;
1192: LD_VAR 0 2
1196: RET
// export function ComExit ( unit ) ; begin
1197: LD_INT 0
1199: PPUSH
// result := IsInUnit ( unit ) ;
1200: LD_ADDR_VAR 0 2
1204: PUSH
1205: LD_VAR 0 1
1209: PPUSH
1210: CALL_OW 310
1214: ST_TO_ADDR
// if not result then
1215: LD_VAR 0 2
1219: NOT
1220: IFFALSE 1224
// exit ;
1222: GO 1259
// if GetType ( result ) = unit_vehicle then
1224: LD_VAR 0 2
1228: PPUSH
1229: CALL_OW 247
1233: PUSH
1234: LD_INT 2
1236: EQUAL
1237: IFFALSE 1250
// ComExitVehicle ( unit ) else
1239: LD_VAR 0 1
1243: PPUSH
1244: CALL_OW 121
1248: GO 1259
// ComExitBuilding ( unit ) ;
1250: LD_VAR 0 1
1254: PPUSH
1255: CALL_OW 122
// end ;
1259: LD_VAR 0 2
1263: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1264: LD_INT 0
1266: PPUSH
1267: PPUSH
// if not side or not nation then
1268: LD_VAR 0 1
1272: NOT
1273: PUSH
1274: LD_VAR 0 2
1278: NOT
1279: OR
1280: IFFALSE 1284
// exit ;
1282: GO 2048
// case nation of nation_american :
1284: LD_VAR 0 2
1288: PUSH
1289: LD_INT 1
1291: DOUBLE
1292: EQUAL
1293: IFTRUE 1297
1295: GO 1511
1297: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1298: LD_ADDR_VAR 0 4
1302: PUSH
1303: LD_INT 35
1305: PUSH
1306: LD_INT 45
1308: PUSH
1309: LD_INT 46
1311: PUSH
1312: LD_INT 47
1314: PUSH
1315: LD_INT 82
1317: PUSH
1318: LD_INT 83
1320: PUSH
1321: LD_INT 84
1323: PUSH
1324: LD_INT 85
1326: PUSH
1327: LD_INT 86
1329: PUSH
1330: LD_INT 1
1332: PUSH
1333: LD_INT 2
1335: PUSH
1336: LD_INT 6
1338: PUSH
1339: LD_INT 15
1341: PUSH
1342: LD_INT 16
1344: PUSH
1345: LD_INT 7
1347: PUSH
1348: LD_INT 12
1350: PUSH
1351: LD_INT 13
1353: PUSH
1354: LD_INT 10
1356: PUSH
1357: LD_INT 14
1359: PUSH
1360: LD_INT 20
1362: PUSH
1363: LD_INT 21
1365: PUSH
1366: LD_INT 22
1368: PUSH
1369: LD_INT 25
1371: PUSH
1372: LD_INT 32
1374: PUSH
1375: LD_INT 27
1377: PUSH
1378: LD_INT 36
1380: PUSH
1381: LD_INT 69
1383: PUSH
1384: LD_INT 39
1386: PUSH
1387: LD_INT 34
1389: PUSH
1390: LD_INT 40
1392: PUSH
1393: LD_INT 48
1395: PUSH
1396: LD_INT 49
1398: PUSH
1399: LD_INT 50
1401: PUSH
1402: LD_INT 51
1404: PUSH
1405: LD_INT 52
1407: PUSH
1408: LD_INT 53
1410: PUSH
1411: LD_INT 54
1413: PUSH
1414: LD_INT 55
1416: PUSH
1417: LD_INT 56
1419: PUSH
1420: LD_INT 57
1422: PUSH
1423: LD_INT 58
1425: PUSH
1426: LD_INT 59
1428: PUSH
1429: LD_INT 60
1431: PUSH
1432: LD_INT 61
1434: PUSH
1435: LD_INT 62
1437: PUSH
1438: LD_INT 80
1440: PUSH
1441: LD_INT 82
1443: PUSH
1444: LD_INT 83
1446: PUSH
1447: LD_INT 84
1449: PUSH
1450: LD_INT 85
1452: PUSH
1453: LD_INT 86
1455: PUSH
1456: EMPTY
1457: LIST
1458: LIST
1459: LIST
1460: LIST
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: ST_TO_ADDR
1509: GO 1972
1511: LD_INT 2
1513: DOUBLE
1514: EQUAL
1515: IFTRUE 1519
1517: GO 1741
1519: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1520: LD_ADDR_VAR 0 4
1524: PUSH
1525: LD_INT 35
1527: PUSH
1528: LD_INT 45
1530: PUSH
1531: LD_INT 46
1533: PUSH
1534: LD_INT 47
1536: PUSH
1537: LD_INT 82
1539: PUSH
1540: LD_INT 83
1542: PUSH
1543: LD_INT 84
1545: PUSH
1546: LD_INT 85
1548: PUSH
1549: LD_INT 87
1551: PUSH
1552: LD_INT 70
1554: PUSH
1555: LD_INT 1
1557: PUSH
1558: LD_INT 11
1560: PUSH
1561: LD_INT 3
1563: PUSH
1564: LD_INT 4
1566: PUSH
1567: LD_INT 5
1569: PUSH
1570: LD_INT 6
1572: PUSH
1573: LD_INT 15
1575: PUSH
1576: LD_INT 18
1578: PUSH
1579: LD_INT 7
1581: PUSH
1582: LD_INT 17
1584: PUSH
1585: LD_INT 8
1587: PUSH
1588: LD_INT 20
1590: PUSH
1591: LD_INT 21
1593: PUSH
1594: LD_INT 22
1596: PUSH
1597: LD_INT 72
1599: PUSH
1600: LD_INT 26
1602: PUSH
1603: LD_INT 69
1605: PUSH
1606: LD_INT 39
1608: PUSH
1609: LD_INT 40
1611: PUSH
1612: LD_INT 41
1614: PUSH
1615: LD_INT 42
1617: PUSH
1618: LD_INT 43
1620: PUSH
1621: LD_INT 48
1623: PUSH
1624: LD_INT 49
1626: PUSH
1627: LD_INT 50
1629: PUSH
1630: LD_INT 51
1632: PUSH
1633: LD_INT 52
1635: PUSH
1636: LD_INT 53
1638: PUSH
1639: LD_INT 54
1641: PUSH
1642: LD_INT 55
1644: PUSH
1645: LD_INT 56
1647: PUSH
1648: LD_INT 60
1650: PUSH
1651: LD_INT 61
1653: PUSH
1654: LD_INT 62
1656: PUSH
1657: LD_INT 66
1659: PUSH
1660: LD_INT 67
1662: PUSH
1663: LD_INT 68
1665: PUSH
1666: LD_INT 81
1668: PUSH
1669: LD_INT 82
1671: PUSH
1672: LD_INT 83
1674: PUSH
1675: LD_INT 84
1677: PUSH
1678: LD_INT 85
1680: PUSH
1681: LD_INT 87
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: LIST
1692: LIST
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: LIST
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: LIST
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: ST_TO_ADDR
1739: GO 1972
1741: LD_INT 3
1743: DOUBLE
1744: EQUAL
1745: IFTRUE 1749
1747: GO 1971
1749: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1750: LD_ADDR_VAR 0 4
1754: PUSH
1755: LD_INT 46
1757: PUSH
1758: LD_INT 47
1760: PUSH
1761: LD_INT 1
1763: PUSH
1764: LD_INT 2
1766: PUSH
1767: LD_INT 82
1769: PUSH
1770: LD_INT 83
1772: PUSH
1773: LD_INT 84
1775: PUSH
1776: LD_INT 85
1778: PUSH
1779: LD_INT 86
1781: PUSH
1782: LD_INT 11
1784: PUSH
1785: LD_INT 9
1787: PUSH
1788: LD_INT 20
1790: PUSH
1791: LD_INT 19
1793: PUSH
1794: LD_INT 21
1796: PUSH
1797: LD_INT 24
1799: PUSH
1800: LD_INT 22
1802: PUSH
1803: LD_INT 25
1805: PUSH
1806: LD_INT 28
1808: PUSH
1809: LD_INT 29
1811: PUSH
1812: LD_INT 30
1814: PUSH
1815: LD_INT 31
1817: PUSH
1818: LD_INT 37
1820: PUSH
1821: LD_INT 38
1823: PUSH
1824: LD_INT 32
1826: PUSH
1827: LD_INT 27
1829: PUSH
1830: LD_INT 33
1832: PUSH
1833: LD_INT 69
1835: PUSH
1836: LD_INT 39
1838: PUSH
1839: LD_INT 34
1841: PUSH
1842: LD_INT 40
1844: PUSH
1845: LD_INT 71
1847: PUSH
1848: LD_INT 23
1850: PUSH
1851: LD_INT 44
1853: PUSH
1854: LD_INT 48
1856: PUSH
1857: LD_INT 49
1859: PUSH
1860: LD_INT 50
1862: PUSH
1863: LD_INT 51
1865: PUSH
1866: LD_INT 52
1868: PUSH
1869: LD_INT 53
1871: PUSH
1872: LD_INT 54
1874: PUSH
1875: LD_INT 55
1877: PUSH
1878: LD_INT 56
1880: PUSH
1881: LD_INT 57
1883: PUSH
1884: LD_INT 58
1886: PUSH
1887: LD_INT 59
1889: PUSH
1890: LD_INT 63
1892: PUSH
1893: LD_INT 64
1895: PUSH
1896: LD_INT 65
1898: PUSH
1899: LD_INT 82
1901: PUSH
1902: LD_INT 83
1904: PUSH
1905: LD_INT 84
1907: PUSH
1908: LD_INT 85
1910: PUSH
1911: LD_INT 86
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: LIST
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: LIST
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: LIST
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: ST_TO_ADDR
1969: GO 1972
1971: POP
// if state > - 1 and state < 3 then
1972: LD_VAR 0 3
1976: PUSH
1977: LD_INT 1
1979: NEG
1980: GREATER
1981: PUSH
1982: LD_VAR 0 3
1986: PUSH
1987: LD_INT 3
1989: LESS
1990: AND
1991: IFFALSE 2048
// for i in result do
1993: LD_ADDR_VAR 0 5
1997: PUSH
1998: LD_VAR 0 4
2002: PUSH
2003: FOR_IN
2004: IFFALSE 2046
// if GetTech ( i , side ) <> state then
2006: LD_VAR 0 5
2010: PPUSH
2011: LD_VAR 0 1
2015: PPUSH
2016: CALL_OW 321
2020: PUSH
2021: LD_VAR 0 3
2025: NONEQUAL
2026: IFFALSE 2044
// result := result diff i ;
2028: LD_ADDR_VAR 0 4
2032: PUSH
2033: LD_VAR 0 4
2037: PUSH
2038: LD_VAR 0 5
2042: DIFF
2043: ST_TO_ADDR
2044: GO 2003
2046: POP
2047: POP
// end ;
2048: LD_VAR 0 4
2052: RET
// export function SortByDistanceXY ( x , y , list , asc ) ; var i , j , tmp ; begin
2053: LD_INT 0
2055: PPUSH
2056: PPUSH
2057: PPUSH
2058: PPUSH
// if not list then
2059: LD_VAR 0 3
2063: NOT
2064: IFFALSE 2068
// exit ;
2066: GO 2376
// result := [ ] ;
2068: LD_ADDR_VAR 0 5
2072: PUSH
2073: EMPTY
2074: ST_TO_ADDR
// for i in list do
2075: LD_ADDR_VAR 0 6
2079: PUSH
2080: LD_VAR 0 3
2084: PUSH
2085: FOR_IN
2086: IFFALSE 2288
// begin tmp := GetDistUnitXY ( i , x , y ) ;
2088: LD_ADDR_VAR 0 8
2092: PUSH
2093: LD_VAR 0 6
2097: PPUSH
2098: LD_VAR 0 1
2102: PPUSH
2103: LD_VAR 0 2
2107: PPUSH
2108: CALL_OW 297
2112: ST_TO_ADDR
// if not result then
2113: LD_VAR 0 5
2117: NOT
2118: IFFALSE 2144
// result := [ [ i , tmp ] ] else
2120: LD_ADDR_VAR 0 5
2124: PUSH
2125: LD_VAR 0 6
2129: PUSH
2130: LD_VAR 0 8
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: PUSH
2139: EMPTY
2140: LIST
2141: ST_TO_ADDR
2142: GO 2286
// begin if result [ result ] [ 2 ] < tmp then
2144: LD_VAR 0 5
2148: PUSH
2149: LD_VAR 0 5
2153: ARRAY
2154: PUSH
2155: LD_INT 2
2157: ARRAY
2158: PUSH
2159: LD_VAR 0 8
2163: LESS
2164: IFFALSE 2206
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
2166: LD_ADDR_VAR 0 5
2170: PUSH
2171: LD_VAR 0 5
2175: PPUSH
2176: LD_VAR 0 5
2180: PUSH
2181: LD_INT 1
2183: PLUS
2184: PPUSH
2185: LD_VAR 0 6
2189: PUSH
2190: LD_VAR 0 8
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: PPUSH
2199: CALL_OW 2
2203: ST_TO_ADDR
2204: GO 2286
// for j = 1 to result do
2206: LD_ADDR_VAR 0 7
2210: PUSH
2211: DOUBLE
2212: LD_INT 1
2214: DEC
2215: ST_TO_ADDR
2216: LD_VAR 0 5
2220: PUSH
2221: FOR_TO
2222: IFFALSE 2284
// begin if tmp < result [ j ] [ 2 ] then
2224: LD_VAR 0 8
2228: PUSH
2229: LD_VAR 0 5
2233: PUSH
2234: LD_VAR 0 7
2238: ARRAY
2239: PUSH
2240: LD_INT 2
2242: ARRAY
2243: LESS
2244: IFFALSE 2282
// begin result := Insert ( result , j , [ i , tmp ] ) ;
2246: LD_ADDR_VAR 0 5
2250: PUSH
2251: LD_VAR 0 5
2255: PPUSH
2256: LD_VAR 0 7
2260: PPUSH
2261: LD_VAR 0 6
2265: PUSH
2266: LD_VAR 0 8
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PPUSH
2275: CALL_OW 2
2279: ST_TO_ADDR
// break ;
2280: GO 2284
// end ; end ;
2282: GO 2221
2284: POP
2285: POP
// end ; end ;
2286: GO 2085
2288: POP
2289: POP
// if result and not asc then
2290: LD_VAR 0 5
2294: PUSH
2295: LD_VAR 0 4
2299: NOT
2300: AND
2301: IFFALSE 2376
// begin tmp := result ;
2303: LD_ADDR_VAR 0 8
2307: PUSH
2308: LD_VAR 0 5
2312: ST_TO_ADDR
// for i = tmp downto 1 do
2313: LD_ADDR_VAR 0 6
2317: PUSH
2318: DOUBLE
2319: LD_VAR 0 8
2323: INC
2324: ST_TO_ADDR
2325: LD_INT 1
2327: PUSH
2328: FOR_DOWNTO
2329: IFFALSE 2374
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
2331: LD_ADDR_VAR 0 5
2335: PUSH
2336: LD_VAR 0 5
2340: PPUSH
2341: LD_VAR 0 8
2345: PUSH
2346: LD_VAR 0 6
2350: MINUS
2351: PUSH
2352: LD_INT 1
2354: PLUS
2355: PPUSH
2356: LD_VAR 0 8
2360: PUSH
2361: LD_VAR 0 6
2365: ARRAY
2366: PPUSH
2367: CALL_OW 1
2371: ST_TO_ADDR
2372: GO 2328
2374: POP
2375: POP
// end ; end ;
2376: LD_VAR 0 5
2380: RET
// export function SortByDistanceUnit ( unit , list , asc ) ; begin
2381: LD_INT 0
2383: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc ) ;
2384: LD_ADDR_VAR 0 4
2388: PUSH
2389: LD_VAR 0 1
2393: PPUSH
2394: CALL_OW 250
2398: PPUSH
2399: LD_VAR 0 1
2403: PPUSH
2404: CALL_OW 251
2408: PPUSH
2409: LD_VAR 0 2
2413: PPUSH
2414: LD_VAR 0 3
2418: PPUSH
2419: CALL 2053 0 4
2423: ST_TO_ADDR
// end ;
2424: LD_VAR 0 4
2428: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
2429: LD_INT 0
2431: PPUSH
2432: PPUSH
2433: PPUSH
2434: PPUSH
2435: PPUSH
// if not unit then
2436: LD_VAR 0 1
2440: NOT
2441: IFFALSE 2445
// exit ;
2443: GO 2647
// side := GetSide ( unit ) ;
2445: LD_ADDR_VAR 0 4
2449: PUSH
2450: LD_VAR 0 1
2454: PPUSH
2455: CALL_OW 255
2459: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
2460: LD_ADDR_VAR 0 5
2464: PUSH
2465: LD_INT 22
2467: PUSH
2468: LD_VAR 0 4
2472: PUSH
2473: EMPTY
2474: LIST
2475: LIST
2476: PUSH
2477: LD_INT 30
2479: PUSH
2480: LD_VAR 0 2
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: PPUSH
2493: CALL_OW 69
2497: ST_TO_ADDR
// if not tmp then
2498: LD_VAR 0 5
2502: NOT
2503: IFFALSE 2507
// exit ;
2505: GO 2647
// tmp := SortByDistanceUnit ( unit , tmp , true ) ;
2507: LD_ADDR_VAR 0 5
2511: PUSH
2512: LD_VAR 0 1
2516: PPUSH
2517: LD_VAR 0 5
2521: PPUSH
2522: LD_INT 1
2524: PPUSH
2525: CALL 2381 0 3
2529: ST_TO_ADDR
// places := 1 ;
2530: LD_ADDR_VAR 0 7
2534: PUSH
2535: LD_INT 1
2537: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
2538: LD_VAR 0 2
2542: PUSH
2543: LD_INT 0
2545: PUSH
2546: LD_INT 1
2548: PUSH
2549: LD_INT 4
2551: PUSH
2552: LD_INT 5
2554: PUSH
2555: LD_INT 2
2557: PUSH
2558: LD_INT 3
2560: PUSH
2561: LD_INT 6
2563: PUSH
2564: LD_INT 7
2566: PUSH
2567: LD_INT 8
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: LIST
2580: IN
2581: IFFALSE 2591
// places := 6 ;
2583: LD_ADDR_VAR 0 7
2587: PUSH
2588: LD_INT 6
2590: ST_TO_ADDR
// for i in tmp do
2591: LD_ADDR_VAR 0 6
2595: PUSH
2596: LD_VAR 0 5
2600: PUSH
2601: FOR_IN
2602: IFFALSE 2645
// begin if UnitsInside ( i ) - places <= 0 then
2604: LD_VAR 0 6
2608: PPUSH
2609: CALL_OW 313
2613: PUSH
2614: LD_VAR 0 7
2618: MINUS
2619: PUSH
2620: LD_INT 0
2622: LESSEQUAL
2623: IFFALSE 2629
// continue else
2625: GO 2601
2627: GO 2643
// begin result := i ;
2629: LD_ADDR_VAR 0 3
2633: PUSH
2634: LD_VAR 0 6
2638: ST_TO_ADDR
// exit ;
2639: POP
2640: POP
2641: GO 2647
// end ; end ;
2643: GO 2601
2645: POP
2646: POP
// end ;
2647: LD_VAR 0 3
2651: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
2652: LD_INT 0
2654: PPUSH
2655: PPUSH
2656: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
2657: LD_VAR 0 1
2661: NOT
2662: PUSH
2663: LD_VAR 0 2
2667: PUSH
2668: LD_INT 1
2670: PUSH
2671: LD_INT 2
2673: PUSH
2674: LD_INT 3
2676: PUSH
2677: LD_INT 4
2679: PUSH
2680: EMPTY
2681: LIST
2682: LIST
2683: LIST
2684: LIST
2685: IN
2686: NOT
2687: OR
2688: IFFALSE 2692
// exit ;
2690: GO 2784
// tmp := [ ] ;
2692: LD_ADDR_VAR 0 5
2696: PUSH
2697: EMPTY
2698: ST_TO_ADDR
// for i in units do
2699: LD_ADDR_VAR 0 4
2703: PUSH
2704: LD_VAR 0 1
2708: PUSH
2709: FOR_IN
2710: IFFALSE 2753
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
2712: LD_ADDR_VAR 0 5
2716: PUSH
2717: LD_VAR 0 5
2721: PPUSH
2722: LD_VAR 0 5
2726: PUSH
2727: LD_INT 1
2729: PLUS
2730: PPUSH
2731: LD_VAR 0 4
2735: PPUSH
2736: LD_VAR 0 2
2740: PPUSH
2741: CALL_OW 259
2745: PPUSH
2746: CALL_OW 2
2750: ST_TO_ADDR
2751: GO 2709
2753: POP
2754: POP
// if not tmp then
2755: LD_VAR 0 5
2759: NOT
2760: IFFALSE 2764
// exit ;
2762: GO 2784
// result := SortListByListDesc ( units , tmp ) ;
2764: LD_ADDR_VAR 0 3
2768: PUSH
2769: LD_VAR 0 1
2773: PPUSH
2774: LD_VAR 0 5
2778: PPUSH
2779: CALL_OW 77
2783: ST_TO_ADDR
// end ;
2784: LD_VAR 0 3
2788: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
2789: LD_INT 0
2791: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
2792: LD_VAR 0 1
2796: PPUSH
2797: LD_VAR 0 2
2801: PPUSH
2802: LD_VAR 0 3
2806: PPUSH
2807: LD_VAR 0 4
2811: PPUSH
2812: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
2816: LD_VAR 0 1
2820: PPUSH
2821: LD_VAR 0 2
2825: PPUSH
2826: LD_VAR 0 3
2830: PPUSH
2831: CALL_OW 331
// end ;
2835: LD_VAR 0 5
2839: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
2840: LD_INT 0
2842: PPUSH
// if not units then
2843: LD_VAR 0 1
2847: NOT
2848: IFFALSE 2852
// exit ;
2850: GO 2917
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) , menDialog ) then
2852: LD_VAR 0 1
2856: PPUSH
2857: LD_INT 26
2859: PUSH
2860: LD_INT 1
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PPUSH
2867: CALL_OW 72
2871: PPUSH
2872: LD_VAR 0 2
2876: PPUSH
2877: CALL_OW 88
2881: NOT
2882: IFFALSE 2917
// Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
2884: LD_VAR 0 1
2888: PPUSH
2889: LD_INT 26
2891: PUSH
2892: LD_INT 2
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: PPUSH
2899: CALL_OW 72
2903: PUSH
2904: LD_INT 1
2906: ARRAY
2907: PPUSH
2908: LD_VAR 0 3
2912: PPUSH
2913: CALL_OW 88
// end ;
2917: LD_VAR 0 4
2921: RET
// export function SeeGroup ( side , group ) ; var i ; begin
2922: LD_INT 0
2924: PPUSH
2925: PPUSH
// if not group then
2926: LD_VAR 0 2
2930: NOT
2931: IFFALSE 2935
// exit ;
2933: GO 2980
// for i in group do
2935: LD_ADDR_VAR 0 4
2939: PUSH
2940: LD_VAR 0 2
2944: PUSH
2945: FOR_IN
2946: IFFALSE 2978
// if See ( side , i ) then
2948: LD_VAR 0 1
2952: PPUSH
2953: LD_VAR 0 4
2957: PPUSH
2958: CALL_OW 292
2962: IFFALSE 2976
// begin result := true ;
2964: LD_ADDR_VAR 0 3
2968: PUSH
2969: LD_INT 1
2971: ST_TO_ADDR
// exit ;
2972: POP
2973: POP
2974: GO 2980
// end ;
2976: GO 2945
2978: POP
2979: POP
// end ; end_of_file
2980: LD_VAR 0 3
2984: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
2985: LD_INT 0
2987: PPUSH
2988: PPUSH
// uc_side := 2 ;
2989: LD_ADDR_OWVAR 20
2993: PUSH
2994: LD_INT 2
2996: ST_TO_ADDR
// uc_nation := 2 ;
2997: LD_ADDR_OWVAR 21
3001: PUSH
3002: LD_INT 2
3004: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
3005: LD_ADDR_EXP 18
3009: PUSH
3010: LD_STRING Heike
3012: PPUSH
3013: LD_EXP 1
3017: NOT
3018: PPUSH
3019: LD_EXP 2
3023: PPUSH
3024: CALL 322 0 3
3028: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
3029: LD_ADDR_EXP 21
3033: PUSH
3034: LD_STRING Ibrahim
3036: PPUSH
3037: LD_EXP 1
3041: NOT
3042: PPUSH
3043: LD_EXP 2
3047: PPUSH
3048: CALL 322 0 3
3052: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
3053: LD_ADDR_EXP 19
3057: PUSH
3058: LD_STRING Givi
3060: PPUSH
3061: LD_EXP 1
3065: NOT
3066: PPUSH
3067: LD_EXP 2
3071: PPUSH
3072: CALL 322 0 3
3076: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
3077: LD_ADDR_EXP 22
3081: PUSH
3082: LD_STRING Kamil
3084: PPUSH
3085: LD_EXP 1
3089: NOT
3090: PPUSH
3091: LD_EXP 2
3095: PPUSH
3096: CALL 322 0 3
3100: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
3101: LD_ADDR_EXP 23
3105: PUSH
3106: LD_STRING Kaia
3108: PPUSH
3109: LD_EXP 1
3113: NOT
3114: PPUSH
3115: LD_EXP 2
3119: PPUSH
3120: CALL 322 0 3
3124: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
3125: LD_ADDR_EXP 24
3129: PUSH
3130: LD_STRING Sophia
3132: PPUSH
3133: LD_EXP 1
3137: NOT
3138: PPUSH
3139: LD_EXP 2
3143: PPUSH
3144: CALL 322 0 3
3148: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
3149: LD_ADDR_EXP 25
3153: PUSH
3154: LD_STRING Markov
3156: PPUSH
3157: LD_EXP 1
3161: NOT
3162: PPUSH
3163: LD_EXP 2
3167: PPUSH
3168: CALL 322 0 3
3172: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
3173: LD_ADDR_EXP 30
3177: PUSH
3178: LD_STRING Aviradze
3180: PPUSH
3181: LD_EXP 1
3185: NOT
3186: PPUSH
3187: LD_EXP 2
3191: PPUSH
3192: CALL 322 0 3
3196: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
3197: LD_ADDR_EXP 29
3201: PUSH
3202: LD_STRING Kurt
3204: PPUSH
3205: LD_EXP 1
3209: NOT
3210: PPUSH
3211: LD_EXP 2
3215: PPUSH
3216: CALL 322 0 3
3220: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
3221: LD_ADDR_EXP 20
3225: PUSH
3226: LD_STRING Mike
3228: PPUSH
3229: LD_EXP 1
3233: NOT
3234: PPUSH
3235: LD_EXP 2
3239: PPUSH
3240: CALL 322 0 3
3244: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
3245: LD_ADDR_EXP 27
3249: PUSH
3250: LD_STRING Olaf
3252: PPUSH
3253: LD_INT 0
3255: PPUSH
3256: LD_STRING 
3258: PPUSH
3259: CALL 322 0 3
3263: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_2_others ) ;
3264: LD_ADDR_EXP 31
3268: PUSH
3269: LD_STRING 04_2_others
3271: PPUSH
3272: CALL_OW 31
3276: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_2_apes ) ;
3277: LD_ADDR_EXP 33
3281: PUSH
3282: LD_STRING 04_2_apes
3284: PPUSH
3285: CALL_OW 31
3289: ST_TO_ADDR
// if hasFlamethrower then
3290: LD_EXP 3
3294: IFFALSE 3525
// begin SetTech ( tech_Flame , 2 , state_researched ) ;
3296: LD_INT 70
3298: PPUSH
3299: LD_INT 2
3301: PPUSH
3302: LD_INT 2
3304: PPUSH
3305: CALL_OW 322
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 60 , 40 , 20 ] [ Difficulty ] ] ] ] ;
3309: LD_ADDR_EXP 32
3313: PUSH
3314: LD_INT 13
3316: PUSH
3317: LD_INT 1
3319: PUSH
3320: LD_INT 1
3322: PUSH
3323: LD_INT 27
3325: PUSH
3326: LD_INT 2
3328: PUSH
3329: LD_INT 1000
3331: PUSH
3332: LD_INT 0
3334: PUSH
3335: LD_INT 0
3337: PUSH
3338: EMPTY
3339: LIST
3340: LIST
3341: PUSH
3342: EMPTY
3343: LIST
3344: LIST
3345: LIST
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: PUSH
3351: LD_INT 13
3353: PUSH
3354: LD_INT 1
3356: PUSH
3357: LD_INT 1
3359: PUSH
3360: LD_INT 25
3362: PUSH
3363: LD_INT 2
3365: PUSH
3366: LD_INT 1000
3368: PUSH
3369: LD_INT 0
3371: PUSH
3372: LD_INT 0
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: PUSH
3388: LD_INT 13
3390: PUSH
3391: LD_INT 1
3393: PUSH
3394: LD_INT 1
3396: PUSH
3397: LD_INT 26
3399: PUSH
3400: LD_INT 2
3402: PUSH
3403: LD_INT 1000
3405: PUSH
3406: LD_INT 0
3408: PUSH
3409: LD_INT 0
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: PUSH
3416: EMPTY
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: PUSH
3425: LD_INT 13
3427: PUSH
3428: LD_INT 1
3430: PUSH
3431: LD_INT 1
3433: PUSH
3434: LD_INT 27
3436: PUSH
3437: LD_INT 2
3439: PUSH
3440: LD_INT 1000
3442: PUSH
3443: LD_INT 0
3445: PUSH
3446: LD_INT 0
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: LIST
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: PUSH
3462: LD_INT 13
3464: PUSH
3465: LD_INT 1
3467: PUSH
3468: LD_INT 1
3470: PUSH
3471: LD_INT 32
3473: PUSH
3474: LD_INT 2
3476: PUSH
3477: LD_INT 1000
3479: PUSH
3480: LD_INT 0
3482: PUSH
3483: LD_INT 60
3485: PUSH
3486: LD_INT 40
3488: PUSH
3489: LD_INT 20
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: LIST
3496: PUSH
3497: LD_OWVAR 67
3501: ARRAY
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: LIST
3520: LIST
3521: LIST
3522: ST_TO_ADDR
// end else
3523: GO 3739
// begin heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_double_machine_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay , 2 , 1000 , [ 0 , [ 50 , 30 , 20 ] [ Difficulty ] ] ] ] ;
3525: LD_ADDR_EXP 32
3529: PUSH
3530: LD_INT 13
3532: PUSH
3533: LD_INT 1
3535: PUSH
3536: LD_INT 1
3538: PUSH
3539: LD_INT 25
3541: PUSH
3542: LD_INT 2
3544: PUSH
3545: LD_INT 1000
3547: PUSH
3548: LD_INT 0
3550: PUSH
3551: LD_INT 0
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: PUSH
3558: EMPTY
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: PUSH
3567: LD_INT 13
3569: PUSH
3570: LD_INT 1
3572: PUSH
3573: LD_INT 1
3575: PUSH
3576: LD_INT 27
3578: PUSH
3579: LD_INT 2
3581: PUSH
3582: LD_INT 1000
3584: PUSH
3585: LD_INT 0
3587: PUSH
3588: LD_INT 0
3590: PUSH
3591: EMPTY
3592: LIST
3593: LIST
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: PUSH
3604: LD_INT 13
3606: PUSH
3607: LD_INT 1
3609: PUSH
3610: LD_INT 1
3612: PUSH
3613: LD_INT 24
3615: PUSH
3616: LD_INT 2
3618: PUSH
3619: LD_INT 1000
3621: PUSH
3622: LD_INT 0
3624: PUSH
3625: LD_INT 0
3627: PUSH
3628: EMPTY
3629: LIST
3630: LIST
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: PUSH
3641: LD_INT 13
3643: PUSH
3644: LD_INT 1
3646: PUSH
3647: LD_INT 1
3649: PUSH
3650: LD_INT 27
3652: PUSH
3653: LD_INT 2
3655: PUSH
3656: LD_INT 1000
3658: PUSH
3659: LD_INT 0
3661: PUSH
3662: LD_INT 0
3664: PUSH
3665: EMPTY
3666: LIST
3667: LIST
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: LIST
3675: LIST
3676: LIST
3677: PUSH
3678: LD_INT 13
3680: PUSH
3681: LD_INT 1
3683: PUSH
3684: LD_INT 1
3686: PUSH
3687: LD_INT 32
3689: PUSH
3690: LD_INT 2
3692: PUSH
3693: LD_INT 1000
3695: PUSH
3696: LD_INT 0
3698: PUSH
3699: LD_INT 50
3701: PUSH
3702: LD_INT 30
3704: PUSH
3705: LD_INT 20
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: LIST
3712: PUSH
3713: LD_OWVAR 67
3717: ARRAY
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: PUSH
3723: EMPTY
3724: LIST
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: PUSH
3732: EMPTY
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: LIST
3738: ST_TO_ADDR
// end ; uc_side := 5 ;
3739: LD_ADDR_OWVAR 20
3743: PUSH
3744: LD_INT 5
3746: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
3747: LD_ADDR_EXP 26
3751: PUSH
3752: LD_STRING Abdul
3754: PPUSH
3755: LD_INT 0
3757: PPUSH
3758: LD_STRING 
3760: PPUSH
3761: CALL 322 0 3
3765: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
3766: LD_ADDR_EXP 28
3770: PUSH
3771: LD_STRING Omar
3773: PPUSH
3774: LD_INT 0
3776: PPUSH
3777: LD_STRING 
3779: PPUSH
3780: CALL 322 0 3
3784: ST_TO_ADDR
// end ;
3785: LD_VAR 0 1
3789: RET
// export function PrepareReinforcements ; var pfx , i , tmp , tmp2 ; begin
3790: LD_INT 0
3792: PPUSH
3793: PPUSH
3794: PPUSH
3795: PPUSH
3796: PPUSH
// pfx := 04_1 ;
3797: LD_ADDR_VAR 0 2
3801: PUSH
3802: LD_STRING 04_1
3804: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3805: LD_INT 35
3807: PPUSH
3808: CALL_OW 67
// until not HexInfo ( 3 , 2 ) ;
3812: LD_INT 3
3814: PPUSH
3815: LD_INT 2
3817: PPUSH
3818: CALL_OW 428
3822: NOT
3823: IFFALSE 3805
// tmp := [ ] ;
3825: LD_ADDR_VAR 0 4
3829: PUSH
3830: EMPTY
3831: ST_TO_ADDR
// uc_side := 5 ;
3832: LD_ADDR_OWVAR 20
3836: PUSH
3837: LD_INT 5
3839: ST_TO_ADDR
// uc_nation := 2 ;
3840: LD_ADDR_OWVAR 21
3844: PUSH
3845: LD_INT 2
3847: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze_L , ( not debug ) , pfx ) ;
3848: LD_ADDR_EXP 30
3852: PUSH
3853: LD_STRING Aviradze_L
3855: PPUSH
3856: LD_EXP 1
3860: NOT
3861: PPUSH
3862: LD_VAR 0 2
3866: PPUSH
3867: CALL 322 0 3
3871: ST_TO_ADDR
// SetDir ( Aviradze , 2 ) ;
3872: LD_EXP 30
3876: PPUSH
3877: LD_INT 2
3879: PPUSH
3880: CALL_OW 233
// PlaceUnitArea ( Aviradze , westSpawnPointArea , false ) ;
3884: LD_EXP 30
3888: PPUSH
3889: LD_INT 14
3891: PPUSH
3892: LD_INT 0
3894: PPUSH
3895: CALL_OW 49
// ComMoveXY ( Aviradze , 8 , 6 ) ;
3899: LD_EXP 30
3903: PPUSH
3904: LD_INT 8
3906: PPUSH
3907: LD_INT 6
3909: PPUSH
3910: CALL_OW 111
// AddComHold ( Aviradze ) ;
3914: LD_EXP 30
3918: PPUSH
3919: CALL_OW 200
// tmp := [ Aviradze ] ;
3923: LD_ADDR_VAR 0 4
3927: PUSH
3928: LD_EXP 30
3932: PUSH
3933: EMPTY
3934: LIST
3935: ST_TO_ADDR
// wait ( 0 0$2 ) ;
3936: LD_INT 70
3938: PPUSH
3939: CALL_OW 67
// if PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) then
3943: LD_STRING Ibrahim_L
3945: PPUSH
3946: LD_EXP 1
3950: NOT
3951: PPUSH
3952: LD_VAR 0 2
3956: PPUSH
3957: CALL 322 0 3
3961: IFFALSE 4061
// begin Ibrahim := PrepareUnit ( Ibrahim_L , ( not debug ) , pfx ) ;
3963: LD_ADDR_EXP 21
3967: PUSH
3968: LD_STRING Ibrahim_L
3970: PPUSH
3971: LD_EXP 1
3975: NOT
3976: PPUSH
3977: LD_VAR 0 2
3981: PPUSH
3982: CALL 322 0 3
3986: ST_TO_ADDR
// SetDir ( Ibrahim , 2 ) ;
3987: LD_EXP 21
3991: PPUSH
3992: LD_INT 2
3994: PPUSH
3995: CALL_OW 233
// PlaceUnitArea ( Ibrahim , westSpawnPointArea , false ) ;
3999: LD_EXP 21
4003: PPUSH
4004: LD_INT 14
4006: PPUSH
4007: LD_INT 0
4009: PPUSH
4010: CALL_OW 49
// ComMoveXY ( Ibrahim , 8 , 7 ) ;
4014: LD_EXP 21
4018: PPUSH
4019: LD_INT 8
4021: PPUSH
4022: LD_INT 7
4024: PPUSH
4025: CALL_OW 111
// AddComHold ( Ibrahim ) ;
4029: LD_EXP 21
4033: PPUSH
4034: CALL_OW 200
// tmp := tmp ^ Ibrahim ;
4038: LD_ADDR_VAR 0 4
4042: PUSH
4043: LD_VAR 0 4
4047: PUSH
4048: LD_EXP 21
4052: ADD
4053: ST_TO_ADDR
// wait ( 0 0$2 ) ;
4054: LD_INT 70
4056: PPUSH
4057: CALL_OW 67
// end ; if PrepareUnit ( Kaia_L , ( not debug ) , pfx ) then
4061: LD_STRING Kaia_L
4063: PPUSH
4064: LD_EXP 1
4068: NOT
4069: PPUSH
4070: LD_VAR 0 2
4074: PPUSH
4075: CALL 322 0 3
4079: IFFALSE 4179
// begin Kaia := PrepareUnit ( Kaia_L , ( not debug ) , pfx ) ;
4081: LD_ADDR_EXP 23
4085: PUSH
4086: LD_STRING Kaia_L
4088: PPUSH
4089: LD_EXP 1
4093: NOT
4094: PPUSH
4095: LD_VAR 0 2
4099: PPUSH
4100: CALL 322 0 3
4104: ST_TO_ADDR
// SetDir ( Kaia , 2 ) ;
4105: LD_EXP 23
4109: PPUSH
4110: LD_INT 2
4112: PPUSH
4113: CALL_OW 233
// PlaceUnitArea ( Kaia , westSpawnPointArea , false ) ;
4117: LD_EXP 23
4121: PPUSH
4122: LD_INT 14
4124: PPUSH
4125: LD_INT 0
4127: PPUSH
4128: CALL_OW 49
// ComMoveXY ( Kaia , 8 , 7 ) ;
4132: LD_EXP 23
4136: PPUSH
4137: LD_INT 8
4139: PPUSH
4140: LD_INT 7
4142: PPUSH
4143: CALL_OW 111
// AddComHold ( Kaia ) ;
4147: LD_EXP 23
4151: PPUSH
4152: CALL_OW 200
// tmp := tmp ^ Kaia ;
4156: LD_ADDR_VAR 0 4
4160: PUSH
4161: LD_VAR 0 4
4165: PUSH
4166: LD_EXP 23
4170: ADD
4171: ST_TO_ADDR
// wait ( 0 0$2 ) ;
4172: LD_INT 70
4174: PPUSH
4175: CALL_OW 67
// end ; if PrepareUnit ( Kamil_L , ( not debug ) , pfx ) then
4179: LD_STRING Kamil_L
4181: PPUSH
4182: LD_EXP 1
4186: NOT
4187: PPUSH
4188: LD_VAR 0 2
4192: PPUSH
4193: CALL 322 0 3
4197: IFFALSE 4297
// begin Kamil := PrepareUnit ( Kamil_L , ( not debug ) , pfx ) ;
4199: LD_ADDR_EXP 22
4203: PUSH
4204: LD_STRING Kamil_L
4206: PPUSH
4207: LD_EXP 1
4211: NOT
4212: PPUSH
4213: LD_VAR 0 2
4217: PPUSH
4218: CALL 322 0 3
4222: ST_TO_ADDR
// SetDir ( Kamil , 2 ) ;
4223: LD_EXP 22
4227: PPUSH
4228: LD_INT 2
4230: PPUSH
4231: CALL_OW 233
// PlaceUnitArea ( Kamil , westSpawnPointArea , false ) ;
4235: LD_EXP 22
4239: PPUSH
4240: LD_INT 14
4242: PPUSH
4243: LD_INT 0
4245: PPUSH
4246: CALL_OW 49
// ComMoveXY ( Kamil , 8 , 7 ) ;
4250: LD_EXP 22
4254: PPUSH
4255: LD_INT 8
4257: PPUSH
4258: LD_INT 7
4260: PPUSH
4261: CALL_OW 111
// AddComHold ( Kamil ) ;
4265: LD_EXP 22
4269: PPUSH
4270: CALL_OW 200
// tmp := tmp ^ Kamil ;
4274: LD_ADDR_VAR 0 4
4278: PUSH
4279: LD_VAR 0 4
4283: PUSH
4284: LD_EXP 22
4288: ADD
4289: ST_TO_ADDR
// wait ( 0 0$2 ) ;
4290: LD_INT 70
4292: PPUSH
4293: CALL_OW 67
// end ; if PrepareUnit ( Sophia_L , ( not debug ) , pfx ) then
4297: LD_STRING Sophia_L
4299: PPUSH
4300: LD_EXP 1
4304: NOT
4305: PPUSH
4306: LD_VAR 0 2
4310: PPUSH
4311: CALL 322 0 3
4315: IFFALSE 4415
// begin Sophia := PrepareUnit ( Sophia_L , ( not debug ) , pfx ) ;
4317: LD_ADDR_EXP 24
4321: PUSH
4322: LD_STRING Sophia_L
4324: PPUSH
4325: LD_EXP 1
4329: NOT
4330: PPUSH
4331: LD_VAR 0 2
4335: PPUSH
4336: CALL 322 0 3
4340: ST_TO_ADDR
// SetDir ( Sophia , 2 ) ;
4341: LD_EXP 24
4345: PPUSH
4346: LD_INT 2
4348: PPUSH
4349: CALL_OW 233
// PlaceUnitArea ( Sophia , westSpawnPointArea , false ) ;
4353: LD_EXP 24
4357: PPUSH
4358: LD_INT 14
4360: PPUSH
4361: LD_INT 0
4363: PPUSH
4364: CALL_OW 49
// ComMoveXY ( Sophia , 9 , 6 ) ;
4368: LD_EXP 24
4372: PPUSH
4373: LD_INT 9
4375: PPUSH
4376: LD_INT 6
4378: PPUSH
4379: CALL_OW 111
// AddComHold ( Sophia ) ;
4383: LD_EXP 24
4387: PPUSH
4388: CALL_OW 200
// tmp := tmp ^ Sophia ;
4392: LD_ADDR_VAR 0 4
4396: PUSH
4397: LD_VAR 0 4
4401: PUSH
4402: LD_EXP 24
4406: ADD
4407: ST_TO_ADDR
// wait ( 0 0$2 ) ;
4408: LD_INT 70
4410: PPUSH
4411: CALL_OW 67
// end ; tmp2 := CreateCharacterSet ( 04_1_others_L ) ;
4415: LD_ADDR_VAR 0 5
4419: PUSH
4420: LD_STRING 04_1_others_L
4422: PPUSH
4423: CALL_OW 31
4427: ST_TO_ADDR
// if tmp2 then
4428: LD_VAR 0 5
4432: IFFALSE 4529
// for i in tmp2 do
4434: LD_ADDR_VAR 0 3
4438: PUSH
4439: LD_VAR 0 5
4443: PUSH
4444: FOR_IN
4445: IFFALSE 4527
// begin SetDir ( i , 2 ) ;
4447: LD_VAR 0 3
4451: PPUSH
4452: LD_INT 2
4454: PPUSH
4455: CALL_OW 233
// PlaceUnitArea ( i , westSpawnPointArea , false ) ;
4459: LD_VAR 0 3
4463: PPUSH
4464: LD_INT 14
4466: PPUSH
4467: LD_INT 0
4469: PPUSH
4470: CALL_OW 49
// heikeSecondSquad := Replace ( heikeSecondSquad , heikeSecondSquad + 1 , i ) ;
4474: LD_ADDR_EXP 31
4478: PUSH
4479: LD_EXP 31
4483: PPUSH
4484: LD_EXP 31
4488: PUSH
4489: LD_INT 1
4491: PLUS
4492: PPUSH
4493: LD_VAR 0 3
4497: PPUSH
4498: CALL_OW 1
4502: ST_TO_ADDR
// ComMoveXY ( i , 17 , 14 ) ;
4503: LD_VAR 0 3
4507: PPUSH
4508: LD_INT 17
4510: PPUSH
4511: LD_INT 14
4513: PPUSH
4514: CALL_OW 111
// wait ( 0 0$2 ) ;
4518: LD_INT 70
4520: PPUSH
4521: CALL_OW 67
// end ;
4525: GO 4444
4527: POP
4528: POP
// for i in tmp union tmp2 do
4529: LD_ADDR_VAR 0 3
4533: PUSH
4534: LD_VAR 0 4
4538: PUSH
4539: LD_VAR 0 5
4543: UNION
4544: PUSH
4545: FOR_IN
4546: IFFALSE 4576
// begin SetSide ( i , 2 ) ;
4548: LD_VAR 0 3
4552: PPUSH
4553: LD_INT 2
4555: PPUSH
4556: CALL_OW 235
// ComMoveUnit ( i , Heike ) ;
4560: LD_VAR 0 3
4564: PPUSH
4565: LD_EXP 18
4569: PPUSH
4570: CALL_OW 112
// end ;
4574: GO 4545
4576: POP
4577: POP
// end ; end_of_file
4578: LD_VAR 0 1
4582: RET
// export crossRoadGuard , oilBaseGuard , ruNorthGroup , ruSouthGroup , ruConvoySquad ; export function PrepareRussian ; var i , un ; begin
4583: LD_INT 0
4585: PPUSH
4586: PPUSH
4587: PPUSH
// uc_side := 3 ;
4588: LD_ADDR_OWVAR 20
4592: PUSH
4593: LD_INT 3
4595: ST_TO_ADDR
// uc_nation := 3 ;
4596: LD_ADDR_OWVAR 21
4600: PUSH
4601: LD_INT 3
4603: ST_TO_ADDR
// crossRoadGuard := [ ] ;
4604: LD_ADDR_EXP 34
4608: PUSH
4609: EMPTY
4610: ST_TO_ADDR
// oilBaseGuard := [ ] ;
4611: LD_ADDR_EXP 35
4615: PUSH
4616: EMPTY
4617: ST_TO_ADDR
// ruConvoySquad := [ ] ;
4618: LD_ADDR_EXP 38
4622: PUSH
4623: EMPTY
4624: ST_TO_ADDR
// for i := 1 to 2 do
4625: LD_ADDR_VAR 0 2
4629: PUSH
4630: DOUBLE
4631: LD_INT 1
4633: DEC
4634: ST_TO_ADDR
4635: LD_INT 2
4637: PUSH
4638: FOR_TO
4639: IFFALSE 4774
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4641: LD_INT 0
4643: PPUSH
4644: LD_INT 1
4646: PPUSH
4647: LD_INT 3
4649: PUSH
4650: LD_INT 4
4652: PUSH
4653: LD_INT 5
4655: PUSH
4656: EMPTY
4657: LIST
4658: LIST
4659: LIST
4660: PUSH
4661: LD_OWVAR 67
4665: ARRAY
4666: PPUSH
4667: CALL_OW 380
// un := CreateHuman ;
4671: LD_ADDR_VAR 0 3
4675: PUSH
4676: CALL_OW 44
4680: ST_TO_ADDR
// crossRoadGuard := Replace ( crossRoadGuard , crossRoadGuard + 1 , un ) ;
4681: LD_ADDR_EXP 34
4685: PUSH
4686: LD_EXP 34
4690: PPUSH
4691: LD_EXP 34
4695: PUSH
4696: LD_INT 1
4698: PLUS
4699: PPUSH
4700: LD_VAR 0 3
4704: PPUSH
4705: CALL_OW 1
4709: ST_TO_ADDR
// PlaceUnitXYR ( un , 100 , 63 , 3 , false ) ;
4710: LD_VAR 0 3
4714: PPUSH
4715: LD_INT 100
4717: PPUSH
4718: LD_INT 63
4720: PPUSH
4721: LD_INT 3
4723: PPUSH
4724: LD_INT 0
4726: PPUSH
4727: CALL_OW 50
// ComEnterUnit ( un , [ HexInfo ( 97 , 64 ) , HexInfo ( 98 , 58 ) ] [ i ] ) ;
4731: LD_VAR 0 3
4735: PPUSH
4736: LD_INT 97
4738: PPUSH
4739: LD_INT 64
4741: PPUSH
4742: CALL_OW 428
4746: PUSH
4747: LD_INT 98
4749: PPUSH
4750: LD_INT 58
4752: PPUSH
4753: CALL_OW 428
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: PUSH
4762: LD_VAR 0 2
4766: ARRAY
4767: PPUSH
4768: CALL_OW 120
// end ;
4772: GO 4638
4774: POP
4775: POP
// SetResourceType ( GetBase ( ruEastBase ) , mat_oil , 300 ) ;
4776: LD_INT 10
4778: PPUSH
4779: CALL_OW 274
4783: PPUSH
4784: LD_INT 2
4786: PPUSH
4787: LD_INT 300
4789: PPUSH
4790: CALL_OW 277
// for i := 1 to 2 do
4794: LD_ADDR_VAR 0 2
4798: PUSH
4799: DOUBLE
4800: LD_INT 1
4802: DEC
4803: ST_TO_ADDR
4804: LD_INT 2
4806: PUSH
4807: FOR_TO
4808: IFFALSE 4922
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4810: LD_INT 0
4812: PPUSH
4813: LD_INT 1
4815: PPUSH
4816: LD_INT 3
4818: PUSH
4819: LD_INT 4
4821: PUSH
4822: LD_INT 5
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: LIST
4829: PUSH
4830: LD_OWVAR 67
4834: ARRAY
4835: PPUSH
4836: CALL_OW 380
// un := CreateHuman ;
4840: LD_ADDR_VAR 0 3
4844: PUSH
4845: CALL_OW 44
4849: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
4850: LD_ADDR_EXP 35
4854: PUSH
4855: LD_EXP 35
4859: PPUSH
4860: LD_EXP 35
4864: PUSH
4865: LD_INT 1
4867: PLUS
4868: PPUSH
4869: LD_VAR 0 3
4873: PPUSH
4874: CALL_OW 1
4878: ST_TO_ADDR
// PlaceHumanInUnit ( un , [ HexInfo ( 198 , 106 ) , HexInfo ( 205 , 114 ) ] [ i ] ) ;
4879: LD_VAR 0 3
4883: PPUSH
4884: LD_INT 198
4886: PPUSH
4887: LD_INT 106
4889: PPUSH
4890: CALL_OW 428
4894: PUSH
4895: LD_INT 205
4897: PPUSH
4898: LD_INT 114
4900: PPUSH
4901: CALL_OW 428
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PUSH
4910: LD_VAR 0 2
4914: ARRAY
4915: PPUSH
4916: CALL_OW 52
// end ;
4920: GO 4807
4922: POP
4923: POP
// for i := 1 to 2 do
4924: LD_ADDR_VAR 0 2
4928: PUSH
4929: DOUBLE
4930: LD_INT 1
4932: DEC
4933: ST_TO_ADDR
4934: LD_INT 2
4936: PUSH
4937: FOR_TO
4938: IFFALSE 5015
// begin PrepareHuman ( false , 2 , 3 ) ;
4940: LD_INT 0
4942: PPUSH
4943: LD_INT 2
4945: PPUSH
4946: LD_INT 3
4948: PPUSH
4949: CALL_OW 380
// un := CreateHuman ;
4953: LD_ADDR_VAR 0 3
4957: PUSH
4958: CALL_OW 44
4962: ST_TO_ADDR
// oilBaseGuard := Replace ( oilBaseGuard , oilBaseGuard + 1 , un ) ;
4963: LD_ADDR_EXP 35
4967: PUSH
4968: LD_EXP 35
4972: PPUSH
4973: LD_EXP 35
4977: PUSH
4978: LD_INT 1
4980: PLUS
4981: PPUSH
4982: LD_VAR 0 3
4986: PPUSH
4987: CALL_OW 1
4991: ST_TO_ADDR
// PlaceUnitXYR ( un , 204 , 108 , 2 , false ) ;
4992: LD_VAR 0 3
4996: PPUSH
4997: LD_INT 204
4999: PPUSH
5000: LD_INT 108
5002: PPUSH
5003: LD_INT 2
5005: PPUSH
5006: LD_INT 0
5008: PPUSH
5009: CALL_OW 50
// end ;
5013: GO 4937
5015: POP
5016: POP
// for i := 1 to [ 4 , 6 , 7 ] [ Difficulty ] do
5017: LD_ADDR_VAR 0 2
5021: PUSH
5022: DOUBLE
5023: LD_INT 1
5025: DEC
5026: ST_TO_ADDR
5027: LD_INT 4
5029: PUSH
5030: LD_INT 6
5032: PUSH
5033: LD_INT 7
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: LIST
5040: PUSH
5041: LD_OWVAR 67
5045: ARRAY
5046: PUSH
5047: FOR_TO
5048: IFFALSE 5167
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
5050: LD_INT 0
5052: PPUSH
5053: LD_INT 1
5055: PUSH
5056: LD_INT 1
5058: PUSH
5059: LD_INT 2
5061: PUSH
5062: LD_INT 4
5064: PUSH
5065: LD_INT 1
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: PUSH
5075: LD_INT 1
5077: PPUSH
5078: LD_INT 5
5080: PPUSH
5081: CALL_OW 12
5085: ARRAY
5086: PPUSH
5087: LD_INT 3
5089: PUSH
5090: LD_INT 4
5092: PUSH
5093: LD_INT 5
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: LIST
5100: PUSH
5101: LD_OWVAR 67
5105: ARRAY
5106: PPUSH
5107: CALL_OW 380
// un := CreateHuman ;
5111: LD_ADDR_VAR 0 3
5115: PUSH
5116: CALL_OW 44
5120: ST_TO_ADDR
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
5121: LD_ADDR_EXP 36
5125: PUSH
5126: LD_EXP 36
5130: PPUSH
5131: LD_EXP 36
5135: PUSH
5136: LD_INT 1
5138: PLUS
5139: PPUSH
5140: LD_VAR 0 3
5144: PPUSH
5145: CALL_OW 1
5149: ST_TO_ADDR
// PlaceUnitArea ( un , northGroupArea , false ) ;
5150: LD_VAR 0 3
5154: PPUSH
5155: LD_INT 10
5157: PPUSH
5158: LD_INT 0
5160: PPUSH
5161: CALL_OW 49
// end ;
5165: GO 5047
5167: POP
5168: POP
// for i := 1 to 3 do
5169: LD_ADDR_VAR 0 2
5173: PUSH
5174: DOUBLE
5175: LD_INT 1
5177: DEC
5178: ST_TO_ADDR
5179: LD_INT 3
5181: PUSH
5182: FOR_TO
5183: IFFALSE 5271
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
5185: LD_INT 0
5187: PPUSH
5188: LD_INT 1
5190: PPUSH
5191: LD_INT 3
5193: PUSH
5194: LD_INT 4
5196: PUSH
5197: LD_INT 5
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: LIST
5204: PUSH
5205: LD_OWVAR 67
5209: ARRAY
5210: PPUSH
5211: CALL_OW 380
// un := CreateHuman ;
5215: LD_ADDR_VAR 0 3
5219: PUSH
5220: CALL_OW 44
5224: ST_TO_ADDR
// ruNorthGroup := Replace ( ruNorthGroup , ruNorthGroup + 1 , un ) ;
5225: LD_ADDR_EXP 36
5229: PUSH
5230: LD_EXP 36
5234: PPUSH
5235: LD_EXP 36
5239: PUSH
5240: LD_INT 1
5242: PLUS
5243: PPUSH
5244: LD_VAR 0 3
5248: PPUSH
5249: CALL_OW 1
5253: ST_TO_ADDR
// PlaceUnitArea ( un , northGroupArea , false ) ;
5254: LD_VAR 0 3
5258: PPUSH
5259: LD_INT 10
5261: PPUSH
5262: LD_INT 0
5264: PPUSH
5265: CALL_OW 49
// end ;
5269: GO 5182
5271: POP
5272: POP
// for i := 1 to [ 6 , 7 , 7 ] [ Difficulty ] do
5273: LD_ADDR_VAR 0 2
5277: PUSH
5278: DOUBLE
5279: LD_INT 1
5281: DEC
5282: ST_TO_ADDR
5283: LD_INT 6
5285: PUSH
5286: LD_INT 7
5288: PUSH
5289: LD_INT 7
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: LIST
5296: PUSH
5297: LD_OWVAR 67
5301: ARRAY
5302: PUSH
5303: FOR_TO
5304: IFFALSE 5423
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 4 , 1 ] [ rand ( 1 , 5 ) ] , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
5306: LD_INT 0
5308: PPUSH
5309: LD_INT 1
5311: PUSH
5312: LD_INT 1
5314: PUSH
5315: LD_INT 2
5317: PUSH
5318: LD_INT 4
5320: PUSH
5321: LD_INT 1
5323: PUSH
5324: EMPTY
5325: LIST
5326: LIST
5327: LIST
5328: LIST
5329: LIST
5330: PUSH
5331: LD_INT 1
5333: PPUSH
5334: LD_INT 5
5336: PPUSH
5337: CALL_OW 12
5341: ARRAY
5342: PPUSH
5343: LD_INT 3
5345: PUSH
5346: LD_INT 4
5348: PUSH
5349: LD_INT 5
5351: PUSH
5352: EMPTY
5353: LIST
5354: LIST
5355: LIST
5356: PUSH
5357: LD_OWVAR 67
5361: ARRAY
5362: PPUSH
5363: CALL_OW 380
// un := CreateHuman ;
5367: LD_ADDR_VAR 0 3
5371: PUSH
5372: CALL_OW 44
5376: ST_TO_ADDR
// ruSouthGroup := Replace ( ruSouthGroup , ruSouthGroup + 1 , un ) ;
5377: LD_ADDR_EXP 37
5381: PUSH
5382: LD_EXP 37
5386: PPUSH
5387: LD_EXP 37
5391: PUSH
5392: LD_INT 1
5394: PLUS
5395: PPUSH
5396: LD_VAR 0 3
5400: PPUSH
5401: CALL_OW 1
5405: ST_TO_ADDR
// PlaceUnitArea ( un , southGroupArea , false ) ;
5406: LD_VAR 0 3
5410: PPUSH
5411: LD_INT 15
5413: PPUSH
5414: LD_INT 0
5416: PPUSH
5417: CALL_OW 49
// end ;
5421: GO 5303
5423: POP
5424: POP
// end ;
5425: LD_VAR 0 1
5429: RET
// export apeSoldGroup , apeEngGroup ; export function PrepareWestBase ; var i , un ; begin
5430: LD_INT 0
5432: PPUSH
5433: PPUSH
5434: PPUSH
// uc_side := 3 ;
5435: LD_ADDR_OWVAR 20
5439: PUSH
5440: LD_INT 3
5442: ST_TO_ADDR
// uc_nation := 3 ;
5443: LD_ADDR_OWVAR 21
5447: PUSH
5448: LD_INT 3
5450: ST_TO_ADDR
// for i := 1 to 6 do
5451: LD_ADDR_VAR 0 2
5455: PUSH
5456: DOUBLE
5457: LD_INT 1
5459: DEC
5460: ST_TO_ADDR
5461: LD_INT 6
5463: PUSH
5464: FOR_TO
5465: IFFALSE 5544
// begin PrepareHuman ( false , [ 1 , 4 ] [ rand ( 1 , 2 ) ] , 0 ) ;
5467: LD_INT 0
5469: PPUSH
5470: LD_INT 1
5472: PUSH
5473: LD_INT 4
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: PUSH
5480: LD_INT 1
5482: PPUSH
5483: LD_INT 2
5485: PPUSH
5486: CALL_OW 12
5490: ARRAY
5491: PPUSH
5492: LD_INT 0
5494: PPUSH
5495: CALL_OW 380
// un := CreateHuman ;
5499: LD_ADDR_VAR 0 3
5503: PUSH
5504: CALL_OW 44
5508: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 88 , 12 , false ) ;
5509: LD_VAR 0 3
5513: PPUSH
5514: LD_INT 54
5516: PPUSH
5517: LD_INT 88
5519: PPUSH
5520: LD_INT 12
5522: PPUSH
5523: LD_INT 0
5525: PPUSH
5526: CALL_OW 50
// SetLives ( un , 1 ) ;
5530: LD_VAR 0 3
5534: PPUSH
5535: LD_INT 1
5537: PPUSH
5538: CALL_OW 234
// end ;
5542: GO 5464
5544: POP
5545: POP
// uc_side := 3 ;
5546: LD_ADDR_OWVAR 20
5550: PUSH
5551: LD_INT 3
5553: ST_TO_ADDR
// uc_nation := 0 ;
5554: LD_ADDR_OWVAR 21
5558: PUSH
5559: LD_INT 0
5561: ST_TO_ADDR
// apeSoldGroup := [ ] ;
5562: LD_ADDR_EXP 39
5566: PUSH
5567: EMPTY
5568: ST_TO_ADDR
// apeEngGroup := [ ] ;
5569: LD_ADDR_EXP 40
5573: PUSH
5574: EMPTY
5575: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5576: LD_ADDR_VAR 0 2
5580: PUSH
5581: DOUBLE
5582: LD_INT 1
5584: DEC
5585: ST_TO_ADDR
5586: LD_INT 4
5588: PUSH
5589: LD_INT 5
5591: PUSH
5592: LD_INT 6
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: LIST
5599: PUSH
5600: LD_OWVAR 67
5604: ARRAY
5605: PUSH
5606: FOR_TO
5607: IFFALSE 5721
// begin PrepareHuman ( false , class_apeman_soldier , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
5609: LD_INT 0
5611: PPUSH
5612: LD_INT 15
5614: PPUSH
5615: LD_INT 3
5617: PUSH
5618: LD_INT 4
5620: PUSH
5621: LD_INT 5
5623: PUSH
5624: EMPTY
5625: LIST
5626: LIST
5627: LIST
5628: PUSH
5629: LD_OWVAR 67
5633: ARRAY
5634: PPUSH
5635: CALL_OW 380
// un := CreateHuman ;
5639: LD_ADDR_VAR 0 3
5643: PUSH
5644: CALL_OW 44
5648: ST_TO_ADDR
// apeSoldGroup := Replace ( apeSoldGroup , apeSoldGroup + 1 , un ) ;
5649: LD_ADDR_EXP 39
5653: PUSH
5654: LD_EXP 39
5658: PPUSH
5659: LD_EXP 39
5663: PUSH
5664: LD_INT 1
5666: PLUS
5667: PPUSH
5668: LD_VAR 0 3
5672: PPUSH
5673: CALL_OW 1
5677: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
5678: LD_VAR 0 3
5682: PPUSH
5683: LD_INT 0
5685: PPUSH
5686: LD_INT 5
5688: PPUSH
5689: CALL_OW 12
5693: PPUSH
5694: CALL_OW 233
// PlaceUnitXYR ( un , 56 , 82 , 6 , false ) ;
5698: LD_VAR 0 3
5702: PPUSH
5703: LD_INT 56
5705: PPUSH
5706: LD_INT 82
5708: PPUSH
5709: LD_INT 6
5711: PPUSH
5712: LD_INT 0
5714: PPUSH
5715: CALL_OW 50
// end ;
5719: GO 5606
5721: POP
5722: POP
// for i := 1 to 2 do
5723: LD_ADDR_VAR 0 2
5727: PUSH
5728: DOUBLE
5729: LD_INT 1
5731: DEC
5732: ST_TO_ADDR
5733: LD_INT 2
5735: PUSH
5736: FOR_TO
5737: IFFALSE 5813
// begin PrepareHuman ( false , class_apeman_engineer , 4 ) ;
5739: LD_INT 0
5741: PPUSH
5742: LD_INT 16
5744: PPUSH
5745: LD_INT 4
5747: PPUSH
5748: CALL_OW 380
// un := CreateHuman ;
5752: LD_ADDR_VAR 0 3
5756: PUSH
5757: CALL_OW 44
5761: ST_TO_ADDR
// apeEngGroup := Replace ( apeEngGroup , apeEngGroup + 1 , un ) ;
5762: LD_ADDR_EXP 40
5766: PUSH
5767: LD_EXP 40
5771: PPUSH
5772: LD_EXP 40
5776: PUSH
5777: LD_INT 1
5779: PLUS
5780: PPUSH
5781: LD_VAR 0 3
5785: PPUSH
5786: CALL_OW 1
5790: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 51 , 77 ) ) ;
5791: LD_VAR 0 3
5795: PPUSH
5796: LD_INT 51
5798: PPUSH
5799: LD_INT 77
5801: PPUSH
5802: CALL_OW 428
5806: PPUSH
5807: CALL_OW 52
// end ;
5811: GO 5736
5813: POP
5814: POP
// end ;
5815: LD_VAR 0 1
5819: RET
// every 0 0$1 trigger UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( HexInfo ( 66 , 89 ) ) do var i ;
5820: LD_EXP 39
5824: PPUSH
5825: LD_INT 3
5827: PUSH
5828: LD_INT 24
5830: PUSH
5831: LD_INT 600
5833: PUSH
5834: EMPTY
5835: LIST
5836: LIST
5837: PUSH
5838: EMPTY
5839: LIST
5840: LIST
5841: PUSH
5842: LD_INT 3
5844: PUSH
5845: LD_INT 54
5847: PUSH
5848: EMPTY
5849: LIST
5850: PUSH
5851: EMPTY
5852: LIST
5853: LIST
5854: PUSH
5855: EMPTY
5856: LIST
5857: LIST
5858: PPUSH
5859: CALL_OW 72
5863: PUSH
5864: LD_INT 66
5866: PPUSH
5867: LD_INT 89
5869: PPUSH
5870: CALL_OW 428
5874: PPUSH
5875: CALL_OW 302
5879: AND
5880: IFFALSE 5965
5882: GO 5884
5884: DISABLE
5885: LD_INT 0
5887: PPUSH
// begin enable ;
5888: ENABLE
// for i in UnitFilter ( apeSoldGroup , [ [ f_not , [ f_lives , 600 ] ] , [ f_not , [ f_inside ] ] ] ) do
5889: LD_ADDR_VAR 0 1
5893: PUSH
5894: LD_EXP 39
5898: PPUSH
5899: LD_INT 3
5901: PUSH
5902: LD_INT 24
5904: PUSH
5905: LD_INT 600
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PUSH
5916: LD_INT 3
5918: PUSH
5919: LD_INT 54
5921: PUSH
5922: EMPTY
5923: LIST
5924: PUSH
5925: EMPTY
5926: LIST
5927: LIST
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: PPUSH
5933: CALL_OW 72
5937: PUSH
5938: FOR_IN
5939: IFFALSE 5963
// ComEnterUnit ( i , HexInfo ( 66 , 89 ) ) ;
5941: LD_VAR 0 1
5945: PPUSH
5946: LD_INT 66
5948: PPUSH
5949: LD_INT 89
5951: PPUSH
5952: CALL_OW 428
5956: PPUSH
5957: CALL_OW 120
5961: GO 5938
5963: POP
5964: POP
// end ;
5965: PPOPN 1
5967: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) do
5968: LD_INT 22
5970: PUSH
5971: LD_INT 2
5973: PUSH
5974: EMPTY
5975: LIST
5976: LIST
5977: PUSH
5978: LD_INT 92
5980: PUSH
5981: LD_INT 54
5983: PUSH
5984: LD_INT 77
5986: PUSH
5987: LD_INT 8
5989: PUSH
5990: EMPTY
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: PUSH
5996: EMPTY
5997: LIST
5998: LIST
5999: PPUSH
6000: CALL_OW 69
6004: IFFALSE 6068
6006: GO 6008
6008: DISABLE
// begin ComExitBuilding ( apeEngGroup ) ;
6009: LD_EXP 40
6013: PPUSH
6014: CALL_OW 122
// AddComAttackUnit ( apeEngGroup , FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 54 , 77 , 8 ] ] ) [ 1 ] ) ;
6018: LD_EXP 40
6022: PPUSH
6023: LD_INT 22
6025: PUSH
6026: LD_INT 2
6028: PUSH
6029: EMPTY
6030: LIST
6031: LIST
6032: PUSH
6033: LD_INT 92
6035: PUSH
6036: LD_INT 54
6038: PUSH
6039: LD_INT 77
6041: PUSH
6042: LD_INT 8
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: PPUSH
6055: CALL_OW 69
6059: PUSH
6060: LD_INT 1
6062: ARRAY
6063: PPUSH
6064: CALL_OW 175
// end ;
6068: END
// export function PrepareConvoy ; var i , spawnPoint , dir , spawnArea , movePoints , un , tag ; begin
6069: LD_INT 0
6071: PPUSH
6072: PPUSH
6073: PPUSH
6074: PPUSH
6075: PPUSH
6076: PPUSH
6077: PPUSH
6078: PPUSH
// spawnPoint := rand ( 1 , 2 ) ;
6079: LD_ADDR_VAR 0 3
6083: PUSH
6084: LD_INT 1
6086: PPUSH
6087: LD_INT 2
6089: PPUSH
6090: CALL_OW 12
6094: ST_TO_ADDR
// spawnArea := [ eastNorthSpawnArea , eastSouthSpawnArea ] [ spawnPoint ] ;
6095: LD_ADDR_VAR 0 5
6099: PUSH
6100: LD_INT 16
6102: PUSH
6103: LD_INT 17
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: PUSH
6110: LD_VAR 0 3
6114: ARRAY
6115: ST_TO_ADDR
// movePoints := [ [ [ 159 , 25 ] , [ 137 , 37 ] , [ 123 , 55 ] , [ 115 , 71 ] , [ 106 , 88 ] , [ 97 , 114 ] , [ 75 , 146 ] ] , [ [ 206 , 135 ] , [ 184 , 111 ] , [ 154 , 97 ] , [ 122 , 80 ] , [ 109 , 78 ] , [ 97 , 113 ] , [ 75 , 147 ] ] ] [ spawnPoint ] ;
6116: LD_ADDR_VAR 0 6
6120: PUSH
6121: LD_INT 159
6123: PUSH
6124: LD_INT 25
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: PUSH
6131: LD_INT 137
6133: PUSH
6134: LD_INT 37
6136: PUSH
6137: EMPTY
6138: LIST
6139: LIST
6140: PUSH
6141: LD_INT 123
6143: PUSH
6144: LD_INT 55
6146: PUSH
6147: EMPTY
6148: LIST
6149: LIST
6150: PUSH
6151: LD_INT 115
6153: PUSH
6154: LD_INT 71
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PUSH
6161: LD_INT 106
6163: PUSH
6164: LD_INT 88
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: LD_INT 97
6173: PUSH
6174: LD_INT 114
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PUSH
6181: LD_INT 75
6183: PUSH
6184: LD_INT 146
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: PUSH
6200: LD_INT 206
6202: PUSH
6203: LD_INT 135
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: LD_INT 184
6212: PUSH
6213: LD_INT 111
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PUSH
6220: LD_INT 154
6222: PUSH
6223: LD_INT 97
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: PUSH
6230: LD_INT 122
6232: PUSH
6233: LD_INT 80
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: PUSH
6240: LD_INT 109
6242: PUSH
6243: LD_INT 78
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: PUSH
6250: LD_INT 97
6252: PUSH
6253: LD_INT 113
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: PUSH
6260: LD_INT 75
6262: PUSH
6263: LD_INT 147
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PUSH
6283: LD_VAR 0 3
6287: ARRAY
6288: ST_TO_ADDR
// dir := [ 4 , 5 ] [ spawnPoint ] ;
6289: LD_ADDR_VAR 0 4
6293: PUSH
6294: LD_INT 4
6296: PUSH
6297: LD_INT 5
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: PUSH
6304: LD_VAR 0 3
6308: ARRAY
6309: ST_TO_ADDR
// case convoyCounter of 1 .. 3 :
6310: LD_EXP 16
6314: PUSH
6315: LD_INT 1
6317: DOUBLE
6318: GREATEREQUAL
6319: IFFALSE 6327
6321: LD_INT 3
6323: DOUBLE
6324: LESSEQUAL
6325: IFTRUE 6329
6327: GO 6920
6329: POP
// begin uc_side := 3 ;
6330: LD_ADDR_OWVAR 20
6334: PUSH
6335: LD_INT 3
6337: ST_TO_ADDR
// uc_nation := 3 ;
6338: LD_ADDR_OWVAR 21
6342: PUSH
6343: LD_INT 3
6345: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] - convoyCounter do
6346: LD_ADDR_VAR 0 2
6350: PUSH
6351: DOUBLE
6352: LD_INT 1
6354: DEC
6355: ST_TO_ADDR
6356: LD_INT 5
6358: PUSH
6359: LD_INT 6
6361: PUSH
6362: LD_INT 7
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: LIST
6369: PUSH
6370: LD_OWVAR 67
6374: ARRAY
6375: PUSH
6376: LD_EXP 16
6380: MINUS
6381: PUSH
6382: FOR_TO
6383: IFFALSE 6568
// begin PrepareHuman ( false , [ 1 , 1 , 1 , 4 ] [ rand ( 1 , 4 ) ] , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
6385: LD_INT 0
6387: PPUSH
6388: LD_INT 1
6390: PUSH
6391: LD_INT 1
6393: PUSH
6394: LD_INT 1
6396: PUSH
6397: LD_INT 4
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: PUSH
6406: LD_INT 1
6408: PPUSH
6409: LD_INT 4
6411: PPUSH
6412: CALL_OW 12
6416: ARRAY
6417: PPUSH
6418: LD_INT 4
6420: PUSH
6421: LD_INT 5
6423: PUSH
6424: LD_INT 6
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: LIST
6431: PUSH
6432: LD_OWVAR 67
6436: ARRAY
6437: PPUSH
6438: CALL_OW 380
// un := CreateHuman ;
6442: LD_ADDR_VAR 0 7
6446: PUSH
6447: CALL_OW 44
6451: ST_TO_ADDR
// SetDir ( un , dir ) ;
6452: LD_VAR 0 7
6456: PPUSH
6457: LD_VAR 0 4
6461: PPUSH
6462: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
6466: LD_VAR 0 7
6470: PPUSH
6471: LD_VAR 0 5
6475: PPUSH
6476: LD_INT 0
6478: PPUSH
6479: CALL_OW 49
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6483: LD_ADDR_EXP 38
6487: PUSH
6488: LD_EXP 38
6492: PPUSH
6493: LD_EXP 38
6497: PUSH
6498: LD_INT 1
6500: PLUS
6501: PPUSH
6502: LD_VAR 0 7
6506: PPUSH
6507: CALL_OW 1
6511: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6512: LD_VAR 0 7
6516: PPUSH
6517: LD_INT 1
6519: PPUSH
6520: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6524: LD_VAR 0 7
6528: PPUSH
6529: LD_VAR 0 6
6533: PUSH
6534: LD_INT 1
6536: ARRAY
6537: PUSH
6538: LD_INT 1
6540: ARRAY
6541: PPUSH
6542: LD_VAR 0 6
6546: PUSH
6547: LD_INT 1
6549: ARRAY
6550: PUSH
6551: LD_INT 2
6553: ARRAY
6554: PPUSH
6555: CALL_OW 111
// wait ( 0 0$2 ) ;
6559: LD_INT 70
6561: PPUSH
6562: CALL_OW 67
// end ;
6566: GO 6382
6568: POP
6569: POP
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
6570: LD_ADDR_VAR 0 2
6574: PUSH
6575: DOUBLE
6576: LD_INT 1
6578: DEC
6579: ST_TO_ADDR
6580: LD_INT 3
6582: PUSH
6583: LD_INT 4
6585: PUSH
6586: LD_INT 4
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: LIST
6593: PUSH
6594: LD_OWVAR 67
6598: ARRAY
6599: PUSH
6600: FOR_TO
6601: IFFALSE 6916
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( Difficulty , Difficulty + 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] [ rand ( 1 , Difficulty + 2 ) ] , 90 ) ;
6603: LD_INT 3
6605: PPUSH
6606: LD_INT 3
6608: PPUSH
6609: LD_INT 21
6611: PUSH
6612: LD_INT 22
6614: PUSH
6615: LD_INT 23
6617: PUSH
6618: LD_INT 24
6620: PUSH
6621: LD_INT 24
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: PUSH
6631: LD_OWVAR 67
6635: PPUSH
6636: LD_OWVAR 67
6640: PUSH
6641: LD_INT 2
6643: PLUS
6644: PPUSH
6645: CALL_OW 12
6649: ARRAY
6650: PPUSH
6651: LD_INT 1
6653: PPUSH
6654: LD_INT 1
6656: PPUSH
6657: LD_INT 42
6659: PUSH
6660: LD_INT 44
6662: PUSH
6663: LD_INT 43
6665: PUSH
6666: LD_INT 44
6668: PUSH
6669: LD_INT 46
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: PUSH
6679: LD_INT 1
6681: PPUSH
6682: LD_OWVAR 67
6686: PUSH
6687: LD_INT 2
6689: PLUS
6690: PPUSH
6691: CALL_OW 12
6695: ARRAY
6696: PPUSH
6697: LD_INT 90
6699: PPUSH
6700: CALL 385 0 7
// un := CreateVehicle ;
6704: LD_ADDR_VAR 0 7
6708: PUSH
6709: CALL_OW 45
6713: ST_TO_ADDR
// SetDir ( un , dir ) ;
6714: LD_VAR 0 7
6718: PPUSH
6719: LD_VAR 0 4
6723: PPUSH
6724: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
6728: LD_VAR 0 7
6732: PPUSH
6733: LD_VAR 0 5
6737: PPUSH
6738: LD_INT 0
6740: PPUSH
6741: CALL_OW 49
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6745: LD_ADDR_EXP 38
6749: PUSH
6750: LD_EXP 38
6754: PPUSH
6755: LD_EXP 38
6759: PUSH
6760: LD_INT 1
6762: PLUS
6763: PPUSH
6764: LD_VAR 0 7
6768: PPUSH
6769: CALL_OW 1
6773: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
6774: LD_INT 0
6776: PPUSH
6777: LD_INT 3
6779: PUSH
6780: LD_INT 4
6782: PUSH
6783: LD_INT 5
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: LIST
6790: PUSH
6791: LD_OWVAR 67
6795: ARRAY
6796: PPUSH
6797: CALL_OW 383
// un := CreateHuman ;
6801: LD_ADDR_VAR 0 7
6805: PUSH
6806: CALL_OW 44
6810: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
6811: LD_VAR 0 7
6815: PPUSH
6816: LD_EXP 38
6820: PUSH
6821: LD_EXP 38
6825: ARRAY
6826: PPUSH
6827: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
6831: LD_ADDR_EXP 38
6835: PUSH
6836: LD_EXP 38
6840: PPUSH
6841: LD_EXP 38
6845: PUSH
6846: LD_INT 1
6848: PLUS
6849: PPUSH
6850: LD_VAR 0 7
6854: PPUSH
6855: CALL_OW 1
6859: ST_TO_ADDR
// SetTag ( un , 1 ) ;
6860: LD_VAR 0 7
6864: PPUSH
6865: LD_INT 1
6867: PPUSH
6868: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
6872: LD_VAR 0 7
6876: PPUSH
6877: LD_VAR 0 6
6881: PUSH
6882: LD_INT 1
6884: ARRAY
6885: PUSH
6886: LD_INT 1
6888: ARRAY
6889: PPUSH
6890: LD_VAR 0 6
6894: PUSH
6895: LD_INT 1
6897: ARRAY
6898: PUSH
6899: LD_INT 2
6901: ARRAY
6902: PPUSH
6903: CALL_OW 111
// wait ( 0 0$2 ) ;
6907: LD_INT 70
6909: PPUSH
6910: CALL_OW 67
// end ;
6914: GO 6600
6916: POP
6917: POP
// end ; 4 .. 7 :
6918: GO 7469
6920: LD_INT 4
6922: DOUBLE
6923: GREATEREQUAL
6924: IFFALSE 6932
6926: LD_INT 7
6928: DOUBLE
6929: LESSEQUAL
6930: IFTRUE 6934
6932: GO 7468
6934: POP
// begin uc_side := 3 ;
6935: LD_ADDR_OWVAR 20
6939: PUSH
6940: LD_INT 3
6942: ST_TO_ADDR
// uc_nation := 3 ;
6943: LD_ADDR_OWVAR 21
6947: PUSH
6948: LD_INT 3
6950: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6951: LD_ADDR_VAR 0 2
6955: PUSH
6956: DOUBLE
6957: LD_INT 1
6959: DEC
6960: ST_TO_ADDR
6961: LD_INT 2
6963: PUSH
6964: LD_INT 3
6966: PUSH
6967: LD_INT 4
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: LIST
6974: PUSH
6975: LD_OWVAR 67
6979: ARRAY
6980: PUSH
6981: FOR_TO
6982: IFFALSE 7140
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
6984: LD_INT 0
6986: PPUSH
6987: LD_INT 1
6989: PPUSH
6990: LD_INT 4
6992: PUSH
6993: LD_INT 5
6995: PUSH
6996: LD_INT 6
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: LIST
7003: PUSH
7004: LD_OWVAR 67
7008: ARRAY
7009: PPUSH
7010: CALL_OW 380
// un := CreateHuman ;
7014: LD_ADDR_VAR 0 7
7018: PUSH
7019: CALL_OW 44
7023: ST_TO_ADDR
// SetDir ( un , dir ) ;
7024: LD_VAR 0 7
7028: PPUSH
7029: LD_VAR 0 4
7033: PPUSH
7034: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
7038: LD_VAR 0 7
7042: PPUSH
7043: LD_VAR 0 5
7047: PPUSH
7048: LD_INT 0
7050: PPUSH
7051: CALL_OW 49
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
7055: LD_ADDR_EXP 38
7059: PUSH
7060: LD_EXP 38
7064: PPUSH
7065: LD_EXP 38
7069: PUSH
7070: LD_INT 1
7072: PLUS
7073: PPUSH
7074: LD_VAR 0 7
7078: PPUSH
7079: CALL_OW 1
7083: ST_TO_ADDR
// SetTag ( un , 1 ) ;
7084: LD_VAR 0 7
7088: PPUSH
7089: LD_INT 1
7091: PPUSH
7092: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
7096: LD_VAR 0 7
7100: PPUSH
7101: LD_VAR 0 6
7105: PUSH
7106: LD_INT 1
7108: ARRAY
7109: PUSH
7110: LD_INT 1
7112: ARRAY
7113: PPUSH
7114: LD_VAR 0 6
7118: PUSH
7119: LD_INT 1
7121: ARRAY
7122: PUSH
7123: LD_INT 2
7125: ARRAY
7126: PPUSH
7127: CALL_OW 111
// wait ( 0 0$2 ) ;
7131: LD_INT 70
7133: PPUSH
7134: CALL_OW 67
// end ;
7138: GO 6981
7140: POP
7141: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
7142: LD_ADDR_VAR 0 2
7146: PUSH
7147: DOUBLE
7148: LD_INT 1
7150: DEC
7151: ST_TO_ADDR
7152: LD_INT 2
7154: PUSH
7155: LD_INT 3
7157: PUSH
7158: LD_INT 3
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: LIST
7165: PUSH
7166: LD_OWVAR 67
7170: ARRAY
7171: PUSH
7172: FOR_TO
7173: IFFALSE 7464
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , Difficulty + 1 ) ] , 90 ) ;
7175: LD_INT 3
7177: PPUSH
7178: LD_INT 3
7180: PPUSH
7181: LD_INT 21
7183: PUSH
7184: LD_INT 22
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: PUSH
7191: LD_INT 1
7193: PPUSH
7194: LD_INT 2
7196: PPUSH
7197: CALL_OW 12
7201: ARRAY
7202: PPUSH
7203: LD_INT 1
7205: PPUSH
7206: LD_INT 1
7208: PPUSH
7209: LD_INT 42
7211: PUSH
7212: LD_INT 44
7214: PUSH
7215: LD_INT 43
7217: PUSH
7218: LD_INT 44
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: PUSH
7227: LD_INT 1
7229: PPUSH
7230: LD_OWVAR 67
7234: PUSH
7235: LD_INT 1
7237: PLUS
7238: PPUSH
7239: CALL_OW 12
7243: ARRAY
7244: PPUSH
7245: LD_INT 90
7247: PPUSH
7248: CALL 385 0 7
// un := CreateVehicle ;
7252: LD_ADDR_VAR 0 7
7256: PUSH
7257: CALL_OW 45
7261: ST_TO_ADDR
// SetDir ( un , dir ) ;
7262: LD_VAR 0 7
7266: PPUSH
7267: LD_VAR 0 4
7271: PPUSH
7272: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
7276: LD_VAR 0 7
7280: PPUSH
7281: LD_VAR 0 5
7285: PPUSH
7286: LD_INT 0
7288: PPUSH
7289: CALL_OW 49
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
7293: LD_ADDR_EXP 38
7297: PUSH
7298: LD_EXP 38
7302: PPUSH
7303: LD_EXP 38
7307: PUSH
7308: LD_INT 1
7310: PLUS
7311: PPUSH
7312: LD_VAR 0 7
7316: PPUSH
7317: CALL_OW 1
7321: ST_TO_ADDR
// PrepareMechanic ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
7322: LD_INT 0
7324: PPUSH
7325: LD_INT 3
7327: PUSH
7328: LD_INT 4
7330: PUSH
7331: LD_INT 5
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: LIST
7338: PUSH
7339: LD_OWVAR 67
7343: ARRAY
7344: PPUSH
7345: CALL_OW 383
// un := CreateHuman ;
7349: LD_ADDR_VAR 0 7
7353: PUSH
7354: CALL_OW 44
7358: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruConvoySquad [ ruConvoySquad ] ) ;
7359: LD_VAR 0 7
7363: PPUSH
7364: LD_EXP 38
7368: PUSH
7369: LD_EXP 38
7373: ARRAY
7374: PPUSH
7375: CALL_OW 52
// ruConvoySquad := Replace ( ruConvoySquad , ruConvoySquad + 1 , un ) ;
7379: LD_ADDR_EXP 38
7383: PUSH
7384: LD_EXP 38
7388: PPUSH
7389: LD_EXP 38
7393: PUSH
7394: LD_INT 1
7396: PLUS
7397: PPUSH
7398: LD_VAR 0 7
7402: PPUSH
7403: CALL_OW 1
7407: ST_TO_ADDR
// SetTag ( un , 1 ) ;
7408: LD_VAR 0 7
7412: PPUSH
7413: LD_INT 1
7415: PPUSH
7416: CALL_OW 109
// ComMoveXY ( un , movePoints [ 1 ] [ 1 ] , movePoints [ 1 ] [ 2 ] ) ;
7420: LD_VAR 0 7
7424: PPUSH
7425: LD_VAR 0 6
7429: PUSH
7430: LD_INT 1
7432: ARRAY
7433: PUSH
7434: LD_INT 1
7436: ARRAY
7437: PPUSH
7438: LD_VAR 0 6
7442: PUSH
7443: LD_INT 1
7445: ARRAY
7446: PUSH
7447: LD_INT 2
7449: ARRAY
7450: PPUSH
7451: CALL_OW 111
// wait ( 0 0$2 ) ;
7455: LD_INT 70
7457: PPUSH
7458: CALL_OW 67
// end ;
7462: GO 7172
7464: POP
7465: POP
// end ; end ;
7466: GO 7469
7468: POP
// repeat wait ( 0 0$1 ) ;
7469: LD_INT 35
7471: PPUSH
7472: CALL_OW 67
// for un in ruConvoySquad do
7476: LD_ADDR_VAR 0 7
7480: PUSH
7481: LD_EXP 38
7485: PUSH
7486: FOR_IN
7487: IFFALSE 7906
// begin if IsInArea ( un , westSouthOutArea ) then
7489: LD_VAR 0 7
7493: PPUSH
7494: LD_INT 18
7496: PPUSH
7497: CALL_OW 308
7501: IFFALSE 7544
// begin convoySavedCounter := convoySavedCounter + 1 ;
7503: LD_ADDR_EXP 15
7507: PUSH
7508: LD_EXP 15
7512: PUSH
7513: LD_INT 1
7515: PLUS
7516: ST_TO_ADDR
// RemoveUnit ( un ) ;
7517: LD_VAR 0 7
7521: PPUSH
7522: CALL_OW 64
// ruConvoySquad := ruConvoySquad diff un ;
7526: LD_ADDR_EXP 38
7530: PUSH
7531: LD_EXP 38
7535: PUSH
7536: LD_VAR 0 7
7540: DIFF
7541: ST_TO_ADDR
// break ;
7542: GO 7906
// end ; if IsOk ( un ) and not HasTask ( un ) then
7544: LD_VAR 0 7
7548: PPUSH
7549: CALL_OW 302
7553: PUSH
7554: LD_VAR 0 7
7558: PPUSH
7559: CALL_OW 314
7563: NOT
7564: AND
7565: IFFALSE 7904
// begin tag := GetTag ( un ) ;
7567: LD_ADDR_VAR 0 8
7571: PUSH
7572: LD_VAR 0 7
7576: PPUSH
7577: CALL_OW 110
7581: ST_TO_ADDR
// if GetDistUnitXY ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) < 6 then
7582: LD_VAR 0 7
7586: PPUSH
7587: LD_VAR 0 6
7591: PUSH
7592: LD_VAR 0 8
7596: PUSH
7597: LD_INT 1
7599: PLUS
7600: ARRAY
7601: PUSH
7602: LD_INT 1
7604: ARRAY
7605: PPUSH
7606: LD_VAR 0 6
7610: PUSH
7611: LD_VAR 0 8
7615: PUSH
7616: LD_INT 1
7618: PLUS
7619: ARRAY
7620: PUSH
7621: LD_INT 2
7623: ARRAY
7624: PPUSH
7625: CALL_OW 297
7629: PUSH
7630: LD_INT 6
7632: LESS
7633: IFFALSE 7744
// begin SetTag ( un , tag + 1 ) ;
7635: LD_VAR 0 7
7639: PPUSH
7640: LD_VAR 0 8
7644: PUSH
7645: LD_INT 1
7647: PLUS
7648: PPUSH
7649: CALL_OW 109
// if GetType ( un ) = unit_vehicle or GetClass ( un ) = 3 then
7653: LD_VAR 0 7
7657: PPUSH
7658: CALL_OW 247
7662: PUSH
7663: LD_INT 2
7665: EQUAL
7666: PUSH
7667: LD_VAR 0 7
7671: PPUSH
7672: CALL_OW 257
7676: PUSH
7677: LD_INT 3
7679: EQUAL
7680: OR
7681: IFFALSE 7742
// begin AddComWait ( un , 0 0$4 ) ;
7683: LD_VAR 0 7
7687: PPUSH
7688: LD_INT 140
7690: PPUSH
7691: CALL_OW 202
// AddComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7695: LD_VAR 0 7
7699: PPUSH
7700: LD_VAR 0 6
7704: PUSH
7705: LD_VAR 0 8
7709: PUSH
7710: LD_INT 1
7712: PLUS
7713: ARRAY
7714: PUSH
7715: LD_INT 1
7717: ARRAY
7718: PPUSH
7719: LD_VAR 0 6
7723: PUSH
7724: LD_VAR 0 8
7728: PUSH
7729: LD_INT 1
7731: PLUS
7732: ARRAY
7733: PUSH
7734: LD_INT 2
7736: ARRAY
7737: PPUSH
7738: CALL_OW 174
// end ; end else
7742: GO 7904
// begin if GetClass ( un ) = 4 and UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
7744: LD_VAR 0 7
7748: PPUSH
7749: CALL_OW 257
7753: PUSH
7754: LD_INT 4
7756: EQUAL
7757: PUSH
7758: LD_EXP 38
7762: PPUSH
7763: LD_INT 21
7765: PUSH
7766: LD_INT 1
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PUSH
7773: LD_INT 3
7775: PUSH
7776: LD_INT 24
7778: PUSH
7779: LD_INT 1000
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: PPUSH
7794: CALL_OW 72
7798: AND
7799: IFFALSE 7857
// ComHeal ( un , UnitFilter ( ruConvoySquad , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ) else
7801: LD_VAR 0 7
7805: PPUSH
7806: LD_EXP 38
7810: PPUSH
7811: LD_INT 21
7813: PUSH
7814: LD_INT 1
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: LD_INT 3
7823: PUSH
7824: LD_INT 24
7826: PUSH
7827: LD_INT 1000
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PPUSH
7842: CALL_OW 72
7846: PUSH
7847: LD_INT 1
7849: ARRAY
7850: PPUSH
7851: CALL_OW 128
7855: GO 7904
// ComAgressiveMove ( un , movePoints [ tag + 1 ] [ 1 ] , movePoints [ tag + 1 ] [ 2 ] ) ;
7857: LD_VAR 0 7
7861: PPUSH
7862: LD_VAR 0 6
7866: PUSH
7867: LD_VAR 0 8
7871: PUSH
7872: LD_INT 1
7874: PLUS
7875: ARRAY
7876: PUSH
7877: LD_INT 1
7879: ARRAY
7880: PPUSH
7881: LD_VAR 0 6
7885: PUSH
7886: LD_VAR 0 8
7890: PUSH
7891: LD_INT 1
7893: PLUS
7894: ARRAY
7895: PUSH
7896: LD_INT 2
7898: ARRAY
7899: PPUSH
7900: CALL_OW 114
// end ; end ; end ;
7904: GO 7486
7906: POP
7907: POP
// until not ruConvoySquad ;
7908: LD_EXP 38
7912: NOT
7913: IFFALSE 7469
// end ; end_of_file
7915: LD_VAR 0 1
7919: RET
// on UnitDestroyed ( un ) do begin if un = Heike then
7920: LD_VAR 0 1
7924: PUSH
7925: LD_EXP 18
7929: EQUAL
7930: IFFALSE 7939
// YouLost ( Heike ) ;
7932: LD_STRING Heike
7934: PPUSH
7935: CALL_OW 104
// if un in apeSoldGroup then
7939: LD_VAR 0 1
7943: PUSH
7944: LD_EXP 39
7948: IN
7949: IFFALSE 7967
// apeSoldGroup := apeSoldGroup diff un ;
7951: LD_ADDR_EXP 39
7955: PUSH
7956: LD_EXP 39
7960: PUSH
7961: LD_VAR 0 1
7965: DIFF
7966: ST_TO_ADDR
// if un in apeEngGroup then
7967: LD_VAR 0 1
7971: PUSH
7972: LD_EXP 40
7976: IN
7977: IFFALSE 7995
// apeEngGroup := apeEngGroup diff un ;
7979: LD_ADDR_EXP 40
7983: PUSH
7984: LD_EXP 40
7988: PUSH
7989: LD_VAR 0 1
7993: DIFF
7994: ST_TO_ADDR
// if un in oilBaseGuard then
7995: LD_VAR 0 1
7999: PUSH
8000: LD_EXP 35
8004: IN
8005: IFFALSE 8023
// oilBaseGuard := oilBaseGuard diff un ;
8007: LD_ADDR_EXP 35
8011: PUSH
8012: LD_EXP 35
8016: PUSH
8017: LD_VAR 0 1
8021: DIFF
8022: ST_TO_ADDR
// if un in ruNorthGroup then
8023: LD_VAR 0 1
8027: PUSH
8028: LD_EXP 36
8032: IN
8033: IFFALSE 8051
// ruNorthGroup := ruNorthGroup diff un ;
8035: LD_ADDR_EXP 36
8039: PUSH
8040: LD_EXP 36
8044: PUSH
8045: LD_VAR 0 1
8049: DIFF
8050: ST_TO_ADDR
// if un in ruSouthGroup then
8051: LD_VAR 0 1
8055: PUSH
8056: LD_EXP 37
8060: IN
8061: IFFALSE 8079
// ruSouthGroup := ruSouthGroup diff un ;
8063: LD_ADDR_EXP 37
8067: PUSH
8068: LD_EXP 37
8072: PUSH
8073: LD_VAR 0 1
8077: DIFF
8078: ST_TO_ADDR
// if un in ruConvoySquad then
8079: LD_VAR 0 1
8083: PUSH
8084: LD_EXP 38
8088: IN
8089: IFFALSE 8107
// ruConvoySquad := ruConvoySquad diff un ;
8091: LD_ADDR_EXP 38
8095: PUSH
8096: LD_EXP 38
8100: PUSH
8101: LD_VAR 0 1
8105: DIFF
8106: ST_TO_ADDR
// end ;
8107: PPOPN 1
8109: END
// on VehicleConstructed ( veh , fac ) do begin if GetWeapon ( veh ) = ar_radar then
8110: LD_VAR 0 1
8114: PPUSH
8115: CALL_OW 264
8119: PUSH
8120: LD_INT 30
8122: EQUAL
8123: IFFALSE 8133
// radarConstructed := true ;
8125: LD_ADDR_EXP 13
8129: PUSH
8130: LD_INT 1
8132: ST_TO_ADDR
// end ; end_of_file
8133: PPOPN 2
8135: END
// export function Action ; var i , un , veh , tmp ; begin
8136: LD_INT 0
8138: PPUSH
8139: PPUSH
8140: PPUSH
8141: PPUSH
8142: PPUSH
// InGameOn ;
8143: CALL_OW 8
// music_nat := 2 ;
8147: LD_ADDR_OWVAR 71
8151: PUSH
8152: LD_INT 2
8154: ST_TO_ADDR
// music_class := 0 ;
8155: LD_ADDR_OWVAR 72
8159: PUSH
8160: LD_INT 0
8162: ST_TO_ADDR
// CenterNowOnXY ( 7 , 6 ) ;
8163: LD_INT 7
8165: PPUSH
8166: LD_INT 6
8168: PPUSH
8169: CALL_OW 86
// RevealFogOnXY ( 7 , 6 , 2 , - 20 ) ;
8173: LD_INT 7
8175: PPUSH
8176: LD_INT 6
8178: PPUSH
8179: LD_INT 2
8181: PPUSH
8182: LD_INT 20
8184: NEG
8185: PPUSH
8186: CALL 2789 0 4
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Aviradze ] ;
8190: LD_ADDR_VAR 0 5
8194: PUSH
8195: LD_EXP 18
8199: PUSH
8200: LD_EXP 19
8204: PUSH
8205: LD_EXP 20
8209: PUSH
8210: LD_EXP 21
8214: PUSH
8215: LD_EXP 22
8219: PUSH
8220: LD_EXP 23
8224: PUSH
8225: LD_EXP 24
8229: PUSH
8230: LD_EXP 25
8234: PUSH
8235: LD_EXP 30
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: ST_TO_ADDR
// tmp := tmp diff 0 ;
8251: LD_ADDR_VAR 0 5
8255: PUSH
8256: LD_VAR 0 5
8260: PUSH
8261: LD_INT 0
8263: DIFF
8264: ST_TO_ADDR
// tmp := SortBySkill ( tmp , 3 ) ;
8265: LD_ADDR_VAR 0 5
8269: PUSH
8270: LD_VAR 0 5
8274: PPUSH
8275: LD_INT 3
8277: PPUSH
8278: CALL 2652 0 2
8282: ST_TO_ADDR
// for i in heikeVehicles do
8283: LD_ADDR_VAR 0 2
8287: PUSH
8288: LD_EXP 32
8292: PUSH
8293: FOR_IN
8294: IFFALSE 8493
// begin PrepareTank ( 5 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
8296: LD_INT 5
8298: PPUSH
8299: LD_VAR 0 2
8303: PUSH
8304: LD_INT 5
8306: ARRAY
8307: PPUSH
8308: LD_VAR 0 2
8312: PUSH
8313: LD_INT 1
8315: ARRAY
8316: PPUSH
8317: LD_VAR 0 2
8321: PUSH
8322: LD_INT 2
8324: ARRAY
8325: PPUSH
8326: LD_VAR 0 2
8330: PUSH
8331: LD_INT 3
8333: ARRAY
8334: PPUSH
8335: LD_VAR 0 2
8339: PUSH
8340: LD_INT 4
8342: ARRAY
8343: PPUSH
8344: LD_INT 34
8346: PPUSH
8347: CALL 385 0 7
// veh := CreateVehicle ;
8351: LD_ADDR_VAR 0 4
8355: PUSH
8356: CALL_OW 45
8360: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay ] then
8361: LD_VAR 0 2
8365: PUSH
8366: LD_INT 4
8368: ARRAY
8369: PUSH
8370: LD_INT 51
8372: PUSH
8373: LD_INT 32
8375: PUSH
8376: LD_INT 12
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: LIST
8383: IN
8384: IFFALSE 8464
// begin if i [ 7 ] [ 1 ] then
8386: LD_VAR 0 2
8390: PUSH
8391: LD_INT 7
8393: ARRAY
8394: PUSH
8395: LD_INT 1
8397: ARRAY
8398: IFFALSE 8425
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
8400: LD_VAR 0 4
8404: PPUSH
8405: LD_INT 1
8407: PPUSH
8408: LD_VAR 0 2
8412: PUSH
8413: LD_INT 7
8415: ARRAY
8416: PUSH
8417: LD_INT 1
8419: ARRAY
8420: PPUSH
8421: CALL_OW 291
// if i [ 7 ] [ 2 ] then
8425: LD_VAR 0 2
8429: PUSH
8430: LD_INT 7
8432: ARRAY
8433: PUSH
8434: LD_INT 2
8436: ARRAY
8437: IFFALSE 8464
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
8439: LD_VAR 0 4
8443: PPUSH
8444: LD_INT 2
8446: PPUSH
8447: LD_VAR 0 2
8451: PUSH
8452: LD_INT 7
8454: ARRAY
8455: PUSH
8456: LD_INT 2
8458: ARRAY
8459: PPUSH
8460: CALL_OW 291
// end ; SetDir ( veh , 2 ) ;
8464: LD_VAR 0 4
8468: PPUSH
8469: LD_INT 2
8471: PPUSH
8472: CALL_OW 233
// PlaceUnitArea ( veh , spawnStartArea , false ) ;
8476: LD_VAR 0 4
8480: PPUSH
8481: LD_INT 4
8483: PPUSH
8484: LD_INT 0
8486: PPUSH
8487: CALL_OW 49
// end ;
8491: GO 8293
8493: POP
8494: POP
// if tmp then
8495: LD_VAR 0 5
8499: IFFALSE 8554
// for i in tmp union heikeApes do
8501: LD_ADDR_VAR 0 2
8505: PUSH
8506: LD_VAR 0 5
8510: PUSH
8511: LD_EXP 33
8515: UNION
8516: PUSH
8517: FOR_IN
8518: IFFALSE 8552
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
8520: LD_VAR 0 2
8524: PPUSH
8525: LD_INT 5
8527: PPUSH
8528: LD_INT 0
8530: PPUSH
8531: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8535: LD_VAR 0 2
8539: PPUSH
8540: LD_INT 26
8542: PPUSH
8543: LD_INT 9
8545: PPUSH
8546: CALL_OW 118
// end ;
8550: GO 8517
8552: POP
8553: POP
// if heikeSecondSquad then
8554: LD_EXP 31
8558: IFFALSE 8607
// for i in heikeSecondSquad do
8560: LD_ADDR_VAR 0 2
8564: PUSH
8565: LD_EXP 31
8569: PUSH
8570: FOR_IN
8571: IFFALSE 8605
// begin PlaceUnitArea ( i , spawnHuman2Area , false ) ;
8573: LD_VAR 0 2
8577: PPUSH
8578: LD_INT 6
8580: PPUSH
8581: LD_INT 0
8583: PPUSH
8584: CALL_OW 49
// ComTurnXY ( i , 26 , 9 ) ;
8588: LD_VAR 0 2
8592: PPUSH
8593: LD_INT 26
8595: PPUSH
8596: LD_INT 9
8598: PPUSH
8599: CALL_OW 118
// end ;
8603: GO 8570
8605: POP
8606: POP
// if heikeApes then
8607: LD_EXP 33
8611: IFFALSE 8654
// for i in heikeApes do
8613: LD_ADDR_VAR 0 2
8617: PUSH
8618: LD_EXP 33
8622: PUSH
8623: FOR_IN
8624: IFFALSE 8652
// begin PlaceUnitArea ( i , spawnApeArea , false ) ;
8626: LD_VAR 0 2
8630: PPUSH
8631: LD_INT 7
8633: PPUSH
8634: LD_INT 0
8636: PPUSH
8637: CALL_OW 49
// ComHold ( i ) ;
8641: LD_VAR 0 2
8645: PPUSH
8646: CALL_OW 140
// end ;
8650: GO 8623
8652: POP
8653: POP
// if Kurt then
8654: LD_EXP 29
8658: IFFALSE 8690
// begin PlaceUnitArea ( Kurt , spawnGuardArea , false ) ;
8660: LD_EXP 29
8664: PPUSH
8665: LD_INT 8
8667: PPUSH
8668: LD_INT 0
8670: PPUSH
8671: CALL_OW 49
// ComTurnXY ( Kurt , 42 , 32 ) ;
8675: LD_EXP 29
8679: PPUSH
8680: LD_INT 42
8682: PPUSH
8683: LD_INT 32
8685: PPUSH
8686: CALL_OW 118
// end ; Say ( Heike , DH-Start-1 ) ;
8690: LD_EXP 18
8694: PPUSH
8695: LD_STRING DH-Start-1
8697: PPUSH
8698: CALL_OW 88
// if Givi then
8702: LD_EXP 19
8706: IFFALSE 8969
// begin Say ( Givi , DG-Start-2-5 ) ;
8708: LD_EXP 19
8712: PPUSH
8713: LD_STRING DG-Start-2-5
8715: PPUSH
8716: CALL_OW 88
// Say ( Heike , DH-Start-3 ) ;
8720: LD_EXP 18
8724: PPUSH
8725: LD_STRING DH-Start-3
8727: PPUSH
8728: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
8732: LD_EXP 18
8736: PPUSH
8737: LD_STRING DH-Start-4
8739: PPUSH
8740: CALL_OW 88
// Say ( Givi , DG-Start-5 ) ;
8744: LD_EXP 19
8748: PPUSH
8749: LD_STRING DG-Start-5
8751: PPUSH
8752: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
8756: LD_EXP 18
8760: PPUSH
8761: LD_STRING DH-Start-6
8763: PPUSH
8764: CALL_OW 88
// Say ( Givi , DG-Start-7 ) ;
8768: LD_EXP 19
8772: PPUSH
8773: LD_STRING DG-Start-7
8775: PPUSH
8776: CALL_OW 88
// if Mike then
8780: LD_EXP 20
8784: IFFALSE 8957
// begin Say ( Mike , DM-Start-8 ) ;
8786: LD_EXP 20
8790: PPUSH
8791: LD_STRING DM-Start-8
8793: PPUSH
8794: CALL_OW 88
// Say ( Mike , DM-Start-9 ) ;
8798: LD_EXP 20
8802: PPUSH
8803: LD_STRING DM-Start-9
8805: PPUSH
8806: CALL_OW 88
// Say ( Givi , DG-Start-10 ) ;
8810: LD_EXP 19
8814: PPUSH
8815: LD_STRING DG-Start-10
8817: PPUSH
8818: CALL_OW 88
// Say ( Givi , DG-Start-11 ) ;
8822: LD_EXP 19
8826: PPUSH
8827: LD_STRING DG-Start-11
8829: PPUSH
8830: CALL_OW 88
// Say ( Heike , DH-Start-12 ) ;
8834: LD_EXP 18
8838: PPUSH
8839: LD_STRING DH-Start-12
8841: PPUSH
8842: CALL_OW 88
// Say ( Givi , DG-Start-13 ) ;
8846: LD_EXP 19
8850: PPUSH
8851: LD_STRING DG-Start-13
8853: PPUSH
8854: CALL_OW 88
// Say ( Givi , DG-Start-14 ) ;
8858: LD_EXP 19
8862: PPUSH
8863: LD_STRING DG-Start-14
8865: PPUSH
8866: CALL_OW 88
// if Kaia then
8870: LD_EXP 23
8874: IFFALSE 8957
// begin Say ( Kaia , DK-Start-15 ) ;
8876: LD_EXP 23
8880: PPUSH
8881: LD_STRING DK-Start-15
8883: PPUSH
8884: CALL_OW 88
// Say ( Kaia , DK-Start-16 ) ;
8888: LD_EXP 23
8892: PPUSH
8893: LD_STRING DK-Start-16
8895: PPUSH
8896: CALL_OW 88
// Say ( Kaia , DK-Start-17 ) ;
8900: LD_EXP 23
8904: PPUSH
8905: LD_STRING DK-Start-17
8907: PPUSH
8908: CALL_OW 88
// wait ( 0 0$0.3 ) ;
8912: LD_INT 10
8914: PPUSH
8915: CALL_OW 67
// ComTurnUnit ( Givi , Kaia ) ;
8919: LD_EXP 19
8923: PPUSH
8924: LD_EXP 23
8928: PPUSH
8929: CALL_OW 119
// Say ( Givi , DG-Start-18 ) ;
8933: LD_EXP 19
8937: PPUSH
8938: LD_STRING DG-Start-18
8940: PPUSH
8941: CALL_OW 88
// Say ( Kaia , DK-Start-19 ) ;
8945: LD_EXP 23
8949: PPUSH
8950: LD_STRING DK-Start-19
8952: PPUSH
8953: CALL_OW 88
// end ; end ; Say ( Heike , DH-Start-20 ) ;
8957: LD_EXP 18
8961: PPUSH
8962: LD_STRING DH-Start-20
8964: PPUSH
8965: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
8969: LD_INT 70
8971: PPUSH
8972: CALL_OW 67
// SayRadio ( Shariff , DShar-Start-21 ) ;
8976: LD_EXP 26
8980: PPUSH
8981: LD_STRING DShar-Start-21
8983: PPUSH
8984: CALL_OW 94
// Say ( Heike , DH-Start-22 ) ;
8988: LD_EXP 18
8992: PPUSH
8993: LD_STRING DH-Start-22
8995: PPUSH
8996: CALL_OW 88
// SayRadio ( Shariff , DShar-Start-23 ) ;
9000: LD_EXP 26
9004: PPUSH
9005: LD_STRING DShar-Start-23
9007: PPUSH
9008: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-24 ) ;
9012: LD_EXP 26
9016: PPUSH
9017: LD_STRING DShar-Start-24
9019: PPUSH
9020: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-25 ) ;
9024: LD_EXP 26
9028: PPUSH
9029: LD_STRING DShar-Start-25
9031: PPUSH
9032: CALL_OW 94
// SayRadio ( Shariff , DShar-Start-26 ) ;
9036: LD_EXP 26
9040: PPUSH
9041: LD_STRING DShar-Start-26
9043: PPUSH
9044: CALL_OW 94
// Say ( Heike , DH-Start-27 ) ;
9048: LD_EXP 18
9052: PPUSH
9053: LD_STRING DH-Start-27
9055: PPUSH
9056: CALL_OW 88
// if Kaia then
9060: LD_EXP 23
9064: IFFALSE 9104
// begin ComTurnUnit ( Heike , Kaia ) ;
9066: LD_EXP 18
9070: PPUSH
9071: LD_EXP 23
9075: PPUSH
9076: CALL_OW 119
// Say ( Kaia , DK-Start-28 ) ;
9080: LD_EXP 23
9084: PPUSH
9085: LD_STRING DK-Start-28
9087: PPUSH
9088: CALL_OW 88
// Say ( Heike , DH-Start-29 ) ;
9092: LD_EXP 18
9096: PPUSH
9097: LD_STRING DH-Start-29
9099: PPUSH
9100: CALL_OW 88
// end ; if Givi then
9104: LD_EXP 19
9108: IFFALSE 9320
// begin ComTurnUnit ( Heike , Givi ) ;
9110: LD_EXP 18
9114: PPUSH
9115: LD_EXP 19
9119: PPUSH
9120: CALL_OW 119
// ComTurnUnit ( Givi , Heike ) ;
9124: LD_EXP 19
9128: PPUSH
9129: LD_EXP 18
9133: PPUSH
9134: CALL_OW 119
// Say ( Heike , DH-Start-30 ) ;
9138: LD_EXP 18
9142: PPUSH
9143: LD_STRING DH-Start-30
9145: PPUSH
9146: CALL_OW 88
// Say ( Heike , DH-Start-31 ) ;
9150: LD_EXP 18
9154: PPUSH
9155: LD_STRING DH-Start-31
9157: PPUSH
9158: CALL_OW 88
// Say ( Givi , DG-Start-32 ) ;
9162: LD_EXP 19
9166: PPUSH
9167: LD_STRING DG-Start-32
9169: PPUSH
9170: CALL_OW 88
// Say ( Heike , DH-Start-33 ) ;
9174: LD_EXP 18
9178: PPUSH
9179: LD_STRING DH-Start-33
9181: PPUSH
9182: CALL_OW 88
// Say ( Givi , DG-Start-34 ) ;
9186: LD_EXP 19
9190: PPUSH
9191: LD_STRING DG-Start-34
9193: PPUSH
9194: CALL_OW 88
// Say ( Givi , DG-Start-35 ) ;
9198: LD_EXP 19
9202: PPUSH
9203: LD_STRING DG-Start-35
9205: PPUSH
9206: CALL_OW 88
// if Kurt and not dialogue_skipped then
9210: LD_EXP 29
9214: PUSH
9215: LD_OWVAR 59
9219: NOT
9220: AND
9221: IFFALSE 9252
// begin ComMoveXY ( Kurt , 28 , 13 ) ;
9223: LD_EXP 29
9227: PPUSH
9228: LD_INT 28
9230: PPUSH
9231: LD_INT 13
9233: PPUSH
9234: CALL_OW 111
// AddComTurnUnit ( Kurt , Heike ) ;
9238: LD_EXP 29
9242: PPUSH
9243: LD_EXP 18
9247: PPUSH
9248: CALL_OW 179
// end ; Say ( Givi , DG-Start-36 ) ;
9252: LD_EXP 19
9256: PPUSH
9257: LD_STRING DG-Start-36
9259: PPUSH
9260: CALL_OW 88
// if Kurt then
9264: LD_EXP 29
9268: IFFALSE 9320
// begin Say ( Kurt , DKs-Start-37 ) ;
9270: LD_EXP 29
9274: PPUSH
9275: LD_STRING DKs-Start-37
9277: PPUSH
9278: CALL_OW 88
// Say ( Kurt , DKs-Start-38 ) ;
9282: LD_EXP 29
9286: PPUSH
9287: LD_STRING DKs-Start-38
9289: PPUSH
9290: CALL_OW 88
// ComTurnUnit ( Heike , Kurt ) ;
9294: LD_EXP 18
9298: PPUSH
9299: LD_EXP 29
9303: PPUSH
9304: CALL_OW 119
// Say ( Heike , DH-Start-39 ) ;
9308: LD_EXP 18
9312: PPUSH
9313: LD_STRING DH-Start-39
9315: PPUSH
9316: CALL_OW 88
// end ; end ; if HexInfo ( 44 , 25 ) then
9320: LD_INT 44
9322: PPUSH
9323: LD_INT 25
9325: PPUSH
9326: CALL_OW 428
9330: IFFALSE 9347
// RemoveUnit ( HexInfo ( 44 , 25 ) ) ;
9332: LD_INT 44
9334: PPUSH
9335: LD_INT 25
9337: PPUSH
9338: CALL_OW 428
9342: PPUSH
9343: CALL_OW 64
// SetDir ( Olaf , 5 ) ;
9347: LD_EXP 27
9351: PPUSH
9352: LD_INT 5
9354: PPUSH
9355: CALL_OW 233
// PlaceUnitXY ( Olaf , 44 , 25 , false ) ;
9359: LD_EXP 27
9363: PPUSH
9364: LD_INT 44
9366: PPUSH
9367: LD_INT 25
9369: PPUSH
9370: LD_INT 0
9372: PPUSH
9373: CALL_OW 48
// ComMoveXY ( Olaf , 29 , 12 ) ;
9377: LD_EXP 27
9381: PPUSH
9382: LD_INT 29
9384: PPUSH
9385: LD_INT 12
9387: PPUSH
9388: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9392: LD_INT 35
9394: PPUSH
9395: CALL_OW 67
// until dialogue_skipped or GetDistUnits ( Heike , Olaf ) < 8 or GetDistUnitXY ( Olaf , 26 , 9 ) < 6 ;
9399: LD_OWVAR 59
9403: PUSH
9404: LD_EXP 18
9408: PPUSH
9409: LD_EXP 27
9413: PPUSH
9414: CALL_OW 296
9418: PUSH
9419: LD_INT 8
9421: LESS
9422: OR
9423: PUSH
9424: LD_EXP 27
9428: PPUSH
9429: LD_INT 26
9431: PPUSH
9432: LD_INT 9
9434: PPUSH
9435: CALL_OW 297
9439: PUSH
9440: LD_INT 6
9442: LESS
9443: OR
9444: IFFALSE 9392
// Say ( Olaf , DO-Scout-1 ) ;
9446: LD_EXP 27
9450: PPUSH
9451: LD_STRING DO-Scout-1
9453: PPUSH
9454: CALL_OW 88
// ComTurnUnit ( Olaf , Heike ) ;
9458: LD_EXP 27
9462: PPUSH
9463: LD_EXP 18
9467: PPUSH
9468: CALL_OW 119
// for i in tmp union heikeSecondSquad do
9472: LD_ADDR_VAR 0 2
9476: PUSH
9477: LD_VAR 0 5
9481: PUSH
9482: LD_EXP 31
9486: UNION
9487: PUSH
9488: FOR_IN
9489: IFFALSE 9507
// ComTurnUnit ( i , Olaf ) ;
9491: LD_VAR 0 2
9495: PPUSH
9496: LD_EXP 27
9500: PPUSH
9501: CALL_OW 119
9505: GO 9488
9507: POP
9508: POP
// wait ( 0 0$0.3 ) ;
9509: LD_INT 10
9511: PPUSH
9512: CALL_OW 67
// ComMoveUnit ( Heike , Olaf ) ;
9516: LD_EXP 18
9520: PPUSH
9521: LD_EXP 27
9525: PPUSH
9526: CALL_OW 112
// AddComTurnUnit ( Heike , Olaf ) ;
9530: LD_EXP 18
9534: PPUSH
9535: LD_EXP 27
9539: PPUSH
9540: CALL_OW 179
// Say ( Heike , DH-Scout-2 ) ;
9544: LD_EXP 18
9548: PPUSH
9549: LD_STRING DH-Scout-2
9551: PPUSH
9552: CALL_OW 88
// Say ( Olaf , DO-Scout-3 ) ;
9556: LD_EXP 27
9560: PPUSH
9561: LD_STRING DO-Scout-3
9563: PPUSH
9564: CALL_OW 88
// if Mike and Givi then
9568: LD_EXP 20
9572: PUSH
9573: LD_EXP 19
9577: AND
9578: IFFALSE 9594
// Say ( Olaf , DO-Scout-4 ) else
9580: LD_EXP 27
9584: PPUSH
9585: LD_STRING DO-Scout-4
9587: PPUSH
9588: CALL_OW 88
9592: GO 9694
// begin if Mike then
9594: LD_EXP 20
9598: IFFALSE 9626
// begin Say ( Olaf , DO-Scout-a-4 ) ;
9600: LD_EXP 27
9604: PPUSH
9605: LD_STRING DO-Scout-a-4
9607: PPUSH
9608: CALL_OW 88
// Say ( Heike , DH-Scout-a-5 ) ;
9612: LD_EXP 18
9616: PPUSH
9617: LD_STRING DH-Scout-a-5
9619: PPUSH
9620: CALL_OW 88
// end else
9624: GO 9694
// if Givi then
9626: LD_EXP 19
9630: IFFALSE 9658
// begin Say ( Olaf , DO-Scout-b-4 ) ;
9632: LD_EXP 27
9636: PPUSH
9637: LD_STRING DO-Scout-b-4
9639: PPUSH
9640: CALL_OW 88
// Say ( Heike , DH-Scout-b-5 ) ;
9644: LD_EXP 18
9648: PPUSH
9649: LD_STRING DH-Scout-b-5
9651: PPUSH
9652: CALL_OW 88
// end else
9656: GO 9694
// begin Say ( Olaf , DO-Scout-f-4 ) ;
9658: LD_EXP 27
9662: PPUSH
9663: LD_STRING DO-Scout-f-4
9665: PPUSH
9666: CALL_OW 88
// Say ( Heike , DH-Scout-f-5 ) ;
9670: LD_EXP 18
9674: PPUSH
9675: LD_STRING DH-Scout-f-5
9677: PPUSH
9678: CALL_OW 88
// Say ( Olaf , DO-Scout-f-6 ) ;
9682: LD_EXP 27
9686: PPUSH
9687: LD_STRING DO-Scout-f-6
9689: PPUSH
9690: CALL_OW 88
// end ; end ; Say ( Heike , DH-Scout-5 ) ;
9694: LD_EXP 18
9698: PPUSH
9699: LD_STRING DH-Scout-5
9701: PPUSH
9702: CALL_OW 88
// Say ( Olaf , DO-Scout-6 ) ;
9706: LD_EXP 27
9710: PPUSH
9711: LD_STRING DO-Scout-6
9713: PPUSH
9714: CALL_OW 88
// Say ( Olaf , DO-Scout-7 ) ;
9718: LD_EXP 27
9722: PPUSH
9723: LD_STRING DO-Scout-7
9725: PPUSH
9726: CALL_OW 88
// Say ( Heike , DH-Scout-8 ) ;
9730: LD_EXP 18
9734: PPUSH
9735: LD_STRING DH-Scout-8
9737: PPUSH
9738: CALL_OW 88
// Say ( Heike , DH-Scout-9 ) ;
9742: LD_EXP 18
9746: PPUSH
9747: LD_STRING DH-Scout-9
9749: PPUSH
9750: CALL_OW 88
// Say ( Olaf , DO-Scout-10 ) ;
9754: LD_EXP 27
9758: PPUSH
9759: LD_STRING DO-Scout-10
9761: PPUSH
9762: CALL_OW 88
// Say ( Olaf , DO-Scout-12 ) ;
9766: LD_EXP 27
9770: PPUSH
9771: LD_STRING DO-Scout-12
9773: PPUSH
9774: CALL_OW 88
// Say ( Olaf , DO-Scout-13 ) ;
9778: LD_EXP 27
9782: PPUSH
9783: LD_STRING DO-Scout-13
9785: PPUSH
9786: CALL_OW 88
// Say ( Olaf , DO-Scout-14 ) ;
9790: LD_EXP 27
9794: PPUSH
9795: LD_STRING DO-Scout-14
9797: PPUSH
9798: CALL_OW 88
// if Givi then
9802: LD_EXP 19
9806: IFFALSE 9832
// begin Say ( Givi , DG-Scout-15 ) ;
9808: LD_EXP 19
9812: PPUSH
9813: LD_STRING DG-Scout-15
9815: PPUSH
9816: CALL_OW 88
// Say ( Kaia , DK-Scout-16 ) ;
9820: LD_EXP 23
9824: PPUSH
9825: LD_STRING DK-Scout-16
9827: PPUSH
9828: CALL_OW 88
// end ; if not dialogue_skipped then
9832: LD_OWVAR 59
9836: NOT
9837: IFFALSE 9956
// begin async ;
9839: ASYNC
// Say ( Olaf , DO-Scout-17 ) ;
9840: LD_EXP 27
9844: PPUSH
9845: LD_STRING DO-Scout-17
9847: PPUSH
9848: CALL_OW 88
// RevealFogOnXY ( 55 , 77 , 2 , - 6 ) ;
9852: LD_INT 55
9854: PPUSH
9855: LD_INT 77
9857: PPUSH
9858: LD_INT 2
9860: PPUSH
9861: LD_INT 6
9863: NEG
9864: PPUSH
9865: CALL 2789 0 4
// wait ( 10 ) ;
9869: LD_INT 10
9871: PPUSH
9872: CALL_OW 67
// CenterOnXY ( 55 , 77 ) ;
9876: LD_INT 55
9878: PPUSH
9879: LD_INT 77
9881: PPUSH
9882: CALL_OW 84
// wait ( 0 0$5 ) ;
9886: LD_INT 175
9888: PPUSH
9889: CALL_OW 67
// Say ( Olaf , DO-Scout-18 ) ;
9893: LD_EXP 27
9897: PPUSH
9898: LD_STRING DO-Scout-18
9900: PPUSH
9901: CALL_OW 88
// RevealFogOnXY ( 204 , 107 , 2 , - 12 ) ;
9905: LD_INT 204
9907: PPUSH
9908: LD_INT 107
9910: PPUSH
9911: LD_INT 2
9913: PPUSH
9914: LD_INT 12
9916: NEG
9917: PPUSH
9918: CALL 2789 0 4
// wait ( 10 ) ;
9922: LD_INT 10
9924: PPUSH
9925: CALL_OW 67
// CenterOnXY ( 204 , 107 ) ;
9929: LD_INT 204
9931: PPUSH
9932: LD_INT 107
9934: PPUSH
9935: CALL_OW 84
// wait ( 0 0$5 ) ;
9939: LD_INT 175
9941: PPUSH
9942: CALL_OW 67
// sync ;
9946: SYNC
// CenterNowOnUnits ( Heike ) ;
9947: LD_EXP 18
9951: PPUSH
9952: CALL_OW 87
// end ; Say ( Olaf , DO-Scout-19 ) ;
9956: LD_EXP 27
9960: PPUSH
9961: LD_STRING DO-Scout-19
9963: PPUSH
9964: CALL_OW 88
// Say ( Olaf , DO-Scout-20 ) ;
9968: LD_EXP 27
9972: PPUSH
9973: LD_STRING DO-Scout-20
9975: PPUSH
9976: CALL_OW 88
// Say ( Heike , DH-Scout-21 ) ;
9980: LD_EXP 18
9984: PPUSH
9985: LD_STRING DH-Scout-21
9987: PPUSH
9988: CALL_OW 88
// Say ( Heike , DH-Scout-22 ) ;
9992: LD_EXP 18
9996: PPUSH
9997: LD_STRING DH-Scout-22
9999: PPUSH
10000: CALL_OW 88
// InGameOff ;
10004: CALL_OW 9
// if Givi then
10008: LD_EXP 19
10012: IFFALSE 10027
// SetRestrict ( b_lab_biological , 2 , state_enabled ) ;
10014: LD_INT 13
10016: PPUSH
10017: LD_INT 2
10019: PPUSH
10020: LD_INT 1
10022: PPUSH
10023: CALL_OW 324
// ChangeMissionObjectives ( Road ) ;
10027: LD_STRING Road
10029: PPUSH
10030: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) do
10034: LD_ADDR_VAR 0 2
10038: PUSH
10039: LD_INT 22
10041: PUSH
10042: LD_INT 5
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: PUSH
10049: LD_INT 21
10051: PUSH
10052: LD_INT 2
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: PPUSH
10063: CALL_OW 69
10067: PUSH
10068: FOR_IN
10069: IFFALSE 10085
// SetSide ( i , 2 ) ;
10071: LD_VAR 0 2
10075: PPUSH
10076: LD_INT 2
10078: PPUSH
10079: CALL_OW 235
10083: GO 10068
10085: POP
10086: POP
// SaveForQuickRestart ;
10087: CALL_OW 22
// end ;
10091: LD_VAR 0 1
10095: RET
// every 0 0$1 trigger SeeArea ( 2 , crossRoadArea ) do
10096: LD_INT 2
10098: PPUSH
10099: LD_INT 9
10101: PPUSH
10102: CALL_OW 294
10106: IFFALSE 10453
10108: GO 10110
10110: DISABLE
// begin DialogueOn ;
10111: CALL_OW 6
// ShowArea ( 2 , crossRoadArea ) ;
10115: LD_INT 2
10117: PPUSH
10118: LD_INT 9
10120: PPUSH
10121: CALL_OW 334
// CenterNowOnXY ( 111 , 72 ) ;
10125: LD_INT 111
10127: PPUSH
10128: LD_INT 72
10130: PPUSH
10131: CALL_OW 86
// if IsOk ( Kamil ) then
10135: LD_EXP 22
10139: PPUSH
10140: CALL_OW 302
10144: IFFALSE 10261
// begin Say ( Kamil , DKam-Cross-1 ) ;
10146: LD_EXP 22
10150: PPUSH
10151: LD_STRING DKam-Cross-1
10153: PPUSH
10154: CALL_OW 88
// Say ( Kamil , DKam-Cross-2 ) ;
10158: LD_EXP 22
10162: PPUSH
10163: LD_STRING DKam-Cross-2
10165: PPUSH
10166: CALL_OW 88
// Say ( Kamil , DKam-Cross-3 ) ;
10170: LD_EXP 22
10174: PPUSH
10175: LD_STRING DKam-Cross-3
10177: PPUSH
10178: CALL_OW 88
// Say ( Kamil , DKam-Cross-4 ) ;
10182: LD_EXP 22
10186: PPUSH
10187: LD_STRING DKam-Cross-4
10189: PPUSH
10190: CALL_OW 88
// if IsOk ( Ibrahim ) then
10194: LD_EXP 21
10198: PPUSH
10199: CALL_OW 302
10203: IFFALSE 10259
// begin if ibrahimJoinedIn04 then
10205: LD_EXP 4
10209: IFFALSE 10223
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10211: LD_EXP 21
10215: PPUSH
10216: LD_STRING DI-Cross-b-5
10218: PPUSH
10219: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10223: LD_EXP 21
10227: PPUSH
10228: LD_STRING DI-Cross-b-6
10230: PPUSH
10231: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10235: LD_EXP 21
10239: PPUSH
10240: LD_STRING DI-Cross-b-7
10242: PPUSH
10243: CALL_OW 88
// Say ( Kamil , DKam-Cross-8 ) ;
10247: LD_EXP 22
10251: PPUSH
10252: LD_STRING DKam-Cross-8
10254: PPUSH
10255: CALL_OW 88
// end ; end else
10259: GO 10419
// if IsOk ( Sophia ) then
10261: LD_EXP 24
10265: PPUSH
10266: CALL_OW 302
10270: IFFALSE 10387
// begin Say ( Sophia , DS-Cross-1 ) ;
10272: LD_EXP 24
10276: PPUSH
10277: LD_STRING DS-Cross-1
10279: PPUSH
10280: CALL_OW 88
// Say ( Sophia , DS-Cross-2 ) ;
10284: LD_EXP 24
10288: PPUSH
10289: LD_STRING DS-Cross-2
10291: PPUSH
10292: CALL_OW 88
// Say ( Sophia , DS-Cross-3 ) ;
10296: LD_EXP 24
10300: PPUSH
10301: LD_STRING DS-Cross-3
10303: PPUSH
10304: CALL_OW 88
// Say ( Sophia , DS-Cross-4 ) ;
10308: LD_EXP 24
10312: PPUSH
10313: LD_STRING DS-Cross-4
10315: PPUSH
10316: CALL_OW 88
// if IsOk ( Ibrahim ) then
10320: LD_EXP 21
10324: PPUSH
10325: CALL_OW 302
10329: IFFALSE 10385
// begin if ibrahimJoinedIn04 then
10331: LD_EXP 4
10335: IFFALSE 10349
// Say ( Ibrahim , DI-Cross-b-5 ) ;
10337: LD_EXP 21
10341: PPUSH
10342: LD_STRING DI-Cross-b-5
10344: PPUSH
10345: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-6 ) ;
10349: LD_EXP 21
10353: PPUSH
10354: LD_STRING DI-Cross-b-6
10356: PPUSH
10357: CALL_OW 88
// Say ( Ibrahim , DI-Cross-b-7 ) ;
10361: LD_EXP 21
10365: PPUSH
10366: LD_STRING DI-Cross-b-7
10368: PPUSH
10369: CALL_OW 88
// Say ( Sophia , DS-Cross-8 ) ;
10373: LD_EXP 24
10377: PPUSH
10378: LD_STRING DS-Cross-8
10380: PPUSH
10381: CALL_OW 88
// end ; end else
10385: GO 10419
// if UnitFilter ( heikeSecondSquad , [ f_ok ] ) then
10387: LD_EXP 31
10391: PPUSH
10392: LD_INT 50
10394: PUSH
10395: EMPTY
10396: LIST
10397: PPUSH
10398: CALL_OW 72
10402: IFFALSE 10419
// SayRandom ( heikeSecondSquad , DArm-Cross-c-1 , DArf-Cross-c-1 ) ;
10404: LD_EXP 31
10408: PPUSH
10409: LD_STRING DArm-Cross-c-1
10411: PPUSH
10412: LD_STRING DArf-Cross-c-1
10414: PPUSH
10415: CALL 2840 0 3
// SetTech ( tech_Crane , 2 , state_enabled ) ;
10419: LD_EXP 52
10423: PPUSH
10424: LD_INT 2
10426: PPUSH
10427: LD_INT 1
10429: PPUSH
10430: CALL_OW 322
// DialogueOff ;
10434: CALL_OW 7
// ChangeMissionObjectives ( Crane ) ;
10438: LD_STRING Crane
10440: PPUSH
10441: CALL_OW 337
// spottedCrossRoad := true ;
10445: LD_ADDR_EXP 8
10449: PUSH
10450: LD_INT 1
10452: ST_TO_ADDR
// end ;
10453: END
// every 0 0$10 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and ( IsOk ( Kaia ) or heikeSecondSquad ) do
10454: LD_INT 22
10456: PUSH
10457: LD_INT 2
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PUSH
10464: LD_INT 2
10466: PUSH
10467: LD_INT 30
10469: PUSH
10470: LD_INT 0
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: PUSH
10477: LD_INT 30
10479: PUSH
10480: LD_INT 1
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: LIST
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: PPUSH
10496: CALL_OW 69
10500: PUSH
10501: LD_EXP 23
10505: PPUSH
10506: CALL_OW 302
10510: PUSH
10511: LD_EXP 31
10515: OR
10516: AND
10517: IFFALSE 10716
10519: GO 10521
10521: DISABLE
// begin DialogueOn ;
10522: CALL_OW 6
// if Kaia then
10526: LD_EXP 23
10530: IFFALSE 10543
// CenterNowOnUnits ( Kaia ) else
10532: LD_EXP 23
10536: PPUSH
10537: CALL_OW 87
10541: GO 10552
// CenterNowOnUnits ( Heike ) ;
10543: LD_EXP 18
10547: PPUSH
10548: CALL_OW 87
// if IsOk ( Kaia ) then
10552: LD_EXP 23
10556: PPUSH
10557: CALL_OW 302
10561: IFFALSE 10577
// Say ( Kaia , DK-Cam-1 ) else
10563: LD_EXP 23
10567: PPUSH
10568: LD_STRING DK-Cam-1
10570: PPUSH
10571: CALL_OW 88
10575: GO 10592
// SayRandom ( heikeSecondSquad , DArm-Cam-1 , DArf-Cam-1 ) ;
10577: LD_EXP 31
10581: PPUSH
10582: LD_STRING DArm-Cam-1
10584: PPUSH
10585: LD_STRING DArf-Cam-1
10587: PPUSH
10588: CALL 2840 0 3
// Say ( Heike , DH-Cam-2 ) ;
10592: LD_EXP 18
10596: PPUSH
10597: LD_STRING DH-Cam-2
10599: PPUSH
10600: CALL_OW 88
// Say ( Heike , DH-Cam-3 ) ;
10604: LD_EXP 18
10608: PPUSH
10609: LD_STRING DH-Cam-3
10611: PPUSH
10612: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10616: LD_EXP 18
10620: PPUSH
10621: LD_STRING DH-Cam-4
10623: PPUSH
10624: CALL_OW 88
// if IsOk ( Kaia ) then
10628: LD_EXP 23
10632: PPUSH
10633: CALL_OW 302
10637: IFFALSE 10653
// Say ( Kaia , DK-Cam-5 ) else
10639: LD_EXP 23
10643: PPUSH
10644: LD_STRING DK-Cam-5
10646: PPUSH
10647: CALL_OW 88
10651: GO 10668
// SayRandom ( heikeSecondSquad , DArm-Cam-5 , DArf-Cam-5 ) ;
10653: LD_EXP 31
10657: PPUSH
10658: LD_STRING DArm-Cam-5
10660: PPUSH
10661: LD_STRING DArf-Cam-5
10663: PPUSH
10664: CALL 2840 0 3
// Say ( Olaf , DO-Cam-6 ) ;
10668: LD_EXP 27
10672: PPUSH
10673: LD_STRING DO-Cam-6
10675: PPUSH
10676: CALL_OW 88
// Say ( Olaf , DO-Cam-7 ) ;
10680: LD_EXP 27
10684: PPUSH
10685: LD_STRING DO-Cam-7
10687: PPUSH
10688: CALL_OW 88
// DialogueOff ;
10692: CALL_OW 7
// ChangeMissionObjectives ( Radar ) ;
10696: LD_STRING Radar
10698: PPUSH
10699: CALL_OW 337
// SetTech ( tech_radar , 2 , state_enabled ) ;
10703: LD_INT 6
10705: PPUSH
10706: LD_INT 2
10708: PPUSH
10709: LD_INT 1
10711: PPUSH
10712: CALL_OW 322
// end ;
10716: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_radar ] , [ f_bweapon , ar_radar ] ] ) do
10717: LD_INT 22
10719: PUSH
10720: LD_INT 2
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: PUSH
10727: LD_INT 34
10729: PUSH
10730: LD_INT 30
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: PUSH
10737: LD_INT 35
10739: PUSH
10740: LD_INT 30
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: LIST
10751: PPUSH
10752: CALL_OW 69
10756: IFFALSE 10768
10758: GO 10760
10760: DISABLE
// ChangeMissionObjectives ( RadarDone ) ;
10761: LD_STRING RadarDone
10763: PPUSH
10764: CALL_OW 337
10768: END
// every 0 0$30 trigger IsOk ( Olaf ) and IsOk ( Aviradze ) and GetTech ( tech_radar , 2 ) = state_researched and ( GetDistUnits ( Aviradze , Heike ) < 10 or IsInUnit ( Aviradze ) ) do
10769: LD_EXP 27
10773: PPUSH
10774: CALL_OW 302
10778: PUSH
10779: LD_EXP 30
10783: PPUSH
10784: CALL_OW 302
10788: AND
10789: PUSH
10790: LD_INT 6
10792: PPUSH
10793: LD_INT 2
10795: PPUSH
10796: CALL_OW 321
10800: PUSH
10801: LD_INT 2
10803: EQUAL
10804: AND
10805: PUSH
10806: LD_EXP 30
10810: PPUSH
10811: LD_EXP 18
10815: PPUSH
10816: CALL_OW 296
10820: PUSH
10821: LD_INT 10
10823: LESS
10824: PUSH
10825: LD_EXP 30
10829: PPUSH
10830: CALL_OW 310
10834: OR
10835: AND
10836: IFFALSE 11037
10838: GO 10840
10840: DISABLE
// begin DialogueOn ;
10841: CALL_OW 6
// Say ( Aviradze , DA-RC-1 ) ;
10845: LD_EXP 30
10849: PPUSH
10850: LD_STRING DA-RC-1
10852: PPUSH
10853: CALL_OW 88
// Say ( Aviradze , DA-RC-2 ) ;
10857: LD_EXP 30
10861: PPUSH
10862: LD_STRING DA-RC-2
10864: PPUSH
10865: CALL_OW 88
// if IsOk ( Kaia ) then
10869: LD_EXP 23
10873: PPUSH
10874: CALL_OW 302
10878: IFFALSE 10952
// begin Say ( Kaia , DK-RC-3 ) ;
10880: LD_EXP 23
10884: PPUSH
10885: LD_STRING DK-RC-3
10887: PPUSH
10888: CALL_OW 88
// Say ( Aviradze , DA-RC-4 ) ;
10892: LD_EXP 30
10896: PPUSH
10897: LD_STRING DA-RC-4
10899: PPUSH
10900: CALL_OW 88
// Say ( Kaia , DK-RC-5 ) ;
10904: LD_EXP 23
10908: PPUSH
10909: LD_STRING DK-RC-5
10911: PPUSH
10912: CALL_OW 88
// Say ( Aviradze , DA-RC-6 ) ;
10916: LD_EXP 30
10920: PPUSH
10921: LD_STRING DA-RC-6
10923: PPUSH
10924: CALL_OW 88
// Say ( Kaia , DK-RC-7 ) ;
10928: LD_EXP 23
10932: PPUSH
10933: LD_STRING DK-RC-7
10935: PPUSH
10936: CALL_OW 88
// Say ( Aviradze , DA-RC-8 ) ;
10940: LD_EXP 30
10944: PPUSH
10945: LD_STRING DA-RC-8
10947: PPUSH
10948: CALL_OW 88
// end ; Say ( Heike , DH-RC-9 ) ;
10952: LD_EXP 18
10956: PPUSH
10957: LD_STRING DH-RC-9
10959: PPUSH
10960: CALL_OW 88
// if IsOk ( Markov ) then
10964: LD_EXP 25
10968: PPUSH
10969: CALL_OW 302
10973: IFFALSE 11001
// begin Say ( Markov , DMar-RC-10 ) ;
10975: LD_EXP 25
10979: PPUSH
10980: LD_STRING DMar-RC-10
10982: PPUSH
10983: CALL_OW 88
// Say ( Markov , DMar-RC-11 ) ;
10987: LD_EXP 25
10991: PPUSH
10992: LD_STRING DMar-RC-11
10994: PPUSH
10995: CALL_OW 88
// end else
10999: GO 11013
// begin Say ( Olaf , DO-RC-a-10 ) ;
11001: LD_EXP 27
11005: PPUSH
11006: LD_STRING DO-RC-a-10
11008: PPUSH
11009: CALL_OW 88
// end ; DialogueOff ;
11013: CALL_OW 7
// ChangeMissionObjectives ( RemoteControl ) ;
11017: LD_STRING RemoteControl
11019: PPUSH
11020: CALL_OW 337
// SetTech ( tech_remCont , 2 , state_enabled ) ;
11024: LD_INT 15
11026: PPUSH
11027: LD_INT 2
11029: PPUSH
11030: LD_INT 1
11032: PPUSH
11033: CALL_OW 322
// end ;
11037: END
// every 0 0$1 trigger FilterUnitsInArea ( westBaseArea , [ f_side , 2 ] ) do var i ;
11038: LD_INT 12
11040: PPUSH
11041: LD_INT 22
11043: PUSH
11044: LD_INT 2
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: PPUSH
11051: CALL_OW 70
11055: IFFALSE 11409
11057: GO 11059
11059: DISABLE
11060: LD_INT 0
11062: PPUSH
// begin PrepareWestBase ;
11063: CALL 5430 0 0
// westBaseSpotted := true ;
11067: LD_ADDR_EXP 5
11071: PUSH
11072: LD_INT 1
11074: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11075: LD_INT 70
11077: PPUSH
11078: CALL_OW 67
// InGameOn ;
11082: CALL_OW 8
// CenterOnXY ( 56 , 77 ) ;
11086: LD_INT 56
11088: PPUSH
11089: LD_INT 77
11091: PPUSH
11092: CALL_OW 84
// PlaceSeeing ( 56 , 77 , 2 , - 12 ) ;
11096: LD_INT 56
11098: PPUSH
11099: LD_INT 77
11101: PPUSH
11102: LD_INT 2
11104: PPUSH
11105: LD_INT 12
11107: NEG
11108: PPUSH
11109: CALL_OW 330
// wait ( 0 0$2 ) ;
11113: LD_INT 70
11115: PPUSH
11116: CALL_OW 67
// DialogueOn ;
11120: CALL_OW 6
// Say ( Heike , DH-Rbase-1 ) ;
11124: LD_EXP 18
11128: PPUSH
11129: LD_STRING DH-Rbase-1
11131: PPUSH
11132: CALL_OW 88
// Say ( Kaia , DK-Rbase-2 ) ;
11136: LD_EXP 23
11140: PPUSH
11141: LD_STRING DK-Rbase-2
11143: PPUSH
11144: CALL_OW 88
// Say ( Kaia , DK-Rbase-3 ) ;
11148: LD_EXP 23
11152: PPUSH
11153: LD_STRING DK-Rbase-3
11155: PPUSH
11156: CALL_OW 88
// Say ( Kaia , DK-Rbase-4 ) ;
11160: LD_EXP 23
11164: PPUSH
11165: LD_STRING DK-Rbase-4
11167: PPUSH
11168: CALL_OW 88
// DialogueOff ;
11172: CALL_OW 7
// RemoveSeeing ( 56 , 77 , 2 ) ;
11176: LD_INT 56
11178: PPUSH
11179: LD_INT 77
11181: PPUSH
11182: LD_INT 2
11184: PPUSH
11185: CALL_OW 331
// InGameOff ;
11189: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
11193: LD_INT 35
11195: PPUSH
11196: CALL_OW 67
// until not apeSoldGroup and not apeEngGroup ;
11200: LD_EXP 39
11204: NOT
11205: PUSH
11206: LD_EXP 40
11210: NOT
11211: AND
11212: IFFALSE 11193
// wait ( 0 0$2 ) ;
11214: LD_INT 70
11216: PPUSH
11217: CALL_OW 67
// if IsOk ( Kaia ) then
11221: LD_EXP 23
11225: PPUSH
11226: CALL_OW 302
11230: IFFALSE 11345
// begin DialogueOn ;
11232: CALL_OW 6
// CenterNowOnXY ( 56 , 81 ) ;
11236: LD_INT 56
11238: PPUSH
11239: LD_INT 81
11241: PPUSH
11242: CALL_OW 86
// Say ( Kaia , DK-Rbase-5 ) ;
11246: LD_EXP 23
11250: PPUSH
11251: LD_STRING DK-Rbase-5
11253: PPUSH
11254: CALL_OW 88
// if IsOk ( Givi ) then
11258: LD_EXP 19
11262: PPUSH
11263: CALL_OW 302
11267: IFFALSE 11341
// begin Say ( Givi , DG-Rbase-6 ) ;
11269: LD_EXP 19
11273: PPUSH
11274: LD_STRING DG-Rbase-6
11276: PPUSH
11277: CALL_OW 88
// Say ( Givi , DG-Rbase-7 ) ;
11281: LD_EXP 19
11285: PPUSH
11286: LD_STRING DG-Rbase-7
11288: PPUSH
11289: CALL_OW 88
// Say ( Kaia , DK-Rbase-8 ) ;
11293: LD_EXP 23
11297: PPUSH
11298: LD_STRING DK-Rbase-8
11300: PPUSH
11301: CALL_OW 88
// Say ( Givi , DG-Rbase-9 ) ;
11305: LD_EXP 19
11309: PPUSH
11310: LD_STRING DG-Rbase-9
11312: PPUSH
11313: CALL_OW 88
// Say ( Givi , DG-Rbase-10 ) ;
11317: LD_EXP 19
11321: PPUSH
11322: LD_STRING DG-Rbase-10
11324: PPUSH
11325: CALL_OW 88
// Say ( Kaia , DK-Rbase-11 ) ;
11329: LD_EXP 23
11333: PPUSH
11334: LD_STRING DK-Rbase-11
11336: PPUSH
11337: CALL_OW 88
// end ; DialogueOff ;
11341: CALL_OW 7
// end ; for i in FilterUnitsInArea ( westBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
11345: LD_ADDR_VAR 0 1
11349: PUSH
11350: LD_INT 12
11352: PPUSH
11353: LD_INT 22
11355: PUSH
11356: LD_INT 3
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: PUSH
11363: LD_INT 21
11365: PUSH
11366: LD_INT 3
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: PPUSH
11377: CALL_OW 70
11381: PUSH
11382: FOR_IN
11383: IFFALSE 11399
// SetSide ( i , 2 ) ;
11385: LD_VAR 0 1
11389: PPUSH
11390: LD_INT 2
11392: PPUSH
11393: CALL_OW 235
11397: GO 11382
11399: POP
11400: POP
// westBaseCaptured := true ;
11401: LD_ADDR_EXP 9
11405: PUSH
11406: LD_INT 1
11408: ST_TO_ADDR
// end ;
11409: PPOPN 1
11411: END
// every 0 0$1 trigger not oilBaseGuard or GetSide ( ruEastBase ) = 2 do
11412: LD_EXP 35
11416: NOT
11417: PUSH
11418: LD_INT 10
11420: PPUSH
11421: CALL_OW 255
11425: PUSH
11426: LD_INT 2
11428: EQUAL
11429: OR
11430: IFFALSE 11557
11432: GO 11434
11434: DISABLE
// begin DialogueOn ;
11435: CALL_OW 6
// Say ( Heike , DH-Goal-1 ) ;
11439: LD_EXP 18
11443: PPUSH
11444: LD_STRING DH-Goal-1
11446: PPUSH
11447: CALL_OW 88
// SayRadio ( Shariff , DShar-Goal-2 ) ;
11451: LD_EXP 26
11455: PPUSH
11456: LD_STRING DShar-Goal-2
11458: PPUSH
11459: CALL_OW 94
// Say ( Heike , DH-Goal-3 ) ;
11463: LD_EXP 18
11467: PPUSH
11468: LD_STRING DH-Goal-3
11470: PPUSH
11471: CALL_OW 88
// if reinforcementsAllowed then
11475: LD_EXP 14
11479: IFFALSE 11505
// begin SayRadio ( Shariff , DShar-Goal-4 ) ;
11481: LD_EXP 26
11485: PPUSH
11486: LD_STRING DShar-Goal-4
11488: PPUSH
11489: CALL_OW 94
// Say ( Heike , DH-Goal-5 ) ;
11493: LD_EXP 18
11497: PPUSH
11498: LD_STRING DH-Goal-5
11500: PPUSH
11501: CALL_OW 88
// end ; DialogueOff ;
11505: CALL_OW 7
// eastBaseCaptured := true ;
11509: LD_ADDR_EXP 10
11513: PUSH
11514: LD_INT 1
11516: ST_TO_ADDR
// ChangeMissionObjectives ( BaseCaptured ) ;
11517: LD_STRING BaseCaptured
11519: PPUSH
11520: CALL_OW 337
// if not reinforcementsAllowed then
11524: LD_EXP 14
11528: NOT
11529: IFFALSE 11533
// exit ;
11531: GO 11557
// wait ( 10 10$00 + rand ( - 0 0$30 , 0 0$30 ) ) ;
11533: LD_INT 21000
11535: PUSH
11536: LD_INT 1050
11538: NEG
11539: PPUSH
11540: LD_INT 1050
11542: PPUSH
11543: CALL_OW 12
11547: PLUS
11548: PPUSH
11549: CALL_OW 67
// PrepareReinforcements ;
11553: CALL 3790 0 0
// end ;
11557: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_biological ] ] ) do
11558: LD_INT 22
11560: PUSH
11561: LD_INT 2
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: PUSH
11568: LD_INT 30
11570: PUSH
11571: LD_INT 13
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PPUSH
11582: CALL_OW 69
11586: IFFALSE 11603
11588: GO 11590
11590: DISABLE
// begin Say ( Givi , DG-Lab-1 ) ;
11591: LD_EXP 19
11595: PPUSH
11596: LD_STRING DG-Lab-1
11598: PPUSH
11599: CALL_OW 88
// end ;
11603: END
// every 0 0$1 trigger GetTech ( tech_StimDrugs , 2 ) = state_researched do
11604: LD_INT 5
11606: PPUSH
11607: LD_INT 2
11609: PPUSH
11610: CALL_OW 321
11614: PUSH
11615: LD_INT 2
11617: EQUAL
11618: IFFALSE 11679
11620: GO 11622
11622: DISABLE
// begin Say ( Givi , DG-Stim-1 ) ;
11623: LD_EXP 19
11627: PPUSH
11628: LD_STRING DG-Stim-1
11630: PPUSH
11631: CALL_OW 88
// Say ( Heike , DH-Stim-2 ) ;
11635: LD_EXP 18
11639: PPUSH
11640: LD_STRING DH-Stim-2
11642: PPUSH
11643: CALL_OW 88
// Say ( Givi , DG-Stim-3 ) ;
11647: LD_EXP 19
11651: PPUSH
11652: LD_STRING DG-Stim-3
11654: PPUSH
11655: CALL_OW 88
// Say ( Heike , DH-Stim-4 ) ;
11659: LD_EXP 18
11663: PPUSH
11664: LD_STRING DH-Stim-4
11666: PPUSH
11667: CALL_OW 88
// drugsResearched := true ;
11671: LD_ADDR_EXP 11
11675: PUSH
11676: LD_INT 1
11678: ST_TO_ADDR
// end ;
11679: END
// every 0 0$1 trigger drugsResearched do var i , tmp , tag ;
11680: LD_EXP 11
11684: IFFALSE 11976
11686: GO 11688
11688: DISABLE
11689: LD_INT 0
11691: PPUSH
11692: PPUSH
11693: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
11694: LD_ADDR_VAR 0 2
11698: PUSH
11699: LD_EXP 18
11703: PUSH
11704: LD_EXP 19
11708: PUSH
11709: LD_EXP 27
11713: PUSH
11714: LD_EXP 25
11718: PUSH
11719: LD_EXP 23
11723: PUSH
11724: LD_EXP 24
11728: PUSH
11729: LD_EXP 29
11733: PUSH
11734: LD_EXP 22
11738: PUSH
11739: LD_EXP 20
11743: PUSH
11744: LD_EXP 21
11748: PUSH
11749: LD_EXP 30
11753: PUSH
11754: EMPTY
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
11767: LD_ADDR_VAR 0 3
11771: PUSH
11772: LD_STRING H
11774: PUSH
11775: LD_STRING G
11777: PUSH
11778: LD_STRING O
11780: PUSH
11781: LD_STRING Mar
11783: PUSH
11784: LD_STRING K
11786: PUSH
11787: LD_STRING S
11789: PUSH
11790: LD_STRING Ks
11792: PUSH
11793: LD_STRING Kam
11795: PUSH
11796: LD_STRING M
11798: PUSH
11799: LD_STRING I
11801: PUSH
11802: LD_STRING A
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11818: LD_INT 35
11820: PPUSH
11821: CALL_OW 67
// for i := tmp downto 1 do
11825: LD_ADDR_VAR 0 1
11829: PUSH
11830: DOUBLE
11831: LD_VAR 0 2
11835: INC
11836: ST_TO_ADDR
11837: LD_INT 1
11839: PUSH
11840: FOR_DOWNTO
11841: IFFALSE 11967
// if IsDying ( tmp [ i ] ) then
11843: LD_VAR 0 2
11847: PUSH
11848: LD_VAR 0 1
11852: ARRAY
11853: PPUSH
11854: CALL_OW 303
11858: IFFALSE 11965
// begin DialogueOn ;
11860: CALL_OW 6
// CenterNowOnUnits ( tmp [ i ] ) ;
11864: LD_VAR 0 2
11868: PUSH
11869: LD_VAR 0 1
11873: ARRAY
11874: PPUSH
11875: CALL_OW 87
// ForceSay ( tmp [ i ] , D & tag [ i ] & -Stim-a-1 ) ;
11879: LD_VAR 0 2
11883: PUSH
11884: LD_VAR 0 1
11888: ARRAY
11889: PPUSH
11890: LD_STRING D
11892: PUSH
11893: LD_VAR 0 3
11897: PUSH
11898: LD_VAR 0 1
11902: ARRAY
11903: STR
11904: PUSH
11905: LD_STRING -Stim-a-1
11907: STR
11908: PPUSH
11909: CALL_OW 91
// tmp := Delete ( tmp , i ) ;
11913: LD_ADDR_VAR 0 2
11917: PUSH
11918: LD_VAR 0 2
11922: PPUSH
11923: LD_VAR 0 1
11927: PPUSH
11928: CALL_OW 3
11932: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
11933: LD_ADDR_VAR 0 3
11937: PUSH
11938: LD_VAR 0 3
11942: PPUSH
11943: LD_VAR 0 1
11947: PPUSH
11948: CALL_OW 3
11952: ST_TO_ADDR
// drugsTested := true ;
11953: LD_ADDR_EXP 6
11957: PUSH
11958: LD_INT 1
11960: ST_TO_ADDR
// DialogueOff ;
11961: CALL_OW 7
// end ;
11965: GO 11840
11967: POP
11968: POP
// until not tmp ;
11969: LD_VAR 0 2
11973: NOT
11974: IFFALSE 11818
// end ;
11976: PPOPN 3
11978: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , control_remote ] ] ) do
11979: LD_INT 22
11981: PUSH
11982: LD_INT 2
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: LD_INT 34
11991: PUSH
11992: LD_INT 31
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PPUSH
12003: CALL_OW 69
12007: PUSH
12008: LD_INT 22
12010: PUSH
12011: LD_INT 2
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PUSH
12018: LD_INT 34
12020: PUSH
12021: LD_INT 2
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: PPUSH
12032: CALL_OW 69
12036: AND
12037: IFFALSE 12050
12039: GO 12041
12041: DISABLE
// remoteControlConstructed := true ;
12042: LD_ADDR_EXP 12
12046: PUSH
12047: LD_INT 1
12049: ST_TO_ADDR
12050: END
// every 0 0$1 trigger remoteControlConstructed do var i , tmp , tag ;
12051: LD_EXP 12
12055: IFFALSE 12332
12057: GO 12059
12059: DISABLE
12060: LD_INT 0
12062: PPUSH
12063: PPUSH
12064: PPUSH
// begin tmp := [ Heike , Givi , Olaf , Markov , Kaia , Sophia , Kurt , Kamil , Mike , Ibrahim , Aviradze ] ;
12065: LD_ADDR_VAR 0 2
12069: PUSH
12070: LD_EXP 18
12074: PUSH
12075: LD_EXP 19
12079: PUSH
12080: LD_EXP 27
12084: PUSH
12085: LD_EXP 25
12089: PUSH
12090: LD_EXP 23
12094: PUSH
12095: LD_EXP 24
12099: PUSH
12100: LD_EXP 29
12104: PUSH
12105: LD_EXP 22
12109: PUSH
12110: LD_EXP 20
12114: PUSH
12115: LD_EXP 21
12119: PUSH
12120: LD_EXP 30
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: ST_TO_ADDR
// tag := [ H , G , O , Mar , K , S , Ks , Kam , M , I , A ] ;
12138: LD_ADDR_VAR 0 3
12142: PUSH
12143: LD_STRING H
12145: PUSH
12146: LD_STRING G
12148: PUSH
12149: LD_STRING O
12151: PUSH
12152: LD_STRING Mar
12154: PUSH
12155: LD_STRING K
12157: PUSH
12158: LD_STRING S
12160: PUSH
12161: LD_STRING Ks
12163: PUSH
12164: LD_STRING Kam
12166: PUSH
12167: LD_STRING M
12169: PUSH
12170: LD_STRING I
12172: PUSH
12173: LD_STRING A
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12189: LD_INT 35
12191: PPUSH
12192: CALL_OW 67
// for i := tmp downto 1 do
12196: LD_ADDR_VAR 0 1
12200: PUSH
12201: DOUBLE
12202: LD_VAR 0 2
12206: INC
12207: ST_TO_ADDR
12208: LD_INT 1
12210: PUSH
12211: FOR_DOWNTO
12212: IFFALSE 12323
// if UnitsLinked ( tmp [ i ] ) then
12214: LD_VAR 0 2
12218: PUSH
12219: LD_VAR 0 1
12223: ARRAY
12224: PPUSH
12225: CALL_OW 432
12229: IFFALSE 12321
// begin DialogueOn ;
12231: CALL_OW 6
// Say ( tmp [ i ] , D & tag [ i ] & -RC-a-1 ) ;
12235: LD_VAR 0 2
12239: PUSH
12240: LD_VAR 0 1
12244: ARRAY
12245: PPUSH
12246: LD_STRING D
12248: PUSH
12249: LD_VAR 0 3
12253: PUSH
12254: LD_VAR 0 1
12258: ARRAY
12259: STR
12260: PUSH
12261: LD_STRING -RC-a-1
12263: STR
12264: PPUSH
12265: CALL_OW 88
// tmp := Delete ( tmp , i ) ;
12269: LD_ADDR_VAR 0 2
12273: PUSH
12274: LD_VAR 0 2
12278: PPUSH
12279: LD_VAR 0 1
12283: PPUSH
12284: CALL_OW 3
12288: ST_TO_ADDR
// tag := Delete ( tag , i ) ;
12289: LD_ADDR_VAR 0 3
12293: PUSH
12294: LD_VAR 0 3
12298: PPUSH
12299: LD_VAR 0 1
12303: PPUSH
12304: CALL_OW 3
12308: ST_TO_ADDR
// DialogueOff ;
12309: CALL_OW 7
// remoteControlTested := true ;
12313: LD_ADDR_EXP 7
12317: PUSH
12318: LD_INT 1
12320: ST_TO_ADDR
// end ;
12321: GO 12211
12323: POP
12324: POP
// until not tmp ;
12325: LD_VAR 0 2
12329: NOT
12330: IFFALSE 12189
// end ;
12332: PPOPN 3
12334: END
// every 0 0$1 trigger remoteControlTested and IsOk ( Markov ) and not InBattle ( 2 ) do
12335: LD_EXP 7
12339: PUSH
12340: LD_EXP 25
12344: PPUSH
12345: CALL_OW 302
12349: AND
12350: PUSH
12351: LD_INT 2
12353: PPUSH
12354: CALL_OW 463
12358: NOT
12359: AND
12360: IFFALSE 12389
12362: GO 12364
12364: DISABLE
// begin Say ( Markov , DMar-RC-a-2 ) ;
12365: LD_EXP 25
12369: PPUSH
12370: LD_STRING DMar-RC-a-2
12372: PPUSH
12373: CALL_OW 88
// Say ( Markov , DMar-RC-a-3 ) ;
12377: LD_EXP 25
12381: PPUSH
12382: LD_STRING DMar-RC-a-3
12384: PPUSH
12385: CALL_OW 88
// end ;
12389: END
// every 0 0$1 trigger reinforcementsAllowed and GetDistUnits ( Heike , Aviradze ) < 8 and not InBattle ( 2 ) and IsOk ( Aviradze ) and IsOk ( Heike ) do
12390: LD_EXP 14
12394: PUSH
12395: LD_EXP 18
12399: PPUSH
12400: LD_EXP 30
12404: PPUSH
12405: CALL_OW 296
12409: PUSH
12410: LD_INT 8
12412: LESS
12413: AND
12414: PUSH
12415: LD_INT 2
12417: PPUSH
12418: CALL_OW 463
12422: NOT
12423: AND
12424: PUSH
12425: LD_EXP 30
12429: PPUSH
12430: CALL_OW 302
12434: AND
12435: PUSH
12436: LD_EXP 18
12440: PPUSH
12441: CALL_OW 302
12445: AND
12446: IFFALSE 12624
12448: GO 12450
12450: DISABLE
// begin if not IsInUnit ( Aviradze ) then
12451: LD_EXP 30
12455: PPUSH
12456: CALL_OW 310
12460: NOT
12461: IFFALSE 12477
// ComTurnUnit ( Aviradze , Heike ) ;
12463: LD_EXP 30
12467: PPUSH
12468: LD_EXP 18
12472: PPUSH
12473: CALL_OW 119
// if not IsInUnit ( Heike ) then
12477: LD_EXP 18
12481: PPUSH
12482: CALL_OW 310
12486: NOT
12487: IFFALSE 12503
// ComTurnUnit ( Heike , Aviradze ) ;
12489: LD_EXP 18
12493: PPUSH
12494: LD_EXP 30
12498: PPUSH
12499: CALL_OW 119
// wait ( 0 0$1 ) ;
12503: LD_INT 35
12505: PPUSH
12506: CALL_OW 67
// DialogueOn ;
12510: CALL_OW 6
// CenterNowOnUnits ( Aviradze ) ;
12514: LD_EXP 30
12518: PPUSH
12519: CALL_OW 87
// Say ( Heike , DH-Beria-1 ) ;
12523: LD_EXP 18
12527: PPUSH
12528: LD_STRING DH-Beria-1
12530: PPUSH
12531: CALL_OW 88
// Say ( Aviradze , DA-Beria-2 ) ;
12535: LD_EXP 30
12539: PPUSH
12540: LD_STRING DA-Beria-2
12542: PPUSH
12543: CALL_OW 88
// Say ( Heike , DH-Beria-3 ) ;
12547: LD_EXP 18
12551: PPUSH
12552: LD_STRING DH-Beria-3
12554: PPUSH
12555: CALL_OW 88
// Say ( Aviradze , DA-Beria-4 ) ;
12559: LD_EXP 30
12563: PPUSH
12564: LD_STRING DA-Beria-4
12566: PPUSH
12567: CALL_OW 88
// Say ( Aviradze , DA-Beria-5 ) ;
12571: LD_EXP 30
12575: PPUSH
12576: LD_STRING DA-Beria-5
12578: PPUSH
12579: CALL_OW 88
// Say ( Aviradze , DA-Beria-6 ) ;
12583: LD_EXP 30
12587: PPUSH
12588: LD_STRING DA-Beria-6
12590: PPUSH
12591: CALL_OW 88
// Say ( Heike , DA-Beria-7 ) ;
12595: LD_EXP 18
12599: PPUSH
12600: LD_STRING DA-Beria-7
12602: PPUSH
12603: CALL_OW 88
// DialogueOff ;
12607: CALL_OW 7
// SetTech ( tech_weap2 , 2 , state_enabled ) ;
12611: LD_INT 52
12613: PPUSH
12614: LD_INT 2
12616: PPUSH
12617: LD_INT 1
12619: PPUSH
12620: CALL_OW 322
// end ;
12624: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
12625: LD_EXP 23
12629: PPUSH
12630: CALL_OW 256
12634: PUSH
12635: LD_INT 10
12637: LESS
12638: IFFALSE 12675
12640: GO 12642
12642: DISABLE
// begin DialogueOn ;
12643: CALL_OW 6
// ForceSay ( Kaia , DK-Kdeath-1 ) ;
12647: LD_EXP 23
12651: PPUSH
12652: LD_STRING DK-Kdeath-1
12654: PPUSH
12655: CALL_OW 91
// Say ( Heike , DH-Kdeath-2 ) ;
12659: LD_EXP 18
12663: PPUSH
12664: LD_STRING DH-Kdeath-2
12666: PPUSH
12667: CALL_OW 88
// DialogueOff ;
12671: CALL_OW 7
// end ;
12675: END
// every 0 0$1 trigger SeeGroup ( 2 , ruNorthGroup ) do
12676: LD_INT 2
12678: PPUSH
12679: LD_EXP 36
12683: PPUSH
12684: CALL 2922 0 2
12688: IFFALSE 12705
12690: GO 12692
12692: DISABLE
// Say ( Heike , DH-Obj-1 ) ;
12693: LD_EXP 18
12697: PPUSH
12698: LD_STRING DH-Obj-1
12700: PPUSH
12701: CALL_OW 88
12705: END
// every 0 0$1 trigger SeeGroup ( 2 , ruSouthGroup ) do
12706: LD_INT 2
12708: PPUSH
12709: LD_EXP 37
12713: PPUSH
12714: CALL 2922 0 2
12718: IFFALSE 12735
12720: GO 12722
12722: DISABLE
// Say ( Heike , DH-Obj-a-1 ) ;
12723: LD_EXP 18
12727: PPUSH
12728: LD_STRING DH-Obj-a-1
12730: PPUSH
12731: CALL_OW 88
12735: END
// every 5 5$30 trigger eastBaseCaptured do
12736: LD_EXP 10
12740: IFFALSE 12768
12742: GO 12744
12744: DISABLE
// begin wait ( rand ( 2 2$00 , 2 2$30 ) ) ;
12745: LD_INT 4200
12747: PPUSH
12748: LD_INT 5250
12750: PPUSH
12751: CALL_OW 12
12755: PPUSH
12756: CALL_OW 67
// convoyStarted := true ;
12760: LD_ADDR_EXP 17
12764: PUSH
12765: LD_INT 1
12767: ST_TO_ADDR
// end ;
12768: END
// every 0 0$1 trigger convoyStarted do
12769: LD_EXP 17
12773: IFFALSE 12857
12775: GO 12777
12777: DISABLE
// begin DialogueOn ;
12778: CALL_OW 6
// SayRadio ( Shariff , DShar-Convoy-1 ) ;
12782: LD_EXP 26
12786: PPUSH
12787: LD_STRING DShar-Convoy-1
12789: PPUSH
12790: CALL_OW 94
// Say ( Heike , DH-Convoy-2 ) ;
12794: LD_EXP 18
12798: PPUSH
12799: LD_STRING DH-Convoy-2
12801: PPUSH
12802: CALL_OW 88
// DialogueOff ;
12806: CALL_OW 7
// PrepareConvoy ;
12810: CALL 6069 0 0
// repeat wait ( rand ( 3 3$30 , 6 6$30 ) ) ;
12814: LD_INT 7350
12816: PPUSH
12817: LD_INT 13650
12819: PPUSH
12820: CALL_OW 12
12824: PPUSH
12825: CALL_OW 67
// PrepareConvoy ;
12829: CALL 6069 0 0
// convoyCounter := convoyCounter - 1 ;
12833: LD_ADDR_EXP 16
12837: PUSH
12838: LD_EXP 16
12842: PUSH
12843: LD_INT 1
12845: MINUS
12846: ST_TO_ADDR
// until convoyCounter = 0 ;
12847: LD_EXP 16
12851: PUSH
12852: LD_INT 0
12854: EQUAL
12855: IFFALSE 12814
// end ;
12857: END
// every 0 0$1 trigger convoySavedCounter >= 10 do
12858: LD_EXP 15
12862: PUSH
12863: LD_INT 10
12865: GREATEREQUAL
12866: IFFALSE 12883
12868: GO 12870
12870: DISABLE
// SayRadio ( Omar , DOm-Fail-1 ) ;
12871: LD_EXP 28
12875: PPUSH
12876: LD_STRING DOm-Fail-1
12878: PPUSH
12879: CALL_OW 94
12883: END
// every 0 0$1 trigger not ruNorthGroup and not ruSouthGroup do
12884: LD_EXP 36
12888: NOT
12889: PUSH
12890: LD_EXP 37
12894: NOT
12895: AND
12896: IFFALSE 12908
12898: GO 12900
12900: DISABLE
// ChangeMissionObjectives ( RaiderDone ) ;
12901: LD_STRING RaiderDone
12903: PPUSH
12904: CALL_OW 337
12908: END
// every 0 0$1 trigger convoyCounter = 0 and not ruConvoySquad do var tmp ;
12909: LD_EXP 16
12913: PUSH
12914: LD_INT 0
12916: EQUAL
12917: PUSH
12918: LD_EXP 38
12922: NOT
12923: AND
12924: IFFALSE 13690
12926: GO 12928
12928: DISABLE
12929: LD_INT 0
12931: PPUSH
// begin ChangeMissionObjectives ( ReinforcementsDone ) ;
12932: LD_STRING ReinforcementsDone
12934: PPUSH
12935: CALL_OW 337
// InGameOn ;
12939: CALL_OW 8
// Say ( Heike , DH-end-1 ) ;
12943: LD_EXP 18
12947: PPUSH
12948: LD_STRING DH-end-1
12950: PPUSH
12951: CALL_OW 88
// wait ( 0 0$2 ) ;
12955: LD_INT 70
12957: PPUSH
12958: CALL_OW 67
// SayRadio ( Shariff , DShar-end-2 ) ;
12962: LD_EXP 26
12966: PPUSH
12967: LD_STRING DShar-end-2
12969: PPUSH
12970: CALL_OW 94
// if not ruNorthGroup and not ruSouthGroup then
12974: LD_EXP 36
12978: NOT
12979: PUSH
12980: LD_EXP 37
12984: NOT
12985: AND
12986: IFFALSE 13002
// begin Say ( Heike , DH-end-3 ) ;
12988: LD_EXP 18
12992: PPUSH
12993: LD_STRING DH-end-3
12995: PPUSH
12996: CALL_OW 88
// end else
13000: GO 13099
// begin Say ( Heike , DH-end-a-3 ) ;
13002: LD_EXP 18
13006: PPUSH
13007: LD_STRING DH-end-a-3
13009: PPUSH
13010: CALL_OW 88
// SayRadio ( Shariff , DShar-end-a-4 ) ;
13014: LD_EXP 26
13018: PPUSH
13019: LD_STRING DShar-end-a-4
13021: PPUSH
13022: CALL_OW 94
// Say ( Heike , DH-end-a-5 ) ;
13026: LD_EXP 18
13030: PPUSH
13031: LD_STRING DH-end-a-5
13033: PPUSH
13034: CALL_OW 88
// InGameOff ;
13038: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
13042: LD_INT 35
13044: PPUSH
13045: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
13049: LD_INT 22
13051: PUSH
13052: LD_INT 3
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: PUSH
13059: LD_INT 21
13061: PUSH
13062: LD_INT 1
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: PUSH
13069: EMPTY
13070: LIST
13071: LIST
13072: PPUSH
13073: CALL_OW 69
13077: PUSH
13078: LD_INT 0
13080: EQUAL
13081: IFFALSE 13042
// InGameOn ;
13083: CALL_OW 8
// Say ( Heike , DH-end-a-6 ) ;
13087: LD_EXP 18
13091: PPUSH
13092: LD_STRING DH-end-a-6
13094: PPUSH
13095: CALL_OW 88
// end ; SayRadio ( Shariff , DShar-end-3 ) ;
13099: LD_EXP 26
13103: PPUSH
13104: LD_STRING DShar-end-3
13106: PPUSH
13107: CALL_OW 94
// if drugsTested then
13111: LD_EXP 6
13115: IFFALSE 13129
// AddMedal ( med1 , 1 ) else
13117: LD_STRING med1
13119: PPUSH
13120: LD_INT 1
13122: PPUSH
13123: CALL_OW 101
13127: GO 13140
// AddMedal ( med1 , - 1 ) ;
13129: LD_STRING med1
13131: PPUSH
13132: LD_INT 1
13134: NEG
13135: PPUSH
13136: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 then
13140: LD_INT 22
13142: PUSH
13143: LD_INT 2
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PUSH
13150: LD_INT 33
13152: PUSH
13153: LD_INT 2
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: PPUSH
13164: CALL_OW 69
13168: PUSH
13169: LD_INT 3
13171: GREATEREQUAL
13172: PUSH
13173: LD_INT 22
13175: PUSH
13176: LD_INT 2
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: LD_INT 34
13185: PUSH
13186: LD_INT 31
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PPUSH
13197: CALL_OW 69
13201: PUSH
13202: LD_INT 2
13204: GREATEREQUAL
13205: AND
13206: IFFALSE 13220
// AddMedal ( med2 , 1 ) else
13208: LD_STRING med2
13210: PPUSH
13211: LD_INT 1
13213: PPUSH
13214: CALL_OW 101
13218: GO 13231
// AddMedal ( med2 , - 1 ) ;
13220: LD_STRING med2
13222: PPUSH
13223: LD_INT 1
13225: NEG
13226: PPUSH
13227: CALL_OW 101
// if convoySavedCounter < [ 10 , 8 , 6 ] [ Difficulty ] then
13231: LD_EXP 15
13235: PUSH
13236: LD_INT 10
13238: PUSH
13239: LD_INT 8
13241: PUSH
13242: LD_INT 6
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: LIST
13249: PUSH
13250: LD_OWVAR 67
13254: ARRAY
13255: LESS
13256: IFFALSE 13270
// AddMedal ( med3 , 1 ) else
13258: LD_STRING med3
13260: PPUSH
13261: LD_INT 1
13263: PPUSH
13264: CALL_OW 101
13268: GO 13281
// AddMedal ( med3 , - 1 ) ;
13270: LD_STRING med3
13272: PPUSH
13273: LD_INT 1
13275: NEG
13276: PPUSH
13277: CALL_OW 101
// GiveMedals ( MAIN ) ;
13281: LD_STRING MAIN
13283: PPUSH
13284: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
13288: LD_INT 22
13290: PUSH
13291: LD_INT 2
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PUSH
13298: LD_INT 23
13300: PUSH
13301: LD_INT 2
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PUSH
13308: LD_INT 21
13310: PUSH
13311: LD_INT 1
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: LIST
13322: PPUSH
13323: CALL_OW 69
13327: PPUSH
13328: CALL_OW 43
// SaveVariable ( convoySavedCounter , 05_ConvoySavedCounter ) ;
13332: LD_EXP 15
13336: PPUSH
13337: LD_STRING 05_ConvoySavedCounter
13339: PPUSH
13340: CALL_OW 39
// SaveVariable ( radarConstructed , 05_Radar ) ;
13344: LD_EXP 13
13348: PPUSH
13349: LD_STRING 05_Radar
13351: PPUSH
13352: CALL_OW 39
// SaveVariable ( drugsTested , 05_DrugsTested ) ;
13356: LD_EXP 6
13360: PPUSH
13361: LD_STRING 05_DrugsTested
13363: PPUSH
13364: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) >= 3 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) >= 2 , 05_RemoteControl ) ;
13368: LD_INT 22
13370: PUSH
13371: LD_INT 2
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: PUSH
13378: LD_INT 33
13380: PUSH
13381: LD_INT 2
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PPUSH
13392: CALL_OW 69
13396: PUSH
13397: LD_INT 3
13399: GREATEREQUAL
13400: PUSH
13401: LD_INT 22
13403: PUSH
13404: LD_INT 2
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: PUSH
13411: LD_INT 34
13413: PUSH
13414: LD_INT 31
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PPUSH
13425: CALL_OW 69
13429: PUSH
13430: LD_INT 2
13432: GREATEREQUAL
13433: AND
13434: PPUSH
13435: LD_STRING 05_RemoteControl
13437: PPUSH
13438: CALL_OW 39
// SaveCharacters ( Heike , 05_Heike ) ;
13442: LD_EXP 18
13446: PPUSH
13447: LD_STRING 05_Heike
13449: PPUSH
13450: CALL_OW 38
// if Aviradze then
13454: LD_EXP 30
13458: IFFALSE 13472
// SaveCharacters ( Aviradze , 05_Aviradze ) ;
13460: LD_EXP 30
13464: PPUSH
13465: LD_STRING 05_Aviradze
13467: PPUSH
13468: CALL_OW 38
// if Ibrahim then
13472: LD_EXP 21
13476: IFFALSE 13490
// SaveCharacters ( Ibrahim , 05_Ibrahim ) ;
13478: LD_EXP 21
13482: PPUSH
13483: LD_STRING 05_Ibrahim
13485: PPUSH
13486: CALL_OW 38
// if Kamil then
13490: LD_EXP 22
13494: IFFALSE 13508
// SaveCharacters ( Kamil , 05_Kamil ) ;
13496: LD_EXP 22
13500: PPUSH
13501: LD_STRING 05_Kamil
13503: PPUSH
13504: CALL_OW 38
// if Sophia then
13508: LD_EXP 24
13512: IFFALSE 13526
// SaveCharacters ( Sophia , 05_Sophia ) ;
13514: LD_EXP 24
13518: PPUSH
13519: LD_STRING 05_Sophia
13521: PPUSH
13522: CALL_OW 38
// if Kaia then
13526: LD_EXP 23
13530: IFFALSE 13544
// SaveCharacters ( Kaia , 05_Kaia ) ;
13532: LD_EXP 23
13536: PPUSH
13537: LD_STRING 05_Kaia
13539: PPUSH
13540: CALL_OW 38
// if Givi then
13544: LD_EXP 19
13548: IFFALSE 13562
// SaveCharacters ( Givi , 05_Givi ) ;
13550: LD_EXP 19
13554: PPUSH
13555: LD_STRING 05_Givi
13557: PPUSH
13558: CALL_OW 38
// if Mike then
13562: LD_EXP 20
13566: IFFALSE 13580
// SaveCharacters ( Mike , 05_Mike ) ;
13568: LD_EXP 20
13572: PPUSH
13573: LD_STRING 05_Mike
13575: PPUSH
13576: CALL_OW 38
// if Markov then
13580: LD_EXP 25
13584: IFFALSE 13598
// SaveCharacters ( Markov , 05_Markov ) ;
13586: LD_EXP 25
13590: PPUSH
13591: LD_STRING 05_Markov
13593: PPUSH
13594: CALL_OW 38
// if Kurt then
13598: LD_EXP 29
13602: IFFALSE 13616
// SaveCharacters ( Kurt , 05_Kurt ) ;
13604: LD_EXP 29
13608: PPUSH
13609: LD_STRING 05_Kurt
13611: PPUSH
13612: CALL_OW 38
// if heikeSecondSquad then
13616: LD_EXP 31
13620: IFFALSE 13634
// SaveCharacters ( heikeSecondSquad , 05_others ) ;
13622: LD_EXP 31
13626: PPUSH
13627: LD_STRING 05_others
13629: PPUSH
13630: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
13634: LD_ADDR_VAR 0 1
13638: PUSH
13639: LD_INT 22
13641: PUSH
13642: LD_INT 2
13644: PUSH
13645: EMPTY
13646: LIST
13647: LIST
13648: PUSH
13649: LD_INT 23
13651: PUSH
13652: LD_INT 0
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: PPUSH
13663: CALL_OW 69
13667: ST_TO_ADDR
// if tmp then
13668: LD_VAR 0 1
13672: IFFALSE 13686
// SaveCharacters ( tmp , 05_apes ) ;
13674: LD_VAR 0 1
13678: PPUSH
13679: LD_STRING 05_apes
13681: PPUSH
13682: CALL_OW 38
// YouWin ;
13686: CALL_OW 103
// end ; end_of_file
13690: PPOPN 1
13692: END
// every 0 0$40 trigger westBaseCaptured and GetResourceArea ( westCratesArea , mat_cans ) < 20 do
13693: LD_EXP 9
13697: PUSH
13698: LD_INT 13
13700: PPUSH
13701: LD_INT 1
13703: PPUSH
13704: CALL_OW 287
13708: PUSH
13709: LD_INT 20
13711: LESS
13712: AND
13713: IFFALSE 13740
13715: GO 13717
13717: DISABLE
// begin enable ;
13718: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , westCratesArea , true ) ;
13719: LD_INT 1
13721: PPUSH
13722: LD_INT 5
13724: PPUSH
13725: CALL_OW 12
13729: PPUSH
13730: LD_INT 13
13732: PPUSH
13733: LD_INT 1
13735: PPUSH
13736: CALL_OW 55
// end ; end_of_file
13740: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
13741: GO 13743
13743: DISABLE
// begin ru_radar := 98 ;
13744: LD_ADDR_EXP 41
13748: PUSH
13749: LD_INT 98
13751: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
13752: LD_ADDR_EXP 42
13756: PUSH
13757: LD_INT 89
13759: ST_TO_ADDR
// us_hack := 99 ;
13760: LD_ADDR_EXP 43
13764: PUSH
13765: LD_INT 99
13767: ST_TO_ADDR
// us_artillery := 97 ;
13768: LD_ADDR_EXP 44
13772: PUSH
13773: LD_INT 97
13775: ST_TO_ADDR
// ar_bio_bomb := 91 ;
13776: LD_ADDR_EXP 45
13780: PUSH
13781: LD_INT 91
13783: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
13784: LD_ADDR_EXP 46
13788: PUSH
13789: LD_INT 92
13791: ST_TO_ADDR
// tech_Artillery := 80 ;
13792: LD_ADDR_EXP 47
13796: PUSH
13797: LD_INT 80
13799: ST_TO_ADDR
// tech_RadMat := 81 ;
13800: LD_ADDR_EXP 48
13804: PUSH
13805: LD_INT 81
13807: ST_TO_ADDR
// tech_BasicTools := 82 ;
13808: LD_ADDR_EXP 49
13812: PUSH
13813: LD_INT 82
13815: ST_TO_ADDR
// tech_Cargo := 83 ;
13816: LD_ADDR_EXP 50
13820: PUSH
13821: LD_INT 83
13823: ST_TO_ADDR
// tech_Track := 84 ;
13824: LD_ADDR_EXP 51
13828: PUSH
13829: LD_INT 84
13831: ST_TO_ADDR
// tech_Crane := 85 ;
13832: LD_ADDR_EXP 52
13836: PUSH
13837: LD_INT 85
13839: ST_TO_ADDR
// tech_Bulldozer := 86 ;
13840: LD_ADDR_EXP 53
13844: PUSH
13845: LD_INT 86
13847: ST_TO_ADDR
// tech_Hovercraft := 87 ;
13848: LD_ADDR_EXP 54
13852: PUSH
13853: LD_INT 87
13855: ST_TO_ADDR
// end ;
13856: END
